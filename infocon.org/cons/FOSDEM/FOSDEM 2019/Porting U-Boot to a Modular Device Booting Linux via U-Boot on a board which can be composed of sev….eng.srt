1
00:00:05,160 --> 00:00:12,670
good afternoon my name<font color="#E5E5E5"> is Marc Bohan and</font>

2
00:00:10,389 --> 00:00:16,600
I'm going to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about what I have been</font>

3
00:00:12,670 --> 00:00:18,060
<font color="#CCCCCC">working on for the</font><font color="#E5E5E5"> last few months in at</font>

4
00:00:16,600 --> 00:00:22,180
work

5
00:00:18,060 --> 00:00:26,560
and that is about porting you<font color="#CCCCCC"> boot to a</font>

6
00:00:22,180 --> 00:00:30,420
modular device a device which into which

7
00:00:26,560 --> 00:00:33,160
different modules can be plucked<font color="#E5E5E5"> like</font>

8
00:00:30,420 --> 00:00:35,680
<font color="#CCCCCC">USB</font><font color="#E5E5E5"> or something like that but it</font>

9
00:00:33,160 --> 00:00:41,709
<font color="#E5E5E5">doesn't work like USB so a different</font>

10
00:00:35,680 --> 00:00:47,679
approach<font color="#E5E5E5"> had to</font><font color="#CCCCCC"> be chosen here we have</font>

11
00:00:41,710 --> 00:00:50,850
the contents<font color="#CCCCCC"> about the presentation so</font>

12
00:00:47,679 --> 00:00:57,339
first about me<font color="#CCCCCC"> I was born in Slovakia</font>

13
00:00:50,850 --> 00:01:00,420
<font color="#E5E5E5">1991 using Linux from 14 currently I am</font>

14
00:00:57,339 --> 00:01:02,589
studying<font color="#E5E5E5"> computer science in</font><font color="#CCCCCC"> prac</font><font color="#E5E5E5"> and</font>

15
00:01:00,420 --> 00:01:06,420
for the last two<font color="#CCCCCC"> years I</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> been</font>

16
00:01:02,589 --> 00:01:10,810
working<font color="#E5E5E5"> at</font><font color="#CCCCCC"> Caesars Nick on project torus</font>

17
00:01:06,420 --> 00:01:15,969
<font color="#E5E5E5">and know the problem which this</font>

18
00:01:10,810 --> 00:01:18,570
presentation is about was for solved for

19
00:01:15,969 --> 00:01:18,570
2d<font color="#CCCCCC"> smocks</font>

20
00:01:21,060 --> 00:01:29,140
so now what<font color="#E5E5E5"> is device three</font><font color="#CCCCCC"> I don't know</font>

21
00:01:26,590 --> 00:01:34,030
how<font color="#E5E5E5"> people here are proficient in the</font>

22
00:01:29,140 --> 00:01:36,509
<font color="#E5E5E5">woods</font><font color="#CCCCCC"> so let's hope this is not too much</font>

23
00:01:34,030 --> 00:01:41,289
<font color="#CCCCCC">for you</font>

24
00:01:36,509 --> 00:01:43,420
device three mmm<font color="#E5E5E5"> the operating system</font>

25
00:01:41,289 --> 00:01:48,909
<font color="#E5E5E5">kernel has to know how different</font>

26
00:01:43,420 --> 00:01:53,500
computer parts components<font color="#E5E5E5"> are on a board</font>

27
00:01:48,909 --> 00:01:58,840
are connected to<font color="#CCCCCC"> each other</font><font color="#E5E5E5"> and for this</font>

28
00:01:53,500 --> 00:02:04,240
device<font color="#E5E5E5"> three was the standard for device</font>

29
00:01:58,840 --> 00:02:06,520
<font color="#E5E5E5">trip was</font><font color="#CCCCCC"> created</font><font color="#E5E5E5"> device three is a name</font>

30
00:02:04,240 --> 00:02:10,299
suggests is a graph in<font color="#CCCCCC"> which each node</font>

31
00:02:06,520 --> 00:02:14,170
<font color="#E5E5E5">represents one device has properties</font>

32
00:02:10,299 --> 00:02:18,220
about what what type of device it is

33
00:02:14,170 --> 00:02:21,220
<font color="#E5E5E5">which driver should</font><font color="#CCCCCC"> be used and which</font>

34
00:02:18,220 --> 00:02:26,160
<font color="#CCCCCC">into interrupt lines can are</font><font color="#E5E5E5"> connected</font>

35
00:02:21,220 --> 00:02:26,160
to the to the device and so on um

36
00:02:27,150 --> 00:02:36,010
actually it's not a three in graph

37
00:02:31,900 --> 00:02:40,060
theory because the<font color="#CCCCCC"> edges can form a</font>

38
00:02:36,010 --> 00:02:43,679
directed<font color="#E5E5E5"> cycle sometimes so so it should</font>

39
00:02:40,060 --> 00:02:43,680
be<font color="#CCCCCC"> maybe called the device graph</font>

40
00:02:46,480 --> 00:02:53,129
well what if some components are

41
00:02:50,530 --> 00:02:57,760
<font color="#CCCCCC">plugable</font><font color="#E5E5E5"> Oh</font>

42
00:02:53,129 --> 00:03:00,340
for example<font color="#E5E5E5"> USB is pluggable into into</font>

43
00:02:57,760 --> 00:03:04,840
each device which supports<font color="#E5E5E5"> USB if you</font>

44
00:03:00,340 --> 00:03:07,330
have a router<font color="#E5E5E5"> or a Raspberry Pi</font><font color="#CCCCCC"> you can</font>

45
00:03:04,840 --> 00:03:13,150
also plug PCI cards<font color="#E5E5E5"> which</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> Express</font>

46
00:03:07,330 --> 00:03:17,200
cards in computers and nowadays<font color="#E5E5E5"> SDIO can</font>

47
00:03:13,150 --> 00:03:24,459
be used so we can block a Wi-Fi card

48
00:03:17,200 --> 00:03:26,828
into the slot for<font color="#E5E5E5"> SD cards but what if</font>

49
00:03:24,459 --> 00:03:32,470
<font color="#E5E5E5">the components which we are talking</font>

50
00:03:26,829 --> 00:03:40,590
<font color="#CCCCCC">about</font><font color="#E5E5E5"> aren't blocked</font><font color="#CCCCCC"> by as such a</font><font color="#E5E5E5"> bus</font>

51
00:03:32,470 --> 00:03:43,360
that that supports<font color="#E5E5E5"> such a change mmm</font>

52
00:03:40,590 --> 00:03:46,239
then device<font color="#E5E5E5"> three has to</font><font color="#CCCCCC"> be changed</font><font color="#E5E5E5"> if</font>

53
00:03:43,360 --> 00:03:51,510
you have USB devices you don't<font color="#CCCCCC"> you do</font>

54
00:03:46,239 --> 00:03:51,510
not<font color="#CCCCCC"> have to tell</font><font color="#E5E5E5"> the operating</font><font color="#CCCCCC"> system or</font>

55
00:03:51,720 --> 00:03:58,930
which USB device is connected because

56
00:03:55,019 --> 00:04:02,799
USB supports or<font color="#E5E5E5"> self identification so</font>

57
00:03:58,930 --> 00:04:04,750
the operating system can can read from

58
00:04:02,799 --> 00:04:10,239
the<font color="#CCCCCC"> USB device what type of device it is</font>

59
00:04:04,750 --> 00:04:12,930
but and<font color="#E5E5E5"> also from</font><font color="#CCCCCC"> SDIO and PCI Express</font>

60
00:04:10,239 --> 00:04:19,660
but if you have for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> raspberry</font><font color="#CCCCCC"> P</font>

61
00:04:12,930 --> 00:04:22,300
with the heavy barrel<font color="#E5E5E5"> shield or if you</font>

62
00:04:19,660 --> 00:04:26,320
have a there are many many<font color="#CCCCCC"> kinds of</font>

63
00:04:22,300 --> 00:04:28,210
<font color="#E5E5E5">shield now now I read about TV head for</font>

64
00:04:26,320 --> 00:04:30,190
<font color="#CCCCCC">full Raspberry Pi</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> there is something</font>

65
00:04:28,210 --> 00:04:34,780
<font color="#E5E5E5">like</font><font color="#CCCCCC"> that then you have</font><font color="#E5E5E5"> to change the</font>

66
00:04:30,190 --> 00:04:40,110
device tree<font color="#E5E5E5"> which with which you boot</font>

67
00:04:34,780 --> 00:04:40,109
boots the boots Linux

68
00:04:41,070 --> 00:04:51,400
so and our device or<font color="#CCCCCC"> expose it several</font>

69
00:04:49,770 --> 00:04:57,190
interfaces

70
00:04:51,400 --> 00:05:01,989
yeah like USB<font color="#CCCCCC"> PCI and Ethernet via one</font>

71
00:04:57,190 --> 00:05:04,180
connector and there are several

72
00:05:01,990 --> 00:05:06,730
different<font color="#E5E5E5"> modules which can be connected</font>

73
00:05:04,180 --> 00:05:09,610
<font color="#E5E5E5">to the device and they can also be</font>

74
00:05:06,730 --> 00:05:11,890
<font color="#CCCCCC">connected in some of them can</font><font color="#E5E5E5"> be</font>

75
00:05:09,610 --> 00:05:15,610
connected multiple times for<font color="#CCCCCC"> example</font>

76
00:05:11,890 --> 00:05:20,039
<font color="#E5E5E5">switch module can be connected more</font>

77
00:05:15,610 --> 00:05:28,380
times and<font color="#CCCCCC"> then you have multiple ports</font>

78
00:05:20,040 --> 00:05:28,380
<font color="#E5E5E5">Ethernet</font><font color="#CCCCCC"> ports the topology of how the</font>

79
00:05:28,950 --> 00:05:35,680
<font color="#E5E5E5">topology of how these modules are</font>

80
00:05:31,210 --> 00:05:39,489
connected<font color="#CCCCCC"> can be read by a spi by a</font><font color="#E5E5E5"> FB</font>

81
00:05:35,680 --> 00:05:41,860
<font color="#E5E5E5">i-- shift register and</font><font color="#CCCCCC"> the problem I was</font>

82
00:05:39,490 --> 00:05:48,610
solving<font color="#E5E5E5"> was how to let the cardinal know</font>

83
00:05:41,860 --> 00:05:50,790
in an elegant elegant way which modules

84
00:05:48,610 --> 00:05:50,790
are connected

85
00:05:57,730 --> 00:06:03,340
normally<font color="#CCCCCC"> for this kind</font><font color="#E5E5E5"> of thing there</font>

86
00:06:00,760 --> 00:06:08,020
are device<font color="#CCCCCC"> three-hour lays device</font><font color="#E5E5E5"> three</font>

87
00:06:03,340 --> 00:06:10,799
<font color="#E5E5E5">overlays are a special kind of device</font>

88
00:06:08,020 --> 00:06:18,190
trees device<font color="#CCCCCC"> three bond binaries which</font>

89
00:06:10,800 --> 00:06:22,570
the bootloader<font color="#E5E5E5"> can overlay over a normal</font>

90
00:06:18,190 --> 00:06:27,190
<font color="#E5E5E5">device</font><font color="#CCCCCC"> tree and it will somehow change</font>

91
00:06:22,570 --> 00:06:31,349
the<font color="#CCCCCC"> original device</font><font color="#E5E5E5"> three binary it will</font>

92
00:06:27,190 --> 00:06:34,180
for example<font color="#CCCCCC"> it will add</font><font color="#E5E5E5"> some devices or</font>

93
00:06:31,350 --> 00:06:37,180
connect create<font color="#E5E5E5"> some edges in the device</font>

94
00:06:34,180 --> 00:06:39,370
tree so that<font color="#E5E5E5"> the kernel will know that</font>

95
00:06:37,180 --> 00:06:42,700
<font color="#E5E5E5">something is connected</font>

96
00:06:39,370 --> 00:06:45,070
additionally here we here is a

97
00:06:42,700 --> 00:06:49,300
screenshot of listing of all the

98
00:06:45,070 --> 00:06:52,120
different<font color="#E5E5E5"> device we otherwise supported</font>

99
00:06:49,300 --> 00:06:56,230
by<font color="#CCCCCC"> Raspberry Pi</font><font color="#E5E5E5"> with you if you look</font>

100
00:06:52,120 --> 00:06:58,900
into the /boot directory<font color="#CCCCCC"> slash slash</font>

101
00:06:56,230 --> 00:07:02,170
<font color="#CCCCCC">otherwise in on your Raspberry Pi</font><font color="#E5E5E5"> you</font>

102
00:06:58,900 --> 00:07:07,049
<font color="#CCCCCC">can find all these otherwise and more</font>

103
00:07:02,170 --> 00:07:07,050
here are only<font color="#CCCCCC"> 14 listed</font>

104
00:07:10,170 --> 00:07:19,090
so the question is can we<font color="#E5E5E5"> use device</font>

105
00:07:15,550 --> 00:07:23,320
<font color="#CCCCCC">three overlays</font><font color="#E5E5E5"> for each module on our</font>

106
00:07:19,090 --> 00:07:26,469
board<font color="#E5E5E5"> and the answer is no because the</font>

107
00:07:23,320 --> 00:07:29,320
parameters in the for the device<font color="#E5E5E5"> three</font>

108
00:07:26,470 --> 00:07:33,220
for<font color="#E5E5E5"> each module are dependent not only</font>

109
00:07:29,320 --> 00:07:36,640
on which module disease but<font color="#E5E5E5"> also where</font>

110
00:07:33,220 --> 00:07:38,800
in the topology<font color="#CCCCCC"> it is connected</font><font color="#E5E5E5"> so if</font>

111
00:07:36,640 --> 00:07:41,620
it's if it is on the<font color="#E5E5E5"> second place after</font>

112
00:07:38,800 --> 00:07:43,810
some different module<font color="#E5E5E5"> then the</font>

113
00:07:41,620 --> 00:07:47,740
parameters have<font color="#E5E5E5"> to change for for this</font>

114
00:07:43,810 --> 00:07:57,270
module<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example if I have a module</font>

115
00:07:47,740 --> 00:08:01,630
<font color="#E5E5E5">for the</font><font color="#CCCCCC"> Ford van for a zippy cage its</font>

116
00:07:57,270 --> 00:08:04,000
dependent on<font color="#E5E5E5"> if it is on for example on</font>

117
00:08:01,630 --> 00:08:06,390
the third place or if it is directly

118
00:08:04,000 --> 00:08:11,530
<font color="#CCCCCC">connected to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> CPU module because</font>

119
00:08:06,390 --> 00:08:17,800
there are GPIO s on the<font color="#CCCCCC"> SSD</font><font color="#E5E5E5"> cage and the</font>

120
00:08:11,530 --> 00:08:23,489
GPIO s can<font color="#CCCCCC"> be read via the SPI line wire</font>

121
00:08:17,800 --> 00:08:23,490
which the the<font color="#CCCCCC"> topology is also read</font>

122
00:08:24,580 --> 00:08:36,880
so so we can't use device<font color="#E5E5E5"> three our</font>

123
00:08:28,210 --> 00:08:39,370
<font color="#E5E5E5">lives for this problem really</font><font color="#CCCCCC"> at first I</font>

124
00:08:36,880 --> 00:08:43,780
actually<font color="#E5E5E5"> use device three over our lives</font>

125
00:08:39,370 --> 00:08:45,760
<font color="#E5E5E5">but</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> as you can see the number</font><font color="#CCCCCC"> of</font>

126
00:08:43,780 --> 00:08:50,520
different<font color="#E5E5E5"> device trees if I say</font>

127
00:08:45,760 --> 00:08:55,470
otherwise grows rapidly because of each

128
00:08:50,520 --> 00:09:01,860
each configuration<font color="#E5E5E5"> has to have its own</font>

129
00:08:55,470 --> 00:09:05,620
<font color="#E5E5E5">overlay</font><font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example if I connect</font><font color="#CCCCCC"> 303</font>

130
00:09:01,860 --> 00:09:08,560
switches of with chipset peridot

131
00:09:05,620 --> 00:09:11,200
then I have to have<font color="#CCCCCC"> different device to</font>

132
00:09:08,560 --> 00:09:16,719
<font color="#E5E5E5">three other way as when I connect only</font>

133
00:09:11,200 --> 00:09:22,900
<font color="#CCCCCC">to</font><font color="#E5E5E5"> oh and this will grow more rapidly</font>

134
00:09:16,720 --> 00:09:29,070
<font color="#E5E5E5">because the SFP module can also will</font>

135
00:09:22,900 --> 00:09:32,140
also<font color="#E5E5E5"> multiply the number by a by</font><font color="#CCCCCC"> two so</font>

136
00:09:29,070 --> 00:09:36,960
so we could use device we are<font color="#E5E5E5"> relays but</font>

137
00:09:32,140 --> 00:09:36,960
it's not very nice and<font color="#E5E5E5"> elegant</font>

138
00:09:39,510 --> 00:09:49,170
fortunately he would<font color="#E5E5E5"> has this feature</font>

139
00:09:44,240 --> 00:09:52,290
that<font color="#CCCCCC"> each board specific code can use</font><font color="#E5E5E5"> so</font>

140
00:09:49,170 --> 00:09:55,889
<font color="#CCCCCC">for</font><font color="#E5E5E5"> different boards in the</font><font color="#CCCCCC"> u-boot</font>

141
00:09:52,290 --> 00:09:59,519
source you have a special code for

142
00:09:55,889 --> 00:10:02,730
booting them and one of<font color="#CCCCCC"> the function one</font>

143
00:09:59,519 --> 00:10:07,800
of the functions you can write for for

144
00:10:02,730 --> 00:10:11,370
<font color="#E5E5E5">your board is</font><font color="#CCCCCC"> FD board setup which will</font>

145
00:10:07,800 --> 00:10:13,199
change which will pass you the pointer

146
00:10:11,370 --> 00:10:16,339
to the<font color="#E5E5E5"> device</font><font color="#CCCCCC"> three loved it by the user</font>

147
00:10:13,199 --> 00:10:20,040
<font color="#E5E5E5">or by the script booting the operating</font>

148
00:10:16,339 --> 00:10:25,970
system and in this function you can

149
00:10:20,040 --> 00:10:30,620
change the device<font color="#CCCCCC"> 3</font><font color="#E5E5E5"> fix</font><font color="#CCCCCC"> it or something</font>

150
00:10:25,970 --> 00:10:37,560
remove nodes create<font color="#CCCCCC"> nodes and so</font><font color="#E5E5E5"> on</font>

151
00:10:30,620 --> 00:10:42,300
so at first<font color="#CCCCCC"> I</font><font color="#E5E5E5"> tried to create whole wall</font>

152
00:10:37,560 --> 00:10:45,599
nodes for each<font color="#E5E5E5"> module in in this</font>

153
00:10:42,300 --> 00:10:49,050
function<font color="#CCCCCC"> so the main device</font><font color="#E5E5E5"> 3 in the</font>

154
00:10:45,600 --> 00:10:51,750
kernel from<font color="#E5E5E5"> 4 for the kernel didn't</font>

155
00:10:49,050 --> 00:10:53,939
contain notes for for the modules only

156
00:10:51,750 --> 00:10:58,589
for the CPU module<font color="#E5E5E5"> not for the pluggable</font>

157
00:10:53,940 --> 00:11:03,060
modules and the my code in<font color="#E5E5E5"> active board</font>

158
00:10:58,589 --> 00:11:05,910
<font color="#CCCCCC">setup or created all the</font><font color="#E5E5E5"> know all the</font>

159
00:11:03,060 --> 00:11:08,819
nodes for all the connected modules but

160
00:11:05,910 --> 00:11:14,269
the result was almost<font color="#E5E5E5"> five hundred</font>

161
00:11:08,819 --> 00:11:14,269
fifteen hundred lines of ugly<font color="#E5E5E5"> C code</font>

162
00:11:14,510 --> 00:11:27,720
ugly if if I wanted<font color="#E5E5E5"> to check for every</font>

163
00:11:21,779 --> 00:11:30,689
possible error<font color="#E5E5E5"> then it was ugly</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> and</font>

164
00:11:27,720 --> 00:11:33,480
many times it<font color="#E5E5E5"> was the same thing but</font>

165
00:11:30,690 --> 00:11:38,000
<font color="#E5E5E5">something was different so you couldn't</font>

166
00:11:33,480 --> 00:11:39,230
write a specific<font color="#CCCCCC"> a special function for</font>

167
00:11:38,000 --> 00:11:42,779
everything

168
00:11:39,230 --> 00:11:51,360
it couldn't be squashed<font color="#CCCCCC"> instead</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> I by</font>

169
00:11:42,779 --> 00:11:52,790
using functions<font color="#CCCCCC"> so I asked myself how to</font>

170
00:11:51,360 --> 00:11:55,980
do it more

171
00:11:52,790 --> 00:12:02,760
so the code how to do it so<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font>

172
00:11:55,980 --> 00:12:04,290
code will look<font color="#E5E5E5"> more nice and I have</font>

173
00:12:02,760 --> 00:12:07,350
decided that the right metric was

174
00:12:04,290 --> 00:12:11,640
minimizing<font color="#E5E5E5"> number of the changes</font><font color="#CCCCCC"> that</font>

175
00:12:07,350 --> 00:12:15,630
the code in<font color="#E5E5E5"> Ubud has to do or in the</font>

176
00:12:11,640 --> 00:12:22,470
device<font color="#CCCCCC"> 3 so that</font><font color="#E5E5E5"> it can put correctly</font>

177
00:12:15,630 --> 00:12:26,910
the device so I decided that I<font color="#CCCCCC"> will</font>

178
00:12:22,470 --> 00:12:31,589
write a note for<font color="#CCCCCC"> every module inside</font><font color="#E5E5E5"> the</font>

179
00:12:26,910 --> 00:12:35,819
main device<font color="#CCCCCC"> 3 in Linux</font><font color="#E5E5E5"> but I I will use</font>

180
00:12:31,589 --> 00:12:38,750
status disabled for<font color="#CCCCCC"> those nodes so that</font>

181
00:12:35,819 --> 00:12:43,949
kernel will ignore them on default and

182
00:12:38,750 --> 00:12:47,730
on boot time you boot in this<font color="#CCCCCC"> FD board</font>

183
00:12:43,949 --> 00:12:51,209
<font color="#CCCCCC">setup</font><font color="#E5E5E5"> function will just look at the SP</font>

184
00:12:47,730 --> 00:12:55,649
<font color="#CCCCCC">SPI line</font><font color="#E5E5E5"> discover which modules are</font>

185
00:12:51,209 --> 00:12:58,768
connected<font color="#CCCCCC"> and it will just change status</font>

186
00:12:55,649 --> 00:13:04,380
to<font color="#E5E5E5"> ok on on those nodes which are</font>

187
00:12:58,769 --> 00:13:06,720
connected and<font color="#E5E5E5"> also sometimes it has</font><font color="#CCCCCC"> to</font>

188
00:13:04,380 --> 00:13:08,699
change<font color="#E5E5E5"> something more</font><font color="#CCCCCC"> because of</font><font color="#E5E5E5"> what</font>

189
00:13:06,720 --> 00:13:11,519
I've talked about some slides ago

190
00:13:08,699 --> 00:13:13,939
because<font color="#CCCCCC"> for some some modules need need</font>

191
00:13:11,519 --> 00:13:16,920
space<font color="#CCCCCC"> special</font><font color="#E5E5E5"> configuration about</font><font color="#CCCCCC"> rhythm</font>

192
00:13:13,939 --> 00:13:19,099
<font color="#E5E5E5">because of the position where where they</font>

193
00:13:16,920 --> 00:13:19,099
are

194
00:13:20,230 --> 00:13:22,830
so

195
00:13:29,240 --> 00:13:40,400
the result from this was only under 250

196
00:13:36,200 --> 00:13:44,000
lines of additional C code<font color="#CCCCCC"> I</font><font color="#E5E5E5"> have a</font>

197
00:13:40,400 --> 00:13:50,740
<font color="#E5E5E5">screenshot here it looks in my opinion</font>

198
00:13:44,000 --> 00:13:50,740
<font color="#E5E5E5">lot nicer</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> the original 1500 lines</font>

199
00:13:50,830 --> 00:14:04,720
we also add<font color="#E5E5E5"> 600 lines of device</font><font color="#CCCCCC"> recode</font>

200
00:13:58,700 --> 00:14:09,350
in the main device<font color="#E5E5E5"> tree in kernel and</font>

201
00:14:04,720 --> 00:14:11,800
the<font color="#E5E5E5"> at the status of this is that the</font>

202
00:14:09,350 --> 00:14:15,350
<font color="#CCCCCC">patches some of them are already</font>

203
00:14:11,800 --> 00:14:17,150
reviewed on kernel mailing list<font color="#E5E5E5"> so it</font>

204
00:14:15,350 --> 00:14:20,240
looks<font color="#E5E5E5"> like it will</font><font color="#CCCCCC"> be accepted into</font>

205
00:14:17,150 --> 00:14:25,689
kernel as well and it is it was already

206
00:14:20,240 --> 00:14:30,920
<font color="#CCCCCC">removed in you would hear in this</font>

207
00:14:25,690 --> 00:14:39,610
screenshot you<font color="#E5E5E5"> can see that I have to</font>

208
00:14:30,920 --> 00:14:45,819
change the name of the<font color="#CCCCCC"> node which which</font>

209
00:14:39,610 --> 00:14:45,820
<font color="#CCCCCC">expo exposes</font><font color="#E5E5E5"> GPIO s for the SFP module</font>

210
00:14:58,839 --> 00:15:08,810
so the advantages and<font color="#E5E5E5"> disadvantages</font><font color="#CCCCCC"> of</font>

211
00:15:04,220 --> 00:15:12,440
this solution<font color="#E5E5E5"> well in my</font><font color="#CCCCCC"> opinion the</font>

212
00:15:08,810 --> 00:15:18,050
advantages are<font color="#E5E5E5"> that there is more there</font>

213
00:15:12,440 --> 00:15:27,290
is less<font color="#CCCCCC"> C code new C code it is</font><font color="#E5E5E5"> also</font>

214
00:15:18,050 --> 00:15:32,449
more readable<font color="#E5E5E5"> I am I am</font><font color="#CCCCCC"> I actually had</font>

215
00:15:27,290 --> 00:15:34,370
the<font color="#CCCCCC"> 1500 lines</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> code or a</font><font color="#E5E5E5"> few months</font>

216
00:15:32,449 --> 00:15:36,589
ago but I didn't know<font color="#E5E5E5"> that I will be</font>

217
00:15:34,370 --> 00:15:38,720
making<font color="#E5E5E5"> this</font><font color="#CCCCCC"> presentation and I removed</font>

218
00:15:36,589 --> 00:15:47,360
<font color="#E5E5E5">it but if I had it you would see that</font>

219
00:15:38,720 --> 00:15:51,260
the<font color="#CCCCCC"> code was ugly</font><font color="#E5E5E5"> and another advantage</font>

220
00:15:47,360 --> 00:15:55,339
<font color="#CCCCCC">in my opinion is that when some</font>

221
00:15:51,260 --> 00:15:59,290
developer makes a<font color="#E5E5E5"> change in the in a</font>

222
00:15:55,339 --> 00:16:03,050
driver<font color="#E5E5E5"> in the kernel for example for the</font>

223
00:15:59,290 --> 00:16:07,160
switch in the<font color="#E5E5E5"> DSA subsystem and this</font>

224
00:16:03,050 --> 00:16:10,459
change would have<font color="#E5E5E5"> to also change device</font>

225
00:16:07,160 --> 00:16:13,689
<font color="#E5E5E5">trees somehow then if the whole device</font>

226
00:16:10,459 --> 00:16:16,518
<font color="#E5E5E5">tree is in the kernel in the kernel</font>

227
00:16:13,690 --> 00:16:19,160
repository<font color="#E5E5E5"> then the they will also</font>

228
00:16:16,519 --> 00:16:23,890
change<font color="#E5E5E5"> it and I I won't have to change</font>

229
00:16:19,160 --> 00:16:23,890
it<font color="#E5E5E5"> on my own</font>

230
00:16:23,949 --> 00:16:30,349
the disadvantage is<font color="#E5E5E5"> well</font><font color="#CCCCCC"> where we are</font>

231
00:16:27,860 --> 00:16:35,360
not using<font color="#E5E5E5"> overlays and they are meant</font>

232
00:16:30,350 --> 00:16:37,089
for this<font color="#E5E5E5"> kind of thing but they couldn't</font>

233
00:16:35,360 --> 00:16:40,989
be<font color="#CCCCCC"> used in</font>

234
00:16:37,089 --> 00:16:43,949
efficient<font color="#CCCCCC"> ways of so I</font><font color="#E5E5E5"> this I decided</font>

235
00:16:40,989 --> 00:16:43,949
<font color="#E5E5E5">not to use them</font>

236
00:16:46,550 --> 00:16:56,510
a bonus slide<font color="#E5E5E5"> mmm one problem which I</font>

237
00:16:52,580 --> 00:17:01,430
had to solve<font color="#E5E5E5"> which I needed to find a</font>

238
00:16:56,510 --> 00:17:05,420
solution<font color="#E5E5E5"> for on our board or service</font>

239
00:17:01,430 --> 00:17:08,709
lines<font color="#CCCCCC"> so the driver for unity</font>

240
00:17:05,420 --> 00:17:11,950
<font color="#CCCCCC">initialization of service lines is</font>

241
00:17:08,709 --> 00:17:16,810
loaded before<font color="#E5E5E5"> SPI driver</font>

242
00:17:11,950 --> 00:17:23,240
this means that<font color="#CCCCCC"> Celia's lines are</font>

243
00:17:16,810 --> 00:17:27,290
initialized before<font color="#E5E5E5"> and and when I</font>

244
00:17:23,240 --> 00:17:31,360
initialize<font color="#E5E5E5"> the service lines</font><font color="#CCCCCC"> I have to</font>

245
00:17:27,290 --> 00:17:35,240
know the<font color="#CCCCCC"> speed for</font><font color="#E5E5E5"> each line for example</font>

246
00:17:31,360 --> 00:17:39,409
if SFP module is connected<font color="#E5E5E5"> then</font><font color="#CCCCCC"> the</font>

247
00:17:35,240 --> 00:17:44,210
corresponding service<font color="#E5E5E5"> line has to be for</font>

248
00:17:39,410 --> 00:17:47,300
one gigabit but when when switch module

249
00:17:44,210 --> 00:17:49,880
is connected<font color="#E5E5E5"> the corresponding line has</font>

250
00:17:47,300 --> 00:17:54,590
to be<font color="#E5E5E5"> at two point five gigabits per</font>

251
00:17:49,880 --> 00:17:56,990
second<font color="#E5E5E5"> and when the service</font>

252
00:17:54,590 --> 00:17:59,659
<font color="#E5E5E5">initialization is done</font><font color="#CCCCCC"> before the SPI</font>

253
00:17:56,990 --> 00:18:03,380
<font color="#CCCCCC">then I cannot know which module is</font>

254
00:17:59,660 --> 00:18:07,670
connected<font color="#E5E5E5"> so there were two solutions</font>

255
00:18:03,380 --> 00:18:10,910
<font color="#CCCCCC">for</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> solution is was to write a</font>

256
00:18:07,670 --> 00:18:20,150
proper driver for<font color="#E5E5E5"> service initially</font>

257
00:18:10,910 --> 00:18:29,020
initially sorry<font color="#CCCCCC"> installation</font><font color="#E5E5E5"> by proper I</font>

258
00:18:20,150 --> 00:18:32,510
mean that the<font color="#CCCCCC"> SFP node in</font><font color="#E5E5E5"> your boot</font>

259
00:18:29,020 --> 00:18:35,330
should<font color="#E5E5E5"> indeed in the device</font><font color="#CCCCCC"> 3 should</font>

260
00:18:32,510 --> 00:18:39,830
have a pointer to<font color="#CCCCCC"> the service line</font><font color="#E5E5E5"> and</font>

261
00:18:35,330 --> 00:18:42,379
the driver then will would have known

262
00:18:39,830 --> 00:18:44,330
which speed to use if it<font color="#CCCCCC"> even is</font>

263
00:18:42,380 --> 00:18:46,400
<font color="#E5E5E5">connected to the SSP line on in the</font>

264
00:18:44,330 --> 00:18:49,159
device<font color="#E5E5E5"> tree it would have known that it</font>

265
00:18:46,400 --> 00:18:52,880
should enable the service<font color="#E5E5E5"> line on one</font>

266
00:18:49,160 --> 00:18:55,590
gigabit and<font color="#CCCCCC"> if the switch</font><font color="#E5E5E5"> node is</font>

267
00:18:52,880 --> 00:19:02,929
connected<font color="#E5E5E5"> then it would have known</font>

268
00:18:55,590 --> 00:19:05,519
it should enable it on<font color="#CCCCCC"> 2.5 but writing</font>

269
00:19:02,929 --> 00:19:07,499
completely<font color="#CCCCCC"> rewriting the service</font>

270
00:19:05,519 --> 00:19:12,019
<font color="#CCCCCC">initialization code was too much work</font>

271
00:19:07,499 --> 00:19:16,649
<font color="#CCCCCC">for my time so I decided that I will</font>

272
00:19:12,019 --> 00:19:22,919
write<font color="#E5E5E5"> off</font><font color="#CCCCCC"> for I will</font><font color="#E5E5E5"> solve this problem</font>

273
00:19:16,649 --> 00:19:26,428
<font color="#CCCCCC">by by</font><font color="#E5E5E5"> writing my own tiny implementation</font>

274
00:19:22,919 --> 00:19:33,740
implementation of<font color="#CCCCCC"> spi communication it</font>

275
00:19:26,429 --> 00:19:38,149
<font color="#E5E5E5">is only for</font><font color="#CCCCCC"> defined</font><font color="#E5E5E5"> 35 lines of code I</font>

276
00:19:33,740 --> 00:19:43,230
write to some registers directly on the

277
00:19:38,149 --> 00:19:47,219
CPU<font color="#E5E5E5"> and then read some registers and I</font>

278
00:19:43,230 --> 00:19:49,919
have read the<font color="#E5E5E5"> first 10 bytes from the</font>

279
00:19:47,220 --> 00:19:55,879
SPI<font color="#E5E5E5"> so that then I know which modules</font>

280
00:19:49,919 --> 00:19:55,879
are connected it is<font color="#E5E5E5"> not</font>

281
00:19:57,479 --> 00:20:10,019
this solution<font color="#E5E5E5"> is</font><font color="#CCCCCC"> not very elegant</font>

282
00:20:04,499 --> 00:20:12,179
<font color="#E5E5E5">because because I have to there is a</font>

283
00:20:10,019 --> 00:20:14,519
proper implementation of<font color="#CCCCCC"> spi</font>

284
00:20:12,179 --> 00:20:17,820
communication in a wood and I had to

285
00:20:14,519 --> 00:20:21,109
write<font color="#E5E5E5"> my</font><font color="#CCCCCC"> own</font><font color="#E5E5E5"> so it is called</font><font color="#CCCCCC"> the</font>

286
00:20:17,820 --> 00:20:25,619
duplication<font color="#E5E5E5"> but this can be removed</font><font color="#CCCCCC"> when</font>

287
00:20:21,109 --> 00:20:28,519
when we<font color="#E5E5E5"> have</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> correct service</font><font color="#CCCCCC"> in</font>

288
00:20:25,619 --> 00:20:28,519
<font color="#CCCCCC">isolation driver</font>

289
00:20:32,430 --> 00:20:38,240
<font color="#E5E5E5">okay that's all from me any questions</font>

290
00:20:41,900 --> 00:20:46,559
[Applause]

291
00:20:49,590 --> 00:20:54,549
this is possible<font color="#E5E5E5"> to</font><font color="#CCCCCC"> get some kind of</font>

292
00:20:52,270 --> 00:20:59,559
justification when another device is

293
00:20:54,549 --> 00:21:03,158
attached<font color="#CCCCCC"> our device does not support</font>

294
00:20:59,559 --> 00:21:06,610
<font color="#E5E5E5">unplugging only booting</font><font color="#CCCCCC"> I have</font><font color="#E5E5E5"> actually</font>

295
00:21:03,159 --> 00:21:11,770
talked today with<font color="#CCCCCC"> my colleague</font><font color="#E5E5E5"> if it was</font>

296
00:21:06,610 --> 00:21:13,600
<font color="#E5E5E5">possible if it were possible the problem</font>

297
00:21:11,770 --> 00:21:16,030
is that<font color="#CCCCCC"> our device if you</font><font color="#E5E5E5"> connect</font>

298
00:21:13,600 --> 00:21:20,039
something<font color="#E5E5E5"> the voltage will drop for a</font>

299
00:21:16,030 --> 00:21:23,200
little time<font color="#E5E5E5"> and the CPU will reset but</font>

300
00:21:20,039 --> 00:21:26,799
we have been<font color="#E5E5E5"> thinking</font><font color="#CCCCCC"> about if we could</font>

301
00:21:23,200 --> 00:21:31,600
use we could do hot plugging and<font color="#E5E5E5"> kernel</font>

302
00:21:26,799 --> 00:21:36,010
supports device<font color="#E5E5E5"> really changing online</font>

303
00:21:31,600 --> 00:21:38,740
<font color="#E5E5E5">so it would have to work</font><font color="#CCCCCC"> on it smooth</font><font color="#E5E5E5"> I</font>

304
00:21:36,010 --> 00:21:42,610
would have to write the drivers for for

305
00:21:38,740 --> 00:21:46,510
this but it could be working<font color="#E5E5E5"> without</font><font color="#CCCCCC"> our</font>

306
00:21:42,610 --> 00:21:48,399
device does<font color="#CCCCCC"> not support it now</font><font color="#E5E5E5"> I'll</font>

307
00:21:46,510 --> 00:21:51,570
devote<font color="#CCCCCC"> I would have to be changed maybe</font>

308
00:21:48,400 --> 00:21:51,570
maybe<font color="#E5E5E5"> next version</font>

309
00:21:58,770 --> 00:22:01,549
questions

310
00:22:02,490 --> 00:22:05,240
<font color="#E5E5E5">okay</font>

