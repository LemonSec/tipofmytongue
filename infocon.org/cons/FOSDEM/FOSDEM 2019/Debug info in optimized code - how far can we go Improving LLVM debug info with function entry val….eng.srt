1
00:00:04,640 --> 00:00:12,559
yep<font color="#E5E5E5"> so hi everyone thanks for</font><font color="#CCCCCC"> coming</font>

2
00:00:10,280 --> 00:00:15,379
my name is<font color="#CCCCCC"> George Fedorovitch</font><font color="#E5E5E5"> this is</font>

3
00:00:12,559 --> 00:00:19,850
<font color="#E5E5E5">Nicola</font><font color="#CCCCCC"> pizza we are coming from</font><font color="#E5E5E5"> a tak</font>

4
00:00:15,379 --> 00:00:22,460
company from Serbia<font color="#E5E5E5"> so we have been</font>

5
00:00:19,850 --> 00:00:25,330
<font color="#CCCCCC">working</font><font color="#E5E5E5"> as a team</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> various projects</font>

6
00:00:22,460 --> 00:00:28,760
in field of compilers debuggers

7
00:00:25,330 --> 00:00:32,028
<font color="#E5E5E5">profilers and so on we are going</font><font color="#CCCCCC"> to be</font>

8
00:00:28,760 --> 00:00:35,590
talking<font color="#E5E5E5"> today how far can we go with</font>

9
00:00:32,029 --> 00:00:39,320
debug info<font color="#E5E5E5"> in optimized code in all</font><font color="#CCCCCC"> vm</font>

10
00:00:35,590 --> 00:00:42,110
especially with an improvement<font color="#E5E5E5"> by</font>

11
00:00:39,320 --> 00:00:45,020
looking at function parameters and<font color="#E5E5E5"> to</font>

12
00:00:42,110 --> 00:00:48,980
value said<font color="#CCCCCC"> called point</font><font color="#E5E5E5"> to coincide</font>

13
00:00:45,020 --> 00:00:51,230
<font color="#E5E5E5">point</font><font color="#CCCCCC"> so since you know that</font><font color="#E5E5E5"> debugging</font>

14
00:00:48,980 --> 00:00:54,379
<font color="#E5E5E5">optimized code is very challenging</font>

15
00:00:51,230 --> 00:00:59,750
<font color="#E5E5E5">during these days</font><font color="#CCCCCC"> I really work well</font>

16
00:00:54,380 --> 00:01:04,600
<font color="#E5E5E5">hardness to improve that so yeah so</font><font color="#CCCCCC"> that</font>

17
00:00:59,750 --> 00:01:08,299
<font color="#E5E5E5">UK is a software company specialized in</font>

18
00:01:04,599 --> 00:01:11,750
system software<font color="#E5E5E5"> and</font><font color="#CCCCCC"> better systems</font><font color="#E5E5E5"> so as</font>

19
00:01:08,299 --> 00:01:16,070
I<font color="#E5E5E5"> said we are part of the group working</font>

20
00:01:11,750 --> 00:01:21,020
on compilers and tools from open source

21
00:01:16,070 --> 00:01:25,070
area such as GCC<font color="#CCCCCC"> binutils LVM lu</font><font color="#E5E5E5"> Ajit</font>

22
00:01:21,020 --> 00:01:30,470
and so on so the group has<font color="#CCCCCC"> been working</font>

23
00:01:25,070 --> 00:01:35,839
<font color="#CCCCCC">on lbm since 2010</font><font color="#E5E5E5"> and we are working on</font>

24
00:01:30,470 --> 00:01:41,600
debug related issues in<font color="#CCCCCC"> LVM for the last</font>

25
00:01:35,840 --> 00:01:44,810
two<font color="#E5E5E5"> years</font><font color="#CCCCCC"> so yeah here</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> when I</font><font color="#E5E5E5"> talk</font>

26
00:01:41,600 --> 00:01:47,179
<font color="#CCCCCC">about</font><font color="#E5E5E5"> today firstly we will start with</font>

27
00:01:44,810 --> 00:01:50,000
some general story about<font color="#E5E5E5"> debugging</font>

28
00:01:47,180 --> 00:01:52,880
software release products so<font color="#E5E5E5"> also you'll</font>

29
00:01:50,000 --> 00:01:58,159
describe a technique<font color="#CCCCCC"> that can be</font><font color="#E5E5E5"> used</font>

30
00:01:52,880 --> 00:02:01,310
within debugger for finding some actual

31
00:01:58,159 --> 00:02:06,110
values of function parameters<font color="#E5E5E5"> even they</font>

32
00:02:01,310 --> 00:02:08,869
are<font color="#E5E5E5"> described as optimized out so after</font>

33
00:02:06,110 --> 00:02:12,170
that we will point to some parts of our

34
00:02:08,869 --> 00:02:15,620
implementation<font color="#E5E5E5"> in</font><font color="#CCCCCC"> LLVM we took to</font>

35
00:02:12,170 --> 00:02:17,480
support this feature<font color="#E5E5E5"> and at the end</font>

36
00:02:15,620 --> 00:02:18,440
<font color="#CCCCCC">we'll show you</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> numbers that</font>

37
00:02:17,480 --> 00:02:19,820
<font color="#CCCCCC">actually</font>

38
00:02:18,440 --> 00:02:22,640
confirmed that we are improving

39
00:02:19,820 --> 00:02:28,790
<font color="#E5E5E5">something in the publication</font><font color="#CCCCCC"> courage</font><font color="#E5E5E5"> so</font>

40
00:02:22,640 --> 00:02:32,350
yeah it's that so<font color="#E5E5E5"> software release</font>

41
00:02:28,790 --> 00:02:37,760
products are compiled with some kind of

42
00:02:32,350 --> 00:02:41,019
optimizations<font color="#CCCCCC"> so</font><font color="#E5E5E5"> for compilers like GCC</font>

43
00:02:37,760 --> 00:02:44,929
and<font color="#CCCCCC"> LVM Clank</font><font color="#E5E5E5"> it is usually Oh two or</font>

44
00:02:41,020 --> 00:02:47,750
<font color="#CCCCCC">three</font><font color="#E5E5E5"> level so such a product might</font>

45
00:02:44,930 --> 00:02:51,020
produce a core<font color="#E5E5E5"> dump file on an embedded</font>

46
00:02:47,750 --> 00:02:54,650
<font color="#CCCCCC">system</font><font color="#E5E5E5"> and it could be starting point of</font>

47
00:02:51,020 --> 00:02:58,910
our analysis of<font color="#E5E5E5"> the problem so first</font>

48
00:02:54,650 --> 00:03:03,980
thing we<font color="#E5E5E5"> usually do after</font><font color="#CCCCCC"> loading</font><font color="#E5E5E5"> core</font>

49
00:02:58,910 --> 00:03:08,120
file into debugger<font color="#E5E5E5"> on our local machines</font>

50
00:03:03,980 --> 00:03:15,260
is analysis for the call trace from<font color="#E5E5E5"> the</font>

51
00:03:08,120 --> 00:03:18,650
<font color="#E5E5E5">crash so to the optimization pipeline</font><font color="#CCCCCC"> we</font>

52
00:03:15,260 --> 00:03:20,540
lose a lot of<font color="#E5E5E5"> debug information so in</font>

53
00:03:18,650 --> 00:03:24,220
those<font color="#E5E5E5"> call traces we see a lot of</font>

54
00:03:20,540 --> 00:03:27,980
<font color="#CCCCCC">optimized out parameters values so</font>

55
00:03:24,220 --> 00:03:31,580
actually we also noticed in those debug

56
00:03:27,980 --> 00:03:33,820
sessions<font color="#E5E5E5"> that even if a variable is</font>

57
00:03:31,580 --> 00:03:36,590
<font color="#E5E5E5">alive at some point it could</font><font color="#CCCCCC"> be</font>

58
00:03:33,820 --> 00:03:44,540
<font color="#E5E5E5">clobbered even earlier and reported as</font>

59
00:03:36,590 --> 00:03:48,220
optimized out so yeah so developers with

60
00:03:44,540 --> 00:03:53,709
more experience with<font color="#E5E5E5"> debuggers are aware</font>

61
00:03:48,220 --> 00:03:58,540
<font color="#E5E5E5">that some of</font><font color="#CCCCCC"> those values could found at</font>

62
00:03:53,709 --> 00:04:02,540
parents frame or frame above so yeah

63
00:03:58,540 --> 00:04:08,500
<font color="#CCCCCC">looking</font><font color="#E5E5E5"> at this example</font><font color="#CCCCCC"> here we see</font><font color="#E5E5E5"> that</font>

64
00:04:02,540 --> 00:04:11,420
parameter X is reported as optimized out

65
00:04:08,500 --> 00:04:13,760
but if we jump into frame<font color="#E5E5E5"> two we are</font>

66
00:04:11,420 --> 00:04:20,060
able to<font color="#E5E5E5"> print actual value at call side</font>

67
00:04:13,760 --> 00:04:21,680
<font color="#E5E5E5">point so yeah if we can do that why not</font>

68
00:04:20,060 --> 00:04:26,060
<font color="#E5E5E5">optimize all this process</font><font color="#CCCCCC"> within</font>

69
00:04:21,680 --> 00:04:29,060
debugger but we in order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do that we</font>

70
00:04:26,060 --> 00:04:32,530
need<font color="#CCCCCC"> additional information by a</font>

71
00:04:29,060 --> 00:04:36,650
<font color="#E5E5E5">compiler side so</font>

72
00:04:32,530 --> 00:04:38,780
in this example here<font color="#CCCCCC"> we</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> all that</font>

73
00:04:36,650 --> 00:04:42,080
process<font color="#CCCCCC"> optimized</font><font color="#E5E5E5"> on both sides</font>

74
00:04:38,780 --> 00:04:45,739
debugger<font color="#E5E5E5"> and compiler</font><font color="#CCCCCC"> and we also see</font>

75
00:04:42,080 --> 00:04:48,500
these<font color="#CCCCCC"> entry values printed out so</font>

76
00:04:45,740 --> 00:04:55,520
actually those optimized out values

77
00:04:48,500 --> 00:04:58,430
<font color="#E5E5E5">turned into actual values so yeah a</font>

78
00:04:55,520 --> 00:05:01,310
little<font color="#E5E5E5"> bit of motivation here to listen</font>

79
00:04:58,430 --> 00:05:05,260
<font color="#CCCCCC">to rest of presentation carefully</font><font color="#E5E5E5"> by</font>

80
00:05:01,310 --> 00:05:11,060
implementing this feature in<font color="#CCCCCC"> LVM client</font>

81
00:05:05,260 --> 00:05:15,140
we noticed that the number<font color="#CCCCCC"> of fully</font>

82
00:05:11,060 --> 00:05:19,280
<font color="#CCCCCC">covered</font><font color="#E5E5E5"> function parameters</font><font color="#CCCCCC"> increase</font>

83
00:05:15,140 --> 00:05:27,560
even<font color="#E5E5E5"> up to 15%</font><font color="#CCCCCC"> which is very good number</font>

84
00:05:19,280 --> 00:05:29,809
so<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> there are several dwarf symbols</font>

85
00:05:27,560 --> 00:05:33,580
introduced you know to support<font color="#E5E5E5"> the</font>

86
00:05:29,810 --> 00:05:37,340
feature<font color="#E5E5E5"> so does everyone know dwarf</font><font color="#CCCCCC"> I</font>

87
00:05:33,580 --> 00:05:41,930
hope no yeah<font color="#E5E5E5"> for those who aren't</font>

88
00:05:37,340 --> 00:05:45,469
<font color="#E5E5E5">familiar</font><font color="#CCCCCC"> actually the dwarf is standard</font>

89
00:05:41,930 --> 00:05:48,560
for describing debug information on<font color="#CCCCCC"> you</font>

90
00:05:45,470 --> 00:05:51,530
looks<font color="#E5E5E5"> like operating system so compilers</font>

91
00:05:48,560 --> 00:05:57,190
generate that so<font color="#CCCCCC"> debuggers consume it so</font>

92
00:05:51,530 --> 00:06:00,590
yeah to mention that it was<font color="#E5E5E5"> initially</font>

93
00:05:57,190 --> 00:06:05,560
introduced by<font color="#CCCCCC"> Jakob Eleniak and it was</font>

94
00:06:00,590 --> 00:06:09,530
implemented<font color="#E5E5E5"> in GCC</font><font color="#CCCCCC"> and gdb since 2011 so</font>

95
00:06:05,560 --> 00:06:13,580
basically those two tags represents call

96
00:06:09,530 --> 00:06:16,880
site and call site parameters<font color="#E5E5E5"> so those</font>

97
00:06:13,580 --> 00:06:20,479
attributes<font color="#E5E5E5"> describe them</font><font color="#CCCCCC"> so there is</font>

98
00:06:16,880 --> 00:06:22,930
<font color="#CCCCCC">also poor footprint</font><font color="#E5E5E5"> that can be used</font>

99
00:06:20,480 --> 00:06:30,710
within<font color="#CCCCCC"> warf expression for describing</font>

100
00:06:22,930 --> 00:06:34,580
actual value for parameters so let's

101
00:06:30,710 --> 00:06:38,690
jump into real example<font color="#E5E5E5"> so we see here a</font>

102
00:06:34,580 --> 00:06:44,659
real<font color="#E5E5E5"> call site printed into debug info</font>

103
00:06:38,690 --> 00:06:45,950
section so it says<font color="#CCCCCC"> that it lives at this</font>

104
00:06:44,660 --> 00:06:48,860
address<font color="#CCCCCC"> memo</font>

105
00:06:45,950 --> 00:06:52,430
<font color="#E5E5E5">is called PC actually it is as a</font>

106
00:06:48,860 --> 00:06:55,220
software call<font color="#E5E5E5"> instruction memory this</font>

107
00:06:52,430 --> 00:06:58,610
call origin<font color="#E5E5E5"> actually represents a</font>

108
00:06:55,220 --> 00:07:02,030
reference to debug information about

109
00:06:58,610 --> 00:07:04,460
<font color="#E5E5E5">call function this call</font><font color="#CCCCCC"> site parameter</font>

110
00:07:02,030 --> 00:07:06,919
is a child of<font color="#E5E5E5"> this particular call site</font>

111
00:07:04,460 --> 00:07:10,969
<font color="#CCCCCC">and it says that it lives at register 5</font>

112
00:07:06,920 --> 00:07:16,490
and at call point it had value 7

113
00:07:10,970 --> 00:07:22,370
so yeah<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> another</font><font color="#CCCCCC"> example so if the</font>

114
00:07:16,490 --> 00:07:26,180
parameter has<font color="#CCCCCC"> I'll touched unchanged</font>

115
00:07:22,370 --> 00:07:30,920
value to the course<font color="#E5E5E5"> of function we can</font>

116
00:07:26,180 --> 00:07:35,720
use this OP entry value actually<font color="#CCCCCC"> entry</font>

117
00:07:30,920 --> 00:07:38,810
value for describing actual value for

118
00:07:35,720 --> 00:07:43,270
that parameter<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> places where it</font>

119
00:07:38,810 --> 00:07:48,950
has<font color="#CCCCCC"> no location</font><font color="#E5E5E5"> information at all so</font>

120
00:07:43,270 --> 00:07:53,240
let's imagine that<font color="#E5E5E5"> a parameter has its</font>

121
00:07:48,950 --> 00:07:58,250
code<font color="#E5E5E5"> from address X to address that but</font>

122
00:07:53,240 --> 00:08:02,660
from<font color="#E5E5E5"> X 2</font><font color="#CCCCCC"> Epsilon address it has location</font>

123
00:07:58,250 --> 00:08:06,590
information but for for the rest of its

124
00:08:02,660 --> 00:08:08,480
scope we generate additional<font color="#CCCCCC"> OP entry</font>

125
00:08:06,590 --> 00:08:23,599
value for<font color="#E5E5E5"> describing the rest of the</font>

126
00:08:08,480 --> 00:08:27,290
scope<font color="#CCCCCC"> so yeah so hello everyone I will</font>

127
00:08:23,600 --> 00:08:30,650
<font color="#E5E5E5">present you entities that we introduced</font>

128
00:08:27,290 --> 00:08:33,920
on IR<font color="#E5E5E5"> machine</font><font color="#CCCCCC"> IR level in order to</font>

129
00:08:30,650 --> 00:08:36,650
<font color="#E5E5E5">follow information about</font><font color="#CCCCCC"> Co site to the</font>

130
00:08:33,919 --> 00:08:39,228
compilation process<font color="#CCCCCC"> I'll also introduce</font>

131
00:08:36,650 --> 00:08:41,770
you<font color="#E5E5E5"> with some</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> concerns that we</font>

132
00:08:39,229 --> 00:08:45,770
have<font color="#E5E5E5"> about our certain parts of</font>

133
00:08:41,770 --> 00:08:48,199
implementation so how many<font color="#E5E5E5"> of</font><font color="#CCCCCC"> you is</font>

134
00:08:45,770 --> 00:08:55,400
familiar with<font color="#CCCCCC"> debug info</font><font color="#E5E5E5"> metadata in</font>

135
00:08:48,200 --> 00:08:58,490
<font color="#CCCCCC">LLVM so basically</font><font color="#E5E5E5"> no I will explain it</font>

136
00:08:55,400 --> 00:08:59,360
briefly<font color="#CCCCCC"> basically it is inspired</font><font color="#E5E5E5"> by a</font>

137
00:08:58,490 --> 00:09:02,870
dwarf tag

138
00:08:59,360 --> 00:09:06,260
and it is used<font color="#E5E5E5"> to represent source</font>

139
00:09:02,870 --> 00:09:12,550
entities such as file functions lines

140
00:09:06,260 --> 00:09:15,770
lines electrical blocks variables etc<font color="#E5E5E5"> so</font>

141
00:09:12,550 --> 00:09:18,670
since<font color="#E5E5E5"> the begin for metadata is inspired</font>

142
00:09:15,770 --> 00:09:22,520
by dwarf<font color="#E5E5E5"> and we have that resembles and</font>

143
00:09:18,670 --> 00:09:24,680
George<font color="#CCCCCC"> has showed that Co</font><font color="#E5E5E5"> site</font>

144
00:09:22,520 --> 00:09:28,460
information<font color="#CCCCCC"> in dwarf is represented by</font>

145
00:09:24,680 --> 00:09:33,380
<font color="#CCCCCC">text echo site and tag Co site parameter</font>

146
00:09:28,460 --> 00:09:38,330
we decided to introduce di call site and

147
00:09:33,380 --> 00:09:41,780
the echo site<font color="#E5E5E5"> param metadata so here you</font>

148
00:09:38,330 --> 00:09:44,960
<font color="#E5E5E5">can see for call instruction that it has</font>

149
00:09:41,780 --> 00:09:48,470
attached metadata node<font color="#E5E5E5"> call site which</font>

150
00:09:44,960 --> 00:09:50,360
reference to<font color="#CCCCCC"> co site metadata</font><font color="#E5E5E5"> and we can</font>

151
00:09:48,470 --> 00:09:53,330
see that<font color="#CCCCCC"> Co site hell's following</font>

152
00:09:50,360 --> 00:09:57,220
<font color="#E5E5E5">arguments such as scope file it has</font>

153
00:09:53,330 --> 00:10:00,860
reference to array of<font color="#CCCCCC"> the ICO site param</font>

154
00:09:57,220 --> 00:10:06,080
<font color="#CCCCCC">it has line and it has reference to</font>

155
00:10:00,860 --> 00:10:09,500
called<font color="#E5E5E5"> sub program and for the</font><font color="#CCCCCC"> ICO side</font>

156
00:10:06,080 --> 00:10:13,520
param it has argument number<font color="#E5E5E5"> it has</font>

157
00:10:09,500 --> 00:10:15,800
reference to variable metadata<font color="#E5E5E5"> and it</font>

158
00:10:13,520 --> 00:10:19,340
has their expression<font color="#CCCCCC"> over that variable</font>

159
00:10:15,800 --> 00:10:22,189
now if called argument is<font color="#E5E5E5"> the constant</font>

160
00:10:19,340 --> 00:10:27,010
here here we would<font color="#CCCCCC"> have only the I</font>

161
00:10:22,190 --> 00:10:30,440
<font color="#CCCCCC">expression which represent</font><font color="#E5E5E5"> constant so</font>

162
00:10:27,010 --> 00:10:35,120
this the echo side<font color="#E5E5E5"> part is used as a</font>

163
00:10:30,440 --> 00:10:38,150
backup location for for<font color="#E5E5E5"> for catching</font>

164
00:10:35,120 --> 00:10:42,200
this parameter at entry we I will show

165
00:10:38,150 --> 00:10:44,720
primary location<font color="#E5E5E5"> later</font><font color="#CCCCCC"> and with this guy</font>

166
00:10:42,200 --> 00:10:47,320
with this metadata we actually emulate

167
00:10:44,720 --> 00:10:53,120
jumping back into<font color="#E5E5E5"> functions frame and</font>

168
00:10:47,320 --> 00:10:56,060
operating pretty certain expression we

169
00:10:53,120 --> 00:10:58,820
also need to mention that<font color="#CCCCCC"> in order to</font>

170
00:10:56,060 --> 00:11:01,150
<font color="#E5E5E5">use this new</font><font color="#CCCCCC"> value and to value for</font>

171
00:10:58,820 --> 00:11:04,400
representing other variables especially

172
00:11:01,150 --> 00:11:07,370
parameter<font color="#E5E5E5"> where variables we need</font><font color="#CCCCCC"> to</font>

173
00:11:04,400 --> 00:11:09,110
verify<font color="#CCCCCC"> that that parameter</font><font color="#E5E5E5"> has never</font>

174
00:11:07,370 --> 00:11:12,110
been modified through<font color="#E5E5E5"> the course of the</font>

175
00:11:09,110 --> 00:11:12,790
function so<font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to check this we</font>

176
00:11:12,110 --> 00:11:16,269
use

177
00:11:12,790 --> 00:11:19,240
<font color="#CCCCCC">samih</font><font color="#E5E5E5"> constant check and the we wrote</font>

178
00:11:16,269 --> 00:11:25,600
that information<font color="#E5E5E5"> inside</font><font color="#CCCCCC"> by a parameter</font>

179
00:11:19,240 --> 00:11:28,839
<font color="#E5E5E5">variable debug metadata so this approach</font>

180
00:11:25,600 --> 00:11:33,339
<font color="#E5E5E5">has certain benefits and it has certain</font>

181
00:11:28,839 --> 00:11:37,329
limitations<font color="#E5E5E5"> and regarding benefits we it</font>

182
00:11:33,339 --> 00:11:39,850
resembles<font color="#CCCCCC"> to Dwarf</font><font color="#E5E5E5"> tag tag and it</font>

183
00:11:37,329 --> 00:11:42,489
follows that idea<font color="#E5E5E5"> also</font><font color="#CCCCCC"> we have</font>

184
00:11:39,850 --> 00:11:44,649
additional backup<font color="#E5E5E5"> for representing of</font>

185
00:11:42,490 --> 00:11:48,730
course ID parameter<font color="#CCCCCC"> one's primary</font>

186
00:11:44,649 --> 00:11:49,589
<font color="#E5E5E5">location is lost and also we are</font><font color="#CCCCCC"> able to</font>

187
00:11:48,730 --> 00:11:53,290
produce

188
00:11:49,589 --> 00:11:56,529
<font color="#CCCCCC">techo</font><font color="#E5E5E5"> site parameter that he can help</font><font color="#CCCCCC"> DV</font>

189
00:11:53,290 --> 00:11:59,199
<font color="#E5E5E5">o</font><font color="#CCCCCC"> P entry value in it in</font><font color="#E5E5E5"> itself and that</font>

190
00:11:56,529 --> 00:12:03,180
means that we can look two or more

191
00:11:59,199 --> 00:12:08,319
frames up in search for<font color="#E5E5E5"> some entry value</font>

192
00:12:03,180 --> 00:12:11,050
and regarding limitations<font color="#CCCCCC"> there is no</font>

193
00:12:08,320 --> 00:12:14,529
support<font color="#CCCCCC"> for</font><font color="#E5E5E5"> representing expression</font>

194
00:12:11,050 --> 00:12:17,769
between multiple variables for to do so

195
00:12:14,529 --> 00:12:23,230
we would<font color="#CCCCCC"> probably need new kind of</font><font color="#E5E5E5"> debug</font>

196
00:12:17,769 --> 00:12:25,660
metadata<font color="#E5E5E5"> also since we are emulating</font>

197
00:12:23,230 --> 00:12:28,630
<font color="#E5E5E5">dropping back and pretty variable</font>

198
00:12:25,660 --> 00:12:31,389
location we are<font color="#CCCCCC"> able to do so because</font>

199
00:12:28,630 --> 00:12:33,850
there is a system<font color="#CCCCCC"> for tracking variables</font>

200
00:12:31,389 --> 00:12:36,040
location in<font color="#CCCCCC"> LLVM but there is no support</font>

201
00:12:33,850 --> 00:12:38,949
<font color="#CCCCCC">for tracking functions return value</font>

202
00:12:36,040 --> 00:12:42,519
location<font color="#E5E5E5"> and that is the</font><font color="#CCCCCC"> reason that we</font>

203
00:12:38,949 --> 00:12:47,199
can represent arguments that<font color="#CCCCCC"> are</font>

204
00:12:42,519 --> 00:12:49,180
<font color="#E5E5E5">functions function calls also there is</font>

205
00:12:47,199 --> 00:12:53,380
<font color="#CCCCCC">no easy way to</font><font color="#E5E5E5"> represent address of</font>

206
00:12:49,180 --> 00:12:55,569
variable it is<font color="#E5E5E5"> hard to</font><font color="#CCCCCC"> distinguish in</font>

207
00:12:53,380 --> 00:12:58,660
Depok metadata<font color="#E5E5E5"> between variables address</font>

208
00:12:55,569 --> 00:13:03,339
and variables value it<font color="#E5E5E5"> is not impossible</font>

209
00:12:58,660 --> 00:13:05,589
but it<font color="#CCCCCC"> is pretty complicated also we</font>

210
00:13:03,339 --> 00:13:08,920
need in order<font color="#E5E5E5"> to provide reference in</font>

211
00:13:05,589 --> 00:13:11,709
the<font color="#CCCCCC"> icon sight parameter to the I</font>

212
00:13:08,920 --> 00:13:14,319
variable<font color="#CCCCCC"> variables metadata we needed to</font>

213
00:13:11,709 --> 00:13:18,339
change a pretty standard and<font color="#CCCCCC"> disabled</font>

214
00:13:14,319 --> 00:13:23,890
<font color="#E5E5E5">interface of di builder</font><font color="#CCCCCC"> di</font><font color="#E5E5E5"> builder</font>

215
00:13:18,340 --> 00:13:27,610
<font color="#E5E5E5">interface we previously creation and</font>

216
00:13:23,890 --> 00:13:29,620
preservation of variables metadata<font color="#E5E5E5"> was</font>

217
00:13:27,610 --> 00:13:34,240
done in one function call but we needed

218
00:13:29,620 --> 00:13:36,339
to<font color="#E5E5E5"> separate it separate this next</font><font color="#CCCCCC"> past</font>

219
00:13:34,240 --> 00:13:39,339
that I'm going to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about is</font>

220
00:13:36,339 --> 00:13:41,050
instruction selection<font color="#CCCCCC"> paths</font><font color="#E5E5E5"> now it is</font>

221
00:13:39,339 --> 00:13:43,960
important to<font color="#E5E5E5"> mention this path since</font>

222
00:13:41,050 --> 00:13:46,750
this is the place<font color="#E5E5E5"> of our</font><font color="#CCCCCC"> implementation</font>

223
00:13:43,960 --> 00:13:50,830
that<font color="#E5E5E5"> could possibly possibly be improved</font>

224
00:13:46,750 --> 00:13:52,930
<font color="#E5E5E5">so we implemented the general algorithm</font>

225
00:13:50,830 --> 00:13:55,990
<font color="#CCCCCC">that should work for various</font>

226
00:13:52,930 --> 00:13:58,630
architectures<font color="#CCCCCC"> job of this algorithm</font><font color="#E5E5E5"> is</font>

227
00:13:55,990 --> 00:14:01,380
<font color="#E5E5E5">to recognize instructions</font><font color="#CCCCCC"> copy</font>

228
00:13:58,630 --> 00:14:03,400
instructions that forward that forward

229
00:14:01,380 --> 00:14:05,740
<font color="#E5E5E5">function arguments to the following</font>

230
00:14:03,400 --> 00:14:09,010
function call<font color="#CCCCCC"> so we can</font><font color="#E5E5E5"> see for example</font>

231
00:14:05,740 --> 00:14:15,070
<font color="#E5E5E5">this copy</font><font color="#CCCCCC"> instruct certain instructions</font>

232
00:14:09,010 --> 00:14:18,279
like like this so a process of this

233
00:14:15,070 --> 00:14:22,570
algorithm starts after<font color="#E5E5E5"> coloring target</font>

234
00:14:18,279 --> 00:14:24,850
<font color="#CCCCCC">coloring</font><font color="#E5E5E5"> whose real result is target</font><font color="#CCCCCC"> for</font>

235
00:14:22,570 --> 00:14:28,780
<font color="#E5E5E5">lowering if object and this object in</font>

236
00:14:24,850 --> 00:14:31,540
itself contains sequence of selection

237
00:14:28,780 --> 00:14:34,540
<font color="#CCCCCC">deck nodes that represent</font><font color="#E5E5E5"> call sequence</font>

238
00:14:31,540 --> 00:14:38,650
<font color="#E5E5E5">so we</font><font color="#CCCCCC"> iterate through this sequence</font><font color="#E5E5E5"> and</font>

239
00:14:34,540 --> 00:14:41,349
we search for copy<font color="#CCCCCC"> Touareg selection</font>

240
00:14:38,650 --> 00:14:44,819
deck nodes<font color="#E5E5E5"> this nodes should later be</font>

241
00:14:41,350 --> 00:14:48,910
mapped to copy to copy<font color="#E5E5E5"> instructions</font><font color="#CCCCCC"> and</font>

242
00:14:44,820 --> 00:14:51,310
then we try<font color="#CCCCCC"> to match copied value with</font>

243
00:14:48,910 --> 00:14:55,209
one of the with one of the functions

244
00:14:51,310 --> 00:14:58,209
<font color="#E5E5E5">input argument such verification is</font>

245
00:14:55,210 --> 00:15:01,300
required<font color="#CCCCCC"> because</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> could have</font>

246
00:14:58,210 --> 00:15:03,670
additional copy<font color="#E5E5E5"> instructions inside</font><font color="#CCCCCC"> IDs</font>

247
00:15:01,300 --> 00:15:06,329
calling<font color="#E5E5E5"> sequence for example</font><font color="#CCCCCC"> for</font>

248
00:15:03,670 --> 00:15:09,939
<font color="#CCCCCC">variadic</font><font color="#E5E5E5"> functions additional register</font>

249
00:15:06,330 --> 00:15:13,690
copy instruction<font color="#E5E5E5"> is required and some of</font>

250
00:15:09,940 --> 00:15:17,850
the function calling<font color="#CCCCCC"> api's might load</font>

251
00:15:13,690 --> 00:15:23,529
additional additional value that is not

252
00:15:17,850 --> 00:15:25,540
function argument<font color="#CCCCCC"> this could be this</font>

253
00:15:23,529 --> 00:15:27,880
algorithm could be lowered<font color="#E5E5E5"> to target</font>

254
00:15:25,540 --> 00:15:30,099
specific level more<font color="#E5E5E5"> precisely to the</font>

255
00:15:27,880 --> 00:15:33,730
level<font color="#E5E5E5"> where call sequence is</font><font color="#CCCCCC"> be</font>

256
00:15:30,100 --> 00:15:35,910
generated so once we can match these

257
00:15:33,730 --> 00:15:38,709
notes we just preserve them in

258
00:15:35,910 --> 00:15:41,680
instruction selection representation of

259
00:15:38,709 --> 00:15:44,888
course site and<font color="#E5E5E5"> later we omit them as</font>

260
00:15:41,680 --> 00:15:50,319
<font color="#CCCCCC">dbg call site and dbg</font><font color="#E5E5E5"> call site parent</font>

261
00:15:44,889 --> 00:15:53,310
sale destructions so our backup

262
00:15:50,319 --> 00:15:56,199
<font color="#CCCCCC">implementations pretty much realized how</font>

263
00:15:53,310 --> 00:15:58,540
<font color="#CCCCCC">dbg way loop 0</font><font color="#E5E5E5"> instruction</font><font color="#CCCCCC"> is handled</font>

264
00:15:56,199 --> 00:16:01,500
<font color="#E5E5E5">this child instruction is used to track</font>

265
00:15:58,540 --> 00:16:04,959
or variables location in registers

266
00:16:01,500 --> 00:16:12,029
virtual or physical stack locations or

267
00:16:04,959 --> 00:16:17,339
some address<font color="#E5E5E5"> or in some other system so</font>

268
00:16:12,029 --> 00:16:21,730
here<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can see this</font><font color="#CCCCCC"> dbg co site and</font>

269
00:16:17,339 --> 00:16:25,120
<font color="#CCCCCC">DBT co site parent instructions</font><font color="#E5E5E5"> for DB</font>

270
00:16:21,730 --> 00:16:28,720
<font color="#CCCCCC">chico site</font><font color="#E5E5E5"> first operand is boolean</font>

271
00:16:25,120 --> 00:16:31,690
<font color="#E5E5E5">value weathered reference call is tail</font>

272
00:16:28,720 --> 00:16:35,199
or not and the second argument is

273
00:16:31,690 --> 00:16:38,319
provided if call is indirect call and

274
00:16:35,199 --> 00:16:41,859
then it is<font color="#E5E5E5"> that cause register location</font>

275
00:16:38,319 --> 00:16:45,449
and last<font color="#CCCCCC"> argument is referenced to a</font><font color="#E5E5E5"> DI</font>

276
00:16:41,860 --> 00:16:48,399
call site<font color="#E5E5E5"> now this could be implemented</font>

277
00:16:45,449 --> 00:16:50,920
differently but<font color="#CCCCCC"> we choose to keep all</font>

278
00:16:48,399 --> 00:16:56,139
the information<font color="#CCCCCC"> about Co</font><font color="#E5E5E5"> site at one</font>

279
00:16:50,920 --> 00:16:58,660
place now we<font color="#CCCCCC"> can see here the DB g co</font>

280
00:16:56,139 --> 00:17:03,220
site param instructions are attached as

281
00:16:58,660 --> 00:17:06,178
a bundle<font color="#E5E5E5"> to DB g co site and the first</font>

282
00:17:03,220 --> 00:17:09,010
argument of DB g co site param<font color="#CCCCCC"> is</font>

283
00:17:06,179 --> 00:17:11,699
registered at<font color="#E5E5E5"> forwards argument to the</font>

284
00:17:09,010 --> 00:17:15,250
following following<font color="#E5E5E5"> the function call</font>

285
00:17:11,699 --> 00:17:19,650
second is reference<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the I co site</font>

286
00:17:15,250 --> 00:17:22,599
<font color="#E5E5E5">param and last arguments represent the</font>

287
00:17:19,650 --> 00:17:25,959
location that is loaded<font color="#E5E5E5"> into parameter</font>

288
00:17:22,599 --> 00:17:31,149
<font color="#E5E5E5">forwarding register</font><font color="#CCCCCC"> now I will just</font><font color="#E5E5E5"> I</font>

289
00:17:25,959 --> 00:17:36,490
will<font color="#E5E5E5"> mention that this machine machine</font>

290
00:17:31,150 --> 00:17:38,260
<font color="#CCCCCC">IR is produced with LM IAM 4.0 and I</font>

291
00:17:36,490 --> 00:17:41,280
have<font color="#E5E5E5"> just stripped some of the</font>

292
00:17:38,260 --> 00:17:45,930
instructions in order<font color="#E5E5E5"> to</font>

293
00:17:41,280 --> 00:17:50,010
could be<font color="#E5E5E5"> more clear and here we can</font>

294
00:17:45,930 --> 00:17:52,860
follow<font color="#E5E5E5"> here you can follow behavior of</font>

295
00:17:50,010 --> 00:17:56,100
variable C and we can<font color="#CCCCCC"> see that it is</font>

296
00:17:52,860 --> 00:17:59,610
<font color="#E5E5E5">indeed forwarded as the first argument</font>

297
00:17:56,100 --> 00:18:02,070
<font color="#E5E5E5">or function foo so first value its its</font>

298
00:17:59,610 --> 00:18:05,610
first value is really for after this

299
00:18:02,070 --> 00:18:08,790
<font color="#E5E5E5">function call</font><font color="#CCCCCC"> or it</font><font color="#E5E5E5"> is returned as</font><font color="#CCCCCC"> EAX</font>

300
00:18:05,610 --> 00:18:12,389
and<font color="#E5E5E5"> moved to evict register and later it</font>

301
00:18:08,790 --> 00:18:18,690
is forwarded as a function call<font color="#E5E5E5"> argument</font>

302
00:18:12,390 --> 00:18:20,880
through idea so in order to handle this

303
00:18:18,690 --> 00:18:23,190
<font color="#E5E5E5">instruction in backend we needed</font>

304
00:18:20,880 --> 00:18:25,650
modification in a prologue epilogue in

305
00:18:23,190 --> 00:18:28,890
setter<font color="#CCCCCC"> pass register allocation split</font>

306
00:18:25,650 --> 00:18:31,170
<font color="#CCCCCC">kid Bertrille</font><font color="#E5E5E5"> register e writer and most</font>

307
00:18:28,890 --> 00:18:34,530
important<font color="#E5E5E5"> for</font><font color="#CCCCCC"> us in allied</font><font color="#E5E5E5"> epic values</font>

308
00:18:31,170 --> 00:18:38,280
<font color="#CCCCCC">bus</font><font color="#E5E5E5"> now a job of this pass is to</font>

309
00:18:34,530 --> 00:18:40,350
broadcast broadcast<font color="#E5E5E5"> DB</font><font color="#CCCCCC"> G value observed</font>

310
00:18:38,280 --> 00:18:42,600
instructions in two<font color="#CCCCCC"> successive blocks</font>

311
00:18:40,350 --> 00:18:45,179
<font color="#CCCCCC">where preserved location is not</font>

312
00:18:42,600 --> 00:18:47,939
clobbered where that location<font color="#E5E5E5"> is valid</font>

313
00:18:45,180 --> 00:18:51,360
<font color="#CCCCCC">so as a natural it should emit</font>

314
00:18:47,940 --> 00:18:53,940
replacement for parameters for

315
00:18:51,360 --> 00:18:56,340
parameters<font color="#E5E5E5"> for DB G values that</font>

316
00:18:53,940 --> 00:18:59,030
represent parameters and once these

317
00:18:56,340 --> 00:19:02,429
locations are Robert<font color="#CCCCCC"> we should emit this</font>

318
00:18:59,030 --> 00:19:05,850
<font color="#E5E5E5">DB</font><font color="#CCCCCC"> g value</font><font color="#E5E5E5"> with new expression with this</font>

319
00:19:02,430 --> 00:19:08,730
new expression<font color="#CCCCCC"> the VIP entry value also</font>

320
00:19:05,850 --> 00:19:13,020
this pass<font color="#CCCCCC"> knows for each basic block</font>

321
00:19:08,730 --> 00:19:18,420
range which variables are live at that

322
00:19:13,020 --> 00:19:21,389
point<font color="#E5E5E5"> so also we adjust a DB g call side</font>

323
00:19:18,420 --> 00:19:23,460
param instructions here<font color="#E5E5E5"> by</font><font color="#CCCCCC"> addressing we</font>

324
00:19:21,390 --> 00:19:25,830
mean that we<font color="#E5E5E5"> delete these instructions</font>

325
00:19:23,460 --> 00:19:28,350
that<font color="#CCCCCC"> are not valid</font><font color="#E5E5E5"> instructions that are</font>

326
00:19:25,830 --> 00:19:33,389
not valid<font color="#E5E5E5"> are ones that do not have</font>

327
00:19:28,350 --> 00:19:35,879
<font color="#E5E5E5">primary location nor</font><font color="#CCCCCC"> back application by</font>

328
00:19:33,390 --> 00:19:38,780
back application we mean<font color="#E5E5E5"> invalid back</font>

329
00:19:35,880 --> 00:19:43,440
application are ones that reference

330
00:19:38,780 --> 00:19:48,379
variables that are<font color="#E5E5E5"> not seen at</font><font color="#CCCCCC"> that</font>

331
00:19:43,440 --> 00:19:53,669
point of<font color="#CCCCCC"> walk</font><font color="#E5E5E5"> also regarding producing</font>

332
00:19:48,380 --> 00:19:56,279
this printing<font color="#E5E5E5"> this vocation mean</font>

333
00:19:53,669 --> 00:20:01,259
object file<font color="#CCCCCC"> it is done in dwarf</font><font color="#E5E5E5"> debug</font>

334
00:19:56,279 --> 00:20:03,539
pass and it it is it it<font color="#E5E5E5"> is can</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> see</font>

335
00:20:01,259 --> 00:20:06,239
what<font color="#E5E5E5"> similarly as for</font><font color="#CCCCCC"> DB G value</font>

336
00:20:03,539 --> 00:20:07,739
instruction so there is nothing<font color="#E5E5E5"> special</font>

337
00:20:06,239 --> 00:20:10,049
to say here it<font color="#CCCCCC"> is</font>

338
00:20:07,739 --> 00:20:14,639
it<font color="#E5E5E5"> relies pretty much on similar</font>

339
00:20:10,049 --> 00:20:17,609
structures as DB G value<font color="#E5E5E5"> so</font><font color="#CCCCCC"> Georgia will</font>

340
00:20:14,639 --> 00:20:31,109
now present you some measurements that

341
00:20:17,609 --> 00:20:34,279
we<font color="#E5E5E5"> have so yeah</font><font color="#CCCCCC"> will show</font><font color="#E5E5E5"> you some</font>

342
00:20:31,109 --> 00:20:39,539
<font color="#CCCCCC">numbers that</font><font color="#E5E5E5"> actually confirm our</font>

343
00:20:34,279 --> 00:20:43,109
<font color="#E5E5E5">improvement so in order</font><font color="#CCCCCC"> to do that we</font>

344
00:20:39,539 --> 00:20:44,009
used a<font color="#CCCCCC"> log stat tool from healthy tips</font>

345
00:20:43,109 --> 00:20:48,228
package

346
00:20:44,009 --> 00:20:51,570
it actually looks for a scope of

347
00:20:48,229 --> 00:20:56,909
variable and<font color="#CCCCCC"> calculates a debug location</font>

348
00:20:51,570 --> 00:21:03,499
coverage we need so for testing purpose

349
00:20:56,909 --> 00:21:11,570
we for these slides we used gdb 7.11<font color="#E5E5E5"> and</font>

350
00:21:03,499 --> 00:21:14,190
<font color="#E5E5E5">spec 2006 benchmark so also we noticed</font>

351
00:21:11,570 --> 00:21:18,829
increment<font color="#E5E5E5"> in debug location coverage</font>

352
00:21:14,190 --> 00:21:21,749
also<font color="#E5E5E5"> we didn't touch code generation</font>

353
00:21:18,829 --> 00:21:25,859
which is very important<font color="#E5E5E5"> there is no</font>

354
00:21:21,749 --> 00:21:29,009
change in text<font color="#E5E5E5"> BSS or data sections</font>

355
00:21:25,859 --> 00:21:33,599
there is<font color="#E5E5E5"> only change in dot debug</font>

356
00:21:29,009 --> 00:21:38,009
sections<font color="#E5E5E5"> as expected</font><font color="#CCCCCC"> so yeah and just to</font>

357
00:21:33,599 --> 00:21:40,109
<font color="#E5E5E5">mention that 402 and oh</font><font color="#CCCCCC"> 3 level</font><font color="#E5E5E5"> we</font>

358
00:21:38,009 --> 00:21:46,519
noticed<font color="#CCCCCC"> is</font><font color="#E5E5E5"> very similar results</font>

359
00:21:40,109 --> 00:21:50,639
so<font color="#E5E5E5"> yeah example is</font><font color="#CCCCCC"> d DB standard level</font>

360
00:21:46,519 --> 00:21:54,599
so we built the latest release version

361
00:21:50,639 --> 00:21:58,498
of that so we noticed or<font color="#E5E5E5"> there the</font>

362
00:21:54,599 --> 00:22:05,689
increment of fully<font color="#E5E5E5"> covered function</font>

363
00:21:58,499 --> 00:22:09,150
parameters for about<font color="#E5E5E5"> 15%</font><font color="#CCCCCC"> which is about</font>

364
00:22:05,690 --> 00:22:11,669
<font color="#CCCCCC">17000 more debug variables with fully</font>

365
00:22:09,150 --> 00:22:12,900
debug location coverage which is<font color="#E5E5E5"> very</font>

366
00:22:11,669 --> 00:22:16,669
good number<font color="#E5E5E5"> yeah</font>

367
00:22:12,900 --> 00:22:20,940
so average<font color="#CCCCCC"> coverage spell variable</font>

368
00:22:16,669 --> 00:22:24,150
<font color="#E5E5E5">decreased for about</font><font color="#CCCCCC"> 10% so there is no</font>

369
00:22:20,940 --> 00:22:28,289
change in<font color="#E5E5E5"> code generation there is only</font>

370
00:22:24,150 --> 00:22:32,100
change in the debug sections and in this

371
00:22:28,289 --> 00:22:34,789
case we not just<font color="#E5E5E5"> built an increase for</font>

372
00:22:32,100 --> 00:22:40,649
about<font color="#E5E5E5"> 2% so yeah</font>

373
00:22:34,789 --> 00:22:45,179
another example<font color="#E5E5E5"> yeah we built</font><font color="#CCCCCC"> spec 2006</font>

374
00:22:40,650 --> 00:22:53,340
benchmark<font color="#E5E5E5"> it is a huge project designed</font>

375
00:22:45,179 --> 00:22:56,970
to<font color="#E5E5E5"> stress processor CPU compiler memory</font>

376
00:22:53,340 --> 00:23:01,530
subsystem and so on it<font color="#E5E5E5"> is pretty</font>

377
00:22:56,970 --> 00:23:04,830
<font color="#E5E5E5">standard test suit so</font><font color="#CCCCCC"> over there we</font>

378
00:23:01,530 --> 00:23:08,129
<font color="#CCCCCC">notice the increment of fully covered</font>

379
00:23:04,830 --> 00:23:11,220
function parameters for about<font color="#CCCCCC"> 8% which</font>

380
00:23:08,130 --> 00:23:16,309
<font color="#E5E5E5">is about 12,000 more debug variables</font>

381
00:23:11,220 --> 00:23:20,789
with fully<font color="#CCCCCC"> charged</font><font color="#E5E5E5"> so in this case we</font>

382
00:23:16,309 --> 00:23:24,990
noticed the increment of<font color="#E5E5E5"> average</font>

383
00:23:20,789 --> 00:23:29,360
<font color="#CCCCCC">coverage there variable for about 4% so</font>

384
00:23:24,990 --> 00:23:32,669
there is no change<font color="#E5E5E5"> in code generation</font>

385
00:23:29,360 --> 00:23:36,649
<font color="#CCCCCC">the change</font><font color="#E5E5E5"> as expected is only in the</font>

386
00:23:32,669 --> 00:23:44,990
debug sections and build time in<font color="#E5E5E5"> this</font>

387
00:23:36,650 --> 00:23:47,340
case<font color="#E5E5E5"> increase for about 1%</font><font color="#CCCCCC"> so yeah those</font>

388
00:23:44,990 --> 00:23:51,350
improvement in debug location coverage

389
00:23:47,340 --> 00:23:51,350
is<font color="#E5E5E5"> that most important</font>

390
00:23:55,160 --> 00:24:04,680
so I will just<font color="#E5E5E5"> wrap up this presentation</font>

391
00:24:00,650 --> 00:24:07,290
<font color="#CCCCCC">so after we finish this implementation</font>

392
00:24:04,680 --> 00:24:09,750
<font color="#CCCCCC">we identified</font><font color="#E5E5E5"> two main spots in our</font>

393
00:24:07,290 --> 00:24:12,500
implementation that require<font color="#E5E5E5"> further</font>

394
00:24:09,750 --> 00:24:15,830
discussion<font color="#E5E5E5"> so there is a question about</font>

395
00:24:12,500 --> 00:24:19,290
usefulness of the I call site param and

396
00:24:15,830 --> 00:24:21,990
there is a question whether<font color="#CCCCCC"> algorithm</font>

397
00:24:19,290 --> 00:24:25,649
<font color="#E5E5E5">for instruction selection phase should</font>

398
00:24:21,990 --> 00:24:28,520
<font color="#E5E5E5">be lowered to target specific level</font><font color="#CCCCCC"> but</font>

399
00:24:25,650 --> 00:24:33,150
that<font color="#E5E5E5"> requires target specific knowledge</font>

400
00:24:28,520 --> 00:24:36,660
and what does our implementation

401
00:24:33,150 --> 00:24:40,140
provides<font color="#E5E5E5"> it provides most importantly</font>

402
00:24:36,660 --> 00:24:43,530
correct<font color="#E5E5E5"> depth data we try to be strict</font>

403
00:24:40,140 --> 00:24:46,200
as much as we could in<font color="#E5E5E5"> order to achieve</font>

404
00:24:43,530 --> 00:24:48,750
this<font color="#E5E5E5"> also our measurements showed</font>

405
00:24:46,200 --> 00:24:51,150
through that we<font color="#E5E5E5"> didn't touch code</font>

406
00:24:48,750 --> 00:24:55,560
generation<font color="#CCCCCC"> process and</font><font color="#E5E5E5"> this is important</font>

407
00:24:51,150 --> 00:24:58,190
<font color="#CCCCCC">because our implementations</font><font color="#E5E5E5"> he takes</font>

408
00:24:55,560 --> 00:25:02,879
part to the whole compilation pipeline

409
00:24:58,190 --> 00:25:07,200
<font color="#E5E5E5">so it is also important to mention that</font>

410
00:25:02,880 --> 00:25:10,440
it provides infrastructure for for

411
00:25:07,200 --> 00:25:12,150
collecting<font color="#E5E5E5"> information about</font><font color="#CCCCCC"> Co sites</font><font color="#E5E5E5"> we</font>

412
00:25:10,440 --> 00:25:15,720
believe that we have<font color="#CCCCCC"> touched all</font>

413
00:25:12,150 --> 00:25:18,060
necessary passes and that current flow

414
00:25:15,720 --> 00:25:21,420
is sufficient<font color="#E5E5E5"> but it certainly needs</font>

415
00:25:18,060 --> 00:25:23,720
some improvements it<font color="#CCCCCC"> gives</font><font color="#E5E5E5"> us desired</font>

416
00:25:21,420 --> 00:25:29,160
results it give us improvement in

417
00:25:23,720 --> 00:25:32,610
parameter location courage and it-it-it

418
00:25:29,160 --> 00:25:35,550
revises new from functionality in

419
00:25:32,610 --> 00:25:40,139
debugger<font color="#CCCCCC"> it provides us</font><font color="#E5E5E5"> a function</font><font color="#CCCCCC"> enter</font>

420
00:25:35,550 --> 00:25:44,190
<font color="#E5E5E5">values and</font><font color="#CCCCCC"> these enter values</font><font color="#E5E5E5"> with</font>

421
00:25:40,140 --> 00:25:46,650
debugger<font color="#E5E5E5"> are clearly provided you better</font>

422
00:25:44,190 --> 00:25:50,700
user debugging experience<font color="#E5E5E5"> in programs</font>

423
00:25:46,650 --> 00:25:52,560
<font color="#CCCCCC">produced with LLVM so before we finish</font>

424
00:25:50,700 --> 00:25:54,390
<font color="#E5E5E5">we would like</font><font color="#CCCCCC"> to mention</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> we have</font>

425
00:25:52,560 --> 00:25:57,139
implemented this feature in

426
00:25:54,390 --> 00:26:00,750
collaboration with<font color="#E5E5E5"> Cisco with Cisco</font>

427
00:25:57,140 --> 00:26:03,900
especially with<font color="#CCCCCC"> this with an ant solder</font>

428
00:26:00,750 --> 00:26:05,430
and even<font color="#CCCCCC"> buyer so thank you for</font>

429
00:26:03,900 --> 00:26:17,760
listening

430
00:26:05,430 --> 00:26:34,230
and thank<font color="#E5E5E5"> you I was curious in the slide</font>

431
00:26:17,760 --> 00:26:37,740
where<font color="#CCCCCC"> you actually firstly just to</font>

432
00:26:34,230 --> 00:26:43,520
mention<font color="#E5E5E5"> the tree yeah so the question</font>

433
00:26:37,740 --> 00:26:47,990
<font color="#CCCCCC">was</font><font color="#E5E5E5"> does we include this</font><font color="#CCCCCC"> omit Parham</font>

434
00:26:43,520 --> 00:26:53,370
option<font color="#CCCCCC"> into - G default options so</font>

435
00:26:47,990 --> 00:26:56,130
actually for<font color="#E5E5E5"> for now know why we</font>

436
00:26:53,370 --> 00:27:01,469
initially<font color="#E5E5E5"> implemented this for an</font>

437
00:26:56,130 --> 00:27:06,450
internal version<font color="#E5E5E5"> of</font><font color="#CCCCCC"> lv m 4.0 compiler</font>

438
00:27:01,470 --> 00:27:11,330
<font color="#CCCCCC">and we tested this within</font><font color="#E5E5E5"> Cisco</font><font color="#CCCCCC"> or large</font>

439
00:27:06,450 --> 00:27:14,910
<font color="#E5E5E5">project but and also</font><font color="#CCCCCC"> we introduced a new</font>

440
00:27:11,330 --> 00:27:17,550
option<font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to make all of those</font>

441
00:27:14,910 --> 00:27:19,860
testing and make sure that we didn't

442
00:27:17,550 --> 00:27:24,690
clobber anything especially<font color="#E5E5E5"> code</font>

443
00:27:19,860 --> 00:27:27,120
<font color="#E5E5E5">generation and as soon</font><font color="#CCCCCC"> as we make sure</font>

444
00:27:24,690 --> 00:27:29,280
that<font color="#E5E5E5"> everything</font><font color="#CCCCCC"> goes well</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> will</font>

445
00:27:27,120 --> 00:27:32,760
<font color="#E5E5E5">include this in default</font>

446
00:27:29,280 --> 00:27:35,280
<font color="#E5E5E5">- G and actually just to mention that</font><font color="#CCCCCC"> we</font>

447
00:27:32,760 --> 00:27:38,160
<font color="#CCCCCC">are in the process of backporting this</font>

448
00:27:35,280 --> 00:27:41,629
<font color="#E5E5E5">on to</font><font color="#CCCCCC"> lvl tranq latest version actually</font>

449
00:27:38,160 --> 00:27:45,960
we beg ported<font color="#CCCCCC"> this so we</font><font color="#E5E5E5"> are finishing</font>

450
00:27:41,630 --> 00:27:48,240
testing phase and as soon as<font color="#E5E5E5"> we are done</font>

451
00:27:45,960 --> 00:27:55,260
<font color="#E5E5E5">with that we</font><font color="#CCCCCC"> will post those patches</font>

452
00:27:48,240 --> 00:27:58,020
<font color="#CCCCCC">onto lbm so yeah yeah thank you it's</font>

453
00:27:55,260 --> 00:28:01,250
supposed to<font color="#E5E5E5"> be this month so yeah we</font>

454
00:27:58,020 --> 00:28:01,250
expect this so

455
00:28:10,180 --> 00:28:18,860
so the question is where is the<font color="#CCCCCC"> target</font>

456
00:28:15,560 --> 00:28:21,169
specific implementation<font color="#CCCCCC"> target specific</font>

457
00:28:18,860 --> 00:28:24,350
<font color="#E5E5E5">implementation part is in an instruction</font>

458
00:28:21,170 --> 00:28:28,730
selection and it it is part for

459
00:28:24,350 --> 00:28:31,850
selection<font color="#CCCCCC"> deck notes generation it</font>

460
00:28:28,730 --> 00:28:37,360
concerns about how some targets<font color="#E5E5E5"> generate</font>

461
00:28:31,850 --> 00:28:40,149
this call sequence and we noticed that

462
00:28:37,360 --> 00:28:43,219
<font color="#E5E5E5">there are</font><font color="#CCCCCC"> some issues for matching those</font>

463
00:28:40,150 --> 00:28:46,340
those selection deck notes<font color="#E5E5E5"> because you</font>

464
00:28:43,220 --> 00:28:48,980
could for<font color="#CCCCCC"> example you could have some</font>

465
00:28:46,340 --> 00:28:51,080
<font color="#E5E5E5">not and you could hear not value and you</font>

466
00:28:48,980 --> 00:28:53,450
could have<font color="#E5E5E5"> that</font><font color="#CCCCCC"> note not where you</font>

467
00:28:51,080 --> 00:28:57,500
wrapped up with some some extension for

468
00:28:53,450 --> 00:29:01,280
example<font color="#CCCCCC"> zero extension or sign extension</font>

469
00:28:57,500 --> 00:29:07,040
<font color="#E5E5E5">and you</font><font color="#CCCCCC"> can match these two</font><font color="#E5E5E5"> notes</font>

470
00:29:01,280 --> 00:29:09,500
<font color="#CCCCCC">you just need explicitly</font><font color="#E5E5E5"> to match this</font>

471
00:29:07,040 --> 00:29:17,450
<font color="#CCCCCC">selection Deb knot which does not have</font>

472
00:29:09,500 --> 00:29:19,880
this extension also<font color="#CCCCCC"> sorry also there is</font>

473
00:29:17,450 --> 00:29:23,780
<font color="#E5E5E5">we also implemented some</font><font color="#CCCCCC"> salarjung</font>

474
00:29:19,880 --> 00:29:27,140
<font color="#E5E5E5">function that preserves some location</font>

475
00:29:23,780 --> 00:29:30,560
where we for<font color="#CCCCCC"> example when we lose</font><font color="#E5E5E5"> track</font>

476
00:29:27,140 --> 00:29:33,440
of<font color="#E5E5E5"> primary location in vitro registry</font>

477
00:29:30,560 --> 00:29:36,080
writer we go back up to<font color="#CCCCCC"> his dream</font><font color="#E5E5E5"> to</font>

478
00:29:33,440 --> 00:29:39,920
search for instruction<font color="#CCCCCC"> that loads that</font>

479
00:29:36,080 --> 00:29:41,870
parameter and we try<font color="#E5E5E5"> to interpret that</font>

480
00:29:39,920 --> 00:29:47,650
instruction we implemented this

481
00:29:41,870 --> 00:29:47,649
<font color="#E5E5E5">averaging for x86</font><font color="#CCCCCC"> lea instruction</font>

482
00:29:53,810 --> 00:30:23,300
oh sorry<font color="#CCCCCC"> repeated screaming yeah</font><font color="#E5E5E5"> so so</font>

483
00:30:20,060 --> 00:30:27,889
the question<font color="#E5E5E5"> is whether this only works</font>

484
00:30:23,300 --> 00:30:31,300
for 886 architecture<font color="#CCCCCC"> we just</font><font color="#E5E5E5"> tested it</font>

485
00:30:27,890 --> 00:30:35,540
<font color="#E5E5E5">for x86 architecture we we tested this</font>

486
00:30:31,300 --> 00:30:38,570
feature<font color="#CCCCCC"> only to build the only to build</font>

487
00:30:35,540 --> 00:30:40,670
the complex<font color="#E5E5E5"> software for</font><font color="#CCCCCC"> very started a</font>

488
00:30:38,570 --> 00:30:43,490
<font color="#CCCCCC">true search as MIPS and</font><font color="#E5E5E5"> our but we</font>

489
00:30:40,670 --> 00:30:57,320
didn't go into<font color="#E5E5E5"> a deep details to see</font>

490
00:30:43,490 --> 00:30:59,780
where we<font color="#CCCCCC"> lose information actually</font><font color="#E5E5E5"> yeah</font>

491
00:30:57,320 --> 00:31:06,350
when we started<font color="#CCCCCC"> looking at this feature</font>

492
00:30:59,780 --> 00:31:09,080
and yeah we did<font color="#CCCCCC"> yeah we had you know</font>

493
00:31:06,350 --> 00:31:11,780
<font color="#E5E5E5">seeing those measurements we calculated</font>

494
00:31:09,080 --> 00:31:15,530
those numbers also<font color="#E5E5E5"> with GCC but</font>

495
00:31:11,780 --> 00:31:18,440
comparing GCC and<font color="#CCCCCC"> LLVM doesn't make</font>

496
00:31:15,530 --> 00:31:20,899
sense because<font color="#E5E5E5"> the quad</font><font color="#CCCCCC"> quad</font><font color="#E5E5E5"> is different</font>

497
00:31:18,440 --> 00:31:24,970
<font color="#E5E5E5">to write the code is different but yeah</font>

498
00:31:20,900 --> 00:31:28,490
<font color="#CCCCCC">honestly LVM is still</font><font color="#E5E5E5"> behind GCC in</font>

499
00:31:24,970 --> 00:31:32,990
debug location coverage because yeah

500
00:31:28,490 --> 00:31:38,150
<font color="#E5E5E5">this feature is fit standard over there</font>

501
00:31:32,990 --> 00:31:43,430
<font color="#E5E5E5">since 2011 and it was improved in stages</font>

502
00:31:38,150 --> 00:31:46,700
so<font color="#E5E5E5"> yeah if your question was he does GCC</font>

503
00:31:43,430 --> 00:31:49,130
<font color="#CCCCCC">has better</font><font color="#E5E5E5"> debug location</font><font color="#CCCCCC"> College</font><font color="#E5E5E5"> yeah</font>

504
00:31:46,700 --> 00:31:52,970
<font color="#E5E5E5">he still it has but</font><font color="#CCCCCC"> well we are with</font>

505
00:31:49,130 --> 00:31:57,200
this will have certainly<font color="#E5E5E5"> better location</font>

506
00:31:52,970 --> 00:32:02,710
coverage<font color="#E5E5E5"> yeah and we are running to even</font>

507
00:31:57,200 --> 00:32:02,710
you know<font color="#E5E5E5"> be at least like GCC</font>

508
00:32:40,659 --> 00:32:50,440
so the question was whether<font color="#CCCCCC"> we looked at</font>

509
00:32:45,049 --> 00:32:52,999
<font color="#CCCCCC">gdb for some some corner test cases</font>

510
00:32:50,440 --> 00:32:56,960
<font color="#CCCCCC">thank you thank you for that question</font>

511
00:32:52,999 --> 00:33:00,499
we didn't we will gladly look<font color="#CCCCCC"> it we will</font>

512
00:32:56,960 --> 00:33:07,239
investigate that thank you just to

513
00:33:00,499 --> 00:33:11,269
mention<font color="#E5E5E5"> here that</font><font color="#CCCCCC"> LDB doesn't support</font>

514
00:33:07,239 --> 00:33:14,299
<font color="#CCCCCC">reading of entry values I</font><font color="#E5E5E5"> think that for</font>

515
00:33:11,269 --> 00:33:15,289
now it will be just ignored so but

516
00:33:14,299 --> 00:33:18,470
<font color="#E5E5E5">within gdb</font>

517
00:33:15,289 --> 00:33:22,429
we tried debug user experience even with

518
00:33:18,470 --> 00:33:26,570
the<font color="#CCCCCC"> binary compiled with LVM with this</font>

519
00:33:22,429 --> 00:33:31,509
version<font color="#E5E5E5"> and yeah it works for a bunch of</font>

520
00:33:26,570 --> 00:33:31,509
cases<font color="#CCCCCC"> so thank</font><font color="#E5E5E5"> you for yes</font>

521
00:33:38,650 --> 00:33:45,910
actually the question was if this

522
00:33:43,270 --> 00:33:49,840
functionality<font color="#E5E5E5"> is available only for</font><font color="#CCCCCC"> for</font>

523
00:33:45,910 --> 00:33:53,440
<font color="#E5E5E5">five actually initially it was</font>

524
00:33:49,840 --> 00:33:58,060
introduced as a glue extension and used

525
00:33:53,440 --> 00:34:01,270
in GCC<font color="#E5E5E5"> like that but since</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> five</font>

526
00:33:58,060 --> 00:34:05,530
<font color="#E5E5E5">released it is in this part of the</font>

527
00:34:01,270 --> 00:34:09,150
<font color="#CCCCCC">standard</font><font color="#E5E5E5"> so for now</font><font color="#CCCCCC"> here for for this</font>

528
00:34:05,530 --> 00:34:12,699
purpose<font color="#E5E5E5"> we internally generated blue</font>

529
00:34:09,150 --> 00:34:19,870
extensions as well<font color="#E5E5E5"> but yeah it's</font>

530
00:34:12,699 --> 00:34:54,040
supposed<font color="#CCCCCC"> to be both</font><font color="#E5E5E5"> of that</font><font color="#CCCCCC"> way sure</font>

531
00:34:19,870 --> 00:34:59,440
yeah yeah we<font color="#CCCCCC"> should yeah so the question</font>

532
00:34:54,040 --> 00:35:04,830
<font color="#CCCCCC">is so question is what is the</font>

533
00:34:59,440 --> 00:35:04,830
theoretical<font color="#E5E5E5"> maximum forward current</font>

534
00:35:05,100 --> 00:35:13,930
percentage we use this tool locks that

535
00:35:08,770 --> 00:35:17,590
<font color="#E5E5E5">now it is not able to measure with</font>

536
00:35:13,930 --> 00:35:20,589
variable visibility from where it is<font color="#CCCCCC"> the</font>

537
00:35:17,590 --> 00:35:23,910
finder to<font color="#E5E5E5"> last use of that variable</font><font color="#CCCCCC"> it</font>

538
00:35:20,590 --> 00:35:26,950
is measure it can only measure its

539
00:35:23,910 --> 00:35:30,210
<font color="#E5E5E5">coverage only to that lexical block</font>

540
00:35:26,950 --> 00:35:36,279
where it is<font color="#E5E5E5"> defined it</font><font color="#CCCCCC"> so</font>

541
00:35:30,210 --> 00:35:39,609
these numbers<font color="#CCCCCC"> just</font><font color="#E5E5E5"> show us how how much</font>

542
00:35:36,280 --> 00:35:42,970
we did improve or show that<font color="#E5E5E5"> we just</font>

543
00:35:39,609 --> 00:35:46,590
<font color="#CCCCCC">improved</font><font color="#E5E5E5"> something and we similar</font><font color="#CCCCCC"> this</font>

544
00:35:42,970 --> 00:35:51,089
tool was also used by<font color="#CCCCCC"> jellinek</font><font color="#E5E5E5"> in his</font>

545
00:35:46,590 --> 00:35:54,910
paper<font color="#E5E5E5"> to show up this improvement</font>

546
00:35:51,090 --> 00:35:58,510
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> it would be perfectly fair</font><font color="#E5E5E5"> we</font>

547
00:35:54,910 --> 00:36:01,868
have on<font color="#E5E5E5"> to a tool that actually looks</font>

548
00:35:58,510 --> 00:36:04,630
for our life of variable but yeah<font color="#E5E5E5"> we</font>

549
00:36:01,869 --> 00:36:09,640
don't<font color="#E5E5E5"> have that we use just this one as</font>

550
00:36:04,630 --> 00:36:12,490
a reference to measure improvement if

551
00:36:09,640 --> 00:36:14,700
someone knows for some<font color="#CCCCCC"> to four it looks</font>

552
00:36:12,490 --> 00:36:20,129
for variables<font color="#CCCCCC"> lives yeah</font>

553
00:36:14,700 --> 00:36:20,129
please feel free to advise us

554
00:36:26,860 --> 00:36:32,030
[Applause]

