1
00:00:05,280 --> 00:00:09,520
<font color="#E5E5E5">okay so hi everyone my name is Jamie</font>

2
00:00:08,559 --> 00:00:11,860
Gallardo

3
00:00:09,520 --> 00:00:15,879
I'll be presenting about<font color="#CCCCCC"> a continuous</font>

4
00:00:11,860 --> 00:00:18,820
<font color="#CCCCCC">application</font><font color="#E5E5E5"> monitoring using</font><font color="#CCCCCC"> LT TNG</font><font color="#E5E5E5"> I</font>

5
00:00:15,880 --> 00:00:21,460
wake if<font color="#CCCCCC"> you see us</font><font color="#E5E5E5"> if you've never heard</font>

6
00:00:18,820 --> 00:00:23,730
the name<font color="#CCCCCC"> we're a small consulting firm</font>

7
00:00:21,460 --> 00:00:26,739
<font color="#CCCCCC">based in Montreal</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> developed tracers</font>

8
00:00:23,730 --> 00:00:29,110
<font color="#CCCCCC">Ltd</font><font color="#E5E5E5"> energy being the most known of them</font>

9
00:00:26,739 --> 00:00:32,290
I personally<font color="#E5E5E5"> maintain out to</font><font color="#CCCCCC"> TNG tools</font>

10
00:00:29,110 --> 00:00:33,399
and babble<font color="#E5E5E5"> tres and I'll start the</font>

11
00:00:32,290 --> 00:00:35,920
presentation<font color="#CCCCCC"> were a few words about</font>

12
00:00:33,399 --> 00:00:39,820
<font color="#CCCCCC">tracing in</font><font color="#E5E5E5"> general and more specifically</font>

13
00:00:35,920 --> 00:00:43,900
<font color="#E5E5E5">system tracing and lt TNG how we</font>

14
00:00:39,820 --> 00:00:45,370
struggle to to have to<font color="#CCCCCC"> meet the needs of</font>

15
00:00:43,900 --> 00:00:48,730
<font color="#E5E5E5">people who wanted to do continuous</font>

16
00:00:45,370 --> 00:00:51,550
monitoring<font color="#E5E5E5"> without hitting G and our</font>

17
00:00:48,730 --> 00:00:56,199
solution tracing session rotation<font color="#E5E5E5"> what</font>

18
00:00:51,550 --> 00:00:58,480
it is<font color="#E5E5E5"> and the shortcomings and and how</font>

19
00:00:56,200 --> 00:01:00,250
<font color="#E5E5E5">it makes well the challenges that are</font>

20
00:00:58,480 --> 00:01:07,630
<font color="#E5E5E5">involved in making continuous trace</font>

21
00:01:00,250 --> 00:01:10,420
analysis at scale<font color="#CCCCCC"> so</font><font color="#E5E5E5"> L TT in G started</font>

22
00:01:07,630 --> 00:01:12,490
in 2005 at this point is more of an

23
00:01:10,420 --> 00:01:16,119
umbrella project<font color="#E5E5E5"> we have a user space</font>

24
00:01:12,490 --> 00:01:17,770
tracer kernel space tracer<font color="#CCCCCC"> the system</font>

25
00:01:16,119 --> 00:01:20,049
demons that<font color="#E5E5E5"> I maintained to control both</font>

26
00:01:17,770 --> 00:01:23,920
tracers and and control the data

27
00:01:20,049 --> 00:01:26,289
extraction paths the<font color="#CCCCCC"> Ltd</font><font color="#E5E5E5"> analysis</font>

28
00:01:23,920 --> 00:01:28,270
project which I'll touch a<font color="#E5E5E5"> bit later in</font>

29
00:01:26,289 --> 00:01:31,119
<font color="#CCCCCC">the talk</font><font color="#E5E5E5"> it's a set of scripts to work</font>

30
00:01:28,270 --> 00:01:35,289
with traces<font color="#E5E5E5"> and</font><font color="#CCCCCC"> L tthe scope a graphical</font>

31
00:01:31,119 --> 00:01:38,170
viewer so I got a<font color="#E5E5E5"> super great question</font>

32
00:01:35,289 --> 00:01:41,049
in the interview<font color="#E5E5E5"> in the week before the</font>

33
00:01:38,170 --> 00:01:42,969
talk<font color="#E5E5E5"> and that is now on the first M</font>

34
00:01:41,049 --> 00:01:45,069
website<font color="#E5E5E5"> what's the difference between</font>

35
00:01:42,969 --> 00:01:46,958
logging and tracing and really it's a

36
00:01:45,069 --> 00:01:51,100
hard question to answer because<font color="#CCCCCC"> there's</font>

37
00:01:46,959 --> 00:01:52,749
no clear<font color="#E5E5E5"> definition for both they</font><font color="#CCCCCC"> both</font>

38
00:01:51,100 --> 00:01:55,240
have the same goal<font color="#CCCCCC"> so the general goal</font>

39
00:01:52,749 --> 00:01:57,999
is I want<font color="#CCCCCC"> to extract</font><font color="#E5E5E5"> information from my</font>

40
00:01:55,240 --> 00:01:59,829
application<font color="#CCCCCC"> or from</font><font color="#E5E5E5"> the kernel and be</font>

41
00:01:57,999 --> 00:02:02,439
able<font color="#CCCCCC"> to understand the state of the</font>

42
00:01:59,829 --> 00:02:06,038
application<font color="#E5E5E5"> at</font><font color="#CCCCCC"> that moment</font><font color="#E5E5E5"> that's the</font>

43
00:02:02,439 --> 00:02:07,689
<font color="#E5E5E5">gist of it</font><font color="#CCCCCC"> in different</font><font color="#E5E5E5"> logging</font>

44
00:02:06,039 --> 00:02:12,220
frameworks and tracers will<font color="#E5E5E5"> target</font>

45
00:02:07,689 --> 00:02:15,970
either<font color="#E5E5E5"> developers sis admins or in the</font>

46
00:02:12,220 --> 00:02:17,730
worst case<font color="#CCCCCC"> end users and it's</font><font color="#E5E5E5"> always a</font>

47
00:02:15,970 --> 00:02:21,000
matter<font color="#E5E5E5"> of trade-offs with</font>

48
00:02:17,730 --> 00:02:24,298
<font color="#CCCCCC">usefulness these views</font><font color="#E5E5E5"> the performance</font>

49
00:02:21,000 --> 00:02:27,510
impact<font color="#E5E5E5"> on this</font><font color="#CCCCCC"> system and verbosity</font>

50
00:02:24,299 --> 00:02:30,780
<font color="#E5E5E5">which ties into ease-of-use</font><font color="#CCCCCC"> and then</font>

51
00:02:27,510 --> 00:02:32,970
there are<font color="#E5E5E5"> some some concepts will come</font>

52
00:02:30,780 --> 00:02:36,120
back in every tracer in every logging

53
00:02:32,970 --> 00:02:39,900
framework<font color="#CCCCCC"> enabling only certain subsets</font>

54
00:02:36,120 --> 00:02:42,450
of events and logging levels<font color="#CCCCCC"> the big</font>

55
00:02:39,900 --> 00:02:45,360
<font color="#E5E5E5">difference</font><font color="#CCCCCC"> I find is when people think</font>

56
00:02:42,450 --> 00:02:48,030
of system tracers like<font color="#CCCCCC"> LT King G we're</font>

57
00:02:45,360 --> 00:02:51,000
more in the<font color="#CCCCCC"> low-level</font><font color="#E5E5E5"> events that are</font>

58
00:02:48,030 --> 00:02:53,519
very very frequent<font color="#E5E5E5"> if we think of the</font>

59
00:02:51,000 --> 00:02:55,890
kernel tracer our goal will be to

60
00:02:53,519 --> 00:02:58,910
capture system calls and their payload

61
00:02:55,890 --> 00:03:01,649
<font color="#E5E5E5">so we can have thousands of them every</font>

62
00:02:58,910 --> 00:03:04,109
<font color="#E5E5E5">thousand of them every second but we</font>

63
00:03:01,650 --> 00:03:06,299
also trace scheduling information<font color="#E5E5E5"> so we</font>

64
00:03:04,109 --> 00:03:09,090
track every<font color="#E5E5E5"> task running on every CPU at</font>

65
00:03:06,299 --> 00:03:10,859
any given time<font color="#E5E5E5"> and it will attract file</font>

66
00:03:09,090 --> 00:03:13,319
system activity networking activity

67
00:03:10,859 --> 00:03:13,769
power management<font color="#E5E5E5"> events and so on</font><font color="#CCCCCC"> and so</font>

68
00:03:13,319 --> 00:03:17,069
forth

69
00:03:13,769 --> 00:03:19,829
in the case of<font color="#CCCCCC"> LT TMG specifically the</font>

70
00:03:17,069 --> 00:03:23,250
user space tracer it tries to be<font color="#CCCCCC"> the</font>

71
00:03:19,829 --> 00:03:24,989
equivalent for a user space<font color="#E5E5E5"> so since we</font>

72
00:03:23,250 --> 00:03:28,200
can capture a lot of<font color="#E5E5E5"> events</font><font color="#CCCCCC"> with a very</font>

73
00:03:24,989 --> 00:03:30,599
low overhead<font color="#CCCCCC"> people will tend</font><font color="#E5E5E5"> to funnel</font>

74
00:03:28,200 --> 00:03:33,119
<font color="#E5E5E5">very very verbose logging true LT</font>

75
00:03:30,599 --> 00:03:36,209
<font color="#E5E5E5">tianjin</font><font color="#CCCCCC"> USD and our job is to cope with</font>

76
00:03:33,120 --> 00:03:38,250
that when I say a lot<font color="#E5E5E5"> of events</font><font color="#CCCCCC"> I want</font>

77
00:03:36,209 --> 00:03:40,410
to give you<font color="#CCCCCC"> just a rough</font><font color="#E5E5E5"> figure of what</font>

78
00:03:38,250 --> 00:03:43,019
that<font color="#CCCCCC"> represents on this laptop I did a</font>

79
00:03:40,410 --> 00:03:44,940
quick measurement<font color="#CCCCCC"> while it world was</font>

80
00:03:43,019 --> 00:03:47,340
completely<font color="#E5E5E5"> idle if you enable all kernel</font>

81
00:03:44,940 --> 00:03:50,130
events that represents around<font color="#CCCCCC"> 54,000</font>

82
00:03:47,340 --> 00:03:52,560
<font color="#CCCCCC">events per second</font><font color="#E5E5E5"> and you're not</font>

83
00:03:50,130 --> 00:03:54,690
dropping events at<font color="#E5E5E5"> that point on a busy</font>

84
00:03:52,560 --> 00:03:56,069
<font color="#E5E5E5">eight core server you're more in the</font>

85
00:03:54,690 --> 00:03:58,109
waters<font color="#CCCCCC"> of</font><font color="#E5E5E5"> three million events per</font>

86
00:03:56,069 --> 00:04:01,828
second so that<font color="#E5E5E5"> starts to be allowed to</font>

87
00:03:58,109 --> 00:04:03,750
cope with and so this is where tracers

88
00:04:01,829 --> 00:04:07,230
<font color="#CCCCCC">and loggers are gonna divert</font><font color="#E5E5E5"> in the</font>

89
00:04:03,750 --> 00:04:10,379
trade-offs that<font color="#E5E5E5"> they have to make first</font>

90
00:04:07,230 --> 00:04:13,948
trade-off<font color="#E5E5E5"> I'd say the the central part</font>

91
00:04:10,379 --> 00:04:16,469
<font color="#E5E5E5">of healthy</font><font color="#CCCCCC"> TNG is its string buffer</font>

92
00:04:13,949 --> 00:04:18,630
<font color="#E5E5E5">that's at the</font><font color="#CCCCCC"> center of</font><font color="#E5E5E5"> the whole thing</font>

93
00:04:16,470 --> 00:04:20,549
<font color="#E5E5E5">we have a ring but</font><font color="#CCCCCC"> a lot less roomm</font>

94
00:04:18,630 --> 00:04:21,959
<font color="#CCCCCC">before implementation in user space and</font>

95
00:04:20,548 --> 00:04:25,400
internal space that are very<font color="#E5E5E5"> very</font>

96
00:04:21,959 --> 00:04:29,310
similar<font color="#E5E5E5"> there are only if you would have</font>

97
00:04:25,400 --> 00:04:30,580
adaptations<font color="#E5E5E5"> to to make it work in both</font>

98
00:04:29,310 --> 00:04:33,819
<font color="#E5E5E5">scenarios</font>

99
00:04:30,580 --> 00:04:37,688
and it is consumed asynchronously so

100
00:04:33,819 --> 00:04:39,430
<font color="#E5E5E5">there's no locking in terms of waiting</font>

101
00:04:37,689 --> 00:04:41,289
or blocking the application or<font color="#CCCCCC"> the</font>

102
00:04:39,430 --> 00:04:43,509
kernel for<font color="#E5E5E5"> that matter</font><font color="#CCCCCC"> when you're</font>

103
00:04:41,289 --> 00:04:46,180
producing events<font color="#CCCCCC"> so worst comes to worst</font>

104
00:04:43,509 --> 00:04:49,750
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> dropping events</font><font color="#CCCCCC"> so you're not</font>

105
00:04:46,180 --> 00:04:52,030
slowing down<font color="#E5E5E5"> the</font><font color="#CCCCCC"> application and then</font>

106
00:04:49,750 --> 00:04:54,490
<font color="#E5E5E5">there</font><font color="#CCCCCC"> are a number of memory footprint</font>

107
00:04:52,030 --> 00:04:56,378
<font color="#E5E5E5">and the security parameters that you can</font>

108
00:04:54,490 --> 00:05:01,960
set<font color="#E5E5E5"> on that ring buffer which I'm not</font>

109
00:04:56,379 --> 00:05:04,690
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to go into</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> top and so</font>

110
00:05:01,960 --> 00:05:06,099
that's one big<font color="#E5E5E5"> part it's the quality of</font>

111
00:05:04,690 --> 00:05:09,849
<font color="#E5E5E5">the implementation</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the ring buffer</font>

112
00:05:06,099 --> 00:05:12,219
<font color="#E5E5E5">the other thing is the best way to not</font>

113
00:05:09,849 --> 00:05:14,590
influence the<font color="#CCCCCC"> system is to not trace so</font>

114
00:05:12,219 --> 00:05:17,229
trace as little as possible<font color="#E5E5E5"> and this is</font>

115
00:05:14,590 --> 00:05:20,530
why<font color="#E5E5E5"> an l TT in</font><font color="#CCCCCC"> g we have</font><font color="#E5E5E5"> a very complete</font>

116
00:05:17,229 --> 00:05:22,930
<font color="#E5E5E5">set of a</font><font color="#CCCCCC"> rule-based system where you can</font>

117
00:05:20,530 --> 00:05:24,758
enable only the events that<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> and</font>

118
00:05:22,930 --> 00:05:28,479
you can<font color="#E5E5E5"> perform filtering at runtime on</font>

119
00:05:24,759 --> 00:05:29,800
the events using<font color="#E5E5E5"> our interpreter as</font>

120
00:05:28,479 --> 00:05:33,039
running<font color="#E5E5E5"> both in the kernel and user</font>

121
00:05:29,800 --> 00:05:34,150
space so<font color="#E5E5E5"> I gave two examples here the</font>

122
00:05:33,039 --> 00:05:37,000
first one you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> see that</font><font color="#CCCCCC"> you're</font>

123
00:05:34,150 --> 00:05:39,190
enabling<font color="#E5E5E5"> the</font><font color="#CCCCCC"> read</font><font color="#E5E5E5"> Cisco you could enable</font>

124
00:05:37,000 --> 00:05:42,849
it<font color="#CCCCCC"> for a</font><font color="#E5E5E5"> given process and then you can</font>

125
00:05:39,190 --> 00:05:45,039
filter on the size of the read itself

126
00:05:42,849 --> 00:05:49,990
and not capture any read of<font color="#CCCCCC"> four bytes</font>

127
00:05:45,039 --> 00:05:52,210
or things like<font color="#CCCCCC"> that and to give you an</font>

128
00:05:49,990 --> 00:05:54,639
idea<font color="#E5E5E5"> of the performance in the kernel</font>

129
00:05:52,210 --> 00:05:56,859
space<font color="#E5E5E5"> it's a kind of a complicated</font>

130
00:05:54,639 --> 00:05:58,479
question<font color="#E5E5E5"> I won't go into but it's pretty</font>

131
00:05:56,860 --> 00:06:02,349
<font color="#E5E5E5">much the same performance as as I've</font>

132
00:05:58,479 --> 00:06:04,120
<font color="#E5E5E5">traced in user space</font><font color="#CCCCCC"> we're in the waters</font>

133
00:06:02,349 --> 00:06:07,029
<font color="#E5E5E5">of a hundred thirteen</font><font color="#CCCCCC"> a no second</font>

134
00:06:04,120 --> 00:06:09,699
<font color="#E5E5E5">paradigm so that's very fast as you</font>

135
00:06:07,029 --> 00:06:11,319
understand we can't go through string

136
00:06:09,699 --> 00:06:13,150
formatting<font color="#E5E5E5"> to achieve that performance</font>

137
00:06:11,319 --> 00:06:16,900
so<font color="#CCCCCC"> everything's going to</font><font color="#E5E5E5"> be so realized</font>

138
00:06:13,150 --> 00:06:18,400
<font color="#CCCCCC">to</font><font color="#E5E5E5"> binary file if you</font><font color="#CCCCCC"> follow the bit the</font>

139
00:06:16,900 --> 00:06:21,068
development of the Linux<font color="#CCCCCC"> kernel we have</font>

140
00:06:18,400 --> 00:06:23,409
pushed the<font color="#E5E5E5"> what we've been</font><font color="#CCCCCC"> working on on</font>

141
00:06:21,069 --> 00:06:26,020
that for a while<font color="#CCCCCC"> but now restartable</font>

142
00:06:23,409 --> 00:06:31,060
sequence the new system call is in the

143
00:06:26,020 --> 00:06:33,430
mainline kernel from<font color="#CCCCCC"> 418 and up and the</font>

144
00:06:31,060 --> 00:06:37,180
goal for<font color="#CCCCCC"> us putting</font><font color="#E5E5E5"> that much energy</font>

145
00:06:33,430 --> 00:06:39,130
<font color="#E5E5E5">behind that was to improve the speed and</font>

146
00:06:37,180 --> 00:06:41,810
the performance of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> user space tracer</font>

147
00:06:39,130 --> 00:06:44,270
so right now<font color="#E5E5E5"> with the</font>

148
00:06:41,810 --> 00:06:47,000
the code paths that use our<font color="#CCCCCC"> sec are not</font>

149
00:06:44,270 --> 00:06:49,280
in the<font color="#CCCCCC"> LTTE</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> ju st</font><font color="#E5E5E5"> but our prototype</font>

150
00:06:47,000 --> 00:06:51,770
branch<font color="#E5E5E5"> lowers</font><font color="#CCCCCC"> that number to 90</font>

151
00:06:49,280 --> 00:06:57,080
nanosecond per event<font color="#CCCCCC"> so it's a quite a</font>

152
00:06:51,770 --> 00:06:59,240
significant<font color="#CCCCCC"> improvement for us the</font><font color="#E5E5E5"> users</font>

153
00:06:57,080 --> 00:07:00,890
of<font color="#CCCCCC"> LT ng are going to be journaled</font>

154
00:06:59,240 --> 00:07:02,660
application developers and embedded

155
00:07:00,890 --> 00:07:04,580
system developers and for a<font color="#E5E5E5"> very long</font>

156
00:07:02,660 --> 00:07:07,280
time<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the projects is</font><font color="#CCCCCC"> to read it was</font>

157
00:07:04,580 --> 00:07:14,419
really the core of our<font color="#E5E5E5"> users and</font><font color="#CCCCCC"> I'd say</font>

158
00:07:07,280 --> 00:07:16,780
<font color="#E5E5E5">all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> our users but now there's a</font>

159
00:07:14,419 --> 00:07:18,919
there's<font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> interest from</font><font color="#CCCCCC"> people</font>

160
00:07:16,780 --> 00:07:21,940
running infrastructure system

161
00:07:18,919 --> 00:07:24,409
administrators they've DevOps<font color="#E5E5E5"> and and</font>

162
00:07:21,940 --> 00:07:27,140
those<font color="#E5E5E5"> users come</font><font color="#CCCCCC"> to us and</font><font color="#E5E5E5"> say hey I've</font>

163
00:07:24,410 --> 00:07:30,320
used those TNG to debug that<font color="#CCCCCC"> time</font><font color="#E5E5E5"> you</font>

164
00:07:27,140 --> 00:07:34,159
race in a driver<font color="#CCCCCC"> they found firmware</font>

165
00:07:30,320 --> 00:07:37,099
bugs and<font color="#CCCCCC"> their nicks they found you know</font>

166
00:07:34,160 --> 00:07:39,980
understanding why there was memory

167
00:07:37,100 --> 00:07:42,560
pressure<font color="#E5E5E5"> at a</font><font color="#CCCCCC"> given time so things that</font>

168
00:07:39,980 --> 00:07:45,440
that are hard to<font color="#CCCCCC"> reproduce</font><font color="#E5E5E5"> that can be</font>

169
00:07:42,560 --> 00:07:48,620
reproduced<font color="#E5E5E5"> and so basically what they</font>

170
00:07:45,440 --> 00:07:50,090
would do was they would set up tracing

171
00:07:48,620 --> 00:07:51,470
start collecting everything reproduce

172
00:07:50,090 --> 00:07:54,320
the<font color="#CCCCCC"> problem and then investigate</font>

173
00:07:51,470 --> 00:07:56,120
manually through the trace and and that

174
00:07:54,320 --> 00:08:03,469
works<font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean it's the way</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> two other</font>

175
00:07:56,120 --> 00:08:05,120
classes<font color="#CCCCCC"> of users tend</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> but it's</font>

176
00:08:03,470 --> 00:08:07,520
not really continuous monitoring for

177
00:08:05,120 --> 00:08:08,960
<font color="#CCCCCC">saves so it's fine if you're unting for</font>

178
00:08:07,520 --> 00:08:10,430
a bug but if you want to know if

179
00:08:08,960 --> 00:08:12,890
everything's running smooth it's not

180
00:08:10,430 --> 00:08:15,110
really the solution something<font color="#E5E5E5"> clever</font>

181
00:08:12,890 --> 00:08:18,080
that<font color="#CCCCCC"> I've seen a reproduced</font><font color="#E5E5E5"> at a number</font>

182
00:08:15,110 --> 00:08:20,000
<font color="#CCCCCC">of our customers</font><font color="#E5E5E5"> site is</font><font color="#CCCCCC"> that people are</font>

183
00:08:18,080 --> 00:08:21,830
<font color="#CCCCCC">gonna people who run a large</font>

184
00:08:20,000 --> 00:08:24,919
infrastructure<font color="#E5E5E5"> are</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> use a sampling</font>

185
00:08:21,830 --> 00:08:26,570
approach<font color="#E5E5E5"> so basically they set up</font>

186
00:08:24,919 --> 00:08:28,729
tracing at random times on random

187
00:08:26,570 --> 00:08:31,490
machines<font color="#E5E5E5"> they will collect a trace for a</font>

188
00:08:28,729 --> 00:08:34,189
given period of<font color="#E5E5E5"> time</font><font color="#CCCCCC"> run a number</font><font color="#E5E5E5"> of</font>

189
00:08:31,490 --> 00:08:36,789
<font color="#E5E5E5">stret</font><font color="#CCCCCC"> some scripts on</font><font color="#E5E5E5"> that and they'll</font>

190
00:08:34,190 --> 00:08:40,849
look for deviations to<font color="#E5E5E5"> their known good</font>

191
00:08:36,789 --> 00:08:43,098
response time<font color="#E5E5E5"> resource</font><font color="#CCCCCC"> usage they'll</font>

192
00:08:40,849 --> 00:08:46,330
look at error rate serotypes<font color="#CCCCCC"> those kind</font>

193
00:08:43,099 --> 00:08:49,370
of things might<font color="#E5E5E5"> start continuous again</font>

194
00:08:46,330 --> 00:08:51,890
so we add the snapshot mode which is

195
00:08:49,370 --> 00:08:54,410
mostly<font color="#E5E5E5"> used by embedded developers and</font>

196
00:08:51,890 --> 00:08:55,220
in this mode<font color="#CCCCCC"> you're basically</font><font color="#E5E5E5"> its flight</font>

197
00:08:54,410 --> 00:08:57,230
recorder mode

198
00:08:55,220 --> 00:08:58,699
you<font color="#E5E5E5"> so you're tracing in memory you're</font>

199
00:08:57,230 --> 00:09:00,379
never touching<font color="#CCCCCC"> the desk and if you</font>

200
00:08:58,699 --> 00:09:02,689
<font color="#E5E5E5">figure it something wrong is going on</font>

201
00:09:00,379 --> 00:09:05,329
<font color="#E5E5E5">you can capture your buffers and work</font>

202
00:09:02,689 --> 00:09:06,620
with them<font color="#E5E5E5"> and for all intents</font><font color="#CCCCCC"> and</font>

203
00:09:05,329 --> 00:09:09,050
<font color="#E5E5E5">purposes</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> going to give you a</font>

204
00:09:06,620 --> 00:09:11,149
regular<font color="#E5E5E5"> CTF</font><font color="#CCCCCC"> trace</font><font color="#E5E5E5"> that you can use every</font>

205
00:09:09,050 --> 00:09:15,620
tool<font color="#E5E5E5"> out</font><font color="#CCCCCC"> there that</font><font color="#E5E5E5"> reads that format</font><font color="#CCCCCC"> to</font>

206
00:09:11,149 --> 00:09:18,589
work<font color="#E5E5E5"> with but there are some drawbacks</font>

207
00:09:15,620 --> 00:09:22,310
especially for<font color="#CCCCCC"> monitoring for monitoring</font>

208
00:09:18,589 --> 00:09:24,620
I mean first<font color="#CCCCCC"> might seem stupid</font><font color="#E5E5E5"> but you</font>

209
00:09:22,310 --> 00:09:27,529
have to react very quickly<font color="#CCCCCC"> if you're</font>

210
00:09:24,620 --> 00:09:30,379
<font color="#E5E5E5">only</font><font color="#CCCCCC"> keeping 8 megabytes of trace data</font>

211
00:09:27,529 --> 00:09:31,759
around<font color="#E5E5E5"> by the time</font><font color="#CCCCCC"> you realize</font><font color="#E5E5E5"> that</font>

212
00:09:30,379 --> 00:09:34,000
<font color="#E5E5E5">there's a problem there's a good chance</font>

213
00:09:31,759 --> 00:09:36,680
that<font color="#E5E5E5"> you have overwritten everything so</font>

214
00:09:34,000 --> 00:09:40,269
no luck<font color="#CCCCCC"> and</font><font color="#E5E5E5"> there's also the problem</font>

215
00:09:36,680 --> 00:09:43,160
<font color="#CCCCCC">that if you</font><font color="#E5E5E5"> manage to react fast</font><font color="#CCCCCC"> enough</font>

216
00:09:40,269 --> 00:09:46,220
<font color="#E5E5E5">you only have a few millisecond of</font>

217
00:09:43,160 --> 00:09:47,779
tracings<font color="#E5E5E5"> so you better hope that you're</font>

218
00:09:46,220 --> 00:09:50,420
<font color="#E5E5E5">gonna had be able to understand what was</font>

219
00:09:47,779 --> 00:09:52,399
<font color="#CCCCCC">going on with</font><font color="#E5E5E5"> that information</font><font color="#CCCCCC"> I'm</font>

220
00:09:50,420 --> 00:09:55,069
making that<font color="#E5E5E5"> sound</font><font color="#CCCCCC"> very negative but I</font>

221
00:09:52,399 --> 00:09:57,589
mean it's useful in some<font color="#CCCCCC"> cases but it is</font>

222
00:09:55,069 --> 00:10:00,529
a major<font color="#E5E5E5"> drawback and then we</font><font color="#CCCCCC"> had the</font>

223
00:09:57,589 --> 00:10:02,240
live mode<font color="#CCCCCC"> and live mode was something a</font>

224
00:10:00,529 --> 00:10:06,170
we<font color="#E5E5E5"> thought was good enough for</font>

225
00:10:02,240 --> 00:10:08,569
monitoring for<font color="#E5E5E5"> a long time</font><font color="#CCCCCC"> and but</font>

226
00:10:06,170 --> 00:10:13,160
<font color="#E5E5E5">really it was not made for</font><font color="#CCCCCC"> that it was</font>

227
00:10:08,569 --> 00:10:15,709
it was<font color="#CCCCCC"> like a way to</font><font color="#E5E5E5"> build I don't want</font>

228
00:10:13,160 --> 00:10:19,009
to say better<font color="#E5E5E5"> as trace but a trace with</font>

229
00:10:15,709 --> 00:10:22,160
<font color="#CCCCCC">journal events that are not</font><font color="#E5E5E5"> Cisco's and</font>

230
00:10:19,009 --> 00:10:23,540
had<font color="#E5E5E5"> user space tracing to that so you</font>

231
00:10:22,160 --> 00:10:25,569
<font color="#E5E5E5">could see</font><font color="#CCCCCC"> what your application was</font>

232
00:10:23,540 --> 00:10:27,920
doing and what the kernel is doing

233
00:10:25,569 --> 00:10:30,500
<font color="#CCCCCC">interleaved together and try</font><font color="#E5E5E5"> to</font>

234
00:10:27,920 --> 00:10:32,540
understand what is<font color="#CCCCCC"> going on but</font><font color="#E5E5E5"> the goal</font>

235
00:10:30,500 --> 00:10:34,759
<font color="#E5E5E5">was to have enough filtering going on</font>

236
00:10:32,540 --> 00:10:38,680
that you could actually follow<font color="#CCCCCC"> it</font><font color="#E5E5E5"> which</font>

237
00:10:34,759 --> 00:10:40,850
arise and not work with automated<font color="#E5E5E5"> tools</font>

238
00:10:38,680 --> 00:10:45,050
<font color="#CCCCCC">and</font><font color="#E5E5E5"> also we didn't want to slow your</font>

239
00:10:40,850 --> 00:10:50,629
applications<font color="#E5E5E5"> or at least not as much</font><font color="#CCCCCC"> as</font>

240
00:10:45,050 --> 00:10:52,309
<font color="#E5E5E5">P trace does it but when we discuss what</font>

241
00:10:50,629 --> 00:10:54,709
users wanted to use<font color="#CCCCCC"> that in production</font>

242
00:10:52,309 --> 00:10:56,420
<font color="#E5E5E5">well first of all our protocol and we</font>

243
00:10:54,709 --> 00:10:59,268
knew that<font color="#E5E5E5"> is not designed to end all a</font>

244
00:10:56,420 --> 00:11:01,219
high throughput<font color="#E5E5E5"> so it falls down in</font>

245
00:10:59,269 --> 00:11:02,720
those cases<font color="#CCCCCC"> and it's not trivial to</font>

246
00:11:01,220 --> 00:11:04,819
<font color="#E5E5E5">consume there are a couple of</font><font color="#CCCCCC"> people's</font>

247
00:11:02,720 --> 00:11:07,610
who have implemented that<font color="#E5E5E5"> but are not</font>

248
00:11:04,819 --> 00:11:08,660
making<font color="#CCCCCC"> it open source so it</font><font color="#E5E5E5"> doesn't</font>

249
00:11:07,610 --> 00:11:10,339
<font color="#E5E5E5">really exist for</font>

250
00:11:08,660 --> 00:11:12,259
for all intents and<font color="#E5E5E5"> purposes</font><font color="#CCCCCC"> the only</font>

251
00:11:10,339 --> 00:11:16,269
client that we have is the text viewer

252
00:11:12,259 --> 00:11:18,529
<font color="#E5E5E5">which was for the original</font><font color="#CCCCCC"> use case and</font>

253
00:11:16,269 --> 00:11:21,230
also maintaining connections to every

254
00:11:18,529 --> 00:11:23,629
target is not really realistic<font color="#CCCCCC"> typically</font>

255
00:11:21,230 --> 00:11:26,449
in production at least not to<font color="#CCCCCC"> poor</font>

256
00:11:23,629 --> 00:11:27,889
people<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> to and there's also</font>

257
00:11:26,449 --> 00:11:29,899
the<font color="#CCCCCC"> problem that</font><font color="#E5E5E5"> you're only get the</font>

258
00:11:27,889 --> 00:11:31,490
most recent<font color="#CCCCCC"> information so if you lose</font>

259
00:11:29,899 --> 00:11:34,220
your connection<font color="#E5E5E5"> the problem how occurs</font>

260
00:11:31,490 --> 00:11:41,810
you reconnect you lost your your data

261
00:11:34,220 --> 00:11:44,300
basically so it became evident<font color="#E5E5E5"> that</font>

262
00:11:41,810 --> 00:11:46,939
there were missing<font color="#E5E5E5"> pieces for continuous</font>

263
00:11:44,300 --> 00:11:48,949
monitoring not<font color="#E5E5E5"> that we had our head in</font>

264
00:11:46,939 --> 00:11:50,870
the<font color="#CCCCCC"> sand but we we thought</font><font color="#E5E5E5"> hey if it</font>

265
00:11:48,949 --> 00:11:54,949
<font color="#CCCCCC">makes the job</font><font color="#E5E5E5"> for all of those users why</font>

266
00:11:50,870 --> 00:11:55,550
why are you<font color="#E5E5E5"> special</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so and</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> want</font>

267
00:11:54,949 --> 00:11:57,199
<font color="#E5E5E5">to make a point</font>

268
00:11:55,550 --> 00:11:59,870
<font color="#E5E5E5">because I think there's an EVP F talk</font>

269
00:11:57,199 --> 00:12:01,670
after this<font color="#E5E5E5"> aggregation of system traces</font>

270
00:11:59,870 --> 00:12:03,860
to monitor<font color="#E5E5E5"> currents is different from</font>

271
00:12:01,670 --> 00:12:06,199
what we're<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> trying to do what we're</font>

272
00:12:03,860 --> 00:12:07,910
trying<font color="#E5E5E5"> to do is have all the data</font>

273
00:12:06,199 --> 00:12:11,508
available<font color="#E5E5E5"> if there is a problem</font><font color="#CCCCCC"> that</font>

274
00:12:07,910 --> 00:12:15,019
goes<font color="#E5E5E5"> on and not not</font><font color="#CCCCCC"> established trends</font>

275
00:12:11,509 --> 00:12:16,339
or or make an Instagram<font color="#CCCCCC"> of latent</font><font color="#E5E5E5"> season</font>

276
00:12:15,019 --> 00:12:18,110
those<font color="#E5E5E5"> scattered those kind of things</font>

277
00:12:16,339 --> 00:12:20,149
<font color="#E5E5E5">which are very very useful I'm not</font>

278
00:12:18,110 --> 00:12:24,829
knocking<font color="#CCCCCC"> that's just a big difference in</font>

279
00:12:20,149 --> 00:12:26,660
the<font color="#E5E5E5"> approaches is</font><font color="#CCCCCC"> that so</font>

280
00:12:24,829 --> 00:12:29,469
<font color="#E5E5E5">our</font><font color="#CCCCCC"> mode so good for</font><font color="#E5E5E5"> debugging but for</font>

281
00:12:26,660 --> 00:12:34,550
monitoring it'll they don't do the job

282
00:12:29,470 --> 00:12:37,130
so we interacted it and we kinda were on

283
00:12:34,550 --> 00:12:40,339
the<font color="#E5E5E5"> back foot to implement all of that</font>

284
00:12:37,130 --> 00:12:42,529
because<font color="#E5E5E5"> everyone had a very strong idea</font>

285
00:12:40,339 --> 00:12:44,870
of what we should<font color="#E5E5E5"> support and they were</font>

286
00:12:42,529 --> 00:12:46,610
all different<font color="#E5E5E5"> and we're not a project</font>

287
00:12:44,870 --> 00:12:49,870
<font color="#CCCCCC">that has a ton of resources to</font><font color="#E5E5E5"> go around</font>

288
00:12:46,610 --> 00:12:52,430
<font color="#E5E5E5">so for instance everybody wanted us to</font>

289
00:12:49,870 --> 00:12:54,439
support natively their own data store

290
00:12:52,430 --> 00:12:57,920
their own<font color="#E5E5E5"> ingest pipeline for</font><font color="#CCCCCC"> labs or</font>

291
00:12:54,439 --> 00:13:00,349
your own message queues and those are

292
00:12:57,920 --> 00:13:02,120
all legitimate<font color="#E5E5E5"> ideas but if we try</font><font color="#CCCCCC"> to</font>

293
00:13:00,350 --> 00:13:03,589
<font color="#E5E5E5">support everything that's the only thing</font>

294
00:13:02,120 --> 00:13:06,439
that we're<font color="#E5E5E5"> gonna be</font><font color="#CCCCCC"> doing forever</font><font color="#E5E5E5"> right</font>

295
00:13:03,589 --> 00:13:09,350
<font color="#E5E5E5">so we needed to come up with a solution</font>

296
00:13:06,439 --> 00:13:11,660
<font color="#CCCCCC">that is adaptable</font><font color="#E5E5E5"> and people can control</font>

297
00:13:09,350 --> 00:13:13,850
on their own<font color="#E5E5E5"> there's the problem that</font>

298
00:13:11,660 --> 00:13:15,649
traces are huge<font color="#E5E5E5"> and there are people who</font>

299
00:13:13,850 --> 00:13:17,959
run traces in production and they'll

300
00:13:15,649 --> 00:13:19,880
capture<font color="#E5E5E5"> hours and hours or days of</font>

301
00:13:17,959 --> 00:13:22,010
traces and they don't mind the traces

302
00:13:19,880 --> 00:13:24,080
take hundreds of gigabytes

303
00:13:22,010 --> 00:13:26,600
those people are few and<font color="#CCCCCC"> far between so</font>

304
00:13:24,080 --> 00:13:29,090
this is not<font color="#CCCCCC"> a good</font><font color="#E5E5E5"> solution so we need a</font>

305
00:13:26,600 --> 00:13:31,490
<font color="#E5E5E5">way to make it possible to</font><font color="#CCCCCC"> continue</font>

306
00:13:29,090 --> 00:13:34,040
tracing but discard the old traces<font color="#CCCCCC"> and</font>

307
00:13:31,490 --> 00:13:37,370
make it possible to compress traces as

308
00:13:34,040 --> 00:13:40,910
they age and and archive them or or

309
00:13:37,370 --> 00:13:42,980
throw them away<font color="#E5E5E5"> and the third point is</font>

310
00:13:40,910 --> 00:13:44,360
<font color="#CCCCCC">that trace processing can be</font><font color="#E5E5E5"> very slow</font>

311
00:13:42,980 --> 00:13:46,220
<font color="#E5E5E5">and very resource of you when you have</font>

312
00:13:44,360 --> 00:13:47,960
<font color="#E5E5E5">hundreds of gigabytes of traces there's</font>

313
00:13:46,220 --> 00:13:50,960
nothing there's not one tool that's

314
00:13:47,960 --> 00:13:56,720
<font color="#E5E5E5">gonna be snappy on that without a bit of</font>

315
00:13:50,960 --> 00:13:59,120
preparation<font color="#CCCCCC"> so I think it's a given that</font>

316
00:13:56,720 --> 00:14:00,890
<font color="#E5E5E5">the analysis must not</font><font color="#CCCCCC"> happen on</font><font color="#E5E5E5"> a target</font>

317
00:13:59,120 --> 00:14:02,420
typically your target is busy doing

318
00:14:00,890 --> 00:14:06,020
<font color="#E5E5E5">something you don't want</font><font color="#CCCCCC"> it to crunch to</font>

319
00:14:02,420 --> 00:14:11,089
a<font color="#CCCCCC"> 100</font><font color="#E5E5E5"> megabyte</font><font color="#CCCCCC"> 100 gigabyte trace</font><font color="#E5E5E5"> just</font>

320
00:14:06,020 --> 00:14:13,699
out of<font color="#E5E5E5"> nowhere</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> the solution in in</font>

321
00:14:11,090 --> 00:14:15,860
concept is very<font color="#E5E5E5"> simple</font><font color="#CCCCCC"> we without ok so</font>

322
00:14:13,700 --> 00:14:20,060
why<font color="#E5E5E5"> don't we have</font><font color="#CCCCCC"> a log rotation but for</font>

323
00:14:15,860 --> 00:14:22,760
tracing right it's not<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we didn't</font>

324
00:14:20,060 --> 00:14:25,030
<font color="#CCCCCC">think about it it's just there are a lot</font>

325
00:14:22,760 --> 00:14:27,080
of challenges<font color="#E5E5E5"> and implementing that at</font>

326
00:14:25,030 --> 00:14:28,310
with the constraints that<font color="#CCCCCC"> we have and</font>

327
00:14:27,080 --> 00:14:32,090
I'll go<font color="#E5E5E5"> through those</font><font color="#CCCCCC"> constraint to show</font>

328
00:14:28,310 --> 00:14:36,229
you why it was<font color="#CCCCCC"> complicated but basically</font>

329
00:14:32,090 --> 00:14:38,180
<font color="#CCCCCC">the idea is we will trace and then we</font>

330
00:14:36,230 --> 00:14:39,260
switch<font color="#CCCCCC"> over to new files</font><font color="#E5E5E5"> and then you</font>

331
00:14:38,180 --> 00:14:41,300
can do whatever you want<font color="#CCCCCC"> with those</font>

332
00:14:39,260 --> 00:14:43,189
files<font color="#CCCCCC"> so then if you want</font><font color="#E5E5E5"> to ingest them</font>

333
00:14:41,300 --> 00:14:44,630
in<font color="#CCCCCC"> a</font><font color="#E5E5E5"> existing logging pipeline you can</font>

334
00:14:43,190 --> 00:14:45,920
<font color="#CCCCCC">do that if you</font><font color="#E5E5E5"> want to shuffle them</font>

335
00:14:44,630 --> 00:14:50,570
<font color="#E5E5E5">around you</font><font color="#CCCCCC"> can do that</font><font color="#E5E5E5"> you want to</font>

336
00:14:45,920 --> 00:14:53,510
compress<font color="#E5E5E5"> them go ahead</font><font color="#CCCCCC"> and that race</font>

337
00:14:50,570 --> 00:14:56,150
<font color="#CCCCCC">should work with any</font><font color="#E5E5E5"> viewer</font><font color="#CCCCCC"> that's also</font>

338
00:14:53,510 --> 00:14:58,100
a<font color="#E5E5E5"> big point since our format or tracing</font>

339
00:14:56,150 --> 00:15:01,640
format is standard<font color="#CCCCCC"> it's opens under the</font>

340
00:14:58,100 --> 00:15:03,560
Linux Foundation<font color="#CCCCCC"> Diamond</font><font color="#E5E5E5"> workgroup</font><font color="#CCCCCC"> we</font>

341
00:15:01,640 --> 00:15:05,000
don't want to break the format

342
00:15:03,560 --> 00:15:08,270
just because we're implementing a new

343
00:15:05,000 --> 00:15:10,160
feature<font color="#E5E5E5"> so</font><font color="#CCCCCC"> there's one problem</font>

344
00:15:08,270 --> 00:15:12,350
our<font color="#E5E5E5"> format doesn't make this easy and</font>

345
00:15:10,160 --> 00:15:16,520
the reason why it doesn't make easy<font color="#E5E5E5"> is</font>

346
00:15:12,350 --> 00:15:21,110
<font color="#E5E5E5">twofold</font><font color="#CCCCCC"> first of</font><font color="#E5E5E5"> all a melty</font><font color="#CCCCCC"> kingi trace</font>

347
00:15:16,520 --> 00:15:23,750
<font color="#E5E5E5">is a is a set of files it's not one file</font>

348
00:15:21,110 --> 00:15:26,240
<font color="#CCCCCC">so what</font><font color="#E5E5E5"> I said before we have a lot</font><font color="#CCCCCC"> less</font>

349
00:15:23,750 --> 00:15:29,330
ring buffer<font color="#E5E5E5"> that we keep per CPU we also</font>

350
00:15:26,240 --> 00:15:32,390
have per<font color="#E5E5E5"> CPU stream files and those per</font>

351
00:15:29,330 --> 00:15:34,550
<font color="#E5E5E5">CPU stream files exist for</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> user space</font>

352
00:15:32,390 --> 00:15:36,500
<font color="#E5E5E5">and they also exist for</font><font color="#CCCCCC"> the kernels</font>

353
00:15:34,550 --> 00:15:38,180
<font color="#CCCCCC">place and they could exist depending</font><font color="#E5E5E5"> on</font>

354
00:15:36,500 --> 00:15:40,070
<font color="#E5E5E5">your configuration they could exist for</font>

355
00:15:38,180 --> 00:15:41,479
each and every user or each and every

356
00:15:40,070 --> 00:15:43,580
<font color="#CCCCCC">application depending</font><font color="#E5E5E5"> on what you want</font>

357
00:15:41,480 --> 00:15:45,649
<font color="#E5E5E5">to do so it's not it's not</font><font color="#CCCCCC"> like a</font>

358
00:15:43,580 --> 00:15:48,019
classical log of rotation where you

359
00:15:45,649 --> 00:15:49,310
write you open another<font color="#E5E5E5"> file start</font>

360
00:15:48,019 --> 00:15:53,930
<font color="#E5E5E5">writing there close this one and we're</font>

361
00:15:49,310 --> 00:15:56,689
done<font color="#CCCCCC"> and we also have a metadata</font><font color="#E5E5E5"> file</font>

362
00:15:53,930 --> 00:15:58,250
<font color="#E5E5E5">that's one of the big</font><font color="#CCCCCC"> challenges because</font>

363
00:15:56,690 --> 00:16:00,829
he'll teach in G is fully dynamic<font color="#E5E5E5"> you</font>

364
00:15:58,250 --> 00:16:02,630
<font color="#E5E5E5">can say you you have an application</font><font color="#CCCCCC"> that</font>

365
00:16:00,829 --> 00:16:05,319
<font color="#E5E5E5">opens a shared library and this shared</font>

366
00:16:02,630 --> 00:16:07,730
library has new events<font color="#E5E5E5"> they will have a</font>

367
00:16:05,320 --> 00:16:10,970
<font color="#E5E5E5">layout</font><font color="#CCCCCC"> that is</font><font color="#E5E5E5"> completely different from</font>

368
00:16:07,730 --> 00:16:14,480
<font color="#E5E5E5">what is known up to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> point so you</font>

369
00:16:10,970 --> 00:16:17,630
need to add<font color="#E5E5E5"> that layout</font><font color="#CCCCCC"> and we have</font><font color="#E5E5E5"> just</font>

370
00:16:14,480 --> 00:16:21,470
a simple<font color="#E5E5E5"> event</font><font color="#CCCCCC"> here that has a UID in a</font>

371
00:16:17,630 --> 00:16:24,320
cookie file<font color="#CCCCCC"> I payload the field and if</font>

372
00:16:21,470 --> 00:16:25,490
you don't know<font color="#E5E5E5"> that layout</font><font color="#CCCCCC"> you can pick</font>

373
00:16:24,320 --> 00:16:29,329
up the trace<font color="#E5E5E5"> that's basically the</font>

374
00:16:25,490 --> 00:16:31,250
<font color="#E5E5E5">problem so rotating is a there's also a</font>

375
00:16:29,329 --> 00:16:33,829
step where we<font color="#E5E5E5"> have to know</font><font color="#CCCCCC"> okay up to</font>

376
00:16:31,250 --> 00:16:36,800
<font color="#CCCCCC">that</font><font color="#E5E5E5"> point what were all the event</font>

377
00:16:33,829 --> 00:16:38,449
<font color="#E5E5E5">layouts that were possibly created we</font>

378
00:16:36,800 --> 00:16:41,319
have<font color="#E5E5E5"> to serialize that to the metadata</font>

379
00:16:38,450 --> 00:16:43,520
file and and that over to the user<font color="#CCCCCC"> so</font>

380
00:16:41,320 --> 00:16:48,579
<font color="#CCCCCC">that they don't end up with a trace that</font>

381
00:16:43,520 --> 00:16:52,040
is not decodable so the steps become

382
00:16:48,579 --> 00:16:55,040
basically<font color="#E5E5E5"> as we are tracing</font><font color="#CCCCCC"> we need to</font>

383
00:16:52,040 --> 00:16:58,520
sample<font color="#E5E5E5"> a production position for every</font>

384
00:16:55,040 --> 00:17:01,579
<font color="#E5E5E5">CPU across domains and then establish a</font>

385
00:16:58,520 --> 00:17:03,680
switchover point determine what all the

386
00:17:01,579 --> 00:17:06,470
event layouts<font color="#E5E5E5"> that we need to</font><font color="#CCCCCC"> decode the</font>

387
00:17:03,680 --> 00:17:11,270
trays are<font color="#CCCCCC"> up to that point</font><font color="#E5E5E5"> flush that</font>

388
00:17:06,470 --> 00:17:13,400
and then if we switch over<font color="#CCCCCC"> to a</font><font color="#E5E5E5"> new set</font>

389
00:17:11,270 --> 00:17:16,579
<font color="#CCCCCC">of files and mark this one as</font><font color="#E5E5E5"> being</font>

390
00:17:13,400 --> 00:17:18,530
<font color="#E5E5E5">ready for our consumption so you can</font>

391
00:17:16,579 --> 00:17:20,899
either monitor<font color="#CCCCCC"> the filesystem to</font><font color="#E5E5E5"> see new</font>

392
00:17:18,530 --> 00:17:24,500
files being created or you<font color="#E5E5E5"> can use our</font>

393
00:17:20,900 --> 00:17:26,800
UNIX socket based notification API<font color="#E5E5E5"> to</font>

394
00:17:24,500 --> 00:17:26,800
know that

395
00:17:30,750 --> 00:17:36,730
so I'm very<font color="#CCCCCC"> happy to say that this works</font>

396
00:17:34,390 --> 00:17:39,280
now it is not<font color="#E5E5E5"> in a stable release</font>

397
00:17:36,730 --> 00:17:42,430
<font color="#E5E5E5">although we will be releasing this month</font>

398
00:17:39,280 --> 00:17:44,110
<font color="#E5E5E5">but now it is in release candidate stage</font>

399
00:17:42,430 --> 00:17:46,840
so if you want<font color="#E5E5E5"> to try it out if you find</font>

400
00:17:44,110 --> 00:17:49,000
<font color="#CCCCCC">bugs I mean it me up on github or</font><font color="#E5E5E5"> on the</font>

401
00:17:46,840 --> 00:17:51,639
mailing list<font color="#CCCCCC"> and be</font><font color="#E5E5E5"> very happy to hear</font>

402
00:17:49,000 --> 00:17:55,120
<font color="#CCCCCC">about that</font><font color="#E5E5E5"> before we release although if</font>

403
00:17:51,640 --> 00:17:58,270
it happens after<font color="#CCCCCC"> we'll fix it</font>

404
00:17:55,120 --> 00:18:01,110
and so for a<font color="#CCCCCC"> while where we were super</font>

405
00:17:58,270 --> 00:18:03,360
happy<font color="#CCCCCC"> without alright this</font><font color="#E5E5E5"> is done</font>

406
00:18:01,110 --> 00:18:06,550
because<font color="#CCCCCC"> we look</font><font color="#E5E5E5"> at the world from</font><font color="#CCCCCC"> a</font>

407
00:18:03,360 --> 00:18:08,379
tracers perspective you know so we

408
00:18:06,550 --> 00:18:11,710
thought that<font color="#E5E5E5"> all the analysis tools is</font>

409
00:18:08,380 --> 00:18:15,160
the job of<font color="#E5E5E5"> other people</font><font color="#CCCCCC"> it doesn't</font>

410
00:18:11,710 --> 00:18:19,360
<font color="#CCCCCC">really</font><font color="#E5E5E5"> work like that people started</font>

411
00:18:15,160 --> 00:18:21,190
<font color="#E5E5E5">playing with</font><font color="#CCCCCC"> it and there were two</font>

412
00:18:19,360 --> 00:18:22,600
<font color="#CCCCCC">groups of users and</font><font color="#E5E5E5"> I'd say there are</font>

413
00:18:21,190 --> 00:18:25,090
more<font color="#CCCCCC"> people in</font><font color="#E5E5E5"> the first</font><font color="#CCCCCC"> group that</font><font color="#E5E5E5"> were</font>

414
00:18:22,600 --> 00:18:26,980
very happy<font color="#E5E5E5"> with the feature basically</font>

415
00:18:25,090 --> 00:18:29,949
people<font color="#E5E5E5"> who do stateless analysis and</font>

416
00:18:26,980 --> 00:18:32,170
stateless analysis is what you do when

417
00:18:29,950 --> 00:18:33,850
you just want to count events so you

418
00:18:32,170 --> 00:18:34,270
want to figure out<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> a simple</font>

419
00:18:33,850 --> 00:18:35,980
rule

420
00:18:34,270 --> 00:18:38,230
maybe<font color="#CCCCCC"> with grep maybe with</font><font color="#E5E5E5"> something</font>

421
00:18:35,980 --> 00:18:40,510
else<font color="#E5E5E5"> where you just want</font><font color="#CCCCCC"> to know how</font>

422
00:18:38,230 --> 00:18:43,180
many<font color="#E5E5E5"> of those events were there in my</font>

423
00:18:40,510 --> 00:18:46,930
trace how many errors how many you know

424
00:18:43,180 --> 00:18:48,970
whatever<font color="#E5E5E5"> and you just</font><font color="#CCCCCC"> need that</font><font color="#E5E5E5"> and it's</font>

425
00:18:46,930 --> 00:18:51,130
fine<font color="#E5E5E5"> and then you</font><font color="#CCCCCC"> can throw that and</font>

426
00:18:48,970 --> 00:18:54,880
graph<font color="#E5E5E5"> a now or whatever dashboard you</font>

427
00:18:51,130 --> 00:18:59,980
use the other class of<font color="#E5E5E5"> users</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> were</font>

428
00:18:54,880 --> 00:19:01,960
less<font color="#CCCCCC"> happy were okay</font><font color="#E5E5E5"> this is great</font><font color="#CCCCCC"> to</font>

429
00:18:59,980 --> 00:19:03,970
<font color="#CCCCCC">your radio call point</font><font color="#E5E5E5"> of view but um I</font>

430
00:19:01,960 --> 00:19:05,850
want to<font color="#E5E5E5"> perform stateful analysis</font><font color="#CCCCCC"> so</font>

431
00:19:03,970 --> 00:19:08,500
what is stateful analysis it's basically

432
00:19:05,850 --> 00:19:10,360
<font color="#E5E5E5">any time you read a trace and</font><font color="#CCCCCC"> you</font>

433
00:19:08,500 --> 00:19:13,300
construct a model<font color="#E5E5E5"> so anything that's</font>

434
00:19:10,360 --> 00:19:15,030
very interesting<font color="#CCCCCC"> to be interesting which</font>

435
00:19:13,300 --> 00:19:17,290
<font color="#CCCCCC">races is gonna</font><font color="#E5E5E5"> be is gonna use that</font>

436
00:19:15,030 --> 00:19:20,350
graphical<font color="#E5E5E5"> to you viewers do that all the</font>

437
00:19:17,290 --> 00:19:22,120
<font color="#CCCCCC">time they</font><font color="#E5E5E5"> basically have a simplified</font>

438
00:19:20,350 --> 00:19:24,550
<font color="#E5E5E5">model</font><font color="#CCCCCC"> of the kernel for instance and</font>

439
00:19:22,120 --> 00:19:27,129
they'll follow every event<font color="#E5E5E5"> that comes in</font>

440
00:19:24,550 --> 00:19:32,680
and for<font color="#E5E5E5"> instance if they see is</font><font color="#CCCCCC"> cisco</font>

441
00:19:27,130 --> 00:19:34,840
<font color="#E5E5E5">open and and open succeeds they will see</font>

442
00:19:32,680 --> 00:19:38,530
okay now<font color="#E5E5E5"> that if the number</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> is</font>

443
00:19:34,840 --> 00:19:40,510
associated<font color="#E5E5E5"> with that</font><font color="#CCCCCC"> path name</font><font color="#E5E5E5"> fair</font>

444
00:19:38,530 --> 00:19:42,320
<font color="#E5E5E5">enough</font>

445
00:19:40,510 --> 00:19:43,908
<font color="#E5E5E5">so this is</font><font color="#CCCCCC"> gonna make</font><font color="#E5E5E5"> it easy for</font>

446
00:19:42,320 --> 00:19:45,860
you to read a trace and understand

447
00:19:43,909 --> 00:19:47,450
what's going on<font color="#CCCCCC"> without seeing a read on</font>

448
00:19:45,860 --> 00:19:50,029
<font color="#E5E5E5">FD number</font><font color="#CCCCCC"> three and having to go back</font>

449
00:19:47,450 --> 00:19:52,730
<font color="#E5E5E5">perhaps hours before to see what that</font>

450
00:19:50,029 --> 00:19:54,919
file was if you even<font color="#E5E5E5"> have it and that's</font>

451
00:19:52,730 --> 00:19:56,990
the<font color="#E5E5E5"> thing with trace rotation maybe that</font>

452
00:19:54,919 --> 00:19:59,380
information is an another<font color="#E5E5E5"> chunk so</font>

453
00:19:56,990 --> 00:20:03,740
you'll<font color="#E5E5E5"> never have</font><font color="#CCCCCC"> that information so</font>

454
00:19:59,380 --> 00:20:05,809
<font color="#CCCCCC">there's a so</font><font color="#E5E5E5"> basically the the simplest</font>

455
00:20:03,740 --> 00:20:08,779
<font color="#CCCCCC">use case is presenting data in a more</font>

456
00:20:05,809 --> 00:20:11,029
familiar way<font color="#CCCCCC"> even a command line if you</font>

457
00:20:08,779 --> 00:20:14,240
were can do that so<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> having</font>

458
00:20:11,029 --> 00:20:15,889
the raw event we replace the PID with

459
00:20:14,240 --> 00:20:20,809
the process name and<font color="#CCCCCC"> we'll replace</font><font color="#E5E5E5"> the</font>

460
00:20:15,889 --> 00:20:24,289
FD<font color="#E5E5E5"> with the files name and this is what</font>

461
00:20:20,809 --> 00:20:26,090
in<font color="#CCCCCC"> LTTE analysis we do I'll present the</font>

462
00:20:24,289 --> 00:20:27,908
project<font color="#E5E5E5"> a little bit later but basically</font>

463
00:20:26,090 --> 00:20:30,350
<font color="#E5E5E5">if you want to see the longest read</font>

464
00:20:27,909 --> 00:20:32,629
<font color="#E5E5E5">Layton sees for a process in a given</font>

465
00:20:30,350 --> 00:20:34,850
time range<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> going to give you that</font>

466
00:20:32,629 --> 00:20:37,580
it's not<font color="#E5E5E5"> going to tell you there was a</font>

467
00:20:34,850 --> 00:20:43,399
long read on<font color="#E5E5E5"> FD 13 at that moment it's</font>

468
00:20:37,580 --> 00:20:44,990
gonna give you the<font color="#E5E5E5"> filing and the</font><font color="#CCCCCC"> FT so</font>

469
00:20:43,399 --> 00:20:47,570
the way those tools work is that they

470
00:20:44,990 --> 00:20:51,350
track state changes of resources so in

471
00:20:47,570 --> 00:20:54,049
concept is very very simple<font color="#CCCCCC"> they</font><font color="#E5E5E5"> have in</font>

472
00:20:51,350 --> 00:20:56,600
it so<font color="#CCCCCC"> a bit of</font><font color="#E5E5E5"> background l TT in G is</font>

473
00:20:54,049 --> 00:20:58,820
gonna when you start tracing the kernel

474
00:20:56,600 --> 00:21:01,639
for instance it will dump<font color="#E5E5E5"> the state of</font>

475
00:20:58,820 --> 00:21:04,158
the kernel<font color="#CCCCCC"> so that means all of the open</font>

476
00:21:01,639 --> 00:21:06,408
file descriptors all the active

477
00:21:04,159 --> 00:21:09,580
processes or I should say<font color="#CCCCCC"> all</font><font color="#E5E5E5"> the tasks</font>

478
00:21:06,409 --> 00:21:11,870
and<font color="#E5E5E5"> their PID group ID the username</font>

479
00:21:09,580 --> 00:21:13,850
spaces and all that<font color="#E5E5E5"> so</font><font color="#CCCCCC"> everything's</font>

480
00:21:11,870 --> 00:21:16,699
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> be dumped and the tools can use</font>

481
00:21:13,850 --> 00:21:21,879
that as a original model that they can

482
00:21:16,700 --> 00:21:24,289
<font color="#E5E5E5">then modify by reading the traces now</font>

483
00:21:21,879 --> 00:21:26,658
what most graphical tools are<font color="#CCCCCC"> gonna do</font>

484
00:21:24,289 --> 00:21:30,139
is track the<font color="#E5E5E5"> changes and populate a</font>

485
00:21:26,659 --> 00:21:31,970
state is to<font color="#CCCCCC"> read database and and they</font>

486
00:21:30,139 --> 00:21:33,830
make the reasonable<font color="#E5E5E5"> assumption up to at</font>

487
00:21:31,970 --> 00:21:39,649
this<font color="#E5E5E5"> point that all the</font><font color="#CCCCCC"> information</font><font color="#E5E5E5"> is</font>

488
00:21:33,830 --> 00:21:42,199
going<font color="#E5E5E5"> to be available all</font><font color="#CCCCCC"> the time the</font>

489
00:21:39,649 --> 00:21:45,860
problem with independent chunks<font color="#CCCCCC"> is that</font>

490
00:21:42,200 --> 00:21:47,240
you don't have<font color="#E5E5E5"> a complete model so well</font>

491
00:21:45,860 --> 00:21:50,389
you have all the<font color="#E5E5E5"> information</font><font color="#CCCCCC"> it's just</font>

492
00:21:47,240 --> 00:21:53,120
split into<font color="#E5E5E5"> a lot of</font><font color="#CCCCCC"> tiny tiny traces so</font>

493
00:21:50,389 --> 00:21:55,039
if you look at a classical<font color="#CCCCCC"> l TT</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> G</font>

494
00:21:53,120 --> 00:21:56,120
trace you're gonna be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> follow the</font>

495
00:21:55,039 --> 00:21:58,460
whole lifetime<font color="#CCCCCC"> of a</font>

496
00:21:56,120 --> 00:22:00,559
and if you look at drunks well maybe

497
00:21:58,460 --> 00:22:02,450
you'll see the open and one<font color="#CCCCCC"> or reading</font>

498
00:22:00,559 --> 00:22:05,149
the<font color="#CCCCCC"> other and the</font><font color="#E5E5E5"> closed</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the last</font>

499
00:22:02,450 --> 00:22:07,970
one<font color="#E5E5E5"> so if you point existing tools to</font>

500
00:22:05,150 --> 00:22:11,510
any of those independent<font color="#CCCCCC"> traces well</font>

501
00:22:07,970 --> 00:22:15,140
they're not<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to tell you</font><font color="#E5E5E5"> much so</font>

502
00:22:11,510 --> 00:22:17,450
the challenge became<font color="#E5E5E5"> okay people are</font>

503
00:22:15,140 --> 00:22:19,640
gonna have to adapt their tools maybe I

504
00:22:17,450 --> 00:22:23,390
should try<font color="#E5E5E5"> to do the exercise myself and</font>

505
00:22:19,640 --> 00:22:27,650
try to help them<font color="#E5E5E5"> and I thought it would</font>

506
00:22:23,390 --> 00:22:30,289
be very<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> turns</font><font color="#E5E5E5"> out it's not but</font>

507
00:22:27,650 --> 00:22:32,659
there's a demo at the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> and you'll see</font>

508
00:22:30,289 --> 00:22:35,299
<font color="#E5E5E5">that it works spoiler</font><font color="#CCCCCC"> alert</font>

509
00:22:32,659 --> 00:22:37,789
<font color="#E5E5E5">so</font><font color="#CCCCCC"> LTT analysis we have a number of</font>

510
00:22:35,299 --> 00:22:40,429
scripts<font color="#CCCCCC"> the most popular ones are their</font>

511
00:22:37,789 --> 00:22:44,029
system called latent<font color="#CCCCCC"> sees there's one to</font>

512
00:22:40,429 --> 00:22:46,460
see the interrupt handler<font color="#E5E5E5"> durations are</font>

513
00:22:44,029 --> 00:22:48,529
<font color="#E5E5E5">your usage</font><font color="#CCCCCC"> letting the is latent sees</font>

514
00:22:46,460 --> 00:22:51,799
when accessing<font color="#E5E5E5"> a file scheduling latency</font>

515
00:22:48,529 --> 00:22:53,600
so you can see for<font color="#CCCCCC"> instance</font><font color="#E5E5E5"> if you took</font>

516
00:22:51,799 --> 00:22:56,000
a long<font color="#E5E5E5"> time to enter requests were you</font>

517
00:22:53,600 --> 00:23:00,250
scheduled at all on the<font color="#CCCCCC"> CPU during that</font>

518
00:22:56,000 --> 00:23:03,380
time things like<font color="#E5E5E5"> that so I wanted to</font>

519
00:23:00,250 --> 00:23:07,399
<font color="#E5E5E5">reimplementation alysus but with chunks</font>

520
00:23:03,380 --> 00:23:11,480
and basically<font color="#E5E5E5"> provide the same</font>

521
00:23:07,399 --> 00:23:15,229
<font color="#CCCCCC">information as Ltd in G analysis so</font>

522
00:23:11,480 --> 00:23:17,720
again that analysis<font color="#E5E5E5"> very simple you just</font>

523
00:23:15,230 --> 00:23:20,779
<font color="#E5E5E5">have to track which this call is active</font>

524
00:23:17,720 --> 00:23:23,720
<font color="#E5E5E5">on in any given thread at any given</font>

525
00:23:20,779 --> 00:23:26,149
moment<font color="#CCCCCC"> when it</font><font color="#E5E5E5"> completes you can compute</font>

526
00:23:23,720 --> 00:23:28,250
iteration<font color="#E5E5E5"> and you can print that</font><font color="#CCCCCC"> and use</font>

527
00:23:26,149 --> 00:23:30,799
<font color="#E5E5E5">the kernel model to pretty print the</font>

528
00:23:28,250 --> 00:23:33,890
<font color="#E5E5E5">information so replacing filenames</font><font color="#CCCCCC"> P IDs</font>

529
00:23:30,799 --> 00:23:35,480
and all that if we don't<font color="#CCCCCC"> have all the</font>

530
00:23:33,890 --> 00:23:39,490
<font color="#E5E5E5">information we need but we've</font><font color="#CCCCCC"> called</font>

531
00:23:35,480 --> 00:23:41,809
partial<font color="#E5E5E5"> modeling so basically the</font>

532
00:23:39,490 --> 00:23:45,710
central idea of<font color="#E5E5E5"> partial modeling is that</font>

533
00:23:41,809 --> 00:23:49,220
<font color="#E5E5E5">any kernel object or operation for that</font>

534
00:23:45,710 --> 00:23:51,140
matter can<font color="#CCCCCC"> be represented as a</font><font color="#E5E5E5"> span so</font>

535
00:23:49,220 --> 00:23:52,880
the lifetime<font color="#CCCCCC"> of</font><font color="#E5E5E5"> our Cisco is going to be</font>

536
00:23:51,140 --> 00:23:55,070
bounded<font color="#E5E5E5"> by</font><font color="#CCCCCC"> the lifetime of the thread</font><font color="#E5E5E5"> in</font>

537
00:23:52,880 --> 00:23:58,340
which it happens the thread<font color="#E5E5E5"> is bounded</font>

538
00:23:55,070 --> 00:23:59,809
by the process<font color="#E5E5E5"> file descriptors let's</font>

539
00:23:58,340 --> 00:24:01,520
assume that it's bounded by the lifetime

540
00:23:59,809 --> 00:24:04,730
of<font color="#E5E5E5"> the process and not get into weird</font>

541
00:24:01,520 --> 00:24:08,570
<font color="#E5E5E5">clone flags and shared file descriptor</font>

542
00:24:04,730 --> 00:24:10,130
tables<font color="#CCCCCC"> CPUs the same way most tools</font>

543
00:24:08,570 --> 00:24:11,990
don't well

544
00:24:10,130 --> 00:24:13,610
most tools assume that CPUs are there

545
00:24:11,990 --> 00:24:16,130
all the time<font color="#CCCCCC"> but with</font><font color="#E5E5E5"> CPU at plug they</font>

546
00:24:13,610 --> 00:24:18,229
can come in and<font color="#CCCCCC"> come out</font><font color="#E5E5E5"> so their</font>

547
00:24:16,130 --> 00:24:20,090
lifetime is also a span<font color="#E5E5E5"> and then the</font>

548
00:24:18,230 --> 00:24:23,030
<font color="#CCCCCC">Linux</font><font color="#E5E5E5"> kernel that instance is also a</font>

549
00:24:20,090 --> 00:24:24,770
span<font color="#E5E5E5"> in time and the same applies to</font>

550
00:24:23,030 --> 00:24:28,370
application when you're<font color="#E5E5E5"> serving a</font>

551
00:24:24,770 --> 00:24:30,559
request that's<font color="#E5E5E5"> a span and and that's not</font>

552
00:24:28,370 --> 00:24:33,168
a new concept I mean Zipkin represents

553
00:24:30,559 --> 00:24:36,260
that information<font color="#E5E5E5"> then in that way it's</font>

554
00:24:33,169 --> 00:24:41,840
just<font color="#E5E5E5"> that for system traces it's not as</font>

555
00:24:36,260 --> 00:24:44,120
as usual so this is where most analysis

556
00:24:41,840 --> 00:24:46,039
need most and adjustments and I'd say

557
00:24:44,120 --> 00:24:49,729
<font color="#E5E5E5">most</font><font color="#CCCCCC"> Theory</font><font color="#E5E5E5"> right</font>

558
00:24:46,039 --> 00:24:52,340
typically or at least of the backend<font color="#E5E5E5"> so</font>

559
00:24:49,730 --> 00:24:53,990
<font color="#E5E5E5">intuitively I</font><font color="#CCCCCC"> thought well the analysis</font>

560
00:24:52,340 --> 00:24:56,470
can happen in<font color="#E5E5E5"> two phase first</font><font color="#CCCCCC"> one I'm</font>

561
00:24:53,990 --> 00:24:59,809
just<font color="#CCCCCC"> gonna go</font><font color="#E5E5E5"> over to chunk find every</font>

562
00:24:56,470 --> 00:25:03,350
complete span and keep that<font color="#CCCCCC"> aside and if</font>

563
00:24:59,809 --> 00:25:05,450
there<font color="#E5E5E5"> are spans that that span over the</font>

564
00:25:03,350 --> 00:25:06,889
frontier between<font color="#E5E5E5"> two chunks</font><font color="#CCCCCC"> I'll just</font>

565
00:25:05,450 --> 00:25:09,799
keep<font color="#CCCCCC"> that aside and when we do the merge</font>

566
00:25:06,890 --> 00:25:12,350
phase we'll be able<font color="#E5E5E5"> to stitch that</font>

567
00:25:09,799 --> 00:25:17,690
together and this sounds a lot like a

568
00:25:12,350 --> 00:25:19,100
classical MapReduce pipeline<font color="#E5E5E5"> okay it's a</font>

569
00:25:17,690 --> 00:25:22,039
bit more complicated<font color="#E5E5E5"> than that</font>

570
00:25:19,100 --> 00:25:23,719
<font color="#E5E5E5">and I realize that very quickly</font><font color="#CCCCCC"> and it's</font>

571
00:25:22,039 --> 00:25:24,980
it makes a lot<font color="#CCCCCC"> of sense if you think</font>

572
00:25:23,720 --> 00:25:27,169
<font color="#CCCCCC">about it</font>

573
00:25:24,980 --> 00:25:29,330
<font color="#CCCCCC">Cisco's</font><font color="#E5E5E5"> are not atomic and</font><font color="#CCCCCC"> syste system</font>

574
00:25:27,169 --> 00:25:32,059
<font color="#E5E5E5">calls can fail system calls can</font><font color="#CCCCCC"> be</font>

575
00:25:29,330 --> 00:25:34,158
interrupted<font color="#CCCCCC"> and it restarted so you have</font>

576
00:25:32,059 --> 00:25:35,870
to be careful if you<font color="#CCCCCC"> see it open it</font>

577
00:25:34,159 --> 00:25:37,250
doesn't mean that that file descriptor

578
00:25:35,870 --> 00:25:39,229
is gonna exist<font color="#E5E5E5"> at any point in the</font>

579
00:25:37,250 --> 00:25:40,159
future<font color="#E5E5E5"> maybe your system calls and</font>

580
00:25:39,230 --> 00:25:41,780
they're gonna<font color="#E5E5E5"> be interrupted</font>

581
00:25:40,159 --> 00:25:43,990
maybe<font color="#E5E5E5"> it's gonna hand in the</font><font color="#CCCCCC"> next</font><font color="#E5E5E5"> chunk</font>

582
00:25:41,780 --> 00:25:46,780
so you don't know a<font color="#E5E5E5"> lot about it</font><font color="#CCCCCC"> and</font>

583
00:25:43,990 --> 00:25:49,669
<font color="#CCCCCC">your model has to account</font><font color="#E5E5E5"> for that</font>

584
00:25:46,780 --> 00:25:51,200
so you have the example<font color="#E5E5E5"> here or the</font>

585
00:25:49,669 --> 00:25:53,780
other point<font color="#CCCCCC"> is that can happen</font><font color="#E5E5E5"> on</font>

586
00:25:51,200 --> 00:25:55,789
different CPUs so you don't have<font color="#E5E5E5"> to you</font>

587
00:25:53,780 --> 00:25:58,370
have<font color="#E5E5E5"> to perform your</font><font color="#CCCCCC"> natus your analysis</font>

588
00:25:55,789 --> 00:26:02,690
not on the<font color="#CCCCCC"> cpu stream basis but on a</font>

589
00:25:58,370 --> 00:26:05,479
chunk basis<font color="#E5E5E5"> fair enough and we the</font><font color="#CCCCCC"> Babel</font>

590
00:26:02,690 --> 00:26:07,400
<font color="#E5E5E5">trace library makes that easy to to</font>

591
00:26:05,480 --> 00:26:12,169
<font color="#E5E5E5">collate</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the streams</font><font color="#CCCCCC"> together in and</font>

592
00:26:07,400 --> 00:26:15,799
do the<font color="#CCCCCC"> merging so during the mapping we</font>

593
00:26:12,169 --> 00:26:18,710
find every span<font color="#CCCCCC"> I gave an example</font><font color="#E5E5E5"> here</font>

594
00:26:15,799 --> 00:26:21,230
maybe we'll see in a chunk<font color="#E5E5E5"> that there's</font>

595
00:26:18,710 --> 00:26:22,690
a read on<font color="#CCCCCC"> FD 22 keep in mind</font><font color="#E5E5E5"> that this</font>

596
00:26:21,230 --> 00:26:25,119
<font color="#E5E5E5">could be a socket</font><font color="#CCCCCC"> it could be</font>

597
00:26:22,690 --> 00:26:27,309
a number<font color="#CCCCCC"> of things</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> only thing that</font>

598
00:26:25,119 --> 00:26:30,129
we know<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> at this point</font><font color="#CCCCCC"> if it's if</font>

599
00:26:27,309 --> 00:26:32,830
the<font color="#CCCCCC"> read succeeds there was a file</font>

600
00:26:30,129 --> 00:26:36,099
descriptor 22<font color="#E5E5E5"> and we succeeded in</font>

601
00:26:32,830 --> 00:26:38,559
reading 15<font color="#E5E5E5"> bytes and we sat the end of</font>

602
00:26:36,099 --> 00:26:39,428
the lifetime of<font color="#CCCCCC"> that file descriptor</font>

603
00:26:38,559 --> 00:26:41,019
<font color="#E5E5E5">fair enough</font>

604
00:26:39,429 --> 00:26:47,080
so now we have the end of that lifetime

605
00:26:41,019 --> 00:26:48,580
<font color="#E5E5E5">of a file descriptor reducing well to</font>

606
00:26:47,080 --> 00:26:50,349
talk<font color="#E5E5E5"> about my implementation basically</font>

607
00:26:48,580 --> 00:26:52,449
at the<font color="#CCCCCC"> end of every mapping</font><font color="#E5E5E5"> phase I'm</font>

608
00:26:50,349 --> 00:26:54,908
gonna produce a JSON file that<font color="#E5E5E5"> has</font><font color="#CCCCCC"> all</font>

609
00:26:52,450 --> 00:26:57,159
of the kernel model with the partial

610
00:26:54,909 --> 00:26:59,249
spans<font color="#E5E5E5"> and during the reduce we're gonna</font>

611
00:26:57,159 --> 00:27:01,809
tie this back together<font color="#CCCCCC"> so at some point</font>

612
00:26:59,249 --> 00:27:04,059
<font color="#E5E5E5">there</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> chunk that will tell us</font><font color="#CCCCCC"> I</font>

613
00:27:01,809 --> 00:27:05,619
don't<font color="#CCCCCC"> know</font><font color="#E5E5E5"> the FD of that file but I</font>

614
00:27:04,059 --> 00:27:08,190
know that<font color="#E5E5E5"> there's a file descriptor that</font>

615
00:27:05,619 --> 00:27:10,720
<font color="#E5E5E5">points to this file it's a block device</font>

616
00:27:08,190 --> 00:27:15,129
<font color="#E5E5E5">normal file it's not a sockets</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> any</font>

617
00:27:10,720 --> 00:27:16,899
<font color="#E5E5E5">Annie poll file descriptor and</font><font color="#CCCCCC"> we'll</font>

618
00:27:15,129 --> 00:27:18,879
have all the<font color="#E5E5E5"> information and then any</font>

619
00:27:16,899 --> 00:27:21,070
<font color="#CCCCCC">request</font><font color="#E5E5E5"> that wanted to</font><font color="#CCCCCC"> use that</font>

620
00:27:18,879 --> 00:27:22,928
<font color="#E5E5E5">informations gonna complete</font><font color="#CCCCCC"> I should say</font>

621
00:27:21,070 --> 00:27:29,470
the report for a<font color="#E5E5E5"> request</font><font color="#CCCCCC"> that's gonna</font>

622
00:27:22,929 --> 00:27:31,479
give you<font color="#E5E5E5"> the breakdown okay</font><font color="#CCCCCC"> so in fact</font>

623
00:27:29,470 --> 00:27:37,659
it's a<font color="#CCCCCC"> bit more complicated</font><font color="#E5E5E5"> than that</font>

624
00:27:31,479 --> 00:27:40,690
still<font color="#E5E5E5"> the rotation is not atomic so if</font>

625
00:27:37,659 --> 00:27:45,099
you look at<font color="#CCCCCC"> the model that I had with</font>

626
00:27:40,690 --> 00:27:46,919
the<font color="#CCCCCC"> city of</font><font color="#E5E5E5"> traces before</font><font color="#CCCCCC"> well it's easy</font>

627
00:27:45,099 --> 00:27:49,989
<font color="#E5E5E5">to think okay I have a</font><font color="#CCCCCC"> switchover point</font>

628
00:27:46,919 --> 00:27:53,679
now<font color="#E5E5E5"> from that point on I have a new set</font>

629
00:27:49,989 --> 00:27:56,739
<font color="#CCCCCC">of</font><font color="#E5E5E5"> traces it works until you try to do</font>

630
00:27:53,679 --> 00:27:59,799
analysis on<font color="#CCCCCC"> that and really it's simple</font>

631
00:27:56,739 --> 00:28:02,590
if you try to perform<font color="#E5E5E5"> the switchover</font>

632
00:27:59,799 --> 00:28:04,599
<font color="#E5E5E5">without blocking everything you're gonna</font>

633
00:28:02,590 --> 00:28:07,238
<font color="#E5E5E5">end up</font><font color="#CCCCCC"> with this</font><font color="#E5E5E5"> staircase pattern</font><font color="#CCCCCC"> where</font>

634
00:28:04,599 --> 00:28:10,989
in time the rotations<font color="#E5E5E5"> a</font><font color="#CCCCCC"> turn</font><font color="#E5E5E5"> and you</font>

635
00:28:07,239 --> 00:28:13,450
switch files<font color="#CCCCCC"> I thought that this would</font>

636
00:28:10,989 --> 00:28:16,960
<font color="#E5E5E5">be</font><font color="#CCCCCC"> very a lot quicker</font><font color="#E5E5E5"> than it actually</font>

637
00:28:13,450 --> 00:28:18,489
is and<font color="#CCCCCC"> for a time I thought ah it's not</font>

638
00:28:16,960 --> 00:28:22,239
the end of the world if<font color="#E5E5E5"> we drop events</font>

639
00:28:18,489 --> 00:28:24,700
for that<font color="#E5E5E5"> little interval but actually</font>

640
00:28:22,239 --> 00:28:27,159
rotating on a<font color="#E5E5E5"> twelve logical core</font>

641
00:28:24,700 --> 00:28:29,729
machine is<font color="#E5E5E5"> gonna take 28</font><font color="#CCCCCC"> milliseconds so</font>

642
00:28:27,159 --> 00:28:32,320
there's a lot<font color="#E5E5E5"> of gap and it can be</font>

643
00:28:29,729 --> 00:28:35,589
complete lifetimes of processes during

644
00:28:32,320 --> 00:28:36,370
<font color="#E5E5E5">that time so what process</font><font color="#CCCCCC"> is maybe</font><font color="#E5E5E5"> not</font>

645
00:28:35,589 --> 00:28:38,950
but

646
00:28:36,370 --> 00:28:40,779
<font color="#E5E5E5">which could happen well at least files</font>

647
00:28:38,950 --> 00:28:47,710
that<font color="#E5E5E5"> can</font><font color="#CCCCCC"> happen and complete requests</font>

648
00:28:40,779 --> 00:28:50,620
can happen during<font color="#CCCCCC"> that time so</font><font color="#E5E5E5"> you can</font>

649
00:28:47,710 --> 00:28:53,710
see that what ended up happening is<font color="#CCCCCC"> that</font>

650
00:28:50,620 --> 00:28:58,449
in some<font color="#CCCCCC"> cases</font><font color="#E5E5E5"> you could see an open on</font>

651
00:28:53,710 --> 00:29:02,470
the first<font color="#E5E5E5"> CPU and then</font><font color="#CCCCCC"> aid up</font><font color="#E5E5E5"> on CPU</font>

652
00:28:58,450 --> 00:29:04,330
number<font color="#E5E5E5"> three and then you you think you</font>

653
00:29:02,470 --> 00:29:05,919
know everything<font color="#CCCCCC"> in that time</font><font color="#E5E5E5"> span but</font>

654
00:29:04,330 --> 00:29:08,320
actually you're blind<font color="#E5E5E5"> to what's</font>

655
00:29:05,919 --> 00:29:09,970
happening<font color="#E5E5E5"> during the transition so then</font>

656
00:29:08,320 --> 00:29:11,918
you<font color="#E5E5E5"> assume that</font><font color="#CCCCCC"> ok I know what that if</font>

657
00:29:09,970 --> 00:29:15,220
he<font color="#E5E5E5"> is but</font><font color="#CCCCCC"> actually it was something else</font>

658
00:29:11,919 --> 00:29:19,390
all that time so you don't<font color="#E5E5E5"> know what</font>

659
00:29:15,220 --> 00:29:21,070
that<font color="#CCCCCC"> F do</font><font color="#E5E5E5"> you refers to so there are a</font>

660
00:29:19,390 --> 00:29:23,980
number of<font color="#E5E5E5"> solutions</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> this problem</font><font color="#CCCCCC"> the</font>

661
00:29:21,070 --> 00:29:26,408
one that<font color="#E5E5E5"> I used is a bit lazy but if you</font>

662
00:29:23,980 --> 00:29:29,159
use<font color="#CCCCCC"> two</font><font color="#E5E5E5"> chunks you can</font><font color="#CCCCCC"> seek to a point</font>

663
00:29:26,409 --> 00:29:31,510
where you'll<font color="#E5E5E5"> have a complete chunk that</font>

664
00:29:29,159 --> 00:29:36,789
<font color="#E5E5E5">fits your assumption that the switchover</font>

665
00:29:31,510 --> 00:29:39,190
is atomic<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> it's a good moment we</font>

666
00:29:36,789 --> 00:29:40,960
<font color="#E5E5E5">mentioned that we use the same clock</font>

667
00:29:39,190 --> 00:29:42,309
source<font color="#E5E5E5"> clock monotonic between kernel</font>

668
00:29:40,960 --> 00:29:44,640
space<font color="#E5E5E5"> and user space so this is what</font>

669
00:29:42,309 --> 00:29:47,529
makes<font color="#E5E5E5"> it</font><font color="#CCCCCC"> possible to</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> the analysis</font>

670
00:29:44,640 --> 00:29:52,750
<font color="#CCCCCC">reliable and really order events in the</font>

671
00:29:47,529 --> 00:29:56,919
way that you<font color="#E5E5E5"> would</font><font color="#CCCCCC"> expect so I'm happy</font>

672
00:29:52,750 --> 00:29:58,929
to say<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> prototype works the goal</font>

673
00:29:56,919 --> 00:30:03,760
was<font color="#E5E5E5"> to provide</font><font color="#CCCCCC"> the same data as LTTE</font>

674
00:29:58,929 --> 00:30:06,460
analysis<font color="#CCCCCC"> and what I wanted to do is have</font>

675
00:30:03,760 --> 00:30:11,200
<font color="#CCCCCC">a model of an application that performs</font>

676
00:30:06,460 --> 00:30:13,210
a non-trivial query and then show the

677
00:30:11,200 --> 00:30:15,070
time that was<font color="#E5E5E5"> spent in</font><font color="#CCCCCC"> each phase of</font><font color="#E5E5E5"> the</font>

678
00:30:13,210 --> 00:30:17,230
query and<font color="#E5E5E5"> then drill down what were the</font>

679
00:30:15,070 --> 00:30:19,149
time spent<font color="#E5E5E5"> in each and every</font><font color="#CCCCCC"> syscall</font>

680
00:30:17,230 --> 00:30:23,500
that happened<font color="#E5E5E5"> while serving that phase</font>

681
00:30:19,149 --> 00:30:25,928
of<font color="#CCCCCC"> the query and and</font><font color="#E5E5E5"> try to address the</font>

682
00:30:23,500 --> 00:30:29,200
shortcomings of<font color="#E5E5E5"> l TT</font><font color="#CCCCCC"> in G analysis first</font>

683
00:30:25,929 --> 00:30:32,620
<font color="#E5E5E5">it is a lot faster</font><font color="#CCCCCC"> melting ng analysis</font>

684
00:30:29,200 --> 00:30:34,960
is written in Python<font color="#E5E5E5"> so</font><font color="#CCCCCC"> working with</font>

685
00:30:32,620 --> 00:30:37,270
millions of events is not not what

686
00:30:34,960 --> 00:30:39,640
<font color="#CCCCCC">Buyten is made for so it's normal that</font>

687
00:30:37,270 --> 00:30:43,779
it was slow but it made<font color="#CCCCCC"> it pretty hard</font>

688
00:30:39,640 --> 00:30:46,299
<font color="#E5E5E5">to use in a continuous way so that part</font>

689
00:30:43,779 --> 00:30:48,429
<font color="#E5E5E5">is taken care of but really the the</font>

690
00:30:46,299 --> 00:30:49,679
challenging part was the partial

691
00:30:48,429 --> 00:30:52,899
modeling

692
00:30:49,679 --> 00:30:54,909
so the example I'm<font color="#CCCCCC"> gonna show</font><font color="#E5E5E5"> you it's a</font>

693
00:30:52,899 --> 00:30:58,389
server that receives a request<font color="#E5E5E5"> to</font>

694
00:30:54,909 --> 00:31:01,539
generate a thumbnail<font color="#E5E5E5"> so basically it</font>

695
00:30:58,389 --> 00:31:03,309
gets<font color="#E5E5E5"> given a asset ID</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> going to say</font>

696
00:31:01,539 --> 00:31:05,379
<font color="#CCCCCC">seek</font><font color="#E5E5E5"> to the requested frame they called</font>

697
00:31:03,309 --> 00:31:08,649
the<font color="#E5E5E5"> video enough to they called that</font>

698
00:31:05,379 --> 00:31:11,049
<font color="#E5E5E5">frame scale to a thumbnail size and send</font>

699
00:31:08,649 --> 00:31:12,850
the response back<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then we</font><font color="#E5E5E5"> can</font>

700
00:31:11,049 --> 00:31:19,090
generate<font color="#CCCCCC"> a breakdown of</font><font color="#E5E5E5"> time spent in</font>

701
00:31:12,850 --> 00:31:20,738
every<font color="#CCCCCC"> Cisco so I have this</font><font color="#E5E5E5"> running in</font>

702
00:31:19,090 --> 00:31:23,080
the background<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> feeding a graph</font><font color="#CCCCCC"> Anna</font>

703
00:31:20,739 --> 00:31:26,109
instance<font color="#E5E5E5"> and basically what you can see</font>

704
00:31:23,080 --> 00:31:28,389
<font color="#CCCCCC">here is the time for each and every</font>

705
00:31:26,109 --> 00:31:30,789
request<font color="#CCCCCC"> now I don't</font><font color="#E5E5E5"> recommend that you</font>

706
00:31:28,389 --> 00:31:32,168
<font color="#CCCCCC">do that in production because you don't</font>

707
00:31:30,789 --> 00:31:36,970
want to be<font color="#CCCCCC"> processing each and every</font>

708
00:31:32,169 --> 00:31:39,519
trace chunk and individually graph<font color="#E5E5E5"> each</font>

709
00:31:36,970 --> 00:31:41,739
and every<font color="#E5E5E5"> request but it gives you an</font>

710
00:31:39,519 --> 00:31:43,149
<font color="#E5E5E5">idea of what what can be done the thing</font>

711
00:31:41,739 --> 00:31:45,460
<font color="#E5E5E5">that you can do is that if you have</font>

712
00:31:43,149 --> 00:31:47,228
<font color="#E5E5E5">outliers like you have here those points</font>

713
00:31:45,460 --> 00:31:49,960
<font color="#E5E5E5">you could</font><font color="#CCCCCC"> generate a report and and</font>

714
00:31:47,229 --> 00:31:52,989
drill<font color="#CCCCCC"> down into and this is what we were</font>

715
00:31:49,960 --> 00:31:57,399
gonna do if<font color="#E5E5E5"> you look at the report</font>

716
00:31:52,989 --> 00:32:00,249
generated for one of the fast<font color="#E5E5E5"> instances</font>

717
00:31:57,399 --> 00:32:03,928
we can see that<font color="#CCCCCC"> okay most of the time is</font>

718
00:32:00,249 --> 00:32:08,580
spent<font color="#CCCCCC"> opening the video with ffmpeg and</font>

719
00:32:03,929 --> 00:32:11,820
decoding a full frame that's fine that's

720
00:32:08,580 --> 00:32:14,139
<font color="#E5E5E5">what most of the work is about scaling</font>

721
00:32:11,820 --> 00:32:16,658
as you would<font color="#CCCCCC"> expect this mail mostly</font>

722
00:32:14,139 --> 00:32:18,459
<font color="#E5E5E5">cpu-bound so opening the file there's a</font>

723
00:32:16,659 --> 00:32:22,869
lot of stuff<font color="#CCCCCC"> that goes on and you can</font>

724
00:32:18,460 --> 00:32:26,099
see here<font color="#CCCCCC"> that the combined</font><font color="#E5E5E5"> duration of</font>

725
00:32:22,869 --> 00:32:31,809
all<font color="#E5E5E5"> get T IDs is actually what is</font>

726
00:32:26,099 --> 00:32:35,559
dominating<font color="#E5E5E5"> that that operation then we</font>

727
00:32:31,809 --> 00:32:38,019
have a number<font color="#CCCCCC"> of calls I'm not</font><font color="#E5E5E5"> gonna go</font>

728
00:32:35,559 --> 00:32:40,720
through<font color="#E5E5E5"> all of them but you can see the</font>

729
00:32:38,019 --> 00:32:44,289
interest<font color="#E5E5E5"> in augmenting the model here as</font>

730
00:32:40,720 --> 00:32:46,659
you can<font color="#E5E5E5"> see normally you</font><font color="#CCCCCC"> would have a</font>

731
00:32:44,289 --> 00:32:50,649
read on a<font color="#CCCCCC"> d that you don't know</font><font color="#E5E5E5"> about</font>

732
00:32:46,659 --> 00:32:52,629
<font color="#E5E5E5">you would have</font><font color="#CCCCCC"> M remap and as these that</font>

733
00:32:50,649 --> 00:32:57,428
you don't know<font color="#E5E5E5"> about well math Emory BAM</font>

734
00:32:52,629 --> 00:33:00,730
but<font color="#CCCCCC"> M map and so on and so forth seek</font>

735
00:32:57,429 --> 00:33:02,139
<font color="#E5E5E5">the same thing so seeking you can see</font>

736
00:33:00,730 --> 00:33:02,980
that not a lot happens as you would

737
00:33:02,139 --> 00:33:05,740
<font color="#CCCCCC">expect this is an</font>

738
00:33:02,980 --> 00:33:10,150
next<font color="#E5E5E5"> video file so it's fine then</font>

739
00:33:05,740 --> 00:33:13,030
decoding nothing unusual scaling<font color="#E5E5E5"> nothing</font>

740
00:33:10,150 --> 00:33:16,870
happens it's a purely<font color="#E5E5E5"> CPU it's purely</font>

741
00:33:13,030 --> 00:33:21,520
compute and then<font color="#CCCCCC"> writing</font><font color="#E5E5E5"> the result to a</font>

742
00:33:16,870 --> 00:33:23,770
socket now if we take one example<font color="#E5E5E5"> that</font>

743
00:33:21,520 --> 00:33:25,500
<font color="#E5E5E5">took a long</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> we can see that the</font>

744
00:33:23,770 --> 00:33:27,850
outlier isn't there right

745
00:33:25,500 --> 00:33:29,260
actually this one is<font color="#CCCCCC"> not sending</font><font color="#E5E5E5"> over in</font>

746
00:33:27,850 --> 00:33:33,280
a network<font color="#E5E5E5"> because I had some problems</font>

747
00:33:29,260 --> 00:33:36,610
here but uh it's writing to a plain old

748
00:33:33,280 --> 00:33:38,950
file<font color="#E5E5E5"> basically you can see that writing</font>

749
00:33:36,610 --> 00:33:40,959
<font color="#CCCCCC">doesn't</font><font color="#E5E5E5"> take a long time but during</font><font color="#CCCCCC"> that</font>

750
00:33:38,950 --> 00:33:43,540
<font color="#CCCCCC">time there was a</font><font color="#E5E5E5"> sync call that took</font>

751
00:33:40,960 --> 00:33:44,380
<font color="#CCCCCC">around 600 milliseconds</font><font color="#E5E5E5"> so that's kind</font>

752
00:33:43,540 --> 00:33:47,200
of<font color="#E5E5E5"> insight that you can have very</font>

753
00:33:44,380 --> 00:33:50,559
<font color="#CCCCCC">rapidly and hopefully your applications</font>

754
00:33:47,200 --> 00:33:56,440
<font color="#E5E5E5">don't perform sync during</font><font color="#CCCCCC"> your request</font>

755
00:33:50,559 --> 00:34:00,280
<font color="#E5E5E5">handling but it has been seen so in</font>

756
00:33:56,440 --> 00:34:01,690
conclusion I think<font color="#E5E5E5"> from the tracers</font>

757
00:34:00,280 --> 00:34:03,129
perspective we can<font color="#E5E5E5"> see that we have the</font>

758
00:34:01,690 --> 00:34:07,240
infrastructure<font color="#E5E5E5"> to distribute trace</font>

759
00:34:03,130 --> 00:34:08,800
processing<font color="#E5E5E5"> people are very our users are</font>

760
00:34:07,240 --> 00:34:10,830
<font color="#CCCCCC">very happy that</font><font color="#E5E5E5"> now they have files and</font>

761
00:34:08,800 --> 00:34:12,909
they can do whatever<font color="#E5E5E5"> they want</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> them</font>

762
00:34:10,830 --> 00:34:18,310
<font color="#CCCCCC">but the open questions that I have for</font>

763
00:34:12,909 --> 00:34:20,169
<font color="#CCCCCC">you guys is what form can this type of</font>

764
00:34:18,310 --> 00:34:22,359
products processing take that would be

765
00:34:20,168 --> 00:34:25,388
integrate integratable with existing

766
00:34:22,359 --> 00:34:30,190
viewers or do you think<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> need new</font>

767
00:34:25,389 --> 00:34:31,750
viewers new tools<font color="#E5E5E5"> for that is there</font><font color="#CCCCCC"> are</font>

768
00:34:30,190 --> 00:34:34,918
there tools out there that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> guys use</font>

769
00:34:31,750 --> 00:34:38,530
<font color="#E5E5E5">to monitor very low level metrics</font>

770
00:34:34,918 --> 00:34:44,290
<font color="#E5E5E5">continuously I'd be very</font><font color="#CCCCCC"> happy</font><font color="#E5E5E5"> to have</font>

771
00:34:38,530 --> 00:34:46,679
your feedback otherwise you<font color="#E5E5E5"> have any</font>

772
00:34:44,290 --> 00:34:46,679
questions

773
00:34:50,889 --> 00:35:02,759
<font color="#CCCCCC">all right well thank</font><font color="#E5E5E5"> you</font>

774
00:34:54,030 --> 00:35:02,760
[Applause]

