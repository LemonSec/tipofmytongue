1
00:00:04,620 --> 00:00:09,340
so<font color="#CCCCCC"> running a bus for the</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> dock</font>

2
00:00:06,600 --> 00:00:17,820
<font color="#E5E5E5">brush me</font><font color="#CCCCCC"> and the slides are here</font>

3
00:00:09,340 --> 00:00:17,820
[Applause]

4
00:00:19,010 --> 00:00:24,060
hi everyone<font color="#E5E5E5"> I'm rush me and I'm a</font>

5
00:00:21,869 --> 00:00:25,500
software engineer based in India<font color="#E5E5E5"> so my</font>

6
00:00:24,060 --> 00:00:29,369
<font color="#E5E5E5">top title is go for the JavaScript</font>

7
00:00:25,500 --> 00:00:31,230
<font color="#E5E5E5">developers so let's get started</font><font color="#CCCCCC"> Co</font><font color="#E5E5E5"> is</font>

8
00:00:29,369 --> 00:00:33,719
<font color="#E5E5E5">like the C and the Python as a kid so</font>

9
00:00:31,230 --> 00:00:36,000
it's a common saying that go possesses

10
00:00:33,719 --> 00:00:38,700
the confidence<font color="#E5E5E5"> and athletic ability like</font>

11
00:00:36,000 --> 00:00:42,930
a C<font color="#E5E5E5"> and it has</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> good looks and the</font>

12
00:00:38,700 --> 00:00:44,850
<font color="#CCCCCC">pleasant demeanor like a Python</font><font color="#E5E5E5"> so what</font>

13
00:00:42,930 --> 00:00:46,350
exactly is go it's an<font color="#E5E5E5"> open source</font>

14
00:00:44,850 --> 00:00:47,910
<font color="#CCCCCC">compiled and garbage collected</font>

15
00:00:46,350 --> 00:00:50,399
<font color="#CCCCCC">concurrent system</font><font color="#E5E5E5"> programming language</font>

16
00:00:47,910 --> 00:00:52,319
which<font color="#E5E5E5"> was blazing fast because it has</font>

17
00:00:50,399 --> 00:00:54,899
our young compiler with minimal speed

18
00:00:52,320 --> 00:00:56,850
optimization<font color="#CCCCCC"> and old</font><font color="#E5E5E5"> so it has a strict</font>

19
00:00:54,899 --> 00:00:58,620
compiler and so it's something<font color="#E5E5E5"> like the</font>

20
00:00:56,850 --> 00:01:01,140
things like unused imports<font color="#E5E5E5"> and the</font>

21
00:00:58,620 --> 00:01:04,319
unused variables or hard compile errors

22
00:01:01,140 --> 00:01:08,370
<font color="#E5E5E5">in go and it possesses clean and elegant</font>

23
00:01:04,319 --> 00:01:10,770
syntax so what are the similarities

24
00:01:08,370 --> 00:01:12,750
between<font color="#E5E5E5"> the go and the JavaScript so</font>

25
00:01:10,770 --> 00:01:14,009
both uses the garbage collection<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the</font>

26
00:01:12,750 --> 00:01:16,890
variables and<font color="#E5E5E5"> the functions they have</font><font color="#CCCCCC"> a</font>

27
00:01:14,010 --> 00:01:18,420
specific<font color="#E5E5E5"> scope and in similar fashions</font>

28
00:01:16,890 --> 00:01:21,240
they define the variable structures and

29
00:01:18,420 --> 00:01:23,700
for loops and<font color="#E5E5E5"> if statements what are the</font>

30
00:01:21,240 --> 00:01:25,619
major<font color="#CCCCCC"> differences between the go away in</font>

31
00:01:23,700 --> 00:01:27,420
the JavaScript so<font color="#E5E5E5"> javascript is a</font>

32
00:01:25,619 --> 00:01:30,270
<font color="#CCCCCC">single-threaded that it</font><font color="#E5E5E5"> has the main</font>

33
00:01:27,420 --> 00:01:32,189
thread which<font color="#CCCCCC"> has which</font><font color="#E5E5E5"> does</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> event</font>

34
00:01:30,270 --> 00:01:33,810
loop and there are several<font color="#E5E5E5"> of the thread</font>

35
00:01:32,189 --> 00:01:35,490
<font color="#E5E5E5">switch to the external input output</font>

36
00:01:33,810 --> 00:01:37,409
while in the go the concurrence is the

37
00:01:35,490 --> 00:01:39,630
<font color="#E5E5E5">king in the</font><font color="#CCCCCC"> sense that</font><font color="#E5E5E5"> it has</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> go</font>

38
00:01:37,409 --> 00:01:42,270
<font color="#E5E5E5">routines and the</font><font color="#CCCCCC"> JavaScript is</font>

39
00:01:39,630 --> 00:01:44,130
interpreted language it runs before<font color="#E5E5E5"> it</font>

40
00:01:42,270 --> 00:01:46,320
is<font color="#E5E5E5"> the code is compiled before</font><font color="#CCCCCC"> it</font>

41
00:01:44,130 --> 00:01:49,710
<font color="#E5E5E5">strands while go is a compiled</font><font color="#CCCCCC"> language</font>

42
00:01:46,320 --> 00:01:51,658
and also<font color="#CCCCCC"> in go or we can have</font><font color="#E5E5E5"> writable</font>

43
00:01:49,710 --> 00:01:54,600
return<font color="#CCCCCC"> statement status</font><font color="#E5E5E5"> if you</font><font color="#CCCCCC"> have</font>

44
00:01:51,659 --> 00:01:56,100
let's say<font color="#E5E5E5"> an</font><font color="#CCCCCC"> error called for 500</font>

45
00:01:54,600 --> 00:01:57,928
internal server error or something like

46
00:01:56,100 --> 00:02:00,449
that particular functions can return the

47
00:01:57,929 --> 00:02:05,640
multiple error codes are so it's<font color="#E5E5E5"> very</font>

48
00:02:00,450 --> 00:02:08,520
consistent<font color="#CCCCCC"> and it's easy</font><font color="#E5E5E5"> to maintain so</font>

49
00:02:05,640 --> 00:02:11,780
basic rules that<font color="#CCCCCC"> the lines</font><font color="#E5E5E5"> don't have</font>

50
00:02:08,520 --> 00:02:14,490
don't end<font color="#E5E5E5"> with a semicolon</font><font color="#CCCCCC"> and it's a</font>

51
00:02:11,780 --> 00:02:17,550
<font color="#CCCCCC">very</font><font color="#E5E5E5"> simple example as declaration</font><font color="#CCCCCC"> of</font>

52
00:02:14,490 --> 00:02:20,910
the array of size 3 which has<font color="#E5E5E5"> integer</font>

53
00:02:17,550 --> 00:02:24,100
values<font color="#E5E5E5"> 1 2</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> 3 and there is a comma at</font>

54
00:02:20,910 --> 00:02:27,530
the end of the<font color="#E5E5E5"> tree and the basic types</font>

55
00:02:24,100 --> 00:02:30,950
we're<font color="#CCCCCC"> Nam end is</font><font color="#E5E5E5"> equal to 5</font><font color="#CCCCCC"> so declares</font>

56
00:02:27,530 --> 00:02:32,780
it says that the variable name that<font color="#E5E5E5"> is</font>

57
00:02:30,950 --> 00:02:37,910
numb<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> being declared before</font><font color="#E5E5E5"> the</font>

58
00:02:32,780 --> 00:02:39,950
<font color="#CCCCCC">integers are the datatype itself so in</font>

59
00:02:37,910 --> 00:02:42,170
similar fashion<font color="#CCCCCC"> the for loop</font><font color="#E5E5E5"> and the by</font>

60
00:02:39,950 --> 00:02:44,149
loops the the similarity<font color="#E5E5E5"> which means</font>

61
00:02:42,170 --> 00:02:48,140
seen those of the MS<font color="#E5E5E5"> there are they</font>

62
00:02:44,150 --> 00:02:51,050
don't have the<font color="#CCCCCC"> parentheses</font><font color="#E5E5E5"> and in the</font>

63
00:02:48,140 --> 00:02:53,059
same way the flow control that is there

64
00:02:51,050 --> 00:02:54,980
<font color="#E5E5E5">was no parentheses and if statement it</font>

65
00:02:53,060 --> 00:02:59,360
returns false when the age<font color="#E5E5E5"> is less</font><font color="#CCCCCC"> than</font>

66
00:02:54,980 --> 00:03:01,880
80 not so what are the it<font color="#E5E5E5"> there are some</font>

67
00:02:59,360 --> 00:03:03,560
of the<font color="#E5E5E5"> advanced features and go that are</font>

68
00:03:01,880 --> 00:03:06,320
the good routines which I<font color="#E5E5E5"> already talked</font>

69
00:03:03,560 --> 00:03:08,300
before<font color="#CCCCCC"> that concurrency is the king in</font>

70
00:03:06,320 --> 00:03:10,310
<font color="#E5E5E5">the go which so the</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> routine is</font>

71
00:03:08,300 --> 00:03:14,420
basically a<font color="#E5E5E5"> lightweight train which is</font>

72
00:03:10,310 --> 00:03:17,030
<font color="#E5E5E5">managed by the go runtime and so here go</font>

73
00:03:14,420 --> 00:03:19,190
funk<font color="#CCCCCC"> I mean the function and</font><font color="#E5E5E5"> the ABC are</font>

74
00:03:17,030 --> 00:03:20,840
the three<font color="#CCCCCC"> parameters</font><font color="#E5E5E5"> so what happens is</font>

75
00:03:19,190 --> 00:03:22,670
the function and<font color="#CCCCCC"> the evaluation of</font><font color="#E5E5E5"> the</font>

76
00:03:20,840 --> 00:03:26,420
ABC will happen in the same<font color="#E5E5E5"> thread</font>

77
00:03:22,670 --> 00:03:29,059
itself<font color="#E5E5E5"> I'll the function well</font><font color="#CCCCCC"> it's the</font>

78
00:03:26,420 --> 00:03:32,720
function will be executed in<font color="#E5E5E5"> the in the</font>

79
00:03:29,060 --> 00:03:34,640
different thread and the channels<font color="#CCCCCC"> they</font>

80
00:03:32,720 --> 00:03:36,980
can be thought of as pipelines<font color="#E5E5E5"> or the</font>

81
00:03:34,640 --> 00:03:38,929
pipes like<font color="#E5E5E5"> in which the go routines</font>

82
00:03:36,980 --> 00:03:40,970
themselves communicate and they also

83
00:03:38,930 --> 00:03:42,200
possess a type associated<font color="#CCCCCC"> with it</font><font color="#E5E5E5"> that</font>

84
00:03:40,970 --> 00:03:45,800
is<font color="#E5E5E5"> the data which</font><font color="#CCCCCC"> is allowed to</font>

85
00:03:42,200 --> 00:03:48,049
<font color="#CCCCCC">transport that</font><font color="#E5E5E5"> particular channel and</font>

86
00:03:45,800 --> 00:03:49,910
it's been declared<font color="#E5E5E5"> using this operator</font>

87
00:03:48,050 --> 00:03:53,030
that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> a channel operator here we can</font>

88
00:03:49,910 --> 00:03:55,370
see in an example<font color="#CCCCCC"> that channel B since V</font>

89
00:03:53,030 --> 00:03:58,610
<font color="#E5E5E5">is being sent to the channel CH and</font>

90
00:03:55,370 --> 00:04:01,580
similar way and<font color="#E5E5E5"> how we are assigning the</font>

91
00:03:58,610 --> 00:04:03,500
value to the V is I mean that channel<font color="#E5E5E5"> or</font>

92
00:04:01,580 --> 00:04:05,300
receive the<font color="#E5E5E5"> value from</font><font color="#CCCCCC"> that particular</font>

93
00:04:03,500 --> 00:04:08,900
<font color="#CCCCCC">Shannon and assign it</font><font color="#E5E5E5"> to the variable</font>

94
00:04:05,300 --> 00:04:10,700
that<font color="#E5E5E5"> is V okay and the</font><font color="#CCCCCC"> person's takeaway</font>

95
00:04:08,900 --> 00:04:12,110
is that<font color="#E5E5E5"> those are not get started with</font>

96
00:04:10,700 --> 00:04:15,410
the go<font color="#E5E5E5"> it's never too late to start</font>

97
00:04:12,110 --> 00:04:17,000
something anew all afresh all it takes

98
00:04:15,410 --> 00:04:18,769
<font color="#CCCCCC">us by our practice patience and</font>

99
00:04:17,000 --> 00:04:23,390
perseverance<font color="#CCCCCC"> I really want</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> thank</font>

100
00:04:18,769 --> 00:04:25,549
<font color="#E5E5E5">Arlen Rita and Martha for helping me</font><font color="#CCCCCC"> I</font>

101
00:04:23,390 --> 00:04:27,620
mean getting introduced<font color="#CCCCCC"> to the cool</font>

102
00:04:25,550 --> 00:04:29,150
language<font color="#CCCCCC"> and thank you for inspiring me</font>

103
00:04:27,620 --> 00:04:38,190
a lot

104
00:04:29,150 --> 00:04:38,190
[Applause]

105
00:04:41,190 --> 00:04:53,620
<font color="#E5E5E5">okay so up next</font><font color="#CCCCCC"> too</font><font color="#E5E5E5"> much</font><font color="#CCCCCC"> from the</font><font color="#E5E5E5"> place</font>

106
00:04:46,000 --> 00:04:55,750
for him<font color="#CCCCCC"> Ghibli okay</font>

107
00:04:53,620 --> 00:04:58,120
so hello I'm<font color="#CCCCCC"> Thomas and</font><font color="#E5E5E5"> today I will</font>

108
00:04:55,750 --> 00:05:01,090
<font color="#E5E5E5">show</font><font color="#CCCCCC"> you my debugging adventure we've go</font>

109
00:04:58,120 --> 00:05:02,830
on<font color="#E5E5E5"> so one evening</font><font color="#CCCCCC"> my colleague was</font>

110
00:05:01,090 --> 00:05:06,219
<font color="#E5E5E5">deploying a service on our</font>

111
00:05:02,830 --> 00:05:09,070
infrastructure<font color="#E5E5E5"> and what happened it this</font>

112
00:05:06,220 --> 00:05:11,680
<font color="#E5E5E5">service was</font><font color="#CCCCCC"> not appear in our</font><font color="#E5E5E5"> production</font>

113
00:05:09,070 --> 00:05:14,230
<font color="#E5E5E5">it was deployed but it wasn't attached</font>

114
00:05:11,680 --> 00:05:18,460
to<font color="#E5E5E5"> a load</font><font color="#CCCCCC"> balancer and console which was</font>

115
00:05:14,230 --> 00:05:20,650
<font color="#E5E5E5">our discover solution</font><font color="#CCCCCC"> so I asked him hey</font>

116
00:05:18,460 --> 00:05:25,419
try deploy it one more time<font color="#CCCCCC"> but</font>

117
00:05:20,650 --> 00:05:27,520
<font color="#E5E5E5">obviously it</font><font color="#CCCCCC"> doesn't help</font><font color="#E5E5E5"> and so we</font>

118
00:05:25,420 --> 00:05:33,070
started the backing<font color="#E5E5E5"> like what could be a</font>

119
00:05:27,520 --> 00:05:35,919
problem at<font color="#CCCCCC"> that</font><font color="#E5E5E5"> time at the</font><font color="#CCCCCC"> time our</font>

120
00:05:33,070 --> 00:05:39,070
infrastructure was<font color="#E5E5E5"> built on marathon</font>

121
00:05:35,920 --> 00:05:41,200
with our<font color="#CCCCCC"> application scheduler</font><font color="#E5E5E5"> console</font>

122
00:05:39,070 --> 00:05:42,969
discovery solution marathon<font color="#CCCCCC"> call so</font>

123
00:05:41,200 --> 00:05:45,550
<font color="#E5E5E5">which ties application developed</font>

124
00:05:42,970 --> 00:05:49,170
deployed on marathon<font color="#E5E5E5"> to console and the</font>

125
00:05:45,550 --> 00:05:53,760
service<font color="#E5E5E5"> that was deployed so we had like</font>

126
00:05:49,170 --> 00:05:57,040
<font color="#E5E5E5">300 services and only one has a problem</font>

127
00:05:53,760 --> 00:05:59,950
<font color="#CCCCCC">so what has happened this</font><font color="#E5E5E5"> application</font>

128
00:05:57,040 --> 00:06:03,100
<font color="#E5E5E5">has exposed two ports one for admin and</font>

129
00:05:59,950 --> 00:06:06,280
<font color="#CCCCCC">one for</font><font color="#E5E5E5"> the rest of</font><font color="#CCCCCC"> the world</font><font color="#E5E5E5"> each port</font>

130
00:06:03,100 --> 00:06:09,310
has the tags<font color="#CCCCCC"> and both ports were</font>

131
00:06:06,280 --> 00:06:11,500
registered with<font color="#E5E5E5"> the same tags so because</font>

132
00:06:09,310 --> 00:06:16,960
the it was tagged with has the<font color="#CCCCCC"> same tags</font>

133
00:06:11,500 --> 00:06:18,820
one port<font color="#E5E5E5"> disappear from console so what</font>

134
00:06:16,960 --> 00:06:23,200
has changed<font color="#E5E5E5"> because this service was</font>

135
00:06:18,820 --> 00:06:26,680
deployed<font color="#E5E5E5"> many times a day one tag has</font>

136
00:06:23,200 --> 00:06:31,349
been<font color="#E5E5E5"> append so at the time we have</font><font color="#CCCCCC"> 80%</font>

137
00:06:26,680 --> 00:06:37,150
<font color="#CCCCCC">of our application has only one port</font>

138
00:06:31,350 --> 00:06:40,510
<font color="#CCCCCC">eight percent has tags and only one that</font>

139
00:06:37,150 --> 00:06:43,030
fails<font color="#E5E5E5"> has multiple target port so let's</font>

140
00:06:40,510 --> 00:06:46,000
take a look<font color="#E5E5E5"> at code and here's a bug</font>

141
00:06:43,030 --> 00:06:47,460
<font color="#E5E5E5">like something here</font>

142
00:06:46,000 --> 00:06:52,630
so what

143
00:06:47,460 --> 00:06:54,190
we just add one tag and we end up<font color="#E5E5E5"> with 2</font>

144
00:06:52,630 --> 00:06:58,690
same slices

145
00:06:54,190 --> 00:07:02,500
I will<font color="#E5E5E5"> unroll this for loop for you</font><font color="#CCCCCC"> so</font>

146
00:06:58,690 --> 00:07:07,889
it looks like<font color="#E5E5E5"> this and you</font><font color="#CCCCCC"> can guess</font>

147
00:07:02,500 --> 00:07:07,889
what<font color="#E5E5E5"> function a and function B prints</font>

148
00:07:09,060 --> 00:07:17,830
like I haven't been expecting this at

149
00:07:12,940 --> 00:07:22,660
the time so what happened<font color="#E5E5E5"> yeah</font>

150
00:07:17,830 --> 00:07:25,599
slices<font color="#E5E5E5"> when we a what is slice slices</font>

151
00:07:22,660 --> 00:07:30,910
with just<font color="#E5E5E5"> three elements like a pointer</font>

152
00:07:25,599 --> 00:07:33,150
to our<font color="#E5E5E5"> eye length at capacity</font><font color="#CCCCCC"> and when</font>

153
00:07:30,910 --> 00:07:37,840
we appended to<font color="#E5E5E5"> a slice and it has</font>

154
00:07:33,150 --> 00:07:41,948
<font color="#E5E5E5">sufficient capacity we only change the</font>

155
00:07:37,840 --> 00:07:43,929
last<font color="#E5E5E5"> element and update the length so in</font>

156
00:07:41,949 --> 00:07:46,419
our example<font color="#E5E5E5"> it</font><font color="#CCCCCC"> looks like this</font><font color="#E5E5E5"> we start</font>

157
00:07:43,930 --> 00:07:52,680
<font color="#E5E5E5">with a slice like this then append</font>

158
00:07:46,419 --> 00:07:57,940
element then append next element<font color="#CCCCCC"> and</font>

159
00:07:52,680 --> 00:08:02,080
next element finish with<font color="#CCCCCC"> three variables</font>

160
00:07:57,940 --> 00:08:08,229
<font color="#CCCCCC">point to the same space in a in a</font><font color="#E5E5E5"> disk</font>

161
00:08:02,080 --> 00:08:12,550
in a heap<font color="#CCCCCC"> so yeah</font><font color="#E5E5E5"> when we run this we</font>

162
00:08:08,229 --> 00:08:16,800
and print<font color="#E5E5E5"> memory locations we see that</font>

163
00:08:12,550 --> 00:08:24,669
everything<font color="#E5E5E5"> is in one place</font>

164
00:08:16,800 --> 00:08:28,979
yeah and in our second example like<font color="#CCCCCC"> this</font>

165
00:08:24,669 --> 00:08:28,979
<font color="#E5E5E5">pointers are different</font>

166
00:08:30,689 --> 00:08:38,440
so yeah I was expecting<font color="#CCCCCC"> two slices to</font>

167
00:08:35,559 --> 00:08:42,039
work like this every time unfortunately

168
00:08:38,440 --> 00:08:45,100
<font color="#CCCCCC">they do not</font><font color="#E5E5E5"> work like this so be careful</font>

169
00:08:42,039 --> 00:08:49,170
when using happens<font color="#CCCCCC"> do</font><font color="#E5E5E5"> not happened to</font>

170
00:08:45,100 --> 00:08:52,720
slice<font color="#E5E5E5"> when you want to keep unchanged</font>

171
00:08:49,170 --> 00:08:58,560
<font color="#CCCCCC">yeah and remember</font><font color="#E5E5E5"> you are never</font><font color="#CCCCCC"> working</font>

172
00:08:52,720 --> 00:08:58,560
on a copy of your<font color="#E5E5E5"> data okay thank you</font>

173
00:09:02,310 --> 00:09:06,630
quick question how many<font color="#E5E5E5"> of you have been</font>

174
00:09:04,630 --> 00:09:12,670
<font color="#CCCCCC">bitten by this</font>

175
00:09:06,630 --> 00:09:20,380
yeah<font color="#E5E5E5"> okay good same okay so next up we</font>

176
00:09:12,670 --> 00:09:24,069
have<font color="#CCCCCC"> Janna and row</font><font color="#E5E5E5"> buffer hello this is</font>

177
00:09:20,380 --> 00:09:26,199
<font color="#E5E5E5">my eighth</font><font color="#CCCCCC"> year at fosston</font><font color="#E5E5E5"> fifth at goad</font>

178
00:09:24,070 --> 00:09:28,510
ever met Fossum<font color="#E5E5E5"> so it's been a</font><font color="#CCCCCC"> wild ride</font>

179
00:09:26,199 --> 00:09:30,430
<font color="#E5E5E5">and I have no intention to speak here</font>

180
00:09:28,510 --> 00:09:31,980
but I saw this room and I was like<font color="#CCCCCC"> this</font>

181
00:09:30,430 --> 00:09:34,510
is legit legit

182
00:09:31,980 --> 00:09:36,610
<font color="#CCCCCC">let's give it Lightning thought so these</font>

183
00:09:34,510 --> 00:09:39,519
are some like style tips I have for go

184
00:09:36,610 --> 00:09:41,949
packages because I signed<font color="#E5E5E5"> up to</font><font color="#CCCCCC"> be a go</font>

185
00:09:39,519 --> 00:09:43,630
<font color="#CCCCCC">readability</font><font color="#E5E5E5"> reviewer for a long time at</font>

186
00:09:41,949 --> 00:09:45,579
<font color="#CCCCCC">Google and like some</font><font color="#E5E5E5"> of this stuff is</font>

187
00:09:43,630 --> 00:09:49,089
<font color="#E5E5E5">really obvious</font><font color="#CCCCCC"> but it comes very</font><font color="#E5E5E5"> often</font>

188
00:09:45,579 --> 00:09:52,149
<font color="#E5E5E5">so first of all if you need any you know</font>

189
00:09:49,089 --> 00:09:54,040
style<font color="#E5E5E5"> guideline tips feel free to reach</font>

190
00:09:52,149 --> 00:09:56,140
out to<font color="#CCCCCC"> goal I'm</font><font color="#E5E5E5"> not sore to go first</font><font color="#CCCCCC"> leg</font>

191
00:09:54,040 --> 00:09:57,760
<font color="#CCCCCC">you should also check out the code</font>

192
00:09:56,140 --> 00:10:00,550
review<font color="#E5E5E5"> comments this</font><font color="#CCCCCC"> is just like</font>

193
00:09:57,760 --> 00:10:03,699
general<font color="#E5E5E5"> tips and this entire</font>

194
00:10:00,550 --> 00:10:07,029
presentation is<font color="#E5E5E5"> also available as an</font>

195
00:10:03,699 --> 00:10:10,089
<font color="#E5E5E5">article on</font><font color="#CCCCCC"> Raquel that org</font><font color="#E5E5E5"> style</font>

196
00:10:07,029 --> 00:10:11,800
- packages<font color="#E5E5E5"> so the first thing is</font><font color="#CCCCCC"> about</font>

197
00:10:10,089 --> 00:10:15,339
organization because organization is

198
00:10:11,800 --> 00:10:18,130
what<font color="#CCCCCC"> matters you try to use you know</font>

199
00:10:15,339 --> 00:10:20,800
multiple<font color="#E5E5E5"> files go allows</font><font color="#CCCCCC"> you to split</font>

200
00:10:18,130 --> 00:10:24,100
<font color="#CCCCCC">your package in multiple files and you</font>

201
00:10:20,800 --> 00:10:26,439
<font color="#CCCCCC">can just you know</font><font color="#E5E5E5"> create some logical</font>

202
00:10:24,100 --> 00:10:28,839
separation for example you can this is

203
00:10:26,440 --> 00:10:30,820
<font color="#CCCCCC">the HTTP package</font><font color="#E5E5E5"> and you can put all</font><font color="#CCCCCC"> the</font>

204
00:10:28,839 --> 00:10:33,190
header related stuff in headers that<font color="#E5E5E5"> go</font>

205
00:10:30,820 --> 00:10:35,529
cookies<font color="#CCCCCC"> related stuff in cookies</font><font color="#E5E5E5"> that go</font>

206
00:10:33,190 --> 00:10:37,510
all the<font color="#CCCCCC"> core stuff</font><font color="#E5E5E5"> maybe in HTTP</font><font color="#CCCCCC"> Thalgo</font>

207
00:10:35,529 --> 00:10:40,810
or maybe it will<font color="#E5E5E5"> get too long and you</font>

208
00:10:37,510 --> 00:10:43,420
can split<font color="#CCCCCC"> it</font><font color="#E5E5E5"> as client that go and</font><font color="#CCCCCC"> a</font>

209
00:10:40,810 --> 00:10:45,670
server<font color="#CCCCCC"> that go</font><font color="#E5E5E5"> try to use multiple</font>

210
00:10:43,420 --> 00:10:48,640
files<font color="#E5E5E5"> the other thing is keep types</font>

211
00:10:45,670 --> 00:10:51,189
closed<font color="#E5E5E5"> for example the core header type</font>

212
00:10:48,640 --> 00:10:53,020
can maybe fit better in the headers file

213
00:10:51,190 --> 00:10:55,510
because all the other methods<font color="#E5E5E5"> and like</font>

214
00:10:53,020 --> 00:10:58,540
other functionality<font color="#E5E5E5"> maybe some utilities</font>

215
00:10:55,510 --> 00:11:00,939
will go there<font color="#CCCCCC"> some people usually</font><font color="#E5E5E5"> make</font>

216
00:10:58,540 --> 00:11:04,599
the mistake<font color="#E5E5E5"> of like putting headers type</font>

217
00:11:00,940 --> 00:11:06,940
<font color="#CCCCCC">into the HTTP that</font><font color="#E5E5E5"> go file because or at</font>

218
00:11:04,600 --> 00:11:08,980
the initial you know<font color="#E5E5E5"> enter point after</font>

219
00:11:06,940 --> 00:11:11,320
the HTTP package because<font color="#E5E5E5"> if they</font><font color="#CCCCCC"> think</font>

220
00:11:08,980 --> 00:11:12,940
that<font color="#E5E5E5"> this is a core type but try to you</font>

221
00:11:11,320 --> 00:11:15,010
know<font color="#E5E5E5"> put it in where it makes</font><font color="#CCCCCC"> sense</font>

222
00:11:12,940 --> 00:11:17,470
<font color="#E5E5E5">because</font><font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to be able to you know</font>

223
00:11:15,010 --> 00:11:19,300
<font color="#E5E5E5">jump back to the</font><font color="#CCCCCC"> type and</font><font color="#E5E5E5"> see and you</font>

224
00:11:17,470 --> 00:11:20,740
<font color="#E5E5E5">know use</font><font color="#CCCCCC"> it as a reference</font><font color="#E5E5E5"> it kind of</font>

225
00:11:19,300 --> 00:11:23,260
helps<font color="#CCCCCC"> you with you</font><font color="#E5E5E5"> know when you're</font>

226
00:11:20,740 --> 00:11:25,570
reading the<font color="#E5E5E5"> source code the other thing</font>

227
00:11:23,260 --> 00:11:28,750
is organized by<font color="#CCCCCC"> responsibility I came</font>

228
00:11:25,570 --> 00:11:30,790
from<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know see and then later</font><font color="#E5E5E5"> Java</font>

229
00:11:28,750 --> 00:11:34,360
and I had this like especially<font color="#CCCCCC"> because</font>

230
00:11:30,790 --> 00:11:37,750
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the Java background I had this habit</font>

231
00:11:34,360 --> 00:11:40,450
of<font color="#CCCCCC"> creighton for example in models</font><font color="#E5E5E5"> you</font>

232
00:11:37,750 --> 00:11:43,030
know<font color="#E5E5E5"> package</font><font color="#CCCCCC"> I would put all</font><font color="#E5E5E5"> my entities</font>

233
00:11:40,450 --> 00:11:46,260
there in go<font color="#CCCCCC"> we don't</font><font color="#E5E5E5"> do this we instead</font>

234
00:11:43,030 --> 00:11:49,720
put<font color="#E5E5E5"> everything by responsible in their</font>

235
00:11:46,260 --> 00:11:51,880
respective packages<font color="#E5E5E5"> for example if you</font>

236
00:11:49,720 --> 00:11:53,770
have users<font color="#E5E5E5"> that's cool</font><font color="#CCCCCC"> if you have a</font>

237
00:11:51,880 --> 00:11:56,020
user service type of package or like a

238
00:11:53,770 --> 00:11:58,360
management<font color="#E5E5E5"> package put the user entity</font>

239
00:11:56,020 --> 00:12:00,579
there<font color="#E5E5E5"> because this is where you know you</font>

240
00:11:58,360 --> 00:12:03,040
know<font color="#E5E5E5"> there that you will</font><font color="#CCCCCC"> also put</font>

241
00:12:00,580 --> 00:12:06,550
functionality to return<font color="#E5E5E5"> you users in</font>

242
00:12:03,040 --> 00:12:09,099
<font color="#CCCCCC">that type of stuff provide examples in</font>

243
00:12:06,550 --> 00:12:13,300
<font color="#E5E5E5">God</font><font color="#CCCCCC"> godox this is really actually cool</font>

244
00:12:09,100 --> 00:12:15,670
<font color="#CCCCCC">because go allows you to embed</font><font color="#E5E5E5"> snippets</font>

245
00:12:13,300 --> 00:12:17,500
<font color="#E5E5E5">in the go doc and especially if the</font>

246
00:12:15,670 --> 00:12:19,329
<font color="#E5E5E5">usage is not trivial this is kind of</font>

247
00:12:17,500 --> 00:12:20,950
like<font color="#E5E5E5"> giving</font><font color="#CCCCCC"> your users</font><font color="#E5E5E5"> a way</font><font color="#CCCCCC"> to like</font>

248
00:12:19,330 --> 00:12:23,680
<font color="#E5E5E5">copy paste and like you know quickly</font>

249
00:12:20,950 --> 00:12:26,020
<font color="#E5E5E5">just get an understanding of how to make</font>

250
00:12:23,680 --> 00:12:27,939
a call to the function<font color="#CCCCCC"> and there's a</font>

251
00:12:26,020 --> 00:12:30,850
really<font color="#CCCCCC"> good blog</font><font color="#E5E5E5"> post actually on the go</font>

252
00:12:27,940 --> 00:12:33,010
<font color="#E5E5E5">block about this go examples go</font><font color="#CCCCCC"> like</font>

253
00:12:30,850 --> 00:12:35,980
examples are testable<font color="#E5E5E5"> so you write them</font>

254
00:12:33,010 --> 00:12:38,200
as test functions and they are run as a

255
00:12:35,980 --> 00:12:41,170
part of go test<font color="#E5E5E5"> so you know</font><font color="#CCCCCC"> they're</font>

256
00:12:38,200 --> 00:12:43,930
compiled tested and they are never

257
00:12:41,170 --> 00:12:47,589
<font color="#CCCCCC">getting absolute</font><font color="#E5E5E5"> because they are a part</font>

258
00:12:43,930 --> 00:12:49,410
of the go test I<font color="#E5E5E5"> would say that like you</font>

259
00:12:47,590 --> 00:12:51,700
know try to<font color="#CCCCCC"> optimize for</font><font color="#E5E5E5"> go doc because</font>

260
00:12:49,410 --> 00:12:54,490
<font color="#E5E5E5">this is something</font><font color="#CCCCCC"> like when you're</font>

261
00:12:51,700 --> 00:12:55,860
designing<font color="#E5E5E5"> the API initially try to take</font>

262
00:12:54,490 --> 00:12:59,279
a<font color="#E5E5E5"> look at what is you know go</font>

263
00:12:55,860 --> 00:13:02,040
<font color="#E5E5E5">on the go doc I'm not suggesting that</font>

264
00:12:59,279 --> 00:13:04,019
like you<font color="#CCCCCC"> organized entirely but try to</font>

265
00:13:02,040 --> 00:13:06,329
have a sense<font color="#E5E5E5"> of what it how it will be</font>

266
00:13:04,019 --> 00:13:09,060
represented<font color="#CCCCCC"> it because go doc</font><font color="#E5E5E5"> will be</font>

267
00:13:06,329 --> 00:13:12,300
<font color="#CCCCCC">the</font><font color="#E5E5E5"> entry point of your users</font><font color="#CCCCCC"> and I said</font>

268
00:13:09,060 --> 00:13:13,979
go<font color="#E5E5E5"> space dock because Francis told me</font>

269
00:13:12,300 --> 00:13:18,149
that like it's you<font color="#CCCCCC"> know the other stuff</font>

270
00:13:13,980 --> 00:13:20,880
is<font color="#E5E5E5"> deprecated but go space</font><font color="#CCCCCC"> dock HTTP</font>

271
00:13:18,149 --> 00:13:23,519
will be<font color="#CCCCCC"> only available in 1.11 so you</font>

272
00:13:20,880 --> 00:13:25,529
better try to you know take<font color="#E5E5E5"> a look at</font>

273
00:13:23,519 --> 00:13:28,790
the current<font color="#E5E5E5"> all for whatever the</font>

274
00:13:25,529 --> 00:13:33,260
official<font color="#CCCCCC"> name</font><font color="#E5E5E5"> because there's no RC but</font>

275
00:13:28,790 --> 00:13:38,279
either<font color="#E5E5E5"> use go</font><font color="#CCCCCC"> dock or wait for 1.12</font>

276
00:13:33,260 --> 00:13:39,930
<font color="#E5E5E5">anyways</font><font color="#CCCCCC"> put binaries</font><font color="#E5E5E5"> in a command</font><font color="#CCCCCC"> this</font>

277
00:13:38,279 --> 00:13:42,209
<font color="#CCCCCC">is very common like all the like main</font>

278
00:13:39,930 --> 00:13:44,760
functions should go<font color="#CCCCCC"> into</font><font color="#E5E5E5"> slash command</font>

279
00:13:42,209 --> 00:13:47,219
like this is the<font color="#CCCCCC"> go-to in the</font><font color="#E5E5E5"> gore core</font>

280
00:13:44,760 --> 00:13:50,819
repository<font color="#CCCCCC"> I will talk about some naming</font>

281
00:13:47,220 --> 00:13:53,700
stuff<font color="#CCCCCC"> lowercase stuff only no</font><font color="#E5E5E5"> camelcase</font>

282
00:13:50,820 --> 00:13:55,410
know like underscore short but

283
00:13:53,700 --> 00:13:57,329
representative names<font color="#CCCCCC"> no common no you</font>

284
00:13:55,410 --> 00:14:00,149
still if you want<font color="#CCCCCC"> to use you tool use</font>

285
00:13:57,329 --> 00:14:01,680
like some context like say<font color="#E5E5E5"> HTTP util try</font>

286
00:14:00,149 --> 00:14:03,240
to enforce when<font color="#E5E5E5"> it's URLs if you have</font>

287
00:14:01,680 --> 00:14:06,029
this<font color="#E5E5E5"> like fence URLs you can enforce</font>

288
00:14:03,240 --> 00:14:08,130
them<font color="#E5E5E5"> and write some</font><font color="#CCCCCC"> docs please document</font>

289
00:14:06,029 --> 00:14:11,579
the page<font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't have any excuses and</font>

290
00:14:08,130 --> 00:14:14,100
use<font color="#CCCCCC"> doc that go</font><font color="#E5E5E5"> if you have very long</font>

291
00:14:11,579 --> 00:14:15,899
documentation so people can<font color="#E5E5E5"> just you</font>

292
00:14:14,100 --> 00:14:17,579
<font color="#CCCCCC">know jump to that file</font><font color="#E5E5E5"> and like read as</font>

293
00:14:15,899 --> 00:14:20,750
a<font color="#CCCCCC"> maintainer it's really then that's all</font>

294
00:14:17,579 --> 00:14:20,750
<font color="#E5E5E5">take a look at these things</font>

295
00:14:21,680 --> 00:14:35,099
<font color="#E5E5E5">okay okay</font><font color="#CCCCCC"> and up</font><font color="#E5E5E5"> next we have a go</font>

296
00:14:28,949 --> 00:14:38,609
performance tuning<font color="#CCCCCC"> cool and a brawler</font>

297
00:14:35,100 --> 00:14:42,779
bus for him<font color="#E5E5E5"> whatever</font><font color="#CCCCCC"> his name is</font>

298
00:14:38,610 --> 00:14:46,230
[Applause]

299
00:14:42,779 --> 00:14:48,870
hi I'm<font color="#CCCCCC"> Ritchie I'm a</font><font color="#E5E5E5"> developer on ubers</font>

300
00:14:46,230 --> 00:14:51,180
<font color="#CCCCCC">open source metric stack m3 which is all</font>

301
00:14:48,870 --> 00:14:52,560
<font color="#E5E5E5">written</font><font color="#CCCCCC"> in go</font><font color="#E5E5E5"> this is originally a</font>

302
00:14:51,180 --> 00:14:55,709
<font color="#E5E5E5">30-minute talk so I'm gonna speak very</font>

303
00:14:52,560 --> 00:14:57,329
quickly<font color="#CCCCCC"> I cut out a bunch</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> but</font>

304
00:14:55,709 --> 00:14:58,709
<font color="#CCCCCC">it's basically a war story</font><font color="#E5E5E5"> from</font>

305
00:14:57,329 --> 00:15:00,959
production

306
00:14:58,709 --> 00:15:03,479
so basically<font color="#CCCCCC"> uper has a</font><font color="#E5E5E5"> service called</font>

307
00:15:00,959 --> 00:15:05,670
<font color="#CCCCCC">the jesters and their job</font><font color="#E5E5E5"> is basically</font>

308
00:15:03,480 --> 00:15:07,709
to<font color="#E5E5E5"> just receive metrics at like regular</font>

309
00:15:05,670 --> 00:15:10,290
intervals and<font color="#E5E5E5"> then write them</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> storage</font>

310
00:15:07,709 --> 00:15:11,729
as quickly as<font color="#CCCCCC"> possible so one</font><font color="#E5E5E5"> day we</font>

311
00:15:10,290 --> 00:15:13,709
deployed our<font color="#E5E5E5"> in</font><font color="#CCCCCC"> gesture service kind</font><font color="#E5E5E5"> of</font>

312
00:15:11,730 --> 00:15:16,050
like routine deployment<font color="#E5E5E5"> because they</font>

313
00:15:13,709 --> 00:15:17,779
hadn't<font color="#CCCCCC"> been deployed in a few months</font><font color="#E5E5E5"> and</font>

314
00:15:16,050 --> 00:15:20,008
<font color="#E5E5E5">you can see that the end-to-end latency</font>

315
00:15:17,779 --> 00:15:21,930
<font color="#E5E5E5">before we deployed</font><font color="#CCCCCC"> it was like 10</font>

316
00:15:20,009 --> 00:15:25,019
seconds<font color="#E5E5E5"> and after we deployed was over</font>

317
00:15:21,930 --> 00:15:26,670
20 20 seconds<font color="#CCCCCC"> this is really bad because</font>

318
00:15:25,019 --> 00:15:28,290
it means graphs don't load as quickly

319
00:15:26,670 --> 00:15:30,380
and alerts can't catch issues as quickly

320
00:15:28,290 --> 00:15:32,160
<font color="#CCCCCC">so you want to keep</font><font color="#E5E5E5"> this p99 latency low</font>

321
00:15:30,380 --> 00:15:34,050
<font color="#CCCCCC">so</font><font color="#E5E5E5"> he tried to</font><font color="#CCCCCC"> figure</font><font color="#E5E5E5"> out what went</font>

322
00:15:32,160 --> 00:15:36,240
wrong<font color="#E5E5E5"> and that was really tricky because</font>

323
00:15:34,050 --> 00:15:37,709
this code<font color="#CCCCCC"> was in a mono repo so we're</font>

324
00:15:36,240 --> 00:15:39,899
like hundreds and<font color="#E5E5E5"> hundreds of commits</font>

325
00:15:37,709 --> 00:15:42,000
and we hadn't deployed in months<font color="#CCCCCC"> so we</font>

326
00:15:39,899 --> 00:15:44,459
weren't<font color="#E5E5E5"> sure which one affected it so</font>

327
00:15:42,000 --> 00:15:47,069
long<font color="#E5E5E5"> story short</font><font color="#CCCCCC"> we did I get by set in</font>

328
00:15:44,459 --> 00:15:50,579
production<font color="#E5E5E5"> which is terrible</font><font color="#CCCCCC"> but we</font>

329
00:15:47,069 --> 00:15:52,199
found the<font color="#E5E5E5"> issue and it was this</font><font color="#CCCCCC"> I don't</font>

330
00:15:50,579 --> 00:15:54,060
<font color="#CCCCCC">have time to delve into the details</font><font color="#E5E5E5"> but</font>

331
00:15:52,199 --> 00:15:55,500
<font color="#CCCCCC">basically the</font><font color="#E5E5E5"> code on the</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> is</font>

332
00:15:54,060 --> 00:15:57,779
<font color="#E5E5E5">almost the same as the code on the left</font>

333
00:15:55,500 --> 00:15:59,670
<font color="#CCCCCC">it's just</font><font color="#E5E5E5"> code that was in line got</font>

334
00:15:57,779 --> 00:16:01,199
moved into a helper function<font color="#E5E5E5"> we're like</font>

335
00:15:59,670 --> 00:16:03,719
<font color="#CCCCCC">okay that</font><font color="#E5E5E5"> shouldn't make</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> much</font>

336
00:16:01,199 --> 00:16:05,310
slower like calling functions isn't you

337
00:16:03,720 --> 00:16:06,420
know isn't<font color="#CCCCCC"> free but it's not that</font>

338
00:16:05,310 --> 00:16:08,489
expensive it shouldn't make things twice

339
00:16:06,420 --> 00:16:10,110
as slow<font color="#CCCCCC"> so we're</font><font color="#E5E5E5"> trying to figure out</font>

340
00:16:08,490 --> 00:16:12,569
<font color="#E5E5E5">what was</font><font color="#CCCCCC"> going on we ran a</font><font color="#E5E5E5"> bunch of</font>

341
00:16:10,110 --> 00:16:13,800
micro benchmarks<font color="#E5E5E5"> that showed no</font>

342
00:16:12,569 --> 00:16:15,959
performance difference between these two

343
00:16:13,800 --> 00:16:18,029
versions<font color="#E5E5E5"> of the clone function</font>

344
00:16:15,959 --> 00:16:19,800
so sometimes micro benchmarks<font color="#E5E5E5"> lie but we</font>

345
00:16:18,029 --> 00:16:22,410
took flame graphs of both services

346
00:16:19,800 --> 00:16:23,758
running<font color="#CCCCCC"> in predict production and again</font>

347
00:16:22,410 --> 00:16:25,829
it looked like the service was spending

348
00:16:23,759 --> 00:16:28,100
the<font color="#E5E5E5"> same amount of time in both versions</font>

349
00:16:25,829 --> 00:16:30,510
of<font color="#E5E5E5"> the code so</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> were really confused</font>

350
00:16:28,100 --> 00:16:32,430
<font color="#CCCCCC">kind of out</font><font color="#E5E5E5"> of desperation because when</font>

351
00:16:30,510 --> 00:16:33,819
<font color="#E5E5E5">CPU profiles don't work I kind of lose</font>

352
00:16:32,430 --> 00:16:37,479
<font color="#E5E5E5">my</font>

353
00:16:33,820 --> 00:16:39,149
we<font color="#CCCCCC"> SCP the</font><font color="#E5E5E5"> binaries down and ran go to</font>

354
00:16:37,480 --> 00:16:42,399
object dump on them to<font color="#E5E5E5"> get the assembly</font>

355
00:16:39,149 --> 00:16:44,740
<font color="#E5E5E5">and long story short Assembly's</font><font color="#CCCCCC"> almost</font>

356
00:16:42,399 --> 00:16:46,180
the same<font color="#CCCCCC"> the only</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> we noticed</font>

357
00:16:44,740 --> 00:16:47,320
though is<font color="#E5E5E5"> that the clone bytes which is</font>

358
00:16:46,180 --> 00:16:49,329
like the helper method I was talking

359
00:16:47,320 --> 00:16:51,459
about<font color="#E5E5E5"> earlier</font><font color="#CCCCCC"> ends</font><font color="#E5E5E5"> up not actually</font>

360
00:16:49,330 --> 00:16:53,920
<font color="#E5E5E5">getting in lines which God</font><font color="#CCCCCC"> is thinking</font>

361
00:16:51,459 --> 00:16:56,250
<font color="#E5E5E5">and we went back</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> looked at the CPU</font>

362
00:16:53,920 --> 00:16:59,469
profiles<font color="#CCCCCC"> turns</font><font color="#E5E5E5"> out CP profiles don't lie</font>

363
00:16:56,250 --> 00:17:00,880
<font color="#E5E5E5">humans just make mistakes</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> there</font>

364
00:16:59,470 --> 00:17:02,350
<font color="#CCCCCC">actually was a pretty</font><font color="#E5E5E5"> big difference in</font>

365
00:17:00,880 --> 00:17:04,000
this<font color="#E5E5E5"> one function</font><font color="#CCCCCC"> called runtime doubt</font>

366
00:17:02,350 --> 00:17:05,260
more stack but we're like<font color="#CCCCCC"> oh that's a</font>

367
00:17:04,000 --> 00:17:08,170
<font color="#E5E5E5">runtime function</font><font color="#CCCCCC"> and runtimes always</font>

368
00:17:05,260 --> 00:17:11,079
correct<font color="#E5E5E5"> like can't be my fault</font><font color="#CCCCCC"> turns</font><font color="#E5E5E5"> out</font>

369
00:17:08,170 --> 00:17:12,010
<font color="#E5E5E5">that wasn't true</font><font color="#CCCCCC"> so we dug into this</font>

370
00:17:11,079 --> 00:17:15,220
<font color="#E5E5E5">tried to</font><font color="#CCCCCC"> figure</font><font color="#E5E5E5"> out what this function</font>

371
00:17:12,010 --> 00:17:16,920
<font color="#CCCCCC">does and it turns out and go every girl</font>

372
00:17:15,220 --> 00:17:19,569
<font color="#CCCCCC">routine starts with a two kilobyte</font><font color="#E5E5E5"> stack</font>

373
00:17:16,920 --> 00:17:20,679
<font color="#CCCCCC">and then when you call a</font><font color="#E5E5E5"> function the</font>

374
00:17:19,569 --> 00:17:22,089
runtime checks if you have enough room

375
00:17:20,679 --> 00:17:23,920
<font color="#CCCCCC">left on</font><font color="#E5E5E5"> the stack</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> call the function</font>

376
00:17:22,089 --> 00:17:26,589
<font color="#E5E5E5">if you don't allocates a new stack twice</font>

377
00:17:23,920 --> 00:17:28,780
as big copies all the<font color="#E5E5E5"> stack frames and</font>

378
00:17:26,589 --> 00:17:30,129
then<font color="#CCCCCC"> resumes execution so our new theory</font>

379
00:17:28,780 --> 00:17:31,720
was that<font color="#CCCCCC"> in production</font><font color="#E5E5E5"> our call stack</font>

380
00:17:30,130 --> 00:17:33,250
was so deep<font color="#E5E5E5"> and we were right on</font><font color="#CCCCCC"> the</font>

381
00:17:31,720 --> 00:17:34,179
edge<font color="#CCCCCC"> that when you called clone it would</font>

382
00:17:33,250 --> 00:17:36,010
push you over the<font color="#E5E5E5"> edge and you'd</font>

383
00:17:34,179 --> 00:17:38,320
allocate like a<font color="#E5E5E5"> 48 kilobyte stack which</font>

384
00:17:36,010 --> 00:17:39,700
expensive<font color="#CCCCCC"> and in the benchmarks the</font>

385
00:17:38,320 --> 00:17:42,700
stack was really shallow so you wouldn't

386
00:17:39,700 --> 00:17:44,950
do<font color="#CCCCCC"> that thing so like</font><font color="#E5E5E5"> okay let's try</font>

387
00:17:42,700 --> 00:17:46,809
this out<font color="#CCCCCC"> basically in our</font><font color="#E5E5E5"> gesture</font>

388
00:17:44,950 --> 00:17:48,340
service all the<font color="#CCCCCC"> code gets executed in</font>

389
00:17:46,809 --> 00:17:49,990
<font color="#E5E5E5">this worker pool</font>

390
00:17:48,340 --> 00:17:51,970
pretty standard<font color="#E5E5E5"> basically allocate a go</font>

391
00:17:49,990 --> 00:17:53,380
<font color="#E5E5E5">routine for every piece</font><font color="#CCCCCC"> of work so to</font>

392
00:17:51,970 --> 00:17:54,490
test this out<font color="#CCCCCC"> we were at a new one where</font>

393
00:17:53,380 --> 00:17:56,559
you allocate<font color="#E5E5E5"> all the girl routines</font>

394
00:17:54,490 --> 00:17:57,670
<font color="#CCCCCC">upfront you never let them die</font><font color="#E5E5E5"> they kind</font>

395
00:17:56,559 --> 00:17:59,020
<font color="#CCCCCC">of hang around</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> background and</font>

396
00:17:57,670 --> 00:18:00,640
then you assign<font color="#E5E5E5"> them work via channels</font>

397
00:17:59,020 --> 00:18:02,559
instead of<font color="#E5E5E5"> spawning them constantly</font><font color="#CCCCCC"> and</font>

398
00:18:00,640 --> 00:18:04,420
then you pay<font color="#E5E5E5"> the stat growth cost once</font>

399
00:18:02,559 --> 00:18:06,580
<font color="#E5E5E5">right and then you never have to pay it</font>

400
00:18:04,420 --> 00:18:09,970
<font color="#CCCCCC">again so</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> rolled this out to</font>

401
00:18:06,580 --> 00:18:11,350
<font color="#E5E5E5">production</font><font color="#CCCCCC"> and the code on</font><font color="#E5E5E5"> the left or</font>

402
00:18:09,970 --> 00:18:12,820
the<font color="#E5E5E5"> air on the left is showing us</font>

403
00:18:11,350 --> 00:18:14,620
rolling<font color="#E5E5E5"> back the regressions either see</font>

404
00:18:12,820 --> 00:18:16,030
<font color="#E5E5E5">the latency comes down the</font><font color="#CCCCCC"> arrow</font><font color="#E5E5E5"> on the</font>

405
00:18:14,620 --> 00:18:17,739
<font color="#CCCCCC">right though is when we release the</font>

406
00:18:16,030 --> 00:18:19,300
<font color="#E5E5E5">worker pool so it actually</font><font color="#CCCCCC"> got even</font>

407
00:18:17,740 --> 00:18:21,280
<font color="#E5E5E5">faster than it was before</font><font color="#CCCCCC"> so I</font><font color="#E5E5E5"> was like</font>

408
00:18:19,300 --> 00:18:23,500
<font color="#CCCCCC">okay cool we actually made this faster</font>

409
00:18:21,280 --> 00:18:24,760
than it ever was originally<font color="#E5E5E5"> which is</font>

410
00:18:23,500 --> 00:18:26,290
great<font color="#E5E5E5"> but we were like we haven't really</font>

411
00:18:24,760 --> 00:18:27,820
<font color="#CCCCCC">proved anything</font><font color="#E5E5E5"> like there's all kind of</font>

412
00:18:26,290 --> 00:18:30,250
like incidental like couldn't send

413
00:18:27,820 --> 00:18:31,450
someone to prison<font color="#E5E5E5"> over</font><font color="#CCCCCC"> this right sort</font>

414
00:18:30,250 --> 00:18:33,190
<font color="#E5E5E5">of like okay let's just work the go</font>

415
00:18:31,450 --> 00:18:34,210
compiler<font color="#E5E5E5"> and figure out and add some</font>

416
00:18:33,190 --> 00:18:36,370
print<font color="#CCCCCC"> statements because that's how we</font>

417
00:18:34,210 --> 00:18:38,380
debug everything and see if this<font color="#CCCCCC"> is</font>

418
00:18:36,370 --> 00:18:40,928
<font color="#CCCCCC">actually happening so we forked the gun</font>

419
00:18:38,380 --> 00:18:43,110
compiler added some<font color="#E5E5E5"> sampling so that we</font>

420
00:18:40,929 --> 00:18:45,190
wouldn't be printing millions<font color="#E5E5E5"> of logs</font>

421
00:18:43,110 --> 00:18:46,080
<font color="#CCCCCC">compile their service with</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> forth go</font>

422
00:18:45,190 --> 00:18:47,430
compiler

423
00:18:46,080 --> 00:18:48,510
<font color="#CCCCCC">threw it up into production</font><font color="#E5E5E5"> again</font>

424
00:18:47,430 --> 00:18:50,550
because that<font color="#CCCCCC"> was the only</font><font color="#E5E5E5"> place where</font>

425
00:18:48,510 --> 00:18:53,550
this issue<font color="#E5E5E5"> would manifest</font><font color="#CCCCCC"> wouldn't show</font>

426
00:18:50,550 --> 00:18:54,870
<font color="#CCCCCC">up at staging</font><font color="#E5E5E5"> immediately start seeing</font>

427
00:18:53,550 --> 00:18:56,970
logs like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> it's saying</font><font color="#CCCCCC"> okay</font>

428
00:18:54,870 --> 00:18:58,199
<font color="#CCCCCC">like</font><font color="#E5E5E5"> around the</font><font color="#CCCCCC"> Cologne</font><font color="#E5E5E5"> bytes function I</font>

429
00:18:56,970 --> 00:18:59,970
<font color="#CCCCCC">just had to</font><font color="#E5E5E5"> grow the stack from four</font>

430
00:18:58,200 --> 00:19:02,640
kilobytes to<font color="#E5E5E5"> eight kilobytes</font><font color="#CCCCCC"> so if you</font>

431
00:18:59,970 --> 00:19:04,200
put an 8 kilobyte allocation<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> hot</font>

432
00:19:02,640 --> 00:19:06,660
path of your<font color="#E5E5E5"> code</font><font color="#CCCCCC"> that could definitely</font>

433
00:19:04,200 --> 00:19:08,460
<font color="#E5E5E5">explain why it gets twice as slow and</font>

434
00:19:06,660 --> 00:19:09,690
then we just basically counted the

435
00:19:08,460 --> 00:19:11,460
number of print statements and we saw

436
00:19:09,690 --> 00:19:12,810
<font color="#CCCCCC">that with the</font><font color="#E5E5E5"> regression there are a lot</font>

437
00:19:11,460 --> 00:19:15,220
and with<font color="#E5E5E5"> the new worker pool there was</font>

438
00:19:12,810 --> 00:19:24,839
none<font color="#CCCCCC"> okay thank you</font><font color="#E5E5E5"> thank you</font>

439
00:19:15,220 --> 00:19:24,839
[Applause]

440
00:19:27,440 --> 00:19:35,340
no no you okay<font color="#E5E5E5"> so up next we have people</font>

441
00:19:33,030 --> 00:19:37,230
need to put their names my<font color="#E5E5E5"> Cape John Oh</font>

442
00:19:35,340 --> 00:19:43,350
<font color="#E5E5E5">John</font><font color="#CCCCCC"> okay cool so</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> next we have John</font>

443
00:19:37,230 --> 00:19:44,700
so<font color="#CCCCCC"> Ross for John alright so this</font><font color="#E5E5E5"> is</font>

444
00:19:43,350 --> 00:19:46,560
gonna<font color="#E5E5E5"> be a little</font><font color="#CCCCCC"> bit lighter</font><font color="#E5E5E5"> than that</font>

445
00:19:44,700 --> 00:19:48,960
<font color="#CCCCCC">sort of technical deep type that we just</font>

446
00:19:46,560 --> 00:19:50,909
had and it's a little<font color="#CCCCCC"> tool it's a little</font>

447
00:19:48,960 --> 00:19:53,760
sort<font color="#CCCCCC"> of package I wrote myself to sort</font>

448
00:19:50,910 --> 00:19:55,830
<font color="#E5E5E5">of scratch an itch that I had where</font><font color="#CCCCCC"> I</font>

449
00:19:53,760 --> 00:19:57,540
was<font color="#E5E5E5"> finding</font><font color="#CCCCCC"> myself constantly sort of</font>

450
00:19:55,830 --> 00:19:58,770
<font color="#CCCCCC">rolling</font><font color="#E5E5E5"> commands to check the status of</font>

451
00:19:57,540 --> 00:20:00,420
things things that<font color="#E5E5E5"> I just wanted to keep</font>

452
00:19:58,770 --> 00:20:02,940
an eye on and I thought before<font color="#E5E5E5"> I better</font>

453
00:20:00,420 --> 00:20:05,670
keeping them up in the<font color="#CCCCCC"> menu</font><font color="#E5E5E5"> bar so</font><font color="#CCCCCC"> um</font><font color="#E5E5E5"> I</font>

454
00:20:02,940 --> 00:20:09,120
<font color="#E5E5E5">ended up writing a package to</font><font color="#CCCCCC"> help me</font>

455
00:20:05,670 --> 00:20:11,400
generate<font color="#CCCCCC"> plugins for bit bar</font><font color="#E5E5E5"> so bit bars</font>

456
00:20:09,120 --> 00:20:14,429
<font color="#E5E5E5">an application written by Matt</font><font color="#CCCCCC"> ryr that</font>

457
00:20:11,400 --> 00:20:16,890
runs on<font color="#CCCCCC"> OS X</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> sort of handles the</font>

458
00:20:14,430 --> 00:20:18,840
rendering<font color="#E5E5E5"> of menu bar applications and</font>

459
00:20:16,890 --> 00:20:20,850
has like a super simple interface and

460
00:20:18,840 --> 00:20:23,520
you literally<font color="#E5E5E5"> just have</font><font color="#CCCCCC"> to drop</font><font color="#E5E5E5"> in and</font>

461
00:20:20,850 --> 00:20:25,379
executable<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> puts text it can be</font>

462
00:20:23,520 --> 00:20:27,840
any language it can<font color="#E5E5E5"> be shell scripts</font>

463
00:20:25,380 --> 00:20:30,540
like absolutely anything and then you

464
00:20:27,840 --> 00:20:33,330
can control how frequently that<font color="#CCCCCC"> refresh</font>

465
00:20:30,540 --> 00:20:35,670
<font color="#E5E5E5">is just by appending a suffix to</font><font color="#CCCCCC"> the</font>

466
00:20:33,330 --> 00:20:38,550
files like<font color="#CCCCCC"> 30 seconds</font><font color="#E5E5E5"> dot one minute and</font>

467
00:20:35,670 --> 00:20:41,010
<font color="#E5E5E5">so on so I created a package called go</font>

468
00:20:38,550 --> 00:20:43,470
pet bar after having originally written

469
00:20:41,010 --> 00:20:45,150
stuff<font color="#CCCCCC"> using tablets and it was</font><font color="#E5E5E5"> all very</font>

470
00:20:43,470 --> 00:20:48,090
<font color="#E5E5E5">hard rolled very difficult to sort of</font>

471
00:20:45,150 --> 00:20:50,220
explain to<font color="#E5E5E5"> somebody how to use and like</font>

472
00:20:48,090 --> 00:20:52,020
as I<font color="#E5E5E5"> said the main</font><font color="#CCCCCC"> reason is that</font><font color="#E5E5E5"> you</font>

473
00:20:50,220 --> 00:20:53,790
you can put<font color="#E5E5E5"> pieces of information that</font>

474
00:20:52,020 --> 00:20:55,620
<font color="#E5E5E5">you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> up in your menu</font><font color="#CCCCCC"> bar so they're</font>

475
00:20:53,790 --> 00:20:56,730
<font color="#CCCCCC">very quick to</font><font color="#E5E5E5"> to get</font><font color="#CCCCCC"> to if you've</font>

476
00:20:55,620 --> 00:20:59,070
commands<font color="#E5E5E5"> that you're constantly</font>

477
00:20:56,730 --> 00:21:00,570
executing you just would<font color="#E5E5E5"> like to to get</font>

478
00:20:59,070 --> 00:21:02,490
access<font color="#CCCCCC"> to</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> just pop</font><font color="#CCCCCC"> them up there</font>

479
00:21:00,570 --> 00:21:04,230
<font color="#E5E5E5">and because you're writing it it's</font>

480
00:21:02,490 --> 00:21:07,770
<font color="#E5E5E5">completely customizable and</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

481
00:21:04,230 --> 00:21:09,390
write<font color="#E5E5E5"> it in go which is good so using</font>

482
00:21:07,770 --> 00:21:12,150
the<font color="#E5E5E5"> package this is what an absolute</font>

483
00:21:09,390 --> 00:21:13,650
minimal menu bar app would<font color="#CCCCCC"> look like so</font>

484
00:21:12,150 --> 00:21:16,200
you<font color="#CCCCCC"> created an</font><font color="#E5E5E5"> instance of the app with</font>

485
00:21:13,650 --> 00:21:18,690
<font color="#CCCCCC">the bet bar in you you create a status</font>

486
00:21:16,200 --> 00:21:21,060
<font color="#E5E5E5">line entry so the status line is what</font>

487
00:21:18,690 --> 00:21:22,740
appears in the<font color="#CCCCCC"> menu bar</font><font color="#E5E5E5"> so you can</font>

488
00:21:21,060 --> 00:21:24,480
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> add a second</font><font color="#CCCCCC"> one you can just</font>

489
00:21:22,740 --> 00:21:26,850
<font color="#E5E5E5">sort of invoke that status line method a</font>

490
00:21:24,480 --> 00:21:29,340
second time and<font color="#E5E5E5"> it will rotate between</font>

491
00:21:26,850 --> 00:21:31,260
the two<font color="#E5E5E5"> pieces of information and then</font>

492
00:21:29,340 --> 00:21:33,209
you you<font color="#E5E5E5"> can add sub menus and you</font><font color="#CCCCCC"> can</font>

493
00:21:31,260 --> 00:21:34,950
nest sub menus so you can have like

494
00:21:33,210 --> 00:21:37,950
multiple<font color="#E5E5E5"> trees dropping off one another</font>

495
00:21:34,950 --> 00:21:39,530
<font color="#CCCCCC">and</font><font color="#E5E5E5"> within a menu you add a line and you</font>

496
00:21:37,950 --> 00:21:41,750
<font color="#CCCCCC">can add multiple lines</font>

497
00:21:39,530 --> 00:21:44,030
and then you just finally call render

498
00:21:41,750 --> 00:21:46,280
<font color="#E5E5E5">and that's what you end up with</font><font color="#CCCCCC"> there</font>

499
00:21:44,030 --> 00:21:48,470
you<font color="#CCCCCC"> end up with your hello and your</font>

500
00:21:46,280 --> 00:21:51,320
world<font color="#E5E5E5"> so that's a really simple</font><font color="#CCCCCC"> example</font>

501
00:21:48,470 --> 00:21:52,280
<font color="#E5E5E5">and some of the kind of more complicated</font>

502
00:21:51,320 --> 00:21:54,980
ones that I ended<font color="#E5E5E5"> up putting together</font>

503
00:21:52,280 --> 00:21:58,250
<font color="#CCCCCC">where for</font><font color="#E5E5E5"> a project</font><font color="#CCCCCC"> I contribute</font><font color="#E5E5E5"> to open</font>

504
00:21:54,980 --> 00:22:00,140
<font color="#CCCCCC">fasts</font><font color="#E5E5E5"> and I wrote a menu bar</font><font color="#CCCCCC"> app that</font>

505
00:21:58,250 --> 00:22:02,120
lets you<font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of look at your open</font>

506
00:22:00,140 --> 00:22:03,560
<font color="#E5E5E5">Fosgate ways and sort</font><font color="#CCCCCC"> of see the status</font>

507
00:22:02,120 --> 00:22:05,840
of<font color="#E5E5E5"> all your functions and look at your</font>

508
00:22:03,560 --> 00:22:07,790
Prometheus metrics<font color="#CCCCCC"> just from the menu</font>

509
00:22:05,840 --> 00:22:09,500
bar<font color="#E5E5E5"> which is kind</font><font color="#CCCCCC"> of useful</font><font color="#E5E5E5"> when you're</font>

510
00:22:07,790 --> 00:22:10,879
when you're you're<font color="#CCCCCC"> developing and you</font>

511
00:22:09,500 --> 00:22:12,410
<font color="#E5E5E5">maybe have left something rolling or you</font>

512
00:22:10,880 --> 00:22:16,040
just<font color="#E5E5E5"> want to know another glance check</font>

513
00:22:12,410 --> 00:22:18,560
what's going<font color="#CCCCCC"> on</font><font color="#E5E5E5"> and so you can see there</font>

514
00:22:16,040 --> 00:22:19,940
the the submenu<font color="#CCCCCC"> and you've got actions</font>

515
00:22:18,560 --> 00:22:22,790
so if you click on the action<font color="#CCCCCC"> that's</font>

516
00:22:19,940 --> 00:22:25,100
actually<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> go and invoke a command</font>

517
00:22:22,790 --> 00:22:26,930
that deletes a function you know open

518
00:22:25,100 --> 00:22:29,000
the<font color="#CCCCCC"> Gateway open Prometheus they'll open</font>

519
00:22:26,930 --> 00:22:31,700
<font color="#CCCCCC">Chrome and open browser</font><font color="#E5E5E5"> so you can</font><font color="#CCCCCC"> do</font>

520
00:22:29,000 --> 00:22:34,130
pretty<font color="#E5E5E5"> complicated things without having</font>

521
00:22:31,700 --> 00:22:38,000
<font color="#CCCCCC">to</font><font color="#E5E5E5"> write a huge amount your self so like</font>

522
00:22:34,130 --> 00:22:39,890
for example<font color="#E5E5E5"> to to add a link to</font><font color="#CCCCCC"> URL</font><font color="#E5E5E5"> you</font>

523
00:22:38,000 --> 00:22:42,140
just out<font color="#CCCCCC"> of line so give the line a bit</font>

524
00:22:39,890 --> 00:22:44,090
<font color="#CCCCCC">a text and</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> you use this here trap</font>

525
00:22:42,140 --> 00:22:45,800
it uses a builder<font color="#CCCCCC"> pattern to build</font>

526
00:22:44,090 --> 00:22:47,629
things up the<font color="#CCCCCC"> hair</font><font color="#E5E5E5"> traffic just takes</font>

527
00:22:45,800 --> 00:22:50,300
the URL<font color="#CCCCCC"> so in this case it's an SS here</font>

528
00:22:47,630 --> 00:22:52,340
at URL and it's just using<font color="#CCCCCC"> OSX is open</font>

529
00:22:50,300 --> 00:22:54,169
so that<font color="#E5E5E5"> will just</font><font color="#CCCCCC"> open a terminal and</font>

530
00:22:52,340 --> 00:22:56,149
<font color="#E5E5E5">the terminal is true so</font><font color="#CCCCCC"> that it actually</font>

531
00:22:54,170 --> 00:22:58,040
doesn't suppress the terminal and but

532
00:22:56,150 --> 00:23:00,860
that<font color="#E5E5E5"> could be a URL it could be HTTP</font>

533
00:22:58,040 --> 00:23:03,200
<font color="#E5E5E5">HTTPS</font><font color="#CCCCCC"> forever</font><font color="#E5E5E5"> if you want to execute a</font>

534
00:23:00,860 --> 00:23:04,820
command so<font color="#CCCCCC"> you can execute any arbitrary</font>

535
00:23:03,200 --> 00:23:06,530
command but if you want to actually

536
00:23:04,820 --> 00:23:08,389
build some functionality into your

537
00:23:06,530 --> 00:23:10,730
<font color="#CCCCCC">plugin</font><font color="#E5E5E5"> what you can do is you can</font><font color="#CCCCCC"> use</font>

538
00:23:08,390 --> 00:23:13,850
Cobra<font color="#E5E5E5"> and like Caroline showed earlier</font>

539
00:23:10,730 --> 00:23:16,190
on and<font color="#E5E5E5"> you can add extra sub commands so</font>

540
00:23:13,850 --> 00:23:19,340
in this case I added a delete sub

541
00:23:16,190 --> 00:23:22,010
command that in the rendering of<font color="#E5E5E5"> your</font><font color="#CCCCCC"> of</font>

542
00:23:19,340 --> 00:23:23,990
your your menu<font color="#CCCCCC"> it knows</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> hostname</font><font color="#E5E5E5"> in</font>

543
00:23:22,010 --> 00:23:26,480
the context and<font color="#E5E5E5"> you basically</font><font color="#CCCCCC"> it just</font>

544
00:23:23,990 --> 00:23:28,730
caused the<font color="#CCCCCC"> plug-in again with delete</font><font color="#E5E5E5"> on</font>

545
00:23:26,480 --> 00:23:30,620
<font color="#E5E5E5">the name of the</font><font color="#CCCCCC"> hostname and the</font>

546
00:23:28,730 --> 00:23:32,270
terminal is false because<font color="#E5E5E5"> that stops the</font>

547
00:23:30,620 --> 00:23:33,860
terminal popping up so<font color="#CCCCCC"> it just goes</font>

548
00:23:32,270 --> 00:23:36,010
ahead and deletes it you don't<font color="#CCCCCC"> see a</font>

549
00:23:33,860 --> 00:23:38,300
terminal<font color="#CCCCCC"> pop up</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> Refresh true</font>

550
00:23:36,010 --> 00:23:41,120
<font color="#E5E5E5">automatically refreshes the menu bar so</font>

551
00:23:38,300 --> 00:23:42,590
<font color="#E5E5E5">you get the latest information so some</font>

552
00:23:41,120 --> 00:23:45,649
<font color="#CCCCCC">other ones this is</font><font color="#E5E5E5"> this is some very</font>

553
00:23:42,590 --> 00:23:48,649
<font color="#CCCCCC">very lazy and</font><font color="#E5E5E5"> opening a browser is too</font>

554
00:23:45,650 --> 00:23:51,100
much work I have menu bar up the choose

555
00:23:48,650 --> 00:23:56,740
a traffic camera from

556
00:23:51,100 --> 00:23:58,779
<font color="#E5E5E5">trip home good so</font><font color="#CCCCCC"> something's so my</font>

557
00:23:56,740 --> 00:24:00,190
<font color="#CCCCCC">riders bit bar up is on</font><font color="#E5E5E5"> get bet bar I'm</font>

558
00:23:58,779 --> 00:24:01,600
always surprised at<font color="#E5E5E5"> the</font><font color="#CCCCCC"> number of people</font>

559
00:24:00,190 --> 00:24:03,909
<font color="#E5E5E5">who haven't actually heard of</font><font color="#CCCCCC"> that it's</font>

560
00:24:01,600 --> 00:24:06,250
it's really really<font color="#CCCCCC"> awesome</font><font color="#E5E5E5"> and there's a</font>

561
00:24:03,909 --> 00:24:16,659
<font color="#E5E5E5">link to the package for building your</font>

562
00:24:06,250 --> 00:24:21,519
own<font color="#E5E5E5"> welcome thank you okay and last but</font>

563
00:24:16,659 --> 00:24:22,840
not least run Evans<font color="#E5E5E5"> and I'm gonna give</font>

564
00:24:21,519 --> 00:24:24,220
you<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit more than two minutes</font>

565
00:24:22,840 --> 00:24:25,779
you have like maybe<font color="#CCCCCC"> five minutes because</font>

566
00:24:24,220 --> 00:24:31,529
we<font color="#E5E5E5"> have the room to close and I know</font>

567
00:24:25,779 --> 00:24:34,529
that yours is complicated yes you<font color="#E5E5E5"> do</font>

568
00:24:31,529 --> 00:24:34,529
this

569
00:24:50,980 --> 00:25:09,950
so the demo is setting<font color="#CCCCCC"> up projector with</font>

570
00:24:53,840 --> 00:25:13,970
<font color="#CCCCCC">Linux have no any problem</font><font color="#E5E5E5"> yeah oh you</font>

571
00:25:09,950 --> 00:25:15,640
ready go<font color="#E5E5E5"> run all of us</font><font color="#CCCCCC"> per</font><font color="#E5E5E5"> run okay</font>

572
00:25:13,970 --> 00:25:18,560
everybody

573
00:25:15,640 --> 00:25:20,810
before I get<font color="#CCCCCC"> started I just want to say</font>

574
00:25:18,560 --> 00:25:23,870
let's give<font color="#CCCCCC"> up a big round of applause</font>

575
00:25:20,810 --> 00:25:26,090
for<font color="#E5E5E5"> a</font><font color="#CCCCCC"> France esque and for Margy</font><font color="#E5E5E5"> they</font>

576
00:25:23,870 --> 00:25:29,290
have done an amazing<font color="#CCCCCC"> job organizing this</font>

577
00:25:26,090 --> 00:25:29,290
come on<font color="#E5E5E5"> give it up for them</font>

578
00:25:30,820 --> 00:25:34,779
<font color="#E5E5E5">there others but I can't pronounce their</font>

579
00:25:33,519 --> 00:25:36,279
names I'm<font color="#CCCCCC"> sorry</font>

580
00:25:34,779 --> 00:25:39,129
I can<font color="#E5E5E5"> barely pronounce yours</font><font color="#CCCCCC"> all right</font>

581
00:25:36,279 --> 00:25:40,839
<font color="#E5E5E5">so I am dead program</font><font color="#CCCCCC"> Ron Evans in the</font>

582
00:25:39,129 --> 00:25:43,599
<font color="#E5E5E5">real world dead program on all the</font>

583
00:25:40,839 --> 00:25:44,799
<font color="#CCCCCC">Internet's I run a</font><font color="#E5E5E5"> small consultancy</font>

584
00:25:43,599 --> 00:25:47,079
<font color="#E5E5E5">called the hybrid group we do software</font>

585
00:25:44,799 --> 00:25:48,999
<font color="#CCCCCC">for hardware companies and I really like</font>

586
00:25:47,079 --> 00:25:51,519
robots<font color="#E5E5E5"> but you probably know that you</font>

587
00:25:48,999 --> 00:25:53,019
<font color="#CCCCCC">may have seen</font><font color="#E5E5E5"> me talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> go bot</font><font color="#CCCCCC"> which</font>

588
00:25:51,519 --> 00:25:56,379
is go programming<font color="#E5E5E5"> for middleware for</font>

589
00:25:53,019 --> 00:25:59,229
robotics or go<font color="#CCCCCC"> C V which is</font><font color="#E5E5E5"> computer</font>

590
00:25:56,379 --> 00:26:00,579
vision<font color="#CCCCCC"> lingo using open CV</font><font color="#E5E5E5"> but today I'm</font>

591
00:25:59,229 --> 00:26:01,839
<font color="#E5E5E5">here to talk about a really</font><font color="#CCCCCC"> cool new</font>

592
00:26:00,579 --> 00:26:06,069
project that<font color="#CCCCCC"> I've been collaborating</font>

593
00:26:01,839 --> 00:26:09,579
with<font color="#E5E5E5"> my colleague called tiny go</font><font color="#CCCCCC"> so it's</font>

594
00:26:06,069 --> 00:26:11,739
a go for small<font color="#CCCCCC"> places</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> small</font><font color="#E5E5E5"> we</font>

595
00:26:09,579 --> 00:26:14,649
mean like microcontrollers in other

596
00:26:11,739 --> 00:26:17,529
words<font color="#E5E5E5"> devices that have between</font><font color="#CCCCCC"> 8k and</font>

597
00:26:14,649 --> 00:26:22,508
<font color="#E5E5E5">32k of RAM I did not say megabytes</font>

598
00:26:17,529 --> 00:26:24,190
I said<font color="#CCCCCC"> kha K thousand small</font><font color="#E5E5E5"> right or</font>

599
00:26:22,509 --> 00:26:26,469
webassembly<font color="#E5E5E5"> but you know we'll get to</font>

600
00:26:24,190 --> 00:26:29,079
that<font color="#CCCCCC"> in some other future</font><font color="#E5E5E5"> time so</font>

601
00:26:26,469 --> 00:26:32,589
everyone<font color="#E5E5E5"> says go is too big</font><font color="#CCCCCC"> right</font>

602
00:26:29,079 --> 00:26:36,209
<font color="#CCCCCC">everyone says go is</font><font color="#E5E5E5"> just too big well a</font>

603
00:26:32,589 --> 00:26:38,769
gopher is a<font color="#E5E5E5"> gopher no matter how small</font>

604
00:26:36,209 --> 00:26:40,629
actually Dave Chaney did not say that

605
00:26:38,769 --> 00:26:47,649
<font color="#CCCCCC">but</font><font color="#E5E5E5"> doesn't that sound like something he</font>

606
00:26:40,629 --> 00:26:49,779
<font color="#CCCCCC">would say so thank you Dave</font><font color="#E5E5E5"> dr. Dave so</font>

607
00:26:47,649 --> 00:26:53,408
I'm<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> show you right now</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> go can</font>

608
00:26:49,779 --> 00:26:55,569
<font color="#CCCCCC">be tiny yes it is true I am gonna</font><font color="#E5E5E5"> show</font>

609
00:26:53,409 --> 00:26:59,009
you and I'm<font color="#CCCCCC"> going to show you</font><font color="#E5E5E5"> with this</font>

610
00:26:55,569 --> 00:26:59,009
let me<font color="#CCCCCC"> put the mic down</font><font color="#E5E5E5"> for a second</font>

611
00:27:05,579 --> 00:27:12,399
we'll see so first I'm going<font color="#E5E5E5"> to run a</font>

612
00:27:10,209 --> 00:27:14,769
<font color="#CCCCCC">GoSee</font><font color="#E5E5E5"> V program so I've got my</font><font color="#CCCCCC"> camera</font>

613
00:27:12,399 --> 00:27:16,089
although<font color="#CCCCCC"> okay and so</font><font color="#E5E5E5"> now I'm</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font>

614
00:27:14,769 --> 00:27:18,929
show<font color="#E5E5E5"> you the micro</font><font color="#CCCCCC"> controller where I'm</font>

615
00:27:16,089 --> 00:27:22,089
gonna use which is this<font color="#E5E5E5"> itsy-bitsy</font>

616
00:27:18,929 --> 00:27:24,039
<font color="#E5E5E5">literally itsy-bitsy</font><font color="#CCCCCC"> m0</font><font color="#E5E5E5"> it's made by a</font>

617
00:27:22,089 --> 00:27:31,019
the fruit it is a really cool little

618
00:27:24,039 --> 00:27:31,019
board<font color="#E5E5E5"> I kind of almost do</font><font color="#CCCCCC"> me two hands</font>

619
00:27:34,880 --> 00:27:39,510
all right so the itsy-bitsy is a

620
00:27:37,170 --> 00:27:43,410
microchip<font color="#E5E5E5"> the company that bought</font><font color="#CCCCCC"> Atmel</font>

621
00:27:39,510 --> 00:27:46,410
<font color="#E5E5E5">s AMD 21 is an arm cortex-m</font><font color="#CCCCCC"> 0 it's a</font>

622
00:27:43,410 --> 00:27:51,930
32-bit processor<font color="#E5E5E5"> 48 megahertz</font>

623
00:27:46,410 --> 00:27:54,270
speed and 256<font color="#E5E5E5"> K a flash memory 256 K</font><font color="#CCCCCC"> all</font>

624
00:27:51,930 --> 00:27:56,340
<font color="#CCCCCC">right</font><font color="#E5E5E5"> so let's do this the hello world</font>

625
00:27:54,270 --> 00:27:59,670
<font color="#E5E5E5">of things</font><font color="#CCCCCC"> using tiny go is a very simple</font>

626
00:27:56,340 --> 00:28:01,470
<font color="#E5E5E5">little go program package main we import</font>

627
00:27:59,670 --> 00:28:03,180
machine which is our package from tiny

628
00:28:01,470 --> 00:28:05,730
go how we integrate with<font color="#E5E5E5"> the actual</font>

629
00:28:03,180 --> 00:28:08,730
hardware devices the time package you've

630
00:28:05,730 --> 00:28:10,350
seen that<font color="#E5E5E5"> before</font><font color="#CCCCCC"> and then our main our</font>

631
00:28:08,730 --> 00:28:14,040
first thing we're going to do is say<font color="#E5E5E5"> LED</font>

632
00:28:10,350 --> 00:28:16,020
equals<font color="#E5E5E5"> machine GPIO machine LED so we're</font>

633
00:28:14,040 --> 00:28:18,510
saying this particular<font color="#CCCCCC"> machines</font><font color="#E5E5E5"> LED</font>

634
00:28:16,020 --> 00:28:20,040
we're going to<font color="#E5E5E5"> configure it</font><font color="#CCCCCC"> to be a GPIO</font>

635
00:28:18,510 --> 00:28:22,200
<font color="#CCCCCC">output that</font><font color="#E5E5E5"> means we're going to</font><font color="#CCCCCC"> send</font>

636
00:28:20,040 --> 00:28:25,139
<font color="#CCCCCC">something out</font><font color="#E5E5E5"> versus receive a signal in</font>

637
00:28:22,200 --> 00:28:26,820
and then for ever first we're going to

638
00:28:25,140 --> 00:28:29,550
set<font color="#CCCCCC"> it to</font><font color="#E5E5E5"> low in other words turn it off</font>

639
00:28:26,820 --> 00:28:32,970
<font color="#E5E5E5">we're gonna sleep for 500 milliseconds</font>

640
00:28:29,550 --> 00:28:34,379
<font color="#E5E5E5">then we're</font><font color="#CCCCCC"> gonna turn</font><font color="#E5E5E5"> it on and then</font>

641
00:28:32,970 --> 00:28:35,970
sleep for another<font color="#CCCCCC"> 500 milliseconds so</font>

642
00:28:34,380 --> 00:28:39,470
it's the hello world of things as a

643
00:28:35,970 --> 00:28:39,470
blinky light so<font color="#E5E5E5"> let's see if this works</font>

644
00:28:41,480 --> 00:28:49,980
first<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> gonna plug it in it's plugged</font>

645
00:28:49,050 --> 00:28:54,620
in I'm<font color="#E5E5E5"> trying to talk into the</font>

646
00:28:49,980 --> 00:28:54,620
microcontroller<font color="#E5E5E5"> next demo</font>

647
00:29:00,799 --> 00:29:04,619
<font color="#E5E5E5">okay so the first thing</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to do</font>

648
00:29:02,909 --> 00:29:06,599
is I'm gonna press the little button on

649
00:29:04,619 --> 00:29:10,968
this twice to put it into the bootloader

650
00:29:06,599 --> 00:29:10,968
<font color="#E5E5E5">mode so I can loot load new software</font><font color="#CCCCCC"> I</font>

651
00:29:11,389 --> 00:29:16,289
can't show<font color="#CCCCCC"> it</font><font color="#E5E5E5"> cancer the camera that's</font>

652
00:29:14,879 --> 00:29:21,539
<font color="#E5E5E5">kind of cute actually I should do that</font>

653
00:29:16,289 --> 00:29:24,119
<font color="#CCCCCC">on purpose so we're gonna load this code</font>

654
00:29:21,539 --> 00:29:25,919
by compiling it first<font color="#E5E5E5"> okay so we just</font>

655
00:29:24,119 --> 00:29:29,299
<font color="#CCCCCC">compiled a bin file so let's look at how</font>

656
00:29:25,919 --> 00:29:29,299
big that<font color="#E5E5E5"> bin file is real quick</font>

657
00:29:37,990 --> 00:29:45,200
so we can say<font color="#E5E5E5"> that is a</font><font color="#CCCCCC"> 2376 bytes in</font>

658
00:29:42,920 --> 00:29:52,100
size<font color="#CCCCCC"> okay that program so let's put it</font>

659
00:29:45,200 --> 00:29:55,640
<font color="#E5E5E5">on here so we're</font><font color="#CCCCCC"> just going to convert</font>

660
00:29:52,100 --> 00:29:58,070
it into<font color="#E5E5E5"> a hex file which then</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> going</font>

661
00:29:55,640 --> 00:30:00,530
<font color="#E5E5E5">to convert it into the</font><font color="#CCCCCC"> u f2 bootloader</font>

662
00:29:58,070 --> 00:30:06,379
format<font color="#E5E5E5"> so it just copies it on there and</font>

663
00:30:00,530 --> 00:30:16,280
now if we<font color="#E5E5E5"> go to the camera we can see it</font>

664
00:30:06,380 --> 00:30:18,920
is blinking yes it is real how can you

665
00:30:16,280 --> 00:30:21,230
do that<font color="#CCCCCC"> there's nothing possible</font><font color="#E5E5E5"> well</font>

666
00:30:18,920 --> 00:30:24,140
<font color="#E5E5E5">luckily the go compiler tool chain</font>

667
00:30:21,230 --> 00:30:26,840
itself is written<font color="#CCCCCC"> in go and then there's</font>

668
00:30:24,140 --> 00:30:29,390
this other thing<font color="#CCCCCC"> called the LLVM</font><font color="#E5E5E5"> which</font>

669
00:30:26,840 --> 00:30:31,429
is any actual<font color="#E5E5E5"> toolkit for building</font>

670
00:30:29,390 --> 00:30:33,980
compilers<font color="#CCCCCC"> so if we put those things</font>

671
00:30:31,430 --> 00:30:37,490
together we can<font color="#CCCCCC"> use goes front</font><font color="#E5E5E5"> end to</font>

672
00:30:33,980 --> 00:30:39,140
put<font color="#E5E5E5"> it</font><font color="#CCCCCC"> into SSA form then use tiny goes</font>

673
00:30:37,490 --> 00:30:41,300
compiler to turn that into the

674
00:30:39,140 --> 00:30:43,730
<font color="#E5E5E5">intermediate representation that</font><font color="#CCCCCC"> LLVM</font>

675
00:30:41,300 --> 00:30:46,730
uses and then use<font color="#CCCCCC"> LLVM to generate</font>

676
00:30:43,730 --> 00:30:49,730
binary code so it's a different way it's

677
00:30:46,730 --> 00:30:53,750
a different gospel of<font color="#CCCCCC"> the go compiler if</font>

678
00:30:49,730 --> 00:30:56,330
you will so<font color="#CCCCCC"> you want to know more tiny</font>

679
00:30:53,750 --> 00:30:58,550
go<font color="#CCCCCC"> RG we have a great</font><font color="#E5E5E5"> website that's</font>

680
00:30:56,330 --> 00:31:00,409
<font color="#E5E5E5">been put together by the founder of this</font>

681
00:30:58,550 --> 00:31:01,460
project<font color="#CCCCCC"> Ike a</font><font color="#E5E5E5"> who's actually in the back</font>

682
00:31:00,410 --> 00:31:03,980
of the room kind<font color="#E5E5E5"> of embarrassed right</font>

683
00:31:01,460 --> 00:31:07,730
now<font color="#E5E5E5"> and</font><font color="#CCCCCC"> a bunch of other</font><font color="#E5E5E5"> collaborators</font>

684
00:31:03,980 --> 00:31:10,160
also come see my talk<font color="#E5E5E5"> tomorrow</font><font color="#CCCCCC"> building</font>

685
00:31:07,730 --> 00:31:13,400
<font color="#CCCCCC">K</font><font color="#E5E5E5"> that's the big building in</font><font color="#CCCCCC"> LaFontaine</font>

686
00:31:10,160 --> 00:31:15,110
<font color="#CCCCCC">11:00</font><font color="#E5E5E5"> a.m. you</font><font color="#CCCCCC"> should be there</font><font color="#E5E5E5"> why</font>

687
00:31:13,400 --> 00:31:17,990
because<font color="#CCCCCC"> first</font><font color="#E5E5E5"> of all it's</font><font color="#CCCCCC"> the first ever</font>

688
00:31:15,110 --> 00:31:22,330
<font color="#E5E5E5">Foss that main room talk about go isn't</font>

689
00:31:17,990 --> 00:31:25,610
<font color="#CCCCCC">that incredible</font><font color="#E5E5E5"> and it's a very small go</font>

690
00:31:22,330 --> 00:31:27,679
so there will<font color="#E5E5E5"> be prizes</font><font color="#CCCCCC"> thanks to a the</font>

691
00:31:25,610 --> 00:31:29,240
fruit and others so if you show<font color="#CCCCCC"> up you</font>

692
00:31:27,680 --> 00:31:29,960
can<font color="#E5E5E5"> maybe win something</font><font color="#CCCCCC"> so definitely</font>

693
00:31:29,240 --> 00:31:33,800
<font color="#E5E5E5">don't miss it</font>

694
00:31:29,960 --> 00:31:35,260
main room building<font color="#CCCCCC"> K LaFontaine</font><font color="#E5E5E5"> 11 a.m.</font>

695
00:31:33,800 --> 00:31:40,030
be<font color="#CCCCCC"> there</font>

696
00:31:35,260 --> 00:31:42,490
<font color="#E5E5E5">there be there also the very</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> ever</font>

697
00:31:40,030 --> 00:31:44,680
tiny go<font color="#CCCCCC"> BOF will also be tomorrow at</font>

698
00:31:42,490 --> 00:31:46,330
1300 hours so after we've all<font color="#E5E5E5"> kind of</font>

699
00:31:44,680 --> 00:31:47,920
calmed down from the drones flying

700
00:31:46,330 --> 00:31:51,540
around<font color="#E5E5E5"> and stuff we can talk about like</font>

701
00:31:47,920 --> 00:31:51,540
<font color="#E5E5E5">those so thank you</font><font color="#CCCCCC"> very much</font>

702
00:31:55,320 --> 00:32:00,939
and with<font color="#CCCCCC"> these I'm out</font><font color="#E5E5E5"> with this we're</font>

703
00:31:59,470 --> 00:32:02,950
done so thank<font color="#E5E5E5"> you very much everyone for</font>

704
00:32:00,940 --> 00:32:04,630
<font color="#E5E5E5">coming special thanks to all</font><font color="#CCCCCC"> of the</font>

705
00:32:02,950 --> 00:32:11,380
speakers<font color="#E5E5E5"> without</font><font color="#CCCCCC"> you this will</font><font color="#E5E5E5"> not be</font>

706
00:32:04,630 --> 00:32:14,260
possible<font color="#CCCCCC"> and what oh yeah</font>

707
00:32:11,380 --> 00:32:16,570
so we are all<font color="#E5E5E5"> grown-ups and responsible</font>

708
00:32:14,260 --> 00:32:18,280
so if you brought some trash<font color="#CCCCCC"> take it out</font>

709
00:32:16,570 --> 00:32:19,780
with you<font color="#E5E5E5"> if you didn't break any trash</font>

710
00:32:18,280 --> 00:32:22,240
but there's some around<font color="#E5E5E5"> you take it out</font>

711
00:32:19,780 --> 00:32:24,700
with you<font color="#E5E5E5"> and if you are interested</font><font color="#CCCCCC"> don't</font>

712
00:32:22,240 --> 00:32:27,190
see me suffer tomorrow<font color="#CCCCCC"> I'm seeing a</font>

713
00:32:24,700 --> 00:32:28,960
whole<font color="#E5E5E5"> day I will be at</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> FML on</font><font color="#CCCCCC"> curved</font>

714
00:32:27,190 --> 00:32:31,520
broom so I'll be there

715
00:32:28,960 --> 00:32:35,839
see you tomorrow

716
00:32:31,520 --> 00:32:35,839
[Applause]

