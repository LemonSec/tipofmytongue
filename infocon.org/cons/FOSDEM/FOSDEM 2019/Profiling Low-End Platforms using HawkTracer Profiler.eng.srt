1
00:00:04,670 --> 00:00:11,000
yes thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> coming I know it's</font>

2
00:00:07,220 --> 00:00:13,940
late<font color="#E5E5E5"> and you're all tired</font><font color="#CCCCCC"> so my name is</font>

3
00:00:11,000 --> 00:00:16,460
marcin<font color="#CCCCCC"> I work for Amazon for a prime</font>

4
00:00:13,940 --> 00:00:19,929
video and I want to talk<font color="#E5E5E5"> a</font><font color="#CCCCCC"> little about</font>

5
00:00:16,460 --> 00:00:23,539
the profiler<font color="#CCCCCC"> that we've done at Amazon</font>

6
00:00:19,929 --> 00:00:26,150
so before I<font color="#E5E5E5"> start talking about my</font>

7
00:00:23,539 --> 00:00:29,689
profiler<font color="#CCCCCC"> I just do a quick introduction</font>

8
00:00:26,150 --> 00:00:32,329
<font color="#E5E5E5">to profilers in general as probably some</font>

9
00:00:29,689 --> 00:00:35,300
<font color="#E5E5E5">of you never used one so I just do a</font>

10
00:00:32,329 --> 00:00:37,340
quick introduction<font color="#E5E5E5"> and then I explain</font>

11
00:00:35,300 --> 00:00:38,589
why did we<font color="#E5E5E5"> decide to do another profiler</font>

12
00:00:37,340 --> 00:00:41,420
even though there is a<font color="#E5E5E5"> bunch of</font>

13
00:00:38,590 --> 00:00:44,210
profilers already that I've talked a

14
00:00:41,420 --> 00:00:46,370
little about the<font color="#CCCCCC"> hook tracer features</font><font color="#E5E5E5"> do</font>

15
00:00:44,210 --> 00:00:51,530
a demo and<font color="#E5E5E5"> hopefully we have time for</font>

16
00:00:46,370 --> 00:00:53,379
<font color="#E5E5E5">questions at the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> a profiler</font>

17
00:00:51,530 --> 00:00:55,460
basically is a tool that<font color="#CCCCCC"> allows you to</font>

18
00:00:53,379 --> 00:00:58,190
to measure performance of the

19
00:00:55,460 --> 00:01:01,010
<font color="#CCCCCC">application and you can</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> as</font>

20
00:00:58,190 --> 00:01:04,009
<font color="#E5E5E5">plead existing profilers into two groups</font>

21
00:01:01,010 --> 00:01:06,530
<font color="#CCCCCC">as a sample</font><font color="#E5E5E5"> based profiler that runs</font>

22
00:01:04,010 --> 00:01:08,540
periodically<font color="#E5E5E5"> and checks some some</font>

23
00:01:06,530 --> 00:01:10,549
information<font color="#E5E5E5"> from your application</font><font color="#CCCCCC"> so the</font>

24
00:01:08,540 --> 00:01:12,590
simple profiler<font color="#E5E5E5"> simple sample based</font>

25
00:01:10,549 --> 00:01:16,040
profiler<font color="#CCCCCC"> can be like that</font><font color="#E5E5E5"> that you have</font>

26
00:01:12,590 --> 00:01:18,229
a while<font color="#E5E5E5"> loop and you check for</font><font color="#CCCCCC"> example</font>

27
00:01:16,040 --> 00:01:22,909
the call stack of the specific process

28
00:01:18,229 --> 00:01:24,590
based on<font color="#CCCCCC"> process ID and and later on you</font>

29
00:01:22,909 --> 00:01:27,200
can gather those that you can gather the

30
00:01:24,590 --> 00:01:29,840
data and generate<font color="#E5E5E5"> some statistics for</font>

31
00:01:27,200 --> 00:01:31,970
example which function was called<font color="#E5E5E5"> most</font>

32
00:01:29,840 --> 00:01:34,189
frequently<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is not very accurate</font>

33
00:01:31,970 --> 00:01:36,619
<font color="#E5E5E5">because that depends the accuracy</font>

34
00:01:34,189 --> 00:01:39,589
actually<font color="#E5E5E5"> depends on the on the sampling</font>

35
00:01:36,619 --> 00:01:44,840
frequency<font color="#E5E5E5"> so for example here we</font><font color="#CCCCCC"> have</font>

36
00:01:39,590 --> 00:01:48,770
<font color="#E5E5E5">one second frequency</font><font color="#CCCCCC"> and it's good</font>

37
00:01:44,840 --> 00:01:51,469
method to to find<font color="#E5E5E5"> why your your</font>

38
00:01:48,770 --> 00:01:53,060
application is in general slow<font color="#E5E5E5"> but if</font>

39
00:01:51,469 --> 00:01:55,329
you want to have like a<font color="#E5E5E5"> very detailed</font>

40
00:01:53,060 --> 00:01:58,460
data for example<font color="#E5E5E5"> you have the spike</font>

41
00:01:55,329 --> 00:02:00,758
<font color="#E5E5E5">performance by spike and you want to</font>

42
00:01:58,460 --> 00:02:03,469
understand what's going<font color="#CCCCCC"> on</font><font color="#E5E5E5"> it's good to</font>

43
00:02:00,759 --> 00:02:05,509
do an instrumentation based profiling so

44
00:02:03,469 --> 00:02:07,579
you basically<font color="#E5E5E5"> modify your source code by</font>

45
00:02:05,509 --> 00:02:11,390
putting some trace points and you

46
00:02:07,579 --> 00:02:13,040
exactly<font color="#E5E5E5"> know how long or how</font><font color="#CCCCCC"> much</font>

47
00:02:11,390 --> 00:02:13,529
resources did we use at that point of

48
00:02:13,040 --> 00:02:16,200
time<font color="#E5E5E5"> so</font>

49
00:02:13,530 --> 00:02:18,300
for example here we<font color="#CCCCCC"> have very simple</font>

50
00:02:16,200 --> 00:02:20,190
profiling<font color="#E5E5E5"> instrumentation based</font>

51
00:02:18,300 --> 00:02:23,880
profiling we measure the time we spend

52
00:02:20,190 --> 00:02:25,950
in<font color="#E5E5E5"> the full function by saving the timer</font>

53
00:02:23,880 --> 00:02:28,590
<font color="#E5E5E5">before calling</font><font color="#CCCCCC"> the function</font><font color="#E5E5E5"> and after</font>

54
00:02:25,950 --> 00:02:32,929
<font color="#E5E5E5">calling</font><font color="#CCCCCC"> the function</font><font color="#E5E5E5"> and then we print</font>

55
00:02:28,590 --> 00:02:36,300
<font color="#CCCCCC">the results those are apparently</font><font color="#E5E5E5"> another</font>

56
00:02:32,930 --> 00:02:38,550
<font color="#E5E5E5">profiling methodology is a guessing</font>

57
00:02:36,300 --> 00:02:41,520
based profiler<font color="#E5E5E5"> I've learned from Alex</font>

58
00:02:38,550 --> 00:02:43,470
today<font color="#E5E5E5"> which is basically developer looks</font>

59
00:02:41,520 --> 00:02:48,930
at the code<font color="#CCCCCC"> and tries to guess why the</font>

60
00:02:43,470 --> 00:02:50,640
code is slow<font color="#E5E5E5"> but yeah yeah guess based</font>

61
00:02:48,930 --> 00:02:52,170
profiling<font color="#CCCCCC"> well I'm not</font><font color="#E5E5E5"> going to talk</font>

62
00:02:50,640 --> 00:02:53,640
<font color="#E5E5E5">about</font><font color="#CCCCCC"> this and the hawk tracer is</font>

63
00:02:52,170 --> 00:02:56,280
instrumentation based<font color="#E5E5E5"> profiling that</font>

64
00:02:53,640 --> 00:02:57,750
means that you need<font color="#E5E5E5"> to modify</font><font color="#CCCCCC"> your code</font>

65
00:02:56,280 --> 00:03:03,000
you need<font color="#E5E5E5"> to put some trace points in the</font>

66
00:02:57,750 --> 00:03:05,459
code to know to<font color="#E5E5E5"> find</font><font color="#CCCCCC"> why to measure some</font>

67
00:03:03,000 --> 00:03:07,709
<font color="#CCCCCC">of the metrics</font><font color="#E5E5E5"> so why did they that why</font>

68
00:03:05,459 --> 00:03:09,540
do we<font color="#E5E5E5"> create the profiler there's a</font>

69
00:03:07,709 --> 00:03:13,769
bunch of profilers or editors pair of F

70
00:03:09,540 --> 00:03:16,890
<font color="#E5E5E5">trice</font><font color="#CCCCCC"> LTT ng e GW for</font><font color="#E5E5E5"> Windows and many</font>

71
00:03:13,769 --> 00:03:20,280
others<font color="#E5E5E5"> so we have very very specific</font>

72
00:03:16,890 --> 00:03:22,859
environment<font color="#E5E5E5"> at Amazon my team</font><font color="#CCCCCC"> is</font>

73
00:03:20,280 --> 00:03:25,230
<font color="#E5E5E5">responsible for delivering</font><font color="#CCCCCC"> prime</font><font color="#E5E5E5"> video</font>

74
00:03:22,860 --> 00:03:28,290
up on the<font color="#E5E5E5"> own living room devices like</font>

75
00:03:25,230 --> 00:03:31,048
streaming<font color="#CCCCCC"> stick Smart TVs</font><font color="#E5E5E5"> game consoles</font>

76
00:03:28,290 --> 00:03:33,510
and<font color="#E5E5E5"> stuff like that and some of the</font>

77
00:03:31,049 --> 00:03:36,120
<font color="#E5E5E5">devices are very have a very limited</font>

78
00:03:33,510 --> 00:03:37,920
capabilities in<font color="#E5E5E5"> terms of development</font><font color="#CCCCCC"> so</font>

79
00:03:36,120 --> 00:03:39,630
basically all we<font color="#E5E5E5"> can do we</font><font color="#CCCCCC"> can just</font>

80
00:03:37,920 --> 00:03:42,358
<font color="#CCCCCC">generate the package which is</font><font color="#E5E5E5"> executive</font>

81
00:03:39,630 --> 00:03:44,790
with some assets and upload it<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

82
00:03:42,359 --> 00:03:46,980
device so<font color="#CCCCCC"> there is no way to SSH to that</font>

83
00:03:44,790 --> 00:03:49,798
device there's no way to<font color="#E5E5E5"> run another</font>

84
00:03:46,980 --> 00:03:52,980
process<font color="#E5E5E5"> and stuff like that so</font><font color="#CCCCCC"> we kind</font>

85
00:03:49,799 --> 00:03:54,739
<font color="#E5E5E5">of</font><font color="#CCCCCC"> cannot do much with all we can do is</font>

86
00:03:52,980 --> 00:03:58,380
<font color="#CCCCCC">just run our application that</font><font color="#E5E5E5"> we built</font>

87
00:03:54,739 --> 00:04:01,140
<font color="#E5E5E5">also from the language point of view so</font>

88
00:03:58,380 --> 00:04:04,260
we have a native<font color="#E5E5E5"> stack and scripted</font>

89
00:04:01,140 --> 00:04:08,130
stack<font color="#E5E5E5"> and we wanted to be able to</font>

90
00:04:04,260 --> 00:04:10,200
profile both stacks at the same time<font color="#E5E5E5"> and</font>

91
00:04:08,130 --> 00:04:14,609
we couldn't<font color="#E5E5E5"> really find a good profiler</font>

92
00:04:10,200 --> 00:04:16,798
<font color="#E5E5E5">for for this kind of use case so we</font>

93
00:04:14,609 --> 00:04:18,600
decided<font color="#E5E5E5"> to build our own and before we</font>

94
00:04:16,798 --> 00:04:20,370
did that we gather requirements<font color="#CCCCCC"> what we</font>

95
00:04:18,600 --> 00:04:22,890
<font color="#CCCCCC">actually want</font><font color="#E5E5E5"> to achieve by building the</font>

96
00:04:20,370 --> 00:04:24,900
new profiler<font color="#E5E5E5"> and so those are</font><font color="#CCCCCC"> the</font>

97
00:04:22,890 --> 00:04:27,229
requirements<font color="#E5E5E5"> first of all we only</font>

98
00:04:24,900 --> 00:04:29,489
<font color="#E5E5E5">targeting user space profile</font>

99
00:04:27,230 --> 00:04:31,440
obviously for those limited platforms we

100
00:04:29,490 --> 00:04:34,830
couldn't even allow<font color="#CCCCCC"> anything to carnal</font>

101
00:04:31,440 --> 00:04:36,630
<font color="#E5E5E5">so user space only we needed to build it</font>

102
00:04:34,830 --> 00:04:38,760
as<font color="#E5E5E5"> library because as I said we can't</font>

103
00:04:36,630 --> 00:04:42,140
run another process<font color="#E5E5E5"> so it needs to</font><font color="#CCCCCC"> be</font>

104
00:04:38,760 --> 00:04:45,930
embedded<font color="#E5E5E5"> to to the application itself</font>

105
00:04:42,140 --> 00:04:48,360
<font color="#CCCCCC">since those devices are sometimes very</font>

106
00:04:45,930 --> 00:04:52,920
<font color="#CCCCCC">low-end devices like I don't</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> a</font>

107
00:04:48,360 --> 00:04:54,750
single<font color="#CCCCCC"> core CPU 600 900 megahertz well</font>

108
00:04:52,920 --> 00:05:00,750
for some<font color="#CCCCCC"> people is not</font><font color="#E5E5E5"> a really low</font><font color="#CCCCCC"> end</font>

109
00:04:54,750 --> 00:05:03,690
but<font color="#E5E5E5"> for us it is so we try to make the</font>

110
00:05:00,750 --> 00:05:07,110
profiler so the overhead<font color="#E5E5E5"> is not that</font>

111
00:05:03,690 --> 00:05:08,969
significant for<font color="#CCCCCC"> some devices we also</font>

112
00:05:07,110 --> 00:05:12,000
don't have<font color="#E5E5E5"> access</font><font color="#CCCCCC"> to persistent storage</font>

113
00:05:08,970 --> 00:05:14,070
<font color="#E5E5E5">so we can't save results on the disk</font><font color="#CCCCCC"> or</font>

114
00:05:12,000 --> 00:05:17,280
sometimes we can but we cannot<font color="#E5E5E5"> access</font>

115
00:05:14,070 --> 00:05:18,510
those data after that<font color="#E5E5E5"> because the</font><font color="#CCCCCC"> dis</font>

116
00:05:17,280 --> 00:05:20,460
persistent storage is only available

117
00:05:18,510 --> 00:05:22,050
<font color="#CCCCCC">from the application point of view</font><font color="#E5E5E5"> so</font>

118
00:05:20,460 --> 00:05:24,810
you<font color="#E5E5E5"> can't login</font><font color="#CCCCCC"> to the device</font><font color="#E5E5E5"> and gather</font>

119
00:05:22,050 --> 00:05:26,190
the<font color="#E5E5E5"> data so we</font><font color="#CCCCCC"> decide</font><font color="#E5E5E5"> ok let's</font><font color="#CCCCCC"> assume</font>

120
00:05:24,810 --> 00:05:29,190
<font color="#CCCCCC">that we don't have the persistent</font>

121
00:05:26,190 --> 00:05:31,070
<font color="#CCCCCC">storage at all and since we're running</font>

122
00:05:29,190 --> 00:05:33,330
<font color="#E5E5E5">on different</font><font color="#CCCCCC"> platforms different</font>

123
00:05:31,070 --> 00:05:36,030
<font color="#CCCCCC">manufacturers we wanted to have the</font>

124
00:05:33,330 --> 00:05:38,640
profiler as portable as possible so we

125
00:05:36,030 --> 00:05:40,650
<font color="#CCCCCC">can</font><font color="#E5E5E5"> build</font><font color="#CCCCCC"> it once</font><font color="#E5E5E5"> our developers learn</font>

126
00:05:38,640 --> 00:05:42,870
the tool<font color="#E5E5E5"> once and they can use it</font><font color="#CCCCCC"> for</font>

127
00:05:40,650 --> 00:05:45,450
for<font color="#E5E5E5"> all the</font><font color="#CCCCCC"> possible platforms</font><font color="#E5E5E5"> that we</font>

128
00:05:42,870 --> 00:05:48,480
support and it should be easy to<font color="#CCCCCC"> use of</font>

129
00:05:45,450 --> 00:05:51,229
<font color="#CCCCCC">course so everybody can instrument the</font>

130
00:05:48,480 --> 00:05:54,240
code<font color="#CCCCCC"> easily and gather</font><font color="#E5E5E5"> data quite easily</font>

131
00:05:51,230 --> 00:05:58,830
<font color="#CCCCCC">so we come</font><font color="#E5E5E5"> up with a very very basic</font>

132
00:05:54,240 --> 00:06:00,420
design as you<font color="#CCCCCC"> can see there's a user</font>

133
00:05:58,830 --> 00:06:02,400
application layer<font color="#CCCCCC"> is basically the</font>

134
00:06:00,420 --> 00:06:04,710
application<font color="#CCCCCC"> that's running on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> device</font>

135
00:06:02,400 --> 00:06:07,679
and this application<font color="#E5E5E5"> links to the</font><font color="#CCCCCC"> hawk</font>

136
00:06:04,710 --> 00:06:09,690
tracer library<font color="#CCCCCC"> hope tracer library</font><font color="#E5E5E5"> might</font>

137
00:06:07,680 --> 00:06:13,220
have a<font color="#E5E5E5"> bunch of timelines</font><font color="#CCCCCC"> the timelines</font>

138
00:06:09,690 --> 00:06:15,510
are basically like a buffers<font color="#E5E5E5"> our user</font>

139
00:06:13,220 --> 00:06:16,920
sends<font color="#E5E5E5"> events so whenever you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to</font>

140
00:06:15,510 --> 00:06:18,750
trace something I don't know for<font color="#E5E5E5"> example</font>

141
00:06:16,920 --> 00:06:20,790
<font color="#E5E5E5">we want us we want to know how much</font>

142
00:06:18,750 --> 00:06:23,040
<font color="#CCCCCC">memory we</font><font color="#E5E5E5"> use at this point of time in</font>

143
00:06:20,790 --> 00:06:24,330
general we generate an<font color="#CCCCCC"> event that</font>

144
00:06:23,040 --> 00:06:26,010
contains the information about<font color="#E5E5E5"> the</font>

145
00:06:24,330 --> 00:06:28,950
memory usage<font color="#CCCCCC"> it goes to the timeline and</font>

146
00:06:26,010 --> 00:06:31,230
the timeline accumulate those buff those

147
00:06:28,950 --> 00:06:33,539
events and once the timeline is full it

148
00:06:31,230 --> 00:06:35,580
<font color="#E5E5E5">calls the flash method and the flash</font>

149
00:06:33,540 --> 00:06:38,520
method sends all<font color="#E5E5E5"> the events</font><font color="#CCCCCC"> that we</font>

150
00:06:35,580 --> 00:06:40,520
gather to to a listener<font color="#E5E5E5"> and the listener</font>

151
00:06:38,520 --> 00:06:43,669
can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> either you can use either the</font>

152
00:06:40,520 --> 00:06:45,740
you the one<font color="#E5E5E5"> that is already</font><font color="#CCCCCC"> existing</font><font color="#E5E5E5"> in</font>

153
00:06:43,669 --> 00:06:47,630
the library or you<font color="#CCCCCC"> can define your own</font>

154
00:06:45,740 --> 00:06:49,610
listener<font color="#E5E5E5"> and what listener can do</font>

155
00:06:47,630 --> 00:06:53,060
well basically<font color="#E5E5E5"> listeners should save the</font>

156
00:06:49,610 --> 00:06:54,740
data somehow<font color="#CCCCCC"> so there is a file listener</font>

157
00:06:53,060 --> 00:06:57,680
that<font color="#E5E5E5"> saves it to the file or</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a</font>

158
00:06:54,740 --> 00:06:59,539
<font color="#E5E5E5">TCP listener that streams the data over</font>

159
00:06:57,680 --> 00:07:02,630
the network<font color="#E5E5E5"> and then the data is</font>

160
00:06:59,539 --> 00:07:05,419
<font color="#CCCCCC">basically the binary stream and you</font>

161
00:07:02,630 --> 00:07:07,219
can't really you can't<font color="#CCCCCC"> really analyze</font>

162
00:07:05,419 --> 00:07:09,318
the binary stream you need to convert

163
00:07:07,220 --> 00:07:11,569
this binary stream to some human

164
00:07:09,319 --> 00:07:15,470
<font color="#E5E5E5">readable format and in order to do that</font>

165
00:07:11,569 --> 00:07:18,139
we created a library<font color="#E5E5E5"> it's called a hook</font>

166
00:07:15,470 --> 00:07:21,590
tracer<font color="#E5E5E5"> parcel library that allow</font><font color="#CCCCCC"> us to</font>

167
00:07:18,139 --> 00:07:25,069
convert<font color="#E5E5E5"> this byte stream to some</font>

168
00:07:21,590 --> 00:07:29,030
structures that<font color="#CCCCCC"> then can</font><font color="#E5E5E5"> be converted to</font>

169
00:07:25,069 --> 00:07:30,440
another to<font color="#CCCCCC"> another format and so there</font>

170
00:07:29,030 --> 00:07:32,869
are<font color="#E5E5E5"> two options</font><font color="#CCCCCC"> you can either use dog</font>

171
00:07:30,440 --> 00:07:35,150
tracer<font color="#CCCCCC"> convertor which</font><font color="#E5E5E5"> is an</font><font color="#CCCCCC"> application</font>

172
00:07:32,870 --> 00:07:38,240
that<font color="#E5E5E5"> converts this by stream to one of</font>

173
00:07:35,150 --> 00:07:41,080
the well-known formats like we currently

174
00:07:38,240 --> 00:07:44,240
support<font color="#CCCCCC"> trace</font><font color="#E5E5E5"> even format that is</font>

175
00:07:41,080 --> 00:07:47,300
supported<font color="#E5E5E5"> by</font><font color="#CCCCCC"> Google trace viewer</font><font color="#E5E5E5"> and we</font>

176
00:07:44,240 --> 00:07:50,570
also generate flame<font color="#E5E5E5"> graphs</font><font color="#CCCCCC"> if that's</font><font color="#E5E5E5"> not</font>

177
00:07:47,300 --> 00:07:53,150
enough<font color="#E5E5E5"> for you</font><font color="#CCCCCC"> the parser library can be</font>

178
00:07:50,570 --> 00:07:56,539
used you can<font color="#E5E5E5"> use that for writing your</font>

179
00:07:53,150 --> 00:07:59,448
own client your own<font color="#E5E5E5"> converter and</font><font color="#CCCCCC"> it's</font>

180
00:07:56,539 --> 00:08:01,699
available<font color="#E5E5E5"> either for C++ Python or or</font>

181
00:07:59,449 --> 00:08:05,990
rust<font color="#CCCCCC"> I'll show later how</font><font color="#E5E5E5"> to do it in</font>

182
00:08:01,699 --> 00:08:08,990
<font color="#E5E5E5">Python it's quite easy</font><font color="#CCCCCC"> so I mentioned</font>

183
00:08:05,990 --> 00:08:11,539
those three<font color="#CCCCCC"> components already</font><font color="#E5E5E5"> so the</font>

184
00:08:08,990 --> 00:08:14,150
event is<font color="#E5E5E5"> as a thing that</font><font color="#CCCCCC"> basically</font>

185
00:08:11,539 --> 00:08:17,270
carries the information<font color="#E5E5E5"> but we</font><font color="#CCCCCC"> wanna</font>

186
00:08:14,150 --> 00:08:19,190
<font color="#E5E5E5">that we want to kind</font><font color="#CCCCCC"> of have in the in</font>

187
00:08:17,270 --> 00:08:21,080
the result<font color="#CCCCCC"> like for</font><font color="#E5E5E5"> example I don't</font><font color="#CCCCCC"> know</font>

188
00:08:19,190 --> 00:08:26,750
<font color="#E5E5E5">time spent in</font><font color="#CCCCCC"> the function or memory</font>

189
00:08:21,080 --> 00:08:28,310
usage CPU supposing for<font color="#E5E5E5"> inheritance so</font>

190
00:08:26,750 --> 00:08:30,680
you can have an event<font color="#E5E5E5"> and then you can</font>

191
00:08:28,310 --> 00:08:33,260
inherit from<font color="#E5E5E5"> that event to add more</font>

192
00:08:30,680 --> 00:08:35,539
fields<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> the timeline</font><font color="#E5E5E5"> is</font>

193
00:08:33,260 --> 00:08:38,349
basically a buffer where you push events

194
00:08:35,539 --> 00:08:42,289
the timeline also<font color="#CCCCCC"> timestamps the event</font>

195
00:08:38,349 --> 00:08:44,540
<font color="#CCCCCC">so every time you you push the event to</font>

196
00:08:42,289 --> 00:08:48,170
the timeline<font color="#E5E5E5"> it gets time-stamped so you</font>

197
00:08:44,540 --> 00:08:51,740
know exactly<font color="#E5E5E5"> when the event happened</font><font color="#CCCCCC"> it</font>

198
00:08:48,170 --> 00:08:54,170
<font color="#E5E5E5">can be either</font><font color="#CCCCCC"> thread safe or not thread</font>

199
00:08:51,740 --> 00:08:55,910
safe lock free<font color="#E5E5E5"> that means that if you</font>

200
00:08:54,170 --> 00:08:58,069
if you know<font color="#E5E5E5"> that the time line</font><font color="#CCCCCC"> is used</font>

201
00:08:55,910 --> 00:08:59,930
only<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the single thread</font><font color="#E5E5E5"> there's no</font>

202
00:08:58,070 --> 00:09:01,880
<font color="#E5E5E5">point of introducing</font><font color="#CCCCCC"> new</font><font color="#E5E5E5"> textures and</font>

203
00:08:59,930 --> 00:09:03,290
stuff<font color="#CCCCCC"> like that</font><font color="#E5E5E5"> but if you want to use</font>

204
00:09:01,880 --> 00:09:05,420
the same time line across different

205
00:09:03,290 --> 00:09:07,160
threads and push events from different

206
00:09:05,420 --> 00:09:09,819
<font color="#E5E5E5">threads</font><font color="#CCCCCC"> then you need to enable the</font>

207
00:09:07,160 --> 00:09:11,740
<font color="#E5E5E5">thread safety feature but obviously that</font>

208
00:09:09,820 --> 00:09:14,810
introduces<font color="#E5E5E5"> are some extra overhead</font>

209
00:09:11,740 --> 00:09:17,360
<font color="#E5E5E5">because you need to lock the mutex every</font>

210
00:09:14,810 --> 00:09:19,880
time you push an event<font color="#E5E5E5"> and the timeline</font>

211
00:09:17,360 --> 00:09:24,230
listener is basically a<font color="#CCCCCC"> c</font><font color="#E5E5E5"> function that</font>

212
00:09:19,880 --> 00:09:27,010
<font color="#E5E5E5">user defines that gets all the events</font>

213
00:09:24,230 --> 00:09:31,310
<font color="#E5E5E5">and does something with them</font>

214
00:09:27,010 --> 00:09:35,390
and so<font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> show you</font><font color="#CCCCCC"> how to define your</font>

215
00:09:31,310 --> 00:09:38,719
your custom class so let's say you want

216
00:09:35,390 --> 00:09:42,410
to create<font color="#CCCCCC"> a you wanna trace memory usage</font>

217
00:09:38,720 --> 00:09:44,510
and<font color="#E5E5E5"> the CPU usage</font><font color="#CCCCCC"> so how</font><font color="#E5E5E5"> we do that you</font>

218
00:09:42,410 --> 00:09:46,370
<font color="#CCCCCC">basically use the</font><font color="#E5E5E5"> HD declare</font><font color="#CCCCCC"> event class</font>

219
00:09:44,510 --> 00:09:49,430
<font color="#E5E5E5">macro and the</font><font color="#CCCCCC"> first argument of that</font>

220
00:09:46,370 --> 00:09:52,700
<font color="#E5E5E5">macro is is the name of of your event</font>

221
00:09:49,430 --> 00:09:54,319
<font color="#E5E5E5">the second one is the base event class</font>

222
00:09:52,700 --> 00:09:56,960
because as I<font color="#CCCCCC"> said it supports</font>

223
00:09:54,320 --> 00:09:58,850
inheritance and all the events<font color="#E5E5E5"> must at</font>

224
00:09:56,960 --> 00:10:02,240
least inherit from<font color="#CCCCCC"> HT event is a base</font>

225
00:09:58,850 --> 00:10:04,630
<font color="#E5E5E5">class and then you define fields and</font>

226
00:10:02,240 --> 00:10:07,910
each field is defined<font color="#E5E5E5"> by three</font>

227
00:10:04,630 --> 00:10:12,110
<font color="#E5E5E5">properties as a type as either integer</font>

228
00:10:07,910 --> 00:10:15,020
string struct<font color="#E5E5E5"> float double and pointer</font>

229
00:10:12,110 --> 00:10:18,590
<font color="#E5E5E5">and then the second argument is the</font><font color="#CCCCCC"> sea</font>

230
00:10:15,020 --> 00:10:22,610
<font color="#E5E5E5">type so it's either int you</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> 60 40</font>

231
00:10:18,590 --> 00:10:26,090
as here or car<font color="#E5E5E5"> or</font><font color="#CCCCCC"> other and the last</font>

232
00:10:22,610 --> 00:10:29,480
last one is is the name<font color="#E5E5E5"> of the of that</font>

233
00:10:26,090 --> 00:10:31,670
<font color="#E5E5E5">field and that that macro Jenner is</font>

234
00:10:29,480 --> 00:10:33,380
basically a lot of<font color="#CCCCCC"> code</font><font color="#E5E5E5"> the most</font>

235
00:10:31,670 --> 00:10:36,229
important was one is that it actually

236
00:10:33,380 --> 00:10:39,050
<font color="#CCCCCC">generates the see structure so you</font><font color="#E5E5E5"> can</font>

237
00:10:36,230 --> 00:10:40,760
see here that<font color="#CCCCCC"> it generated the resource</font>

238
00:10:39,050 --> 00:10:43,670
usage<font color="#E5E5E5"> even see structure with those</font>

239
00:10:40,760 --> 00:10:46,430
fields<font color="#E5E5E5"> and with</font><font color="#CCCCCC"> the with the base field</font>

240
00:10:43,670 --> 00:10:48,740
of type<font color="#CCCCCC"> HT event and the HT event type</font>

241
00:10:46,430 --> 00:10:50,540
has basically<font color="#E5E5E5"> an ID</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> event has</font>

242
00:10:48,740 --> 00:10:53,060
unique<font color="#E5E5E5"> identifier so we can distinguish</font>

243
00:10:50,540 --> 00:10:54,560
them<font color="#CCCCCC"> it has a timestamp as I mentioned</font>

244
00:10:53,060 --> 00:10:58,489
that's<font color="#E5E5E5"> a pointer to</font><font color="#CCCCCC"> a class that</font>

245
00:10:54,560 --> 00:11:01,880
<font color="#CCCCCC">describes that data structure and it</font>

246
00:10:58,490 --> 00:11:04,070
also<font color="#E5E5E5"> generates few helper functions is</font>

247
00:11:01,880 --> 00:11:05,990
<font color="#E5E5E5">the one the</font><font color="#CCCCCC"> function is for the first</font>

248
00:11:04,070 --> 00:11:06,820
<font color="#E5E5E5">one is for Syria is serializing the</font>

249
00:11:05,990 --> 00:11:09,070
event so

250
00:11:06,820 --> 00:11:14,260
<font color="#CCCCCC">if she</font><font color="#E5E5E5"> realises</font><font color="#CCCCCC"> that event two to the</font>

251
00:11:09,070 --> 00:11:16,090
byte stream<font color="#E5E5E5"> the other one is for getting</font>

252
00:11:14,260 --> 00:11:19,569
<font color="#E5E5E5">even</font><font color="#CCCCCC"> class instance so</font><font color="#E5E5E5"> if you add</font>

253
00:11:16,090 --> 00:11:21,310
runtime need to know<font color="#E5E5E5"> what was the</font>

254
00:11:19,570 --> 00:11:24,280
<font color="#E5E5E5">structure of that event you can</font><font color="#CCCCCC"> use that</font>

255
00:11:21,310 --> 00:11:26,979
<font color="#CCCCCC">function and the last one is the most</font>

256
00:11:24,280 --> 00:11:29,410
important I think<font color="#E5E5E5"> because it's is used</font>

257
00:11:26,980 --> 00:11:31,540
for registering<font color="#E5E5E5"> this event class</font><font color="#CCCCCC"> in the</font>

258
00:11:29,410 --> 00:11:34,360
in the<font color="#CCCCCC"> hop tracer system so before you</font>

259
00:11:31,540 --> 00:11:36,730
use<font color="#E5E5E5"> the event class you need to call</font>

260
00:11:34,360 --> 00:11:39,610
that<font color="#CCCCCC"> function</font><font color="#E5E5E5"> otherwise hope tracer</font>

261
00:11:36,730 --> 00:11:41,710
doesn't<font color="#E5E5E5"> know what's the class and</font>

262
00:11:39,610 --> 00:11:47,710
<font color="#E5E5E5">probably will crash if you forget</font><font color="#CCCCCC"> about</font>

263
00:11:41,710 --> 00:11:52,450
this<font color="#CCCCCC"> and basically</font><font color="#E5E5E5"> so the better the the</font>

264
00:11:47,710 --> 00:11:54,130
byte stream that<font color="#E5E5E5"> is sent to a client the</font>

265
00:11:52,450 --> 00:11:56,410
client<font color="#E5E5E5"> doesn't know about events</font><font color="#CCCCCC"> even</font>

266
00:11:54,130 --> 00:11:58,090
classes that you defined in in your

267
00:11:56,410 --> 00:12:00,100
application<font color="#E5E5E5"> right you can define your</font>

268
00:11:58,090 --> 00:12:01,600
<font color="#E5E5E5">applications and then have the client</font>

269
00:12:00,100 --> 00:12:04,240
<font color="#E5E5E5">that to receive the stream but it</font>

270
00:12:01,600 --> 00:12:06,670
doesn't know what what events<font color="#E5E5E5"> did you</font>

271
00:12:04,240 --> 00:12:08,770
define so first before<font color="#E5E5E5"> we send any</font>

272
00:12:06,670 --> 00:12:11,199
events we<font color="#E5E5E5"> send</font><font color="#CCCCCC"> the metadata stream and</font>

273
00:12:08,770 --> 00:12:13,240
it basically contains information<font color="#E5E5E5"> about</font>

274
00:12:11,200 --> 00:12:15,340
all the<font color="#E5E5E5"> all the even classes that you</font>

275
00:12:13,240 --> 00:12:17,440
registered so it contains<font color="#CCCCCC"> information</font>

276
00:12:15,340 --> 00:12:20,050
about<font color="#CCCCCC"> the class name about the</font><font color="#E5E5E5"> class</font>

277
00:12:17,440 --> 00:12:22,770
<font color="#E5E5E5">identifier and all the fields that are</font>

278
00:12:20,050 --> 00:12:26,560
defined in<font color="#E5E5E5"> the class so then in the next</font>

279
00:12:22,770 --> 00:12:29,790
<font color="#E5E5E5">when we</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> send this stream</font><font color="#CCCCCC"> so</font>

280
00:12:26,560 --> 00:12:32,739
it's below<font color="#E5E5E5"> first we send the class ID</font>

281
00:12:29,790 --> 00:12:35,199
<font color="#CCCCCC">and then we send all the other</font><font color="#E5E5E5"> fields</font><font color="#CCCCCC"> so</font>

282
00:12:32,740 --> 00:12:37,150
then the parser knows okay I got this

283
00:12:35,200 --> 00:12:38,950
class ID<font color="#CCCCCC"> I know how to parse this</font>

284
00:12:37,150 --> 00:12:40,720
because I already<font color="#CCCCCC"> got the metadata</font>

285
00:12:38,950 --> 00:12:42,820
stream so I know<font color="#E5E5E5"> that the next field is</font>

286
00:12:40,720 --> 00:12:45,640
for example<font color="#CCCCCC"> a timestamp field</font><font color="#E5E5E5"> and it has</font>

287
00:12:42,820 --> 00:12:47,740
<font color="#CCCCCC">eight bytes</font><font color="#E5E5E5"> the nine next field is</font><font color="#CCCCCC"> the</font>

288
00:12:45,640 --> 00:12:50,560
<font color="#E5E5E5">CPU usage</font><font color="#CCCCCC"> it also has eight bytes in T</font>

289
00:12:47,740 --> 00:12:53,650
is<font color="#CCCCCC"> integer so I know how</font><font color="#E5E5E5"> to parse it so</font>

290
00:12:50,560 --> 00:12:58,680
there's no need<font color="#CCCCCC"> to recompile a client if</font>

291
00:12:53,650 --> 00:13:02,439
you<font color="#CCCCCC"> add a new class to</font><font color="#E5E5E5"> your library</font>

292
00:12:58,680 --> 00:13:04,989
<font color="#CCCCCC">timeline</font><font color="#E5E5E5"> basically most of</font><font color="#CCCCCC"> the time</font><font color="#E5E5E5"> we</font>

293
00:13:02,440 --> 00:13:06,610
<font color="#CCCCCC">are</font><font color="#E5E5E5"> using the global timeline and the</font>

294
00:13:04,990 --> 00:13:09,100
global timeline is not actually<font color="#CCCCCC"> the</font>

295
00:13:06,610 --> 00:13:12,750
single<font color="#E5E5E5"> timeline is a timeline per thread</font>

296
00:13:09,100 --> 00:13:15,040
<font color="#E5E5E5">so</font><font color="#CCCCCC"> we don't</font><font color="#E5E5E5"> have to lock everything</font>

297
00:13:12,750 --> 00:13:18,730
<font color="#E5E5E5">every time</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> we push something to a</font>

298
00:13:15,040 --> 00:13:19,949
<font color="#E5E5E5">timeline but</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> shares the listeners so</font>

299
00:13:18,730 --> 00:13:21,420
if you register

300
00:13:19,950 --> 00:13:24,720
listener<font color="#E5E5E5"> to one of the</font><font color="#CCCCCC"> timelines in one</font>

301
00:13:21,420 --> 00:13:26,339
of the<font color="#E5E5E5"> threads</font><font color="#CCCCCC"> you will kind of</font>

302
00:13:24,720 --> 00:13:28,500
<font color="#CCCCCC">automatically register it for all the</font>

303
00:13:26,340 --> 00:13:29,940
other<font color="#E5E5E5"> threads for global timeline if you</font>

304
00:13:28,500 --> 00:13:32,760
really need to<font color="#CCCCCC"> create your own line line</font>

305
00:13:29,940 --> 00:13:35,640
<font color="#E5E5E5">you can do that</font><font color="#CCCCCC"> but as I said</font><font color="#E5E5E5"> it's very</font>

306
00:13:32,760 --> 00:13:37,410
very uncommon<font color="#E5E5E5"> use case so I would just</font>

307
00:13:35,640 --> 00:13:39,000
recommend<font color="#E5E5E5"> you to use a global time line</font>

308
00:13:37,410 --> 00:13:41,160
and to access<font color="#CCCCCC"> the global timeline just</font>

309
00:13:39,000 --> 00:13:44,610
called<font color="#E5E5E5"> HT global</font><font color="#CCCCCC"> time line yet it will</font>

310
00:13:41,160 --> 00:13:48,630
return a pointer to<font color="#CCCCCC"> that time line so</font>

311
00:13:44,610 --> 00:13:51,030
<font color="#CCCCCC">our most common use case is to</font><font color="#E5E5E5"> measure</font>

312
00:13:48,630 --> 00:13:53,510
the<font color="#E5E5E5"> time spent in a function or time</font>

313
00:13:51,030 --> 00:13:57,540
<font color="#E5E5E5">span in scope so</font><font color="#CCCCCC"> we've also introduced</font>

314
00:13:53,510 --> 00:14:00,080
<font color="#E5E5E5">some of the helper macros</font><font color="#CCCCCC"> that allow you</font>

315
00:13:57,540 --> 00:14:04,530
to<font color="#E5E5E5"> measure the time we spend in a scope</font>

316
00:14:00,080 --> 00:14:06,270
<font color="#E5E5E5">so there's HTTP function that takes time</font>

317
00:14:04,530 --> 00:14:09,150
<font color="#E5E5E5">line pointer as an argument and it</font>

318
00:14:06,270 --> 00:14:13,620
basically<font color="#E5E5E5"> measures the</font><font color="#CCCCCC"> time spent in the</font>

319
00:14:09,150 --> 00:14:16,410
<font color="#CCCCCC">full</font><font color="#E5E5E5"> function and the output if you look</font>

320
00:14:13,620 --> 00:14:19,680
at the end of the slide as<font color="#E5E5E5"> basically it</font>

321
00:14:16,410 --> 00:14:22,650
generates a<font color="#CCCCCC"> new event with the</font><font color="#E5E5E5"> duration</font>

322
00:14:19,680 --> 00:14:24,569
which is how much we spent in<font color="#CCCCCC"> that in</font>

323
00:14:22,650 --> 00:14:27,209
that<font color="#E5E5E5"> scope it also adds information</font>

324
00:14:24,570 --> 00:14:30,360
<font color="#CCCCCC">about the thread identifier so you know</font>

325
00:14:27,210 --> 00:14:32,070
that this function<font color="#E5E5E5"> was called in in this</font>

326
00:14:30,360 --> 00:14:36,690
<font color="#E5E5E5">particular thread and it also adds the</font>

327
00:14:32,070 --> 00:14:38,900
<font color="#E5E5E5">label so in that case the HTTP function</font>

328
00:14:36,690 --> 00:14:41,790
macro sets the function name was a label

329
00:14:38,900 --> 00:14:43,949
<font color="#CCCCCC">if you want to trace custom scope you</font>

330
00:14:41,790 --> 00:14:47,250
can<font color="#CCCCCC"> do that it's</font><font color="#E5E5E5"> just another macro and</font>

331
00:14:43,950 --> 00:14:52,080
<font color="#E5E5E5">plus you also need to add the</font><font color="#CCCCCC"> custom</font>

332
00:14:47,250 --> 00:14:55,470
label for<font color="#E5E5E5"> that</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> those</font><font color="#CCCCCC"> macros are</font>

333
00:14:52,080 --> 00:14:59,130
only<font color="#CCCCCC"> available</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> C++</font><font color="#E5E5E5"> and in the GNU C</font>

334
00:14:55,470 --> 00:15:01,170
compiler because<font color="#CCCCCC"> see basically does not</font>

335
00:14:59,130 --> 00:15:03,480
have such thing like<font color="#E5E5E5"> like a destructor</font>

336
00:15:01,170 --> 00:15:04,920
so we don't kind<font color="#E5E5E5"> of we don't have a way</font>

337
00:15:03,480 --> 00:15:07,320
to call a<font color="#CCCCCC"> callback</font><font color="#E5E5E5"> at the end of</font><font color="#CCCCCC"> the</font>

338
00:15:04,920 --> 00:15:10,199
<font color="#CCCCCC">scope</font><font color="#E5E5E5"> if you want to measure arbitrary</font>

339
00:15:07,320 --> 00:15:13,020
code not necessarily not<font color="#CCCCCC"> necessarily a</font>

340
00:15:10,200 --> 00:15:16,230
scope<font color="#E5E5E5"> there's also a set of function</font>

341
00:15:13,020 --> 00:15:19,280
start<font color="#CCCCCC"> caustic</font><font color="#E5E5E5"> star string and the stop</font>

342
00:15:16,230 --> 00:15:22,110
and that measures the time between

343
00:15:19,280 --> 00:15:24,630
<font color="#E5E5E5">calling those two functions</font><font color="#CCCCCC"> and again it</font>

344
00:15:22,110 --> 00:15:27,620
generates<font color="#E5E5E5"> the same event with the label</font>

345
00:15:24,630 --> 00:15:27,620
that<font color="#CCCCCC"> you specified here</font>

346
00:15:28,319 --> 00:15:35,549
oh yeah so<font color="#E5E5E5"> this</font><font color="#CCCCCC"> cope is</font><font color="#E5E5E5"> basically like a</font>

347
00:15:30,749 --> 00:15:39,419
scope<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> c c++ variable so in</font><font color="#E5E5E5"> this</font>

348
00:15:35,549 --> 00:15:42,209
<font color="#CCCCCC">example the the scope of this trace</font>

349
00:15:39,419 --> 00:15:45,989
point<font color="#E5E5E5"> HTTP function is the whole</font>

350
00:15:42,209 --> 00:15:50,008
<font color="#E5E5E5">function</font><font color="#CCCCCC"> but here it only is instead</font><font color="#E5E5E5"> of</font>

351
00:15:45,989 --> 00:15:55,109
inside this curly braces<font color="#E5E5E5"> so yeah does</font>

352
00:15:50,009 --> 00:15:57,119
the scope and so that was more or<font color="#E5E5E5"> less</font>

353
00:15:55,109 --> 00:15:58,350
<font color="#E5E5E5">about the</font><font color="#CCCCCC"> whole</font><font color="#E5E5E5"> tracer internals and now</font>

354
00:15:57,119 --> 00:16:00,089
how can<font color="#CCCCCC"> you</font><font color="#E5E5E5"> integrate it with</font><font color="#CCCCCC"> your</font>

355
00:15:58,350 --> 00:16:03,029
project if<font color="#E5E5E5"> you just download the source</font>

356
00:16:00,089 --> 00:16:06,119
code<font color="#CCCCCC"> do Makemake install it will install</font>

357
00:16:03,029 --> 00:16:08,699
the pkg config file so you<font color="#CCCCCC"> can just use</font>

358
00:16:06,119 --> 00:16:10,799
a pkg config and<font color="#E5E5E5"> compile</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> with your</font>

359
00:16:08,699 --> 00:16:14,339
with<font color="#CCCCCC"> your project</font>

360
00:16:10,799 --> 00:16:17,129
this hog tracer itself<font color="#CCCCCC"> I</font><font color="#E5E5E5"> uses a</font><font color="#CCCCCC"> Simek as</font>

361
00:16:14,339 --> 00:16:19,619
a build system<font color="#CCCCCC"> so you can either</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> it</font>

362
00:16:17,129 --> 00:16:21,839
as an external project very easily<font color="#E5E5E5"> there</font>

363
00:16:19,619 --> 00:16:23,879
is a an example<font color="#E5E5E5"> how</font><font color="#CCCCCC"> to actually do that</font>

364
00:16:21,839 --> 00:16:25,319
<font color="#E5E5E5">so</font><font color="#CCCCCC"> I recommend you to copy</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> hop</font>

365
00:16:23,879 --> 00:16:27,929
tracer dot<font color="#E5E5E5"> C make file to your</font>

366
00:16:25,319 --> 00:16:32,789
repository<font color="#E5E5E5"> and and include it in</font><font color="#CCCCCC"> your</font>

367
00:16:27,929 --> 00:16:35,459
project or if you installed it as a

368
00:16:32,789 --> 00:16:37,049
system library<font color="#CCCCCC"> you can just use a</font><font color="#E5E5E5"> find</font>

369
00:16:35,459 --> 00:16:40,169
package hog tracer with a specific

370
00:16:37,049 --> 00:16:45,179
<font color="#CCCCCC">version and then link it</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> your project</font>

371
00:16:40,169 --> 00:16:47,850
<font color="#E5E5E5">and the third option is I had the one</font>

372
00:16:45,179 --> 00:16:50,399
that I actually recommend is<font color="#E5E5E5"> that we</font>

373
00:16:47,850 --> 00:16:52,649
basically is like SQLite<font color="#E5E5E5"> it has many</font>

374
00:16:50,399 --> 00:16:54,929
files but at the<font color="#CCCCCC"> end all those files get</font>

375
00:16:52,649 --> 00:16:58,019
<font color="#E5E5E5">merged to a single file</font><font color="#CCCCCC"> so same hook</font>

376
00:16:54,929 --> 00:17:00,269
tracer<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> three files eventually we</font>

377
00:16:58,019 --> 00:17:02,519
have HT config where you can modify<font color="#CCCCCC"> a</font>

378
00:17:00,269 --> 00:17:04,138
configuration we<font color="#CCCCCC"> have a header file and</font>

379
00:17:02,519 --> 00:17:06,480
the CPP file where<font color="#E5E5E5"> the whole</font>

380
00:17:04,138 --> 00:17:08,128
implementation<font color="#E5E5E5"> is and the sivb file it</font>

381
00:17:06,480 --> 00:17:11,490
can actually be compiled using a C

382
00:17:08,128 --> 00:17:15,148
compiler you might just not<font color="#CCCCCC"> have all the</font>

383
00:17:11,490 --> 00:17:19,799
features but<font color="#CCCCCC"> there it's</font><font color="#E5E5E5"> is possible to</font>

384
00:17:15,148 --> 00:17:22,018
compile it just using<font color="#E5E5E5"> the C compiler I'm</font>

385
00:17:19,799 --> 00:17:24,209
mighty sorry<font color="#CCCCCC"> I should mention that</font>

386
00:17:22,019 --> 00:17:26,429
<font color="#CCCCCC">before</font><font color="#E5E5E5"> yeah the license is a mighty so</font>

387
00:17:24,209 --> 00:17:33,649
you should be<font color="#E5E5E5"> able to use it as you want</font>

388
00:17:26,429 --> 00:17:33,649
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> so demo the first demo</font>

389
00:17:37,960 --> 00:17:46,520
so I've implemented<font color="#CCCCCC"> a sorting algorithm</font>

390
00:17:42,410 --> 00:17:48,770
<font color="#CCCCCC">it sorts four hundred numbers and turns</font>

391
00:17:46,520 --> 00:17:53,240
out that the algorithm<font color="#CCCCCC"> is very</font><font color="#E5E5E5"> slow so</font>

392
00:17:48,770 --> 00:17:55,820
if you see I press<font color="#E5E5E5"> ENTER now and yeah it</font>

393
00:17:53,240 --> 00:17:57,350
took<font color="#E5E5E5"> a while to to sort those numbers</font>

394
00:17:55,820 --> 00:18:00,530
there was only<font color="#E5E5E5"> four</font><font color="#CCCCCC"> hundred numbers so</font>

395
00:17:57,350 --> 00:18:03,500
it should be<font color="#E5E5E5"> like</font><font color="#CCCCCC"> very quickly</font><font color="#E5E5E5"> so let's</font>

396
00:18:00,530 --> 00:18:05,899
<font color="#E5E5E5">look at the source code we call the</font>

397
00:18:03,500 --> 00:18:08,300
<font color="#E5E5E5">quick start here so now we want to know</font>

398
00:18:05,900 --> 00:18:08,810
why is<font color="#E5E5E5"> it slow</font><font color="#CCCCCC"> and in order</font><font color="#E5E5E5"> to know why</font>

399
00:18:08,300 --> 00:18:12,710
is it<font color="#CCCCCC"> slow</font>

400
00:18:08,810 --> 00:18:15,790
we need to instrument our code<font color="#E5E5E5"> so I'll</font>

401
00:18:12,710 --> 00:18:18,740
show you<font color="#E5E5E5"> how</font><font color="#CCCCCC"> to set up the code</font><font color="#E5E5E5"> to</font>

402
00:18:15,790 --> 00:18:20,899
basically<font color="#E5E5E5"> work with hope tracer at the</font>

403
00:18:18,740 --> 00:18:23,060
beginning<font color="#E5E5E5"> you need to call HT init</font>

404
00:18:20,900 --> 00:18:25,240
function<font color="#E5E5E5"> this is very important it</font>

405
00:18:23,060 --> 00:18:29,210
initializes some internal buffers<font color="#E5E5E5"> and</font>

406
00:18:25,240 --> 00:18:32,690
registers some base classes<font color="#CCCCCC"> so don't</font>

407
00:18:29,210 --> 00:18:35,300
forget<font color="#CCCCCC"> about this</font><font color="#E5E5E5"> then we need to create</font>

408
00:18:32,690 --> 00:18:37,730
<font color="#CCCCCC">the listener as I said the</font><font color="#E5E5E5"> timeline</font>

409
00:18:35,300 --> 00:18:40,220
<font color="#CCCCCC">needs</font><font color="#E5E5E5"> to have a listener otherwise no</font>

410
00:18:37,730 --> 00:18:42,200
one will be able<font color="#E5E5E5"> to access those events</font>

411
00:18:40,220 --> 00:18:44,660
<font color="#E5E5E5">that</font><font color="#CCCCCC"> we generate so for this purpose we</font>

412
00:18:42,200 --> 00:18:47,030
we<font color="#E5E5E5"> decided to use the file listener a</font>

413
00:18:44,660 --> 00:18:51,560
file listener basically saves all<font color="#CCCCCC"> the</font>

414
00:18:47,030 --> 00:18:54,290
events to a file<font color="#E5E5E5"> so we decided</font><font color="#CCCCCC"> to save</font>

415
00:18:51,560 --> 00:18:57,010
save it to a sort dot<font color="#E5E5E5"> HT dump file</font>

416
00:18:54,290 --> 00:18:59,510
so it will<font color="#E5E5E5"> generate</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> binder file</font>

417
00:18:57,010 --> 00:19:02,540
there is<font color="#E5E5E5"> some check if the listener was</font>

418
00:18:59,510 --> 00:19:04,940
created correctly then we<font color="#CCCCCC"> register</font><font color="#E5E5E5"> the</font>

419
00:19:02,540 --> 00:19:06,830
listener to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> timeline because we only</font>

420
00:19:04,940 --> 00:19:08,540
created<font color="#E5E5E5"> an instance here but now we need</font>

421
00:19:06,830 --> 00:19:11,449
<font color="#E5E5E5">to</font><font color="#CCCCCC"> actually register</font><font color="#E5E5E5"> it to a</font><font color="#CCCCCC"> timeline</font>

422
00:19:08,540 --> 00:19:15,470
and we use the global<font color="#E5E5E5"> timeline as this</font>

423
00:19:11,450 --> 00:19:17,510
is the most<font color="#E5E5E5"> convenient</font><font color="#CCCCCC"> thing to</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> this</font>

424
00:19:15,470 --> 00:19:19,460
<font color="#CCCCCC">is the callback of the function and this</font>

425
00:19:17,510 --> 00:19:22,730
<font color="#E5E5E5">is like a user data so the callback</font>

426
00:19:19,460 --> 00:19:27,230
knows the context and then we initialize

427
00:19:22,730 --> 00:19:30,160
our input so we<font color="#E5E5E5"> generate 400 random</font>

428
00:19:27,230 --> 00:19:35,210
numbers and then we quicksort

429
00:19:30,160 --> 00:19:37,610
this array so if you see if you<font color="#E5E5E5"> look at</font>

430
00:19:35,210 --> 00:19:39,080
the functions<font color="#E5E5E5"> we basically I added to</font>

431
00:19:37,610 --> 00:19:39,469
all<font color="#E5E5E5"> the functions I've added this trace</font>

432
00:19:39,080 --> 00:19:41,540
point

433
00:19:39,470 --> 00:19:43,310
so whenever function gets called we

434
00:19:41,540 --> 00:19:46,220
generate the event how long did it take

435
00:19:43,310 --> 00:19:47,740
to to execute that particular function

436
00:19:46,220 --> 00:19:49,240
<font color="#CCCCCC">and we</font><font color="#E5E5E5"> have</font>

437
00:19:47,740 --> 00:19:50,679
few other<font color="#CCCCCC"> functions we have a</font><font color="#E5E5E5"> partition</font>

438
00:19:49,240 --> 00:19:54,850
<font color="#CCCCCC">function we have a quick</font><font color="#E5E5E5"> start function</font>

439
00:19:50,679 --> 00:19:57,700
and we also have a swap function so<font color="#E5E5E5"> now</font>

440
00:19:54,850 --> 00:20:00,730
I run this<font color="#E5E5E5"> it was already instrumented</font>

441
00:19:57,700 --> 00:20:05,080
so if you look here<font color="#CCCCCC"> it</font><font color="#E5E5E5"> already generated</font>

442
00:20:00,730 --> 00:20:07,260
this sort<font color="#E5E5E5"> dot</font><font color="#CCCCCC"> HT</font><font color="#E5E5E5"> dump file and now this</font>

443
00:20:05,080 --> 00:20:11,470
is a binary file<font color="#E5E5E5"> so if you try to open</font>

444
00:20:07,260 --> 00:20:14,440
<font color="#CCCCCC">the</font><font color="#E5E5E5"> you'll see this basically the binary</font>

445
00:20:11,470 --> 00:20:16,390
file<font color="#CCCCCC"> so what we can</font><font color="#E5E5E5"> do we can convert</font>

446
00:20:14,440 --> 00:20:19,540
that<font color="#E5E5E5"> binary</font><font color="#CCCCCC"> stream to something that</font><font color="#E5E5E5"> we</font>

447
00:20:16,390 --> 00:20:22,660
<font color="#E5E5E5">can actually read I mentioned about the</font>

448
00:20:19,540 --> 00:20:26,320
<font color="#CCCCCC">hog tracer converter program so if you</font>

449
00:20:22,660 --> 00:20:28,750
look at this<font color="#E5E5E5"> you see that</font><font color="#CCCCCC"> this program</font>

450
00:20:26,320 --> 00:20:30,850
takes<font color="#E5E5E5"> basically three</font><font color="#CCCCCC"> monitor parameters</font>

451
00:20:28,750 --> 00:20:35,500
<font color="#E5E5E5">first is format which is an output</font>

452
00:20:30,850 --> 00:20:39,490
format which we convert<font color="#E5E5E5"> our data to and</font>

453
00:20:35,500 --> 00:20:42,760
it<font color="#E5E5E5"> can be either a flame graph or</font><font color="#CCCCCC"> chrome</font>

454
00:20:39,490 --> 00:20:46,240
trace<font color="#E5E5E5"> or it can be a debug which</font>

455
00:20:42,760 --> 00:20:54,670
basically prints<font color="#E5E5E5"> everything as it is</font><font color="#CCCCCC"> so</font>

456
00:20:46,240 --> 00:21:03,070
we decide<font color="#CCCCCC"> to use</font><font color="#E5E5E5"> chrome trace another</font>

457
00:20:54,670 --> 00:21:07,179
parameter is output file<font color="#E5E5E5"> let's say short</font>

458
00:21:03,070 --> 00:21:09,790
slow<font color="#E5E5E5"> Jason and and the source source is</font>

459
00:21:07,179 --> 00:21:12,340
<font color="#E5E5E5">very important as the program is to know</font>

460
00:21:09,790 --> 00:21:16,389
where<font color="#CCCCCC"> to get the data from</font><font color="#E5E5E5"> and the</font>

461
00:21:12,340 --> 00:21:18,939
source this<font color="#E5E5E5"> chrome tracing how tracer</font>

462
00:21:16,390 --> 00:21:22,600
converter<font color="#E5E5E5"> tool only supports two sources</font>

463
00:21:18,940 --> 00:21:25,450
<font color="#CCCCCC">it's either a file name or</font><font color="#E5E5E5"> a TCP IP</font>

464
00:21:22,600 --> 00:21:27,250
address in case we for example stream

465
00:21:25,450 --> 00:21:30,490
the<font color="#E5E5E5"> data over the network it can listen</font>

466
00:21:27,250 --> 00:21:37,480
to<font color="#E5E5E5"> to a specific port and receive the</font>

467
00:21:30,490 --> 00:21:39,850
data so<font color="#E5E5E5"> the source is</font><font color="#CCCCCC"> sort HT dump</font><font color="#E5E5E5"> now</font>

468
00:21:37,480 --> 00:21:42,250
we run it<font color="#E5E5E5"> it's processing the data is</font>

469
00:21:39,850 --> 00:21:45,809
completed<font color="#E5E5E5"> successfully let's see we have</font>

470
00:21:42,250 --> 00:21:49,960
this yes<font color="#E5E5E5"> so we have</font><font color="#CCCCCC"> salts flow</font><font color="#E5E5E5"> and now</font>

471
00:21:45,809 --> 00:21:53,379
we can<font color="#CCCCCC"> use the chrome tracing viewer to</font>

472
00:21:49,960 --> 00:21:55,000
actually<font color="#CCCCCC"> see why our</font><font color="#E5E5E5"> applications now so</font>

473
00:21:53,380 --> 00:21:58,240
I love the JSON file<font color="#CCCCCC"> that we generated</font>

474
00:21:55,000 --> 00:22:00,550
<font color="#E5E5E5">and we see basically this shows the</font>

475
00:21:58,240 --> 00:22:05,440
constructs of

476
00:22:00,550 --> 00:22:09,820
in our application the<font color="#E5E5E5"> X x axis is a</font>

477
00:22:05,440 --> 00:22:12,429
time and we see<font color="#E5E5E5"> that basically</font><font color="#CCCCCC"> since</font><font color="#E5E5E5"> the</font>

478
00:22:09,820 --> 00:22:14,500
<font color="#CCCCCC">QuickStart is a recursive algorithm</font><font color="#E5E5E5"> we</font>

479
00:22:12,429 --> 00:22:16,690
<font color="#E5E5E5">we see that quicksort calls quicksort</font>

480
00:22:14,500 --> 00:22:19,030
and so on and so on<font color="#CCCCCC"> but if we look</font>

481
00:22:16,690 --> 00:22:22,059
closer<font color="#E5E5E5"> we basically see</font><font color="#CCCCCC"> that apart</font><font color="#E5E5E5"> from</font>

482
00:22:19,030 --> 00:22:23,910
calling quicksort<font color="#E5E5E5"> it works</font><font color="#CCCCCC"> it also calls</font>

483
00:22:22,059 --> 00:22:27,460
<font color="#E5E5E5">something different and if we</font><font color="#CCCCCC"> zoom in</font>

484
00:22:23,910 --> 00:22:30,100
more<font color="#E5E5E5"> we see that</font><font color="#CCCCCC"> actually most of the</font>

485
00:22:27,460 --> 00:22:32,110
time<font color="#E5E5E5"> we spend in the swap function I</font>

486
00:22:30,100 --> 00:22:34,178
don't know if you<font color="#E5E5E5"> can see but this</font><font color="#CCCCCC"> is</font>

487
00:22:32,110 --> 00:22:37,449
basically<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> quick start the blue</font>

488
00:22:34,179 --> 00:22:39,940
one is<font color="#CCCCCC"> quicksort function</font><font color="#E5E5E5"> then the green</font>

489
00:22:37,450 --> 00:22:42,640
one is partition and the green the light

490
00:22:39,940 --> 00:22:44,380
green is is a swap method so we spent

491
00:22:42,640 --> 00:22:46,270
quite<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of time in the swamp method</font>

492
00:22:44,380 --> 00:22:49,510
so that's<font color="#CCCCCC"> probably a function that we</font>

493
00:22:46,270 --> 00:22:51,490
should look into and if we see how the

494
00:22:49,510 --> 00:22:53,290
swamp method using<font color="#E5E5E5"> planted it takes a</font>

495
00:22:51,490 --> 00:22:57,870
<font color="#E5E5E5">and B as an argument and we want to swap</font>

496
00:22:53,290 --> 00:23:02,409
values so how<font color="#E5E5E5"> did we do that well yeah</font>

497
00:22:57,870 --> 00:23:07,030
if someone<font color="#E5E5E5"> implemented</font><font color="#CCCCCC"> us the saving is</font>

498
00:23:02,410 --> 00:23:09,540
to a temporary file and then is actually

499
00:23:07,030 --> 00:23:12,580
serialized to string and then we read it

500
00:23:09,540 --> 00:23:14,020
that's probably<font color="#E5E5E5"> why it's</font><font color="#CCCCCC"> slow so if we</font>

501
00:23:12,580 --> 00:23:19,050
just change<font color="#E5E5E5"> the implementation to</font>

502
00:23:14,020 --> 00:23:22,250
something like this

503
00:23:19,050 --> 00:23:22,250
[Music]

504
00:23:28,019 --> 00:23:34,080
yeah there is a trick with<font color="#CCCCCC"> XOR yeah I</font>

505
00:23:31,700 --> 00:23:37,379
have to think<font color="#E5E5E5"> about it but yeah I'm</font>

506
00:23:34,080 --> 00:23:39,299
definitely that's possible<font color="#E5E5E5"> yeah so if we</font>

507
00:23:37,379 --> 00:23:41,099
<font color="#E5E5E5">fix that</font><font color="#CCCCCC"> then probably our trace is</font>

508
00:23:39,299 --> 00:23:44,219
gonna look completely differently

509
00:23:41,099 --> 00:23:46,739
<font color="#E5E5E5">I believe me saving</font><font color="#CCCCCC"> temporal data to a</font>

510
00:23:44,219 --> 00:23:48,989
file<font color="#E5E5E5"> and read it after that it's</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> ways</font>

511
00:23:46,739 --> 00:23:51,509
of time so I'm<font color="#E5E5E5"> not gonna wreck imply the</font>

512
00:23:48,989 --> 00:23:53,099
<font color="#E5E5E5">rerun it I guess you all believe</font><font color="#CCCCCC"> me that</font>

513
00:23:51,509 --> 00:23:54,869
this is gonna fix our performance

514
00:23:53,099 --> 00:24:01,289
problem and it's gonna be much much

515
00:23:54,869 --> 00:24:05,070
faster sorry

516
00:24:01,289 --> 00:24:10,979
oh absolutely

517
00:24:05,070 --> 00:24:13,049
<font color="#CCCCCC">thanks yeah</font><font color="#E5E5E5"> live</font><font color="#CCCCCC"> done whatever</font><font color="#E5E5E5"> works so</font>

518
00:24:10,979 --> 00:24:16,409
that<font color="#CCCCCC"> was the first demo</font><font color="#E5E5E5"> and the second</font>

519
00:24:13,049 --> 00:24:20,158
demo<font color="#E5E5E5"> so as I mentioned so imagine that</font>

520
00:24:16,409 --> 00:24:25,549
<font color="#CCCCCC">we previously we showed you how</font><font color="#E5E5E5"> to how</font>

521
00:24:20,159 --> 00:24:30,529
to<font color="#E5E5E5"> create your own class</font><font color="#CCCCCC"> which was for</font>

522
00:24:25,549 --> 00:24:30,529
memory usage and CPU usage tracking<font color="#E5E5E5"> and</font>

523
00:24:31,039 --> 00:24:38,309
actually using the<font color="#CCCCCC"> chrome tracing viewer</font>

524
00:24:33,509 --> 00:24:41,190
<font color="#E5E5E5">we couldn't visualize this so how can we</font>

525
00:24:38,309 --> 00:24:45,599
how can<font color="#E5E5E5"> we see like a custom data so for</font>

526
00:24:41,190 --> 00:24:49,830
that<font color="#E5E5E5"> I as I mentioned we</font><font color="#CCCCCC"> can build our</font>

527
00:24:45,599 --> 00:24:52,769
own around client<font color="#E5E5E5"> to to process events</font>

528
00:24:49,830 --> 00:24:55,320
so there is a module<font color="#CCCCCC"> hook tracer for</font>

529
00:24:52,769 --> 00:24:57,559
<font color="#E5E5E5">Python it's very simple to use you</font>

530
00:24:55,320 --> 00:25:00,450
create a client<font color="#E5E5E5"> you start the connection</font>

531
00:24:57,559 --> 00:25:03,658
<font color="#E5E5E5">so I said</font><font color="#CCCCCC"> okay one</font><font color="#E5E5E5"> two seven zero zero</font>

532
00:25:00,450 --> 00:25:07,710
<font color="#E5E5E5">one on</font><font color="#CCCCCC"> port 80</font><font color="#E5E5E5"> seven six five and then</font>

533
00:25:03,659 --> 00:25:10,049
whenever<font color="#E5E5E5"> we receive an event here we</font>

534
00:25:07,710 --> 00:25:12,779
check if<font color="#CCCCCC"> the event name</font><font color="#E5E5E5"> is resource</font>

535
00:25:10,049 --> 00:25:14,849
usage event if it is then we take the

536
00:25:12,779 --> 00:25:18,179
CPU<font color="#CCCCCC"> usage we take a memory usage we</font>

537
00:25:14,849 --> 00:25:21,299
print CPU usage<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> draw memory usage</font>

538
00:25:18,179 --> 00:25:23,089
on the graph<font color="#E5E5E5"> I'm not the Python</font>

539
00:25:21,299 --> 00:25:26,849
developer so maybe that's not the best

540
00:25:23,089 --> 00:25:30,269
<font color="#CCCCCC">way to graph something but it works and</font>

541
00:25:26,849 --> 00:25:30,859
the our code is very very similar<font color="#CCCCCC"> to the</font>

542
00:25:30,269 --> 00:25:33,479
previous one

543
00:25:30,859 --> 00:25:35,970
<font color="#CCCCCC">instead of doing the file listener we</font>

544
00:25:33,479 --> 00:25:37,500
created the TCP listener<font color="#CCCCCC"> that I</font>

545
00:25:35,970 --> 00:25:41,880
basically<font color="#E5E5E5"> create the server that</font>

546
00:25:37,500 --> 00:25:44,340
<font color="#E5E5E5">dreams the data we also had this the</font>

547
00:25:41,880 --> 00:25:47,190
class that I showed before<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is</font>

548
00:25:44,340 --> 00:25:51,090
the<font color="#E5E5E5"> definition of our class and then</font>

549
00:25:47,190 --> 00:25:54,030
every every second here<font color="#E5E5E5"> in the while</font>

550
00:25:51,090 --> 00:25:56,909
<font color="#CCCCCC">loop we allocate some amount</font><font color="#E5E5E5"> of memory</font>

551
00:25:54,030 --> 00:26:00,149
<font color="#CCCCCC">half of the kilobyte then we make our</font>

552
00:25:56,910 --> 00:26:03,480
CPU busy and we sleep for for one second

553
00:26:00,150 --> 00:26:05,030
<font color="#E5E5E5">and we report</font><font color="#CCCCCC"> resource usage so let's</font>

554
00:26:03,480 --> 00:26:08,000
see how do<font color="#E5E5E5"> we report the resource usage</font>

555
00:26:05,030 --> 00:26:10,770
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> a macro HD</font><font color="#CCCCCC"> timeline push event</font>

556
00:26:08,000 --> 00:26:16,170
<font color="#E5E5E5">it takes a timeline as</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> argument</font>

557
00:26:10,770 --> 00:26:18,389
then the<font color="#CCCCCC"> events type</font><font color="#E5E5E5"> then values of that</font>

558
00:26:16,170 --> 00:26:21,630
<font color="#E5E5E5">event that we want to attach to</font><font color="#CCCCCC"> this</font>

559
00:26:18,390 --> 00:26:23,520
event<font color="#E5E5E5"> and then we and</font><font color="#CCCCCC"> then we push and</font>

560
00:26:21,630 --> 00:26:26,760
<font color="#CCCCCC">that pushes</font><font color="#E5E5E5"> it we also flush the</font>

561
00:26:23,520 --> 00:26:28,620
timeline manually instead<font color="#CCCCCC"> of waiting for</font>

562
00:26:26,760 --> 00:26:30,720
the buffer to<font color="#CCCCCC"> gets full</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> we want</font>

563
00:26:28,620 --> 00:26:34,679
to<font color="#E5E5E5"> have the data immediately</font><font color="#CCCCCC"> in the</font>

564
00:26:30,720 --> 00:26:38,550
client so it's kind of<font color="#E5E5E5"> smooth drawing so</font>

565
00:26:34,680 --> 00:26:41,280
we can run the<font color="#E5E5E5"> demo</font><font color="#CCCCCC"> I run the rest</font><font color="#E5E5E5"> of</font>

566
00:26:38,550 --> 00:26:46,740
the resource usage<font color="#CCCCCC"> and I run my Python</font>

567
00:26:41,280 --> 00:26:49,260
client<font color="#E5E5E5"> and yeah you can see that it</font>

568
00:26:46,740 --> 00:26:52,230
<font color="#E5E5E5">draws the memory usage</font><font color="#CCCCCC"> here so basically</font>

569
00:26:49,260 --> 00:26:55,050
<font color="#CCCCCC">what we've done</font><font color="#E5E5E5"> we made our custom kind</font>

570
00:26:52,230 --> 00:26:57,360
<font color="#E5E5E5">of event converter and</font><font color="#CCCCCC"> we decided how we</font>

571
00:26:55,050 --> 00:26:59,490
<font color="#CCCCCC">visualize the data in Python just in I</font>

572
00:26:57,360 --> 00:27:01,290
<font color="#E5E5E5">don't know 20 lines of code and also</font><font color="#CCCCCC"> of</font>

573
00:26:59,490 --> 00:27:05,520
the<font color="#E5E5E5"> CPUs I just printed here so it's</font>

574
00:27:01,290 --> 00:27:08,250
<font color="#CCCCCC">around</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> one to three</font><font color="#E5E5E5"> percent yeah so</font>

575
00:27:05,520 --> 00:27:10,080
that was<font color="#E5E5E5"> the second demo</font><font color="#CCCCCC"> there's a bunch</font>

576
00:27:08,250 --> 00:27:12,060
of<font color="#E5E5E5"> things that we</font><font color="#CCCCCC"> want to do for</font><font color="#E5E5E5"> the</font>

577
00:27:10,080 --> 00:27:14,189
<font color="#CCCCCC">future there are some</font><font color="#E5E5E5"> missing features</font>

578
00:27:12,060 --> 00:27:16,980
like we<font color="#E5E5E5"> don't support floating-point</font>

579
00:27:14,190 --> 00:27:18,720
numbers at the moment<font color="#CCCCCC"> optional fields is</font>

580
00:27:16,980 --> 00:27:20,730
also something we want<font color="#E5E5E5"> to have so for</font>

581
00:27:18,720 --> 00:27:22,710
example you<font color="#E5E5E5"> have a class</font><font color="#CCCCCC"> with some</font>

582
00:27:20,730 --> 00:27:24,510
<font color="#CCCCCC">events with some</font><font color="#E5E5E5"> fields but sometimes</font>

583
00:27:22,710 --> 00:27:26,340
some<font color="#E5E5E5"> of the fields should</font><font color="#CCCCCC"> not be</font>

584
00:27:24,510 --> 00:27:28,379
included<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that would be nice to have</font>

585
00:27:26,340 --> 00:27:30,990
we also want<font color="#CCCCCC"> to have more converters in</font>

586
00:27:28,380 --> 00:27:32,730
the<font color="#CCCCCC"> whole tracer</font><font color="#E5E5E5"> convertor like a CTF is</font>

587
00:27:30,990 --> 00:27:36,600
the current race format supported by

588
00:27:32,730 --> 00:27:39,360
compass or<font color="#CCCCCC"> LT TNG's called</font><font color="#E5E5E5"> viewer</font><font color="#CCCCCC"> so we</font>

589
00:27:36,600 --> 00:27:42,570
nice to have we use<font color="#E5E5E5"> that profiler also</font>

590
00:27:39,360 --> 00:27:44,909
for<font color="#E5E5E5"> profiling C++ and Lua</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> JavaScript</font>

591
00:27:42,570 --> 00:27:46,409
stack at the same time but Lua bindings

592
00:27:44,910 --> 00:27:50,290
and<font color="#CCCCCC"> just two bindings are not open</font>

593
00:27:46,410 --> 00:27:52,000
source<font color="#E5E5E5"> so we also want to do that and</font>

594
00:27:50,290 --> 00:27:54,510
lots of documentation improvements even

595
00:27:52,000 --> 00:27:57,610
<font color="#E5E5E5">though the documentation is quite</font><font color="#CCCCCC"> okay I</font>

596
00:27:54,510 --> 00:27:59,379
see we can we can improve that more so

597
00:27:57,610 --> 00:28:02,860
yeah if you<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> help</font><font color="#CCCCCC"> just go to</font>

598
00:27:59,380 --> 00:28:06,360
hog-tie served our community<font color="#E5E5E5"> and you</font>

599
00:28:02,860 --> 00:28:10,419
<font color="#E5E5E5">will find how</font><font color="#CCCCCC"> to how to</font><font color="#E5E5E5"> contact us and</font>

600
00:28:06,360 --> 00:28:14,740
we we can<font color="#CCCCCC"> work together</font><font color="#E5E5E5"> the others bunch</font>

601
00:28:10,420 --> 00:28:18,340
of<font color="#E5E5E5"> links those also rust bindings Alex</font>

602
00:28:14,740 --> 00:28:20,770
had a talk<font color="#E5E5E5"> today afternoon so you</font><font color="#CCCCCC"> search</font>

603
00:28:18,340 --> 00:28:22,030
for FOSDEM<font color="#E5E5E5"> 2019 profiling rust</font><font color="#CCCCCC"> you</font>

604
00:28:20,770 --> 00:28:44,440
should find out presentation it was

605
00:28:22,030 --> 00:28:47,620
<font color="#E5E5E5">pretty cool</font><font color="#CCCCCC"> okay thank you so that</font>

606
00:28:44,440 --> 00:28:49,540
depends creating<font color="#E5E5E5"> new event club of</font>

607
00:28:47,620 --> 00:28:52,570
having ability to create<font color="#E5E5E5"> a new event</font>

608
00:28:49,540 --> 00:28:54,730
class<font color="#E5E5E5"> in the other language might be</font>

609
00:28:52,570 --> 00:28:56,230
quite<font color="#CCCCCC"> critical</font><font color="#E5E5E5"> but assuming</font><font color="#CCCCCC"> that you</font>

610
00:28:54,730 --> 00:29:00,220
already<font color="#E5E5E5"> have all the event classes</font>

611
00:28:56,230 --> 00:29:02,650
<font color="#CCCCCC">defined in your</font><font color="#E5E5E5"> C or C++ code base and</font>

612
00:29:00,220 --> 00:29:04,240
you run it<font color="#E5E5E5"> your other language on top of</font>

613
00:29:02,650 --> 00:29:06,730
that it should be fairly easy<font color="#E5E5E5"> because</font>

614
00:29:04,240 --> 00:29:08,650
you<font color="#E5E5E5"> just need to expose so for measuring</font>

615
00:29:06,730 --> 00:29:11,860
time<font color="#E5E5E5"> you need to expose</font><font color="#CCCCCC"> two functions</font>

616
00:29:08,650 --> 00:29:15,160
start and stop<font color="#CCCCCC"> plus maybe start</font><font color="#E5E5E5"> fog</font>

617
00:29:11,860 --> 00:29:18,100
tracer or<font color="#E5E5E5"> star registered listener so</font>

618
00:29:15,160 --> 00:29:21,690
you should be fairly easy<font color="#CCCCCC"> for</font><font color="#E5E5E5"> us</font><font color="#CCCCCC"> I don't</font>

619
00:29:18,100 --> 00:29:43,510
<font color="#CCCCCC">know how much work that</font><font color="#E5E5E5"> was for Alex</font>

620
00:29:21,690 --> 00:29:44,890
<font color="#E5E5E5">yeah</font><font color="#CCCCCC"> and the</font><font color="#E5E5E5"> interface it depends what</font>

621
00:29:43,510 --> 00:29:47,800
you<font color="#CCCCCC"> want to do but if you</font><font color="#E5E5E5"> don't want to</font>

622
00:29:44,890 --> 00:29:54,480
measure time<font color="#E5E5E5"> it should be should</font><font color="#CCCCCC"> be</font>

623
00:29:47,800 --> 00:29:54,480
fairly easy<font color="#CCCCCC"> yeah thank you</font>

624
00:29:56,090 --> 00:29:59,250
[Applause]

