1
00:00:07,610 --> 00:00:13,480
okay guys<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> last talk actually</font>

2
00:00:10,880 --> 00:00:18,039
<font color="#CCCCCC">we are getting in</font>

3
00:00:13,480 --> 00:00:19,720
very scary<font color="#E5E5E5"> lens</font><font color="#CCCCCC"> so the last one</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> gonna</font>

4
00:00:18,039 --> 00:00:21,430
<font color="#E5E5E5">be all do you</font><font color="#CCCCCC"> actually interact</font><font color="#E5E5E5"> with</font>

5
00:00:19,720 --> 00:00:24,310
<font color="#E5E5E5">something which</font><font color="#CCCCCC"> is completely memory</font>

6
00:00:21,430 --> 00:00:27,849
unsafe<font color="#CCCCCC"> or completely crazy as our DMA</font>

7
00:00:24,310 --> 00:00:29,740
<font color="#CCCCCC">and this guy here</font><font color="#E5E5E5"> Andrea is gonna guide</font>

8
00:00:27,849 --> 00:00:32,589
<font color="#CCCCCC">us through</font><font color="#E5E5E5"> all these difficulties</font><font color="#CCCCCC"> and</font>

9
00:00:29,740 --> 00:00:39,280
<font color="#E5E5E5">color cases</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> round of applause for</font>

10
00:00:32,589 --> 00:00:41,410
<font color="#E5E5E5">Andrea right folks thanks for</font><font color="#CCCCCC"> sticking</font>

11
00:00:39,280 --> 00:00:44,350
around by the way that's fantastic<font color="#E5E5E5"> yeah</font>

12
00:00:41,410 --> 00:00:47,260
I'm gonna talk<font color="#CCCCCC"> about some really really</font>

13
00:00:44,350 --> 00:00:50,770
wildly unsafe stuff<font color="#E5E5E5"> let me give you some</font>

14
00:00:47,260 --> 00:00:53,230
context<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> Andrea</font><font color="#CCCCCC"> and I am a PhD</font>

15
00:00:50,770 --> 00:00:56,469
student at ETH Zurich<font color="#E5E5E5"> we do systems</font>

16
00:00:53,230 --> 00:00:58,300
research of various<font color="#CCCCCC"> kinds</font><font color="#E5E5E5"> and at some</font>

17
00:00:56,469 --> 00:01:00,850
point<font color="#E5E5E5"> and it ended up started playing</font>

18
00:00:58,300 --> 00:01:05,018
with high-performance<font color="#E5E5E5"> networking</font><font color="#CCCCCC"> kernel</font>

19
00:01:00,850 --> 00:01:08,800
bypass ways<font color="#E5E5E5"> to do better than what we</font>

20
00:01:05,019 --> 00:01:11,800
can<font color="#E5E5E5"> do with TCP / / kernel</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I</font>

21
00:01:08,800 --> 00:01:13,899
stumbled<font color="#CCCCCC"> upon our</font><font color="#E5E5E5"> DMA which is a pretty</font>

22
00:01:11,800 --> 00:01:18,039
<font color="#CCCCCC">well-known technique</font><font color="#E5E5E5"> at least in the</font>

23
00:01:13,899 --> 00:01:20,160
area<font color="#CCCCCC"> for doing fast</font><font color="#E5E5E5"> networking without</font>

24
00:01:18,039 --> 00:01:24,399
having to<font color="#E5E5E5"> rely on the kernel TCP stack</font>

25
00:01:20,160 --> 00:01:26,348
additionally<font color="#CCCCCC"> our DMA is is an</font>

26
00:01:24,399 --> 00:01:28,360
interesting<font color="#E5E5E5"> piece of software piece of</font>

27
00:01:26,349 --> 00:01:31,360
technology because<font color="#E5E5E5"> it allows writing and</font>

28
00:01:28,360 --> 00:01:33,520
reading from memory<font color="#E5E5E5"> on a different</font>

29
00:01:31,360 --> 00:01:35,140
machine<font color="#E5E5E5"> without that machines CPU</font>

30
00:01:33,520 --> 00:01:39,369
involvement and I'll explain what I mean

31
00:01:35,140 --> 00:01:41,259
by<font color="#CCCCCC"> that so he's a bit of a kind of</font>

32
00:01:39,369 --> 00:01:43,630
<font color="#E5E5E5">executive summary of what</font><font color="#CCCCCC"> the talk is</font>

33
00:01:41,259 --> 00:01:46,840
<font color="#E5E5E5">gonna be about</font><font color="#CCCCCC"> we're gonna</font><font color="#E5E5E5"> see how we</font>

34
00:01:43,630 --> 00:01:49,810
can use<font color="#CCCCCC"> some of</font><font color="#E5E5E5"> the rust ownership and</font>

35
00:01:46,840 --> 00:01:55,330
safety semantics to make DMA look a

36
00:01:49,810 --> 00:01:57,729
<font color="#E5E5E5">little safer than we might expect</font><font color="#CCCCCC"> and he</font>

37
00:01:55,330 --> 00:02:01,270
is<font color="#E5E5E5"> here's the problem so we</font><font color="#CCCCCC"> have</font>

38
00:01:57,729 --> 00:02:04,149
<font color="#CCCCCC">Hardware and desired were has direct</font>

39
00:02:01,270 --> 00:02:06,009
<font color="#CCCCCC">access to</font><font color="#E5E5E5"> program on memory so this is</font>

40
00:02:04,149 --> 00:02:07,929
you know<font color="#CCCCCC"> a vector you have</font><font color="#E5E5E5"> allocated and</font>

41
00:02:06,009 --> 00:02:10,060
there's some<font color="#CCCCCC"> hardware's</font><font color="#E5E5E5"> on network card</font>

42
00:02:07,929 --> 00:02:14,069
that can go and write directly<font color="#E5E5E5"> to it</font>

43
00:02:10,060 --> 00:02:17,110
<font color="#E5E5E5">without the CPU even knowing about it</font><font color="#CCCCCC"> so</font>

44
00:02:14,069 --> 00:02:18,099
this seems like<font color="#E5E5E5"> in contracts with a safe</font>

45
00:02:17,110 --> 00:02:20,890
<font color="#CCCCCC">drop say for us</font>

46
00:02:18,099 --> 00:02:22,420
for example where we know<font color="#E5E5E5"> that we are</font>

47
00:02:20,890 --> 00:02:25,540
guaranteed if you're writing<font color="#E5E5E5"> safe</font><font color="#CCCCCC"> rosco</font>

48
00:02:22,420 --> 00:02:26,829
that we don't have data races

49
00:02:25,540 --> 00:02:31,709
data races<font color="#E5E5E5"> quick</font>

50
00:02:26,830 --> 00:02:34,270
<font color="#CCCCCC">fresher he's defined by the</font><font color="#E5E5E5"> nomicon as</font>

51
00:02:31,710 --> 00:02:36,940
two or more threats concurrently as

52
00:02:34,270 --> 00:02:38,650
<font color="#E5E5E5">accessing a location of memory one of</font>

53
00:02:36,940 --> 00:02:41,470
<font color="#E5E5E5">them is a right someone that is writing</font>

54
00:02:38,650 --> 00:02:43,510
<font color="#CCCCCC">to this location and one of them is not</font>

55
00:02:41,470 --> 00:02:44,770
<font color="#E5E5E5">synchronized this means that essentially</font>

56
00:02:43,510 --> 00:02:46,120
we don't know what the result<font color="#E5E5E5"> of the</font>

57
00:02:44,770 --> 00:02:47,980
operation will be because we<font color="#E5E5E5"> don't know</font>

58
00:02:46,120 --> 00:02:49,840
in which order they will<font color="#E5E5E5"> apply in fact</font>

59
00:02:47,980 --> 00:02:54,609
in<font color="#CCCCCC"> some</font><font color="#E5E5E5"> cases we might see a partial</font>

60
00:02:49,840 --> 00:02:57,610
right<font color="#CCCCCC"> in the because we end up reading</font>

61
00:02:54,610 --> 00:03:01,780
the memory location midway through the

62
00:02:57,610 --> 00:03:03,460
<font color="#E5E5E5">right operation so scary stuff and now</font>

63
00:03:01,780 --> 00:03:06,190
we are also talking<font color="#E5E5E5"> about not even just</font>

64
00:03:03,460 --> 00:03:08,770
<font color="#E5E5E5">two threads but even a thread on</font><font color="#CCCCCC"> a CPU</font>

65
00:03:06,190 --> 00:03:10,480
<font color="#E5E5E5">and a piece of hardware a network</font>

66
00:03:08,770 --> 00:03:13,620
controller that<font color="#E5E5E5"> can go and directly</font>

67
00:03:10,480 --> 00:03:19,000
<font color="#E5E5E5">access memory independently over the CPU</font>

68
00:03:13,620 --> 00:03:21,880
so we'll see how if we<font color="#E5E5E5"> think about</font>

69
00:03:19,000 --> 00:03:24,760
Hardware<font color="#E5E5E5"> operations as a threat of</font>

70
00:03:21,880 --> 00:03:27,700
control as if it was another<font color="#E5E5E5"> threat in</font>

71
00:03:24,760 --> 00:03:29,980
on the<font color="#E5E5E5"> CPU we can use rust ownership</font>

72
00:03:27,700 --> 00:03:34,720
semantics<font color="#E5E5E5"> to make this look a little</font>

73
00:03:29,980 --> 00:03:36,579
safer<font color="#E5E5E5"> all right so the leverage</font>

74
00:03:34,720 --> 00:03:39,220
ownership<font color="#E5E5E5"> and this will allow</font><font color="#CCCCCC"> us to</font>

75
00:03:36,580 --> 00:03:42,459
prevent data<font color="#CCCCCC"> races between</font><font color="#E5E5E5"> CPU and</font>

76
00:03:39,220 --> 00:03:44,920
<font color="#CCCCCC">Hardware so right let's have a</font><font color="#E5E5E5"> look at</font>

77
00:03:42,459 --> 00:03:47,140
what our DMA is in fact I'm<font color="#E5E5E5"> gonna talk</font>

78
00:03:44,920 --> 00:03:49,988
about specifically<font color="#E5E5E5"> IB verbs which is a</font>

79
00:03:47,140 --> 00:03:54,070
pretty standard<font color="#E5E5E5"> interface for our DMA</font>

80
00:03:49,989 --> 00:03:58,150
<font color="#CCCCCC">hardware and it already may stands</font><font color="#E5E5E5"> for</font>

81
00:03:54,070 --> 00:04:02,739
again<font color="#E5E5E5"> remote direct memory access and IB</font>

82
00:03:58,150 --> 00:04:05,560
verbs<font color="#CCCCCC"> is the library</font><font color="#E5E5E5"> that lets user</font>

83
00:04:02,739 --> 00:04:08,310
space code<font color="#E5E5E5"> interact with our DMA</font>

84
00:04:05,560 --> 00:04:14,350
<font color="#CCCCCC">Hardware to do</font><font color="#E5E5E5"> remote memory operations</font>

85
00:04:08,310 --> 00:04:16,630
<font color="#E5E5E5">so</font><font color="#CCCCCC"> is a-- is a simple scheme of what</font>

86
00:04:14,350 --> 00:04:18,548
what's<font color="#E5E5E5"> going on we have to compute</font><font color="#CCCCCC"> notes</font>

87
00:04:16,630 --> 00:04:20,469
they are connected by<font color="#E5E5E5"> maybe some</font>

88
00:04:18,548 --> 00:04:23,950
<font color="#E5E5E5">infinite by network even TCP works these</font>

89
00:04:20,470 --> 00:04:28,350
<font color="#CCCCCC">days and there is</font><font color="#E5E5E5"> a program running on</font>

90
00:04:23,950 --> 00:04:30,219
both a network<font color="#CCCCCC"> NIC</font><font color="#E5E5E5"> a network card</font>

91
00:04:28,350 --> 00:04:33,100
<font color="#CCCCCC">connected</font><font color="#E5E5E5"> to both</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> connects them</font>

92
00:04:30,220 --> 00:04:35,500
<font color="#E5E5E5">together and with argument we can do</font>

93
00:04:33,100 --> 00:04:37,660
things<font color="#CCCCCC"> like the following</font><font color="#E5E5E5"> the CPU can</font>

94
00:04:35,500 --> 00:04:40,210
tell the neck here's a buffer the shaded

95
00:04:37,660 --> 00:04:40,750
area<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> Left</font><font color="#E5E5E5"> please go and grab it</font>

96
00:04:40,210 --> 00:04:43,359
<font color="#CCCCCC">from my</font>

97
00:04:40,750 --> 00:04:45,550
memory<font color="#E5E5E5"> don't ask me about it</font><font color="#CCCCCC"> anymore</font><font color="#E5E5E5"> and</font>

98
00:04:43,360 --> 00:04:48,670
going<font color="#CCCCCC"> write it into the</font><font color="#E5E5E5"> remote process</font>

99
00:04:45,550 --> 00:04:50,620
memory directly<font color="#E5E5E5"> and as you can see</font><font color="#CCCCCC"> no to</font>

100
00:04:48,670 --> 00:04:52,690
here is the recipient of this operation

101
00:04:50,620 --> 00:04:54,970
<font color="#E5E5E5">and has no control over this</font>

102
00:04:52,690 --> 00:04:56,469
the CPU is not involved at all<font color="#CCCCCC"> and this</font>

103
00:04:54,970 --> 00:04:57,940
<font color="#E5E5E5">is really interesting</font><font color="#CCCCCC"> for a some high</font>

104
00:04:56,470 --> 00:05:00,940
performance<font color="#CCCCCC"> work because this means that</font>

105
00:04:57,940 --> 00:05:04,120
we<font color="#E5E5E5"> can do networking</font><font color="#CCCCCC"> without having to</font>

106
00:05:00,940 --> 00:05:06,880
spend any<font color="#E5E5E5"> CPU cycles on though of</font><font color="#CCCCCC"> course</font>

107
00:05:04,120 --> 00:05:09,400
<font color="#CCCCCC">these from you know arrest programs with</font>

108
00:05:06,880 --> 00:05:12,370
<font color="#E5E5E5">perspective is pretty scary</font><font color="#CCCCCC"> we have some</font>

109
00:05:09,400 --> 00:05:15,880
some buffers in memory that<font color="#CCCCCC"> are being</font>

110
00:05:12,370 --> 00:05:17,620
written<font color="#CCCCCC"> in red</font><font color="#E5E5E5"> by something that's not</font>

111
00:05:15,880 --> 00:05:20,560
<font color="#E5E5E5">even another further control</font><font color="#CCCCCC"> it's just</font>

112
00:05:17,620 --> 00:05:22,750
just<font color="#E5E5E5"> some hardware so of course the</font>

113
00:05:20,560 --> 00:05:25,600
opposite might be true as<font color="#E5E5E5"> well the CPU</font>

114
00:05:22,750 --> 00:05:28,240
may say here's a buffer<font color="#E5E5E5"> it will register</font>

115
00:05:25,600 --> 00:05:30,280
it<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the neck and</font><font color="#E5E5E5"> say</font><font color="#CCCCCC"> here's</font><font color="#E5E5E5"> where</font>

116
00:05:28,240 --> 00:05:32,950
you can<font color="#E5E5E5"> write in data that comes from</font>

117
00:05:30,280 --> 00:05:34,479
from somewhere else<font color="#E5E5E5"> and we can have an</font>

118
00:05:32,950 --> 00:05:37,270
operation that rights for example from

119
00:05:34,480 --> 00:05:40,410
<font color="#E5E5E5">node 2 to node 1 without the CPU being</font>

120
00:05:37,270 --> 00:05:43,330
involved and there's at all<font color="#CCCCCC"> alright so I</font>

121
00:05:40,410 --> 00:05:46,450
lied a little<font color="#E5E5E5"> bit of course computers</font>

122
00:05:43,330 --> 00:05:49,180
are complicated and there is not<font color="#CCCCCC"> just</font>

123
00:05:46,450 --> 00:05:50,890
<font color="#CCCCCC">100 space for everything</font><font color="#E5E5E5"> every process</font>

124
00:05:49,180 --> 00:05:53,170
as its own<font color="#CCCCCC"> will roll the space that's</font>

125
00:05:50,890 --> 00:05:57,820
mapped to the physical<font color="#E5E5E5"> address space the</font>

126
00:05:53,170 --> 00:06:00,460
<font color="#E5E5E5">RAM the machine</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so what we need is</font>

127
00:05:57,820 --> 00:06:01,930
<font color="#CCCCCC">for the NIC</font><font color="#E5E5E5"> for the network card to know</font>

128
00:06:00,460 --> 00:06:04,120
this mapping we are saying here's a

129
00:06:01,930 --> 00:06:06,570
buffer<font color="#E5E5E5"> in our application represents on</font>

130
00:06:04,120 --> 00:06:10,660
some data<font color="#E5E5E5"> we need to tell the network</font>

131
00:06:06,570 --> 00:06:14,200
<font color="#E5E5E5">what physical address in run these this</font>

132
00:06:10,660 --> 00:06:17,260
data corresponds to so when we set up

133
00:06:14,200 --> 00:06:19,360
buffers with a<font color="#E5E5E5"> our DMA enabled NIC we</font>

134
00:06:17,260 --> 00:06:21,610
need to tell it<font color="#E5E5E5"> here there's an address</font>

135
00:06:19,360 --> 00:06:24,490
<font color="#E5E5E5">in virtual address base is an address on</font>

136
00:06:21,610 --> 00:06:26,890
<font color="#E5E5E5">your physical RAM go ahead and write and</font>

137
00:06:24,490 --> 00:06:29,320
read it right to it and read from<font color="#CCCCCC"> it</font>

138
00:06:26,890 --> 00:06:31,030
whenever<font color="#E5E5E5"> you</font><font color="#CCCCCC"> want in</font><font color="#E5E5E5"> addition we also</font>

139
00:06:29,320 --> 00:06:34,270
need a way<font color="#CCCCCC"> to for the process</font><font color="#E5E5E5"> to</font>

140
00:06:31,030 --> 00:06:36,159
communicate with the with the NIC

141
00:06:34,270 --> 00:06:38,349
directly and ideally we also want<font color="#CCCCCC"> to</font>

142
00:06:36,160 --> 00:06:39,820
<font color="#E5E5E5">probably not involve the kernel in this</font>

143
00:06:38,350 --> 00:06:42,010
if<font color="#E5E5E5"> you can do this directly from user</font>

144
00:06:39,820 --> 00:06:43,630
space<font color="#E5E5E5"> why not and then it can already</font>

145
00:06:42,010 --> 00:06:46,240
access physical<font color="#E5E5E5"> memory directly we have</font>

146
00:06:43,630 --> 00:06:48,820
determined this so what<font color="#E5E5E5"> you can do here</font>

147
00:06:46,240 --> 00:06:51,310
<font color="#E5E5E5">is allocate a</font><font color="#CCCCCC"> queue which is just a</font>

148
00:06:48,820 --> 00:06:53,540
<font color="#E5E5E5">memory region there</font><font color="#CCCCCC"> we agree upon</font>

149
00:06:51,310 --> 00:06:56,930
<font color="#E5E5E5">between the process and the neck</font>

150
00:06:53,540 --> 00:06:59,030
and in queue operations<font color="#E5E5E5"> in this memory</font>

151
00:06:56,930 --> 00:07:01,400
region where<font color="#E5E5E5"> there Nick can go and grab</font>

152
00:06:59,030 --> 00:07:04,729
<font color="#CCCCCC">it</font><font color="#E5E5E5"> all right</font>

153
00:07:01,400 --> 00:07:07,070
introduction done<font color="#CCCCCC"> we have said we have</font>

154
00:07:04,730 --> 00:07:10,820
<font color="#E5E5E5">these mappings between memory regions</font>

155
00:07:07,070 --> 00:07:14,060
<font color="#E5E5E5">buffers in our process and whatever the</font>

156
00:07:10,820 --> 00:07:15,680
network card understands<font color="#CCCCCC"> these</font><font color="#E5E5E5"> are</font>

157
00:07:14,060 --> 00:07:17,570
encoded as buffer descriptors which are

158
00:07:15,680 --> 00:07:19,580
essentially just<font color="#CCCCCC"> tracts that contain</font>

159
00:07:17,570 --> 00:07:23,780
some<font color="#CCCCCC"> information the pointers and and</font>

160
00:07:19,580 --> 00:07:26,120
the length<font color="#E5E5E5"> and if we want to do for</font>

161
00:07:23,780 --> 00:07:27,950
example<font color="#E5E5E5"> a send operation we want</font><font color="#CCCCCC"> to take</font>

162
00:07:26,120 --> 00:07:30,830
some piece of<font color="#E5E5E5"> memory on the local</font>

163
00:07:27,950 --> 00:07:32,390
machine<font color="#E5E5E5"> and copy</font><font color="#CCCCCC"> to a remote machine we</font>

164
00:07:30,830 --> 00:07:35,090
need<font color="#CCCCCC"> to figure out a couple of</font><font color="#E5E5E5"> things</font>

165
00:07:32,390 --> 00:07:37,610
<font color="#E5E5E5">first of</font><font color="#CCCCCC"> all how</font><font color="#E5E5E5"> to request operations</font>

166
00:07:35,090 --> 00:07:39,469
<font color="#E5E5E5">so as I said there's a queue area where</font>

167
00:07:37,610 --> 00:07:41,180
we<font color="#E5E5E5"> can encode</font><font color="#CCCCCC"> operational requests and</font>

168
00:07:39,470 --> 00:07:43,700
we have two<font color="#E5E5E5"> things there there's a</font>

169
00:07:41,180 --> 00:07:45,050
<font color="#E5E5E5">transmit queue which represents the</font>

170
00:07:43,700 --> 00:07:46,490
operation that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> requests</font><font color="#E5E5E5"> that</font>

171
00:07:45,050 --> 00:07:49,670
they are<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to do and we have a</font>

172
00:07:46,490 --> 00:07:52,400
completion queue which is the list of

173
00:07:49,670 --> 00:07:54,290
<font color="#E5E5E5">things</font><font color="#CCCCCC"> that have completed so the card</font>

174
00:07:52,400 --> 00:07:56,479
whenever<font color="#E5E5E5"> it completes an operation will</font>

175
00:07:54,290 --> 00:07:58,910
in queue something in<font color="#E5E5E5"> that list to let</font>

176
00:07:56,480 --> 00:08:00,530
us know that<font color="#CCCCCC"> it's done</font><font color="#E5E5E5"> this is of course</font>

177
00:07:58,910 --> 00:08:02,630
fully a synchronous which is<font color="#E5E5E5"> also one of</font>

178
00:08:00,530 --> 00:08:05,299
<font color="#E5E5E5">their really cool properties of working</font>

179
00:08:02,630 --> 00:08:09,230
with a<font color="#E5E5E5"> system</font><font color="#CCCCCC"> like this so let's</font><font color="#E5E5E5"> say we</font>

180
00:08:05,300 --> 00:08:12,170
want to send a piece of data we<font color="#E5E5E5"> nq-- the</font>

181
00:08:09,230 --> 00:08:15,590
operation request the this will<font color="#E5E5E5"> be</font>

182
00:08:12,170 --> 00:08:16,850
picked up by<font color="#E5E5E5"> by the neck</font><font color="#CCCCCC"> maybe we Inc</font>

183
00:08:15,590 --> 00:08:18,469
you<font color="#E5E5E5"> another one we can</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> this a</font>

184
00:08:16,850 --> 00:08:21,740
synchronously don't have to wait<font color="#E5E5E5"> for the</font>

185
00:08:18,470 --> 00:08:25,880
operations<font color="#CCCCCC"> to complete and then at its</font>

186
00:08:21,740 --> 00:08:28,520
<font color="#CCCCCC">laser lipase the RDI main hardware can</font>

187
00:08:25,880 --> 00:08:30,200
go and grab<font color="#CCCCCC"> it perform the operation so</font>

188
00:08:28,520 --> 00:08:32,030
right<font color="#CCCCCC"> go and read directly from our</font>

189
00:08:30,200 --> 00:08:34,429
memory write it on the remote machine

190
00:08:32,030 --> 00:08:36,589
<font color="#E5E5E5">memory and once it's done it's gonna in</font>

191
00:08:34,429 --> 00:08:39,530
<font color="#E5E5E5">queue a completion so it's gonna say</font>

192
00:08:36,590 --> 00:08:41,660
yeah<font color="#E5E5E5"> we're done with that</font><font color="#CCCCCC"> as you</font><font color="#E5E5E5"> can see</font>

193
00:08:39,530 --> 00:08:42,799
we have a pointer to the descriptor<font color="#CCCCCC"> that</font>

194
00:08:41,659 --> 00:08:44,930
represents the piece of data that<font color="#CCCCCC"> we</font>

195
00:08:42,799 --> 00:08:51,050
were<font color="#E5E5E5"> interesting in working with all</font>

196
00:08:44,930 --> 00:08:55,130
right<font color="#CCCCCC"> there is a converse to this which</font>

197
00:08:51,050 --> 00:08:58,010
<font color="#CCCCCC">is</font><font color="#E5E5E5"> how do we receive data from somebody</font>

198
00:08:55,130 --> 00:09:00,170
else<font color="#E5E5E5"> we need to</font><font color="#CCCCCC"> tell Hardware where to</font>

199
00:08:58,010 --> 00:09:02,420
put the<font color="#E5E5E5"> data that comes in</font><font color="#CCCCCC"> right and so</font>

200
00:09:00,170 --> 00:09:05,660
what we do is we have a list of what we

201
00:09:02,420 --> 00:09:07,069
call posted buffers<font color="#CCCCCC"> these are just areas</font>

202
00:09:05,660 --> 00:09:09,050
<font color="#CCCCCC">of</font><font color="#E5E5E5"> memory</font>

203
00:09:07,070 --> 00:09:12,200
we decided that<font color="#CCCCCC"> are useful for receiving</font>

204
00:09:09,050 --> 00:09:13,849
data from from somewhere<font color="#CCCCCC"> else so we say</font>

205
00:09:12,200 --> 00:09:15,470
<font color="#E5E5E5">okay let's</font><font color="#CCCCCC"> post a</font><font color="#E5E5E5"> couple of buffers</font>

206
00:09:13,850 --> 00:09:17,990
<font color="#CCCCCC">because we're expecting to</font><font color="#E5E5E5"> receive data</font>

207
00:09:15,470 --> 00:09:19,850
from somebody else<font color="#CCCCCC"> and whenever the</font><font color="#E5E5E5"> NIC</font>

208
00:09:17,990 --> 00:09:21,290
receives<font color="#CCCCCC"> information it doesn't</font><font color="#E5E5E5"> have to</font>

209
00:09:19,850 --> 00:09:22,670
consult<font color="#E5E5E5"> us anymore because we</font><font color="#CCCCCC"> already</font>

210
00:09:21,290 --> 00:09:25,819
told them<font color="#E5E5E5"> where to</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> and write</font><font color="#CCCCCC"> the data</font>

211
00:09:22,670 --> 00:09:27,650
so<font color="#E5E5E5"> the CPU is not involved again</font><font color="#CCCCCC"> it's</font>

212
00:09:25,820 --> 00:09:30,320
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> grab the first post buffer</font>

213
00:09:27,650 --> 00:09:33,290
that's<font color="#CCCCCC"> available make the right into our</font>

214
00:09:30,320 --> 00:09:35,720
memory<font color="#E5E5E5"> and then post a piece of</font>

215
00:09:33,290 --> 00:09:38,270
information<font color="#E5E5E5"> on the receive queue</font><font color="#CCCCCC"> it's</font>

216
00:09:35,720 --> 00:09:41,090
<font color="#CCCCCC">going to say okay</font><font color="#E5E5E5"> that's done all right</font>

217
00:09:38,270 --> 00:09:44,439
so we have<font color="#CCCCCC"> a send we have a receive but</font>

218
00:09:41,090 --> 00:09:51,890
that sounds like a roughly normal

219
00:09:44,440 --> 00:09:55,400
messaging messaging system what's<font color="#E5E5E5"> next</font>

220
00:09:51,890 --> 00:09:58,730
<font color="#CCCCCC">is it's kind of tricky to use these</font>

221
00:09:55,400 --> 00:10:02,180
api's directly so the<font color="#E5E5E5"> IB</font><font color="#CCCCCC"> Versa vir C</font>

222
00:09:58,730 --> 00:10:05,750
bays are pretty<font color="#E5E5E5"> low level so</font><font color="#CCCCCC"> claude in</font>

223
00:10:02,180 --> 00:10:08,150
my group has done some<font color="#CCCCCC"> fantastic work</font><font color="#E5E5E5"> in</font>

224
00:10:05,750 --> 00:10:11,740
wrapping<font color="#E5E5E5"> a lot of these</font><font color="#CCCCCC"> abstractions</font>

225
00:10:08,150 --> 00:10:15,260
into object-oriented<font color="#E5E5E5"> C++ style code and</font>

226
00:10:11,740 --> 00:10:17,720
his<font color="#E5E5E5"> PhD has been on running massive</font>

227
00:10:15,260 --> 00:10:21,110
joint operations on thousands of course

228
00:10:17,720 --> 00:10:24,350
<font color="#E5E5E5">based on this code so let's take a look</font>

229
00:10:21,110 --> 00:10:29,300
<font color="#E5E5E5">at how infinity plus library deals with</font>

230
00:10:24,350 --> 00:10:32,840
this<font color="#E5E5E5"> so we have the buffer</font><font color="#CCCCCC"> obstruction</font>

231
00:10:29,300 --> 00:10:34,609
which just represents the fact that is a

232
00:10:32,840 --> 00:10:37,010
class that<font color="#CCCCCC"> represents the fact</font><font color="#E5E5E5"> that we</font>

233
00:10:34,610 --> 00:10:40,910
have a descriptor and associative memory

234
00:10:37,010 --> 00:10:43,880
<font color="#CCCCCC">way</font><font color="#E5E5E5"> that also we can focus</font><font color="#CCCCCC"> quarks</font>

235
00:10:40,910 --> 00:10:46,610
<font color="#E5E5E5">construct a new one constructing in mean</font>

236
00:10:43,880 --> 00:10:50,300
just just<font color="#E5E5E5"> means a</font><font color="#CCCCCC"> allocate a thousand</font>

237
00:10:46,610 --> 00:10:51,950
bytes and registry with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> card let the</font>

238
00:10:50,300 --> 00:10:53,479
kernel know that we<font color="#E5E5E5"> don't want to for it</font>

239
00:10:51,950 --> 00:10:55,880
<font color="#E5E5E5">to move it do all the bookkeeping</font>

240
00:10:53,480 --> 00:10:58,880
essentially and then once we have that

241
00:10:55,880 --> 00:11:01,280
we<font color="#CCCCCC"> can of course go and take a look</font>

242
00:10:58,880 --> 00:11:03,470
inside<font color="#E5E5E5"> and this should be terrifying</font><font color="#CCCCCC"> to</font>

243
00:11:01,280 --> 00:11:05,600
any self-respecting<font color="#CCCCCC"> grass programmer we</font>

244
00:11:03,470 --> 00:11:10,280
are grabbing a<font color="#E5E5E5"> raw pointer to the</font>

245
00:11:05,600 --> 00:11:12,560
contents of<font color="#E5E5E5"> these of this memory</font><font color="#CCCCCC"> and we</font>

246
00:11:10,280 --> 00:11:14,660
can write and read from<font color="#E5E5E5"> it whenever</font><font color="#CCCCCC"> we</font>

247
00:11:12,560 --> 00:11:17,869
<font color="#CCCCCC">want and if we want to</font><font color="#E5E5E5"> perform</font>

248
00:11:14,660 --> 00:11:19,640
<font color="#CCCCCC">operations on</font><font color="#E5E5E5"> the receiver hand we post</font>

249
00:11:17,870 --> 00:11:21,920
<font color="#E5E5E5">a</font><font color="#CCCCCC"> received</font><font color="#E5E5E5"> buffer</font>

250
00:11:19,640 --> 00:11:24,410
<font color="#E5E5E5">and which means we are getting</font><font color="#CCCCCC"> ready to</font>

251
00:11:21,920 --> 00:11:27,079
receive something<font color="#E5E5E5"> so we need to inform</font>

252
00:11:24,410 --> 00:11:29,660
<font color="#E5E5E5">the neck where to write the data to and</font>

253
00:11:27,079 --> 00:11:32,540
then we just wait<font color="#CCCCCC"> for</font><font color="#E5E5E5"> something to show</font>

254
00:11:29,660 --> 00:11:36,140
we call received<font color="#E5E5E5"> it just will return it</font>

255
00:11:32,540 --> 00:11:38,899
as soon<font color="#E5E5E5"> as something is available</font><font color="#CCCCCC"> Center</font>

256
00:11:36,140 --> 00:11:41,029
side<font color="#E5E5E5"> similarly we inserted a request</font>

257
00:11:38,899 --> 00:11:42,350
token which essentially<font color="#E5E5E5"> represents the</font>

258
00:11:41,029 --> 00:11:44,000
fact that we<font color="#E5E5E5"> are in queueing this</font>

259
00:11:42,350 --> 00:11:47,720
operation and we know we<font color="#E5E5E5"> need to wait</font>

260
00:11:44,000 --> 00:11:50,120
<font color="#CCCCCC">for</font><font color="#E5E5E5"> it to complete and we call send and</font>

261
00:11:47,720 --> 00:11:51,440
then through the request<font color="#E5E5E5"> token we can</font>

262
00:11:50,120 --> 00:11:53,750
essentially determine when the card

263
00:11:51,440 --> 00:11:58,279
notifies us that everything is<font color="#E5E5E5"> being</font>

264
00:11:53,750 --> 00:12:01,690
done cool<font color="#CCCCCC"> all right so we have a</font><font color="#E5E5E5"> C++</font>

265
00:11:58,279 --> 00:12:03,829
library<font color="#E5E5E5"> let's wrap it in rust the</font>

266
00:12:01,690 --> 00:12:07,510
strategy<font color="#E5E5E5"> is a pretty typical one just</font>

267
00:12:03,829 --> 00:12:09,979
use<font color="#E5E5E5"> bind to generate nothing's there's a</font>

268
00:12:07,510 --> 00:12:12,670
<font color="#E5E5E5">talk before was</font><font color="#CCCCCC"> a was a good</font>

269
00:12:09,980 --> 00:12:17,660
<font color="#E5E5E5">introduction to some</font><font color="#CCCCCC"> of the tricky bits</font>

270
00:12:12,670 --> 00:12:21,079
of how to map C++ semantics into

271
00:12:17,660 --> 00:12:23,719
<font color="#E5E5E5">interest</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> class library</font><font color="#CCCCCC"> doesn't make</font>

272
00:12:21,079 --> 00:12:26,239
much use<font color="#CCCCCC"> of like advanced I guess C++</font>

273
00:12:23,720 --> 00:12:29,839
features so it was relatively

274
00:12:26,240 --> 00:12:32,329
<font color="#CCCCCC">straightforward to</font><font color="#E5E5E5"> work with but he's a</font>

275
00:12:29,839 --> 00:12:35,060
<font color="#CCCCCC">straightforward wrapping of of the</font>

276
00:12:32,329 --> 00:12:38,930
buffer class in interest we just

277
00:12:35,060 --> 00:12:41,359
maintain a pointer to the C++ data

278
00:12:38,930 --> 00:12:44,239
structure<font color="#E5E5E5"> we can construct a new one</font>

279
00:12:41,360 --> 00:12:45,980
so just a call through to<font color="#E5E5E5"> C++ and then</font>

280
00:12:44,240 --> 00:12:47,510
maybe<font color="#E5E5E5"> we want to be able to read and</font>

281
00:12:45,980 --> 00:12:50,060
<font color="#CCCCCC">write to it</font><font color="#E5E5E5"> right so we can grab a</font>

282
00:12:47,510 --> 00:12:53,360
mutable reference to the underlying

283
00:12:50,060 --> 00:12:55,069
memory it slice and we can go and read

284
00:12:53,360 --> 00:12:56,480
and write from<font color="#E5E5E5"> it here I can see I'm</font>

285
00:12:55,070 --> 00:12:58,220
showing<font color="#CCCCCC"> drf mute</font>

286
00:12:56,480 --> 00:13:01,250
<font color="#E5E5E5">there is also an implementation</font><font color="#CCCCCC"> for DRF</font>

287
00:12:58,220 --> 00:13:06,410
<font color="#CCCCCC">lets us</font><font color="#E5E5E5"> have multiple immutable</font>

288
00:13:01,250 --> 00:13:07,670
references to<font color="#CCCCCC"> distort alright so if</font>

289
00:13:06,410 --> 00:13:10,579
you've<font color="#CCCCCC"> seen that</font><font color="#E5E5E5"> and you think</font><font color="#CCCCCC"> about</font>

290
00:13:07,670 --> 00:13:12,800
<font color="#E5E5E5">rust ownership semantics and data races</font>

291
00:13:10,579 --> 00:13:14,779
<font color="#E5E5E5">that should be a little worrisome so we</font>

292
00:13:12,800 --> 00:13:17,029
have a way to<font color="#E5E5E5"> construct a buffer we can</font>

293
00:13:14,779 --> 00:13:20,060
grab a reference<font color="#E5E5E5"> to it and read</font><font color="#CCCCCC"> and</font>

294
00:13:17,029 --> 00:13:21,500
<font color="#CCCCCC">write from it but it turns out there's</font>

295
00:13:20,060 --> 00:13:23,750
somebody else<font color="#E5E5E5"> with I can do this right</font>

296
00:13:21,500 --> 00:13:25,060
<font color="#E5E5E5">the network card</font><font color="#CCCCCC"> as soon as we</font>

297
00:13:23,750 --> 00:13:29,449
constructed the buffer and<font color="#CCCCCC"> post today</font>

298
00:13:25,060 --> 00:13:33,439
<font color="#E5E5E5">also has</font><font color="#CCCCCC"> access to this data</font><font color="#E5E5E5"> now that's</font>

299
00:13:29,449 --> 00:13:38,389
the<font color="#E5E5E5"> data race isn't it so here's his own</font>

300
00:13:33,440 --> 00:13:40,519
what about we think of the neck<font color="#E5E5E5"> as just</font>

301
00:13:38,389 --> 00:13:43,940
you know something else<font color="#CCCCCC"> that can have</font>

302
00:13:40,519 --> 00:13:46,910
ownership<font color="#E5E5E5"> of rust memory addresses</font><font color="#CCCCCC"> and</font>

303
00:13:43,940 --> 00:13:51,279
<font color="#E5E5E5">memory locations and what</font><font color="#CCCCCC"> you can do is</font>

304
00:13:46,910 --> 00:13:51,279
we<font color="#E5E5E5"> start out with rust owning the</font>

305
00:13:51,639 --> 00:13:57,170
descriptor<font color="#E5E5E5"> to to the buffer and whenever</font>

306
00:13:55,250 --> 00:13:58,910
we are<font color="#E5E5E5"> ready to in</font><font color="#CCCCCC"> queue it and say</font><font color="#E5E5E5"> okay</font>

307
00:13:57,170 --> 00:14:01,729
we are<font color="#E5E5E5"> gonna perform an operation to it</font>

308
00:13:58,910 --> 00:14:04,550
<font color="#E5E5E5">rather than just saying here's a pointer</font>

309
00:14:01,730 --> 00:14:07,250
to<font color="#E5E5E5"> it to screw it in QA we relinquish</font>

310
00:14:04,550 --> 00:14:09,290
ownership from<font color="#E5E5E5"> the rust side for this</font>

311
00:14:07,250 --> 00:14:11,629
buffer<font color="#E5E5E5"> and so we just like</font><font color="#CCCCCC"> give it to</font>

312
00:14:09,290 --> 00:14:14,290
the neck<font color="#E5E5E5"> and it's gonna vanish from our</font>

313
00:14:11,629 --> 00:14:17,660
rust world<font color="#E5E5E5"> essentially for a little bit</font>

314
00:14:14,290 --> 00:14:19,969
<font color="#CCCCCC">until the car tells us it's done so</font>

315
00:14:17,660 --> 00:14:22,339
until we<font color="#CCCCCC"> are guaranteed that the card is</font>

316
00:14:19,970 --> 00:14:24,709
<font color="#E5E5E5">not</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> try and write or read into it</font>

317
00:14:22,339 --> 00:14:28,189
<font color="#E5E5E5">anymore and when there happens okay then</font>

318
00:14:24,709 --> 00:14:30,349
we<font color="#CCCCCC"> go back</font><font color="#E5E5E5"> and we get on a ship back all</font>

319
00:14:28,189 --> 00:14:34,550
<font color="#CCCCCC">right that's the</font><font color="#E5E5E5"> theory how do you write</font>

320
00:14:30,350 --> 00:14:37,519
<font color="#E5E5E5">this we have the buffer definition as</font>

321
00:14:34,550 --> 00:14:39,920
we've said pretty simple<font color="#E5E5E5"> we construct a</font>

322
00:14:37,519 --> 00:14:43,370
we create an internal function that just

323
00:14:39,920 --> 00:14:46,969
lets us take<font color="#E5E5E5"> a buffer a own type to rust</font>

324
00:14:43,370 --> 00:14:50,300
buffer and make it vanish<font color="#E5E5E5"> as you can see</font>

325
00:14:46,970 --> 00:14:52,610
<font color="#E5E5E5">this call is taking self by value so we</font>

326
00:14:50,300 --> 00:14:57,050
are moving<font color="#E5E5E5"> the buffer in a buffer is not</font>

327
00:14:52,610 --> 00:14:59,689
clone importantly and<font color="#E5E5E5"> whenever we call</font>

328
00:14:57,050 --> 00:15:03,620
<font color="#CCCCCC">into raw the buffer will disappear from</font>

329
00:14:59,689 --> 00:15:05,839
our rust<font color="#E5E5E5"> word</font><font color="#CCCCCC"> after that we have from</font>

330
00:15:03,620 --> 00:15:08,449
raw which is the opposite<font color="#CCCCCC"> way so</font><font color="#E5E5E5"> we are</font>

331
00:15:05,839 --> 00:15:11,750
essentially<font color="#E5E5E5"> reconstructing a typed</font>

332
00:15:08,449 --> 00:15:15,589
buffer in rust from thin air<font color="#E5E5E5"> from from</font>

333
00:15:11,750 --> 00:15:18,740
<font color="#CCCCCC">our row pointer here</font><font color="#E5E5E5"> all right how do we</font>

334
00:15:15,589 --> 00:15:20,600
<font color="#CCCCCC">use that that</font><font color="#E5E5E5"> may be some a little</font><font color="#CCCCCC"> bit</font>

335
00:15:18,740 --> 00:15:23,120
<font color="#E5E5E5">terrifying but at least now we have a</font>

336
00:15:20,600 --> 00:15:24,350
clear boundary of when we as rust

337
00:15:23,120 --> 00:15:27,139
programmers have control of the buffer

338
00:15:24,350 --> 00:15:29,720
or<font color="#E5E5E5"> and when the rest of the</font><font color="#CCCCCC"> world the</font>

339
00:15:27,139 --> 00:15:32,000
hardware<font color="#E5E5E5"> is</font><font color="#CCCCCC"> controllable so for writing</font>

340
00:15:29,720 --> 00:15:34,579
a send oppression for example we want to

341
00:15:32,000 --> 00:15:37,790
be able<font color="#E5E5E5"> to call sin this</font><font color="#CCCCCC"> is a cute pair</font>

342
00:15:34,579 --> 00:15:39,979
is interfaced to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> to the neck and</font>

343
00:15:37,790 --> 00:15:43,969
what we do is have sand which is<font color="#CCCCCC"> as you</font>

344
00:15:39,980 --> 00:15:45,180
<font color="#E5E5E5">notice is not unsafe</font><font color="#CCCCCC"> it will take the</font>

345
00:15:43,970 --> 00:15:47,460
buffer

346
00:15:45,180 --> 00:15:49,099
by value<font color="#E5E5E5"> will take its ownership away so</font>

347
00:15:47,460 --> 00:15:51,210
we are relinquishing<font color="#E5E5E5"> the buffer here and</font>

348
00:15:49,100 --> 00:15:53,190
you'll notice<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the return type</font>

349
00:15:51,210 --> 00:15:56,360
doesn't contain the<font color="#E5E5E5"> buffer anymore so we</font>

350
00:15:53,190 --> 00:15:59,370
are losing track of<font color="#E5E5E5"> the buffer</font><font color="#CCCCCC"> area and</font>

351
00:15:56,360 --> 00:16:01,020
we construct<font color="#CCCCCC"> these request token</font><font color="#E5E5E5"> which</font>

352
00:15:59,370 --> 00:16:02,490
lets us keep<font color="#CCCCCC"> track of what's</font><font color="#E5E5E5"> going on</font>

353
00:16:01,020 --> 00:16:05,520
<font color="#E5E5E5">with the operation</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> doesn't let us</font>

354
00:16:02,490 --> 00:16:07,080
<font color="#CCCCCC">access</font><font color="#E5E5E5"> the buffer at all</font><font color="#CCCCCC"> and we call the</font>

355
00:16:05,520 --> 00:16:09,590
<font color="#CCCCCC">integral function that we defined before</font>

356
00:16:07,080 --> 00:16:12,530
so here the buffer is disappearing into

357
00:16:09,590 --> 00:16:17,580
<font color="#E5E5E5">Nik</font>

358
00:16:12,530 --> 00:16:19,110
<font color="#CCCCCC">nirvana I guess and alright danda we</font>

359
00:16:17,580 --> 00:16:22,170
want to return<font color="#CCCCCC"> something for the user to</font>

360
00:16:19,110 --> 00:16:25,920
<font color="#E5E5E5">be able to get the data back so return</font>

361
00:16:22,170 --> 00:16:27,599
the request<font color="#CCCCCC"> okay cool</font><font color="#E5E5E5"> alright so we've</font>

362
00:16:25,920 --> 00:16:30,510
seen<font color="#E5E5E5"> essentially this operation like</font>

363
00:16:27,600 --> 00:16:32,670
<font color="#CCCCCC">wink you</font><font color="#E5E5E5"> a new operation which is the</font>

364
00:16:30,510 --> 00:16:34,170
<font color="#E5E5E5">equivalent of losing</font><font color="#CCCCCC"> track of the buffer</font>

365
00:16:32,670 --> 00:16:37,589
<font color="#E5E5E5">and then at some point we get a</font>

366
00:16:34,170 --> 00:16:39,420
completion<font color="#E5E5E5"> so how do we</font><font color="#CCCCCC"> handle the</font>

367
00:16:37,590 --> 00:16:40,770
completion once we've done sending<font color="#E5E5E5"> the</font>

368
00:16:39,420 --> 00:16:42,360
buffer we don't have<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to lose</font>

369
00:16:40,770 --> 00:16:44,939
<font color="#E5E5E5">control of it forever</font><font color="#CCCCCC"> because we're</font>

370
00:16:42,360 --> 00:16:46,680
going<font color="#E5E5E5"> to just leak memory over and over</font>

371
00:16:44,940 --> 00:16:48,750
again<font color="#E5E5E5"> once the operation is done we want</font>

372
00:16:46,680 --> 00:16:53,040
<font color="#E5E5E5">control back and the way we do this is</font>

373
00:16:48,750 --> 00:16:56,600
by having<font color="#CCCCCC"> a this</font><font color="#E5E5E5"> request token that's</font>

374
00:16:53,040 --> 00:17:00,120
<font color="#E5E5E5">just an opaque pointer into C++ land and</font>

375
00:16:56,600 --> 00:17:01,710
once the operation<font color="#E5E5E5"> is completed we call</font>

376
00:17:00,120 --> 00:17:02,790
<font color="#E5E5E5">where if you vote call wait until</font>

377
00:17:01,710 --> 00:17:04,740
completed<font color="#E5E5E5"> that's not going to</font><font color="#CCCCCC"> return</font>

378
00:17:02,790 --> 00:17:06,000
until<font color="#CCCCCC"> the operation is completed</font><font color="#E5E5E5"> there</font>

379
00:17:04,740 --> 00:17:08,940
are also a synchronous functions for

380
00:17:06,000 --> 00:17:11,430
this<font color="#CCCCCC"> and once</font><font color="#E5E5E5"> only once the operation is</font>

381
00:17:08,940 --> 00:17:12,930
completed<font color="#E5E5E5"> we'll get back to buffer this</font>

382
00:17:11,430 --> 00:17:14,030
<font color="#E5E5E5">means that we can</font><font color="#CCCCCC"> now reuse it so we</font>

383
00:17:12,930 --> 00:17:15,960
lost<font color="#E5E5E5"> track of it</font><font color="#CCCCCC"> for a little bit</font>

384
00:17:14,030 --> 00:17:18,649
<font color="#E5E5E5">ownership has been transferred to the</font>

385
00:17:15,960 --> 00:17:22,590
argument<font color="#E5E5E5"> order but now it's back</font><font color="#CCCCCC"> to us</font>

386
00:17:18,650 --> 00:17:25,020
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> so have the request token</font><font color="#CCCCCC"> that</font>

387
00:17:22,589 --> 00:17:28,220
<font color="#CCCCCC">we keep</font><font color="#E5E5E5"> track of and note that</font><font color="#CCCCCC"> the</font>

388
00:17:25,020 --> 00:17:31,620
function<font color="#CCCCCC"> again</font><font color="#E5E5E5"> takes ownership of self</font>

389
00:17:28,220 --> 00:17:33,900
<font color="#CCCCCC">and then we wait until completed and</font>

390
00:17:31,620 --> 00:17:38,000
called from raw the<font color="#CCCCCC"> weight</font><font color="#E5E5E5"> we</font>

391
00:17:33,900 --> 00:17:41,340
reconstruct a strictly<font color="#E5E5E5"> typed</font><font color="#CCCCCC"> rest buffer</font>

392
00:17:38,000 --> 00:17:43,470
<font color="#E5E5E5">cool</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> how do we use this</font>

393
00:17:41,340 --> 00:17:45,120
there's a simple example it's probably

394
00:17:43,470 --> 00:17:47,100
not super realistic but should give<font color="#CCCCCC"> you</font>

395
00:17:45,120 --> 00:17:49,020
a kind<font color="#CCCCCC"> of a vague idea of how the API</font>

396
00:17:47,100 --> 00:17:50,760
looks like<font color="#E5E5E5"> so we construct we initialize</font>

397
00:17:49,020 --> 00:17:54,030
all<font color="#CCCCCC"> the global</font>

398
00:17:50,760 --> 00:17:57,090
<font color="#E5E5E5">RDMA initialization</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> let's write</font><font color="#CCCCCC"> a</font>

399
00:17:54,030 --> 00:17:58,289
receiver we construct<font color="#E5E5E5"> a new buffer</font><font color="#CCCCCC"> we</font>

400
00:17:57,090 --> 00:18:00,509
post it

401
00:17:58,289 --> 00:18:02,429
so that the<font color="#E5E5E5"> Nick knows where to write</font>

402
00:18:00,509 --> 00:18:04,529
the data and then we<font color="#E5E5E5"> wait for something</font>

403
00:18:02,429 --> 00:18:06,749
<font color="#CCCCCC">to show up and as you can see whenever</font>

404
00:18:04,529 --> 00:18:09,869
we<font color="#E5E5E5"> actually receive something we get</font>

405
00:18:06,749 --> 00:18:11,549
<font color="#E5E5E5">this</font><font color="#CCCCCC"> received</font><font color="#E5E5E5"> buffer back which is our</font>

406
00:18:09,869 --> 00:18:13,408
buffer the one where we post it before

407
00:18:11,549 --> 00:18:16,289
<font color="#E5E5E5">but importantly between these two calls</font>

408
00:18:13,409 --> 00:18:17,909
<font color="#E5E5E5">will lost control of the buffer sender</font>

409
00:18:16,289 --> 00:18:20,820
is similar<font color="#E5E5E5"> just the other way around</font>

410
00:18:17,909 --> 00:18:24,239
so in<font color="#CCCCCC"> isolate a buffer write some data</font>

411
00:18:20,820 --> 00:18:26,580
<font color="#E5E5E5">into</font><font color="#CCCCCC"> a posted it</font><font color="#E5E5E5"> post it called</font><font color="#CCCCCC"> sent and</font>

412
00:18:24,239 --> 00:18:30,359
here is where<font color="#E5E5E5"> we lose ownership and so</font>

413
00:18:26,580 --> 00:18:32,580
we have no risk<font color="#E5E5E5"> of being able to write</font>

414
00:18:30,359 --> 00:18:34,439
<font color="#CCCCCC">to</font><font color="#E5E5E5"> it while the card is operating on it</font>

415
00:18:32,580 --> 00:18:38,039
and then we wait until it's completed

416
00:18:34,440 --> 00:18:40,679
and<font color="#E5E5E5"> get the ownership back so this is</font>

417
00:18:38,039 --> 00:18:42,779
kind of the the way<font color="#E5E5E5"> we went about this</font>

418
00:18:40,679 --> 00:18:45,450
<font color="#E5E5E5">which is I</font><font color="#CCCCCC"> believe</font><font color="#E5E5E5"> is a</font><font color="#CCCCCC"> it's a</font><font color="#E5E5E5"> kind of a</font>

419
00:18:42,779 --> 00:18:47,399
cool<font color="#CCCCCC"> way</font><font color="#E5E5E5"> to extend the rest ownership</font>

420
00:18:45,450 --> 00:18:49,139
semantics to also<font color="#E5E5E5"> include things that</font>

421
00:18:47,399 --> 00:18:51,119
<font color="#E5E5E5">are not on the CPU anymore it's a</font>

422
00:18:49,139 --> 00:18:54,350
hardware<font color="#E5E5E5"> here's a couple of comments on</font>

423
00:18:51,119 --> 00:18:57,389
<font color="#E5E5E5">things I came across so it's</font><font color="#CCCCCC"> notice the</font>

424
00:18:54,350 --> 00:19:00,379
send operation for example<font color="#CCCCCC"> is this</font>

425
00:18:57,389 --> 00:19:03,059
unsafe block and if you<font color="#E5E5E5"> read the nomicon</font>

426
00:19:00,379 --> 00:19:05,369
<font color="#E5E5E5">unsafe marks the piece of code that's</font>

427
00:19:03,059 --> 00:19:07,678
that's unsafe<font color="#E5E5E5"> where we're doing and safe</font>

428
00:19:05,369 --> 00:19:10,259
operations<font color="#E5E5E5"> and we should be careful so</font>

429
00:19:07,679 --> 00:19:11,850
<font color="#E5E5E5">maybe when we start writing and safe we</font>

430
00:19:10,259 --> 00:19:14,249
are<font color="#E5E5E5"> careful that at the boundaries of</font>

431
00:19:11,850 --> 00:19:17,189
this block we make sure<font color="#CCCCCC"> that everything</font>

432
00:19:14,249 --> 00:19:18,629
is safe again<font color="#CCCCCC"> another</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> the</font>

433
00:19:17,190 --> 00:19:20,460
requester can wait until completed<font color="#E5E5E5"> this</font>

434
00:19:18,629 --> 00:19:23,340
<font color="#E5E5E5">is unsafe block that separates the</font>

435
00:19:20,460 --> 00:19:25,230
unsafe line from safe land unfortunately

436
00:19:23,340 --> 00:19:28,019
if you look<font color="#E5E5E5"> at the unsafe boundary</font>

437
00:19:25,230 --> 00:19:29,879
things are complicated so when<font color="#CCCCCC"> we when</font>

438
00:19:28,019 --> 00:19:33,720
every call<font color="#E5E5E5"> sent we relinquish the buffer</font>

439
00:19:29,879 --> 00:19:36,379
<font color="#E5E5E5">this is a safe function whenever</font><font color="#CCCCCC"> we call</font>

440
00:19:33,720 --> 00:19:38,970
wait until completed we get it back but

441
00:19:36,379 --> 00:19:41,309
so we know<font color="#CCCCCC"> that things are going to</font><font color="#E5E5E5"> work</font>

442
00:19:38,970 --> 00:19:44,909
out as long as<font color="#E5E5E5"> only these two functions</font>

443
00:19:41,309 --> 00:19:46,830
exist<font color="#E5E5E5"> but wait what if what</font><font color="#CCCCCC"> if we have</font>

444
00:19:44,909 --> 00:19:48,210
<font color="#E5E5E5">another operation that we implement</font>

445
00:19:46,830 --> 00:19:49,649
<font color="#E5E5E5">somebody else comes in doesn't really</font>

446
00:19:48,210 --> 00:19:51,809
<font color="#CCCCCC">realize what's going</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> and they</font>

447
00:19:49,649 --> 00:19:53,969
implement clone<font color="#E5E5E5"> for request token this</font>

448
00:19:51,809 --> 00:19:55,289
<font color="#E5E5E5">means that we can arbitrarily duplicate</font>

449
00:19:53,970 --> 00:19:57,570
request token as many times<font color="#E5E5E5"> as we want</font>

450
00:19:55,289 --> 00:19:59,879
<font color="#CCCCCC">and get back as many</font><font color="#E5E5E5"> copies of the same</font>

451
00:19:57,570 --> 00:20:01,080
<font color="#CCCCCC">buffer as we want and now okay</font><font color="#E5E5E5"> we are</font>

452
00:19:59,879 --> 00:20:03,119
<font color="#E5E5E5">back to the start right data races</font>

453
00:20:01,080 --> 00:20:06,599
galore<font color="#E5E5E5"> in fact undefined behavior</font>

454
00:20:03,119 --> 00:20:08,759
because multiple mutable references also

455
00:20:06,599 --> 00:20:11,399
<font color="#CCCCCC">I lied</font>

456
00:20:08,759 --> 00:20:11,670
there is another bug in<font color="#E5E5E5"> this slide which</font>

457
00:20:11,399 --> 00:20:16,530
is

458
00:20:11,670 --> 00:20:18,360
this<font color="#CCCCCC"> I just added a multiple reference</font>

459
00:20:16,530 --> 00:20:20,430
to that<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that just makes</font><font color="#E5E5E5"> everything</font>

460
00:20:18,360 --> 00:20:23,399
and safe again<font color="#E5E5E5"> because that</font><font color="#CCCCCC"> means we can</font>

461
00:20:20,430 --> 00:20:26,970
generate arbitrary numbers of buffers

462
00:20:23,400 --> 00:20:28,580
<font color="#CCCCCC">out of a single</font><font color="#E5E5E5"> request token</font><font color="#CCCCCC"> oops so</font>

463
00:20:26,970 --> 00:20:31,680
what's the<font color="#E5E5E5"> deal here</font>

464
00:20:28,580 --> 00:20:33,750
safety is<font color="#E5E5E5"> non-local all the reasoning we</font>

465
00:20:31,680 --> 00:20:35,780
need to do to make something safe to

466
00:20:33,750 --> 00:20:38,850
wrap an unsafe library with safe code

467
00:20:35,780 --> 00:20:40,620
requires global reasoning<font color="#E5E5E5"> we need to</font>

468
00:20:38,850 --> 00:20:42,330
<font color="#CCCCCC">think about all the other way so we</font>

469
00:20:40,620 --> 00:20:43,919
<font color="#E5E5E5">interact with</font><font color="#CCCCCC"> that piece of data</font><font color="#E5E5E5"> we</font>

470
00:20:42,330 --> 00:20:47,250
cannot just think<font color="#E5E5E5"> about it from</font><font color="#CCCCCC"> a</font>

471
00:20:43,920 --> 00:20:49,170
certain<font color="#CCCCCC"> point of view so Rita nomicon</font>

472
00:20:47,250 --> 00:20:52,080
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> a fantastic explanation on why</font>

473
00:20:49,170 --> 00:20:54,440
this happens<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> really well done and</font>

474
00:20:52,080 --> 00:20:57,990
<font color="#E5E5E5">it's really complete as a good example</font>

475
00:20:54,440 --> 00:21:00,510
<font color="#CCCCCC">but here's this</font><font color="#E5E5E5"> summary to be able to</font>

476
00:20:57,990 --> 00:21:02,430
<font color="#E5E5E5">write safe abstractions we</font><font color="#CCCCCC"> introduced</font>

477
00:21:00,510 --> 00:21:05,940
<font color="#CCCCCC">invariance</font><font color="#E5E5E5"> for example that something is</font>

478
00:21:02,430 --> 00:21:08,040
<font color="#E5E5E5">only owned by us or by endemic and then</font>

479
00:21:05,940 --> 00:21:11,910
we rely on these invariants<font color="#E5E5E5"> to write</font>

480
00:21:08,040 --> 00:21:15,180
<font color="#E5E5E5">nice to use stuff in in user space and</font>

481
00:21:11,910 --> 00:21:17,670
in say for<font color="#CCCCCC"> us code unfortunately safety</font>

482
00:21:15,180 --> 00:21:20,910
depends on all<font color="#E5E5E5"> of these environments</font>

483
00:21:17,670 --> 00:21:25,140
<font color="#E5E5E5">that we have introduced anywhere in our</font>

484
00:21:20,910 --> 00:21:27,120
unsafe and<font color="#E5E5E5"> safe for us code base</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> what</font>

485
00:21:25,140 --> 00:21:29,010
can<font color="#E5E5E5"> we do about this we cannot really</font>

486
00:21:27,120 --> 00:21:31,860
keep<font color="#E5E5E5"> track of all the things that happen</font>

487
00:21:29,010 --> 00:21:34,740
<font color="#CCCCCC">there</font><font color="#E5E5E5"> all program so just use ownership</font>

488
00:21:31,860 --> 00:21:37,530
and privacy<font color="#E5E5E5"> so private members to limit</font>

489
00:21:34,740 --> 00:21:40,260
the scope<font color="#E5E5E5"> to</font><font color="#CCCCCC"> which these invariants</font>

490
00:21:37,530 --> 00:21:46,350
apply to so the only thing the<font color="#CCCCCC"> ax with</font>

491
00:21:40,260 --> 00:21:50,160
buffer in our API<font color="#E5E5E5"> is is this function I</font>

492
00:21:46,350 --> 00:21:52,590
bro and<font color="#E5E5E5"> the only entity</font><font color="#CCCCCC"> that can go and</font>

493
00:21:50,160 --> 00:21:54,720
do things with the buffer is our wrapper

494
00:21:52,590 --> 00:21:56,850
<font color="#CCCCCC">if you had hotter and</font><font color="#E5E5E5"> three points to</font>

495
00:21:54,720 --> 00:21:58,260
this we would<font color="#E5E5E5"> be in trouble</font><font color="#CCCCCC"> because we</font>

496
00:21:56,850 --> 00:22:00,600
would need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> think about all of</font><font color="#E5E5E5"> them</font>

497
00:21:58,260 --> 00:22:03,300
every time we'd make any<font color="#CCCCCC"> avi change so</font>

498
00:22:00,600 --> 00:22:07,020
try to limit<font color="#E5E5E5"> the</font><font color="#CCCCCC"> scope of your</font><font color="#E5E5E5"> of your</font>

499
00:22:03,300 --> 00:22:10,230
<font color="#E5E5E5">expectations and yeah I think that's</font>

500
00:22:07,020 --> 00:22:16,770
that's<font color="#E5E5E5"> pretty much it so a cool way</font><font color="#CCCCCC"> to</font>

501
00:22:10,230 --> 00:22:17,870
wrap<font color="#CCCCCC"> c++</font><font color="#E5E5E5"> unsafe</font><font color="#CCCCCC"> Galore a hard email</font>

502
00:22:16,770 --> 00:22:20,580
library

503
00:22:17,870 --> 00:22:24,860
<font color="#CCCCCC">helped us</font><font color="#E5E5E5"> do it in in a kind</font><font color="#CCCCCC"> of nice way</font>

504
00:22:20,580 --> 00:22:26,539
<font color="#E5E5E5">and as a final word</font><font color="#CCCCCC"> i just gonna remind</font>

505
00:22:24,860 --> 00:22:29,658
all of you that the nomicon<font color="#CCCCCC"> is fantastic</font>

506
00:22:26,539 --> 00:22:31,250
<font color="#CCCCCC">the quality</font><font color="#E5E5E5"> of the explanation is really</font>

507
00:22:29,659 --> 00:22:32,960
improved<font color="#CCCCCC"> over the</font><font color="#E5E5E5"> years</font><font color="#CCCCCC"> and I strongly</font>

508
00:22:31,250 --> 00:22:34,519
<font color="#CCCCCC">recommend reading it cover-to-cover</font><font color="#E5E5E5"> if</font>

509
00:22:32,960 --> 00:22:36,140
you're doing<font color="#E5E5E5"> any unsafe</font><font color="#CCCCCC"> thrust right</font>

510
00:22:34,519 --> 00:22:52,549
that's it up for questions

511
00:22:36,140 --> 00:22:55,460
thank you right the question<font color="#CCCCCC"> is whether</font>

512
00:22:52,549 --> 00:22:57,379
the<font color="#CCCCCC"> C++ in fact library underneath is a</font>

513
00:22:55,460 --> 00:23:00,649
synchronous yes it's really<font color="#E5E5E5"> very much</font>

514
00:22:57,380 --> 00:23:03,110
designed<font color="#E5E5E5"> to be so you really want to</font>

515
00:23:00,649 --> 00:23:04,789
post<font color="#CCCCCC"> so posting an operation isn't</font><font color="#E5E5E5"> on a</font>

516
00:23:03,110 --> 00:23:07,939
secret<font color="#E5E5E5"> operation because it's very cheap</font>

517
00:23:04,789 --> 00:23:09,379
<font color="#E5E5E5">but the operation itself will happen a</font>

518
00:23:07,940 --> 00:23:11,299
synchronously under the covers<font color="#E5E5E5"> in fact</font>

519
00:23:09,380 --> 00:23:15,169
you're<font color="#CCCCCC"> not even aware of it</font><font color="#E5E5E5"> so in that</font>

520
00:23:11,299 --> 00:23:17,480
sense is really<font color="#CCCCCC"> a synchronous</font><font color="#E5E5E5"> the you've</font>

521
00:23:15,169 --> 00:23:19,190
seen blocking<font color="#E5E5E5"> to wait for things that's</font>

522
00:23:17,480 --> 00:23:20,659
not how you would<font color="#E5E5E5"> actually write an</font>

523
00:23:19,190 --> 00:23:22,760
application<font color="#CCCCCC"> you typically</font><font color="#E5E5E5"> see what has</font>

524
00:23:20,659 --> 00:23:24,860
shown up since<font color="#E5E5E5"> the last time you looked</font>

525
00:23:22,760 --> 00:23:26,720
in<font color="#CCCCCC"> a</font><font color="#E5E5E5"> synchronous fashion a bit of</font>

526
00:23:24,860 --> 00:23:28,639
possibly<font color="#E5E5E5"> like a non-blocking socket</font>

527
00:23:26,720 --> 00:23:31,419
might look like<font color="#E5E5E5"> it really depends</font><font color="#CCCCCC"> then</font>

528
00:23:28,639 --> 00:23:31,418
<font color="#E5E5E5">on</font><font color="#CCCCCC"> application design</font>

529
00:23:51,570 --> 00:23:55,110
that's<font color="#CCCCCC"> very</font><font color="#E5E5E5"> good question</font><font color="#CCCCCC"> so do we</font>

530
00:23:53,550 --> 00:23:59,040
<font color="#CCCCCC">really</font><font color="#E5E5E5"> need to make</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> completely</font>

531
00:23:55,110 --> 00:24:01,080
disappear from safe rust<font color="#CCCCCC"> when we give</font><font color="#E5E5E5"> it</font>

532
00:23:59,040 --> 00:24:03,389
out<font color="#CCCCCC"> because if we keep it private</font><font color="#E5E5E5"> then</font>

533
00:24:01,080 --> 00:24:05,939
nobody has<font color="#E5E5E5"> access to it anyways</font><font color="#CCCCCC"> that's</font>

534
00:24:03,390 --> 00:24:07,980
fair<font color="#CCCCCC"> there was a choice made out of</font>

535
00:24:05,940 --> 00:24:11,250
mostly<font color="#E5E5E5"> convenience with interacting or</font>

536
00:24:07,980 --> 00:24:12,900
the C++ API<font color="#E5E5E5"> but I guess the strong point</font>

537
00:24:11,250 --> 00:24:15,060
here you can totally do what you just

538
00:24:12,900 --> 00:24:18,570
said as long<font color="#CCCCCC"> as you think about</font>

539
00:24:15,060 --> 00:24:20,340
precisely where your boundaries<font color="#E5E5E5"> and as</font>

540
00:24:18,570 --> 00:24:21,510
long<font color="#CCCCCC"> as your boundaries consistent among</font>

541
00:24:20,340 --> 00:24:36,389
all there were other<font color="#E5E5E5"> places where you do</font>

542
00:24:21,510 --> 00:24:38,820
<font color="#E5E5E5">this yeah that's that's</font><font color="#CCCCCC"> a totally good</font>

543
00:24:36,390 --> 00:24:42,690
<font color="#E5E5E5">point so if</font><font color="#CCCCCC"> you're what is saying is</font>

544
00:24:38,820 --> 00:24:44,399
<font color="#CCCCCC">that doing</font><font color="#E5E5E5"> that would allow us to fix</font>

545
00:24:42,690 --> 00:24:47,190
one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the problems so the immutable</font>

546
00:24:44,400 --> 00:24:50,250
reference to the buffer<font color="#E5E5E5"> if the</font>

547
00:24:47,190 --> 00:24:52,440
<font color="#E5E5E5">underlying</font><font color="#CCCCCC"> FFI buffer wasn't clone</font><font color="#E5E5E5"> then</font>

548
00:24:50,250 --> 00:24:55,170
<font color="#E5E5E5">that would provide the guarantee</font><font color="#CCCCCC"> for us</font>

549
00:24:52,440 --> 00:24:56,400
<font color="#CCCCCC">I believe it</font><font color="#E5E5E5"> is by default unfortunately</font>

550
00:24:55,170 --> 00:25:02,220
<font color="#E5E5E5">but that's a</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> good point</font>

551
00:24:56,400 --> 00:25:04,950
so the<font color="#E5E5E5"> Benjen</font><font color="#CCCCCC"> bindings are good but</font>

552
00:25:02,220 --> 00:25:06,570
require a lot of care determining which

553
00:25:04,950 --> 00:25:10,200
one<font color="#CCCCCC"> of the things that</font><font color="#E5E5E5"> punch and things</font>

554
00:25:06,570 --> 00:25:14,210
are safe<font color="#CCCCCC"> in fact are so by default I</font>

555
00:25:10,200 --> 00:25:16,560
would recommend<font color="#CCCCCC"> no relying on benjin's</font>

556
00:25:14,210 --> 00:25:18,440
expectation of what it has written it

557
00:25:16,560 --> 00:25:20,730
will probably<font color="#E5E5E5"> try and generate a clone</font>

558
00:25:18,440 --> 00:25:23,370
implementation for you<font color="#E5E5E5"> even though it's</font>

559
00:25:20,730 --> 00:25:28,820
totally unsafe to do so all right<font color="#E5E5E5"> very</font>

560
00:25:23,370 --> 00:25:28,820
<font color="#E5E5E5">good question yeah let's go</font>

561
00:26:04,440 --> 00:26:09,600
so the question is I've done seemingly

562
00:26:07,740 --> 00:26:11,010
really dangerous<font color="#E5E5E5"> things how do we go</font>

563
00:26:09,600 --> 00:26:15,090
about testing them and<font color="#CCCCCC"> what are the</font>

564
00:26:11,010 --> 00:26:17,730
tools<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we could use</font><font color="#CCCCCC"> for this and I</font>

565
00:26:15,090 --> 00:26:19,830
guess word of warning<font color="#E5E5E5"> I'm a researcher</font><font color="#CCCCCC"> I</font>

566
00:26:17,730 --> 00:26:22,049
have a engineering<font color="#E5E5E5"> backgrounds</font><font color="#CCCCCC"> I've done</font>

567
00:26:19,830 --> 00:26:24,480
industry for a few years but<font color="#E5E5E5"> now</font><font color="#CCCCCC"> I'm a</font>

568
00:26:22,049 --> 00:26:27,150
research which means that my interest in

569
00:26:24,480 --> 00:26:29,429
testing is limited to saving me time

570
00:26:27,150 --> 00:26:32,929
<font color="#E5E5E5">rather than making things completely and</font>

571
00:26:29,429 --> 00:26:38,090
super stable in production that's<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I</font>

572
00:26:32,929 --> 00:26:41,640
think<font color="#E5E5E5"> various forms of kind of</font>

573
00:26:38,090 --> 00:26:44,039
<font color="#E5E5E5">deterministic but randomized testing is</font>

574
00:26:41,640 --> 00:26:47,429
really<font color="#CCCCCC"> good for something like this so</font>

575
00:26:44,039 --> 00:26:51,450
if you can introduce random weights or

576
00:26:47,429 --> 00:26:54,000
random<font color="#E5E5E5"> thread interleavings between you</font>

577
00:26:51,450 --> 00:26:57,240
and the card and whatever<font color="#E5E5E5"> happens</font><font color="#CCCCCC"> that's</font>

578
00:26:54,000 --> 00:26:59,220
something<font color="#E5E5E5"> that definitely helps you</font>

579
00:26:57,240 --> 00:27:03,150
there's<font color="#E5E5E5"> a deterministic rate for example</font>

580
00:26:59,220 --> 00:27:08,370
<font color="#CCCCCC">that does good job at this</font><font color="#E5E5E5"> otherwise</font>

581
00:27:03,150 --> 00:27:10,010
<font color="#E5E5E5">yeah it's really tricky</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> think</font>

582
00:27:08,370 --> 00:27:13,320
I have a good<font color="#CCCCCC"> answer on</font><font color="#E5E5E5"> what I would</font><font color="#CCCCCC"> use</font>

583
00:27:10,010 --> 00:27:15,390
<font color="#E5E5E5">to kind of prove the safety</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this</font>

584
00:27:13,320 --> 00:27:18,389
<font color="#E5E5E5">there are really</font><font color="#CCCCCC"> cool</font><font color="#E5E5E5"> research</font><font color="#CCCCCC"> level</font>

585
00:27:15,390 --> 00:27:21,059
approaches to doing composable safety

586
00:27:18,390 --> 00:27:24,780
proofs of complex<font color="#E5E5E5"> programs that use like</font>

587
00:27:21,059 --> 00:27:27,450
wildly unsafe features<font color="#CCCCCC"> they are not easy</font>

588
00:27:24,780 --> 00:27:29,460
to<font color="#CCCCCC"> use yet</font><font color="#E5E5E5"> so I think</font><font color="#CCCCCC"> I think that's</font>

589
00:27:27,450 --> 00:27:31,110
possibly one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the things where you</font>

590
00:27:29,460 --> 00:27:32,880
know I'm<font color="#E5E5E5"> excited to see what academia</font>

591
00:27:31,110 --> 00:27:35,039
<font color="#E5E5E5">comes up with next</font><font color="#CCCCCC"> there's really cool</font>

592
00:27:32,880 --> 00:27:38,730
work out of my university<font color="#CCCCCC"> that will let</font>

593
00:27:35,039 --> 00:27:41,158
you write proofs<font color="#E5E5E5"> in rust itself because</font>

594
00:27:38,730 --> 00:27:42,960
rust already gives us<font color="#CCCCCC"> too so much the</font>

595
00:27:41,159 --> 00:27:46,530
ending up doing<font color="#E5E5E5"> like for no verification</font>

596
00:27:42,960 --> 00:27:51,390
<font color="#E5E5E5">is is a lot easier now</font><font color="#CCCCCC"> because Russ is</font>

597
00:27:46,530 --> 00:27:54,480
so cool<font color="#CCCCCC"> right the</font><font color="#E5E5E5"> question is is that</font>

598
00:27:51,390 --> 00:27:56,010
<font color="#CCCCCC">ela plus it isn't</font><font color="#E5E5E5"> you could use ela plus</font>

599
00:27:54,480 --> 00:27:57,900
and try and prove that<font color="#E5E5E5"> something like</font>

600
00:27:56,010 --> 00:28:00,299
<font color="#E5E5E5">this is safe</font><font color="#CCCCCC"> you wouldn't have</font><font color="#E5E5E5"> to then</font>

601
00:27:57,900 --> 00:28:03,419
<font color="#E5E5E5">translate it to rust which is</font><font color="#CCCCCC"> always</font>

602
00:28:00,299 --> 00:28:04,580
potentially<font color="#E5E5E5"> error-prone the node ad Russ</font>

603
00:28:03,419 --> 00:28:06,659
work have been<font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> is</font>

604
00:28:04,580 --> 00:28:08,460
specifically for the<font color="#CCCCCC"> Ross</font><font color="#E5E5E5"> language and</font>

605
00:28:06,659 --> 00:28:10,530
its language and<font color="#E5E5E5"> better than rust so you</font>

606
00:28:08,460 --> 00:28:13,440
<font color="#E5E5E5">literally write proofs in in in brass</font>

607
00:28:10,530 --> 00:28:15,178
<font color="#E5E5E5">which is</font><font color="#CCCCCC"> with videos</font><font color="#E5E5E5"> so if you're</font>

608
00:28:13,440 --> 00:28:16,310
interested<font color="#CCCCCC"> in verification and things</font>

609
00:28:15,179 --> 00:28:20,150
like this<font color="#CCCCCC"> have a look</font>

610
00:28:16,310 --> 00:28:22,330
<font color="#CCCCCC">pretty cool all right thank you very</font>

611
00:28:20,150 --> 00:28:22,330
<font color="#E5E5E5">much</font>

612
00:28:23,350 --> 00:28:34,939
all right how do I handle<font color="#E5E5E5"> drop of the</font>

613
00:28:30,080 --> 00:28:38,050
token<font color="#E5E5E5"> how do I handle drop of the token</font>

614
00:28:34,940 --> 00:28:42,500
<font color="#E5E5E5">right good question</font>

615
00:28:38,050 --> 00:28:43,940
drop safety is hard<font color="#CCCCCC"> I read about it it's</font>

616
00:28:42,500 --> 00:28:45,320
harder than you<font color="#E5E5E5"> think</font><font color="#CCCCCC"> if you haven't</font>

617
00:28:43,940 --> 00:28:48,830
<font color="#E5E5E5">read about it before</font>

618
00:28:45,320 --> 00:28:50,450
or at least it was for<font color="#E5E5E5"> me</font><font color="#CCCCCC"> dropping a</font>

619
00:28:48,830 --> 00:28:53,629
token for me<font color="#E5E5E5"> isn't a problem</font>

620
00:28:50,450 --> 00:28:58,850
so leaking is not one of<font color="#E5E5E5"> the safety</font>

621
00:28:53,630 --> 00:29:01,580
<font color="#CCCCCC">properties of rust there's no there's no</font>

622
00:28:58,850 --> 00:29:03,919
guarantee<font color="#CCCCCC"> that you will not leak</font><font color="#E5E5E5"> so</font>

623
00:29:01,580 --> 00:29:07,280
dropping a token for us just means

624
00:29:03,920 --> 00:29:09,680
leaking that buffer so it's<font color="#CCCCCC"> non</font>

625
00:29:07,280 --> 00:29:10,910
desirable<font color="#E5E5E5"> behavior so it's one of those</font>

626
00:29:09,680 --> 00:29:14,510
cases<font color="#E5E5E5"> where</font><font color="#CCCCCC"> you might reach for</font>

627
00:29:10,910 --> 00:29:16,850
<font color="#E5E5E5">something like must use but it's not</font>

628
00:29:14,510 --> 00:29:25,280
strictly<font color="#E5E5E5"> unsafe</font><font color="#CCCCCC"> which is a bit of a</font>

629
00:29:16,850 --> 00:29:26,750
<font color="#CCCCCC">cop-out of an answer there you go thank</font>

630
00:29:25,280 --> 00:29:29,020
you<font color="#CCCCCC"> very much sir</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> uh</font><font color="#E5E5E5"> happy to talk</font>

631
00:29:26,750 --> 00:29:34,160
her more<font color="#CCCCCC"> Oh fine</font>

632
00:29:29,020 --> 00:29:34,160
[Applause]

