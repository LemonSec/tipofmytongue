1
00:00:04,640 --> 00:00:11,910
welcome everybody<font color="#CCCCCC"> I</font><font color="#E5E5E5"> talk a little bit</font>

2
00:00:08,309 --> 00:00:14,719
benchmarking<font color="#E5E5E5"> and capturing memory</font>

3
00:00:11,910 --> 00:00:14,719
<font color="#E5E5E5">metrics</font>

4
00:00:15,750 --> 00:00:25,130
<font color="#E5E5E5">I'm yes I'm actually doing a business</font>

5
00:00:21,509 --> 00:00:29,070
ecommerce applications in Java since

6
00:00:25,130 --> 00:00:32,700
1999 and sometimes I<font color="#E5E5E5"> like to dig a</font>

7
00:00:29,070 --> 00:00:35,960
little bit deeper<font color="#E5E5E5"> into things and like</font>

8
00:00:32,700 --> 00:00:39,239
to solve things at the<font color="#E5E5E5"> right place and</font>

9
00:00:35,960 --> 00:00:43,019
I'm also a performance<font color="#E5E5E5"> fanatic and</font>

10
00:00:39,239 --> 00:00:46,530
that's yeah<font color="#E5E5E5"> brings me to the topic of</font>

11
00:00:43,019 --> 00:00:51,030
caching and I write a caching library

12
00:00:46,530 --> 00:00:56,629
which is called<font color="#E5E5E5"> cached</font><font color="#CCCCCC"> ok so this is</font>

13
00:00:51,030 --> 00:00:59,539
<font color="#E5E5E5">like my my major topic of interest</font><font color="#CCCCCC"> and</font>

14
00:00:56,629 --> 00:01:02,510
<font color="#E5E5E5">because of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I do a lot of</font>

15
00:00:59,539 --> 00:01:05,690
benchmarking so that's the<font color="#CCCCCC"> outline of</font>

16
00:01:02,510 --> 00:01:08,940
the talk<font color="#CCCCCC"> a little bit of motivation</font><font color="#E5E5E5"> and</font>

17
00:01:05,690 --> 00:01:15,869
how can we gather<font color="#E5E5E5"> different memory</font>

18
00:01:08,940 --> 00:01:19,740
metrics from<font color="#E5E5E5"> the JVM and</font><font color="#CCCCCC"> or how can we</font>

19
00:01:15,869 --> 00:01:24,299
not gather it by running a<font color="#CCCCCC"> jmh benchmark</font>

20
00:01:19,740 --> 00:01:26,759
and then I present some results<font color="#E5E5E5"> and then</font>

21
00:01:24,299 --> 00:01:32,820
there is some happiness<font color="#E5E5E5"> and maybe</font>

22
00:01:26,759 --> 00:01:37,280
confusion<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> yeah if there is any</font>

23
00:01:32,820 --> 00:01:46,219
confusion<font color="#CCCCCC"> or some question rise up peace</font>

24
00:01:37,280 --> 00:01:50,219
<font color="#E5E5E5">straight away so yeah why I'm doing this</font>

25
00:01:46,219 --> 00:01:52,530
yeah there<font color="#E5E5E5"> are a lot of libraries with</font>

26
00:01:50,219 --> 00:01:57,210
caching out there and everybody says

27
00:01:52,530 --> 00:01:59,130
like<font color="#E5E5E5"> we are high performance</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> German</font>

28
00:01:57,210 --> 00:02:01,259
I'm always a little<font color="#E5E5E5"> bit more accurate</font>

29
00:01:59,130 --> 00:02:02,310
<font color="#CCCCCC">and a little bit more detailed about</font>

30
00:02:01,259 --> 00:02:05,759
<font color="#E5E5E5">things</font>

31
00:02:02,310 --> 00:02:13,580
so<font color="#E5E5E5"> before I say I am high performance</font><font color="#CCCCCC"> I</font>

32
00:02:05,759 --> 00:02:16,409
better check that sorry<font color="#CCCCCC"> I use</font><font color="#E5E5E5"> jmh for</font>

33
00:02:13,580 --> 00:02:21,750
<font color="#E5E5E5">benchmarking for</font><font color="#CCCCCC"> a couple of</font><font color="#E5E5E5"> reasons</font><font color="#CCCCCC"> I'm</font>

34
00:02:16,409 --> 00:02:25,470
not<font color="#CCCCCC"> going into detail about this that's</font>

35
00:02:21,750 --> 00:02:28,350
actually a<font color="#E5E5E5"> whole other topic when you do</font>

36
00:02:25,470 --> 00:02:31,470
<font color="#E5E5E5">gem</font><font color="#CCCCCC"> age benchmarking</font><font color="#E5E5E5"> throughput</font>

37
00:02:28,350 --> 00:02:35,549
benchmarking<font color="#CCCCCC"> the primary we saw the</font>

38
00:02:31,470 --> 00:02:42,450
primary metric you get is operations per

39
00:02:35,550 --> 00:02:46,260
second and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> quite nice and there</font>

40
00:02:42,450 --> 00:02:51,209
are gem age profilers that lets you

41
00:02:46,260 --> 00:02:53,700
collect a lot<font color="#CCCCCC"> of other metrics but</font>

42
00:02:51,209 --> 00:02:57,870
<font color="#E5E5E5">actually there is</font><font color="#CCCCCC"> nothing</font><font color="#E5E5E5"> that lets you</font>

43
00:02:53,700 --> 00:03:00,660
collect the memory<font color="#E5E5E5"> usage right now but</font>

44
00:02:57,870 --> 00:03:04,230
when I do<font color="#E5E5E5"> benchmarks about a caching</font>

45
00:03:00,660 --> 00:03:06,660
<font color="#E5E5E5">library then how much memory is used is</font>

46
00:03:04,230 --> 00:03:10,200
<font color="#E5E5E5">actually quite essential because caching</font>

47
00:03:06,660 --> 00:03:14,040
library is actually a thing to zoom the

48
00:03:10,200 --> 00:03:17,988
time and space<font color="#E5E5E5"> trade off so the caching</font>

49
00:03:14,040 --> 00:03:27,810
you<font color="#E5E5E5"> can always trade in memory for</font>

50
00:03:17,989 --> 00:03:37,560
faster speed so yeah how what are the

51
00:03:27,810 --> 00:03:41,730
<font color="#CCCCCC">different opportunities</font><font color="#E5E5E5"> to get memory</font>

52
00:03:37,560 --> 00:03:46,290
information<font color="#E5E5E5"> one thing that people are</font>

53
00:03:41,730 --> 00:03:48,899
<font color="#E5E5E5">doing</font><font color="#CCCCCC"> is object graph traversing</font><font color="#E5E5E5"> there</font>

54
00:03:46,290 --> 00:03:51,290
is some libraries from each cache and

55
00:03:48,900 --> 00:03:54,840
something that<font color="#E5E5E5"> is called Java agent for</font>

56
00:03:51,290 --> 00:03:57,359
memory measurements so what is<font color="#E5E5E5"> happening</font>

57
00:03:54,840 --> 00:04:00,989
is that<font color="#E5E5E5"> you give those libraries a route</font>

58
00:03:57,360 --> 00:04:06,840
object and then they<font color="#CCCCCC"> traverse like it</font>

59
00:04:00,989 --> 00:04:10,019
like<font color="#E5E5E5"> skin depth depth scan into the the</font>

60
00:04:06,840 --> 00:04:13,170
<font color="#E5E5E5">object hierarchy by it references and</font>

61
00:04:10,019 --> 00:04:16,829
then there is some magic<font color="#E5E5E5"> sometimes</font>

62
00:04:13,170 --> 00:04:20,219
<font color="#CCCCCC">there's some missed unsafe happening to</font>

63
00:04:16,829 --> 00:04:24,380
get the size of an object<font color="#E5E5E5"> and then this</font>

64
00:04:20,220 --> 00:04:26,820
is summed up and then you have a result

65
00:04:24,380 --> 00:04:29,729
<font color="#E5E5E5">this is quite nice</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> just</font>

66
00:04:26,820 --> 00:04:31,979
<font color="#CCCCCC">like or fill your data structures and</font>

67
00:04:29,729 --> 00:04:35,219
then ask the library<font color="#CCCCCC"> okay how much</font>

68
00:04:31,979 --> 00:04:37,140
memory<font color="#E5E5E5"> this is gonna cost me</font>

69
00:04:35,220 --> 00:04:39,600
so you can integrate it in continuous

70
00:04:37,140 --> 00:04:42,659
<font color="#E5E5E5">integration and get some designs out of</font>

71
00:04:39,600 --> 00:04:47,460
it<font color="#E5E5E5"> but it also only covers like a</font>

72
00:04:42,660 --> 00:04:52,500
<font color="#E5E5E5">partial set of the memory and the other</font>

73
00:04:47,460 --> 00:04:56,310
problem is like yeah<font color="#E5E5E5"> how much is</font>

74
00:04:52,500 --> 00:04:58,080
actually traversed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> 1 like how do I</font>

75
00:04:56,310 --> 00:05:03,150
keep the thing<font color="#CCCCCC"> from traversing the whole</font>

76
00:04:58,080 --> 00:05:08,039
heap and of course it's the<font color="#E5E5E5"> heap onehans</font>

77
00:05:03,150 --> 00:05:10,349
only like<font color="#E5E5E5"> a static result and not does</font>

78
00:05:08,040 --> 00:05:15,180
<font color="#CCCCCC">not cover what's happening when the</font>

79
00:05:10,350 --> 00:05:18,270
program is<font color="#CCCCCC"> actually running</font><font color="#E5E5E5"> the other</font>

80
00:05:15,180 --> 00:05:21,930
thing what you can do is heap dump or

81
00:05:18,270 --> 00:05:25,799
heap histogram wire<font color="#E5E5E5"> J map for example</font>

82
00:05:21,930 --> 00:05:29,880
<font color="#CCCCCC">and count all</font><font color="#E5E5E5"> the objects and get</font><font color="#CCCCCC"> a</font>

83
00:05:25,800 --> 00:05:35,550
metric how much data they about<font color="#E5E5E5"> the</font>

84
00:05:29,880 --> 00:05:40,080
memory size<font color="#CCCCCC"> and yeah it's actually same</font>

85
00:05:35,550 --> 00:05:44,190
as before<font color="#CCCCCC"> but it's it's a bit costly</font>

86
00:05:40,080 --> 00:05:50,400
<font color="#E5E5E5">especially</font><font color="#CCCCCC"> the heap dump</font><font color="#E5E5E5"> and again only</font>

87
00:05:44,190 --> 00:05:55,680
<font color="#CCCCCC">aesthetic result so what's happening</font>

88
00:05:50,400 --> 00:05:58,650
when I run a Java program<font color="#E5E5E5"> so this is the</font>

89
00:05:55,680 --> 00:06:04,040
output of visual<font color="#E5E5E5"> VM when you click</font>

90
00:05:58,650 --> 00:06:07,770
<font color="#E5E5E5">monitor and heap then you see the space</font>

91
00:06:04,040 --> 00:06:10,500
allocated by the by the objects in blue

92
00:06:07,770 --> 00:06:12,450
that's that's the heap that<font color="#E5E5E5"> moves up</font><font color="#CCCCCC"> and</font>

93
00:06:10,500 --> 00:06:15,480
down<font color="#E5E5E5"> down each time</font><font color="#CCCCCC"> the garbage</font>

94
00:06:12,450 --> 00:06:20,539
collector does its work and<font color="#CCCCCC"> the origin</font>

95
00:06:15,480 --> 00:06:20,540
is the<font color="#E5E5E5"> total memory that is occupied</font><font color="#CCCCCC"> so</font>

96
00:06:21,140 --> 00:06:35,010
<font color="#CCCCCC">how does this</font><font color="#E5E5E5"> relate</font><font color="#CCCCCC"> to my</font><font color="#E5E5E5"> jmh benchmark</font>

97
00:06:27,990 --> 00:06:37,320
<font color="#E5E5E5">and</font><font color="#CCCCCC"> jmh is spinning up</font><font color="#E5E5E5"> a JVM</font><font color="#CCCCCC"> running its</font>

98
00:06:35,010 --> 00:06:41,340
benchmarks in there<font color="#E5E5E5"> and then there are</font>

99
00:06:37,320 --> 00:06:44,310
iterations and you can specify<font color="#E5E5E5"> how much</font>

100
00:06:41,340 --> 00:06:46,950
iterations you want to do for warming<font color="#E5E5E5"> up</font>

101
00:06:44,310 --> 00:06:48,980
your workload and you can specify how

102
00:06:46,950 --> 00:06:52,370
<font color="#E5E5E5">much iterations</font>

103
00:06:48,980 --> 00:06:55,370
for actually measurement<font color="#E5E5E5"> in this case I</font>

104
00:06:52,370 --> 00:06:59,360
do two iterations<font color="#E5E5E5"> for warming up and</font>

105
00:06:55,370 --> 00:07:02,180
three iterations<font color="#E5E5E5"> for the measurement so</font>

106
00:06:59,360 --> 00:07:05,830
when I want<font color="#E5E5E5"> to know how much heap</font><font color="#CCCCCC"> I use</font>

107
00:07:02,180 --> 00:07:08,300
I can take a look<font color="#E5E5E5"> and then I get like</font>

108
00:07:05,830 --> 00:07:15,620
interesting values it could be like down

109
00:07:08,300 --> 00:07:24,070
here<font color="#E5E5E5"> or</font><font color="#CCCCCC"> up there</font><font color="#E5E5E5"> so no idea yeah</font>

110
00:07:15,620 --> 00:07:26,690
so one idea<font color="#E5E5E5"> you</font><font color="#CCCCCC"> might have is let's</font>

111
00:07:24,070 --> 00:07:29,870
force garbage collection<font color="#E5E5E5"> after each</font>

112
00:07:26,690 --> 00:07:31,850
iteration<font color="#E5E5E5"> so I feel the data structures</font>

113
00:07:29,870 --> 00:07:35,030
did some warm up and<font color="#E5E5E5"> then let's force</font>

114
00:07:31,850 --> 00:07:39,440
<font color="#CCCCCC">the garbage collector and</font><font color="#E5E5E5"> then take a</font>

115
00:07:35,030 --> 00:07:46,530
look what's left<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the heap and we have</font>

116
00:07:39,440 --> 00:07:47,710
a consistent<font color="#E5E5E5"> metric about the heap space</font>

117
00:07:46,530 --> 00:07:54,080
[Music]

118
00:07:47,710 --> 00:07:59,060
but when you<font color="#E5E5E5"> compare the two runs of the</font>

119
00:07:54,080 --> 00:08:00,710
benchmarks one with no<font color="#E5E5E5"> force</font><font color="#CCCCCC"> garbage</font>

120
00:07:59,060 --> 00:08:03,890
<font color="#E5E5E5">collection one</font><font color="#CCCCCC"> of the force garbage</font>

121
00:08:00,710 --> 00:08:07,099
collection you see that<font color="#E5E5E5"> it's actually</font>

122
00:08:03,890 --> 00:08:11,060
quite different<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> shape so</font><font color="#E5E5E5"> you're</font>

123
00:08:07,100 --> 00:08:13,400
actually interfering<font color="#E5E5E5"> a lot with what the</font>

124
00:08:11,060 --> 00:08:19,430
garbage collector<font color="#CCCCCC"> is doing and how would</font>

125
00:08:13,400 --> 00:08:29,530
the<font color="#E5E5E5"> JVM react naturally if you just let</font>

126
00:08:19,430 --> 00:08:36,229
<font color="#CCCCCC">it do its things so yeah</font><font color="#E5E5E5"> one short thing</font>

127
00:08:29,530 --> 00:08:40,309
<font color="#CCCCCC">who is actually working with jmh okay</font>

128
00:08:36,229 --> 00:08:46,450
<font color="#E5E5E5">yeah couple of guys okay that's great so</font>

129
00:08:40,309 --> 00:08:46,449
is there any remark to this picture<font color="#CCCCCC"> here</font>

130
00:08:46,930 --> 00:08:57,140
<font color="#E5E5E5">from people knowing running</font><font color="#CCCCCC"> jmh this is</font>

131
00:08:52,310 --> 00:09:00,020
there anything interesting<font color="#CCCCCC"> so the thing</font>

132
00:08:57,140 --> 00:09:02,000
<font color="#CCCCCC">is so these three iterations are my</font>

133
00:09:00,020 --> 00:09:03,949
measurement iterations

134
00:09:02,000 --> 00:09:08,330
and we see that<font color="#CCCCCC"> actually the garbage</font>

135
00:09:03,950 --> 00:09:10,640
collector here is still expanding<font color="#CCCCCC"> so the</font>

136
00:09:08,330 --> 00:09:14,660
<font color="#E5E5E5">iteration one two three we</font><font color="#CCCCCC"> are actually</font>

137
00:09:10,640 --> 00:09:17,420
not running at a steady pace<font color="#E5E5E5"> at the</font>

138
00:09:14,660 --> 00:09:22,579
garbage collector<font color="#CCCCCC"> is not oh sorry it's</font>

139
00:09:17,420 --> 00:09:26,810
not yet<font color="#CCCCCC"> at a rest I a stable memory</font><font color="#E5E5E5"> size</font>

140
00:09:22,580 --> 00:09:30,070
so what might happen is<font color="#CCCCCC"> that our results</font>

141
00:09:26,810 --> 00:09:33,680
in the in the different iterations<font color="#CCCCCC"> are</font>

142
00:09:30,070 --> 00:09:35,570
quite different<font color="#E5E5E5"> between the iterations</font>

143
00:09:33,680 --> 00:09:38,540
because<font color="#E5E5E5"> the garbage collector is still</font>

144
00:09:35,570 --> 00:09:43,280
expanding<font color="#E5E5E5"> the other interesting thing is</font>

145
00:09:38,540 --> 00:09:46,189
that<font color="#E5E5E5"> we have about two garbage</font>

146
00:09:43,280 --> 00:09:49,790
collectors<font color="#E5E5E5"> garbage collections happening</font>

147
00:09:46,190 --> 00:09:53,960
within the iterations<font color="#E5E5E5"> and this might be</font>

148
00:09:49,790 --> 00:09:55,939
<font color="#CCCCCC">a problem as well</font><font color="#E5E5E5"> because maybe there</font>

149
00:09:53,960 --> 00:09:58,550
have there are two happening there<font color="#E5E5E5"> are</font>

150
00:09:55,940 --> 00:10:00,650
<font color="#CCCCCC">three happening that we just won so it's</font>

151
00:09:58,550 --> 00:10:08,120
interfering with our throughput

152
00:10:00,650 --> 00:10:12,110
measurement<font color="#CCCCCC"> beside a lot so as a general</font>

153
00:10:08,120 --> 00:10:15,290
<font color="#CCCCCC">thing I would say right there</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> two</font>

154
00:10:12,110 --> 00:10:18,260
kinds of micro benchmarks here they are

155
00:10:15,290 --> 00:10:21,230
like the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> real micro benchmarks the</font>

156
00:10:18,260 --> 00:10:24,400
micro micro benchmarks where a garbage

157
00:10:21,230 --> 00:10:30,530
collection<font color="#E5E5E5"> cycle might happen</font>

158
00:10:24,400 --> 00:10:33,530
<font color="#E5E5E5">occasionally but in this case you</font>

159
00:10:30,530 --> 00:10:36,530
<font color="#CCCCCC">probably want to get the</font><font color="#E5E5E5"> garbage</font>

160
00:10:33,530 --> 00:10:40,699
collector<font color="#E5E5E5"> out of the equation</font><font color="#CCCCCC"> of your</font>

161
00:10:36,530 --> 00:10:45,170
measurement<font color="#E5E5E5"> you can do this by forcing</font><font color="#CCCCCC"> a</font>

162
00:10:40,700 --> 00:10:49,910
garbage collection before<font color="#E5E5E5"> your iteration</font>

163
00:10:45,170 --> 00:10:53,650
<font color="#E5E5E5">or maybe</font><font color="#CCCCCC"> even use the</font><font color="#E5E5E5"> the 0 GC that is</font>

164
00:10:49,910 --> 00:10:56,569
new now and yeah

165
00:10:53,650 --> 00:10:59,959
however then<font color="#E5E5E5"> you have like a</font><font color="#CCCCCC"> not-so</font>

166
00:10:56,570 --> 00:11:02,240
micro benchmark then and the garbage

167
00:10:59,960 --> 00:11:07,000
<font color="#E5E5E5">collection</font><font color="#CCCCCC"> cycle is happening</font><font color="#E5E5E5"> a lot</font>

168
00:11:02,240 --> 00:11:11,690
during your iterations then yeah

169
00:11:07,000 --> 00:11:14,540
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> want it to happen</font><font color="#CCCCCC"> like a</font>

170
00:11:11,690 --> 00:11:15,440
lot<font color="#E5E5E5"> that it's not interfering too much</font>

171
00:11:14,540 --> 00:11:19,459
with your

172
00:11:15,440 --> 00:11:23,150
<font color="#E5E5E5">and results and you better know what</font>

173
00:11:19,460 --> 00:11:27,260
your garbage collector is<font color="#E5E5E5"> doing or the</font>

174
00:11:23,150 --> 00:11:29,150
other way around<font color="#CCCCCC"> by</font><font color="#E5E5E5"> monitoring what what</font>

175
00:11:27,260 --> 00:11:32,600
the garbage collector<font color="#CCCCCC"> is doing and how</font>

176
00:11:29,150 --> 00:11:35,060
<font color="#CCCCCC">much memory</font><font color="#E5E5E5"> your your JVM is using you</font>

177
00:11:32,600 --> 00:11:40,070
get to know what<font color="#E5E5E5"> your garbage collector</font>

178
00:11:35,060 --> 00:11:42,229
is<font color="#CCCCCC"> doing a lot more so if you cannot</font>

179
00:11:40,070 --> 00:11:45,800
avoid<font color="#E5E5E5"> garbage collection you actually</font>

180
00:11:42,230 --> 00:11:55,070
want to<font color="#E5E5E5"> make it go steady during</font><font color="#CCCCCC"> the</font>

181
00:11:45,800 --> 00:12:01,069
iteration so yeah so what kind of

182
00:11:55,070 --> 00:12:05,510
metrics<font color="#CCCCCC"> I can extract here so what I did</font>

183
00:12:01,070 --> 00:12:08,360
<font color="#E5E5E5">implement is use the things that the</font>

184
00:12:05,510 --> 00:12:11,390
<font color="#E5E5E5">operating</font><font color="#CCCCCC"> system is giving us via proxy</font>

185
00:12:08,360 --> 00:12:13,970
of status<font color="#E5E5E5"> there are two things of</font>

186
00:12:11,390 --> 00:12:18,370
<font color="#CCCCCC">interest here this is the</font><font color="#E5E5E5"> resident set</font>

187
00:12:13,970 --> 00:12:20,690
size and there is<font color="#E5E5E5"> also called the</font>

188
00:12:18,370 --> 00:12:24,190
high-water<font color="#E5E5E5"> mark which</font><font color="#CCCCCC"> is actually the</font>

189
00:12:20,690 --> 00:12:30,560
highest<font color="#E5E5E5"> level</font><font color="#CCCCCC"> of the resident set size a</font>

190
00:12:24,190 --> 00:12:34,940
process<font color="#CCCCCC"> hat in its run so these are two</font>

191
00:12:30,560 --> 00:12:37,369
nice metrics you<font color="#E5E5E5"> can use garbage</font>

192
00:12:34,940 --> 00:12:39,800
collector notifications you actually get

193
00:12:37,370 --> 00:12:42,170
a notification from<font color="#CCCCCC"> the garbage</font>

194
00:12:39,800 --> 00:12:45,410
collector<font color="#E5E5E5"> each garbage collection cycle</font>

195
00:12:42,170 --> 00:12:47,569
<font color="#CCCCCC">and you get some information about</font><font color="#E5E5E5"> the</font>

196
00:12:45,410 --> 00:12:51,339
use memory<font color="#CCCCCC"> before the</font><font color="#E5E5E5"> garbage collection</font>

197
00:12:47,570 --> 00:12:55,700
<font color="#CCCCCC">and after the garbage</font><font color="#E5E5E5"> collection and I</font>

198
00:12:51,340 --> 00:13:01,870
take the<font color="#CCCCCC"> maximum of</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> and add</font><font color="#E5E5E5"> it to</font>

199
00:12:55,700 --> 00:13:01,870
<font color="#E5E5E5">the</font><font color="#CCCCCC"> jmh results</font>

200
00:13:06,010 --> 00:13:13,790
and a<font color="#CCCCCC"> good also feature is the</font>

201
00:13:09,860 --> 00:13:16,820
allocation rate which you<font color="#CCCCCC"> should keep a</font>

202
00:13:13,790 --> 00:13:20,089
look at so<font color="#CCCCCC"> the section</font><font color="#E5E5E5"> the rate how many</font>

203
00:13:16,820 --> 00:13:22,250
<font color="#E5E5E5">objects are allocated</font><font color="#CCCCCC"> you get this this</font>

204
00:13:20,089 --> 00:13:28,940
<font color="#E5E5E5">is</font><font color="#CCCCCC"> actually built in</font><font color="#E5E5E5"> jmh with the</font>

205
00:13:22,250 --> 00:13:31,490
garbage<font color="#CCCCCC"> collector profiler and then</font>

206
00:13:28,940 --> 00:13:34,790
finally I decided like when we are

207
00:13:31,490 --> 00:13:37,160
<font color="#E5E5E5">finished with our iterations then it's</font>

208
00:13:34,790 --> 00:13:42,469
safe to do a<font color="#CCCCCC"> forced garbage collection</font>

209
00:13:37,160 --> 00:13:47,920
and<font color="#CCCCCC"> use</font><font color="#E5E5E5"> J map to get a heap histogram</font>

210
00:13:42,470 --> 00:13:53,350
and also used<font color="#E5E5E5"> management and management</font>

211
00:13:47,920 --> 00:13:53,349
<font color="#E5E5E5">extension to get value of the used heap</font>

212
00:13:56,529 --> 00:14:03,260
so here's the example<font color="#E5E5E5"> of the running</font>

213
00:13:59,390 --> 00:14:08,930
scheme I use for the upcoming<font color="#E5E5E5"> examples</font>

214
00:14:03,260 --> 00:14:10,939
<font color="#E5E5E5">which sites so gem H has a control</font>

215
00:14:08,930 --> 00:14:15,529
process and from<font color="#E5E5E5"> load that control</font>

216
00:14:10,940 --> 00:14:19,399
process it forms the measurement JVMs

217
00:14:15,529 --> 00:14:23,899
<font color="#CCCCCC">and you can say how</font><font color="#E5E5E5"> many Forks</font><font color="#CCCCCC"> jmh</font>

218
00:14:19,399 --> 00:14:26,089
should do and so in each measurement<font color="#CCCCCC"> JVM</font>

219
00:14:23,899 --> 00:14:28,520
there's a warm<font color="#CCCCCC"> up</font><font color="#E5E5E5"> warm</font><font color="#CCCCCC"> up iteration</font>

220
00:14:26,089 --> 00:14:32,300
<font color="#E5E5E5">there</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> warm up iterations and</font>

221
00:14:28,520 --> 00:14:38,990
measurement iterations<font color="#E5E5E5"> and those fork</font>

222
00:14:32,300 --> 00:14:41,680
<font color="#E5E5E5">GM's run one after the other</font><font color="#CCCCCC"> so actually</font>

223
00:14:38,990 --> 00:14:45,829
I have<font color="#CCCCCC"> altogether nine measurement</font>

224
00:14:41,680 --> 00:14:48,739
iterations here<font color="#E5E5E5"> and so from the primary</font>

225
00:14:45,829 --> 00:14:53,899
metric<font color="#E5E5E5"> I get nine results after each</font>

226
00:14:48,740 --> 00:14:55,730
iteration<font color="#E5E5E5"> for the memory metrics</font><font color="#CCCCCC"> I</font>

227
00:14:53,899 --> 00:14:58,970
gather with the<font color="#E5E5E5"> fourth garbage</font>

228
00:14:55,730 --> 00:15:04,910
collection I only get free<font color="#E5E5E5"> because</font><font color="#CCCCCC"> this</font>

229
00:14:58,970 --> 00:15:08,420
runs at<font color="#CCCCCC"> the end of the fork so here are</font>

230
00:15:04,910 --> 00:15:14,209
<font color="#E5E5E5">some results</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> first I need to explain</font>

231
00:15:08,420 --> 00:15:17,520
the benchmark that<font color="#E5E5E5"> I'm doing</font><font color="#CCCCCC"> I walk you</font>

232
00:15:14,209 --> 00:15:22,199
through so first

233
00:15:17,520 --> 00:15:27,540
here there is for<font color="#CCCCCC"> each friend I use a</font>

234
00:15:22,200 --> 00:15:30,150
fast<font color="#CCCCCC"> sofyan sequence generator this</font><font color="#E5E5E5"> is</font>

235
00:15:27,540 --> 00:15:33,930
actually a skewed<font color="#E5E5E5"> random pattern that</font>

236
00:15:30,150 --> 00:15:40,050
yields about<font color="#E5E5E5"> 90% hit rate in the cache</font>

237
00:15:33,930 --> 00:15:44,579
<font color="#E5E5E5">with this configuration it's either yeah</font>

238
00:15:40,050 --> 00:15:51,329
Oh is he<font color="#E5E5E5"> here's a mistake I actually do</font>

239
00:15:44,580 --> 00:15:53,490
it with 1 million entries here's the

240
00:15:51,330 --> 00:15:58,260
<font color="#E5E5E5">benchmark operation is actually</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> cache</font>

241
00:15:53,490 --> 00:16:01,200
get and whenever the entry is not in the

242
00:15:58,260 --> 00:16:05,490
cache<font color="#CCCCCC"> loading function is called</font><font color="#E5E5E5"> and</font>

243
00:16:01,200 --> 00:16:05,880
this loading function is actually using

244
00:16:05,490 --> 00:16:09,120
a

245
00:16:05,880 --> 00:16:12,180
<font color="#CCCCCC">jmh feature called</font><font color="#E5E5E5"> black hole consume</font>

246
00:16:09,120 --> 00:16:16,110
<font color="#CCCCCC">CPU so there's a heavy penalty</font><font color="#E5E5E5"> when you</font>

247
00:16:12,180 --> 00:16:17,880
have a cache miss so<font color="#CCCCCC"> this means there's</font>

248
00:16:16,110 --> 00:16:20,340
a<font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> thing happening</font><font color="#E5E5E5"> on a single</font>

249
00:16:17,880 --> 00:16:22,730
<font color="#E5E5E5">operation the cache get and there's some</font>

250
00:16:20,340 --> 00:16:25,560
<font color="#E5E5E5">cache eviction data structures and</font>

251
00:16:22,730 --> 00:16:32,280
garbage produced<font color="#E5E5E5"> and also some</font>

252
00:16:25,560 --> 00:16:35,790
autoboxing that's the benchmark set up

253
00:16:32,280 --> 00:16:40,770
the<font color="#E5E5E5"> environment it's the machine with 4</font>

254
00:16:35,790 --> 00:16:43,829
physical cores<font color="#CCCCCC"> I limit the core usage</font>

255
00:16:40,770 --> 00:16:46,319
I'm not using<font color="#E5E5E5"> hyper threading your</font><font color="#CCCCCC"> CPU</font>

256
00:16:43,830 --> 00:16:47,310
hot plugging the benchmarks runs with

257
00:16:46,320 --> 00:16:51,240
<font color="#E5E5E5">four frets</font>

258
00:16:47,310 --> 00:16:55,709
<font color="#CCCCCC">I tested with the Oracle</font><font color="#E5E5E5"> JDK 11</font><font color="#CCCCCC"> with</font>

259
00:16:51,240 --> 00:16:59,420
<font color="#E5E5E5">power</font><font color="#CCCCCC"> lead GC + G 1</font><font color="#E5E5E5"> and for reference</font>

260
00:16:55,710 --> 00:16:59,420
<font color="#CCCCCC">they're the</font><font color="#E5E5E5"> versions of the</font><font color="#CCCCCC"> libraries</font>

261
00:17:00,320 --> 00:17:05,930
these<font color="#E5E5E5"> are the</font><font color="#CCCCCC"> jmh parameters</font><font color="#E5E5E5"> i already</font>

262
00:17:03,930 --> 00:17:09,119
talked about<font color="#E5E5E5"> it</font>

263
00:17:05,930 --> 00:17:12,390
free measure<font color="#CCCCCC"> free measurement iterations</font>

264
00:17:09,119 --> 00:17:15,919
free Forks<font color="#CCCCCC"> is free measurements 9</font>

265
00:17:12,390 --> 00:17:21,300
measurements iterations<font color="#CCCCCC"> altogether</font><font color="#E5E5E5"> and</font>

266
00:17:15,920 --> 00:17:24,209
60 seconds<font color="#E5E5E5"> iteration time the graphs</font>

267
00:17:21,300 --> 00:17:29,220
show the<font color="#E5E5E5"> confidence interval in the</font>

268
00:17:24,209 --> 00:17:30,690
error bars teammates uses<font color="#CCCCCC"> nineteen nine</font>

269
00:17:29,220 --> 00:17:33,269
dot

270
00:17:30,690 --> 00:17:37,710
<font color="#CCCCCC">9 percent confidence level which is</font>

271
00:17:33,269 --> 00:17:43,200
pretty<font color="#E5E5E5"> tough so these are the</font>

272
00:17:37,710 --> 00:17:47,460
performance<font color="#E5E5E5"> resize like the</font><font color="#CCCCCC"> cache decay</font>

273
00:17:43,200 --> 00:17:51,419
cache implementation comes with<font color="#E5E5E5"> 7</font>

274
00:17:47,460 --> 00:17:53,789
million operations per second<font color="#E5E5E5"> but this</font>

275
00:17:51,419 --> 00:17:57,690
<font color="#E5E5E5">is</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> not what I want to talk</font>

276
00:17:53,789 --> 00:18:02,158
<font color="#CCCCCC">about let's look at</font><font color="#E5E5E5"> memory usage for the</font>

277
00:17:57,690 --> 00:18:04,919
power<font color="#E5E5E5"> garbage collector and here is the</font>

278
00:18:02,159 --> 00:18:10,099
heap usage<font color="#CCCCCC"> with different metrics</font><font color="#E5E5E5"> the</font>

279
00:18:04,919 --> 00:18:15,119
first one is<font color="#E5E5E5"> the urge a map and</font>

280
00:18:10,099 --> 00:18:24,119
histogram the second one is<font color="#CCCCCC"> after I run</font>

281
00:18:15,119 --> 00:18:27,658
the garbage collector and yes<font color="#CCCCCC"> and the</font>

282
00:18:24,119 --> 00:18:30,059
<font color="#E5E5E5">third one also and like and the first</font>

283
00:18:27,659 --> 00:18:35,249
<font color="#E5E5E5">and the second one is to use heap and</font>

284
00:18:30,059 --> 00:18:37,200
the third one is the total used memory

285
00:18:35,249 --> 00:18:39,599
so not only the heap but also the non

286
00:18:37,200 --> 00:18:45,330
heap memory and here's<font color="#E5E5E5"> something</font>

287
00:18:39,599 --> 00:18:50,840
astonishing<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> histogram actually</font>

288
00:18:45,330 --> 00:18:54,739
reports more used memory<font color="#E5E5E5"> then the</font>

289
00:18:50,840 --> 00:18:58,769
management<font color="#E5E5E5"> extension</font><font color="#CCCCCC"> beans</font>

290
00:18:54,739 --> 00:19:02,009
you also see<font color="#E5E5E5"> that the error bars here</font>

291
00:18:58,769 --> 00:19:09,889
are like there's a lot of<font color="#CCCCCC"> variance</font><font color="#E5E5E5"> and</font>

292
00:19:02,009 --> 00:19:12,830
<font color="#E5E5E5">the results here let's look at the</font>

293
00:19:09,889 --> 00:19:19,080
<font color="#CCCCCC">residents at sighs so what's operating</font>

294
00:19:12,830 --> 00:19:23,460
systems<font color="#CCCCCC"> giving us and like so like from</font>

295
00:19:19,080 --> 00:19:26,309
the very right like this one is the high

296
00:19:23,460 --> 00:19:29,970
watermark<font color="#E5E5E5"> matrix or the highest</font><font color="#CCCCCC"> resident</font>

297
00:19:26,309 --> 00:19:32,729
<font color="#CCCCCC">set size then this</font><font color="#E5E5E5"> is the resident set</font>

298
00:19:29,970 --> 00:19:36,200
size at the<font color="#E5E5E5"> end after the garbage</font>

299
00:19:32,729 --> 00:19:39,389
<font color="#E5E5E5">collection and this</font><font color="#CCCCCC"> is the highest</font>

300
00:19:36,200 --> 00:19:41,729
<font color="#E5E5E5">amount of committed memory the garbage</font>

301
00:19:39,389 --> 00:19:43,169
collector reported after<font color="#CCCCCC"> the garbage</font>

302
00:19:41,729 --> 00:19:47,180
collector run

303
00:19:43,170 --> 00:19:52,350
and this is the total committed<font color="#CCCCCC"> memory</font>

304
00:19:47,180 --> 00:19:56,150
that the JVM is is reporting we see

305
00:19:52,350 --> 00:20:00,919
<font color="#E5E5E5">sometimes there is a lot of variance and</font>

306
00:19:56,150 --> 00:20:06,120
but actually those values are quite

307
00:20:00,920 --> 00:20:09,810
close together<font color="#CCCCCC"> also when I go</font><font color="#E5E5E5"> go back</font>

308
00:20:06,120 --> 00:20:12,959
<font color="#E5E5E5">here we see like those values are also</font>

309
00:20:09,810 --> 00:20:16,530
quite close actually<font color="#E5E5E5"> if together so when</font>

310
00:20:12,960 --> 00:20:19,590
we<font color="#CCCCCC"> are not like debugging the garbage</font>

311
00:20:16,530 --> 00:20:23,570
collector<font color="#CCCCCC"> we are fine just looking at</font>

312
00:20:19,590 --> 00:20:23,570
one of these<font color="#E5E5E5"> values</font><font color="#CCCCCC"> Oh</font>

313
00:20:28,340 --> 00:20:37,740
so let's take<font color="#CCCCCC"> a look at the g1 damaged</font>

314
00:20:34,080 --> 00:20:40,770
connector here the result of the

315
00:20:37,740 --> 00:20:44,040
<font color="#E5E5E5">histogram is more consistent</font><font color="#CCCCCC"> with the</font>

316
00:20:40,770 --> 00:20:46,560
thing<font color="#E5E5E5"> that the arm is reporting</font><font color="#CCCCCC"> via the</font>

317
00:20:44,040 --> 00:20:52,110
management extensions<font color="#CCCCCC"> it's pretty much</font>

318
00:20:46,560 --> 00:20:56,340
on the same on the<font color="#E5E5E5"> same level and what</font>

319
00:20:52,110 --> 00:20:59,010
<font color="#E5E5E5">it's interesting is now that the memory</font>

320
00:20:56,340 --> 00:21:03,480
<font color="#E5E5E5">the actual use memory by the operating</font>

321
00:20:59,010 --> 00:21:07,530
<font color="#CCCCCC">system is differing</font><font color="#E5E5E5"> a lot between the</font>

322
00:21:03,480 --> 00:21:10,230
caching implementations<font color="#E5E5E5"> and also between</font>

323
00:21:07,530 --> 00:21:13,230
what the operating system is reporting

324
00:21:10,230 --> 00:21:18,720
<font color="#CCCCCC">this as the high watermark</font><font color="#E5E5E5"> level and the</font>

325
00:21:13,230 --> 00:21:22,250
resident set size at the end<font color="#E5E5E5"> of the run</font>

326
00:21:18,720 --> 00:21:26,280
<font color="#E5E5E5">after the</font><font color="#CCCCCC"> forced garbage collection so</font>

327
00:21:22,250 --> 00:21:30,600
here we get<font color="#E5E5E5"> a lot of different</font><font color="#CCCCCC"> besides</font>

328
00:21:26,280 --> 00:21:33,990
the reason why we get a lower<font color="#E5E5E5"> residence</font>

329
00:21:30,600 --> 00:21:37,409
at science is<font color="#E5E5E5"> that g1 is giving back</font>

330
00:21:33,990 --> 00:21:41,430
<font color="#CCCCCC">aggressive aggressively memory to the</font>

331
00:21:37,410 --> 00:21:47,940
operating<font color="#CCCCCC"> system</font><font color="#E5E5E5"> so the</font><font color="#CCCCCC"> high-water mark</font>

332
00:21:41,430 --> 00:21:51,830
is different and the other thing is why

333
00:21:47,940 --> 00:21:56,840
now there are a lot of different<font color="#CCCCCC"> besides</font>

334
00:21:51,830 --> 00:21:56,840
for for<font color="#E5E5E5"> g1 is that</font>

335
00:21:57,500 --> 00:22:03,330
actually we<font color="#E5E5E5"> are doing here</font><font color="#CCCCCC"> a report</font>

336
00:22:00,630 --> 00:22:06,270
<font color="#E5E5E5">benchmark and g1 is actually not</font>

337
00:22:03,330 --> 00:22:09,300
intended for highest<font color="#E5E5E5"> throughput but for</font>

338
00:22:06,270 --> 00:22:11,430
law pause and this is you<font color="#CCCCCC"> see here</font>

339
00:22:09,300 --> 00:22:18,480
actually the the tall we<font color="#CCCCCC"> gotta pay for</font>

340
00:22:11,430 --> 00:22:22,050
<font color="#CCCCCC">that</font><font color="#E5E5E5"> and because what is happening is</font>

341
00:22:18,480 --> 00:22:25,730
that<font color="#CCCCCC"> the allocation rates between</font><font color="#E5E5E5"> the</font>

342
00:22:22,050 --> 00:22:28,440
implementations<font color="#E5E5E5"> is quite different and</font>

343
00:22:25,730 --> 00:22:32,580
the more<font color="#E5E5E5"> the higher the allocation rate</font>

344
00:22:28,440 --> 00:22:41,850
here<font color="#E5E5E5"> there's</font><font color="#CCCCCC"> a correlation to the used</font>

345
00:22:32,580 --> 00:22:46,439
memory so and this is the<font color="#E5E5E5"> allocation</font>

346
00:22:41,850 --> 00:22:48,449
rate per second<font color="#E5E5E5"> all this is wrong here</font>

347
00:22:46,440 --> 00:22:51,860
<font color="#E5E5E5">so this is the allocation rate per</font>

348
00:22:48,450 --> 00:22:54,600
second<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is the allocation rate</font>

349
00:22:51,860 --> 00:23:03,139
normed by the operation in bytes per

350
00:22:54,600 --> 00:23:03,139
<font color="#CCCCCC">operation so let's wrap it</font><font color="#E5E5E5"> up</font>

351
00:23:03,500 --> 00:23:10,770
when garbage collecting collection is

352
00:23:07,550 --> 00:23:14,970
happening<font color="#E5E5E5"> it's good to keep an eye of</font>

353
00:23:10,770 --> 00:23:19,560
your memory usage<font color="#CCCCCC"> there are various</font>

354
00:23:14,970 --> 00:23:23,070
metrics you can<font color="#E5E5E5"> code record that have</font>

355
00:23:19,560 --> 00:23:28,429
varying degree<font color="#CCCCCC"> of accuracy and and</font>

356
00:23:23,070 --> 00:23:32,639
meaning and then the garbage<font color="#E5E5E5"> collection</font>

357
00:23:28,430 --> 00:23:36,810
is happening and you're not having<font color="#CCCCCC"> like</font>

358
00:23:32,640 --> 00:23:40,110
a real micro benchmark maybe then you

359
00:23:36,810 --> 00:23:42,899
need to run<font color="#CCCCCC"> your benchmarks longer and</font>

360
00:23:40,110 --> 00:23:45,570
the more heap you have the longer you

361
00:23:42,900 --> 00:23:47,940
need<font color="#CCCCCC"> to run</font><font color="#E5E5E5"> your benchmark iterations</font>

362
00:23:45,570 --> 00:23:54,240
for<font color="#E5E5E5"> the garbage to give the garbage</font>

363
00:23:47,940 --> 00:23:57,900
collector time to swing in<font color="#E5E5E5"> yeah the you</font>

364
00:23:54,240 --> 00:24:00,450
<font color="#E5E5E5">can</font><font color="#CCCCCC"> actually use jmh also to construct</font>

365
00:23:57,900 --> 00:24:05,610
benchmarks<font color="#CCCCCC"> to ever evaluate</font><font color="#E5E5E5"> your memory</font>

366
00:24:00,450 --> 00:24:08,460
usage<font color="#E5E5E5"> be aware</font><font color="#CCCCCC"> of different</font><font color="#E5E5E5"> garbage</font>

367
00:24:05,610 --> 00:24:09,389
collector implementations and their

368
00:24:08,460 --> 00:24:12,570
behaviors

369
00:24:09,389 --> 00:24:16,678
or explore the<font color="#CCCCCC"> different</font><font color="#E5E5E5"> garbage</font>

370
00:24:12,570 --> 00:24:21,049
collector behaviors and the plan on the

371
00:24:16,679 --> 00:24:28,229
idea is to see and include<font color="#E5E5E5"> those metrics</font>

372
00:24:21,049 --> 00:24:33,479
in the<font color="#E5E5E5"> jmh code code paste the code that</font>

373
00:24:28,229 --> 00:24:37,169
<font color="#CCCCCC">i</font><font color="#E5E5E5"> did is available on github at the</font>

374
00:24:33,479 --> 00:24:41,639
<font color="#CCCCCC">cache 2k benchmarks project</font><font color="#E5E5E5"> those are</font>

375
00:24:37,169 --> 00:24:44,219
the two pluses<font color="#E5E5E5"> and yeah if you like to</font>

376
00:24:41,639 --> 00:24:46,789
<font color="#E5E5E5">have a fast test and look at cached</font><font color="#CCCCCC"> okay</font>

377
00:24:44,219 --> 00:25:02,450
and yeah<font color="#E5E5E5"> thanks a lot</font>

378
00:24:46,789 --> 00:25:02,450
enjoy life any questions yes

379
00:25:09,270 --> 00:25:15,120
can you repeat<font color="#CCCCCC"> the question please yeah</font>

380
00:25:12,410 --> 00:25:21,840
you mean is there an integration into

381
00:25:15,120 --> 00:25:26,820
continuous integration or I'm actually

382
00:25:21,840 --> 00:25:29,100
doing it but not<font color="#E5E5E5"> in CI because it's a</font>

383
00:25:26,820 --> 00:25:32,610
<font color="#E5E5E5">little bit tricky you</font><font color="#CCCCCC"> need to have the</font>

384
00:25:29,100 --> 00:25:36,840
<font color="#E5E5E5">hardware exclusively if you want to have</font>

385
00:25:32,610 --> 00:25:39,870
accurate results<font color="#E5E5E5"> and like</font><font color="#CCCCCC"> even I don't</font>

386
00:25:36,840 --> 00:25:42,600
trust like a Jenkins process or<font color="#CCCCCC"> anything</font>

387
00:25:39,870 --> 00:25:46,429
<font color="#E5E5E5">running</font><font color="#CCCCCC"> on the machine or doing like</font>

388
00:25:42,600 --> 00:25:48,840
network traffic<font color="#E5E5E5"> and things like that</font><font color="#CCCCCC"> so</font>

389
00:25:46,430 --> 00:25:51,990
<font color="#E5E5E5">it's a little bit it's a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit</font>

390
00:25:48,840 --> 00:25:55,159
tricky to<font color="#E5E5E5"> do it right but it's it's a</font>

391
00:25:51,990 --> 00:25:55,160
good<font color="#CCCCCC"> idea to do it of course</font>

