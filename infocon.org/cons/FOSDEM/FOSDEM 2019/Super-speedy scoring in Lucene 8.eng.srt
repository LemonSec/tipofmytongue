1
00:00:04,880 --> 00:00:10,459
<font color="#E5E5E5">oh hello</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so yes hi my name is Alan</font>

2
00:00:08,360 --> 00:00:13,520
<font color="#E5E5E5">Woodward's I'm a committee on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> scene</font>

3
00:00:10,459 --> 00:00:15,830
and I work<font color="#E5E5E5"> for elastic</font><font color="#CCCCCC"> let's see I</font><font color="#E5E5E5"> got</font>

4
00:00:13,520 --> 00:00:18,140
my my<font color="#E5E5E5"> t-shirt fully branded and I'm</font>

5
00:00:15,830 --> 00:00:20,240
going<font color="#CCCCCC"> to talk about super speedy scoring</font>

6
00:00:18,140 --> 00:00:21,860
<font color="#E5E5E5">in</font><font color="#CCCCCC"> Lucy Knights those of you who are in</font>

7
00:00:20,240 --> 00:00:24,020
the previous talk will already<font color="#CCCCCC"> have a</font>

8
00:00:21,860 --> 00:00:25,910
general<font color="#E5E5E5"> lack of an overview of how this</font>

9
00:00:24,020 --> 00:00:31,550
is how<font color="#E5E5E5"> this works and I'll go into a bit</font>

10
00:00:25,910 --> 00:00:34,129
<font color="#CCCCCC">more detail so</font><font color="#E5E5E5"> we start off we're going</font>

11
00:00:31,550 --> 00:00:35,360
<font color="#E5E5E5">to talk</font><font color="#CCCCCC"> about the the lowest</font><font color="#E5E5E5"> level of</font>

12
00:00:34,129 --> 00:00:38,629
<font color="#E5E5E5">the</font><font color="#CCCCCC"> we've seen how</font><font color="#E5E5E5"> documents are</font>

13
00:00:35,360 --> 00:00:42,019
actually collected we have an<font color="#E5E5E5"> object a a</font>

14
00:00:38,629 --> 00:00:44,358
<font color="#CCCCCC">class called a scorer and</font><font color="#E5E5E5"> scorer has two</font>

15
00:00:42,019 --> 00:00:46,550
jobs first<font color="#E5E5E5"> job is</font><font color="#CCCCCC"> to provide an iterator</font>

16
00:00:44,359 --> 00:00:48,140
<font color="#E5E5E5">which</font><font color="#CCCCCC"> will go and find</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> and iterate</font>

17
00:00:46,550 --> 00:00:50,328
over all the<font color="#E5E5E5"> matching documents for your</font>

18
00:00:48,140 --> 00:00:53,289
particular query<font color="#E5E5E5"> and then it will also</font>

19
00:00:50,329 --> 00:00:55,850
give each of<font color="#CCCCCC"> those documents a score</font>

20
00:00:53,289 --> 00:00:57,859
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> always in the same order</font><font color="#CCCCCC"> you're</font>

21
00:00:55,850 --> 00:01:01,549
always going in in<font color="#E5E5E5"> the in terms</font><font color="#CCCCCC"> of</font>

22
00:00:57,859 --> 00:01:04,339
increasing<font color="#E5E5E5"> document ID and as we score</font>

23
00:01:01,549 --> 00:01:06,890
everything then we we have a priority

24
00:01:04,339 --> 00:01:08,450
queue which<font color="#CCCCCC"> says okay I</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> the top ten</font>

25
00:01:06,890 --> 00:01:11,090
<font color="#E5E5E5">matching document so I have a priority</font>

26
00:01:08,450 --> 00:01:13,640
queue of depth<font color="#CCCCCC"> ten as we as we go</font>

27
00:01:11,090 --> 00:01:15,649
<font color="#E5E5E5">through each document will generate a</font>

28
00:01:13,640 --> 00:01:17,240
<font color="#E5E5E5">score for</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> if it's going to be</font>

29
00:01:15,649 --> 00:01:19,219
competitively inserted into the priority

30
00:01:17,240 --> 00:01:22,759
queue if it's not competitive<font color="#E5E5E5"> we can</font>

31
00:01:19,219 --> 00:01:26,240
ignore it so just as an example<font color="#E5E5E5"> here</font>

32
00:01:22,759 --> 00:01:29,390
let's say we've got document IDs from<font color="#E5E5E5"> 0</font>

33
00:01:26,240 --> 00:01:32,719
to<font color="#E5E5E5"> 7 and as we as we</font><font color="#CCCCCC"> go through each</font><font color="#E5E5E5"> one</font>

34
00:01:29,390 --> 00:01:35,090
<font color="#CCCCCC">will say here's his document 0 we know</font>

35
00:01:32,719 --> 00:01:37,939
this matches<font color="#CCCCCC"> we're gonna give it a score</font>

36
00:01:35,090 --> 00:01:40,009
the scores<font color="#E5E5E5"> 2.5 fine next one score at</font>

37
00:01:37,939 --> 00:01:43,219
one<font color="#E5E5E5"> point six two point five zero five</font>

38
00:01:40,009 --> 00:01:45,039
<font color="#CCCCCC">as we go</font><font color="#E5E5E5"> and we</font><font color="#CCCCCC"> can say if we're going</font>

39
00:01:43,219 --> 00:01:47,600
<font color="#E5E5E5">to collect say the top five</font><font color="#CCCCCC"> documents</font>

40
00:01:45,039 --> 00:01:48,799
then our top documents here will be<font color="#CCCCCC"> zero</font>

41
00:01:47,600 --> 00:01:51,259
because that's<font color="#CCCCCC"> two point five and then</font>

42
00:01:48,799 --> 00:01:54,710
<font color="#CCCCCC">two that's also two point five and then</font>

43
00:01:51,259 --> 00:01:55,820
one and then seven and then five now<font color="#E5E5E5"> if</font>

44
00:01:54,710 --> 00:01:58,130
we were only going to<font color="#E5E5E5"> collect the top</font>

45
00:01:55,820 --> 00:02:00,020
three documents<font color="#E5E5E5"> here you'll notice that</font>

46
00:01:58,130 --> 00:02:00,789
<font color="#E5E5E5">we get we actually fill up our attic you</font>

47
00:02:00,020 --> 00:02:02,960
<font color="#E5E5E5">immediately</font>

48
00:02:00,789 --> 00:02:04,490
then everything else we're<font color="#E5E5E5"> going through</font>

49
00:02:02,960 --> 00:02:09,318
<font color="#E5E5E5">we're scoring and it's just a waste of</font>

50
00:02:04,490 --> 00:02:11,510
CPU<font color="#CCCCCC"> cycles</font><font color="#E5E5E5"> none</font><font color="#CCCCCC"> of this information is</font>

51
00:02:09,318 --> 00:02:14,359
<font color="#E5E5E5">going to get into</font><font color="#CCCCCC"> our top ten and</font>

52
00:02:11,510 --> 00:02:16,220
particularly because even there's one at

53
00:02:14,360 --> 00:02:18,740
the<font color="#E5E5E5"> end here one point six which has the</font>

54
00:02:16,220 --> 00:02:21,530
same<font color="#E5E5E5"> score</font><font color="#CCCCCC"> as this one here</font><font color="#E5E5E5"> but</font>

55
00:02:18,740 --> 00:02:23,210
it has a higher document ID and our

56
00:02:21,530 --> 00:02:25,370
secondary score our secondary sorting

57
00:02:23,210 --> 00:02:28,430
mechanism is always lower document ID

58
00:02:25,370 --> 00:02:31,700
wins<font color="#CCCCCC"> we're still going</font><font color="#E5E5E5"> to ignore</font><font color="#CCCCCC"> that</font>

59
00:02:28,430 --> 00:02:36,230
one<font color="#E5E5E5"> so this means that if we</font><font color="#CCCCCC"> want to</font>

60
00:02:31,700 --> 00:02:41,299
<font color="#E5E5E5">break things up a bit</font><font color="#CCCCCC"> then we can skip</font>

61
00:02:36,230 --> 00:02:45,320
<font color="#CCCCCC">over large chunks of</font><font color="#E5E5E5"> large chunks of</font><font color="#CCCCCC"> the</font>

62
00:02:41,300 --> 00:02:47,150
index<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we can say particularly things</font>

63
00:02:45,320 --> 00:02:50,200
<font color="#CCCCCC">like well for a constant score</font><font color="#E5E5E5"> for</font>

64
00:02:47,150 --> 00:02:53,060
example if you say a match<font color="#E5E5E5"> all documents</font>

65
00:02:50,200 --> 00:02:56,060
<font color="#CCCCCC">natural documents query</font><font color="#E5E5E5"> we could</font>

66
00:02:53,060 --> 00:02:58,070
actually just<font color="#E5E5E5"> stop collecting after we</font>

67
00:02:56,060 --> 00:02:59,690
<font color="#E5E5E5">fill the priority queue which in for a</font>

68
00:02:58,070 --> 00:03:01,310
constant score query would just be the

69
00:02:59,690 --> 00:03:04,970
first<font color="#CCCCCC"> ten and then you could stop you</font>

70
00:03:01,310 --> 00:03:07,120
could<font color="#E5E5E5"> choke up</font><font color="#CCCCCC"> that's fine for a</font>

71
00:03:04,970 --> 00:03:09,620
<font color="#E5E5E5">constant score query but obviously for</font>

72
00:03:07,120 --> 00:03:12,290
queries that<font color="#E5E5E5"> we're scoring using term</font>

73
00:03:09,620 --> 00:03:15,050
weighting we need to use a slightly more

74
00:03:12,290 --> 00:03:17,420
complicated mechanism here and the

75
00:03:15,050 --> 00:03:20,570
mechanism we use<font color="#E5E5E5"> is we chop things up</font>

76
00:03:17,420 --> 00:03:23,209
into blocks<font color="#E5E5E5"> so here we are we've chopped</font>

77
00:03:20,570 --> 00:03:27,079
it into<font color="#E5E5E5"> four blocks and then we record</font>

78
00:03:23,210 --> 00:03:29,750
the maximum score for each block in the

79
00:03:27,080 --> 00:03:32,870
index so we'll say when<font color="#E5E5E5"> we're again when</font>

80
00:03:29,750 --> 00:03:35,600
<font color="#CCCCCC">we we're moving through we</font><font color="#E5E5E5"> start off</font>

81
00:03:32,870 --> 00:03:36,770
<font color="#CCCCCC">here</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> we've with collects collect</font>

82
00:03:35,600 --> 00:03:38,150
<font color="#E5E5E5">our documents we've got two point five</font>

83
00:03:36,770 --> 00:03:40,430
we have one<font color="#E5E5E5"> point six we have two point</font>

84
00:03:38,150 --> 00:03:43,130
five we have zero point five<font color="#E5E5E5"> we know</font>

85
00:03:40,430 --> 00:03:47,780
that our minimum minimum competitive

86
00:03:43,130 --> 00:03:49,579
score is one point six we get to the

87
00:03:47,780 --> 00:03:51,050
<font color="#E5E5E5">next block</font><font color="#CCCCCC"> and we know</font><font color="#E5E5E5"> that the maximum</font>

88
00:03:49,580 --> 00:03:53,540
<font color="#CCCCCC">possible score in this block is one</font>

89
00:03:51,050 --> 00:03:55,070
point one that's not<font color="#E5E5E5"> going to fit into</font>

90
00:03:53,540 --> 00:03:56,480
<font color="#E5E5E5">the priority queue</font><font color="#CCCCCC"> we can skip</font><font color="#E5E5E5"> straight</font>

91
00:03:55,070 --> 00:03:58,549
over<font color="#E5E5E5"> we come to the next one</font>

92
00:03:56,480 --> 00:04:00,109
<font color="#E5E5E5">so I need to do okay let's do my arrow</font>

93
00:03:58,550 --> 00:04:02,360
we come to the<font color="#CCCCCC"> next</font><font color="#E5E5E5"> one</font>

94
00:04:00,110 --> 00:04:03,500
that's from score is one point six<font color="#E5E5E5"> again</font>

95
00:04:02,360 --> 00:04:05,420
we know that's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> going to fit into the</font>

96
00:04:03,500 --> 00:04:09,440
<font color="#E5E5E5">priority queue so we can ignore</font><font color="#CCCCCC"> it we</font>

97
00:04:05,420 --> 00:04:10,970
can keep<font color="#CCCCCC"> moving and</font><font color="#E5E5E5"> in this way we can</font>

98
00:04:09,440 --> 00:04:15,530
short-circuit we don't have to calculate

99
00:04:10,970 --> 00:04:18,160
scores<font color="#CCCCCC"> for any of these documents</font><font color="#E5E5E5"> which</font>

100
00:04:15,530 --> 00:04:18,160
was speed things up

101
00:04:22,200 --> 00:04:28,479
so we<font color="#E5E5E5"> don't really want</font><font color="#CCCCCC"> to school</font><font color="#E5E5E5"> the</font>

102
00:04:26,560 --> 00:04:31,840
actual so we don't want to store the

103
00:04:28,480 --> 00:04:33,850
score in the index<font color="#E5E5E5"> because as Jagger was</font>

104
00:04:31,840 --> 00:04:35,080
said in his question at the end<font color="#E5E5E5"> you</font>

105
00:04:33,850 --> 00:04:38,470
might<font color="#E5E5E5"> want to change your scoring</font>

106
00:04:35,080 --> 00:04:40,240
mechanism so what instead what we can do

107
00:04:38,470 --> 00:04:43,240
is we can have a look at how we're going

108
00:04:40,240 --> 00:04:46,380
to<font color="#E5E5E5"> calculate these scores</font><font color="#CCCCCC"> obviously the</font>

109
00:04:43,240 --> 00:04:50,380
standard scoring<font color="#E5E5E5"> is beyond 25 in</font><font color="#CCCCCC"> leucine</font>

110
00:04:46,380 --> 00:04:52,090
<font color="#E5E5E5">but any other</font><font color="#CCCCCC"> scoring that's based on</font>

111
00:04:50,380 --> 00:04:53,800
term waiting it's going to be you're

112
00:04:52,090 --> 00:04:56,049
going<font color="#E5E5E5"> to be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> split the factors</font>

113
00:04:53,800 --> 00:04:59,080
<font color="#E5E5E5">that contribute to the score into two</font>

114
00:04:56,050 --> 00:05:01,330
parts<font color="#CCCCCC"> you have parts which</font><font color="#E5E5E5"> are global</font>

115
00:04:59,080 --> 00:05:04,120
<font color="#E5E5E5">for the index so things like the total</font>

116
00:05:01,330 --> 00:05:05,320
term<font color="#CCCCCC"> weight</font><font color="#E5E5E5"> so a total</font><font color="#CCCCCC"> turn frequency</font>

117
00:05:04,120 --> 00:05:08,590
that's the number<font color="#E5E5E5"> of times that term</font>

118
00:05:05,320 --> 00:05:10,420
appears<font color="#CCCCCC"> in the index as a whole the</font>

119
00:05:08,590 --> 00:05:12,070
average document length which<font color="#E5E5E5"> is used in</font>

120
00:05:10,420 --> 00:05:14,890
<font color="#CCCCCC">BM 25 again that's something that's</font>

121
00:05:12,070 --> 00:05:16,210
fixed<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the entire index it doesn't</font>

122
00:05:14,890 --> 00:05:18,580
depend<font color="#E5E5E5"> on which document you're</font><font color="#CCCCCC"> looking</font>

123
00:05:16,210 --> 00:05:22,900
at<font color="#E5E5E5"> and then the per document</font>

124
00:05:18,580 --> 00:05:25,630
contributions we have<font color="#CCCCCC"> to we</font><font color="#E5E5E5"> have the</font>

125
00:05:22,900 --> 00:05:28,750
document length and we<font color="#E5E5E5"> have the</font>

126
00:05:25,630 --> 00:05:30,040
<font color="#CCCCCC">frequency of the term</font><font color="#E5E5E5"> document length we</font>

127
00:05:28,750 --> 00:05:31,330
don't in listen doesn't actually store

128
00:05:30,040 --> 00:05:33,250
the full document length extols<font color="#E5E5E5"> got</font>

129
00:05:31,330 --> 00:05:34,780
something<font color="#E5E5E5"> called a norm which is a kind</font>

130
00:05:33,250 --> 00:05:38,710
<font color="#CCCCCC">of a compressed</font><font color="#E5E5E5"> version of that document</font>

131
00:05:34,780 --> 00:05:40,450
length<font color="#CCCCCC"> we mentioned earlier that the the</font>

132
00:05:38,710 --> 00:05:42,940
encoding for that has changed in leucine

133
00:05:40,450 --> 00:05:46,270
<font color="#CCCCCC">8</font><font color="#E5E5E5"> and the main reason that's changed is</font>

134
00:05:42,940 --> 00:05:49,870
so that's now<font color="#E5E5E5"> I think it's numb document</font>

135
00:05:46,270 --> 00:05:51,609
links from<font color="#E5E5E5"> 0 to 10 are completely</font>

136
00:05:49,870 --> 00:05:54,490
<font color="#CCCCCC">accurate and then above that you start</font>

137
00:05:51,610 --> 00:05:56,110
to<font color="#E5E5E5"> lose</font><font color="#CCCCCC"> accuracy</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> we're only</font>

138
00:05:54,490 --> 00:05:59,320
<font color="#E5E5E5">storing it in a single bytes but it's a</font>

139
00:05:56,110 --> 00:06:02,050
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> a log value but we had this pair of</font>

140
00:05:59,320 --> 00:06:06,280
<font color="#CCCCCC">this pair of</font><font color="#E5E5E5"> values this</font><font color="#CCCCCC"> Norman's</font>

141
00:06:02,050 --> 00:06:09,910
frequency<font color="#E5E5E5"> and we call that an impact now</font>

142
00:06:06,280 --> 00:06:12,969
what you can do is you can instead<font color="#CCCCCC"> of</font>

143
00:06:09,910 --> 00:06:16,240
<font color="#E5E5E5">storing</font><font color="#CCCCCC"> the calculated score in</font><font color="#E5E5E5"> your in</font>

144
00:06:12,970 --> 00:06:22,920
<font color="#E5E5E5">the skip lists</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> still store this</font>

145
00:06:16,240 --> 00:06:22,920
impact<font color="#E5E5E5"> this pair</font><font color="#CCCCCC"> of values</font><font color="#E5E5E5"> now</font>

146
00:06:23,830 --> 00:06:31,700
obviously this<font color="#E5E5E5"> comes with a trade-off</font>

147
00:06:25,850 --> 00:06:33,470
<font color="#CCCCCC">and the trade-off</font><font color="#E5E5E5"> is that's we need</font><font color="#CCCCCC"> the</font>

148
00:06:31,700 --> 00:06:38,510
similarity to behave in a<font color="#CCCCCC"> certain way</font>

149
00:06:33,470 --> 00:06:40,790
when this pair<font color="#CCCCCC"> of values</font><font color="#E5E5E5"> changes so our</font>

150
00:06:38,510 --> 00:06:42,950
constraints now are that if your term

151
00:06:40,790 --> 00:06:48,650
<font color="#E5E5E5">frequency increases the score must</font>

152
00:06:42,950 --> 00:06:49,849
increase<font color="#E5E5E5"> this this is so</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> if</font>

153
00:06:48,650 --> 00:06:51,679
you're going<font color="#E5E5E5"> to calculate the</font><font color="#CCCCCC"> maximum</font>

154
00:06:49,850 --> 00:06:53,420
score you need<font color="#E5E5E5"> to calculating maximum</font>

155
00:06:51,680 --> 00:06:54,830
scores for maximum<font color="#E5E5E5"> turn frequencies so</font>

156
00:06:53,420 --> 00:06:57,770
you need to<font color="#E5E5E5"> make sure that</font><font color="#CCCCCC"> those two</font>

157
00:06:54,830 --> 00:07:00,109
<font color="#E5E5E5">correlate</font><font color="#CCCCCC"> and then similarly with the</font>

158
00:06:57,770 --> 00:07:01,849
norm<font color="#E5E5E5"> if the norm decreases so if the</font>

159
00:07:00,110 --> 00:07:02,270
<font color="#CCCCCC">norm increases then the score must</font>

160
00:07:01,850 --> 00:07:03,770
<font color="#E5E5E5">decrease</font>

161
00:07:02,270 --> 00:07:07,640
so we're saying generally speaking

162
00:07:03,770 --> 00:07:09,140
longer documents are less useful than

163
00:07:07,640 --> 00:07:10,630
shorter documents in terms of the

164
00:07:09,140 --> 00:07:16,190
contribution of<font color="#E5E5E5"> an individual terms</font>

165
00:07:10,630 --> 00:07:17,780
<font color="#CCCCCC">score so we are</font><font color="#E5E5E5"> defining that we're</font>

166
00:07:16,190 --> 00:07:19,100
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to say</font><font color="#CCCCCC"> all right we'll make</font><font color="#E5E5E5"> that</font>

167
00:07:17,780 --> 00:07:20,780
an official<font color="#CCCCCC"> definition we make</font><font color="#E5E5E5"> that an</font>

168
00:07:19,100 --> 00:07:22,820
official constraint on the similarity<font color="#E5E5E5"> if</font>

169
00:07:20,780 --> 00:07:25,099
the normal increases then the score must

170
00:07:22,820 --> 00:07:27,280
<font color="#E5E5E5">decrease</font><font color="#CCCCCC"> and if we if you</font><font color="#E5E5E5"> have a</font>

171
00:07:25,100 --> 00:07:32,030
<font color="#CCCCCC">similarity that adheres to these two</font>

172
00:07:27,280 --> 00:07:36,349
then you can use this new<font color="#E5E5E5"> block max</font>

173
00:07:32,030 --> 00:07:39,049
functionality so let's have<font color="#E5E5E5"> a look at</font>

174
00:07:36,350 --> 00:07:41,090
some individual<font color="#CCCCCC"> queries and see how the</font>

175
00:07:39,050 --> 00:07:47,240
scoring<font color="#E5E5E5"> this new scoring mechanism</font>

176
00:07:41,090 --> 00:07:49,099
impacts those so a term query<font color="#E5E5E5"> term query</font>

177
00:07:47,240 --> 00:07:52,730
is the the<font color="#E5E5E5"> absolute basic query in</font>

178
00:07:49,100 --> 00:07:55,220
<font color="#CCCCCC">Lucene and all it</font><font color="#E5E5E5"> does is it has we</font><font color="#CCCCCC"> have</font>

179
00:07:52,730 --> 00:07:57,110
these<font color="#E5E5E5"> two your two methods on</font><font color="#CCCCCC"> the scorer</font>

180
00:07:55,220 --> 00:07:58,520
<font color="#E5E5E5">you have the iterator and</font><font color="#CCCCCC"> the iterator</font>

181
00:07:57,110 --> 00:08:01,340
just<font color="#E5E5E5"> basically goes over the postings</font>

182
00:07:58,520 --> 00:08:03,530
<font color="#E5E5E5">list for a term so you have your index</font>

183
00:08:01,340 --> 00:08:05,510
your index is<font color="#E5E5E5"> a big long alphabetically</font>

184
00:08:03,530 --> 00:08:07,070
sorted list of<font color="#E5E5E5"> terms and then against</font>

185
00:08:05,510 --> 00:08:10,039
each of those terms<font color="#E5E5E5"> you then have a list</font>

186
00:08:07,070 --> 00:08:12,260
of documents<font color="#CCCCCC"> in which that's that</font><font color="#E5E5E5"> term</font>

187
00:08:10,040 --> 00:08:13,910
appears and if you want to find which

188
00:08:12,260 --> 00:08:16,760
<font color="#CCCCCC">documents are</font><font color="#E5E5E5"> matching a term you go you</font>

189
00:08:13,910 --> 00:08:18,620
look up in<font color="#E5E5E5"> the terms dictionary you find</font>

190
00:08:16,760 --> 00:08:20,719
the term you're looking<font color="#CCCCCC"> for and then you</font>

191
00:08:18,620 --> 00:08:25,310
<font color="#E5E5E5">just read off the postings list and that</font>

192
00:08:20,720 --> 00:08:26,630
gives you the documents in order so when

193
00:08:25,310 --> 00:08:29,180
we divide in things up into<font color="#E5E5E5"> blocks we</font>

194
00:08:26,630 --> 00:08:30,409
can say okay well<font color="#E5E5E5"> we know given the</font>

195
00:08:29,180 --> 00:08:32,060
beginning of this block we know what the

196
00:08:30,410 --> 00:08:36,330
maximum<font color="#CCCCCC"> term frequency</font><font color="#E5E5E5"> and the maximum</font>

197
00:08:32,059 --> 00:08:37,919
<font color="#E5E5E5">norm or minimum norm</font><font color="#CCCCCC"> thank you</font>

198
00:08:36,330 --> 00:08:39,419
minimum<font color="#E5E5E5"> norm is we can</font><font color="#CCCCCC"> calculate what</font>

199
00:08:37,919 --> 00:08:44,399
<font color="#E5E5E5">the</font><font color="#CCCCCC"> maximum score</font><font color="#E5E5E5"> for this particular</font>

200
00:08:39,419 --> 00:08:46,279
block will be as we're iterating over

201
00:08:44,399 --> 00:08:48,240
you say okay give me the next<font color="#CCCCCC"> document</font>

202
00:08:46,279 --> 00:08:49,350
you could say I'd give me the next

203
00:08:48,240 --> 00:08:50,370
<font color="#CCCCCC">instead</font><font color="#E5E5E5"> of saying give me the next</font>

204
00:08:49,350 --> 00:08:53,120
<font color="#E5E5E5">document you say give me the next</font>

205
00:08:50,370 --> 00:08:55,589
<font color="#CCCCCC">document whose score is more</font><font color="#E5E5E5"> than X and</font>

206
00:08:53,120 --> 00:08:58,980
underneath it can go well I know<font color="#E5E5E5"> I've</font>

207
00:08:55,589 --> 00:09:01,890
got<font color="#E5E5E5"> to this block here</font><font color="#CCCCCC"> I can calculate</font>

208
00:08:58,980 --> 00:09:03,329
the I can extract the impacts<font color="#E5E5E5"> from this</font>

209
00:09:01,890 --> 00:09:04,829
block I can<font color="#E5E5E5"> calculate the maximum</font><font color="#CCCCCC"> score</font>

210
00:09:03,329 --> 00:09:07,349
that this block could possibly give<font color="#E5E5E5"> us</font>

211
00:09:04,829 --> 00:09:12,199
if it's not competitive<font color="#CCCCCC"> I can skip</font><font color="#E5E5E5"> over</font>

212
00:09:07,350 --> 00:09:15,089
it entirely<font color="#E5E5E5"> go decode the next block</font><font color="#CCCCCC"> and</font>

213
00:09:12,200 --> 00:09:17,550
<font color="#CCCCCC">we already have as they discussed</font>

214
00:09:15,089 --> 00:09:23,040
<font color="#E5E5E5">earlier and</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> actually as Paul was</font>

215
00:09:17,550 --> 00:09:25,680
<font color="#E5E5E5">talking about in his</font><font color="#CCCCCC"> Thanh TV talk</font><font color="#E5E5E5"> about</font>

216
00:09:23,040 --> 00:09:28,050
an hour ago<font color="#CCCCCC"> we</font><font color="#E5E5E5"> already have this this in</font>

217
00:09:25,680 --> 00:09:29,640
this<font color="#E5E5E5"> structured data structure in the</font>

218
00:09:28,050 --> 00:09:31,410
scene called a<font color="#CCCCCC"> Skip list</font><font color="#E5E5E5"> which allows</font>

219
00:09:29,640 --> 00:09:34,319
<font color="#E5E5E5">you to advance</font><font color="#CCCCCC"> quickly over a postings</font>

220
00:09:31,410 --> 00:09:35,939
list<font color="#E5E5E5"> so we can</font><font color="#CCCCCC"> just we can</font><font color="#E5E5E5"> encode this</font>

221
00:09:34,320 --> 00:09:37,350
information into the Skip list<font color="#E5E5E5"> it's</font>

222
00:09:35,940 --> 00:09:39,930
already there there's not actually a<font color="#CCCCCC"> lot</font>

223
00:09:37,350 --> 00:09:43,230
<font color="#E5E5E5">of changes at</font><font color="#CCCCCC"> least to be made to the</font>

224
00:09:39,930 --> 00:09:46,729
data structure or<font color="#CCCCCC"> indeed to the indexing</font>

225
00:09:43,230 --> 00:09:49,980
<font color="#E5E5E5">code it's kind of</font><font color="#CCCCCC"> already there</font>

226
00:09:46,730 --> 00:09:52,260
there are as well as not counting all

227
00:09:49,980 --> 00:09:53,670
the documents as well<font color="#E5E5E5"> as not visiting</font>

228
00:09:52,260 --> 00:09:54,720
all the documents<font color="#CCCCCC"> and not</font><font color="#E5E5E5"> scoring all</font>

229
00:09:53,670 --> 00:09:55,890
the documents

230
00:09:54,720 --> 00:09:59,339
there's<font color="#E5E5E5"> also means we don't have to</font>

231
00:09:55,890 --> 00:10:02,910
decode all<font color="#E5E5E5"> the documents so when you</font>

232
00:09:59,339 --> 00:10:03,959
advance through a block<font color="#CCCCCC"> what normally</font>

233
00:10:02,910 --> 00:10:06,870
happens is you<font color="#E5E5E5"> get to the</font><font color="#CCCCCC"> next block</font>

234
00:10:03,959 --> 00:10:08,430
<font color="#CCCCCC">it's compressed so we need to decompress</font>

235
00:10:06,870 --> 00:10:12,240
<font color="#CCCCCC">it we need to</font><font color="#E5E5E5"> extract all the document</font>

236
00:10:08,430 --> 00:10:14,670
IDs<font color="#E5E5E5"> from this block but if we if</font><font color="#CCCCCC"> we know</font>

237
00:10:12,240 --> 00:10:16,410
<font color="#E5E5E5">that we're</font><font color="#CCCCCC"> not we're not having to read</font>

238
00:10:14,670 --> 00:10:19,319
<font color="#E5E5E5">this data from this block because the</font>

239
00:10:16,410 --> 00:10:20,880
<font color="#CCCCCC">the Skip list is telling us</font><font color="#E5E5E5"> that's the</font>

240
00:10:19,320 --> 00:10:22,500
<font color="#CCCCCC">score there aren't any competitive</font>

241
00:10:20,880 --> 00:10:24,870
scores in the block we<font color="#E5E5E5"> can avoid</font><font color="#CCCCCC"> any of</font>

242
00:10:22,500 --> 00:10:27,120
<font color="#E5E5E5">this</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> CPU work and lots of this i/o</font>

243
00:10:24,870 --> 00:10:31,290
work as well<font color="#E5E5E5"> so actually we can get an</font>

244
00:10:27,120 --> 00:10:36,959
incredible speed up<font color="#CCCCCC"> for term queries in</font>

245
00:10:31,290 --> 00:10:39,029
this particular case we<font color="#E5E5E5"> have a set of</font>

246
00:10:36,959 --> 00:10:43,739
set of<font color="#E5E5E5"> benchmarks which</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> run every</font>

247
00:10:39,029 --> 00:10:48,689
night against<font color="#E5E5E5"> its Wikipedia corpus with</font>

248
00:10:43,740 --> 00:10:51,079
a bunch of fairly<font color="#CCCCCC"> - so we're done</font>

249
00:10:48,690 --> 00:10:53,790
<font color="#CCCCCC">looking for</font>

250
00:10:51,079 --> 00:10:56,008
standard queries it's a standard query

251
00:10:53,790 --> 00:10:57,959
set<font color="#E5E5E5"> and the term queer in particularly</font>

252
00:10:56,009 --> 00:10:59,850
<font color="#E5E5E5">before was running on</font><font color="#CCCCCC"> at a nice 33</font>

253
00:10:57,959 --> 00:11:00,479
queries per second which is<font color="#E5E5E5"> perfectly</font>

254
00:10:59,850 --> 00:11:04,199
<font color="#E5E5E5">reasonable</font>

255
00:11:00,480 --> 00:11:06,569
<font color="#E5E5E5">it's jumped up overnight to</font><font color="#CCCCCC"> 1,150</font>

256
00:11:04,199 --> 00:11:08,219
queries per second which is<font color="#E5E5E5"> a fairly</font>

257
00:11:06,569 --> 00:11:12,599
significant increase<font color="#E5E5E5"> I think we could</font>

258
00:11:08,220 --> 00:11:19,470
all<font color="#CCCCCC"> agree on that</font><font color="#E5E5E5"> one so that's pretty</font>

259
00:11:12,600 --> 00:11:22,199
cool the constants<font color="#CCCCCC"> cool queries as I was</font>

260
00:11:19,470 --> 00:11:23,699
<font color="#E5E5E5">talking about earlier</font><font color="#CCCCCC"> if we're not</font>

261
00:11:22,199 --> 00:11:25,519
<font color="#CCCCCC">interested</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> counting</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> total number</font>

262
00:11:23,699 --> 00:11:28,169
of<font color="#E5E5E5"> hits we just want to shortcut things</font>

263
00:11:25,519 --> 00:11:29,749
<font color="#E5E5E5">we can say well because we know that</font>

264
00:11:28,169 --> 00:11:33,779
everything's got the same score<font color="#CCCCCC"> and</font>

265
00:11:29,749 --> 00:11:37,069
because the secondary<font color="#E5E5E5"> sort order</font><font color="#CCCCCC"> is by</font>

266
00:11:33,779 --> 00:11:39,540
increasing document ID the first<font color="#CCCCCC"> ten</font>

267
00:11:37,069 --> 00:11:43,108
documents<font color="#E5E5E5"> that match other foot going to</font>

268
00:11:39,540 --> 00:11:44,279
be the top 10 scoring results so we can

269
00:11:43,109 --> 00:11:48,209
<font color="#CCCCCC">just shortcut and return them</font>

270
00:11:44,279 --> 00:11:50,489
<font color="#CCCCCC">straightaway</font><font color="#E5E5E5"> match</font><font color="#CCCCCC"> all Doc's query I</font>

271
00:11:48,209 --> 00:11:51,809
don't have<font color="#E5E5E5"> actual proper numbers for</font>

272
00:11:50,489 --> 00:11:54,089
<font color="#E5E5E5">this because</font><font color="#CCCCCC"> Batchelor Doc's query isn't</font>

273
00:11:51,809 --> 00:11:57,949
<font color="#E5E5E5">part of the standard</font><font color="#CCCCCC"> loosing benchmarks</font>

274
00:11:54,089 --> 00:11:59,879
<font color="#E5E5E5">we did do a we noticed in elastic search</font>

275
00:11:57,949 --> 00:12:02,579
elastic search has its own set<font color="#CCCCCC"> of</font>

276
00:11:59,879 --> 00:12:04,949
benchmarks<font color="#E5E5E5"> we noticed that</font><font color="#CCCCCC"> virtual dr.</font>

277
00:12:02,579 --> 00:12:08,160
<font color="#CCCCCC">Corey had actually slowed down after</font>

278
00:12:04,949 --> 00:12:10,498
after we implemented<font color="#E5E5E5"> all this the block</font>

279
00:12:08,160 --> 00:12:12,149
back scoring and it turned out<font color="#E5E5E5"> this is</font>

280
00:12:10,499 --> 00:12:14,819
because it was using<font color="#E5E5E5"> a bulk scorer which</font>

281
00:12:12,149 --> 00:12:18,119
didn't take<font color="#E5E5E5"> things into account and once</font>

282
00:12:14,819 --> 00:12:19,559
we did do<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we replace the bug score</font>

283
00:12:18,119 --> 00:12:21,899
with the sender<font color="#CCCCCC"> belts Cora if you don't</font>

284
00:12:19,559 --> 00:12:23,429
<font color="#E5E5E5">need to collect all documents</font><font color="#CCCCCC"> max'll</font>

285
00:12:21,899 --> 00:12:25,739
<font color="#CCCCCC">docs</font><font color="#E5E5E5"> query sped up by I think it's</font>

286
00:12:23,429 --> 00:12:29,488
something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> 4,000</font><font color="#E5E5E5"> percent so that's</font>

287
00:12:25,739 --> 00:12:31,319
another another useful one<font color="#CCCCCC"> wildcards</font><font color="#E5E5E5"> and</font>

288
00:12:29,489 --> 00:12:33,480
fuzzy queries tend to get rewritten to

289
00:12:31,319 --> 00:12:35,309
<font color="#E5E5E5">constants or queries</font><font color="#CCCCCC"> because when you're</font>

290
00:12:33,480 --> 00:12:36,629
<font color="#E5E5E5">expanding out a world card or expanding</font>

291
00:12:35,309 --> 00:12:39,089
out a fuzzy query to all the different

292
00:12:36,629 --> 00:12:41,939
terms<font color="#E5E5E5"> it's not obvious how</font><font color="#CCCCCC"> you would</font>

293
00:12:39,089 --> 00:12:43,889
otherwise<font color="#E5E5E5"> combine the term frequencies</font>

294
00:12:41,939 --> 00:12:46,289
of all those matches of all<font color="#E5E5E5"> the terms</font>

295
00:12:43,889 --> 00:12:47,429
<font color="#CCCCCC">that</font><font color="#E5E5E5"> could possibly match so we</font><font color="#CCCCCC"> tend to</font>

296
00:12:46,289 --> 00:12:49,439
just<font color="#E5E5E5"> replace it with a constant score</font>

297
00:12:47,429 --> 00:12:51,899
query and use any other<font color="#E5E5E5"> terms that you</font>

298
00:12:49,439 --> 00:12:56,160
<font color="#CCCCCC">have in that query to provide the term</font>

299
00:12:51,899 --> 00:12:59,639
<font color="#CCCCCC">weighting</font><font color="#E5E5E5"> these all get so walk our</font>

300
00:12:56,160 --> 00:13:01,829
query fuzzy query prefix query<font color="#CCCCCC"> the</font>

301
00:12:59,639 --> 00:13:03,690
general or Thomson queries can all use

302
00:13:01,829 --> 00:13:07,829
<font color="#CCCCCC">this mechanism as well</font>

303
00:13:03,690 --> 00:13:11,340
and so<font color="#CCCCCC"> prefix</font><font color="#E5E5E5"> purity for example</font><font color="#CCCCCC"> jumped</font>

304
00:13:07,830 --> 00:13:14,720
<font color="#CCCCCC">from 15 to 35</font><font color="#E5E5E5"> quiz per second that's not</font>

305
00:13:11,340 --> 00:13:18,540
as big a gap as the<font color="#CCCCCC"> term query obviously</font>

306
00:13:14,720 --> 00:13:21,060
<font color="#CCCCCC">the reason</font><font color="#E5E5E5"> for that is that's for prefix</font>

307
00:13:18,540 --> 00:13:25,079
queries<font color="#E5E5E5"> and for</font><font color="#CCCCCC"> the these</font><font color="#E5E5E5"> queries which</font>

308
00:13:21,060 --> 00:13:27,089
are expanded into multi terms<font color="#E5E5E5"> about half</font>

309
00:13:25,080 --> 00:13:28,830
the time<font color="#E5E5E5"> the query time is spent</font>

310
00:13:27,090 --> 00:13:31,920
actually<font color="#CCCCCC"> doing that expansion rather</font>

311
00:13:28,830 --> 00:13:33,660
than collecting<font color="#E5E5E5"> documents</font><font color="#CCCCCC"> so these big</font>

312
00:13:31,920 --> 00:13:36,180
improvements at collection time don't

313
00:13:33,660 --> 00:13:42,180
<font color="#E5E5E5">have as as significant an impact for</font>

314
00:13:36,180 --> 00:13:43,709
these sort of queries<font color="#CCCCCC"> then on</font><font color="#E5E5E5"> top of the</font>

315
00:13:42,180 --> 00:13:45,359
term query obviously the next<font color="#E5E5E5"> important</font>

316
00:13:43,710 --> 00:13:46,380
one here is the<font color="#E5E5E5"> boolean query so how</font>

317
00:13:45,360 --> 00:13:49,920
<font color="#CCCCCC">would how are we going</font><font color="#E5E5E5"> to combine all</font>

318
00:13:46,380 --> 00:13:52,680
<font color="#CCCCCC">these different terms</font><font color="#E5E5E5"> together</font><font color="#CCCCCC"> boolean</font>

319
00:13:49,920 --> 00:13:55,439
queries<font color="#CCCCCC"> work by they're scored by just</font>

320
00:13:52,680 --> 00:13:58,589
summing up all of the matching clauses

321
00:13:55,440 --> 00:14:00,240
on a particular<font color="#E5E5E5"> document</font><font color="#CCCCCC"> so the maximum</font>

322
00:13:58,590 --> 00:14:05,940
<font color="#E5E5E5">score is</font><font color="#CCCCCC"> just the sum of the maximum</font>

323
00:14:00,240 --> 00:14:08,010
scores for<font color="#E5E5E5"> its sub-clauses</font><font color="#CCCCCC"> we don't</font>

324
00:14:05,940 --> 00:14:10,650
again we<font color="#E5E5E5"> don't get as an impressive</font>

325
00:14:08,010 --> 00:14:12,990
<font color="#E5E5E5">speed up here because it's by its very</font>

326
00:14:10,650 --> 00:14:15,180
nature<font color="#E5E5E5"> for a conjunction it's kind of</font>

327
00:14:12,990 --> 00:14:18,480
it's a bit more it's less of an accurate

328
00:14:15,180 --> 00:14:22,560
<font color="#E5E5E5">upper bound because</font><font color="#CCCCCC"> you're just summing</font>

329
00:14:18,480 --> 00:14:25,650
up<font color="#E5E5E5"> something up the maximum</font><font color="#CCCCCC"> scores for</font>

330
00:14:22,560 --> 00:14:27,239
for<font color="#E5E5E5"> your sub-clauses so</font><font color="#CCCCCC"> the fact that</font>

331
00:14:25,650 --> 00:14:28,590
all this one will match here but it's a

332
00:14:27,240 --> 00:14:30,180
lower one<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> literal matters it's</font>

333
00:14:28,590 --> 00:14:32,070
a higher<font color="#E5E5E5"> but you're missing quite a lot</font>

334
00:14:30,180 --> 00:14:33,479
<font color="#E5E5E5">of you</font><font color="#CCCCCC"> miss</font><font color="#E5E5E5"> quite a lot of detail by</font>

335
00:14:32,070 --> 00:14:35,700
just<font color="#E5E5E5"> saying we're only</font><font color="#CCCCCC"> taking the</font>

336
00:14:33,480 --> 00:14:37,980
maximum<font color="#E5E5E5"> but still we get</font><font color="#CCCCCC"> for high</font>

337
00:14:35,700 --> 00:14:39,690
frequency term conjunctions<font color="#CCCCCC"> we're going</font>

338
00:14:37,980 --> 00:14:42,690
for<font color="#E5E5E5"> 10 queries per second 25 quotes per</font>

339
00:14:39,690 --> 00:14:44,820
second<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> again that's</font><font color="#CCCCCC"> quite</font><font color="#E5E5E5"> nice</font>

340
00:14:42,690 --> 00:14:47,220
exact phrase queries<font color="#E5E5E5"> again it's</font>

341
00:14:44,820 --> 00:14:48,780
basically<font color="#CCCCCC"> just a</font><font color="#E5E5E5"> conjunction with a</font>

342
00:14:47,220 --> 00:14:51,330
bunch of extra constraints on<font color="#CCCCCC"> it in</font>

343
00:14:48,780 --> 00:14:53,430
terms<font color="#E5E5E5"> of where the positions are they</font>

344
00:14:51,330 --> 00:14:55,140
are slower<font color="#E5E5E5"> than</font><font color="#CCCCCC"> normal term conjunctions</font>

345
00:14:53,430 --> 00:14:58,410
so we're<font color="#E5E5E5"> going we're</font><font color="#CCCCCC"> going from 4.5 to</font>

346
00:14:55,140 --> 00:14:59,640
<font color="#CCCCCC">7.5 queries per second because again</font>

347
00:14:58,410 --> 00:15:01,110
most<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the time here is actually spent</font>

348
00:14:59,640 --> 00:15:03,300
in term things like decoding pole

349
00:15:01,110 --> 00:15:04,530
positions lists and intersecting

350
00:15:03,300 --> 00:15:06,599
positions lists and making sure things

351
00:15:04,530 --> 00:15:09,150
are in the correct<font color="#E5E5E5"> position</font><font color="#CCCCCC"> but still</font>

352
00:15:06,600 --> 00:15:13,050
you know it's still<font color="#CCCCCC"> got a nice</font><font color="#E5E5E5"> speed up</font>

353
00:15:09,150 --> 00:15:15,480
and the impressive speed up here the the

354
00:15:13,050 --> 00:15:16,740
<font color="#E5E5E5">the most interesting thing</font><font color="#CCCCCC"> for billion</font>

355
00:15:15,480 --> 00:15:21,270
queries<font color="#CCCCCC"> is</font><font color="#E5E5E5"> for</font>

356
00:15:16,740 --> 00:15:23,820
<font color="#E5E5E5">junctions</font><font color="#CCCCCC"> so X or Y and here we</font><font color="#E5E5E5"> could</font>

357
00:15:21,270 --> 00:15:26,730
<font color="#CCCCCC">use certainly called</font><font color="#E5E5E5"> week and or wand I</font>

358
00:15:23,820 --> 00:15:28,920
was gonna<font color="#E5E5E5"> and Riaan had a nice picture</font>

359
00:15:26,730 --> 00:15:30,390
<font color="#E5E5E5">of a wand</font><font color="#CCCCCC"> in all this but I couldn't</font>

360
00:15:28,920 --> 00:15:32,310
<font color="#CCCCCC">work out</font><font color="#E5E5E5"> how to copy it over in time so</font>

361
00:15:30,390 --> 00:15:36,810
<font color="#E5E5E5">you make do with a wand in</font><font color="#CCCCCC"> your in your</font>

362
00:15:32,310 --> 00:15:40,229
<font color="#E5E5E5">mind as opposed to on the screen</font><font color="#CCCCCC"> thank</font>

363
00:15:36,810 --> 00:15:46,560
you<font color="#CCCCCC"> so we have let's say we have a query</font>

364
00:15:40,230 --> 00:15:48,420
for<font color="#CCCCCC"> V or phox phox is a fairly low</font>

365
00:15:46,560 --> 00:15:49,859
frequency term these an incredibly high

366
00:15:48,420 --> 00:15:51,270
frequency term<font color="#E5E5E5"> basically every single</font>

367
00:15:49,860 --> 00:15:54,410
<font color="#E5E5E5">document in your corpus is probably</font>

368
00:15:51,270 --> 00:15:54,410
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have the word V in it</font>

369
00:15:54,560 --> 00:16:01,170
so generally speaking<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> for a normal</font>

370
00:16:00,029 --> 00:16:02,580
discussion what you have to do is you

371
00:16:01,170 --> 00:16:05,849
have<font color="#E5E5E5"> to visit every single</font><font color="#CCCCCC"> document that</font>

372
00:16:02,580 --> 00:16:08,670
<font color="#CCCCCC">contains any</font><font color="#E5E5E5"> of the terms</font><font color="#CCCCCC"> so for</font>

373
00:16:05,850 --> 00:16:10,230
something<font color="#E5E5E5"> like the</font><font color="#CCCCCC"> orfox</font><font color="#E5E5E5"> in a naive</font>

374
00:16:08,670 --> 00:16:11,640
<font color="#E5E5E5">implementation you're going to end up</font>

375
00:16:10,230 --> 00:16:12,959
<font color="#CCCCCC">visiting every</font><font color="#E5E5E5"> single documents because</font>

376
00:16:11,640 --> 00:16:15,630
every single<font color="#CCCCCC"> documents gonna</font><font color="#E5E5E5"> have v in</font>

377
00:16:12,959 --> 00:16:17,160
it and then you'll add<font color="#CCCCCC"> in the obviously</font>

378
00:16:15,630 --> 00:16:19,290
<font color="#E5E5E5">the ones that has the doctors would have</font>

379
00:16:17,160 --> 00:16:21,709
<font color="#E5E5E5">fox in it as well are gonna float</font><font color="#CCCCCC"> higher</font>

380
00:16:19,290 --> 00:16:25,439
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> top of the</font><font color="#E5E5E5"> list because the</font>

381
00:16:21,709 --> 00:16:26,849
<font color="#E5E5E5">maximum</font><font color="#CCCCCC"> score of</font><font color="#E5E5E5"> a term fox is</font><font color="#CCCCCC"> going to</font>

382
00:16:25,440 --> 00:16:29,040
be much higher than<font color="#E5E5E5"> the maximum</font><font color="#CCCCCC"> score of</font>

383
00:16:26,850 --> 00:16:32,040
<font color="#E5E5E5">the because it has a much lower total</font>

384
00:16:29,040 --> 00:16:33,839
term frequency so what we can say is as

385
00:16:32,040 --> 00:16:36,149
we're<font color="#E5E5E5"> going through we get to a</font><font color="#CCCCCC"> new</font>

386
00:16:33,839 --> 00:16:39,029
block<font color="#E5E5E5"> we can say alright we've collected</font>

387
00:16:36,149 --> 00:16:42,170
<font color="#CCCCCC">this number of documents we have a</font>

388
00:16:39,029 --> 00:16:44,279
minimum competitive score of<font color="#CCCCCC"> 1 let's say</font>

389
00:16:42,170 --> 00:16:47,219
you can<font color="#E5E5E5"> look at the next</font><font color="#CCCCCC"> block you can</font>

390
00:16:44,279 --> 00:16:49,290
say for<font color="#E5E5E5"> each of these sub clauses</font><font color="#CCCCCC"> we're</font>

391
00:16:47,220 --> 00:16:51,600
going to try and<font color="#E5E5E5"> work out what the</font>

392
00:16:49,290 --> 00:16:52,709
<font color="#E5E5E5">maximum maximum competitive maximum</font>

393
00:16:51,600 --> 00:16:55,890
possible score for<font color="#CCCCCC"> each of these sub</font>

394
00:16:52,709 --> 00:16:58,770
<font color="#E5E5E5">causes is the is only ever going to give</font>

395
00:16:55,890 --> 00:17:00,329
us a<font color="#E5E5E5"> maximum score</font><font color="#CCCCCC"> at not</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> two so</font>

396
00:16:58,770 --> 00:17:02,399
if we have a document<font color="#CCCCCC"> that only has the</font>

397
00:17:00,329 --> 00:17:03,750
in it we know it's not<font color="#E5E5E5"> gonna match which</font>

398
00:17:02,399 --> 00:17:05,670
means that instead<font color="#CCCCCC"> of having a</font>

399
00:17:03,750 --> 00:17:07,410
disjunction<font color="#E5E5E5"> we can convert</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> into a</font>

400
00:17:05,670 --> 00:17:08,910
conjunction<font color="#E5E5E5"> and say right</font><font color="#CCCCCC"> ok we're going</font>

401
00:17:07,410 --> 00:17:10,699
to<font color="#E5E5E5"> go through and we need to find</font>

402
00:17:08,910 --> 00:17:12,600
<font color="#CCCCCC">documents that contain both of them and</font>

403
00:17:10,699 --> 00:17:15,390
conjunctions<font color="#E5E5E5"> are much faster than</font>

404
00:17:12,599 --> 00:17:18,559
disjunctions because you can skip you

405
00:17:15,390 --> 00:17:22,319
can<font color="#CCCCCC"> advanced</font><font color="#E5E5E5"> you can you can avoid</font>

406
00:17:18,559 --> 00:17:24,389
collecting all these documents using<font color="#E5E5E5"> the</font>

407
00:17:22,319 --> 00:17:28,580
Skip list structures<font color="#E5E5E5"> that</font><font color="#CCCCCC"> that was a</font>

408
00:17:24,390 --> 00:17:32,100
discussed earlier<font color="#E5E5E5"> so</font>

409
00:17:28,580 --> 00:17:35,820
again we get a not a bad<font color="#CCCCCC"> speed-up on</font>

410
00:17:32,100 --> 00:17:39,120
<font color="#E5E5E5">this one so if we have high frequency or</font>

411
00:17:35,820 --> 00:17:42,990
medium frequency so<font color="#CCCCCC"> the off</font><font color="#E5E5E5"> rocks</font><font color="#CCCCCC"> frogs</font>

412
00:17:39,120 --> 00:17:46,139
<font color="#CCCCCC">Fox rocks would work as</font><font color="#E5E5E5"> well I suppose</font>

413
00:17:42,990 --> 00:17:48,060
get you gets you<font color="#E5E5E5"> six queries per seconds</font>

414
00:17:46,140 --> 00:17:51,620
<font color="#CCCCCC">and now we're</font><font color="#E5E5E5"> getting</font><font color="#CCCCCC"> twenty five points</font>

415
00:17:48,060 --> 00:17:55,399
per second<font color="#E5E5E5"> so again no 300% speed-up</font>

416
00:17:51,620 --> 00:17:55,399
yeah that's nice

417
00:17:55,940 --> 00:17:59,370
in addition to these we<font color="#CCCCCC"> know how</font>

418
00:17:58,020 --> 00:18:02,430
<font color="#E5E5E5">something called a feature query again</font>

419
00:17:59,370 --> 00:18:05,040
<font color="#CCCCCC">they</font><font color="#E5E5E5"> covered this briefly so what we can</font>

420
00:18:02,430 --> 00:18:06,570
do is you can store various boost

421
00:18:05,040 --> 00:18:10,730
factors for a document<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you want to</font>

422
00:18:06,570 --> 00:18:15,149
add in extra things like so<font color="#E5E5E5"> PageRank is</font>

423
00:18:10,730 --> 00:18:17,220
<font color="#E5E5E5">it's one example or or distances or you</font>

424
00:18:15,150 --> 00:18:19,710
have any number of scores<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you want</font>

425
00:18:17,220 --> 00:18:23,880
to<font color="#E5E5E5"> ensure contribute somehow to you to</font>

426
00:18:19,710 --> 00:18:26,220
your final<font color="#E5E5E5"> score and you know that it's</font>

427
00:18:23,880 --> 00:18:29,330
this conforms<font color="#E5E5E5"> to you know if this score</font>

428
00:18:26,220 --> 00:18:33,480
<font color="#CCCCCC">is higher then the total score is higher</font>

429
00:18:29,330 --> 00:18:34,470
<font color="#CCCCCC">then in which case</font><font color="#E5E5E5"> we can we can add</font>

430
00:18:33,480 --> 00:18:37,140
<font color="#E5E5E5">that</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> and something called a feature</font>

431
00:18:34,470 --> 00:18:41,670
query the future query will store<font color="#E5E5E5"> that</font>

432
00:18:37,140 --> 00:18:44,070
boost value as a term<font color="#E5E5E5"> frequency</font><font color="#CCCCCC"> and it</font>

433
00:18:41,670 --> 00:18:45,690
can<font color="#E5E5E5"> then use one of these</font><font color="#CCCCCC"> functions we</font>

434
00:18:44,070 --> 00:18:49,830
have<font color="#E5E5E5"> saturation function sigmoid</font>

435
00:18:45,690 --> 00:18:52,380
function or log function<font color="#CCCCCC"> and it can use</font>

436
00:18:49,830 --> 00:18:53,879
<font color="#CCCCCC">that</font><font color="#E5E5E5"> function</font><font color="#CCCCCC"> to calculate the maximum</font>

437
00:18:52,380 --> 00:18:55,800
possible<font color="#E5E5E5"> score that it's going to</font>

438
00:18:53,880 --> 00:18:57,330
<font color="#E5E5E5">provide</font><font color="#CCCCCC"> for a given block</font><font color="#E5E5E5"> because it can</font>

439
00:18:55,800 --> 00:18:59,280
<font color="#E5E5E5">again look at</font><font color="#CCCCCC"> term frequency</font><font color="#E5E5E5"> so it knows</font>

440
00:18:57,330 --> 00:19:02,070
okay what's the maximum boost value

441
00:18:59,280 --> 00:19:03,450
that's<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this particular block that's</font>

442
00:19:02,070 --> 00:19:06,929
going to give<font color="#E5E5E5"> me a maximum score</font>

443
00:19:03,450 --> 00:19:08,970
contribution<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you can then use</font><font color="#CCCCCC"> that</font>

444
00:19:06,930 --> 00:19:12,450
you<font color="#E5E5E5"> can then combine that</font><font color="#CCCCCC"> as you would</font>

445
00:19:08,970 --> 00:19:14,400
<font color="#CCCCCC">any other boolean query the the nice</font>

446
00:19:12,450 --> 00:19:18,060
thing about these three functions<font color="#E5E5E5"> is</font>

447
00:19:14,400 --> 00:19:20,220
it's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> just that they had this simple</font>

448
00:19:18,060 --> 00:19:22,350
relationship so<font color="#E5E5E5"> you know as the the</font>

449
00:19:20,220 --> 00:19:24,090
boost<font color="#E5E5E5"> value gets higher than the the</font>

450
00:19:22,350 --> 00:19:25,169
resulting<font color="#E5E5E5"> of the resulting score from</font>

451
00:19:24,090 --> 00:19:27,449
<font color="#E5E5E5">these functions gets higher but they're</font>

452
00:19:25,170 --> 00:19:30,780
also bounded<font color="#E5E5E5"> in particular saturation</font>

453
00:19:27,450 --> 00:19:32,430
<font color="#E5E5E5">and sigmoid</font><font color="#CCCCCC"> I bound</font><font color="#E5E5E5"> it to</font><font color="#CCCCCC"> one which</font>

454
00:19:30,780 --> 00:19:35,550
<font color="#CCCCCC">means you can sort of it makes it much</font>

455
00:19:32,430 --> 00:19:37,530
<font color="#CCCCCC">easier to to reason about how your</font>

456
00:19:35,550 --> 00:19:40,180
scores are<font color="#E5E5E5"> going to change given this</font>

457
00:19:37,530 --> 00:19:43,340
particular<font color="#E5E5E5"> set of boosting factors</font>

458
00:19:40,180 --> 00:19:44,809
so we have some fantastic<font color="#E5E5E5"> speed ups but</font>

459
00:19:43,340 --> 00:19:50,300
there are obvious trade-offs here<font color="#E5E5E5"> you</font>

460
00:19:44,809 --> 00:19:51,649
never<font color="#E5E5E5"> get anything for free so the the</font>

461
00:19:50,300 --> 00:19:53,450
biggest<font color="#E5E5E5"> one is say we don't get these</font>

462
00:19:51,650 --> 00:19:57,290
accurate hit camps anymore

463
00:19:53,450 --> 00:19:59,960
and the the<font color="#E5E5E5"> most extreme case</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this is</font>

464
00:19:57,290 --> 00:20:02,090
<font color="#E5E5E5">we don't we're going to stop</font><font color="#CCCCCC"> we're going</font>

465
00:19:59,960 --> 00:20:04,040
to stop collecting<font color="#CCCCCC"> accurate hits</font><font color="#E5E5E5"> as soon</font>

466
00:20:02,090 --> 00:20:05,600
as we<font color="#E5E5E5"> filled filled our priority queue</font>

467
00:20:04,040 --> 00:20:06,980
so as<font color="#E5E5E5"> soon as we got our top head we're</font>

468
00:20:05,600 --> 00:20:08,330
<font color="#E5E5E5">gonna go</font><font color="#CCCCCC"> buy it fine we'll just stop</font>

469
00:20:06,980 --> 00:20:10,820
there<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> skip on from there</font>

470
00:20:08,330 --> 00:20:13,760
but that means you can't page<font color="#CCCCCC"> and lots</font>

471
00:20:10,820 --> 00:20:15,590
of people<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do paging so what we</font>

472
00:20:13,760 --> 00:20:18,500
can<font color="#E5E5E5"> do is we</font><font color="#CCCCCC"> can say alright we're going</font>

473
00:20:15,590 --> 00:20:21,770
<font color="#CCCCCC">to</font><font color="#E5E5E5"> use the normal the the old style</font>

474
00:20:18,500 --> 00:20:24,230
<font color="#CCCCCC">collection mechanism for the first</font><font color="#E5E5E5"> a</font>

475
00:20:21,770 --> 00:20:26,179
thousand hits<font color="#E5E5E5"> let's say and then we'll</font>

476
00:20:24,230 --> 00:20:29,030
start skipping after that<font color="#E5E5E5"> and that means</font>

477
00:20:26,179 --> 00:20:31,370
<font color="#E5E5E5">that you can return to your user you can</font>

478
00:20:29,030 --> 00:20:33,910
<font color="#E5E5E5">say okay well we can page if we're doing</font>

479
00:20:31,370 --> 00:20:38,239
<font color="#CCCCCC">10 per page we</font><font color="#E5E5E5"> can give you the top</font>

480
00:20:33,910 --> 00:20:40,309
hundred<font color="#E5E5E5"> pages</font><font color="#CCCCCC"> and then beyond that could</font>

481
00:20:38,240 --> 00:20:43,550
say well there were we<font color="#E5E5E5"> found at least</font>

482
00:20:40,309 --> 00:20:45,110
this number of documents generally

483
00:20:43,550 --> 00:20:48,649
<font color="#E5E5E5">speaking if someone wants to page</font>

484
00:20:45,110 --> 00:20:51,709
through<font color="#E5E5E5"> a</font><font color="#CCCCCC"> hundred pages</font><font color="#E5E5E5"> they should be</font>

485
00:20:48,650 --> 00:20:52,880
<font color="#E5E5E5">doing a different</font><font color="#CCCCCC"> query or it means</font><font color="#E5E5E5"> they</font>

486
00:20:51,710 --> 00:20:54,170
<font color="#E5E5E5">want to extract everything in which case</font>

487
00:20:52,880 --> 00:20:58,400
you would<font color="#E5E5E5"> - you don't</font><font color="#CCCCCC"> probably don't</font>

488
00:20:54,170 --> 00:20:59,720
care<font color="#E5E5E5"> about scores</font><font color="#CCCCCC"> the other thing here</font>

489
00:20:58,400 --> 00:21:02,090
is it<font color="#E5E5E5"> doesn't</font><font color="#CCCCCC"> work with facets or</font>

490
00:20:59,720 --> 00:21:03,740
aggregations<font color="#E5E5E5"> because facets and</font>

491
00:21:02,090 --> 00:21:07,010
aggregations<font color="#E5E5E5"> by their</font><font color="#CCCCCC"> nature they need</font>

492
00:21:03,740 --> 00:21:09,559
to visit<font color="#CCCCCC"> every single document</font><font color="#E5E5E5"> however</font>

493
00:21:07,010 --> 00:21:14,330
what you<font color="#CCCCCC"> can do is you can do things</font><font color="#E5E5E5"> in</font>

494
00:21:09,559 --> 00:21:16,190
two passes<font color="#CCCCCC"> because if you are you know</font>

495
00:21:14,330 --> 00:21:18,620
you're<font color="#E5E5E5"> doing a normal</font><font color="#CCCCCC"> score query you</font>

496
00:21:16,190 --> 00:21:20,600
<font color="#E5E5E5">want your</font><font color="#CCCCCC"> top-end</font><font color="#E5E5E5"> documents and you also</font>

497
00:21:18,620 --> 00:21:22,100
want facets and aggregations<font color="#E5E5E5"> you're</font>

498
00:21:20,600 --> 00:21:23,928
still wasting<font color="#CCCCCC"> quite a lot of</font><font color="#E5E5E5"> time by</font>

499
00:21:22,100 --> 00:21:25,159
scoring all<font color="#CCCCCC"> the documents that aren't</font>

500
00:21:23,929 --> 00:21:27,500
<font color="#CCCCCC">going to match</font><font color="#E5E5E5"> that aren't in your top</font>

501
00:21:25,160 --> 00:21:33,920
<font color="#CCCCCC">ten so what you can do is you can</font><font color="#E5E5E5"> do a</font>

502
00:21:27,500 --> 00:21:36,920
very<font color="#CCCCCC"> very fast first pass using this the</font>

503
00:21:33,920 --> 00:21:39,890
block<font color="#CCCCCC"> max methods and that gets you your</font>

504
00:21:36,920 --> 00:21:41,270
<font color="#E5E5E5">top n and then you can if you're doing</font>

505
00:21:39,890 --> 00:21:42,920
on a<font color="#CCCCCC"> webpage for example you can then</font>

506
00:21:41,270 --> 00:21:45,320
asynchronously send off the second query

507
00:21:42,920 --> 00:21:48,410
<font color="#E5E5E5">which does your fasting in your</font>

508
00:21:45,320 --> 00:21:49,750
aggregations it doesn't do scoring<font color="#E5E5E5"> so</font>

509
00:21:48,410 --> 00:21:51,980
you're going to<font color="#E5E5E5"> get a slightly faster</font>

510
00:21:49,750 --> 00:21:53,990
<font color="#CCCCCC">aggregation query</font><font color="#E5E5E5"> coming back and then a</font>

511
00:21:51,980 --> 00:21:56,270
much faster<font color="#E5E5E5"> top-end</font><font color="#CCCCCC"> qer</font>

512
00:21:53,990 --> 00:21:57,560
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can do it</font><font color="#E5E5E5"> simply so</font><font color="#CCCCCC"> you'll know you</font>

513
00:21:56,270 --> 00:21:58,670
get your<font color="#E5E5E5"> your</font><font color="#CCCCCC"> topping results come up</font>

514
00:21:57,560 --> 00:22:01,550
<font color="#CCCCCC">and then the facets might appear</font>

515
00:21:58,670 --> 00:22:02,870
slightly later<font color="#CCCCCC"> or you could do it all at</font>

516
00:22:01,550 --> 00:22:05,180
the<font color="#E5E5E5"> same time and you have some</font>

517
00:22:02,870 --> 00:22:06,949
experiments<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we've been running do</font>

518
00:22:05,180 --> 00:22:09,500
suggest<font color="#E5E5E5"> that actually it will probably</font>

519
00:22:06,950 --> 00:22:13,340
be faster<font color="#E5E5E5"> anyway</font><font color="#CCCCCC"> by splitting these</font>

520
00:22:09,500 --> 00:22:16,370
these queries into two<font color="#E5E5E5"> I think I have</font>

521
00:22:13,340 --> 00:22:18,610
three<font color="#E5E5E5"> minutes left</font><font color="#CCCCCC"> so does anyone</font><font color="#E5E5E5"> have</font>

522
00:22:16,370 --> 00:22:18,610
<font color="#CCCCCC">any</font><font color="#E5E5E5"> questions</font>

523
00:22:20,200 --> 00:22:42,320
yes so the question<font color="#E5E5E5"> was that by default</font>

524
00:22:39,110 --> 00:22:44,300
<font color="#CCCCCC">you don't get your total</font><font color="#E5E5E5"> hits</font><font color="#CCCCCC"> currently</font>

525
00:22:42,320 --> 00:22:49,909
in Isis search and the same and solar as

526
00:22:44,300 --> 00:22:51,860
well you do get total hits<font color="#CCCCCC"> so when well</font>

527
00:22:49,910 --> 00:22:53,390
<font color="#CCCCCC">when the elastic search moves to leucine</font>

528
00:22:51,860 --> 00:22:57,919
<font color="#CCCCCC">eight which we'll do in</font><font color="#E5E5E5"> the ice it's at</font>

529
00:22:53,390 --> 00:22:59,840
seven coming<font color="#E5E5E5"> at some point</font><font color="#CCCCCC"> then what</font>

530
00:22:57,920 --> 00:23:02,480
happens are you going to not get<font color="#E5E5E5"> do we</font>

531
00:22:59,840 --> 00:23:07,220
not get<font color="#E5E5E5"> these improvements</font><font color="#CCCCCC"> the answer is</font>

532
00:23:02,480 --> 00:23:11,450
<font color="#E5E5E5">in elastic search it is going to change</font>

533
00:23:07,220 --> 00:23:12,620
<font color="#E5E5E5">so they by default</font><font color="#CCCCCC"> I think Philip you</font>

534
00:23:11,450 --> 00:23:17,210
can probably cut<font color="#E5E5E5"> anything wrong here</font>

535
00:23:12,620 --> 00:23:18,949
<font color="#E5E5E5">find default the well the top hit count</font>

536
00:23:17,210 --> 00:23:22,160
is going<font color="#CCCCCC"> to come</font><font color="#E5E5E5"> back it's the structure</font>

537
00:23:18,950 --> 00:23:26,180
<font color="#E5E5E5">is changing so the total hits is no</font>

538
00:23:22,160 --> 00:23:29,450
longer a number<font color="#E5E5E5"> it's an</font><font color="#CCCCCC"> object which</font>

539
00:23:26,180 --> 00:23:31,370
will have a hits count<font color="#E5E5E5"> and then a</font>

540
00:23:29,450 --> 00:23:34,610
<font color="#CCCCCC">relation said either</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is accurate</font><font color="#E5E5E5"> or</font>

541
00:23:31,370 --> 00:23:36,560
it's a lower bound and<font color="#CCCCCC"> you can then</font><font color="#E5E5E5"> up</font>

542
00:23:34,610 --> 00:23:38,020
down to that<font color="#E5E5E5"> if so you'd say there's a</font>

543
00:23:36,560 --> 00:23:39,889
<font color="#E5E5E5">they'll be a parameter on the search</font>

544
00:23:38,020 --> 00:23:41,660
query which says<font color="#E5E5E5"> no give me the</font>

545
00:23:39,890 --> 00:23:43,940
<font color="#CCCCCC">old-style so you can you</font><font color="#E5E5E5"> can upgrade</font>

546
00:23:41,660 --> 00:23:45,920
<font color="#E5E5E5">without having to change everything</font>

547
00:23:43,940 --> 00:23:48,110
but then you can<font color="#CCCCCC"> then</font><font color="#E5E5E5"> opt</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> it at a</font>

548
00:23:45,920 --> 00:23:49,700
<font color="#E5E5E5">later point but</font><font color="#CCCCCC"> no by</font><font color="#E5E5E5"> default we're</font>

549
00:23:48,110 --> 00:23:54,010
gonna give<font color="#E5E5E5"> you the speed outs because we</font>

550
00:23:49,700 --> 00:23:54,010
think<font color="#E5E5E5"> it's worth it yeah</font>

551
00:23:55,990 --> 00:24:06,049
yes this is true<font color="#E5E5E5"> so</font><font color="#CCCCCC"> so the it's the the</font>

552
00:24:01,279 --> 00:24:08,690
value on top<font color="#CCCCCC"> Docs</font><font color="#E5E5E5"> is no longer and is it</font>

553
00:24:06,049 --> 00:24:10,879
an<font color="#E5E5E5"> entry or lures along wasn't it</font><font color="#CCCCCC"> and</font>

554
00:24:08,690 --> 00:24:13,909
now it's an<font color="#CCCCCC"> object</font><font color="#E5E5E5"> again with this long</font>

555
00:24:10,879 --> 00:24:17,830
value and a relation saying either this

556
00:24:13,909 --> 00:24:17,830
<font color="#E5E5E5">is this is exact or it's a lower bound</font>

557
00:24:19,410 --> 00:24:22,539
[Music]

558
00:24:43,179 --> 00:24:47,450
it's not always<font color="#CCCCCC"> competitive because</font>

559
00:24:45,470 --> 00:24:50,330
<font color="#E5E5E5">you're doing because you do one up yeah</font>

560
00:24:47,450 --> 00:24:52,309
<font color="#E5E5E5">so because we know because so yeah so</font>

561
00:24:50,330 --> 00:24:53,928
the<font color="#CCCCCC"> question</font><font color="#E5E5E5"> was if you have a whole</font>

562
00:24:52,309 --> 00:24:56,200
<font color="#CCCCCC">bunch of documents which all</font><font color="#E5E5E5"> have the</font>

563
00:24:53,929 --> 00:24:58,100
<font color="#E5E5E5">same score so for a term that has</font>

564
00:24:56,200 --> 00:24:59,960
<font color="#E5E5E5">everything's got a single term in it</font>

565
00:24:58,100 --> 00:25:02,269
they all had the<font color="#CCCCCC"> same score does</font><font color="#E5E5E5"> that</font>

566
00:24:59,960 --> 00:25:03,559
mean<font color="#E5E5E5"> that they're all competitive and</font>

567
00:25:02,269 --> 00:25:05,509
the answer is no because once you've

568
00:25:03,559 --> 00:25:08,029
filled<font color="#E5E5E5"> up</font><font color="#CCCCCC"> their</font><font color="#E5E5E5"> priority queue we go and</font>

569
00:25:05,509 --> 00:25:10,460
call we call this set minimum

570
00:25:08,029 --> 00:25:12,590
competitive score function that takes

571
00:25:10,460 --> 00:25:15,980
the<font color="#E5E5E5"> score value and it does math dot</font>

572
00:25:12,590 --> 00:25:18,139
next<font color="#E5E5E5"> up so it increases it by whatever</font>

573
00:25:15,980 --> 00:25:19,610
the<font color="#E5E5E5"> smallest possible value that</font><font color="#CCCCCC"> it</font>

574
00:25:18,139 --> 00:25:24,408
gives up to the next<font color="#CCCCCC"> floating point</font>

575
00:25:19,610 --> 00:25:27,110
value so<font color="#CCCCCC"> ya know there there are going</font>

576
00:25:24,409 --> 00:25:30,440
<font color="#E5E5E5">to be adversary situations yes so if you</font>

577
00:25:27,110 --> 00:25:32,779
<font color="#E5E5E5">happen to have an index which the term</font>

578
00:25:30,440 --> 00:25:35,809
frequency<font color="#E5E5E5"> gets higher with every</font>

579
00:25:32,779 --> 00:25:37,009
<font color="#E5E5E5">subsequent document then yes there you</font>

580
00:25:35,809 --> 00:25:39,649
<font color="#E5E5E5">will probably find that things are</font>

581
00:25:37,009 --> 00:25:41,299
slowing down<font color="#CCCCCC"> and there</font><font color="#E5E5E5"> are certain</font>

582
00:25:39,649 --> 00:25:42,860
<font color="#E5E5E5">circumstances there are certain query</font>

583
00:25:41,299 --> 00:25:44,779
combinations<font color="#E5E5E5"> of boolean queries at the</font>

584
00:25:42,860 --> 00:25:48,699
moment where<font color="#CCCCCC"> things have slowed down I</font>

585
00:25:44,779 --> 00:25:51,440
<font color="#E5E5E5">mean not not a</font><font color="#CCCCCC"> lot but there's enough</font>

586
00:25:48,700 --> 00:25:52,759
this<font color="#E5E5E5"> adds enough</font><font color="#CCCCCC"> overhead</font><font color="#E5E5E5"> that's can you</font>

587
00:25:51,440 --> 00:25:55,759
<font color="#E5E5E5">speed up so you get otherwise is</font>

588
00:25:52,759 --> 00:25:59,230
<font color="#CCCCCC">counteracted by</font><font color="#E5E5E5"> this so yeah but we know</font>

589
00:25:55,759 --> 00:25:59,230
what they<font color="#CCCCCC"> are and we're working on them</font>

590
00:26:01,570 --> 00:26:03,629
you

