1
00:00:13,040 --> 00:00:16,230
[Music]

2
00:00:18,000 --> 00:00:21,000
<font color="#E5E5E5">okay</font>

3
00:00:27,060 --> 00:00:37,660
hi so<font color="#E5E5E5"> um</font><font color="#CCCCCC"> all right</font><font color="#E5E5E5"> so this this talk is</font>

4
00:00:35,710 --> 00:00:40,809
a very short<font color="#E5E5E5"> introduction to net map and</font>

5
00:00:37,660 --> 00:00:42,879
out<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> use it to implement betwen</font>

6
00:00:40,809 --> 00:00:45,370
network functions so what is<font color="#E5E5E5"> network</font>

7
00:00:42,879 --> 00:00:48,129
<font color="#CCCCCC">we've been talking about</font><font color="#E5E5E5"> deepening kpf</font>

8
00:00:45,370 --> 00:00:52,050
freeing<font color="#E5E5E5"> xvp and so on so</font><font color="#CCCCCC"> Netra</font><font color="#E5E5E5"> is just</font>

9
00:00:48,129 --> 00:00:55,000
yet another<font color="#E5E5E5"> other independent API to</font>

10
00:00:52,050 --> 00:00:56,890
access for direct<font color="#E5E5E5"> access to Nick</font>

11
00:00:55,000 --> 00:00:59,680
transmit and receive functionalities in

12
00:00:56,890 --> 00:01:03,610
<font color="#E5E5E5">user space so this case is the very same</font>

13
00:00:59,680 --> 00:01:06,220
as d pd k + PF freeing and so on the

14
00:01:03,610 --> 00:01:08,200
<font color="#E5E5E5">idea is that you have a</font><font color="#CCCCCC"> nick</font><font color="#E5E5E5"> and you</font>

15
00:01:06,220 --> 00:01:09,880
open that in network mode and once you

16
00:01:08,200 --> 00:01:11,979
do that you are<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> temporarily</font>

17
00:01:09,880 --> 00:01:14,649
<font color="#E5E5E5">stealing that from</font><font color="#CCCCCC"> the network stack and</font>

18
00:01:11,979 --> 00:01:17,280
use<font color="#E5E5E5"> that with a very much oriented and</font>

19
00:01:14,650 --> 00:01:19,720
efficient<font color="#E5E5E5"> API for fast application</font>

20
00:01:17,280 --> 00:01:20,830
<font color="#E5E5E5">networking application so it's very</font>

21
00:01:19,720 --> 00:01:22,119
important<font color="#E5E5E5"> to note that this is</font>

22
00:01:20,830 --> 00:01:24,399
<font color="#CCCCCC">implementing</font><font color="#E5E5E5"> we need the operating</font>

23
00:01:22,119 --> 00:01:28,360
system kernel<font color="#E5E5E5"> for instance differently</font>

24
00:01:24,400 --> 00:01:29,560
from<font color="#CCCCCC"> DP DK should I love their</font><font color="#E5E5E5"> louder</font><font color="#CCCCCC"> ok</font>

25
00:01:28,360 --> 00:01:32,650
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> sorry</font>

26
00:01:29,560 --> 00:01:35,350
this is<font color="#E5E5E5"> implemented in</font><font color="#CCCCCC"> the operating</font>

27
00:01:32,650 --> 00:01:37,900
<font color="#E5E5E5">system</font><font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> and we will see why this</font>

28
00:01:35,350 --> 00:01:40,960
<font color="#E5E5E5">is important later it's included in</font>

29
00:01:37,900 --> 00:01:43,180
<font color="#CCCCCC">FreeBSD and also in NAT map as well so</font>

30
00:01:40,960 --> 00:01:47,199
in<font color="#E5E5E5"> Linux</font><font color="#CCCCCC"> has an outer three kernel</font>

31
00:01:43,180 --> 00:01:48,790
module so these are the<font color="#E5E5E5"> design</font>

32
00:01:47,200 --> 00:01:51,670
principles<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> death map I think</font>

33
00:01:48,790 --> 00:01:54,700
<font color="#CCCCCC">those are important because</font><font color="#E5E5E5"> of the very</font>

34
00:01:51,670 --> 00:01:58,120
<font color="#E5E5E5">same design principles</font><font color="#CCCCCC"> also behind the</font>

35
00:01:54,700 --> 00:02:05,230
things like<font color="#CCCCCC"> DP D K so some extent and</font>

36
00:01:58,120 --> 00:02:07,659
and<font color="#CCCCCC"> w k PF freeing and x DP</font><font color="#E5E5E5"> so the first</font>

37
00:02:05,230 --> 00:02:09,580
and<font color="#E5E5E5"> most important</font><font color="#CCCCCC"> one is budget</font>

38
00:02:07,659 --> 00:02:11,290
operation so the idea is that<font color="#E5E5E5"> whenever</font>

39
00:02:09,580 --> 00:02:12,760
you<font color="#E5E5E5"> want to talk to the Nick</font><font color="#CCCCCC"> for</font>

40
00:02:11,290 --> 00:02:15,370
instance to charging<font color="#CCCCCC"> into transmit</font>

41
00:02:12,760 --> 00:02:19,569
packets and receive packets<font color="#E5E5E5"> you know you</font>

42
00:02:15,370 --> 00:02:21,580
need<font color="#E5E5E5"> to do that you need for instance to</font>

43
00:02:19,569 --> 00:02:23,619
tell the need to<font color="#E5E5E5"> transmit many pockets</font>

44
00:02:21,580 --> 00:02:26,260
at once because talking to unique is

45
00:02:23,620 --> 00:02:28,569
expensive<font color="#E5E5E5"> and in general when you pocket</font>

46
00:02:26,260 --> 00:02:31,870
do packet processing<font color="#E5E5E5"> whenever you have</font>

47
00:02:28,569 --> 00:02:32,769
fixed<font color="#E5E5E5"> costs</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> locking or cups try to</font>

48
00:02:31,870 --> 00:02:36,760
<font color="#CCCCCC">to</font>

49
00:02:32,770 --> 00:02:40,390
<font color="#CCCCCC">to to do</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> prison</font><font color="#E5E5E5"> stick take a look and</font>

50
00:02:36,760 --> 00:02:42,250
process with that<font color="#CCCCCC"> mini pockets this is</font>

51
00:02:40,390 --> 00:02:45,339
important<font color="#CCCCCC"> because the fixed cost can be</font>

52
00:02:42,250 --> 00:02:46,990
amortized over many operations<font color="#CCCCCC"> the</font>

53
00:02:45,340 --> 00:02:49,450
second<font color="#E5E5E5"> principle is</font><font color="#CCCCCC"> pair locational</font>

54
00:02:46,990 --> 00:02:51,790
pocket buffers so<font color="#E5E5E5"> in essence try to</font>

55
00:02:49,450 --> 00:02:53,739
avoid dynamic allocation of pocket

56
00:02:51,790 --> 00:02:55,179
metadata<font color="#E5E5E5"> like for</font><font color="#CCCCCC"> instance in</font><font color="#E5E5E5"> nooks you</font>

57
00:02:53,740 --> 00:02:56,530
have ski buff that<font color="#CCCCCC"> you need to a low-end</font>

58
00:02:55,180 --> 00:02:58,240
<font color="#CCCCCC">you</font><font color="#E5E5E5"> need typically to allocate and</font>

59
00:02:56,530 --> 00:02:59,920
de-allocate<font color="#CCCCCC"> escape</font><font color="#E5E5E5"> of metadata</font>

60
00:02:58,240 --> 00:03:03,190
structures for each pocket that you

61
00:02:59,920 --> 00:03:04,839
process third<font color="#E5E5E5"> zero copy access</font><font color="#CCCCCC"> to packet</font>

62
00:03:03,190 --> 00:03:07,000
buffer<font color="#E5E5E5"> so the idea is that your</font>

63
00:03:04,840 --> 00:03:09,520
<font color="#E5E5E5">application</font><font color="#CCCCCC"> should be</font><font color="#E5E5E5"> able to directly</font>

64
00:03:07,000 --> 00:03:14,140
read and write<font color="#CCCCCC"> packets</font><font color="#E5E5E5"> in each other</font>

65
00:03:09,520 --> 00:03:16,300
space and the the danique can DMA

66
00:03:14,140 --> 00:03:18,100
<font color="#E5E5E5">packets for instance directly in the</font>

67
00:03:16,300 --> 00:03:20,800
application<font color="#CCCCCC"> of other</font><font color="#E5E5E5"> space so you don't</font>

68
00:03:18,100 --> 00:03:24,310
need the traditional copy across<font color="#E5E5E5"> user</font>

69
00:03:20,800 --> 00:03:28,600
<font color="#CCCCCC">kernel boundary fourth kernel provides</font>

70
00:03:24,310 --> 00:03:30,430
the protection<font color="#E5E5E5"> it means that your</font>

71
00:03:28,600 --> 00:03:32,500
application cannot<font color="#CCCCCC"> crash Nick your</font>

72
00:03:30,430 --> 00:03:35,140
application cannot<font color="#CCCCCC"> crash the system</font><font color="#E5E5E5"> so</font>

73
00:03:32,500 --> 00:03:37,690
for instance in<font color="#E5E5E5"> a pub you the</font>

74
00:03:35,140 --> 00:03:41,350
<font color="#E5E5E5">application cannot direct access to Nick</font>

75
00:03:37,690 --> 00:03:43,120
registers and rings this is very

76
00:03:41,350 --> 00:03:45,070
important<font color="#E5E5E5"> because all the protection and</font>

77
00:03:43,120 --> 00:03:50,680
<font color="#E5E5E5">isolation you need is provided directly</font>

78
00:03:45,070 --> 00:03:53,980
by kernel<font color="#E5E5E5"> and last you must have the</font>

79
00:03:50,680 --> 00:03:57,160
possibility to use<font color="#E5E5E5"> full synchronization</font>

80
00:03:53,980 --> 00:04:00,579
so for instance<font color="#CCCCCC"> free marks like the PDK</font>

81
00:03:57,160 --> 00:04:04,420
rely on<font color="#E5E5E5"> busy waiting even if there are</font>

82
00:04:00,580 --> 00:04:06,640
other<font color="#E5E5E5"> options but with both net mappings</font>

83
00:04:04,420 --> 00:04:08,769
<font color="#E5E5E5">index</font><font color="#CCCCCC"> CP we are able to actually use</font>

84
00:04:06,640 --> 00:04:10,390
standard synchronization means like<font color="#CCCCCC"> Paul</font>

85
00:04:08,770 --> 00:04:12,640
<font color="#E5E5E5">system called</font><font color="#CCCCCC"> selective sand calls you</font>

86
00:04:10,390 --> 00:04:15,609
<font color="#E5E5E5">can wait for</font><font color="#CCCCCC"> packets to come</font><font color="#E5E5E5"> or wait for</font>

87
00:04:12,640 --> 00:04:17,950
<font color="#E5E5E5">English space more on this later so the</font>

88
00:04:15,610 --> 00:04:20,290
data structures using<font color="#CCCCCC"> by net are very</font>

89
00:04:17,950 --> 00:04:22,180
simple there is<font color="#CCCCCC"> a net one interface</font>

90
00:04:20,290 --> 00:04:26,440
which is<font color="#E5E5E5"> just a bunch of pointers to</font>

91
00:04:22,180 --> 00:04:28,720
<font color="#E5E5E5">next map rings rings are basically an</font>

92
00:04:26,440 --> 00:04:31,600
abstract<font color="#CCCCCC"> representation or other</font><font color="#E5E5E5"> queues</font>

93
00:04:28,720 --> 00:04:33,760
<font color="#E5E5E5">so you can have one or more receive</font>

94
00:04:31,600 --> 00:04:37,840
rings<font color="#CCCCCC"> on one or</font><font color="#E5E5E5"> more transmit rings for</font>

95
00:04:33,760 --> 00:04:40,030
<font color="#CCCCCC">its for each net one</font><font color="#E5E5E5"> interface and a</font>

96
00:04:37,840 --> 00:04:43,140
ring<font color="#CCCCCC"> is just a security or descriptors</font>

97
00:04:40,030 --> 00:04:45,429
<font color="#E5E5E5">with producer and consumer indexes and</font>

98
00:04:43,140 --> 00:04:46,210
all of these data structures<font color="#E5E5E5"> are</font>

99
00:04:45,430 --> 00:04:48,610
contained

100
00:04:46,210 --> 00:04:50,680
in a so-called<font color="#CCCCCC"> net up a locator so the</font>

101
00:04:48,610 --> 00:04:53,860
idea is that<font color="#E5E5E5"> you may have multiple NIC</font>

102
00:04:50,680 --> 00:04:56,259
ports on your<font color="#E5E5E5"> machines and a single</font><font color="#CCCCCC"> net</font>

103
00:04:53,860 --> 00:04:58,780
of a locator may serve more<font color="#CCCCCC"> than a port</font>

104
00:04:56,259 --> 00:05:01,000
so a<font color="#E5E5E5"> locator is a domain of trust</font>

105
00:04:58,780 --> 00:05:03,789
meaning<font color="#CCCCCC"> that the only applications that</font>

106
00:05:01,000 --> 00:05:05,770
are<font color="#E5E5E5"> working on the same a locator must</font>

107
00:05:03,789 --> 00:05:08,080
trust each other<font color="#E5E5E5"> if you don't want to</font>

108
00:05:05,770 --> 00:05:11,830
trust<font color="#E5E5E5"> just use separate a locators</font><font color="#CCCCCC"> and</font>

109
00:05:08,080 --> 00:05:13,270
<font color="#CCCCCC">the basic idea is that you</font><font color="#E5E5E5"> in order to</font>

110
00:05:11,830 --> 00:05:16,240
access those data structures

111
00:05:13,270 --> 00:05:18,250
so basically rings and buffers<font color="#CCCCCC"> you want</font>

112
00:05:16,240 --> 00:05:21,220
to<font color="#E5E5E5"> open a special device and then use</font>

113
00:05:18,250 --> 00:05:23,320
and you can<font color="#E5E5E5"> use an nmap operation to</font>

114
00:05:21,220 --> 00:05:28,690
make those data<font color="#E5E5E5"> structures available you</font>

115
00:05:23,320 --> 00:05:30,130
<font color="#CCCCCC">know</font><font color="#E5E5E5"> in your application so a nipple</font>

116
00:05:28,690 --> 00:05:33,940
ring as I was saying is an<font color="#CCCCCC"> abstraction</font>

117
00:05:30,130 --> 00:05:35,919
<font color="#E5E5E5">of a real bring the real</font><font color="#CCCCCC"> Hardware ring</font>

118
00:05:33,940 --> 00:05:39,310
<font color="#CCCCCC">so what happens is that applications</font>

119
00:05:35,919 --> 00:05:42,639
operate on the upstart ring and then the

120
00:05:39,310 --> 00:05:45,159
user<font color="#E5E5E5"> special sync operation to sync the</font>

121
00:05:42,639 --> 00:05:47,349
<font color="#CCCCCC">state-of-the-art</font><font color="#E5E5E5"> absent ring to the</font>

122
00:05:45,159 --> 00:05:49,060
state of a hardware ring<font color="#E5E5E5"> so there are</font>

123
00:05:47,349 --> 00:05:51,810
two pointers<font color="#CCCCCC"> this is the abstract ring</font>

124
00:05:49,060 --> 00:05:54,280
<font color="#E5E5E5">there are two pointers here and in tail</font>

125
00:05:51,810 --> 00:05:56,740
<font color="#E5E5E5">so the the meaning</font><font color="#CCCCCC"> of this pointer is</font>

126
00:05:54,280 --> 00:06:00,130
<font color="#E5E5E5">that everything within between</font><font color="#CCCCCC"> ed and</font>

127
00:05:56,740 --> 00:06:03,719
<font color="#E5E5E5">tail is owned by the application so for</font>

128
00:06:00,130 --> 00:06:06,699
<font color="#CCCCCC">instance for receive</font><font color="#E5E5E5"> rings those are new</font>

129
00:06:03,719 --> 00:06:08,500
pockets that<font color="#CCCCCC"> are ready to</font><font color="#E5E5E5"> be read for</font>

130
00:06:06,699 --> 00:06:11,860
<font color="#CCCCCC">transmit rings it's free space that you</font>

131
00:06:08,500 --> 00:06:14,380
can use for new English operations<font color="#CCCCCC"> quite</font>

132
00:06:11,860 --> 00:06:17,530
<font color="#CCCCCC">the rest of the descriptors in the ring</font>

133
00:06:14,380 --> 00:06:20,039
so everything between tail and head<font color="#E5E5E5"> it's</font>

134
00:06:17,530 --> 00:06:22,929
owned by<font color="#CCCCCC"> net1 is owned by</font><font color="#E5E5E5"> the kernel</font>

135
00:06:20,039 --> 00:06:27,009
this<font color="#E5E5E5"> is an</font><font color="#CCCCCC"> example on how</font><font color="#E5E5E5"> we would</font>

136
00:06:22,930 --> 00:06:29,949
process<font color="#E5E5E5"> our easybring right so say that</font>

137
00:06:27,009 --> 00:06:31,780
your application<font color="#CCCCCC"> has many descriptions</font>

138
00:06:29,949 --> 00:06:34,270
available many new<font color="#CCCCCC"> packets that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font>

139
00:06:31,780 --> 00:06:37,739
read it can for instance process<font color="#E5E5E5"> seven</font>

140
00:06:34,270 --> 00:06:40,710
<font color="#CCCCCC">new packets and then</font><font color="#E5E5E5"> increment the add</font>

141
00:06:37,740 --> 00:06:43,690
index while the tail is just<font color="#E5E5E5"> read only</font>

142
00:06:40,710 --> 00:06:46,659
after incrementing this index it can

143
00:06:43,690 --> 00:06:50,530
sink<font color="#E5E5E5"> there is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> special IO control call</font>

144
00:06:46,659 --> 00:06:53,979
to<font color="#E5E5E5"> sync a receiver</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> so what happens we</font>

145
00:06:50,530 --> 00:06:56,500
have do two effects here so<font color="#E5E5E5"> everything</font>

146
00:06:53,979 --> 00:06:58,300
<font color="#E5E5E5">between the previous position of ADD and</font>

147
00:06:56,500 --> 00:06:59,680
<font color="#CCCCCC">the new positional head is just returned</font>

148
00:06:58,300 --> 00:07:02,020
to<font color="#CCCCCC"> the kernel is</font>

149
00:06:59,680 --> 00:07:04,150
turn to the system<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a use so it so</font>

150
00:07:02,020 --> 00:07:08,349
that it<font color="#E5E5E5"> can be used for receiving the</font>

151
00:07:04,150 --> 00:07:11,349
more packets and if any new pockets are

152
00:07:08,350 --> 00:07:13,150
<font color="#E5E5E5">live since the last time we</font><font color="#CCCCCC"> synced tail</font>

153
00:07:11,350 --> 00:07:15,520
is incremented accordingly so in this

154
00:07:13,150 --> 00:07:17,109
case we received<font color="#E5E5E5"> three new pockets so</font>

155
00:07:15,520 --> 00:07:20,430
this is a very simple<font color="#E5E5E5"> synchronization</font>

156
00:07:17,110 --> 00:07:23,919
between your<font color="#CCCCCC"> application and the NIC</font>

157
00:07:20,430 --> 00:07:25,930
<font color="#CCCCCC">okay a very important</font><font color="#E5E5E5"> thing that I was</font>

158
00:07:23,919 --> 00:07:29,349
mentioning<font color="#CCCCCC"> before</font><font color="#E5E5E5"> it's blocking versus</font>

159
00:07:25,930 --> 00:07:31,360
busy waiting<font color="#E5E5E5"> so the sync operations for</font>

160
00:07:29,350 --> 00:07:34,870
both<font color="#E5E5E5"> receive</font><font color="#CCCCCC"> and transmit</font><font color="#E5E5E5"> rings are</font>

161
00:07:31,360 --> 00:07:37,660
synchronous<font color="#CCCCCC"> non-blocking</font><font color="#E5E5E5"> and basically</font>

162
00:07:34,870 --> 00:07:39,310
they operate on<font color="#E5E5E5"> all the rings</font><font color="#CCCCCC"> that are</font>

163
00:07:37,660 --> 00:07:41,289
<font color="#E5E5E5">bound to</font><font color="#CCCCCC"> a specific metal file</font>

164
00:07:39,310 --> 00:07:46,139
descriptor<font color="#CCCCCC"> so the basic idea is that you</font>

165
00:07:41,289 --> 00:07:49,300
<font color="#E5E5E5">open</font><font color="#CCCCCC"> an e in FM mode</font><font color="#E5E5E5"> binding a certain</font>

166
00:07:46,139 --> 00:07:51,820
certain<font color="#E5E5E5"> ring so you can bind the just</font>

167
00:07:49,300 --> 00:07:54,580
the<font color="#CCCCCC"> doozy ring so just transmit rings or</font>

168
00:07:51,820 --> 00:07:56,860
<font color="#E5E5E5">everything whatever</font><font color="#CCCCCC"> you like and once</font>

169
00:07:54,580 --> 00:07:59,620
you sync operations<font color="#E5E5E5"> the sync operations</font>

170
00:07:56,860 --> 00:08:03,250
<font color="#E5E5E5">operate on all the Rings</font><font color="#CCCCCC"> you bound you</font>

171
00:07:59,620 --> 00:08:06,250
bound<font color="#E5E5E5"> and you can use sync operations</font>

172
00:08:03,250 --> 00:08:09,370
for to implement busy waiting<font color="#E5E5E5"> so if you</font>

173
00:08:06,250 --> 00:08:13,180
want to<font color="#E5E5E5"> if you don't want to block but</font>

174
00:08:09,370 --> 00:08:15,300
this is actually<font color="#CCCCCC"> not the usual way use</font>

175
00:08:13,180 --> 00:08:17,770
<font color="#CCCCCC">network because you may want to actually</font>

176
00:08:15,300 --> 00:08:20,199
<font color="#E5E5E5">block for instance waiting for more</font>

177
00:08:17,770 --> 00:08:24,310
packets to come<font color="#E5E5E5"> or when you want</font><font color="#CCCCCC"> to wait</font>

178
00:08:20,199 --> 00:08:27,039
for<font color="#CCCCCC"> more space to transmit and you can</font>

179
00:08:24,310 --> 00:08:29,470
use the post<font color="#CCCCCC"> system called Alexis tinkle</font>

180
00:08:27,039 --> 00:08:32,559
or on Linux even a<font color="#CCCCCC"> pole or cave and this</font>

181
00:08:29,470 --> 00:08:34,300
<font color="#CCCCCC">is supported so if you for instance</font><font color="#E5E5E5"> you</font>

182
00:08:32,559 --> 00:08:37,000
want<font color="#CCCCCC"> to wait for more</font><font color="#E5E5E5"> English space you</font>

183
00:08:34,299 --> 00:08:38,890
would<font color="#E5E5E5"> do the</font><font color="#CCCCCC"> pauline event so this is</font>

184
00:08:37,000 --> 00:08:40,809
<font color="#E5E5E5">just a standard sequence it's very</font>

185
00:08:38,890 --> 00:08:46,870
similar to<font color="#CCCCCC"> what you would do if you were</font>

186
00:08:40,809 --> 00:08:51,160
using sockets<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so far</font><font color="#E5E5E5"> I've talked</font>

187
00:08:46,870 --> 00:08:55,839
about<font color="#E5E5E5"> Nick's so</font><font color="#CCCCCC"> agri</font><font color="#E5E5E5"> but actually</font><font color="#CCCCCC"> net</font><font color="#E5E5E5"> on</font>

188
00:08:51,160 --> 00:08:57,279
supports many kind of virtual ports<font color="#E5E5E5"> it</font>

189
00:08:55,839 --> 00:08:58,570
<font color="#CCCCCC">built reports are important because</font><font color="#E5E5E5"> that</font>

190
00:08:57,279 --> 00:09:01,060
they are they can be<font color="#E5E5E5"> implemented they</font>

191
00:08:58,570 --> 00:09:03,850
can be used to implement very fast<font color="#E5E5E5"> local</font>

192
00:09:01,060 --> 00:09:06,969
IPC communication<font color="#E5E5E5"> so for instance we</font>

193
00:09:03,850 --> 00:09:09,850
have<font color="#CCCCCC"> zero copy pipes</font><font color="#E5E5E5"> the idea is very</font>

194
00:09:06,970 --> 00:09:12,550
<font color="#E5E5E5">similar to UNIX pipes so you have two</font>

195
00:09:09,850 --> 00:09:15,339
ends<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you can let</font>

196
00:09:12,550 --> 00:09:19,779
<font color="#CCCCCC">processes took communicated through</font><font color="#E5E5E5"> the</font>

197
00:09:15,339 --> 00:09:22,899
pipe but but point<font color="#E5E5E5"> is that you cannot</font>

198
00:09:19,779 --> 00:09:25,149
<font color="#E5E5E5">renews metal pipes using the net API so</font>

199
00:09:22,899 --> 00:09:27,730
you<font color="#E5E5E5"> are able to transmit and receive</font>

200
00:09:25,149 --> 00:09:29,860
packets in batches<font color="#E5E5E5"> which means that you</font>

201
00:09:27,730 --> 00:09:32,769
can be very<font color="#E5E5E5"> very efficient and also</font><font color="#CCCCCC"> it</font>

202
00:09:29,860 --> 00:09:35,890
<font color="#E5E5E5">zero copy</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> zero copy because</font><font color="#CCCCCC"> you can</font>

203
00:09:32,769 --> 00:09:38,110
<font color="#E5E5E5">just swap the</font><font color="#CCCCCC"> scriptures as I will show</font>

204
00:09:35,890 --> 00:09:39,699
<font color="#CCCCCC">later</font><font color="#E5E5E5"> and this means that you can have</font>

205
00:09:38,110 --> 00:09:42,490
<font color="#E5E5E5">independently on</font><font color="#CCCCCC"> packet size you can</font>

206
00:09:39,700 --> 00:09:45,010
<font color="#E5E5E5">have very</font><font color="#CCCCCC"> very fast</font><font color="#E5E5E5"> communication</font><font color="#CCCCCC"> over</font>

207
00:09:42,490 --> 00:09:47,050
<font color="#CCCCCC">100 mega packets per second of course</font>

208
00:09:45,010 --> 00:09:49,000
this is<font color="#E5E5E5"> an benchmark assuming you are</font>

209
00:09:47,050 --> 00:09:52,479
<font color="#E5E5E5">not touching packets but still it's an</font>

210
00:09:49,000 --> 00:09:54,610
interesting upper upper bound<font color="#E5E5E5"> we have</font>

211
00:09:52,480 --> 00:09:56,350
<font color="#E5E5E5">was a software switch which is designed</font>

212
00:09:54,610 --> 00:09:59,740
<font color="#E5E5E5">for virtual machines</font><font color="#CCCCCC"> so by definition</font>

213
00:09:56,350 --> 00:10:01,510
with<font color="#CCCCCC"> Onision</font><font color="#E5E5E5"> you want isolations between</font>

214
00:09:59,740 --> 00:10:03,490
two virtual machines<font color="#E5E5E5"> which means that</font>

215
00:10:01,510 --> 00:10:05,410
the switch must copy packets when

216
00:10:03,490 --> 00:10:07,959
transmitting<font color="#E5E5E5"> from one port to the other</font>

217
00:10:05,410 --> 00:10:10,300
port<font color="#E5E5E5"> and because again because</font><font color="#CCCCCC"> of the</font>

218
00:10:07,959 --> 00:10:12,969
<font color="#CCCCCC">Netta</font><font color="#E5E5E5"> api the the ability to work in</font>

219
00:10:10,300 --> 00:10:16,199
batch<font color="#CCCCCC"> - you</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> able to actually</font>

220
00:10:12,970 --> 00:10:20,290
transmit<font color="#E5E5E5"> 20 million packets per pack or</font>

221
00:10:16,200 --> 00:10:22,149
per port we also<font color="#E5E5E5"> support monitor ports</font>

222
00:10:20,290 --> 00:10:24,520
for sniffing so similarly to what you

223
00:10:22,149 --> 00:10:27,100
it's it's sometimes you have<font color="#E5E5E5"> a</font><font color="#CCCCCC"> natural</font>

224
00:10:24,520 --> 00:10:29,050
<font color="#CCCCCC">application using some ports</font><font color="#E5E5E5"> and you</font>

225
00:10:27,100 --> 00:10:30,399
want to see what's happening<font color="#E5E5E5"> from</font><font color="#CCCCCC"> a</font>

226
00:10:29,050 --> 00:10:31,959
separate<font color="#E5E5E5"> process if you want to sniff</font>

227
00:10:30,399 --> 00:10:36,089
traffic you<font color="#CCCCCC"> can do that with a</font><font color="#E5E5E5"> special</font>

228
00:10:31,959 --> 00:10:39,099
port today<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> gonna talk mostly about</font>

229
00:10:36,089 --> 00:10:41,380
the last one which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> passed through</font>

230
00:10:39,100 --> 00:10:43,959
port<font color="#E5E5E5"> so</font><font color="#CCCCCC"> the idea is that you</font><font color="#E5E5E5"> have a</font>

231
00:10:41,380 --> 00:10:46,180
network<font color="#E5E5E5"> port in the Austin machine it</font>

232
00:10:43,959 --> 00:10:48,790
can<font color="#CCCCCC"> be a</font><font color="#E5E5E5"> NIC it can be a part of a</font>

233
00:10:46,180 --> 00:10:51,750
switch<font color="#E5E5E5"> it can a software switch it can</font>

234
00:10:48,790 --> 00:10:55,449
be a pipe or whatever<font color="#E5E5E5"> you like</font><font color="#CCCCCC"> and I</font>

235
00:10:51,750 --> 00:10:57,790
want to export this port within<font color="#E5E5E5"> a</font>

236
00:10:55,449 --> 00:10:59,079
virtual<font color="#CCCCCC"> machine</font><font color="#E5E5E5"> so the idea</font><font color="#CCCCCC"> of this is</font>

237
00:10:57,790 --> 00:11:00,670
<font color="#CCCCCC">the basically</font><font color="#E5E5E5"> the idea of network</font>

238
00:10:59,079 --> 00:11:01,870
function virtualization<font color="#E5E5E5"> when you want</font>

239
00:11:00,670 --> 00:11:05,529
what<font color="#E5E5E5"> you</font><font color="#CCCCCC"> want to run your</font><font color="#E5E5E5"> application</font>

240
00:11:01,870 --> 00:11:09,870
<font color="#E5E5E5">within a virtual</font><font color="#CCCCCC"> machine so this is</font>

241
00:11:05,529 --> 00:11:13,060
<font color="#E5E5E5">possible</font><font color="#CCCCCC"> with Neto pass-through okay</font>

242
00:11:09,870 --> 00:11:17,170
<font color="#CCCCCC">there are</font><font color="#E5E5E5"> two main use cases so we have</font>

243
00:11:13,060 --> 00:11:20,649
a<font color="#CCCCCC"> k vm guest give me a</font><font color="#E5E5E5"> mutant machine</font><font color="#CCCCCC"> if</font>

244
00:11:17,170 --> 00:11:22,599
you pass<font color="#E5E5E5"> through a</font><font color="#CCCCCC"> port ballast which on</font>

245
00:11:20,649 --> 00:11:24,660
the software<font color="#E5E5E5"> switch this is very</font>

246
00:11:22,600 --> 00:11:26,440
interesting<font color="#CCCCCC"> to implement a</font><font color="#E5E5E5"> very fast</font>

247
00:11:24,660 --> 00:11:29,730
<font color="#CCCCCC">local Internet</font>

248
00:11:26,440 --> 00:11:32,920
working so think of to be ends on your

249
00:11:29,730 --> 00:11:34,540
<font color="#CCCCCC">machine that</font><font color="#E5E5E5"> are able</font><font color="#CCCCCC"> to exchange</font><font color="#E5E5E5"> up to</font>

250
00:11:32,920 --> 00:11:36,310
20 millions packets per second and

251
00:11:34,540 --> 00:11:38,770
minimum package<font color="#CCCCCC"> sites so that's pretty</font>

252
00:11:36,310 --> 00:11:41,380
<font color="#E5E5E5">impressive if you want to implement some</font>

253
00:11:38,770 --> 00:11:45,340
<font color="#CCCCCC">sort of fast packet processing</font>

254
00:11:41,380 --> 00:11:49,600
application in<font color="#CCCCCC"> your in your machine or</font>

255
00:11:45,340 --> 00:11:52,060
you can pass through a art report<font color="#CCCCCC"> in</font>

256
00:11:49,600 --> 00:11:53,950
this<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a sort of direct assignment</font>

257
00:11:52,060 --> 00:11:57,430
that you can of course implement using

258
00:11:53,950 --> 00:11:59,320
standard PCI<font color="#CCCCCC"> pass through techniques but</font>

259
00:11:57,430 --> 00:12:01,599
it may still<font color="#CCCCCC"> be interesting because you</font>

260
00:11:59,320 --> 00:12:04,300
can implement the direct assignment

261
00:12:01,600 --> 00:12:06,190
without<font color="#E5E5E5"> iommu support in the advisor and</font>

262
00:12:04,300 --> 00:12:08,740
without actual<font color="#E5E5E5"> support for piece a pass</font>

263
00:12:06,190 --> 00:12:11,080
<font color="#E5E5E5">through so it's just a different way to</font>

264
00:12:08,740 --> 00:12:13,450
do the same<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> the point</font><font color="#E5E5E5"> of view</font>

265
00:12:11,080 --> 00:12:15,940
<font color="#E5E5E5">the guest the guest operating system</font>

266
00:12:13,450 --> 00:12:17,890
sees<font color="#CCCCCC"> Bertrand Inc</font><font color="#E5E5E5"> okay</font>

267
00:12:15,940 --> 00:12:21,700
<font color="#CCCCCC">and the</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> one NIC</font><font color="#E5E5E5"> as the very same</font>

268
00:12:17,890 --> 00:12:25,449
configuration as<font color="#E5E5E5"> the underlying network</font>

269
00:12:21,700 --> 00:12:28,540
port so if you pass through<font color="#E5E5E5"> hardware NIC</font>

270
00:12:25,450 --> 00:12:30,670
with<font color="#E5E5E5"> eight receive</font><font color="#CCCCCC"> links you will see a</font>

271
00:12:28,540 --> 00:12:35,650
bill to<font color="#CCCCCC"> an Inc with eight receive</font><font color="#E5E5E5"> beings</font>

272
00:12:30,670 --> 00:12:37,839
within<font color="#E5E5E5"> the</font><font color="#CCCCCC"> veto machine and again there</font>

273
00:12:35,650 --> 00:12:40,240
is<font color="#CCCCCC"> no overland</font><font color="#E5E5E5"> into in terms of coping</font>

274
00:12:37,840 --> 00:12:43,750
<font color="#CCCCCC">because the guest has direct</font><font color="#E5E5E5"> access to</font>

275
00:12:40,240 --> 00:12:46,060
the buffers in the<font color="#CCCCCC"> links on the of the</font>

276
00:12:43,750 --> 00:12:49,810
real port so you can do basically<font color="#E5E5E5"> zero</font>

277
00:12:46,060 --> 00:12:53,050
copy from<font color="#CCCCCC"> within the virtual machine any</font>

278
00:12:49,810 --> 00:12:56,050
<font color="#CCCCCC">sync on month so are used are basically</font>

279
00:12:53,050 --> 00:12:57,310
forwarded to the host so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> an</font>

280
00:12:56,050 --> 00:13:00,579
example<font color="#E5E5E5"> of</font><font color="#CCCCCC"> application that you may</font>

281
00:12:57,310 --> 00:13:03,880
implement<font color="#E5E5E5"> with this system it's a very</font>

282
00:13:00,580 --> 00:13:05,980
simple<font color="#E5E5E5"> two ports application so we have</font>

283
00:13:03,880 --> 00:13:08,020
an external port<font color="#E5E5E5"> think of it as a public</font>

284
00:13:05,980 --> 00:13:11,620
<font color="#E5E5E5">port on some network and an internal</font>

285
00:13:08,020 --> 00:13:14,560
port so<font color="#E5E5E5"> you want to forward packets from</font>

286
00:13:11,620 --> 00:13:16,900
the<font color="#CCCCCC"> receive drinks of the</font><font color="#E5E5E5"> external port</font>

287
00:13:14,560 --> 00:13:19,089
to the<font color="#CCCCCC"> transmit rings of the internal</font>

288
00:13:16,900 --> 00:13:20,800
ports and the other way around<font color="#CCCCCC"> and when</font>

289
00:13:19,089 --> 00:13:23,890
going from<font color="#E5E5E5"> the external to internal what</font>

290
00:13:20,800 --> 00:13:26,410
you also want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> apply</font><font color="#CCCCCC"> some rules so I</font>

291
00:13:23,890 --> 00:13:28,540
don't know depending maybe on

292
00:13:26,410 --> 00:13:30,040
<font color="#E5E5E5">destination IP or destination port you</font>

293
00:13:28,540 --> 00:13:31,329
may want<font color="#E5E5E5"> to drop some pockets or select</font>

294
00:13:30,040 --> 00:13:34,140
<font color="#E5E5E5">some pockets while on the other</font>

295
00:13:31,330 --> 00:13:38,920
<font color="#CCCCCC">direction you</font><font color="#E5E5E5"> don't want to filter okay</font>

296
00:13:34,140 --> 00:13:42,100
how do<font color="#E5E5E5"> you do that in very in a few</font>

297
00:13:38,920 --> 00:13:44,920
lines of code<font color="#E5E5E5"> so</font><font color="#CCCCCC"> this is the the</font><font color="#E5E5E5"> main</font>

298
00:13:42,100 --> 00:13:47,650
synchronization logic<font color="#E5E5E5"> first we open two</font>

299
00:13:44,920 --> 00:13:50,920
parts<font color="#E5E5E5"> okay so in the internal port in</font>

300
00:13:47,650 --> 00:13:53,319
the<font color="#E5E5E5"> external port using a simple very</font>

301
00:13:50,920 --> 00:13:56,229
simple library<font color="#E5E5E5"> and then we have a simple</font>

302
00:13:53,320 --> 00:13:59,230
<font color="#E5E5E5">pole based loop for loop okay so this is</font>

303
00:13:56,230 --> 00:14:00,910
the pole<font color="#E5E5E5"> so here we have two ports so we</font>

304
00:13:59,230 --> 00:14:02,680
have<font color="#E5E5E5"> two file descriptors one</font><font color="#CCCCCC"> file</font>

305
00:14:00,910 --> 00:14:05,050
<font color="#CCCCCC">descriptor fridge port</font><font color="#E5E5E5"> what we need to</font>

306
00:14:02,680 --> 00:14:08,109
do in this simple up for<font color="#E5E5E5"> wording</font>

307
00:14:05,050 --> 00:14:10,780
application is to decide to decide<font color="#E5E5E5"> which</font>

308
00:14:08,110 --> 00:14:12,760
events we<font color="#E5E5E5"> want to wait for so the logic</font>

309
00:14:10,780 --> 00:14:17,740
is<font color="#CCCCCC"> very simple let's take the external</font>

310
00:14:12,760 --> 00:14:19,870
port for instance so if<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> no</font>

311
00:14:17,740 --> 00:14:22,090
pockets<font color="#E5E5E5"> ready to be received on the</font>

312
00:14:19,870 --> 00:14:24,970
external<font color="#E5E5E5"> port what I could want to do is</font>

313
00:14:22,090 --> 00:14:27,100
to<font color="#E5E5E5"> spawn in to wait for them okay on</font>

314
00:14:24,970 --> 00:14:29,740
that file descriptor<font color="#E5E5E5"> otherwise it means</font>

315
00:14:27,100 --> 00:14:31,210
<font color="#CCCCCC">if' i do have</font><font color="#E5E5E5"> pockets so what</font><font color="#CCCCCC"> i want to</font>

316
00:14:29,740 --> 00:14:33,730
do since<font color="#CCCCCC"> i want to forward</font><font color="#E5E5E5"> on the other</font>

317
00:14:31,210 --> 00:14:36,010
<font color="#E5E5E5">port and just wait for</font><font color="#CCCCCC"> egress</font><font color="#E5E5E5"> space on</font>

318
00:14:33,730 --> 00:14:38,580
the other port<font color="#E5E5E5"> that's why you pull out</font>

319
00:14:36,010 --> 00:14:41,560
on this second part<font color="#E5E5E5"> and this is</font>

320
00:14:38,580 --> 00:14:44,290
specularly<font color="#E5E5E5"> for the other direction so if</font>

321
00:14:41,560 --> 00:14:46,089
<font color="#E5E5E5">I have so if I don't have any pockets</font>

322
00:14:44,290 --> 00:14:47,620
ready ready to<font color="#CCCCCC"> be received on the</font>

323
00:14:46,090 --> 00:14:51,400
internal port<font color="#CCCCCC"> I</font><font color="#E5E5E5"> wait for them otherwise</font>

324
00:14:47,620 --> 00:14:53,760
have we await<font color="#CCCCCC"> for egress space on</font>

325
00:14:51,400 --> 00:14:57,130
opposite port and then I call the<font color="#CCCCCC"> pole</font>

326
00:14:53,760 --> 00:15:00,340
function when<font color="#CCCCCC"> power returns it means</font>

327
00:14:57,130 --> 00:15:02,290
that some events are ready and so I can

328
00:15:00,340 --> 00:15:04,720
<font color="#E5E5E5">forward and they forward in both</font>

329
00:15:02,290 --> 00:15:06,160
directions<font color="#CCCCCC"> right from the external</font><font color="#E5E5E5"> to</font>

330
00:15:04,720 --> 00:15:08,890
internal from the end the other way

331
00:15:06,160 --> 00:15:11,199
<font color="#E5E5E5">around this</font><font color="#CCCCCC"> is the function that</font>

332
00:15:08,890 --> 00:15:13,720
implements<font color="#CCCCCC"> zero copy forwarding</font><font color="#E5E5E5"> it's</font>

333
00:15:11,200 --> 00:15:18,010
interesting what I'm doing here is just

334
00:15:13,720 --> 00:15:21,040
<font color="#CCCCCC">a parallel scan of</font><font color="#E5E5E5"> two rings so what I</font>

335
00:15:18,010 --> 00:15:23,500
want<font color="#E5E5E5"> to do is I have</font><font color="#CCCCCC"> receive ring from</font>

336
00:15:21,040 --> 00:15:25,030
<font color="#CCCCCC">the source port and the transmit ring of</font>

337
00:15:23,500 --> 00:15:26,620
the destination port I want just to

338
00:15:25,030 --> 00:15:29,260
forward a bunch<font color="#E5E5E5"> of packets from the</font>

339
00:15:26,620 --> 00:15:32,110
receive ring to the<font color="#E5E5E5"> transmit ring so I</font>

340
00:15:29,260 --> 00:15:36,130
do a perilous<font color="#CCCCCC"> Carnot and the nice thing</font>

341
00:15:32,110 --> 00:15:39,910
<font color="#CCCCCC">is that whenever you can implement zero</font>

342
00:15:36,130 --> 00:15:45,280
copy forwarding so each descriptor

343
00:15:39,910 --> 00:15:48,120
<font color="#E5E5E5">enduring as inside as inside a buffer</font>

344
00:15:45,280 --> 00:15:51,670
index and the buffer<font color="#CCCCCC"> indexes and</font><font color="#E5E5E5"> the</font>

345
00:15:48,120 --> 00:15:53,860
identifier of<font color="#E5E5E5"> a buffer with indicator so</font>

346
00:15:51,670 --> 00:15:56,110
all you need<font color="#CCCCCC"> to do to</font><font color="#E5E5E5"> forward from my</font>

347
00:15:53,860 --> 00:15:58,180
ring to the other<font color="#CCCCCC"> adjust</font><font color="#E5E5E5"> to swap the</font>

348
00:15:56,110 --> 00:16:00,190
index of the two descriptors<font color="#E5E5E5"> this is</font>

349
00:15:58,180 --> 00:16:04,390
what they do here<font color="#E5E5E5"> and adjust the land of</font>

350
00:16:00,190 --> 00:16:07,180
course<font color="#CCCCCC"> I also need to tell network that</font>

351
00:16:04,390 --> 00:16:12,280
the buffer<font color="#CCCCCC"> has changed</font><font color="#E5E5E5"> because it may</font>

352
00:16:07,180 --> 00:16:14,380
need to change<font color="#E5E5E5"> the DMA mapping inside</font>

353
00:16:12,280 --> 00:16:16,420
the kernel<font color="#E5E5E5"> but otherwise what I wanted</font>

354
00:16:14,380 --> 00:16:19,360
to show<font color="#CCCCCC"> you is that in you</font><font color="#E5E5E5"> can implement</font>

355
00:16:16,420 --> 00:16:23,410
<font color="#E5E5E5">some simple forwarding rule in a very</font>

356
00:16:19,360 --> 00:16:26,500
<font color="#CCCCCC">elegant way</font><font color="#E5E5E5"> and simple way</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is</font>

357
00:16:23,410 --> 00:16:30,160
the example<font color="#CCCCCC"> I you can run</font><font color="#E5E5E5"> I have a key</font>

358
00:16:26,500 --> 00:16:32,050
move it on machines and<font color="#E5E5E5"> two pipes so I</font>

359
00:16:30,160 --> 00:16:35,469
could have implemented a different

360
00:16:32,050 --> 00:16:37,300
example with our airports but pipe is

361
00:16:35,470 --> 00:16:41,190
easy to do because<font color="#E5E5E5"> it's all in</font><font color="#CCCCCC"> software</font>

362
00:16:37,300 --> 00:16:43,420
so I have two metal pipes<font color="#CCCCCC"> I pass</font><font color="#E5E5E5"> through</font>

363
00:16:41,190 --> 00:16:45,220
one end<font color="#E5E5E5"> of each pipe to</font><font color="#CCCCCC"> the vector</font>

364
00:16:43,420 --> 00:16:47,800
<font color="#E5E5E5">machine so the</font><font color="#CCCCCC"> Bristol machine which is</font>

365
00:16:45,220 --> 00:16:49,780
at QA movies<font color="#CCCCCC"> no machine will see to pass</font>

366
00:16:47,800 --> 00:16:51,699
through<font color="#E5E5E5"> network port while the other end</font>

367
00:16:49,780 --> 00:16:55,949
of the pipe are used for packet

368
00:16:51,700 --> 00:16:58,960
generation<font color="#E5E5E5"> so here</font><font color="#CCCCCC"> I generate up a</font>

369
00:16:55,950 --> 00:17:02,080
stream of packet and on the other end<font color="#CCCCCC"> of</font>

370
00:16:58,960 --> 00:17:05,829
the pipe I receive and and so what I

371
00:17:02,080 --> 00:17:10,390
measured here with short packets<font color="#E5E5E5"> so 64</font>

372
00:17:05,829 --> 00:17:12,669
bytes<font color="#CCCCCC"> I mentioned</font><font color="#E5E5E5"> about 17 to 20 minimum</font>

373
00:17:10,390 --> 00:17:14,020
packets per second which is pretty

374
00:17:12,670 --> 00:17:15,910
<font color="#E5E5E5">impressive because consider this</font>

375
00:17:14,020 --> 00:17:17,589
application is<font color="#CCCCCC"> bloom nted with just one</font>

376
00:17:15,910 --> 00:17:23,740
thread<font color="#CCCCCC"> okay</font>

377
00:17:17,589 --> 00:17:31,270
<font color="#E5E5E5">why with Fulham</font><font color="#CCCCCC"> to sides</font><font color="#E5E5E5"> so 1500 bytes</font><font color="#CCCCCC"> I</font>

378
00:17:23,740 --> 00:17:33,910
get about<font color="#CCCCCC"> 8</font><font color="#E5E5E5"> I actually tried to both 0</font>

379
00:17:31,270 --> 00:17:35,620
copy and copy and it's interesting to

380
00:17:33,910 --> 00:17:37,890
<font color="#E5E5E5">see that in the in the copy case</font>

381
00:17:35,620 --> 00:17:40,959
actually<font color="#E5E5E5"> for very short packets the</font>

382
00:17:37,890 --> 00:17:42,460
overhead of changing the DMA may mapping

383
00:17:40,960 --> 00:17:45,400
because you need to do that

384
00:17:42,460 --> 00:17:46,930
it's actually<font color="#CCCCCC"> Eiger than copy</font><font color="#E5E5E5"> so with</font>

385
00:17:45,400 --> 00:17:49,150
short packets actually makes that<font color="#CCCCCC"> this</font>

386
00:17:46,930 --> 00:17:50,770
is<font color="#E5E5E5"> this is actually</font><font color="#CCCCCC"> the same than</font><font color="#E5E5E5"> you</font>

387
00:17:49,150 --> 00:17:53,410
were saying before<font color="#E5E5E5"> so with short packets</font>

388
00:17:50,770 --> 00:17:55,300
actually doing<font color="#E5E5E5"> things in</font><font color="#CCCCCC"> cpu copying</font>

389
00:17:53,410 --> 00:18:04,960
<font color="#CCCCCC">we have</font><font color="#E5E5E5"> something in cash</font><font color="#CCCCCC"> you can very</font>

390
00:17:55,300 --> 00:18:10,690
easily<font color="#E5E5E5"> process them okay I also prepared</font>

391
00:18:04,960 --> 00:18:12,760
a very short a comparison between<font color="#CCCCCC"> Nathan</font>

392
00:18:10,690 --> 00:18:14,860
<font color="#E5E5E5">indicate there is no time actually to go</font>

393
00:18:12,760 --> 00:18:21,820
through this but what I wanted<font color="#E5E5E5"> to show</font>

394
00:18:14,860 --> 00:18:23,800
<font color="#E5E5E5">here is some some comparison item so one</font>

395
00:18:21,820 --> 00:18:27,159
<font color="#CCCCCC">advantage</font><font color="#E5E5E5"> of advantage of net map and</font>

396
00:18:23,800 --> 00:18:28,180
also<font color="#CCCCCC"> xdp actually is that it's very easy</font>

397
00:18:27,160 --> 00:18:33,430
<font color="#E5E5E5">to</font><font color="#CCCCCC"> setup</font>

398
00:18:28,180 --> 00:18:35,410
okay so with DP<font color="#E5E5E5"> DK you need to care</font>

399
00:18:33,430 --> 00:18:37,900
<font color="#CCCCCC">about each</font><font color="#E5E5E5"> pages you need to care about</font>

400
00:18:35,410 --> 00:18:42,010
iommu you need to bind and unbind

401
00:18:37,900 --> 00:18:44,290
drivers from the<font color="#E5E5E5"> kernel driver to</font><font color="#CCCCCC"> the</font>

402
00:18:42,010 --> 00:18:47,290
driver while it<font color="#E5E5E5"> would exit</font><font color="#CCCCCC"> via</font><font color="#E5E5E5"> net map</font>

403
00:18:44,290 --> 00:18:50,710
you just have<font color="#E5E5E5"> to do nothing</font><font color="#CCCCCC"> actually we</font>

404
00:18:47,290 --> 00:18:55,450
do need some very small<font color="#CCCCCC"> EBP F</font><font color="#E5E5E5"> program to</font>

405
00:18:50,710 --> 00:18:59,740
redirect your<font color="#E5E5E5"> packets to an AF</font><font color="#CCCCCC"> x DP</font>

406
00:18:55,450 --> 00:19:02,500
<font color="#E5E5E5">socket also the other advantages you get</font>

407
00:18:59,740 --> 00:19:05,140
by<font color="#CCCCCC"> the</font><font color="#E5E5E5"> using kernel drivers is that you</font>

408
00:19:02,500 --> 00:19:08,260
can reuse<font color="#E5E5E5"> the standard EPO</font><font color="#CCCCCC"> to and a th</font>

409
00:19:05,140 --> 00:19:12,370
tool tools<font color="#E5E5E5"> while in DB DK of course you</font>

410
00:19:08,260 --> 00:19:15,690
need to rewrite adopt rules<font color="#E5E5E5"> also the</font>

411
00:19:12,370 --> 00:19:19,929
trading<font color="#CCCCCC"> model is a bit a little bit</font><font color="#E5E5E5"> more</font>

412
00:19:15,690 --> 00:19:23,350
flexible<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we DP decay we have a</font>

413
00:19:19,930 --> 00:19:25,300
fixed<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> L course</font><font color="#CCCCCC"> so you write your</font>

414
00:19:23,350 --> 00:19:27,610
your code and your code is run in the

415
00:19:25,300 --> 00:19:30,490
context<font color="#E5E5E5"> of a typical</font><font color="#CCCCCC"> callback on a core</font>

416
00:19:27,610 --> 00:19:32,919
why do we<font color="#CCCCCC"> net1 xep you can say FX VP you</font>

417
00:19:30,490 --> 00:19:37,300
can basically<font color="#CCCCCC"> intake you can basically</font>

418
00:19:32,920 --> 00:19:41,500
open<font color="#CCCCCC"> F here AF fix DP sockets or open</font>

419
00:19:37,300 --> 00:19:43,120
network ports<font color="#E5E5E5"> wherever you wish and run</font>

420
00:19:41,500 --> 00:19:48,790
your packet processing code in any

421
00:19:43,120 --> 00:19:53,250
thread<font color="#E5E5E5"> right</font><font color="#CCCCCC"> another advantage again of</font>

422
00:19:48,790 --> 00:19:55,720
<font color="#CCCCCC">native over DP DK is that you can and</font>

423
00:19:53,250 --> 00:19:59,200
disadvantages actually shared with<font color="#CCCCCC"> xtp</font>

424
00:19:55,720 --> 00:20:04,150
is that you get standard synchronization

425
00:19:59,200 --> 00:20:06,049
tools so<font color="#E5E5E5"> Paul Paul and select</font><font color="#CCCCCC"> actually</font>

426
00:20:04,150 --> 00:20:09,669
will vindicate you can

427
00:20:06,049 --> 00:20:11,840
use receive interrupts but that's a bit

428
00:20:09,669 --> 00:20:16,820
harder than<font color="#CCCCCC"> just using</font><font color="#E5E5E5"> the standard</font>

429
00:20:11,840 --> 00:20:20,178
<font color="#CCCCCC">system calls of course GP decays are</font>

430
00:20:16,820 --> 00:20:22,250
extreme performance<font color="#CCCCCC"> so when I prepared</font>

431
00:20:20,179 --> 00:20:24,080
this comparison<font color="#E5E5E5"> it's very clear is that</font>

432
00:20:22,250 --> 00:20:27,590
if you want the best performance you

433
00:20:24,080 --> 00:20:29,689
must use<font color="#CCCCCC"> Tbk because we met up and</font><font color="#E5E5E5"> a FX</font>

434
00:20:27,590 --> 00:20:31,340
DP we are still using system calls<font color="#E5E5E5"> so</font>

435
00:20:29,690 --> 00:20:34,039
<font color="#CCCCCC">that as an</font><font color="#E5E5E5"> overhead and comes with</font>

436
00:20:31,340 --> 00:20:36,500
advantages in terms of improve this

437
00:20:34,039 --> 00:20:38,389
relation<font color="#E5E5E5"> standard synchronization but if</font>

438
00:20:36,500 --> 00:20:46,539
you all you<font color="#CCCCCC"> want is performance</font><font color="#E5E5E5"> you</font>

439
00:20:38,389 --> 00:20:49,219
should<font color="#CCCCCC"> use the</font><font color="#E5E5E5"> PDK</font><font color="#CCCCCC"> ok conclusion I</font>

440
00:20:46,539 --> 00:20:52,070
showed<font color="#CCCCCC"> you a very</font><font color="#E5E5E5"> simple example</font><font color="#CCCCCC"> I would</font>

441
00:20:49,220 --> 00:20:55,009
write simple but efficient<font color="#CCCCCC"> name</font>

442
00:20:52,070 --> 00:20:56,928
<font color="#CCCCCC">application I think the design</font>

443
00:20:55,009 --> 00:20:59,389
principles behind<font color="#CCCCCC"> Network are important</font>

444
00:20:56,929 --> 00:21:02,840
they inspire<font color="#CCCCCC"> XTP</font><font color="#E5E5E5"> because in the</font>

445
00:20:59,389 --> 00:21:05,000
comparison it's very evident as many

446
00:21:02,840 --> 00:21:08,389
choices taken by net pub and<font color="#E5E5E5"> xep are</font>

447
00:21:05,000 --> 00:21:10,970
similar why do you want to<font color="#E5E5E5"> snap map</font>

448
00:21:08,389 --> 00:21:13,459
it's the biggest advantage I think<font color="#CCCCCC"> it's</font>

449
00:21:10,970 --> 00:21:15,110
easy<font color="#E5E5E5"> to set up very simple API</font><font color="#CCCCCC"> in</font>

450
00:21:13,460 --> 00:21:16,539
<font color="#CCCCCC">standard</font><font color="#E5E5E5"> synchronization of course it's</font>

451
00:21:15,110 --> 00:21:18,860
a smaller<font color="#CCCCCC"> project in the other project</font>

452
00:21:16,539 --> 00:21:20,419
<font color="#E5E5E5">and it's easy to integrate with the</font>

453
00:21:18,860 --> 00:21:24,428
<font color="#E5E5E5">existing application ok</font>

454
00:21:20,419 --> 00:21:26,840
why<font color="#CCCCCC"> pre</font><font color="#E5E5E5"> since we do</font><font color="#CCCCCC"> PDK usually need to</font>

455
00:21:24,429 --> 00:21:30,110
<font color="#E5E5E5">write your application from</font><font color="#CCCCCC"> scratch and</font>

456
00:21:26,840 --> 00:21:32,000
make<font color="#CCCCCC"> your application fit within the</font>

457
00:21:30,110 --> 00:21:34,879
davidic a framework of course you can

458
00:21:32,000 --> 00:21:37,159
get<font color="#CCCCCC"> high performance if you want to</font>

459
00:21:34,879 --> 00:21:39,259
reproduce the tutorial that this simple

460
00:21:37,159 --> 00:21:40,879
<font color="#E5E5E5">setup you can just follow the tutorials</font>

461
00:21:39,259 --> 00:21:42,710
link<font color="#E5E5E5"> and there are</font><font color="#CCCCCC"> a detailed</font>

462
00:21:40,879 --> 00:21:46,668
<font color="#CCCCCC">instruction on how</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> reproduce that all</font>

463
00:21:42,710 --> 00:21:48,750
the code and<font color="#E5E5E5"> get those numbers thank you</font>

464
00:21:46,669 --> 00:21:55,970
I'm ready to<font color="#CCCCCC"> work</font><font color="#E5E5E5"> their questions</font>

465
00:21:48,750 --> 00:21:55,970
[Applause]

466
00:22:08,440 --> 00:22:13,400
[Music]

467
00:22:09,650 --> 00:22:13,400
<font color="#E5E5E5">thank you so much thank you</font>

468
00:22:15,580 --> 00:22:21,320
before the<font color="#CCCCCC"> next presentation</font><font color="#E5E5E5"> and it</font>

469
00:22:18,050 --> 00:22:23,720
starts we'll just use the opportunity to

470
00:22:21,320 --> 00:22:25,419
<font color="#E5E5E5">remind people that</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> you please</font>

471
00:22:23,720 --> 00:22:28,520
leave<font color="#E5E5E5"> Vincenzo feedback through the</font>

472
00:22:25,420 --> 00:22:30,110
<font color="#CCCCCC">costum website there's a pitch at the</font>

473
00:22:28,520 --> 00:22:32,629
end<font color="#E5E5E5"> of the link at the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the talk</font>

474
00:22:30,110 --> 00:22:35,800
<font color="#E5E5E5">and also I will poke the meathook this</font>

475
00:22:32,630 --> 00:22:35,800
evening<font color="#CCCCCC"> my</font><font color="#E5E5E5"> game</font>

476
00:22:56,820 --> 00:22:59,879
[Music]

477
00:23:00,029 --> 00:23:03,509
are you working<font color="#CCCCCC"> with</font>

