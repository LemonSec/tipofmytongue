1
00:00:05,460 --> 00:00:12,719
soon everyone can hear<font color="#E5E5E5"> me at the back</font>

2
00:00:08,540 --> 00:00:16,259
give me<font color="#CCCCCC"> a thumbs up</font><font color="#E5E5E5"> if you can my name</font>

3
00:00:12,719 --> 00:00:19,290
<font color="#CCCCCC">is Sam and I work with Alphonso</font><font color="#E5E5E5"> labs</font><font color="#CCCCCC"> we</font>

4
00:00:16,260 --> 00:00:25,110
work on television<font color="#CCCCCC"> data I specifically</font>

5
00:00:19,290 --> 00:00:29,340
work on video<font color="#E5E5E5"> AI and applying vision</font>

6
00:00:25,110 --> 00:00:32,820
algorithms to television videos I'm

7
00:00:29,340 --> 00:00:37,079
<font color="#E5E5E5">gonna talk</font><font color="#CCCCCC"> about using</font><font color="#E5E5E5"> CUDA and OpenCL</font>

8
00:00:32,820 --> 00:00:39,120
<font color="#CCCCCC">and combining that to analyze video</font><font color="#E5E5E5"> and</font>

9
00:00:37,079 --> 00:00:42,149
probably<font color="#E5E5E5"> apply machine learning or</font>

10
00:00:39,120 --> 00:00:43,678
vision algorithms that<font color="#E5E5E5"> you want to</font><font color="#CCCCCC"> we'll</font>

11
00:00:42,149 --> 00:00:46,489
be using<font color="#CCCCCC"> a</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> simple</font><font color="#E5E5E5"> example to do</font>

12
00:00:43,679 --> 00:00:49,649
that<font color="#E5E5E5"> it's not a very complex problem</font>

13
00:00:46,489 --> 00:00:51,690
<font color="#CCCCCC">detecting scene transitions in a in a</font>

14
00:00:49,649 --> 00:00:54,449
stream of video<font color="#E5E5E5"> that's that's what we</font>

15
00:00:51,690 --> 00:01:00,239
are<font color="#E5E5E5"> going to use as a demonstration to</font>

16
00:00:54,449 --> 00:01:03,839
apply CUDA and<font color="#E5E5E5"> OpenCL we'll talk about</font>

17
00:01:00,239 --> 00:01:07,850
video encoding<font color="#E5E5E5"> using ffmpeg</font><font color="#CCCCCC"> to decode</font>

18
00:01:03,839 --> 00:01:15,360
videos and eventually use<font color="#CCCCCC"> open CV</font><font color="#E5E5E5"> to</font>

19
00:01:07,850 --> 00:01:17,270
analyze<font color="#E5E5E5"> video frames so the the</font>

20
00:01:15,360 --> 00:01:19,890
algorithm<font color="#E5E5E5"> that we are gonna talk is</font>

21
00:01:17,270 --> 00:01:23,429
detecting scene transitions<font color="#E5E5E5"> so</font>

22
00:01:19,890 --> 00:01:26,670
<font color="#E5E5E5">essentially the idea</font><font color="#CCCCCC"> is to detect when</font>

23
00:01:23,430 --> 00:01:30,479
does one<font color="#CCCCCC"> Scene change from a short</font><font color="#E5E5E5"> to</font>

24
00:01:26,670 --> 00:01:33,030
<font color="#CCCCCC">the other</font><font color="#E5E5E5"> essentially the algorithm is</font>

25
00:01:30,479 --> 00:01:36,000
very<font color="#CCCCCC"> simple you</font><font color="#E5E5E5"> compare the pixel values</font>

26
00:01:33,030 --> 00:01:38,670
of subsequent frames to consecutive

27
00:01:36,000 --> 00:01:40,289
<font color="#E5E5E5">frames and if the difference</font><font color="#CCCCCC"> average of</font>

28
00:01:38,670 --> 00:01:41,700
the difference is higher than some

29
00:01:40,289 --> 00:01:43,500
threshold you declare<font color="#E5E5E5"> that it's a</font>

30
00:01:41,700 --> 00:01:47,729
transition so it's a very basic

31
00:01:43,500 --> 00:01:52,409
algorithm and the idea is<font color="#E5E5E5"> not is to use</font>

32
00:01:47,729 --> 00:01:54,000
it<font color="#E5E5E5"> to</font><font color="#CCCCCC"> analyze the difference in</font>

33
00:01:52,409 --> 00:01:56,369
execution times when you execute<font color="#CCCCCC"> it</font>

34
00:01:54,000 --> 00:01:59,780
<font color="#E5E5E5">using the CPU and when you offload the</font>

35
00:01:56,369 --> 00:01:59,780
computations to<font color="#E5E5E5"> a GPU</font>

36
00:02:00,900 --> 00:02:06,640
so the first thing when you<font color="#E5E5E5"> talk about</font>

37
00:02:03,460 --> 00:02:08,579
<font color="#E5E5E5">video</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> of video codec</font><font color="#CCCCCC"> and it's</font>

38
00:02:06,640 --> 00:02:10,470
basically some software that

39
00:02:08,580 --> 00:02:12,430
<font color="#E5E5E5">decompresses and in compresses</font>

40
00:02:10,470 --> 00:02:16,090
compresses and<font color="#E5E5E5"> decompresses digital</font>

41
00:02:12,430 --> 00:02:19,480
video<font color="#E5E5E5"> a lot of people confuse video</font>

42
00:02:16,090 --> 00:02:24,220
codec with the containers but<font color="#CCCCCC"> there</font>

43
00:02:19,480 --> 00:02:29,230
<font color="#CCCCCC">that's very</font><font color="#E5E5E5"> different and essentially if</font>

44
00:02:24,220 --> 00:02:30,760
you want to use video frames if you want

45
00:02:29,230 --> 00:02:34,000
to<font color="#E5E5E5"> analyze video frames you need to have</font>

46
00:02:30,760 --> 00:02:40,298
some mechanism<font color="#E5E5E5"> to decode video frames</font>

47
00:02:34,000 --> 00:02:42,040
<font color="#E5E5E5">and that's what video decoders are so</font>

48
00:02:40,299 --> 00:02:45,340
video decoding is is<font color="#CCCCCC"> basically you</font>

49
00:02:42,040 --> 00:02:48,510
decompress<font color="#CCCCCC"> a video from raw format and</font>

50
00:02:45,340 --> 00:02:51,430
use it in your<font color="#E5E5E5"> and in your analysis now</font>

51
00:02:48,510 --> 00:02:54,459
there are two types<font color="#E5E5E5"> or two ways to do</font>

52
00:02:51,430 --> 00:02:56,860
that one is using a software decoder<font color="#CCCCCC"> a</font>

53
00:02:54,459 --> 00:03:01,350
software decoder would essentially<font color="#CCCCCC"> use</font>

54
00:02:56,860 --> 00:03:04,780
the CPU cycles to perform the

55
00:03:01,350 --> 00:03:07,329
decompression<font color="#E5E5E5"> the</font><font color="#CCCCCC"> other is to use a</font>

56
00:03:04,780 --> 00:03:10,480
<font color="#E5E5E5">dedicated</font><font color="#CCCCCC"> chipset or a dedicated</font>

57
00:03:07,329 --> 00:03:12,700
hardware<font color="#E5E5E5"> to essentially handle the</font>

58
00:03:10,480 --> 00:03:15,220
decoding part now using<font color="#CCCCCC"> hardware of</font>

59
00:03:12,700 --> 00:03:17,078
course is better not<font color="#E5E5E5"> because it's faster</font>

60
00:03:15,220 --> 00:03:21,810
<font color="#CCCCCC">but simply because</font><font color="#E5E5E5"> you free your CPU for</font>

61
00:03:17,079 --> 00:03:25,180
doing<font color="#E5E5E5"> something more useful a lot of</font>

62
00:03:21,810 --> 00:03:30,359
hardware is<font color="#E5E5E5"> available in media has a lot</font>

63
00:03:25,180 --> 00:03:34,450
of<font color="#E5E5E5"> hardware</font><font color="#CCCCCC"> for video decoding and</font>

64
00:03:30,359 --> 00:03:36,400
<font color="#CCCCCC">NVIDIA</font><font color="#E5E5E5"> ya so NVIDIA GPUs according to</font>

65
00:03:34,450 --> 00:03:40,030
the<font color="#CCCCCC"> Nvidia web site NVIDIA GPUs contain</font>

66
00:03:36,400 --> 00:03:42,430
<font color="#E5E5E5">hardware decoders</font><font color="#CCCCCC"> which can provide</font>

67
00:03:40,030 --> 00:03:47,829
fully accelerated hardware decoding and

68
00:03:42,430 --> 00:03:49,569
encoding<font color="#E5E5E5"> but this is partially true you</font>

69
00:03:47,829 --> 00:03:52,840
need<font color="#CCCCCC"> to be where you need to</font><font color="#E5E5E5"> spend a lot</font>

70
00:03:49,569 --> 00:03:53,679
<font color="#CCCCCC">of</font><font color="#E5E5E5"> money if you want unlimited encoding</font>

71
00:03:52,840 --> 00:03:56,410
sessions at a time

72
00:03:53,680 --> 00:04:00,250
close to<font color="#E5E5E5"> $500</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> want a GPU that</font>

73
00:03:56,410 --> 00:04:02,260
good<font color="#E5E5E5"> but most of the GPUs</font><font color="#CCCCCC"> support</font><font color="#E5E5E5"> to</font>

74
00:04:00,250 --> 00:04:04,720
encoding sessions in parallel and a lot

75
00:04:02,260 --> 00:04:09,640
of<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> around 10 decoding sessions</font>

76
00:04:04,720 --> 00:04:14,200
<font color="#E5E5E5">at a</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> and NVIDIA provides a very</font>

77
00:04:09,640 --> 00:04:16,009
comprehensive<font color="#E5E5E5"> and video SDK video codec</font>

78
00:04:14,200 --> 00:04:18,009
SD

79
00:04:16,009 --> 00:04:21,680
a lot of<font color="#E5E5E5"> people have tried to build</font>

80
00:04:18,009 --> 00:04:25,130
stuff<font color="#E5E5E5"> on top of that and ffmpeg has</font>

81
00:04:21,680 --> 00:04:30,050
support for using<font color="#E5E5E5"> the Nvidia video codec</font>

82
00:04:25,130 --> 00:04:31,250
<font color="#E5E5E5">and yeah coming to ffmpeg</font><font color="#CCCCCC"> a lot of</font>

83
00:04:30,050 --> 00:04:33,349
people here<font color="#E5E5E5"> would be aware</font><font color="#CCCCCC"> of this</font>

84
00:04:31,250 --> 00:04:37,389
<font color="#CCCCCC">ffmpeg is basically</font><font color="#E5E5E5"> an open source</font>

85
00:04:33,349 --> 00:04:39,889
library<font color="#E5E5E5"> to do anything with media</font>

86
00:04:37,389 --> 00:04:43,759
transcoding and coding decoding<font color="#E5E5E5"> you can</font>

87
00:04:39,889 --> 00:04:46,550
do almost anything<font color="#E5E5E5"> using ffmpeg</font><font color="#CCCCCC"> it's</font>

88
00:04:43,759 --> 00:04:48,979
<font color="#E5E5E5">written in C the</font><font color="#CCCCCC"> only thing is if you</font>

89
00:04:46,550 --> 00:04:51,380
<font color="#E5E5E5">want to use it with</font><font color="#CCCCCC"> invidious codec</font><font color="#E5E5E5"> you</font>

90
00:04:48,979 --> 00:04:53,330
need to build it from source which is

91
00:04:51,380 --> 00:04:56,120
kind<font color="#CCCCCC"> of tricky but it should be</font><font color="#E5E5E5"> pretty</font>

92
00:04:53,330 --> 00:04:57,830
<font color="#CCCCCC">straightforward if you follow the dogs</font>

93
00:04:56,120 --> 00:05:03,349
and media provides it that provides the

94
00:04:57,830 --> 00:05:10,359
dogs they're coming to the second part

95
00:05:03,349 --> 00:05:15,080
we have that is CUDA<font color="#E5E5E5"> so GPUs basically</font>

96
00:05:10,360 --> 00:05:16,490
have gained significance<font color="#E5E5E5"> since we people</font>

97
00:05:15,080 --> 00:05:19,990
have started using machine<font color="#CCCCCC"> learning and</font>

98
00:05:16,490 --> 00:05:23,509
then they found that GPUs can accelerate

99
00:05:19,990 --> 00:05:25,870
computations<font color="#E5E5E5"> tremendously and that's</font>

100
00:05:23,509 --> 00:05:30,139
when Nvidia came out with its

101
00:05:25,870 --> 00:05:33,080
architecture which can<font color="#E5E5E5"> perform which can</font>

102
00:05:30,139 --> 00:05:36,169
allow a<font color="#E5E5E5"> user to write partial code in</font>

103
00:05:33,080 --> 00:05:37,789
GPU so basically you can<font color="#CCCCCC"> have a function</font>

104
00:05:36,169 --> 00:05:39,500
<font color="#CCCCCC">which</font><font color="#E5E5E5"> you can have an application that</font>

105
00:05:37,789 --> 00:05:43,940
is<font color="#CCCCCC"> running on</font><font color="#E5E5E5"> the CPU but</font><font color="#CCCCCC"> it can offload</font>

106
00:05:39,500 --> 00:05:45,650
some functions<font color="#E5E5E5"> to on the GPU they call</font>

107
00:05:43,940 --> 00:05:50,030
kernel functions<font color="#E5E5E5"> in</font><font color="#CCCCCC"> in in Cudas</font>

108
00:05:45,650 --> 00:05:52,520
architecture so<font color="#E5E5E5"> you can provide it</font>

109
00:05:50,030 --> 00:05:57,049
basically<font color="#E5E5E5"> provides</font><font color="#CCCCCC"> a C</font><font color="#E5E5E5"> extension or C++</font>

110
00:05:52,520 --> 00:05:58,880
extension and you can do a offload the

111
00:05:57,050 --> 00:06:01,130
heavy lifting the heavy arithmetic to

112
00:05:58,880 --> 00:06:03,620
the GPU<font color="#E5E5E5"> and because GPUs are designed</font>

113
00:06:01,130 --> 00:06:12,289
for parallel processing they'll

114
00:06:03,620 --> 00:06:15,139
hopefully<font color="#E5E5E5"> compute it faster</font><font color="#CCCCCC"> open CV</font><font color="#E5E5E5"> open</font>

115
00:06:12,289 --> 00:06:17,870
<font color="#E5E5E5">CV is a very popular</font><font color="#CCCCCC"> and a very widely</font>

116
00:06:15,139 --> 00:06:21,050
used<font color="#E5E5E5"> free and</font><font color="#CCCCCC"> open-source</font><font color="#E5E5E5"> library for</font>

117
00:06:17,870 --> 00:06:25,490
vision<font color="#CCCCCC"> the open CV website claims that</font>

118
00:06:21,050 --> 00:06:28,580
it has around<font color="#CCCCCC"> 14,000</font><font color="#E5E5E5"> active</font><font color="#CCCCCC"> uses it</font>

119
00:06:25,490 --> 00:06:31,430
provides<font color="#CCCCCC"> plugins in Python Java and C++</font>

120
00:06:28,580 --> 00:06:34,340
it also has bindings which allow you<font color="#E5E5E5"> to</font>

121
00:06:31,430 --> 00:06:36,650
use the native hardware<font color="#E5E5E5"> acceleration and</font>

122
00:06:34,340 --> 00:06:43,719
specifically it allows you to<font color="#CCCCCC"> use</font><font color="#E5E5E5"> CUDA</font>

123
00:06:36,650 --> 00:06:48,500
so that's that's<font color="#E5E5E5"> great for us yeah so</font>

124
00:06:43,720 --> 00:06:51,919
<font color="#CCCCCC">there's a there's a slight missing but</font>

125
00:06:48,500 --> 00:06:56,300
yeah so basically<font color="#E5E5E5"> that's like talked</font>

126
00:06:51,919 --> 00:07:00,409
about how<font color="#E5E5E5"> CUDA helps you accelerate so</font>

127
00:06:56,300 --> 00:07:03,530
<font color="#E5E5E5">imagine if you have two vectors with 64</font>

128
00:07:00,409 --> 00:07:05,539
elements<font color="#E5E5E5"> or some elements essentially a</font>

129
00:07:03,530 --> 00:07:09,258
CPU would<font color="#E5E5E5"> process</font><font color="#CCCCCC"> it sequentially</font><font color="#E5E5E5"> where</font>

130
00:07:05,539 --> 00:07:12,139
<font color="#E5E5E5">whereas a GP you would have a individual</font>

131
00:07:09,259 --> 00:07:14,900
thread working on<font color="#E5E5E5"> each each element of</font>

132
00:07:12,139 --> 00:07:19,099
<font color="#E5E5E5">both the vectors so essentially a GPU</font>

133
00:07:14,900 --> 00:07:24,099
does not speed up<font color="#E5E5E5"> but it maximizes your</font>

134
00:07:19,099 --> 00:07:24,099
throughput<font color="#CCCCCC"> I hope that makes sense I</font>

135
00:07:25,629 --> 00:07:34,039
yeah<font color="#E5E5E5"> so yeah using</font><font color="#CCCCCC"> OpenCV bit cooler so</font>

136
00:07:31,030 --> 00:07:35,210
<font color="#CCCCCC">OpenCV again has bindings as</font><font color="#E5E5E5"> I said and</font>

137
00:07:34,039 --> 00:07:37,990
it you<font color="#E5E5E5"> have to again build it from</font>

138
00:07:35,210 --> 00:07:42,289
source if<font color="#CCCCCC"> you want to use it with</font><font color="#E5E5E5"> CUDA</font>

139
00:07:37,990 --> 00:07:46,130
so it has a lot of<font color="#E5E5E5"> name space not a lot</font>

140
00:07:42,289 --> 00:07:49,669
of<font color="#CCCCCC"> Rapids and the</font><font color="#E5E5E5"> the problem is that if</font>

141
00:07:46,130 --> 00:07:52,340
<font color="#E5E5E5">you want to use the decoder the Nvidia</font>

142
00:07:49,669 --> 00:07:55,008
decoder for<font color="#CCCCCC"> decoding video frames</font><font color="#E5E5E5"> you</font>

143
00:07:52,340 --> 00:07:57,650
need to use it with ffmpeg basically so

144
00:07:55,009 --> 00:08:01,009
<font color="#E5E5E5">you need to have ffmpeg built for using</font>

145
00:07:57,650 --> 00:08:10,370
GPU to be using you know video decoding

146
00:08:01,009 --> 00:08:12,590
with<font color="#CCCCCC"> OpenCV so basically your</font><font color="#E5E5E5"> the scene</font>

147
00:08:10,370 --> 00:08:15,830
detection<font color="#E5E5E5"> right we talked about it it</font>

148
00:08:12,590 --> 00:08:17,630
requires<font color="#E5E5E5"> three</font><font color="#CCCCCC"> things it</font><font color="#E5E5E5"> requires the</font>

149
00:08:15,830 --> 00:08:20,389
first step is essentially decoding the

150
00:08:17,630 --> 00:08:24,080
video to get individual frames and then

151
00:08:20,389 --> 00:08:28,310
you need<font color="#E5E5E5"> to use you need to perform</font>

152
00:08:24,080 --> 00:08:36,338
computations on each frame<font color="#CCCCCC"> so let's see</font>

153
00:08:28,310 --> 00:08:40,279
how<font color="#E5E5E5"> that works so basically up you have</font>

154
00:08:36,339 --> 00:08:42,380
<font color="#CCCCCC">OpenCV of library which allows you</font>

155
00:08:40,279 --> 00:08:45,260
so essentially you

156
00:08:42,380 --> 00:08:47,570
<font color="#CCCCCC">good and</font><font color="#E5E5E5"> then basically you have two</font>

157
00:08:45,260 --> 00:08:50,240
frames which are<font color="#E5E5E5"> subsequent frames and</font>

158
00:08:47,570 --> 00:08:53,810
they are in HSV color space and you can

159
00:08:50,240 --> 00:08:57,200
offload<font color="#E5E5E5"> your pixel by pixel subtraction</font>

160
00:08:53,810 --> 00:09:00,650
<font color="#E5E5E5">to the GPU and because GPU performs</font><font color="#CCCCCC"> the</font>

161
00:08:57,200 --> 00:09:02,420
computation on each pixel<font color="#E5E5E5"> this</font>

162
00:09:00,650 --> 00:09:07,430
essentially should<font color="#E5E5E5"> be faster if you just</font>

163
00:09:02,420 --> 00:09:09,650
<font color="#CCCCCC">use it</font><font color="#E5E5E5"> if you just run it on the CPU so</font>

164
00:09:07,430 --> 00:09:13,280
these are some functions<font color="#E5E5E5"> that you can</font>

165
00:09:09,650 --> 00:09:16,550
<font color="#CCCCCC">use you can basically the perform a</font>

166
00:09:13,280 --> 00:09:19,370
matrix subtraction<font color="#CCCCCC"> you can find the</font>

167
00:09:16,550 --> 00:09:22,819
absolute sum of all the pixel values of

168
00:09:19,370 --> 00:09:24,380
a<font color="#CCCCCC"> matrix</font><font color="#E5E5E5"> and the last step is basically</font>

169
00:09:22,820 --> 00:09:28,280
<font color="#CCCCCC">just averaging across three different</font>

170
00:09:24,380 --> 00:09:31,910
<font color="#CCCCCC">channels and again</font><font color="#E5E5E5"> basically a symbol of</font>

171
00:09:28,280 --> 00:09:33,800
matrix<font color="#E5E5E5"> is bigger video is basically a</font>

172
00:09:31,910 --> 00:09:36,709
collection of images<font color="#E5E5E5"> and each image is</font>

173
00:09:33,800 --> 00:09:39,949
essentially a matrix and because

174
00:09:36,710 --> 00:09:42,410
matrices<font color="#CCCCCC"> can individually be the each</font>

175
00:09:39,950 --> 00:09:44,660
pixel of matrix<font color="#CCCCCC"> scanning it can be used</font>

176
00:09:42,410 --> 00:09:48,079
to individually perform computations you

177
00:09:44,660 --> 00:09:49,969
can use this<font color="#E5E5E5"> you can use a GPU to speed</font>

178
00:09:48,080 --> 00:09:52,430
it up<font color="#E5E5E5"> simply because you</font><font color="#CCCCCC"> have different</font>

179
00:09:49,970 --> 00:09:53,720
<font color="#E5E5E5">pixel points and each pixel is</font>

180
00:09:52,430 --> 00:09:57,640
independent of the other<font color="#E5E5E5"> if you are</font>

181
00:09:53,720 --> 00:09:57,640
performing<font color="#E5E5E5"> a pixel-by-pixel comparison</font>

182
00:09:59,320 --> 00:10:09,010
some experimental some experiments<font color="#CCCCCC"> that</font>

183
00:10:04,310 --> 00:10:13,849
I did again this uses a Tesla<font color="#CCCCCC"> 1080i</font>

184
00:10:09,010 --> 00:10:16,220
<font color="#E5E5E5">that's the NVIDIA GPU that I used so if</font>

185
00:10:13,850 --> 00:10:18,680
you if you<font color="#E5E5E5"> run your decoding this</font>

186
00:10:16,220 --> 00:10:23,360
basically is running the<font color="#CCCCCC"> upper</font><font color="#E5E5E5"> algorithm</font>

187
00:10:18,680 --> 00:10:25,640
<font color="#E5E5E5">on a</font><font color="#CCCCCC"> 1-minute mp4 file again if you if</font>

188
00:10:23,360 --> 00:10:27,530
you run<font color="#E5E5E5"> only the software decoder that</font>

189
00:10:25,640 --> 00:10:30,830
<font color="#E5E5E5">is you decode on the CPU and then you</font>

190
00:10:27,530 --> 00:10:34,610
run<font color="#E5E5E5"> your entire algorithm on the CPU it</font>

191
00:10:30,830 --> 00:10:37,520
takes about 18 seconds<font color="#E5E5E5"> but if you load</font>

192
00:10:34,610 --> 00:10:40,220
the decoding to the hardware<font color="#E5E5E5"> and even</font>

193
00:10:37,520 --> 00:10:42,439
execute your pixel<font color="#CCCCCC"> computer or pixel</font>

194
00:10:40,220 --> 00:10:46,900
combinations on a GPU<font color="#E5E5E5"> it just takes</font><font color="#CCCCCC"> two</font>

195
00:10:42,440 --> 00:10:46,900
seconds<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> speed-up</font><font color="#E5E5E5"> is is quite high</font>

196
00:10:47,980 --> 00:10:51,430
thank you<font color="#E5E5E5"> and</font>

197
00:10:54,850 --> 00:11:03,029
[Applause]

198
00:11:12,080 --> 00:11:19,020
right<font color="#CCCCCC"> so you use the pre-existing file</font>

199
00:11:17,040 --> 00:11:22,560
to do these computations

200
00:11:19,020 --> 00:11:24,569
<font color="#E5E5E5">I understood</font><font color="#CCCCCC"> so is it also possible to</font>

201
00:11:22,560 --> 00:11:25,020
for<font color="#CCCCCC"> example do the same thing on</font><font color="#E5E5E5"> a live</font>

202
00:11:24,570 --> 00:11:27,630
stream

203
00:11:25,020 --> 00:11:28,589
oh I'd buy a camera<font color="#E5E5E5"> or something</font><font color="#CCCCCC"> like</font>

204
00:11:27,630 --> 00:11:32,310
<font color="#E5E5E5">that</font><font color="#CCCCCC"> yes</font>

205
00:11:28,589 --> 00:11:36,450
you<font color="#CCCCCC"> can do</font><font color="#E5E5E5"> it on on using in a live</font>

206
00:11:32,310 --> 00:11:39,630
stream on camera<font color="#E5E5E5"> so um if I am correctly</font>

207
00:11:36,450 --> 00:11:47,390
<font color="#E5E5E5">two seconds for the whole minute that</font>

208
00:11:39,630 --> 00:11:51,450
means life analysis should<font color="#E5E5E5"> be yes</font><font color="#CCCCCC"> I</font>

209
00:11:47,390 --> 00:11:53,459
think<font color="#CCCCCC"> the only</font><font color="#E5E5E5"> catch there might be that</font>

210
00:11:51,450 --> 00:11:56,730
you may not<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> use the</font><font color="#CCCCCC"> open</font>

211
00:11:53,459 --> 00:11:58,729
<font color="#CCCCCC">series existing libraries to decode the</font>

212
00:11:56,730 --> 00:12:00,959
frames on the<font color="#E5E5E5"> using the Nvidia</font><font color="#CCCCCC"> hardware</font>

213
00:11:58,730 --> 00:12:03,060
<font color="#CCCCCC">you might have to</font><font color="#E5E5E5"> write some wrappers</font>

214
00:12:00,959 --> 00:12:05,069
around<font color="#E5E5E5"> that I've not tried</font><font color="#CCCCCC"> that but you</font>

215
00:12:03,060 --> 00:12:07,500
might need to write some wrappers or

216
00:12:05,070 --> 00:12:09,990
some code<font color="#E5E5E5"> around that to use the Nvidia</font>

217
00:12:07,500 --> 00:12:12,899
<font color="#CCCCCC">Hardware yeah</font><font color="#E5E5E5"> depends on the camera</font>

218
00:12:09,990 --> 00:12:14,149
<font color="#E5E5E5">probably probably have one that puts out</font>

219
00:12:12,899 --> 00:12:22,650
h.264

220
00:12:14,149 --> 00:12:24,990
<font color="#CCCCCC">that should be okay I</font><font color="#E5E5E5"> think how much how</font>

221
00:12:22,650 --> 00:12:27,630
much frames how much frames<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you</font>

222
00:12:24,990 --> 00:12:30,120
need to decide<font color="#E5E5E5"> that the image have</font>

223
00:12:27,630 --> 00:12:32,160
changed from one<font color="#E5E5E5"> to the other</font>

224
00:12:30,120 --> 00:12:33,630
yeah that's that's<font color="#CCCCCC"> something that you</font>

225
00:12:32,160 --> 00:12:36,630
can probably experiment and find<font color="#E5E5E5"> out but</font>

226
00:12:33,630 --> 00:12:38,640
<font color="#CCCCCC">again</font><font color="#E5E5E5"> for the purpose of this experiment</font>

227
00:12:36,630 --> 00:12:41,730
that<font color="#E5E5E5"> I did I just compared to two</font>

228
00:12:38,640 --> 00:12:43,199
<font color="#E5E5E5">subsequent frames so the first frame is</font>

229
00:12:41,730 --> 00:12:46,720
of course not useful but<font color="#E5E5E5"> the first and</font>

230
00:12:43,200 --> 00:12:48,170
second the second and third<font color="#E5E5E5"> like that</font>

231
00:12:46,720 --> 00:12:51,750
[Music]

232
00:12:48,170 --> 00:12:55,620
another<font color="#CCCCCC"> question please if in the case</font>

233
00:12:51,750 --> 00:13:01,220
<font color="#E5E5E5">of</font><font color="#CCCCCC"> wearing okay in the case and that you</font>

234
00:12:55,620 --> 00:13:05,610
use FM mph I<font color="#E5E5E5"> don't know I'm sorry</font>

235
00:13:01,220 --> 00:13:09,839
yes<font color="#CCCCCC"> you know with</font><font color="#E5E5E5"> CUDA bindings and do</font>

236
00:13:05,610 --> 00:13:14,520
you live the then decoding the code

237
00:13:09,839 --> 00:13:18,720
frame into the GPU<font color="#CCCCCC"> memory</font><font color="#E5E5E5"> or you go and</font>

238
00:13:14,520 --> 00:13:21,120
get back<font color="#E5E5E5"> the frame to main memory and</font>

239
00:13:18,720 --> 00:13:22,870
then you have to offload then it again

240
00:13:21,120 --> 00:13:26,630
to the

241
00:13:22,870 --> 00:13:28,160
<font color="#CCCCCC">yes very nice question so if you see the</font>

242
00:13:26,630 --> 00:13:31,189
second one<font color="#E5E5E5"> right software</font><font color="#CCCCCC"> decoded with</font>

243
00:13:28,160 --> 00:13:34,219
<font color="#E5E5E5">CUDA so that essentially</font><font color="#CCCCCC"> does the</font>

244
00:13:31,190 --> 00:13:36,230
<font color="#E5E5E5">computation in memory and then copies</font>

245
00:13:34,220 --> 00:13:38,840
that to the GPU<font color="#E5E5E5"> so the second one is</font>

246
00:13:36,230 --> 00:13:40,220
<font color="#E5E5E5">what you were asking and the last one of</font>

247
00:13:38,840 --> 00:13:42,230
course<font color="#CCCCCC"> does it on</font><font color="#E5E5E5"> the GPU memory</font>

248
00:13:40,220 --> 00:14:00,110
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> yeah everything on the GPU</font>

249
00:13:42,230 --> 00:14:04,190
<font color="#CCCCCC">thank</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much other questions</font><font color="#CCCCCC"> just</font>

250
00:14:00,110 --> 00:14:06,560
<font color="#CCCCCC">looking at those stats there</font><font color="#E5E5E5"> it seems</font>

251
00:14:04,190 --> 00:14:08,240
like you<font color="#E5E5E5"> get more benefit from just</font>

252
00:14:06,560 --> 00:14:09,560
<font color="#E5E5E5">doing the hard work of Dakota and</font>

253
00:14:08,240 --> 00:14:11,750
suppose<font color="#E5E5E5"> a software to code then your</font>

254
00:14:09,560 --> 00:14:15,319
actual<font color="#E5E5E5"> CUDA algorithm for scene change</font>

255
00:14:11,750 --> 00:14:16,910
detection<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> missing a</font>

256
00:14:15,320 --> 00:14:19,430
combination<font color="#E5E5E5"> there like what if you just</font>

257
00:14:16,910 --> 00:14:22,670
done<font color="#CCCCCC"> Hardware decode</font><font color="#E5E5E5"> without the CUDA is</font>

258
00:14:19,430 --> 00:14:24,650
it<font color="#CCCCCC"> gonna go from 18 seconds to 4 seconds</font>

259
00:14:22,670 --> 00:14:26,870
I'm like do you<font color="#CCCCCC"> have any</font><font color="#E5E5E5"> feel for</font><font color="#CCCCCC"> like</font>

260
00:14:24,650 --> 00:14:30,290
what the division of labor is there

261
00:14:26,870 --> 00:14:31,670
because<font color="#CCCCCC"> it seems like you know it seems</font>

262
00:14:30,290 --> 00:14:33,829
<font color="#CCCCCC">like your algorithm</font><font color="#E5E5E5"> is pretty cheap no</font>

263
00:14:31,670 --> 00:14:35,479
matter what you know<font color="#E5E5E5"> for the actual</font>

264
00:14:33,830 --> 00:14:38,170
<font color="#E5E5E5">scene change detection and the benefit</font>

265
00:14:35,480 --> 00:14:40,430
that<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> showing there</font><font color="#CCCCCC"> is largely</font>

266
00:14:38,170 --> 00:14:42,339
<font color="#E5E5E5">just the difference between software</font>

267
00:14:40,430 --> 00:14:46,479
decoding and hardware decoding which

268
00:14:42,340 --> 00:14:52,100
yeah it's gonna<font color="#E5E5E5"> obviously give me faster</font>

269
00:14:46,480 --> 00:14:53,540
<font color="#CCCCCC">again that's</font><font color="#E5E5E5"> possible but essentially if</font>

270
00:14:52,100 --> 00:14:55,100
you<font color="#E5E5E5"> if you just</font><font color="#CCCCCC"> compare</font><font color="#E5E5E5"> the first two</font>

271
00:14:53,540 --> 00:14:57,949
stats you see that there is<font color="#E5E5E5"> there</font><font color="#CCCCCC"> is</font>

272
00:14:55,100 --> 00:15:00,320
again<font color="#E5E5E5"> even if you offload the pixel</font>

273
00:14:57,950 --> 00:15:03,140
computations to to the GPU<font color="#E5E5E5"> I'm not tried</font>

274
00:15:00,320 --> 00:15:05,150
<font color="#CCCCCC">hardware</font><font color="#E5E5E5"> decoded without CUDA I mean but</font>

275
00:15:03,140 --> 00:15:07,280
<font color="#E5E5E5">essentially when you when you if that</font>

276
00:15:05,150 --> 00:15:09,230
would<font color="#CCCCCC"> be I think that would be</font><font color="#E5E5E5"> more</font>

277
00:15:07,280 --> 00:15:11,480
<font color="#E5E5E5">expensive because you have to copy data</font>

278
00:15:09,230 --> 00:15:13,250
back from<font color="#CCCCCC"> the GPU to the CPU to perform</font>

279
00:15:11,480 --> 00:15:17,000
the computations<font color="#E5E5E5"> so there will be some</font>

280
00:15:13,250 --> 00:15:19,010
<font color="#E5E5E5">overhead involved there so if</font><font color="#CCCCCC"> you're</font>

281
00:15:17,000 --> 00:15:21,440
using the GPU for<font color="#E5E5E5"> decoding frames</font><font color="#CCCCCC"> you</font>

282
00:15:19,010 --> 00:15:22,910
might as well<font color="#E5E5E5"> just use it for for you</font>

283
00:15:21,440 --> 00:15:26,240
know performing pixel computations<font color="#E5E5E5"> and</font>

284
00:15:22,910 --> 00:15:27,949
save<font color="#E5E5E5"> that overhead do you have any idea</font>

285
00:15:26,240 --> 00:15:30,050
what the what the<font color="#E5E5E5"> division of labor is</font>

286
00:15:27,950 --> 00:15:31,430
<font color="#CCCCCC">we did between</font><font color="#E5E5E5"> like what how much are</font>

287
00:15:30,050 --> 00:15:32,109
the savings<font color="#CCCCCC"> is because of the</font><font color="#E5E5E5"> hardware</font>

288
00:15:31,430 --> 00:15:33,790
decoder

289
00:15:32,110 --> 00:15:36,250
is just the fact that you're<font color="#CCCCCC"> not doing</font>

290
00:15:33,790 --> 00:15:37,630
<font color="#E5E5E5">you know</font><font color="#CCCCCC"> you're not using the memory</font>

291
00:15:36,250 --> 00:15:39,430
<font color="#E5E5E5">bandwidth going back and forth between</font>

292
00:15:37,630 --> 00:15:41,980
the hardware<font color="#CCCCCC"> you know between the GPU</font>

293
00:15:39,430 --> 00:15:44,050
<font color="#CCCCCC">memory in the main memory</font><font color="#E5E5E5"> so I think the</font>

294
00:15:41,980 --> 00:15:46,839
<font color="#E5E5E5">the second start we have that kind of</font>

295
00:15:44,050 --> 00:15:51,099
explains<font color="#CCCCCC"> that so there you</font><font color="#E5E5E5"> technically</font>

296
00:15:46,839 --> 00:15:54,310
<font color="#CCCCCC">have to</font><font color="#E5E5E5"> copy the the decoded frames to</font>

297
00:15:51,100 --> 00:15:56,950
to the GPU so that that's why I think

298
00:15:54,310 --> 00:16:00,310
<font color="#E5E5E5">that takes up some more time here</font><font color="#CCCCCC"> simply</font>

299
00:15:56,950 --> 00:16:19,180
because<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to you have that memory</font>

300
00:16:00,310 --> 00:16:21,660
transfer overhead<font color="#CCCCCC"> with your algorithm</font>

301
00:16:19,180 --> 00:16:25,420
you say that you<font color="#CCCCCC"> decide if you have a</font>

302
00:16:21,660 --> 00:16:28,420
transition<font color="#E5E5E5"> some change if you if</font><font color="#CCCCCC"> you're</font>

303
00:16:25,420 --> 00:16:31,209
if the difference between<font color="#E5E5E5"> the your pixel</font>

304
00:16:28,420 --> 00:16:32,979
values is above certain threshold but it

305
00:16:31,209 --> 00:16:35,709
looks that<font color="#E5E5E5"> there you have a branch and</font>

306
00:16:32,980 --> 00:16:38,170
from I<font color="#CCCCCC"> just know a</font><font color="#E5E5E5"> little bit of</font><font color="#CCCCCC"> GPGPU</font>

307
00:16:35,709 --> 00:16:40,510
but I think you are not supposed to<font color="#E5E5E5"> have</font>

308
00:16:38,170 --> 00:16:44,469
any branch<font color="#E5E5E5"> so that your code</font><font color="#CCCCCC"> actually</font>

309
00:16:40,510 --> 00:16:47,470
runs really fast<font color="#E5E5E5"> right how do</font><font color="#CCCCCC"> you fix</font>

310
00:16:44,470 --> 00:16:51,459
<font color="#CCCCCC">that</font><font color="#E5E5E5"> so you don't run the entire</font>

311
00:16:47,470 --> 00:16:53,589
algorithm on the GPU<font color="#CCCCCC"> basically OpenCV</font>

312
00:16:51,459 --> 00:16:56,170
allows you to offload only the pixel

313
00:16:53,589 --> 00:16:57,910
computations on the GPU<font color="#E5E5E5"> so I'm just</font>

314
00:16:56,170 --> 00:17:00,189
<font color="#CCCCCC">calculating the difference between two</font>

315
00:16:57,910 --> 00:17:02,800
<font color="#CCCCCC">pics or two matrices or two image frames</font>

316
00:17:00,190 --> 00:17:05,260
on<font color="#CCCCCC"> the GPU and I get the</font><font color="#E5E5E5"> result back and</font>

317
00:17:02,800 --> 00:17:07,928
the<font color="#E5E5E5"> decision-making happens on the on</font>

318
00:17:05,260 --> 00:17:08,500
the<font color="#E5E5E5"> CPU so the branching essentially as</font>

319
00:17:07,929 --> 00:17:12,929
you<font color="#E5E5E5"> said</font>

320
00:17:08,500 --> 00:17:19,000
allows is<font color="#E5E5E5"> on the CPU that makes sense</font>

321
00:17:12,929 --> 00:17:21,959
<font color="#E5E5E5">okay we still have plenty</font><font color="#CCCCCC"> of time for</font>

322
00:17:19,000 --> 00:17:21,959
<font color="#E5E5E5">more</font><font color="#CCCCCC"> questions</font>

323
00:17:22,480 --> 00:17:29,620
don't don't you get a delay of<font color="#E5E5E5"> 2 seconds</font>

324
00:17:26,888 --> 00:17:33,459
when you<font color="#E5E5E5"> do this for a complete stream</font>

325
00:17:29,620 --> 00:17:35,949
because takes 2 seconds to compute for

326
00:17:33,460 --> 00:17:38,230
<font color="#E5E5E5">one</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> sorry</font>

327
00:17:35,950 --> 00:17:42,490
don't you<font color="#E5E5E5"> get a delay of 2 seconds</font>

328
00:17:38,230 --> 00:17:46,860
between each<font color="#E5E5E5"> confusion because you do</font>

329
00:17:42,490 --> 00:17:51,340
take two seconds to compute<font color="#CCCCCC"> 4 1 2 images</font>

330
00:17:46,860 --> 00:17:53,500
<font color="#E5E5E5">two seconds</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> well it's it's for a</font>

331
00:17:51,340 --> 00:17:57,279
<font color="#CCCCCC">1-minute file so it has around 1800</font>

332
00:17:53,500 --> 00:18:04,169
frames<font color="#CCCCCC"> 1800</font><font color="#E5E5E5"> amazing</font><font color="#CCCCCC"> alright so 2 seconds</font>

333
00:17:57,279 --> 00:18:04,169
is for 1800 images more questions

334
00:18:16,309 --> 00:18:24,928
hi<font color="#E5E5E5"> thanks so I'm trying to wrap</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> head</font>

335
00:18:22,769 --> 00:18:26,990
<font color="#E5E5E5">around how would I</font><font color="#CCCCCC"> use does</font><font color="#E5E5E5"> that use</font>

336
00:18:24,929 --> 00:18:29,840
<font color="#CCCCCC">OpenCV an tensorflow</font>

337
00:18:26,990 --> 00:18:32,580
<font color="#E5E5E5">to do similar things by using</font>

338
00:18:29,840 --> 00:18:35,309
convolutional style networks models<font color="#E5E5E5"> and</font>

339
00:18:32,580 --> 00:18:37,230
images<font color="#CCCCCC"> but I used</font><font color="#E5E5E5"> open CV for the pixel</font>

340
00:18:35,309 --> 00:18:41,039
computations<font color="#E5E5E5"> and when I want to use CUDA</font>

341
00:18:37,230 --> 00:18:43,950
for like big big stuff<font color="#CCCCCC"> I use</font><font color="#E5E5E5"> tensor flow</font>

342
00:18:41,039 --> 00:18:46,950
GPU because I only know Python<font color="#CCCCCC"> so I was</font>

343
00:18:43,950 --> 00:18:48,749
wondering<font color="#E5E5E5"> it seems</font><font color="#CCCCCC"> like you would like</font>

344
00:18:46,950 --> 00:18:51,210
this type<font color="#CCCCCC"> of approach would cut a lot</font><font color="#E5E5E5"> of</font>

345
00:18:48,749 --> 00:18:54,059
my time<font color="#CCCCCC"> if I knew how to do that in</font>

346
00:18:51,210 --> 00:18:58,789
<font color="#E5E5E5">Python how would you because this</font>

347
00:18:54,059 --> 00:18:58,789
example<font color="#E5E5E5"> you showed you yes he blacksmith</font>

348
00:18:59,119 --> 00:19:04,080
but do you know if there's a<font color="#CCCCCC"> rapper if</font>

349
00:19:02,070 --> 00:19:07,549
there's a way where I<font color="#CCCCCC"> can make use of</font>

350
00:19:04,080 --> 00:19:11,158
<font color="#E5E5E5">GPU computations with</font><font color="#CCCCCC"> OpenCV in</font><font color="#E5E5E5"> Python I</font>

351
00:19:07,549 --> 00:19:12,690
don't<font color="#E5E5E5"> think so</font><font color="#CCCCCC"> I tried and I couldn't</font>

352
00:19:11,159 --> 00:19:16,169
get it<font color="#CCCCCC"> I would have</font><font color="#E5E5E5"> loved to do it in</font>

353
00:19:12,690 --> 00:19:18,240
Python<font color="#CCCCCC"> too but I couldn't get</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> working</font>

354
00:19:16,169 --> 00:19:20,940
<font color="#E5E5E5">I don't think it's</font><font color="#CCCCCC"> possible to do</font><font color="#E5E5E5"> it in</font>

355
00:19:18,240 --> 00:19:32,330
Python<font color="#E5E5E5"> but you're free to go ahead and</font>

356
00:19:20,940 --> 00:19:32,330
give it<font color="#E5E5E5"> a shot thank you</font>

357
00:19:36,500 --> 00:19:38,560
you

