1
00:00:05,300 --> 00:00:11,879
<font color="#CCCCCC">okay so welcome</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> my session about</font>

2
00:00:08,340 --> 00:00:13,620
gravia and its support for tools<font color="#CCCCCC"> I work</font>

3
00:00:11,880 --> 00:00:17,310
on<font color="#CCCCCC"> for</font>

4
00:00:13,620 --> 00:00:19,669
and on the debugger support in<font color="#CCCCCC"> growl am</font>

5
00:00:17,310 --> 00:00:19,669
<font color="#CCCCCC">Oh</font>

6
00:00:20,189 --> 00:00:24,180
the<font color="#E5E5E5"> following is for informational</font>

7
00:00:21,900 --> 00:00:27,570
purposes only<font color="#CCCCCC"> you should</font><font color="#E5E5E5"> not make</font><font color="#CCCCCC"> any</font>

8
00:00:24,180 --> 00:00:32,278
decision<font color="#CCCCCC"> and it so first</font><font color="#E5E5E5"> I will talk</font>

9
00:00:27,570 --> 00:00:35,040
about grab and polyglot world<font color="#E5E5E5"> that is</font>

10
00:00:32,279 --> 00:00:38,280
associated with<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I will explain</font>

11
00:00:35,040 --> 00:00:41,519
<font color="#E5E5E5">truffle is the interpreter which is an</font>

12
00:00:38,280 --> 00:00:45,410
<font color="#E5E5E5">essential part of growl iam for</font>

13
00:00:41,520 --> 00:00:48,390
languages then I will describe

14
00:00:45,410 --> 00:00:53,489
instrumentation for tools how<font color="#E5E5E5"> to scan</font>

15
00:00:48,390 --> 00:00:57,329
plug-in to growl<font color="#CCCCCC"> em and will then have</font>

16
00:00:53,489 --> 00:01:02,940
some demos where I will show how<font color="#E5E5E5"> gravan</font>

17
00:00:57,329 --> 00:01:08,040
works and how how the tooling are looked

18
00:01:02,940 --> 00:01:10,500
like so gravia consists of several

19
00:01:08,040 --> 00:01:13,040
<font color="#CCCCCC">components</font><font color="#E5E5E5"> the core components of growl</font>

20
00:01:10,500 --> 00:01:15,840
<font color="#CCCCCC">iam is</font><font color="#E5E5E5"> just in time compiler which is</font>

21
00:01:13,040 --> 00:01:20,820
advanced very efficient<font color="#E5E5E5"> compiler that</font>

22
00:01:15,840 --> 00:01:24,470
replaces<font color="#CCCCCC"> c2 in</font><font color="#E5E5E5"> jdk then it contains a</font>

23
00:01:20,820 --> 00:01:27,649
<font color="#E5E5E5">truffle framework which</font><font color="#CCCCCC"> is an</font>

24
00:01:24,470 --> 00:01:30,270
interpretation framework for<font color="#E5E5E5"> a</font><font color="#CCCCCC"> STS</font>

25
00:01:27,650 --> 00:01:36,690
language are written as s the

26
00:01:30,270 --> 00:01:38,789
interpreters<font color="#E5E5E5"> and they provide the</font><font color="#CCCCCC"> ast</font>

27
00:01:36,690 --> 00:01:42,660
<font color="#CCCCCC">nodes to the truffle framework where</font>

28
00:01:38,790 --> 00:01:47,570
they are efficiently<font color="#E5E5E5"> partial</font><font color="#CCCCCC"> evaluated</font>

29
00:01:42,660 --> 00:01:50,429
and compiled<font color="#CCCCCC"> gray VM provides by default</font>

30
00:01:47,570 --> 00:01:53,880
<font color="#E5E5E5">JavaScript integration at 11:00 a.m.</font>

31
00:01:50,430 --> 00:01:55,740
it's a bit code interpreter and but you

32
00:01:53,880 --> 00:02:00,300
can install<font color="#CCCCCC"> other languages as well like</font>

33
00:01:55,740 --> 00:02:04,110
<font color="#E5E5E5">our Ruby and Python the next component</font>

34
00:02:00,300 --> 00:02:06,390
for<font color="#E5E5E5"> gravy M is SDK API</font><font color="#CCCCCC"> Eretz</font><font color="#E5E5E5"> for</font>

35
00:02:04,110 --> 00:02:08,519
<font color="#E5E5E5">embedder</font><font color="#CCCCCC"> z' if you would like</font><font color="#E5E5E5"> to embed -</font>

36
00:02:06,390 --> 00:02:11,400
gravy<font color="#E5E5E5"> m into your</font><font color="#CCCCCC"> existing application</font>

37
00:02:08,519 --> 00:02:16,190
you would<font color="#E5E5E5"> use</font><font color="#CCCCCC"> SDK API that were allowed</font>

38
00:02:11,400 --> 00:02:20,280
<font color="#CCCCCC">to work with the garage vehement</font><font color="#E5E5E5"> run the</font>

39
00:02:16,190 --> 00:02:23,239
guest code on<font color="#E5E5E5"> it and etc then it</font>

40
00:02:20,280 --> 00:02:27,130
contains<font color="#E5E5E5"> Oracle JVM runtime which adds</font>

41
00:02:23,239 --> 00:02:31,090
Java libraries and garbage collector

42
00:02:27,130 --> 00:02:34,210
like that<font color="#CCCCCC"> and to one part of</font><font color="#E5E5E5"> gravy</font><font color="#CCCCCC"> em is</font>

43
00:02:31,090 --> 00:02:38,040
ahead<font color="#E5E5E5"> of time compiler it's a native</font>

44
00:02:34,210 --> 00:02:41,940
image generator which lets you compile

45
00:02:38,040 --> 00:02:44,829
<font color="#E5E5E5">bytecode to a native image so you</font><font color="#CCCCCC"> can</font>

46
00:02:41,940 --> 00:02:48,910
create a native<font color="#E5E5E5"> application from</font><font color="#CCCCCC"> your</font>

47
00:02:44,830 --> 00:02:51,130
java application and the advantage is

48
00:02:48,910 --> 00:02:53,350
<font color="#CCCCCC">that it's possible to</font><font color="#E5E5E5"> compile also</font>

49
00:02:51,130 --> 00:02:56,799
language interpreters<font color="#E5E5E5"> that</font><font color="#CCCCCC"> means that</font>

50
00:02:53,350 --> 00:03:01,329
you can create<font color="#E5E5E5"> a native runtime</font><font color="#CCCCCC"> that</font>

51
00:02:56,800 --> 00:03:03,820
will execute<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> sources or of</font>

52
00:03:01,330 --> 00:03:08,500
other language sources or all these

53
00:03:03,820 --> 00:03:12,340
combined so here is in the picture what

54
00:03:08,500 --> 00:03:16,110
I was talking about<font color="#E5E5E5"> you have a</font>

55
00:03:12,340 --> 00:03:19,060
just-in-time compiler that compiles<font color="#E5E5E5"> the</font>

56
00:03:16,110 --> 00:03:22,140
languages that<font color="#E5E5E5"> compiles</font><font color="#CCCCCC"> to bytecode like</font>

57
00:03:19,060 --> 00:03:24,250
Java Scala<font color="#CCCCCC"> cotton</font><font color="#E5E5E5"> then you have</font>

58
00:03:22,140 --> 00:03:28,299
interpreters for a bunch of other

59
00:03:24,250 --> 00:03:32,590
languages<font color="#E5E5E5"> and all that is processed by</font>

60
00:03:28,300 --> 00:03:36,100
<font color="#E5E5E5">gravity</font><font color="#CCCCCC"> em the compiler</font><font color="#E5E5E5"> and it's</font>

61
00:03:32,590 --> 00:03:37,840
possible<font color="#E5E5E5"> to embed all of that into open</font>

62
00:03:36,100 --> 00:03:42,250
JDK for instance where you<font color="#CCCCCC"> can replace</font>

63
00:03:37,840 --> 00:03:45,940
<font color="#E5E5E5">the CPU with</font><font color="#CCCCCC"> gravia JIT compiler</font><font color="#E5E5E5"> and we</font>

64
00:03:42,250 --> 00:03:49,630
also provide note implementation where

65
00:03:45,940 --> 00:03:52,990
v8 is replaced by<font color="#CCCCCC"> growi M that allows</font>

66
00:03:49,630 --> 00:03:58,060
you<font color="#CCCCCC"> to run all the other</font><font color="#E5E5E5"> languages in a</font>

67
00:03:52,990 --> 00:04:00,070
note as well we<font color="#E5E5E5"> are adding gravia min to</font>

68
00:03:58,060 --> 00:04:02,680
Oracle database<font color="#CCCCCC"> it's possible to edit</font>

69
00:04:00,070 --> 00:04:08,530
<font color="#E5E5E5">into MySQL or it can be around as a</font>

70
00:04:02,680 --> 00:04:11,590
<font color="#CCCCCC">standalone application so now what</font>

71
00:04:08,530 --> 00:04:14,980
Truffaut interpreter is<font color="#E5E5E5"> order language</font>

72
00:04:11,590 --> 00:04:18,390
<font color="#E5E5E5">in implementations are written as SD</font>

73
00:04:14,980 --> 00:04:22,960
interpreters<font color="#CCCCCC"> that means that there is a</font>

74
00:04:18,390 --> 00:04:26,530
unified<font color="#E5E5E5"> ast representation in traffic</font>

75
00:04:22,960 --> 00:04:28,810
nodes<font color="#E5E5E5"> and all we need to provide a</font>

76
00:04:26,530 --> 00:04:31,989
language integration is to write an

77
00:04:28,810 --> 00:04:34,390
interpreter<font color="#E5E5E5"> that</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> translate the</font>

78
00:04:31,990 --> 00:04:37,570
language source into the<font color="#E5E5E5"> truffle ASD</font>

79
00:04:34,390 --> 00:04:39,090
then traffic a<font color="#E5E5E5"> third cares about the</font>

80
00:04:37,570 --> 00:04:43,219
specialization

81
00:04:39,090 --> 00:04:47,099
<font color="#E5E5E5">not partial evaluation and completion</font>

82
00:04:43,220 --> 00:04:49,710
that all has the<font color="#E5E5E5"> advantage</font><font color="#CCCCCC"> that there is</font>

83
00:04:47,100 --> 00:04:52,639
a very low overhead<font color="#E5E5E5"> in language</font>

84
00:04:49,710 --> 00:04:54,690
interoperation<font color="#E5E5E5"> because the SD</font>

85
00:04:52,639 --> 00:04:56,639
representation is<font color="#E5E5E5"> the same for</font><font color="#CCCCCC"> all</font>

86
00:04:54,690 --> 00:04:59,130
languages<font color="#E5E5E5"> that means that you can</font>

87
00:04:56,639 --> 00:05:03,510
seamlessly<font color="#E5E5E5"> execute one language</font><font color="#CCCCCC"> from the</font>

88
00:04:59,130 --> 00:05:07,940
other as the<font color="#E5E5E5"> SD is is just one for for</font>

89
00:05:03,510 --> 00:05:11,039
all<font color="#E5E5E5"> of them also</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> is a</font>

90
00:05:07,940 --> 00:05:13,500
instrumentation support built into the

91
00:05:11,040 --> 00:05:15,990
truffle<font color="#E5E5E5"> and it works on the SD level</font>

92
00:05:13,500 --> 00:05:19,200
that means that when you install<font color="#E5E5E5"> an</font>

93
00:05:15,990 --> 00:05:21,660
instrument it plugs into the<font color="#CCCCCC"> ast</font><font color="#E5E5E5"> and it</font>

94
00:05:19,200 --> 00:05:26,000
can be specialized in partial<font color="#CCCCCC"> related</font>

95
00:05:21,660 --> 00:05:28,410
with the<font color="#E5E5E5"> code so the instrumentation</font>

96
00:05:26,000 --> 00:05:30,860
essentially becomes part of<font color="#E5E5E5"> the code and</font>

97
00:05:28,410 --> 00:05:32,880
<font color="#E5E5E5">that</font><font color="#CCCCCC"> means that there is nearly zero</font>

98
00:05:30,860 --> 00:05:36,840
<font color="#E5E5E5">instrumentation overhead because it's</font>

99
00:05:32,880 --> 00:05:39,810
it's all compiled together<font color="#E5E5E5"> and tools are</font>

100
00:05:36,840 --> 00:05:43,739
attached as<font color="#CCCCCC"> node or</font><font color="#E5E5E5"> wrappers to to the</font>

101
00:05:39,810 --> 00:05:47,660
<font color="#E5E5E5">ast so again here</font><font color="#CCCCCC"> we see that in the</font>

102
00:05:43,740 --> 00:05:51,810
picture<font color="#E5E5E5"> initially you have s denotes</font>

103
00:05:47,660 --> 00:05:54,330
<font color="#E5E5E5">initialize then depending on data that</font>

104
00:05:51,810 --> 00:05:57,750
<font color="#E5E5E5">are flowing through these notes the</font>

105
00:05:54,330 --> 00:06:00,120
notes get specialized for Strings for

106
00:05:57,750 --> 00:06:04,260
double integer at whatever<font color="#E5E5E5"> types are</font>

107
00:06:00,120 --> 00:06:08,789
there or there<font color="#CCCCCC"> are there</font><font color="#E5E5E5"> is some generic</font>

108
00:06:04,260 --> 00:06:14,280
representation<font color="#E5E5E5"> after that stabilizes the</font>

109
00:06:08,789 --> 00:06:16,590
truffle creates<font color="#E5E5E5"> the specialized nodes</font>

110
00:06:14,280 --> 00:06:21,388
and then<font color="#CCCCCC"> it's partial evaluated and</font>

111
00:06:16,590 --> 00:06:26,580
compiled all together how to's are

112
00:06:21,389 --> 00:06:30,090
packed into that<font color="#E5E5E5"> is is here</font><font color="#CCCCCC"> consider a</font>

113
00:06:26,580 --> 00:06:33,330
<font color="#E5E5E5">note the note is replaced</font><font color="#CCCCCC"> by a so called</font>

114
00:06:30,090 --> 00:06:37,530
<font color="#CCCCCC">rappin</font><font color="#E5E5E5"> alt that delegates the original</font>

115
00:06:33,330 --> 00:06:40,289
out and also<font color="#E5E5E5"> to</font><font color="#CCCCCC"> a probe note that is</font>

116
00:06:37,530 --> 00:06:42,840
something which can be<font color="#CCCCCC"> used to attach</font>

117
00:06:40,289 --> 00:06:44,909
the instruments here are several

118
00:06:42,840 --> 00:06:49,979
subscription notes<font color="#E5E5E5"> attached to that</font>

119
00:06:44,910 --> 00:06:52,470
probe and the delegates<font color="#E5E5E5"> to client notes</font>

120
00:06:49,979 --> 00:06:55,500
that are provided<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the instrument</font>

121
00:06:52,470 --> 00:06:58,770
<font color="#E5E5E5">station by the tool that you want to</font>

122
00:06:55,500 --> 00:07:02,360
plug<font color="#E5E5E5"> in so for instance if you have a</font>

123
00:06:58,770 --> 00:07:06,599
debugger<font color="#E5E5E5"> and to</font><font color="#CCCCCC"> submit a breakpoint you</font>

124
00:07:02,360 --> 00:07:09,720
select<font color="#CCCCCC"> you find the correct note which</font>

125
00:07:06,600 --> 00:07:14,370
represent that part of the code and to

126
00:07:09,720 --> 00:07:17,430
create<font color="#CCCCCC"> no that represents the breakpoint</font>

127
00:07:14,370 --> 00:07:21,750
and the breakpoint get notification when

128
00:07:17,430 --> 00:07:23,850
the<font color="#E5E5E5"> note is started to be executed</font><font color="#CCCCCC"> also</font>

129
00:07:21,750 --> 00:07:26,990
when the execution of<font color="#CCCCCC"> that not finished</font>

130
00:07:23,850 --> 00:07:29,250
<font color="#CCCCCC">it gets the return</font><font color="#E5E5E5"> value or when an</font>

131
00:07:26,990 --> 00:07:32,490
<font color="#E5E5E5">exception was thrown from</font><font color="#CCCCCC"> the note</font>

132
00:07:29,250 --> 00:07:34,790
execution<font color="#E5E5E5"> it it intercept the exception</font>

133
00:07:32,490 --> 00:07:34,790
as well

134
00:07:35,220 --> 00:07:40,860
this for instance allows to have very

135
00:07:38,700 --> 00:07:43,560
fast conditional breakpoints because the

136
00:07:40,860 --> 00:07:46,380
condition can<font color="#E5E5E5"> be part of the</font><font color="#CCCCCC"> ASD and</font>

137
00:07:43,560 --> 00:07:48,900
it's executed<font color="#CCCCCC"> together with the code so</font>

138
00:07:46,380 --> 00:07:54,990
there is nearly zero overhead<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font>

139
00:07:48,900 --> 00:07:57,570
condition execution<font color="#CCCCCC"> the important thing</font>

140
00:07:54,990 --> 00:08:01,080
for dravyam tools is that their language

141
00:07:57,570 --> 00:08:03,719
<font color="#CCCCCC">agnostic</font><font color="#E5E5E5"> they attach</font><font color="#CCCCCC"> to the truffle AST</font>

142
00:08:01,080 --> 00:08:06,090
<font color="#CCCCCC">and they should not care about the</font>

143
00:08:03,720 --> 00:08:13,050
<font color="#E5E5E5">particular language that the note came</font>

144
00:08:06,090 --> 00:08:15,929
from how it<font color="#E5E5E5"> finds out where it actually</font>

145
00:08:13,050 --> 00:08:18,510
should attach or what the notes are

146
00:08:15,930 --> 00:08:21,660
about when it cannot find language<font color="#E5E5E5"> notes</font>

147
00:08:18,510 --> 00:08:25,140
have<font color="#E5E5E5"> text when a note represents a</font>

148
00:08:21,660 --> 00:08:28,320
function<font color="#E5E5E5"> it</font><font color="#CCCCCC"> it's tagged with</font><font color="#E5E5E5"> a root tag</font>

149
00:08:25,140 --> 00:08:31,020
<font color="#CCCCCC">when</font><font color="#E5E5E5"> the note represent a statement in</font>

150
00:08:28,320 --> 00:08:31,820
the language we have a statement tag for

151
00:08:31,020 --> 00:08:35,669
that

152
00:08:31,820 --> 00:08:38,370
similarly for code for calls for

153
00:08:35,669 --> 00:08:42,890
expressions and cetera<font color="#E5E5E5"> so this is how</font>

154
00:08:38,370 --> 00:08:46,410
<font color="#E5E5E5">tools find out what the note represents</font>

155
00:08:42,890 --> 00:08:50,449
then<font color="#E5E5E5"> note have a</font><font color="#CCCCCC"> subsection information</font>

156
00:08:46,410 --> 00:08:53,520
associated the source file<font color="#CCCCCC"> it came from</font>

157
00:08:50,450 --> 00:08:55,740
<font color="#E5E5E5">line and column number</font><font color="#CCCCCC"> information so</font>

158
00:08:53,520 --> 00:08:59,339
again<font color="#E5E5E5"> when you going</font><font color="#CCCCCC"> to submit</font><font color="#E5E5E5"> a</font>

159
00:08:55,740 --> 00:09:00,570
breakpoint<font color="#E5E5E5"> to some line in some source</font>

160
00:08:59,339 --> 00:09:03,000
file<font color="#E5E5E5"> you</font>

161
00:09:00,570 --> 00:09:06,180
find<font color="#E5E5E5"> that from from this note</font>

162
00:09:03,000 --> 00:09:09,900
<font color="#CCCCCC">information and this all is</font><font color="#E5E5E5"> language</font>

163
00:09:06,180 --> 00:09:12,630
agnostic<font color="#E5E5E5"> so when instruments decide</font>

164
00:09:09,900 --> 00:09:14,670
<font color="#CCCCCC">where to register it finds it needs to</font>

165
00:09:12,630 --> 00:09:18,870
define which tag and which subsection it

166
00:09:14,670 --> 00:09:21,510
it should attach to this is declared in

167
00:09:18,870 --> 00:09:24,590
advance<font color="#E5E5E5"> and when the note</font><font color="#CCCCCC"> is created</font><font color="#E5E5E5"> the</font>

168
00:09:21,510 --> 00:09:27,960
instrument is notified about<font color="#E5E5E5"> that and</font>

169
00:09:24,590 --> 00:09:31,290
the<font color="#E5E5E5"> Reverend</font><font color="#CCCCCC"> old is created about that</font>

170
00:09:27,960 --> 00:09:36,240
<font color="#E5E5E5">around that note and the instrumentation</font>

171
00:09:31,290 --> 00:09:39,750
<font color="#E5E5E5">is attached so</font><font color="#CCCCCC"> in order to see how</font><font color="#E5E5E5"> it</font>

172
00:09:36,240 --> 00:09:43,400
works<font color="#CCCCCC"> I'll show you some demo</font><font color="#E5E5E5"> we start</font>

173
00:09:39,750 --> 00:09:50,870
with<font color="#E5E5E5"> cross language debugging in Chrome</font>

174
00:09:43,400 --> 00:09:54,329
<font color="#E5E5E5">so I have prepared a few files in</font>

175
00:09:50,870 --> 00:09:58,800
JavaScript and Python in our and<font color="#CCCCCC"> two in</font>

176
00:09:54,330 --> 00:10:03,030
Ruby we can run<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of that in in a gray</font>

177
00:09:58,800 --> 00:10:09,510
VM I'll show you the transcript will

178
00:10:03,030 --> 00:10:14,610
will use<font color="#CCCCCC"> graphene RC 11 and we</font><font color="#E5E5E5"> running</font>

179
00:10:09,510 --> 00:10:17,510
<font color="#E5E5E5">out</font><font color="#CCCCCC"> with inspect when we were breakpoint</font>

180
00:10:14,610 --> 00:10:17,510
at the first execution

181
00:10:23,660 --> 00:10:32,780
<font color="#CCCCCC">will attach chrome to that in</font><font color="#E5E5E5"> order to</font>

182
00:10:29,440 --> 00:10:39,260
can use<font color="#CCCCCC"> chrome</font><font color="#E5E5E5"> inspect and he will see</font>

183
00:10:32,780 --> 00:10:43,220
<font color="#CCCCCC">gray VM is available to attach do you</font>

184
00:10:39,260 --> 00:10:46,730
see that yeah so we<font color="#E5E5E5"> are suspended</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

185
00:10:43,220 --> 00:10:50,080
first first statement here it's<font color="#CCCCCC"> called</font>

186
00:10:46,730 --> 00:10:54,920
<font color="#CCCCCC">to another method this</font><font color="#E5E5E5"> is a very simple</font>

187
00:10:50,080 --> 00:10:58,640
sample application<font color="#E5E5E5"> that computes whether</font>

188
00:10:54,920 --> 00:11:01,069
a regression model of from some cities

189
00:10:58,640 --> 00:11:02,960
we<font color="#CCCCCC"> have a database of cities and</font>

190
00:11:01,070 --> 00:11:07,280
temperature<font color="#E5E5E5"> of them it's some artificial</font>

191
00:11:02,960 --> 00:11:10,700
database and you are<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to create a</font>

192
00:11:07,280 --> 00:11:12,470
<font color="#CCCCCC">regression model</font><font color="#E5E5E5"> out of that it started</font>

193
00:11:10,700 --> 00:11:15,800
<font color="#CCCCCC">from note it's a JavaScript application</font>

194
00:11:12,470 --> 00:11:17,870
but to compute a regression<font color="#E5E5E5"> model it's</font>

195
00:11:15,800 --> 00:11:21,699
it's not very convenient to<font color="#E5E5E5"> do that in</font>

196
00:11:17,870 --> 00:11:23,810
<font color="#E5E5E5">JavaScript so we are using</font><font color="#CCCCCC"> R for that so</font>

197
00:11:21,700 --> 00:11:27,980
we submit a<font color="#E5E5E5"> breakpoint</font>

198
00:11:23,810 --> 00:11:31,910
where the model<font color="#E5E5E5"> is created maybe first I</font>

199
00:11:27,980 --> 00:11:37,100
<font color="#CCCCCC">can show you</font><font color="#E5E5E5"> that this javascript file</font>

200
00:11:31,910 --> 00:11:41,270
<font color="#E5E5E5">is loading we step into that is loading</font>

201
00:11:37,100 --> 00:11:44,720
<font color="#E5E5E5">Ruby file</font><font color="#CCCCCC"> it's loading also our file</font><font color="#E5E5E5"> and</font>

202
00:11:41,270 --> 00:11:50,840
there is some some<font color="#CCCCCC"> Python file written</font>

203
00:11:44,720 --> 00:11:52,940
<font color="#E5E5E5">here as a string so we can continue to</font>

204
00:11:50,840 --> 00:11:55,780
that break point where the model is

205
00:11:52,940 --> 00:11:58,460
<font color="#CCCCCC">actually computed it takes some time to</font>

206
00:11:55,780 --> 00:12:01,130
<font color="#CCCCCC">load the model</font><font color="#E5E5E5"> and initialize the</font>

207
00:11:58,460 --> 00:12:07,730
languages<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> forth and when</font><font color="#E5E5E5"> the</font>

208
00:12:01,130 --> 00:12:14,540
breakpoint is hit<font color="#E5E5E5"> we can step into into</font>

209
00:12:07,730 --> 00:12:17,720
<font color="#E5E5E5">that and we are in a our source here you</font>

210
00:12:14,540 --> 00:12:21,530
can see on the caustic<font color="#E5E5E5"> that I came from</font>

211
00:12:17,720 --> 00:12:27,770
JavaScript<font color="#E5E5E5"> and the JavaScript just calls</font>

212
00:12:21,530 --> 00:12:30,650
the<font color="#CCCCCC"> R function</font><font color="#E5E5E5"> written here if you look</font>

213
00:12:27,770 --> 00:12:33,020
at the arguments it gets some functions

214
00:12:30,650 --> 00:12:34,590
which<font color="#E5E5E5"> came actually from JavaScript</font>

215
00:12:33,020 --> 00:12:38,730
which called this

216
00:12:34,590 --> 00:12:42,050
this our function<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we can step through</font>

217
00:12:38,730 --> 00:12:46,890
some some<font color="#E5E5E5"> our code for a while and</font>

218
00:12:42,050 --> 00:12:49,410
eventually<font color="#E5E5E5"> we'll get into the place</font>

219
00:12:46,890 --> 00:12:53,040
where the<font color="#CCCCCC"> JavaScript function is going</font>

220
00:12:49,410 --> 00:12:55,439
<font color="#E5E5E5">to</font><font color="#CCCCCC"> be executed when</font><font color="#E5E5E5"> we step into</font><font color="#CCCCCC"> that we</font>

221
00:12:53,040 --> 00:12:57,029
<font color="#E5E5E5">are back in in the JavaScript and we see</font>

222
00:12:55,440 --> 00:12:59,339
on the call stack that from the

223
00:12:57,029 --> 00:13:02,370
JavaScript<font color="#CCCCCC"> our was created and</font><font color="#E5E5E5"> was</font>

224
00:12:59,339 --> 00:13:02,990
executed<font color="#CCCCCC"> and that</font><font color="#E5E5E5"> called the JavaScript</font>

225
00:13:02,370 --> 00:13:06,839
again

226
00:13:02,990 --> 00:13:14,760
so the<font color="#CCCCCC"> cost that shows you all the stack</font>

227
00:13:06,839 --> 00:13:23,279
of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> languages okay we can go back</font>

228
00:13:14,760 --> 00:13:26,760
back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> our you can continue to here you</font>

229
00:13:23,279 --> 00:13:29,130
can see the local variables<font color="#E5E5E5"> so chrome</font>

230
00:13:26,760 --> 00:13:35,400
inspector has fortunately no problem to

231
00:13:29,130 --> 00:13:39,180
show<font color="#CCCCCC"> you our variables here</font><font color="#E5E5E5"> and we get</font>

232
00:13:35,400 --> 00:13:40,319
<font color="#E5E5E5">back to the JavaScript we see the return</font>

233
00:13:39,180 --> 00:13:43,589
<font color="#E5E5E5">value here</font>

234
00:13:40,320 --> 00:13:47,790
it's an<font color="#CCCCCC"> error</font><font color="#E5E5E5"> list which is essentially</font>

235
00:13:43,589 --> 00:13:52,560
an array but it's it came from our and

236
00:13:47,790 --> 00:13:56,360
<font color="#E5E5E5">our list so</font><font color="#CCCCCC"> javascript here gets some</font>

237
00:13:52,560 --> 00:13:58,650
value form<font color="#CCCCCC"> our but it knows from</font><font color="#E5E5E5"> the</font>

238
00:13:56,360 --> 00:14:01,620
<font color="#E5E5E5">generic representation that it's an</font>

239
00:13:58,650 --> 00:14:05,520
array so<font color="#CCCCCC"> it had no problem to find out</font>

240
00:14:01,620 --> 00:14:08,640
the length<font color="#E5E5E5"> of that our list because</font><font color="#CCCCCC"> it's</font>

241
00:14:05,520 --> 00:14:11,850
an array it it knows<font color="#CCCCCC"> that it has some</font>

242
00:14:08,640 --> 00:14:14,790
size and<font color="#CCCCCC"> JavaScript nodes has that lens</font>

243
00:14:11,850 --> 00:14:20,400
is a property of<font color="#E5E5E5"> array and it show you</font>

244
00:14:14,790 --> 00:14:23,219
return the size of that array in a

245
00:14:20,400 --> 00:14:28,920
similar way<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can step</font><font color="#E5E5E5"> into other</font>

246
00:14:23,220 --> 00:14:35,940
languages we have<font color="#E5E5E5"> Ruby here so we can</font>

247
00:14:28,920 --> 00:14:40,469
step into<font color="#E5E5E5"> Ruby again we can debug the</font>

248
00:14:35,940 --> 00:14:43,530
<font color="#E5E5E5">Ruby here in the chrome inspector so no</font>

249
00:14:40,470 --> 00:14:47,209
matter of<font color="#E5E5E5"> what language</font><font color="#CCCCCC"> is there</font><font color="#E5E5E5"> the</font>

250
00:14:43,530 --> 00:14:50,569
tool is able<font color="#E5E5E5"> to work with that here we</font>

251
00:14:47,209 --> 00:14:53,748
<font color="#E5E5E5">step into</font><font color="#CCCCCC"> the Python script and again</font>

252
00:14:50,569 --> 00:14:59,628
the<font color="#CCCCCC"> bug</font><font color="#E5E5E5"> Python script including local</font>

253
00:14:53,749 --> 00:15:01,850
variables<font color="#E5E5E5"> and everything when we are</font>

254
00:14:59,629 --> 00:15:05,899
back here<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> JavaScript file we can</font>

255
00:15:01,850 --> 00:15:07,490
look to<font color="#E5E5E5"> the local variables so</font><font color="#CCCCCC"> for</font>

256
00:15:05,899 --> 00:15:10,730
instance here<font color="#CCCCCC"> we see a function</font><font color="#E5E5E5"> which</font>

257
00:15:07,490 --> 00:15:13,279
came from<font color="#CCCCCC"> python and which has</font><font color="#E5E5E5"> the</font>

258
00:15:10,730 --> 00:15:16,720
<font color="#CCCCCC">python description we have a weather</font>

259
00:15:13,279 --> 00:15:21,800
model<font color="#E5E5E5"> from ruby we have cities from</font><font color="#CCCCCC"> Java</font>

260
00:15:16,720 --> 00:15:24,980
<font color="#E5E5E5">city service Java object here and there</font>

261
00:15:21,800 --> 00:15:27,679
is a<font color="#E5E5E5"> crate model function from R so we</font>

262
00:15:24,980 --> 00:15:30,740
have all languages here available<font color="#CCCCCC"> all</font>

263
00:15:27,679 --> 00:15:39,379
<font color="#E5E5E5">languages interpreting and you can debug</font>

264
00:15:30,740 --> 00:15:44,689
<font color="#E5E5E5">all of them at one place so that's all</font>

265
00:15:39,379 --> 00:15:46,990
<font color="#E5E5E5">from chrome inspector the next demo is</font>

266
00:15:44,689 --> 00:15:52,339
going<font color="#CCCCCC"> to be some preliminary</font>

267
00:15:46,990 --> 00:15:58,129
implementation of LSP we have a

268
00:15:52,339 --> 00:16:04,910
preliminary integration with<font color="#E5E5E5"> Visual</font>

269
00:15:58,129 --> 00:16:16,579
<font color="#E5E5E5">Studio code so I will start an LSP</font>

270
00:16:04,910 --> 00:16:19,249
server here<font color="#CCCCCC"> yeah this is an LSP</font>

271
00:16:16,579 --> 00:16:22,339
instrumentation which is soon going to

272
00:16:19,249 --> 00:16:26,829
<font color="#CCCCCC">be a part of gravy</font><font color="#E5E5E5"> I'm currently it's</font>

273
00:16:22,339 --> 00:16:29,749
it's in an experimental<font color="#E5E5E5"> version and it's</font>

274
00:16:26,829 --> 00:16:33,170
provided for a<font color="#CCCCCC"> so-called simple language</font>

275
00:16:29,749 --> 00:16:37,069
we have distinct language for gravy<font color="#CCCCCC"> M</font><font color="#E5E5E5"> so</font>

276
00:16:33,170 --> 00:16:39,290
that we<font color="#CCCCCC"> do</font><font color="#E5E5E5"> not need to deal</font><font color="#CCCCCC"> with all the</font>

277
00:16:37,069 --> 00:16:42,829
complexities of<font color="#E5E5E5"> other languages</font><font color="#CCCCCC"> but this</font>

278
00:16:39,290 --> 00:16:48,230
<font color="#E5E5E5">is something to test to Swiss and to</font>

279
00:16:42,829 --> 00:16:49,819
<font color="#E5E5E5">showcase how how</font><font color="#CCCCCC"> gravia works so at</font>

280
00:16:48,230 --> 00:16:51,829
least you're sure<font color="#CCCCCC"> that there are no</font>

281
00:16:49,819 --> 00:16:56,748
<font color="#E5E5E5">existing language servers for this</font>

282
00:16:51,829 --> 00:17:00,170
simple<font color="#E5E5E5"> anguish so it's it's served by by</font>

283
00:16:56,749 --> 00:17:05,049
this<font color="#E5E5E5"> growl as LSP server</font>

284
00:17:00,170 --> 00:17:12,319
and now I<font color="#E5E5E5"> will go to the vs code client</font>

285
00:17:05,049 --> 00:17:16,040
and run a<font color="#E5E5E5"> sample application in</font>

286
00:17:12,319 --> 00:17:21,649
individual source code which is the real

287
00:17:16,040 --> 00:17:32,418
code we are run this this<font color="#CCCCCC"> SP client here</font>

288
00:17:21,650 --> 00:17:37,190
<font color="#E5E5E5">the speak client plug-in open</font><font color="#CCCCCC"> yeah here</font>

289
00:17:32,419 --> 00:17:41,840
it opens<font color="#E5E5E5"> a sample as I'll file the it's</font>

290
00:17:37,190 --> 00:17:44,720
written in the simple<font color="#E5E5E5"> language and it</font>

291
00:17:41,840 --> 00:17:47,090
has connection to the LSP server<font color="#E5E5E5"> so for</font>

292
00:17:44,720 --> 00:17:50,179
<font color="#E5E5E5">instance if you select some variable</font>

293
00:17:47,090 --> 00:17:52,399
name<font color="#E5E5E5"> it finds all the locations or</font>

294
00:17:50,179 --> 00:17:54,980
places when the variable<font color="#E5E5E5"> is read and</font>

295
00:17:52,400 --> 00:17:58,630
when it's<font color="#E5E5E5"> written to this is provided by</font>

296
00:17:54,980 --> 00:18:02,059
the language<font color="#E5E5E5"> the notes are marked as</font>

297
00:17:58,630 --> 00:18:05,600
that they are writing<font color="#E5E5E5"> some variable or</font>

298
00:18:02,059 --> 00:18:09,940
<font color="#E5E5E5">they're reading some variable and from</font>

299
00:18:05,600 --> 00:18:14,000
that the LSP<font color="#E5E5E5"> integration finds out</font>

300
00:18:09,940 --> 00:18:18,020
locations of variables<font color="#E5E5E5"> and if they are</font>

301
00:18:14,000 --> 00:18:20,929
read or written<font color="#E5E5E5"> to there is</font><font color="#CCCCCC"> also code</font>

302
00:18:18,020 --> 00:18:23,299
completion<font color="#E5E5E5"> so you can see the local</font>

303
00:18:20,929 --> 00:18:28,280
variables and<font color="#E5E5E5"> the other things that you</font>

304
00:18:23,299 --> 00:18:30,500
can<font color="#E5E5E5"> call at that location so this is a</font>

305
00:18:28,280 --> 00:18:36,260
<font color="#E5E5E5">preliminary version of the hospice</font>

306
00:18:30,500 --> 00:18:37,850
server and the<font color="#E5E5E5"> final demo is and it</font>

307
00:18:36,260 --> 00:18:42,770
<font color="#E5E5E5">means yeah</font>

308
00:18:37,850 --> 00:18:44,480
that means<font color="#CCCCCC"> gravy of integration here</font><font color="#E5E5E5"> I</font>

309
00:18:42,770 --> 00:18:48,320
have not been<font color="#E5E5E5"> Stan it's the latest</font>

310
00:18:44,480 --> 00:18:52,130
version<font color="#CCCCCC"> that was released late in the</font>

311
00:18:48,320 --> 00:18:58,189
December last year and it has a built-in

312
00:18:52,130 --> 00:19:05,169
support for gravy I'm debugging so I

313
00:18:58,190 --> 00:19:05,169
will run the<font color="#CCCCCC"> demo that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> already</font><font color="#E5E5E5"> saw</font>

314
00:19:05,320 --> 00:19:09,800
<font color="#E5E5E5">it's</font>

315
00:19:06,680 --> 00:19:12,170
it's here<font color="#E5E5E5"> but this</font><font color="#CCCCCC"> time I</font><font color="#E5E5E5"> will not run</font>

316
00:19:09,800 --> 00:19:18,169
as<font color="#E5E5E5"> with the common</font><font color="#CCCCCC"> Specter option</font><font color="#E5E5E5"> but</font>

317
00:19:12,170 --> 00:19:22,210
with standard debugging options and so

318
00:19:18,170 --> 00:19:28,570
it's<font color="#CCCCCC"> written</font><font color="#E5E5E5"> on on the address</font><font color="#CCCCCC"> 8000</font><font color="#E5E5E5"> I</font>

319
00:19:22,210 --> 00:19:28,570
will attach<font color="#E5E5E5"> the Java debugger to that</font>

320
00:19:28,900 --> 00:19:39,290
and it does something<font color="#E5E5E5"> in order to see</font>

321
00:19:34,250 --> 00:19:42,020
what it<font color="#E5E5E5"> does we pulse that here in the</font>

322
00:19:39,290 --> 00:19:45,230
main threat you can<font color="#CCCCCC"> see that it's doing</font>

323
00:19:42,020 --> 00:19:48,440
something<font color="#E5E5E5"> with</font><font color="#CCCCCC"> trevore notes so it's</font>

324
00:19:45,230 --> 00:19:50,660
executing something<font color="#CCCCCC"> under grab and for</font>

325
00:19:48,440 --> 00:19:53,450
gravy I'm debugging<font color="#E5E5E5"> we have a special</font>

326
00:19:50,660 --> 00:19:56,360
icon here<font color="#E5E5E5"> there is a relatively new</font>

327
00:19:53,450 --> 00:19:59,510
<font color="#CCCCCC">that's a</font><font color="#E5E5E5"> good pulse in gravy</font><font color="#CCCCCC"> on script</font>

328
00:19:56,360 --> 00:20:03,260
<font color="#E5E5E5">that means when you talk about</font><font color="#CCCCCC"> that it</font>

329
00:19:59,510 --> 00:20:07,000
will suspend<font color="#CCCCCC"> as soon as it finds out</font>

330
00:20:03,260 --> 00:20:09,620
<font color="#CCCCCC">that some script</font><font color="#E5E5E5"> is executing in</font><font color="#CCCCCC"> gravia</font>

331
00:20:07,000 --> 00:20:12,670
<font color="#CCCCCC">so we can continue</font><font color="#E5E5E5"> the execution and</font>

332
00:20:09,620 --> 00:20:15,560
wait for<font color="#E5E5E5"> this section to to actually</font>

333
00:20:12,670 --> 00:20:18,730
<font color="#E5E5E5">find this out</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> and we are at the</font>

334
00:20:15,560 --> 00:20:22,490
beginning<font color="#E5E5E5"> when our script is executed</font>

335
00:20:18,730 --> 00:20:24,980
<font color="#CCCCCC">here on the stack we see the JavaScript</font>

336
00:20:22,490 --> 00:20:28,280
<font color="#E5E5E5">file and we can</font><font color="#CCCCCC"> do the</font><font color="#E5E5E5"> very same</font>

337
00:20:24,980 --> 00:20:31,970
debugging<font color="#CCCCCC"> that you saw in chrome</font>

338
00:20:28,280 --> 00:20:34,760
inspector<font color="#E5E5E5"> here in NetBeans yeah we can</font>

339
00:20:31,970 --> 00:20:40,700
continue the breakpoint we<font color="#E5E5E5"> can step into</font>

340
00:20:34,760 --> 00:20:42,740
<font color="#E5E5E5">an our function and here is</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> the</font>

341
00:20:40,700 --> 00:20:46,370
<font color="#E5E5E5">local variables and everything the</font>

342
00:20:42,740 --> 00:20:49,460
advantage is that this is Java debugger

343
00:20:46,370 --> 00:20:53,989
<font color="#CCCCCC">that means that you can switch from the</font>

344
00:20:49,460 --> 00:20:57,200
script<font color="#E5E5E5"> view to Java view and here in the</font>

345
00:20:53,990 --> 00:21:00,260
stack trace<font color="#E5E5E5"> you will see all the nodes</font>

346
00:20:57,200 --> 00:21:04,100
<font color="#E5E5E5">that are executed and</font><font color="#CCCCCC"> that actually</font>

347
00:21:00,260 --> 00:21:09,650
interprets the language that helps

348
00:21:04,100 --> 00:21:14,120
<font color="#E5E5E5">language implementers to</font><font color="#CCCCCC"> see how the</font>

349
00:21:09,650 --> 00:21:18,020
<font color="#E5E5E5">nodes they wrote were executed and yeah</font>

350
00:21:14,120 --> 00:21:20,500
that provides the insight into into how

351
00:21:18,020 --> 00:21:23,410
prefer works<font color="#E5E5E5"> and you can see here all</font>

352
00:21:20,500 --> 00:21:25,810
so the probe notes<font color="#E5E5E5"> the tooth integration</font>

353
00:21:23,410 --> 00:21:28,270
<font color="#E5E5E5">here the probe node was entered and</font>

354
00:21:25,810 --> 00:21:31,149
there is stepping<font color="#CCCCCC"> node associated that</font>

355
00:21:28,270 --> 00:21:34,780
comes from debugger<font color="#E5E5E5"> the node was entered</font>

356
00:21:31,150 --> 00:21:39,180
<font color="#E5E5E5">so we get on enter event we can step and</font>

357
00:21:34,780 --> 00:22:11,860
<font color="#CCCCCC">- you are suspended</font><font color="#E5E5E5"> over on a step so</font>

358
00:21:39,180 --> 00:22:16,180
that's all<font color="#E5E5E5"> for me we are</font><font color="#CCCCCC"> still working</font>

359
00:22:11,860 --> 00:22:19,300
on<font color="#E5E5E5"> documentation and</font><font color="#CCCCCC"> Karam tape</font>

360
00:22:16,180 --> 00:22:22,060
unfortunately the probably<font color="#E5E5E5"> the best way</font>

361
00:22:19,300 --> 00:22:25,540
how<font color="#CCCCCC"> to start out is to</font><font color="#E5E5E5"> look to the</font>

362
00:22:22,060 --> 00:22:32,919
simple language implementation and just

363
00:22:25,540 --> 00:22:34,389
see how yeah well sort of yes<font color="#E5E5E5"> comparing</font>

364
00:22:32,920 --> 00:22:37,510
<font color="#E5E5E5">to other language implementations it's</font>

365
00:22:34,390 --> 00:22:39,640
it's very<font color="#E5E5E5"> simple so yeah but we are</font>

366
00:22:37,510 --> 00:22:46,890
working<font color="#E5E5E5"> working on the documentation</font>

367
00:22:39,640 --> 00:22:46,890
definitely<font color="#CCCCCC"> yes</font><font color="#E5E5E5"> okay you're welcome</font>

368
00:23:12,540 --> 00:23:16,360
yeah

369
00:23:13,950 --> 00:23:19,030
fortunately it's quite tolerant<font color="#CCCCCC"> because</font>

370
00:23:16,360 --> 00:23:21,370
it<font color="#E5E5E5"> also expects typescript or</font>

371
00:23:19,030 --> 00:23:24,370
CoffeeScript or other<font color="#E5E5E5"> other languages so</font>

372
00:23:21,370 --> 00:23:26,649
they apparently do<font color="#CCCCCC"> not have anything</font>

373
00:23:24,370 --> 00:23:28,899
specific to<font color="#E5E5E5"> JavaScript that they will</font>

374
00:23:26,650 --> 00:23:50,320
blow up if they<font color="#E5E5E5"> get another language so</font>

375
00:23:28,900 --> 00:23:53,170
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is why we can do that every object</font>

376
00:23:50,320 --> 00:23:56,169
<font color="#E5E5E5">from every language provides its</font><font color="#CCCCCC"> two</font>

377
00:23:53,170 --> 00:23:58,270
string<font color="#CCCCCC"> compartment ation so we take the</font>

378
00:23:56,170 --> 00:24:01,960
string representation<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the language</font>

379
00:23:58,270 --> 00:24:04,240
how the language<font color="#E5E5E5"> sees that object but</font>

380
00:24:01,960 --> 00:24:19,650
it's still language agnostic in in terms

381
00:24:04,240 --> 00:24:24,040
<font color="#E5E5E5">of tooling</font><font color="#CCCCCC"> there is a project</font><font color="#E5E5E5"> to move</font>

382
00:24:19,650 --> 00:24:28,540
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> growl just-in-time compiler</font>

383
00:24:24,040 --> 00:24:30,730
to open JDK in in many situations<font color="#E5E5E5"> yes</font>

384
00:24:28,540 --> 00:24:32,980
<font color="#E5E5E5">not not in all of them but in in</font>

385
00:24:30,730 --> 00:24:39,010
probably vast majority of cases it's

386
00:24:32,980 --> 00:24:43,650
faster yeah this is this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> sort of the</font>

387
00:24:39,010 --> 00:24:43,650
plan so<font color="#CCCCCC"> we'll see</font><font color="#E5E5E5"> how it how</font><font color="#CCCCCC"> it works</font>

388
00:24:54,650 --> 00:25:04,040
in<font color="#E5E5E5"> JavaScript there yeah so I'm sorry</font>

389
00:25:00,140 --> 00:25:06,980
<font color="#E5E5E5">the question</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> how how we deal with</font>

390
00:25:04,040 --> 00:25:08,690
types<font color="#E5E5E5"> for instance in in JavaScript</font><font color="#CCCCCC"> they</font>

391
00:25:06,980 --> 00:25:26,990
<font color="#E5E5E5">are doubles but in Python there are</font>

392
00:25:08,690 --> 00:25:30,470
there are<font color="#CCCCCC"> other</font><font color="#E5E5E5"> types</font><font color="#CCCCCC"> javascript has big</font>

393
00:25:26,990 --> 00:25:37,280
integers<font color="#E5E5E5"> so javascript can convert that</font>

394
00:25:30,470 --> 00:25:39,410
<font color="#E5E5E5">to be integer the idea is</font><font color="#CCCCCC"> that there are</font>

395
00:25:37,280 --> 00:25:42,139
there<font color="#CCCCCC"> are some their primitive</font><font color="#E5E5E5"> types</font>

396
00:25:39,410 --> 00:25:44,680
which flows freely through languages and

397
00:25:42,140 --> 00:25:49,850
that there are<font color="#E5E5E5"> object representations</font>

398
00:25:44,680 --> 00:25:52,640
<font color="#E5E5E5">that when an language gets object from</font>

399
00:25:49,850 --> 00:25:55,010
some foreign language<font color="#E5E5E5"> it delegates</font>

400
00:25:52,640 --> 00:25:57,320
operations on these objects to<font color="#CCCCCC"> that</font>

401
00:25:55,010 --> 00:25:59,360
foreign<font color="#CCCCCC"> language so when it needs</font><font color="#E5E5E5"> to</font>

402
00:25:57,320 --> 00:26:01,580
find<font color="#E5E5E5"> out a property of some object it</font>

403
00:25:59,360 --> 00:26:05,270
asked<font color="#E5E5E5"> the object give me that property</font>

404
00:26:01,580 --> 00:26:08,240
and it's up to<font color="#E5E5E5"> the Python code to to</font>

405
00:26:05,270 --> 00:26:11,990
search the object layout and to provide

406
00:26:08,240 --> 00:26:16,390
<font color="#CCCCCC">that property</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> if that</font><font color="#E5E5E5"> object doesn't</font>

407
00:26:11,990 --> 00:26:20,240
<font color="#E5E5E5">represent a primitive value it's if it's</font>

408
00:26:16,390 --> 00:26:23,180
quite long it can delegate all the

409
00:26:20,240 --> 00:26:26,180
operations on<font color="#E5E5E5"> these value to to some</font>

410
00:26:23,180 --> 00:26:31,810
methods on that<font color="#CCCCCC"> object</font><font color="#E5E5E5"> and JavaScript</font>

411
00:26:26,180 --> 00:26:31,810
that<font color="#CCCCCC"> delegate</font><font color="#E5E5E5"> that to the pipe</font>

412
00:26:42,440 --> 00:26:57,480
yes yeah yeah<font color="#CCCCCC"> definitely</font><font color="#E5E5E5"> the the</font>

413
00:26:53,520 --> 00:27:00,930
languages need to be updated<font color="#CCCCCC"> with the</font>

414
00:26:57,480 --> 00:27:03,030
latest<font color="#CCCCCC"> versions so for instance in in</font>

415
00:27:00,930 --> 00:27:05,640
JavaScript<font color="#E5E5E5"> or in note when there are</font>

416
00:27:03,030 --> 00:27:08,310
some new<font color="#CCCCCC"> features</font><font color="#E5E5E5"> at it we we need to</font>

417
00:27:05,640 --> 00:27:10,890
keep<font color="#CCCCCC"> up is</font><font color="#E5E5E5"> that but it's not that hard</font>

418
00:27:08,310 --> 00:27:14,520
<font color="#E5E5E5">because all that we want we need to</font>

419
00:27:10,890 --> 00:27:17,190
upgrade is the interpreter not<font color="#E5E5E5"> to note</font>

420
00:27:14,520 --> 00:27:20,790
<font color="#CCCCCC">at the runtime or other things</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> the</font>

421
00:27:17,190 --> 00:27:23,220
interpreter and that's it so that allows

422
00:27:20,790 --> 00:27:28,430
us<font color="#E5E5E5"> to bring new JavaScript features</font>

423
00:27:23,220 --> 00:27:28,430
<font color="#E5E5E5">faster than v8 for instance</font>

424
00:27:41,130 --> 00:27:46,440
there are some libraries<font color="#E5E5E5"> distributed</font>

425
00:27:43,890 --> 00:27:50,160
with the languages for instance<font color="#E5E5E5"> in our</font>

426
00:27:46,440 --> 00:27:54,120
<font color="#E5E5E5">we had many libraries or a distributed</font>

427
00:27:50,160 --> 00:27:57,780
and<font color="#CCCCCC"> tree garden peyten I'm not really</font>

428
00:27:54,120 --> 00:28:01,500
sure but but we definitely<font color="#E5E5E5"> work with</font>

429
00:27:57,780 --> 00:28:06,629
numpy or have have some integration with

430
00:28:01,500 --> 00:28:09,750
numpy so yeah<font color="#E5E5E5"> this these languages are</font>

431
00:28:06,630 --> 00:28:13,680
<font color="#CCCCCC">not in final state that the JavaScript</font>

432
00:28:09,750 --> 00:28:15,300
and<font color="#CCCCCC"> LLVM is final it's complete but</font>

433
00:28:13,680 --> 00:28:20,690
<font color="#E5E5E5">these other languages are in progress</font>

434
00:28:15,300 --> 00:28:20,690
they're mostly complete but not 100%

435
00:28:42,010 --> 00:28:49,060
yeah the<font color="#CCCCCC"> question was when there</font><font color="#E5E5E5"> is a</font>

436
00:28:44,750 --> 00:28:54,500
<font color="#E5E5E5">problem if it's possible to replace that</font>

437
00:28:49,060 --> 00:28:57,620
<font color="#CCCCCC">so when the code is modified yes</font><font color="#E5E5E5"> the</font>

438
00:28:54,500 --> 00:29:02,420
instrument can freely<font color="#E5E5E5"> attach and the</font>

439
00:28:57,620 --> 00:29:05,120
<font color="#E5E5E5">attached and then we transfer back to</font>

440
00:29:02,420 --> 00:29:08,390
<font color="#CCCCCC">the interpreter</font><font color="#E5E5E5"> mode change the notes</font>

441
00:29:05,120 --> 00:29:10,699
layout<font color="#E5E5E5"> change the</font><font color="#CCCCCC"> ast</font><font color="#E5E5E5"> and then after</font>

442
00:29:08,390 --> 00:29:14,000
<font color="#E5E5E5">that stabilizes stabilizes it's compiled</font>

443
00:29:10,700 --> 00:29:17,120
again so yeah there<font color="#E5E5E5"> is just the</font>

444
00:29:14,000 --> 00:29:20,660
<font color="#E5E5E5">optimization at that location</font><font color="#CCCCCC"> the notes</font>

445
00:29:17,120 --> 00:29:22,790
<font color="#E5E5E5">are changed as they needs to be for</font>

446
00:29:20,660 --> 00:29:24,770
instance<font color="#E5E5E5"> if you remove a break point</font><font color="#CCCCCC"> the</font>

447
00:29:22,790 --> 00:29:27,500
the<font color="#CCCCCC"> break point that</font><font color="#E5E5E5"> represents the note</font>

448
00:29:24,770 --> 00:29:29,870
<font color="#E5E5E5">is removed so the the note structure</font>

449
00:29:27,500 --> 00:29:33,350
<font color="#E5E5E5">changes so it's transferred to</font>

450
00:29:29,870 --> 00:29:35,750
<font color="#E5E5E5">interpreter mode and then after it</font>

451
00:29:33,350 --> 00:29:39,399
stabilizes<font color="#CCCCCC"> its partial evaluate it again</font>

452
00:29:35,750 --> 00:29:39,400
and compile<font color="#CCCCCC"> it again</font>

