1
00:00:05,109 --> 00:00:13,969
<font color="#CCCCCC">all right so let's get</font><font color="#E5E5E5"> started</font><font color="#CCCCCC"> I am</font>

2
00:00:09,049 --> 00:00:17,990
I'm<font color="#E5E5E5"> his</font><font color="#CCCCCC"> Chum I work at</font><font color="#E5E5E5"> Kong and I'm also</font>

3
00:00:13,969 --> 00:00:20,270
a maintainer<font color="#E5E5E5"> of Lorex the package</font>

4
00:00:17,990 --> 00:00:25,189
<font color="#E5E5E5">manager for the</font><font color="#CCCCCC"> Lua programming language</font>

5
00:00:20,270 --> 00:00:27,800
<font color="#CCCCCC">I've</font><font color="#E5E5E5"> been involved with Lua since 2005</font>

6
00:00:25,189 --> 00:00:31,269
or so so it's been<font color="#E5E5E5"> working with Lua for</font>

7
00:00:27,800 --> 00:00:35,589
a long time and I'm here to talk about

8
00:00:31,269 --> 00:00:38,330
minimalism<font color="#CCCCCC"> vs types and the long journey</font>

9
00:00:35,589 --> 00:00:41,720
with the about<font color="#E5E5E5"> the hard relationship</font>

10
00:00:38,330 --> 00:00:45,879
between<font color="#E5E5E5"> like a minimalistic language</font>

11
00:00:41,720 --> 00:00:49,729
like Lua<font color="#E5E5E5"> and a desire for types so</font>

12
00:00:45,879 --> 00:00:52,690
minimalism<font color="#CCCCCC"> well</font><font color="#E5E5E5"> I love minimalism</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> all</font>

13
00:00:49,729 --> 00:00:55,100
of us here<font color="#CCCCCC"> in this room probably do</font><font color="#E5E5E5"> and</font>

14
00:00:52,690 --> 00:00:56,959
once someone asked<font color="#E5E5E5"> me like</font><font color="#CCCCCC"> what do I</font>

15
00:00:55,100 --> 00:01:00,440
like the<font color="#CCCCCC"> most about</font><font color="#E5E5E5"> programming when Lua</font>

16
00:00:56,960 --> 00:01:03,290
<font color="#E5E5E5">and the answer that I gave like right</font>

17
00:01:00,440 --> 00:01:05,449
off<font color="#CCCCCC"> the bat was that</font><font color="#E5E5E5"> well Lua fits in my</font>

18
00:01:03,290 --> 00:01:08,750
head<font color="#CCCCCC"> like I know I</font><font color="#E5E5E5"> feel like</font><font color="#CCCCCC"> I know the</font>

19
00:01:05,449 --> 00:01:10,399
entire<font color="#CCCCCC"> language</font><font color="#E5E5E5"> right it's it's like the</font>

20
00:01:08,750 --> 00:01:11,990
whole reference manual is like this one

21
00:01:10,400 --> 00:01:14,960
<font color="#E5E5E5">web page</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can read top to bottom</font>

22
00:01:11,990 --> 00:01:16,369
and like there's no<font color="#CCCCCC"> like corners of the</font>

23
00:01:14,960 --> 00:01:18,649
language<font color="#E5E5E5"> that I feel</font><font color="#CCCCCC"> that I</font><font color="#E5E5E5"> don't know</font>

24
00:01:16,370 --> 00:01:20,450
it's<font color="#E5E5E5"> just like in this it's a very</font>

25
00:01:18,650 --> 00:01:22,190
gratifying since the sensation like

26
00:01:20,450 --> 00:01:25,040
being able to work in<font color="#E5E5E5"> a language</font><font color="#CCCCCC"> like</font>

27
00:01:22,190 --> 00:01:26,600
that<font color="#E5E5E5"> like as opposed to two huge</font>

28
00:01:25,040 --> 00:01:28,640
languages where there's always like some

29
00:01:26,600 --> 00:01:30,050
kind of<font color="#CCCCCC"> constructs or</font><font color="#E5E5E5"> part of the</font>

30
00:01:28,640 --> 00:01:39,500
standard<font color="#CCCCCC"> library that</font><font color="#E5E5E5"> you have never</font>

31
00:01:30,050 --> 00:01:41,780
<font color="#E5E5E5">touched so so like this is a classic</font>

32
00:01:39,500 --> 00:01:44,000
example of like a huge language<font color="#E5E5E5"> versus</font>

33
00:01:41,780 --> 00:01:45,680
like small language and like for a

34
00:01:44,000 --> 00:01:48,380
reference like the entire Lua reference

35
00:01:45,680 --> 00:01:51,409
manual is about the size of JavaScript

36
00:01:48,380 --> 00:01:53,240
the good parts<font color="#E5E5E5"> so it's and the language</font>

37
00:01:51,409 --> 00:01:54,740
is the size of<font color="#E5E5E5"> the languages and</font><font color="#CCCCCC"> the</font>

38
00:01:53,240 --> 00:02:03,530
<font color="#E5E5E5">size of their good and bad parts also</font>

39
00:01:54,740 --> 00:02:05,539
<font color="#E5E5E5">kind of match hopefully like that well</font>

40
00:02:03,530 --> 00:02:08,119
it's actually older than<font color="#E5E5E5"> JavaScript but</font>

41
00:02:05,540 --> 00:02:10,220
but<font color="#E5E5E5"> but yeah like it's it's in many</font>

42
00:02:08,119 --> 00:02:11,930
senses<font color="#E5E5E5"> are simple</font><font color="#CCCCCC"> it's similar</font><font color="#E5E5E5"> and some</font>

43
00:02:10,220 --> 00:02:14,150
people who<font color="#E5E5E5"> are thinking of the other</font>

44
00:02:11,930 --> 00:02:15,440
<font color="#E5E5E5">side of JavaScript they get surprised</font>

45
00:02:14,150 --> 00:02:17,300
<font color="#CCCCCC">that no</font><font color="#E5E5E5"> there are nothing alike but if</font>

46
00:02:15,440 --> 00:02:18,359
you if you focus on the<font color="#E5E5E5"> good parts of</font>

47
00:02:17,300 --> 00:02:22,620
JavaScript then there

48
00:02:18,360 --> 00:02:26,220
<font color="#CCCCCC">rising Alya like so types</font><font color="#E5E5E5"> I also love</font>

49
00:02:22,620 --> 00:02:27,720
types and one thing that<font color="#CCCCCC"> I'd like</font><font color="#E5E5E5"> to say</font>

50
00:02:26,220 --> 00:02:29,190
is<font color="#E5E5E5"> that programming with types feels</font>

51
00:02:27,720 --> 00:02:31,470
like pair programming with<font color="#E5E5E5"> the computer</font>

52
00:02:29,190 --> 00:02:33,329
like like you you program a little<font color="#CCCCCC"> bit</font>

53
00:02:31,470 --> 00:02:35,460
and then the compiler comes and say well

54
00:02:33,330 --> 00:02:36,960
well you you missed like<font color="#E5E5E5"> you made a type</font>

55
00:02:35,460 --> 00:02:38,490
over here something<font color="#E5E5E5"> in something like</font>

56
00:02:36,960 --> 00:02:40,560
<font color="#CCCCCC">that or all</font><font color="#E5E5E5"> you cannot really pass</font><font color="#CCCCCC"> this</font>

57
00:02:38,490 --> 00:02:42,180
to that<font color="#E5E5E5"> and all of that so so you get</font>

58
00:02:40,560 --> 00:02:43,920
that you get this nice<font color="#E5E5E5"> feedback loop</font>

59
00:02:42,180 --> 00:02:45,630
that's different than<font color="#E5E5E5"> running</font><font color="#CCCCCC"> the</font>

60
00:02:43,920 --> 00:02:49,380
program<font color="#E5E5E5"> and seeing if it is seen if it</font>

61
00:02:45,630 --> 00:02:50,700
<font color="#E5E5E5">crashes right and so this is like this</font>

62
00:02:49,380 --> 00:02:52,260
<font color="#E5E5E5">is my</font><font color="#CCCCCC"> interesting of types form they're</font>

63
00:02:50,700 --> 00:02:54,929
very practical perspective as a

64
00:02:52,260 --> 00:02:57,840
practitioner as a programmer<font color="#CCCCCC"> like and</font>

65
00:02:54,930 --> 00:02:59,970
not just<font color="#E5E5E5"> a theoretical like as a like</font>

66
00:02:57,840 --> 00:03:04,290
programming<font color="#E5E5E5"> language academic sort of</font>

67
00:02:59,970 --> 00:03:07,170
interest so before we dive into types

68
00:03:04,290 --> 00:03:09,299
<font color="#E5E5E5">just to let's just get our terminology</font>

69
00:03:07,170 --> 00:03:11,250
on the same page<font color="#E5E5E5"> like when we when</font>

70
00:03:09,300 --> 00:03:14,060
people<font color="#E5E5E5"> often talk</font><font color="#CCCCCC"> talk about</font><font color="#E5E5E5"> type</font>

71
00:03:11,250 --> 00:03:17,280
languages and untyped languages and so

72
00:03:14,060 --> 00:03:18,780
the more accurate<font color="#E5E5E5"> terminology would be</font>

73
00:03:17,280 --> 00:03:20,910
like when you<font color="#E5E5E5"> talk about untyped</font><font color="#CCCCCC"> you</font>

74
00:03:18,780 --> 00:03:22,890
mean<font color="#CCCCCC"> know types at all so that would</font><font color="#E5E5E5"> be</font>

75
00:03:20,910 --> 00:03:26,579
like assembly everything<font color="#E5E5E5"> is a byte right</font>

76
00:03:22,890 --> 00:03:27,839
and those<font color="#CCCCCC"> are not usually like</font><font color="#E5E5E5"> the types</font>

77
00:03:26,580 --> 00:03:30,750
<font color="#E5E5E5">of languages</font><font color="#CCCCCC"> that like the kinds of</font>

78
00:03:27,840 --> 00:03:32,040
languages<font color="#CCCCCC"> that we care and for all the</font>

79
00:03:30,750 --> 00:03:33,600
other ones like there are<font color="#E5E5E5"> types like</font>

80
00:03:32,040 --> 00:03:34,730
types exists so string a<font color="#CCCCCC"> number of</font>

81
00:03:33,600 --> 00:03:37,920
different things

82
00:03:34,730 --> 00:03:40,200
<font color="#E5E5E5">automatic questions can make this a bit</font>

83
00:03:37,920 --> 00:03:42,359
confusing<font color="#E5E5E5"> so</font><font color="#CCCCCC"> said oh no it's</font><font color="#E5E5E5"> not typed</font>

84
00:03:40,200 --> 00:03:44,190
because I can do like string<font color="#CCCCCC"> one plus</font>

85
00:03:42,360 --> 00:03:45,450
<font color="#E5E5E5">two and I get a</font><font color="#CCCCCC"> number so now it's</font>

86
00:03:44,190 --> 00:03:47,040
actually like it's just doing<font color="#E5E5E5"> an</font>

87
00:03:45,450 --> 00:03:49,260
implicit converse conversion<font color="#CCCCCC"> they</font><font color="#E5E5E5"> are</font>

88
00:03:47,040 --> 00:03:50,850
actually<font color="#CCCCCC"> different things</font><font color="#E5E5E5"> like brass</font>

89
00:03:49,260 --> 00:03:52,829
presentation he mentioned that all

90
00:03:50,850 --> 00:03:54,390
originally in TCL everything was really

91
00:03:52,830 --> 00:03:56,040
<font color="#CCCCCC">a string and then now everything is</font>

92
00:03:54,390 --> 00:03:58,140
representable string<font color="#E5E5E5"> even</font><font color="#CCCCCC"> though there</font>

93
00:03:56,040 --> 00:04:00,600
<font color="#CCCCCC">really are</font><font color="#E5E5E5"> different things so like</font>

94
00:03:58,140 --> 00:04:04,170
modern TCL has types like all of the

95
00:04:00,600 --> 00:04:07,470
other<font color="#CCCCCC"> model languages do so</font><font color="#E5E5E5"> people in in</font>

96
00:04:04,170 --> 00:04:08,670
the<font color="#E5E5E5"> few</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> in the theory field</font><font color="#CCCCCC"> they say</font>

97
00:04:07,470 --> 00:04:09,930
like<font color="#E5E5E5"> you shouldn't you shouldn't even</font>

98
00:04:08,670 --> 00:04:12,149
talk<font color="#E5E5E5"> about untyped if you just talk</font>

99
00:04:09,930 --> 00:04:13,530
<font color="#E5E5E5">about unit types it because when you</font>

100
00:04:12,150 --> 00:04:17,130
don't<font color="#E5E5E5"> have time</font><font color="#CCCCCC"> to really have one type</font>

101
00:04:13,530 --> 00:04:18,570
like the type of everything so the

102
00:04:17,130 --> 00:04:19,950
distinction<font color="#CCCCCC"> that we usually</font><font color="#E5E5E5"> care when</font>

103
00:04:18,570 --> 00:04:22,590
<font color="#CCCCCC">we're talking about</font><font color="#E5E5E5"> this language is</font>

104
00:04:19,950 --> 00:04:23,969
typed or not like when we<font color="#CCCCCC"> formally say</font>

105
00:04:22,590 --> 00:04:26,130
that is<font color="#E5E5E5"> that whether it's dynamically</font>

106
00:04:23,970 --> 00:04:27,810
<font color="#E5E5E5">typed or stacked statically typed so</font>

107
00:04:26,130 --> 00:04:30,120
<font color="#E5E5E5">dynamically typed in a nutshell means</font>

108
00:04:27,810 --> 00:04:32,220
<font color="#E5E5E5">that values have types but variables</font>

109
00:04:30,120 --> 00:04:34,860
don't so you<font color="#E5E5E5"> can move values that have</font>

110
00:04:32,220 --> 00:04:38,100
it's around and like and they fit any

111
00:04:34,860 --> 00:04:40,350
variable so languages<font color="#E5E5E5"> that fall</font><font color="#CCCCCC"> into</font>

112
00:04:38,100 --> 00:04:42,300
this<font color="#E5E5E5"> category are like low esteem</font>

113
00:04:40,350 --> 00:04:44,370
<font color="#E5E5E5">airline Python Ruby and so and so on all</font>

114
00:04:42,300 --> 00:04:45,750
<font color="#CCCCCC">of those like all of this</font><font color="#E5E5E5"> typically the</font>

115
00:04:44,370 --> 00:04:48,890
ones that we call scripting languages

116
00:04:45,750 --> 00:04:51,240
and some<font color="#E5E5E5"> that we don't but that's it and</font>

117
00:04:48,890 --> 00:04:53,190
statically typed means that values have

118
00:04:51,240 --> 00:04:54,630
types and variables also<font color="#E5E5E5"> have types so</font>

119
00:04:53,190 --> 00:04:55,710
if<font color="#CCCCCC"> you have an integer and you want to</font>

120
00:04:54,630 --> 00:04:57,750
put in this<font color="#E5E5E5"> variable this variable</font>

121
00:04:55,710 --> 00:05:00,479
better be of the integer type because

122
00:04:57,750 --> 00:05:02,760
otherwise it will not<font color="#CCCCCC"> accept</font><font color="#E5E5E5"> it so like</font>

123
00:05:00,480 --> 00:05:12,630
C Java go see sharp<font color="#E5E5E5"> rust</font><font color="#CCCCCC"> haskell like</font>

124
00:05:02,760 --> 00:05:13,289
all of these other<font color="#E5E5E5"> are step checker</font>

125
00:05:12,630 --> 00:05:15,930
<font color="#CCCCCC">instead</font>

126
00:05:13,289 --> 00:05:20,009
to run<font color="#CCCCCC"> before like</font><font color="#E5E5E5"> run time that</font><font color="#CCCCCC"> tells</font>

127
00:05:15,930 --> 00:05:21,960
you if your types are<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so for the</font>

128
00:05:20,009 --> 00:05:24,089
purpose<font color="#E5E5E5"> of this</font><font color="#CCCCCC"> presentation we will</font>

129
00:05:21,960 --> 00:05:25,409
<font color="#E5E5E5">totally avoid these terms like strongly</font>

130
00:05:24,089 --> 00:05:27,689
<font color="#E5E5E5">typed or weakly typed because they are</font>

131
00:05:25,409 --> 00:05:28,830
very confusing<font color="#E5E5E5"> and like everyone seems</font>

132
00:05:27,689 --> 00:05:30,689
to have<font color="#E5E5E5"> like a different</font><font color="#CCCCCC"> definition of</font>

133
00:05:28,830 --> 00:05:32,300
what<font color="#E5E5E5"> those mean and the better</font>

134
00:05:30,689 --> 00:05:34,979
distinction is really dynamic or static

135
00:05:32,300 --> 00:05:37,259
<font color="#E5E5E5">right so so this is</font><font color="#CCCCCC"> what we care about</font>

136
00:05:34,979 --> 00:05:39,419
<font color="#E5E5E5">but we also care about minimalism and</font>

137
00:05:37,259 --> 00:05:41,819
apparently<font color="#E5E5E5"> our all of</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> favorite</font>

138
00:05:39,419 --> 00:05:44,279
minimalistic languages all fall<font color="#E5E5E5"> you know</font>

139
00:05:41,819 --> 00:05:46,229
in the<font color="#E5E5E5"> first group like there's</font><font color="#CCCCCC"> Luwin</font>

140
00:05:44,279 --> 00:05:50,490
scheme and like all the only wants to

141
00:05:46,229 --> 00:05:52,318
see also<font color="#CCCCCC"> there right so</font><font color="#E5E5E5"> what gives like</font>

142
00:05:50,490 --> 00:05:57,749
what we happens when we put minimalism

143
00:05:52,319 --> 00:06:00,240
and types together<font color="#E5E5E5"> right so let me go</font>

144
00:05:57,749 --> 00:06:03,360
<font color="#E5E5E5">through a brief history of the efforts</font>

145
00:06:00,240 --> 00:06:05,009
for typing<font color="#CCCCCC"> Lua so back in law workshop</font>

146
00:06:03,360 --> 00:06:08,520
2013

147
00:06:05,009 --> 00:06:11,520
Fabian flirter presented tidal<font color="#E5E5E5"> walk</font>

148
00:06:08,520 --> 00:06:14,878
<font color="#E5E5E5">which was based on meta</font><font color="#CCCCCC"> Lua his Lua meta</font>

149
00:06:11,520 --> 00:06:17,729
programming library where<font color="#E5E5E5"> he attempted</font>

150
00:06:14,879 --> 00:06:19,499
to<font color="#E5E5E5"> do like gradual typing of Lua</font>

151
00:06:17,729 --> 00:06:21,599
programs you could you could partially

152
00:06:19,499 --> 00:06:25,110
add type annotations that<font color="#E5E5E5"> would verify</font>

153
00:06:21,599 --> 00:06:29,430
them and all<font color="#E5E5E5"> of that</font><font color="#CCCCCC"> in his</font><font color="#E5E5E5"> presentation</font>

154
00:06:25,110 --> 00:06:31,319
like the like<font color="#E5E5E5"> the main point of his</font>

155
00:06:29,430 --> 00:06:33,959
presentation<font color="#E5E5E5"> was</font><font color="#CCCCCC"> that we all left like</font>

156
00:06:31,319 --> 00:06:35,849
scared off the<font color="#CCCCCC"> prospects of how</font><font color="#E5E5E5"> hard</font>

157
00:06:33,959 --> 00:06:37,050
that problem was because<font color="#E5E5E5"> he started like</font>

158
00:06:35,849 --> 00:06:38,669
showing<font color="#E5E5E5"> like</font><font color="#CCCCCC"> how in the simple cases</font>

159
00:06:37,050 --> 00:06:40,139
<font color="#CCCCCC">this and</font><font color="#E5E5E5"> this work doesn't and then it</font>

160
00:06:38,669 --> 00:06:42,119
starts getting Messier and Messier and

161
00:06:40,139 --> 00:06:44,339
Messier<font color="#E5E5E5"> because once you start to</font>

162
00:06:42,119 --> 00:06:46,409
<font color="#CCCCCC">capture the way that that</font><font color="#E5E5E5"> blue</font>

163
00:06:44,339 --> 00:06:48,779
programmers<font color="#E5E5E5"> deal with their data</font>

164
00:06:46,409 --> 00:06:50,580
<font color="#E5E5E5">structures right he started to have to</font>

165
00:06:48,779 --> 00:06:52,860
<font color="#E5E5E5">apply heuristics and things like that</font><font color="#CCCCCC"> so</font>

166
00:06:50,580 --> 00:06:54,419
is that<font color="#CCCCCC"> scratcher</font><font color="#E5E5E5"> had to say well wait</font>

167
00:06:52,860 --> 00:06:56,879
my type checker is<font color="#E5E5E5"> gonna be running</font>

168
00:06:54,419 --> 00:06:58,529
heuristics on the code right so because

169
00:06:56,879 --> 00:07:01,559
when you<font color="#E5E5E5"> think of a type checker</font><font color="#CCCCCC"> you</font>

170
00:06:58,529 --> 00:07:02,729
<font color="#E5E5E5">kind of want some certainty and and in</font>

171
00:07:01,559 --> 00:07:06,180
the end like it seems to be like<font color="#CCCCCC"> a a</font>

172
00:07:02,729 --> 00:07:08,610
real a really tough problem<font color="#CCCCCC"> in</font><font color="#E5E5E5"> other</font>

173
00:07:06,180 --> 00:07:12,389
<font color="#CCCCCC">laughs tough problems is what research</font>

174
00:07:08,610 --> 00:07:14,759
<font color="#CCCCCC">is made of so around</font><font color="#E5E5E5"> that time under</font>

175
00:07:12,389 --> 00:07:16,769
damn<font color="#E5E5E5"> Idol was was working with Lua and</font>

176
00:07:14,759 --> 00:07:20,699
<font color="#E5E5E5">types and two years after</font><font color="#CCCCCC"> that he</font>

177
00:07:16,769 --> 00:07:23,099
presented<font color="#E5E5E5"> his PhD dissertation on that</font>

178
00:07:20,699 --> 00:07:25,940
was called<font color="#E5E5E5"> typed Lua and an optional</font>

179
00:07:23,099 --> 00:07:27,530
type system for<font color="#E5E5E5"> for Lua</font>

180
00:07:25,940 --> 00:07:30,200
he worked<font color="#E5E5E5"> hard on many of those</font>

181
00:07:27,530 --> 00:07:32,900
<font color="#E5E5E5">complicated problems and he came</font><font color="#CCCCCC"> up with</font>

182
00:07:30,200 --> 00:07:35,030
a super<font color="#CCCCCC"> complicated type system that had</font>

183
00:07:32,900 --> 00:07:37,489
like many many pages full<font color="#E5E5E5"> of little</font>

184
00:07:35,030 --> 00:07:40,429
Greek letters<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> thesis</font><font color="#CCCCCC"> as he just</font>

185
00:07:37,490 --> 00:07:42,860
as he tried to<font color="#E5E5E5"> make sense of the whole</font>

186
00:07:40,430 --> 00:07:45,830
<font color="#CCCCCC">thing and he made an implementation that</font>

187
00:07:42,860 --> 00:07:48,470
sound github<font color="#E5E5E5"> and that implementation is</font>

188
00:07:45,830 --> 00:07:50,210
a nice prototype of all those<font color="#E5E5E5"> ideas but</font>

189
00:07:48,470 --> 00:07:52,600
<font color="#E5E5E5">really it's not ready for</font><font color="#CCCCCC"> primetime in a</font>

190
00:07:50,210 --> 00:07:55,489
sense<font color="#CCCCCC"> that you can't really feed</font>

191
00:07:52,600 --> 00:07:57,110
<font color="#E5E5E5">real-world programs in it and like try</font>

192
00:07:55,490 --> 00:07:59,870
to use it<font color="#CCCCCC"> as a day-to-day tool because</font>

193
00:07:57,110 --> 00:08:02,300
like the type checker is just too strict

194
00:07:59,870 --> 00:08:03,710
<font color="#E5E5E5">it complains about like lots of lots of</font>

195
00:08:02,300 --> 00:08:05,690
<font color="#CCCCCC">things that you as a</font><font color="#E5E5E5"> little programmer</font>

196
00:08:03,710 --> 00:08:07,219
said now this<font color="#E5E5E5"> is right you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> but the</font>

197
00:08:05,690 --> 00:08:10,340
the type checker just doesn't understand

198
00:08:07,220 --> 00:08:13,730
and it is a super<font color="#E5E5E5"> complicated one so I</font>

199
00:08:10,340 --> 00:08:15,950
got involved<font color="#CCCCCC"> back then I was doing</font><font color="#E5E5E5"> my</font>

200
00:08:13,730 --> 00:08:17,660
own<font color="#CCCCCC"> PhD at the lab</font><font color="#E5E5E5"> like it's completely</font>

201
00:08:15,950 --> 00:08:20,060
unrelated subject but i guarante<font color="#E5E5E5"> along</font>

202
00:08:17,660 --> 00:08:21,680
with the people<font color="#CCCCCC"> there</font><font color="#E5E5E5"> and so</font><font color="#CCCCCC"> we decided</font>

203
00:08:20,060 --> 00:08:26,240
to start kind<font color="#E5E5E5"> of a side project on that</font>

204
00:08:21,680 --> 00:08:28,040
<font color="#E5E5E5">and two years</font><font color="#CCCCCC"> later around</font><font color="#E5E5E5"> 2017</font><font color="#CCCCCC"> we start</font>

205
00:08:26,240 --> 00:08:31,010
<font color="#CCCCCC">a project</font><font color="#E5E5E5"> called</font><font color="#CCCCCC"> titan' that would be a</font>

206
00:08:28,040 --> 00:08:33,530
statically<font color="#E5E5E5"> typed language that would</font><font color="#CCCCCC"> be</font>

207
00:08:31,010 --> 00:08:35,419
<font color="#CCCCCC">like Lua like but not try</font><font color="#E5E5E5"> to type Lua</font>

208
00:08:33,530 --> 00:08:36,679
but create a new language<font color="#CCCCCC"> that</font><font color="#E5E5E5"> will be</font>

209
00:08:35,419 --> 00:08:38,718
<font color="#E5E5E5">selling the type that will be somewhat</font>

210
00:08:36,679 --> 00:08:43,848
like Lua<font color="#E5E5E5"> and designed to interact with</font>

211
00:08:38,719 --> 00:08:47,150
Lua<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is still an ongoing project</font>

212
00:08:43,849 --> 00:08:49,430
<font color="#E5E5E5">and it kind of shows</font><font color="#CCCCCC"> that we clearly</font>

213
00:08:47,150 --> 00:08:50,449
like at that<font color="#CCCCCC"> point we</font><font color="#E5E5E5"> kind of gave</font><font color="#CCCCCC"> up on</font>

214
00:08:49,430 --> 00:08:52,069
trying<font color="#E5E5E5"> to type Lua</font>

215
00:08:50,450 --> 00:08:54,920
<font color="#E5E5E5">and I said like just let's just do</font>

216
00:08:52,070 --> 00:08:56,690
something<font color="#E5E5E5"> else</font><font color="#CCCCCC"> and and really Titan</font>

217
00:08:54,920 --> 00:09:00,020
tries to fit more as when you're

218
00:08:56,690 --> 00:09:02,720
<font color="#CCCCCC">programming</font><font color="#E5E5E5"> like in that part see part</font>

219
00:09:00,020 --> 00:09:04,730
Lua<font color="#E5E5E5"> like embedded</font><font color="#CCCCCC"> language type of thing</font>

220
00:09:02,720 --> 00:09:06,470
<font color="#E5E5E5">Titan would be more suitable for</font>

221
00:09:04,730 --> 00:09:08,750
replacing<font color="#CCCCCC"> the C parts rather than the</font>

222
00:09:06,470 --> 00:09:11,600
Lua part so it's not really the<font color="#CCCCCC"> same</font>

223
00:09:08,750 --> 00:09:13,550
thing<font color="#E5E5E5"> and at the same time</font><font color="#CCCCCC"> there's like</font>

224
00:09:11,600 --> 00:09:15,710
super hard research questions and<font color="#E5E5E5"> on how</font>

225
00:09:13,550 --> 00:09:17,120
to go<font color="#E5E5E5"> about this and like some of us</font>

226
00:09:15,710 --> 00:09:18,620
were approaching<font color="#E5E5E5"> it from a very</font>

227
00:09:17,120 --> 00:09:21,410
<font color="#E5E5E5">practical standpoint some of us were</font>

228
00:09:18,620 --> 00:09:23,210
pushing from<font color="#CCCCCC"> a theoretical standpoint so</font>

229
00:09:21,410 --> 00:09:25,160
at one<font color="#CCCCCC"> point the project split off and</font>

230
00:09:23,210 --> 00:09:26,750
like the research branch of it is the

231
00:09:25,160 --> 00:09:28,579
<font color="#E5E5E5">Pauline project in which they're really</font>

232
00:09:26,750 --> 00:09:30,260
<font color="#CCCCCC">going</font><font color="#E5E5E5"> like data structure by data</font>

233
00:09:28,580 --> 00:09:34,600
structure from first principles<font color="#E5E5E5"> and</font>

234
00:09:30,260 --> 00:09:34,600
doing the research<font color="#CCCCCC"> on</font><font color="#E5E5E5"> that right so</font>

235
00:09:35,810 --> 00:09:40,008
so yet here we are<font color="#CCCCCC"> 2019 and we still</font>

236
00:09:38,720 --> 00:09:42,499
<font color="#E5E5E5">don't</font><font color="#CCCCCC"> have a type checker for</font><font color="#E5E5E5"> Lua we</font>

237
00:09:40,009 --> 00:09:44,029
don't have a way of like<font color="#E5E5E5"> after that many</font>

238
00:09:42,499 --> 00:09:45,769
<font color="#E5E5E5">years and and so many</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> like</font>

239
00:09:44,029 --> 00:09:49,009
putting efforts on<font color="#CCCCCC"> all</font><font color="#E5E5E5"> that we don't</font>

240
00:09:45,769 --> 00:09:53,959
<font color="#E5E5E5">have a way to use Lua and types together</font>

241
00:09:49,009 --> 00:09:56,360
<font color="#E5E5E5">so what gives why is it so hard</font><font color="#CCCCCC"> alright</font>

242
00:09:53,959 --> 00:09:58,399
so I did some<font color="#CCCCCC"> soul searching and</font>

243
00:09:56,360 --> 00:10:02,689
thinking<font color="#CCCCCC"> about the whole thing and want</font>

244
00:09:58,399 --> 00:10:07,370
to share like my my thoughts about<font color="#E5E5E5"> it so</font>

245
00:10:02,689 --> 00:10:08,899
<font color="#E5E5E5">our first first stab of that</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> that</font>

246
00:10:07,370 --> 00:10:10,009
question<font color="#E5E5E5"> like when you think</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> it</font>

247
00:10:08,899 --> 00:10:11,509
like and we<font color="#E5E5E5"> are here talking about</font>

248
00:10:10,009 --> 00:10:12,800
minimalistic languages and<font color="#E5E5E5"> it starts</font>

249
00:10:11,509 --> 00:10:14,420
talking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> types types types in it</font>

250
00:10:12,800 --> 00:10:17,389
and how<font color="#E5E5E5"> everything is complicated</font><font color="#CCCCCC"> and</font>

251
00:10:14,420 --> 00:10:18,920
from your<font color="#CCCCCC"> own</font><font color="#E5E5E5"> history experience dealing</font>

252
00:10:17,389 --> 00:10:21,709
with typed languages and you think<font color="#E5E5E5"> about</font>

253
00:10:18,920 --> 00:10:23,209
like I don't know Haskell or rust<font color="#E5E5E5"> or C++</font>

254
00:10:21,709 --> 00:10:25,069
you know like languages that has huge

255
00:10:23,209 --> 00:10:26,209
complicated<font color="#E5E5E5"> type systems you start</font>

256
00:10:25,069 --> 00:10:27,649
<font color="#E5E5E5">thinking oh they ended up being</font>

257
00:10:26,209 --> 00:10:29,029
complicated languages because the types

258
00:10:27,649 --> 00:10:31,220
mess up<font color="#E5E5E5"> everything like with the</font>

259
00:10:29,029 --> 00:10:32,689
minimalism<font color="#CCCCCC"> you know they like once you</font>

260
00:10:31,220 --> 00:10:34,040
add like the types in the whole

261
00:10:32,689 --> 00:10:35,779
enchilada<font color="#E5E5E5"> with it you know the language</font>

262
00:10:34,040 --> 00:10:38,300
<font color="#CCCCCC">is no longer minimalistic so maybe like</font>

263
00:10:35,779 --> 00:10:40,579
so types make our tiny languages

264
00:10:38,300 --> 00:10:42,189
complicated like is that<font color="#CCCCCC"> the problem</font><font color="#E5E5E5"> all</font>

265
00:10:40,579 --> 00:10:44,750
<font color="#E5E5E5">right</font>

266
00:10:42,189 --> 00:10:47,599
my conclusion<font color="#CCCCCC"> is that the problem is</font>

267
00:10:44,750 --> 00:10:50,839
kind<font color="#E5E5E5"> of the opposite and this can be a</font>

268
00:10:47,600 --> 00:10:53,059
little<font color="#E5E5E5"> surprising but when we</font><font color="#CCCCCC"> think</font>

269
00:10:50,839 --> 00:10:55,699
about<font color="#E5E5E5"> like our little dynamically typed</font>

270
00:10:53,059 --> 00:10:59,300
languages like Lua<font color="#CCCCCC"> and scheme and like</font>

271
00:10:55,699 --> 00:11:00,859
your favorite one<font color="#CCCCCC"> you might realize</font>

272
00:10:59,300 --> 00:11:02,719
after you<font color="#E5E5E5"> look at it for a</font><font color="#CCCCCC"> while that</font>

273
00:11:00,860 --> 00:11:05,360
they actually have huge type systems and

274
00:11:02,720 --> 00:11:11,329
very<font color="#E5E5E5"> complicated type systems and you go</font>

275
00:11:05,360 --> 00:11:13,370
like what yeah yes<font color="#E5E5E5"> so if you think about</font>

276
00:11:11,329 --> 00:11:16,250
<font color="#CCCCCC">the type system</font><font color="#E5E5E5"> as being well the set of</font>

277
00:11:13,370 --> 00:11:17,959
rules that<font color="#CCCCCC"> describe what are the valid</font>

278
00:11:16,250 --> 00:11:19,339
<font color="#E5E5E5">interaction of values in correct</font>

279
00:11:17,959 --> 00:11:24,469
programs which are the<font color="#E5E5E5"> things</font><font color="#CCCCCC"> that a</font>

280
00:11:19,339 --> 00:11:25,790
type checker checks<font color="#E5E5E5"> right so essentially</font>

281
00:11:24,470 --> 00:11:28,250
the type checker for<font color="#E5E5E5"> those languages</font>

282
00:11:25,790 --> 00:11:32,089
<font color="#E5E5E5">it's in your head like you are the type</font>

283
00:11:28,250 --> 00:11:33,470
checker but but if you take like the C

284
00:11:32,089 --> 00:11:35,540
language<font color="#E5E5E5"> and it has a type checker</font>

285
00:11:33,470 --> 00:11:37,069
implemented inside GCC<font color="#E5E5E5"> you can look at</font>

286
00:11:35,540 --> 00:11:38,449
the source code<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can see this is</font>

287
00:11:37,069 --> 00:11:40,998
<font color="#E5E5E5">a type checker and this is what it</font><font color="#CCCCCC"> does</font>

288
00:11:38,449 --> 00:11:42,709
<font color="#E5E5E5">those are the rules</font><font color="#CCCCCC"> right so let's open</font>

289
00:11:40,999 --> 00:11:44,089
our heads and look at the type checkers

290
00:11:42,709 --> 00:11:46,699
that<font color="#E5E5E5"> we have inside</font><font color="#CCCCCC"> our heads for</font><font color="#E5E5E5"> Lua</font>

291
00:11:44,089 --> 00:11:48,319
<font color="#CCCCCC">what are the rules</font><font color="#E5E5E5"> in there you know</font>

292
00:11:46,699 --> 00:11:49,219
like<font color="#E5E5E5"> how complicated like if you were to</font>

293
00:11:48,319 --> 00:11:51,439
write<font color="#E5E5E5"> it in</font>

294
00:11:49,220 --> 00:11:53,180
Greek letters in a<font color="#E5E5E5"> PhD thesis what</font><font color="#CCCCCC"> Wow</font>

295
00:11:51,439 --> 00:11:55,550
what would that<font color="#E5E5E5"> type system look like</font>

296
00:11:53,180 --> 00:11:58,189
<font color="#E5E5E5">for</font><font color="#CCCCCC"> Lua codes that we actually</font><font color="#E5E5E5"> write</font>

297
00:11:55,550 --> 00:12:00,410
nowadays<font color="#E5E5E5"> with our tiny</font><font color="#CCCCCC"> Lu a language</font>

298
00:11:58,189 --> 00:12:03,709
that fits in<font color="#CCCCCC"> a you know and a 200k Qatar</font>

299
00:12:00,410 --> 00:12:06,410
<font color="#CCCCCC">Bowl no so if you are the</font><font color="#E5E5E5"> type checker</font>

300
00:12:03,709 --> 00:12:07,969
what type system error checking no<font color="#CCCCCC"> cuz</font>

301
00:12:06,410 --> 00:12:09,469
this<font color="#E5E5E5"> is the kind of work you do like you</font>

302
00:12:07,970 --> 00:12:11,540
do like we have multiple<font color="#CCCCCC"> returns</font><font color="#E5E5E5"> and Luo</font>

303
00:12:09,470 --> 00:12:13,310
you do I'll get coordinates for those

304
00:12:11,540 --> 00:12:14,959
two values<font color="#E5E5E5"> and you realize</font><font color="#CCCCCC"> like you</font><font color="#E5E5E5"> give</font>

305
00:12:13,310 --> 00:12:16,758
a type error to yourself and say oh I

306
00:12:14,959 --> 00:12:18,560
can do<font color="#E5E5E5"> that because yesterday I changed</font>

307
00:12:16,759 --> 00:12:20,899
<font color="#E5E5E5">that function from returning two things</font>

308
00:12:18,560 --> 00:12:22,128
to<font color="#E5E5E5"> returning a table so so that line on</font>

309
00:12:20,899 --> 00:12:23,420
<font color="#CCCCCC">the top is</font><font color="#E5E5E5"> not gonna work this</font><font color="#CCCCCC"> is the</font>

310
00:12:22,129 --> 00:12:25,250
kind of doing<font color="#E5E5E5"> that you're</font><font color="#CCCCCC"> doing you know</font>

311
00:12:23,420 --> 00:12:27,259
<font color="#CCCCCC">ahead</font><font color="#E5E5E5"> that's why I mean by you are the</font>

312
00:12:25,250 --> 00:12:30,019
type checker<font color="#CCCCCC"> right so what</font><font color="#E5E5E5"> are you</font>

313
00:12:27,259 --> 00:12:31,819
checking<font color="#E5E5E5"> what are those rules well now</font>

314
00:12:30,019 --> 00:12:33,949
we have<font color="#E5E5E5"> to go to the state of the art of</font>

315
00:12:31,819 --> 00:12:35,000
<font color="#CCCCCC">sight systems right because I was</font>

316
00:12:33,949 --> 00:12:36,589
<font color="#E5E5E5">talking about dynamically typed</font>

317
00:12:35,000 --> 00:12:37,970
languages so<font color="#CCCCCC"> sorry mo statically typed</font>

318
00:12:36,589 --> 00:12:40,040
language but within<font color="#E5E5E5"> the realm of</font>

319
00:12:37,970 --> 00:12:42,500
statically typed<font color="#CCCCCC"> typed languages there</font>

320
00:12:40,040 --> 00:12:44,839
are dependently type languages

321
00:12:42,500 --> 00:12:47,420
<font color="#E5E5E5">dependently type</font><font color="#CCCCCC"> languages in like-new</font>

322
00:12:44,839 --> 00:12:49,550
<font color="#CCCCCC">like in in the practical sense category</font>

323
00:12:47,420 --> 00:12:51,920
<font color="#E5E5E5">of languages in which values have types</font>

324
00:12:49,550 --> 00:12:54,740
<font color="#CCCCCC">variables have</font><font color="#E5E5E5"> types but types have</font>

325
00:12:51,920 --> 00:12:56,809
values and<font color="#E5E5E5"> types have types right and</font>

326
00:12:54,740 --> 00:12:58,550
<font color="#E5E5E5">and since well since types of values and</font>

327
00:12:56,809 --> 00:13:01,879
<font color="#E5E5E5">values of types</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> you get into an</font>

328
00:12:58,550 --> 00:13:03,529
endless infinite<font color="#E5E5E5"> tower of complexity</font>

329
00:13:01,879 --> 00:13:05,449
there and now and there's a few<font color="#E5E5E5"> examples</font>

330
00:13:03,529 --> 00:13:07,129
of languages out<font color="#CCCCCC"> there like Idris Agda</font>

331
00:13:05,449 --> 00:13:08,540
there are not that many yet like people

332
00:13:07,129 --> 00:13:10,490
always say like<font color="#CCCCCC"> the same three and then</font>

333
00:13:08,540 --> 00:13:12,980
the third<font color="#E5E5E5"> one is is actually like a</font>

334
00:13:10,490 --> 00:13:17,629
proof assistant<font color="#E5E5E5"> like you know the</font><font color="#CCCCCC"> the</font>

335
00:13:12,980 --> 00:13:19,610
 from<font color="#E5E5E5"> India</font><font color="#CCCCCC"> right so</font><font color="#E5E5E5"> really but this</font>

336
00:13:17,629 --> 00:13:21,649
is the kind<font color="#CCCCCC"> of type system that you have</font>

337
00:13:19,610 --> 00:13:23,329
<font color="#CCCCCC">in your head when you're working with a</font>

338
00:13:21,649 --> 00:13:25,279
dynamically typed language<font color="#E5E5E5"> right you</font>

339
00:13:23,329 --> 00:13:28,040
have like a nice<font color="#CCCCCC"> function f a</font><font color="#E5E5E5"> and B what</font>

340
00:13:25,279 --> 00:13:30,350
<font color="#CCCCCC">are the types of a and B you</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> a is</font>

341
00:13:28,040 --> 00:13:33,920
an integer and<font color="#CCCCCC"> B is well if a is less</font>

342
00:13:30,350 --> 00:13:36,230
<font color="#CCCCCC">than 200 say 256</font><font color="#E5E5E5"> then B is a string</font>

343
00:13:33,920 --> 00:13:37,819
<font color="#E5E5E5">otherwise B is an array</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> strings</font><font color="#CCCCCC"> you</font>

344
00:13:36,230 --> 00:13:39,680
know<font color="#E5E5E5"> when we have when we programming</font>

345
00:13:37,819 --> 00:13:40,790
with dynamically typed languages we do

346
00:13:39,680 --> 00:13:42,319
that kind<font color="#CCCCCC"> of stuff all the time without</font>

347
00:13:40,790 --> 00:13:44,300
like<font color="#CCCCCC"> read even realizing that we are</font>

348
00:13:42,319 --> 00:13:46,399
creating these complex types<font color="#E5E5E5"> that</font><font color="#CCCCCC"> have</font>

349
00:13:44,300 --> 00:13:48,019
like depend that<font color="#E5E5E5"> the definition of the</font>

350
00:13:46,399 --> 00:13:50,420
type has a dependency that's why it's

351
00:13:48,019 --> 00:13:54,980
called dependent<font color="#E5E5E5"> types right on another</font>

352
00:13:50,420 --> 00:13:57,259
value right so just pause for<font color="#E5E5E5"> a second</font>

353
00:13:54,980 --> 00:13:59,509
<font color="#E5E5E5">and imagine like</font><font color="#CCCCCC"> how hard would be for</font>

354
00:13:57,259 --> 00:14:01,429
you to<font color="#CCCCCC"> write</font><font color="#E5E5E5"> a type checker that would</font>

355
00:13:59,509 --> 00:14:03,080
be able<font color="#E5E5E5"> to check</font><font color="#CCCCCC"> that you know like you</font>

356
00:14:01,429 --> 00:14:05,449
<font color="#CCCCCC">would have</font><font color="#E5E5E5"> to go</font><font color="#CCCCCC"> through the flow of</font>

357
00:14:03,080 --> 00:14:07,430
every like possible<font color="#E5E5E5"> path that leads to</font>

358
00:14:05,450 --> 00:14:09,530
<font color="#E5E5E5">the first argument and determined that</font>

359
00:14:07,430 --> 00:14:12,109
<font color="#E5E5E5">the integer that was evaluated could</font>

360
00:14:09,530 --> 00:14:14,990
possibly ever be<font color="#E5E5E5"> like less or more than</font>

361
00:14:12,110 --> 00:14:23,060
<font color="#E5E5E5">256 and then if you got a table</font><font color="#CCCCCC"> you have</font>

362
00:14:14,990 --> 00:14:25,420
<font color="#CCCCCC">to you know prove that you know yes</font><font color="#E5E5E5"> but</font>

363
00:14:23,060 --> 00:14:28,119
if but once we have a dynamic<font color="#CCCCCC"> language</font>

364
00:14:25,420 --> 00:14:30,050
you do come up<font color="#CCCCCC"> with those</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> because</font>

365
00:14:28,120 --> 00:14:31,190
essentially the dynamically typed

366
00:14:30,050 --> 00:14:32,750
language since it<font color="#CCCCCC"> imposes no</font>

367
00:14:31,190 --> 00:14:39,050
restrictions it lets you<font color="#CCCCCC"> think those</font>

368
00:14:32,750 --> 00:14:40,460
<font color="#E5E5E5">thoughts right so but when you're doing</font>

369
00:14:39,050 --> 00:14:41,449
the work in<font color="#E5E5E5"> your head like it's kind of</font>

370
00:14:40,460 --> 00:14:43,640
<font color="#CCCCCC">like it's not that hard</font><font color="#E5E5E5"> you don't</font>

371
00:14:41,450 --> 00:14:44,900
<font color="#E5E5E5">actually do like the flow analysis of</font>

372
00:14:43,640 --> 00:14:46,130
the entire<font color="#CCCCCC"> program in your</font><font color="#E5E5E5"> head every</font>

373
00:14:44,900 --> 00:14:47,900
<font color="#CCCCCC">time</font><font color="#E5E5E5"> because suppose you have those</font>

374
00:14:46,130 --> 00:14:49,160
variable variables here red green and

375
00:14:47,900 --> 00:14:51,079
blue in<font color="#E5E5E5"> there and there and</font><font color="#CCCCCC"> you know</font>

376
00:14:49,160 --> 00:14:53,360
there are all integers<font color="#E5E5E5"> right you know</font>

377
00:14:51,080 --> 00:14:55,160
<font color="#E5E5E5">that oh those if you see something</font><font color="#CCCCCC"> like</font>

378
00:14:53,360 --> 00:14:57,740
<font color="#E5E5E5">this and you know like okay so these are</font>

379
00:14:55,160 --> 00:15:00,079
RGB components they go from<font color="#E5E5E5"> 0</font><font color="#CCCCCC"> to 255 and</font>

380
00:14:57,740 --> 00:15:01,460
<font color="#CCCCCC">then I'm I'm passing an RGB component</font>

381
00:15:00,080 --> 00:15:04,220
there with an array and<font color="#E5E5E5"> that's not going</font>

382
00:15:01,460 --> 00:15:06,080
<font color="#E5E5E5">to work</font><font color="#CCCCCC"> because I expect like those</font>

383
00:15:04,220 --> 00:15:08,270
<font color="#E5E5E5">numbers to be within the range and so I</font>

384
00:15:06,080 --> 00:15:10,520
<font color="#CCCCCC">named B strings and</font><font color="#E5E5E5"> not a race so that</font>

385
00:15:08,270 --> 00:15:12,530
<font color="#CCCCCC">so there's probably an error here right</font>

386
00:15:10,520 --> 00:15:14,360
<font color="#CCCCCC">but if the type checker had the</font>

387
00:15:12,530 --> 00:15:16,790
information<font color="#CCCCCC"> that red it's only ever</font>

388
00:15:14,360 --> 00:15:21,230
between<font color="#E5E5E5"> 0 to 255 you had to</font><font color="#CCCCCC"> specify that</font>

389
00:15:16,790 --> 00:15:22,760
<font color="#E5E5E5">in the type right or then the type</font>

390
00:15:21,230 --> 00:15:25,010
checker would have an easier job<font color="#E5E5E5"> would</font>

391
00:15:22,760 --> 00:15:26,840
<font color="#CCCCCC">be actually able</font><font color="#E5E5E5"> to do that right but it</font>

392
00:15:25,010 --> 00:15:28,280
won't<font color="#E5E5E5"> once you have the</font><font color="#CCCCCC"> idea of a type</font>

393
00:15:26,840 --> 00:15:31,100
system<font color="#CCCCCC"> that</font><font color="#E5E5E5"> has like all of arithmetic</font>

394
00:15:28,280 --> 00:15:33,589
<font color="#CCCCCC">in it right</font>

395
00:15:31,100 --> 00:15:35,150
and by<font color="#E5E5E5"> I mean like a type system</font><font color="#CCCCCC"> that</font>

396
00:15:33,590 --> 00:15:37,460
encompasses<font color="#E5E5E5"> our</font><font color="#CCCCCC"> Atlantic's</font><font color="#E5E5E5"> it mean like</font>

397
00:15:35,150 --> 00:15:40,220
by the<font color="#CCCCCC"> curry howard</font><font color="#E5E5E5"> corresponds it means</font>

398
00:15:37,460 --> 00:15:43,310
like every type system corresponds to a

399
00:15:40,220 --> 00:15:45,020
kind<font color="#CCCCCC"> of logic</font><font color="#E5E5E5"> right so</font><font color="#CCCCCC"> I first ordered a</font>

400
00:15:43,310 --> 00:15:48,920
large<font color="#CCCCCC"> X second order logic</font><font color="#E5E5E5"> you know and</font>

401
00:15:45,020 --> 00:15:50,600
and<font color="#E5E5E5"> and those things right so and by the</font>

402
00:15:48,920 --> 00:15:52,699
way since the 50s we know that

403
00:15:50,600 --> 00:15:54,620
arithmetic<font color="#CCCCCC"> says proven undecidable in</font>

404
00:15:52,700 --> 00:15:56,300
logic<font color="#CCCCCC"> so if you can have a type system</font>

405
00:15:54,620 --> 00:16:02,090
at a checker that knows all of<font color="#E5E5E5"> our if</font>

406
00:15:56,300 --> 00:16:03,050
<font color="#CCCCCC">metics so yeah so</font><font color="#E5E5E5"> we kind of do those</font>

407
00:16:02,090 --> 00:16:05,060
things all the<font color="#CCCCCC"> time when we're</font>

408
00:16:03,050 --> 00:16:06,829
<font color="#E5E5E5">programming here like for example</font><font color="#CCCCCC"> you do</font>

409
00:16:05,060 --> 00:16:08,479
something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> this like load values</font>

410
00:16:06,830 --> 00:16:11,600
into a table you give them<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> and an</font>

411
00:16:08,480 --> 00:16:13,700
error if not<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> then well the type of</font>

412
00:16:11,600 --> 00:16:16,130
<font color="#E5E5E5">error is</font><font color="#CCCCCC"> like it's dependent on</font><font color="#E5E5E5"> the type</font>

413
00:16:13,700 --> 00:16:17,120
of<font color="#E5E5E5"> okay like if it's a string if</font><font color="#CCCCCC"> ok is</font>

414
00:16:16,130 --> 00:16:20,360
false

415
00:16:17,120 --> 00:16:22,069
right or if it's nil right<font color="#E5E5E5"> and then</font>

416
00:16:20,360 --> 00:16:24,620
what's the type of<font color="#E5E5E5"> tea</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know when you</font>

417
00:16:22,069 --> 00:16:26,389
get there<font color="#CCCCCC"> T of one right well it might</font>

418
00:16:24,620 --> 00:16:27,769
<font color="#E5E5E5">have failed in between you know and all</font>

419
00:16:26,389 --> 00:16:29,029
those kinds of things<font color="#CCCCCC"> like</font><font color="#E5E5E5"> the floor</font>

420
00:16:27,769 --> 00:16:32,420
analysis get<font color="#CCCCCC"> can't could get really</font>

421
00:16:29,029 --> 00:16:34,670
complicated<font color="#E5E5E5"> and when you get to that</font>

422
00:16:32,420 --> 00:16:37,219
like in<font color="#E5E5E5"> a case like Lua where the table</font>

423
00:16:34,670 --> 00:16:38,839
is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> only structure type</font><font color="#E5E5E5"> so when we</font>

424
00:16:37,220 --> 00:16:40,309
say like<font color="#CCCCCC"> everything's</font><font color="#E5E5E5"> a table like apart</font>

425
00:16:38,839 --> 00:16:41,689
from the primitives you<font color="#E5E5E5"> know strings and</font>

426
00:16:40,309 --> 00:16:43,999
integers and<font color="#E5E5E5"> all that it</font><font color="#CCCCCC"> means that a</font>

427
00:16:41,689 --> 00:16:46,219
<font color="#CCCCCC">table</font><font color="#E5E5E5"> is anything so a table</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> can't be</font>

428
00:16:43,999 --> 00:16:48,170
an array<font color="#E5E5E5"> it can be in dictionary and be</font>

429
00:16:46,220 --> 00:16:50,180
a struct<font color="#E5E5E5"> can be an</font><font color="#CCCCCC"> object you give me a</font>

430
00:16:48,170 --> 00:16:51,889
dictionary mapping objects<font color="#E5E5E5"> to strings or</font>

431
00:16:50,180 --> 00:16:54,170
arrays depending on whether the field of

432
00:16:51,889 --> 00:16:56,779
the key object is true or<font color="#E5E5E5"> false</font><font color="#CCCCCC"> you know</font>

433
00:16:54,170 --> 00:16:58,610
<font color="#E5E5E5">and without realizing you start creating</font>

434
00:16:56,779 --> 00:16:59,809
<font color="#E5E5E5">the super complex types you know you can</font>

435
00:16:58,610 --> 00:17:02,769
you<font color="#CCCCCC"> start creating those super complex</font>

436
00:16:59,809 --> 00:17:05,240
structures that if you were to type them

437
00:17:02,769 --> 00:17:08,599
those would<font color="#CCCCCC"> be the types</font><font color="#E5E5E5"> that they would</font>

438
00:17:05,240 --> 00:17:10,730
<font color="#E5E5E5">have to have so it comes to</font><font color="#CCCCCC"> a matter</font><font color="#E5E5E5"> of</font>

439
00:17:08,599 --> 00:17:12,139
expressiveness<font color="#CCCCCC"> right and what I mean</font>

440
00:17:10,730 --> 00:17:13,880
<font color="#E5E5E5">like expressiveness in a programming</font>

441
00:17:12,140 --> 00:17:15,679
<font color="#CCCCCC">language like how expressible it is</font><font color="#E5E5E5"> I</font>

442
00:17:13,880 --> 00:17:17,149
don't<font color="#E5E5E5"> I don't mean like really what</font>

443
00:17:15,679 --> 00:17:18,890
language can<font color="#CCCCCC"> express because</font><font color="#E5E5E5"> you know</font>

444
00:17:17,148 --> 00:17:20,599
kind of<font color="#CCCCCC"> but turing completeness you know</font>

445
00:17:18,890 --> 00:17:22,939
that's<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> they're all the same blah blah</font>

446
00:17:20,599 --> 00:17:26,958
blah but really it's like<font color="#E5E5E5"> how</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> you</font>

447
00:17:22,939 --> 00:17:28,159
express it right so in<font color="#CCCCCC"> that time in</font><font color="#E5E5E5"> that</font>

448
00:17:26,959 --> 00:17:29,510
sense<font color="#CCCCCC"> the dynamically typed language is</font>

449
00:17:28,159 --> 00:17:30,919
super expressive<font color="#E5E5E5"> but it's super</font>

450
00:17:29,510 --> 00:17:32,539
expressed in the same way that a blank

451
00:17:30,919 --> 00:17:34,010
sheet of<font color="#E5E5E5"> paper is now the paper accepts</font>

452
00:17:32,539 --> 00:17:35,840
<font color="#E5E5E5">everything you know the dynamically</font>

453
00:17:34,010 --> 00:17:38,450
typed language accepts everything<font color="#E5E5E5"> and</font>

454
00:17:35,840 --> 00:17:41,899
well it<font color="#E5E5E5"> goes boom and you know if you do</font>

455
00:17:38,450 --> 00:17:43,279
<font color="#CCCCCC">something wrong that Bron time all the</font>

456
00:17:41,899 --> 00:17:44,899
other<font color="#E5E5E5"> hand the type checker works both</font>

457
00:17:43,279 --> 00:17:46,880
for<font color="#E5E5E5"> good like oh thank you for catching</font>

458
00:17:44,899 --> 00:17:48,799
my silly<font color="#CCCCCC"> typos</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> bad like and you</font>

459
00:17:46,880 --> 00:17:49,970
know like<font color="#E5E5E5"> I</font><font color="#CCCCCC"> know that</font><font color="#E5E5E5"> this use of the</font>

460
00:17:48,799 --> 00:17:53,870
variable<font color="#CCCCCC"> is safe here why are you</font>

461
00:17:49,970 --> 00:17:55,370
<font color="#CCCCCC">complaining about</font><font color="#E5E5E5"> this right so</font>

462
00:17:53,870 --> 00:17:56,899
<font color="#E5E5E5">essentially the expressiveness is like</font>

463
00:17:55,370 --> 00:18:00,860
the feel of a language like<font color="#CCCCCC"> regardless</font>

464
00:17:56,899 --> 00:18:02,209
of the look right<font color="#E5E5E5"> so and in Lua you can</font>

465
00:18:00,860 --> 00:18:06,020
have something<font color="#E5E5E5"> like this like a table</font>

466
00:18:02,210 --> 00:18:08,149
that stores like named fields<font color="#E5E5E5"> like and</font>

467
00:18:06,020 --> 00:18:10,850
<font color="#E5E5E5">also serve as an array like</font><font color="#CCCCCC"> two like</font>

468
00:18:08,149 --> 00:18:13,070
both of<font color="#E5E5E5"> them right if I take like if I</font>

469
00:18:10,850 --> 00:18:15,139
do like<font color="#CCCCCC"> a small transpiler</font><font color="#E5E5E5"> that's like</font>

470
00:18:13,070 --> 00:18:18,529
took all of<font color="#E5E5E5"> the keywords from Java and</font>

471
00:18:15,140 --> 00:18:23,390
turn them into<font color="#CCCCCC"> Lua like it was it will</font>

472
00:18:18,529 --> 00:18:28,659
still feel<font color="#E5E5E5"> like blue all right</font>

473
00:18:23,390 --> 00:18:28,659
so<font color="#E5E5E5"> okay so I'm</font><font color="#CCCCCC"> just going to</font><font color="#E5E5E5"> jump ahead</font>

474
00:18:28,670 --> 00:18:35,520
<font color="#CCCCCC">just going so here for the final section</font>

475
00:18:33,720 --> 00:18:36,630
like<font color="#CCCCCC"> hope so in the</font><font color="#E5E5E5"> end like how much of</font>

476
00:18:35,520 --> 00:18:38,220
the language<font color="#E5E5E5"> do</font><font color="#CCCCCC"> you change like do you</font>

477
00:18:36,630 --> 00:18:40,590
make this illegal because<font color="#E5E5E5"> like it's</font>

478
00:18:38,220 --> 00:18:41,820
either a map or an array right<font color="#E5E5E5"> because</font>

479
00:18:40,590 --> 00:18:43,169
you<font color="#E5E5E5"> could you can still</font><font color="#CCCCCC"> represent</font>

480
00:18:41,820 --> 00:18:44,639
something<font color="#CCCCCC"> like that like</font><font color="#E5E5E5"> in Java</font><font color="#CCCCCC"> right</font>

481
00:18:43,170 --> 00:18:46,320
<font color="#CCCCCC">you just</font><font color="#E5E5E5"> make an</font><font color="#CCCCCC"> object that has</font><font color="#E5E5E5"> like</font>

482
00:18:44,640 --> 00:18:48,060
<font color="#E5E5E5">the name field and then</font><font color="#CCCCCC"> a list you</font><font color="#E5E5E5"> know</font>

483
00:18:46,320 --> 00:18:49,830
put one inside<font color="#CCCCCC"> the</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> so it's</font><font color="#E5E5E5"> like</font>

484
00:18:48,060 --> 00:18:54,540
you<font color="#E5E5E5"> have to</font><font color="#CCCCCC"> think those</font><font color="#E5E5E5"> thoughts like in</font>

485
00:18:49,830 --> 00:18:55,800
a<font color="#E5E5E5"> different way right so so the</font><font color="#CCCCCC"> the</font>

486
00:18:54,540 --> 00:18:57,780
final point is if you<font color="#E5E5E5"> want to make it</font>

487
00:18:55,800 --> 00:18:59,550
feel like<font color="#CCCCCC"> lua then the type checker is</font>

488
00:18:57,780 --> 00:19:00,720
super complex you want it feel like<font color="#CCCCCC"> 100%</font>

489
00:18:59,550 --> 00:19:02,930
<font color="#CCCCCC">like lower</font><font color="#E5E5E5"> than the type checker is</font>

490
00:19:00,720 --> 00:19:05,400
impossible<font color="#E5E5E5"> right because you end up with</font>

491
00:19:02,930 --> 00:19:06,540
<font color="#E5E5E5">undecidable things and if you want to</font>

492
00:19:05,400 --> 00:19:08,250
<font color="#CCCCCC">actually finish writing your</font><font color="#E5E5E5"> type</font>

493
00:19:06,540 --> 00:19:13,710
checker you have to make cuts<font color="#E5E5E5"> somewhere</font>

494
00:19:08,250 --> 00:19:15,890
but not<font color="#E5E5E5"> in the word somewhere so two</font>

495
00:19:13,710 --> 00:19:18,240
options on where to make your cuts

496
00:19:15,890 --> 00:19:19,830
well first you can cut on<font color="#E5E5E5"> program</font>

497
00:19:18,240 --> 00:19:21,570
expressiveness as I said like<font color="#E5E5E5"> you don't</font>

498
00:19:19,830 --> 00:19:23,189
allow them to mix an array in<font color="#E5E5E5"> the table</font>

499
00:19:21,570 --> 00:19:24,659
<font color="#E5E5E5">and say like Oh in my typed</font><font color="#CCCCCC"> version you</font>

500
00:19:23,190 --> 00:19:27,600
have to do<font color="#E5E5E5"> something like that</font><font color="#CCCCCC"> you know</font>

501
00:19:24,660 --> 00:19:29,160
items right<font color="#E5E5E5"> or and maybe say oh I cannot</font>

502
00:19:27,600 --> 00:19:30,929
<font color="#E5E5E5">make something that's like sometimes a</font>

503
00:19:29,160 --> 00:19:32,850
<font color="#E5E5E5">nil sometimes a string and a key instead</font>

504
00:19:30,930 --> 00:19:35,070
<font color="#CCCCCC">of doing return</font><font color="#E5E5E5"> X on Y and return nil</font>

505
00:19:32,850 --> 00:19:36,120
<font color="#E5E5E5">and error in the same function if I want</font>

506
00:19:35,070 --> 00:19:38,159
to use those two<font color="#E5E5E5"> things in the same</font>

507
00:19:36,120 --> 00:19:40,020
<font color="#E5E5E5">function then</font><font color="#CCCCCC"> we have to do return</font><font color="#E5E5E5"> x</font><font color="#CCCCCC"> and</font>

508
00:19:38,160 --> 00:19:42,450
y which is<font color="#CCCCCC"> always like an integer or an</font>

509
00:19:40,020 --> 00:19:44,700
optional<font color="#E5E5E5"> integer and the third one would</font>

510
00:19:42,450 --> 00:19:46,260
<font color="#CCCCCC">be like the</font><font color="#E5E5E5"> next free available entry</font>

511
00:19:44,700 --> 00:19:49,110
would have to be like the error message

512
00:19:46,260 --> 00:19:50,670
<font color="#E5E5E5">like</font><font color="#CCCCCC"> those those are simple those ones</font>

513
00:19:49,110 --> 00:19:53,550
are fixable<font color="#CCCCCC"> right but I'm just gaming</font>

514
00:19:50,670 --> 00:19:55,620
<font color="#E5E5E5">them as simple examples you know</font>

515
00:19:53,550 --> 00:19:59,490
<font color="#E5E5E5">otherwise</font><font color="#CCCCCC"> you can cut</font><font color="#E5E5E5"> on the correctness</font>

516
00:19:55,620 --> 00:20:01,739
of the type checker so you go from like

517
00:19:59,490 --> 00:20:03,810
the<font color="#E5E5E5"> promise that every problem</font><font color="#CCCCCC"> that the</font>

518
00:20:01,740 --> 00:20:06,060
type checker accepts has correct types<font color="#CCCCCC"> -</font>

519
00:20:03,810 --> 00:20:08,310
something<font color="#CCCCCC"> like oh if I complain</font><font color="#E5E5E5"> then</font>

520
00:20:06,060 --> 00:20:09,899
it's probably<font color="#CCCCCC"> like wrong</font><font color="#E5E5E5"> but if I</font><font color="#CCCCCC"> don't</font>

521
00:20:08,310 --> 00:20:12,000
you<font color="#E5E5E5"> know if I if I don't complain I'll</font>

522
00:20:09,900 --> 00:20:13,770
give you<font color="#E5E5E5"> no guarantee and still it's</font>

523
00:20:12,000 --> 00:20:16,470
<font color="#CCCCCC">hard because you made your the</font>

524
00:20:13,770 --> 00:20:17,129
equivalent logic of<font color="#CCCCCC"> your types of your</font>

525
00:20:16,470 --> 00:20:19,530
type checker

526
00:20:17,130 --> 00:20:21,450
it's an unsound logic and when you<font color="#E5E5E5"> at</font>

527
00:20:19,530 --> 00:20:23,879
once you add unsound logic you can start

528
00:20:21,450 --> 00:20:25,170
like proving absurd things and when you

529
00:20:23,880 --> 00:20:27,510
<font color="#CCCCCC">go</font><font color="#E5E5E5"> back to</font><font color="#CCCCCC"> the type checker it means</font>

530
00:20:25,170 --> 00:20:30,000
that it will<font color="#E5E5E5"> behave in very weird ways</font>

531
00:20:27,510 --> 00:20:33,510
<font color="#CCCCCC">if you're not</font><font color="#E5E5E5"> careful and probably even</font>

532
00:20:30,000 --> 00:20:35,130
<font color="#E5E5E5">if you are so the more sophisticated</font>

533
00:20:33,510 --> 00:20:38,400
type system the deep<font color="#E5E5E5"> you</font><font color="#CCCCCC"> are in research</font>

534
00:20:35,130 --> 00:20:40,620
territory everyone has felt<font color="#E5E5E5"> like who's</font>

535
00:20:38,400 --> 00:20:41,500
ever<font color="#E5E5E5"> tired try to deal with</font><font color="#CCCCCC"> that ended</font>

536
00:20:40,620 --> 00:20:44,260
<font color="#E5E5E5">up</font>

537
00:20:41,500 --> 00:20:46,830
<font color="#E5E5E5">dealing with this so is that all lost</font>

538
00:20:44,260 --> 00:20:50,049
<font color="#E5E5E5">like in the final minutes here</font>

539
00:20:46,830 --> 00:20:52,539
well<font color="#E5E5E5"> typescript has proven to be like a</font>

540
00:20:50,049 --> 00:20:54,789
<font color="#E5E5E5">successful like attempt in the industry</font>

541
00:20:52,539 --> 00:20:56,559
<font color="#CCCCCC">I'm doing that</font><font color="#E5E5E5"> and essentially their</font>

542
00:20:54,789 --> 00:20:59,230
choice<font color="#E5E5E5"> was to go for usability above all</font>

543
00:20:56,559 --> 00:21:01,990
else<font color="#E5E5E5"> it means that the type system is</font>

544
00:20:59,230 --> 00:21:04,990
intentionally unsound<font color="#CCCCCC"> and this is not</font>

545
00:21:01,990 --> 00:21:07,419
<font color="#E5E5E5">just a</font><font color="#CCCCCC"> technical thing if you go there</font>

546
00:21:04,990 --> 00:21:08,860
to<font color="#CCCCCC"> their bug tracker</font><font color="#E5E5E5"> there's lots of</font>

547
00:21:07,419 --> 00:21:10,360
bugs<font color="#E5E5E5"> that are close it by design by</font>

548
00:21:08,860 --> 00:21:14,678
design by design it's not<font color="#E5E5E5"> meant to</font>

549
00:21:10,360 --> 00:21:17,399
<font color="#E5E5E5">detect that failure right so what about</font>

550
00:21:14,679 --> 00:21:21,610
Lua<font color="#CCCCCC"> I probably have like 30 seconds</font><font color="#E5E5E5"> and</font>

551
00:21:17,400 --> 00:21:23,080
<font color="#E5E5E5">just to give a glimpse of hope well I've</font>

552
00:21:21,610 --> 00:21:25,000
<font color="#E5E5E5">been working</font><font color="#CCCCCC"> on exploring</font><font color="#E5E5E5"> this design</font>

553
00:21:23,080 --> 00:21:27,189
space and<font color="#E5E5E5"> playing with</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> so I decided</font>

554
00:21:25,000 --> 00:21:29,140
<font color="#CCCCCC">to try</font><font color="#E5E5E5"> to write a minimalistic type</font>

555
00:21:27,190 --> 00:21:30,640
checker love Lua<font color="#CCCCCC"> in Lua but just like</font>

556
00:21:29,140 --> 00:21:32,710
what's the minimum set<font color="#CCCCCC"> of features so</font>

557
00:21:30,640 --> 00:21:34,000
<font color="#CCCCCC">that it could type check itself</font><font color="#E5E5E5"> that</font>

558
00:21:32,710 --> 00:21:37,690
will be like enough to be<font color="#E5E5E5"> like a real</font>

559
00:21:34,000 --> 00:21:39,250
program and not there yet<font color="#E5E5E5"> well when I</font>

560
00:21:37,690 --> 00:21:41,880
try<font color="#E5E5E5"> to run it like</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> itself it</font>

561
00:21:39,250 --> 00:21:45,429
currently feels with 384 type errors<font color="#CCCCCC"> a</font>

562
00:21:41,880 --> 00:21:48,880
week<font color="#CCCCCC"> ago it was a lot more so</font><font color="#E5E5E5"> that's</font>

563
00:21:45,429 --> 00:21:50,260
progress<font color="#E5E5E5"> the thing is that once you</font>

564
00:21:48,880 --> 00:21:52,330
start fixing it like you<font color="#CCCCCC"> fix one thing</font>

565
00:21:50,260 --> 00:21:54,490
<font color="#E5E5E5">that fixes 100 errors and but now it's</font>

566
00:21:52,330 --> 00:21:58,389
<font color="#E5E5E5">like you know it's</font><font color="#CCCCCC"> like Achilles in the</font>

567
00:21:54,490 --> 00:22:00,929
turtle but yeah the idea<font color="#CCCCCC"> is</font><font color="#E5E5E5"> to do</font>

568
00:21:58,390 --> 00:22:03,130
something<font color="#CCCCCC"> Lua like it's here because</font>

569
00:22:00,929 --> 00:22:04,480
<font color="#CCCCCC">even if then though it's not finished</font><font color="#E5E5E5"> it</font>

570
00:22:03,130 --> 00:22:05,980
wouldn't be<font color="#CCCCCC"> fossum if you know I'll talk</font>

571
00:22:04,480 --> 00:22:09,100
<font color="#CCCCCC">about code and it's not open source</font>

572
00:22:05,980 --> 00:22:11,200
so<font color="#E5E5E5"> in closing yeah the story will</font>

573
00:22:09,100 --> 00:22:22,339
continue<font color="#E5E5E5"> and thank you</font>

574
00:22:11,200 --> 00:22:22,339
[Applause]

