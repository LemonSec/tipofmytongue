1
00:00:26,580 --> 00:00:31,320
can you hear<font color="#E5E5E5"> enough okay good so let's</font>

2
00:00:29,910 --> 00:00:33,090
get<font color="#E5E5E5"> going</font>

3
00:00:31,320 --> 00:00:37,020
I'm trying I will try to explain

4
00:00:33,090 --> 00:00:41,610
<font color="#E5E5E5">something very complex in only 20</font>

5
00:00:37,020 --> 00:00:44,040
minutes<font color="#CCCCCC"> oh well that's not waste time so</font>

6
00:00:41,610 --> 00:00:48,150
first of all this talk is not<font color="#CCCCCC"> gonna be</font>

7
00:00:44,040 --> 00:00:50,730
about the<font color="#E5E5E5"> near acoustics that you can</font>

8
00:00:48,150 --> 00:00:53,900
achieve<font color="#CCCCCC"> by optimizing your</font><font color="#E5E5E5"> server</font>

9
00:00:50,730 --> 00:00:57,480
installation it's not about<font color="#E5E5E5"> extracting</font>

10
00:00:53,900 --> 00:00:59,910
<font color="#E5E5E5">extra transactions or extra</font><font color="#CCCCCC"> speech or</font>

11
00:00:57,480 --> 00:01:03,449
<font color="#E5E5E5">anything like that</font><font color="#CCCCCC"> it's basically just</font>

12
00:00:59,910 --> 00:01:07,410
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to pop up the hood and</font><font color="#E5E5E5"> well look</font>

13
00:01:03,450 --> 00:01:11,240
inside the<font color="#CCCCCC"> engine</font><font color="#E5E5E5"> that mascius so this</font>

14
00:01:07,410 --> 00:01:15,300
is why<font color="#E5E5E5"> I chosen this background here</font><font color="#CCCCCC"> a</font>

15
00:01:11,240 --> 00:01:17,310
little<font color="#CCCCCC"> bit about me</font><font color="#E5E5E5"> so I have been well</font>

16
00:01:15,300 --> 00:01:20,460
with this<font color="#E5E5E5"> community forever</font><font color="#CCCCCC"> really</font>

17
00:01:17,310 --> 00:01:23,369
grateful<font color="#CCCCCC"> about it I</font><font color="#E5E5E5"> it's been</font><font color="#CCCCCC"> a</font>

18
00:01:20,460 --> 00:01:27,350
life-changing event<font color="#CCCCCC"> for me</font><font color="#E5E5E5"> I lead a team</font>

19
00:01:23,369 --> 00:01:30,720
<font color="#E5E5E5">of silver developers in the MySQL</font>

20
00:01:27,350 --> 00:01:32,910
development team at Oracle we

21
00:01:30,720 --> 00:01:35,160
specialized in security client-server

22
00:01:32,910 --> 00:01:36,929
protocol performance monitoring can

23
00:01:35,160 --> 00:01:39,780
<font color="#CCCCCC">command the component infrastructure</font>

24
00:01:36,929 --> 00:01:44,119
that<font color="#E5E5E5"> I'm going to talk about and from</font>

25
00:01:39,780 --> 00:01:48,350
Bulgaria and I like<font color="#E5E5E5"> working from home as</font>

26
00:01:44,119 --> 00:01:53,640
magical culture is so<font color="#E5E5E5"> that's about me</font>

27
00:01:48,350 --> 00:01:56,369
<font color="#CCCCCC">okay so</font><font color="#E5E5E5"> our agenda</font><font color="#CCCCCC"> first of all the</font>

28
00:01:53,640 --> 00:02:00,929
reasonable question why do we need

29
00:01:56,369 --> 00:02:04,950
another infrastructure<font color="#E5E5E5"> inside the server</font>

30
00:02:00,929 --> 00:02:07,380
<font color="#E5E5E5">we already have the plugins so why then</font>

31
00:02:04,950 --> 00:02:10,410
I'm gonna go over<font color="#CCCCCC"> the architecture so</font>

32
00:02:07,380 --> 00:02:13,319
basically how we are trying<font color="#E5E5E5"> to address</font>

33
00:02:10,410 --> 00:02:16,500
<font color="#E5E5E5">the why question and then I'll do the</font>

34
00:02:13,319 --> 00:02:19,399
inventory basically what services<font color="#CCCCCC"> and</font>

35
00:02:16,500 --> 00:02:23,160
what interfaces do we have added to that

36
00:02:19,400 --> 00:02:26,190
infrastructure<font color="#E5E5E5"> and then I'll try to</font>

37
00:02:23,160 --> 00:02:28,560
explain<font color="#CCCCCC"> how to</font><font color="#E5E5E5"> write your own component</font>

38
00:02:26,190 --> 00:02:31,410
and how to route your own service and

39
00:02:28,560 --> 00:02:34,920
some tips and tricks<font color="#E5E5E5"> in doing that</font>

40
00:02:31,410 --> 00:02:36,530
and to honor the place that we<font color="#CCCCCC"> are in</font>

41
00:02:34,920 --> 00:02:40,000
right<font color="#CCCCCC"> now</font>

42
00:02:36,530 --> 00:02:44,060
also gonna give you some homework<font color="#CCCCCC"> so</font>

43
00:02:40,000 --> 00:02:46,220
whenever you<font color="#CCCCCC"> see this picture</font><font color="#E5E5E5"> on the end</font>

44
00:02:44,060 --> 00:02:48,590
of the slide<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is for you to</font>

45
00:02:46,220 --> 00:02:51,830
<font color="#E5E5E5">basically read through and understand I</font>

46
00:02:48,590 --> 00:02:54,650
<font color="#E5E5E5">won't really have I wouldn't have the</font>

47
00:02:51,830 --> 00:02:56,630
time<font color="#E5E5E5"> to explain that in</font><font color="#CCCCCC"> detail but</font><font color="#E5E5E5"> I</font>

48
00:02:54,650 --> 00:02:59,780
think that the examples are pretty

49
00:02:56,630 --> 00:03:02,810
<font color="#E5E5E5">self-explanatory so please</font><font color="#CCCCCC"> the slides</font>

50
00:02:59,780 --> 00:03:06,560
are<font color="#E5E5E5"> gonna be on the</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> stem site and</font>

51
00:03:02,810 --> 00:03:09,410
also<font color="#E5E5E5"> on</font><font color="#CCCCCC"> my side chair</font><font color="#E5E5E5"> so please go over</font>

52
00:03:06,560 --> 00:03:12,440
<font color="#E5E5E5">this more concrete examples I wanna I</font>

53
00:03:09,410 --> 00:03:14,840
don't<font color="#CCCCCC"> have the</font><font color="#E5E5E5"> time to go over</font><font color="#CCCCCC"> the bits</font>

54
00:03:12,440 --> 00:03:20,180
and bytes and the commas and semicolons

55
00:03:14,840 --> 00:03:26,750
and all of that<font color="#CCCCCC"> okay so the big question</font>

56
00:03:20,180 --> 00:03:30,860
here<font color="#CCCCCC"> why</font><font color="#E5E5E5"> it's a historical</font><font color="#CCCCCC"> question so</font>

57
00:03:26,750 --> 00:03:33,350
we have this great infrastructure called

58
00:03:30,860 --> 00:03:36,470
<font color="#E5E5E5">plug</font><font color="#CCCCCC"> in infrastructure</font><font color="#E5E5E5"> it's sustained</font>

59
00:03:33,350 --> 00:03:39,170
Maskell through its initial phases<font color="#E5E5E5"> and</font>

60
00:03:36,470 --> 00:03:42,650
<font color="#CCCCCC">its really</font><font color="#E5E5E5"> great and very convenient and</font>

61
00:03:39,170 --> 00:03:45,260
<font color="#E5E5E5">very simple the problem is that we've</font>

62
00:03:42,650 --> 00:03:48,769
accumulated some scenes<font color="#E5E5E5"> some technical</font>

63
00:03:45,260 --> 00:03:51,260
depth<font color="#E5E5E5"> basically plugins are not</font>

64
00:03:48,769 --> 00:03:53,840
respecting the<font color="#E5E5E5"> infrastructure and that</font>

65
00:03:51,260 --> 00:03:56,929
was all<font color="#E5E5E5"> done well in the main of</font>

66
00:03:53,840 --> 00:03:59,530
achieving<font color="#CCCCCC"> goals faster and well</font>

67
00:03:56,930 --> 00:04:04,549
basically<font color="#E5E5E5"> delivering a product really</font>

68
00:03:59,530 --> 00:04:06,590
<font color="#E5E5E5">also I think that over the years the</font>

69
00:04:04,549 --> 00:04:09,019
<font color="#CCCCCC">plug-in infrastructure</font><font color="#E5E5E5"> became very</font>

70
00:04:06,590 --> 00:04:11,989
complex<font color="#E5E5E5"> because well when you have a</font>

71
00:04:09,019 --> 00:04:14,060
hammer everything<font color="#E5E5E5"> looks like a nail so</font>

72
00:04:11,989 --> 00:04:17,030
you want to come in<font color="#E5E5E5"> and hammer out</font>

73
00:04:14,060 --> 00:04:20,630
basically<font color="#CCCCCC"> and it doesn't really</font><font color="#E5E5E5"> work</font>

74
00:04:17,029 --> 00:04:23,150
<font color="#E5E5E5">like that with code so the plug-in</font>

75
00:04:20,630 --> 00:04:25,969
infrastructure over<font color="#E5E5E5"> the years</font><font color="#CCCCCC"> acquired</font>

76
00:04:23,150 --> 00:04:28,429
some properties that<font color="#CCCCCC"> are</font><font color="#E5E5E5"> not really</font>

77
00:04:25,970 --> 00:04:30,950
<font color="#E5E5E5">belonging to it to the core</font>

78
00:04:28,430 --> 00:04:34,430
infrastructure really<font color="#E5E5E5"> so I taught by</font>

79
00:04:30,950 --> 00:04:38,900
just well starting clean I<font color="#E5E5E5"> can avoid</font>

80
00:04:34,430 --> 00:04:42,020
those<font color="#CCCCCC"> mistakes and create a better layer</font>

81
00:04:38,900 --> 00:04:45,169
and a better grouping and<font color="#CCCCCC"> a better code</font>

82
00:04:42,020 --> 00:04:47,080
division<font color="#CCCCCC"> so that's one of</font><font color="#E5E5E5"> the important</font>

83
00:04:45,169 --> 00:04:50,260
<font color="#CCCCCC">reasons</font>

84
00:04:47,080 --> 00:04:52,479
that same better<font color="#E5E5E5"> coat isolation and</font>

85
00:04:50,260 --> 00:04:53,140
encapsulation<font color="#CCCCCC"> I know that's the holy</font>

86
00:04:52,480 --> 00:04:57,940
grail<font color="#CCCCCC"> of</font>

87
00:04:53,140 --> 00:05:00,969
complex called development<font color="#E5E5E5"> but well we</font>

88
00:04:57,940 --> 00:05:05,440
should still strive to it another good

89
00:05:00,970 --> 00:05:08,320
<font color="#E5E5E5">thing is</font><font color="#CCCCCC"> that right</font><font color="#E5E5E5"> now plugins cannot</font>

90
00:05:05,440 --> 00:05:11,560
really call each<font color="#E5E5E5"> other and that's mostly</font>

91
00:05:08,320 --> 00:05:14,020
because we don't have<font color="#E5E5E5"> the notion of</font>

92
00:05:11,560 --> 00:05:16,000
dependencies between individual<font color="#E5E5E5"> plugins</font>

93
00:05:14,020 --> 00:05:20,169
we don't know it'll clog in a depends on

94
00:05:16,000 --> 00:05:25,300
a<font color="#CCCCCC"> plug-in B and that the infrastructure</font>

95
00:05:20,170 --> 00:05:28,270
<font color="#E5E5E5">here is trying to</font><font color="#CCCCCC"> fix it all so all</font>

96
00:05:25,300 --> 00:05:30,580
components are<font color="#E5E5E5"> EQ</font><font color="#CCCCCC"> they can call each</font>

97
00:05:28,270 --> 00:05:33,909
other and<font color="#CCCCCC"> they can</font><font color="#E5E5E5"> be called</font><font color="#CCCCCC"> from all</font>

98
00:05:30,580 --> 00:05:37,000
other<font color="#CCCCCC"> components so there is no central</font>

99
00:05:33,910 --> 00:05:39,190
place of<font color="#CCCCCC"> an arbiter that</font><font color="#E5E5E5"> currently the</font>

100
00:05:37,000 --> 00:05:40,990
masker server<font color="#CCCCCC"> has four</font><font color="#E5E5E5"> plugins it's</font>

101
00:05:39,190 --> 00:05:44,320
always<font color="#CCCCCC"> plugins talk to the server and</font>

102
00:05:40,990 --> 00:05:46,210
then<font color="#E5E5E5"> the server</font><font color="#CCCCCC"> talk back</font><font color="#E5E5E5"> never plugins</font>

103
00:05:44,320 --> 00:05:52,480
talking to each other directly which is

104
00:05:46,210 --> 00:05:54,870
<font color="#E5E5E5">a limitation</font><font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> now how do we</font><font color="#CCCCCC"> wanna</font>

105
00:05:52,480 --> 00:05:58,620
<font color="#E5E5E5">solve that</font>

106
00:05:54,870 --> 00:06:01,210
that's<font color="#E5E5E5"> a tour of history of masks you</font>

107
00:05:58,620 --> 00:06:03,580
componentization code by the<font color="#E5E5E5"> way so it</font>

108
00:06:01,210 --> 00:06:05,650
all started<font color="#E5E5E5"> with this well big blob of</font>

109
00:06:03,580 --> 00:06:10,630
code which is<font color="#E5E5E5"> the silver binary which</font>

110
00:06:05,650 --> 00:06:13,320
has functionality<font color="#E5E5E5"> later</font><font color="#CCCCCC"> people realized</font>

111
00:06:10,630 --> 00:06:17,530
<font color="#CCCCCC">that they wanna be</font><font color="#E5E5E5"> adding code a</font><font color="#CCCCCC"> bit</font>

112
00:06:13,320 --> 00:06:19,750
simpler so plugins appeared and server

113
00:06:17,530 --> 00:06:22,599
uses<font color="#E5E5E5"> plug-in api's to call the plugins</font>

114
00:06:19,750 --> 00:06:25,000
and any plugins use plug-in services to

115
00:06:22,600 --> 00:06:34,810
talk back to<font color="#E5E5E5"> the server</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> that's</font>

116
00:06:25,000 --> 00:06:37,960
pretty<font color="#E5E5E5"> much</font><font color="#CCCCCC"> sheets until 5h okay so we</font>

117
00:06:34,810 --> 00:06:41,980
there are<font color="#CCCCCC"> there were ideas on how to</font>

118
00:06:37,960 --> 00:06:44,739
<font color="#E5E5E5">make this thing better but we decided</font><font color="#CCCCCC"> to</font>

119
00:06:41,980 --> 00:06:48,970
<font color="#E5E5E5">start afresh</font><font color="#CCCCCC"> so in night 0 we added this</font>

120
00:06:44,740 --> 00:06:52,750
<font color="#E5E5E5">minimal chassis thing which is basically</font>

121
00:06:48,970 --> 00:06:54,850
a list of service implementations and

122
00:06:52,750 --> 00:06:55,370
also<font color="#E5E5E5"> a dynamic loader</font><font color="#CCCCCC"> that loads a</font>

123
00:06:54,850 --> 00:07:01,880
non-law

124
00:06:55,370 --> 00:07:06,530
components from from the<font color="#CCCCCC"> server memory</font>

125
00:07:01,880 --> 00:07:09,560
space basically<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> obviously this is</font>

126
00:07:06,530 --> 00:07:11,479
<font color="#CCCCCC">not enough because this dynamic load</font>

127
00:07:09,560 --> 00:07:14,000
<font color="#E5E5E5">that is not a persistent thing it does</font>

128
00:07:11,479 --> 00:07:16,789
not track which components are loaded<font color="#E5E5E5"> it</font>

129
00:07:14,000 --> 00:07:20,000
just loads analog components so we<font color="#CCCCCC"> have</font>

130
00:07:16,790 --> 00:07:22,610
it some glue<font color="#CCCCCC"> coat which is</font><font color="#E5E5E5"> basically the</font>

131
00:07:20,000 --> 00:07:24,740
persistent dynamic loader<font color="#CCCCCC"> this is a</font>

132
00:07:22,610 --> 00:07:28,550
layer on<font color="#CCCCCC"> top of the dynamic loader that</font>

133
00:07:24,740 --> 00:07:31,460
implements the persistency part using<font color="#E5E5E5"> a</font>

134
00:07:28,550 --> 00:07:34,070
mask you silver table<font color="#E5E5E5"> basically the mask</font>

135
00:07:31,460 --> 00:07:39,049
<font color="#CCCCCC">yo</font><font color="#E5E5E5"> components table and we also</font>

136
00:07:34,070 --> 00:07:42,520
<font color="#E5E5E5">implemented a file scheme</font><font color="#CCCCCC"> handler</font><font color="#E5E5E5"> which</font>

137
00:07:39,050 --> 00:07:46,070
allows the persistent loader to load

138
00:07:42,520 --> 00:07:49,310
components from files executable files

139
00:07:46,070 --> 00:07:51,080
and this<font color="#E5E5E5"> is inside the server</font>

140
00:07:49,310 --> 00:07:54,050
functionality it's out<font color="#CCCCCC"> of the mini</font>

141
00:07:51,080 --> 00:07:57,500
<font color="#CCCCCC">motion so that's important why we have</font>

142
00:07:54,050 --> 00:08:00,530
<font color="#E5E5E5">these</font><font color="#CCCCCC"> extra layers and this all</font><font color="#E5E5E5"> is</font>

143
00:07:57,500 --> 00:08:04,430
<font color="#CCCCCC">scoped</font><font color="#E5E5E5"> the server component currently so</font>

144
00:08:00,530 --> 00:08:08,090
we<font color="#E5E5E5"> won't thought we should start with</font>

145
00:08:04,430 --> 00:08:11,330
this basic component and enclose all of

146
00:08:08,090 --> 00:08:13,250
the current server functionality right

147
00:08:11,330 --> 00:08:16,120
so now the server functionality can

148
00:08:13,250 --> 00:08:20,720
consult<font color="#E5E5E5"> the registry</font><font color="#CCCCCC"> then if it needs</font>

149
00:08:16,120 --> 00:08:25,099
<font color="#CCCCCC">both certain functionalities and use</font>

150
00:08:20,720 --> 00:08:27,349
those<font color="#E5E5E5"> the</font><font color="#CCCCCC"> problem is that this is part</font>

151
00:08:25,099 --> 00:08:30,229
of the technical<font color="#E5E5E5"> depth the plugins can</font>

152
00:08:27,349 --> 00:08:32,539
also do that directly<font color="#CCCCCC"> because they care</font>

153
00:08:30,229 --> 00:08:37,279
<font color="#CCCCCC">for the symbols in</font><font color="#E5E5E5"> the in the server</font>

154
00:08:32,539 --> 00:08:40,279
binary<font color="#E5E5E5"> available today to them so in an</font>

155
00:08:37,279 --> 00:08:42,500
attempt to prevent<font color="#E5E5E5"> that extra</font>

156
00:08:40,279 --> 00:08:45,589
acquisition of technical depth I've

157
00:08:42,500 --> 00:08:49,550
created this<font color="#E5E5E5"> plug-in service which</font>

158
00:08:45,589 --> 00:08:51,890
allows<font color="#CCCCCC"> plug-ins to access the data in</font>

159
00:08:49,550 --> 00:08:55,420
the registry and<font color="#CCCCCC"> the implementations in</font>

160
00:08:51,890 --> 00:08:58,360
the registry<font color="#CCCCCC"> the idea being that</font>

161
00:08:55,420 --> 00:09:00,699
one could used up<font color="#E5E5E5"> to as a gradual</font>

162
00:08:58,360 --> 00:09:03,850
migration device from plugins<font color="#CCCCCC"> to</font>

163
00:09:00,700 --> 00:09:06,760
<font color="#CCCCCC">component infrastructure so if you have</font>

164
00:09:03,850 --> 00:09:08,890
existing<font color="#E5E5E5"> plugins you can</font><font color="#CCCCCC"> gradually start</font>

165
00:09:06,760 --> 00:09:13,480
start moving towards components like

166
00:09:08,890 --> 00:09:15,819
that okay<font color="#E5E5E5"> and obviously</font><font color="#CCCCCC"> the whole deal</font>

167
00:09:13,480 --> 00:09:18,519
is<font color="#CCCCCC"> adding</font><font color="#E5E5E5"> new components which are</font>

168
00:09:15,820 --> 00:09:21,310
<font color="#E5E5E5">outside of the server component and they</font>

169
00:09:18,519 --> 00:09:24,670
are independent<font color="#CCCCCC"> so unlike plugins those</font>

170
00:09:21,310 --> 00:09:27,729
do not<font color="#E5E5E5"> have</font><font color="#CCCCCC"> access to the</font><font color="#E5E5E5"> server binary</font>

171
00:09:24,670 --> 00:09:30,910
and all of its<font color="#CCCCCC"> single so they are</font><font color="#E5E5E5"> forced</font>

172
00:09:27,730 --> 00:09:34,570
into using the the registry and whatever

173
00:09:30,910 --> 00:09:37,569
services are registered<font color="#E5E5E5"> into it and they</font>

174
00:09:34,570 --> 00:09:41,070
can carry extra<font color="#E5E5E5"> service implementations</font>

175
00:09:37,570 --> 00:09:43,839
and<font color="#E5E5E5"> register those in the registry and</font>

176
00:09:41,070 --> 00:09:47,920
<font color="#E5E5E5">because it's all in the registry now</font>

177
00:09:43,839 --> 00:09:50,260
pretty<font color="#CCCCCC"> much everybody can call everybody</font>

178
00:09:47,920 --> 00:09:52,689
<font color="#E5E5E5">they all have access to the registry</font>

179
00:09:50,260 --> 00:09:54,329
they they have access<font color="#CCCCCC"> to</font><font color="#E5E5E5"> all the service</font>

180
00:09:52,690 --> 00:09:58,300
implementation

181
00:09:54,329 --> 00:10:02,140
defined in it so basically<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> how</font>

182
00:09:58,300 --> 00:10:04,479
<font color="#CCCCCC">they quality of the</font><font color="#E5E5E5"> components is</font>

183
00:10:02,140 --> 00:10:08,160
achieved<font color="#CCCCCC"> they all</font><font color="#E5E5E5"> just talk to the</font>

184
00:10:04,480 --> 00:10:08,160
registry<font color="#E5E5E5"> that's the idea</font><font color="#CCCCCC"> okay</font>

185
00:10:09,399 --> 00:10:17,140
so some terminology here so I have<font color="#E5E5E5"> I</font>

186
00:10:14,680 --> 00:10:19,750
mentioned<font color="#E5E5E5"> the dynamic loader it loads</font>

187
00:10:17,140 --> 00:10:22,300
and unloads components so basically that

188
00:10:19,750 --> 00:10:24,550
part<font color="#E5E5E5"> so these yellow things are the</font>

189
00:10:22,300 --> 00:10:28,149
<font color="#CCCCCC">directions and</font><font color="#E5E5E5"> these other things are</font>

190
00:10:24,550 --> 00:10:30,819
<font color="#E5E5E5">the object it all it starts with the SQL</font>

191
00:10:28,149 --> 00:10:33,339
<font color="#E5E5E5">command install and uninstall component</font>

192
00:10:30,820 --> 00:10:36,970
which basically instructs the persistent

193
00:10:33,339 --> 00:10:39,990
dynamic loader<font color="#E5E5E5"> which encapsulates the</font>

194
00:10:36,970 --> 00:10:44,800
actual dynamic<font color="#CCCCCC"> loader to load and unload</font>

195
00:10:39,990 --> 00:10:47,230
components from<font color="#E5E5E5"> the server from the</font>

196
00:10:44,800 --> 00:10:49,899
<font color="#E5E5E5">server into the server</font><font color="#CCCCCC"> processor out of</font>

197
00:10:47,230 --> 00:10:53,079
it<font color="#E5E5E5"> so what's a component a component</font>

198
00:10:49,899 --> 00:10:57,730
contains code that's the defining

199
00:10:53,079 --> 00:11:00,160
characteristics of it<font color="#E5E5E5"> and this code is</font>

200
00:10:57,730 --> 00:11:03,899
usually<font color="#CCCCCC"> a part of it is service</font>

201
00:11:00,160 --> 00:11:07,779
implementations which implement certain

202
00:11:03,899 --> 00:11:10,959
<font color="#E5E5E5">abstract</font><font color="#CCCCCC"> api's like service we call</font>

203
00:11:07,779 --> 00:11:15,550
<font color="#CCCCCC">this component services</font><font color="#E5E5E5"> and these</font>

204
00:11:10,959 --> 00:11:18,430
<font color="#E5E5E5">services can be a number of</font><font color="#CCCCCC"> things I'll</font>

205
00:11:15,550 --> 00:11:20,229
<font color="#E5E5E5">show you the the inventory later but</font>

206
00:11:18,430 --> 00:11:23,199
these are basically<font color="#CCCCCC"> just</font><font color="#E5E5E5"> abstract</font>

207
00:11:20,230 --> 00:11:25,689
<font color="#E5E5E5">contracts between the consumers from</font>

208
00:11:23,199 --> 00:11:27,339
<font color="#E5E5E5">ssin</font><font color="#CCCCCC"> allottee and the producers of</font>

209
00:11:25,689 --> 00:11:31,089
functionality<font color="#E5E5E5"> of providers of</font>

210
00:11:27,339 --> 00:11:33,279
functionality<font color="#E5E5E5"> and these service</font>

211
00:11:31,089 --> 00:11:37,660
implementations are registered into the

212
00:11:33,279 --> 00:11:40,449
registry<font color="#CCCCCC"> so the components</font><font color="#E5E5E5"> can basically</font>

213
00:11:37,660 --> 00:11:44,050
fetch references from<font color="#E5E5E5"> the registry to</font>

214
00:11:40,449 --> 00:11:45,939
these implementations<font color="#E5E5E5"> either from their</font>

215
00:11:44,050 --> 00:11:50,410
own component or from other<font color="#E5E5E5"> components</font>

216
00:11:45,939 --> 00:11:55,779
<font color="#CCCCCC">so that's pretty much</font><font color="#E5E5E5"> the terminology</font>

217
00:11:50,410 --> 00:11:59,559
<font color="#E5E5E5">behind the component services</font><font color="#CCCCCC"> okay so</font>

218
00:11:55,779 --> 00:12:00,730
now some homework<font color="#E5E5E5"> slides</font><font color="#CCCCCC"> it's it's all</font>

219
00:11:59,559 --> 00:12:06,180
written down here

220
00:12:00,730 --> 00:12:06,180
you wanna maybe<font color="#E5E5E5"> check that later</font>

221
00:12:06,220 --> 00:12:11,170
[Music]

222
00:12:07,470 --> 00:12:18,040
hey it's basically explained in a lot of

223
00:12:11,170 --> 00:12:21,459
<font color="#E5E5E5">detail right so the inventory</font><font color="#CCCCCC"> what what</font>

224
00:12:18,040 --> 00:12:23,800
is end up<font color="#E5E5E5"> infrastructure right now so we</font>

225
00:12:21,459 --> 00:12:25,809
obviously have the<font color="#E5E5E5"> registry and the</font>

226
00:12:23,800 --> 00:12:28,120
dynamic loader which are services by

227
00:12:25,809 --> 00:12:30,730
themselves<font color="#E5E5E5"> so you can access them like</font>

228
00:12:28,120 --> 00:12:35,410
that<font color="#E5E5E5"> there's also the error logging</font>

229
00:12:30,730 --> 00:12:37,720
subsystem currently Mascaro uses that

230
00:12:35,410 --> 00:12:40,389
new<font color="#E5E5E5"> infrastructure to produce it several</font>

231
00:12:37,720 --> 00:12:42,730
blocks<font color="#E5E5E5"> so you can basically have all of</font>

232
00:12:40,389 --> 00:12:45,939
your components<font color="#CCCCCC"> logging carers</font><font color="#E5E5E5"> and so on</font>

233
00:12:42,730 --> 00:12:48,639
we support<font color="#E5E5E5"> defining system variable</font>

234
00:12:45,939 --> 00:12:51,219
status variables<font color="#CCCCCC"> user-defined functions</font>

235
00:12:48,639 --> 00:12:53,170
which is quite handy<font color="#E5E5E5"> because</font><font color="#CCCCCC"> you don't</font>

236
00:12:51,220 --> 00:12:54,490
if you have<font color="#E5E5E5"> multiple user defined</font>

237
00:12:53,170 --> 00:12:57,069
functions you can have a single

238
00:12:54,490 --> 00:12:59,139
<font color="#CCCCCC">component</font><font color="#E5E5E5"> encompassing all</font><font color="#CCCCCC"> of this and</font>

239
00:12:57,069 --> 00:13:01,149
then when you<font color="#CCCCCC"> wrote the component it</font>

240
00:12:59,139 --> 00:13:05,740
would automatically register all<font color="#CCCCCC"> of the</font>

241
00:13:01,149 --> 00:13:07,809
UDS for you<font color="#CCCCCC"> so kind</font><font color="#E5E5E5"> of nice</font><font color="#CCCCCC"> performance</font>

242
00:13:05,740 --> 00:13:10,360
schema is so supported through<font color="#CCCCCC"> the</font>

243
00:13:07,809 --> 00:13:12,160
component infrastructure that's that's a

244
00:13:10,360 --> 00:13:14,589
<font color="#E5E5E5">great achievement so now you can also</font>

245
00:13:12,160 --> 00:13:18,160
instrument your code<font color="#E5E5E5"> and out your own</font>

246
00:13:14,589 --> 00:13:19,570
tables that you<font color="#E5E5E5"> wanna instrument stuff</font>

247
00:13:18,160 --> 00:13:24,050
in

248
00:13:19,570 --> 00:13:27,220
yep security context is available as a

249
00:13:24,050 --> 00:13:30,859
component service you can manipulate

250
00:13:27,220 --> 00:13:34,100
<font color="#E5E5E5">well who does your current process run</font>

251
00:13:30,860 --> 00:13:37,279
us this password validation api's<font color="#CCCCCC"> does</font>

252
00:13:34,100 --> 00:13:40,850
<font color="#E5E5E5">runtime error generation there is work</font>

253
00:13:37,279 --> 00:13:44,480
working with collated strings<font color="#E5E5E5"> inside my</font>

254
00:13:40,850 --> 00:13:46,910
<font color="#E5E5E5">skill and a lot</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> it's 92</font><font color="#CCCCCC"> service</font>

255
00:13:44,480 --> 00:13:52,070
<font color="#CCCCCC">headers so please please check check</font>

256
00:13:46,910 --> 00:13:55,670
<font color="#CCCCCC">most</font><font color="#E5E5E5"> of them so how to write your</font><font color="#CCCCCC"> own</font>

257
00:13:52,070 --> 00:13:57,980
<font color="#E5E5E5">components and services I'll give you</font>

258
00:13:55,670 --> 00:14:00,560
the<font color="#CCCCCC"> executive summary given the time</font>

259
00:13:57,980 --> 00:14:02,839
<font color="#E5E5E5">that I have so basically I have a bunch</font>

260
00:14:00,560 --> 00:14:07,518
of utility<font color="#E5E5E5"> macros if you ever written a</font>

261
00:14:02,839 --> 00:14:09,290
<font color="#CCCCCC">plugin it's not very different you can</font>

262
00:14:07,519 --> 00:14:11,690
of course copy some of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> existing</font>

263
00:14:09,290 --> 00:14:14,060
components plenty of<font color="#CCCCCC"> examples</font><font color="#E5E5E5"> specially</font>

264
00:14:11,690 --> 00:14:17,089
in the tests we<font color="#CCCCCC"> add tests for pretty</font>

265
00:14:14,060 --> 00:14:19,040
<font color="#E5E5E5">much everything that we do also copied</font>

266
00:14:17,089 --> 00:14:20,810
the existing service definitions<font color="#CCCCCC"> because</font>

267
00:14:19,040 --> 00:14:24,680
once you have your component then you

268
00:14:20,810 --> 00:14:27,260
need to have it<font color="#CCCCCC"> define certain services</font>

269
00:14:24,680 --> 00:14:30,140
that<font color="#E5E5E5"> it provides to other components</font>

270
00:14:27,260 --> 00:14:33,170
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> and there's plenty of example</font>

271
00:14:30,140 --> 00:14:36,260
<font color="#E5E5E5">for that even doxygen a section in the</font>

272
00:14:33,170 --> 00:14:41,149
documentation<font color="#E5E5E5"> so just go ahead and copy</font>

273
00:14:36,260 --> 00:14:42,949
<font color="#E5E5E5">it all and then also unlike plugins you</font>

274
00:14:41,149 --> 00:14:45,079
need to compile it using the<font color="#E5E5E5"> server</font>

275
00:14:42,949 --> 00:14:47,269
<font color="#CCCCCC">sauce</font><font color="#E5E5E5"> distribution we are not yet at the</font>

276
00:14:45,079 --> 00:14:49,729
<font color="#CCCCCC">point</font><font color="#E5E5E5"> where you would take the binary</font>

277
00:14:47,269 --> 00:14:52,070
and<font color="#E5E5E5"> compile</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> also be careful because</font>

278
00:14:49,730 --> 00:14:54,949
they run in<font color="#E5E5E5"> the system process to the</font>

279
00:14:52,070 --> 00:14:58,370
server<font color="#E5E5E5"> process and there's no boundaries</font>

280
00:14:54,949 --> 00:15:03,019
no checks and balances<font color="#E5E5E5"> so yeah apply</font>

281
00:14:58,370 --> 00:15:06,230
care<font color="#CCCCCC"> basically ok</font><font color="#E5E5E5"> some more homework</font>

282
00:15:03,019 --> 00:15:09,500
slides I am mentioning<font color="#E5E5E5"> here the</font><font color="#CCCCCC"> directed</font>

283
00:15:06,230 --> 00:15:16,519
directories I have a skeleton for for

284
00:15:09,500 --> 00:15:18,920
various things<font color="#E5E5E5"> basically yep more</font><font color="#CCCCCC"> okay</font>

285
00:15:16,519 --> 00:15:22,910
so<font color="#E5E5E5"> some tips and tricks I'll be quick</font>

286
00:15:18,920 --> 00:15:26,569
here<font color="#CCCCCC"> keep in mind that this</font><font color="#E5E5E5"> is a binary</font>

287
00:15:22,910 --> 00:15:28,060
<font color="#E5E5E5">interface so you cannot really use the</font>

288
00:15:26,569 --> 00:15:30,430
C++

289
00:15:28,060 --> 00:15:34,329
way of doing things<font color="#CCCCCC"> you need to deal</font>

290
00:15:30,430 --> 00:15:37,300
with<font color="#E5E5E5"> handles you need to call functions</font>

291
00:15:34,330 --> 00:15:39,910
for these<font color="#CCCCCC"> candles</font><font color="#E5E5E5"> to factory had to</font>

292
00:15:37,300 --> 00:15:42,760
<font color="#E5E5E5">create those to initialize those and so</font>

293
00:15:39,910 --> 00:15:45,130
on<font color="#E5E5E5"> so it's kind of a bit of</font><font color="#CCCCCC"> a different</font>

294
00:15:42,760 --> 00:15:48,490
<font color="#CCCCCC">way of thinking</font><font color="#E5E5E5"> you can achieve similar</font>

295
00:15:45,130 --> 00:15:52,990
results it's just that the<font color="#CCCCCC"> booths</font><font color="#E5E5E5"> are</font>

296
00:15:48,490 --> 00:15:55,960
different<font color="#E5E5E5"> so keep that</font><font color="#CCCCCC"> in mind so here</font>

297
00:15:52,990 --> 00:15:58,330
are<font color="#E5E5E5"> some examples of related service is</font>

298
00:15:55,960 --> 00:16:01,060
the very important concept is that

299
00:15:58,330 --> 00:16:04,630
<font color="#E5E5E5">unlike the</font><font color="#CCCCCC"> plug-in infrastructure where</font>

300
00:16:01,060 --> 00:16:10,300
you were creating<font color="#CCCCCC"> kpi's with</font><font color="#E5E5E5"> 300 methods</font>

301
00:16:04,630 --> 00:16:12,960
<font color="#E5E5E5">storage engine API ahem now you can</font><font color="#CCCCCC"> at</font>

302
00:16:10,300 --> 00:16:16,030
this atomic logically independent

303
00:16:12,960 --> 00:16:20,380
<font color="#E5E5E5">service</font><font color="#CCCCCC"> API</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> stack on top of each</font>

304
00:16:16,030 --> 00:16:22,480
other<font color="#CCCCCC"> so if you have a</font><font color="#E5E5E5"> table to drive</font>

305
00:16:20,380 --> 00:16:24,730
through<font color="#E5E5E5"> or api's you don't have to have</font>

306
00:16:22,480 --> 00:16:26,920
a<font color="#E5E5E5"> single interface driving all the</font>

307
00:16:24,730 --> 00:16:29,170
aspects of<font color="#E5E5E5"> the table you can have</font>

308
00:16:26,920 --> 00:16:31,829
<font color="#E5E5E5">multiple ones like the one that</font><font color="#CCCCCC"> just</font>

309
00:16:29,170 --> 00:16:35,140
reads the<font color="#E5E5E5"> one that updates and so on and</font>

310
00:16:31,830 --> 00:16:38,200
you don't<font color="#E5E5E5"> have to implement all of them</font>

311
00:16:35,140 --> 00:16:40,180
<font color="#E5E5E5">for tables that do not support writing</font>

312
00:16:38,200 --> 00:16:42,970
for example<font color="#CCCCCC"> and I thought that's a rough</font>

313
00:16:40,180 --> 00:16:46,180
example<font color="#CCCCCC"> ok</font>

314
00:16:42,970 --> 00:16:50,500
<font color="#E5E5E5">another important concepts this is again</font>

315
00:16:46,180 --> 00:16:54,010
on the<font color="#CCCCCC"> related services it's important</font>

316
00:16:50,500 --> 00:16:56,850
to be finding<font color="#E5E5E5"> the</font><font color="#CCCCCC"> right sets of services</font>

317
00:16:54,010 --> 00:17:00,069
<font color="#CCCCCC">because if you have</font><font color="#E5E5E5"> multiple services</font>

318
00:16:56,850 --> 00:17:01,770
<font color="#E5E5E5">operating</font><font color="#CCCCCC"> kkona on a handle then you</font>

319
00:17:00,070 --> 00:17:04,390
want to make<font color="#CCCCCC"> sure that they all</font>

320
00:17:01,770 --> 00:17:06,940
understand how<font color="#E5E5E5"> this handle does work</font>

321
00:17:04,390 --> 00:17:09,160
internally<font color="#E5E5E5"> because</font><font color="#CCCCCC"> if you get to</font>

322
00:17:06,940 --> 00:17:13,690
services from two different<font color="#E5E5E5"> components</font>

323
00:17:09,160 --> 00:17:15,700
<font color="#E5E5E5">as is</font><font color="#CCCCCC"> shown here</font><font color="#E5E5E5"> that handles from this</font>

324
00:17:13,690 --> 00:17:17,920
service produced by this service<font color="#E5E5E5"> will</font>

325
00:17:15,700 --> 00:17:21,430
obviously not work<font color="#E5E5E5"> in this</font>

326
00:17:17,920 --> 00:17:25,900
implementation so that's a that's a you

327
00:17:21,430 --> 00:17:28,030
need to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> careful</font><font color="#CCCCCC"> about that so I kept</font>

328
00:17:25,900 --> 00:17:30,250
here an<font color="#CCCCCC"> example how</font><font color="#E5E5E5"> you overload</font>

329
00:17:28,030 --> 00:17:32,920
services<font color="#E5E5E5"> basically</font>

330
00:17:30,250 --> 00:17:36,040
you use the service name<font color="#E5E5E5"> you don't use</font>

331
00:17:32,920 --> 00:17:39,330
the implementation concrete

332
00:17:36,040 --> 00:17:43,960
implementation so whenever somebody

333
00:17:39,330 --> 00:17:46,960
basically<font color="#E5E5E5"> defines the service you you</font>

334
00:17:43,960 --> 00:17:50,530
get to use<font color="#E5E5E5"> the whatever implementation</font>

335
00:17:46,960 --> 00:17:52,930
is here<font color="#CCCCCC"> but if later a new component</font>

336
00:17:50,530 --> 00:17:56,080
defines a new<font color="#CCCCCC"> implementation of that</font>

337
00:17:52,930 --> 00:18:00,370
<font color="#E5E5E5">service your code will still look the</font>

338
00:17:56,080 --> 00:18:04,020
<font color="#CCCCCC">same</font><font color="#E5E5E5"> but it will take this other new</font>

339
00:18:00,370 --> 00:18:08,290
this new implementation instead of the

340
00:18:04,020 --> 00:18:11,110
original<font color="#CCCCCC"> previously existing one</font><font color="#E5E5E5"> so</font>

341
00:18:08,290 --> 00:18:13,629
that's a great<font color="#E5E5E5"> concept it allows you to</font>

342
00:18:11,110 --> 00:18:16,870
overload an overwrite functionality

343
00:18:13,630 --> 00:18:19,960
that's even inside the server itself<font color="#E5E5E5"> if</font>

344
00:18:16,870 --> 00:18:25,830
<font color="#E5E5E5">you use components so here are some</font>

345
00:18:19,960 --> 00:18:31,660
random guidelines<font color="#E5E5E5"> please make sure you</font>

346
00:18:25,830 --> 00:18:33,550
read that<font color="#E5E5E5"> read those try to use the</font>

347
00:18:31,660 --> 00:18:37,660
component infrastructure macros I know

348
00:18:33,550 --> 00:18:40,270
they are ugly<font color="#CCCCCC"> but I do have plans for</font><font color="#E5E5E5"> it</font>

349
00:18:37,660 --> 00:18:44,080
so<font color="#CCCCCC"> please</font><font color="#E5E5E5"> please help me out not to</font>

350
00:18:40,270 --> 00:18:47,040
accrue more technical depth<font color="#CCCCCC"> also taking</font>

351
00:18:44,080 --> 00:18:49,960
references to services is expensive<font color="#E5E5E5"> it</font>

352
00:18:47,040 --> 00:18:53,680
involves taking a global<font color="#CCCCCC"> log currently</font>

353
00:18:49,960 --> 00:18:58,090
and then both increasing<font color="#CCCCCC"> some counters</font>

354
00:18:53,680 --> 00:19:00,580
<font color="#E5E5E5">and so on so try to keep</font><font color="#CCCCCC"> references</font><font color="#E5E5E5"> for</font>

355
00:18:58,090 --> 00:19:06,189
as long<font color="#CCCCCC"> as you can for as long as</font><font color="#E5E5E5"> it</font>

356
00:19:00,580 --> 00:19:11,679
makes sense<font color="#CCCCCC"> for</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> ok some more some</font>

357
00:19:06,190 --> 00:19:13,900
more homework<font color="#E5E5E5"> here now what's next</font><font color="#CCCCCC"> we</font>

358
00:19:11,680 --> 00:19:17,170
are at a<font color="#E5E5E5"> state</font><font color="#CCCCCC"> where we decided</font>

359
00:19:13,900 --> 00:19:20,110
<font color="#E5E5E5">internally</font><font color="#CCCCCC"> deflesh a lot</font><font color="#E5E5E5"> no no new</font>

360
00:19:17,170 --> 00:19:22,930
<font color="#CCCCCC">plug-in API</font><font color="#E5E5E5"> send on your service</font><font color="#CCCCCC"> API</font><font color="#E5E5E5"> and</font>

361
00:19:20,110 --> 00:19:26,889
<font color="#E5E5E5">the goal is</font><font color="#CCCCCC"> to deprecate the</font><font color="#E5E5E5"> plugins and</font>

362
00:19:22,930 --> 00:19:29,890
we also want to start dividing the large

363
00:19:26,890 --> 00:19:35,040
<font color="#E5E5E5">blob of code</font><font color="#CCCCCC"> that the basket</font>

364
00:19:29,890 --> 00:19:38,950
point currently<font color="#E5E5E5"> so that's all from me</font><font color="#CCCCCC"> I</font>

365
00:19:35,040 --> 00:19:42,090
have have 30 seconds for<font color="#CCCCCC"> for questions</font>

366
00:19:38,950 --> 00:19:42,090
<font color="#CCCCCC">yes</font><font color="#E5E5E5"> Simon</font>

367
00:19:55,760 --> 00:20:00,930
<font color="#E5E5E5">okay so the</font><font color="#CCCCCC"> question is whether we have</font>

368
00:19:58,320 --> 00:20:06,020
we<font color="#E5E5E5"> are considering version ink on the</font>

369
00:20:00,930 --> 00:20:06,020
interfaces<font color="#CCCCCC"> no</font><font color="#E5E5E5"> the idea is that</font>

