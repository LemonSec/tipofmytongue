1
00:00:16,309 --> 00:00:24,330
thank<font color="#E5E5E5"> know everybody</font>

2
00:00:19,619 --> 00:00:28,740
so this<font color="#E5E5E5"> presentation will</font><font color="#CCCCCC"> be really not</font>

3
00:00:24,330 --> 00:00:33,930
too painful<font color="#CCCCCC"> power of about lossless data</font>

4
00:00:28,740 --> 00:00:41,059
compression<font color="#E5E5E5"> in</font><font color="#CCCCCC"> ADA oh</font><font color="#E5E5E5"> I could not resist</font>

5
00:00:33,930 --> 00:00:44,280
<font color="#E5E5E5">to put</font><font color="#CCCCCC"> best world</font><font color="#E5E5E5"> variant of the title</font>

6
00:00:41,059 --> 00:00:47,030
<font color="#E5E5E5">enhance your data centric compression to</font>

7
00:00:44,280 --> 00:00:50,340
<font color="#E5E5E5">the extreme maximum by leveraging</font>

8
00:00:47,030 --> 00:00:52,710
machine learning<font color="#E5E5E5"> yeah actually there is</font>

9
00:00:50,340 --> 00:00:58,860
some kind of primitive<font color="#E5E5E5"> machine learning</font>

10
00:00:52,710 --> 00:01:04,080
so it's not all Bluff<font color="#CCCCCC"> title</font><font color="#E5E5E5"> day and the</font>

11
00:00:58,860 --> 00:01:09,259
second part will be<font color="#E5E5E5"> about more broader</font>

12
00:01:04,080 --> 00:01:14,090
about the<font color="#E5E5E5"> zip ADA library so it's about</font>

13
00:01:09,259 --> 00:01:14,090
zip archive and compression

14
00:01:15,720 --> 00:01:24,939
now we begin<font color="#E5E5E5"> with small experiments now</font>

15
00:01:22,180 --> 00:01:29,640
first we take a<font color="#E5E5E5"> text and we compress it</font>

16
00:01:24,939 --> 00:01:35,048
<font color="#CCCCCC">so you have a bunch of random bits</font>

17
00:01:29,640 --> 00:01:41,560
<font color="#E5E5E5">shown with pixels and then you</font>

18
00:01:35,049 --> 00:01:47,740
concatenate<font color="#E5E5E5"> text</font><font color="#CCCCCC"> 1 and text 2 and you</font>

19
00:01:41,560 --> 00:01:54,429
have a bit larger<font color="#E5E5E5"> bunch</font><font color="#CCCCCC"> of bits</font><font color="#E5E5E5"> the</font>

20
00:01:47,740 --> 00:01:57,788
third one<font color="#E5E5E5"> is only text to compressed as</font>

21
00:01:54,429 --> 00:02:02,560
as you see<font color="#E5E5E5"> enough as you have guessed</font>

22
00:01:57,789 --> 00:02:08,880
<font color="#E5E5E5">the impression of the part above text</font>

23
00:02:02,560 --> 00:02:12,010
<font color="#E5E5E5">one is better than</font><font color="#CCCCCC"> the text</font><font color="#E5E5E5"> two alone</font>

24
00:02:08,880 --> 00:02:18,010
because the algorithm has learned

25
00:02:12,010 --> 00:02:21,100
<font color="#E5E5E5">something from text one of course text 2</font>

26
00:02:18,010 --> 00:02:23,140
is<font color="#E5E5E5"> similar to text one</font><font color="#CCCCCC"> it's wide it</font>

27
00:02:21,100 --> 00:02:24,070
works<font color="#E5E5E5"> otherwise it would be the other</font>

28
00:02:23,140 --> 00:02:29,768
<font color="#E5E5E5">way</font><font color="#CCCCCC"> around</font>

29
00:02:24,070 --> 00:02:35,440
I will<font color="#CCCCCC"> see the times with some relation</font>

30
00:02:29,769 --> 00:02:39,510
so I swap between a and B so<font color="#E5E5E5"> text</font><font color="#CCCCCC"> 1 and</font>

31
00:02:35,440 --> 00:02:43,630
text<font color="#E5E5E5"> 1 with 2 concatenated and you see</font>

32
00:02:39,510 --> 00:02:46,870
this part<font color="#E5E5E5"> is identical</font><font color="#CCCCCC"> ok you will have</font>

33
00:02:43,630 --> 00:02:49,150
spotted a few bits but it's not<font color="#CCCCCC"> it's</font>

34
00:02:46,870 --> 00:02:55,590
part of a header<font color="#E5E5E5"> it's before the</font>

35
00:02:49,150 --> 00:03:01,150
compressed stream so<font color="#CCCCCC"> it indicates</font><font color="#E5E5E5"> that</font>

36
00:02:55,590 --> 00:03:05,859
this part will contain the compressed

37
00:03:01,150 --> 00:03:09,760
version<font color="#E5E5E5"> of text</font><font color="#CCCCCC"> 2 and the</font><font color="#E5E5E5"> interesting</font>

38
00:03:05,859 --> 00:03:16,560
thing it is much<font color="#E5E5E5"> smaller than just</font>

39
00:03:09,760 --> 00:03:20,700
compressing text<font color="#E5E5E5"> two alone with just</font>

40
00:03:16,560 --> 00:03:20,700
without prior knowledge

41
00:03:25,580 --> 00:03:33,680
so the conclusion is like with sports

42
00:03:29,780 --> 00:03:39,140
and other things<font color="#E5E5E5"> compression is better</font>

43
00:03:33,680 --> 00:03:42,710
with the<font color="#CCCCCC"> little training so as I see it</font>

44
00:03:39,140 --> 00:03:45,350
<font color="#CCCCCC">perhaps there are more ways but I see</font>

45
00:03:42,710 --> 00:03:50,930
basically<font color="#E5E5E5"> two ways of</font><font color="#CCCCCC"> of doing that</font>

46
00:03:45,350 --> 00:03:53,780
<font color="#E5E5E5">either you compress say load the text</font>

47
00:03:50,930 --> 00:03:58,070
<font color="#E5E5E5">one and you save everything from the</font>

48
00:03:53,780 --> 00:04:01,490
compression<font color="#E5E5E5"> algorithm the dictionary the</font>

49
00:03:58,070 --> 00:04:05,480
probability model and the state of<font color="#E5E5E5"> the</font>

50
00:04:01,490 --> 00:04:10,400
<font color="#E5E5E5">finite state machine</font><font color="#CCCCCC"> basically when you</font>

51
00:04:05,480 --> 00:04:13,040
save all that actually<font color="#CCCCCC"> it can be</font><font color="#E5E5E5"> very a</font>

52
00:04:10,400 --> 00:04:17,390
very<font color="#E5E5E5"> large bunch of data this</font>

53
00:04:13,040 --> 00:04:23,750
information<font color="#CCCCCC"> much</font><font color="#E5E5E5"> larger than the things</font>

54
00:04:17,390 --> 00:04:26,990
to be compressed all you use a prefix

55
00:04:23,750 --> 00:04:31,420
data<font color="#E5E5E5"> so you do actually</font><font color="#CCCCCC"> exactly</font><font color="#E5E5E5"> like in</font>

56
00:04:26,990 --> 00:04:35,480
the<font color="#E5E5E5"> experiment you feed the algorithm</font>

57
00:04:31,420 --> 00:04:38,240
<font color="#E5E5E5">but actually you won't use it</font><font color="#CCCCCC"> for in</font>

58
00:04:35,480 --> 00:04:41,960
life it's<font color="#E5E5E5"> just for training the the</font>

59
00:04:38,240 --> 00:04:48,320
compression algorithm and then the text

60
00:04:41,960 --> 00:04:54,799
<font color="#E5E5E5">to is what you want to to compress the</font>

61
00:04:48,320 --> 00:04:59,090
advantage of the lazy way so the the<font color="#E5E5E5"> way</font>

62
00:04:54,800 --> 00:05:01,340
<font color="#CCCCCC">true is that you can just</font><font color="#E5E5E5"> reuse a normal</font>

63
00:04:59,090 --> 00:05:07,130
compression algorithm you can<font color="#E5E5E5"> leverage</font>

64
00:05:01,340 --> 00:05:11,289
it as is so what I've done is<font color="#E5E5E5"> I've made</font>

65
00:05:07,130 --> 00:05:17,650
<font color="#CCCCCC">a package</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> plug</font><font color="#CCCCCC"> into onto a</font>

66
00:05:11,290 --> 00:05:17,650
confessional<font color="#CCCCCC"> grade</font><font color="#E5E5E5"> and it does the job</font>

67
00:05:18,610 --> 00:05:29,140
<font color="#E5E5E5">so you don't</font><font color="#CCCCCC"> have boring API or very</font>

68
00:05:24,350 --> 00:05:34,190
complex data structures or for saving

69
00:05:29,140 --> 00:05:38,210
things from the<font color="#CCCCCC"> variants one answer</font>

70
00:05:34,190 --> 00:05:40,660
stuff like that these<font color="#E5E5E5"> Wendy's haven't</font>

71
00:05:38,210 --> 00:05:43,909
touch of course when you run the

72
00:05:40,660 --> 00:05:47,360
compression side<font color="#CCCCCC"> it takes longer because</font>

73
00:05:43,910 --> 00:05:51,500
you have to compress<font color="#E5E5E5"> what was text</font><font color="#CCCCCC"> one</font>

74
00:05:47,360 --> 00:05:55,670
in the in the experiment<font color="#CCCCCC"> it can be</font>

75
00:05:51,500 --> 00:06:00,260
time-consuming<font color="#E5E5E5"> but sometimes you you</font>

76
00:05:55,670 --> 00:06:06,020
don't<font color="#E5E5E5"> you don't mind you are more</font>

77
00:06:00,260 --> 00:06:10,820
interested<font color="#E5E5E5"> in</font><font color="#CCCCCC"> decompression</font><font color="#E5E5E5"> often so how</font>

78
00:06:06,020 --> 00:06:16,549
<font color="#CCCCCC">we're to</font><font color="#E5E5E5"> use this trained compression</font>

79
00:06:10,820 --> 00:06:18,890
when<font color="#CCCCCC"> sense you anticipate having a large</font>

80
00:06:16,550 --> 00:06:21,320
<font color="#E5E5E5">amount of data that are all similar</font>

81
00:06:18,890 --> 00:06:28,310
<font color="#E5E5E5">together to some extent of course they</font>

82
00:06:21,320 --> 00:06:31,310
are not<font color="#E5E5E5"> the same so you can have you</font><font color="#CCCCCC"> can</font>

83
00:06:28,310 --> 00:06:34,520
have a sample<font color="#CCCCCC"> you use a</font><font color="#E5E5E5"> as a training</font>

84
00:06:31,310 --> 00:06:37,340
data<font color="#E5E5E5"> and then you have thousands of</font>

85
00:06:34,520 --> 00:06:39,620
different<font color="#E5E5E5"> files you don't know them in</font>

86
00:06:37,340 --> 00:06:45,320
<font color="#CCCCCC">advance so perhaps it</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> something</font>

87
00:06:39,620 --> 00:06:51,260
over the<font color="#CCCCCC"> internet and you will always</font>

88
00:06:45,320 --> 00:06:56,599
<font color="#E5E5E5">use</font><font color="#CCCCCC"> the trainer</font><font color="#E5E5E5"> file first for training</font>

89
00:06:51,260 --> 00:06:59,870
the<font color="#E5E5E5"> algorithm and as with the experiment</font>

90
00:06:56,600 --> 00:07:05,570
<font color="#E5E5E5">you will save storage</font><font color="#CCCCCC"> so perhaps if you</font>

91
00:06:59,870 --> 00:07:09,340
have millions<font color="#E5E5E5"> of of this text</font><font color="#CCCCCC"> - it can</font>

92
00:07:05,570 --> 00:07:14,409
<font color="#E5E5E5">be a large storage</font><font color="#CCCCCC"> or you can save</font>

93
00:07:09,340 --> 00:07:23,659
transmission time<font color="#CCCCCC"> I kind of know an</font>

94
00:07:14,410 --> 00:07:27,580
application and this side<font color="#E5E5E5"> and perhaps</font>

95
00:07:23,660 --> 00:07:33,400
there are other advantage that<font color="#CCCCCC"> can be</font>

96
00:07:27,580 --> 00:07:39,200
found but see it's what I've found by by

97
00:07:33,400 --> 00:07:42,320
developing in<font color="#E5E5E5"> there that's</font><font color="#CCCCCC"> so how it</font>

98
00:07:39,200 --> 00:07:45,620
works<font color="#E5E5E5"> a bit graphically so here you have</font>

99
00:07:42,320 --> 00:07:46,320
the compression<font color="#CCCCCC"> site and here you have</font>

100
00:07:45,620 --> 00:07:51,050
the

101
00:07:46,320 --> 00:07:54,810
decompression<font color="#CCCCCC"> site</font><font color="#E5E5E5"> so basically you</font>

102
00:07:51,050 --> 00:07:59,250
first you put your<font color="#E5E5E5"> training data so the</font>

103
00:07:54,810 --> 00:08:02,640
text<font color="#E5E5E5"> one into the the compression engine</font>

104
00:07:59,250 --> 00:08:09,450
and then your data<font color="#E5E5E5"> and what will happen</font>

105
00:08:02,640 --> 00:08:13,229
<font color="#E5E5E5">I need to say it</font><font color="#CCCCCC"> it must be a streaming</font>

106
00:08:09,450 --> 00:08:17,820
<font color="#E5E5E5">and compression algorithm so nothing</font>

107
00:08:13,230 --> 00:08:22,320
that<font color="#CCCCCC"> that mixes</font><font color="#E5E5E5"> the order of of the</font>

108
00:08:17,820 --> 00:08:25,110
stream or otherwise it it won't<font color="#E5E5E5"> work but</font>

109
00:08:22,320 --> 00:08:29,760
if it is<font color="#E5E5E5"> a streaming like lzma or</font>

110
00:08:25,110 --> 00:08:33,510
deflate on and said based side go<font color="#E5E5E5"> his</font>

111
00:08:29,760 --> 00:08:39,360
functions you will have first the

112
00:08:33,510 --> 00:08:43,710
compressed training stream you discard

113
00:08:39,360 --> 00:08:45,810
it<font color="#CCCCCC"> you won't</font><font color="#E5E5E5"> need it</font><font color="#CCCCCC"> but now the algo</font>

114
00:08:43,710 --> 00:08:49,590
hits<font color="#E5E5E5"> is trained your the probability</font>

115
00:08:45,810 --> 00:08:53,010
model is restrained<font color="#E5E5E5"> and the dictionary</font>

116
00:08:49,590 --> 00:08:58,050
is<font color="#CCCCCC"> full</font><font color="#E5E5E5"> with nice words from text one</font>

117
00:08:53,010 --> 00:09:03,810
and then comes data<font color="#CCCCCC"> true and here you</font>

118
00:08:58,050 --> 00:09:10,770
have a big wall hurdle<font color="#CCCCCC"> and you need to</font>

119
00:09:03,810 --> 00:09:14,430
to send it over<font color="#CCCCCC"> it's slow or expensive</font>

120
00:09:10,770 --> 00:09:17,699
or whatever it's<font color="#E5E5E5"> already</font><font color="#CCCCCC"> internet I</font>

121
00:09:14,430 --> 00:09:21,239
don't know but you you want<font color="#E5E5E5"> to have a</font>

122
00:09:17,700 --> 00:09:25,560
better compression for that so you have

123
00:09:21,240 --> 00:09:28,980
your compressed data<font color="#E5E5E5"> ships there what</font>

124
00:09:25,560 --> 00:09:33,380
happens on the<font color="#E5E5E5"> compression side first</font>

125
00:09:28,980 --> 00:09:37,500
you you stuff the compressed training

126
00:09:33,380 --> 00:09:41,790
stream but of course<font color="#E5E5E5"> this one was not</font>

127
00:09:37,500 --> 00:09:44,190
shipped over the<font color="#CCCCCC"> big holder was already</font>

128
00:09:41,790 --> 00:09:47,670
known<font color="#CCCCCC"> to the computer</font><font color="#E5E5E5"> on the</font>

129
00:09:44,190 --> 00:09:52,890
decompression side so<font color="#E5E5E5"> it's shipped only</font>

130
00:09:47,670 --> 00:09:56,130
once in the life of the this machine so

131
00:09:52,890 --> 00:09:58,560
you you put first<font color="#E5E5E5"> the training data and</font>

132
00:09:56,130 --> 00:10:00,090
then the compressed<font color="#CCCCCC"> data which was of</font>

133
00:09:58,560 --> 00:10:04,680
course<font color="#E5E5E5"> a noun</font><font color="#CCCCCC"> to</font>

134
00:10:00,090 --> 00:10:07,200
the compressor<font color="#E5E5E5"> and what happens as you</font>

135
00:10:04,680 --> 00:10:10,069
guess you have<font color="#E5E5E5"> the training</font><font color="#CCCCCC"> decompressed</font>

136
00:10:07,200 --> 00:10:16,500
you you discard it you don't need<font color="#E5E5E5"> it</font><font color="#CCCCCC"> and</font>

137
00:10:10,070 --> 00:10:26,060
you get your<font color="#CCCCCC"> data decompressed</font><font color="#E5E5E5"> as you</font>

138
00:10:16,500 --> 00:10:30,570
<font color="#E5E5E5">wanted so here is the the</font><font color="#CCCCCC"> ADA</font>

139
00:10:26,060 --> 00:10:34,099
specification of the of this trend

140
00:10:30,570 --> 00:10:36,450
compression<font color="#CCCCCC"> so</font><font color="#E5E5E5"> I did not do any fancy</font>

141
00:10:34,100 --> 00:10:43,020
<font color="#E5E5E5">object-oriented thing it's only with</font>

142
00:10:36,450 --> 00:10:45,930
generics so you and you don't<font color="#E5E5E5"> have it's</font>

143
00:10:43,020 --> 00:10:51,449
<font color="#E5E5E5">very simple you you have only function</font>

144
00:10:45,930 --> 00:10:53,819
which give bytes and function<font color="#E5E5E5"> a</font>

145
00:10:51,450 --> 00:10:57,060
procedure which writes bytes in each

146
00:10:53,820 --> 00:10:59,970
time but the difference to<font color="#CCCCCC"> similar</font>

147
00:10:57,060 --> 00:11:06,719
<font color="#E5E5E5">things you have two inputs</font><font color="#CCCCCC"> you have the</font>

148
00:10:59,970 --> 00:11:08,910
training input and the data input on the

149
00:11:06,720 --> 00:11:11,460
<font color="#E5E5E5">decompression side</font><font color="#CCCCCC"> you also have two</font>

150
00:11:08,910 --> 00:11:16,230
input one for the compressed training

151
00:11:11,460 --> 00:11:18,840
and one for the compressed<font color="#E5E5E5"> data because</font>

152
00:11:16,230 --> 00:11:21,390
<font color="#E5E5E5">you</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to function</font><font color="#CCCCCC"> because one is will</font>

153
00:11:18,840 --> 00:11:24,510
take locally from<font color="#E5E5E5"> the local computer</font>

154
00:11:21,390 --> 00:11:30,230
<font color="#E5E5E5">basically and the second one will</font>

155
00:11:24,510 --> 00:11:36,170
receive from the big antenna the

156
00:11:30,230 --> 00:11:40,380
interesting<font color="#E5E5E5"> data and then you have</font><font color="#CCCCCC"> a</font>

157
00:11:36,170 --> 00:11:44,459
once<font color="#E5E5E5"> you have provided these functions</font>

158
00:11:40,380 --> 00:11:50,900
and procedure to have inputs and outputs

159
00:11:44,460 --> 00:11:56,040
<font color="#E5E5E5">you'll have</font><font color="#CCCCCC"> an encoding side</font><font color="#E5E5E5"> encode and</font>

160
00:11:50,900 --> 00:11:58,910
it does the<font color="#E5E5E5"> job and you have</font><font color="#CCCCCC"> also decode</font>

161
00:11:56,040 --> 00:11:58,910
on the other side

162
00:12:00,790 --> 00:12:11,329
so you are you have certainly impatient

163
00:12:04,670 --> 00:12:14,390
to<font color="#CCCCCC"> see some results so I begin</font><font color="#E5E5E5"> with</font>

164
00:12:11,330 --> 00:12:19,520
<font color="#E5E5E5">perhaps</font><font color="#CCCCCC"> with data where it's</font><font color="#E5E5E5"> not true</font>

165
00:12:14,390 --> 00:12:21,590
impressive<font color="#CCCCCC"> so I have</font><font color="#E5E5E5"> CSV files it seems</font>

166
00:12:19,520 --> 00:12:24,770
that I cannot be data that<font color="#CCCCCC"> you can</font>

167
00:12:21,590 --> 00:12:28,400
download<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the internet so it's all</font>

168
00:12:24,770 --> 00:12:35,680
public<font color="#E5E5E5"> is also all on the SourceForge</font>

169
00:12:28,400 --> 00:12:35,680
<font color="#CCCCCC">and opposite orientation</font>

170
00:12:37,760 --> 00:12:44,830
yeah<font color="#E5E5E5"> with CSV files</font><font color="#CCCCCC"> basically you have</font>

171
00:12:41,240 --> 00:12:48,200
random data but a very restricted

172
00:12:44,830 --> 00:12:52,520
alphabet you have figures and commas and

173
00:12:48,200 --> 00:12:57,560
end of lines<font color="#CCCCCC"> so</font><font color="#E5E5E5"> there is no thing that</font>

174
00:12:52,520 --> 00:13:03,380
the training can bring actually and not

175
00:12:57,560 --> 00:13:06,680
a lot at at least<font color="#E5E5E5"> here</font><font color="#CCCCCC"> you have on the</font>

176
00:13:03,380 --> 00:13:12,740
left<font color="#E5E5E5"> side you have Excel files</font><font color="#CCCCCC"> whether</font>

177
00:13:06,680 --> 00:13:15,800
<font color="#E5E5E5">binary the old binary format with plenty</font>

178
00:13:12,740 --> 00:13:18,470
of metadata<font color="#E5E5E5"> and then you see it's much</font>

179
00:13:15,800 --> 00:13:23,240
more efficient<font color="#E5E5E5"> because all this metadata</font>

180
00:13:18,470 --> 00:13:28,670
is present in all<font color="#E5E5E5"> Excel files so the</font>

181
00:13:23,240 --> 00:13:31,700
training brings a lot so<font color="#E5E5E5"> perhaps in the</font>

182
00:13:28,670 --> 00:13:36,250
last<font color="#E5E5E5"> eight or five percent</font><font color="#CCCCCC"> you have</font>

183
00:13:31,700 --> 00:13:41,330
really squeezed the the real<font color="#E5E5E5"> information</font>

184
00:13:36,250 --> 00:13:47,530
in this excel files and in the middle

185
00:13:41,330 --> 00:13:52,040
I've just compressed the the encoder

186
00:13:47,530 --> 00:13:54,110
<font color="#E5E5E5">using the decoder as a training file of</font>

187
00:13:52,040 --> 00:14:00,290
course<font color="#CCCCCC"> they are similar</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> you have</font>

188
00:13:54,110 --> 00:14:02,750
the<font color="#E5E5E5"> net</font><font color="#CCCCCC"> runtime and perhaps the</font>

189
00:14:00,290 --> 00:14:07,650
debugging<font color="#E5E5E5"> symbols and things like</font><font color="#CCCCCC"> that</font>

190
00:14:02,750 --> 00:14:11,580
and<font color="#CCCCCC"> you get a lot</font>

191
00:14:07,650 --> 00:14:15,900
better compression<font color="#E5E5E5"> by training the deal</font>

192
00:14:11,580 --> 00:14:17,700
guys<font color="#E5E5E5"> so here it's a Windows executable</font>

193
00:14:15,900 --> 00:14:22,140
<font color="#E5E5E5">so it could</font><font color="#CCCCCC"> be different with different</font>

194
00:14:17,700 --> 00:14:26,810
<font color="#E5E5E5">formats but it's almost</font><font color="#CCCCCC"> one-quarter of</font>

195
00:14:22,140 --> 00:14:39,110
what you would<font color="#E5E5E5"> get with lzma which is a</font>

196
00:14:26,810 --> 00:14:45,779
very<font color="#E5E5E5"> good algorithm now second part is</font>

197
00:14:39,110 --> 00:14:48,480
more about the zip<font color="#CCCCCC"> EDA</font><font color="#E5E5E5"> library so what</font>

198
00:14:45,779 --> 00:14:55,680
is it it's a we are at the right<font color="#E5E5E5"> place</font>

199
00:14:48,480 --> 00:14:58,170
<font color="#CCCCCC">yeah it's a fully</font><font color="#E5E5E5"> open source and it's</font>

200
00:14:55,680 --> 00:15:03,900
we<font color="#E5E5E5"> are in the right dev womb so it's</font>

201
00:14:58,170 --> 00:15:09,209
fully in<font color="#CCCCCC"> EDA you don't need to</font><font color="#E5E5E5"> even</font>

202
00:15:03,900 --> 00:15:13,020
think about interfacing<font color="#CCCCCC"> the stuff</font><font color="#E5E5E5"> you</font>

203
00:15:09,210 --> 00:15:20,000
release the painful part<font color="#E5E5E5"> of using mixing</font>

204
00:15:13,020 --> 00:15:25,460
languages and it's fully portable<font color="#E5E5E5"> as</font>

205
00:15:20,000 --> 00:15:28,530
long as you have a compiler<font color="#E5E5E5"> supporting</font>

206
00:15:25,460 --> 00:15:32,930
<font color="#E5E5E5">certain</font><font color="#CCCCCC"> number of integer types of</font>

207
00:15:28,530 --> 00:15:38,270
course so<font color="#E5E5E5"> you need complete</font><font color="#CCCCCC"> EDA compiler</font>

208
00:15:32,930 --> 00:15:38,270
<font color="#E5E5E5">with the necessary are integer types</font>

209
00:15:42,029 --> 00:15:49,680
<font color="#CCCCCC">the portability you have just one set of</font>

210
00:15:46,259 --> 00:15:54,839
sources<font color="#CCCCCC"> you don't have magic with</font>

211
00:15:49,680 --> 00:15:57,180
conditionals and if deaf and this kind

212
00:15:54,839 --> 00:16:00,529
of things you use especially in

213
00:15:57,180 --> 00:16:04,469
<font color="#CCCCCC">compression software</font><font color="#E5E5E5"> usually you see</font>

214
00:16:00,529 --> 00:16:13,649
<font color="#CCCCCC">kilometers of if they define include</font>

215
00:16:04,470 --> 00:16:20,670
<font color="#E5E5E5">blah blah so that's not there so more</font>

216
00:16:13,649 --> 00:16:25,589
<font color="#CCCCCC">details about portability so so</font><font color="#E5E5E5"> again</font>

217
00:16:20,670 --> 00:16:31,139
there is no<font color="#CCCCCC"> binding its</font><font color="#E5E5E5"> standalone</font><font color="#CCCCCC"> it's</font>

218
00:16:25,589 --> 00:16:35,850
use ADA streams and exceptions you you

219
00:16:31,139 --> 00:16:38,790
can monitor control<font color="#E5E5E5"> analyze your program</font>

220
00:16:35,850 --> 00:16:44,790
including<font color="#E5E5E5"> the compression library with</font>

221
00:16:38,790 --> 00:16:49,410
<font color="#CCCCCC">the same tool set and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> right-hand</font>

222
00:16:44,790 --> 00:16:56,040
hand<font color="#E5E5E5"> side here the list of platforms</font>

223
00:16:49,410 --> 00:17:03,679
that<font color="#CCCCCC"> where Japan</font><font color="#E5E5E5"> EDA has been use easy</font>

224
00:16:56,040 --> 00:17:06,510
news or has been<font color="#E5E5E5"> in use or</font><font color="#CCCCCC"> for some time</font>

225
00:17:03,679 --> 00:17:09,530
so I didn't check personally all the

226
00:17:06,510 --> 00:17:13,470
platforms<font color="#CCCCCC"> but I trust people sending me</font>

227
00:17:09,530 --> 00:17:18,389
mails<font color="#E5E5E5"> about it if you have another</font>

228
00:17:13,470 --> 00:17:20,348
platform<font color="#E5E5E5"> please drop me a line because</font>

229
00:17:18,390 --> 00:17:23,469
<font color="#E5E5E5">the bigger underneath the better</font>

230
00:17:20,348 --> 00:17:23,468
[Music]

231
00:17:26,809 --> 00:17:41,529
the history<font color="#CCCCCC"> of</font><font color="#E5E5E5"> zip</font><font color="#CCCCCC"> ADA</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> it's 20 years</font>

232
00:17:34,429 --> 00:17:44,470
old soon<font color="#E5E5E5"> so first it was a bit ugly</font>

233
00:17:41,529 --> 00:17:54,830
translation it was only the compression

234
00:17:44,470 --> 00:17:57,860
was translation<font color="#CCCCCC"> of</font><font color="#E5E5E5"> Pascal with yeah it</font>

235
00:17:54,830 --> 00:18:01,249
was not so nice<font color="#CCCCCC"> and over the</font><font color="#E5E5E5"> years</font>

236
00:17:57,860 --> 00:18:04,939
yeah I had the<font color="#E5E5E5"> good idea of</font><font color="#CCCCCC"> someone</font>

237
00:18:01,249 --> 00:18:09,769
perhaps<font color="#E5E5E5"> told me or recommended me to put</font>

238
00:18:04,940 --> 00:18:17,659
it<font color="#CCCCCC"> on an open-source platform at</font><font color="#E5E5E5"> the</font>

239
00:18:09,769 --> 00:18:21,769
time<font color="#CCCCCC"> SourceForge West whatever</font><font color="#E5E5E5"> so in</font>

240
00:18:17,659 --> 00:18:23,960
2007<font color="#E5E5E5"> I put it on on SourceForge and then</font>

241
00:18:21,769 --> 00:18:29,570
the magic of<font color="#CCCCCC"> open-source</font><font color="#E5E5E5"> began because</font>

242
00:18:23,960 --> 00:18:33,679
people began to use<font color="#CCCCCC"> it and soon after I</font>

243
00:18:29,570 --> 00:18:38,509
<font color="#CCCCCC">got a nice contribution in 2008 so</font>

244
00:18:33,679 --> 00:18:41,809
basically this team in this company<font color="#E5E5E5"> did</font>

245
00:18:38,509 --> 00:18:48,529
<font color="#E5E5E5">a big chunk of that zip</font><font color="#CCCCCC"> add a library</font>

246
00:18:41,809 --> 00:18:50,869
<font color="#CCCCCC">and they de sent me email so then they</font>

247
00:18:48,529 --> 00:18:56,529
have programmed the<font color="#E5E5E5"> streams</font><font color="#CCCCCC"> before it</font>

248
00:18:50,869 --> 00:19:01,580
was only<font color="#E5E5E5"> fight and they did the zip</font>

249
00:18:56,529 --> 00:19:06,619
archive creation<font color="#E5E5E5"> site and it's nice</font>

250
00:19:01,580 --> 00:19:11,149
<font color="#CCCCCC">because they they did it</font><font color="#E5E5E5"> very often</font>

251
00:19:06,619 --> 00:19:15,949
<font color="#CCCCCC">alley because</font><font color="#E5E5E5"> you can have a zip archive</font>

252
00:19:11,149 --> 00:19:17,840
in<font color="#E5E5E5"> the stream you can</font><font color="#CCCCCC"> have everything in</font>

253
00:19:15,950 --> 00:19:22,279
memory<font color="#E5E5E5"> that's that's one touch or</font>

254
00:19:17,840 --> 00:19:27,340
whatever medium you want you don't<font color="#E5E5E5"> need</font>

255
00:19:22,279 --> 00:19:30,559
files so you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> have your</font><font color="#E5E5E5"> can almost</font>

256
00:19:27,340 --> 00:19:33,769
kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> RAM disk or static Ram disk</font>

257
00:19:30,559 --> 00:19:36,170
<font color="#CCCCCC">using a zip archive with the file system</font>

258
00:19:33,769 --> 00:19:41,150
and<font color="#E5E5E5"> everything</font>

259
00:19:36,170 --> 00:19:44,170
and then I got other contributions and

260
00:19:41,150 --> 00:19:50,990
and I developed<font color="#E5E5E5"> I have added some</font>

261
00:19:44,170 --> 00:19:55,010
decompression things and later<font color="#E5E5E5"> I've</font>

262
00:19:50,990 --> 00:19:58,160
added<font color="#CCCCCC"> okay I have bite the bullet I've</font>

263
00:19:55,010 --> 00:20:02,570
added<font color="#CCCCCC"> LZ dem a decompression that was</font>

264
00:19:58,160 --> 00:20:05,510
not so easy but fortunately it was due

265
00:20:02,570 --> 00:20:11,320
<font color="#CCCCCC">to the fact that there was a well</font>

266
00:20:05,510 --> 00:20:17,090
<font color="#E5E5E5">finally a well-written C++ simplified</font>

267
00:20:11,320 --> 00:20:21,050
reference decoder for LCD me by the

268
00:20:17,090 --> 00:20:24,580
author of<font color="#CCCCCC"> lzma so I jumped</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> the wagon</font>

269
00:20:21,050 --> 00:20:30,340
<font color="#E5E5E5">and I've translated into</font><font color="#CCCCCC"> ada</font>

270
00:20:24,580 --> 00:20:35,659
<font color="#E5E5E5">and then I wanted to</font><font color="#CCCCCC"> do a</font><font color="#E5E5E5"> beach ball and</font>

271
00:20:30,340 --> 00:20:44,199
have a strong compression so I began

272
00:20:35,660 --> 00:20:49,790
with<font color="#E5E5E5"> deflate and then it was in early</font>

273
00:20:44,200 --> 00:20:57,320
<font color="#CCCCCC">2016 then during</font><font color="#E5E5E5"> the vacation of 2016 I</font>

274
00:20:49,790 --> 00:21:00,350
did did lzma compression<font color="#E5E5E5"> actually it was</font>

275
00:20:57,320 --> 00:21:03,139
easier than anticipated because<font color="#CCCCCC"> you can</font>

276
00:21:00,350 --> 00:21:08,209
be<font color="#CCCCCC"> wrong many things</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> view</font><font color="#E5E5E5"> from the</font>

277
00:21:03,140 --> 00:21:14,930
decoder<font color="#E5E5E5"> you can just swap the bit inputs</font>

278
00:21:08,210 --> 00:21:18,520
into outputs and endow the weather what

279
00:21:14,930 --> 00:21:21,520
I've<font color="#E5E5E5"> presented</font><font color="#CCCCCC"> just earlier the</font><font color="#E5E5E5"> trains</font>

280
00:21:18,520 --> 00:21:21,520
compression

281
00:21:21,979 --> 00:21:31,320
so what do you how does<font color="#CCCCCC"> it</font><font color="#E5E5E5"> compare to</font>

282
00:21:27,239 --> 00:21:36,329
<font color="#E5E5E5">other methods and so</font><font color="#CCCCCC"> on there are</font><font color="#E5E5E5"> plenty</font>

283
00:21:31,320 --> 00:21:39,658
of libraries you<font color="#E5E5E5"> have this if you check</font>

284
00:21:36,329 --> 00:21:46,129
this squeeze charts<font color="#E5E5E5"> site where it's done</font>

285
00:21:39,659 --> 00:21:50,099
<font color="#E5E5E5">by by a an expert</font><font color="#CCCCCC"> of of compression has</font>

286
00:21:46,129 --> 00:21:54,799
hundreds of<font color="#E5E5E5"> different schemes that and</font>

287
00:21:50,099 --> 00:22:01,789
he<font color="#E5E5E5"> lists only those that</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> working and</font>

288
00:21:54,799 --> 00:22:04,559
and yet the<font color="#E5E5E5"> problem with compression you</font>

289
00:22:01,789 --> 00:22:08,749
<font color="#CCCCCC">know the the definition of a good</font>

290
00:22:04,559 --> 00:22:11,309
<font color="#E5E5E5">compression it's a bit shaky because</font>

291
00:22:08,749 --> 00:22:16,169
some people won't just want to have a

292
00:22:11,309 --> 00:22:19,408
good compression<font color="#CCCCCC"> ratio but sometimes if</font>

293
00:22:16,169 --> 00:22:21,929
you it takes too long to<font color="#E5E5E5"> decompress it's</font>

294
00:22:19,409 --> 00:22:25,079
not<font color="#E5E5E5"> no more interesting because you have</font>

295
00:22:21,929 --> 00:22:27,749
<font color="#E5E5E5">anyway you have good capacity networks</font>

296
00:22:25,079 --> 00:22:32,369
and so on<font color="#E5E5E5"> so it's also important to have</font>

297
00:22:27,749 --> 00:22:37,019
<font color="#E5E5E5">a good decompression time or sometimes</font>

298
00:22:32,369 --> 00:22:41,099
not<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that's if</font><font color="#E5E5E5"> it takes really too</font>

299
00:22:37,019 --> 00:22:43,649
long to compress the data<font color="#E5E5E5"> it can be also</font>

300
00:22:41,099 --> 00:22:45,479
a problem or<font color="#E5E5E5"> perhaps not because</font>

301
00:22:43,649 --> 00:22:49,008
sometimes you<font color="#E5E5E5"> have something you you</font>

302
00:22:45,479 --> 00:22:52,709
compress once and it's downloaded

303
00:22:49,009 --> 00:22:56,849
thousands of times so<font color="#E5E5E5"> do you can care or</font>

304
00:22:52,709 --> 00:22:59,820
not about compression time and finally

305
00:22:56,849 --> 00:23:02,849
that's more<font color="#E5E5E5"> about the embedded systems</font>

306
00:22:59,820 --> 00:23:07,559
<font color="#CCCCCC">and you have the question of memory</font>

307
00:23:02,849 --> 00:23:12,329
footprint<font color="#E5E5E5"> do you want to to keep the</font>

308
00:23:07,559 --> 00:23:18,200
older internal tables of<font color="#E5E5E5"> the compression</font>

309
00:23:12,329 --> 00:23:21,980
<font color="#CCCCCC">and decompression</font><font color="#E5E5E5"> within a certain</font>

310
00:23:18,200 --> 00:23:25,070
<font color="#E5E5E5">within certain constraints</font>

311
00:23:21,980 --> 00:23:27,200
so here you<font color="#E5E5E5"> have a picture with two of</font>

312
00:23:25,070 --> 00:23:31,789
this<font color="#E5E5E5"> criteria so you</font><font color="#CCCCCC"> have the</font>

313
00:23:27,200 --> 00:23:32,510
<font color="#E5E5E5">compression ratio so on the smaller the</font>

314
00:23:31,789 --> 00:23:35,360
better

315
00:23:32,510 --> 00:23:40,669
and here you have<font color="#CCCCCC"> a log on</font><font color="#E5E5E5"> the</font>

316
00:23:35,360 --> 00:23:44,510
<font color="#CCCCCC">logarithmic scale the time of</font>

317
00:23:40,669 --> 00:23:48,100
compression<font color="#E5E5E5"> so as you and you guess the</font>

318
00:23:44,510 --> 00:23:52,399
the more you you go to the function of

319
00:23:48,100 --> 00:24:00,740
compression<font color="#E5E5E5"> the longer it takes tenants</font>

320
00:23:52,399 --> 00:24:04,879
<font color="#CCCCCC">and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> beta library is not the the old</font>

321
00:24:00,740 --> 00:24:09,529
best on this part but perhaps who knows

322
00:24:04,880 --> 00:24:11,950
in the<font color="#CCCCCC"> future it's some</font><font color="#E5E5E5"> efforts and</font>

323
00:24:09,529 --> 00:24:11,950
better

324
00:24:16,500 --> 00:24:28,049
so a<font color="#CCCCCC"> little bit</font><font color="#E5E5E5"> about the internals so</font>

325
00:24:24,020 --> 00:24:30,960
deflates and lzma<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> I have</font>

326
00:24:28,049 --> 00:24:35,070
implemented relatively recently<font color="#CCCCCC"> they are</font>

327
00:24:30,960 --> 00:24:38,250
both<font color="#E5E5E5"> two stages</font><font color="#CCCCCC"> two phases I'll go here</font>

328
00:24:35,070 --> 00:24:45,000
<font color="#CCCCCC">so you</font><font color="#E5E5E5"> have a first</font><font color="#CCCCCC"> ring mature</font>

329
00:24:38,250 --> 00:24:49,429
so the lz77<font color="#CCCCCC"> Arrowhead and then you have</font>

330
00:24:45,000 --> 00:24:55,169
the entropy<font color="#E5E5E5"> encoder to</font><font color="#CCCCCC"> squeeze this</font>

331
00:24:49,429 --> 00:24:57,990
<font color="#E5E5E5">pre-processed signal basically and it's</font>

332
00:24:55,169 --> 00:25:01,799
the same principle for deflate and as

333
00:24:57,990 --> 00:25:06,299
<font color="#E5E5E5">Adam a but with deflate you have Huffman</font>

334
00:25:01,799 --> 00:25:13,250
trees as Adam it's<font color="#CCCCCC"> range encoding it's a</font>

335
00:25:06,299 --> 00:25:21,260
much more<font color="#E5E5E5"> powerful compressions</font><font color="#CCCCCC"> tree</font>

336
00:25:13,250 --> 00:25:21,260
scheme for for<font color="#E5E5E5"> entropy</font>

337
00:25:25,570 --> 00:25:37,789
so now how you again a comparison<font color="#CCCCCC"> only</font>

338
00:25:32,090 --> 00:25:47,000
with<font color="#E5E5E5"> the zip format so here it's a it's</font>

339
00:25:37,789 --> 00:25:55,090
<font color="#E5E5E5">a kind of standard benchmark the data</font>

340
00:25:47,000 --> 00:26:00,710
<font color="#E5E5E5">set</font><font color="#CCCCCC"> seen as a corpus</font><font color="#E5E5E5"> so here you have</font>

341
00:25:55,090 --> 00:26:07,250
the 7-zip and here<font color="#CCCCCC"> it's info zip so the</font>

342
00:26:00,710 --> 00:26:10,220
same<font color="#E5E5E5"> as that lib</font><font color="#CCCCCC"> bz2</font><font color="#E5E5E5"> and against 7-zip</font>

343
00:26:07,250 --> 00:26:14,720
but with the<font color="#E5E5E5"> LZ</font><font color="#CCCCCC"> dem</font><font color="#E5E5E5"> a confession and</font>

344
00:26:10,220 --> 00:26:22,460
here in green it's the<font color="#CCCCCC"> results with with</font>

345
00:26:14,720 --> 00:26:26,120
zip<font color="#CCCCCC"> ADA</font><font color="#E5E5E5"> so it's not too too bad and one</font>

346
00:26:22,460 --> 00:26:29,000
good<font color="#E5E5E5"> thing of the the fact that you</font><font color="#CCCCCC"> are</font>

347
00:26:26,120 --> 00:26:32,330
<font color="#E5E5E5">you it's in two phases you can you can</font>

348
00:26:29,000 --> 00:26:39,950
pick and choose<font color="#CCCCCC"> the algorithm matcher</font>

349
00:26:32,330 --> 00:26:42,799
so the lz77<font color="#E5E5E5"> part and see how it works</font>

350
00:26:39,950 --> 00:26:45,200
with the then the entropy coding

351
00:26:42,799 --> 00:26:49,460
<font color="#E5E5E5">sometimes you have surprises so for</font>

352
00:26:45,200 --> 00:26:52,940
instance I've picked<font color="#E5E5E5"> for</font><font color="#CCCCCC"> LZ they</font><font color="#E5E5E5"> may</font>

353
00:26:49,460 --> 00:26:57,049
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that was for deflate and it</font>

354
00:26:52,940 --> 00:27:02,240
works pretty well and<font color="#E5E5E5"> I also force</font>

355
00:26:57,049 --> 00:27:06,440
<font color="#E5E5E5">certain kind of of data I've discovered</font>

356
00:27:02,240 --> 00:27:08,809
<font color="#CCCCCC">you it's better not to compress with the</font>

357
00:27:06,440 --> 00:27:14,140
first phase you<font color="#E5E5E5"> just send the plane</font>

358
00:27:08,809 --> 00:27:17,350
<font color="#E5E5E5">bytes it compress best better</font><font color="#CCCCCC"> than with</font>

359
00:27:14,140 --> 00:27:17,350
string match

360
00:27:21,409 --> 00:27:31,470
so finally another<font color="#E5E5E5"> let's say innovation</font>

361
00:27:28,740 --> 00:27:37,590
<font color="#E5E5E5">I</font><font color="#CCCCCC"> mean</font><font color="#E5E5E5"> did the</font><font color="#CCCCCC"> EDI library you</font><font color="#E5E5E5"> have a</font>

362
00:27:31,470 --> 00:27:40,620
kind<font color="#CCCCCC"> of meta method that's leveraged or</font>

363
00:27:37,590 --> 00:27:46,020
that correspond to the fact that in the

364
00:27:40,620 --> 00:27:50,570
zip file<font color="#E5E5E5"> each entry so each file in the</font>

365
00:27:46,020 --> 00:27:54,629
art of cave is compressed individually

366
00:27:50,570 --> 00:27:59,220
so you can pick<font color="#E5E5E5"> and</font><font color="#CCCCCC"> choose</font><font color="#E5E5E5"> the algorithm</font>

367
00:27:54,630 --> 00:28:04,980
compressing it depending on the length

368
00:27:59,220 --> 00:28:12,000
constant<font color="#E5E5E5"> or</font><font color="#CCCCCC"> the type of data</font><font color="#E5E5E5"> especially</font>

369
00:28:04,980 --> 00:28:15,980
the length<font color="#E5E5E5"> I've noticed that the files</font>

370
00:28:12,000 --> 00:28:19,190
that<font color="#E5E5E5"> are shorter</font><font color="#CCCCCC"> than more or less 9k</font>

371
00:28:15,980 --> 00:28:22,770
and kilobytes

372
00:28:19,190 --> 00:28:26,429
they compress<font color="#E5E5E5"> probably with a</font><font color="#CCCCCC"> lizard ma</font>

373
00:28:22,770 --> 00:28:29,460
<font color="#E5E5E5">but if you see the probability all the</font>

374
00:28:26,429 --> 00:28:35,570
tables for the probability<font color="#E5E5E5"> model you</font>

375
00:28:29,460 --> 00:28:40,980
understand it needs a long stream to

376
00:28:35,570 --> 00:28:44,370
<font color="#CCCCCC">train the algorithm</font><font color="#E5E5E5"> so an individual</font>

377
00:28:40,980 --> 00:28:46,500
file shorter<font color="#E5E5E5"> than</font><font color="#CCCCCC"> 9000 you can just</font>

378
00:28:44,370 --> 00:28:51,239
forget<font color="#CCCCCC"> as</font><font color="#E5E5E5"> Adam a you take deflate and</font>

379
00:28:46,500 --> 00:28:53,130
it's better so<font color="#E5E5E5"> that's for the</font>

380
00:28:51,240 --> 00:28:58,700
presentation<font color="#E5E5E5"> and that's it I'll make a</font>

381
00:28:53,130 --> 00:29:04,460
<font color="#E5E5E5">little demo perhaps it should be</font>

382
00:28:58,700 --> 00:29:04,460
<font color="#E5E5E5">but it's interesting hopefully</font>

383
00:29:08,110 --> 00:29:17,070
so yeah<font color="#E5E5E5"> here you see a zip file okay</font><font color="#CCCCCC"> so</font>

384
00:29:14,289 --> 00:29:21,789
<font color="#E5E5E5">spoiler for the next presentation but I</font>

385
00:29:17,070 --> 00:29:28,658
just<font color="#E5E5E5"> show you the contents with a user</font>

386
00:29:21,789 --> 00:29:33,490
interface<font color="#E5E5E5"> in the meantime I</font><font color="#CCCCCC"> Arcadian</font>

387
00:29:28,659 --> 00:29:38,049
<font color="#CCCCCC">user interfaces</font><font color="#E5E5E5"> so you you</font><font color="#CCCCCC"> see the the</font>

388
00:29:33,490 --> 00:29:41,710
contents<font color="#E5E5E5"> okay some tag I've put some</font>

389
00:29:38,049 --> 00:29:48,720
<font color="#CCCCCC">text some</font><font color="#E5E5E5"> XML files database and we'll</font>

390
00:29:41,710 --> 00:29:48,720
see what<font color="#E5E5E5"> happens with</font><font color="#CCCCCC"> different schemes</font>

391
00:29:59,330 --> 00:30:07,220
so I'm just unpacking the thing with the

392
00:30:03,739 --> 00:30:09,889
command<font color="#E5E5E5"> line version which is shipped as</font>

393
00:30:07,220 --> 00:30:15,710
a demo with the the library on the

394
00:30:09,889 --> 00:30:21,918
<font color="#E5E5E5">SourceForge</font><font color="#CCCCCC"> and what can I do</font>

395
00:30:15,710 --> 00:30:23,989
<font color="#CCCCCC">okay it's</font><font color="#E5E5E5"> I can show you well when</font>

396
00:30:21,919 --> 00:30:27,499
something<font color="#CCCCCC"> is decompressed you also have</font>

397
00:30:23,989 --> 00:30:30,070
a hash code<font color="#E5E5E5"> checking to be sure</font><font color="#CCCCCC"> so</font>

398
00:30:27,499 --> 00:30:33,409
everything is<font color="#CCCCCC"> fine and of course you can</font>

399
00:30:30,070 --> 00:30:38,389
you can use the<font color="#E5E5E5"> the compressed file so</font>

400
00:30:33,409 --> 00:30:42,159
<font color="#CCCCCC">that there's no no</font><font color="#E5E5E5"> magic so when Santa</font>

401
00:30:38,389 --> 00:30:48,549
<font color="#CCCCCC">opened this is file on oh you see the</font>

402
00:30:42,159 --> 00:30:48,549
the<font color="#CCCCCC"> chart</font><font color="#E5E5E5"> say that were before and</font><font color="#CCCCCC"> so on</font>

403
00:30:48,879 --> 00:30:55,238
and now if I

404
00:31:00,659 --> 00:31:12,520
for instance<font color="#E5E5E5"> I oops</font>

405
00:31:08,080 --> 00:31:16,929
so I compress with the fastest<font color="#E5E5E5"> deflate</font>

406
00:31:12,520 --> 00:31:24,700
so<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is basically the default scheme</font>

407
00:31:16,930 --> 00:31:27,610
so you have a new archive<font color="#E5E5E5"> as expected</font><font color="#CCCCCC"> so</font>

408
00:31:24,700 --> 00:31:31,750
now let's say I'm behind<font color="#CCCCCC"> read I'm not</font>

409
00:31:27,610 --> 00:31:34,570
what is this zip it a<font color="#E5E5E5"> library so there</font>

410
00:31:31,750 --> 00:31:40,150
is a tool called come zip which<font color="#CCCCCC"> compares</font>

411
00:31:34,570 --> 00:31:46,480
every contents of zip file but<font color="#CCCCCC"> bytes by</font>

412
00:31:40,150 --> 00:31:49,690
byte<font color="#CCCCCC"> on not only the the hash codes so</font>

413
00:31:46,480 --> 00:31:54,210
it's<font color="#E5E5E5"> checking so it opens every entry of</font>

414
00:31:49,690 --> 00:31:57,210
both<font color="#E5E5E5"> archive or everything fine</font>

415
00:31:54,210 --> 00:31:57,210
<font color="#CCCCCC">move</font>

416
00:31:57,270 --> 00:32:00,349
[Music]

417
00:32:02,490 --> 00:32:12,330
now I'm again<font color="#E5E5E5"> just showing the options</font>

418
00:32:07,200 --> 00:32:16,740
of<font color="#E5E5E5"> so you have different compression</font>

419
00:32:12,330 --> 00:32:21,780
schemes and what I've<font color="#CCCCCC"> just shown the</font>

420
00:32:16,740 --> 00:32:26,840
<font color="#E5E5E5">latest this</font><font color="#CCCCCC"> preselection method Zometa</font>

421
00:32:21,780 --> 00:32:26,840
method for doing<font color="#CCCCCC"> picking shoes</font>

422
00:32:33,300 --> 00:32:45,930
so let's see so<font color="#CCCCCC"> for instance the PDF PDF</font>

423
00:32:39,150 --> 00:32:52,200
files it chooses<font color="#CCCCCC"> lzma with certain</font>

424
00:32:45,930 --> 00:32:55,740
<font color="#E5E5E5">parameter so you have</font><font color="#CCCCCC"> 225</font><font color="#E5E5E5"> different ways</font>

425
00:32:52,200 --> 00:33:00,510
of configuring<font color="#E5E5E5"> configuring as a demo for</font>

426
00:32:55,740 --> 00:33:09,500
sense<font color="#CCCCCC"> so you have different sets for</font>

427
00:33:00,510 --> 00:33:09,500
different data types so as you see the

428
00:33:12,260 --> 00:33:22,230
latest compression so with<font color="#E5E5E5"> preselection</font>

429
00:33:16,140 --> 00:33:33,630
<font color="#E5E5E5">is hopefully smaller than the one</font><font color="#CCCCCC"> with</font>

430
00:33:22,230 --> 00:33:37,410
deflate and what can we do yes<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> it's</font>

431
00:33:33,630 --> 00:33:40,800
it for the demo<font color="#CCCCCC"> I</font><font color="#E5E5E5"> have some further</font>

432
00:33:37,410 --> 00:33:45,920
slides but I don't want<font color="#E5E5E5"> to it's a bit</font>

433
00:33:40,800 --> 00:33:51,090
technical and so I think I will stop I

434
00:33:45,920 --> 00:33:55,530
will stop<font color="#E5E5E5"> the</font><font color="#CCCCCC"> presentation here but I'm</font>

435
00:33:51,090 --> 00:34:03,149
<font color="#E5E5E5">sure there yep plenty of</font><font color="#CCCCCC"> questions</font>

436
00:33:55,530 --> 00:34:03,149
[Applause]

437
00:34:05,370 --> 00:34:12,129
well I actually do<font color="#CCCCCC"> have a technical</font>

438
00:34:07,630 --> 00:34:15,609
<font color="#CCCCCC">question here that's concerning</font><font color="#E5E5E5"> the the</font>

439
00:34:12,129 --> 00:34:17,409
<font color="#E5E5E5">trainable part yeah I'll go judging</font><font color="#CCCCCC"> by</font>

440
00:34:15,609 --> 00:34:19,750
the time line it was<font color="#E5E5E5"> that the flight</font><font color="#CCCCCC"> was</font>

441
00:34:17,409 --> 00:34:21,970
in the last year<font color="#E5E5E5"> I would suppose</font>

442
00:34:19,750 --> 00:34:24,460
nowadays people<font color="#CCCCCC"> who use recurrent neural</font>

443
00:34:21,969 --> 00:34:26,469
networks<font color="#E5E5E5"> that</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> be disgusting that</font>

444
00:34:24,460 --> 00:34:28,899
<font color="#E5E5E5">springs to mind</font><font color="#CCCCCC"> then you sleep</font><font color="#E5E5E5"> like the</font>

445
00:34:26,469 --> 00:34:40,149
training<font color="#CCCCCC"> part the topology was</font><font color="#E5E5E5"> training</font>

446
00:34:28,899 --> 00:34:43,089
parameters to the approach<font color="#E5E5E5"> is just</font>

447
00:34:40,149 --> 00:34:45,609
<font color="#CCCCCC">feeding</font><font color="#E5E5E5"> it's very simple</font><font color="#CCCCCC"> just feeding</font>

448
00:34:43,089 --> 00:34:49,000
data to the same company it's a very

449
00:34:45,609 --> 00:35:01,420
<font color="#CCCCCC">lazy it's I</font><font color="#E5E5E5"> just put into</font><font color="#CCCCCC"> the</font>

450
00:34:49,000 --> 00:35:08,470
compression compressor oil compressors

451
00:35:01,420 --> 00:35:12,760
begin with a neutral<font color="#E5E5E5"> state exactly</font>

452
00:35:08,470 --> 00:35:19,149
exactly exactly<font color="#E5E5E5"> and same time I'm</font><font color="#CCCCCC"> very</font>

453
00:35:12,760 --> 00:35:49,660
lazy<font color="#E5E5E5"> instead of saving but probably</font>

454
00:35:19,150 --> 00:35:53,260
there<font color="#CCCCCC"> are smarter ways or using but it</font>

455
00:35:49,660 --> 00:35:55,118
was only<font color="#E5E5E5"> for the experiment but you</font><font color="#CCCCCC"> can</font>

456
00:35:53,260 --> 00:36:06,640
put<font color="#E5E5E5"> the binary every you can put</font>

457
00:35:55,119 --> 00:36:08,560
<font color="#E5E5E5">everything yeah but as the chart with</font>

458
00:36:06,640 --> 00:36:12,310
the<font color="#E5E5E5"> comparison you</font><font color="#CCCCCC"> had excel file so</font>

459
00:36:08,560 --> 00:36:14,950
<font color="#E5E5E5">I've</font><font color="#CCCCCC"> trained with an excel file for</font>

460
00:36:12,310 --> 00:36:18,100
compressing an excel file on an

461
00:36:14,950 --> 00:36:20,950
executable was used for

462
00:36:18,100 --> 00:36:22,120
compressing an executable from for the

463
00:36:20,950 --> 00:36:26,290
same machine and so on

464
00:36:22,120 --> 00:36:30,700
of course you leverage<font color="#E5E5E5"> old as a human</font>

465
00:36:26,290 --> 00:36:58,779
<font color="#E5E5E5">when you put the the training data you</font>

466
00:36:30,700 --> 00:37:01,689
<font color="#E5E5E5">know are you you guess it will</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> tested</font>

467
00:36:58,780 --> 00:37:07,240
with<font color="#CCCCCC"> and they may because it's the most</font>

468
00:37:01,690 --> 00:37:11,430
<font color="#E5E5E5">powerful in</font><font color="#CCCCCC"> the toolbox</font><font color="#E5E5E5"> but for instance</font>

469
00:37:07,240 --> 00:37:20,169
<font color="#E5E5E5">with something like be zip to which is a</font>

470
00:37:11,430 --> 00:37:29,410
block sorting algorithms in huge blocks

471
00:37:20,170 --> 00:37:33,190
so<font color="#E5E5E5"> which are streaming compliant if you</font>

472
00:37:29,410 --> 00:37:35,589
want<font color="#E5E5E5"> so the the output stream is in the</font>

473
00:37:33,190 --> 00:38:03,070
same order<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the input stream</font>

474
00:37:35,590 --> 00:38:04,900
except<font color="#CCCCCC"> it's is squeezed and smaller yeah</font>

475
00:38:03,070 --> 00:38:09,930
well then do<font color="#CCCCCC"> you have the perfect</font>

476
00:38:04,900 --> 00:38:09,930
<font color="#E5E5E5">compression you</font><font color="#CCCCCC"> in have</font>

477
00:38:13,440 --> 00:39:17,080
<font color="#E5E5E5">so you would have you would</font><font color="#CCCCCC"> have just I</font>

478
00:39:12,450 --> 00:39:22,330
say I guess<font color="#E5E5E5"> you</font><font color="#CCCCCC"> wanted to do with Fedor</font>

479
00:39:17,080 --> 00:39:24,730
<font color="#E5E5E5">you restart the compression yeah but I</font>

480
00:39:22,330 --> 00:39:30,670
can I can tell you what will happen

481
00:39:24,730 --> 00:39:34,110
<font color="#CCCCCC">because the dictionary probably you have</font>

482
00:39:30,670 --> 00:39:41,070
set it as long<font color="#CCCCCC"> as</font><font color="#E5E5E5"> possible</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have</font>

483
00:39:34,110 --> 00:39:42,580
contained the decoded stuff the

484
00:39:41,070 --> 00:39:46,510
<font color="#E5E5E5">compression the</font>

485
00:39:42,580 --> 00:39:53,170
string match will notice that you just

486
00:39:46,510 --> 00:39:58,540
put the same so it will send a big just

487
00:39:53,170 --> 00:40:03,760
a single distance<font color="#E5E5E5"> length code just</font><font color="#CCCCCC"> the</font>

488
00:39:58,540 --> 00:40:07,090
length of the or your uncompressed thing

489
00:40:03,760 --> 00:40:09,400
and with the distance as well<font color="#E5E5E5"> that's it</font>

490
00:40:07,090 --> 00:40:11,620
<font color="#E5E5E5">just when one called</font>

491
00:40:09,400 --> 00:40:16,860
or perhaps<font color="#E5E5E5"> action if the lengths are</font>

492
00:40:11,620 --> 00:40:16,859
limited<font color="#CCCCCC"> a string of thanks</font><font color="#E5E5E5"> but</font>

493
00:40:17,309 --> 00:40:27,970
yeah<font color="#E5E5E5"> it won't help if you you want to</font>

494
00:40:23,740 --> 00:40:39,549
<font color="#E5E5E5">send to the</font><font color="#CCCCCC"> Machine</font><font color="#E5E5E5"> Bay machine B</font><font color="#CCCCCC"> does</font>

495
00:40:27,970 --> 00:40:51,819
<font color="#CCCCCC">not</font><font color="#E5E5E5"> know of your hosting so</font><font color="#CCCCCC"> I show you</font>

496
00:40:39,549 --> 00:41:01,990
<font color="#E5E5E5">again the the scheme I have two two</font>

497
00:40:51,819 --> 00:41:05,049
instances<font color="#CCCCCC"> too much okay so what you</font><font color="#E5E5E5"> need</font>

498
00:41:01,990 --> 00:41:26,709
to<font color="#E5E5E5"> send is this data in the</font><font color="#CCCCCC"> world</font>

499
00:41:05,049 --> 00:42:01,420
capsule<font color="#CCCCCC"> it's the data data slash is just</font>

500
00:41:26,710 --> 00:42:04,900
the compressed version<font color="#E5E5E5"> of data the first</font>

501
00:42:01,420 --> 00:42:07,920
<font color="#E5E5E5">here the first step</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> the first</font>

502
00:42:04,900 --> 00:42:12,340
step you feed the training data<font color="#CCCCCC"> first</font>

503
00:42:07,920 --> 00:42:16,180
into the compressor<font color="#E5E5E5"> and then you put the</font>

504
00:42:12,340 --> 00:42:20,140
could be itself<font color="#E5E5E5"> yes but you use you</font>

505
00:42:16,180 --> 00:42:31,980
don't know in<font color="#E5E5E5"> advance where the data if</font>

506
00:42:20,140 --> 00:42:36,190
you if you did you would need to exactly

507
00:42:31,980 --> 00:42:40,840
if you if<font color="#E5E5E5"> the training and data are the</font>

508
00:42:36,190 --> 00:43:23,950
same basically if you you don't<font color="#E5E5E5"> need to</font>

509
00:42:40,840 --> 00:43:33,340
<font color="#E5E5E5">transmit it because the training and</font>

510
00:43:23,950 --> 00:43:36,310
it's shipped<font color="#E5E5E5"> has when</font><font color="#CCCCCC"> okay it was so you</font>

511
00:43:33,340 --> 00:43:41,050
have some kind of presets dictionary

512
00:43:36,310 --> 00:43:45,670
when you want<font color="#E5E5E5"> to decompress</font><font color="#CCCCCC"> cement data</font>

513
00:43:41,050 --> 00:43:49,980
or specific data<font color="#E5E5E5"> yeah okay so</font><font color="#CCCCCC"> yeah they</font>

514
00:43:45,670 --> 00:43:49,980
<font color="#E5E5E5">have specific dictionaries</font>

515
00:43:57,980 --> 00:44:02,290
[Laughter]

516
00:44:08,800 --> 00:44:16,820
yeah so the recommendation is<font color="#E5E5E5"> roof</font>

517
00:44:13,730 --> 00:44:20,660
<font color="#CCCCCC">weight because it's it's basically</font>

518
00:44:16,820 --> 00:44:23,150
<font color="#E5E5E5">stainless you you can use your your</font><font color="#CCCCCC"> coat</font>

519
00:44:20,660 --> 00:44:26,180
<font color="#E5E5E5">after</font><font color="#CCCCCC"> years it's almost</font><font color="#E5E5E5"> boring because</font>

520
00:44:23,150 --> 00:44:32,210
<font color="#CCCCCC">you have a new</font><font color="#E5E5E5"> person you don't need to</font>

521
00:44:26,180 --> 00:44:38,899
adapt<font color="#CCCCCC"> to a new version</font><font color="#E5E5E5"> of a compiler</font><font color="#CCCCCC"> or</font>

522
00:44:32,210 --> 00:44:41,990
whatever<font color="#E5E5E5"> it you can do instead</font><font color="#CCCCCC"> of fixing</font>

523
00:44:38,900 --> 00:44:44,839
these compiler things or compatibility

524
00:44:41,990 --> 00:44:58,220
things<font color="#E5E5E5"> you can start other projects or</font>

525
00:44:44,839 --> 00:45:02,810
<font color="#CCCCCC">or go ahead with yes</font><font color="#E5E5E5"> because I've</font>

526
00:44:58,220 --> 00:45:08,500
noticed there's some some fashion shift

527
00:45:02,810 --> 00:45:13,040
<font color="#CCCCCC">to eight was known in</font><font color="#E5E5E5"> the history but</font>

528
00:45:08,500 --> 00:45:22,280
<font color="#E5E5E5">okay I have some if</font><font color="#CCCCCC"> you go at the end</font><font color="#E5E5E5"> of</font>

529
00:45:13,040 --> 00:45:26,750
the hidden<font color="#E5E5E5"> slides sorry</font><font color="#CCCCCC"> yeah oh yeah</font>

530
00:45:22,280 --> 00:45:32,240
<font color="#E5E5E5">yeah oh did I forget huh</font><font color="#CCCCCC"> I forget the</font>

531
00:45:26,750 --> 00:45:34,250
the github<font color="#CCCCCC"> oh oh it's table but you you</font>

532
00:45:32,240 --> 00:45:38,509
you you<font color="#CCCCCC"> you</font><font color="#E5E5E5"> will find you you</font><font color="#CCCCCC"> Google</font>

533
00:45:34,250 --> 00:45:40,839
github<font color="#E5E5E5"> Zepeda and should be should</font><font color="#CCCCCC"> be</font>

534
00:45:38,510 --> 00:45:40,839
<font color="#E5E5E5">okay</font>

535
00:45:50,180 --> 00:45:58,448
[Applause]

