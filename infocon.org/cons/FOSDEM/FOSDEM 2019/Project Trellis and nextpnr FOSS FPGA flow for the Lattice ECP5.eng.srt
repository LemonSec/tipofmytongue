1
00:00:05,140 --> 00:00:10,940
okay okay<font color="#CCCCCC"> hi I'm David</font><font color="#E5E5E5"> I'm a student at</font>

2
00:00:08,720 --> 00:00:13,400
Imperial College<font color="#E5E5E5"> London and an engineer</font>

3
00:00:10,940 --> 00:00:15,950
at symbiotic<font color="#E5E5E5"> EDA so I'm going to talk</font><font color="#CCCCCC"> a</font>

4
00:00:13,400 --> 00:00:18,619
<font color="#CCCCCC">bit today</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> open source fpga tools</font>

5
00:00:15,950 --> 00:00:19,849
just<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get a kind of quick idea of the</font>

6
00:00:18,619 --> 00:00:22,040
audience<font color="#CCCCCC"> ii i mean how many people have</font>

7
00:00:19,850 --> 00:00:24,470
used an<font color="#E5E5E5"> fpga anyway before</font>

8
00:00:22,040 --> 00:00:27,619
oh cool more than<font color="#CCCCCC"> i was expecting</font>

9
00:00:24,470 --> 00:00:30,020
awesome<font color="#E5E5E5"> so</font><font color="#CCCCCC"> justjust for</font><font color="#E5E5E5"> people</font><font color="#CCCCCC"> who</font>

10
00:00:27,620 --> 00:00:31,670
haven't before<font color="#E5E5E5"> so what is an FPGA field</font>

11
00:00:30,020 --> 00:00:35,269
programmable<font color="#CCCCCC"> gate array</font><font color="#E5E5E5"> it's a</font>

12
00:00:31,670 --> 00:00:38,120
programmable<font color="#E5E5E5"> digital logic</font><font color="#CCCCCC"> if you look</font>

13
00:00:35,270 --> 00:00:40,550
<font color="#CCCCCC">inside a</font><font color="#E5E5E5"> modern commercial</font><font color="#CCCCCC"> fpga</font><font color="#E5E5E5"> there</font>

14
00:00:38,120 --> 00:00:42,290
are two really fundamental elements

15
00:00:40,550 --> 00:00:44,959
there's a lookup table and the D

16
00:00:42,290 --> 00:00:47,480
flip-flop<font color="#CCCCCC"> lookup table has maybe</font><font color="#E5E5E5"> 4 6</font>

17
00:00:44,960 --> 00:00:49,520
inputs and<font color="#E5E5E5"> one output and</font><font color="#CCCCCC"> you just tell</font>

18
00:00:47,480 --> 00:00:51,260
<font color="#CCCCCC">it</font><font color="#E5E5E5"> what the binary value</font><font color="#CCCCCC"> of the output</font>

19
00:00:49,520 --> 00:00:53,270
should be<font color="#E5E5E5"> for</font><font color="#CCCCCC"> all possible combinations</font>

20
00:00:51,260 --> 00:00:56,149
of inputs<font color="#E5E5E5"> the other fundamental</font><font color="#CCCCCC"> in</font>

21
00:00:53,270 --> 00:00:58,489
element is a D flip-flop that's just one

22
00:00:56,149 --> 00:01:00,860
bit of memory<font color="#E5E5E5"> storage and that's used to</font>

23
00:00:58,489 --> 00:01:03,890
build sequential circuits that do more

24
00:01:00,860 --> 00:01:05,539
than just combinational logic<font color="#E5E5E5"> and all</font>

25
00:01:03,890 --> 00:01:07,520
those<font color="#CCCCCC"> elements are connected</font><font color="#E5E5E5"> together by</font>

26
00:01:05,540 --> 00:01:09,350
use<font color="#CCCCCC"> of programmable switches so</font>

27
00:01:07,520 --> 00:01:11,840
effectively you have a big big device

28
00:01:09,350 --> 00:01:13,669
full of programmable logic that<font color="#E5E5E5"> you can</font>

29
00:01:11,840 --> 00:01:16,430
build any logic circuit you want on<font color="#CCCCCC"> it</font>

30
00:01:13,670 --> 00:01:18,500
so it's kind of a much cheaper<font color="#E5E5E5"> way to do</font>

31
00:01:16,430 --> 00:01:20,180
<font color="#E5E5E5">your own logic than taping out your own</font>

32
00:01:18,500 --> 00:01:22,070
ASIC<font color="#E5E5E5"> well being a lot neater than</font>

33
00:01:20,180 --> 00:01:25,130
<font color="#E5E5E5">putting a load of logic chips on a</font>

34
00:01:22,070 --> 00:01:26,600
breadboard<font color="#E5E5E5"> this is all configured by</font>

35
00:01:25,130 --> 00:01:28,640
something<font color="#CCCCCC"> that we call a bit stream it</font>

36
00:01:26,600 --> 00:01:31,309
is literally<font color="#E5E5E5"> that</font><font color="#CCCCCC"> a load of bits</font><font color="#E5E5E5"> that</font>

37
00:01:28,640 --> 00:01:33,189
just set up all the functionality set up

38
00:01:31,310 --> 00:01:37,640
all the wiring<font color="#CCCCCC"> fill the</font><font color="#E5E5E5"> look-up tables</font>

39
00:01:33,189 --> 00:01:40,699
<font color="#E5E5E5">etc etc unfortunately</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> the sad</font>

40
00:01:37,640 --> 00:01:42,439
bit most FPGA development is uses the

41
00:01:40,700 --> 00:01:45,170
officially provided closed source tools

42
00:01:42,439 --> 00:01:46,548
and the companies<font color="#CCCCCC"> that sell</font><font color="#E5E5E5"> FPGAs they</font>

43
00:01:45,170 --> 00:01:48,080
don't tell you how these bit streams

44
00:01:46,549 --> 00:01:49,369
work it's<font color="#E5E5E5"> not like a</font><font color="#CCCCCC"> microcontroller</font>

45
00:01:48,080 --> 00:01:51,470
<font color="#CCCCCC">where</font><font color="#E5E5E5"> you get a big nice document</font>

46
00:01:49,369 --> 00:01:55,340
<font color="#E5E5E5">telling you what all the registers do</font>

47
00:01:51,470 --> 00:01:57,740
there's nothing<font color="#CCCCCC"> like that for</font><font color="#E5E5E5"> an FPGA so</font>

48
00:01:55,340 --> 00:02:01,299
I'm going<font color="#CCCCCC"> to particularly</font><font color="#E5E5E5"> talk about one</font>

49
00:01:57,740 --> 00:02:03,589
particular<font color="#E5E5E5"> FPGA the</font><font color="#CCCCCC"> lattice EC p5 and</font>

50
00:02:01,299 --> 00:02:04,100
that's what I've<font color="#CCCCCC"> been working</font><font color="#E5E5E5"> on</font>

51
00:02:03,590 --> 00:02:07,759
<font color="#E5E5E5">recently</font>

52
00:02:04,100 --> 00:02:10,038
so that has up<font color="#CCCCCC"> to 85,000 logic cell</font><font color="#E5E5E5"> a</font>

53
00:02:07,759 --> 00:02:13,220
<font color="#E5E5E5">logic cell is a standard</font><font color="#CCCCCC"> element</font><font color="#E5E5E5"> in FPGA</font>

54
00:02:10,038 --> 00:02:15,920
<font color="#E5E5E5">that's one for input lookup table</font><font color="#CCCCCC"> one D</font>

55
00:02:13,220 --> 00:02:18,609
type flip-flop and some dedicated carry

56
00:02:15,920 --> 00:02:21,530
logic for building fast adders

57
00:02:18,609 --> 00:02:24,650
it's got as well as<font color="#E5E5E5"> those basic elements</font>

58
00:02:21,530 --> 00:02:26,870
<font color="#CCCCCC">it has 3.7 megabits of</font><font color="#E5E5E5"> block</font><font color="#CCCCCC"> ram so</font>

59
00:02:24,650 --> 00:02:29,060
that's bigger 18 kilobit blocks of<font color="#CCCCCC"> ram</font>

60
00:02:26,870 --> 00:02:30,920
<font color="#E5E5E5">that you can build</font><font color="#CCCCCC"> to larger memory for</font>

61
00:02:29,060 --> 00:02:34,639
processors for<font color="#CCCCCC"> cache</font><font color="#E5E5E5"> all that kind of</font>

62
00:02:30,920 --> 00:02:36,950
<font color="#E5E5E5">stuff and it also has 156 18 by 18</font>

63
00:02:34,639 --> 00:02:39,069
multipliers so that's really<font color="#E5E5E5"> really</font>

64
00:02:36,950 --> 00:02:42,679
<font color="#CCCCCC">useful</font><font color="#E5E5E5"> for things like signal processing</font>

65
00:02:39,069 --> 00:02:45,138
video<font color="#E5E5E5"> effects</font><font color="#CCCCCC"> I think the kind of</font>

66
00:02:42,680 --> 00:02:49,389
vendors intended market<font color="#E5E5E5"> for this FPGA is</font>

67
00:02:45,139 --> 00:02:52,189
things<font color="#CCCCCC"> like small 4G base stations</font><font color="#E5E5E5"> and</font>

68
00:02:49,389 --> 00:02:53,959
finally<font color="#CCCCCC"> it has what we call 30 s3</font>

69
00:02:52,189 --> 00:02:56,599
<font color="#CCCCCC">gigabits per second or</font><font color="#E5E5E5"> five gigabits per</font>

70
00:02:53,959 --> 00:03:00,489
second that's for doing fast interfacing

71
00:02:56,599 --> 00:03:06,409
PCI Express USB 3.0<font color="#E5E5E5"> those kind of things</font>

72
00:03:00,489 --> 00:03:09,260
and it starts as well for its pricing

73
00:03:06,409 --> 00:03:11,750
starts<font color="#E5E5E5"> from $5 for the nominally</font><font color="#CCCCCC"> 12 K</font>

74
00:03:09,260 --> 00:03:14,719
logic element device<font color="#E5E5E5"> that's quite a bit</font>

75
00:03:11,750 --> 00:03:17,569
of<font color="#CCCCCC"> FPGA for your money</font><font color="#E5E5E5"> it's bigger and</font>

76
00:03:14,719 --> 00:03:20,659
<font color="#E5E5E5">cheaper</font><font color="#CCCCCC"> than the i-40</font><font color="#E5E5E5"> FPGAs that the</font>

77
00:03:17,569 --> 00:03:22,698
open source of the past<font color="#E5E5E5"> was supported so</font>

78
00:03:20,659 --> 00:03:26,620
looking<font color="#E5E5E5"> into the architecture</font><font color="#CCCCCC"> of this</font>

79
00:03:22,699 --> 00:03:30,079
FPGA<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a bit</font><font color="#E5E5E5"> more detail</font><font color="#CCCCCC"> you split the</font>

80
00:03:26,620 --> 00:03:32,180
chip up into what<font color="#E5E5E5"> we call tiles and each</font>

81
00:03:30,079 --> 00:03:37,189
<font color="#E5E5E5">of those tiles is then blocked a bit a</font>

82
00:03:32,180 --> 00:03:39,739
<font color="#CCCCCC">bit further into four slices a slice is</font>

83
00:03:37,189 --> 00:03:42,590
to look<font color="#E5E5E5"> up tables</font><font color="#CCCCCC"> two flip-flops</font>

84
00:03:39,739 --> 00:03:45,109
it can also<font color="#CCCCCC"> be configured</font><font color="#E5E5E5"> as a sixteen</font>

85
00:03:42,590 --> 00:03:48,620
by<font color="#E5E5E5"> two ram and two</font><font color="#CCCCCC"> flip-flops</font><font color="#E5E5E5"> and</font>

86
00:03:45,109 --> 00:03:50,269
there's some<font color="#CCCCCC"> to input multiplexers for</font>

87
00:03:48,620 --> 00:03:53,870
connecting those<font color="#E5E5E5"> look-up tables together</font>

88
00:03:50,269 --> 00:03:56,150
to build bigger look-up tables<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

89
00:03:53,870 --> 00:03:59,030
quite similar<font color="#CCCCCC"> to slices in lots of other</font>

90
00:03:56,150 --> 00:04:00,859
<font color="#E5E5E5">modern FPGA is the Xilinx FPGA</font><font color="#CCCCCC"> s have a</font>

91
00:03:59,030 --> 00:04:03,109
very very similar structure they just

92
00:04:00,859 --> 00:04:06,709
use<font color="#E5E5E5"> forum they just use six input</font><font color="#CCCCCC"> Lots</font>

93
00:04:03,109 --> 00:04:08,329
rather than<font color="#E5E5E5"> four input ones and then you</font>

94
00:04:06,709 --> 00:04:10,540
have a large<font color="#E5E5E5"> number of fixed</font>

95
00:04:08,329 --> 00:04:13,639
interconnect wires inside the chip and

96
00:04:10,540 --> 00:04:15,828
those are connected<font color="#E5E5E5"> together by what</font>

97
00:04:13,639 --> 00:04:18,289
<font color="#CCCCCC">lattice call arcs but in the</font><font color="#E5E5E5"> open source</font>

98
00:04:15,829 --> 00:04:20,418
world<font color="#E5E5E5"> and in the Xilinx world what</font><font color="#CCCCCC"> are</font>

99
00:04:18,289 --> 00:04:23,860
tend to<font color="#E5E5E5"> be called pip pip standing for</font>

100
00:04:20,418 --> 00:04:27,109
<font color="#E5E5E5">programmable interconnect point and</font>

101
00:04:23,860 --> 00:04:29,389
unlike<font color="#E5E5E5"> some earlier FPGAs</font><font color="#CCCCCC"> all the wires</font>

102
00:04:27,110 --> 00:04:31,440
<font color="#E5E5E5">and arcs are unidirectional so signals</font>

103
00:04:29,389 --> 00:04:33,740
only<font color="#E5E5E5"> ever go in one directions</font>

104
00:04:31,440 --> 00:04:35,969
if you actually look<font color="#CCCCCC"> at how the</font>

105
00:04:33,740 --> 00:04:36,990
connections work all the<font color="#E5E5E5"> programmer all</font>

106
00:04:35,970 --> 00:04:40,980
connections are basically just

107
00:04:36,990 --> 00:04:42,810
multiplexers between wires<font color="#CCCCCC"> and finally</font>

108
00:04:40,980 --> 00:04:44,670
you<font color="#E5E5E5"> have a dedicated global clock</font>

109
00:04:42,810 --> 00:04:46,740
<font color="#E5E5E5">network so the clocks of all the</font>

110
00:04:44,670 --> 00:04:48,690
registers have<font color="#E5E5E5"> like special</font><font color="#CCCCCC"> wiring going</font>

111
00:04:46,740 --> 00:04:50,850
<font color="#E5E5E5">to them because your clock needs to go</font>

112
00:04:48,690 --> 00:04:52,710
to<font color="#E5E5E5"> almost every point in the device you</font>

113
00:04:50,850 --> 00:04:56,880
don't<font color="#CCCCCC"> want to be using general routing</font>

114
00:04:52,710 --> 00:04:59,159
for<font color="#E5E5E5"> that so if you do a plot of</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the</font>

115
00:04:56,880 --> 00:05:01,380
tiles<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can find this inside the</font>

116
00:04:59,160 --> 00:05:02,730
<font color="#E5E5E5">open source bitstream documentation this</font>

117
00:05:01,380 --> 00:05:06,240
is what it<font color="#E5E5E5"> would</font><font color="#CCCCCC"> look like and this is</font>

118
00:05:02,730 --> 00:05:08,670
the<font color="#E5E5E5"> smallest DCP 5 FPGA</font><font color="#CCCCCC"> it's become</font>

119
00:05:06,240 --> 00:05:11,040
quite big quite<font color="#CCCCCC"> quickly</font><font color="#E5E5E5"> so obviously</font>

120
00:05:08,670 --> 00:05:15,630
this<font color="#CCCCCC"> is not</font><font color="#E5E5E5"> much</font><font color="#CCCCCC"> use but you can start</font>

121
00:05:11,040 --> 00:05:17,730
<font color="#E5E5E5">to see some rows of RAM Big Big C lots</font>

122
00:05:15,630 --> 00:05:22,230
and lots<font color="#E5E5E5"> and</font><font color="#CCCCCC"> lots of logic tiles and I</font>

123
00:05:17,730 --> 00:05:23,460
around<font color="#E5E5E5"> the edges so if you just look at</font>

124
00:05:22,230 --> 00:05:28,320
<font color="#E5E5E5">all these different</font><font color="#CCCCCC"> things got the</font>

125
00:05:23,460 --> 00:05:32,489
yellow<font color="#E5E5E5"> which is DSP and I and finally</font>

126
00:05:28,320 --> 00:05:35,010
<font color="#E5E5E5">the high speed 30s at the bottom so</font><font color="#CCCCCC"> just</font>

127
00:05:32,490 --> 00:05:37,290
zooming<font color="#CCCCCC"> into a much</font><font color="#E5E5E5"> smaller part of that</font>

128
00:05:35,010 --> 00:05:39,750
so that's<font color="#E5E5E5"> the i/o around the edges</font>

129
00:05:37,290 --> 00:05:42,000
there's the logic tiles and the logic

130
00:05:39,750 --> 00:05:44,070
tiles<font color="#CCCCCC"> contain both both the</font><font color="#E5E5E5"> logic</font>

131
00:05:42,000 --> 00:05:46,050
functionality<font color="#E5E5E5"> and also the interconnect</font>

132
00:05:44,070 --> 00:05:49,230
<font color="#CCCCCC">so the the connections between wires</font>

133
00:05:46,050 --> 00:05:50,880
that's programmable<font color="#CCCCCC"> there's actually</font>

134
00:05:49,230 --> 00:05:52,410
better phenomenally here because when

135
00:05:50,880 --> 00:05:54,150
<font color="#E5E5E5">you look at for example of RAM tile the</font>

136
00:05:52,410 --> 00:05:56,190
RAM tile doesn't<font color="#E5E5E5"> have any interconnect</font>

137
00:05:54,150 --> 00:05:57,900
in it just<font color="#E5E5E5"> has the functionality</font><font color="#CCCCCC"> for the</font>

138
00:05:56,190 --> 00:05:59,700
RAM and then you have a separate tile

139
00:05:57,900 --> 00:06:03,570
called a CI<font color="#E5E5E5"> B which</font><font color="#CCCCCC"> has the interconnect</font>

140
00:05:59,700 --> 00:06:06,240
in and the other<font color="#E5E5E5"> interesting anomaly is</font>

141
00:06:03,570 --> 00:06:07,920
that<font color="#E5E5E5"> they split the device up into a</font>

142
00:06:06,240 --> 00:06:09,090
kind of grid system but they don't

143
00:06:07,920 --> 00:06:10,860
<font color="#E5E5E5">really follow</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> great very well</font>

144
00:06:09,090 --> 00:06:13,260
because<font color="#E5E5E5"> you end up with in some cases</font>

145
00:06:10,860 --> 00:06:13,770
four or five tiles<font color="#E5E5E5"> all all at a single</font>

146
00:06:13,260 --> 00:06:17,460
<font color="#CCCCCC">location</font>

147
00:06:13,770 --> 00:06:22,310
so these tap<font color="#CCCCCC"> drive</font><font color="#E5E5E5"> tiles are part of the</font>

148
00:06:17,460 --> 00:06:24,770
<font color="#E5E5E5">global clock Network so I mentioned that</font>

149
00:06:22,310 --> 00:06:26,850
<font color="#E5E5E5">it's it's it's a unidirectional</font>

150
00:06:24,770 --> 00:06:29,039
<font color="#E5E5E5">architecture made up of multiplexers</font>

151
00:06:26,850 --> 00:06:31,200
<font color="#E5E5E5">once you've looked at the bit stream you</font>

152
00:06:29,040 --> 00:06:32,580
<font color="#E5E5E5">can actually start to get an idea what</font>

153
00:06:31,200 --> 00:06:34,380
the what<font color="#E5E5E5"> the silic what the circuits on</font>

154
00:06:32,580 --> 00:06:35,580
<font color="#CCCCCC">the silicon</font><font color="#E5E5E5"> would look like so this is</font>

155
00:06:34,380 --> 00:06:37,290
<font color="#E5E5E5">basically what programmable</font>

156
00:06:35,580 --> 00:06:40,260
interconnected an FPGA looks like so

157
00:06:37,290 --> 00:06:42,810
these 0 1 2 3<font color="#CCCCCC"> 4 are</font><font color="#E5E5E5"> bits in the bit</font>

158
00:06:40,260 --> 00:06:45,240
stream so these select one of<font color="#E5E5E5"> these six</font>

159
00:06:42,810 --> 00:06:47,520
signals coming<font color="#E5E5E5"> in</font><font color="#CCCCCC"> to a signal going</font>

160
00:06:45,240 --> 00:06:49,410
so for<font color="#E5E5E5"> example that connect</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the input</font>

161
00:06:47,520 --> 00:06:50,789
of<font color="#CCCCCC"> a logic function and these</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> be</font>

162
00:06:49,410 --> 00:06:53,009
your general routing<font color="#E5E5E5"> throughout the</font>

163
00:06:50,789 --> 00:06:55,349
device<font color="#E5E5E5"> and you always have this cascade</font>

164
00:06:53,009 --> 00:06:57,270
of<font color="#E5E5E5"> two multiplexers</font><font color="#CCCCCC"> which works out</font><font color="#E5E5E5"> to</font>

165
00:06:55,349 --> 00:07:01,650
<font color="#CCCCCC">be quite</font><font color="#E5E5E5"> an efficient way of doing this</font>

166
00:06:57,270 --> 00:07:03,180
<font color="#E5E5E5">on in the silicon you can</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> fact create</font>

167
00:07:01,650 --> 00:07:06,030
a short circuit<font color="#CCCCCC"> for example if you</font>

168
00:07:03,180 --> 00:07:08,009
enable one<font color="#E5E5E5"> three and four you</font><font color="#CCCCCC"> actually</font>

169
00:07:06,030 --> 00:07:10,770
end up<font color="#E5E5E5"> with an internal</font><font color="#CCCCCC"> short-circuit</font>

170
00:07:08,009 --> 00:07:12,720
<font color="#E5E5E5">and in theory if</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> enabled enough of</font>

171
00:07:10,770 --> 00:07:17,849
these<font color="#E5E5E5"> you could possibly get the chip to</font>

172
00:07:12,720 --> 00:07:19,889
<font color="#E5E5E5">be solder itself as legend goes it's not</font>

173
00:07:17,849 --> 00:07:21,300
<font color="#E5E5E5">something I've tried and it's hopefully</font>

174
00:07:19,889 --> 00:07:26,880
<font color="#CCCCCC">something that will never</font><font color="#E5E5E5"> happen but</font>

175
00:07:21,300 --> 00:07:28,169
<font color="#E5E5E5">could be a fun experiment so the</font><font color="#CCCCCC"> open</font>

176
00:07:26,880 --> 00:07:30,419
<font color="#CCCCCC">source tools where are they at</font><font color="#E5E5E5"> the</font>

177
00:07:28,169 --> 00:07:32,490
moment so<font color="#E5E5E5"> we have bitstream and routing</font>

178
00:07:30,419 --> 00:07:34,710
documentation for almost the entire

179
00:07:32,490 --> 00:07:35,909
functionality of this chip<font color="#E5E5E5"> the only</font>

180
00:07:34,710 --> 00:07:38,130
thing we're missing at the moment<font color="#CCCCCC"> are</font>

181
00:07:35,909 --> 00:07:40,680
some of the more obscure modes of the

182
00:07:38,130 --> 00:07:43,110
digital signal processing stuff that

183
00:07:40,680 --> 00:07:45,960
that's something<font color="#CCCCCC"> to look at a bit later</font>

184
00:07:43,110 --> 00:07:48,659
on<font color="#CCCCCC"> we have documentation</font><font color="#E5E5E5"> of all the</font>

185
00:07:45,960 --> 00:07:51,840
internal<font color="#E5E5E5"> delays the timing for the core</font>

186
00:07:48,659 --> 00:07:56,219
fabric the logic cells<font color="#E5E5E5"> input and output</font>

187
00:07:51,840 --> 00:07:58,799
<font color="#E5E5E5">and</font><font color="#CCCCCC"> RAM</font><font color="#E5E5E5"> and then we can use</font><font color="#CCCCCC"> that in a</font>

188
00:07:56,219 --> 00:08:00,509
timing driven<font color="#CCCCCC"> year</font><font color="#E5E5E5"> systems next day and</font>

189
00:07:58,800 --> 00:08:02,729
<font color="#E5E5E5">our flow supporting the majority of</font>

190
00:08:00,509 --> 00:08:05,599
functionality going fully open source

191
00:08:02,729 --> 00:08:08,729
<font color="#CCCCCC">all</font><font color="#E5E5E5"> the way from</font><font color="#CCCCCC"> Verilog Tibbets dream</font>

192
00:08:05,599 --> 00:08:10,530
so this open source<font color="#CCCCCC"> bit stream</font>

193
00:08:08,729 --> 00:08:12,419
documentation this<font color="#E5E5E5"> is part of the</font>

194
00:08:10,530 --> 00:08:14,580
<font color="#E5E5E5">documentation for a logic tile this is</font>

195
00:08:12,419 --> 00:08:17,099
an overview of<font color="#E5E5E5"> what all the bits do so</font>

196
00:08:14,580 --> 00:08:19,680
for example<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have the</font><font color="#CCCCCC"> lot the lot</font>

197
00:08:17,099 --> 00:08:23,930
bits at the<font color="#E5E5E5"> bottom routing bits for the</font>

198
00:08:19,680 --> 00:08:29,400
DBC<font color="#E5E5E5"> and a inputs vertical routing bits</font>

199
00:08:23,930 --> 00:08:31,500
some<font color="#E5E5E5"> miscellaneous input bits and then</font>

200
00:08:29,400 --> 00:08:33,208
if you scroll a bit down in<font color="#E5E5E5"> the database</font>

201
00:08:31,500 --> 00:08:35,490
you start to see individual

202
00:08:33,208 --> 00:08:37,828
configuration bits for a particular

203
00:08:35,490 --> 00:08:41,190
functionality so this is a routing

204
00:08:37,828 --> 00:08:43,228
multiplexer connecting from what some

205
00:08:41,190 --> 00:08:45,450
long-distance wires and the<font color="#CCCCCC"> luck outputs</font>

206
00:08:43,229 --> 00:08:47,940
<font color="#CCCCCC">onto another</font><font color="#E5E5E5"> long-distance wire so these</font>

207
00:08:45,450 --> 00:08:50,399
show which bits you have<font color="#E5E5E5"> to set to</font>

208
00:08:47,940 --> 00:08:52,709
<font color="#E5E5E5">enable the connection from that signal</font>

209
00:08:50,399 --> 00:08:55,199
<font color="#CCCCCC">onto that signal so you</font><font color="#E5E5E5"> can if you if</font>

210
00:08:52,709 --> 00:08:57,089
you remember<font color="#CCCCCC"> the</font><font color="#E5E5E5"> two input the</font><font color="#CCCCCC"> two-level</font>

211
00:08:55,199 --> 00:08:58,400
multiplexer I showed<font color="#E5E5E5"> a couple of</font><font color="#CCCCCC"> slides</font>

212
00:08:57,089 --> 00:08:59,720
ago<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see how</font>

213
00:08:58,400 --> 00:09:01,760
that's represented in the bitstream you

214
00:08:59,720 --> 00:09:08,720
always have two<font color="#E5E5E5"> bits enabled at a time</font>

215
00:09:01,760 --> 00:09:10,550
for any<font color="#E5E5E5"> connection then looking at</font>

216
00:09:08,720 --> 00:09:14,570
something<font color="#E5E5E5"> like the bits to configure a</font>

217
00:09:10,550 --> 00:09:16,939
lot<font color="#E5E5E5"> inside the database</font><font color="#CCCCCC"> so you have 16</font>

218
00:09:14,570 --> 00:09:19,190
bits<font color="#E5E5E5"> to configure a</font><font color="#CCCCCC"> 4 input</font><font color="#E5E5E5"> lookup table</font>

219
00:09:16,940 --> 00:09:21,170
and we just<font color="#CCCCCC"> map each bit</font><font color="#E5E5E5"> to say which</font>

220
00:09:19,190 --> 00:09:23,000
bit and the<font color="#CCCCCC"> bitstream</font><font color="#E5E5E5"> does a little</font>

221
00:09:21,170 --> 00:09:26,089
<font color="#E5E5E5">interesting thing in the</font><font color="#CCCCCC"> FPGA as the</font>

222
00:09:23,000 --> 00:09:28,130
bits are for reasons<font color="#E5E5E5"> totally unknown</font>

223
00:09:26,090 --> 00:09:29,900
actually inverted and that's just

224
00:09:28,130 --> 00:09:32,540
represented with the little exclamation

225
00:09:29,900 --> 00:09:34,250
<font color="#CCCCCC">mark in a database no idea why they did</font>

226
00:09:32,540 --> 00:09:38,000
that but<font color="#CCCCCC"> I'm sure there's a very very</font>

227
00:09:34,250 --> 00:09:40,490
<font color="#E5E5E5">good</font><font color="#CCCCCC"> reason</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have a few more settings</font>

228
00:09:38,000 --> 00:09:42,410
so for example the output output<font color="#CCCCCC"> width</font>

229
00:09:40,490 --> 00:09:44,270
<font color="#E5E5E5">of a block</font><font color="#CCCCCC"> Ram just have a list of</font><font color="#E5E5E5"> the</font>

230
00:09:42,410 --> 00:09:49,850
<font color="#CCCCCC">possible values and the bits you'd set</font>

231
00:09:44,270 --> 00:09:51,710
to enable enable<font color="#E5E5E5"> that width so to play</font>

232
00:09:49,850 --> 00:09:53,840
<font color="#E5E5E5">about a bit more I decided to make a</font>

233
00:09:51,710 --> 00:09:55,850
<font color="#E5E5E5">textual configuration format because a</font>

234
00:09:53,840 --> 00:09:58,070
bit streams just<font color="#E5E5E5"> a series</font><font color="#CCCCCC"> of bits it's</font>

235
00:09:55,850 --> 00:09:59,480
not very useful<font color="#E5E5E5"> to a human</font><font color="#CCCCCC"> so the</font><font color="#E5E5E5"> idea</font>

236
00:09:58,070 --> 00:10:01,310
is how<font color="#CCCCCC"> can we represent this in a way</font>

237
00:09:59,480 --> 00:10:03,380
<font color="#E5E5E5">that's still very</font><font color="#CCCCCC"> low-level not like</font>

238
00:10:01,310 --> 00:10:05,839
very<font color="#CCCCCC"> log source or anything but that's</font>

239
00:10:03,380 --> 00:10:08,840
<font color="#E5E5E5">easy to see what's going on and this</font><font color="#CCCCCC"> is</font>

240
00:10:05,840 --> 00:10:11,060
to test the fuzz results and so I built

241
00:10:08,840 --> 00:10:13,670
some<font color="#E5E5E5"> tools to convert bit streams to or</font>

242
00:10:11,060 --> 00:10:15,109
from<font color="#E5E5E5"> a</font><font color="#CCCCCC"> textual</font><font color="#E5E5E5"> config format so you</font><font color="#CCCCCC"> can</font>

243
00:10:13,670 --> 00:10:18,410
use that to check that<font color="#E5E5E5"> you're getting</font>

244
00:10:15,110 --> 00:10:20,840
sensible results<font color="#E5E5E5"> for simple designs look</font>

245
00:10:18,410 --> 00:10:23,150
for unknown bits<font color="#E5E5E5"> in bigger designs check</font>

246
00:10:20,840 --> 00:10:25,550
that you've worked everything out<font color="#E5E5E5"> and I</font>

247
00:10:23,150 --> 00:10:28,310
also ended up using this format as an

248
00:10:25,550 --> 00:10:30,560
intermediate format for post place and

249
00:10:28,310 --> 00:10:32,750
route designs in the end<font color="#E5E5E5"> so this is what</font>

250
00:10:30,560 --> 00:10:35,599
the format<font color="#E5E5E5"> looks like you have split up</font>

251
00:10:32,750 --> 00:10:38,090
<font color="#CCCCCC">into tiles</font><font color="#E5E5E5"> you have the Bark's the</font>

252
00:10:35,600 --> 00:10:40,340
connections<font color="#CCCCCC"> configuration words like</font><font color="#E5E5E5"> lot</font>

253
00:10:38,090 --> 00:10:42,710
initialization and the<font color="#E5E5E5"> enums which are</font>

254
00:10:40,340 --> 00:10:46,030
textual settings so this is a<font color="#E5E5E5"> slice</font>

255
00:10:42,710 --> 00:10:46,030
configured in<font color="#CCCCCC"> carry</font><font color="#E5E5E5"> mode</font>

256
00:10:51,639 --> 00:10:56,870
so as well<font color="#E5E5E5"> as bitstream documentation to</font>

257
00:10:54,379 --> 00:10:58,550
end up with a useful<font color="#CCCCCC"> FPGA flow in the</font>

258
00:10:56,870 --> 00:11:01,040
end you also need to<font color="#E5E5E5"> document the</font>

259
00:10:58,550 --> 00:11:02,779
internal timing<font color="#E5E5E5"> because again you need</font>

260
00:11:01,040 --> 00:11:04,550
<font color="#E5E5E5">to</font><font color="#CCCCCC"> know that a design does</font><font color="#E5E5E5"> that whether</font>

261
00:11:02,779 --> 00:11:07,160
<font color="#E5E5E5">or not a design can work at a given</font>

262
00:11:04,550 --> 00:11:08,689
frequency<font color="#E5E5E5"> so you need to know how big</font>

263
00:11:07,160 --> 00:11:10,670
the delays are<font color="#CCCCCC"> for the routing</font><font color="#E5E5E5"> and the</font>

264
00:11:08,689 --> 00:11:12,680
functionality<font color="#CCCCCC"> in order to do that</font><font color="#E5E5E5"> and</font>

265
00:11:10,670 --> 00:11:14,509
<font color="#E5E5E5">again like</font><font color="#CCCCCC"> the bitstream documentation</font>

266
00:11:12,680 --> 00:11:17,300
they provide some very very<font color="#E5E5E5"> high-level</font>

267
00:11:14,509 --> 00:11:19,970
documentation<font color="#E5E5E5"> or timing for example how</font>

268
00:11:17,300 --> 00:11:21,589
slower<font color="#E5E5E5"> a 16-bit adder might be but it's</font>

269
00:11:19,970 --> 00:11:24,439
nothing<font color="#CCCCCC"> useful enough to build</font><font color="#E5E5E5"> tools</font>

270
00:11:21,589 --> 00:11:26,870
with so again we had to<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to have to</font>

271
00:11:24,439 --> 00:11:28,459
document<font color="#CCCCCC"> that ourselves so the vendor</font>

272
00:11:26,870 --> 00:11:30,410
tools can create something<font color="#E5E5E5"> called on SDF</font>

273
00:11:28,459 --> 00:11:32,779
file from a design which gives<font color="#CCCCCC"> you all</font>

274
00:11:30,410 --> 00:11:34,610
<font color="#E5E5E5">the delays through the</font><font color="#CCCCCC"> cells so getting</font>

275
00:11:32,779 --> 00:11:37,850
the delays of<font color="#E5E5E5"> things like</font><font color="#CCCCCC"> lots was easy</font>

276
00:11:34,610 --> 00:11:40,009
enough<font color="#CCCCCC"> to</font><font color="#E5E5E5"> extract from routing was a bit</font>

277
00:11:37,850 --> 00:11:42,470
harder because they don't tell you<font color="#E5E5E5"> the</font>

278
00:11:40,009 --> 00:11:44,870
delay for<font color="#CCCCCC"> a particular connection</font><font color="#E5E5E5"> they</font>

279
00:11:42,470 --> 00:11:47,660
tell you<font color="#E5E5E5"> the delay for</font><font color="#CCCCCC"> a hole let net</font>

280
00:11:44,870 --> 00:11:49,699
which has multiple<font color="#E5E5E5"> connections in so in</font>

281
00:11:47,660 --> 00:11:51,730
<font color="#E5E5E5">the end that build up a kind of rough</font>

282
00:11:49,699 --> 00:11:54,729
hypothesis of<font color="#CCCCCC"> how the model</font><font color="#E5E5E5"> worked and</font>

283
00:11:51,730 --> 00:11:57,470
then<font color="#E5E5E5"> throw it into a least Grad solver</font>

284
00:11:54,730 --> 00:11:59,029
comparing<font color="#E5E5E5"> what I thought my model would</font>

285
00:11:57,470 --> 00:12:00,980
<font color="#CCCCCC">be with a load of unknown</font><font color="#E5E5E5"> parameters</font>

286
00:11:59,029 --> 00:12:03,259
against what the vendor tools say the

287
00:12:00,980 --> 00:12:04,730
delays actually are to work out all the

288
00:12:03,259 --> 00:12:09,800
all the routing delays for<font color="#E5E5E5"> the</font>

289
00:12:04,730 --> 00:12:12,350
individual<font color="#CCCCCC"> switches inside the FPGA so</font>

290
00:12:09,800 --> 00:12:15,559
that's kind of the documentation side of

291
00:12:12,350 --> 00:12:17,509
this talk done and so now from an

292
00:12:15,559 --> 00:12:20,329
end-user point of view what's the kind

293
00:12:17,509 --> 00:12:23,449
of actual FPGA flow that makes<font color="#E5E5E5"> use of</font>

294
00:12:20,329 --> 00:12:25,758
this documentation<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> useful stuff</font><font color="#E5E5E5"> so</font>

295
00:12:23,449 --> 00:12:27,979
the first part of the flow is<font color="#CCCCCC"> Joseph</font>

296
00:12:25,759 --> 00:12:30,610
<font color="#CCCCCC">Joseph is an open source synthesis</font>

297
00:12:27,980 --> 00:12:33,889
framework<font color="#E5E5E5"> verilock synthesis framework</font>

298
00:12:30,610 --> 00:12:36,949
it now supports multiple FPGA families

299
00:12:33,889 --> 00:12:39,589
so<font color="#CCCCCC"> ECP</font><font color="#E5E5E5"> 5 of course is 40 the traditional</font>

300
00:12:36,949 --> 00:12:42,219
open source fpga<font color="#CCCCCC"> it</font><font color="#E5E5E5"> supports synthesis</font>

301
00:12:39,589 --> 00:12:46,249
for Xilinx FPGA<font color="#E5E5E5"> is there's some</font><font color="#CCCCCC"> very</font>

302
00:12:42,220 --> 00:12:50,029
experimental support<font color="#E5E5E5"> for Intel and I</font>

303
00:12:46,249 --> 00:12:52,699
think<font color="#E5E5E5"> go in FPGA</font><font color="#CCCCCC"> Samir drug</font><font color="#E5E5E5"> has been</font>

304
00:12:50,029 --> 00:12:54,980
<font color="#CCCCCC">working on support for analogic</font><font color="#E5E5E5"> FPGAs so</font>

305
00:12:52,699 --> 00:12:57,170
yeah it supports a pretty good range<font color="#E5E5E5"> for</font>

306
00:12:54,980 --> 00:12:59,750
<font color="#E5E5E5">FPGAs but it's not just an FPGA</font>

307
00:12:57,170 --> 00:13:01,610
synthesis tool<font color="#E5E5E5"> it can do ASIC synthesis</font>

308
00:12:59,750 --> 00:13:03,890
it you

309
00:13:01,610 --> 00:13:05,870
<font color="#CCCCCC">as Berkeley ABC as its primary</font><font color="#E5E5E5"> route for</font>

310
00:13:03,890 --> 00:13:07,760
logic optimization<font color="#CCCCCC"> although there's</font><font color="#E5E5E5"> some</font>

311
00:13:05,870 --> 00:13:10,850
work at the<font color="#CCCCCC"> moment looking</font><font color="#E5E5E5"> at other ways</font>

312
00:13:07,760 --> 00:13:13,250
of doing that too as well as synthesis

313
00:13:10,850 --> 00:13:14,779
it can also do<font color="#E5E5E5"> formal equivalence</font>

314
00:13:13,250 --> 00:13:17,690
checking it can do assertion based

315
00:13:14,779 --> 00:13:19,459
formal verification<font color="#CCCCCC"> which is something</font>

316
00:13:17,690 --> 00:13:20,959
<font color="#E5E5E5">that as far</font><font color="#CCCCCC"> as you know there is very</font>

317
00:13:19,459 --> 00:13:22,699
<font color="#CCCCCC">little else out there in the open</font><font color="#E5E5E5"> source</font>

318
00:13:20,959 --> 00:13:26,149
world<font color="#E5E5E5"> and this can be a very very</font>

319
00:13:22,700 --> 00:13:27,950
<font color="#E5E5E5">powerful</font><font color="#CCCCCC"> way to verify designs and it's</font>

320
00:13:26,149 --> 00:13:30,110
got<font color="#E5E5E5"> all</font><font color="#CCCCCC"> kinds of other really obscure</font>

321
00:13:27,950 --> 00:13:32,750
things I think<font color="#E5E5E5"> it's got spice back-end</font>

322
00:13:30,110 --> 00:13:36,709
that<font color="#E5E5E5"> can do simple simulations</font><font color="#CCCCCC"> can do</font>

323
00:13:32,750 --> 00:13:39,620
<font color="#E5E5E5">transformations</font><font color="#CCCCCC"> in sorts so that gets</font>

324
00:13:36,709 --> 00:13:41,689
you from<font color="#CCCCCC"> your very</font><font color="#E5E5E5"> log to a netlist a</font>

325
00:13:39,620 --> 00:13:43,910
connection all all FPGA connected

326
00:13:41,690 --> 00:13:45,769
primitives so<font color="#E5E5E5"> lots</font><font color="#CCCCCC"> flip-flops but it</font>

327
00:13:43,910 --> 00:13:47,870
doesn't actually tell you<font color="#CCCCCC"> how they would</font>

328
00:13:45,769 --> 00:13:49,310
fit<font color="#E5E5E5"> together on the device so that's for</font>

329
00:13:47,870 --> 00:13:52,370
the<font color="#E5E5E5"> place and route tool to deal with</font>

330
00:13:49,310 --> 00:13:55,579
for that<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> next P</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> R</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a</font>

331
00:13:52,370 --> 00:13:57,519
new<font color="#E5E5E5"> open source</font><font color="#CCCCCC"> multi architecture</font><font color="#E5E5E5"> FPGA</font>

332
00:13:55,579 --> 00:14:00,380
place and route tool we started

333
00:13:57,519 --> 00:14:03,019
<font color="#CCCCCC">developing it</font><font color="#E5E5E5"> in early May</font><font color="#CCCCCC"> as a</font>

334
00:14:00,380 --> 00:14:05,899
replacement for<font color="#CCCCCC"> Arachne PNR the existing</font>

335
00:14:03,019 --> 00:14:08,930
tool for ice<font color="#CCCCCC"> 40 that was very</font><font color="#E5E5E5"> very much</font>

336
00:14:05,899 --> 00:14:10,250
a tool for ice<font color="#CCCCCC"> 40 FPGAs only it</font><font color="#E5E5E5"> it</font>

337
00:14:08,930 --> 00:14:12,920
wasn't<font color="#E5E5E5"> really portable to any other</font>

338
00:14:10,250 --> 00:14:15,110
<font color="#E5E5E5">FPGAs and the other alternative we</font>

339
00:14:12,920 --> 00:14:17,029
looked at was<font color="#E5E5E5"> VP are versatile</font><font color="#CCCCCC"> places on</font>

340
00:14:15,110 --> 00:14:19,430
route that's quite a well-known academic

341
00:14:17,029 --> 00:14:21,949
tool but it's<font color="#CCCCCC"> really not very useful for</font>

342
00:14:19,430 --> 00:14:26,899
doing<font color="#E5E5E5"> real place in route for real FPGAs</font>

343
00:14:21,949 --> 00:14:29,240
<font color="#E5E5E5">generating bit streams so yeah it's very</font>

344
00:14:26,899 --> 00:14:32,180
much<font color="#CCCCCC"> the design</font><font color="#E5E5E5"> of next</font><font color="#CCCCCC"> PR is for real</font>

345
00:14:29,240 --> 00:14:34,490
FPGA bitstream generation unlike<font color="#E5E5E5"> VP</font><font color="#CCCCCC"> R</font>

346
00:14:32,180 --> 00:14:38,569
which is<font color="#CCCCCC"> more for academic architecture</font>

347
00:14:34,490 --> 00:14:40,430
research<font color="#E5E5E5"> and again unlike a rack Nepean</font>

348
00:14:38,570 --> 00:14:46,490
<font color="#CCCCCC">are</font><font color="#E5E5E5"> the-- another older open-source tool</font>

349
00:14:40,430 --> 00:14:48,859
it's fully timing driven so it's multi

350
00:14:46,490 --> 00:14:51,199
architecture but unlike previous multi

351
00:14:48,860 --> 00:14:53,870
architecture place and route tools next

352
00:14:51,199 --> 00:14:55,609
<font color="#E5E5E5">P and architecture implements an API it</font>

353
00:14:53,870 --> 00:14:59,269
doesn't just provide say I set to<font color="#CCCCCC"> fixed</font>

354
00:14:55,610 --> 00:15:00,709
XML files or JSON files so that<font color="#CCCCCC"> gives</font>

355
00:14:59,269 --> 00:15:04,640
you a lot<font color="#CCCCCC"> of choice in terms of</font><font color="#E5E5E5"> how you</font>

356
00:15:00,709 --> 00:15:06,469
store the device database<font color="#E5E5E5"> so you can use</font>

357
00:15:04,640 --> 00:15:08,689
and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> also implement things like</font>

358
00:15:06,470 --> 00:15:10,910
custom<font color="#E5E5E5"> Packer to combine logic together</font>

359
00:15:08,690 --> 00:15:12,890
<font color="#CCCCCC">this turns out to be a very architecture</font>

360
00:15:10,910 --> 00:15:14,180
specific task<font color="#E5E5E5"> you often need</font>

361
00:15:12,890 --> 00:15:16,220
architecture specific

362
00:15:14,180 --> 00:15:18,439
specific logic<font color="#E5E5E5"> that's quite hard to</font>

363
00:15:16,220 --> 00:15:19,700
describe<font color="#E5E5E5"> in a flat file but very very</font>

364
00:15:18,440 --> 00:15:23,780
<font color="#E5E5E5">easy to describe when you're</font>

365
00:15:19,700 --> 00:15:25,880
implementing an API<font color="#E5E5E5"> so if you look very</font>

366
00:15:23,780 --> 00:15:28,339
<font color="#E5E5E5">briefly</font><font color="#CCCCCC"> at what an architecture has</font><font color="#E5E5E5"> to</font>

367
00:15:25,880 --> 00:15:30,830
provide<font color="#E5E5E5"> it has to provide some black box</font>

368
00:15:28,340 --> 00:15:32,810
<font color="#CCCCCC">ID types we don't</font><font color="#E5E5E5"> even mandate these</font>

369
00:15:30,830 --> 00:15:35,270
because<font color="#E5E5E5"> some architectures will just</font>

370
00:15:32,810 --> 00:15:37,099
have a flat ID in some architectures

371
00:15:35,270 --> 00:15:40,310
it's easier to represent<font color="#E5E5E5"> an ID as a</font>

372
00:15:37,100 --> 00:15:42,470
location<font color="#E5E5E5"> and an index</font><font color="#CCCCCC"> then you have</font>

373
00:15:40,310 --> 00:15:44,390
functions<font color="#E5E5E5"> like get bells so that's the</font>

374
00:15:42,470 --> 00:15:45,530
list of bells the<font color="#E5E5E5"> list of</font><font color="#CCCCCC"> for blocks</font>

375
00:15:44,390 --> 00:15:48,140
inside an FPGA

376
00:15:45,530 --> 00:15:50,060
<font color="#E5E5E5">get pips the list of connections</font><font color="#CCCCCC"> get</font>

377
00:15:48,140 --> 00:15:51,860
wires the list of wires<font color="#E5E5E5"> and then you</font>

378
00:15:50,060 --> 00:15:54,229
have<font color="#E5E5E5"> things</font><font color="#CCCCCC"> like get pips</font><font color="#E5E5E5"> up hill on a</font>

379
00:15:51,860 --> 00:15:57,260
wire<font color="#E5E5E5"> so the number of pips that can</font>

380
00:15:54,230 --> 00:15:59,630
drive a wire for example and these are

381
00:15:57,260 --> 00:16:02,689
specified<font color="#CCCCCC"> to</font><font color="#E5E5E5"> return some kind of range</font>

382
00:15:59,630 --> 00:16:04,790
as we say of a<font color="#CCCCCC"> bell ID of a pip idea etc</font>

383
00:16:02,690 --> 00:16:06,200
again we<font color="#E5E5E5"> don't actually mandate what</font>

384
00:16:04,790 --> 00:16:08,510
that range<font color="#E5E5E5"> is how that range is</font>

385
00:16:06,200 --> 00:16:11,540
implemented<font color="#E5E5E5"> so we say you know</font><font color="#CCCCCC"> arrange</font>

386
00:16:08,510 --> 00:16:13,670
<font color="#E5E5E5">typical C++ range as to implement begin</font>

387
00:16:11,540 --> 00:16:15,530
and end those return<font color="#E5E5E5"> iterate as</font>

388
00:16:13,670 --> 00:16:17,599
iterators have to have to have<font color="#CCCCCC"> to</font>

389
00:16:15,530 --> 00:16:19,370
<font color="#E5E5E5">implement plus plus dereferencing not</font>

390
00:16:17,600 --> 00:16:20,420
equal to this is I<font color="#E5E5E5"> think quite</font><font color="#CCCCCC"> a bit</font>

391
00:16:19,370 --> 00:16:22,910
<font color="#E5E5E5">more liberal than them</font>

392
00:16:20,420 --> 00:16:25,819
C++ specification really this is all<font color="#E5E5E5"> we</font>

393
00:16:22,910 --> 00:16:27,170
<font color="#CCCCCC">require so if you're doing</font><font color="#E5E5E5"> an</font>

394
00:16:25,820 --> 00:16:29,090
architecture where maybe it's quite

395
00:16:27,170 --> 00:16:31,430
small<font color="#E5E5E5"> performances</font><font color="#CCCCCC"> and isn't a priority</font>

396
00:16:29,090 --> 00:16:33,710
<font color="#CCCCCC">just</font><font color="#E5E5E5"> return a reference</font><font color="#CCCCCC"> for an STD</font>

397
00:16:31,430 --> 00:16:36,589
vector<font color="#CCCCCC"> if you're doing</font><font color="#E5E5E5"> a big big</font>

398
00:16:33,710 --> 00:16:38,990
<font color="#E5E5E5">architecture</font><font color="#CCCCCC"> biggie cp5 Xilinx FPGA s</font>

399
00:16:36,590 --> 00:16:42,050
these iterators can actually be custom

400
00:16:38,990 --> 00:16:43,910
<font color="#CCCCCC">workers over a complicated deduplicated</font>

401
00:16:42,050 --> 00:16:45,910
database structure so a lot<font color="#E5E5E5"> of</font>

402
00:16:43,910 --> 00:16:49,850
flexibility here

403
00:16:45,910 --> 00:16:51,709
so each architecture has its own folder

404
00:16:49,850 --> 00:16:53,360
<font color="#E5E5E5">in the next year and our</font><font color="#CCCCCC"> source tree and</font>

405
00:16:51,710 --> 00:16:55,070
we build a<font color="#E5E5E5"> different binary for each</font>

406
00:16:53,360 --> 00:16:56,450
architecture<font color="#E5E5E5"> I know this seems like</font>

407
00:16:55,070 --> 00:16:58,340
<font color="#CCCCCC">quite an old-fashioned way of doing</font>

408
00:16:56,450 --> 00:17:00,740
polymorphism but it has a lot of

409
00:16:58,340 --> 00:17:03,560
<font color="#CCCCCC">advantages</font><font color="#E5E5E5"> we can do heavy heavy compile</font>

410
00:17:00,740 --> 00:17:05,959
<font color="#E5E5E5">time optimization</font><font color="#CCCCCC"> lots of inlining and</font>

411
00:17:03,560 --> 00:17:09,050
go on and architectures can<font color="#E5E5E5"> provide</font>

412
00:17:05,959 --> 00:17:11,150
their own<font color="#E5E5E5"> data types but unlike say</font>

413
00:17:09,050 --> 00:17:12,680
you're doing<font color="#CCCCCC"> this</font><font color="#E5E5E5"> for C++ templates you</font>

414
00:17:11,150 --> 00:17:14,600
don't have the big big build cost then

415
00:17:12,680 --> 00:17:18,770
of pausing Hallowed have had<font color="#E5E5E5"> ever all</font>

416
00:17:14,599 --> 00:17:21,349
your<font color="#CCCCCC"> coding up in header files so the</font>

417
00:17:18,770 --> 00:17:24,500
next<font color="#CCCCCC"> Panda has good support for ice</font><font color="#E5E5E5"> 14</font>

418
00:17:21,349 --> 00:17:26,119
<font color="#E5E5E5">DCP 5 FPGAs there's some more</font>

419
00:17:24,500 --> 00:17:27,430
experimental work going on<font color="#CCCCCC"> on other</font>

420
00:17:26,119 --> 00:17:29,679
<font color="#E5E5E5">FPGAs</font>

421
00:17:27,430 --> 00:17:30,760
was a very very<font color="#E5E5E5"> experimental support for</font>

422
00:17:29,680 --> 00:17:33,760
zhiling<font color="#E5E5E5"> 7-series</font>

423
00:17:30,760 --> 00:17:36,190
using not a full<font color="#CCCCCC"> open-source flow but</font>

424
00:17:33,760 --> 00:17:39,220
using<font color="#CCCCCC"> talk which is an academic project</font>

425
00:17:36,190 --> 00:17:40,690
to<font color="#E5E5E5"> get the device database and</font><font color="#CCCCCC"> XTL going</font>

426
00:17:39,220 --> 00:17:42,550
through<font color="#CCCCCC"> ISE to do the</font><font color="#E5E5E5"> bitstream</font>

427
00:17:40,690 --> 00:17:44,800
generation but this is very<font color="#E5E5E5"> very</font>

428
00:17:42,550 --> 00:17:47,290
experimental it's mostly for doing

429
00:17:44,800 --> 00:17:48,580
<font color="#E5E5E5">research on very very</font><font color="#CCCCCC"> big fpga z it</font>

430
00:17:47,290 --> 00:17:50,639
<font color="#E5E5E5">literally just</font><font color="#CCCCCC"> supports lot some</font>

431
00:17:48,580 --> 00:17:53,230
<font color="#E5E5E5">flip-flops</font><font color="#CCCCCC"> no Ram nothing fancy but</font>

432
00:17:50,640 --> 00:17:55,600
<font color="#E5E5E5">we're hoping to develop this zhiling</font>

433
00:17:53,230 --> 00:17:57,940
support<font color="#E5E5E5"> further this year</font><font color="#CCCCCC"> and in the</font>

434
00:17:55,600 --> 00:18:00,250
<font color="#CCCCCC">future we're also looking at a so called</font>

435
00:17:57,940 --> 00:18:02,560
generic architecture where you<font color="#E5E5E5"> can build</font>

436
00:18:00,250 --> 00:18:05,590
<font color="#E5E5E5">up</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> FPGA programmatically using</font><font color="#CCCCCC"> a</font>

437
00:18:02,560 --> 00:18:07,780
<font color="#E5E5E5">Python API maybe even specify the list</font>

438
00:18:05,590 --> 00:18:12,760
of the list of wires in a CSV<font color="#E5E5E5"> file for</font>

439
00:18:07,780 --> 00:18:14,260
<font color="#CCCCCC">example looking at</font><font color="#E5E5E5"> things like that over</font>

440
00:18:12,760 --> 00:18:16,810
<font color="#CCCCCC">the summer we started with a very very</font>

441
00:18:14,260 --> 00:18:19,000
<font color="#E5E5E5">basic set of very traditional FPGA place</font>

442
00:18:16,810 --> 00:18:21,730
and route algorithms<font color="#E5E5E5"> simulated annealing</font>

443
00:18:19,000 --> 00:18:23,650
placement<font color="#E5E5E5"> and a kind of a starbase</font><font color="#CCCCCC"> route</font>

444
00:18:21,730 --> 00:18:25,660
<font color="#CCCCCC">oh</font><font color="#E5E5E5"> and now now that</font><font color="#CCCCCC"> that those</font><font color="#E5E5E5"> are</font>

445
00:18:23,650 --> 00:18:28,450
<font color="#CCCCCC">working</font><font color="#E5E5E5"> well we can look at more</font>

446
00:18:25,660 --> 00:18:31,090
advanced<font color="#CCCCCC"> algorithms so I've been looking</font>

447
00:18:28,450 --> 00:18:33,250
<font color="#CCCCCC">at ways</font><font color="#E5E5E5"> of improving the place our</font><font color="#CCCCCC"> path</font>

448
00:18:31,090 --> 00:18:35,409
<font color="#CCCCCC">driven</font><font color="#E5E5E5"> detail placement</font><font color="#CCCCCC"> just two</font><font color="#E5E5E5"> weeks</font>

449
00:18:33,250 --> 00:18:37,060
<font color="#E5E5E5">ago I started working on an islet on</font>

450
00:18:35,410 --> 00:18:39,370
analytical<font color="#E5E5E5"> placer which will give</font><font color="#CCCCCC"> us</font>

451
00:18:37,060 --> 00:18:41,649
much much<font color="#E5E5E5"> better performance on bigger</font>

452
00:18:39,370 --> 00:18:43,899
<font color="#E5E5E5">FPGAs than the existing simulated</font>

453
00:18:41,650 --> 00:18:45,970
annealing placer meanwhile others are

454
00:18:43,900 --> 00:18:48,100
<font color="#CCCCCC">looking at Sat based placement and</font>

455
00:18:45,970 --> 00:18:49,870
packing that<font color="#E5E5E5"> will give very very very</font>

456
00:18:48,100 --> 00:18:51,969
<font color="#E5E5E5">good</font><font color="#CCCCCC"> performance but will be quite</font><font color="#E5E5E5"> slow</font>

457
00:18:49,870 --> 00:18:53,409
so<font color="#CCCCCC"> that might</font><font color="#E5E5E5"> be good for the small</font><font color="#CCCCCC"> ice</font>

458
00:18:51,970 --> 00:18:57,010
40s where you're really<font color="#CCCCCC"> really pushing</font>

459
00:18:53,410 --> 00:19:00,310
<font color="#CCCCCC">them to the limits as well as being</font>

460
00:18:57,010 --> 00:19:03,520
extendable by writing<font color="#E5E5E5"> C++ we've also got</font>

461
00:19:00,310 --> 00:19:06,700
a Python API<font color="#E5E5E5"> that's usable for writing</font>

462
00:19:03,520 --> 00:19:09,160
extensions<font color="#E5E5E5"> we also use it in place of</font>

463
00:19:06,700 --> 00:19:11,230
<font color="#CCCCCC">the</font><font color="#E5E5E5"> tuckle api</font><font color="#CCCCCC"> that vendor fpga tools</font>

464
00:19:09,160 --> 00:19:13,240
tend<font color="#E5E5E5"> to have for implementing timing</font>

465
00:19:11,230 --> 00:19:16,660
constraints doing small manipulations

466
00:19:13,240 --> 00:19:18,640
<font color="#E5E5E5">even prototyping new algorithms and as</font>

467
00:19:16,660 --> 00:19:20,620
well as that<font color="#CCCCCC"> it's got a graphical user</font>

468
00:19:18,640 --> 00:19:23,350
interface so you<font color="#E5E5E5"> can see this is</font>

469
00:19:20,620 --> 00:19:25,840
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> nice</font><font color="#CCCCCC"> 40 FPGA</font><font color="#E5E5E5"> interactive Python</font>

470
00:19:23,350 --> 00:19:30,760
console and<font color="#E5E5E5"> you can explore the</font><font color="#CCCCCC"> netlist</font>

471
00:19:25,840 --> 00:19:33,610
there so just<font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of idea what the open</font>

472
00:19:30,760 --> 00:19:36,460
source<font color="#E5E5E5"> tools can do this is a SOC open</font>

473
00:19:33,610 --> 00:19:41,020
RISC SOC<font color="#E5E5E5"> booting Linux implemented on</font>

474
00:19:36,460 --> 00:19:41,410
<font color="#E5E5E5">the ECP 5 FPGA built very log tab it's</font>

475
00:19:41,020 --> 00:19:44,440
true

476
00:19:41,410 --> 00:19:46,470
with with<font color="#CCCCCC"> open-source tools and an</font>

477
00:19:44,440 --> 00:19:50,200
<font color="#E5E5E5">open-source design in the first place</font>

478
00:19:46,470 --> 00:19:54,850
that's<font color="#E5E5E5"> the yeah the UL x3s</font><font color="#CCCCCC"> ETV five</font>

479
00:19:50,200 --> 00:19:56,860
board from<font color="#CCCCCC"> croatia finally a very very</font>

480
00:19:54,850 --> 00:19:58,290
brief announcement<font color="#E5E5E5"> if this stuff is of</font>

481
00:19:56,860 --> 00:20:00,159
interest to<font color="#E5E5E5"> you there's going to</font><font color="#CCCCCC"> be a</font>

482
00:19:58,290 --> 00:20:02,440
<font color="#E5E5E5">workshop on open source design</font>

483
00:20:00,160 --> 00:20:05,080
automation<font color="#CCCCCC"> looking at open source tools</font>

484
00:20:02,440 --> 00:20:07,900
for<font color="#E5E5E5"> FPGAs and</font><font color="#CCCCCC"> a thick that's Friday</font>

485
00:20:05,080 --> 00:20:11,500
March the 29th this year at from date

486
00:20:07,900 --> 00:20:13,870
2019 which sort of EDA tool tools event

487
00:20:11,500 --> 00:20:18,220
in in Florence in Italy so maybe that's

488
00:20:13,870 --> 00:20:20,350
of interest<font color="#E5E5E5"> to</font><font color="#CCCCCC"> you so interested in</font>

489
00:20:18,220 --> 00:20:22,750
finding<font color="#E5E5E5"> out more so project trellis the</font>

490
00:20:20,350 --> 00:20:25,990
bitstream documentation is there yo sis

491
00:20:22,750 --> 00:20:29,260
synthesis there<font color="#CCCCCC"> next P and are all on</font>

492
00:20:25,990 --> 00:20:32,620
github<font color="#CCCCCC"> all ISC license</font><font color="#E5E5E5"> a permissive</font>

493
00:20:29,260 --> 00:20:35,080
<font color="#CCCCCC">open-source slides</font><font color="#E5E5E5"> and if you want to</font>

494
00:20:32,620 --> 00:20:36,310
get<font color="#E5E5E5"> involved then IRC is a great place</font>

495
00:20:35,080 --> 00:20:41,189
to<font color="#E5E5E5"> get involved</font>

496
00:20:36,310 --> 00:20:41,190
<font color="#E5E5E5">hashey</font><font color="#CCCCCC"> OSIS hash</font><font color="#E5E5E5"> open fpga</font><font color="#CCCCCC"> on freenode</font>

497
00:20:42,670 --> 00:20:53,400
[Applause]

498
00:21:00,520 --> 00:21:05,809
the question is can you fill the<font color="#E5E5E5"> 10</font>

499
00:21:03,620 --> 00:21:08,030
gigabit<font color="#E5E5E5"> and Nick with the ECP 5 have you</font>

500
00:21:05,809 --> 00:21:12,830
paired<font color="#E5E5E5"> it up with a PCIe fi sort of</font>

501
00:21:08,030 --> 00:21:16,010
thing<font color="#CCCCCC"> so the ECP 5 has 4 sardis in total</font>

502
00:21:12,830 --> 00:21:18,710
and you need<font color="#CCCCCC"> exactly 4 30s to do a</font>

503
00:21:16,010 --> 00:21:27,020
gigabit to do 10<font color="#CCCCCC"> gigabit ethernet</font><font color="#E5E5E5"> with</font>

504
00:21:18,710 --> 00:21:30,620
it<font color="#E5E5E5"> running</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> s I</font><font color="#CCCCCC"> have the the the four</font>

505
00:21:27,020 --> 00:21:32,720
3.125 Gigabit Ethernet protocol going

506
00:21:30,620 --> 00:21:35,030
into a fighter tango reasoner so that's

507
00:21:32,720 --> 00:21:37,549
fine<font color="#E5E5E5"> you</font><font color="#CCCCCC"> see p5 can do that but</font><font color="#E5E5E5"> then</font>

508
00:21:35,030 --> 00:21:39,200
you're left with no<font color="#CCCCCC"> sir DS lanes for a</font>

509
00:21:37,549 --> 00:21:41,658
PCI<font color="#CCCCCC"> Express so you would don't need</font><font color="#E5E5E5"> to</font>

510
00:21:39,200 --> 00:21:43,850
<font color="#E5E5E5">use an external PCI Express fire using</font>

511
00:21:41,659 --> 00:21:56,659
regular<font color="#CCCCCC"> IO so it's doable but</font><font color="#E5E5E5"> it's very</font>

512
00:21:43,850 --> 00:21:58,699
much of the limits of<font color="#CCCCCC"> BC</font><font color="#E5E5E5"> p5 for a given</font>

513
00:21:56,659 --> 00:22:01,070
input<font color="#E5E5E5"> can the bitstream be the same for</font>

514
00:21:58,700 --> 00:22:04,539
a build<font color="#CCCCCC"> I</font><font color="#E5E5E5"> are you talking about against</font>

515
00:22:01,070 --> 00:22:04,539
ourselves or against the vendor tools

516
00:22:06,409 --> 00:22:12,830
it suddenly aims to be reproducible<font color="#E5E5E5"> yes</font>

517
00:22:10,750 --> 00:22:14,600
there have been<font color="#CCCCCC"> a few</font><font color="#E5E5E5"> places where we've</font>

518
00:22:12,830 --> 00:22:16,760
accidentally relied on unordered map

519
00:22:14,600 --> 00:22:18,350
ordering in C++ which tends<font color="#E5E5E5"> to mean that</font>

520
00:22:16,760 --> 00:22:20,330
it's it's reproducible on the same

521
00:22:18,350 --> 00:22:21,800
machines but not on other<font color="#E5E5E5"> machines but I</font>

522
00:22:20,330 --> 00:22:29,540
think we've got<font color="#CCCCCC"> rid of</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of those so</font>

523
00:22:21,800 --> 00:22:31,580
it should<font color="#E5E5E5"> be</font><font color="#CCCCCC"> reproducible now so you</font>

524
00:22:29,540 --> 00:22:34,639
question is you<font color="#CCCCCC"> mentioned</font><font color="#E5E5E5"> Ram is ddr3</font>

525
00:22:31,580 --> 00:22:37,429
possible<font color="#CCCCCC"> yes the AC p5 has</font><font color="#E5E5E5"> I oh that's</font>

526
00:22:34,640 --> 00:22:39,410
<font color="#CCCCCC">definitely designed to support ddr3</font><font color="#E5E5E5"> I'm</font>

527
00:22:37,430 --> 00:22:41,420
on the last stages of<font color="#E5E5E5"> the open source</font>

528
00:22:39,410 --> 00:22:43,550
<font color="#CCCCCC">tool support for that my master's thesis</font>

529
00:22:41,420 --> 00:22:45,500
is very much in the<font color="#CCCCCC"> direction</font><font color="#E5E5E5"> of getting</font>

530
00:22:43,550 --> 00:22:54,590
<font color="#E5E5E5">the tools to a point where a ddr3</font>

531
00:22:45,500 --> 00:22:56,630
controller can work how<font color="#E5E5E5"> do the vendors</font>

532
00:22:54,590 --> 00:23:00,470
react to these tools<font color="#E5E5E5"> lattice are a</font>

533
00:22:56,630 --> 00:23:02,510
really nice company<font color="#E5E5E5"> so we have them</font>

534
00:23:00,470 --> 00:23:03,860
we've had the ice 40 tools out for a few

535
00:23:02,510 --> 00:23:06,590
years now<font color="#CCCCCC"> and</font><font color="#E5E5E5"> they certainly haven't</font>

536
00:23:03,860 --> 00:23:08,389
done anything negative<font color="#CCCCCC"> their European</font>

537
00:23:06,590 --> 00:23:10,669
sales division invited us to give a

538
00:23:08,390 --> 00:23:12,140
workshop<font color="#CCCCCC"> on them and things are</font><font color="#E5E5E5"> starting</font>

539
00:23:10,670 --> 00:23:31,010
to<font color="#E5E5E5"> look quite</font><font color="#CCCCCC"> good so yeah</font><font color="#E5E5E5"> lattice</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a</font>

540
00:23:12,140 --> 00:23:32,450
very<font color="#E5E5E5"> good company the question is can</font>

541
00:23:31,010 --> 00:23:34,550
<font color="#CCCCCC">you go the</font><font color="#E5E5E5"> other way</font><font color="#CCCCCC"> around from a bit</font>

542
00:23:32,450 --> 00:23:36,170
stream back to RTL or very look the

543
00:23:34,550 --> 00:23:38,600
<font color="#E5E5E5">answer is yes</font><font color="#CCCCCC"> we have a tool like that</font>

544
00:23:36,170 --> 00:23:40,790
<font color="#E5E5E5">for the ice 40 ice box</font><font color="#CCCCCC"> v-log</font><font color="#E5E5E5"> that goes</font>

545
00:23:38,600 --> 00:23:42,379
<font color="#E5E5E5">from an ice</font><font color="#CCCCCC"> 40 bit stream back to behave</font>

546
00:23:40,790 --> 00:23:43,700
your very log<font color="#CCCCCC"> i haven't</font><font color="#E5E5E5"> actually</font>

547
00:23:42,380 --> 00:23:45,800
finished<font color="#E5E5E5"> doing something like</font><font color="#CCCCCC"> that for</font>

548
00:23:43,700 --> 00:23:47,630
<font color="#E5E5E5">the</font><font color="#CCCCCC"> ECP</font><font color="#E5E5E5"> 5 yet but it's entirely possible</font>

549
00:23:45,800 --> 00:23:49,930
it<font color="#E5E5E5"> would just be</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so getting around to</font>

550
00:23:47,630 --> 00:23:49,930
doing<font color="#CCCCCC"> it</font>

551
00:24:03,700 --> 00:24:08,630
yes so the<font color="#CCCCCC"> question is can you explain</font>

552
00:24:06,650 --> 00:24:11,690
<font color="#E5E5E5">how how you get the timing</font><font color="#CCCCCC"> information</font>

553
00:24:08,630 --> 00:24:13,400
from<font color="#E5E5E5"> the vendor tools so what the vendor</font>

554
00:24:11,690 --> 00:24:15,470
tools<font color="#E5E5E5"> what you can get from the vendor</font>

555
00:24:13,400 --> 00:24:18,020
tools is is the list of internal

556
00:24:15,470 --> 00:24:20,750
connections<font color="#E5E5E5"> on a net so the list of</font>

557
00:24:18,020 --> 00:24:23,450
connections<font color="#CCCCCC"> between the fixed wires the</font>

558
00:24:20,750 --> 00:24:25,910
<font color="#E5E5E5">pips</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> a net and the total delay of</font>

559
00:24:23,450 --> 00:24:27,860
<font color="#E5E5E5">that net over all those connections so</font>

560
00:24:25,910 --> 00:24:29,900
effectively you assume that<font color="#E5E5E5"> each</font>

561
00:24:27,860 --> 00:24:31,790
internal connection has a certain<font color="#E5E5E5"> amount</font>

562
00:24:29,900 --> 00:24:33,830
of delay and<font color="#CCCCCC"> you can sort of split them</font>

563
00:24:31,790 --> 00:24:35,870
up<font color="#E5E5E5"> into classes you say all connections</font>

564
00:24:33,830 --> 00:24:40,510
of these class have this delay<font color="#E5E5E5"> then you</font>

565
00:24:35,870 --> 00:24:40,510
can build<font color="#E5E5E5"> up a sum equate</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> sum</font>

