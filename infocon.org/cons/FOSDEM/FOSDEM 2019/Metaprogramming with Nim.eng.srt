1
00:00:05,020 --> 00:00:14,950
you're gonna hear<font color="#CCCCCC"> me alright and so yeah</font>

2
00:00:09,860 --> 00:00:14,950
welcome<font color="#E5E5E5"> to this lightning talk on Metro</font>

3
00:00:15,030 --> 00:00:22,680
my name is Peter<font color="#E5E5E5"> you can find me on</font>

4
00:00:18,560 --> 00:00:26,279
github and IRC<font color="#CCCCCC"> as p monk</font><font color="#E5E5E5"> or on my</font>

5
00:00:22,680 --> 00:00:28,890
<font color="#CCCCCC">website as peter me dotnet</font><font color="#E5E5E5"> after this</font>

6
00:00:26,279 --> 00:00:31,290
talk I'm also gonna upload a sort of

7
00:00:28,890 --> 00:00:34,170
<font color="#E5E5E5">companion blog post</font><font color="#CCCCCC"> I only have 15</font>

8
00:00:31,290 --> 00:00:35,940
minutes<font color="#CCCCCC"> here and this is a big topic so</font>

9
00:00:34,170 --> 00:00:37,910
if you want more details either about

10
00:00:35,940 --> 00:00:40,589
<font color="#E5E5E5">name or about meta programming in</font><font color="#CCCCCC"> him</font>

11
00:00:37,910 --> 00:00:41,898
<font color="#CCCCCC">you can head over</font><font color="#E5E5E5"> to peter madoff net</font>

12
00:00:40,590 --> 00:00:47,940
and there will be an article<font color="#E5E5E5"> there</font>

13
00:00:41,899 --> 00:00:50,700
<font color="#E5E5E5">available soon so I discovered</font><font color="#CCCCCC"> him while</font>

14
00:00:47,940 --> 00:00:52,949
I<font color="#E5E5E5"> was doing my computer science degree</font>

15
00:00:50,700 --> 00:00:55,079
in in<font color="#E5E5E5"> from saying Norway</font>

16
00:00:52,950 --> 00:00:57,930
<font color="#CCCCCC">I've been using it mostly exclusively</font>

17
00:00:55,079 --> 00:01:00,060
for about three<font color="#CCCCCC"> years but</font><font color="#E5E5E5"> I don't assume</font>

18
00:00:57,930 --> 00:01:01,950
that<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of you I should know what an MS</font>

19
00:01:00,060 --> 00:01:05,939
so I'm<font color="#E5E5E5"> gonna start with a short</font>

20
00:01:01,950 --> 00:01:07,890
introduction<font color="#E5E5E5"> to what</font><font color="#CCCCCC"> is name so never</font>

21
00:01:05,939 --> 00:01:14,070
<font color="#CCCCCC">miss a programming language</font><font color="#E5E5E5"> it's</font>

22
00:01:07,890 --> 00:01:15,869
statically typed with a very good type

23
00:01:14,070 --> 00:01:19,648
system sort<font color="#E5E5E5"> of like the type system</font>

24
00:01:15,869 --> 00:01:22,560
<font color="#E5E5E5">you'll find in</font><font color="#CCCCCC"> a DES so it compiles down</font>

25
00:01:19,649 --> 00:01:25,109
to C and C++<font color="#CCCCCC"> but it's very</font><font color="#E5E5E5"> optimized C</font>

26
00:01:22,560 --> 00:01:27,479
in C++ and<font color="#CCCCCC"> not something</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> the C you</font>

27
00:01:25,109 --> 00:01:30,208
would write<font color="#CCCCCC"> yourself and also to</font>

28
00:01:27,479 --> 00:01:34,469
JavaScript<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you can in fact do</font><font color="#E5E5E5"> full</font>

29
00:01:30,209 --> 00:01:36,119
stack development using just<font color="#E5E5E5"> name so</font>

30
00:01:34,469 --> 00:01:38,958
when it<font color="#E5E5E5"> was</font><font color="#CCCCCC"> created</font><font color="#E5E5E5"> it was</font><font color="#CCCCCC"> meant to</font><font color="#E5E5E5"> be</font>

31
00:01:36,119 --> 00:01:41,549
<font color="#E5E5E5">sort of a mix</font><font color="#CCCCCC"> between the</font><font color="#E5E5E5"> speed of</font><font color="#CCCCCC"> see</font>

32
00:01:38,959 --> 00:01:44,670
the<font color="#CCCCCC"> East's of Python so you can see a</font>

33
00:01:41,549 --> 00:01:47,039
syntax example on the right here<font color="#E5E5E5"> and the</font>

34
00:01:44,670 --> 00:01:49,469
flexibility<font color="#CCCCCC"> of Perl</font><font color="#E5E5E5"> and it's this</font>

35
00:01:47,039 --> 00:01:52,829
flexibility component with<font color="#CCCCCC"> the Metra</font>

36
00:01:49,469 --> 00:01:57,178
programming stuff that<font color="#E5E5E5"> I'm gonna talk</font>

37
00:01:52,829 --> 00:02:02,428
<font color="#CCCCCC">about today</font><font color="#E5E5E5"> in this talk</font><font color="#CCCCCC"> so what is meta</font>

38
00:01:57,179 --> 00:02:04,950
programming on the<font color="#CCCCCC"> left here you see</font>

39
00:02:02,429 --> 00:02:09,479
something that<font color="#CCCCCC"> is probably</font><font color="#E5E5E5"> familiar</font><font color="#CCCCCC"> it's</font>

40
00:02:04,950 --> 00:02:11,220
from<font color="#E5E5E5"> C or C++</font><font color="#CCCCCC"> so many</font><font color="#E5E5E5"> languages have</font>

41
00:02:09,479 --> 00:02:13,800
<font color="#E5E5E5">some kind of meta programming</font>

42
00:02:11,220 --> 00:02:16,740
capabilities and meta programming is

43
00:02:13,800 --> 00:02:18,959
<font color="#E5E5E5">really just about letting the program or</font>

44
00:02:16,740 --> 00:02:21,810
letting the programming language<font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of</font>

45
00:02:18,959 --> 00:02:24,540
rewrite<font color="#E5E5E5"> itself so programming the</font>

46
00:02:21,810 --> 00:02:25,650
programming language so on the left here

47
00:02:24,540 --> 00:02:28,970
<font color="#CCCCCC">you can see</font><font color="#E5E5E5"> it's</font>

48
00:02:25,650 --> 00:02:31,500
simple stuff<font color="#E5E5E5"> like on compile-time</font><font color="#CCCCCC"> do</font>

49
00:02:28,970 --> 00:02:34,799
dependent on some variables do something

50
00:02:31,500 --> 00:02:39,090
different<font color="#E5E5E5"> so changing how the program</font>

51
00:02:34,799 --> 00:02:40,500
works<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> programming</font><font color="#CCCCCC"> itself</font><font color="#E5E5E5"> on the</font>

52
00:02:39,090 --> 00:02:44,040
left on the<font color="#CCCCCC"> right hand side you can see</font>

53
00:02:40,500 --> 00:02:46,110
<font color="#E5E5E5">sort of the equivalent NIM code</font><font color="#CCCCCC"> and as</font>

54
00:02:44,040 --> 00:02:48,720
you can<font color="#E5E5E5"> see all of nem</font><font color="#CCCCCC"> metaprogramming</font>

55
00:02:46,110 --> 00:02:51,480
stuff is<font color="#CCCCCC"> actually written in them so</font>

56
00:02:48,720 --> 00:02:53,909
don't<font color="#E5E5E5"> have to learn sort of a new meta</font>

57
00:02:51,480 --> 00:03:00,480
programming language<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> able to</font><font color="#CCCCCC"> do</font>

58
00:02:53,909 --> 00:03:02,670
meta programming in in them<font color="#CCCCCC"> but why do</font>

59
00:03:00,480 --> 00:03:04,828
<font color="#E5E5E5">we want to do meta programming</font><font color="#CCCCCC"> I mean</font>

60
00:03:02,670 --> 00:03:06,450
the simple<font color="#CCCCCC"> stuff like import this on</font>

61
00:03:04,829 --> 00:03:08,879
this<font color="#E5E5E5"> platform an import</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> on that</font>

62
00:03:06,450 --> 00:03:11,819
platform is fine but meta programming is

63
00:03:08,879 --> 00:03:14,370
much more<font color="#E5E5E5"> than this so we can use it</font><font color="#CCCCCC"> to</font>

64
00:03:11,819 --> 00:03:16,108
<font color="#E5E5E5">optimize our code all of meta</font>

65
00:03:14,370 --> 00:03:18,650
programming<font color="#CCCCCC"> named runs during the</font>

66
00:03:16,109 --> 00:03:22,140
compile time<font color="#E5E5E5"> so we can rewrite</font>

67
00:03:18,650 --> 00:03:25,290
complicated things or rewrite stuff that

68
00:03:22,140 --> 00:03:27,779
looks simple<font color="#E5E5E5"> to us</font><font color="#CCCCCC"> into optimized</font><font color="#E5E5E5"> and</font>

69
00:03:25,290 --> 00:03:31,679
complicated things that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> computer is</font>

70
00:03:27,780 --> 00:03:34,709
<font color="#CCCCCC">able to understand we can</font><font color="#E5E5E5"> also enforce</font>

71
00:03:31,680 --> 00:03:36,540
better coding patterns<font color="#E5E5E5"> so many times</font>

72
00:03:34,709 --> 00:03:38,970
when we're writing programs we have<font color="#E5E5E5"> to</font>

73
00:03:36,540 --> 00:03:41,849
stick to sort of<font color="#E5E5E5"> a way</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> doing things</font>

74
00:03:38,970 --> 00:03:44,280
so<font color="#CCCCCC"> you have to do stuff in a certain</font>

75
00:03:41,849 --> 00:03:46,798
<font color="#CCCCCC">order or</font><font color="#E5E5E5"> you have to remember to release</font>

76
00:03:44,280 --> 00:03:49,859
a lock after<font color="#CCCCCC"> you get the law stuff like</font>

77
00:03:46,799 --> 00:03:52,560
that and these patterns<font color="#CCCCCC"> can be enforced</font>

78
00:03:49,859 --> 00:03:56,519
by by<font color="#CCCCCC"> using them or by using meta</font>

79
00:03:52,560 --> 00:03:58,949
program we can<font color="#E5E5E5"> also increase both read</font>

80
00:03:56,519 --> 00:04:01,410
<font color="#CCCCCC">and</font><font color="#E5E5E5"> maintainability of our code simply</font>

81
00:03:58,949 --> 00:04:03,239
<font color="#E5E5E5">because of the the</font><font color="#CCCCCC"> way that we can take</font>

82
00:04:01,410 --> 00:04:05,760
something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> looks simple to us that's</font>

83
00:04:03,239 --> 00:04:07,290
readable and sort of<font color="#E5E5E5"> understandable to</font>

84
00:04:05,760 --> 00:04:09,540
us and turn it into something<font color="#E5E5E5"> more</font>

85
00:04:07,290 --> 00:04:12,298
complex<font color="#E5E5E5"> so we don't have to worry about</font>

86
00:04:09,540 --> 00:04:15,019
the complex<font color="#E5E5E5"> part we only have to see and</font>

87
00:04:12,299 --> 00:04:19,440
maintain the easy part

88
00:04:15,019 --> 00:04:21,899
so meta programming<font color="#CCCCCC"> name the example I</font>

89
00:04:19,440 --> 00:04:26,460
<font color="#CCCCCC">showed you in the beginning</font><font color="#E5E5E5"> with meta</font>

90
00:04:21,899 --> 00:04:30,830
programming in C is all done with<font color="#E5E5E5"> simple</font>

91
00:04:26,460 --> 00:04:33,510
text substitution so in C it will take

92
00:04:30,830 --> 00:04:35,430
take<font color="#E5E5E5"> your inputs it will read through</font>

93
00:04:33,510 --> 00:04:37,440
the source code<font color="#E5E5E5"> do all the replacements</font>

94
00:04:35,430 --> 00:04:38,830
<font color="#E5E5E5">and then pass it on to the compiler</font><font color="#CCCCCC"> that</font>

95
00:04:37,440 --> 00:04:42,280
<font color="#E5E5E5">actually does</font>

96
00:04:38,830 --> 00:04:45,159
the heavy<font color="#E5E5E5"> lifting in</font><font color="#CCCCCC"> NIM it works on the</font>

97
00:04:42,280 --> 00:04:46,780
<font color="#E5E5E5">abstract syntax tree so the compiler</font>

98
00:04:45,160 --> 00:04:49,090
<font color="#E5E5E5">will actually read through your source</font>

99
00:04:46,780 --> 00:04:52,299
code<font color="#E5E5E5"> create data structure a tree data</font>

100
00:04:49,090 --> 00:04:55,479
structure<font color="#E5E5E5"> that</font><font color="#CCCCCC"> represents your syntax</font>

101
00:04:52,300 --> 00:04:57,940
and then<font color="#E5E5E5"> it's this syntax tree that</font>

102
00:04:55,480 --> 00:04:59,770
we're<font color="#CCCCCC"> working on as</font><font color="#E5E5E5"> our output</font><font color="#CCCCCC"> our input</font>

103
00:04:57,940 --> 00:05:03,670
<font color="#CCCCCC">and output for a metal programming</font><font color="#E5E5E5"> and</font>

104
00:04:59,770 --> 00:05:05,890
this<font color="#E5E5E5"> has some crucial benefits it also</font>

105
00:05:03,670 --> 00:05:09,610
respects the type system<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> can</font>

106
00:05:05,890 --> 00:05:12,340
actually do<font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> dependent on different</font>

107
00:05:09,610 --> 00:05:15,190
types so in in<font color="#E5E5E5"> C you would only be</font><font color="#CCCCCC"> able</font>

108
00:05:12,340 --> 00:05:17,140
<font color="#E5E5E5">to have sort of the</font><font color="#CCCCCC"> same substitution no</font>

109
00:05:15,190 --> 00:05:19,600
matter what you<font color="#E5E5E5"> put in it</font><font color="#CCCCCC"> if the</font>

110
00:05:17,140 --> 00:05:23,740
compiler complaints it complains about

111
00:05:19,600 --> 00:05:26,590
the stuff<font color="#CCCCCC"> that the pro that</font><font color="#E5E5E5"> macros bit</font>

112
00:05:23,740 --> 00:05:28,540
<font color="#E5E5E5">outs and not what you put in but we can</font>

113
00:05:26,590 --> 00:05:30,039
have type system<font color="#CCCCCC"> I</font><font color="#E5E5E5"> or type checking and</font>

114
00:05:28,540 --> 00:05:32,320
say that no<font color="#CCCCCC"> you can't call this macro</font>

115
00:05:30,040 --> 00:05:37,090
<font color="#E5E5E5">because this wouldn't generate the right</font>

116
00:05:32,320 --> 00:05:40,030
time<font color="#E5E5E5"> one on</font><font color="#CCCCCC"> run</font><font color="#E5E5E5"> time there are also sort</font>

117
00:05:37,090 --> 00:05:42,789
of levels of complexity<font color="#CCCCCC"> so you have</font>

118
00:05:40,030 --> 00:05:44,770
normal<font color="#E5E5E5"> procedures or functions as they</font>

119
00:05:42,790 --> 00:05:49,120
are<font color="#E5E5E5"> often erroneously called in other</font>

120
00:05:44,770 --> 00:05:51,430
languages<font color="#CCCCCC"> inline iterators</font><font color="#E5E5E5"> you have a</font>

121
00:05:49,120 --> 00:05:54,700
<font color="#CCCCCC">notes are sort</font><font color="#E5E5E5"> of available in most</font>

122
00:05:51,430 --> 00:05:57,010
languages we have generic procedures and

123
00:05:54,700 --> 00:05:59,620
closure iterators<font color="#CCCCCC"> they are a bit less</font>

124
00:05:57,010 --> 00:06:02,080
common<font color="#E5E5E5"> but still</font><font color="#CCCCCC"> very common</font><font color="#E5E5E5"> in in many</font>

125
00:05:59,620 --> 00:06:05,080
<font color="#E5E5E5">languages and then the two last ones</font>

126
00:06:02,080 --> 00:06:07,840
<font color="#E5E5E5">which are sort of the maybe most</font>

127
00:06:05,080 --> 00:06:10,030
interesting ones which are templates<font color="#E5E5E5"> and</font>

128
00:06:07,840 --> 00:06:14,349
macros and<font color="#E5E5E5"> I'm not going to talk</font><font color="#CCCCCC"> about</font>

129
00:06:10,030 --> 00:06:16,299
<font color="#CCCCCC">two top tiers here because they</font><font color="#E5E5E5"> are so</font>

130
00:06:14,350 --> 00:06:19,060
so common I'm only gonna focus on

131
00:06:16,300 --> 00:06:24,670
templates and macros for the time I have

132
00:06:19,060 --> 00:06:28,150
<font color="#E5E5E5">left so as I said templates or any</font>

133
00:06:24,670 --> 00:06:32,500
<font color="#CCCCCC">method of programming in in uses this</font>

134
00:06:28,150 --> 00:06:35,890
abstract syntax tree<font color="#E5E5E5"> sort of way so this</font>

135
00:06:32,500 --> 00:06:40,300
<font color="#E5E5E5">is abstract syntax tree substitution so</font>

136
00:06:35,890 --> 00:06:43,150
this is an example of enforcing a coding

137
00:06:40,300 --> 00:06:46,750
pattern<font color="#E5E5E5"> so here we have a a</font><font color="#CCCCCC"> woodlock</font>

138
00:06:43,150 --> 00:06:50,770
template that<font color="#CCCCCC"> simply takes in a</font><font color="#E5E5E5"> lock</font>

139
00:06:46,750 --> 00:06:52,420
object and any untyped just any any

140
00:06:50,770 --> 00:06:55,570
syntax<font color="#E5E5E5"> tree</font>

141
00:06:52,420 --> 00:06:59,230
and they will<font color="#E5E5E5"> acquire a lock try to run</font>

142
00:06:55,570 --> 00:07:00,969
the code that we pass it in and then<font color="#CCCCCC"> it</font>

143
00:06:59,230 --> 00:07:05,050
<font color="#CCCCCC">will release the lock in this try</font>

144
00:07:00,970 --> 00:07:07,480
finally<font color="#CCCCCC"> pattern that is sort of what</font>

145
00:07:05,050 --> 00:07:11,170
you're<font color="#E5E5E5"> supposed to do with</font><font color="#CCCCCC"> lots but</font><font color="#E5E5E5"> many</font>

146
00:07:07,480 --> 00:07:14,020
<font color="#CCCCCC">people</font><font color="#E5E5E5"> don't because it's yeah do you</font>

147
00:07:11,170 --> 00:07:16,120
<font color="#E5E5E5">remember do you do care</font><font color="#CCCCCC"> is it really</font>

148
00:07:14,020 --> 00:07:18,190
that important<font color="#E5E5E5"> but with this it's it's</font>

149
00:07:16,120 --> 00:07:21,580
super<font color="#CCCCCC"> easy to</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> of course with the</font>

150
00:07:18,190 --> 00:07:23,260
type<font color="#E5E5E5"> system we can also enforce that so</font>

151
00:07:21,580 --> 00:07:26,169
we<font color="#E5E5E5"> can hide our lock away behind some</font>

152
00:07:23,260 --> 00:07:28,300
some distinct type<font color="#E5E5E5"> you can say no you</font>

153
00:07:26,170 --> 00:07:30,550
can only call<font color="#E5E5E5"> web lock</font><font color="#CCCCCC"> you can't acquire</font>

154
00:07:28,300 --> 00:07:37,300
the lock<font color="#E5E5E5"> without going through sort of</font>

155
00:07:30,550 --> 00:07:39,580
the proper<font color="#CCCCCC"> Channel can we save the</font>

156
00:07:37,300 --> 00:07:42,070
questions<font color="#CCCCCC"> for the end if</font><font color="#E5E5E5"> that's or you</font>

157
00:07:39,580 --> 00:07:47,409
can take<font color="#E5E5E5"> the matter</font><font color="#CCCCCC"> it's just</font><font color="#E5E5E5"> yeah I'm</font>

158
00:07:42,070 --> 00:07:51,250
short<font color="#E5E5E5"> on</font><font color="#CCCCCC"> time so this</font><font color="#E5E5E5"> is an optimization</font>

159
00:07:47,410 --> 00:07:53,380
example here we have a debug template

160
00:07:51,250 --> 00:07:55,510
<font color="#E5E5E5">that simply</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> writes out some debug</font>

161
00:07:53,380 --> 00:07:59,290
information<font color="#E5E5E5"> if a log level is it's</font>

162
00:07:55,510 --> 00:08:01,090
sufficient<font color="#CCCCCC"> but we also have an expensive</font>

163
00:07:59,290 --> 00:08:04,570
debugging info so maybe you want<font color="#CCCCCC"> to</font>

164
00:08:01,090 --> 00:08:07,929
gather a stack<font color="#CCCCCC"> a stack trace maybe you</font>

165
00:08:04,570 --> 00:08:09,700
want<font color="#CCCCCC"> to use some other</font><font color="#E5E5E5"> more like</font>

166
00:08:07,930 --> 00:08:12,490
<font color="#E5E5E5">complicated stuff to get debugging</font>

167
00:08:09,700 --> 00:08:13,960
<font color="#CCCCCC">information but if</font><font color="#E5E5E5"> your log level isn't</font>

168
00:08:12,490 --> 00:08:17,080
<font color="#E5E5E5">sufficient enough you're just gonna take</font>

169
00:08:13,960 --> 00:08:19,140
<font color="#CCCCCC">that</font><font color="#E5E5E5"> data in and throw it away so with</font>

170
00:08:17,080 --> 00:08:22,719
this you<font color="#E5E5E5"> get a sort of lazy evaluation</font>

171
00:08:19,140 --> 00:08:25,810
<font color="#E5E5E5">because when we call debug expensive</font>

172
00:08:22,720 --> 00:08:28,540
debugging info<font color="#E5E5E5"> expensive debugging info</font>

173
00:08:25,810 --> 00:08:31,360
<font color="#E5E5E5">is actually going to be substituted into</font>

174
00:08:28,540 --> 00:08:34,150
the<font color="#E5E5E5"> arcs parameter in the body of code</font>

175
00:08:31,360 --> 00:08:37,210
and the template<font color="#E5E5E5"> so it won't be called</font>

176
00:08:34,150 --> 00:08:39,939
unless<font color="#E5E5E5"> the log level is sufficient this</font>

177
00:08:37,210 --> 00:08:42,430
means<font color="#E5E5E5"> that we can like even a simple</font>

178
00:08:39,940 --> 00:08:45,160
example<font color="#E5E5E5"> such</font><font color="#CCCCCC"> as this can save us in this</font>

179
00:08:42,429 --> 00:08:48,719
<font color="#E5E5E5">case a second of time every time we want</font>

180
00:08:45,160 --> 00:08:51,819
to<font color="#E5E5E5"> debug this so and this</font><font color="#CCCCCC"> is of</font><font color="#E5E5E5"> course</font>

181
00:08:48,720 --> 00:08:54,580
this<font color="#E5E5E5"> is of course on</font><font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> so the</font>

182
00:08:51,820 --> 00:08:56,830
<font color="#E5E5E5">macro is expanded on compile time but we</font>

183
00:08:54,580 --> 00:08:59,170
can change the log level on<font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> so</font>

184
00:08:56,830 --> 00:09:01,720
it's not like in C where you can have of

185
00:08:59,170 --> 00:09:03,910
<font color="#E5E5E5">course we can have a compile time switch</font>

186
00:09:01,720 --> 00:09:06,100
to switch on/off debugging<font color="#CCCCCC"> information</font>

187
00:09:03,910 --> 00:09:09,490
but then we can't ever turn that back on

188
00:09:06,100 --> 00:09:13,570
<font color="#E5E5E5">this could be done on</font><font color="#CCCCCC"> run time</font><font color="#E5E5E5"> and we</font>

189
00:09:09,490 --> 00:09:16,600
would<font color="#E5E5E5"> still</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> the same savings so</font>

190
00:09:13,570 --> 00:09:18,550
Matt<font color="#CCCCCC"> gross and these are</font><font color="#E5E5E5"> sort of the the</font>

191
00:09:16,600 --> 00:09:20,100
most interesting<font color="#CCCCCC"> part</font><font color="#E5E5E5"> saving the best</font>

192
00:09:18,550 --> 00:09:23,290
for<font color="#CCCCCC"> last</font>

193
00:09:20,100 --> 00:09:27,040
<font color="#CCCCCC">again it takes</font><font color="#E5E5E5"> the abstract syntax tree</font>

194
00:09:23,290 --> 00:09:30,540
as a data<font color="#E5E5E5"> structure in memory those are</font>

195
00:09:27,040 --> 00:09:34,150
returns<font color="#E5E5E5"> an abstract syntax tree and</font>

196
00:09:30,540 --> 00:09:36,000
<font color="#CCCCCC">because it takes a syntax tree</font><font color="#E5E5E5"> the input</font>

197
00:09:34,150 --> 00:09:38,470
must of course be<font color="#E5E5E5"> syntactically correct</font>

198
00:09:36,000 --> 00:09:41,110
<font color="#E5E5E5">but it doesn't have to</font><font color="#CCCCCC"> be semantically</font>

199
00:09:38,470 --> 00:09:44,350
correct it<font color="#E5E5E5"> doesn't have to be a valid</font>

200
00:09:41,110 --> 00:09:46,930
<font color="#CCCCCC">named program but it has to</font><font color="#E5E5E5"> be something</font>

201
00:09:44,350 --> 00:09:49,810
that<font color="#E5E5E5"> the name compiler is able to parse</font>

202
00:09:46,930 --> 00:09:52,000
but<font color="#E5E5E5"> then syntax is fairly flexible so</font>

203
00:09:49,810 --> 00:09:56,140
this rarely turns out to be<font color="#E5E5E5"> an actual</font>

204
00:09:52,000 --> 00:09:59,080
issue<font color="#E5E5E5"> and with this we can do a lot</font><font color="#CCCCCC"> of</font>

205
00:09:56,140 --> 00:10:01,630
interesting<font color="#CCCCCC"> things amongst others create</font>

206
00:09:59,080 --> 00:10:05,050
the<font color="#E5E5E5"> way in specific languages and this</font>

207
00:10:01,630 --> 00:10:09,610
is an example from the standard library

208
00:10:05,050 --> 00:10:13,780
JSON module so here we have a<font color="#E5E5E5"> simple</font>

209
00:10:09,610 --> 00:10:16,480
operator<font color="#E5E5E5"> percentage star which takes the</font>

210
00:10:13,780 --> 00:10:19,030
the inputs<font color="#E5E5E5"> and converts that to</font><font color="#CCCCCC"> a JSON</font>

211
00:10:16,480 --> 00:10:21,060
<font color="#E5E5E5">object</font><font color="#CCCCCC"> and it</font><font color="#E5E5E5"> doesn't convert it to a</font>

212
00:10:19,030 --> 00:10:24,310
<font color="#CCCCCC">JSON string</font><font color="#E5E5E5"> it converts it to an actual</font>

213
00:10:21,060 --> 00:10:30,089
an actual representation object

214
00:10:24,310 --> 00:10:33,699
representation of a<font color="#CCCCCC"> jason jason type and</font>

215
00:10:30,090 --> 00:10:36,700
you<font color="#E5E5E5"> just end up typing jason into your</font>

216
00:10:33,700 --> 00:10:39,610
<font color="#CCCCCC">nib file like why would you stick around</font>

217
00:10:36,700 --> 00:10:41,380
<font color="#E5E5E5">with creating objects and inputting</font>

218
00:10:39,610 --> 00:10:44,620
<font color="#CCCCCC">information and all of that when you can</font>

219
00:10:41,380 --> 00:10:46,870
just type your jason and this<font color="#E5E5E5"> is of</font>

220
00:10:44,620 --> 00:10:48,070
course<font color="#CCCCCC"> is rewritten on compile time into</font>

221
00:10:46,870 --> 00:10:51,820
<font color="#CCCCCC">something that actually creates the</font>

222
00:10:48,070 --> 00:10:54,130
<font color="#E5E5E5">objects and stuff</font><font color="#CCCCCC"> a more complicated</font>

223
00:10:51,820 --> 00:10:58,840
example which is actually one of<font color="#E5E5E5"> my</font>

224
00:10:54,130 --> 00:11:01,420
first projects using<font color="#E5E5E5"> using macros this</font>

225
00:10:58,840 --> 00:11:05,110
is the macro<font color="#E5E5E5"> that generates a user</font>

226
00:11:01,420 --> 00:11:07,180
interface<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> x widget and here you</font>

227
00:11:05,110 --> 00:11:10,480
can see I'm<font color="#CCCCCC"> using the</font><font color="#E5E5E5"> hierarchical</font>

228
00:11:07,180 --> 00:11:14,140
<font color="#E5E5E5">structure of an indented language so we</font>

229
00:11:10,480 --> 00:11:17,410
have to static boxes<font color="#CCCCCC"> they are in a box I</font>

230
00:11:14,140 --> 00:11:20,080
sir that is horizontally laid out

231
00:11:17,410 --> 00:11:21,459
the items are vertically laid out<font color="#CCCCCC"> you</font>

232
00:11:20,080 --> 00:11:24,100
can see we<font color="#CCCCCC"> have buttons</font><font color="#E5E5E5"> we have</font>

233
00:11:21,460 --> 00:11:26,260
<font color="#E5E5E5">checkboxes we don't really name anything</font>

234
00:11:24,100 --> 00:11:29,920
like we<font color="#E5E5E5"> name the</font><font color="#CCCCCC"> gage because</font><font color="#E5E5E5"> we use</font><font color="#CCCCCC"> it</font>

235
00:11:26,260 --> 00:11:33,689
in the in the callback<font color="#E5E5E5"> and we name the</font>

236
00:11:29,920 --> 00:11:36,219
mainframe to<font color="#CCCCCC"> be able to</font><font color="#E5E5E5"> to show it</font><font color="#CCCCCC"> and</font>

237
00:11:33,690 --> 00:11:38,560
this spits<font color="#E5E5E5"> out something horrible like</font>

238
00:11:36,220 --> 00:11:40,810
<font color="#E5E5E5">this and this is what you would</font><font color="#CCCCCC"> normally</font>

239
00:11:38,560 --> 00:11:42,459
write when<font color="#E5E5E5"> you're right thing if you're</font>

240
00:11:40,810 --> 00:11:46,209
writing<font color="#E5E5E5"> or like if you're programming</font>

241
00:11:42,460 --> 00:11:48,250
your<font color="#E5E5E5"> actual user interfaces this is what</font>

242
00:11:46,210 --> 00:11:50,440
you end<font color="#CCCCCC"> up writing and look at all these</font>

243
00:11:48,250 --> 00:11:53,530
temporary variables<font color="#E5E5E5"> like this would be</font>

244
00:11:50,440 --> 00:11:55,420
<font color="#E5E5E5">button number 728 and</font><font color="#CCCCCC"> you're in their</font>

245
00:11:53,530 --> 00:12:00,100
code<font color="#E5E5E5"> and you would have</font><font color="#CCCCCC"> to be like</font><font color="#E5E5E5"> ah</font>

246
00:11:55,420 --> 00:12:02,920
<font color="#CCCCCC">hmm is up is that 728 or 729 I can never</font>

247
00:12:00,100 --> 00:12:06,280
<font color="#E5E5E5">remember</font><font color="#CCCCCC"> but with</font><font color="#E5E5E5"> this we can bind</font>

248
00:12:02,920 --> 00:12:11,110
directly<font color="#E5E5E5"> in the macro and it does all of</font>

249
00:12:06,280 --> 00:12:13,390
this<font color="#E5E5E5"> horrible stuff for you</font><font color="#CCCCCC"> and just</font><font color="#E5E5E5"> to</font>

250
00:12:11,110 --> 00:12:15,250
<font color="#E5E5E5">show like</font><font color="#CCCCCC"> this is what the what the</font>

251
00:12:13,390 --> 00:12:16,900
<font color="#E5E5E5">actual output is and we can see the same</font>

252
00:12:15,250 --> 00:12:19,780
structure here we have the two static

253
00:12:16,900 --> 00:12:23,050
boxes<font color="#E5E5E5"> side by side</font><font color="#CCCCCC"> we have the two or</font>

254
00:12:19,780 --> 00:12:25,720
<font color="#CCCCCC">the four vigeous</font><font color="#E5E5E5"> in them below each</font>

255
00:12:23,050 --> 00:12:28,060
other<font color="#E5E5E5"> and this is</font><font color="#CCCCCC"> interactive fight</font><font color="#E5E5E5"> well</font>

256
00:12:25,720 --> 00:12:30,580
this is a<font color="#CCCCCC"> screen shot but the program is</font>

257
00:12:28,060 --> 00:12:32,380
interactive<font color="#E5E5E5"> so if I hit the</font><font color="#CCCCCC"> button you</font>

258
00:12:30,580 --> 00:12:36,460
can<font color="#CCCCCC"> see</font><font color="#E5E5E5"> the gauge has already gone up to</font>

259
00:12:32,380 --> 00:12:40,540
<font color="#CCCCCC">50%</font><font color="#E5E5E5"> because I clicked the button so yeah</font>

260
00:12:36,460 --> 00:12:44,500
that<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> metaprogramming in them</font>

261
00:12:40,540 --> 00:12:46,360
or at<font color="#CCCCCC"> least a</font><font color="#E5E5E5"> small peek at it again if</font>

262
00:12:44,500 --> 00:12:48,600
you<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> know more</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> head to</font><font color="#CCCCCC"> my</font>

263
00:12:46,360 --> 00:12:51,670
website<font color="#CCCCCC"> and read the companion blog post</font>

264
00:12:48,600 --> 00:12:55,270
or you can of<font color="#CCCCCC"> course just</font><font color="#E5E5E5"> google them or</font>

265
00:12:51,670 --> 00:13:00,000
go to<font color="#E5E5E5"> name</font><font color="#CCCCCC"> lang org</font><font color="#E5E5E5"> like them - Lang</font>

266
00:12:55,270 --> 00:13:00,000
<font color="#CCCCCC">torg yeah thank you</font>

267
00:13:04,630 --> 00:13:26,030
yeah<font color="#CCCCCC"> anyone have</font><font color="#E5E5E5"> any questions yeah</font><font color="#CCCCCC"> yes</font>

268
00:13:22,550 --> 00:13:28,910
so as I said it compiles to<font color="#CCCCCC"> C and</font><font color="#E5E5E5"> C++ so</font>

269
00:13:26,030 --> 00:13:30,650
<font color="#E5E5E5">using C and C++ in your name program is</font>

270
00:13:28,910 --> 00:13:36,980
<font color="#E5E5E5">basically just saying I have the</font><font color="#CCCCCC"> C</font>

271
00:13:30,650 --> 00:13:41,240
function<font color="#E5E5E5"> call it so this</font><font color="#CCCCCC"> is the the this</font>

272
00:13:36,980 --> 00:13:44,180
code is from the<font color="#CCCCCC"> vx</font><font color="#E5E5E5"> name</font><font color="#CCCCCC"> project which</font>

273
00:13:41,240 --> 00:13:46,400
is just<font color="#CCCCCC"> wrappings for the vxr8</font><font color="#E5E5E5"> c++</font>

274
00:13:44,180 --> 00:13:49,459
library<font color="#E5E5E5"> and this is just a</font>

275
00:13:46,400 --> 00:13:52,910
<font color="#CCCCCC">metaprogramming or a macro on top of on</font>

276
00:13:49,460 --> 00:13:54,980
<font color="#E5E5E5">top of that so if</font><font color="#CCCCCC"> you use 3x widgets</font>

277
00:13:52,910 --> 00:13:57,890
you'll probably recognize all<font color="#E5E5E5"> of these</font>

278
00:13:54,980 --> 00:14:02,240
because these<font color="#CCCCCC"> are just the C calls</font><font color="#E5E5E5"> to or</font>

279
00:13:57,890 --> 00:14:09,980
C++ calls to those functions<font color="#E5E5E5"> what's the</font>

280
00:14:02,240 --> 00:14:11,720
question over<font color="#CCCCCC"> here</font><font color="#E5E5E5"> yep</font><font color="#CCCCCC"> yeah so when</font>

281
00:14:09,980 --> 00:14:14,270
you're writing<font color="#E5E5E5"> the macro yourself is</font>

282
00:14:11,720 --> 00:14:16,220
very<font color="#CCCCCC"> easy to output</font><font color="#E5E5E5"> sort of what what</font>

283
00:14:14,270 --> 00:14:19,130
the output of the macro is you can see

284
00:14:16,220 --> 00:14:22,040
the code<font color="#E5E5E5"> also</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> debugging</font><font color="#CCCCCC"> tools and</font>

285
00:14:19,130 --> 00:14:24,950
<font color="#E5E5E5">them will tell you so this this comes</font>

286
00:14:22,040 --> 00:14:26,959
from inside of<font color="#CCCCCC"> this macro and this is</font>

287
00:14:24,950 --> 00:14:29,720
the part of the macro<font color="#E5E5E5"> that generated</font>

288
00:14:26,960 --> 00:14:32,650
that<font color="#E5E5E5"> line of code which is failing</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> is</font>

289
00:14:29,720 --> 00:14:32,650
actually<font color="#CCCCCC"> surprisingly good</font>

