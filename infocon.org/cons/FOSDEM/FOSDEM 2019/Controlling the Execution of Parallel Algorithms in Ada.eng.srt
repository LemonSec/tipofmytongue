1
00:01:40,760 --> 00:01:54,740
oh yes thank you<font color="#CCCCCC"> okay this</font><font color="#E5E5E5"> is the right</font>

2
00:01:48,680 --> 00:02:00,980
<font color="#E5E5E5">spot</font><font color="#CCCCCC"> okay good</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> here's</font><font color="#E5E5E5"> the outline of</font>

3
00:01:54,740 --> 00:02:03,229
<font color="#E5E5E5">my talk so my implementation my</font>

4
00:02:00,980 --> 00:02:10,759
application is mathematical but<font color="#E5E5E5"> I will</font>

5
00:02:03,230 --> 00:02:14,530
almost<font color="#E5E5E5"> entirely try to focus</font><font color="#CCCCCC"> on the ADA</font>

6
00:02:10,759 --> 00:02:20,329
part<font color="#CCCCCC"> so the problem is</font><font color="#E5E5E5"> that you have</font>

7
00:02:14,530 --> 00:02:27,380
<font color="#E5E5E5">algorithms that I can probably try to</font>

8
00:02:20,330 --> 00:02:29,810
fix this<font color="#E5E5E5"> it's okay it's okay so I mean I</font>

9
00:02:27,380 --> 00:02:31,670
think<font color="#CCCCCC"> the slides will be a little bit</font>

10
00:02:29,810 --> 00:02:34,310
better afterwards<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> think about an</font>

11
00:02:31,670 --> 00:02:37,040
algorithm<font color="#E5E5E5"> what is an algorithm it has to</font>

12
00:02:34,310 --> 00:02:39,320
<font color="#CCCCCC">terminate but some algorithms they</font>

13
00:02:37,040 --> 00:02:42,410
actually they will never terminate like

14
00:02:39,320 --> 00:02:45,190
here in the example<font color="#CCCCCC"> if you want to</font>

15
00:02:42,410 --> 00:02:47,930
compute<font color="#CCCCCC"> the expansion of a</font>

16
00:02:45,190 --> 00:02:50,959
<font color="#CCCCCC">transcendental number</font><font color="#E5E5E5"> like pi</font><font color="#CCCCCC"> it will</font>

17
00:02:47,930 --> 00:02:54,170
never ever finish because<font color="#CCCCCC"> pi doesn't</font>

18
00:02:50,959 --> 00:02:56,060
have a finite number<font color="#E5E5E5"> of bits doesn't</font>

19
00:02:54,170 --> 00:03:00,589
have a finite<font color="#E5E5E5"> number</font><font color="#CCCCCC"> of decimal places</font>

20
00:02:56,060 --> 00:03:06,680
<font color="#CCCCCC">so</font><font color="#E5E5E5"> this loop here goes to infinity</font>

21
00:03:00,590 --> 00:03:09,230
<font color="#E5E5E5">nevertheless every result here as you</font>

22
00:03:06,680 --> 00:03:11,300
keep it running a<font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit longer it</font>

23
00:03:09,230 --> 00:03:16,160
<font color="#E5E5E5">will give you a little bit more</font>

24
00:03:11,300 --> 00:03:19,070
precision<font color="#E5E5E5"> now</font><font color="#CCCCCC"> when do</font><font color="#E5E5E5"> you stop sometimes</font>

25
00:03:16,160 --> 00:03:22,700
<font color="#E5E5E5">I mean this is a toy example and I will</font>

26
00:03:19,070 --> 00:03:24,500
<font color="#E5E5E5">not refer</font><font color="#CCCCCC"> to it later but in a lot of</font>

27
00:03:22,700 --> 00:03:27,700
<font color="#E5E5E5">applications where</font><font color="#CCCCCC"> you approximate</font>

28
00:03:24,500 --> 00:03:31,760
anything something<font color="#CCCCCC"> you don't really know</font>

29
00:03:27,700 --> 00:03:37,010
what is a<font color="#E5E5E5"> good result</font><font color="#CCCCCC"> so you want to as</font>

30
00:03:31,760 --> 00:03:40,310
a user<font color="#E5E5E5"> decide when to stop and actually</font>

31
00:03:37,010 --> 00:03:43,609
<font color="#CCCCCC">this is all</font><font color="#E5E5E5"> about controlling loops that</font>

32
00:03:40,310 --> 00:03:45,800
go<font color="#E5E5E5"> on forever and loop that</font><font color="#CCCCCC"> goes on</font>

33
00:03:43,610 --> 00:03:48,500
<font color="#E5E5E5">forever the immediate reflects that you</font>

34
00:03:45,800 --> 00:03:52,470
have is control<font color="#E5E5E5"> see and that's also what</font>

35
00:03:48,500 --> 00:03:54,690
we<font color="#CCCCCC"> are going</font><font color="#E5E5E5"> to interrupt over here it</font>

36
00:03:52,470 --> 00:03:57,930
you have a<font color="#E5E5E5"> program running for six</font>

37
00:03:54,690 --> 00:04:00,870
months<font color="#E5E5E5"> and then the user hits ctrl C and</font>

38
00:03:57,930 --> 00:04:03,210
then you<font color="#CCCCCC"> want</font><font color="#E5E5E5"> your program to say really</font>

39
00:04:00,870 --> 00:04:05,550
<font color="#CCCCCC">really you really want to stop me and</font>

40
00:04:03,210 --> 00:04:09,050
then indeed the<font color="#E5E5E5"> user can confirm but but</font>

41
00:04:05,550 --> 00:04:12,750
perhaps mmm troll<font color="#E5E5E5"> C should not be used</font>

42
00:04:09,050 --> 00:04:15,810
<font color="#CCCCCC">so ctrl C as a ADA</font><font color="#E5E5E5"> program or you can</font>

43
00:04:12,750 --> 00:04:20,339
actually control<font color="#E5E5E5"> and and</font><font color="#CCCCCC"> actually this</font>

44
00:04:15,810 --> 00:04:22,200
<font color="#CCCCCC">is the the goal of this talk here</font><font color="#E5E5E5"> is</font>

45
00:04:20,339 --> 00:04:24,539
that<font color="#CCCCCC"> I will give you in a couple</font><font color="#E5E5E5"> of</font>

46
00:04:22,200 --> 00:04:26,490
slides<font color="#CCCCCC"> so there will</font><font color="#E5E5E5"> be a</font><font color="#CCCCCC"> record on</font>

47
00:04:24,540 --> 00:04:32,790
slides<font color="#E5E5E5"> and you can do this minute</font>

48
00:04:26,490 --> 00:04:36,420
actually very simple routines so here is

49
00:04:32,790 --> 00:04:39,600
the<font color="#E5E5E5"> session</font><font color="#CCCCCC"> here is the test</font><font color="#E5E5E5"> we have</font><font color="#CCCCCC"> a</font>

50
00:04:36,420 --> 00:04:43,080
counter<font color="#CCCCCC"> that goes on to infinity</font><font color="#E5E5E5"> so</font>

51
00:04:39,600 --> 00:04:47,490
there is a counter here and the<font color="#E5E5E5"> user</font>

52
00:04:43,080 --> 00:04:49,260
<font color="#CCCCCC">each time can hit control-c for one</font>

53
00:04:47,490 --> 00:04:51,690
<font color="#E5E5E5">reason or another I can actually</font><font color="#CCCCCC"> never</font>

54
00:04:49,260 --> 00:04:56,010
get it right after<font color="#E5E5E5"> one I'm not fast</font>

55
00:04:51,690 --> 00:04:58,230
enough but you can tune that as well<font color="#CCCCCC"> so</font>

56
00:04:56,010 --> 00:05:01,890
the feedback<font color="#E5E5E5"> here is just that it</font>

57
00:04:58,230 --> 00:05:04,070
reports how much time it has spent<font color="#E5E5E5"> but</font>

58
00:05:01,890 --> 00:05:06,810
you can give all kinds<font color="#E5E5E5"> of feedback</font>

59
00:05:04,070 --> 00:05:11,070
<font color="#E5E5E5">depending on the result and then the</font>

60
00:05:06,810 --> 00:05:14,850
user can confirm the abort<font color="#CCCCCC"> or can</font>

61
00:05:11,070 --> 00:05:19,940
actually let the continuation<font color="#E5E5E5"> go on so</font>

62
00:05:14,850 --> 00:05:19,940
the program by default<font color="#E5E5E5"> wants</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> continue</font>

63
00:05:21,169 --> 00:05:31,409
so in<font color="#CCCCCC"> EDA you can attach a handler to</font>

64
00:05:26,940 --> 00:05:33,900
the<font color="#E5E5E5"> interrupt</font><font color="#CCCCCC"> you have to compile it</font>

65
00:05:31,410 --> 00:05:36,360
with<font color="#E5E5E5"> and reserve all interrupts</font>

66
00:05:33,900 --> 00:05:39,419
<font color="#E5E5E5">somewhere preferably</font><font color="#CCCCCC"> in your main</font>

67
00:05:36,360 --> 00:05:42,900
program<font color="#CCCCCC"> you have that pragma</font><font color="#E5E5E5"> stay there</font>

68
00:05:39,419 --> 00:05:46,799
<font color="#E5E5E5">and then actually</font><font color="#CCCCCC"> you can redefine</font><font color="#E5E5E5"> or</font>

69
00:05:42,900 --> 00:05:50,179
you can define<font color="#E5E5E5"> a handler for this</font>

70
00:05:46,800 --> 00:05:50,180
control<font color="#CCCCCC"> see</font>

71
00:05:53,580 --> 00:05:59,460
so there is a global<font color="#CCCCCC"> state</font><font color="#E5E5E5"> so the global</font>

72
00:05:56,639 --> 00:06:02,129
<font color="#E5E5E5">state here in the example</font><font color="#CCCCCC"> is just the</font>

73
00:05:59,460 --> 00:06:05,310
<font color="#E5E5E5">value of the</font><font color="#CCCCCC"> counter</font><font color="#E5E5E5"> then you have to</font>

74
00:06:02,129 --> 00:06:10,710
define what<font color="#CCCCCC"> your handle is the</font><font color="#E5E5E5"> handler</font>

75
00:06:05,310 --> 00:06:13,319
here<font color="#E5E5E5"> will be extremely simple</font><font color="#CCCCCC"> then you</font>

76
00:06:10,710 --> 00:06:15,330
have the<font color="#E5E5E5"> actual computation which is the</font>

77
00:06:13,319 --> 00:06:20,970
code for<font color="#CCCCCC"> the loop</font><font color="#E5E5E5"> and then you have a</font>

78
00:06:15,330 --> 00:06:22,919
main test procedure actually that's the

79
00:06:20,970 --> 00:06:26,069
name of<font color="#CCCCCC"> the main test procedure</font><font color="#E5E5E5"> over</font>

80
00:06:22,919 --> 00:06:29,969
there<font color="#E5E5E5"> the sick end handler test and if</font>

81
00:06:26,069 --> 00:06:32,610
<font color="#E5E5E5">you run good not make on</font><font color="#CCCCCC"> it and you have</font>

82
00:06:29,970 --> 00:06:36,659
the<font color="#E5E5E5"> other files that are then compiled</font>

83
00:06:32,610 --> 00:06:42,889
and finally you<font color="#E5E5E5"> have then the final</font>

84
00:06:36,659 --> 00:06:46,139
executable the tests so<font color="#CCCCCC"> four files are</font>

85
00:06:42,889 --> 00:06:48,690
defining<font color="#E5E5E5"> this example here although</font><font color="#CCCCCC"> you</font>

86
00:06:46,139 --> 00:06:51,120
could have put everything in<font color="#CCCCCC"> one file a</font>

87
00:06:48,690 --> 00:06:54,240
good practice of<font color="#E5E5E5"> object-oriented</font>

88
00:06:51,120 --> 00:06:57,360
programming is always that<font color="#E5E5E5"> you plan</font><font color="#CCCCCC"> for</font>

89
00:06:54,240 --> 00:07:01,699
extension so I put<font color="#E5E5E5"> everything that was</font>

90
00:06:57,360 --> 00:07:06,599
logically different in<font color="#E5E5E5"> different files</font>

91
00:07:01,699 --> 00:07:10,620
<font color="#E5E5E5">for files here is the simplest one</font><font color="#CCCCCC"> this</font>

92
00:07:06,599 --> 00:07:14,009
is just storing the global<font color="#E5E5E5"> state so this</font>

93
00:07:10,620 --> 00:07:17,520
is probably overkill<font color="#CCCCCC"> one package for one</font>

94
00:07:14,009 --> 00:07:20,729
constant but in the application where

95
00:07:17,520 --> 00:07:23,068
I'm<font color="#CCCCCC"> looking for this will store the job</font>

96
00:07:20,729 --> 00:07:25,050
queue<font color="#CCCCCC"> so this will be the</font><font color="#E5E5E5"> interface to</font>

97
00:07:23,069 --> 00:07:27,900
<font color="#CCCCCC">the job queue this will be everything</font>

98
00:07:25,050 --> 00:07:30,449
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you want to compute here we just</font>

99
00:07:27,900 --> 00:07:34,400
count<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have a value</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> want to</font>

100
00:07:30,449 --> 00:07:37,400
<font color="#E5E5E5">store so this is main meant for</font>

101
00:07:34,400 --> 00:07:37,400
extension

102
00:07:38,199 --> 00:07:47,560
then we have the handler<font color="#CCCCCC"> the</font>

103
00:07:43,689 --> 00:07:51,509
specification of<font color="#E5E5E5"> the handler</font><font color="#CCCCCC"> the handler</font>

104
00:07:47,560 --> 00:07:54,580
will be defined<font color="#E5E5E5"> in this procedure handle</font>

105
00:07:51,509 --> 00:07:59,199
<font color="#E5E5E5">and that</font><font color="#CCCCCC"> will do something very very</font>

106
00:07:54,580 --> 00:08:00,698
<font color="#E5E5E5">simple just adding the count</font><font color="#CCCCCC"> adding</font><font color="#E5E5E5"> 1 to</font>

107
00:07:59,199 --> 00:08:01,870
the<font color="#E5E5E5"> count and then actually with the</font>

108
00:08:00,699 --> 00:08:09,340
adding of the<font color="#E5E5E5"> count</font>

109
00:08:01,870 --> 00:08:11,919
you have the weight that is enabled<font color="#E5E5E5"> so</font>

110
00:08:09,340 --> 00:08:14,859
for the compiler<font color="#E5E5E5"> you have to tell that</font>

111
00:08:11,919 --> 00:08:18,580
the handle is<font color="#CCCCCC"> actually the handler that</font>

112
00:08:14,860 --> 00:08:22,120
you have for your<font color="#E5E5E5"> interrupt and the name</font>

113
00:08:18,580 --> 00:08:28,448
<font color="#E5E5E5">of the sick end for the control</font><font color="#CCCCCC"> C is</font>

114
00:08:22,120 --> 00:08:30,490
defined<font color="#E5E5E5"> within in this package here and</font>

115
00:08:28,449 --> 00:08:33,959
there is also another<font color="#E5E5E5"> counter you have</font>

116
00:08:30,490 --> 00:08:39,849
the counter that<font color="#CCCCCC"> counts how many</font><font color="#E5E5E5"> times</font>

117
00:08:33,958 --> 00:08:42,880
the interrupt has been<font color="#E5E5E5"> occurring so this</font>

118
00:08:39,849 --> 00:08:45,190
is the specification<font color="#E5E5E5"> then the</font>

119
00:08:42,880 --> 00:08:48,189
<font color="#CCCCCC">implementation is just doing plus one</font>

120
00:08:45,190 --> 00:08:51,820
<font color="#E5E5E5">and sometimes we do minus one as well so</font>

121
00:08:48,190 --> 00:08:54,579
<font color="#CCCCCC">we do plus one each time the handler is</font>

122
00:08:51,820 --> 00:08:58,329
called<font color="#CCCCCC"> trista plus one</font><font color="#E5E5E5"> and then actually</font>

123
00:08:54,579 --> 00:09:01,359
<font color="#CCCCCC">the method weight will actually be</font>

124
00:08:58,329 --> 00:09:06,479
<font color="#CCCCCC">accepted what this actually means</font><font color="#E5E5E5"> that</font>

125
00:09:01,360 --> 00:09:09,790
<font color="#CCCCCC">is if the so the call count was</font>

126
00:09:06,480 --> 00:09:12,040
initialized to<font color="#E5E5E5"> zero so the</font>

127
00:09:09,790 --> 00:09:14,680
initialization to zero means<font color="#CCCCCC"> that</font>

128
00:09:12,040 --> 00:09:16,810
actually the weight is not<font color="#E5E5E5"> accepted and</font>

129
00:09:14,680 --> 00:09:21,579
<font color="#E5E5E5">this is then also what</font><font color="#CCCCCC"> the handler does</font>

130
00:09:16,810 --> 00:09:23,619
it waits<font color="#E5E5E5"> so if that so what the the</font>

131
00:09:21,579 --> 00:09:28,060
handler<font color="#E5E5E5"> actually does it actually</font>

132
00:09:23,620 --> 00:09:31,360
<font color="#CCCCCC">releases the weight that's</font><font color="#E5E5E5"> it and you</font>

133
00:09:28,060 --> 00:09:33,640
can<font color="#E5E5E5"> use this for then the code that will</font>

134
00:09:31,360 --> 00:09:35,860
<font color="#CCCCCC">handle</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> interrupt the code that</font>

135
00:09:33,640 --> 00:09:40,120
handles the<font color="#CCCCCC"> interrupts is actually then</font>

136
00:09:35,860 --> 00:09:41,380
released at that point so<font color="#E5E5E5"> that's then</font>

137
00:09:40,120 --> 00:09:43,149
the next task

138
00:09:41,380 --> 00:09:45,730
so this handler actually doesn't know

139
00:09:43,149 --> 00:09:47,829
<font color="#E5E5E5">anything about computing</font><font color="#CCCCCC"> PI or or about</font>

140
00:09:45,730 --> 00:09:50,260
doing<font color="#E5E5E5"> anything so this is completely</font>

141
00:09:47,829 --> 00:09:51,079
separate you<font color="#E5E5E5"> can use this for anything</font>

142
00:09:50,260 --> 00:09:54,200
that you want

143
00:09:51,080 --> 00:09:56,990
to compute<font color="#E5E5E5"> here is the computer or the</font>

144
00:09:54,200 --> 00:10:00,470
worker or whatever does the<font color="#E5E5E5"> processing</font>

145
00:09:56,990 --> 00:10:03,440
<font color="#CCCCCC">this is the package the counting here I</font>

146
00:10:00,470 --> 00:10:06,680
mean this is the package<font color="#CCCCCC"> that will do</font>

147
00:10:03,440 --> 00:10:09,670
the next job there is an interactive

148
00:10:06,680 --> 00:10:13,339
routine<font color="#E5E5E5"> that will be called when the</font>

149
00:10:09,670 --> 00:10:15,620
<font color="#E5E5E5">interrupt occurs and this is better</font>

150
00:10:13,340 --> 00:10:19,490
defined<font color="#CCCCCC"> here because you want to</font><font color="#E5E5E5"> have</font>

151
00:10:15,620 --> 00:10:23,060
this application<font color="#E5E5E5"> dependent and then you</font>

152
00:10:19,490 --> 00:10:27,320
have the task<font color="#E5E5E5"> counter where the stop</font>

153
00:10:23,060 --> 00:10:29,750
happens and there is the global<font color="#CCCCCC"> State</font>

154
00:10:27,320 --> 00:10:32,660
the global<font color="#CCCCCC"> state is whether we continue</font>

155
00:10:29,750 --> 00:10:39,830
<font color="#CCCCCC">or not</font><font color="#E5E5E5"> whether the counter continues or</font>

156
00:10:32,660 --> 00:10:42,800
not the body<font color="#CCCCCC"> doesn't fit on one</font><font color="#E5E5E5"> slide so</font>

157
00:10:39,830 --> 00:10:46,010
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is very much</font><font color="#CCCCCC"> straightforward</font><font color="#E5E5E5"> here</font>

158
00:10:42,800 --> 00:10:49,719
<font color="#E5E5E5">this is where the question</font><font color="#CCCCCC"> happens</font><font color="#E5E5E5"> to</font>

159
00:10:46,010 --> 00:10:53,480
the user<font color="#CCCCCC"> do you want to</font><font color="#E5E5E5"> continue or</font><font color="#CCCCCC"> not</font>

160
00:10:49,720 --> 00:10:57,680
and that actually will return the

161
00:10:53,480 --> 00:11:00,230
boolean that<font color="#E5E5E5"> will be assigned to the</font>

162
00:10:57,680 --> 00:11:03,829
<font color="#CCCCCC">state so</font><font color="#E5E5E5"> that boolean that is returned</font>

163
00:11:00,230 --> 00:11:09,290
here is assigned to<font color="#E5E5E5"> the state continue</font>

164
00:11:03,830 --> 00:11:13,160
<font color="#E5E5E5">which is on initialization - and here</font>

165
00:11:09,290 --> 00:11:18,650
comes then the most difficult piece of

166
00:11:13,160 --> 00:11:21,860
the code<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the tree I mentioned</font>

167
00:11:18,650 --> 00:11:24,260
the reaction-time<font color="#CCCCCC"> if you want to cheat a</font>

168
00:11:21,860 --> 00:11:27,950
little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> and you want</font><font color="#CCCCCC"> really to stop</font>

169
00:11:24,260 --> 00:11:31,670
your counter after<font color="#E5E5E5"> one you put a 0.5 to</font>

170
00:11:27,950 --> 00:11:33,800
<font color="#E5E5E5">1 we have the stop method what the stop</font>

171
00:11:31,670 --> 00:11:37,069
method<font color="#E5E5E5"> will do and the stop</font><font color="#CCCCCC"> method gets</font>

172
00:11:33,800 --> 00:11:40,099
released when the handler<font color="#E5E5E5"> releases its</font>

173
00:11:37,070 --> 00:11:42,680
weight it will actually first<font color="#E5E5E5"> prompt the</font>

174
00:11:40,100 --> 00:11:47,450
user<font color="#E5E5E5"> whether you want to continue</font>

175
00:11:42,680 --> 00:11:49,880
counting<font color="#E5E5E5"> or not if that</font><font color="#CCCCCC"> is the case then</font>

176
00:11:47,450 --> 00:11:53,600
actually you have to reschedule the

177
00:11:49,880 --> 00:11:57,350
handler<font color="#E5E5E5"> so the handler you have to be</font>

178
00:11:53,600 --> 00:12:00,380
recued<font color="#E5E5E5"> so the req is keyword and aidah</font>

179
00:11:57,350 --> 00:12:04,940
<font color="#E5E5E5">so you have to make sure</font><font color="#CCCCCC"> that as</font><font color="#E5E5E5"> the</font>

180
00:12:00,380 --> 00:12:07,880
continuation as the<font color="#E5E5E5"> counting</font>

181
00:12:04,940 --> 00:12:14,030
in use<font color="#E5E5E5"> that you can still interrupt</font>

182
00:12:07,880 --> 00:12:17,000
<font color="#E5E5E5">future runs otherwise if the user said I</font>

183
00:12:14,030 --> 00:12:22,939
don't want to<font color="#CCCCCC"> continue you actually exit</font>

184
00:12:17,000 --> 00:12:26,390
so your exits<font color="#E5E5E5"> will not continue</font><font color="#CCCCCC"> the</font>

185
00:12:22,940 --> 00:12:30,380
global counter is<font color="#E5E5E5"> the value</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> stored</font>

186
00:12:26,390 --> 00:12:33,680
in that package global counter so the

187
00:12:30,380 --> 00:12:37,130
counter will actually increment the

188
00:12:33,680 --> 00:12:39,319
value here so instead<font color="#CCCCCC"> of incrementing</font>

189
00:12:37,130 --> 00:12:42,230
that<font color="#E5E5E5"> global value counter this is where</font>

190
00:12:39,320 --> 00:12:51,070
the<font color="#E5E5E5"> all the computation work happens</font>

191
00:12:42,230 --> 00:12:57,710
<font color="#E5E5E5">essentially and then we are at the main</font>

192
00:12:51,070 --> 00:13:01,010
<font color="#CCCCCC">procedure so the main program where you</font>

193
00:12:57,710 --> 00:13:03,020
put your unreserve<font color="#CCCCCC"> all interrupts</font><font color="#E5E5E5"> so</font>

194
00:13:01,010 --> 00:13:06,770
that<font color="#CCCCCC"> roll that actually tells the</font>

195
00:13:03,020 --> 00:13:09,939
compiler hey<font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> redefine</font><font color="#CCCCCC"> that</font>

196
00:13:06,770 --> 00:13:14,180
<font color="#E5E5E5">interrupt we have a task that will</font>

197
00:13:09,940 --> 00:13:17,060
<font color="#E5E5E5">handle the signal and then there is here</font>

198
00:13:14,180 --> 00:13:22,489
the main body so<font color="#CCCCCC"> that will just</font><font color="#E5E5E5"> actually</font>

199
00:13:17,060 --> 00:13:25,270
<font color="#E5E5E5">launch that handler then comes the main</font>

200
00:13:22,490 --> 00:13:31,820
program that puts everything together<font color="#CCCCCC"> so</font>

201
00:13:25,270 --> 00:13:35,000
<font color="#CCCCCC">we had the handler the very simple</font>

202
00:13:31,820 --> 00:13:38,690
<font color="#E5E5E5">handler that actually had to wait method</font>

203
00:13:35,000 --> 00:13:42,350
in there and then the handle<font color="#CCCCCC"> so when the</font>

204
00:13:38,690 --> 00:13:44,570
handler<font color="#E5E5E5"> gets executed</font><font color="#CCCCCC"> the counter gets</font>

205
00:13:42,350 --> 00:13:47,630
incremented<font color="#E5E5E5"> and then the weight gets</font>

206
00:13:44,570 --> 00:13:51,260
accepted<font color="#E5E5E5"> and then actually</font><font color="#CCCCCC"> you enter</font>

207
00:13:47,630 --> 00:13:53,689
this loop here so<font color="#CCCCCC"> you then</font><font color="#E5E5E5"> can print the</font>

208
00:13:51,260 --> 00:13:57,460
execution time<font color="#E5E5E5"> and then you have the</font>

209
00:13:53,690 --> 00:14:02,589
stop that gets<font color="#CCCCCC"> caught in the counter</font>

210
00:13:57,460 --> 00:14:02,589
<font color="#CCCCCC">that method then that</font><font color="#E5E5E5"> gets accepted</font>

211
00:14:02,640 --> 00:14:16,319
you leave the main loop when the final

212
00:14:08,519 --> 00:14:20,490
state of<font color="#E5E5E5"> the counter</font><font color="#CCCCCC"> becomes false and</font>

213
00:14:16,320 --> 00:14:25,950
that's<font color="#CCCCCC"> actually it</font><font color="#E5E5E5"> so that's the main</font>

214
00:14:20,490 --> 00:14:28,649
program that will run the<font color="#CCCCCC"> test</font><font color="#E5E5E5"> now where</font>

215
00:14:25,950 --> 00:14:33,510
is this being used so this is my last

216
00:14:28,649 --> 00:14:35,899
slide<font color="#CCCCCC"> so you want to have this</font><font color="#E5E5E5"> running</font>

217
00:14:33,510 --> 00:14:39,029
in a computation that<font color="#CCCCCC"> is kind of</font>

218
00:14:35,899 --> 00:14:41,010
unpredictable<font color="#CCCCCC"> so sometimes you run a</font>

219
00:14:39,029 --> 00:14:44,339
program<font color="#E5E5E5"> and it runs it returns</font>

220
00:14:41,010 --> 00:14:47,370
immediately<font color="#CCCCCC"> but sometimes it doesn't so</font>

221
00:14:44,339 --> 00:14:49,649
there<font color="#CCCCCC"> are something and then actually</font>

222
00:14:47,370 --> 00:14:52,740
<font color="#E5E5E5">you want to know what is the system</font>

223
00:14:49,649 --> 00:14:56,130
thinking what is the<font color="#E5E5E5"> program doing then</font>

224
00:14:52,740 --> 00:14:58,290
actually you can do the<font color="#CCCCCC"> ctrl C and then</font>

225
00:14:56,130 --> 00:15:01,470
actually<font color="#E5E5E5"> you can give an update on</font><font color="#CCCCCC"> the</font>

226
00:14:58,290 --> 00:15:03,870
status so I work on polynomial system

227
00:15:01,470 --> 00:15:05,670
solving and sometimes you can very

228
00:15:03,870 --> 00:15:07,709
quickly find<font color="#CCCCCC"> the real</font><font color="#E5E5E5"> root</font>

229
00:15:05,670 --> 00:15:11,040
but sometimes the real root is very

230
00:15:07,709 --> 00:15:13,979
<font color="#E5E5E5">sparse among a huge list of complex</font>

231
00:15:11,040 --> 00:15:16,589
<font color="#E5E5E5">roots and sometimes it's unpredictable</font>

232
00:15:13,980 --> 00:15:18,899
<font color="#E5E5E5">where that is so I think that an</font>

233
00:15:16,589 --> 00:15:21,240
<font color="#E5E5E5">application in general and mathematical</font>

234
00:15:18,899 --> 00:15:24,180
sense could be in searching if you

235
00:15:21,240 --> 00:15:25,920
search<font color="#CCCCCC"> for a result</font><font color="#E5E5E5"> on average you will</font>

236
00:15:24,180 --> 00:15:28,649
get it<font color="#E5E5E5"> quite quick but there may be</font>

237
00:15:25,920 --> 00:15:31,199
cases where you don't<font color="#E5E5E5"> get it right</font><font color="#CCCCCC"> away</font>

238
00:15:28,649 --> 00:15:35,850
and<font color="#E5E5E5"> then a</font><font color="#CCCCCC"> ctrl C can be interesting to</font>

239
00:15:31,199 --> 00:15:39,949
see<font color="#E5E5E5"> the complexity</font><font color="#CCCCCC"> so the code is</font>

240
00:15:35,850 --> 00:15:43,709
<font color="#CCCCCC">available on github so I mentioned</font><font color="#E5E5E5"> the</font>

241
00:15:39,949 --> 00:15:50,160
URL in the beginning<font color="#CCCCCC"> that also points to</font>

242
00:15:43,709 --> 00:15:54,750
this<font color="#CCCCCC"> PHC PAC source code there it</font><font color="#E5E5E5"> is can</font>

243
00:15:50,160 --> 00:16:00,000
be<font color="#CCCCCC"> found in that</font><font color="#E5E5E5"> tasking directory</font><font color="#CCCCCC"> so</font>

244
00:15:54,750 --> 00:16:02,370
there<font color="#E5E5E5"> are</font><font color="#CCCCCC"> 4 scripts here</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> Amin</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> 4</font>

245
00:16:00,000 --> 00:16:08,160
files and these files are also available

246
00:16:02,370 --> 00:16:10,620
in<font color="#CCCCCC"> that source code directory so what I</font>

247
00:16:08,160 --> 00:16:14,529
decided<font color="#E5E5E5"> to present now was just what</font><font color="#CCCCCC"> you</font>

248
00:16:10,620 --> 00:16:17,139
<font color="#CCCCCC">needed to know</font><font color="#E5E5E5"> to get</font><font color="#CCCCCC"> started to build a</font>

249
00:16:14,529 --> 00:16:23,790
<font color="#CCCCCC">drawling mechanism to implement</font><font color="#E5E5E5"> your own</font>

250
00:16:17,139 --> 00:16:23,790
control see thank<font color="#E5E5E5"> you for your attention</font>

251
00:16:24,830 --> 00:16:30,659
[Applause]

252
00:16:42,120 --> 00:16:47,259
the<font color="#CCCCCC"> or delay</font><font color="#E5E5E5"> is just actually yes very</font>

253
00:16:46,389 --> 00:16:50,649
good question

254
00:16:47,259 --> 00:16:54,160
so it actually simply waits for far for

255
00:16:50,649 --> 00:16:56,079
<font color="#E5E5E5">a half a second so this is not a really</font>

256
00:16:54,160 --> 00:16:57,670
<font color="#E5E5E5">count computing here so in the</font>

257
00:16:56,079 --> 00:17:01,559
restaurant in<font color="#E5E5E5"> the interest of</font>

258
00:16:57,670 --> 00:17:04,559
computation<font color="#E5E5E5"> you would put that</font><font color="#CCCCCC"> over here</font>

259
00:17:01,559 --> 00:17:04,559
yeah

260
00:17:19,470 --> 00:17:29,279
it's really<font color="#E5E5E5"> part</font><font color="#CCCCCC"> of constantly yeah it's</font>

261
00:17:25,679 --> 00:17:39,629
part<font color="#E5E5E5"> of the selections yeah so the or</font>

262
00:17:29,279 --> 00:17:42,000
yeah essentially<font color="#CCCCCC"> I mean logically it's</font>

263
00:17:39,629 --> 00:17:47,240
the last<font color="#CCCCCC"> accept statement</font><font color="#E5E5E5"> logical fit</font>

264
00:17:42,000 --> 00:17:47,240
<font color="#CCCCCC">that's what I need</font>

265
00:18:02,210 --> 00:18:07,890
yeah so it's actually<font color="#E5E5E5"> a very</font><font color="#CCCCCC"> good</font>

266
00:18:05,610 --> 00:18:11,280
mechanism so because it allows you to

267
00:18:07,890 --> 00:18:13,470
<font color="#CCCCCC">target</font><font color="#E5E5E5"> one particular exception so you</font>

268
00:18:11,280 --> 00:18:15,450
have here and<font color="#CCCCCC"> you can write as many</font>

269
00:18:13,470 --> 00:18:26,460
handlers that<font color="#E5E5E5"> you need for every</font>

270
00:18:15,450 --> 00:18:28,620
<font color="#E5E5E5">different yes you can start yeah yeah I</font>

271
00:18:26,460 --> 00:18:31,830
<font color="#E5E5E5">when I was testing this I was very happy</font>

272
00:18:28,620 --> 00:18:33,479
that I<font color="#CCCCCC"> could do the dod alternatives</font><font color="#E5E5E5"> so</font>

273
00:18:31,830 --> 00:18:37,520
the<font color="#E5E5E5"> control see I could no longer use</font>

274
00:18:33,480 --> 00:18:37,520
<font color="#E5E5E5">but the other ones I</font><font color="#CCCCCC"> could still use</font>

275
00:18:45,870 --> 00:18:51,399
[Applause]

276
00:18:53,090 --> 00:18:57,439
sure I can still answer<font color="#CCCCCC"> the question</font>

277
00:19:02,570 --> 00:19:07,649
because<font color="#CCCCCC"> the handler so the handler</font>

278
00:19:05,160 --> 00:19:11,430
actually does not<font color="#E5E5E5"> have a loop the</font>

279
00:19:07,650 --> 00:19:13,680
handler<font color="#E5E5E5"> is very simple so it's it's</font>

280
00:19:11,430 --> 00:19:16,290
extremely<font color="#E5E5E5"> so I the other question that</font>

281
00:19:13,680 --> 00:19:19,230
<font color="#CCCCCC">you could have asked what happens if you</font>

282
00:19:16,290 --> 00:19:21,389
do control<font color="#CCCCCC"> C control C control C so you</font>

283
00:19:19,230 --> 00:19:24,870
<font color="#E5E5E5">have a user</font><font color="#CCCCCC"> who will not read whatever</font>

284
00:19:21,390 --> 00:19:27,090
<font color="#E5E5E5">comes on the message</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is then you</font>

285
00:19:24,870 --> 00:19:30,179
<font color="#CCCCCC">have to capture then over here and</font>

286
00:19:27,090 --> 00:19:32,550
continue<font color="#E5E5E5"> so if the user does not read it</font>

287
00:19:30,180 --> 00:19:36,060
<font color="#E5E5E5">you</font><font color="#CCCCCC"> probably need to have a handler also</font>

288
00:19:32,550 --> 00:19:38,629
here<font color="#E5E5E5"> so but you lose</font><font color="#CCCCCC"> the control</font><font color="#E5E5E5"> C but</font>

289
00:19:36,060 --> 00:19:38,629
yeah

290
00:19:48,340 --> 00:19:57,049
<font color="#CCCCCC">No yeah so the control-c actually make</font>

291
00:19:52,850 --> 00:19:59,360
sure<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> weight stops so no longer</font>

292
00:19:57,049 --> 00:20:03,350
<font color="#E5E5E5">weights and then actually the</font><font color="#CCCCCC"> method</font>

293
00:19:59,360 --> 00:20:06,699
stop gets accepted here and then you

294
00:20:03,350 --> 00:20:06,699
<font color="#E5E5E5">have to continue counting</font>

