1
00:00:04,910 --> 00:00:10,700
<font color="#CCCCCC">all right good afternoon thank you</font><font color="#E5E5E5"> for</font>

2
00:00:07,340 --> 00:00:13,490
<font color="#E5E5E5">coming</font><font color="#CCCCCC"> I am</font><font color="#E5E5E5"> Eugene and I will talk</font><font color="#CCCCCC"> about</font>

3
00:00:10,700 --> 00:00:17,810
my project that<font color="#E5E5E5"> I've been working on for</font>

4
00:00:13,490 --> 00:00:18,860
<font color="#CCCCCC">some time so what is the problem so</font><font color="#E5E5E5"> we</font>

5
00:00:17,810 --> 00:00:23,570
have<font color="#CCCCCC"> this interpreters and compilers</font>

6
00:00:18,860 --> 00:00:26,300
right so we know<font color="#CCCCCC"> this Metis and and use</font>

7
00:00:23,570 --> 00:00:31,910
them frequently<font color="#CCCCCC"> so interpretation is</font>

8
00:00:26,300 --> 00:00:34,220
<font color="#E5E5E5">very it's so both</font><font color="#CCCCCC"> of these methods</font><font color="#E5E5E5"> are</font>

9
00:00:31,910 --> 00:00:36,739
<font color="#E5E5E5">good in their own ways</font><font color="#CCCCCC"> right so the</font>

10
00:00:34,220 --> 00:00:39,650
temperatures today<font color="#CCCCCC"> they main strength is</font>

11
00:00:36,739 --> 00:00:42,019
<font color="#CCCCCC">that they are</font><font color="#E5E5E5"> very close to the problem</font>

12
00:00:39,650 --> 00:00:43,580
<font color="#E5E5E5">semantics</font><font color="#CCCCCC"> so if we implement in a</font>

13
00:00:42,020 --> 00:00:48,260
programming<font color="#E5E5E5"> language</font><font color="#CCCCCC"> he has some rules</font>

14
00:00:43,580 --> 00:00:49,879
<font color="#E5E5E5">that it is for variation of order of the</font>

15
00:00:48,260 --> 00:00:54,230
language and<font color="#E5E5E5"> they're very cleanly</font>

16
00:00:49,880 --> 00:00:57,410
expressed as an interpreter<font color="#E5E5E5"> right</font><font color="#CCCCCC"> as it</font>

17
00:00:54,230 --> 00:00:59,930
means that leads to very clean code<font color="#E5E5E5"> so</font>

18
00:00:57,410 --> 00:01:01,790
we can<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can explore the interpreter we</font>

19
00:00:59,930 --> 00:01:07,929
can a debugger<font color="#E5E5E5"> very easily</font><font color="#CCCCCC"> you can test</font>

20
00:01:01,790 --> 00:01:12,710
it right but<font color="#E5E5E5"> then I can't</font><font color="#CCCCCC"> oh it has some</font>

21
00:01:07,929 --> 00:01:14,869
<font color="#CCCCCC">downside so the by its nature</font><font color="#E5E5E5"> it has to</font>

22
00:01:12,710 --> 00:01:17,719
wrap all of<font color="#E5E5E5"> the instructions in some</font>

23
00:01:14,869 --> 00:01:21,079
glue code and that our list so<font color="#E5E5E5"> they all</font>

24
00:01:17,719 --> 00:01:24,139
<font color="#E5E5E5">read right so how do we do that we write</font>

25
00:01:21,079 --> 00:01:26,899
a compiler since<font color="#E5E5E5"> that and compilers are</font>

26
00:01:24,139 --> 00:01:28,490
awesome they they<font color="#E5E5E5"> basically operate in</font>

27
00:01:26,899 --> 00:01:30,469
two stages so<font color="#E5E5E5"> they displease</font>

28
00:01:28,490 --> 00:01:33,770
investigation into the compiler stage

29
00:01:30,469 --> 00:01:35,689
and the execution stage right so the

30
00:01:33,770 --> 00:01:38,539
compiler stage<font color="#E5E5E5"> now takes only the source</font>

31
00:01:35,689 --> 00:01:41,059
program<font color="#E5E5E5"> right</font><font color="#CCCCCC"> and it produces some kind</font>

32
00:01:38,539 --> 00:01:43,659
of target<font color="#E5E5E5"> code that takes the rest of</font>

33
00:01:41,060 --> 00:01:46,429
<font color="#E5E5E5">the arguments</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> to this program</font>

34
00:01:43,659 --> 00:01:48,969
right and it's that's all good but

35
00:01:46,429 --> 00:01:51,350
<font color="#CCCCCC">unfortunately</font><font color="#E5E5E5"> a compilers are also</font>

36
00:01:48,969 --> 00:01:53,899
harder to<font color="#CCCCCC"> develop and maintain because</font>

37
00:01:51,350 --> 00:01:57,169
<font color="#E5E5E5">they require a specific style of coding</font>

38
00:01:53,899 --> 00:02:00,700
where we don't<font color="#CCCCCC"> talk about the</font><font color="#E5E5E5"> operations</font>

39
00:01:57,170 --> 00:02:04,399
<font color="#E5E5E5">we talk about a ways to generate these</font>

40
00:02:00,700 --> 00:02:07,849
operations right<font color="#E5E5E5"> and also they require</font>

41
00:02:04,399 --> 00:02:11,060
<font color="#E5E5E5">uses some are a complex</font><font color="#CCCCCC"> Pro libraries</font>

42
00:02:07,849 --> 00:02:14,210
and programming<font color="#E5E5E5"> aks like and</font><font color="#CCCCCC"> I no</font><font color="#E5E5E5"> matter</font>

43
00:02:11,060 --> 00:02:16,850
how how<font color="#CCCCCC"> easy the compiler</font><font color="#E5E5E5"> infrastructure</font>

44
00:02:14,210 --> 00:02:18,230
makes it to<font color="#CCCCCC"> write</font><font color="#E5E5E5"> compilers it will</font>

45
00:02:16,850 --> 00:02:24,590
always<font color="#CCCCCC"> be harder than</font>

46
00:02:18,230 --> 00:02:25,510
<font color="#E5E5E5">then to write an interpreter right so we</font>

47
00:02:24,590 --> 00:02:27,620
can't pick and<font color="#CCCCCC"> choose different</font>

48
00:02:25,510 --> 00:02:31,399
components<font color="#CCCCCC"> or different advantages</font><font color="#E5E5E5"> of</font>

49
00:02:27,620 --> 00:02:36,080
<font color="#CCCCCC">this approaches so we have to either</font>

50
00:02:31,400 --> 00:02:41,360
pick<font color="#CCCCCC"> any</font><font color="#E5E5E5"> interpreter and we get a clean</font>

51
00:02:36,080 --> 00:02:44,510
<font color="#E5E5E5">code but slow execution or we can pick a</font>

52
00:02:41,360 --> 00:02:48,829
compiler<font color="#E5E5E5"> and we stuck</font><font color="#CCCCCC"> with the code that</font>

53
00:02:44,510 --> 00:02:50,629
is it's harder to to grasp right but

54
00:02:48,829 --> 00:02:52,790
what what if we could pick and choose<font color="#CCCCCC"> so</font>

55
00:02:50,629 --> 00:02:55,459
what if we could pick<font color="#E5E5E5"> drugs legislation</font>

56
00:02:52,790 --> 00:02:58,629
semantics<font color="#E5E5E5"> property and that</font><font color="#CCCCCC"> lis</font><font color="#E5E5E5"> that</font>

57
00:02:55,459 --> 00:03:03,470
would lead to the code that<font color="#CCCCCC"> is easy to</font>

58
00:02:58,629 --> 00:03:06,738
explore to debug<font color="#E5E5E5"> to extent but also get</font>

59
00:03:03,470 --> 00:03:09,530
<font color="#E5E5E5">the multi stage execution with the</font>

60
00:03:06,739 --> 00:03:12,650
corresponding properties for performance

61
00:03:09,530 --> 00:03:14,930
<font color="#E5E5E5">and</font><font color="#CCCCCC"> luckily this</font><font color="#E5E5E5"> still exists for quite</font>

62
00:03:12,650 --> 00:03:17,269
some<font color="#CCCCCC"> time since</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> seventies in school</font>

63
00:03:14,930 --> 00:03:18,980
partial evaluation so what is the

64
00:03:17,269 --> 00:03:21,349
<font color="#CCCCCC">partial evaluator</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the program that</font>

65
00:03:18,980 --> 00:03:23,599
<font color="#CCCCCC">takes</font><font color="#E5E5E5"> at the program and some</font><font color="#CCCCCC"> of the</font>

66
00:03:21,349 --> 00:03:26,089
<font color="#E5E5E5">arguments to the program and it produces</font>

67
00:03:23,599 --> 00:03:27,950
a representation of another program<font color="#CCCCCC"> that</font>

68
00:03:26,090 --> 00:03:29,870
takes the rest<font color="#E5E5E5"> of the arguments so there</font>

69
00:03:27,950 --> 00:03:33,078
are games<font color="#E5E5E5"> split into two groups</font><font color="#CCCCCC"> right</font>

70
00:03:29,870 --> 00:03:35,660
the first group is passed to<font color="#CCCCCC"> the partial</font>

71
00:03:33,079 --> 00:03:38,450
evaluator<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> second</font><font color="#E5E5E5"> group is passed</font>

72
00:03:35,660 --> 00:03:41,299
to<font color="#CCCCCC"> the program produced by this partial</font>

73
00:03:38,450 --> 00:03:44,149
evaluator<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> already see that</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> we</font>

74
00:03:41,299 --> 00:03:46,700
apply<font color="#CCCCCC"> it to to our interpreter with the</font>

75
00:03:44,150 --> 00:03:49,519
third<font color="#E5E5E5"> program as one group and arguments</font>

76
00:03:46,700 --> 00:03:51,858
is the is the other group<font color="#E5E5E5"> what we get is</font>

77
00:03:49,519 --> 00:03:55,150
pretty<font color="#E5E5E5"> close to multistage execution</font>

78
00:03:51,859 --> 00:03:58,940
that we used a compiler<font color="#E5E5E5"> for right and</font>

79
00:03:55,150 --> 00:04:02,620
all<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the so here all</font><font color="#CCCCCC"> of the analysis</font>

80
00:03:58,940 --> 00:04:05,629
we<font color="#CCCCCC"> are done at this first stage that</font>

81
00:04:02,620 --> 00:04:08,120
<font color="#CCCCCC">takes only the</font><font color="#E5E5E5"> source program</font><font color="#CCCCCC"> and the</font>

82
00:04:05,629 --> 00:04:11,149
compiler stage it<font color="#E5E5E5"> doesn't have</font><font color="#CCCCCC"> access to</font>

83
00:04:08,120 --> 00:04:15,650
<font color="#E5E5E5">the edit to the program and it doesn't</font>

84
00:04:11,150 --> 00:04:17,870
have any any analysis and transformation

85
00:04:15,650 --> 00:04:20,840
process<font color="#E5E5E5"> and here we can</font><font color="#CCCCCC"> achieve the same</font>

86
00:04:17,870 --> 00:04:23,090
<font color="#E5E5E5">result</font><font color="#CCCCCC"> you can embed all of the analysis</font>

87
00:04:20,839 --> 00:04:25,940
and<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it informations in the first</font>

88
00:04:23,090 --> 00:04:28,729
stage and the<font color="#CCCCCC"> compiled program</font><font color="#E5E5E5"> will be</font>

89
00:04:25,940 --> 00:04:30,950
free<font color="#CCCCCC"> of these extra overhead layers</font>

90
00:04:28,729 --> 00:04:34,680
<font color="#E5E5E5">right so</font>

91
00:04:30,950 --> 00:04:36,360
right<font color="#CCCCCC"> well first the dairy market</font>

92
00:04:34,680 --> 00:04:38,490
it<font color="#CCCCCC"> requires all</font><font color="#E5E5E5"> the arguments to be</font>

93
00:04:36,360 --> 00:04:40,440
separated<font color="#E5E5E5"> right so if we want to apply</font>

94
00:04:38,490 --> 00:04:42,360
<font color="#E5E5E5">this</font><font color="#CCCCCC"> method to</font><font color="#E5E5E5"> any interpreter we need</font>

95
00:04:40,440 --> 00:04:45,990
to to specify which arguments go to

96
00:04:42,360 --> 00:04:48,120
which stage<font color="#E5E5E5"> okay and here we say</font><font color="#CCCCCC"> that</font>

97
00:04:45,990 --> 00:04:50,520
such<font color="#CCCCCC"> program stage zero or static as</font>

98
00:04:48,120 --> 00:04:55,410
<font color="#CCCCCC">it's traditionally called</font><font color="#E5E5E5"> and arguments</font>

99
00:04:50,520 --> 00:04:57,380
are in stage one<font color="#CCCCCC"> or dynamic</font><font color="#E5E5E5"> right we we</font>

100
00:04:55,410 --> 00:04:59,610
have to make some additions to that some

101
00:04:57,380 --> 00:05:02,370
adjustments so first of all we don't

102
00:04:59,610 --> 00:05:04,800
<font color="#E5E5E5">really want this mix here</font><font color="#CCCCCC"> so this</font>

103
00:05:02,370 --> 00:05:07,260
partial evaluator because the<font color="#E5E5E5"> the</font>

104
00:05:04,800 --> 00:05:09,630
program here the source program<font color="#E5E5E5"> is just</font>

105
00:05:07,260 --> 00:05:11,820
another argument<font color="#E5E5E5"> to our interpreter and</font>

106
00:05:09,630 --> 00:05:14,700
since the main application of this is

107
00:05:11,820 --> 00:05:16,980
<font color="#CCCCCC">Forge</font><font color="#E5E5E5"> it's right the program will be</font>

108
00:05:14,700 --> 00:05:19,890
bound<font color="#E5E5E5"> at runtime</font><font color="#CCCCCC"> we don't know it in</font>

109
00:05:16,980 --> 00:05:22,979
<font color="#CCCCCC">advance</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> but here in the above</font>

110
00:05:19,890 --> 00:05:24,570
picture we we have<font color="#E5E5E5"> to to partially</font>

111
00:05:22,979 --> 00:05:27,390
evaluate the interpreter every time<font color="#E5E5E5"> to</font>

112
00:05:24,570 --> 00:05:30,419
<font color="#E5E5E5">every program right and that is its own</font>

113
00:05:27,390 --> 00:05:33,500
level<font color="#E5E5E5"> of interaction and its own</font>

114
00:05:30,419 --> 00:05:36,719
interpretation overhead that<font color="#E5E5E5"> is exactly</font>

115
00:05:33,500 --> 00:05:40,440
what we want to<font color="#E5E5E5"> avoid so instead</font><font color="#CCCCCC"> we are</font>

116
00:05:36,720 --> 00:05:42,390
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to use a specialized</font><font color="#CCCCCC"> generator in</font>

117
00:05:40,440 --> 00:05:46,260
the picture<font color="#CCCCCC"> below</font><font color="#E5E5E5"> right so here</font><font color="#CCCCCC"> we have</font>

118
00:05:42,390 --> 00:05:50,490
this<font color="#CCCCCC"> this generator that produces a</font>

119
00:05:46,260 --> 00:05:53,219
<font color="#E5E5E5">two-stage program right so it we can run</font>

120
00:05:50,490 --> 00:05:56,370
it at compile time<font color="#E5E5E5"> and produce our</font>

121
00:05:53,220 --> 00:05:58,380
two-stage<font color="#E5E5E5"> special visor that</font><font color="#CCCCCC"> then it</font>

122
00:05:56,370 --> 00:05:59,880
takes<font color="#E5E5E5"> this program in one stage the</font>

123
00:05:58,380 --> 00:06:04,469
arguments in<font color="#E5E5E5"> the second stage and</font>

124
00:05:59,880 --> 00:06:06,630
produces the result all right yeah and

125
00:06:04,470 --> 00:06:08,820
also<font color="#E5E5E5"> why not</font><font color="#CCCCCC"> a generalize them to</font>

126
00:06:06,630 --> 00:06:11,430
multiple stages right and for example<font color="#E5E5E5"> we</font>

127
00:06:08,820 --> 00:06:12,900
could<font color="#CCCCCC"> have a system where that processes</font>

128
00:06:11,430 --> 00:06:15,960
some queries to a<font color="#E5E5E5"> database for example</font>

129
00:06:12,900 --> 00:06:19,590
<font color="#E5E5E5">right and it can have</font><font color="#CCCCCC"> multiple levels</font><font color="#E5E5E5"> of</font>

130
00:06:15,960 --> 00:06:22,739
parameters right so in one stage we can

131
00:06:19,590 --> 00:06:25,560
have like<font color="#CCCCCC"> prepare statements so it's it</font>

132
00:06:22,740 --> 00:06:28,400
is<font color="#E5E5E5"> a broad a description or a plan of a</font>

133
00:06:25,560 --> 00:06:31,110
state<font color="#E5E5E5"> of a query or of some kind of a</font>

134
00:06:28,400 --> 00:06:34,400
query<font color="#E5E5E5"> or procedure that we that we want</font>

135
00:06:31,110 --> 00:06:37,140
<font color="#CCCCCC">to interpret</font><font color="#E5E5E5"> and we can already</font>

136
00:06:34,400 --> 00:06:40,140
specialize our<font color="#E5E5E5"> interpreter with respect</font>

137
00:06:37,140 --> 00:06:42,390
to this<font color="#E5E5E5"> prepare statement and then for</font>

138
00:06:40,140 --> 00:06:44,700
each<font color="#CCCCCC"> a query the parameters that we</font><font color="#E5E5E5"> get</font>

139
00:06:42,390 --> 00:06:47,580
like from<font color="#E5E5E5"> a system of some compose</font>

140
00:06:44,700 --> 00:06:50,969
<font color="#E5E5E5">we can</font><font color="#CCCCCC"> emit code</font><font color="#E5E5E5"> pretty fast and the</font>

141
00:06:47,580 --> 00:06:53,539
<font color="#E5E5E5">resulting code will be as specialized</font><font color="#CCCCCC"> or</font>

142
00:06:50,970 --> 00:06:56,670
<font color="#E5E5E5">query</font><font color="#CCCCCC"> alright so what we want is</font><font color="#E5E5E5"> we want</font>

143
00:06:53,540 --> 00:07:02,850
for our<font color="#E5E5E5"> IG a generator</font><font color="#CCCCCC"> to meet a</font>

144
00:06:56,670 --> 00:07:05,850
multi-stage program right<font color="#CCCCCC"> okay so let's</font>

145
00:07:02,850 --> 00:07:10,200
build<font color="#E5E5E5"> it right for Olivia</font>

146
00:07:05,850 --> 00:07:14,280
<font color="#E5E5E5">right so why this is</font><font color="#CCCCCC"> a focus of</font><font color="#E5E5E5"> the</font>

147
00:07:10,200 --> 00:07:19,229
project<font color="#E5E5E5"> all right it's concrete it here</font>

148
00:07:14,280 --> 00:07:22,289
but this is<font color="#CCCCCC"> LLVM</font><font color="#E5E5E5"> all right so pile on VM</font>

149
00:07:19,230 --> 00:07:24,780
first of all there<font color="#CCCCCC"> are some existing</font>

150
00:07:22,290 --> 00:07:29,880
partial<font color="#CCCCCC"> if it is for</font><font color="#E5E5E5"> from for some</font>

151
00:07:24,780 --> 00:07:33,419
<font color="#E5E5E5">languages like C and ml family</font><font color="#CCCCCC"> I believe</font>

152
00:07:29,880 --> 00:07:35,190
but they are all kind<font color="#CCCCCC"> of forced to to</font>

153
00:07:33,420 --> 00:07:38,670
<font color="#E5E5E5">implement the same algorithm it's</font>

154
00:07:35,190 --> 00:07:41,070
essentially<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> and what is a better</font>

155
00:07:38,670 --> 00:07:43,910
place to<font color="#E5E5E5"> implement this algorithm then</font>

156
00:07:41,070 --> 00:07:45,960
in a<font color="#E5E5E5"> language independent optimizer</font>

157
00:07:43,910 --> 00:07:48,840
<font color="#E5E5E5">right so let's put it there</font>

158
00:07:45,960 --> 00:07:51,390
<font color="#E5E5E5">right and that will may enable a lots of</font>

159
00:07:48,840 --> 00:07:53,070
languages<font color="#E5E5E5"> so with</font><font color="#CCCCCC"> little additions to</font>

160
00:07:51,390 --> 00:07:54,930
the front<font color="#E5E5E5"> ends of</font><font color="#CCCCCC"> these languages we can</font>

161
00:07:53,070 --> 00:07:57,650
take advantage<font color="#CCCCCC"> of this common</font>

162
00:07:54,930 --> 00:08:04,920
functionality in in the optimizer<font color="#CCCCCC"> and</font>

163
00:07:57,650 --> 00:08:08,280
what we get<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a is a is a</font><font color="#E5E5E5"> way to to</font>

164
00:08:04,920 --> 00:08:13,820
<font color="#E5E5E5">build a multi-stage generator for each</font>

165
00:08:08,280 --> 00:08:13,820
of these languages<font color="#E5E5E5"> all right so</font>

166
00:08:14,069 --> 00:08:18,990
the<font color="#CCCCCC"> project is an extension to LLVM</font>

167
00:08:16,529 --> 00:08:23,249
<font color="#E5E5E5">right it has some</font><font color="#CCCCCC"> attributes and</font>

168
00:08:18,990 --> 00:08:25,740
intrinsic and the main<font color="#E5E5E5"> part is the two</font>

169
00:08:23,249 --> 00:08:28,949
passes so<font color="#CCCCCC"> we have an inner and</font><font color="#E5E5E5"> an</font>

170
00:08:25,740 --> 00:08:33,029
analysis pass and the transformation

171
00:08:28,949 --> 00:08:37,199
pass right<font color="#E5E5E5"> so first of all how do we</font>

172
00:08:33,029 --> 00:08:38,909
represent represent<font color="#CCCCCC"> annotations</font><font color="#E5E5E5"> well as</font>

173
00:08:37,198 --> 00:08:41,029
I<font color="#CCCCCC"> said we we have to annotate</font><font color="#E5E5E5"> the</font>

174
00:08:38,909 --> 00:08:43,679
program in<font color="#CCCCCC"> order to tell the system</font><font color="#E5E5E5"> how</font>

175
00:08:41,029 --> 00:08:47,160
which arguments go to each stage<font color="#E5E5E5"> right</font>

176
00:08:43,679 --> 00:08:50,399
so we have<font color="#CCCCCC"> to what we want is to</font><font color="#E5E5E5"> split a</font>

177
00:08:47,160 --> 00:08:52,529
function<font color="#CCCCCC"> in two like in this case two</font>

178
00:08:50,399 --> 00:08:55,850
functions one<font color="#E5E5E5"> will take Y and the other</font>

179
00:08:52,529 --> 00:08:58,350
will take X right<font color="#CCCCCC"> so here we had some</font>

180
00:08:55,850 --> 00:09:02,670
attributes to the parameters right so we

181
00:08:58,350 --> 00:09:06,480
say that<font color="#E5E5E5"> X is stage</font><font color="#CCCCCC"> one it</font><font color="#E5E5E5"> goes there</font>

182
00:09:02,670 --> 00:09:08,189
<font color="#E5E5E5">the result is also a stage one and we</font>

183
00:09:06,480 --> 00:09:10,470
also have the attribute<font color="#E5E5E5"> when the</font>

184
00:09:08,190 --> 00:09:12,569
function itself<font color="#E5E5E5"> now that may seem</font>

185
00:09:10,470 --> 00:09:15,990
redundant<font color="#E5E5E5"> but it's it's not because it</font>

186
00:09:12,569 --> 00:09:20,819
is natural to<font color="#CCCCCC"> to wish for the last stage</font>

187
00:09:15,990 --> 00:09:23,670
to not take<font color="#E5E5E5"> any arguments at all so for</font>

188
00:09:20,819 --> 00:09:25,709
<font color="#E5E5E5">example we can have have a function at</font>

189
00:09:23,670 --> 00:09:28,050
the very last<font color="#E5E5E5"> stage</font><font color="#CCCCCC"> that doesn't take</font>

190
00:09:25,709 --> 00:09:30,930
<font color="#E5E5E5">any arguments but instead it accesses</font>

191
00:09:28,050 --> 00:09:33,569
<font color="#CCCCCC">some memories and</font><font color="#E5E5E5"> or like it may call</font>

192
00:09:30,930 --> 00:09:36,479
some external<font color="#CCCCCC"> functions for certain</font>

193
00:09:33,569 --> 00:09:39,300
operations<font color="#E5E5E5"> right example it can drive to</font>

194
00:09:36,480 --> 00:09:42,029
disk or like store some instant<font color="#CCCCCC"> memory</font>

195
00:09:39,300 --> 00:09:45,899
and we compose<font color="#E5E5E5"> a string of letters or</font>

196
00:09:42,029 --> 00:09:48,149
something<font color="#CCCCCC"> like that right what is the</font>

197
00:09:45,899 --> 00:09:51,360
interface here<font color="#E5E5E5"> so the intrinsic takes</font>

198
00:09:48,149 --> 00:09:54,569
for a function<font color="#CCCCCC"> pointer and the arguments</font>

199
00:09:51,360 --> 00:09:59,760
right<font color="#CCCCCC"> and it produces</font><font color="#E5E5E5"> the program and</font>

200
00:09:54,569 --> 00:10:01,680
it's in<font color="#E5E5E5"> Claire right so there is some</font>

201
00:09:59,760 --> 00:10:04,589
extension to client<font color="#E5E5E5"> so we have this</font>

202
00:10:01,680 --> 00:10:08,519
attribute<font color="#E5E5E5"> and a function declaration and</font>

203
00:10:04,589 --> 00:10:12,269
<font color="#E5E5E5">the result of this function attribute</font>

204
00:10:08,519 --> 00:10:14,699
will be the body for this<font color="#E5E5E5"> function</font><font color="#CCCCCC"> so we</font>

205
00:10:12,269 --> 00:10:17,209
don't have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> body in in the source code</font>

206
00:10:14,699 --> 00:10:20,040
but<font color="#CCCCCC"> a</font><font color="#E5E5E5"> closed loop will generate as for</font>

207
00:10:17,209 --> 00:10:23,099
will generate one for us<font color="#E5E5E5"> using the</font>

208
00:10:20,040 --> 00:10:26,189
<font color="#E5E5E5">intrinsic right</font><font color="#CCCCCC"> how do we</font><font color="#E5E5E5"> use this well</font>

209
00:10:23,100 --> 00:10:27,930
we say we have<font color="#E5E5E5"> some interpreter in C</font>

210
00:10:26,189 --> 00:10:30,480
right so so we're<font color="#E5E5E5"> also in</font>

211
00:10:27,930 --> 00:10:33,870
<font color="#E5E5E5">repeater for for language or maybe it's</font>

212
00:10:30,480 --> 00:10:35,940
something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> an interpreter like maybe</font>

213
00:10:33,870 --> 00:10:38,670
we match some grammars<font color="#E5E5E5"> so we have some</font>

214
00:10:35,940 --> 00:10:43,710
grammar descriptions and<font color="#E5E5E5"> a strain right</font>

215
00:10:38,670 --> 00:10:46,050
so we add the<font color="#E5E5E5"> the attributes to to the</font>

216
00:10:43,710 --> 00:10:48,660
arguments to declare which arguments go

217
00:10:46,050 --> 00:10:50,670
to which stage right and then we add

218
00:10:48,660 --> 00:10:53,370
<font color="#E5E5E5">this function declaration with the mix</font>

219
00:10:50,670 --> 00:10:56,310
attribute<font color="#CCCCCC"> the reference is the function</font>

220
00:10:53,370 --> 00:10:58,730
<font color="#E5E5E5">right and then we need</font><font color="#CCCCCC"> to have some</font>

221
00:10:56,310 --> 00:11:01,949
aware that<font color="#CCCCCC"> it</font><font color="#E5E5E5"> translates the</font>

222
00:10:58,730 --> 00:11:04,890
<font color="#CCCCCC">presentations of programs into object</font>

223
00:11:01,950 --> 00:11:08,100
code right so we could use work for that

224
00:11:04,890 --> 00:11:12,240
<font color="#E5E5E5">and of</font><font color="#CCCCCC"> course</font><font color="#E5E5E5"> we can so the function</font>

225
00:11:08,100 --> 00:11:14,250
will<font color="#E5E5E5"> create</font><font color="#CCCCCC"> I our representation of of a</font>

226
00:11:12,240 --> 00:11:16,620
specialized<font color="#CCCCCC"> ER</font><font color="#E5E5E5"> in some context and we</font>

227
00:11:14,250 --> 00:11:19,440
can you<font color="#E5E5E5"> can manipulate this context we</font>

228
00:11:16,620 --> 00:11:21,930
can<font color="#E5E5E5"> create like in our application</font>

229
00:11:19,440 --> 00:11:24,750
<font color="#E5E5E5">either a single context for everything</font>

230
00:11:21,930 --> 00:11:27,750
for everything<font color="#CCCCCC"> or multiple context for</font>

231
00:11:24,750 --> 00:11:32,339
different situation<font color="#CCCCCC"> so it's</font><font color="#E5E5E5"> very</font>

232
00:11:27,750 --> 00:11:36,330
flexible<font color="#E5E5E5"> in this case yeah so now we'll</font>

233
00:11:32,339 --> 00:11:39,930
talk about<font color="#E5E5E5"> implementation for a bit so</font>

234
00:11:36,330 --> 00:11:41,790
here we have so<font color="#E5E5E5"> what happens in</font><font color="#CCCCCC"> Inclan</font>

235
00:11:39,930 --> 00:11:46,380
<font color="#E5E5E5">is that it creates this body using the</font>

236
00:11:41,790 --> 00:11:49,279
<font color="#CCCCCC">internal</font><font color="#E5E5E5"> occur right next the intrinsic</font>

237
00:11:46,380 --> 00:11:51,420
in in the optimizer will be replaced

238
00:11:49,279 --> 00:11:54,330
<font color="#CCCCCC">expanding it into</font><font color="#E5E5E5"> a function call</font><font color="#CCCCCC"> so</font>

239
00:11:51,420 --> 00:11:57,120
this<font color="#E5E5E5"> function is actually a demain power</font>

240
00:11:54,330 --> 00:11:58,950
horse so it takes<font color="#E5E5E5"> these stage in your</font>

241
00:11:57,120 --> 00:12:01,290
arguments and it returns<font color="#CCCCCC"> the function</font>

242
00:11:58,950 --> 00:12:03,440
<font color="#E5E5E5">that takes a steady one arguments and so</font>

243
00:12:01,290 --> 00:12:07,020
on<font color="#E5E5E5"> right so this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> actually our</font>

244
00:12:03,440 --> 00:12:09,890
specialized right and the<font color="#E5E5E5"> high</font><font color="#CCCCCC"> level</font>

245
00:12:07,020 --> 00:12:12,930
would<font color="#E5E5E5"> be what we want is we want to</font>

246
00:12:09,890 --> 00:12:15,240
<font color="#E5E5E5">display the function it takes arguments</font>

247
00:12:12,930 --> 00:12:17,160
of various stages<font color="#E5E5E5"> into a chain of</font>

248
00:12:15,240 --> 00:12:21,390
<font color="#E5E5E5">functions right each function will take</font>

249
00:12:17,160 --> 00:12:23,880
<font color="#E5E5E5">arguments of which of each stage and</font>

250
00:12:21,390 --> 00:12:26,490
return the representation of the next

251
00:12:23,880 --> 00:12:31,200
function<font color="#E5E5E5"> that takes arguments of the</font>

252
00:12:26,490 --> 00:12:33,510
next<font color="#CCCCCC"> sessions all right so we apply a</font>

253
00:12:31,200 --> 00:12:35,820
certain transformation<font color="#E5E5E5"> a number of times</font>

254
00:12:33,510 --> 00:12:38,550
and this all<font color="#E5E5E5"> of this all this</font>

255
00:12:35,820 --> 00:12:41,730
transformation does is that<font color="#CCCCCC"> it's fields</font>

256
00:12:38,550 --> 00:12:43,979
of the<font color="#CCCCCC"> the arguments of the</font><font color="#E5E5E5"> last</font>

257
00:12:41,730 --> 00:12:45,840
<font color="#CCCCCC">alright it removes them from the</font>

258
00:12:43,980 --> 00:12:48,650
original<font color="#CCCCCC"> function and</font><font color="#E5E5E5"> it creates it</font>

259
00:12:45,840 --> 00:12:50,850
replaces<font color="#CCCCCC"> the result with</font><font color="#E5E5E5"> the function or</font>

260
00:12:48,650 --> 00:12:54,390
representation of a<font color="#CCCCCC"> function that</font><font color="#E5E5E5"> takes</font>

261
00:12:50,850 --> 00:12:59,570
this field of arguments and returns the

262
00:12:54,390 --> 00:13:04,260
old result<font color="#E5E5E5"> right let's go down</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> IR so</font>

263
00:12:59,570 --> 00:13:08,160
yeah we have<font color="#E5E5E5"> function f here with the</font>

264
00:13:04,260 --> 00:13:11,210
arguments x<font color="#CCCCCC"> y and z directions that is</font>

265
00:13:08,160 --> 00:13:13,770
<font color="#E5E5E5">released is in second stage stage to</font>

266
00:13:11,210 --> 00:13:16,170
right and up to one<font color="#E5E5E5"> transformation we</font>

267
00:13:13,770 --> 00:13:18,750
get this function<font color="#E5E5E5"> G that</font><font color="#CCCCCC"> I don't have</font>

268
00:13:16,170 --> 00:13:21,569
that but instead<font color="#E5E5E5"> it returns a value</font>

269
00:13:18,750 --> 00:13:26,160
pointer<font color="#CCCCCC"> which is actually a function</font>

270
00:13:21,570 --> 00:13:29,850
pointer<font color="#E5E5E5"> right and this</font><font color="#CCCCCC"> function G</font>

271
00:13:26,160 --> 00:13:32,430
creates this new function that<font color="#E5E5E5"> it</font><font color="#CCCCCC"> takes</font>

272
00:13:29,850 --> 00:13:34,470
that<font color="#E5E5E5"> right and emails notice this</font>

273
00:13:32,430 --> 00:13:38,219
context argument which is used for

274
00:13:34,470 --> 00:13:39,500
<font color="#E5E5E5">accessing the current IR module context</font>

275
00:13:38,220 --> 00:13:42,840
and so on

276
00:13:39,500 --> 00:13:48,480
<font color="#CCCCCC">ok after the of the next step we</font><font color="#E5E5E5"> get</font>

277
00:13:42,840 --> 00:13:51,150
this function<font color="#E5E5E5"> H that takes the takes</font><font color="#CCCCCC"> or</font>

278
00:13:48,480 --> 00:13:54,000
arguments in one stage so this<font color="#E5E5E5"> is one</font>

279
00:13:51,150 --> 00:13:58,610
<font color="#CCCCCC">missing argument here it's X right so</font><font color="#E5E5E5"> it</font>

280
00:13:54,000 --> 00:14:03,180
<font color="#CCCCCC">doesn't have</font><font color="#E5E5E5"> Y any more hit he turns X</font>

281
00:13:58,610 --> 00:14:06,030
<font color="#E5E5E5">ok on the level</font><font color="#CCCCCC"> of a basic block</font><font color="#E5E5E5"> so on</font>

282
00:14:03,180 --> 00:14:09,620
the Left we<font color="#E5E5E5"> have an example of some</font>

283
00:14:06,030 --> 00:14:12,990
control flow in<font color="#E5E5E5"> our source program and</font>

284
00:14:09,620 --> 00:14:16,350
if we on the right is the example<font color="#E5E5E5"> the</font>

285
00:14:12,990 --> 00:14:19,590
basic<font color="#E5E5E5"> block of this specialized so in</font>

286
00:14:16,350 --> 00:14:22,800
the example have<font color="#CCCCCC"> three blocks</font><font color="#E5E5E5"> a BNC</font>

287
00:14:19,590 --> 00:14:25,260
<font color="#E5E5E5">block a he's in stage</font><font color="#CCCCCC"> 0 and 2</font>

288
00:14:22,800 --> 00:14:27,930
instructions in stage C<font color="#E5E5E5"> so in</font><font color="#CCCCCC"> busy</font>

289
00:14:25,260 --> 00:14:31,530
<font color="#E5E5E5">blocks here are also in stage</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> right</font>

290
00:14:27,930 --> 00:14:34,589
<font color="#CCCCCC">and everything</font><font color="#E5E5E5"> else is in stage 1 so</font><font color="#CCCCCC"> die</font>

291
00:14:31,530 --> 00:14:37,500
neck and what we see in the generated

292
00:14:34,590 --> 00:14:40,250
code here is that when<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> one</font>

293
00:14:37,500 --> 00:14:43,950
block for for a because a is<font color="#E5E5E5"> the only</font>

294
00:14:40,250 --> 00:14:45,780
static block and we have only<font color="#E5E5E5"> two</font>

295
00:14:43,950 --> 00:14:49,350
instructions that are<font color="#CCCCCC"> copied from the</font>

296
00:14:45,780 --> 00:14:51,800
source from<font color="#CCCCCC"> the original</font><font color="#E5E5E5"> part and the</font>

297
00:14:49,350 --> 00:14:54,310
rest is replaced with coastal DMC API

298
00:14:51,800 --> 00:14:56,380
right to recreate the

299
00:14:54,310 --> 00:14:58,420
control flow<font color="#E5E5E5"> graph</font><font color="#CCCCCC"> so we have this</font>

300
00:14:56,380 --> 00:15:01,600
<font color="#CCCCCC">course open</font><font color="#E5E5E5"> basic block here that create</font>

301
00:14:58,420 --> 00:15:04,689
a<font color="#E5E5E5"> discos create blocks B and C and we</font>

302
00:15:01,600 --> 00:15:06,400
<font color="#CCCCCC">held we</font><font color="#E5E5E5"> have some instructions</font><font color="#CCCCCC"> like to</font>

303
00:15:04,690 --> 00:15:10,920
<font color="#CCCCCC">build binary operations here that</font>

304
00:15:06,400 --> 00:15:14,050
creates<font color="#E5E5E5"> the</font><font color="#CCCCCC"> add</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> block B</font>

305
00:15:10,920 --> 00:15:17,229
<font color="#E5E5E5">alright and in general all basic all</font>

306
00:15:14,050 --> 00:15:19,540
static basic blocks are are transformed

307
00:15:17,230 --> 00:15:24,040
into basic<font color="#CCCCCC"> blocks in</font><font color="#E5E5E5"> the specialized</font><font color="#CCCCCC"> ER</font>

308
00:15:19,540 --> 00:15:27,189
<font color="#E5E5E5">all instructions the static are of stage</font>

309
00:15:24,040 --> 00:15:30,069
<font color="#E5E5E5">less than the current stage</font><font color="#CCCCCC"> I replaced a</font>

310
00:15:27,190 --> 00:15:33,600
<font color="#CCCCCC">copy</font><font color="#E5E5E5"> as is essentially and everything</font>

311
00:15:30,070 --> 00:15:37,620
<font color="#E5E5E5">else is replaced with calls to LV NCAP I</font>

312
00:15:33,600 --> 00:15:38,830
try to recreate this in the next stage

313
00:15:37,620 --> 00:15:43,060
yeah

314
00:15:38,830 --> 00:15:45,880
so with calls so we we would like<font color="#CCCCCC"> to</font>

315
00:15:43,060 --> 00:15:47,829
support<font color="#E5E5E5"> not only one function but as a</font>

316
00:15:45,880 --> 00:15:50,200
set of<font color="#E5E5E5"> functions because the</font>

317
00:15:47,830 --> 00:15:56,770
interpreters are a region as a set<font color="#E5E5E5"> of</font>

318
00:15:50,200 --> 00:15:58,450
<font color="#CCCCCC">functions typically</font><font color="#E5E5E5"> no and what we want</font>

319
00:15:56,770 --> 00:16:00,189
is we want to<font color="#E5E5E5"> do stage all these</font>

320
00:15:58,450 --> 00:16:02,980
functions at once

321
00:16:00,190 --> 00:16:05,740
so first of all we gather the set of

322
00:16:02,980 --> 00:16:08,440
functions<font color="#CCCCCC"> that form the interpreter then</font>

323
00:16:05,740 --> 00:16:12,120
we apply this transformation once<font color="#E5E5E5"> so we</font>

324
00:16:08,440 --> 00:16:14,620
will<font color="#E5E5E5"> over all the functions at once and</font>

325
00:16:12,120 --> 00:16:17,500
while<font color="#E5E5E5"> doing that</font><font color="#CCCCCC"> we replace</font><font color="#E5E5E5"> the calls</font>

326
00:16:14,620 --> 00:16:19,800
with the with pairs of course<font color="#E5E5E5"> so the</font>

327
00:16:17,500 --> 00:16:24,040
first call will go to the function that

328
00:16:19,800 --> 00:16:27,010
it is<font color="#E5E5E5"> a specialized</font><font color="#CCCCCC"> ER for this stage so</font>

329
00:16:24,040 --> 00:16:29,680
here we have a call<font color="#CCCCCC"> to F dot mix here</font>

330
00:16:27,010 --> 00:16:33,580
but this<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> engineer if function</font>

331
00:16:29,680 --> 00:16:37,150
that that specializes in<font color="#E5E5E5"> this function</font>

332
00:16:33,580 --> 00:16:40,870
<font color="#CCCCCC">right</font><font color="#E5E5E5"> and it it returns a function for</font>

333
00:16:37,150 --> 00:16:44,589
the for the King<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the next stages</font>

334
00:16:40,870 --> 00:16:47,350
<font color="#E5E5E5">right so it only takes X here and</font><font color="#CCCCCC"> it</font>

335
00:16:44,589 --> 00:16:51,510
returns a function that<font color="#E5E5E5"> takes</font><font color="#CCCCCC"> Y and so</font>

336
00:16:47,350 --> 00:16:54,790
we<font color="#E5E5E5"> build calls in the next stage that</font>

337
00:16:51,510 --> 00:16:59,140
that call this our<font color="#CCCCCC"> returned</font><font color="#E5E5E5"> function on</font>

338
00:16:54,790 --> 00:17:01,360
the previous stage right<font color="#E5E5E5"> ah yeah</font><font color="#CCCCCC"> so we</font>

339
00:16:59,140 --> 00:17:02,709
have the pair of course this is the

340
00:17:01,360 --> 00:17:06,710
wrong call<font color="#E5E5E5"> and have a lot of inbuilt</font>

341
00:17:02,709 --> 00:17:08,839
call here to recreate this call later

342
00:17:06,710 --> 00:17:11,630
so what happens<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> control flow</font>

343
00:17:08,839 --> 00:17:13,909
graph<font color="#CCCCCC"> oh yeah</font>

344
00:17:11,630 --> 00:17:16,940
so we have some control flow graph at

345
00:17:13,910 --> 00:17:20,870
<font color="#E5E5E5">the beginning it is truncated but you</font>

346
00:17:16,940 --> 00:17:23,540
can see the idea<font color="#CCCCCC"> so we have we we have</font>

347
00:17:20,869 --> 00:17:26,449
some<font color="#E5E5E5"> basic block so green blocks are of</font>

348
00:17:23,540 --> 00:17:29,840
stage<font color="#E5E5E5"> 0 here red blocks of stage 1 and</font>

349
00:17:26,450 --> 00:17:32,570
and white of stage 2<font color="#E5E5E5"> and what happens</font>

350
00:17:29,840 --> 00:17:35,060
<font color="#CCCCCC">after one</font><font color="#E5E5E5"> is a transformation we</font>

351
00:17:32,570 --> 00:17:39,590
eliminate all white blocks we fold them

352
00:17:35,060 --> 00:17:46,060
into the<font color="#E5E5E5"> block a a</font><font color="#CCCCCC"> 1 here</font><font color="#E5E5E5"> or like</font><font color="#CCCCCC"> c1</font>

353
00:17:39,590 --> 00:17:48,919
<font color="#E5E5E5">here</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so on the next</font><font color="#CCCCCC"> stage</font><font color="#E5E5E5"> we</font>

354
00:17:46,060 --> 00:17:51,470
we<font color="#E5E5E5"> fold all of the red blocks that are</font>

355
00:17:48,920 --> 00:17:54,140
<font color="#E5E5E5">left in to block a 0 right</font><font color="#CCCCCC"> so block a 0</font>

356
00:17:51,470 --> 00:17:57,410
will create this<font color="#CCCCCC"> this blocks actually</font>

357
00:17:54,140 --> 00:17:59,720
what happens<font color="#E5E5E5"> is that it it won't</font>

358
00:17:57,410 --> 00:18:02,450
recreate this graph<font color="#CCCCCC"> exactly it will it</font>

359
00:17:59,720 --> 00:18:05,180
will unfold<font color="#E5E5E5"> it right it will create</font>

360
00:18:02,450 --> 00:18:08,470
control flow graph from the blue from

361
00:18:05,180 --> 00:18:11,630
<font color="#CCCCCC">the basic blocks of the corresponding</font>

362
00:18:08,470 --> 00:18:15,590
blocks here at<font color="#E5E5E5"> faulty blocks all right</font>

363
00:18:11,630 --> 00:18:18,440
so here we<font color="#E5E5E5"> have not</font><font color="#CCCCCC"> the loop but or the</font>

364
00:18:15,590 --> 00:18:22,750
unfolded loop with<font color="#CCCCCC"> 2 iterations</font><font color="#E5E5E5"> and on</font>

365
00:18:18,440 --> 00:18:27,710
the next in the next<font color="#E5E5E5"> stage we get a</font>

366
00:18:22,750 --> 00:18:30,410
similar kind<font color="#E5E5E5"> of graph right so now we</font>

367
00:18:27,710 --> 00:18:33,350
<font color="#CCCCCC">talked about by anytime</font><font color="#E5E5E5"> analysis so we</font>

368
00:18:30,410 --> 00:18:36,500
<font color="#E5E5E5">assumed and so the previous instruction</font>

369
00:18:33,350 --> 00:18:38,740
talked about how we separate one

370
00:18:36,500 --> 00:18:42,020
function into into a<font color="#E5E5E5"> chain of functions</font>

371
00:18:38,740 --> 00:18:44,750
<font color="#CCCCCC">right</font><font color="#E5E5E5"> now I'm going to</font><font color="#CCCCCC"> talk</font><font color="#E5E5E5"> was how</font><font color="#CCCCCC"> do</font>

372
00:18:42,020 --> 00:18:47,090
we<font color="#E5E5E5"> know which instructions go into which</font>

373
00:18:44,750 --> 00:18:50,290
stage<font color="#CCCCCC"> right</font><font color="#E5E5E5"> so how do we actually know</font>

374
00:18:47,090 --> 00:18:53,360
which instruction built where<font color="#CCCCCC"> or require</font>

375
00:18:50,290 --> 00:18:55,820
right and and so<font color="#CCCCCC"> four basic blocks right</font>

376
00:18:53,360 --> 00:19:01,010
<font color="#E5E5E5">so this analysis it provides just that</font>

377
00:18:55,820 --> 00:19:03,020
information<font color="#CCCCCC"> so it</font><font color="#E5E5E5"> designs</font><font color="#CCCCCC"> an unsigned x</font>

378
00:19:01,010 --> 00:19:05,960
stage number<font color="#CCCCCC"> two every instruction in</font>

379
00:19:03,020 --> 00:19:08,830
two basic blocks right in the the way it

380
00:19:05,960 --> 00:19:11,570
works<font color="#CCCCCC"> is that first of</font><font color="#E5E5E5"> all it assigns</font>

381
00:19:08,830 --> 00:19:14,149
stages<font color="#E5E5E5"> to parameters like if parameter</font>

382
00:19:11,570 --> 00:19:18,710
is declared with with<font color="#CCCCCC"> a stage attribute</font>

383
00:19:14,150 --> 00:19:20,000
<font color="#E5E5E5">like all parameters are right for</font><font color="#CCCCCC"> this</font>

384
00:19:18,710 --> 00:19:23,870
to<font color="#E5E5E5"> work</font>

385
00:19:20,000 --> 00:19:25,730
it assigns<font color="#E5E5E5"> that that number right or if</font>

386
00:19:23,870 --> 00:19:29,120
we have a an external code that we know

387
00:19:25,730 --> 00:19:31,639
not think nothing about we can assign<font color="#CCCCCC"> it</font>

388
00:19:29,120 --> 00:19:33,529
to the last<font color="#E5E5E5"> stage all right and then it</font>

389
00:19:31,639 --> 00:19:36,439
runs<font color="#E5E5E5"> this minimum fixed point algorithm</font>

390
00:19:33,529 --> 00:19:39,440
<font color="#E5E5E5">to propagate the stages to all of the</font>

391
00:19:36,440 --> 00:19:41,450
other values<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the function right and</font>

392
00:19:39,440 --> 00:19:47,710
it can reach a contradiction<font color="#E5E5E5"> so it can</font>

393
00:19:41,450 --> 00:19:50,690
it can<font color="#E5E5E5"> it can learn that the the</font>

394
00:19:47,710 --> 00:19:53,659
annotations are inconsistent<font color="#CCCCCC"> means</font><font color="#E5E5E5"> we'll</font>

395
00:19:50,690 --> 00:19:56,240
report<font color="#E5E5E5"> an error or it can find an</font>

396
00:19:53,659 --> 00:19:59,269
ambiguity in trying to<font color="#E5E5E5"> resolve this this</font>

397
00:19:56,240 --> 00:20:02,539
earth and it will report them yeah so

398
00:19:59,269 --> 00:20:04,429
<font color="#CCCCCC">here's the example</font><font color="#E5E5E5"> with optimal</font><font color="#CCCCCC"> ice</font><font color="#E5E5E5"> so</font>

399
00:20:02,539 --> 00:20:07,669
which instruction gets<font color="#E5E5E5"> stage the</font><font color="#CCCCCC"> Box</font>

400
00:20:04,429 --> 00:20:10,250
also able<font color="#CCCCCC"> to say yeah and yeah these are</font>

401
00:20:07,669 --> 00:20:13,070
<font color="#E5E5E5">the rules of the</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> is tries to</font>

402
00:20:10,250 --> 00:20:17,059
satisfy<font color="#CCCCCC"> I won't talk about</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of them</font>

403
00:20:13,070 --> 00:20:20,480
<font color="#E5E5E5">but for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> row</font><font color="#E5E5E5"> on the right the</font>

404
00:20:17,059 --> 00:20:23,928
<font color="#E5E5E5">rightmost</font><font color="#CCCCCC"> row</font><font color="#E5E5E5"> at the</font><font color="#CCCCCC"> top</font><font color="#E5E5E5"> says that the</font>

405
00:20:20,480 --> 00:20:26,210
stage of an instruction<font color="#E5E5E5"> I should be the</font>

406
00:20:23,929 --> 00:20:28,669
same or greater than<font color="#CCCCCC"> the stage of the</font>

407
00:20:26,210 --> 00:20:31,549
<font color="#CCCCCC">argument which</font><font color="#E5E5E5"> makes sense</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> the</font>

408
00:20:28,669 --> 00:20:36,620
instruction depends on the<font color="#CCCCCC"> Oh current</font>

409
00:20:31,549 --> 00:20:39,950
must must be<font color="#E5E5E5"> executed at</font><font color="#CCCCCC"> least then or</font>

410
00:20:36,620 --> 00:20:43,939
<font color="#CCCCCC">later right but I want</font><font color="#E5E5E5"> to stop anyone</font>

411
00:20:39,950 --> 00:20:48,860
<font color="#CCCCCC">draw a particular</font><font color="#E5E5E5"> right so this rule</font>

412
00:20:43,940 --> 00:20:52,100
<font color="#E5E5E5">states that if we if we start from stage</font>

413
00:20:48,860 --> 00:20:56,508
number<font color="#E5E5E5"> right and from any basic block</font>

414
00:20:52,100 --> 00:21:06,168
and we trace we trace the branches<font color="#E5E5E5"> from</font>

415
00:20:56,509 --> 00:21:09,440
this block<font color="#CCCCCC"> so we should have exactly one</font>

416
00:21:06,169 --> 00:21:12,080
<font color="#E5E5E5">a terminator</font><font color="#CCCCCC"> that we can reach through a</font>

417
00:21:09,440 --> 00:21:17,860
terminators of greater stages so of all

418
00:21:12,080 --> 00:21:17,860
<font color="#E5E5E5">a dynamic stages</font><font color="#CCCCCC"> its</font>

419
00:21:18,149 --> 00:21:25,090
you know so here on the Left we have an

420
00:21:21,549 --> 00:21:27,580
example we have<font color="#E5E5E5"> basic block a right and</font>

421
00:21:25,090 --> 00:21:30,820
we and there is only one<font color="#CCCCCC"> terminator that</font>

422
00:21:27,580 --> 00:21:34,389
is reachable from<font color="#E5E5E5"> block a on on</font>

423
00:21:30,820 --> 00:21:37,689
terminators<font color="#E5E5E5"> of stage</font><font color="#CCCCCC"> one right so if we</font>

424
00:21:34,389 --> 00:21:43,899
traverse the graph<font color="#E5E5E5"> as such an from block</font>

425
00:21:37,690 --> 00:21:46,720
a and are going on all our<font color="#E5E5E5"> edges with a</font>

426
00:21:43,899 --> 00:21:49,120
stage<font color="#E5E5E5"> one or greater then we reach</font>

427
00:21:46,720 --> 00:21:51,970
exactly<font color="#CCCCCC"> one tomater</font><font color="#E5E5E5"> it is it's in in</font>

428
00:21:49,120 --> 00:21:54,399
Block C and this Terminator<font color="#CCCCCC"> a goes right</font>

429
00:21:51,970 --> 00:21:57,730
<font color="#CCCCCC">here so it it is a terminator of this</font>

430
00:21:54,399 --> 00:21:59,949
specialized<font color="#CCCCCC"> er right</font><font color="#E5E5E5"> if we had to we</font>

431
00:21:57,730 --> 00:22:02,889
couldn't<font color="#E5E5E5"> build this specialized</font><font color="#CCCCCC"> it this</font>

432
00:21:59,950 --> 00:22:06,610
way yeah<font color="#E5E5E5"> and we can prove termination so</font>

433
00:22:02,889 --> 00:22:08,469
if if there is problem<font color="#E5E5E5"> to terminates</font>

434
00:22:06,610 --> 00:22:12,039
then<font color="#E5E5E5"> these specials they also tell</font><font color="#CCCCCC"> us</font>

435
00:22:08,470 --> 00:22:15,130
<font color="#CCCCCC">also eliminate and this is it's very</font>

436
00:22:12,039 --> 00:22:17,710
<font color="#E5E5E5">easy</font><font color="#CCCCCC"> to remove some of the</font><font color="#E5E5E5"> rules and to</font>

437
00:22:15,130 --> 00:22:20,559
get to the city<font color="#E5E5E5"> to the situation where</font>

438
00:22:17,710 --> 00:22:22,750
we have<font color="#E5E5E5"> a specialized</font><font color="#CCCCCC"> er</font><font color="#E5E5E5"> that that</font>

439
00:22:20,559 --> 00:22:25,090
doesn't<font color="#CCCCCC"> terminate but the sub program</font>

440
00:22:22,750 --> 00:22:29,320
<font color="#E5E5E5">need right and that would be a</font><font color="#CCCCCC"> problem</font>

441
00:22:25,090 --> 00:22:34,029
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> so the approach so far works great</font>

442
00:22:29,320 --> 00:22:37,570
until<font color="#E5E5E5"> it doesn't work and it and this is</font>

443
00:22:34,029 --> 00:22:39,700
because it<font color="#E5E5E5"> really it is very strict</font>

444
00:22:37,570 --> 00:22:43,269
about<font color="#CCCCCC"> mixin static and dynamic</font>

445
00:22:39,700 --> 00:22:45,789
computation<font color="#CCCCCC"> right so</font><font color="#E5E5E5"> I here we have an</font>

446
00:22:43,269 --> 00:22:48,429
example so we<font color="#E5E5E5"> have a function eval that</font>

447
00:22:45,789 --> 00:22:52,120
<font color="#E5E5E5">takes some pointer to a node right and</font>

448
00:22:48,429 --> 00:22:54,010
you can think<font color="#E5E5E5"> of it</font><font color="#CCCCCC"> as an ast node</font><font color="#E5E5E5"> so we</font>

449
00:22:52,120 --> 00:22:56,678
know everything<font color="#E5E5E5"> about this node at</font>

450
00:22:54,010 --> 00:23:00,070
compile time<font color="#E5E5E5"> but here we get an error</font>

451
00:22:56,679 --> 00:23:02,200
because<font color="#E5E5E5"> the loop in this function f it</font>

452
00:23:00,070 --> 00:23:06,840
goes through<font color="#CCCCCC"> all the nodes</font><font color="#E5E5E5"> until</font><font color="#CCCCCC"> the</font>

453
00:23:02,200 --> 00:23:10,809
node returns a a<font color="#CCCCCC"> non zero</font><font color="#E5E5E5"> value and</font>

454
00:23:06,840 --> 00:23:13,389
since this condition is dynamic<font color="#CCCCCC"> the</font>

455
00:23:10,809 --> 00:23:17,019
branch is<font color="#E5E5E5"> also dynamic and the key</font>

456
00:23:13,389 --> 00:23:19,809
functions in<font color="#E5E5E5"> this loop</font><font color="#CCCCCC"> header are are</font>

457
00:23:17,019 --> 00:23:22,149
also<font color="#E5E5E5"> then a dynamic alright this</font><font color="#CCCCCC"> fall's</font>

458
00:23:19,809 --> 00:23:25,480
<font color="#E5E5E5">from the from the rules of</font><font color="#CCCCCC"> binding times</font>

459
00:23:22,149 --> 00:23:27,189
right<font color="#E5E5E5"> and it</font><font color="#CCCCCC"> means that we have</font><font color="#E5E5E5"> a</font>

460
00:23:25,480 --> 00:23:31,480
contradiction<font color="#E5E5E5"> here because the parameter</font>

461
00:23:27,190 --> 00:23:33,670
<font color="#E5E5E5">to to eval is of station</font><font color="#CCCCCC"> zero</font>

462
00:23:31,480 --> 00:23:36,910
declared<font color="#E5E5E5"> but the argument is</font><font color="#CCCCCC"> of stage</font>

463
00:23:33,670 --> 00:23:40,360
<font color="#CCCCCC">one right so how do we</font><font color="#E5E5E5"> deal with that</font>

464
00:23:36,910 --> 00:23:44,050
well we added<font color="#E5E5E5"> we really built in so the</font>

465
00:23:40,360 --> 00:23:47,770
problem was that this call this call<font color="#CCCCCC"> our</font>

466
00:23:44,050 --> 00:23:48,879
it combined both<font color="#CCCCCC"> the static and dynamic</font>

467
00:23:47,770 --> 00:23:52,540
parts<font color="#E5E5E5"> right</font>

468
00:23:48,880 --> 00:23:53,950
so we<font color="#E5E5E5"> related both calls at once in</font><font color="#CCCCCC"> one</font>

469
00:23:52,540 --> 00:23:57,100
block and<font color="#CCCCCC"> controlled by the same</font>

470
00:23:53,950 --> 00:24:00,250
condition right but we can separate it

471
00:23:57,100 --> 00:24:03,370
into two parts<font color="#E5E5E5"> right so we</font><font color="#CCCCCC"> can have one</font>

472
00:24:00,250 --> 00:24:06,130
<font color="#CCCCCC">loop that is very static</font><font color="#E5E5E5"> right that goes</font>

473
00:24:03,370 --> 00:24:09,639
through<font color="#CCCCCC"> all the nodes</font><font color="#E5E5E5"> and stores</font><font color="#CCCCCC"> yeah</font>

474
00:24:06,130 --> 00:24:13,180
and it only performs the call to the

475
00:24:09,640 --> 00:24:16,150
specialized<font color="#E5E5E5"> ER and it returns the</font>

476
00:24:13,180 --> 00:24:19,900
function<font color="#E5E5E5"> pointer to the</font><font color="#CCCCCC"> next stage</font>

477
00:24:16,150 --> 00:24:24,190
okay so we can store this function

478
00:24:19,900 --> 00:24:26,980
pointers<font color="#E5E5E5"> in a very very thick array in C</font>

479
00:24:24,190 --> 00:24:29,140
and in the next<font color="#E5E5E5"> loop week we can call</font>

480
00:24:26,980 --> 00:24:32,230
these pointers<font color="#E5E5E5"> instead of the</font><font color="#CCCCCC"> eval</font>

481
00:24:29,140 --> 00:24:35,110
function<font color="#E5E5E5"> and this way on this line we</font>

482
00:24:32,230 --> 00:24:36,940
can<font color="#E5E5E5"> specialize eval to every node right</font>

483
00:24:35,110 --> 00:24:41,110
and here we<font color="#CCCCCC"> just call this function</font>

484
00:24:36,940 --> 00:24:44,350
pointers right so one caveat<font color="#E5E5E5"> this</font>

485
00:24:41,110 --> 00:24:47,260
doesn't work with the normal<font color="#CCCCCC"> cogent</font>

486
00:24:44,350 --> 00:24:49,689
because it requires the<font color="#CCCCCC"> G it</font><font color="#E5E5E5"> right so</font>

487
00:24:47,260 --> 00:24:51,370
this<font color="#E5E5E5"> means that previously we could</font>

488
00:24:49,690 --> 00:24:54,010
<font color="#E5E5E5">maintain the same code base for our</font>

489
00:24:51,370 --> 00:24:56,860
interpreter and for<font color="#CCCCCC"> this specialized er</font>

490
00:24:54,010 --> 00:25:01,020
<font color="#E5E5E5">but now we in some cases we have</font><font color="#CCCCCC"> to</font>

491
00:24:56,860 --> 00:25:05,340
<font color="#E5E5E5">diverge</font><font color="#CCCCCC"> we have to introduce another</font>

492
00:25:01,020 --> 00:25:08,639
like a<font color="#E5E5E5"> function or</font><font color="#CCCCCC"> two just</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> a</font>

493
00:25:05,340 --> 00:25:13,330
specialized<font color="#CCCCCC"> to deal with some issues</font>

494
00:25:08,640 --> 00:25:15,220
right<font color="#E5E5E5"> this is the</font><font color="#CCCCCC"> procedure code right</font>

495
00:25:13,330 --> 00:25:19,300
so the first<font color="#CCCCCC"> loop is completely</font><font color="#E5E5E5"> unrolled</font>

496
00:25:15,220 --> 00:25:25,630
and the second is normal so now in talk

497
00:25:19,300 --> 00:25:29,530
<font color="#CCCCCC">about some examples</font><font color="#E5E5E5"> so this is the</font><font color="#CCCCCC"> base</font>

498
00:25:25,630 --> 00:25:33,340
case sort of<font color="#E5E5E5"> so we have some</font><font color="#CCCCCC"> a some</font>

499
00:25:29,530 --> 00:25:34,500
expression tree of operations and we

500
00:25:33,340 --> 00:25:37,480
<font color="#E5E5E5">specialize it to some particular</font>

501
00:25:34,500 --> 00:25:39,660
expression right and on the Left<font color="#E5E5E5"> we have</font>

502
00:25:37,480 --> 00:25:42,730
a recursive function with the switch

503
00:25:39,660 --> 00:25:44,690
right and the right we have<font color="#E5E5E5"> a single</font>

504
00:25:42,730 --> 00:25:46,010
basic<font color="#E5E5E5"> block yeah so</font>

505
00:25:44,690 --> 00:25:50,990
and the similar<font color="#CCCCCC"> example with</font>

506
00:25:46,010 --> 00:25:53,680
<font color="#E5E5E5">convolutions so we have our for a nested</font>

507
00:25:50,990 --> 00:25:56,660
loops<font color="#E5E5E5"> and we can replace the two</font>

508
00:25:53,680 --> 00:26:01,280
innermost loops with one<font color="#E5E5E5"> basic block</font>

509
00:25:56,660 --> 00:26:03,080
that the just applies the teaser<font color="#CCCCCC"> is</font>

510
00:26:01,280 --> 00:26:04,879
specialized<font color="#CCCCCC"> to our Carol</font>

511
00:26:03,080 --> 00:26:08,600
<font color="#E5E5E5">okay so we don't have like nine</font>

512
00:26:04,880 --> 00:26:12,770
operations<font color="#E5E5E5"> okay</font>

513
00:26:08,600 --> 00:26:17,540
<font color="#E5E5E5">so information similar yeah so in these</font>

514
00:26:12,770 --> 00:26:23,389
cases we<font color="#E5E5E5"> have we have we have some</font>

515
00:26:17,540 --> 00:26:28,100
improvement<font color="#CCCCCC"> so here like in three or</font>

516
00:26:23,390 --> 00:26:32,810
four<font color="#CCCCCC"> times</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> even like bigger yeah now</font>

517
00:26:28,100 --> 00:26:35,330
I'm going to show<font color="#E5E5E5"> some of the yeah the</font>

518
00:26:32,810 --> 00:26:38,050
example with<font color="#E5E5E5"> the dynamic control</font><font color="#CCCCCC"> problem</font>

519
00:26:35,330 --> 00:26:41,240
so here we have a<font color="#E5E5E5"> a bytecode interpreter</font>

520
00:26:38,050 --> 00:26:44,930
<font color="#CCCCCC">and it has some instructions</font><font color="#E5E5E5"> or they</font>

521
00:26:41,240 --> 00:26:46,340
operate<font color="#CCCCCC"> in some</font><font color="#E5E5E5"> registry machine I</font>

522
00:26:44,930 --> 00:26:48,830
<font color="#E5E5E5">soaked up some registers we have some</font>

523
00:26:46,340 --> 00:26:51,310
operations<font color="#E5E5E5"> to load a value into a</font>

524
00:26:48,830 --> 00:26:55,550
<font color="#E5E5E5">register to to add them and so on and</font>

525
00:26:51,310 --> 00:26:57,950
<font color="#CCCCCC">always good</font><font color="#E5E5E5"> until we have this this jump</font>

526
00:26:55,550 --> 00:27:03,139
instruction<font color="#CCCCCC"> jump on a</font><font color="#E5E5E5"> condition right</font>

527
00:26:57,950 --> 00:27:06,200
<font color="#E5E5E5">and it exemplifies this dynamic control</font>

528
00:27:03,140 --> 00:27:13,210
because now<font color="#CCCCCC"> on now this vlog</font><font color="#E5E5E5"> a branch is</font>

529
00:27:06,200 --> 00:27:16,430
either<font color="#E5E5E5"> 2d to the end of the of the like</font>

530
00:27:13,210 --> 00:27:20,000
either<font color="#E5E5E5"> to the loop header or to this</font>

531
00:27:16,430 --> 00:27:22,910
block with this<font color="#E5E5E5"> operation right and this</font>

532
00:27:20,000 --> 00:27:25,540
jumps back to to the<font color="#CCCCCC"> here so from</font><font color="#E5E5E5"> this</font>

533
00:27:22,910 --> 00:27:27,860
operation<font color="#E5E5E5"> we kind of have to</font><font color="#CCCCCC"> I do static</font>

534
00:27:25,540 --> 00:27:30,290
<font color="#CCCCCC">dominators they jump to</font><font color="#E5E5E5"> the loop header</font>

535
00:27:27,860 --> 00:27:33,520
and we<font color="#CCCCCC"> can't have two because we</font><font color="#E5E5E5"> we have</font>

536
00:27:30,290 --> 00:27:38,030
to pick<font color="#E5E5E5"> one to to move it to the</font>

537
00:27:33,520 --> 00:27:41,270
specialized right so what happens is

538
00:27:38,030 --> 00:27:46,310
<font color="#CCCCCC">that nothing here gets in the control</font>

539
00:27:41,270 --> 00:27:48,639
flow optimized right but and we get yeah

540
00:27:46,310 --> 00:27:53,450
and we get on<font color="#CCCCCC"> there modest improvement</font>

541
00:27:48,640 --> 00:27:55,190
<font color="#CCCCCC">alright but let's go back so how can we</font>

542
00:27:53,450 --> 00:27:57,620
deal with<font color="#E5E5E5"> that let's apply our our</font>

543
00:27:55,190 --> 00:27:58,460
<font color="#E5E5E5">built-in it's the first we split into</font>

544
00:27:57,620 --> 00:28:00,229
two function

545
00:27:58,460 --> 00:28:03,020
my first<font color="#CCCCCC"> function just returns</font><font color="#E5E5E5"> the</font>

546
00:28:00,230 --> 00:28:06,679
offset to the<font color="#E5E5E5"> next instruction right</font>

547
00:28:03,020 --> 00:28:12,408
and we have our dynamically control loop

548
00:28:06,679 --> 00:28:16,400
here okay<font color="#E5E5E5"> so</font><font color="#CCCCCC"> let's let's apply our trick</font>

549
00:28:12,409 --> 00:28:18,980
with the built-in right so we we have

550
00:28:16,400 --> 00:28:26,539
now<font color="#E5E5E5"> the array of function pointers</font><font color="#CCCCCC"> and</font>

551
00:28:18,980 --> 00:28:29,900
we call this built-in right<font color="#CCCCCC"> and now now</font>

552
00:28:26,539 --> 00:28:33,559
on this line we this loop is<font color="#E5E5E5"> completed</font>

553
00:28:29,900 --> 00:28:35,870
and<font color="#E5E5E5"> wrote and we store we</font><font color="#CCCCCC"> specialize</font>

554
00:28:33,559 --> 00:28:39,230
this evil instruction with with<font color="#E5E5E5"> respect</font>

555
00:28:35,870 --> 00:28:42,158
to every instruction in in our sequence

556
00:28:39,230 --> 00:28:44,840
of instructions<font color="#CCCCCC"> right</font><font color="#E5E5E5"> and then we call</font>

557
00:28:42,159 --> 00:28:49,010
then we call our function pointers in

558
00:28:44,840 --> 00:28:51,918
the<font color="#E5E5E5"> loop right so this this</font><font color="#CCCCCC"> is an</font>

559
00:28:49,010 --> 00:28:54,559
improvement over the interpreter<font color="#E5E5E5"> right</font>

560
00:28:51,919 --> 00:28:56,659
but it's it's<font color="#CCCCCC"> nothing of an improvement</font>

561
00:28:54,559 --> 00:29:00,620
<font color="#E5E5E5">over the original interpret rate it is</font>

562
00:28:56,659 --> 00:29:04,309
it is slower<font color="#E5E5E5"> right so let's go back</font>

563
00:29:00,620 --> 00:29:07,250
again<font color="#CCCCCC"> right so here is</font><font color="#E5E5E5"> our test program</font>

564
00:29:04,309 --> 00:29:10,010
<font color="#CCCCCC">fibonacci program that takes yeah so and</font>

565
00:29:07,250 --> 00:29:11,830
the<font color="#E5E5E5"> first for this four instructions are</font>

566
00:29:10,010 --> 00:29:14,210
as shown on the right<font color="#E5E5E5"> so this is</font>

567
00:29:11,830 --> 00:29:16,360
<font color="#E5E5E5">specialized code to each of these four</font>

568
00:29:14,210 --> 00:29:19,159
instructions<font color="#E5E5E5"> and we may we may know that</font>

569
00:29:16,360 --> 00:29:21,020
<font color="#E5E5E5">each of these instructions are aside</font>

570
00:29:19,159 --> 00:29:22,940
from the last one<font color="#E5E5E5"> it jumps to</font><font color="#CCCCCC"> the next</font>

571
00:29:21,020 --> 00:29:25,789
<font color="#E5E5E5">right and this is very inefficient</font>

572
00:29:22,940 --> 00:29:28,820
because because each<font color="#CCCCCC"> of these</font>

573
00:29:25,789 --> 00:29:32,030
instructions<font color="#CCCCCC"> or functions are very</font><font color="#E5E5E5"> like</font>

574
00:29:28,820 --> 00:29:33,620
small right but we hope<font color="#E5E5E5"> but</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> lots</font>

575
00:29:32,030 --> 00:29:36,980
<font color="#CCCCCC">of function call a function calls</font>

576
00:29:33,620 --> 00:29:40,428
between<font color="#E5E5E5"> them the target that are</font>

577
00:29:36,980 --> 00:29:43,669
<font color="#E5E5E5">indirect right so let's go</font><font color="#CCCCCC"> back we can</font>

578
00:29:40,429 --> 00:29:46,280
change our function in<font color="#E5E5E5"> C we are staying</font>

579
00:29:43,669 --> 00:29:48,650
in the interpreter land<font color="#E5E5E5"> right so</font>

580
00:29:46,280 --> 00:29:54,020
everything here<font color="#E5E5E5"> I can be I can be run as</font>

581
00:29:48,650 --> 00:29:57,440
an interpreter aside<font color="#CCCCCC"> from the dervish so</font>

582
00:29:54,020 --> 00:30:00,500
if we<font color="#CCCCCC"> specialize that we get this</font><font color="#E5E5E5"> basic</font>

583
00:29:57,440 --> 00:30:02,150
block which I can call<font color="#E5E5E5"> the basic</font><font color="#CCCCCC"> block</font>

584
00:30:00,500 --> 00:30:05,230
because because it<font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually a</font>

585
00:30:02,150 --> 00:30:07,290
<font color="#CCCCCC">translation of the basic block of our</font>

586
00:30:05,230 --> 00:30:11,470
<font color="#CCCCCC">bytecode program</font>

587
00:30:07,290 --> 00:30:16,990
yeah<font color="#E5E5E5"> and and we got an improvement over</font>

588
00:30:11,470 --> 00:30:20,350
<font color="#CCCCCC">the original</font><font color="#E5E5E5"> right so we got 36 10</font>

589
00:30:16,990 --> 00:30:21,400
<font color="#E5E5E5">seconds in our optimized version and 87</font>

590
00:30:20,350 --> 00:30:24,610
from before

591
00:30:21,400 --> 00:30:26,770
<font color="#E5E5E5">all right</font><font color="#CCCCCC"> ah</font><font color="#E5E5E5"> this is a very example but</font>

592
00:30:24,610 --> 00:30:29,439
it shows like some of the features<font color="#E5E5E5"> and</font>

593
00:30:26,770 --> 00:30:31,330
<font color="#E5E5E5">some of the features</font><font color="#CCCCCC"> of our</font><font color="#E5E5E5"> interpreters</font>

594
00:30:29,440 --> 00:30:33,820
that<font color="#CCCCCC"> we have to deal with and what we</font>

595
00:30:31,330 --> 00:30:39,970
<font color="#E5E5E5">can how I can be deal with</font><font color="#CCCCCC"> them in this</font>

596
00:30:33,820 --> 00:30:41,950
<font color="#CCCCCC">in this way okay so these are</font><font color="#E5E5E5"> all a toy</font>

597
00:30:39,970 --> 00:30:45,340
examples I want<font color="#E5E5E5"> to apply this to</font><font color="#CCCCCC"> some</font>

598
00:30:41,950 --> 00:30:50,170
kind of real program right<font color="#E5E5E5"> some of some</font>

599
00:30:45,340 --> 00:30:52,389
<font color="#E5E5E5">size right and there's also one one</font>

600
00:30:50,170 --> 00:30:54,220
thing that with annotations because we

601
00:30:52,390 --> 00:30:56,920
have turned<font color="#CCCCCC"> eight</font><font color="#E5E5E5"> every function</font><font color="#CCCCCC"> that we</font>

602
00:30:54,220 --> 00:30:58,120
let our interpreter calls and that we

603
00:30:56,920 --> 00:31:00,900
want<font color="#E5E5E5"> to specialize</font>

604
00:30:58,120 --> 00:31:03,909
all right instead what if we have some

605
00:31:00,900 --> 00:31:06,160
some inference interprocedural<font color="#E5E5E5"> that we</font>

606
00:31:03,910 --> 00:31:10,840
can apply to propagate the<font color="#CCCCCC"> citations</font>

607
00:31:06,160 --> 00:31:14,230
across functions<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and yeah</font><font color="#E5E5E5"> we have</font>

608
00:31:10,840 --> 00:31:15,790
<font color="#CCCCCC">only one front-end for</font><font color="#E5E5E5"> C like it's very</font>

609
00:31:14,230 --> 00:31:17,700
easy<font color="#E5E5E5"> to write because</font><font color="#CCCCCC"> he doesn't have to</font>

610
00:31:15,790 --> 00:31:20,950
do anything<font color="#CCCCCC"> just have to</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> guess to</font>

611
00:31:17,700 --> 00:31:25,320
translate<font color="#E5E5E5"> these attributes down to</font><font color="#CCCCCC"> IR</font>

612
00:31:20,950 --> 00:31:27,880
but<font color="#E5E5E5"> I only have one</font><font color="#CCCCCC"> 4/10</font><font color="#E5E5E5"> to show and</font>

613
00:31:25,320 --> 00:31:33,809
yeah that must be it

614
00:31:27,880 --> 00:31:33,809
yeah<font color="#CCCCCC"> okay we have any questions</font>

615
00:31:34,420 --> 00:31:49,590
[Applause]

616
00:31:41,540 --> 00:31:51,270
<font color="#E5E5E5">okay in Kansai see yes there is an</font>

617
00:31:49,590 --> 00:32:00,659
acoustic in<font color="#CCCCCC"> quart-sized I didn't measure</font>

618
00:31:51,270 --> 00:32:03,300
it<font color="#E5E5E5"> but yeah there is an increase so the</font>

619
00:32:00,660 --> 00:32:08,460
question is is there<font color="#E5E5E5"> something limiting</font>

620
00:32:03,300 --> 00:32:11,159
the increase in concise<font color="#E5E5E5"> No currently</font>

621
00:32:08,460 --> 00:32:15,690
there<font color="#CCCCCC"> is nothing like</font><font color="#E5E5E5"> that so the co</font>

622
00:32:11,160 --> 00:32:20,730
size can explode<font color="#E5E5E5"> can explode</font><font color="#CCCCCC"> can explode</font>

623
00:32:15,690 --> 00:32:34,470
or significantly yeah this is problem

624
00:32:20,730 --> 00:32:37,470
<font color="#E5E5E5">potentially yeah any other question</font><font color="#CCCCCC"> so</font>

625
00:32:34,470 --> 00:32:40,110
theoretically I could<font color="#E5E5E5"> use</font><font color="#CCCCCC"> Olivia</font><font color="#E5E5E5"> mix to</font>

626
00:32:37,470 --> 00:32:46,920
<font color="#E5E5E5">specialize the interpreter and wind up</font>

627
00:32:40,110 --> 00:32:49,229
with<font color="#CCCCCC"> like much more specialized so the</font>

628
00:32:46,920 --> 00:32:52,050
question is whether this can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> applied</font>

629
00:32:49,230 --> 00:32:56,790
<font color="#E5E5E5">to to a brain fog interpreter that is</font>

630
00:32:52,050 --> 00:32:59,370
<font color="#E5E5E5">written in this way</font><font color="#CCCCCC"> yes I think so yes</font>

631
00:32:56,790 --> 00:33:05,670
like are we happy<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do help there is</font>

632
00:32:59,370 --> 00:33:08,610
<font color="#E5E5E5">anything any problem right</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> should know</font>

633
00:33:05,670 --> 00:33:10,470
<font color="#CCCCCC">that this</font><font color="#E5E5E5"> is so like a prototype so it</font>

634
00:33:08,610 --> 00:33:12,540
doesn't work<font color="#E5E5E5"> quick or no transition</font>

635
00:33:10,470 --> 00:33:14,670
levels and so<font color="#E5E5E5"> on so he hasn't it</font><font color="#CCCCCC"> didn't</font>

636
00:33:12,540 --> 00:33:16,770
<font color="#CCCCCC">kind</font><font color="#E5E5E5"> of like a debug info and stuff but</font>

637
00:33:14,670 --> 00:33:19,520
<font color="#E5E5E5">yeah this is</font><font color="#CCCCCC"> just act of a</font>

638
00:33:16,770 --> 00:33:24,500
proof-of-concept<font color="#CCCCCC"> officer of</font><font color="#E5E5E5"> such a tool</font>

639
00:33:19,520 --> 00:33:24,500
okay any<font color="#E5E5E5"> other question okay</font>

640
00:33:25,340 --> 00:33:31,820
look at real-world examples<font color="#E5E5E5"> yeah you</font>

641
00:33:28,039 --> 00:33:33,679
<font color="#E5E5E5">think is a</font><font color="#CCCCCC"> real-world</font><font color="#E5E5E5"> example that</font>

642
00:33:31,820 --> 00:33:36,799
requires the least<font color="#CCCCCC"> amount of work to go</font>

643
00:33:33,679 --> 00:33:39,230
for where you are<font color="#CCCCCC"> now</font><font color="#E5E5E5"> to improve</font><font color="#CCCCCC"> a</font>

644
00:33:36,799 --> 00:33:41,418
<font color="#CCCCCC">real-world example</font><font color="#E5E5E5"> and what do you think</font>

645
00:33:39,230 --> 00:33:43,730
the<font color="#CCCCCC"> harvest</font>

646
00:33:41,419 --> 00:33:45,559
<font color="#E5E5E5">okay the question is what are the</font>

647
00:33:43,730 --> 00:33:48,409
potential real-world examples<font color="#CCCCCC"> that they</font>

648
00:33:45,559 --> 00:33:50,299
can they can start from and<font color="#E5E5E5"> well</font>

649
00:33:48,409 --> 00:33:53,480
previously<font color="#CCCCCC"> I have been working for a</font>

650
00:33:50,299 --> 00:33:56,629
query<font color="#CCCCCC"> a compilation in databases right</font>

651
00:33:53,480 --> 00:33:59,629
<font color="#E5E5E5">so this is this is kind of inspired</font><font color="#CCCCCC"> by</font>

652
00:33:56,629 --> 00:34:01,789
it<font color="#E5E5E5"> by their domain so I think I will</font>

653
00:33:59,629 --> 00:34:04,399
<font color="#E5E5E5">start from some kind of small</font><font color="#CCCCCC"> a database</font>

654
00:34:01,789 --> 00:34:08,679
engine or some query engine and tried to

655
00:34:04,399 --> 00:34:08,679
<font color="#E5E5E5">specialize that because they have this</font>

656
00:34:43,119 --> 00:34:49,520
<font color="#CCCCCC">so there is an there is a jingle power</font>

657
00:34:46,460 --> 00:34:51,918
<font color="#E5E5E5">in in latest post</font><font color="#CCCCCC"> girls</font><font color="#E5E5E5"> version yeah for</font>

658
00:34:49,520 --> 00:34:54,829
<font color="#E5E5E5">for expressions and for queries</font><font color="#CCCCCC"> even</font>

659
00:34:51,918 --> 00:34:57,828
like some parts<font color="#E5E5E5"> and of course this only</font>

660
00:34:54,829 --> 00:35:00,829
<font color="#E5E5E5">works with compilers I'm sorry with in</font>

661
00:34:57,829 --> 00:35:03,619
interpreters<font color="#E5E5E5"> so we can we can take the</font>

662
00:35:00,829 --> 00:35:06,440
<font color="#CCCCCC">the earlier</font><font color="#E5E5E5"> interpreted that there was</font>

663
00:35:03,619 --> 00:35:08,470
in Postgres<font color="#CCCCCC"> author</font><font color="#E5E5E5"> maybe still is right</font>

664
00:35:06,440 --> 00:35:11,390
and we can work with<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and actually</font>

665
00:35:08,470 --> 00:35:14,209
like one of the the earlier various

666
00:35:11,390 --> 00:35:17,540
versions of this tool was specifically

667
00:35:14,210 --> 00:35:21,380
built<font color="#E5E5E5"> for the Postgres yeah</font><font color="#CCCCCC"> but it was</font>

668
00:35:17,540 --> 00:35:23,810
built differently it wasn't like it was

669
00:35:21,380 --> 00:35:26,619
a<font color="#E5E5E5"> different</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right any other question</font>

670
00:35:23,810 --> 00:35:26,619
right

671
00:35:34,369 --> 00:35:40,200
it will terminate<font color="#E5E5E5"> so the question is</font>

672
00:35:37,440 --> 00:35:42,869
what<font color="#CCCCCC"> are the</font><font color="#E5E5E5"> some prerequisites</font><font color="#CCCCCC"> or</font>

673
00:35:40,200 --> 00:35:45,480
conditions on the program that<font color="#E5E5E5"> that I</font>

674
00:35:42,869 --> 00:35:48,450
needed<font color="#CCCCCC"> forth</font><font color="#E5E5E5"> for termination and the</font>

675
00:35:45,480 --> 00:35:52,099
<font color="#CCCCCC">answer is</font><font color="#E5E5E5"> if it passes the binding time</font>

676
00:35:48,450 --> 00:35:55,230
analysis without like errors right<font color="#E5E5E5"> so</font>

677
00:35:52,099 --> 00:35:57,510
then it will terminate<font color="#CCCCCC"> and because the</font>

678
00:35:55,230 --> 00:36:02,869
analysis it enforces<font color="#CCCCCC"> a set of rules</font>

679
00:35:57,510 --> 00:36:05,790
right and the the termination is is

680
00:36:02,869 --> 00:36:09,180
<font color="#CCCCCC">conditioned on</font><font color="#E5E5E5"> these rules right so as</font>

681
00:36:05,790 --> 00:36:12,029
long<font color="#CCCCCC"> as this rules</font><font color="#E5E5E5"> hold true then the</font>

682
00:36:09,180 --> 00:36:14,160
special is a will terminate<font color="#E5E5E5"> right</font><font color="#CCCCCC"> but it</font>

683
00:36:12,030 --> 00:36:17,520
is very<font color="#E5E5E5"> possible to</font><font color="#CCCCCC"> a try</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> under</font>

684
00:36:14,160 --> 00:36:21,230
<font color="#CCCCCC">agency in such a way that the they are</font>

685
00:36:17,520 --> 00:36:23,250
<font color="#E5E5E5">inconsistent</font><font color="#CCCCCC"> all right so we can pass a</font>

686
00:36:21,230 --> 00:36:25,440
dynamic argument to a function that<font color="#E5E5E5"> I</font>

687
00:36:23,250 --> 00:36:29,369
said that the takes an<font color="#CCCCCC"> argument in the</font>

688
00:36:25,440 --> 00:36:31,109
<font color="#E5E5E5">in an earlier stage right so it is</font>

689
00:36:29,369 --> 00:36:33,260
<font color="#CCCCCC">possible to write</font><font color="#E5E5E5"> this code but it it</font>

690
00:36:31,109 --> 00:36:37,859
<font color="#E5E5E5">won't pass the checks in the analysis</font>

691
00:36:33,260 --> 00:36:42,780
right<font color="#E5E5E5"> and as soon as</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> passes like it</font>

692
00:36:37,859 --> 00:36:45,049
will terminate after that<font color="#E5E5E5"> okay any other</font>

693
00:36:42,780 --> 00:36:45,050
question

694
00:36:49,580 --> 00:36:52,240
<font color="#E5E5E5">okay</font>

695
00:36:58,960 --> 00:37:05,470
yeah that is<font color="#CCCCCC"> a tall so the question is</font>

696
00:37:01,530 --> 00:37:07,210
if this relates<font color="#E5E5E5"> to previous attempts for</font>

697
00:37:05,470 --> 00:37:10,450
partial evolutional<font color="#E5E5E5"> and all the emilich</font>

698
00:37:07,210 --> 00:37:12,250
<font color="#E5E5E5">LLP</font><font color="#CCCCCC"> yes there is a there is</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> P</font>

699
00:37:10,450 --> 00:37:16,089
which<font color="#E5E5E5"> is built a little bit</font><font color="#CCCCCC"> differently</font>

700
00:37:12,250 --> 00:37:20,339
<font color="#CCCCCC">like very very differently</font><font color="#E5E5E5"> it works</font>

701
00:37:16,089 --> 00:37:23,740
without<font color="#CCCCCC"> the analysis part so we cannot</font>

702
00:37:20,339 --> 00:37:27,009
the difference is<font color="#CCCCCC"> that it can describe</font>

703
00:37:23,740 --> 00:37:29,618
it is<font color="#CCCCCC"> that the LLP</font><font color="#E5E5E5"> it works in in single</font>

704
00:37:27,010 --> 00:37:33,510
<font color="#E5E5E5">stage it is an online partial</font><font color="#CCCCCC"> evaluator</font>

705
00:37:29,619 --> 00:37:36,849
<font color="#E5E5E5">right so we don't have the intermediate</font>

706
00:37:33,510 --> 00:37:40,240
<font color="#E5E5E5">annotated representation to to explore</font>

707
00:37:36,849 --> 00:37:43,329
aware like<font color="#E5E5E5"> old parts will</font><font color="#CCCCCC"> be executed in</font>

708
00:37:40,240 --> 00:37:48,250
which stage right<font color="#E5E5E5"> and the second part is</font>

709
00:37:43,329 --> 00:37:51,220
that assume like LLP<font color="#E5E5E5"> it doesn't</font><font color="#CCCCCC"> catch</font>

710
00:37:48,250 --> 00:37:53,950
memory and patience<font color="#E5E5E5"> and it is hard</font><font color="#CCCCCC"> for</font>

711
00:37:51,220 --> 00:37:55,868
them<font color="#E5E5E5"> to to add them because it kind of</font>

712
00:37:53,950 --> 00:37:59,230
requires this compiler<font color="#E5E5E5"> integration right</font>

713
00:37:55,869 --> 00:38:02,410
<font color="#E5E5E5">and what this</font><font color="#CCCCCC"> project has is</font><font color="#E5E5E5"> you can</font>

714
00:37:59,230 --> 00:38:05,260
<font color="#E5E5E5">annotate some some some types or some</font>

715
00:38:02,410 --> 00:38:08,170
fields in some structs<font color="#E5E5E5"> or some variables</font>

716
00:38:05,260 --> 00:38:10,990
in<font color="#CCCCCC"> such a way that we can we can</font>

717
00:38:08,170 --> 00:38:14,740
partially<font color="#E5E5E5"> evaluate</font><font color="#CCCCCC"> loads and stores</font><font color="#E5E5E5"> to</font>

718
00:38:10,990 --> 00:38:16,930
these<font color="#E5E5E5"> variables right and and in general</font>

719
00:38:14,740 --> 00:38:17,259
<font color="#E5E5E5">LLP is more focused for input and the</font>

720
00:38:16,930 --> 00:38:20,500
output

721
00:38:17,260 --> 00:38:23,349
a partial relations<font color="#CCCCCC"> also some files or</font>

722
00:38:20,500 --> 00:38:27,280
<font color="#E5E5E5">some like input that the program can</font>

723
00:38:23,349 --> 00:38:30,369
take and be specialized to<font color="#E5E5E5"> and this is</font>

724
00:38:27,280 --> 00:38:32,410
kind of more it has a little<font color="#CCCCCC"> focus</font><font color="#E5E5E5"> it is</font>

725
00:38:30,369 --> 00:38:36,430
<font color="#CCCCCC">I focus more</font><font color="#E5E5E5"> on interpreters that are</font>

726
00:38:32,410 --> 00:38:51,220
<font color="#E5E5E5">not as</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> standalone programs but the</font>

727
00:38:36,430 --> 00:38:54,490
parts of some other program yeah well so

728
00:38:51,220 --> 00:38:56,919
the<font color="#CCCCCC"> question is what what</font><font color="#E5E5E5"> are special</font>

729
00:38:54,490 --> 00:38:59,680
speciation benefits of<font color="#CCCCCC"> having multiple</font>

730
00:38:56,920 --> 00:39:04,079
<font color="#E5E5E5">stages right and it all depends on</font>

731
00:38:59,680 --> 00:39:08,700
application right so if we if<font color="#CCCCCC"> we take</font>

732
00:39:04,079 --> 00:39:08,700
this for example

733
00:39:08,859 --> 00:39:15,999
for example with query<font color="#CCCCCC"> a compiler</font><font color="#E5E5E5"> right</font>

734
00:39:13,519 --> 00:39:19,428
if we<font color="#E5E5E5"> take if we</font><font color="#CCCCCC"> take multiple</font>

735
00:39:15,999 --> 00:39:23,629
parameters for for one query for one

736
00:39:19,429 --> 00:39:26,419
<font color="#E5E5E5">query then it is it is profitable to</font>

737
00:39:23,629 --> 00:39:29,239
<font color="#E5E5E5">specialize it multiple times</font><font color="#CCCCCC"> right in</font>

738
00:39:26,419 --> 00:39:32,598
<font color="#CCCCCC">each way</font><font color="#E5E5E5"> each time</font><font color="#CCCCCC"> we do it we either</font>

739
00:39:29,239 --> 00:39:36,169
<font color="#CCCCCC">pay this additional overhead if we don't</font>

740
00:39:32,599 --> 00:39:40,969
have the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> previous like stage right</font>

741
00:39:36,169 --> 00:39:46,098
<font color="#E5E5E5">in between so can maybe jump to the</font>

742
00:39:40,969 --> 00:39:50,179
<font color="#E5E5E5">slide</font><font color="#CCCCCC"> alright so it only makes</font><font color="#E5E5E5"> sense to</font>

743
00:39:46,099 --> 00:39:52,729
<font color="#E5E5E5">it for example stage p1 here if the code</font>

744
00:39:50,179 --> 00:39:54,889
that is returned from this stage will be

745
00:39:52,729 --> 00:39:57,408
executed more<font color="#E5E5E5"> than once if it is</font>

746
00:39:54,889 --> 00:39:59,389
<font color="#E5E5E5">repeated a thousand times then it is</font>

747
00:39:57,409 --> 00:40:02,869
obviously more profitable to<font color="#CCCCCC"> at</font><font color="#E5E5E5"> this</font>

748
00:39:59,389 --> 00:40:04,939
<font color="#CCCCCC">stage here</font><font color="#E5E5E5"> and likewise</font><font color="#CCCCCC"> for stage p0</font><font color="#E5E5E5"> it</font>

749
00:40:02,869 --> 00:40:07,849
is only a profitable to at this<font color="#E5E5E5"> stage if</font>

750
00:40:04,939 --> 00:40:11,749
if this stage will be executed<font color="#E5E5E5"> like many</font>

751
00:40:07,849 --> 00:40:14,269
times<font color="#CCCCCC"> alright so with the query</font>

752
00:40:11,749 --> 00:40:17,779
processing we<font color="#CCCCCC"> can have like one query</font>

753
00:40:14,269 --> 00:40:21,098
that is<font color="#E5E5E5"> a parameterised multiple times</font>

754
00:40:17,779 --> 00:40:24,019
in some station or like like some

755
00:40:21,099 --> 00:40:27,769
execution session and then each query

756
00:40:24,019 --> 00:40:31,249
will then take multiple parameters from

757
00:40:27,769 --> 00:40:33,888
<font color="#E5E5E5">the from the database if so it has this</font>

758
00:40:31,249 --> 00:40:36,408
<font color="#E5E5E5">kind of structure right it it all</font>

759
00:40:33,889 --> 00:40:38,029
depends<font color="#E5E5E5"> on application in some</font>

760
00:40:36,409 --> 00:40:40,939
applications<font color="#E5E5E5"> it doesn't make sense to</font>

761
00:40:38,029 --> 00:40:43,489
split<font color="#E5E5E5"> this the stages because like they</font>

762
00:40:40,939 --> 00:40:45,589
are not split in<font color="#E5E5E5"> their life likely you</font>

763
00:40:43,489 --> 00:40:49,389
have one block<font color="#E5E5E5"> of arguments that you</font>

764
00:40:45,589 --> 00:40:49,389
pass at one point in<font color="#CCCCCC"> time</font>

765
00:40:55,110 --> 00:41:02,820
[Applause]

