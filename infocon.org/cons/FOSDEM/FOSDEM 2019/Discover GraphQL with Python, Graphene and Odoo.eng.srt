1
00:00:11,420 --> 00:00:14,500
[Music]

2
00:00:19,250 --> 00:00:25,829
good morning<font color="#E5E5E5"> so nice little</font><font color="#CCCCCC"> crow</font><font color="#E5E5E5"> thanks</font>

3
00:00:24,210 --> 00:00:28,739
for being here

4
00:00:25,829 --> 00:00:31,230
<font color="#E5E5E5">I like to start this talk with a short</font>

5
00:00:28,739 --> 00:00:34,620
story<font color="#CCCCCC"> of Who I am</font><font color="#E5E5E5"> here to the in front</font>

6
00:00:31,230 --> 00:00:36,570
of you<font color="#E5E5E5"> of on a Sunday morning</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> this</font>

7
00:00:34,620 --> 00:00:38,959
story started a few months<font color="#E5E5E5"> ago when I</font>

8
00:00:36,570 --> 00:00:42,870
met a customer wanted to replace their

9
00:00:38,960 --> 00:00:44,899
Salesforce system by<font color="#CCCCCC"> odo and although</font>

10
00:00:42,870 --> 00:00:49,530
<font color="#E5E5E5">for those who don't know is a</font>

11
00:00:44,899 --> 00:00:53,719
<font color="#CCCCCC">open-source Python</font><font color="#E5E5E5"> ERP and the</font>

12
00:00:49,530 --> 00:00:53,719
particularity of that project<font color="#CCCCCC"> was that</font>

13
00:00:54,440 --> 00:00:57,629
sorry

14
00:00:56,039 --> 00:01:02,039
the particularity of that project<font color="#CCCCCC"> is</font>

15
00:00:57,629 --> 00:01:04,559
that<font color="#CCCCCC"> Salesforce</font><font color="#E5E5E5"> that customer is kind of</font>

16
00:01:02,039 --> 00:01:06,900
the middle<font color="#E5E5E5"> piece of</font><font color="#CCCCCC"> a puzzle and it's</font>

17
00:01:04,559 --> 00:01:09,570
<font color="#E5E5E5">surrounded</font><font color="#CCCCCC"> by a variety of Windows built</font>

18
00:01:06,900 --> 00:01:11,700
application all querying and updated the

19
00:01:09,570 --> 00:01:13,559
central system and since we were

20
00:01:11,700 --> 00:01:16,950
<font color="#E5E5E5">replacing the middle piece we had to</font>

21
00:01:13,560 --> 00:01:21,270
provide<font color="#CCCCCC"> api to</font><font color="#E5E5E5"> those existing systems</font>

22
00:01:16,950 --> 00:01:23,700
<font color="#E5E5E5">and at that time we had kind of two</font>

23
00:01:21,270 --> 00:01:26,429
possibilities<font color="#CCCCCC"> - to provide those api the</font>

24
00:01:23,700 --> 00:01:30,510
first one would have<font color="#E5E5E5"> been to say</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> just</font>

25
00:01:26,430 --> 00:01:33,780
use the<font color="#E5E5E5"> standard</font><font color="#CCCCCC"> or do</font><font color="#E5E5E5"> xml RPC api and</font>

26
00:01:30,510 --> 00:01:36,180
that one is is useful it's very<font color="#CCCCCC"> powerful</font>

27
00:01:33,780 --> 00:01:38,670
because<font color="#E5E5E5"> it exposes all the audio object</font>

28
00:01:36,180 --> 00:01:42,540
<font color="#E5E5E5">model</font><font color="#CCCCCC"> and field but</font><font color="#E5E5E5"> it's actually too</font>

29
00:01:38,670 --> 00:01:44,190
powerful because well first<font color="#E5E5E5"> is the whole</font>

30
00:01:42,540 --> 00:01:48,560
thing<font color="#E5E5E5"> you need</font><font color="#CCCCCC"> to know all the details</font>

31
00:01:44,190 --> 00:01:51,660
of order to use it efficiently<font color="#E5E5E5"> and then</font>

32
00:01:48,560 --> 00:01:54,300
it really exposes the guts of the system

33
00:01:51,660 --> 00:01:56,310
so<font color="#E5E5E5"> anytime you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> grading</font><font color="#CCCCCC"> or do we are</font>

34
00:01:54,300 --> 00:01:59,310
adding classes removing fields and so on

35
00:01:56,310 --> 00:02:02,160
so<font color="#CCCCCC"> you risk breaking or your client</font><font color="#E5E5E5"> so</font>

36
00:01:59,310 --> 00:02:05,250
that<font color="#CCCCCC"> was not a good solution</font><font color="#E5E5E5"> and the</font>

37
00:02:02,160 --> 00:02:08,940
<font color="#CCCCCC">other possibility was to create a custom</font>

38
00:02:05,250 --> 00:02:10,709
REST<font color="#E5E5E5"> API</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> would have been clean and</font>

39
00:02:08,940 --> 00:02:13,409
<font color="#E5E5E5">nice we could document it with swagger</font>

40
00:02:10,709 --> 00:02:16,830
and so on<font color="#E5E5E5"> but</font><font color="#CCCCCC"> still I had the</font><font color="#E5E5E5"> feeling</font>

41
00:02:13,409 --> 00:02:19,409
that<font color="#E5E5E5"> it was too difficult to do in the</font>

42
00:02:16,830 --> 00:02:21,720
short<font color="#CCCCCC"> timeframe of of</font><font color="#E5E5E5"> the project so I</font>

43
00:02:19,409 --> 00:02:24,929
was looking<font color="#E5E5E5"> so for something</font><font color="#CCCCCC"> more more</font>

44
00:02:21,720 --> 00:02:26,880
efficient and at that time<font color="#CCCCCC"> Kenneth</font>

45
00:02:24,930 --> 00:02:29,970
writes the guides<font color="#CCCCCC"> who</font>

46
00:02:26,880 --> 00:02:32,460
<font color="#CCCCCC">wrote request for was creating a small</font>

47
00:02:29,970 --> 00:02:34,650
framework<font color="#CCCCCC"> tickled responder</font><font color="#E5E5E5"> and that</font>

48
00:02:32,460 --> 00:02:36,600
framework is just a little thing it's a

49
00:02:34,650 --> 00:02:39,090
mash-up<font color="#E5E5E5"> of existing Python libraries</font>

50
00:02:36,600 --> 00:02:42,840
like starlet and and stuff like that but

51
00:02:39,090 --> 00:02:45,300
he was<font color="#CCCCCC"> including a way to create a graph</font>

52
00:02:42,840 --> 00:02:48,870
QL endpoint in a few<font color="#E5E5E5"> lines of codes and</font>

53
00:02:45,300 --> 00:02:51,810
that triggered me<font color="#CCCCCC"> to have a second look</font>

54
00:02:48,870 --> 00:02:54,480
at graph QL<font color="#CCCCCC"> and I quickly found out</font><font color="#E5E5E5"> it</font>

55
00:02:51,810 --> 00:02:56,580
could be<font color="#CCCCCC"> a solution for</font><font color="#E5E5E5"> problem and so</font>

56
00:02:54,480 --> 00:02:59,549
<font color="#E5E5E5">we started we decided to use it for</font><font color="#CCCCCC"> that</font>

57
00:02:56,580 --> 00:03:02,520
project<font color="#E5E5E5"> and it quickly was a success</font>

58
00:02:59,550 --> 00:03:05,430
because my colleague was writing the

59
00:03:02,520 --> 00:03:08,970
endpoint was actually quite<font color="#CCCCCC"> happy</font><font color="#E5E5E5"> and</font>

60
00:03:05,430 --> 00:03:11,430
very productive at it and<font color="#E5E5E5"> our client</font>

61
00:03:08,970 --> 00:03:13,290
developer were also very<font color="#CCCCCC"> happy they were</font>

62
00:03:11,430 --> 00:03:15,030
all saying oh well that's<font color="#CCCCCC"> technologies</font>

63
00:03:13,290 --> 00:03:18,989
<font color="#E5E5E5">very easy to use and they were using</font>

64
00:03:15,030 --> 00:03:21,420
php.net<font color="#CCCCCC"> as client</font><font color="#E5E5E5"> programming languages</font>

65
00:03:18,990 --> 00:03:25,710
<font color="#E5E5E5">and they were all very happy with it</font><font color="#CCCCCC"> and</font>

66
00:03:21,420 --> 00:03:27,989
so well since it was such a game-changer

67
00:03:25,710 --> 00:03:33,420
for<font color="#E5E5E5"> us</font><font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to share that story so</font>

68
00:03:27,990 --> 00:03:36,270
<font color="#CCCCCC">here am I</font><font color="#E5E5E5"> so let's go</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> Stefan I'm the</font>

69
00:03:33,420 --> 00:03:38,280
city of action we<font color="#E5E5E5"> are software</font>

70
00:03:36,270 --> 00:03:42,060
engineering company<font color="#E5E5E5"> in Belgium focusing</font>

71
00:03:38,280 --> 00:03:44,910
on<font color="#E5E5E5"> quality open source project and I</font>

72
00:03:42,060 --> 00:03:46,800
spend<font color="#E5E5E5"> quite a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> free time caring</font>

73
00:03:44,910 --> 00:03:52,650
about the<font color="#CCCCCC"> audio community association</font>

74
00:03:46,800 --> 00:03:55,020
which is a non-profit<font color="#CCCCCC"> trying to</font><font color="#E5E5E5"> foster</font><font color="#CCCCCC"> a</font>

75
00:03:52,650 --> 00:03:59,360
vibrant<font color="#E5E5E5"> open-source community around ode</font>

76
00:03:55,020 --> 00:04:02,130
<font color="#E5E5E5">we manage kind of 200 github repos</font><font color="#CCCCCC"> with</font>

77
00:03:59,360 --> 00:04:08,540
thousands<font color="#E5E5E5"> of</font><font color="#CCCCCC"> I quality</font><font color="#E5E5E5"> of do</font><font color="#CCCCCC"> add-ons and</font>

78
00:04:02,130 --> 00:04:13,410
I'm doing Python since<font color="#E5E5E5"> version 1.4 so</font>

79
00:04:08,540 --> 00:04:17,488
today I'd like to well it's mostly a

80
00:04:13,410 --> 00:04:22,140
tutorial<font color="#CCCCCC"> I'll quickly explain what graph</font>

81
00:04:17,488 --> 00:04:24,900
QL is<font color="#E5E5E5"> and go</font><font color="#CCCCCC"> into a demo</font><font color="#E5E5E5"> first from the</font>

82
00:04:22,140 --> 00:04:26,940
<font color="#E5E5E5">client</font><font color="#CCCCCC"> side perspective to explain or to</font>

83
00:04:24,900 --> 00:04:28,530
give you a feeling<font color="#E5E5E5"> of what graph QL is</font>

84
00:04:26,940 --> 00:04:31,650
from the point of view<font color="#E5E5E5"> of the client</font>

85
00:04:28,530 --> 00:04:35,130
developer<font color="#E5E5E5"> and then give you an example</font>

86
00:04:31,650 --> 00:04:38,799
of<font color="#E5E5E5"> how you can easily create a graph</font><font color="#CCCCCC"> to</font>

87
00:04:35,130 --> 00:04:42,460
<font color="#CCCCCC">an endpoint in</font><font color="#E5E5E5"> Python and I use</font><font color="#CCCCCC"> o to</font>

88
00:04:38,800 --> 00:04:44,289
as an example<font color="#E5E5E5"> back-end system then I'll</font>

89
00:04:42,460 --> 00:04:46,508
discuss a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> our graph QL is</font>

90
00:04:44,289 --> 00:04:50,229
different from other<font color="#CCCCCC"> similar</font>

91
00:04:46,509 --> 00:04:52,750
technologies and give you some attention

92
00:04:50,229 --> 00:04:58,479
<font color="#CCCCCC">points</font><font color="#E5E5E5"> maybe you'll want to keep in</font><font color="#CCCCCC"> mind</font>

93
00:04:52,750 --> 00:05:02,500
<font color="#E5E5E5">one when creating your own end points</font><font color="#CCCCCC"> so</font>

94
00:04:58,479 --> 00:05:04,780
what<font color="#E5E5E5"> is graph QL</font><font color="#CCCCCC"> well I like to think of</font>

95
00:05:02,500 --> 00:05:08,199
it as yet another remote procedure

96
00:05:04,780 --> 00:05:10,388
called mechanism<font color="#E5E5E5"> in a way it's just that</font>

97
00:05:08,199 --> 00:05:12,639
<font color="#E5E5E5">it's a way to request a remote computer</font>

98
00:05:10,389 --> 00:05:14,550
to do something<font color="#CCCCCC"> for you</font><font color="#E5E5E5"> and return a</font>

99
00:05:12,639 --> 00:05:18,280
<font color="#E5E5E5">response</font>

100
00:05:14,550 --> 00:05:21,460
it comes from Facebook<font color="#E5E5E5"> and they open</font>

101
00:05:18,280 --> 00:05:25,989
sourced<font color="#E5E5E5"> it in 2015</font><font color="#CCCCCC"> and obviously those</font>

102
00:05:21,460 --> 00:05:29,620
guys know what a graph is<font color="#E5E5E5"> but really for</font>

103
00:05:25,990 --> 00:05:31,810
most usual use cases<font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> need to</font>

104
00:05:29,620 --> 00:05:34,110
worry<font color="#CCCCCC"> too much about</font><font color="#E5E5E5"> the graph aspect</font>

105
00:05:31,810 --> 00:05:38,050
and you'll see why in<font color="#CCCCCC"> a moment</font>

106
00:05:34,110 --> 00:05:40,509
so the basic characteristics<font color="#E5E5E5"> the</font>

107
00:05:38,050 --> 00:05:42,550
requests and<font color="#E5E5E5"> the queries you express</font>

108
00:05:40,509 --> 00:05:45,520
them<font color="#E5E5E5"> in using</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> graph</font><font color="#CCCCCC"> your query</font>

109
00:05:42,550 --> 00:05:49,870
language<font color="#E5E5E5"> it's kind of JSON but it's not</font>

110
00:05:45,520 --> 00:05:52,150
<font color="#E5E5E5">so it's a specific format the responses</font>

111
00:05:49,870 --> 00:05:55,090
are pure JSON so that's important for

112
00:05:52,150 --> 00:05:57,909
ease<font color="#CCCCCC"> of integration</font><font color="#E5E5E5"> so nothing special</font>

113
00:05:55,090 --> 00:06:01,179
<font color="#E5E5E5">there there is a schema language to</font>

114
00:05:57,909 --> 00:06:03,969
<font color="#CCCCCC">express to define</font><font color="#E5E5E5"> various types and</font>

115
00:06:01,180 --> 00:06:05,469
variable queries you don't need to worry

116
00:06:03,969 --> 00:06:07,779
<font color="#CCCCCC">too much about</font><font color="#E5E5E5"> the schema</font><font color="#CCCCCC"> language</font>

117
00:06:05,469 --> 00:06:09,610
because you usually<font color="#E5E5E5"> don't see it because</font>

118
00:06:07,779 --> 00:06:12,669
you generate it<font color="#CCCCCC"> from your programming</font>

119
00:06:09,610 --> 00:06:15,219
language<font color="#E5E5E5"> and then the</font><font color="#CCCCCC"> transports usually</font>

120
00:06:12,669 --> 00:06:17,770
HTTP you do get and<font color="#E5E5E5"> post to to send and</font>

121
00:06:15,219 --> 00:06:21,159
receive the data<font color="#E5E5E5"> and there is a variety</font>

122
00:06:17,770 --> 00:06:24,159
<font color="#CCCCCC">of</font><font color="#E5E5E5"> server-side libraries</font><font color="#CCCCCC"> in most</font>

123
00:06:21,159 --> 00:06:26,229
languages and on the<font color="#E5E5E5"> client side in my</font>

124
00:06:24,159 --> 00:06:28,060
opinion is so easy that<font color="#E5E5E5"> you you don't</font>

125
00:06:26,229 --> 00:06:30,279
need<font color="#E5E5E5"> to bother with any kind of library</font>

126
00:06:28,060 --> 00:06:36,270
to to use<font color="#E5E5E5"> it that's an important point</font>

127
00:06:30,279 --> 00:06:41,259
<font color="#CCCCCC">so for the sake of the demonstration</font>

128
00:06:36,270 --> 00:06:44,919
we'll use<font color="#CCCCCC"> a simple simple schema</font><font color="#E5E5E5"> will</font>

129
00:06:41,259 --> 00:06:47,770
expose<font color="#E5E5E5"> Oh</font><font color="#CCCCCC"> to partners which are</font>

130
00:06:44,919 --> 00:06:51,370
basically<font color="#E5E5E5"> companies and contacts with</font>

131
00:06:47,770 --> 00:06:52,599
<font color="#CCCCCC">their name address</font><font color="#E5E5E5"> email phone a flag</font>

132
00:06:51,370 --> 00:06:55,450
saying<font color="#E5E5E5"> if it's a come</font>

133
00:06:52,600 --> 00:06:58,030
bunny or a<font color="#E5E5E5"> simple contacts in the</font>

134
00:06:55,450 --> 00:07:00,460
address<font color="#E5E5E5"> block</font><font color="#CCCCCC"> you have a</font><font color="#E5E5E5"> country filled</font>

135
00:06:58,030 --> 00:07:05,609
with which point<font color="#E5E5E5"> we</font><font color="#CCCCCC"> to country a type</font>

136
00:07:00,460 --> 00:07:08,349
which<font color="#CCCCCC"> has a code and name and then the</font>

137
00:07:05,610 --> 00:07:11,370
companies<font color="#E5E5E5"> of context and contacts</font><font color="#CCCCCC"> of a</font>

138
00:07:08,350 --> 00:07:14,710
partner company<font color="#E5E5E5"> so</font><font color="#CCCCCC"> two simple data model</font>

139
00:07:11,370 --> 00:07:21,940
<font color="#E5E5E5">but yeah in an interesting one for for a</font>

140
00:07:14,710 --> 00:07:23,950
demo so the demo I start from the client

141
00:07:21,940 --> 00:07:26,080
<font color="#CCCCCC">site and the good</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> which graph QL</font>

142
00:07:23,950 --> 00:07:27,760
is that you get for free<font color="#CCCCCC"> as soon</font><font color="#E5E5E5"> as you</font>

143
00:07:26,080 --> 00:07:32,050
have<font color="#E5E5E5"> a graphical</font><font color="#CCCCCC"> endpoint you get for</font>

144
00:07:27,760 --> 00:07:37,000
<font color="#E5E5E5">free</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> web-based ID that you can use to</font>

145
00:07:32,050 --> 00:07:38,830
to create your your<font color="#E5E5E5"> requests so on the</font>

146
00:07:37,000 --> 00:07:41,370
on<font color="#E5E5E5"> the left you have the query editor</font>

147
00:07:38,830 --> 00:07:43,840
<font color="#E5E5E5">and on the right the result pane and</font>

148
00:07:41,370 --> 00:07:47,260
very important you<font color="#E5E5E5"> have a documentation</font>

149
00:07:43,840 --> 00:07:49,750
<font color="#E5E5E5">Explorer so you can interactively</font>

150
00:07:47,260 --> 00:07:51,880
explore the schema<font color="#E5E5E5"> and that</font>

151
00:07:49,750 --> 00:07:57,490
documentation is automatically<font color="#CCCCCC"> generated</font>

152
00:07:51,880 --> 00:08:00,100
by introspecting the the schema provided

153
00:07:57,490 --> 00:08:02,410
by the endpoint<font color="#E5E5E5"> so you see here on the</font>

154
00:08:00,100 --> 00:08:04,540
right you have<font color="#E5E5E5"> queries and mutations</font>

155
00:08:02,410 --> 00:08:06,370
mutations are for anything that has side

156
00:08:04,540 --> 00:08:08,740
effects and queries is just for<font color="#CCCCCC"> fetching</font>

157
00:08:06,370 --> 00:08:11,230
data<font color="#E5E5E5"> if</font><font color="#CCCCCC"> I click on query</font>

158
00:08:08,740 --> 00:08:13,300
<font color="#CCCCCC">I see the available queries and I focus</font>

159
00:08:11,230 --> 00:08:16,360
on on just<font color="#CCCCCC"> one of them which is called</font>

160
00:08:13,300 --> 00:08:19,780
<font color="#E5E5E5">all partners can use it to fetch all</font>

161
00:08:16,360 --> 00:08:22,720
partners from the database<font color="#E5E5E5"> if I click on</font>

162
00:08:19,780 --> 00:08:25,359
<font color="#CCCCCC">it I see that all</font><font color="#E5E5E5"> partners</font><font color="#CCCCCC"> are three</font>

163
00:08:22,720 --> 00:08:28,180
arguments the first<font color="#E5E5E5"> one is a boolean</font>

164
00:08:25,360 --> 00:08:30,760
<font color="#E5E5E5">saying I just want companies or all</font><font color="#CCCCCC"> of</font>

165
00:08:28,180 --> 00:08:33,570
them and then limit<font color="#CCCCCC"> an offset in my</font>

166
00:08:30,760 --> 00:08:37,270
examples are<font color="#E5E5E5"> for doing paging at</font>

167
00:08:33,570 --> 00:08:41,110
database query<font color="#CCCCCC"> level and then the return</font>

168
00:08:37,270 --> 00:08:43,360
<font color="#E5E5E5">type is a list of partners</font><font color="#CCCCCC"> and if I</font>

169
00:08:41,110 --> 00:08:46,750
click on partners I get the field<font color="#CCCCCC"> we've</font>

170
00:08:43,360 --> 00:08:49,720
seen before<font color="#E5E5E5"> so simple list of field in</font>

171
00:08:46,750 --> 00:08:54,190
this<font color="#E5E5E5"> case some</font><font color="#CCCCCC"> of our mandatory</font><font color="#E5E5E5"> you see</font>

172
00:08:49,720 --> 00:08:57,700
them with the<font color="#E5E5E5"> exclamation point</font><font color="#CCCCCC"> and then</font>

173
00:08:54,190 --> 00:09:00,460
you<font color="#E5E5E5"> have country which is of</font><font color="#CCCCCC"> type</font>

174
00:08:57,700 --> 00:09:02,410
country and contacts<font color="#E5E5E5"> which is in itself</font>

175
00:09:00,460 --> 00:09:05,760
a list of partners<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we have a</font>

176
00:09:02,410 --> 00:09:05,760
recursive data structure

177
00:09:05,820 --> 00:09:13,510
now if I start<font color="#CCCCCC"> typing a query on</font><font color="#E5E5E5"> the</font>

178
00:09:10,540 --> 00:09:15,579
left<font color="#CCCCCC"> you see we have code completion</font>

179
00:09:13,510 --> 00:09:18,160
<font color="#CCCCCC">so if type control</font><font color="#E5E5E5"> space you see the</font>

180
00:09:15,580 --> 00:09:21,100
available keywords<font color="#E5E5E5"> so I can type all</font>

181
00:09:18,160 --> 00:09:23,350
partners or<font color="#E5E5E5"> partners again I see the</font>

182
00:09:21,100 --> 00:09:27,670
list<font color="#E5E5E5"> of it available field</font><font color="#CCCCCC"> I can select</font>

183
00:09:23,350 --> 00:09:32,200
those I want and that's<font color="#E5E5E5"> our zoom a</font>

184
00:09:27,670 --> 00:09:34,390
little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> so that's a very very</font>

185
00:09:32,200 --> 00:09:36,850
important<font color="#E5E5E5"> point</font><font color="#CCCCCC"> above-ground</font><font color="#E5E5E5"> about graph</font>

186
00:09:34,390 --> 00:09:40,330
QL is<font color="#E5E5E5"> that it's a client who decide</font>

187
00:09:36,850 --> 00:09:44,440
which field they<font color="#E5E5E5"> want to receive</font><font color="#CCCCCC"> whereas</font>

188
00:09:40,330 --> 00:09:46,780
is you you are<font color="#E5E5E5"> doing rest</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> are you</font>

189
00:09:44,440 --> 00:09:49,860
<font color="#E5E5E5">cannot decide it's a server that that's</font>

190
00:09:46,780 --> 00:09:52,569
<font color="#CCCCCC">always</font><font color="#E5E5E5"> giving you the same list of</font><font color="#CCCCCC"> data</font>

191
00:09:49,860 --> 00:09:56,350
in this<font color="#E5E5E5"> case</font><font color="#CCCCCC"> I just I don't</font><font color="#E5E5E5"> want all the</font>

192
00:09:52,570 --> 00:09:59,200
field<font color="#CCCCCC"> I want</font><font color="#E5E5E5"> three of them and in the</font>

193
00:09:56,350 --> 00:10:02,470
result<font color="#CCCCCC"> it's just</font><font color="#E5E5E5"> a JSON list of</font>

194
00:09:59,200 --> 00:10:05,020
dictionaries<font color="#CCCCCC"> and you see that the is</font>

195
00:10:02,470 --> 00:10:07,150
also<font color="#CCCCCC"> the second very important point you</font>

196
00:10:05,020 --> 00:10:09,760
see<font color="#E5E5E5"> that the response is mirroring the</font>

197
00:10:07,150 --> 00:10:10,510
query so in the query<font color="#E5E5E5"> I say I want all</font>

198
00:10:09,760 --> 00:10:12,460
<font color="#E5E5E5">partners</font>

199
00:10:10,510 --> 00:10:14,590
I get all partner in the response I want

200
00:10:12,460 --> 00:10:17,290
name I get name I want email<font color="#CCCCCC"> I get</font><font color="#E5E5E5"> email</font>

201
00:10:14,590 --> 00:10:19,750
and so on<font color="#E5E5E5"> so your response is always</font>

202
00:10:17,290 --> 00:10:24,760
mirror<font color="#CCCCCC"> what you put in your</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> your</font>

203
00:10:19,750 --> 00:10:28,480
query and and that's very important then

204
00:10:24,760 --> 00:10:30,550
I can<font color="#E5E5E5"> use arguments in my</font><font color="#CCCCCC"> query so for</font>

205
00:10:28,480 --> 00:10:32,650
instance here I've our partners

206
00:10:30,550 --> 00:10:36,219
<font color="#E5E5E5">companies</font><font color="#CCCCCC"> in contact that I want to say</font>

207
00:10:32,650 --> 00:10:39,579
I want only companies that's<font color="#E5E5E5"> the syntax</font>

208
00:10:36,220 --> 00:10:44,050
<font color="#CCCCCC">to do that companies only</font><font color="#E5E5E5"> is true I get</font>

209
00:10:39,580 --> 00:10:46,480
a limited<font color="#E5E5E5"> list and then also very</font>

210
00:10:44,050 --> 00:10:49,390
<font color="#E5E5E5">important aspect of</font><font color="#CCCCCC"> graphic where you</font>

211
00:10:46,480 --> 00:10:52,660
can navigate in the data model from your

212
00:10:49,390 --> 00:10:54,790
query<font color="#E5E5E5"> so in your query</font><font color="#CCCCCC"> know I want</font><font color="#E5E5E5"> to</font>

213
00:10:52,660 --> 00:10:57,520
get<font color="#E5E5E5"> the contacts</font><font color="#CCCCCC"> - I'd have contacts</font>

214
00:10:54,790 --> 00:10:59,800
name phone and again you see<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font>

215
00:10:57,520 --> 00:11:01,990
response is mirroring<font color="#E5E5E5"> your query so I</font>

216
00:10:59,800 --> 00:11:05,949
added contacts I get contacts I did name

217
00:11:01,990 --> 00:11:08,530
I get name phone phone etc<font color="#E5E5E5"> and so that's</font>

218
00:11:05,950 --> 00:11:11,110
the<font color="#CCCCCC"> other very very important aspect of</font>

219
00:11:08,530 --> 00:11:13,990
graph here is that the client can

220
00:11:11,110 --> 00:11:17,140
navigate<font color="#E5E5E5"> into</font><font color="#CCCCCC"> the data model whereas</font>

221
00:11:13,990 --> 00:11:18,730
with traditional<font color="#E5E5E5"> restor RPC it's more</font>

222
00:11:17,140 --> 00:11:24,550
fixed so the server

223
00:11:18,730 --> 00:11:26,769
have provided service that's providing

224
00:11:24,550 --> 00:11:29,889
companies and another service to get

225
00:11:26,769 --> 00:11:32,079
context with as an argument the company

226
00:11:29,889 --> 00:11:34,199
ID for instance<font color="#E5E5E5"> but then that's more</font>

227
00:11:32,079 --> 00:11:36,489
server<font color="#CCCCCC"> round-trips</font>

228
00:11:34,199 --> 00:11:38,620
conversely the server could have decided

229
00:11:36,490 --> 00:11:40,449
<font color="#CCCCCC">to provide just one</font><font color="#E5E5E5"> service providing</font>

230
00:11:38,620 --> 00:11:43,000
companies and contact at the same time

231
00:11:40,449 --> 00:11:44,769
but then all the<font color="#E5E5E5"> time to send all the</font>

232
00:11:43,000 --> 00:11:45,160
<font color="#CCCCCC">data and maybe your clients don't need</font>

233
00:11:44,769 --> 00:11:47,230
it

234
00:11:45,160 --> 00:11:48,969
so that's very<font color="#E5E5E5"> important graph</font><font color="#CCCCCC"> query</font><font color="#E5E5E5"> is</font>

235
00:11:47,230 --> 00:11:51,370
that the client has<font color="#CCCCCC"> the</font><font color="#E5E5E5"> flexibility to</font>

236
00:11:48,970 --> 00:11:56,079
express what data he wants to<font color="#E5E5E5"> retrieve</font>

237
00:11:51,370 --> 00:12:00,010
from the server<font color="#E5E5E5"> okay and the last point</font>

238
00:11:56,079 --> 00:12:05,260
I want to<font color="#E5E5E5"> illustrate is the concept of</font>

239
00:12:00,010 --> 00:12:07,360
query variables query variables are kind

240
00:12:05,260 --> 00:12:10,149
of<font color="#CCCCCC"> place orders you can put in in your</font>

241
00:12:07,360 --> 00:12:12,190
<font color="#E5E5E5">query they can go anywhere</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the query</font>

242
00:12:10,149 --> 00:12:14,529
so you can have a very complex query but

243
00:12:12,190 --> 00:12:17,560
you can put place order<font color="#E5E5E5"> a bit everywhere</font>

244
00:12:14,529 --> 00:12:20,410
and then it's the client which sends to

245
00:12:17,560 --> 00:12:24,130
the server<font color="#E5E5E5"> do a query plus a simple JSON</font>

246
00:12:20,410 --> 00:12:26,079
dictionary<font color="#E5E5E5"> with the replacement variable</font>

247
00:12:24,130 --> 00:12:28,620
and the replacement is<font color="#CCCCCC"> done on the</font>

248
00:12:26,079 --> 00:12:32,469
server<font color="#E5E5E5"> side so that there is no risk of</font>

249
00:12:28,620 --> 00:12:34,540
of<font color="#E5E5E5"> query injections and and stuff like</font>

250
00:12:32,470 --> 00:12:36,310
that but<font color="#E5E5E5"> it's also</font><font color="#CCCCCC"> very important</font>

251
00:12:34,540 --> 00:12:38,380
because in<font color="#E5E5E5"> terms of data binding on the</font>

252
00:12:36,310 --> 00:12:40,149
client if you<font color="#CCCCCC"> imagine you're writing a</font>

253
00:12:38,380 --> 00:12:45,579
web<font color="#CCCCCC"> application you need to bind the</font>

254
00:12:40,149 --> 00:12:47,769
<font color="#CCCCCC">form fields to to the query</font><font color="#E5E5E5"> field</font><font color="#CCCCCC"> using</font>

255
00:12:45,579 --> 00:12:50,079
this mechanism<font color="#CCCCCC"> this binding</font><font color="#E5E5E5"> is just</font>

256
00:12:47,769 --> 00:12:51,699
populating a JSON dictionary<font color="#E5E5E5"> so for</font>

257
00:12:50,079 --> 00:12:54,189
clients and<font color="#E5E5E5"> developer it's also very</font>

258
00:12:51,699 --> 00:12:57,430
<font color="#E5E5E5">very easy because they can write the</font>

259
00:12:54,190 --> 00:13:01,029
query in the IDE<font color="#CCCCCC"> copy paste it in the</font>

260
00:12:57,430 --> 00:13:02,829
code in a constant and then bind<font color="#E5E5E5"> their</font>

261
00:13:01,029 --> 00:13:04,750
field where their form<font color="#E5E5E5"> variables to a</font>

262
00:13:02,829 --> 00:13:07,569
simple JSON diccionari and send them

263
00:13:04,750 --> 00:13:13,000
both to<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the server very easy for for</font>

264
00:13:07,569 --> 00:13:15,878
the the<font color="#E5E5E5"> client developers</font><font color="#CCCCCC"> okay</font>

265
00:13:13,000 --> 00:13:18,550
and you get code completion<font color="#E5E5E5"> also when</font>

266
00:13:15,879 --> 00:13:20,829
when creating<font color="#CCCCCC"> variables and so here it's</font>

267
00:13:18,550 --> 00:13:25,089
an<font color="#E5E5E5"> example</font><font color="#CCCCCC"> to simple very</font><font color="#E5E5E5"> very slim it</font>

268
00:13:20,829 --> 00:13:30,550
enough<font color="#CCCCCC"> said for doing Beijing inside a</font>

269
00:13:25,089 --> 00:13:32,649
large<font color="#E5E5E5"> result set okay so that's it for</font>

270
00:13:30,550 --> 00:13:35,500
the client<font color="#E5E5E5"> demo now we'll</font><font color="#CCCCCC"> dig a little</font>

271
00:13:32,649 --> 00:13:40,120
<font color="#E5E5E5">bit</font><font color="#CCCCCC"> on the server side</font><font color="#E5E5E5"> and I'll</font>

272
00:13:35,500 --> 00:13:42,459
illustrate what it<font color="#E5E5E5"> takes to create the</font>

273
00:13:40,120 --> 00:13:45,459
endpoint<font color="#E5E5E5"> I just used in the client side</font>

274
00:13:42,459 --> 00:13:47,739
<font color="#CCCCCC">Timo</font><font color="#E5E5E5"> and the code</font><font color="#CCCCCC"> is going to</font><font color="#E5E5E5"> show is</font>

275
00:13:45,459 --> 00:13:49,180
really<font color="#E5E5E5"> all there is to</font><font color="#CCCCCC"> it I give you the</font>

276
00:13:47,740 --> 00:13:51,250
pointer after that you<font color="#E5E5E5"> will</font><font color="#CCCCCC"> see that</font>

277
00:13:49,180 --> 00:13:53,489
there is<font color="#E5E5E5"> really</font><font color="#CCCCCC"> nothing else that I'm</font>

278
00:13:51,250 --> 00:13:55,720
going<font color="#E5E5E5"> to show to to create that</font><font color="#CCCCCC"> endpoint</font>

279
00:13:53,490 --> 00:14:00,279
so the first thing<font color="#E5E5E5"> to do is create the</font>

280
00:13:55,720 --> 00:14:04,240
types<font color="#E5E5E5"> so I start from the bottom</font><font color="#CCCCCC"> the</font>

281
00:14:00,279 --> 00:14:07,149
country type is an easy one<font color="#CCCCCC"> so you</font>

282
00:14:04,240 --> 00:14:10,089
represent<font color="#E5E5E5"> your graph QL type with Python</font>

283
00:14:07,149 --> 00:14:13,120
classes<font color="#E5E5E5"> define the country class just</font>

284
00:14:10,089 --> 00:14:16,689
<font color="#E5E5E5">it's a graphene object type by the</font>

285
00:14:13,120 --> 00:14:19,449
graphene is a very good library<font color="#CCCCCC"> an</font>

286
00:14:16,689 --> 00:14:21,910
<font color="#CCCCCC">open-source library to to do graphical</font>

287
00:14:19,449 --> 00:14:23,979
<font color="#E5E5E5">endpoint in Python very very efficient</font>

288
00:14:21,910 --> 00:14:28,719
and all this actually<font color="#CCCCCC"> is made possible</font>

289
00:14:23,980 --> 00:14:30,970
by by those guys<font color="#E5E5E5"> so country class you</font>

290
00:14:28,720 --> 00:14:34,420
just<font color="#E5E5E5"> say it's a graphene object type and</font>

291
00:14:30,970 --> 00:14:36,850
the fields are just class<font color="#E5E5E5"> attributes and</font>

292
00:14:34,420 --> 00:14:38,199
again you give them their<font color="#E5E5E5"> their type you</font>

293
00:14:36,850 --> 00:14:40,149
can<font color="#CCCCCC"> say if they are required</font><font color="#E5E5E5"> you can</font>

294
00:14:38,199 --> 00:14:42,550
provide default values you<font color="#CCCCCC"> can provide</font>

295
00:14:40,149 --> 00:14:46,680
documentation<font color="#E5E5E5"> very important with with</font>

296
00:14:42,550 --> 00:14:51,430
<font color="#E5E5E5">comments or help</font><font color="#CCCCCC"> attributes for instance</font>

297
00:14:46,680 --> 00:14:55,779
<font color="#E5E5E5">and you see there is no code to do the</font>

298
00:14:51,430 --> 00:14:58,839
binding<font color="#E5E5E5"> to the underlying object is that</font>

299
00:14:55,779 --> 00:15:03,839
<font color="#E5E5E5">because in this case I will have</font><font color="#CCCCCC"> another</font>

300
00:14:58,839 --> 00:15:03,839
<font color="#E5E5E5">object which has a different</font>

301
00:15:05,040 --> 00:15:12,380
<font color="#CCCCCC">and in</font><font color="#E5E5E5"> the simple case so the binding is</font>

302
00:15:09,480 --> 00:15:15,630
automatic because the<font color="#E5E5E5"> default resolution</font>

303
00:15:12,380 --> 00:15:18,540
<font color="#E5E5E5">for graphene is to do a get</font><font color="#CCCCCC"> attribute on</font>

304
00:15:15,630 --> 00:15:20,010
<font color="#E5E5E5">the underlying object and so if</font><font color="#CCCCCC"> you're</font>

305
00:15:18,540 --> 00:15:21,599
<font color="#E5E5E5">Endora learning object has</font><font color="#CCCCCC"> the same</font>

306
00:15:20,010 --> 00:15:28,470
attribute names the mapping will<font color="#CCCCCC"> be</font>

307
00:15:21,600 --> 00:15:31,290
automatic<font color="#E5E5E5"> so for the partner object same</font>

308
00:15:28,470 --> 00:15:33,480
principle I enumerate the fields<font color="#E5E5E5"> give</font>

309
00:15:31,290 --> 00:15:37,740
that<font color="#E5E5E5"> their type some are required some</font>

310
00:15:33,480 --> 00:15:39,360
not<font color="#CCCCCC"> this one is a</font><font color="#E5E5E5"> boolean</font><font color="#CCCCCC"> require to you</font>

311
00:15:37,740 --> 00:15:44,330
have access<font color="#CCCCCC"> to a variety of scalar</font>

312
00:15:39,360 --> 00:15:44,330
fields like int float<font color="#CCCCCC"> States and so on</font>

313
00:15:45,830 --> 00:15:52,890
here I'm using<font color="#E5E5E5"> the audio object type but</font>

314
00:15:48,930 --> 00:15:55,079
it's<font color="#E5E5E5"> really a very very small extension</font>

315
00:15:52,890 --> 00:15:57,449
of the graphene object type to cope with

316
00:15:55,080 --> 00:15:59,700
some audio peculiarities for instance so

317
00:15:57,450 --> 00:16:03,230
<font color="#E5E5E5">du is representing strings as null</font>

318
00:15:59,700 --> 00:16:07,080
strings with false and converting false

319
00:16:03,230 --> 00:16:08,670
to graph does not<font color="#E5E5E5"> work for it's not</font>

320
00:16:07,080 --> 00:16:11,880
represented as<font color="#CCCCCC"> new</font><font color="#E5E5E5"> so there is more</font>

321
00:16:08,670 --> 00:16:13,829
conversion there but otherwise for

322
00:16:11,880 --> 00:16:15,720
instance for this one<font color="#E5E5E5"> it's just a</font>

323
00:16:13,830 --> 00:16:21,300
graphene object type so there is<font color="#E5E5E5"> nothing</font>

324
00:16:15,720 --> 00:16:25,320
specific<font color="#CCCCCC"> to to o</font><font color="#E5E5E5"> do here and then next</font>

325
00:16:21,300 --> 00:16:27,390
example<font color="#CCCCCC"> the country field the country is</font>

326
00:16:25,320 --> 00:16:30,390
of type country so does the way you

327
00:16:27,390 --> 00:16:33,390
declare<font color="#CCCCCC"> it</font><font color="#E5E5E5"> but in</font><font color="#CCCCCC"> order there is no</font>

328
00:16:30,390 --> 00:16:35,490
<font color="#CCCCCC">country attribute on the partner</font><font color="#E5E5E5"> you</font>

329
00:16:33,390 --> 00:16:39,210
know do<font color="#E5E5E5"> its name country ID that's a</font>

330
00:16:35,490 --> 00:16:40,560
<font color="#E5E5E5">convention and in this case what you</font>

331
00:16:39,210 --> 00:16:43,650
need to do you<font color="#E5E5E5"> need to provide the</font>

332
00:16:40,560 --> 00:16:46,800
mapping yourself and in graph QL those

333
00:16:43,650 --> 00:16:49,350
mapper are called resolver and the way

334
00:16:46,800 --> 00:16:51,959
to do it is to<font color="#CCCCCC"> just create by convention</font>

335
00:16:49,350 --> 00:16:54,090
and a method<font color="#E5E5E5"> named resolve underscore</font>

336
00:16:51,960 --> 00:16:56,520
the field name so<font color="#CCCCCC"> resolve in the scope</font>

337
00:16:54,090 --> 00:16:59,130
country<font color="#E5E5E5"> and that</font><font color="#CCCCCC"> method</font><font color="#E5E5E5"> is taking two</font>

338
00:16:56,520 --> 00:17:02,250
argument<font color="#E5E5E5"> the root is the</font><font color="#CCCCCC"> Associated</font>

339
00:16:59,130 --> 00:17:03,810
<font color="#E5E5E5">underlying object and info is a way to</font>

340
00:17:02,250 --> 00:17:06,030
pass context like the database

341
00:17:03,810 --> 00:17:09,899
<font color="#E5E5E5">connection the current users or stuff</font>

342
00:17:06,030 --> 00:17:12,300
<font color="#E5E5E5">like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so in this case I map the</font>

343
00:17:09,900 --> 00:17:15,000
<font color="#E5E5E5">graphical country field to the</font><font color="#CCCCCC"> audio</font>

344
00:17:12,300 --> 00:17:17,069
field<font color="#E5E5E5"> name country ID and country ID is</font>

345
00:17:15,000 --> 00:17:18,020
not<font color="#E5E5E5"> an ID no do it's actually a country</font>

346
00:17:17,069 --> 00:17:20,178
object

347
00:17:18,020 --> 00:17:22,550
and that will be<font color="#CCCCCC"> bound to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> graphical</font>

348
00:17:20,179 --> 00:17:25,550
country type and then<font color="#CCCCCC"> graphical will</font>

349
00:17:22,550 --> 00:17:28,960
resolve the country attribute code and

350
00:17:25,550 --> 00:17:32,000
name and<font color="#E5E5E5"> and then continue like that</font>

351
00:17:28,960 --> 00:17:34,520
same for contacts contacts is a list a

352
00:17:32,000 --> 00:17:36,890
<font color="#E5E5E5">list of what a list of partner the list</font>

353
00:17:34,520 --> 00:17:38,120
is work required<font color="#E5E5E5"> you know do I don't</font>

354
00:17:36,890 --> 00:17:40,670
have<font color="#CCCCCC"> a contacts field</font>

355
00:17:38,120 --> 00:17:43,100
I have a child IDs field<font color="#E5E5E5"> and in this</font>

356
00:17:40,670 --> 00:17:45,350
case<font color="#CCCCCC"> resolved context will return</font><font color="#E5E5E5"> just</font>

357
00:17:43,100 --> 00:17:48,740
return<font color="#E5E5E5"> route child IDs which means I'm</font>

358
00:17:45,350 --> 00:17:51,320
returning<font color="#E5E5E5"> the contacts child</font><font color="#CCCCCC"> Aldi's is a</font>

359
00:17:48,740 --> 00:17:55,490
list of<font color="#CCCCCC"> auto partner object that again</font>

360
00:17:51,320 --> 00:17:59,120
will be bound to<font color="#E5E5E5"> the partner</font><font color="#CCCCCC"> graphical</font>

361
00:17:55,490 --> 00:18:01,400
type and again<font color="#E5E5E5"> graphene will recursively</font>

362
00:17:59,120 --> 00:18:04,070
call the resolution mechanism that<font color="#E5E5E5"> you</font>

363
00:18:01,400 --> 00:18:08,690
start to understand to recursively

364
00:18:04,070 --> 00:18:11,770
<font color="#CCCCCC">resolve or all the field</font><font color="#E5E5E5"> and that's all</font>

365
00:18:08,690 --> 00:18:15,770
you<font color="#E5E5E5"> have to do to map those types and</font>

366
00:18:11,770 --> 00:18:18,080
then you have the the top top-level

367
00:18:15,770 --> 00:18:20,270
query<font color="#E5E5E5"> so we come to all partners that</font>

368
00:18:18,080 --> 00:18:22,520
we've seen at the beginning<font color="#CCCCCC"> all partners</font>

369
00:18:20,270 --> 00:18:25,220
<font color="#E5E5E5">is returning</font><font color="#CCCCCC"> a list of what a list of</font>

370
00:18:22,520 --> 00:18:27,350
partners<font color="#E5E5E5"> and then it has three arguments</font>

371
00:18:25,220 --> 00:18:29,270
<font color="#E5E5E5">you see again companies</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> as a</font>

372
00:18:27,350 --> 00:18:29,899
boolean<font color="#E5E5E5"> limit</font><font color="#CCCCCC"> and offset that we have</font>

373
00:18:29,270 --> 00:18:33,710
seen<font color="#E5E5E5"> before</font>

374
00:18:29,900 --> 00:18:35,270
<font color="#E5E5E5">and that as this does not</font><font color="#CCCCCC"> exist on the</font>

375
00:18:33,710 --> 00:18:37,490
<font color="#CCCCCC">back-end system so I need to write a</font>

376
00:18:35,270 --> 00:18:38,360
resolver<font color="#E5E5E5"> to it's</font><font color="#CCCCCC"> always the same writer</font>

377
00:18:37,490 --> 00:18:42,350
resolver

378
00:18:38,360 --> 00:18:44,178
so I<font color="#CCCCCC"> write resolve</font><font color="#E5E5E5"> all partner I get</font>

379
00:18:42,350 --> 00:18:46,010
fruit and info<font color="#CCCCCC"> again and then the</font>

380
00:18:44,179 --> 00:18:49,640
arguments<font color="#CCCCCC"> companies</font><font color="#E5E5E5"> only limit of set</font>

381
00:18:46,010 --> 00:18:51,950
and then that's more traditional stuff<font color="#CCCCCC"> I</font>

382
00:18:49,640 --> 00:18:55,250
build my query<font color="#CCCCCC"> so that's a little</font><font color="#E5E5E5"> bit of</font>

383
00:18:51,950 --> 00:18:58,460
<font color="#E5E5E5">Voodoo code if the client</font><font color="#CCCCCC"> wants</font>

384
00:18:55,250 --> 00:19:01,880
<font color="#E5E5E5">companies only I build my my query is</font>

385
00:18:58,460 --> 00:19:03,740
<font color="#E5E5E5">companies true I do a new search and I</font>

386
00:19:01,880 --> 00:19:06,920
pass limit<font color="#CCCCCC"> enough set and the other</font>

387
00:19:03,740 --> 00:19:09,080
<font color="#E5E5E5">search is going</font><font color="#CCCCCC"> to return a list of</font>

388
00:19:06,920 --> 00:19:10,940
partner objects again that will go to

389
00:19:09,080 --> 00:19:15,610
the resolver mechanism and so<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so on</font>

390
00:19:10,940 --> 00:19:20,179
and then a few small glue code<font color="#E5E5E5"> to create</font>

391
00:19:15,610 --> 00:19:24,320
the HTTP road and basically that's<font color="#E5E5E5"> it so</font>

392
00:19:20,179 --> 00:19:28,490
that's<font color="#E5E5E5"> all you have to do to bind a</font>

393
00:19:24,320 --> 00:19:31,850
graphical schema to an existing back-end

394
00:19:28,490 --> 00:19:33,500
system so as you see there<font color="#CCCCCC"> is</font>

395
00:19:31,850 --> 00:19:34,939
little<font color="#CCCCCC"> older coats</font><font color="#E5E5E5"> who can</font><font color="#CCCCCC"> imagine</font>

396
00:19:33,500 --> 00:19:37,130
that's<font color="#E5E5E5"> going to work with basically</font>

397
00:19:34,940 --> 00:19:39,740
anything you<font color="#E5E5E5"> f if you have Django or</font>

398
00:19:37,130 --> 00:19:42,140
<font color="#CCCCCC">Secret alchemy in the</font><font color="#E5E5E5"> back end or what</font>

399
00:19:39,740 --> 00:19:49,000
<font color="#E5E5E5">whatever you can think of it will be as</font>

400
00:19:42,140 --> 00:19:55,010
easy<font color="#E5E5E5"> to to to do it so very efficient</font>

401
00:19:49,000 --> 00:19:56,990
okay so now let's discuss<font color="#E5E5E5"> a little bit</font>

402
00:19:55,010 --> 00:20:00,520
of of graph QL let's go a little<font color="#E5E5E5"> bit</font>

403
00:19:56,990 --> 00:20:03,169
<font color="#CCCCCC">deeper</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> always graphically different</font>

404
00:20:00,520 --> 00:20:05,330
<font color="#E5E5E5">well I like to compare</font><font color="#CCCCCC"> it to</font><font color="#E5E5E5"> two thing</font>

405
00:20:03,169 --> 00:20:10,390
on the one side traditional RPC

406
00:20:05,330 --> 00:20:13,879
technologies and on the other<font color="#E5E5E5"> side SQL</font>

407
00:20:10,390 --> 00:20:16,220
traditional RPC technologies<font color="#E5E5E5"> those are</font>

408
00:20:13,880 --> 00:20:17,900
very different<font color="#CCCCCC"> econ CORBA soap rest</font>

409
00:20:16,220 --> 00:20:20,710
whatever<font color="#CCCCCC"> but in the end they have in</font>

410
00:20:17,900 --> 00:20:24,320
common<font color="#E5E5E5"> that you have a rigid</font>

411
00:20:20,710 --> 00:20:26,240
<font color="#CCCCCC">request/response structure so the</font><font color="#E5E5E5"> the</font>

412
00:20:24,320 --> 00:20:28,610
<font color="#E5E5E5">service you provide define exactly what</font>

413
00:20:26,240 --> 00:20:30,950
<font color="#E5E5E5">the client went when can request and</font>

414
00:20:28,610 --> 00:20:34,129
what you will receive<font color="#CCCCCC"> in response for</font>

415
00:20:30,950 --> 00:20:36,950
any service<font color="#CCCCCC"> there</font><font color="#E5E5E5"> are all have some sort</font>

416
00:20:34,130 --> 00:20:38,570
of<font color="#E5E5E5"> of schema</font><font color="#CCCCCC"> language that that is</font>

417
00:20:36,950 --> 00:20:41,600
<font color="#E5E5E5">machine</font><font color="#CCCCCC"> readable</font><font color="#E5E5E5"> so you can introspect</font>

418
00:20:38,570 --> 00:20:45,379
it<font color="#E5E5E5"> implement validation</font><font color="#CCCCCC"> and the standard</font>

419
00:20:41,600 --> 00:20:50,658
on the wire<font color="#E5E5E5"> protocol and for those is</font>

420
00:20:45,380 --> 00:20:53,870
the service developer who implements<font color="#CCCCCC"> out</font>

421
00:20:50,659 --> 00:20:56,809
<font color="#CCCCCC">of server reacts to - to a service</font><font color="#E5E5E5"> and</font>

422
00:20:53,870 --> 00:21:00,889
on the<font color="#E5E5E5"> other end of the spectrum you</font>

423
00:20:56,809 --> 00:21:02,600
have<font color="#E5E5E5"> SQL and there of course</font><font color="#CCCCCC"> you have a</font>

424
00:21:00,890 --> 00:21:05,169
<font color="#CCCCCC">database and</font><font color="#E5E5E5"> then it's a client</font><font color="#CCCCCC"> that has</font>

425
00:21:02,600 --> 00:21:08,870
the full freedom<font color="#E5E5E5"> to express</font><font color="#CCCCCC"> his query</font>

426
00:21:05,169 --> 00:21:12,679
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can do whatever you want provided it</font>

427
00:21:08,870 --> 00:21:14,658
follows the database schema<font color="#E5E5E5"> so full</font>

428
00:21:12,679 --> 00:21:16,730
flexibility<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the client but so to</font>

429
00:21:14,659 --> 00:21:20,480
speak there is<font color="#CCCCCC"> no service I developer</font>

430
00:21:16,730 --> 00:21:22,700
you must have a database<font color="#CCCCCC"> okay if you</font>

431
00:21:20,480 --> 00:21:25,280
exclude store procedure with actually

432
00:21:22,700 --> 00:21:28,220
fall in the other category you<font color="#E5E5E5"> have no</font>

433
00:21:25,280 --> 00:21:30,980
<font color="#E5E5E5">possibility to or or it's very difficult</font>

434
00:21:28,220 --> 00:21:35,510
<font color="#E5E5E5">to access external systems</font><font color="#CCCCCC"> within</font><font color="#E5E5E5"> a</font>

435
00:21:30,980 --> 00:21:38,270
sequel database so graph QL<font color="#E5E5E5"> is a bit in</font>

436
00:21:35,510 --> 00:21:40,669
between<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you have full flexibility for</font>

437
00:21:38,270 --> 00:21:42,080
<font color="#E5E5E5">the client to express the query but on</font>

438
00:21:40,669 --> 00:21:44,360
the other<font color="#E5E5E5"> side you</font><font color="#CCCCCC"> have a very easy</font>

439
00:21:42,080 --> 00:21:44,990
mechanism<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> server-side developer</font>

440
00:21:44,360 --> 00:21:48,110
to

441
00:21:44,990 --> 00:21:50,600
to decide<font color="#CCCCCC"> how</font><font color="#E5E5E5"> to respond to any given</font>

442
00:21:48,110 --> 00:21:53,510
<font color="#E5E5E5">query and so you don't even need the</font>

443
00:21:50,600 --> 00:21:57,289
database<font color="#E5E5E5"> you can query</font><font color="#CCCCCC"> back-end systems</font>

444
00:21:53,510 --> 00:22:00,200
or a variety<font color="#CCCCCC"> of whatever</font><font color="#E5E5E5"> you want on on</font>

445
00:21:57,289 --> 00:22:06,289
the<font color="#E5E5E5"> backend so it's really something in</font>

446
00:22:00,200 --> 00:22:12,700
<font color="#E5E5E5">between RPC and and database query</font>

447
00:22:06,289 --> 00:22:15,200
language so some attention points

448
00:22:12,700 --> 00:22:17,750
well you sometime read on the internet

449
00:22:15,200 --> 00:22:22,539
that<font color="#E5E5E5"> a graph QL is presented as a better</font>

450
00:22:17,750 --> 00:22:27,440
rest<font color="#E5E5E5"> so is it is</font><font color="#CCCCCC"> it not I don't know</font>

451
00:22:22,539 --> 00:22:32,270
it's<font color="#CCCCCC"> different but first of all the</font>

452
00:22:27,440 --> 00:22:35,929
typical<font color="#E5E5E5"> complaints you see again graph</font>

453
00:22:32,270 --> 00:22:40,690
QL<font color="#E5E5E5"> is people say it's not respecting</font>

454
00:22:35,929 --> 00:22:43,460
HTTP semantics<font color="#E5E5E5"> well that's true and</font>

455
00:22:40,690 --> 00:22:45,860
<font color="#E5E5E5">graph will</font><font color="#CCCCCC"> basically use HTTP answer</font>

456
00:22:43,460 --> 00:22:48,289
<font color="#CCCCCC">dumb pipe</font><font color="#E5E5E5"> to to send</font><font color="#CCCCCC"> a request</font><font color="#E5E5E5"> and get</font>

457
00:22:45,860 --> 00:22:51,350
the responses so you don't really

458
00:22:48,289 --> 00:22:54,140
benefit from<font color="#E5E5E5"> the HTTP infrastructure for</font>

459
00:22:51,350 --> 00:22:56,299
caching and and so<font color="#E5E5E5"> on you benefit from</font>

460
00:22:54,140 --> 00:22:58,850
authentication and stuff like that<font color="#E5E5E5"> but</font>

461
00:22:56,299 --> 00:23:03,168
<font color="#CCCCCC">some a cheap infrastructure is oblivious</font>

462
00:22:58,850 --> 00:23:06,590
to<font color="#CCCCCC"> to graphic</font><font color="#E5E5E5"> where well to me</font><font color="#CCCCCC"> actually</font>

463
00:23:03,169 --> 00:23:09,770
<font color="#CCCCCC">writing a good REST API is incredibly</font>

464
00:23:06,590 --> 00:23:11,809
art<font color="#E5E5E5"> it's really</font><font color="#CCCCCC"> an art that very few</font>

465
00:23:09,770 --> 00:23:15,590
master doing a REST API that respect

466
00:23:11,809 --> 00:23:19,820
HTTP semantics fully so yeah you decide

467
00:23:15,590 --> 00:23:22,100
for<font color="#CCCCCC"> yourself for me it's a better rest</font>

468
00:23:19,820 --> 00:23:24,110
in the sense that it's you are really

469
00:23:22,100 --> 00:23:26,600
<font color="#E5E5E5">more productive when creating services</font>

470
00:23:24,110 --> 00:23:28,520
with<font color="#E5E5E5"> graph here than with rest and</font>

471
00:23:26,600 --> 00:23:32,449
<font color="#CCCCCC">that's something that I see for for real</font>

472
00:23:28,520 --> 00:23:36,230
<font color="#CCCCCC">and real projects another at entrant</font>

473
00:23:32,450 --> 00:23:38,360
point is performance<font color="#CCCCCC"> you must pay</font>

474
00:23:36,230 --> 00:23:41,630
attention<font color="#E5E5E5"> to the way you write your your</font>

475
00:23:38,360 --> 00:23:44,990
resolvers<font color="#E5E5E5"> for instance in the</font><font color="#CCCCCC"> resort</font>

476
00:23:41,630 --> 00:23:48,409
contact one if I would<font color="#E5E5E5"> have written for</font>

477
00:23:44,990 --> 00:23:51,440
<font color="#CCCCCC">each one doing a search on parent ID is</font>

478
00:23:48,409 --> 00:23:52,909
route ID<font color="#E5E5E5"> that would have worked too but</font>

479
00:23:51,440 --> 00:23:55,520
<font color="#E5E5E5">in the end that would have generated</font>

480
00:23:52,909 --> 00:23:56,330
generated one database<font color="#E5E5E5"> query for each</font>

481
00:23:55,520 --> 00:23:58,908
parent come

482
00:23:56,330 --> 00:24:02,029
in the in the result set<font color="#CCCCCC"> not</font><font color="#E5E5E5"> very</font>

483
00:23:58,909 --> 00:24:06,769
efficient<font color="#E5E5E5"> so the good thing</font><font color="#CCCCCC"> to do is to</font>

484
00:24:02,029 --> 00:24:09,529
exploit the<font color="#CCCCCC"> power of your of</font><font color="#E5E5E5"> your object</font>

485
00:24:06,769 --> 00:24:11,149
relational mapper or<font color="#E5E5E5"> do does it sequel</font>

486
00:24:09,529 --> 00:24:13,940
alchemy does it they have prefetching

487
00:24:11,149 --> 00:24:15,860
strategies<font color="#E5E5E5"> and that would end up in this</font>

488
00:24:13,940 --> 00:24:18,289
case in two queries one for the parent

489
00:24:15,860 --> 00:24:19,939
one for the<font color="#E5E5E5"> children and so much more</font>

490
00:24:18,289 --> 00:24:24,169
efficient<font color="#E5E5E5"> so need to pay</font><font color="#CCCCCC"> attention</font><font color="#E5E5E5"> to</font>

491
00:24:19,940 --> 00:24:27,409
<font color="#E5E5E5">that the</font><font color="#CCCCCC"> other aspect is decide</font><font color="#E5E5E5"> what to</font>

492
00:24:24,169 --> 00:24:29,059
expose in your graph QL<font color="#E5E5E5"> endpoint</font><font color="#CCCCCC"> with</font>

493
00:24:27,409 --> 00:24:32,210
some tools<font color="#E5E5E5"> for</font><font color="#CCCCCC"> instance there are</font>

494
00:24:29,059 --> 00:24:34,269
adapters<font color="#CCCCCC"> for Django sequel alchemy</font><font color="#E5E5E5"> it</font>

495
00:24:32,210 --> 00:24:38,269
can be very easy to expose your wool

496
00:24:34,269 --> 00:24:41,480
object model<font color="#E5E5E5"> at once</font><font color="#CCCCCC"> without doing</font>

497
00:24:38,269 --> 00:24:47,419
<font color="#CCCCCC">almost anything it can be useful in some</font>

498
00:24:41,480 --> 00:24:49,220
<font color="#CCCCCC">cases but I advise to create graphical</font>

499
00:24:47,419 --> 00:24:51,980
<font color="#CCCCCC">endpoint that</font><font color="#E5E5E5"> are specific</font><font color="#CCCCCC"> to the client</font>

500
00:24:49,220 --> 00:24:56,960
<font color="#E5E5E5">use case</font><font color="#CCCCCC"> because exposing your world</font>

501
00:24:51,980 --> 00:24:58,669
object model<font color="#E5E5E5"> will prevent you changing</font>

502
00:24:56,960 --> 00:25:01,580
it<font color="#CCCCCC"> because you</font><font color="#E5E5E5"> will never know what</font>

503
00:24:58,669 --> 00:25:03,919
parts<font color="#E5E5E5"> of it are</font><font color="#CCCCCC"> used by by the</font><font color="#E5E5E5"> client</font>

504
00:25:01,580 --> 00:25:09,289
and since it's<font color="#E5E5E5"> so easy</font><font color="#CCCCCC"> to create</font>

505
00:25:03,919 --> 00:25:13,460
<font color="#E5E5E5">specific</font><font color="#CCCCCC"> schemas</font><font color="#E5E5E5"> you really need one to</font>

506
00:25:09,289 --> 00:25:16,450
<font color="#CCCCCC">to use that power to do schemas</font><font color="#E5E5E5"> adapted</font>

507
00:25:13,460 --> 00:25:18,950
<font color="#E5E5E5">to the clients use case</font><font color="#CCCCCC"> ok finishing</font>

508
00:25:16,450 --> 00:25:26,899
<font color="#E5E5E5">access control pay attention to it</font>

509
00:25:18,950 --> 00:25:30,559
because<font color="#CCCCCC"> for rest it's easy to put access</font>

510
00:25:26,899 --> 00:25:32,809
control at the entry point<font color="#CCCCCC"> here you</font><font color="#E5E5E5"> need</font>

511
00:25:30,559 --> 00:25:38,120
<font color="#CCCCCC">to put access control at the level of</font>

512
00:25:32,809 --> 00:25:43,399
<font color="#E5E5E5">the domain the domain model so key</font>

513
00:25:38,120 --> 00:25:45,559
takeaways it's different<font color="#CCCCCC"> I really</font>

514
00:25:43,399 --> 00:25:48,350
<font color="#CCCCCC">encourage</font><font color="#E5E5E5"> you to try</font><font color="#CCCCCC"> it if you</font><font color="#E5E5E5"> see it as</font>

515
00:25:45,559 --> 00:25:51,019
another<font color="#E5E5E5"> way to do rest you will see that</font>

516
00:25:48,350 --> 00:25:52,399
it's a<font color="#E5E5E5"> very powerful</font><font color="#CCCCCC"> technology and in</font>

517
00:25:51,019 --> 00:25:54,529
my opinion you get<font color="#CCCCCC"> really more</font>

518
00:25:52,399 --> 00:25:56,449
productive than by<font color="#CCCCCC"> doing rest you give a</font>

519
00:25:54,529 --> 00:25:58,370
lot<font color="#E5E5E5"> of flexibility to a client developer</font>

520
00:25:56,450 --> 00:26:02,450
and a lot<font color="#CCCCCC"> of productivity</font><font color="#E5E5E5"> to your</font>

521
00:25:58,370 --> 00:26:05,750
<font color="#CCCCCC">server-side developer you</font><font color="#E5E5E5"> have the links</font>

522
00:26:02,450 --> 00:26:07,220
the slides are online and I don't<font color="#E5E5E5"> know</font>

523
00:26:05,750 --> 00:26:09,779
if you have time for questions<font color="#CCCCCC"> no</font><font color="#E5E5E5"> no</font>

524
00:26:07,220 --> 00:26:09,960
time for<font color="#CCCCCC"> questions so</font><font color="#E5E5E5"> I'd be around so</font>

525
00:26:09,779 --> 00:26:17,180
<font color="#E5E5E5">you</font>

526
00:26:09,960 --> 00:26:17,180
[Applause]

