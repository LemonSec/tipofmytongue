1
00:00:05,930 --> 00:00:14,910
hello everyone<font color="#CCCCCC"> my name is</font><font color="#E5E5E5"> Ricardo and I</font>

2
00:00:12,150 --> 00:00:17,550
would like<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about drawing a</font>

3
00:00:14,910 --> 00:00:22,710
workflow language with<font color="#E5E5E5"> new geeks who has</font>

4
00:00:17,550 --> 00:00:25,050
not heard of<font color="#E5E5E5"> new geeks before</font><font color="#CCCCCC"> oh oh oh</font>

5
00:00:22,710 --> 00:00:26,760
<font color="#E5E5E5">so you</font><font color="#CCCCCC"> might want to stay in this room</font>

6
00:00:25,050 --> 00:00:29,670
<font color="#CCCCCC">because we there's going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be yet</font>

7
00:00:26,760 --> 00:00:34,050
another talk about new geeks and it goes

8
00:00:29,670 --> 00:00:36,570
a<font color="#CCCCCC"> bit more into depth I would explain</font>

9
00:00:34,050 --> 00:00:40,010
the rough idea<font color="#CCCCCC"> okay</font>

10
00:00:36,570 --> 00:00:44,430
so you you shouldn't<font color="#E5E5E5"> get lost</font><font color="#CCCCCC"> this is</font>

11
00:00:40,010 --> 00:00:47,339
this is not the story<font color="#CCCCCC"> of a product but</font>

12
00:00:44,430 --> 00:00:50,670
it's the story of an idea<font color="#E5E5E5"> it is not my</font>

13
00:00:47,340 --> 00:00:55,079
idea<font color="#CCCCCC"> it's an old idea</font><font color="#E5E5E5"> an idea as</font><font color="#CCCCCC"> a whole</font>

14
00:00:50,670 --> 00:01:00,660
<font color="#CCCCCC">is</font><font color="#E5E5E5"> organized computing</font><font color="#CCCCCC"> maybe and it</font>

15
00:00:55,079 --> 00:01:06,390
begins<font color="#CCCCCC"> like this once</font><font color="#E5E5E5"> upon a time there</font>

16
00:01:00,660 --> 00:01:11,280
<font color="#E5E5E5">was a</font><font color="#CCCCCC"> little process it produced output</font>

17
00:01:06,390 --> 00:01:14,039
<font color="#E5E5E5">as if to prove its existence then it</font>

18
00:01:11,280 --> 00:01:20,610
<font color="#E5E5E5">disappeared into the void from whence it</font>

19
00:01:14,039 --> 00:01:25,250
came<font color="#CCCCCC"> a prepare for</font><font color="#E5E5E5"> tragedy need</font><font color="#CCCCCC"> brief</font>

20
00:01:20,610 --> 00:01:25,250
life<font color="#E5E5E5"> it never</font><font color="#CCCCCC"> met any other processes</font>

21
00:01:27,470 --> 00:01:37,020
it's all changed when at long last<font color="#CCCCCC"> the</font>

22
00:01:30,959 --> 00:01:43,310
pipe<font color="#E5E5E5"> arrived the concept of a pipeline</font>

23
00:01:37,020 --> 00:01:46,170
<font color="#E5E5E5">was born this is the pipe</font>

24
00:01:43,310 --> 00:01:48,810
this is one process<font color="#E5E5E5"> this is another</font>

25
00:01:46,170 --> 00:01:51,509
process<font color="#CCCCCC"> and they meet in the</font><font color="#E5E5E5"> middle</font><font color="#CCCCCC"> this</font>

26
00:01:48,810 --> 00:01:56,969
one produces<font color="#E5E5E5"> something this one consumes</font>

27
00:01:51,509 --> 00:01:58,289
what the<font color="#E5E5E5"> previous process produced this</font>

28
00:01:56,969 --> 00:02:03,229
<font color="#E5E5E5">was a beautiful concept because the</font>

29
00:01:58,289 --> 00:02:06,990
little process<font color="#E5E5E5"> was no longer alone but</font>

30
00:02:03,229 --> 00:02:10,310
like every beautiful<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> it turned</font>

31
00:02:06,990 --> 00:02:13,680
into something into a monstrosity

32
00:02:10,310 --> 00:02:16,110
<font color="#E5E5E5">pipelines grew ever larger as as did the</font>

33
00:02:13,680 --> 00:02:19,080
compute requirements<font color="#E5E5E5"> and no longer was</font>

34
00:02:16,110 --> 00:02:21,540
it sufficient<font color="#E5E5E5"> to have a process and</font>

35
00:02:19,080 --> 00:02:25,530
another<font color="#E5E5E5"> process that</font><font color="#CCCCCC"> communicated</font><font color="#E5E5E5"> with</font>

36
00:02:21,540 --> 00:02:28,250
<font color="#E5E5E5">one</font><font color="#CCCCCC"> another when</font><font color="#E5E5E5"> researchers of</font><font color="#CCCCCC"> the life</font>

37
00:02:25,530 --> 00:02:31,010
sciences understood the concept of

38
00:02:28,250 --> 00:02:35,430
computing and<font color="#E5E5E5"> the value it provides for</font>

39
00:02:31,010 --> 00:02:38,010
<font color="#E5E5E5">for biology for example they they try to</font>

40
00:02:35,430 --> 00:02:41,450
scale<font color="#E5E5E5"> this very simple concept this very</font>

41
00:02:38,010 --> 00:02:45,019
simple<font color="#E5E5E5"> idea to the genome scale</font><font color="#CCCCCC"> and</font>

42
00:02:41,450 --> 00:02:47,280
terabytes of data<font color="#CCCCCC"> lots</font><font color="#E5E5E5"> and lots of</font>

43
00:02:45,019 --> 00:02:51,389
processes that<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to run and compute</font>

44
00:02:47,280 --> 00:02:56,250
<font color="#E5E5E5">lots and lots of data</font><font color="#CCCCCC"> to produce a final</font>

45
00:02:51,389 --> 00:02:58,109
<font color="#E5E5E5">answer</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> 40</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> go</font><font color="#CCCCCC"> processes</font><font color="#E5E5E5"> is never</font>

46
00:02:56,250 --> 00:02:59,850
as<font color="#CCCCCC"> simple</font><font color="#E5E5E5"> as that it's not just</font><font color="#CCCCCC"> a line</font>

47
00:02:58,109 --> 00:03:01,680
the genome<font color="#E5E5E5"> then the</font><font color="#CCCCCC"> fastest for some</font>

48
00:02:59,850 --> 00:03:04,950
process it analyzed it<font color="#CCCCCC"> no we need we</font>

49
00:03:01,680 --> 00:03:09,720
need<font color="#E5E5E5"> a new a</font><font color="#CCCCCC"> new spin</font><font color="#E5E5E5"> on this idea of</font>

50
00:03:04,950 --> 00:03:14,850
processes<font color="#E5E5E5"> high-performance computing</font>

51
00:03:09,720 --> 00:03:20,160
<font color="#E5E5E5">this is really just lots of low</font>

52
00:03:14,850 --> 00:03:23,269
performance computing but connected now

53
00:03:20,160 --> 00:03:27,209
the<font color="#CCCCCC"> an obvious problem</font><font color="#E5E5E5"> with this is</font><font color="#CCCCCC"> that</font>

54
00:03:23,269 --> 00:03:28,530
these<font color="#E5E5E5"> are different machines right you</font>

55
00:03:27,209 --> 00:03:30,660
can't just<font color="#CCCCCC"> have</font><font color="#E5E5E5"> you can't just use a</font>

56
00:03:28,530 --> 00:03:36,269
pipe for that<font color="#E5E5E5"> we still have processes</font>

57
00:03:30,660 --> 00:03:38,730
but how do you connect<font color="#E5E5E5"> them a pipeline</font>

58
00:03:36,269 --> 00:03:41,010
is just a process connected with another

59
00:03:38,730 --> 00:03:43,500
process may be<font color="#CCCCCC"> connected with to yet</font>

60
00:03:41,010 --> 00:03:45,810
another process but I the concept of a

61
00:03:43,500 --> 00:03:50,510
workflow is an<font color="#E5E5E5"> expansion of the idea of</font>

62
00:03:45,810 --> 00:03:54,269
<font color="#E5E5E5">a pipeline rather than having a linear</font>

63
00:03:50,510 --> 00:03:56,280
<font color="#E5E5E5">flow of data it goes in from the left</font>

64
00:03:54,269 --> 00:03:59,340
and comes<font color="#E5E5E5"> out at the right you have</font>

65
00:03:56,280 --> 00:04:02,790
<font color="#CCCCCC">Graff where information can disperse and</font>

66
00:03:59,340 --> 00:04:04,319
go<font color="#E5E5E5"> yeah seep through and at the end you</font>

67
00:04:02,790 --> 00:04:12,149
filter out something<font color="#CCCCCC"> that you're</font>

68
00:04:04,319 --> 00:04:16,380
<font color="#E5E5E5">interested in but like any simplified</font>

69
00:04:12,150 --> 00:04:23,460
story like this one<font color="#E5E5E5"> this</font><font color="#CCCCCC"> one too is made</font>

70
00:04:16,380 --> 00:04:26,639
up of lies<font color="#E5E5E5"> I said that this is a process</font>

71
00:04:23,460 --> 00:04:29,700
<font color="#CCCCCC">right now this stroke this is a process</font>

72
00:04:26,639 --> 00:04:32,700
<font color="#E5E5E5">but much more important than the</font><font color="#CCCCCC"> process</font>

73
00:04:29,700 --> 00:04:37,950
itself<font color="#E5E5E5"> is the much larger environment in</font>

74
00:04:32,700 --> 00:04:41,400
which it runs we have<font color="#E5E5E5"> we don't speak</font>

75
00:04:37,950 --> 00:04:44,400
computer languages<font color="#E5E5E5"> we we interact with</font>

76
00:04:41,400 --> 00:04:46,560
<font color="#CCCCCC">computers through a very simple string</font>

77
00:04:44,400 --> 00:04:49,349
based language right we have names<font color="#E5E5E5"> of</font>

78
00:04:46,560 --> 00:04:50,210
processes<font color="#CCCCCC"> and the computer invokes them</font>

79
00:04:49,350 --> 00:04:53,970
for us

80
00:04:50,210 --> 00:04:56,419
we can't actually control<font color="#E5E5E5"> the process we</font>

81
00:04:53,970 --> 00:04:58,800
<font color="#CCCCCC">just give the computer</font><font color="#E5E5E5"> a name and</font>

82
00:04:56,419 --> 00:05:01,200
dependent on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> environment it</font><font color="#E5E5E5"> it</font>

83
00:04:58,800 --> 00:05:05,400
<font color="#CCCCCC">generates the process for us so the</font>

84
00:05:01,200 --> 00:05:07,979
environment is is<font color="#E5E5E5"> really crucial in what</font>

85
00:05:05,400 --> 00:05:11,489
effects<font color="#E5E5E5"> there will</font><font color="#CCCCCC"> be when we invoke a</font>

86
00:05:07,979 --> 00:05:14,640
command but the environment<font color="#E5E5E5"> is not just</font>

87
00:05:11,490 --> 00:05:17,550
this gray blob<font color="#E5E5E5"> this looming shadow in</font>

88
00:05:14,640 --> 00:05:20,280
the background<font color="#CCCCCC"> is if you zoom a little a</font>

89
00:05:17,550 --> 00:05:31,070
<font color="#E5E5E5">little closer into that it it consists</font>

90
00:05:20,280 --> 00:05:34,070
of things<font color="#E5E5E5"> it consists of files packages</font>

91
00:05:31,070 --> 00:05:34,070
applications

92
00:05:35,520 --> 00:05:42,330
this is this is just<font color="#CCCCCC"> a very simple</font>

93
00:05:39,020 --> 00:05:44,669
real-world environment<font color="#CCCCCC"> it's a very</font>

94
00:05:42,330 --> 00:05:47,729
<font color="#E5E5E5">simple environment it's just one for for</font>

95
00:05:44,669 --> 00:05:52,889
creating an environment<font color="#CCCCCC"> for</font><font color="#E5E5E5"> GCC for</font>

96
00:05:47,729 --> 00:05:56,729
example this<font color="#E5E5E5"> is just one compiler in in</font>

97
00:05:52,889 --> 00:05:58,680
real real workflows we have much larger

98
00:05:56,729 --> 00:06:01,770
environment that we can't possibly

99
00:05:58,680 --> 00:06:03,870
comprehend<font color="#CCCCCC"> by</font><font color="#E5E5E5"> just looking</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> her even</font>

100
00:06:01,770 --> 00:06:05,969
if you spend an hour looking at this<font color="#E5E5E5"> we</font>

101
00:06:03,870 --> 00:06:09,150
probably won't understand what this does

102
00:06:05,970 --> 00:06:11,099
well how it behaves<font color="#CCCCCC"> what implication</font>

103
00:06:09,150 --> 00:06:13,138
<font color="#E5E5E5">this environment has on the process</font>

104
00:06:11,099 --> 00:06:21,870
<font color="#E5E5E5">running inside of a no</font><font color="#CCCCCC"> vironment</font><font color="#E5E5E5"> like</font>

105
00:06:13,139 --> 00:06:26,819
this can containers help<font color="#CCCCCC"> okay let's move</font>

106
00:06:21,870 --> 00:06:29,729
on<font color="#E5E5E5"> containers containers are the idea</font>

107
00:06:26,819 --> 00:06:32,720
that you can wrap<font color="#CCCCCC"> up</font><font color="#E5E5E5"> an environment the</font>

108
00:06:29,729 --> 00:06:35,639
binary state of an<font color="#E5E5E5"> environment</font>

109
00:06:32,720 --> 00:06:40,860
instantiated at a later point<font color="#E5E5E5"> it's on</font><font color="#CCCCCC"> a</font>

110
00:06:35,639 --> 00:06:42,780
different<font color="#E5E5E5"> machine maybe and that way you</font>

111
00:06:40,860 --> 00:06:45,360
can<font color="#E5E5E5"> be sure</font><font color="#CCCCCC"> that the process</font><font color="#E5E5E5"> running</font>

112
00:06:42,780 --> 00:06:49,380
inside<font color="#E5E5E5"> an environment has a a</font><font color="#CCCCCC"> well known</font>

113
00:06:45,360 --> 00:06:52,409
environment to<font color="#E5E5E5"> operate in but containers</font>

114
00:06:49,380 --> 00:06:54,030
are a weird<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know we we use</font><font color="#CCCCCC"> the term</font>

115
00:06:52,409 --> 00:06:56,639
containers<font color="#E5E5E5"> but it's really an</font>

116
00:06:54,030 --> 00:07:01,289
application bundle<font color="#E5E5E5"> right it's a</font><font color="#CCCCCC"> it's a</font>

117
00:06:56,639 --> 00:07:02,669
lot<font color="#E5E5E5"> of</font><font color="#CCCCCC"> State thrown in together and when</font>

118
00:07:01,289 --> 00:07:06,630
you<font color="#E5E5E5"> think of it</font><font color="#CCCCCC"> that way they are very</font>

119
00:07:02,669 --> 00:07:10,258
<font color="#CCCCCC">much like a smoothie</font><font color="#E5E5E5"> it's the result of</font>

120
00:07:06,630 --> 00:07:12,750
something<font color="#CCCCCC"> there's an</font><font color="#E5E5E5"> output of following</font>

121
00:07:10,259 --> 00:07:16,349
a<font color="#CCCCCC"> recipe that</font><font color="#E5E5E5"> you may no longer have</font>

122
00:07:12,750 --> 00:07:18,419
access to containers<font color="#E5E5E5"> like transparency</font>

123
00:07:16,349 --> 00:07:21,330
you don't<font color="#E5E5E5"> really know what is inside</font>

124
00:07:18,419 --> 00:07:22,650
once you have the result<font color="#E5E5E5"> now you might</font>

125
00:07:21,330 --> 00:07:24,330
say oh<font color="#E5E5E5"> but what I would like</font>

126
00:07:22,650 --> 00:07:27,719
things like docker files right isn't

127
00:07:24,330 --> 00:07:30,659
this a<font color="#E5E5E5"> recipe it is a</font><font color="#CCCCCC"> time-based recipe</font>

128
00:07:27,719 --> 00:07:33,620
it depends on where you run it and where

129
00:07:30,659 --> 00:07:36,750
when you run it

130
00:07:33,620 --> 00:07:40,380
generating a<font color="#E5E5E5"> docker application bundle</font>

131
00:07:36,750 --> 00:07:43,110
<font color="#E5E5E5">this binary blob depends on the state of</font>

132
00:07:40,380 --> 00:07:46,949
<font color="#E5E5E5">the world right there was used as an</font>

133
00:07:43,110 --> 00:07:49,350
input<font color="#E5E5E5"> to the procedure generating the</font>

134
00:07:46,949 --> 00:07:51,480
state so containers<font color="#CCCCCC"> on are</font><font color="#E5E5E5"> not</font>

135
00:07:49,350 --> 00:07:58,200
actually a<font color="#E5E5E5"> solution there are</font><font color="#CCCCCC"> they're</font>

136
00:07:51,480 --> 00:08:02,670
<font color="#E5E5E5">not an input there are their outputs so</font>

137
00:07:58,200 --> 00:08:04,020
what can<font color="#E5E5E5"> we do about this so I'll be</font>

138
00:08:02,670 --> 00:08:11,520
honest to say<font color="#CCCCCC"> a thinly-veiled</font>

139
00:08:04,020 --> 00:08:16,950
<font color="#E5E5E5">advertisement for</font><font color="#CCCCCC"> no geeks no geeks</font>

140
00:08:11,520 --> 00:08:18,990
<font color="#CCCCCC">is</font><font color="#E5E5E5"> is often called a package manager but</font>

141
00:08:16,950 --> 00:08:23,640
when you when you hear package manager

142
00:08:18,990 --> 00:08:28,350
<font color="#E5E5E5">you maybe you think of of NPM</font><font color="#CCCCCC"> god forbid</font>

143
00:08:23,640 --> 00:08:32,069
<font color="#E5E5E5">or you think of apt for Debian right or</font>

144
00:08:28,350 --> 00:08:33,960
you think<font color="#E5E5E5"> of</font><font color="#CCCCCC"> pipe i/o there are so many</font>

145
00:08:32,070 --> 00:08:36,080
package managers<font color="#E5E5E5"> package manager does</font>

146
00:08:33,960 --> 00:08:39,479
not begin to<font color="#CCCCCC"> describe what geeks does</font>

147
00:08:36,080 --> 00:08:42,479
yes it allows you to<font color="#E5E5E5"> manage packages</font><font color="#CCCCCC"> I</font>

148
00:08:39,479 --> 00:08:46,050
<font color="#CCCCCC">build packages</font><font color="#E5E5E5"> in a</font><font color="#CCCCCC"> reproducible fashion</font>

149
00:08:42,479 --> 00:08:49,320
by design my producer will means that

150
00:08:46,050 --> 00:08:51,900
you build a<font color="#CCCCCC"> package today according to a</font>

151
00:08:49,320 --> 00:08:53,790
recipe<font color="#E5E5E5"> and result in a certain kind of</font>

152
00:08:51,900 --> 00:08:55,410
output and<font color="#CCCCCC"> in</font><font color="#E5E5E5"> photos</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> in binary state</font>

153
00:08:53,790 --> 00:08:57,480
<font color="#E5E5E5">and you do the same thing tomorrow or a</font>

154
00:08:55,410 --> 00:08:59,910
week<font color="#E5E5E5"> from now with the same recipe you</font>

155
00:08:57,480 --> 00:09:02,370
get the same<font color="#E5E5E5"> output</font><font color="#CCCCCC"> you get</font><font color="#E5E5E5"> the same</font>

156
00:08:59,910 --> 00:09:04,370
binary<font color="#E5E5E5"> state so same inputs same output</font>

157
00:09:02,370 --> 00:09:07,200
<font color="#E5E5E5">the idea behind that is called</font>

158
00:09:04,370 --> 00:09:10,950
functional package management which<font color="#CCCCCC"> was</font>

159
00:09:07,200 --> 00:09:13,530
pioneered<font color="#E5E5E5"> by</font><font color="#CCCCCC"> NYX but</font><font color="#E5E5E5"> it's more than just</font>

160
00:09:10,950 --> 00:09:17,670
packages<font color="#CCCCCC"> write multiple packages</font>

161
00:09:13,530 --> 00:09:19,890
<font color="#E5E5E5">together</font><font color="#CCCCCC"> form an environment Geeks</font>

162
00:09:17,670 --> 00:09:21,630
allows you to manage environments create

163
00:09:19,890 --> 00:09:23,760
environments<font color="#CCCCCC"> create isolated environment</font>

164
00:09:21,630 --> 00:09:26,400
creates<font color="#E5E5E5"> impure environments that are</font>

165
00:09:23,760 --> 00:09:28,350
<font color="#E5E5E5">like a mix of this state you have on</font>

166
00:09:26,400 --> 00:09:30,750
your system<font color="#CCCCCC"> and the one that</font><font color="#E5E5E5"> you want to</font>

167
00:09:28,350 --> 00:09:33,360
have but it also<font color="#CCCCCC"> allows you to</font><font color="#E5E5E5"> put those</font>

168
00:09:30,750 --> 00:09:38,480
environment into isolated<font color="#E5E5E5"> containers</font>

169
00:09:33,360 --> 00:09:41,660
<font color="#E5E5E5">there is context of execution where</font>

170
00:09:38,480 --> 00:09:45,610
certain aspects of the environment<font color="#E5E5E5"> are</font>

171
00:09:41,660 --> 00:09:49,089
eliminated for example

172
00:09:45,610 --> 00:09:51,850
user names<font color="#E5E5E5"> there's a you can create a</font>

173
00:09:49,089 --> 00:09:57,100
user<font color="#E5E5E5"> name space in which the process</font>

174
00:09:51,850 --> 00:09:59,950
<font color="#CCCCCC">running inside</font><font color="#E5E5E5"> in context within which</font>

175
00:09:57,100 --> 00:10:02,529
the user running<font color="#E5E5E5"> the process is</font><font color="#CCCCCC"> root for</font>

176
00:09:59,950 --> 00:10:05,380
example the<font color="#E5E5E5"> process</font><font color="#CCCCCC"> things I'm running</font>

177
00:10:02,529 --> 00:10:07,029
is root but really<font color="#E5E5E5"> from the looking at</font>

178
00:10:05,380 --> 00:10:09,370
it<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> outside</font><font color="#E5E5E5"> there is no such</font>

179
00:10:07,029 --> 00:10:11,890
thing as root<font color="#CCCCCC"> alright you can also</font>

180
00:10:09,370 --> 00:10:13,690
virtualize the<font color="#CCCCCC"> filesystem and you can</font>

181
00:10:11,890 --> 00:10:16,390
say these files<font color="#E5E5E5"> don't exist only</font><font color="#CCCCCC"> those</font>

182
00:10:13,690 --> 00:10:19,360
files exist<font color="#CCCCCC"> containers have a very</font>

183
00:10:16,390 --> 00:10:22,660
powerful powerful idea<font color="#CCCCCC"> that is</font>

184
00:10:19,360 --> 00:10:25,680
orthogonal to<font color="#E5E5E5"> the idea of bundling up</font>

185
00:10:22,660 --> 00:10:27,699
binary<font color="#E5E5E5"> state and shipping this around</font>

186
00:10:25,680 --> 00:10:31,000
more<font color="#E5E5E5"> than that though</font><font color="#CCCCCC"> geeks can</font><font color="#E5E5E5"> allow</font>

187
00:10:27,700 --> 00:10:33,940
you gigs enables you to<font color="#E5E5E5"> build complete</font>

188
00:10:31,000 --> 00:10:36,579
systems by system I<font color="#E5E5E5"> mean an operating</font>

189
00:10:33,940 --> 00:10:40,540
system<font color="#CCCCCC"> that runs on for example this</font>

190
00:10:36,579 --> 00:10:43,180
laptop<font color="#E5E5E5"> here or on an HPC cluster or a</font>

191
00:10:40,540 --> 00:10:45,069
virtual machine<font color="#E5E5E5"> because the two geeks</font>

192
00:10:43,180 --> 00:10:49,209
<font color="#E5E5E5">this is all the same there's all about</font>

193
00:10:45,070 --> 00:10:54,430
building things recipes in a

194
00:10:49,209 --> 00:10:56,380
reproducible<font color="#E5E5E5"> fashion so that the end we</font>

195
00:10:54,430 --> 00:11:02,229
end up with<font color="#E5E5E5"> exactly the kind of state</font>

196
00:10:56,380 --> 00:11:04,000
that<font color="#E5E5E5"> we declared at the beginning so in</font>

197
00:11:02,230 --> 00:11:07,810
short what geeks<font color="#E5E5E5"> provides is</font>

198
00:11:04,000 --> 00:11:13,329
reproducible deployment<font color="#E5E5E5"> in a very</font>

199
00:11:07,810 --> 00:11:16,270
generic<font color="#CCCCCC"> way now</font><font color="#E5E5E5"> this is actually about</font>

200
00:11:13,329 --> 00:11:19,420
<font color="#E5E5E5">the the workflow the geeks</font><font color="#CCCCCC"> workflow</font>

201
00:11:16,270 --> 00:11:21,610
language right you can think of it as an

202
00:11:19,420 --> 00:11:22,810
extension<font color="#E5E5E5"> to geeks itself so this is not</font>

203
00:11:21,610 --> 00:11:26,339
to<font color="#E5E5E5"> scale the work for language is</font>

204
00:11:22,810 --> 00:11:29,649
<font color="#E5E5E5">actually even</font><font color="#CCCCCC"> smaller and so geeks is</font>

205
00:11:26,339 --> 00:11:32,010
<font color="#CCCCCC">just a minimalist language</font><font color="#E5E5E5"> track right</font>

206
00:11:29,649 --> 00:11:35,020
so this<font color="#CCCCCC"> is way it's</font><font color="#E5E5E5"> supposed to be</font>

207
00:11:32,010 --> 00:11:39,100
<font color="#E5E5E5">there's geeks and out of geeks we grow</font>

208
00:11:35,020 --> 00:11:41,740
<font color="#E5E5E5">extra features</font><font color="#CCCCCC"> that describe</font><font color="#E5E5E5"> that it'll</font>

209
00:11:39,100 --> 00:11:44,230
provide enough features to<font color="#E5E5E5"> allow us to</font>

210
00:11:41,740 --> 00:11:47,440
<font color="#E5E5E5">express workflows now back to the</font>

211
00:11:44,230 --> 00:11:49,420
original<font color="#CCCCCC"> idea we have processes and we</font>

212
00:11:47,440 --> 00:11:53,800
had the pipes the pipes are really<font color="#E5E5E5"> just</font>

213
00:11:49,420 --> 00:11:57,040
means of<font color="#E5E5E5"> composition so we have the</font>

214
00:11:53,800 --> 00:11:58,540
means of abstraction<font color="#E5E5E5"> to describe what a</font>

215
00:11:57,040 --> 00:12:00,910
process is

216
00:11:58,540 --> 00:12:06,660
<font color="#E5E5E5">to maybe describe its complexity its</font>

217
00:12:00,910 --> 00:12:09,430
resource requirements or simply its name

218
00:12:06,660 --> 00:12:12,280
so we have<font color="#E5E5E5"> control over it and the</font>

219
00:12:09,430 --> 00:12:13,839
<font color="#CCCCCC">workflow is just a composition of many</font>

220
00:12:12,280 --> 00:12:16,230
processes and<font color="#E5E5E5"> this is really all there</font>

221
00:12:13,840 --> 00:12:16,230
is<font color="#E5E5E5"> to</font><font color="#CCCCCC"> it</font>

222
00:12:16,410 --> 00:12:20,459
place<font color="#E5E5E5"> yourself if you're</font><font color="#CCCCCC"> not a schema</font>

223
00:12:18,670 --> 00:12:23,469
this may<font color="#E5E5E5"> look really really ugly</font><font color="#CCCCCC"> but</font>

224
00:12:20,460 --> 00:12:27,100
bear<font color="#CCCCCC"> with me in two more slides these</font>

225
00:12:23,470 --> 00:12:27,850
<font color="#CCCCCC">parentheses will disappear so this is</font>

226
00:12:27,100 --> 00:12:30,270
very<font color="#E5E5E5"> very simple</font>

227
00:12:27,850 --> 00:12:33,280
right this is a process there has a name

228
00:12:30,270 --> 00:12:34,030
so<font color="#E5E5E5"> we can we can refer</font><font color="#CCCCCC"> to it and</font><font color="#E5E5E5"> we can</font>

229
00:12:33,280 --> 00:12:38,260
<font color="#E5E5E5">invoke it</font>

230
00:12:34,030 --> 00:12:40,449
it has<font color="#E5E5E5"> package inputs this one uses the</font>

231
00:12:38,260 --> 00:12:42,819
new<font color="#E5E5E5"> hello package whose purpose is to</font>

232
00:12:40,450 --> 00:12:46,390
greet you when you<font color="#CCCCCC"> execute it it says</font>

233
00:12:42,820 --> 00:12:48,460
hello<font color="#CCCCCC"> world</font><font color="#E5E5E5"> and the process has a</font>

234
00:12:46,390 --> 00:12:51,520
procedure this is<font color="#E5E5E5"> that the the way how</font>

235
00:12:48,460 --> 00:12:52,840
it<font color="#E5E5E5"> is supposed to be executed this is</font>

236
00:12:51,520 --> 00:12:55,360
some special<font color="#E5E5E5"> syntax you don't need to</font>

237
00:12:52,840 --> 00:12:55,870
know that<font color="#CCCCCC"> this</font><font color="#E5E5E5"> just says it's like</font><font color="#CCCCCC"> same</font>

238
00:12:55,360 --> 00:12:57,970
<font color="#CCCCCC">tack issue</font>

239
00:12:55,870 --> 00:12:59,740
syntactic sugar<font color="#CCCCCC"> allows</font><font color="#E5E5E5"> us to run</font><font color="#CCCCCC"> a</font>

240
00:12:57,970 --> 00:13:04,630
<font color="#E5E5E5">little shell snippet where we execute</font>

241
00:12:59,740 --> 00:13:07,900
hello<font color="#CCCCCC"> it processes very very simple</font><font color="#E5E5E5"> the</font>

242
00:13:04,630 --> 00:13:10,180
package inputs field is where the<font color="#E5E5E5"> magic</font>

243
00:13:07,900 --> 00:13:14,350
lies<font color="#E5E5E5"> so this is where it connects</font><font color="#CCCCCC"> to</font>

244
00:13:10,180 --> 00:13:17,140
geeks<font color="#CCCCCC"> when this is invoked</font><font color="#E5E5E5"> geeks would</font>

245
00:13:14,350 --> 00:13:21,370
generate the<font color="#E5E5E5"> environment that provides</font>

246
00:13:17,140 --> 00:13:23,860
hello and nothing but hello so that

247
00:13:21,370 --> 00:13:26,350
within<font color="#E5E5E5"> this context we</font><font color="#CCCCCC"> have a specific</font>

248
00:13:23,860 --> 00:13:29,730
<font color="#CCCCCC">version a specific variant</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> hello</font>

249
00:13:26,350 --> 00:13:32,500
package that we can execute and<font color="#E5E5E5"> and get</font>

250
00:13:29,730 --> 00:13:35,910
the greeting that<font color="#CCCCCC"> we want because maybe</font>

251
00:13:32,500 --> 00:13:42,210
<font color="#CCCCCC">an hello 3.0 the</font><font color="#E5E5E5"> greeting may change -</font>

252
00:13:35,910 --> 00:13:46,870
hello Jupiter who knows<font color="#CCCCCC"> its workflows as</font>

253
00:13:42,210 --> 00:13:51,100
I said workflows are just the means of

254
00:13:46,870 --> 00:13:58,620
combining<font color="#E5E5E5"> processes this workflow</font><font color="#CCCCCC"> has a</font>

255
00:13:51,100 --> 00:13:58,620
name<font color="#E5E5E5"> flow this</font><font color="#CCCCCC"> is a common workflow name</font>

256
00:13:58,800 --> 00:14:05,170
<font color="#CCCCCC">and it consists of processes that are</font>

257
00:14:01,930 --> 00:14:08,170
connected in a graph<font color="#E5E5E5"> right so there is a</font>

258
00:14:05,170 --> 00:14:12,069
process<font color="#CCCCCC"> a</font><font color="#E5E5E5"> that does things and a process</font>

259
00:14:08,170 --> 00:14:14,139
would do<font color="#E5E5E5"> an a depends on</font>

260
00:14:12,070 --> 00:14:17,620
the B and<font color="#CCCCCC"> C processes</font><font color="#E5E5E5"> that the outputs</font>

261
00:14:14,139 --> 00:14:20,019
<font color="#E5E5E5">of B and C</font><font color="#CCCCCC"> may</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> B generates something</font>

262
00:14:17,620 --> 00:14:27,149
<font color="#E5E5E5">first that</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> consumes it also depends on</font>

263
00:14:20,019 --> 00:14:29,410
on C now<font color="#E5E5E5"> B itself depends on</font><font color="#CCCCCC"> the</font>

264
00:14:27,149 --> 00:14:31,269
<font color="#CCCCCC">execution of D and</font><font color="#E5E5E5"> so this is a very</font>

265
00:14:29,410 --> 00:14:34,290
very simple<font color="#CCCCCC"> description</font><font color="#E5E5E5"> of how these</font>

266
00:14:31,269 --> 00:14:36,579
processes<font color="#E5E5E5"> are supposed to be plugged in</font>

267
00:14:34,290 --> 00:14:39,339
now<font color="#CCCCCC"> for those who</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> like s</font>

268
00:14:36,579 --> 00:14:41,258
<font color="#CCCCCC">expressions</font><font color="#E5E5E5"> just sick this is a</font>

269
00:14:39,339 --> 00:14:43,480
different way of<font color="#E5E5E5"> expressing the exact</font>

270
00:14:41,259 --> 00:14:46,480
same thing<font color="#E5E5E5"> right this is what what</font>

271
00:14:43,480 --> 00:14:48,880
<font color="#CCCCCC">scheme is C when they or what lispers</font>

272
00:14:46,480 --> 00:14:51,009
see when they look at as expressions

273
00:14:48,880 --> 00:14:54,250
they don't see the<font color="#CCCCCC"> parentheses they see</font>

274
00:14:51,009 --> 00:14:55,720
the structure<font color="#E5E5E5"> okay so you can simply</font>

275
00:14:54,250 --> 00:14:59,350
write<font color="#CCCCCC"> that structure if you feel like it</font>

276
00:14:55,720 --> 00:15:03,519
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a code whisp</font><font color="#E5E5E5"> and there's going</font>

277
00:14:59,350 --> 00:15:06,279
to be a talk later<font color="#E5E5E5"> today</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> this</font>

278
00:15:03,519 --> 00:15:07,899
language<font color="#E5E5E5"> extension which</font><font color="#CCCCCC"> is which is</font><font color="#E5E5E5"> a</font>

279
00:15:06,279 --> 00:15:17,709
<font color="#E5E5E5">minimis</font><font color="#CCCCCC"> line minimalist language in</font>

280
00:15:07,899 --> 00:15:19,329
itself there was<font color="#CCCCCC"> a question</font><font color="#E5E5E5"> this is</font>

281
00:15:17,709 --> 00:15:21,760
actually<font color="#CCCCCC"> a future extension that</font><font color="#E5E5E5"> is</font>

282
00:15:19,329 --> 00:15:23,800
<font color="#E5E5E5">currently in works there are different</font>

283
00:15:21,760 --> 00:15:26,709
<font color="#E5E5E5">ways of expressing expressing the same</font>

284
00:15:23,800 --> 00:15:31,329
thing<font color="#E5E5E5"> all right so the question was</font>

285
00:15:26,709 --> 00:15:34,479
about<font color="#E5E5E5"> if this is</font><font color="#CCCCCC"> a dataflow</font><font color="#E5E5E5"> expression</font>

286
00:15:31,329 --> 00:15:35,529
<font color="#CCCCCC">its data flows from</font><font color="#E5E5E5"> A to B and C or if</font>

287
00:15:34,480 --> 00:15:40,389
it goes the<font color="#CCCCCC"> other way around</font>

288
00:15:35,529 --> 00:15:44,139
<font color="#E5E5E5">right this is depends on a depends on</font>

289
00:15:40,389 --> 00:15:46,269
<font color="#E5E5E5">whatever B and C provide you can't</font>

290
00:15:44,139 --> 00:15:50,079
express it the other way around<font color="#E5E5E5"> flipping</font>

291
00:15:46,269 --> 00:15:54,760
the arrow and saying data that is pushed

292
00:15:50,079 --> 00:15:57,719
into B and C is later consumed is later

293
00:15:54,760 --> 00:15:57,720
pushed through<font color="#CCCCCC"> to a</font>

294
00:15:59,270 --> 00:16:12,709
it's not<font color="#CCCCCC"> communication</font><font color="#E5E5E5"> flow yeah Oh with</font>

295
00:16:09,380 --> 00:16:14,330
<font color="#E5E5E5">wisp can you express everything with</font>

296
00:16:12,709 --> 00:16:21,619
wisp that you can express in<font color="#E5E5E5"> this</font>

297
00:16:14,330 --> 00:16:23,209
expression<font color="#CCCCCC"> yes you can also try</font><font color="#E5E5E5"> to let</font>

298
00:16:21,620 --> 00:16:26,600
it figure things out<font color="#CCCCCC"> for</font><font color="#E5E5E5"> you if you</font>

299
00:16:23,209 --> 00:16:29,930
<font color="#E5E5E5">don't really want to</font><font color="#CCCCCC"> specify how data</font>

300
00:16:26,600 --> 00:16:32,959
flows from one process<font color="#CCCCCC"> to the other by</font>

301
00:16:29,930 --> 00:16:36,469
simply by declaring inputs of a<font color="#CCCCCC"> and</font>

302
00:16:32,959 --> 00:16:39,829
output of<font color="#E5E5E5"> a and inputs of B and outputs</font>

303
00:16:36,470 --> 00:16:41,270
of<font color="#E5E5E5"> B you can simply line those up and</font>

304
00:16:39,830 --> 00:16:43,300
automatically connect this for some

305
00:16:41,270 --> 00:16:45,170
workflows this is the easier way<font color="#CCCCCC"> of</font>

306
00:16:43,300 --> 00:16:47,120
describing things sometimes<font color="#E5E5E5"> you don't</font>

307
00:16:45,170 --> 00:16:51,349
want<font color="#CCCCCC"> to know the details</font><font color="#E5E5E5"> want the system</font>

308
00:16:47,120 --> 00:16:54,529
<font color="#CCCCCC">to just figure</font><font color="#E5E5E5"> it out for you all right</font>

309
00:16:51,350 --> 00:16:56,620
this is an extension to<font color="#CCCCCC"> canoe geek so it</font>

310
00:16:54,529 --> 00:17:00,230
provides naturally a command

311
00:16:56,620 --> 00:17:03,770
<font color="#CCCCCC">subcommander geeks workflow which allows</font>

312
00:17:00,230 --> 00:17:06,349
you<font color="#CCCCCC"> to run workflows</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> to inspect</font>

313
00:17:03,770 --> 00:17:10,040
workflows<font color="#E5E5E5"> to to generate a nice</font>

314
00:17:06,349 --> 00:17:11,540
representation of the<font color="#E5E5E5"> workflow</font><font color="#CCCCCC"> there it</font>

315
00:17:10,040 --> 00:17:14,389
is not<font color="#CCCCCC"> a separate</font><font color="#E5E5E5"> tool right it</font>

316
00:17:11,540 --> 00:17:17,050
it came growing<font color="#CCCCCC"> a budding out</font><font color="#E5E5E5"> of geeks</font>

317
00:17:14,390 --> 00:17:17,050
<font color="#E5E5E5">if you will</font>

318
00:17:18,160 --> 00:17:24,319
the features that<font color="#E5E5E5"> it gains by being</font>

319
00:17:20,809 --> 00:17:26,928
embedded in geeks<font color="#E5E5E5"> as</font><font color="#CCCCCC"> a plenty</font><font color="#E5E5E5"> I didn't</font>

320
00:17:24,319 --> 00:17:28,940
have to write<font color="#CCCCCC"> any of this in</font><font color="#E5E5E5"> fact they</font>

321
00:17:26,929 --> 00:17:32,179
didn't<font color="#CCCCCC"> write most of it anyway this</font><font color="#E5E5E5"> is a</font>

322
00:17:28,940 --> 00:17:33,559
project I took over but reproducible

323
00:17:32,179 --> 00:17:36,800
packages for example is one thing that

324
00:17:33,559 --> 00:17:38,510
geeks provides the workflow language

325
00:17:36,800 --> 00:17:41,720
doesn't<font color="#CCCCCC"> have to do anything</font><font color="#E5E5E5"> to gain</font>

326
00:17:38,510 --> 00:17:45,050
access<font color="#E5E5E5"> to thousands of bid reproducible</font>

327
00:17:41,720 --> 00:17:47,420
packages<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is beautiful right it has</font>

328
00:17:45,050 --> 00:17:49,460
access<font color="#E5E5E5"> to a special form of expression</font>

329
00:17:47,420 --> 00:17:51,620
<font color="#E5E5E5">which is called a</font><font color="#CCCCCC"> G expression a geeks</font>

330
00:17:49,460 --> 00:17:57,470
expression if you<font color="#E5E5E5"> will that allows you</font>

331
00:17:51,620 --> 00:17:59,540
to more conveniently access packages

332
00:17:57,470 --> 00:18:01,700
from<font color="#E5E5E5"> within what looks like an S</font>

333
00:17:59,540 --> 00:18:05,990
expression so that's a<font color="#E5E5E5"> special case if</font>

334
00:18:01,700 --> 00:18:07,440
you know about geeks<font color="#E5E5E5"> this will make</font>

335
00:18:05,990 --> 00:18:10,140
<font color="#E5E5E5">sense to</font><font color="#CCCCCC"> you</font>

336
00:18:07,440 --> 00:18:11,880
container context as I said you geeks

337
00:18:10,140 --> 00:18:15,090
provides the ability<font color="#E5E5E5"> to be set up</font>

338
00:18:11,880 --> 00:18:17,760
containers<font color="#CCCCCC"> mound file systems in the</font>

339
00:18:15,090 --> 00:18:19,679
right locations the work for language

340
00:18:17,760 --> 00:18:21,210
games<font color="#E5E5E5"> this for free I'm gonna have to do</font>

341
00:18:19,680 --> 00:18:23,640
anything<font color="#E5E5E5"> to make</font><font color="#CCCCCC"> it happen</font>

342
00:18:21,210 --> 00:18:28,110
same with virtual machines right<font color="#CCCCCC"> geeks</font>

343
00:18:23,640 --> 00:18:31,290
can<font color="#E5E5E5"> build systems the workflow language</font>

344
00:18:28,110 --> 00:18:33,629
has this feature<font color="#E5E5E5"> this disposal workflow</font>

345
00:18:31,290 --> 00:18:38,190
bundles of having a work flow

346
00:18:33,630 --> 00:18:39,570
description locally<font color="#CCCCCC"> may</font><font color="#E5E5E5"> not be the most</font>

347
00:18:38,190 --> 00:18:41,580
convenient way<font color="#E5E5E5"> for other people to run</font>

348
00:18:39,570 --> 00:18:45,480
<font color="#E5E5E5">that workflow</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> Deb maybe they don't</font>

349
00:18:41,580 --> 00:18:47,429
have geeks for whatever reason so geeks

350
00:18:45,480 --> 00:18:49,200
provides a feature with which you can

351
00:18:47,430 --> 00:18:51,090
package<font color="#E5E5E5"> up the whole</font><font color="#CCCCCC"> environment and</font>

352
00:18:49,200 --> 00:18:55,860
create those infamous bundles<font color="#E5E5E5"> these</font>

353
00:18:51,090 --> 00:18:58,889
binary<font color="#E5E5E5"> blob bundles we can bundle up</font>

354
00:18:55,860 --> 00:19:03,360
workflows just like that and data

355
00:18:58,890 --> 00:19:05,400
caching<font color="#E5E5E5"> this is actually not directly a</font>

356
00:19:03,360 --> 00:19:08,429
feature<font color="#CCCCCC"> of geeks provide but geeks</font>

357
00:19:05,400 --> 00:19:10,080
provides<font color="#E5E5E5"> caching if you were for for</font>

358
00:19:08,430 --> 00:19:12,450
package build<font color="#E5E5E5"> because they are built</font>

359
00:19:10,080 --> 00:19:14,730
reproducibly<font color="#E5E5E5"> so we don't have to rebuild</font>

360
00:19:12,450 --> 00:19:16,320
packages when<font color="#E5E5E5"> there and none of the</font>

361
00:19:14,730 --> 00:19:18,690
inputs have changed<font color="#E5E5E5"> the same goes for</font>

362
00:19:16,320 --> 00:19:20,330
data<font color="#CCCCCC"> ID if you have</font><font color="#E5E5E5"> data files that</font>

363
00:19:18,690 --> 00:19:22,770
haven't<font color="#CCCCCC"> changed why would you have to</font>

364
00:19:20,330 --> 00:19:25,050
<font color="#E5E5E5">regenerate the output and if you already</font>

365
00:19:22,770 --> 00:19:26,840
<font color="#E5E5E5">have</font><font color="#CCCCCC"> the output file if</font><font color="#E5E5E5"> nothing of the</font>

366
00:19:25,050 --> 00:19:29,070
inputs none of the inputs have changed

367
00:19:26,840 --> 00:19:32,699
<font color="#E5E5E5">there's no point in rerunning this so</font>

368
00:19:29,070 --> 00:19:35,669
<font color="#E5E5E5">the you gain you gain casual being</font>

369
00:19:32,700 --> 00:19:37,620
embedded in scheme<font color="#E5E5E5"> a language known for</font>

370
00:19:35,670 --> 00:19:41,010
being a<font color="#E5E5E5"> good language</font><font color="#CCCCCC"> for writing</font>

371
00:19:37,620 --> 00:19:45,840
languages allows us to to simply add

372
00:19:41,010 --> 00:19:47,400
syntactic sugar<font color="#E5E5E5"> right we</font><font color="#CCCCCC"> gain</font><font color="#E5E5E5"> a big</font>

373
00:19:45,840 --> 00:19:49,879
chunk of syntactic<font color="#CCCCCC"> sugar which is</font>

374
00:19:47,400 --> 00:19:54,240
probably<font color="#CCCCCC"> not good</font><font color="#E5E5E5"> for you</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> wisp</font>

375
00:19:49,880 --> 00:19:57,630
but we can also embed<font color="#E5E5E5"> we can also embed</font>

376
00:19:54,240 --> 00:20:01,380
other processes or<font color="#E5E5E5"> our syntax for for</font>

377
00:19:57,630 --> 00:20:04,260
expressing graphs<font color="#E5E5E5"> and whatnot it also</font>

378
00:20:01,380 --> 00:20:06,450
allows you to<font color="#CCCCCC"> execute</font><font color="#E5E5E5"> these these</font>

379
00:20:04,260 --> 00:20:08,670
workflows<font color="#E5E5E5"> on HPC systems right there's</font>

380
00:20:06,450 --> 00:20:11,070
there's<font color="#E5E5E5"> grid engine execution and stuff</font>

381
00:20:08,670 --> 00:20:15,050
you<font color="#CCCCCC"> just have to specify</font><font color="#E5E5E5"> that you</font><font color="#CCCCCC"> want</font>

382
00:20:11,070 --> 00:20:18,560
to run this<font color="#E5E5E5"> workflow on HPC cluster and</font>

383
00:20:15,050 --> 00:20:18,560
since<font color="#E5E5E5"> time is up</font>

384
00:20:19,270 --> 00:20:26,629
right<font color="#CCCCCC"> I just leave this here for you you</font>

385
00:20:24,890 --> 00:20:29,510
can hook this up later<font color="#E5E5E5"> these slides go</font>

386
00:20:26,630 --> 00:20:31,430
up somewhere yeah<font color="#E5E5E5"> we've talked about all</font>

387
00:20:29,510 --> 00:20:33,230
of<font color="#CCCCCC"> this so this</font><font color="#E5E5E5"> is it</font>

388
00:20:31,430 --> 00:20:37,070
we have<font color="#E5E5E5"> grown a workflow language and</font>

389
00:20:33,230 --> 00:21:14,960
and we will see if<font color="#E5E5E5"> this if this was</font><font color="#CCCCCC"> a</font>

390
00:20:37,070 --> 00:21:17,540
<font color="#E5E5E5">good</font><font color="#CCCCCC"> idea yes the question is the origin</font>

391
00:21:14,960 --> 00:21:20,030
of this<font color="#CCCCCC"> workflow language is in</font><font color="#E5E5E5"> within</font>

392
00:21:17,540 --> 00:21:23,090
<font color="#E5E5E5">the context of bioinformatics</font>

393
00:21:20,030 --> 00:21:26,149
are there any workflows<font color="#CCCCCC"> that use this</font>

394
00:21:23,090 --> 00:21:30,590
language<font color="#E5E5E5"> yes yes they</font><font color="#CCCCCC"> are it actually</font>

395
00:21:26,150 --> 00:21:32,090
does work on<font color="#CCCCCC"> real-world</font><font color="#E5E5E5"> workflows</font><font color="#CCCCCC"> within</font>

396
00:21:30,590 --> 00:21:33,230
the context of<font color="#E5E5E5"> bioinformatics but this</font>

397
00:21:32,090 --> 00:21:35,270
doesn't<font color="#CCCCCC"> have to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> limited to</font>

398
00:21:33,230 --> 00:21:38,410
bioinformatics<font color="#E5E5E5"> bioinformatics is just</font>

399
00:21:35,270 --> 00:21:42,129
one weird case the one special<font color="#CCCCCC"> case</font><font color="#E5E5E5"> of</font>

400
00:21:38,410 --> 00:21:42,130
<font color="#E5E5E5">scientific computing</font><font color="#CCCCCC"> in general</font>

401
00:21:57,340 --> 00:22:04,459
<font color="#CCCCCC">what</font><font color="#E5E5E5"> is the relationship between geeks</font>

402
00:21:59,809 --> 00:22:09,289
and<font color="#CCCCCC"> nicks right</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> NYX was first geeks</font>

403
00:22:04,460 --> 00:22:11,120
were second<font color="#CCCCCC"> geeks is an implementation</font>

404
00:22:09,289 --> 00:22:15,379
of<font color="#E5E5E5"> the same ideas that were pioneered</font>

405
00:22:11,120 --> 00:22:17,629
and<font color="#CCCCCC"> NYX with the implementation of geeks</font>

406
00:22:15,380 --> 00:22:20,090
<font color="#E5E5E5">made a couple of different design</font>

407
00:22:17,630 --> 00:22:23,330
decisions and<font color="#E5E5E5"> their different approaches</font>

408
00:22:20,090 --> 00:22:27,260
to exactly<font color="#CCCCCC"> how</font><font color="#E5E5E5"> this core</font><font color="#CCCCCC"> idea is</font>

409
00:22:23,330 --> 00:22:30,110
implemented both projects face the<font color="#E5E5E5"> same</font>

410
00:22:27,260 --> 00:22:33,590
kind of challenges<font color="#CCCCCC"> so there's there's a</font>

411
00:22:30,110 --> 00:22:36,469
<font color="#CCCCCC">lot of collaboration between them in</font>

412
00:22:33,590 --> 00:22:38,600
fact we just had<font color="#E5E5E5"> a short conference</font>

413
00:22:36,470 --> 00:22:41,270
<font color="#CCCCCC">two-day</font><font color="#E5E5E5"> conference before for them where</font>

414
00:22:38,600 --> 00:22:46,459
<font color="#E5E5E5">Nick's folks were</font><font color="#CCCCCC"> we're present</font><font color="#E5E5E5"> because</font>

415
00:22:41,270 --> 00:22:51,280
this the problem space that we both

416
00:22:46,460 --> 00:22:51,280
occupier<font color="#E5E5E5"> is virtually the</font><font color="#CCCCCC"> same</font>

417
00:22:58,520 --> 00:23:02,829
[Applause]

