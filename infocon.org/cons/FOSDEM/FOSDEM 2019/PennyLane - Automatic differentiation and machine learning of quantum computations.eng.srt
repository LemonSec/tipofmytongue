1
00:00:04,779 --> 00:00:09,039
I thank you everyone<font color="#E5E5E5"> unfortunately my</font>

2
00:00:07,779 --> 00:00:11,680
colleague<font color="#CCCCCC"> Nathan couldn't</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> it say so</font>

3
00:00:09,039 --> 00:00:13,600
I'll be moonlighting as him<font color="#E5E5E5"> and so</font>

4
00:00:11,680 --> 00:00:15,400
<font color="#CCCCCC">Nathan is</font><font color="#E5E5E5"> the he's actually</font><font color="#CCCCCC"> a head of</font>

5
00:00:13,600 --> 00:00:18,160
quantum machine<font color="#CCCCCC"> learning</font><font color="#E5E5E5"> and software at</font>

6
00:00:15,400 --> 00:00:20,529
sound<font color="#CCCCCC"> do so</font><font color="#E5E5E5"> this was one</font><font color="#CCCCCC"> of his pet</font>

7
00:00:18,160 --> 00:00:21,519
projects and it's<font color="#E5E5E5"> about into something</font>

8
00:00:20,529 --> 00:00:26,740
really really cool<font color="#CCCCCC"> and I'm really</font>

9
00:00:21,519 --> 00:00:28,598
<font color="#CCCCCC">excited to talk about it's there so</font><font color="#E5E5E5"> I'll</font>

10
00:00:26,740 --> 00:00:29,589
just start<font color="#E5E5E5"> off introducing quantum</font>

11
00:00:28,599 --> 00:00:35,770
<font color="#E5E5E5">machine learning</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> in case people</font>

12
00:00:29,589 --> 00:00:37,540
<font color="#E5E5E5">aren't as familiar with it</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> quantum</font>

13
00:00:35,770 --> 00:00:40,510
machine<font color="#E5E5E5"> learning is currently taught as</font>

14
00:00:37,540 --> 00:00:43,900
one of the biggest advances we have with

15
00:00:40,510 --> 00:00:45,400
quantum computation<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is just a</font>

16
00:00:43,900 --> 00:00:46,780
so what I'm<font color="#CCCCCC"> showing here</font><font color="#E5E5E5"> is this is a</font>

17
00:00:45,400 --> 00:00:48,940
number of<font color="#E5E5E5"> papers</font><font color="#CCCCCC"> that mention</font><font color="#E5E5E5"> the</font>

18
00:00:46,780 --> 00:00:51,730
quantum machine<font color="#E5E5E5"> learning over</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> years</font>

19
00:00:48,940 --> 00:00:55,959
time<font color="#E5E5E5"> from 2013 to 2018 so you can see</font>

20
00:00:51,730 --> 00:01:00,160
<font color="#E5E5E5">just how rapidly this has grown</font><font color="#CCCCCC"> could be</font>

21
00:00:55,960 --> 00:01:01,810
hype<font color="#E5E5E5"> we don't believe it is</font><font color="#CCCCCC"> new advances</font>

22
00:01:00,160 --> 00:01:03,669
are being made every day<font color="#CCCCCC"> so these are</font>

23
00:01:01,810 --> 00:01:06,490
including papers uploaded to the archive

24
00:01:03,670 --> 00:01:09,730
plus papers published and<font color="#E5E5E5"> you can see</font>

25
00:01:06,490 --> 00:01:11,500
that<font color="#E5E5E5"> especially 2015 to 2018</font><font color="#CCCCCC"> there's a</font>

26
00:01:09,730 --> 00:01:16,020
massive<font color="#E5E5E5"> increase in theoretical results</font>

27
00:01:11,500 --> 00:01:16,020
relating to quantum machine<font color="#E5E5E5"> learning</font>

28
00:01:20,000 --> 00:01:24,560
and part of<font color="#E5E5E5"> it</font><font color="#CCCCCC"> is because</font><font color="#E5E5E5"> it turns out</font>

29
00:01:23,270 --> 00:01:27,410
quantum computers are<font color="#E5E5E5"> quite good</font><font color="#CCCCCC"> at it</font>

30
00:01:24,560 --> 00:01:29,450
<font color="#CCCCCC">so we're in a regime at the moment</font>

31
00:01:27,410 --> 00:01:31,610
<font color="#E5E5E5">called noisy intermediate scale quantum</font>

32
00:01:29,450 --> 00:01:33,980
<font color="#E5E5E5">computation where we're working with</font>

33
00:01:31,610 --> 00:01:36,230
devices<font color="#CCCCCC"> that don't</font><font color="#E5E5E5"> have error correction</font>

34
00:01:33,980 --> 00:01:39,790
<font color="#E5E5E5">like we do with classical computation</font><font color="#CCCCCC"> so</font>

35
00:01:36,230 --> 00:01:42,110
the device we're working with<font color="#E5E5E5"> are noisy</font>

36
00:01:39,790 --> 00:01:44,930
errors can<font color="#CCCCCC"> be introduced to the qubits</font>

37
00:01:42,110 --> 00:01:49,430
<font color="#CCCCCC">and the</font><font color="#E5E5E5"> Q modes</font><font color="#CCCCCC"> but what they're really</font>

38
00:01:44,930 --> 00:01:50,440
<font color="#E5E5E5">good at is problems like optimization</font>

39
00:01:49,430 --> 00:01:53,870
problems where<font color="#CCCCCC"> you don't necessarily</font>

40
00:01:50,440 --> 00:01:56,810
currently need the quantum error

41
00:01:53,870 --> 00:01:57,980
correction<font color="#CCCCCC"> so these are just a couple</font><font color="#E5E5E5"> of</font>

42
00:01:56,810 --> 00:02:01,040
<font color="#CCCCCC">things one computes a good app so</font>

43
00:01:57,980 --> 00:02:03,560
obviously a good at quantum physics<font color="#CCCCCC"> very</font>

44
00:02:01,040 --> 00:02:06,530
<font color="#E5E5E5">good at linear algebra</font><font color="#CCCCCC"> especially a</font>

45
00:02:03,560 --> 00:02:08,509
graph<font color="#E5E5E5"> problem so it's the work we do</font>

46
00:02:06,530 --> 00:02:10,699
it's a<font color="#E5E5E5"> do it's very easy to embed graphs</font>

47
00:02:08,509 --> 00:02:12,769
<font color="#E5E5E5">into our quantum circuits so graphs can</font>

48
00:02:10,699 --> 00:02:14,299
<font color="#E5E5E5">be embedded into just a collection of</font>

49
00:02:12,770 --> 00:02:16,280
beam splitters<font color="#CCCCCC"> and rotation gates which</font>

50
00:02:14,300 --> 00:02:18,980
are<font color="#CCCCCC"> really simple</font><font color="#E5E5E5"> to do in our quantum</font>

51
00:02:16,280 --> 00:02:27,200
photonics lab<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> very good at</font>

52
00:02:18,980 --> 00:02:28,700
sampling sampling problems so what we're

53
00:02:27,200 --> 00:02:31,000
doing<font color="#E5E5E5"> with quantum</font><font color="#CCCCCC"> machine learning with</font>

54
00:02:28,700 --> 00:02:32,959
quantum<font color="#E5E5E5"> computation essentially is we're</font>

55
00:02:31,000 --> 00:02:34,970
<font color="#E5E5E5">processing quantum</font><font color="#CCCCCC"> information so we're</font>

56
00:02:32,959 --> 00:02:38,030
processing vectors in a very highly a

57
00:02:34,970 --> 00:02:39,500
very high dimensional<font color="#E5E5E5"> vector space</font><font color="#CCCCCC"> and</font>

58
00:02:38,030 --> 00:02:42,110
this<font color="#E5E5E5"> is one of the connections to</font>

59
00:02:39,500 --> 00:02:44,510
quantum machine learning so when you're

60
00:02:42,110 --> 00:02:47,780
<font color="#E5E5E5">processing vectors in a very highly</font>

61
00:02:44,510 --> 00:02:50,420
<font color="#E5E5E5">dimensional vector space you start see a</font>

62
00:02:47,780 --> 00:02:53,330
familiarity with other machine<font color="#E5E5E5"> learning</font>

63
00:02:50,420 --> 00:02:56,510
techniques such as<font color="#E5E5E5"> kernel methods where</font>

64
00:02:53,330 --> 00:02:58,459
you're mapping<font color="#E5E5E5"> classical data to high</font>

65
00:02:56,510 --> 00:03:02,570
dimensional vector spaces<font color="#E5E5E5"> detect</font>

66
00:02:58,459 --> 00:03:05,030
features and do<font color="#CCCCCC"> classification and</font>

67
00:03:02,570 --> 00:03:07,250
indeed if we once we have fault

68
00:03:05,030 --> 00:03:09,290
tolerance<font color="#CCCCCC"> we'll see a massive</font>

69
00:03:07,250 --> 00:03:10,730
computational<font color="#E5E5E5"> speed up using quantum</font>

70
00:03:09,290 --> 00:03:11,929
computation for<font color="#E5E5E5"> a huge array of the</font>

71
00:03:10,730 --> 00:03:14,600
algorithms<font color="#CCCCCC"> that</font><font color="#E5E5E5"> have already been</font>

72
00:03:11,930 --> 00:03:17,060
proposed but<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> mean time as a new</font>

73
00:03:14,600 --> 00:03:19,400
we're thinking how we can<font color="#E5E5E5"> harness the</font>

74
00:03:17,060 --> 00:03:22,780
noisy devices we already have to do

75
00:03:19,400 --> 00:03:22,780
something<font color="#E5E5E5"> that we can't do classically</font>

76
00:03:24,250 --> 00:03:31,010
so in<font color="#E5E5E5"> classical machine learning we're</font>

77
00:03:27,680 --> 00:03:33,860
already used things like<font color="#E5E5E5"> GPUs TP use</font><font color="#CCCCCC"> a6</font>

78
00:03:31,010 --> 00:03:38,540
to speed up the<font color="#CCCCCC"> parts of the</font><font color="#E5E5E5"> computation</font>

79
00:03:33,860 --> 00:03:42,230
we know<font color="#E5E5E5"> too slow on CPUs</font><font color="#CCCCCC"> the same thing</font>

80
00:03:38,540 --> 00:03:44,239
can<font color="#CCCCCC"> be said of the current noisy contemn</font>

81
00:03:42,230 --> 00:03:45,769
devices we currently have<font color="#E5E5E5"> so we can</font>

82
00:03:44,240 --> 00:03:48,770
think<font color="#E5E5E5"> of them almost like QP use we can</font>

83
00:03:45,770 --> 00:03:50,900
<font color="#E5E5E5">use them to speed up computations that</font>

84
00:03:48,770 --> 00:03:55,520
<font color="#CCCCCC">we</font><font color="#E5E5E5"> want we can't do classically or too</font>

85
00:03:50,900 --> 00:03:57,680
slow classically<font color="#E5E5E5"> but at the same time we</font>

86
00:03:55,520 --> 00:03:59,390
can't let<font color="#CCCCCC"> go</font><font color="#E5E5E5"> of the classical processing</font>

87
00:03:57,680 --> 00:04:01,120
completely so<font color="#E5E5E5"> we have a hybrid</font>

88
00:03:59,390 --> 00:04:04,070
<font color="#E5E5E5">computational model where we're doing</font>

89
00:04:01,120 --> 00:04:06,200
lots of classical processing with a lot

90
00:04:04,070 --> 00:04:09,440
<font color="#E5E5E5">of offloading to quantum processing</font>

91
00:04:06,200 --> 00:04:12,070
units and this is really<font color="#E5E5E5"> exciting as you</font>

92
00:04:09,440 --> 00:04:14,390
saw from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> previous graph</font><font color="#CCCCCC"> qml is still</font>

93
00:04:12,070 --> 00:04:17,269
quite untested lots of new results

94
00:04:14,390 --> 00:04:19,880
coming<font color="#E5E5E5"> out so it's</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> exciting to</font><font color="#CCCCCC"> see</font>

95
00:04:17,269 --> 00:04:21,168
what we can do<font color="#E5E5E5"> and what new models might</font>

96
00:04:19,880 --> 00:04:23,150
come out of<font color="#E5E5E5"> quantum machine learning</font>

97
00:04:21,168 --> 00:04:25,299
<font color="#E5E5E5">even if these are models their quantum</font>

98
00:04:23,150 --> 00:04:30,169
inspired and we can do classically

99
00:04:25,300 --> 00:04:31,580
<font color="#CCCCCC">everything's currently open so I</font>

100
00:04:30,169 --> 00:04:32,810
<font color="#E5E5E5">mentioned</font><font color="#CCCCCC"> before these are some of</font><font color="#E5E5E5"> the</font>

101
00:04:31,580 --> 00:04:37,969
<font color="#E5E5E5">things currently being looked at in the</font>

102
00:04:32,810 --> 00:04:41,390
literature<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we have kernel methods so</font>

103
00:04:37,970 --> 00:04:43,310
using using quantum circuits<font color="#E5E5E5"> to embed</font>

104
00:04:41,390 --> 00:04:45,409
classical<font color="#E5E5E5"> data to encode classical data</font>

105
00:04:43,310 --> 00:04:47,840
and then doing quantum measurements

106
00:04:45,410 --> 00:04:49,340
which<font color="#E5E5E5"> are essentially linear algebra</font><font color="#CCCCCC"> and</font>

107
00:04:47,840 --> 00:04:50,750
inner products in a high dimensional

108
00:04:49,340 --> 00:04:52,609
<font color="#E5E5E5">vector space</font>

109
00:04:50,750 --> 00:04:54,110
things like Boltzmann machines and

110
00:04:52,610 --> 00:04:56,300
variational circuits have gone really

111
00:04:54,110 --> 00:04:58,070
<font color="#E5E5E5">big lately so variational circuits are</font>

112
00:04:56,300 --> 00:05:02,120
where we have<font color="#CCCCCC"> a quantum circuit that has</font>

113
00:04:58,070 --> 00:05:03,500
<font color="#CCCCCC">parameterised gates and this is a hard</font>

114
00:05:02,120 --> 00:05:04,700
<font color="#CCCCCC">coded circuit the only thing we're</font>

115
00:05:03,500 --> 00:05:07,130
<font color="#CCCCCC">allowed to varies the parameters and</font>

116
00:05:04,700 --> 00:05:09,590
<font color="#E5E5E5">perhaps the initial state</font><font color="#CCCCCC"> encoding and</font>

117
00:05:07,130 --> 00:05:11,930
what we do is we do classical machine

118
00:05:09,590 --> 00:05:14,270
<font color="#E5E5E5">learning so</font><font color="#CCCCCC"> we use a classical back</font>

119
00:05:11,930 --> 00:05:16,400
propagation loop using something like

120
00:05:14,270 --> 00:05:22,669
<font color="#CCCCCC">tensor flow or PI torch</font><font color="#E5E5E5"> to vary these</font>

121
00:05:16,400 --> 00:05:25,489
parameters and<font color="#E5E5E5"> work out the best the</font>

122
00:05:22,669 --> 00:05:27,530
best parameters to minimize or optimize

123
00:05:25,490 --> 00:05:28,580
the problem we're solving so for<font color="#E5E5E5"> those</font>

124
00:05:27,530 --> 00:05:30,109
<font color="#CCCCCC">of</font><font color="#E5E5E5"> you who saw the</font><font color="#CCCCCC"> strawberry fields</font>

125
00:05:28,580 --> 00:05:31,760
talk this<font color="#CCCCCC"> is what the</font><font color="#E5E5E5"> story field sense</font>

126
00:05:30,110 --> 00:05:33,890
<font color="#CCCCCC">where back end does it's a classical</font>

127
00:05:31,760 --> 00:05:36,710
machine learning loop around the quantum

128
00:05:33,890 --> 00:05:37,700
simulation disadvantages to this

129
00:05:36,710 --> 00:05:39,200
approach

130
00:05:37,700 --> 00:05:41,659
you're<font color="#E5E5E5"> simulating it classically is that</font>

131
00:05:39,200 --> 00:05:43,580
in order<font color="#CCCCCC"> to calculate</font><font color="#E5E5E5"> the gradients to</font>

132
00:05:41,660 --> 00:05:44,990
<font color="#CCCCCC">do the backpropagation you have to</font>

133
00:05:43,580 --> 00:05:47,090
simulate the quantum circuit again<font color="#E5E5E5"> and</font>

134
00:05:44,990 --> 00:05:48,590
so you're just<font color="#CCCCCC"> doing a huge number</font><font color="#E5E5E5"> of</font>

135
00:05:47,090 --> 00:05:50,330
quantum<font color="#CCCCCC"> simulations and loops to</font>

136
00:05:48,590 --> 00:05:52,099
calculate the cost functions calculate

137
00:05:50,330 --> 00:05:53,570
the gradients and you end<font color="#CCCCCC"> up doing</font>

138
00:05:52,100 --> 00:05:58,610
<font color="#E5E5E5">something there's massively massively</font>

139
00:05:53,570 --> 00:06:01,520
classically intractable so the thinking

140
00:05:58,610 --> 00:06:02,810
<font color="#E5E5E5">is can we avoid this mindset</font><font color="#CCCCCC"> of using</font>

141
00:06:01,520 --> 00:06:05,960
classical<font color="#E5E5E5"> machine learning techniques</font>

142
00:06:02,810 --> 00:06:08,210
<font color="#E5E5E5">with quantum simulations</font><font color="#CCCCCC"> and query</font><font color="#E5E5E5"> the</font>

143
00:06:05,960 --> 00:06:10,250
quantum devices<font color="#E5E5E5"> exactly to calculate</font>

144
00:06:08,210 --> 00:06:11,900
their quantum gradients<font color="#CCCCCC"> so that was the</font>

145
00:06:10,250 --> 00:06:16,370
main thinking that sort<font color="#E5E5E5"> of led to the</font>

146
00:06:11,900 --> 00:06:17,960
<font color="#CCCCCC">development to Penny Lane so just a</font>

147
00:06:16,370 --> 00:06:19,910
<font color="#E5E5E5">brief background into whenever I</font>

148
00:06:17,960 --> 00:06:21,409
mentioned the quantum neural network<font color="#E5E5E5"> so</font>

149
00:06:19,910 --> 00:06:23,570
this is<font color="#E5E5E5"> something we developed it's a do</font>

150
00:06:21,410 --> 00:06:25,160
and as<font color="#E5E5E5"> I do for those who missed the</font>

151
00:06:23,570 --> 00:06:27,260
<font color="#CCCCCC">first soak we do continuous variable</font>

152
00:06:25,160 --> 00:06:29,210
quantum<font color="#E5E5E5"> computation so we're working</font>

153
00:06:27,260 --> 00:06:31,550
<font color="#CCCCCC">with</font><font color="#E5E5E5"> continuous variables not discrete</font>

154
00:06:29,210 --> 00:06:33,080
qubit States and this lends itself

155
00:06:31,550 --> 00:06:37,180
really<font color="#E5E5E5"> nicely to quantum neural networks</font>

156
00:06:33,080 --> 00:06:37,180
where we want<font color="#E5E5E5"> to work with real values</font>

157
00:06:37,600 --> 00:06:42,980
so with qubits<font color="#CCCCCC"> working with a discrete</font>

158
00:06:41,000 --> 00:06:45,050
system<font color="#CCCCCC"> it's a bit more of a difficulty</font>

159
00:06:42,980 --> 00:06:47,630
you trying to embed the classical neural

160
00:06:45,050 --> 00:06:50,180
network into the system<font color="#CCCCCC"> there's an issue</font>

161
00:06:47,630 --> 00:06:51,830
<font color="#CCCCCC">with trying to binarize the continuous</font>

162
00:06:50,180 --> 00:06:53,420
<font color="#CCCCCC">output you</font><font color="#E5E5E5"> want into the discrete system</font>

163
00:06:51,830 --> 00:06:56,060
which<font color="#E5E5E5"> requires a huge number of qubits</font>

164
00:06:53,420 --> 00:06:57,590
<font color="#CCCCCC">depending on</font><font color="#E5E5E5"> your method there's are</font>

165
00:06:56,060 --> 00:06:59,540
issues with working out<font color="#E5E5E5"> the best way to</font>

166
00:06:57,590 --> 00:07:02,630
apply the nonlinear transformation<font color="#CCCCCC"> you</font>

167
00:06:59,540 --> 00:07:04,190
need in a<font color="#E5E5E5"> neural network layer so from</font>

168
00:07:02,630 --> 00:07:06,020
<font color="#E5E5E5">our thinking</font><font color="#CCCCCC"> cv quantum computers</font><font color="#E5E5E5"> are</font>

169
00:07:04,190 --> 00:07:14,270
almost<font color="#E5E5E5"> a natural platform for quantum</font>

170
00:07:06,020 --> 00:07:16,400
neural networks<font color="#CCCCCC"> and this is why so when</font>

171
00:07:14,270 --> 00:07:18,859
we have a interferometer in quantum

172
00:07:16,400 --> 00:07:19,969
photonics quantum optics<font color="#CCCCCC"> all we're</font>

173
00:07:18,860 --> 00:07:23,390
essentially doing is we're multiplying

174
00:07:19,970 --> 00:07:26,570
our continuous variable<font color="#E5E5E5"> state X by a</font>

175
00:07:23,390 --> 00:07:28,370
unitary<font color="#CCCCCC"> matrix so already with linear</font>

176
00:07:26,570 --> 00:07:30,770
interferometers<font color="#E5E5E5"> in quantum optics and</font>

177
00:07:28,370 --> 00:07:32,060
quantum photonics<font color="#CCCCCC"> we've already got</font>

178
00:07:30,770 --> 00:07:37,640
matrix multiplication<font color="#E5E5E5"> and continuous</font>

179
00:07:32,060 --> 00:07:39,050
<font color="#CCCCCC">variables we can multiply</font><font color="#E5E5E5"> by diagonal</font>

180
00:07:37,640 --> 00:07:40,640
matrices and<font color="#E5E5E5"> this is the squeezing</font>

181
00:07:39,050 --> 00:07:42,830
operation in quantum optics<font color="#E5E5E5"> and</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> V</font>

182
00:07:40,640 --> 00:07:44,479
quantum<font color="#E5E5E5"> computation</font><font color="#CCCCCC"> we can also</font>

183
00:07:42,830 --> 00:07:46,250
introduce it<font color="#CCCCCC"> to bias this is</font><font color="#E5E5E5"> also super</font>

184
00:07:44,480 --> 00:07:49,490
<font color="#CCCCCC">easy we just do a displacement</font><font color="#E5E5E5"> of the</font>

185
00:07:46,250 --> 00:07:50,630
continuous<font color="#CCCCCC"> variable State and finally</font>

186
00:07:49,490 --> 00:07:51,620
<font color="#CCCCCC">where</font><font color="#E5E5E5"> we want that non Gaussian</font>

187
00:07:50,630 --> 00:07:53,330
transformation on

188
00:07:51,620 --> 00:07:56,990
linear transformation to enable us to

189
00:07:53,330 --> 00:07:58,430
perform<font color="#E5E5E5"> the activation function</font><font color="#CCCCCC"> we</font>

190
00:07:56,990 --> 00:08:02,090
<font color="#E5E5E5">simply apply one</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> nonlinear</font>

191
00:07:58,430 --> 00:08:04,070
<font color="#E5E5E5">quantum photonics operations so for</font>

192
00:08:02,090 --> 00:08:06,560
those familiar<font color="#CCCCCC"> cur</font><font color="#E5E5E5"> gate or a cubic phase</font>

193
00:08:04,070 --> 00:08:10,040
gate<font color="#E5E5E5"> would be the</font><font color="#CCCCCC"> fire function in this</font>

194
00:08:06,560 --> 00:08:11,660
<font color="#CCCCCC">case so this</font><font color="#E5E5E5"> is what it looks like this</font>

195
00:08:10,040 --> 00:08:14,030
is using continuous variables and

196
00:08:11,660 --> 00:08:16,490
quantum optics gates to implement a

197
00:08:14,030 --> 00:08:19,400
single<font color="#E5E5E5"> layer of a quantum neural network</font>

198
00:08:16,490 --> 00:08:22,580
so we<font color="#CCCCCC"> have our</font><font color="#E5E5E5"> I'm just going to leave</font>

199
00:08:19,400 --> 00:08:23,810
the mandated<font color="#E5E5E5"> area for a split second we</font>

200
00:08:22,580 --> 00:08:25,849
have our<font color="#E5E5E5"> matrix multiplication</font>

201
00:08:23,810 --> 00:08:28,460
multiplying<font color="#E5E5E5"> by a diagonal matrix another</font>

202
00:08:25,850 --> 00:08:30,380
<font color="#CCCCCC">matrix multiplication adding a bias and</font>

203
00:08:28,460 --> 00:08:34,400
an activation function<font color="#CCCCCC"> and it</font><font color="#E5E5E5"> Maps</font>

204
00:08:30,380 --> 00:08:36,230
really really nicely<font color="#CCCCCC"> so this was all</font>

205
00:08:34,400 --> 00:08:38,689
theory that we developed there's a paper

206
00:08:36,230 --> 00:08:40,250
on<font color="#E5E5E5"> this I</font><font color="#CCCCCC"> think called a continuous</font>

207
00:08:38,690 --> 00:08:41,870
variable quantum neural networks up on

208
00:08:40,250 --> 00:08:44,630
the<font color="#E5E5E5"> archive so if you want more details</font>

209
00:08:41,870 --> 00:08:46,130
on this<font color="#CCCCCC"> feel</font><font color="#E5E5E5"> free to check</font><font color="#CCCCCC"> it out we</font>

210
00:08:44,630 --> 00:08:49,400
also have a github repository<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that</font>

211
00:08:46,130 --> 00:08:51,350
paper has a whole<font color="#E5E5E5"> bunch of toy examples</font>

212
00:08:49,400 --> 00:08:52,910
where we're using<font color="#E5E5E5"> Strawberry Fields and</font>

213
00:08:51,350 --> 00:08:55,040
tend to<font color="#CCCCCC"> flow back</font><font color="#E5E5E5"> in to see what we can</font>

214
00:08:52,910 --> 00:08:58,699
do using machine learning<font color="#E5E5E5"> and</font>

215
00:08:55,040 --> 00:09:02,780
variational circuits<font color="#E5E5E5"> stuff like learn</font>

216
00:08:58,700 --> 00:09:06,110
creating<font color="#CCCCCC"> Gann</font><font color="#E5E5E5"> to generate Tetris stick</font>

217
00:09:02,780 --> 00:09:07,430
shapes and learning particular<font color="#E5E5E5"> gates and</font>

218
00:09:06,110 --> 00:09:10,700
particular<font color="#CCCCCC"> states that</font><font color="#E5E5E5"> are hard to</font>

219
00:09:07,430 --> 00:09:13,089
<font color="#E5E5E5">generate normally so the code for</font><font color="#CCCCCC"> this</font>

220
00:09:10,700 --> 00:09:16,100
<font color="#CCCCCC">is all</font><font color="#E5E5E5"> I get up repository called</font>

221
00:09:13,090 --> 00:09:17,210
<font color="#CCCCCC">quantum learning I</font><font color="#E5E5E5"> think so feel free to</font>

222
00:09:16,100 --> 00:09:18,410
check<font color="#CCCCCC"> that</font><font color="#E5E5E5"> out if</font><font color="#CCCCCC"> you want to</font><font color="#E5E5E5"> actually</font>

223
00:09:17,210 --> 00:09:21,440
get<font color="#E5E5E5"> down and dirty and</font><font color="#CCCCCC"> play with the</font>

224
00:09:18,410 --> 00:09:24,050
code as I<font color="#E5E5E5"> was saying all these methods</font>

225
00:09:21,440 --> 00:09:26,480
require<font color="#E5E5E5"> a classical loop where you're</font>

226
00:09:24,050 --> 00:09:27,949
<font color="#E5E5E5">doing back propagation very</font>

227
00:09:26,480 --> 00:09:31,580
interactively<font color="#CCCCCC"> and we didn't</font><font color="#E5E5E5"> want to do</font>

228
00:09:27,950 --> 00:09:36,730
that<font color="#E5E5E5"> so that was the idea behind penny</font>

229
00:09:31,580 --> 00:09:39,020
<font color="#E5E5E5">lane so this is a picture of Liverpool</font>

230
00:09:36,730 --> 00:09:40,070
<font color="#CCCCCC">tying him with the theme</font><font color="#E5E5E5"> and I didn't</font>

231
00:09:39,020 --> 00:09:43,400
actually<font color="#E5E5E5"> know this so in the middle</font><font color="#CCCCCC"> of a</font>

232
00:09:40,070 --> 00:09:44,780
previous talk<font color="#E5E5E5"> I I had to stop in use</font>

233
00:09:43,400 --> 00:09:45,980
<font color="#CCCCCC">google</font><font color="#E5E5E5"> lens because everyone was asking</font>

234
00:09:44,780 --> 00:09:48,910
me what<font color="#CCCCCC"> the</font><font color="#E5E5E5"> picture was and I didn't</font>

235
00:09:45,980 --> 00:09:53,260
<font color="#E5E5E5">know and remarkably Google lens</font><font color="#CCCCCC"> knew so</font>

236
00:09:48,910 --> 00:09:53,260
I'm quite<font color="#CCCCCC"> impressed with that so</font>

237
00:09:54,440 --> 00:10:00,259
the exciting<font color="#E5E5E5"> thing about 2019 is we now</font>

238
00:09:58,129 --> 00:10:02,480
<font color="#CCCCCC">have all these noising to me it's Gale</font>

239
00:10:00,259 --> 00:10:05,209
<font color="#CCCCCC">quantum devices accessible</font><font color="#E5E5E5"> publicly so</font>

240
00:10:02,480 --> 00:10:06,649
<font color="#E5E5E5">Righetti has their</font><font color="#CCCCCC"> QCs which is now in</font>

241
00:10:05,209 --> 00:10:08,300
the public<font color="#CCCCCC"> based</font><font color="#E5E5E5"> off a couple of days</font>

242
00:10:06,649 --> 00:10:11,209
ago<font color="#E5E5E5"> so anyone can log in and request</font>

243
00:10:08,300 --> 00:10:13,008
time on their<font color="#E5E5E5"> qpu iBM has a queue</font>

244
00:10:11,209 --> 00:10:16,008
experience so you can log in and use the

245
00:10:13,009 --> 00:10:17,720
IBM<font color="#E5E5E5"> qx5 to do quantum optimization do</font>

246
00:10:16,009 --> 00:10:23,560
quantum computation<font color="#E5E5E5"> simulations or</font>

247
00:10:17,720 --> 00:10:25,850
natural quantum<font color="#CCCCCC"> Hardware right now and</font>

248
00:10:23,560 --> 00:10:27,529
when we were previously thinking about

249
00:10:25,850 --> 00:10:28,879
<font color="#E5E5E5">quantum neural networks we were using</font>

250
00:10:27,529 --> 00:10:30,740
the old<font color="#E5E5E5"> mentality where we have to</font>

251
00:10:28,879 --> 00:10:33,800
simulate<font color="#E5E5E5"> everything but that's not the</font>

252
00:10:30,740 --> 00:10:36,379
<font color="#E5E5E5">case so as I do we have one of</font><font color="#CCCCCC"> the best</font>

253
00:10:33,800 --> 00:10:38,229
<font color="#E5E5E5">quantum machine learning teams in the</font>

254
00:10:36,379 --> 00:10:43,069
world we think<font color="#CCCCCC"> we'd like</font><font color="#E5E5E5"> to think</font>

255
00:10:38,230 --> 00:10:44,000
<font color="#E5E5E5">regularly contributing to this field</font><font color="#CCCCCC"> so</font>

256
00:10:43,069 --> 00:10:45,920
what we want<font color="#E5E5E5"> to do is we're gonna</font>

257
00:10:44,000 --> 00:10:48,980
actually<font color="#CCCCCC"> use these intermediate</font><font color="#E5E5E5"> scale</font>

258
00:10:45,920 --> 00:10:52,639
quantum<font color="#CCCCCC"> devices to do back propagation</font>

259
00:10:48,980 --> 00:10:56,420
<font color="#E5E5E5">and gradient descent so that's what</font>

260
00:10:52,639 --> 00:10:58,310
we're gonna try do so and that's what we

261
00:10:56,420 --> 00:10:59,509
did<font color="#E5E5E5"> so we took the ideas we</font><font color="#CCCCCC"> like best</font>

262
00:10:58,310 --> 00:11:01,069
from<font color="#E5E5E5"> classical machine learning and we</font>

263
00:10:59,509 --> 00:11:07,069
ported them to work with<font color="#CCCCCC"> the quantum</font>

264
00:11:01,069 --> 00:11:08,899
devices<font color="#E5E5E5"> that we have now and it's fun</font>

265
00:11:07,069 --> 00:11:09,889
<font color="#CCCCCC">you can create</font><font color="#E5E5E5"> these models you</font><font color="#CCCCCC"> don't</font>

266
00:11:08,899 --> 00:11:11,600
know what they're<font color="#E5E5E5"> going to do you</font><font color="#CCCCCC"> know</font>

267
00:11:09,889 --> 00:11:13,009
<font color="#CCCCCC">what you'd like to optimize</font><font color="#E5E5E5"> and you can</font>

268
00:11:11,600 --> 00:11:14,389
play around<font color="#E5E5E5"> with</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> sometimes it works</font>

269
00:11:13,009 --> 00:11:16,220
sometimes it doesn't

270
00:11:14,389 --> 00:11:19,250
like normal machine<font color="#E5E5E5"> learning but we</font>

271
00:11:16,220 --> 00:11:24,740
can't get<font color="#E5E5E5"> to do that with with physical</font>

272
00:11:19,250 --> 00:11:25,880
quantum<font color="#CCCCCC"> hardware now and it's fun i</font><font color="#E5E5E5"> main</font>

273
00:11:24,740 --> 00:11:27,680
issue when we wanted<font color="#E5E5E5"> to build the</font>

274
00:11:25,880 --> 00:11:30,199
<font color="#CCCCCC">software to make</font><font color="#E5E5E5"> it easy for</font><font color="#CCCCCC"> everyone</font><font color="#E5E5E5"> to</font>

275
00:11:27,680 --> 00:11:32,479
<font color="#CCCCCC">access was that there's no</font><font color="#E5E5E5"> software</font>

276
00:11:30,199 --> 00:11:34,160
currently<font color="#E5E5E5"> available for automatic</font>

277
00:11:32,480 --> 00:11:35,870
<font color="#CCCCCC">differentiation of quantum computations</font>

278
00:11:34,160 --> 00:11:39,829
<font color="#CCCCCC">I mean sure you</font><font color="#E5E5E5"> can use</font><font color="#CCCCCC"> tensorflow or</font>

279
00:11:35,870 --> 00:11:40,939
<font color="#CCCCCC">pythor to</font><font color="#E5E5E5"> wrap a classical simulation</font>

280
00:11:39,829 --> 00:11:43,399
but we don't want to<font color="#E5E5E5"> do that</font><font color="#CCCCCC"> i quantum</font>

281
00:11:40,939 --> 00:11:45,199
simulation we<font color="#E5E5E5"> didn't want to do that so</font>

282
00:11:43,399 --> 00:11:46,759
before<font color="#CCCCCC"> we even</font><font color="#E5E5E5"> started building this</font>

283
00:11:45,199 --> 00:11:48,199
<font color="#E5E5E5">open source software package we had to</font>

284
00:11:46,759 --> 00:11:50,959
work out<font color="#E5E5E5"> how we automatically</font>

285
00:11:48,199 --> 00:11:52,490
differentiate quantum circuits<font color="#E5E5E5"> so we</font>

286
00:11:50,959 --> 00:11:54,378
want<font color="#CCCCCC"> a</font><font color="#E5E5E5"> process that scales naturally</font>

287
00:11:52,490 --> 00:11:55,730
with quantum hardware<font color="#CCCCCC"> if we have a</font>

288
00:11:54,379 --> 00:11:57,769
process<font color="#E5E5E5"> using quantum</font><font color="#CCCCCC"> hardware that</font>

289
00:11:55,730 --> 00:12:00,399
scales as badly<font color="#CCCCCC"> is doing a classical</font>

290
00:11:57,769 --> 00:12:03,769
simulation then there's no point<font color="#E5E5E5"> to it</font>

291
00:12:00,399 --> 00:12:06,680
<font color="#CCCCCC">so</font><font color="#E5E5E5"> this is what we wanted to do so this</font>

292
00:12:03,769 --> 00:12:08,210
<font color="#E5E5E5">is where we started</font><font color="#CCCCCC"> off this is a this</font>

293
00:12:06,680 --> 00:12:10,550
<font color="#CCCCCC">is basically our encapsulation</font>

294
00:12:08,210 --> 00:12:12,800
quantum circuits in<font color="#CCCCCC"> penny lane</font><font color="#E5E5E5"> so we</font>

295
00:12:10,550 --> 00:12:14,599
call this a<font color="#CCCCCC"> cue</font><font color="#E5E5E5"> note it's you can almost</font>

296
00:12:12,800 --> 00:12:16,040
think of it<font color="#E5E5E5"> like a black box inside this</font>

297
00:12:14,600 --> 00:12:18,740
<font color="#CCCCCC">keynote a</font><font color="#E5E5E5"> quantum computation is</font>

298
00:12:16,040 --> 00:12:20,930
happening<font color="#E5E5E5"> as input we</font><font color="#CCCCCC"> have a</font><font color="#E5E5E5"> stage</font><font color="#CCCCCC"> you</font>

299
00:12:18,740 --> 00:12:22,550
<font color="#E5E5E5">might want to be encoded we also have</font>

300
00:12:20,930 --> 00:12:24,529
parameters for the variational quantum

301
00:12:22,550 --> 00:12:27,800
circuits<font color="#E5E5E5"> so the cue</font><font color="#CCCCCC"> note is a fixed</font>

302
00:12:24,529 --> 00:12:30,610
circuit with a specified<font color="#CCCCCC"> number</font><font color="#E5E5E5"> of gates</font>

303
00:12:27,800 --> 00:12:32,270
applied in a particular<font color="#CCCCCC"> qubit Saku modes</font>

304
00:12:30,610 --> 00:12:33,620
<font color="#CCCCCC">some of those gates might have</font>

305
00:12:32,270 --> 00:12:36,770
parameters and you<font color="#E5E5E5"> can specify these</font>

306
00:12:33,620 --> 00:12:38,180
outside<font color="#E5E5E5"> and what we can do is we can</font>

307
00:12:36,770 --> 00:12:40,130
measure this quantum<font color="#E5E5E5"> note and we get an</font>

308
00:12:38,180 --> 00:12:43,069
expectation value so we sample this

309
00:12:40,130 --> 00:12:44,240
quantum circuit and we get a real value

310
00:12:43,070 --> 00:12:46,310
coming<font color="#CCCCCC"> out of it</font><font color="#E5E5E5"> so we have a</font>

311
00:12:44,240 --> 00:12:50,209
deterministic<font color="#CCCCCC"> note</font><font color="#E5E5E5"> that we can then use</font>

312
00:12:46,310 --> 00:12:52,160
<font color="#CCCCCC">for back propagation so you can almost</font>

313
00:12:50,209 --> 00:12:54,349
think of the circuit as a function<font color="#CCCCCC"> UFT</font>

314
00:12:52,160 --> 00:12:58,069
<font color="#E5E5E5">so there applies this variational</font>

315
00:12:54,350 --> 00:13:00,170
quantum circuit and for<font color="#E5E5E5"> those of</font><font color="#CCCCCC"> you</font>

316
00:12:58,070 --> 00:13:01,310
with a physics background<font color="#E5E5E5"> the output of</font>

317
00:13:00,170 --> 00:13:03,050
<font color="#E5E5E5">this quantum circuit is just the</font>

318
00:13:01,310 --> 00:13:05,649
expectation<font color="#E5E5E5"> value that you define so if</font>

319
00:13:03,050 --> 00:13:08,270
you have operator a hermitian<font color="#CCCCCC"> operator</font><font color="#E5E5E5"> B</font>

320
00:13:05,649 --> 00:13:09,770
then the output of this quantum circuit

321
00:13:08,270 --> 00:13:11,000
is just the expectation<font color="#E5E5E5"> value</font><font color="#CCCCCC"> of that</font>

322
00:13:09,770 --> 00:13:14,199
and<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> something that we can measure</font>

323
00:13:11,000 --> 00:13:17,450
now with quantum hardware if you use

324
00:13:14,200 --> 00:13:19,490
<font color="#CCCCCC">Righetti's QCs if you use IBM's Q</font>

325
00:13:17,450 --> 00:13:21,080
experience<font color="#E5E5E5"> you get back measurements and</font>

326
00:13:19,490 --> 00:13:26,029
expectation<font color="#CCCCCC"> values sampling the quantum</font>

327
00:13:21,080 --> 00:13:28,550
hardware<font color="#E5E5E5"> so we have our</font><font color="#CCCCCC"> model</font><font color="#E5E5E5"> of what we</font>

328
00:13:26,029 --> 00:13:31,100
want<font color="#E5E5E5"> to be able</font><font color="#CCCCCC"> to find the automatic</font>

329
00:13:28,550 --> 00:13:32,290
gradient of how do we do<font color="#E5E5E5"> it and it turns</font>

330
00:13:31,100 --> 00:13:34,459
<font color="#E5E5E5">out to</font><font color="#CCCCCC"> be</font>

331
00:13:32,290 --> 00:13:37,670
deceivingly simple<font color="#E5E5E5"> so this is what it</font>

332
00:13:34,459 --> 00:13:39,680
looks<font color="#CCCCCC"> like we're</font><font color="#E5E5E5"> taking</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> derivative</font>

333
00:13:37,670 --> 00:13:42,290
<font color="#CCCCCC">with respect to</font><font color="#E5E5E5"> theta</font><font color="#CCCCCC"> of that of the</font>

334
00:13:39,680 --> 00:13:44,750
expectation value and simply the exact

335
00:13:42,290 --> 00:13:47,510
same circuit with the parameter theta

336
00:13:44,750 --> 00:13:49,520
shifted forward by s<font color="#E5E5E5"> minus the exact</font>

337
00:13:47,510 --> 00:13:53,209
same circuit just with the parameter

338
00:13:49,520 --> 00:13:55,040
shifted again<font color="#E5E5E5"> multiplied by constant and</font>

339
00:13:53,209 --> 00:13:56,510
<font color="#E5E5E5">I want to emphasize one</font><font color="#CCCCCC"> thing this</font><font color="#E5E5E5"> is</font>

340
00:13:55,040 --> 00:14:00,310
<font color="#E5E5E5">not the finite difference formula so</font>

341
00:13:56,510 --> 00:14:04,970
this is exact<font color="#E5E5E5"> and this applies for</font><font color="#CCCCCC"> any</font>

342
00:14:00,310 --> 00:14:06,649
qubit<font color="#CCCCCC"> Q note where</font><font color="#E5E5E5"> we have gates with a</font>

343
00:14:04,970 --> 00:14:08,270
maximum<font color="#E5E5E5"> of two distinct eigen</font><font color="#CCCCCC"> values so</font>

344
00:14:06,649 --> 00:14:10,880
<font color="#CCCCCC">a</font><font color="#E5E5E5"> majority of the gates almost all the</font>

345
00:14:08,270 --> 00:14:16,310
gates we currently work with with<font color="#CCCCCC"> Pike</font>

346
00:14:10,880 --> 00:14:17,570
will or with<font color="#E5E5E5"> Q is</font><font color="#CCCCCC"> KITT so what we're</font>

347
00:14:16,310 --> 00:14:20,180
doing<font color="#E5E5E5"> here</font><font color="#CCCCCC"> is we're able to run the</font>

348
00:14:17,570 --> 00:14:22,160
circuit sample it get the value F and

349
00:14:20,180 --> 00:14:24,170
then<font color="#E5E5E5"> we just need to do a maximum</font>

350
00:14:22,160 --> 00:14:25,339
more<font color="#E5E5E5"> circuit evaluations on the exact</font>

351
00:14:24,170 --> 00:14:27,110
same circuit just with<font color="#E5E5E5"> different</font>

352
00:14:25,339 --> 00:14:35,569
parameters<font color="#CCCCCC"> and we have the gradient of</font>

353
00:14:27,110 --> 00:14:37,190
<font color="#CCCCCC">that circuit so just to drive the point</font>

354
00:14:35,569 --> 00:14:38,920
<font color="#CCCCCC">home that</font><font color="#E5E5E5"> this is not finite difference</font>

355
00:14:37,190 --> 00:14:43,220
this is not numerical differentiation

356
00:14:38,920 --> 00:14:44,719
<font color="#E5E5E5">this formula we derived is exact</font><font color="#CCCCCC"> and</font>

357
00:14:43,220 --> 00:14:46,310
there's no restriction on the shift<font color="#E5E5E5"> in</font>

358
00:14:44,720 --> 00:14:48,769
general what we want is that we<font color="#CCCCCC"> want a</font>

359
00:14:46,310 --> 00:14:52,219
macroscopic shift so<font color="#E5E5E5"> we want s</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be a</font>

360
00:14:48,769 --> 00:14:55,879
value like<font color="#E5E5E5"> 1 or PI or</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> so s is not an</font>

361
00:14:52,220 --> 00:14:57,649
infinitesimal quantity<font color="#CCCCCC"> the reason we</font>

362
00:14:55,879 --> 00:14:59,449
want<font color="#CCCCCC"> this maximum shift is because we</font>

363
00:14:57,649 --> 00:15:00,889
don't<font color="#CCCCCC"> want to be in the regime</font><font color="#E5E5E5"> of noise</font>

364
00:14:59,449 --> 00:15:03,399
because<font color="#CCCCCC"> we're working with noisy devices</font>

365
00:15:00,889 --> 00:15:06,170
at the moment we want<font color="#E5E5E5"> to be sampling at</font>

366
00:15:03,399 --> 00:15:08,750
locations that<font color="#CCCCCC"> are significantly far</font>

367
00:15:06,170 --> 00:15:11,060
away that<font color="#E5E5E5"> we know that noise</font><font color="#CCCCCC"> and number</font>

368
00:15:08,750 --> 00:15:12,439
<font color="#E5E5E5">of samples aren't an issue if we're</font>

369
00:15:11,060 --> 00:15:15,469
working with finite differences which

370
00:15:12,439 --> 00:15:16,899
looks deceptively similar<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's</font>

371
00:15:15,470 --> 00:15:19,310
<font color="#E5E5E5">confused a lot of us at the time when</font><font color="#CCCCCC"> we</font>

372
00:15:16,899 --> 00:15:21,019
as we were<font color="#E5E5E5"> writing the paper we had I</font>

373
00:15:19,310 --> 00:15:23,869
think notes in the<font color="#E5E5E5"> sidebar</font><font color="#CCCCCC"> that kept</font>

374
00:15:21,019 --> 00:15:24,970
<font color="#CCCCCC">saying no this</font><font color="#E5E5E5"> is not finite difference</font>

375
00:15:23,870 --> 00:15:27,380
I think<font color="#CCCCCC"> you wrote</font><font color="#E5E5E5"> the wrong thing here</font>

376
00:15:24,970 --> 00:15:29,360
<font color="#E5E5E5">so</font><font color="#CCCCCC"> finite</font><font color="#E5E5E5"> difference only an</font>

377
00:15:27,380 --> 00:15:31,939
approximation<font color="#E5E5E5"> requires that H is small</font>

378
00:15:29,360 --> 00:15:33,319
or infinitesimal quantity and it's

379
00:15:31,939 --> 00:15:34,759
subject<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the quirks of numerical</font>

380
00:15:33,319 --> 00:15:36,800
differentiation so those<font color="#CCCCCC"> of you who've</font>

381
00:15:34,759 --> 00:15:38,329
<font color="#CCCCCC">done numerical differentiation before</font>

382
00:15:36,800 --> 00:15:41,209
<font color="#E5E5E5">and know that it's sometimes</font><font color="#CCCCCC"> can be a</font>

383
00:15:38,329 --> 00:15:44,779
<font color="#CCCCCC">hassle</font><font color="#E5E5E5"> if you're</font><font color="#CCCCCC"> working with a</font><font color="#E5E5E5"> system</font>

384
00:15:41,209 --> 00:15:47,268
<font color="#CCCCCC">that's significantly stiff then you have</font>

385
00:15:44,779 --> 00:15:48,589
stability<font color="#E5E5E5"> issues</font><font color="#CCCCCC"> those are so rounding</font>

386
00:15:47,269 --> 00:15:51,800
error<font color="#E5E5E5"> precision</font><font color="#CCCCCC"> they're a truncation</font>

387
00:15:48,589 --> 00:15:53,800
<font color="#E5E5E5">error and specifically for the quantum</font>

388
00:15:51,800 --> 00:15:56,240
<font color="#E5E5E5">devices we</font><font color="#CCCCCC"> have now which annoys</font><font color="#E5E5E5"> e</font>

389
00:15:53,800 --> 00:15:58,550
reducing H which in classical

390
00:15:56,240 --> 00:15:59,509
<font color="#E5E5E5">classically and ideally</font><font color="#CCCCCC"> would reduce the</font>

391
00:15:58,550 --> 00:16:01,910
error in your system could<font color="#CCCCCC"> actually</font>

392
00:15:59,509 --> 00:16:03,500
<font color="#E5E5E5">increase the error in your system</font><font color="#CCCCCC"> do see</font>

393
00:16:01,910 --> 00:16:10,250
being swamped by noise<font color="#CCCCCC"> so I'll explain</font>

394
00:16:03,500 --> 00:16:12,470
that<font color="#CCCCCC"> briefly</font><font color="#E5E5E5"> here so this is what so</font>

395
00:16:10,250 --> 00:16:14,110
this is<font color="#E5E5E5"> just a plot of the expectation</font>

396
00:16:12,470 --> 00:16:16,730
value<font color="#CCCCCC"> of your Q nodes or quantum circuit</font>

397
00:16:14,110 --> 00:16:20,389
for different parameter<font color="#CCCCCC"> values of that</font>

398
00:16:16,730 --> 00:16:23,990
quantum circuit and the<font color="#CCCCCC"> gashing curves</font>

399
00:16:20,389 --> 00:16:25,459
represent the<font color="#CCCCCC"> represent the distribution</font>

400
00:16:23,990 --> 00:16:27,470
<font color="#CCCCCC">that we're sampling from when we're</font>

401
00:16:25,459 --> 00:16:28,790
<font color="#E5E5E5">sampling from that quantum device simply</font>

402
00:16:27,470 --> 00:16:32,569
<font color="#E5E5E5">because we're restricted to a finite</font>

403
00:16:28,790 --> 00:16:34,130
number<font color="#CCCCCC"> of samples and</font><font color="#E5E5E5"> if H is small so</font>

404
00:16:32,569 --> 00:16:35,839
we're trying<font color="#E5E5E5"> to reduce the area in a</font>

405
00:16:34,130 --> 00:16:39,320
numerical finite difference approach

406
00:16:35,840 --> 00:16:41,060
we end up<font color="#E5E5E5"> with for instance</font><font color="#CCCCCC"> you could</font>

407
00:16:39,320 --> 00:16:42,940
sample<font color="#E5E5E5"> from the wrong part of the curve</font>

408
00:16:41,060 --> 00:16:44,750
and end up with a numerical

409
00:16:42,940 --> 00:16:48,230
<font color="#E5E5E5">differentiation value which is</font>

410
00:16:44,750 --> 00:16:49,670
completely<font color="#E5E5E5"> off-base so this is numerical</font>

411
00:16:48,230 --> 00:16:52,400
differentiation finite differences and

412
00:16:49,670 --> 00:16:56,360
<font color="#E5E5E5">this is not what we're</font><font color="#CCCCCC"> doing we're doing</font>

413
00:16:52,400 --> 00:16:59,620
<font color="#CCCCCC">this so</font><font color="#E5E5E5"> we in our parameters shift</font>

414
00:16:56,360 --> 00:17:03,880
formula<font color="#CCCCCC"> we make sure that s is</font>

415
00:16:59,620 --> 00:17:03,880
macroscopic and<font color="#E5E5E5"> large enough that</font><font color="#CCCCCC"> we're</font>

416
00:17:04,060 --> 00:17:08,540
we're not<font color="#E5E5E5"> impacted by</font><font color="#CCCCCC"> the finite</font>

417
00:17:06,140 --> 00:17:10,069
sampling of our quantum device<font color="#E5E5E5"> so this</font>

418
00:17:08,540 --> 00:17:13,220
<font color="#CCCCCC">is kind</font><font color="#E5E5E5"> of it looks like</font><font color="#CCCCCC"> a simple</font>

419
00:17:10,069 --> 00:17:14,930
<font color="#E5E5E5">formula but it's it's like a four-page</font>

420
00:17:13,220 --> 00:17:17,180
derivation we have to look at gates that

421
00:17:14,930 --> 00:17:18,949
only<font color="#E5E5E5"> include distinct</font><font color="#CCCCCC"> eigen values to</font>

422
00:17:17,180 --> 00:17:20,839
<font color="#E5E5E5">distinct</font><font color="#CCCCCC"> eigen values if the quantum</font>

423
00:17:18,949 --> 00:17:22,010
gates don't then we have to<font color="#E5E5E5"> consider a</font>

424
00:17:20,839 --> 00:17:25,760
<font color="#E5E5E5">different approach where we include in</font>

425
00:17:22,010 --> 00:17:27,500
<font color="#CCCCCC">siller's and also it</font><font color="#E5E5E5"> generalizes to both</font>

426
00:17:25,760 --> 00:17:31,129
the<font color="#E5E5E5"> qubit model and the continuous</font>

427
00:17:27,500 --> 00:17:32,150
<font color="#CCCCCC">variable q mode model so once we had</font>

428
00:17:31,130 --> 00:17:33,680
this formula we<font color="#CCCCCC"> realized</font><font color="#E5E5E5"> we had</font>

429
00:17:32,150 --> 00:17:35,240
<font color="#E5E5E5">something nice and we wanted to be able</font>

430
00:17:33,680 --> 00:17:37,280
<font color="#E5E5E5">to write a software tool around it</font><font color="#CCCCCC"> that</font>

431
00:17:35,240 --> 00:17:39,920
<font color="#CCCCCC">allows everyone</font><font color="#E5E5E5"> to use it so just to</font>

432
00:17:37,280 --> 00:17:41,090
just<font color="#CCCCCC"> to drive the point home this</font><font color="#E5E5E5"> is</font>

433
00:17:39,920 --> 00:17:42,350
very similar<font color="#E5E5E5"> to something</font><font color="#CCCCCC"> that you see</font>

434
00:17:41,090 --> 00:17:43,850
<font color="#CCCCCC">every day in maths where if you have a</font>

435
00:17:42,350 --> 00:17:47,149
sine function the<font color="#CCCCCC"> derivative of that</font><font color="#E5E5E5"> is</font>

436
00:17:43,850 --> 00:17:48,800
just cos and you can<font color="#CCCCCC"> actually write the</font>

437
00:17:47,150 --> 00:17:50,960
COS function in terms of two<font color="#E5E5E5"> sine</font>

438
00:17:48,800 --> 00:17:54,710
function<font color="#CCCCCC"> shifted by PI in four divided</font>

439
00:17:50,960 --> 00:17:56,330
<font color="#E5E5E5">by</font><font color="#CCCCCC"> root</font><font color="#E5E5E5"> 2 so</font><font color="#CCCCCC"> we're use</font><font color="#E5E5E5"> it we're sort of</font>

440
00:17:54,710 --> 00:17:59,240
<font color="#E5E5E5">making use of the same maths at play</font>

441
00:17:56,330 --> 00:18:02,949
here<font color="#E5E5E5"> to find the automatic with the</font>

442
00:17:59,240 --> 00:18:02,950
analytic gradient of a quantum circuit

443
00:18:03,130 --> 00:18:10,270
so the parameter shifts are all in a

444
00:18:05,690 --> 00:18:16,250
<font color="#E5E5E5">different form and as I was saying this</font>

445
00:18:10,270 --> 00:18:19,040
<font color="#E5E5E5">this applies to CV methods as well</font><font color="#CCCCCC"> this</font>

446
00:18:16,250 --> 00:18:21,040
<font color="#CCCCCC">is just a continuous variable parameter</font>

447
00:18:19,040 --> 00:18:23,810
shift rule so if you have phase<font color="#CCCCCC"> rotation</font>

448
00:18:21,040 --> 00:18:25,399
you shift by PI on<font color="#CCCCCC"> tune divided by</font><font color="#E5E5E5"> half</font>

449
00:18:23,810 --> 00:18:26,780
if you<font color="#E5E5E5"> have squeezing and you want to</font>

450
00:18:25,400 --> 00:18:29,540
work<font color="#E5E5E5"> out</font><font color="#CCCCCC"> the derivative of that you</font>

451
00:18:26,780 --> 00:18:31,160
shift by s<font color="#CCCCCC"> and</font><font color="#E5E5E5"> s</font><font color="#CCCCCC"> is a free</font><font color="#E5E5E5"> Valley you</font>

452
00:18:29,540 --> 00:18:33,230
could you want<font color="#E5E5E5"> it to be large enough so</font>

453
00:18:31,160 --> 00:18:34,340
you're not impacted by noise but not<font color="#E5E5E5"> too</font>

454
00:18:33,230 --> 00:18:36,440
large that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have to introduce too</font>

455
00:18:34,340 --> 00:18:39,350
much energy<font color="#E5E5E5"> into the system</font><font color="#CCCCCC"> and then you</font>

456
00:18:36,440 --> 00:18:43,760
just divide by one<font color="#CCCCCC"> onto</font><font color="#E5E5E5"> shyness so this</font>

457
00:18:39,350 --> 00:18:45,530
generalizes across<font color="#CCCCCC"> CV and</font><font color="#E5E5E5"> across across</font>

458
00:18:43,760 --> 00:18:47,049
qubit gates sets we<font color="#CCCCCC"> have we currently</font>

459
00:18:45,530 --> 00:18:49,539
work with<font color="#E5E5E5"> so</font><font color="#CCCCCC"> to</font>

460
00:18:47,049 --> 00:18:52,600
a really nice<font color="#E5E5E5"> property to find the</font>

461
00:18:49,539 --> 00:18:54,970
gradients of quantum circuits<font color="#CCCCCC"> one thing</font>

462
00:18:52,600 --> 00:18:56,860
I will note though<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> we currently</font>

463
00:18:54,970 --> 00:18:59,590
don't have a efficient<font color="#E5E5E5"> parameter shipper</font>

464
00:18:56,860 --> 00:19:03,820
<font color="#E5E5E5">or for non Gaussian</font><font color="#CCCCCC"> CV gates</font><font color="#E5E5E5"> so the co</font>

465
00:18:59,590 --> 00:19:07,199
gate and the cubic phase gate<font color="#CCCCCC"> there</font><font color="#E5E5E5"> is a</font>

466
00:19:03,820 --> 00:19:09,309
parameter shift rule but it requires

467
00:19:07,200 --> 00:19:11,739
exponential<font color="#CCCCCC"> amounts of</font><font color="#E5E5E5"> memory to compute</font>

468
00:19:09,309 --> 00:19:13,539
so<font color="#E5E5E5"> in CV at the moment were restricted</font>

469
00:19:11,739 --> 00:19:16,419
to<font color="#CCCCCC"> gashing gates</font><font color="#E5E5E5"> but we're still working</font>

470
00:19:13,539 --> 00:19:19,210
on expanding<font color="#E5E5E5"> that efficiently to non</font>

471
00:19:16,419 --> 00:19:20,799
gashing gates so the cool thing<font color="#CCCCCC"> about</font>

472
00:19:19,210 --> 00:19:21,700
this approach is<font color="#E5E5E5"> it's completely</font>

473
00:19:20,799 --> 00:19:25,509
Hardware agnostic

474
00:19:21,700 --> 00:19:26,799
so say we want<font color="#E5E5E5"> to make you so at the</font>

475
00:19:25,509 --> 00:19:27,970
<font color="#E5E5E5">moment we have various quantum hardware</font>

476
00:19:26,799 --> 00:19:29,320
companies that have different<font color="#CCCCCC"> devices</font>

477
00:19:27,970 --> 00:19:32,679
and<font color="#CCCCCC"> each of these devices might be</font>

478
00:19:29,320 --> 00:19:33,759
suited for a<font color="#CCCCCC"> specific task</font><font color="#E5E5E5"> and what we</font>

479
00:19:32,679 --> 00:19:35,529
want to be able<font color="#E5E5E5"> to do is we want to be</font>

480
00:19:33,759 --> 00:19:37,659
able to<font color="#E5E5E5"> use all these devices</font><font color="#CCCCCC"> in one</font>

481
00:19:35,529 --> 00:19:39,369
computational model<font color="#E5E5E5"> as well as classical</font>

482
00:19:37,659 --> 00:19:41,679
processing and so what we<font color="#E5E5E5"> can do in</font>

483
00:19:39,369 --> 00:19:44,080
<font color="#E5E5E5">Penny Lane is we can do that you have</font>

484
00:19:41,679 --> 00:19:47,019
your<font color="#E5E5E5"> Q nodes here in green so for</font>

485
00:19:44,080 --> 00:19:49,239
<font color="#E5E5E5">instance you</font><font color="#CCCCCC"> have a qubit</font><font color="#E5E5E5"> one there and</font>

486
00:19:47,019 --> 00:19:50,649
on the very<font color="#E5E5E5"> left you have a continuous</font>

487
00:19:49,239 --> 00:19:53,200
<font color="#E5E5E5">variable one including a beam splitter</font>

488
00:19:50,649 --> 00:19:56,709
<font color="#CCCCCC">so we have both paradigms</font><font color="#E5E5E5"> of quantum</font>

489
00:19:53,200 --> 00:20:00,129
<font color="#CCCCCC">computation we also have classical</font>

490
00:19:56,710 --> 00:20:02,470
processing in yellow so these are these

491
00:20:00,129 --> 00:20:05,109
classical nodes as we call them<font color="#CCCCCC"> just use</font>

492
00:20:02,470 --> 00:20:06,519
numpy functions in Python<font color="#E5E5E5"> and we're</font>

493
00:20:05,109 --> 00:20:09,519
using a special<font color="#CCCCCC"> wrap</font><font color="#E5E5E5"> to version</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> non</font>

494
00:20:06,519 --> 00:20:11,499
<font color="#E5E5E5">PI forked from auto</font><font color="#CCCCCC"> grab and that allows</font>

495
00:20:09,519 --> 00:20:13,210
us<font color="#E5E5E5"> to keep</font><font color="#CCCCCC"> track of the gradient</font>

496
00:20:11,499 --> 00:20:14,799
classically when we get to a quantum

497
00:20:13,210 --> 00:20:18,399
node we apply the parameter shift rule

498
00:20:14,799 --> 00:20:22,119
we do the chain<font color="#CCCCCC"> rule we do</font><font color="#E5E5E5"> parameter</font>

499
00:20:18,399 --> 00:20:23,678
<font color="#E5E5E5">fan-out</font><font color="#CCCCCC"> and we do the product</font><font color="#E5E5E5"> rule all</font>

500
00:20:22,119 --> 00:20:25,269
automatically<font color="#E5E5E5"> so you just construct your</font>

501
00:20:23,679 --> 00:20:27,249
circuit using pet<font color="#CCCCCC"> your model using Penny</font>

502
00:20:25,269 --> 00:20:28,899
<font color="#CCCCCC">Lane do as much numpy classical</font>

503
00:20:27,249 --> 00:20:31,840
processing it uses many<font color="#E5E5E5"> quantum devices</font>

504
00:20:28,899 --> 00:20:33,279
<font color="#E5E5E5">you want in any combination</font><font color="#CCCCCC"> and will</font>

505
00:20:31,840 --> 00:20:40,019
control the back propagation for you

506
00:20:33,279 --> 00:20:44,139
with analytic gradients everywhere so

507
00:20:40,019 --> 00:20:45,970
that's<font color="#CCCCCC"> Penny Lane it's available on we</font>

508
00:20:44,139 --> 00:20:48,580
on github<font color="#CCCCCC"> so please check</font><font color="#E5E5E5"> out our github</font>

509
00:20:45,970 --> 00:20:50,710
<font color="#E5E5E5">page we have extensive documentation</font>

510
00:20:48,580 --> 00:20:52,830
<font color="#CCCCCC">where we go through</font><font color="#E5E5E5"> various</font><font color="#CCCCCC"> tutorials</font>

511
00:20:50,710 --> 00:20:55,119
and I'll get<font color="#CCCCCC"> to them</font><font color="#E5E5E5"> a bit later but</font>

512
00:20:52,830 --> 00:20:56,918
we're very<font color="#CCCCCC"> excited by this because you</font>

513
00:20:55,119 --> 00:20:59,859
can now train a quantum computer<font color="#CCCCCC"> the</font>

514
00:20:56,919 --> 00:21:00,880
same way you train<font color="#E5E5E5"> a neural network</font><font color="#CCCCCC"> it's</font>

515
00:20:59,859 --> 00:21:03,580
designed<font color="#E5E5E5"> to scale</font>

516
00:21:00,880 --> 00:21:07,600
quantum computers<font color="#CCCCCC"> grow in power</font><font color="#E5E5E5"> and so</font>

517
00:21:03,580 --> 00:21:12,429
it's compatible with Zhang zoo IBM<font color="#CCCCCC"> we</font>

518
00:21:07,600 --> 00:21:15,689
getting Google platforms<font color="#E5E5E5"> so we have a</font>

519
00:21:12,430 --> 00:21:17,770
plug-in<font color="#E5E5E5"> interface for Penny Lane so it's</font>

520
00:21:15,690 --> 00:21:19,120
with the Penny Lane framework we're

521
00:21:17,770 --> 00:21:21,040
keeping track<font color="#CCCCCC"> of the gradients for</font><font color="#E5E5E5"> you</font>

522
00:21:19,120 --> 00:21:23,679
but we<font color="#E5E5E5"> don't care how you applied the</font>

523
00:21:21,040 --> 00:21:25,180
the implement the gates<font color="#E5E5E5"> so we have</font>

524
00:21:23,680 --> 00:21:29,260
various plugins we have plugins<font color="#E5E5E5"> for</font>

525
00:21:25,180 --> 00:21:33,850
strawberry fields plugins for IBM<font color="#CCCCCC"> cue s</font>

526
00:21:29,260 --> 00:21:35,890
kit<font color="#E5E5E5"> plugins for well we're in</font><font color="#CCCCCC"> the late</font>

527
00:21:33,850 --> 00:21:38,379
stages of<font color="#E5E5E5"> our</font><font color="#CCCCCC"> PI cool</font><font color="#E5E5E5"> plugin I'll show</font>

528
00:21:35,890 --> 00:21:39,730
you a brief demo today<font color="#E5E5E5"> but I think at</font>

529
00:21:38,380 --> 00:21:41,860
current stage it will<font color="#E5E5E5"> be released</font>

530
00:21:39,730 --> 00:21:46,960
publicly<font color="#E5E5E5"> on Monday so please look</font><font color="#CCCCCC"> out</font>

531
00:21:41,860 --> 00:21:50,050
<font color="#CCCCCC">for that that's really exciting it's</font>

532
00:21:46,960 --> 00:21:50,680
<font color="#E5E5E5">also the PI</font><font color="#CCCCCC"> social I find that when I</font>

533
00:21:50,050 --> 00:21:52,720
give this talk

534
00:21:50,680 --> 00:21:54,010
<font color="#E5E5E5">it can be very divisive to say it's the</font>

535
00:21:52,720 --> 00:22:00,400
tense flow of quantum<font color="#CCCCCC"> computation so</font>

536
00:21:54,010 --> 00:22:01,600
I've got this<font color="#E5E5E5"> sliders</font><font color="#CCCCCC"> back up so this</font><font color="#E5E5E5"> is</font>

537
00:22:00,400 --> 00:22:03,370
what your average Penny Lane program

538
00:22:01,600 --> 00:22:05,139
looks like<font color="#E5E5E5"> so we try to so this</font><font color="#CCCCCC"> is</font>

539
00:22:03,370 --> 00:22:06,639
<font color="#E5E5E5">another level of abstraction above all</font>

540
00:22:05,140 --> 00:22:09,790
the existing quantum computing

541
00:22:06,640 --> 00:22:11,290
frameworks so because it's Hardware

542
00:22:09,790 --> 00:22:14,050
agnostic we want to make it really<font color="#CCCCCC"> easy</font>

543
00:22:11,290 --> 00:22:16,360
to<font color="#E5E5E5"> swap devices in and out so at the</font>

544
00:22:14,050 --> 00:22:18,100
beginning<font color="#E5E5E5"> you define your device in</font><font color="#CCCCCC"> this</font>

545
00:22:16,360 --> 00:22:19,479
<font color="#CCCCCC">case we're just using a default qubit</font>

546
00:22:18,100 --> 00:22:22,240
<font color="#CCCCCC">simulator that</font><font color="#E5E5E5"> ships with Penny Lane but</font>

547
00:22:19,480 --> 00:22:25,750
<font color="#E5E5E5">you could replace that with for instance</font>

548
00:22:22,240 --> 00:22:27,700
<font color="#CCCCCC">forest dot</font><font color="#E5E5E5"> qvm to use the forest Quantum</font>

549
00:22:25,750 --> 00:22:31,240
virtual machine<font color="#E5E5E5"> forest qpu to use the</font>

550
00:22:27,700 --> 00:22:32,590
forest<font color="#E5E5E5"> quantum processing units</font><font color="#CCCCCC"> Shore</font>

551
00:22:31,240 --> 00:22:34,120
refilled<font color="#E5E5E5"> soft</font><font color="#CCCCCC"> folk to use the</font>

552
00:22:32,590 --> 00:22:36,100
<font color="#E5E5E5">backends in strawberry fields etc etc</font>

553
00:22:34,120 --> 00:22:38,320
you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> to find as many of these devices</font>

554
00:22:36,100 --> 00:22:40,120
<font color="#E5E5E5">as</font><font color="#CCCCCC"> you want</font><font color="#E5E5E5"> and then you</font><font color="#CCCCCC"> can use</font><font color="#E5E5E5"> them</font>

555
00:22:38,320 --> 00:22:41,620
<font color="#E5E5E5">when you define your</font><font color="#CCCCCC"> queue</font><font color="#E5E5E5"> nodes so we</font>

556
00:22:40,120 --> 00:22:44,020
have a key node right below using that

557
00:22:41,620 --> 00:22:46,179
device<font color="#E5E5E5"> and a</font><font color="#CCCCCC"> key note</font><font color="#E5E5E5"> in pain Lane is</font>

558
00:22:44,020 --> 00:22:47,830
just a Python function<font color="#E5E5E5"> we want to make</font>

559
00:22:46,180 --> 00:22:49,780
it as simple<font color="#CCCCCC"> as</font><font color="#E5E5E5"> possible you define the</font>

560
00:22:47,830 --> 00:22:52,810
function you define the parameters that

561
00:22:49,780 --> 00:22:55,480
<font color="#E5E5E5">you want to optimize and you just use a</font>

562
00:22:52,810 --> 00:22:57,760
decorator<font color="#E5E5E5"> just to let Penny Lane know</font>

563
00:22:55,480 --> 00:22:59,790
what device to send<font color="#E5E5E5"> it</font><font color="#CCCCCC"> to so you</font><font color="#E5E5E5"> can</font>

564
00:22:57,760 --> 00:23:01,510
almost think<font color="#E5E5E5"> of them like little</font>

565
00:22:59,790 --> 00:23:03,820
accelerators you're sending<font color="#E5E5E5"> it's this</font>

566
00:23:01,510 --> 00:23:04,600
device to accelerate the computation<font color="#E5E5E5"> and</font>

567
00:23:03,820 --> 00:23:07,210
<font color="#E5E5E5">then you'll get the result back</font>

568
00:23:04,600 --> 00:23:11,230
<font color="#E5E5E5">classically and the gradients as well</font>

569
00:23:07,210 --> 00:23:13,180
due to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> parameter shift formula</font><font color="#CCCCCC"> you</font>

570
00:23:11,230 --> 00:23:14,740
apply the quantum gates so<font color="#E5E5E5"> Penny Lane</font>

571
00:23:13,180 --> 00:23:17,890
contains knowledge of all the<font color="#CCCCCC"> qubit</font>

572
00:23:14,740 --> 00:23:19,780
<font color="#E5E5E5">Plus continuous variable gates and then</font>

573
00:23:17,890 --> 00:23:21,280
you can just use it<font color="#E5E5E5"> as if it was any</font>

574
00:23:19,780 --> 00:23:23,678
<font color="#CCCCCC">other machine learning library</font><font color="#E5E5E5"> so you</font>

575
00:23:21,280 --> 00:23:26,170
<font color="#E5E5E5">can use numpy functions like sine and</font>

576
00:23:23,679 --> 00:23:30,270
<font color="#E5E5E5">abs to find your cost function</font><font color="#CCCCCC"> and then</font>

577
00:23:26,170 --> 00:23:32,620
we also ship<font color="#E5E5E5"> a couple of optimizers</font>

578
00:23:30,270 --> 00:23:34,059
<font color="#CCCCCC">which you can use to optimize over your</font>

579
00:23:32,620 --> 00:23:36,189
cost function<font color="#CCCCCC"> or you can write your own</font>

580
00:23:34,059 --> 00:23:37,740
<font color="#E5E5E5">optimizes this is written Python we've</font>

581
00:23:36,190 --> 00:23:40,750
tried<font color="#CCCCCC"> to keep it as simple as possible</font>

582
00:23:37,740 --> 00:23:44,230
<font color="#CCCCCC">so that</font><font color="#E5E5E5"> anyone</font><font color="#CCCCCC"> can use it in that</font>

583
00:23:40,750 --> 00:23:45,700
current workflow so this is just<font color="#CCCCCC"> an</font>

584
00:23:44,230 --> 00:23:47,110
<font color="#CCCCCC">overview of</font><font color="#E5E5E5"> the plugins we already have</font>

585
00:23:45,700 --> 00:23:50,950
so we<font color="#CCCCCC"> have a strawberry fields and</font>

586
00:23:47,110 --> 00:23:52,510
project<font color="#CCCCCC"> queue plugin</font><font color="#E5E5E5"> and when the when</font>

587
00:23:50,950 --> 00:23:53,080
<font color="#CCCCCC">the</font><font color="#E5E5E5"> zazu</font><font color="#CCCCCC"> hardware is available later</font>

588
00:23:52,510 --> 00:23:55,290
<font color="#E5E5E5">this year</font>

589
00:23:53,080 --> 00:23:57,939
we'll<font color="#CCCCCC"> have a</font><font color="#E5E5E5"> plugin available for that</font>

590
00:23:55,290 --> 00:24:00,670
<font color="#CCCCCC">we have a</font><font color="#E5E5E5"> plug-in available for</font><font color="#CCCCCC"> QAS</font><font color="#E5E5E5"> kit</font>

591
00:23:57,940 --> 00:24:02,860
and hopefully on<font color="#E5E5E5"> Monday our hike will</font>

592
00:24:00,670 --> 00:24:08,350
<font color="#CCCCCC">plug-in</font><font color="#E5E5E5"> will be</font><font color="#CCCCCC"> live</font><font color="#E5E5E5"> so the Penny Lane</font>

593
00:24:02,860 --> 00:24:09,520
forest plugin yeah so that's<font color="#E5E5E5"> just a</font>

594
00:24:08,350 --> 00:24:12,219
quick<font color="#CCCCCC"> overview of the plugins they're</font>

595
00:24:09,520 --> 00:24:15,910
<font color="#E5E5E5">available now so</font><font color="#CCCCCC"> project queue has a</font>

596
00:24:12,220 --> 00:24:18,130
project<font color="#CCCCCC"> queue is a is a platform</font>

597
00:24:15,910 --> 00:24:21,400
agnostic<font color="#CCCCCC"> quantum compiler which has</font>

598
00:24:18,130 --> 00:24:25,090
backends for<font color="#E5E5E5"> Google's</font><font color="#CCCCCC"> Sirk and IBM's</font><font color="#E5E5E5"> QoS</font>

599
00:24:21,400 --> 00:24:26,740
kit so you<font color="#E5E5E5"> can access</font><font color="#CCCCCC"> circ</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> i-iv mq</font>

600
00:24:25,090 --> 00:24:31,209
through project queue or you can<font color="#E5E5E5"> access</font>

601
00:24:26,740 --> 00:24:33,010
IBM<font color="#E5E5E5"> queue directly through</font><font color="#CCCCCC"> QA ask if so</font>

602
00:24:31,210 --> 00:24:36,370
<font color="#E5E5E5">that's really exciting and it's really</font>

603
00:24:33,010 --> 00:24:38,470
<font color="#E5E5E5">easy</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> plugins I think most</font>

604
00:24:36,370 --> 00:24:40,659
of them<font color="#E5E5E5"> are maximum of 500 lines all you</font>

605
00:24:38,470 --> 00:24:43,240
need to do is to find<font color="#E5E5E5"> how the Penny Lane</font>

606
00:24:40,660 --> 00:24:46,030
<font color="#E5E5E5">operators mapped to the frameworks gates</font>

607
00:24:43,240 --> 00:24:48,550
<font color="#E5E5E5">and that's it everything</font><font color="#CCCCCC"> else is taken</font>

608
00:24:46,030 --> 00:24:50,020
care<font color="#CCCCCC"> for</font><font color="#E5E5E5"> you automatically</font><font color="#CCCCCC"> so please</font>

609
00:24:48,550 --> 00:24:52,710
feel<font color="#E5E5E5"> free to check out these check out</font>

610
00:24:50,020 --> 00:24:55,929
our github page<font color="#E5E5E5"> and give us</font><font color="#CCCCCC"> feedback and</font>

611
00:24:52,710 --> 00:24:57,670
<font color="#E5E5E5">contribute we're happy for PRS</font><font color="#CCCCCC"> and</font>

612
00:24:55,929 --> 00:24:59,770
issues and let us know we're<font color="#E5E5E5"> doing</font>

613
00:24:57,670 --> 00:25:01,360
<font color="#E5E5E5">anything you'd rather we weren't doing</font>

614
00:24:59,770 --> 00:25:03,610
<font color="#E5E5E5">or if there are features you'd like or</font>

615
00:25:01,360 --> 00:25:05,229
even<font color="#CCCCCC"> if there's a framework that we</font>

616
00:25:03,610 --> 00:25:07,479
might<font color="#E5E5E5"> not know of</font><font color="#CCCCCC"> that you want to</font><font color="#E5E5E5"> plug</font>

617
00:25:05,230 --> 00:25:10,929
<font color="#CCCCCC">in for so you can use</font><font color="#E5E5E5"> Penny Lane let us</font>

618
00:25:07,480 --> 00:25:12,070
know<font color="#E5E5E5"> and we'll look into it so what I'm</font>

619
00:25:10,929 --> 00:25:16,360
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to do now is I'm just going</font><font color="#CCCCCC"> to a</font>

620
00:25:12,070 --> 00:25:19,540
very quick<font color="#E5E5E5"> live demo</font><font color="#CCCCCC"> so what we have</font>

621
00:25:16,360 --> 00:25:21,760
<font color="#E5E5E5">here is a very simple variational</font>

622
00:25:19,540 --> 00:25:24,399
circuit so it's just one<font color="#E5E5E5"> qubit and the</font>

623
00:25:21,760 --> 00:25:25,720
qubit starts in the state<font color="#E5E5E5"> 0 and what</font>

624
00:25:24,400 --> 00:25:28,330
we're then doing<font color="#E5E5E5"> is we're applying</font><font color="#CCCCCC"> two</font>

625
00:25:25,720 --> 00:25:28,900
rotation gates<font color="#E5E5E5"> so we're allowing this</font>

626
00:25:28,330 --> 00:25:30,760
qubit

627
00:25:28,900 --> 00:25:33,400
<font color="#CCCCCC">rotating the</font><font color="#E5E5E5"> Bloch sphere around</font><font color="#CCCCCC"> the</font>

628
00:25:30,760 --> 00:25:35,110
<font color="#E5E5E5">x-axis by some angle Phi</font><font color="#CCCCCC"> one and then</font>

629
00:25:33,400 --> 00:25:37,140
around the<font color="#E5E5E5"> y-axis by some angle Phi two</font>

630
00:25:35,110 --> 00:25:40,060
and then we're just<font color="#E5E5E5"> doing a</font><font color="#CCCCCC"> measurement</font>

631
00:25:37,140 --> 00:25:42,670
and this measurements done in<font color="#CCCCCC"> Polly's at</font>

632
00:25:40,060 --> 00:25:46,780
<font color="#CCCCCC">axis which police ed basis</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font>

633
00:25:42,670 --> 00:25:48,070
standard in quantum permutation and this

634
00:25:46,780 --> 00:25:50,950
is a bit of a toy<font color="#CCCCCC"> example it's a hello</font>

635
00:25:48,070 --> 00:25:52,629
world<font color="#CCCCCC"> but what we want to do is we want</font>

636
00:25:50,950 --> 00:25:54,880
to optimize<font color="#E5E5E5"> these two</font><font color="#CCCCCC"> parameters Phi 1</font>

637
00:25:52,630 --> 00:25:56,920
and Phi 2 so that<font color="#E5E5E5"> the qubit flips so we</font>

638
00:25:54,880 --> 00:25:59,650
start off in state<font color="#CCCCCC"> 0 and we finished in</font>

639
00:25:56,920 --> 00:26:01,000
state<font color="#E5E5E5"> 1 so I'm gonna attempt to do now</font>

640
00:25:59,650 --> 00:26:08,620
is I'm going to<font color="#CCCCCC"> temp do that live in</font>

641
00:26:01,000 --> 00:26:11,370
Python in penny lane this isn't good

642
00:26:08,620 --> 00:26:11,370
<font color="#CCCCCC">good start</font>

643
00:26:20,650 --> 00:26:32,160
<font color="#E5E5E5">not perfect so is that</font><font color="#CCCCCC"> too</font><font color="#E5E5E5"> small to read</font>

644
00:26:28,690 --> 00:26:32,160
<font color="#E5E5E5">I'll try and work out how to zoom in</font>

645
00:26:39,249 --> 00:26:42,249
perfect

646
00:26:43,330 --> 00:26:46,409
just increase the font<font color="#CCCCCC"> size</font>

647
00:26:52,680 --> 00:26:59,710
does that<font color="#E5E5E5"> look okay</font><font color="#CCCCCC"> or still bigger</font><font color="#E5E5E5"> yeah</font>

648
00:26:57,060 --> 00:27:04,870
so while start off by<font color="#CCCCCC"> doing is</font><font color="#E5E5E5"> importing</font>

649
00:26:59,710 --> 00:27:06,190
Penny Lane and importing numpy as MP and

650
00:27:04,870 --> 00:27:08,350
so what I'm<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> is I'm putting</font><font color="#CCCCCC"> the</font>

651
00:27:06,190 --> 00:27:09,730
<font color="#CCCCCC">raptor version umpire from Penny Lane</font><font color="#E5E5E5"> so</font>

652
00:27:08,350 --> 00:27:11,379
this allows us<font color="#CCCCCC"> to keep</font><font color="#E5E5E5"> track</font><font color="#CCCCCC"> of the</font>

653
00:27:09,730 --> 00:27:14,950
gradients using numpy as well if you use

654
00:27:11,380 --> 00:27:16,240
numpy functions<font color="#CCCCCC"> i'm importing penguins</font>

655
00:27:14,950 --> 00:27:21,640
<font color="#CCCCCC">qml just because that's what we used</font>

656
00:27:16,240 --> 00:27:22,780
internally and it kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> stuck and</font><font color="#CCCCCC"> then</font>

657
00:27:21,640 --> 00:27:25,480
what<font color="#E5E5E5"> I want to do is I want to create</font><font color="#CCCCCC"> my</font>

658
00:27:22,780 --> 00:27:28,389
device<font color="#CCCCCC"> so I'll create two devices here</font>

659
00:27:25,480 --> 00:27:30,220
<font color="#E5E5E5">the first one is so these are two</font>

660
00:27:28,390 --> 00:27:32,260
default reference plugins we've shipped

661
00:27:30,220 --> 00:27:34,000
with Penny Lane<font color="#E5E5E5"> so we have default qubit</font>

662
00:27:32,260 --> 00:27:36,640
which<font color="#E5E5E5"> is a really</font><font color="#CCCCCC"> basic qubits emulator</font>

663
00:27:34,000 --> 00:27:38,770
<font color="#E5E5E5">it's there for</font><font color="#CCCCCC"> reference to show you how</font>

664
00:27:36,640 --> 00:27:42,970
you<font color="#E5E5E5"> can create a very quick fast plugin</font>

665
00:27:38,770 --> 00:27:45,639
<font color="#E5E5E5">for Penny Lane it's very slow so I don't</font>

666
00:27:42,970 --> 00:27:46,900
<font color="#E5E5E5">really recommend anyone use it use one</font>

667
00:27:45,640 --> 00:27:49,360
<font color="#CCCCCC">of the actual frameworks we also have</font>

668
00:27:46,900 --> 00:27:51,220
default<font color="#CCCCCC"> gushin which is a</font><font color="#E5E5E5"> Gaussian C V</font>

669
00:27:49,360 --> 00:27:53,740
reference<font color="#E5E5E5"> plug-in</font><font color="#CCCCCC"> built-ins</font><font color="#E5E5E5"> Penny Lane</font>

670
00:27:51,220 --> 00:27:56,020
<font color="#E5E5E5">they're good for a quick prototyping but</font>

671
00:27:53,740 --> 00:27:57,220
for<font color="#E5E5E5"> actual fast simulations or if you</font>

672
00:27:56,020 --> 00:28:00,070
want<font color="#E5E5E5"> to access quantum hardware you need</font>

673
00:27:57,220 --> 00:28:06,220
<font color="#CCCCCC">to use the actual plugins that connect</font>

674
00:28:00,070 --> 00:28:08,350
to<font color="#E5E5E5"> the frameworks so</font><font color="#CCCCCC"> I'll do now</font><font color="#E5E5E5"> is I'm</font>

675
00:28:06,220 --> 00:28:12,070
going<font color="#E5E5E5"> to create the</font><font color="#CCCCCC"> cue note</font><font color="#E5E5E5"> so I'm just</font>

676
00:28:08,350 --> 00:28:14,500
using this the decorator to specify that

677
00:28:12,070 --> 00:28:16,990
<font color="#E5E5E5">this is the device I want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> run out on</font>

678
00:28:14,500 --> 00:28:19,800
the qubit device and I just<font color="#E5E5E5"> define my</font>

679
00:28:16,990 --> 00:28:22,210
function<font color="#E5E5E5"> and my keynote function so</font>

680
00:28:19,800 --> 00:28:23,680
we've tried<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> smart and pain Lane</font>

681
00:28:22,210 --> 00:28:26,440
and how we designed<font color="#CCCCCC"> that we wanted</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to</font>

682
00:28:23,680 --> 00:28:29,560
be as close to standard Python functions

683
00:28:26,440 --> 00:28:31,030
as we could<font color="#E5E5E5"> so you can pass numpy arrays</font>

684
00:28:29,560 --> 00:28:33,940
as argument you can pass the list you

685
00:28:31,030 --> 00:28:36,129
<font color="#E5E5E5">can pass keyword arguments</font><font color="#CCCCCC"> everything</font>

686
00:28:33,940 --> 00:28:37,810
should hopefully work<font color="#E5E5E5"> so here I'm just</font>

687
00:28:36,130 --> 00:28:40,000
<font color="#E5E5E5">applying my rotation they get around the</font>

688
00:28:37,810 --> 00:28:42,550
<font color="#E5E5E5">x-axis with the first elements of</font>

689
00:28:40,000 --> 00:28:44,350
promises here I'm then I'm rotating

690
00:28:42,550 --> 00:28:46,240
<font color="#CCCCCC">around Y with the</font><font color="#E5E5E5"> second element</font><font color="#CCCCCC"> of</font>

691
00:28:44,350 --> 00:28:48,399
params<font color="#CCCCCC"> and I'm just</font><font color="#E5E5E5"> returning the</font>

692
00:28:46,240 --> 00:28:51,430
expectation value in the poly<font color="#E5E5E5"> Zed basis</font>

693
00:28:48,400 --> 00:28:53,800
and just<font color="#CCCCCC"> a quick comment</font>

694
00:28:51,430 --> 00:28:56,320
we use the term wires<font color="#CCCCCC"> to refer to either</font>

695
00:28:53,800 --> 00:28:58,270
<font color="#CCCCCC">qubit or a</font><font color="#E5E5E5"> queue mode or anything else</font>

696
00:28:56,320 --> 00:29:00,610
<font color="#E5E5E5">so why is it essentially saying number</font>

697
00:28:58,270 --> 00:29:04,050
of<font color="#E5E5E5"> subsystems</font><font color="#CCCCCC"> the reason we use the term</font>

698
00:29:00,610 --> 00:29:04,050
wires is because it's

699
00:29:04,140 --> 00:29:07,570
it's more general<font color="#CCCCCC"> than saying either</font>

700
00:29:06,280 --> 00:29:09,490
<font color="#E5E5E5">Kubasaki notes because Penny Lane</font>

701
00:29:07,570 --> 00:29:13,090
supports both so we went<font color="#CCCCCC"> to a term that</font>

702
00:29:09,490 --> 00:29:18,910
was short<font color="#E5E5E5"> easy to</font><font color="#CCCCCC"> remember</font><font color="#E5E5E5"> made sense</font>

703
00:29:13,090 --> 00:29:20,290
<font color="#E5E5E5">and could replace both</font><font color="#CCCCCC"> oh I can show you</font>

704
00:29:18,910 --> 00:29:24,550
<font color="#E5E5E5">now is you</font><font color="#CCCCCC"> can run</font><font color="#E5E5E5"> this like any Python</font>

705
00:29:20,290 --> 00:29:29,950
<font color="#E5E5E5">function so say I</font><font color="#CCCCCC"> passed a</font><font color="#E5E5E5"> list with the</font>

706
00:29:24,550 --> 00:29:31,470
two parameter values I<font color="#CCCCCC"> get the</font><font color="#E5E5E5"> output we</font>

707
00:29:29,950 --> 00:29:33,580
also include a function in<font color="#E5E5E5"> Penny Lane</font>

708
00:29:31,470 --> 00:29:38,080
that allows you to<font color="#E5E5E5"> turn the gradient</font>

709
00:29:33,580 --> 00:29:39,370
<font color="#CCCCCC">function so qml grad so I'm just</font><font color="#E5E5E5"> asking</font>

710
00:29:38,080 --> 00:29:41,560
for<font color="#CCCCCC"> the gradient</font><font color="#E5E5E5"> function of circuit</font>

711
00:29:39,370 --> 00:29:45,909
with<font color="#CCCCCC"> AG</font><font color="#E5E5E5"> Nam so the with the respect to</font>

712
00:29:41,560 --> 00:29:49,840
<font color="#E5E5E5">the first</font><font color="#CCCCCC"> argument and now I can call</font>

713
00:29:45,910 --> 00:29:51,670
<font color="#E5E5E5">that directly and so that's using the</font>

714
00:29:49,840 --> 00:29:53,860
parameter shift rule<font color="#E5E5E5"> to</font><font color="#CCCCCC"> determine the</font>

715
00:29:51,670 --> 00:29:56,110
analytic exact gradients<font color="#E5E5E5"> of that circuit</font>

716
00:29:53,860 --> 00:29:57,310
with those two<font color="#CCCCCC"> parameters</font><font color="#E5E5E5"> and if you</font>

717
00:29:56,110 --> 00:29:59,260
were to use a device<font color="#E5E5E5"> that was connected</font>

718
00:29:57,310 --> 00:30:02,370
<font color="#CCCCCC">to</font><font color="#E5E5E5"> a quantum processing unit it would</font>

719
00:29:59,260 --> 00:30:04,780
calculate this on the quantum hardware

720
00:30:02,370 --> 00:30:07,330
so I can do now is<font color="#E5E5E5"> I can define my cost</font>

721
00:30:04,780 --> 00:30:10,030
function<font color="#CCCCCC"> so in this case we want to</font>

722
00:30:07,330 --> 00:30:11,740
<font color="#E5E5E5">minimize the poly Zed return value so</font>

723
00:30:10,030 --> 00:30:13,420
the cost function<font color="#CCCCCC"> is</font><font color="#E5E5E5"> essentially the</font>

724
00:30:11,740 --> 00:30:15,340
circuit we just want to minimize the

725
00:30:13,420 --> 00:30:22,240
circuit to return value<font color="#E5E5E5"> so I'll just</font>

726
00:30:15,340 --> 00:30:31,300
call<font color="#E5E5E5"> that and you can run this like any</font>

727
00:30:22,240 --> 00:30:33,190
<font color="#E5E5E5">other function so Penny Lane should be</font>

728
00:30:31,300 --> 00:30:36,190
as<font color="#E5E5E5"> close to</font><font color="#CCCCCC"> using stand on</font><font color="#E5E5E5"> Python Python</font>

729
00:30:33,190 --> 00:30:40,000
<font color="#E5E5E5">as it can be excluding the part where</font>

730
00:30:36,190 --> 00:30:41,350
you're using quantum computers so now

731
00:30:40,000 --> 00:30:45,220
that we've got a cost function<font color="#E5E5E5"> defined I</font>

732
00:30:41,350 --> 00:30:47,909
can start defining the optimizers so

733
00:30:45,220 --> 00:30:47,910
<font color="#E5E5E5">I'll just call it up</font>

734
00:30:51,380 --> 00:30:57,750
my history<font color="#CCCCCC"> is</font><font color="#E5E5E5"> not working so I'm going</font>

735
00:30:55,500 --> 00:31:00,409
to<font color="#E5E5E5"> do something a</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to do</font>

736
00:30:57,750 --> 00:31:00,409
some copying and pasting

737
00:31:09,080 --> 00:31:12,799
so now<font color="#E5E5E5"> I'm defining</font><font color="#CCCCCC"> the initial values</font>

738
00:31:11,090 --> 00:31:14,149
<font color="#CCCCCC">of the premises I'll just check the cost</font>

739
00:31:12,799 --> 00:31:16,249
<font color="#CCCCCC">function of</font><font color="#E5E5E5"> those initial parameters and</font>

740
00:31:14,149 --> 00:31:17,928
then create the optimizer<font color="#CCCCCC"> so with Penny</font>

741
00:31:16,249 --> 00:31:20,989
Lane we ship some default<font color="#CCCCCC"> optimizers</font>

742
00:31:17,929 --> 00:31:22,340
<font color="#CCCCCC">they're super basic they do one</font>

743
00:31:20,989 --> 00:31:24,769
optimization step so<font color="#E5E5E5"> you have to loop</font>

744
00:31:22,340 --> 00:31:26,090
over<font color="#E5E5E5"> them manually and further versions</font>

745
00:31:24,769 --> 00:31:29,929
we're looking at implementing<font color="#E5E5E5"> some</font>

746
00:31:26,090 --> 00:31:32,090
actual optimization classes so now that

747
00:31:29,929 --> 00:31:33,230
the optimizer is designed we can just do

748
00:31:32,090 --> 00:31:38,418
that<font color="#E5E5E5"> loop I was talking about earlier</font>

749
00:31:33,230 --> 00:31:42,649
<font color="#CCCCCC">and so we're just ranging over</font><font color="#E5E5E5"> 25 steps</font>

750
00:31:38,419 --> 00:31:45,889
<font color="#CCCCCC">and every</font><font color="#E5E5E5"> step we're</font><font color="#CCCCCC"> updating the</font>

751
00:31:42,649 --> 00:31:47,840
parameters with<font color="#CCCCCC"> the one determined by</font>

752
00:31:45,889 --> 00:31:50,869
the<font color="#E5E5E5"> gradient descent optimizer</font><font color="#CCCCCC"> and then</font>

753
00:31:47,840 --> 00:31:53,570
we're just<font color="#E5E5E5"> printing</font><font color="#CCCCCC"> out the result so</font>

754
00:31:50,869 --> 00:31:55,639
there you go<font color="#E5E5E5"> so after 25 steps we're</font>

755
00:31:53,570 --> 00:31:57,408
hearing<font color="#E5E5E5"> minus 0.9</font><font color="#CCCCCC"> one so close to</font><font color="#E5E5E5"> one I</font>

756
00:31:55,639 --> 00:31:59,658
can actually increase<font color="#CCCCCC"> that I'll say</font>

757
00:31:57,409 --> 00:32:05,350
steps equals<font color="#CCCCCC"> 100 see how much better it</font>

758
00:31:59,659 --> 00:32:05,350
does run<font color="#E5E5E5"> that again yeah</font>

759
00:32:11,010 --> 00:32:16,540
yeah so you can<font color="#E5E5E5"> see after 40 steps we're</font>

760
00:32:14,800 --> 00:32:18,730
hearing<font color="#CCCCCC"> minus one so we flip the qubit</font>

761
00:32:16,540 --> 00:32:22,450
from state zero state<font color="#E5E5E5"> one and you can</font>

762
00:32:18,730 --> 00:32:24,340
see<font color="#CCCCCC"> the optimization</font><font color="#E5E5E5"> angles so the the</font>

763
00:32:22,450 --> 00:32:26,140
<font color="#CCCCCC">first</font><font color="#E5E5E5"> rotation around the x-axis just</font>

764
00:32:24,340 --> 00:32:27,699
requires zero<font color="#CCCCCC"> as the angle the second</font>

765
00:32:26,140 --> 00:32:29,860
one requires<font color="#CCCCCC"> PI and this</font><font color="#E5E5E5"> is super simple</font>

766
00:32:27,700 --> 00:32:31,420
<font color="#E5E5E5">you</font><font color="#CCCCCC"> could solve this by hand using two</font>

767
00:32:29,860 --> 00:32:40,719
matrix multiplications in five minutes

768
00:32:31,420 --> 00:32:41,620
<font color="#E5E5E5">but we want to use anyway so I'm going</font>

769
00:32:40,720 --> 00:32:42,760
<font color="#E5E5E5">to try and do something a bit more</font>

770
00:32:41,620 --> 00:32:47,678
complicated<font color="#E5E5E5"> I'm gonna try and actually</font>

771
00:32:42,760 --> 00:32:49,390
<font color="#E5E5E5">run this on ragazze qpu and this is live</font>

772
00:32:47,679 --> 00:32:52,150
<font color="#CCCCCC">so it's probably</font><font color="#E5E5E5"> very dangerous but I'm</font>

773
00:32:49,390 --> 00:32:55,059
gonna try<font color="#CCCCCC"> it anyway so this is a</font><font color="#E5E5E5"> Jupiter</font>

774
00:32:52,150 --> 00:32:56,620
notebook closes on<font color="#CCCCCC"> Righetti's QCs so</font><font color="#E5E5E5"> I'm</font>

775
00:32:55,059 --> 00:32:58,240
importing<font color="#CCCCCC"> penny lane</font><font color="#E5E5E5"> and it was easy to</font>

776
00:32:56,620 --> 00:33:05,229
get penny<font color="#E5E5E5"> lane on</font><font color="#CCCCCC"> QCs I could just pip</font>

777
00:32:58,240 --> 00:33:08,340
install it<font color="#E5E5E5"> I think I've lost the</font>

778
00:33:05,230 --> 00:33:08,340
<font color="#CCCCCC">connection so I need to sign in again</font>

779
00:33:16,450 --> 00:33:23,109
so I'm just going<font color="#CCCCCC"> to sign in and open</font>

780
00:33:21,850 --> 00:33:24,639
the<font color="#CCCCCC"> Jupiter notebook</font><font color="#E5E5E5"> from before</font><font color="#CCCCCC"> so this</font>

781
00:33:23,109 --> 00:33:28,330
is<font color="#E5E5E5"> the exact same example</font><font color="#CCCCCC"> I just showed</font>

782
00:33:24,639 --> 00:33:30,219
this is this is<font color="#E5E5E5"> just</font><font color="#CCCCCC"> cupid rotation so</font>

783
00:33:28,330 --> 00:33:35,289
it's very<font color="#E5E5E5"> simple it's basically</font><font color="#CCCCCC"> a hello</font>

784
00:33:30,220 --> 00:33:38,220
<font color="#E5E5E5">world example but let's run this on the</font>

785
00:33:35,289 --> 00:33:38,220
<font color="#CCCCCC">qpu because we can</font>

786
00:33:43,710 --> 00:33:47,160
so this is probably why<font color="#CCCCCC"> should've try</font>

787
00:33:45,600 --> 00:33:53,129
<font color="#CCCCCC">the</font><font color="#E5E5E5"> live demo it looks like the</font><font color="#CCCCCC"> kernels</font>

788
00:33:47,160 --> 00:33:55,650
still starting so in case this doesn't

789
00:33:53,130 --> 00:34:10,050
<font color="#E5E5E5">work</font><font color="#CCCCCC"> you can see from when I ran it</font>

790
00:33:55,650 --> 00:34:11,790
before<font color="#CCCCCC"> it did work perfect so about an</font>

791
00:34:10,050 --> 00:34:13,980
<font color="#E5E5E5">hour ago I was testing this at my desk</font>

792
00:34:11,790 --> 00:34:16,469
and I ran it and<font color="#E5E5E5"> it worked and I did</font><font color="#CCCCCC"> a</font>

793
00:34:13,980 --> 00:34:23,610
keyboard interrupter optimizations at 40

794
00:34:16,469 --> 00:34:24,810
<font color="#E5E5E5">so just in case ah maybe</font><font color="#CCCCCC"> I'll try</font><font color="#E5E5E5"> again</font>

795
00:34:23,610 --> 00:34:26,100
at the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> of the talk see if I can</font>

796
00:34:24,810 --> 00:34:30,929
connect<font color="#E5E5E5"> it looks like it could just be a</font>

797
00:34:26,100 --> 00:34:35,489
<font color="#E5E5E5">connection issue but and this is really</font>

798
00:34:30,929 --> 00:34:36,899
cool<font color="#E5E5E5"> so one of the one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the algorithms</font>

799
00:34:35,489 --> 00:34:40,199
<font color="#E5E5E5">experts</font><font color="#CCCCCC"> we're working with that</font>

800
00:34:36,900 --> 00:34:41,610
Righetti<font color="#E5E5E5"> with</font><font color="#CCCCCC"> penny lane well the Penny</font>

801
00:34:40,199 --> 00:34:44,219
Lane forest<font color="#E5E5E5"> plug-in was coming together</font>

802
00:34:41,610 --> 00:34:45,630
we<font color="#E5E5E5"> could start to use it</font><font color="#CCCCCC"> on the qpu she</font>

803
00:34:44,219 --> 00:34:48,750
wants to explore<font color="#E5E5E5"> and see how well it did</font>

804
00:34:45,630 --> 00:34:50,970
so<font color="#E5E5E5"> this is again the qubit rotation</font>

805
00:34:48,750 --> 00:34:52,620
example but what you're<font color="#E5E5E5"> seeing here</font><font color="#CCCCCC"> is</font>

806
00:34:50,969 --> 00:34:54,689
<font color="#E5E5E5">the actual optimization landscape using</font>

807
00:34:52,620 --> 00:34:57,480
<font color="#CCCCCC">Penny Lane</font><font color="#E5E5E5"> so she created the cost</font>

808
00:34:54,690 --> 00:34:59,370
<font color="#CCCCCC">function and then she sampled the cost</font>

809
00:34:57,480 --> 00:35:01,530
function so<font color="#E5E5E5"> this is by</font><font color="#CCCCCC"> Kerry McCune and</font>

810
00:34:59,370 --> 00:35:03,480
<font color="#CCCCCC">Righetti</font><font color="#E5E5E5"> she sampled the cost function</font>

811
00:35:01,530 --> 00:35:05,550
at various values<font color="#CCCCCC"> within this 2d grid</font>

812
00:35:03,480 --> 00:35:07,200
<font color="#E5E5E5">and then tried some of</font><font color="#CCCCCC"> the optimizes</font>

813
00:35:05,550 --> 00:35:08,640
that<font color="#E5E5E5"> came with pain Lane and so it's</font>

814
00:35:07,200 --> 00:35:10,770
really cool this<font color="#CCCCCC"> is coming straight off</font>

815
00:35:08,640 --> 00:35:14,040
the<font color="#E5E5E5"> Righetti qpu using</font><font color="#CCCCCC"> op doing</font>

816
00:35:10,770 --> 00:35:18,360
<font color="#CCCCCC">optimization with Penny Lane and you can</font>

817
00:35:14,040 --> 00:35:19,950
see how well it<font color="#CCCCCC"> works so the valleys in</font>

818
00:35:18,360 --> 00:35:22,490
the optimization<font color="#E5E5E5"> landscape are easy and</font>

819
00:35:19,950 --> 00:35:25,259
the optimizers find them and this<font color="#E5E5E5"> is</font>

820
00:35:22,490 --> 00:35:27,779
maximum<font color="#E5E5E5"> ten lines of Penny Lane code</font><font color="#CCCCCC"> in</font>

821
00:35:25,260 --> 00:35:35,280
<font color="#E5E5E5">Python</font><font color="#CCCCCC"> so I was</font><font color="#E5E5E5"> really excited when I</font>

822
00:35:27,780 --> 00:35:37,050
saw this and because Penny Lane is

823
00:35:35,280 --> 00:35:38,760
Hardware agnostic you can do crazy cool

824
00:35:37,050 --> 00:35:40,110
things with Penny Lane you can for

825
00:35:38,760 --> 00:35:41,460
<font color="#CCCCCC">example say you have something that</font>

826
00:35:40,110 --> 00:35:42,630
<font color="#E5E5E5">works really well using continuous</font>

827
00:35:41,460 --> 00:35:44,340
variables<font color="#E5E5E5"> but then you have another</font>

828
00:35:42,630 --> 00:35:46,500
<font color="#CCCCCC">problem that you could</font><font color="#E5E5E5"> solve really well</font>

829
00:35:44,340 --> 00:35:48,660
using qubits<font color="#E5E5E5"> but then your problem</font>

830
00:35:46,500 --> 00:35:51,090
requires both<font color="#E5E5E5"> of those so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can do</font>

831
00:35:48,660 --> 00:35:52,620
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> just create two Q nodes</font><font color="#E5E5E5"> so for</font>

832
00:35:51,090 --> 00:35:55,290
<font color="#E5E5E5">example you can create a</font><font color="#CCCCCC"> queue note</font><font color="#E5E5E5"> that</font>

833
00:35:52,620 --> 00:35:56,730
does<font color="#E5E5E5"> qubit rotation</font><font color="#CCCCCC"> and you</font><font color="#E5E5E5"> can create</font>

834
00:35:55,290 --> 00:35:57,029
another<font color="#E5E5E5"> one that does photon redirection</font>

835
00:35:56,730 --> 00:35:59,669
so this

836
00:35:57,029 --> 00:36:01,589
just<font color="#CCCCCC"> two key</font><font color="#E5E5E5"> modes with a beam splitter</font>

837
00:35:59,669 --> 00:36:02,939
<font color="#CCCCCC">causing them to interact and</font><font color="#E5E5E5"> what you're</font>

838
00:36:01,589 --> 00:36:04,019
<font color="#CCCCCC">trying to</font><font color="#E5E5E5"> do in photon redirection is</font>

839
00:36:02,939 --> 00:36:05,640
you want<font color="#E5E5E5"> to learn the parameters of the</font>

840
00:36:04,019 --> 00:36:07,649
beam splitter<font color="#CCCCCC"> to cause a photon</font>

841
00:36:05,640 --> 00:36:10,319
initially in<font color="#E5E5E5"> cue mode one to end up in</font>

842
00:36:07,650 --> 00:36:14,009
chemo<font color="#CCCCCC"> two so it's a toy example</font><font color="#E5E5E5"> like</font>

843
00:36:10,319 --> 00:36:19,380
qubit rotation but it works<font color="#CCCCCC"> so we did</font><font color="#E5E5E5"> it</font>

844
00:36:14,009 --> 00:36:20,819
<font color="#E5E5E5">and this is something</font><font color="#CCCCCC"> we ran and what</font>

845
00:36:19,380 --> 00:36:23,909
<font color="#E5E5E5">this optimization is doing is</font><font color="#CCCCCC"> its</font>

846
00:36:20,819 --> 00:36:27,390
optimizing the beam splitter in the<font color="#CCCCCC"> CB</font>

847
00:36:23,909 --> 00:36:30,269
quantum<font color="#E5E5E5"> ship to give the same result as</font>

848
00:36:27,390 --> 00:36:31,439
<font color="#E5E5E5">the</font><font color="#CCCCCC"> qubit rotation</font><font color="#E5E5E5"> on some qubit</font>

849
00:36:30,269 --> 00:36:34,408
<font color="#CCCCCC">hardware ship somewhere else in</font><font color="#E5E5E5"> the</font>

850
00:36:31,439 --> 00:36:38,519
<font color="#E5E5E5">world</font><font color="#CCCCCC"> using a bit of numpy processing to</font>

851
00:36:34,409 --> 00:36:39,929
construct the cost function<font color="#CCCCCC"> so we're</font>

852
00:36:38,519 --> 00:36:41,519
still working<font color="#CCCCCC"> in getting public access</font>

853
00:36:39,929 --> 00:36:44,429
to our<font color="#CCCCCC"> hardware this will be something</font>

854
00:36:41,519 --> 00:36:46,468
<font color="#CCCCCC">that is available</font><font color="#E5E5E5"> in a private base or</font>

855
00:36:44,429 --> 00:36:47,759
in their public beta later this year<font color="#CCCCCC"> but</font>

856
00:36:46,469 --> 00:36:49,049
it's really<font color="#E5E5E5"> exciting we're really</font>

857
00:36:47,759 --> 00:36:53,279
excited<font color="#CCCCCC"> by what we can</font><font color="#E5E5E5"> do with</font><font color="#CCCCCC"> penny</font>

858
00:36:49,049 --> 00:36:55,439
<font color="#CCCCCC">Wayne and if you're interested there</font><font color="#E5E5E5"> are</font>

859
00:36:53,279 --> 00:36:56,849
a couple of other examples on<font color="#CCCCCC"> our pain</font>

860
00:36:55,439 --> 00:36:59,189
<font color="#E5E5E5">Lane documentation so just penny lane</font>

861
00:36:56,849 --> 00:37:00,929
don't read the docs<font color="#CCCCCC"> or ire</font><font color="#E5E5E5"> and these are</font>

862
00:36:59,189 --> 00:37:02,038
things<font color="#CCCCCC"> that aren't our example Oh I mean</font>

863
00:37:00,929 --> 00:37:03,089
there's one there's<font color="#CCCCCC"> cubit rotations</font>

864
00:37:02,039 --> 00:37:03,449
there in case<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to have a look at</font>

865
00:37:03,089 --> 00:37:05,640
that<font color="#E5E5E5"> again</font>

866
00:37:03,449 --> 00:37:07,289
and actually<font color="#CCCCCC"> delve into the maths and</font>

867
00:37:05,640 --> 00:37:09,359
<font color="#E5E5E5">show that it's giving the correct</font><font color="#CCCCCC"> two</font>

868
00:37:07,289 --> 00:37:10,919
results for the angles<font color="#E5E5E5"> we</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> have a</font>

869
00:37:09,359 --> 00:37:12,509
couple<font color="#CCCCCC"> of others so variational</font><font color="#E5E5E5"> quantum</font>

870
00:37:10,919 --> 00:37:14,729
eigen solver is really easy<font color="#E5E5E5"> to build</font><font color="#CCCCCC"> in</font>

871
00:37:12,509 --> 00:37:16,019
Penny Lane<font color="#CCCCCC"> and that's something</font><font color="#E5E5E5"> that's</font>

872
00:37:14,729 --> 00:37:18,828
<font color="#CCCCCC">very big in the literature right now</font>

873
00:37:16,019 --> 00:37:22,078
<font color="#E5E5E5">especially in quantum</font><font color="#CCCCCC"> chemistry</font>

874
00:37:18,829 --> 00:37:24,900
variational classifiers<font color="#E5E5E5"> easy to build</font>

875
00:37:22,079 --> 00:37:26,519
<font color="#E5E5E5">with Penny Lane and we have a example on</font>

876
00:37:24,900 --> 00:37:28,259
that<font color="#E5E5E5"> and I think in one</font><font color="#CCCCCC"> of our papers we</font>

877
00:37:26,519 --> 00:37:31,019
we<font color="#E5E5E5"> created the</font><font color="#CCCCCC"> Zandu logo and then use</font>

878
00:37:28,259 --> 00:37:33,119
the quantum neural network to classify

879
00:37:31,019 --> 00:37:34,379
the logo<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> background using</font>

880
00:37:33,119 --> 00:37:36,739
randomly sample points and it works

881
00:37:34,380 --> 00:37:39,749
<font color="#E5E5E5">worked really well</font>

882
00:37:36,739 --> 00:37:41,249
<font color="#CCCCCC">q guns as well we have an</font><font color="#E5E5E5"> example</font>

883
00:37:39,749 --> 00:37:42,779
oops a notebook demo in our

884
00:37:41,249 --> 00:37:46,198
documentation<font color="#E5E5E5"> that generates a cue gun</font>

885
00:37:42,779 --> 00:37:49,349
using Penny Lane<font color="#E5E5E5"> so I think one</font><font color="#CCCCCC"> cue</font>

886
00:37:46,199 --> 00:37:55,319
<font color="#E5E5E5">nodes for</font><font color="#CCCCCC"> the generator and one cue node</font>

887
00:37:49,349 --> 00:37:56,880
for the discriminator<font color="#CCCCCC"> we also have a</font>

888
00:37:55,319 --> 00:37:58,589
<font color="#E5E5E5">couple of continuous variable notebooks</font>

889
00:37:56,880 --> 00:38:00,119
<font color="#CCCCCC">so these ones we have a toy example</font>

890
00:37:58,589 --> 00:38:02,609
<font color="#CCCCCC">frozen</font><font color="#E5E5E5"> redirection in case you want to</font>

891
00:38:00,119 --> 00:38:04,140
<font color="#E5E5E5">look</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> that one in more detail we also</font>

892
00:38:02,609 --> 00:38:05,339
have one on quantum neural network so

893
00:38:04,140 --> 00:38:08,459
why I talked about<font color="#E5E5E5"> right at the very</font>

894
00:38:05,339 --> 00:38:09,929
<font color="#E5E5E5">beginning</font><font color="#CCCCCC"> so that was</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> six</font>

895
00:38:08,459 --> 00:38:10,890
months ago<font color="#E5E5E5"> we</font><font color="#CCCCCC"> were doing intent to flow</font>

896
00:38:09,929 --> 00:38:13,859
with really slow

897
00:38:10,890 --> 00:38:15,180
classical intractable<font color="#E5E5E5"> computations</font><font color="#CCCCCC"> now</font>

898
00:38:13,859 --> 00:38:16,828
we can do those exact same<font color="#E5E5E5"> things</font><font color="#CCCCCC"> in</font>

899
00:38:15,180 --> 00:38:20,098
<font color="#E5E5E5">penny lane and they're faster just by</font>

900
00:38:16,829 --> 00:38:21,450
nature of<font color="#E5E5E5"> having these analytic gradient</font>

901
00:38:20,099 --> 00:38:23,640
formulas we don't have to<font color="#E5E5E5"> repeat the</font>

902
00:38:21,450 --> 00:38:29,569
simulations numerous times for<font color="#E5E5E5"> the</font>

903
00:38:23,640 --> 00:38:32,038
gradient<font color="#CCCCCC"> so yeah just a quick</font><font color="#E5E5E5"> summary so</font>

904
00:38:29,569 --> 00:38:34,170
the whole<font color="#CCCCCC"> idea here is running</font><font color="#E5E5E5"> optimize</font>

905
00:38:32,039 --> 00:38:36,390
specific aspects<font color="#E5E5E5"> of your computation</font>

906
00:38:34,170 --> 00:38:38,160
directly on quantum processing units<font color="#E5E5E5"> QP</font>

907
00:38:36,390 --> 00:38:40,410
use in<font color="#E5E5E5"> the similar way</font><font color="#CCCCCC"> you might use</font>

908
00:38:38,160 --> 00:38:42,029
GPUs today and this<font color="#CCCCCC"> isn't theoretical</font>

909
00:38:40,410 --> 00:38:44,098
this is something you could do right now

910
00:38:42,029 --> 00:38:48,450
<font color="#CCCCCC">using the quantum</font><font color="#E5E5E5"> devices we have</font>

911
00:38:44,099 --> 00:38:49,920
<font color="#CCCCCC">available</font><font color="#E5E5E5"> on the cloud and what pain</font>

912
00:38:48,450 --> 00:38:52,669
<font color="#E5E5E5">Lane brings that is a quantum aware</font>

913
00:38:49,920 --> 00:38:55,349
implementation of<font color="#CCCCCC"> backpropagation so</font>

914
00:38:52,670 --> 00:38:58,619
anything to do with analytic gradients

915
00:38:55,349 --> 00:39:00,809
for back propagation we take care<font color="#E5E5E5"> of its</font>

916
00:38:58,619 --> 00:39:03,660
Hardware agnostic<font color="#CCCCCC"> and has a large</font>

917
00:39:00,809 --> 00:39:05,730
plug-in ecosystem already accessing all

918
00:39:03,660 --> 00:39:12,299
<font color="#CCCCCC">the major frameworks keep your eye out</font>

919
00:39:05,730 --> 00:39:14,099
for the<font color="#E5E5E5"> forest plugin and also as with</font>

920
00:39:12,299 --> 00:39:15,839
all<font color="#CCCCCC"> our</font><font color="#E5E5E5"> other projects</font><font color="#CCCCCC"> we're very</font>

921
00:39:14,099 --> 00:39:18,869
excited<font color="#CCCCCC"> by open source projects and we</font>

922
00:39:15,839 --> 00:39:20,220
want all our research<font color="#E5E5E5"> and code that we</font>

923
00:39:18,869 --> 00:39:22,200
use internally<font color="#E5E5E5"> to be open source so</font>

924
00:39:20,220 --> 00:39:24,868
we're<font color="#CCCCCC"> very happy to provide</font><font color="#E5E5E5"> this on</font>

925
00:39:22,200 --> 00:39:27,839
github<font color="#CCCCCC"> feel</font><font color="#E5E5E5"> free to check it</font><font color="#CCCCCC"> out and</font>

926
00:39:24,869 --> 00:39:31,200
<font color="#E5E5E5">check out the documentation as</font><font color="#CCCCCC"> well and</font>

927
00:39:27,839 --> 00:39:32,519
just<font color="#CCCCCC"> to finish</font><font color="#E5E5E5"> off we're running a bit</font>

928
00:39:31,200 --> 00:39:33,779
of a<font color="#CCCCCC"> competition at the moment</font><font color="#E5E5E5"> see was</font>

929
00:39:32,519 --> 00:39:35,729
the coolest thing people can do with

930
00:39:33,779 --> 00:39:38,339
<font color="#CCCCCC">Penny Lane with</font><font color="#E5E5E5"> strawberry fields so</font>

931
00:39:35,730 --> 00:39:40,700
we've got some crazy<font color="#E5E5E5"> amount surprises on</font>

932
00:39:38,339 --> 00:39:44,970
offers up<font color="#CCCCCC"> to a thousand dollars</font><font color="#E5E5E5"> Canadian</font>

933
00:39:40,700 --> 00:39:46,410
so and three categories education

934
00:39:44,970 --> 00:39:48,000
software<font color="#E5E5E5"> and research so if you're a</font>

935
00:39:46,410 --> 00:39:49,558
<font color="#E5E5E5">physicist and you doing some research</font>

936
00:39:48,000 --> 00:39:50,849
and<font color="#E5E5E5"> you feel it would be</font><font color="#CCCCCC"> good fit to use</font>

937
00:39:49,559 --> 00:39:53,279
some<font color="#E5E5E5"> of our software like</font><font color="#CCCCCC"> Penny Lane</font>

938
00:39:50,849 --> 00:39:54,930
feel free enter the research award<font color="#E5E5E5"> if</font>

939
00:39:53,279 --> 00:39:57,450
you want to submit some pr's or you have

940
00:39:54,930 --> 00:39:59,129
a way of making<font color="#E5E5E5"> the code more efficient</font>

941
00:39:57,450 --> 00:40:01,200
or<font color="#E5E5E5"> you have a</font><font color="#CCCCCC"> plug-in idea</font><font color="#E5E5E5"> submit</font>

942
00:39:59,130 --> 00:40:03,000
<font color="#CCCCCC">something for the software award or if</font>

943
00:40:01,200 --> 00:40:04,890
you have<font color="#E5E5E5"> a cool way</font><font color="#CCCCCC"> of educating people</font>

944
00:40:03,000 --> 00:40:06,210
<font color="#CCCCCC">about</font><font color="#E5E5E5"> quantum computation then feel free</font>

945
00:40:04,890 --> 00:40:08,519
<font color="#CCCCCC">to check out</font><font color="#E5E5E5"> the Education</font><font color="#CCCCCC"> Award and</font>

946
00:40:06,210 --> 00:40:12,380
this is a<font color="#CCCCCC"> long-term competition so I</font>

947
00:40:08,519 --> 00:40:12,379
think entries close at the end of August

948
00:40:12,650 --> 00:40:24,910
thank you

949
00:40:15,490 --> 00:40:24,910
[Applause]

950
00:40:44,230 --> 00:40:52,720
you mean for that<font color="#E5E5E5"> particular example yes</font>

951
00:40:46,420 --> 00:40:56,859
so the<font color="#E5E5E5"> qubit rotation</font><font color="#CCCCCC"> so for the qubit</font>

952
00:40:52,720 --> 00:40:58,598
rotation<font color="#E5E5E5"> yeah so the question was if I</font>

953
00:40:56,859 --> 00:41:00,609
was<font color="#CCCCCC"> to rerun</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> failed demo would it</font>

954
00:40:58,599 --> 00:41:05,799
<font color="#E5E5E5">work with the classical computer yeah</font>

955
00:41:00,609 --> 00:41:09,250
<font color="#E5E5E5">yeah yep yep yep</font><font color="#CCCCCC"> so it should give the</font>

956
00:41:05,799 --> 00:41:10,690
exact<font color="#E5E5E5"> same result</font><font color="#CCCCCC"> yes so classically we</font>

957
00:41:09,250 --> 00:41:12,579
were doing a simulation<font color="#CCCCCC"> but because it</font>

958
00:41:10,690 --> 00:41:14,440
was<font color="#E5E5E5"> such a small system it was easy to</font>

959
00:41:12,579 --> 00:41:15,849
simulate the problem<font color="#E5E5E5"> becomes when</font><font color="#CCCCCC"> you</font>

960
00:41:14,440 --> 00:41:17,530
have a large computational model with a

961
00:41:15,849 --> 00:41:19,089
huge<font color="#CCCCCC"> number of qubits</font><font color="#E5E5E5"> where the</font>

962
00:41:17,530 --> 00:41:20,740
simulation becomes<font color="#E5E5E5"> intractable then we</font>

963
00:41:19,089 --> 00:41:23,308
can still do that<font color="#CCCCCC"> using the devices as</font>

964
00:41:20,740 --> 00:41:23,308
accelerators

965
00:41:44,610 --> 00:42:03,700
or you have<font color="#E5E5E5"> to so the question was can</font>

966
00:42:01,630 --> 00:42:04,960
you<font color="#E5E5E5"> find a way of embedding the analytic</font>

967
00:42:03,700 --> 00:42:06,930
gradient formula into the<font color="#E5E5E5"> quantum</font>

968
00:42:04,960 --> 00:42:09,070
circuit<font color="#CCCCCC"> directly rather</font><font color="#E5E5E5"> than having to</font>

969
00:42:06,930 --> 00:42:10,899
query the quantum circuit additional

970
00:42:09,070 --> 00:42:12,910
times<font color="#CCCCCC"> that's a really good question</font><font color="#E5E5E5"> and</font>

971
00:42:10,900 --> 00:42:15,460
something<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think is still lacking in</font>

972
00:42:12,910 --> 00:42:18,100
the literature<font color="#CCCCCC"> I know there</font><font color="#E5E5E5"> are examples</font>

973
00:42:15,460 --> 00:42:21,700
of quantum circuits that do numerical

974
00:42:18,100 --> 00:42:23,190
differentiation<font color="#E5E5E5"> in by themselves I'm not</font>

975
00:42:21,700 --> 00:42:25,569
sure if there's one for and local

976
00:42:23,190 --> 00:42:26,350
derivations but a differentiation that's

977
00:42:25,570 --> 00:42:28,360
something we're looking into

978
00:42:26,350 --> 00:42:30,220
at the moment<font color="#E5E5E5"> with the way it's set up</font>

979
00:42:28,360 --> 00:42:32,500
<font color="#E5E5E5">it's a you're only ever</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> a constant</font>

980
00:42:30,220 --> 00:42:34,450
<font color="#CCCCCC">overhead so</font><font color="#E5E5E5"> you're any other</font><font color="#CCCCCC"> some</font>

981
00:42:32,500 --> 00:42:37,030
querying<font color="#E5E5E5"> the circuits maximum two</font>

982
00:42:34,450 --> 00:42:38,859
additional times per parameter<font color="#CCCCCC"> in some</font>

983
00:42:37,030 --> 00:42:41,220
cases we<font color="#E5E5E5"> could actually rewrite it so</font>

984
00:42:38,860 --> 00:42:43,960
that the parameters shift<font color="#CCCCCC"> to rule only</font>

985
00:42:41,220 --> 00:42:45,819
only requires<font color="#CCCCCC"> two one the additional</font>

986
00:42:43,960 --> 00:42:47,680
query to<font color="#E5E5E5"> the circuit so some gates we've</font>

987
00:42:45,820 --> 00:42:49,720
identified do allow that<font color="#E5E5E5"> but at the</font>

988
00:42:47,680 --> 00:42:51,310
moment because<font color="#E5E5E5"> we're generalizing it for</font>

989
00:42:49,720 --> 00:42:53,609
<font color="#CCCCCC">everything we haven't worked in</font><font color="#E5E5E5"> those</font>

990
00:42:51,310 --> 00:42:53,610
optimizations

991
00:43:03,440 --> 00:43:17,910
yes with what<font color="#E5E5E5"> okay so the</font><font color="#CCCCCC"> question is if</font>

992
00:43:16,320 --> 00:43:20,670
you use<font color="#E5E5E5"> nonlinear gates does Penny Lane</font>

993
00:43:17,910 --> 00:43:22,920
<font color="#E5E5E5">fall back so to other methods so that's</font>

994
00:43:20,670 --> 00:43:24,450
that's the case yeah<font color="#CCCCCC"> so we feel we've</font>

995
00:43:22,920 --> 00:43:26,250
got numerical differentiation<font color="#CCCCCC"> also</font>

996
00:43:24,450 --> 00:43:27,990
<font color="#E5E5E5">built-in to Penny Lane so if Penny Lane</font>

997
00:43:26,250 --> 00:43:29,790
<font color="#E5E5E5">ever comes across a case where it can't</font>

998
00:43:27,990 --> 00:43:31,080
do the<font color="#CCCCCC"> alidade gradient so for instance</font>

999
00:43:29,790 --> 00:43:33,990
the<font color="#CCCCCC"> keurig</font><font color="#E5E5E5"> a to the cubic phase gate</font>

1000
00:43:31,080 --> 00:43:36,090
<font color="#E5E5E5">where like gradients don't exist then it</font>

1001
00:43:33,990 --> 00:43:37,890
automatically falls back to<font color="#E5E5E5"> finite</font>

1002
00:43:36,090 --> 00:43:56,310
differences<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I think like</font>

1003
00:43:37,890 --> 00:43:57,180
<font color="#E5E5E5">second-order finite differences we do we</font>

1004
00:43:56,310 --> 00:44:01,140
have some papers where we're using

1005
00:43:57,180 --> 00:44:02,279
<font color="#CCCCCC">multiple layers I</font><font color="#E5E5E5"> I didn't work on that</font>

1006
00:44:01,140 --> 00:44:04,830
research<font color="#CCCCCC"> so I can't tell you in more</font>

1007
00:44:02,280 --> 00:44:07,620
<font color="#CCCCCC">detail but I advise you</font><font color="#E5E5E5"> to check out on</font>

1008
00:44:04,830 --> 00:44:10,700
the archive<font color="#E5E5E5"> so particularly the CV</font>

1009
00:44:07,620 --> 00:44:10,700
<font color="#E5E5E5">quantum neural network paper</font>

1010
00:44:18,540 --> 00:44:24,210
[Applause]

