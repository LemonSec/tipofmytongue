1
00:00:04,630 --> 00:00:10,330
<font color="#CCCCCC">and so good morning hello</font><font color="#E5E5E5"> I'm Neil</font>

2
00:00:08,320 --> 00:00:12,549
Roberts<font color="#CCCCCC"> my work on the graphics team at</font>

3
00:00:10,330 --> 00:00:16,560
regalia<font color="#E5E5E5"> and I'm going</font><font color="#CCCCCC"> to talk about VJ</font>

4
00:00:12,549 --> 00:00:20,950
runner<font color="#CCCCCC"> so that's an overview of the talk</font>

5
00:00:16,560 --> 00:00:23,740
so what is<font color="#CCCCCC"> VK runner so as you know</font><font color="#E5E5E5"> I'm</font>

6
00:00:20,950 --> 00:00:25,900
sure on a modern graphics driver<font color="#E5E5E5"> the</font>

7
00:00:23,740 --> 00:00:29,650
<font color="#E5E5E5">biggest part of the driver is basically</font>

8
00:00:25,900 --> 00:00:31,448
a compiler<font color="#E5E5E5"> so when developing the driver</font>

9
00:00:29,650 --> 00:00:35,320
the biggest thing you want<font color="#E5E5E5"> to test this</font>

10
00:00:31,449 --> 00:00:39,069
<font color="#E5E5E5">obviously</font><font color="#CCCCCC"> a compiler so VK</font><font color="#E5E5E5"> runner is a</font>

11
00:00:35,320 --> 00:00:41,769
tool to<font color="#CCCCCC"> help</font><font color="#E5E5E5"> test running shaders on</font>

12
00:00:39,069 --> 00:00:44,800
your Vulcan driver so it's inspired by

13
00:00:41,769 --> 00:00:48,519
there's a tool in piglet so piglet is a

14
00:00:44,800 --> 00:00:50,649
test suite<font color="#CCCCCC"> for</font><font color="#E5E5E5"> OpenGL and people it has</font>

15
00:00:48,519 --> 00:00:53,170
a tool called shader run<font color="#E5E5E5"> out which is</font>

16
00:00:50,649 --> 00:00:55,690
basically the same<font color="#CCCCCC"> thing it lets</font><font color="#E5E5E5"> you</font>

17
00:00:53,170 --> 00:00:58,479
write little test scripts which just

18
00:00:55,690 --> 00:01:01,748
have shaders in<font color="#E5E5E5"> them and a few test</font>

19
00:00:58,479 --> 00:01:04,690
commands to run<font color="#E5E5E5"> those shaders so well</font>

20
00:01:01,749 --> 00:01:08,829
<font color="#CCCCCC">Luque runner</font><font color="#E5E5E5"> it's the same idea</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> for</font>

21
00:01:04,690 --> 00:01:13,360
Vulcan so you want<font color="#E5E5E5"> it has</font><font color="#CCCCCC"> tries to have</font>

22
00:01:08,829 --> 00:01:20,589
the<font color="#CCCCCC"> minimal overhead to write a test</font>

23
00:01:13,360 --> 00:01:23,079
just<font color="#E5E5E5"> with a simple script so that's an</font>

24
00:01:20,590 --> 00:01:26,140
<font color="#E5E5E5">example of a complete script so it has</font>

25
00:01:23,079 --> 00:01:28,779
like the windows<font color="#CCCCCC"> any format with a</font>

26
00:01:26,140 --> 00:01:31,180
section for each shader<font color="#E5E5E5"> and so in this</font>

27
00:01:28,780 --> 00:01:32,439
case<font color="#E5E5E5"> for the vertex shader</font><font color="#CCCCCC"> I've just</font>

28
00:01:31,180 --> 00:01:36,820
said<font color="#CCCCCC"> let ik say that passed through</font>

29
00:01:32,439 --> 00:01:39,669
that's just<font color="#E5E5E5"> a shortcut to make a minimal</font>

30
00:01:36,820 --> 00:01:42,788
vertex shader<font color="#CCCCCC"> it's just copies</font><font color="#E5E5E5"> one</font>

31
00:01:39,670 --> 00:01:46,570
attribute<font color="#E5E5E5"> over to do position and then</font>

32
00:01:42,789 --> 00:01:51,249
I've made<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> fragment shader</font><font color="#CCCCCC"> it's</font>

33
00:01:46,570 --> 00:01:54,008
just the output<font color="#E5E5E5"> screen and then in the</font>

34
00:01:51,249 --> 00:01:57,249
last<font color="#E5E5E5"> section</font><font color="#CCCCCC"> is that the test section so</font>

35
00:01:54,009 --> 00:02:00,399
it's a really<font color="#CCCCCC"> high-level</font><font color="#E5E5E5"> language to</font>

36
00:01:57,249 --> 00:02:02,499
just run some tests<font color="#E5E5E5"> with the shader</font><font color="#CCCCCC"> so</font>

37
00:02:00,399 --> 00:02:05,109
in this case<font color="#CCCCCC"> draw rect</font><font color="#E5E5E5"> it just draws a</font>

38
00:02:02,499 --> 00:02:07,960
full screen<font color="#E5E5E5"> rectangle and then probe</font>

39
00:02:05,109 --> 00:02:11,519
that probes the frame buffer for their

40
00:02:07,960 --> 00:02:15,790
color and<font color="#CCCCCC"> then to run</font><font color="#E5E5E5"> it so</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> just a</font>

41
00:02:11,520 --> 00:02:17,080
standalone<font color="#E5E5E5"> program you just run it with</font>

42
00:02:15,790 --> 00:02:17,470
<font color="#CCCCCC">the name of the script</font><font color="#E5E5E5"> on the command</font>

43
00:02:17,080 --> 00:02:19,390
line

44
00:02:17,470 --> 00:02:21,640
and it tells you whether it worked or

45
00:02:19,390 --> 00:02:26,170
not<font color="#CCCCCC"> and in this case it didn't work</font>

46
00:02:21,640 --> 00:02:29,619
because the shader wrote a green color

47
00:02:26,170 --> 00:02:31,869
out<font color="#E5E5E5"> and then it's probing for a red</font>

48
00:02:29,620 --> 00:02:36,540
color<font color="#CCCCCC"> so it's telling you</font><font color="#E5E5E5"> they've got</font>

49
00:02:31,870 --> 00:02:41,380
<font color="#E5E5E5">the wrong color so so behind the scenes</font>

50
00:02:36,540 --> 00:02:43,540
<font color="#CCCCCC">so that's VK</font><font color="#E5E5E5"> runner because</font><font color="#CCCCCC"> they're on</font>

51
00:02:41,380 --> 00:02:46,750
Vulcan them it can't consume<font color="#E5E5E5"> GLSL</font>

52
00:02:43,540 --> 00:02:51,670
shaders obviously so it needs<font color="#E5E5E5"> to convert</font>

53
00:02:46,750 --> 00:02:52,900
consumer<font color="#E5E5E5"> V shaders so VK runner compiles</font>

54
00:02:51,670 --> 00:02:55,959
the GLSL shaders

55
00:02:52,900 --> 00:02:59,110
into spur<font color="#CCCCCC"> v by invoking jealous airline</font>

56
00:02:55,960 --> 00:03:03,700
with an<font color="#E5E5E5"> external process and it creates</font>

57
00:02:59,110 --> 00:03:06,250
pipelines<font color="#E5E5E5"> because</font><font color="#CCCCCC"> of the state that it's</font>

58
00:03:03,700 --> 00:03:09,790
<font color="#E5E5E5">needed</font><font color="#CCCCCC"> to run their commands</font><font color="#E5E5E5"> and it</font>

59
00:03:06,250 --> 00:03:14,710
creates an off-screen frame buffer<font color="#E5E5E5"> so</font>

60
00:03:09,790 --> 00:03:16,780
unlike shader runner on piglet<font color="#E5E5E5"> so on a</font>

61
00:03:14,710 --> 00:03:19,180
shader runner it uses the<font color="#CCCCCC"> windows</font><font color="#E5E5E5"> system</font>

62
00:03:16,780 --> 00:03:22,090
to<font color="#E5E5E5"> create an actual like</font><font color="#CCCCCC"> X window or</font>

63
00:03:19,180 --> 00:03:24,220
<font color="#CCCCCC">Waylon window or whatever</font><font color="#E5E5E5"> on VK runner</font>

64
00:03:22,090 --> 00:03:26,560
<font color="#E5E5E5">and because you don't necessarily need a</font>

65
00:03:24,220 --> 00:03:29,830
<font color="#CCCCCC">window</font><font color="#E5E5E5"> system for</font><font color="#CCCCCC"> Vulcan it just uses an</font>

66
00:03:26,560 --> 00:03:31,959
off-screen buffer and then it puts all

67
00:03:29,830 --> 00:03:34,150
their test commands into a command

68
00:03:31,959 --> 00:03:35,680
buffer and<font color="#CCCCCC"> executes them</font><font color="#E5E5E5"> and then you</font>

69
00:03:34,150 --> 00:03:42,090
<font color="#E5E5E5">can probe</font><font color="#CCCCCC"> the result there's one of the</font>

70
00:03:35,680 --> 00:03:45,459
test commands so<font color="#E5E5E5"> just a bit of history</font>

71
00:03:42,090 --> 00:03:49,170
<font color="#E5E5E5">why did we start working on this so</font>

72
00:03:45,459 --> 00:03:52,060
<font color="#E5E5E5">agalya has also been working on adding</font>

73
00:03:49,170 --> 00:03:54,670
<font color="#CCCCCC">Murphy support to Intel's</font>

74
00:03:52,060 --> 00:03:58,120
OpenGL driver so that's via the<font color="#CCCCCC"> app</font>

75
00:03:54,670 --> 00:04:01,750
<font color="#CCCCCC">geodes Purvi extension so on the</font>

76
00:03:58,120 --> 00:04:05,350
internal i-96 fire driver the the

77
00:04:01,750 --> 00:04:09,730
compiler for<font color="#E5E5E5"> open govt</font><font color="#CCCCCC"> and volcans Purvi</font>

78
00:04:05,350 --> 00:04:13,329
it's the same compiler<font color="#E5E5E5"> so we were</font>

79
00:04:09,730 --> 00:04:18,070
testing<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Murphy on OpenGL</font><font color="#E5E5E5"> by</font>

80
00:04:13,330 --> 00:04:19,810
converting<font color="#E5E5E5"> a bunch of by trying to</font>

81
00:04:18,070 --> 00:04:21,269
automatically convert<font color="#E5E5E5"> most of the shader</font>

82
00:04:19,810 --> 00:04:25,539
<font color="#E5E5E5">runner tests in piglet</font>

83
00:04:21,269 --> 00:04:28,359
to spare<font color="#CCCCCC"> V so we had a script started by</font>

84
00:04:25,539 --> 00:04:29,200
niccolò Hamlet<font color="#E5E5E5"> and we continued working</font>

85
00:04:28,360 --> 00:04:32,380
<font color="#E5E5E5">on that</font>

86
00:04:29,200 --> 00:04:37,719
to convert a huge amount of tests from

87
00:04:32,380 --> 00:04:40,870
piglet<font color="#E5E5E5"> into Sperry and I think that</font>

88
00:04:37,720 --> 00:04:43,420
ended<font color="#E5E5E5"> up testing quite a lot more of the</font>

89
00:04:40,870 --> 00:04:46,600
just<font color="#E5E5E5"> the general spur the compiler</font><font color="#CCCCCC"> than</font>

90
00:04:43,420 --> 00:04:50,440
<font color="#E5E5E5">had been tested with the Locarno CTS</font>

91
00:04:46,600 --> 00:04:52,450
<font color="#E5E5E5">tests so picked up a few more</font><font color="#CCCCCC"> problems</font>

92
00:04:50,440 --> 00:04:55,480
<font color="#CCCCCC">that</font><font color="#E5E5E5"> perhaps weren't seen before</font>

93
00:04:52,450 --> 00:04:58,330
so when we ran into a<font color="#E5E5E5"> problem on the</font>

94
00:04:55,480 --> 00:04:59,560
OpenGL<font color="#CCCCCC"> supervee we often</font><font color="#E5E5E5"> went sure</font>

95
00:04:58,330 --> 00:05:01,870
whether that's<font color="#E5E5E5"> a problem that we'd</font>

96
00:04:59,560 --> 00:05:04,000
introduced on<font color="#CCCCCC"> this pervy extension or</font>

97
00:05:01,870 --> 00:05:06,430
whether that<font color="#CCCCCC"> was just an existing</font>

98
00:05:04,000 --> 00:05:08,440
<font color="#E5E5E5">problem with this very compiler so we</font>

99
00:05:06,430 --> 00:05:10,870
really wanted a quick<font color="#CCCCCC"> way a quick way to</font>

100
00:05:08,440 --> 00:05:14,380
be able<font color="#E5E5E5"> to run the shader</font><font color="#CCCCCC"> tests that we</font>

101
00:05:10,870 --> 00:05:18,310
had from shader<font color="#CCCCCC"> Runner</font><font color="#E5E5E5"> and run them</font><font color="#CCCCCC"> with</font>

102
00:05:14,380 --> 00:05:23,700
the the Vulkan API as<font color="#CCCCCC"> well so it's oh</font>

103
00:05:18,310 --> 00:05:26,980
<font color="#E5E5E5">yeah so VK</font><font color="#CCCCCC"> Rhino</font><font color="#E5E5E5"> was just a way to join</font>

104
00:05:23,700 --> 00:05:28,599
have a<font color="#CCCCCC"> utility that</font><font color="#E5E5E5"> works</font><font color="#CCCCCC"> as close as</font>

105
00:05:26,980 --> 00:05:32,550
possible<font color="#E5E5E5"> to the script format</font><font color="#CCCCCC"> I shade a</font>

106
00:05:28,600 --> 00:05:32,550
runner<font color="#E5E5E5"> but obviously just runs on Vulcan</font>

107
00:05:34,980 --> 00:05:41,830
<font color="#CCCCCC">okay so so there are it's not quite</font>

108
00:05:39,610 --> 00:05:44,110
exactly the same script format because

109
00:05:41,830 --> 00:05:46,960
obviously Vulcan is a different<font color="#CCCCCC"> API</font><font color="#E5E5E5"> so</font>

110
00:05:44,110 --> 00:05:50,890
it works slightly differently<font color="#CCCCCC"> so for</font>

111
00:05:46,960 --> 00:05:54,640
<font color="#E5E5E5">example on OpenGL</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a lot more API</font>

112
00:05:50,890 --> 00:05:56,740
to query state about<font color="#CCCCCC"> the shaders</font><font color="#E5E5E5"> so for</font>

113
00:05:54,640 --> 00:05:59,680
<font color="#E5E5E5">example in your compiler shader</font><font color="#CCCCCC"> you can</font>

114
00:05:56,740 --> 00:06:01,270
use the OpenGL API to query what

115
00:05:59,680 --> 00:06:04,690
uniforms are available and<font color="#E5E5E5"> what the</font>

116
00:06:01,270 --> 00:06:07,270
names are the<font color="#E5E5E5"> Vulcan</font><font color="#CCCCCC"> you're expected to</font>

117
00:06:04,690 --> 00:06:10,590
know<font color="#E5E5E5"> what you've done</font><font color="#CCCCCC"> so it doesn't give</font>

118
00:06:07,270 --> 00:06:13,570
you any API to tell you what you did so

119
00:06:10,590 --> 00:06:16,450
so we can't for example<font color="#CCCCCC"> use a uniform</font>

120
00:06:13,570 --> 00:06:20,140
names<font color="#E5E5E5"> in the test commands in the shader</font>

121
00:06:16,450 --> 00:06:24,690
runner<font color="#E5E5E5"> I have an example so this is an</font>

122
00:06:20,140 --> 00:06:29,680
example<font color="#E5E5E5"> with shader runner using OpenGL</font>

123
00:06:24,690 --> 00:06:32,830
<font color="#E5E5E5">so in the shader it's got these global</font>

124
00:06:29,680 --> 00:06:37,120
uniforms and this is what everyone's

125
00:06:32,830 --> 00:06:38,979
used to I guess<font color="#E5E5E5"> and so they're just</font><font color="#CCCCCC"> in</font>

126
00:06:37,120 --> 00:06:39,550
some sort of magic global namespace and

127
00:06:38,980 --> 00:06:42,810
the driver

128
00:06:39,550 --> 00:06:46,810
<font color="#E5E5E5">is expected to put them somewhere and</font>

129
00:06:42,810 --> 00:06:48,760
they have names<font color="#CCCCCC"> and</font><font color="#E5E5E5"> in the test commands</font>

130
00:06:46,810 --> 00:06:51,070
you can<font color="#E5E5E5"> use</font><font color="#CCCCCC"> the actual name</font><font color="#E5E5E5"> you had</font>

131
00:06:48,760 --> 00:06:55,210
<font color="#CCCCCC">there to set the value of the uniform</font>

132
00:06:51,070 --> 00:07:00,219
and<font color="#CCCCCC"> show the runner</font><font color="#E5E5E5"> uses the OpenGL API</font>

133
00:06:55,210 --> 00:07:03,250
to get<font color="#E5E5E5"> those names out so with on Vulcan</font>

134
00:07:00,220 --> 00:07:05,920
<font color="#CCCCCC">that's not possible</font><font color="#E5E5E5"> so to start with you</font>

135
00:07:03,250 --> 00:07:08,220
<font color="#CCCCCC">can't just put uniforms in this magic</font>

136
00:07:05,920 --> 00:07:10,630
global namespace<font color="#CCCCCC"> you need to explicitly</font>

137
00:07:08,220 --> 00:07:12,160
<font color="#E5E5E5">give</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> a hint to the driver where</font><font color="#CCCCCC"> to</font>

138
00:07:10,630 --> 00:07:14,680
put them<font color="#CCCCCC"> so in this case the the</font>

139
00:07:12,160 --> 00:07:17,130
<font color="#E5E5E5">simplest way to convert the the shader</font>

140
00:07:14,680 --> 00:07:21,730
is just to make a<font color="#E5E5E5"> push constant block</font>

141
00:07:17,130 --> 00:07:23,350
<font color="#E5E5E5">and so once these are compiled and given</font>

142
00:07:21,730 --> 00:07:26,190
to<font color="#CCCCCC"> the driver the driver won't let you</font>

143
00:07:23,350 --> 00:07:29,110
query the<font color="#E5E5E5"> names as we're saying so to</font>

144
00:07:26,190 --> 00:07:31,450
set the value in the test<font color="#E5E5E5"> commands</font>

145
00:07:29,110 --> 00:07:35,830
<font color="#E5E5E5">instead of setting the names</font><font color="#CCCCCC"> there we</font>

146
00:07:31,450 --> 00:07:40,360
set the<font color="#E5E5E5"> just using the offsets</font><font color="#CCCCCC"> into the</font>

147
00:07:35,830 --> 00:07:44,680
uniform block and that's<font color="#E5E5E5"> also instantly</font>

148
00:07:40,360 --> 00:07:49,650
the same that happens<font color="#E5E5E5"> when using</font><font color="#CCCCCC"> smurphy</font>

149
00:07:44,680 --> 00:07:49,650
on OpenGL<font color="#E5E5E5"> the the script</font><font color="#CCCCCC"> there automatic</font>

150
00:07:55,529 --> 00:07:57,589
you

151
00:08:04,909 --> 00:08:11,550
so so<font color="#E5E5E5"> shade a runner</font><font color="#CCCCCC"> I don't exactly</font>

152
00:08:09,509 --> 00:08:13,020
know<font color="#CCCCCC"> the history but I get the</font>

153
00:08:11,550 --> 00:08:14,789
<font color="#E5E5E5">impression it's just sort of started out</font>

154
00:08:13,020 --> 00:08:17,008
quite<font color="#E5E5E5"> small as it sort of</font><font color="#CCCCCC"> growing</font>

155
00:08:14,789 --> 00:08:22,259
organically<font color="#CCCCCC"> over time and it's now quite</font>

156
00:08:17,009 --> 00:08:24,870
<font color="#CCCCCC">a large single C</font><font color="#E5E5E5"> file so weekly runner</font>

157
00:08:22,259 --> 00:08:26,250
<font color="#E5E5E5">is written from</font><font color="#CCCCCC"> scratch with there a bit</font>

158
00:08:24,870 --> 00:08:28,800
of hindsight so I've<font color="#E5E5E5"> tried to like</font>

159
00:08:26,250 --> 00:08:32,789
<font color="#E5E5E5">organize the code a bit more so like the</font>

160
00:08:28,800 --> 00:08:35,399
the code to pass the the<font color="#E5E5E5"> script is</font>

161
00:08:32,789 --> 00:08:39,539
separated from the<font color="#E5E5E5"> bits that execute it</font>

162
00:08:35,399 --> 00:08:42,120
and so on<font color="#E5E5E5"> and also just because writing</font>

163
00:08:39,539 --> 00:08:44,130
code for<font color="#CCCCCC"> Vulcan</font><font color="#E5E5E5"> it's a lot more verbose</font>

164
00:08:42,120 --> 00:08:47,630
so obviously you<font color="#E5E5E5"> just need to have a lot</font>

165
00:08:44,130 --> 00:08:51,990
<font color="#CCCCCC">more code so keeping it all in one file</font>

166
00:08:47,630 --> 00:08:55,260
<font color="#CCCCCC">is</font><font color="#E5E5E5"> not practical so</font><font color="#CCCCCC"> I also tried to</font><font color="#E5E5E5"> make</font>

167
00:08:51,990 --> 00:08:57,810
<font color="#E5E5E5">it so that a lot</font><font color="#CCCCCC"> of commands</font><font color="#E5E5E5"> are</font>

168
00:08:55,260 --> 00:09:01,290
actually<font color="#E5E5E5"> automatically generated so for</font>

169
00:08:57,810 --> 00:09:04,140
example<font color="#E5E5E5"> there's a test commands to set</font>

170
00:09:01,290 --> 00:09:07,399
all of<font color="#E5E5E5"> the properties</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> are known on</font>

171
00:09:04,140 --> 00:09:10,199
a<font color="#E5E5E5"> pipeline and so there's sort of</font>

172
00:09:07,399 --> 00:09:13,820
automatically taken from the header file

173
00:09:10,200 --> 00:09:18,000
which describes<font color="#CCCCCC"> the pipeline crate info</font>

174
00:09:13,820 --> 00:09:20,220
so in VK<font color="#E5E5E5"> runner there's a command for</font>

175
00:09:18,000 --> 00:09:22,649
each member<font color="#CCCCCC"> of the pipeline create</font>

176
00:09:20,220 --> 00:09:24,270
infrastructure and it just sort<font color="#CCCCCC"> of</font>

177
00:09:22,649 --> 00:09:27,600
automatically<font color="#CCCCCC"> puts the value in the</font>

178
00:09:24,270 --> 00:09:30,630
right offset<font color="#CCCCCC"> in the struct and the same</font>

179
00:09:27,600 --> 00:09:33,570
goes for the<font color="#E5E5E5"> format's</font><font color="#CCCCCC"> that it</font><font color="#E5E5E5"> uses</font>

180
00:09:30,630 --> 00:09:36,209
<font color="#CCCCCC">because in</font><font color="#E5E5E5"> Vulcan it has</font><font color="#CCCCCC"> a really</font><font color="#E5E5E5"> nice</font>

181
00:09:33,570 --> 00:09:38,190
enum for all<font color="#CCCCCC"> of the format's and they're</font>

182
00:09:36,209 --> 00:09:40,170
structured in such a way that<font color="#E5E5E5"> just</font>

183
00:09:38,190 --> 00:09:44,370
looking<font color="#E5E5E5"> at the name of the enum</font><font color="#CCCCCC"> you can</font>

184
00:09:40,170 --> 00:09:47,670
work out<font color="#E5E5E5"> exactly how to store data in</font>

185
00:09:44,370 --> 00:09:51,149
<font color="#E5E5E5">that format so there's like a Python</font>

186
00:09:47,670 --> 00:09:56,370
<font color="#CCCCCC">script in via karana to make a</font><font color="#E5E5E5"> sea table</font>

187
00:09:51,149 --> 00:09:58,529
out of<font color="#CCCCCC"> those enum names and then so then</font>

188
00:09:56,370 --> 00:10:00,630
<font color="#CCCCCC">VK vana can work</font><font color="#E5E5E5"> because they're all the</font>

189
00:09:58,529 --> 00:10:03,570
<font color="#CCCCCC">format's</font><font color="#E5E5E5"> and like so if you have your</font>

190
00:10:00,630 --> 00:10:06,089
frame buffer in any format<font color="#E5E5E5"> VK runner can</font>

191
00:10:03,570 --> 00:10:09,510
use the<font color="#E5E5E5"> sea table to work out how to</font>

192
00:10:06,089 --> 00:10:12,350
<font color="#E5E5E5">extract RGB values from that to probe</font>

193
00:10:09,510 --> 00:10:12,350
the buffer

194
00:10:13,570 --> 00:10:22,380
so<font color="#CCCCCC"> some more examples so some more</font>

195
00:10:16,240 --> 00:10:25,660
features<font color="#E5E5E5"> of what</font><font color="#CCCCCC"> weekly runner can do so</font>

196
00:10:22,380 --> 00:10:28,570
<font color="#E5E5E5">so as well as sections for writing the</font>

197
00:10:25,660 --> 00:10:30,880
the shaders<font color="#CCCCCC"> and the test section in the</font>

198
00:10:28,570 --> 00:10:34,540
same as with shader runner<font color="#CCCCCC"> there's a</font>

199
00:10:30,880 --> 00:10:38,949
section<font color="#E5E5E5"> for like writing your vertex</font>

200
00:10:34,540 --> 00:10:40,389
buffer so at the start<font color="#E5E5E5"> of the section</font>

201
00:10:38,949 --> 00:10:44,050
there's a header to describe the

202
00:10:40,389 --> 00:10:48,160
attributes<font color="#E5E5E5"> and so the first part</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> each</font>

203
00:10:44,050 --> 00:10:49,810
attribute is<font color="#E5E5E5"> the location because in</font>

204
00:10:48,160 --> 00:10:53,170
Vulcan you have to give them an explicit

205
00:10:49,810 --> 00:10:56,229
location to each<font color="#E5E5E5"> attribute and then the</font>

206
00:10:53,170 --> 00:10:58,240
second part<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> format name so this</font>

207
00:10:56,230 --> 00:11:02,170
<font color="#E5E5E5">is slightly</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> from shader runner</font>

208
00:10:58,240 --> 00:11:06,880
in shader honor because the<font color="#CCCCCC"> GL format</font>

209
00:11:02,170 --> 00:11:10,240
names<font color="#CCCCCC"> a bit strange it's easier in</font><font color="#E5E5E5"> this</font>

210
00:11:06,880 --> 00:11:12,910
case you can just<font color="#E5E5E5"> use the actual format</font>

211
00:11:10,240 --> 00:11:16,959
names from the Vulcan enum and it's that

212
00:11:12,910 --> 00:11:18,910
way<font color="#E5E5E5"> you can support all of them for</font>

213
00:11:16,959 --> 00:11:22,029
compatibility<font color="#CCCCCC"> became and I can actually</font>

214
00:11:18,910 --> 00:11:26,860
<font color="#E5E5E5">understand</font><font color="#CCCCCC"> the piglet shader runner</font>

215
00:11:22,029 --> 00:11:29,680
format as well so so yeah once you've

216
00:11:26,860 --> 00:11:31,630
written the the header there<font color="#CCCCCC"> you can</font>

217
00:11:29,680 --> 00:11:34,630
just<font color="#CCCCCC"> like the values out for all your</font>

218
00:11:31,630 --> 00:11:36,459
attributes and<font color="#CCCCCC"> the cave owner can use</font>

219
00:11:34,630 --> 00:11:42,730
the<font color="#CCCCCC"> sea table to figure</font><font color="#E5E5E5"> out how to pack</font>

220
00:11:36,459 --> 00:11:45,099
them into<font color="#E5E5E5"> the struct so just to make it</font>

221
00:11:42,730 --> 00:11:48,670
<font color="#E5E5E5">clear that that's those two attributes</font>

222
00:11:45,100 --> 00:11:50,740
<font color="#E5E5E5">there that sets input for your vertex</font>

223
00:11:48,670 --> 00:11:53,620
shader so invoking you have to<font color="#CCCCCC"> specify</font>

224
00:11:50,740 --> 00:11:58,389
an explicit location and specifies the

225
00:11:53,620 --> 00:11:59,949
input for those attributes there so

226
00:11:58,389 --> 00:12:01,959
another section you can add you can add

227
00:11:59,949 --> 00:12:04,029
the indices so if you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> B in the</font><font color="#E5E5E5"> c</font>

228
00:12:01,959 --> 00:12:09,399
section<font color="#CCCCCC"> you can just list during</font><font color="#E5E5E5"> the C's</font>

229
00:12:04,029 --> 00:12:13,540
as numbers<font color="#E5E5E5"> so then in the Test section</font>

230
00:12:09,399 --> 00:12:15,399
<font color="#E5E5E5">one so just combining those that vertex</font>

231
00:12:13,540 --> 00:12:18,069
<font color="#E5E5E5">data with the indices in the Test</font>

232
00:12:15,399 --> 00:12:20,050
section<font color="#E5E5E5"> to actually draw something then</font>

233
00:12:18,069 --> 00:12:20,560
then you<font color="#E5E5E5"> can just use the draw arrays</font>

234
00:12:20,050 --> 00:12:22,180
command

235
00:12:20,560 --> 00:12:25,800
you can say index to<font color="#E5E5E5"> use the index</font>

236
00:12:22,180 --> 00:12:28,959
<font color="#E5E5E5">buffer</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> you can set the topology</font>

237
00:12:25,800 --> 00:12:32,889
using again using<font color="#CCCCCC"> median um I think it</font>

238
00:12:28,959 --> 00:12:34,660
<font color="#E5E5E5">supports</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> big names as well for to</font>

239
00:12:32,889 --> 00:12:38,740
make<font color="#E5E5E5"> it easier to convert</font><font color="#CCCCCC"> bigger ad</font>

240
00:12:34,660 --> 00:12:42,100
<font color="#CCCCCC">runners</font><font color="#E5E5E5"> grips and then in this case</font><font color="#CCCCCC"> of I</font>

241
00:12:38,740 --> 00:12:43,480
decided another command as<font color="#CCCCCC"> well so this</font>

242
00:12:42,100 --> 00:12:46,319
<font color="#E5E5E5">is an example of what I was talking</font>

243
00:12:43,480 --> 00:12:49,899
<font color="#CCCCCC">about with</font><font color="#E5E5E5"> the automatically generated</font>

244
00:12:46,319 --> 00:12:52,569
<font color="#CCCCCC">commands primitive restart enable</font><font color="#E5E5E5"> that's</font>

245
00:12:49,899 --> 00:12:55,629
the name<font color="#CCCCCC"> of a member on the pipeline</font>

246
00:12:52,569 --> 00:13:00,969
create infrastructure setting that

247
00:12:55,629 --> 00:13:03,249
command<font color="#E5E5E5"> just sets that member on the</font>

248
00:13:00,970 --> 00:13:05,800
<font color="#CCCCCC">pipeline</font><font color="#E5E5E5"> create infrastructure true</font><font color="#CCCCCC"> and</font>

249
00:13:03,249 --> 00:13:07,509
then whenever you execute a command via

250
00:13:05,800 --> 00:13:09,639
clear owner<font color="#E5E5E5"> works so what pipelines are</font>

251
00:13:07,509 --> 00:13:11,079
needed and<font color="#E5E5E5"> creates all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> pipelines</font>

252
00:13:09,639 --> 00:13:13,389
that are<font color="#E5E5E5"> needed and then picks the right</font>

253
00:13:11,079 --> 00:13:16,628
one<font color="#E5E5E5"> to execute with that state that you</font>

254
00:13:13,389 --> 00:13:19,839
<font color="#CCCCCC">describe and it's got obviously</font><font color="#E5E5E5"> some</font>

255
00:13:16,629 --> 00:13:21,459
defaults for the state so yeah I tried

256
00:13:19,839 --> 00:13:25,779
<font color="#E5E5E5">to pick sensible defaults so most</font><font color="#CCCCCC"> of the</font>

257
00:13:21,459 --> 00:13:28,149
time you don't need<font color="#E5E5E5"> to set anything so</font>

258
00:13:25,779 --> 00:13:30,430
<font color="#CCCCCC">that scripts</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> left that's</font><font color="#E5E5E5"> just a</font>

259
00:13:28,149 --> 00:13:34,480
combination of all<font color="#E5E5E5"> those previous</font>

260
00:13:30,430 --> 00:13:38,620
examples<font color="#E5E5E5"> I showed and if you run it</font>

261
00:13:34,480 --> 00:13:42,459
outputs<font color="#E5E5E5"> this</font><font color="#CCCCCC"> mess</font><font color="#E5E5E5"> the Guardian logo so</font>

262
00:13:38,620 --> 00:13:44,079
as I said there's no actual<font color="#CCCCCC"> winces so</font>

263
00:13:42,459 --> 00:13:46,719
there's no actual<font color="#E5E5E5"> window when you run in</font>

264
00:13:44,079 --> 00:13:48,370
<font color="#CCCCCC">vak runner but there's an option to</font>

265
00:13:46,720 --> 00:13:52,500
output the image if you<font color="#E5E5E5"> do want to look</font>

266
00:13:48,370 --> 00:13:52,500
at it so that's<font color="#CCCCCC"> how I</font><font color="#E5E5E5"> got that</font><font color="#CCCCCC"> image so</font>

267
00:13:53,250 --> 00:13:57,879
<font color="#CCCCCC">another section there's a require</font>

268
00:13:55,660 --> 00:14:02,649
section so this is also<font color="#E5E5E5"> available in</font>

269
00:13:57,879 --> 00:14:06,309
<font color="#CCCCCC">piglets ad runner</font><font color="#E5E5E5"> so you can just list</font>

270
00:14:02,649 --> 00:14:07,689
an extension for example and when<font color="#E5E5E5"> the VK</font>

271
00:14:06,309 --> 00:14:09,639
runner runs the test it<font color="#E5E5E5"> will check that</font>

272
00:14:07,689 --> 00:14:12,699
<font color="#CCCCCC">the extensions available on the driver</font>

273
00:14:09,639 --> 00:14:16,720
<font color="#E5E5E5">and if it's not available then the test</font>

274
00:14:12,699 --> 00:14:21,248
will report<font color="#E5E5E5"> skipped so piglet show the</font>

275
00:14:16,720 --> 00:14:25,540
runner has already<font color="#CCCCCC"> the a convention to</font>

276
00:14:21,249 --> 00:14:29,290
<font color="#E5E5E5">report either</font><font color="#CCCCCC"> past skipped or fail so VK</font>

277
00:14:25,540 --> 00:14:30,399
runner copies the same convention<font color="#CCCCCC"> so if</font>

278
00:14:29,290 --> 00:14:32,800
<font color="#CCCCCC">this</font><font color="#E5E5E5"> engine isn't variable then it</font>

279
00:14:30,399 --> 00:14:33,640
<font color="#CCCCCC">skipped it but also on both</font><font color="#E5E5E5"> in I wasn't</font>

280
00:14:32,800 --> 00:14:36,520
sure you know you have

281
00:14:33,640 --> 00:14:37,630
- if you want to use an<font color="#E5E5E5"> extension not</font>

282
00:14:36,520 --> 00:14:41,650
<font color="#E5E5E5">only do you have to check</font><font color="#CCCCCC"> for it you</font>

283
00:14:37,630 --> 00:14:44,310
have<font color="#E5E5E5"> to</font><font color="#CCCCCC"> also enable it so VK</font><font color="#E5E5E5"> trainer</font>

284
00:14:41,650 --> 00:14:44,310
<font color="#CCCCCC">will do</font><font color="#E5E5E5"> that as well</font>

285
00:14:44,740 --> 00:14:52,120
unlike GL as well as extensions<font color="#CCCCCC"> Vulcan</font>

286
00:14:48,610 --> 00:14:55,260
has features<font color="#E5E5E5"> so even things that</font><font color="#CCCCCC"> are in</font>

287
00:14:52,120 --> 00:14:58,540
core<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of things are optional</font>

288
00:14:55,260 --> 00:15:01,480
<font color="#E5E5E5">so there's a struct to enable to check</font>

289
00:14:58,540 --> 00:15:05,520
for<font color="#E5E5E5"> and enable features so that</font><font color="#CCCCCC"> the same</font>

290
00:15:01,480 --> 00:15:07,990
<font color="#E5E5E5">thing is here</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> took the struct and</font>

291
00:15:05,520 --> 00:15:10,660
converted them<font color="#E5E5E5"> all into commands there</font>

292
00:15:07,990 --> 00:15:12,100
so if you list any member<font color="#E5E5E5"> of that struct</font>

293
00:15:10,660 --> 00:15:14,829
it will check that<font color="#CCCCCC"> the features</font>

294
00:15:12,100 --> 00:15:20,290
available and then if so it will<font color="#E5E5E5"> enable</font>

295
00:15:14,830 --> 00:15:23,620
it<font color="#CCCCCC"> and you can also set the format of</font>

296
00:15:20,290 --> 00:15:30,760
the frame buffer<font color="#E5E5E5"> again using the format</font>

297
00:15:23,620 --> 00:15:32,980
enums and the size<font color="#E5E5E5"> so it</font><font color="#CCCCCC"> supports all</font>

298
00:15:30,760 --> 00:15:36,010
<font color="#E5E5E5">the</font><font color="#CCCCCC"> shader stages so complete shaders as</font>

299
00:15:32,980 --> 00:15:39,460
well<font color="#E5E5E5"> obviously</font><font color="#CCCCCC"> and so this is just</font><font color="#E5E5E5"> the</font>

300
00:15:36,010 --> 00:15:42,790
simple example<font color="#E5E5E5"> using an</font><font color="#CCCCCC"> SPL</font><font color="#E5E5E5"> and it fills</font>

301
00:15:39,460 --> 00:15:43,780
in a table of square roots<font color="#CCCCCC"> so instead of</font>

302
00:15:42,790 --> 00:15:46,319
<font color="#E5E5E5">the</font><font color="#CCCCCC"> drawer command you just have a</font>

303
00:15:43,780 --> 00:15:48,699
computer command to dispatch the compute

304
00:15:46,320 --> 00:15:50,890
and<font color="#CCCCCC"> then obviously</font><font color="#E5E5E5"> it's not writing to</font>

305
00:15:48,700 --> 00:15:55,660
<font color="#E5E5E5">the frame buffer so it's writing to an</font>

306
00:15:50,890 --> 00:16:01,300
<font color="#E5E5E5">SSP</font><font color="#CCCCCC"> oh and you can just probe the values</font>

307
00:15:55,660 --> 00:16:04,089
in the<font color="#E5E5E5"> SPO</font><font color="#CCCCCC"> so in all the previous</font>

308
00:16:01,300 --> 00:16:06,520
<font color="#CCCCCC">examples all the shader sections were</font>

309
00:16:04,090 --> 00:16:09,280
written in<font color="#CCCCCC"> GLSL but if you want to you</font>

310
00:16:06,520 --> 00:16:12,460
can also specify a shader section with

311
00:16:09,280 --> 00:16:14,530
<font color="#E5E5E5">Sperry</font><font color="#CCCCCC"> source so this is</font><font color="#E5E5E5"> really useful</font>

312
00:16:12,460 --> 00:16:17,170
<font color="#CCCCCC">if you want</font><font color="#E5E5E5"> to test a corner case with</font>

313
00:16:14,530 --> 00:16:19,300
<font color="#CCCCCC">spivey because</font><font color="#E5E5E5"> there's a lot of tests</font>

314
00:16:17,170 --> 00:16:21,610
<font color="#E5E5E5">that you might want to test that you you</font>

315
00:16:19,300 --> 00:16:25,540
can't get<font color="#E5E5E5"> the GLSL compiler to generate</font>

316
00:16:21,610 --> 00:16:27,340
this<font color="#CCCCCC"> Purvi that you want</font><font color="#E5E5E5"> so the cave</font>

317
00:16:25,540 --> 00:16:29,770
owner has a command line option<font color="#CCCCCC"> too when</font>

318
00:16:27,340 --> 00:16:33,010
you run the<font color="#E5E5E5"> test you can make it dump</font>

319
00:16:29,770 --> 00:16:36,010
out the<font color="#E5E5E5"> spur</font><font color="#CCCCCC"> via this</font><font color="#E5E5E5"> assembly and then</font>

320
00:16:33,010 --> 00:16:40,480
so<font color="#E5E5E5"> you can grab</font><font color="#CCCCCC"> that disassembly copy it</font>

321
00:16:36,010 --> 00:16:43,210
back into your shader<font color="#E5E5E5"> test and then you</font>

322
00:16:40,480 --> 00:16:44,440
can just modify it however you<font color="#E5E5E5"> want to</font>

323
00:16:43,210 --> 00:16:48,790
<font color="#E5E5E5">get there</font>

324
00:16:44,440 --> 00:16:50,590
the case<font color="#E5E5E5"> that you wanted to test so so</font>

325
00:16:48,790 --> 00:16:51,969
as well as<font color="#CCCCCC"> TLS Ellen's</font><font color="#E5E5E5"> pervy shaver</font>

326
00:16:50,590 --> 00:16:54,190
sections you<font color="#E5E5E5"> can also have a shader</font>

327
00:16:51,970 --> 00:16:58,120
section which just literally lists<font color="#E5E5E5"> this</font>

328
00:16:54,190 --> 00:16:59,470
<font color="#E5E5E5">pervy in binary format so obviously you</font>

329
00:16:58,120 --> 00:17:02,770
don't<font color="#CCCCCC"> want to write that by hand</font><font color="#E5E5E5"> but</font>

330
00:16:59,470 --> 00:17:06,430
there is a Python script in there we

331
00:17:02,770 --> 00:17:09,220
could<font color="#E5E5E5"> run a raffle to</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> a batch convert</font>

332
00:17:06,430 --> 00:17:10,689
all of<font color="#CCCCCC"> your tests to binary so I guess</font>

333
00:17:09,220 --> 00:17:12,370
the<font color="#E5E5E5"> main reason you'd want</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> that is</font>

334
00:17:10,689 --> 00:17:14,800
if<font color="#E5E5E5"> you want</font><font color="#CCCCCC"> to run on embedded platform</font>

335
00:17:12,369 --> 00:17:17,639
for<font color="#CCCCCC"> example we're putting GLSL line</font><font color="#E5E5E5"> is</font>

336
00:17:14,800 --> 00:17:17,639
<font color="#E5E5E5">not really</font><font color="#CCCCCC"> practical</font>

337
00:17:17,939 --> 00:17:26,189
so<font color="#CCCCCC"> there's once you run it through</font><font color="#E5E5E5"> the</font>

338
00:17:21,099 --> 00:17:26,188
script the test<font color="#E5E5E5"> script looks like that</font>

339
00:17:26,640 --> 00:17:33,280
so<font color="#CCCCCC"> the</font><font color="#E5E5E5"> current status so it can do all</font>

340
00:17:31,660 --> 00:17:35,950
<font color="#CCCCCC">chained stages it can</font><font color="#E5E5E5"> read and write</font>

341
00:17:33,280 --> 00:17:38,200
from SSB<font color="#CCCCCC"> OHS and</font><font color="#E5E5E5"> read from ubios I can</font>

342
00:17:35,950 --> 00:17:41,740
do vertex<font color="#E5E5E5"> data and simple drawing and it</font>

343
00:17:38,200 --> 00:17:45,670
can probe<font color="#CCCCCC"> the</font><font color="#E5E5E5"> frame buffer or SS</font><font color="#CCCCCC"> POS</font>

344
00:17:41,740 --> 00:17:47,380
it has a<font color="#E5E5E5"> library so when you build it it</font>

345
00:17:45,670 --> 00:17:49,720
<font color="#CCCCCC">builds a</font><font color="#E5E5E5"> little static library with the</font>

346
00:17:47,380 --> 00:17:52,870
public header and so that was useful<font color="#E5E5E5"> if</font>

347
00:17:49,720 --> 00:17:56,560
you want<font color="#E5E5E5"> to integrate it into another</font>

348
00:17:52,870 --> 00:17:58,540
test suite<font color="#E5E5E5"> so I it's quite</font>

349
00:17:56,560 --> 00:18:00,399
<font color="#E5E5E5">self-explanatory</font>

350
00:17:58,540 --> 00:18:02,440
you just give<font color="#CCCCCC"> it a source file and tell</font>

351
00:18:00,400 --> 00:18:04,950
it to execute<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and it will tell you if</font>

352
00:18:02,440 --> 00:18:04,950
it works or not

353
00:18:05,820 --> 00:18:13,750
<font color="#CCCCCC">so it says so far</font><font color="#E5E5E5"> we've got</font><font color="#CCCCCC"> VK runner</font>

354
00:18:10,690 --> 00:18:17,080
has been<font color="#E5E5E5"> integrated into the</font><font color="#CCCCCC"> vulcan cts</font>

355
00:18:13,750 --> 00:18:19,420
suite McComas cts suite<font color="#E5E5E5"> as far as</font><font color="#CCCCCC"> i know</font>

356
00:18:17,080 --> 00:18:21,760
<font color="#CCCCCC">this</font><font color="#E5E5E5"> currently only experimental tests I</font>

357
00:18:19,420 --> 00:18:25,420
don't think there's any actual tests

358
00:18:21,760 --> 00:18:28,330
relying on it and that<font color="#E5E5E5"> is using the API</font>

359
00:18:25,420 --> 00:18:30,790
that<font color="#CCCCCC"> I mentioned</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> that it can run the</font>

360
00:18:28,330 --> 00:18:34,330
tests without forking links to any

361
00:18:30,790 --> 00:18:37,200
external<font color="#E5E5E5"> processes so it's also</font>

362
00:18:34,330 --> 00:18:40,510
integrated<font color="#E5E5E5"> into piglet</font>

363
00:18:37,200 --> 00:18:42,940
so<font color="#CCCCCC"> Bigley it has actual tests</font><font color="#E5E5E5"> real tests</font>

364
00:18:40,510 --> 00:18:47,930
on<font color="#CCCCCC"> it now and it gets</font><font color="#E5E5E5"> picked up by</font>

365
00:18:42,940 --> 00:18:49,700
<font color="#E5E5E5">Intel's CI system so if you</font>

366
00:18:47,930 --> 00:18:52,490
if you implement some<font color="#E5E5E5"> Vulcan features</font>

367
00:18:49,700 --> 00:18:54,620
<font color="#E5E5E5">and you want to make sure they don't get</font>

368
00:18:52,490 --> 00:18:57,500
regressed<font color="#CCCCCC"> the the</font><font color="#E5E5E5"> best way I think</font><font color="#CCCCCC"> at</font>

369
00:18:54,620 --> 00:18:59,659
the moment<font color="#CCCCCC"> is to write if it's a shader</font>

370
00:18:57,500 --> 00:19:01,310
<font color="#E5E5E5">test then write it as if you can run a</font>

371
00:18:59,660 --> 00:19:02,990
test<font color="#E5E5E5"> and</font><font color="#CCCCCC"> just drop it into the piglet</font>

372
00:19:01,310 --> 00:19:05,389
report<font color="#E5E5E5"> and if you just drop</font><font color="#CCCCCC"> it anywhere</font>

373
00:19:02,990 --> 00:19:08,570
<font color="#E5E5E5">under</font><font color="#CCCCCC"> a certain</font><font color="#E5E5E5"> directory it should get</font>

374
00:19:05,390 --> 00:19:10,730
picked up so hopefully<font color="#CCCCCC"> there's a really</font>

375
00:19:08,570 --> 00:19:17,419
minimal barrier to adding show<font color="#E5E5E5"> you the</font>

376
00:19:10,730 --> 00:19:21,500
tests for Vulcan<font color="#E5E5E5"> so well am i hoping to</font>

377
00:19:17,420 --> 00:19:23,390
go with this<font color="#CCCCCC"> so it's missing</font><font color="#E5E5E5"> quite a few</font>

378
00:19:21,500 --> 00:19:25,550
features probably the main one which<font color="#E5E5E5"> is</font>

379
00:19:23,390 --> 00:19:28,460
quite bad<font color="#CCCCCC"> it's missing an image and</font>

380
00:19:25,550 --> 00:19:31,550
texture support<font color="#E5E5E5"> there's a pull request</font>

381
00:19:28,460 --> 00:19:35,780
for this<font color="#E5E5E5"> but I</font><font color="#CCCCCC"> just need</font><font color="#E5E5E5"> to review it</font>

382
00:19:31,550 --> 00:19:36,950
<font color="#CCCCCC">and</font><font color="#E5E5E5"> rebase it and make that happen</font><font color="#CCCCCC"> I've</font>

383
00:19:35,780 --> 00:19:38,180
written<font color="#CCCCCC"> arrays of buffer bindings</font>

384
00:19:36,950 --> 00:19:39,920
<font color="#CCCCCC">because there's an issue open</font><font color="#E5E5E5"> for it</font>

385
00:19:38,180 --> 00:19:47,630
<font color="#E5E5E5">there's</font><font color="#CCCCCC"> probably a</font><font color="#E5E5E5"> lot of other things</font>

386
00:19:39,920 --> 00:19:51,230
<font color="#CCCCCC">are missing</font><font color="#E5E5E5"> as well so on a branch</font>

387
00:19:47,630 --> 00:19:52,130
<font color="#E5E5E5">there's like a user interface I'm not</font>

388
00:19:51,230 --> 00:19:56,120
sure whether it's particularly useful

389
00:19:52,130 --> 00:19:59,060
but mostly<font color="#E5E5E5"> just for fun you can so it's</font>

390
00:19:56,120 --> 00:20:01,909
just<font color="#E5E5E5"> using</font><font color="#CCCCCC"> gtk you can write the test</font>

391
00:19:59,060 --> 00:20:04,159
script in the editor on<font color="#CCCCCC"> the left and in</font>

392
00:20:01,910 --> 00:20:06,080
the<font color="#E5E5E5"> background it continuously runs the</font>

393
00:20:04,160 --> 00:20:09,700
<font color="#CCCCCC">test</font><font color="#E5E5E5"> and tells you whether it failed or</font>

394
00:20:06,080 --> 00:20:14,389
<font color="#CCCCCC">not and shows you the image as a result</font>

395
00:20:09,700 --> 00:20:17,750
<font color="#E5E5E5">so sometimes in the past when I've been</font>

396
00:20:14,390 --> 00:20:20,630
<font color="#E5E5E5">writing</font><font color="#CCCCCC"> DL shader runner</font><font color="#E5E5E5"> tests and it</font>

397
00:20:17,750 --> 00:20:22,820
just says fail and it's quite a pain to

398
00:20:20,630 --> 00:20:25,760
keep tweaking all the data and to get

399
00:20:22,820 --> 00:20:27,350
the image that<font color="#E5E5E5"> you were expecting</font><font color="#CCCCCC"> so</font>

400
00:20:25,760 --> 00:20:29,629
something I was<font color="#E5E5E5"> thinking it's quite nice</font>

401
00:20:27,350 --> 00:20:34,550
<font color="#CCCCCC">maybe</font><font color="#E5E5E5"> just to have a really tight</font>

402
00:20:29,630 --> 00:20:36,590
feedback<font color="#CCCCCC"> loop with the user interface so</font>

403
00:20:34,550 --> 00:20:39,889
there's another branch<font color="#E5E5E5"> is he getting</font>

404
00:20:36,590 --> 00:20:43,850
<font color="#CCCCCC">more silly</font><font color="#E5E5E5"> there's a branch for making</font>

405
00:20:39,890 --> 00:20:45,470
animations so this just<font color="#E5E5E5"> adds a uniform a</font>

406
00:20:43,850 --> 00:20:47,540
magic uniform to say the frame<font color="#CCCCCC"> number</font>

407
00:20:45,470 --> 00:20:52,400
and then you can<font color="#E5E5E5"> run the test multiple</font>

408
00:20:47,540 --> 00:20:57,409
times<font color="#E5E5E5"> and it will generate the</font><font color="#CCCCCC"> help</font>

409
00:20:52,400 --> 00:20:59,870
into a video of our ffmpeg<font color="#E5E5E5"> I just did</font>

410
00:20:57,410 --> 00:21:01,250
this<font color="#E5E5E5"> because kind of fun but</font><font color="#CCCCCC"> if you know</font>

411
00:20:59,870 --> 00:21:04,449
I show<font color="#CCCCCC"> you the toy shape the toys</font><font color="#E5E5E5"> like a</font>

412
00:21:01,250 --> 00:21:08,000
site where<font color="#CCCCCC"> you can create lots of demos</font>

413
00:21:04,450 --> 00:21:10,610
using<font color="#E5E5E5"> WebGL and it's full of animations</font>

414
00:21:08,000 --> 00:21:12,980
<font color="#E5E5E5">it's quite easy just to convert those</font>

415
00:21:10,610 --> 00:21:15,350
<font color="#E5E5E5">show the toy demos to run on VK runner</font>

416
00:21:12,980 --> 00:21:17,450
<font color="#CCCCCC">to make like a sort</font><font color="#E5E5E5"> of crazy offline</font>

417
00:21:15,350 --> 00:21:18,189
territory<font color="#E5E5E5"> but yeah that's just for</font><font color="#CCCCCC"> fun</font>

418
00:21:17,450 --> 00:21:21,290
<font color="#CCCCCC">you</font><font color="#E5E5E5"> really</font>

419
00:21:18,190 --> 00:21:25,550
so there's<font color="#E5E5E5"> another project called</font><font color="#CCCCCC"> amber</font>

420
00:21:21,290 --> 00:21:28,909
which Google are working<font color="#CCCCCC"> on</font><font color="#E5E5E5"> I think they</font>

421
00:21:25,550 --> 00:21:31,030
were<font color="#E5E5E5"> inspired by VK by now so that might</font>

422
00:21:28,910 --> 00:21:35,870
be<font color="#E5E5E5"> an</font><font color="#CCCCCC"> interesting project</font><font color="#E5E5E5"> to watch</font><font color="#CCCCCC"> too</font>

423
00:21:31,030 --> 00:21:38,780
<font color="#E5E5E5">yet to see where it's going to lead so</font>

424
00:21:35,870 --> 00:21:41,479
that's the the github<font color="#CCCCCC"> repo and it's got</font>

425
00:21:38,780 --> 00:21:43,600
the same<font color="#CCCCCC"> licenses Nizar and Piglet so</font>

426
00:21:41,480 --> 00:21:47,590
<font color="#E5E5E5">take a look</font>

427
00:21:43,600 --> 00:21:47,590
<font color="#E5E5E5">Thanks any questions</font>

428
00:22:01,020 --> 00:22:11,230
yeah<font color="#CCCCCC"> it does work yes there's some</font>

429
00:22:07,300 --> 00:22:14,590
caveats<font color="#E5E5E5"> because I'm sorry the question</font>

430
00:22:11,230 --> 00:22:17,710
<font color="#CCCCCC">was can you</font><font color="#E5E5E5"> interleave probe and draw</font>

431
00:22:14,590 --> 00:22:20,740
calls like you can in piglets<font color="#E5E5E5"> shade</font>

432
00:22:17,710 --> 00:22:25,750
<font color="#E5E5E5">arena and the answer yes you can but</font>

433
00:22:20,740 --> 00:22:27,130
there's when you do a probe<font color="#E5E5E5"> it flashes</font>

434
00:22:25,750 --> 00:22:30,880
the command<font color="#E5E5E5"> buffer that it was building</font>

435
00:22:27,130 --> 00:22:33,070
up<font color="#CCCCCC"> I know when you start another command</font>

436
00:22:30,880 --> 00:22:35,890
it starts another command buffer so<font color="#CCCCCC"> that</font>

437
00:22:33,070 --> 00:22:38,200
it mostly<font color="#E5E5E5"> works just transparently but</font>

438
00:22:35,890 --> 00:22:39,700
there's some slight you have to be aware

439
00:22:38,200 --> 00:22:41,440
that it's starting a new command buffer

440
00:22:39,700 --> 00:22:44,890
<font color="#E5E5E5">because when you start a new command</font>

441
00:22:41,440 --> 00:22:47,320
buffer<font color="#CCCCCC"> mac'n loses a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of state so for</font>

442
00:22:44,890 --> 00:22:50,050
<font color="#E5E5E5">example if you set some push constants</font>

443
00:22:47,320 --> 00:22:51,939
in in one command<font color="#E5E5E5"> buffer and then you do</font>

444
00:22:50,050 --> 00:22:53,139
a probe<font color="#E5E5E5"> you're going to have to set them</font>

445
00:22:51,940 --> 00:22:58,890
again when you<font color="#CCCCCC"> start</font><font color="#E5E5E5"> drawing again</font>

446
00:22:53,140 --> 00:22:58,890
because<font color="#CCCCCC"> it's going to</font><font color="#E5E5E5"> forget them okay</font>

447
00:23:05,910 --> 00:23:11,410
are<font color="#E5E5E5"> you going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> suppose something</font><font color="#CCCCCC"> like</font>

448
00:23:09,280 --> 00:23:14,530
a<font color="#E5E5E5"> memory mapping or a digital memory</font>

449
00:23:11,410 --> 00:23:16,780
access<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> very important picture for</font>

450
00:23:14,530 --> 00:23:19,840
those who want to<font color="#E5E5E5"> use weekend-long as a</font>

451
00:23:16,780 --> 00:23:22,720
<font color="#CCCCCC">dolmen</font><font color="#E5E5E5"> provide to those customers I'm</font>

452
00:23:19,840 --> 00:23:25,480
going to such<font color="#E5E5E5"> suppose such a future like</font>

453
00:23:22,720 --> 00:23:33,250
<font color="#E5E5E5">digital</font><font color="#CCCCCC"> so memory access</font><font color="#E5E5E5"> or memory</font>

454
00:23:25,480 --> 00:23:35,700
mapping for loading power the<font color="#E5E5E5"> question</font>

455
00:23:33,250 --> 00:23:38,590
<font color="#CCCCCC">is</font><font color="#E5E5E5"> whether you</font><font color="#CCCCCC"> have a plan to</font><font color="#E5E5E5"> support</font>

456
00:23:35,700 --> 00:23:42,880
<font color="#E5E5E5">more quickly loading the data</font><font color="#CCCCCC"> for most</font>

457
00:23:38,590 --> 00:23:46,470
<font color="#CCCCCC">origin is a memory or digital mapping</font>

458
00:23:42,880 --> 00:23:49,630
even so the data for the script

459
00:23:46,470 --> 00:23:52,990
so yeah with if you use the<font color="#E5E5E5"> so the</font>

460
00:23:49,630 --> 00:23:59,610
question<font color="#CCCCCC"> was</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> you load the data into</font>

461
00:23:52,990 --> 00:24:01,110
the<font color="#E5E5E5"> script some future like CPU directly</font>

462
00:23:59,610 --> 00:24:04,199
<font color="#CCCCCC">accent</font>

463
00:24:01,110 --> 00:24:07,139
and lost memory in normal memory<font color="#CCCCCC"> okay</font>

464
00:24:04,200 --> 00:24:09,870
<font color="#CCCCCC">with lolly in water copying to the GPU</font>

465
00:24:07,140 --> 00:24:13,860
<font color="#CCCCCC">power</font><font color="#E5E5E5"> again</font><font color="#CCCCCC"> okay so at the moment with</font>

466
00:24:09,870 --> 00:24:16,260
the API<font color="#CCCCCC"> you can give it the whole script</font>

467
00:24:13,860 --> 00:24:18,149
<font color="#E5E5E5">that's all you can do</font><font color="#CCCCCC"> and obviously the</font>

468
00:24:16,260 --> 00:24:20,490
<font color="#CCCCCC">the buffer if you had any buffer data</font>

469
00:24:18,150 --> 00:24:21,870
that<font color="#E5E5E5"> would be</font><font color="#CCCCCC"> in ASCII and</font><font color="#E5E5E5"> then it would</font>

470
00:24:20,490 --> 00:24:24,090
need to<font color="#CCCCCC"> be a conversion process to</font>

471
00:24:21,870 --> 00:24:30,570
convert<font color="#E5E5E5"> that into memory somewhere</font><font color="#CCCCCC"> so if</font>

472
00:24:24,090 --> 00:24:32,760
you want to give it<font color="#CCCCCC"> some data in a</font>

473
00:24:30,570 --> 00:24:36,649
memory mapped buffer and it doesn't have

474
00:24:32,760 --> 00:24:36,650
support<font color="#CCCCCC"> for</font><font color="#E5E5E5"> that no that would be a good</font>

475
00:24:36,890 --> 00:24:41,970
which would call<font color="#CCCCCC"> people on sank in</font>

476
00:24:39,210 --> 00:24:45,300
that's it that's all<font color="#E5E5E5"> you don't need need</font>

477
00:24:41,970 --> 00:24:46,800
to<font color="#E5E5E5"> commercially</font><font color="#CCCCCC"> into like the graphic</font>

478
00:24:45,300 --> 00:24:53,010
<font color="#CCCCCC">before mother</font>

479
00:24:46,800 --> 00:24:56,070
yeah<font color="#CCCCCC"> anymore and</font><font color="#E5E5E5"> no impendent device</font>

480
00:24:53,010 --> 00:24:58,770
<font color="#CCCCCC">Lachie do and the cpu use less</font><font color="#E5E5E5"> then</font>

481
00:24:56,070 --> 00:25:00,870
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have a separate yeah so I</font>

482
00:24:58,770 --> 00:25:04,530
think if you had at estimate<font color="#CCCCCC"> which</font>

483
00:25:00,870 --> 00:25:05,459
needed to<font color="#E5E5E5"> have a really large input then</font>

484
00:25:04,530 --> 00:25:07,500
yeah that would<font color="#CCCCCC"> be a really</font><font color="#E5E5E5"> good idea</font>

485
00:25:05,460 --> 00:25:13,830
<font color="#E5E5E5">just to add something</font><font color="#CCCCCC"> to the API so you</font>

486
00:25:07,500 --> 00:25:19,710
<font color="#CCCCCC">can say</font><font color="#E5E5E5"> okay so something in the script</font>

487
00:25:13,830 --> 00:25:20,850
to<font color="#E5E5E5"> say maybe I haven't</font><font color="#CCCCCC"> considered it but</font>

488
00:25:19,710 --> 00:25:24,210
<font color="#CCCCCC">I think that would be a good idea yeah</font>

489
00:25:20,850 --> 00:25:26,429
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> I'm going to add but I think for</font>

490
00:25:24,210 --> 00:25:28,200
the moment<font color="#CCCCCC"> yeah they're all</font><font color="#E5E5E5"> the tests</font>

491
00:25:26,430 --> 00:25:31,710
that<font color="#E5E5E5"> we've encountered so far they they</font>

492
00:25:28,200 --> 00:25:34,290
haven't<font color="#E5E5E5"> used a lot of input data so so</font>

493
00:25:31,710 --> 00:25:44,130
far<font color="#CCCCCC"> it's it's</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> everything's</font>

494
00:25:34,290 --> 00:25:45,050
contained in the script<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> okay thank</font>

495
00:25:44,130 --> 00:25:48,330
you

496
00:25:45,050 --> 00:25:48,659
[Applause]

497
00:25:48,330 --> 00:25:52,389
<font color="#E5E5E5">you</font>

498
00:25:48,660 --> 00:25:52,390
[Applause]

