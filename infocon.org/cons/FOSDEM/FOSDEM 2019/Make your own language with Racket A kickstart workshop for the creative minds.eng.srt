1
00:00:06,040 --> 00:00:13,759
so this<font color="#E5E5E5"> morning I did a presentation</font>

2
00:00:10,610 --> 00:00:16,820
<font color="#CCCCCC">about making your</font><font color="#E5E5E5"> languages with racket</font>

3
00:00:13,759 --> 00:00:19,610
and about how it<font color="#CCCCCC"> could be useful for</font>

4
00:00:16,820 --> 00:00:20,540
<font color="#CCCCCC">creating</font><font color="#E5E5E5"> data structures and data</font>

5
00:00:19,610 --> 00:00:25,390
languages

6
00:00:20,540 --> 00:00:28,070
but are<font color="#E5E5E5"> useful in a</font><font color="#CCCCCC"> specific</font><font color="#E5E5E5"> domain and</font>

7
00:00:25,390 --> 00:00:31,820
this afternoon<font color="#E5E5E5"> I wanted to take a bit</font>

8
00:00:28,070 --> 00:00:37,129
more time<font color="#E5E5E5"> to to make you try by</font>

9
00:00:31,820 --> 00:00:38,809
yourselves<font color="#CCCCCC"> making a language so I wanted</font>

10
00:00:37,129 --> 00:00:42,530
<font color="#E5E5E5">this session to be a bit more</font>

11
00:00:38,809 --> 00:00:45,890
<font color="#E5E5E5">interactive and so if you have working</font>

12
00:00:42,530 --> 00:00:50,809
computers<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> try live and and see</font>

13
00:00:45,890 --> 00:00:56,210
if you can do something<font color="#CCCCCC"> the the code is</font>

14
00:00:50,809 --> 00:01:00,080
on this repository<font color="#CCCCCC"> on github at slash</font>

15
00:00:56,210 --> 00:01:05,740
first<font color="#E5E5E5"> then 2019 talk and there's a</font>

16
00:01:00,080 --> 00:01:09,289
workshop<font color="#E5E5E5"> directory so if you pull that</font>

17
00:01:05,740 --> 00:01:12,919
that repository<font color="#E5E5E5"> you and of course you</font>

18
00:01:09,290 --> 00:01:16,490
also need<font color="#CCCCCC"> to install racket it should be</font>

19
00:01:12,920 --> 00:01:23,810
in in all the<font color="#CCCCCC"> good package repositories</font>

20
00:01:16,490 --> 00:01:27,740
around there<font color="#E5E5E5"> you you can get to to this</font>

21
00:01:23,810 --> 00:01:33,770
file and once you put it and<font color="#E5E5E5"> and we'll</font>

22
00:01:27,740 --> 00:01:36,679
see how we<font color="#E5E5E5"> can make our own language</font><font color="#CCCCCC"> the</font>

23
00:01:33,770 --> 00:01:42,140
first thing you usually do when you

24
00:01:36,680 --> 00:01:44,720
<font color="#E5E5E5">create a language I so I have already</font>

25
00:01:42,140 --> 00:01:47,740
<font color="#E5E5E5">shown whose lines this</font><font color="#CCCCCC"> morning so this</font>

26
00:01:44,720 --> 00:01:50,929
is the most simple way to create<font color="#E5E5E5"> a</font>

27
00:01:47,740 --> 00:01:55,070
language<font color="#E5E5E5"> in racket the way it works is</font>

28
00:01:50,930 --> 00:01:58,340
racket<font color="#CCCCCC"> has modules and every time you</font>

29
00:01:55,070 --> 00:02:02,449
import<font color="#CCCCCC"> a module</font><font color="#E5E5E5"> it's at the execute some</font>

30
00:01:58,340 --> 00:02:04,790
code on<font color="#CCCCCC"> this module</font><font color="#E5E5E5"> before importing it</font>

31
00:02:02,450 --> 00:02:08,780
into<font color="#E5E5E5"> your your runtime environment and</font>

32
00:02:04,790 --> 00:02:14,750
running it and during<font color="#E5E5E5"> this time you</font><font color="#CCCCCC"> have</font>

33
00:02:08,780 --> 00:02:17,810
the<font color="#E5E5E5"> ability to read the</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> you are</font>

34
00:02:14,750 --> 00:02:21,260
<font color="#E5E5E5">importing and modify it on the fly the</font>

35
00:02:17,810 --> 00:02:25,819
for it arrives into your into<font color="#E5E5E5"> your code</font>

36
00:02:21,260 --> 00:02:28,790
<font color="#CCCCCC">you're running code</font><font color="#E5E5E5"> so the the way it</font>

37
00:02:25,819 --> 00:02:33,708
<font color="#E5E5E5">works is that any racket module you</font>

38
00:02:28,790 --> 00:02:38,269
create you just create a file<font color="#E5E5E5"> and by</font>

39
00:02:33,709 --> 00:02:42,980
itself<font color="#CCCCCC"> it can be used as a reader for</font>

40
00:02:38,269 --> 00:02:46,390
other modules<font color="#CCCCCC"> so any racket file</font><font color="#E5E5E5"> have</font>

41
00:02:42,980 --> 00:02:50,690
the ability to read over racket files

42
00:02:46,390 --> 00:02:54,679
<font color="#CCCCCC">and this is the</font><font color="#E5E5E5"> the kind of of module</font>

43
00:02:50,690 --> 00:02:59,840
you<font color="#CCCCCC"> wanna</font><font color="#E5E5E5"> make so the the magic is</font>

44
00:02:54,680 --> 00:03:05,019
<font color="#E5E5E5">happening here</font><font color="#CCCCCC"> this function</font><font color="#E5E5E5"> it's</font>

45
00:02:59,840 --> 00:03:08,360
actually<font color="#E5E5E5"> a macro that so this macro is</font>

46
00:03:05,019 --> 00:03:12,019
is the macro that is being called when

47
00:03:08,360 --> 00:03:14,930
you import<font color="#E5E5E5"> a module and in this file</font>

48
00:03:12,019 --> 00:03:19,760
<font color="#E5E5E5">we're going to change it so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it does</font>

49
00:03:14,930 --> 00:03:23,239
what<font color="#E5E5E5"> we want so</font><font color="#CCCCCC"> we are</font><font color="#E5E5E5"> modifying the</font>

50
00:03:19,760 --> 00:03:26,630
standard way<font color="#E5E5E5"> racket works by putting our</font>

51
00:03:23,239 --> 00:03:29,810
own<font color="#E5E5E5"> code into this function so</font><font color="#CCCCCC"> the way</font>

52
00:03:26,630 --> 00:03:33,579
it works<font color="#CCCCCC"> is we we just</font><font color="#E5E5E5"> rename the</font>

53
00:03:29,810 --> 00:03:37,220
function<font color="#E5E5E5"> while we provide it so</font>

54
00:03:33,579 --> 00:03:41,090
providing a module is the inverse of

55
00:03:37,220 --> 00:03:43,880
importing it importing a module is done

56
00:03:41,090 --> 00:03:46,040
with require you just say<font color="#CCCCCC"> ok for for</font>

57
00:03:43,880 --> 00:03:51,049
this<font color="#CCCCCC"> module I need I need this I need</font>

58
00:03:46,040 --> 00:03:55,370
this I need this<font color="#E5E5E5"> and providing is the</font>

59
00:03:51,049 --> 00:03:57,440
opposite so it's declares<font color="#E5E5E5"> all the modal</font>

60
00:03:55,370 --> 00:03:59,920
all the<font color="#E5E5E5"> the functions and the stuff</font><font color="#CCCCCC"> you</font>

61
00:03:57,440 --> 00:04:04,400
<font color="#E5E5E5">create in your file and you want</font>

62
00:03:59,920 --> 00:04:06,888
<font color="#CCCCCC">over-over</font><font color="#E5E5E5"> files to use so if you provide</font>

63
00:04:04,400 --> 00:04:09,980
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> always already exists</font>

64
00:04:06,889 --> 00:04:13,959
it's going to be replaced<font color="#E5E5E5"> by the one</font><font color="#CCCCCC"> you</font>

65
00:04:09,980 --> 00:04:18,108
provided so here we create our own

66
00:04:13,959 --> 00:04:21,350
module begin and we provide<font color="#E5E5E5"> it as this</font>

67
00:04:18,108 --> 00:04:26,780
name so it's going<font color="#CCCCCC"> to replace it into</font>

68
00:04:21,350 --> 00:04:29,570
<font color="#CCCCCC">the</font><font color="#E5E5E5"> environment</font><font color="#CCCCCC"> and the module begin</font><font color="#E5E5E5"> we</font>

69
00:04:26,780 --> 00:04:31,659
<font color="#E5E5E5">write is really simple it's like only</font>

70
00:04:29,570 --> 00:04:35,060
<font color="#CCCCCC">those lines</font>

71
00:04:31,660 --> 00:04:40,250
it's just this is<font color="#CCCCCC"> the way to declare</font><font color="#E5E5E5"> on</font>

72
00:04:35,060 --> 00:04:42,590
macro<font color="#E5E5E5"> in racket and in scheme</font><font color="#CCCCCC"> so we</font>

73
00:04:40,250 --> 00:04:46,670
declare a macro that<font color="#CCCCCC"> is called module</font>

74
00:04:42,590 --> 00:04:51,140
begin and takes an expression as an

75
00:04:46,670 --> 00:04:57,070
<font color="#E5E5E5">argument and we call the actual the the</font>

76
00:04:51,140 --> 00:05:03,830
<font color="#CCCCCC">real module begin with our own code here</font>

77
00:04:57,070 --> 00:05:07,909
so this is the part where we we change

78
00:05:03,830 --> 00:05:11,539
the way module begin works is we just

79
00:05:07,910 --> 00:05:16,460
call the old<font color="#E5E5E5"> module begin with our code</font>

80
00:05:11,540 --> 00:05:19,760
and the code<font color="#CCCCCC"> is doing</font><font color="#E5E5E5"> only one thing</font><font color="#CCCCCC"> it</font>

81
00:05:16,460 --> 00:05:25,340
just<font color="#E5E5E5"> provides some variable but I</font><font color="#CCCCCC"> called</font>

82
00:05:19,760 --> 00:05:30,280
the<font color="#E5E5E5"> ranch yep</font>

83
00:05:25,340 --> 00:05:30,280
so yeah you

84
00:05:35,050 --> 00:05:45,760
you got it<font color="#E5E5E5"> okay so it just takes the</font>

85
00:05:43,600 --> 00:05:48,100
expression that<font color="#E5E5E5"> is inside the module and</font>

86
00:05:45,760 --> 00:05:52,530
puts it into viable<font color="#E5E5E5"> and provide the</font>

87
00:05:48,100 --> 00:05:55,930
viable what's happening here exactly<font color="#CCCCCC"> is</font>

88
00:05:52,530 --> 00:05:58,539
<font color="#E5E5E5">I'm going to show you interactively</font><font color="#CCCCCC"> in</font>

89
00:05:55,930 --> 00:06:03,820
the moment is whether the data file I

90
00:05:58,540 --> 00:06:06,550
want<font color="#E5E5E5"> to process is this one</font><font color="#CCCCCC"> so this is</font>

91
00:06:03,820 --> 00:06:11,290
<font color="#CCCCCC">the</font><font color="#E5E5E5"> this is an example of a simple</font>

92
00:06:06,550 --> 00:06:13,240
<font color="#E5E5E5">language</font><font color="#CCCCCC"> I just made I designed this</font>

93
00:06:11,290 --> 00:06:16,840
<font color="#CCCCCC">language so that you</font><font color="#E5E5E5"> can create a ranch</font>

94
00:06:13,240 --> 00:06:21,669
<font color="#CCCCCC">and I've been using it and describe</font><font color="#E5E5E5"> the</font>

95
00:06:16,840 --> 00:06:25,510
battle cries of<font color="#CCCCCC"> everypony and so this</font>

96
00:06:21,669 --> 00:06:29,139
code is<font color="#E5E5E5"> going to generate some function</font>

97
00:06:25,510 --> 00:06:31,150
but I can cool<font color="#E5E5E5"> so I'm calling them just</font>

98
00:06:29,139 --> 00:06:33,160
right<font color="#E5E5E5"> there you just</font><font color="#CCCCCC"> called the</font><font color="#E5E5E5"> ranch</font>

99
00:06:31,150 --> 00:06:35,820
<font color="#E5E5E5">and you give them the name of the pony</font>

100
00:06:33,160 --> 00:06:41,740
and<font color="#E5E5E5"> it should print</font><font color="#CCCCCC"> their battle cries</font>

101
00:06:35,820 --> 00:06:46,110
so if I do this<font color="#E5E5E5"> just there I could write</font>

102
00:06:41,740 --> 00:06:50,320
<font color="#E5E5E5">it on</font><font color="#CCCCCC"> my main file and as you see the</font>

103
00:06:46,110 --> 00:06:58,060
they were just<font color="#CCCCCC"> crying</font><font color="#E5E5E5"> out loud</font><font color="#CCCCCC"> what they</font>

104
00:06:50,320 --> 00:07:02,280
want so the way it works<font color="#E5E5E5"> is that I want</font>

105
00:06:58,060 --> 00:07:08,380
<font color="#E5E5E5">to take this data and transform it into</font>

106
00:07:02,280 --> 00:07:12,369
actual code<font color="#CCCCCC"> the easy</font><font color="#E5E5E5"> way to do</font><font color="#CCCCCC"> that is</font>

107
00:07:08,380 --> 00:07:14,770
through a macro so I just match for<font color="#CCCCCC"> I</font>

108
00:07:12,370 --> 00:07:17,889
just<font color="#CCCCCC"> created for this example records</font>

109
00:07:14,770 --> 00:07:19,560
<font color="#E5E5E5">only one macro the ranch macro and so</font>

110
00:07:17,889 --> 00:07:23,500
the ranch<font color="#CCCCCC"> macro is going to run</font><font color="#E5E5E5"> and</font>

111
00:07:19,560 --> 00:07:30,550
analyze stuff in there<font color="#E5E5E5"> and generate some</font>

112
00:07:23,500 --> 00:07:32,200
code and<font color="#E5E5E5"> it happens</font><font color="#CCCCCC"> just there the macro</font>

113
00:07:30,550 --> 00:07:35,500
is there so I<font color="#E5E5E5"> define</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> micro</font><font color="#CCCCCC"> pog</font>

114
00:07:32,200 --> 00:07:40,240
branch<font color="#E5E5E5"> that takes the syntax and so this</font>

115
00:07:35,500 --> 00:07:44,409
part<font color="#E5E5E5"> is a bit hairy</font><font color="#CCCCCC"> but you get used</font><font color="#E5E5E5"> to</font>

116
00:07:40,240 --> 00:07:47,400
it when you work with<font color="#CCCCCC"> a syntax pause</font><font color="#E5E5E5"> the</font>

117
00:07:44,409 --> 00:07:47,400
macro<font color="#E5E5E5"> can have two</font>

118
00:07:49,410 --> 00:07:57,610
<font color="#E5E5E5">keywords</font><font color="#CCCCCC"> ponies and Pony every time it's</font>

119
00:07:54,340 --> 00:08:02,460
it<font color="#E5E5E5"> stumbled</font><font color="#CCCCCC"> upon one of</font><font color="#E5E5E5"> those</font><font color="#CCCCCC"> keywords</font>

120
00:07:57,610 --> 00:08:02,460
it just doesn't care it's<font color="#E5E5E5"> just there for</font>

121
00:08:02,520 --> 00:08:09,520
as an information that<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> we are in</font>

122
00:08:06,819 --> 00:08:13,780
<font color="#CCCCCC">this structure this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the ponies</font>

123
00:08:09,520 --> 00:08:18,219
section that's it and the way<font color="#E5E5E5"> it pattern</font>

124
00:08:13,780 --> 00:08:23,799
matches the<font color="#CCCCCC"> the data we saw is</font><font color="#E5E5E5"> there it</font>

125
00:08:18,220 --> 00:08:27,009
looks out for a section called ponies<font color="#E5E5E5"> in</font>

126
00:08:23,800 --> 00:08:30,819
which they are any number this<font color="#E5E5E5"> is any</font>

127
00:08:27,009 --> 00:08:33,279
number the<font color="#CCCCCC"> three dots where any</font><font color="#E5E5E5"> number</font>

128
00:08:30,819 --> 00:08:37,060
of the section<font color="#CCCCCC"> a section</font><font color="#E5E5E5"> starting with</font>

129
00:08:33,279 --> 00:08:42,070
<font color="#E5E5E5">Pony then the name as an ID and a</font>

130
00:08:37,059 --> 00:08:48,420
<font color="#E5E5E5">battlecry as a</font><font color="#CCCCCC"> strength so this line</font>

131
00:08:42,070 --> 00:08:53,440
here describes the<font color="#E5E5E5"> structure of our data</font>

132
00:08:48,420 --> 00:08:55,870
if we can look at our data<font color="#E5E5E5"> again we have</font>

133
00:08:53,440 --> 00:08:58,450
a structure starting with ponies<font color="#E5E5E5"> and</font>

134
00:08:55,870 --> 00:09:03,730
then any<font color="#CCCCCC"> number</font><font color="#E5E5E5"> of structures starting</font>

135
00:08:58,450 --> 00:09:08,950
<font color="#E5E5E5">with Pony so here we start</font><font color="#CCCCCC"> with ponies</font>

136
00:09:03,730 --> 00:09:14,310
and any number of this stuff<font color="#CCCCCC"> and we want</font>

137
00:09:08,950 --> 00:09:14,310
to<font color="#E5E5E5"> replace that</font><font color="#CCCCCC"> oh yeah sorry</font>

138
00:09:14,339 --> 00:09:24,820
and you want to<font color="#E5E5E5"> replace</font><font color="#CCCCCC"> that with</font><font color="#E5E5E5"> code</font>

139
00:09:20,370 --> 00:09:29,250
so the replacement<font color="#CCCCCC"> pod is happening just</font>

140
00:09:24,820 --> 00:09:35,140
there<font color="#CCCCCC"> I just create a function that</font>

141
00:09:29,250 --> 00:09:41,850
takes<font color="#E5E5E5"> a pony name and switches over</font><font color="#CCCCCC"> it</font>

142
00:09:35,140 --> 00:09:45,959
and if it equals the pony we just met

143
00:09:41,850 --> 00:09:50,500
then it returns<font color="#E5E5E5"> the cry over rise</font>

144
00:09:45,959 --> 00:09:53,829
<font color="#E5E5E5">respond it does not exist</font><font color="#CCCCCC"> and we'll be</font>

145
00:09:50,500 --> 00:09:56,770
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to see in</font><font color="#CCCCCC"> real time what this</font><font color="#E5E5E5"> macro</font>

146
00:09:53,829 --> 00:10:01,760
<font color="#E5E5E5">is doing</font><font color="#CCCCCC"> step-by-step</font><font color="#E5E5E5"> using a very handy</font>

147
00:09:56,770 --> 00:10:07,959
<font color="#CCCCCC">tool which is</font><font color="#E5E5E5"> called</font><font color="#CCCCCC"> macro stepper</font>

148
00:10:01,760 --> 00:10:13,819
and if I step it's<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> open up yeah</font>

149
00:10:07,959 --> 00:10:20,180
so this tool allows<font color="#E5E5E5"> us to see in</font><font color="#CCCCCC"> real</font>

150
00:10:13,820 --> 00:10:23,240
time<font color="#CCCCCC"> the macro over the code if</font><font color="#E5E5E5"> I step</font>

151
00:10:20,180 --> 00:10:25,069
is going to define<font color="#E5E5E5"> a module it's going</font>

152
00:10:23,240 --> 00:10:28,430
to define some stuff<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the racket</font>

153
00:10:25,070 --> 00:10:41,350
<font color="#E5E5E5">system and then at one time</font><font color="#CCCCCC"> it's going</font>

154
00:10:28,430 --> 00:10:41,349
<font color="#E5E5E5">to reach our</font><font color="#CCCCCC"> codes and</font><font color="#E5E5E5"> there okay so</font>

155
00:10:41,410 --> 00:10:50,089
this is before the the macro hits<font color="#E5E5E5"> and</font>

156
00:10:46,699 --> 00:10:56,959
this is after and we can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> that it</font>

157
00:10:50,089 --> 00:11:03,709
transforms our<font color="#CCCCCC"> structure into a</font><font color="#E5E5E5"> lambda</font>

158
00:10:56,959 --> 00:11:07,189
with a<font color="#E5E5E5"> cond and an if statement for</font>

159
00:11:03,709 --> 00:11:12,768
every every<font color="#CCCCCC"> pony</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> in the data</font>

160
00:11:07,190 --> 00:11:14,600
structure<font color="#E5E5E5"> so in C or</font><font color="#CCCCCC"> C++</font><font color="#E5E5E5"> this would be</font>

161
00:11:12,769 --> 00:11:18,889
really<font color="#E5E5E5"> efficient because you're</font>

162
00:11:14,600 --> 00:11:23,410
<font color="#E5E5E5">transforming data structure into actual</font>

163
00:11:18,889 --> 00:11:28,850
code we've direct<font color="#CCCCCC"> inlining of the data</font>

164
00:11:23,410 --> 00:11:32,209
here the the condition<font color="#CCCCCC"> he's directly in</font>

165
00:11:28,850 --> 00:11:35,480
<font color="#CCCCCC">line for every every piece of</font><font color="#E5E5E5"> data so</font>

166
00:11:32,209 --> 00:11:39,349
you actually<font color="#E5E5E5"> generates code and a big if</font>

167
00:11:35,480 --> 00:11:42,740
and it happens that the cond<font color="#E5E5E5"> keyword is</font>

168
00:11:39,350 --> 00:11:45,889
actually macro so if<font color="#E5E5E5"> I step a little bit</font>

169
00:11:42,740 --> 00:11:49,850
further<font color="#E5E5E5"> we're going to see the cone</font>

170
00:11:45,889 --> 00:11:55,970
macro transforming our code into<font color="#CCCCCC"> if</font>

171
00:11:49,850 --> 00:11:59,510
statements so here the cones defined

172
00:11:55,970 --> 00:12:04,730
<font color="#E5E5E5">into into racket is transformed into a</font>

173
00:11:59,510 --> 00:12:08,959
bunch of if so once this<font color="#E5E5E5"> is compiled</font>

174
00:12:04,730 --> 00:12:12,550
into<font color="#E5E5E5"> actual binary it's extremely</font>

175
00:12:08,959 --> 00:12:14,750
efficient it's not<font color="#E5E5E5"> it's not data it</font>

176
00:12:12,550 --> 00:12:21,050
became code

177
00:12:14,750 --> 00:12:26,899
compiled code<font color="#CCCCCC"> and so when I</font><font color="#E5E5E5"> discovered</font>

178
00:12:21,050 --> 00:12:30,410
this<font color="#CCCCCC"> I thought wow this</font><font color="#E5E5E5"> is like the the</font>

179
00:12:26,899 --> 00:12:34,730
<font color="#E5E5E5">best advancement we have in data</font>

180
00:12:30,410 --> 00:12:39,980
oriented programming programming systems

181
00:12:34,730 --> 00:12:43,550
<font color="#E5E5E5">it's like we can write data and have</font>

182
00:12:39,980 --> 00:12:46,670
actual code at the end<font color="#CCCCCC"> without anything</font>

183
00:12:43,550 --> 00:12:53,689
in between<font color="#CCCCCC"> is like your data is your</font>

184
00:12:46,670 --> 00:12:56,149
code<font color="#E5E5E5"> and so I started to to look at how</font>

185
00:12:53,689 --> 00:12:59,029
I could create languages for for my

186
00:12:56,149 --> 00:12:59,629
needs<font color="#E5E5E5"> and so that's why I'm</font><font color="#CCCCCC"> doing this</font>

187
00:12:59,029 --> 00:13:01,639
<font color="#CCCCCC">talk right now</font>

188
00:12:59,629 --> 00:13:07,730
it's because<font color="#CCCCCC"> Alfred it was really</font>

189
00:13:01,639 --> 00:13:10,579
<font color="#E5E5E5">exciting</font><font color="#CCCCCC"> to just write</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> Express what</font>

190
00:13:07,730 --> 00:13:14,779
<font color="#E5E5E5">you want from the program from a data</font>

191
00:13:10,579 --> 00:13:26,059
point of view and get actual code<font color="#E5E5E5"> in the</font>

192
00:13:14,779 --> 00:13:28,699
end so this<font color="#E5E5E5"> is the the the trickiest</font>

193
00:13:26,059 --> 00:13:31,969
part to understand it's the the macro

194
00:13:28,699 --> 00:13:35,240
here but there's a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> resources on</font>

195
00:13:31,970 --> 00:13:39,259
the<font color="#CCCCCC"> internet</font><font color="#E5E5E5"> from over racket</font>

196
00:13:35,240 --> 00:13:42,170
programmers there's one that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> Greg</font>

197
00:13:39,259 --> 00:13:47,629
Hendershot<font color="#E5E5E5"> he has a really great blog</font>

198
00:13:42,170 --> 00:13:54,800
about writing macros in racket<font color="#CCCCCC"> so you</font>

199
00:13:47,629 --> 00:13:57,170
should really<font color="#E5E5E5"> check that out and at</font>

200
00:13:54,800 --> 00:14:02,290
first I thought<font color="#CCCCCC"> I</font><font color="#E5E5E5"> would stop there and</font>

201
00:13:57,170 --> 00:14:06,319
make everyone<font color="#E5E5E5"> try this kind</font><font color="#CCCCCC"> of stuff but</font>

202
00:14:02,290 --> 00:14:17,170
<font color="#E5E5E5">four minutes before</font><font color="#CCCCCC"> the the talk started</font>

203
00:14:06,319 --> 00:14:17,170
<font color="#CCCCCC">I got something else walking here yeah</font>

204
00:14:18,410 --> 00:14:49,350
yep it seems you might be<font color="#E5E5E5"> missing</font>

205
00:14:36,690 --> 00:15:08,480
package<font color="#CCCCCC"> maybe yeah so you have an issue</font>

206
00:14:49,350 --> 00:15:15,660
with<font color="#E5E5E5"> so he's wondering if there are any</font>

207
00:15:08,480 --> 00:15:20,190
dependencies<font color="#E5E5E5"> missing and I thought I</font>

208
00:15:15,660 --> 00:15:21,990
would<font color="#E5E5E5"> I was using known but maybe I'll</font>

209
00:15:20,190 --> 00:15:36,650
<font color="#E5E5E5">check that out later</font>

210
00:15:21,990 --> 00:15:36,650
oh yeah<font color="#CCCCCC"> that'll work</font>

211
00:15:41,430 --> 00:15:50,969
and so right now<font color="#E5E5E5"> the language we created</font>

212
00:15:47,300 --> 00:15:58,560
<font color="#E5E5E5">looks like</font><font color="#CCCCCC"> s-expressions</font><font color="#E5E5E5"> so it's the</font>

213
00:15:50,970 --> 00:16:03,020
<font color="#E5E5E5">standard way of writing</font><font color="#CCCCCC"> lisp languages</font>

214
00:15:58,560 --> 00:16:08,189
it's just<font color="#CCCCCC"> parentheses everywhere and</font>

215
00:16:03,020 --> 00:16:11,880
<font color="#E5E5E5">items between between them and racket</font>

216
00:16:08,190 --> 00:16:16,410
can<font color="#E5E5E5"> go further and provide you here I'm</font>

217
00:16:11,880 --> 00:16:18,480
using the default<font color="#CCCCCC"> SX</font><font color="#E5E5E5"> reader but you can</font>

218
00:16:16,410 --> 00:16:21,270
actually use<font color="#CCCCCC"> any reader you like you can</font>

219
00:16:18,480 --> 00:16:25,680
create<font color="#E5E5E5"> your own readers for syntaxes but</font>

220
00:16:21,270 --> 00:16:29,340
are not as expressions<font color="#E5E5E5"> and so I created</font>

221
00:16:25,680 --> 00:16:32,609
<font color="#CCCCCC">another example that</font><font color="#E5E5E5"> the</font>

222
00:16:29,340 --> 00:16:36,150
other example requires dependencies

223
00:16:32,610 --> 00:16:39,330
external dependencies<font color="#CCCCCC"> I changed the</font>

224
00:16:36,150 --> 00:16:45,270
language<font color="#E5E5E5"> into that this is completely</font>

225
00:16:39,330 --> 00:16:47,550
<font color="#E5E5E5">arbitrary I could have used any any way</font>

226
00:16:45,270 --> 00:16:51,780
of writing this I just<font color="#E5E5E5"> thought it was</font>

227
00:16:47,550 --> 00:16:56,250
cool that<font color="#E5E5E5"> way</font><font color="#CCCCCC"> so if I want my language</font>

228
00:16:51,780 --> 00:16:59,819
<font color="#E5E5E5">to look like this and then make</font><font color="#CCCCCC"> it so</font>

229
00:16:56,250 --> 00:17:03,690
<font color="#CCCCCC">bad it</font><font color="#E5E5E5"> generates this then generates the</font>

230
00:16:59,820 --> 00:17:10,140
code<font color="#CCCCCC"> we saw</font><font color="#E5E5E5"> there's a step further we</font>

231
00:17:03,690 --> 00:17:12,570
can<font color="#CCCCCC"> write</font><font color="#E5E5E5"> a reader and a passer</font><font color="#CCCCCC"> the the</font>

232
00:17:10,140 --> 00:17:15,780
<font color="#E5E5E5">thing we wrote right now was the</font>

233
00:17:12,569 --> 00:17:21,419
expander so the expander is using macros

234
00:17:15,780 --> 00:17:24,359
to<font color="#E5E5E5"> expand the code into bigger stuff the</font>

235
00:17:21,420 --> 00:17:28,800
bigger functions as we saw in the<font color="#E5E5E5"> micro</font>

236
00:17:24,359 --> 00:17:33,810
stepper but with<font color="#CCCCCC"> over layers and one of</font>

237
00:17:28,800 --> 00:17:37,530
the layer is the passer and<font color="#E5E5E5"> was</font><font color="#CCCCCC"> actually</font>

238
00:17:33,810 --> 00:17:40,560
a language could<font color="#CCCCCC"> brag which is which I'm</font>

239
00:17:37,530 --> 00:17:47,040
using here and this<font color="#CCCCCC"> language allows you</font>

240
00:17:40,560 --> 00:17:50,940
<font color="#CCCCCC">to define a syntax for a language and</font>

241
00:17:47,040 --> 00:17:55,590
<font color="#E5E5E5">news</font><font color="#CCCCCC"> that's bad syntax</font><font color="#E5E5E5"> as a passer for</font>

242
00:17:50,940 --> 00:17:59,040
your<font color="#E5E5E5"> language so here I wrote a syntax</font>

243
00:17:55,590 --> 00:18:02,040
<font color="#E5E5E5">and so I would buy a wrench can be an</font>

244
00:17:59,040 --> 00:18:05,370
optional new line then a marker<font color="#E5E5E5"> for runs</font>

245
00:18:02,040 --> 00:18:13,080
<font color="#CCCCCC">beginning then a new line then a</font><font color="#E5E5E5"> number</font>

246
00:18:05,370 --> 00:18:17,729
of ponies then is when<font color="#E5E5E5"> ranch and when</font>

247
00:18:13,080 --> 00:18:20,580
new line and when<font color="#E5E5E5"> ponies is a any number</font>

248
00:18:17,730 --> 00:18:24,080
of<font color="#E5E5E5"> Pony and Pony is any number</font><font color="#CCCCCC"> of spaces</font>

249
00:18:20,580 --> 00:18:29,460
<font color="#E5E5E5">then extra extra</font>

250
00:18:24,080 --> 00:18:32,850
and so this syntax is actually a racket

251
00:18:29,460 --> 00:18:36,429
language<font color="#E5E5E5"> and this gets processed and</font>

252
00:18:32,850 --> 00:18:42,158
transformed<font color="#E5E5E5"> into a passer</font>

253
00:18:36,429 --> 00:18:44,490
and it generates exactly what we saw

254
00:18:42,159 --> 00:18:49,119
there it generates this kind of stuff

255
00:18:44,490 --> 00:18:51,669
<font color="#E5E5E5">and the way it works is we</font><font color="#CCCCCC"> have to be we</font>

256
00:18:49,119 --> 00:18:54,699
<font color="#CCCCCC">have to define what runs begin is as a</font>

257
00:18:51,669 --> 00:18:59,399
token<font color="#E5E5E5"> what</font><font color="#CCCCCC"> Pony</font><font color="#E5E5E5"> begin is and so it is</font>

258
00:18:54,700 --> 00:19:04,570
done in the reader and so the reader

259
00:18:59,399 --> 00:19:06,998
<font color="#E5E5E5">overrides another part of racket</font><font color="#CCCCCC"> instead</font>

260
00:19:04,570 --> 00:19:10,178
of a variety<font color="#CCCCCC"> in module begin</font><font color="#E5E5E5"> we</font>

261
00:19:06,999 --> 00:19:13,570
<font color="#CCCCCC">overwrite two other</font><font color="#E5E5E5"> functions read and</font>

262
00:19:10,179 --> 00:19:17,470
<font color="#CCCCCC">written tax</font><font color="#E5E5E5"> and those two</font><font color="#CCCCCC"> functions</font><font color="#E5E5E5"> are</font>

263
00:19:13,570 --> 00:19:21,189
called<font color="#E5E5E5"> when you actually read something</font>

264
00:19:17,470 --> 00:19:24,450
<font color="#E5E5E5">from a file when you import it and so</font>

265
00:19:21,190 --> 00:19:30,759
you<font color="#E5E5E5"> can define read syntax to be a</font>

266
00:19:24,450 --> 00:19:34,090
<font color="#CCCCCC">posture and here what I'm doing is so</font>

267
00:19:30,759 --> 00:19:36,759
this<font color="#E5E5E5"> is the posture</font><font color="#CCCCCC"> I defined when this</font>

268
00:19:34,090 --> 00:19:40,590
gets compiled it is compiled<font color="#E5E5E5"> into a</font>

269
00:19:36,759 --> 00:19:44,619
function called posture<font color="#E5E5E5"> code pores and</font>

270
00:19:40,590 --> 00:19:48,059
in the reader<font color="#E5E5E5"> I require it so I get</font>

271
00:19:44,619 --> 00:19:51,999
pause and as you can<font color="#E5E5E5"> see we can</font>

272
00:19:48,059 --> 00:19:54,610
visualize the<font color="#E5E5E5"> dependency so pass is</font>

273
00:19:51,999 --> 00:19:59,220
<font color="#E5E5E5">coming from this posture and so I can</font>

274
00:19:54,610 --> 00:20:07,719
call<font color="#E5E5E5"> this</font><font color="#CCCCCC"> function to generates tokens</font>

275
00:19:59,220 --> 00:20:12,909
from from my<font color="#CCCCCC"> knife ID here</font><font color="#E5E5E5"> and I define</font>

276
00:20:07,720 --> 00:20:16,360
the tokens here using a lexer<font color="#CCCCCC"> this is a</font>

277
00:20:12,909 --> 00:20:19,240
new line<font color="#E5E5E5"> so I defined that every time it</font>

278
00:20:16,360 --> 00:20:20,889
it finds<font color="#E5E5E5"> this character it generates a</font>

279
00:20:19,240 --> 00:20:25,450
token that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a new line</font><font color="#E5E5E5"> every time it</font>

280
00:20:20,889 --> 00:20:27,369
finds this suit of characters then this

281
00:20:25,450 --> 00:20:30,100
is a run to begin<font color="#CCCCCC"> every time in fines</font>

282
00:20:27,369 --> 00:20:34,209
fees this<font color="#E5E5E5"> is a ranch and every time it</font>

283
00:20:30,100 --> 00:20:35,949
finds two characters<font color="#E5E5E5"> that alphabetic two</font>

284
00:20:34,210 --> 00:20:40,840
or more characters that are fatigued

285
00:20:35,950 --> 00:20:43,580
this is an ID and anything from double

286
00:20:40,840 --> 00:20:47,600
<font color="#E5E5E5">quote</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> backwoods</font><font color="#CCCCCC"> is a string</font>

287
00:20:43,580 --> 00:20:51,560
and so by<font color="#E5E5E5"> defining your tokens there you</font>

288
00:20:47,600 --> 00:20:53,949
can<font color="#E5E5E5"> then use them here to define what</font>

289
00:20:51,560 --> 00:20:58,970
the<font color="#CCCCCC"> syntax of</font><font color="#E5E5E5"> the language here is</font><font color="#CCCCCC"> and</font>

290
00:20:53,950 --> 00:21:07,150
it will take this and process it into

291
00:20:58,970 --> 00:21:11,330
this so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a really powerful system</font>

292
00:21:07,150 --> 00:21:18,230
<font color="#CCCCCC">that allows you to define anything</font><font color="#E5E5E5"> you</font>

293
00:21:11,330 --> 00:21:21,230
want<font color="#E5E5E5"> any language you want do you</font><font color="#CCCCCC"> have</font>

294
00:21:18,230 --> 00:21:37,730
any any questions<font color="#E5E5E5"> about what's going on</font>

295
00:21:21,230 --> 00:21:46,130
<font color="#E5E5E5">or is it okay yeah so here what I'm</font>

296
00:21:37,730 --> 00:21:51,380
doing is<font color="#E5E5E5"> oh yeah so how am</font><font color="#CCCCCC"> i using the</font>

297
00:21:46,130 --> 00:21:59,570
the parser here<font color="#E5E5E5"> how</font><font color="#CCCCCC"> how am i requiring</font>

298
00:21:51,380 --> 00:22:04,310
it so one<font color="#CCCCCC"> of the issue with the bang</font>

299
00:21:59,570 --> 00:22:09,610
<font color="#E5E5E5">clank syntax is that it allows I cannot</font>

300
00:22:04,310 --> 00:22:16,280
put directly<font color="#E5E5E5"> something like that</font>

301
00:22:09,610 --> 00:22:20,209
let's say I my reader dot or<font color="#CCCCCC"> Caton it</font>

302
00:22:16,280 --> 00:22:23,300
doesn't work like<font color="#CCCCCC"> that II only actual</font>

303
00:22:20,210 --> 00:22:28,100
modules are<font color="#CCCCCC"> Auto right here so I</font><font color="#E5E5E5"> need to</font>

304
00:22:23,300 --> 00:22:33,129
create<font color="#E5E5E5"> an</font><font color="#CCCCCC"> an actual module and I make it</font>

305
00:22:28,100 --> 00:22:33,129
here let's see

306
00:22:41,539 --> 00:22:51,539
<font color="#E5E5E5">okay so this file is just declaring that</font>

307
00:22:47,070 --> 00:22:58,189
the reader is workshop<font color="#CCCCCC"> slash Twitter</font><font color="#E5E5E5"> and</font>

308
00:22:51,539 --> 00:23:03,870
<font color="#E5E5E5">so workshop / reader is our reader here</font>

309
00:22:58,190 --> 00:23:06,330
so the the way it works is<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> just you</font>

310
00:23:03,870 --> 00:23:07,979
you just have to define<font color="#E5E5E5"> a special module</font>

311
00:23:06,330 --> 00:23:12,449
that is called<font color="#E5E5E5"> the reader this is</font><font color="#CCCCCC"> a</font>

312
00:23:07,980 --> 00:23:15,570
something a bit specific that<font color="#E5E5E5"> I I had a</font>

313
00:23:12,450 --> 00:23:16,080
lot of difficulties working with this at

314
00:23:15,570 --> 00:23:18,870
first

315
00:23:16,080 --> 00:23:21,658
that's why I'm showing<font color="#CCCCCC"> this as an</font>

316
00:23:18,870 --> 00:23:24,330
example<font color="#CCCCCC"> right here</font><font color="#E5E5E5"> and I hope a lot</font><font color="#CCCCCC"> of</font>

317
00:23:21,659 --> 00:23:29,750
<font color="#CCCCCC">people trying</font><font color="#E5E5E5"> to do this will not have</font>

318
00:23:24,330 --> 00:23:34,020
to<font color="#CCCCCC"> struggle</font><font color="#E5E5E5"> with this as I struggled but</font>

319
00:23:29,750 --> 00:23:37,500
yeah right now I declare<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> the</font>

320
00:23:34,020 --> 00:23:40,260
module Pony when I require<font color="#E5E5E5"> it when I use</font>

321
00:23:37,500 --> 00:23:49,169
<font color="#CCCCCC">it the reader</font><font color="#E5E5E5"> is going to be my reader</font>

322
00:23:40,260 --> 00:23:54,900
<font color="#E5E5E5">that's it so this</font><font color="#CCCCCC"> is all I can show you</font>

323
00:23:49,169 --> 00:23:56,669
about this Pony language but I have<font color="#E5E5E5"> so I</font>

324
00:23:54,900 --> 00:24:02,299
made a lot<font color="#CCCCCC"> of over language if you</font><font color="#E5E5E5"> want</font>

325
00:23:56,669 --> 00:24:07,470
<font color="#E5E5E5">some examples more complex ones</font>

326
00:24:02,299 --> 00:24:09,720
and I encourage<font color="#E5E5E5"> you to take this example</font>

327
00:24:07,470 --> 00:24:12,809
<font color="#E5E5E5">that push push it further and make your</font>

328
00:24:09,720 --> 00:24:15,530
own<font color="#E5E5E5"> language out of</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> you're</font><font color="#CCCCCC"> free yes</font>

329
00:24:12,809 --> 00:24:15,530
<font color="#CCCCCC">first</font><font color="#E5E5E5"> question</font>

330
00:24:21,110 --> 00:24:28,729
yes<font color="#E5E5E5"> I tried</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> so yeah I'm gonna repeat</font>

331
00:24:24,830 --> 00:24:31,070
the question sorry ha is it is it

332
00:24:28,730 --> 00:24:35,360
<font color="#CCCCCC">possible to create some ended</font>

333
00:24:31,070 --> 00:24:39,139
indentation based languages like Python

334
00:24:35,360 --> 00:24:41,000
for example<font color="#E5E5E5"> so I tried</font><font color="#CCCCCC"> it and it's</font>

335
00:24:39,140 --> 00:24:46,970
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> possible but it's a bit</font>

336
00:24:41,000 --> 00:24:51,980
complicated<font color="#CCCCCC"> because Brad as I showed</font>

337
00:24:46,970 --> 00:24:56,260
here will not<font color="#E5E5E5"> be enough because indent</font>

338
00:24:51,980 --> 00:25:02,630
indentation based languages are not

339
00:24:56,260 --> 00:25:05,240
<font color="#E5E5E5">regular grammars</font><font color="#CCCCCC"> they cannot be computed</font>

340
00:25:02,630 --> 00:25:10,670
<font color="#CCCCCC">using</font><font color="#E5E5E5"> the kind of grammar</font><font color="#CCCCCC"> I showed here</font>

341
00:25:05,240 --> 00:25:13,520
<font color="#CCCCCC">you need a recursive grammar</font><font color="#E5E5E5"> and you</font>

342
00:25:10,670 --> 00:25:17,960
need to<font color="#E5E5E5"> keep the state of what is the</font>

343
00:25:13,520 --> 00:25:19,879
number of indentation<font color="#E5E5E5"> and this is so</font>

344
00:25:17,960 --> 00:25:21,950
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> getting a bit more complicated</font>

345
00:25:19,880 --> 00:25:31,340
as possible<font color="#E5E5E5"> but it's more complicated</font>

346
00:25:21,950 --> 00:25:37,240
<font color="#E5E5E5">but the example I got there so one</font><font color="#CCCCCC"> of</font>

347
00:25:31,340 --> 00:25:39,980
the languages I made with this was it's

348
00:25:37,240 --> 00:25:43,960
<font color="#E5E5E5">one of the first languages I</font><font color="#CCCCCC"> made with</font>

349
00:25:39,980 --> 00:25:51,290
this was a language<font color="#E5E5E5"> for generating</font>

350
00:25:43,960 --> 00:25:54,110
emulators<font color="#E5E5E5"> from CPU description so you</font>

351
00:25:51,290 --> 00:25:56,210
just<font color="#CCCCCC"> described what the CPU is</font><font color="#E5E5E5"> without</font>

352
00:25:54,110 --> 00:26:03,590
the operations<font color="#E5E5E5"> and it generates an</font>

353
00:25:56,210 --> 00:26:05,550
emulator<font color="#CCCCCC"> I called it virtual NPU and let</font>

354
00:26:03,590 --> 00:26:18,310
me see

355
00:26:05,550 --> 00:26:20,260
so one of the one of<font color="#E5E5E5"> the fights</font><font color="#CCCCCC"> so this</font>

356
00:26:18,310 --> 00:26:24,580
is the the<font color="#E5E5E5"> kind of file you can create</font>

357
00:26:20,260 --> 00:26:27,700
<font color="#E5E5E5">with with this language you</font><font color="#CCCCCC"> declare an</font>

358
00:26:24,580 --> 00:26:32,159
<font color="#E5E5E5">MTU you declare</font><font color="#CCCCCC"> a name</font><font color="#E5E5E5"> then you declare</font>

359
00:26:27,700 --> 00:26:36,480
the registers<font color="#CCCCCC"> okay so we</font><font color="#E5E5E5"> CPU as an a</font>

360
00:26:32,160 --> 00:26:41,560
<font color="#E5E5E5">register B register a status</font><font color="#CCCCCC"> register</font>

361
00:26:36,480 --> 00:26:47,050
the<font color="#E5E5E5"> the stack pointer register is 16</font>

362
00:26:41,560 --> 00:26:49,270
bits<font color="#E5E5E5"> stuff like that</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> precise you</font>

363
00:26:47,050 --> 00:26:54,159
can<font color="#CCCCCC"> declare that</font><font color="#E5E5E5"> the the status</font><font color="#CCCCCC"> register</font>

364
00:26:49,270 --> 00:26:56,350
is<font color="#CCCCCC"> sr and that all the bits mean this so</font>

365
00:26:54,160 --> 00:26:58,690
there's one bit when means it's the

366
00:26:56,350 --> 00:27:01,389
<font color="#CCCCCC">carry one</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> it's V overflow extra</font>

367
00:26:58,690 --> 00:27:05,830
extra you declare interrupts<font color="#E5E5E5"> and when</font>

368
00:27:01,390 --> 00:27:10,780
you declare all the<font color="#E5E5E5"> operations and I</font>

369
00:27:05,830 --> 00:27:13,000
made my own<font color="#E5E5E5"> somewhat macro system inside</font>

370
00:27:10,780 --> 00:27:18,250
<font color="#E5E5E5">this operation stuff the operations I</font>

371
00:27:13,000 --> 00:27:20,560
are starting<font color="#E5E5E5"> here with</font><font color="#CCCCCC"> the branches</font><font color="#E5E5E5"> so</font>

372
00:27:18,250 --> 00:27:22,330
without the the different style<font color="#E5E5E5"> the</font>

373
00:27:20,560 --> 00:27:28,260
different kind<font color="#E5E5E5"> of branches in the in the</font>

374
00:27:22,330 --> 00:27:34,870
emulator<font color="#CCCCCC"> then the move load a would be</font>

375
00:27:28,260 --> 00:27:38,860
<font color="#CCCCCC">load stack pointer there stock</font>

376
00:27:34,870 --> 00:27:45,219
manipulations nav<font color="#E5E5E5"> add a plus B stuff</font>

377
00:27:38,860 --> 00:27:48,070
like that<font color="#E5E5E5"> and some of them required</font><font color="#CCCCCC"> some</font>

378
00:27:45,220 --> 00:27:50,800
of them have<font color="#E5E5E5"> add exactly</font><font color="#CCCCCC"> the same way of</font>

379
00:27:48,070 --> 00:27:55,210
<font color="#CCCCCC">working for a lot of stuff</font><font color="#E5E5E5"> so I made</font>

380
00:27:50,800 --> 00:27:59,800
macros<font color="#CCCCCC"> for example various abstraction</font>

381
00:27:55,210 --> 00:28:04,000
<font color="#E5E5E5">addition and you can declare them on the</font>

382
00:27:59,800 --> 00:28:07,450
top so here<font color="#E5E5E5"> subtraction</font><font color="#CCCCCC"> and additions</font>

383
00:28:04,000 --> 00:28:09,730
are described<font color="#CCCCCC"> here</font><font color="#E5E5E5"> you just say that you</font>

384
00:28:07,450 --> 00:28:14,830
want a result you want the result of

385
00:28:09,730 --> 00:28:16,720
adding<font color="#CCCCCC"> voice together and then you you</font>

386
00:28:14,830 --> 00:28:17,429
change<font color="#E5E5E5"> to carry you change we have carry</font>

387
00:28:16,720 --> 00:28:20,930
<font color="#CCCCCC">you change</font>

388
00:28:17,430 --> 00:28:27,150
<font color="#CCCCCC">Flo you you do a bunch</font><font color="#E5E5E5"> of stuff inside</font>

389
00:28:20,930 --> 00:28:30,440
the CPU and you get you a<font color="#E5E5E5"> result</font><font color="#CCCCCC"> so this</font>

390
00:28:27,150 --> 00:28:34,850
<font color="#E5E5E5">is an example of the the kind of</font>

391
00:28:30,440 --> 00:28:38,130
<font color="#E5E5E5">language you can make ice in this one I</font>

392
00:28:34,850 --> 00:28:44,550
prefer<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> s expressions and another</font>

393
00:28:38,130 --> 00:28:52,350
special<font color="#E5E5E5"> language but I also did in the</font>

394
00:28:44,550 --> 00:28:55,200
same project<font color="#CCCCCC"> I also did another</font><font color="#E5E5E5"> another</font>

395
00:28:52,350 --> 00:29:00,050
language which is actually an assembler

396
00:28:55,200 --> 00:29:04,530
<font color="#E5E5E5">and so I created a language that</font><font color="#CCCCCC"> passes</font>

397
00:29:00,050 --> 00:29:08,780
assembly language so this time<font color="#CCCCCC"> I needed</font>

398
00:29:04,530 --> 00:29:12,360
<font color="#E5E5E5">a special reader and stuff like that but</font>

399
00:29:08,780 --> 00:29:14,639
this code right<font color="#CCCCCC"> here is is paused and</font>

400
00:29:12,360 --> 00:29:17,100
transformed<font color="#E5E5E5"> into an S expression and</font>

401
00:29:14,640 --> 00:29:21,180
transformed it to racket functions and

402
00:29:17,100 --> 00:29:27,959
then<font color="#CCCCCC"> executed and it's</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> assembly</font>

403
00:29:21,180 --> 00:29:34,530
<font color="#E5E5E5">language at first so for this one</font><font color="#CCCCCC"> the</font>

404
00:29:27,960 --> 00:29:39,660
reader<font color="#E5E5E5"> looks like this is like</font><font color="#CCCCCC"> with</font>

405
00:29:34,530 --> 00:29:42,210
tokens<font color="#CCCCCC"> it's like a</font><font color="#E5E5E5"> token for numbers so</font>

406
00:29:39,660 --> 00:29:49,250
numbers can have the law before them<font color="#CCCCCC"> if</font>

407
00:29:42,210 --> 00:29:49,250
it can<font color="#E5E5E5"> be in in exile</font><font color="#CCCCCC"> single format</font>

408
00:29:49,400 --> 00:29:59,850
there's like these comments so I guess

409
00:29:53,940 --> 00:30:02,280
comments with a<font color="#E5E5E5"> semicolon and and stuff</font>

410
00:29:59,850 --> 00:30:05,189
like that<font color="#E5E5E5"> well there's a special</font><font color="#CCCCCC"> section</font>

411
00:30:02,280 --> 00:30:09,950
<font color="#E5E5E5">for that you can put data in there and</font>

412
00:30:05,190 --> 00:30:16,010
stuff<font color="#E5E5E5"> like that and the passer</font>

413
00:30:09,950 --> 00:30:20,730
looks like this so an assembly is just

414
00:30:16,010 --> 00:30:23,580
lines<font color="#E5E5E5"> any number of lines within new</font>

415
00:30:20,730 --> 00:30:25,650
lines between and then<font color="#E5E5E5"> a line is can be</font>

416
00:30:23,580 --> 00:30:29,909
an instruction or<font color="#E5E5E5"> an assignment or data</font>

417
00:30:25,650 --> 00:30:30,490
<font color="#E5E5E5">declaration an instruction as a tag</font><font color="#CCCCCC"> and</font>

418
00:30:29,910 --> 00:30:32,800
optional

419
00:30:30,490 --> 00:30:34,630
<font color="#CCCCCC">I've been any number of space in the</font>

420
00:30:32,800 --> 00:30:38,260
<font color="#CCCCCC">money then any number space and</font>

421
00:30:34,630 --> 00:30:40,600
<font color="#E5E5E5">appearance and stuff like that so</font><font color="#CCCCCC"> it's</font>

422
00:30:38,260 --> 00:30:47,770
<font color="#E5E5E5">it's like 20 lines and it passes</font>

423
00:30:40,600 --> 00:30:50,020
<font color="#CCCCCC">assembly</font><font color="#E5E5E5"> language</font><font color="#CCCCCC"> and it took me</font><font color="#E5E5E5"> I've</font>

424
00:30:47,770 --> 00:30:53,559
been working on<font color="#E5E5E5"> this project for maybe</font>

425
00:30:50,020 --> 00:30:59,910
one month<font color="#E5E5E5"> and I knew nothing about how</font>

426
00:30:53,559 --> 00:31:04,480
Bragg works<font color="#E5E5E5"> before and I just learned</font>

427
00:30:59,910 --> 00:31:06,910
<font color="#CCCCCC">how it</font><font color="#E5E5E5"> worked and in in 20 lines of of</font>

428
00:31:04,480 --> 00:31:17,340
code you can you can generate a<font color="#CCCCCC"> parser</font>

429
00:31:06,910 --> 00:31:17,340
for for assembly language what can I<font color="#E5E5E5"> say</font>

430
00:31:24,970 --> 00:31:35,020
so right now it's<font color="#CCCCCC"> assembled</font><font color="#E5E5E5"> it's</font>

431
00:31:28,990 --> 00:31:39,150
expanded into binary<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> way it</font><font color="#E5E5E5"> works</font>

432
00:31:35,020 --> 00:31:44,590
is it passes we assembly<font color="#CCCCCC"> assembly and</font>

433
00:31:39,150 --> 00:31:47,830
then generates<font color="#CCCCCC"> up codes for all the</font>

434
00:31:44,590 --> 00:31:52,600
assembly stuff and then put<font color="#CCCCCC"> that into a</font>

435
00:31:47,830 --> 00:31:54,250
file and so it compiles<font color="#CCCCCC"> binary</font><font color="#E5E5E5"> and I put</font>

436
00:31:52,600 --> 00:32:02,699
it there multiple<font color="#E5E5E5"> options you can</font>

437
00:31:54,250 --> 00:32:02,700
generate the<font color="#CCCCCC"> Motorola</font><font color="#E5E5E5"> s reg format or</font>

438
00:32:02,970 --> 00:32:06,970
the<font color="#CCCCCC"> Intel format or stuff like that or</font>

439
00:32:06,100 --> 00:32:10,780
direct dinery

440
00:32:06,970 --> 00:32:14,440
<font color="#CCCCCC">stuff like that</font><font color="#E5E5E5"> so yeah it's it's</font>

441
00:32:10,780 --> 00:32:17,639
<font color="#E5E5E5">working assembler for the for the CPU I</font>

442
00:32:14,440 --> 00:32:17,640
want I wanted to emulate

443
00:32:17,790 --> 00:32:20,889
[Music]

444
00:32:23,550 --> 00:32:37,470
<font color="#E5E5E5">yep</font><font color="#CCCCCC"> Rogers like so yeah right</font><font color="#E5E5E5"> it is a is</font>

445
00:32:34,740 --> 00:32:40,320
a list language from the<font color="#CCCCCC"> scheme family</font>

446
00:32:37,470 --> 00:32:57,300
in which allows you to<font color="#E5E5E5"> define</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> own</font>

447
00:32:40,320 --> 00:33:02,070
language<font color="#CCCCCC"> so he's wondering how I'm</font>

448
00:32:57,300 --> 00:33:05,360
generating racket code<font color="#E5E5E5"> but how does it</font>

449
00:33:02,070 --> 00:33:12,600
<font color="#E5E5E5">compares to something else after</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so</font>

450
00:33:05,360 --> 00:33:28,139
in this case I<font color="#E5E5E5"> freaking can showed the</font>

451
00:33:12,600 --> 00:33:31,799
expander so I'm<font color="#CCCCCC"> going to show</font>

452
00:33:28,140 --> 00:33:31,799
[Music]

453
00:33:37,420 --> 00:33:43,510
[Music]

454
00:33:43,580 --> 00:33:57,470
<font color="#CCCCCC">thank you the interesting file here</font>

455
00:33:51,059 --> 00:33:57,470
would be there okay<font color="#CCCCCC"> yes</font><font color="#E5E5E5"> Umbra</font>

456
00:34:04,850 --> 00:34:19,668
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> so it</font><font color="#E5E5E5"> is compiled in two structures</font>

457
00:34:11,260 --> 00:34:21,440
<font color="#E5E5E5">racket structures so the yeah so at</font>

458
00:34:19,668 --> 00:34:24,489
<font color="#E5E5E5">first it compiles into racket language</font>

459
00:34:21,440 --> 00:34:34,310
<font color="#E5E5E5">and then when the racket language</font>

460
00:34:24,489 --> 00:34:38,199
<font color="#E5E5E5">executes it generates the binary</font><font color="#CCCCCC"> it</font>

461
00:34:34,310 --> 00:34:42,199
generates binary and from the assembler

462
00:34:38,199 --> 00:34:46,219
<font color="#E5E5E5">like the assembler the assembly language</font>

463
00:34:42,199 --> 00:34:49,040
is assembled into a binary so that it

464
00:34:46,219 --> 00:34:52,908
<font color="#E5E5E5">works on the target machine</font><font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> it</font>

465
00:34:49,040 --> 00:34:57,529
<font color="#E5E5E5">to work so</font><font color="#CCCCCC"> what I'm doing is</font><font color="#E5E5E5"> I'm</font>

466
00:34:52,909 --> 00:35:00,290
generating<font color="#CCCCCC"> code that is executed to do</font>

467
00:34:57,530 --> 00:35:02,599
what I want instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> just executing</font>

468
00:35:00,290 --> 00:35:09,020
some code<font color="#E5E5E5"> and generating code</font><font color="#CCCCCC"> it then it</font>

469
00:35:02,599 --> 00:35:11,750
executes so I pass<font color="#E5E5E5"> the assembly into a</font>

470
00:35:09,020 --> 00:35:15,069
racket structure then the<font color="#CCCCCC"> racket</font>

471
00:35:11,750 --> 00:35:19,460
structure is passed into racket code

472
00:35:15,069 --> 00:35:22,099
<font color="#E5E5E5">then</font><font color="#CCCCCC"> the racket code is executed and the</font>

473
00:35:19,460 --> 00:35:26,210
the main function of<font color="#E5E5E5"> that execution is</font>

474
00:35:22,099 --> 00:35:28,220
write to a file the<font color="#E5E5E5"> first the</font><font color="#CCCCCC"> first</font>

475
00:35:26,210 --> 00:35:31,369
function<font color="#CCCCCC"> that is called</font><font color="#E5E5E5"> is write</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> to</font>

476
00:35:28,220 --> 00:35:34,368
a file and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> everything else is that</font>

477
00:35:31,369 --> 00:35:39,980
the<font color="#CCCCCC"> data that I scrambled and mashed</font>

478
00:35:34,369 --> 00:35:43,220
together<font color="#CCCCCC"> I could have written I mean</font>

479
00:35:39,980 --> 00:35:44,540
it's a way<font color="#E5E5E5"> to write an assembler I could</font>

480
00:35:43,220 --> 00:35:49,009
have written an assembler in any

481
00:35:44,540 --> 00:35:52,099
language<font color="#CCCCCC"> but the way it works</font><font color="#E5E5E5"> in in</font>

482
00:35:49,010 --> 00:35:54,470
racket is interesting because you define

483
00:35:52,099 --> 00:36:00,770
<font color="#E5E5E5">your program as a language instead</font><font color="#CCCCCC"> of</font>

484
00:35:54,470 --> 00:36:03,439
<font color="#E5E5E5">just a program so instead of saying</font><font color="#CCCCCC"> okay</font>

485
00:36:00,770 --> 00:36:07,369
<font color="#CCCCCC">I wrote</font><font color="#E5E5E5"> this assembler you just run</font><font color="#CCCCCC"> it</font>

486
00:36:03,440 --> 00:36:10,280
on<font color="#E5E5E5"> some code and then you get a binary I</font>

487
00:36:07,369 --> 00:36:13,250
say<font color="#E5E5E5"> I wrote a language that</font><font color="#CCCCCC"> is actually</font>

488
00:36:10,280 --> 00:36:17,090
an<font color="#CCCCCC"> assembling</font><font color="#E5E5E5"> language and so when you</font>

489
00:36:13,250 --> 00:36:21,770
<font color="#E5E5E5">use</font><font color="#CCCCCC"> it you assemble into binary</font>

490
00:36:17,090 --> 00:36:23,960
so it's it's a bit like changing<font color="#E5E5E5"> your</font>

491
00:36:21,770 --> 00:36:26,750
the way you think about programs<font color="#E5E5E5"> instead</font>

492
00:36:23,960 --> 00:36:29,770
of using programs<font color="#CCCCCC"> you create languages</font>

493
00:36:26,750 --> 00:36:40,030
and you use with<font color="#E5E5E5"> languages it's the way</font>

494
00:36:29,770 --> 00:36:40,030
<font color="#E5E5E5">racket promotes any other questions</font>

495
00:36:44,700 --> 00:36:54,100
so what's the benefit doing<font color="#E5E5E5"> this one of</font>

496
00:36:51,040 --> 00:36:59,380
the thing I like with this<font color="#E5E5E5"> is that you</font>

497
00:36:54,100 --> 00:37:02,410
define<font color="#CCCCCC"> instead of</font><font color="#E5E5E5"> thinking</font><font color="#CCCCCC"> in terms of</font><font color="#E5E5E5"> I</font>

498
00:36:59,380 --> 00:37:05,560
need this program<font color="#E5E5E5"> that</font><font color="#CCCCCC"> angles this data</font>

499
00:37:02,410 --> 00:37:08,290
this way<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> thinking into pipes</font>

500
00:37:05,560 --> 00:37:13,270
that<font color="#CCCCCC"> you put together to achieve a</font>

501
00:37:08,290 --> 00:37:16,420
result<font color="#E5E5E5"> you think into how can</font><font color="#CCCCCC"> I best</font>

502
00:37:13,270 --> 00:37:19,150
describe my problem<font color="#E5E5E5"> how can I best</font>

503
00:37:16,420 --> 00:37:21,430
describe my issue<font color="#E5E5E5"> what is the thing</font><font color="#CCCCCC"> that</font>

504
00:37:19,150 --> 00:37:24,310
I want to<font color="#E5E5E5"> do and how can I describe it</font>

505
00:37:21,430 --> 00:37:28,740
so<font color="#E5E5E5"> that it's obvious when you read the</font>

506
00:37:24,310 --> 00:37:34,170
code<font color="#E5E5E5"> what you what</font><font color="#CCCCCC"> you want to do and so</font>

507
00:37:28,740 --> 00:37:38,649
racket<font color="#E5E5E5"> allows you to open</font><font color="#CCCCCC"> the file and</font>

508
00:37:34,170 --> 00:37:43,440
say<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so my problem is</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> bakeries</font>

509
00:37:38,650 --> 00:37:47,590
<font color="#CCCCCC">I wanna I want to generate I want to</font>

510
00:37:43,440 --> 00:37:51,850
sell bread and cross<font color="#CCCCCC"> some and stuff like</font>

511
00:37:47,590 --> 00:37:54,640
that<font color="#E5E5E5"> so I have a bakery and it says it</font>

512
00:37:51,850 --> 00:38:01,440
<font color="#CCCCCC">says a lot of</font><font color="#E5E5E5"> stuff so</font><font color="#CCCCCC"> he does</font><font color="#E5E5E5"> product</font>

513
00:37:54,640 --> 00:38:08,049
and there's like<font color="#CCCCCC"> request saw and</font><font color="#E5E5E5"> is like</font>

514
00:38:01,440 --> 00:38:10,050
red and baguette and stuff and and you

515
00:38:08,050 --> 00:38:12,910
start by thinking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> your data and</font>

516
00:38:10,050 --> 00:38:15,490
then<font color="#CCCCCC"> you make it</font><font color="#E5E5E5"> so that this data is</font>

517
00:38:12,910 --> 00:38:19,830
<font color="#CCCCCC">actually executed</font><font color="#E5E5E5"> it's actually a</font>

518
00:38:15,490 --> 00:38:26,560
program<font color="#E5E5E5"> and actually makes what you want</font>

519
00:38:19,830 --> 00:38:30,700
so<font color="#E5E5E5"> so the benefit I find is</font><font color="#CCCCCC"> that instead</font>

520
00:38:26,560 --> 00:38:33,759
of<font color="#E5E5E5"> thinking about making programs that</font>

521
00:38:30,700 --> 00:38:35,740
takes<font color="#E5E5E5"> data and output</font><font color="#CCCCCC"> something you just</font>

522
00:38:33,760 --> 00:38:38,920
<font color="#E5E5E5">write</font><font color="#CCCCCC"> your data the best way</font><font color="#E5E5E5"> you want</font>

523
00:38:35,740 --> 00:38:43,330
your data to look and then it executes

524
00:38:38,920 --> 00:38:47,380
into something and that's what<font color="#E5E5E5"> I found a</font>

525
00:38:43,330 --> 00:38:49,869
bit<font color="#E5E5E5"> magical about about this this way of</font>

526
00:38:47,380 --> 00:38:52,320
<font color="#CCCCCC">working is that it redefines the</font><font color="#E5E5E5"> way you</font>

527
00:38:49,869 --> 00:38:56,010
you program you you don't

528
00:38:52,320 --> 00:38:59,190
it changed a bit<font color="#CCCCCC"> mine my way of</font><font color="#E5E5E5"> see</font>

529
00:38:56,010 --> 00:39:04,110
in programming<font color="#CCCCCC"> and and languages</font><font color="#E5E5E5"> in</font>

530
00:38:59,190 --> 00:39:07,230
<font color="#CCCCCC">general I don't have to</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> okay</font>

531
00:39:04,110 --> 00:39:10,050
in Python there are<font color="#E5E5E5"> those kind of data</font>

532
00:39:07,230 --> 00:39:12,450
structures that<font color="#CCCCCC"> I need to use or I</font>

533
00:39:10,050 --> 00:39:15,480
remember with my<font color="#E5E5E5"> colleagues we had</font>

534
00:39:12,450 --> 00:39:17,580
really long talks about we should<font color="#E5E5E5"> using</font>

535
00:39:15,480 --> 00:39:20,850
this kind<font color="#E5E5E5"> of classes and then this class</font>

536
00:39:17,580 --> 00:39:25,380
inherits<font color="#E5E5E5"> this class and then it</font>

537
00:39:20,850 --> 00:39:28,290
generates<font color="#E5E5E5"> this</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> this interface</font>

538
00:39:25,380 --> 00:39:30,960
<font color="#CCCCCC">and we need to change</font><font color="#E5E5E5"> the interface so</font>

539
00:39:28,290 --> 00:39:32,730
<font color="#CCCCCC">that this customer can work correctly</font>

540
00:39:30,960 --> 00:39:36,920
with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> interface and this class</font>

541
00:39:32,730 --> 00:39:39,960
interacts with this class<font color="#E5E5E5"> and we are the</font>

542
00:39:36,920 --> 00:39:42,600
<font color="#CCCCCC">it forces the the way</font><font color="#E5E5E5"> you think about</font>

543
00:39:39,960 --> 00:39:44,760
programming<font color="#E5E5E5"> is you have to surround you</font>

544
00:39:42,600 --> 00:39:46,620
have<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> working with C shop for</font>

545
00:39:44,760 --> 00:39:51,630
<font color="#CCCCCC">example you have you have classes</font><font color="#E5E5E5"> you</font>

546
00:39:46,620 --> 00:39:55,200
have you have reflection<font color="#CCCCCC"> you have a lot</font>

547
00:39:51,630 --> 00:39:58,530
of<font color="#E5E5E5"> tools</font><font color="#CCCCCC"> around but I think only with</font>

548
00:39:55,200 --> 00:40:01,129
tools in<font color="#E5E5E5"> your hands</font><font color="#CCCCCC"> you only think about</font>

549
00:39:58,530 --> 00:40:03,570
how to use<font color="#E5E5E5"> voice tools you only think</font>

550
00:40:01,130 --> 00:40:06,330
the only way you you think<font color="#E5E5E5"> about</font>

551
00:40:03,570 --> 00:40:12,210
resolving<font color="#CCCCCC"> your problem is</font><font color="#E5E5E5"> using those</font>

552
00:40:06,330 --> 00:40:15,060
tools<font color="#E5E5E5"> so if instead of thinking in</font><font color="#CCCCCC"> terms</font>

553
00:40:12,210 --> 00:40:17,670
of tools<font color="#E5E5E5"> we think in</font><font color="#CCCCCC"> terms of</font><font color="#E5E5E5"> what is</font>

554
00:40:15,060 --> 00:40:22,410
<font color="#E5E5E5">the actual program</font><font color="#CCCCCC"> and the</font><font color="#E5E5E5"> data that I</font>

555
00:40:17,670 --> 00:40:25,860
want<font color="#CCCCCC"> to process</font><font color="#E5E5E5"> and what do I really</font>

556
00:40:22,410 --> 00:40:28,620
<font color="#E5E5E5">want</font><font color="#CCCCCC"> do you write the language</font><font color="#E5E5E5"> that</font>

557
00:40:25,860 --> 00:40:30,240
gives<font color="#E5E5E5"> you the best tools</font><font color="#CCCCCC"> for this task</font>

558
00:40:28,620 --> 00:40:35,390
<font color="#E5E5E5">and this could be</font><font color="#CCCCCC"> a different language</font>

559
00:40:30,240 --> 00:40:35,390
<font color="#E5E5E5">depending on on the domain yes</font>

560
00:40:38,099 --> 00:40:44,319
so you still have to write the tools to

561
00:40:41,020 --> 00:40:49,690
translate your your data into actions

562
00:40:44,319 --> 00:40:54,369
<font color="#E5E5E5">and what I like is that the way</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> wide</font>

563
00:40:49,690 --> 00:40:56,740
the tools is<font color="#CCCCCC"> full language</font><font color="#E5E5E5"> so they are</font>

564
00:40:54,369 --> 00:41:00,160
<font color="#E5E5E5">not just tools they are</font><font color="#CCCCCC"> a language</font><font color="#E5E5E5"> that</font>

565
00:40:56,740 --> 00:41:04,089
<font color="#E5E5E5">you can make evolve and that</font><font color="#CCCCCC"> you can</font>

566
00:41:00,160 --> 00:41:06,430
document<font color="#E5E5E5"> that you can write</font>

567
00:41:04,089 --> 00:41:09,069
specification for<font color="#E5E5E5"> that</font><font color="#CCCCCC"> language and that</font>

568
00:41:06,430 --> 00:41:13,419
you can<font color="#E5E5E5"> share with colleagues and that</font>

569
00:41:09,069 --> 00:41:15,849
you can<font color="#E5E5E5"> promote and that is adapted</font><font color="#CCCCCC"> to</font>

570
00:41:13,420 --> 00:41:22,720
your company<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> product you're</font>

571
00:41:15,849 --> 00:41:25,000
<font color="#E5E5E5">working on and the clients and it's it</font>

572
00:41:22,720 --> 00:41:26,950
doesn't<font color="#CCCCCC"> change</font><font color="#E5E5E5"> the way it doesn't change</font>

573
00:41:25,000 --> 00:41:29,740
completely<font color="#E5E5E5"> the way we work we still</font>

574
00:41:26,950 --> 00:41:34,740
write tools<font color="#E5E5E5"> and boosters</font><font color="#CCCCCC"> our executives</font>

575
00:41:29,740 --> 00:41:40,089
so that we we get we get what<font color="#CCCCCC"> we</font><font color="#E5E5E5"> want</font>

576
00:41:34,740 --> 00:41:42,368
but instead<font color="#CCCCCC"> of having some executables</font>

577
00:41:40,089 --> 00:41:45,940
that<font color="#E5E5E5"> no one knows how</font><font color="#CCCCCC"> it works</font><font color="#E5E5E5"> in a</font>

578
00:41:42,369 --> 00:41:49,059
shady<font color="#CCCCCC"> place in</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> repository but no</font>

579
00:41:45,940 --> 00:41:54,220
one touched<font color="#E5E5E5"> for</font><font color="#CCCCCC"> 10 years and there's</font><font color="#E5E5E5"> no</font>

580
00:41:49,059 --> 00:41:58,299
documentation for<font color="#CCCCCC"> that and can you</font>

581
00:41:54,220 --> 00:42:01,180
<font color="#CCCCCC">change it so that it it endles the new</font>

582
00:41:58,299 --> 00:42:02,890
stuff that<font color="#E5E5E5"> just came</font><font color="#CCCCCC"> around and</font><font color="#E5E5E5"> you look</font>

583
00:42:01,180 --> 00:42:05,078
at this legacy code<font color="#E5E5E5"> and you're like okay</font>

584
00:42:02,890 --> 00:42:07,799
it's<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> make it I'm</font><font color="#CCCCCC"> gonna</font>

585
00:42:05,079 --> 00:42:13,510
<font color="#E5E5E5">need to rewrite this from scratch and</font>

586
00:42:07,799 --> 00:42:15,339
instead if<font color="#CCCCCC"> you have a language yes</font><font color="#E5E5E5"> you</font>

587
00:42:13,510 --> 00:42:18,970
will<font color="#E5E5E5"> need to change it you will need to</font>

588
00:42:15,339 --> 00:42:22,558
adapt it you will need to modify<font color="#E5E5E5"> the way</font>

589
00:42:18,970 --> 00:42:25,270
it works to adapt to the situation<font color="#CCCCCC"> but</font>

590
00:42:22,559 --> 00:42:29,260
<font color="#E5E5E5">it's a complete language it's not just</font>

591
00:42:25,270 --> 00:42:34,650
tools<font color="#E5E5E5"> around and so it has consistency</font>

592
00:42:29,260 --> 00:42:34,650
<font color="#E5E5E5">as</font><font color="#CCCCCC"> a logic behind and that's</font><font color="#E5E5E5"> what I like</font>

593
00:42:41,120 --> 00:42:47,600
anyone want to try<font color="#E5E5E5"> racket now raise</font><font color="#CCCCCC"> your</font>

594
00:42:45,840 --> 00:42:57,390
<font color="#E5E5E5">hand</font>

595
00:42:47,600 --> 00:43:01,049
great<font color="#CCCCCC"> I mostly use rackets in</font><font color="#E5E5E5"> my free</font>

596
00:42:57,390 --> 00:43:10,589
time<font color="#CCCCCC"> cause in real life and</font><font color="#E5E5E5"> actually</font>

597
00:43:01,050 --> 00:43:13,080
<font color="#E5E5E5">doing</font><font color="#CCCCCC"> JavaScript but actually I'm doing</font>

598
00:43:10,590 --> 00:43:16,830
something<font color="#E5E5E5"> that is in relation</font><font color="#CCCCCC"> between</font>

599
00:43:13,080 --> 00:43:20,009
<font color="#E5E5E5">JavaScript</font><font color="#CCCCCC"> and rackets recently I've</font>

600
00:43:16,830 --> 00:43:23,960
been<font color="#CCCCCC"> working on a project that has been</font>

601
00:43:20,010 --> 00:43:27,360
<font color="#E5E5E5">studied by students at the University of</font>

602
00:43:23,960 --> 00:43:29,760
at the MIT and he's been<font color="#CCCCCC"> walking with</font>

603
00:43:27,360 --> 00:43:35,520
<font color="#E5E5E5">racket a lot and</font><font color="#CCCCCC"> he's he has written a</font>

604
00:43:29,760 --> 00:43:40,440
<font color="#E5E5E5">lot</font><font color="#CCCCCC"> of theses about about a lot</font><font color="#E5E5E5"> of stuff</font>

605
00:43:35,520 --> 00:43:43,140
in racket<font color="#E5E5E5"> and for his ph.d he</font><font color="#CCCCCC"> invented</font>

606
00:43:40,440 --> 00:43:47,910
the<font color="#CCCCCC"> language that generates</font><font color="#E5E5E5"> JavaScript</font>

607
00:43:43,140 --> 00:44:03,140
from racket<font color="#E5E5E5"> and this language is really</font>

608
00:43:47,910 --> 00:44:03,140
interesting it's called Erlang<font color="#CCCCCC"> and so</font>

609
00:44:04,760 --> 00:44:12,780
and<font color="#CCCCCC"> so this this language uses racket</font>

610
00:44:09,810 --> 00:44:15,180
<font color="#E5E5E5">and generates</font><font color="#CCCCCC"> active</font><font color="#E5E5E5"> JavaScript so this</font>

611
00:44:12,780 --> 00:44:17,160
is how it<font color="#E5E5E5"> looks</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> I you write something</font>

612
00:44:15,180 --> 00:44:20,220
<font color="#CCCCCC">like</font><font color="#E5E5E5"> that and it generates this kind of</font>

613
00:44:17,160 --> 00:44:24,750
stuff<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is really interesting</font>

614
00:44:20,220 --> 00:44:29,819
<font color="#E5E5E5">because this this is similar</font><font color="#CCCCCC"> to the work</font>

615
00:44:24,750 --> 00:44:32,250
of the team at Babel<font color="#E5E5E5"> the</font><font color="#CCCCCC"> way Babel works</font>

616
00:44:29,820 --> 00:44:35,370
is that it generates<font color="#CCCCCC"> it's a generator</font>

617
00:44:32,250 --> 00:44:37,680
for JavaScript<font color="#E5E5E5"> and it passes the the</font>

618
00:44:35,370 --> 00:44:39,540
syntax<font color="#E5E5E5"> of JavaScript and</font><font color="#CCCCCC"> it understands</font>

619
00:44:37,680 --> 00:44:41,069
what you need when you<font color="#CCCCCC"> want from your</font>

620
00:44:39,540 --> 00:44:43,920
JavaScript code<font color="#CCCCCC"> and it transforms it</font>

621
00:44:41,070 --> 00:44:46,890
into<font color="#CCCCCC"> our JavaScript code</font><font color="#E5E5E5"> that runs on</font>

622
00:44:43,920 --> 00:44:49,020
any<font color="#E5E5E5"> browser and Babel is</font><font color="#CCCCCC"> an awesome</font>

623
00:44:46,890 --> 00:44:51,230
project<font color="#CCCCCC"> know some open source project</font>

624
00:44:49,020 --> 00:44:51,230
and

625
00:44:52,620 --> 00:44:59,880
this is the kind of stuff that allows to

626
00:44:56,400 --> 00:45:03,690
do the same thing as<font color="#CCCCCC"> Babel but using the</font>

627
00:44:59,880 --> 00:45:08,580
power<font color="#CCCCCC"> of macros in racket</font><font color="#E5E5E5"> so everything</font>

628
00:45:03,690 --> 00:45:11,970
here<font color="#E5E5E5"> can be used as data can be passed</font>

629
00:45:08,580 --> 00:45:13,170
can be modified can be<font color="#E5E5E5"> analyzed so that</font>

630
00:45:11,970 --> 00:45:15,390
you can generate<font color="#CCCCCC"> different</font><font color="#E5E5E5"> JavaScript</font>

631
00:45:13,170 --> 00:45:18,570
<font color="#E5E5E5">depending on the situation</font><font color="#CCCCCC"> so that</font><font color="#E5E5E5"> you</font>

632
00:45:15,390 --> 00:45:22,020
can generate JavaScript depending on the

633
00:45:18,570 --> 00:45:24,990
browser or stuff<font color="#CCCCCC"> like that and it</font>

634
00:45:22,020 --> 00:45:28,259
happens<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> Babel project has a</font>

635
00:45:24,990 --> 00:45:32,759
system called macros<font color="#E5E5E5"> that they wrote by</font>

636
00:45:28,260 --> 00:45:36,960
from scratch by hand<font color="#E5E5E5"> and it works mostly</font>

637
00:45:32,760 --> 00:45:37,980
<font color="#E5E5E5">the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> as racket the only difference</font>

638
00:45:36,960 --> 00:45:41,490
is that<font color="#E5E5E5"> well</font>

639
00:45:37,980 --> 00:45:44,460
Babel<font color="#E5E5E5"> is like a really big</font><font color="#CCCCCC"> open source</font>

640
00:45:41,490 --> 00:45:46,919
project with a<font color="#E5E5E5"> lot of contributors</font><font color="#CCCCCC"> so</font>

641
00:45:44,460 --> 00:45:52,680
it's way way more developed and there's

642
00:45:46,920 --> 00:45:56,790
way more features<font color="#CCCCCC"> but one interesting</font>

643
00:45:52,680 --> 00:45:59,520
thing<font color="#E5E5E5"> is that using a racket here you</font>

644
00:45:56,790 --> 00:46:02,100
don't have only access<font color="#E5E5E5"> to the macros</font>

645
00:45:59,520 --> 00:46:04,170
define as<font color="#CCCCCC"> Babel defined them you have</font>

646
00:46:02,100 --> 00:46:10,110
access<font color="#CCCCCC"> to all the racket environment a</font>

647
00:46:04,170 --> 00:46:12,900
<font color="#CCCCCC">on</font><font color="#E5E5E5"> all the other languages so one</font><font color="#CCCCCC"> of the</font>

648
00:46:10,110 --> 00:46:17,070
<font color="#CCCCCC">things I was showing in my talk this</font>

649
00:46:12,900 --> 00:46:27,780
morning was an<font color="#E5E5E5"> example from a</font><font color="#CCCCCC"> language</font>

650
00:46:17,070 --> 00:46:36,060
I'm making oops so this was my talk this

651
00:46:27,780 --> 00:46:39,950
<font color="#CCCCCC">morning</font><font color="#E5E5E5"> and there</font><font color="#CCCCCC"> okay I'm gonna I'm</font>

652
00:46:36,060 --> 00:46:39,950
<font color="#E5E5E5">gonna put it a bit</font><font color="#CCCCCC"> smaller</font>

653
00:46:44,000 --> 00:46:52,900
oops<font color="#E5E5E5"> okay</font>

654
00:46:53,180 --> 00:47:00,348
and this is an example from this is

655
00:46:57,619 --> 00:47:01,190
something<font color="#CCCCCC"> that I</font><font color="#E5E5E5"> try to achieve it's not</font>

656
00:47:00,349 --> 00:47:04,160
ready yet

657
00:47:01,190 --> 00:47:05,810
but I'm trying<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make something like</font>

658
00:47:04,160 --> 00:47:10,700
this<font color="#E5E5E5"> I'm trying to make a system in</font>

659
00:47:05,810 --> 00:47:13,340
<font color="#E5E5E5">which you can write API servers web</font>

660
00:47:10,700 --> 00:47:16,848
servers and<font color="#E5E5E5"> this is for example a</font>

661
00:47:13,340 --> 00:47:21,410
response from from an<font color="#E5E5E5"> API</font><font color="#CCCCCC"> and instead</font>

662
00:47:16,849 --> 00:47:24,200
inside you<font color="#E5E5E5"> have code that fetches in the</font>

663
00:47:21,410 --> 00:47:26,480
database you have<font color="#CCCCCC"> code</font><font color="#E5E5E5"> that generates</font>

664
00:47:24,200 --> 00:47:28,419
HTML you have code<font color="#CCCCCC"> that generates CSS</font>

665
00:47:26,480 --> 00:47:30,830
you have code<font color="#CCCCCC"> that generates JavaScript</font>

666
00:47:28,420 --> 00:47:34,910
<font color="#E5E5E5">everything in the same syntax and in the</font>

667
00:47:30,830 --> 00:47:39,500
same function<font color="#CCCCCC"> so you just focus on</font>

668
00:47:34,910 --> 00:47:43,279
<font color="#E5E5E5">writing your complete website</font>

669
00:47:39,500 --> 00:47:45,710
as as<font color="#CCCCCC"> a data as as function as just one</font>

670
00:47:43,280 --> 00:47:47,270
<font color="#CCCCCC">function and then</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> generates</font>

671
00:47:45,710 --> 00:47:53,510
everything it generates<font color="#E5E5E5"> JavaScript</font>

672
00:47:47,270 --> 00:47:57,740
change the<font color="#CCCCCC"> CSS for example the style the</font>

673
00:47:53,510 --> 00:48:01,640
<font color="#E5E5E5">the style system here could be a system</font>

674
00:47:57,740 --> 00:48:05,598
like less so that<font color="#E5E5E5"> you can have variables</font>

675
00:48:01,640 --> 00:48:10,490
<font color="#E5E5E5">inside your style and generate your</font>

676
00:48:05,599 --> 00:48:12,619
<font color="#E5E5E5">style dynamically and the same thing for</font>

677
00:48:10,490 --> 00:48:14,839
<font color="#CCCCCC">the JavaScript part it could be</font>

678
00:48:12,619 --> 00:48:18,260
something<font color="#CCCCCC"> like double</font><font color="#E5E5E5"> so I'm trying to</font>

679
00:48:14,839 --> 00:48:21,320
using I'm trying to use<font color="#E5E5E5"> Erlang in inside</font>

680
00:48:18,260 --> 00:48:24,040
<font color="#E5E5E5">this spot there so a genuine JavaScript</font>

681
00:48:21,320 --> 00:48:28,339
<font color="#E5E5E5">but inside the</font><font color="#CCCCCC"> JavaScript you can</font><font color="#E5E5E5"> put</font>

682
00:48:24,040 --> 00:48:30,230
some data<font color="#E5E5E5"> you can modify the and</font>

683
00:48:28,339 --> 00:48:33,770
generate some JavaScript codes and stuff

684
00:48:30,230 --> 00:48:38,210
like that<font color="#E5E5E5"> so this is</font><font color="#CCCCCC"> the kind</font><font color="#E5E5E5"> of way</font><font color="#CCCCCC"> of</font>

685
00:48:33,770 --> 00:48:42,880
programming I'm trying to an exploring

686
00:48:38,210 --> 00:48:46,700
<font color="#E5E5E5">and I'm trying to see where it goes but</font>

687
00:48:42,880 --> 00:48:48,589
I think it it's kind of cool to<font color="#CCCCCC"> be able</font>

688
00:48:46,700 --> 00:48:51,680
<font color="#E5E5E5">to forget that there</font><font color="#CCCCCC"> are different</font>

689
00:48:48,589 --> 00:48:55,220
languages<font color="#E5E5E5"> and</font><font color="#CCCCCC"> just just</font><font color="#E5E5E5"> write in in one</font>

690
00:48:51,680 --> 00:48:57,118
languages in one language<font color="#CCCCCC"> with a lot of</font>

691
00:48:55,220 --> 00:49:00,890
syntax is to generate the

692
00:48:57,119 --> 00:49:00,890
sinb<font color="#E5E5E5"> it's from from the server</font>

693
00:49:08,380 --> 00:49:11,380
yep

694
00:49:13,030 --> 00:49:16,030
since

695
00:49:32,430 --> 00:49:41,290
it can be<font color="#CCCCCC"> sometimes it can be I know</font>

696
00:49:38,010 --> 00:49:45,700
some<font color="#E5E5E5"> people in the racket community that</font>

697
00:49:41,290 --> 00:49:48,490
are<font color="#E5E5E5"> working on that</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of of</font>

698
00:49:45,700 --> 00:49:54,879
structures with cycles inside and stuff

699
00:49:48,490 --> 00:49:57,370
like<font color="#E5E5E5"> that the the racket posture and the</font>

700
00:49:54,880 --> 00:50:01,870
racket expander<font color="#E5E5E5"> and the macro system is</font>

701
00:49:57,370 --> 00:50:05,650
extremely<font color="#E5E5E5"> powerful so it endures the</font>

702
00:50:01,870 --> 00:50:09,400
cycles<font color="#E5E5E5"> and stuff like that</font><font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> know</font>

703
00:50:05,650 --> 00:50:12,460
in in details<font color="#CCCCCC"> well they are like</font><font color="#E5E5E5"> people</font>

704
00:50:09,400 --> 00:50:17,530
<font color="#E5E5E5">with PhDs that would be way more able</font><font color="#CCCCCC"> to</font>

705
00:50:12,460 --> 00:50:19,570
<font color="#CCCCCC">answer this question but yes</font><font color="#E5E5E5"> it can</font>

706
00:50:17,530 --> 00:50:21,610
handle data structures with cycles and

707
00:50:19,570 --> 00:50:23,680
<font color="#E5E5E5">stuff like that</font><font color="#CCCCCC"> but I</font><font color="#E5E5E5"> guess it would</font><font color="#CCCCCC"> be</font>

708
00:50:21,610 --> 00:50:26,550
<font color="#E5E5E5">a bit more</font><font color="#CCCCCC"> complicated</font><font color="#E5E5E5"> and you will face</font>

709
00:50:23,680 --> 00:50:26,549
some some issues

710
00:50:31,650 --> 00:50:38,730
if nobody<font color="#E5E5E5"> has any other questions I</font><font color="#CCCCCC"> I</font>

711
00:50:35,950 --> 00:50:38,730
think<font color="#E5E5E5"> I'm done</font>

712
00:50:39,020 --> 00:50:48,150
[Applause]

