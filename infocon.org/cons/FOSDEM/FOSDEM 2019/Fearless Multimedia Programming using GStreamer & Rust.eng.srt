1
00:00:20,320 --> 00:00:26,240
so we start<font color="#E5E5E5"> on X presentation this time</font>

2
00:00:23,810 --> 00:00:30,250
on<font color="#CCCCCC"> fearless multimedia programming using</font>

3
00:00:26,240 --> 00:00:30,250
<font color="#CCCCCC">gstreamer and west please welcome ji-sun</font>

4
00:00:32,378 --> 00:00:37,489
thank you for the warm welcome

5
00:00:35,570 --> 00:00:39,019
can you hear me<font color="#CCCCCC"> at the back still yeah</font>

6
00:00:37,489 --> 00:00:44,269
good

7
00:00:39,019 --> 00:00:44,989
so start<font color="#E5E5E5"> first of all</font><font color="#CCCCCC"> who am i my name</font>

8
00:00:44,269 --> 00:00:47,180
<font color="#CCCCCC">is Lee</font><font color="#E5E5E5"> shonali</font>

9
00:00:44,989 --> 00:00:50,660
<font color="#E5E5E5">let's you know I work for Red Hat</font><font color="#CCCCCC"> at</font>

10
00:00:47,180 --> 00:00:52,580
least nowadays<font color="#CCCCCC"> and most of</font><font color="#E5E5E5"> my</font><font color="#CCCCCC"> background</font>

11
00:00:50,660 --> 00:00:54,409
is in<font color="#E5E5E5"> false different kinds of free</font>

12
00:00:52,580 --> 00:00:57,260
<font color="#E5E5E5">software open source stuff I've been</font>

13
00:00:54,409 --> 00:01:00,170
<font color="#CCCCCC">doing mostly</font><font color="#E5E5E5"> on good home stuff but some</font>

14
00:00:57,260 --> 00:01:02,510
other<font color="#E5E5E5"> things as well and nowadays I</font><font color="#CCCCCC"> work</font>

15
00:01:00,170 --> 00:01:08,770
on cloud stuff<font color="#E5E5E5"> or at least I'm expected</font>

16
00:01:02,510 --> 00:01:12,740
to and I love flying and I love cats<font color="#CCCCCC"> so</font>

17
00:01:08,770 --> 00:01:15,320
<font color="#E5E5E5">think about me</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> what am I</font><font color="#CCCCCC"> talking</font>

18
00:01:12,740 --> 00:01:17,539
about<font color="#CCCCCC"> I'll talk about two different</font>

19
00:01:15,320 --> 00:01:20,600
technologies<font color="#E5E5E5"> when they put together they</font>

20
00:01:17,540 --> 00:01:22,280
make a<font color="#E5E5E5"> really good combination</font><font color="#CCCCCC"> Tim in</font>

21
00:01:20,600 --> 00:01:24,408
<font color="#CCCCCC">the previous</font><font color="#E5E5E5"> talk I heard that he talked</font>

22
00:01:22,280 --> 00:01:27,409
a bit about<font color="#E5E5E5"> that already so I don't</font><font color="#CCCCCC"> have</font>

23
00:01:24,409 --> 00:01:32,060
to<font color="#E5E5E5"> explain a lot I hope but these are</font>

24
00:01:27,409 --> 00:01:34,130
<font color="#CCCCCC">two like Sebastian he's sitting over</font>

25
00:01:32,060 --> 00:01:36,109
<font color="#E5E5E5">there he's the real hero</font><font color="#CCCCCC"> here I'm not</font>

26
00:01:34,130 --> 00:01:39,310
I'm just<font color="#E5E5E5"> talking about the subject he</font>

27
00:01:36,109 --> 00:01:41,929
did all the<font color="#E5E5E5"> work and made it possible so</font>

28
00:01:39,310 --> 00:01:45,859
if you want to<font color="#E5E5E5"> thank someone thank him</font>

29
00:01:41,929 --> 00:01:48,020
and by him beers<font color="#CCCCCC"> for this work and it's</font>

30
00:01:45,859 --> 00:01:50,780
my talk is inspired by<font color="#E5E5E5"> his own talk we</font>

31
00:01:48,020 --> 00:01:54,109
did<font color="#E5E5E5"> he has presented about the same</font>

32
00:01:50,780 --> 00:01:57,319
subject before I have a lot to<font color="#CCCCCC"> cover so</font>

33
00:01:54,109 --> 00:01:58,669
<font color="#CCCCCC">I'll go a bit fast so but if you don't</font>

34
00:01:57,319 --> 00:02:00,409
understand anything<font color="#E5E5E5"> please catch</font><font color="#CCCCCC"> me</font>

35
00:01:58,670 --> 00:02:02,119
after<font color="#E5E5E5"> the talk and all I can I'll</font>

36
00:02:00,409 --> 00:02:04,039
happily explain things to you if you

37
00:02:02,119 --> 00:02:09,288
don't if I<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> explain well in the</font>

38
00:02:04,039 --> 00:02:11,960
<font color="#E5E5E5">talks</font><font color="#CCCCCC"> firstly rust it's a system</font>

39
00:02:09,288 --> 00:02:14,959
<font color="#E5E5E5">programming language and it's designed</font>

40
00:02:11,960 --> 00:02:18,350
from the beginning to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> both efficient</font>

41
00:02:14,960 --> 00:02:19,610
and very safe at the<font color="#E5E5E5"> same time there are</font>

42
00:02:18,350 --> 00:02:22,880
many programming languages out there

43
00:02:19,610 --> 00:02:24,920
<font color="#E5E5E5">that focus</font><font color="#CCCCCC"> on efficiency but</font><font color="#E5E5E5"> they are</font>

44
00:02:22,880 --> 00:02:27,769
<font color="#E5E5E5">not very safe and then there's the</font>

45
00:02:24,920 --> 00:02:30,019
others are<font color="#E5E5E5"> very safe but</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> not</font>

46
00:02:27,770 --> 00:02:31,540
efficient so but rust is one of the few

47
00:02:30,020 --> 00:02:34,640
<font color="#E5E5E5">programming languages out there that</font>

48
00:02:31,540 --> 00:02:37,620
focuses on<font color="#E5E5E5"> both</font>

49
00:02:34,640 --> 00:02:42,989
and one of<font color="#CCCCCC"> the ways it does that is</font>

50
00:02:37,620 --> 00:02:46,340
through<font color="#CCCCCC"> null</font><font color="#E5E5E5"> but there's no pointer</font>

51
00:02:42,990 --> 00:02:49,650
arithmetic<font color="#CCCCCC"> in normal rust in safer us</font>

52
00:02:46,340 --> 00:02:51,780
<font color="#CCCCCC">and which means you can't dear F</font>

53
00:02:49,650 --> 00:02:53,490
dangling pointers<font color="#CCCCCC"> you can't dear f null</font>

54
00:02:51,780 --> 00:02:55,860
pointers<font color="#E5E5E5"> and that's like the biggest</font>

55
00:02:53,490 --> 00:02:58,680
<font color="#E5E5E5">what are the biggest source of problems</font>

56
00:02:55,860 --> 00:03:01,500
<font color="#E5E5E5">memory problems in</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> C++ and those</font>

57
00:02:58,680 --> 00:03:03,090
languages<font color="#CCCCCC"> and even in higher many higher</font>

58
00:03:01,500 --> 00:03:05,070
languages you still have null pointers

59
00:03:03,090 --> 00:03:06,680
<font color="#CCCCCC">are on all pointers that you</font><font color="#E5E5E5"> can easily</font>

60
00:03:05,070 --> 00:03:10,109
do<font color="#CCCCCC"> ref and</font><font color="#E5E5E5"> you have null pointer</font>

61
00:03:06,680 --> 00:03:14,190
exception and stuff<font color="#E5E5E5"> so but</font><font color="#CCCCCC"> Trust doesn't</font>

62
00:03:10,110 --> 00:03:17,280
<font color="#CCCCCC">have that but of</font><font color="#E5E5E5"> course you can't do</font>

63
00:03:14,190 --> 00:03:20,160
everything<font color="#E5E5E5"> with safe</font><font color="#CCCCCC"> in the safe</font>

64
00:03:17,280 --> 00:03:21,960
paradigm<font color="#E5E5E5"> of rust so rust allows you to</font>

65
00:03:20,160 --> 00:03:25,049
make an exception<font color="#E5E5E5"> which is called unsafe</font>

66
00:03:21,960 --> 00:03:27,480
and you just mark your code<font color="#E5E5E5"> unsafe and</font>

67
00:03:25,050 --> 00:03:29,910
that part of<font color="#E5E5E5"> your code usually deals</font>

68
00:03:27,480 --> 00:03:31,709
with<font color="#E5E5E5"> foreign function interface with C</font>

69
00:03:29,910 --> 00:03:32,210
and<font color="#E5E5E5"> other programming languages</font><font color="#CCCCCC"> to that</font>

70
00:03:31,710 --> 00:03:35,010
world

71
00:03:32,210 --> 00:03:37,830
<font color="#CCCCCC">but since rust cannot assume this about</font>

72
00:03:35,010 --> 00:03:39,540
<font color="#CCCCCC">safety</font><font color="#E5E5E5"> of what this the the memory</font>

73
00:03:37,830 --> 00:03:42,750
<font color="#CCCCCC">handled by those programming languages</font>

74
00:03:39,540 --> 00:03:44,100
from<font color="#E5E5E5"> ratify it cannot guarantee safety</font>

75
00:03:42,750 --> 00:03:46,830
<font color="#E5E5E5">for you and that's why you have to mark</font>

76
00:03:44,100 --> 00:03:48,540
it unsafe to<font color="#CCCCCC"> rust</font><font color="#E5E5E5"> and it also allows you</font>

77
00:03:46,830 --> 00:03:51,090
<font color="#CCCCCC">to do some pointer arithmetic which you</font>

78
00:03:48,540 --> 00:03:53,579
need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do for interfacing with C</font><font color="#E5E5E5"> but</font>

79
00:03:51,090 --> 00:03:55,590
<font color="#CCCCCC">the good news is that since</font><font color="#E5E5E5"> you mark it</font>

80
00:03:53,580 --> 00:03:57,000
<font color="#E5E5E5">as unsafe that part of the code if you</font>

81
00:03:55,590 --> 00:03:58,860
have a<font color="#E5E5E5"> memory problem</font>

82
00:03:57,000 --> 00:04:01,470
you know where the problem lies and it's

83
00:03:58,860 --> 00:04:04,590
much easier<font color="#CCCCCC"> to debug</font><font color="#E5E5E5"> if it's marked as</font>

84
00:04:01,470 --> 00:04:07,020
unsafe<font color="#E5E5E5"> that particle</font><font color="#CCCCCC"> another thing is</font>

85
00:04:04,590 --> 00:04:09,090
that<font color="#E5E5E5"> the concept is non mutable state by</font>

86
00:04:07,020 --> 00:04:11,340
default<font color="#E5E5E5"> so you cannot once you assign a</font>

87
00:04:09,090 --> 00:04:13,680
resource to a<font color="#CCCCCC"> variable for example</font><font color="#E5E5E5"> you</font>

88
00:04:11,340 --> 00:04:16,858
cannot modify<font color="#E5E5E5"> it unless it's marks marks</font>

89
00:04:13,680 --> 00:04:19,890
<font color="#CCCCCC">as mutable that also</font><font color="#E5E5E5"> does the similar</font>

90
00:04:16,858 --> 00:04:21,959
thing because if you have a problem<font color="#CCCCCC"> any</font>

91
00:04:19,890 --> 00:04:24,180
kind<font color="#CCCCCC"> of problem you know</font><font color="#E5E5E5"> that it can</font>

92
00:04:21,959 --> 00:04:24,810
<font color="#CCCCCC">only be</font><font color="#E5E5E5"> mutable state that that's</font><font color="#CCCCCC"> that's</font>

93
00:04:24,180 --> 00:04:27,420
<font color="#E5E5E5">problematic</font>

94
00:04:24,810 --> 00:04:29,540
it cannot be<font color="#E5E5E5"> unmusical state that gives</font>

95
00:04:27,420 --> 00:04:32,070
you any<font color="#CCCCCC"> problems</font><font color="#E5E5E5"> so it's a similar</font>

96
00:04:29,540 --> 00:04:34,410
concept

97
00:04:32,070 --> 00:04:36,990
another thing rust has is strict

98
00:04:34,410 --> 00:04:39,960
ownership<font color="#E5E5E5"> semantics this is not a</font>

99
00:04:36,990 --> 00:04:44,160
concept in<font color="#CCCCCC"> c and c++</font><font color="#E5E5E5"> in some modern c++</font>

100
00:04:39,960 --> 00:04:46,620
yeah it is<font color="#E5E5E5"> but not really it's not</font><font color="#CCCCCC"> at</font>

101
00:04:44,160 --> 00:04:48,010
least<font color="#CCCCCC"> enforced by the compiler</font><font color="#E5E5E5"> so you</font>

102
00:04:46,620 --> 00:04:51,040
can still do

103
00:04:48,010 --> 00:04:53,560
even with the most<font color="#E5E5E5"> modern C++ standards</font>

104
00:04:51,040 --> 00:04:55,660
you<font color="#CCCCCC"> can still do a</font><font color="#E5E5E5"> lot of harm through</font>

105
00:04:53,560 --> 00:04:57,820
memory management and<font color="#E5E5E5"> stuff if you want</font>

106
00:04:55,660 --> 00:05:03,610
to and it's<font color="#CCCCCC"> eerily</font><font color="#E5E5E5"> easy</font><font color="#CCCCCC"> to do without</font>

107
00:04:57,820 --> 00:05:05,530
<font color="#E5E5E5">even wanting to do it and in other</font>

108
00:05:03,610 --> 00:05:07,150
languages is to<font color="#CCCCCC"> say the same concept</font>

109
00:05:05,530 --> 00:05:09,309
<font color="#CCCCCC">that the same thing is</font><font color="#E5E5E5"> achieved with</font><font color="#CCCCCC"> a</font>

110
00:05:07,150 --> 00:05:11,919
garbage collector<font color="#E5E5E5"> but garbage collectors</font>

111
00:05:09,310 --> 00:05:15,970
always on<font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> so you are using your</font>

112
00:05:11,920 --> 00:05:18,960
users<font color="#CCCCCC"> resources to to manage the memory</font>

113
00:05:15,970 --> 00:05:22,840
for you<font color="#CCCCCC"> but rust doesn't do that rust is</font>

114
00:05:18,960 --> 00:05:24,310
at least as efficient as<font color="#E5E5E5"> C in C++ so it</font>

115
00:05:22,840 --> 00:05:25,989
doesn't make<font color="#E5E5E5"> use of garbage collector</font>

116
00:05:24,310 --> 00:05:30,100
<font color="#E5E5E5">and because</font><font color="#CCCCCC"> of that it has these</font>

117
00:05:25,990 --> 00:05:33,610
concepts like<font color="#E5E5E5"> ownership of resources</font>

118
00:05:30,100 --> 00:05:36,130
I'll just<font color="#E5E5E5"> it's like</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> concept is very</font>

119
00:05:33,610 --> 00:05:40,450
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> resource can holy and only</font>

120
00:05:36,130 --> 00:05:43,650
have one<font color="#E5E5E5"> owner so once you assign to do</font>

121
00:05:40,450 --> 00:05:47,680
a variable for example here<font color="#E5E5E5"> the resource</font>

122
00:05:43,650 --> 00:05:50,020
<font color="#E5E5E5">it's owned by that variable so in this</font>

123
00:05:47,680 --> 00:05:53,470
<font color="#CCCCCC">example this code won't work because</font>

124
00:05:50,020 --> 00:05:56,530
once you assign<font color="#CCCCCC"> s1 to s2</font><font color="#E5E5E5"> you have passed</font>

125
00:05:53,470 --> 00:05:58,150
the<font color="#E5E5E5"> ownership over to to s2 and you</font>

126
00:05:56,530 --> 00:05:59,679
cannot use s1 anymore because it doesn't

127
00:05:58,150 --> 00:06:01,169
<font color="#CCCCCC">have any resources assigned</font><font color="#E5E5E5"> to it</font>

128
00:05:59,680 --> 00:06:04,540
anymore

129
00:06:01,170 --> 00:06:08,260
similarly with functions<font color="#CCCCCC"> you if you pass</font>

130
00:06:04,540 --> 00:06:10,960
<font color="#CCCCCC">by value</font><font color="#E5E5E5"> the any resource to a function</font>

131
00:06:08,260 --> 00:06:12,580
you have<font color="#E5E5E5"> passed the ownership to that</font>

132
00:06:10,960 --> 00:06:14,320
function<font color="#CCCCCC"> and you don't own it anymore</font>

133
00:06:12,580 --> 00:06:17,260
<font color="#E5E5E5">unless that function returns it</font><font color="#CCCCCC"> to you</font>

134
00:06:14,320 --> 00:06:19,599
and you assign<font color="#CCCCCC"> it to a variable if this</font>

135
00:06:17,260 --> 00:06:21,909
was s1 equal to some function as<font color="#CCCCCC"> one</font>

136
00:06:19,600 --> 00:06:26,020
then it would work<font color="#E5E5E5"> because you got the</font>

137
00:06:21,910 --> 00:06:29,680
ownership<font color="#E5E5E5"> back to you</font><font color="#CCCCCC"> but the normal</font><font color="#E5E5E5"> the</font>

138
00:06:26,020 --> 00:06:32,710
small data types like that are efficient

139
00:06:29,680 --> 00:06:35,620
to copy<font color="#CCCCCC"> they are they implement a</font><font color="#E5E5E5"> trait</font>

140
00:06:32,710 --> 00:06:38,320
in<font color="#CCCCCC"> rus called</font><font color="#E5E5E5"> copy and because of that</font>

141
00:06:35,620 --> 00:06:40,390
<font color="#E5E5E5">when you pass</font><font color="#CCCCCC"> it to a function by value</font>

142
00:06:38,320 --> 00:06:42,849
or<font color="#E5E5E5"> to another variable</font><font color="#CCCCCC"> they just get</font>

143
00:06:40,390 --> 00:06:45,510
copied so you can have in a way<font color="#CCCCCC"> a</font>

144
00:06:42,850 --> 00:06:49,420
multiple ownership but it's just copies

145
00:06:45,510 --> 00:06:51,520
<font color="#CCCCCC">when if you have like a very small data</font>

146
00:06:49,420 --> 00:06:54,490
<font color="#E5E5E5">type which is easy to transfer and stuff</font>

147
00:06:51,520 --> 00:06:56,710
and<font color="#E5E5E5"> or memory memory efficient it</font><font color="#CCCCCC"> isn't</font>

148
00:06:54,490 --> 00:06:59,290
<font color="#CCCCCC">better to you in your</font><font color="#E5E5E5"> case then you can</font>

149
00:06:56,710 --> 00:07:01,969
<font color="#E5E5E5">implement the same trait and you can</font>

150
00:06:59,290 --> 00:07:07,050
just copy<font color="#CCCCCC"> things around</font>

151
00:07:01,970 --> 00:07:09,270
and you can borrow<font color="#E5E5E5"> because</font><font color="#CCCCCC"> if you just</font>

152
00:07:07,050 --> 00:07:12,150
have<font color="#CCCCCC"> one owner</font><font color="#E5E5E5"> and you have ownership</font>

153
00:07:09,270 --> 00:07:14,840
gets transferred<font color="#E5E5E5"> it's just not going to</font>

154
00:07:12,150 --> 00:07:19,489
work you<font color="#E5E5E5"> you have so many problems that</font>

155
00:07:14,840 --> 00:07:22,469
<font color="#CCCCCC">yeah you need</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> like boring so</font>

156
00:07:19,490 --> 00:07:25,380
<font color="#E5E5E5">you can which is it's a bit like</font>

157
00:07:22,470 --> 00:07:27,300
references<font color="#E5E5E5"> pass by</font><font color="#CCCCCC"> reference in C++</font><font color="#E5E5E5"> you</font>

158
00:07:25,380 --> 00:07:30,120
<font color="#E5E5E5">give a reference and you can have</font>

159
00:07:27,300 --> 00:07:33,410
<font color="#E5E5E5">multiple unknown mutable references to</font>

160
00:07:30,120 --> 00:07:37,470
the same resource<font color="#E5E5E5"> in the same code block</font>

161
00:07:33,410 --> 00:07:41,460
<font color="#CCCCCC">that borrows</font><font color="#E5E5E5"> are temporary</font><font color="#CCCCCC"> so we have</font>

162
00:07:37,470 --> 00:07:42,930
other<font color="#E5E5E5"> data types in rust</font><font color="#CCCCCC"> something like</font>

163
00:07:41,460 --> 00:07:45,570
for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> our C which stands for</font>

164
00:07:42,930 --> 00:07:48,210
reference counting<font color="#CCCCCC"> so you can have</font>

165
00:07:45,570 --> 00:07:50,550
multiple<font color="#E5E5E5"> objects actually pointing</font><font color="#CCCCCC"> to</font>

166
00:07:48,210 --> 00:07:53,219
<font color="#E5E5E5">the same resource with this one and</font><font color="#CCCCCC"> they</font>

167
00:07:50,550 --> 00:07:54,930
<font color="#E5E5E5">are reference counted for you so each</font>

168
00:07:53,220 --> 00:07:57,960
<font color="#E5E5E5">time</font><font color="#CCCCCC"> you need</font><font color="#E5E5E5"> another one you just clone</font>

169
00:07:54,930 --> 00:08:00,720
<font color="#E5E5E5">the the container of the of the actual</font>

170
00:07:57,960 --> 00:08:02,580
resource<font color="#E5E5E5"> and it's lightweight so you</font>

171
00:08:00,720 --> 00:08:04,830
<font color="#CCCCCC">don't you don't have to worry</font><font color="#E5E5E5"> about that</font>

172
00:08:02,580 --> 00:08:08,219
<font color="#E5E5E5">you you're copying a lot of our</font><font color="#CCCCCC"> C</font>

173
00:08:04,830 --> 00:08:11,190
structures<font color="#E5E5E5"> but the actual resource</font><font color="#CCCCCC"> will</font>

174
00:08:08,220 --> 00:08:14,419
might<font color="#E5E5E5"> be a bit more heavy so</font><font color="#CCCCCC"> you use</font><font color="#E5E5E5"> rc4</font>

175
00:08:11,190 --> 00:08:17,640
that<font color="#E5E5E5"> and instead</font><font color="#CCCCCC"> of copying or</font>

176
00:08:14,419 --> 00:08:19,440
<font color="#CCCCCC">references so this code will work</font><font color="#E5E5E5"> for</font>

177
00:08:17,640 --> 00:08:25,200
<font color="#CCCCCC">example because you cloned and you're</font>

178
00:08:19,440 --> 00:08:28,590
using separately<font color="#E5E5E5"> it's there now we have</font>

179
00:08:25,200 --> 00:08:30,659
<font color="#E5E5E5">become to the the the topic</font><font color="#CCCCCC"> which is</font>

180
00:08:28,590 --> 00:08:33,990
<font color="#E5E5E5">kind of like inspiring the title of this</font>

181
00:08:30,660 --> 00:08:37,080
talk in rest there<font color="#E5E5E5"> is a concept of</font>

182
00:08:33,990 --> 00:08:38,729
<font color="#E5E5E5">fearless concurrency which means that in</font>

183
00:08:37,080 --> 00:08:41,419
other programming languages when you<font color="#CCCCCC"> I</font>

184
00:08:38,729 --> 00:08:44,400
<font color="#CCCCCC">see as soon as you involve</font><font color="#E5E5E5"> threads</font>

185
00:08:41,419 --> 00:08:45,750
<font color="#CCCCCC">things go</font><font color="#E5E5E5"> wrong and it's really</font><font color="#CCCCCC"> really</font>

186
00:08:44,400 --> 00:08:48,930
<font color="#E5E5E5">hard to</font><font color="#CCCCCC"> manage threads in other</font>

187
00:08:45,750 --> 00:08:51,720
programming languages<font color="#CCCCCC"> but rust makes it</font>

188
00:08:48,930 --> 00:08:54,390
safe<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> get a lot of errors</font>

189
00:08:51,720 --> 00:08:58,380
<font color="#E5E5E5">from compilers from compiler when you</font>

190
00:08:54,390 --> 00:08:59,970
first do threading in in rust<font color="#CCCCCC"> but once</font>

191
00:08:58,380 --> 00:09:03,060
you get your code<font color="#E5E5E5"> compiled usually it</font>

192
00:08:59,970 --> 00:09:05,520
<font color="#E5E5E5">just works and you</font><font color="#CCCCCC"> can be</font><font color="#E5E5E5"> sure you can</font>

193
00:09:03,060 --> 00:09:09,839
rest assured that<font color="#E5E5E5"> it's working fine and</font>

194
00:09:05,520 --> 00:09:12,540
at<font color="#E5E5E5"> runtime</font><font color="#CCCCCC"> and for</font><font color="#E5E5E5"> achieving that we</font>

195
00:09:09,839 --> 00:09:13,860
have data types like<font color="#CCCCCC"> ark</font><font color="#E5E5E5"> one thing I</font>

196
00:09:12,540 --> 00:09:14,579
didn't mention<font color="#E5E5E5"> is that you you don't</font>

197
00:09:13,860 --> 00:09:17,100
have

198
00:09:14,580 --> 00:09:19,920
shared you can't share<font color="#E5E5E5"> state between</font>

199
00:09:17,100 --> 00:09:23,520
<font color="#CCCCCC">threats unless they implement some</font>

200
00:09:19,920 --> 00:09:25,829
particular traits that the<font color="#CCCCCC"> data type</font>

201
00:09:23,520 --> 00:09:27,959
<font color="#CCCCCC">that you</font><font color="#E5E5E5"> want to share and most of them</font>

202
00:09:25,830 --> 00:09:31,500
don't<font color="#E5E5E5"> so you you need some kind</font><font color="#CCCCCC"> of</font>

203
00:09:27,959 --> 00:09:33,599
container that's efficient<font color="#CCCCCC"> and at the</font>

204
00:09:31,500 --> 00:09:35,520
same<font color="#E5E5E5"> time</font><font color="#CCCCCC"> safe to use from multiple</font>

205
00:09:33,600 --> 00:09:37,680
<font color="#E5E5E5">threats at the same time and that</font>

206
00:09:35,520 --> 00:09:40,290
container is<font color="#E5E5E5"> called arc which is just</font>

207
00:09:37,680 --> 00:09:42,120
atomic reference counting so if you need

208
00:09:40,290 --> 00:09:44,819
to<font color="#CCCCCC"> share resources</font><font color="#E5E5E5"> between the same</font>

209
00:09:42,120 --> 00:09:47,310
<font color="#E5E5E5">threat then you should use RC which is a</font>

210
00:09:44,820 --> 00:09:51,120
reference<font color="#CCCCCC"> count rate just but it's not</font>

211
00:09:47,310 --> 00:09:52,619
atomic so it's not<font color="#CCCCCC"> safe to to use from</font>

212
00:09:51,120 --> 00:09:55,440
two different<font color="#CCCCCC"> threats at the same time</font>

213
00:09:52,620 --> 00:09:58,020
but arc is<font color="#E5E5E5"> Atomics</font><font color="#CCCCCC"> the reference</font>

214
00:09:55,440 --> 00:10:00,620
counting<font color="#E5E5E5"> is atomic so you can use it at</font>

215
00:09:58,020 --> 00:10:03,390
the same<font color="#CCCCCC"> time</font><font color="#E5E5E5"> from different</font><font color="#CCCCCC"> threats and</font>

216
00:10:00,620 --> 00:10:05,790
similarly mutex like arc is<font color="#E5E5E5"> only giving</font>

217
00:10:03,390 --> 00:10:08,370
you read-only access so if you want if

218
00:10:05,790 --> 00:10:10,380
you<font color="#E5E5E5"> want to modify something from</font>

219
00:10:08,370 --> 00:10:12,180
different<font color="#E5E5E5"> threats then you have to put</font>

220
00:10:10,380 --> 00:10:15,800
it in another<font color="#E5E5E5"> container called mutex and</font>

221
00:10:12,180 --> 00:10:15,800
<font color="#E5E5E5">then you can you</font><font color="#CCCCCC"> can achieve the same</font>

222
00:10:15,860 --> 00:10:21,480
<font color="#E5E5E5">that was</font><font color="#CCCCCC"> my really really</font><font color="#E5E5E5"> quick</font>

223
00:10:18,209 --> 00:10:22,770
introduction<font color="#CCCCCC"> to</font><font color="#E5E5E5"> rust</font><font color="#CCCCCC"> um I'm sure that</font>

224
00:10:21,480 --> 00:10:24,630
you have a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> questions but you can</font>

225
00:10:22,770 --> 00:10:26,730
ask<font color="#E5E5E5"> me</font><font color="#CCCCCC"> later</font><font color="#E5E5E5"> and now we come to the</font>

226
00:10:24,630 --> 00:10:30,089
second part<font color="#CCCCCC"> of the topic</font>

227
00:10:26,730 --> 00:10:33,480
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> GStreamer you</font><font color="#E5E5E5"> how many</font><font color="#CCCCCC"> of you</font><font color="#E5E5E5"> were</font>

228
00:10:30,089 --> 00:10:36,360
in the<font color="#E5E5E5"> previous</font><font color="#CCCCCC"> talk quite a lot but</font>

229
00:10:33,480 --> 00:10:39,480
<font color="#E5E5E5">I'll explain very quickly</font><font color="#CCCCCC"> then GStreamer</font>

230
00:10:36,360 --> 00:10:41,579
is a multimedia framework<font color="#E5E5E5"> it's very</font>

231
00:10:39,480 --> 00:10:43,170
popular especially in<font color="#E5E5E5"> the embedded</font>

232
00:10:41,579 --> 00:10:48,719
<font color="#E5E5E5">systems out there</font><font color="#CCCCCC"> there's a lot of</font>

233
00:10:43,170 --> 00:10:50,520
embedded<font color="#CCCCCC"> systems using it and it's it's</font>

234
00:10:48,720 --> 00:10:52,950
<font color="#E5E5E5">a very</font><font color="#CCCCCC"> its uses very simple concepts</font>

235
00:10:50,520 --> 00:10:55,170
like elements and pipelines you have a

236
00:10:52,950 --> 00:10:57,060
pipeline<font color="#E5E5E5"> for each multimedia application</font>

237
00:10:55,170 --> 00:10:59,490
you<font color="#E5E5E5"> want to create you can have multiple</font>

238
00:10:57,060 --> 00:11:03,569
pipelines in the same application<font color="#CCCCCC"> as</font>

239
00:10:59,490 --> 00:11:05,339
<font color="#E5E5E5">well but and then you you just like it's</font>

240
00:11:03,570 --> 00:11:07,290
<font color="#E5E5E5">like Legos</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have multiple</font><font color="#CCCCCC"> elements</font>

241
00:11:05,339 --> 00:11:11,070
<font color="#E5E5E5">doing different things you</font><font color="#CCCCCC"> just connect</font>

242
00:11:07,290 --> 00:11:12,930
them to<font color="#CCCCCC"> each other</font><font color="#E5E5E5"> and then you you have</font>

243
00:11:11,070 --> 00:11:14,579
source you have filters different kinds

244
00:11:12,930 --> 00:11:17,160
<font color="#E5E5E5">of filters</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> you have a sink to</font>

245
00:11:14,579 --> 00:11:23,010
actually play<font color="#E5E5E5"> the media on a quick</font>

246
00:11:17,160 --> 00:11:28,050
<font color="#E5E5E5">example is if you want to play</font><font color="#CCCCCC"> OGG video</font>

247
00:11:23,010 --> 00:11:30,360
with Vorbis audio and your<font color="#E5E5E5"> video in it</font>

248
00:11:28,050 --> 00:11:33,029
so you will<font color="#E5E5E5"> create a pipeline like that</font>

249
00:11:30,360 --> 00:11:35,070
<font color="#CCCCCC">you something to read from the</font><font color="#E5E5E5"> source</font>

250
00:11:33,029 --> 00:11:36,600
which<font color="#CCCCCC"> is in this</font><font color="#E5E5E5"> case</font><font color="#CCCCCC"> a foul if you want</font>

251
00:11:35,070 --> 00:11:39,510
to read from<font color="#E5E5E5"> file so file source and</font>

252
00:11:36,600 --> 00:11:41,550
then add Emacs<font color="#CCCCCC"> Rd multiplexer which</font>

253
00:11:39,510 --> 00:11:44,910
<font color="#CCCCCC">demultiplexers the video and audio parts</font>

254
00:11:41,550 --> 00:11:47,490
and gives it<font color="#CCCCCC"> to these two</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> LED</font>

255
00:11:44,910 --> 00:11:50,219
decoders<font color="#E5E5E5"> and then they go to the sink to</font>

256
00:11:47,490 --> 00:11:55,680
be played<font color="#CCCCCC"> audio in reducing whatever it</font>

257
00:11:50,220 --> 00:11:56,970
is in this case<font color="#E5E5E5"> and the elements they</font>

258
00:11:55,680 --> 00:12:01,800
connect through something called<font color="#E5E5E5"> pads</font>

259
00:11:56,970 --> 00:12:04,800
and and the<font color="#CCCCCC"> way you connect pads</font><font color="#E5E5E5"> is that</font>

260
00:12:01,800 --> 00:12:06,569
<font color="#E5E5E5">each pad has a bunch of capabilities on</font>

261
00:12:04,800 --> 00:12:09,390
them which means<font color="#E5E5E5"> what can they do for</font>

262
00:12:06,570 --> 00:12:12,120
example in<font color="#CCCCCC"> Vorbis decoder case the sink</font>

263
00:12:09,390 --> 00:12:14,880
pad will have capability saying that oh

264
00:12:12,120 --> 00:12:16,410
I can<font color="#CCCCCC"> handle</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> bass</font><font color="#E5E5E5"> video of</font>

265
00:12:14,880 --> 00:12:18,990
different<font color="#E5E5E5"> kinds</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> different</font>

266
00:12:16,410 --> 00:12:21,990
<font color="#CCCCCC">properties but it can't for example you</font>

267
00:12:18,990 --> 00:12:25,019
can't as<font color="#CCCCCC"> I connected to the pad from</font>

268
00:12:21,990 --> 00:12:26,850
<font color="#E5E5E5">democracy which gives you the</font><font color="#CCCCCC"> Thira</font>

269
00:12:25,019 --> 00:12:28,290
audio for example<font color="#E5E5E5"> because it it doesn't</font>

270
00:12:26,850 --> 00:12:31,010
<font color="#E5E5E5">tell you that I can handle</font><font color="#CCCCCC"> it so you</font>

271
00:12:28,290 --> 00:12:36,089
won't<font color="#E5E5E5"> ever</font><font color="#CCCCCC"> connect it</font>

272
00:12:31,010 --> 00:12:37,950
it's heavily plug-in based so the core

273
00:12:36,089 --> 00:12:39,870
of<font color="#CCCCCC"> GStreamer is actually pretty</font><font color="#E5E5E5"> small so</font>

274
00:12:37,950 --> 00:12:41,670
most<font color="#E5E5E5"> of</font><font color="#CCCCCC"> things happen through plug-ins</font>

275
00:12:39,870 --> 00:12:45,810
<font color="#CCCCCC">like all the</font><font color="#E5E5E5"> actual capabilities come</font>

276
00:12:41,670 --> 00:12:49,979
from that<font color="#E5E5E5"> it's written in C it's</font>

277
00:12:45,810 --> 00:12:51,719
<font color="#CCCCCC">multi-threaded well it's for most app</font>

278
00:12:49,980 --> 00:12:54,000
developers it doesn't really matter<font color="#E5E5E5"> in</font>

279
00:12:51,720 --> 00:12:55,560
case<font color="#E5E5E5"> of</font><font color="#CCCCCC"> gstreamer but when you're</font>

280
00:12:54,000 --> 00:12:57,540
writing<font color="#E5E5E5"> plugins is you're writing some</font>

281
00:12:55,560 --> 00:12:59,849
complex plugins<font color="#CCCCCC"> I can be corrected if</font>

282
00:12:57,540 --> 00:13:02,699
I'm wrong but in<font color="#E5E5E5"> that in those cases you</font>

283
00:12:59,850 --> 00:13:04,529
might need to you<font color="#E5E5E5"> don't actually have to</font>

284
00:13:02,700 --> 00:13:06,779
<font color="#E5E5E5">handle threads but you have to take care</font>

285
00:13:04,529 --> 00:13:08,910
<font color="#E5E5E5">of that this</font><font color="#CCCCCC"> code is running</font><font color="#E5E5E5"> from</font>

286
00:13:06,779 --> 00:13:12,270
multiple<font color="#E5E5E5"> threads and you have to take</font>

287
00:13:08,910 --> 00:13:19,199
<font color="#E5E5E5">care of locking in stuff am i right good</font>

288
00:13:12,270 --> 00:13:20,760
so yeah<font color="#CCCCCC"> and so in a way you have to care</font>

289
00:13:19,199 --> 00:13:24,959
of threading at some point or another

290
00:13:20,760 --> 00:13:27,209
<font color="#E5E5E5">and also like I have never seen a</font><font color="#CCCCCC"> GTA</font>

291
00:13:24,959 --> 00:13:29,459
<font color="#CCCCCC">plug-in developer who has not touched</font>

292
00:13:27,209 --> 00:13:31,469
the<font color="#E5E5E5"> core like if they keep doing plug-in</font>

293
00:13:29,459 --> 00:13:36,060
development<font color="#E5E5E5"> at some point the line gets</font>

294
00:13:31,470 --> 00:13:39,529
blurred<font color="#E5E5E5"> very soon and it's it's very</font>

295
00:13:36,060 --> 00:13:41,579
<font color="#CCCCCC">object-oriented</font><font color="#E5E5E5"> API using the G object</font>

296
00:13:39,529 --> 00:13:44,550
type system

297
00:13:41,580 --> 00:13:47,519
from<font color="#E5E5E5"> July</font><font color="#CCCCCC"> so you can do</font><font color="#E5E5E5"> object</font><font color="#CCCCCC"> oriented</font>

298
00:13:44,550 --> 00:13:49,229
ramming on sea<font color="#CCCCCC"> level which means</font><font color="#E5E5E5"> that on</font>

299
00:13:47,519 --> 00:13:52,110
higher level if you have bindings then

300
00:13:49,230 --> 00:13:57,620
they get exposed as<font color="#CCCCCC"> an object-oriented</font>

301
00:13:52,110 --> 00:14:00,769
<font color="#E5E5E5">way as well so why is rust relevant here</font>

302
00:13:57,620 --> 00:14:03,779
first of all like major thing is like

303
00:14:00,769 --> 00:14:05,720
<font color="#CCCCCC">GStreamer has to be used from media</font>

304
00:14:03,779 --> 00:14:09,089
parsing<font color="#CCCCCC"> quite</font><font color="#E5E5E5"> quite a lot and it</font>

305
00:14:05,720 --> 00:14:12,209
<font color="#E5E5E5">basically is</font><font color="#CCCCCC"> about media parsing all is</font>

306
00:14:09,089 --> 00:14:15,510
<font color="#E5E5E5">about and you you cannot really just</font>

307
00:14:12,209 --> 00:14:18,060
trust<font color="#CCCCCC"> a media content like just start</font>

308
00:14:15,510 --> 00:14:20,220
parsing it you will<font color="#E5E5E5"> have you can have</font>

309
00:14:18,060 --> 00:14:22,680
many kind of<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> problems and</font><font color="#E5E5E5"> you can</font>

310
00:14:20,220 --> 00:14:26,160
have kind<font color="#E5E5E5"> of memory problem based</font>

311
00:14:22,680 --> 00:14:27,689
attacks and stuff<font color="#CCCCCC"> so especially if</font>

312
00:14:26,160 --> 00:14:29,399
you're getting it from untrusted<font color="#E5E5E5"> sources</font>

313
00:14:27,690 --> 00:14:34,680
which you usually do<font color="#CCCCCC"> from internet and</font>

314
00:14:29,399 --> 00:14:37,230
<font color="#CCCCCC">stuff so a safe language</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> be really</font>

315
00:14:34,680 --> 00:14:39,149
good choice for for this because<font color="#E5E5E5"> it</font>

316
00:14:37,230 --> 00:14:41,339
makes<font color="#E5E5E5"> sure that you don't do most of the</font>

317
00:14:39,149 --> 00:14:43,610
<font color="#E5E5E5">memory you do damage or you don't make</font>

318
00:14:41,339 --> 00:14:47,520
most<font color="#E5E5E5"> of the memory handling errors in it</font>

319
00:14:43,610 --> 00:14:49,790
<font color="#CCCCCC">so</font><font color="#E5E5E5"> and another thing is multi-threading</font>

320
00:14:47,520 --> 00:14:53,760
is<font color="#E5E5E5"> hard it's hard in every language</font>

321
00:14:49,790 --> 00:14:58,760
<font color="#CCCCCC">especially</font><font color="#E5E5E5"> in C and C++ it's even even</font>

322
00:14:53,760 --> 00:15:00,990
much harder<font color="#CCCCCC"> so</font><font color="#E5E5E5"> as I said Russ makes</font>

323
00:14:58,760 --> 00:15:04,410
multi-threading really easy to handle

324
00:15:00,990 --> 00:15:05,940
<font color="#E5E5E5">easy in the sense</font><font color="#CCCCCC"> that it</font><font color="#E5E5E5"> makes it make</font>

325
00:15:04,410 --> 00:15:09,180
sure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you don't do most of the</font>

326
00:15:05,940 --> 00:15:11,130
errors<font color="#CCCCCC"> you will</font><font color="#E5E5E5"> do in you know which</font>

327
00:15:09,180 --> 00:15:14,399
meant sharing<font color="#E5E5E5"> for example state between</font>

328
00:15:11,130 --> 00:15:17,130
<font color="#E5E5E5">threads so since it doesn't allow you to</font>

329
00:15:14,399 --> 00:15:19,680
do those<font color="#CCCCCC"> things it makes it easier and</font>

330
00:15:17,130 --> 00:15:22,649
<font color="#E5E5E5">that's why in in case of</font><font color="#CCCCCC"> gstreamer since</font>

331
00:15:19,680 --> 00:15:26,670
it's<font color="#E5E5E5"> multi-threaded base so it's very</font>

332
00:15:22,649 --> 00:15:28,800
relevant<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the concepts of mutability</font>

333
00:15:26,670 --> 00:15:32,310
and ownership<font color="#E5E5E5"> in in</font><font color="#CCCCCC"> Russ they map really</font>

334
00:15:28,800 --> 00:15:34,310
<font color="#E5E5E5">well to the</font><font color="#CCCCCC"> gstreamer concepts</font><font color="#E5E5E5"> I had an</font>

335
00:15:32,310 --> 00:15:38,099
<font color="#E5E5E5">example here</font><font color="#CCCCCC"> but I'm</font><font color="#E5E5E5"> skipping it because</font>

336
00:15:34,310 --> 00:15:41,069
you<font color="#CCCCCC"> don't have</font><font color="#E5E5E5"> a left hand but I'll have</font>

337
00:15:38,100 --> 00:15:44,040
other examples<font color="#E5E5E5"> later and to avoid memory</font>

338
00:15:41,070 --> 00:15:45,899
<font color="#E5E5E5">many memory errors in general as I said</font>

339
00:15:44,040 --> 00:15:49,880
in C and C++<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> really easy to do</font>

340
00:15:45,899 --> 00:15:53,040
those so<font color="#CCCCCC"> Rostova lets you avoid those so</font>

341
00:15:49,880 --> 00:15:55,530
also sees a very<font color="#E5E5E5"> archaic language not</font>

342
00:15:53,040 --> 00:15:58,079
it's not<font color="#E5E5E5"> just actually</font><font color="#CCCCCC"> Misun say if</font><font color="#E5E5E5"> it's</font>

343
00:15:55,530 --> 00:16:02,459
is from 70s but<font color="#CCCCCC"> 1760s something like</font>

344
00:15:58,080 --> 00:16:05,370
<font color="#E5E5E5">that anyway 76</font><font color="#CCCCCC"> thanks so it's really</font>

345
00:16:02,460 --> 00:16:08,340
<font color="#CCCCCC">bold we need some modern language which</font>

346
00:16:05,370 --> 00:16:12,660
has<font color="#E5E5E5"> more modern constructs and stuff</font>

347
00:16:08,340 --> 00:16:15,990
<font color="#E5E5E5">like that</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> Sebastian sitting over</font>

348
00:16:12,660 --> 00:16:18,060
there still he made these<font color="#E5E5E5"> first</font>

349
00:16:15,990 --> 00:16:20,820
<font color="#CCCCCC">respondents which is the first link here</font>

350
00:16:18,060 --> 00:16:24,079
on github<font color="#CCCCCC"> I think it's now on gitlab</font>

351
00:16:20,820 --> 00:16:27,540
<font color="#E5E5E5">right on</font><font color="#CCCCCC"> GStreamer</font><font color="#E5E5E5"> it's been merged</font><font color="#CCCCCC"> I</font>

352
00:16:24,080 --> 00:16:31,350
forgot<font color="#E5E5E5"> to</font><font color="#CCCCCC"> update these links</font><font color="#E5E5E5"> anyway</font><font color="#CCCCCC"> you</font>

353
00:16:27,540 --> 00:16:34,020
can<font color="#E5E5E5"> find it easily and there's bindings</font>

354
00:16:31,350 --> 00:16:37,430
<font color="#E5E5E5">cover a lot of API I think most of it</font>

355
00:16:34,020 --> 00:16:40,560
all<font color="#E5E5E5"> of it</font><font color="#CCCCCC"> I can say all of it there and</font>

356
00:16:37,430 --> 00:16:44,310
<font color="#E5E5E5">Jesus and</font><font color="#CCCCCC"> then he wrote a bunch of</font>

357
00:16:40,560 --> 00:16:46,560
<font color="#CCCCCC">plugins</font><font color="#E5E5E5"> based on in rust</font><font color="#CCCCCC"> and based on</font>

358
00:16:44,310 --> 00:16:48,630
these bindings<font color="#E5E5E5"> so you have really good</font>

359
00:16:46,560 --> 00:16:50,489
examples already<font color="#E5E5E5"> of how to write plugins</font>

360
00:16:48,630 --> 00:16:53,160
<font color="#E5E5E5">in rust if you want to and</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a</font>

361
00:16:50,490 --> 00:16:55,080
place for<font color="#CCCCCC"> them to go</font><font color="#E5E5E5"> to upstream if you</font>

362
00:16:53,160 --> 00:16:59,730
want to write a new<font color="#CCCCCC"> plug-in in GStreamer</font>

363
00:16:55,080 --> 00:17:03,300
in rust you can do that a simple example

364
00:16:59,730 --> 00:17:06,000
how it helps rust helps<font color="#CCCCCC"> gstreamer</font><font color="#E5E5E5"> so I</font>

365
00:17:03,300 --> 00:17:07,379
<font color="#E5E5E5">mentioned in</font><font color="#CCCCCC"> my introduction to</font><font color="#E5E5E5"> the</font>

366
00:17:06,000 --> 00:17:09,750
<font color="#CCCCCC">pipeline's and elements that</font><font color="#E5E5E5"> you have</font>

367
00:17:07,380 --> 00:17:12,449
pads and<font color="#E5E5E5"> they have</font><font color="#CCCCCC"> capabilities on them</font>

368
00:17:09,750 --> 00:17:14,220
<font color="#E5E5E5">those capabilities are represented in</font><font color="#CCCCCC"> an</font>

369
00:17:12,449 --> 00:17:19,829
<font color="#CCCCCC">gstreamer</font><font color="#E5E5E5"> API by something called caps</font>

370
00:17:14,220 --> 00:17:21,420
<font color="#CCCCCC">GSD caps and each capability</font><font color="#E5E5E5"> because</font>

371
00:17:19,829 --> 00:17:23,938
each pad can have multiple capabilities

372
00:17:21,420 --> 00:17:26,220
<font color="#CCCCCC">right so each capability is represented</font>

373
00:17:23,939 --> 00:17:27,720
<font color="#CCCCCC">by something called structure and so</font>

374
00:17:26,220 --> 00:17:29,760
caps can have multiple structures<font color="#E5E5E5"> right</font>

375
00:17:27,720 --> 00:17:32,340
<font color="#E5E5E5">and this code what</font><font color="#CCCCCC"> it's trying</font><font color="#E5E5E5"> to do is</font>

376
00:17:29,760 --> 00:17:36,450
<font color="#E5E5E5">in several silly code actually you won't</font>

377
00:17:32,340 --> 00:17:38,939
never actually<font color="#E5E5E5"> use that so it's taking</font>

378
00:17:36,450 --> 00:17:41,040
of the first structure in the caps there

379
00:17:38,940 --> 00:17:43,440
is the first capability and then<font color="#E5E5E5"> it</font>

380
00:17:41,040 --> 00:17:45,570
<font color="#E5E5E5">tells the caps that</font><font color="#CCCCCC"> I want to remove</font>

381
00:17:43,440 --> 00:17:49,050
this<font color="#CCCCCC"> capability now and then the</font>

382
00:17:45,570 --> 00:17:53,250
capability<font color="#E5E5E5"> got it's trying to set a G</font>

383
00:17:49,050 --> 00:17:55,050
object property on that<font color="#E5E5E5"> in</font><font color="#CCCCCC"> C if you</font>

384
00:17:53,250 --> 00:17:56,910
write the same<font color="#E5E5E5"> code in C it will</font>

385
00:17:55,050 --> 00:17:59,100
<font color="#CCCCCC">compiler will be happy it will let you</font>

386
00:17:56,910 --> 00:18:02,790
do what<font color="#CCCCCC"> you want but you will</font><font color="#E5E5E5"> have</font>

387
00:17:59,100 --> 00:18:04,709
multiple<font color="#E5E5E5"> memory problems at runtime but</font>

388
00:18:02,790 --> 00:18:06,928
rust<font color="#CCCCCC"> will not allow you</font><font color="#E5E5E5"> to do that</font><font color="#CCCCCC"> as</font>

389
00:18:04,710 --> 00:18:08,970
you<font color="#E5E5E5"> can see here the</font><font color="#CCCCCC"> fir this is the</font>

390
00:18:06,929 --> 00:18:12,630
first error you<font color="#CCCCCC"> will get from</font><font color="#E5E5E5"> this</font>

391
00:18:08,970 --> 00:18:17,250
compiling this code<font color="#E5E5E5"> and it seems a bit</font>

392
00:18:12,630 --> 00:18:20,100
<font color="#CCCCCC">weird at first</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> I'll go</font><font color="#E5E5E5"> back if you</font>

393
00:18:17,250 --> 00:18:22,530
see the<font color="#E5E5E5"> first line you say get structure</font>

394
00:18:20,100 --> 00:18:25,709
but there could be<font color="#E5E5E5"> that caps doesn't</font>

395
00:18:22,530 --> 00:18:27,299
have any structure<font color="#E5E5E5"> so how does a rust</font>

396
00:18:25,710 --> 00:18:30,059
handle it because<font color="#E5E5E5"> as I said it doesn't</font>

397
00:18:27,299 --> 00:18:39,960
<font color="#E5E5E5">do</font><font color="#CCCCCC"> null pointers</font><font color="#E5E5E5"> so instead what</font><font color="#CCCCCC"> it has</font>

398
00:18:30,059 --> 00:18:42,240
is a enum sorry instead it<font color="#E5E5E5"> has something</font>

399
00:18:39,960 --> 00:18:46,710
called<font color="#CCCCCC"> its it has a minim called</font><font color="#E5E5E5"> option</font>

400
00:18:42,240 --> 00:18:48,980
<font color="#E5E5E5">and that enum has two values some or</font>

401
00:18:46,710 --> 00:18:51,900
none<font color="#E5E5E5"> in case of none there is no data</font>

402
00:18:48,980 --> 00:18:53,640
associated<font color="#CCCCCC"> with it but if it's some that</font>

403
00:18:51,900 --> 00:18:56,460
means there<font color="#E5E5E5"> is something to be given</font>

404
00:18:53,640 --> 00:18:59,220
<font color="#CCCCCC">like it's not know</font><font color="#E5E5E5"> and then you can you</font>

405
00:18:56,460 --> 00:19:00,840
can<font color="#E5E5E5"> get it get that struck object-- or</font>

406
00:18:59,220 --> 00:19:04,049
<font color="#E5E5E5">resource whatever it's in the option in</font>

407
00:19:00,840 --> 00:19:06,990
some and so that's why you're getting

408
00:19:04,049 --> 00:19:09,629
this error<font color="#CCCCCC"> it just says that</font><font color="#E5E5E5"> what you</font>

409
00:19:06,990 --> 00:19:13,650
got was option and option doesn't<font color="#CCCCCC"> have</font>

410
00:19:09,630 --> 00:19:15,900
this set method you're calling<font color="#CCCCCC"> on it</font><font color="#E5E5E5"> so</font>

411
00:19:13,650 --> 00:19:16,650
it's giving error so let's let's handle

412
00:19:15,900 --> 00:19:21,659
that

413
00:19:16,650 --> 00:19:24,240
now we parse that option<font color="#CCCCCC"> Russ gives you</font>

414
00:19:21,659 --> 00:19:26,610
<font color="#CCCCCC">a nice</font><font color="#E5E5E5"> construct to parse these return</font>

415
00:19:24,240 --> 00:19:28,289
<font color="#CCCCCC">values so</font><font color="#E5E5E5"> you just say I want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> assign</font>

416
00:19:26,610 --> 00:19:30,510
this to if it's<font color="#CCCCCC"> sum then I want to</font>

417
00:19:28,289 --> 00:19:33,480
assign<font color="#CCCCCC"> it to s the</font><font color="#E5E5E5"> actual structure</font>

418
00:19:30,510 --> 00:19:36,390
<font color="#E5E5E5">structure</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> you use</font><font color="#CCCCCC"> it in that</font>

419
00:19:33,480 --> 00:19:38,520
block<font color="#CCCCCC"> and then if you just ignored in</font>

420
00:19:36,390 --> 00:19:40,049
the case of none here<font color="#E5E5E5"> but you can't</font>

421
00:19:38,520 --> 00:19:43,408
<font color="#E5E5E5">handle it if you have an else block here</font>

422
00:19:40,049 --> 00:19:45,809
that<font color="#E5E5E5"> will</font><font color="#CCCCCC"> handle</font><font color="#E5E5E5"> the none case so now</font>

423
00:19:43,409 --> 00:19:49,830
should it<font color="#CCCCCC"> should work right</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> no you</font>

424
00:19:45,809 --> 00:19:53,059
have other problems now<font color="#E5E5E5"> you have a</font>

425
00:19:49,830 --> 00:19:56,158
<font color="#CCCCCC">problem</font><font color="#E5E5E5"> that you're trying</font><font color="#CCCCCC"> to modify</font>

426
00:19:53,059 --> 00:19:57,870
something that is not<font color="#CCCCCC"> mark mutable</font><font color="#E5E5E5"> so</font>

427
00:19:56,159 --> 00:19:59,250
the return value of this<font color="#CCCCCC"> gets struck</font>

428
00:19:57,870 --> 00:20:01,260
like when you get<font color="#E5E5E5"> something it's not</font>

429
00:19:59,250 --> 00:20:03,870
mutable it's not mark mutable so you

430
00:20:01,260 --> 00:20:06,000
cannot mutate it<font color="#E5E5E5"> anymore and you are</font>

431
00:20:03,870 --> 00:20:08,370
trying<font color="#E5E5E5"> to do it when you say caps dot</font>

432
00:20:06,000 --> 00:20:11,610
remove structure and you are doing s

433
00:20:08,370 --> 00:20:13,320
third set<font color="#E5E5E5"> both things are modifying</font>

434
00:20:11,610 --> 00:20:16,740
something<font color="#E5E5E5"> so they're they need a mutable</font>

435
00:20:13,320 --> 00:20:20,340
reference to work with so that's<font color="#E5E5E5"> why</font>

436
00:20:16,740 --> 00:20:22,110
you're getting<font color="#E5E5E5"> these all these errors</font><font color="#CCCCCC"> so</font>

437
00:20:20,340 --> 00:20:22,889
<font color="#CCCCCC">that's all the mutability issue</font><font color="#E5E5E5"> so</font>

438
00:20:22,110 --> 00:20:25,020
instead of that

439
00:20:22,890 --> 00:20:26,790
we just tell kept that give us a mutable

440
00:20:25,020 --> 00:20:29,070
reference<font color="#E5E5E5"> first then you get a mutable</font>

441
00:20:26,790 --> 00:20:30,540
<font color="#E5E5E5">reference</font><font color="#CCCCCC"> - caps</font><font color="#E5E5E5"> then from a mutable</font>

442
00:20:29,070 --> 00:20:32,850
reference of caps you can<font color="#CCCCCC"> get a</font><font color="#E5E5E5"> mutable</font>

443
00:20:30,540 --> 00:20:37,620
reference structure and then<font color="#CCCCCC"> you can do</font>

444
00:20:32,850 --> 00:20:38,280
what you want<font color="#CCCCCC"> right so you do it's the</font>

445
00:20:37,620 --> 00:20:42,120
<font color="#E5E5E5">same thing</font>

446
00:20:38,280 --> 00:20:44,180
remove<font color="#E5E5E5"> struct and then set</font><font color="#CCCCCC"> am I out</font><font color="#E5E5E5"> of</font>

447
00:20:42,120 --> 00:20:49,139
time already

448
00:20:44,180 --> 00:20:51,270
<font color="#E5E5E5">okay there's also</font><font color="#CCCCCC"> Zen simultaneous</font>

449
00:20:49,140 --> 00:20:55,940
<font color="#CCCCCC">municipality OSU but we don't have time</font>

450
00:20:51,270 --> 00:20:58,290
<font color="#E5E5E5">but yeah anyway the main thing is</font><font color="#CCCCCC"> that a</font>

451
00:20:55,940 --> 00:21:00,210
<font color="#CCCCCC">C compiler would have let you do all</font>

452
00:20:58,290 --> 00:21:02,850
these<font color="#CCCCCC"> horrible</font><font color="#E5E5E5"> things but rust stopped</font>

453
00:21:00,210 --> 00:21:05,130
you from doing all<font color="#E5E5E5"> the all these things</font>

454
00:21:02,850 --> 00:21:07,110
<font color="#E5E5E5">and then in the end you come up</font><font color="#CCCCCC"> with</font>

455
00:21:05,130 --> 00:21:11,160
really really<font color="#E5E5E5"> safe code</font><font color="#CCCCCC"> it was still</font>

456
00:21:07,110 --> 00:21:19,770
<font color="#CCCCCC">useless but it was safe so anyway I'll</font>

457
00:21:11,160 --> 00:21:23,210
skip this and yeah thanks we have a few

458
00:21:19,770 --> 00:21:23,210
minutes<font color="#CCCCCC"> for questions she wants</font>

459
00:21:32,500 --> 00:21:35,740
[Music]

460
00:21:40,990 --> 00:21:47,020
hi<font color="#CCCCCC"> how hard</font><font color="#E5E5E5"> is it to come to make a bi</font>

461
00:21:45,320 --> 00:21:49,820
<font color="#CCCCCC">compare</font><font color="#E5E5E5"> to have api compatibility</font>

462
00:21:47,020 --> 00:21:51,710
basically with rust<font color="#CCCCCC"> because in c you can</font>

463
00:21:49,820 --> 00:21:54,500
<font color="#CCCCCC">just define something</font><font color="#E5E5E5"> in the C file and</font>

464
00:21:51,710 --> 00:21:57,320
then you don't expose it or<font color="#CCCCCC"> G object you</font>

465
00:21:54,500 --> 00:21:59,990
also have the<font color="#E5E5E5"> private kind of offsets</font>

466
00:21:57,320 --> 00:22:02,929
<font color="#E5E5E5">truck thing</font><font color="#CCCCCC"> how do we do that</font><font color="#E5E5E5"> in rust</font>

467
00:21:59,990 --> 00:22:04,760
<font color="#CCCCCC">says it</font><font color="#E5E5E5"> I as</font><font color="#CCCCCC"> far</font><font color="#E5E5E5"> as I know you you can't</font>

468
00:22:02,930 --> 00:22:08,180
really<font color="#E5E5E5"> like it there's no ABI</font>

469
00:22:04,760 --> 00:22:10,760
compatibility right now like most<font color="#E5E5E5"> yeah</font>

470
00:22:08,180 --> 00:22:13,790
<font color="#E5E5E5">the long answer is</font><font color="#CCCCCC"> a bit long so I can't</font>

471
00:22:10,760 --> 00:22:15,470
explain<font color="#E5E5E5"> everything</font><font color="#CCCCCC"> but yeah in short</font><font color="#E5E5E5"> you</font>

472
00:22:13,790 --> 00:22:31,700
currently it's not<font color="#E5E5E5"> it's not easily</font>

473
00:22:15,470 --> 00:22:38,930
<font color="#E5E5E5">possible yeah so so you mean that you</font>

474
00:22:31,700 --> 00:22:41,030
<font color="#CCCCCC">have a c wrapper and then you what I was</font>

475
00:22:38,930 --> 00:22:43,390
<font color="#CCCCCC">just saying is you can</font><font color="#E5E5E5"> always export a</font>

476
00:22:41,030 --> 00:22:46,070
<font color="#CCCCCC">CA bi</font><font color="#E5E5E5"> and that's stable</font>

477
00:22:43,390 --> 00:22:48,770
<font color="#CCCCCC">it's just that rust itself doesn't have</font>

478
00:22:46,070 --> 00:22:51,590
<font color="#E5E5E5">a stable ABI at this point but you can</font>

479
00:22:48,770 --> 00:22:54,100
export a<font color="#CCCCCC"> capi</font><font color="#E5E5E5"> you can tell Russ that I'm</font>

480
00:22:51,590 --> 00:22:54,100
on TV

481
00:22:55,630 --> 00:22:59,230
other questions

482
00:23:02,770 --> 00:23:10,700
<font color="#E5E5E5">all right then it's crystal clear I</font>

483
00:23:07,430 --> 00:23:13,670
<font color="#CCCCCC">guess</font><font color="#E5E5E5"> everybody understood everything</font>

484
00:23:10,700 --> 00:23:29,720
<font color="#CCCCCC">it's cool</font><font color="#E5E5E5"> what is it dad we still have</font>

485
00:23:13,670 --> 00:23:31,850
two minutes<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> want yeah just the</font>

486
00:23:29,720 --> 00:23:34,430
rest<font color="#E5E5E5"> does the rest version generate</font>

487
00:23:31,850 --> 00:23:36,530
basically exactly<font color="#E5E5E5"> the same</font><font color="#CCCCCC"> code mr. C as</font>

488
00:23:34,430 --> 00:23:39,200
<font color="#CCCCCC">the safe</font><font color="#E5E5E5"> C version would what</font><font color="#CCCCCC"> was it</font>

489
00:23:36,530 --> 00:23:41,660
better<font color="#E5E5E5"> or is it worse</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not the same</font>

490
00:23:39,200 --> 00:23:43,280
but<font color="#E5E5E5"> it's yeah it's safer you know you</font>

491
00:23:41,660 --> 00:23:46,250
have to do<font color="#E5E5E5"> something to make it safe</font>

492
00:23:43,280 --> 00:23:48,260
right<font color="#CCCCCC"> it can't be the same</font><font color="#E5E5E5"> you don't</font>

493
00:23:46,250 --> 00:23:50,650
<font color="#E5E5E5">have null pointers even at sea level as</font>

494
00:23:48,260 --> 00:23:50,650
<font color="#CCCCCC">far</font><font color="#E5E5E5"> as I know</font>

495
00:23:51,700 --> 00:23:55,330
<font color="#CCCCCC">last question maybe</font>

496
00:23:58,280 --> 00:24:17,720
oh I have two questions I was just

497
00:24:14,450 --> 00:24:20,510
wondering in your<font color="#E5E5E5"> examples from</font><font color="#CCCCCC"> lost you</font>

498
00:24:17,720 --> 00:24:23,510
were<font color="#E5E5E5"> defining</font><font color="#CCCCCC"> a variety</font><font color="#E5E5E5"> wait</font><font color="#CCCCCC"> you're</font>

499
00:24:20,510 --> 00:24:26,120
defining a variable with<font color="#E5E5E5"> let yeah but it</font>

500
00:24:23,510 --> 00:24:30,080
was immutable<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> you were still</font>

501
00:24:26,120 --> 00:24:31,610
defining in your example again<font color="#E5E5E5"> as let</font>

502
00:24:30,080 --> 00:24:34,909
but then you<font color="#CCCCCC"> come back a mutable</font>

503
00:24:31,610 --> 00:24:36,709
variable<font color="#E5E5E5"> yeah isn't that kind of know</font>

504
00:24:34,910 --> 00:24:39,200
<font color="#E5E5E5">you've got a</font><font color="#CCCCCC"> reference but</font><font color="#E5E5E5"> like when you</font>

505
00:24:36,710 --> 00:24:42,890
do<font color="#E5E5E5"> the</font><font color="#CCCCCC"> left so you don't</font><font color="#E5E5E5"> always have to</font>

506
00:24:39,200 --> 00:24:45,710
give it the<font color="#E5E5E5"> type so it can rust can do</font>

507
00:24:42,890 --> 00:24:47,900
type inference so it was getting<font color="#CCCCCC"> a</font>

508
00:24:45,710 --> 00:24:50,450
<font color="#E5E5E5">mutable reference</font><font color="#CCCCCC"> so it just</font><font color="#E5E5E5"> got how</font>

509
00:24:47,900 --> 00:25:04,910
would I know it's beautiful<font color="#E5E5E5"> because</font><font color="#CCCCCC"> of</font>

510
00:24:50,450 --> 00:25:07,220
<font color="#E5E5E5">the return value at least in the matter</font>

511
00:25:04,910 --> 00:25:15,290
<font color="#E5E5E5">it said much so it was obvious from the</font>

512
00:25:07,220 --> 00:25:17,750
matter at least hello<font color="#CCCCCC"> we sometimes talk</font>

513
00:25:15,290 --> 00:25:20,629
about<font color="#E5E5E5"> glue languages as in higher-level</font>

514
00:25:17,750 --> 00:25:22,610
languages like script languages and is

515
00:25:20,630 --> 00:25:24,890
there like a trend or can you see a

516
00:25:22,610 --> 00:25:26,600
trend where rust could be used as a

517
00:25:24,890 --> 00:25:28,910
subsystem<font color="#CCCCCC"> for high</font><font color="#E5E5E5"> performance and</font><font color="#CCCCCC"> a</font>

518
00:25:26,600 --> 00:25:30,620
<font color="#CCCCCC">higher-level</font><font color="#E5E5E5"> language or an</font><font color="#CCCCCC"> axe quit or</font>

519
00:25:28,910 --> 00:25:31,190
maybe go because I'm<font color="#CCCCCC"> more of a go</font>

520
00:25:30,620 --> 00:25:33,979
programmer

521
00:25:31,190 --> 00:25:37,250
well they<font color="#E5E5E5"> both could like collaborate</font>

522
00:25:33,980 --> 00:25:39,110
<font color="#E5E5E5">you know like in an application does</font>

523
00:25:37,250 --> 00:25:40,970
<font color="#E5E5E5">that make sense or do you more our</font>

524
00:25:39,110 --> 00:25:45,229
<font color="#CCCCCC">russification meant to be like entirely</font>

525
00:25:40,970 --> 00:25:48,650
written<font color="#E5E5E5"> in rust well you have a way to</font>

526
00:25:45,230 --> 00:25:51,410
do<font color="#CCCCCC"> FF I through unsafe code so you can</font>

527
00:25:48,650 --> 00:25:54,680
interact with any kind of language<font color="#CCCCCC"> to</font>

528
00:25:51,410 --> 00:25:57,050
through that not just<font color="#CCCCCC"> C but it's not</font>

529
00:25:54,680 --> 00:25:59,000
like if there's no I don't<font color="#E5E5E5"> think there</font>

530
00:25:57,050 --> 00:26:01,909
<font color="#E5E5E5">is a helper to make it easy for</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> that</font>

531
00:25:59,000 --> 00:26:03,320
<font color="#E5E5E5">for specifically for go I mean or any</font>

532
00:26:01,910 --> 00:26:05,750
<font color="#CCCCCC">particular language I think there is</font>

533
00:26:03,320 --> 00:26:07,909
<font color="#E5E5E5">some something for Python that makes it</font>

534
00:26:05,750 --> 00:26:09,679
easy to to do like interaction between

535
00:26:07,910 --> 00:26:11,160
parts and the guy standing next to you

536
00:26:09,679 --> 00:26:15,870
<font color="#E5E5E5">would know about that</font>

537
00:26:11,160 --> 00:26:17,810
now the other side yeah yeah you so but

538
00:26:15,870 --> 00:26:21,270
no I don't<font color="#E5E5E5"> know if I need go</font>

539
00:26:17,810 --> 00:26:24,480
<font color="#E5E5E5">specifically go for go I mean as in go</font>

540
00:26:21,270 --> 00:26:27,139
cooling rust or any way either way

541
00:26:24,480 --> 00:26:27,140
around you<font color="#E5E5E5"> okay</font>

542
00:26:28,250 --> 00:26:37,080
but as<font color="#E5E5E5"> Sebastian said you can expose</font><font color="#CCCCCC"> a/c</font>

543
00:26:32,820 --> 00:26:39,810
<font color="#E5E5E5">ABI</font><font color="#CCCCCC"> and API</font><font color="#E5E5E5"> to the true rust and from go</font>

544
00:26:37,080 --> 00:26:45,770
it's really<font color="#CCCCCC"> easy to</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> see so you can</font>

545
00:26:39,810 --> 00:26:51,389
<font color="#CCCCCC">use it that way thank you Ron</font>

546
00:26:45,770 --> 00:26:51,389
[Applause]

