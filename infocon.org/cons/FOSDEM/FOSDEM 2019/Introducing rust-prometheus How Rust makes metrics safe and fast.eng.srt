1
00:00:05,740 --> 00:00:11,410
today<font color="#E5E5E5"> I'm going to introduce the library</font>

2
00:00:08,080 --> 00:00:13,449
called rust<font color="#CCCCCC"> prometheus and it's a</font>

3
00:00:11,410 --> 00:00:18,698
similar<font color="#CCCCCC"> Brie but you'll see how rust</font>

4
00:00:13,449 --> 00:00:21,660
makes this library<font color="#E5E5E5"> safe and fast so let</font>

5
00:00:18,699 --> 00:00:23,890
<font color="#E5E5E5">me introduce myself first and wish</font>

6
00:00:21,660 --> 00:00:26,140
infrastructure engineer from<font color="#E5E5E5"> pink</font><font color="#CCCCCC"> app</font>

7
00:00:23,890 --> 00:00:30,130
<font color="#E5E5E5">you may already know this this name if</font>

8
00:00:26,140 --> 00:00:32,698
you attend the lectures before<font color="#CCCCCC"> in pink</font>

9
00:00:30,130 --> 00:00:36,760
app we<font color="#CCCCCC"> many beauty products</font>

10
00:00:32,698 --> 00:00:39,460
<font color="#CCCCCC">well as distributed transaction</font><font color="#E5E5E5"> no</font>

11
00:00:36,760 --> 00:00:43,568
<font color="#CCCCCC">psycho database called Teddy B</font><font color="#E5E5E5"> it is</font>

12
00:00:39,460 --> 00:00:46,569
<font color="#E5E5E5">written : and another one is distributed</font>

13
00:00:43,569 --> 00:00:49,749
<font color="#CCCCCC">transactional key value database called</font>

14
00:00:46,569 --> 00:00:53,409
<font color="#CCCCCC">sake V returning rust</font><font color="#E5E5E5"> and Teddy B is</font>

15
00:00:49,749 --> 00:00:55,929
just<font color="#CCCCCC"> a</font><font color="#E5E5E5"> single layer built up and</font><font color="#CCCCCC"> Cavey</font>

16
00:00:53,409 --> 00:01:02,219
database the key value<font color="#E5E5E5"> database is the</font>

17
00:00:55,929 --> 00:01:05,920
<font color="#E5E5E5">storage layer tidy</font><font color="#CCCCCC"> bein Chaka we have</font>

18
00:01:02,219 --> 00:01:09,270
many many customers worldwide<font color="#E5E5E5"> and we</font>

19
00:01:05,920 --> 00:01:12,789
have adopted in<font color="#E5E5E5"> banks internet</font>

20
00:01:09,270 --> 00:01:15,820
enterprise companies<font color="#E5E5E5"> for more than 15</font>

21
00:01:12,789 --> 00:01:20,399
gigabytes<font color="#E5E5E5"> data it's pretty large data</font>

22
00:01:15,820 --> 00:01:25,210
and these are all<font color="#CCCCCC"> using production cases</font>

23
00:01:20,399 --> 00:01:27,640
so let me introduce our<font color="#CCCCCC"> prod the</font>

24
00:01:25,210 --> 00:01:31,658
architecture of<font color="#E5E5E5"> our products</font>

25
00:01:27,640 --> 00:01:34,450
Teddy<font color="#E5E5E5"> B speaks</font><font color="#CCCCCC"> Mexico protocol and so</font>

26
00:01:31,659 --> 00:01:39,159
you your application can just use<font color="#E5E5E5"> Mexico</font>

27
00:01:34,450 --> 00:01:43,060
<font color="#E5E5E5">drivers to talk to him and Teddy B</font><font color="#CCCCCC"> Teddy</font>

28
00:01:39,159 --> 00:01:47,890
<font color="#CCCCCC">be</font><font color="#E5E5E5"> act as a stateless</font><font color="#CCCCCC"> psycho computing</font>

29
00:01:43,060 --> 00:01:51,039
layer and for the under layer it<font color="#CCCCCC"> is</font>

30
00:01:47,890 --> 00:01:54,310
<font color="#E5E5E5">tacitly</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> such distributed</font><font color="#CCCCCC"> KB storage</font>

31
00:01:51,039 --> 00:01:58,299
and just<font color="#E5E5E5"> distributed</font><font color="#CCCCCC"> kV storage is</font>

32
00:01:54,310 --> 00:02:01,240
building rust in<font color="#CCCCCC"> ping hub</font><font color="#E5E5E5"> we also</font>

33
00:01:58,299 --> 00:02:04,990
created and maintained a lot of many

34
00:02:01,240 --> 00:02:07,329
other rust crates for example here the

35
00:02:04,990 --> 00:02:10,949
rust<font color="#CCCCCC"> promise</font><font color="#E5E5E5"> yes the library I'm talking</font>

36
00:02:07,329 --> 00:02:14,170
about<font color="#E5E5E5"> today and</font><font color="#CCCCCC"> roster rocks DB that's</font>

37
00:02:10,949 --> 00:02:17,619
<font color="#E5E5E5">binding and wrapper for the rocks DB</font>

38
00:02:14,170 --> 00:02:18,470
database and raft it's an implementation

39
00:02:17,620 --> 00:02:22,220
for

40
00:02:18,470 --> 00:02:26,990
rust distributed consensus algorithm and

41
00:02:22,220 --> 00:02:30,200
also<font color="#CCCCCC"> jab</font><font color="#E5E5E5"> you see builded to wrap the jab</font>

42
00:02:26,990 --> 00:02:34,640
<font color="#CCCCCC">CCC language core to be high-performance</font>

43
00:02:30,200 --> 00:02:41,269
and also we build fail<font color="#CCCCCC"> I assess provides</font>

44
00:02:34,640 --> 00:02:45,559
<font color="#E5E5E5">fair points so what is prometheus oops</font>

45
00:02:41,270 --> 00:02:49,730
<font color="#CCCCCC">sorry</font><font color="#E5E5E5"> not this one it's just a system</font>

46
00:02:45,560 --> 00:02:54,200
monetary<font color="#E5E5E5"> and Latin took it</font><font color="#CCCCCC"> here is a</font>

47
00:02:49,730 --> 00:02:57,380
<font color="#E5E5E5">common flow of using promises</font><font color="#CCCCCC"> usually</font>

48
00:02:54,200 --> 00:03:01,609
your application will collect matrix

49
00:02:57,380 --> 00:03:04,280
<font color="#E5E5E5">using</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> promise client and then you push</font>

50
00:03:01,610 --> 00:03:07,250
<font color="#CCCCCC">the matrix to promises</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> that promise</font>

51
00:03:04,280 --> 00:03:09,290
your server<font color="#CCCCCC"> pour your matrix</font><font color="#E5E5E5"> and finally</font>

52
00:03:07,250 --> 00:03:12,320
you will use some visualization<font color="#CCCCCC"> tools</font>

53
00:03:09,290 --> 00:03:17,150
such as graph<font color="#CCCCCC"> under to visualize the</font>

54
00:03:12,320 --> 00:03:20,390
matrix you collected and rest<font color="#CCCCCC"> promises</font>

55
00:03:17,150 --> 00:03:23,810
<font color="#CCCCCC">it's just a promise client</font><font color="#E5E5E5"> it is not a</font>

56
00:03:20,390 --> 00:03:25,970
promise<font color="#E5E5E5"> implementation in rust sorry for</font>

57
00:03:23,810 --> 00:03:28,220
<font color="#E5E5E5">that but</font><font color="#CCCCCC"> I promise</font><font color="#E5E5E5"> you that you will</font>

58
00:03:25,970 --> 00:03:31,570
<font color="#E5E5E5">find many interesting</font><font color="#CCCCCC"> things even in</font>

59
00:03:28,220 --> 00:03:34,910
this simple small client library

60
00:03:31,570 --> 00:03:37,459
so let's first<font color="#E5E5E5"> getting</font><font color="#CCCCCC"> started and take</font>

61
00:03:34,910 --> 00:03:41,570
<font color="#CCCCCC">a look at a small example of</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> to use</font>

62
00:03:37,459 --> 00:03:43,970
<font color="#CCCCCC">this library</font><font color="#E5E5E5"> first of all you need</font><font color="#CCCCCC"> to</font>

63
00:03:41,570 --> 00:03:46,150
define<font color="#CCCCCC"> your matrix there are many kind</font>

64
00:03:43,970 --> 00:03:52,160
of different matrix like<font color="#E5E5E5"> Condor</font>

65
00:03:46,150 --> 00:03:55,400
histogram and couch so here as the code

66
00:03:52,160 --> 00:03:59,870
demonstrates we create histogram metric

67
00:03:55,400 --> 00:04:04,250
named<font color="#CCCCCC"> httprequest the original using the</font>

68
00:03:59,870 --> 00:04:07,340
macro called<font color="#E5E5E5"> register histogram vac the</font>

69
00:04:04,250 --> 00:04:11,570
histogram has one label called method as

70
00:04:07,340 --> 00:04:13,700
you can see here in the fifth line there

71
00:04:11,570 --> 00:04:17,089
is one label<font color="#E5E5E5"> called method so this is</font>

72
00:04:13,700 --> 00:04:20,810
actually a histogram vector because for

73
00:04:17,089 --> 00:04:22,789
each<font color="#E5E5E5"> value in the label</font><font color="#CCCCCC"> it will be</font>

74
00:04:20,810 --> 00:04:25,270
different<font color="#E5E5E5"> matrix</font><font color="#CCCCCC"> they are content</font>

75
00:04:22,790 --> 00:04:28,660
independently so they are history

76
00:04:25,270 --> 00:04:28,659
histogram vector

77
00:04:29,720 --> 00:04:36,660
for the second<font color="#E5E5E5"> step you will record</font><font color="#CCCCCC"> the</font>

78
00:04:33,300 --> 00:04:39,000
matrix<font color="#E5E5E5"> as an example here</font><font color="#CCCCCC"> I just used</font>

79
00:04:36,660 --> 00:04:41,670
random<font color="#E5E5E5"> generators to generate these</font>

80
00:04:39,000 --> 00:04:45,000
<font color="#E5E5E5">metrics in real applications</font><font color="#CCCCCC"> you should</font>

81
00:04:41,670 --> 00:04:46,860
<font color="#E5E5E5">use an instant to record</font><font color="#CCCCCC"> it your region</font>

82
00:04:45,000 --> 00:04:50,010
<font color="#CCCCCC">instead of what I deal here</font><font color="#E5E5E5"> is just for</font>

83
00:04:46,860 --> 00:04:53,660
demonstration here I will here<font color="#CCCCCC"> the code</font>

84
00:04:50,010 --> 00:04:58,020
<font color="#E5E5E5">simulates a request</font><font color="#CCCCCC"> as you can see its</font>

85
00:04:53,660 --> 00:05:02,430
duration<font color="#E5E5E5"> is will be randomized from 0 to</font>

86
00:04:58,020 --> 00:05:06,990
2<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's HTTP method will be</font><font color="#E5E5E5"> from one</font>

87
00:05:02,430 --> 00:05:10,500
<font color="#CCCCCC">of cats post pretend delete and we use</font>

88
00:05:06,990 --> 00:05:14,190
this line<font color="#E5E5E5"> request generation but with</font>

89
00:05:10,500 --> 00:05:16,980
label values<font color="#CCCCCC"> methods dot observed your</font>

90
00:05:14,190 --> 00:05:21,230
<font color="#CCCCCC">regime</font><font color="#E5E5E5"> to record this</font><font color="#CCCCCC"> new regime it</font>

91
00:05:16,980 --> 00:05:24,450
means that there is<font color="#E5E5E5"> request in a label</font>

92
00:05:21,230 --> 00:05:27,810
<font color="#E5E5E5">specified where via the</font><font color="#CCCCCC"> message variable</font>

93
00:05:24,450 --> 00:05:33,240
<font color="#E5E5E5">takes the time specified</font><font color="#CCCCCC"> by the duration</font>

94
00:05:27,810 --> 00:05:36,180
variable and finally let's serve the

95
00:05:33,240 --> 00:05:39,080
matrix for the<font color="#E5E5E5"> promises server there are</font>

96
00:05:36,180 --> 00:05:42,540
two ways January the<font color="#E5E5E5"> Pooh and</font><font color="#CCCCCC"> the push</font>

97
00:05:39,080 --> 00:05:47,099
the code here provides a matrix service

98
00:05:42,540 --> 00:05:49,800
using<font color="#CCCCCC"> the hyper library for promises to</font>

99
00:05:47,100 --> 00:05:53,340
<font color="#CCCCCC">pour metrics from so here the code is</font>

100
00:05:49,800 --> 00:05:57,690
pulling but the promises<font color="#E5E5E5"> library also</font>

101
00:05:53,340 --> 00:06:01,049
provides push functions to<font color="#CCCCCC"> pour metrics</font>

102
00:05:57,690 --> 00:06:05,520
you just need<font color="#E5E5E5"> text encoder as sure here</font>

103
00:06:01,050 --> 00:06:07,830
it's<font color="#CCCCCC"> task encoder new and this text</font>

104
00:06:05,520 --> 00:06:10,460
encoder will encode these gathered

105
00:06:07,830 --> 00:06:15,890
matrix through the<font color="#E5E5E5"> output response and</font>

106
00:06:10,460 --> 00:06:15,890
the output response<font color="#E5E5E5"> just look like this</font>

107
00:06:16,010 --> 00:06:21,719
so<font color="#E5E5E5"> far you have already collected your</font>

108
00:06:19,020 --> 00:06:24,840
matrix to the<font color="#E5E5E5"> premiership server</font><font color="#CCCCCC"> so it's</font>

109
00:06:21,720 --> 00:06:27,000
time<font color="#CCCCCC"> to visualize it here I use the</font>

110
00:06:24,840 --> 00:06:30,119
governor to display the histogram using

111
00:06:27,000 --> 00:06:32,760
<font color="#CCCCCC">the promised query language as you can</font>

112
00:06:30,120 --> 00:06:33,690
see in the blue text then you<font color="#CCCCCC"> can see</font>

113
00:06:32,760 --> 00:06:36,030
the graph here

114
00:06:33,690 --> 00:06:38,550
<font color="#E5E5E5">of course you have your field to use any</font>

115
00:06:36,030 --> 00:06:43,130
kind<font color="#E5E5E5"> of other visualization tools but</font>

116
00:06:38,550 --> 00:06:43,130
common a graphing area is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> wise choice</font>

117
00:06:43,319 --> 00:06:49,050
<font color="#E5E5E5">so far</font><font color="#CCCCCC"> it's Lots normal</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> a simple</font>

118
00:06:46,439 --> 00:06:52,529
<font color="#CCCCCC">metric</font><font color="#E5E5E5"> library provides metric recording</font>

119
00:06:49,050 --> 00:06:55,979
and encoding features<font color="#E5E5E5"> next we will see</font>

120
00:06:52,529 --> 00:06:59,159
<font color="#E5E5E5">how the promiscuous library provides</font>

121
00:06:55,979 --> 00:07:03,210
some unique<font color="#CCCCCC"> features</font><font color="#E5E5E5"> by utilizing some</font>

122
00:06:59,159 --> 00:07:06,089
<font color="#CCCCCC">Rusted advantages first rust makes the</font>

123
00:07:03,210 --> 00:07:09,210
<font color="#E5E5E5">library very safe so why we care about</font>

124
00:07:06,089 --> 00:07:11,279
<font color="#CCCCCC">safety we use</font><font color="#E5E5E5"> wrath</font><font color="#CCCCCC"> promise</font><font color="#E5E5E5"> using our</font>

125
00:07:09,210 --> 00:07:15,359
key value database as you<font color="#CCCCCC"> already know</font>

126
00:07:11,279 --> 00:07:18,089
<font color="#CCCCCC">tag</font><font color="#E5E5E5"> heavy to record and report all</font><font color="#CCCCCC"> kind</font>

127
00:07:15,360 --> 00:07:21,809
<font color="#E5E5E5">of metrics there are hundreds of metrics</font>

128
00:07:18,089 --> 00:07:26,129
and<font color="#CCCCCC"> safety is very critical for tocfe</font>

129
00:07:21,809 --> 00:07:28,349
for example we don't want crashes if

130
00:07:26,129 --> 00:07:31,800
<font color="#CCCCCC">target requests</font><font color="#E5E5E5"> your service is</font>

131
00:07:28,349 --> 00:07:33,869
unavailable<font color="#CCCCCC"> also try kvs distributed and</font>

132
00:07:31,800 --> 00:07:36,270
for the tolerance<font color="#E5E5E5"> but we want to</font>

133
00:07:33,869 --> 00:07:38,309
minimize<font color="#E5E5E5"> this possibility we don't want</font>

134
00:07:36,270 --> 00:07:42,419
to see that happen<font color="#CCCCCC"> so we want to</font>

135
00:07:38,309 --> 00:07:44,610
eliminate crashes and then for the most

136
00:07:42,419 --> 00:07:48,719
important thing we want<font color="#CCCCCC"> to eliminate</font>

137
00:07:44,610 --> 00:07:52,680
data<font color="#E5E5E5"> corruption</font><font color="#CCCCCC"> as a key value database</font>

138
00:07:48,719 --> 00:07:54,330
it stores data<font color="#E5E5E5"> permanently so if there</font>

139
00:07:52,680 --> 00:07:57,539
is<font color="#CCCCCC"> the memory safety</font><font color="#E5E5E5"> issue</font>

140
00:07:54,330 --> 00:08:01,050
normally the memory will<font color="#CCCCCC"> be broken for</font>

141
00:07:57,539 --> 00:08:04,709
example there<font color="#E5E5E5"> may be cabbages in the</font>

142
00:08:01,050 --> 00:08:08,129
buffers as<font color="#CCCCCC"> tocfe</font><font color="#E5E5E5"> is going to flush to</font>

143
00:08:04,709 --> 00:08:11,399
<font color="#CCCCCC">the disk</font><font color="#E5E5E5"> or transfer</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> other peers and</font>

144
00:08:08,129 --> 00:08:14,099
in<font color="#E5E5E5"> this case if just data is crutches</font>

145
00:08:11,399 --> 00:08:16,379
it's horrible<font color="#CCCCCC"> it means as we all lose</font>

146
00:08:14,099 --> 00:08:19,529
<font color="#E5E5E5">our data permanently so we are not that</font>

147
00:08:16,379 --> 00:08:24,659
<font color="#CCCCCC">it happened that's</font><font color="#E5E5E5"> why we very care</font>

148
00:08:19,529 --> 00:08:28,349
about safety<font color="#CCCCCC"> so now let's begin our case</font>

149
00:08:24,659 --> 00:08:31,259
study to see how how<font color="#E5E5E5"> rot in there</font><font color="#CCCCCC"> was</font>

150
00:08:28,349 --> 00:08:35,519
safety<font color="#E5E5E5"> and let me introduce</font><font color="#CCCCCC"> some</font>

151
00:08:31,259 --> 00:08:38,909
<font color="#CCCCCC">backgrounds in</font><font color="#E5E5E5"> the library you can</font>

152
00:08:35,519 --> 00:08:41,880
define the record labels for matrix for

153
00:08:38,909 --> 00:08:45,810
metric vectors just<font color="#E5E5E5"> like this one here</font>

154
00:08:41,880 --> 00:08:49,079
is<font color="#E5E5E5"> the HTTP requests</font><font color="#CCCCCC"> its master</font><font color="#E5E5E5"> is post</font>

155
00:08:45,810 --> 00:08:53,969
<font color="#E5E5E5">it's IP</font><font color="#CCCCCC"> as I appear in</font><font color="#E5E5E5"> this policy in /</font>

156
00:08:49,079 --> 00:08:56,939
<font color="#E5E5E5">AP a-- then after defining and recording</font>

157
00:08:53,970 --> 00:08:59,910
this matrix<font color="#E5E5E5"> you</font><font color="#CCCCCC"> will be able</font><font color="#E5E5E5"> to query</font>

158
00:08:56,940 --> 00:09:03,480
a matrix for a<font color="#CCCCCC"> specific label</font><font color="#E5E5E5"> for</font>

159
00:08:59,910 --> 00:09:06,780
example<font color="#E5E5E5"> you can know how many requests</font>

160
00:09:03,480 --> 00:09:09,630
come from this<font color="#E5E5E5"> IP address</font><font color="#CCCCCC"> and how long</font>

161
00:09:06,780 --> 00:09:13,170
it takes<font color="#E5E5E5"> for requests to slash API</font>

162
00:09:09,630 --> 00:09:15,600
endpoint for<font color="#CCCCCC"> 99</font><font color="#E5E5E5"> percent</font><font color="#CCCCCC"> of requests so</font>

163
00:09:13,170 --> 00:09:18,630
as you can see<font color="#E5E5E5"> the</font><font color="#CCCCCC"> label is pretty</font>

164
00:09:15,600 --> 00:09:23,820
useful here and in fact in sake we<font color="#E5E5E5"> have</font>

165
00:09:18,630 --> 00:09:27,570
<font color="#CCCCCC">Larry use the label feature when you're</font>

166
00:09:23,820 --> 00:09:29,610
defining it you use color of X for

167
00:09:27,570 --> 00:09:33,360
example<font color="#E5E5E5"> I'm using your counter so</font><font color="#CCCCCC"> Condor</font>

168
00:09:29,610 --> 00:09:36,360
<font color="#CCCCCC">bucks</font><font color="#E5E5E5"> new and that provides three label</font>

169
00:09:33,360 --> 00:09:40,440
names here and when I record<font color="#E5E5E5"> matrix I</font>

170
00:09:36,360 --> 00:09:45,080
use counter<font color="#E5E5E5"> taught with label values and</font>

171
00:09:40,440 --> 00:09:48,870
provides three label values here here is

172
00:09:45,080 --> 00:09:51,240
<font color="#E5E5E5">restructuring so the number</font><font color="#CCCCCC"> of labels</font>

173
00:09:48,870 --> 00:09:53,640
<font color="#E5E5E5">you defined and the number of label</font>

174
00:09:51,240 --> 00:09:56,130
values you provided<font color="#E5E5E5"> they must be the</font>

175
00:09:53,640 --> 00:10:00,050
<font color="#E5E5E5">same number</font><font color="#CCCCCC"> of values your level pairs</font>

176
00:09:56,130 --> 00:10:03,000
must must match<font color="#E5E5E5"> so how can we do that</font>

177
00:10:00,050 --> 00:10:06,479
normally we can just check the lens at

178
00:10:03,000 --> 00:10:10,850
<font color="#CCCCCC">runtime and if the lens</font><font color="#E5E5E5"> doesn't match we</font>

179
00:10:06,480 --> 00:10:13,410
can connect source<font color="#CCCCCC"> Lowe's errors but</font>

180
00:10:10,850 --> 00:10:17,040
this is very<font color="#E5E5E5"> simple but</font><font color="#CCCCCC"> there are some</font>

181
00:10:13,410 --> 00:10:19,920
disadvantages<font color="#CCCCCC"> for example your</font><font color="#E5E5E5"> code may</font>

182
00:10:17,040 --> 00:10:21,900
<font color="#CCCCCC">be hidden in your branch so that your</font>

183
00:10:19,920 --> 00:10:24,870
<font color="#E5E5E5">test will not commit</font><font color="#CCCCCC"> well you know in</font>

184
00:10:21,900 --> 00:10:27,750
production cases or arrows may happen

185
00:10:24,870 --> 00:10:29,970
<font color="#E5E5E5">and just means if</font><font color="#CCCCCC"> your test does not</font>

186
00:10:27,750 --> 00:10:37,160
<font color="#E5E5E5">commit this error will be in production</font>

187
00:10:29,970 --> 00:10:40,050
<font color="#E5E5E5">it's it's very</font><font color="#CCCCCC"> i can't toierate that and</font>

188
00:10:37,160 --> 00:10:42,329
also<font color="#E5E5E5"> there will be</font><font color="#CCCCCC"> runs on calls because</font>

189
00:10:40,050 --> 00:10:43,859
<font color="#CCCCCC">you're adjusting</font><font color="#E5E5E5"> just checking the lens</font>

190
00:10:42,330 --> 00:10:48,360
in runtime so there were billions on

191
00:10:43,860 --> 00:10:52,620
costs so how can we fix that you know

192
00:10:48,360 --> 00:10:57,120
<font color="#CCCCCC">right</font><font color="#E5E5E5"> away we can use</font><font color="#CCCCCC"> type systems to</font>

193
00:10:52,620 --> 00:10:59,760
enforce<font color="#E5E5E5"> label ends here at first in</font><font color="#CCCCCC"> I</font>

194
00:10:57,120 --> 00:11:02,580
first declare a trait<font color="#E5E5E5"> called a</font><font color="#CCCCCC"> label</font>

195
00:10:59,760 --> 00:11:05,939
then I implement this label<font color="#CCCCCC"> for</font>

196
00:11:02,580 --> 00:11:08,660
different kind of string<font color="#CCCCCC"> of risk for</font>

197
00:11:05,940 --> 00:11:10,180
<font color="#E5E5E5">example I implement this label</font><font color="#CCCCCC"> for an</font>

198
00:11:08,660 --> 00:11:12,550
array<font color="#CCCCCC"> con</font>

199
00:11:10,180 --> 00:11:15,310
one string and array contains two

200
00:11:12,550 --> 00:11:16,750
strings and three strings<font color="#E5E5E5"> these types</font>

201
00:11:15,310 --> 00:11:23,560
are all labels

202
00:11:16,750 --> 00:11:27,040
next I will our past this type<font color="#E5E5E5"> this some</font>

203
00:11:23,560 --> 00:11:27,969
some type called<font color="#E5E5E5"> some label type in</font><font color="#CCCCCC"> the</font>

204
00:11:27,040 --> 00:11:30,730
new functioning

205
00:11:27,970 --> 00:11:33,640
I just<font color="#E5E5E5"> just past Sunday but having a</font>

206
00:11:30,730 --> 00:11:37,649
function and create<font color="#E5E5E5"> a</font><font color="#CCCCCC"> condom vac</font>

207
00:11:33,640 --> 00:11:41,199
containing this<font color="#E5E5E5"> type T and for the</font>

208
00:11:37,649 --> 00:11:45,810
recording pass<font color="#E5E5E5"> when we want to with</font>

209
00:11:41,200 --> 00:11:49,690
label values<font color="#E5E5E5"> we also accept this T so as</font>

210
00:11:45,810 --> 00:11:53,109
you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see in the usage if you pass an</font>

211
00:11:49,690 --> 00:11:57,190
array with<font color="#CCCCCC"> two strings</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> creates a</font>

212
00:11:53,110 --> 00:12:00,220
contract<font color="#E5E5E5"> it's tedious string with two</font>

213
00:11:57,190 --> 00:12:02,980
element two elements two elements are a

214
00:12:00,220 --> 00:12:06,640
string array<font color="#E5E5E5"> and when you use this</font>

215
00:12:02,980 --> 00:12:10,360
metric<font color="#CCCCCC"> you also need to pass a string</font><font color="#E5E5E5"> a</font>

216
00:12:06,640 --> 00:12:12,970
tool to and array with two<font color="#E5E5E5"> strings</font><font color="#CCCCCC"> if</font>

217
00:12:10,360 --> 00:12:14,680
you want to pass<font color="#E5E5E5"> in nori with one string</font>

218
00:12:12,970 --> 00:12:17,440
or three<font color="#E5E5E5"> strings or other kind of</font>

219
00:12:14,680 --> 00:12:24,989
strings the compiler will reject your

220
00:12:17,440 --> 00:12:28,120
code<font color="#CCCCCC"> so in this way you ensure that</font><font color="#E5E5E5"> the</font>

221
00:12:24,990 --> 00:12:31,209
label numbers you pass when you record

222
00:12:28,120 --> 00:12:33,490
the matrix<font color="#E5E5E5"> exactly the same when you</font>

223
00:12:31,209 --> 00:12:35,979
created it<font color="#E5E5E5"> why oh you don't have to</font>

224
00:12:33,490 --> 00:12:40,360
check its<font color="#CCCCCC"> lens</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> time so</font><font color="#CCCCCC"> it's</font>

225
00:12:35,980 --> 00:12:43,900
<font color="#CCCCCC">supposed</font><font color="#E5E5E5"> to save and fast and for some</font>

226
00:12:40,360 --> 00:12:47,589
improvements<font color="#E5E5E5"> we merely also wanted these</font>

227
00:12:43,900 --> 00:12:52,110
features for<font color="#CCCCCC"> example we want to able to</font>

228
00:12:47,589 --> 00:12:55,630
define the label using into string and

229
00:12:52,110 --> 00:13:00,400
using the label using as rough string

230
00:12:55,630 --> 00:13:03,970
and<font color="#E5E5E5"> also we</font><font color="#CCCCCC"> may want</font><font color="#E5E5E5"> and to be many</font>

231
00:13:00,400 --> 00:13:07,540
values for example<font color="#CCCCCC"> four</font><font color="#E5E5E5"> five six so that</font>

232
00:13:03,970 --> 00:13:09,399
we want these many labels and we don't

233
00:13:07,540 --> 00:13:11,649
want to repeat so many<font color="#E5E5E5"> codes here as you</font>

234
00:13:09,399 --> 00:13:15,850
can see you here I repeat three lines

235
00:13:11,649 --> 00:13:19,600
<font color="#CCCCCC">four string lines one two three and if</font>

236
00:13:15,850 --> 00:13:22,870
we are going<font color="#E5E5E5"> to create</font><font color="#CCCCCC"> 62 sexy yeah</font>

237
00:13:19,600 --> 00:13:23,680
<font color="#CCCCCC">sixth a two labels it will</font><font color="#E5E5E5"> be a lot</font>

238
00:13:22,870 --> 00:13:26,380
messy

239
00:13:23,680 --> 00:13:28,930
so this is<font color="#E5E5E5"> possible in rust</font><font color="#CCCCCC"> but it's</font>

240
00:13:26,380 --> 00:13:32,260
quite complicated<font color="#CCCCCC"> so I just paste the</font>

241
00:13:28,930 --> 00:13:36,609
link here<font color="#E5E5E5"> you may refer to us later to</font>

242
00:13:32,260 --> 00:13:41,020
see how<font color="#E5E5E5"> it works here I</font><font color="#CCCCCC"> demonstrates a</font>

243
00:13:36,610 --> 00:13:44,940
<font color="#CCCCCC">cochis</font><font color="#E5E5E5"> such uses</font><font color="#CCCCCC"> this improved</font><font color="#E5E5E5"> version</font>

244
00:13:41,020 --> 00:13:49,329
as you<font color="#CCCCCC"> can see when we</font><font color="#E5E5E5"> create the</font>

245
00:13:44,940 --> 00:13:51,970
counter we can pass as a stream

246
00:13:49,330 --> 00:13:55,360
reference or an on<font color="#E5E5E5"> the string</font><font color="#CCCCCC"> that is</font>

247
00:13:51,970 --> 00:13:57,459
industry so if you are passing<font color="#CCCCCC"> on the</font>

248
00:13:55,360 --> 00:13:59,220
string<font color="#E5E5E5"> there will be no cost</font><font color="#CCCCCC"> if we are</font>

249
00:13:57,459 --> 00:14:02,680
passing a string reference<font color="#E5E5E5"> there will be</font>

250
00:13:59,220 --> 00:14:05,770
string clones<font color="#E5E5E5"> that's what we expected</font>

251
00:14:02,680 --> 00:14:09,339
because<font color="#E5E5E5"> we will store these streams in a</font>

252
00:14:05,770 --> 00:14:12,910
structure so it must as such on the

253
00:14:09,339 --> 00:14:16,660
<font color="#E5E5E5">strings but when we use the</font><font color="#CCCCCC"> counter it</font>

254
00:14:12,910 --> 00:14:21,459
is<font color="#CCCCCC"> as rough string and as you can</font><font color="#E5E5E5"> see</font>

255
00:14:16,660 --> 00:14:24,449
<font color="#E5E5E5">here also you can pass</font><font color="#CCCCCC"> string references</font>

256
00:14:21,459 --> 00:14:28,810
or on the strings<font color="#E5E5E5"> that's all fine and</font>

257
00:14:24,450 --> 00:14:32,260
the most fancy<font color="#E5E5E5"> way is that if you define</font>

258
00:14:28,810 --> 00:14:35,369
<font color="#CCCCCC">a matrix using on the string</font><font color="#E5E5E5"> you can</font>

259
00:14:32,260 --> 00:14:38,050
<font color="#E5E5E5">also use it using a reference string and</font>

260
00:14:35,370 --> 00:14:40,750
if you define<font color="#E5E5E5"> using a reference string</font>

261
00:14:38,050 --> 00:14:44,800
you can also use the thing on<font color="#E5E5E5"> the string</font>

262
00:14:40,750 --> 00:14:48,670
it's all fine<font color="#E5E5E5"> so also it has all the</font>

263
00:14:44,800 --> 00:14:51,790
features<font color="#E5E5E5"> puree with taught that is to</font>

264
00:14:48,670 --> 00:14:55,029
<font color="#CCCCCC">ensure the</font><font color="#E5E5E5"> lens at compile time so if</font>

265
00:14:51,790 --> 00:14:56,800
you<font color="#CCCCCC"> pass a string pass in the</font><font color="#E5E5E5"> Ray only</font>

266
00:14:55,029 --> 00:15:00,640
<font color="#E5E5E5">contest one string or</font><font color="#CCCCCC"> three stories</font><font color="#E5E5E5"> it</font>

267
00:14:56,800 --> 00:15:03,729
won't compile there are some<font color="#E5E5E5"> mother</font>

268
00:15:00,640 --> 00:15:08,079
<font color="#E5E5E5">kisses in</font><font color="#CCCCCC"> the Prometheus library for</font>

269
00:15:03,730 --> 00:15:11,230
<font color="#CCCCCC">example we utilize sand and sink</font><font color="#E5E5E5"> markers</font>

270
00:15:08,079 --> 00:15:15,219
seeing rust<font color="#E5E5E5"> what is that I think for</font>

271
00:15:11,230 --> 00:15:18,279
<font color="#E5E5E5">scent it is it means that</font><font color="#CCCCCC"> a type</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> be</font>

272
00:15:15,220 --> 00:15:21,339
sent<font color="#CCCCCC"> to other threads it is safe to</font><font color="#E5E5E5"> send</font>

273
00:15:18,279 --> 00:15:26,110
<font color="#CCCCCC">to other threads</font><font color="#E5E5E5"> and for</font><font color="#CCCCCC"> sync it means</font>

274
00:15:21,339 --> 00:15:29,730
that the type can be<font color="#E5E5E5"> shared for</font>

275
00:15:26,110 --> 00:15:32,140
different threads so for example

276
00:15:29,730 --> 00:15:34,990
considering thread the local variables

277
00:15:32,140 --> 00:15:37,240
<font color="#E5E5E5">it has not sent because if you hold a</font>

278
00:15:34,990 --> 00:15:39,760
<font color="#E5E5E5">value in</font><font color="#CCCCCC"> one's rat</font>

279
00:15:37,240 --> 00:15:42,730
you send it to another<font color="#CCCCCC"> threat</font><font color="#E5E5E5"> the value</font>

280
00:15:39,760 --> 00:15:45,520
no longer<font color="#E5E5E5"> holds so thread-local</font>

281
00:15:42,730 --> 00:15:50,050
variables<font color="#CCCCCC"> yes no sense</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we'll see an</font>

282
00:15:45,520 --> 00:15:53,829
NSYNC<font color="#E5E5E5"> example soon and also we utilize</font>

283
00:15:50,050 --> 00:15:56,319
must use<font color="#CCCCCC"> attribute must use means that</font>

284
00:15:53,830 --> 00:16:00,970
this type must<font color="#E5E5E5"> be used for example in</font>

285
00:15:56,320 --> 00:16:03,730
<font color="#E5E5E5">rust the result type must use if you</font>

286
00:16:00,970 --> 00:16:06,490
have a result<font color="#E5E5E5"> type and you don't put</font>

287
00:16:03,730 --> 00:16:08,589
anything a variable or don't call<font color="#E5E5E5"> its</font>

288
00:16:06,490 --> 00:16:12,279
method the compiler<font color="#E5E5E5"> will reject your</font>

289
00:16:08,589 --> 00:16:15,610
code<font color="#E5E5E5"> and for example in rust</font><font color="#CCCCCC"> promise we</font>

290
00:16:12,279 --> 00:16:20,050
provide the timer<font color="#E5E5E5"> that recalls elapsed a</font>

291
00:16:15,610 --> 00:16:22,240
time where it has jobs<font color="#E5E5E5"> so if you don't</font>

292
00:16:20,050 --> 00:16:25,510
<font color="#E5E5E5">use it it will be job immediately</font><font color="#CCCCCC"> and</font>

293
00:16:22,240 --> 00:16:28,510
this is not normally developer may

294
00:16:25,510 --> 00:16:33,730
expect<font color="#E5E5E5"> the</font><font color="#CCCCCC"> rapper's may expect this</font>

295
00:16:28,510 --> 00:16:39,430
<font color="#E5E5E5">timer</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> long for the</font><font color="#CCCCCC"> host cope</font><font color="#E5E5E5"> so it is</font>

296
00:16:33,730 --> 00:16:42,910
a must use timer now let's see how rust

297
00:16:39,430 --> 00:16:46,959
<font color="#E5E5E5">enables the promises library it would be</font>

298
00:16:42,910 --> 00:16:52,390
very fast<font color="#CCCCCC"> very</font><font color="#E5E5E5"> sorry I made a mistake it</font>

299
00:16:46,959 --> 00:16:57,699
should<font color="#E5E5E5"> be fast</font><font color="#CCCCCC"> so you see I just</font><font color="#E5E5E5"> come</font>

300
00:16:52,390 --> 00:17:01,480
<font color="#CCCCCC">here</font><font color="#E5E5E5"> so how how how why we care about</font>

301
00:16:57,700 --> 00:17:02,670
<font color="#E5E5E5">performance</font><font color="#CCCCCC"> because we record the matrix</font>

302
00:17:01,480 --> 00:17:05,860
<font color="#E5E5E5">very frequently</font>

303
00:17:02,670 --> 00:17:09,280
<font color="#E5E5E5">for example we record a lot of matrix</font>

304
00:17:05,859 --> 00:17:13,030
for<font color="#CCCCCC"> example during scanned keys</font><font color="#E5E5E5"> skip</font>

305
00:17:09,280 --> 00:17:16,300
<font color="#E5E5E5">keys and so on and we have hundreds of</font>

306
00:17:13,030 --> 00:17:19,660
matrix recording<font color="#E5E5E5"> every second and also</font>

307
00:17:16,300 --> 00:17:23,109
we will<font color="#CCCCCC"> cause</font><font color="#E5E5E5"> matrix for all operations</font>

308
00:17:19,660 --> 00:17:26,829
<font color="#CCCCCC">technique provides</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> put</font>

309
00:17:23,109 --> 00:17:29,320
<font color="#CCCCCC">scan and so on so the</font><font color="#E5E5E5"> overhead of</font><font color="#CCCCCC"> the</font>

310
00:17:26,829 --> 00:17:30,820
matrix<font color="#CCCCCC"> should be very minimal so that we</font>

311
00:17:29,320 --> 00:17:35,110
can know what<font color="#E5E5E5"> is happening without</font>

312
00:17:30,820 --> 00:17:38,139
<font color="#E5E5E5">sacrificing</font><font color="#CCCCCC"> the performance</font><font color="#E5E5E5"> now let's</font>

313
00:17:35,110 --> 00:17:41,469
study a case which<font color="#CCCCCC"> is local and sync</font>

314
00:17:38,140 --> 00:17:44,410
matrix normally our matrix years the

315
00:17:41,470 --> 00:17:47,350
<font color="#E5E5E5">global matrix implemented using atomic</font>

316
00:17:44,410 --> 00:17:49,480
variables as you can see here the<font color="#E5E5E5"> the</font>

317
00:17:47,350 --> 00:17:50,429
<font color="#E5E5E5">Vantage of using atomic variables is</font>

318
00:17:49,480 --> 00:17:53,040
that<font color="#E5E5E5"> it</font>

319
00:17:50,430 --> 00:17:58,050
be updated from everywhere for example

320
00:17:53,040 --> 00:18:00,629
multiple<font color="#CCCCCC"> stress but as you can</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> four</font>

321
00:17:58,050 --> 00:18:03,510
atomic variables we need<font color="#CCCCCC"> to use</font><font color="#E5E5E5"> atomic</font>

322
00:18:00,630 --> 00:18:06,030
<font color="#E5E5E5">operations to to modify</font><font color="#CCCCCC"> its value for</font>

323
00:18:03,510 --> 00:18:10,140
<font color="#E5E5E5">example</font><font color="#CCCCCC"> use fair shot</font><font color="#E5E5E5"> and it's</font><font color="#CCCCCC"> ten</font>

324
00:18:06,030 --> 00:18:14,370
nanoseconds on my laptop<font color="#CCCCCC"> and</font><font color="#E5E5E5"> to improve</font>

325
00:18:10,140 --> 00:18:16,830
that we can introduce<font color="#E5E5E5"> some local</font>

326
00:18:14,370 --> 00:18:20,729
<font color="#E5E5E5">variables so this is what's local</font>

327
00:18:16,830 --> 00:18:25,290
counter it<font color="#E5E5E5"> is so for local variables</font>

328
00:18:20,730 --> 00:18:27,990
they are<font color="#E5E5E5"> not</font><font color="#CCCCCC"> sync</font><font color="#E5E5E5"> and we can flush back</font>

329
00:18:25,290 --> 00:18:32,550
to the<font color="#E5E5E5"> global variable periodically so</font>

330
00:18:27,990 --> 00:18:35,910
you can both achieve you can<font color="#E5E5E5"> just</font>

331
00:18:32,550 --> 00:18:38,040
achieve the speed<font color="#E5E5E5"> while not meeting some</font>

332
00:18:35,910 --> 00:18:42,720
<font color="#E5E5E5">data race issues for</font><font color="#CCCCCC"> example you can</font>

333
00:18:38,040 --> 00:18:45,149
just<font color="#E5E5E5"> use X plus u : to increase the</font>

334
00:18:42,720 --> 00:18:47,970
local<font color="#E5E5E5"> culture and the counter will be</font>

335
00:18:45,150 --> 00:18:51,000
<font color="#E5E5E5">flushed to a global counter for</font><font color="#CCCCCC"> example</font>

336
00:18:47,970 --> 00:18:52,830
every<font color="#CCCCCC"> 2 seconds 3 seconds also they take</font>

337
00:18:51,000 --> 00:18:55,890
10<font color="#E5E5E5"> nanoseconds</font><font color="#CCCCCC"> but it's fine because</font>

338
00:18:52,830 --> 00:19:01,409
<font color="#CCCCCC">it's only</font><font color="#E5E5E5"> happens every two seconds one</font>

339
00:18:55,890 --> 00:19:05,820
time so in this way in this way<font color="#CCCCCC"> it is</font>

340
00:19:01,410 --> 00:19:10,080
<font color="#CCCCCC">very</font><font color="#E5E5E5"> fast</font><font color="#CCCCCC"> and for a logo counter it</font><font color="#E5E5E5"> is</font>

341
00:19:05,820 --> 00:19:13,860
not<font color="#CCCCCC"> sync</font><font color="#E5E5E5"> because you</font><font color="#CCCCCC"> know data race if</font>

342
00:19:10,080 --> 00:19:17,699
<font color="#E5E5E5">you create susurrus updates the same</font>

343
00:19:13,860 --> 00:19:20,280
counter you you won't get final content

344
00:19:17,700 --> 00:19:26,430
number<font color="#E5E5E5"> you expect it's a simple interest</font>

345
00:19:20,280 --> 00:19:29,190
and in rust it provides<font color="#CCCCCC"> NSYNC marker to</font>

346
00:19:26,430 --> 00:19:32,040
mark<font color="#E5E5E5"> that this is not shareable for</font>

347
00:19:29,190 --> 00:19:35,460
multiple stress so the local<font color="#E5E5E5"> country</font><font color="#CCCCCC"> is</font>

348
00:19:32,040 --> 00:19:38,550
<font color="#CCCCCC">in sync</font><font color="#E5E5E5"> and by using this technique we</font>

349
00:19:35,460 --> 00:19:40,980
can both achieve fast and safe<font color="#E5E5E5"> you can</font>

350
00:19:38,550 --> 00:19:45,270
use the<font color="#E5E5E5"> local country in a very fast way</font>

351
00:19:40,980 --> 00:19:48,390
and you will never abuse yet you are

352
00:19:45,270 --> 00:19:49,710
never<font color="#CCCCCC"> shared in multiple strands</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> are</font>

353
00:19:48,390 --> 00:19:55,320
now use<font color="#E5E5E5"> that in a wrong way</font>

354
00:19:49,710 --> 00:20:00,030
so it's both fast<font color="#E5E5E5"> and safe let's study</font>

355
00:19:55,320 --> 00:20:02,629
another case which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> caching metric</font>

356
00:20:00,030 --> 00:20:02,629
vectors

357
00:20:07,610 --> 00:20:12,350
also let<font color="#E5E5E5"> me introduce some backgrounds</font>

358
00:20:09,620 --> 00:20:14,870
<font color="#E5E5E5">as you may already know that</font><font color="#CCCCCC"> mitches</font>

359
00:20:12,350 --> 00:20:17,418
wears different<font color="#E5E5E5"> labels</font><font color="#CCCCCC"> they are content</font>

360
00:20:14,870 --> 00:20:20,779
independently for example here is a

361
00:20:17,419 --> 00:20:25,190
<font color="#CCCCCC">coast creates a counter</font><font color="#E5E5E5"> black with two</font>

362
00:20:20,779 --> 00:20:28,789
<font color="#E5E5E5">labels and then</font><font color="#CCCCCC"> I used label for example</font>

363
00:20:25,190 --> 00:20:32,210
<font color="#CCCCCC">record with post slash and recall using</font>

364
00:20:28,789 --> 00:20:35,980
get<font color="#E5E5E5"> slash and recalled using cat slash</font>

365
00:20:32,210 --> 00:20:42,409
<font color="#E5E5E5">API and finally record using post slash</font>

366
00:20:35,980 --> 00:20:46,070
so post slash happens<font color="#E5E5E5"> two times so when</font>

367
00:20:42,409 --> 00:20:50,149
we want to get his value it should<font color="#CCCCCC"> be</font>

368
00:20:46,070 --> 00:20:52,668
<font color="#E5E5E5">two and four cat slash API only occurred</font>

369
00:20:50,149 --> 00:20:56,570
one time so when we get it<font color="#E5E5E5"> it should be</font>

370
00:20:52,669 --> 00:20:59,179
<font color="#E5E5E5">only one</font><font color="#CCCCCC"> and for other kind</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> other</font>

371
00:20:56,570 --> 00:21:02,779
kind of label names that<font color="#CCCCCC"> should be zero</font>

372
00:20:59,179 --> 00:21:05,570
<font color="#E5E5E5">and of course gas slash is also one so</font>

373
00:21:02,779 --> 00:21:09,649
as you can see<font color="#E5E5E5"> also it is the same</font>

374
00:21:05,570 --> 00:21:13,970
<font color="#CCCCCC">matrix called the</font><font color="#E5E5E5"> contest name the name</font>

375
00:21:09,649 --> 00:21:16,189
<font color="#E5E5E5">but it has different label values so</font>

376
00:21:13,970 --> 00:21:21,350
actually they are counted in<font color="#E5E5E5"> the event</font>

377
00:21:16,190 --> 00:21:23,889
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the day so what happens inside the</font>

378
00:21:21,350 --> 00:21:27,529
function with label values it<font color="#E5E5E5"> actually</font>

379
00:21:23,889 --> 00:21:30,529
does these things first<font color="#CCCCCC"> you are hash</font>

380
00:21:27,529 --> 00:21:35,419
your labels<font color="#E5E5E5"> here to adjust</font><font color="#CCCCCC"> the hash your</font>

381
00:21:30,529 --> 00:21:39,259
post post slash and it will get you 64

382
00:21:35,419 --> 00:21:43,519
<font color="#E5E5E5">and then it will perform a hashmap</font>

383
00:21:39,259 --> 00:21:48,590
lookup<font color="#E5E5E5"> if you have already used this</font>

384
00:21:43,519 --> 00:21:51,799
label value the<font color="#CCCCCC"> hash map entry exists</font><font color="#E5E5E5"> so</font>

385
00:21:48,590 --> 00:21:55,100
it can<font color="#CCCCCC"> just return it</font><font color="#E5E5E5"> to you and if this</font>

386
00:21:51,799 --> 00:21:58,940
label value is fresh<font color="#E5E5E5"> you have not used</font>

387
00:21:55,100 --> 00:22:01,899
it<font color="#CCCCCC"> before it will</font><font color="#E5E5E5"> create a new entry so</font>

388
00:21:58,940 --> 00:22:06,710
it's just<font color="#E5E5E5"> atomic variable with 0</font>

389
00:22:01,899 --> 00:22:08,809
initialized<font color="#E5E5E5"> so as you can</font><font color="#CCCCCC"> see with label</font>

390
00:22:06,710 --> 00:22:12,619
values functioning actually yes well

391
00:22:08,809 --> 00:22:15,779
actually<font color="#CCCCCC"> there does a lot</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> things for</font>

392
00:22:12,619 --> 00:22:17,639
<font color="#CCCCCC">example hash lookup and also some</font>

393
00:22:15,779 --> 00:22:21,479
<font color="#E5E5E5">branchings and</font><font color="#CCCCCC"> final answer returns the</font>

394
00:22:17,639 --> 00:22:25,649
matrix and you may notice<font color="#CCCCCC"> that there is</font>

395
00:22:21,479 --> 00:22:29,729
a simple<font color="#CCCCCC"> optimize for example</font><font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of</font>

396
00:22:25,649 --> 00:22:33,478
doing<font color="#E5E5E5"> this things which is accessing a</font>

397
00:22:29,729 --> 00:22:37,109
counter<font color="#E5E5E5"> locking up a counter using gas</font>

398
00:22:33,479 --> 00:22:39,779
<font color="#CCCCCC">and stash API and then increment it for</font>

399
00:22:37,109 --> 00:22:42,689
the whole process we repeat<font color="#CCCCCC"> it for 100</font>

400
00:22:39,779 --> 00:22:45,599
<font color="#E5E5E5">times instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> doing this actually you</font>

401
00:22:42,690 --> 00:22:48,539
can look<font color="#E5E5E5"> up</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> only one time so you</font>

402
00:22:45,599 --> 00:22:52,729
look up one time<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> you increase</font>

403
00:22:48,539 --> 00:22:58,320
<font color="#E5E5E5">it for 100 times this is pretty fast</font>

404
00:22:52,729 --> 00:23:03,210
it's as fastest as the case<font color="#E5E5E5"> when you use</font>

405
00:22:58,320 --> 00:23:05,668
the counter without<font color="#E5E5E5"> any labels so Intel</font>

406
00:23:03,210 --> 00:23:07,589
can be there are many<font color="#CCCCCC"> slowest end</font><font color="#E5E5E5"> points</font>

407
00:23:05,669 --> 00:23:10,710
<font color="#CCCCCC">for example their transaction</font><font color="#E5E5E5"> cut</font>

408
00:23:07,589 --> 00:23:13,529
transaction basket<font color="#CCCCCC"> provides camille's</font>

409
00:23:10,710 --> 00:23:17,309
and so on there are<font color="#E5E5E5"> so many service</font>

410
00:23:13,529 --> 00:23:21,509
endpoints<font color="#E5E5E5"> and we can use this piece</font><font color="#CCCCCC"> of</font>

411
00:23:17,309 --> 00:23:24,450
code to<font color="#E5E5E5"> accelerate</font><font color="#CCCCCC"> just in this way we</font>

412
00:23:21,509 --> 00:23:27,269
<font color="#E5E5E5">can write it manually to cache these</font>

413
00:23:24,450 --> 00:23:29,369
labels<font color="#E5E5E5"> but you can see it is not dry at</font>

414
00:23:27,269 --> 00:23:32,099
all<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> here we have</font><font color="#E5E5E5"> only one</font>

415
00:23:29,369 --> 00:23:34,529
label called service but what about

416
00:23:32,099 --> 00:23:37,678
there are two labels<font color="#E5E5E5"> service and status</font>

417
00:23:34,529 --> 00:23:40,139
<font color="#E5E5E5">as you can see I should repeat for</font>

418
00:23:37,679 --> 00:23:43,679
example transaction<font color="#CCCCCC"> can</font><font color="#E5E5E5"> success</font>

419
00:23:40,139 --> 00:23:48,209
transaction<font color="#E5E5E5"> cut fail basket success</font>

420
00:23:43,679 --> 00:23:52,669
<font color="#E5E5E5">basket fail it's a lot of code even</font>

421
00:23:48,210 --> 00:23:56,429
<font color="#CCCCCC">exists my screen so how can we</font><font color="#E5E5E5"> solve it</font>

422
00:23:52,669 --> 00:23:59,239
<font color="#E5E5E5">we can solve it</font><font color="#CCCCCC"> using rust macros thanks</font>

423
00:23:56,429 --> 00:24:03,839
to the powerful rust

424
00:23:59,239 --> 00:24:06,749
yeah I'm pretty<font color="#CCCCCC"> fair rust</font><font color="#E5E5E5"> as you can see</font>

425
00:24:03,839 --> 00:24:09,899
in the code<font color="#E5E5E5"> this is the macro provided</font>

426
00:24:06,749 --> 00:24:14,159
by the rust<font color="#CCCCCC"> Prometheus library</font><font color="#E5E5E5"> as called</font>

427
00:24:09,899 --> 00:24:17,939
make static metric and when using this

428
00:24:14,159 --> 00:24:21,989
macro you can just provide your labels

429
00:24:17,940 --> 00:24:23,820
for example services give<font color="#CCCCCC"> it's these</font>

430
00:24:21,989 --> 00:24:27,089
services and<font color="#E5E5E5"> for status</font>

431
00:24:23,820 --> 00:24:29,480
<font color="#E5E5E5">I give them these status and it will</font>

432
00:24:27,089 --> 00:24:31,940
take<font color="#E5E5E5"> care</font><font color="#CCCCCC"> of you</font>

433
00:24:29,480 --> 00:24:35,510
you use it<font color="#E5E5E5"> it's pretty simple</font><font color="#CCCCCC"> you can</font>

434
00:24:31,940 --> 00:24:38,960
just<font color="#E5E5E5"> MDOT transaction</font><font color="#CCCCCC"> cats</font><font color="#E5E5E5"> dot success</font>

435
00:24:35,510 --> 00:24:43,730
you will get<font color="#E5E5E5"> condor and you can just</font>

436
00:24:38,960 --> 00:24:46,760
<font color="#E5E5E5">increase it</font><font color="#CCCCCC"> so how is this Merkel</font>

437
00:24:43,730 --> 00:24:51,260
<font color="#E5E5E5">actually implemented</font><font color="#CCCCCC"> it is pretty cool</font>

438
00:24:46,760 --> 00:24:55,040
<font color="#CCCCCC">right</font><font color="#E5E5E5"> but you may not</font><font color="#CCCCCC"> know how it is</font>

439
00:24:51,260 --> 00:25:01,160
written<font color="#E5E5E5"> so let me use</font><font color="#CCCCCC"> some simplified</font>

440
00:24:55,040 --> 00:25:07,010
example to illustrate<font color="#CCCCCC"> how this what</font>

441
00:25:01,160 --> 00:25:10,220
happened<font color="#E5E5E5"> to my laptop okay that's fine</font>

442
00:25:07,010 --> 00:25:13,640
I can use simplified<font color="#E5E5E5"> kisses to</font>

443
00:25:10,220 --> 00:25:18,290
illustrate how this static metric macro

444
00:25:13,640 --> 00:25:20,929
is implemented so let's take a look at

445
00:25:18,290 --> 00:25:25,250
some simple case for example<font color="#CCCCCC"> we want</font>

446
00:25:20,929 --> 00:25:27,140
some macros<font color="#E5E5E5"> that</font><font color="#CCCCCC"> expand</font><font color="#E5E5E5"> these kind of</font>

447
00:25:25,250 --> 00:25:31,130
things

448
00:25:27,140 --> 00:25:33,380
we just want after expanding<font color="#E5E5E5"> we can use</font>

449
00:25:31,130 --> 00:25:36,610
the italic<font color="#E5E5E5"> this for example here is a</font>

450
00:25:33,380 --> 00:25:39,950
condor<font color="#CCCCCC"> we can with label values</font><font color="#E5E5E5"> for and</font>

451
00:25:36,610 --> 00:25:43,040
<font color="#E5E5E5">this should be something</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> macro</font>

452
00:25:39,950 --> 00:25:46,820
expanded and after expanding<font color="#CCCCCC"> I should be</font>

453
00:25:43,040 --> 00:25:49,760
able to<font color="#E5E5E5"> just increase the macro and also</font>

454
00:25:46,820 --> 00:25:53,178
we can just get a macro or some other

455
00:25:49,760 --> 00:25:56,000
functions<font color="#E5E5E5"> so the implementation is</font>

456
00:25:53,179 --> 00:25:59,630
pretty<font color="#E5E5E5"> simple</font><font color="#CCCCCC"> I can just create a struct</font>

457
00:25:56,000 --> 00:26:02,809
called my static metric and then it has

458
00:25:59,630 --> 00:26:07,309
two condors<font color="#E5E5E5"> when you</font><font color="#CCCCCC"> new the struct</font><font color="#E5E5E5"> you</font>

459
00:26:02,809 --> 00:26:09,740
can just cash the matrix using concert

460
00:26:07,309 --> 00:26:15,350
<font color="#E5E5E5">or with labor values just like what we</font>

461
00:26:09,740 --> 00:26:20,000
<font color="#E5E5E5">did before</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> codes we write</font>

462
00:26:15,350 --> 00:26:23,059
and this is what we expect so our macro

463
00:26:20,000 --> 00:26:28,730
<font color="#E5E5E5">should expands the code in the left to</font>

464
00:26:23,059 --> 00:26:33,260
the code in the right but as you may

465
00:26:28,730 --> 00:26:35,570
know in rust<font color="#CCCCCC"> promises there are more</font>

466
00:26:33,260 --> 00:26:38,179
than one<font color="#E5E5E5"> labels available for example</font><font color="#CCCCCC"> we</font>

467
00:26:35,570 --> 00:26:39,679
can surprise real labels for the first

468
00:26:38,179 --> 00:26:41,660
<font color="#E5E5E5">ones there</font><font color="#CCCCCC"> are two very</font>

469
00:26:39,680 --> 00:26:43,760
for the second<font color="#CCCCCC"> label</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> are three</font>

470
00:26:41,660 --> 00:26:47,120
<font color="#E5E5E5">values and for the Sullivans there are</font>

471
00:26:43,760 --> 00:26:51,530
two values<font color="#E5E5E5"> so the order to implement</font>

472
00:26:47,120 --> 00:26:54,949
this kind<font color="#E5E5E5"> of metric</font><font color="#CCCCCC"> actually you need</font>

473
00:26:51,530 --> 00:26:57,950
some more<font color="#CCCCCC"> complicated codes</font><font color="#E5E5E5"> like Co</font>

474
00:26:54,950 --> 00:27:00,740
<font color="#E5E5E5">showing in the right for</font><font color="#CCCCCC"> example we want</font>

475
00:26:57,950 --> 00:27:04,610
to<font color="#CCCCCC"> access food</font><font color="#E5E5E5"> dot user a tour success</font>

476
00:27:00,740 --> 00:27:07,490
<font color="#E5E5E5">so actually your knees</font><font color="#CCCCCC"> 3 instructs</font><font color="#E5E5E5"> the</font>

477
00:27:04,610 --> 00:27:10,010
first judge contents when<font color="#CCCCCC"> path for the</font>

478
00:27:07,490 --> 00:27:11,990
inner<font color="#CCCCCC"> to and for the inner</font><font color="#E5E5E5"> to it had</font>

479
00:27:10,010 --> 00:27:15,080
<font color="#E5E5E5">contains three fields for the industry</font>

480
00:27:11,990 --> 00:27:20,120
and<font color="#CCCCCC"> for the industry that</font><font color="#E5E5E5"> contains the</font>

481
00:27:15,080 --> 00:27:24,040
actual counter in this way the<font color="#E5E5E5"> carrot of</font>

482
00:27:20,120 --> 00:27:27,590
macros won't work because<font color="#CCCCCC"> they're</font>

483
00:27:24,040 --> 00:27:30,649
<font color="#CCCCCC">identify concat here</font><font color="#E5E5E5"> and also you may</font>

484
00:27:27,590 --> 00:27:34,879
notice<font color="#E5E5E5"> that the logic the repeats logic</font>

485
00:27:30,650 --> 00:27:37,340
is<font color="#E5E5E5"> not</font><font color="#CCCCCC"> the same</font><font color="#E5E5E5"> for every labels with a</font>

486
00:27:34,880 --> 00:27:40,490
<font color="#E5E5E5">motor for the first</font><font color="#CCCCCC"> label and for the</font>

487
00:27:37,340 --> 00:27:42,830
second label<font color="#E5E5E5"> a to expand to</font><font color="#CCCCCC"> the structu</font>

488
00:27:40,490 --> 00:27:46,790
<font color="#CCCCCC">it creates</font><font color="#E5E5E5"> but for the sole label or</font>

489
00:27:42,830 --> 00:27:50,990
let's say the final label it will expand

490
00:27:46,790 --> 00:27:53,420
a call to<font color="#E5E5E5"> Sun Condor so the character of</font>

491
00:27:50,990 --> 00:27:58,490
macros won't work<font color="#E5E5E5"> then let's use</font>

492
00:27:53,420 --> 00:28:02,030
<font color="#E5E5E5">procedure macros so</font><font color="#CCCCCC"> what is procedure</font>

493
00:27:58,490 --> 00:28:05,330
macros procedure macros allow creating

494
00:28:02,030 --> 00:28:08,320
<font color="#CCCCCC">synthesis Tanjung as execution</font><font color="#E5E5E5"> of a</font>

495
00:28:05,330 --> 00:28:11,629
function for example<font color="#E5E5E5"> you can create</font>

496
00:28:08,320 --> 00:28:14,470
function like macros using procedure

497
00:28:11,630 --> 00:28:17,360
macros and you can create<font color="#CCCCCC"> derived macros</font>

498
00:28:14,470 --> 00:28:20,870
<font color="#E5E5E5">for example here is</font><font color="#CCCCCC"> the custom mode</font>

499
00:28:17,360 --> 00:28:25,000
<font color="#CCCCCC">arrive</font><font color="#E5E5E5"> graded by me and you can derive</font>

500
00:28:20,870 --> 00:28:29,689
this this macro for your own type and

501
00:28:25,000 --> 00:28:32,960
also<font color="#CCCCCC"> you can use attribute macros so to</font>

502
00:28:29,690 --> 00:28:35,870
use the procedure macro first you need

503
00:28:32,960 --> 00:28:38,510
to<font color="#E5E5E5"> declare an entry in</font><font color="#CCCCCC"> your cargo</font>

504
00:28:35,870 --> 00:28:41,479
manifest file that you'll stay inside

505
00:28:38,510 --> 00:28:43,040
the lab entry<font color="#E5E5E5"> so it's just a procedure</font>

506
00:28:41,480 --> 00:28:45,950
macro equals to<font color="#E5E5E5"> qu</font>

507
00:28:43,040 --> 00:28:48,290
<font color="#E5E5E5">just indicates that your crate here's</font>

508
00:28:45,950 --> 00:28:51,490
the procedure macro and<font color="#E5E5E5"> the compiler</font>

509
00:28:48,290 --> 00:28:51,490
will recognize it

510
00:28:51,700 --> 00:28:59,409
then you need<font color="#CCCCCC"> to write a function</font><font color="#E5E5E5"> it's</font>

511
00:28:55,510 --> 00:29:02,710
just<font color="#CCCCCC"> as saps and parameter it switched</font>

512
00:28:59,409 --> 00:29:05,309
<font color="#CCCCCC">half years token stream and produce a</font>

513
00:29:02,710 --> 00:29:07,750
token stream<font color="#E5E5E5"> so it's just a transform</font>

514
00:29:05,309 --> 00:29:09,789
functioning as studying<font color="#E5E5E5"> a token string</font>

515
00:29:07,750 --> 00:29:13,600
and transfer<font color="#E5E5E5"> heads and producing the new</font>

516
00:29:09,789 --> 00:29:15,519
token<font color="#CCCCCC"> string for example</font><font color="#E5E5E5"> here I</font><font color="#CCCCCC"> I didn't</font>

517
00:29:13,600 --> 00:29:19,240
write<font color="#CCCCCC"> body for the function I just</font>

518
00:29:15,519 --> 00:29:21,730
<font color="#E5E5E5">prints</font><font color="#CCCCCC"> the tokens tree in debug mode so</font>

519
00:29:19,240 --> 00:29:24,820
<font color="#E5E5E5">you will see what token string it is</font><font color="#CCCCCC"> and</font>

520
00:29:21,730 --> 00:29:27,460
remember<font color="#CCCCCC"> that for</font><font color="#E5E5E5"> procedural macros you</font>

521
00:29:24,820 --> 00:29:29,918
need to add<font color="#CCCCCC"> dist attributes procedure</font>

522
00:29:27,460 --> 00:29:33,190
American<font color="#E5E5E5"> weights so that your function</font>

523
00:29:29,919 --> 00:29:37,960
<font color="#E5E5E5">will be caught when the macro is invoke</font>

524
00:29:33,190 --> 00:29:43,090
it so let's see what will<font color="#CCCCCC"> happen in the</font>

525
00:29:37,960 --> 00:29:46,750
left side<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is what our macro users</font>

526
00:29:43,090 --> 00:29:50,559
who are use it's just<font color="#CCCCCC"> right make matrix</font>

527
00:29:46,750 --> 00:29:53,169
and pub struct<font color="#E5E5E5"> my static metric foo bar</font>

528
00:29:50,559 --> 00:29:56,289
<font color="#E5E5E5">you may notice that the syntax</font><font color="#CCCCCC"> here is</font>

529
00:29:53,169 --> 00:30:00,100
very similar<font color="#CCCCCC"> to the rust</font><font color="#E5E5E5"> structure</font><font color="#CCCCCC"> but</font>

530
00:29:56,289 --> 00:30:03,010
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> it's different because for</font><font color="#CCCCCC"> foo</font>

531
00:30:00,100 --> 00:30:07,029
and bar<font color="#E5E5E5"> there are only names and no</font>

532
00:30:03,010 --> 00:30:09,730
types so actually it is invalid syntax

533
00:30:07,029 --> 00:30:13,179
in rust<font color="#E5E5E5"> it's just a similar to rust</font>

534
00:30:09,730 --> 00:30:16,960
structure for the compiler<font color="#E5E5E5"> output you</font>

535
00:30:13,179 --> 00:30:20,470
can see for this kind of code<font color="#E5E5E5"> that's</font>

536
00:30:16,960 --> 00:30:23,350
<font color="#E5E5E5">what generates these token streams the</font>

537
00:30:20,470 --> 00:30:27,059
<font color="#CCCCCC">first years identify a pub the second</font>

538
00:30:23,350 --> 00:30:31,120
<font color="#E5E5E5">years identify a struct and the soleus</font>

539
00:30:27,059 --> 00:30:34,320
<font color="#E5E5E5">identifier my static metric and there</font>

540
00:30:31,120 --> 00:30:37,989
<font color="#CCCCCC">yes</font><font color="#E5E5E5"> yeah there's the brace group and</font>

541
00:30:34,320 --> 00:30:41,110
then here comes inside<font color="#E5E5E5"> the group</font><font color="#CCCCCC"> there</font>

542
00:30:37,990 --> 00:30:44,200
<font color="#CCCCCC">is and identify a fool and coma</font>

543
00:30:41,110 --> 00:30:48,908
<font color="#E5E5E5">functions</font><font color="#CCCCCC"> they added firepower and also</font>

544
00:30:44,200 --> 00:30:51,909
<font color="#E5E5E5">coma</font><font color="#CCCCCC"> Punk's so this is what your</font>

545
00:30:48,909 --> 00:30:54,519
procedural macro function<font color="#E5E5E5"> will get now</font>

546
00:30:51,909 --> 00:30:57,519
<font color="#E5E5E5">you are rights a function to transform</font>

547
00:30:54,519 --> 00:31:00,850
these<font color="#E5E5E5"> token strings into the tox jeans</font>

548
00:30:57,519 --> 00:31:05,560
you want<font color="#E5E5E5"> so in order to do this let's</font>

549
00:31:00,850 --> 00:31:08,770
first posit normally we use a

550
00:31:05,560 --> 00:31:12,010
<font color="#E5E5E5">cuts</font><font color="#CCCCCC"> into pass these tokens for</font><font color="#E5E5E5"> example</font>

551
00:31:08,770 --> 00:31:14,610
as<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can see in the right this is the</font>

552
00:31:12,010 --> 00:31:18,970
same puzzle implemented by ourselves

553
00:31:14,610 --> 00:31:24,010
<font color="#CCCCCC">it's just called metric definition its</font>

554
00:31:18,970 --> 00:31:26,410
contents<font color="#E5E5E5"> visibility that is the pub if</font>

555
00:31:24,010 --> 00:31:28,720
you don't write pub its availability is

556
00:31:26,410 --> 00:31:32,260
different<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> needs information</font>

557
00:31:28,720 --> 00:31:36,160
<font color="#E5E5E5">about the name you provided and also</font><font color="#CCCCCC"> a</font>

558
00:31:32,260 --> 00:31:38,890
list of identifiers it's just a list of

559
00:31:36,160 --> 00:31:42,300
<font color="#CCCCCC">labour</font><font color="#E5E5E5"> values you are provided so here</font>

560
00:31:38,890 --> 00:31:45,370
it should be foo and bar so this<font color="#E5E5E5"> is the</font>

561
00:31:42,300 --> 00:31:47,590
<font color="#E5E5E5">structure that we want</font><font color="#CCCCCC"> to pass from</font>

562
00:31:45,370 --> 00:31:51,570
these token strings and then we all

563
00:31:47,590 --> 00:31:55,290
right the passer<font color="#E5E5E5"> using the Singh</font>

564
00:31:51,570 --> 00:31:58,540
facilities for example<font color="#CCCCCC"> the</font><font color="#E5E5E5"> first we</font><font color="#CCCCCC"> just</font>

565
00:31:55,290 --> 00:32:01,570
input dot<font color="#E5E5E5"> pass we are passing</font><font color="#CCCCCC"> with</font>

566
00:31:58,540 --> 00:32:04,960
visibility<font color="#E5E5E5"> so we feel this rehabilitate</font>

567
00:32:01,570 --> 00:32:09,040
with visibility variable and then<font color="#E5E5E5"> we</font>

568
00:32:04,960 --> 00:32:12,970
will find<font color="#CCCCCC"> keyword called struct</font><font color="#E5E5E5"> so we</font>

569
00:32:09,040 --> 00:32:16,330
also pass a token construct you may ask

570
00:32:12,970 --> 00:32:20,410
what<font color="#E5E5E5"> will happen if user doesn't provide</font>

571
00:32:16,330 --> 00:32:23,740
some stress for example<font color="#E5E5E5"> Gmail writes pub</font>

572
00:32:20,410 --> 00:32:26,590
<font color="#E5E5E5">you</font><font color="#CCCCCC"> nam in this way there is question</font>

573
00:32:23,740 --> 00:32:30,370
mark<font color="#E5E5E5"> here and there are arrows so you</font>

574
00:32:26,590 --> 00:32:34,750
can just get what<font color="#E5E5E5"> you expected and next</font>

575
00:32:30,370 --> 00:32:38,500
I expect here to be an M so I also pass

576
00:32:34,750 --> 00:32:44,050
an identifier here<font color="#E5E5E5"> finally here</font><font color="#CCCCCC"> is the</font>

577
00:32:38,500 --> 00:32:47,980
brace so I use the braced<font color="#E5E5E5"> macro provided</font>

578
00:32:44,050 --> 00:32:50,200
by<font color="#CCCCCC"> seeing it will pass</font><font color="#E5E5E5"> the brace and the</font>

579
00:32:47,980 --> 00:32:54,520
content inside brace as you can see it's

580
00:32:50,200 --> 00:32:57,730
just a list of identifiers<font color="#CCCCCC"> come catch it</font>

581
00:32:54,520 --> 00:33:00,280
by commas<font color="#E5E5E5"> so I can also use some</font>

582
00:32:57,730 --> 00:33:05,350
facilities provided by<font color="#E5E5E5"> sim</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> just</font>

583
00:33:00,280 --> 00:33:09,389
passed terminated and token<font color="#CCCCCC"> use comma</font>

584
00:33:05,350 --> 00:33:16,030
so it's<font color="#CCCCCC"> comic-con crotchets and and</font>

585
00:33:09,390 --> 00:33:19,850
token inside is an identifier<font color="#E5E5E5"> so finally</font>

586
00:33:16,030 --> 00:33:23,240
our pass use<font color="#E5E5E5"> tokens into some vectors</font>

587
00:33:19,850 --> 00:33:28,000
creates iterator and<font color="#E5E5E5"> collected into a</font>

588
00:33:23,240 --> 00:33:33,200
vector<font color="#E5E5E5"> let's see what it will happen for</font>

589
00:33:28,000 --> 00:33:35,750
<font color="#CCCCCC">example</font><font color="#E5E5E5"> just I just</font><font color="#CCCCCC"> wrote a puzzle and I</font>

590
00:33:33,200 --> 00:33:38,150
will use<font color="#E5E5E5"> it in this way</font><font color="#CCCCCC"> you can refer to</font>

591
00:33:35,750 --> 00:33:40,430
the<font color="#E5E5E5"> scene documentation and you</font><font color="#CCCCCC"> are</font>

592
00:33:38,150 --> 00:33:44,270
<font color="#E5E5E5">guess you are learn more here I just</font>

593
00:33:40,430 --> 00:33:46,940
demonstrate a simple<font color="#CCCCCC"> use case so in this</font>

594
00:33:44,270 --> 00:33:49,690
way it<font color="#E5E5E5"> were passed input token stream</font>

595
00:33:46,940 --> 00:33:53,450
using<font color="#E5E5E5"> your matrix definition</font><font color="#CCCCCC"> puzzle</font><font color="#E5E5E5"> and</font>

596
00:33:49,690 --> 00:33:56,750
<font color="#E5E5E5">generate the structure you want so here</font>

597
00:33:53,450 --> 00:33:59,600
is the<font color="#E5E5E5"> structure we passed from this</font>

598
00:33:56,750 --> 00:34:03,560
input<font color="#E5E5E5"> as you can see the visibility is</font>

599
00:33:59,600 --> 00:34:07,879
<font color="#CCCCCC">pub and the name is our my static metric</font>

600
00:34:03,560 --> 00:34:12,259
<font color="#E5E5E5">and there are two values for</font><font color="#CCCCCC"> n bar so</font><font color="#E5E5E5"> R</font>

601
00:34:07,880 --> 00:34:15,679
<font color="#E5E5E5">and</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> so fine</font><font color="#E5E5E5"> so for the final step</font>

602
00:34:12,260 --> 00:34:19,070
<font color="#E5E5E5">now we already</font><font color="#CCCCCC"> know what user has</font>

603
00:34:15,679 --> 00:34:21,679
supplied and we want to reassemble<font color="#E5E5E5"> the</font>

604
00:34:19,070 --> 00:34:24,620
code resemble the token string to

605
00:34:21,679 --> 00:34:28,700
another<font color="#E5E5E5"> token string so here we can</font><font color="#CCCCCC"> use</font>

606
00:34:24,620 --> 00:34:33,290
the<font color="#CCCCCC"> grid called code for example I want</font>

607
00:34:28,699 --> 00:34:36,439
to reassemble the<font color="#E5E5E5"> code for the yellow</font>

608
00:34:33,290 --> 00:34:42,290
pad<font color="#E5E5E5"> I want to resemble it so I will</font>

609
00:34:36,440 --> 00:34:45,350
write the code in the right and<font color="#E5E5E5"> the most</font>

610
00:34:42,290 --> 00:34:49,820
important thing is<font color="#E5E5E5"> this piece marketing</font>

611
00:34:45,350 --> 00:34:55,880
yellow<font color="#CCCCCC"> as you can see I just</font><font color="#E5E5E5"> write code</font>

612
00:34:49,820 --> 00:35:01,190
<font color="#E5E5E5">and visibility struct name and values</font>

613
00:34:55,880 --> 00:35:04,250
counter since here is a<font color="#E5E5E5"> shop and some</font>

614
00:35:01,190 --> 00:35:08,500
practice so it's just a repeat list<font color="#E5E5E5"> so</font>

615
00:35:04,250 --> 00:35:12,500
actually<font color="#CCCCCC"> to repeat every values and</font>

616
00:35:08,500 --> 00:35:17,330
<font color="#CCCCCC">repeatedly produce these tokens</font><font color="#E5E5E5"> this is</font>

617
00:35:12,500 --> 00:35:20,840
pretty<font color="#CCCCCC"> you can write anything very</font><font color="#E5E5E5"> in a</font>

618
00:35:17,330 --> 00:35:23,900
way that's much like source<font color="#E5E5E5"> codes as you</font>

619
00:35:20,840 --> 00:35:26,710
can see finally our output<font color="#CCCCCC"> this expanded</font>

620
00:35:23,900 --> 00:35:29,540
<font color="#E5E5E5">the token string</font><font color="#CCCCCC"> and it's</font><font color="#E5E5E5"> just like this</font>

621
00:35:26,710 --> 00:35:31,250
<font color="#CCCCCC">although there are different space</font><font color="#E5E5E5"> for</font>

622
00:35:29,540 --> 00:35:31,700
example<font color="#CCCCCC"> here there are new lines and</font>

623
00:35:31,250 --> 00:35:36,680
<font color="#E5E5E5">there</font><font color="#CCCCCC"> are</font>

624
00:35:31,700 --> 00:35:39,460
<font color="#E5E5E5">Newlands but you know it's fine and if</font>

625
00:35:36,680 --> 00:35:45,759
we omit<font color="#E5E5E5"> this space you can see they are</font>

626
00:35:39,460 --> 00:35:49,420
exactly<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> what we want now let's</font>

627
00:35:45,760 --> 00:35:54,220
let's generate the rest part<font color="#E5E5E5"> it's</font>

628
00:35:49,420 --> 00:35:56,650
<font color="#CCCCCC">implement my</font><font color="#E5E5E5"> aesthetic metric</font><font color="#CCCCCC"> I want to</font>

629
00:35:54,220 --> 00:36:00,980
transform token streams<font color="#E5E5E5"> into the</font>

630
00:35:56,650 --> 00:36:05,570
<font color="#CCCCCC">dispatch</font><font color="#E5E5E5"> and so I naively write code</font>

631
00:36:00,980 --> 00:36:08,450
like<font color="#CCCCCC"> this</font><font color="#E5E5E5"> it's it's just for example the</font>

632
00:36:05,570 --> 00:36:11,990
same repeat list<font color="#E5E5E5"> and inside the list</font>

633
00:36:08,450 --> 00:36:16,640
<font color="#E5E5E5">there is a double quote and and shop</font>

634
00:36:11,990 --> 00:36:18,740
values and double<font color="#E5E5E5"> quotes and let's see</font>

635
00:36:16,640 --> 00:36:20,810
what<font color="#E5E5E5"> you are happy so in the</font><font color="#CCCCCC"> compiler</font>

636
00:36:18,740 --> 00:36:24,589
output<font color="#CCCCCC"> you will find</font><font color="#E5E5E5"> something you</font><font color="#CCCCCC"> are</font>

637
00:36:20,810 --> 00:36:27,730
not expected your friends that's with

638
00:36:24,589 --> 00:36:30,650
label values<font color="#CCCCCC"> its</font><font color="#E5E5E5"> parameter as a string</font>

639
00:36:27,730 --> 00:36:33,290
<font color="#E5E5E5">so</font><font color="#CCCCCC"> you are actually</font><font color="#E5E5E5"> providing this</font>

640
00:36:30,650 --> 00:36:37,069
history right<font color="#E5E5E5"> it's just to produce the</font>

641
00:36:33,290 --> 00:36:40,270
stream for<font color="#E5E5E5"> you so what's the what's</font>

642
00:36:37,069 --> 00:36:44,869
what's<font color="#CCCCCC"> wrong with</font><font color="#E5E5E5"> it yes just</font><font color="#CCCCCC"> because</font>

643
00:36:40,270 --> 00:36:49,069
your values yes and<font color="#CCCCCC"> identifiers but here</font>

644
00:36:44,869 --> 00:36:52,010
you want to<font color="#E5E5E5"> produce a string so you</font><font color="#CCCCCC"> feed</font>

645
00:36:49,069 --> 00:36:55,099
you need to transform<font color="#E5E5E5"> your identifier to</font>

646
00:36:52,010 --> 00:36:57,560
<font color="#CCCCCC">the string</font><font color="#E5E5E5"> then it will work so</font><font color="#CCCCCC"> let's do</font>

647
00:36:55,099 --> 00:37:02,510
it<font color="#E5E5E5"> let's transform the identifier</font><font color="#CCCCCC"> to the</font>

648
00:36:57,560 --> 00:37:05,299
string<font color="#E5E5E5"> charioteers just a simple map as</font>

649
00:37:02,510 --> 00:37:10,010
you<font color="#CCCCCC"> can see desert of values</font><font color="#E5E5E5"> so it's a</font>

650
00:37:05,300 --> 00:37:13,250
racer tour map then<font color="#CCCCCC"> so i will get every</font>

651
00:37:10,010 --> 00:37:17,000
identifier now I will create<font color="#CCCCCC"> string</font>

652
00:37:13,250 --> 00:37:19,069
<font color="#CCCCCC">literal using data</font><font color="#E5E5E5"> string</font><font color="#CCCCCC"> new in this</font>

653
00:37:17,000 --> 00:37:21,800
string literal<font color="#E5E5E5"> I just copy the contents</font>

654
00:37:19,069 --> 00:37:24,170
<font color="#E5E5E5">without modifying it and actually you</font>

655
00:37:21,800 --> 00:37:29,510
can modify the content for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> you</font>

656
00:37:24,170 --> 00:37:33,349
can concatenate source of fix everything

657
00:37:29,510 --> 00:37:35,630
whatever you want<font color="#E5E5E5"> it's just a fine so</font>

658
00:37:33,349 --> 00:37:38,089
you<font color="#E5E5E5"> can freely manipulate this</font>

659
00:37:35,630 --> 00:37:40,599
identifier and the<font color="#E5E5E5"> Creator string and</font>

660
00:37:38,089 --> 00:37:44,310
finally<font color="#CCCCCC"> we will use</font><font color="#E5E5E5"> this sharp value</font>

661
00:37:40,599 --> 00:37:46,680
stream instead of<font color="#CCCCCC"> schaap values</font>

662
00:37:44,310 --> 00:37:49,860
be here<font color="#CCCCCC"> so this chef</font><font color="#E5E5E5"> fellows</font><font color="#CCCCCC"> dreams he</font>

663
00:37:46,680 --> 00:37:53,870
<font color="#CCCCCC">has a</font><font color="#E5E5E5"> string and it is not an identifier</font>

664
00:37:49,860 --> 00:37:58,500
<font color="#E5E5E5">so now it will work this is pretty</font>

665
00:37:53,870 --> 00:38:01,049
exactly the same what we want we want we

666
00:37:58,500 --> 00:38:03,900
<font color="#CCCCCC">want a macro to generate this piece of</font>

667
00:38:01,050 --> 00:38:07,020
code<font color="#E5E5E5"> and the macro word generates these</font>

668
00:38:03,900 --> 00:38:11,700
<font color="#E5E5E5">pieces of token strings so it's exactly</font>

669
00:38:07,020 --> 00:38:14,009
the same what we want<font color="#CCCCCC"> for</font><font color="#E5E5E5"> more</font>

670
00:38:11,700 --> 00:38:18,600
<font color="#CCCCCC">informations you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> check out these two</font>

671
00:38:14,010 --> 00:38:21,050
links<font color="#CCCCCC"> for 20 macro</font><font color="#E5E5E5"> you can check out</font>

672
00:38:18,600 --> 00:38:24,089
this<font color="#E5E5E5"> gist and for the</font><font color="#CCCCCC"> floor</font>

673
00:38:21,050 --> 00:38:26,760
implementation using<font color="#CCCCCC"> russ promises you</font>

674
00:38:24,090 --> 00:38:30,900
can check out this link<font color="#E5E5E5"> it's pretty</font>

675
00:38:26,760 --> 00:38:33,300
complex<font color="#CCCCCC"> implementation</font><font color="#E5E5E5"> because the the</font>

676
00:38:30,900 --> 00:38:36,000
macro provided in<font color="#CCCCCC"> rustboro</font><font color="#E5E5E5"> mr.</font><font color="#CCCCCC"> Xie</font>

677
00:38:33,300 --> 00:38:39,510
provides many functionalities<font color="#CCCCCC"> it has</font>

678
00:38:36,000 --> 00:38:42,270
very complex syntax and data and the

679
00:38:39,510 --> 00:38:44,190
syntax is<font color="#CCCCCC"> very powerful</font><font color="#E5E5E5"> so to support</font>

680
00:38:42,270 --> 00:38:46,890
all these kind of<font color="#CCCCCC"> things</font><font color="#E5E5E5"> the macro</font>

681
00:38:44,190 --> 00:38:49,830
itself is very<font color="#E5E5E5"> long but as you can see</font>

682
00:38:46,890 --> 00:38:52,650
<font color="#CCCCCC">the the core idea is similar you just</font>

683
00:38:49,830 --> 00:38:55,049
first pass it and manipulate it<font color="#E5E5E5"> and</font>

684
00:38:52,650 --> 00:39:00,990
finally<font color="#E5E5E5"> you are generates a new token</font>

685
00:38:55,050 --> 00:39:04,260
<font color="#E5E5E5">string so finally let</font><font color="#CCCCCC"> me talk about</font><font color="#E5E5E5"> some</font>

686
00:39:00,990 --> 00:39:09,930
future<font color="#CCCCCC"> plans of this</font><font color="#E5E5E5"> library</font><font color="#CCCCCC"> currently</font>

687
00:39:04,260 --> 00:39:10,380
<font color="#CCCCCC">this library is not 1.0</font><font color="#E5E5E5"> it's just</font><font color="#CCCCCC"> 0.5 or</font>

688
00:39:09,930 --> 00:39:14,250
<font color="#CCCCCC">six</font>

689
00:39:10,380 --> 00:39:18,620
<font color="#CCCCCC">I</font><font color="#E5E5E5"> don't remember but anyway it's not 1.0</font>

690
00:39:14,250 --> 00:39:23,580
<font color="#E5E5E5">but</font><font color="#CCCCCC"> we are planning for the 1.0 release</font>

691
00:39:18,620 --> 00:39:26,370
<font color="#CCCCCC">we will tab it to the wrath 2018 Edition</font>

692
00:39:23,580 --> 00:39:29,400
<font color="#E5E5E5">and also we were king</font><font color="#CCCCCC"> updates</font><font color="#E5E5E5"> API</font>

693
00:39:26,370 --> 00:39:32,060
because disk radius<font color="#CCCCCC"> is written several</font>

694
00:39:29,400 --> 00:39:35,970
years ago and<font color="#E5E5E5"> and during</font><font color="#CCCCCC"> these years</font>

695
00:39:32,060 --> 00:39:37,980
<font color="#E5E5E5">some functions of</font><font color="#CCCCCC"> promises has changed</font>

696
00:39:35,970 --> 00:39:40,319
for example<font color="#E5E5E5"> there is no product buff</font>

697
00:39:37,980 --> 00:39:44,760
anymore so we also removed up for the

698
00:39:40,320 --> 00:39:49,050
buffer support we will provide<font color="#CCCCCC"> same type</font>

699
00:39:44,760 --> 00:39:54,150
<font color="#CCCCCC">safe</font><font color="#E5E5E5"> labels so it's actually a prototype</font>

700
00:39:49,050 --> 00:39:57,150
<font color="#E5E5E5">but we are provided</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> we will provide</font>

701
00:39:54,150 --> 00:39:57,900
<font color="#CCCCCC">some smaller library</font><font color="#E5E5E5"> size then maybe we</font>

702
00:39:57,150 --> 00:40:02,579
<font color="#CCCCCC">will support</font>

703
00:39:57,900 --> 00:40:05,249
<font color="#E5E5E5">no</font><font color="#CCCCCC"> standards library environment</font><font color="#E5E5E5"> and you</font>

704
00:40:02,579 --> 00:40:09,930
are<font color="#CCCCCC"> you you can use it in</font><font color="#E5E5E5"> webassembly or</font>

705
00:40:05,249 --> 00:40:14,368
some<font color="#CCCCCC"> nvidia service</font><font color="#E5E5E5"> it's fine and for</font>

706
00:40:09,930 --> 00:40:16,999
the<font color="#E5E5E5"> future we will also support a metric</font>

707
00:40:14,369 --> 00:40:19,529
<font color="#E5E5E5">and called summary and also we</font>

708
00:40:16,999 --> 00:40:22,979
continuously want to make the midship

709
00:40:19,529 --> 00:40:26,190
very fast<font color="#CCCCCC"> so we have we</font><font color="#E5E5E5"> have already got</font>

710
00:40:22,979 --> 00:40:28,379
an idea<font color="#CCCCCC"> its core local</font><font color="#E5E5E5"> metrics we are</font>

711
00:40:26,190 --> 00:40:31,259
still exploring how we can implement<font color="#E5E5E5"> it</font>

712
00:40:28,380 --> 00:40:34,219
by using qooco metrics why expatriates

713
00:40:31,259 --> 00:40:37,109
who have some greater performance<font color="#E5E5E5"> and</font>

714
00:40:34,219 --> 00:40:39,710
also<font color="#CCCCCC"> we</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> provide</font><font color="#E5E5E5"> easier to use</font>

715
00:40:37,109 --> 00:40:43,950
<font color="#CCCCCC">Pauline</font><font color="#E5E5E5"> handler and more to come</font>

716
00:40:39,710 --> 00:40:46,339
contributions are appreciated thank you

717
00:40:43,950 --> 00:40:46,339
<font color="#E5E5E5">very much</font>

718
00:40:46,900 --> 00:40:57,339
[Applause]

719
00:40:54,369 --> 00:40:59,619
you mask some questions but you know I'm

720
00:40:57,339 --> 00:41:02,589
<font color="#E5E5E5">not a native</font><font color="#CCCCCC"> English speaker and I may</font>

721
00:40:59,619 --> 00:41:05,770
not understand<font color="#E5E5E5"> your accent quite well so</font>

722
00:41:02,589 --> 00:41:08,109
please<font color="#E5E5E5"> speak</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> slowly and so that I</font>

723
00:41:05,770 --> 00:41:10,660
can understand it<font color="#E5E5E5"> I'm very sorry for</font>

724
00:41:08,109 --> 00:41:12,970
<font color="#E5E5E5">that and I think</font><font color="#CCCCCC"> maybe there are two</font>

725
00:41:10,660 --> 00:41:14,830
questions<font color="#CCCCCC"> if there</font><font color="#E5E5E5"> are more</font><font color="#CCCCCC"> questions</font>

726
00:41:12,970 --> 00:41:33,098
you may<font color="#CCCCCC"> ask</font><font color="#E5E5E5"> me afterwards</font>

727
00:41:14,830 --> 00:41:37,089
<font color="#CCCCCC">oh</font><font color="#E5E5E5"> so the types of</font><font color="#CCCCCC"> labels is just okay</font>

728
00:41:33,099 --> 00:41:42,570
he<font color="#E5E5E5"> asked</font><font color="#CCCCCC"> what types of labels</font><font color="#E5E5E5"> is really</font>

729
00:41:37,089 --> 00:41:47,710
<font color="#E5E5E5">really yes so let me let</font><font color="#CCCCCC"> me turn back</font>

730
00:41:42,570 --> 00:41:50,680
<font color="#E5E5E5">here here it is the types of labels the</font>

731
00:41:47,710 --> 00:41:53,230
types of means<font color="#E5E5E5"> that the label numbers</font>

732
00:41:50,680 --> 00:41:56,980
you provide<font color="#E5E5E5"> when you define them matrix</font>

733
00:41:53,230 --> 00:42:00,160
will be the same<font color="#E5E5E5"> when you use it it will</font>

734
00:41:56,980 --> 00:42:03,310
be<font color="#E5E5E5"> checked by</font><font color="#CCCCCC"> the compiler instead of at</font>

735
00:42:00,160 --> 00:42:05,799
<font color="#CCCCCC">runtime</font><font color="#E5E5E5"> so it's type safe when it is</font>

736
00:42:03,310 --> 00:42:08,049
chatting the<font color="#E5E5E5"> compile time and you don't</font>

737
00:42:05,800 --> 00:42:10,150
<font color="#E5E5E5">need to worry about for</font><font color="#CCCCCC"> example not</font>

738
00:42:08,050 --> 00:42:12,910
being<font color="#CCCCCC"> covering tests or something else</font>

739
00:42:10,150 --> 00:42:15,520
<font color="#E5E5E5">and there is no rental cost and we are</font>

740
00:42:12,910 --> 00:42:19,109
doing<font color="#CCCCCC"> it</font><font color="#E5E5E5"> in a type safe way so</font><font color="#CCCCCC"> it is</font>

741
00:42:15,520 --> 00:42:19,109
type safe labels

742
00:42:28,940 --> 00:42:37,700
oh yeah

743
00:42:34,520 --> 00:42:40,070
he<font color="#CCCCCC"> asks a question</font><font color="#E5E5E5"> about whether it's</font>

744
00:42:37,700 --> 00:42:43,669
<font color="#CCCCCC">possible to just switching off all of</font>

745
00:42:40,070 --> 00:42:45,560
these things so<font color="#CCCCCC"> that the performance</font><font color="#E5E5E5"> can</font>

746
00:42:43,670 --> 00:42:48,670
be<font color="#E5E5E5"> greater yes of course</font>

747
00:42:45,560 --> 00:42:52,370
approachable<font color="#E5E5E5"> but this is not implement</font>

748
00:42:48,670 --> 00:42:56,930
implemented<font color="#E5E5E5"> it can be approachable by</font>

749
00:42:52,370 --> 00:43:00,319
using the macro for example config you

750
00:42:56,930 --> 00:43:02,690
can configure feature gate<font color="#E5E5E5"> for this this</font>

751
00:43:00,320 --> 00:43:05,420
kind<font color="#E5E5E5"> of things and you hide it behind</font>

752
00:43:02,690 --> 00:43:08,270
the config so you can switch<font color="#CCCCCC"> it</font><font color="#E5E5E5"> on and</font>

753
00:43:05,420 --> 00:43:10,850
or switch it<font color="#CCCCCC"> off and when</font><font color="#E5E5E5"> you switch off</font>

754
00:43:08,270 --> 00:43:16,700
<font color="#CCCCCC">the compiler will not generate these</font>

755
00:43:10,850 --> 00:43:20,259
<font color="#CCCCCC">codes so it will be no cost are there</font>

756
00:43:16,700 --> 00:43:20,259
any other crutches maybe one more

757
00:43:47,670 --> 00:44:04,450
so you're asking<font color="#E5E5E5"> questions</font><font color="#CCCCCC"> about whether</font>

758
00:43:51,700 --> 00:44:10,180
it<font color="#E5E5E5"> is fast to use</font><font color="#CCCCCC"> atomic variables you</font>

759
00:44:04,450 --> 00:44:16,470
mean as a as a<font color="#E5E5E5"> kind of approaches do</font>

760
00:44:10,180 --> 00:44:21,720
means<font color="#CCCCCC"> as</font><font color="#E5E5E5"> a kind of approaches okay</font><font color="#CCCCCC"> so</font>

761
00:44:16,470 --> 00:44:24,790
let<font color="#CCCCCC"> me show it here hmm</font>

762
00:44:21,720 --> 00:44:28,180
actually we have<font color="#E5E5E5"> benchmark performance</font>

763
00:44:24,790 --> 00:44:33,100
of using<font color="#E5E5E5"> atomic variables usually it</font>

764
00:44:28,180 --> 00:44:35,529
<font color="#E5E5E5">takes</font><font color="#CCCCCC"> ten nanoseconds</font><font color="#E5E5E5"> when you use</font>

765
00:44:33,100 --> 00:44:38,770
atomic variable in single<font color="#E5E5E5"> stranded</font>

766
00:44:35,530 --> 00:44:41,620
environment<font color="#CCCCCC"> and when you when they're</font>

767
00:44:38,770 --> 00:44:44,860
most rust<font color="#E5E5E5"> the condition may be worse</font>

768
00:44:41,620 --> 00:44:47,680
because there may be cache contentions

769
00:44:44,860 --> 00:44:50,610
and that's why we<font color="#CCCCCC"> introduce</font><font color="#E5E5E5"> local</font>

770
00:44:47,680 --> 00:44:53,919
<font color="#CCCCCC">metrics and also we found we are</font>

771
00:44:50,610 --> 00:44:56,950
<font color="#E5E5E5">investigating this this approach</font><font color="#CCCCCC"> it's</font>

772
00:44:53,920 --> 00:44:58,840
<font color="#E5E5E5">color code metrics</font><font color="#CCCCCC"> disco local</font><font color="#E5E5E5"> metrics</font>

773
00:44:56,950 --> 00:45:02,319
<font color="#E5E5E5">you</font><font color="#CCCCCC"> has also implemented</font><font color="#E5E5E5"> using atomic</font>

774
00:44:58,840 --> 00:45:05,080
<font color="#E5E5E5">variables but it can avoid some cache</font>

775
00:45:02,320 --> 00:45:09,580
contention so in practical<font color="#E5E5E5"> it will be</font>

776
00:45:05,080 --> 00:45:12,310
faster but but so we are free<font color="#CCCCCC"> to discuss</font>

777
00:45:09,580 --> 00:45:17,970
some other<font color="#E5E5E5"> implementations will always</font>

778
00:45:12,310 --> 00:45:17,970
want<font color="#E5E5E5"> it</font><font color="#CCCCCC"> to be very fast thank you</font>

779
00:45:23,040 --> 00:45:25,100
<font color="#CCCCCC">you</font>

