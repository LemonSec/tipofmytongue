1
00:00:05,400 --> 00:00:10,170
so good morning my name is here<font color="#E5E5E5"> at</font>

2
00:00:08,670 --> 00:00:12,480
<font color="#CCCCCC">Reuven</font><font color="#E5E5E5"> I will present to you about</font>

3
00:00:10,170 --> 00:00:15,780
getting device<font color="#E5E5E5"> pass-through working on</font>

4
00:00:12,480 --> 00:00:19,140
embedded arm first something about me<font color="#CCCCCC"> I</font>

5
00:00:15,780 --> 00:00:22,770
started on real computers a long time

6
00:00:19,140 --> 00:00:25,710
ago as a hobbyist<font color="#CCCCCC"> commodore 64 amiga</font><font color="#E5E5E5"> and</font>

7
00:00:22,770 --> 00:00:28,950
<font color="#E5E5E5">then</font><font color="#CCCCCC"> about 25 years ago I switched to to</font>

8
00:00:25,710 --> 00:00:30,509
Linux on varieties platforms<font color="#E5E5E5"> most of</font>

9
00:00:28,950 --> 00:00:32,488
<font color="#E5E5E5">that was on real hardware there was some</font>

10
00:00:30,509 --> 00:00:36,420
virtualization<font color="#E5E5E5"> on the IBM</font><font color="#CCCCCC"> mainframe at</font>

11
00:00:32,488 --> 00:00:39,570
<font color="#CCCCCC">university with that</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> vm when I</font>

12
00:00:36,420 --> 00:00:41,309
worked for Sony I worked on many things

13
00:00:39,570 --> 00:00:43,499
one of<font color="#E5E5E5"> them was a Linux on cell</font>

14
00:00:41,309 --> 00:00:45,269
broadband engine on the ps3<font color="#CCCCCC"> that was</font>

15
00:00:43,499 --> 00:00:51,079
also<font color="#E5E5E5"> some kind of virtualization because</font>

16
00:00:45,269 --> 00:00:51,079
Linux run on top<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> hypervisor</font><font color="#CCCCCC"> and</font>

17
00:00:52,070 --> 00:00:58,350
<font color="#E5E5E5">about</font><font color="#CCCCCC"> 5 years ago I became self-employed</font>

18
00:00:55,280 --> 00:01:00,710
<font color="#E5E5E5">offering consultant surface for embedded</font>

19
00:00:58,350 --> 00:01:04,830
Linux work and I've been<font color="#E5E5E5"> mostly</font><font color="#CCCCCC"> working</font>

20
00:01:00,710 --> 00:01:11,660
doing<font color="#E5E5E5"> upstream kernel work for</font><font color="#CCCCCC"> Vanessa</font>

21
00:01:04,830 --> 00:01:14,070
on the OCS<font color="#E5E5E5"> in 2001 I went to a</font>

22
00:01:11,660 --> 00:01:15,990
<font color="#E5E5E5">interesting small present conference</font>

23
00:01:14,070 --> 00:01:16,649
here in<font color="#E5E5E5"> Brussels called</font><font color="#CCCCCC"> ausdom what's</font>

24
00:01:15,990 --> 00:01:18,960
really<font color="#E5E5E5"> great</font>

25
00:01:16,650 --> 00:01:22,620
the next year<font color="#CCCCCC"> it changed to FOSDEM I</font>

26
00:01:18,960 --> 00:01:25,470
attended<font color="#CCCCCC"> of course and I continued every</font>

27
00:01:22,620 --> 00:01:28,500
year and in 2004 I joined<font color="#E5E5E5"> embedded</font><font color="#CCCCCC"> track</font>

28
00:01:25,470 --> 00:01:30,120
<font color="#CCCCCC">program committee</font><font color="#E5E5E5"> and this year</font>

29
00:01:28,500 --> 00:01:32,490
unfortunately<font color="#CCCCCC"> there's no embedded track</font>

30
00:01:30,120 --> 00:01:35,370
<font color="#E5E5E5">due to some miscommunication but next</font>

31
00:01:32,490 --> 00:01:37,500
year<font color="#E5E5E5"> there will be again and next</font><font color="#CCCCCC"> year</font>

32
00:01:35,370 --> 00:01:40,190
it will be<font color="#CCCCCC"> the 20th anniversary of</font>

33
00:01:37,500 --> 00:01:43,770
<font color="#E5E5E5">awesome so better be</font><font color="#CCCCCC"> there</font>

34
00:01:40,190 --> 00:01:46,950
so LEDs<font color="#CCCCCC"> I guess you all know LEDs that</font>

35
00:01:43,770 --> 00:01:48,750
<font color="#CCCCCC">you all like LEDs it's if you take an</font>

36
00:01:46,950 --> 00:01:54,960
and that<font color="#E5E5E5"> is engineer the first thing he</font>

37
00:01:48,750 --> 00:01:57,630
wants<font color="#CCCCCC"> to do is blink an LED</font><font color="#E5E5E5"> so I made a</font>

38
00:01:54,960 --> 00:01:59,580
presentation<font color="#CCCCCC"> about that and I got</font>

39
00:01:57,630 --> 00:02:02,149
inspiration<font color="#CCCCCC"> for the title getting to</font>

40
00:01:59,580 --> 00:02:06,390
blinky from a video<font color="#CCCCCC"> series from</font>

41
00:02:02,150 --> 00:02:08,190
electronics consultancy company<font color="#E5E5E5"> they</font>

42
00:02:06,390 --> 00:02:10,619
have a video<font color="#E5E5E5"> about making your own board</font>

43
00:02:08,190 --> 00:02:13,469
with LED using<font color="#E5E5E5"> kicad that's really fun</font>

44
00:02:10,619 --> 00:02:15,480
and cool but this is a virtualization

45
00:02:13,469 --> 00:02:16,980
just room so I'm not going<font color="#E5E5E5"> to talk that</font>

46
00:02:15,480 --> 00:02:18,670
<font color="#CCCCCC">much about</font><font color="#E5E5E5"> hardware but about</font>

47
00:02:16,980 --> 00:02:22,130
virtualization

48
00:02:18,670 --> 00:02:24,109
so how do<font color="#E5E5E5"> I get did I get to this so as</font>

49
00:02:22,130 --> 00:02:29,260
I<font color="#E5E5E5"> said</font><font color="#CCCCCC"> before I'm doing consultancy work</font>

50
00:02:24,110 --> 00:02:32,780
<font color="#E5E5E5">for Genesis so they have</font><font color="#CCCCCC"> arm and Sosa's</font>

51
00:02:29,260 --> 00:02:35,299
with lots of components inside like GPIO

52
00:02:32,780 --> 00:02:36,980
<font color="#E5E5E5">iommu</font><font color="#CCCCCC"> SATA</font><font color="#E5E5E5"> more about that later</font><font color="#CCCCCC"> and</font>

53
00:02:35,300 --> 00:02:39,080
they were<font color="#E5E5E5"> interested in doing</font>

54
00:02:36,980 --> 00:02:41,299
<font color="#E5E5E5">virtualization they didn't really</font><font color="#CCCCCC"> know</font>

55
00:02:39,080 --> 00:02:42,680
what<font color="#E5E5E5"> the use case is where they said</font>

56
00:02:41,300 --> 00:02:46,010
well<font color="#E5E5E5"> let's start with something simple</font>

57
00:02:42,680 --> 00:02:50,560
<font color="#CCCCCC">so what can be more simpler than</font><font color="#E5E5E5"> getting</font>

58
00:02:46,010 --> 00:02:54,920
a<font color="#CCCCCC"> nun blinking an LED so if you have a</font>

59
00:02:50,560 --> 00:02:57,100
LED<font color="#E5E5E5"> connected to a GPIO then you can</font>

60
00:02:54,920 --> 00:03:03,589
control<font color="#E5E5E5"> it from</font><font color="#CCCCCC"> Linux from user space by</font>

61
00:02:57,100 --> 00:03:06,829
exporting the GPIO<font color="#E5E5E5"> and writing values to</font>

62
00:03:03,590 --> 00:03:08,150
it to control<font color="#E5E5E5"> it in in</font><font color="#CCCCCC"> CFS yeah some</font>

63
00:03:06,830 --> 00:03:11,300
<font color="#E5E5E5">people</font><font color="#CCCCCC"> probably comment that I should</font>

64
00:03:08,150 --> 00:03:14,060
use<font color="#E5E5E5"> the new car</font><font color="#CCCCCC"> def GPIO</font><font color="#E5E5E5"> API but this is</font>

65
00:03:11,300 --> 00:03:16,220
working fine<font color="#CCCCCC"> so that's how you can do it</font>

66
00:03:14,060 --> 00:03:18,800
<font color="#E5E5E5">on real hardware</font><font color="#CCCCCC"> now the question is</font><font color="#E5E5E5"> can</font>

67
00:03:16,220 --> 00:03:22,010
we<font color="#E5E5E5"> control the LED from a virtualized</font>

68
00:03:18,800 --> 00:03:24,650
guest<font color="#E5E5E5"> to and that turned out to be a bit</font>

69
00:03:22,010 --> 00:03:26,720
more complex because<font color="#CCCCCC"> there doesent</font>

70
00:03:24,650 --> 00:03:29,090
didn't seem to be any existing solution

71
00:03:26,720 --> 00:03:32,690
for<font color="#E5E5E5"> that yet so let's first talk a bit</font>

72
00:03:29,090 --> 00:03:36,980
about virtualization<font color="#E5E5E5"> so one</font><font color="#CCCCCC"> of the ways</font>

73
00:03:32,690 --> 00:03:41,090
<font color="#CCCCCC">to virtualize systems is using QA mu so</font>

74
00:03:36,980 --> 00:03:42,500
if you have a real<font color="#CCCCCC"> Hardware on top of</font>

75
00:03:41,090 --> 00:03:44,900
<font color="#E5E5E5">that you'll run your operating system</font>

76
00:03:42,500 --> 00:03:47,300
which<font color="#CCCCCC"> is of</font><font color="#E5E5E5"> course Linux and then you</font>

77
00:03:44,900 --> 00:03:50,510
can run lots of<font color="#E5E5E5"> applications on</font><font color="#CCCCCC"> top and</font>

78
00:03:47,300 --> 00:03:53,930
one of them is qmo the<font color="#CCCCCC"> PMO will create</font>

79
00:03:50,510 --> 00:03:57,109
for you virtual guest<font color="#E5E5E5"> hardware and it</font>

80
00:03:53,930 --> 00:03:59,930
will emulate<font color="#E5E5E5"> CPU</font><font color="#CCCCCC"> RAM IO blocks</font><font color="#E5E5E5"> and on</font>

81
00:03:57,110 --> 00:04:01,880
top of<font color="#CCCCCC"> that you can</font><font color="#E5E5E5"> run just Linux like</font>

82
00:03:59,930 --> 00:04:05,360
on real hardware<font color="#E5E5E5"> and applications as</font>

83
00:04:01,880 --> 00:04:08,390
well of course<font color="#CCCCCC"> because</font><font color="#E5E5E5"> everything is</font>

84
00:04:05,360 --> 00:04:11,480
emulated this is not that high

85
00:04:08,390 --> 00:04:14,390
<font color="#CCCCCC">performance so fortunately we later got</font>

86
00:04:11,480 --> 00:04:16,579
<font color="#E5E5E5">kernel-based virtual machine or</font><font color="#CCCCCC"> k vm if</font>

87
00:04:14,390 --> 00:04:21,858
your CPU has<font color="#E5E5E5"> virtualization extensions</font>

88
00:04:16,579 --> 00:04:25,609
<font color="#E5E5E5">that it means that you can just</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> CPU</font>

89
00:04:21,858 --> 00:04:27,919
and<font color="#E5E5E5"> RAM access directly from the guests</font>

90
00:04:25,610 --> 00:04:29,810
<font color="#CCCCCC">without any emulation involved so KVM</font>

91
00:04:27,919 --> 00:04:31,430
<font color="#E5E5E5">and the virtualization extensions will</font>

92
00:04:29,810 --> 00:04:31,969
make sure<font color="#E5E5E5"> that the normal memory</font>

93
00:04:31,430 --> 00:04:34,039
management you

94
00:04:31,969 --> 00:04:37,159
it is not only used to<font color="#E5E5E5"> maintain</font>

95
00:04:34,039 --> 00:04:39,799
separation between OS and use of space

96
00:04:37,159 --> 00:04:43,239
<font color="#CCCCCC">and between multiple users objects but</font>

97
00:04:39,799 --> 00:04:46,128
<font color="#E5E5E5">also between the guest</font><font color="#CCCCCC"> and the host and</font>

98
00:04:43,239 --> 00:04:49,248
multiple applications<font color="#E5E5E5"> for an operating</font>

99
00:04:46,129 --> 00:04:54,139
systems running<font color="#E5E5E5"> on on the guest that's</font>

100
00:04:49,249 --> 00:04:56,929
only for the<font color="#E5E5E5"> CPU and RAM with the advent</font>

101
00:04:54,139 --> 00:05:01,819
<font color="#E5E5E5">of virtual function</font><font color="#CCCCCC"> I or</font><font color="#E5E5E5"> VF IO</font><font color="#CCCCCC"> you could</font>

102
00:04:56,929 --> 00:05:09,318
also have direct<font color="#CCCCCC"> access to the hardware</font>

103
00:05:01,819 --> 00:05:14,179
<font color="#E5E5E5">so</font><font color="#CCCCCC"> v f io</font><font color="#E5E5E5"> will use the iommu at the</font>

104
00:05:09,319 --> 00:05:15,799
bottom so we have I will use iommu so IO

105
00:05:14,179 --> 00:05:18,349
devices that use direct memory access

106
00:05:15,799 --> 00:05:20,628
<font color="#E5E5E5">and does have access</font><font color="#CCCCCC"> to RAM will only</font>

107
00:05:18,349 --> 00:05:22,459
<font color="#CCCCCC">access the RAM that's allocated to the</font>

108
00:05:20,629 --> 00:05:25,219
guest and not interfere with<font color="#E5E5E5"> other</font>

109
00:05:22,459 --> 00:05:27,409
systems because<font color="#E5E5E5"> the guest will access</font>

110
00:05:25,219 --> 00:05:35,449
the hardware directly<font color="#E5E5E5"> performance can</font><font color="#CCCCCC"> be</font>

111
00:05:27,409 --> 00:05:38,209
much better no let's try<font color="#E5E5E5"> this in yeah so</font>

112
00:05:35,449 --> 00:05:40,639
there<font color="#E5E5E5"> are multiple</font><font color="#CCCCCC"> types</font><font color="#E5E5E5"> of virtual VF</font>

113
00:05:38,209 --> 00:05:43,009
<font color="#CCCCCC">i/o</font><font color="#E5E5E5"> the most common one is the</font><font color="#CCCCCC"> PCI based</font>

114
00:05:40,639 --> 00:05:45,159
which is<font color="#E5E5E5"> used already on servers it's</font>

115
00:05:43,009 --> 00:05:47,839
it's<font color="#E5E5E5"> working well it's a mature solution</font>

116
00:05:45,159 --> 00:05:49,669
<font color="#E5E5E5">it's fairly standardized thanks to PCI</font>

117
00:05:47,839 --> 00:05:51,529
configuration space you have vendor<font color="#E5E5E5"> and</font>

118
00:05:49,669 --> 00:05:54,349
device IDs you can<font color="#E5E5E5"> easily identify the</font>

119
00:05:51,529 --> 00:05:56,269
hardware that<font color="#E5E5E5"> you're having the the base</font>

120
00:05:54,349 --> 00:05:57,800
address registers indicate what parts<font color="#E5E5E5"> of</font>

121
00:05:56,269 --> 00:06:00,879
the heart<font color="#E5E5E5"> will have been used to some</font>

122
00:05:57,800 --> 00:06:03,169
capabilities in the config space as well

123
00:06:00,879 --> 00:06:05,269
<font color="#CCCCCC">if you want to use the device from a</font>

124
00:06:03,169 --> 00:06:08,659
guest<font color="#E5E5E5"> you first have to make sure that</font>

125
00:06:05,269 --> 00:06:10,579
<font color="#E5E5E5">Linux no longer uses the device itself</font>

126
00:06:08,659 --> 00:06:13,029
on the on the host<font color="#E5E5E5"> so the first thing</font>

127
00:06:10,579 --> 00:06:13,029
you do is

128
00:06:14,840 --> 00:06:21,270
so the first thing you do is<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to do</font>

129
00:06:17,520 --> 00:06:23,250
is unbind the<font color="#E5E5E5"> PCI device from the driver</font>

130
00:06:21,270 --> 00:06:25,770
on<font color="#E5E5E5"> the host for that you need to know</font>

131
00:06:23,250 --> 00:06:30,240
<font color="#E5E5E5">the pci domain bus subsystem and</font>

132
00:06:25,770 --> 00:06:34,260
function it's represented by then you

133
00:06:30,240 --> 00:06:37,560
<font color="#E5E5E5">have to tell</font><font color="#CCCCCC"> linux that you want to bind</font>

134
00:06:34,260 --> 00:06:40,560
this device to vfi or PCI and do the

135
00:06:37,560 --> 00:06:43,500
final binding<font color="#E5E5E5"> after that you can launch</font>

136
00:06:40,560 --> 00:06:45,690
<font color="#E5E5E5">qmo and you just pass some special</font>

137
00:06:43,500 --> 00:06:48,330
<font color="#CCCCCC">options where you</font><font color="#E5E5E5"> specify the device to</font>

138
00:06:45,690 --> 00:06:50,240
use and that's<font color="#E5E5E5"> it and qma will take care</font>

139
00:06:48,330 --> 00:06:54,210
<font color="#CCCCCC">of the rest</font>

140
00:06:50,240 --> 00:06:57,690
now<font color="#E5E5E5"> I have to say there are other ways</font>

141
00:06:54,210 --> 00:07:00,510
as well<font color="#CCCCCC"> like the sphere vaio for AP and</font>

142
00:06:57,690 --> 00:07:02,730
CCW which are used on IBM mainframes is

143
00:07:00,510 --> 00:07:05,280
also for something<font color="#E5E5E5"> for the arm</font><font color="#CCCCCC"> amber bus</font>

144
00:07:02,730 --> 00:07:07,650
but that don't seem<font color="#CCCCCC"> to be any support</font>

145
00:07:05,280 --> 00:07:09,330
for<font color="#E5E5E5"> that in</font><font color="#CCCCCC"> qme yet maybe they use other</font>

146
00:07:07,650 --> 00:07:14,580
solutions<font color="#CCCCCC"> other</font><font color="#E5E5E5"> virtualization</font>

147
00:07:09,330 --> 00:07:16,770
<font color="#E5E5E5">techniques now insist on arm</font><font color="#CCCCCC"> embedded</font>

148
00:07:14,580 --> 00:07:19,289
<font color="#CCCCCC">systems you typically don't have a PCI</font>

149
00:07:16,770 --> 00:07:21,900
bus<font color="#E5E5E5"> inside the SOC there may be some</font>

150
00:07:19,290 --> 00:07:24,000
external PCI bus where you can plug in

151
00:07:21,900 --> 00:07:26,310
PCI Express cards or<font color="#E5E5E5"> something like that</font>

152
00:07:24,000 --> 00:07:29,310
but you<font color="#E5E5E5"> have own as</font><font color="#CCCCCC"> I see</font><font color="#E5E5E5"> devices that</font>

153
00:07:26,310 --> 00:07:30,750
are described in the device tree<font color="#E5E5E5"> so</font>

154
00:07:29,310 --> 00:07:32,400
there's a compatible value that

155
00:07:30,750 --> 00:07:34,890
specifies<font color="#CCCCCC"> what kind of device it</font><font color="#E5E5E5"> is</font>

156
00:07:32,400 --> 00:07:37,049
there are special properties to specify

157
00:07:34,890 --> 00:07:39,390
what resources<font color="#E5E5E5"> you use like</font><font color="#CCCCCC"> read</font>

158
00:07:37,050 --> 00:07:43,020
register address space<font color="#E5E5E5"> and interrupts</font>

159
00:07:39,390 --> 00:07:46,050
that's quite<font color="#E5E5E5"> similar to PCI but there</font>

160
00:07:43,020 --> 00:07:49,200
are also can be lots of<font color="#E5E5E5"> other properties</font>

161
00:07:46,050 --> 00:07:51,540
<font color="#CCCCCC">that</font><font color="#E5E5E5"> may be device specific you can have</font>

162
00:07:49,200 --> 00:07:53,490
<font color="#E5E5E5">P handles which are basically references</font>

163
00:07:51,540 --> 00:07:56,370
to other device<font color="#CCCCCC"> nodes in the systems for</font>

164
00:07:53,490 --> 00:07:58,110
interrupt controllers and<font color="#E5E5E5"> whatever other</font>

165
00:07:56,370 --> 00:08:00,750
things<font color="#E5E5E5"> especially for multimedia devices</font>

166
00:07:58,110 --> 00:08:02,820
can<font color="#CCCCCC"> be quite complicated if you have</font>

167
00:08:00,750 --> 00:08:04,410
<font color="#CCCCCC">endpoints</font><font color="#E5E5E5"> and things like that you can</font>

168
00:08:02,820 --> 00:08:07,020
<font color="#CCCCCC">have sub nodes describing things</font>

169
00:08:04,410 --> 00:08:09,840
connected to<font color="#CCCCCC"> the device and all of this</font>

170
00:08:07,020 --> 00:08:12,539
is much more complex<font color="#CCCCCC"> than a simple PCI</font>

171
00:08:09,840 --> 00:08:15,929
device and it's also less standardized

172
00:08:12,540 --> 00:08:17,820
and so for this very<font color="#CCCCCC"> limited hardware</font>

173
00:08:15,930 --> 00:08:21,210
<font color="#CCCCCC">support to that so</font><font color="#E5E5E5"> I noticed that</font><font color="#CCCCCC"> her</font>

174
00:08:17,820 --> 00:08:23,940
support<font color="#CCCCCC"> for tip 2 10 Gigabit Ethernet</font>

175
00:08:21,210 --> 00:08:25,169
adapters from AMD<font color="#CCCCCC"> and calcs</font><font color="#E5E5E5"> EDA both</font>

176
00:08:23,940 --> 00:08:27,950
Linux<font color="#E5E5E5"> and</font><font color="#CCCCCC"> qmo</font>

177
00:08:25,170 --> 00:08:27,950
but that's about it

178
00:08:28,340 --> 00:08:35,039
to export<font color="#E5E5E5"> the device from the</font><font color="#CCCCCC"> host</font><font color="#E5E5E5"> to</font>

179
00:08:32,339 --> 00:08:38,190
the<font color="#CCCCCC"> guest with using via via platform</font>

180
00:08:35,039 --> 00:08:39,510
it's very similar to be able PCI<font color="#E5E5E5"> so you</font>

181
00:08:38,190 --> 00:08:42,750
just have to<font color="#E5E5E5"> unbind it</font>

182
00:08:39,510 --> 00:08:44,910
<font color="#CCCCCC">all right matching until it explicitly</font>

183
00:08:42,750 --> 00:08:49,260
<font color="#CCCCCC">bind to</font><font color="#E5E5E5"> VF</font><font color="#CCCCCC"> i or platform</font><font color="#E5E5E5"> after</font><font color="#CCCCCC"> that</font>

184
00:08:44,910 --> 00:08:52,769
<font color="#E5E5E5">allows qmo and posted the device and</font>

185
00:08:49,260 --> 00:08:56,130
that's<font color="#CCCCCC"> actually very</font><font color="#E5E5E5"> similar and it</font>

186
00:08:52,769 --> 00:08:58,160
sounds simple so how does this work in

187
00:08:56,130 --> 00:09:01,860
<font color="#E5E5E5">practice</font>

188
00:08:58,160 --> 00:09:05,339
so on the princess<font color="#E5E5E5"> board I had I had</font>

189
00:09:01,860 --> 00:09:07,320
<font color="#E5E5E5">GPIO block now multiple GPIO Brooks but</font>

190
00:09:05,339 --> 00:09:09,329
<font color="#E5E5E5">one of them is connected to LED it</font>

191
00:09:07,320 --> 00:09:11,940
described in DT like this<font color="#E5E5E5"> so first you</font>

192
00:09:09,329 --> 00:09:15,390
<font color="#E5E5E5">have compatible values register range</font>

193
00:09:11,940 --> 00:09:18,600
<font color="#E5E5E5">interrupts and GPIO cells to indicate a</font>

194
00:09:15,390 --> 00:09:20,189
DT GPL controller<font color="#CCCCCC"> those are the</font><font color="#E5E5E5"> most</font>

195
00:09:18,600 --> 00:09:23,070
important parts or other things like

196
00:09:20,190 --> 00:09:25,470
<font color="#CCCCCC">some GPIO ranges</font><font color="#E5E5E5"> this relates to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> pin</font>

197
00:09:23,070 --> 00:09:25,980
controller but we we don't<font color="#E5E5E5"> care</font><font color="#CCCCCC"> about</font>

198
00:09:25,470 --> 00:09:28,050
<font color="#E5E5E5">that</font>

199
00:09:25,980 --> 00:09:29,790
and there<font color="#CCCCCC"> are some clocks and power</font>

200
00:09:28,050 --> 00:09:31,709
domains and<font color="#E5E5E5"> resets but they don't seem</font>

201
00:09:29,790 --> 00:09:33,360
<font color="#CCCCCC">to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> that interesting at first most</font>

202
00:09:31,709 --> 00:09:35,189
important part is<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> register</font>

203
00:09:33,360 --> 00:09:37,399
range<font color="#E5E5E5"> and if you don't use input you</font>

204
00:09:35,190 --> 00:09:41,880
don't care about interrupts in either so

205
00:09:37,399 --> 00:09:43,740
let's try it<font color="#E5E5E5"> so first you tell it with</font>

206
00:09:41,880 --> 00:09:46,170
GPIO controller<font color="#E5E5E5"> you want to um buy it</font>

207
00:09:43,740 --> 00:09:47,730
<font color="#E5E5E5">you get some scary warning from the</font>

208
00:09:46,170 --> 00:09:49,860
system if you unbind<font color="#E5E5E5"> it because some</font>

209
00:09:47,730 --> 00:09:53,880
other<font color="#E5E5E5"> GPIO</font><font color="#CCCCCC"> s on</font><font color="#E5E5E5"> that chip are used for</font>

210
00:09:49,860 --> 00:09:56,579
other things<font color="#E5E5E5"> but we don't care you tell</font>

211
00:09:53,880 --> 00:10:01,820
<font color="#E5E5E5">the</font><font color="#CCCCCC"> vfo your platform driver</font><font color="#E5E5E5"> to bind to</font>

212
00:09:56,579 --> 00:10:06,209
that specific device<font color="#E5E5E5"> and that's it oops</font>

213
00:10:01,820 --> 00:10:08,930
begin an error there should be a reset

214
00:10:06,209 --> 00:10:12,239
function<font color="#E5E5E5"> what's that</font>

215
00:10:08,930 --> 00:10:14,760
let's talk about resets first so in

216
00:10:12,240 --> 00:10:17,100
virtualization<font color="#CCCCCC"> they want to play it very</font>

217
00:10:14,760 --> 00:10:18,810
safe<font color="#CCCCCC"> so the idea is that before you</font>

218
00:10:17,100 --> 00:10:21,060
export<font color="#E5E5E5"> hardware to</font><font color="#CCCCCC"> the guest</font><font color="#E5E5E5"> you want to</font>

219
00:10:18,810 --> 00:10:22,949
<font color="#E5E5E5">reset it so it's in a known state after</font>

220
00:10:21,060 --> 00:10:25,229
the<font color="#E5E5E5"> guest s use it you also want to</font>

221
00:10:22,949 --> 00:10:28,920
reset it so<font color="#CCCCCC"> you so you know it's in a</font>

222
00:10:25,230 --> 00:10:31,589
same<font color="#CCCCCC"> state for</font><font color="#E5E5E5"> further use so that's</font>

223
00:10:28,920 --> 00:10:34,170
solved by having<font color="#CCCCCC"> a device specific via</font>

224
00:10:31,589 --> 00:10:36,420
<font color="#CCCCCC">wire reset driver to be</font><font color="#E5E5E5"> written for each</font>

225
00:10:34,170 --> 00:10:37,649
and every device<font color="#E5E5E5"> to be exported so</font>

226
00:10:36,420 --> 00:10:39,630
currently in the Linux kernel<font color="#CCCCCC"> the</font>

227
00:10:37,649 --> 00:10:40,230
support for these<font color="#E5E5E5"> two</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> gigabit</font>

228
00:10:39,630 --> 00:10:42,630
<font color="#E5E5E5">internet</font>

229
00:10:40,230 --> 00:10:47,820
that<font color="#CCCCCC"> Thursday can be reset and there's</font>

230
00:10:42,630 --> 00:10:49,800
nothing else<font color="#E5E5E5"> so can we do better so if</font>

231
00:10:47,820 --> 00:10:52,200
you look at a typical<font color="#E5E5E5"> modern as you see</font>

232
00:10:49,800 --> 00:10:54,180
you<font color="#E5E5E5"> have lots of components there and in</font>

233
00:10:52,200 --> 00:10:57,450
many cases<font color="#E5E5E5"> is actually a single reset</font>

234
00:10:54,180 --> 00:11:00,870
controller that can reset all<font color="#CCCCCC"> of those</font>

235
00:10:57,450 --> 00:11:03,350
<font color="#E5E5E5">modules but you have to be a bit careful</font>

236
00:11:00,870 --> 00:11:06,180
there because<font color="#CCCCCC"> the topology can</font><font color="#E5E5E5"> be</font>

237
00:11:03,350 --> 00:11:08,070
<font color="#E5E5E5">annoying so in the case a you just have</font>

238
00:11:06,180 --> 00:11:09,839
a module<font color="#E5E5E5"> with a single reset that's</font>

239
00:11:08,070 --> 00:11:11,610
fairly something simple if you assert

240
00:11:09,840 --> 00:11:14,640
that reset that<font color="#E5E5E5"> race that module will be</font>

241
00:11:11,610 --> 00:11:16,350
<font color="#E5E5E5">reset</font><font color="#CCCCCC"> okay you can have a reset</font><font color="#E5E5E5"> that</font>

242
00:11:14,640 --> 00:11:18,689
shared by two modules like B and C

243
00:11:16,350 --> 00:11:20,580
<font color="#E5E5E5">that's definitely a no-go for</font>

244
00:11:18,690 --> 00:11:22,980
<font color="#E5E5E5">virtualization</font><font color="#CCCCCC"> if you want to export</font>

245
00:11:20,580 --> 00:11:24,900
device B to the guest it means that you

246
00:11:22,980 --> 00:11:27,210
cannot reset it<font color="#CCCCCC"> with also</font><font color="#E5E5E5"> without also</font>

247
00:11:24,900 --> 00:11:28,890
affecting device B which may be used on

248
00:11:27,210 --> 00:11:30,510
the host or export to<font color="#CCCCCC"> do different</font><font color="#E5E5E5"> guest</font>

249
00:11:28,890 --> 00:11:32,580
or something<font color="#CCCCCC"> like that so</font><font color="#E5E5E5"> that's a no-go</font>

250
00:11:30,510 --> 00:11:35,340
<font color="#CCCCCC">you could have a device with multiple</font>

251
00:11:32,580 --> 00:11:38,610
resets<font color="#E5E5E5"> also very complicated because</font><font color="#CCCCCC"> you</font>

252
00:11:35,340 --> 00:11:41,670
<font color="#E5E5E5">don't know in the general way in the</font>

253
00:11:38,610 --> 00:11:43,440
general case which device which reset

254
00:11:41,670 --> 00:11:45,870
you have to assert first or maybe<font color="#E5E5E5"> some</font>

255
00:11:43,440 --> 00:11:48,420
some ordering requirements<font color="#CCCCCC"> or you could</font>

256
00:11:45,870 --> 00:11:50,280
have<font color="#E5E5E5"> some deeply connected to devices a</font>

257
00:11:48,420 --> 00:11:53,880
and B<font color="#CCCCCC"> a and F for example</font><font color="#E5E5E5"> that have</font>

258
00:11:50,280 --> 00:11:57,540
multiple resets the other impacting<font color="#E5E5E5"> both</font>

259
00:11:53,880 --> 00:12:00,810
devices<font color="#CCCCCC"> that's complicated</font><font color="#E5E5E5"> so M Linux</font>

260
00:11:57,540 --> 00:12:03,180
has a reset<font color="#E5E5E5"> subsystem where</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> just</font>

261
00:12:00,810 --> 00:12:04,770
reset devices if they are described

262
00:12:03,180 --> 00:12:06,930
correctly<font color="#E5E5E5"> if the reset topology is</font>

263
00:12:04,770 --> 00:12:10,079
described directly in DT so I was

264
00:12:06,930 --> 00:12:12,000
<font color="#E5E5E5">wondering do we</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> need a device</font>

265
00:12:10,080 --> 00:12:15,180
specific research routine<font color="#E5E5E5"> for the case a</font>

266
00:12:12,000 --> 00:12:20,100
we can<font color="#CCCCCC"> just use the standard Linux reset</font>

267
00:12:15,180 --> 00:12:21,719
subsystem and do that so I wrote a patch

268
00:12:20,100 --> 00:12:25,050
for<font color="#CCCCCC"> that</font><font color="#E5E5E5"> that's still not yet accepted</font>

269
00:12:21,720 --> 00:12:28,860
<font color="#E5E5E5">upstream because</font><font color="#CCCCCC"> people are still</font>

270
00:12:25,050 --> 00:12:31,500
worried about<font color="#E5E5E5"> implications on some</font>

271
00:12:28,860 --> 00:12:34,110
<font color="#E5E5E5">systems with copics reset apologies but</font>

272
00:12:31,500 --> 00:12:35,940
solution I have<font color="#E5E5E5"> there will only allow to</font>

273
00:12:34,110 --> 00:12:37,770
use reset in case a where you have a

274
00:12:35,940 --> 00:12:41,790
<font color="#E5E5E5">single dedicated reset line for the</font>

275
00:12:37,770 --> 00:12:45,120
device which should be safe so with<font color="#E5E5E5"> that</font>

276
00:12:41,790 --> 00:12:50,750
patch we can continue<font color="#E5E5E5"> and see what</font>

277
00:12:45,120 --> 00:12:50,750
happens oops<font color="#E5E5E5"> we need I Oh</font><font color="#CCCCCC"> mmm you group</font>

278
00:12:50,800 --> 00:13:00,248
so as I<font color="#E5E5E5"> said before the iommu allows to</font>

279
00:12:55,050 --> 00:13:02,378
use<font color="#E5E5E5"> devices from a guest that</font><font color="#CCCCCC"> devices</font>

280
00:13:00,249 --> 00:13:04,480
<font color="#E5E5E5">that use DMA and will read and write</font>

281
00:13:02,379 --> 00:13:07,749
<font color="#E5E5E5">from memory of course you want to</font>

282
00:13:04,480 --> 00:13:09,449
prevent that<font color="#E5E5E5"> if</font><font color="#CCCCCC"> the device controls from</font>

283
00:13:07,749 --> 00:13:11,019
<font color="#E5E5E5">the guest will access memory that's not</font>

284
00:13:09,449 --> 00:13:13,959
allocated to the<font color="#E5E5E5"> guest</font>

285
00:13:11,019 --> 00:13:15,639
so<font color="#CCCCCC"> the iommu takes</font><font color="#E5E5E5"> care of that very</font>

286
00:13:13,959 --> 00:13:19,388
similar to<font color="#CCCCCC"> a normal memory management</font>

287
00:13:15,639 --> 00:13:23,470
unit that does similar things<font color="#E5E5E5"> for access</font>

288
00:13:19,389 --> 00:13:25,860
from CPU to memory<font color="#CCCCCC"> now in our case</font><font color="#E5E5E5"> for</font>

289
00:13:23,470 --> 00:13:27,999
the GPIO control it doesn't<font color="#CCCCCC"> have the DMA</font>

290
00:13:25,860 --> 00:13:33,009
fortunately there seems to be a<font color="#CCCCCC"> vfi oh</font>

291
00:13:27,999 --> 00:13:37,179
<font color="#E5E5E5">no am i</font><font color="#CCCCCC"> om mu mode in linux</font><font color="#E5E5E5"> and we can</font>

292
00:13:33,009 --> 00:13:41,920
<font color="#CCCCCC">enable that</font><font color="#E5E5E5"> and then we we will be</font>

293
00:13:37,179 --> 00:13:44,199
<font color="#E5E5E5">satellite this GPIO device does</font><font color="#CCCCCC"> not use</font>

294
00:13:41,920 --> 00:13:47,829
DMA so in general can you<font color="#E5E5E5"> know whether</font><font color="#CCCCCC"> a</font>

295
00:13:44,199 --> 00:13:50,859
device uses DMA because you will need

296
00:13:47,829 --> 00:13:53,618
iommu only if it<font color="#E5E5E5"> uses DMA and</font><font color="#CCCCCC"> else you</font>

297
00:13:50,860 --> 00:13:57,540
can do without for PCI it's always

298
00:13:53,619 --> 00:14:00,790
assumed<font color="#E5E5E5"> that as iommu available the</font>

299
00:13:57,540 --> 00:14:02,949
iommu<font color="#CCCCCC"> higher here how it's connected to</font>

300
00:14:00,790 --> 00:14:04,689
the system<font color="#E5E5E5"> it's always not known from</font>

301
00:14:02,949 --> 00:14:05,160
the<font color="#E5E5E5"> bit higher here so that's very</font>

302
00:14:04,689 --> 00:14:08,498
simple

303
00:14:05,160 --> 00:14:11,230
for platform<font color="#E5E5E5"> devices described in dt</font>

304
00:14:08,499 --> 00:14:14,019
it's a bit<font color="#E5E5E5"> more difficult</font><font color="#CCCCCC"> so there's a</font>

305
00:14:11,230 --> 00:14:16,269
<font color="#E5E5E5">special iommu property in</font><font color="#CCCCCC"> DT which you</font>

306
00:14:14,019 --> 00:14:18,699
can which<font color="#E5E5E5"> you have to use to</font><font color="#CCCCCC"> indicate</font>

307
00:14:16,269 --> 00:14:20,410
that the<font color="#CCCCCC"> device is connected</font><font color="#E5E5E5"> to iommu so</font>

308
00:14:18,699 --> 00:14:24,519
if the property<font color="#CCCCCC"> is present the device</font>

309
00:14:20,410 --> 00:14:28,269
will use DMA for sure<font color="#CCCCCC"> some devices</font><font color="#E5E5E5"> they</font>

310
00:14:24,519 --> 00:14:31,329
don't do DMA<font color="#CCCCCC"> yourself they use a DMA</font>

311
00:14:28,269 --> 00:14:34,749
controller that is indicated in<font color="#E5E5E5"> DT by</font>

312
00:14:31,329 --> 00:14:36,339
using DMA<font color="#CCCCCC"> s property</font><font color="#E5E5E5"> and if that</font>

313
00:14:34,749 --> 00:14:39,939
property<font color="#E5E5E5"> is present then</font><font color="#CCCCCC"> you know that</font>

314
00:14:36,339 --> 00:14:41,919
the device<font color="#E5E5E5"> uses DMA have to be careful</font>

315
00:14:39,939 --> 00:14:45,309
there because<font color="#E5E5E5"> the DMA will be handled by</font>

316
00:14:41,919 --> 00:14:47,709
<font color="#CCCCCC">the DMA controller so oddly that one</font>

317
00:14:45,309 --> 00:14:49,749
should<font color="#CCCCCC"> have a iommu property to</font><font color="#E5E5E5"> else it</font>

318
00:14:47,709 --> 00:14:53,169
<font color="#E5E5E5">will use the MA without iommu which is</font>

319
00:14:49,749 --> 00:14:57,189
unsafe if not in if none of<font color="#E5E5E5"> these is</font>

320
00:14:53,169 --> 00:14:59,319
present then it's not safe to assume

321
00:14:57,189 --> 00:15:01,990
<font color="#CCCCCC">that the device doesn't do DMA perhaps</font>

322
00:14:59,319 --> 00:15:02,860
<font color="#CCCCCC">it's device that it's not</font><font color="#E5E5E5"> connected to</font>

323
00:15:01,990 --> 00:15:03,590
iommu

324
00:15:02,860 --> 00:15:06,790
and then

325
00:15:03,590 --> 00:15:09,410
unsafe<font color="#E5E5E5"> to</font><font color="#CCCCCC"> youth from a</font><font color="#E5E5E5"> guest</font><font color="#CCCCCC"> or perhaps</font>

326
00:15:06,790 --> 00:15:11,689
iommu support is not<font color="#E5E5E5"> yet enabled for the</font>

327
00:15:09,410 --> 00:15:13,910
device in<font color="#E5E5E5"> the device</font><font color="#CCCCCC"> tree that's also</font>

328
00:15:11,690 --> 00:15:18,500
problem so better<font color="#E5E5E5"> safe than sorry we</font>

329
00:15:13,910 --> 00:15:20,870
<font color="#CCCCCC">only want to use export devices to the</font>

330
00:15:18,500 --> 00:15:23,240
<font color="#E5E5E5">guests when they</font><font color="#CCCCCC"> have now your</font><font color="#E5E5E5"> image</font>

331
00:15:20,870 --> 00:15:25,660
support<font color="#E5E5E5"> but for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> CPI example it's</font>

332
00:15:23,240 --> 00:15:29,450
it's safe<font color="#CCCCCC"> - not useful</font>

333
00:15:25,660 --> 00:15:31,790
so with<font color="#E5E5E5"> that patch</font><font color="#CCCCCC"> to use via via</font>

334
00:15:29,450 --> 00:15:33,170
without<font color="#E5E5E5"> an emu</font><font color="#CCCCCC"> linux is happy and we</font>

335
00:15:31,790 --> 00:15:37,069
have the device<font color="#CCCCCC"> exporter</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> guest</font>

336
00:15:33,170 --> 00:15:39,680
now we can start launching qmo so as<font color="#E5E5E5"> I</font>

337
00:15:37,070 --> 00:15:44,510
<font color="#E5E5E5">said</font><font color="#CCCCCC"> before for notice limited support</font>

338
00:15:39,680 --> 00:15:47,180
<font color="#E5E5E5">in qmo for instance</font><font color="#CCCCCC"> csing devices so</font><font color="#E5E5E5"> I</font>

339
00:15:44,510 --> 00:15:51,230
wrote some code<font color="#CCCCCC"> to instantiate minimal</font>

340
00:15:47,180 --> 00:15:53,719
GPIO device<font color="#CCCCCC"> node for the</font><font color="#E5E5E5"> arc</font><font color="#CCCCCC"> our GPIO</font>

341
00:15:51,230 --> 00:15:56,720
<font color="#CCCCCC">controller which basically adds this</font><font color="#E5E5E5"> to</font>

342
00:15:53,720 --> 00:15:59,870
the<font color="#CCCCCC"> dts of the get to</font><font color="#E5E5E5"> the device tree of</font>

343
00:15:56,720 --> 00:16:01,900
the guest<font color="#E5E5E5"> and then we can launch</font><font color="#CCCCCC"> QM</font><font color="#E5E5E5"> you</font>

344
00:15:59,870 --> 00:16:05,810
will pass<font color="#E5E5E5"> it</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> device we want to use</font>

345
00:16:01,900 --> 00:16:07,150
it fails<font color="#E5E5E5"> oops it cannot open a via file</font>

346
00:16:05,810 --> 00:16:10,579
file

347
00:16:07,150 --> 00:16:13,610
<font color="#CCCCCC">alright we don't</font><font color="#E5E5E5"> have that filed as a</font>

348
00:16:10,580 --> 00:16:16,070
deaf ear by oh<font color="#E5E5E5"> no I am</font><font color="#CCCCCC"> mu zero file</font>

349
00:16:13,610 --> 00:16:18,410
instead<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> zero file so</font><font color="#CCCCCC"> while Linux</font>

350
00:16:16,070 --> 00:16:21,640
has support for<font color="#E5E5E5"> this</font><font color="#CCCCCC"> V of I</font><font color="#E5E5E5"> oh no</font><font color="#CCCCCC"> mm</font><font color="#E5E5E5"> you</font>

351
00:16:18,410 --> 00:16:24,050
mode<font color="#E5E5E5"> that never got in accepted into qmo</font>

352
00:16:21,640 --> 00:16:25,810
so<font color="#E5E5E5"> I'm wondering who's using it</font><font color="#CCCCCC"> perhaps</font>

353
00:16:24,050 --> 00:16:28,459
<font color="#CCCCCC">some</font><font color="#E5E5E5"> other virtualization techniques</font>

354
00:16:25,810 --> 00:16:30,349
<font color="#E5E5E5">fortunately you can find a</font><font color="#CCCCCC"> Apache on</font><font color="#E5E5E5"> a</font>

355
00:16:28,460 --> 00:16:35,210
<font color="#E5E5E5">mailing list archives</font><font color="#CCCCCC"> to to enable</font>

356
00:16:30,350 --> 00:16:38,180
<font color="#E5E5E5">support for that and after that yes</font>

357
00:16:35,210 --> 00:16:41,060
Linux in the guest<font color="#E5E5E5"> initialize the GPIO</font>

358
00:16:38,180 --> 00:16:43,849
driver and we're happier we can control

359
00:16:41,060 --> 00:16:47,869
the LED from the<font color="#E5E5E5"> guest similar like we</font>

360
00:16:43,850 --> 00:16:50,080
<font color="#E5E5E5">do to on the house and wait a bit</font>

361
00:16:47,870 --> 00:16:54,290
nothing happens

362
00:16:50,080 --> 00:16:57,440
<font color="#CCCCCC">Mattson</font><font color="#E5E5E5"> oh yeah it turns out that we</font>

363
00:16:54,290 --> 00:17:00,709
forgot some important details<font color="#E5E5E5"> so how do</font>

364
00:16:57,440 --> 00:17:02,510
as you see<font color="#E5E5E5"> is do power management so</font>

365
00:17:00,710 --> 00:17:05,060
typically<font color="#E5E5E5"> you have lots of devices</font><font color="#CCCCCC"> there</font>

366
00:17:02,510 --> 00:17:06,379
come<font color="#E5E5E5"> to there and they're all control to</font>

367
00:17:05,060 --> 00:17:09,800
power controller and the power

368
00:17:06,380 --> 00:17:11,660
controller can turn off power to to one

369
00:17:09,800 --> 00:17:13,520
device<font color="#CCCCCC"> when it's not in use to</font><font color="#E5E5E5"> save</font>

370
00:17:11,660 --> 00:17:15,950
power<font color="#E5E5E5"> usually an embedded people care</font>

371
00:17:13,520 --> 00:17:16,470
about<font color="#E5E5E5"> power consumption in server space</font>

372
00:17:15,950 --> 00:17:21,000
they also

373
00:17:16,470 --> 00:17:22,620
but it's it's less<font color="#CCCCCC"> of</font><font color="#E5E5E5"> course you cannot</font>

374
00:17:21,000 --> 00:17:24,140
use the device when the<font color="#E5E5E5"> power is turned</font>

375
00:17:22,619 --> 00:17:26,188
off

376
00:17:24,140 --> 00:17:29,490
one other thing they may have is a

377
00:17:26,189 --> 00:17:31,169
controller<font color="#CCCCCC"> but</font><font color="#E5E5E5"> which supplies a clock to</font>

378
00:17:29,490 --> 00:17:32,549
each module<font color="#E5E5E5"> if the module is not used</font>

379
00:17:31,169 --> 00:17:34,559
the clock will be<font color="#E5E5E5"> turned off</font>

380
00:17:32,549 --> 00:17:37,230
of course the module won't work without

381
00:17:34,559 --> 00:17:40,049
that<font color="#E5E5E5"> clock you could have real complex</font>

382
00:17:37,230 --> 00:17:42,690
system with<font color="#CCCCCC"> hierarchical power</font><font color="#E5E5E5"> areas</font>

383
00:17:40,049 --> 00:17:45,059
clock demands<font color="#E5E5E5"> and whatever and that's</font>

384
00:17:42,690 --> 00:17:49,710
<font color="#CCCCCC">actually what we we have on Vanessa's</font>

385
00:17:45,059 --> 00:17:51,510
<font color="#E5E5E5">embedded a sociis so we need to control</font>

386
00:17:49,710 --> 00:17:53,690
<font color="#E5E5E5">the</font><font color="#CCCCCC"> clock domain</font><font color="#E5E5E5"> and the power domain</font>

387
00:17:51,510 --> 00:17:55,710
and whatever<font color="#E5E5E5"> because if the</font><font color="#CCCCCC"> devices off</font>

388
00:17:53,690 --> 00:17:57,659
<font color="#E5E5E5">the heart were manual calls that</font>

389
00:17:55,710 --> 00:17:59,490
undefined behavior<font color="#E5E5E5"> if you're lucky like</font>

390
00:17:57,659 --> 00:18:02,130
in on my case nothing<font color="#E5E5E5"> happened but if</font>

391
00:17:59,490 --> 00:18:03,330
you're unlucky<font color="#CCCCCC"> it could cause exceptions</font>

392
00:18:02,130 --> 00:18:04,980
and<font color="#E5E5E5"> even crash the whole system</font>

393
00:18:03,330 --> 00:18:09,270
including the<font color="#E5E5E5"> host which is</font><font color="#CCCCCC"> definitely</font>

394
00:18:04,980 --> 00:18:11,460
<font color="#CCCCCC">not something</font><font color="#E5E5E5"> you want so how do you</font>

395
00:18:09,270 --> 00:18:13,830
<font color="#E5E5E5">control clocks many drivers still do</font>

396
00:18:11,460 --> 00:18:15,659
<font color="#E5E5E5">that using explicit clock</font><font color="#CCCCCC"> management but</font>

397
00:18:13,830 --> 00:18:17,520
that doesn't<font color="#E5E5E5"> work well because</font><font color="#CCCCCC"> linux has</font>

398
00:18:15,659 --> 00:18:19,049
<font color="#E5E5E5">this nice system called run time</font><font color="#CCCCCC"> p.m.</font>

399
00:18:17,520 --> 00:18:22,679
where it will<font color="#E5E5E5"> take care</font><font color="#CCCCCC"> of that</font>

400
00:18:19,049 --> 00:18:24,780
automatically<font color="#E5E5E5"> for</font><font color="#CCCCCC"> power</font><font color="#E5E5E5"> areas there's no</font>

401
00:18:22,679 --> 00:18:27,330
<font color="#E5E5E5">other option than to use run time p.m.</font>

402
00:18:24,780 --> 00:18:31,530
you cannot just tell tell the Linux that

403
00:18:27,330 --> 00:18:34,590
power on this power<font color="#E5E5E5"> area so the solution</font>

404
00:18:31,530 --> 00:18:38,580
there was<font color="#E5E5E5"> to at</font><font color="#CCCCCC"> run-time p.m. support to</font>

405
00:18:34,590 --> 00:18:42,678
the VF<font color="#CCCCCC"> IO driver in in Linux that one</font>

406
00:18:38,580 --> 00:18:46,289
<font color="#E5E5E5">did get</font><font color="#CCCCCC"> accepted upstream and after that</font>

407
00:18:42,679 --> 00:18:48,059
we have<font color="#CCCCCC"> kokuto one</font><font color="#E5E5E5"> question there to ask</font>

408
00:18:46,289 --> 00:18:49,350
is can't can't<font color="#CCCCCC"> we delegate this</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

409
00:18:48,059 --> 00:18:50,789
<font color="#CCCCCC">guests</font><font color="#E5E5E5"> because the guest knows better</font>

410
00:18:49,350 --> 00:18:52,649
when the device will<font color="#CCCCCC"> be used</font><font color="#E5E5E5"> and will</font>

411
00:18:50,789 --> 00:18:54,658
not be used<font color="#CCCCCC"> so it can</font><font color="#E5E5E5"> power off the</font>

412
00:18:52,650 --> 00:18:57,299
device<font color="#E5E5E5"> when not to</font><font color="#CCCCCC"> use it</font><font color="#E5E5E5"> like that</font>

413
00:18:54,659 --> 00:19:00,510
so<font color="#E5E5E5"> the app</font><font color="#CCCCCC"> that sounds interesting but</font>

414
00:18:57,299 --> 00:19:02,520
yeah<font color="#E5E5E5"> since it may crash the system if it</font>

415
00:19:00,510 --> 00:19:06,480
does wrong on some associate it's not a

416
00:19:02,520 --> 00:19:09,210
good solution<font color="#E5E5E5"> so what did we get</font><font color="#CCCCCC"> now</font>

417
00:19:06,480 --> 00:19:12,450
it's<font color="#E5E5E5"> working great</font><font color="#CCCCCC"> we have a</font><font color="#E5E5E5"> LED</font><font color="#CCCCCC"> that</font>

418
00:19:09,210 --> 00:19:15,929
works so the question is does this work

419
00:19:12,450 --> 00:19:17,309
<font color="#CCCCCC">for</font><font color="#E5E5E5"> embed buttons</font><font color="#CCCCCC"> too</font><font color="#E5E5E5"> and yes it did so</font>

420
00:19:15,929 --> 00:19:18,960
we needed<font color="#E5E5E5"> some patch that was</font>

421
00:19:17,309 --> 00:19:22,830
fortunately being developed in parallel

422
00:19:18,960 --> 00:19:25,409
<font color="#CCCCCC">by somebody else can we get this to work</font>

423
00:19:22,830 --> 00:19:28,710
<font color="#CCCCCC">for other</font><font color="#E5E5E5"> devices as well</font><font color="#CCCCCC"> some people</font>

424
00:19:25,409 --> 00:19:30,240
try that works well I tried it for

425
00:19:28,710 --> 00:19:34,320
serial data and then I

426
00:19:30,240 --> 00:19:37,470
discovered some other issue<font color="#CCCCCC"> that it only</font>

427
00:19:34,320 --> 00:19:40,139
<font color="#E5E5E5">works with standard</font><font color="#CCCCCC"> arm io mm using the</font>

428
00:19:37,470 --> 00:19:42,030
system so we need<font color="#E5E5E5"> patches for that the</font>

429
00:19:40,140 --> 00:19:44,730
satyr drivers still use explicit clock

430
00:19:42,030 --> 00:19:49,410
<font color="#CCCCCC">management is that of run time p.m. all</font>

431
00:19:44,730 --> 00:19:52,620
things we can<font color="#CCCCCC"> fix but so it means we can</font>

432
00:19:49,410 --> 00:19:54,600
add<font color="#E5E5E5"> devices support in</font><font color="#CCCCCC"> queue</font><font color="#E5E5E5"> mo but all</font>

433
00:19:52,620 --> 00:19:58,620
of<font color="#E5E5E5"> that</font><font color="#CCCCCC"> required adding new code can we</font>

434
00:19:54,600 --> 00:20:00,689
do<font color="#E5E5E5"> that in a generic way so I wrote code</font>

435
00:19:58,620 --> 00:20:03,270
to try<font color="#E5E5E5"> to do that in a generic way just</font>

436
00:20:00,690 --> 00:20:05,850
by copying the<font color="#E5E5E5"> device</font><font color="#CCCCCC"> node from the</font><font color="#E5E5E5"> the</font>

437
00:20:03,270 --> 00:20:08,520
host to the guest<font color="#E5E5E5"> so the register and</font>

438
00:20:05,850 --> 00:20:10,260
<font color="#CCCCCC">inter properties are removed</font><font color="#E5E5E5"> all simple</font>

439
00:20:08,520 --> 00:20:12,720
properties can<font color="#E5E5E5"> be copied</font><font color="#CCCCCC"> from the</font><font color="#E5E5E5"> host</font>

440
00:20:10,260 --> 00:20:15,150
<font color="#E5E5E5">basically simple properties are the ones</font>

441
00:20:12,720 --> 00:20:17,010
<font color="#E5E5E5">that do not</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> P handles they do not</font>

442
00:20:15,150 --> 00:20:19,280
refer<font color="#CCCCCC"> to other node so they can be</font>

443
00:20:17,010 --> 00:20:21,120
copied unfortunately DT does not have a

444
00:20:19,280 --> 00:20:23,879
system where it provides<font color="#E5E5E5"> type</font>

445
00:20:21,120 --> 00:20:26,520
<font color="#CCCCCC">information so that was a bit difficult</font>

446
00:20:23,880 --> 00:20:29,100
<font color="#CCCCCC">we can all</font><font color="#E5E5E5"> so the solution I took was</font>

447
00:20:26,520 --> 00:20:31,020
only copy<font color="#E5E5E5"> properties without without the</font>

448
00:20:29,100 --> 00:20:33,570
size<font color="#E5E5E5"> because they don't have cannot have</font>

449
00:20:31,020 --> 00:20:36,660
a<font color="#E5E5E5"> P handle or properties that are in</font>

450
00:20:33,570 --> 00:20:39,059
white list properties handled by the

451
00:20:36,660 --> 00:20:41,970
host like power management<font color="#E5E5E5"> isolation</font>

452
00:20:39,059 --> 00:20:43,770
iommu three sets<font color="#E5E5E5"> ping controls they can</font>

453
00:20:41,970 --> 00:20:45,690
be ignored<font color="#E5E5E5"> clocks</font>

454
00:20:43,770 --> 00:20:47,910
<font color="#CCCCCC">I reject them if there's no power</font>

455
00:20:45,690 --> 00:20:50,100
management going on sub nodes

456
00:20:47,910 --> 00:20:51,929
no that's too complicated but for simple

457
00:20:50,100 --> 00:20:54,659
devices<font color="#E5E5E5"> it works so I have a patch for</font>

458
00:20:51,929 --> 00:20:58,520
that<font color="#E5E5E5"> it worked with serial at a divisor</font>

459
00:20:54,660 --> 00:21:01,980
<font color="#CCCCCC">I had so it will transform the above</font>

460
00:20:58,520 --> 00:21:05,000
device<font color="#E5E5E5"> node from the host</font><font color="#CCCCCC"> to the one</font>

461
00:21:01,980 --> 00:21:05,000
below<font color="#E5E5E5"> for the cast</font>

462
00:21:05,950 --> 00:21:09,609
so our conclusions

463
00:21:09,859 --> 00:21:13,850
so<font color="#E5E5E5"> since we usually don't</font><font color="#CCCCCC"> have PCI but</font>

464
00:21:11,960 --> 00:21:15,979
we have<font color="#CCCCCC"> IOM amuse</font><font color="#E5E5E5"> and people are</font>

465
00:21:13,850 --> 00:21:17,330
interested<font color="#CCCCCC"> in virtualization so it makes</font>

466
00:21:15,979 --> 00:21:20,059
<font color="#CCCCCC">sense</font><font color="#E5E5E5"> to use device pass-through</font>

467
00:21:17,330 --> 00:21:21,710
<font color="#CCCCCC">therefore high bandwidth devices for</font>

468
00:21:20,059 --> 00:21:23,899
simple devices<font color="#E5E5E5"> I've shown that we can</font>

469
00:21:21,710 --> 00:21:25,639
<font color="#CCCCCC">have a generic</font><font color="#E5E5E5"> code to handle that for</font>

470
00:21:23,899 --> 00:21:27,619
<font color="#CCCCCC">more complex devices you will still have</font>

471
00:21:25,639 --> 00:21:30,289
to<font color="#E5E5E5"> need a device specific instantiation</font>

472
00:21:27,619 --> 00:21:32,029
code<font color="#E5E5E5"> but probably the best way there is</font>

473
00:21:30,289 --> 00:21:35,840
<font color="#CCCCCC">to provide</font><font color="#E5E5E5"> some helpers and it's easy to</font>

474
00:21:32,029 --> 00:21:38,450
<font color="#E5E5E5">write those</font><font color="#CCCCCC"> 400 through teens there are</font>

475
00:21:35,840 --> 00:21:40,428
still some small<font color="#E5E5E5"> difficulties to handle</font>

476
00:21:38,450 --> 00:21:42,289
<font color="#CCCCCC">clerks are</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> always useful power</font>

477
00:21:40,429 --> 00:21:44,419
<font color="#CCCCCC">management some drivers</font><font color="#E5E5E5"> really need to</font>

478
00:21:42,289 --> 00:21:46,129
know the clock rate and maybe multiple

479
00:21:44,419 --> 00:21:49,249
<font color="#E5E5E5">clocks for that we may need some</font><font color="#CCCCCC"> other</font>

480
00:21:46,129 --> 00:21:51,678
solution this<font color="#CCCCCC"> is not yet support devices</font>

481
00:21:49,249 --> 00:21:54,320
that don't use<font color="#E5E5E5"> the major cell but</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> do</font>

482
00:21:51,679 --> 00:21:57,349
the DMA controller<font color="#E5E5E5"> and then the typical</font>

483
00:21:54,320 --> 00:21:59,749
<font color="#E5E5E5">things like yeah it's your heart were</font>

484
00:21:57,349 --> 00:22:03,379
suitable for virtualization are the

485
00:21:59,749 --> 00:22:06,320
things using<font color="#E5E5E5"> your devices that share</font>

486
00:22:03,379 --> 00:22:08,809
some resources<font color="#E5E5E5"> and you cannot export one</font>

487
00:22:06,320 --> 00:22:10,639
device of it to the<font color="#E5E5E5"> guest because it</font>

488
00:22:08,809 --> 00:22:13,070
will<font color="#CCCCCC"> interfere with</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> other device</font>

489
00:22:10,639 --> 00:22:15,428
<font color="#CCCCCC">that uses</font><font color="#E5E5E5"> similar resources so we really</font>

490
00:22:13,070 --> 00:22:17,928
have to teach the as I see I<font color="#E5E5E5"> bought</font>

491
00:22:15,429 --> 00:22:19,809
designers to take<font color="#E5E5E5"> virtualization into</font>

492
00:22:17,929 --> 00:22:23,379
account

493
00:22:19,809 --> 00:22:25,729
yeah which devices are suitable for

494
00:22:23,379 --> 00:22:28,340
exporting<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the guest</font><font color="#E5E5E5"> maybe the nudity</font>

495
00:22:25,729 --> 00:22:33,349
binding schema<font color="#CCCCCC"> shakes can help</font><font color="#E5E5E5"> there in</font>

496
00:22:28,340 --> 00:22:34,009
doing<font color="#E5E5E5"> something now back to the GPIO</font><font color="#CCCCCC"> for</font>

497
00:22:33,349 --> 00:22:37,039
one more minute

498
00:22:34,009 --> 00:22:39,049
<font color="#E5E5E5">so in</font><font color="#CCCCCC"> real world</font><font color="#E5E5E5"> GPIO s can be useful</font>

499
00:22:37,039 --> 00:22:41,059
for devices as<font color="#E5E5E5"> well so you may have a</font>

500
00:22:39,049 --> 00:22:46,249
guest<font color="#E5E5E5"> that wants to control a relay</font><font color="#CCCCCC"> or</font>

501
00:22:41,059 --> 00:22:47,539
power switching on the<font color="#E5E5E5"> host but using</font>

502
00:22:46,249 --> 00:22:48,470
device<font color="#CCCCCC"> Buster is probably not</font><font color="#E5E5E5"> the best</font>

503
00:22:47,539 --> 00:22:50,330
<font color="#E5E5E5">solution there</font>

504
00:22:48,470 --> 00:22:53,389
I did<font color="#E5E5E5"> the</font><font color="#CCCCCC"> proof-of-concept</font><font color="#E5E5E5"> using</font>

505
00:22:50,330 --> 00:22:56,418
emulation where I used<font color="#E5E5E5"> the existing PL</font>

506
00:22:53,389 --> 00:22:58,879
or<font color="#E5E5E5"> 61 GPIO controller that's in part of</font>

507
00:22:56,419 --> 00:23:01,279
the standard<font color="#CCCCCC"> qmu</font><font color="#E5E5E5"> arm virtual machine</font><font color="#CCCCCC"> we</font>

508
00:22:58,879 --> 00:23:04,488
I wrote support that it uses<font color="#E5E5E5"> the Lib</font>

509
00:23:01,279 --> 00:23:06,440
GPIO<font color="#CCCCCC"> D back and</font><font color="#E5E5E5"> on Linux so you could</font>

510
00:23:04,489 --> 00:23:08,090
<font color="#E5E5E5">just tell</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> for example with the</font>

511
00:23:06,440 --> 00:23:11,659
<font color="#CCCCCC">command-line</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> want to</font>

512
00:23:08,090 --> 00:23:13,369
export GPIO<font color="#CCCCCC"> s 11 12 and 13 on the GPIO</font>

513
00:23:11,659 --> 00:23:16,940
control of specified there to the

514
00:23:13,369 --> 00:23:19,209
virtual GPIO 0 1 2 on the<font color="#E5E5E5"> PL o 61 in the</font>

515
00:23:16,940 --> 00:23:19,210
<font color="#E5E5E5">guest</font>

516
00:23:19,270 --> 00:23:24,530
probably we want something<font color="#E5E5E5"> better than</font>

517
00:23:21,770 --> 00:23:28,250
<font color="#E5E5E5">emulation some prefer to virtualization</font>

518
00:23:24,530 --> 00:23:31,280
that<font color="#E5E5E5"> mimics the lib G API DoD API would</font>

519
00:23:28,250 --> 00:23:33,140
<font color="#E5E5E5">be good to have and we may want to</font>

520
00:23:31,280 --> 00:23:35,120
expand this to<font color="#E5E5E5"> similar systems like the</font>

521
00:23:33,140 --> 00:23:38,210
pulse width modulation system in Linux

522
00:23:35,120 --> 00:23:41,050
which uses a similar<font color="#E5E5E5"> way to export PWM</font>

523
00:23:38,210 --> 00:23:43,880
outputs to<font color="#E5E5E5"> Sisyphus like GPIO did and</font>

524
00:23:41,050 --> 00:23:49,990
then we can do motor control<font color="#CCCCCC"> and control</font>

525
00:23:43,880 --> 00:23:53,510
<font color="#E5E5E5">our RGB LEDs so basically that's it</font>

526
00:23:49,990 --> 00:24:10,309
<font color="#CCCCCC">thanks and acknowledgments questions I</font>

527
00:23:53,510 --> 00:24:11,450
will<font color="#CCCCCC"> have to take them</font><font color="#E5E5E5"> yeah sure no not</font>

528
00:24:10,309 --> 00:24:13,490
really

529
00:24:11,450 --> 00:24:15,650
yeah so<font color="#E5E5E5"> the question was whether that</font>

530
00:24:13,490 --> 00:24:17,570
<font color="#E5E5E5">renesis was interested in virtualization</font>

531
00:24:15,650 --> 00:24:19,940
<font color="#E5E5E5">and</font><font color="#CCCCCC"> what I</font><font color="#E5E5E5"> found out in the meantime</font>

532
00:24:17,570 --> 00:24:22,010
what they really want<font color="#E5E5E5"> to do and</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> far</font>

533
00:24:19,940 --> 00:24:25,400
we don't they have many<font color="#CCCCCC"> customers I mean</font>

534
00:24:22,010 --> 00:24:28,660
not always<font color="#CCCCCC"> aware of</font><font color="#E5E5E5"> what the customers</font>

535
00:24:25,400 --> 00:24:28,660
ethnicity want but

536
00:24:34,870 --> 00:24:36,929
you

