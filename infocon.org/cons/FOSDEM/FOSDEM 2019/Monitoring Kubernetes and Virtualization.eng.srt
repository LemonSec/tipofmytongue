1
00:00:04,720 --> 00:00:11,139
so<font color="#E5E5E5"> hi</font><font color="#CCCCCC"> this talk is going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> about</font>

2
00:00:08,630 --> 00:00:12,830
monitoring<font color="#E5E5E5"> converge infrastructure</font>

3
00:00:11,139 --> 00:00:15,039
<font color="#E5E5E5">containing and running together</font>

4
00:00:12,830 --> 00:00:17,240
<font color="#E5E5E5">containers and virtual machines together</font>

5
00:00:15,039 --> 00:00:18,980
<font color="#E5E5E5">the main</font><font color="#CCCCCC"> course here will be about</font>

6
00:00:17,240 --> 00:00:20,538
metric collection<font color="#E5E5E5"> because I</font><font color="#CCCCCC"> can't cover</font>

7
00:00:18,980 --> 00:00:23,150
<font color="#CCCCCC">all of it</font>

8
00:00:20,539 --> 00:00:26,210
so let's start my name is the Anil<font color="#CCCCCC"> Quinn</font>

9
00:00:23,150 --> 00:00:29,630
<font color="#CCCCCC">I'm working in red at</font><font color="#E5E5E5"> CES 2016</font><font color="#CCCCCC"> and I'm a</font>

10
00:00:26,210 --> 00:00:31,970
part<font color="#E5E5E5"> of their kubera team so we'll</font>

11
00:00:29,630 --> 00:00:34,579
briefly talk about kubernetes<font color="#CCCCCC"> and</font>

12
00:00:31,970 --> 00:00:36,920
metrics collection in kubernetes<font color="#E5E5E5"> the</font>

13
00:00:34,579 --> 00:00:38,840
main sources<font color="#E5E5E5"> the key sources for metrics</font>

14
00:00:36,920 --> 00:00:40,820
collection<font color="#E5E5E5"> we'll see how it comes</font>

15
00:00:38,840 --> 00:00:44,090
<font color="#CCCCCC">together for Matthias to provide us a</font>

16
00:00:40,820 --> 00:00:46,250
full monitoring pipeline solution having

17
00:00:44,090 --> 00:00:49,579
<font color="#E5E5E5">covered that we want to throw in virtual</font>

18
00:00:46,250 --> 00:00:52,519
machines into the mix<font color="#E5E5E5"> so we'll briefly</font>

19
00:00:49,579 --> 00:00:55,489
look what<font color="#E5E5E5"> Qbert is that brings virtual</font>

20
00:00:52,519 --> 00:00:57,379
machines on top of kubernetes<font color="#CCCCCC"> see from</font>

21
00:00:55,489 --> 00:01:00,260
past experience what we have collected

22
00:00:57,379 --> 00:01:03,760
the<font color="#CCCCCC"> for virtual machine and matrixes</font><font color="#E5E5E5"> and</font>

23
00:01:00,260 --> 00:01:07,640
see how it<font color="#CCCCCC"> all comes together eventually</font>

24
00:01:03,760 --> 00:01:11,210
<font color="#E5E5E5">so we have kubernetes as a start as our</font>

25
00:01:07,640 --> 00:01:14,540
container centric platform<font color="#CCCCCC"> Orchestrator</font>

26
00:01:11,210 --> 00:01:18,110
<font color="#E5E5E5">that orchestrates computational nodes</font>

27
00:01:14,540 --> 00:01:19,430
<font color="#E5E5E5">and pods network storage database</font><font color="#CCCCCC"> all of</font>

28
00:01:18,110 --> 00:01:22,130
components<font color="#CCCCCC"> that you would like</font><font color="#E5E5E5"> to</font>

29
00:01:19,430 --> 00:01:23,659
monitor<font color="#E5E5E5"> in</font><font color="#CCCCCC"> your system</font><font color="#E5E5E5"> and the second</font>

30
00:01:22,130 --> 00:01:26,449
building<font color="#CCCCCC"> block here is</font><font color="#E5E5E5"> prometheus</font>

31
00:01:23,659 --> 00:01:29,390
<font color="#E5E5E5">Prometheus was is was originated in</font>

32
00:01:26,450 --> 00:01:34,159
<font color="#CCCCCC">Sound Cloud</font><font color="#E5E5E5"> in 2012 now it's an open</font>

33
00:01:29,390 --> 00:01:37,100
<font color="#E5E5E5">source community</font><font color="#CCCCCC"> it's a monitoring and</font>

34
00:01:34,159 --> 00:01:42,229
alerting system it's a<font color="#CCCCCC"> multi-dimensional</font>

35
00:01:37,100 --> 00:01:44,809
<font color="#E5E5E5">label based model it based it's based on</font>

36
00:01:42,229 --> 00:01:49,549
a time series<font color="#E5E5E5"> the data which is</font>

37
00:01:44,810 --> 00:01:52,119
<font color="#E5E5E5">comprised of</font><font color="#CCCCCC"> a key key value pairs it</font>

38
00:01:49,549 --> 00:01:55,850
has a very strong<font color="#CCCCCC"> a query language</font>

39
00:01:52,119 --> 00:01:58,880
promiscuous prompt<font color="#CCCCCC"> QL</font><font color="#E5E5E5"> that analyzes that</font>

40
00:01:55,850 --> 00:02:03,259
time series data and you can<font color="#CCCCCC"> see it</font>

41
00:01:58,880 --> 00:02:05,390
really<font color="#E5E5E5"> integrates in a natively almost</font>

42
00:02:03,259 --> 00:02:08,690
<font color="#E5E5E5">way with kubernetes</font><font color="#CCCCCC"> Sam the</font><font color="#E5E5E5"> community's</font>

43
00:02:05,390 --> 00:02:10,280
components already has integrated<font color="#E5E5E5"> or</font>

44
00:02:08,690 --> 00:02:15,260
have integrated the<font color="#E5E5E5"> primitives</font>

45
00:02:10,280 --> 00:02:17,120
a quick view on the model<font color="#E5E5E5"> so in a minute</font>

46
00:02:15,260 --> 00:02:18,470
<font color="#E5E5E5">we have the Prometheus server that</font>

47
00:02:17,120 --> 00:02:21,590
scrapes and<font color="#E5E5E5"> pooled that</font>

48
00:02:18,470 --> 00:02:24,560
<font color="#E5E5E5">through HTTP endpoints into its server</font>

49
00:02:21,590 --> 00:02:27,260
<font color="#CCCCCC">collects</font><font color="#E5E5E5"> then aggregates that data on</font>

50
00:02:24,560 --> 00:02:30,830
<font color="#E5E5E5">the data you can</font><font color="#CCCCCC"> perform a prompt QL</font>

51
00:02:27,260 --> 00:02:34,160
series in order<font color="#CCCCCC"> to</font><font color="#E5E5E5"> analyze it and move</font>

52
00:02:30,830 --> 00:02:37,490
it on<font color="#E5E5E5"> aggregate the data and even create</font>

53
00:02:34,160 --> 00:02:40,250
the alerting alerting are pushed to<font color="#E5E5E5"> the</font>

54
00:02:37,490 --> 00:02:42,860
alert manager<font color="#CCCCCC"> into its clients and you</font>

55
00:02:40,250 --> 00:02:45,680
<font color="#E5E5E5">can also use</font><font color="#CCCCCC"> grow fauna</font><font color="#E5E5E5"> or other API</font>

56
00:02:42,860 --> 00:02:49,310
clients to visualize that data<font color="#E5E5E5"> but again</font>

57
00:02:45,680 --> 00:02:52,760
<font color="#E5E5E5">our</font><font color="#CCCCCC"> main focus here is matrix collection</font>

58
00:02:49,310 --> 00:02:55,760
so because Prometheus needs as much as

59
00:02:52,760 --> 00:02:58,700
<font color="#CCCCCC">auto discovery</font><font color="#E5E5E5"> as it can get</font><font color="#CCCCCC"> it needs to</font>

60
00:02:55,760 --> 00:03:02,780
scrape data pull data from<font color="#E5E5E5"> matrix</font>

61
00:02:58,700 --> 00:03:04,670
<font color="#E5E5E5">endpoints HTTP endpoints for</font><font color="#CCCCCC"> that it's</font>

62
00:03:02,780 --> 00:03:08,330
very<font color="#E5E5E5"> easy to integrate with kubernetes</font>

63
00:03:04,670 --> 00:03:13,429
since it exposes these endpoints<font color="#E5E5E5"> on on</font>

64
00:03:08,330 --> 00:03:15,140
<font color="#CCCCCC">API is on HTTP as I said some of the</font>

65
00:03:13,430 --> 00:03:17,360
<font color="#CCCCCC">matrix is already exposed through the</font>

66
00:03:15,140 --> 00:03:23,899
matrix<font color="#E5E5E5"> endpoint and some we need to be</font>

67
00:03:17,360 --> 00:03:26,150
added and collected so I'll go<font color="#CCCCCC"> over two</font>

68
00:03:23,900 --> 00:03:29,800
or<font color="#E5E5E5"> three sources of matrixes in</font>

69
00:03:26,150 --> 00:03:33,290
kubernetes in the community say

70
00:03:29,800 --> 00:03:36,580
architecture the first one of them<font color="#E5E5E5"> is</font>

71
00:03:33,290 --> 00:03:40,030
<font color="#E5E5E5">host matrix kubernetes notes so</font>

72
00:03:36,580 --> 00:03:43,490
kubernetes knows didn't have natively

73
00:03:40,030 --> 00:03:45,790
<font color="#E5E5E5">exposing matrix endpoints for</font><font color="#CCCCCC"> that we</font>

74
00:03:43,490 --> 00:03:49,340
they had to<font color="#E5E5E5"> write an exporter an</font>

75
00:03:45,790 --> 00:03:51,799
exporter is<font color="#E5E5E5"> Prometheus exporter is a</font>

76
00:03:49,340 --> 00:03:54,020
service that<font color="#E5E5E5"> collects you all of your</font>

77
00:03:51,800 --> 00:03:55,790
data from your node for that<font color="#E5E5E5"> good</font>

78
00:03:54,020 --> 00:03:59,000
example<font color="#E5E5E5"> or any other data you need to</font>

79
00:03:55,790 --> 00:04:01,609
expose from your application<font color="#CCCCCC"> etc</font><font color="#E5E5E5"> exposes</font>

80
00:03:59,000 --> 00:04:03,200
them on the<font color="#CCCCCC"> permittee assay endpoint</font><font color="#E5E5E5"> so</font>

81
00:04:01,610 --> 00:04:07,640
primitives<font color="#CCCCCC"> can come discover it and</font>

82
00:04:03,200 --> 00:04:10,519
scrape them<font color="#E5E5E5"> out so node node metrics are</font>

83
00:04:07,640 --> 00:04:13,670
scraped from proc<font color="#E5E5E5"> and you get all your</font>

84
00:04:10,520 --> 00:04:16,850
familiar<font color="#CCCCCC"> house statistics such as node</font>

85
00:04:13,670 --> 00:04:20,510
CPU node CPU for example has like<font color="#CCCCCC"> 15</font>

86
00:04:16,850 --> 00:04:21,200
dimensions of<font color="#CCCCCC"> matrix type Rossi to you</font>

87
00:04:20,510 --> 00:04:23,570
like either

88
00:04:21,200 --> 00:04:26,750
I await<font color="#E5E5E5"> but if you want to analyze for</font>

89
00:04:23,570 --> 00:04:30,590
example how<font color="#E5E5E5"> much time the CPU spent on a</font>

90
00:04:26,750 --> 00:04:31,879
node or<font color="#E5E5E5"> pair CPU core you can perform a</font>

91
00:04:30,590 --> 00:04:34,520
promise<font color="#CCCCCC"> QL</font>

92
00:04:31,879 --> 00:04:36,740
<font color="#E5E5E5">and remove these and get your</font><font color="#CCCCCC"> note CPU</font>

93
00:04:34,520 --> 00:04:39,529
statistics are there are of course

94
00:04:36,740 --> 00:04:42,020
memory memory<font color="#CCCCCC"> available</font><font color="#E5E5E5"> you can also</font>

95
00:04:39,529 --> 00:04:46,520
perform queries against the total<font color="#CCCCCC"> memory</font>

96
00:04:42,020 --> 00:04:48,740
left there are more advanced matrix<font color="#E5E5E5"> then</font>

97
00:04:46,520 --> 00:04:51,649
only note statistic if<font color="#CCCCCC"> you look at it in</font>

98
00:04:48,740 --> 00:04:53,419
<font color="#CCCCCC">a kubernetes kind of way</font><font color="#E5E5E5"> for that we</font>

99
00:04:51,649 --> 00:04:55,969
have another component<font color="#E5E5E5"> called cube state</font>

100
00:04:53,419 --> 00:04:58,219
<font color="#CCCCCC">metrics which</font><font color="#E5E5E5"> looks at it from</font><font color="#CCCCCC"> the</font>

101
00:04:55,969 --> 00:05:03,099
kubernetes way and<font color="#E5E5E5"> also takes into</font>

102
00:04:58,219 --> 00:05:03,099
<font color="#CCCCCC">account memory limits and CPU limits</font>

103
00:05:03,519 --> 00:05:09,740
moving on so in our<font color="#E5E5E5"> house we have</font>

104
00:05:06,559 --> 00:05:12,769
containers<font color="#E5E5E5"> and containers metrics are</font>

105
00:05:09,740 --> 00:05:15,159
exposed to see<font color="#E5E5E5"> advisor</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> see advisor</font>

106
00:05:12,769 --> 00:05:18,649
provides you data about containers

107
00:05:15,159 --> 00:05:20,899
<font color="#CCCCCC">runtimes such as docker</font><font color="#E5E5E5"> or cryo it is</font>

108
00:05:18,649 --> 00:05:24,110
<font color="#E5E5E5">embedded in the cubelet so cubelet</font>

109
00:05:20,899 --> 00:05:26,509
natively exposes an<font color="#E5E5E5"> endpoint to</font><font color="#CCCCCC"> two</font>

110
00:05:24,110 --> 00:05:28,339
slash metrics which is a port for for

111
00:05:26,509 --> 00:05:31,039
<font color="#CCCCCC">Prometheus</font><font color="#E5E5E5"> so we don't need to</font><font color="#CCCCCC"> add</font>

112
00:05:28,339 --> 00:05:34,189
additional exporters to collect that

113
00:05:31,039 --> 00:05:36,800
data<font color="#E5E5E5"> so you analyze these metrics and</font>

114
00:05:34,189 --> 00:05:39,199
resources usage and expose them<font color="#E5E5E5"> on the</font>

115
00:05:36,800 --> 00:05:44,300
metrics<font color="#E5E5E5"> these are also also call the</font>

116
00:05:39,199 --> 00:05:47,719
core metrics for each container and

117
00:05:44,300 --> 00:05:50,259
again much like<font color="#CCCCCC"> know</font><font color="#E5E5E5"> just in just in a</font>

118
00:05:47,719 --> 00:05:55,159
container view you have your original

119
00:05:50,259 --> 00:05:58,029
<font color="#CCCCCC">CPU matrix in memory memory actually</font>

120
00:05:55,159 --> 00:06:00,199
this matrix is very advanced it's it's a

121
00:05:58,029 --> 00:06:03,050
in the<font color="#CCCCCC"> nimac</font><font color="#E5E5E5"> so you know it gives you</font>

122
00:06:00,199 --> 00:06:05,679
actually the exact memory usage you<font color="#CCCCCC"> have</font>

123
00:06:03,050 --> 00:06:09,409
left<font color="#E5E5E5"> taking into consideration all other</font>

124
00:06:05,679 --> 00:06:12,679
matrix you<font color="#CCCCCC"> have and you have under your</font>

125
00:06:09,409 --> 00:06:15,399
container<font color="#CCCCCC"> and of course memory</font>

126
00:06:12,679 --> 00:06:15,399
transmission

127
00:06:15,430 --> 00:06:21,970
another part<font color="#E5E5E5"> let's look a bit on the</font>

128
00:06:18,580 --> 00:06:25,389
orchestration<font color="#E5E5E5"> parts so I'll talk about</font>

129
00:06:21,970 --> 00:06:27,639
<font color="#E5E5E5">only API</font><font color="#CCCCCC"> Silverhill so because the API</font>

130
00:06:25,389 --> 00:06:29,889
server is<font color="#E5E5E5"> the front end for kubernetes</font>

131
00:06:27,639 --> 00:06:32,560
cluster<font color="#E5E5E5"> and gets all the calls and</font>

132
00:06:29,889 --> 00:06:37,360
relays them to etcd<font color="#CCCCCC"> in controller it's</font>

133
00:06:32,560 --> 00:06:40,750
an important component<font color="#E5E5E5"> to</font><font color="#CCCCCC"> monitor</font><font color="#E5E5E5"> for</font>

134
00:06:37,360 --> 00:06:44,590
<font color="#E5E5E5">example</font><font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> create a pod</font><font color="#E5E5E5"> or run</font>

135
00:06:40,750 --> 00:06:46,690
a deployment<font color="#CCCCCC"> you want to see and it's</font>

136
00:06:44,590 --> 00:06:49,210
all done<font color="#CCCCCC"> through REST API calls</font><font color="#E5E5E5"> so you</font>

137
00:06:46,690 --> 00:06:51,130
want to see you want<font color="#E5E5E5"> to see the request</font>

138
00:06:49,210 --> 00:06:53,948
rates and latency how long did it take

139
00:06:51,130 --> 00:06:55,930
for<font color="#CCCCCC"> me to complete a</font><font color="#E5E5E5"> request to</font><font color="#CCCCCC"> create</font>

140
00:06:53,949 --> 00:06:58,300
such a<font color="#E5E5E5"> deployment for example or how</font>

141
00:06:55,930 --> 00:07:00,940
long did it take even<font color="#E5E5E5"> counting</font><font color="#CCCCCC"> the</font>

142
00:06:58,300 --> 00:07:03,280
<font color="#CCCCCC">amount of</font><font color="#E5E5E5"> that and let's say you want to</font>

143
00:07:00,940 --> 00:07:05,770
<font color="#E5E5E5">create a thousand deployments on your</font>

144
00:07:03,280 --> 00:07:08,650
<font color="#E5E5E5">cluster when you create a deployment</font><font color="#CCCCCC"> it</font>

145
00:07:05,770 --> 00:07:12,039
goes on to work use<font color="#CCCCCC"> for controllers it</font>

146
00:07:08,650 --> 00:07:14,349
<font color="#E5E5E5">accumulates in</font><font color="#CCCCCC"> cache the</font><font color="#E5E5E5"> the request for</font>

147
00:07:12,039 --> 00:07:16,389
creating objects<font color="#E5E5E5"> or deployments and if</font>

148
00:07:14,349 --> 00:07:18,460
your queue<font color="#E5E5E5"> gets accumulated and</font><font color="#CCCCCC"> get</font>

149
00:07:16,389 --> 00:07:20,320
stuck it's it's you want to<font color="#E5E5E5"> detect that</font>

150
00:07:18,460 --> 00:07:24,190
bottleneck<font color="#E5E5E5"> so it's a very important</font>

151
00:07:20,320 --> 00:07:25,870
<font color="#CCCCCC">aspect to monitor because</font><font color="#E5E5E5"> kubernetes</font>

152
00:07:24,190 --> 00:07:28,210
is based on<font color="#CCCCCC"> goal so you get</font>

153
00:07:25,870 --> 00:07:31,960
<font color="#CCCCCC">out-of-the-box goal and statistics</font>

154
00:07:28,210 --> 00:07:33,820
<font color="#E5E5E5">garbage collection memories</font><font color="#CCCCCC"> Fez</font><font color="#E5E5E5"> etc and</font>

155
00:07:31,960 --> 00:07:39,789
you<font color="#CCCCCC"> also monitored the service process</font>

156
00:07:33,820 --> 00:07:41,440
<font color="#E5E5E5">itself so</font><font color="#CCCCCC"> that was</font><font color="#E5E5E5"> only one component of</font>

157
00:07:39,789 --> 00:07:43,990
course you have metrics collection for

158
00:07:41,440 --> 00:07:49,320
scheduler the<font color="#E5E5E5"> kubernetes controller etcd</font>

159
00:07:43,990 --> 00:07:52,960
<font color="#E5E5E5">but I won't get into those now there's a</font>

160
00:07:49,320 --> 00:07:55,000
an add-on<font color="#E5E5E5"> called cube state matrix</font><font color="#CCCCCC"> this</font>

161
00:07:52,960 --> 00:07:57,310
add-on<font color="#E5E5E5"> you need to deploy as an instance</font>

162
00:07:55,000 --> 00:08:01,180
<font color="#CCCCCC">only one instance in your kubernetes</font>

163
00:07:57,310 --> 00:08:03,460
cluster and it's more<font color="#CCCCCC"> its relates more</font>

164
00:08:01,180 --> 00:08:07,510
to not health or<font color="#E5E5E5"> utilization</font>

165
00:08:03,460 --> 00:08:09,820
it focuses on counts and status<font color="#CCCCCC"> so for</font>

166
00:08:07,510 --> 00:08:12,699
<font color="#E5E5E5">example you want to check what what</font>

167
00:08:09,820 --> 00:08:16,120
status is your pod<font color="#CCCCCC"> boding in terms of</font>

168
00:08:12,699 --> 00:08:19,510
scheduling or health<font color="#E5E5E5"> not</font><font color="#CCCCCC"> helping</font><font color="#E5E5E5"> the</font>

169
00:08:16,120 --> 00:08:21,970
<font color="#E5E5E5">phase it is in you have the concept of</font>

170
00:08:19,510 --> 00:08:25,690
<font color="#E5E5E5">CPU limits or memory</font><font color="#CCCCCC"> limits we won't</font>

171
00:08:21,970 --> 00:08:26,940
<font color="#E5E5E5">allow a pod to run containers without</font>

172
00:08:25,690 --> 00:08:28,890
any boundaries

173
00:08:26,940 --> 00:08:31,320
<font color="#CCCCCC">to exhaust all of them</font><font color="#E5E5E5"> so I want to</font>

174
00:08:28,890 --> 00:08:33,030
<font color="#E5E5E5">check statistics how how much memory you</font>

175
00:08:31,320 --> 00:08:36,240
<font color="#E5E5E5">have</font><font color="#CCCCCC"> in according to your limits or</font>

176
00:08:33,030 --> 00:08:39,120
before<font color="#E5E5E5"> or provide even more</font><font color="#CCCCCC"> advanced</font>

177
00:08:36,240 --> 00:08:41,520
their queries on<font color="#CCCCCC"> these statistics there</font>

178
00:08:39,120 --> 00:08:46,410
<font color="#E5E5E5">are a thousand</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> examples in cube state</font>

179
00:08:41,520 --> 00:08:49,020
metrics<font color="#E5E5E5"> I'll talk about for example</font><font color="#CCCCCC"> the</font>

180
00:08:46,410 --> 00:08:51,900
<font color="#E5E5E5">replica sets you have</font><font color="#CCCCCC"> defined</font><font color="#E5E5E5"> a replica</font>

181
00:08:49,020 --> 00:08:54,480
set replica set you<font color="#E5E5E5"> want to run a number</font>

182
00:08:51,900 --> 00:08:56,579
<font color="#CCCCCC">of deployments</font><font color="#E5E5E5"> on your cluster and you</font>

183
00:08:54,480 --> 00:08:58,350
<font color="#CCCCCC">want to make sure that these number of</font>

184
00:08:56,580 --> 00:08:59,700
deployments<font color="#E5E5E5"> I deployments are running in</font>

185
00:08:58,350 --> 00:09:02,100
<font color="#CCCCCC">Trussell so you want to see if they</font><font color="#E5E5E5"> are</font>

186
00:08:59,700 --> 00:09:06,780
not available<font color="#CCCCCC"> how many are there in</font><font color="#E5E5E5"> the</font>

187
00:09:02,100 --> 00:09:09,870
cluster<font color="#E5E5E5"> and so on so that</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> very</font>

188
00:09:06,780 --> 00:09:12,839
<font color="#E5E5E5">briefly about kubernetes components and</font>

189
00:09:09,870 --> 00:09:14,940
sources for<font color="#CCCCCC"> metrics collection and now</font>

190
00:09:12,840 --> 00:09:19,830
we want<font color="#E5E5E5"> to add virtual machines into the</font>

191
00:09:14,940 --> 00:09:21,330
mix<font color="#E5E5E5"> so Qbert</font><font color="#CCCCCC"> Qbert comes to close the</font>

192
00:09:19,830 --> 00:09:23,550
gap<font color="#E5E5E5"> between virtual machines and</font>

193
00:09:21,330 --> 00:09:26,550
containers<font color="#E5E5E5"> under</font><font color="#CCCCCC"> the same under the</font><font color="#E5E5E5"> same</font>

194
00:09:23,550 --> 00:09:28,680
hood<font color="#E5E5E5"> and it converts infrastructure we</font>

195
00:09:26,550 --> 00:09:31,459
want to run also<font color="#E5E5E5"> virtual machines also</font>

196
00:09:28,680 --> 00:09:38,339
containers<font color="#E5E5E5"> in our in the same</font><font color="#CCCCCC"> platform</font>

197
00:09:31,460 --> 00:09:40,560
and we ask<font color="#E5E5E5"> yourself why so this is a</font>

198
00:09:38,340 --> 00:09:43,200
great allegory containers are considered

199
00:09:40,560 --> 00:09:46,890
to be lightweight<font color="#E5E5E5"> they're fast to bring</font>

200
00:09:43,200 --> 00:09:50,490
up<font color="#CCCCCC"> their natively</font><font color="#E5E5E5"> they have native</font>

201
00:09:46,890 --> 00:09:53,640
<font color="#CCCCCC">performance but virtual machines with</font>

202
00:09:50,490 --> 00:09:56,970
<font color="#CCCCCC">their bulky heavy</font><font color="#E5E5E5"> utility hard Hardware</font>

203
00:09:53,640 --> 00:09:58,770
<font color="#E5E5E5">belt are not going to disappear</font><font color="#CCCCCC"> we'll</font>

204
00:09:56,970 --> 00:10:01,080
have them<font color="#E5E5E5"> in the next five or ten years</font>

205
00:09:58,770 --> 00:10:04,800
<font color="#CCCCCC">at at least</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we'll still want to</font>

206
00:10:01,080 --> 00:10:05,850
maintain them<font color="#CCCCCC"> you can look at an example</font>

207
00:10:04,800 --> 00:10:08,339
for mainframes

208
00:10:05,850 --> 00:10:10,440
it's taken a long time<font color="#E5E5E5"> to face house</font>

209
00:10:08,340 --> 00:10:14,790
mainframes<font color="#CCCCCC"> they're see they still</font><font color="#E5E5E5"> even</font>

210
00:10:10,440 --> 00:10:17,280
exist<font color="#E5E5E5"> so so what can I do with first of</font>

211
00:10:14,790 --> 00:10:19,290
all we want to<font color="#E5E5E5"> bring the legacy we want</font>

212
00:10:17,280 --> 00:10:25,439
to run it<font color="#CCCCCC"> under the same folder</font><font color="#E5E5E5"> we don't</font>

213
00:10:19,290 --> 00:10:26,310
want to<font color="#E5E5E5"> maintain two infrastructures</font><font color="#CCCCCC"> we</font>

214
00:10:25,440 --> 00:10:27,839
don't want to maintain<font color="#E5E5E5"> two</font>

215
00:10:26,310 --> 00:10:30,839
infrastructure so we're going to<font color="#E5E5E5"> mix</font><font color="#CCCCCC"> and</font>

216
00:10:27,839 --> 00:10:33,900
<font color="#E5E5E5">match and add virtualization on top of</font>

217
00:10:30,839 --> 00:10:36,330
kubernetes that's also getting all the

218
00:10:33,900 --> 00:10:40,709
kubernetes advantages such as<font color="#CCCCCC"> scheduling</font>

219
00:10:36,330 --> 00:10:43,740
the storage networking<font color="#E5E5E5"> well some</font>

220
00:10:40,710 --> 00:10:47,070
and fixes to manage to do that<font color="#E5E5E5"> we are</font>

221
00:10:43,740 --> 00:10:49,410
also in<font color="#E5E5E5"> the use</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> Qbert</font><font color="#CCCCCC"> and running</font>

222
00:10:47,070 --> 00:10:52,260
<font color="#CCCCCC">virtual machines on the</font><font color="#E5E5E5"> kubernetes</font>

223
00:10:49,410 --> 00:10:54,480
cluster<font color="#E5E5E5"> you can also enable and run any</font>

224
00:10:52,260 --> 00:10:56,930
<font color="#E5E5E5">of us who want to run on coop on top of</font>

225
00:10:54,480 --> 00:10:56,930
kubernetes

226
00:10:58,100 --> 00:11:03,690
so this is governor<font color="#E5E5E5"> this and we</font><font color="#CCCCCC"> added to</font>

227
00:11:01,770 --> 00:11:05,460
the mix some virtual machine components

228
00:11:03,690 --> 00:11:07,890
again<font color="#CCCCCC"> I won't</font><font color="#E5E5E5"> go too deep into the</font>

229
00:11:05,460 --> 00:11:11,010
components so on the left you<font color="#CCCCCC"> can see</font>

230
00:11:07,890 --> 00:11:13,710
<font color="#CCCCCC">the node in the node we have a pod which</font>

231
00:11:11,010 --> 00:11:16,620
runs a<font color="#CCCCCC"> vm via virtual machines runs on</font>

232
00:11:13,710 --> 00:11:19,580
pods<font color="#CCCCCC"> you know and you have also</font><font color="#E5E5E5"> side</font><font color="#CCCCCC"> the</font>

233
00:11:16,620 --> 00:11:23,460
containers on that pod<font color="#E5E5E5"> to enable</font>

234
00:11:19,580 --> 00:11:25,680
utilization such as<font color="#E5E5E5"> they lived it</font><font color="#CCCCCC"> they</font>

235
00:11:23,460 --> 00:11:27,740
also have key components very resembling

236
00:11:25,680 --> 00:11:31,290
kubernetes components like<font color="#CCCCCC"> via type i</font>

237
00:11:27,740 --> 00:11:33,990
same as<font color="#E5E5E5"> api server to create your</font>

238
00:11:31,290 --> 00:11:36,650
virtual machine<font color="#E5E5E5"> CL</font><font color="#CCCCCC"> these pass them on to</font>

239
00:11:33,990 --> 00:11:40,230
you<font color="#CCCCCC"> TC d having the built controller</font>

240
00:11:36,650 --> 00:11:42,120
identifying that creating a pod<font color="#E5E5E5"> running</font>

241
00:11:40,230 --> 00:11:44,760
a virtual<font color="#CCCCCC"> machine on a pod</font><font color="#E5E5E5"> and also</font>

242
00:11:42,120 --> 00:11:47,030
scheduling<font color="#E5E5E5"> it to a node once it's</font>

243
00:11:44,760 --> 00:11:50,280
scheduled to<font color="#E5E5E5"> a node the virtual machine</font>

244
00:11:47,030 --> 00:11:53,220
gets the nodes<font color="#E5E5E5"> assigned and then all the</font>

245
00:11:50,280 --> 00:11:55,680
handling<font color="#E5E5E5"> of the vm</font><font color="#CCCCCC"> life cycles</font><font color="#E5E5E5"> moves to</font>

246
00:11:53,220 --> 00:12:01,680
the virtual handler again<font color="#E5E5E5"> on top of the</font>

247
00:11:55,680 --> 00:12:02,040
<font color="#E5E5E5">the</font><font color="#CCCCCC"> fork so of course I added something</font>

248
00:12:01,680 --> 00:12:04,349
new

249
00:12:02,040 --> 00:12:07,230
I have monitoring on kubernetes<font color="#E5E5E5"> I want</font>

250
00:12:04,350 --> 00:12:09,260
to also<font color="#CCCCCC"> monitor virtual machines so I</font>

251
00:12:07,230 --> 00:12:12,720
want to<font color="#E5E5E5"> figure out</font><font color="#CCCCCC"> first what to collect</font>

252
00:12:09,260 --> 00:12:16,020
so a quick<font color="#CCCCCC"> example from pure</font>

253
00:12:12,720 --> 00:12:19,740
<font color="#E5E5E5">virtualization overt other</font><font color="#CCCCCC"> it uses</font>

254
00:12:16,020 --> 00:12:21,930
collect<font color="#CCCCCC"> D</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> collected matrixes it has</font>

255
00:12:19,740 --> 00:12:25,410
powerful plugins<font color="#E5E5E5"> a lot of plugins</font><font color="#CCCCCC"> they</font>

256
00:12:21,930 --> 00:12:27,000
<font color="#E5E5E5">can add 2 to it and run it it it gets</font>

257
00:12:25,410 --> 00:12:30,030
you how statistics<font color="#E5E5E5"> database statistics</font>

258
00:12:27,000 --> 00:12:31,860
<font color="#CCCCCC">angel engine stats and more more</font>

259
00:12:30,030 --> 00:12:34,770
important<font color="#E5E5E5"> for us right</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> it's virtual</font>

260
00:12:31,860 --> 00:12:37,260
machine statistics so for virtual

261
00:12:34,770 --> 00:12:40,020
machine statistics<font color="#E5E5E5"> we have a</font><font color="#CCCCCC"> wheeled</font>

262
00:12:37,260 --> 00:12:42,120
<font color="#CCCCCC">plugin</font><font color="#E5E5E5"> will again communicates with</font>

263
00:12:40,020 --> 00:12:44,970
library and library gives us the

264
00:12:42,120 --> 00:12:46,860
<font color="#E5E5E5">information about the</font><font color="#CCCCCC"> virtual machine so</font>

265
00:12:44,970 --> 00:12:49,380
of course you<font color="#E5E5E5"> are introducing</font><font color="#CCCCCC"> here some</font>

266
00:12:46,860 --> 00:12:52,070
new aspects<font color="#E5E5E5"> not necessarily all will be</font>

267
00:12:49,380 --> 00:12:54,510
monitored and adapted<font color="#CCCCCC"> to kubernetes but</font>

268
00:12:52,070 --> 00:12:59,090
virtual CPU how much time<font color="#CCCCCC"> I</font><font color="#E5E5E5"> get</font>

269
00:12:54,510 --> 00:13:02,850
was<font color="#E5E5E5"> running on a CPU memory some</font>

270
00:12:59,090 --> 00:13:05,370
specific related<font color="#CCCCCC"> memory</font><font color="#E5E5E5"> matrix like</font>

271
00:13:02,850 --> 00:13:09,810
ballooning or over-commitment

272
00:13:05,370 --> 00:13:12,480
memory management matrixes<font color="#E5E5E5"> disk reads</font>

273
00:13:09,810 --> 00:13:14,339
and white flashes for discus<font color="#E5E5E5"> for disks</font>

274
00:13:12,480 --> 00:13:16,140
<font color="#E5E5E5">and also</font><font color="#CCCCCC"> network aspects</font>

275
00:13:14,340 --> 00:13:18,930
some of them might merge from the

276
00:13:16,140 --> 00:13:21,240
benefit of kubernetes<font color="#E5E5E5"> but we might want</font>

277
00:13:18,930 --> 00:13:24,060
<font color="#CCCCCC">to adjust them</font><font color="#E5E5E5"> to virtual machines</font><font color="#CCCCCC"> but</font>

278
00:13:21,240 --> 00:13:26,310
some will need<font color="#E5E5E5"> to add one strong example</font>

279
00:13:24,060 --> 00:13:28,979
I can give<font color="#E5E5E5"> you that kubernetes has a</font>

280
00:13:26,310 --> 00:13:33,050
scheduler<font color="#CCCCCC"> a very strong catch schedule</font>

281
00:13:28,980 --> 00:13:34,830
but it doesn't have like<font color="#E5E5E5"> a</font><font color="#CCCCCC"> tea</font>

282
00:13:33,050 --> 00:13:37,740
<font color="#CCCCCC">scheduling policies we have in</font>

283
00:13:34,830 --> 00:13:39,750
<font color="#E5E5E5">virtualization and we want and we'll</font>

284
00:13:37,740 --> 00:13:42,330
probably add these policy<font color="#CCCCCC"> also to the</font>

285
00:13:39,750 --> 00:13:44,610
scheduler so we want to see why our

286
00:13:42,330 --> 00:13:47,520
<font color="#E5E5E5">cluster behaves in such scheduling</font>

287
00:13:44,610 --> 00:13:49,860
matter like let's say<font color="#E5E5E5"> hi</font><font color="#CCCCCC"> variable H a</font>

288
00:13:47,520 --> 00:13:51,720
<font color="#E5E5E5">reservation</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we also want to monitor</font>

289
00:13:49,860 --> 00:13:54,060
<font color="#CCCCCC">that maybe we'll decide in the future to</font>

290
00:13:51,720 --> 00:13:58,530
change<font color="#E5E5E5"> the scheduling policy</font><font color="#CCCCCC"> so it's a</font>

291
00:13:54,060 --> 00:14:00,810
very important aspect so we<font color="#CCCCCC"> consistently</font>

292
00:13:58,530 --> 00:14:06,569
<font color="#CCCCCC">similarities and add in a virtual</font>

293
00:14:00,810 --> 00:14:09,329
<font color="#CCCCCC">machine statistics so coming back again</font>

294
00:14:06,570 --> 00:14:12,150
to<font color="#CCCCCC"> prometheus and kubernetes</font><font color="#E5E5E5"> we had our</font>

295
00:14:09,330 --> 00:14:15,630
collection node exporters cube

296
00:14:12,150 --> 00:14:17,459
<font color="#CCCCCC">components cubed matrix and of</font><font color="#E5E5E5"> course</font>

297
00:14:15,630 --> 00:14:19,470
we're missing<font color="#E5E5E5"> the a collection for</font>

298
00:14:17,460 --> 00:14:21,690
virtual machine virtual machines and

299
00:14:19,470 --> 00:14:24,450
<font color="#E5E5E5">cubed</font><font color="#CCCCCC"> just came in so we</font><font color="#E5E5E5"> need to write a</font>

300
00:14:21,690 --> 00:14:28,680
custom exporter<font color="#E5E5E5"> very much like not</font>

301
00:14:24,450 --> 00:14:31,710
exported<font color="#E5E5E5"> so for that we need primitives</font>

302
00:14:28,680 --> 00:14:34,500
exporters<font color="#E5E5E5"> writing an exponent can be</font>

303
00:14:31,710 --> 00:14:37,020
<font color="#E5E5E5">done in Prometheus client library for us</font>

304
00:14:34,500 --> 00:14:40,710
it was<font color="#CCCCCC"> very easy it's mainly in go so</font>

305
00:14:37,020 --> 00:14:42,720
it's very native<font color="#E5E5E5"> to write it so that</font>

306
00:14:40,710 --> 00:14:45,630
that exporter will collect your<font color="#E5E5E5"> data</font>

307
00:14:42,720 --> 00:14:50,040
from<font color="#E5E5E5"> the app matrix it will</font><font color="#CCCCCC"> expose it on</font>

308
00:14:45,630 --> 00:14:52,680
matrix endpoint from kubernetes<font color="#CCCCCC"> flash</font>

309
00:14:50,040 --> 00:14:56,160
<font color="#E5E5E5">matrix and it will be available</font><font color="#CCCCCC"> to</font>

310
00:14:52,680 --> 00:14:58,140
scraped<font color="#E5E5E5"> by Prometheus server so we'll</font>

311
00:14:56,160 --> 00:15:00,530
add custom<font color="#CCCCCC"> X</font><font color="#E5E5E5"> photos for our</font><font color="#CCCCCC"> virtual</font>

312
00:14:58,140 --> 00:15:00,530
machines

313
00:15:00,930 --> 00:15:09,329
and<font color="#E5E5E5"> we'll now start</font><font color="#CCCCCC"> pulling</font><font color="#E5E5E5"> other</font>

314
00:15:04,589 --> 00:15:10,680
components so we<font color="#CCCCCC"> have the kubernetes</font>

315
00:15:09,329 --> 00:15:13,319
components and now we talked about

316
00:15:10,680 --> 00:15:15,959
<font color="#E5E5E5">virtual machine matrix we talked about</font>

317
00:15:13,319 --> 00:15:17,459
<font color="#E5E5E5">components for video for orchestrating</font>

318
00:15:15,959 --> 00:15:20,729
the virtual machines such as they<font color="#E5E5E5"> have</font>

319
00:15:17,459 --> 00:15:22,949
built API<font color="#E5E5E5"> in the field controller we</font>

320
00:15:20,730 --> 00:15:25,649
<font color="#E5E5E5">have also processes that running inside</font>

321
00:15:22,949 --> 00:15:30,649
<font color="#CCCCCC">the</font><font color="#E5E5E5"> pod as I said for enabling</font>

322
00:15:25,649 --> 00:15:30,649
virtualization<font color="#E5E5E5"> such as</font><font color="#CCCCCC"> library and</font><font color="#E5E5E5"> qmo</font><font color="#CCCCCC"> I</font>

323
00:15:31,339 --> 00:15:38,790
want to complete the picture<font color="#E5E5E5"> in a small</font>

324
00:15:34,230 --> 00:15:41,790
note about the whole cluster<font color="#CCCCCC"> in order to</font>

325
00:15:38,790 --> 00:15:44,459
deploy<font color="#E5E5E5"> Prometheus servers on a</font>

326
00:15:41,790 --> 00:15:46,379
kubernetes cluster we<font color="#CCCCCC"> can use very</font>

327
00:15:44,459 --> 00:15:50,489
easily<font color="#CCCCCC"> prometheus operator</font>

328
00:15:46,379 --> 00:15:52,139
it's from<font color="#CCCCCC"> it's it has two main</font>

329
00:15:50,490 --> 00:15:54,240
functionalities<font color="#CCCCCC"> its first of all</font><font color="#E5E5E5"> to</font>

330
00:15:52,139 --> 00:15:57,119
deploy and manage the primitive server

331
00:15:54,240 --> 00:16:01,139
<font color="#E5E5E5">you get also alert manager you can get</font>

332
00:15:57,119 --> 00:16:03,360
also<font color="#CCCCCC"> note exporters or other responses</font>

333
00:16:01,139 --> 00:16:06,589
you may<font color="#E5E5E5"> define and also important to</font>

334
00:16:03,360 --> 00:16:09,749
watch your components on the cluster so

335
00:16:06,589 --> 00:16:11,759
we added virtual machine and in order<font color="#E5E5E5"> to</font>

336
00:16:09,749 --> 00:16:13,679
watch them<font color="#E5E5E5"> we have a previous operator</font>

337
00:16:11,759 --> 00:16:16,379
we have<font color="#E5E5E5"> an entity called a service</font>

338
00:16:13,679 --> 00:16:19,589
<font color="#E5E5E5">monitor you define the port you define</font>

339
00:16:16,379 --> 00:16:22,139
the objects you want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> monitor</font><font color="#E5E5E5"> you add</font>

340
00:16:19,589 --> 00:16:26,189
the corresponding<font color="#E5E5E5"> labels for that matter</font>

341
00:16:22,139 --> 00:16:29,029
<font color="#E5E5E5">and if you now create</font><font color="#CCCCCC"> new</font><font color="#E5E5E5"> series it</font>

342
00:16:26,189 --> 00:16:31,559
detects that and<font color="#E5E5E5"> start scraping these</font>

343
00:16:29,029 --> 00:16:34,550
these metrics also for virtual machines

344
00:16:31,559 --> 00:16:34,550
<font color="#E5E5E5">in our case</font>

345
00:16:36,340 --> 00:16:43,940
so<font color="#E5E5E5"> cubed metrics so I'm taking</font><font color="#CCCCCC"> you back</font>

346
00:16:41,330 --> 00:16:46,310
<font color="#E5E5E5">so we looked at</font><font color="#CCCCCC"> metrics we collect for</font>

347
00:16:43,940 --> 00:16:49,340
kubernetes<font color="#E5E5E5"> some came from the cubelet</font>

348
00:16:46,310 --> 00:16:54,469
<font color="#E5E5E5">some came from node and components it is</font>

349
00:16:49,340 --> 00:16:57,410
<font color="#E5E5E5">CD scheduler and controllers and now</font>

350
00:16:54,470 --> 00:17:00,680
adding to our mix we add<font color="#E5E5E5"> the</font><font color="#CCCCCC"> very</font>

351
00:16:57,410 --> 00:17:03,890
controller<font color="#E5E5E5"> and we have the very PI and</font>

352
00:17:00,680 --> 00:17:07,179
the<font color="#E5E5E5"> veiled handler</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I and I</font><font color="#CCCCCC"> told you</font>

353
00:17:03,890 --> 00:17:10,730
<font color="#E5E5E5">it's very something the kubernetes</font>

354
00:17:07,180 --> 00:17:13,819
<font color="#E5E5E5">components so if we look back at the API</font>

355
00:17:10,730 --> 00:17:15,860
server<font color="#E5E5E5"> we talked about it square</font>

356
00:17:13,819 --> 00:17:18,020
communicating with controller<font color="#CCCCCC"> walk use</font>

357
00:17:15,859 --> 00:17:20,659
and performance<font color="#E5E5E5"> it's it</font><font color="#CCCCCC"> has native</font>

358
00:17:18,020 --> 00:17:24,189
statistic about<font color="#E5E5E5"> goal and and it also</font>

359
00:17:20,660 --> 00:17:27,620
handles the REST API requests and

360
00:17:24,189 --> 00:17:30,920
measures them<font color="#E5E5E5"> so very similar</font><font color="#CCCCCC"> we have</font>

361
00:17:27,619 --> 00:17:33,770
<font color="#E5E5E5">the</font><font color="#CCCCCC"> convert will control a walk use</font><font color="#E5E5E5"> we</font>

362
00:17:30,920 --> 00:17:36,860
want to want<font color="#E5E5E5"> to go</font><font color="#CCCCCC"> over that</font><font color="#E5E5E5"> and get</font>

363
00:17:33,770 --> 00:17:39,770
<font color="#CCCCCC">statistics about that we have cue Layton</font>

364
00:17:36,860 --> 00:17:42,370
<font color="#CCCCCC">series</font><font color="#E5E5E5"> work duration and number</font><font color="#CCCCCC"> of the</font>

365
00:17:39,770 --> 00:17:46,520
time<font color="#CCCCCC"> also the caches</font><font color="#E5E5E5"> that comes from go</font>

366
00:17:42,370 --> 00:17:49,629
race REST API calls again very<font color="#E5E5E5"> similar</font>

367
00:17:46,520 --> 00:17:49,629
to the API<font color="#CCCCCC"> so</font><font color="#E5E5E5"> low</font>

368
00:17:52,410 --> 00:17:57,000
and now I want<font color="#E5E5E5"> to focus specifically on</font>

369
00:17:55,140 --> 00:17:59,640
virtual<font color="#CCCCCC"> machine' statistics so the</font>

370
00:17:57,000 --> 00:18:02,100
<font color="#E5E5E5">previous</font><font color="#CCCCCC"> were general components in a</font>

371
00:17:59,640 --> 00:18:04,530
kubernetes cluster<font color="#E5E5E5"> here you drill</font><font color="#CCCCCC"> down</font>

372
00:18:02,100 --> 00:18:08,010
into the<font color="#E5E5E5"> virtual machine statistics and</font>

373
00:18:04,530 --> 00:18:11,610
<font color="#CCCCCC">matrixes</font><font color="#E5E5E5"> so two major parts</font><font color="#CCCCCC"> virtual</font>

374
00:18:08,010 --> 00:18:13,440
<font color="#CCCCCC">machine matrix which we saw how how and</font>

375
00:18:11,610 --> 00:18:16,469
what<font color="#CCCCCC"> we collect</font><font color="#E5E5E5"> in overt in a pure</font>

376
00:18:13,440 --> 00:18:19,680
virtualization environment<font color="#E5E5E5"> and processes</font>

377
00:18:16,470 --> 00:18:23,640
<font color="#E5E5E5">so</font><font color="#CCCCCC"> for processor its</font><font color="#E5E5E5"> I'll say it's more</font>

378
00:18:19,680 --> 00:18:26,580
for<font color="#CCCCCC"> deployment the developer utility and</font>

379
00:18:23,640 --> 00:18:32,340
less for real cluster and management and

380
00:18:26,580 --> 00:18:34,590
observability<font color="#E5E5E5"> and these processes for</font>

381
00:18:32,340 --> 00:18:36,449
example<font color="#E5E5E5"> are also scraped from proc like</font>

382
00:18:34,590 --> 00:18:43,860
a node exporter and<font color="#E5E5E5"> we get metrics about</font>

383
00:18:36,450 --> 00:18:46,980
<font color="#E5E5E5">them okay so some some important</font><font color="#CCCCCC"> there</font>

384
00:18:43,860 --> 00:18:50,040
information<font color="#E5E5E5"> about being</font><font color="#CCCCCC"> metrics we</font><font color="#E5E5E5"> can</font>

385
00:18:46,980 --> 00:18:52,710
see the four pillars<font color="#CCCCCC"> of metrics we</font>

386
00:18:50,040 --> 00:18:55,800
collected in<font color="#E5E5E5"> Oviatt and usually these</font>

387
00:18:52,710 --> 00:18:57,180
pillars are repeating themselves<font color="#E5E5E5"> in all</font>

388
00:18:55,800 --> 00:18:59,820
of the matrix these are not the only

389
00:18:57,180 --> 00:19:02,880
<font color="#E5E5E5">matrix</font><font color="#CCCCCC"> will collect but these these are</font>

390
00:18:59,820 --> 00:19:06,720
the most prominent example so for

391
00:19:02,880 --> 00:19:08,880
example<font color="#E5E5E5"> V a V</font><font color="#CCCCCC"> n CPU</font><font color="#E5E5E5"> or CPU time I want</font>

392
00:19:06,720 --> 00:19:11,610
<font color="#E5E5E5">to see my guest CPU how much time they</font>

393
00:19:08,880 --> 00:19:13,830
use memory<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> you want to</font>

394
00:19:11,610 --> 00:19:16,560
<font color="#E5E5E5">create a</font><font color="#CCCCCC"> matrix that is</font><font color="#E5E5E5"> composed for</font>

395
00:19:13,830 --> 00:19:19,980
several<font color="#E5E5E5"> matrixes how much how much</font>

396
00:19:16,560 --> 00:19:24,500
memory<font color="#E5E5E5"> we haven't said how much actual</font>

397
00:19:19,980 --> 00:19:27,870
ballooning<font color="#E5E5E5"> was left for the VM</font><font color="#CCCCCC"> itself</font>

398
00:19:24,500 --> 00:19:30,420
<font color="#E5E5E5">our assess the amount of it all</font>

399
00:19:27,870 --> 00:19:34,110
compiling and coming down<font color="#E5E5E5"> to to</font>

400
00:19:30,420 --> 00:19:39,870
<font color="#E5E5E5">completing a collect matrix and also</font>

401
00:19:34,110 --> 00:19:42,360
about<font color="#E5E5E5"> network on the on the bottom you</font>

402
00:19:39,870 --> 00:19:44,639
<font color="#CCCCCC">can see the pod informatics which</font><font color="#E5E5E5"> I</font>

403
00:19:42,360 --> 00:19:47,790
talked about processes themselves<font color="#E5E5E5"> and</font>

404
00:19:44,640 --> 00:19:50,760
you can<font color="#CCCCCC"> see a full form of matrix how it</font>

405
00:19:47,790 --> 00:19:52,710
<font color="#E5E5E5">looks in a Prometheus</font><font color="#CCCCCC"> expose format you</font>

406
00:19:50,760 --> 00:19:55,680
<font color="#E5E5E5">have the you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> the name of</font><font color="#CCCCCC"> the metric</font>

407
00:19:52,710 --> 00:19:59,130
himself itself<font color="#E5E5E5"> which domain or for our</font>

408
00:19:55,680 --> 00:20:01,560
<font color="#CCCCCC">or matter what VM does it monitor</font><font color="#E5E5E5"> you</font>

409
00:19:59,130 --> 00:20:03,510
<font color="#E5E5E5">can add a host or other labels for that</font>

410
00:20:01,560 --> 00:20:05,629
matter<font color="#E5E5E5"> also we added the process name</font>

411
00:20:03,510 --> 00:20:08,150
and the type of matrix

412
00:20:05,630 --> 00:20:11,630
this applies to all<font color="#CCCCCC"> metrics</font><font color="#E5E5E5"> time all</font>

413
00:20:08,150 --> 00:20:16,490
metrics time<font color="#E5E5E5"> when time series format we</font>

414
00:20:11,630 --> 00:20:19,040
<font color="#E5E5E5">want to show here so this is an example</font>

415
00:20:16,490 --> 00:20:21,680
how how it will look on a graph<font color="#CCCCCC"> on a</font>

416
00:20:19,040 --> 00:20:24,280
dashboard<font color="#CCCCCC"> of course you</font><font color="#E5E5E5"> can also use</font>

417
00:20:21,680 --> 00:20:28,760
<font color="#CCCCCC">cabaña for that matter or other tools</font>

418
00:20:24,280 --> 00:20:32,270
for<font color="#CCCCCC"> a very</font><font color="#E5E5E5"> simple</font><font color="#CCCCCC"> example for</font><font color="#E5E5E5"> a VM</font>

419
00:20:28,760 --> 00:20:38,780
running<font color="#CCCCCC"> on a pod is CPU usage and memory</font>

420
00:20:32,270 --> 00:20:43,850
<font color="#E5E5E5">usage okay so in conclusion that was a</font>

421
00:20:38,780 --> 00:20:45,410
<font color="#E5E5E5">very fast talk about some some concepts</font>

422
00:20:43,850 --> 00:20:48,439
but the main take here

423
00:20:45,410 --> 00:20:50,630
is that we have we<font color="#E5E5E5"> have kubernetes and</font>

424
00:20:48,440 --> 00:20:53,060
primitives we have<font color="#E5E5E5"> this whole platform</font>

425
00:20:50,630 --> 00:20:56,420
<font color="#E5E5E5">and framework and solution existing we</font>

426
00:20:53,060 --> 00:21:00,919
have very easy extensibility for that<font color="#E5E5E5"> so</font>

427
00:20:56,420 --> 00:21:03,580
for<font color="#E5E5E5"> us by adding a new add-on</font>

428
00:21:00,920 --> 00:21:07,070
<font color="#CCCCCC">qubit and virtualization in turn a</font><font color="#E5E5E5"> mix</font>

429
00:21:03,580 --> 00:21:11,090
monitoring that was kind of native and

430
00:21:07,070 --> 00:21:15,310
very<font color="#CCCCCC"> supportive and for us we got a</font>

431
00:21:11,090 --> 00:21:20,030
complete monitor instruction and<font color="#CCCCCC"> it's</font>

432
00:21:15,310 --> 00:21:21,950
continuing<font color="#CCCCCC"> to grow as we speak for</font>

433
00:21:20,030 --> 00:21:23,960
<font color="#E5E5E5">convergence</font><font color="#CCCCCC"> for social infrastructure</font>

434
00:21:21,950 --> 00:21:26,420
<font color="#CCCCCC">but it's it shouldn't be just only</font><font color="#E5E5E5"> for</font>

435
00:21:23,960 --> 00:21:29,870
<font color="#E5E5E5">virtual machine everybody can take it</font>

436
00:21:26,420 --> 00:21:31,850
for<font color="#CCCCCC"> another is is</font><font color="#E5E5E5"> himself and if he</font><font color="#CCCCCC"> adds</font>

437
00:21:29,870 --> 00:21:34,850
new components on top of kubernetes<font color="#CCCCCC"> on</font>

438
00:21:31,850 --> 00:21:36,969
add-ons or side side application we can

439
00:21:34,850 --> 00:21:41,270
<font color="#E5E5E5">monitor that using the concepts of</font>

440
00:21:36,970 --> 00:21:43,750
primitives exporters and are there many

441
00:21:41,270 --> 00:21:43,750
notions

