1
00:00:04,680 --> 00:00:10,320
thank you ladies gentlemen<font color="#E5E5E5"> um my thank</font>

2
00:00:07,470 --> 00:00:18,169
you for my able assistant there and the

3
00:00:10,320 --> 00:00:18,170
wonders of rebooting Linux<font color="#E5E5E5"> so</font>

4
00:00:19,380 --> 00:00:23,759
we're a compiler company<font color="#E5E5E5"> and operating</font>

5
00:00:22,260 --> 00:00:27,630
systems these<font color="#E5E5E5"> days</font><font color="#CCCCCC"> but we're best known</font>

6
00:00:23,760 --> 00:00:32,120
<font color="#E5E5E5">as a compiler company and we're doing a</font>

7
00:00:27,630 --> 00:00:34,710
lot<font color="#CCCCCC"> of work</font><font color="#E5E5E5"> on risk 5 both GCC and</font><font color="#CCCCCC"> LLVM</font>

8
00:00:32,119 --> 00:00:36,660
but our particularly<font color="#E5E5E5"> speciality is</font>

9
00:00:34,710 --> 00:00:38,820
deeply<font color="#E5E5E5"> embedded systems and for deeply</font>

10
00:00:36,660 --> 00:00:44,540
embedded systems<font color="#E5E5E5"> you want your code to</font>

11
00:00:38,820 --> 00:00:46,890
<font color="#E5E5E5">be very compact and so my focus is on</font>

12
00:00:44,540 --> 00:00:49,500
how do we<font color="#CCCCCC"> make the compilers generate</font>

13
00:00:46,890 --> 00:00:52,409
very compact code<font color="#E5E5E5"> - OS and if</font><font color="#CCCCCC"> your LLVM</font>

14
00:00:49,500 --> 00:00:54,900
-<font color="#E5E5E5"> oh said as well you can only improve</font>

15
00:00:52,409 --> 00:00:57,479
<font color="#E5E5E5">something if you can measure it and this</font>

16
00:00:54,900 --> 00:01:06,900
is<font color="#E5E5E5"> about measuring the size of compiled</font>

17
00:00:57,479 --> 00:01:09,350
code for risk<font color="#E5E5E5"> 5 and this is to help</font>

18
00:01:06,900 --> 00:01:12,240
<font color="#E5E5E5">compile a designer so this talk</font><font color="#CCCCCC"> is about</font>

19
00:01:09,350 --> 00:01:14,640
<font color="#E5E5E5">seeing inside the compilers looking at</font>

20
00:01:12,240 --> 00:01:16,830
what's working<font color="#E5E5E5"> what's not investigating</font>

21
00:01:14,640 --> 00:01:19,110
and understanding it<font color="#E5E5E5"> one thing</font><font color="#CCCCCC"> I want</font><font color="#E5E5E5"> to</font>

22
00:01:16,830 --> 00:01:21,570
be clear is it's not this<font color="#E5E5E5"> I'm not trying</font>

23
00:01:19,110 --> 00:01:26,399
to<font color="#E5E5E5"> tell you which is</font><font color="#CCCCCC"> the best processor</font>

24
00:01:21,570 --> 00:01:29,189
or the<font color="#E5E5E5"> best compiler and we've looked at</font>

25
00:01:26,399 --> 00:01:33,750
<font color="#CCCCCC">three architectures we've looked at the</font>

26
00:01:29,189 --> 00:01:37,169
design where<font color="#E5E5E5"> our HS the arm cortex-m</font><font color="#CCCCCC"> for</font>

27
00:01:33,750 --> 00:01:41,670
with the thumb<font color="#CCCCCC"> - instructions</font><font color="#E5E5E5"> and the</font>

28
00:01:37,170 --> 00:01:43,710
<font color="#E5E5E5">risk 5rv</font><font color="#CCCCCC"> 32 i</font><font color="#E5E5E5"> am</font><font color="#CCCCCC"> see those are all</font>

29
00:01:41,670 --> 00:01:45,570
<font color="#E5E5E5">32-bit architectures they've all got</font>

30
00:01:43,710 --> 00:01:47,009
<font color="#E5E5E5">16-bit short instructions and in all</font>

31
00:01:45,570 --> 00:01:51,829
cases we've been looking at<font color="#CCCCCC"> them without</font>

32
00:01:47,009 --> 00:01:56,520
<font color="#E5E5E5">hardware floating-point the design</font><font color="#CCCCCC"> where</font>

33
00:01:51,829 --> 00:01:58,258
<font color="#CCCCCC">arc</font><font color="#E5E5E5"> HS is a bit out of place there we</font>

34
00:01:56,520 --> 00:01:59,490
really ought to have looked at their EMR

35
00:01:58,259 --> 00:02:01,500
<font color="#CCCCCC">kotecha which is</font><font color="#E5E5E5"> there imbedded</font>

36
00:01:59,490 --> 00:02:02,850
architecture<font color="#CCCCCC"> the reason it's HS is</font>

37
00:02:01,500 --> 00:02:05,159
because the customer we're doing this

38
00:02:02,850 --> 00:02:09,299
for is<font color="#E5E5E5"> using HS at the moment and</font><font color="#CCCCCC"> want</font>

39
00:02:05,159 --> 00:02:11,490
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the comparison with</font><font color="#CCCCCC"> that so they're</font>

40
00:02:09,300 --> 00:02:12,780
all similar architectures<font color="#E5E5E5"> and what we're</font>

41
00:02:11,490 --> 00:02:14,820
trying to<font color="#E5E5E5"> do is to find out which of</font>

42
00:02:12,780 --> 00:02:20,700
<font color="#E5E5E5">what they do well and what</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> do badly</font>

43
00:02:14,820 --> 00:02:23,400
each is a compiler so what to measure

44
00:02:20,700 --> 00:02:24,359
<font color="#CCCCCC">okay so</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> what we got how</font><font color="#E5E5E5"> we're going</font>

45
00:02:23,400 --> 00:02:26,190
<font color="#E5E5E5">to measure this well we're gonna use</font>

46
00:02:24,360 --> 00:02:29,010
<font color="#CCCCCC">Beebe's</font><font color="#E5E5E5"> how many people here have heard</font>

47
00:02:26,190 --> 00:02:30,359
<font color="#E5E5E5">of</font><font color="#CCCCCC"> Beebe's okay it came out</font><font color="#E5E5E5"> of some</font>

48
00:02:29,010 --> 00:02:31,859
<font color="#E5E5E5">research into</font><font color="#CCCCCC"> energy-efficient</font>

49
00:02:30,360 --> 00:02:32,599
compilation that we did with Bristol

50
00:02:31,860 --> 00:02:35,299
University

51
00:02:32,599 --> 00:02:37,159
six<font color="#E5E5E5"> seven years ago and it's the Bristol</font>

52
00:02:35,299 --> 00:02:39,879
<font color="#CCCCCC">M</font><font color="#E5E5E5"> because I'm embedded benchmark</font><font color="#CCCCCC"> sweet</font>

53
00:02:37,159 --> 00:02:43,010
<font color="#CCCCCC">it's a free and open</font><font color="#E5E5E5"> source test suite</font>

54
00:02:39,879 --> 00:02:44,420
it aims<font color="#E5E5E5"> to have a mixture of types of</font>

55
00:02:43,010 --> 00:02:45,920
<font color="#E5E5E5">programs so some that do a lot of</font>

56
00:02:44,420 --> 00:02:47,268
branching some that do a<font color="#E5E5E5"> lot of memory</font>

57
00:02:45,920 --> 00:02:48,950
access some of<font color="#CCCCCC"> the lot</font><font color="#E5E5E5"> of integer</font>

58
00:02:47,269 --> 00:02:53,269
operation operations and some<font color="#E5E5E5"> of the</font>

59
00:02:48,950 --> 00:02:55,040
floating<font color="#E5E5E5"> points it's designed so many</font>

60
00:02:53,269 --> 00:02:56,659
benchmark<font color="#E5E5E5"> Suites assume they're going to</font>

61
00:02:55,040 --> 00:02:58,310
<font color="#E5E5E5">print out the answers which if you're</font>

62
00:02:56,659 --> 00:02:59,959
deeply embedded is a real problem

63
00:02:58,310 --> 00:03:02,659
<font color="#E5E5E5">because you generally don't have printf</font>

64
00:02:59,959 --> 00:03:04,040
so we<font color="#E5E5E5"> try to have minimal i/o here and</font>

65
00:03:02,659 --> 00:03:06,650
the results are captured without

66
00:03:04,040 --> 00:03:08,420
<font color="#E5E5E5">actually printing anything out there's a</font>

67
00:03:06,650 --> 00:03:10,849
paper on<font color="#E5E5E5"> the research behind this on</font>

68
00:03:08,420 --> 00:03:12,918
archive the links on the screen<font color="#CCCCCC"> it was</font>

69
00:03:10,849 --> 00:03:14,720
<font color="#E5E5E5">originally</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> ten programs</font><font color="#CCCCCC"> those are</font>

70
00:03:12,919 --> 00:03:16,250
shown<font color="#E5E5E5"> in the table on the left and</font>

71
00:03:14,720 --> 00:03:18,109
<font color="#E5E5E5">they're color</font><font color="#CCCCCC"> coded according to how</font>

72
00:03:16,250 --> 00:03:21,040
much they work and<font color="#CCCCCC"> they're their code</font>

73
00:03:18,109 --> 00:03:24,409
reflects different types of operations

74
00:03:21,040 --> 00:03:27,078
<font color="#CCCCCC">Beebe's version 2 now has 79 benchmarks</font>

75
00:03:24,409 --> 00:03:29,450
<font color="#E5E5E5">and I've got a task to do which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> to</font>

76
00:03:27,079 --> 00:03:31,340
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> reproduce that table for</font><font color="#E5E5E5"> all 79</font>

77
00:03:29,450 --> 00:03:34,909
benchmarks<font color="#CCCCCC"> to show that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> still got a</font>

78
00:03:31,340 --> 00:03:39,769
good<font color="#CCCCCC"> mix of programs</font><font color="#E5E5E5"> so what are we</font>

79
00:03:34,909 --> 00:03:41,870
going to<font color="#E5E5E5"> measure well let's look at it</font>

80
00:03:39,769 --> 00:03:44,180
as a picture<font color="#CCCCCC"> broadly in</font><font color="#E5E5E5"> an embedded</font>

81
00:03:41,870 --> 00:03:47,030
<font color="#E5E5E5">system like any program you've got a</font>

82
00:03:44,180 --> 00:03:49,310
mixture of code and<font color="#E5E5E5"> read-only data those</font>

83
00:03:47,030 --> 00:03:51,680
<font color="#E5E5E5">always go into ROM or flash some</font>

84
00:03:49,310 --> 00:03:54,440
<font color="#E5E5E5">initialized data which is writable so</font>

85
00:03:51,680 --> 00:03:57,500
<font color="#E5E5E5">you've put it in RAM and uninitialized</font>

86
00:03:54,440 --> 00:03:58,940
data BSS which<font color="#E5E5E5"> also goes into</font><font color="#CCCCCC"> RAM and</font>

87
00:03:57,500 --> 00:04:01,729
any<font color="#E5E5E5"> Ram you've got left over you'll use</font>

88
00:03:58,940 --> 00:04:04,099
<font color="#CCCCCC">for your stack and your heap so you</font>

89
00:04:01,729 --> 00:04:06,290
might<font color="#CCCCCC"> think we should look at how</font><font color="#E5E5E5"> much</font>

90
00:04:04,099 --> 00:04:07,310
size code and<font color="#E5E5E5"> read-only data state</font>

91
00:04:06,290 --> 00:04:09,769
because that's<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> tell me hammer</font>

92
00:04:07,310 --> 00:04:10,909
<font color="#E5E5E5">how big my</font><font color="#CCCCCC"> roms got to be there's a bit</font>

93
00:04:09,769 --> 00:04:12,769
<font color="#E5E5E5">of a question over that because</font>

94
00:04:10,909 --> 00:04:14,569
initialized data<font color="#E5E5E5"> has to</font><font color="#CCCCCC"> be initialized</font>

95
00:04:12,769 --> 00:04:16,608
from<font color="#E5E5E5"> somewhere and you usually put that</font>

96
00:04:14,569 --> 00:04:18,320
into ROM as well but<font color="#E5E5E5"> for the purposes of</font>

97
00:04:16,608 --> 00:04:20,899
this talk I'm just going<font color="#E5E5E5"> to focus on the</font>

98
00:04:18,320 --> 00:04:23,120
size of code and<font color="#CCCCCC"> read-only</font><font color="#E5E5E5"> data because</font>

99
00:04:20,899 --> 00:04:24,770
<font color="#E5E5E5">that's the key thing and it's also</font>

100
00:04:23,120 --> 00:04:30,349
<font color="#CCCCCC">because that's</font><font color="#E5E5E5"> the figure</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font>

101
00:04:24,770 --> 00:04:32,240
standard Linux<font color="#CCCCCC"> size program</font><font color="#E5E5E5"> gives you so</font>

102
00:04:30,349 --> 00:04:33,889
the absolute statistics<font color="#E5E5E5"> we had for each</font>

103
00:04:32,240 --> 00:04:35,389
<font color="#E5E5E5">of those 79 programs we're going to</font>

104
00:04:33,889 --> 00:04:38,210
capture the size of the code and<font color="#E5E5E5"> the</font>

105
00:04:35,389 --> 00:04:40,700
read-only data<font color="#E5E5E5"> and we're going to</font><font color="#CCCCCC"> record</font>

106
00:04:38,210 --> 00:04:42,229
a total<font color="#CCCCCC"> total amount of data that's</font>

107
00:04:40,700 --> 00:04:44,270
<font color="#E5E5E5">going to be dominated by the large</font>

108
00:04:42,229 --> 00:04:46,229
programs because one large program will

109
00:04:44,270 --> 00:04:48,389
have as much as<font color="#E5E5E5"> ten small one</font>

110
00:04:46,229 --> 00:04:50,128
and<font color="#CCCCCC"> we'll also</font><font color="#E5E5E5"> record the size of the</font>

111
00:04:48,389 --> 00:04:54,749
<font color="#CCCCCC">largest program and the size of the</font>

112
00:04:50,129 --> 00:04:58,499
smallest program but we'll also look at

113
00:04:54,749 --> 00:05:00,090
some relative statistics and we'll look

114
00:04:58,499 --> 00:05:01,919
we're looking<font color="#CCCCCC"> at three</font><font color="#E5E5E5"> processes I've</font>

115
00:05:00,090 --> 00:05:03,628
taken risk<font color="#CCCCCC"> five as the baseline</font><font color="#E5E5E5"> because</font>

116
00:05:01,919 --> 00:05:04,650
I'm talking<font color="#CCCCCC"> in the risk</font><font color="#E5E5E5"> five dev room it</font>

117
00:05:03,629 --> 00:05:05,729
could<font color="#E5E5E5"> have been</font><font color="#CCCCCC"> only one</font><font color="#E5E5E5"> of them it</font>

118
00:05:04,650 --> 00:05:08,279
<font color="#CCCCCC">doesn't matter it's just an arbitrary</font>

119
00:05:05,729 --> 00:05:12,240
<font color="#CCCCCC">choice</font><font color="#E5E5E5"> okay and we'll look at each</font>

120
00:05:08,279 --> 00:05:15,060
program<font color="#E5E5E5"> in turn relative in code size to</font>

121
00:05:12,240 --> 00:05:17,069
risk<font color="#CCCCCC"> five is it bigger is it smaller and</font>

122
00:05:15,060 --> 00:05:20,219
<font color="#CCCCCC">we'll take an arithmetic average</font><font color="#E5E5E5"> of</font>

123
00:05:17,069 --> 00:05:22,919
those<font color="#E5E5E5"> and because all these sizes should</font>

124
00:05:20,219 --> 00:05:24,719
<font color="#E5E5E5">be close to 100%</font><font color="#CCCCCC"> then we're not going to</font>

125
00:05:22,919 --> 00:05:26,008
<font color="#CCCCCC">contain distortion will use the</font>

126
00:05:24,719 --> 00:05:27,300
arithmetic average that should be fine

127
00:05:26,009 --> 00:05:30,360
<font color="#E5E5E5">we don't need to worry about geometric</font>

128
00:05:27,300 --> 00:05:32,999
<font color="#CCCCCC">or harmonic</font><font color="#E5E5E5"> means instead and we'll also</font>

129
00:05:30,360 --> 00:05:34,979
<font color="#E5E5E5">look at the smallest relative size so in</font>

130
00:05:32,999 --> 00:05:37,499
other words which program on<font color="#E5E5E5"> this</font>

131
00:05:34,979 --> 00:05:39,599
processor<font color="#CCCCCC"> isn't</font><font color="#E5E5E5"> so much better than risk</font>

132
00:05:37,499 --> 00:05:40,710
<font color="#CCCCCC">five or so much worse than risk five</font><font color="#E5E5E5"> and</font>

133
00:05:39,599 --> 00:05:42,150
those are really<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> because</font>

134
00:05:40,710 --> 00:05:45,210
<font color="#E5E5E5">they're ones where the compilers are</font>

135
00:05:42,150 --> 00:05:46,409
<font color="#E5E5E5">clearly doing something different so</font>

136
00:05:45,210 --> 00:05:48,688
those<font color="#CCCCCC"> the statistics we're going to</font>

137
00:05:46,409 --> 00:05:52,649
record<font color="#E5E5E5"> so</font><font color="#CCCCCC"> let's just run some statistics</font>

138
00:05:48,689 --> 00:05:55,770
<font color="#CCCCCC">and I don't</font><font color="#E5E5E5"> expect</font><font color="#CCCCCC"> you to be able</font><font color="#E5E5E5"> to</font>

139
00:05:52,649 --> 00:05:59,099
read the individual programs<font color="#CCCCCC"> off here</font>

140
00:05:55,770 --> 00:06:00,899
but let's<font color="#E5E5E5"> just look run the</font><font color="#CCCCCC"> programs</font>

141
00:05:59,099 --> 00:06:03,089
compile them put them through<font color="#E5E5E5"> size and</font>

142
00:06:00,899 --> 00:06:07,949
measure them and there we've got<font color="#E5E5E5"> in</font>

143
00:06:03,089 --> 00:06:10,669
yellow the<font color="#CCCCCC"> ark</font><font color="#E5E5E5"> processor in red the ARM</font>

144
00:06:07,949 --> 00:06:13,860
processor and in blue<font color="#CCCCCC"> the</font><font color="#E5E5E5"> RISC five</font>

145
00:06:10,669 --> 00:06:15,719
processor<font color="#E5E5E5"> and you can see some programs</font>

146
00:06:13,860 --> 00:06:18,300
are big and some<font color="#CCCCCC"> programs are small</font><font color="#E5E5E5"> what</font>

147
00:06:15,719 --> 00:06:20,129
you might<font color="#E5E5E5"> notice is that the arm results</font>

148
00:06:18,300 --> 00:06:21,479
the little red results never get below a

149
00:06:20,129 --> 00:06:23,399
certain point there's quite a lot of

150
00:06:21,479 --> 00:06:25,860
<font color="#E5E5E5">small programs where there's a</font>

151
00:06:23,399 --> 00:06:27,089
reasonable<font color="#CCCCCC"> sized spike</font><font color="#E5E5E5"> for arm and in</font>

152
00:06:25,860 --> 00:06:30,149
<font color="#E5E5E5">fact if we look at the detailed</font>

153
00:06:27,089 --> 00:06:31,979
statistics<font color="#E5E5E5"> we see that we can look the</font>

154
00:06:30,149 --> 00:06:34,499
total but we look the minimum size you

155
00:06:31,979 --> 00:06:39,539
get<font color="#E5E5E5"> from</font><font color="#CCCCCC"> an arm program is 4 K whereas</font>

156
00:06:34,499 --> 00:06:40,949
<font color="#CCCCCC">Ark and risk 5 both under</font><font color="#E5E5E5"> 1k</font><font color="#CCCCCC"> if we look</font>

157
00:06:39,539 --> 00:06:43,289
at the<font color="#E5E5E5"> maximum code size and setting the</font>

158
00:06:40,949 --> 00:06:45,029
biggest program<font color="#E5E5E5"> for risk 5 is notably a</font>

159
00:06:43,289 --> 00:06:48,568
lot bigger<font color="#CCCCCC"> than the biggest 5 for</font><font color="#E5E5E5"> our</font>

160
00:06:45,029 --> 00:06:51,810
<font color="#E5E5E5">monarch and if we put the relative</font>

161
00:06:48,569 --> 00:06:54,860
percentages in on average<font color="#E5E5E5"> arms coming</font>

162
00:06:51,810 --> 00:06:58,950
out at being<font color="#E5E5E5"> 222 percent the size of</font>

163
00:06:54,860 --> 00:07:00,780
risk 5 and that<font color="#E5E5E5"> is because</font>

164
00:06:58,950 --> 00:07:02,370
any small program is coming<font color="#E5E5E5"> out four</font>

165
00:07:00,780 --> 00:07:08,190
times<font color="#E5E5E5"> as</font><font color="#CCCCCC"> big so it's skewing</font><font color="#E5E5E5"> that</font>

166
00:07:02,370 --> 00:07:10,140
average there and for<font color="#E5E5E5"> arc actually on</font>

167
00:07:08,190 --> 00:07:13,650
average<font color="#CCCCCC"> is slightly</font><font color="#E5E5E5"> better than risk</font>

168
00:07:10,140 --> 00:07:16,260
<font color="#E5E5E5">five if they are in this case and the</font>

169
00:07:13,650 --> 00:07:17,969
smallest<font color="#E5E5E5"> programs arc has some programs</font>

170
00:07:16,260 --> 00:07:20,039
<font color="#CCCCCC">that</font><font color="#E5E5E5"> could do twice as well as risk five</font>

171
00:07:17,970 --> 00:07:21,900
<font color="#E5E5E5">arm has some similar twice as word and</font>

172
00:07:20,040 --> 00:07:23,400
both<font color="#E5E5E5"> are</font><font color="#CCCCCC"> common arc have some really</font>

173
00:07:21,900 --> 00:07:27,179
pathologically different cases<font color="#E5E5E5"> where</font>

174
00:07:23,400 --> 00:07:29,159
<font color="#E5E5E5">they're far bigger than risk five so why</font>

175
00:07:27,180 --> 00:07:31,590
does arm do so badly with small programs

176
00:07:29,160 --> 00:07:33,960
<font color="#E5E5E5">well let's look at the</font><font color="#CCCCCC"> smallest program</font>

177
00:07:31,590 --> 00:07:36,000
program called<font color="#CCCCCC"> ns and look at the</font>

178
00:07:33,960 --> 00:07:39,060
symbols in<font color="#E5E5E5"> there and if</font><font color="#CCCCCC"> we run</font><font color="#E5E5E5"> nm on it</font>

179
00:07:36,000 --> 00:07:41,160
we can see there<font color="#E5E5E5"> are 61 symbols defined</font>

180
00:07:39,060 --> 00:07:44,010
in the arc<font color="#CCCCCC"> program a hundred and thirty</font>

181
00:07:41,160 --> 00:07:45,660
symbols defined in the arm program<font color="#E5E5E5"> and</font>

182
00:07:44,010 --> 00:07:47,849
just<font color="#CCCCCC"> forty-three</font><font color="#E5E5E5"> symbols in the</font><font color="#CCCCCC"> RISC 5</font>

183
00:07:45,660 --> 00:07:49,650
program and in particular<font color="#E5E5E5"> look the last</font>

184
00:07:47,850 --> 00:07:51,930
one there there's two<font color="#CCCCCC"> right functions in</font>

185
00:07:49,650 --> 00:07:54,359
<font color="#E5E5E5">why is a program that does no IO</font>

186
00:07:51,930 --> 00:07:56,610
showing right inside its list of<font color="#E5E5E5"> symbols</font>

187
00:07:54,360 --> 00:07:58,290
<font color="#E5E5E5">and the answer is the arm startup code</font>

188
00:07:56,610 --> 00:08:01,560
is pulling in a<font color="#CCCCCC"> lot of standard c</font>

189
00:07:58,290 --> 00:08:04,620
library code that's that's that<font color="#E5E5E5"> C</font>

190
00:08:01,560 --> 00:08:07,320
runtime<font color="#E5E5E5"> startup</font><font color="#CCCCCC"> C R</font><font color="#E5E5E5"> T 0 is a problem so</font>

191
00:08:04,620 --> 00:08:09,330
it's distorting the results and it's not

192
00:08:07,320 --> 00:08:10,680
allowing us<font color="#E5E5E5"> to see what's really</font><font color="#CCCCCC"> going</font>

193
00:08:09,330 --> 00:08:12,419
on<font color="#E5E5E5"> in the compiled code</font><font color="#CCCCCC"> because it's</font>

194
00:08:10,680 --> 00:08:16,200
<font color="#E5E5E5">just a big chunk of code bolted on</font><font color="#CCCCCC"> to</font>

195
00:08:12,420 --> 00:08:18,090
every arm<font color="#CCCCCC"> program so let's put a dummy C</font>

196
00:08:16,200 --> 00:08:19,800
<font color="#CCCCCC">R T 0</font><font color="#E5E5E5"> we're only looking at code size we</font>

197
00:08:18,090 --> 00:08:22,950
don't have to run these<font color="#CCCCCC"> programs so</font>

198
00:08:19,800 --> 00:08:24,420
let's just put<font color="#CCCCCC"> a dummy in there and when</font>

199
00:08:22,950 --> 00:08:25,979
<font color="#E5E5E5">we put the dummy</font><font color="#CCCCCC"> programing we get a</font>

200
00:08:24,420 --> 00:08:28,410
different graph and you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> see most of</font>

201
00:08:25,980 --> 00:08:29,790
the arm spikes or small programs have

202
00:08:28,410 --> 00:08:30,440
gone away not all of them will come<font color="#E5E5E5"> back</font>

203
00:08:29,790 --> 00:08:33,900
to<font color="#E5E5E5"> that later</font>

204
00:08:30,440 --> 00:08:35,729
<font color="#E5E5E5">but most them have gone</font><font color="#CCCCCC"> away and when</font><font color="#E5E5E5"> we</font>

205
00:08:33,900 --> 00:08:37,978
look at the number of<font color="#E5E5E5"> symbols now we see</font>

206
00:08:35,729 --> 00:08:40,080
we've mostly got the small number<font color="#E5E5E5"> of</font>

207
00:08:37,979 --> 00:08:42,120
symbols<font color="#E5E5E5"> we've gotten rid of</font><font color="#CCCCCC"> all the</font>

208
00:08:40,080 --> 00:08:43,620
symbols<font color="#E5E5E5"> not just from the start up but</font>

209
00:08:42,120 --> 00:08:45,210
<font color="#E5E5E5">from the C library code it was pulling</font>

210
00:08:43,620 --> 00:08:48,840
in as well so<font color="#CCCCCC"> we're getting</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> better</font>

211
00:08:45,210 --> 00:08:50,870
comparison<font color="#E5E5E5"> and we can see here</font><font color="#CCCCCC"> where</font>

212
00:08:48,840 --> 00:08:53,280
<font color="#CCCCCC">actually things change around</font><font color="#E5E5E5"> now arm is</font>

213
00:08:50,870 --> 00:08:54,450
looking relatively<font color="#CCCCCC"> it is much</font><font color="#E5E5E5"> better</font>

214
00:08:53,280 --> 00:08:56,640
it's not<font color="#CCCCCC"> a hundred to</font><font color="#E5E5E5"> two hundred</font>

215
00:08:54,450 --> 00:08:58,350
<font color="#E5E5E5">percent bigger on average</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> 111</font>

216
00:08:56,640 --> 00:09:00,569
<font color="#CCCCCC">percent on average</font>

217
00:08:58,350 --> 00:09:03,480
<font color="#CCCCCC">aa-actually which was better is now</font>

218
00:09:00,570 --> 00:09:05,340
looking a little worse<font color="#CCCCCC"> okay and the</font>

219
00:09:03,480 --> 00:09:07,350
smallest programs are now tiny because

220
00:09:05,340 --> 00:09:09,030
<font color="#E5E5E5">basically they're tiny little programs</font>

221
00:09:07,350 --> 00:09:10,770
and the biggest<font color="#E5E5E5"> programs not</font>

222
00:09:09,030 --> 00:09:12,030
surprisingly unaffected<font color="#CCCCCC"> because the size</font>

223
00:09:10,770 --> 00:09:20,910
of startup code was

224
00:09:12,030 --> 00:09:22,890
trivial<font color="#E5E5E5"> um and so so some</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the larger</font>

225
00:09:20,910 --> 00:09:24,150
programs do use the<font color="#CCCCCC"> sea</font><font color="#E5E5E5"> library the bit</font>

226
00:09:22,890 --> 00:09:25,860
all<font color="#CCCCCC"> the big</font><font color="#E5E5E5"> ones they have to use them</font>

227
00:09:24,150 --> 00:09:28,170
<font color="#E5E5E5">for some things even</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> they're not</font>

228
00:09:25,860 --> 00:09:30,780
doing<font color="#CCCCCC"> i/o and what we observe is that</font>

229
00:09:28,170 --> 00:09:32,670
<font color="#E5E5E5">quite often these programs are often</font>

230
00:09:30,780 --> 00:09:34,319
<font color="#E5E5E5">larger for</font><font color="#CCCCCC"> arkin are not all this case</font>

231
00:09:32,670 --> 00:09:35,579
but our<font color="#E5E5E5"> monarchs seem to have bigger</font>

232
00:09:34,320 --> 00:09:39,270
<font color="#CCCCCC">Prout and the big</font><font color="#E5E5E5"> programs are</font>

233
00:09:35,580 --> 00:09:40,800
<font color="#E5E5E5">noticeably bigger so let's see whether</font>

234
00:09:39,270 --> 00:09:43,590
the standard c library is causing a

235
00:09:40,800 --> 00:09:45,240
problem<font color="#CCCCCC"> and so we'll</font><font color="#E5E5E5"> just as we put in a</font>

236
00:09:43,590 --> 00:09:46,410
dummy<font color="#E5E5E5"> zr t</font><font color="#CCCCCC"> 0 we'll put in a dummy</font>

237
00:09:45,240 --> 00:09:48,870
standard c library

238
00:09:46,410 --> 00:09:50,130
it just has dummy programs for<font color="#CCCCCC"> NEC</font>

239
00:09:48,870 --> 00:09:53,880
<font color="#E5E5E5">library function you're</font><font color="#CCCCCC"> going to use</font>

240
00:09:50,130 --> 00:09:58,470
they<font color="#CCCCCC"> know content and what we see here</font>

241
00:09:53,880 --> 00:10:00,720
is now suddenly<font color="#E5E5E5"> arm looks very good and</font>

242
00:09:58,470 --> 00:10:02,790
in particular you may not notice the

243
00:10:00,720 --> 00:10:04,260
very worst<font color="#E5E5E5"> arm program relevant to</font><font color="#CCCCCC"> risk</font>

244
00:10:02,790 --> 00:10:06,089
<font color="#CCCCCC">five is now</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> eighteen percent bigger</font>

245
00:10:04,260 --> 00:10:09,060
<font color="#E5E5E5">none of those several hundred percent</font>

246
00:10:06,090 --> 00:10:11,370
bigger so the pathological<font color="#E5E5E5"> cases have</font>

247
00:10:09,060 --> 00:10:13,199
gone<font color="#E5E5E5"> away</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> arm suggesting there is</font>

248
00:10:11,370 --> 00:10:15,060
some pathological code in the c library

249
00:10:13,200 --> 00:10:17,160
<font color="#CCCCCC">that's linked</font><font color="#E5E5E5"> into one or two</font><font color="#CCCCCC"> programs</font>

250
00:10:15,060 --> 00:10:19,920
<font color="#E5E5E5">and the problem hasn't</font><font color="#CCCCCC"> gone away</font><font color="#E5E5E5"> for arc</font>

251
00:10:17,160 --> 00:10:23,280
<font color="#E5E5E5">it's worse program is seven times as big</font>

252
00:10:19,920 --> 00:10:25,020
as<font color="#CCCCCC"> its equivalent risk v program</font><font color="#E5E5E5"> and we</font>

253
00:10:23,280 --> 00:10:27,990
see now arm is starting<font color="#CCCCCC"> to look</font><font color="#E5E5E5"> really</font>

254
00:10:25,020 --> 00:10:30,240
quite good<font color="#CCCCCC"> okay it's</font><font color="#E5E5E5"> seventeen percent</font>

255
00:10:27,990 --> 00:10:34,170
better than risk<font color="#CCCCCC"> five</font><font color="#E5E5E5"> okay</font>

256
00:10:30,240 --> 00:10:36,390
so what's actually useful<font color="#E5E5E5"> is</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> let's</font>

257
00:10:34,170 --> 00:10:38,099
have a look at the<font color="#E5E5E5"> total size of code</font>

258
00:10:36,390 --> 00:10:39,630
<font color="#E5E5E5">because we look at it when it had</font><font color="#CCCCCC"> the</font>

259
00:10:38,100 --> 00:10:42,089
standard c<font color="#E5E5E5"> librarian and then we'll take</font>

260
00:10:39,630 --> 00:10:44,910
<font color="#E5E5E5">the c library out and what we can see</font>

261
00:10:42,089 --> 00:10:47,100
<font color="#CCCCCC">here is that</font><font color="#E5E5E5"> when you take the c library</font>

262
00:10:44,910 --> 00:10:48,810
<font color="#E5E5E5">out for our core risk</font><font color="#CCCCCC"> five the total</font>

263
00:10:47,100 --> 00:10:50,880
code size goes down about<font color="#E5E5E5"> six</font><font color="#CCCCCC"> percent</font>

264
00:10:48,810 --> 00:10:53,459
but<font color="#CCCCCC"> for</font><font color="#E5E5E5"> arm it goes down twenty four</font>

265
00:10:50,880 --> 00:10:56,880
percent<font color="#E5E5E5"> and that's telling me that if</font>

266
00:10:53,460 --> 00:11:00,060
you<font color="#E5E5E5"> look the arm standard c library</font>

267
00:10:56,880 --> 00:11:04,080
seems to be very<font color="#E5E5E5"> very big compared to</font>

268
00:11:00,060 --> 00:11:05,729
others<font color="#E5E5E5"> okay it may be we're still trying</font>

269
00:11:04,080 --> 00:11:07,290
to<font color="#E5E5E5"> find out it may be that it's actually</font>

270
00:11:05,730 --> 00:11:09,660
compiled focused on size there's only

271
00:11:07,290 --> 00:11:11,219
one c library and if it's been optimized

272
00:11:09,660 --> 00:11:13,740
and unrolled<font color="#CCCCCC"> away its</font><font color="#E5E5E5"> loops of course</font>

273
00:11:11,220 --> 00:11:15,720
it's going<font color="#E5E5E5"> to be big you really need to</font>

274
00:11:13,740 --> 00:11:18,570
<font color="#E5E5E5">have a multi limb variant for compact</font>

275
00:11:15,720 --> 00:11:20,730
code as well<font color="#E5E5E5"> we also know because we've</font>

276
00:11:18,570 --> 00:11:22,680
seen<font color="#E5E5E5"> it there that the library is not</font>

277
00:11:20,730 --> 00:11:24,510
done at one function per file in the

278
00:11:22,680 --> 00:11:25,329
library<font color="#CCCCCC"> so if you pull in one function</font>

279
00:11:24,510 --> 00:11:28,089
you're<font color="#CCCCCC"> going to pull in a</font>

280
00:11:25,329 --> 00:11:31,209
load of other<font color="#E5E5E5"> codes so you</font><font color="#CCCCCC"> can't do the</font>

281
00:11:28,089 --> 00:11:32,889
garbage<font color="#E5E5E5"> collection of sections</font><font color="#CCCCCC"> on it so</font>

282
00:11:31,209 --> 00:11:35,439
but<font color="#E5E5E5"> we're getting rid of more</font>

283
00:11:32,889 --> 00:11:37,360
confounding<font color="#E5E5E5"> effects so any effects of</font>

284
00:11:35,439 --> 00:11:38,769
<font color="#E5E5E5">I'm distorting my figures</font><font color="#CCCCCC"> cuz I'm just</font>

285
00:11:37,360 --> 00:11:40,899
<font color="#CCCCCC">not</font><font color="#E5E5E5"> looking at the compiled</font><font color="#CCCCCC"> code I've</font>

286
00:11:38,769 --> 00:11:41,290
got this big wad of C code stuck on the

287
00:11:40,899 --> 00:11:45,459
end

288
00:11:41,290 --> 00:11:47,920
we've got rid of<font color="#CCCCCC"> that but some notable</font>

289
00:11:45,459 --> 00:11:51,459
variations there<font color="#E5E5E5"> are some programs cubic</font>

290
00:11:47,920 --> 00:11:53,349
<font color="#E5E5E5">and</font><font color="#CCCCCC"> frac</font><font color="#E5E5E5"> where risk risk</font><font color="#CCCCCC"> Pharma narc</font>

291
00:11:51,459 --> 00:11:57,069
both do well compared to risk<font color="#CCCCCC"> five-arm</font>

292
00:11:53,350 --> 00:11:58,600
in particular<font color="#CCCCCC"> less so for arc and the</font>

293
00:11:57,069 --> 00:12:00,549
<font color="#E5E5E5">clue as to what's going on is when we</font>

294
00:11:58,600 --> 00:12:02,499
look<font color="#E5E5E5"> at these two programs map mult flow</font>

295
00:12:00,549 --> 00:12:04,869
to map mult int<font color="#E5E5E5"> which are the same</font>

296
00:12:02,499 --> 00:12:06,279
program<font color="#E5E5E5"> matrix multiplication one is</font>

297
00:12:04,869 --> 00:12:09,399
done with floating-point numbers and one

298
00:12:06,279 --> 00:12:11,769
is done with integers<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we see for the</font>

299
00:12:09,399 --> 00:12:13,869
for the<font color="#E5E5E5"> floating-point one arm does</font>

300
00:12:11,769 --> 00:12:15,549
really<font color="#E5E5E5"> much better than risk</font><font color="#CCCCCC"> five where</font>

301
00:12:13,869 --> 00:12:18,879
the integer one it's<font color="#E5E5E5"> almost the same and</font>

302
00:12:15,549 --> 00:12:20,920
<font color="#CCCCCC">that</font><font color="#E5E5E5"> gives a bit of</font><font color="#CCCCCC"> a clue that arm</font>

303
00:12:18,879 --> 00:12:23,559
<font color="#E5E5E5">seems to do a very good job with</font>

304
00:12:20,920 --> 00:12:25,509
floating-point<font color="#CCCCCC"> oh it's a bit more</font>

305
00:12:23,559 --> 00:12:28,420
<font color="#E5E5E5">variable</font><font color="#CCCCCC"> it's not quite sure what the</font>

306
00:12:25,509 --> 00:12:29,679
message is<font color="#E5E5E5"> on arc now remember these</font><font color="#CCCCCC"> are</font>

307
00:12:28,420 --> 00:12:31,329
all chips without<font color="#E5E5E5"> a hardware</font>

308
00:12:29,679 --> 00:12:34,600
floating-point unit so<font color="#E5E5E5"> this is about</font>

309
00:12:31,329 --> 00:12:36,399
floating-point emulation so that's done

310
00:12:34,600 --> 00:12:40,959
in Lib GCC<font color="#CCCCCC"> because this is the GCC</font>

311
00:12:36,399 --> 00:12:42,970
<font color="#E5E5E5">compiler</font><font color="#CCCCCC"> and let's see whether it's</font>

312
00:12:40,959 --> 00:12:46,388
actually the arm has<font color="#E5E5E5"> got a super compact</font>

313
00:12:42,970 --> 00:12:48,279
<font color="#E5E5E5">floating-point emulation and</font><font color="#CCCCCC"> will do</font>

314
00:12:46,389 --> 00:12:52,689
<font color="#CCCCCC">exactly the same</font><font color="#E5E5E5"> thing is</font><font color="#CCCCCC"> we'll put in a</font>

315
00:12:48,279 --> 00:12:54,040
dummy Lib GCC<font color="#E5E5E5"> and so now we do we run</font>

316
00:12:52,689 --> 00:12:55,179
<font color="#E5E5E5">the same things again and things are</font>

317
00:12:54,040 --> 00:13:01,959
starting<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get much closer actually</font>

318
00:12:55,179 --> 00:13:05,169
<font color="#E5E5E5">we're seeing fewer extremes and and if</font>

319
00:13:01,959 --> 00:13:10,059
we look at<font color="#E5E5E5"> the table of data</font><font color="#CCCCCC"> okay what</font>

320
00:13:05,169 --> 00:13:13,480
we see is<font color="#CCCCCC"> that actually now</font><font color="#E5E5E5"> arm is not</font>

321
00:13:10,059 --> 00:13:15,669
so good compared to risk<font color="#CCCCCC"> 5 um and indeed</font>

322
00:13:13,480 --> 00:13:18,100
<font color="#CCCCCC">Ark is coming more into norm and we</font>

323
00:13:15,669 --> 00:13:20,499
<font color="#E5E5E5">notice now the pathological cases for</font>

324
00:13:18,100 --> 00:13:21,879
<font color="#E5E5E5">arc have gone away suggesting that arcs</font>

325
00:13:20,499 --> 00:13:24,899
<font color="#E5E5E5">pathology lives in some of its</font>

326
00:13:21,879 --> 00:13:29,410
<font color="#CCCCCC">floating-point</font><font color="#E5E5E5"> emulation routines okay</font>

327
00:13:24,899 --> 00:13:32,160
so now we've got<font color="#E5E5E5"> rid of distortions from</font>

328
00:13:29,410 --> 00:13:36,819
<font color="#E5E5E5">a block of startup code distortions from</font>

329
00:13:32,160 --> 00:13:38,800
precompiled<font color="#CCCCCC"> c library</font><font color="#E5E5E5"> and distortions</font>

330
00:13:36,819 --> 00:13:40,719
from<font color="#E5E5E5"> the emulation library we</font>

331
00:13:38,800 --> 00:13:45,130
looking much more just<font color="#E5E5E5"> at the code we</font>

332
00:13:40,720 --> 00:13:47,230
<font color="#CCCCCC">actually compiled for this test</font><font color="#E5E5E5"> and we</font>

333
00:13:45,130 --> 00:13:49,089
<font color="#CCCCCC">can</font><font color="#E5E5E5"> see the impact of the floating-point</font>

334
00:13:47,230 --> 00:13:50,260
library if we look at the<font color="#E5E5E5"> absolute</font><font color="#CCCCCC"> total</font>

335
00:13:49,089 --> 00:13:52,839
so if<font color="#E5E5E5"> you look at the total code size</font>

336
00:13:50,260 --> 00:13:54,220
and we<font color="#E5E5E5"> can see</font><font color="#CCCCCC"> that for</font><font color="#E5E5E5"> ark and</font><font color="#CCCCCC"> arm when</font>

337
00:13:52,839 --> 00:13:56,589
<font color="#E5E5E5">you take the floating-point emulation</font>

338
00:13:54,220 --> 00:13:59,079
away<font color="#CCCCCC"> you get rid of</font><font color="#E5E5E5"> forearm</font><font color="#CCCCCC"> so if an</font><font color="#E5E5E5"> ark</font>

339
00:13:56,589 --> 00:14:02,800
<font color="#E5E5E5">and risk</font><font color="#CCCCCC"> five you get rid of a third of</font>

340
00:13:59,079 --> 00:14:04,089
the code<font color="#E5E5E5"> okay and when you do it for arm</font>

341
00:14:02,800 --> 00:14:06,250
you only get rid<font color="#E5E5E5"> of a fifth the code so</font>

342
00:14:04,089 --> 00:14:10,480
arms clearly got a much<font color="#E5E5E5"> more compact</font>

343
00:14:06,250 --> 00:14:12,040
<font color="#CCCCCC">floating-point emulation okay</font><font color="#E5E5E5"> um</font><font color="#CCCCCC"> now</font>

344
00:14:10,480 --> 00:14:13,839
I've actually taken<font color="#E5E5E5"> away Lib GCC and</font><font color="#CCCCCC"> of</font>

345
00:14:12,040 --> 00:14:16,120
course Lib GCC does more than just

346
00:14:13,839 --> 00:14:17,470
floating-point emulation so we do just

347
00:14:16,120 --> 00:14:19,360
need to check<font color="#E5E5E5"> it is the floating-point</font>

348
00:14:17,470 --> 00:14:23,769
emulation not some other emulation in

349
00:14:19,360 --> 00:14:25,269
there that we're worrying about the last

350
00:14:23,769 --> 00:14:27,579
thing is<font color="#CCCCCC"> to say where</font><font color="#E5E5E5"> we looked at libs</font>

351
00:14:25,269 --> 00:14:29,680
<font color="#CCCCCC">Lib C let's look at Lib M the math</font>

352
00:14:27,579 --> 00:14:31,359
library<font color="#CCCCCC"> because we all really all see is</font>

353
00:14:29,680 --> 00:14:33,130
that having an effect<font color="#E5E5E5"> does one</font>

354
00:14:31,360 --> 00:14:36,850
<font color="#E5E5E5">architecture have a particularly good</font>

355
00:14:33,130 --> 00:14:39,100
maths library and actually when we<font color="#CCCCCC"> look</font>

356
00:14:36,850 --> 00:14:41,560
<font color="#E5E5E5">at this</font><font color="#CCCCCC"> the figures don't change much</font>

357
00:14:39,100 --> 00:14:44,140
<font color="#CCCCCC">from what we saw in the previous</font><font color="#E5E5E5"> round</font>

358
00:14:41,560 --> 00:14:47,079
<font color="#CCCCCC">and we</font><font color="#E5E5E5"> can see that when</font><font color="#CCCCCC"> we look at how</font>

359
00:14:44,140 --> 00:14:49,120
much is saved in<font color="#E5E5E5"> absolute code size the</font>

360
00:14:47,079 --> 00:14:51,819
math library<font color="#E5E5E5"> basically accounts for 6%</font>

361
00:14:49,120 --> 00:14:53,290
of the<font color="#CCCCCC"> total code</font><font color="#E5E5E5"> size it's the</font><font color="#CCCCCC"> same for</font>

362
00:14:51,820 --> 00:14:55,839
<font color="#E5E5E5">all architectures almost certainly</font>

363
00:14:53,290 --> 00:14:57,939
<font color="#E5E5E5">everyone using the same</font><font color="#CCCCCC"> C math</font><font color="#E5E5E5"> library</font>

364
00:14:55,839 --> 00:14:59,410
<font color="#E5E5E5">is compiling it it's going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

365
00:14:57,940 --> 00:15:01,209
<font color="#E5E5E5">proportional it's all going to come a</font>

366
00:14:59,410 --> 00:15:02,800
<font color="#CCCCCC">6-pin</font><font color="#E5E5E5"> but it's still a block of pre</font>

367
00:15:01,209 --> 00:15:05,140
compiled code and if we're looking<font color="#E5E5E5"> at</font>

368
00:15:02,800 --> 00:15:08,260
<font color="#E5E5E5">the effect of a compiler we ought to</font>

369
00:15:05,140 --> 00:15:11,140
<font color="#E5E5E5">take it out so if we look at the overall</font>

370
00:15:08,260 --> 00:15:12,610
<font color="#CCCCCC">summary we</font><font color="#E5E5E5"> have the figures at the</font><font color="#CCCCCC"> top</font>

371
00:15:11,140 --> 00:15:14,800
for<font color="#E5E5E5"> the baseline where we just compiled</font>

372
00:15:12,610 --> 00:15:16,420
the<font color="#E5E5E5"> programs and look at it but as we</font><font color="#CCCCCC"> go</font>

373
00:15:14,800 --> 00:15:18,579
<font color="#CCCCCC">through the lines we've stripped out the</font>

374
00:15:16,420 --> 00:15:20,649
<font color="#CCCCCC">distortion</font><font color="#E5E5E5"> of a block of precompiled</font>

375
00:15:18,579 --> 00:15:22,209
startup code the distortion of<font color="#CCCCCC"> C</font>

376
00:15:20,649 --> 00:15:24,220
libraries which are<font color="#E5E5E5"> of different</font><font color="#CCCCCC"> quality</font>

377
00:15:22,209 --> 00:15:26,649
<font color="#CCCCCC">and a pre compiled the distortion of</font><font color="#E5E5E5"> the</font>

378
00:15:24,220 --> 00:15:28,029
<font color="#CCCCCC">emulation library and how it simulation</font>

379
00:15:26,649 --> 00:15:32,770
is done<font color="#CCCCCC"> and the distortion of</font><font color="#E5E5E5"> the</font>

380
00:15:28,029 --> 00:15:34,720
<font color="#E5E5E5">precompiled math library and if you take</font>

381
00:15:32,770 --> 00:15:36,970
all<font color="#CCCCCC"> of those out the bottom line</font><font color="#E5E5E5"> they're</font>

382
00:15:34,720 --> 00:15:39,220
really all you're looking<font color="#E5E5E5"> at is</font><font color="#CCCCCC"> the size</font>

383
00:15:36,970 --> 00:15:40,870
of the code<font color="#CCCCCC"> you actually compiled</font><font color="#E5E5E5"> and</font>

384
00:15:39,220 --> 00:15:42,730
for the purpose<font color="#E5E5E5"> of the compiler writer</font>

385
00:15:40,870 --> 00:15:44,649
<font color="#CCCCCC">that's the one</font><font color="#E5E5E5"> that's going to give you</font>

386
00:15:42,730 --> 00:15:47,649
insight<font color="#E5E5E5"> now I've just put the averages</font>

387
00:15:44,649 --> 00:15:51,770
there<font color="#E5E5E5"> if</font><font color="#CCCCCC"> at-risk fives are 100% armed</font>

388
00:15:47,649 --> 00:15:53,960
<font color="#CCCCCC">it's coming in about 8%</font><font color="#E5E5E5"> better and arc</font>

389
00:15:51,770 --> 00:15:55,600
is coming<font color="#E5E5E5"> out about</font><font color="#CCCCCC"> 14% better but I</font>

390
00:15:53,960 --> 00:15:59,570
emphasize this is<font color="#CCCCCC"> not a</font><font color="#E5E5E5"> beauty contest</font>

391
00:15:55,600 --> 00:16:00,980
<font color="#CCCCCC">because there's a lot of variation</font><font color="#E5E5E5"> okay</font>

392
00:15:59,570 --> 00:16:03,260
if we go back<font color="#CCCCCC"> up to the previous slide</font>

393
00:16:00,980 --> 00:16:04,940
<font color="#CCCCCC">though the previous</font><font color="#E5E5E5"> one slide</font><font color="#CCCCCC"> we'll see</font>

394
00:16:03,260 --> 00:16:06,980
there<font color="#E5E5E5"> are some</font><font color="#CCCCCC"> programs where arm is</font>

395
00:16:04,940 --> 00:16:09,290
worse and some program where it's a lot

396
00:16:06,980 --> 00:16:10,700
<font color="#E5E5E5">better and the same for</font><font color="#CCCCCC"> art so somewhere</font>

397
00:16:09,290 --> 00:16:15,709
it's really<font color="#E5E5E5"> very much worse and</font>

398
00:16:10,700 --> 00:16:18,470
<font color="#CCCCCC">somewhere it's much better so the</font>

399
00:16:15,710 --> 00:16:20,660
<font color="#E5E5E5">takeaway is useful results for compiler</font>

400
00:16:18,470 --> 00:16:23,780
writers only consent only<font color="#CCCCCC"> you need</font><font color="#E5E5E5"> to</font>

401
00:16:20,660 --> 00:16:25,579
<font color="#E5E5E5">only consider the code you compiled</font><font color="#CCCCCC"> okay</font>

402
00:16:23,780 --> 00:16:27,740
libraries and startup code can<font color="#E5E5E5"> found the</font>

403
00:16:25,580 --> 00:16:29,330
results so remove your startup code

404
00:16:27,740 --> 00:16:30,710
remove your<font color="#CCCCCC"> C library code remove your</font>

405
00:16:29,330 --> 00:16:32,900
emulation<font color="#CCCCCC"> lobby code</font><font color="#E5E5E5"> remove your math</font>

406
00:16:30,710 --> 00:16:34,130
library code<font color="#E5E5E5"> that's easy actually</font><font color="#CCCCCC"> in</font>

407
00:16:32,900 --> 00:16:36,260
<font color="#E5E5E5">this</font><font color="#CCCCCC"> case because</font><font color="#E5E5E5"> I'm in looking at code</font>

408
00:16:34,130 --> 00:16:37,550
size<font color="#E5E5E5"> you have to</font><font color="#CCCCCC"> actually do the try and</font>

409
00:16:36,260 --> 00:16:39,890
<font color="#E5E5E5">remove the same factors when you're</font>

410
00:16:37,550 --> 00:16:42,740
doing execution speed and that's a talk

411
00:16:39,890 --> 00:16:45,830
<font color="#CCCCCC">for next year because</font><font color="#E5E5E5"> actually how it</font>

412
00:16:42,740 --> 00:16:47,870
still has to work but code size is what

413
00:16:45,830 --> 00:16:51,020
we were looking<font color="#CCCCCC"> at and</font><font color="#E5E5E5"> what comes out</font><font color="#CCCCCC"> of</font>

414
00:16:47,870 --> 00:16:53,960
<font color="#E5E5E5">that then is some useful graphs you can</font>

415
00:16:51,020 --> 00:16:56,390
<font color="#E5E5E5">compare our against risk</font><font color="#CCCCCC"> 5 relative size</font>

416
00:16:53,960 --> 00:16:58,610
and order them and the interesting ones

417
00:16:56,390 --> 00:17:01,280
that the ones<font color="#CCCCCC"> at each end ok the</font>

418
00:16:58,610 --> 00:17:03,650
functions<font color="#CCCCCC"> that</font><font color="#E5E5E5"> they're</font><font color="#CCCCCC"> cubic for example</font>

419
00:17:01,280 --> 00:17:06,710
<font color="#E5E5E5">where arc is nearly twice as good as</font>

420
00:17:03,650 --> 00:17:10,879
risk<font color="#E5E5E5"> 5 or a comment that kind of</font><font color="#CCCCCC"> writing</font>

421
00:17:06,710 --> 00:17:12,650
<font color="#CCCCCC">out the one at the</font><font color="#E5E5E5"> other one the other</font>

422
00:17:10,880 --> 00:17:14,750
end where arc is almost twice<font color="#CCCCCC"> as</font><font color="#E5E5E5"> bad as</font>

423
00:17:12,650 --> 00:17:17,060
respite<font color="#E5E5E5"> and</font><font color="#CCCCCC"> those are ones we're going</font>

424
00:17:14,750 --> 00:17:21,200
<font color="#E5E5E5">to delve into because why is the</font>

425
00:17:17,060 --> 00:17:22,970
compiler which is still GCC so different

426
00:17:21,200 --> 00:17:25,010
for<font color="#E5E5E5"> those programs</font><font color="#CCCCCC"> because there should</font>

427
00:17:22,970 --> 00:17:26,510
be something at one<font color="#E5E5E5"> end for arcs doing</font>

428
00:17:25,010 --> 00:17:28,339
really well that risk<font color="#E5E5E5"> 5 isn't and the</font>

429
00:17:26,510 --> 00:17:29,870
other<font color="#CCCCCC"> the</font><font color="#E5E5E5"> risk</font><font color="#CCCCCC"> fries</font><font color="#E5E5E5"> doing well</font><font color="#CCCCCC"> an arc</font>

430
00:17:28,339 --> 00:17:31,699
isn't<font color="#E5E5E5"> so this is good for both</font><font color="#CCCCCC"> the our</font>

431
00:17:29,870 --> 00:17:34,510
<font color="#E5E5E5">compiler team and the risk 5</font><font color="#CCCCCC"> compile</font>

432
00:17:31,700 --> 00:17:37,100
<font color="#E5E5E5">team and we can</font><font color="#CCCCCC"> do the</font><font color="#E5E5E5"> same</font><font color="#CCCCCC"> for arm</font>

433
00:17:34,510 --> 00:17:38,930
variation is less<font color="#E5E5E5"> there but I'd still</font>

434
00:17:37,100 --> 00:17:41,330
like<font color="#CCCCCC"> to know</font><font color="#E5E5E5"> why</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> some programs where</font>

435
00:17:38,930 --> 00:17:44,360
risk 5 is<font color="#E5E5E5"> 18% better I'd certainly want</font>

436
00:17:41,330 --> 00:17:47,510
<font color="#CCCCCC">to</font><font color="#E5E5E5"> know why is</font><font color="#CCCCCC"> it that</font><font color="#E5E5E5"> cubic again is</font>

437
00:17:44,360 --> 00:17:49,370
50% better<font color="#CCCCCC"> and of course we can compare</font>

438
00:17:47,510 --> 00:17:50,840
our qug<font color="#CCCCCC"> NSTAR and</font><font color="#E5E5E5"> that gives us insight</font>

439
00:17:49,370 --> 00:17:53,840
as<font color="#CCCCCC"> well so we've got a three-way</font>

440
00:17:50,840 --> 00:17:58,879
comparison here and what did<font color="#CCCCCC"> we learn</font>

441
00:17:53,840 --> 00:18:04,060
about<font color="#E5E5E5"> GCC well first of all and this</font>

442
00:17:58,880 --> 00:18:07,670
ties in with<font color="#CCCCCC"> Christos email this</font><font color="#E5E5E5"> morning</font>

443
00:18:04,060 --> 00:18:10,520
<font color="#E5E5E5">some new instructions would help now</font>

444
00:18:07,670 --> 00:18:11,570
the work we've<font color="#E5E5E5"> only actually been taking</font>

445
00:18:10,520 --> 00:18:12,800
these results<font color="#E5E5E5"> in</font><font color="#CCCCCC"> actually trying to</font>

446
00:18:11,570 --> 00:18:14,240
<font color="#E5E5E5">apply them to</font><font color="#CCCCCC"> compiler since the first</font>

447
00:18:12,800 --> 00:18:17,000
of January my colleague<font color="#CCCCCC"> here and</font><font color="#E5E5E5"> Renick</font>

448
00:18:14,240 --> 00:18:19,190
has been<font color="#E5E5E5"> doing that work and I actually</font>

449
00:18:17,000 --> 00:18:20,990
wrote<font color="#E5E5E5"> this slide at 9</font><font color="#CCCCCC"> o'clock this</font>

450
00:18:19,190 --> 00:18:24,140
morning to get the very<font color="#CCCCCC"> latest data from</font>

451
00:18:20,990 --> 00:18:26,330
him but actually<font color="#CCCCCC"> if you had an</font>

452
00:18:24,140 --> 00:18:27,830
instruction to<font color="#E5E5E5"> add 14 bit constants</font>

453
00:18:26,330 --> 00:18:29,480
you'd take more than<font color="#E5E5E5"> 1%</font><font color="#CCCCCC"> off the code</font>

454
00:18:27,830 --> 00:18:31,970
size of those benchmarks across the

455
00:18:29,480 --> 00:18:33,860
board<font color="#E5E5E5"> if you had a 40 bit 8 bit</font>

456
00:18:31,970 --> 00:18:37,100
<font color="#CCCCCC">instruction to load a 32 bit constant</font>

457
00:18:33,860 --> 00:18:37,449
you take another<font color="#CCCCCC"> 1% off and then we</font><font color="#E5E5E5"> can</font>

458
00:18:37,100 --> 00:18:39,469
apply

459
00:18:37,450 --> 00:18:42,230
<font color="#E5E5E5">compiler techniques and that's what we</font>

460
00:18:39,470 --> 00:18:44,030
can actually do today the first ones

461
00:18:42,230 --> 00:18:46,150
will feed into future discussions about

462
00:18:44,030 --> 00:18:49,370
new instruction set extensions

463
00:18:46,150 --> 00:18:51,470
<font color="#E5E5E5">one is Miller code which is where you</font>

464
00:18:49,370 --> 00:18:56,030
find<font color="#E5E5E5"> common code sequences that you keep</font>

465
00:18:51,470 --> 00:18:58,280
on<font color="#CCCCCC"> using and you pre you prepackaged</font>

466
00:18:56,030 --> 00:19:01,460
them<font color="#E5E5E5"> so of course those take up some</font>

467
00:18:58,280 --> 00:19:03,080
<font color="#E5E5E5">space but then everywhere</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> would have</font>

468
00:19:01,460 --> 00:19:05,870
generated<font color="#E5E5E5"> a lot of instructions</font><font color="#CCCCCC"> you just</font>

469
00:19:03,080 --> 00:19:08,629
generate<font color="#E5E5E5"> a quick call and</font><font color="#CCCCCC"> return and</font>

470
00:19:05,870 --> 00:19:09,949
that<font color="#CCCCCC"> just the simplest Miller code we</font>

471
00:19:08,630 --> 00:19:11,690
think will tell you save<font color="#CCCCCC"> as a third of a</font>

472
00:19:09,950 --> 00:19:13,160
percent<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> in compiler terms</font>

473
00:19:11,690 --> 00:19:15,220
<font color="#E5E5E5">across the board is actually a decent</font>

474
00:19:13,160 --> 00:19:17,570
win for something fairly<font color="#E5E5E5"> straightforward</font>

475
00:19:15,220 --> 00:19:21,200
putting common sub-expression

476
00:19:17,570 --> 00:19:24,080
elimination into the<font color="#E5E5E5"> linker actually</font><font color="#CCCCCC"> is</font>

477
00:19:21,200 --> 00:19:25,280
<font color="#E5E5E5">quite</font><font color="#CCCCCC"> a useful winner we still haven't</font>

478
00:19:24,080 --> 00:19:27,850
got a good estimate<font color="#E5E5E5"> none of these other</font>

479
00:19:25,280 --> 00:19:30,649
<font color="#E5E5E5">ones I've</font><font color="#CCCCCC"> got good enough estimates</font><font color="#E5E5E5"> for</font>

480
00:19:27,850 --> 00:19:32,360
but an increasing theme<font color="#E5E5E5"> that comes out</font>

481
00:19:30,650 --> 00:19:35,870
with modern architecture is you need to

482
00:19:32,360 --> 00:19:37,669
<font color="#CCCCCC">use the linker to do optimizations</font>

483
00:19:35,870 --> 00:19:39,739
that's not<font color="#CCCCCC"> linked time optimization</font>

484
00:19:37,670 --> 00:19:41,660
<font color="#CCCCCC">which is</font><font color="#E5E5E5"> the linker feeding stuff to do</font>

485
00:19:39,740 --> 00:19:43,520
<font color="#CCCCCC">global optimization in the compiler this</font>

486
00:19:41,660 --> 00:19:46,180
<font color="#E5E5E5">is actual optimizations in the linker</font>

487
00:19:43,520 --> 00:19:47,690
it's taking relaxation to great extremes

488
00:19:46,180 --> 00:19:50,000
<font color="#CCCCCC">ok</font>

489
00:19:47,690 --> 00:19:52,700
so we think<font color="#CCCCCC"> that will give us a good</font><font color="#E5E5E5"> win</font>

490
00:19:50,000 --> 00:19:55,400
as<font color="#E5E5E5"> well there's more advanced Miller</font>

491
00:19:52,700 --> 00:19:56,690
code<font color="#E5E5E5"> yarns done some initial experiments</font>

492
00:19:55,400 --> 00:19:58,250
suggesting that if you can have Miller

493
00:19:56,690 --> 00:20:01,580
code function<font color="#E5E5E5"> they did a scaled index</font>

494
00:19:58,250 --> 00:20:03,620
load that would actually be a win there

495
00:20:01,580 --> 00:20:06,110
are in various places<font color="#E5E5E5"> dead register</font>

496
00:20:03,620 --> 00:20:08,090
loads<font color="#E5E5E5"> where you load a register copy to</font>

497
00:20:06,110 --> 00:20:09,530
somewhere<font color="#E5E5E5"> else</font><font color="#CCCCCC"> and then use it and why</font>

498
00:20:08,090 --> 00:20:11,780
didn't<font color="#E5E5E5"> you load it into the first reg at</font>

499
00:20:09,530 --> 00:20:13,399
second<font color="#E5E5E5"> read in the first place</font><font color="#CCCCCC"> that can</font>

500
00:20:11,780 --> 00:20:15,260
be<font color="#E5E5E5"> done with a peephole optimization and</font>

501
00:20:13,400 --> 00:20:16,880
<font color="#E5E5E5">that seems to be surprisingly common we</font>

502
00:20:15,260 --> 00:20:18,460
need to look at the register allocation

503
00:20:16,880 --> 00:20:22,179
to see quite why it's doing that

504
00:20:18,460 --> 00:20:25,059
but then if<font color="#CCCCCC"> we can't fix</font><font color="#E5E5E5"> it there we can</font>

505
00:20:22,179 --> 00:20:26,379
do<font color="#CCCCCC"> a peephole</font><font color="#E5E5E5"> and we can also roll up</font>

506
00:20:25,059 --> 00:20:28,389
some loops<font color="#E5E5E5"> there are still places</font>

507
00:20:26,379 --> 00:20:30,459
wearing compiled code we in compact code

508
00:20:28,389 --> 00:20:32,889
<font color="#E5E5E5">the loops are still being unrolled</font><font color="#CCCCCC"> and</font>

509
00:20:30,460 --> 00:20:34,539
there are there<font color="#CCCCCC"> are circumstances</font><font color="#E5E5E5"> where</font>

510
00:20:32,889 --> 00:20:40,959
that's a wind<font color="#E5E5E5"> even for code size but</font>

511
00:20:34,539 --> 00:20:42,249
there are very<font color="#E5E5E5"> few</font><font color="#CCCCCC"> of them that so this</font>

512
00:20:40,960 --> 00:20:43,840
<font color="#E5E5E5">is</font><font color="#CCCCCC"> a talk about</font><font color="#E5E5E5"> measurement not worry</font>

513
00:20:42,249 --> 00:20:45,340
about the compiler optimization<font color="#E5E5E5"> but even</font>

514
00:20:43,840 --> 00:20:46,840
in one month<font color="#E5E5E5"> we found a whole load of</font>

515
00:20:45,340 --> 00:20:48,999
stuff<font color="#E5E5E5"> that between them will give us a</font>

516
00:20:46,840 --> 00:20:52,480
<font color="#E5E5E5">few more percent off the compiled code</font>

517
00:20:48,999 --> 00:20:54,340
<font color="#E5E5E5">size so what do we need to we need to do</font>

518
00:20:52,480 --> 00:20:56,740
more measurements we need<font color="#CCCCCC"> to repeat this</font>

519
00:20:54,340 --> 00:20:59,259
<font color="#E5E5E5">for</font><font color="#CCCCCC"> LLVM</font><font color="#E5E5E5"> okay so all packaged up he'll</font>

520
00:20:56,740 --> 00:21:00,700
be<font color="#E5E5E5"> easy to do for</font><font color="#CCCCCC"> LLVM i've</font><font color="#E5E5E5"> I hope to do</font>

521
00:20:59,259 --> 00:21:02,049
<font color="#E5E5E5">that this week not least because I've</font>

522
00:21:00,700 --> 00:21:05,019
got<font color="#CCCCCC"> home customer breathing down my neck</font>

523
00:21:02,049 --> 00:21:06,879
<font color="#E5E5E5">for the data and I</font><font color="#CCCCCC"> once give our</font>

524
00:21:05,019 --> 00:21:09,820
kaffarah crack<font color="#E5E5E5"> it wasn't fair</font><font color="#CCCCCC"> to compare</font>

525
00:21:06,879 --> 00:21:12,100
<font color="#E5E5E5">HS which is a</font><font color="#CCCCCC"> high-performance</font><font color="#E5E5E5"> Linux Pro</font>

526
00:21:09,820 --> 00:21:15,129
<font color="#CCCCCC">Class processor I should look</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> their</font>

527
00:21:12,100 --> 00:21:17,678
<font color="#CCCCCC">en processor</font><font color="#E5E5E5"> and say driven by customers</font>

528
00:21:15,129 --> 00:21:19,149
that one but I think<font color="#CCCCCC"> you know it arced</font>

529
00:21:17,679 --> 00:21:19,840
did very well given it wasn't in the

530
00:21:19,149 --> 00:21:22,689
same class

531
00:21:19,840 --> 00:21:25,720
<font color="#E5E5E5">um</font><font color="#CCCCCC"> I'd let I like to separate out code</font>

532
00:21:22,690 --> 00:21:27,369
and<font color="#E5E5E5"> read only data</font><font color="#CCCCCC"> okay the to art there</font>

533
00:21:25,720 --> 00:21:30,429
are optimizations that<font color="#E5E5E5"> push stuff into</font>

534
00:21:27,369 --> 00:21:31,809
data to drive<font color="#E5E5E5"> the code and you do need</font>

535
00:21:30,429 --> 00:21:33,009
<font color="#CCCCCC">to actually</font><font color="#E5E5E5"> break those out and</font><font color="#CCCCCC"> I'd</font>

536
00:21:31,809 --> 00:21:34,509
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> look like to look at</font>

537
00:21:33,009 --> 00:21:37,840
initialized writable data because<font color="#CCCCCC"> that</font>

538
00:21:34,509 --> 00:21:40,360
<font color="#E5E5E5">often goes into ROM as well and we've</font>

539
00:21:37,840 --> 00:21:44,139
only<font color="#E5E5E5"> spent four weeks looking at the</font>

540
00:21:40,360 --> 00:21:45,789
compiler analysis<font color="#E5E5E5"> okay and I think over</font>

541
00:21:44,139 --> 00:21:47,590
the next<font color="#CCCCCC"> coming months</font><font color="#E5E5E5"> there's going to</font>

542
00:21:45,789 --> 00:21:49,029
be a very fruitful set of optimizations

543
00:21:47,590 --> 00:21:51,549
that<font color="#E5E5E5"> come out from</font><font color="#CCCCCC"> looking at</font><font color="#E5E5E5"> those</font>

544
00:21:49,029 --> 00:21:53,139
extremes on the two graphs<font color="#E5E5E5"> to find out</font>

545
00:21:51,549 --> 00:21:55,570
why is arm twice as good

546
00:21:53,139 --> 00:21:57,189
why is arc twice as good why<font color="#E5E5E5"> are we</font>

547
00:21:55,570 --> 00:21:58,299
<font color="#CCCCCC">actually good here what are we doing</font>

548
00:21:57,190 --> 00:21:59,769
well<font color="#E5E5E5"> okay</font>

549
00:21:58,299 --> 00:22:01,059
and that's<font color="#CCCCCC"> actually beneficial</font><font color="#E5E5E5"> not just</font>

550
00:21:59,769 --> 00:22:03,549
to<font color="#CCCCCC"> wrist five but it's generally</font>

551
00:22:01,059 --> 00:22:07,240
beneficial<font color="#CCCCCC"> to arm</font><font color="#E5E5E5"> to arc unto the wider</font>

552
00:22:03,549 --> 00:22:10,110
GCC community<font color="#E5E5E5"> okay so the resources for</font>

553
00:22:07,240 --> 00:22:12,220
this<font color="#E5E5E5"> talk Beebe's</font><font color="#CCCCCC"> is freely available</font>

554
00:22:10,110 --> 00:22:16,899
<font color="#E5E5E5">it's it's free and</font><font color="#CCCCCC"> open</font><font color="#E5E5E5"> source software</font>

555
00:22:12,220 --> 00:22:18,549
<font color="#E5E5E5">it's available on</font><font color="#CCCCCC"> BBU</font><font color="#E5E5E5"> we modified it</font><font color="#CCCCCC"> a</font>

556
00:22:16,899 --> 00:22:20,080
<font color="#CCCCCC">bit for</font><font color="#E5E5E5"> this talk to make it easier</font><font color="#CCCCCC"> just</font>

557
00:22:18,549 --> 00:22:21,340
to drive through the stuff<font color="#CCCCCC"> there's a bit</font>

558
00:22:20,080 --> 00:22:24,039
more<font color="#CCCCCC"> information</font><font color="#E5E5E5"> that will</font><font color="#CCCCCC"> eventually</font><font color="#E5E5E5"> go</font>

559
00:22:21,340 --> 00:22:25,509
<font color="#CCCCCC">into a new release</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> Beebe's</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> I put</font>

560
00:22:24,039 --> 00:22:29,230
you<font color="#E5E5E5"> there the github</font><font color="#CCCCCC"> link to the actual</font>

561
00:22:25,509 --> 00:22:30,549
branch we use and this<font color="#CCCCCC"> is all written</font><font color="#E5E5E5"> up</font>

562
00:22:29,230 --> 00:22:32,020
as an application<font color="#E5E5E5"> note which is in</font>

563
00:22:30,549 --> 00:22:36,600
review at the moment

564
00:22:32,020 --> 00:22:39,170
should appear sometime next week and

565
00:22:36,600 --> 00:22:43,488
that's my talk<font color="#CCCCCC"> thank you</font>

566
00:22:39,170 --> 00:22:43,489
[Applause]

567
00:22:45,240 --> 00:23:10,800
questions<font color="#E5E5E5"> yes</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> question</font>

568
00:23:06,070 --> 00:23:14,230
that arm has a multi instruction push

569
00:23:10,800 --> 00:23:17,080
<font color="#E5E5E5">that keeps on coming up the initial</font>

570
00:23:14,230 --> 00:23:18,820
analysis suggests<font color="#CCCCCC"> that it's</font><font color="#E5E5E5"> not quite as</font>

571
00:23:17,080 --> 00:23:20,980
big<font color="#E5E5E5"> a thing as you</font><font color="#CCCCCC"> might think</font><font color="#E5E5E5"> not least</font>

572
00:23:18,820 --> 00:23:22,899
because<font color="#CCCCCC"> modern compilers</font><font color="#E5E5E5"> are quite good</font>

573
00:23:20,980 --> 00:23:24,490
about<font color="#CCCCCC"> optimizing away prologues they're</font>

574
00:23:22,900 --> 00:23:26,620
not rigorously stuck at the start<font color="#E5E5E5"> of the</font>

575
00:23:24,490 --> 00:23:28,030
function<font color="#E5E5E5"> but that's also a big driver</font>

576
00:23:26,620 --> 00:23:29,949
behind<font color="#E5E5E5"> the early Miller code stuff</font>

577
00:23:28,030 --> 00:23:33,960
because<font color="#CCCCCC"> mini code can actually give you</font>

578
00:23:29,950 --> 00:23:33,960
a push pop multiple register

579
00:23:42,340 --> 00:23:48,500
so so<font color="#E5E5E5"> good a good</font><font color="#CCCCCC"> global</font><font color="#E5E5E5"> link time</font>

580
00:23:46,340 --> 00:23:50,060
optimization<font color="#CCCCCC"> phase should actually be</font>

581
00:23:48,500 --> 00:23:57,460
like able<font color="#E5E5E5"> to allow you to decide whether</font>

582
00:23:50,060 --> 00:23:57,460
<font color="#E5E5E5">or not to</font><font color="#CCCCCC"> actually win</font>

583
00:24:49,399 --> 00:24:53,870
right so I'm<font color="#E5E5E5"> happy to look at any other</font>

584
00:24:51,260 --> 00:24:55,250
<font color="#E5E5E5">processes um the reason we've done these</font>

585
00:24:53,870 --> 00:24:57,739
three is<font color="#E5E5E5"> because I was paid to do them</font>

586
00:24:55,250 --> 00:25:03,679
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so it's you know anyone was on the</font>

587
00:24:57,740 --> 00:25:04,850
processor<font color="#E5E5E5"> my</font><font color="#CCCCCC"> pockets are open but the</font>

588
00:25:03,679 --> 00:25:07,880
first part<font color="#CCCCCC"> of your question which</font><font color="#E5E5E5"> I've</font>

589
00:25:04,850 --> 00:25:10,129
yeah using<font color="#E5E5E5"> object code</font><font color="#CCCCCC"> the we can use</font>

590
00:25:07,880 --> 00:25:12,590
object code<font color="#E5E5E5"> what we want to do we didn't</font>

591
00:25:10,130 --> 00:25:14,360
do it on this<font color="#CCCCCC"> one is I'm the big one of</font>

592
00:25:12,590 --> 00:25:15,559
<font color="#CCCCCC">the</font><font color="#E5E5E5"> two biggest improvements in compiler</font>

593
00:25:14,360 --> 00:25:17,600
optimization<font color="#E5E5E5"> in the last</font><font color="#CCCCCC"> twenty years</font>

594
00:25:15,559 --> 00:25:20,539
has<font color="#CCCCCC"> been linked to</font><font color="#E5E5E5"> I'm optimization and</font>

595
00:25:17,600 --> 00:25:22,658
I want to be and I know I could link

596
00:25:20,539 --> 00:25:28,070
time<font color="#CCCCCC"> optimized but not put the librarian</font>

597
00:25:22,659 --> 00:25:29,720
what we so I need<font color="#E5E5E5"> I'd need to do</font><font color="#CCCCCC"> linked</font>

598
00:25:28,070 --> 00:25:32,620
<font color="#CCCCCC">I</font><font color="#E5E5E5"> need to do object code that I'd</font><font color="#CCCCCC"> linked</font>

599
00:25:29,720 --> 00:25:36,919
<font color="#CCCCCC">I'm optimize so it is a possibility</font>

600
00:25:32,620 --> 00:25:38,570
mmm it's a different<font color="#E5E5E5"> approach</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> that's</font>

601
00:25:36,919 --> 00:25:39,980
why we didn't trivially at this case

602
00:25:38,570 --> 00:25:40,309
just say let's look at all the object

603
00:25:39,980 --> 00:25:41,539
files

604
00:25:40,309 --> 00:25:42,918
it doesn't always give you<font color="#CCCCCC"> scent but</font>

605
00:25:41,539 --> 00:25:45,620
it's an<font color="#E5E5E5"> alternative approach it's not</font>

606
00:25:42,919 --> 00:25:46,639
right<font color="#E5E5E5"> or</font><font color="#CCCCCC"> wrong it</font><font color="#E5E5E5"> okay okay I'm</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font>

607
00:25:45,620 --> 00:26:04,070
look<font color="#E5E5E5"> this way because I've been</font><font color="#CCCCCC"> taking</font>

608
00:25:46,639 --> 00:26:07,309
quest for<font color="#CCCCCC"> that yes long back then you</font>

609
00:26:04,070 --> 00:26:10,158
can't and I am the<font color="#E5E5E5"> first to say</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> if</font>

610
00:26:07,309 --> 00:26:11,539
<font color="#E5E5E5">you're benchmarking you should actually</font>

611
00:26:10,159 --> 00:26:16,039
<font color="#CCCCCC">the best benchmark code is your</font>

612
00:26:11,539 --> 00:26:17,450
<font color="#CCCCCC">application and you know we're looking</font>

613
00:26:16,039 --> 00:26:18,679
<font color="#E5E5E5">at code size here when it comes</font><font color="#CCCCCC"> to</font>

614
00:26:17,450 --> 00:26:20,000
performance there<font color="#E5E5E5"> are all sorts of</font>

615
00:26:18,679 --> 00:26:21,710
things<font color="#CCCCCC"> for example actually</font><font color="#E5E5E5"> where you</font>

616
00:26:20,000 --> 00:26:23,960
<font color="#CCCCCC">position your code in flash makes</font><font color="#E5E5E5"> a big</font>

617
00:26:21,710 --> 00:26:28,220
difference<font color="#E5E5E5"> to</font><font color="#CCCCCC"> energy efficiency for</font>

618
00:26:23,960 --> 00:26:31,010
example<font color="#E5E5E5"> so this is only one aspect of</font>

619
00:26:28,220 --> 00:26:32,899
<font color="#E5E5E5">what you do there's no reason why this</font>

620
00:26:31,010 --> 00:26:34,669
approach can't be used with any code

621
00:26:32,899 --> 00:26:36,289
<font color="#E5E5E5">view this is about an approach I've used</font>

622
00:26:34,669 --> 00:26:38,210
<font color="#CCCCCC">Beebe's it works for</font><font color="#E5E5E5"> us</font><font color="#CCCCCC"> it was</font>

623
00:26:36,289 --> 00:26:39,919
appropriate<font color="#E5E5E5"> in this case but there are</font>

624
00:26:38,210 --> 00:26:41,570
other you can<font color="#E5E5E5"> use any computational</font>

625
00:26:39,919 --> 00:26:43,639
kernel you want to and<font color="#E5E5E5"> apply the same</font>

626
00:26:41,570 --> 00:26:44,899
thinking to it<font color="#E5E5E5"> compare it what we're</font>

627
00:26:43,639 --> 00:26:46,279
trying<font color="#E5E5E5"> to find out is what does our</font>

628
00:26:44,899 --> 00:26:49,010
compiler do well and<font color="#E5E5E5"> what's the compiler</font>

629
00:26:46,279 --> 00:26:50,690
do badly<font color="#CCCCCC"> so I think</font><font color="#E5E5E5"> yeah you do it with</font>

630
00:26:49,010 --> 00:26:53,750
anything<font color="#E5E5E5"> you want to and whatever is</font>

631
00:26:50,690 --> 00:26:56,139
<font color="#E5E5E5">most relevant</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> your use case questions</font>

632
00:26:53,750 --> 00:26:56,139
more<font color="#E5E5E5"> questions</font>

633
00:27:11,310 --> 00:27:15,460
yes that's<font color="#CCCCCC"> worse a</font><font color="#E5E5E5"> question is did we</font>

634
00:27:13,450 --> 00:27:17,290
use new<font color="#E5E5E5"> level new</font><font color="#CCCCCC"> luden nano with</font><font color="#E5E5E5"> arm</font>

635
00:27:15,460 --> 00:27:19,150
and I cannot for the life of me remember

636
00:27:17,290 --> 00:27:21,070
I have a suspicion<font color="#CCCCCC"> it was new Lib</font><font color="#E5E5E5"> nano</font>

637
00:27:19,150 --> 00:27:23,520
because of the<font color="#E5E5E5"> looking small</font><font color="#CCCCCC"> guy</font><font color="#E5E5E5"> but I</font>

638
00:27:21,070 --> 00:27:26,439
would have to go<font color="#E5E5E5"> away and take</font><font color="#CCCCCC"> that one</font>

639
00:27:23,520 --> 00:27:27,850
<font color="#E5E5E5">even if it was new</font><font color="#CCCCCC"> Lib nano I would</font>

640
00:27:26,440 --> 00:27:30,130
still want to<font color="#E5E5E5"> take it out</font><font color="#CCCCCC"> because I know</font>

641
00:27:27,850 --> 00:27:31,419
new<font color="#CCCCCC"> Lib nanos a lot smaller</font><font color="#E5E5E5"> and so there</font>

642
00:27:30,130 --> 00:27:32,860
will be less distortion<font color="#E5E5E5"> but you should</font>

643
00:27:31,420 --> 00:27:36,270
still get rid of precompiled libraries

644
00:27:32,860 --> 00:27:38,929
anyway but<font color="#E5E5E5"> no good question</font>

645
00:27:36,270 --> 00:27:46,689
<font color="#CCCCCC">ok thank you</font><font color="#E5E5E5"> very much indeed</font>

646
00:27:38,930 --> 00:27:46,689
[Applause]

