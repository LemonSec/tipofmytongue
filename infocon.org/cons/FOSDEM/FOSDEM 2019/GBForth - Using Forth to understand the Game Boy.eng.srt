1
00:00:05,160 --> 00:00:11,740
<font color="#E5E5E5">all right welcome everyone</font><font color="#CCCCCC"> so today</font>

2
00:00:09,129 --> 00:00:14,709
we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> talk a little bit about</font><font color="#CCCCCC"> Game</font>

3
00:00:11,740 --> 00:00:20,470
<font color="#CCCCCC">Boy programming or actually discovering</font>

4
00:00:14,709 --> 00:00:23,049
how game<font color="#E5E5E5"> boys work using</font><font color="#CCCCCC"> forth</font><font color="#E5E5E5"> first</font>

5
00:00:20,470 --> 00:00:26,529
introduce ourselves<font color="#CCCCCC"> this is my</font><font color="#E5E5E5"> colleague</font>

6
00:00:23,050 --> 00:00:28,740
the<font color="#E5E5E5"> beats</font><font color="#CCCCCC"> I'm time we are working</font><font color="#E5E5E5"> at a</font>

7
00:00:26,530 --> 00:00:34,660
consultancy company and Amsterdam

8
00:00:28,740 --> 00:00:36,129
<font color="#E5E5E5">reactor</font><font color="#CCCCCC"> and our main work</font><font color="#E5E5E5"> consists at</font>

9
00:00:34,660 --> 00:00:38,589
the moment of like JavaScript

10
00:00:36,129 --> 00:00:41,530
programming not always the<font color="#CCCCCC"> most</font>

11
00:00:38,589 --> 00:00:44,190
challenging stuff so we decided<font color="#E5E5E5"> to start</font>

12
00:00:41,530 --> 00:00:46,899
a sort of<font color="#CCCCCC"> After Hours</font><font color="#E5E5E5"> hacking group</font>

13
00:00:44,190 --> 00:00:50,170
called the<font color="#E5E5E5"> MCM hackers with a few other</font>

14
00:00:46,899 --> 00:00:52,030
colleagues<font color="#CCCCCC"> so for the first project we</font>

15
00:00:50,170 --> 00:00:54,550
were thinking what is interesting<font color="#E5E5E5"> to do</font>

16
00:00:52,030 --> 00:00:57,399
something novel<font color="#E5E5E5"> hopefully and something</font>

17
00:00:54,550 --> 00:00:59,799
that<font color="#E5E5E5"> we can learn something from and we</font>

18
00:00:57,399 --> 00:01:02,739
started playing<font color="#E5E5E5"> around with writing some</font>

19
00:00:59,799 --> 00:01:05,019
emulators<font color="#CCCCCC"> I started writing like a chip</font>

20
00:01:02,739 --> 00:01:07,860
<font color="#CCCCCC">8 simulator which is like the most</font>

21
00:01:05,019 --> 00:01:09,969
obvious<font color="#CCCCCC"> place to start I believe and</font>

22
00:01:07,860 --> 00:01:13,570
<font color="#E5E5E5">we're thinking</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> can we</font><font color="#E5E5E5"> make this</font>

23
00:01:09,969 --> 00:01:14,890
into<font color="#E5E5E5"> like a bigger project</font><font color="#CCCCCC"> so we were</font>

24
00:01:13,570 --> 00:01:17,169
<font color="#E5E5E5">thinking</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> maybe we could like do</font>

25
00:01:14,890 --> 00:01:20,229
<font color="#E5E5E5">Gameboy emulators but that's like quite</font>

26
00:01:17,170 --> 00:01:21,340
saturated<font color="#E5E5E5"> field already</font><font color="#CCCCCC"> and I don't</font>

27
00:01:20,229 --> 00:01:24,670
<font color="#CCCCCC">think we would be able</font><font color="#E5E5E5"> to compete with</font>

28
00:01:21,340 --> 00:01:26,670
<font color="#E5E5E5">some of them out there</font><font color="#CCCCCC"> a gameboy game</font>

29
00:01:24,670 --> 00:01:29,140
<font color="#E5E5E5">also</font><font color="#CCCCCC"> like don't quite often and</font>

30
00:01:26,670 --> 00:01:33,299
eventually we settled on writing a

31
00:01:29,140 --> 00:01:33,299
compiler for<font color="#E5E5E5"> the original Game Boy</font>

32
00:01:35,060 --> 00:01:37,690
nope

33
00:01:40,530 --> 00:01:49,710
<font color="#CCCCCC">okay so</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> Stein set the</font><font color="#E5E5E5"> game</font><font color="#CCCCCC"> boy</font><font color="#E5E5E5"> having</font>

34
00:01:46,920 --> 00:01:51,810
studied quite a lot already<font color="#CCCCCC"> so you can</font>

35
00:01:49,710 --> 00:01:52,979
find plenty of like<font color="#E5E5E5"> manuals tutorials</font>

36
00:01:51,810 --> 00:01:56,640
about<font color="#CCCCCC"> how to</font><font color="#E5E5E5"> write games how to use</font>

37
00:01:52,979 --> 00:01:58,320
assembly and everything but<font color="#CCCCCC"> that we have</font>

38
00:01:56,640 --> 00:02:00,330
<font color="#CCCCCC">the protocols a</font><font color="#E5E5E5"> little bit and the key</font>

39
00:01:58,320 --> 00:02:02,639
<font color="#E5E5E5">point is</font><font color="#CCCCCC"> to try not to</font><font color="#E5E5E5"> use any tooling</font>

40
00:02:00,330 --> 00:02:05,009
<font color="#E5E5E5">we need the manuals we cannot really</font>

41
00:02:02,640 --> 00:02:07,050
write the compiler without documentation

42
00:02:05,010 --> 00:02:10,140
on the hardware<font color="#E5E5E5"> but we try to avoid</font>

43
00:02:07,050 --> 00:02:12,329
using<font color="#E5E5E5"> emulators or</font><font color="#CCCCCC"> debugger</font><font color="#E5E5E5"> or anything</font>

44
00:02:10,139 --> 00:02:14,488
<font color="#E5E5E5">as much as possible but all at some</font>

45
00:02:12,330 --> 00:02:15,989
points what's useful but should be<font color="#E5E5E5"> like</font>

46
00:02:14,489 --> 00:02:20,820
<font color="#E5E5E5">something that actually be completely</font>

47
00:02:15,989 --> 00:02:25,170
necessary so let's talk a little<font color="#E5E5E5"> bit</font>

48
00:02:20,820 --> 00:02:27,840
about the<font color="#CCCCCC"> gameboy architecture the CPU</font>

49
00:02:25,170 --> 00:02:31,649
<font color="#E5E5E5">is a mix between the 8080</font><font color="#CCCCCC"> and they</font><font color="#E5E5E5"> set</font>

50
00:02:27,840 --> 00:02:34,410
<font color="#E5E5E5">80 CPUs but the skew stone</font><font color="#CCCCCC"> the internal</font>

51
00:02:31,650 --> 00:02:35,910
clock<font color="#E5E5E5"> runs at four megahertz but every</font>

52
00:02:34,410 --> 00:02:39,900
structure<font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually like multiple</font><font color="#E5E5E5"> of</font>

53
00:02:35,910 --> 00:02:43,440
four cycles so in practice the<font color="#E5E5E5"> CPU is</font>

54
00:02:39,900 --> 00:02:45,209
like<font color="#CCCCCC"> 1 megahertz there are like 32</font>

55
00:02:43,440 --> 00:02:47,760
kilobyte<font color="#E5E5E5"> self addressable from memory</font>

56
00:02:45,209 --> 00:02:49,590
but only<font color="#E5E5E5"> 4 kilobytes are working memory</font>

57
00:02:47,760 --> 00:02:52,560
that you can actually use there<font color="#E5E5E5"> are</font>

58
00:02:49,590 --> 00:02:54,600
another 4 kilobytes<font color="#E5E5E5"> but</font><font color="#CCCCCC"> that should</font><font color="#E5E5E5"> be</font>

59
00:02:52,560 --> 00:02:55,950
<font color="#E5E5E5">sorted in the cartridge and depends on</font>

60
00:02:54,600 --> 00:03:00,150
<font color="#E5E5E5">the personality of the caches that</font>

61
00:02:55,950 --> 00:03:04,500
<font color="#E5E5E5">you're using so</font><font color="#CCCCCC"> there are</font><font color="#E5E5E5"> eight</font>

62
00:03:00,150 --> 00:03:06,120
<font color="#E5E5E5">registers a</font><font color="#CCCCCC"> to F</font><font color="#E5E5E5"> some of then you can</font>

63
00:03:04,500 --> 00:03:09,989
actually<font color="#E5E5E5"> combine them and use it in</font>

64
00:03:06,120 --> 00:03:12,480
<font color="#E5E5E5">connect 16 16 bits wave but they're</font>

65
00:03:09,989 --> 00:03:15,650
actually<font color="#E5E5E5"> all at 8 bit</font><font color="#CCCCCC"> as of the product</font>

66
00:03:12,480 --> 00:03:15,649
counter<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> stack pointer</font>

67
00:03:17,470 --> 00:03:24,050
then we have<font color="#E5E5E5"> like the video hardware</font>

68
00:03:21,670 --> 00:03:26,179
<font color="#CCCCCC">similar to like the historic dog that we</font>

69
00:03:24,050 --> 00:03:29,150
saw this morning

70
00:03:26,180 --> 00:03:31,700
you have like a<font color="#CCCCCC"> scanline</font><font color="#E5E5E5"> goes left to</font>

71
00:03:29,150 --> 00:03:34,640
<font color="#E5E5E5">right on top to bottom</font><font color="#CCCCCC"> you will</font><font color="#E5E5E5"> have</font>

72
00:03:31,700 --> 00:03:36,920
some space some time between each line

73
00:03:34,640 --> 00:03:39,500
that<font color="#CCCCCC"> is like the whole salt</font><font color="#E5E5E5"> horizontal</font>

74
00:03:36,920 --> 00:03:42,470
blank<font color="#E5E5E5"> and between the end line and the</font>

75
00:03:39,500 --> 00:03:44,630
top<font color="#E5E5E5"> line at the Berger Blanc the</font>

76
00:03:42,470 --> 00:03:47,359
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> is that the video</font>

77
00:03:44,630 --> 00:03:49,040
<font color="#E5E5E5">memory is actually usable when the</font>

78
00:03:47,360 --> 00:03:50,540
hardware is<font color="#CCCCCC"> actual</font><font color="#E5E5E5"> drawing so you have</font>

79
00:03:49,040 --> 00:03:53,239
to synchronize your<font color="#E5E5E5"> code with the</font>

80
00:03:50,540 --> 00:03:55,370
hardware to<font color="#E5E5E5"> only write to the beta</font>

81
00:03:53,240 --> 00:04:00,170
memory in the vertical or horizontal

82
00:03:55,370 --> 00:04:05,150
<font color="#CCCCCC">blank so this is quite</font><font color="#E5E5E5"> tricky to get</font>

83
00:04:00,170 --> 00:04:07,519
right<font color="#E5E5E5"> and what we saw this like if we</font>

84
00:04:05,150 --> 00:04:09,130
start writing<font color="#CCCCCC"> the compiler</font><font color="#E5E5E5"> it's not a</font>

85
00:04:07,520 --> 00:04:11,480
visually<font color="#E5E5E5"> difficult to get any feedback</font>

86
00:04:09,130 --> 00:04:14,380
<font color="#E5E5E5">so you have to get</font><font color="#CCCCCC"> pretty far</font><font color="#E5E5E5"> just to</font>

87
00:04:11,480 --> 00:04:14,380
get<font color="#CCCCCC"> starting</font><font color="#E5E5E5"> on the screen</font>

88
00:04:16,089 --> 00:04:21,578
additionally there are<font color="#E5E5E5"> some other six</font>

89
00:04:19,418 --> 00:04:24,729
things like sound subsistence<font color="#CCCCCC"> you have</font>

90
00:04:21,579 --> 00:04:25,919
some input<font color="#E5E5E5"> timers but these are like to</font>

91
00:04:24,729 --> 00:04:32,580
talk to the wu-tang<font color="#CCCCCC"> worked on later</font>

92
00:04:25,919 --> 00:04:37,510
<font color="#E5E5E5">initially we focus on the video okay</font><font color="#CCCCCC"> so</font>

93
00:04:32,580 --> 00:04:40,810
how do<font color="#E5E5E5"> we start that we read the manual</font>

94
00:04:37,510 --> 00:04:43,870
but as I said<font color="#E5E5E5"> is not easy to write</font><font color="#CCCCCC"> the</font>

95
00:04:40,810 --> 00:04:45,610
<font color="#E5E5E5">compiler for a scratch</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> feedback is</font>

96
00:04:43,870 --> 00:04:49,060
going<font color="#E5E5E5"> to be pretty long it's not</font>

97
00:04:45,610 --> 00:04:50,830
incremental<font color="#E5E5E5"> and we will probably need</font>

98
00:04:49,060 --> 00:04:54,639
some debuggers or assistant<font color="#E5E5E5"> tooling to</font>

99
00:04:50,830 --> 00:04:56,969
actually<font color="#E5E5E5"> assist with this so instead we</font>

100
00:04:54,639 --> 00:04:59,590
<font color="#CCCCCC">decided to start</font><font color="#E5E5E5"> with a working</font><font color="#CCCCCC"> game</font>

101
00:04:56,970 --> 00:05:01,120
that as time<font color="#E5E5E5"> we'll</font><font color="#CCCCCC"> show you later</font><font color="#E5E5E5"> was as</font>

102
00:04:59,590 --> 00:05:02,650
a hello<font color="#CCCCCC"> world the simplest drum the</font>

103
00:05:01,120 --> 00:05:06,639
liquid<font color="#CCCCCC"> fine and we're</font><font color="#E5E5E5"> going to reverse</font>

104
00:05:02,650 --> 00:05:08,650
engineer<font color="#CCCCCC"> this memory using force into</font>

105
00:05:06,639 --> 00:05:11,020
<font color="#CCCCCC">lockup readable</font><font color="#E5E5E5"> programs</font><font color="#CCCCCC"> you can</font>

106
00:05:08,650 --> 00:05:13,929
<font color="#E5E5E5">actually modify later on then on top of</font>

107
00:05:11,020 --> 00:05:15,849
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we will</font><font color="#CCCCCC"> read a compiler tang will</font>

108
00:05:13,930 --> 00:05:18,030
<font color="#E5E5E5">show you like the steps more carefully</font>

109
00:05:15,850 --> 00:05:21,460
later<font color="#E5E5E5"> but let's just play a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit</font>

110
00:05:18,030 --> 00:05:25,710
<font color="#E5E5E5">forth that's actually anybody in the</font>

111
00:05:21,460 --> 00:05:29,409
audience use for before<font color="#E5E5E5"> all right</font><font color="#CCCCCC"> nice</font>

112
00:05:25,710 --> 00:05:31,000
<font color="#E5E5E5">so forth is basically the simplest</font>

113
00:05:29,410 --> 00:05:34,419
<font color="#E5E5E5">language that you can imagine</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> least</font>

114
00:05:31,000 --> 00:05:37,570
for me there is<font color="#E5E5E5"> no syntax your total</font>

115
00:05:34,419 --> 00:05:41,919
<font color="#CCCCCC">scissors of space separated words that's</font>

116
00:05:37,570 --> 00:05:44,200
all<font color="#CCCCCC"> you have numbers and you have other</font>

117
00:05:41,919 --> 00:05:46,479
words<font color="#E5E5E5"> numbers will push themselves to a</font>

118
00:05:44,200 --> 00:05:48,520
stack<font color="#E5E5E5"> and then the words will execute an</font>

119
00:05:46,479 --> 00:05:50,289
action usually<font color="#E5E5E5"> taking parameters from</font>

120
00:05:48,520 --> 00:05:52,770
<font color="#E5E5E5">the</font><font color="#CCCCCC"> stack and pushing</font><font color="#E5E5E5"> that restore back</font>

121
00:05:50,289 --> 00:05:52,770
to<font color="#CCCCCC"> the stack</font>

122
00:05:53,949 --> 00:06:00,669
you can of course then define your own

123
00:05:56,169 --> 00:06:02,590
words<font color="#E5E5E5"> so in this example we add 5 well 5</font>

124
00:06:00,669 --> 00:06:04,870
<font color="#E5E5E5">is pushed to the stack we pushed on to</font>

125
00:06:02,590 --> 00:06:07,719
the stack<font color="#CCCCCC"> PLAs</font><font color="#E5E5E5"> will pop two elements</font>

126
00:06:04,870 --> 00:06:09,879
from the stack<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that will pop the</font>

127
00:06:07,719 --> 00:06:10,590
result of<font color="#E5E5E5"> plus and</font><font color="#CCCCCC"> print it in the</font>

128
00:06:09,879 --> 00:06:13,719
screen

129
00:06:10,590 --> 00:06:17,888
the interesting<font color="#CCCCCC"> thing here is you can</font>

130
00:06:13,719 --> 00:06:19,539
<font color="#E5E5E5">take just</font><font color="#CCCCCC"> one + or any super sequence of</font>

131
00:06:17,889 --> 00:06:22,389
words and instructively to your own

132
00:06:19,539 --> 00:06:25,919
definition<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> define here</font><font color="#E5E5E5"> increment</font>

133
00:06:22,389 --> 00:06:25,919
as 1<font color="#CCCCCC"> +</font>

134
00:06:26,970 --> 00:06:31,830
so this property<font color="#CCCCCC"> the ability to extract</font>

135
00:06:29,880 --> 00:06:33,560
any subset of words into<font color="#CCCCCC"> your</font><font color="#E5E5E5"> own</font>

136
00:06:31,830 --> 00:06:35,969
definition<font color="#E5E5E5"> makes the language</font>

137
00:06:33,560 --> 00:06:37,200
<font color="#E5E5E5">concatenative and that's a property</font>

138
00:06:35,970 --> 00:06:38,790
that's<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be very very useful to</font>

139
00:06:37,200 --> 00:06:41,550
reverse<font color="#CCCCCC"> engineer the problem</font>

140
00:06:38,790 --> 00:06:44,850
as time will show you<font color="#CCCCCC"> and additionally</font>

141
00:06:41,550 --> 00:06:48,980
if<font color="#CCCCCC"> you pick carefully the words that are</font>

142
00:06:44,850 --> 00:06:52,470
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> make your language</font><font color="#CCCCCC"> you can define</font>

143
00:06:48,980 --> 00:06:54,690
domain you<font color="#E5E5E5"> can find the many specific</font>

144
00:06:52,470 --> 00:06:56,640
languages<font color="#E5E5E5"> to model what you are trying</font>

145
00:06:54,690 --> 00:07:00,380
<font color="#CCCCCC">to do and time will show you as</font><font color="#E5E5E5"> well</font>

146
00:06:56,640 --> 00:07:00,380
vertical example in the<font color="#E5E5E5"> ass</font><font color="#CCCCCC"> bread</font>

147
00:07:02,690 --> 00:07:07,150
wait so I will the<font color="#CCCCCC"> times play</font><font color="#E5E5E5"> now how</font>

148
00:07:05,750 --> 00:07:14,720
this<font color="#E5E5E5"> works</font><font color="#CCCCCC"> in practice</font>

149
00:07:07,150 --> 00:07:16,789
hopefully<font color="#CCCCCC"> okay so we set up on like the</font>

150
00:07:14,720 --> 00:07:20,240
<font color="#E5E5E5">language</font><font color="#CCCCCC"> the word use for this project</font>

151
00:07:16,790 --> 00:07:23,060
<font color="#CCCCCC">and we looked over on the internet for</font>

152
00:07:20,240 --> 00:07:26,330
the most<font color="#E5E5E5"> simple case of a</font><font color="#CCCCCC"> ROM that we</font>

153
00:07:23,060 --> 00:07:28,280
could find just a<font color="#CCCCCC"> ROM that prints hello</font>

154
00:07:26,330 --> 00:07:32,570
world to the screen and doesn't do

155
00:07:28,280 --> 00:07:34,250
anything else<font color="#CCCCCC"> like just stops there this</font>

156
00:07:32,570 --> 00:07:38,210
<font color="#E5E5E5">was already</font><font color="#CCCCCC"> something that we had no</font>

157
00:07:34,250 --> 00:07:41,900
clue like how to<font color="#E5E5E5"> make so we just started</font>

158
00:07:38,210 --> 00:07:44,419
<font color="#E5E5E5">from the ROM</font><font color="#CCCCCC"> this is the part</font><font color="#E5E5E5"> of the hex</font>

159
00:07:41,900 --> 00:07:47,270
<font color="#CCCCCC">dome of the</font><font color="#E5E5E5"> codes obviously like</font>

160
00:07:44,420 --> 00:07:51,260
completely meaningless<font color="#CCCCCC"> to to us at this</font>

161
00:07:47,270 --> 00:07:54,229
<font color="#E5E5E5">point but we knew</font><font color="#CCCCCC"> that this was a</font>

162
00:07:51,260 --> 00:07:55,610
<font color="#E5E5E5">working room and we took actually to</font>

163
00:07:54,230 --> 00:07:58,610
make sure that we would keep<font color="#E5E5E5"> this ROM</font>

164
00:07:55,610 --> 00:08:00,680
intact<font color="#CCCCCC"> over the</font><font color="#E5E5E5"> course of the process</font>

165
00:07:58,610 --> 00:08:03,200
<font color="#E5E5E5">would keep like a hash of the file</font>

166
00:08:00,680 --> 00:08:05,000
somewhere and verify<font color="#E5E5E5"> that like every</font>

167
00:08:03,200 --> 00:08:11,960
step we took like we are still compiling

168
00:08:05,000 --> 00:08:14,690
the same room<font color="#E5E5E5"> so we changed this file</font>

169
00:08:11,960 --> 00:08:17,659
pretty much just adding the word<font color="#E5E5E5"> C comma</font>

170
00:08:14,690 --> 00:08:20,419
in between every bytes<font color="#CCCCCC"> so C comma is a</font>

171
00:08:17,660 --> 00:08:22,730
word<font color="#CCCCCC"> that takes the argument from the</font>

172
00:08:20,419 --> 00:08:26,000
stack<font color="#CCCCCC"> so pretty</font><font color="#E5E5E5"> much</font><font color="#CCCCCC"> like that the value</font>

173
00:08:22,730 --> 00:08:29,120
<font color="#E5E5E5">that comes before it and writes it to a</font>

174
00:08:26,000 --> 00:08:30,470
file<font color="#E5E5E5"> or wrong basically so in a way this</font>

175
00:08:29,120 --> 00:08:32,960
was<font color="#E5E5E5"> our first like version of the</font>

176
00:08:30,470 --> 00:08:34,880
compiler<font color="#CCCCCC"> that would only produce like a</font>

177
00:08:32,960 --> 00:08:36,620
hello<font color="#CCCCCC"> worlds</font><font color="#E5E5E5"> from but it's like</font>

178
00:08:34,880 --> 00:08:39,620
executing and like producing something

179
00:08:36,620 --> 00:08:41,120
<font color="#E5E5E5">that</font><font color="#CCCCCC"> actually runs on a gameboy</font><font color="#E5E5E5"> actually</font>

180
00:08:39,620 --> 00:08:46,820
at this<font color="#E5E5E5"> point we didn't try</font><font color="#CCCCCC"> to run that</font>

181
00:08:41,120 --> 00:08:49,220
<font color="#CCCCCC">but so still like kind of</font><font color="#E5E5E5"> like a</font>

182
00:08:46,820 --> 00:08:51,650
meaningless sequence of numbers<font color="#E5E5E5"> so we</font>

183
00:08:49,220 --> 00:08:54,770
went to<font color="#CCCCCC"> look for offsets of where</font>

184
00:08:51,650 --> 00:08:57,199
certain data<font color="#E5E5E5"> is stored</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> gameboard</font>

185
00:08:54,770 --> 00:08:59,300
documentation and like<font color="#CCCCCC"> other</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> wiki's</font>

186
00:08:57,200 --> 00:09:01,850
online that we could find like they show

187
00:08:59,300 --> 00:09:03,770
<font color="#E5E5E5">a quite distinct part of the card which</font>

188
00:09:01,850 --> 00:09:06,940
<font color="#CCCCCC">is</font><font color="#E5E5E5"> the header which contains some meta</font>

189
00:09:03,770 --> 00:09:09,199
information like the<font color="#CCCCCC"> title of</font><font color="#E5E5E5"> the room</font>

190
00:09:06,940 --> 00:09:11,810
like a checksum<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make sure that like</font>

191
00:09:09,200 --> 00:09:15,560
all the bits are intact<font color="#CCCCCC"> manufacturer</font>

192
00:09:11,810 --> 00:09:16,550
information<font color="#CCCCCC"> etc</font><font color="#E5E5E5"> and we identified like</font>

193
00:09:15,560 --> 00:09:19,689
the<font color="#E5E5E5"> offset of this</font>

194
00:09:16,550 --> 00:09:22,310
and we can see here like<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> the</font>

195
00:09:19,690 --> 00:09:25,640
Nintendo logo on<font color="#E5E5E5"> top and on the bottom</font>

196
00:09:22,310 --> 00:09:29,479
<font color="#E5E5E5">we have the example title for our</font><font color="#CCCCCC"> ROM</font>

197
00:09:25,640 --> 00:09:32,660
<font color="#E5E5E5">and we can simply extract this into a</font>

198
00:09:29,480 --> 00:09:35,029
new words<font color="#E5E5E5"> so now we have a logo and</font><font color="#CCCCCC"> a</font>

199
00:09:32,660 --> 00:09:38,300
title<font color="#E5E5E5"> words that still do the same thing</font>

200
00:09:35,029 --> 00:09:39,950
and due to the<font color="#CCCCCC"> concatenated nature you</font>

201
00:09:38,300 --> 00:09:42,589
<font color="#E5E5E5">can't simply just replace those</font>

202
00:09:39,950 --> 00:09:43,459
sequences with any words and we get

203
00:09:42,589 --> 00:09:46,430
<font color="#E5E5E5">something that's a little bit more</font>

204
00:09:43,459 --> 00:09:48,170
<font color="#CCCCCC">readable if you</font><font color="#E5E5E5"> imagine these like</font>

205
00:09:46,430 --> 00:09:51,589
definitions to be abstracted away

206
00:09:48,170 --> 00:09:54,140
somewhere else<font color="#CCCCCC"> still producing exactly</font>

207
00:09:51,589 --> 00:09:56,120
the same room<font color="#E5E5E5"> but we can slowly</font><font color="#CCCCCC"> start</font>

208
00:09:54,140 --> 00:09:58,069
<font color="#E5E5E5">seeing a structure in the program of</font>

209
00:09:56,120 --> 00:10:02,209
<font color="#CCCCCC">course like we keep</font><font color="#E5E5E5"> repeating this for</font>

210
00:09:58,070 --> 00:10:04,430
the rest of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> program as</font><font color="#E5E5E5"> well at</font><font color="#CCCCCC"> some</font>

211
00:10:02,209 --> 00:10:07,430
point with all the sort<font color="#CCCCCC"> of like raw data</font>

212
00:10:04,430 --> 00:10:09,620
<font color="#E5E5E5">extracted so some like flax is indicated</font>

213
00:10:07,430 --> 00:10:14,050
it's a color<font color="#E5E5E5"> Gameboy game or a normal</font>

214
00:10:09,620 --> 00:10:17,089
game boy game<font color="#E5E5E5"> like the title fields etc</font>

215
00:10:14,050 --> 00:10:20,000
<font color="#E5E5E5">then</font><font color="#CCCCCC"> we are left with some</font><font color="#E5E5E5"> bytes that we</font>

216
00:10:17,089 --> 00:10:22,310
haven't like translated yes<font color="#CCCCCC"> and that's</font>

217
00:10:20,000 --> 00:10:23,779
<font color="#CCCCCC">pretty</font><font color="#E5E5E5"> much</font><font color="#CCCCCC"> the program</font><font color="#E5E5E5"> itself because</font>

218
00:10:22,310 --> 00:10:26,390
of course like<font color="#CCCCCC"> this no</font><font color="#E5E5E5"> documentation</font>

219
00:10:23,779 --> 00:10:30,520
will tell you what the actual<font color="#CCCCCC"> code will</font>

220
00:10:26,390 --> 00:10:34,670
<font color="#CCCCCC">look like so for</font><font color="#E5E5E5"> this we reference the</font>

221
00:10:30,520 --> 00:10:36,819
CPU manual and<font color="#E5E5E5"> we'll find like certain</font>

222
00:10:34,670 --> 00:10:39,649
numbers are like certain<font color="#E5E5E5"> op codes and</font>

223
00:10:36,820 --> 00:10:43,220
<font color="#E5E5E5">here is an example of the hexadecimal</font>

224
00:10:39,649 --> 00:10:47,149
<font color="#E5E5E5">value</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> 3 see pretty much translating</font>

225
00:10:43,220 --> 00:10:49,579
to an increment<font color="#E5E5E5"> a so the a register and</font>

226
00:10:47,149 --> 00:10:55,579
a<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> for translating to like a</font>

227
00:10:49,579 --> 00:10:57,649
increment B<font color="#CCCCCC"> hmm so first things we can</font>

228
00:10:55,579 --> 00:10:59,599
of course<font color="#E5E5E5"> replace all these like numbers</font>

229
00:10:57,649 --> 00:11:02,420
with only words<font color="#CCCCCC"> that emits that number</font>

230
00:10:59,600 --> 00:11:04,670
<font color="#E5E5E5">and that will work</font><font color="#CCCCCC"> fairly well but the</font>

231
00:11:02,420 --> 00:11:07,069
nice<font color="#CCCCCC"> thing is</font><font color="#E5E5E5"> that we can find again</font>

232
00:11:04,670 --> 00:11:09,649
<font color="#E5E5E5">like patterns in these like in between</font>

233
00:11:07,070 --> 00:11:12,620
<font color="#CCCCCC">the machine codes as well</font><font color="#E5E5E5"> so what</font><font color="#CCCCCC"> you</font>

234
00:11:09,649 --> 00:11:16,490
can do is abstract away<font color="#CCCCCC"> the operands of</font>

235
00:11:12,620 --> 00:11:19,459
a<font color="#E5E5E5"> connection</font><font color="#CCCCCC"> so the increments we can</font>

236
00:11:16,490 --> 00:11:23,120
define separately and basically<font color="#CCCCCC"> combined</font>

237
00:11:19,459 --> 00:11:25,880
with a a and a B register as shown here

238
00:11:23,120 --> 00:11:28,430
there's not<font color="#CCCCCC"> really like a meaning to the</font>

239
00:11:25,880 --> 00:11:29,990
<font color="#E5E5E5">binary values it's just like if you</font>

240
00:11:28,430 --> 00:11:33,079
combine these<font color="#E5E5E5"> slight numbers in this</font>

241
00:11:29,990 --> 00:11:36,589
it will end up becoming<font color="#E5E5E5"> an increment a</font>

242
00:11:33,080 --> 00:11:38,740
or an increment B<font color="#E5E5E5"> and basically to</font><font color="#CCCCCC"> use</font>

243
00:11:36,589 --> 00:11:40,880
it we<font color="#CCCCCC"> can basically just run a</font>

244
00:11:38,740 --> 00:11:50,270
increments and<font color="#CCCCCC"> it will emits</font><font color="#E5E5E5"> an</font>

245
00:11:40,880 --> 00:11:52,339
increment a like code to the ROM<font color="#CCCCCC"> so of</font>

246
00:11:50,270 --> 00:11:56,060
course like<font color="#E5E5E5"> we can continue doing this</font>

247
00:11:52,339 --> 00:11:58,339
<font color="#E5E5E5">and at some points</font><font color="#CCCCCC"> will find like more</font>

248
00:11:56,060 --> 00:12:02,089
let's say<font color="#E5E5E5"> like patterns in between the</font>

249
00:11:58,339 --> 00:12:04,310
the<font color="#CCCCCC"> opcode and we can start</font><font color="#E5E5E5"> to create</font><font color="#CCCCCC"> a</font>

250
00:12:02,089 --> 00:12:07,520
sort of a DSL<font color="#E5E5E5"> or like a pattern matching</font>

251
00:12:04,310 --> 00:12:10,189
<font color="#E5E5E5">like system</font><font color="#CCCCCC"> on till the</font><font color="#E5E5E5"> fourth so we</font>

252
00:12:07,520 --> 00:12:11,839
define here the what<font color="#E5E5E5"> arrow</font><font color="#CCCCCC"> works and the</font>

253
00:12:10,190 --> 00:12:13,700
double colon works

254
00:12:11,839 --> 00:12:17,200
and what it allows<font color="#E5E5E5"> us to do is like</font>

255
00:12:13,700 --> 00:12:20,120
<font color="#E5E5E5">basically write a complete assembler</font><font color="#CCCCCC"> and</font>

256
00:12:17,200 --> 00:12:22,160
if you would look at the documentation

257
00:12:20,120 --> 00:12:24,850
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> cpu</font><font color="#E5E5E5"> you would find pretty</font><font color="#CCCCCC"> much</font>

258
00:12:22,160 --> 00:12:27,829
the same<font color="#E5E5E5"> table that</font><font color="#CCCCCC"> you see in code here</font>

259
00:12:24,850 --> 00:12:28,940
<font color="#E5E5E5">described in the manual as well so we</font>

260
00:12:27,830 --> 00:12:31,399
<font color="#E5E5E5">have on the</font><font color="#CCCCCC"> lot so we have like an</font>

261
00:12:28,940 --> 00:12:33,649
increment instruction<font color="#E5E5E5"> and for a normal</font>

262
00:12:31,399 --> 00:12:37,150
register<font color="#E5E5E5"> we have a certain like</font><font color="#CCCCCC"> op</font><font color="#E5E5E5"> codes</font>

263
00:12:33,649 --> 00:12:39,010
<font color="#E5E5E5">for the specific HL register an</font><font color="#CCCCCC"> op codes</font>

264
00:12:37,150 --> 00:12:43,069
etc

265
00:12:39,010 --> 00:12:45,439
<font color="#CCCCCC">hmm I think that's everything we</font><font color="#E5E5E5"> can say</font>

266
00:12:43,070 --> 00:12:47,750
<font color="#CCCCCC">do some nice additions here that we also</font>

267
00:12:45,440 --> 00:12:50,029
like keep track of the cycles<font color="#E5E5E5"> I don't</font>

268
00:12:47,750 --> 00:12:52,400
<font color="#E5E5E5">think we use them but like you can</font>

269
00:12:50,029 --> 00:12:53,779
extend<font color="#E5E5E5"> that as much as</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> want and kind</font>

270
00:12:52,400 --> 00:12:59,720
of<font color="#E5E5E5"> like create your own language</font>

271
00:12:53,779 --> 00:13:01,250
structure so at this point it's<font color="#CCCCCC"> really</font>

272
00:12:59,720 --> 00:13:03,020
just a matter<font color="#CCCCCC"> of kind of</font><font color="#E5E5E5"> a boring</font>

273
00:13:01,250 --> 00:13:05,810
<font color="#CCCCCC">process of like looking</font><font color="#E5E5E5"> up the</font><font color="#CCCCCC"> OP code</font>

274
00:13:03,020 --> 00:13:08,420
<font color="#E5E5E5">and translating it</font><font color="#CCCCCC"> to the correct</font>

275
00:13:05,810 --> 00:13:10,640
<font color="#E5E5E5">assembly instruction and eventually we</font>

276
00:13:08,420 --> 00:13:13,099
end up with<font color="#E5E5E5"> a like program that looks</font>

277
00:13:10,640 --> 00:13:15,290
<font color="#E5E5E5">like this</font><font color="#CCCCCC"> again this is</font><font color="#E5E5E5"> the same program</font>

278
00:13:13,100 --> 00:13:18,709
<font color="#E5E5E5">as the hexadecimal like code that I</font>

279
00:13:15,290 --> 00:13:22,490
<font color="#CCCCCC">showed before at least like</font><font color="#E5E5E5"> it like a</font>

280
00:13:18,709 --> 00:13:24,560
part of it<font color="#CCCCCC"> so</font><font color="#E5E5E5"> it's like</font><font color="#CCCCCC"> a pool assembler</font>

281
00:13:22,490 --> 00:13:27,110
<font color="#E5E5E5">written and forth with like a postfix</font>

282
00:13:24,560 --> 00:13:28,369
notation<font color="#CCCCCC"> and you can use this pretty</font>

283
00:13:27,110 --> 00:13:30,680
much<font color="#CCCCCC"> to like great game ball games</font>

284
00:13:28,370 --> 00:13:31,700
<font color="#E5E5E5">already</font><font color="#CCCCCC"> I think like a lot of</font><font color="#E5E5E5"> game ball</font>

285
00:13:30,680 --> 00:13:36,529
games were<font color="#CCCCCC"> actually created like</font>

286
00:13:31,700 --> 00:13:38,390
directly<font color="#E5E5E5"> in assembly so yeah with the</font>

287
00:13:36,529 --> 00:13:40,970
nice advantage that's it's still<font color="#CCCCCC"> running</font>

288
00:13:38,390 --> 00:13:42,879
<font color="#CCCCCC">and forth so you could get like word</font>

289
00:13:40,970 --> 00:13:45,100
definitions for free

290
00:13:42,879 --> 00:13:47,079
whenever you see a<font color="#E5E5E5"> sequence of assembly</font>

291
00:13:45,100 --> 00:13:49,059
instructions you can abstract<font color="#E5E5E5"> them into</font>

292
00:13:47,079 --> 00:13:52,238
a new definition<font color="#E5E5E5"> that</font><font color="#CCCCCC"> has a little bit</font>

293
00:13:49,059 --> 00:13:54,509
<font color="#CCCCCC">more</font><font color="#E5E5E5"> meaning to you</font><font color="#CCCCCC"> and we can continue</font>

294
00:13:52,239 --> 00:13:57,819
<font color="#E5E5E5">that's with we can continue that</font><font color="#CCCCCC"> with</font>

295
00:13:54,509 --> 00:14:00,339
more until we<font color="#CCCCCC"> have like almost like</font>

296
00:13:57,819 --> 00:14:04,169
barely any assembler visible<font color="#CCCCCC"> anymore</font><font color="#E5E5E5"> and</font>

297
00:14:00,339 --> 00:14:07,059
I like a bit more descriptive<font color="#E5E5E5"> program so</font>

298
00:14:04,169 --> 00:14:08,379
at this point<font color="#E5E5E5"> we still</font><font color="#CCCCCC"> have we're still</font>

299
00:14:07,059 --> 00:14:10,868
<font color="#E5E5E5">checking that we're producing</font><font color="#CCCCCC"> exactly</font>

300
00:14:08,379 --> 00:14:13,059
the same file<font color="#E5E5E5"> so we're quite sure</font><font color="#CCCCCC"> that</font>

301
00:14:10,869 --> 00:14:15,039
everything is correct<font color="#CCCCCC"> of</font><font color="#E5E5E5"> course like we</font>

302
00:14:13,059 --> 00:14:17,350
could have some typos in<font color="#E5E5E5"> instructions</font>

303
00:14:15,039 --> 00:14:20,679
that<font color="#E5E5E5"> are not used but</font><font color="#CCCCCC"> that will that has</font>

304
00:14:17,350 --> 00:14:23,019
been fixed later so now we actually<font color="#E5E5E5"> have</font>

305
00:14:20,679 --> 00:14:25,059
<font color="#E5E5E5">a program that we can edit without</font>

306
00:14:23,019 --> 00:14:27,339
<font color="#E5E5E5">having to understand what offset we have</font>

307
00:14:25,059 --> 00:14:29,649
to change<font color="#E5E5E5"> what what bytes and we can</font>

308
00:14:27,339 --> 00:14:36,039
produce like a new<font color="#E5E5E5"> version of our hello</font>

309
00:14:29,649 --> 00:14:37,809
world<font color="#CCCCCC"> ROM we lock arbitrary text mmm of</font>

310
00:14:36,039 --> 00:14:40,359
course like there's no story ends

311
00:14:37,809 --> 00:14:42,999
<font color="#E5E5E5">because this is just an assembler in the</font>

312
00:14:40,359 --> 00:14:46,239
ends we want to take it a bit<font color="#CCCCCC"> further</font>

313
00:14:42,999 --> 00:14:50,769
and<font color="#E5E5E5"> implement</font><font color="#CCCCCC"> forth completely for the</font>

314
00:14:46,239 --> 00:14:52,600
<font color="#E5E5E5">Gameboy so ideally</font><font color="#CCCCCC"> you wouldn't want to</font>

315
00:14:50,769 --> 00:14:57,249
have to<font color="#E5E5E5"> like work with assembler at all</font>

316
00:14:52,600 --> 00:15:00,639
<font color="#E5E5E5">you know in a projects</font><font color="#CCCCCC"> so it's like two</font>

317
00:14:57,249 --> 00:15:04,119
ways of doing this<font color="#E5E5E5"> one the kind of the</font>

318
00:15:00,639 --> 00:15:06,939
<font color="#E5E5E5">most like logical way maybe would be to</font>

319
00:15:04,119 --> 00:15:09,729
keep extracting<font color="#E5E5E5"> like patterns in your</font>

320
00:15:06,939 --> 00:15:11,819
assembly<font color="#E5E5E5"> code into macros and kind of</font>

321
00:15:09,729 --> 00:15:14,289
<font color="#E5E5E5">like build some libraries on top of that</font>

322
00:15:11,819 --> 00:15:17,439
<font color="#E5E5E5">to do various things even like playing</font>

323
00:15:14,289 --> 00:15:18,939
sounds you could just do with macros<font color="#E5E5E5"> it</font>

324
00:15:17,439 --> 00:15:22,868
can kind of like program your whole game

325
00:15:18,939 --> 00:15:25,389
or program in like a macro<font color="#E5E5E5"> language</font>

326
00:15:22,869 --> 00:15:27,309
basically on<font color="#CCCCCC"> top of your assembly of</font>

327
00:15:25,389 --> 00:15:30,089
course like we didn't do that<font color="#CCCCCC"> we went</font>

328
00:15:27,309 --> 00:15:32,618
for the hard way we're<font color="#E5E5E5"> just to actually</font>

329
00:15:30,089 --> 00:15:35,529
parse like every<font color="#CCCCCC"> definition that we do</font>

330
00:15:32,619 --> 00:15:37,179
that<font color="#E5E5E5"> you create ourselves and kind of</font>

331
00:15:35,529 --> 00:15:40,049
store all of<font color="#E5E5E5"> the code that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to</font>

332
00:15:37,179 --> 00:15:42,100
write in a intermediate<font color="#E5E5E5"> representation</font>

333
00:15:40,049 --> 00:15:43,809
<font color="#CCCCCC">this is a bit more complex because</font>

334
00:15:42,100 --> 00:15:46,509
<font color="#E5E5E5">you're not directly emitting assembly</font>

335
00:15:43,809 --> 00:15:48,519
anymore<font color="#E5E5E5"> but it allows you to do things</font>

336
00:15:46,509 --> 00:15:50,709
like<font color="#CCCCCC"> lazy</font><font color="#E5E5E5"> emitting so you can create</font>

337
00:15:48,519 --> 00:15:52,899
like a million definitions<font color="#E5E5E5"> and if you</font>

338
00:15:50,709 --> 00:15:55,388
don't use<font color="#E5E5E5"> them in your like main codes</font>

339
00:15:52,899 --> 00:15:57,080
<font color="#CCCCCC">we want to meet them to the ROM which is</font>

340
00:15:55,389 --> 00:15:59,600
quite<font color="#E5E5E5"> useful but the</font>

341
00:15:57,080 --> 00:16:03,100
with the 32 kilobytes that you usually

342
00:15:59,600 --> 00:16:06,080
<font color="#E5E5E5">have a lot</font><font color="#CCCCCC"> of things are optimizations</font>

343
00:16:03,100 --> 00:16:09,350
<font color="#CCCCCC">we have worked on tail call optimization</font>

344
00:16:06,080 --> 00:16:12,500
<font color="#E5E5E5">in this</font><font color="#CCCCCC"> there's like a lot of a lot of</font>

345
00:16:09,350 --> 00:16:18,970
<font color="#E5E5E5">things we can do using like intermediate</font>

346
00:16:12,500 --> 00:16:22,040
representation<font color="#E5E5E5"> hmm so we basically like</font>

347
00:16:18,970 --> 00:16:24,770
started working on this<font color="#CCCCCC"> the</font><font color="#E5E5E5"> idea is that</font>

348
00:16:22,040 --> 00:16:26,630
at<font color="#CCCCCC"> some point we redefine the column</font>

349
00:16:24,770 --> 00:16:29,120
word that usually uh creates a new

350
00:16:26,630 --> 00:16:32,750
definition into something that collects

351
00:16:29,120 --> 00:16:35,450
<font color="#E5E5E5">the definitions that</font><font color="#CCCCCC"> you wrote</font><font color="#E5E5E5"> for later</font>

352
00:16:32,750 --> 00:16:38,180
compilation to the<font color="#CCCCCC"> game boy</font><font color="#E5E5E5"> and slowly</font>

353
00:16:35,450 --> 00:16:40,670
we added<font color="#E5E5E5"> code primitives</font><font color="#CCCCCC"> and assembler</font>

354
00:16:38,180 --> 00:16:45,380
<font color="#E5E5E5">so basically defining what a swap</font><font color="#CCCCCC"> - what</font>

355
00:16:40,670 --> 00:16:48,110
<font color="#CCCCCC">does + do</font><font color="#E5E5E5"> and so forth</font>

356
00:16:45,380 --> 00:16:49,910
so eventually<font color="#E5E5E5"> like we have all the</font>

357
00:16:48,110 --> 00:16:52,580
primitives do<font color="#E5E5E5"> we have something working</font>

358
00:16:49,910 --> 00:16:54,949
we can add on top<font color="#E5E5E5"> of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> higher level</font>

359
00:16:52,580 --> 00:16:58,310
<font color="#E5E5E5">definitions so basically using existing</font>

360
00:16:54,950 --> 00:17:02,030
<font color="#CCCCCC">fourth primitives to</font><font color="#E5E5E5"> create new fourth</font>

361
00:16:58,310 --> 00:17:03,949
<font color="#E5E5E5">primitives almost and slowly but surely</font>

362
00:17:02,030 --> 00:17:06,680
we<font color="#CCCCCC"> are translating their entire ROM</font><font color="#E5E5E5"> to</font>

363
00:17:03,950 --> 00:17:09,079
<font color="#E5E5E5">fourth and not using</font><font color="#CCCCCC"> like assembler at</font>

364
00:17:06,680 --> 00:17:14,660
all anymore<font color="#CCCCCC"> unless</font><font color="#E5E5E5"> you may want to</font>

365
00:17:09,079 --> 00:17:17,990
<font color="#CCCCCC">optimize something</font><font color="#E5E5E5"> later so this is more</font>

366
00:17:14,660 --> 00:17:20,000
<font color="#E5E5E5">or</font><font color="#CCCCCC"> less like what the I think the same</font>

367
00:17:17,990 --> 00:17:22,339
yeah the same program looks<font color="#CCCCCC"> like it's</font>

368
00:17:20,000 --> 00:17:25,040
not binary<font color="#E5E5E5"> like binary the same anymore</font>

369
00:17:22,339 --> 00:17:27,889
<font color="#CCCCCC">but it will produce the same hello</font>

370
00:17:25,040 --> 00:17:30,590
worlds or hello<font color="#CCCCCC"> for</font><font color="#E5E5E5"> them output you can</font>

371
00:17:27,890 --> 00:17:32,360
<font color="#E5E5E5">see like there's no assembler being used</font>

372
00:17:30,590 --> 00:17:35,720
anymore<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> somewhat quite high</font>

373
00:17:32,360 --> 00:17:38,479
level<font color="#CCCCCC"> words</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> finds you can see in the</font>

374
00:17:35,720 --> 00:17:42,350
top some constants for like addresses

375
00:17:38,480 --> 00:17:45,380
that<font color="#E5E5E5"> there are like common to use words</font>

376
00:17:42,350 --> 00:17:47,389
like<font color="#CCCCCC"> see movie do</font><font color="#E5E5E5"> that just like move a</font>

377
00:17:45,380 --> 00:17:50,030
block<font color="#CCCCCC"> off of</font><font color="#E5E5E5"> memory into your video</font>

378
00:17:47,390 --> 00:17:51,950
<font color="#E5E5E5">memory kind of like</font><font color="#CCCCCC"> according to</font><font color="#E5E5E5"> the</font>

379
00:17:50,030 --> 00:17:57,470
standard<font color="#CCCCCC"> fourth implementation if you're</font>

380
00:17:51,950 --> 00:17:59,900
familiar with it yeah so there<font color="#E5E5E5"> are a</font>

381
00:17:57,470 --> 00:18:02,240
couple<font color="#E5E5E5"> of limitations in our approach</font>

382
00:17:59,900 --> 00:18:04,940
<font color="#CCCCCC">well I guess another</font><font color="#E5E5E5"> approach but stuff</font>

383
00:18:02,240 --> 00:18:08,420
that we<font color="#E5E5E5"> just didn't do if you're used to</font>

384
00:18:04,940 --> 00:18:09,990
<font color="#CCCCCC">forth</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> luck</font><font color="#E5E5E5"> you might know that you're</font>

385
00:18:08,420 --> 00:18:12,630
able<font color="#E5E5E5"> to redefine words</font>

386
00:18:09,990 --> 00:18:15,059
at runtime that's<font color="#E5E5E5"> impossible in our</font>

387
00:18:12,630 --> 00:18:17,850
system<font color="#E5E5E5"> mainly because there's no</font><font color="#CCCCCC"> kyboot</font>

388
00:18:15,059 --> 00:18:21,990
key keyboard<font color="#E5E5E5"> inputs so we didn't really</font>

389
00:18:17,850 --> 00:18:25,709
<font color="#E5E5E5">know how to</font><font color="#CCCCCC"> lock handle</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> plus like</font>

390
00:18:21,990 --> 00:18:27,809
words<font color="#E5E5E5"> and ups towards s like in</font><font color="#CCCCCC"> fourth</font>

391
00:18:25,710 --> 00:18:28,170
it's like a string in there<font color="#E5E5E5"> in the game</font>

392
00:18:27,809 --> 00:18:30,450
<font color="#E5E5E5">boy</font>

393
00:18:28,170 --> 00:18:33,480
we<font color="#E5E5E5"> eventually just</font><font color="#CCCCCC"> compile them to like</font>

394
00:18:30,450 --> 00:18:35,850
memory addresses<font color="#CCCCCC"> so it's</font><font color="#E5E5E5"> quite</font><font color="#CCCCCC"> a I guess</font>

395
00:18:33,480 --> 00:18:38,850
<font color="#CCCCCC">a quite</font><font color="#E5E5E5"> static like system once it's</font>

396
00:18:35,850 --> 00:18:40,409
compiled<font color="#CCCCCC"> apart from</font><font color="#E5E5E5"> that we</font><font color="#CCCCCC"> ran into</font>

397
00:18:38,850 --> 00:18:42,870
<font color="#E5E5E5">some issues with the division between</font>

398
00:18:40,410 --> 00:18:45,690
the<font color="#CCCCCC"> read-only memory and their venom</font>

399
00:18:42,870 --> 00:18:49,409
<font color="#CCCCCC">axis memory on a</font><font color="#E5E5E5"> computer this</font><font color="#CCCCCC"> is like</font>

400
00:18:45,690 --> 00:18:50,700
pretty<font color="#CCCCCC"> much like all RAM</font><font color="#E5E5E5"> of course on</font>

401
00:18:49,410 --> 00:18:52,620
the<font color="#CCCCCC"> game ball you</font><font color="#E5E5E5"> have to take into</font>

402
00:18:50,700 --> 00:18:54,710
account<font color="#E5E5E5"> that data needs</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be written to</font>

403
00:18:52,620 --> 00:18:58,379
<font color="#CCCCCC">the cartridge which is read-only</font><font color="#E5E5E5"> and</font>

404
00:18:54,710 --> 00:19:00,179
once you<font color="#E5E5E5"> want to modify variables</font><font color="#CCCCCC"> you'll</font>

405
00:18:58,380 --> 00:19:01,950
need to<font color="#E5E5E5"> explicitly copy them</font><font color="#CCCCCC"> over to the</font>

406
00:19:00,179 --> 00:19:05,250
<font color="#CCCCCC">other part of the</font><font color="#E5E5E5"> memory</font><font color="#CCCCCC"> which is</font><font color="#E5E5E5"> also</font>

407
00:19:01,950 --> 00:19:07,380
<font color="#E5E5E5">quite limited and</font><font color="#CCCCCC"> like part</font><font color="#E5E5E5"> of it is</font>

408
00:19:05,250 --> 00:19:14,970
used<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the stack</font><font color="#E5E5E5"> that we use and forth</font>

409
00:19:07,380 --> 00:19:16,800
as<font color="#E5E5E5"> well</font><font color="#CCCCCC"> okay so we implemented</font><font color="#E5E5E5"> a basic</font>

410
00:19:14,970 --> 00:19:20,160
<font color="#CCCCCC">fourth system that should</font><font color="#E5E5E5"> be able to</font>

411
00:19:16,800 --> 00:19:23,909
compile a fourth program<font color="#E5E5E5"> into a gameboy</font>

412
00:19:20,160 --> 00:19:25,559
<font color="#CCCCCC">ROM of course like until this point</font><font color="#E5E5E5"> I</font>

413
00:19:23,910 --> 00:19:28,800
<font color="#CCCCCC">think we only</font><font color="#E5E5E5"> try</font><font color="#CCCCCC"> to do write like hello</font>

414
00:19:25,559 --> 00:19:30,750
world examples<font color="#E5E5E5"> nothing too fancy</font><font color="#CCCCCC"> maybe</font>

415
00:19:28,800 --> 00:19:34,379
<font color="#E5E5E5">we did some like moving</font><font color="#CCCCCC"> a round of stuff</font>

416
00:19:30,750 --> 00:19:36,360
but the basics were like like I mean<font color="#CCCCCC"> I</font>

417
00:19:34,380 --> 00:19:40,230
think we did was quite<font color="#E5E5E5"> basic so we</font>

418
00:19:36,360 --> 00:19:44,428
decided to<font color="#E5E5E5"> find a third part the fourth</font>

419
00:19:40,230 --> 00:19:47,820
<font color="#E5E5E5">program and this</font><font color="#CCCCCC"> is soccer bum it's</font>

420
00:19:44,429 --> 00:19:52,230
quite old<font color="#E5E5E5"> it's included in the G</font><font color="#CCCCCC"> fourth</font>

421
00:19:47,820 --> 00:19:54,870
implementation and it's well<font color="#CCCCCC"> soccer</font><font color="#E5E5E5"> bomb</font>

422
00:19:52,230 --> 00:19:58,050
<font color="#CCCCCC">if you're familiar with</font><font color="#E5E5E5"> it quite simple</font>

423
00:19:54,870 --> 00:20:01,260
game so the goal with<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> like to</font>

424
00:19:58,050 --> 00:20:03,780
try and compile this into<font color="#E5E5E5"> a game board</font>

425
00:20:01,260 --> 00:20:06,059
<font color="#E5E5E5">ROM this isn't work because like we had</font>

426
00:20:03,780 --> 00:20:07,649
a lot of like premises missing still but

427
00:20:06,059 --> 00:20:10,889
today was to add primitives or

428
00:20:07,650 --> 00:20:12,510
functionality to the compiler<font color="#E5E5E5"> and</font><font color="#CCCCCC"> sale</font>

429
00:20:10,890 --> 00:20:16,350
basically<font color="#CCCCCC"> this</font><font color="#E5E5E5"> program would</font><font color="#CCCCCC"> like</font>

430
00:20:12,510 --> 00:20:17,610
<font color="#CCCCCC">compile into an actual game I think we</font>

431
00:20:16,350 --> 00:20:20,610
barely had to like change<font color="#E5E5E5"> anything</font>

432
00:20:17,610 --> 00:20:23,040
<font color="#E5E5E5">except for the fact that variables</font>

433
00:20:20,610 --> 00:20:23,610
<font color="#E5E5E5">cannot be initialized because again</font><font color="#CCCCCC"> like</font>

434
00:20:23,040 --> 00:20:25,230
they have to be<font color="#E5E5E5"> rich</font>

435
00:20:23,610 --> 00:20:27,270
to the<font color="#CCCCCC"> ROM and you want them</font><font color="#E5E5E5"> to be in</font>

436
00:20:25,230 --> 00:20:30,030
the RAM<font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of like some initialization</font>

437
00:20:27,270 --> 00:20:36,110
codes that needed to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> added but apart</font>

438
00:20:30,030 --> 00:20:36,110
from that<font color="#E5E5E5"> we managed to get it</font><font color="#CCCCCC"> working I</font>

439
00:20:38,990 --> 00:20:44,580
think I think like it's also like

440
00:20:41,730 --> 00:20:46,140
interesting to mention<font color="#CCCCCC"> that the original</font>

441
00:20:44,580 --> 00:20:48,600
<font color="#CCCCCC">fourth implementation is written for</font>

442
00:20:46,140 --> 00:20:51,840
<font color="#E5E5E5">terminal so rather than rewriting</font><font color="#CCCCCC"> deaths</font>

443
00:20:48,600 --> 00:20:55,049
we created a terminal emulation layer on

444
00:20:51,840 --> 00:20:56,790
top<font color="#CCCCCC"> of everything so for I</font><font color="#E5E5E5"> think like</font>

445
00:20:55,049 --> 00:20:58,559
<font color="#E5E5E5">for definitely for simple like tile</font>

446
00:20:56,790 --> 00:21:01,710
<font color="#E5E5E5">based games that you could watch with</font>

447
00:20:58,559 --> 00:21:03,750
<font color="#CCCCCC">Markowski arts almost it's like</font><font color="#E5E5E5"> almost</font>

448
00:21:01,710 --> 00:21:07,320
<font color="#E5E5E5">like trivial now</font><font color="#CCCCCC"> two ports terminal</font>

449
00:21:03,750 --> 00:21:09,059
<font color="#CCCCCC">fourth games to Gameboy I will</font><font color="#E5E5E5"> admit</font>

450
00:21:07,320 --> 00:21:11,580
that<font color="#E5E5E5"> we had to scrap like half the</font>

451
00:21:09,059 --> 00:21:18,870
levels<font color="#E5E5E5"> because they didn't fit</font><font color="#CCCCCC"> on the</font>

452
00:21:11,580 --> 00:21:21,120
cartridge so yeah<font color="#CCCCCC"> so in the</font><font color="#E5E5E5"> end like we</font>

453
00:21:18,870 --> 00:21:24,809
<font color="#CCCCCC">ended up with a</font><font color="#E5E5E5"> pretty complete</font><font color="#CCCCCC"> sport</font>

454
00:21:21,120 --> 00:21:27,059
<font color="#E5E5E5">implementation</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> we have some like</font>

455
00:21:24,809 --> 00:21:30,600
tickets still open to make it like fully

456
00:21:27,059 --> 00:21:33,660
compliant to<font color="#E5E5E5"> the end standards</font><font color="#CCCCCC"> but</font>

457
00:21:30,600 --> 00:21:36,120
everything<font color="#E5E5E5"> that's like missing now is</font>

458
00:21:33,660 --> 00:21:40,140
there's a lot of<font color="#CCCCCC"> like bugs in</font><font color="#E5E5E5"> the</font>

459
00:21:36,120 --> 00:21:42,059
assembler<font color="#E5E5E5"> of the original Gameboy</font><font color="#CCCCCC"> if</font>

460
00:21:40,140 --> 00:21:44,850
you've done anything like game bar

461
00:21:42,059 --> 00:21:47,520
programming<font color="#CCCCCC"> heard of the increments buck</font>

462
00:21:44,850 --> 00:21:50,459
or increments by sprite<font color="#E5E5E5"> buck we're</font>

463
00:21:47,520 --> 00:21:52,590
incrementing<font color="#E5E5E5"> a register in a certain</font>

464
00:21:50,460 --> 00:21:55,049
range will result in<font color="#E5E5E5"> the sprites being</font>

465
00:21:52,590 --> 00:21:58,290
<font color="#E5E5E5">completely messed up</font><font color="#CCCCCC"> I think like not</font>

466
00:21:55,049 --> 00:22:00,990
even restorable<font color="#E5E5E5"> so these are the things</font>

467
00:21:58,290 --> 00:22:03,750
that<font color="#E5E5E5"> the compiler could kind of</font><font color="#CCCCCC"> like</font>

468
00:22:00,990 --> 00:22:06,179
automatically remove and refactor into

469
00:22:03,750 --> 00:22:09,330
something<font color="#CCCCCC"> that will work there's all</font>

470
00:22:06,179 --> 00:22:11,520
Fleck room for optimizations<font color="#CCCCCC"> I mentioned</font>

471
00:22:09,330 --> 00:22:13,290
like tail recursion<font color="#E5E5E5"> we ended up</font><font color="#CCCCCC"> not</font>

472
00:22:11,520 --> 00:22:14,730
<font color="#E5E5E5">being able to include</font><font color="#CCCCCC"> it's because I</font>

473
00:22:13,290 --> 00:22:16,168
know I think<font color="#E5E5E5"> there were some like edge</font>

474
00:22:14,730 --> 00:22:19,260
conditions that we didn't<font color="#E5E5E5"> think about</font>

475
00:22:16,169 --> 00:22:21,390
yet<font color="#E5E5E5"> but</font><font color="#CCCCCC"> there's other stuff we can do in</font>

476
00:22:19,260 --> 00:22:22,860
<font color="#E5E5E5">lining of primitives locked are certain</font>

477
00:22:21,390 --> 00:22:25,470
words<font color="#E5E5E5"> that are all accused all the time</font>

478
00:22:22,860 --> 00:22:27,809
and right<font color="#E5E5E5"> now like they're just calls to</font>

479
00:22:25,470 --> 00:22:30,150
another<font color="#E5E5E5"> address</font><font color="#CCCCCC"> which is like reasonably</font>

480
00:22:27,809 --> 00:22:31,830
expensive<font color="#CCCCCC"> if they can be in light of</font>

481
00:22:30,150 --> 00:22:34,130
course<font color="#CCCCCC"> it will</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> a lot faster</font>

482
00:22:31,830 --> 00:22:36,049
especially<font color="#CCCCCC"> for</font>

483
00:22:34,130 --> 00:22:39,559
like<font color="#E5E5E5"> Cove that's</font><font color="#CCCCCC"> like running in the V</font>

484
00:22:36,049 --> 00:22:41,000
<font color="#CCCCCC">blank sections there's some</font><font color="#E5E5E5"> people</font>

485
00:22:39,559 --> 00:22:44,600
optimizations<font color="#CCCCCC"> like with all these</font>

486
00:22:41,000 --> 00:22:46,250
abstractions you will get pairs of like

487
00:22:44,600 --> 00:22:48,889
assembly instructions that are basically

488
00:22:46,250 --> 00:22:51,490
<font color="#CCCCCC">know of</font><font color="#E5E5E5"> when they run together</font><font color="#CCCCCC"> those can</font>

489
00:22:48,890 --> 00:22:53,720
be<font color="#E5E5E5"> removed to save some space and time</font>

490
00:22:51,490 --> 00:22:56,419
<font color="#CCCCCC">we don't have luck game of color</font>

491
00:22:53,720 --> 00:22:59,299
supports<font color="#E5E5E5"> game bro color is like why it's</font>

492
00:22:56,419 --> 00:23:02,720
similar to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> original Gameboy the main</font>

493
00:22:59,299 --> 00:23:05,240
difference is color<font color="#E5E5E5"> so there's like some</font>

494
00:23:02,720 --> 00:23:08,210
extra register stats<font color="#E5E5E5"> handle the</font><font color="#CCCCCC"> PAL of</font>

495
00:23:05,240 --> 00:23:09,890
data for the color<font color="#E5E5E5"> and those things are</font>

496
00:23:08,210 --> 00:23:11,809
<font color="#E5E5E5">I mean they're accessible</font><font color="#CCCCCC"> through</font>

497
00:23:09,890 --> 00:23:15,260
assembly but of course it's not<font color="#E5E5E5"> the</font><font color="#CCCCCC"> goal</font>

498
00:23:11,809 --> 00:23:17,658
of<font color="#E5E5E5"> this project</font><font color="#CCCCCC"> then there's like memory</font>

499
00:23:15,260 --> 00:23:19,940
bank controllers<font color="#E5E5E5"> like the VIP mentioned</font>

500
00:23:17,659 --> 00:23:22,760
already that like the<font color="#CCCCCC"> cartridge often</font>

501
00:23:19,940 --> 00:23:26,120
contains a lot<font color="#E5E5E5"> of hardware that hardware</font>

502
00:23:22,760 --> 00:23:28,220
<font color="#CCCCCC">is like managed by</font><font color="#E5E5E5"> a chip in the in the</font>

503
00:23:26,120 --> 00:23:30,799
<font color="#E5E5E5">cartridge and you</font><font color="#CCCCCC"> can kind of like write</font>

504
00:23:28,220 --> 00:23:33,980
to the wrong addresses<font color="#E5E5E5"> to access certain</font>

505
00:23:30,799 --> 00:23:36,650
properties<font color="#E5E5E5"> there's like Rumble Rumble</font>

506
00:23:33,980 --> 00:23:39,650
cartridges that<font color="#E5E5E5"> like vibrate the device</font>

507
00:23:36,650 --> 00:23:42,080
just<font color="#CCCCCC"> like the</font><font color="#E5E5E5"> the camera is a kind of a</font>

508
00:23:39,650 --> 00:23:46,010
<font color="#E5E5E5">cart which so those can be like still</font>

509
00:23:42,080 --> 00:23:48,399
implemented in libraries<font color="#E5E5E5"> with like</font>

510
00:23:46,010 --> 00:23:51,080
features like ROM Bank switching

511
00:23:48,400 --> 00:23:53,059
basically you cannot<font color="#E5E5E5"> access the entire</font>

512
00:23:51,080 --> 00:23:55,570
<font color="#CCCCCC">roam at the same time in</font><font color="#E5E5E5"> certain</font>

513
00:23:53,059 --> 00:23:58,879
cartridges<font color="#E5E5E5"> so you have to</font><font color="#CCCCCC"> like Bank them</font>

514
00:23:55,570 --> 00:24:00,799
more debugging tools and actually like

515
00:23:58,880 --> 00:24:02,270
we still<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> write a tutorial of</font>

516
00:24:00,799 --> 00:24:06,470
like how to write a fourth game<font color="#E5E5E5"> from</font>

517
00:24:02,270 --> 00:24:11,229
<font color="#CCCCCC">scratch</font><font color="#E5E5E5"> and contributions are welcome</font><font color="#CCCCCC"> if</font>

518
00:24:06,470 --> 00:24:15,159
you<font color="#CCCCCC"> want to take a look I think</font>

519
00:24:11,229 --> 00:24:15,159
so thank<font color="#E5E5E5"> you for your time</font>

520
00:24:21,100 --> 00:24:28,550
so the project is<font color="#CCCCCC"> hepps am some hacker</font>

521
00:24:24,440 --> 00:24:31,880
<font color="#E5E5E5">/gv fort on github</font><font color="#CCCCCC"> we can also recommend</font>

522
00:24:28,550 --> 00:24:33,740
these two talks one called the ultimate

523
00:24:31,880 --> 00:24:37,010
<font color="#E5E5E5">Gameboy talk if you want to know more</font>

524
00:24:33,740 --> 00:24:39,290
<font color="#E5E5E5">about well I guess game boards because</font>

525
00:24:37,010 --> 00:24:42,080
it covers<font color="#CCCCCC"> prevent everything</font><font color="#E5E5E5"> and the</font>

526
00:24:39,290 --> 00:24:43,790
great talk<font color="#E5E5E5"> about reverse</font><font color="#CCCCCC"> engineering the</font>

527
00:24:42,080 --> 00:24:47,120
hardware of<font color="#CCCCCC"> the Gameboy</font>

528
00:24:43,790 --> 00:24:49,250
we're actually chips are being<font color="#E5E5E5"> particles</font>

529
00:24:47,120 --> 00:24:51,739
<font color="#CCCCCC">and caps to check the internals</font><font color="#E5E5E5"> and</font>

530
00:24:49,250 --> 00:25:17,830
<font color="#CCCCCC">cough like I think the</font><font color="#E5E5E5"> the idea is to</font>

531
00:24:51,740 --> 00:25:20,750
create<font color="#E5E5E5"> also like a cycle cycle right</font>

532
00:25:17,830 --> 00:25:23,360
<font color="#CCCCCC">right so the question is like how we</font>

533
00:25:20,750 --> 00:25:25,580
<font color="#CCCCCC">manage to</font><font color="#E5E5E5"> like go from replacing</font><font color="#CCCCCC"> a</font>

534
00:25:23,360 --> 00:25:29,240
string basically<font color="#E5E5E5"> to replacing the</font><font color="#CCCCCC"> whole</font>

535
00:25:25,580 --> 00:25:31,100
file so like I think the main point<font color="#E5E5E5"> is</font>

536
00:25:29,240 --> 00:25:32,960
<font color="#E5E5E5">you mentioned</font><font color="#CCCCCC"> all select check</font><font color="#E5E5E5"> sums and</font>

537
00:25:31,100 --> 00:25:35,240
<font color="#E5E5E5">deets like I skipped over</font><font color="#CCCCCC"> that there's</font>

538
00:25:32,960 --> 00:25:43,850
some like<font color="#E5E5E5"> checksum calculations going on</font>

539
00:25:35,240 --> 00:25:47,120
those are documented how they work yes

540
00:25:43,850 --> 00:25:49,550
like checksums<font color="#CCCCCC"> for sure and the rest is</font>

541
00:25:47,120 --> 00:25:50,840
<font color="#E5E5E5">like just like decompiling to assembler</font>

542
00:25:49,550 --> 00:25:55,060
and<font color="#E5E5E5"> luck trying to abstract it higher</font>

543
00:25:50,840 --> 00:25:55,060
and<font color="#CCCCCC"> higher that will all</font><font color="#E5E5E5"> our Swiss</font>

544
00:26:03,980 --> 00:26:10,350
so that's part<font color="#CCCCCC"> of like the terminal</font>

545
00:26:06,539 --> 00:26:12,929
emulation<font color="#E5E5E5"> actually so we replace like</font>

546
00:26:10,350 --> 00:26:15,449
<font color="#CCCCCC">they they were to actually get one key</font>

547
00:26:12,929 --> 00:26:18,620
from<font color="#CCCCCC"> the input to just go</font><font color="#E5E5E5"> and look into</font>

548
00:26:15,450 --> 00:26:18,620
the<font color="#CCCCCC"> keeper driver</font>

549
00:26:29,639 --> 00:26:33,209
<font color="#CCCCCC">very already</font>

550
00:26:35,309 --> 00:26:40,540
so the question is how do<font color="#E5E5E5"> we map like</font>

551
00:26:38,020 --> 00:26:42,120
the registers in hardware<font color="#CCCCCC"> to like the</font>

552
00:26:40,540 --> 00:26:44,980
different pointers<font color="#CCCCCC"> at unity fourth</font>

553
00:26:42,120 --> 00:26:46,418
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> that's a convention</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> we've</font>

554
00:26:44,980 --> 00:26:47,919
reserved<font color="#CCCCCC"> Wang of</font><font color="#E5E5E5"> that register</font><font color="#CCCCCC"> for the</font>

555
00:26:46,419 --> 00:26:49,929
top of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> stack</font><font color="#CCCCCC"> that's a quite common</font>

556
00:26:47,919 --> 00:26:51,820
optimization<font color="#E5E5E5"> then we have one of the</font>

557
00:26:49,929 --> 00:26:54,820
<font color="#E5E5E5">registers point to the top of the stack</font>

558
00:26:51,820 --> 00:26:56,350
<font color="#CCCCCC">and then we have some scratch register</font>

559
00:26:54,820 --> 00:26:57,760
that<font color="#E5E5E5"> you can use on unchanged so the</font>

560
00:26:56,350 --> 00:27:00,730
compiler<font color="#E5E5E5"> will always stick to the</font>

561
00:26:57,760 --> 00:27:02,140
convention it's good also<font color="#E5E5E5"> because they</font>

562
00:27:00,730 --> 00:27:06,870
mix<font color="#E5E5E5"> that it means that you can actually</font>

563
00:27:02,140 --> 00:27:06,870
<font color="#E5E5E5">mix assembly and</font><font color="#CCCCCC"> fourth if you know them</font>

564
00:27:19,260 --> 00:27:26,890
I think<font color="#CCCCCC"> what we reach the conclusion</font>

565
00:27:24,669 --> 00:27:28,390
that<font color="#E5E5E5"> sorry let me repeat</font><font color="#CCCCCC"> so like like</font>

566
00:27:26,890 --> 00:27:31,900
what the value<font color="#CCCCCC"> is up like</font><font color="#E5E5E5"> complying</font>

567
00:27:28,390 --> 00:27:34,110
<font color="#E5E5E5">fully to these standards</font><font color="#CCCCCC"> I think like it</font>

568
00:27:31,900 --> 00:27:36,010
most of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> programs work well enough</font><font color="#E5E5E5"> I</font>

569
00:27:34,110 --> 00:27:38,678
kind of feel<font color="#CCCCCC"> that there's</font><font color="#E5E5E5"> not really</font>

570
00:27:36,010 --> 00:27:40,540
need to<font color="#CCCCCC"> be fully compliance</font><font color="#E5E5E5"> apart from</font>

571
00:27:38,679 --> 00:27:42,280
<font color="#E5E5E5">that there's a lot of instruct like a</font>

572
00:27:40,540 --> 00:27:45,100
lot of<font color="#E5E5E5"> words in the standard</font><font color="#CCCCCC"> fault</font><font color="#E5E5E5"> that</font>

573
00:27:42,280 --> 00:27:47,049
don't make sense on<font color="#CCCCCC"> a gameboy</font><font color="#E5E5E5"> like stuff</font>

574
00:27:45,100 --> 00:27:49,000
<font color="#CCCCCC">that deals with iOS obviously but also</font>

575
00:27:47,049 --> 00:27:51,910
<font color="#E5E5E5">like</font><font color="#CCCCCC"> floating-point</font><font color="#E5E5E5"> numbers we nuts like</font>

576
00:27:49,000 --> 00:27:54,970
<font color="#E5E5E5">emulating like decision making yes</font>

577
00:27:51,910 --> 00:27:57,190
double position<font color="#E5E5E5"> dislike so those were</font>

578
00:27:54,970 --> 00:28:00,580
<font color="#E5E5E5">sweet skips and other ones are quite</font>

579
00:27:57,190 --> 00:28:02,290
easy to<font color="#E5E5E5"> add yourself</font><font color="#CCCCCC"> so I think like as</font>

580
00:28:00,580 --> 00:28:04,840
long as<font color="#E5E5E5"> we support like the common cases</font>

581
00:28:02,290 --> 00:28:07,159
<font color="#E5E5E5">it's like if it's usable</font><font color="#CCCCCC"> I think it's</font>

582
00:28:04,840 --> 00:28:09,790
like sufficient

583
00:28:07,160 --> 00:28:09,790
yeah

584
00:28:14,690 --> 00:28:21,930
how are the questions<font color="#E5E5E5"> like how we tests</font>

585
00:28:17,760 --> 00:28:25,140
tests like<font color="#CCCCCC"> Rome's</font><font color="#E5E5E5"> there are indeed like</font>

586
00:28:21,930 --> 00:28:27,780
special cartridges<font color="#E5E5E5"> that that use like SD</font>

587
00:28:25,140 --> 00:28:29,760
cards<font color="#CCCCCC"> to low to roam so they fly get</font>

588
00:28:27,780 --> 00:28:32,550
little like<font color="#E5E5E5"> OS building as a file</font>

589
00:28:29,760 --> 00:28:36,690
manager<font color="#CCCCCC"> or you can use</font><font color="#E5E5E5"> like cartridge</font>

590
00:28:32,550 --> 00:28:40,399
flashers<font color="#CCCCCC"> you can buy them online for</font><font color="#E5E5E5"> for</font>

591
00:28:36,690 --> 00:28:40,400
more like<font color="#E5E5E5"> persistent like flashing</font>

592
00:28:44,610 --> 00:28:51,580
that was a good<font color="#E5E5E5"> good one so how long did</font>

593
00:28:47,170 --> 00:28:54,670
<font color="#CCCCCC">it take I think we managed to get</font><font color="#E5E5E5"> to the</font>

594
00:28:51,580 --> 00:28:58,330
assembly<font color="#CCCCCC"> point in two months and this</font>

595
00:28:54,670 --> 00:29:01,390
<font color="#E5E5E5">was like with like two nights a week</font>

596
00:28:58,330 --> 00:29:06,070
<font color="#CCCCCC">like after after like office hours like</font>

597
00:29:01,390 --> 00:29:09,010
working on it<font color="#CCCCCC"> and I think like</font><font color="#E5E5E5"> 80% of</font>

598
00:29:06,070 --> 00:29:10,840
<font color="#E5E5E5">the project in three three months like</font>

599
00:29:09,010 --> 00:29:16,120
small translations later but you have

600
00:29:10,840 --> 00:29:18,600
some<font color="#E5E5E5"> three three months I would say all</font>

601
00:29:16,120 --> 00:29:26,609
<font color="#E5E5E5">right thank you everyone</font>

602
00:29:18,600 --> 00:29:26,609
[Applause]

