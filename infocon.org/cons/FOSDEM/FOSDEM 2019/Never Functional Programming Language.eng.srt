1
00:00:05,299 --> 00:00:14,429
sorry for the delay<font color="#CCCCCC"> thank you for the</font>

2
00:00:10,170 --> 00:00:19,770
invitation<font color="#CCCCCC"> and it's my pleasure - can</font>

3
00:00:14,429 --> 00:00:22,349
you hear<font color="#E5E5E5"> me well on the mic so on on</font>

4
00:00:19,770 --> 00:00:25,410
<font color="#E5E5E5">behalf of myself and our small</font>

5
00:00:22,349 --> 00:00:29,130
<font color="#E5E5E5">organization called Neverland</font>

6
00:00:25,410 --> 00:00:30,689
organization I'm I have a pleasure to

7
00:00:29,130 --> 00:00:35,910
present a language which we developed

8
00:00:30,689 --> 00:00:38,460
for past few months<font color="#CCCCCC"> so actually I</font><font color="#E5E5E5"> that's</font>

9
00:00:35,910 --> 00:00:39,900
the the name of the language<font color="#E5E5E5"> never so I</font>

10
00:00:38,460 --> 00:00:43,830
thought that I will<font color="#E5E5E5"> never write a</font>

11
00:00:39,900 --> 00:00:45,690
programming<font color="#CCCCCC"> language so after that well</font>

12
00:00:43,830 --> 00:00:49,049
still I was thinking that<font color="#E5E5E5"> it will never</font>

13
00:00:45,690 --> 00:00:51,449
happen<font color="#E5E5E5"> but eventually I was advised by</font><font color="#CCCCCC"> a</font>

14
00:00:49,049 --> 00:00:53,909
nice person to start doing something<font color="#E5E5E5"> and</font>

15
00:00:51,449 --> 00:00:57,479
then I<font color="#E5E5E5"> I thought that maybe I will start</font>

16
00:00:53,909 --> 00:01:00,360
<font color="#E5E5E5">and some surprisingly after I began in</font>

17
00:00:57,479 --> 00:01:03,540
April and<font color="#CCCCCC"> we have February next year so</font>

18
00:01:00,360 --> 00:01:07,740
it's less<font color="#E5E5E5"> than about</font><font color="#CCCCCC"> ten months past but</font>

19
00:01:03,540 --> 00:01:09,658
I'm here to present the language<font color="#E5E5E5"> so in</font>

20
00:01:07,740 --> 00:01:11,670
this agenda<font color="#E5E5E5"> I will talk about the</font>

21
00:01:09,659 --> 00:01:14,329
<font color="#CCCCCC">motivation which will attend</font><font color="#E5E5E5"> here it's a</font>

22
00:01:11,670 --> 00:01:17,250
<font color="#E5E5E5">job</font><font color="#CCCCCC"> site project</font><font color="#E5E5E5"> and about the design</font>

23
00:01:14,329 --> 00:01:21,270
<font color="#CCCCCC">the decisions was the under the</font><font color="#E5E5E5"> hood and</font>

24
00:01:17,250 --> 00:01:24,359
I will make a<font color="#E5E5E5"> small demo that it's the</font>

25
00:01:21,270 --> 00:01:28,289
<font color="#CCCCCC">the</font><font color="#E5E5E5"> language is actually capable of</font>

26
00:01:24,359 --> 00:01:30,839
<font color="#CCCCCC">doing</font><font color="#E5E5E5"> something useful because many</font>

27
00:01:28,289 --> 00:01:32,490
languages<font color="#E5E5E5"> start with</font><font color="#CCCCCC"> Fibonacci or doing</font>

28
00:01:30,840 --> 00:01:33,689
some temperature calculations<font color="#E5E5E5"> I have</font>

29
00:01:32,490 --> 00:01:37,469
this<font color="#CCCCCC"> also in Milan</font>

30
00:01:33,689 --> 00:01:40,949
so as I<font color="#E5E5E5"> said about</font><font color="#CCCCCC"> the name</font><font color="#E5E5E5"> of the</font>

31
00:01:37,469 --> 00:01:43,020
<font color="#E5E5E5">language</font><font color="#CCCCCC"> so in this in this so in this</font>

32
00:01:40,950 --> 00:01:45,509
picture you can<font color="#CCCCCC"> see that</font><font color="#E5E5E5"> all the letters</font>

33
00:01:43,020 --> 00:01:48,810
<font color="#CCCCCC">from A to Z</font><font color="#E5E5E5"> that were</font><font color="#CCCCCC"> already taken</font>

34
00:01:45,509 --> 00:01:51,539
there are many names of<font color="#CCCCCC"> ex-girlfriend's</font>

35
00:01:48,810 --> 00:01:54,869
<font color="#E5E5E5">I think like Lisa or</font><font color="#CCCCCC"> Lily so that was</font>

36
00:01:51,539 --> 00:01:57,990
<font color="#E5E5E5">also I couldn't use and there are many</font>

37
00:01:54,869 --> 00:02:01,020
<font color="#E5E5E5">names of famous scientists and some cute</font>

38
00:01:57,990 --> 00:02:06,089
animals<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> for that we have never</font>

39
00:02:01,020 --> 00:02:09,209
also will<font color="#E5E5E5"> fit as well</font><font color="#CCCCCC"> so the name so</font>

40
00:02:06,090 --> 00:02:11,940
it's a hobby project<font color="#CCCCCC"> a creativity</font><font color="#E5E5E5"> escape</font>

41
00:02:09,209 --> 00:02:14,910
<font color="#CCCCCC">I also learning</font><font color="#E5E5E5"> a little bit about</font>

42
00:02:11,940 --> 00:02:18,480
<font color="#E5E5E5">programming languages as its interests</font>

43
00:02:14,910 --> 00:02:21,810
me a lot<font color="#CCCCCC"> I think that many people</font><font color="#E5E5E5"> who</font>

44
00:02:18,480 --> 00:02:24,269
work in IT<font color="#E5E5E5"> of computer science they they</font>

45
00:02:21,810 --> 00:02:28,380
also interested<font color="#E5E5E5"> in this because this</font><font color="#CCCCCC"> is</font>

46
00:02:24,270 --> 00:02:31,170
the primary tool<font color="#E5E5E5"> for doing things and in</font>

47
00:02:28,380 --> 00:02:35,040
the in the background<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can see</font><font color="#E5E5E5"> this</font>

48
00:02:31,170 --> 00:02:38,609
is a translation<font color="#E5E5E5"> to polish of the Dragon</font>

49
00:02:35,040 --> 00:02:40,799
<font color="#E5E5E5">book which I was reading and the that</font>

50
00:02:38,610 --> 00:02:42,990
was<font color="#E5E5E5"> the kind of one</font><font color="#CCCCCC"> of the first book</font>

51
00:02:40,800 --> 00:02:45,990
which gives<font color="#CCCCCC"> you some very</font><font color="#E5E5E5"> theoretical</font>

52
00:02:42,990 --> 00:02:48,990
background then there are two books

53
00:02:45,990 --> 00:02:51,150
which led me to extend the<font color="#CCCCCC"> language</font>

54
00:02:48,990 --> 00:02:54,420
<font color="#E5E5E5">there was a talk about</font><font color="#CCCCCC"> type so we have</font>

55
00:02:51,150 --> 00:02:57,540
also<font color="#E5E5E5"> a book about types and</font><font color="#CCCCCC"> there is a</font>

56
00:02:54,420 --> 00:02:59,609
book which was<font color="#E5E5E5"> very useful to start</font>

57
00:02:57,540 --> 00:03:03,299
doing<font color="#E5E5E5"> actually the design or the</font>

58
00:02:59,610 --> 00:03:06,270
<font color="#CCCCCC">language</font><font color="#E5E5E5"> not from the using</font><font color="#CCCCCC"> there the</font>

59
00:03:03,300 --> 00:03:10,110
<font color="#CCCCCC">dragon book but rather to start writing</font>

60
00:03:06,270 --> 00:03:12,330
<font color="#CCCCCC">vitro machine and</font><font color="#E5E5E5"> this is a perfect code</font>

61
00:03:10,110 --> 00:03:15,270
some clean code<font color="#CCCCCC"> so those are the things</font>

62
00:03:12,330 --> 00:03:17,850
<font color="#E5E5E5">which you also should look after not to</font>

63
00:03:15,270 --> 00:03:21,209
create some mess but some maintain code

64
00:03:17,850 --> 00:03:24,840
which can be extended<font color="#CCCCCC"> so the design</font>

65
00:03:21,209 --> 00:03:26,730
decisions those are this is first I

66
00:03:24,840 --> 00:03:28,410
began the language as a functional

67
00:03:26,730 --> 00:03:31,140
programming language<font color="#CCCCCC"> there is that</font>

68
00:03:28,410 --> 00:03:33,060
chapter<font color="#E5E5E5"> in a book how</font><font color="#CCCCCC"> to how to make a</font>

69
00:03:31,140 --> 00:03:35,790
functional programming<font color="#CCCCCC"> language and</font>

70
00:03:33,060 --> 00:03:38,390
<font color="#E5E5E5">right then I decided it</font><font color="#CCCCCC"> should be called</font>

71
00:03:35,790 --> 00:03:40,798
by value it<font color="#CCCCCC"> should be statically</font><font color="#E5E5E5"> typed</font>

72
00:03:38,390 --> 00:03:43,738
because I want<font color="#CCCCCC"> to have</font><font color="#E5E5E5"> the compiler to</font>

73
00:03:40,799 --> 00:03:47,970
<font color="#E5E5E5">correct my code and besides such code is</font>

74
00:03:43,739 --> 00:03:50,400
is faster<font color="#CCCCCC"> I I knew that many functional</font>

75
00:03:47,970 --> 00:03:52,440
<font color="#E5E5E5">programming languages are ml based maybe</font>

76
00:03:50,400 --> 00:03:55,290
you know or camel which<font color="#CCCCCC"> is very hard to</font>

77
00:03:52,440 --> 00:03:57,570
<font color="#CCCCCC">read</font><font color="#E5E5E5"> so I then thought when</font><font color="#CCCCCC"> if</font>

78
00:03:55,290 --> 00:03:59,820
everything is doing from<font color="#E5E5E5"> scratch then</font>

79
00:03:57,570 --> 00:04:02,190
maybe I can<font color="#E5E5E5"> have some</font><font color="#CCCCCC"> C like syntax</font><font color="#E5E5E5"> and</font>

80
00:03:59,820 --> 00:04:05,190
then we have reference<font color="#CCCCCC"> model</font><font color="#E5E5E5"> so</font>

81
00:04:02,190 --> 00:04:07,859
everything is refer as<font color="#E5E5E5"> basically we have</font>

82
00:04:05,190 --> 00:04:11,820
box values<font color="#E5E5E5"> how the how the values in</font>

83
00:04:07,860 --> 00:04:15,420
memory<font color="#E5E5E5"> are represented so every float or</font>

84
00:04:11,820 --> 00:04:19,728
integer<font color="#E5E5E5"> or string is kept in inside the</font>

85
00:04:15,420 --> 00:04:23,610
<font color="#E5E5E5">memory as a separate</font><font color="#CCCCCC"> object and</font><font color="#E5E5E5"> it's</font>

86
00:04:19,728 --> 00:04:26,099
syntactically scoped so under the<font color="#CCCCCC"> hood</font>

87
00:04:23,610 --> 00:04:28,560
what helped<font color="#CCCCCC"> me a lot it was</font><font color="#E5E5E5"> actually not</font>

88
00:04:26,100 --> 00:04:30,690
to come up<font color="#CCCCCC"> with something</font><font color="#E5E5E5"> completely new</font>

89
00:04:28,560 --> 00:04:32,340
but I read the book which I mentioned

90
00:04:30,690 --> 00:04:35,040
before<font color="#E5E5E5"> and then there</font>

91
00:04:32,340 --> 00:04:37,739
I found<font color="#CCCCCC"> the malware</font><font color="#E5E5E5"> machine</font><font color="#CCCCCC"> I I</font><font color="#E5E5E5"> suppose</font>

92
00:04:35,040 --> 00:04:42,620
it's it is the basis for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> akhom</font>

93
00:04:37,740 --> 00:04:45,360
<font color="#E5E5E5">language</font><font color="#CCCCCC"> in its virtual machine</font><font color="#E5E5E5"> I also</font>

94
00:04:42,620 --> 00:04:47,940
needed mark-and-sweep garbage collector

95
00:04:45,360 --> 00:04:51,449
<font color="#E5E5E5">because</font><font color="#CCCCCC"> how the objects are created</font><font color="#E5E5E5"> how</font>

96
00:04:47,940 --> 00:04:53,880
the<font color="#E5E5E5"> first class functions are being</font>

97
00:04:51,449 --> 00:04:56,490
returned from different functions<font color="#E5E5E5"> so not</font>

98
00:04:53,880 --> 00:04:59,310
to have<font color="#E5E5E5"> so-called spaghetti</font><font color="#CCCCCC"> stack I need</font>

99
00:04:56,490 --> 00:05:04,229
<font color="#E5E5E5">the garbage collector which</font><font color="#CCCCCC"> also in kind</font>

100
00:04:59,310 --> 00:05:07,440
<font color="#E5E5E5">of simplifies things</font><font color="#CCCCCC"> I as minimalist</font>

101
00:05:04,229 --> 00:05:09,510
matters and tail rates<font color="#CCCCCC"> optimization it</font>

102
00:05:07,440 --> 00:05:11,669
when we have a functional<font color="#CCCCCC"> program</font>

103
00:05:09,510 --> 00:05:17,190
programming<font color="#E5E5E5"> language then</font><font color="#CCCCCC"> we don't have</font>

104
00:05:11,669 --> 00:05:21,479
loops<font color="#E5E5E5"> but using a tail tail recursion we</font>

105
00:05:17,190 --> 00:05:24,270
can change loops into into into

106
00:05:21,479 --> 00:05:27,990
functions<font color="#E5E5E5"> and then there are some other</font>

107
00:05:24,270 --> 00:05:30,930
<font color="#E5E5E5">things like hashmaps trees linked</font><font color="#CCCCCC"> lists</font>

108
00:05:27,990 --> 00:05:34,770
<font color="#E5E5E5">and everything is</font><font color="#CCCCCC"> written in c using our</font>

109
00:05:30,930 --> 00:05:37,470
old friends bison and<font color="#E5E5E5"> flags so this is</font>

110
00:05:34,770 --> 00:05:41,639
kind of the basis for many many

111
00:05:37,470 --> 00:05:44,880
compilers<font color="#E5E5E5"> when they are in the initial</font>

112
00:05:41,639 --> 00:05:45,600
step<font color="#E5E5E5"> so that's that's how a how a</font>

113
00:05:44,880 --> 00:05:49,139
typical

114
00:05:45,600 --> 00:05:51,720
code looks<font color="#E5E5E5"> like in never language so</font>

115
00:05:49,139 --> 00:05:53,940
here we have static<font color="#E5E5E5"> types it means that</font>

116
00:05:51,720 --> 00:05:59,270
the function calc calc<font color="#E5E5E5"> returns a</font>

117
00:05:53,940 --> 00:06:02,250
function from<font color="#E5E5E5"> within a fact it returns a</font>

118
00:05:59,270 --> 00:06:04,380
<font color="#E5E5E5">first-class function this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> its type</font>

119
00:06:02,250 --> 00:06:07,050
that it takes a float parameter returns

120
00:06:04,380 --> 00:06:09,719
<font color="#CCCCCC">a float</font><font color="#E5E5E5"> and it converts Fahrenheit</font>

121
00:06:07,050 --> 00:06:11,639
degrees into Celsius<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> get the</font>

122
00:06:09,720 --> 00:06:15,090
function<font color="#CCCCCC"> and then we call it with some</font>

123
00:06:11,639 --> 00:06:18,240
parameter and then<font color="#E5E5E5"> get a value so that</font>

124
00:06:15,090 --> 00:06:25,590
<font color="#CCCCCC">was the the first part which</font><font color="#E5E5E5"> was written</font>

125
00:06:18,240 --> 00:06:27,389
and<font color="#E5E5E5"> okay so those the language how it</font>

126
00:06:25,590 --> 00:06:30,539
was developed<font color="#CCCCCC"> I decided to first begin</font>

127
00:06:27,389 --> 00:06:33,840
from invoking functions because many

128
00:06:30,539 --> 00:06:37,070
programming languages<font color="#CCCCCC"> have loops or ifs</font>

129
00:06:33,840 --> 00:06:39,900
conditionals<font color="#E5E5E5"> or some other control</font>

130
00:06:37,070 --> 00:06:41,520
structures<font color="#E5E5E5"> but this</font><font color="#CCCCCC"> seemed</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be not</font>

131
00:06:39,900 --> 00:06:43,710
<font color="#CCCCCC">very interesting to me because</font><font color="#E5E5E5"> it's very</font>

132
00:06:41,520 --> 00:06:45,810
<font color="#CCCCCC">well written</font><font color="#E5E5E5"> and all the function</font>

133
00:06:43,710 --> 00:06:47,880
invocations<font color="#E5E5E5"> are written in a</font><font color="#CCCCCC"> tag</font>

134
00:06:45,810 --> 00:06:50,250
book at the end<font color="#CCCCCC"> of it so I decided to</font>

135
00:06:47,880 --> 00:06:52,830
begin<font color="#E5E5E5"> from the end because the beginning</font>

136
00:06:50,250 --> 00:06:55,910
was<font color="#CCCCCC"> not very interesting</font><font color="#E5E5E5"> and actually</font><font color="#CCCCCC"> I</font>

137
00:06:52,830 --> 00:06:58,590
think<font color="#E5E5E5"> that was a wise</font><font color="#CCCCCC"> decision because</font>

138
00:06:55,910 --> 00:07:01,230
this way I had some kind<font color="#CCCCCC"> of structure</font>

139
00:06:58,590 --> 00:07:05,450
how the program will look in<font color="#CCCCCC"> the later</font>

140
00:07:01,230 --> 00:07:09,000
<font color="#E5E5E5">on some some framework I could extend so</font>

141
00:07:05,450 --> 00:07:11,310
everything was expression<font color="#E5E5E5"> have also</font>

142
00:07:09,000 --> 00:07:13,200
<font color="#E5E5E5">functions are expressions we have</font><font color="#CCCCCC"> some</font>

143
00:07:11,310 --> 00:07:15,840
simple operators and<font color="#E5E5E5"> we have only one</font>

144
00:07:13,200 --> 00:07:19,830
type and that<font color="#CCCCCC"> was the beginnings so to</font>

145
00:07:15,840 --> 00:07:22,560
execute<font color="#E5E5E5"> some expressions then I thought</font>

146
00:07:19,830 --> 00:07:25,289
oh maybe maybe having this<font color="#CCCCCC"> control is</font>

147
00:07:22,560 --> 00:07:27,870
not enough<font color="#E5E5E5"> so I added a type integer</font><font color="#CCCCCC"> so</font>

148
00:07:25,290 --> 00:07:31,470
I could add<font color="#CCCCCC"> a new operator I could do</font>

149
00:07:27,870 --> 00:07:36,150
some boolean expressions like<font color="#CCCCCC"> end or</font><font color="#E5E5E5"> not</font>

150
00:07:31,470 --> 00:07:38,669
<font color="#E5E5E5">and later on I thought that</font><font color="#CCCCCC"> oh maybe</font><font color="#E5E5E5"> we</font>

151
00:07:36,150 --> 00:07:41,070
should add some something<font color="#E5E5E5"> more so we</font>

152
00:07:38,669 --> 00:07:43,590
let's go back to some controls<font color="#E5E5E5"> and I</font>

153
00:07:41,070 --> 00:07:45,240
added some<font color="#E5E5E5"> arithmetic functions and also</font>

154
00:07:43,590 --> 00:07:47,820
a third<font color="#CCCCCC"> function and</font><font color="#E5E5E5"> that was also I</font>

155
00:07:45,240 --> 00:07:50,030
think a good decision<font color="#CCCCCC"> because this led</font>

156
00:07:47,820 --> 00:07:53,610
<font color="#CCCCCC">me to write programs which were</font>

157
00:07:50,030 --> 00:07:55,409
validating themselves<font color="#E5E5E5"> so when I I would</font>

158
00:07:53,610 --> 00:07:57,630
write something<font color="#CCCCCC"> in the never ramen</font>

159
00:07:55,410 --> 00:07:59,880
language to an assert and then I knew

160
00:07:57,630 --> 00:08:03,300
that<font color="#CCCCCC"> if this</font><font color="#E5E5E5"> program works then this</font>

161
00:07:59,880 --> 00:08:06,510
<font color="#E5E5E5">asset will pass and that I can create a</font>

162
00:08:03,300 --> 00:08:09,270
large<font color="#E5E5E5"> test suit of many tests to</font>

163
00:08:06,510 --> 00:08:12,150
validate if if what I'm doing is proper

164
00:08:09,270 --> 00:08:18,180
<font color="#E5E5E5">and if I'm extending the language in a</font>

165
00:08:12,150 --> 00:08:21,270
proper way<font color="#CCCCCC"> so then I got back two types</font>

166
00:08:18,180 --> 00:08:25,669
so<font color="#CCCCCC"> matricis</font><font color="#E5E5E5"> again has to do something</font>

167
00:08:21,270 --> 00:08:27,900
more and those were conformant arise

168
00:08:25,669 --> 00:08:32,098
<font color="#E5E5E5">conferment arise means that when you</font>

169
00:08:27,900 --> 00:08:34,319
pass a<font color="#E5E5E5"> function and now right to to a</font>

170
00:08:32,099 --> 00:08:38,909
function then<font color="#E5E5E5"> you will get its dimension</font>

171
00:08:34,320 --> 00:08:40,919
in the as an argument of a function as

172
00:08:38,909 --> 00:08:43,860
such solution is in the<font color="#E5E5E5"> Pascal</font>

173
00:08:40,919 --> 00:08:47,640
programming language I also overloaded

174
00:08:43,860 --> 00:08:50,550
operators then then I<font color="#E5E5E5"> thought</font><font color="#CCCCCC"> or maybe</font>

175
00:08:47,640 --> 00:08:54,920
let's go<font color="#CCCCCC"> and add</font><font color="#E5E5E5"> some more control flow</font>

176
00:08:50,550 --> 00:08:59,689
<font color="#E5E5E5">so and so I look for while loops and</font>

177
00:08:54,920 --> 00:09:02,670
<font color="#E5E5E5">also variables so this and this and this</font>

178
00:08:59,690 --> 00:09:04,950
it's also interesting<font color="#E5E5E5"> because I was</font>

179
00:09:02,670 --> 00:09:07,020
<font color="#E5E5E5">trying</font><font color="#CCCCCC"> to write some dynamic programming</font>

180
00:09:04,950 --> 00:09:10,290
language<font color="#E5E5E5"> maybe you know the sorry</font>

181
00:09:07,020 --> 00:09:14,100
<font color="#E5E5E5">dynamic programming some program no</font>

182
00:09:10,290 --> 00:09:16,170
problem to solve<font color="#CCCCCC"> and it was</font><font color="#E5E5E5"> cutting roat</font>

183
00:09:14,100 --> 00:09:18,390
you<font color="#E5E5E5"> maybe now that</font><font color="#CCCCCC"> you should get</font><font color="#E5E5E5"> a</font>

184
00:09:16,170 --> 00:09:20,370
maximum<font color="#E5E5E5"> value and cutting the</font><font color="#CCCCCC"> rod and</font>

185
00:09:18,390 --> 00:09:27,980
there are some some values which should

186
00:09:20,370 --> 00:09:27,980
<font color="#E5E5E5">do we should we</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> remember but</font>

187
00:09:28,400 --> 00:09:33,660
without side effects<font color="#E5E5E5"> it was very tedious</font>

188
00:09:31,020 --> 00:09:36,300
to<font color="#CCCCCC"> write such a program so so I thought</font>

189
00:09:33,660 --> 00:09:38,130
let's do some assignments<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> it's it</font>

190
00:09:36,300 --> 00:09:40,650
was to be functional<font color="#CCCCCC"> cramming language</font>

191
00:09:38,130 --> 00:09:42,870
<font color="#E5E5E5">but maybe if</font><font color="#CCCCCC"> we if someone doesn't want</font>

192
00:09:40,650 --> 00:09:44,610
<font color="#E5E5E5">to use assignments that he will he or</font>

193
00:09:42,870 --> 00:09:47,040
she<font color="#CCCCCC"> will have still functional</font>

194
00:09:44,610 --> 00:09:51,060
programming language<font color="#E5E5E5"> but if we can</font>

195
00:09:47,040 --> 00:09:54,290
change<font color="#CCCCCC"> something that we can do</font><font color="#E5E5E5"> more</font>

196
00:09:51,060 --> 00:10:00,920
easily code some interesting problems

197
00:09:54,290 --> 00:10:07,469
<font color="#CCCCCC">then</font><font color="#E5E5E5"> I are the types and exceptions and</font>

198
00:10:00,920 --> 00:10:17,370
<font color="#E5E5E5">and</font><font color="#CCCCCC"> that's that's it</font><font color="#E5E5E5"> so so that's that's</font>

199
00:10:07,470 --> 00:10:20,010
<font color="#E5E5E5">how the programming language was well I</font>

200
00:10:17,370 --> 00:10:23,390
also was thinking<font color="#CCCCCC"> how to handle with</font>

201
00:10:20,010 --> 00:10:27,450
some runtime<font color="#E5E5E5"> errors</font><font color="#CCCCCC"> ok the question was</font>

202
00:10:23,390 --> 00:10:30,000
why I decided to<font color="#E5E5E5"> add exceptions not some</font>

203
00:10:27,450 --> 00:10:33,210
<font color="#E5E5E5">option</font><font color="#CCCCCC"> house or some other form of</font><font color="#E5E5E5"> error</font>

204
00:10:30,000 --> 00:10:36,510
<font color="#E5E5E5">handling so that's because when if we</font>

205
00:10:33,210 --> 00:10:38,460
<font color="#E5E5E5">had a division</font><font color="#CCCCCC"> by by</font><font color="#E5E5E5"> zero then the</font>

206
00:10:36,510 --> 00:10:41,790
virtual machine would stop<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I didn't</font>

207
00:10:38,460 --> 00:10:43,710
want<font color="#CCCCCC"> to do that because I would like to</font>

208
00:10:41,790 --> 00:10:46,740
have the programmer to<font color="#E5E5E5"> have a chance to</font>

209
00:10:43,710 --> 00:10:49,650
<font color="#E5E5E5">handle this situation in his or her way</font>

210
00:10:46,740 --> 00:10:51,510
<font color="#CCCCCC">so I thought</font><font color="#E5E5E5"> that maybe there is</font>

211
00:10:49,650 --> 00:10:54,780
something like exceptions<font color="#E5E5E5"> and I can</font>

212
00:10:51,510 --> 00:10:57,540
learn<font color="#E5E5E5"> how to do exception handling</font>

213
00:10:54,780 --> 00:11:00,060
<font color="#CCCCCC">I learned that exception handlers are</font>

214
00:10:57,540 --> 00:11:01,680
being searched<font color="#E5E5E5"> by binary search in the</font>

215
00:11:00,060 --> 00:11:04,020
code<font color="#CCCCCC"> so that was</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> surprising</font>

216
00:11:01,680 --> 00:11:07,500
<font color="#E5E5E5">technique which was which I also found</font>

217
00:11:04,020 --> 00:11:12,750
somewhere<font color="#E5E5E5"> and yeah that's that's how I</font>

218
00:11:07,500 --> 00:11:14,130
added that here you can on specify only

219
00:11:12,750 --> 00:11:15,540
the name of the exception there are

220
00:11:14,130 --> 00:11:20,850
different exceptions<font color="#CCCCCC"> like other I of</font>

221
00:11:15,540 --> 00:11:24,089
bounds<font color="#CCCCCC"> or some some others so I how much</font>

222
00:11:20,850 --> 00:11:27,840
time do<font color="#CCCCCC"> i</font><font color="#E5E5E5"> five five minutes and then</font>

223
00:11:24,090 --> 00:11:34,820
questions<font color="#E5E5E5"> okay so so here I have an</font>

224
00:11:27,840 --> 00:11:37,500
<font color="#CCCCCC">example</font><font color="#E5E5E5"> of a neural network so briefly I</font>

225
00:11:34,820 --> 00:11:40,260
wanted also to make some example<font color="#E5E5E5"> of some</font>

226
00:11:37,500 --> 00:11:44,400
more advanced program<font color="#E5E5E5"> so this is</font>

227
00:11:40,260 --> 00:11:46,680
backward forward<font color="#CCCCCC"> in</font><font color="#E5E5E5"> propagation of the</font>

228
00:11:44,400 --> 00:11:49,620
supervised learning of a natural network

229
00:11:46,680 --> 00:11:52,670
we<font color="#CCCCCC"> have a perceptron</font><font color="#E5E5E5"> we have some input</font>

230
00:11:49,620 --> 00:12:00,120
<font color="#E5E5E5">values and some output value</font>

231
00:11:52,670 --> 00:12:02,339
<font color="#E5E5E5">okay and so yeah and</font><font color="#CCCCCC"> also if some neural</font>

232
00:12:00,120 --> 00:12:09,810
networks are<font color="#E5E5E5"> recently</font><font color="#CCCCCC"> occurred topic</font>

233
00:12:02,340 --> 00:12:14,220
again so so basically we said we want to

234
00:12:09,810 --> 00:12:17,069
<font color="#E5E5E5">set those values to such those variables</font>

235
00:12:14,220 --> 00:12:19,440
<font color="#E5E5E5">to such values so the arrow arrow which</font>

236
00:12:17,070 --> 00:12:22,950
is<font color="#E5E5E5"> returned by the by the perceptron</font>

237
00:12:19,440 --> 00:12:25,770
<font color="#CCCCCC">is</font><font color="#E5E5E5"> as low as</font><font color="#CCCCCC"> possible so basically we</font>

238
00:12:22,950 --> 00:12:29,370
need some function which gives values

239
00:12:25,770 --> 00:12:32,040
from<font color="#CCCCCC"> zero to one we wanted</font><font color="#E5E5E5"> to have a</font>

240
00:12:29,370 --> 00:12:35,310
randomized function here we<font color="#CCCCCC"> have a seed</font>

241
00:12:32,040 --> 00:12:38,390
and<font color="#E5E5E5"> we return our</font><font color="#CCCCCC"> inner</font>

242
00:12:35,310 --> 00:12:44,069
congruential generator which gives us

243
00:12:38,390 --> 00:12:47,390
<font color="#E5E5E5">subsequent pseudo numbers</font><font color="#CCCCCC"> then we wanted</font>

244
00:12:44,070 --> 00:12:50,310
<font color="#E5E5E5">to define our own multiplication we have</font>

245
00:12:47,390 --> 00:12:52,050
<font color="#E5E5E5">we can multiply arise in another</font>

246
00:12:50,310 --> 00:12:54,900
language<font color="#E5E5E5"> but</font><font color="#CCCCCC"> we want to have some</font><font color="#E5E5E5"> other</font>

247
00:12:52,050 --> 00:12:57,180
form of multiplication so here it is<font color="#E5E5E5"> so</font>

248
00:12:54,900 --> 00:13:01,410
this is kind of element by element

249
00:12:57,180 --> 00:13:03,569
multiplication<font color="#E5E5E5"> so those are the input</font>

250
00:13:01,410 --> 00:13:05,520
values we have four<font color="#E5E5E5"> possible here we</font>

251
00:13:03,570 --> 00:13:08,610
have four out of eight<font color="#E5E5E5"> possible values</font>

252
00:13:05,520 --> 00:13:11,280
and then expected outcome of<font color="#E5E5E5"> the which</font>

253
00:13:08,610 --> 00:13:14,040
should give<font color="#CCCCCC"> us the</font><font color="#E5E5E5"> neural network and as</font>

254
00:13:11,280 --> 00:13:15,870
you can<font color="#E5E5E5"> see the output</font><font color="#CCCCCC"> is there is the</font>

255
00:13:14,040 --> 00:13:21,630
middle<font color="#CCCCCC"> value and the left and right</font>

256
00:13:15,870 --> 00:13:25,060
<font color="#E5E5E5">column should</font><font color="#CCCCCC"> be discarded so so then</font>

257
00:13:21,630 --> 00:13:29,589
we'll begin with some<font color="#E5E5E5"> random values</font>

258
00:13:25,060 --> 00:13:32,388
we for all input values as those<font color="#CCCCCC"> are</font>

259
00:13:29,589 --> 00:13:37,040
operations on all elements<font color="#CCCCCC"> of an array</font>

260
00:13:32,389 --> 00:13:39,949
we get some output which is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> S then</font>

261
00:13:37,040 --> 00:13:42,230
we use<font color="#E5E5E5"> something and then we have output</font>

262
00:13:39,949 --> 00:13:45,979
<font color="#E5E5E5">of our network but we want to improve it</font>

263
00:13:42,230 --> 00:13:48,560
<font color="#CCCCCC">so we know something</font><font color="#E5E5E5"> like called in the</font>

264
00:13:45,980 --> 00:13:51,170
<font color="#CCCCCC">backpropagation this is gradient Destin</font>

265
00:13:48,560 --> 00:13:53,660
method here we have the<font color="#CCCCCC"> Sigma it is the</font>

266
00:13:51,170 --> 00:13:57,099
<font color="#CCCCCC">it's derivative</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to move</font>

267
00:13:53,660 --> 00:14:02,560
towards<font color="#E5E5E5"> minimum of the of the function</font>

268
00:13:57,100 --> 00:14:07,690
<font color="#E5E5E5">so we calculate the error then do some</font>

269
00:14:02,560 --> 00:14:07,689
multiplications and correct the

270
00:14:08,560 --> 00:14:18,560
coefficients of<font color="#E5E5E5"> the of the network so</font>

271
00:14:12,790 --> 00:14:20,750
<font color="#CCCCCC">all those all those operations or matrix</font>

272
00:14:18,560 --> 00:14:23,359
are done in some convenient<font color="#CCCCCC"> way you</font>

273
00:14:20,750 --> 00:14:25,550
<font color="#CCCCCC">needn't to write how</font><font color="#E5E5E5"> to multiply some</font>

274
00:14:23,360 --> 00:14:28,579
mattresses<font color="#CCCCCC"> everything is executed</font><font color="#E5E5E5"> by the</font>

275
00:14:25,550 --> 00:14:33,260
virtual machine so matrices are first

276
00:14:28,579 --> 00:14:35,329
class<font color="#CCCCCC"> and in some many learning cycles</font>

277
00:14:33,260 --> 00:14:39,319
will repeat the forward<font color="#E5E5E5"> back propagation</font>

278
00:14:35,329 --> 00:14:42,589
<font color="#E5E5E5">to</font><font color="#CCCCCC"> have those coefficients low and here</font>

279
00:14:39,319 --> 00:14:47,689
are the results<font color="#CCCCCC"> those</font><font color="#E5E5E5"> balls</font><font color="#CCCCCC"> those</font><font color="#E5E5E5"> values</font>

280
00:14:42,589 --> 00:14:51,560
<font color="#CCCCCC">are involved are the</font><font color="#E5E5E5"> input values which</font>

281
00:14:47,690 --> 00:14:53,930
the<font color="#CCCCCC"> network</font><font color="#E5E5E5"> has never ever seen but it</font>

282
00:14:51,560 --> 00:14:55,969
gives us proper results except for one

283
00:14:53,930 --> 00:14:57,560
value<font color="#E5E5E5"> which</font><font color="#CCCCCC"> it's where it's undecided</font>

284
00:14:55,970 --> 00:15:02,269
instead of saying<font color="#E5E5E5"> that it</font><font color="#CCCCCC"> should be zero</font>

285
00:14:57,560 --> 00:15:06,290
it gives us<font color="#CCCCCC"> 50 value 50 which is well</font>

286
00:15:02,269 --> 00:15:10,639
kind<font color="#CCCCCC"> of an unexpected</font><font color="#E5E5E5"> value or some</font>

287
00:15:06,290 --> 00:15:16,689
undecided value so that<font color="#CCCCCC"> was the longer</font>

288
00:15:10,639 --> 00:15:20,470
example and in the<font color="#E5E5E5"> future I want</font><font color="#CCCCCC"> to</font>

289
00:15:16,690 --> 00:15:24,079
extend<font color="#E5E5E5"> on types on some those add some</font>

290
00:15:20,470 --> 00:15:29,660
operations on<font color="#CCCCCC"> list use some externals</font>

291
00:15:24,079 --> 00:15:32,510
<font color="#E5E5E5">and improve runtime actually records and</font>

292
00:15:29,660 --> 00:15:33,829
list comprehension<font color="#E5E5E5"> and falling from</font>

293
00:15:32,510 --> 00:15:36,640
function interface

294
00:15:33,829 --> 00:15:38,260
<font color="#E5E5E5">have been added since I wrote this</font>

295
00:15:36,640 --> 00:15:40,480
<font color="#CCCCCC">presentation</font>

296
00:15:38,260 --> 00:15:43,030
so you know<font color="#E5E5E5"> I think that</font><font color="#CCCCCC"> I will now</font>

297
00:15:40,480 --> 00:15:46,110
focus on some type<font color="#E5E5E5"> inference</font><font color="#CCCCCC"> I think</font>

298
00:15:43,030 --> 00:15:49,110
this is<font color="#E5E5E5"> what Lua people wanted to do and</font>

299
00:15:46,110 --> 00:15:52,180
basically that's that's it

300
00:15:49,110 --> 00:15:54,160
so to<font color="#E5E5E5"> summarize creating programming</font>

301
00:15:52,180 --> 00:15:57,729
languages is a fan<font color="#E5E5E5"> can teach you a lot</font>

302
00:15:54,160 --> 00:15:58,900
although<font color="#E5E5E5"> it it comes at a</font><font color="#CCCCCC"> price and</font><font color="#E5E5E5"> I</font>

303
00:15:57,730 --> 00:16:01,270
<font color="#E5E5E5">think that the at the end is a</font>

304
00:15:58,900 --> 00:16:03,760
satisfactory<font color="#E5E5E5"> to see something that it's</font>

305
00:16:01,270 --> 00:16:07,930
<font color="#E5E5E5">running and it's being executed as you</font>

306
00:16:03,760 --> 00:16:10,990
<font color="#E5E5E5">expect</font><font color="#CCCCCC"> it so</font><font color="#E5E5E5"> so thank you</font><font color="#CCCCCC"> very much for</font>

307
00:16:07,930 --> 00:16:13,660
<font color="#E5E5E5">your intention and for invitation and if</font>

308
00:16:10,990 --> 00:16:15,970
you want to check<font color="#E5E5E5"> the language you can</font>

309
00:16:13,660 --> 00:16:19,000
<font color="#E5E5E5">visit the website and of course I like</font>

310
00:16:15,970 --> 00:16:21,550
to<font color="#CCCCCC"> if</font><font color="#E5E5E5"> someone starts me on the github so</font>

311
00:16:19,000 --> 00:16:23,470
so thank you a<font color="#CCCCCC"> lot for your time</font><font color="#E5E5E5"> thank</font>

312
00:16:21,550 --> 00:16:26,140
you<font color="#CCCCCC"> very</font><font color="#E5E5E5"> much if you have any questions</font>

313
00:16:23,470 --> 00:16:29,500
<font color="#E5E5E5">and if I have time then</font><font color="#CCCCCC"> then I have</font>

314
00:16:26,140 --> 00:16:49,170
t-shirts<font color="#E5E5E5"> for the best questions for the</font>

315
00:16:29,500 --> 00:16:49,170
<font color="#CCCCCC">four</font><font color="#E5E5E5"> six best questions</font><font color="#CCCCCC"> requests</font>

316
00:17:00,889 --> 00:17:06,780
no no it's by inference so with you you

317
00:17:04,230 --> 00:17:09,329
you<font color="#E5E5E5"> get only kind of a pointer a</font>

318
00:17:06,780 --> 00:17:12,359
reference so<font color="#E5E5E5"> only a reference is passed</font>

319
00:17:09,329 --> 00:17:15,980
to the value<font color="#E5E5E5"> all right it's it's still</font>

320
00:17:12,359 --> 00:17:15,979
in the memory<font color="#E5E5E5"> it is not being copied</font>

321
00:17:17,359 --> 00:17:23,958
<font color="#CCCCCC">now you can modify them by the</font>

322
00:17:19,439 --> 00:17:26,939
assignments<font color="#E5E5E5"> so if we have</font><font color="#CCCCCC"> and a</font>

323
00:17:23,959 --> 00:17:29,220
reference<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the variable or index that</font>

324
00:17:26,939 --> 00:17:49,020
<font color="#CCCCCC">all right then we</font><font color="#E5E5E5"> can modify it with</font>

325
00:17:29,220 --> 00:17:50,820
assignment yeah well I think that it's

326
00:17:49,020 --> 00:17:52,070
<font color="#E5E5E5">your choice if you prefer</font><font color="#CCCCCC"> to do this</font>

327
00:17:50,820 --> 00:17:54,178
this way<font color="#E5E5E5"> from some</font>

328
00:17:52,070 --> 00:17:56,820
academic point of view<font color="#E5E5E5"> or if you would</font>

329
00:17:54,179 --> 00:17:59,340
<font color="#CCCCCC">like to</font><font color="#E5E5E5"> learn how tail recursion works</font>

330
00:17:56,820 --> 00:18:02,129
<font color="#E5E5E5">or if you'd</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> to try to write your</font>

331
00:17:59,340 --> 00:18:05,129
<font color="#E5E5E5">function in the tail recursive way then</font>

332
00:18:02,130 --> 00:18:08,190
here you go<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> try this</font><font color="#E5E5E5"> and if you</font>

333
00:18:05,130 --> 00:18:12,030
<font color="#CCCCCC">are</font><font color="#E5E5E5"> and loops are syntactic sugar over</font>

334
00:18:08,190 --> 00:18:16,940
tail recursion so we can do<font color="#E5E5E5"> tail loops</font>

335
00:18:12,030 --> 00:18:16,940
instead<font color="#E5E5E5"> and another question</font>

336
00:18:37,280 --> 00:18:43,440
no not not yet<font color="#E5E5E5"> not yet but this I</font>

337
00:18:41,400 --> 00:18:46,530
thought that using<font color="#E5E5E5"> foreign function</font>

338
00:18:43,440 --> 00:18:48,990
interface<font color="#E5E5E5"> I could use some some</font>

339
00:18:46,530 --> 00:18:51,620
libraries to do such optimizations but

340
00:18:48,990 --> 00:18:51,620
it's not ready yet

341
00:18:51,830 --> 00:19:05,760
<font color="#E5E5E5">yeah it's</font><font color="#CCCCCC"> twenty-five thousand lines of</font>

342
00:18:57,690 --> 00:19:08,820
code<font color="#CCCCCC"> right now twenty-five thousand it's</font>

343
00:19:05,760 --> 00:19:11,390
virtual machine type checker and<font color="#E5E5E5"> scanner</font>

344
00:19:08,820 --> 00:19:11,389
parser

345
00:19:17,520 --> 00:19:24,609
[Applause]

