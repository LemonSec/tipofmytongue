1
00:00:15,770 --> 00:00:22,050
all right<font color="#E5E5E5"> welcome</font><font color="#CCCCCC"> everybody</font><font color="#E5E5E5"> to the last</font>

2
00:00:19,259 --> 00:00:24,809
session<font color="#E5E5E5"> in the SDS deaf room and we're</font>

3
00:00:22,050 --> 00:00:28,710
gonna hear about<font color="#E5E5E5"> you know every</font>

4
00:00:24,809 --> 00:00:33,030
<font color="#CCCCCC">filesystems worst nightmare</font><font color="#E5E5E5"> give it up</font>

5
00:00:28,710 --> 00:00:38,339
for<font color="#E5E5E5"> Alexandra</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> no</font><font color="#CCCCCC"> man come up</font><font color="#E5E5E5"> like</font>

6
00:00:33,030 --> 00:00:41,879
<font color="#CCCCCC">sana thank you</font>

7
00:00:38,339 --> 00:00:43,890
so I'm Mona and I be<font color="#CCCCCC"> Cabrillo MTC's talk</font>

8
00:00:41,879 --> 00:00:45,419
with Alex<font color="#E5E5E5"> on which is here and we've</font>

9
00:00:43,890 --> 00:00:48,690
been<font color="#E5E5E5"> working</font><font color="#CCCCCC"> on the object an object</font>

10
00:00:45,420 --> 00:00:52,019
storage for<font color="#CCCCCC"> two</font><font color="#E5E5E5"> years at which the</font>

11
00:00:48,690 --> 00:00:54,510
subject of today is storing a lot<font color="#CCCCCC"> of</font>

12
00:00:52,019 --> 00:00:57,989
small objects in your<font color="#CCCCCC"> Swift cluster</font><font color="#E5E5E5"> and</font>

13
00:00:54,510 --> 00:01:00,059
the way we optimized it<font color="#E5E5E5"> if we are</font>

14
00:00:57,989 --> 00:01:01,428
<font color="#E5E5E5">talking about optimization</font><font color="#CCCCCC"> it means we</font>

15
00:01:00,059 --> 00:01:06,539
had some issue

16
00:01:01,429 --> 00:01:10,560
what were<font color="#CCCCCC"> they well first the most</font>

17
00:01:06,540 --> 00:01:13,530
obvious we had performance issues<font color="#CCCCCC"> we</font>

18
00:01:10,560 --> 00:01:15,540
throw<font color="#E5E5E5"> that especially on latency when</font>

19
00:01:13,530 --> 00:01:18,330
<font color="#CCCCCC">the</font><font color="#E5E5E5"> user requested an object if you get</font>

20
00:01:15,540 --> 00:01:20,550
it in<font color="#E5E5E5"> 30 milliseconds that's okay if it</font>

21
00:01:18,330 --> 00:01:25,320
took hundreds<font color="#E5E5E5"> of milliseconds or</font><font color="#CCCCCC"> either</font>

22
00:01:20,550 --> 00:01:27,600
seconds<font color="#E5E5E5"> it's not good</font><font color="#CCCCCC"> we also had</font><font color="#E5E5E5"> a</font>

23
00:01:25,320 --> 00:01:30,270
issue with<font color="#E5E5E5"> replication and</font>

24
00:01:27,600 --> 00:01:32,339
<font color="#CCCCCC">reconstitution process in Swift for</font>

25
00:01:30,270 --> 00:01:34,470
example if you replace failing hard

26
00:01:32,340 --> 00:01:40,470
drive you need<font color="#CCCCCC"> to rebuild</font><font color="#E5E5E5"> the data on it</font>

27
00:01:34,470 --> 00:01:43,259
<font color="#E5E5E5">and it was very very</font><font color="#CCCCCC"> slow</font><font color="#E5E5E5"> and finally we</font>

28
00:01:40,470 --> 00:01:46,740
observed<font color="#CCCCCC"> that our</font><font color="#E5E5E5"> disk</font>

29
00:01:43,260 --> 00:01:49,260
we're<font color="#E5E5E5"> always 100% busy which if you</font>

30
00:01:46,740 --> 00:01:56,160
think<font color="#E5E5E5"> of it is the root</font><font color="#CCCCCC"> cause of the to</font>

31
00:01:49,260 --> 00:01:59,220
point right<font color="#CCCCCC"> about</font><font color="#E5E5E5"> so first of all</font><font color="#CCCCCC"> I'm</font>

32
00:01:56,160 --> 00:02:01,080
gonna explain quickly<font color="#E5E5E5"> how data are</font>

33
00:01:59,220 --> 00:02:03,240
stored in a swift cluster<font color="#E5E5E5"> there's two</font>

34
00:02:01,080 --> 00:02:05,250
way of storing data<font color="#E5E5E5"> in</font><font color="#CCCCCC"> suit cluster the</font>

35
00:02:03,240 --> 00:02:08,429
first one is replication and<font color="#CCCCCC"> the second</font>

36
00:02:05,250 --> 00:02:10,709
one<font color="#CCCCCC"> ahead of coding replication it's</font>

37
00:02:08,429 --> 00:02:13,170
pretty simple<font color="#E5E5E5"> it's like a red one</font><font color="#CCCCCC"> on</font>

38
00:02:10,709 --> 00:02:16,409
<font color="#CCCCCC">your servers if you upload the one</font>

39
00:02:13,170 --> 00:02:17,679
object<font color="#E5E5E5"> in this example 6 byte is going</font>

40
00:02:16,409 --> 00:02:21,608
to be written<font color="#E5E5E5"> multiple</font>

41
00:02:17,680 --> 00:02:24,400
times in your<font color="#E5E5E5"> cluster on the top</font><font color="#CCCCCC"> I show</font>

42
00:02:21,609 --> 00:02:28,060
an<font color="#CCCCCC"> example</font><font color="#E5E5E5"> of the way data are stored</font><font color="#CCCCCC"> on</font>

43
00:02:24,400 --> 00:02:31,870
your<font color="#E5E5E5"> server</font><font color="#CCCCCC"> Swift store object on the</font>

44
00:02:28,060 --> 00:02:33,849
file<font color="#E5E5E5"> in an</font><font color="#CCCCCC"> XFS</font><font color="#E5E5E5"> file system</font><font color="#CCCCCC"> I mean XFS is</font>

45
00:02:31,870 --> 00:02:38,019
the recommended file system it can work

46
00:02:33,849 --> 00:02:40,179
with some others<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> part is a</font>

47
00:02:38,019 --> 00:02:42,969
moon point<font color="#E5E5E5"> so it's all under a serving</font>

48
00:02:40,180 --> 00:02:45,670
node and the device<font color="#E5E5E5"> and after that</font>

49
00:02:42,969 --> 00:02:47,230
starting from<font color="#E5E5E5"> the from the right the</font>

50
00:02:45,670 --> 00:02:49,358
<font color="#E5E5E5">fine name is based on the time prompt</font>

51
00:02:47,230 --> 00:02:52,590
which is the time<font color="#E5E5E5"> stone when you upload</font>

52
00:02:49,359 --> 00:02:54,909
it the<font color="#CCCCCC"> object after that you have a hash</font>

53
00:02:52,590 --> 00:02:57,909
which is kind of an ID of the object

54
00:02:54,909 --> 00:03:00,638
<font color="#CCCCCC">it's based on the others on the name of</font>

55
00:02:57,909 --> 00:03:03,939
<font color="#E5E5E5">the object</font><font color="#CCCCCC"> and some other information</font><font color="#E5E5E5"> or</font>

56
00:03:00,639 --> 00:03:07,930
content container and you have a<font color="#CCCCCC"> slope</font>

57
00:03:03,939 --> 00:03:11,828
partition and suffix which are derivated

58
00:03:07,930 --> 00:03:15,310
from the hash for<font color="#E5E5E5"> those of you that</font>

59
00:03:11,829 --> 00:03:19,480
knows<font color="#CCCCCC"> SEF</font><font color="#E5E5E5"> a partition is like</font><font color="#CCCCCC"> plasmon</font>

60
00:03:15,310 --> 00:03:22,169
group and suffix is just a part<font color="#E5E5E5"> of the</font>

61
00:03:19,480 --> 00:03:24,638
partition so this is the first<font color="#E5E5E5"> way</font>

62
00:03:22,169 --> 00:03:27,459
<font color="#E5E5E5">replication like red one the second one</font>

63
00:03:24,639 --> 00:03:30,250
and<font color="#CCCCCC"> recording is like a red</font><font color="#E5E5E5"> five when</font>

64
00:03:27,459 --> 00:03:32,379
you<font color="#E5E5E5"> upload an object</font><font color="#CCCCCC"> saves the same</font>

65
00:03:30,250 --> 00:03:35,979
example<font color="#CCCCCC"> with</font><font color="#E5E5E5"> six byte is going to be</font>

66
00:03:32,379 --> 00:03:37,929
split<font color="#E5E5E5"> in</font><font color="#CCCCCC"> fragment and to have the</font>

67
00:03:35,979 --> 00:03:40,689
<font color="#E5E5E5">redundancy that</font><font color="#CCCCCC"> you are expected from</font>

68
00:03:37,930 --> 00:03:44,470
your sweet cluster we will add another

69
00:03:40,689 --> 00:03:46,060
fragment which is<font color="#E5E5E5"> a parity fragment so</font>

70
00:03:44,470 --> 00:03:49,329
in this example there is three data

71
00:03:46,060 --> 00:03:52,650
fragment<font color="#E5E5E5"> and one parity fragment we can</font>

72
00:03:49,329 --> 00:03:56,229
choose<font color="#CCCCCC"> the number</font><font color="#E5E5E5"> you want</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> production</font>

73
00:03:52,650 --> 00:03:58,209
we run with<font color="#E5E5E5"> twelve at all eh I mean we</font>

74
00:03:56,229 --> 00:04:01,900
<font color="#E5E5E5">went with</font><font color="#CCCCCC"> twelve data fragments and</font>

75
00:03:58,209 --> 00:04:05,199
three parity<font color="#E5E5E5"> fragments so a quick</font>

76
00:04:01,900 --> 00:04:07,930
comparison with<font color="#E5E5E5"> replicas</font><font color="#CCCCCC"> you will get</font>

77
00:04:05,199 --> 00:04:10,389
the<font color="#E5E5E5"> performance because</font><font color="#CCCCCC"> you need only</font>

78
00:04:07,930 --> 00:04:12,519
<font color="#E5E5E5">one connection to access to your data on</font>

79
00:04:10,389 --> 00:04:14,560
<font color="#E5E5E5">the object server</font><font color="#CCCCCC"> but if you have</font>

80
00:04:12,519 --> 00:04:17,108
multiple<font color="#CCCCCC"> replicas you can open many</font>

81
00:04:14,560 --> 00:04:19,899
connections to many<font color="#E5E5E5"> servers but you will</font>

82
00:04:17,108 --> 00:04:21,789
get the<font color="#E5E5E5"> overhead</font><font color="#CCCCCC"> for example if you if</font>

83
00:04:19,899 --> 00:04:25,739
you have three replicas<font color="#E5E5E5"> you</font><font color="#CCCCCC"> will store</font>

84
00:04:21,789 --> 00:04:28,000
<font color="#CCCCCC">twelve byte for one object</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> four bytes</font>

85
00:04:25,740 --> 00:04:30,520
while<font color="#CCCCCC"> a recycling it's</font><font color="#E5E5E5"> cost-effective</font>

86
00:04:28,000 --> 00:04:31,470
but it's kind of slow<font color="#E5E5E5"> because</font><font color="#CCCCCC"> you need</font>

87
00:04:30,520 --> 00:04:35,219
to<font color="#CCCCCC"> open</font><font color="#E5E5E5"> many connect</font>

88
00:04:31,470 --> 00:04:40,440
and then do the mathematical version<font color="#E5E5E5"> to</font>

89
00:04:35,220 --> 00:04:43,260
rebuild the object on<font color="#E5E5E5"> our production we</font>

90
00:04:40,440 --> 00:04:45,780
<font color="#CCCCCC">have three replicas and</font><font color="#E5E5E5"> twelve three</font>

91
00:04:43,260 --> 00:04:48,000
three fragments<font color="#E5E5E5"> as I told you before so</font>

92
00:04:45,780 --> 00:04:51,239
it means that<font color="#E5E5E5"> on the cluster for Rebecca</font>

93
00:04:48,000 --> 00:04:53,940
we have three<font color="#E5E5E5"> files per object while</font>

94
00:04:51,240 --> 00:04:56,910
with a record<font color="#E5E5E5"> we have 15 files per</font>

95
00:04:53,940 --> 00:05:00,480
object<font color="#E5E5E5"> so there is already you see a</font>

96
00:04:56,910 --> 00:05:04,650
difference<font color="#CCCCCC"> five times more files</font><font color="#E5E5E5"> when</font>

97
00:05:00,480 --> 00:05:07,380
using<font color="#E5E5E5"> error code and this is where we</font>

98
00:05:04,650 --> 00:05:12,210
<font color="#E5E5E5">will</font><font color="#CCCCCC"> be talking about</font><font color="#E5E5E5"> I note on</font>

99
00:05:07,380 --> 00:05:15,980
<font color="#CCCCCC">XFS every file</font><font color="#E5E5E5"> I mean</font><font color="#CCCCCC"> XFS but almost all</font>

100
00:05:12,210 --> 00:05:20,460
five systems one file means one I know

101
00:05:15,980 --> 00:05:23,070
<font color="#E5E5E5">also</font><font color="#CCCCCC"> one directory</font><font color="#E5E5E5"> means one inode so if</font>

102
00:05:20,460 --> 00:05:26,310
you just think<font color="#CCCCCC"> back</font><font color="#E5E5E5"> to the way data are</font>

103
00:05:23,070 --> 00:05:28,830
stored on file system we have one<font color="#E5E5E5"> inode</font>

104
00:05:26,310 --> 00:05:31,650
for the file one inode for the object

105
00:05:28,830 --> 00:05:33,930
directory which was called<font color="#E5E5E5"> ash so in</font>

106
00:05:31,650 --> 00:05:37,049
<font color="#CCCCCC">replica we already have six inode per</font>

107
00:05:33,930 --> 00:05:40,970
object in the cluster<font color="#E5E5E5"> and in eraser code</font>

108
00:05:37,050 --> 00:05:44,040
we have<font color="#CCCCCC"> already 30</font><font color="#E5E5E5"> I know the project</font>

109
00:05:40,970 --> 00:05:46,020
<font color="#E5E5E5">and inode is very useful to</font><font color="#CCCCCC"> get back</font>

110
00:05:44,040 --> 00:05:48,270
your<font color="#E5E5E5"> data and contain some</font><font color="#CCCCCC"> information</font>

111
00:05:46,020 --> 00:05:50,969
like<font color="#E5E5E5"> the position</font><font color="#CCCCCC"> of the data on disk</font>

112
00:05:48,270 --> 00:05:53,130
<font color="#CCCCCC">but also all information you used to</font>

113
00:05:50,970 --> 00:05:56,070
manage when<font color="#E5E5E5"> you are on</font><font color="#CCCCCC"> your server like</font>

114
00:05:53,130 --> 00:05:58,169
<font color="#CCCCCC">creation/modification exists I'm</font><font color="#E5E5E5"> the</font>

115
00:05:56,070 --> 00:06:01,830
owner of<font color="#CCCCCC"> the file of</font><font color="#E5E5E5"> the directory the</font>

116
00:05:58,169 --> 00:06:05,520
<font color="#CCCCCC">permissions on it it</font><font color="#E5E5E5"> can be</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> CL quota</font>

117
00:06:01,830 --> 00:06:08,039
extended attribute a<font color="#E5E5E5"> lot of thing</font><font color="#CCCCCC"> the</font>

118
00:06:05,520 --> 00:06:10,919
thing is in Swift we don't need that<font color="#CCCCCC"> I</font>

119
00:06:08,040 --> 00:06:14,040
mean we<font color="#E5E5E5"> already have the creation time</font>

120
00:06:10,919 --> 00:06:16,080
it's in<font color="#E5E5E5"> the file name the owner is going</font>

121
00:06:14,040 --> 00:06:18,720
<font color="#E5E5E5">to be the</font><font color="#CCCCCC"> Swift process and the</font>

122
00:06:16,080 --> 00:06:20,849
<font color="#E5E5E5">permission well there is no permission</font>

123
00:06:18,720 --> 00:06:23,760
<font color="#E5E5E5">in Swift</font><font color="#CCCCCC"> I mean not at the file system</font>

124
00:06:20,850 --> 00:06:27,890
level there is<font color="#E5E5E5"> permission</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> way but</font>

125
00:06:23,760 --> 00:06:27,890
<font color="#E5E5E5">not here</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> we don't really need this</font>

126
00:06:28,550 --> 00:06:34,860
<font color="#CCCCCC">but we have a ratify node and this is</font>

127
00:06:31,440 --> 00:06:39,180
where we are<font color="#CCCCCC"> starting to have</font><font color="#E5E5E5"> issues one</font>

128
00:06:34,860 --> 00:06:41,820
inode with<font color="#CCCCCC"> XFS takes about 30 300 bytes</font>

129
00:06:39,180 --> 00:06:43,240
to<font color="#CCCCCC"> 1 kilobyte of memory when it's</font><font color="#E5E5E5"> in the</font>

130
00:06:41,820 --> 00:06:47,380
cache

131
00:06:43,240 --> 00:06:50,050
we have an average<font color="#E5E5E5"> of 2.4 inodes per</font>

132
00:06:47,380 --> 00:06:52,030
object<font color="#E5E5E5"> or fragment we have one for the</font>

133
00:06:50,050 --> 00:06:54,340
data file<font color="#E5E5E5"> one for the object directory</font>

134
00:06:52,030 --> 00:06:58,809
<font color="#E5E5E5">and with the partition and</font><font color="#CCCCCC"> say fixed</font>

135
00:06:54,340 --> 00:07:01,299
directory<font color="#E5E5E5"> it count for about 0.4 so our</font>

136
00:06:58,810 --> 00:07:04,680
pollution servers are running 64

137
00:07:01,300 --> 00:07:08,889
gigabyte of memory<font color="#E5E5E5"> we have 36</font><font color="#CCCCCC"> disk</font><font color="#E5E5E5"> and</font>

138
00:07:04,680 --> 00:07:13,270
on each disk<font color="#CCCCCC"> we have 17 million ah</font>

139
00:07:08,889 --> 00:07:15,940
<font color="#E5E5E5">finally</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> didn't let you 70 million yeah</font>

140
00:07:13,270 --> 00:07:18,008
<font color="#CCCCCC">I'll let you do the</font><font color="#E5E5E5"> calculation but it</font>

141
00:07:15,940 --> 00:07:22,199
does not fit in 64 gigabyte of memory

142
00:07:18,009 --> 00:07:26,680
for sure<font color="#E5E5E5"> more like</font><font color="#CCCCCC"> 1 terabyte even more</font>

143
00:07:22,199 --> 00:07:28,479
<font color="#E5E5E5">and we didn't want to buy such amount of</font>

144
00:07:26,680 --> 00:07:33,550
memory<font color="#CCCCCC"> we have thousands of server it</font>

145
00:07:28,479 --> 00:07:36,340
would cost so<font color="#E5E5E5"> many money so yeah we have</font>

146
00:07:33,550 --> 00:07:39,550
memory issues<font color="#E5E5E5"> the inode cannot fit in</font>

147
00:07:36,340 --> 00:07:41,849
the memory<font color="#E5E5E5"> but the thing is when you try</font>

148
00:07:39,550 --> 00:07:45,099
to access a file you need<font color="#CCCCCC"> to access</font>

149
00:07:41,849 --> 00:07:47,500
every inode of every part<font color="#E5E5E5"> of the path</font>

150
00:07:45,099 --> 00:07:53,830
<font color="#CCCCCC">just to check for example</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> patch the</font>

151
00:07:47,500 --> 00:07:55,900
permission so we only had the<font color="#E5E5E5"> top-level</font>

152
00:07:53,830 --> 00:07:59,919
directories that<font color="#E5E5E5"> we are fitting in the</font>

153
00:07:55,900 --> 00:08:04,750
inode cache which is<font color="#E5E5E5"> when</font><font color="#CCCCCC"> we looked at</font>

154
00:07:59,919 --> 00:08:06,370
the<font color="#CCCCCC"> XFS that only 20% of the inode</font>

155
00:08:04,750 --> 00:08:09,699
access we're eating the cache

156
00:08:06,370 --> 00:08:12,880
it means 80%<font color="#CCCCCC"> were going to fetch data</font>

157
00:08:09,699 --> 00:08:16,599
<font color="#CCCCCC">from disk and fetching data</font><font color="#E5E5E5"> from disk</font>

158
00:08:12,880 --> 00:08:20,590
<font color="#CCCCCC">well it's an eye ops</font><font color="#E5E5E5"> one of many cups so</font>

159
00:08:16,599 --> 00:08:23,530
we had half of<font color="#E5E5E5"> the device lab</font><font color="#CCCCCC"> capacity</font>

160
00:08:20,590 --> 00:08:26,320
only<font color="#E5E5E5"> used to fetch</font><font color="#CCCCCC"> inal from disk</font><font color="#E5E5E5"> it's</font>

161
00:08:23,530 --> 00:08:28,030
not what we are expecting the user want

162
00:08:26,320 --> 00:08:31,870
the data it doesn't<font color="#E5E5E5"> care</font><font color="#CCCCCC"> about the inode</font>

163
00:08:28,030 --> 00:08:37,208
so yeah it's slow<font color="#CCCCCC"> really slow but we</font>

164
00:08:31,870 --> 00:08:41,380
also<font color="#E5E5E5"> had some stability issues to be</font>

165
00:08:37,208 --> 00:08:44,078
fair it was on older kernel<font color="#E5E5E5"> at the time</font>

166
00:08:41,380 --> 00:08:46,810
we were running 314<font color="#E5E5E5"> since then it</font>

167
00:08:44,078 --> 00:08:51,010
improved<font color="#E5E5E5"> but we had a lot</font><font color="#CCCCCC"> of filesystem</font>

168
00:08:46,810 --> 00:08:52,989
corruptions<font color="#CCCCCC"> and we were totally unable</font>

169
00:08:51,010 --> 00:08:55,689
to repair them on the production server

170
00:08:52,990 --> 00:08:56,760
<font color="#E5E5E5">because when you run</font><font color="#CCCCCC"> XFS repair it</font>

171
00:08:55,690 --> 00:09:00,990
allocate<font color="#E5E5E5"> one</font>

172
00:08:56,760 --> 00:09:03,600
<font color="#CCCCCC">a byte of memory bear</font><font color="#E5E5E5"> I know so</font><font color="#CCCCCC"> XFS</font>

173
00:09:00,990 --> 00:09:06,570
<font color="#E5E5E5">rupiah couldn't not bring on 64 gigabyte</font>

174
00:09:03,600 --> 00:09:09,180
of memory<font color="#E5E5E5"> and we have production so the</font>

175
00:09:06,570 --> 00:09:12,150
memory is used by other process than<font color="#CCCCCC"> XSS</font>

176
00:09:09,180 --> 00:09:15,000
rebound<font color="#CCCCCC"> so we had</font><font color="#E5E5E5"> just one server with a</font>

177
00:09:12,150 --> 00:09:16,620
lot of<font color="#E5E5E5"> memory just to run XSS repair we</font>

178
00:09:15,000 --> 00:09:18,900
used to take<font color="#E5E5E5"> the disk</font><font color="#CCCCCC"> put them</font><font color="#E5E5E5"> in the</font>

179
00:09:16,620 --> 00:09:21,390
server run<font color="#CCCCCC"> XFS repair and put the disk</font>

180
00:09:18,900 --> 00:09:28,740
back to production<font color="#E5E5E5"> and one</font><font color="#CCCCCC"> XFS repair</font>

181
00:09:21,390 --> 00:09:31,410
<font color="#CCCCCC">work was taking</font><font color="#E5E5E5"> about two days to run so</font>

182
00:09:28,740 --> 00:09:33,750
yeah we have an issue<font color="#E5E5E5"> good news is Swift</font>

183
00:09:31,410 --> 00:09:36,810
is open source so hey why not<font color="#E5E5E5"> we will</font>

184
00:09:33,750 --> 00:09:40,500
fix it<font color="#E5E5E5"> we don't need I not we need data</font>

185
00:09:36,810 --> 00:09:44,069
<font color="#CCCCCC">that's all so we tried a lot of things a</font>

186
00:09:40,500 --> 00:09:46,320
lot<font color="#E5E5E5"> of crazy things</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> before</font>

187
00:09:44,070 --> 00:09:48,660
<font color="#E5E5E5">finding the right solution</font><font color="#CCCCCC"> first of</font><font color="#E5E5E5"> all</font>

188
00:09:46,320 --> 00:09:52,740
we thought of storing objects in<font color="#E5E5E5"> a key</font>

189
00:09:48,660 --> 00:09:54,900
value<font color="#E5E5E5"> store like rocks DB level DB we</font>

190
00:09:52,740 --> 00:09:58,080
quickly<font color="#E5E5E5"> find out it was not well suited</font>

191
00:09:54,900 --> 00:10:02,310
<font color="#E5E5E5">because first we will need synchronous</font>

192
00:09:58,080 --> 00:10:04,110
<font color="#CCCCCC">i/o ops IO</font><font color="#E5E5E5"> sorry and with this kind of</font>

193
00:10:02,310 --> 00:10:06,900
<font color="#CCCCCC">solution</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> is what is called write</font>

194
00:10:04,110 --> 00:10:09,330
amplification<font color="#E5E5E5"> it</font><font color="#CCCCCC"> write more</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> more</font>

195
00:10:06,900 --> 00:10:13,350
data than just<font color="#E5E5E5"> what</font><font color="#CCCCCC"> you try</font><font color="#E5E5E5"> to put</font>

196
00:10:09,330 --> 00:10:16,560
inside<font color="#E5E5E5"> the key value so no not a good</font>

197
00:10:13,350 --> 00:10:19,290
<font color="#E5E5E5">idea</font><font color="#CCCCCC"> after that we we thought we could</font>

198
00:10:16,560 --> 00:10:22,199
store in a key<font color="#E5E5E5"> value store the file</font>

199
00:10:19,290 --> 00:10:25,620
under of<font color="#E5E5E5"> the data file a file under is</font>

200
00:10:22,200 --> 00:10:28,560
like a direct access<font color="#CCCCCC"> to the inode</font><font color="#E5E5E5"> of the</font>

201
00:10:25,620 --> 00:10:31,590
<font color="#E5E5E5">file without needing to check every</font>

202
00:10:28,560 --> 00:10:34,020
inode of every part of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> path it's</font>

203
00:10:31,590 --> 00:10:36,420
like a unique ID on the file<font color="#CCCCCC"> system</font><font color="#E5E5E5"> so</font>

204
00:10:34,020 --> 00:10:39,360
we could<font color="#E5E5E5"> take it and</font><font color="#CCCCCC"> access directly so</font>

205
00:10:36,420 --> 00:10:42,300
I know<font color="#E5E5E5"> that the data file</font><font color="#CCCCCC"> in terms of</font>

206
00:10:39,360 --> 00:10:44,400
<font color="#E5E5E5">performance it's quite good</font><font color="#CCCCCC"> but the</font>

207
00:10:42,300 --> 00:10:47,219
issue<font color="#CCCCCC"> is that we have</font><font color="#E5E5E5"> the file system</font>

208
00:10:44,400 --> 00:10:49,110
which has its own<font color="#E5E5E5"> structure and we have</font>

209
00:10:47,220 --> 00:10:51,450
this key value and it was really

210
00:10:49,110 --> 00:10:54,240
<font color="#CCCCCC">complicated</font><font color="#E5E5E5"> to keep them in sync</font><font color="#CCCCCC"> in case</font>

211
00:10:51,450 --> 00:10:56,430
<font color="#E5E5E5">of a crash</font><font color="#CCCCCC"> fit on</font><font color="#E5E5E5"> top what do we do if</font>

212
00:10:54,240 --> 00:10:59,640
after creating<font color="#E5E5E5"> a file it crashed right</font>

213
00:10:56,430 --> 00:11:04,199
before we<font color="#CCCCCC"> put it in the key light so we</font>

214
00:10:59,640 --> 00:11:07,449
couldn't follow this society<font color="#CCCCCC"> so we</font>

215
00:11:04,200 --> 00:11:10,210
<font color="#CCCCCC">thought a we will patch</font><font color="#E5E5E5"> XSS</font>

216
00:11:07,450 --> 00:11:12,580
well they did a pretty<font color="#E5E5E5"> good job it's</font>

217
00:11:10,210 --> 00:11:16,300
already well optimized<font color="#E5E5E5"> there</font><font color="#CCCCCC"> there were</font>

218
00:11:12,580 --> 00:11:19,390
not<font color="#E5E5E5"> a lot to to save here</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we also</font>

219
00:11:16,300 --> 00:11:21,640
looked at the<font color="#E5E5E5"> ZFS which is based on</font><font color="#CCCCCC"> a</font>

220
00:11:19,390 --> 00:11:24,040
layer called<font color="#E5E5E5"> D mu which is actually an</font>

221
00:11:21,640 --> 00:11:27,460
object store<font color="#E5E5E5"> so we thought we could put</font>

222
00:11:24,040 --> 00:11:30,880
our object<font color="#E5E5E5"> in this object store</font><font color="#CCCCCC"> the</font>

223
00:11:27,460 --> 00:11:33,910
thing is<font color="#E5E5E5"> it will bring us a lot</font><font color="#CCCCCC"> of cool</font>

224
00:11:30,880 --> 00:11:36,250
features<font color="#E5E5E5"> nice snapshot cloning object</font>

225
00:11:33,910 --> 00:11:38,890
<font color="#E5E5E5">stuff like that</font><font color="#CCCCCC"> but it would have</font>

226
00:11:36,250 --> 00:11:42,070
performance issues<font color="#E5E5E5"> if the fact is 10 get</font>

227
00:11:38,890 --> 00:11:46,000
<font color="#E5E5E5">full this</font><font color="#CCCCCC"> is a this is a well no issue</font>

228
00:11:42,070 --> 00:11:48,310
on<font color="#E5E5E5"> the FS file system and also it was</font>

229
00:11:46,000 --> 00:11:51,250
<font color="#CCCCCC">really low-level development there is</font><font color="#E5E5E5"> no</font>

230
00:11:48,310 --> 00:11:54,040
API<font color="#CCCCCC"> table API on the FS so it</font><font color="#E5E5E5"> means it</font>

231
00:11:51,250 --> 00:11:59,470
could break it<font color="#E5E5E5"> and your grade mostly so</font>

232
00:11:54,040 --> 00:12:02,650
we decided<font color="#CCCCCC"> not to follow on</font><font color="#E5E5E5"> this idea</font><font color="#CCCCCC"> so</font>

233
00:11:59,470 --> 00:12:08,910
we thought we don't need<font color="#CCCCCC"> I not</font>

234
00:12:02,650 --> 00:12:13,600
we don't need file<font color="#E5E5E5"> so what do we do so</font>

235
00:12:08,910 --> 00:12:17,589
one obvious idea if you want<font color="#CCCCCC"> to have</font>

236
00:12:13,600 --> 00:12:19,990
less<font color="#E5E5E5"> I</font><font color="#CCCCCC"> note so if you want less I</font><font color="#E5E5E5"> note</font>

237
00:12:17,590 --> 00:12:23,850
you<font color="#CCCCCC"> should have less files so we ended</font>

238
00:12:19,990 --> 00:12:26,740
up<font color="#E5E5E5"> doing this where we store objects</font>

239
00:12:23,850 --> 00:12:28,660
continuously in larger file so you can

240
00:12:26,740 --> 00:12:30,760
<font color="#E5E5E5">see we have a small object header with a</font>

241
00:12:28,660 --> 00:12:34,540
<font color="#E5E5E5">file name and metadata</font><font color="#CCCCCC"> information and</font>

242
00:12:30,760 --> 00:12:39,430
then the actual in green<font color="#E5E5E5"> the actual file</font>

243
00:12:34,540 --> 00:12:42,699
content so this large file we will call

244
00:12:39,430 --> 00:12:44,859
them volumes from<font color="#CCCCCC"> now on but they are</font>

245
00:12:42,700 --> 00:12:47,980
just<font color="#E5E5E5"> regular file on an</font><font color="#CCCCCC"> exercise</font><font color="#E5E5E5"> file</font>

246
00:12:44,860 --> 00:12:51,250
system nothing special about them<font color="#E5E5E5"> except</font>

247
00:12:47,980 --> 00:12:54,910
that they will be larger so<font color="#E5E5E5"> let's see</font>

248
00:12:51,250 --> 00:12:57,900
how we work with this volume<font color="#E5E5E5"> is</font>

249
00:12:54,910 --> 00:13:00,790
dedicated to a partition and<font color="#CCCCCC"> I mean</font>

250
00:12:57,900 --> 00:13:04,660
<font color="#CCCCCC">Swift partition like Rama said something</font>

251
00:13:00,790 --> 00:13:10,110
<font color="#E5E5E5">like</font><font color="#CCCCCC"> so safe</font><font color="#E5E5E5"> partition</font><font color="#CCCCCC"> based on group</font>

252
00:13:04,660 --> 00:13:14,050
but so Swift partition<font color="#E5E5E5"> we only ever</font>

253
00:13:10,110 --> 00:13:16,660
append data to a volume we write new

254
00:13:14,050 --> 00:13:18,969
<font color="#E5E5E5">object at the</font><font color="#CCCCCC"> end and we never ever</font>

255
00:13:16,660 --> 00:13:22,719
of<font color="#E5E5E5"> the right anything so it's kind of</font>

256
00:13:18,970 --> 00:13:26,850
<font color="#E5E5E5">like a journal</font><font color="#CCCCCC"> and because</font><font color="#E5E5E5"> it's happened</font>

257
00:13:22,720 --> 00:13:31,120
only you cannot write concurrently<font color="#CCCCCC"> to it</font>

258
00:13:26,850 --> 00:13:34,450
<font color="#CCCCCC">if you do need on</font><font color="#E5E5E5"> one server to write at</font>

259
00:13:31,120 --> 00:13:35,740
the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> time two objects that</font><font color="#E5E5E5"> should go</font>

260
00:13:34,450 --> 00:13:38,620
to the<font color="#E5E5E5"> same partitions and you will</font>

261
00:13:35,740 --> 00:13:42,600
write to<font color="#E5E5E5"> two distinct volume two</font>

262
00:13:38,620 --> 00:13:47,020
<font color="#E5E5E5">distinct files so that's the basic idea</font>

263
00:13:42,600 --> 00:13:51,220
<font color="#E5E5E5">before</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> dig further I want to remind</font>

264
00:13:47,020 --> 00:13:52,930
you very quickly<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> Swift how</font>

265
00:13:51,220 --> 00:13:55,510
swift works<font color="#E5E5E5"> without talking about</font>

266
00:13:52,930 --> 00:13:57,550
<font color="#E5E5E5">authentication or</font><font color="#CCCCCC"> continuous servers I</font>

267
00:13:55,510 --> 00:13:59,710
just wanted<font color="#E5E5E5"> to say that you cannot</font>

268
00:13:57,550 --> 00:14:02,410
contact<font color="#E5E5E5"> the object servers directly your</font>

269
00:13:59,710 --> 00:14:05,230
request will go to one proxy server

270
00:14:02,410 --> 00:14:08,319
which<font color="#CCCCCC"> will take in this example</font><font color="#E5E5E5"> send</font>

271
00:14:05,230 --> 00:14:11,350
<font color="#E5E5E5">three copies of your data to three</font>

272
00:14:08,320 --> 00:14:13,990
different object servers<font color="#E5E5E5"> and if you need</font>

273
00:14:11,350 --> 00:14:16,660
<font color="#E5E5E5">to get your data back so proxy server</font>

274
00:14:13,990 --> 00:14:21,070
will get your object from<font color="#E5E5E5"> either one of</font>

275
00:14:16,660 --> 00:14:24,430
these three our patch<font color="#CCCCCC"> or work with</font><font color="#E5E5E5"> this</font>

276
00:14:21,070 --> 00:14:29,380
is<font color="#E5E5E5"> only on the object server we didn't</font>

277
00:14:24,430 --> 00:14:32,829
touch any other<font color="#E5E5E5"> swift code so how does</font>

278
00:14:29,380 --> 00:14:35,680
<font color="#CCCCCC">Swift organize data on the object server</font>

279
00:14:32,830 --> 00:14:39,250
so<font color="#CCCCCC"> Hamid touched on this earlier when</font>

280
00:14:35,680 --> 00:14:42,790
<font color="#E5E5E5">you send an object so I simplify this a</font>

281
00:14:39,250 --> 00:14:45,670
bit but we<font color="#E5E5E5"> Swift will calculate the hash</font>

282
00:14:42,790 --> 00:14:48,310
based on the<font color="#CCCCCC"> file name</font><font color="#E5E5E5"> and other a few</font>

283
00:14:45,670 --> 00:14:53,020
<font color="#E5E5E5">other</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> so you get the object hash</font>

284
00:14:48,310 --> 00:14:56,290
<font color="#E5E5E5">its ID in the cluster from the hash you</font>

285
00:14:53,020 --> 00:14:59,920
will compute<font color="#CCCCCC"> the partition</font><font color="#E5E5E5"> so how do you</font>

286
00:14:56,290 --> 00:15:02,709
do<font color="#E5E5E5"> that you will take a few bits from</font>

287
00:14:59,920 --> 00:15:04,810
<font color="#CCCCCC">the beginning of the of the hash such</font>

288
00:15:02,710 --> 00:15:06,850
<font color="#CCCCCC">operators are configurable</font><font color="#E5E5E5"> and you will</font>

289
00:15:04,810 --> 00:15:09,010
interpret these<font color="#E5E5E5"> bits as an integer and</font>

290
00:15:06,850 --> 00:15:11,110
<font color="#CCCCCC">that gives you</font><font color="#E5E5E5"> the partition so that's</font>

291
00:15:09,010 --> 00:15:14,260
really important because the Swift

292
00:15:11,110 --> 00:15:16,480
topology topology is described by the

293
00:15:14,260 --> 00:15:18,490
ring and the ring will tell you that

294
00:15:16,480 --> 00:15:22,330
this partition goes to this and this and

295
00:15:18,490 --> 00:15:25,850
this<font color="#E5E5E5"> object server so we</font><font color="#CCCCCC"> need then the</font>

296
00:15:22,330 --> 00:15:29,810
suffix just<font color="#CCCCCC"> to</font><font color="#E5E5E5"> three last</font>

297
00:15:25,850 --> 00:15:31,579
vectors of the md5<font color="#E5E5E5"> as</font><font color="#CCCCCC"> ASCII we see we'll</font>

298
00:15:29,810 --> 00:15:34,790
see<font color="#E5E5E5"> why we need this</font>

299
00:15:31,579 --> 00:15:37,638
and finally the<font color="#E5E5E5"> fight itself is named</font>

300
00:15:34,790 --> 00:15:44,599
with<font color="#CCCCCC"> timestamp which is the time where</font>

301
00:15:37,639 --> 00:15:46,310
<font color="#E5E5E5">you put data and the data extension so</font>

302
00:15:44,600 --> 00:15:48,440
eventually<font color="#E5E5E5"> we get this which</font><font color="#CCCCCC"> Alma showed</font>

303
00:15:46,310 --> 00:15:51,079
you<font color="#E5E5E5"> already saw the</font><font color="#CCCCCC"> objects is a root</font>

304
00:15:48,440 --> 00:15:54,490
directory containing all the<font color="#CCCCCC"> files for</font>

305
00:15:51,079 --> 00:15:57,138
<font color="#CCCCCC">that</font><font color="#E5E5E5"> given</font><font color="#CCCCCC"> Swift policy then the</font>

306
00:15:54,490 --> 00:15:59,449
partitioned directory so<font color="#CCCCCC"> Suffolk</font>

307
00:15:57,139 --> 00:16:01,730
directory here<font color="#E5E5E5"> is there so that</font><font color="#CCCCCC"> you</font>

308
00:15:59,449 --> 00:16:04,490
don't get too many directory entries

309
00:16:01,730 --> 00:16:06,410
right<font color="#E5E5E5"> below the partition so that's kind</font>

310
00:16:04,490 --> 00:16:09,610
<font color="#E5E5E5">of artificial to to avoid</font><font color="#CCCCCC"> having too</font>

311
00:16:06,410 --> 00:16:13,009
many and<font color="#E5E5E5"> Twitter</font><font color="#CCCCCC"> sends</font><font color="#E5E5E5"> the actual object</font>

312
00:16:09,610 --> 00:16:14,930
<font color="#CCCCCC">Hoshi</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> another directory and finally</font>

313
00:16:13,009 --> 00:16:17,899
we have our<font color="#E5E5E5"> file so you can see how this</font>

314
00:16:14,930 --> 00:16:21,519
may cause problem problems if you have

315
00:16:17,899 --> 00:16:24,290
many<font color="#E5E5E5"> many small files</font><font color="#CCCCCC"> too many entries</font>

316
00:16:21,519 --> 00:16:26,630
so how how<font color="#CCCCCC"> would that work with our</font><font color="#E5E5E5"> new</font>

317
00:16:24,290 --> 00:16:30,560
system<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can see here a new component</font>

318
00:16:26,630 --> 00:16:32,480
<font color="#E5E5E5">there the index server so actually it's</font>

319
00:16:30,560 --> 00:16:36,829
not<font color="#E5E5E5"> a new server</font><font color="#CCCCCC"> in the sense of a new</font>

320
00:16:32,480 --> 00:16:40,130
machine<font color="#E5E5E5"> it's a process that</font><font color="#CCCCCC"> will run on</font>

321
00:16:36,829 --> 00:16:42,019
<font color="#CCCCCC">the object server machine alongside</font>

322
00:16:40,130 --> 00:16:49,899
<font color="#E5E5E5">object server processes you will have</font>

323
00:16:42,019 --> 00:16:53,000
one index server<font color="#E5E5E5"> per disk per policy so</font>

324
00:16:49,899 --> 00:16:54,589
on the<font color="#CCCCCC"> Left it</font><font color="#E5E5E5"> doesn't change you come</font>

325
00:16:53,000 --> 00:16:56,810
with your data to the<font color="#E5E5E5"> proxy server which</font>

326
00:16:54,589 --> 00:16:59,060
<font color="#E5E5E5">will contact the object server and now</font>

327
00:16:56,810 --> 00:17:01,339
<font color="#E5E5E5">that's where the patch applies so</font>

328
00:16:59,060 --> 00:17:04,579
instead of<font color="#E5E5E5"> creating a single file it</font>

329
00:17:01,339 --> 00:17:09,490
will try to<font color="#E5E5E5"> find a volume available for</font>

330
00:17:04,579 --> 00:17:09,490
<font color="#CCCCCC">a different partition</font><font color="#E5E5E5"> and get right lock</font>

331
00:17:09,640 --> 00:17:14,689
right<font color="#E5E5E5"> data at</font><font color="#CCCCCC"> the end of the volume so</font>

332
00:17:13,339 --> 00:17:20,869
<font color="#CCCCCC">append-only</font>

333
00:17:14,689 --> 00:17:25,339
<font color="#E5E5E5">always sync data</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> actually F data</font>

334
00:17:20,869 --> 00:17:27,049
<font color="#E5E5E5">sync in that case and finally registers</font>

335
00:17:25,339 --> 00:17:30,530
the object in the index server so what

336
00:17:27,049 --> 00:17:33,139
do<font color="#E5E5E5"> I mean by</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> we wrote our file</font>

337
00:17:30,530 --> 00:17:36,020
<font color="#E5E5E5">somewhere in a volume we need to be</font><font color="#CCCCCC"> able</font>

338
00:17:33,140 --> 00:17:38,000
<font color="#CCCCCC">to quickly retrieve that location</font><font color="#E5E5E5"> later</font>

339
00:17:36,020 --> 00:17:40,160
<font color="#E5E5E5">so we</font>

340
00:17:38,000 --> 00:17:42,799
<font color="#CCCCCC">scent index servers the name of the</font>

341
00:17:40,160 --> 00:17:46,130
object<font color="#CCCCCC"> and its location</font><font color="#E5E5E5"> which is the</font>

342
00:17:42,799 --> 00:17:51,889
volume and the offset<font color="#E5E5E5"> where we can find</font>

343
00:17:46,130 --> 00:17:54,049
the object in that<font color="#E5E5E5"> volume if the volume</font>

344
00:17:51,890 --> 00:17:56,270
<font color="#E5E5E5">does not exist it will be created if</font>

345
00:17:54,049 --> 00:17:57,860
there's<font color="#E5E5E5"> only like one and another</font>

346
00:17:56,270 --> 00:18:04,010
<font color="#E5E5E5">process</font><font color="#CCCCCC"> writing we can create</font><font color="#E5E5E5"> another</font>

347
00:17:57,860 --> 00:18:05,750
<font color="#E5E5E5">one reading an object so that's easy the</font>

348
00:18:04,010 --> 00:18:09,080
proxy server again contacts<font color="#E5E5E5"> the object</font>

349
00:18:05,750 --> 00:18:13,250
server which will contact<font color="#CCCCCC"> index server</font>

350
00:18:09,080 --> 00:18:16,780
to retrieve the location of<font color="#E5E5E5"> our object</font>

351
00:18:13,250 --> 00:18:20,120
so we get the volume number<font color="#E5E5E5"> and the</font>

352
00:18:16,780 --> 00:18:28,760
<font color="#CCCCCC">offset within the volume and we</font><font color="#E5E5E5"> can then</font>

353
00:18:20,120 --> 00:18:33,350
just<font color="#E5E5E5"> read</font><font color="#CCCCCC"> chat so now we will zoom in on</font>

354
00:18:28,760 --> 00:18:38,440
that new index server component here so

355
00:18:33,350 --> 00:18:40,850
it's a<font color="#E5E5E5"> RPC server it's</font><font color="#CCCCCC"> returning</font><font color="#E5E5E5"> golang</font>

356
00:18:38,440 --> 00:18:44,270
again it runs alongside the object

357
00:18:40,850 --> 00:18:46,520
server<font color="#CCCCCC"> it's the same failure domain</font><font color="#E5E5E5"> so</font>

358
00:18:44,270 --> 00:18:48,830
it's on a single disk basically so if

359
00:18:46,520 --> 00:18:52,129
you have a machine with<font color="#E5E5E5"> 36 drives you</font>

360
00:18:48,830 --> 00:18:53,960
will get<font color="#E5E5E5"> several instances of that it</font>

361
00:18:52,130 --> 00:18:57,760
stores<font color="#E5E5E5"> data</font><font color="#CCCCCC"> in a key value</font><font color="#E5E5E5"> store we are</font>

362
00:18:53,960 --> 00:19:00,380
<font color="#CCCCCC">using</font><font color="#E5E5E5"> level</font><font color="#CCCCCC"> DB</font><font color="#E5E5E5"> there are two important</font>

363
00:18:57,760 --> 00:19:03,770
characteristic of level DB for us<font color="#E5E5E5"> the</font>

364
00:19:00,380 --> 00:19:05,600
<font color="#E5E5E5">first one is that it will other entries</font>

365
00:19:03,770 --> 00:19:07,639
based<font color="#E5E5E5"> on the key and that's really</font>

366
00:19:05,600 --> 00:19:08,149
important<font color="#E5E5E5"> for us we will see why in a</font>

367
00:19:07,640 --> 00:19:10,960
minute

368
00:19:08,150 --> 00:19:13,610
and the other interesting<font color="#CCCCCC"> property that</font>

369
00:19:10,960 --> 00:19:16,250
<font color="#E5E5E5">we use it with your snappy compression</font>

370
00:19:13,610 --> 00:19:18,770
algorithm so<font color="#CCCCCC"> it makes</font><font color="#E5E5E5"> for a small</font>

371
00:19:16,250 --> 00:19:21,679
<font color="#E5E5E5">database and we want that to remain in</font>

372
00:19:18,770 --> 00:19:24,260
<font color="#CCCCCC">memory we trust the system</font><font color="#E5E5E5"> to pay page</font>

373
00:19:21,679 --> 00:19:28,960
cache to keep it in memory<font color="#E5E5E5"> if it's small</font>

374
00:19:24,260 --> 00:19:32,320
enough so the key in that<font color="#E5E5E5"> system will be</font>

375
00:19:28,960 --> 00:19:36,710
competition<font color="#CCCCCC"> concatenation of two</font><font color="#E5E5E5"> string</font>

376
00:19:32,320 --> 00:19:39,408
the object hash and to<font color="#CCCCCC"> find name and the</font>

377
00:19:36,710 --> 00:19:42,110
<font color="#CCCCCC">value is the object location so again</font>

378
00:19:39,409 --> 00:19:45,049
<font color="#E5E5E5">the</font><font color="#CCCCCC"> volumen index because the volume</font>

379
00:19:42,110 --> 00:19:45,830
names<font color="#E5E5E5"> the volumes are named</font><font color="#CCCCCC"> with index</font>

380
00:19:45,049 --> 00:19:49,399
in them

381
00:19:45,830 --> 00:19:52,600
and the offset within the<font color="#E5E5E5"> volume so</font>

382
00:19:49,399 --> 00:19:58,428
let's take an example<font color="#E5E5E5"> here I</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> three</font>

383
00:19:52,600 --> 00:20:00,139
entries<font color="#CCCCCC"> in my data store so they are all</font>

384
00:19:58,429 --> 00:20:02,809
<font color="#E5E5E5">four different object on the</font><font color="#CCCCCC"> left side</font>

385
00:20:00,140 --> 00:20:08,120
in color you can see<font color="#CCCCCC"> the hash and</font><font color="#E5E5E5"> after</font>

386
00:20:02,809 --> 00:20:11,000
<font color="#E5E5E5">that you can see the file name so that's</font>

387
00:20:08,120 --> 00:20:13,580
enough to retrieve our object<font color="#E5E5E5"> this was</font>

388
00:20:11,000 --> 00:20:15,529
written when we you know<font color="#CCCCCC"> when we</font><font color="#E5E5E5"> did</font>

389
00:20:13,580 --> 00:20:17,449
write<font color="#CCCCCC"> to data and if you want to read it</font>

390
00:20:15,529 --> 00:20:19,580
<font color="#E5E5E5">again the object</font><font color="#CCCCCC"> server</font><font color="#E5E5E5"> the Python code</font>

391
00:20:17,450 --> 00:20:22,070
<font color="#CCCCCC">we contact the index server and</font><font color="#E5E5E5"> we press</font>

392
00:20:19,580 --> 00:20:25,220
<font color="#CCCCCC">it</font><font color="#E5E5E5"> I need the location for for this one</font>

393
00:20:22,070 --> 00:20:28,100
<font color="#E5E5E5">and I can open</font><font color="#CCCCCC"> it however that's</font><font color="#E5E5E5"> not</font>

394
00:20:25,220 --> 00:20:31,970
<font color="#E5E5E5">enough because it's reached does rely</font><font color="#CCCCCC"> on</font>

395
00:20:28,100 --> 00:20:33,469
<font color="#E5E5E5">the directory structures Allah showed</font>

396
00:20:31,970 --> 00:20:36,679
you with<font color="#CCCCCC"> the partition and suffix for</font>

397
00:20:33,470 --> 00:20:39,620
example some replication or<font color="#E5E5E5"> auditor job</font>

398
00:20:36,679 --> 00:20:43,039
will want to work an entire partition<font color="#E5E5E5"> or</font>

399
00:20:39,620 --> 00:20:47,139
a suffix within that partition<font color="#E5E5E5"> so and we</font>

400
00:20:43,039 --> 00:20:49,879
don't store them but we can compute them

401
00:20:47,139 --> 00:20:53,959
so for<font color="#E5E5E5"> example if I need to give a list</font>

402
00:20:49,880 --> 00:20:59,149
of partition to a<font color="#E5E5E5"> color</font><font color="#CCCCCC"> I can just take</font>

403
00:20:53,960 --> 00:21:04,360
the<font color="#E5E5E5"> first bits I mean I</font><font color="#CCCCCC"> will walk the</font>

404
00:20:59,149 --> 00:21:06,620
<font color="#CCCCCC">entire store and take the first</font><font color="#E5E5E5"> bit and</font>

405
00:21:04,360 --> 00:21:10,000
compute<font color="#CCCCCC"> the partition number</font><font color="#E5E5E5"> so you can</font>

406
00:21:06,620 --> 00:21:12,469
<font color="#CCCCCC">see that the first</font><font color="#E5E5E5"> two objects will be</font>

407
00:21:10,000 --> 00:21:15,830
<font color="#E5E5E5">are in the same partition</font><font color="#CCCCCC"> while</font><font color="#E5E5E5"> the</font>

408
00:21:12,470 --> 00:21:18,049
third one is is another partition<font color="#E5E5E5"> since</font>

409
00:21:15,830 --> 00:21:20,658
the suffix was that's easier<font color="#E5E5E5"> even we</font>

410
00:21:18,049 --> 00:21:23,918
just take the<font color="#E5E5E5"> three last character</font><font color="#CCCCCC"> of</font>

411
00:21:20,659 --> 00:21:28,299
the hash so we get that directory level

412
00:21:23,919 --> 00:21:32,419
<font color="#E5E5E5">below that you find the entire hash and</font>

413
00:21:28,299 --> 00:21:34,340
eventually<font color="#CCCCCC"> suffice themselves</font>

414
00:21:32,419 --> 00:21:37,399
that's works even<font color="#E5E5E5"> if you have multiple</font>

415
00:21:34,340 --> 00:21:40,340
<font color="#E5E5E5">files for example</font><font color="#CCCCCC"> in Swift if you are</font>

416
00:21:37,399 --> 00:21:45,918
going<font color="#CCCCCC"> to add metadata to an existing</font>

417
00:21:40,340 --> 00:21:49,279
object<font color="#CCCCCC"> you do a post</font><font color="#E5E5E5"> and that</font><font color="#CCCCCC"> will</font>

418
00:21:45,919 --> 00:21:51,200
translate<font color="#E5E5E5"> to a new meta file within the</font>

419
00:21:49,279 --> 00:21:55,429
directory<font color="#CCCCCC"> that works also with</font><font color="#E5E5E5"> this</font>

420
00:21:51,200 --> 00:21:56,389
scheme you will get<font color="#CCCCCC"> two file to fight in</font>

421
00:21:55,429 --> 00:22:00,619
the same

422
00:21:56,389 --> 00:22:05,779
so we can write Phi we can<font color="#CCCCCC"> get them we</font>

423
00:22:00,619 --> 00:22:07,698
can compute all these<font color="#CCCCCC"> destroy yaki let's</font>

424
00:22:05,779 --> 00:22:12,940
take<font color="#E5E5E5"> something missing sometimes</font><font color="#CCCCCC"> people</font>

425
00:22:07,699 --> 00:22:15,769
like to<font color="#E5E5E5"> delete their objects and so we</font>

426
00:22:12,940 --> 00:22:17,329
handle this<font color="#E5E5E5"> with</font><font color="#CCCCCC"> hole punching</font><font color="#E5E5E5"> so I</font>

427
00:22:15,769 --> 00:22:22,419
don't know if many of<font color="#E5E5E5"> you are familiar</font>

428
00:22:17,329 --> 00:22:25,879
<font color="#E5E5E5">with</font><font color="#CCCCCC"> the hole punching</font><font color="#E5E5E5"> no a few yeah so</font>

429
00:22:22,419 --> 00:22:29,899
it's the<font color="#CCCCCC"> idea is quite simple</font><font color="#E5E5E5"> it's a</font>

430
00:22:25,879 --> 00:22:33,139
great feat at some<font color="#CCCCCC"> file system manage to</font>

431
00:22:29,899 --> 00:22:34,879
to<font color="#E5E5E5"> offer so like</font><font color="#CCCCCC"> XFS does</font><font color="#E5E5E5"> and I think x4</font>

432
00:22:33,139 --> 00:22:37,309
and probably a few<font color="#E5E5E5"> others so how does</font>

433
00:22:34,879 --> 00:22:41,988
<font color="#E5E5E5">that</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> if you have a one megabyte</font>

434
00:22:37,309 --> 00:22:43,668
file with unrelated data inside you

435
00:22:41,989 --> 00:22:47,389
might decide that<font color="#E5E5E5"> you want to discard</font>

436
00:22:43,669 --> 00:22:50,869
<font color="#E5E5E5">some of that data from offset say 200 to</font>

437
00:22:47,389 --> 00:22:53,529
300<font color="#E5E5E5"> K I want to discard a hundred</font>

438
00:22:50,869 --> 00:22:57,228
kilobytes<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you can use a</font><font color="#E5E5E5"> system called</font>

439
00:22:53,529 --> 00:23:00,379
<font color="#E5E5E5">system call which is</font><font color="#CCCCCC"> F</font><font color="#E5E5E5"> allocate with</font>

440
00:22:57,229 --> 00:23:02,929
some parameters which will<font color="#E5E5E5"> take these</font>

441
00:23:00,379 --> 00:23:05,418
blocks within<font color="#E5E5E5"> your file and</font><font color="#CCCCCC"> freeze them</font>

442
00:23:02,929 --> 00:23:07,219
and<font color="#E5E5E5"> return them to the</font><font color="#CCCCCC"> filesystem so you</font>

443
00:23:05,419 --> 00:23:08,929
will see free space<font color="#CCCCCC"> go up in your</font>

444
00:23:07,219 --> 00:23:12,440
<font color="#E5E5E5">assistant and the great thing</font><font color="#CCCCCC"> is that</font>

445
00:23:08,929 --> 00:23:15,409
<font color="#E5E5E5">the the</font><font color="#CCCCCC"> file layout will not change the</font>

446
00:23:12,440 --> 00:23:18,319
file size if you do LS dash L you<font color="#CCCCCC"> will</font>

447
00:23:15,409 --> 00:23:20,149
still<font color="#CCCCCC"> see one megabyte</font><font color="#E5E5E5"> so all this</font>

448
00:23:18,319 --> 00:23:23,418
offset<font color="#E5E5E5"> that we stored in the index</font>

449
00:23:20,149 --> 00:23:27,139
servers<font color="#CCCCCC"> they</font><font color="#E5E5E5"> are correct they are still</font>

450
00:23:23,419 --> 00:23:28,789
correct<font color="#CCCCCC"> if you do D you you will see</font>

451
00:23:27,139 --> 00:23:32,359
nine hundred kilobytes<font color="#E5E5E5"> because</font><font color="#CCCCCC"> you've</font>

452
00:23:28,789 --> 00:23:36,829
<font color="#CCCCCC">read 100 so that might freak some</font><font color="#E5E5E5"> people</font>

453
00:23:32,359 --> 00:23:40,158
first it works really well<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that's</font>

454
00:23:36,829 --> 00:23:47,089
<font color="#CCCCCC">how we can afford who only ever append</font>

455
00:23:40,159 --> 00:23:49,039
<font color="#CCCCCC">two to five so if we apply that to the</font>

456
00:23:47,089 --> 00:23:51,109
layout we described<font color="#CCCCCC"> before whenever we</font>

457
00:23:49,039 --> 00:23:57,469
<font color="#E5E5E5">want to delete an object we just punch a</font>

458
00:23:51,109 --> 00:24:00,859
hole over<font color="#E5E5E5"> all this area one constraint</font>

459
00:23:57,469 --> 00:24:02,149
we set is that you<font color="#CCCCCC"> need to</font><font color="#E5E5E5"> for data to</font>

460
00:24:00,859 --> 00:24:05,468
be<font color="#CCCCCC"> written</font><font color="#E5E5E5"> to the file</font><font color="#CCCCCC"> system you need</font>

461
00:24:02,149 --> 00:24:08,729
<font color="#E5E5E5">to be aligned on four kilobyte</font>

462
00:24:05,469 --> 00:24:15,869
boundaries so we do align this

463
00:24:08,730 --> 00:24:19,109
beginning<font color="#CCCCCC"> a subject on 4k boundaries so</font>

464
00:24:15,869 --> 00:24:20,039
now<font color="#E5E5E5"> I would go back</font><font color="#CCCCCC"> to the Bison a</font>

465
00:24:19,109 --> 00:24:23,279
little bit

466
00:24:20,039 --> 00:24:26,999
the<font color="#CCCCCC"> Bison code so within the swift</font><font color="#E5E5E5"> code</font>

467
00:24:23,279 --> 00:24:29,820
we have not patched much<font color="#CCCCCC"> effects team</font>

468
00:24:26,999 --> 00:24:33,210
code some prerequisite patch<font color="#E5E5E5"> have been</font>

469
00:24:29,820 --> 00:24:37,109
merged upstream by the<font color="#E5E5E5"> Swift community</font>

470
00:24:33,210 --> 00:24:39,659
<font color="#E5E5E5">so now we can</font><font color="#CCCCCC"> have this live mostly</font>

471
00:24:37,109 --> 00:24:41,939
alongside existing<font color="#CCCCCC"> code so</font><font color="#E5E5E5"> it's new file</font>

472
00:24:39,659 --> 00:24:45,059
it's actually an alternate<font color="#E5E5E5"> disk file for</font>

473
00:24:41,940 --> 00:24:49,409
those<font color="#E5E5E5"> of you familiar with Swift</font><font color="#CCCCCC"> and it</font>

474
00:24:45,059 --> 00:24:52,080
relies on a v<font color="#E5E5E5"> / module that gives you</font><font color="#CCCCCC"> a</font>

475
00:24:49,409 --> 00:24:54,679
file like abstraction<font color="#CCCCCC"> to work with so</font>

476
00:24:52,080 --> 00:24:57,239
that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have to to patch so much</font>

477
00:24:54,679 --> 00:24:59,249
<font color="#E5E5E5">and it will communicate with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> index</font>

478
00:24:57,239 --> 00:25:06,269
server<font color="#E5E5E5"> remember it's running on the same</font>

479
00:24:59,249 --> 00:25:11,220
machine<font color="#E5E5E5"> over UNIX domain socket</font><font color="#CCCCCC"> quick</font>

480
00:25:06,269 --> 00:25:15,230
word about<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> file by module so</font>

481
00:25:11,220 --> 00:25:22,529
it's<font color="#E5E5E5"> yeah provides a file like interface</font>

482
00:25:15,230 --> 00:25:27,269
<font color="#E5E5E5">if you open if you open a file you</font><font color="#CCCCCC"> can</font>

483
00:25:22,529 --> 00:25:30,149
notice<font color="#CCCCCC"> here that the path is a regular</font>

484
00:25:27,269 --> 00:25:32,970
file system path<font color="#E5E5E5"> so you don't have to</font>

485
00:25:30,149 --> 00:25:36,529
modify swift code<font color="#E5E5E5"> but we need</font><font color="#CCCCCC"> these to</font>

486
00:25:32,970 --> 00:25:39,480
match the expected<font color="#CCCCCC"> layout if you try to</font>

487
00:25:36,529 --> 00:25:41,549
<font color="#CCCCCC">open or create</font><font color="#E5E5E5"> a file in</font><font color="#CCCCCC"> an arbitrary</font>

488
00:25:39,480 --> 00:25:43,080
path it will fail because<font color="#E5E5E5"> we</font><font color="#CCCCCC"> won't know</font>

489
00:25:41,549 --> 00:25:46,440
how to store<font color="#CCCCCC"> it and</font><font color="#E5E5E5"> we won't be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

490
00:25:43,080 --> 00:25:48,689
<font color="#CCCCCC">reconstruct some</font><font color="#E5E5E5"> directories but keeping</font>

491
00:25:46,440 --> 00:25:51,720
that means that we<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have to touch</font>

492
00:25:48,690 --> 00:25:55,499
much existing code<font color="#CCCCCC"> because if I go back</font>

493
00:25:51,720 --> 00:25:59,759
<font color="#E5E5E5">to here even this in this new code we</font>

494
00:25:55,499 --> 00:26:02,429
actually<font color="#E5E5E5"> base our Python classes on the</font>

495
00:25:59,759 --> 00:26:04,859
existing<font color="#CCCCCC"> this file code for</font><font color="#E5E5E5"> and we</font>

496
00:26:02,429 --> 00:26:09,059
<font color="#CCCCCC">overwrite only what we need so as little</font>

497
00:26:04,859 --> 00:26:10,850
<font color="#E5E5E5">as possible</font><font color="#CCCCCC"> so then once</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> your</font>

498
00:26:09,059 --> 00:26:15,720
file<font color="#E5E5E5"> we can just read and write like</font>

499
00:26:10,850 --> 00:26:18,899
<font color="#E5E5E5">usual and you</font><font color="#CCCCCC"> can use</font><font color="#E5E5E5"> Lister which works</font>

500
00:26:15,720 --> 00:26:25,360
<font color="#E5E5E5">as you would expect from the OS module</font>

501
00:26:18,900 --> 00:26:29,950
so then a word about fragmentation<font color="#CCCCCC"> XFS</font>

502
00:26:25,360 --> 00:26:32,169
is an extent based<font color="#CCCCCC"> filesystem we try to</font>

503
00:26:29,950 --> 00:26:37,740
limit<font color="#E5E5E5"> the extent count by allocating</font>

504
00:26:32,170 --> 00:26:40,600
<font color="#CCCCCC">like large blocks for these volumes but</font>

505
00:26:37,740 --> 00:26:42,610
hole punching is great but if you do

506
00:26:40,600 --> 00:26:45,310
punch in the<font color="#E5E5E5"> middle of a large extent</font>

507
00:26:42,610 --> 00:26:47,050
<font color="#E5E5E5">well</font><font color="#CCCCCC"> exercise does need to create an</font>

508
00:26:45,310 --> 00:26:52,659
extent there to represent<font color="#CCCCCC"> that so you</font>

509
00:26:47,050 --> 00:26:55,840
get<font color="#E5E5E5"> to two extra extent there</font><font color="#CCCCCC"> so far</font>

510
00:26:52,660 --> 00:26:58,570
hasn't been a<font color="#E5E5E5"> problem for us but how</font><font color="#CCCCCC"> XFS</font>

511
00:26:55,840 --> 00:27:00,340
works is<font color="#E5E5E5"> that when you</font><font color="#CCCCCC"> open the file</font><font color="#E5E5E5"> or</font>

512
00:26:58,570 --> 00:27:03,399
on the first read<font color="#E5E5E5"> I'm not sure maybe</font>

513
00:27:00,340 --> 00:27:06,909
someone will correct<font color="#E5E5E5"> me but early</font><font color="#CCCCCC"> on it</font>

514
00:27:03,400 --> 00:27:09,610
will<font color="#E5E5E5"> need to read all extents and build</font>

515
00:27:06,910 --> 00:27:11,020
that<font color="#CCCCCC"> bit tree before you can</font><font color="#E5E5E5"> access any</font>

516
00:27:09,610 --> 00:27:13,060
part<font color="#E5E5E5"> of the file so</font><font color="#CCCCCC"> you want to be</font>

517
00:27:11,020 --> 00:27:18,280
careful<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you have maybe millions of</font>

518
00:27:13,060 --> 00:27:21,940
<font color="#E5E5E5">effects</font><font color="#CCCCCC"> denser so</font><font color="#E5E5E5"> something we can do is</font>

519
00:27:18,280 --> 00:27:24,940
dedicate volumes for files we know will

520
00:27:21,940 --> 00:27:30,040
disappear shortly so are you familiar

521
00:27:24,940 --> 00:27:32,590
with the<font color="#CCCCCC"> Tom Stone files in Swift if a</font>

522
00:27:30,040 --> 00:27:36,340
user wants to delete an object from a

523
00:27:32,590 --> 00:27:39,669
<font color="#E5E5E5">swift cluster we do not remove the data</font>

524
00:27:36,340 --> 00:27:42,060
immediately<font color="#CCCCCC"> we create an</font><font color="#E5E5E5"> empty file we</font>

525
00:27:39,670 --> 00:27:45,580
said<font color="#E5E5E5"> TS extension which indicates that</font>

526
00:27:42,060 --> 00:27:47,320
from the user point of view<font color="#E5E5E5"> tile is the</font>

527
00:27:45,580 --> 00:27:51,310
object<font color="#CCCCCC"> is</font><font color="#E5E5E5"> gone and if it tries to get it</font>

528
00:27:47,320 --> 00:27:53,889
we get<font color="#CCCCCC"> to</font><font color="#E5E5E5"> 404 but we know that the Swift</font>

529
00:27:51,310 --> 00:27:57,669
<font color="#CCCCCC">Wester will pretty quickly</font><font color="#E5E5E5"> remove all</font>

530
00:27:53,890 --> 00:28:00,130
files including that empty file so we

531
00:27:57,670 --> 00:28:02,440
<font color="#E5E5E5">don't want to maybe have too many of</font>

532
00:28:00,130 --> 00:28:05,980
these in<font color="#E5E5E5"> regular volume so</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can send</font>

533
00:28:02,440 --> 00:28:08,650
<font color="#CCCCCC">them to dedicated volumes</font><font color="#E5E5E5"> and when</font><font color="#CCCCCC"> the</font>

534
00:28:05,980 --> 00:28:13,300
delete comes if it's here we can punch a

535
00:28:08,650 --> 00:28:15,610
hole like like I<font color="#CCCCCC"> just described</font><font color="#E5E5E5"> if we're</font>

536
00:28:13,300 --> 00:28:18,460
on the right<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> just write that</font><font color="#E5E5E5"> hey</font>

537
00:28:15,610 --> 00:28:22,090
this is gone and<font color="#E5E5E5"> do</font><font color="#CCCCCC"> nothing</font><font color="#E5E5E5"> at some</font>

538
00:28:18,460 --> 00:28:26,350
point we<font color="#E5E5E5"> stop writing</font><font color="#CCCCCC"> to the TS volume</font>

539
00:28:22,090 --> 00:28:28,810
we create new ones<font color="#CCCCCC"> and when all the</font>

540
00:28:26,350 --> 00:28:30,740
files have<font color="#E5E5E5"> been deleted</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> there we</font>

541
00:28:28,810 --> 00:28:32,450
<font color="#E5E5E5">can remove the entire volume</font>

542
00:28:30,740 --> 00:28:35,270
okay that's<font color="#CCCCCC"> something we could do we</font>

543
00:28:32,450 --> 00:28:39,590
have we<font color="#CCCCCC"> have not</font><font color="#E5E5E5"> had the need yet the</font>

544
00:28:35,270 --> 00:28:42,820
code is<font color="#E5E5E5"> there but yeah right performance</font>

545
00:28:39,590 --> 00:28:46,300
<font color="#E5E5E5">or</font><font color="#CCCCCC"> how we manage the safety of the data</font>

546
00:28:42,820 --> 00:28:48,830
<font color="#CCCCCC">so Swift will obviously</font><font color="#E5E5E5"> in its regular</font>

547
00:28:46,300 --> 00:28:50,809
implementation it will<font color="#E5E5E5"> F sync the file</font>

548
00:28:48,830 --> 00:28:53,059
because<font color="#CCCCCC"> you created</font><font color="#E5E5E5"> a new</font><font color="#CCCCCC"> file you</font><font color="#E5E5E5"> wrote</font>

549
00:28:50,809 --> 00:28:54,920
data<font color="#E5E5E5"> before you</font><font color="#CCCCCC"> returned</font><font color="#E5E5E5"> to the user you</font>

550
00:28:53,059 --> 00:28:58,120
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to be sure it's persisted and if</font>

551
00:28:54,920 --> 00:29:04,190
there's a<font color="#E5E5E5"> problem it will not get lost</font>

552
00:28:58,120 --> 00:29:06,110
so we do<font color="#E5E5E5"> something a little similar but</font>

553
00:29:04,190 --> 00:29:08,809
we can use<font color="#CCCCCC"> F that I think</font><font color="#E5E5E5"> only because</font>

554
00:29:06,110 --> 00:29:12,729
the volume<font color="#CCCCCC"> already exists so that's a</font>

555
00:29:08,809 --> 00:29:15,620
<font color="#E5E5E5">little bit cheaper</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then when we send</font>

556
00:29:12,730 --> 00:29:16,970
location information<font color="#E5E5E5"> to choose index</font>

557
00:29:15,620 --> 00:29:19,250
server sorry

558
00:29:16,970 --> 00:29:21,770
that's a synchronous because<font color="#CCCCCC"> making it</font>

559
00:29:19,250 --> 00:29:25,010
synchronous<font color="#E5E5E5"> would destroy performance</font>

560
00:29:21,770 --> 00:29:30,530
which means if we have<font color="#E5E5E5"> a kernel crash of</font>

561
00:29:25,010 --> 00:29:32,540
power failure at some point the index

562
00:29:30,530 --> 00:29:34,910
server may be<font color="#E5E5E5"> a little bit behind</font><font color="#CCCCCC"> what</font>

563
00:29:32,540 --> 00:29:37,670
is really on this<font color="#CCCCCC"> so how do we handle</font>

564
00:29:34,910 --> 00:29:39,290
<font color="#E5E5E5">that when the system restarts</font><font color="#CCCCCC"> which we</font>

565
00:29:37,670 --> 00:29:42,500
notice that<font color="#E5E5E5"> so shutdown</font><font color="#CCCCCC"> was not clean</font>

566
00:29:39,290 --> 00:29:44,360
and we will go<font color="#CCCCCC"> through all volumes from</font>

567
00:29:42,500 --> 00:29:48,530
<font color="#E5E5E5">the last</font><font color="#CCCCCC"> non offset in the index server</font>

568
00:29:44,360 --> 00:29:52,250
and scan for new objects that we are

569
00:29:48,530 --> 00:29:54,350
<font color="#E5E5E5">missing that works because the object</font>

570
00:29:52,250 --> 00:29:57,860
header is written at the very end<font color="#E5E5E5"> and</font>

571
00:29:54,350 --> 00:30:04,040
just<font color="#CCCCCC"> before</font><font color="#E5E5E5"> we seek data and we will add</font>

572
00:29:57,860 --> 00:30:07,280
missing entries<font color="#CCCCCC"> there performance</font><font color="#E5E5E5"> so we</font>

573
00:30:04,040 --> 00:30:08,000
use about<font color="#E5E5E5"> 42 that we didn't do it on</font>

574
00:30:07,280 --> 00:30:11,600
purpose

575
00:30:08,000 --> 00:30:14,929
42 bytes per object in the index server

576
00:30:11,600 --> 00:30:17,959
which is less than 300<font color="#E5E5E5"> 200 bytes through</font>

577
00:30:14,929 --> 00:30:20,420
<font color="#CCCCCC">one kilobyte for an in-memory</font><font color="#E5E5E5"> inode so</font>

578
00:30:17,960 --> 00:30:24,490
the latency may be slightly worse when

579
00:30:20,420 --> 00:30:27,950
you first put your server in production

580
00:30:24,490 --> 00:30:29,990
<font color="#E5E5E5">but very quickly it will get much much</font>

581
00:30:27,950 --> 00:30:33,170
<font color="#E5E5E5">better</font><font color="#CCCCCC"> if you have small files if you</font>

582
00:30:29,990 --> 00:30:36,250
<font color="#E5E5E5">have large files doesn't change your</font>

583
00:30:33,170 --> 00:30:40,570
performance<font color="#CCCCCC"> because yeah</font>

584
00:30:36,250 --> 00:30:42,310
replicate so replicate<font color="#E5E5E5"> does not</font>

585
00:30:40,570 --> 00:30:45,580
replicate data<font color="#E5E5E5"> for those of you familiar</font>

586
00:30:42,310 --> 00:30:48,280
<font color="#CCCCCC">with swished</font><font color="#E5E5E5"> it will</font><font color="#CCCCCC"> actually walk</font>

587
00:30:45,580 --> 00:30:50,490
<font color="#CCCCCC">through the directory Yaqui</font><font color="#E5E5E5"> on the</font>

588
00:30:48,280 --> 00:30:54,010
object server<font color="#E5E5E5"> get all the file names and</font>

589
00:30:50,490 --> 00:30:56,020
compute<font color="#CCCCCC"> a</font><font color="#E5E5E5"> hash of that and basically</font>

590
00:30:54,010 --> 00:30:58,510
<font color="#E5E5E5">this would be exchanged between</font><font color="#CCCCCC"> objects</font>

591
00:30:56,020 --> 00:31:02,950
<font color="#E5E5E5">server so that one will notice that it's</font>

592
00:30:58,510 --> 00:31:04,870
missing data<font color="#E5E5E5"> and it needs to to copy it</font>

593
00:31:02,950 --> 00:31:07,600
<font color="#E5E5E5">and that used</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be very costly</font><font color="#CCCCCC"> because</font>

594
00:31:04,870 --> 00:31:09,310
as Homer described since CI knows<font color="#CCCCCC"> we're</font>

595
00:31:07,600 --> 00:31:13,360
not<font color="#CCCCCC"> fitting in the cache</font><font color="#E5E5E5"> we were doing</font>

596
00:31:09,310 --> 00:31:15,550
so many cups<font color="#E5E5E5"> that</font><font color="#CCCCCC"> which was it</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> very</font>

597
00:31:13,360 --> 00:31:20,800
<font color="#CCCCCC">slow and now we can serve this from from</font>

598
00:31:15,550 --> 00:31:22,180
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> so so</font><font color="#E5E5E5"> it it's much faster</font><font color="#CCCCCC"> we</font>

599
00:31:20,800 --> 00:31:24,010
saved a little space that's a side

600
00:31:22,180 --> 00:31:26,470
effect we didn't mean to<font color="#CCCCCC"> but I guess</font>

601
00:31:24,010 --> 00:31:30,190
<font color="#CCCCCC">probably</font><font color="#E5E5E5"> because we are not creating</font>

602
00:31:26,470 --> 00:31:31,420
directory<font color="#CCCCCC"> I nodes</font><font color="#E5E5E5"> and room for</font>

603
00:31:30,190 --> 00:31:34,120
improvement sure

604
00:31:31,420 --> 00:31:37,960
so the key format<font color="#E5E5E5"> if you recall is md5</font>

605
00:31:34,120 --> 00:31:40,689
<font color="#CCCCCC">we do stuff</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> has</font><font color="#E5E5E5"> 16 bytes not 32</font>

606
00:31:37,960 --> 00:31:43,570
ASCII bytes but then the<font color="#CCCCCC"> file name</font><font color="#E5E5E5"> we</font>

607
00:31:40,690 --> 00:31:46,930
had made no no effort to<font color="#E5E5E5"> optimize yet</font>

608
00:31:43,570 --> 00:31:55,330
like that data the meter<font color="#CCCCCC"> out was we</font>

609
00:31:46,930 --> 00:31:57,310
could encode this<font color="#E5E5E5"> a few benchmark so</font>

610
00:31:55,330 --> 00:32:01,750
that I<font color="#E5E5E5"> will let you read I will not read</font>

611
00:31:57,310 --> 00:32:06,659
this<font color="#CCCCCC"> that's obviously for</font><font color="#E5E5E5"> small mostly</font>

612
00:32:01,750 --> 00:32:09,100
<font color="#E5E5E5">small object I think</font><font color="#CCCCCC"> was 16 K or 32 32</font><font color="#E5E5E5"> K</font>

613
00:32:06,660 --> 00:32:14,500
again for large object it will<font color="#E5E5E5"> not</font>

614
00:32:09,100 --> 00:32:17,590
<font color="#CCCCCC">change much so what's next</font><font color="#E5E5E5"> so this is</font>

615
00:32:14,500 --> 00:32:23,260
available<font color="#E5E5E5"> publicly on github but it's</font>

616
00:32:17,590 --> 00:32:24,939
not in<font color="#E5E5E5"> Swift upstream something we may</font>

617
00:32:23,260 --> 00:32:27,820
consider<font color="#E5E5E5"> doing with your community is</font>

618
00:32:24,940 --> 00:32:30,010
review and more<font color="#E5E5E5"> tests and still some</font>

619
00:32:27,820 --> 00:32:33,040
work but<font color="#CCCCCC"> it's really available if you</font>

620
00:32:30,010 --> 00:32:35,070
want<font color="#E5E5E5"> to take a look at it</font><font color="#CCCCCC"> store</font>

621
00:32:33,040 --> 00:32:38,560
short-lived objecting dedicated volume

622
00:32:35,070 --> 00:32:40,210
<font color="#CCCCCC">that we haven't</font><font color="#E5E5E5"> needed it yet</font><font color="#CCCCCC"> some part</font>

623
00:32:38,560 --> 00:32:42,879
of the code is<font color="#CCCCCC"> already there but</font><font color="#E5E5E5"> it's</font>

624
00:32:40,210 --> 00:32:44,950
<font color="#CCCCCC">not activated</font><font color="#E5E5E5"> replication of volumes</font>

625
00:32:42,880 --> 00:32:46,500
<font color="#E5E5E5">that may be interesting</font>

626
00:32:44,950 --> 00:32:49,230
currently we

627
00:32:46,500 --> 00:32:51,930
<font color="#E5E5E5">I rely</font><font color="#CCCCCC"> on existing</font><font color="#E5E5E5"> Swift replication</font>

628
00:32:49,230 --> 00:32:53,700
mechanism<font color="#E5E5E5"> so it's per</font><font color="#CCCCCC"> object</font><font color="#E5E5E5"> in many</font>

629
00:32:51,930 --> 00:32:56,550
cases you<font color="#CCCCCC"> will still need</font><font color="#E5E5E5"> to do that</font><font color="#CCCCCC"> but</font>

630
00:32:53,700 --> 00:32:58,260
sometimes<font color="#CCCCCC"> if</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> topology change you</font><font color="#E5E5E5"> you</font>

631
00:32:56,550 --> 00:33:00,389
want<font color="#E5E5E5"> to move an entire partition from a</font>

632
00:32:58,260 --> 00:33:02,520
machine<font color="#E5E5E5"> to another to be maybe a good</font>

633
00:33:00,390 --> 00:33:05,700
<font color="#E5E5E5">idea to</font><font color="#CCCCCC"> just grab the whole volumen and</font>

634
00:33:02,520 --> 00:33:09,120
move that<font color="#E5E5E5"> and not move several thousand</font>

635
00:33:05,700 --> 00:33:13,970
of<font color="#E5E5E5"> object whizzing individually and</font><font color="#CCCCCC"> that</font>

636
00:33:09,120 --> 00:33:16,530
the last<font color="#E5E5E5"> one is not strictly related but</font>

637
00:33:13,970 --> 00:33:19,050
<font color="#CCCCCC">original coding is not</font><font color="#E5E5E5"> efficient</font><font color="#CCCCCC"> for</font>

638
00:33:16,530 --> 00:33:20,639
small very<font color="#E5E5E5"> small objects because so</font>

639
00:33:19,050 --> 00:33:24,360
smallest thing you can allocate on a

640
00:33:20,640 --> 00:33:26,900
modern<font color="#E5E5E5"> drive is is 4k and and if you</font>

641
00:33:24,360 --> 00:33:32,219
have 15 pieces that<font color="#E5E5E5"> mean at least using</font>

642
00:33:26,900 --> 00:33:34,410
<font color="#E5E5E5">15 x 4k kilobytes so something we would</font>

643
00:33:32,220 --> 00:33:36,450
<font color="#CCCCCC">like to</font><font color="#E5E5E5"> work on and finally before we</font>

644
00:33:34,410 --> 00:33:38,250
take<font color="#E5E5E5"> questions I would like to thank the</font>

645
00:33:36,450 --> 00:33:41,430
OpenStack Swift community who has been

646
00:33:38,250 --> 00:33:45,380
very helpful<font color="#CCCCCC"> with this project</font><font color="#E5E5E5"> and other</font>

647
00:33:41,430 --> 00:33:47,520
patches<font color="#CCCCCC"> we have submitted</font><font color="#E5E5E5"> so thanks and</font>

648
00:33:45,380 --> 00:33:50,220
Facebook for publishing

649
00:33:47,520 --> 00:33:52,650
paper<font color="#CCCCCC"> it's in quite</font><font color="#E5E5E5"> an old paper now</font>

650
00:33:50,220 --> 00:33:55,230
<font color="#E5E5E5">about a protocol</font><font color="#CCCCCC"> haystack where they did</font>

651
00:33:52,650 --> 00:33:56,910
store<font color="#E5E5E5"> some files like that in</font><font color="#CCCCCC"> large</font>

652
00:33:55,230 --> 00:34:00,900
<font color="#CCCCCC">effect so that gave us</font><font color="#E5E5E5"> initially some</font>

653
00:33:56,910 --> 00:34:04,400
some ideas so thanks a<font color="#CCCCCC"> lot and if you</font>

654
00:34:00,900 --> 00:34:04,400
<font color="#E5E5E5">have any question we will take them with</font>

655
00:34:06,250 --> 00:34:09,960
[Applause]

656
00:34:18,489 --> 00:34:24,049
so the question is have you done any

657
00:34:21,918 --> 00:34:27,739
governmentís with very very<font color="#E5E5E5"> small</font><font color="#CCCCCC"> size</font>

658
00:34:24,050 --> 00:34:29,300
<font color="#CCCCCC">one to two kilobyte files</font><font color="#E5E5E5"> so honestly</font><font color="#CCCCCC"> I</font>

659
00:34:27,739 --> 00:34:30,739
don't<font color="#E5E5E5"> think</font><font color="#CCCCCC"> we have because I have done</font>

660
00:34:29,300 --> 00:34:32,659
<font color="#E5E5E5">most tests with what we see in</font>

661
00:34:30,739 --> 00:34:39,290
production for some of our clusters

662
00:34:32,659 --> 00:34:43,510
which is 16 kilobyte objects so<font color="#E5E5E5"> see 16</font>

663
00:34:39,290 --> 00:34:43,509
and 32 so<font color="#CCCCCC"> very</font><font color="#E5E5E5"> size but not that small</font>

664
00:34:48,679 --> 00:34:54,380
well<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> rot oh sorry</font>

665
00:34:51,800 --> 00:35:04,790
the<font color="#E5E5E5"> question was can you repeat the</font>

666
00:34:54,380 --> 00:35:07,580
<font color="#CCCCCC">question yeah</font><font color="#E5E5E5"> thanks so the question is</font>

667
00:35:04,790 --> 00:35:10,430
how do we know if an object<font color="#E5E5E5"> will be</font>

668
00:35:07,580 --> 00:35:12,350
<font color="#E5E5E5">shorted so the case I mentioned</font><font color="#CCCCCC"> the</font>

669
00:35:10,430 --> 00:35:14,750
<font color="#CCCCCC">tombstone file we know because</font><font color="#E5E5E5"> that's</font>

670
00:35:12,350 --> 00:35:17,299
how<font color="#CCCCCC"> Swift works right</font><font color="#E5E5E5"> it will create</font>

671
00:35:14,750 --> 00:35:19,940
that<font color="#CCCCCC"> Tom suffice to indicate that the</font>

672
00:35:17,300 --> 00:35:21,950
user wants<font color="#CCCCCC"> this gun and for eventual</font>

673
00:35:19,940 --> 00:35:26,090
consistent consistency reason we<font color="#CCCCCC"> need</font>

674
00:35:21,950 --> 00:35:28,759
that<font color="#E5E5E5"> as file and in a short time which</font>

675
00:35:26,090 --> 00:35:30,980
is operator configurable it will be

676
00:35:28,760 --> 00:35:33,410
<font color="#E5E5E5">deleted</font><font color="#CCCCCC"> so we know that</font><font color="#E5E5E5"> another case</font>

677
00:35:30,980 --> 00:35:37,430
<font color="#CCCCCC">that I didn't mention</font><font color="#E5E5E5"> is that users</font>

678
00:35:33,410 --> 00:35:39,500
<font color="#CCCCCC">first users can use ex</font><font color="#E5E5E5"> delete at header</font>

679
00:35:37,430 --> 00:35:43,160
<font color="#E5E5E5">to say that</font><font color="#CCCCCC"> ok I'm putting</font><font color="#E5E5E5"> this but I</font>

680
00:35:39,500 --> 00:35:45,710
<font color="#CCCCCC">want is gone in 10 days or 10 hours and</font>

681
00:35:43,160 --> 00:35:49,990
we also might<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> send</font><font color="#CCCCCC"> these to do</font>

682
00:35:45,710 --> 00:35:49,990
this<font color="#E5E5E5"> non pinchable for you</font>

683
00:35:51,380 --> 00:36:01,190
is there any limit<font color="#CCCCCC"> of the volume</font><font color="#E5E5E5"> where</font>

684
00:35:53,690 --> 00:36:03,230
you yeah<font color="#E5E5E5"> they're a great question so is</font>

685
00:36:01,190 --> 00:36:05,660
there a limit on on how<font color="#CCCCCC"> many volumes we</font>

686
00:36:03,230 --> 00:36:08,540
may create for a partition so we do have

687
00:36:05,660 --> 00:36:11,149
<font color="#CCCCCC">a configurable</font><font color="#E5E5E5"> configurable limit in</font>

688
00:36:08,540 --> 00:36:12,980
case for<font color="#CCCCCC"> some reason</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have so many</font>

689
00:36:11,150 --> 00:36:15,230
requests<font color="#E5E5E5"> coming for the same partition</font>

690
00:36:12,980 --> 00:36:18,500
that<font color="#E5E5E5"> we would create millions of volume</font>

691
00:36:15,230 --> 00:36:20,420
thighs and yes we have a limit on this

692
00:36:18,500 --> 00:36:30,350
and it will just fail if we<font color="#E5E5E5"> hit</font><font color="#CCCCCC"> that</font>

693
00:36:20,420 --> 00:36:32,510
limit<font color="#E5E5E5"> and you can change the question is</font>

694
00:36:30,350 --> 00:36:34,610
how large are the volumes<font color="#CCCCCC"> so that's also</font>

695
00:36:32,510 --> 00:36:36,170
<font color="#E5E5E5">configurable</font><font color="#CCCCCC"> we are not sure yet what's</font>

696
00:36:34,610 --> 00:36:39,710
<font color="#E5E5E5">the optimal size I think we are now</font>

697
00:36:36,170 --> 00:36:41,080
<font color="#E5E5E5">running with ten four five five five</font>

698
00:36:39,710 --> 00:36:45,410
<font color="#CCCCCC">five or ten-year bytes</font>

699
00:36:41,080 --> 00:36:49,490
<font color="#CCCCCC">we've tried both</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> they passed</font><font color="#E5E5E5"> the</font>

700
00:36:45,410 --> 00:36:51,740
<font color="#E5E5E5">pointer it doesn't make</font><font color="#CCCCCC"> sense to to try</font>

701
00:36:49,490 --> 00:36:53,569
to<font color="#E5E5E5"> go too big because anyway if you tend</font>

702
00:36:51,740 --> 00:36:55,250
<font color="#E5E5E5">to run with full disk and we do because</font>

703
00:36:53,570 --> 00:36:58,460
economically you have to fill it as much

704
00:36:55,250 --> 00:37:00,890
as<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> up to a performance problem</font>

705
00:36:58,460 --> 00:37:03,350
limit<font color="#E5E5E5"> you will get some fragmentation</font>

706
00:37:00,890 --> 00:37:05,270
within the file<font color="#E5E5E5"> and it's less handy to</font>

707
00:37:03,350 --> 00:37:08,000
work with your system if the files are

708
00:37:05,270 --> 00:37:09,710
<font color="#E5E5E5">too large so that's something open for</font>

709
00:37:08,000 --> 00:37:12,080
discussion and that's configurable but

710
00:37:09,710 --> 00:37:14,450
today we use<font color="#CCCCCC"> five</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> ten</font><font color="#E5E5E5"> gigabytes no so</font>

711
00:37:12,080 --> 00:37:17,060
<font color="#E5E5E5">something we didn't mention is that at</font>

712
00:37:14,450 --> 00:37:18,859
some<font color="#CCCCCC"> point we might want to compact the</font>

713
00:37:17,060 --> 00:37:21,410
volume<font color="#E5E5E5"> if there is too much hole inside</font>

714
00:37:18,860 --> 00:37:23,270
<font color="#E5E5E5">and if the volume</font><font color="#CCCCCC"> is too</font><font color="#E5E5E5"> big it will</font>

715
00:37:21,410 --> 00:37:25,399
take<font color="#E5E5E5"> a lot of time to come back it and</font>

716
00:37:23,270 --> 00:37:29,330
we might need<font color="#CCCCCC"> to lock it to compact</font><font color="#E5E5E5"> it</font>

717
00:37:25,400 --> 00:37:31,610
so keeping small small volumes and<font color="#E5E5E5"> you</font>

718
00:37:29,330 --> 00:37:38,110
know what I mean<font color="#CCCCCC"> is easier for the</font>

719
00:37:31,610 --> 00:37:38,110
<font color="#E5E5E5">compaction and the other question</font>

720
00:37:38,990 --> 00:37:46,939
it depends on our clusters but so<font color="#CCCCCC"> Oh</font>

721
00:37:42,470 --> 00:37:50,029
<font color="#CCCCCC">which energizer are you using so yeah it</font>

722
00:37:46,940 --> 00:37:53,540
<font color="#E5E5E5">depends on the performance</font><font color="#CCCCCC"> and the kind</font>

723
00:37:50,030 --> 00:37:56,120
of storage policy we use for our public

724
00:37:53,540 --> 00:38:00,020
cloud offer<font color="#E5E5E5"> we call object storage it's</font>

725
00:37:56,120 --> 00:38:02,810
<font color="#CCCCCC">two terabyte disk</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> what we could</font>

726
00:38:00,020 --> 00:38:08,000
cloud archive<font color="#CCCCCC"> it's six</font><font color="#E5E5E5"> or eight terabyte</font>

727
00:38:02,810 --> 00:38:10,250
disk<font color="#CCCCCC"> the reason is that for the four</font>

728
00:38:08,000 --> 00:38:13,430
different<font color="#CCCCCC"> size</font><font color="#E5E5E5"> you always get the same</font>

729
00:38:10,250 --> 00:38:17,690
<font color="#E5E5E5">budget on a</font><font color="#CCCCCC"> UPS so if you store more</font>

730
00:38:13,430 --> 00:38:20,450
data<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> drive you have the same</font><font color="#CCCCCC"> cups</font>

731
00:38:17,690 --> 00:38:22,490
<font color="#E5E5E5">for more data and statistically you have</font>

732
00:38:20,450 --> 00:38:28,430
more<font color="#E5E5E5"> access if there is more data so</font>

733
00:38:22,490 --> 00:38:42,649
performance<font color="#CCCCCC"> are worse no we</font><font color="#E5E5E5"> don't show</font>

734
00:38:28,430 --> 00:38:45,140
the<font color="#E5E5E5"> CD we there only yes</font><font color="#CCCCCC"> so the question</font>

735
00:38:42,650 --> 00:38:47,900
is how<font color="#E5E5E5"> did we</font><font color="#CCCCCC"> choose the number</font><font color="#E5E5E5"> of three</font>

736
00:38:45,140 --> 00:38:52,129
replicas and and twelve to three

737
00:38:47,900 --> 00:38:55,870
fragments<font color="#CCCCCC"> for errors or cutting it we</font>

738
00:38:52,130 --> 00:39:01,280
decided<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> wanted another head of</font>

739
00:38:55,870 --> 00:39:03,680
<font color="#E5E5E5">1.25 for said because we want to propose</font>

740
00:39:01,280 --> 00:39:06,620
<font color="#CCCCCC">that to</font><font color="#E5E5E5"> our customers</font><font color="#CCCCCC"> so it's kind of</font>

741
00:39:03,680 --> 00:39:09,080
price reason and so we which shows the

742
00:39:06,620 --> 00:39:12,319
number based<font color="#E5E5E5"> on that and we did not want</font>

743
00:39:09,080 --> 00:39:14,540
<font color="#CCCCCC">to have too many fragments</font><font color="#E5E5E5"> because</font>

744
00:39:12,320 --> 00:39:18,290
having many fragments<font color="#E5E5E5"> mean first of all</font>

745
00:39:14,540 --> 00:39:19,580
smaller fragments and also it would

746
00:39:18,290 --> 00:39:22,790
increase the<font color="#CCCCCC"> number of</font><font color="#E5E5E5"> connections</font>

747
00:39:19,580 --> 00:39:26,150
<font color="#E5E5E5">needed by the proxy servers to fetch</font>

748
00:39:22,790 --> 00:39:28,610
data<font color="#E5E5E5"> so it was a good compromise we made</font>

749
00:39:26,150 --> 00:39:31,510
some benchmark and it was the<font color="#E5E5E5"> number was</font>

750
00:39:28,610 --> 00:39:31,510
<font color="#E5E5E5">acceptable</font><font color="#CCCCCC"> for us</font>

751
00:39:36,670 --> 00:39:41,080
so the question is any pointers to the

752
00:39:38,650 --> 00:39:43,300
code<font color="#E5E5E5"> there is</font><font color="#CCCCCC"> something on the garret</font>

753
00:39:41,080 --> 00:39:44,950
but it's not the<font color="#CCCCCC"> latest card the latest</font>

754
00:39:43,300 --> 00:39:46,840
code is on github

755
00:39:44,950 --> 00:39:51,399
I should have tab that<font color="#CCCCCC"> comes slash</font><font color="#E5E5E5"> I</font>

756
00:39:46,840 --> 00:39:54,460
<font color="#CCCCCC">look we</font><font color="#E5E5E5"> we we are making this at the</font>

757
00:39:51,400 --> 00:40:01,020
<font color="#CCCCCC">moment more regular</font><font color="#E5E5E5"> it is going to be on</font>

758
00:39:54,460 --> 00:40:09,760
on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> swift Garrett at some point okay</font>

759
00:40:01,020 --> 00:40:12,360
okay okay

760
00:40:09,760 --> 00:40:12,360
thank you

761
00:40:13,390 --> 00:40:18,430
[Applause]

