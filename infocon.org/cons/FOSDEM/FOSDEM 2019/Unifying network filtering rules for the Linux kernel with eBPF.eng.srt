1
00:00:04,640 --> 00:00:09,950
hello everyone I'm Quentin working at

2
00:00:07,130 --> 00:00:12,710
metronome I've been working on<font color="#E5E5E5"> a</font><font color="#CCCCCC"> BPA</font>

3
00:00:09,950 --> 00:00:13,910
over the last three years<font color="#E5E5E5"> maybe now so</font>

4
00:00:12,710 --> 00:00:19,189
I'm afraid<font color="#CCCCCC"> this is yet another</font>

5
00:00:13,910 --> 00:00:22,720
presentation<font color="#CCCCCC"> about</font><font color="#E5E5E5"> BPF so the angle of</font>

6
00:00:19,189 --> 00:00:25,220
this presentation would be<font color="#E5E5E5"> to focus on</font>

7
00:00:22,720 --> 00:00:28,250
<font color="#E5E5E5">make any sentencing on</font><font color="#CCCCCC"> linux for</font>

8
00:00:25,220 --> 00:00:31,490
<font color="#CCCCCC">featuring packets</font><font color="#E5E5E5"> not from a general</font>

9
00:00:28,250 --> 00:00:35,750
point of view for mostly simple<font color="#E5E5E5"> filters</font>

10
00:00:31,490 --> 00:00:38,809
<font color="#E5E5E5">like I have a</font><font color="#CCCCCC"> CS</font><font color="#E5E5E5"> I just want to drop</font>

11
00:00:35,750 --> 00:00:41,750
some particular flows from my<font color="#E5E5E5"> incoming</font>

12
00:00:38,809 --> 00:00:43,430
traffic so what do I have<font color="#CCCCCC"> on Linux</font><font color="#E5E5E5"> to to</font>

13
00:00:41,750 --> 00:00:45,799
just<font color="#E5E5E5"> do that so</font><font color="#CCCCCC"> the first part</font><font color="#E5E5E5"> is a</font>

14
00:00:43,430 --> 00:00:49,250
short refresher about<font color="#E5E5E5"> the mechanism we</font>

15
00:00:45,799 --> 00:00:52,610
<font color="#CCCCCC">had for</font><font color="#E5E5E5"> this and then to</font><font color="#CCCCCC"> see what the</font>

16
00:00:49,250 --> 00:00:55,100
impact of ebps which was I did<font color="#E5E5E5"> maybe</font>

17
00:00:52,610 --> 00:00:59,239
more recently that<font color="#E5E5E5"> the mechanism is on</font>

18
00:00:55,100 --> 00:01:01,670
this filtering mechanism and<font color="#E5E5E5"> and also I</font>

19
00:00:59,239 --> 00:01:06,439
<font color="#CCCCCC">would like</font><font color="#E5E5E5"> to speak about the</font><font color="#CCCCCC"> certain</font>

20
00:01:01,670 --> 00:01:08,600
<font color="#E5E5E5">number of of leads for convergence</font>

21
00:01:06,439 --> 00:01:12,679
between these different<font color="#CCCCCC"> models like how</font>

22
00:01:08,600 --> 00:01:15,259
<font color="#CCCCCC">can we maybe use BPF to to make things</font>

23
00:01:12,680 --> 00:01:19,010
easier with other filtering mechanisms

24
00:01:15,260 --> 00:01:21,950
so what do<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have here to do to try and</font>

25
00:01:19,010 --> 00:01:25,400
benefit from the<font color="#E5E5E5"> best of</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> solution</font>

26
00:01:21,950 --> 00:01:28,010
so first thing<font color="#CCCCCC"> is what do we have on</font>

27
00:01:25,400 --> 00:01:32,360
<font color="#CCCCCC">Linux</font><font color="#E5E5E5"> if I want to filter my packets so</font>

28
00:01:28,010 --> 00:01:35,090
say I want<font color="#CCCCCC"> to draw HTTP packets first</font>

29
00:01:32,360 --> 00:01:38,800
thing that comes<font color="#E5E5E5"> to mind</font><font color="#CCCCCC"> usually is</font><font color="#E5E5E5"> IP</font>

30
00:01:35,090 --> 00:01:42,320
tables and EV tables<font color="#CCCCCC"> which is used for</font>

31
00:01:38,800 --> 00:01:44,030
<font color="#E5E5E5">implementing a firewall</font><font color="#CCCCCC"> now on</font><font color="#E5E5E5"> Linux</font>

32
00:01:42,320 --> 00:01:46,100
what the firewall itself is not<font color="#CCCCCC"> written</font>

33
00:01:44,030 --> 00:01:48,440
<font color="#CCCCCC">the kernel and</font><font color="#E5E5E5"> you have a</font><font color="#CCCCCC"> variety of</font>

34
00:01:46,100 --> 00:01:51,530
contents from<font color="#CCCCCC"> the user space</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font>

35
00:01:48,440 --> 00:01:53,270
would be IP tables for ipv4<font color="#E5E5E5"> routes now</font>

36
00:01:51,530 --> 00:01:58,220
you are the equivalent for Ethernet

37
00:01:53,270 --> 00:01:59,690
frames for<font color="#CCCCCC"> ARP frames you have contract</font>

38
00:01:58,220 --> 00:02:03,080
to you which is used for<font color="#CCCCCC"> maintaining</font>

39
00:01:59,690 --> 00:02:05,210
<font color="#E5E5E5">statehood connections but must be I'm</font>

40
00:02:03,080 --> 00:02:08,090
interested in very simple things here so

41
00:02:05,210 --> 00:02:10,818
<font color="#E5E5E5">that will be IP tables to inject some</font>

42
00:02:08,090 --> 00:02:12,409
simple<font color="#E5E5E5"> rules into the kernel</font><font color="#CCCCCC"> and do my</font>

43
00:02:10,818 --> 00:02:15,109
filtering<font color="#CCCCCC"> here so that's the</font><font color="#E5E5E5"> first</font>

44
00:02:12,409 --> 00:02:16,950
<font color="#E5E5E5">solution</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> we have on the ones to</font>

45
00:02:15,110 --> 00:02:19,680
<font color="#E5E5E5">use so we have for example</font>

46
00:02:16,950 --> 00:02:22,709
<font color="#E5E5E5">TC which is a framework for traffic</font>

47
00:02:19,680 --> 00:02:27,300
<font color="#CCCCCC">control on Linux that</font><font color="#E5E5E5"> she would manage</font>

48
00:02:22,709 --> 00:02:29,670
<font color="#E5E5E5">with the TC</font><font color="#CCCCCC"> 2 from IP route 2</font><font color="#E5E5E5"> so TC</font>

49
00:02:27,300 --> 00:02:32,760
works by implementing some<font color="#CCCCCC"> queueing</font>

50
00:02:29,670 --> 00:02:35,399
disciplines which are<font color="#CCCCCC"> cuties</font>

51
00:02:32,760 --> 00:02:39,720
possibly working with classes which acts

52
00:02:35,400 --> 00:02:41,850
like<font color="#E5E5E5"> queues kind of and so</font><font color="#CCCCCC"> you have a</font>

53
00:02:39,720 --> 00:02:45,060
<font color="#E5E5E5">variety of filters used to dispatch</font>

54
00:02:41,850 --> 00:02:49,709
packets into<font color="#E5E5E5"> different</font><font color="#CCCCCC"> classes attached</font>

55
00:02:45,060 --> 00:02:52,020
to your<font color="#CCCCCC"> queue</font><font color="#E5E5E5"> disk and and this would be</font>

56
00:02:49,709 --> 00:02:54,540
<font color="#E5E5E5">mostly for egress traffic usually so</font>

57
00:02:52,020 --> 00:02:56,220
that you can have scheduling<font color="#E5E5E5"> and and</font>

58
00:02:54,540 --> 00:02:58,709
traffic shaping and this kind of

59
00:02:56,220 --> 00:03:00,989
processing<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> packets living in the</font>

60
00:02:58,709 --> 00:03:02,580
machine<font color="#E5E5E5"> but you can also apply</font><font color="#CCCCCC"> filters</font>

61
00:03:00,989 --> 00:03:06,720
to<font color="#E5E5E5"> the incoming traffic so I can also</font>

62
00:03:02,580 --> 00:03:08,700
draw flows<font color="#E5E5E5"> at the TC level</font><font color="#CCCCCC"> to you so I</font>

63
00:03:06,720 --> 00:03:11,820
<font color="#E5E5E5">have a value to your filters available I</font>

64
00:03:08,700 --> 00:03:14,070
had for example<font color="#CCCCCC"> Paszek filters</font><font color="#E5E5E5"> we are</font>

65
00:03:11,820 --> 00:03:17,670
<font color="#E5E5E5">using some syntax called extended match</font>

66
00:03:14,070 --> 00:03:21,840
I<font color="#E5E5E5"> had flow flower which</font><font color="#CCCCCC"> is different you</font>

67
00:03:17,670 --> 00:03:23,548
32<font color="#E5E5E5"> now I also have BPA filters at this</font>

68
00:03:21,840 --> 00:03:25,590
level<font color="#E5E5E5"> but</font><font color="#CCCCCC"> we'll come back on that later</font>

69
00:03:23,549 --> 00:03:27,870
we have some specific filters some of

70
00:03:25,590 --> 00:03:31,340
which only applying to<font color="#E5E5E5"> egress traffic so</font>

71
00:03:27,870 --> 00:03:33,750
I won't go into<font color="#CCCCCC"> the details of each</font>

72
00:03:31,340 --> 00:03:36,209
syntax<font color="#E5E5E5"> of filters but the thing is that</font>

73
00:03:33,750 --> 00:03:39,450
<font color="#CCCCCC">we can also a future traffic at this</font>

74
00:03:36,209 --> 00:03:42,269
<font color="#E5E5E5">level drop flows so for some use case do</font>

75
00:03:39,450 --> 00:03:45,600
the same thing as<font color="#E5E5E5"> iptables another thing</font>

76
00:03:42,269 --> 00:03:48,780
<font color="#E5E5E5">that I have</font><font color="#CCCCCC"> available in Linux is Earth</font>

77
00:03:45,600 --> 00:03:52,470
<font color="#CCCCCC">to</font><font color="#E5E5E5"> to to set up things on the hardware</font>

78
00:03:48,780 --> 00:03:54,540
<font color="#E5E5E5">directly so there is a feature called</font>

79
00:03:52,470 --> 00:03:57,000
<font color="#E5E5E5">receive network flow classification</font>

80
00:03:54,540 --> 00:03:59,280
which is<font color="#E5E5E5"> actually some kind</font><font color="#CCCCCC"> of hardware</font>

81
00:03:57,000 --> 00:04:02,010
filters for<font color="#E5E5E5"> the Knicks that support this</font>

82
00:03:59,280 --> 00:04:04,470
feature<font color="#CCCCCC"> I can</font><font color="#E5E5E5"> do please set up some</font>

83
00:04:02,010 --> 00:04:07,980
filters on the on the Knicks themselves

84
00:04:04,470 --> 00:04:11,850
so that's yet another thing that then

85
00:04:07,980 --> 00:04:15,440
can do it's more<font color="#E5E5E5"> simple maybe than a net</font>

86
00:04:11,850 --> 00:04:18,298
filter of<font color="#CCCCCC"> OTC</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> Knicks</font><font color="#E5E5E5"> just have</font>

87
00:04:15,440 --> 00:04:22,560
basic facilities at this level<font color="#CCCCCC"> usually</font>

88
00:04:18,298 --> 00:04:25,229
to search for given pattern<font color="#E5E5E5"> at a fixed</font>

89
00:04:22,560 --> 00:04:28,110
offset<font color="#E5E5E5"> and see if your your packet</font>

90
00:04:25,229 --> 00:04:30,169
matches<font color="#E5E5E5"> or not and drop it or dispatch</font>

91
00:04:28,110 --> 00:04:33,560
it to a<font color="#E5E5E5"> queue</font>

92
00:04:30,170 --> 00:04:37,080
there are several things that<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> do</font>

93
00:04:33,560 --> 00:04:39,510
<font color="#CCCCCC">last mechanism of my list is not exactly</font>

94
00:04:37,080 --> 00:04:42,840
inside the kernel<font color="#CCCCCC"> it's not exactly about</font>

95
00:04:39,510 --> 00:04:44,909
dropping flows either<font color="#E5E5E5"> but it's yet some</font>

96
00:04:42,840 --> 00:04:48,390
kind of tool<font color="#CCCCCC"> that has</font><font color="#E5E5E5"> its own syntax</font>

97
00:04:44,910 --> 00:04:50,370
<font color="#E5E5E5">tree out to filter packets so that would</font>

98
00:04:48,390 --> 00:04:54,680
<font color="#E5E5E5">be the</font><font color="#CCCCCC"> pcap filters used for example for</font>

99
00:04:50,370 --> 00:04:58,920
<font color="#CCCCCC">TCP them so typically we snippety</font><font color="#E5E5E5"> would</font>

100
00:04:54,680 --> 00:05:02,580
take a peek at expression and compile

101
00:04:58,920 --> 00:05:05,220
that into<font color="#CCCCCC"> BPF code as in the</font><font color="#E5E5E5"> legacy BPF</font>

102
00:05:02,580 --> 00:05:07,650
code the old version before<font color="#E5E5E5"> BPF and you</font>

103
00:05:05,220 --> 00:05:10,790
would attach this program to a socket<font color="#E5E5E5"> in</font>

104
00:05:07,650 --> 00:05:13,049
the kernel and then each packet<font color="#E5E5E5"> would be</font>

105
00:05:10,790 --> 00:05:15,120
processed by this<font color="#E5E5E5"> program</font><font color="#CCCCCC"> and filtered</font>

106
00:05:13,050 --> 00:05:16,800
out and<font color="#CCCCCC"> eventually</font><font color="#E5E5E5"> when you don't</font>

107
00:05:15,120 --> 00:05:19,670
<font color="#E5E5E5">packets with this appearance you only</font>

108
00:05:16,800 --> 00:05:24,060
get the ones<font color="#CCCCCC"> that you're interested</font><font color="#E5E5E5"> in</font>

109
00:05:19,670 --> 00:05:26,640
<font color="#E5E5E5">because of this BPF and pick up filters</font>

110
00:05:24,060 --> 00:05:28,110
capabilities<font color="#CCCCCC"> so that's yet</font><font color="#E5E5E5"> another thing</font>

111
00:05:26,640 --> 00:05:30,180
you can do<font color="#E5E5E5"> to</font><font color="#CCCCCC"> your tree to filter</font>

112
00:05:28,110 --> 00:05:35,730
packets<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> sippy them for example you</font>

113
00:05:30,180 --> 00:05:39,090
can see the the PPA program produced<font color="#E5E5E5"> by</font>

114
00:05:35,730 --> 00:05:42,330
your expression with - the option so

115
00:05:39,090 --> 00:05:47,159
okay so we have IP tables we have TC we

116
00:05:42,330 --> 00:05:49,289
have<font color="#CCCCCC"> it to</font><font color="#E5E5E5"> you that can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> used for</font>

117
00:05:47,160 --> 00:05:51,660
<font color="#CCCCCC">hardware filters so this is just a recap</font>

118
00:05:49,290 --> 00:05:54,060
<font color="#E5E5E5">of the different filtering hoops that we</font>

119
00:05:51,660 --> 00:05:57,570
<font color="#CCCCCC">have at this time</font><font color="#E5E5E5"> in the kernel</font><font color="#CCCCCC"> so how</font>

120
00:05:54,060 --> 00:06:01,350
do<font color="#CCCCCC"> I add the</font><font color="#E5E5E5"> lower level</font><font color="#CCCCCC"> all BPF</font>

121
00:05:57,570 --> 00:06:03,090
programs just<font color="#E5E5E5"> for the circuits and in</font>

122
00:06:01,350 --> 00:06:05,190
the middle in the<font color="#E5E5E5"> kernel stack we have</font>

123
00:06:03,090 --> 00:06:09,780
TC and the theater<font color="#E5E5E5"> ingress or egress</font>

124
00:06:05,190 --> 00:06:13,560
<font color="#E5E5E5">hoops</font><font color="#CCCCCC"> just an example</font><font color="#E5E5E5"> of use case</font><font color="#CCCCCC"> for</font>

125
00:06:09,780 --> 00:06:16,799
each of these<font color="#E5E5E5"> different tools</font><font color="#CCCCCC"> so this is</font>

126
00:06:13,560 --> 00:06:19,050
each time<font color="#CCCCCC"> for dropping incoming HTTP</font>

127
00:06:16,800 --> 00:06:20,730
packets<font color="#E5E5E5"> well actually it's not</font><font color="#CCCCCC"> really</font>

128
00:06:19,050 --> 00:06:24,350
<font color="#CCCCCC">the case for to speed up that's more</font>

129
00:06:20,730 --> 00:06:27,710
about dumping early HTTP we practiced

130
00:06:24,350 --> 00:06:30,900
<font color="#E5E5E5">the point here</font><font color="#CCCCCC"> is to ensure that</font><font color="#E5E5E5"> we have</font>

131
00:06:27,710 --> 00:06:34,530
several tools with some overlap at least

132
00:06:30,900 --> 00:06:37,140
for simple filtering<font color="#E5E5E5"> and each of the</font>

133
00:06:34,530 --> 00:06:40,830
students obviously has its own syntax

134
00:06:37,140 --> 00:06:43,860
<font color="#E5E5E5">its own way of describing the rules so</font>

135
00:06:40,830 --> 00:06:46,169
<font color="#CCCCCC">that can be a problem</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have</font>

136
00:06:43,860 --> 00:06:47,969
for one of the<font color="#E5E5E5"> assistants that she would</font>

137
00:06:46,169 --> 00:06:49,409
like to<font color="#CCCCCC"> port to something else maybe</font>

138
00:06:47,969 --> 00:06:52,580
because you want to<font color="#CCCCCC"> change shoot you</font>

139
00:06:49,409 --> 00:06:56,879
want to do something<font color="#CCCCCC"> else beside so</font>

140
00:06:52,580 --> 00:06:59,039
maybe we can we can<font color="#CCCCCC"> find ways to</font><font color="#E5E5E5"> improve</font>

141
00:06:56,879 --> 00:07:02,550
things<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we'll see about that later so</font>

142
00:06:59,039 --> 00:07:04,889
<font color="#CCCCCC">you also have</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> things behind</font><font color="#E5E5E5"> the</font>

143
00:07:02,550 --> 00:07:07,319
one I presented<font color="#E5E5E5"> so that's Jesus if you</font>

144
00:07:04,889 --> 00:07:09,419
have things beside the Linux kernel so

145
00:07:07,319 --> 00:07:12,870
you will have getters which is some<font color="#E5E5E5"> of</font>

146
00:07:09,419 --> 00:07:16,198
them also<font color="#E5E5E5"> working inside the</font><font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> for</font>

147
00:07:12,870 --> 00:07:18,680
one part so for example<font color="#CCCCCC"> with open V</font>

148
00:07:16,199 --> 00:07:21,900
switch you can have the<font color="#CCCCCC"> inner data path</font>

149
00:07:18,680 --> 00:07:24,180
you can have things<font color="#E5E5E5"> besides I kind of</font>

150
00:07:21,900 --> 00:07:28,020
like<font color="#E5E5E5"> the PDK achieve flows used for</font>

151
00:07:24,180 --> 00:07:30,120
matching<font color="#E5E5E5"> packets you can use</font><font color="#CCCCCC"> p4 to</font>

152
00:07:28,020 --> 00:07:32,729
implement<font color="#CCCCCC"> submitter switches and convert</font>

153
00:07:30,120 --> 00:07:34,889
<font color="#CCCCCC">compiled them into</font><font color="#E5E5E5"> into something</font>

154
00:07:32,729 --> 00:07:37,229
<font color="#E5E5E5">dedicated to a specific target so there</font>

155
00:07:34,889 --> 00:07:39,060
are a<font color="#CCCCCC"> lot of other</font><font color="#E5E5E5"> solutions</font><font color="#CCCCCC"> too</font><font color="#E5E5E5"> so we</font>

156
00:07:37,229 --> 00:07:41,039
have<font color="#CCCCCC"> really lot of</font><font color="#E5E5E5"> things for filtering</font>

157
00:07:39,060 --> 00:07:45,659
<font color="#E5E5E5">packets we also have a BPF of course</font>

158
00:07:41,039 --> 00:07:49,050
since a<font color="#E5E5E5"> few</font><font color="#CCCCCC"> years now so what is BPF so</font>

159
00:07:45,659 --> 00:07:50,849
probably by now you know the so more<font color="#E5E5E5"> or</font>

160
00:07:49,050 --> 00:07:54,930
<font color="#CCCCCC">less</font><font color="#E5E5E5"> I won't do a detailed introduction</font>

161
00:07:50,849 --> 00:07:57,150
that's generic efficient<font color="#CCCCCC"> internal</font>

162
00:07:54,930 --> 00:07:58,979
<font color="#CCCCCC">virtual machine so there is the verifier</font>

163
00:07:57,150 --> 00:08:01,469
<font color="#E5E5E5">to make sure that programs ejected from</font>

164
00:07:58,979 --> 00:08:04,680
user<font color="#CCCCCC"> space are safe</font><font color="#E5E5E5"> you can attach it to</font>

165
00:08:01,469 --> 00:08:08,009
a variety of hooks in the kernel<font color="#E5E5E5"> so in</font>

166
00:08:04,680 --> 00:08:11,099
particular you have<font color="#E5E5E5"> so gets here TC for</font>

167
00:08:08,009 --> 00:08:15,389
traffic control<font color="#E5E5E5"> HTTP at the network</font>

168
00:08:11,099 --> 00:08:17,039
driver levels<font color="#E5E5E5"> so again that's used for</font>

169
00:08:15,389 --> 00:08:20,639
<font color="#E5E5E5">processing packets filtering them</font>

170
00:08:17,039 --> 00:08:23,430
possibly it has<font color="#E5E5E5"> couple of features that</font>

171
00:08:20,639 --> 00:08:26,729
<font color="#E5E5E5">are interesting in</font><font color="#CCCCCC"> comparison with</font>

172
00:08:23,430 --> 00:08:30,000
<font color="#CCCCCC">previous mechanism</font><font color="#E5E5E5"> Maps to to keep</font>

173
00:08:26,729 --> 00:08:32,519
<font color="#CCCCCC">States or statistics or whatever you</font>

174
00:08:30,000 --> 00:08:34,019
want<font color="#E5E5E5"> in the kernel you have takers to</font>

175
00:08:32,519 --> 00:08:35,370
call<font color="#E5E5E5"> different programs some helper</font>

176
00:08:34,019 --> 00:08:41,940
<font color="#E5E5E5">functions that you can call from the</font>

177
00:08:35,370 --> 00:08:45,300
<font color="#CCCCCC">protocol and</font><font color="#E5E5E5"> that is the idea so</font><font color="#CCCCCC"> BPF we</font>

178
00:08:41,940 --> 00:08:49,100
have several<font color="#E5E5E5"> hooks we have</font><font color="#CCCCCC"> XDP here at</font>

179
00:08:45,300 --> 00:08:51,920
the lower level nearly when

180
00:08:49,100 --> 00:08:55,160
<font color="#E5E5E5">drivers</font><font color="#CCCCCC"> pose XDP otherwise you have</font>

181
00:08:51,920 --> 00:08:58,790
generic<font color="#CCCCCC"> xtp that</font><font color="#E5E5E5"> Jasper was talking</font>

182
00:08:55,160 --> 00:09:02,779
about<font color="#E5E5E5"> this morning in the in the</font>

183
00:08:58,790 --> 00:09:04,819
questions we have<font color="#CCCCCC"> DC hooks so this one</font>

184
00:09:02,779 --> 00:09:07,790
is different that's legacy version but

185
00:09:04,820 --> 00:09:09,649
we also have<font color="#CCCCCC"> a BPF on circuits now</font><font color="#E5E5E5"> for</font>

186
00:09:07,790 --> 00:09:14,029
hardware that support it you<font color="#E5E5E5"> even have</font>

187
00:09:09,649 --> 00:09:17,180
BP FTC or<font color="#CCCCCC"> xdp afloat so that's only</font><font color="#E5E5E5"> for</font>

188
00:09:14,029 --> 00:09:18,560
<font color="#CCCCCC">metronome sputnik's at the time or</font>

189
00:09:17,180 --> 00:09:21,130
<font color="#CCCCCC">though</font><font color="#E5E5E5"> to be fair</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> that some</font>

190
00:09:18,560 --> 00:09:24,739
<font color="#CCCCCC">other Nick's can support</font><font color="#E5E5E5"> things like</font>

191
00:09:21,130 --> 00:09:26,689
some fruit for<font color="#E5E5E5"> TC rules that these kind</font>

192
00:09:24,740 --> 00:09:28,730
of<font color="#E5E5E5"> things so you</font><font color="#CCCCCC"> could also</font><font color="#E5E5E5"> have some of</font>

193
00:09:26,690 --> 00:09:33,920
<font color="#CCCCCC">the ones in</font><font color="#E5E5E5"> the hardware but the point</font>

194
00:09:28,730 --> 00:09:36,769
is<font color="#E5E5E5"> which BPA in general we get more</font>

195
00:09:33,920 --> 00:09:38,930
speed than with the other<font color="#E5E5E5"> mechanisms</font>

196
00:09:36,769 --> 00:09:40,910
there are several reasons<font color="#CCCCCC"> for that</font><font color="#E5E5E5"> we</font>

197
00:09:38,930 --> 00:09:41,388
have this just-in-time compiler<font color="#CCCCCC"> that</font>

198
00:09:40,910 --> 00:09:43,910
turns

199
00:09:41,389 --> 00:09:46,759
<font color="#CCCCCC">BPF programs into native instructions</font>

200
00:09:43,910 --> 00:09:49,310
you have<font color="#E5E5E5"> very</font><font color="#CCCCCC"> low-level</font><font color="#E5E5E5"> hooks such as</font>

201
00:09:46,759 --> 00:09:51,740
<font color="#CCCCCC">xdp you are so hot possibilities of</font>

202
00:09:49,310 --> 00:09:54,888
<font color="#CCCCCC">alpha leading to the</font><font color="#E5E5E5"> hardware so you get</font>

203
00:09:51,740 --> 00:09:57,829
something<font color="#CCCCCC"> that's really fast it's a</font>

204
00:09:54,889 --> 00:10:00,019
language<font color="#E5E5E5"> to have to</font><font color="#CCCCCC"> implement programs</font>

205
00:09:57,829 --> 00:10:03,769
<font color="#E5E5E5">in the camera so you who also get a lot</font>

206
00:10:00,019 --> 00:10:06,920
of flexibility about<font color="#E5E5E5"> what you can do but</font>

207
00:10:03,769 --> 00:10:08,810
<font color="#E5E5E5">the features you have and and that gives</font>

208
00:10:06,920 --> 00:10:11,029
you a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> possibilities</font><font color="#CCCCCC"> really</font>

209
00:10:08,810 --> 00:10:12,439
<font color="#E5E5E5">especially</font><font color="#CCCCCC"> in terms</font><font color="#E5E5E5"> of filtering you can</font>

210
00:10:11,029 --> 00:10:15,490
filter pretty much everything<font color="#CCCCCC"> you want</font>

211
00:10:12,440 --> 00:10:18,139
<font color="#CCCCCC">so maybe with some issues</font><font color="#E5E5E5"> with loops at</font>

212
00:10:15,490 --> 00:10:21,709
<font color="#CCCCCC">this time but that should</font><font color="#E5E5E5"> be solved</font>

213
00:10:18,139 --> 00:10:24,380
hopefully in the future so so a<font color="#E5E5E5"> BPF is</font>

214
00:10:21,709 --> 00:10:24,768
power of course but you knew<font color="#CCCCCC"> that</font>

215
00:10:24,380 --> 00:10:30,230
<font color="#CCCCCC">already</font>

216
00:10:24,769 --> 00:10:32,480
<font color="#E5E5E5">also</font><font color="#CCCCCC"> vpf comes with a</font><font color="#E5E5E5"> number of maybe</font>

217
00:10:30,230 --> 00:10:35,300
not drawbacks but<font color="#E5E5E5"> I mean if you are a</font>

218
00:10:32,480 --> 00:10:39,319
system administrator<font color="#CCCCCC"> trying to switch to</font>

219
00:10:35,300 --> 00:10:40,760
<font color="#E5E5E5">BPF you start by getting a lot of</font>

220
00:10:39,319 --> 00:10:43,579
<font color="#E5E5E5">headaches and spent long nights</font>

221
00:10:40,760 --> 00:10:44,920
rewriting<font color="#CCCCCC"> your exists</font><font color="#E5E5E5"> sorry your</font>

222
00:10:43,579 --> 00:10:48,319
existing rules

223
00:10:44,920 --> 00:10:50,509
BPF it's just a<font color="#CCCCCC"> set again by just by</font>

224
00:10:48,319 --> 00:10:52,219
it's not a<font color="#E5E5E5"> product by</font><font color="#CCCCCC"> itself it's a</font>

225
00:10:50,509 --> 00:10:54,439
building<font color="#CCCCCC"> block so you have to</font><font color="#E5E5E5"> build with</font>

226
00:10:52,220 --> 00:10:56,870
<font color="#CCCCCC">it and you</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to spend time creating</font>

227
00:10:54,439 --> 00:10:59,400
your<font color="#E5E5E5"> programs and optimizing them maybe</font>

228
00:10:56,870 --> 00:11:01,350
so you

229
00:10:59,400 --> 00:11:02,819
you spend enough<font color="#E5E5E5"> time on it at the</font>

230
00:11:01,350 --> 00:11:06,380
beginning<font color="#CCCCCC"> trying to understand how</font>

231
00:11:02,820 --> 00:11:10,020
things<font color="#CCCCCC"> work and sitting</font><font color="#E5E5E5"> on things so</font>

232
00:11:06,380 --> 00:11:12,450
maybe that something<font color="#CCCCCC"> that we could</font><font color="#E5E5E5"> try</font>

233
00:11:10,020 --> 00:11:14,430
to improve somewhere try to find some

234
00:11:12,450 --> 00:11:17,460
<font color="#E5E5E5">other ways to</font><font color="#CCCCCC"> generate programs or to</font>

235
00:11:14,430 --> 00:11:19,170
use programs in a way<font color="#E5E5E5"> we wouldn't</font><font color="#CCCCCC"> have</font>

236
00:11:17,460 --> 00:11:22,529
<font color="#E5E5E5">to start everything from scratch again</font>

237
00:11:19,170 --> 00:11:25,140
<font color="#E5E5E5">each time we need the new programs keep</font>

238
00:11:22,529 --> 00:11:27,150
<font color="#E5E5E5">also in mind that BPF that's something</font>

239
00:11:25,140 --> 00:11:28,560
that self-contained that's<font color="#E5E5E5"> ready</font><font color="#CCCCCC"> or</font>

240
00:11:27,150 --> 00:11:31,230
<font color="#CCCCCC">theater machine inside the kiln</font><font color="#E5E5E5"> oh</font>

241
00:11:28,560 --> 00:11:33,119
that's<font color="#CCCCCC"> well-defined</font><font color="#E5E5E5"> we have a reference</font>

242
00:11:31,230 --> 00:11:35,610
implementation the<font color="#E5E5E5"> cleaners so that's</font>

243
00:11:33,120 --> 00:11:39,210
something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> holds together that</font>

244
00:11:35,610 --> 00:11:41,760
<font color="#E5E5E5">really makes a possible good</font>

245
00:11:39,210 --> 00:11:44,910
intermediate representation for things

246
00:11:41,760 --> 00:11:48,230
<font color="#E5E5E5">like filtering packets so how could we</font>

247
00:11:44,910 --> 00:11:50,730
maybe leverage this into finding

248
00:11:48,230 --> 00:11:52,260
convergence between different<font color="#E5E5E5"> models for</font>

249
00:11:50,730 --> 00:11:55,800
<font color="#E5E5E5">filtering</font><font color="#CCCCCC"> so the first one I want to</font>

250
00:11:52,260 --> 00:11:59,819
<font color="#E5E5E5">present here</font><font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> tight yet</font>

251
00:11:55,800 --> 00:12:02,069
sorry<font color="#CCCCCC"> first thing I want</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> to tell</font>

252
00:11:59,820 --> 00:12:04,410
about<font color="#CCCCCC"> that is why should we try</font><font color="#E5E5E5"> to unify</font>

253
00:12:02,070 --> 00:12:07,529
things<font color="#E5E5E5"> well that's pretty much what I</font>

254
00:12:04,410 --> 00:12:10,020
just said it's if I<font color="#E5E5E5"> already have my set</font>

255
00:12:07,529 --> 00:12:13,920
of<font color="#E5E5E5"> IP tables rules I want to switch to</font>

256
00:12:10,020 --> 00:12:16,199
<font color="#CCCCCC">BPF</font><font color="#E5E5E5"> it's not trivial</font><font color="#CCCCCC"> to do how</font><font color="#E5E5E5"> can I</font>

257
00:12:13,920 --> 00:12:17,969
find a way to<font color="#E5E5E5"> maybe turn this set of</font>

258
00:12:16,200 --> 00:12:20,180
rules in to be clear<font color="#E5E5E5"> for something like</font>

259
00:12:17,970 --> 00:12:22,800
this so I want to<font color="#CCCCCC"> transparent league</font>

260
00:12:20,180 --> 00:12:26,640
<font color="#CCCCCC">reuse the existing</font><font color="#E5E5E5"> set of groups I have</font>

261
00:12:22,800 --> 00:12:30,180
<font color="#CCCCCC">that's one thing I want also</font><font color="#E5E5E5"> to be able</font>

262
00:12:26,640 --> 00:12:32,730
with one set<font color="#CCCCCC"> of rules to do benefit from</font>

263
00:12:30,180 --> 00:12:35,790
the<font color="#E5E5E5"> best of the solutions I have so if I</font>

264
00:12:32,730 --> 00:12:37,740
have IP table rules<font color="#E5E5E5"> I'm using IP tables</font>

265
00:12:35,790 --> 00:12:40,589
and that filter but maybe<font color="#E5E5E5"> net filters</font>

266
00:12:37,740 --> 00:12:43,230
not the fastest<font color="#E5E5E5"> available solution so I</font>

267
00:12:40,589 --> 00:12:43,680
would like<font color="#E5E5E5"> to</font><font color="#CCCCCC"> switch to</font><font color="#E5E5E5"> BPF because I've</font>

268
00:12:43,230 --> 00:12:46,709
heard that

269
00:12:43,680 --> 00:12:50,219
<font color="#CCCCCC">XDP is so much faster than BPF so how do</font>

270
00:12:46,709 --> 00:12:53,910
I do that<font color="#CCCCCC"> and on the</font><font color="#E5E5E5"> developer side it's</font>

271
00:12:50,220 --> 00:12:58,020
also interesting<font color="#CCCCCC"> because adding some</font>

272
00:12:53,910 --> 00:13:00,329
intermediate representation can can hide

273
00:12:58,020 --> 00:13:02,400
the details<font color="#CCCCCC"> of the different of</font><font color="#E5E5E5"> the</font>

274
00:13:00,330 --> 00:13:04,709
different<font color="#CCCCCC"> mechanisms that</font><font color="#E5E5E5"> I used to</font>

275
00:13:02,400 --> 00:13:07,949
inject words into the kernel<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so you</font>

276
00:13:04,709 --> 00:13:09,719
would just<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do send one type</font><font color="#CCCCCC"> of</font>

277
00:13:07,950 --> 00:13:11,600
intermediate representation<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the to</font>

278
00:13:09,720 --> 00:13:14,000
the<font color="#E5E5E5"> back end to the driver</font>

279
00:13:11,600 --> 00:13:16,730
and you would<font color="#CCCCCC"> possibly</font><font color="#E5E5E5"> also have a</font>

280
00:13:14,000 --> 00:13:18,500
better uncoupling of<font color="#E5E5E5"> the front ends to</font>

281
00:13:16,730 --> 00:13:22,670
translate<font color="#CCCCCC"> roofs and</font><font color="#E5E5E5"> the back ends to</font>

282
00:13:18,500 --> 00:13:26,030
offload<font color="#E5E5E5"> Rouge so that's for</font><font color="#CCCCCC"> example</font>

283
00:13:22,670 --> 00:13:30,110
what's used in<font color="#E5E5E5"> this first work that's</font>

284
00:13:26,030 --> 00:13:32,150
from Pablo near are you so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a RFC</font>

285
00:13:30,110 --> 00:13:35,960
<font color="#E5E5E5">on</font><font color="#CCCCCC"> that they've at the moment</font><font color="#E5E5E5"> it doesn't</font>

286
00:13:32,150 --> 00:13:39,949
<font color="#E5E5E5">use</font><font color="#CCCCCC"> bps this one that's mostly about</font>

287
00:13:35,960 --> 00:13:42,350
trying<font color="#CCCCCC"> to make things converge</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> TC</font>

288
00:13:39,950 --> 00:13:45,530
rules in yellow here<font color="#CCCCCC"> net</font><font color="#E5E5E5"> filter rules</font>

289
00:13:42,350 --> 00:13:47,720
<font color="#E5E5E5">Hardware filter rules the idea of the</font>

290
00:13:45,530 --> 00:13:51,290
proposal is<font color="#CCCCCC"> to turn all</font><font color="#E5E5E5"> observers into</font>

291
00:13:47,720 --> 00:13:53,360
an intermediate<font color="#E5E5E5"> representation called</font>

292
00:13:51,290 --> 00:13:56,089
floor so that's<font color="#E5E5E5"> not a language in</font>

293
00:13:53,360 --> 00:13:58,910
particular<font color="#E5E5E5"> that's more set</font><font color="#CCCCCC"> of structures</font>

294
00:13:56,090 --> 00:14:01,370
<font color="#CCCCCC">in C</font><font color="#E5E5E5"> inside the</font><font color="#CCCCCC"> corner</font><font color="#E5E5E5"> that could be</font>

295
00:13:58,910 --> 00:14:06,020
used to represent filters in general<font color="#E5E5E5"> and</font>

296
00:14:01,370 --> 00:14:07,490
that<font color="#CCCCCC"> could</font><font color="#E5E5E5"> be used to be that could be</font>

297
00:14:06,020 --> 00:14:10,370
used for all floats after that so

298
00:14:07,490 --> 00:14:12,950
instead<font color="#E5E5E5"> of sending all those different</font>

299
00:14:10,370 --> 00:14:16,400
rules in different formats to<font color="#E5E5E5"> the driver</font>

300
00:14:12,950 --> 00:14:19,700
you would have just one<font color="#CCCCCC"> representation</font>

301
00:14:16,400 --> 00:14:21,590
in this IR to sent to the hardware and

302
00:14:19,700 --> 00:14:24,350
<font color="#E5E5E5">the hardware would listen to the driver</font>

303
00:14:21,590 --> 00:14:26,090
<font color="#CCCCCC">sory</font><font color="#E5E5E5"> and the driver would turn that into</font>

304
00:14:24,350 --> 00:14:29,240
instructions for the<font color="#E5E5E5"> hardware so</font><font color="#CCCCCC"> that</font>

305
00:14:26,090 --> 00:14:31,430
would hopefully make things easier for

306
00:14:29,240 --> 00:14:34,940
for<font color="#E5E5E5"> hardware developers for driver</font>

307
00:14:31,430 --> 00:14:38,620
developers so that's<font color="#E5E5E5"> motivation just</font>

308
00:14:34,940 --> 00:14:42,470
just have one<font color="#CCCCCC"> thing to to push down</font><font color="#E5E5E5"> and</font>

309
00:14:38,620 --> 00:14:46,400
avoid having for example<font color="#E5E5E5"> avoid having</font>

310
00:14:42,470 --> 00:14:49,130
details about TC internals here at<font color="#E5E5E5"> this</font>

311
00:14:46,400 --> 00:14:52,069
level for<font color="#E5E5E5"> the for the driver parts so</font>

312
00:14:49,130 --> 00:14:56,290
<font color="#CCCCCC">that adding new features to</font><font color="#E5E5E5"> TC is hidden</font>

313
00:14:52,070 --> 00:14:59,810
from<font color="#E5E5E5"> the driver and gets easier to do</font>

314
00:14:56,290 --> 00:15:02,719
another solution<font color="#CCCCCC"> that tends to</font><font color="#E5E5E5"> make</font>

315
00:14:59,810 --> 00:15:06,229
<font color="#CCCCCC">things</font><font color="#E5E5E5"> converge would be</font><font color="#CCCCCC"> VP</font><font color="#E5E5E5"> filter which</font>

316
00:15:02,720 --> 00:15:09,070
was at<font color="#E5E5E5"> the center of many</font><font color="#CCCCCC"> discussions</font>

317
00:15:06,230 --> 00:15:12,470
recently and<font color="#E5E5E5"> the key under meaning list</font>

318
00:15:09,070 --> 00:15:15,470
<font color="#E5E5E5">so that's</font><font color="#CCCCCC"> a way to turn your IP tables</font>

319
00:15:12,470 --> 00:15:17,300
routes<font color="#E5E5E5"> into</font><font color="#CCCCCC"> B programs but</font><font color="#E5E5E5"> that's</font>

320
00:15:15,470 --> 00:15:19,700
directly<font color="#E5E5E5"> inside section</font><font color="#CCCCCC"> also actually</font>

321
00:15:17,300 --> 00:15:22,609
it's just<font color="#E5E5E5"> the</font><font color="#CCCCCC"> backend part that would</font>

322
00:15:19,700 --> 00:15:24,710
<font color="#E5E5E5">change and you would keep IP</font><font color="#CCCCCC"> tables left</font>

323
00:15:22,610 --> 00:15:25,160
and change so you would still use IP

324
00:15:24,710 --> 00:15:29,150
<font color="#CCCCCC">tables</font>

325
00:15:25,160 --> 00:15:31,310
- it's not you<font color="#CCCCCC"> will it's you will still</font>

326
00:15:29,150 --> 00:15:34,040
use iptables to inject yours into the

327
00:15:31,310 --> 00:15:35,810
kernel<font color="#CCCCCC"> and then instead of</font><font color="#E5E5E5"> having the</font>

328
00:15:34,040 --> 00:15:38,810
<font color="#CCCCCC">netfilter back-end in the kernel you</font>

329
00:15:35,810 --> 00:15:43,219
will use<font color="#CCCCCC"> VP filter which would translate</font>

330
00:15:38,810 --> 00:15:44,869
<font color="#E5E5E5">these rules into into an immediate</font>

331
00:15:43,220 --> 00:15:48,740
<font color="#E5E5E5">program that would be attached in the</font>

332
00:15:44,870 --> 00:15:50,360
camera so from from the user point of

333
00:15:48,740 --> 00:15:52,370
<font color="#CCCCCC">view it doesn't change much</font><font color="#E5E5E5"> the changes</font>

334
00:15:50,360 --> 00:15:55,220
in<font color="#E5E5E5"> terms of performance but</font><font color="#CCCCCC"> you would</font>

335
00:15:52,370 --> 00:15:57,200
keep<font color="#E5E5E5"> iptables roots here sent to the net</font>

336
00:15:55,220 --> 00:16:01,120
filter subsystem that<font color="#E5E5E5"> communicates with</font>

337
00:15:57,200 --> 00:16:04,610
the specific<font color="#CCCCCC"> VP filter</font><font color="#E5E5E5"> dot K or module</font>

338
00:16:01,120 --> 00:16:07,400
which is<font color="#CCCCCC"> a special kind</font><font color="#E5E5E5"> of module that</font>

339
00:16:04,610 --> 00:16:09,620
have a component<font color="#E5E5E5"> launched in user space</font>

340
00:16:07,400 --> 00:16:12,050
<font color="#E5E5E5">so you would have actually</font><font color="#CCCCCC"> route</font>

341
00:16:09,620 --> 00:16:15,590
translation in user space that's<font color="#CCCCCC"> PP</font>

342
00:16:12,050 --> 00:16:19,910
filter<font color="#E5E5E5"> umh I think that's user mode user</font>

343
00:16:15,590 --> 00:16:21,980
module helper<font color="#E5E5E5"> or something exists</font><font color="#CCCCCC"> and</font>

344
00:16:19,910 --> 00:16:23,750
then you get<font color="#E5E5E5"> the rules back as a</font><font color="#CCCCCC"> BPA</font>

345
00:16:21,980 --> 00:16:27,830
<font color="#E5E5E5">filter in the kernel then you attach</font>

346
00:16:23,750 --> 00:16:29,480
this so everything you get<font color="#E5E5E5"> you get</font><font color="#CCCCCC"> the</font>

347
00:16:27,830 --> 00:16:31,280
best part from both<font color="#CCCCCC"> worlds here you get</font>

348
00:16:29,480 --> 00:16:33,950
your<font color="#E5E5E5"> IP tables rules that you already</font>

349
00:16:31,280 --> 00:16:37,189
have and<font color="#CCCCCC"> the</font><font color="#E5E5E5"> peer programs performance</font>

350
00:16:33,950 --> 00:16:39,590
coming<font color="#E5E5E5"> with</font><font color="#CCCCCC"> that and so on</font><font color="#E5E5E5"> and the first</font>

351
00:16:37,190 --> 00:16:41,240
<font color="#E5E5E5">thing third thing I</font><font color="#CCCCCC"> want to mention is</font>

352
00:16:39,590 --> 00:16:43,310
some work<font color="#E5E5E5"> that I'm doing right</font><font color="#CCCCCC"> now on</font>

353
00:16:41,240 --> 00:16:46,250
<font color="#E5E5E5">metronome so that would be a library</font>

354
00:16:43,310 --> 00:16:47,979
<font color="#E5E5E5">that we call lib kaffir it's for canning</font>

355
00:16:46,250 --> 00:16:52,250
filtering<font color="#CCCCCC"> routes</font>

356
00:16:47,980 --> 00:16:53,810
the idea is<font color="#E5E5E5"> to do something similar some</font>

357
00:16:52,250 --> 00:16:57,680
<font color="#E5E5E5">what should be P filter but in</font><font color="#CCCCCC"> userspace</font>

358
00:16:53,810 --> 00:17:01,520
so<font color="#E5E5E5"> that would be taking different</font>

359
00:16:57,680 --> 00:17:04,429
<font color="#E5E5E5">formats of rules if two rules TC rules</font>

360
00:17:01,520 --> 00:17:08,150
<font color="#E5E5E5">IP</font><font color="#CCCCCC"> table sewers</font><font color="#E5E5E5"> possibly</font><font color="#CCCCCC"> pickup</font>

361
00:17:04,430 --> 00:17:11,360
expressions<font color="#CCCCCC"> -</font><font color="#E5E5E5"> and to convert all those</font>

362
00:17:08,150 --> 00:17:13,430
rules into<font color="#E5E5E5"> BPF programs but not just by</font>

363
00:17:11,359 --> 00:17:15,909
<font color="#E5E5E5">ten instructions</font><font color="#CCCCCC"> I would like</font><font color="#E5E5E5"> to be able</font>

364
00:17:13,430 --> 00:17:21,079
<font color="#E5E5E5">to produce C programs so instead</font><font color="#CCCCCC"> of</font>

365
00:17:15,910 --> 00:17:22,730
doing all the<font color="#E5E5E5"> work</font><font color="#CCCCCC"> down</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> to sending</font>

366
00:17:21,079 --> 00:17:26,030
the programs directly<font color="#E5E5E5"> to the kernel</font>

367
00:17:22,730 --> 00:17:28,660
which would be supported<font color="#E5E5E5"> - we would also</font>

368
00:17:26,030 --> 00:17:31,700
be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to dump a C program that</font>

369
00:17:28,660 --> 00:17:34,370
administrators<font color="#E5E5E5"> could hack the programs</font>

370
00:17:31,700 --> 00:17:36,530
themselves<font color="#E5E5E5"> and modify them so the idea</font>

371
00:17:34,370 --> 00:17:37,860
is<font color="#CCCCCC"> to present to</font><font color="#E5E5E5"> someone who is not</font>

372
00:17:36,530 --> 00:17:41,340
<font color="#CCCCCC">ready</font>

373
00:17:37,860 --> 00:17:44,250
with<font color="#CCCCCC"> PPF</font><font color="#E5E5E5"> here you have your rules</font><font color="#CCCCCC"> use</font>

374
00:17:41,340 --> 00:17:47,639
this library<font color="#CCCCCC"> to</font><font color="#E5E5E5"> add to the functions in</font>

375
00:17:44,250 --> 00:17:50,340
this library<font color="#CCCCCC"> - to turn these rules</font><font color="#E5E5E5"> into</font>

376
00:17:47,640 --> 00:17:52,380
<font color="#E5E5E5">this set of rules into your BPF program</font>

377
00:17:50,340 --> 00:17:55,169
<font color="#E5E5E5">and then do whatever you want with it</font>

378
00:17:52,380 --> 00:17:57,390
modify it<font color="#E5E5E5"> possibly or just inject it</font>

379
00:17:55,170 --> 00:17:59,400
right<font color="#E5E5E5"> now in</font><font color="#CCCCCC"> the kernel</font><font color="#E5E5E5"> and hopefully</font>

380
00:17:57,390 --> 00:18:00,299
everything<font color="#CCCCCC"> works so that's some some</font>

381
00:17:59,400 --> 00:18:02,460
work and going

382
00:18:00,299 --> 00:18:04,410
I was hoping initially to have it

383
00:18:02,460 --> 00:18:06,510
published and get help for the FOSDEM

384
00:18:04,410 --> 00:18:08,520
but suddenly<font color="#CCCCCC"> I didn't have time to</font>

385
00:18:06,510 --> 00:18:10,860
<font color="#E5E5E5">finish</font><font color="#CCCCCC"> it so it's not available yet</font>

386
00:18:08,520 --> 00:18:13,379
that's<font color="#E5E5E5"> something that I hope</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> able</font>

387
00:18:10,860 --> 00:18:17,459
<font color="#CCCCCC">to</font><font color="#E5E5E5"> publish in the</font><font color="#CCCCCC"> coming weeks or month</font>

388
00:18:13,380 --> 00:18:21,000
maybe<font color="#E5E5E5"> and that's that's it for the</font>

389
00:18:17,460 --> 00:18:22,980
<font color="#CCCCCC">presentations so</font><font color="#E5E5E5"> just to wrap up we have</font>

390
00:18:21,000 --> 00:18:26,970
different things<font color="#E5E5E5"> on kernel for filtering</font>

391
00:18:22,980 --> 00:18:29,520
<font color="#E5E5E5">packets BPF is one of them it's both</font>

392
00:18:26,970 --> 00:18:32,010
<font color="#CCCCCC">really performant and really flexible so</font>

393
00:18:29,520 --> 00:18:35,160
it can be used maybe as an intermediate

394
00:18:32,010 --> 00:18:36,290
<font color="#CCCCCC">representation for filtering packets</font><font color="#E5E5E5"> or</font>

395
00:18:35,160 --> 00:18:38,370
maybe we can use some other

396
00:18:36,290 --> 00:18:40,770
representations but anyway there are

397
00:18:38,370 --> 00:18:45,570
number of convergence models that are

398
00:18:40,770 --> 00:18:47,370
trying to<font color="#CCCCCC"> yarn</font><font color="#E5E5E5"> to emerge because</font><font color="#CCCCCC"> we want</font>

399
00:18:45,570 --> 00:18:49,080
to<font color="#CCCCCC"> reuse what exists already</font><font color="#E5E5E5"> in terms of</font>

400
00:18:47,370 --> 00:18:51,299
<font color="#E5E5E5">rules because</font><font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to simplify things</font>

401
00:18:49,080 --> 00:18:54,600
for development and we have<font color="#CCCCCC"> a number</font><font color="#E5E5E5"> of</font>

402
00:18:51,299 --> 00:18:57,000
<font color="#E5E5E5">other existing leads for the future - in</font>

403
00:18:54,600 --> 00:19:00,360
terms of convergence so<font color="#E5E5E5"> before is</font>

404
00:18:57,000 --> 00:19:02,540
<font color="#E5E5E5">something that can be used to do</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> as an</font>

405
00:19:00,360 --> 00:19:06,479
abstraction model<font color="#E5E5E5"> maybe for different</font>

406
00:19:02,540 --> 00:19:09,870
switching filtering models and you can

407
00:19:06,480 --> 00:19:11,429
use that<font color="#E5E5E5"> to combine programs into BPF so</font>

408
00:19:09,870 --> 00:19:14,610
that's really<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> to see</font><font color="#E5E5E5"> your so</font>

409
00:19:11,429 --> 00:19:17,220
this kind of relationship<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> used</font>

410
00:19:14,610 --> 00:19:19,969
in<font color="#E5E5E5"> other places as</font><font color="#CCCCCC"> well you</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> a DPF</font>

411
00:19:17,220 --> 00:19:22,770
data path in obvious which is<font color="#E5E5E5"> being</font>

412
00:19:19,970 --> 00:19:24,390
developed which<font color="#CCCCCC"> is in development at the</font>

413
00:19:22,770 --> 00:19:26,280
moment<font color="#E5E5E5"> you have another</font><font color="#CCCCCC"> BPF</font>

414
00:19:24,390 --> 00:19:28,830
implementation inside<font color="#CCCCCC"> DP decay - so</font>

415
00:19:26,280 --> 00:19:31,950
that's interesting<font color="#CCCCCC"> to see again</font><font color="#E5E5E5"> all</font>

416
00:19:28,830 --> 00:19:34,830
<font color="#E5E5E5">those things getting unified and working</font>

417
00:19:31,950 --> 00:19:36,150
together<font color="#E5E5E5"> there was a presentation by a</font>

418
00:19:34,830 --> 00:19:38,668
colleague of mine<font color="#E5E5E5"> about</font>

419
00:19:36,150 --> 00:19:40,860
<font color="#CCCCCC">eb PF as a heterogeneous processing</font><font color="#E5E5E5"> ABI</font>

420
00:19:38,669 --> 00:19:44,240
<font color="#E5E5E5">at learning experience conference so</font>

421
00:19:40,860 --> 00:19:47,540
that's about using<font color="#E5E5E5"> BPF for offroading</font>

422
00:19:44,240 --> 00:19:48,740
<font color="#E5E5E5">different drivers and</font><font color="#CCCCCC"> on compiling</font>

423
00:19:47,540 --> 00:19:52,639
judge<font color="#CCCCCC"> comparing</font><font color="#E5E5E5"> four different</font>

424
00:19:48,740 --> 00:19:54,620
architectures and<font color="#E5E5E5"> so on and and last one</font>

425
00:19:52,640 --> 00:19:57,050
that I wanted<font color="#CCCCCC"> to mention is</font><font color="#E5E5E5"> BPF</font><font color="#CCCCCC"> Trace</font>

426
00:19:54,620 --> 00:20:00,229
also using a kind of domain-specific

427
00:19:57,050 --> 00:20:02,000
language for producing<font color="#E5E5E5"> VP program so</font>

428
00:20:00,230 --> 00:20:05,350
that's<font color="#CCCCCC"> interesting again to see how we</font>

429
00:20:02,000 --> 00:20:09,890
can simplify things for for<font color="#E5E5E5"> having</font><font color="#CCCCCC"> these</font>

430
00:20:05,350 --> 00:20:12,050
other things<font color="#CCCCCC"> converging</font><font color="#E5E5E5"> together so</font>

431
00:20:09,890 --> 00:20:14,210
thank you I'm afraid<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> have time</font>

432
00:20:12,050 --> 00:20:16,760
<font color="#E5E5E5">for questions I spoke too much so if</font>

433
00:20:14,210 --> 00:20:20,260
your<font color="#E5E5E5"> question just just come and talk</font><font color="#CCCCCC"> to</font>

434
00:20:16,760 --> 00:20:20,260
me<font color="#E5E5E5"> in the program thank you</font>

