1
00:00:11,880 --> 00:00:14,880
time

2
00:00:21,700 --> 00:00:29,230
lemme game okay yes I just say yeah yeah

3
00:00:29,230 --> 00:00:33,430
oh yeah welcome everybody my talk as

4
00:00:33,430 --> 00:00:35,890
patrick said already is about deploying

5
00:00:35,890 --> 00:00:41,800
surfaces with salt i will start off with

6
00:00:41,800 --> 00:00:44,559
covering a few basics we'll see if we

7
00:00:44,559 --> 00:00:48,129
actually need that then i will try to

8
00:00:48,129 --> 00:00:50,309
run you through a deployment process

9
00:00:50,309 --> 00:00:53,110
which i've done on a virtual machine

10
00:00:53,110 --> 00:00:56,979
cluster and in the end i'll go into some

11
00:00:56,979 --> 00:00:59,680
more detail about some features of of

12
00:00:59,680 --> 00:01:01,360
the project how you can customize it and

13
00:01:01,360 --> 00:01:02,589
so on

14
00:01:02,589 --> 00:01:04,540
but yeah we'll see how much time we have

15
00:01:04,540 --> 00:01:07,690
alright so to start us off who doesn't

16
00:01:07,690 --> 00:01:11,830
know salt here okay few people and who

17
00:01:11,830 --> 00:01:16,600
doesn't know safe yet just one - okay we

18
00:01:16,600 --> 00:01:18,810
go through it then so salt is a

19
00:01:18,810 --> 00:01:21,280
configuration management software and

20
00:01:21,280 --> 00:01:24,159
remote execution engine it's similar to

21
00:01:24,159 --> 00:01:27,609
other projects like ansible puppet chef

22
00:01:27,609 --> 00:01:30,039
it does a few things different than

23
00:01:30,039 --> 00:01:34,380
others but whatever it's based on python

24
00:01:34,380 --> 00:01:38,250
pythons templating engine and 0 mq and

25
00:01:38,250 --> 00:01:41,289
the underlying principle is a master

26
00:01:41,289 --> 00:01:43,689
applying state to minions so it's push

27
00:01:43,689 --> 00:01:47,170
based and these states you can define

28
00:01:47,170 --> 00:01:49,689
and a bunch of files that sit in a

29
00:01:49,689 --> 00:01:54,219
directory hierarchy and you can in these

30
00:01:54,219 --> 00:01:58,719
files you can define a directed acyclic

31
00:01:58,719 --> 00:02:02,020
graph across several minions this is one

32
00:02:02,020 --> 00:02:04,929
of the things that it's fairly unique I

33
00:02:04,929 --> 00:02:07,149
think puppet does there too but that's

34
00:02:07,149 --> 00:02:11,830
one of the features of salt yeah the

35
00:02:11,830 --> 00:02:13,240
mission statement of salt you can read

36
00:02:13,240 --> 00:02:15,040
for yourself or you can just look it up

37
00:02:15,040 --> 00:02:17,080
on the github page

38
00:02:17,080 --> 00:02:19,540
Seth we heard quite a bit about Seth

39
00:02:19,540 --> 00:02:24,760
today already it's a scalable fault

40
00:02:24,760 --> 00:02:27,640
tolerant and self-healing storage system

41
00:02:27,640 --> 00:02:29,380
that provides you with block storage

42
00:02:29,380 --> 00:02:31,980
object storage and file storage

43
00:02:31,980 --> 00:02:33,870
and it's mainly designed to run on

44
00:02:33,870 --> 00:02:37,470
commodity hardware yeah this should

45
00:02:37,470 --> 00:02:41,459
suffice for now okay so we want to

46
00:02:41,459 --> 00:02:45,510
deploy SEF using salt and the project

47
00:02:45,510 --> 00:02:48,480
for that is called deep sea it's

48
00:02:48,480 --> 00:02:51,540
basically a collection of salt file salt

49
00:02:51,540 --> 00:02:55,560
state files mainly and they should aid

50
00:02:55,560 --> 00:02:58,319
in the creation of safe clusters and in

51
00:02:58,319 --> 00:03:01,409
the management that's - it has several

52
00:03:01,409 --> 00:03:04,680
or in a by its inception and had several

53
00:03:04,680 --> 00:03:06,720
goals in mind so it doesn't a won't deal

54
00:03:06,720 --> 00:03:08,970
with any bare metal deployment so you

55
00:03:08,970 --> 00:03:11,099
should you should do that before it

56
00:03:11,099 --> 00:03:13,319
won't install an OS or anything and it

57
00:03:13,319 --> 00:03:14,819
won't bootstrap itself so you need a

58
00:03:14,819 --> 00:03:19,129
running salt cluster that's basically

59
00:03:19,129 --> 00:03:21,930
installing salt starting the processes

60
00:03:21,930 --> 00:03:24,390
and accepting a few keys you can look

61
00:03:24,390 --> 00:03:26,760
that up on the salt website that is

62
00:03:26,760 --> 00:03:29,579
fairly easy to do anyway deep sea starts

63
00:03:29,579 --> 00:03:33,470
after you have a running salt cluster

64
00:03:33,470 --> 00:03:36,930
another aim was to automate Hardware

65
00:03:36,930 --> 00:03:40,010
detection so when you want to deploy a

66
00:03:40,010 --> 00:03:43,049
sizable safe cluster you have to deal

67
00:03:43,049 --> 00:03:44,519
with quite a lot of hardware on

68
00:03:44,519 --> 00:03:47,519
different machines and we try to avoid

69
00:03:47,519 --> 00:03:49,410
you having to deal with that so we want

70
00:03:49,410 --> 00:03:53,700
to automate a lot of that steep sea

71
00:03:53,700 --> 00:03:56,430
tries to spot problems before they get

72
00:03:56,430 --> 00:03:59,130
deployed so we have a bunch of

73
00:03:59,130 --> 00:04:01,349
validation steps that we want to run and

74
00:04:01,349 --> 00:04:04,260
warn you that you shouldn't do this and

75
00:04:04,260 --> 00:04:06,540
yeah it's not just deployment it's also

76
00:04:06,540 --> 00:04:08,609
managing the whole lifecycle

77
00:04:08,609 --> 00:04:11,790
ideally there is some work to do still

78
00:04:11,790 --> 00:04:15,780
but yeah we get there it's obviously

79
00:04:15,780 --> 00:04:18,410
open-source license under the GPL and

80
00:04:18,410 --> 00:04:21,529
the current status is we are at version

81
00:04:21,529 --> 00:04:25,680
0.7 one or two I'm not quite sure at the

82
00:04:25,680 --> 00:04:29,520
moment it's usable so the whole

83
00:04:29,520 --> 00:04:33,150
deployment workflow works and basic

84
00:04:33,150 --> 00:04:35,460
management capabilities are there too so

85
00:04:35,460 --> 00:04:39,180
you can decommission notes and add new

86
00:04:39,180 --> 00:04:40,880
notes and that kind of stuff

87
00:04:40,880 --> 00:04:44,430
and yeah you can read more about it you

88
00:04:44,430 --> 00:04:45,460
can report bugs

89
00:04:45,460 --> 00:04:48,160
can contribute on github feel free

90
00:04:48,160 --> 00:04:50,889
anytime there is a wiki too and

91
00:04:50,889 --> 00:04:52,960
obviously the bug tracker and all that

92
00:04:52,960 --> 00:04:57,430
so just go there for now it might at

93
00:04:57,430 --> 00:04:59,110
some point as I just talked to Patrick

94
00:04:59,110 --> 00:05:01,090
it might at some point migrate to the

95
00:05:01,090 --> 00:05:04,240
Ceph come what's it called the safe

96
00:05:04,240 --> 00:05:09,069
project but we'll obviously inform you

97
00:05:09,069 --> 00:05:11,169
of that okay

98
00:05:11,169 --> 00:05:16,479
so basic workflow for deep-sea as I said

99
00:05:16,479 --> 00:05:19,900
you install your OS on all your minion

100
00:05:19,900 --> 00:05:21,400
on all your notes that you want to use

101
00:05:21,400 --> 00:05:24,400
you install salt you get your salt

102
00:05:24,400 --> 00:05:26,680
cluster up and you install the deep-sea

103
00:05:26,680 --> 00:05:30,759
package on your master and then you

104
00:05:30,759 --> 00:05:33,300
start using deep-sea obviously it's

105
00:05:33,300 --> 00:05:37,900
organized in a bunch of stages to get a

106
00:05:37,900 --> 00:05:40,509
running safe cluster you need to run at

107
00:05:40,509 --> 00:05:43,349
least three stages this is one through

108
00:05:43,349 --> 00:05:47,500
three here one two or three stage zero

109
00:05:47,500 --> 00:05:49,930
is kind of optional you don't really

110
00:05:49,930 --> 00:05:53,440
have to do it it would take care of all

111
00:05:53,440 --> 00:05:55,389
your minions being in the same state so

112
00:05:55,389 --> 00:05:57,940
you know run some updates install a

113
00:05:57,940 --> 00:06:01,300
certain kernel version or whatever we do

114
00:06:01,300 --> 00:06:03,460
have some files for that they probably

115
00:06:03,460 --> 00:06:05,530
won't work for everyone so that's why

116
00:06:05,530 --> 00:06:09,340
it's optional discovery will check out

117
00:06:09,340 --> 00:06:12,460
all your hardware then there's a manual

118
00:06:12,460 --> 00:06:14,080
step you have to create one

119
00:06:14,080 --> 00:06:16,750
configuration file that pulls in all

120
00:06:16,750 --> 00:06:20,259
those proposed configuration fragments

121
00:06:20,259 --> 00:06:21,729
and what that means well we'll get to

122
00:06:21,729 --> 00:06:25,210
that in a second yeah this is the one

123
00:06:25,210 --> 00:06:27,310
manual step you have to do after that

124
00:06:27,310 --> 00:06:30,729
you deep-sea will create your

125
00:06:30,729 --> 00:06:32,710
configuration out of that push it out to

126
00:06:32,710 --> 00:06:34,270
all the minions and then stage three

127
00:06:34,270 --> 00:06:37,719
will actually deploy itself in stage 3

128
00:06:37,719 --> 00:06:40,810
you will deploy monitors and OSD so you

129
00:06:40,810 --> 00:06:43,419
will get a fully functional set cluster

130
00:06:43,419 --> 00:06:48,449
and stage 4 will then deploy some extra

131
00:06:48,449 --> 00:06:53,949
services mostly you know CFS rgw ice

132
00:06:53,949 --> 00:06:56,620
cowsy and all that sort of thing

133
00:06:56,620 --> 00:06:58,820
there's also stage 5 which will then

134
00:06:58,820 --> 00:07:00,710
with removal but that's the small

135
00:07:00,710 --> 00:07:03,170
related to lifecycle management of a

136
00:07:03,170 --> 00:07:08,930
safe cluster and in this in the next

137
00:07:08,930 --> 00:07:10,850
part we're will go into into a

138
00:07:10,850 --> 00:07:12,950
deployment process we'll only look at

139
00:07:12,950 --> 00:07:15,950
stages 1 2 & 3 because you know time

140
00:07:15,950 --> 00:07:19,730
constraints mostly especially stage 4

141
00:07:19,730 --> 00:07:22,160
can get quite complex if you you know

142
00:07:22,160 --> 00:07:25,550
look at ice gauzy deployment or rgw you

143
00:07:25,550 --> 00:07:28,810
know you can have multiple gateways that

144
00:07:28,810 --> 00:07:31,400
interact which is with each other and

145
00:07:31,400 --> 00:07:33,560
the whole configuration just can become

146
00:07:33,560 --> 00:07:36,230
quite complex so it's not not enough

147
00:07:36,230 --> 00:07:40,160
time here to cover all that some more

148
00:07:40,160 --> 00:07:45,020
notes about deep sea itself the stages

149
00:07:45,020 --> 00:07:49,820
are orchestration files for you that no

150
00:07:49,820 --> 00:07:54,560
salt that means there are executed with

151
00:07:54,560 --> 00:07:58,520
the orchestration runner and these

152
00:07:58,520 --> 00:08:00,260
orchestration files will take care of

153
00:08:00,260 --> 00:08:02,420
all the minion targeting that that needs

154
00:08:02,420 --> 00:08:06,290
to be done it's based on roles so we put

155
00:08:06,290 --> 00:08:11,090
roles on nodes and salt will act on

156
00:08:11,090 --> 00:08:14,720
those notes depending on their roles but

157
00:08:14,720 --> 00:08:17,440
you can also execute these States

158
00:08:17,440 --> 00:08:19,730
manually but then you have to target

159
00:08:19,730 --> 00:08:23,270
them yourself a common pattern that you

160
00:08:23,270 --> 00:08:25,790
will see within deep sea is this

161
00:08:25,790 --> 00:08:31,010
redirection pattern so salts when you

162
00:08:31,010 --> 00:08:34,130
when you want to apply state to a minion

163
00:08:34,130 --> 00:08:37,729
you can point salt at a directory and by

164
00:08:37,729 --> 00:08:40,849
default it will look into this directory

165
00:08:40,849 --> 00:08:43,120
and execute the init SLS

166
00:08:43,120 --> 00:08:47,030
this is just a convention of salt we

167
00:08:47,030 --> 00:08:50,000
have all our inner tests in a dot SLS

168
00:08:50,000 --> 00:08:53,180
have this include in it they include a

169
00:08:53,180 --> 00:08:56,360
file in the local directory according to

170
00:08:56,360 --> 00:08:57,980
some configuration data that is stored

171
00:08:57,980 --> 00:09:00,470
in the pillow for those of you don't

172
00:09:00,470 --> 00:09:02,420
know what a pillar is that's just a

173
00:09:02,420 --> 00:09:05,300
place where you can store static

174
00:09:05,300 --> 00:09:07,190
configuration data that is available to

175
00:09:07,190 --> 00:09:09,590
all minions it's kind of think of it as

176
00:09:09,590 --> 00:09:11,660
a key value store

177
00:09:11,660 --> 00:09:14,390
so this includes here the specific one

178
00:09:14,390 --> 00:09:16,700
will look into look in the pillar if

179
00:09:16,700 --> 00:09:18,530
there's anything to find form on in it

180
00:09:18,530 --> 00:09:22,220
if there is it will use that as a value

181
00:09:22,220 --> 00:09:24,710
or if not it will just use default which

182
00:09:24,710 --> 00:09:26,900
in this case will then open a default

183
00:09:26,900 --> 00:09:29,810
SLS in the same directory and execute

184
00:09:29,810 --> 00:09:33,170
what's in there and why we do this I

185
00:09:33,170 --> 00:09:34,880
will get to that I will get back to that

186
00:09:34,880 --> 00:09:38,990
at a later stage also deep CEU requires

187
00:09:38,990 --> 00:09:41,840
a minyan on your master node because we

188
00:09:41,840 --> 00:09:43,880
do want to apply some state to your

189
00:09:43,880 --> 00:09:46,270
master

190
00:09:46,360 --> 00:09:48,800
we heard some people saying that this is

191
00:09:48,800 --> 00:09:50,780
kind of a deal breaker we haven't really

192
00:09:50,780 --> 00:09:55,400
understood yet why but yeah this I just

193
00:09:55,400 --> 00:10:00,820
wanted to mention it all right yeah so

194
00:10:00,820 --> 00:10:03,050
let's try it I'm not trying to do a live

195
00:10:03,050 --> 00:10:08,570
demo I you know I'm holding it like lens

196
00:10:08,570 --> 00:10:11,600
did earlier I don't trust the demo gods

197
00:10:11,600 --> 00:10:15,020
I have a bunch of screenshots of the

198
00:10:15,020 --> 00:10:18,020
deployment process I hope you it's not

199
00:10:18,020 --> 00:10:19,640
too confusing with all the different

200
00:10:19,640 --> 00:10:21,410
files that are involved that's not too

201
00:10:21,410 --> 00:10:23,780
important what what I mostly want you to

202
00:10:23,780 --> 00:10:27,230
take away is that that you can customize

203
00:10:27,230 --> 00:10:31,070
third and certain things certain things

204
00:10:31,070 --> 00:10:33,740
are taken out not out of your hands but

205
00:10:33,740 --> 00:10:35,930
are done for you that's the important

206
00:10:35,930 --> 00:10:39,170
part and yeah I hope that works so don't

207
00:10:39,170 --> 00:10:41,300
don't get disheartened when you get lost

208
00:10:41,300 --> 00:10:44,090
and you know what file is open now or

209
00:10:44,090 --> 00:10:47,420
whatever okay so I have this demo

210
00:10:47,420 --> 00:10:50,900
cluster 10 virtual machines fairly small

211
00:10:50,900 --> 00:10:53,510
machines they have two network

212
00:10:53,510 --> 00:10:55,760
interfaces each because that's what Saif

213
00:10:55,760 --> 00:10:58,370
likes stuff likes a clustering cluster

214
00:10:58,370 --> 00:11:01,640
network and the public network there are

215
00:11:01,640 --> 00:11:04,880
six hours denotes all in all four of

216
00:11:04,880 --> 00:11:06,920
them have no actually all of them have

217
00:11:06,920 --> 00:11:09,650
five five gigabyte drives you know if

218
00:11:09,650 --> 00:11:13,130
such a thing would even exist and two

219
00:11:13,130 --> 00:11:14,900
hours these have an extra one gigabyte

220
00:11:14,900 --> 00:11:18,650
Drive so we have 32 drives overall means

221
00:11:18,650 --> 00:11:21,550
we can at most deploy 32 OSDs

222
00:11:21,550 --> 00:11:24,350
they're fairly conveniently named

223
00:11:24,350 --> 00:11:26,570
as you can see so we have mon 1 2 3 and

224
00:11:26,570 --> 00:11:28,970
data 1 through 6

225
00:11:28,970 --> 00:11:31,520
that's I just chose that way because

226
00:11:31,520 --> 00:11:34,270
it'll be easier for the presentation

227
00:11:34,270 --> 00:11:36,950
those names will be used and the policy

228
00:11:36,950 --> 00:11:41,030
dot CFG but I'll explain a few things

229
00:11:41,030 --> 00:11:42,980
if your naming scheme isn't quite that

230
00:11:42,980 --> 00:11:45,860
convenient yeah as you can see there's

231
00:11:45,860 --> 00:11:47,450
nine notes that I'm gonna use for this

232
00:11:47,450 --> 00:11:49,250
cluster the admin node is basically just

233
00:11:49,250 --> 00:11:53,570
my salt master all right

234
00:11:53,570 --> 00:11:56,510
so stage 0 I've talked about this before

235
00:11:56,510 --> 00:12:00,110
it's optional it's at the moment very

236
00:12:00,110 --> 00:12:02,930
Sousa specific we're working on getting

237
00:12:02,930 --> 00:12:05,660
rid of that but there are some issues

238
00:12:05,660 --> 00:12:08,840
and salt that needs solving first it

239
00:12:08,840 --> 00:12:10,670
doesn't do any black magic or anything

240
00:12:10,670 --> 00:12:13,880
so you know it sings your salt states it

241
00:12:13,880 --> 00:12:16,550
installs a package or to run some

242
00:12:16,550 --> 00:12:20,290
updates you can do that with salt itself

243
00:12:20,290 --> 00:12:23,810
fitting for your distribution and then

244
00:12:23,810 --> 00:12:27,710
you can just step skip stage 0 so that's

245
00:12:27,710 --> 00:12:30,560
highly optional at the moment stage 0

246
00:12:30,560 --> 00:12:32,480
and deep sea might reboot your minions

247
00:12:32,480 --> 00:12:34,880
and that includes the minion your

248
00:12:34,880 --> 00:12:37,940
masters runs on so be advised if you do

249
00:12:37,940 --> 00:12:40,700
use stage 0 and you manage other nodes

250
00:12:40,700 --> 00:12:43,760
you know maybe with reactors maybe step

251
00:12:43,760 --> 00:12:45,890
away from running stage 0 it might

252
00:12:45,890 --> 00:12:47,380
surprise you

253
00:12:47,380 --> 00:12:51,260
ok so stage 1 is the first interesting

254
00:12:51,260 --> 00:12:53,660
one for us it does discovery so it goes

255
00:12:53,660 --> 00:12:56,900
out to all your minions and queries them

256
00:12:56,900 --> 00:12:59,330
for their hardware which for safe of

257
00:12:59,330 --> 00:13:01,130
course is network hardware and storage

258
00:13:01,130 --> 00:13:03,400
hardware

259
00:13:03,760 --> 00:13:07,220
it will then write a whole bunch of

260
00:13:07,220 --> 00:13:10,070
configuration fragments in the pillar

261
00:13:10,070 --> 00:13:12,890
subdirectory which you can oh that's a

262
00:13:12,890 --> 00:13:16,070
typo there it should be SRV pillar set

263
00:13:16,070 --> 00:13:21,320
proposals those configuration fragments

264
00:13:21,320 --> 00:13:23,180
will look we look at some in a second or

265
00:13:23,180 --> 00:13:27,470
really just tiny tiny ammo files which

266
00:13:27,470 --> 00:13:30,070
will then make up your configuration

267
00:13:30,070 --> 00:13:33,200
what's important to note here is it will

268
00:13:33,200 --> 00:13:37,350
produce a roughly at least

269
00:13:37,350 --> 00:13:39,720
fragment and minion it will produce one

270
00:13:39,720 --> 00:13:44,010
file so it will produce all the

271
00:13:44,010 --> 00:13:47,730
necessary fragments for all your minions

272
00:13:47,730 --> 00:13:50,880
to be a monitor you don't you don't want

273
00:13:50,880 --> 00:13:53,460
that probably I don't want mine monitor

274
00:13:53,460 --> 00:13:55,980
notes here obviously but it will give

275
00:13:55,980 --> 00:13:57,750
you the option to that it will also

276
00:13:57,750 --> 00:14:00,270
produce all these configuration

277
00:14:00,270 --> 00:14:03,570
fragments for all the salt minions that

278
00:14:03,570 --> 00:14:06,180
might not you know become SEF notes in

279
00:14:06,180 --> 00:14:09,570
the end there's you can see that this

280
00:14:09,570 --> 00:14:11,610
will there are a lot of files that are

281
00:14:11,610 --> 00:14:13,980
created but luckily you never have to

282
00:14:13,980 --> 00:14:18,060
really look at them so yeah just wanted

283
00:14:18,060 --> 00:14:21,150
to mention that this proposals directory

284
00:14:21,150 --> 00:14:23,130
will look like that after you run stage

285
00:14:23,130 --> 00:14:27,600
zero so it's a bunch of sub directories

286
00:14:27,600 --> 00:14:32,880
a whole bunch of role define Minh so as

287
00:14:32,880 --> 00:14:35,670
you can see you know role Mon will be

288
00:14:35,670 --> 00:14:38,100
one important one obviously that we're

289
00:14:38,100 --> 00:14:42,000
gonna use above the roles there are the

290
00:14:42,000 --> 00:14:45,000
profiles those will be the storage nodes

291
00:14:45,000 --> 00:14:47,880
so for every hard drive deep sea

292
00:14:47,880 --> 00:14:50,460
encounters it will try to propose a

293
00:14:50,460 --> 00:14:52,890
storage layout for that particular node

294
00:14:52,890 --> 00:14:56,280
and create a directory that's kind of

295
00:14:56,280 --> 00:14:58,830
named after what hardware it found as

296
00:14:58,830 --> 00:15:00,660
you can see here this resembles roughly

297
00:15:00,660 --> 00:15:05,670
my OSD notes and above that there's just

298
00:15:05,670 --> 00:15:09,570
some general configuration data so yeah

299
00:15:09,570 --> 00:15:13,770
what's actually in those files oh by the

300
00:15:13,770 --> 00:15:15,630
way I hope everybody can see that I was

301
00:15:15,630 --> 00:15:19,860
kind of looks all right hey okay yeah so

302
00:15:19,860 --> 00:15:23,070
the top one is the configuration

303
00:15:23,070 --> 00:15:27,420
fragments for one node that is going to

304
00:15:27,420 --> 00:15:29,640
become a monitor and as you can see it's

305
00:15:29,640 --> 00:15:31,500
they're really tiny fragments so there's

306
00:15:31,500 --> 00:15:36,030
a roll key and this particular fragment

307
00:15:36,030 --> 00:15:39,470
will add on to that to that list and

308
00:15:39,470 --> 00:15:42,630
since the monitors of Ceph have to be on

309
00:15:42,630 --> 00:15:44,760
the public network they'll get an IP

310
00:15:44,760 --> 00:15:45,660
address too

311
00:15:45,660 --> 00:15:49,339
and that's it already

312
00:15:49,530 --> 00:15:52,260
the storage profiles they they're a bit

313
00:15:52,260 --> 00:15:56,420
bigger so we again have this this role

314
00:15:56,420 --> 00:15:59,310
array and in this case you add storage

315
00:15:59,310 --> 00:16:02,100
obviously but you also now have the

316
00:16:02,100 --> 00:16:05,310
actual storage profile so in this case

317
00:16:05,310 --> 00:16:07,770
this is one of the minions that had five

318
00:16:07,770 --> 00:16:10,160
drives in it and this particular

319
00:16:10,160 --> 00:16:13,530
proposal that deep sea came up with will

320
00:16:13,530 --> 00:16:17,460
deploy five OSD stand-alone OS DS all on

321
00:16:17,460 --> 00:16:20,820
their own disk there's usually two ways

322
00:16:20,820 --> 00:16:23,120
you can deploy an OSD and SEF that's

323
00:16:23,120 --> 00:16:25,740
standalone on its own disk but you can

324
00:16:25,740 --> 00:16:28,260
also put the journal on an external disk

325
00:16:28,260 --> 00:16:30,960
so you the OSD will use two separate

326
00:16:30,960 --> 00:16:33,090
disks you usually want to do this when

327
00:16:33,090 --> 00:16:35,940
you have an SSD and spinners for example

328
00:16:35,940 --> 00:16:37,590
then you would put the journal on the

329
00:16:37,590 --> 00:16:40,560
SSD and the actual data on the spinners

330
00:16:40,560 --> 00:16:43,040
to speed up the write and reprocess

331
00:16:43,040 --> 00:16:45,690
that's the other line up there data plus

332
00:16:45,690 --> 00:16:47,820
journals that would be the other way of

333
00:16:47,820 --> 00:16:51,150
deploying an OSD and will again get back

334
00:16:51,150 --> 00:16:55,140
to that later okay so you have all your

335
00:16:55,140 --> 00:16:57,600
proposals now now it's time to come up

336
00:16:57,600 --> 00:17:00,450
with the policy that CFG so as I said

337
00:17:00,450 --> 00:17:04,310
this is the central configuration file

338
00:17:04,310 --> 00:17:07,680
basically what you do is you include a

339
00:17:07,680 --> 00:17:09,480
whole bunch of these configuration

340
00:17:09,480 --> 00:17:12,930
fragments and deep sea will then in

341
00:17:12,930 --> 00:17:15,569
another stage collect or you know

342
00:17:15,569 --> 00:17:17,250
compile all those configuration

343
00:17:17,250 --> 00:17:20,990
fragments and create a config out of it

344
00:17:20,990 --> 00:17:24,510
we only have nine notes here now so it's

345
00:17:24,510 --> 00:17:26,819
not too unwieldy but you know imagine

346
00:17:26,819 --> 00:17:29,760
you have a hundred notes and your

347
00:17:29,760 --> 00:17:31,710
storage notes have like when you four

348
00:17:31,710 --> 00:17:33,990
drives in it also you get a lot of

349
00:17:33,990 --> 00:17:36,090
fragments so you obviously don't want to

350
00:17:36,090 --> 00:17:39,000
list every every single file so and then

351
00:17:39,000 --> 00:17:42,300
the policy dot CFG you can use the globs

352
00:17:42,300 --> 00:17:44,370
that salt uses to UM

353
00:17:44,370 --> 00:17:45,930
I'll show you in a second what I mean

354
00:17:45,930 --> 00:17:48,390
but you can also do more complex stuff

355
00:17:48,390 --> 00:17:51,810
with list slicing and reg X's and yeah

356
00:17:51,810 --> 00:17:53,910
the order in which you list things is

357
00:17:53,910 --> 00:17:56,910
important because later options will

358
00:17:56,910 --> 00:17:58,710
overwrite another incarnation of

359
00:17:58,710 --> 00:18:02,100
themselves but that's not too important

360
00:18:02,100 --> 00:18:03,419
for us now either

361
00:18:03,419 --> 00:18:06,570
so the policy that CFG that I used for

362
00:18:06,570 --> 00:18:11,369
this cluster here looks like that yes

363
00:18:11,369 --> 00:18:14,129
maybe not maybe not too obvious what

364
00:18:14,129 --> 00:18:15,959
what happens here so let's let's step

365
00:18:15,959 --> 00:18:19,229
through it this is a configuration

366
00:18:19,229 --> 00:18:22,079
fragment here that we'll just assign

367
00:18:22,079 --> 00:18:26,909
minions to a cluster eventually deepsea

368
00:18:26,909 --> 00:18:28,709
should be able to you manage multiple

369
00:18:28,709 --> 00:18:31,559
clusters multiple sub clusters for now

370
00:18:31,559 --> 00:18:34,440
this is only used if you want to deploy

371
00:18:34,440 --> 00:18:36,749
surplus err but also have other notes

372
00:18:36,749 --> 00:18:39,179
that you manage in Sault then those

373
00:18:39,179 --> 00:18:41,909
nodes you would actually include a

374
00:18:41,909 --> 00:18:46,109
cluster - unassigned file and then they

375
00:18:46,109 --> 00:18:48,209
wouldn't be managed by deepsea anymore

376
00:18:48,209 --> 00:18:50,429
but since we don't have that we just you

377
00:18:50,429 --> 00:18:53,299
know include the cluster assignments

378
00:18:53,299 --> 00:18:57,649
next step is the hardware profiles so

379
00:18:57,649 --> 00:19:02,219
here I just include all all suggested

380
00:19:02,219 --> 00:19:04,739
profiles because I have a limited amount

381
00:19:04,739 --> 00:19:07,139
of disks only there's nothing I don't

382
00:19:07,139 --> 00:19:09,450
want to use and Tipsy only came up with

383
00:19:09,450 --> 00:19:12,119
one suggestion that's you know you can

384
00:19:12,119 --> 00:19:15,149
see profile - some disk - some other

385
00:19:15,149 --> 00:19:17,609
disk and then there's a - one at the end

386
00:19:17,609 --> 00:19:21,570
of every of every directory usually

387
00:19:21,570 --> 00:19:23,369
deepsea would come up with at least

388
00:19:23,369 --> 00:19:26,700
another with another proposal which

389
00:19:26,700 --> 00:19:29,099
would then be named - - but that only

390
00:19:29,099 --> 00:19:32,339
happens if it finds an SSD so if it you

391
00:19:32,339 --> 00:19:35,190
know is able to create this external

392
00:19:35,190 --> 00:19:37,979
journal OSD which doesn't happen on

393
00:19:37,979 --> 00:19:41,759
virtual disks obviously then you include

394
00:19:41,759 --> 00:19:43,829
some common configuration this mostly

395
00:19:43,829 --> 00:19:47,039
deals with configuration values that you

396
00:19:47,039 --> 00:19:49,769
want to deploy and then you assign some

397
00:19:49,769 --> 00:19:52,979
more roles mainly here the master which

398
00:19:52,979 --> 00:19:57,029
is my salt master all them all the notes

399
00:19:57,029 --> 00:19:59,489
that are called Mon something should

400
00:19:59,489 --> 00:20:01,649
become admin notes so they get an admin

401
00:20:01,649 --> 00:20:04,079
keyring and all the notes that are

402
00:20:04,079 --> 00:20:06,089
called Mon something will become

403
00:20:06,089 --> 00:20:09,029
monitors obviously you can see how my

404
00:20:09,029 --> 00:20:12,509
how my naming scheme here is very

405
00:20:12,509 --> 00:20:14,879
convenient

406
00:20:14,879 --> 00:20:17,250
you might as I said you you know

407
00:20:17,250 --> 00:20:18,780
might have some notes already they might

408
00:20:18,780 --> 00:20:21,750
not be as conveniently named so there

409
00:20:21,750 --> 00:20:23,520
are some other options to use these

410
00:20:23,520 --> 00:20:27,450
gloves you can use other salt gloves so

411
00:20:27,450 --> 00:20:30,180
you can you know list certain allowed

412
00:20:30,180 --> 00:20:34,140
values but much more interesting is you

413
00:20:34,140 --> 00:20:37,260
can use you can give another argument to

414
00:20:37,260 --> 00:20:42,000
it so this admin star will create a list

415
00:20:42,000 --> 00:20:43,830
of all the notes that are called admin

416
00:20:43,830 --> 00:20:45,990
something and then you can pass along

417
00:20:45,990 --> 00:20:49,380
either a slice which will take a chunk

418
00:20:49,380 --> 00:20:52,530
out of this list or a red X which will

419
00:20:52,530 --> 00:20:54,510
match every item of this list against

420
00:20:54,510 --> 00:20:56,610
this reg so you can you even use both if

421
00:20:56,610 --> 00:20:58,950
you wanted to so this should take care

422
00:20:58,950 --> 00:21:02,970
of even the most you know unlucky naming

423
00:21:02,970 --> 00:21:06,080
schemes for hosts for a safe deployment

424
00:21:06,080 --> 00:21:09,390
and avoid you know you having to list

425
00:21:09,390 --> 00:21:13,440
all the files that are there ok so we

426
00:21:13,440 --> 00:21:17,010
have our policy dot CFG we run stage 2

427
00:21:17,010 --> 00:21:19,560
now this will take all those fragments

428
00:21:19,560 --> 00:21:23,220
and produce a configuration for deep sea

429
00:21:23,220 --> 00:21:27,300
to use this is based on stack top pie

430
00:21:27,300 --> 00:21:30,690
deep sea comes with stack top pie but if

431
00:21:30,690 --> 00:21:33,780
you use a fairly new salt version

432
00:21:33,780 --> 00:21:36,770
this will include stack top pie too so

433
00:21:36,770 --> 00:21:41,040
there's nothing to do really it will

434
00:21:41,040 --> 00:21:43,500
write out this configuration to a

435
00:21:43,500 --> 00:21:46,830
directory tree under SRV pillar SEF

436
00:21:46,830 --> 00:21:51,510
stack default this is the configuration

437
00:21:51,510 --> 00:21:53,610
you basically came up with in your

438
00:21:53,610 --> 00:21:56,910
policy dot CFG it will create the same

439
00:21:56,910 --> 00:21:59,550
sub directory tree in its parent

440
00:21:59,550 --> 00:22:01,980
directory and create all the files that

441
00:22:01,980 --> 00:22:05,340
are in the default tree to these files

442
00:22:05,340 --> 00:22:08,010
and the parent directory are for you to

443
00:22:08,010 --> 00:22:10,230
use so you can override certain options

444
00:22:10,230 --> 00:22:12,270
that gypsy came up with and that you

445
00:22:12,270 --> 00:22:15,900
don't like that's yeah just a

446
00:22:15,900 --> 00:22:19,470
customization thing it's you know you

447
00:22:19,470 --> 00:22:20,610
just have to look at it it's fairly

448
00:22:20,610 --> 00:22:24,270
obvious and you can check your config

449
00:22:24,270 --> 00:22:26,970
with by just looking into the pillar so

450
00:22:26,970 --> 00:22:28,980
you target a minion and

451
00:22:28,980 --> 00:22:31,380
do piller dot items and it will list all

452
00:22:31,380 --> 00:22:33,330
those configuration key value pairs that

453
00:22:33,330 --> 00:22:35,340
you have and you can just check up that

454
00:22:35,340 --> 00:22:38,210
that everything's as you want it and

455
00:22:38,210 --> 00:22:41,160
then you mostly none you run stage three

456
00:22:41,160 --> 00:22:42,540
which will take care of the whole

457
00:22:42,540 --> 00:22:44,520
deployment and you have a running safe

458
00:22:44,520 --> 00:22:47,490
cluster one thing to mention about stage

459
00:22:47,490 --> 00:22:49,590
three is that it will validate the

460
00:22:49,590 --> 00:22:53,070
configuration you want to use so it will

461
00:22:53,070 --> 00:22:55,920
run quite a few steps of you know

462
00:22:55,920 --> 00:22:57,630
looking that you have three months for

463
00:22:57,630 --> 00:22:59,820
example that you have enough storage

464
00:22:59,820 --> 00:23:03,390
nodes that you know maybe you have a

465
00:23:03,390 --> 00:23:05,280
firewall running on some of the nodes it

466
00:23:05,280 --> 00:23:07,260
will notify you at least of that

467
00:23:07,260 --> 00:23:11,340
so when stage stage 3 is through and

468
00:23:11,340 --> 00:23:13,140
some things don't work you know might be

469
00:23:13,140 --> 00:23:16,980
a firewall issue or so yeah and then go

470
00:23:16,980 --> 00:23:20,610
out install safe create the cluster and

471
00:23:20,610 --> 00:23:23,610
create a pool this is what it looks like

472
00:23:23,610 --> 00:23:25,980
you don't have to try to decipher that

473
00:23:25,980 --> 00:23:27,900
what what you should take away is that

474
00:23:27,900 --> 00:23:30,180
it's nice and green so we're all good

475
00:23:30,180 --> 00:23:35,060
and then we have a running safe cluster

476
00:23:35,060 --> 00:23:37,890
this is yeah the health warned here

477
00:23:37,890 --> 00:23:39,720
don't worry about that that's just the

478
00:23:39,720 --> 00:23:41,400
pool that I that it automatically

479
00:23:41,400 --> 00:23:43,490
creates is too small

480
00:23:43,490 --> 00:23:45,870
well I want you to pay attention to is

481
00:23:45,870 --> 00:23:48,870
that we have 32 OSD so on each virtual

482
00:23:48,870 --> 00:23:52,110
drive that machines have there is one

483
00:23:52,110 --> 00:23:59,270
OSD yeah and that's it basically so you

484
00:23:59,270 --> 00:24:04,470
finished now no let's look at how you

485
00:24:04,470 --> 00:24:06,090
can customize this whole process hours

486
00:24:06,090 --> 00:24:07,830
are there any questions so far maybe I

487
00:24:07,830 --> 00:24:11,370
don't know is anybody very disheartened

488
00:24:11,370 --> 00:24:16,800
or very confused probably probably too

489
00:24:16,800 --> 00:24:19,500
confused to have questions okay let's

490
00:24:19,500 --> 00:24:23,220
confuse you a little more I've spoken

491
00:24:23,220 --> 00:24:27,300
about the hardware profiles so as I said

492
00:24:27,300 --> 00:24:29,130
deep sea will usually come up with

493
00:24:29,130 --> 00:24:32,010
another profile for external journals

494
00:24:32,010 --> 00:24:34,200
but only if you have an SSD which is

495
00:24:34,200 --> 00:24:36,090
obviously not the case and my virtual

496
00:24:36,090 --> 00:24:39,380
machine cluster here so I just wrote one

497
00:24:39,380 --> 00:24:43,040
what's F what deep sea will

498
00:24:43,040 --> 00:24:45,960
propose will look very similar to that

499
00:24:45,960 --> 00:24:49,710
so it's just a key value mapping of data

500
00:24:49,710 --> 00:24:52,800
drive pointing towards a journal drive

501
00:24:52,800 --> 00:24:56,610
that you want to use on a real cluster

502
00:24:56,610 --> 00:25:01,500
this would look more like that this you

503
00:25:01,500 --> 00:25:04,260
know we want to use the actual idea of

504
00:25:04,260 --> 00:25:08,370
the drive because the the DEF /st

505
00:25:08,370 --> 00:25:12,330
something might change you get an idea

506
00:25:12,330 --> 00:25:16,110
why it's good that deepsea automatically

507
00:25:16,110 --> 00:25:17,790
creates all those files because I mean

508
00:25:17,790 --> 00:25:19,410
this is even a small one right this is

509
00:25:19,410 --> 00:25:22,860
like what seven or eight drives imagine

510
00:25:22,860 --> 00:25:25,550
that with 24 drives that gets a little

511
00:25:25,550 --> 00:25:30,840
error-prone let's say so yeah so but I

512
00:25:30,840 --> 00:25:32,880
want to use this profile no I want to

513
00:25:32,880 --> 00:25:36,150
use I want to create SSDs that have

514
00:25:36,150 --> 00:25:38,460
their journal partition on an X on

515
00:25:38,460 --> 00:25:41,630
another Drive than their data partition

516
00:25:41,630 --> 00:25:45,990
so we are back at imagine we're back at

517
00:25:45,990 --> 00:25:48,210
stage after stage one obviously so we

518
00:25:48,210 --> 00:25:56,060
haven't created our policy dot CFG yeah

519
00:25:56,060 --> 00:25:58,290
another thing we have to look at now is

520
00:25:58,290 --> 00:26:01,650
how to customize the behavior of deep

521
00:26:01,650 --> 00:26:05,700
sea because mostly for this particular

522
00:26:05,700 --> 00:26:09,690
case safe disk which will which will we

523
00:26:09,690 --> 00:26:14,070
will we be using to deploy the OSD will

524
00:26:14,070 --> 00:26:17,910
just refuse to deploy an OSD on a one

525
00:26:17,910 --> 00:26:22,560
gigabyte Drive reasonably so but we want

526
00:26:22,560 --> 00:26:25,350
to force it to do that so I wrote a

527
00:26:25,350 --> 00:26:27,930
custom SLS file which I called fosston

528
00:26:27,930 --> 00:26:32,160
SLS and put it in the OSD subdirectory

529
00:26:32,160 --> 00:26:35,580
of the psaltery I won't bore you with

530
00:26:35,580 --> 00:26:38,130
what's actually in it it'll just

531
00:26:38,130 --> 00:26:40,530
partition the drives the size you want

532
00:26:40,530 --> 00:26:42,540
to and then force F disk to actually use

533
00:26:42,540 --> 00:26:48,300
those partitions okay so how do we get

534
00:26:48,300 --> 00:26:51,720
deep sea to use it now I spoke before

535
00:26:51,720 --> 00:26:54,310
already about this redirection pattern

536
00:26:54,310 --> 00:27:00,650
so it's up here again oh yeah and you

537
00:27:00,650 --> 00:27:03,260
might notice on this slide here the the

538
00:27:03,260 --> 00:27:06,050
there is an inert SLS and a defaulted

539
00:27:06,050 --> 00:27:08,030
SLS those are the files that deep sea

540
00:27:08,030 --> 00:27:12,260
come with comes with yeah and I just

541
00:27:12,260 --> 00:27:16,450
added something there so now we have to

542
00:27:16,450 --> 00:27:19,190
put a key value pair and the pillar

543
00:27:19,190 --> 00:27:22,880
which defines OSD in it to frost them so

544
00:27:22,880 --> 00:27:26,870
deep sea will use my FASTA SLS and this

545
00:27:26,870 --> 00:27:33,320
you can do in the in the stack directory

546
00:27:33,320 --> 00:27:35,570
where the configuration lifts after

547
00:27:35,570 --> 00:27:38,480
stage 2 I've spoken before about those

548
00:27:38,480 --> 00:27:45,140
two mirroring subdirectory trees and I

549
00:27:45,140 --> 00:27:48,260
look here into the global llamó we will

550
00:27:48,260 --> 00:27:50,630
see so this file was initially empty and

551
00:27:50,630 --> 00:27:53,030
it gives you a little comment to you

552
00:27:53,030 --> 00:27:55,070
know notify you that it will overwrite

553
00:27:55,070 --> 00:27:58,610
values in the default slash global llamo

554
00:27:58,610 --> 00:28:01,100
and basically I just put those two key

555
00:28:01,100 --> 00:28:03,290
value pairs and mostly the OSD in it

556
00:28:03,290 --> 00:28:05,570
obviously is here interesting for the

557
00:28:05,570 --> 00:28:07,010
partitioning I've done the same thing

558
00:28:07,010 --> 00:28:10,370
because I also created a default

559
00:28:10,370 --> 00:28:12,260
partitioning a custom partitioning

560
00:28:12,260 --> 00:28:16,820
scheme yeah and then this is in the

561
00:28:16,820 --> 00:28:18,770
pillar so when you then run stage three

562
00:28:18,770 --> 00:28:21,890
that will use your customizations go out

563
00:28:21,890 --> 00:28:24,560
and deploy a safe cluster and we have

564
00:28:24,560 --> 00:28:27,560
now one with 3000 s DS because to the to

565
00:28:27,560 --> 00:28:33,040
one gigabyte disks went into other OS DS

566
00:28:33,040 --> 00:28:38,200
yeah this is just a general workflow

567
00:28:38,200 --> 00:28:41,870
some more things that we can look at is

568
00:28:41,870 --> 00:28:45,470
beyond deployment so I talked about

569
00:28:45,470 --> 00:28:49,280
Stage four already this deals with all

570
00:28:49,280 --> 00:28:52,390
additional services that that AF offers

571
00:28:52,390 --> 00:28:56,120
sacrifice and so MTS's and SEF a fast

572
00:28:56,120 --> 00:28:59,870
deployment obviously I scars the Raiders

573
00:28:59,870 --> 00:29:04,160
gateway we I think we already merged and

574
00:29:04,160 --> 00:29:07,380
as NFS Ganesha or maybe not

575
00:29:07,380 --> 00:29:09,090
but we're working on it so it's it's

576
00:29:09,090 --> 00:29:10,980
gonna be there too and there's some

577
00:29:10,980 --> 00:29:13,620
facilities for managing certain clients

578
00:29:13,620 --> 00:29:16,400
- yeah this is a whole nother

579
00:29:16,400 --> 00:29:20,730
presentation in itself obviously so yeah

580
00:29:20,730 --> 00:29:23,220
but it works the same way it works it's

581
00:29:23,220 --> 00:29:26,520
governed by a policy dot CFG and by this

582
00:29:26,520 --> 00:29:28,290
orchestration file that which you could

583
00:29:28,290 --> 00:29:31,050
customize if you wanted to

584
00:29:31,050 --> 00:29:34,200
Stage five we'll deal with removal of

585
00:29:34,200 --> 00:29:36,720
components so say you want to

586
00:29:36,720 --> 00:29:40,110
decommission one of your OS denotes the

587
00:29:40,110 --> 00:29:44,010
workflow here would be to change your

588
00:29:44,010 --> 00:29:46,800
policy that CFG to not include this

589
00:29:46,800 --> 00:29:51,210
particular minion anymore and run stage

590
00:29:51,210 --> 00:29:53,310
two to push out the configuration and

591
00:29:53,310 --> 00:29:57,120
then run Stage five this will remove the

592
00:29:57,120 --> 00:30:00,390
OSD you can always run stage three and

593
00:30:00,390 --> 00:30:04,110
four - because everything you do in salt

594
00:30:04,110 --> 00:30:06,750
is it impotent so it won't change

595
00:30:06,750 --> 00:30:08,210
anything if there's nothing to change

596
00:30:08,210 --> 00:30:11,160
the idea is that when you decommission

597
00:30:11,160 --> 00:30:13,410
an OSD you you might want to you know

598
00:30:13,410 --> 00:30:16,740
deploy a new OSD with new hardware so if

599
00:30:16,740 --> 00:30:18,480
you do that in one step you obviously

600
00:30:18,480 --> 00:30:21,840
want to run stage three and four before

601
00:30:21,840 --> 00:30:23,370
you take so you want to deploy a new

602
00:30:23,370 --> 00:30:26,240
node before you take out an old one and

603
00:30:26,240 --> 00:30:32,180
yeah this is it we work on some other

604
00:30:41,590 --> 00:30:43,970
Yeah right

605
00:30:43,970 --> 00:30:46,250
okay so question was what about a single

606
00:30:46,250 --> 00:30:50,090
OSD on an OSD note and this is right now

607
00:30:50,090 --> 00:30:51,920
not possible we are working on that

608
00:30:51,920 --> 00:30:54,710
though I mean if the hard drive is

609
00:30:54,710 --> 00:30:57,260
broken you can obviously you know the

610
00:30:57,260 --> 00:30:59,720
osts out already you can just pull it

611
00:30:59,720 --> 00:31:00,830
and put in a new one

612
00:31:00,830 --> 00:31:04,130
restart the service but yeah we're

613
00:31:04,130 --> 00:31:05,990
working on decommissioning single OS

614
00:31:05,990 --> 00:31:11,330
these two yes and that concludes my talk

615
00:31:11,330 --> 00:31:21,220
so any more questions sorry

616
00:31:23,860 --> 00:31:27,340
sorry what

617
00:31:29,270 --> 00:31:33,680
salt SSH I haven't tried that but I

618
00:31:33,680 --> 00:31:34,750
don't see why it wouldn't work

619
00:31:34,750 --> 00:31:38,330
because I mean the the transports are

620
00:31:38,330 --> 00:31:39,980
the question was if this can be used

621
00:31:39,980 --> 00:31:43,850
through salt SSH and I don't think

622
00:31:43,850 --> 00:31:48,170
there's anything you have to undo to to

623
00:31:48,170 --> 00:31:49,550
do that right I mean it's a salt

624
00:31:49,550 --> 00:31:54,260
configuration method so I I would you

625
00:31:54,260 --> 00:31:57,130
know cautiously say it should work and

626
00:31:57,130 --> 00:32:00,430
another question

627
00:32:11,100 --> 00:32:15,990
Oh No so the question was if the the OSD

628
00:32:15,990 --> 00:32:18,150
deployment or proposal process will

629
00:32:18,150 --> 00:32:21,299
include the OS drive and no of course it

630
00:32:21,299 --> 00:32:23,549
won't it will in fact ignore an e

631
00:32:23,549 --> 00:32:25,200
formatted drive that you have in your

632
00:32:25,200 --> 00:32:33,470
OSD notes any more questions

633
00:32:44,010 --> 00:32:51,720
right well I mean no so for two reasons

634
00:32:51,720 --> 00:32:54,299
so changing a Raiders pool you can you

635
00:32:54,299 --> 00:32:58,350
can only increase the PG count and your

636
00:32:58,350 --> 00:33:01,110
salt master has also the admin key so

637
00:33:01,110 --> 00:33:04,020
there is you know in the Raiders command

638
00:33:04,020 --> 00:33:05,970
is already kind of a cluster management

639
00:33:05,970 --> 00:33:13,740
thing so we for win that okay looks like

640
00:33:13,740 --> 00:33:17,460
no more questions then thank you

641
00:33:17,460 --> 00:33:22,869
[Applause]

