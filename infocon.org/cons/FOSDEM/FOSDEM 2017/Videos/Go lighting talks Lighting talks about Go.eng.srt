1
00:00:04,490 --> 00:00:12,920
hi am i audible yeah I guess so I'm a

2
00:00:12,920 --> 00:00:15,590
tool and this is my second FOSDEM and I

3
00:00:15,590 --> 00:00:17,660
just got lucky to get the opportunity to

4
00:00:17,660 --> 00:00:21,439
do a lightning talk earlier in the day

5
00:00:21,439 --> 00:00:25,790
Ron gave a fascinating talk about GoBot

6
00:00:25,790 --> 00:00:27,980
where he mentioned reasons for using

7
00:00:27,980 --> 00:00:31,149
golang which is a concurrency

8
00:00:31,149 --> 00:00:35,989
performance and much more I work for me

9
00:00:35,989 --> 00:00:39,350
now and for us choosing go as the

10
00:00:39,350 --> 00:00:43,010
language of choice was very easy because

11
00:00:43,010 --> 00:00:43,879
of you

12
00:00:43,879 --> 00:00:47,839
us and the vibrant NGO community we got

13
00:00:47,839 --> 00:00:50,629
all the support and help and the love we

14
00:00:50,629 --> 00:00:55,190
needed to build this project I would

15
00:00:55,190 --> 00:00:56,929
like to give a big round of applause to

16
00:00:56,929 --> 00:00:59,109
the organizer of the NGO dev room for

17
00:00:59,109 --> 00:01:01,879
making this event so well I mean can we

18
00:01:01,879 --> 00:01:03,920
give a round applause to our organizers

19
00:01:03,920 --> 00:01:10,399
for this okay so what I'm going to do in

20
00:01:10,399 --> 00:01:14,299
next 30 to 40 second is walk you through

21
00:01:14,299 --> 00:01:16,939
the list of associated projects which we

22
00:01:16,939 --> 00:01:20,919
have written in go which powers menu

23
00:01:23,530 --> 00:01:27,229
concert concert is a console-based

24
00:01:27,229 --> 00:01:29,570
certificate generation to me for letting

25
00:01:29,570 --> 00:01:32,360
let's encrypt we had a community of

26
00:01:32,360 --> 00:01:36,170
users using let's encrypt and that gave

27
00:01:36,170 --> 00:01:38,210
us a reason to write a tool called

28
00:01:38,210 --> 00:01:48,259
concert desync Blake to be Simbi sha-256

29
00:01:48,259 --> 00:01:53,570
CMD and ASM to plan - I won't be saying

30
00:01:53,570 --> 00:01:55,250
much about it because my colleague Frank

31
00:01:55,250 --> 00:01:59,140
earlier in the day already spoke on this

32
00:02:00,640 --> 00:02:04,009
similarly we also have a project mini

33
00:02:04,009 --> 00:02:08,479
fest and s3 verify min FS is a mountable

34
00:02:08,479 --> 00:02:11,690
file system for Mineo as well as Amazon

35
00:02:11,690 --> 00:02:15,680
s3 I don't know if you know but our mini

36
00:02:15,680 --> 00:02:18,330
is open source AWS s3 copy

37
00:02:18,330 --> 00:02:22,860
objects or a solution so this is a

38
00:02:22,860 --> 00:02:24,870
pretty much what my presentation of my

39
00:02:24,870 --> 00:02:26,700
lightning talk is as I said I'll be done

40
00:02:26,700 --> 00:02:28,680
in 30 second I think I'm done with it

41
00:02:28,680 --> 00:02:37,980
thank you everyone and if you have any

42
00:02:37,980 --> 00:02:39,930
question we have a slack Channel feel

43
00:02:39,930 --> 00:02:42,450
free to join in and ask and I'll be here

44
00:02:42,450 --> 00:02:45,660
throughout the day just ask any question

45
00:02:45,660 --> 00:02:46,080
you have

46
00:02:46,080 --> 00:02:52,160
I'll be here happily answer it thank you

47
00:02:52,160 --> 00:02:57,740
[Applause]

48
00:04:02,610 --> 00:04:06,579
hello yeah so basically I just wanted to

49
00:04:06,579 --> 00:04:08,290
do a very quick talk about like keeping

50
00:04:08,290 --> 00:04:10,840
packages backwards compatible so this

51
00:04:10,840 --> 00:04:12,579
going to be just like a few tips the

52
00:04:12,579 --> 00:04:14,409
examples that we are going to see in the

53
00:04:14,409 --> 00:04:16,690
source codes like 78 Avitus Oracle's

54
00:04:16,690 --> 00:04:18,668
I'll be treating a slice later if you

55
00:04:18,668 --> 00:04:21,699
want to go through that the main thing

56
00:04:21,699 --> 00:04:23,110
in terms of keeping backwards

57
00:04:23,110 --> 00:04:25,000
compatibility is that you want to do

58
00:04:25,000 --> 00:04:26,440
your packages to have like very small

59
00:04:26,440 --> 00:04:28,630
api's because anything that you export

60
00:04:28,630 --> 00:04:32,169
any interface anybody wall function you

61
00:04:32,169 --> 00:04:33,340
are committing to it

62
00:04:33,340 --> 00:04:35,139
so it's something that you can never

63
00:04:35,139 --> 00:04:37,930
change because it'll break the code from

64
00:04:37,930 --> 00:04:40,750
people that use your API like I maintain

65
00:04:40,750 --> 00:04:42,910
testify enough sometimes like broken the

66
00:04:42,910 --> 00:04:45,430
test from like the AWS SDK which is not

67
00:04:45,430 --> 00:04:48,130
fun so you need to be very careful with

68
00:04:48,130 --> 00:04:51,940
these things so one of the things that

69
00:04:51,940 --> 00:04:54,880
like sporting fewer interfaces and I see

70
00:04:54,880 --> 00:04:56,530
many people who do something like this

71
00:04:56,530 --> 00:04:59,050
where they have like a packets example

72
00:04:59,050 --> 00:05:00,639
and they have like a new that is written

73
00:05:00,639 --> 00:05:03,280
a service and service an interface with

74
00:05:03,280 --> 00:05:04,720
just like the methods that you want to

75
00:05:04,720 --> 00:05:07,270
implement in the in your service that

76
00:05:07,270 --> 00:05:09,190
you are not exporting this is that then

77
00:05:09,190 --> 00:05:10,990
if you want to do like something new in

78
00:05:10,990 --> 00:05:13,539
your package this is going to break any

79
00:05:13,539 --> 00:05:15,669
any other package that was implemented

80
00:05:15,669 --> 00:05:17,020
your interface because they no longer

81
00:05:17,020 --> 00:05:20,260
satisfy your interface so as a rule of

82
00:05:20,260 --> 00:05:22,870
thumb receive interfaces but return is

83
00:05:22,870 --> 00:05:24,550
trucks because if you are returning

84
00:05:24,550 --> 00:05:26,440
interfaces then you are committing to

85
00:05:26,440 --> 00:05:28,960
not adding more functionality over to

86
00:05:28,960 --> 00:05:32,740
that interface so in this example

87
00:05:32,740 --> 00:05:35,139
instead of like doing like we have like

88
00:05:35,139 --> 00:05:36,699
the service in which in this case is a

89
00:05:36,699 --> 00:05:38,830
struct instead of an interface and we

90
00:05:38,830 --> 00:05:41,050
return the point is to distract and if

91
00:05:41,050 --> 00:05:42,400
you aren't exactly encapsulate things

92
00:05:42,400 --> 00:05:44,050
like don't annex poor fields and like

93
00:05:44,050 --> 00:05:45,849
make sure like that works properly but

94
00:05:45,849 --> 00:05:48,370
don't try to encapsulate your code by it

95
00:05:48,370 --> 00:05:52,240
returning on interface similarly when

96
00:05:52,240 --> 00:05:54,760
you're you should be exporting your

97
00:05:54,760 --> 00:05:56,320
important and your input interfaces

98
00:05:56,320 --> 00:05:58,419
their interface that you're exiting like

99
00:05:58,419 --> 00:06:00,340
I sometimes say people who do something

100
00:06:00,340 --> 00:06:01,449
like this where they have like a

101
00:06:01,449 --> 00:06:03,880
function that takes an input is an

102
00:06:03,880 --> 00:06:05,949
interface and it's not that it's not

103
00:06:05,949 --> 00:06:08,409
exported which means that like looking

104
00:06:08,409 --> 00:06:10,210
for like what that interface actually is

105
00:06:10,210 --> 00:06:11,740
like this habit of like Where's Waldo

106
00:06:11,740 --> 00:06:13,300
you go to the go dog is like okay so

107
00:06:13,300 --> 00:06:15,520
what does this interface needs to be

108
00:06:15,520 --> 00:06:15,830
something

109
00:06:15,830 --> 00:06:17,450
fight you don't know you need to go to

110
00:06:17,450 --> 00:06:19,880
the source code and figure that out so

111
00:06:19,880 --> 00:06:21,680
instead of doing that you should be like

112
00:06:21,680 --> 00:06:23,360
exporting the interfaces that you are

113
00:06:23,360 --> 00:06:25,400
accepting in your exported functions so

114
00:06:25,400 --> 00:06:27,260
that for documentation people need what

115
00:06:27,260 --> 00:06:28,820
they need to know what they need to

116
00:06:28,820 --> 00:06:31,450
implement to satisfy those interfaces

117
00:06:31,450 --> 00:06:33,680
but the thing is that like there's some

118
00:06:33,680 --> 00:06:35,390
times when you are not ready to commit

119
00:06:35,390 --> 00:06:37,250
to the interface and you want to keep

120
00:06:37,250 --> 00:06:38,570
the interface to yourself and you don't

121
00:06:38,570 --> 00:06:39,980
want like other people to be like

122
00:06:39,980 --> 00:06:42,890
implemented and there are inputs so one

123
00:06:42,890 --> 00:06:45,350
example is for example in the in the

124
00:06:45,350 --> 00:06:47,120
standard library in the testing package

125
00:06:47,120 --> 00:06:49,670
you have like two extracts the T and the

126
00:06:49,670 --> 00:06:52,850
B extract just ts used for tests and

127
00:06:52,850 --> 00:06:54,830
before the benchmarks but they have like

128
00:06:54,830 --> 00:06:57,770
a TB interface which basically is like

129
00:06:57,770 --> 00:07:01,010
all the metals like error or fail and

130
00:07:01,010 --> 00:07:04,040
all this stuff but they're exporting

131
00:07:04,040 --> 00:07:05,870
this interface and I see we as we said

132
00:07:05,870 --> 00:07:07,760
like once you export an interface if you

133
00:07:07,760 --> 00:07:09,530
cannot know you can no longer add

134
00:07:09,530 --> 00:07:11,510
anything to the interface because that

135
00:07:11,510 --> 00:07:14,150
breaks backwards compatibility so if you

136
00:07:14,150 --> 00:07:16,670
really want to need not really one if

137
00:07:16,670 --> 00:07:17,900
you really need to do something like

138
00:07:17,900 --> 00:07:19,910
this one trick that they do is that they

139
00:07:19,910 --> 00:07:21,620
have like their interface with all the

140
00:07:21,620 --> 00:07:22,970
methods and they they have like this

141
00:07:22,970 --> 00:07:25,190
method private which is not exported

142
00:07:25,190 --> 00:07:27,950
which means that only their packets is

143
00:07:27,950 --> 00:07:30,950
able to satisfy that interface so you

144
00:07:30,950 --> 00:07:32,600
can go through like the source code and

145
00:07:32,600 --> 00:07:35,300
like the standard library and see like

146
00:07:35,300 --> 00:07:38,120
why you might need to do something like

147
00:07:38,120 --> 00:07:40,460
this but if you need to do it like this

148
00:07:40,460 --> 00:07:43,550
away to do that now with this you're

149
00:07:43,550 --> 00:07:45,350
saying like okay this is an interface

150
00:07:45,350 --> 00:07:47,150
and x14 you can document like what that

151
00:07:47,150 --> 00:07:50,090
interface requires but you are not

152
00:07:50,090 --> 00:07:52,130
committing to not making any changes to

153
00:07:52,130 --> 00:07:56,590
the interface to not adding more methods

154
00:07:58,600 --> 00:08:01,550
one thing one place that I've seen like

155
00:08:01,550 --> 00:08:03,290
that some of these things played really

156
00:08:03,290 --> 00:08:05,660
nicely is we like doing like nice and

157
00:08:05,660 --> 00:08:08,120
optional params so this pattern X

158
00:08:08,120 --> 00:08:11,540
syndrome I've seen from

159
00:08:11,540 --> 00:08:13,550
Dr PC so for example we have a crawler

160
00:08:13,550 --> 00:08:15,320
here that you initialize and you can

161
00:08:15,320 --> 00:08:17,240
crawl a website and like call a function

162
00:08:17,240 --> 00:08:18,890
on every website that you're crawling

163
00:08:18,890 --> 00:08:21,800
like you call it without any options and

164
00:08:21,800 --> 00:08:25,460
then you can do like hey but you only

165
00:08:25,460 --> 00:08:27,500
allow like only can crawl websites with

166
00:08:27,500 --> 00:08:29,270
this cost or only allow

167
00:08:29,270 --> 00:08:31,280
like up to a max depth of four and you

168
00:08:31,280 --> 00:08:33,980
have like optional parameters the way

169
00:08:33,980 --> 00:08:36,530
here PC or disclosure traveler does see

170
00:08:36,530 --> 00:08:38,600
it is like you have mu which is a very

171
00:08:38,600 --> 00:08:41,270
big function that takes option an option

172
00:08:41,270 --> 00:08:43,220
is nothing but like a function that

173
00:08:43,220 --> 00:08:47,120
takes and exported options and returns

174
00:08:47,120 --> 00:08:50,600
another option that is an exporter

175
00:08:50,600 --> 00:08:52,640
because you are the only one who is

176
00:08:52,640 --> 00:08:54,440
going to be able to implement those a

177
00:08:54,440 --> 00:08:57,890
configuration options so you do like

178
00:08:57,890 --> 00:08:59,930
okay with max depth it's tough simple as

179
00:08:59,930 --> 00:09:01,820
this you return the faction and like do

180
00:09:01,820 --> 00:09:04,220
all the thing is you are the only one

181
00:09:04,220 --> 00:09:06,950
who can implement these options then you

182
00:09:06,950 --> 00:09:08,570
have like everything documented in go

183
00:09:08,570 --> 00:09:10,820
dock so you have like option and despite

184
00:09:10,820 --> 00:09:12,320
not being able to like implement other

185
00:09:12,320 --> 00:09:13,940
options you have like all the

186
00:09:13,940 --> 00:09:15,230
documentation for all the options that

187
00:09:15,230 --> 00:09:17,840
you've got so be backwards compatible

188
00:09:17,840 --> 00:09:20,450
and I'll be tweeting out the slides and

189
00:09:20,450 --> 00:09:23,480
if you need anything just be me

190
00:09:23,480 --> 00:09:32,249
[Applause]

191
00:09:54,890 --> 00:09:58,010
[Music]

192
00:12:08,780 --> 00:12:12,030
okay so seek washing any gansan go for

193
00:12:12,030 --> 00:12:13,680
those who they are not aware was chained

194
00:12:13,680 --> 00:12:15,030
against me and she's just doing crazy

195
00:12:15,030 --> 00:12:17,550
things and this is a part of a bigger

196
00:12:17,550 --> 00:12:20,310
system that we be able to work what we

197
00:12:20,310 --> 00:12:22,800
want to do essentially is secret like

198
00:12:22,800 --> 00:12:24,960
worrying over a stream of JSON objects

199
00:12:24,960 --> 00:12:28,170
so we have some JSON objects coming in I

200
00:12:28,170 --> 00:12:30,270
want to be able to filter them sometimes

201
00:12:30,270 --> 00:12:31,890
you could do those kind of things with

202
00:12:31,890 --> 00:12:34,530
systems like storm but we just wanted to

203
00:12:34,530 --> 00:12:37,620
give our own so we said why not so

204
00:12:37,620 --> 00:12:39,330
secret like we're in fortunately there

205
00:12:39,330 --> 00:12:41,430
is this wonderful library written by the

206
00:12:41,430 --> 00:12:43,530
YouTube guys called the DES and they

207
00:12:43,530 --> 00:12:46,470
have a really nice secret parser so

208
00:12:46,470 --> 00:12:49,140
suddenly you can parse sequel which is a

209
00:12:49,140 --> 00:12:52,800
daunting task but it's done for us over

210
00:12:52,800 --> 00:12:55,350
a stream so we can read data from say

211
00:12:55,350 --> 00:12:57,630
Nats a WebSocket go channel doesn't

212
00:12:57,630 --> 00:13:00,120
really matter and just an object so

213
00:13:00,120 --> 00:13:03,620
let's say something that looks like that

214
00:13:03,620 --> 00:13:07,740
so how do we find sequel over streams

215
00:13:07,740 --> 00:13:09,540
well there's a bunch of project for that

216
00:13:09,540 --> 00:13:11,100
like why not

217
00:13:11,100 --> 00:13:14,400
and the calcite project has defined a

218
00:13:14,400 --> 00:13:18,420
new syntax for doing aggregations and

219
00:13:18,420 --> 00:13:20,370
operations of our streams in this case

220
00:13:20,370 --> 00:13:23,700
it would mean over interval then of one

221
00:13:23,700 --> 00:13:26,430
hour do that query with the results or

222
00:13:26,430 --> 00:13:29,940
the data that has come in in between so

223
00:13:29,940 --> 00:13:32,880
how do we build it well we take a string

224
00:13:32,880 --> 00:13:35,820
it doesn't really matter we parse it

225
00:13:35,820 --> 00:13:38,910
into a map of string interface and the

226
00:13:38,910 --> 00:13:42,000
interface horrible then we apply our new

227
00:13:42,000 --> 00:13:44,760
created sequel engine and we return

228
00:13:44,760 --> 00:13:46,410
something that is a map of string

229
00:13:46,410 --> 00:13:48,750
interface so the only thing that you

230
00:13:48,750 --> 00:13:51,200
would change in case if instead of doing

231
00:13:51,200 --> 00:13:53,610
Jason you want to do protobufs well

232
00:13:53,610 --> 00:13:54,990
you're not doing strings you're just

233
00:13:54,990 --> 00:13:56,520
taking something else and you convert it

234
00:13:56,520 --> 00:13:58,290
into a map of string.empty interfaces

235
00:13:58,290 --> 00:14:00,360
and then a time so I've created

236
00:14:00,360 --> 00:14:02,520
something that generates a person object

237
00:14:02,520 --> 00:14:04,860
every five milliseconds it marshals it

238
00:14:04,860 --> 00:14:09,840
it dumps it onto a NAT server that then

239
00:14:09,840 --> 00:14:13,080
I'm taking the internal process the byte

240
00:14:13,080 --> 00:14:15,600
array converting to a string I'm marshal

241
00:14:15,600 --> 00:14:17,520
it into a map string.empty interface i

242
00:14:17,520 --> 00:14:19,680
do the sequel querying and I return the

243
00:14:19,680 --> 00:14:20,760
channel or

244
00:14:20,760 --> 00:14:28,740
my filtered results so in this window I

245
00:14:28,740 --> 00:14:31,290
have a process that is generating all

246
00:14:31,290 --> 00:14:33,120
those objects and dumping them internets

247
00:14:33,120 --> 00:14:36,600
and here is where we are hopefully going

248
00:14:36,600 --> 00:14:40,560
to see it so what does the code look

249
00:14:40,560 --> 00:14:50,100
like okay so we are connecting to Nats

250
00:14:50,100 --> 00:14:52,709
we are doing a query so we define the

251
00:14:52,709 --> 00:14:55,380
new query it select star from and we

252
00:14:55,380 --> 00:14:56,730
forget what from means because it

253
00:14:56,730 --> 00:14:58,110
doesn't have a meaning in this

254
00:14:58,110 --> 00:15:00,750
particular example then we are going to

255
00:15:00,750 --> 00:15:02,760
be having a channel where we are going

256
00:15:02,760 --> 00:15:06,449
to be dumping our input strings and we

257
00:15:06,449 --> 00:15:08,160
will return them we have a read our

258
00:15:08,160 --> 00:15:10,620
queries and this is how we dump the data

259
00:15:10,620 --> 00:15:13,709
from nuts into our query parser let's

260
00:15:13,709 --> 00:15:19,740
see it working yes so we query with

261
00:15:19,740 --> 00:15:24,920
everything and there's all our messages

262
00:15:24,920 --> 00:15:28,050
we can query by filtering for a field

263
00:15:28,050 --> 00:15:31,230
called address country and then suddenly

264
00:15:31,230 --> 00:15:33,899
we will have a flood of data but it's a

265
00:15:33,899 --> 00:15:36,779
map of country whatever we want but then

266
00:15:36,779 --> 00:15:38,910
we can do fancy things like select

267
00:15:38,910 --> 00:15:41,190
address countries country count star and

268
00:15:41,190 --> 00:15:43,319
then we are going to group by country

269
00:15:43,319 --> 00:15:45,360
and we are going to meet a results at

270
00:15:45,360 --> 00:15:51,930
every second so if I run this and I save

271
00:15:51,930 --> 00:15:54,319
before

272
00:15:57,860 --> 00:16:00,530
so every second we are going to have a

273
00:16:00,530 --> 00:16:04,340
bunch of things going out and just for

274
00:16:04,340 --> 00:16:06,350
the finale before they kick me out of

275
00:16:06,350 --> 00:16:09,800
stage we have we can also do order by

276
00:16:09,800 --> 00:16:11,930
say descendent and we want to limit to

277
00:16:11,930 --> 00:16:14,510
fudge results then we can run it and

278
00:16:14,510 --> 00:16:17,390
every second will be seeing five okay

279
00:16:17,390 --> 00:16:20,180
not the first time but you see you only

280
00:16:20,180 --> 00:16:21,500
have five results and they happen to be

281
00:16:21,500 --> 00:16:23,510
quite high numbers instead of the ones

282
00:16:23,510 --> 00:16:25,810
that you would see so it's also sorting

283
00:16:25,810 --> 00:16:28,970
this is going to be open sourced I just

284
00:16:28,970 --> 00:16:31,670
hadn't it ready but you follow me on

285
00:16:31,670 --> 00:16:32,180
Twitter

286
00:16:32,180 --> 00:16:35,330
I will twit when it's available thank

287
00:16:35,330 --> 00:16:35,740
you

288
00:16:35,740 --> 00:16:44,360
[Applause]

289
00:17:13,720 --> 00:17:20,709
okay okay that sounds good all right so

290
00:17:20,709 --> 00:17:22,630
I'm quickly talking about a little bit

291
00:17:22,630 --> 00:17:27,010
about voice over IP audio low latency

292
00:17:27,010 --> 00:17:28,720
communication and go I'll give you a

293
00:17:28,720 --> 00:17:30,340
quick background because this is not the

294
00:17:30,340 --> 00:17:34,240
typical Skype kind of clone this is for

295
00:17:34,240 --> 00:17:36,610
a very particular use case my big hobby

296
00:17:36,610 --> 00:17:38,860
is amateur radio and together with some

297
00:17:38,860 --> 00:17:40,929
friends I built up this station in Spain

298
00:17:40,929 --> 00:17:43,720
we have about two to three thousand kgs

299
00:17:43,720 --> 00:17:47,100
of aluminium and steel in the air and

300
00:17:47,100 --> 00:17:49,270
inside the shack we have plenty of

301
00:17:49,270 --> 00:17:51,179
technology lots of computers radios

302
00:17:51,179 --> 00:17:54,669
amplifiers and so on unfortunately the

303
00:17:54,669 --> 00:17:57,730
stated my our radio station is about 150

304
00:17:57,730 --> 00:17:59,830
kilometers away from Madrid where I live

305
00:17:59,830 --> 00:18:02,260
and it's a little pain in the ass

306
00:18:02,260 --> 00:18:03,580
driving there every now and then

307
00:18:03,580 --> 00:18:05,980
so the idea obviously came up hey why

308
00:18:05,980 --> 00:18:08,919
don't we automate and remote control the

309
00:18:08,919 --> 00:18:10,840
entire station and one of the

310
00:18:10,840 --> 00:18:13,960
fundamental ingredients for that is

311
00:18:13,960 --> 00:18:16,690
obviously the audio so this is the basic

312
00:18:16,690 --> 00:18:19,900
schematic I have on the left side in

313
00:18:19,900 --> 00:18:22,659
Madrid the small remote panel I did some

314
00:18:22,659 --> 00:18:25,059
breakout boxes for the radio control I

315
00:18:25,059 --> 00:18:26,559
wanted to have just there a small

316
00:18:26,559 --> 00:18:29,020
Raspberry Pi and on the other side again

317
00:18:29,020 --> 00:18:30,909
a little bit simplified again Raspberry

318
00:18:30,909 --> 00:18:32,740
Pi doing some stuff and then putting the

319
00:18:32,740 --> 00:18:34,720
audio and the control into the into the

320
00:18:34,720 --> 00:18:37,240
radio I will skip the remote control

321
00:18:37,240 --> 00:18:40,120
stuff and just purely talk about how to

322
00:18:40,120 --> 00:18:42,070
push the audio from left to right and

323
00:18:42,070 --> 00:18:45,250
right to left so the basic requirements

324
00:18:45,250 --> 00:18:47,289
where we need very low latency because

325
00:18:47,289 --> 00:18:49,090
we're controlling a radio and each

326
00:18:49,090 --> 00:18:51,220
millisecond counts because it's not like

327
00:18:51,220 --> 00:18:52,630
talking to somebody where you already

328
00:18:52,630 --> 00:18:54,250
know that you're gonna have he has to

329
00:18:54,250 --> 00:18:55,929
think about something before he responds

330
00:18:55,929 --> 00:18:58,390
you you expect immediately respond so it

331
00:18:58,390 --> 00:19:01,600
latency was probably the main concern

332
00:19:01,600 --> 00:19:05,169
it had to be multi-user compatible so we

333
00:19:05,169 --> 00:19:07,330
wanted to have several people being able

334
00:19:07,330 --> 00:19:09,850
to listen on the radio but only

335
00:19:09,850 --> 00:19:12,970
obviously one can transmit we wanted I

336
00:19:12,970 --> 00:19:15,250
wanted to have the software being

337
00:19:15,250 --> 00:19:18,940
operational for in so a server mode the

338
00:19:18,940 --> 00:19:20,590
one which is connected to the radio and

339
00:19:20,590 --> 00:19:22,990
the client which is obviously then where

340
00:19:22,990 --> 00:19:25,030
the operators have it at home it should

341
00:19:25,030 --> 00:19:26,740
be firewall friendly I'll talk a little

342
00:19:26,740 --> 00:19:28,690
bit later

343
00:19:28,690 --> 00:19:29,830
which would be a command-line

344
00:19:29,830 --> 00:19:32,650
application obviously low CPU low memory

345
00:19:32,650 --> 00:19:34,510
profile because it should run on a

346
00:19:34,510 --> 00:19:37,030
Raspberry Pi so this is the application

347
00:19:37,030 --> 00:19:39,520
is already done the first version is out

348
00:19:39,520 --> 00:19:41,530
I have several guys testing it and so

349
00:19:41,530 --> 00:19:43,000
far the results are good this is a

350
00:19:43,000 --> 00:19:45,640
little bit the software stack just to

351
00:19:45,640 --> 00:19:48,430
give you a quick overview they're really

352
00:19:48,430 --> 00:19:50,530
great libraries one of my favorite ones

353
00:19:50,530 --> 00:19:54,310
SPF 13 VIPRE and Cobra which helps you

354
00:19:54,310 --> 00:19:56,530
enormously to bootstrap your source code

355
00:19:56,530 --> 00:20:00,910
to get started to have a nice flag flag

356
00:20:00,910 --> 00:20:02,920
handling and config file handlings the

357
00:20:02,920 --> 00:20:05,410
serialization is done for protocol

358
00:20:05,410 --> 00:20:08,680
buffers and the transportation layer is

359
00:20:08,680 --> 00:20:10,810
not UDP where everybody tells you use

360
00:20:10,810 --> 00:20:14,950
UDP it is actually MQTT I was very

361
00:20:14,950 --> 00:20:16,420
afraid that this might not work but

362
00:20:16,420 --> 00:20:19,510
actually we have fantastic results the

363
00:20:19,510 --> 00:20:23,110
audio is done with opus the encoding and

364
00:20:23,110 --> 00:20:24,820
obviously raspbian so this is a quick

365
00:20:24,820 --> 00:20:26,770
overview on the left side you see a

366
00:20:26,770 --> 00:20:29,380
small web interface where you can change

367
00:20:29,380 --> 00:20:31,270
the volume adjust the volume open and

368
00:20:31,270 --> 00:20:33,700
close the streams on the left side you

369
00:20:33,700 --> 00:20:36,130
see plenty of configuration parameters

370
00:20:36,130 --> 00:20:38,860
you can use opus or PCM and whatever

371
00:20:38,860 --> 00:20:41,080
kind of combination you want to have so

372
00:20:41,080 --> 00:20:43,810
basically the audio flows from the left

373
00:20:43,810 --> 00:20:46,270
to the right we take the audio we push

374
00:20:46,270 --> 00:20:48,600
it through opus to reduce the bandwidth

375
00:20:48,600 --> 00:20:51,400
we see realize it with protocol buffers

376
00:20:51,400 --> 00:20:53,380
we put a little bit of metadata in it we

377
00:20:53,380 --> 00:20:56,650
push it to MQTT and on the other side we

378
00:20:56,650 --> 00:21:00,430
basically extract everything again the

379
00:21:00,430 --> 00:21:03,310
reason why we took MQTT is because it

380
00:21:03,310 --> 00:21:07,360
allows this pops up feature so several

381
00:21:07,360 --> 00:21:11,050
people can actually subscribe to two

382
00:21:11,050 --> 00:21:13,300
different topics which in this case

383
00:21:13,300 --> 00:21:15,610
makes audio streaming to several people

384
00:21:15,610 --> 00:21:18,790
actually super easy how well does it

385
00:21:18,790 --> 00:21:21,760
perform this is a recent snapshot which

386
00:21:21,760 --> 00:21:23,680
took a friend of mine from the Czech

387
00:21:23,680 --> 00:21:26,170
Republic he has a professional set up

388
00:21:26,170 --> 00:21:28,770
with two Cisco phones and he connected

389
00:21:28,770 --> 00:21:30,970
remote audio the application with the

390
00:21:30,970 --> 00:21:33,370
raspberry PI's in parallel and he took

391
00:21:33,370 --> 00:21:35,950
his oscilloscope and just triggered a

392
00:21:35,950 --> 00:21:37,720
message he receives actually 20

393
00:21:37,720 --> 00:21:39,710
milliseconds and seconds even faster

394
00:21:39,710 --> 00:21:43,940
then tender Cisco phones so that's it

395
00:21:43,940 --> 00:21:45,860
source code is there if you're

396
00:21:45,860 --> 00:22:13,779
interested check it out thank you well

397
00:22:13,779 --> 00:22:18,169
I'm not that prepared and I wanted to

398
00:22:18,169 --> 00:22:23,090
talk about securing your restful api so

399
00:22:23,090 --> 00:22:25,340
let's say you have this web application

400
00:22:25,340 --> 00:22:27,440
it's awesome that's all the stuff you

401
00:22:27,440 --> 00:22:31,309
want it now you want to secure it one

402
00:22:31,309 --> 00:22:36,320
Google and you know about two one Mexico

403
00:22:36,320 --> 00:22:40,309
you know about Open ID Connect so how do

404
00:22:40,309 --> 00:22:43,880
you make how do you enable open up open

405
00:22:43,880 --> 00:22:47,899
ID connect in your goal application web

406
00:22:47,899 --> 00:22:55,460
application so open ID connects is just

407
00:22:55,460 --> 00:22:58,279
a bunch of endpoints that you would have

408
00:22:58,279 --> 00:23:00,409
to implement but there is this project

409
00:23:00,409 --> 00:23:04,179
called Hydra that you can use and you

410
00:23:04,179 --> 00:23:07,659
can connect your web application and

411
00:23:07,659 --> 00:23:11,270
talk to the two Hydra and make that your

412
00:23:11,270 --> 00:23:14,000
clients also like to talk to Hydra and

413
00:23:14,000 --> 00:23:18,289
hydro is gonna handle all the token

414
00:23:18,289 --> 00:23:22,789
exchange stuff so how does it work you

415
00:23:22,789 --> 00:23:26,950
have your mobile client let's say

416
00:23:26,950 --> 00:23:29,600
talking to Hydra

417
00:23:29,600 --> 00:23:32,699
[Music]

418
00:23:36,090 --> 00:23:42,129
so no you don't you have your mobile

419
00:23:42,129 --> 00:23:43,450
client talk to you

420
00:23:43,450 --> 00:23:50,440
sorry client talks to your web

421
00:23:50,440 --> 00:23:58,809
application your web application gets a

422
00:23:58,809 --> 00:24:01,960
token from the client token that was

423
00:24:01,960 --> 00:24:05,499
granted by Hydra and your web

424
00:24:05,499 --> 00:24:09,129
application is gonna ask Hydra if

425
00:24:09,129 --> 00:24:12,700
they're tokens okay is it valid and it

426
00:24:12,700 --> 00:24:18,240
does that the RESTful API and the Hydra

427
00:24:18,240 --> 00:24:26,409
provides one last thing that you would

428
00:24:26,409 --> 00:24:28,330
have to implement when you work with

429
00:24:28,330 --> 00:24:33,460
culture is an ID provider that when your

430
00:24:33,460 --> 00:24:40,029
user is login to your web application or

431
00:24:40,029 --> 00:24:40,779
whatever

432
00:24:40,779 --> 00:24:44,940
it goes to Hydra then Hydra redirects to

433
00:24:44,940 --> 00:24:50,100
your ID connect then this guy

434
00:24:50,100 --> 00:24:53,169
authenticates the user we are I don't

435
00:24:53,169 --> 00:24:57,970
know LDAP or logging firm then it

436
00:24:57,970 --> 00:25:02,190
redirects back user back to Hydra and

437
00:25:02,190 --> 00:25:06,909
now Hydra knows that it can grant some

438
00:25:06,909 --> 00:25:11,490
access and can give back the token yeah

439
00:25:11,490 --> 00:25:21,570
you can do all the stuff I think okay so

440
00:25:23,980 --> 00:25:33,710
one Google and you know everything so so

441
00:25:33,710 --> 00:25:36,050
normally we had another talk that is not

442
00:25:36,050 --> 00:25:41,510
gonna happen so I like Sun sorry but if

443
00:25:41,510 --> 00:25:43,670
you cruise about it I build a video game

444
00:25:43,670 --> 00:25:46,280
and go flappy go for using just go and

445
00:25:46,280 --> 00:25:48,290
SDL - and it's fun and he did the same

446
00:25:48,290 --> 00:25:49,520
and it's fun and if you want to know

447
00:25:49,520 --> 00:25:51,980
more come talk to us and again thank you

448
00:25:51,980 --> 00:25:53,810
so much for organizing this I don't know

449
00:25:53,810 --> 00:25:58,400
anything else thank you everybody for

450
00:25:58,400 --> 00:26:01,840
coming to go room I hope you enjoyed the

451
00:26:01,840 --> 00:26:05,300
talks we had and hopefully see you next

452
00:26:05,300 --> 00:26:07,020
year again

453
00:26:07,020 --> 00:26:12,180
[Applause]

