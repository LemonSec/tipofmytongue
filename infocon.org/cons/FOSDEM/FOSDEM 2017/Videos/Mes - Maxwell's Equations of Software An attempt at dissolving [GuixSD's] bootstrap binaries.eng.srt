1
00:00:04,899 --> 00:00:09,200
via video streaming at Atari this is

2
00:00:09,200 --> 00:00:10,610
Johnny one husband who actually started

3
00:00:10,610 --> 00:00:13,039
with geeks introduced to geeks the last

4
00:00:13,039 --> 00:00:14,719
for them and that's now it's now a major

5
00:00:14,719 --> 00:00:19,000
contributor so welcome young thank you

6
00:00:20,289 --> 00:00:26,869
yes well I was a major major contributor

7
00:00:26,869 --> 00:00:31,369
but my talk is about something that has

8
00:00:31,369 --> 00:00:34,280
to do with geeks and is not geeks

9
00:00:34,280 --> 00:00:37,399
it has derailed my contributions a bit

10
00:00:37,399 --> 00:00:41,350
I've worked on the cross compilation

11
00:00:41,350 --> 00:00:45,760
infrastructure specifically building min

12
00:00:45,760 --> 00:00:51,620
GW cross compiler and had a lot of help

13
00:00:51,620 --> 00:00:55,040
and fun from Manolis who's working on

14
00:00:55,040 --> 00:01:00,160
the hurt you'll stop his talk is next

15
00:01:00,160 --> 00:01:02,420
but this is something completely

16
00:01:02,420 --> 00:01:04,339
different I was inspired to look at

17
00:01:04,339 --> 00:01:11,270
geeks last year started playing I was

18
00:01:11,270 --> 00:01:14,680
running Debian and I've rat geeks for

19
00:01:14,680 --> 00:01:18,200
geeks as a package manager on Debian for

20
00:01:18,200 --> 00:01:21,380
I think three or four months and in that

21
00:01:21,380 --> 00:01:23,930
time I migrated all the packages that I

22
00:01:23,930 --> 00:01:27,080
needed for my own development and for my

23
00:01:27,080 --> 00:01:29,240
clients development that I worked so far

24
00:01:29,240 --> 00:01:32,510
for until everything was packaged in

25
00:01:32,510 --> 00:01:36,110
geeks and then I took the plunge that's

26
00:01:36,110 --> 00:01:40,040
a nice way of doing it going off the

27
00:01:40,040 --> 00:01:42,710
deep end can also be inspiring I guess

28
00:01:42,710 --> 00:01:46,640
because using geeks on Debian can be

29
00:01:46,640 --> 00:01:49,610
done but it it's also it has fragility

30
00:01:49,610 --> 00:01:54,650
aspects so I don't so when I started

31
00:01:54,650 --> 00:01:59,990
doing so what is mess mess is full

32
00:01:59,990 --> 00:02:03,200
source bootstrapping so what is

33
00:02:03,200 --> 00:02:06,979
bootstrapping do I need to explain that

34
00:02:06,979 --> 00:02:10,098
here for who doesn't know about

35
00:02:10,098 --> 00:02:14,099
bootstrapping the bootstrapping problem

36
00:02:14,099 --> 00:02:17,739
okay most of you know so it's the

37
00:02:17,739 --> 00:02:20,049
question where do compilers come from

38
00:02:20,049 --> 00:02:22,450
who compiled the compiler or the

39
00:02:22,450 --> 00:02:30,760
chicken-and-egg problem so how am I

40
00:02:30,760 --> 00:02:34,360
going to do full source bootstrapping my

41
00:02:34,360 --> 00:02:36,910
idea was to write a tiny scheme

42
00:02:36,910 --> 00:02:41,470
interpreter in in hacks or in simple C

43
00:02:41,470 --> 00:02:43,810
and there it gets fuzzy that's why this

44
00:02:43,810 --> 00:02:47,739
stock and when I have the scheme

45
00:02:47,739 --> 00:02:51,760
interpreter in hex what do we do I in in

46
00:02:51,760 --> 00:02:55,209
scheme I write C compiler and the C

47
00:02:55,209 --> 00:03:00,819
compiler then compiles GCC or maybe

48
00:03:00,819 --> 00:03:03,519
guile or and that's another messy point

49
00:03:03,519 --> 00:03:08,650
maybe you have ideas and when mass has a

50
00:03:08,650 --> 00:03:13,540
C compiler than we have messy C which is

51
00:03:13,540 --> 00:03:20,829
the name of the C compiler so I have

52
00:03:20,829 --> 00:03:23,380
something that actually works but I look

53
00:03:23,380 --> 00:03:28,989
at it as being a strategy to test things

54
00:03:28,989 --> 00:03:31,419
out and there are many decisions that

55
00:03:31,419 --> 00:03:34,030
could be made and for me I need

56
00:03:34,030 --> 00:03:37,540
something that works to be able to see

57
00:03:37,540 --> 00:03:41,530
the next step so it's not a goal in

58
00:03:41,530 --> 00:03:43,540
itself I have something like a

59
00:03:43,540 --> 00:03:46,299
proof-of-concept it's not a

60
00:03:46,299 --> 00:03:48,700
general-purpose scheme although it has

61
00:03:48,700 --> 00:03:52,209
aspects of being close to our 6 RS and

62
00:03:52,209 --> 00:03:54,700
it has major gaps and it's not an

63
00:03:54,700 --> 00:03:59,079
alternative for a guy'll but i'm loading

64
00:03:59,079 --> 00:04:03,060
and using guile modules so

65
00:04:04,989 --> 00:04:10,580
filter said it inspiration that's what

66
00:04:10,580 --> 00:04:13,690
happened to me last year

67
00:04:13,690 --> 00:04:16,790
inspired by geeks but now I'm doing mess

68
00:04:16,790 --> 00:04:23,510
so what what do you want so so as a

69
00:04:23,510 --> 00:04:25,270
human being

70
00:04:25,270 --> 00:04:29,979
hacker I'm looking for meaning for

71
00:04:29,979 --> 00:04:36,470
autonomy but also co-creation want to do

72
00:04:36,470 --> 00:04:38,479
something meaning main meaningful and

73
00:04:38,479 --> 00:04:44,240
fun so one of the great things and if

74
00:04:44,240 --> 00:04:47,780
the goal is greater than my inspiration

75
00:04:47,780 --> 00:04:50,419
Rises so an inspiring goal for me is a

76
00:04:50,419 --> 00:04:55,360
planet of enlightened beings why not so

77
00:04:55,360 --> 00:04:59,360
what do I do I look inward I try to be

78
00:04:59,360 --> 00:05:02,990
happy and try to be helpful another

79
00:05:02,990 --> 00:05:05,630
crazy idea which goes in the same

80
00:05:05,630 --> 00:05:08,780
direction as far as I'm concerned is a

81
00:05:08,780 --> 00:05:11,210
world where all software is free totally

82
00:05:11,210 --> 00:05:15,650
crazy idea what I do is I support new

83
00:05:15,650 --> 00:05:20,260
and I create free software

84
00:05:24,620 --> 00:05:32,030
so why am I here at this talk geeks

85
00:05:32,030 --> 00:05:35,039
really inspired me I've looked at the

86
00:05:35,039 --> 00:05:39,270
hurt 10 or 15 years ago and I wanted to

87
00:05:39,270 --> 00:05:43,220
run new but it I didn't manage it and

88
00:05:43,220 --> 00:05:47,460
Geeks feels to me like running new

89
00:05:47,460 --> 00:05:52,740
finally so I just had to do that it's

90
00:05:52,740 --> 00:05:59,990
yeah the Four Freedoms

91
00:06:02,180 --> 00:06:05,480
if you don't know them read them it's

92
00:06:05,480 --> 00:06:10,010
terribly inspiring for me so that was

93
00:06:10,010 --> 00:06:12,560
the actually there's no that the seed

94
00:06:12,560 --> 00:06:14,900
the the four freedoms by Richard

95
00:06:14,900 --> 00:06:15,380
Stallman

96
00:06:15,380 --> 00:06:20,230
got for me got the whole thing started a

97
00:06:20,230 --> 00:06:24,290
lot of things happened but in 2013

98
00:06:24,290 --> 00:06:27,110
before my before I knew about it

99
00:06:27,110 --> 00:06:31,250
debian started the rep reducible builds

100
00:06:31,250 --> 00:06:34,010
a retro builds project it didn't have

101
00:06:34,010 --> 00:06:37,940
that website but the idea was well I

102
00:06:37,940 --> 00:06:45,980
want to all software is free but how how

103
00:06:45,980 --> 00:06:49,990
do I know that the binary that I run

104
00:06:49,990 --> 00:06:52,910
actually was produced from the source

105
00:06:52,910 --> 00:06:55,930
that is free is there any way to

106
00:06:55,930 --> 00:06:59,750
ascertain that well you can study the

107
00:06:59,750 --> 00:07:02,900
compiler and you can see what assembly

108
00:07:02,900 --> 00:07:07,880
comes out and you can that goes but

109
00:07:07,880 --> 00:07:09,680
that's that's very cumbersome you will

110
00:07:09,680 --> 00:07:11,720
have to do that if you compile the

111
00:07:11,720 --> 00:07:14,420
program twice you would maybe have to do

112
00:07:14,420 --> 00:07:19,090
that again because it looks different so

113
00:07:19,090 --> 00:07:23,510
rep reducibility gives you a very easy

114
00:07:23,510 --> 00:07:27,550
test whether

115
00:07:28,350 --> 00:07:32,730
but you can if you cannot reproduce the

116
00:07:32,730 --> 00:07:35,820
same binary twice from a piece of source

117
00:07:35,820 --> 00:07:37,380
code

118
00:07:37,380 --> 00:07:40,110
our differences are they interesting how

119
00:07:40,110 --> 00:07:43,980
are you going to do that so I thought

120
00:07:43,980 --> 00:07:49,400
pepra builds is an very inspiring idea

121
00:07:49,610 --> 00:07:57,240
and then geeks came along and I have a

122
00:07:57,240 --> 00:08:01,910
small summary here for why why

123
00:08:01,910 --> 00:08:05,630
reprobates are so nice

124
00:08:05,970 --> 00:08:08,760
actually there are there are means to an

125
00:08:08,760 --> 00:08:11,520
end we want autonomy and safety that's

126
00:08:11,520 --> 00:08:18,090
basically it so how did we get here why

127
00:08:18,090 --> 00:08:20,910
is reproduce ability and geek so so nice

128
00:08:20,910 --> 00:08:24,570
of course we had Knicks OS who gave us

129
00:08:24,570 --> 00:08:28,020
functional package management and it

130
00:08:28,020 --> 00:08:31,350
made it possible to go or very easy to

131
00:08:31,350 --> 00:08:36,120
go from source to reproducible binaries

132
00:08:36,120 --> 00:08:39,349
and have the full list of dependencies

133
00:08:39,349 --> 00:08:42,500
and be bit for a bit

134
00:08:42,500 --> 00:08:47,010
identical by the bit for a bit identical

135
00:08:47,010 --> 00:08:52,020
and one of the great things about geeks

136
00:08:52,020 --> 00:08:54,900
as a user is something that I would like

137
00:08:54,900 --> 00:08:57,650
to call binary and source transparency

138
00:08:57,650 --> 00:09:01,590
you can if you have a program it's very

139
00:09:01,590 --> 00:09:04,590
easy to package that and deploy it only

140
00:09:04,590 --> 00:09:11,570
for yourself it's it's almost no effort

141
00:09:11,570 --> 00:09:14,640
but you cannot distinguish is from the

142
00:09:14,640 --> 00:09:18,060
rest of the system so philosophically

143
00:09:18,060 --> 00:09:19,920
when you install a package you build it

144
00:09:19,920 --> 00:09:24,060
from source but usually we use the

145
00:09:24,060 --> 00:09:27,120
binary substitute with which makes it a

146
00:09:27,120 --> 00:09:31,200
bit quicker but I will get the same

147
00:09:31,200 --> 00:09:35,580
binary as I as I would have gotten if I

148
00:09:35,580 --> 00:09:38,160
had build it from source so it feels

149
00:09:38,160 --> 00:09:40,930
like building from source would actually

150
00:09:40,930 --> 00:09:43,330
so everything feels like building from

151
00:09:43,330 --> 00:09:48,160
source oh so that's great we have new we

152
00:09:48,160 --> 00:09:50,860
have all source we build everything from

153
00:09:50,860 --> 00:09:55,450
source but there's this bootstrap

154
00:09:55,450 --> 00:10:03,279
binaries thing and that annoyed me it's

155
00:10:03,279 --> 00:10:06,279
only a tiny speck I mean everything is

156
00:10:06,279 --> 00:10:13,020
source everything so here's our

157
00:10:13,020 --> 00:10:16,080
bootstrap graph which is in the manual

158
00:10:16,080 --> 00:10:19,540
so what are we talking about if we talk

159
00:10:19,540 --> 00:10:23,380
about bootstrap binaries it's too small

160
00:10:23,380 --> 00:10:25,570
to read here but it it's a dependency

161
00:10:25,570 --> 00:10:28,839
graph to build the first bootstrap

162
00:10:28,839 --> 00:10:37,089
binaries and here's in text you I was

163
00:10:37,089 --> 00:10:40,029
wondering well what kind of binaries are

164
00:10:40,029 --> 00:10:43,420
we talking about it's only twenty eight

165
00:10:43,420 --> 00:10:48,280
megabytes zipped so the boots are

166
00:10:48,280 --> 00:10:52,570
binaries are 200 megabytes it's not a

167
00:10:52,570 --> 00:10:54,670
real problem we can reproduce them and

168
00:10:54,670 --> 00:11:00,460
we do that but it seems Terrell terribly

169
00:11:00,460 --> 00:11:03,660
big to

170
00:11:05,160 --> 00:11:08,730
so I was wondering about that and then

171
00:11:08,730 --> 00:11:15,580
Orient's J came along and told us about

172
00:11:15,580 --> 00:11:18,610
his hex assembler a self-hosting hex

173
00:11:18,610 --> 00:11:20,440
assembler and I thought wow that's great

174
00:11:20,440 --> 00:11:23,470
if you have a self-hosting hex assembler

175
00:11:23,470 --> 00:11:26,400
maybe we can do away with all sources

176
00:11:26,400 --> 00:11:29,740
but I was still going hex and then it's

177
00:11:29,740 --> 00:11:33,160
the C compiler and I didn't really see

178
00:11:33,160 --> 00:11:38,699
it just get this bit

179
00:11:40,410 --> 00:11:43,139
so I was looking at the bootstrap

180
00:11:43,139 --> 00:11:45,329
problem and that was the hex assembler

181
00:11:45,329 --> 00:11:48,420
and the bootstrap binaries it would fit

182
00:11:48,420 --> 00:11:51,209
in geeks but I didn't see it and then I

183
00:11:51,209 --> 00:11:56,519
stumbled upon an article from Alan Kay

184
00:11:56,519 --> 00:12:02,000
an interview with Alan Kay where he said

185
00:12:02,000 --> 00:12:05,730
the big revelation to me was when I

186
00:12:05,730 --> 00:12:08,819
finally understood that the half page of

187
00:12:08,819 --> 00:12:11,970
code on the bottom page of page the

188
00:12:11,970 --> 00:12:14,970
bottom half of page 13 is an Lisp 1.5

189
00:12:14,970 --> 00:12:18,420
manual was Lisp in itself these were the

190
00:12:18,420 --> 00:12:21,149
Maxwell equations of software so I

191
00:12:21,149 --> 00:12:24,149
thought hmm if you want a bootstrap

192
00:12:24,149 --> 00:12:27,509
system and you want to do that in the

193
00:12:27,509 --> 00:12:31,290
most convenient and small way well then

194
00:12:31,290 --> 00:12:38,759
maybe use something less be so short a

195
00:12:38,759 --> 00:12:42,240
path from hex to GCC is obviously using

196
00:12:42,240 --> 00:12:45,420
the Maxwell equations of software if

197
00:12:45,420 --> 00:12:47,639
they are really the Maxwell equations

198
00:12:47,639 --> 00:12:50,100
then it should be the prettiest path

199
00:12:50,100 --> 00:12:53,310
that you can imagine otherwise other we

200
00:12:53,310 --> 00:12:55,740
have to look for better equations so

201
00:12:55,740 --> 00:12:58,920
that's where the mess comes in so I

202
00:12:58,920 --> 00:13:02,760
looked up the article and this is the

203
00:13:02,760 --> 00:13:06,410
bottom half of page 13

204
00:13:09,360 --> 00:13:14,579
and to be honest I've I had a copy of

205
00:13:14,579 --> 00:13:18,389
sick pea and I read some stuff until the

206
00:13:18,389 --> 00:13:26,279
exercise is calm and then I gave up so

207
00:13:26,279 --> 00:13:28,019
there's this evil apply thing in The

208
00:13:28,019 --> 00:13:31,679
Wizard and was going yeah I know I my

209
00:13:31,679 --> 00:13:35,029
wizard and evil apply what does it mean

210
00:13:35,029 --> 00:13:40,319
but so it looks interesting but I need

211
00:13:40,319 --> 00:13:43,049
to see it and play with it to get a feel

212
00:13:43,049 --> 00:13:45,660
for what it does but I was inspired

213
00:13:45,660 --> 00:13:50,999
enough to try that and naive enough so

214
00:13:50,999 --> 00:13:53,759
this is evil and apply and what happens

215
00:13:53,759 --> 00:13:56,730
is well you want an expression evaluate

216
00:13:56,730 --> 00:13:59,489
it you give to evil and evil says well

217
00:13:59,489 --> 00:14:04,230
there it has multiple components the

218
00:14:04,230 --> 00:14:06,239
start could be a function so let's

219
00:14:06,239 --> 00:14:09,389
evaluate that and the parameters should

220
00:14:09,389 --> 00:14:11,999
be evaluated and unhandy to apply and

221
00:14:11,999 --> 00:14:14,189
apply we'll say no that's a function

222
00:14:14,189 --> 00:14:16,399
that's execute the function something

223
00:14:16,399 --> 00:14:19,139
and so you can you have some primitive

224
00:14:19,139 --> 00:14:23,100
functions garlic wood or cones Adam it's

225
00:14:23,100 --> 00:14:25,709
very simple but it's not hard to imagine

226
00:14:25,709 --> 00:14:28,169
to add a built in or a primitive

227
00:14:28,169 --> 00:14:30,869
function and extend this guy with C

228
00:14:30,869 --> 00:14:33,720
functions or something like so yeah evil

229
00:14:33,720 --> 00:14:35,459
and apply in the core and then you have

230
00:14:35,459 --> 00:14:37,499
some helpers which are not really

231
00:14:37,499 --> 00:14:40,290
interesting and not well they're

232
00:14:40,290 --> 00:14:43,189
interesting but there

233
00:14:44,180 --> 00:14:48,390
they're not interesting so a sock

234
00:14:48,390 --> 00:14:51,690
perilous African and you have the

235
00:14:51,690 --> 00:14:54,060
primitives Adam Kirkwood or cones and

236
00:14:54,060 --> 00:14:57,779
eek so this is the first thing I wrote I

237
00:14:57,779 --> 00:15:02,579
just started to type that in in guile

238
00:15:02,579 --> 00:15:04,709
I made a module where I removed

239
00:15:04,709 --> 00:15:07,890
everything from the guile module and try

240
00:15:07,890 --> 00:15:09,959
to make sure that I was only running

241
00:15:09,959 --> 00:15:12,680
this so here you have apply it's

242
00:15:12,680 --> 00:15:16,490
literally the same as on the page 13 and

243
00:15:16,490 --> 00:15:21,779
there is evil and not so interesting

244
00:15:21,779 --> 00:15:24,320
functions

245
00:15:26,040 --> 00:15:31,810
so great I can write my own evil and

246
00:15:31,810 --> 00:15:34,540
apply that can execute only the basic

247
00:15:34,540 --> 00:15:37,240
primitives and I can write a 10 guile

248
00:15:37,240 --> 00:15:39,790
and execute it beautiful so the next

249
00:15:39,790 --> 00:15:43,600
step was to write it in C well I need to

250
00:15:43,600 --> 00:15:47,440
go to hex but that seemed to be too big

251
00:15:47,440 --> 00:15:53,170
step so I decided to cheat and start

252
00:15:53,170 --> 00:15:58,079
with the C implementation C prototype

253
00:15:59,430 --> 00:16:05,320
and very very soon I found out that Lisp

254
00:16:05,320 --> 00:16:09,490
1.5 is really nice and I I had this evil

255
00:16:09,490 --> 00:16:14,830
apply layout until the beginning of

256
00:16:14,830 --> 00:16:17,890
December and maybe I still want to go

257
00:16:17,890 --> 00:16:24,190
back to that but at first I wanted to

258
00:16:24,190 --> 00:16:29,020
bootstrap using Lisp 1.5 and then on top

259
00:16:29,020 --> 00:16:32,920
of that implement a full scheme because

260
00:16:32,920 --> 00:16:35,620
it's these really are the Maxwell

261
00:16:35,620 --> 00:16:38,050
equations I have a prototype that does

262
00:16:38,050 --> 00:16:42,160
that so then in in scheme you would

263
00:16:42,160 --> 00:16:46,420
extend there's a ad marked rows and

264
00:16:46,420 --> 00:16:49,380
stuff to evil and not touch these

265
00:16:49,380 --> 00:16:51,970
Maxwell equations but it really didn't

266
00:16:51,970 --> 00:16:52,630
perform

267
00:16:52,630 --> 00:16:56,890
so I started messing with the Maxwell

268
00:16:56,890 --> 00:16:59,800
equations then you have something like

269
00:16:59,800 --> 00:17:03,010
closures and difference between symbols

270
00:17:03,010 --> 00:17:07,060
and keywords and specials and how do you

271
00:17:07,060 --> 00:17:11,290
do macros and well there's the syntax

272
00:17:11,290 --> 00:17:14,619
rules thing so what I wanted to do is

273
00:17:14,619 --> 00:17:16,689
when I had the thing running and see I

274
00:17:16,689 --> 00:17:22,420
wanted to have my own C compiler so

275
00:17:22,420 --> 00:17:25,709
first shortest path to success

276
00:17:25,709 --> 00:17:28,630
dumpin elf that binary that I can

277
00:17:28,630 --> 00:17:31,270
execute

278
00:17:31,270 --> 00:17:34,420
starting from a simple main function in

279
00:17:34,420 --> 00:17:42,100
C and with who is sitting here I've had

280
00:17:42,100 --> 00:17:46,780
a lot of help from him describing my

281
00:17:46,780 --> 00:17:48,460
problems he said well what you're doing

282
00:17:48,460 --> 00:17:49,780
is great but you need a garbage

283
00:17:49,780 --> 00:17:54,460
collector I said wow I don't know I

284
00:17:54,460 --> 00:18:05,890
bought 16-gig let's see so I took sick B

285
00:18:05,890 --> 00:18:08,230
and I started reading about the garbage

286
00:18:08,230 --> 00:18:13,570
collector and then I read a footnote

287
00:18:13,570 --> 00:18:16,080
from Ableton and Sussman where they say

288
00:18:16,080 --> 00:18:19,450
well maybe memories may get large enough

289
00:18:19,450 --> 00:18:21,669
so that it would be impossible to run

290
00:18:21,669 --> 00:18:23,110
out of free memory and I thought well

291
00:18:23,110 --> 00:18:35,860
great let's go for that so then I so

292
00:18:35,860 --> 00:18:39,700
here's my minimal ncc parser so I had to

293
00:18:39,700 --> 00:18:43,179
extend the or extended the prototype in

294
00:18:43,179 --> 00:18:49,230
C and a lot of functions in in scheme

295
00:18:49,230 --> 00:18:55,290
just enough that I could run the Lollar

296
00:18:55,290 --> 00:19:03,179
parser by Dominique Boucher and I could

297
00:19:03,179 --> 00:19:07,150
parse this guy and dump an elf binary

298
00:19:07,150 --> 00:19:10,210
and run it and it would print hello

299
00:19:10,210 --> 00:19:15,190
world that was in August and I was I was

300
00:19:15,190 --> 00:19:25,120
going whoa now I'm done well it's not

301
00:19:25,120 --> 00:19:28,409
totally true

302
00:19:30,740 --> 00:19:36,290
the the mess could run the lower parser

303
00:19:36,290 --> 00:19:41,610
and it could parse a simple very not see

304
00:19:41,610 --> 00:19:46,129
but a simple parentheses example

305
00:19:51,529 --> 00:19:55,529
and when I start wanted to when I wanted

306
00:19:55,529 --> 00:20:00,330
to part this guy it it's sack fault it

307
00:20:00,330 --> 00:20:02,220
and I couldn't there were a lot of

308
00:20:02,220 --> 00:20:06,000
problems that I fixed but it kept south

309
00:20:06,000 --> 00:20:08,220
set faulting it ran for five minutes and

310
00:20:08,220 --> 00:20:12,980
then it SEC folded well turned out that

311
00:20:12,980 --> 00:20:17,250
when I accidentally ran top in five

312
00:20:17,250 --> 00:20:19,649
minutes it was consoling through my 16

313
00:20:19,649 --> 00:20:30,960
gates so then I came back to realtor and

314
00:20:30,960 --> 00:20:32,610
I implemented the garbage collector

315
00:20:32,610 --> 00:20:35,340
which took me two months to get all the

316
00:20:35,340 --> 00:20:41,100
bugs out but now I could look at New

317
00:20:41,100 --> 00:20:44,840
York which is a full see partial that we

318
00:20:44,840 --> 00:20:53,279
have what we have and I should speed up

319
00:20:53,279 --> 00:20:55,940
I guess

320
00:20:56,620 --> 00:21:02,020
so where where are we now is we have a

321
00:21:02,020 --> 00:21:06,250
full C parser and what I'm doing now is

322
00:21:06,250 --> 00:21:16,000
writing I have a I've a smaller version

323
00:21:16,000 --> 00:21:18,820
of mass which is seven hundred lines of

324
00:21:18,820 --> 00:21:24,789
C and the compiler that I wrote in

325
00:21:24,789 --> 00:21:30,149
scheme can compile that guy and it can

326
00:21:30,149 --> 00:21:33,570
so where are we

327
00:21:33,870 --> 00:21:39,070
I'm just skipping ahead here it's called

328
00:21:39,070 --> 00:21:44,080
the tiny version of well that I divided

329
00:21:44,080 --> 00:21:46,630
the problem up in in in in smaller parts

330
00:21:46,630 --> 00:21:50,770
I have a tiny mess which can be is a C

331
00:21:50,770 --> 00:21:56,039
compiler that can be executed or by mass

332
00:21:56,039 --> 00:22:02,980
and it can read a dumped file which has

333
00:22:02,980 --> 00:22:05,409
a nice expression and can print it so

334
00:22:05,409 --> 00:22:12,250
mess can compile ya kampala C program of

335
00:22:12,250 --> 00:22:15,039
300 lines that does that and then I have

336
00:22:15,039 --> 00:22:18,270
the next step which I'm still working on

337
00:22:18,270 --> 00:22:26,220
this guy can come the cecum

338
00:22:26,220 --> 00:22:28,780
sorry about that

339
00:22:28,780 --> 00:22:34,590
the the C compiler in this scheme when I

340
00:22:34,590 --> 00:22:40,270
execute that with Kyle can compile can

341
00:22:40,270 --> 00:22:43,900
compile a binary that runs this it reads

342
00:22:43,900 --> 00:22:47,650
an as expression that which cons oh one

343
00:22:47,650 --> 00:22:53,740
and execute that and give the cons mask

344
00:22:53,740 --> 00:23:00,640
a not at the moment do this and I'm

345
00:23:00,640 --> 00:23:02,020
working on that there are some

346
00:23:02,020 --> 00:23:04,890
statements that are still not parsed by

347
00:23:04,890 --> 00:23:10,330
mess there's a geeks package it's not in

348
00:23:10,330 --> 00:23:12,610
geeks itself I wanted to have the

349
00:23:12,610 --> 00:23:14,710
compiler really working so that it's

350
00:23:14,710 --> 00:23:17,260
self hosting expect that in one or two

351
00:23:17,260 --> 00:23:21,160
months to be to have a self hosting C

352
00:23:21,160 --> 00:23:24,030
compiler and scheme

353
00:23:25,660 --> 00:23:28,990
yes so where to go next when will you

354
00:23:28,990 --> 00:23:33,150
have that is that useful at all

355
00:23:33,900 --> 00:23:38,340
that's actually my biggest question I

356
00:23:38,340 --> 00:23:40,780
can imagine it's nice to have a C

357
00:23:40,780 --> 00:23:45,460
compiler in guy'll but a serious C

358
00:23:45,460 --> 00:23:47,680
compiler project in guile would mean

359
00:23:47,680 --> 00:23:51,300
that if I use that in mass mass would

360
00:23:51,300 --> 00:23:54,310
have to be more mature and I don't want

361
00:23:54,310 --> 00:23:57,040
to rebuild Kyle because we already have

362
00:23:57,040 --> 00:23:58,260
that

363
00:23:58,260 --> 00:24:06,580
so mmm maybe make guile so easy that it

364
00:24:06,580 --> 00:24:13,090
can self host itself and then there's

365
00:24:13,090 --> 00:24:15,220
Chris Webber who said well yeah you have

366
00:24:15,220 --> 00:24:18,340
that how if you look at pre scheme

367
00:24:18,340 --> 00:24:22,900
because your prototype is in C why not

368
00:24:22,900 --> 00:24:28,030
start from a schema SH language or you

369
00:24:28,030 --> 00:24:32,020
have a compiler anyway so take the the

370
00:24:32,020 --> 00:24:36,280
work on pre scheme and don't well throw

371
00:24:36,280 --> 00:24:43,050
away the the see the the C source oh

372
00:24:43,080 --> 00:24:47,400
yeah yes sir

373
00:24:47,400 --> 00:24:53,050
pre steam is a subset of scheme which is

374
00:24:53,050 --> 00:24:59,050
part of scheme 48 and scheme 48 will

375
00:24:59,050 --> 00:25:05,230
take three scheme and compile that to C

376
00:25:05,230 --> 00:25:11,470
and then the C is compiled so yeah

377
00:25:11,470 --> 00:25:15,580
scheme is taken as a source library but

378
00:25:15,580 --> 00:25:17,530
as we have a C compiler we don't need to

379
00:25:17,530 --> 00:25:19,780
go to C we can take that as an

380
00:25:19,780 --> 00:25:26,260
intermediate stage yeah so that's what

381
00:25:26,260 --> 00:25:28,000
I'm trying to do get rid of the

382
00:25:28,000 --> 00:25:29,440
bootstrap binaries and I have something

383
00:25:29,440 --> 00:25:33,460
that work that works but I'm wondering

384
00:25:33,460 --> 00:25:35,820
if it's useful at all and what the next

385
00:25:35,820 --> 00:25:40,200
smart step could be so

386
00:25:40,290 --> 00:25:48,480
[Applause]

387
00:26:28,110 --> 00:26:43,240
this running video because making good

388
00:26:43,240 --> 00:26:47,530
star running back role is well risky and

389
00:26:47,530 --> 00:26:49,780
then just running some very even

390
00:26:49,780 --> 00:26:51,970
but we don't see gesture or that

391
00:26:51,970 --> 00:26:55,690
literally okay thank you

392
00:26:55,690 --> 00:27:01,380
let's talk about that yep

393
00:27:01,760 --> 00:27:06,890
so they get from the DMV a compiler can

394
00:27:06,890 --> 00:27:13,670
miss yes no no no sorry

395
00:27:13,670 --> 00:27:17,900
no it can compile the the tiny mess

396
00:27:17,900 --> 00:27:20,690
thing the thing that reads as expression

397
00:27:20,690 --> 00:27:26,360
and display it the the one that runs

398
00:27:26,360 --> 00:27:29,660
cons needs some more constructions in C

399
00:27:29,660 --> 00:27:33,520
but that's just more work

400
00:27:43,780 --> 00:27:47,420
[Applause]

