1
00:00:00,000 --> 00:00:03,050
I would like to introduce

2
00:00:04,790 --> 00:00:07,729
you Hobart kareo from a redhead who is

3
00:00:07,729 --> 00:00:10,070
going to present about a TLS test

4
00:00:10,070 --> 00:00:20,420
framework thank you thank you for coming

5
00:00:20,420 --> 00:00:24,349
for the presentation as Nico said I'll

6
00:00:24,349 --> 00:00:29,079
be talking about TLS testing and

7
00:00:29,079 --> 00:00:32,558
verifying that it's actually correct and

8
00:00:32,558 --> 00:00:38,780
properly configured so SSL is dead let's

9
00:00:38,780 --> 00:00:42,890
go let's start calling it tls/ssl was

10
00:00:42,890 --> 00:00:45,050
the first version that was actually

11
00:00:45,050 --> 00:00:49,760
published but now all both both of those

12
00:00:49,760 --> 00:00:53,120
versions are duplicated insecure and you

13
00:00:53,120 --> 00:00:54,950
shouldn't use as a cell the only

14
00:00:54,950 --> 00:00:58,489
versions that are secure are TLS 1.0 and

15
00:00:58,489 --> 00:01:02,780
up so what is still has the Alessi's

16
00:01:02,780 --> 00:01:05,860
transport layer security it's known from

17
00:01:05,860 --> 00:01:08,960
HTTPS so basically every time you go to

18
00:01:08,960 --> 00:01:16,700
Gmail you use you use TLS it's also used

19
00:01:16,700 --> 00:01:21,620
for email security for tor for Internet

20
00:01:21,620 --> 00:01:26,350
of Things communication voice over IP

21
00:01:26,350 --> 00:01:30,070
VPNs so basically any kind of security

22
00:01:30,070 --> 00:01:34,310
its most likely will be TLS so why we

23
00:01:34,310 --> 00:01:37,270
use TLS first is confusion

24
00:01:37,270 --> 00:01:41,690
confidentiality so that the contents of

25
00:01:41,690 --> 00:01:44,900
the communication are spread the

26
00:01:44,900 --> 00:01:47,570
integrity so we make sure that the

27
00:01:47,570 --> 00:01:51,110
communication is as it was sent by the

28
00:01:51,110 --> 00:01:53,540
other side so it wasn't modified on in

29
00:01:53,540 --> 00:01:57,590
transit and authenticity so that the

30
00:01:57,590 --> 00:02:00,320
data comes from the person we think it

31
00:02:00,320 --> 00:02:04,299
comes from also in subsequent messages

32
00:02:04,299 --> 00:02:08,959
so like I said TLS is very old protocol

33
00:02:08,959 --> 00:02:11,900
currently we are pushing more nearly 20

34
00:02:11,900 --> 00:02:16,340
years of age if we are looking at the

35
00:02:16,340 --> 00:02:18,230
actual

36
00:02:18,230 --> 00:02:19,540
[Music]

37
00:02:19,540 --> 00:02:23,060
on the wire data since still a TLS

38
00:02:23,060 --> 00:02:25,970
version 1.2 is very similar to SSL

39
00:02:25,970 --> 00:02:31,370
version 3 so over 20 years now over

40
00:02:31,370 --> 00:02:35,260
those years we had a lot of changes

41
00:02:35,260 --> 00:02:38,990
nearly 70 RFC's was published that

42
00:02:38,990 --> 00:02:42,970
either extend update or duplicate

43
00:02:42,970 --> 00:02:48,680
functionality in SSL or TLS we have also

44
00:02:48,680 --> 00:02:51,709
six wildly deployed drafts that weren't

45
00:02:51,709 --> 00:02:56,170
actually standardized accepted by the

46
00:02:56,170 --> 00:02:59,530
internet Engineering Task Force we have

47
00:02:59,530 --> 00:03:02,900
something like 27 extensions and there

48
00:03:02,900 --> 00:03:06,290
were a lot of fixes for protocol and

49
00:03:06,290 --> 00:03:09,080
implementation bugs like secure for

50
00:03:09,080 --> 00:03:12,170
security negotiation for fallback as CSV

51
00:03:12,170 --> 00:03:16,880
signaling cipher suite value client

52
00:03:16,880 --> 00:03:19,190
hello padding extended master secret

53
00:03:19,190 --> 00:03:21,650
that's protection against the triple

54
00:03:21,650 --> 00:03:26,660
handshake that may the till has very

55
00:03:26,660 --> 00:03:29,989
complex currently we have over 300

56
00:03:29,989 --> 00:03:33,110
cipher suites just official ones there

57
00:03:33,110 --> 00:03:35,840
are also unofficial ones used by very

58
00:03:35,840 --> 00:03:40,130
small majority of minority of clients

59
00:03:40,130 --> 00:03:44,840
and servers we commonly use about 15

60
00:03:44,840 --> 00:03:48,140
different key sizes and types that

61
00:03:48,140 --> 00:03:51,140
includes basically four different crypto

62
00:03:51,140 --> 00:03:54,769
systems commonly used something like 37

63
00:03:54,769 --> 00:03:59,239
different DV Hellman groups 16 signature

64
00:03:59,239 --> 00:04:03,019
and hash algorithm pairs it's our it's a

65
00:04:03,019 --> 00:04:05,090
complex protocol and most of it is a

66
00:04:05,090 --> 00:04:10,790
mess so if we want to test this stuff

67
00:04:10,790 --> 00:04:13,660
using TLS libraries that are already

68
00:04:13,660 --> 00:04:18,079
available to us it's rather hard

69
00:04:18,079 --> 00:04:22,280
most of the TLS implementations really

70
00:04:22,280 --> 00:04:26,390
don't want to send invalid data for some

71
00:04:26,390 --> 00:04:30,039
reason so it

72
00:04:30,039 --> 00:04:32,529
also there's a problem that they want to

73
00:04:32,529 --> 00:04:35,860
duplicate old stuff that they don't want

74
00:04:35,860 --> 00:04:39,580
to already ship with SSL version 2 added

75
00:04:39,580 --> 00:04:44,740
or supported in the in the code so if we

76
00:04:44,740 --> 00:04:47,800
take the newest open SSL you won't be

77
00:04:47,800 --> 00:04:49,990
able to test if the server on the other

78
00:04:49,990 --> 00:04:52,270
side actually supports or not SSL

79
00:04:52,270 --> 00:04:57,219
version 2 because a TLS 1.1 doesn't know

80
00:04:57,219 --> 00:05:01,029
how to generate as SSL version 2 client

81
00:05:01,029 --> 00:05:04,599
hello so it won't get the response from

82
00:05:04,599 --> 00:05:08,529
the other side now we could also use

83
00:05:08,529 --> 00:05:11,229
existing protocol physics for testing

84
00:05:11,229 --> 00:05:13,839
TLS unfortunately TLS is a complex

85
00:05:13,839 --> 00:05:15,999
protocol there is a lot of state

86
00:05:15,999 --> 00:05:17,979
information that it needs to be

87
00:05:17,979 --> 00:05:21,360
maintained between the messages and

88
00:05:21,360 --> 00:05:24,849
there's also the question of encryption

89
00:05:24,849 --> 00:05:28,509
so you need to check you need to be able

90
00:05:28,509 --> 00:05:31,930
to encrypt their messages and know which

91
00:05:31,930 --> 00:05:33,969
ones were already sent which were

92
00:05:33,969 --> 00:05:36,909
concerned and stuff like that so most of

93
00:05:36,909 --> 00:05:39,399
the protocol fuzzers actually are able

94
00:05:39,399 --> 00:05:42,189
to keep very simple or basically no

95
00:05:42,189 --> 00:05:45,490
state so they are aimed at testing stuff

96
00:05:45,490 --> 00:05:48,269
like HTTP which doesn't have state or

97
00:05:48,269 --> 00:05:51,569
SMTP which has very very limited state

98
00:05:51,569 --> 00:05:55,659
so that's why we started working on TLS

99
00:05:55,659 --> 00:05:58,930
father which is the dedicated and

100
00:05:58,930 --> 00:06:04,680
network fuzzing of testing library what

101
00:06:04,680 --> 00:06:09,330
we basically tell as far as a hands-on

102
00:06:09,330 --> 00:06:13,209
Python 2.6 and up so basically on

103
00:06:13,209 --> 00:06:17,649
everything you can imagine so old all

104
00:06:17,649 --> 00:06:20,860
the all distributions shouldn't be are

105
00:06:20,860 --> 00:06:23,459
much much of a problem it has no native

106
00:06:23,459 --> 00:06:26,439
dependencies so as long as Python runs

107
00:06:26,439 --> 00:06:29,309
on this thing you can run a TLS father

108
00:06:29,309 --> 00:06:32,229
we currently have something like sixty

109
00:06:32,229 --> 00:06:34,019
test scripts that test different

110
00:06:34,019 --> 00:06:38,199
features or fields of TLS protocol that

111
00:06:38,199 --> 00:06:41,620
translates to over 18,000 individual

112
00:06:41,620 --> 00:06:42,930
test cases

113
00:06:42,930 --> 00:06:46,050
it's also relatively fast on localhost

114
00:06:46,050 --> 00:06:48,930
I'm able to test something like 300 test

115
00:06:48,930 --> 00:06:53,340
cases per second per core it focuses on

116
00:06:53,340 --> 00:06:57,060
a new crypto and TLS features we are

117
00:06:57,060 --> 00:06:59,520
tested we're using it internally at the

118
00:06:59,520 --> 00:07:03,060
Red Hat for testing new features we that

119
00:07:03,060 --> 00:07:06,560
are being introduced to TLS libraries so

120
00:07:06,560 --> 00:07:09,810
this is the primary focus for the

121
00:07:09,810 --> 00:07:12,450
development it's also a unit tested

122
00:07:12,450 --> 00:07:15,270
currently we have over 95% statement

123
00:07:15,270 --> 00:07:19,620
coverage and we and we it allowed us to

124
00:07:19,620 --> 00:07:22,500
find something like 20 issues in open

125
00:07:22,500 --> 00:07:26,030
SSL new TLS an assasin cluding 1cv

126
00:07:26,030 --> 00:07:28,620
while I'm calling it further

127
00:07:28,620 --> 00:07:31,890
now it's not necess

128
00:07:31,890 --> 00:07:36,350
a father for now it is just a framework

129
00:07:36,350 --> 00:07:40,280
that will allow to build a father and

130
00:07:40,280 --> 00:07:44,250
also while it will be a father then it

131
00:07:44,250 --> 00:07:47,520
will be a TLS protocol father so it will

132
00:07:47,520 --> 00:07:53,070
not work on the level of of bytes sent

133
00:07:53,070 --> 00:07:56,780
on the network it will mostly focus on

134
00:07:56,780 --> 00:08:01,410
modifying the messages so not not

135
00:08:01,410 --> 00:08:03,990
sending invalid messages about sending

136
00:08:03,990 --> 00:08:06,210
invalid fields in their in their

137
00:08:06,210 --> 00:08:10,560
messengers so why should you use the

138
00:08:10,560 --> 00:08:14,990
Olaf's father while we will be testing

139
00:08:14,990 --> 00:08:18,960
TLS implementations and hopefully most

140
00:08:18,960 --> 00:08:23,010
of the programmers that we don't most of

141
00:08:23,010 --> 00:08:24,930
the libraries that we don't ship will

142
00:08:24,930 --> 00:08:28,020
start using TLS father the problem is

143
00:08:28,020 --> 00:08:31,230
that some things are configuration

144
00:08:31,230 --> 00:08:35,840
specific and some behaviors my some

145
00:08:35,840 --> 00:08:39,690
insecure behaviors may be caused by

146
00:08:39,690 --> 00:08:42,830
changes in configuration there are

147
00:08:42,830 --> 00:08:46,320
callbacks in the libraries so if you

148
00:08:46,320 --> 00:08:49,200
have callbacks those callbacks may cause

149
00:08:49,200 --> 00:08:53,430
your server to be insecure despite the

150
00:08:53,430 --> 00:08:55,710
underlying TLS library is so

151
00:08:55,710 --> 00:08:59,220
you're so that helps with integration

152
00:08:59,220 --> 00:09:04,110
testing also you may have some kind of

153
00:09:04,110 --> 00:09:09,180
black box like UPS or a firewall or some

154
00:09:09,180 --> 00:09:11,790
kind of appliance and you want to check

155
00:09:11,790 --> 00:09:14,760
if that appliance will be able if you

156
00:09:14,760 --> 00:09:15,930
will be able to connect to that

157
00:09:15,930 --> 00:09:19,200
appliance with some future future

158
00:09:19,200 --> 00:09:23,400
browsers if the if it won't have TLS 1.3

159
00:09:23,400 --> 00:09:25,890
incompatibilities or TLS 1.4

160
00:09:25,890 --> 00:09:28,230
incompatibilities because TLS as a

161
00:09:28,230 --> 00:09:31,170
protocol has a way to negotiate the

162
00:09:31,170 --> 00:09:35,910
version that is that is commonly

163
00:09:35,910 --> 00:09:37,950
supported between the client and service

164
00:09:37,950 --> 00:09:40,140
but some servers implemented it wrongly

165
00:09:40,140 --> 00:09:42,570
so that was one of the reasons why we

166
00:09:42,570 --> 00:09:47,190
needed a fallback a CSV so that's the

167
00:09:47,190 --> 00:09:49,770
also the forward compatibility and also

168
00:09:49,770 --> 00:09:52,590
you may want to test used TLS father for

169
00:09:52,590 --> 00:09:55,350
testing yourself your server

170
00:09:55,350 --> 00:09:58,710
configuration against obscure clients

171
00:09:58,710 --> 00:10:01,530
since TLS father can generate basically

172
00:10:01,530 --> 00:10:03,420
any kind of messages it can generate

173
00:10:03,420 --> 00:10:06,300
messages which are sent by and commonly

174
00:10:06,300 --> 00:10:09,270
used clients and you may still want to

175
00:10:09,270 --> 00:10:13,340
keep the configuration that is

176
00:10:13,340 --> 00:10:16,080
compatible with them so you can simulate

177
00:10:16,080 --> 00:10:19,080
basically if this dot client and see if

178
00:10:19,080 --> 00:10:21,930
the server will respond and negotiate

179
00:10:21,930 --> 00:10:26,930
the connection so if we want to do that

180
00:10:26,930 --> 00:10:30,300
we basically need to tell the father

181
00:10:30,300 --> 00:10:34,200
first that were to connect which which

182
00:10:34,200 --> 00:10:37,670
host which port which kind of ciphers to

183
00:10:37,670 --> 00:10:40,650
advertise and which in which order what

184
00:10:40,650 --> 00:10:43,380
kind of extensions to to send so we can

185
00:10:43,380 --> 00:10:46,410
send the sni so this is the virtual host

186
00:10:46,410 --> 00:10:49,560
support we can do also supported groups

187
00:10:49,560 --> 00:10:51,780
so this will be for elliptic curve

188
00:10:51,780 --> 00:10:56,280
diffie-hellman signature algorithms data

189
00:10:56,280 --> 00:11:00,990
for TLS 1.2 and finally we tell it to

190
00:11:00,990 --> 00:11:04,170
generate the client hello with those

191
00:11:04,170 --> 00:11:08,340
those values and three point three which

192
00:11:08,340 --> 00:11:09,600
means still as one point

193
00:11:09,600 --> 00:11:13,529
two on the wire and if we as a response

194
00:11:13,529 --> 00:11:16,230
get a surfer follow that means that the

195
00:11:16,230 --> 00:11:18,569
connection will proceed and the server

196
00:11:18,569 --> 00:11:20,880
actually understood our client halau

197
00:11:20,880 --> 00:11:24,569
said okay that sounds like sensible set

198
00:11:24,569 --> 00:11:28,380
of values we will be able to continue it

199
00:11:28,380 --> 00:11:30,480
sends them to server hello and we know

200
00:11:30,480 --> 00:11:32,370
that will be that we are compatible with

201
00:11:32,370 --> 00:11:35,130
it if it does it isn't the case then

202
00:11:35,130 --> 00:11:37,800
servers either will send an alert or

203
00:11:37,800 --> 00:11:39,930
just close the connection both of those

204
00:11:39,930 --> 00:11:42,389
situations will be detected by the

205
00:11:42,389 --> 00:11:48,000
father and the test case will fail okay

206
00:11:48,000 --> 00:11:51,930
so if we want to make a complete

207
00:11:51,930 --> 00:11:53,819
connection this will be look like this

208
00:11:53,819 --> 00:11:55,019
will look something like that

209
00:11:55,019 --> 00:11:57,540
so we again have that clean hello

210
00:11:57,540 --> 00:12:01,019
generator and expect then we expect the

211
00:12:01,019 --> 00:12:04,350
server hello then some some more

212
00:12:04,350 --> 00:12:06,319
messages which are typical for the

213
00:12:06,319 --> 00:12:10,740
communication and at this point we sent

214
00:12:10,740 --> 00:12:13,769
to the server some kind of data here it

215
00:12:13,769 --> 00:12:16,259
could be like a HTTP GET or something

216
00:12:16,259 --> 00:12:18,980
like that and then we can expect

217
00:12:18,980 --> 00:12:22,019
application data from the server so we

218
00:12:22,019 --> 00:12:24,689
can on the put on the TLS protocol

219
00:12:24,689 --> 00:12:29,730
father level we can detect where well

220
00:12:29,730 --> 00:12:32,370
basically we can do HTTP requests and

221
00:12:32,370 --> 00:12:36,360
stuff like that and then we have regular

222
00:12:36,360 --> 00:12:39,240
connection close so we tell that we want

223
00:12:39,240 --> 00:12:41,399
to close the connection and for the

224
00:12:41,399 --> 00:12:43,319
close of the connection the server

225
00:12:43,319 --> 00:12:46,139
should reply with close notify also and

226
00:12:46,139 --> 00:12:49,740
then actually we expect that TCP

227
00:12:49,740 --> 00:13:00,410
connection to be closed now we can also

228
00:13:00,410 --> 00:13:04,949
test for vulnerabilities in open SSL we

229
00:13:04,949 --> 00:13:09,029
had a problem where the server would

230
00:13:09,029 --> 00:13:12,889
accept the change cypher spec message

231
00:13:12,889 --> 00:13:16,350
too early in communication that would

232
00:13:16,350 --> 00:13:20,449
cause the connection to establish

233
00:13:20,449 --> 00:13:21,750
predictable

234
00:13:21,750 --> 00:13:24,410
keys for the encryption and integrity

235
00:13:24,410 --> 00:13:27,420
checks so if you want to see what

236
00:13:27,420 --> 00:13:29,790
happens we basically have to remove all

237
00:13:29,790 --> 00:13:33,450
those red messages and it would not what

238
00:13:33,450 --> 00:13:36,330
we end up with so we sent the change

239
00:13:36,330 --> 00:13:38,610
type respect too early and if we send it

240
00:13:38,610 --> 00:13:40,620
too early we expect the unexpected

241
00:13:40,620 --> 00:13:45,720
message from the other side we can also

242
00:13:45,720 --> 00:13:49,770
create malformed messages so we can like

243
00:13:49,770 --> 00:13:52,080
create a regular kind hello and then

244
00:13:52,080 --> 00:13:54,840
tell it truncate that message that

245
00:13:54,840 --> 00:13:58,110
hunching message by 4 bytes and I

246
00:13:58,110 --> 00:14:01,230
services as a result we should get

247
00:14:01,230 --> 00:14:03,450
decode at home which indicates that the

248
00:14:03,450 --> 00:14:06,750
server has noticed that the message is

249
00:14:06,750 --> 00:14:09,180
malformed because it's missing the news

250
00:14:09,180 --> 00:14:13,200
for last byte and then should close the

251
00:14:13,200 --> 00:14:18,600
connection I've also added recently some

252
00:14:18,600 --> 00:14:22,490
automation for that so you can set up

253
00:14:22,490 --> 00:14:26,820
how to set how to basically start a

254
00:14:26,820 --> 00:14:30,180
server and what what kind of tests to

255
00:14:30,180 --> 00:14:32,910
run against it so here we have an

256
00:14:32,910 --> 00:14:36,810
example for open SSL it sets it up with

257
00:14:36,810 --> 00:14:40,350
some tests test certificates and tell

258
00:14:40,350 --> 00:14:43,170
its tells it to accept connections on

259
00:14:43,170 --> 00:14:48,300
localhost on 4 4 3 3 port that and

260
00:14:48,300 --> 00:14:50,730
against that server will run those two

261
00:14:50,730 --> 00:14:56,660
test cases this can also tell you that

262
00:14:56,660 --> 00:15:00,150
you can exclude some test cases you can

263
00:15:00,150 --> 00:15:02,310
tell it that yeah for that version of

264
00:15:02,310 --> 00:15:06,089
open SSL let's say that the test script

265
00:15:06,089 --> 00:15:08,370
should fail and stuff like that so you

266
00:15:08,370 --> 00:15:11,210
can make sure that you don't have false

267
00:15:11,210 --> 00:15:15,390
positives and false negatives by while

268
00:15:15,390 --> 00:15:17,600
running it so if you run this example

269
00:15:17,600 --> 00:15:20,880
we'll get basically this kind of result

270
00:15:20,880 --> 00:15:23,580
that will tell us that yeah it ran that

271
00:15:23,580 --> 00:15:26,580
test there were no errors so it doesn't

272
00:15:26,580 --> 00:15:29,040
mean anything it's finished and another

273
00:15:29,040 --> 00:15:31,800
test and again finished then killed the

274
00:15:31,800 --> 00:15:36,480
server server was killed by this by them

275
00:15:36,480 --> 00:15:41,740
SiC em signal and it ran in the overall

276
00:15:41,740 --> 00:15:47,020
five test cases non past non failed so

277
00:15:47,020 --> 00:15:54,100
two scripts passed and zero failed now

278
00:15:54,100 --> 00:15:58,600
for the features we support the SSL

279
00:15:58,600 --> 00:16:02,100
version two and up till version TLS 1.2

280
00:16:02,100 --> 00:16:06,630
most of the ciphers so AES CBC GCM

281
00:16:06,630 --> 00:16:10,960
ChaCha 20 this is all supported most of

282
00:16:10,960 --> 00:16:14,230
the basically all of the H max are

283
00:16:14,230 --> 00:16:19,600
supported key exchange both with our

284
00:16:19,600 --> 00:16:22,420
psyches difficult among key exchange and

285
00:16:22,420 --> 00:16:27,610
elliptical t DV Hellman mmm some new

286
00:16:27,610 --> 00:16:30,780
extension so encrypted and then Mac

287
00:16:30,780 --> 00:16:33,910
security negotiation fallback a CSV

288
00:16:33,910 --> 00:16:37,570
extended master secret and also we

289
00:16:37,570 --> 00:16:40,630
supposed to the draft index protocol

290
00:16:40,630 --> 00:16:43,930
negotiation and actually standardized

291
00:16:43,930 --> 00:16:45,370
application layer protocol negotiation

292
00:16:45,370 --> 00:16:48,840
this is necessary for HTTP to

293
00:16:48,840 --> 00:16:52,270
negotiation finish field if you haven't

294
00:16:52,270 --> 00:16:55,360
got negotiation this is actually part of

295
00:16:55,360 --> 00:16:58,570
the support for TLS 1.3 till at 1.3 will

296
00:16:58,570 --> 00:17:01,150
depend on this functionality and also

297
00:17:01,150 --> 00:17:03,220
the server name indication as I showed

298
00:17:03,220 --> 00:17:07,480
before unfortunately has were almost

299
00:17:07,480 --> 00:17:10,839
probe projects most of the stuff is in

300
00:17:10,839 --> 00:17:14,740
progress we are missing support for TLS

301
00:17:14,740 --> 00:17:21,130
1.3 we have just parts of it we also are

302
00:17:21,130 --> 00:17:26,530
working on a recipe SS and x.25 519 this

303
00:17:26,530 --> 00:17:28,600
will probably come in the next 2 months

304
00:17:28,600 --> 00:17:31,390
or something like that we don't have

305
00:17:31,390 --> 00:17:35,680
support for PSK camellia ciphers and one

306
00:17:35,680 --> 00:17:37,540
of the big things is that we don't have

307
00:17:37,540 --> 00:17:42,030
support for ECDSA keys unfortunately and

308
00:17:42,030 --> 00:17:44,590
the upside is that currently something

309
00:17:44,590 --> 00:17:47,080
like 90% of the internet uses Anisakis

310
00:17:47,080 --> 00:17:48,650
so it's not

311
00:17:48,650 --> 00:17:51,500
such such a big such a hurry to to

312
00:17:51,500 --> 00:17:54,350
support it we also don't have hard with

313
00:17:54,350 --> 00:17:56,090
protocol so unfortunately I cannot show

314
00:17:56,090 --> 00:17:59,810
you the heartbleed example and it kept

315
00:17:59,810 --> 00:18:04,520
arrows for more obscure things if you

316
00:18:04,520 --> 00:18:07,240
want to contribute

317
00:18:08,080 --> 00:18:10,520
unfortunately we cannot see but if you

318
00:18:10,520 --> 00:18:13,070
can if you want to contribute the whole

319
00:18:13,070 --> 00:18:16,340
code is and script examples and stuff

320
00:18:16,340 --> 00:18:22,070
like that is on github on the TLS father

321
00:18:22,070 --> 00:18:26,650
repo a deal and father internally uses

322
00:18:26,650 --> 00:18:30,140
TLS light ng implementation this is a

323
00:18:30,140 --> 00:18:34,070
pure Python TLS implementation that I

324
00:18:34,070 --> 00:18:39,350
start for for the for the crypto stuff

325
00:18:39,350 --> 00:18:43,550
and basically like a sr library to code

326
00:18:43,550 --> 00:18:47,210
against and test against the father is

327
00:18:47,210 --> 00:18:50,030
under GPL version two and Sheila slight

328
00:18:50,030 --> 00:18:53,770
Angie's son Terrell GPL version two tags

329
00:18:53,770 --> 00:18:55,910
unfortunately you cannot read them but

330
00:18:55,910 --> 00:18:59,450
tags review request and up for grabs are

331
00:18:59,450 --> 00:19:01,580
for people that want to contribute to

332
00:19:01,580 --> 00:19:04,520
stuff that I would like and I think that

333
00:19:04,520 --> 00:19:09,170
are easiest to contribute to so if you

334
00:19:09,170 --> 00:19:12,770
want to take a look and see if anything

335
00:19:12,770 --> 00:19:16,580
if you don't find anything fancy go

336
00:19:16,580 --> 00:19:20,180
ahead and I'll gladly review that pull

337
00:19:20,180 --> 00:19:24,490
request questions

338
00:19:24,840 --> 00:19:31,919
[Applause]

339
00:19:41,500 --> 00:19:44,600
why--it's can do PG missing feature in

340
00:19:44,600 --> 00:19:52,940
TLS you had it on your slides so the new

341
00:19:52,940 --> 00:19:56,200
PG is basically supported now only by

342
00:19:56,200 --> 00:20:03,140
new TLS nothing else and actually most

343
00:20:03,140 --> 00:20:05,750
likely it will go out from from that too

344
00:20:05,750 --> 00:20:08,240
there's no plans for to add support for

345
00:20:08,240 --> 00:20:11,480
new PG to TLS 1.3 and it's incompatible

346
00:20:11,480 --> 00:20:15,500
with it so it's unlikely we'll we'll see

347
00:20:15,500 --> 00:20:19,040
it and most likely it will be simply

348
00:20:19,040 --> 00:20:26,900
removed from from PG no TLS sorry so you

349
00:20:26,900 --> 00:20:29,030
mentioned that you can like truncate

350
00:20:29,030 --> 00:20:31,460
packets and stuff can you also modify

351
00:20:31,460 --> 00:20:33,530
individual fields from so you have a

352
00:20:33,530 --> 00:20:37,370
length field maybe some client or some

353
00:20:37,370 --> 00:20:39,650
libraries incompatible if you have more

354
00:20:39,650 --> 00:20:41,690
data in an extension or less data than

355
00:20:41,690 --> 00:20:46,610
special I think yes so the question was

356
00:20:46,610 --> 00:20:48,440
if I can do any kind of other

357
00:20:48,440 --> 00:20:51,020
modifications yes I can

358
00:20:51,020 --> 00:20:55,660
there is a lot of modifiers like

359
00:20:55,660 --> 00:20:59,960
mutaters let's call them to the packets

360
00:20:59,960 --> 00:21:04,760
I can inject changes on the handshake

361
00:21:04,760 --> 00:21:07,580
protocol level so I can modify bytes I

362
00:21:07,580 --> 00:21:09,290
can insert bytes

363
00:21:09,290 --> 00:21:14,030
I can XOR them with certain values I can

364
00:21:14,030 --> 00:21:16,700
of course set any kind of values I want

365
00:21:16,700 --> 00:21:19,760
in the archives so if I want a longer I

366
00:21:19,760 --> 00:21:25,190
can just add stuff to it and also I can

367
00:21:25,190 --> 00:21:31,370
inject changes while the encryption is

368
00:21:31,370 --> 00:21:36,140
taking place so in default TLS you the

369
00:21:36,140 --> 00:21:38,510
situation the encryption goes like this

370
00:21:38,510 --> 00:21:41,440
you first have data

371
00:21:41,440 --> 00:21:45,100
and you calculate Mac over it so that

372
00:21:45,100 --> 00:21:47,350
there's integrity checks and I can

373
00:21:47,350 --> 00:21:50,530
modify that Mac value then you have

374
00:21:50,530 --> 00:21:53,170
added padding and again again I can

375
00:21:53,170 --> 00:21:55,480
modify that padding using those kind of

376
00:21:55,480 --> 00:21:57,810
mutators and only after that it is

377
00:21:57,810 --> 00:22:01,120
encrypted and that encrypted data I can

378
00:22:01,120 --> 00:22:08,080
again modify at the arbitrary places we

379
00:22:08,080 --> 00:22:15,580
have time for a few more questions so

380
00:22:15,580 --> 00:22:18,450
what are your testing experience with

381
00:22:18,450 --> 00:22:20,950
existing implementations I mean

382
00:22:20,950 --> 00:22:23,230
especially also TLS hardware

383
00:22:23,230 --> 00:22:25,150
accelerators I mean you don't have to

384
00:22:25,150 --> 00:22:31,510
mention names but how often does TLS

385
00:22:31,510 --> 00:22:34,090
server crash with your when being

386
00:22:34,090 --> 00:22:39,630
accessed with your library so the

387
00:22:39,630 --> 00:22:41,440
overall experience

388
00:22:41,440 --> 00:22:44,020
is that if you can imagine some kind of

389
00:22:44,020 --> 00:22:46,570
air core and bug you will find it on the

390
00:22:46,570 --> 00:22:53,070
internet I haven't tested much servers

391
00:22:53,070 --> 00:22:55,840
like typical typical accelerators and

392
00:22:55,840 --> 00:22:57,970
stuff like that we are focusing on the

393
00:22:57,970 --> 00:23:00,490
stuff we ship in rel so that's NSS good

394
00:23:00,490 --> 00:23:06,150
new TLS and open SSL from those there

395
00:23:06,150 --> 00:23:11,590
are differences in NSS it's usually

396
00:23:11,590 --> 00:23:16,600
quite good we've open SSL it's not

397
00:23:16,600 --> 00:23:19,900
exactly in not exactly stellar and new

398
00:23:19,900 --> 00:23:23,800
TLS is similar as far as RFC compliance

399
00:23:23,800 --> 00:23:27,040
goes I wasn't able to crash in the

400
00:23:27,040 --> 00:23:30,880
either of them mostly the problems are

401
00:23:30,880 --> 00:23:35,800
of the like these accept malformed

402
00:23:35,800 --> 00:23:39,010
messages when they shouldn't but they

403
00:23:39,010 --> 00:23:42,010
interpret that data quite sensibly so

404
00:23:42,010 --> 00:23:45,280
this is in a 99% of the cases this is

405
00:23:45,280 --> 00:23:49,240
not exploitable but you know better safe

406
00:23:49,240 --> 00:23:52,000
than sorry that's my opinion with the

407
00:23:52,000 --> 00:23:55,860
link of dust that kind of problems

408
00:23:56,380 --> 00:23:58,809
if I understood correctly you're not

409
00:23:58,809 --> 00:24:02,179
generating any like fuzzing payload

410
00:24:02,179 --> 00:24:04,700
yourself is it like it's it's not that

411
00:24:04,700 --> 00:24:07,669
you would generate random test cases but

412
00:24:07,669 --> 00:24:10,190
rather you predefined your tests right

413
00:24:10,190 --> 00:24:15,230
have you looked into seis KP for example

414
00:24:15,230 --> 00:24:18,020
what these guys are doing and I don't

415
00:24:18,020 --> 00:24:19,490
know is there any any plan to converge

416
00:24:19,490 --> 00:24:27,580
to escape II say so the payloads are

417
00:24:27,580 --> 00:24:31,669
generated using the TLS father

418
00:24:31,669 --> 00:24:35,659
so the problem the problem is that you

419
00:24:35,659 --> 00:24:38,270
have the encryption in in place so you

420
00:24:38,270 --> 00:24:42,110
have to make sure that like you you have

421
00:24:42,110 --> 00:24:45,230
to pass the data before they it is

422
00:24:45,230 --> 00:24:51,409
encrypted usually and Scotty was

423
00:24:51,409 --> 00:24:54,230
actually one of the library's I was

424
00:24:54,230 --> 00:24:56,809
looking at before before writing it

425
00:24:56,809 --> 00:24:59,299
before starting to work until as father

426
00:24:59,299 --> 00:25:04,460
I is I noticed that it is very hard to

427
00:25:04,460 --> 00:25:06,860
keep that state that is necessary for

428
00:25:06,860 --> 00:25:11,150
encryption in ins copy to be able to

429
00:25:11,150 --> 00:25:14,120
generate the the finished message

430
00:25:14,120 --> 00:25:15,710
because finished messages needs to be

431
00:25:15,710 --> 00:25:19,669
encrypted so basically that was one of

432
00:25:19,669 --> 00:25:24,770
the libraries I excluded from from from

433
00:25:24,770 --> 00:25:27,799
using because I couldn't use I couldn't

434
00:25:27,799 --> 00:25:30,140
basically test it test using it the

435
00:25:30,140 --> 00:25:36,340
first bag I was working on so okay

