1
00:00:05,109 --> 00:00:09,250
okay so I will be talking about

2
00:00:09,250 --> 00:00:12,200
monitoring applications and evolving

3
00:00:12,200 --> 00:00:15,139
from text logs to extensive automatic

4
00:00:15,139 --> 00:00:18,470
monitoring my name is certificate I'm

5
00:00:18,470 --> 00:00:21,890
working at shop where in Germany I'm the

6
00:00:21,890 --> 00:00:23,960
one of the developers for shop where

7
00:00:23,960 --> 00:00:27,080
connect yeah you can follow me on

8
00:00:27,080 --> 00:00:32,089
Twitter maybe one of my my main project

9
00:00:32,089 --> 00:00:36,470
is shopper Connect I were using this as

10
00:00:36,470 --> 00:00:38,210
an example because I'm mainly

11
00:00:38,210 --> 00:00:40,370
responsible for DevOps in this project

12
00:00:40,370 --> 00:00:43,040
and taking care of the service keeping

13
00:00:43,040 --> 00:00:45,350
them running and if anything bad happens

14
00:00:45,350 --> 00:00:49,610
I'm the person who will be asked and I

15
00:00:49,610 --> 00:00:52,879
should at least give them some Intel

16
00:00:52,879 --> 00:00:56,869
what exactly is happening right now yeah

17
00:00:56,869 --> 00:01:00,199
so just a little bit about what shopper

18
00:01:00,199 --> 00:01:02,720
connect is connected may application

19
00:01:02,720 --> 00:01:04,309
where suppliers immersion is an

20
00:01:04,309 --> 00:01:06,680
e-commerce application where suppliers

21
00:01:06,680 --> 00:01:08,770
and merchants can connect to each other

22
00:01:08,770 --> 00:01:11,570
suppliers can supply products to the

23
00:01:11,570 --> 00:01:13,579
platform and merchants can subscribe to

24
00:01:13,579 --> 00:01:16,880
the products the order is then if

25
00:01:16,880 --> 00:01:19,039
somebody orders something in the

26
00:01:19,039 --> 00:01:21,530
merchants shop the order is directly

27
00:01:21,530 --> 00:01:25,999
submitted to the supplier for me that

28
00:01:25,999 --> 00:01:28,429
means that I have to synchronize product

29
00:01:28,429 --> 00:01:30,799
data including prices descriptions

30
00:01:30,799 --> 00:01:34,939
availability everything images I have to

31
00:01:34,939 --> 00:01:36,740
synchronize orders I have to make sure

32
00:01:36,740 --> 00:01:39,229
that if an order is being placed both

33
00:01:39,229 --> 00:01:41,359
supplier and merchants are on same term

34
00:01:41,359 --> 00:01:44,149
on equal terms on this order so that the

35
00:01:44,149 --> 00:01:46,249
prices are right availability is right

36
00:01:46,249 --> 00:01:50,270
and everything is fine so the system

37
00:01:50,270 --> 00:01:53,329
really needs to run but all the time and

38
00:01:53,329 --> 00:01:56,270
if anything fails that can become pretty

39
00:01:56,270 --> 00:02:00,950
bad one of the things we are using and

40
00:02:00,950 --> 00:02:04,399
that is all the images of crop dam one

41
00:02:04,399 --> 00:02:07,009
of the things we're using to make sure

42
00:02:07,009 --> 00:02:09,470
that we are finishing all our tasks in

43
00:02:09,470 --> 00:02:11,390
time this being so I'll be talking about

44
00:02:11,390 --> 00:02:13,760
this throughout the application a few

45
00:02:13,760 --> 00:02:16,910
times because it's hard to analyze and

46
00:02:16,910 --> 00:02:18,290
find out what's going on

47
00:02:18,290 --> 00:02:22,659
something crashes with some bins of jobs

48
00:02:22,659 --> 00:02:25,280
Beanstalk is a message queue for

49
00:02:25,280 --> 00:02:27,260
everyone who does not know that the

50
00:02:27,260 --> 00:02:31,459
message queue can be used to make tasks

51
00:02:31,459 --> 00:02:35,150
run as a Cronus lease so you put them

52
00:02:35,150 --> 00:02:38,030
into the message queue and some tasks

53
00:02:38,030 --> 00:02:40,159
handlers pull them from the message

54
00:02:40,159 --> 00:02:42,920
queue so they will be handled that way

55
00:02:42,920 --> 00:02:44,750
you don't have to wait for long running

56
00:02:44,750 --> 00:02:47,510
processes inside your requests or if you

57
00:02:47,510 --> 00:02:49,760
start a command you can just create

58
00:02:49,760 --> 00:02:52,489
tasks push them to the Beanstalk and the

59
00:02:52,489 --> 00:02:54,290
responsible handlers will take care of

60
00:02:54,290 --> 00:02:59,120
it yeah in connect we have seven

61
00:02:59,120 --> 00:03:02,530
individual components index update

62
00:03:02,530 --> 00:03:04,669
specialized components that take care of

63
00:03:04,669 --> 00:03:07,340
several things we have force service I

64
00:03:07,340 --> 00:03:09,889
have to manage two of them are in the

65
00:03:09,889 --> 00:03:12,290
life system behind the load balancer so

66
00:03:12,290 --> 00:03:14,810
they should always be equal the other

67
00:03:14,810 --> 00:03:18,019
two are used for staging systems stating

68
00:03:18,019 --> 00:03:20,150
one is saving to the one is used for QA

69
00:03:20,150 --> 00:03:23,180
purposes there is some stuff going on

70
00:03:23,180 --> 00:03:25,220
and often things break due to do

71
00:03:25,220 --> 00:03:28,699
testings at the demo environments which

72
00:03:28,699 --> 00:03:30,709
can be used to show the stuff to

73
00:03:30,709 --> 00:03:34,819
customers potential customers I have

74
00:03:34,819 --> 00:03:36,949
running 22 cron jobs on each of these

75
00:03:36,949 --> 00:03:38,959
machines that I have to keep track of

76
00:03:38,959 --> 00:03:42,620
which is also sometimes not that easy

77
00:03:42,620 --> 00:03:45,680
33 workers that are managed through a

78
00:03:45,680 --> 00:03:47,889
soup

79
00:03:54,110 --> 00:03:56,640
and

80
00:03:56,640 --> 00:03:59,100
total we have currently two thousand

81
00:03:59,100 --> 00:04:01,890
three hundred users roundabout and 690

82
00:04:01,890 --> 00:04:04,350
thousand products just to give you a

83
00:04:04,350 --> 00:04:07,230
little scale and reproduce around 30

84
00:04:07,230 --> 00:04:09,690
gigabytes of log files each month in

85
00:04:09,690 --> 00:04:11,460
case there goes something wrong I have

86
00:04:11,460 --> 00:04:13,650
to dig dig through these log files so

87
00:04:13,650 --> 00:04:15,829
that might be a problem

88
00:04:15,829 --> 00:04:18,329
Becker monitoring through these we have

89
00:04:18,329 --> 00:04:22,340
a lot of data that I have to manage and

90
00:04:22,340 --> 00:04:24,570
so what is background monitoring

91
00:04:24,570 --> 00:04:28,380
background monitoring monitoring is a

92
00:04:28,380 --> 00:04:31,830
term used to say that I want to find out

93
00:04:31,830 --> 00:04:34,140
what's currently going on monitor show

94
00:04:34,140 --> 00:04:36,600
me the status of my current processes or

95
00:04:36,600 --> 00:04:40,560
whatever is used and managing it with

96
00:04:40,560 --> 00:04:42,600
background I mean that I want to track

97
00:04:42,600 --> 00:04:44,640
keep track of all the other stuff that

98
00:04:44,640 --> 00:04:46,740
is going on here in the background that

99
00:04:46,740 --> 00:04:50,220
I don't have track off through any UI or

100
00:04:50,220 --> 00:04:52,350
anything I don't have no weapons a face

101
00:04:52,350 --> 00:04:55,380
to call my mic runs off to see what a

102
00:04:55,380 --> 00:04:58,320
micron job is doing so any kind of

103
00:04:58,320 --> 00:05:01,470
process demon work whatever you may call

104
00:05:01,470 --> 00:05:03,660
it anything that runs in background and

105
00:05:03,660 --> 00:05:05,850
is fired automatically I want to track

106
00:05:05,850 --> 00:05:09,180
that but how is it working right now

107
00:05:09,180 --> 00:05:11,310
without some some monitoring you

108
00:05:11,310 --> 00:05:13,950
probably get feedback because you don't

109
00:05:13,950 --> 00:05:18,090
have any any measurements you to fix

110
00:05:18,090 --> 00:05:19,979
something before a real crash happens

111
00:05:19,979 --> 00:05:21,840
you will get feedback probably from the

112
00:05:21,840 --> 00:05:24,510
customer so yeah you get a message the

113
00:05:24,510 --> 00:05:27,979
sink is not working right now hmm bad

114
00:05:27,979 --> 00:05:30,600
maybe you there's just some data wrong

115
00:05:30,600 --> 00:05:33,570
for the customers who so you can look

116
00:05:33,570 --> 00:05:35,580
into the database and hopefully fix this

117
00:05:35,580 --> 00:05:38,400
very fast maybe some products are not

118
00:05:38,400 --> 00:05:40,680
updated also thumbs something you

119
00:05:40,680 --> 00:05:44,300
hopefully can fix very fast without

120
00:05:44,300 --> 00:05:47,550
having too many issues or maybe the site

121
00:05:47,550 --> 00:05:51,000
is down this will create chaos this is

122
00:05:51,000 --> 00:05:53,100
not a good good thing to happen you

123
00:05:53,100 --> 00:05:56,340
don't want your site to be down and in

124
00:05:56,340 --> 00:05:57,600
case something like that happens you

125
00:05:57,600 --> 00:06:01,169
need to fix it mmm and to fix it yeah

126
00:06:01,169 --> 00:06:02,910
you probably need to gather some Intel

127
00:06:02,910 --> 00:06:05,550
this is a little screenshot of the log

128
00:06:05,550 --> 00:06:07,590
files we have for connect these are by

129
00:06:07,590 --> 00:06:09,570
far not all of the log files and you see

130
00:06:09,570 --> 00:06:10,410
that there are some

131
00:06:10,410 --> 00:06:13,290
filled it away by lock rotate so these

132
00:06:13,290 --> 00:06:15,720
are old files from the last days this is

133
00:06:15,720 --> 00:06:18,420
a current file if there's something

134
00:06:18,420 --> 00:06:20,010
happening I need to dig through these

135
00:06:20,010 --> 00:06:22,710
files if it happens right now that might

136
00:06:22,710 --> 00:06:24,720
be easy just open the latest log file

137
00:06:24,720 --> 00:06:27,990
and tail it and try to cause the error

138
00:06:27,990 --> 00:06:31,560
again and you may find the exception if

139
00:06:31,560 --> 00:06:33,510
something happens at Friday afternoon

140
00:06:33,510 --> 00:06:35,430
and you're looking at that on Monday you

141
00:06:35,430 --> 00:06:36,810
probably have to go a few files

142
00:06:36,810 --> 00:06:39,180
backwards depending on how many locks

143
00:06:39,180 --> 00:06:41,310
you generate maybe you just have to look

144
00:06:41,310 --> 00:06:45,660
at the lock - or maybe you even rotate

145
00:06:45,660 --> 00:06:50,580
them more often that depends if the

146
00:06:50,580 --> 00:06:53,160
exception happens just in your in one

147
00:06:53,160 --> 00:06:55,650
component that might also be quite easy

148
00:06:55,650 --> 00:06:57,900
just open the log file and everything is

149
00:06:57,900 --> 00:07:01,320
fine you will get a big problem if an

150
00:07:01,320 --> 00:07:03,510
exception is not occurring just in one

151
00:07:03,510 --> 00:07:05,910
simple component but there's several

152
00:07:05,910 --> 00:07:08,100
ones so it spreads throughout your

153
00:07:08,100 --> 00:07:10,080
application then you might have to open

154
00:07:10,080 --> 00:07:13,260
two or three log files to really see

155
00:07:13,260 --> 00:07:14,790
what is happening what caused my

156
00:07:14,790 --> 00:07:17,610
problems and how can I fix them if

157
00:07:17,610 --> 00:07:21,300
that's a few days ago you have to find

158
00:07:21,300 --> 00:07:24,410
that exact time in the log files and

159
00:07:24,410 --> 00:07:29,580
that might be a pretty horrible task so

160
00:07:29,580 --> 00:07:31,380
but what's the problem

161
00:07:31,380 --> 00:07:33,960
the errors already exist if you get

162
00:07:33,960 --> 00:07:35,550
feedback from someone that something's

163
00:07:35,550 --> 00:07:40,230
crashed yeah it already crashed so yeah

164
00:07:40,230 --> 00:07:43,650
that's bad the error already persists so

165
00:07:43,650 --> 00:07:45,870
if the synchronization is not working it

166
00:07:45,870 --> 00:07:47,820
was not once not working

167
00:07:47,820 --> 00:07:51,600
it's not working right now and that's

168
00:07:51,600 --> 00:07:53,910
not good customized regular customers

169
00:07:53,910 --> 00:07:56,280
recognize errors so they lose trust in

170
00:07:56,280 --> 00:07:57,300
your application

171
00:07:57,300 --> 00:08:00,570
if this happens more than once they will

172
00:08:00,570 --> 00:08:03,870
become probably become pretty angry and

173
00:08:03,870 --> 00:08:06,690
if they have to tell you that something

174
00:08:06,690 --> 00:08:09,780
is wrong that they don't have

175
00:08:09,780 --> 00:08:12,750
they can't have trust that you can fix

176
00:08:12,750 --> 00:08:14,010
anything beforehand that you have

177
00:08:14,010 --> 00:08:18,120
control over your application finding

178
00:08:18,120 --> 00:08:19,590
stuff is hard like I just mentioned with

179
00:08:19,590 --> 00:08:21,990
log files and time like I said the

180
00:08:21,990 --> 00:08:23,760
errors persist if you have an error

181
00:08:23,760 --> 00:08:26,070
that is not easy to fix it may take a

182
00:08:26,070 --> 00:08:30,050
whole day or longer to fix the issue and

183
00:08:30,050 --> 00:08:32,729
that whole day the customer can't really

184
00:08:32,729 --> 00:08:34,590
work depending on the error that happens

185
00:08:34,590 --> 00:08:36,960
or your site is down for for about half

186
00:08:36,960 --> 00:08:39,470
a day or a day that's not good

187
00:08:39,470 --> 00:08:43,830
yeah monitoring to the rescue um I will

188
00:08:43,830 --> 00:08:46,220
talk about three different components

189
00:08:46,220 --> 00:08:49,890
local Gators metrics aggregators and

190
00:08:49,890 --> 00:08:52,350
performance analysis these are the three

191
00:08:52,350 --> 00:08:54,720
components we're using connect and these

192
00:08:54,720 --> 00:08:56,970
are three components that really save me

193
00:08:56,970 --> 00:08:58,740
a few times when something was going

194
00:08:58,740 --> 00:09:02,760
wrong on or made me realize that

195
00:09:02,760 --> 00:09:05,960
something can go wrong in the next days

196
00:09:05,960 --> 00:09:09,240
so the first thing lock aggregators what

197
00:09:09,240 --> 00:09:12,450
exactly is a log aggregator or more

198
00:09:12,450 --> 00:09:15,170
precisely what does a log aggregator

199
00:09:15,170 --> 00:09:18,060
first thing it gathers logs so all the

200
00:09:18,060 --> 00:09:20,880
log files we've seen in the past will be

201
00:09:20,880 --> 00:09:22,580
gathered by the log aggregator and

202
00:09:22,580 --> 00:09:27,630
centralized it will index log files this

203
00:09:27,630 --> 00:09:29,850
gives me the ability to search them it

204
00:09:29,850 --> 00:09:32,700
will add a search full-text search for

205
00:09:32,700 --> 00:09:34,890
all the log files and it will add a

206
00:09:34,890 --> 00:09:37,830
chronologically for me so I can jump to

207
00:09:37,830 --> 00:09:39,960
the Friday afternoon and see all

208
00:09:39,960 --> 00:09:42,420
everything that's happening there I can

209
00:09:42,420 --> 00:09:45,090
filter that log files for that exact

210
00:09:45,090 --> 00:09:47,310
time and see what happened what caused

211
00:09:47,310 --> 00:09:50,280
my problems I can group stuff by

212
00:09:50,280 --> 00:09:51,960
environment like I mentioned earlier our

213
00:09:51,960 --> 00:09:54,210
life system is made up of two servers

214
00:09:54,210 --> 00:09:56,970
that means if I have to find something I

215
00:09:56,970 --> 00:09:59,190
would have to jump to each server and

216
00:09:59,190 --> 00:10:01,740
look at the log files and find out is it

217
00:10:01,740 --> 00:10:03,390
just happening on one server or on both

218
00:10:03,390 --> 00:10:07,170
or anything the log aggregator groups

219
00:10:07,170 --> 00:10:09,150
off by environment so I just look at the

220
00:10:09,150 --> 00:10:10,410
production environment at the live

221
00:10:10,410 --> 00:10:13,590
environment and I will see is this

222
00:10:13,590 --> 00:10:16,890
happening just on one server or on both

223
00:10:16,890 --> 00:10:21,090
servers what's going on and something

224
00:10:21,090 --> 00:10:23,670
that's maybe more subtle I can make it

225
00:10:23,670 --> 00:10:26,340
locks available to more people I don't

226
00:10:26,340 --> 00:10:28,380
want to give everyone access to my

227
00:10:28,380 --> 00:10:30,690
service I don't want to give the trainee

228
00:10:30,690 --> 00:10:34,380
access to with SSH to my servers to look

229
00:10:34,380 --> 00:10:37,570
at log files maybe by accident Libre

230
00:10:37,570 --> 00:10:40,120
something on the life system not a good

231
00:10:40,120 --> 00:10:43,390
idea so with the log aggregator it's a

232
00:10:43,390 --> 00:10:45,880
it's basically a website where I can

233
00:10:45,880 --> 00:10:50,680
visit and I can grants more people

234
00:10:50,680 --> 00:10:52,840
access to this service I can also grant

235
00:10:52,840 --> 00:10:55,360
access to the log files to people who

236
00:10:55,360 --> 00:10:57,550
are not familiar with the terminal who

237
00:10:57,550 --> 00:10:59,710
wouldn't even know how to to open the

238
00:10:59,710 --> 00:11:03,010
log files on the service another cool

239
00:11:03,010 --> 00:11:06,490
thing I can learn some messages but

240
00:11:06,490 --> 00:11:09,190
let's look at the log radio the quality

241
00:11:09,190 --> 00:11:13,390
is great this is the this is the

242
00:11:13,390 --> 00:11:15,580
overview of our production environment

243
00:11:15,580 --> 00:11:17,980
you'll see a lot of log files and here's

244
00:11:17,980 --> 00:11:20,620
something I had to jump into and fix it

245
00:11:20,620 --> 00:11:23,370
because we have a critical error here

246
00:11:23,370 --> 00:11:26,680
but I can immediately see that we have

247
00:11:26,680 --> 00:11:29,290
to okay it's not visible we have two

248
00:11:29,290 --> 00:11:31,090
different environments some of the

249
00:11:31,090 --> 00:11:32,740
messages come from the backend one and

250
00:11:32,740 --> 00:11:34,360
some of the messages come from the

251
00:11:34,360 --> 00:11:34,690
backend

252
00:11:34,690 --> 00:11:37,330
too but we see them in one big overview

253
00:11:37,330 --> 00:11:40,240
I can filter the filter the messages

254
00:11:40,240 --> 00:11:43,180
down below and here I could select

255
00:11:43,180 --> 00:11:45,010
production the environment I want to use

256
00:11:45,010 --> 00:11:48,580
all the time by the way this is a tool

257
00:11:48,580 --> 00:11:52,210
called paper trails I'm using there are

258
00:11:52,210 --> 00:11:54,220
plenty other tools out there that can be

259
00:11:54,220 --> 00:11:56,830
used I'm also open source tools this one

260
00:11:56,830 --> 00:12:01,990
is is a paid tool a paid service which

261
00:12:01,990 --> 00:12:03,370
has the advantage there don't have to

262
00:12:03,370 --> 00:12:05,590
set up my own lock aggregator service or

263
00:12:05,590 --> 00:12:07,900
anything but yeah just look for that and

264
00:12:07,900 --> 00:12:11,980
you will find different solutions here I

265
00:12:11,980 --> 00:12:14,740
can see that I am displaying two

266
00:12:14,740 --> 00:12:16,540
different log files in fact there are a

267
00:12:16,540 --> 00:12:19,420
lot of other log files in here but not

268
00:12:19,420 --> 00:12:23,080
currently visible I can also filter them

269
00:12:23,080 --> 00:12:25,180
out so I just see the log files of a

270
00:12:25,180 --> 00:12:28,660
specific file or specific environment or

271
00:12:28,660 --> 00:12:32,620
just one specific server so I've plenty

272
00:12:32,620 --> 00:12:36,780
stuff I can do their alerts I have

273
00:12:36,780 --> 00:12:39,940
quickly mentioned that earlier I can

274
00:12:39,940 --> 00:12:44,170
define alerts we just have basically two

275
00:12:44,170 --> 00:12:46,150
different different alerts they are

276
00:12:46,150 --> 00:12:49,030
duplicated so we will receive a message

277
00:12:49,030 --> 00:12:50,980
in HipChat if something is going wrong

278
00:12:50,980 --> 00:12:51,459
if one

279
00:12:51,459 --> 00:12:54,279
these triggers and I will receive a mail

280
00:12:54,279 --> 00:12:56,920
about the the issue so that even on the

281
00:12:56,920 --> 00:12:58,839
weekends if something really critical

282
00:12:58,839 --> 00:13:01,540
happens I will get a mail and maybe I

283
00:13:01,540 --> 00:13:06,160
can try to fix that or say no I can wait

284
00:13:06,160 --> 00:13:08,279
till Monday

285
00:13:08,279 --> 00:13:11,619
mmm this is how an alert can be

286
00:13:11,619 --> 00:13:14,319
configured you can basically write a

287
00:13:14,319 --> 00:13:17,589
query and just what you've seen down the

288
00:13:17,589 --> 00:13:19,240
search fields you can just copy that and

289
00:13:19,240 --> 00:13:22,209
paste it there you can limit this to a

290
00:13:22,209 --> 00:13:26,949
specific log file or anything typically

291
00:13:26,949 --> 00:13:29,379
you can define a frequency so something

292
00:13:29,379 --> 00:13:31,119
is going wrong I want to be informed in

293
00:13:31,119 --> 00:13:34,170
this case every hour about this error

294
00:13:34,170 --> 00:13:36,970
and you can define a threshold and

295
00:13:36,970 --> 00:13:41,019
sometimes if the filter is getting like

296
00:13:41,019 --> 00:13:43,839
five messages per hour that's fine it's

297
00:13:43,839 --> 00:13:45,040
okay

298
00:13:45,040 --> 00:13:48,490
things can go wrong that might be okay

299
00:13:48,490 --> 00:13:51,040
but if you suddenly receive 60 or 70 of

300
00:13:51,040 --> 00:13:53,199
these messages something may might be

301
00:13:53,199 --> 00:13:57,009
wrong so yeah you can define that some

302
00:13:57,009 --> 00:13:58,689
other things here are some some

303
00:13:58,689 --> 00:14:02,679
definitions for our set yeah that's how

304
00:14:02,679 --> 00:14:04,299
you can define an alert of course this

305
00:14:04,299 --> 00:14:06,629
is bit different from tool to tool but

306
00:14:06,629 --> 00:14:10,569
basically this is this is how things can

307
00:14:10,569 --> 00:14:13,720
be set up but how can you define this

308
00:14:13,720 --> 00:14:16,420
how do you set up such as such a lock

309
00:14:16,420 --> 00:14:19,779
aggregator it's quite simple for UNIX or

310
00:14:19,779 --> 00:14:22,929
Linux system locks you just have to do

311
00:14:22,929 --> 00:14:26,019
these three steps you just have to

312
00:14:26,019 --> 00:14:29,529
detect your system log of at first the

313
00:14:29,529 --> 00:14:34,240
different ones out there so yeah then

314
00:14:34,240 --> 00:14:36,279
you have to change something here this

315
00:14:36,279 --> 00:14:38,019
log and recon file

316
00:14:38,019 --> 00:14:44,079
I had a few lines there and yeah that's

317
00:14:44,079 --> 00:14:48,759
oh can I cannot scroll there it's not

318
00:14:48,759 --> 00:14:52,240
everything yeah Wow the third step was

319
00:14:52,240 --> 00:14:55,119
hidden in the third step you are going

320
00:14:55,119 --> 00:14:58,269
to kill the service the the old service

321
00:14:58,269 --> 00:15:02,589
and make is accept the change that's how

322
00:15:02,589 --> 00:15:04,929
we do it for system logs but in my case

323
00:15:04,929 --> 00:15:05,720
I don't

324
00:15:05,720 --> 00:15:08,029
we want to use system locks I have my

325
00:15:08,029 --> 00:15:11,199
own custom log files I want to to lock

326
00:15:11,199 --> 00:15:13,850
most of the system files don't really

327
00:15:13,850 --> 00:15:17,750
really interest me at all but there is

328
00:15:17,750 --> 00:15:21,259
also a solution for that I can push any

329
00:15:21,259 --> 00:15:24,709
any existing locks to that here is

330
00:15:24,709 --> 00:15:27,110
remote this love that's a tool from my

331
00:15:27,110 --> 00:15:30,050
thing provided by paper trails I just

332
00:15:30,050 --> 00:15:34,129
download that one install it and then

333
00:15:34,129 --> 00:15:38,420
they provide a configuration file this

334
00:15:38,420 --> 00:15:42,019
is the standard setup for the paper

335
00:15:42,019 --> 00:15:45,709
trail I can define different log files

336
00:15:45,709 --> 00:15:50,120
here okay in fact our definition rule is

337
00:15:50,120 --> 00:15:53,000
a bit longer and I can set up the

338
00:15:53,000 --> 00:15:56,060
destination not only for papers for this

339
00:15:56,060 --> 00:16:00,920
also works for other tools here after

340
00:16:00,920 --> 00:16:02,899
I've done that I just start the demon

341
00:16:02,899 --> 00:16:05,269
from for remote this log and the log

342
00:16:05,269 --> 00:16:08,709
files are being pushed to paper trails

343
00:16:08,709 --> 00:16:11,029
yeah so the setup is really quite easy

344
00:16:11,029 --> 00:16:13,550
we've automated this with ansible and

345
00:16:13,550 --> 00:16:17,180
there are just three commands and you're

346
00:16:17,180 --> 00:16:18,009
good to go

347
00:16:18,009 --> 00:16:20,809
very simple that this is also not only

348
00:16:20,809 --> 00:16:23,930
limited to PHP obviously you haven't

349
00:16:23,930 --> 00:16:27,129
seen any any line of PHP code here yet

350
00:16:27,129 --> 00:16:29,959
this can be done for for anything you're

351
00:16:29,959 --> 00:16:34,579
running on the on your machine yeah the

352
00:16:34,579 --> 00:16:38,290
second part the metrics aggregator

353
00:16:38,290 --> 00:16:41,629
what is a metrics aggregator guessing by

354
00:16:41,629 --> 00:16:43,670
the name it's pretty much similar to the

355
00:16:43,670 --> 00:16:47,240
lock Agra Gator just it just uses

356
00:16:47,240 --> 00:16:49,459
metrics but what is the metric metrics

357
00:16:49,459 --> 00:16:51,290
are basically just numbers but in the

358
00:16:51,290 --> 00:16:55,430
context you can see here this is a quick

359
00:16:55,430 --> 00:16:58,279
overview of our metrics this tool is

360
00:16:58,279 --> 00:17:00,769
called liberato same here there are lots

361
00:17:00,769 --> 00:17:03,379
of tools out there depending on what you

362
00:17:03,379 --> 00:17:05,659
currently have and what are you or what

363
00:17:05,659 --> 00:17:09,409
your needs are pick the right tool for

364
00:17:09,409 --> 00:17:14,569
you in this case we have some metrics

365
00:17:14,569 --> 00:17:16,280
here

366
00:17:16,280 --> 00:17:20,150
we have up here you can see we have 164

367
00:17:20,150 --> 00:17:20,869
metrics

368
00:17:20,869 --> 00:17:25,429
push to to the service and the metrics

369
00:17:25,429 --> 00:17:27,380
are really just a number so you can see

370
00:17:27,380 --> 00:17:29,120
here we have both environments back at

371
00:17:29,120 --> 00:17:32,390
one and back and two and every peak or

372
00:17:32,390 --> 00:17:34,130
every point where this line change this

373
00:17:34,130 --> 00:17:37,130
is a number that has been pushed to the

374
00:17:37,130 --> 00:17:42,230
service we define the name for this that

375
00:17:42,230 --> 00:17:45,740
tells us how what kind of data this is

376
00:17:45,740 --> 00:17:47,929
these are really just integer values

377
00:17:47,929 --> 00:17:49,730
float values depending on the context

378
00:17:49,730 --> 00:17:54,230
and without knowing what they are it

379
00:17:54,230 --> 00:17:55,970
wouldn't be very helpful with this data

380
00:17:55,970 --> 00:17:59,720
you can create dashboards like this this

381
00:17:59,720 --> 00:18:01,880
this gives me some information about the

382
00:18:01,880 --> 00:18:03,590
current status of the application in

383
00:18:03,590 --> 00:18:05,570
fact this dashboard I have that on the

384
00:18:05,570 --> 00:18:07,429
TV screen on the opposite side of my

385
00:18:07,429 --> 00:18:09,679
desk so we'll always see this one and if

386
00:18:09,679 --> 00:18:12,350
something goes wrong I can clearly see

387
00:18:12,350 --> 00:18:18,470
that a little example you can't see that

388
00:18:18,470 --> 00:18:23,450
example damn mmm okay this is a view of

389
00:18:23,450 --> 00:18:28,340
the past four weeks down in the left you

390
00:18:28,340 --> 00:18:32,090
have the Beanstalk jobs that are

391
00:18:32,090 --> 00:18:35,870
currently in the EQ and it should look

392
00:18:35,870 --> 00:18:37,700
like this you should have these Peaks

393
00:18:37,700 --> 00:18:40,159
and everything is fine jobs are being

394
00:18:40,159 --> 00:18:42,110
pushed to the queue they are handled and

395
00:18:42,110 --> 00:18:44,659
everything is good

396
00:18:44,659 --> 00:18:47,960
what you don't see here we have I had a

397
00:18:47,960 --> 00:18:51,169
very high peak to the left here so you

398
00:18:51,169 --> 00:18:54,440
basically can't see the these piece from

399
00:18:54,440 --> 00:18:58,820
before there I had around 40,000 jobs in

400
00:18:58,820 --> 00:19:01,429
the Beanstalk hue it was not that bad

401
00:19:01,429 --> 00:19:03,860
it's because yeah nothing was really

402
00:19:03,860 --> 00:19:06,710
broken broken the memory was not super

403
00:19:06,710 --> 00:19:09,320
full no processes has been killed so

404
00:19:09,320 --> 00:19:11,270
without monitoring I wouldn't really

405
00:19:11,270 --> 00:19:12,799
have noticed that something's going

406
00:19:12,799 --> 00:19:15,289
wrong but the queue was filling up more

407
00:19:15,289 --> 00:19:19,159
and more if this would have gone going

408
00:19:19,159 --> 00:19:21,950
on what's going on after one of one or

409
00:19:21,950 --> 00:19:24,350
two days the memory would have been full

410
00:19:24,350 --> 00:19:26,750
and I would have had a real problem the

411
00:19:26,750 --> 00:19:29,030
issue for that was simply that the jobs

412
00:19:29,030 --> 00:19:29,750
couldn't be

413
00:19:29,750 --> 00:19:31,610
as fascist they're being pushed to the

414
00:19:31,610 --> 00:19:37,160
cue if I wouldn't have reacted to that

415
00:19:37,160 --> 00:19:39,490
and seemed that in the right time

416
00:19:39,490 --> 00:19:42,170
process may have been killed or anything

417
00:19:42,170 --> 00:19:45,680
else that would have happened and yeah

418
00:19:45,680 --> 00:19:48,230
that way with the dashboard I have seen

419
00:19:48,230 --> 00:19:51,650
that and I can react to it and fix the

420
00:19:51,650 --> 00:19:55,090
issue before any anyone notices

421
00:19:55,090 --> 00:19:59,830
in this case we also can define alerts

422
00:19:59,830 --> 00:20:03,080
so this is a definition for this as we

423
00:20:03,080 --> 00:20:05,840
only have numbers you can just select

424
00:20:05,840 --> 00:20:07,910
the metric you want so the context of

425
00:20:07,910 --> 00:20:12,080
the number and what the trigger is so in

426
00:20:12,080 --> 00:20:15,650
this case if the average is above 50,000

427
00:20:15,650 --> 00:20:19,940
for 30 minutes then there's something

428
00:20:19,940 --> 00:20:23,000
wrong and the alert will be thrown in

429
00:20:23,000 --> 00:20:25,670
this case this is the indexer so the

430
00:20:25,670 --> 00:20:29,270
component that that takes track of our

431
00:20:29,270 --> 00:20:31,520
products being indexed to an elastic

432
00:20:31,520 --> 00:20:36,200
search database and yeah how is this

433
00:20:36,200 --> 00:20:40,400
being done it's even more simple than

434
00:20:40,400 --> 00:20:45,980
the other one it's just one curl I have

435
00:20:45,980 --> 00:20:49,750
my my user data up there

436
00:20:49,750 --> 00:20:54,860
and I just give some some data so I have

437
00:20:54,860 --> 00:20:57,890
the name for my metric I can define some

438
00:20:57,890 --> 00:20:59,900
tags in our case we have to find what

439
00:20:59,900 --> 00:21:02,240
environment we have so that's back at

440
00:21:02,240 --> 00:21:04,970
one or back and two or whatever and I

441
00:21:04,970 --> 00:21:06,560
just have the name of the metric and the

442
00:21:06,560 --> 00:21:09,200
value this is just a curl I fire in the

443
00:21:09,200 --> 00:21:12,050
PHP code we have written the wrapper for

444
00:21:12,050 --> 00:21:14,960
this so that I just have to pass the

445
00:21:14,960 --> 00:21:16,700
name of the value into the function and

446
00:21:16,700 --> 00:21:19,400
you can call this at any time in your

447
00:21:19,400 --> 00:21:22,730
code to to push the values in fact we

448
00:21:22,730 --> 00:21:25,100
have written one command and symphony

449
00:21:25,100 --> 00:21:28,640
that collects lots of metrics like the

450
00:21:28,640 --> 00:21:31,610
current amount of users and products and

451
00:21:31,610 --> 00:21:35,750
stuff like that and pushes that to to

452
00:21:35,750 --> 00:21:38,290
the brothel

453
00:21:38,400 --> 00:21:42,070
yeah so far so good the last component

454
00:21:42,070 --> 00:21:44,500
performs analyzes this is not only

455
00:21:44,500 --> 00:21:47,710
useful for yeah making your application

456
00:21:47,710 --> 00:21:53,650
run fast yeah why performance this is

457
00:21:53,650 --> 00:21:55,059
not only useful for for making your

458
00:21:55,059 --> 00:21:58,210
application run faster if you realize

459
00:21:58,210 --> 00:22:00,880
that it's quite slow

460
00:22:00,880 --> 00:22:04,030
you can also recognize irregular changes

461
00:22:04,030 --> 00:22:06,700
so you haven't done in deployment or

462
00:22:06,700 --> 00:22:09,550
anything changed and suddenly your

463
00:22:09,550 --> 00:22:12,059
response time of the live environment

464
00:22:12,059 --> 00:22:15,600
goes up then there's something wrong

465
00:22:15,600 --> 00:22:19,330
that might be a bottleneck but you won't

466
00:22:19,330 --> 00:22:21,700
realize it at the beginning

467
00:22:21,700 --> 00:22:24,730
I'll come back to that later and you're

468
00:22:24,730 --> 00:22:27,640
able to gather some Intel so if there's

469
00:22:27,640 --> 00:22:29,200
something going wrong if there's some

470
00:22:29,200 --> 00:22:31,750
regular changes you can easily identify

471
00:22:31,750 --> 00:22:35,290
which exact function call causes the

472
00:22:35,290 --> 00:22:38,110
trouble or if it is a slow SQL statement

473
00:22:38,110 --> 00:22:42,309
or if you have very much data in one

474
00:22:42,309 --> 00:22:47,679
response or anything yeah so this is an

475
00:22:47,679 --> 00:22:50,559
overview of tight ways again this is not

476
00:22:50,559 --> 00:22:56,460
showing completely we have two

477
00:22:56,460 --> 00:23:01,390
environments located here this dashboard

478
00:23:01,390 --> 00:23:04,480
can be used to see what changed in this

479
00:23:04,480 --> 00:23:06,610
application over the last time so I can

480
00:23:06,610 --> 00:23:10,770
see hey the response time dropped by 33%

481
00:23:10,950 --> 00:23:15,340
this is okay for me if it would have

482
00:23:15,340 --> 00:23:16,000
dropped

483
00:23:16,000 --> 00:23:19,600
further or if there it never really

484
00:23:19,600 --> 00:23:21,850
fluctuates in that area and it drops

485
00:23:21,850 --> 00:23:24,490
really to an amount that is not normal

486
00:23:24,490 --> 00:23:26,770
to your application then you also should

487
00:23:26,770 --> 00:23:29,950
worry so not only if the response time

488
00:23:29,950 --> 00:23:32,230
increases also a sudden decrease of the

489
00:23:32,230 --> 00:23:35,410
response time could be bad so this gives

490
00:23:35,410 --> 00:23:37,929
you a good insight what happens also

491
00:23:37,929 --> 00:23:40,300
some requests for minutes and we have

492
00:23:40,300 --> 00:23:42,700
some other data but how does this look

493
00:23:42,700 --> 00:23:46,480
at detail this is the overview of our

494
00:23:46,480 --> 00:23:49,000
social network so the main front entity

495
00:23:49,000 --> 00:23:51,800
customers use we have an average

496
00:23:51,800 --> 00:23:54,440
100 milliseconds here and we can see

497
00:23:54,440 --> 00:23:58,700
that there is some peak in the request

498
00:23:58,700 --> 00:24:01,250
for the side and yeah all the side

499
00:24:01,250 --> 00:24:03,770
reacts to the stuff but we can also see

500
00:24:03,770 --> 00:24:08,510
down here how fast some requests are

501
00:24:08,510 --> 00:24:13,130
like some of them use just 80

502
00:24:13,130 --> 00:24:14,900
milliseconds and we have one here that's

503
00:24:14,900 --> 00:24:19,480
a bit higher it's around 1.3 seconds

504
00:24:19,480 --> 00:24:24,110
maybe we should take care of that what's

505
00:24:24,110 --> 00:24:26,720
currently not visible on the right side

506
00:24:26,720 --> 00:24:30,590
to the memory there is also a row which

507
00:24:30,590 --> 00:24:33,670
indicates the impact of that request

508
00:24:33,670 --> 00:24:37,090
because even if the one action is

509
00:24:37,090 --> 00:24:39,260
needing one point three seconds or

510
00:24:39,260 --> 00:24:41,800
anything if it's just called once a day

511
00:24:41,800 --> 00:24:43,850
it might be okay

512
00:24:43,850 --> 00:24:46,940
it really depends on the situation in

513
00:24:46,940 --> 00:24:49,430
fact the it's they're ordered by impact

514
00:24:49,430 --> 00:24:52,220
so the top response and the 80

515
00:24:52,220 --> 00:24:55,520
milliseconds has the far most impact on

516
00:24:55,520 --> 00:24:58,340
the result from all these other results

517
00:24:58,340 --> 00:25:00,860
the other ones are just around 5% or

518
00:25:00,860 --> 00:25:04,880
something so yeah but let's look at

519
00:25:04,880 --> 00:25:06,650
these start action because that's quite

520
00:25:06,650 --> 00:25:09,770
high we can also get a bigger an

521
00:25:09,770 --> 00:25:12,740
overview of the last calls and how

522
00:25:12,740 --> 00:25:14,600
things change and here we can also see

523
00:25:14,600 --> 00:25:19,190
that some of the calls you just need if

524
00:25:19,190 --> 00:25:22,490
you tie a very very low time so 500 now

525
00:25:22,490 --> 00:25:25,730
okay very low as is ligh but 500

526
00:25:25,730 --> 00:25:27,980
milliseconds and sometimes the database

527
00:25:27,980 --> 00:25:31,880
call takes over two seconds

528
00:25:31,880 --> 00:25:34,220
so yeah you can investigate further you

529
00:25:34,220 --> 00:25:38,420
can also see here with these labels they

530
00:25:38,420 --> 00:25:42,260
indicate slow queries not so slow

531
00:25:42,260 --> 00:25:44,560
sometimes not so slow that they will be

532
00:25:44,560 --> 00:25:47,030
recognized by your hardware monitoring

533
00:25:47,030 --> 00:25:51,740
or anything or your hoster but they are

534
00:25:51,740 --> 00:25:53,840
regularly slow for you or for your

535
00:25:53,840 --> 00:25:57,110
applications so you can handle them you

536
00:25:57,110 --> 00:25:59,960
also can get tech traces and more

537
00:25:59,960 --> 00:26:03,350
information if you need that but this is

538
00:26:03,350 --> 00:26:04,700
really a good tool to give you an

539
00:26:04,700 --> 00:26:05,309
overview

540
00:26:05,309 --> 00:26:08,759
something changes because the change

541
00:26:08,759 --> 00:26:11,039
from 100 milliseconds to 300

542
00:26:11,039 --> 00:26:17,429
milliseconds is an increase of 200% but

543
00:26:17,429 --> 00:26:19,529
you won't recognize that nobody will

544
00:26:19,529 --> 00:26:22,110
recognize the response time change from

545
00:26:22,110 --> 00:26:25,980
100 milliseconds to 300 milliseconds but

546
00:26:25,980 --> 00:26:28,889
this tool will show you how this being

547
00:26:28,889 --> 00:26:33,210
done we're using tight ways here and you

548
00:26:33,210 --> 00:26:36,539
can simply install PHP extension on your

549
00:26:36,539 --> 00:26:40,980
system and the daemon in most cases you

550
00:26:40,980 --> 00:26:42,869
don't have to add the extension to the

551
00:26:42,869 --> 00:26:47,639
PHP any but what you can also do is sell

552
00:26:47,639 --> 00:26:50,700
sideways which framework it uses you are

553
00:26:50,700 --> 00:26:53,369
using in your application so in our case

554
00:26:53,369 --> 00:26:55,259
instead of work press we have Symphony 2

555
00:26:55,259 --> 00:26:59,039
in there so tight ways can guess a bit

556
00:26:59,039 --> 00:27:00,659
better what's happening in your

557
00:27:00,659 --> 00:27:02,850
application if it knows what's what

558
00:27:02,850 --> 00:27:07,889
frame over here using yeah so we have

559
00:27:07,889 --> 00:27:09,450
these three tools they give you a

560
00:27:09,450 --> 00:27:11,879
getting a good insight and you can use

561
00:27:11,879 --> 00:27:15,119
them all together so yeah hooray awesome

562
00:27:15,119 --> 00:27:17,460
but is this really unnecessary do you

563
00:27:17,460 --> 00:27:21,600
need all these three tools to to handle

564
00:27:21,600 --> 00:27:27,600
that stuff yes I have taken some of the

565
00:27:27,600 --> 00:27:30,840
issues we had in the past and one of

566
00:27:30,840 --> 00:27:32,340
them I've already talked about what the

567
00:27:32,340 --> 00:27:35,940
Beanstalk you being running full that's

568
00:27:35,940 --> 00:27:37,499
one of the issues I would have never

569
00:27:37,499 --> 00:27:39,629
recognized without the background manual

570
00:27:39,629 --> 00:27:42,409
monitoring this way I could solve it

571
00:27:42,409 --> 00:27:45,360
without it becoming very bad

572
00:27:45,360 --> 00:27:48,059
the response time increase we actually

573
00:27:48,059 --> 00:27:49,889
had a case where the response time

574
00:27:49,889 --> 00:27:53,909
increased you 300 milliseconds and we've

575
00:27:53,909 --> 00:27:55,769
just realized it through the performance

576
00:27:55,769 --> 00:27:59,100
monitor the course of this was a

577
00:27:59,100 --> 00:28:02,610
bottleneck the bottleneck that was not

578
00:28:02,610 --> 00:28:04,590
really bad right now

579
00:28:04,590 --> 00:28:07,110
but if we would have suddenly had a few

580
00:28:07,110 --> 00:28:09,200
more customers that would have uploaded

581
00:28:09,200 --> 00:28:12,389
several 10,000 products it would have

582
00:28:12,389 --> 00:28:16,590
gone bad this way I could fix it before

583
00:28:16,590 --> 00:28:18,880
the response time goes up to

584
00:28:18,880 --> 00:28:22,510
two or three seconds or any thoughts one

585
00:28:22,510 --> 00:28:25,720
in two timeouts or anything and this was

586
00:28:25,720 --> 00:28:28,450
a good thing without this monitoring I

587
00:28:28,450 --> 00:28:31,110
would have never realized that

588
00:28:31,110 --> 00:28:34,200
supervisor tasks being killed one of the

589
00:28:34,200 --> 00:28:37,510
things in the overview of the metrics

590
00:28:37,510 --> 00:28:40,120
monitor actually was how many of my

591
00:28:40,120 --> 00:28:42,630
supervisor tasks are currently running

592
00:28:42,630 --> 00:28:47,020
if one of them fails it was killed due

593
00:28:47,020 --> 00:28:50,650
to some reason I probably won't notice

594
00:28:50,650 --> 00:28:53,260
that depending on what kind of service

595
00:28:53,260 --> 00:28:55,720
it is and yeah maybe this organization

596
00:28:55,720 --> 00:28:57,360
for a customer doesn't work anymore

597
00:28:57,360 --> 00:29:00,190
because of the metrics I will see if the

598
00:29:00,190 --> 00:29:01,210
task is killed

599
00:29:01,210 --> 00:29:03,370
I will see the supervisor task is killed

600
00:29:03,370 --> 00:29:04,930
so the supervisor talk to all the

601
00:29:04,930 --> 00:29:07,030
workers running in the background they

602
00:29:07,030 --> 00:29:09,190
are doing stuff like synchronizing you

603
00:29:09,190 --> 00:29:11,730
know fetching updates from products

604
00:29:11,730 --> 00:29:15,340
starting index the indexing process and

605
00:29:15,340 --> 00:29:20,140
anything like that and something else

606
00:29:20,140 --> 00:29:22,510
specific tasks crash due to some

607
00:29:22,510 --> 00:29:25,420
exceptions the exceptions I can pretty

608
00:29:25,420 --> 00:29:27,730
easily see them in the paper trail if

609
00:29:27,730 --> 00:29:30,100
there are currently exceptions being

610
00:29:30,100 --> 00:29:31,480
thrown

611
00:29:31,480 --> 00:29:33,060
I will clearly see that due to these

612
00:29:33,060 --> 00:29:36,250
stacktrace that will be visible in paper

613
00:29:36,250 --> 00:29:39,790
trail at least in our case and they are

614
00:29:39,790 --> 00:29:42,460
clearly distinguishable to other log

615
00:29:42,460 --> 00:29:46,780
entries so they are easy to detect we

616
00:29:46,780 --> 00:29:51,250
also had this a few times and yeah

617
00:29:51,250 --> 00:29:54,460
so that's that's it so far from cases we

618
00:29:54,460 --> 00:29:56,410
had where really we needed all these

619
00:29:56,410 --> 00:29:58,360
tools and they every one that every

620
00:29:58,360 --> 00:30:02,590
single tool helped me a lot but not to

621
00:30:02,590 --> 00:30:04,330
every single one of them we have the

622
00:30:04,330 --> 00:30:05,400
logs

623
00:30:05,400 --> 00:30:08,140
the logs are very useful for complex

624
00:30:08,140 --> 00:30:10,480
applications with many components if you

625
00:30:10,480 --> 00:30:12,490
have a more simple application that has

626
00:30:12,490 --> 00:30:15,280
just one component and you just have one

627
00:30:15,280 --> 00:30:16,840
big log file where everything runs in

628
00:30:16,840 --> 00:30:20,140
two then you probably don't need a log

629
00:30:20,140 --> 00:30:21,760
aggregator also if you don't have

630
00:30:21,760 --> 00:30:25,960
multiple servers in one environment it's

631
00:30:25,960 --> 00:30:28,330
also probably not not necessary to use

632
00:30:28,330 --> 00:30:31,139
the log aggregator

633
00:30:32,310 --> 00:30:35,020
another thing where local Gator is

634
00:30:35,020 --> 00:30:36,610
useful if many people who benefit from

635
00:30:36,610 --> 00:30:39,070
the access to the locks so if you have

636
00:30:39,070 --> 00:30:44,020
the QA team or support team that would

637
00:30:44,020 --> 00:30:46,300
benefit from being able to read the

638
00:30:46,300 --> 00:30:48,760
locks if they if the customer comes

639
00:30:48,760 --> 00:30:51,100
toward them and says that yeah the surf

640
00:30:51,100 --> 00:30:53,140
shop synchronization is not working that

641
00:30:53,140 --> 00:30:55,840
you can't log in anymore then it might

642
00:30:55,840 --> 00:30:58,180
be useful for the fully support to be

643
00:30:58,180 --> 00:30:59,800
able to open the lock files and see if

644
00:30:59,800 --> 00:31:04,380
something with the customers wrong and

645
00:31:04,380 --> 00:31:08,020
sometimes log files are located on

646
00:31:08,020 --> 00:31:09,790
remote machines you can't quickly access

647
00:31:09,790 --> 00:31:12,670
this is not a problem we generally have

648
00:31:12,670 --> 00:31:15,820
in web development but I had this in the

649
00:31:15,820 --> 00:31:18,070
past that I would have to call somebody

650
00:31:18,070 --> 00:31:19,690
to give me access to a remote machine

651
00:31:19,690 --> 00:31:21,990
because it wasn't an internal network

652
00:31:21,990 --> 00:31:25,480
and that can be a pain in the arse if

653
00:31:25,480 --> 00:31:27,520
you just have to wait for them to react

654
00:31:27,520 --> 00:31:29,350
to you if there's a serious issue right

655
00:31:29,350 --> 00:31:33,940
now yeah that could also be solved by

656
00:31:33,940 --> 00:31:36,460
this log aggregator if he is pushing the

657
00:31:36,460 --> 00:31:38,290
messages of course if it's an internal

658
00:31:38,290 --> 00:31:39,670
network and the machine does not have

659
00:31:39,670 --> 00:31:41,290
direct internet access you have to think

660
00:31:41,290 --> 00:31:44,080
of think of solutions how to make the

661
00:31:44,080 --> 00:31:45,430
access through the lock a greater

662
00:31:45,430 --> 00:31:48,220
possible but yeah that might also be a

663
00:31:48,220 --> 00:31:52,260
case where a lock aggregator is useful a

664
00:31:52,350 --> 00:31:56,590
metrics when are they useful first and

665
00:31:56,590 --> 00:31:59,080
foremost do you have data that can be

666
00:31:59,080 --> 00:32:01,120
trapped if you have no data that could

667
00:32:01,120 --> 00:32:03,910
be tracked with metrics you probably

668
00:32:03,910 --> 00:32:06,940
can't use them if there are a lot of

669
00:32:06,940 --> 00:32:09,550
stuff in the background even if you

670
00:32:09,550 --> 00:32:13,060
don't have that clear numbers you might

671
00:32:13,060 --> 00:32:14,800
be able to create some numbers by just

672
00:32:14,800 --> 00:32:17,770
we have things like for the for the

673
00:32:17,770 --> 00:32:19,570
Beanstalk if the task is pushed to the

674
00:32:19,570 --> 00:32:23,740
Beanstalk we increase the counter and if

675
00:32:23,740 --> 00:32:25,510
it's finished with the success we

676
00:32:25,510 --> 00:32:28,210
increase the different counters so we

677
00:32:28,210 --> 00:32:29,950
can clearly see how many tasks have been

678
00:32:29,950 --> 00:32:31,450
pushed to Beanstalk and how many have

679
00:32:31,450 --> 00:32:34,120
succeeded and how many should be still

680
00:32:34,120 --> 00:32:36,430
in there I'm all failed maybe or sent or

681
00:32:36,430 --> 00:32:39,550
something like that but to do that you

682
00:32:39,550 --> 00:32:41,320
need clear workflows without clear

683
00:32:41,320 --> 00:32:43,300
workflows clearly defined workflows this

684
00:32:43,300 --> 00:32:43,810
is not

685
00:32:43,810 --> 00:32:46,300
well you don't always have them in most

686
00:32:46,300 --> 00:32:48,280
cases you will have some starting points

687
00:32:48,280 --> 00:32:50,100
some end point and you're good to go but

688
00:32:50,100 --> 00:32:52,510
you will not always have these clearly

689
00:32:52,510 --> 00:32:56,110
defined workflows and one other thing

690
00:32:56,110 --> 00:32:58,450
for the metrics sales department

691
00:32:58,450 --> 00:33:00,010
sometimes they just want some numbers

692
00:33:00,010 --> 00:33:03,100
they like fancy dashboards but if you

693
00:33:03,100 --> 00:33:05,590
have no clear workflows or anything if

694
00:33:05,590 --> 00:33:07,900
they can't see any numbers there it's

695
00:33:07,900 --> 00:33:12,460
pretty useless for them - yeah and now

696
00:33:12,460 --> 00:33:15,070
the last component again the performance

697
00:33:15,070 --> 00:33:19,450
and Lysa's you will probably need it if

698
00:33:19,450 --> 00:33:22,030
maybe you can use of it if you have

699
00:33:22,030 --> 00:33:24,310
complex tasks that use a lot of

700
00:33:24,310 --> 00:33:26,950
performance or are potential to use a

701
00:33:26,950 --> 00:33:29,590
lot of performance one of the things in

702
00:33:29,590 --> 00:33:31,240
development for for detecting

703
00:33:31,240 --> 00:33:33,400
bottlenecks is pretty hard but hard

704
00:33:33,400 --> 00:33:36,250
because we're working on machines that

705
00:33:36,250 --> 00:33:37,990
don't have that much load on them like

706
00:33:37,990 --> 00:33:40,270
like the Life Service finally have you

707
00:33:40,270 --> 00:33:42,340
can simulate that of course but in many

708
00:33:42,340 --> 00:33:44,830
cases that simulation is not close to

709
00:33:44,830 --> 00:33:49,450
reality or yeah but if you have complex

710
00:33:49,450 --> 00:33:51,820
tasks that potentially consume a lot of

711
00:33:51,820 --> 00:33:54,670
performance on life server performance

712
00:33:54,670 --> 00:33:57,040
and lysis and monitoring might be a good

713
00:33:57,040 --> 00:33:59,770
idea also is your application likely to

714
00:33:59,770 --> 00:34:01,990
run into bottlenecks this is a bit hard

715
00:34:01,990 --> 00:34:06,460
to determine beforehand but if you guess

716
00:34:06,460 --> 00:34:09,100
there are a few functions that might be

717
00:34:09,100 --> 00:34:11,320
a bottleneck in the future so if there

718
00:34:11,320 --> 00:34:14,320
is a sudden increase of products or any

719
00:34:14,320 --> 00:34:17,050
other data in your application and they

720
00:34:17,050 --> 00:34:19,449
all need to be processed it might be a

721
00:34:19,449 --> 00:34:21,429
good idea to use these movies monitoring

722
00:34:21,429 --> 00:34:23,980
just to find bottlenecks before they

723
00:34:23,980 --> 00:34:28,179
become bad and of course is your

724
00:34:28,179 --> 00:34:30,190
performance already bad if you already

725
00:34:30,190 --> 00:34:33,100
have a slope slow application it might

726
00:34:33,100 --> 00:34:34,929
be a good idea to use performance and

727
00:34:34,929 --> 00:34:37,810
lysis to get rid of these these slow

728
00:34:37,810 --> 00:34:41,469
parts of your application fix them and

729
00:34:41,469 --> 00:34:44,050
then keep this afterwards to identify

730
00:34:44,050 --> 00:34:46,000
other areas that of the applications

731
00:34:46,000 --> 00:34:51,400
that are becoming slower over time yeah

732
00:34:51,400 --> 00:34:56,520
that's so far from me for the 40 talk

733
00:34:56,770 --> 00:35:43,800
any questions yes so the question was if

734
00:35:43,800 --> 00:35:46,930
I've considered using things like Cubano

735
00:35:46,930 --> 00:35:51,610
locks - things that might group some

736
00:35:51,610 --> 00:35:53,440
functionality from my application

737
00:35:53,440 --> 00:35:54,850
instead of using all these different

738
00:35:54,850 --> 00:35:58,120
components yes I've considered that I'm

739
00:35:58,120 --> 00:36:00,420
already right now I'm looking into

740
00:36:00,420 --> 00:36:04,810
finding more centralized solutions for

741
00:36:04,810 --> 00:36:08,530
this but even if it's centralized these

742
00:36:08,530 --> 00:36:11,860
three components remains so we have even

743
00:36:11,860 --> 00:36:15,160
if metrics and lock aggregation is put

744
00:36:15,160 --> 00:36:18,360
together into one one application I

745
00:36:18,360 --> 00:36:20,590
still have the benefit of separate I

746
00:36:20,590 --> 00:36:22,600
still have the local aggregation and the

747
00:36:22,600 --> 00:36:25,090
metrics that I can use separately in

748
00:36:25,090 --> 00:36:27,660
some cases we're currently not using

749
00:36:27,660 --> 00:36:32,110
things like locks - because all these

750
00:36:32,110 --> 00:36:37,930
tools we have shown here are projects

751
00:36:37,930 --> 00:36:39,310
hosted somewhere I don't have to take

752
00:36:39,310 --> 00:36:41,230
care of any service I don't have to take

753
00:36:41,230 --> 00:36:44,080
care of another server that needs to be

754
00:36:44,080 --> 00:36:46,090
running as far as I know right now lock

755
00:36:46,090 --> 00:36:48,490
says is is a server - I have to set up

756
00:36:48,490 --> 00:36:54,340
by myself ok yeah but this one of three

757
00:36:54,340 --> 00:36:56,650
why we are using this right now these

758
00:36:56,650 --> 00:36:58,210
tools right now because they're hosted

759
00:36:58,210 --> 00:37:00,790
solutions and yeah this has been set up

760
00:37:00,790 --> 00:37:04,810
quite a few years ago so I'm not sure if

761
00:37:04,810 --> 00:37:06,700
locks - they're already provided the

762
00:37:06,700 --> 00:37:08,490
hosted solution

763
00:37:08,490 --> 00:37:10,950
and I was not involved into the picking

764
00:37:10,950 --> 00:37:14,070
these exact tools but yeah I'm currently

765
00:37:14,070 --> 00:37:16,800
also searching for some more combined

766
00:37:16,800 --> 00:37:51,210
tools no this is just like yeah fire

767
00:37:51,210 --> 00:37:54,060
forget we just fire that to the service

768
00:37:54,060 --> 00:37:56,220
we don't really care about the response

769
00:37:56,220 --> 00:37:58,800
of that thing if it presently these

770
00:37:58,800 --> 00:38:00,690
service is unavailable we don't really

771
00:38:00,690 --> 00:38:04,050
care and it doesn't really affect our

772
00:38:04,050 --> 00:38:10,050
performance yeah I forgot to repeat the

773
00:38:10,050 --> 00:38:13,050
question I think the quality of the

774
00:38:13,050 --> 00:38:16,220
metrics aggregation if when we are

775
00:38:16,220 --> 00:38:18,750
collecting this this data if that

776
00:38:18,750 --> 00:38:20,550
affects the performance of the

777
00:38:20,550 --> 00:38:24,000
application in any way and it doesn't

778
00:38:24,000 --> 00:38:29,750
for us yep any other question

779
00:38:30,520 --> 00:38:33,670
okay thank you

780
00:38:33,670 --> 00:38:38,579
[Applause]

