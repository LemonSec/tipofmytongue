1
00:00:20,840 --> 00:00:23,840
yeah

2
00:01:14,520 --> 00:01:21,640
hello so our next speaker comes from

3
00:01:21,640 --> 00:01:24,549
Latin it's da vida query and it will

4
00:01:24,549 --> 00:01:27,100
speak about CPM to an embedded let's

5
00:01:27,100 --> 00:01:34,619
upload him what are the lights sorry

6
00:01:34,619 --> 00:01:37,209
excuse me excuse me where is the light

7
00:01:37,209 --> 00:01:40,869
which let's yeah otherwise I don't think

8
00:01:40,869 --> 00:01:43,959
yeah good you thank you very much so hi

9
00:01:43,959 --> 00:01:47,110
everyone good evening I'm Davide I'm a

10
00:01:47,110 --> 00:01:50,439
production engineer at London and today

11
00:01:50,439 --> 00:01:52,810
I'm going to talk a little bit about TPM

12
00:01:52,810 --> 00:01:55,869
2.0 and specifically a practical usage

13
00:01:55,869 --> 00:01:58,360
on an embedded platform by the way I

14
00:01:58,360 --> 00:02:00,189
have the platform with me so just to

15
00:02:00,189 --> 00:02:03,340
show you this it's really small and so

16
00:02:03,340 --> 00:02:05,500
the agenda is quite short because this

17
00:02:05,500 --> 00:02:07,329
is of course a lighting talk we're going

18
00:02:07,329 --> 00:02:09,579
to see what is a TPM this is a very

19
00:02:09,579 --> 00:02:13,569
high-level overview of TPMS and you know

20
00:02:13,569 --> 00:02:16,450
how to use the TPM on a minimal Max or

21
00:02:16,450 --> 00:02:19,180
turbot with a practical example so we

22
00:02:19,180 --> 00:02:20,980
are going to generate a signing key on

23
00:02:20,980 --> 00:02:23,609
the typical only TPM embedded in these

24
00:02:23,609 --> 00:02:26,410
platforms and sign a document and

25
00:02:26,410 --> 00:02:27,940
verifying it with open SSL on a

26
00:02:27,940 --> 00:02:31,450
different platform so what's a TPM TP M

27
00:02:31,450 --> 00:02:34,299
stands for trusted platform module its

28
00:02:34,299 --> 00:02:36,100
specification has been written by the

29
00:02:36,100 --> 00:02:38,950
TCG the trusted computing group whose

30
00:02:38,950 --> 00:02:41,769
members are AMD here at Packard IBM

31
00:02:41,769 --> 00:02:44,769
Intel and Microsoft and has been

32
00:02:44,769 --> 00:02:47,280
standardized in an ISO document this is

33
00:02:47,280 --> 00:02:51,639
2009 TPM 1.2 by the way and it presently

34
00:02:51,639 --> 00:02:54,579
is on most computers platform including

35
00:02:54,579 --> 00:02:57,519
embedded ones and by the way very

36
00:02:57,519 --> 00:03:00,130
recently Microsoft has mandated TPM 2.0

37
00:03:00,130 --> 00:03:03,099
for Windows Mobile 10 platforms and is

38
00:03:03,099 --> 00:03:05,440
recommended for server platform so we

39
00:03:05,440 --> 00:03:07,299
are going to see these devices more and

40
00:03:07,299 --> 00:03:08,519
more in the future

41
00:03:08,519 --> 00:03:11,410
TPM is a cryptographic as a processor

42
00:03:11,410 --> 00:03:13,840
but it is not an accelerator this could

43
00:03:13,840 --> 00:03:16,720
be shocking believe it or not it's slow

44
00:03:16,720 --> 00:03:19,209
by design one of the reasons one of the

45
00:03:19,209 --> 00:03:22,030
main reason why is slow is because of

46
00:03:22,030 --> 00:03:24,720
import-export restrictions that are on

47
00:03:24,720 --> 00:03:26,730
cryptographic technology some countries

48
00:03:26,730 --> 00:03:28,200
have this restriction like the United

49
00:03:28,200 --> 00:03:30,660
States for instance so at a very high

50
00:03:30,660 --> 00:03:33,450
level these are the modules that you can

51
00:03:33,450 --> 00:03:35,910
find in in a TPM so we have an input

52
00:03:35,910 --> 00:03:37,590
output module of course cryptography

53
00:03:37,590 --> 00:03:39,330
processing non-volatile storage or

54
00:03:39,330 --> 00:03:41,310
general-purpose memory basically we can

55
00:03:41,310 --> 00:03:43,830
create objects from two DPM like

56
00:03:43,830 --> 00:03:46,860
signature keys or you know for symmetric

57
00:03:46,860 --> 00:03:48,360
and asymmetric encryption for instance

58
00:03:48,360 --> 00:03:50,280
and we can make them persistent of

59
00:03:50,280 --> 00:03:53,820
course this is limited storage so not

60
00:03:53,820 --> 00:03:56,700
many kids can be can be storing it main

61
00:03:56,700 --> 00:03:58,470
differences so we have two versions of

62
00:03:58,470 --> 00:04:01,800
TPMS 1.28 2.0 are the two existing

63
00:04:01,800 --> 00:04:08,310
version and TPM 1.2 uses RSA as a

64
00:04:08,310 --> 00:04:10,800
symmetric encryption and sha-1 as the

65
00:04:10,800 --> 00:04:14,100
hash function so this is deprecated

66
00:04:14,100 --> 00:04:17,130
although the use of the sha-1 in TPM is

67
00:04:17,130 --> 00:04:19,560
not you know affected by the recent

68
00:04:19,560 --> 00:04:23,400
vulnerability they discovered and while

69
00:04:23,400 --> 00:04:27,180
TPM 2.0 as support for elliptic curve

70
00:04:27,180 --> 00:04:30,990
cryptography and shuttle but the one of

71
00:04:30,990 --> 00:04:32,340
the of the most interesting

72
00:04:32,340 --> 00:04:34,740
characteristic of TPM 2.0 is what is

73
00:04:34,740 --> 00:04:37,500
called algorithm agility so that means

74
00:04:37,500 --> 00:04:39,570
that we can add more algorithms without

75
00:04:39,570 --> 00:04:41,490
changing the specification and that

76
00:04:41,490 --> 00:04:43,620
means that maybe with a software with a

77
00:04:43,620 --> 00:04:45,720
firmware upgrade from the vendor you can

78
00:04:45,720 --> 00:04:48,240
get more algorithms on your TPM without

79
00:04:48,240 --> 00:04:51,630
changing the you know the platform the

80
00:04:51,630 --> 00:04:54,540
main usages 3 on the main usages of TP

81
00:04:54,540 --> 00:04:57,060
ends are summarized here so we have

82
00:04:57,060 --> 00:04:59,490
platform integrity so secure boot and

83
00:04:59,490 --> 00:05:01,710
trusted boot this answer the question

84
00:05:01,710 --> 00:05:03,360
answers the question is a computer

85
00:05:03,360 --> 00:05:05,250
platform in a trusted state interesting

86
00:05:05,250 --> 00:05:08,640
condition that means that we have to

87
00:05:08,640 --> 00:05:12,180
measure all the software run from power

88
00:05:12,180 --> 00:05:13,800
on to operating system up and running

89
00:05:13,800 --> 00:05:18,050
and basically this is done by so

90
00:05:18,050 --> 00:05:20,280
creating an ash for each piece of

91
00:05:20,280 --> 00:05:22,169
software and storing it in in TPM

92
00:05:22,169 --> 00:05:24,780
registers another typical usage is disk

93
00:05:24,780 --> 00:05:26,700
encryption is not a TPM that performs

94
00:05:26,700 --> 00:05:29,160
the encryption but rather it just stores

95
00:05:29,160 --> 00:05:31,140
the key and control the access to it and

96
00:05:31,140 --> 00:05:35,250
DRM is another usage there are three

97
00:05:35,250 --> 00:05:37,380
types of TB ins Hardware firmware and

98
00:05:37,380 --> 00:05:38,490
software

99
00:05:38,490 --> 00:05:40,199
the hardware or discreet TPM is a

100
00:05:40,199 --> 00:05:42,360
physical component tamper-proof and is

101
00:05:42,360 --> 00:05:44,280
the most secure of course of the three

102
00:05:44,280 --> 00:05:46,590
filmic TPM is typical on embedded

103
00:05:46,590 --> 00:05:49,729
platforms because it relies only on a

104
00:05:49,729 --> 00:05:53,610
cpu extensions mmm named trusted

105
00:05:53,610 --> 00:05:57,090
execution engine and the last one

106
00:05:57,090 --> 00:05:58,380
software tip eons are used just for

107
00:05:58,380 --> 00:06:00,509
development of course they're all in

108
00:06:00,509 --> 00:06:02,639
user space and and run and run on top of

109
00:06:02,639 --> 00:06:05,789
the operating system so how can we use a

110
00:06:05,789 --> 00:06:09,030
TPM 2.0 for one point to the support is

111
00:06:09,030 --> 00:06:11,370
pretty it's pretty good I would say

112
00:06:11,370 --> 00:06:15,270
but for 2.0 the software is not so you

113
00:06:15,270 --> 00:06:18,810
know not so mature so in order to use it

114
00:06:18,810 --> 00:06:21,900
on x86 platforms in Linux we have two

115
00:06:21,900 --> 00:06:24,449
options one is the IBM implementation

116
00:06:24,449 --> 00:06:25,530
the other one is the Intel

117
00:06:25,530 --> 00:06:27,509
implementation there are a few

118
00:06:27,509 --> 00:06:29,280
differences between the two the main

119
00:06:29,280 --> 00:06:33,539
summarized here basically the IBM

120
00:06:33,539 --> 00:06:34,919
implementation doesn't have the resource

121
00:06:34,919 --> 00:06:37,380
manager which is the component is

122
00:06:37,380 --> 00:06:39,270
described in the decidua specification

123
00:06:39,270 --> 00:06:41,970
responsible for allowing multiple

124
00:06:41,970 --> 00:06:44,820
process to assess the same TPM you know

125
00:06:44,820 --> 00:06:46,169
in time sharing in a time sharing

126
00:06:46,169 --> 00:06:52,289
fashion and so the TP the TSS from Intel

127
00:06:52,289 --> 00:06:56,190
do have a resource manager does have a

128
00:06:56,190 --> 00:06:57,960
resource manager and they are working

129
00:06:57,960 --> 00:07:00,389
also in internal resource manager aimed

130
00:07:00,389 --> 00:07:04,320
for the kernel 4.11 also the inter

131
00:07:04,320 --> 00:07:06,570
implementation is developed on github so

132
00:07:06,570 --> 00:07:09,300
I would say the development is more open

133
00:07:09,300 --> 00:07:13,310
and a bit more you know modern maybe

134
00:07:13,310 --> 00:07:15,360
hardware so we are talking about

135
00:07:15,360 --> 00:07:18,120
embedded platforms so I have here a

136
00:07:18,120 --> 00:07:22,530
minimum but max you so this is what what

137
00:07:22,530 --> 00:07:24,750
I'm going to show is actually exactly

138
00:07:24,750 --> 00:07:26,669
the same on min abort our bot which is a

139
00:07:26,669 --> 00:07:29,669
spin-off on the mineral max basically is

140
00:07:29,669 --> 00:07:32,130
a dual-core atom that supports that as

141
00:07:32,130 --> 00:07:34,380
the trusted execution environment and so

142
00:07:34,380 --> 00:07:37,770
we can get a few more TPM the Fillmore

143
00:07:37,770 --> 00:07:41,340
TPM is not there by I mean with embedded

144
00:07:41,340 --> 00:07:45,380
ufi firmware but you have to refresh the

145
00:07:45,380 --> 00:07:47,969
the femur and a destruction at the end

146
00:07:47,969 --> 00:07:50,130
of the slide there is a link to a post

147
00:07:50,130 --> 00:07:51,310
explaining how to do this

148
00:07:51,310 --> 00:07:53,560
is not too hard this platform cost

149
00:07:53,560 --> 00:07:56,500
around 150 euros of course this is just

150
00:07:56,500 --> 00:07:57,820
an example there are many other

151
00:07:57,820 --> 00:08:01,330
platforms that support this so film or

152
00:08:01,330 --> 00:08:04,330
TV and in this case using TPM 2.0

153
00:08:04,330 --> 00:08:06,820
regardless of the type in real world is

154
00:08:06,820 --> 00:08:10,030
not easy because it doesn't support the

155
00:08:10,030 --> 00:08:11,800
tools they are the existing tooling for

156
00:08:11,800 --> 00:08:14,400
x86 and Linux at least the open-source

157
00:08:14,400 --> 00:08:18,310
one I'm not aware of you know closed

158
00:08:18,310 --> 00:08:21,190
source implementation at the moment it's

159
00:08:21,190 --> 00:08:23,400
hard because they don't support

160
00:08:23,400 --> 00:08:25,690
interchange format like their or Pam and

161
00:08:25,690 --> 00:08:28,210
so using it with OpenSSL is it's not

162
00:08:28,210 --> 00:08:33,850
possible by the way but body keep the

163
00:08:33,850 --> 00:08:36,610
TPM software stacks provide an API they

164
00:08:36,610 --> 00:08:37,809
implement what is called in the

165
00:08:37,809 --> 00:08:40,720
specification the system API which can

166
00:08:40,720 --> 00:08:42,730
be used to build your own CSV process

167
00:08:42,730 --> 00:08:45,600
application although the specification

168
00:08:45,600 --> 00:08:49,330
is quite hard to digest so I'm what I'm

169
00:08:49,330 --> 00:08:51,580
showing here is pretty hacky but of

170
00:08:51,580 --> 00:08:53,410
course it there are cleaner way to do

171
00:08:53,410 --> 00:08:58,240
that but I mean it's not easy so in

172
00:08:58,240 --> 00:09:00,760
order to use the minimum Board max to do

173
00:09:00,760 --> 00:09:02,200
what I'm showing we need to enable the

174
00:09:02,200 --> 00:09:04,000
female TPM as I mentioned we need to set

175
00:09:04,000 --> 00:09:05,490
up a Linux distribution

176
00:09:05,490 --> 00:09:09,070
any recent distribution will do will do

177
00:09:09,070 --> 00:09:11,710
but you need at least candle 4.4 I

178
00:09:11,710 --> 00:09:14,380
believe kit 4.2 is works as well but

179
00:09:14,380 --> 00:09:17,890
anyway 4.4 is better you need to flash

180
00:09:17,890 --> 00:09:19,870
it onto a mattress the car-boot the

181
00:09:19,870 --> 00:09:22,930
board from it we did sorry and install

182
00:09:22,930 --> 00:09:25,720
the TPM software stack and the TPM tools

183
00:09:25,720 --> 00:09:27,730
from Intel there are pointers and the

184
00:09:27,730 --> 00:09:29,890
end of these presentation so you can

185
00:09:29,890 --> 00:09:32,560
find the software easily if you're lucky

186
00:09:32,560 --> 00:09:34,810
some distribution like open SUSE already

187
00:09:34,810 --> 00:09:37,500
have packages from for these two

188
00:09:37,500 --> 00:09:40,180
softwares you need to start the resource

189
00:09:40,180 --> 00:09:42,010
manager as Adam as a daemon sorry and

190
00:09:42,010 --> 00:09:42,640
then you're right

191
00:09:42,640 --> 00:09:45,750
and enjoy your go to go so Intel tools

192
00:09:45,750 --> 00:09:49,870
are modeled after in security

193
00:09:49,870 --> 00:09:53,710
Jose protocol described in the in the in

194
00:09:53,710 --> 00:09:56,920
the CCG specification which is you know

195
00:09:56,920 --> 00:10:00,460
it's focused on TPM 1.2 for 2.0 we have

196
00:10:00,460 --> 00:10:01,690
much more flexibility

197
00:10:01,690 --> 00:10:04,150
although the the existing tools won't

198
00:10:04,150 --> 00:10:05,139
allow you to create

199
00:10:05,139 --> 00:10:08,619
create the primary key for you know for

200
00:10:08,619 --> 00:10:10,809
assigning key as a primary key so we

201
00:10:10,809 --> 00:10:12,519
have to create an endorsement key and

202
00:10:12,519 --> 00:10:14,609
from this key we are going to create an

203
00:10:14,609 --> 00:10:17,799
attestation identity key that can be

204
00:10:17,799 --> 00:10:20,019
used for signing something if you use

205
00:10:20,019 --> 00:10:24,759
directly with the C API the the TPM

206
00:10:24,759 --> 00:10:26,649
software stack you don't need to do this

207
00:10:26,649 --> 00:10:30,609
of course so this command generate if

208
00:10:30,609 --> 00:10:33,009
it's not already stored in the

209
00:10:33,009 --> 00:10:34,809
non-volatile memory will generate a new

210
00:10:34,809 --> 00:10:40,059
key RSA key 256 bytes long and we store

211
00:10:40,059 --> 00:10:43,720
it in a k èk dot pub we don't need this

212
00:10:43,720 --> 00:10:47,529
key but as i said we need to generate

213
00:10:47,529 --> 00:10:48,609
another key called

214
00:10:48,609 --> 00:10:51,540
the session identity key from the

215
00:10:51,540 --> 00:10:54,910
endorsement key just created this key

216
00:10:54,910 --> 00:10:57,279
will be stored in in the file

217
00:10:57,279 --> 00:11:01,449
ai Qi dot pub but it can be used

218
00:11:01,449 --> 00:11:04,079
directly by open ssl because it's

219
00:11:04,079 --> 00:11:06,399
basically it's a dump of a c structure

220
00:11:06,399 --> 00:11:08,859
described in the in the in the TCG

221
00:11:08,859 --> 00:11:11,529
standard we need to extract the modulus

222
00:11:11,529 --> 00:11:13,720
from that key and this is done by

223
00:11:13,720 --> 00:11:17,709
skipping the first 102 bytes and then we

224
00:11:17,709 --> 00:11:19,720
need to create a fixed data this header

225
00:11:19,720 --> 00:11:22,029
is fixed of course it's their header

226
00:11:22,029 --> 00:11:26,230
fixed for RSA keys of course and a mid

227
00:11:26,230 --> 00:11:28,799
header which is just metadata describing

228
00:11:28,799 --> 00:11:32,199
how the exponent looks like

229
00:11:32,199 --> 00:11:34,929
so basically saying it's a 3x3 bytes

230
00:11:34,929 --> 00:11:38,379
integer and then when we have all these

231
00:11:38,379 --> 00:11:40,720
all these bits we can compose them into

232
00:11:40,720 --> 00:11:44,290
the into a public key which can be used

233
00:11:44,290 --> 00:11:45,939
by organize the cell in their format you

234
00:11:45,939 --> 00:11:47,739
can convert it in PEM format if you if

235
00:11:47,739 --> 00:11:50,410
you like at this point then we need to

236
00:11:50,410 --> 00:11:52,869
sign then we sign the document and with

237
00:11:52,869 --> 00:11:55,449
the exported public key we can verify it

238
00:11:55,449 --> 00:11:58,899
and to do that we use these two comments

239
00:11:58,899 --> 00:12:01,119
so as usual we hash a message and then

240
00:12:01,119 --> 00:12:05,169
we sign it in order to do this you can

241
00:12:05,169 --> 00:12:06,850
use these two comments but there is a

242
00:12:06,850 --> 00:12:09,669
sort of I would say bug in the Intel

243
00:12:09,669 --> 00:12:12,459
tooling which actually requires you to

244
00:12:12,459 --> 00:12:14,829
pass the message to the same comma this

245
00:12:14,829 --> 00:12:17,079
is not needed of course you just in that

246
00:12:17,079 --> 00:12:18,339
you know if

247
00:12:18,339 --> 00:12:20,199
in the right implementation you just

248
00:12:20,199 --> 00:12:22,899
need to pass the hash you can see we are

249
00:12:22,899 --> 00:12:25,420
using a ticket dot bean file so this is

250
00:12:25,420 --> 00:12:27,759
interesting for TPM 2.0 because is the

251
00:12:27,759 --> 00:12:32,050
way it you can upload multiple you know

252
00:12:32,050 --> 00:12:35,470
multiple steps operation and basically

253
00:12:35,470 --> 00:12:38,079
you can sign only objects that are

254
00:12:38,079 --> 00:12:40,209
generated inside the TPM and to prove

255
00:12:40,209 --> 00:12:42,639
that what you are passing to the TBM to

256
00:12:42,639 --> 00:12:44,319
the sign command is something that has

257
00:12:44,319 --> 00:12:46,540
been generated by the TPM you generate

258
00:12:46,540 --> 00:12:48,939
this ticket which is an H Mac containing

259
00:12:48,939 --> 00:12:50,350
the proof that you know that that

260
00:12:50,350 --> 00:12:53,680
specific TPM has generated the hash in

261
00:12:53,680 --> 00:12:57,339
this case and so now we have the

262
00:12:57,339 --> 00:13:00,220
signature which is unfortunately not in

263
00:13:00,220 --> 00:13:02,740
the right format so we need to extract

264
00:13:02,740 --> 00:13:05,170
to skip again the this header described

265
00:13:05,170 --> 00:13:07,180
in the TCG standard and we extract the

266
00:13:07,180 --> 00:13:10,540
row signature which is 256 bytes long of

267
00:13:10,540 --> 00:13:14,009
course it's a never say 2048 bits key

268
00:13:14,009 --> 00:13:17,350
that we are using and then we can on a

269
00:13:17,350 --> 00:13:20,649
different platform we can verify the the

270
00:13:20,649 --> 00:13:22,569
the signature with for instance with

271
00:13:22,569 --> 00:13:26,949
open SSL so of course this is as I say

272
00:13:26,949 --> 00:13:30,160
this hacky and but these can be used to

273
00:13:30,160 --> 00:13:32,319
you know to verify let's say you have a

274
00:13:32,319 --> 00:13:34,750
fleet of these devices you can actually

275
00:13:34,750 --> 00:13:38,290
identify any so every single device in

276
00:13:38,290 --> 00:13:40,240
your fleet with with this with this

277
00:13:40,240 --> 00:13:41,860
method with the TPM because you can sign

278
00:13:41,860 --> 00:13:43,629
something and you can let's say

279
00:13:43,629 --> 00:13:46,389
announced and you can authenticate your

280
00:13:46,389 --> 00:13:49,689
devices in this way with embedded TPM so

281
00:13:49,689 --> 00:13:50,769
thanks for your time and your attention

282
00:13:50,769 --> 00:13:55,439
these are the links I mentioned thanks

283
00:13:55,439 --> 00:13:57,730
thank you

284
00:13:57,730 --> 00:14:06,010
if someone is a quick question if you

285
00:14:06,010 --> 00:14:07,900
have any question feel free to to drop

286
00:14:07,900 --> 00:14:10,300
me an email because we've just scratched

287
00:14:10,300 --> 00:14:17,339
the surface off you know this hello

