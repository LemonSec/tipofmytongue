1
00:00:36,370 --> 00:00:39,500
[Music]

2
00:00:44,490 --> 00:00:45,670
yeah

3
00:00:45,670 --> 00:00:50,800
okay so in case anyone wasn't here for

4
00:00:50,800 --> 00:00:51,520
the last one

5
00:00:51,520 --> 00:00:54,400
hello I'm Conrad Bebbington I'm here

6
00:00:54,400 --> 00:00:57,790
from Focusrite we do audio interfaces

7
00:00:57,790 --> 00:01:02,829
and various audio devices so this is a

8
00:01:02,829 --> 00:01:06,070
talk on the AES 70 protocol it's a

9
00:01:06,070 --> 00:01:08,560
standard for controlling audio devices

10
00:01:08,560 --> 00:01:13,060
on an on an audio network so in case

11
00:01:13,060 --> 00:01:18,039
anyone wasn't here just now the pro

12
00:01:18,039 --> 00:01:20,469
audio is dealing with areas like live

13
00:01:20,469 --> 00:01:26,170
sound like studio and like broadcast we

14
00:01:26,170 --> 00:01:29,259
have various devices for input so

15
00:01:29,259 --> 00:01:31,600
microphones and preamps outputs to

16
00:01:31,600 --> 00:01:33,279
amplifiers and speakers and in the

17
00:01:33,279 --> 00:01:35,439
middle there's processing mixers effects

18
00:01:35,439 --> 00:01:41,259
those sorts of devices yeah and I know

19
00:01:41,259 --> 00:01:43,450
this is for a piece it was in case

20
00:01:43,450 --> 00:01:47,079
everyone wasn't you so typical setup has

21
00:01:47,079 --> 00:01:49,179
some equipments on the stage some

22
00:01:49,179 --> 00:01:52,389
equipment and back of the room where the

23
00:01:52,389 --> 00:01:56,109
in the audio area for mixing for

24
00:01:56,109 --> 00:01:59,200
recording and so signals come from stage

25
00:01:59,200 --> 00:02:01,539
get mixed recorded and then can be sent

26
00:02:01,539 --> 00:02:03,700
back out for front-of-house sound and

27
00:02:03,700 --> 00:02:05,590
for stage monitoring that's that's a

28
00:02:05,590 --> 00:02:10,179
fairly typical setup so for AES 70 the

29
00:02:10,179 --> 00:02:12,610
motivations were slightly different than

30
00:02:12,610 --> 00:02:15,700
the a s 67 standard this is about

31
00:02:15,700 --> 00:02:17,080
controlling the device

32
00:02:17,080 --> 00:02:22,090
so with an audio network because we were

33
00:02:22,090 --> 00:02:25,150
taking audio in as close to the source

34
00:02:25,150 --> 00:02:26,950
as possible we're not running along

35
00:02:26,950 --> 00:02:29,500
analogue cables it means things like the

36
00:02:29,500 --> 00:02:31,510
actual equipment your microphone clip

37
00:02:31,510 --> 00:02:33,820
preamplifiers for instance can be placed

38
00:02:33,820 --> 00:02:36,070
in quite inconvenient locations they can

39
00:02:36,070 --> 00:02:38,410
be in the recording room or on the side

40
00:02:38,410 --> 00:02:43,810
of the stage so that was one of the main

41
00:02:43,810 --> 00:02:46,030
motivations for the control protocol

42
00:02:46,030 --> 00:02:49,690
there are existing protocols they're

43
00:02:49,690 --> 00:02:53,920
generally proprietary and and they again

44
00:02:53,920 --> 00:02:56,470
the inter interrupt poorly with other

45
00:02:56,470 --> 00:03:00,670
manufactures equipment so those who need

46
00:03:00,670 --> 00:03:03,700
to improve that and there's also a need

47
00:03:03,700 --> 00:03:06,459
to allow integration of actual physical

48
00:03:06,459 --> 00:03:08,440
hardware controllers so maybe your

49
00:03:08,440 --> 00:03:11,440
console can can communicate with your

50
00:03:11,440 --> 00:03:13,480
microphone preamps and your outputs and

51
00:03:13,480 --> 00:03:15,910
all be integrated into a single network

52
00:03:15,910 --> 00:03:21,040
and of course there's a need a AES 67

53
00:03:21,040 --> 00:03:26,440
didn't specify control and so having a

54
00:03:26,440 --> 00:03:27,850
complimentary standard that does that

55
00:03:27,850 --> 00:03:32,019
that kind of fills in the gap so there's

56
00:03:32,019 --> 00:03:34,590
two terms and they're generally used

57
00:03:34,590 --> 00:03:36,700
interchangeably books might as well get

58
00:03:36,700 --> 00:03:38,260
them out the way

59
00:03:38,260 --> 00:03:42,930
AES 70 is a standards document as

60
00:03:42,930 --> 00:03:47,370
specifying the control protocol and OCA

61
00:03:47,370 --> 00:03:50,620
Sons will open controllable architecture

62
00:03:50,620 --> 00:03:52,300
that's the actual protocol just

63
00:03:52,300 --> 00:03:54,880
specified by standard in most cases the

64
00:03:54,880 --> 00:03:56,850
terminology seems to be quite

65
00:03:56,850 --> 00:04:02,709
interchangeable so the standard is split

66
00:04:02,709 --> 00:04:06,120
into three areas there's a framework

67
00:04:06,120 --> 00:04:09,610
there's a class structure specifying a

68
00:04:09,610 --> 00:04:11,769
kind of list of clutter tree really of

69
00:04:11,769 --> 00:04:14,440
classes of things that can be controlled

70
00:04:14,440 --> 00:04:17,470
and there's communication protocols so

71
00:04:17,470 --> 00:04:20,978
how we actually get the messages for for

72
00:04:20,978 --> 00:04:25,590
doing the the control

73
00:04:26,830 --> 00:04:29,410
so the framework itself is

74
00:04:29,410 --> 00:04:35,230
object-oriented a a s-70 device is

75
00:04:35,230 --> 00:04:37,670
specified as being composed of a number

76
00:04:37,670 --> 00:04:40,640
of objects and the framework allows only

77
00:04:40,640 --> 00:04:44,330
for single inheritance so there are no

78
00:04:44,330 --> 00:04:45,830
things like there's no interface classes

79
00:04:45,830 --> 00:04:47,210
or anything like that but it's just a

80
00:04:47,210 --> 00:04:53,750
single inheritance tree classes so in

81
00:04:53,750 --> 00:04:55,490
the standard classes are allowed to have

82
00:04:55,490 --> 00:04:57,710
methods properties and there are lots

83
00:04:57,710 --> 00:04:59,600
generate events which is your feedback

84
00:04:59,600 --> 00:05:02,810
mechanism for for sending updates back

85
00:05:02,810 --> 00:05:05,840
to a controller there is a single route

86
00:05:05,840 --> 00:05:09,620
class called OCA route and in order to

87
00:05:09,620 --> 00:05:12,710
define what class an object is there is

88
00:05:12,710 --> 00:05:15,530
a class ID which is composed of class

89
00:05:15,530 --> 00:05:17,600
numbering for each level of the

90
00:05:17,600 --> 00:05:21,380
inheritance hierarchy and this time that

91
00:05:21,380 --> 00:05:23,600
does make some allowances for

92
00:05:23,600 --> 00:05:26,870
proprietary sub classes so if you want

93
00:05:26,870 --> 00:05:30,680
to implement a non-standard control you

94
00:05:30,680 --> 00:05:34,600
can put it in a proprietary subclass and

95
00:05:34,600 --> 00:05:36,830
standard controllers will be able to

96
00:05:36,830 --> 00:05:38,570
access your superclass and efforts

97
00:05:38,570 --> 00:05:40,870
wherever you leave the Sunda tree and

98
00:05:40,870 --> 00:05:43,820
your custom proprietary controller can

99
00:05:43,820 --> 00:05:48,380
access the extended methods so this is

100
00:05:48,380 --> 00:05:50,420
just an example of how our class ID

101
00:05:50,420 --> 00:05:51,140
works

102
00:05:51,140 --> 00:05:54,680
we have inheritance and at each level we

103
00:05:54,680 --> 00:05:57,110
add another ID onto our on to our class

104
00:05:57,110 --> 00:06:01,220
ID it's they're just numbered at each

105
00:06:01,220 --> 00:06:06,140
level so the methods themselves they do

106
00:06:06,140 --> 00:06:08,330
typical object or cheap method things

107
00:06:08,330 --> 00:06:10,340
they retrieve properties they perform

108
00:06:10,340 --> 00:06:13,730
actions and as we have single

109
00:06:13,730 --> 00:06:15,800
inheritance it's all very well to find

110
00:06:15,800 --> 00:06:19,370
that each method has a level as how far

111
00:06:19,370 --> 00:06:23,000
down the tree it is and then on each

112
00:06:23,000 --> 00:06:25,100
level of the tree the methods are just

113
00:06:25,100 --> 00:06:29,860
specified with method numbers so again

114
00:06:29,860 --> 00:06:32,730
we have examples of

115
00:06:32,730 --> 00:06:36,600
and if you want to call this method you

116
00:06:36,600 --> 00:06:39,210
go down to level four I I don't know why

117
00:06:39,210 --> 00:06:41,640
it's one index a non zero index well and

118
00:06:41,640 --> 00:06:44,880
you go across on this level to method

119
00:06:44,880 --> 00:06:47,700
number two and that's how you specify

120
00:06:47,700 --> 00:06:50,610
mf'er to end it's all very well defined

121
00:06:50,610 --> 00:06:54,900
like that so we've got this object tree

122
00:06:54,900 --> 00:06:57,870
and every class inherits from OCA root

123
00:06:57,870 --> 00:07:01,950
so this is actually quite a rich class

124
00:07:01,950 --> 00:07:04,020
it allows quite a lots of functionality

125
00:07:04,020 --> 00:07:09,530
in the base class of everything so it's

126
00:07:09,530 --> 00:07:13,020
it allows you to specify a role for the

127
00:07:13,020 --> 00:07:15,540
class and that's just a string that's

128
00:07:15,540 --> 00:07:19,020
intended for human readable use so for

129
00:07:19,020 --> 00:07:23,090
example it might be channel 1 game or

130
00:07:23,090 --> 00:07:25,980
you know channel 5 input source that's

131
00:07:25,980 --> 00:07:27,690
the typical sort of thing that would go

132
00:07:27,690 --> 00:07:31,020
into that there's notifications on when

133
00:07:31,020 --> 00:07:33,740
any property of the class changes so

134
00:07:33,740 --> 00:07:35,850
receiving updates from your control

135
00:07:35,850 --> 00:07:38,520
device is quite easy you just subscribe

136
00:07:38,520 --> 00:07:42,090
to that one notification and you get all

137
00:07:42,090 --> 00:07:44,130
the property updates on your control

138
00:07:44,130 --> 00:07:46,560
device and there's also a locking

139
00:07:46,560 --> 00:07:49,230
mechanism so a particular controller can

140
00:07:49,230 --> 00:07:51,530
just take ownership of a particular

141
00:07:51,530 --> 00:07:55,290
object in the in the device and say I

142
00:07:55,290 --> 00:07:57,360
control this exclusively and know what

143
00:07:57,360 --> 00:08:02,330
controllers are allowed or allowed it so

144
00:08:02,330 --> 00:08:05,550
that was the base class and now we have

145
00:08:05,550 --> 00:08:08,340
a rough outline of our class hierarchy

146
00:08:08,340 --> 00:08:13,110
it's quite dense and rich so did don't

147
00:08:13,110 --> 00:08:18,990
worry about the details there but the

148
00:08:18,990 --> 00:08:21,960
built-in classes are split into three

149
00:08:21,960 --> 00:08:24,360
main groups and then workers has a

150
00:08:24,360 --> 00:08:26,760
subgroup has subgroupings

151
00:08:26,760 --> 00:08:29,550
the actual signal processing happens in

152
00:08:29,550 --> 00:08:33,390
workers managers and agents kind of deal

153
00:08:33,390 --> 00:08:36,000
with more global state of the device in

154
00:08:36,000 --> 00:08:41,549
various capacities so a typical workers

155
00:08:41,549 --> 00:08:43,740
are they're sent

156
00:08:43,740 --> 00:08:48,100
these can detect any inputs these can be

157
00:08:48,100 --> 00:08:50,199
level sensors so actually measuring the

158
00:08:50,199 --> 00:08:53,319
signal or they can be other things like

159
00:08:53,319 --> 00:08:55,269
spare switch States on the inputs on

160
00:08:55,269 --> 00:09:00,069
base of various types then the actual

161
00:09:00,069 --> 00:09:02,439
work of signal processing is done by

162
00:09:02,439 --> 00:09:07,389
actuators so these range from the simple

163
00:09:07,389 --> 00:09:09,189
stuff like just applying gain all the

164
00:09:09,189 --> 00:09:11,439
way through to complicated things like

165
00:09:11,439 --> 00:09:16,930
filtering parametric EQ so if there's a

166
00:09:16,930 --> 00:09:19,120
quite - there's quite a rich range of

167
00:09:19,120 --> 00:09:22,930
classes there and to work with which

168
00:09:22,930 --> 00:09:25,389
covers most typical audio signal

169
00:09:25,389 --> 00:09:35,439
processing and use cases so once we've

170
00:09:35,439 --> 00:09:37,720
got these classes and we've made objects

171
00:09:37,720 --> 00:09:40,720
we can group them into blocks these

172
00:09:40,720 --> 00:09:42,850
blocks don't really have a signal

173
00:09:42,850 --> 00:09:45,519
processing function they're more for the

174
00:09:45,519 --> 00:09:48,309
actual logical layout of the of the

175
00:09:48,309 --> 00:09:50,980
device so for instance you would

176
00:09:50,980 --> 00:09:53,680
typically group and a single channel

177
00:09:53,680 --> 00:09:56,430
signal processing into a single block

178
00:09:56,430 --> 00:09:59,889
just to make it clear that this what the

179
00:09:59,889 --> 00:10:03,430
functionality is relating to they they

180
00:10:03,430 --> 00:10:05,620
can be nested they can contain other

181
00:10:05,620 --> 00:10:09,490
workers and they have methods for

182
00:10:09,490 --> 00:10:12,730
describing the signal flow of the of the

183
00:10:12,730 --> 00:10:15,550
signal within the block so in a typical

184
00:10:15,550 --> 00:10:19,300
case each worker within a block could

185
00:10:19,300 --> 00:10:21,839
have some ports for input and output and

186
00:10:21,839 --> 00:10:24,699
the block that contains them all this

187
00:10:24,699 --> 00:10:28,600
big outer rectangle you call a method on

188
00:10:28,600 --> 00:10:30,189
it to describe the signal flow and it

189
00:10:30,189 --> 00:10:32,769
tells you this is connected to these

190
00:10:32,769 --> 00:10:35,079
this outputs connected to this switch

191
00:10:35,079 --> 00:10:38,410
and just enumerate sort of all the

192
00:10:38,410 --> 00:10:42,160
signal path connections like that so

193
00:10:42,160 --> 00:10:45,069
this is a typical example from a

194
00:10:45,069 --> 00:10:48,160
microphone preamplifier we have some

195
00:10:48,160 --> 00:10:51,130
inputs we choose a particular input

196
00:10:51,130 --> 00:10:52,339
using

197
00:10:52,339 --> 00:10:55,600
which we can apply game to it and

198
00:10:55,600 --> 00:10:57,860
optionally filter off the low

199
00:10:57,860 --> 00:11:04,759
frequencies so outside of the workers

200
00:11:04,759 --> 00:11:06,769
for doing signal processing there are

201
00:11:06,769 --> 00:11:11,449
matches and agents managers are in quite

202
00:11:11,449 --> 00:11:15,980
typically global controls so so the

203
00:11:15,980 --> 00:11:19,910
mandatory ones all deal with the device

204
00:11:19,910 --> 00:11:25,100
on some level so there's as describing

205
00:11:25,100 --> 00:11:26,689
what the device actually is and what

206
00:11:26,689 --> 00:11:30,620
firmwares are on it there's a

207
00:11:30,620 --> 00:11:32,389
subscription manager which is mandatory

208
00:11:32,389 --> 00:11:35,389
which is part of the events handling

209
00:11:35,389 --> 00:11:38,990
mechanism for allowing controllers to

210
00:11:38,990 --> 00:11:40,759
actually receive events from the device

211
00:11:40,759 --> 00:11:44,920
and there's some network information and

212
00:11:44,920 --> 00:11:49,220
available there's also quite a rich

213
00:11:49,220 --> 00:11:53,329
range of optional managers dealing with

214
00:11:53,329 --> 00:11:56,180
various areas around security

215
00:11:56,180 --> 00:12:00,709
clocking and yeah just general settings

216
00:12:00,709 --> 00:12:05,870
and these are these aren't quite so

217
00:12:05,870 --> 00:12:08,740
important and so they're made optional

218
00:12:08,740 --> 00:12:11,929
the agents there's actually only one

219
00:12:11,929 --> 00:12:14,089
mandatory agent and that's called the

220
00:12:14,089 --> 00:12:16,819
stream network this provides the

221
00:12:16,819 --> 00:12:19,220
mechanism for setting up connections

222
00:12:19,220 --> 00:12:22,999
between your audio device and other

223
00:12:22,999 --> 00:12:25,189
audio devices it's the mechanism for

224
00:12:25,189 --> 00:12:29,120
connection all together that's mandatory

225
00:12:29,120 --> 00:12:31,579
and it can be any subclass of stream

226
00:12:31,579 --> 00:12:34,999
network so for example it could be an

227
00:12:34,999 --> 00:12:37,339
aes 67 stream network it could be a

228
00:12:37,339 --> 00:12:39,050
dante stream network if you have a

229
00:12:39,050 --> 00:12:41,420
proprietary device it could be any of

230
00:12:41,420 --> 00:12:47,240
those the optional agents these are

231
00:12:47,240 --> 00:12:52,819
generally related to to handling

232
00:12:52,819 --> 00:12:55,639
controls so for example you can group

233
00:12:55,639 --> 00:12:58,490
controls together with a grouper or you

234
00:12:58,490 --> 00:13:00,170
can affect a control over time where

235
00:13:00,170 --> 00:13:02,179
Rampur that's would be a typical example

236
00:13:02,179 --> 00:13:04,519
of that would be doing a fade in so you

237
00:13:04,519 --> 00:13:05,699
just send one message

238
00:13:05,699 --> 00:13:08,009
the romper that gained was trampled over

239
00:13:08,009 --> 00:13:09,989
a certain period of time and that would

240
00:13:09,989 --> 00:13:15,600
be handled and observers and are again

241
00:13:15,600 --> 00:13:17,489
at just a slightly different report back

242
00:13:17,489 --> 00:13:21,929
mechanism and there's also handling of

243
00:13:21,929 --> 00:13:24,779
media clock and finally the other half

244
00:13:24,779 --> 00:13:26,910
of the event handling mechanism is the

245
00:13:26,910 --> 00:13:29,609
event handler itself which is an agent

246
00:13:29,609 --> 00:13:31,829
which can be implemented on a controller

247
00:13:31,829 --> 00:13:37,230
and not the control device so for the

248
00:13:37,230 --> 00:13:40,829
event time link and both the controller

249
00:13:40,829 --> 00:13:42,749
and the controlled device are OCA

250
00:13:42,749 --> 00:13:45,239
devices that's a critical part of this

251
00:13:45,239 --> 00:13:50,730
process and the control that influenced

252
00:13:50,730 --> 00:13:52,739
the event handler the control device

253
00:13:52,739 --> 00:13:54,859
implements the subscription manager and

254
00:13:54,859 --> 00:13:57,029
the controller then uses the

255
00:13:57,029 --> 00:13:58,799
subscription manager on the control

256
00:13:58,799 --> 00:14:01,079
device to register for what events it

257
00:14:01,079 --> 00:14:03,959
will need and when event when

258
00:14:03,959 --> 00:14:05,939
notifications come back through over the

259
00:14:05,939 --> 00:14:08,129
network those are just treated like

260
00:14:08,129 --> 00:14:12,359
method calls on the event handler so so

261
00:14:12,359 --> 00:14:15,869
our our method call mechanism works in

262
00:14:15,869 --> 00:14:22,049
both directions so that's the structure

263
00:14:22,049 --> 00:14:25,739
thus classes and the agents and managers

264
00:14:25,739 --> 00:14:28,679
and what's in that now we need to look

265
00:14:28,679 --> 00:14:30,569
at how to communicate this with these

266
00:14:30,569 --> 00:14:34,109
things and there's there's scope for

267
00:14:34,109 --> 00:14:38,009
multiple protocols in a es 70 currently

268
00:14:38,009 --> 00:14:40,470
there's one protocol defined which is a

269
00:14:40,470 --> 00:14:44,429
tcp/ip protocol in the future there's

270
00:14:44,429 --> 00:14:48,269
planning in place or doing control over

271
00:14:48,269 --> 00:14:51,449
UDP for smaller embedded devices which

272
00:14:51,449 --> 00:14:54,569
can't necessarily handle full TCP and

273
00:14:54,569 --> 00:14:57,149
there's also the possibility of doing

274
00:14:57,149 --> 00:15:01,910
control over USB so that would kind of

275
00:15:01,910 --> 00:15:04,829
standardize the control mechanism that

276
00:15:04,829 --> 00:15:07,019
you're no matter how your device happens

277
00:15:07,019 --> 00:15:08,879
to be connected at the time it uses the

278
00:15:08,879 --> 00:15:14,610
same control mechanism so OCP dot one is

279
00:15:14,610 --> 00:15:20,699
is the tcp/ip control protocol it

280
00:15:20,699 --> 00:15:23,459
defines a discovering mechanism the

281
00:15:23,459 --> 00:15:27,629
message format and the optionally some

282
00:15:27,629 --> 00:15:31,319
TLS and heartbeats for and monitoring

283
00:15:31,319 --> 00:15:37,619
device presence discovery is done by dns

284
00:15:37,619 --> 00:15:40,489
service discovery with multicast dns

285
00:15:40,489 --> 00:15:44,689
there's a couple of text records

286
00:15:44,689 --> 00:15:47,189
specified within the standard just so

287
00:15:47,189 --> 00:15:50,159
that devices can know what type of what

288
00:15:50,159 --> 00:15:51,959
version of the protocol they are

289
00:15:51,959 --> 00:15:55,980
connecting to and yeah the the actual

290
00:15:55,980 --> 00:16:00,149
service types are also specified the

291
00:16:00,149 --> 00:16:03,899
message format used itself on the

292
00:16:03,899 --> 00:16:07,009
protocol is a binary format it has

293
00:16:07,009 --> 00:16:10,970
various message types for the different

294
00:16:10,970 --> 00:16:15,869
situations and also specifies fully the

295
00:16:15,869 --> 00:16:18,480
data marshalling so that you can provide

296
00:16:18,480 --> 00:16:21,419
parameters on your message so for

297
00:16:21,419 --> 00:16:22,649
example you can provide method

298
00:16:22,649 --> 00:16:27,689
parameters or responses it's a fairly I

299
00:16:27,689 --> 00:16:29,519
haven't actually written it off here but

300
00:16:29,519 --> 00:16:31,379
it's just a fairly standard binary

301
00:16:31,379 --> 00:16:37,799
format type thing so that's the last of

302
00:16:37,799 --> 00:16:41,220
the controls and the protocols so now we

303
00:16:41,220 --> 00:16:45,149
have the organization's again obviously

304
00:16:45,149 --> 00:16:48,359
the AES is involved and that again

305
00:16:48,359 --> 00:16:50,279
standardization technical discussion

306
00:16:50,279 --> 00:16:53,970
there's also an alliance of companies

307
00:16:53,970 --> 00:16:57,239
called the OCA alliance they handle more

308
00:16:57,239 --> 00:16:59,089
of the promotion of the standard

309
00:16:59,089 --> 00:17:03,049
encouragingly adoption and actual

310
00:17:03,049 --> 00:17:04,888
discussions of the practical

311
00:17:04,888 --> 00:17:07,199
implementation tend to happen under the

312
00:17:07,199 --> 00:17:11,939
OCA Alliance so the current OCA Alliance

313
00:17:11,939 --> 00:17:14,638
members these are the full members

314
00:17:14,638 --> 00:17:17,339
there's again there's also associate

315
00:17:17,339 --> 00:17:20,970
membership and they tend to be audio

316
00:17:20,970 --> 00:17:22,550
equipment manufacturer

317
00:17:22,550 --> 00:17:25,210
folks rights in there Yamaha's in there

318
00:17:25,210 --> 00:17:31,810
DMB etc so it's quite wide across the

319
00:17:31,810 --> 00:17:38,510
audio industry and as this is more of a

320
00:17:38,510 --> 00:17:40,970
control protocol there are actually

321
00:17:40,970 --> 00:17:46,210
implementations available so there's a

322
00:17:46,210 --> 00:17:49,190
there's a sample implementation called

323
00:17:49,190 --> 00:17:52,520
OTA micro micro this is designed for

324
00:17:52,520 --> 00:17:56,420
embedded devices and that's intended

325
00:17:56,420 --> 00:17:59,270
more as it as a kind of dev kit so if

326
00:17:59,270 --> 00:18:02,030
you download that you actually get some

327
00:18:02,030 --> 00:18:04,990
source codes demonstrating the

328
00:18:04,990 --> 00:18:09,560
implementation of of AES 70 and there's

329
00:18:09,560 --> 00:18:11,750
some electronic schematics for a dev

330
00:18:11,750 --> 00:18:15,020
board that will run this this code the

331
00:18:15,020 --> 00:18:18,830
OSI ajs is more of a client-side

332
00:18:18,830 --> 00:18:20,660
implementation so for implementing

333
00:18:20,660 --> 00:18:23,000
controller applications that couldn't

334
00:18:23,000 --> 00:18:24,890
run in your browser and generate OCA

335
00:18:24,890 --> 00:18:26,540
commands to control various things on

336
00:18:26,540 --> 00:18:30,980
your network and so so that's quite easy

337
00:18:30,980 --> 00:18:32,360
to get up and running and get started

338
00:18:32,360 --> 00:18:40,280
with so we've so the got implementations

339
00:18:40,280 --> 00:18:43,580
and finally just summing up the benefits

340
00:18:43,580 --> 00:18:48,500
having a standard protocol is allows a

341
00:18:48,500 --> 00:18:52,760
better interrupt it's and it allows the

342
00:18:52,760 --> 00:18:54,440
possibility of things like custom

343
00:18:54,440 --> 00:18:56,710
controllers Hardware controllers to

344
00:18:56,710 --> 00:19:00,890
interact with the audio network it makes

345
00:19:00,890 --> 00:19:04,370
a good fit with AES 67 and the structure

346
00:19:04,370 --> 00:19:07,690
used the object-oriented structure

347
00:19:07,690 --> 00:19:11,690
allows for easy extension where we're

348
00:19:11,690 --> 00:19:15,800
needed so yes for more information

349
00:19:15,800 --> 00:19:19,220
there's the OCA alliance there's the AES

350
00:19:19,220 --> 00:19:22,780
and there's the downloads for the

351
00:19:22,780 --> 00:19:26,680
implementations thank you

352
00:19:26,680 --> 00:19:53,830
a s70 sign yes okay so the question is

353
00:19:53,830 --> 00:19:58,330
what does yeah yes yeah okay the the

354
00:19:58,330 --> 00:20:03,810
question is what does a s-70 bring that

355
00:20:03,810 --> 00:20:09,060
osc open sound control couldn't handle

356
00:20:09,060 --> 00:20:13,380
I'd say it's more in terms of the

357
00:20:13,380 --> 00:20:18,850
specialization so OSC was more focused

358
00:20:18,850 --> 00:20:22,690
towards being kind of a MIDI replacement

359
00:20:22,690 --> 00:20:26,860
for instrument products or that market

360
00:20:26,860 --> 00:20:29,980
and this is more focused towards the

361
00:20:29,980 --> 00:20:34,330
high-end fro audio market and so we we

362
00:20:34,330 --> 00:20:37,150
just see a different focus in and kind

363
00:20:37,150 --> 00:20:38,710
of what objects are implemented in the

364
00:20:38,710 --> 00:20:42,900
protocols and what controls they allow

365
00:20:57,770 --> 00:21:02,990
[Applause]

366
00:21:11,780 --> 00:21:17,480
[Music]

367
00:22:37,330 --> 00:22:40,490
[Music]

368
00:25:00,370 --> 00:25:03,479
[Music]

