1
00:00:00,030 --> 00:00:03,260
all right so

2
00:00:05,009 --> 00:00:08,370
so I'm a maker I am an ffmpeg developer

3
00:00:08,370 --> 00:00:11,430
I've done a lot of work on audio codecs

4
00:00:11,430 --> 00:00:13,590
and video codecs I was crazy enough to

5
00:00:13,590 --> 00:00:16,439
write Dola decoder a year ago and I

6
00:00:16,439 --> 00:00:18,140
wrote the first known level was based

7
00:00:18,140 --> 00:00:21,150
encoder just when I released it just

8
00:00:21,150 --> 00:00:23,579
like a week ago so what I'm going to be

9
00:00:23,579 --> 00:00:26,249
talking about today is a b-1 now for

10
00:00:26,249 --> 00:00:27,779
those of you who don't know what a b-1

11
00:00:27,779 --> 00:00:30,119
is I prepared a slide for that so

12
00:00:30,119 --> 00:00:32,549
everyone is supposed to be interoperable

13
00:00:32,549 --> 00:00:36,510
and open so it's going it's always going

14
00:00:36,510 --> 00:00:38,520
to be royalty-free and it's going to

15
00:00:38,520 --> 00:00:41,040
build mice for the internet so that so

16
00:00:41,040 --> 00:00:43,530
that you know many of the people who are

17
00:00:43,530 --> 00:00:45,600
in this room can you know directly

18
00:00:45,600 --> 00:00:48,330
benefit from that you know being the

19
00:00:48,330 --> 00:00:50,280
increase in video compression royalty

20
00:00:50,280 --> 00:00:53,910
free audio stuff it's going to be

21
00:00:53,910 --> 00:00:56,430
scalable to any modern device then you

22
00:00:56,430 --> 00:00:59,160
bandwidth mostly it's going to be

23
00:00:59,160 --> 00:01:01,710
divided optimized for for the hardware

24
00:01:01,710 --> 00:01:03,870
so that you can easily record out with

25
00:01:03,870 --> 00:01:06,479
little power on the on a hardware

26
00:01:06,479 --> 00:01:09,810
decoder and also encode it with varying

27
00:01:09,810 --> 00:01:14,010
degrees of success and you know all the

28
00:01:14,010 --> 00:01:15,690
other stuff which which you see all the

29
00:01:15,690 --> 00:01:18,600
time in marketing this is this by the

30
00:01:18,600 --> 00:01:22,229
way I stole from the Aon website so that

31
00:01:22,229 --> 00:01:23,610
I would never write something like that

32
00:01:23,610 --> 00:01:25,229
so decode it

33
00:01:25,229 --> 00:01:27,090
this would mean something like that this

34
00:01:27,090 --> 00:01:28,800
these are the real bullet points so it's

35
00:01:28,800 --> 00:01:30,270
going to be royalty-free it's going to

36
00:01:30,270 --> 00:01:33,659
be it's it is already you know in

37
00:01:33,659 --> 00:01:37,040
development and it's already open and

38
00:01:37,040 --> 00:01:39,540
lots of companies are participating in

39
00:01:39,540 --> 00:01:42,750
in the development of this codec so so

40
00:01:42,750 --> 00:01:45,470
all the major players like Amazon

41
00:01:45,470 --> 00:01:50,880
Netflix Google YouTube Mozilla and so on

42
00:01:50,880 --> 00:01:54,530
and so whatever happens the coracle see

43
00:01:54,530 --> 00:02:00,060
adoption but so what's important now is

44
00:02:00,060 --> 00:02:03,180
to get the codec to be competitive with

45
00:02:03,180 --> 00:02:04,799
with other codecs that are building

46
00:02:04,799 --> 00:02:07,770
being developer right now and also make

47
00:02:07,770 --> 00:02:09,658
it an upgrade so any codecs which are

48
00:02:09,658 --> 00:02:12,660
currently being used so now

49
00:02:12,660 --> 00:02:15,590
unfortunately now it's not all you know

50
00:02:15,590 --> 00:02:17,600
companies have joined

51
00:02:17,600 --> 00:02:19,340
so there there is still some

52
00:02:19,340 --> 00:02:21,050
intellectual property are there which

53
00:02:21,050 --> 00:02:24,230
which we cannot use so that means that

54
00:02:24,230 --> 00:02:26,390
we have to get clever and we have to go

55
00:02:26,390 --> 00:02:29,900
around that in some ways and the whole

56
00:02:29,900 --> 00:02:31,190
process of going around means

57
00:02:31,190 --> 00:02:33,770
rediscovering new ways of doing

58
00:02:33,770 --> 00:02:35,750
something which might or might not be

59
00:02:35,750 --> 00:02:36,530
more efficient

60
00:02:36,530 --> 00:02:40,790
so moving on the reference encoder is

61
00:02:40,790 --> 00:02:44,840
based on vp9 without vp8 support but

62
00:02:44,840 --> 00:02:48,380
with bug fixes so so some of those bug

63
00:02:48,380 --> 00:02:51,830
fixes were meant to go into vp9 but

64
00:02:51,830 --> 00:02:56,090
didn't so they gave made it into v10 but

65
00:02:56,090 --> 00:03:00,830
then got turned into into a v1 and so so

66
00:03:00,830 --> 00:03:06,410
we carry on so the way that that the

67
00:03:06,410 --> 00:03:08,720
development works is companies

68
00:03:08,720 --> 00:03:11,630
contribute experiments and these

69
00:03:11,630 --> 00:03:13,970
experiments make it into get master of

70
00:03:13,970 --> 00:03:18,190
the encoder and after being integrated

71
00:03:18,190 --> 00:03:21,110
the experiments are supposed to go

72
00:03:21,110 --> 00:03:24,080
through intellectual property review so

73
00:03:24,080 --> 00:03:26,890
there's a team of lawyers who looks at

74
00:03:26,890 --> 00:03:30,140
the description of the encoding tool and

75
00:03:30,140 --> 00:03:33,170
and tries to find patents which have

76
00:03:33,170 --> 00:03:34,490
been updated or which haven't been

77
00:03:34,490 --> 00:03:36,680
updated which match the description of

78
00:03:36,680 --> 00:03:40,580
what the tool does so and eventually

79
00:03:40,580 --> 00:03:42,620
after the bitstream has been frozen

80
00:03:42,620 --> 00:03:44,900
which should happen around q4 of this

81
00:03:44,900 --> 00:03:47,390
year all the experiment should be

82
00:03:47,390 --> 00:03:51,380
removed this is what's in my imagination

83
00:03:51,380 --> 00:03:54,140
what's meant to happen but it hasn't

84
00:03:54,140 --> 00:03:56,840
happened yet so about the experiments

85
00:03:56,840 --> 00:03:59,840
there are currently 50 experiments and

86
00:03:59,840 --> 00:04:03,500
granted some of them might don't sound

87
00:04:03,500 --> 00:04:05,870
appealing or down or don't sound like

88
00:04:05,870 --> 00:04:07,430
they contribute anything like Hamlet

89
00:04:07,430 --> 00:04:10,880
hardware or the big bitstream but the

90
00:04:10,880 --> 00:04:15,100
point is that most of these experiments

91
00:04:15,100 --> 00:04:20,000
increase encoding efficiency and well

92
00:04:20,000 --> 00:04:21,920
there's just 50 of them and they're

93
00:04:21,920 --> 00:04:23,750
being constantly developed and updated

94
00:04:23,750 --> 00:04:25,910
so there's a whole lot of development

95
00:04:25,910 --> 00:04:30,210
going on right now so I cannot really

96
00:04:30,210 --> 00:04:33,870
for every single the of the 50 tools of

97
00:04:33,870 --> 00:04:36,509
the theory of the experiments which are

98
00:04:36,509 --> 00:04:39,590
currently and chorok not to mention that

99
00:04:39,590 --> 00:04:42,780
every month new experiments get added

100
00:04:42,780 --> 00:04:44,940
and some experiments get enabled by

101
00:04:44,940 --> 00:04:45,539
default

102
00:04:45,539 --> 00:04:49,020
and so it's it's kind of difficult to

103
00:04:49,020 --> 00:04:51,240
keep track of but I'll just go through

104
00:04:51,240 --> 00:04:53,789
some of the coding tools which which

105
00:04:53,789 --> 00:04:56,490
have been demonstrated to give gains and

106
00:04:56,490 --> 00:04:59,789
have you know are good candidates for

107
00:04:59,789 --> 00:05:03,479
being you know part of the Corrick and

108
00:05:03,479 --> 00:05:06,090
the specifications later on so the first

109
00:05:06,090 --> 00:05:08,340
tool which I'll cover is directional D

110
00:05:08,340 --> 00:05:10,849
ringing now direction of D ringing was

111
00:05:10,849 --> 00:05:13,410
was something which was ported from Tala

112
00:05:13,410 --> 00:05:16,770
and it was required in dollar because

113
00:05:16,770 --> 00:05:20,190
dollar used overlap and well most of the

114
00:05:20,190 --> 00:05:21,530
encoding techniques in dollar

115
00:05:21,530 --> 00:05:25,080
contributed to some degree of ringing in

116
00:05:25,080 --> 00:05:27,240
the image so this during in future was

117
00:05:27,240 --> 00:05:29,550
developed for dolla but it turns out

118
00:05:29,550 --> 00:05:32,070
that since it's a right at the very end

119
00:05:32,070 --> 00:05:35,010
of the encoding process at the decoding

120
00:05:35,010 --> 00:05:36,930
process you can just easily paste that

121
00:05:36,930 --> 00:05:40,260
into any Korek and it will just work so

122
00:05:40,260 --> 00:05:42,060
the way it works is you first segment

123
00:05:42,060 --> 00:05:46,070
the game and chinchou 8x8 blocks and

124
00:05:46,070 --> 00:05:49,620
then you scan for a direction inside

125
00:05:49,620 --> 00:05:52,440
this 8 by 8 block so you do that by

126
00:05:52,440 --> 00:05:58,020
computing the the the least squares

127
00:05:58,020 --> 00:06:00,780
method I think so the direction doesn't

128
00:06:00,780 --> 00:06:03,030
really matter what matters is that it

129
00:06:03,030 --> 00:06:05,520
does a conditional replacement filter so

130
00:06:05,520 --> 00:06:08,580
instead of blurring out any artifacts

131
00:06:08,580 --> 00:06:13,500
and by extension any in detail in the

132
00:06:13,500 --> 00:06:18,720
image it only acts on on very obvious no

133
00:06:18,720 --> 00:06:21,870
ringing patterns so in case the single

134
00:06:21,870 --> 00:06:24,360
pixel deviates by some amount which

135
00:06:24,360 --> 00:06:27,419
varies as a function of how far away

136
00:06:27,419 --> 00:06:30,120
your perpendicularly from from the

137
00:06:30,120 --> 00:06:33,720
direction vector it will replace it with

138
00:06:33,720 --> 00:06:36,750
with some kind of an average so it works

139
00:06:36,750 --> 00:06:38,880
really well when it gives I think around

140
00:06:38,880 --> 00:06:40,860
two or three percent improvements it's

141
00:06:40,860 --> 00:06:42,020
also easily

142
00:06:42,020 --> 00:06:45,259
and it has currently been enabled by

143
00:06:45,259 --> 00:06:49,340
default in 81 so so this dough is

144
00:06:49,340 --> 00:06:51,710
probably going to make it into the final

145
00:06:51,710 --> 00:06:53,990
version of the codec and number two is

146
00:06:53,990 --> 00:06:56,840
baby kill now ppq is going to give by

147
00:06:56,840 --> 00:06:59,060
far the most gains but it's by far the

148
00:06:59,060 --> 00:07:00,970
most difficult tool to integrate and

149
00:07:00,970 --> 00:07:04,550
what you can think of pvq is you can

150
00:07:04,550 --> 00:07:06,590
think of it as a black box where you can

151
00:07:06,590 --> 00:07:08,750
insert any kind of coefficients in the

152
00:07:08,750 --> 00:07:10,310
frequency domain and Vivek you will

153
00:07:10,310 --> 00:07:13,150
predict from both the current

154
00:07:13,150 --> 00:07:16,610
the current image and whatever you give

155
00:07:16,610 --> 00:07:19,909
it in to predict from so so it can be

156
00:07:19,909 --> 00:07:22,759
previous pixel values and previous

157
00:07:22,759 --> 00:07:25,190
coefficient values or it can be for

158
00:07:25,190 --> 00:07:27,530
instance coefficients from luma and you

159
00:07:27,530 --> 00:07:30,979
want to predict chroma so so the way it

160
00:07:30,979 --> 00:07:33,949
works is well I'm not really going to

161
00:07:33,949 --> 00:07:35,419
explain it but you can see from the

162
00:07:35,419 --> 00:07:38,599
diagram that if you imagine the

163
00:07:38,599 --> 00:07:42,680
coefficients inside a block as a vector

164
00:07:42,680 --> 00:07:46,280
you can describe that vector as pointing

165
00:07:46,280 --> 00:07:49,009
to 2 to the surface of a sphere of an

166
00:07:49,009 --> 00:07:51,139
engine of an n-dimensional sphere and if

167
00:07:51,139 --> 00:07:52,880
you have another vector which is what

168
00:07:52,880 --> 00:07:54,409
you're wanting to predict from you can

169
00:07:54,409 --> 00:07:56,180
do just a householder reflection and

170
00:07:56,180 --> 00:07:59,599
then you just send a ATT angle which is

171
00:07:59,599 --> 00:08:05,210
which is n minus 1 values long so I just

172
00:08:05,210 --> 00:08:06,949
wanted to spend some time on on

173
00:08:06,949 --> 00:08:08,659
discussing Vivek you search because I

174
00:08:08,659 --> 00:08:12,259
think critical search is a well it's an

175
00:08:12,259 --> 00:08:14,930
important problem which which also needs

176
00:08:14,930 --> 00:08:18,740
to be to be you know solved and made

177
00:08:18,740 --> 00:08:20,539
faster we currently have an

178
00:08:20,539 --> 00:08:22,370
implementation which is carried on from

179
00:08:22,370 --> 00:08:24,349
opens because help us used a pbq search

180
00:08:24,349 --> 00:08:27,770
as well we do our deal on the p vq

181
00:08:27,770 --> 00:08:30,020
search so that's a bit different but the

182
00:08:30,020 --> 00:08:33,950
root of the problem is is is very simple

183
00:08:33,950 --> 00:08:37,820
so if you have a vector and and you want

184
00:08:37,820 --> 00:08:41,089
to quantize it using a pivot you search

185
00:08:41,089 --> 00:08:43,610
you just normalized vector to an l2

186
00:08:43,610 --> 00:08:45,800
which is which is the Euclidean norm

187
00:08:45,800 --> 00:08:47,899
which is basically you sum of the

188
00:08:47,899 --> 00:08:51,440
squares of each component then you do a

189
00:08:51,440 --> 00:08:53,300
square root and then you divide each

190
00:08:53,300 --> 00:08:54,140
component of

191
00:08:54,140 --> 00:08:59,450
by the square root and and well you do

192
00:08:59,450 --> 00:09:02,450
that for for the outputs vector

193
00:09:02,450 --> 00:09:05,450
quantized as well so it's a simple

194
00:09:05,450 --> 00:09:08,180
problem but but it gives great results

195
00:09:08,180 --> 00:09:11,210
and and I think it's the way to do

196
00:09:11,210 --> 00:09:16,400
vector quantization so so if we if if

197
00:09:16,400 --> 00:09:18,590
some of you wants you to go ahead and

198
00:09:18,590 --> 00:09:20,540
give it a go and give it a try and

199
00:09:20,540 --> 00:09:22,100
improving it you will improve our

200
00:09:22,100 --> 00:09:24,170
performance not just in tower not just

201
00:09:24,170 --> 00:09:26,510
in opus but in a v1 as well so that will

202
00:09:26,510 --> 00:09:31,550
be useful but the properties of PDQ is

203
00:09:31,550 --> 00:09:33,070
also what makes it very interesting

204
00:09:33,070 --> 00:09:37,670
using PV Q we can vary D the codebook so

205
00:09:37,670 --> 00:09:39,620
we can optimize it for instance for

206
00:09:39,620 --> 00:09:42,860
areas which have low contrasts so so

207
00:09:42,860 --> 00:09:44,450
this is what activity masking tries to

208
00:09:44,450 --> 00:09:47,330
do it's it attempts to provide better

209
00:09:47,330 --> 00:09:50,570
resolution at in low cost and contrast

210
00:09:50,570 --> 00:09:53,630
images and this is this is in contrast

211
00:09:53,630 --> 00:09:57,400
with with hvcu which attempts to

212
00:09:57,400 --> 00:10:00,020
aggressively remove details from the

213
00:10:00,020 --> 00:10:03,020
original image and if any of you has has

214
00:10:03,020 --> 00:10:05,450
done any encoding using HPC they all

215
00:10:05,450 --> 00:10:08,630
know that Sao basically is a tool which

216
00:10:08,630 --> 00:10:11,090
you which you turn off if you see any

217
00:10:11,090 --> 00:10:13,400
bad result immediately so clearly I'm

218
00:10:13,400 --> 00:10:14,990
asking is is something which is

219
00:10:14,990 --> 00:10:18,920
difficult to kind of make it into a v1

220
00:10:18,920 --> 00:10:20,690
since it requires a different distortion

221
00:10:20,690 --> 00:10:22,370
function but we're all actively working

222
00:10:22,370 --> 00:10:25,220
on trying to make it into into something

223
00:10:25,220 --> 00:10:29,380
usable in a v1 so another tool which

224
00:10:29,380 --> 00:10:33,290
which which is also ported from dala is

225
00:10:33,290 --> 00:10:37,040
chroma foam luma and since we do pvq

226
00:10:37,040 --> 00:10:39,200
entirely in the frequency domain this

227
00:10:39,200 --> 00:10:43,580
means that we can also inject the values

228
00:10:43,580 --> 00:10:46,780
from chroma from luma coefficients and

229
00:10:46,780 --> 00:10:49,790
more accurately describe what exactly

230
00:10:49,790 --> 00:10:53,450
are the videos in the in the chroma so

231
00:10:53,450 --> 00:10:56,570
you might ask well how does it work when

232
00:10:56,570 --> 00:11:00,470
you have a support chroma well you use

233
00:11:00,470 --> 00:11:02,720
their switching to throw away any

234
00:11:02,720 --> 00:11:04,700
details remember this is all in the

235
00:11:04,700 --> 00:11:06,800
frequency domain so you cannot do

236
00:11:06,800 --> 00:11:09,889
you know rescaling and the you know

237
00:11:09,889 --> 00:11:13,339
conversion in in the spatial domain

238
00:11:13,339 --> 00:11:14,750
since we're all in the frequency domain

239
00:11:14,750 --> 00:11:17,600
so the resulting coefficients will be

240
00:11:17,600 --> 00:11:20,839
used in a DCT transform and that's one

241
00:11:20,839 --> 00:11:22,610
of the difficulties in implementing

242
00:11:22,610 --> 00:11:24,589
chroma from lumen in everyone since

243
00:11:24,589 --> 00:11:27,050
everyone has currently two different

244
00:11:27,050 --> 00:11:29,899
transforms everyone has dcts which are

245
00:11:29,899 --> 00:11:33,529
the standard way of doing of doing

246
00:11:33,529 --> 00:11:35,660
transforms and there is an ad SD which

247
00:11:35,660 --> 00:11:39,589
which allows you to to to in some

248
00:11:39,589 --> 00:11:41,329
circumstances get better results but

249
00:11:41,329 --> 00:11:44,149
there are more transforms being planned

250
00:11:44,149 --> 00:11:47,509
to be added into a v1 so chroma from

251
00:11:47,509 --> 00:11:49,130
luma is kind of a difficult thing to

252
00:11:49,130 --> 00:11:51,319
implement but the results really show

253
00:11:51,319 --> 00:11:53,029
that there's a big improvement in chroma

254
00:11:53,029 --> 00:11:54,980
detail I mean luma detail as well since

255
00:11:54,980 --> 00:11:57,529
in order to better describe chroma you

256
00:11:57,529 --> 00:12:01,069
need better luma so that's why idea so

257
00:12:01,069 --> 00:12:05,540
that's why CFL is is looking like a nice

258
00:12:05,540 --> 00:12:07,339
feature to into intervention to the

259
00:12:07,339 --> 00:12:09,829
final version of the codec now a note is

260
00:12:09,829 --> 00:12:13,760
that it works for 444 and it works for 4

261
00:12:13,760 --> 00:12:17,180
to 0 formats but it doesn't work for 4

262
00:12:17,180 --> 00:12:21,079
to 2 so if you want to use 4 to 2 please

263
00:12:21,079 --> 00:12:24,860
don't just just use 4 for 4 or for 20 or

264
00:12:24,860 --> 00:12:27,290
but just increase the bitrate you know

265
00:12:27,290 --> 00:12:28,880
you can always just increase the bit

266
00:12:28,880 --> 00:12:31,490
rate like the old 80 mega bits in

267
00:12:31,490 --> 00:12:33,500
picture streams and pad the bit stream

268
00:12:33,500 --> 00:12:35,540
but in order to pop the bit stream

269
00:12:35,540 --> 00:12:37,940
there's a convenient segue here you need

270
00:12:37,940 --> 00:12:40,519
to ensure that the codec that the rate

271
00:12:40,519 --> 00:12:42,949
control system will not overshoot so

272
00:12:42,949 --> 00:12:44,839
weight will not overshoot grossly since

273
00:12:44,839 --> 00:12:46,670
if you plan to pad then you obviously

274
00:12:46,670 --> 00:12:50,720
want to pad to some to some bitrate but

275
00:12:50,720 --> 00:12:52,310
you don't want to overshoot of course so

276
00:12:52,310 --> 00:12:55,010
so this is what I'm currently working on

277
00:12:55,010 --> 00:12:57,230
I'm trying to fix the rate control

278
00:12:57,230 --> 00:12:59,810
system in everyone by just scrapping it

279
00:12:59,810 --> 00:13:02,569
and by inserting the rate control system

280
00:13:02,569 --> 00:13:03,800
from dala

281
00:13:03,800 --> 00:13:06,019
which was also the rate control system

282
00:13:06,019 --> 00:13:08,180
from zero but was ported to Dola

283
00:13:08,180 --> 00:13:12,199
so so the rate control system which

284
00:13:12,199 --> 00:13:15,519
which I'm working on the tries to

285
00:13:15,519 --> 00:13:18,930
basically predict the amount of

286
00:13:18,930 --> 00:13:23,520
bits data that a that the current frame

287
00:13:23,520 --> 00:13:26,160
will use and it does that by by just

288
00:13:26,160 --> 00:13:29,370
this simple model and the scale value is

289
00:13:29,370 --> 00:13:32,100
its what's modified from frame to frame

290
00:13:32,100 --> 00:13:37,410
so the codec will first give the use the

291
00:13:37,410 --> 00:13:39,720
scale value from the previous frame so

292
00:13:39,720 --> 00:13:42,030
and will predict the bits the current

293
00:13:42,030 --> 00:13:46,470
frame will take and will then after the

294
00:13:46,470 --> 00:13:48,450
frames in encoded it will measure the

295
00:13:48,450 --> 00:13:50,580
real scale value since you know how many

296
00:13:50,580 --> 00:13:52,410
bits you've used on you and you know the

297
00:13:52,410 --> 00:13:55,530
quantizer and alpha is just some is just

298
00:13:55,530 --> 00:13:58,260
an exponentiate value which is which is

299
00:13:58,260 --> 00:14:02,610
different for all frame types and it

300
00:14:02,610 --> 00:14:04,950
will correctly and it will try to

301
00:14:04,950 --> 00:14:07,770
smoothly transition scale from one frame

302
00:14:07,770 --> 00:14:09,810
to the other frame using a second order

303
00:14:09,810 --> 00:14:13,080
bessel filter which will also throw away

304
00:14:13,080 --> 00:14:19,080
any any extremes in the in the final

305
00:14:19,080 --> 00:14:22,530
quantization values being used and as

306
00:14:22,530 --> 00:14:26,190
such it will it will give a smoother you

307
00:14:26,190 --> 00:14:26,640
know

308
00:14:26,640 --> 00:14:30,390
visual experiment experience of of

309
00:14:30,390 --> 00:14:33,030
encoding so it won't do any gross

310
00:14:33,030 --> 00:14:34,770
overshoots that the current rate control

311
00:14:34,770 --> 00:14:36,840
system does and just to share something

312
00:14:36,840 --> 00:14:39,690
with you I have seen on YouTube a 200

313
00:14:39,690 --> 00:14:42,810
megabits sustained for five or so

314
00:14:42,810 --> 00:14:46,800
seconds on a on a stream directly from

315
00:14:46,800 --> 00:14:47,370
YouTube

316
00:14:47,370 --> 00:14:50,070
granted it was vp9 but it was 4k at 30

317
00:14:50,070 --> 00:14:52,770
frames but still nothing warrants 200

318
00:14:52,770 --> 00:14:55,320
megabits of you know of continuous usage

319
00:14:55,320 --> 00:15:00,450
for a few seconds so so Anatole and this

320
00:15:00,450 --> 00:15:02,780
rate control system also will support a

321
00:15:02,780 --> 00:15:10,380
a way of easily providing chunks so the

322
00:15:10,380 --> 00:15:13,410
two kind of encode so instead of instead

323
00:15:13,410 --> 00:15:16,500
of you know encoding separate tempering

324
00:15:16,500 --> 00:15:20,160
chunks I mean a few seconds worth video

325
00:15:20,160 --> 00:15:23,220
you know of chunks you can just signal a

326
00:15:23,220 --> 00:15:26,100
reset in the in the two pass mode of the

327
00:15:26,100 --> 00:15:29,310
of the rate control system and it will

328
00:15:29,310 --> 00:15:30,900
reset all the statistics and you can

329
00:15:30,900 --> 00:15:31,840
just

330
00:15:31,840 --> 00:15:34,240
continue on encoding as if as if you've

331
00:15:34,240 --> 00:15:37,230
just started encoding a new frame and

332
00:15:37,230 --> 00:15:42,430
yeah yeah alright and another feature

333
00:15:42,430 --> 00:15:44,050
which I'd also like to talk about

334
00:15:44,050 --> 00:15:47,650
shortly is RNs and RNs is being

335
00:15:47,650 --> 00:15:50,380
developed by Google currently and RNs

336
00:15:50,380 --> 00:15:52,300
will offer big improvements in the

337
00:15:52,300 --> 00:15:56,200
coding speed but but unfortunately there

338
00:15:56,200 --> 00:16:00,640
are some drawbacks it needs a big enough

339
00:16:00,640 --> 00:16:02,620
buffer to store all the symbols in the

340
00:16:02,620 --> 00:16:05,580
encoder before reversing them and and

341
00:16:05,580 --> 00:16:08,110
writing that as a bit string because it

342
00:16:08,110 --> 00:16:11,140
works kind of as a stack so there are

343
00:16:11,140 --> 00:16:14,050
some hardware manufacturers which which

344
00:16:14,050 --> 00:16:16,990
aren't content with with having a huge

345
00:16:16,990 --> 00:16:21,160
buffer but but at the end it's either

346
00:16:21,160 --> 00:16:23,500
this or the dollar entropy coding system

347
00:16:23,500 --> 00:16:25,030
both of which have the same efficiency

348
00:16:25,030 --> 00:16:27,280
but airiness has the advantage of having

349
00:16:27,280 --> 00:16:33,370
a higher decoding speeds and and there

350
00:16:33,370 --> 00:16:35,860
are also some experiments which which

351
00:16:35,860 --> 00:16:38,530
which I cannot really dedicate the

352
00:16:38,530 --> 00:16:41,590
entire time to talk about but there are

353
00:16:41,590 --> 00:16:44,230
CX Det X which will give more transforms

354
00:16:44,230 --> 00:16:45,910
which are which has already mentioned

355
00:16:45,910 --> 00:16:48,510
will kind of be a bit of a problem for

356
00:16:48,510 --> 00:16:52,540
CFL but I'm sure we can make do it with

357
00:16:52,540 --> 00:16:53,050
it somehow

358
00:16:53,050 --> 00:16:56,380
there's also any an adaptive coding

359
00:16:56,380 --> 00:16:59,290
order so the old zigzag which which

360
00:16:59,290 --> 00:17:01,420
isn't paid and then anymore

361
00:17:01,420 --> 00:17:04,859
it turns out that the old zigzag may not

362
00:17:04,859 --> 00:17:07,390
result in the best encoding efficiency

363
00:17:07,390 --> 00:17:09,339
so if you have some kind of other

364
00:17:09,339 --> 00:17:11,530
patterns you can you can use and you can

365
00:17:11,530 --> 00:17:13,540
do are do to figure out which pattern is

366
00:17:13,540 --> 00:17:16,119
the best then you know you if the

367
00:17:16,119 --> 00:17:17,680
experiment turns out to give

368
00:17:17,680 --> 00:17:19,510
improvements will also make it in and

369
00:17:19,510 --> 00:17:22,359
also there's 64 by 64 transforms which

370
00:17:22,359 --> 00:17:25,180
which aren't quite certain that that

371
00:17:25,180 --> 00:17:28,240
will make it end but but will provide

372
00:17:28,240 --> 00:17:33,690
big gains on any kind of large uniform

373
00:17:34,740 --> 00:17:38,890
images so with that I'd like to end the

374
00:17:38,890 --> 00:17:40,540
presentation and if there are any

375
00:17:40,540 --> 00:17:41,780
questions

376
00:17:41,780 --> 00:17:54,770
I'd be happy to answer yeah that's yeah

377
00:17:54,770 --> 00:17:57,190
that's the million dollar question and

378
00:17:57,190 --> 00:18:00,500
yeah yeah so the question was are we

379
00:18:00,500 --> 00:18:04,490
going to support interlaced and well I'm

380
00:18:04,490 --> 00:18:10,790
not sure a no comment I can't I cannot

381
00:18:10,790 --> 00:18:13,670
say no I mean you know how it is it's

382
00:18:13,670 --> 00:18:15,080
not designed by committee but it is

383
00:18:15,080 --> 00:18:16,730
still designed by some people with

384
00:18:16,730 --> 00:18:19,130
various interests so whether it will not

385
00:18:19,130 --> 00:18:21,440
make it or make it I cannot say but you

386
00:18:21,440 --> 00:18:22,790
know many of us have strong opinions

387
00:18:22,790 --> 00:18:38,990
about it not very strong yeah so yeah

388
00:18:38,990 --> 00:18:42,290
well the question was wasn't the big

389
00:18:42,290 --> 00:18:43,640
thing going to be frozen in March of

390
00:18:43,640 --> 00:18:46,340
this year and well the bitstream was

391
00:18:46,340 --> 00:18:49,130
going to be frozen last year and it was

392
00:18:49,130 --> 00:18:52,040
going to be frozen many you know times

393
00:18:52,040 --> 00:18:53,630
before that but you know how it is you

394
00:18:53,630 --> 00:18:56,470
know you just have to keep you know

395
00:18:56,470 --> 00:18:59,750
extending because some features you

396
00:18:59,750 --> 00:19:02,240
really don't you need some more research

397
00:19:02,240 --> 00:19:04,580
to vote or to improve some features but

398
00:19:04,580 --> 00:19:06,860
what's important is that we don't want

399
00:19:06,860 --> 00:19:08,570
to delay it too much because by that

400
00:19:08,570 --> 00:19:13,010
time age t66 will will be out and and

401
00:19:13,010 --> 00:19:16,130
we'll have to compete with that and we

402
00:19:16,130 --> 00:19:19,250
want to get adopted before that so that

403
00:19:19,250 --> 00:19:21,650
less people will adopt the less

404
00:19:21,650 --> 00:19:24,740
royalty-free equivalents of you know

405
00:19:24,740 --> 00:19:29,890
video compression codecs so anyone else

406
00:19:29,890 --> 00:19:32,890
yeah

407
00:19:51,650 --> 00:19:56,990
yeah well you should look into until

408
00:19:56,990 --> 00:20:00,450
yeah so the question was have we looked

409
00:20:00,450 --> 00:20:04,710
into storing motion information as as a

410
00:20:04,710 --> 00:20:07,710
kind of a treaty type of type of thing

411
00:20:07,710 --> 00:20:08,940
where the tur dimension is time I

412
00:20:08,940 --> 00:20:11,520
presume right well there there was an

413
00:20:11,520 --> 00:20:14,280
experiment that Ziff tried to make it

414
00:20:14,280 --> 00:20:15,750
was a codec I don't remember its name

415
00:20:15,750 --> 00:20:18,690
but it used wavelets in three dimensions

416
00:20:18,690 --> 00:20:24,240
to try to compress video and and as far

417
00:20:24,240 --> 00:20:26,220
as I remember you could actually see you

418
00:20:26,220 --> 00:20:29,850
know information images ahead of time

419
00:20:29,850 --> 00:20:31,740
you know before they happen is kind of a

420
00:20:31,740 --> 00:20:34,440
ghostly and you know images but apart

421
00:20:34,440 --> 00:20:36,510
from that nothing's being looked into it

422
00:20:36,510 --> 00:20:38,910
because it's just so radically different

423
00:20:38,910 --> 00:20:43,050
and sounds and is difficult so to kind

424
00:20:43,050 --> 00:20:45,630
of do enough research to get something

425
00:20:45,630 --> 00:20:48,660
which is which is actually implementable

426
00:20:48,660 --> 00:20:50,670
and gives improve it gives encoding

427
00:20:50,670 --> 00:20:53,190
gains and doesn't require you know much

428
00:20:53,190 --> 00:20:55,800
hardware you know to actually implement

429
00:20:55,800 --> 00:20:58,860
so so I don't think that it's the way to

430
00:20:58,860 --> 00:21:00,630
do it and I don't think it's the way to

431
00:21:00,630 --> 00:21:03,140
do it for the next 50 years or something

432
00:21:03,140 --> 00:21:06,480
all right there's a there's so there's a

433
00:21:06,480 --> 00:21:09,290
person area back

434
00:21:11,610 --> 00:21:22,170
okay so the question was are we going to

435
00:21:22,170 --> 00:21:26,390
work on mp4 encapsulation right well

436
00:21:26,390 --> 00:21:29,190
let's first get a codec which is which

437
00:21:29,190 --> 00:21:31,560
is presentable and then we'll work on

438
00:21:31,560 --> 00:21:35,820
empty for you know mixing because as it

439
00:21:35,820 --> 00:21:37,860
is right now all of us are working on

440
00:21:37,860 --> 00:21:42,870
improving the codec but but you know I'm

441
00:21:42,870 --> 00:21:45,630
not sure why you won't use mp4 you know

442
00:21:45,630 --> 00:21:50,360
because mp4 is what 20 years old now

443
00:21:51,170 --> 00:21:58,980
if it ain't broke yeah but well

444
00:21:58,980 --> 00:22:02,280
regardless of whether it's in mp4 it

445
00:22:02,280 --> 00:22:04,050
almost appears on the internet and right

446
00:22:04,050 --> 00:22:06,030
now WebM is the de facto standard for

447
00:22:06,030 --> 00:22:08,700
for video and audio encoding on the

448
00:22:08,700 --> 00:22:11,430
internet so it will first be implemented

449
00:22:11,430 --> 00:22:15,240
in weapon so well sorry about that

450
00:22:15,240 --> 00:22:31,890
any any other yeah so the question is

451
00:22:31,890 --> 00:22:34,200
are there plans for long time OD

452
00:22:34,200 --> 00:22:44,280
training well there will always be frame

453
00:22:44,280 --> 00:22:47,630
trading but there will always be the

454
00:22:47,630 --> 00:22:50,130
well in the decoder but there will

455
00:22:50,130 --> 00:22:52,140
always be tout rating as well so right

456
00:22:52,140 --> 00:22:54,860
now there are no plans to drop tau tau

457
00:22:54,860 --> 00:22:59,430
you know training the coding but I think

458
00:22:59,430 --> 00:23:00,750
there were some plans to drop frame

459
00:23:00,750 --> 00:23:05,070
parlo decoding so there's a you have to

460
00:23:05,070 --> 00:23:10,980
ask Thomas DD on our scene all right all

461
00:23:10,980 --> 00:23:13,710
right one more question someone all

462
00:23:13,710 --> 00:23:16,430
right yeah

463
00:23:26,320 --> 00:23:28,940
right so the question is how do you

464
00:23:28,940 --> 00:23:31,549
decide which which feature which coding

465
00:23:31,549 --> 00:23:33,860
to is implementable in hardware and

466
00:23:33,860 --> 00:23:36,259
which one to actually implement it up

467
00:23:36,259 --> 00:23:40,009
into the into the codec and the answer

468
00:23:40,009 --> 00:23:43,580
is that that's during review during

469
00:23:43,580 --> 00:23:46,460
initial review you'll get some feedback

470
00:23:46,460 --> 00:23:48,950
on whether the tool you're trying to

471
00:23:48,950 --> 00:23:52,070
encode is feasible and finally you know

472
00:23:52,070 --> 00:23:55,149
after I peer review or around that time

473
00:23:55,149 --> 00:23:59,600
after it's it's in get master the

474
00:23:59,600 --> 00:24:01,820
hardware companies which are part of the

475
00:24:01,820 --> 00:24:04,820
Alliance will we'll go over the coding

476
00:24:04,820 --> 00:24:08,269
tool and we'll try to see if if it's

477
00:24:08,269 --> 00:24:11,179
implementable using using current you

478
00:24:11,179 --> 00:24:14,000
know however decoding production means

479
00:24:14,000 --> 00:24:17,659
and if they give it a gold and then you

480
00:24:17,659 --> 00:24:21,159
know they give it a go on it goes in

481
00:24:21,340 --> 00:24:25,370
alright last question how is the

482
00:24:25,370 --> 00:24:27,980
compression ratio well right now we're

483
00:24:27,980 --> 00:24:30,169
doing quite a lot better than 86 for

484
00:24:30,169 --> 00:24:33,169
we're doing better than h-65

485
00:24:33,169 --> 00:24:37,970
on basically all metrics and after the

486
00:24:37,970 --> 00:24:40,250
encoding to switch which I've mentioned

487
00:24:40,250 --> 00:24:42,860
are implemented will do slightly worse

488
00:24:42,860 --> 00:24:45,350
maybe psnr base but there is a horrible

489
00:24:45,350 --> 00:24:48,649
metric so so perceptually we will look

490
00:24:48,649 --> 00:24:50,809
you know quite a lot better than

491
00:24:50,809 --> 00:24:54,100
anything which is currently out there

492
00:24:54,100 --> 00:24:57,830
all right well that's it so thank you

493
00:24:57,830 --> 00:25:00,490
for having me

494
00:25:02,860 --> 00:25:04,919
you

