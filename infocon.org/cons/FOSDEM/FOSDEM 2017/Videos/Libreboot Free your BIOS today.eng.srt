1
00:00:00,030 --> 00:00:02,960
so what

2
00:00:04,680 --> 00:00:09,900
come here and as you all know in some

3
00:00:09,900 --> 00:00:12,529
parts free software is very dominant and

4
00:00:12,529 --> 00:00:15,299
the choice of if you want to do

5
00:00:15,299 --> 00:00:17,310
something there are some parts where

6
00:00:17,310 --> 00:00:20,940
free software is not success and not yet

7
00:00:20,940 --> 00:00:22,770
as successful as it wants to be but

8
00:00:22,770 --> 00:00:25,289
there are projects trying to change that

9
00:00:25,289 --> 00:00:27,810
and one of this project is Libre boot

10
00:00:27,810 --> 00:00:31,230
and I'm and I think we can very happy to

11
00:00:31,230 --> 00:00:33,510
have the founder of this project Lear

12
00:00:33,510 --> 00:00:36,149
here now on stage talking about it thank

13
00:00:36,149 --> 00:00:40,280
you very much you know what web broke up

14
00:00:44,080 --> 00:00:47,150
okay so as we introduce my name is Leah

15
00:00:47,150 --> 00:00:49,940
Rowe I'm here to talk about projects

16
00:00:49,940 --> 00:00:52,220
called Libre boots I've been working on

17
00:00:52,220 --> 00:00:55,900
this project since since late 2013

18
00:00:55,900 --> 00:00:58,250
what Libra boot attempts to do is

19
00:00:58,250 --> 00:00:59,840
provides free software at the boot

20
00:00:59,840 --> 00:01:02,989
firmware level so when people think

21
00:01:02,989 --> 00:01:04,250
about free software they're usually

22
00:01:04,250 --> 00:01:06,440
thinking about their operating system

23
00:01:06,440 --> 00:01:11,570
but the boot firmware is basically what

24
00:01:11,570 --> 00:01:13,400
initializes the hardware and starts

25
00:01:13,400 --> 00:01:16,100
usually a boot loader to load your

26
00:01:16,100 --> 00:01:20,210
operating system so most people with

27
00:01:20,210 --> 00:01:21,770
modern systems are using proprietary

28
00:01:21,770 --> 00:01:24,050
software so this is often referred to as

29
00:01:24,050 --> 00:01:27,220
the BIOS or ufi er

30
00:01:27,220 --> 00:01:29,840
Libre boo attempts to provide a fully

31
00:01:29,840 --> 00:01:33,350
free software replacement for this so we

32
00:01:33,350 --> 00:01:35,810
provide sticks on desktops laptops and

33
00:01:35,810 --> 00:01:40,420
servers on x86 and arm we're also

34
00:01:40,420 --> 00:01:43,610
looking to implement this on open power

35
00:01:43,610 --> 00:01:46,270
which I'll talk about later in the talk

36
00:01:46,270 --> 00:01:49,490
so the goal of projects we want everyone

37
00:01:49,490 --> 00:01:52,159
to use free software exclusively so we

38
00:01:52,159 --> 00:01:54,920
think proprietary software shouldn't be

39
00:01:54,920 --> 00:01:57,799
an option if anyone's using non free

40
00:01:57,799 --> 00:02:00,049
software then that's a problem we must

41
00:02:00,049 --> 00:02:04,880
fix that as a result of this our second

42
00:02:04,880 --> 00:02:06,680
goal is obviously to support as much

43
00:02:06,680 --> 00:02:09,320
hardware as possible so the more

44
00:02:09,320 --> 00:02:11,510
hardware supported the better this

45
00:02:11,510 --> 00:02:13,519
includes not just porting existing

46
00:02:13,519 --> 00:02:15,230
hardware to Libre boot it also includes

47
00:02:15,230 --> 00:02:17,690
having our EMS provider Libre boot

48
00:02:17,690 --> 00:02:21,320
pre-installed and we also want it to be

49
00:02:21,320 --> 00:02:22,970
as easy to use as possible for

50
00:02:22,970 --> 00:02:25,220
non-technical people with projects like

51
00:02:25,220 --> 00:02:27,530
this it's usually the case that people

52
00:02:27,530 --> 00:02:28,820
who may not necessarily have the

53
00:02:28,820 --> 00:02:31,280
technical knowledge might not even know

54
00:02:31,280 --> 00:02:32,630
how to install it either because there's

55
00:02:32,630 --> 00:02:34,190
no documentation or because the

56
00:02:34,190 --> 00:02:37,070
documentation is incomplete or it may be

57
00:02:37,070 --> 00:02:39,290
or it may use jargon that the user

58
00:02:39,290 --> 00:02:40,850
doesn't necessarily understand so we

59
00:02:40,850 --> 00:02:42,350
want to streamline everything you need

60
00:02:42,350 --> 00:02:45,410
reboots as much as possible this will be

61
00:02:45,410 --> 00:02:48,829
covered later on in the talk so what are

62
00:02:48,829 --> 00:02:51,049
the problems with non-free playoffs or

63
00:02:51,049 --> 00:02:55,550
ufi or boot premier more generally

64
00:02:55,550 --> 00:02:58,910
so if you're on this if you're familiar

65
00:02:58,910 --> 00:03:00,890
with what free software is basically it

66
00:03:00,890 --> 00:03:03,500
means you can use the software copy it

67
00:03:03,500 --> 00:03:05,840
share it modify it study the source

68
00:03:05,840 --> 00:03:08,180
codes basically do whatever you like

69
00:03:08,180 --> 00:03:13,460
with it with no restrictions if that's

70
00:03:13,460 --> 00:03:17,450
non free at the BIOS level then we see

71
00:03:17,450 --> 00:03:18,860
now for instance that you have devices

72
00:03:18,860 --> 00:03:22,100
where the operating system that the

73
00:03:22,100 --> 00:03:24,950
device comes with is locks down so that

74
00:03:24,950 --> 00:03:29,450
you can't replace it this is most common

75
00:03:29,450 --> 00:03:32,000
on games consoles and mobile devices but

76
00:03:32,000 --> 00:03:34,370
it's also increasingly common nowadays

77
00:03:34,370 --> 00:03:37,790
on PCs as well I'll go on to this later

78
00:03:37,790 --> 00:03:41,420
on in the talk you also find nowadays

79
00:03:41,420 --> 00:03:43,460
I'll also cover this later on in the

80
00:03:43,460 --> 00:03:46,490
talk about some modern boot format also

81
00:03:46,490 --> 00:03:48,710
its cryptographically science which

82
00:03:48,710 --> 00:03:51,080
means you can't replace it so on some

83
00:03:51,080 --> 00:03:53,840
important Intel systems you finds that

84
00:03:53,840 --> 00:03:55,010
you can't replace the boot firmware

85
00:03:55,010 --> 00:03:57,260
because the system checks the signature

86
00:03:57,260 --> 00:03:59,210
at boot time I'll also cover this later

87
00:03:59,210 --> 00:04:02,870
on in the talk obviously with

88
00:04:02,870 --> 00:04:04,910
proprietary boot firmware you can also

89
00:04:04,910 --> 00:04:07,070
have security issues intentional or

90
00:04:07,070 --> 00:04:09,140
otherwise which can be placed there by

91
00:04:09,140 --> 00:04:11,870
the manufacturer so for instance system

92
00:04:11,870 --> 00:04:13,220
management modes you can implement

93
00:04:13,220 --> 00:04:15,950
rootkits there most modern intel and AMD

94
00:04:15,950 --> 00:04:18,140
systems also come with a hypervisor

95
00:04:18,140 --> 00:04:20,329
called the into a management for their

96
00:04:20,329 --> 00:04:23,150
inter management engine or their nd

97
00:04:23,150 --> 00:04:25,400
platform security processor I'll also

98
00:04:25,400 --> 00:04:28,190
cover these later on in the talk if

99
00:04:28,190 --> 00:04:29,900
there are bugs obviously in software has

100
00:04:29,900 --> 00:04:34,670
bugs that's a problem if the software is

101
00:04:34,670 --> 00:04:36,440
proprietary and no one has the source

102
00:04:36,440 --> 00:04:38,540
code to actually learn how it works and

103
00:04:38,540 --> 00:04:42,350
make changes to it so and it's common to

104
00:04:42,350 --> 00:04:45,350
find issues on repeat firmware on modern

105
00:04:45,350 --> 00:04:49,250
systems or any system we want people to

106
00:04:49,250 --> 00:04:51,169
be able to fix issues that they may have

107
00:04:51,169 --> 00:04:52,910
with proprietary software this is not

108
00:04:52,910 --> 00:04:57,890
the case so that's important what's the

109
00:04:57,890 --> 00:05:00,260
point in using a system that's non free

110
00:05:00,260 --> 00:05:02,710
if you're going to use a free system and

111
00:05:02,710 --> 00:05:05,030
want to use all free software but the

112
00:05:05,030 --> 00:05:06,919
boot from where the root of trust in

113
00:05:06,919 --> 00:05:07,249
your

114
00:05:07,249 --> 00:05:10,759
is proprietary then that's something

115
00:05:10,759 --> 00:05:14,209
that needs to be fixed so I really can

116
00:05:14,209 --> 00:05:16,339
brief history of deliberate projects it

117
00:05:16,339 --> 00:05:20,239
started in December 2013 I was running a

118
00:05:20,239 --> 00:05:21,949
company at the time good god bloke it's

119
00:05:21,949 --> 00:05:22,939
now called mini free

120
00:05:22,939 --> 00:05:25,819
I was selling their thing at X 60 with

121
00:05:25,819 --> 00:05:28,309
corporate pre-installed the Free

122
00:05:28,309 --> 00:05:30,379
Software Foundation context it made so

123
00:05:30,379 --> 00:05:32,659
tell me about their respects your

124
00:05:32,659 --> 00:05:34,939
freedom certification program what this

125
00:05:34,939 --> 00:05:37,699
was what is rather here's a program

126
00:05:37,699 --> 00:05:41,029
where you verify devices that hung

127
00:05:41,029 --> 00:05:43,009
exclusively with free software but not

128
00:05:43,009 --> 00:05:46,519
just that also devices that have

129
00:05:46,519 --> 00:05:50,119
contained no known security issues so no

130
00:05:50,119 --> 00:05:54,860
back doors only thing like that these

131
00:05:54,860 --> 00:05:56,179
systems at the time were the first

132
00:05:56,179 --> 00:05:59,019
systems that actually met this criteria

133
00:05:59,019 --> 00:06:01,189
everything concluding the boot firmware

134
00:06:01,189 --> 00:06:04,369
the operating system the drivers any

135
00:06:04,369 --> 00:06:05,599
software that you can think of in the

136
00:06:05,599 --> 00:06:07,519
system was free software and this is

137
00:06:07,519 --> 00:06:10,399
what we works with them on the Olivieri

138
00:06:10,399 --> 00:06:12,469
projects hadn't started with our hands

139
00:06:12,469 --> 00:06:15,139
this time when they contacted us we had

140
00:06:15,139 --> 00:06:18,889
to work on some issues so the coreboot

141
00:06:18,889 --> 00:06:23,629
contains I'll go into some details about

142
00:06:23,629 --> 00:06:25,459
the problems that we had to incorporate

143
00:06:25,459 --> 00:06:27,289
because that kind of goes hand in hand

144
00:06:27,289 --> 00:06:31,879
with this so yeah so they contacted me

145
00:06:31,879 --> 00:06:33,439
because they wanted to endorse my

146
00:06:33,439 --> 00:06:36,829
company so I started working with them

147
00:06:36,829 --> 00:06:39,439
on producing a completely blob free

148
00:06:39,439 --> 00:06:41,989
version of core beats a blob by the way

149
00:06:41,989 --> 00:06:44,299
is a piece of proprietary software

150
00:06:44,299 --> 00:06:48,229
binary-only software i worked with them

151
00:06:48,229 --> 00:06:50,059
on creating a product that was entirely

152
00:06:50,059 --> 00:06:51,949
free software and from that the lyric

153
00:06:51,949 --> 00:06:56,329
projects was formed we also only

154
00:06:56,329 --> 00:06:58,549
supported one laptop at us their thing

155
00:06:58,549 --> 00:07:01,009
had X 60 as I mentioned before we later

156
00:07:01,009 --> 00:07:02,839
expanded to support more desktops

157
00:07:02,839 --> 00:07:04,789
laptops and servers on multiple

158
00:07:04,789 --> 00:07:06,499
platforms which I'll also cover later on

159
00:07:06,499 --> 00:07:09,589
in the talk I should also mention that

160
00:07:09,589 --> 00:07:12,139
for our brief periods the Libre products

161
00:07:12,139 --> 00:07:14,569
was actually part of you know so we

162
00:07:14,569 --> 00:07:18,019
joined I've contacted Mike yer wits I

163
00:07:18,019 --> 00:07:19,700
don't know I don't exactly know how

164
00:07:19,700 --> 00:07:22,040
that's lame anyway I works with Mike

165
00:07:22,040 --> 00:07:25,030
Mike Jarrett's in Guinea projects on

166
00:07:25,030 --> 00:07:27,350
making Libra very eligible to be added

167
00:07:27,350 --> 00:07:30,290
to canoe so we had the same goals as the

168
00:07:30,290 --> 00:07:32,800
Guinea projects free software everywhere

169
00:07:32,800 --> 00:07:35,180
bringing about a world's where you can a

170
00:07:35,180 --> 00:07:37,010
task that you can possibly think of

171
00:07:37,010 --> 00:07:39,110
could be done exclusively with free

172
00:07:39,110 --> 00:07:40,820
software that's the goal and that's our

173
00:07:40,820 --> 00:07:42,950
goal as well so we were philosophically

174
00:07:42,950 --> 00:07:45,830
compatible but there were some technical

175
00:07:45,830 --> 00:07:48,080
issues that we had to deal with so for

176
00:07:48,080 --> 00:07:49,730
instance the documentation and build

177
00:07:49,730 --> 00:07:51,590
system and things like that trying to

178
00:07:51,590 --> 00:07:53,660
standardize it so that we used their

179
00:07:53,660 --> 00:07:55,670
build methods and sets that took about

180
00:07:55,670 --> 00:07:58,430
the year and then finally on the May

181
00:07:58,430 --> 00:08:02,930
14th 2016 we officially joins the new

182
00:08:02,930 --> 00:08:06,920
projects unfortunately a few months

183
00:08:06,920 --> 00:08:10,760
later after that on 15th of September we

184
00:08:10,760 --> 00:08:13,190
had already had some disagreements with

185
00:08:13,190 --> 00:08:14,780
the guinea projects over technical

186
00:08:14,780 --> 00:08:16,790
issues and how project and how the

187
00:08:16,790 --> 00:08:20,120
project should be run something

188
00:08:20,120 --> 00:08:22,160
controversial I should say happened at

189
00:08:22,160 --> 00:08:22,850
the FSF

190
00:08:22,850 --> 00:08:24,860
you can read about this on the libre

191
00:08:24,860 --> 00:08:28,520
route websites they basically did

192
00:08:28,520 --> 00:08:30,470
something really nasty that we disagreed

193
00:08:30,470 --> 00:08:33,880
with entirely so we just left you know

194
00:08:33,880 --> 00:08:37,460
you can actually go on to the link HTTP

195
00:08:37,460 --> 00:08:40,880
librivox.org slash canoe and you can

196
00:08:40,880 --> 00:08:45,950
read information about that so we were

197
00:08:45,950 --> 00:08:47,540
members of the new projects for about

198
00:08:47,540 --> 00:08:50,180
four months it's really strange because

199
00:08:50,180 --> 00:08:52,160
when we left you know they actually

200
00:08:52,160 --> 00:08:54,860
resisted it so we left you know in

201
00:08:54,860 --> 00:08:56,840
September 2016 but they're good new

202
00:08:56,840 --> 00:09:01,340
projects officially officially

203
00:09:01,340 --> 00:09:05,030
recognized that in January this year so

204
00:09:05,030 --> 00:09:07,760
how is the libera projects funded well I

205
00:09:07,760 --> 00:09:10,040
won as I said before I run a company

206
00:09:10,040 --> 00:09:12,140
that sells systems with Libra

207
00:09:12,140 --> 00:09:15,260
pre-installed we sell desktops laptops

208
00:09:15,260 --> 00:09:17,900
and servers with Libra boots and Debian

209
00:09:17,900 --> 00:09:19,100
by default

210
00:09:19,100 --> 00:09:21,410
their profits from this company are used

211
00:09:21,410 --> 00:09:23,840
to run serve funds delivery route

212
00:09:23,840 --> 00:09:26,480
projects we've funded to leader boot in

213
00:09:26,480 --> 00:09:28,610
several ways in past for instance

214
00:09:28,610 --> 00:09:30,870
there's a server motherboard that we

215
00:09:30,870 --> 00:09:35,490
support the SSK GPD 16 which we had to

216
00:09:35,490 --> 00:09:38,550
pay for to have ported there was also a

217
00:09:38,550 --> 00:09:40,860
few bolts that we paid for generally we

218
00:09:40,860 --> 00:09:44,340
also provide the infrastructure and

219
00:09:44,340 --> 00:09:48,480
paper development in general so that's

220
00:09:48,480 --> 00:09:50,250
actually one of the main reasons many

221
00:09:50,250 --> 00:09:52,200
free exists just to provide funding for

222
00:09:52,200 --> 00:09:55,890
Libre boots at present we have no other

223
00:09:55,890 --> 00:09:58,140
ways to fund literally brewery projects

224
00:09:58,140 --> 00:10:01,470
I am looking into crowdfunding in the

225
00:10:01,470 --> 00:10:03,650
future as a possible option if we ever

226
00:10:03,650 --> 00:10:06,690
tried to produce our own hardware I'm

227
00:10:06,690 --> 00:10:09,090
actually going to talk about REM ins at

228
00:10:09,090 --> 00:10:11,550
some point in the future in some point

229
00:10:11,550 --> 00:10:14,030
in the talk so I'll go through some

230
00:10:14,030 --> 00:10:16,710
details about the components of Libre

231
00:10:16,710 --> 00:10:19,740
boots so there's some confusion in the

232
00:10:19,740 --> 00:10:21,360
community about what knee boots actually

233
00:10:21,360 --> 00:10:23,490
is people sometimes sometimes ask me

234
00:10:23,490 --> 00:10:26,250
isn't Libra group just a deep D blobs

235
00:10:26,250 --> 00:10:27,120
Fork

236
00:10:27,120 --> 00:10:29,720
of coure boots that's not actually true

237
00:10:29,720 --> 00:10:32,610
what we do in Libra boots is we

238
00:10:32,610 --> 00:10:34,770
basically provide something very similar

239
00:10:34,770 --> 00:10:37,350
to give new place Linux distribution but

240
00:10:37,350 --> 00:10:40,530
at the boot firmware level instead so we

241
00:10:40,530 --> 00:10:42,180
have an automated build system which

242
00:10:42,180 --> 00:10:43,920
takes core boots and the various

243
00:10:43,920 --> 00:10:45,380
components that you need with that

244
00:10:45,380 --> 00:10:48,470
utilities payloads and so on and

245
00:10:48,470 --> 00:10:51,450
downloads patches them we use tested

246
00:10:51,450 --> 00:10:52,890
revisions of all of the software that we

247
00:10:52,890 --> 00:10:56,400
use and we have build scripts which take

248
00:10:56,400 --> 00:10:57,720
all of the various components that you

249
00:10:57,720 --> 00:11:00,230
need and actually builds the firmware

250
00:11:00,230 --> 00:11:04,680
automatically if you were using cool

251
00:11:04,680 --> 00:11:06,990
boots directly then you'd have to take

252
00:11:06,990 --> 00:11:08,130
all of the all of these components

253
00:11:08,130 --> 00:11:12,000
yourself and think together manually so

254
00:11:12,000 --> 00:11:13,650
in the same way that let's say

255
00:11:13,650 --> 00:11:16,380
Debian provides a distribution of the

256
00:11:16,380 --> 00:11:19,500
Ganapathy Linux system with darris up

257
00:11:19,500 --> 00:11:21,210
streams like say the Linux kernel the

258
00:11:21,210 --> 00:11:24,510
you know operating system x7 and so on

259
00:11:24,510 --> 00:11:27,330
we provide cool boots grub and various

260
00:11:27,330 --> 00:11:30,150
utilities that let go with that so you

261
00:11:30,150 --> 00:11:31,710
can think of Libre boots as a core boot

262
00:11:31,710 --> 00:11:34,740
distribution so it's like a good new

263
00:11:34,740 --> 00:11:36,510
session Linux distribution that the boot

264
00:11:36,510 --> 00:11:39,420
firmware level so it's not it's not for

265
00:11:39,420 --> 00:11:40,830
your operating system but you can think

266
00:11:40,830 --> 00:11:41,880
of it that way

267
00:11:41,880 --> 00:11:44,730
by way of analogy so I'll go through

268
00:11:44,730 --> 00:11:47,910
some more details about exactly what

269
00:11:47,910 --> 00:11:49,980
components are in the boots so we have

270
00:11:49,980 --> 00:11:52,500
we have cool boots which is their boot

271
00:11:52,500 --> 00:11:54,210
for my projects that we use I'm going to

272
00:11:54,210 --> 00:11:56,330
talk about core boots in later slides

273
00:11:56,330 --> 00:11:59,040
core boots is the boot firmware that

274
00:11:59,040 --> 00:12:01,260
initializes the hardware and it also

275
00:12:01,260 --> 00:12:03,840
then jumps to a payload usually a boot

276
00:12:03,840 --> 00:12:05,550
loader which then boots your operating

277
00:12:05,550 --> 00:12:09,630
system then we have payloads so we have

278
00:12:09,630 --> 00:12:11,070
the grub boot loader and depth charge

279
00:12:11,070 --> 00:12:12,330
I'll talk about these later on in the

280
00:12:12,330 --> 00:12:14,340
talk we also have utilities for

281
00:12:14,340 --> 00:12:17,130
installing libre boots and various other

282
00:12:17,130 --> 00:12:18,480
utilities that are used in the build

283
00:12:18,480 --> 00:12:21,960
system well we also have our tool chain

284
00:12:21,960 --> 00:12:25,710
when we use GCC at the moment we are

285
00:12:25,710 --> 00:12:28,710
actually looking to use LLVM I'll talk

286
00:12:28,710 --> 00:12:31,680
about that later on in the talk so I'll

287
00:12:31,680 --> 00:12:32,940
go through some information about what

288
00:12:32,940 --> 00:12:36,120
core boot is so cool boots is the main

289
00:12:36,120 --> 00:12:37,860
projects that we use as an upstream in

290
00:12:37,860 --> 00:12:39,240
liebherr boots for providing Carrboro

291
00:12:39,240 --> 00:12:41,720
initialization this is what basically

292
00:12:41,720 --> 00:12:45,420
puts the system into a usable States so

293
00:12:45,420 --> 00:12:48,150
that your operating system converts it

294
00:12:48,150 --> 00:12:50,760
started in the year 1999 as a projects

295
00:12:50,760 --> 00:12:54,360
called Linux BIOS so around that time in

296
00:12:54,360 --> 00:12:57,120
the old days you had to have a BIOS in

297
00:12:57,120 --> 00:12:58,950
place which defines how the hardware

298
00:12:58,950 --> 00:13:01,230
works and then your operating system

299
00:13:01,230 --> 00:13:04,470
used calls into the BIOS to perform

300
00:13:04,470 --> 00:13:07,650
various Hardware functions around the

301
00:13:07,650 --> 00:13:09,960
year 1999 you had centered PCI which

302
00:13:09,960 --> 00:13:11,640
came out which meant that Hardware was

303
00:13:11,640 --> 00:13:14,160
self describing so the Linux kind of no

304
00:13:14,160 --> 00:13:16,080
longer needed to have a BIOS in place

305
00:13:16,080 --> 00:13:18,030
that it could just initialize Hardware

306
00:13:18,030 --> 00:13:20,490
and provide drivers without making any

307
00:13:20,490 --> 00:13:23,490
use of a BIOS so the idea with Linux

308
00:13:23,490 --> 00:13:26,670
payoffs in be in 1999 was to provide

309
00:13:26,670 --> 00:13:29,430
firmware where you just had the hardware

310
00:13:29,430 --> 00:13:32,190
initialization but without the legacy

311
00:13:32,190 --> 00:13:34,680
BIOS the interface instead their goal

312
00:13:34,680 --> 00:13:37,710
was to put the limbus kernel itself into

313
00:13:37,710 --> 00:13:40,320
the boot flash and have the Linux kernel

314
00:13:40,320 --> 00:13:42,720
perform all of their tasks that were

315
00:13:42,720 --> 00:13:46,760
previously handled by a BIOS firmware

316
00:13:46,760 --> 00:13:51,150
however people started using so Linux is

317
00:13:51,150 --> 00:13:53,820
a payloads in Linux BIOS so you have

318
00:13:53,820 --> 00:13:55,120
Linux BIOS which performs

319
00:13:55,120 --> 00:13:57,070
actual initializations and then they

320
00:13:57,070 --> 00:13:58,990
downloaded then when you built Linux

321
00:13:58,990 --> 00:14:00,160
playoffs you would have downloaded the

322
00:14:00,160 --> 00:14:02,170
Linux kernel separately built that as a

323
00:14:02,170 --> 00:14:04,630
payloads payload is what is what when

324
00:14:04,630 --> 00:14:06,460
core boots is finished initializing the

325
00:14:06,460 --> 00:14:09,279
hardware it jumps to a payloads and then

326
00:14:09,279 --> 00:14:12,580
the payloads does whatever it does in

327
00:14:12,580 --> 00:14:14,410
this case that would be the Linux kernel

328
00:14:14,410 --> 00:14:17,260
so you could either use care exact to

329
00:14:17,260 --> 00:14:19,810
load another camp or you could actually

330
00:14:19,810 --> 00:14:21,550
make that the main system kernel if you

331
00:14:21,550 --> 00:14:24,640
wanted this was inconvenient though it

332
00:14:24,640 --> 00:14:26,620
wasn't very usable for a lot of people

333
00:14:26,620 --> 00:14:28,180
so people started adding other payloads

334
00:14:28,180 --> 00:14:31,950
as well boot loaders there's also

335
00:14:31,950 --> 00:14:33,970
projects there's also a project's called

336
00:14:33,970 --> 00:14:36,310
C bias which is existed for a few years

337
00:14:36,310 --> 00:14:38,650
now which actually provides a BIOS

338
00:14:38,650 --> 00:14:41,230
interface so if you want legacy

339
00:14:41,230 --> 00:14:43,650
operating system support for instance

340
00:14:43,650 --> 00:14:47,020
this meant that the name Linux files no

341
00:14:47,020 --> 00:14:47,950
longer really made sense

342
00:14:47,950 --> 00:14:52,180
so around 2003 2004 Linux BIOS renamed

343
00:14:52,180 --> 00:14:56,589
stick or boots now call boots

344
00:14:56,589 --> 00:14:58,270
I should explain the problems with core

345
00:14:58,270 --> 00:15:01,900
boots core boots is mostly free software

346
00:15:01,900 --> 00:15:04,810
but there are some parts of Courbet's

347
00:15:04,810 --> 00:15:07,540
they are proprietary software I'll go

348
00:15:07,540 --> 00:15:09,640
into some details about what component

349
00:15:09,640 --> 00:15:11,529
what components these are the unknown

350
00:15:11,529 --> 00:15:16,360
freeing coreboot in later slides so it's

351
00:15:16,360 --> 00:15:18,310
not fully free software we solved this

352
00:15:18,310 --> 00:15:20,650
in liebherr boots and I'll explain how

353
00:15:20,650 --> 00:15:23,080
in a few in one of the later slides

354
00:15:23,080 --> 00:15:25,300
another problem with core boots is that

355
00:15:25,300 --> 00:15:28,089
it's very difficult to install it's

356
00:15:28,089 --> 00:15:30,520
notoriously difficult because you see

357
00:15:30,520 --> 00:15:32,320
reports from users all the time where

358
00:15:32,320 --> 00:15:34,150
they have trouble building it then they

359
00:15:34,150 --> 00:15:37,330
have trouble flashing it and then a lot

360
00:15:37,330 --> 00:15:38,890
of the time for instance you have users

361
00:15:38,890 --> 00:15:41,320
that make a configuration that's wrong

362
00:15:41,320 --> 00:15:43,900
and they they flash firmware that

363
00:15:43,900 --> 00:15:45,040
basically doesn't work and they break

364
00:15:45,040 --> 00:15:46,959
their system there's usually not much

365
00:15:46,959 --> 00:15:48,520
user support in the corporate community

366
00:15:48,520 --> 00:15:50,500
and there's also not a lot of

367
00:15:50,500 --> 00:15:52,450
documentation for non-technical users

368
00:15:52,450 --> 00:15:54,580
there's a developer documentation core

369
00:15:54,580 --> 00:15:56,380
boots is mostly developer oriented but

370
00:15:56,380 --> 00:16:00,100
not user oriented much like the Linux

371
00:16:00,100 --> 00:16:04,240
kernel for instance so most people don't

372
00:16:04,240 --> 00:16:06,690
even attempt to install core boots

373
00:16:06,690 --> 00:16:09,329
that's really the main problem that and

374
00:16:09,329 --> 00:16:11,940
the fact that it's only partially free

375
00:16:11,940 --> 00:16:12,540
software

376
00:16:12,540 --> 00:16:15,269
I already explains that Libre boots is

377
00:16:15,269 --> 00:16:18,930
our fourth of Corbin's so comparison

378
00:16:18,930 --> 00:16:20,910
would be I if you look at a new class

379
00:16:20,910 --> 00:16:22,379
Linux distribution that's the

380
00:16:22,379 --> 00:16:23,689
distribution for your operating system

381
00:16:23,689 --> 00:16:26,639
they provide us their images where you

382
00:16:26,639 --> 00:16:28,860
can install the system and it comes with

383
00:16:28,860 --> 00:16:30,990
an interface that's easy to use and they

384
00:16:30,990 --> 00:16:32,689
usually have community supports in place

385
00:16:32,689 --> 00:16:36,209
for that and plus documentation Libre

386
00:16:36,209 --> 00:16:38,189
boots is the same thing essentially but

387
00:16:38,189 --> 00:16:40,290
at the boot firmware level so we provide

388
00:16:40,290 --> 00:16:43,740
ROM images which the term ROM image is a

389
00:16:43,740 --> 00:16:45,810
bit misleading because it's not actually

390
00:16:45,810 --> 00:16:48,810
ROM it it's flash it 3 rifle but they

391
00:16:48,810 --> 00:16:50,420
call them wrong images anyway that's

392
00:16:50,420 --> 00:16:52,860
when we say ROM images were we're

393
00:16:52,860 --> 00:16:54,360
referring to the firmware that you

394
00:16:54,360 --> 00:16:57,980
actually flash so we provide that

395
00:16:57,980 --> 00:17:01,139
precompiled by defaults for users this

396
00:17:01,139 --> 00:17:02,490
is something that core boots itself

397
00:17:02,490 --> 00:17:06,419
doesn't do we test everything we provide

398
00:17:06,419 --> 00:17:07,740
the build system which I explained

399
00:17:07,740 --> 00:17:10,799
earlier and we tries to provide the

400
00:17:10,799 --> 00:17:14,010
documentation aimed at users so instead

401
00:17:14,010 --> 00:17:17,760
of providing documentation this designs

402
00:17:17,760 --> 00:17:20,099
for developers to reads we try to

403
00:17:20,099 --> 00:17:21,299
streamline everything as much as

404
00:17:21,299 --> 00:17:22,919
possible we try to automate everything

405
00:17:22,919 --> 00:17:24,900
as much as possible so the point where

406
00:17:24,900 --> 00:17:27,839
we can just give a user a guides where

407
00:17:27,839 --> 00:17:30,179
they can just follow instructions step

408
00:17:30,179 --> 00:17:33,360
by step and install the firmware without

409
00:17:33,360 --> 00:17:37,679
and we found that this actually works

410
00:17:37,679 --> 00:17:39,720
the success rate for installations in

411
00:17:39,720 --> 00:17:42,240
Libre booth is quite high compared to

412
00:17:42,240 --> 00:17:44,549
core boots more people attempt to

413
00:17:44,549 --> 00:17:46,830
install it because it's because their

414
00:17:46,830 --> 00:17:48,000
documentation is better for

415
00:17:48,000 --> 00:17:51,059
non-technical people and because we

416
00:17:51,059 --> 00:17:53,510
provide documentation that's designs for

417
00:17:53,510 --> 00:17:55,830
people who may not necessarily have as

418
00:17:55,830 --> 00:17:57,659
much technical knowledge who can make

419
00:17:57,659 --> 00:17:59,990
less mistakes

420
00:18:01,460 --> 00:18:05,180
so we provide all of that and integrate

421
00:18:05,180 --> 00:18:08,840
everything so we don't actually create a

422
00:18:08,840 --> 00:18:11,690
fork of core boots we use a particular

423
00:18:11,690 --> 00:18:13,250
revision of Corbett's on different

424
00:18:13,250 --> 00:18:16,250
hardware and we rebase that as time goes

425
00:18:16,250 --> 00:18:19,340
by it so we don't actually we actually

426
00:18:19,340 --> 00:18:20,960
use core basis and upstream much like

427
00:18:20,960 --> 00:18:23,240
say Debian uses the limit tunnel as an

428
00:18:23,240 --> 00:18:27,770
upstream so I explained before that

429
00:18:27,770 --> 00:18:29,360
coreboot contains proprietary software

430
00:18:29,360 --> 00:18:31,210
so what do we do about this

431
00:18:31,210 --> 00:18:34,610
the first answer would be to four core

432
00:18:34,610 --> 00:18:37,160
boots and provides addy blobs version of

433
00:18:37,160 --> 00:18:37,550
cubbies

434
00:18:37,550 --> 00:18:38,570
but that's not what we do in the library

435
00:18:38,570 --> 00:18:42,110
projects what we do is we maintain a set

436
00:18:42,110 --> 00:18:44,930
low of scripts which searches the source

437
00:18:44,930 --> 00:18:46,670
code and looks for patterns inside the

438
00:18:46,670 --> 00:18:48,020
source code that looked like the praia

439
00:18:48,020 --> 00:18:49,940
Terry software so if you actually look

440
00:18:49,940 --> 00:18:53,180
in the core boots source codes you will

441
00:18:53,180 --> 00:18:56,900
actually find say a see source file that

442
00:18:56,900 --> 00:18:58,610
does something but you look inside the

443
00:18:58,610 --> 00:19:00,290
file and it will just be an array of

444
00:19:00,290 --> 00:19:02,210
bytes inside the file it will be an

445
00:19:02,210 --> 00:19:05,380
executable or you might actually find

446
00:19:05,380 --> 00:19:09,190
binary blobs that actual files in there

447
00:19:09,190 --> 00:19:12,830
so we said the scripts searches for

448
00:19:12,830 --> 00:19:14,300
blobs in the source code and then

449
00:19:14,300 --> 00:19:18,110
reports a list of search results now not

450
00:19:18,110 --> 00:19:19,670
all of these are blocks you do get false

451
00:19:19,670 --> 00:19:21,440
positives so we have to go through the

452
00:19:21,440 --> 00:19:24,560
list and decide which ones are blobs and

453
00:19:24,560 --> 00:19:25,190
which ones are not

454
00:19:25,190 --> 00:19:28,370
and then we maintain a list of files for

455
00:19:28,370 --> 00:19:31,370
the blobs in core boots for the D blob

456
00:19:31,370 --> 00:19:35,120
scripts to delete obviously as a result

457
00:19:35,120 --> 00:19:36,650
of this we support less hardware than

458
00:19:36,650 --> 00:19:40,580
core boots because blobs are needed on

459
00:19:40,580 --> 00:19:42,230
some systems in order to actually boots

460
00:19:42,230 --> 00:19:45,080
so we just settle for lower Hardware

461
00:19:45,080 --> 00:19:47,360
supports we don't want people to use

462
00:19:47,360 --> 00:19:50,240
proprietary software so in some cases we

463
00:19:50,240 --> 00:19:52,220
just have to say we can't support this

464
00:19:52,220 --> 00:19:55,670
system now I should explain there's a

465
00:19:55,670 --> 00:19:58,520
new projects called libre core which is

466
00:19:58,520 --> 00:20:00,500
a fork of Corbin's and like Libre boots

467
00:20:00,500 --> 00:20:02,870
which is a corporate distribution Libre

468
00:20:02,870 --> 00:20:05,630
core is not run it's not part of the

469
00:20:05,630 --> 00:20:07,070
reroute projects it's run by separate

470
00:20:07,070 --> 00:20:07,610
people

471
00:20:07,610 --> 00:20:11,040
it started in as a response to

472
00:20:11,040 --> 00:20:15,780
this problem in caboose in recent years

473
00:20:15,780 --> 00:20:18,030
in core boots it has been found that a

474
00:20:18,030 --> 00:20:21,360
lot of newer development goes into the

475
00:20:21,360 --> 00:20:23,840
proprietary systems from Intel and AMD

476
00:20:23,840 --> 00:20:26,040
there's not really as much of a

477
00:20:26,040 --> 00:20:27,900
community focus anymore according to

478
00:20:27,900 --> 00:20:31,250
them a lot of corporate developers

479
00:20:31,250 --> 00:20:34,830
nowadays accept blobs much more casually

480
00:20:34,830 --> 00:20:38,550
than they did before so and their focus

481
00:20:38,550 --> 00:20:41,640
in core boots on libre hardware is a lot

482
00:20:41,640 --> 00:20:45,360
less so Libre blitzer libre core started

483
00:20:45,360 --> 00:20:49,620
in December December 2016 with a new

484
00:20:49,620 --> 00:20:52,230
focus which is the same focuses delivery

485
00:20:52,230 --> 00:20:55,710
products libre core tries to support as

486
00:20:55,710 --> 00:20:57,810
much hardware as possible without any

487
00:20:57,810 --> 00:21:01,680
proprietary software they attracted a

488
00:21:01,680 --> 00:21:04,110
number of the developers from core boots

489
00:21:04,110 --> 00:21:07,830
as well so they're trying to make it

490
00:21:07,830 --> 00:21:09,480
their own projects into abandoned

491
00:21:09,480 --> 00:21:11,970
coreboot basically but they also share

492
00:21:11,970 --> 00:21:14,250
patches back and forth between core

493
00:21:14,250 --> 00:21:16,140
boots hanne-liebe record we're actually

494
00:21:16,140 --> 00:21:19,860
looking to dump Corbet's entirely in the

495
00:21:19,860 --> 00:21:22,050
boots and use libre core as an upstream

496
00:21:22,050 --> 00:21:25,740
instead the reasons for this is well

497
00:21:25,740 --> 00:21:27,510
because they have the same focus as us

498
00:21:27,510 --> 00:21:28,830
that means that we're working with

499
00:21:28,830 --> 00:21:33,540
people if share our ideals it also means

500
00:21:33,540 --> 00:21:36,690
that if if we use their software then if

501
00:21:36,690 --> 00:21:38,340
we use their version their Fork of core

502
00:21:38,340 --> 00:21:41,040
boots libre core we may not necessarily

503
00:21:41,040 --> 00:21:44,310
have to do as much work on the d blob

504
00:21:44,310 --> 00:21:46,440
scripts we can abandon the whole context

505
00:21:46,440 --> 00:21:48,930
of having D blob scripts because what

506
00:21:48,930 --> 00:21:50,970
leave record does is it D provides D

507
00:21:50,970 --> 00:21:52,890
blotting for core boots but inside the

508
00:21:52,890 --> 00:21:55,140
tree itself so they fought core boots

509
00:21:55,140 --> 00:21:58,710
and they removal the blobs there is one

510
00:21:58,710 --> 00:22:00,750
exception I have found that they have

511
00:22:00,750 --> 00:22:03,210
they distribute micro code updates but

512
00:22:03,210 --> 00:22:06,870
I'm not sure about anything else I will

513
00:22:06,870 --> 00:22:09,680
say though in core boots in recent years

514
00:22:09,680 --> 00:22:13,110
there has been a push to moving all of

515
00:22:13,110 --> 00:22:14,670
their binary blobs and core boots to a

516
00:22:14,670 --> 00:22:16,530
separate repository so a separate

517
00:22:16,530 --> 00:22:18,900
repository but there are still some

518
00:22:18,900 --> 00:22:22,039
blobs left in coreboot

519
00:22:22,039 --> 00:22:24,389
so you can go onto the website leave

520
00:22:24,389 --> 00:22:26,159
record us info for information about

521
00:22:26,159 --> 00:22:29,339
that this is a very new project so it's

522
00:22:29,339 --> 00:22:31,679
not very established at the moment that

523
00:22:31,679 --> 00:22:33,389
we're looking to do that instead of

524
00:22:33,389 --> 00:22:35,219
Corbett I'm going to go through some

525
00:22:35,219 --> 00:22:38,369
examples about exactly what kinds of

526
00:22:38,369 --> 00:22:41,519
binary blobs are used in coreboot well

527
00:22:41,519 --> 00:22:43,499
the first one is the entire boot

528
00:22:43,499 --> 00:22:47,519
firmware on most new in systems from

529
00:22:47,519 --> 00:22:50,969
Intel and AMD the entire Hardware

530
00:22:50,969 --> 00:22:53,039
initialization is actually a binary blob

531
00:22:53,039 --> 00:22:56,369
provided by the manufacturer itself

532
00:22:56,369 --> 00:22:58,799
around e in this case what coreboot then

533
00:22:58,799 --> 00:23:00,899
does is they provides code around that

534
00:23:00,899 --> 00:23:03,779
that just provides an interface for it

535
00:23:03,779 --> 00:23:07,409
to use we call this shim boots because

536
00:23:07,409 --> 00:23:09,899
it's not Corbin's their Hardware

537
00:23:09,899 --> 00:23:12,599
initialization on modern intel and AMD

538
00:23:12,599 --> 00:23:15,689
systems in coreboot is entirely binary

539
00:23:15,689 --> 00:23:19,799
blobs so AMD used to provide the source

540
00:23:19,799 --> 00:23:22,469
code for this between the years 2011 to

541
00:23:22,469 --> 00:23:25,799
2014 but then they stopped obviously

542
00:23:25,799 --> 00:23:27,569
this this has all of the same problems

543
00:23:27,569 --> 00:23:29,789
as non-free firmware because it isn't on

544
00:23:29,789 --> 00:23:31,549
three if you look at a standards

545
00:23:31,549 --> 00:23:35,249
proprietary BIOS firmware or ufi on

546
00:23:35,249 --> 00:23:39,059
modern systems shim boots as we call it

547
00:23:39,059 --> 00:23:41,099
is more or less the same it has all of

548
00:23:41,099 --> 00:23:42,779
the same freedom issues the same

549
00:23:42,779 --> 00:23:46,259
security issues everything we don't

550
00:23:46,259 --> 00:23:48,839
consider this Courbet's in Libreville

551
00:23:48,839 --> 00:23:51,839
projects another example of a binary

552
00:23:51,839 --> 00:23:54,059
blob typically found on most systems is

553
00:23:54,059 --> 00:23:57,209
called the video BIOS so when you stop

554
00:23:57,209 --> 00:23:59,249
your system before your operating system

555
00:23:59,249 --> 00:24:01,589
boots in the early boot process the

556
00:24:01,589 --> 00:24:03,899
video BIOS provides initialization seed

557
00:24:03,899 --> 00:24:06,269
so that you can have a display it also

558
00:24:06,269 --> 00:24:08,189
provides some functions for the drivers

559
00:24:08,189 --> 00:24:10,319
to use in your operating system for

560
00:24:10,319 --> 00:24:13,919
whichever video hardware you have we

561
00:24:13,919 --> 00:24:17,189
have free initialization now core boot

562
00:24:17,189 --> 00:24:18,839
doesn't provide this itself because

563
00:24:18,839 --> 00:24:20,159
there are so many different graphics

564
00:24:20,159 --> 00:24:22,859
cards out there when you use a system

565
00:24:22,859 --> 00:24:24,899
it's common for people to use all

566
00:24:24,899 --> 00:24:27,209
different kinds of chipsets even if it's

567
00:24:27,209 --> 00:24:28,619
a laptop you find different companies

568
00:24:28,619 --> 00:24:30,690
that provide different chipsets in their

569
00:24:30,690 --> 00:24:31,020
laps

570
00:24:31,020 --> 00:24:32,910
for instance they might provide an

571
00:24:32,910 --> 00:24:34,770
Nvidia chipset instead of Intel

572
00:24:34,770 --> 00:24:39,330
so what corporate does is they don't

573
00:24:39,330 --> 00:24:41,100
provides the video BIOS themselves you

574
00:24:41,100 --> 00:24:42,570
get that from the manufacturer and you

575
00:24:42,570 --> 00:24:45,870
put that in your public image we use

576
00:24:45,870 --> 00:24:49,500
free video initialization in Libra boots

577
00:24:49,500 --> 00:24:52,080
in corporate this is referred to as

578
00:24:52,080 --> 00:24:54,809
negative graphics initialization some

579
00:24:54,809 --> 00:24:57,300
graphics chipsets don't actually need a

580
00:24:57,300 --> 00:24:58,920
video bios or any initialization

581
00:24:58,920 --> 00:25:02,550
firmware so for instance on some Nvidia

582
00:25:02,550 --> 00:25:05,700
chip sets and some order in sub chipsets

583
00:25:05,700 --> 00:25:09,540
as well you can use the video hardware

584
00:25:09,540 --> 00:25:11,850
without having any initialization

585
00:25:11,850 --> 00:25:13,620
firmware for it the Linux kernel can

586
00:25:13,620 --> 00:25:15,960
initialize it on its own but that's a

587
00:25:15,960 --> 00:25:18,020
rare exception

588
00:25:18,020 --> 00:25:21,600
another major blob which sounds on a lot

589
00:25:21,600 --> 00:25:24,600
of Intel systems nowadays what all Intel

590
00:25:24,600 --> 00:25:27,420
systems actually from the year 2007 and

591
00:25:27,420 --> 00:25:28,800
beyond is called the Intel management

592
00:25:28,800 --> 00:25:31,620
engine this is a separate computing

593
00:25:31,620 --> 00:25:33,450
platform in it's a separate system

594
00:25:33,450 --> 00:25:36,090
inside the system it's embedded inside

595
00:25:36,090 --> 00:25:38,429
the Northbridge on older systems and in

596
00:25:38,429 --> 00:25:41,280
the pitner platform control hub on newer

597
00:25:41,280 --> 00:25:45,179
systems it has its own access to memory

598
00:25:45,179 --> 00:25:47,700
so the main system memory through what's

599
00:25:47,700 --> 00:25:49,650
called the dma engine it has its own

600
00:25:49,650 --> 00:25:52,620
networking it provides various

601
00:25:52,620 --> 00:25:53,309
extensions

602
00:25:53,309 --> 00:25:55,050
one of the main extensions that the

603
00:25:55,050 --> 00:25:57,630
management engine provides is called AMT

604
00:25:57,630 --> 00:25:59,970
or active management technology this

605
00:25:59,970 --> 00:26:02,550
provides remote access features for you

606
00:26:02,550 --> 00:26:04,400
to make configuration changes

607
00:26:04,400 --> 00:26:06,300
independently of whether an operating

608
00:26:06,300 --> 00:26:08,130
system is even running it's typically

609
00:26:08,130 --> 00:26:11,100
done through a web interface AMT is

610
00:26:11,100 --> 00:26:12,990
typically used in corporate environments

611
00:26:12,990 --> 00:26:17,070
the thing is though that's actually

612
00:26:17,070 --> 00:26:18,710
verified to be insecure

613
00:26:18,710 --> 00:26:21,059
we had a theory that this could

614
00:26:21,059 --> 00:26:24,860
potentially be a backdoor and it's true

615
00:26:24,860 --> 00:26:30,000
there so on a lot on some Intel systems

616
00:26:30,000 --> 00:26:32,790
for instance the web interface that

617
00:26:32,790 --> 00:26:35,490
actually the AMT uses was found to have

618
00:26:35,490 --> 00:26:39,750
bugs in its TLS engine though in its TLS

619
00:26:39,750 --> 00:26:42,559
implementation so you could

620
00:26:42,559 --> 00:26:43,730
new traffic over the network for

621
00:26:43,730 --> 00:26:46,129
instance anyone who has control of your

622
00:26:46,129 --> 00:26:48,679
system via AMT has absolute control over

623
00:26:48,679 --> 00:26:52,249
your system if it has DMA that also

624
00:26:52,249 --> 00:26:54,620
means for instance they its leak

625
00:26:54,620 --> 00:26:55,999
encryption keys that are stored in

626
00:26:55,999 --> 00:26:59,090
memory their management engine is

627
00:26:59,090 --> 00:27:01,789
cryptographically signs as well when you

628
00:27:01,789 --> 00:27:04,610
boot the system their system checks for

629
00:27:04,610 --> 00:27:06,529
the signature on that if you make

630
00:27:06,529 --> 00:27:08,330
modifications to the management engine

631
00:27:08,330 --> 00:27:11,799
or remove it your system won't boot

632
00:27:11,799 --> 00:27:14,649
there are various extensions on top of

633
00:27:14,649 --> 00:27:17,899
inter management engine besides just AMT

634
00:27:17,899 --> 00:27:20,240
one of them is called Intel boot guards

635
00:27:20,240 --> 00:27:23,059
which on modern Intel systems prevents

636
00:27:23,059 --> 00:27:26,570
other boot firmware from being used so

637
00:27:26,570 --> 00:27:28,580
if you wanted to install core boots or

638
00:27:28,580 --> 00:27:31,190
Libre boots onto a system that has the

639
00:27:31,190 --> 00:27:32,990
internal bit guards you wouldn't be able

640
00:27:32,990 --> 00:27:34,999
to do it this system would check the

641
00:27:34,999 --> 00:27:36,559
signature of the boot demo that you're

642
00:27:36,559 --> 00:27:40,850
using and reject it you can find more

643
00:27:40,850 --> 00:27:43,159
information about this on the libra boot

644
00:27:43,159 --> 00:27:47,139
dot org slash faq that's our FAQ section

645
00:27:47,139 --> 00:27:51,019
there is an exception nowadays this is

646
00:27:51,019 --> 00:27:54,429
also mentioned on the libra boots FAQ

647
00:27:54,429 --> 00:27:57,740
some there wasn't some research a while

648
00:27:57,740 --> 00:28:04,039
ago in to remove so on modern Intel

649
00:28:04,039 --> 00:28:05,869
systems you can't remove the management

650
00:28:05,869 --> 00:28:08,720
engine and you can't modify any of it

651
00:28:08,720 --> 00:28:11,539
but there was a workarounds that some

652
00:28:11,539 --> 00:28:14,330
that people in corporate projects found

653
00:28:14,330 --> 00:28:17,629
for removing the networking features in

654
00:28:17,629 --> 00:28:21,440
the management engine removing most room

655
00:28:21,440 --> 00:28:22,999
removing all of the malicious features

656
00:28:22,999 --> 00:28:24,399
to the point where it's basically

657
00:28:24,399 --> 00:28:28,249
useless and doesn't do anything we're

658
00:28:28,249 --> 00:28:30,230
considering whether to add some of these

659
00:28:30,230 --> 00:28:32,629
systems in Libra boots we're not

660
00:28:32,629 --> 00:28:34,490
currently working on that we're looking

661
00:28:34,490 --> 00:28:36,889
for input on that from the community you

662
00:28:36,889 --> 00:28:39,350
can go on to this of the libra boot FAQ

663
00:28:39,350 --> 00:28:41,419
section and reads the information about

664
00:28:41,419 --> 00:28:42,799
the management engine on there and

665
00:28:42,799 --> 00:28:47,450
there's a link to this it's there's also

666
00:28:47,450 --> 00:28:49,610
hope there's also used yeah go on server

667
00:28:49,610 --> 00:28:51,110
leave a review FAQ and we've got some

668
00:28:51,110 --> 00:28:53,059
information about this this is something

669
00:28:53,059 --> 00:28:54,990
new that we're looking into

670
00:28:54,990 --> 00:28:57,000
so we're not really doing anything with

671
00:28:57,000 --> 00:29:01,710
this yes also we don't know if it's if

672
00:29:01,710 --> 00:29:04,140
that makes the system secure we don't

673
00:29:04,140 --> 00:29:05,790
know if it actually removes malicious

674
00:29:05,790 --> 00:29:08,370
features or if there's still some some

675
00:29:08,370 --> 00:29:11,000
pictures left that you don't want so I

676
00:29:11,000 --> 00:29:13,530
should also mention that AMD is just as

677
00:29:13,530 --> 00:29:16,260
bad as in self so AMD has their own

678
00:29:16,260 --> 00:29:17,610
equivalent of the internal management

679
00:29:17,610 --> 00:29:19,260
engine calls their platform security

680
00:29:19,260 --> 00:29:24,780
processor they also provides hub the hub

681
00:29:24,780 --> 00:29:27,530
realizations blobs just like himself

682
00:29:27,530 --> 00:29:30,360
they have all of the same security and

683
00:29:30,360 --> 00:29:33,059
freedom issues in as Intel you can go

684
00:29:33,059 --> 00:29:35,070
into the libres FAQ section and read

685
00:29:35,070 --> 00:29:38,280
about this is actually a typo it's meant

686
00:29:38,280 --> 00:29:40,710
to say only not Intel yeah if you go on

687
00:29:40,710 --> 00:29:42,480
to the Libra root FAQ section we have

688
00:29:42,480 --> 00:29:45,420
been information about the various

689
00:29:45,420 --> 00:29:49,530
problems with Intel and AMD we recommend

690
00:29:49,530 --> 00:29:52,860
that people don't use modern Intel or

691
00:29:52,860 --> 00:29:55,860
AMD Hardware because of their freedom

692
00:29:55,860 --> 00:29:58,620
issues that they have there is an

693
00:29:58,620 --> 00:30:04,530
alternative so IBM recently freed their

694
00:30:04,530 --> 00:30:08,160
power platforms so this is this used to

695
00:30:08,160 --> 00:30:11,730
be called PowerPC modern power CPUs have

696
00:30:11,730 --> 00:30:16,410
been freed so if you buy a system from

697
00:30:16,410 --> 00:30:19,740
IBM now nowadays you can actually pause

698
00:30:19,740 --> 00:30:23,460
that not all actual systems that you can

699
00:30:23,460 --> 00:30:26,940
buy come with pre-boot firmware but it's

700
00:30:26,940 --> 00:30:30,870
possible nowadays to have actual RMS

701
00:30:30,870 --> 00:30:34,170
pre-installing Libre boots there was a

702
00:30:34,170 --> 00:30:36,990
project called the talus workstation

703
00:30:36,990 --> 00:30:38,790
which I'll cover on the next slides

704
00:30:38,790 --> 00:30:41,850
which attempts to provides Libra boots

705
00:30:41,850 --> 00:30:43,890
at the OEM level they wanted to

706
00:30:43,890 --> 00:30:46,740
manufacturer their own hardware but

707
00:30:46,740 --> 00:30:48,780
using the IBM power platform instead of

708
00:30:48,780 --> 00:30:52,770
x86 this hardware is available today to

709
00:30:52,770 --> 00:30:55,010
actually pour Libra roots and you can

710
00:30:55,010 --> 00:30:58,650
fire these systems from IBM and actually

711
00:30:58,650 --> 00:31:03,750
sell them and they are BM actually

712
00:31:03,750 --> 00:31:05,730
support this so this is something that

713
00:31:05,730 --> 00:31:07,890
we're looking into there was a project

714
00:31:07,890 --> 00:31:08,430
call

715
00:31:08,430 --> 00:31:12,750
the Tallis workstation which attempted

716
00:31:12,750 --> 00:31:16,410
to provide this as an OEM that it was a

717
00:31:16,410 --> 00:31:17,610
crowdfunding campaign that they were

718
00:31:17,610 --> 00:31:19,200
running unfortunately that crowdfunding

719
00:31:19,200 --> 00:31:22,050
campaign failed the problems that we

720
00:31:22,050 --> 00:31:23,580
found while the problems that they found

721
00:31:23,580 --> 00:31:26,790
rather the hardware is very expensive to

722
00:31:26,790 --> 00:31:29,040
sell it's not actually possible at the

723
00:31:29,040 --> 00:31:30,750
moment to compete with the likes of

724
00:31:30,750 --> 00:31:33,480
Intel or Andy in terms of price even

725
00:31:33,480 --> 00:31:35,180
though the hard the hover itself is

726
00:31:35,180 --> 00:31:38,250
equivalent performance wise so that's

727
00:31:38,250 --> 00:31:39,330
one of the main reasons that the

728
00:31:39,330 --> 00:31:44,270
campaign felt we want we're looking

729
00:31:44,270 --> 00:31:47,250
we're looking to restart a temperature

730
00:31:47,250 --> 00:31:48,480
providing power hardware to the

731
00:31:48,480 --> 00:31:50,690
community because this is one of the

732
00:31:50,690 --> 00:31:53,940
this is one of the sister architectures

733
00:31:53,940 --> 00:31:56,490
that we can use in the future Intel and

734
00:31:56,490 --> 00:31:58,890
AMD is currently a dead end in terms of

735
00:31:58,890 --> 00:32:01,640
free software we can't use Intel or Andy

736
00:32:01,640 --> 00:32:04,620
this is currently the only alternative

737
00:32:04,620 --> 00:32:10,340
to it x86 when speaking about open power

738
00:32:10,340 --> 00:32:15,600
so the crowdfunding company there are

739
00:32:15,600 --> 00:32:17,640
some open pal systems that you can get

740
00:32:17,640 --> 00:32:20,280
now that they're usually very expensive

741
00:32:20,280 --> 00:32:22,050
and they're usually only available as

742
00:32:22,050 --> 00:32:26,910
servers so they're currently are are not

743
00:32:26,910 --> 00:32:28,890
that many alternatives that you can use

744
00:32:28,890 --> 00:32:31,740
at least for a modern hardware if you

745
00:32:31,740 --> 00:32:36,510
want free boot firmly if you want to do

746
00:32:36,510 --> 00:32:38,400
software development for instance arm

747
00:32:38,400 --> 00:32:40,380
hardware is often low-end

748
00:32:40,380 --> 00:32:42,750
it's often not powerful enough for a

749
00:32:42,750 --> 00:32:44,040
real software development in a lot of

750
00:32:44,040 --> 00:32:47,430
use cases there are there is a server

751
00:32:47,430 --> 00:32:49,470
platform which Libre boot supports which

752
00:32:49,470 --> 00:32:51,570
I mentioned earlier there excess kg PC

753
00:32:51,570 --> 00:32:54,870
16 which is still relatively modern and

754
00:32:54,870 --> 00:32:57,420
still high-end enough for most people to

755
00:32:57,420 --> 00:32:59,490
actually use so either development

756
00:32:59,490 --> 00:33:02,160
purposes it can also be used for hosting

757
00:33:02,160 --> 00:33:04,140
and any other kind of server application

758
00:33:04,140 --> 00:33:06,030
that you need and you can find more

759
00:33:06,030 --> 00:33:07,500
information about that on the website we

760
00:33:07,500 --> 00:33:10,940
actually sell that at mini ferry as well

761
00:33:10,940 --> 00:33:13,760
but at the moment there are no solutions

762
00:33:13,760 --> 00:33:17,070
in our EMS if you go to an OEM they all

763
00:33:17,070 --> 00:33:19,740
provide non pre-boot firmware that was

764
00:33:19,740 --> 00:33:20,730
one of the things

765
00:33:20,730 --> 00:33:22,620
that the talus projects was trying to

766
00:33:22,620 --> 00:33:24,990
solve the crowdfunding campaign felt so

767
00:33:24,990 --> 00:33:29,490
weird currently stuck I mentioned before

768
00:33:29,490 --> 00:33:31,350
so moving on to another topic I

769
00:33:31,350 --> 00:33:34,650
mentioned before about payloads so cool

770
00:33:34,650 --> 00:33:36,390
boots provides hardware initialization

771
00:33:36,390 --> 00:33:39,059
only and then jumps through payloads the

772
00:33:39,059 --> 00:33:41,840
payload is included externally and

773
00:33:41,840 --> 00:33:45,570
typically by another projects not run by

774
00:33:45,570 --> 00:33:49,410
the corporate projects on x86 we use the

775
00:33:49,410 --> 00:33:51,510
grub bootloader for boots for boosting

776
00:33:51,510 --> 00:33:55,169
your operating system on Chromebooks we

777
00:33:55,169 --> 00:33:57,120
use the depth-charge bootloader there

778
00:33:57,120 --> 00:33:58,799
are some Chromebooks supported in Libra

779
00:33:58,799 --> 00:34:01,710
boots which I'll explain later on in the

780
00:34:01,710 --> 00:34:04,140
talk they use they don't use Intel

781
00:34:04,140 --> 00:34:07,230
processors there are also many different

782
00:34:07,230 --> 00:34:08,850
payloads that you can use in coreboot so

783
00:34:08,850 --> 00:34:12,060
you boot loaders low-level applications

784
00:34:12,060 --> 00:34:14,699
like games there are some games

785
00:34:14,699 --> 00:34:18,000
implemented as corporate heads the most

786
00:34:18,000 --> 00:34:20,190
common use case with payloads and

787
00:34:20,190 --> 00:34:22,710
Corbet's is to use a bootloader or some

788
00:34:22,710 --> 00:34:29,100
kind of by office implementation so why

789
00:34:29,100 --> 00:34:30,659
do we use the grub bootloader instead of

790
00:34:30,659 --> 00:34:33,510
say C by ops for instance C by ops would

791
00:34:33,510 --> 00:34:36,000
provide this legacy support for any

792
00:34:36,000 --> 00:34:38,210
operating system that you want to use

793
00:34:38,210 --> 00:34:40,800
there are advantages to using a boot

794
00:34:40,800 --> 00:34:43,590
loader in Libra boots in particular so

795
00:34:43,590 --> 00:34:45,619
with the grub bootloader for instance

796
00:34:45,619 --> 00:34:48,960
you get much faster boot speeds because

797
00:34:48,960 --> 00:34:52,440
you're skipping so when you're using a

798
00:34:52,440 --> 00:34:54,300
typical system you go through the hover

799
00:34:54,300 --> 00:34:55,619
initialization and then you go through

800
00:34:55,619 --> 00:34:58,500
either playoffs or UEFI firmware and

801
00:34:58,500 --> 00:35:00,000
then you go to a boot loader which

802
00:35:00,000 --> 00:35:01,500
because your operating system in Libra

803
00:35:01,500 --> 00:35:02,700
boots you jump straight to the boot

804
00:35:02,700 --> 00:35:04,530
loader and you can configure that to

805
00:35:04,530 --> 00:35:08,300
however you want grub has support for

806
00:35:08,300 --> 00:35:11,250
decrypting partitions as well if you're

807
00:35:11,250 --> 00:35:13,830
using Lux encryption so for instance you

808
00:35:13,830 --> 00:35:16,380
can increase the /boot directory you

809
00:35:16,380 --> 00:35:19,440
can't do this on standard firmware it

810
00:35:19,440 --> 00:35:22,740
also has their options has checked GPG

811
00:35:22,740 --> 00:35:25,109
signatures which again most of them I

812
00:35:25,109 --> 00:35:27,570
can't do I use a use case for this would

813
00:35:27,570 --> 00:35:29,010
be the Linux kernel for instance you

814
00:35:29,010 --> 00:35:30,240
could sign it and

815
00:35:30,240 --> 00:35:33,470
check my signature on boots you can also

816
00:35:33,470 --> 00:35:37,619
boot the kernel Linux kernel directly

817
00:35:37,619 --> 00:35:39,600
from the flash ship so core boots has

818
00:35:39,600 --> 00:35:41,280
its own file system in the boot flash

819
00:35:41,280 --> 00:35:43,650
called the CB FS you can put a Linux

820
00:35:43,650 --> 00:35:46,110
kernel there and configure grub to boot

821
00:35:46,110 --> 00:35:48,420
that so instead of having it on the hard

822
00:35:48,420 --> 00:35:50,640
drive you'd have it in the flash it's

823
00:35:50,640 --> 00:35:52,740
also useful for testing because you grub

824
00:35:52,740 --> 00:35:55,020
is capable of booting any other

825
00:35:55,020 --> 00:36:01,200
corporate payloads now because we use

826
00:36:01,200 --> 00:36:04,260
the grub bootloader some people ask well

827
00:36:04,260 --> 00:36:06,960
if I want to reinstall my operating

828
00:36:06,960 --> 00:36:09,180
system what I have to also reflect with

829
00:36:09,180 --> 00:36:12,300
a different grub configuration and the

830
00:36:12,300 --> 00:36:15,060
answer is no the grub configuration that

831
00:36:15,060 --> 00:36:17,310
we use in libri boot by defaults will

832
00:36:17,310 --> 00:36:20,910
loads grub configuration file from the

833
00:36:20,910 --> 00:36:23,520
hard drive or from your SSD if it's if

834
00:36:23,520 --> 00:36:28,340
present and you can also change the

835
00:36:28,340 --> 00:36:30,119
configuration that's in there if you

836
00:36:30,119 --> 00:36:38,010
want on so that's on x86 on Chromebooks

837
00:36:38,010 --> 00:36:41,490
though that use so we support several

838
00:36:41,490 --> 00:36:43,350
systems several Chromebooks in Libre

839
00:36:43,350 --> 00:36:46,380
boots that have Rockchip CP using them

840
00:36:46,380 --> 00:36:47,940
Rockchip is their company that produces

841
00:36:47,940 --> 00:36:53,880
arm embedded hardware so depth charges

842
00:36:53,880 --> 00:36:55,830
the defaults payloads that is used on

843
00:36:55,830 --> 00:36:58,859
all Chromebooks we use this in Libra

844
00:36:58,859 --> 00:37:02,090
boot as well it provides several

845
00:37:02,090 --> 00:37:04,170
security features that are similar to

846
00:37:04,170 --> 00:37:06,060
grub so for instance with depth charge

847
00:37:06,060 --> 00:37:09,150
you can sign your kernel and check the

848
00:37:09,150 --> 00:37:12,119
signature on boots and verify that their

849
00:37:12,119 --> 00:37:13,350
boot firmware has not been corrupted

850
00:37:13,350 --> 00:37:18,660
some way so I'll start something that

851
00:37:18,660 --> 00:37:20,369
operating system supporting liebherr

852
00:37:20,369 --> 00:37:22,740
boots because of their configuration

853
00:37:22,740 --> 00:37:25,290
type that we use in liebherr boots not

854
00:37:25,290 --> 00:37:28,530
all operating systems are supported the

855
00:37:28,530 --> 00:37:30,600
goona class on linux system is fully

856
00:37:30,600 --> 00:37:32,940
supported most distributions are

857
00:37:32,940 --> 00:37:37,410
compatible you can also use full disk

858
00:37:37,410 --> 00:37:38,460
encryption include

859
00:37:38,460 --> 00:37:41,520
Sports slash boots unlike on most other

860
00:37:41,520 --> 00:37:45,089
systems if you go into the documentation

861
00:37:45,089 --> 00:37:47,130
section in Libra boots Libra boot

862
00:37:47,130 --> 00:37:49,880
dot-org forward slash Docs /b gnu/linux

863
00:37:49,880 --> 00:37:52,260
you're there are instructions there for

864
00:37:52,260 --> 00:37:55,770
how to install the system we also

865
00:37:55,770 --> 00:37:59,970
support BSD this wasn't the case a while

866
00:37:59,970 --> 00:38:01,560
ago we recently added support for

867
00:38:01,560 --> 00:38:04,440
several of the BSD systems o-net BSD

868
00:38:04,440 --> 00:38:04,859
works

869
00:38:04,859 --> 00:38:07,710
OpenBSD works there's also a product

870
00:38:07,710 --> 00:38:09,690
called Liberty BSD which is based on

871
00:38:09,690 --> 00:38:12,900
open BSD that should also work FreeBSD

872
00:38:12,900 --> 00:38:14,160
we had some problems with video

873
00:38:14,160 --> 00:38:16,109
corruption on boots but that also boots

874
00:38:16,109 --> 00:38:18,060
you could use that in text mode if you

875
00:38:18,060 --> 00:38:20,970
wanted to we have a section for that on

876
00:38:20,970 --> 00:38:22,740
the libre boot website if you go to leap

877
00:38:22,740 --> 00:38:25,980
reboot bottle slash Docs slash BSD you

878
00:38:25,980 --> 00:38:27,480
can find instructions there for how to

879
00:38:27,480 --> 00:38:31,349
install BSD as well other operating

880
00:38:31,349 --> 00:38:31,980
systems

881
00:38:31,980 --> 00:38:34,020
well there are other free operating

882
00:38:34,020 --> 00:38:36,570
systems besides just you know plus Linux

883
00:38:36,570 --> 00:38:39,630
and BSD we don't know if these are

884
00:38:39,630 --> 00:38:41,849
compatible they're probably not but

885
00:38:41,849 --> 00:38:44,550
we're not sure so this would have to be

886
00:38:44,550 --> 00:38:50,040
tested so part of the reason why I'm

887
00:38:50,040 --> 00:38:52,290
here is to talk about where the

888
00:38:52,290 --> 00:38:53,400
project's is going and what we're

889
00:38:53,400 --> 00:38:55,290
currently doing to improve legal boots

890
00:38:55,290 --> 00:38:57,810
we did the last release of Libre boots

891
00:38:57,810 --> 00:39:00,630
was in September 2016 to the current

892
00:39:00,630 --> 00:39:03,660
releases about four months old now we're

893
00:39:03,660 --> 00:39:05,820
looking so we've already added several

894
00:39:05,820 --> 00:39:08,040
new Chromebooks deliver boots which use

895
00:39:08,040 --> 00:39:10,650
ARM processors instead of himself we've

896
00:39:10,650 --> 00:39:13,530
recently merged a new build system but

897
00:39:13,530 --> 00:39:15,450
that only currently builds the

898
00:39:15,450 --> 00:39:17,250
Chromebooks that we supports they're in

899
00:39:17,250 --> 00:39:19,589
their Intel and AMD systems that we

900
00:39:19,589 --> 00:39:22,410
supports are currently still built using

901
00:39:22,410 --> 00:39:23,940
the old build system that we had before

902
00:39:23,940 --> 00:39:26,280
the new build system has several

903
00:39:26,280 --> 00:39:28,920
advantages so one of the main advantages

904
00:39:28,920 --> 00:39:31,080
there it currently has for instance is

905
00:39:31,080 --> 00:39:35,099
if he provides Linux kernel configs you

906
00:39:35,099 --> 00:39:37,200
can it has support for building a Linux

907
00:39:37,200 --> 00:39:42,599
kernel by default the built on arm

908
00:39:42,599 --> 00:39:44,430
permits you have to build your own

909
00:39:44,430 --> 00:39:46,530
custom kind of configuration you can't

910
00:39:46,530 --> 00:39:47,350
use

911
00:39:47,350 --> 00:39:52,030
upstream you have to use on most on foot

912
00:39:52,030 --> 00:39:54,250
on most Chromebooks you use special

913
00:39:54,250 --> 00:39:55,570
branch of the Linux kernel that's

914
00:39:55,570 --> 00:39:58,540
maintained by Google and you very often

915
00:39:58,540 --> 00:40:00,970
have to build from source especially if

916
00:40:00,970 --> 00:40:03,160
you're using one of the less well-known

917
00:40:03,160 --> 00:40:06,700
distributions so the new build system in

918
00:40:06,700 --> 00:40:09,100
liebherr boots has supports for building

919
00:40:09,100 --> 00:40:12,970
limits kernel payloads by default this

920
00:40:12,970 --> 00:40:14,890
is currently targeted at Chrome OS

921
00:40:14,890 --> 00:40:18,270
devices Chromebooks in other words but

922
00:40:18,270 --> 00:40:20,800
we will be extending listen wicked

923
00:40:20,800 --> 00:40:23,170
extends this in the future for petite

924
00:40:23,170 --> 00:40:24,970
boots which is another bootloader

925
00:40:24,970 --> 00:40:27,430
this that we would like to support as a

926
00:40:27,430 --> 00:40:30,820
payload option in Libra boots we want to

927
00:40:30,820 --> 00:40:32,320
add support for using alternative

928
00:40:32,320 --> 00:40:34,150
compilers as well we currently only use

929
00:40:34,150 --> 00:40:39,160
G GCC there are several features in

930
00:40:39,160 --> 00:40:41,020
Libra boots that we already supports but

931
00:40:41,020 --> 00:40:44,710
in terms of Apple features we're mostly

932
00:40:44,710 --> 00:40:46,330
working on hardware support at the

933
00:40:46,330 --> 00:40:49,420
moment in Libra boots so there are some

934
00:40:49,420 --> 00:40:51,160
newer systems that we're looking into as

935
00:40:51,160 --> 00:40:56,140
well how to help so if you want to get

936
00:40:56,140 --> 00:40:59,500
involved with the Libra projects there

937
00:40:59,500 --> 00:41:01,450
are several ways that the community

938
00:41:01,450 --> 00:41:04,060
currently falls short so as I mentioned

939
00:41:04,060 --> 00:41:05,920
before there's currently a lack of

940
00:41:05,920 --> 00:41:08,950
hardware manufacturers or our EMS that

941
00:41:08,950 --> 00:41:12,400
provide Libra boot pre-installed this is

942
00:41:12,400 --> 00:41:14,020
something that we want to fix so if

943
00:41:14,020 --> 00:41:15,730
anyone has the skills and the resources

944
00:41:15,730 --> 00:41:18,820
to be able to do that then that's

945
00:41:18,820 --> 00:41:20,560
something that we would like we also

946
00:41:20,560 --> 00:41:23,170
want people to continue working on

947
00:41:23,170 --> 00:41:25,000
porting new hardware to be produced as

948
00:41:25,000 --> 00:41:28,450
well you can tell people about Libra

949
00:41:28,450 --> 00:41:31,060
boots and promote its people explain why

950
00:41:31,060 --> 00:41:33,700
it's important you can help people to

951
00:41:33,700 --> 00:41:35,560
install Libra boots as well if they have

952
00:41:35,560 --> 00:41:38,560
issues you can help us improve the

953
00:41:38,560 --> 00:41:41,050
documentation there are many issues with

954
00:41:41,050 --> 00:41:42,310
the current documentation that we have

955
00:41:42,310 --> 00:41:43,630
there are always ways that we can

956
00:41:43,630 --> 00:41:47,500
improve so if you have so if you you can

957
00:41:47,500 --> 00:41:49,770
also submit bug reports for instance so

958
00:41:49,770 --> 00:41:52,330
especially during a release cycle like

959
00:41:52,330 --> 00:41:54,490
if we're testing a new release you can

960
00:41:54,490 --> 00:41:57,070
submit bug reports so if you go to Libra

961
00:41:57,070 --> 00:41:58,550
boot dot all the slash tasks

962
00:41:58,550 --> 00:42:01,760
you can submit any any issues that you

963
00:42:01,760 --> 00:42:03,490
find you can submit like reports and

964
00:42:03,490 --> 00:42:05,600
patches are submitted using the

965
00:42:05,600 --> 00:42:07,070
instructions that leave reboot not all

966
00:42:07,070 --> 00:42:11,990
forward slash gets we you can contact

967
00:42:11,990 --> 00:42:13,460
the Libra group projects in several ways

968
00:42:13,460 --> 00:42:15,830
so we have an IRC channel on freenode

969
00:42:15,830 --> 00:42:19,250
Ashley the roots we have a sub reddits

970
00:42:19,250 --> 00:42:22,610
now as well that's fairly recent list we

971
00:42:22,610 --> 00:42:24,050
also have a list of developers who you

972
00:42:24,050 --> 00:42:25,610
can contact directly in the Libra group

973
00:42:25,610 --> 00:42:27,260
projects I'm listed there there are

974
00:42:27,260 --> 00:42:28,660
several other people as well on

975
00:42:28,660 --> 00:42:32,390
librivox.org slash contrib we currently

976
00:42:32,390 --> 00:42:33,980
don't have a mailing list that we're

977
00:42:33,980 --> 00:42:36,730
looking to create one in the future

978
00:42:36,730 --> 00:42:39,820
thank you

979
00:42:47,759 --> 00:42:51,539
are there any questions

980
00:43:06,760 --> 00:43:10,840
yes hello Leah thank you very much for

981
00:43:10,840 --> 00:43:14,609
your project I'm using leave aboot for

982
00:43:14,609 --> 00:43:20,619
some months yeah excuse me I should have

983
00:43:20,619 --> 00:43:23,410
made the sign so my question is do I

984
00:43:23,410 --> 00:43:26,290
have to fear legal issues if I apply

985
00:43:26,290 --> 00:43:30,040
lipid on my ship will I receive a letter

986
00:43:30,040 --> 00:43:33,790
from an uppercut from Intel or or the

987
00:43:33,790 --> 00:43:34,510
main boat

988
00:43:34,510 --> 00:43:36,940
manufacturer do we have any experience

989
00:43:36,940 --> 00:43:40,359
or things to tell about so I think the

990
00:43:40,359 --> 00:43:42,340
question was are there any potential

991
00:43:42,340 --> 00:43:44,619
legal issues with using lead boots in

992
00:43:44,619 --> 00:43:48,010
safe and organization um not that I'm

993
00:43:48,010 --> 00:43:50,980
aware of if you're in the u.s. you may

994
00:43:50,980 --> 00:43:52,930
have problems with DMCA or something

995
00:43:52,930 --> 00:43:53,320
like that

996
00:43:53,320 --> 00:43:54,910
but in Europe I don't think this would

997
00:43:54,910 --> 00:43:56,200
be a problem I've never heard of

998
00:43:56,200 --> 00:43:58,359
problems there are institutions that use

999
00:43:58,359 --> 00:44:00,250
leave the boots and they haven't had

1000
00:44:00,250 --> 00:44:03,220
problems if there are potential issues

1001
00:44:03,220 --> 00:44:05,109
it's just something that we'd have come

1002
00:44:05,109 --> 00:44:07,450
across as a community in the future but

1003
00:44:07,450 --> 00:44:09,850
at present I'm unaware of any issues

1004
00:44:09,850 --> 00:44:13,090
yeah thank you maybe would you think

1005
00:44:13,090 --> 00:44:17,230
that this is related because as far as I

1006
00:44:17,230 --> 00:44:20,440
know the boo-booed often is usable for

1007
00:44:20,440 --> 00:44:24,640
kind of older hardware maybe this is the

1008
00:44:24,640 --> 00:44:28,210
reason why it's not not any trouble to

1009
00:44:28,210 --> 00:44:35,619
be expected maybe you can discuss this

1010
00:44:35,619 --> 00:44:43,320
later because I'll talk to you outside

1011
00:44:43,320 --> 00:44:45,510
because this sounds like a very in-depth

1012
00:44:45,510 --> 00:44:47,859
discussion it's not something that we

1013
00:44:47,859 --> 00:44:51,780
can really be answered in half a minute

1014
00:44:51,780 --> 00:44:54,730
yeah so I was actually curious what

1015
00:44:54,730 --> 00:44:59,770
people does it take - I'm here to work

1016
00:44:59,770 --> 00:45:02,380
on developing coreboot because well I

1017
00:45:02,380 --> 00:45:05,800
imagine you don't exactly flash an

1018
00:45:05,800 --> 00:45:11,050
actual hardware hardware for every bill

1019
00:45:11,050 --> 00:45:15,160
do you make when you as a developer

1020
00:45:15,160 --> 00:45:18,660
not only because that would fry the chip

1021
00:45:18,660 --> 00:45:22,700
the flash to produce pretty quickly so

1022
00:45:22,700 --> 00:45:27,000
do you have is the did you around on a

1023
00:45:27,000 --> 00:45:29,940
VM or what does it actually take so I

1024
00:45:29,940 --> 00:45:32,730
think the question was what kind of

1025
00:45:32,730 --> 00:45:34,380
mechanism that we have for testing

1026
00:45:34,380 --> 00:45:36,599
hardware what do we use for that do we

1027
00:45:36,599 --> 00:45:38,220
have some kind of automated system in

1028
00:45:38,220 --> 00:45:41,400
place actually I mean just for

1029
00:45:41,400 --> 00:45:44,490
developing because like well when you

1030
00:45:44,490 --> 00:45:47,460
have when you program and then builds

1031
00:45:47,460 --> 00:45:51,900
the the image you don't actually run

1032
00:45:51,900 --> 00:45:54,089
every iteration on the actual hardware

1033
00:45:54,089 --> 00:45:58,230
dear no we we typically test before

1034
00:45:58,230 --> 00:45:59,789
there's a new release we don't typically

1035
00:45:59,789 --> 00:46:01,170
test every image that's built because

1036
00:46:01,170 --> 00:46:02,759
I've always testing would take too much

1037
00:46:02,759 --> 00:46:06,869
time so we typically just make sure that

1038
00:46:06,869 --> 00:46:10,799
their software builds and if test we

1039
00:46:10,799 --> 00:46:13,069
test the firmware but we test it usually

1040
00:46:13,069 --> 00:46:16,319
in the run-up to a release and then fix

1041
00:46:16,319 --> 00:46:18,869
any issues that fails as for virtual

1042
00:46:18,869 --> 00:46:20,849
machines we don't typically use virtual

1043
00:46:20,849 --> 00:46:22,410
machines in liebherr boots we have to

1044
00:46:22,410 --> 00:46:31,289
test on real hardware maybe maybe this

1045
00:46:31,289 --> 00:46:36,349
is it's it's like one question per user

1046
00:46:36,349 --> 00:46:39,779
so be try please try to be shorted

1047
00:46:39,779 --> 00:46:41,460
specific and otherwise you have to

1048
00:46:41,460 --> 00:46:52,529
restart late later your question stance

1049
00:46:52,529 --> 00:46:55,920
on removing blobs especially from the

1050
00:46:55,920 --> 00:46:59,670
low level firmware on these boards but

1051
00:46:59,670 --> 00:47:02,220
I'm an electronic engineer and I design

1052
00:47:02,220 --> 00:47:06,350
a zzyx basically quite regularly and any

1053
00:47:06,350 --> 00:47:09,600
hardware that doesn't have any certain

1054
00:47:09,600 --> 00:47:12,270
modern chip that doesn't have a blog

1055
00:47:12,270 --> 00:47:15,030
interface to load microcode will

1056
00:47:15,030 --> 00:47:18,720
generally have a mask run inside in a

1057
00:47:18,720 --> 00:47:20,550
metallization layer that you can never

1058
00:47:20,550 --> 00:47:23,520
change and given that I would rather

1059
00:47:23,520 --> 00:47:27,750
have external blobs of microcode rather

1060
00:47:27,750 --> 00:47:29,880
than metallization layer with possible

1061
00:47:29,880 --> 00:47:31,950
bugs in that I will have to throw the

1062
00:47:31,950 --> 00:47:35,340
entire Hardware away now what I'm also

1063
00:47:35,340 --> 00:47:37,980
saying is is there a project in Libra

1064
00:47:37,980 --> 00:47:40,260
boot to reverse engineer those blobs and

1065
00:47:40,260 --> 00:47:45,210
replace them with open microcode where

1066
00:47:45,210 --> 00:47:49,950
are you and so the question was I think

1067
00:47:49,950 --> 00:47:51,720
about you it might encode Rob's you

1068
00:47:51,720 --> 00:47:54,060
you're a nurse place you were arguing

1069
00:47:54,060 --> 00:47:57,450
the case for so you said that there's

1070
00:47:57,450 --> 00:47:59,840
already microcode built into the CPU and

1071
00:47:59,840 --> 00:48:03,440
the updates although although

1072
00:48:03,440 --> 00:48:05,880
technically binary blobs are not

1073
00:48:05,880 --> 00:48:08,870
provided in me boots so were you asking

1074
00:48:08,870 --> 00:48:12,930
about about our opinion on including

1075
00:48:12,930 --> 00:48:15,150
updates I'm not sure yeah basically I

1076
00:48:15,150 --> 00:48:18,780
what I was saying was that I thought the

1077
00:48:18,780 --> 00:48:24,810
very purest view yes yeah this is this

1078
00:48:24,810 --> 00:48:26,640
is actually our third debate in the

1079
00:48:26,640 --> 00:48:31,110
Libre projects because the the micro

1080
00:48:31,110 --> 00:48:33,360
codes for the CPU is already already

1081
00:48:33,360 --> 00:48:36,870
comes built in and then manufacturers

1082
00:48:36,870 --> 00:48:39,480
typically provides volatile updates at

1083
00:48:39,480 --> 00:48:41,880
boots which you have to apply at every

1084
00:48:41,880 --> 00:48:47,550
boot so if you provides micro code

1085
00:48:47,550 --> 00:48:48,150
updates

1086
00:48:48,150 --> 00:48:50,430
you're still if you expose micro code

1087
00:48:50,430 --> 00:48:53,190
updates you're still using micro code

1088
00:48:53,190 --> 00:48:55,070
that's built into the CPU you're just

1089
00:48:55,070 --> 00:48:58,560
using my code that's older and it just

1090
00:48:58,560 --> 00:49:00,090
happens to be inside a mask wrong

1091
00:49:00,090 --> 00:49:04,860
so it's not dateable so yeah so if

1092
00:49:04,860 --> 00:49:06,380
you're using the microcode this build

1093
00:49:06,380 --> 00:49:08,360
so the cpu you can have potential issues

1094
00:49:08,360 --> 00:49:11,990
in terms of security and so on

1095
00:49:11,990 --> 00:49:15,740
Intel and AMD also maintains a lists of

1096
00:49:15,740 --> 00:49:18,080
bugs for every CPU generation that they

1097
00:49:18,080 --> 00:49:20,300
have you can search for the errata for

1098
00:49:20,300 --> 00:49:22,580
each CPU model and find out exactly

1099
00:49:22,580 --> 00:49:24,470
which which different microcode update

1100
00:49:24,470 --> 00:49:28,250
revisions fix which bug yeah this is

1101
00:49:28,250 --> 00:49:29,870
currently up for debate in the Libre

1102
00:49:29,870 --> 00:49:32,090
groups projects we currently excludes

1103
00:49:32,090 --> 00:49:34,700
our policy is currently excludes micro

1104
00:49:34,700 --> 00:49:37,460
code updates but there are a sight for

1105
00:49:37,460 --> 00:49:39,290
sizeable number in the community of

1106
00:49:39,290 --> 00:49:41,030
people in the community that would argue

1107
00:49:41,030 --> 00:49:42,740
the case for having micro code updates

1108
00:49:42,740 --> 00:49:45,230
included because even if you exploit

1109
00:49:45,230 --> 00:49:46,910
them you're still running the same micro

1110
00:49:46,910 --> 00:49:48,920
coches and order a revision anyway so I

1111
00:49:48,920 --> 00:49:50,690
don't know how to answer your question

1112
00:49:50,690 --> 00:49:51,980
at the moment this is not something that

1113
00:49:51,980 --> 00:49:54,410
I should answer myself unilaterally this

1114
00:49:54,410 --> 00:49:56,150
is something that we should have as it

1115
00:49:56,150 --> 00:50:01,520
baits within the community anymore so

1116
00:50:01,520 --> 00:50:07,150
one last question thank you for the talk

1117
00:50:07,150 --> 00:50:11,090
have you ever contacted the blob

1118
00:50:11,090 --> 00:50:14,360
developers and if so have you ever

1119
00:50:14,360 --> 00:50:15,920
succeeded in getting technical

1120
00:50:15,920 --> 00:50:19,610
information in order to rewrite it in a

1121
00:50:19,610 --> 00:50:23,420
you know understandable manner and you

1122
00:50:23,420 --> 00:50:26,720
know to remove it really meant it No

1123
00:50:26,720 --> 00:50:30,170
so the question was do we have contacts

1124
00:50:30,170 --> 00:50:32,600
with manufacturers to potentially have

1125
00:50:32,600 --> 00:50:35,420
specifications released so that we could

1126
00:50:35,420 --> 00:50:37,610
potentially work on reverse engineering

1127
00:50:37,610 --> 00:50:39,830
and implementing Libre firmware is that

1128
00:50:39,830 --> 00:50:43,790
the question we've had some talks we've

1129
00:50:43,790 --> 00:50:45,500
detected this in the past but they

1130
00:50:45,500 --> 00:50:46,970
usually don't work through small

1131
00:50:46,970 --> 00:50:49,640
projects like ours most of the hardware

1132
00:50:49,640 --> 00:50:51,440
manufacturers including the big ones I

1133
00:50:51,440 --> 00:50:53,480
can tell own and indeed are mostly

1134
00:50:53,480 --> 00:50:55,670
uncooperative so we haven't had any

1135
00:50:55,670 --> 00:50:57,980
success of that the work that we do in

1136
00:50:57,980 --> 00:50:59,740
the Libre projects at the moment is

1137
00:50:59,740 --> 00:51:02,270
mostly based on reverse engineering I

1138
00:51:02,270 --> 00:51:04,910
will say though there are some

1139
00:51:04,910 --> 00:51:07,580
individuals from these organizations

1140
00:51:07,580 --> 00:51:09,770
that do provide the source codes Intel

1141
00:51:09,770 --> 00:51:12,590
and AMD have also cooperated with core

1142
00:51:12,590 --> 00:51:15,080
boots in the past but it's generally not

1143
00:51:15,080 --> 00:51:16,250
full cooperation

1144
00:51:16,250 --> 00:51:19,040
most of the work is based on reverse

1145
00:51:19,040 --> 00:51:21,490
engineering

1146
00:51:21,880 --> 00:51:25,520
so time zap thank you for being here if

1147
00:51:25,520 --> 00:51:28,190
anyone if anyone wants to ask me more

1148
00:51:28,190 --> 00:51:29,780
questions you can you can make me up

1149
00:51:29,780 --> 00:51:32,660
outside in the corridors that's thank

1150
00:51:32,660 --> 00:51:34,580
you all for presenting the project thank

1151
00:51:34,580 --> 00:51:34,850
you

1152
00:51:34,850 --> 00:51:35,150
[Music]

1153
00:51:35,150 --> 00:51:44,280
[Applause]

