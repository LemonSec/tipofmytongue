1
00:00:04,930 --> 00:00:09,469
so a service industry stymie how I

2
00:00:09,469 --> 00:00:14,150
worked I work in Kimble company I am a

3
00:00:14,150 --> 00:00:17,180
contributor of kubernetes currently but

4
00:00:17,180 --> 00:00:19,820
before I was contributing to OpenStack

5
00:00:19,820 --> 00:00:22,520
and mostly to OpenStack Cola projects

6
00:00:22,520 --> 00:00:27,440
which parks the OpenStack components

7
00:00:27,440 --> 00:00:31,250
into docker containers and runs

8
00:00:31,250 --> 00:00:35,320
OpenStack as in container environment

9
00:00:35,320 --> 00:00:38,750
and I'm working for kimbop which is a

10
00:00:38,750 --> 00:00:42,850
company based in Berlin we are doing

11
00:00:42,850 --> 00:00:47,530
general Linux related development but

12
00:00:47,530 --> 00:00:50,450
the most of work done bulk invoke is

13
00:00:50,450 --> 00:00:52,820
visible in rocket project but also in

14
00:00:52,820 --> 00:00:59,210
system D or with scope and you can check

15
00:00:59,210 --> 00:01:02,180
our activity on our block you can check

16
00:01:02,180 --> 00:01:05,420
our github as everything we are doing is

17
00:01:05,420 --> 00:01:10,880
open-source or you can just write us an

18
00:01:10,880 --> 00:01:12,889
email if you have some questions

19
00:01:12,889 --> 00:01:17,959
regarding a company so I will start with

20
00:01:17,959 --> 00:01:21,920
explaining some basic concepts around my

21
00:01:21,920 --> 00:01:23,979
presentation

22
00:01:23,979 --> 00:01:27,200
first of all container and virtual

23
00:01:27,200 --> 00:01:30,380
machine I think that most of you know

24
00:01:30,380 --> 00:01:33,560
that difference so I'll not focus on

25
00:01:33,560 --> 00:01:36,229
that that much but you know container

26
00:01:36,229 --> 00:01:39,799
doesn't use any new kernel insights and

27
00:01:39,799 --> 00:01:43,779
virtual machine uses the separate

28
00:01:43,779 --> 00:01:47,450
operating system and is simulating the

29
00:01:47,450 --> 00:01:51,639
hardware container is just isolating

30
00:01:51,639 --> 00:01:57,469
several things in Linux system and by

31
00:01:57,469 --> 00:02:00,469
cloud I mean any kind of service which

32
00:02:00,469 --> 00:02:03,169
is provided over network to the user and

33
00:02:03,169 --> 00:02:08,080
user doesn't have to know where the

34
00:02:08,080 --> 00:02:14,900
service is actually provided in case of

35
00:02:14,900 --> 00:02:16,920
container based clouds

36
00:02:16,920 --> 00:02:18,780
container-based cloud is cloud

37
00:02:18,780 --> 00:02:23,190
environments where the user demands some

38
00:02:23,190 --> 00:02:25,080
containers and doesn't have to know

39
00:02:25,080 --> 00:02:28,830
where where they are physically located

40
00:02:28,830 --> 00:02:32,130
this they are scheduled automatically

41
00:02:32,130 --> 00:02:36,209
and though today there were a lot of

42
00:02:36,209 --> 00:02:39,330
talks about kubernetes that's the most

43
00:02:39,330 --> 00:02:43,800
popular container based clouds system

44
00:02:43,800 --> 00:02:45,810
which is open source but there is also

45
00:02:45,810 --> 00:02:49,320
misses and locust swarm and there are

46
00:02:49,320 --> 00:02:52,830
two are machine based clouds OpenStack

47
00:02:52,830 --> 00:02:56,640
is the most popular of them from the

48
00:02:56,640 --> 00:02:59,850
open source project from no open clouds

49
00:02:59,850 --> 00:03:02,280
which are focused mostly on virtual

50
00:03:02,280 --> 00:03:05,700
machine there is AWS and there ec2

51
00:03:05,700 --> 00:03:12,830
service and yes what is the problem and

52
00:03:12,830 --> 00:03:17,700
what I try to address the problem is

53
00:03:17,700 --> 00:03:20,850
that these clouds container and virtual

54
00:03:20,850 --> 00:03:23,459
machine-based are separate so for

55
00:03:23,459 --> 00:03:27,750
running a cloud consisting conference

56
00:03:27,750 --> 00:03:31,680
over to our machines booted from some

57
00:03:31,680 --> 00:03:34,380
kyouko or raw images you use OpenStack

58
00:03:34,380 --> 00:03:39,000
for for running containers you use

59
00:03:39,000 --> 00:03:39,780
kubernetes

60
00:03:39,780 --> 00:03:44,850
and yeah it's very hard to maintain a

61
00:03:44,850 --> 00:03:47,760
single environment single infrastructure

62
00:03:47,760 --> 00:03:51,209
which provides both of them to the user

63
00:03:51,209 --> 00:03:54,870
and that's the problem I would like to

64
00:03:54,870 --> 00:03:58,250
address so how to create about genius

65
00:03:58,250 --> 00:04:01,850
cloud environments which addresses both

66
00:04:01,850 --> 00:04:06,510
VMs and containers and one of the

67
00:04:06,510 --> 00:04:10,140
answers which is implemented in several

68
00:04:10,140 --> 00:04:12,150
ways and I will show them is putting

69
00:04:12,150 --> 00:04:14,579
virtual machine inside container it

70
00:04:14,579 --> 00:04:18,630
sounds crazy but it works and it's in my

71
00:04:18,630 --> 00:04:21,930
opinion makes sense and I will explain

72
00:04:21,930 --> 00:04:26,120
it in this presentation but first of all

73
00:04:26,120 --> 00:04:28,830
let's beginning with question what needs

74
00:04:28,830 --> 00:04:29,340
to be

75
00:04:29,340 --> 00:04:31,740
to run a virtual machine inside

76
00:04:31,740 --> 00:04:32,370
container

77
00:04:32,370 --> 00:04:36,840
what what does the what characterizes

78
00:04:36,840 --> 00:04:39,900
that container which can is able to run

79
00:04:39,900 --> 00:04:42,300
virtual machines first of all it has to

80
00:04:42,300 --> 00:04:45,150
be privileged so we need to give the

81
00:04:45,150 --> 00:04:50,520
most of Linux capabilities to that it

82
00:04:50,520 --> 00:04:53,720
needs an access to see groups because

83
00:04:53,720 --> 00:04:57,350
for example libvirt is using c groups

84
00:04:57,350 --> 00:05:02,310
for resource management for virtual

85
00:05:02,310 --> 00:05:04,860
machines it spans for queuing processes

86
00:05:04,860 --> 00:05:09,000
response we need also to provide an

87
00:05:09,000 --> 00:05:13,110
access to all the needed devices we

88
00:05:13,110 --> 00:05:15,930
would like to share with VMs and if we

89
00:05:15,930 --> 00:05:19,650
want to use kvn we need to also share

90
00:05:19,650 --> 00:05:24,440
the kvn devices it's yeah it's just a

91
00:05:24,440 --> 00:05:31,620
device in the dev directory and here

92
00:05:31,620 --> 00:05:35,250
comes the question whether this idea of

93
00:05:35,250 --> 00:05:39,930
putting VMS inside containers whether it

94
00:05:39,930 --> 00:05:43,979
improves security somehow mmm and the

95
00:05:43,979 --> 00:05:48,450
obvious answer is no that's because it's

96
00:05:48,450 --> 00:05:52,380
privileged it has access to the devices

97
00:05:52,380 --> 00:05:55,669
it has an access to see groups and

98
00:05:55,669 --> 00:05:59,340
that's why if someone gets inside the

99
00:05:59,340 --> 00:06:01,710
container in virtual machine we should

100
00:06:01,710 --> 00:06:05,360
assume that he has an access to the node

101
00:06:05,360 --> 00:06:09,030
to the host so it doesn't provide any

102
00:06:09,030 --> 00:06:12,690
security the idea of packing virtual

103
00:06:12,690 --> 00:06:15,080
machine inside container is only for

104
00:06:15,080 --> 00:06:18,330
simplifying things and creating a

105
00:06:18,330 --> 00:06:21,120
homogeneous environment but the security

106
00:06:21,120 --> 00:06:21,960
of VMs

107
00:06:21,960 --> 00:06:25,909
is the same and we should care about

108
00:06:26,990 --> 00:06:31,860
bugs in any software which manages our

109
00:06:31,860 --> 00:06:36,720
virtual machines or runs it so how to do

110
00:06:36,720 --> 00:06:41,889
that and how to use the concept of

111
00:06:41,889 --> 00:06:43,719
continue rising virtual machines in the

112
00:06:43,719 --> 00:06:46,030
cloud environments there are two most

113
00:06:46,030 --> 00:06:49,300
popular ways first of them is to put

114
00:06:49,300 --> 00:06:51,490
every qmo process in the separate

115
00:06:51,490 --> 00:06:54,639
container and the second one is to just

116
00:06:54,639 --> 00:06:58,289
put Liberty demon inside container and

117
00:06:58,289 --> 00:07:03,669
have mana qmo processes inside that one

118
00:07:03,669 --> 00:07:10,060
container with liber8 in case of qmo in

119
00:07:10,060 --> 00:07:15,580
container we have in this case we have

120
00:07:15,580 --> 00:07:19,860
some hosts I'm not we have two or more

121
00:07:19,860 --> 00:07:24,099
qmo containers and which run the virtual

122
00:07:24,099 --> 00:07:28,840
machine and the two most known examples

123
00:07:28,840 --> 00:07:34,839
of cloud systems which are using that

124
00:07:34,839 --> 00:07:37,930
approach first of them is Borg so Google

125
00:07:37,930 --> 00:07:40,689
Borg internally for virtualization is

126
00:07:40,689 --> 00:07:44,949
using containers and this putting each

127
00:07:44,949 --> 00:07:47,379
virtual machine beside another container

128
00:07:47,379 --> 00:07:51,099
and just scheduled them as the other

129
00:07:51,099 --> 00:07:54,729
containers and also Ranger OS has a

130
00:07:54,729 --> 00:07:58,330
control plane for virtual machines and

131
00:07:58,330 --> 00:08:02,669
it's using exactly the same approach and

132
00:08:02,669 --> 00:08:07,779
they have a docker image for with qmo

133
00:08:07,779 --> 00:08:11,310
you can you can even just pull it and

134
00:08:11,310 --> 00:08:15,189
write in docker run Rancher VM something

135
00:08:15,189 --> 00:08:17,979
something else you have run in virtual

136
00:08:17,979 --> 00:08:23,560
machine and the advantage of that is

137
00:08:23,560 --> 00:08:29,860
that we don't rely on any other tool for

138
00:08:29,860 --> 00:08:31,990
managing this lifecycle at the lifecycle

139
00:08:31,990 --> 00:08:35,799
of VM and if we for example should dump

140
00:08:35,799 --> 00:08:38,769
devi empty queue amma process jettison

141
00:08:38,769 --> 00:08:41,789
goes down and for docker or any

142
00:08:41,789 --> 00:08:45,399
container runtime system mmm it's just

143
00:08:45,399 --> 00:08:49,570
closed it's just a shutdown of container

144
00:08:49,570 --> 00:08:54,470
and then in the same way you Burnett

145
00:08:54,470 --> 00:08:57,680
and the other container cluster systems

146
00:08:57,680 --> 00:09:01,670
see that fact but there are two

147
00:09:01,670 --> 00:09:04,900
disadvantages the first of them is that

148
00:09:04,900 --> 00:09:08,450
you have to somehow manage the images so

149
00:09:08,450 --> 00:09:13,790
if you have kubernetes environment in

150
00:09:13,790 --> 00:09:16,370
which you would like to run the

151
00:09:16,370 --> 00:09:19,870
containers with VMs you need to somehow

152
00:09:19,870 --> 00:09:26,720
provide the Kiko or roll images and if

153
00:09:26,720 --> 00:09:29,540
you are developing such a solution you

154
00:09:29,540 --> 00:09:32,240
need to somehow provide the image

155
00:09:32,240 --> 00:09:35,690
service for that and you have to put

156
00:09:35,690 --> 00:09:37,730
your own efforts on providing the

157
00:09:37,730 --> 00:09:42,010
external storage and play with qmo

158
00:09:42,010 --> 00:09:46,160
options in case of clifford in container

159
00:09:46,160 --> 00:09:51,230
we assume that every node in the cloud

160
00:09:51,230 --> 00:09:54,590
is running one level container so in

161
00:09:54,590 --> 00:09:57,140
case of cube entities it could be daemon

162
00:09:57,140 --> 00:10:02,240
set and there are a lot of human

163
00:10:02,240 --> 00:10:06,290
children of liberal libertage as their

164
00:10:06,290 --> 00:10:11,360
lives their life cycle and the most all

165
00:10:11,360 --> 00:10:14,540
examples of that are the the most known

166
00:10:14,540 --> 00:10:17,090
example is OpenStack Cola project which

167
00:10:17,090 --> 00:10:20,720
I mentioned on the introduction of

168
00:10:20,720 --> 00:10:24,290
myself so it's project which contain

169
00:10:24,290 --> 00:10:27,080
arises the OpenStack at they also have

170
00:10:27,080 --> 00:10:29,240
an option to run open stack on top of

171
00:10:29,240 --> 00:10:32,480
kubernetes and there is also valid which

172
00:10:32,480 --> 00:10:37,280
is a project that aims to run which aims

173
00:10:37,280 --> 00:10:42,280
to make a VM a native citizen of

174
00:10:42,280 --> 00:10:47,450
kubernetes so it's implementing the VM

175
00:10:47,450 --> 00:10:51,200
pot feature and there is also a cube

176
00:10:51,200 --> 00:10:56,780
root project which the guys developing

177
00:10:56,780 --> 00:10:59,780
developing it's had a presentation

178
00:10:59,780 --> 00:11:02,930
yesterday and the virtual machine and

179
00:11:02,930 --> 00:11:04,310
infrastructure-as-a-service

180
00:11:04,310 --> 00:11:07,070
track

181
00:11:07,070 --> 00:11:11,510
and yeah main advantages is that Liberty

182
00:11:11,510 --> 00:11:13,880
provides an abstraction for managing

183
00:11:13,880 --> 00:11:17,600
images it manages the remote storage and

184
00:11:17,600 --> 00:11:20,720
it's much easier than dealing with cuomo

185
00:11:20,720 --> 00:11:25,040
directly but on the other hand you need

186
00:11:25,040 --> 00:11:31,040
to somehow interact with that libvirt

187
00:11:31,040 --> 00:11:33,700
which is itself a layer of abstraction

188
00:11:33,700 --> 00:11:37,910
so it's not very easy to decide whether

189
00:11:37,910 --> 00:11:42,500
we go with qm wobble or libvirt there

190
00:11:42,500 --> 00:11:44,240
are some projects which is the first

191
00:11:44,240 --> 00:11:46,160
approach there are some projects which

192
00:11:46,160 --> 00:11:49,209
are using the approach of liberal tents

193
00:11:49,209 --> 00:11:53,149
we may see in the future which approach

194
00:11:53,149 --> 00:11:57,920
was better and which layer of

195
00:11:57,920 --> 00:12:02,560
abstraction provided more problems so

196
00:12:02,560 --> 00:12:07,370
how exactly it relates the clouds as I

197
00:12:07,370 --> 00:12:10,209
mentioned where that is a project which

198
00:12:10,209 --> 00:12:15,770
uses waves in kubernetes and how it do

199
00:12:15,770 --> 00:12:19,279
that it uses the container random

200
00:12:19,279 --> 00:12:22,450
interface there was a presentation today

201
00:12:22,450 --> 00:12:27,410
explaining what it is but I will explain

202
00:12:27,410 --> 00:12:29,839
it quickly quickly

203
00:12:29,839 --> 00:12:33,020
so CRI is a mechanism in cuba Nettie's

204
00:12:33,020 --> 00:12:37,180
which allows you to write your own

205
00:12:37,180 --> 00:12:40,279
server which provides some run a runtime

206
00:12:40,279 --> 00:12:42,890
service to kubernetes by the photo

207
00:12:42,890 --> 00:12:45,920
kubernetes uses docker so if you run

208
00:12:45,920 --> 00:12:51,310
some port on kubernetes you receive a

209
00:12:51,310 --> 00:12:54,680
bunch of docker containers running

210
00:12:54,680 --> 00:12:57,620
somewhere in the cluster by sierra you

211
00:12:57,620 --> 00:13:00,440
can replace that with any kind of

212
00:13:00,440 --> 00:13:05,570
runtime system you want this is how it

213
00:13:05,570 --> 00:13:11,480
looks or in notes in kubernetes there is

214
00:13:11,480 --> 00:13:14,630
a cubelet which is daemon managing a

215
00:13:14,630 --> 00:13:17,720
lifecycle of the container and mode so

216
00:13:17,720 --> 00:13:20,350
it's only receives information

217
00:13:20,350 --> 00:13:23,140
from keep scheduler what it has to do

218
00:13:23,140 --> 00:13:27,870
and the most not example of this Eri

219
00:13:27,870 --> 00:13:33,520
service is rocket lat which uses rocket

220
00:13:33,520 --> 00:13:36,640
but for virtual machines you can also

221
00:13:36,640 --> 00:13:41,080
use CRI and just by getting a definition

222
00:13:41,080 --> 00:13:44,500
of thoughts run the virtual machine and

223
00:13:44,500 --> 00:13:49,800
interact with liber8 instead of rockets

224
00:13:50,430 --> 00:13:56,260
so these things work but do we really

225
00:13:56,260 --> 00:13:59,980
need such an inception it may be sounds

226
00:13:59,980 --> 00:14:03,700
crazy because why do we need to run

227
00:14:03,700 --> 00:14:08,830
virtual machine is inside container but

228
00:14:08,830 --> 00:14:13,500
I think we need this inception because

229
00:14:13,500 --> 00:14:17,620
the goal of Cuban Nettie's and container

230
00:14:17,620 --> 00:14:21,640
management system are is to be as small

231
00:14:21,640 --> 00:14:25,660
as possible and do not implement a more

232
00:14:25,660 --> 00:14:28,300
complicated logic instead of that they

233
00:14:28,300 --> 00:14:31,140
want to give the people the opportunity

234
00:14:31,140 --> 00:14:33,760
to create this logic itself a good

235
00:14:33,760 --> 00:14:37,930
example is concept of operators there

236
00:14:37,930 --> 00:14:40,510
were a bunch of talks in this truck

237
00:14:40,510 --> 00:14:43,390
about an operator about operators and

238
00:14:43,390 --> 00:14:48,850
there they are using kubernetes but they

239
00:14:48,850 --> 00:14:52,480
prevent they prevent kubernetes itself

240
00:14:52,480 --> 00:14:58,450
of being too big so that's why cuber

241
00:14:58,450 --> 00:15:00,990
Nettie's community doesn't implement

242
00:15:00,990 --> 00:15:07,470
logic of upgrading stateful applications

243
00:15:07,470 --> 00:15:12,190
except the accept the concept of state

244
00:15:12,190 --> 00:15:15,100
who says but that's why people are

245
00:15:15,100 --> 00:15:19,300
moving more complicated deployment logic

246
00:15:19,300 --> 00:15:22,300
to outside things like operators and I

247
00:15:22,300 --> 00:15:24,610
think that we should see any solution

248
00:15:24,610 --> 00:15:28,540
trying to run a virtual machine inside

249
00:15:28,540 --> 00:15:31,600
container as a solution of such kind so

250
00:15:31,600 --> 00:15:33,670
we are just using the simple

251
00:15:33,670 --> 00:15:39,190
of kubernetes to achieve something more

252
00:15:39,190 --> 00:15:43,600
complicated and we just add one layer of

253
00:15:43,600 --> 00:15:47,340
obstruction to achieve something which

254
00:15:47,340 --> 00:15:52,620
gives profits because I think that

255
00:15:52,620 --> 00:15:56,400
separation between VM clouds and

256
00:15:56,400 --> 00:16:00,100
container clouds it's a huge problem

257
00:16:00,100 --> 00:16:03,250
which some which even somehow may

258
00:16:03,250 --> 00:16:05,920
prevent some people from thinking about

259
00:16:05,920 --> 00:16:09,400
using kubernetes if they are using a lot

260
00:16:09,400 --> 00:16:13,320
of VMs and have an instructor structure

261
00:16:13,320 --> 00:16:20,730
acting with just virtual machines so

262
00:16:20,730 --> 00:16:23,860
unfortunately I cannot show a demo

263
00:16:23,860 --> 00:16:30,420
because I have no adapter for my laptop

264
00:16:32,430 --> 00:16:37,260
yes BC so we try to be before the talk

265
00:16:37,260 --> 00:16:41,980
unfotunately I cannot show it demo on my

266
00:16:41,980 --> 00:16:48,250
laptop we have some time so I can there

267
00:16:48,250 --> 00:16:52,840
is a one demo on github over that how it

268
00:16:52,840 --> 00:16:53,650
works

269
00:16:53,650 --> 00:16:56,490
so

270
00:17:05,260 --> 00:17:08,260
okay

271
00:17:14,700 --> 00:17:24,579
you see everything okay it's maybe that

272
00:17:24,579 --> 00:17:31,090
would be better so in this demo first of

273
00:17:31,090 --> 00:17:36,120
all we run the vert led server and then

274
00:17:36,120 --> 00:17:41,290
start the local kubernetes cluster and

275
00:17:41,290 --> 00:17:45,520
after that we have a definition of pot I

276
00:17:45,520 --> 00:17:53,620
will try to stop it here yeah so this is

277
00:17:53,620 --> 00:17:58,840
just an usual pot where we define a

278
00:17:58,840 --> 00:18:01,660
container named Fedora it uses the

279
00:18:01,660 --> 00:18:05,740
fedora image which is served by some

280
00:18:05,740 --> 00:18:11,910
high HTTP server it's just a nickel oh

281
00:18:12,870 --> 00:18:20,520
maybe that will work so display port

282
00:18:21,599 --> 00:18:26,999
and now it's the CBC I'm not I'm dubious

283
00:18:26,999 --> 00:18:30,159
this didn't work before

284
00:18:30,159 --> 00:18:35,549
oh it's just DisplayPort let's display

285
00:18:37,590 --> 00:18:47,200
okay so yeah yet another try off say

286
00:18:47,200 --> 00:18:55,149
week my demo okay so that's the

287
00:18:55,149 --> 00:18:58,779
definitional pot and we can just create

288
00:18:58,779 --> 00:19:05,259
the spots by cube City air create and it

289
00:19:05,259 --> 00:19:11,820
will work let me continue until more and

290
00:19:11,820 --> 00:19:14,259
it takes some time to run the virtual

291
00:19:14,259 --> 00:19:17,200
machine that's first why for some time

292
00:19:17,200 --> 00:19:22,029
the container is in creating state knots

293
00:19:22,029 --> 00:19:27,190
after 14 seconds it's became running now

294
00:19:27,190 --> 00:19:34,059
we can get into the container so that's

295
00:19:34,059 --> 00:19:39,099
why there is docker compose exactly Bert

296
00:19:39,099 --> 00:19:42,129
brush list so the leopard is the name of

297
00:19:42,129 --> 00:19:49,359
container which runs liberal and yeah we

298
00:19:49,359 --> 00:19:52,989
can also access a console no kind of

299
00:19:52,989 --> 00:19:56,759
container and rights revert

300
00:20:02,750 --> 00:20:10,520
okay here's just slow typing okay and I

301
00:20:10,520 --> 00:20:15,580
can also show you I have a project just

302
00:20:15,580 --> 00:20:21,970
called da curly beard which is very tiny

303
00:20:21,970 --> 00:20:25,730
docker environment for putting liberated

304
00:20:25,730 --> 00:20:33,789
container just to not make docker run

305
00:20:33,789 --> 00:20:37,220
comments very long I noted this

306
00:20:37,220 --> 00:20:40,400
definition insights docker compose and

307
00:20:40,400 --> 00:20:46,030
file so I exposed part of libvirt here

308
00:20:46,030 --> 00:20:49,549
there are the necessary mounts I

309
00:20:49,549 --> 00:20:54,200
mentioned in my presentation and there

310
00:20:54,200 --> 00:20:56,870
are also volumes for libvirt were the

311
00:20:56,870 --> 00:21:04,220
actual instances and disks for livers

312
00:21:04,220 --> 00:21:07,750
are stored so we can just use named

313
00:21:07,750 --> 00:21:16,690
volumes for that and I have also here a

314
00:21:16,690 --> 00:21:23,570
start script which wraps libvirt here I

315
00:21:23,570 --> 00:21:26,570
do some magic with detecting whether

316
00:21:26,570 --> 00:21:30,190
which type of processor we haven't which

317
00:21:30,190 --> 00:21:37,190
KVM module I have to load and also some

318
00:21:37,190 --> 00:21:40,100
necessary chmod CH routes for

319
00:21:40,100 --> 00:21:44,150
configuration files that's because if

320
00:21:44,150 --> 00:21:47,659
you mount some fire to the container in

321
00:21:47,659 --> 00:21:51,950
docker there is no way to define to

322
00:21:51,950 --> 00:21:55,880
which user it should belong and what's

323
00:21:55,880 --> 00:22:00,500
the whatever the permissions for the

324
00:22:00,500 --> 00:22:04,340
file so if we are mounting this

325
00:22:04,340 --> 00:22:07,490
configuration files here we need to CH

326
00:22:07,490 --> 00:22:13,480
more than inside start script

327
00:22:13,590 --> 00:22:16,800
and the configuration of liberals of q

328
00:22:16,800 --> 00:22:20,550
and q mo is very small so for liber8 we

329
00:22:20,550 --> 00:22:24,990
just wants to make it listen on the

330
00:22:24,990 --> 00:22:28,970
sockets so we can contact with libvirt

331
00:22:28,970 --> 00:22:31,980
outside the container to not have to

332
00:22:31,980 --> 00:22:34,490
enter the container every time and just

333
00:22:34,490 --> 00:22:39,260
is be able to use verge on the host or

334
00:22:39,260 --> 00:22:41,610
even invert them in a graphic of

335
00:22:41,610 --> 00:22:42,300
virt-manager

336
00:22:42,300 --> 00:22:49,080
on the host and we have also here no

337
00:22:49,080 --> 00:22:52,320
config which defines the here's our

338
00:22:52,320 --> 00:22:58,470
group and that's that example i

339
00:22:58,470 --> 00:23:03,060
mentioned also about Qbert project so

340
00:23:03,060 --> 00:23:05,510
the definite so the difference between

341
00:23:05,510 --> 00:23:10,380
birth and Qbert is that benefit as a CSO

342
00:23:10,380 --> 00:23:14,370
on the demo uses a pop definition for

343
00:23:14,370 --> 00:23:17,640
running the virtual machines Qbert uses

344
00:23:17,640 --> 00:23:22,370
third party resources for that not so

345
00:23:22,370 --> 00:23:26,160
I'm not going to explain it in details

346
00:23:26,160 --> 00:23:32,250
because Q Bert was explains yesterday on

347
00:23:32,250 --> 00:23:34,700
the talk

348
00:23:44,160 --> 00:23:47,720
let's go back to pre presentation that's

349
00:23:47,720 --> 00:23:50,669
unfortunately all I wanted to to show

350
00:23:50,669 --> 00:23:53,820
I'm sorry again for not showing you live

351
00:23:53,820 --> 00:23:56,370
demo from my laptop we have any

352
00:23:56,370 --> 00:24:14,250
questions yes so the use case is okay so

353
00:24:14,250 --> 00:24:17,870
the question was why do I even want to

354
00:24:17,870 --> 00:24:21,090
run rahama she's in the containerized

355
00:24:21,090 --> 00:24:24,480
environments and what's the use case for

356
00:24:24,480 --> 00:24:29,789
that use case for that is I think the

357
00:24:29,789 --> 00:24:32,789
migration between virtual machines in

358
00:24:32,789 --> 00:24:34,890
containers so some company which was

359
00:24:34,890 --> 00:24:37,380
using virtual machines for a long time

360
00:24:37,380 --> 00:24:40,289
thinks about kubernetes doesn't really

361
00:24:40,289 --> 00:24:48,150
want to manage to separate clouds for a

362
00:24:48,150 --> 00:24:51,240
long future and they want to be able to

363
00:24:51,240 --> 00:24:54,690
use keyboard Nettie's but on the at the

364
00:24:54,690 --> 00:24:57,650
same time provides some option for

365
00:24:57,650 --> 00:25:00,570
virtual machine a traditional virtual

366
00:25:00,570 --> 00:25:03,720
machine users without necessity of

367
00:25:03,720 --> 00:25:07,230
maintaining the virtual machine oriented

368
00:25:07,230 --> 00:25:11,130
cloud I realized that it's not a problem

369
00:25:11,130 --> 00:25:15,570
in case of a WS or clouds which are not

370
00:25:15,570 --> 00:25:19,380
managed by also but I think that you

371
00:25:19,380 --> 00:25:23,909
know using kubernetes as a main

372
00:25:23,909 --> 00:25:28,289
infrastructure without managing separate

373
00:25:28,289 --> 00:25:30,750
OpenStack for example without having

374
00:25:30,750 --> 00:25:32,970
eight roles in top of kubernetes or

375
00:25:32,970 --> 00:25:34,799
using something else like virtual for

376
00:25:34,799 --> 00:25:37,049
meter machine I think it's really

377
00:25:37,049 --> 00:25:39,480
simplifies things and that it's my

378
00:25:39,480 --> 00:25:41,400
assumption maybe I am wrong but that's

379
00:25:41,400 --> 00:25:46,530
the idea I have behind it

380
00:25:46,530 --> 00:25:48,450
this is very clearly here and dear to

381
00:25:48,450 --> 00:25:50,820
our hearts and four of us a lot of this

382
00:25:50,820 --> 00:25:52,860
work fits into our work and Crockett is

383
00:25:52,860 --> 00:25:54,510
our project and I spoke earlier today

384
00:25:54,510 --> 00:25:56,160
about operators like this kind of

385
00:25:56,160 --> 00:25:58,740
dovetails under that as well and you've

386
00:25:58,740 --> 00:26:00,120
touched on this a little but I want to

387
00:26:00,120 --> 00:26:01,530
make sure we draw it out one of the

388
00:26:01,530 --> 00:26:02,640
reasons why you would want to package

389
00:26:02,640 --> 00:26:04,950
virtual machines and in containers has

390
00:26:04,950 --> 00:26:06,240
little to do with what you think there

391
00:26:06,240 --> 00:26:15,450
was the execution isolation the

392
00:26:15,450 --> 00:26:17,130
convenience of packaging and

393
00:26:17,130 --> 00:26:19,260
distribution the ability to do

394
00:26:19,260 --> 00:26:21,810
verification on that package that's at

395
00:26:21,810 --> 00:26:24,420
the street can discretize package and

396
00:26:24,420 --> 00:26:26,250
most importantly to schedule it

397
00:26:26,250 --> 00:26:28,860
dynamically around grid compute

398
00:26:28,860 --> 00:26:30,840
resources with an orchestration system

399
00:26:30,840 --> 00:26:33,390
like kubernetes so the units of

400
00:26:33,390 --> 00:26:35,910
scheduling the thing we know how to move

401
00:26:35,910 --> 00:26:38,520
around between computers in these

402
00:26:38,520 --> 00:26:41,100
systems is a container not a virtual

403
00:26:41,100 --> 00:26:44,970
machine right so that is a whole other

404
00:26:44,970 --> 00:26:46,650
set of reasons why we would want to

405
00:26:46,650 --> 00:26:48,390
package virtual machines inside

406
00:26:48,390 --> 00:26:50,700
containers is to give a handle to

407
00:26:50,700 --> 00:26:53,130
orchestration systems on legacy

408
00:26:53,130 --> 00:26:55,350
applications that that exist at this

409
00:26:55,350 --> 00:26:57,480
time already in virtual machines you get

410
00:26:57,480 --> 00:26:58,980
the container around them as a package

411
00:26:58,980 --> 00:27:00,600
and now you can schedule them

412
00:27:00,600 --> 00:27:03,060
dynamically on on your cluster resources

413
00:27:03,060 --> 00:27:04,350
the way you can containerized

414
00:27:04,350 --> 00:27:07,740
applications which certainly he touched

415
00:27:07,740 --> 00:27:09,270
on but I want to make sure to kind of

416
00:27:09,270 --> 00:27:28,800
bring out and put a nail on top for now

417
00:27:28,800 --> 00:27:33,120
it doesn't but both effortless and cubed

418
00:27:33,120 --> 00:27:37,250
words want to address it somehow then

419
00:27:37,250 --> 00:27:40,470
I'm sorry again I probably I keep

420
00:27:40,470 --> 00:27:42,590
forgetting about it the question was

421
00:27:42,590 --> 00:27:46,640
whether we want to address more

422
00:27:46,640 --> 00:27:50,820
complicated operations for each Ramos is

423
00:27:50,820 --> 00:27:53,780
like life immigration for example and

424
00:27:53,780 --> 00:27:58,390
that isn't implemented yet I think in

425
00:27:58,390 --> 00:28:03,760
of projects but the most probably we

426
00:28:03,760 --> 00:28:08,050
will need external controller similar to

427
00:28:08,050 --> 00:28:09,670
operator which will consume the

428
00:28:09,670 --> 00:28:14,770
third-party resource called live

429
00:28:14,770 --> 00:28:18,270
migration or something like that and

430
00:28:18,270 --> 00:28:27,250
call live with API underneath what about

431
00:28:27,250 --> 00:28:38,710
scaling so the question was what about

432
00:28:38,710 --> 00:28:43,600
the other operations like scaling over

433
00:28:43,600 --> 00:28:49,630
to our machines and to be honest I

434
00:28:49,630 --> 00:28:56,950
didn't think about it yet and yes but

435
00:28:56,950 --> 00:29:00,280
life I probably liked migration would be

436
00:29:00,280 --> 00:29:02,860
the first you know more complicated

437
00:29:02,860 --> 00:29:04,600
feature of virtual machines which will

438
00:29:04,600 --> 00:29:08,470
be total Bart project and it's I think

439
00:29:08,470 --> 00:29:11,770
designs now and maybe implemented in the

440
00:29:11,770 --> 00:29:17,670
near future okay

441
00:29:22,630 --> 00:30:12,520
like this because unless you so the

442
00:30:12,520 --> 00:30:17,560
question was the question the that Aziz

443
00:30:17,560 --> 00:30:21,310
was that putting open or open stuck

444
00:30:21,310 --> 00:30:23,080
inside kubernetes doesn't simplify

445
00:30:23,080 --> 00:30:25,420
things because you still have Nova you

446
00:30:25,420 --> 00:30:28,720
still have heat and a lot of components

447
00:30:28,720 --> 00:30:31,690
and it doesn't really simplify things

448
00:30:31,690 --> 00:30:36,640
for the operators I only provided Cola

449
00:30:36,640 --> 00:30:39,160
as an example worklet project isn't

450
00:30:39,160 --> 00:30:44,860
using OpenStack at all so I just wanted

451
00:30:44,860 --> 00:30:47,140
to make this presentation you like

452
00:30:47,140 --> 00:30:49,420
objective don't promote a single

453
00:30:49,420 --> 00:30:53,920
solution but yeah if you want to throw a

454
00:30:53,920 --> 00:30:58,500
throw out OpenStack er very sweet

455
00:30:58,670 --> 00:31:02,310
okay so part of why we invested a lot of

456
00:31:02,310 --> 00:31:05,580
time and effort and and and friends of

457
00:31:05,580 --> 00:31:07,770
ours in the community and contractors

458
00:31:07,770 --> 00:31:09,150
and other folks we've worked with invest

459
00:31:09,150 --> 00:31:11,930
a lot of time and effort specifically in

460
00:31:11,930 --> 00:31:15,420
porting OpenStack the OpenStack control

461
00:31:15,420 --> 00:31:18,090
plane into containers and running it as

462
00:31:18,090 --> 00:31:20,280
a kubernetes application is actually

463
00:31:20,280 --> 00:31:22,740
that our findings are quite contrary to

464
00:31:22,740 --> 00:31:26,430
what your suspicions are by unifying

465
00:31:26,430 --> 00:31:28,440
around a single management interface

466
00:31:28,440 --> 00:31:31,170
that is the kubernetes api by deploying

467
00:31:31,170 --> 00:31:33,900
OpenStack which is just a bunch of

468
00:31:33,900 --> 00:31:36,600
applications as wonderful as it seems

469
00:31:36,600 --> 00:31:38,370
and as magical as it seems because it's

470
00:31:38,370 --> 00:31:40,200
a VM management system all it really is

471
00:31:40,200 --> 00:31:43,770
is a big stack of Python apps so we put

472
00:31:43,770 --> 00:31:45,150
them in containers we've run them on

473
00:31:45,150 --> 00:31:46,650
kubernetes we schedule them with

474
00:31:46,650 --> 00:31:50,340
kubernetes we recover from failure which

475
00:31:50,340 --> 00:31:51,840
are quite frequent in those Python apps

476
00:31:51,840 --> 00:31:55,470
with kubernetes and actually we've found

477
00:31:55,470 --> 00:31:57,570
and and I think there's there's a fair

478
00:31:57,570 --> 00:32:00,000
amount of stuff on the core OS comm blog

479
00:32:00,000 --> 00:32:03,150
about the the project between Koro asked

480
00:32:03,150 --> 00:32:05,820
in bulk Intel the rocket open source

481
00:32:05,820 --> 00:32:07,500
project and all of the pieces that fit

482
00:32:07,500 --> 00:32:10,170
into to the OpenStack port for

483
00:32:10,170 --> 00:32:14,430
kubernetes the finding actually is that

484
00:32:14,430 --> 00:32:18,020
we reduce the administrative overhead by

485
00:32:18,020 --> 00:32:20,820
unifying around a single cluster

486
00:32:20,820 --> 00:32:23,190
management interface instead of trying

487
00:32:23,190 --> 00:32:25,560
to deploy OpenStack applications in an

488
00:32:25,560 --> 00:32:28,770
open stack silo outside of kubernetes so

489
00:32:28,770 --> 00:32:32,820
that's like the aims there to to answer

490
00:32:32,820 --> 00:32:35,280
the speculation that that adds to

491
00:32:35,280 --> 00:32:36,900
complexity and what only to make things

492
00:32:36,900 --> 00:32:38,190
more difficult all I could do is

493
00:32:38,190 --> 00:32:40,110
encourage you to grab the stuff and try

494
00:32:40,110 --> 00:32:42,210
it out and see if if you find that

495
00:32:42,210 --> 00:32:44,750
that's true

496
00:32:55,450 --> 00:33:00,200
okay so tenant application payloads the

497
00:33:00,200 --> 00:33:01,880
folks you're serving they still consume

498
00:33:01,880 --> 00:33:03,919
OpenStack api's and schedule their

499
00:33:03,919 --> 00:33:05,929
virtual machines through the OpenStack

500
00:33:05,929 --> 00:33:14,390
facilities well actually let me back up

501
00:33:14,390 --> 00:33:17,600
for a minute there it is not necessarily

502
00:33:17,600 --> 00:33:20,450
true that customer VMs are running

503
00:33:20,450 --> 00:33:22,880
inside containers when we're kind of

504
00:33:22,880 --> 00:33:24,500
talking about two separate things here

505
00:33:24,500 --> 00:33:26,360
and would blended the issue together a

506
00:33:26,360 --> 00:33:29,240
little bit the talk is about running VMs

507
00:33:29,240 --> 00:33:32,090
inside containers the OpenStack work

508
00:33:32,090 --> 00:33:34,880
which relates to it and encompasses it

509
00:33:34,880 --> 00:33:36,950
to run parts of the control plane in

510
00:33:36,950 --> 00:33:39,169
terms of containers does not necessarily

511
00:33:39,169 --> 00:33:41,870
imply that your end user your customer

512
00:33:41,870 --> 00:33:45,350
VMs are packaged in containers they are

513
00:33:45,350 --> 00:33:48,140
VMs consumed from OpenStack scheduled

514
00:33:48,140 --> 00:33:53,419
with OpenStack but running on high on

515
00:33:53,419 --> 00:33:55,340
top of the on top of the hypervisor at

516
00:33:55,340 --> 00:33:59,299
least in being virtual machines yes so

517
00:33:59,299 --> 00:34:01,280
is that a better answer and then that

518
00:34:01,280 --> 00:34:04,750
gets more than no yeah buts

519
00:34:18,139 --> 00:34:25,260
because no no I think that doesn't

520
00:34:25,260 --> 00:34:28,379
relate if you want to use the concept of

521
00:34:28,379 --> 00:34:31,109
tenants for VMs like in OpenStack you

522
00:34:31,109 --> 00:34:35,719
can run open stuck on the kubernetes and

523
00:34:35,719 --> 00:34:38,909
just provides the OpenStack control

524
00:34:38,909 --> 00:34:42,000
plane to the end user and thread the

525
00:34:42,000 --> 00:34:45,980
whole kubernetes stack running this

526
00:34:45,980 --> 00:34:52,520
thing on for your internal operators so

527
00:34:57,740 --> 00:35:00,750
that's why I wanted to put the things

528
00:35:00,750 --> 00:35:03,720
neutral if someone needs OpenStack I

529
00:35:03,720 --> 00:35:06,119
think they should be free to use almost

530
00:35:06,119 --> 00:35:09,569
like if not then not different people

531
00:35:09,569 --> 00:35:12,140
have different needs

532
00:35:12,140 --> 00:35:15,319
thank you

