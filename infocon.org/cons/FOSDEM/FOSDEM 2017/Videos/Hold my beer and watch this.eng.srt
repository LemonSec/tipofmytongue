1
00:00:05,640 --> 00:00:09,480
so uh hold my beer and watch this this

2
00:00:09,480 --> 00:00:11,250
was a challenge puts me by an old friend

3
00:00:11,250 --> 00:00:12,720
who said you should you should submit

4
00:00:12,720 --> 00:00:16,020
titles or submit talks entitled this and

5
00:00:16,020 --> 00:00:16,950
I said well what should they talk me

6
00:00:16,950 --> 00:00:18,090
about and he said I don't care just

7
00:00:18,090 --> 00:00:20,130
always submit the talks like that so I

8
00:00:20,130 --> 00:00:21,750
had one at London for a workshop but I

9
00:00:21,750 --> 00:00:23,550
wasn't able to attend so FOSDEM gets to

10
00:00:23,550 --> 00:00:25,430
hear this and then maybe some other ones

11
00:00:25,430 --> 00:00:28,560
so unfortunately too I also was I was

12
00:00:28,560 --> 00:00:30,689
writing slides right up until like two

13
00:00:30,689 --> 00:00:33,030
minutes ago so I didn't get a beer so I

14
00:00:33,030 --> 00:00:34,470
don't have a beer for anybody to hold so

15
00:00:34,470 --> 00:00:36,720
if anybody wants to pass one up

16
00:00:36,720 --> 00:00:41,700
that's so let's see so Who am I

17
00:00:41,700 --> 00:00:43,710
my name is stephen little but i also

18
00:00:43,710 --> 00:00:45,450
respond to steve on because that's how

19
00:00:45,450 --> 00:00:46,110
it's spelled

20
00:00:46,110 --> 00:00:47,760
and all the russians at work pronounced

21
00:00:47,760 --> 00:00:48,989
that way so whatever just call me

22
00:00:48,989 --> 00:00:53,670
Stephen in 2005 I wrote moose in 2010 I

23
00:00:53,670 --> 00:00:56,100
started a project called ap5 mop which

24
00:00:56,100 --> 00:00:58,020
was an attempt to put mousse into the

25
00:00:58,020 --> 00:00:59,190
pro-- core i've spoken about a

26
00:00:59,190 --> 00:01:01,050
previously at foz dam and at other

27
00:01:01,050 --> 00:01:03,600
workshops and Perl things like that it's

28
00:01:03,600 --> 00:01:06,180
been a long time running and there's

29
00:01:06,180 --> 00:01:08,670
been multiple different versions but now

30
00:01:08,670 --> 00:01:12,030
I'm done so that's what this talk will

31
00:01:12,030 --> 00:01:13,530
actually be about we'll talk about the

32
00:01:13,530 --> 00:01:14,580
different pieces that I've built for

33
00:01:14,580 --> 00:01:16,200
this and then I'm putting them out to

34
00:01:16,200 --> 00:01:17,940
the community to test them play with

35
00:01:17,940 --> 00:01:20,009
them experiment with them see where it

36
00:01:20,009 --> 00:01:23,009
goes and hopefully then in 2020 I will

37
00:01:23,009 --> 00:01:25,560
profit from this in some way but we'll

38
00:01:25,560 --> 00:01:28,250
see assuming the world is still around

39
00:01:28,250 --> 00:01:30,810
so anyway so people I've mopped through

40
00:01:30,810 --> 00:01:32,810
the ages had a bunch of different

41
00:01:32,810 --> 00:01:34,709
iterations the first one was obviously

42
00:01:34,709 --> 00:01:36,959
called p5 mop it ended up being over

43
00:01:36,959 --> 00:01:39,660
complicated mess there was a p5 mini mop

44
00:01:39,660 --> 00:01:41,130
which was an attempt to do a small

45
00:01:41,130 --> 00:01:42,599
version of it that we could bootstrap

46
00:01:42,599 --> 00:01:44,130
the first version with so we could break

47
00:01:44,130 --> 00:01:46,110
the mop inside the mop and then it just

48
00:01:46,110 --> 00:01:47,539
got really really messy and complicated

49
00:01:47,539 --> 00:01:50,970
didn't work I took a year off and sort

50
00:01:50,970 --> 00:01:55,170
of like let my brain refry p5 meme opera

51
00:01:55,170 --> 00:01:57,179
ducks was another yet another attempt

52
00:01:57,179 --> 00:02:00,119
that one ended in just a giant mess of

53
00:02:00,119 --> 00:02:03,149
excess code which which led me to write

54
00:02:03,149 --> 00:02:05,610
P FOP P v mop excess which pretty much

55
00:02:05,610 --> 00:02:07,770
just seg faulted really reliably and did

56
00:02:07,770 --> 00:02:10,919
nothing else well I'm not a C programmer

57
00:02:10,919 --> 00:02:14,579
and so finally this was the last version

58
00:02:14,579 --> 00:02:17,800
of it so again seriously what the

59
00:02:17,800 --> 00:02:20,020
and that one actually proved fruitful it

60
00:02:20,020 --> 00:02:21,490
took a little while I had to refine it

61
00:02:21,490 --> 00:02:22,840
and it's been it's been I've been

62
00:02:22,840 --> 00:02:23,920
playing with it for about a year and a

63
00:02:23,920 --> 00:02:27,700
half but it's essentially I what I what

64
00:02:27,700 --> 00:02:30,130
I've done in the last maybe month or so

65
00:02:30,130 --> 00:02:32,410
cuz I've taken all the pieces and I've

66
00:02:32,410 --> 00:02:34,480
split them up and part of the reason I

67
00:02:34,480 --> 00:02:37,000
split them up was I wanted to be able to

68
00:02:37,000 --> 00:02:39,550
I actually wanted to be able to use some

69
00:02:39,550 --> 00:02:42,040
of these parts and not have all of them

70
00:02:42,040 --> 00:02:45,370
so some of these parts require 5:22 some

71
00:02:45,370 --> 00:02:47,530
of these parts require 5:14 some of

72
00:02:47,530 --> 00:02:49,180
these parts require 5/10 some of these

73
00:02:49,180 --> 00:02:50,950
parts actually can are backwards

74
00:02:50,950 --> 00:02:54,370
compatible 25.6 so at work we mostly use

75
00:02:54,370 --> 00:02:56,050
modern pearls I work for booking comm

76
00:02:56,050 --> 00:02:58,570
we're mostly on 518 - and we're about to

77
00:02:58,570 --> 00:03:00,790
upgrade to 524 so don't really worry

78
00:03:00,790 --> 00:03:02,560
about these things but in my personal

79
00:03:02,560 --> 00:03:04,270
work I do a lot of stuff that I want to

80
00:03:04,270 --> 00:03:06,760
support across many versions so what I'm

81
00:03:06,760 --> 00:03:08,380
about to present to you is six different

82
00:03:08,380 --> 00:03:09,970
sea pen modules that when you put them

83
00:03:09,970 --> 00:03:11,500
all together you can get yourself a very

84
00:03:11,500 --> 00:03:14,140
nice modern looking pearl object system

85
00:03:14,140 --> 00:03:16,030
that uses all the new bells and whistles

86
00:03:16,030 --> 00:03:17,770
you'll see that at the very end but

87
00:03:17,770 --> 00:03:19,390
we're gonna start first with something

88
00:03:19,390 --> 00:03:20,890
that actually is backwards compatible to

89
00:03:20,890 --> 00:03:24,520
five five point six so I call this

90
00:03:24,520 --> 00:03:26,920
universal object it is on sea pen right

91
00:03:26,920 --> 00:03:30,070
now and what this essentially is aims to

92
00:03:30,070 --> 00:03:33,160
be is your your your core base class so

93
00:03:33,160 --> 00:03:35,170
if you have Java you have c-sharp you

94
00:03:35,170 --> 00:03:36,280
have things like this you get an object

95
00:03:36,280 --> 00:03:38,440
already that has a built-in constructor

96
00:03:38,440 --> 00:03:41,020
and understand certain things this was

97
00:03:41,020 --> 00:03:42,550
one of the things that mousse provided

98
00:03:42,550 --> 00:03:44,320
that people really liked was it was it's

99
00:03:44,320 --> 00:03:46,060
basically its own constructor so you

100
00:03:46,060 --> 00:03:47,320
could just say use mousse and then

101
00:03:47,320 --> 00:03:48,489
immediately you've got a new and you

102
00:03:48,489 --> 00:03:50,080
could make instances if your object and

103
00:03:50,080 --> 00:03:52,680
was very easy out of the box so this

104
00:03:52,680 --> 00:03:56,050
this module basically does that and what

105
00:03:56,050 --> 00:03:57,700
it does is it provides it provides a

106
00:03:57,700 --> 00:03:59,410
certain set of conventions about how to

107
00:03:59,410 --> 00:04:01,120
build your objects so the first

108
00:04:01,120 --> 00:04:03,040
convention is that you put all your slot

109
00:04:03,040 --> 00:04:04,780
information meaning all the information

110
00:04:04,780 --> 00:04:06,850
about the fields that you want to have

111
00:04:06,850 --> 00:04:09,940
inside your class you put that inside a

112
00:04:09,940 --> 00:04:12,400
package variable called uppercase has

113
00:04:12,400 --> 00:04:14,620
this is very similar to how you would do

114
00:04:14,620 --> 00:04:16,238
inheritance which would be with the at

115
00:04:16,238 --> 00:04:18,700
is ax okay so it's building on those

116
00:04:18,700 --> 00:04:19,870
same types of conventions and

117
00:04:19,870 --> 00:04:21,430
essentially you put in their key for the

118
00:04:21,430 --> 00:04:23,800
slot name and then a sub ref which will

119
00:04:23,800 --> 00:04:26,250
provide the initial version of that slot

120
00:04:26,250 --> 00:04:28,210
from there it also gives you other

121
00:04:28,210 --> 00:04:30,490
things it gives you new build args bless

122
00:04:30,490 --> 00:04:31,480
create rent

123
00:04:31,480 --> 00:04:33,280
upper slots and build demolish which

124
00:04:33,280 --> 00:04:36,220
I'll explain as we go here so has as I

125
00:04:36,220 --> 00:04:38,530
said was the slots so here's an example

126
00:04:38,530 --> 00:04:41,980
of that so we we want to inherit from an

127
00:04:41,980 --> 00:04:44,020
Universal object and then we define two

128
00:04:44,020 --> 00:04:46,990
slots X and the default value is a zero

129
00:04:46,990 --> 00:04:48,850
Y and the default value is a zero so a

130
00:04:48,850 --> 00:04:51,310
very simple point class and that's it we

131
00:04:51,310 --> 00:04:52,480
have a constructor now because we

132
00:04:52,480 --> 00:04:54,100
inherited it from universal object and

133
00:04:54,100 --> 00:04:55,540
all other fun stuff comes along with

134
00:04:55,540 --> 00:04:58,270
that so this is really just a convention

135
00:04:58,270 --> 00:04:59,950
there's no code that actually implements

136
00:04:59,950 --> 00:05:01,660
this there's just code that uses this

137
00:05:01,660 --> 00:05:04,300
and understands this convention this

138
00:05:04,300 --> 00:05:05,470
convention also works great for

139
00:05:05,470 --> 00:05:08,740
inheritance okay because of the way Perl

140
00:05:08,740 --> 00:05:10,240
does list flattening and stuff like that

141
00:05:10,240 --> 00:05:12,820
this point has is basically brings in

142
00:05:12,820 --> 00:05:15,160
all those fields and inherits them in

143
00:05:15,160 --> 00:05:16,540
there and we can actually tell the

144
00:05:16,540 --> 00:05:18,160
difference between an inherited field

145
00:05:18,160 --> 00:05:20,980
and a non inherited field because this

146
00:05:20,980 --> 00:05:23,260
sub if we actually dig under the covers

147
00:05:23,260 --> 00:05:25,270
a little bit we know what which package

148
00:05:25,270 --> 00:05:27,160
it was actually compiled in so we know

149
00:05:27,160 --> 00:05:29,320
that this was it was a slot for for

150
00:05:29,320 --> 00:05:31,930
package 3d and the other inherited ones

151
00:05:31,930 --> 00:05:33,700
are for point and we always can know

152
00:05:33,700 --> 00:05:34,840
that because we can always track that

153
00:05:34,840 --> 00:05:38,920
information so new is your it's very

154
00:05:38,920 --> 00:05:40,360
similar moves constructor you can take a

155
00:05:40,360 --> 00:05:42,160
hash ref or you can dig key value pairs

156
00:05:42,160 --> 00:05:43,600
also very similar to have perl 6 does

157
00:05:43,600 --> 00:05:46,870
things so we have that in place build

158
00:05:46,870 --> 00:05:48,520
args is also something that comes out of

159
00:05:48,520 --> 00:05:50,140
mousse which also we stole from Perl 6

160
00:05:50,140 --> 00:05:52,750
which is a way to essentially mangle the

161
00:05:52,750 --> 00:05:55,720
arguments on the way in so key value

162
00:05:55,720 --> 00:05:56,890
arguments are really simple really

163
00:05:56,890 --> 00:05:58,360
straightforward very easy to use and

164
00:05:58,360 --> 00:05:59,320
everything like that but they're not

165
00:05:59,320 --> 00:06:01,270
always the API you want sometimes you

166
00:06:01,270 --> 00:06:02,950
want a different API so sometimes you

167
00:06:02,950 --> 00:06:04,390
want to just pass in maybe to two

168
00:06:04,390 --> 00:06:06,310
integers and you want it to basically to

169
00:06:06,310 --> 00:06:08,620
inflate into the key value pairs so this

170
00:06:08,620 --> 00:06:09,940
is what you would do with build args if

171
00:06:09,940 --> 00:06:11,260
you've done any bill if you've ever used

172
00:06:11,260 --> 00:06:13,120
the build arc feature and moose or

173
00:06:13,120 --> 00:06:14,800
anything like that you should be really

174
00:06:14,800 --> 00:06:15,340
familiar

175
00:06:15,340 --> 00:06:17,380
basically I noticed that I only have two

176
00:06:17,380 --> 00:06:19,930
elements in my array and I say okay I'm

177
00:06:19,930 --> 00:06:21,700
going to assume that's that's my two two

178
00:06:21,700 --> 00:06:23,440
element form and I'm gonna turn it into

179
00:06:23,440 --> 00:06:25,270
this and return it or I'm just gonna

180
00:06:25,270 --> 00:06:26,950
call the super and all build args does

181
00:06:26,950 --> 00:06:29,110
is it mangles the arguments turns them

182
00:06:29,110 --> 00:06:31,030
into canonical representation of a hash

183
00:06:31,030 --> 00:06:35,070
ref which is key value pairs

184
00:06:35,170 --> 00:06:38,140
the next step is bless and create which

185
00:06:38,140 --> 00:06:40,360
is very tied to repper and slots so I

186
00:06:40,360 --> 00:06:42,550
want to explain this this is really

187
00:06:42,550 --> 00:06:45,270
where all the extension mechanisms are

188
00:06:45,270 --> 00:06:48,430
situated within this work so you pass

189
00:06:48,430 --> 00:06:51,190
your arms into new new calls bless bless

190
00:06:51,190 --> 00:06:53,290
is actually going to get that that

191
00:06:53,290 --> 00:06:55,540
canonical hash ref that bill darks just

192
00:06:55,540 --> 00:06:58,240
created so bless gets that first blesses

193
00:06:58,240 --> 00:07:01,180
responsibility is can we guess de bless

194
00:07:01,180 --> 00:07:03,580
yes that's really literally all does

195
00:07:03,580 --> 00:07:05,230
because it just calls create to

196
00:07:05,230 --> 00:07:07,630
construct your instance so most of your

197
00:07:07,630 --> 00:07:09,190
extension points if you wanted to do

198
00:07:09,190 --> 00:07:11,080
different kinds if you want to do array

199
00:07:11,080 --> 00:07:12,910
based instances or scalar ref instances

200
00:07:12,910 --> 00:07:16,270
or how you inherit from non universal

201
00:07:16,270 --> 00:07:18,220
object classes all that ends up being

202
00:07:18,220 --> 00:07:20,410
done and create so create can construct

203
00:07:20,410 --> 00:07:22,510
your instance however you want it calls

204
00:07:22,510 --> 00:07:24,670
wrapper which the default version just

205
00:07:24,670 --> 00:07:26,290
gives you back an empty hash ref so

206
00:07:26,290 --> 00:07:27,640
that's the representation this is all

207
00:07:27,640 --> 00:07:31,680
very perl six ish more my pro six people

208
00:07:31,680 --> 00:07:33,880
yeah is that so that's still in there

209
00:07:33,880 --> 00:07:36,640
it's still part of Perl six wrapper yeah

210
00:07:36,640 --> 00:07:39,070
okay so I just want to make sure

211
00:07:39,070 --> 00:07:42,280
so returns a hash graph and then it also

212
00:07:42,280 --> 00:07:44,170
called slots which gets that has

213
00:07:44,170 --> 00:07:46,450
information there so say you wanted to

214
00:07:46,450 --> 00:07:48,130
do all this but you don't like the fact

215
00:07:48,130 --> 00:07:49,990
that I'm storing the slot information it

216
00:07:49,990 --> 00:07:52,450
has override slots put it wherever you

217
00:07:52,450 --> 00:07:54,130
want I don't care because as long as

218
00:07:54,130 --> 00:07:55,840
that gets it all the other construction

219
00:07:55,840 --> 00:07:59,680
protocol bits they all fit together so

220
00:07:59,680 --> 00:08:01,960
as I said overwriting a class that

221
00:08:01,960 --> 00:08:03,700
itself doesn't use universal object so

222
00:08:03,700 --> 00:08:04,660
has its own different set of

223
00:08:04,660 --> 00:08:07,750
constructors is as simple as this so if

224
00:08:07,750 --> 00:08:08,920
you think most times with the

225
00:08:08,920 --> 00:08:10,750
constructor you called the super

226
00:08:10,750 --> 00:08:12,310
constructor and then you do things to it

227
00:08:12,310 --> 00:08:13,780
yourself and make sure it's blessed into

228
00:08:13,780 --> 00:08:15,580
your class this will actually end up

229
00:08:15,580 --> 00:08:17,290
resulting being blessed into our class

230
00:08:17,290 --> 00:08:19,630
properly but we're calling the legacy

231
00:08:19,630 --> 00:08:21,310
constructor we're passing anything into

232
00:08:21,310 --> 00:08:23,560
it so setting up their arguments as they

233
00:08:23,560 --> 00:08:26,140
expect and the result of that will then

234
00:08:26,140 --> 00:08:27,790
go through all of our other steps so

235
00:08:27,790 --> 00:08:29,110
it'll get blessed properly into our

236
00:08:29,110 --> 00:08:32,140
class all the slots that we expect will

237
00:08:32,140 --> 00:08:35,740
go into it things like that it's also

238
00:08:35,740 --> 00:08:38,409
how you get custom instances so return

239
00:08:38,409 --> 00:08:40,720
the representation is an array wrap well

240
00:08:40,720 --> 00:08:42,820
so this will essentially put all that

241
00:08:42,820 --> 00:08:44,710
together so it gets the slots from the

242
00:08:44,710 --> 00:08:46,750
class it gets the the representation and

243
00:08:46,750 --> 00:08:48,980
then it basically pulls the things

244
00:08:48,980 --> 00:08:50,269
out of the proto's which is the the

245
00:08:50,269 --> 00:08:52,279
arguments and if it doesn't have them it

246
00:08:52,279 --> 00:08:54,050
just calls the slot initializer right

247
00:08:54,050 --> 00:08:55,310
there and it puts the whole thing

248
00:08:55,310 --> 00:08:57,440
together and we always know that X is at

249
00:08:57,440 --> 00:08:59,420
zero and and why is it one and it's very

250
00:08:59,420 --> 00:09:02,120
easy of course this doesn't inherit well

251
00:09:02,120 --> 00:09:03,560
so you have to do this but this is kind

252
00:09:03,560 --> 00:09:05,930
of weird map sort keys slots this gets

253
00:09:05,930 --> 00:09:07,940
really kind of cryptic and messy but

254
00:09:07,940 --> 00:09:09,860
this is how it would work to to inherit

255
00:09:09,860 --> 00:09:12,170
stuff you can also do scalar references

256
00:09:12,170 --> 00:09:13,670
you can do whatever you want in here if

257
00:09:13,670 --> 00:09:15,440
you wanted to do a custom see type

258
00:09:15,440 --> 00:09:17,779
instance you could do this so all these

259
00:09:17,779 --> 00:09:21,470
extension points exist that was a little

260
00:09:21,470 --> 00:09:23,630
heavy did that that that wasn't

261
00:09:23,630 --> 00:09:26,510
explained well what's that yeah well

262
00:09:26,510 --> 00:09:28,310
because you want consistent otherwise

263
00:09:28,310 --> 00:09:29,510
keys are just going to give you random

264
00:09:29,510 --> 00:09:30,740
things and you want you want to know the

265
00:09:30,740 --> 00:09:32,029
position of your things in your instance

266
00:09:32,029 --> 00:09:35,990
yeah yeah so it's an array yeah messy I

267
00:09:35,990 --> 00:09:37,880
didn't even bother showing how multiple

268
00:09:37,880 --> 00:09:39,139
inheritance would not work and all this

269
00:09:39,139 --> 00:09:42,560
kind of stuff so so anyway they get a

270
00:09:42,560 --> 00:09:44,000
little fancy but it allows you to pretty

271
00:09:44,000 --> 00:09:45,620
much have a lot of freedom with your

272
00:09:45,620 --> 00:09:46,880
expression or with you with your

273
00:09:46,880 --> 00:09:48,380
representation types and things like

274
00:09:48,380 --> 00:09:50,209
that and then there's build and demolish

275
00:09:50,209 --> 00:09:52,970
which was part of mousse basically new

276
00:09:52,970 --> 00:09:55,699
calls build all and build all will look

277
00:09:55,699 --> 00:09:56,990
all the way through your inheritance

278
00:09:56,990 --> 00:09:58,760
chain call every build that it sees in

279
00:09:58,760 --> 00:10:00,560
it in the proper order and then on the

280
00:10:00,560 --> 00:10:02,930
opposite side destroy will call demolish

281
00:10:02,930 --> 00:10:04,730
all which will then demolish in the

282
00:10:04,730 --> 00:10:06,440
exact opposite order that that build

283
00:10:06,440 --> 00:10:09,079
happened so that you can properly yeah

284
00:10:09,079 --> 00:10:11,120
basically get rid of or setup and get

285
00:10:11,120 --> 00:10:12,860
rid of resources in your class if you

286
00:10:12,860 --> 00:10:17,750
want to so and all this 5.6 who here

287
00:10:17,750 --> 00:10:25,069
uses 5.6 still nobody if you did now

288
00:10:25,069 --> 00:10:27,470
this works at this it actually it uses

289
00:10:27,470 --> 00:10:28,040
mro

290
00:10:28,040 --> 00:10:31,459
which is a 5-10 feature an MRO compat if

291
00:10:31,459 --> 00:10:32,959
you need something before that but

292
00:10:32,959 --> 00:10:34,970
otherwise it has zero dependencies and

293
00:10:34,970 --> 00:10:37,040
it is basically ready to go into core as

294
00:10:37,040 --> 00:10:38,870
soon as we feel it's stable enough and

295
00:10:38,870 --> 00:10:41,329
and Sawyer says ok or I'd buy him enough

296
00:10:41,329 --> 00:10:45,199
vegan cookies one or the other so anyway

297
00:10:45,199 --> 00:10:46,579
so that's universal object universal

298
00:10:46,579 --> 00:10:48,260
object I specifically pulled out because

299
00:10:48,260 --> 00:10:50,120
I wanted to use that in a lot of places

300
00:10:50,120 --> 00:10:51,440
I wanted to just be able to write a very

301
00:10:51,440 --> 00:10:53,600
small Sipan module with minimal overhead

302
00:10:53,600 --> 00:10:56,060
and be able to have a nice nice base

303
00:10:56,060 --> 00:10:57,560
class a nice construction protocol

304
00:10:57,560 --> 00:10:59,089
because I ended up implementing this

305
00:10:59,089 --> 00:11:01,069
over and over and over again so that's

306
00:11:01,069 --> 00:11:04,370
there it's out on Sipan the next phase

307
00:11:04,370 --> 00:11:06,470
is something that I I've fiddled with a

308
00:11:06,470 --> 00:11:09,319
number of times and this is this is yeah

309
00:11:09,319 --> 00:11:10,790
this is a bit of a weird one but I think

310
00:11:10,790 --> 00:11:13,209
this is really useful so pearl has

311
00:11:13,209 --> 00:11:19,100
within it a set of compiler phases ok do

312
00:11:19,100 --> 00:11:21,380
we all know what these are anybody any a

313
00:11:21,380 --> 00:11:23,149
little confusing these anybody just seen

314
00:11:23,149 --> 00:11:24,560
them but never knew quite what the hell

315
00:11:24,560 --> 00:11:26,810
they were good for ok all right good so

316
00:11:26,810 --> 00:11:28,640
everybody knows ok so begin happens

317
00:11:28,640 --> 00:11:30,560
immediately you have a begin block as

318
00:11:30,560 --> 00:11:32,390
soon as it's parsed it's executed it

319
00:11:32,390 --> 00:11:33,980
doesn't know if there's no more begin

320
00:11:33,980 --> 00:11:35,600
blocks in front of it it doesn't care if

321
00:11:35,600 --> 00:11:36,949
there's any begin blocks before it it

322
00:11:36,949 --> 00:11:39,230
just immediately runs check will run

323
00:11:39,230 --> 00:11:41,329
last in first out order and it blocks

324
00:11:41,329 --> 00:11:43,459
will run first in first out order unit

325
00:11:43,459 --> 00:11:45,589
check is one of my favorites unit check

326
00:11:45,589 --> 00:11:47,630
so begin checking in it will all work

327
00:11:47,630 --> 00:11:50,959
with the the the compile phase of the

328
00:11:50,959 --> 00:11:53,360
interpreter unit check however every

329
00:11:53,360 --> 00:11:57,019
time a unit a compilation unit is

330
00:11:57,019 --> 00:11:59,180
created so every time you use a module

331
00:11:59,180 --> 00:12:01,430
or every time you load a bit of code or

332
00:12:01,430 --> 00:12:03,920
eval a bit of code unit check gets fired

333
00:12:03,920 --> 00:12:06,860
at the end of that compilation stage so

334
00:12:06,860 --> 00:12:08,449
that becomes very very useful in terms

335
00:12:08,449 --> 00:12:11,510
of finalizing things or cleaning up

336
00:12:11,510 --> 00:12:12,829
resources at the end of the compilation

337
00:12:12,829 --> 00:12:16,130
page before you hit run time and then of

338
00:12:16,130 --> 00:12:18,319
course there's the end box in there so

339
00:12:18,319 --> 00:12:20,569
these you can just write you know begin

340
00:12:20,569 --> 00:12:22,490
and then put a block there or check and

341
00:12:22,490 --> 00:12:23,600
put a block there and stuff like that

342
00:12:23,600 --> 00:12:26,089
that's all well and good however you

343
00:12:26,089 --> 00:12:27,910
can't easily programmatically

344
00:12:27,910 --> 00:12:31,220
install a new unit check block or a new

345
00:12:31,220 --> 00:12:33,050
begin block or new thing

346
00:12:33,050 --> 00:12:35,060
like this if you had that ability you

347
00:12:35,060 --> 00:12:36,950
could do all sorts of things for what's

348
00:12:36,950 --> 00:12:38,540
called multi-phase programming

349
00:12:38,540 --> 00:12:40,970
it's basically macros on crack is how I

350
00:12:40,970 --> 00:12:43,160
look at it if you think of macros macros

351
00:12:43,160 --> 00:12:45,680
have an expansion time so they expand

352
00:12:45,680 --> 00:12:47,570
and then the code gets compiled well

353
00:12:47,570 --> 00:12:49,399
this is these can essentially work in a

354
00:12:49,399 --> 00:12:51,290
similar sense in that they can expand

355
00:12:51,290 --> 00:12:52,910
the code now there's no it's not just

356
00:12:52,910 --> 00:12:54,980
text expansion like see it's a little

357
00:12:54,980 --> 00:12:57,380
bit closer maybe Lisp but not even that

358
00:12:57,380 --> 00:12:58,940
because there's no real syntax it's Perl

359
00:12:58,940 --> 00:13:00,589
you can just manipulate the out of

360
00:13:00,589 --> 00:13:02,540
everything because the interpreter

361
00:13:02,540 --> 00:13:04,490
leaves everything open and so you can do

362
00:13:04,490 --> 00:13:06,800
all that so what what is this useful for

363
00:13:06,800 --> 00:13:09,440
well not a whole hell of a lot it's a

364
00:13:09,440 --> 00:13:12,350
very it's a low-level internal thing but

365
00:13:12,350 --> 00:13:14,690
you can do interesting stuff so what

366
00:13:14,690 --> 00:13:15,860
I've done is I've created a module

367
00:13:15,860 --> 00:13:17,779
allows you to programmatically either in

368
00:13:17,779 --> 00:13:20,329
queue meaning just run this in the next

369
00:13:20,329 --> 00:13:22,519
the next iteration or you can

370
00:13:22,519 --> 00:13:24,709
specifically append or prepend to the

371
00:13:24,709 --> 00:13:25,970
list because actually what Perl does

372
00:13:25,970 --> 00:13:29,240
internally for all these these blocks it

373
00:13:29,240 --> 00:13:33,140
just has a navy and a perl array and it

374
00:13:33,140 --> 00:13:34,370
just stores them in there so you can

375
00:13:34,370 --> 00:13:36,110
push on to it you can pop on it you can

376
00:13:36,110 --> 00:13:37,399
unchipped you can do whatever you want I

377
00:13:37,399 --> 00:13:39,560
don't recommend doing whatever you want

378
00:13:39,560 --> 00:13:41,390
because it probably will seg fault for

379
00:13:41,390 --> 00:13:41,779
sure

380
00:13:41,779 --> 00:13:43,010
because you're going to confuse Perl

381
00:13:43,010 --> 00:13:44,779
very quickly but what this tries to do

382
00:13:44,779 --> 00:13:47,410
is give you sensible versions of it so

383
00:13:47,410 --> 00:13:49,430
for the most part the most useful part

384
00:13:49,430 --> 00:13:50,959
that I found of it is when you're in a

385
00:13:50,959 --> 00:13:53,089
begin block you can actually in queue

386
00:13:53,089 --> 00:13:54,500
for something to run in the next begin

387
00:13:54,500 --> 00:13:55,910
block which just becomes really useful

388
00:13:55,910 --> 00:13:57,950
for weird mob stuff which I'll show you

389
00:13:57,950 --> 00:13:59,810
later but this right now will gives you

390
00:13:59,810 --> 00:14:01,040
some idea of maybe where you might be

391
00:14:01,040 --> 00:14:03,320
able to use this so in your import if

392
00:14:03,320 --> 00:14:04,610
you were to do a bunch of things in your

393
00:14:04,610 --> 00:14:06,350
begin routine I mean nobody does that

394
00:14:06,350 --> 00:14:08,240
right we don't have a million dollar

395
00:14:08,240 --> 00:14:10,670
euro companies built on that we do that

396
00:14:10,670 --> 00:14:13,120
badly at booking it sprout yeah Liz

397
00:14:13,120 --> 00:14:16,699
she's guilty so so booking we do a lot

398
00:14:16,699 --> 00:14:18,770
of preload stuff and we try and preload

399
00:14:18,770 --> 00:14:20,870
as much as we can in the compiled time

400
00:14:20,870 --> 00:14:23,959
of the perl interpreter so that yeah all

401
00:14:23,959 --> 00:14:25,699
our worker lifetimes are very nice and

402
00:14:25,699 --> 00:14:27,980
very clean this would be a way maybe to

403
00:14:27,980 --> 00:14:29,630
check it so we would check we'd start

404
00:14:29,630 --> 00:14:31,850
the timer and then actually at the end

405
00:14:31,850 --> 00:14:34,339
of compilation for sure we could we

406
00:14:34,339 --> 00:14:36,380
could then check the timer so if we were

407
00:14:36,380 --> 00:14:37,459
to do a lot of stuff we could test

408
00:14:37,459 --> 00:14:39,980
things like that it's hard to really

409
00:14:39,980 --> 00:14:42,529
come up with examples for this module

410
00:14:42,529 --> 00:14:45,110
because it's so weird but it's one of

411
00:14:45,110 --> 00:14:46,699
those things that when you suck when you

412
00:14:46,699 --> 00:14:46,970
find

413
00:14:46,970 --> 00:14:50,209
yourself when the solution presents

414
00:14:50,209 --> 00:14:52,069
itself and it's this there's no other

415
00:14:52,069 --> 00:14:52,879
way to do it

416
00:14:52,879 --> 00:14:54,379
so it's really but it's really about

417
00:14:54,379 --> 00:14:57,050
controlling the different compilation

418
00:14:57,050 --> 00:14:59,930
steps and the reason why is because a

419
00:14:59,930 --> 00:15:01,310
lot of the things that I'm doing in here

420
00:15:01,310 --> 00:15:03,170
is we'll see as we go along it's really

421
00:15:03,170 --> 00:15:04,689
important that they're all finished by

422
00:15:04,689 --> 00:15:07,100
by the by the beginning of runtime and

423
00:15:07,100 --> 00:15:09,079
this ends up with two two main benefits

424
00:15:09,079 --> 00:15:11,420
one for the pre fork so you're not doing

425
00:15:11,420 --> 00:15:12,649
you're not pre forking and then doing a

426
00:15:12,649 --> 00:15:14,779
bunch of work you're you're you're able

427
00:15:14,779 --> 00:15:16,040
to do all the work in the pre fork and

428
00:15:16,040 --> 00:15:17,990
then handle the copy-on-write and things

429
00:15:17,990 --> 00:15:21,769
like that and then also modules like B

430
00:15:21,769 --> 00:15:24,110
double colon C which compiles your Perl

431
00:15:24,110 --> 00:15:26,149
application is seed which cPanel uses

432
00:15:26,149 --> 00:15:28,100
should theoretically be able to also

433
00:15:28,100 --> 00:15:29,870
benefit from this because the way they

434
00:15:29,870 --> 00:15:31,519
work is they get to the check phase and

435
00:15:31,519 --> 00:15:34,730
they freeze and then that's where the

436
00:15:34,730 --> 00:15:36,139
that's where your C program starts out

437
00:15:36,139 --> 00:15:37,939
from so all that work should be done

438
00:15:37,939 --> 00:15:39,529
beforehand and you can have it there so

439
00:15:39,529 --> 00:15:41,889
anyway this is again silly little stuff

440
00:15:41,889 --> 00:15:45,110
okay next module is also a bit of wine

441
00:15:45,110 --> 00:15:47,120
and that go forward everybody okay next

442
00:15:47,120 --> 00:15:49,389
module is also a little a little funky

443
00:15:49,389 --> 00:15:53,629
do we have okay I'm running low begin

444
00:15:53,629 --> 00:15:56,180
lift okay how many of you around

445
00:15:56,180 --> 00:16:00,110
with Haskell at all okay so Haskell has

446
00:16:00,110 --> 00:16:01,399
this idea of being able to lift

447
00:16:01,399 --> 00:16:03,110
subroutines and being able to run them

448
00:16:03,110 --> 00:16:04,970
at earlier points and stuff like that

449
00:16:04,970 --> 00:16:06,769
this is basically a ripped off

450
00:16:06,769 --> 00:16:10,069
half-assed Perl version of that what

451
00:16:10,069 --> 00:16:12,019
beginning lift does is it allows you to

452
00:16:12,019 --> 00:16:15,379
create basically things that look pretty

453
00:16:15,379 --> 00:16:18,980
much like a statement keyword and they

454
00:16:18,980 --> 00:16:20,449
operate very much like a statement

455
00:16:20,449 --> 00:16:22,699
keyword and they also do all their work

456
00:16:22,699 --> 00:16:24,920
within the compile phase and then they

457
00:16:24,920 --> 00:16:27,139
leave literally no trace of themselves

458
00:16:27,139 --> 00:16:29,509
afterwards so it becomes a no op when

459
00:16:29,509 --> 00:16:32,750
it's actually run and executed in in

460
00:16:32,750 --> 00:16:36,199
runtime so this one it's very easy to

461
00:16:36,199 --> 00:16:37,850
show a simple example but there's a lot

462
00:16:37,850 --> 00:16:38,990
of stuff under the covers I'm not gonna

463
00:16:38,990 --> 00:16:40,009
get into it because I'm running low on

464
00:16:40,009 --> 00:16:41,660
time I want to get to the next stuff but

465
00:16:41,660 --> 00:16:43,189
it's as simple so if you wanted to write

466
00:16:43,189 --> 00:16:45,529
a moose style clone and call it caribou

467
00:16:45,529 --> 00:16:47,300
you could do begin lifts begin lift and

468
00:16:47,300 --> 00:16:49,250
we install into the collar so the

469
00:16:49,250 --> 00:16:52,519
calling person we install extends and

470
00:16:52,519 --> 00:16:54,529
then whatever whatever extends runs it

471
00:16:54,529 --> 00:16:56,269
does this so this is obviously pushing

472
00:16:56,269 --> 00:16:57,790
on to the Izza so it's just basically

473
00:16:57,790 --> 00:17:00,240
mimicking some sort of inheritance relay

474
00:17:00,240 --> 00:17:03,240
ship and then you can do this in your

475
00:17:03,240 --> 00:17:04,980
code and it is functionally equivalent

476
00:17:04,980 --> 00:17:07,890
to in a begin block doing the Izza there

477
00:17:07,890 --> 00:17:11,760
so again all of the work is done in the

478
00:17:11,760 --> 00:17:14,160
earliest time possible and there is

479
00:17:14,160 --> 00:17:15,869
nothing left for the interpreter to do

480
00:17:15,869 --> 00:17:17,730
at runtime so this was also one of the

481
00:17:17,730 --> 00:17:19,050
things with moose is that moose did a

482
00:17:19,050 --> 00:17:20,970
lot of stuff in runtime and so it had a

483
00:17:20,970 --> 00:17:23,160
lot of overhead in that sense this cuts

484
00:17:23,160 --> 00:17:24,809
out a lot of these the this overhead

485
00:17:24,809 --> 00:17:25,920
because it does it as early as possible

486
00:17:25,920 --> 00:17:29,730
into the interpreter so that one's weird

487
00:17:29,730 --> 00:17:32,429
so but those two parts are very

488
00:17:32,429 --> 00:17:35,610
important bits you'll see later sorry

489
00:17:35,610 --> 00:17:37,620
the build up like I said I just wrote

490
00:17:37,620 --> 00:17:40,290
this talk beforehand so I'm I'm

491
00:17:40,290 --> 00:17:41,070
improvising

492
00:17:41,070 --> 00:17:44,490
so the actual mop so the mop is a meta

493
00:17:44,490 --> 00:17:47,000
object protocol mop is essentially an

494
00:17:47,000 --> 00:17:49,679
interface to things like classes and

495
00:17:49,679 --> 00:17:51,540
methods and slots and also in this case

496
00:17:51,540 --> 00:17:55,080
roles so roles are a concept that well

497
00:17:55,080 --> 00:17:56,850
they go back to small talk in the traits

498
00:17:56,850 --> 00:17:59,130
paper of a long time ago Perl 6 picked

499
00:17:59,130 --> 00:18:01,800
them up we introduced them to pro 5 with

500
00:18:01,800 --> 00:18:04,080
with moose and some other things and

501
00:18:04,080 --> 00:18:05,790
they've actually they've gotten pretty

502
00:18:05,790 --> 00:18:08,340
good traction most other languages are

503
00:18:08,340 --> 00:18:09,360
starting to have something like this

504
00:18:09,360 --> 00:18:10,790
traits in Scala

505
00:18:10,790 --> 00:18:13,890
what was the other one there was a rust

506
00:18:13,890 --> 00:18:17,100
has traits stuff like that so mop role

507
00:18:17,100 --> 00:18:18,840
is basically an API to all that kind of

508
00:18:18,840 --> 00:18:21,990
stuff it is based on universal object in

509
00:18:21,990 --> 00:18:23,820
the sense that it follows the has

510
00:18:23,820 --> 00:18:26,340
convection convention for the slots ok

511
00:18:26,340 --> 00:18:28,980
it is also stateless this was one of the

512
00:18:28,980 --> 00:18:30,630
big problems with moose was that moose

513
00:18:30,630 --> 00:18:32,070
kept all this state in the meta object

514
00:18:32,070 --> 00:18:34,590
and all this state in basically was in

515
00:18:34,590 --> 00:18:36,360
the Perl interpreter and it had to keep

516
00:18:36,360 --> 00:18:37,860
them in sync at all times and that that

517
00:18:37,860 --> 00:18:40,950
cost a lot this doesn't care at all all

518
00:18:40,950 --> 00:18:43,320
state is stored in the package in some

519
00:18:43,320 --> 00:18:45,650
way so methods are stored in the stash

520
00:18:45,650 --> 00:18:48,780
slots are stored in has inheritance

521
00:18:48,780 --> 00:18:50,520
relationships are stored in is a etc etc

522
00:18:50,520 --> 00:18:52,620
we don't store any state so this makes

523
00:18:52,620 --> 00:18:54,120
them very easy they're minimal overhead

524
00:18:54,120 --> 00:18:56,790
they have very little extra memory added

525
00:18:56,790 --> 00:18:58,110
because they essentially just bless a

526
00:18:58,110 --> 00:18:59,390
reference to whatever is their

527
00:18:59,390 --> 00:19:01,350
introspecting so bless reference to the

528
00:19:01,350 --> 00:19:03,870
the code bless reference to the to the

529
00:19:03,870 --> 00:19:08,400
actual stash of the class and so this

530
00:19:08,400 --> 00:19:10,440
allows them to be to be built lazy built

531
00:19:10,440 --> 00:19:12,060
lazily

532
00:19:12,060 --> 00:19:15,060
and then purr had so again fixing some

533
00:19:15,060 --> 00:19:18,240
of the stuff in and fixing some of this

534
00:19:18,240 --> 00:19:21,870
stuff in moose this is essentially how

535
00:19:21,870 --> 00:19:25,770
they work how they fit together a roll

536
00:19:25,770 --> 00:19:27,750
is gonna have a bunch of methods one for

537
00:19:27,750 --> 00:19:30,240
each method in the in the class and have

538
00:19:30,240 --> 00:19:32,690
slots one for each corresponding slot

539
00:19:32,690 --> 00:19:35,670
mop roll covers all this functionality

540
00:19:35,670 --> 00:19:37,410
because a roll pretty much is something

541
00:19:37,410 --> 00:19:39,030
that has methods and basing the only

542
00:19:39,030 --> 00:19:40,890
division you enroll in a class is that a

543
00:19:40,890 --> 00:19:43,170
roll can't be instantiated and a class

544
00:19:43,170 --> 00:19:47,280
can so a mop or a class can pretty much

545
00:19:47,280 --> 00:19:48,900
have all the same capabilities of a roll

546
00:19:48,900 --> 00:19:52,920
so mop or a class does a roll roll roll

547
00:19:52,920 --> 00:19:56,490
class class does roll roll if that makes

548
00:19:56,490 --> 00:19:58,670
sense right okay that was clear right

549
00:19:58,670 --> 00:20:01,260
anyway so it's it's meta-circular in

550
00:20:01,260 --> 00:20:03,380
that way but it's but it's low overhead

551
00:20:03,380 --> 00:20:05,670
that the thought so uh sorry this was

552
00:20:05,670 --> 00:20:06,300
what I was talking about before

553
00:20:06,300 --> 00:20:08,130
inheritance information is in the Izza

554
00:20:08,130 --> 00:20:09,510
the methods are stored in the actual

555
00:20:09,510 --> 00:20:11,670
package stash the role relationships and

556
00:20:11,670 --> 00:20:13,410
does the slot information in has

557
00:20:13,410 --> 00:20:16,530
produced is very small overhead so you

558
00:20:16,530 --> 00:20:20,660
end up was I going for with this one

559
00:20:20,660 --> 00:20:24,810
okay oh sorry sorry sorry yeah so if you

560
00:20:24,810 --> 00:20:27,810
remember this before we had sorry like I

561
00:20:27,810 --> 00:20:29,580
said just was writing the slides as I

562
00:20:29,580 --> 00:20:32,010
was standing out there we have the has

563
00:20:32,010 --> 00:20:33,750
so we have the X and the y for the point

564
00:20:33,750 --> 00:20:36,270
and then we want to inherit here in

565
00:20:36,270 --> 00:20:38,550
point 3d well this is a pain to have to

566
00:20:38,550 --> 00:20:40,560
do this and and one of the things about

567
00:20:40,560 --> 00:20:42,360
Perl oo there has always been painful is

568
00:20:42,360 --> 00:20:43,890
did you repeat the same strings all the

569
00:20:43,890 --> 00:20:45,930
time so there's always a possibility of

570
00:20:45,930 --> 00:20:51,050
a problem there so here comes the mop so

571
00:20:51,050 --> 00:20:54,270
mop roll new okay now if you all

572
00:20:54,270 --> 00:20:55,680
remember before they look like a class

573
00:20:55,680 --> 00:20:58,560
right so why am i doing a roll here well

574
00:20:58,560 --> 00:21:00,870
because a roll is a subset of a class

575
00:21:00,870 --> 00:21:02,760
and I don't care about the function for

576
00:21:02,760 --> 00:21:04,050
what I'm gonna do I don't care really

577
00:21:04,050 --> 00:21:06,330
about the the functionality actually no

578
00:21:06,330 --> 00:21:07,730
should I do

579
00:21:07,730 --> 00:21:09,960
nevermind ignore me forget about that

580
00:21:09,960 --> 00:21:11,910
anyway I create a bunch of rolls in

581
00:21:11,910 --> 00:21:16,350
there go into mro that's the postfix

582
00:21:16,350 --> 00:21:18,300
dereference syntax very nice you should

583
00:21:18,300 --> 00:21:19,950
all try and use it so what this does

584
00:21:19,950 --> 00:21:21,360
though is this goes through all the

585
00:21:21,360 --> 00:21:22,680
different classes that I inherit from

586
00:21:22,680 --> 00:21:24,420
okay so that's going through all the

587
00:21:24,420 --> 00:21:25,770
MROs there that first

588
00:21:25,770 --> 00:21:27,750
from the second loop I get all the slots

589
00:21:27,750 --> 00:21:29,610
in all those classes and then I go

590
00:21:29,610 --> 00:21:32,190
through and if if I have the slot of

591
00:21:32,190 --> 00:21:34,590
that name or if I have an alias slot of

592
00:21:34,590 --> 00:21:36,630
that name I skip this but otherwise I

593
00:21:36,630 --> 00:21:37,950
put it in there and what this

594
00:21:37,950 --> 00:21:39,350
essentially does is it grabs all the

595
00:21:39,350 --> 00:21:42,780
inherited slots pulls them up and merges

596
00:21:42,780 --> 00:21:45,300
them cleanly into one spot so this is

597
00:21:45,300 --> 00:21:46,890
the type of thing that the the mop can

598
00:21:46,890 --> 00:21:49,679
do it can manipulate and and combine all

599
00:21:49,679 --> 00:21:52,590
these things together for the for

600
00:21:52,590 --> 00:21:55,440
inheritance you could it you the roll

601
00:21:55,440 --> 00:21:57,510
composition works in the same way so

602
00:21:57,510 --> 00:21:59,760
it's the API into the methods the slots

603
00:21:59,760 --> 00:22:02,610
the the roles and the classes and you

604
00:22:02,610 --> 00:22:04,620
can build so for that so and I'm running

605
00:22:04,620 --> 00:22:07,800
way low on time so real quick here

606
00:22:07,800 --> 00:22:11,220
method traits how many of you know Perl

607
00:22:11,220 --> 00:22:15,780
six traits or Python decorators Java

608
00:22:15,780 --> 00:22:20,340
annotations okay so it's like that but

609
00:22:20,340 --> 00:22:22,050
it's better described as an actual use

610
00:22:22,050 --> 00:22:24,179
case for code attributes do we all know

611
00:22:24,179 --> 00:22:25,650
what code attributes are though those

612
00:22:25,650 --> 00:22:28,200
things after a colon on a subroutine

613
00:22:28,200 --> 00:22:30,300
that nobody ever uses and everybody's

614
00:22:30,300 --> 00:22:32,580
like what the hell yeah you probably use

615
00:22:32,580 --> 00:22:34,260
it yeah a few of us have used them in

616
00:22:34,260 --> 00:22:36,480
anger here and there I've never found a

617
00:22:36,480 --> 00:22:38,220
good way to good a good use for them

618
00:22:38,220 --> 00:22:39,690
because there's such an annoyingly

619
00:22:39,690 --> 00:22:42,660
tricky and difficult API to get your

620
00:22:42,660 --> 00:22:44,790
head around so every time you get five

621
00:22:44,790 --> 00:22:46,230
minutes into it you go forget it it's

622
00:22:46,230 --> 00:22:46,860
not worth it

623
00:22:46,860 --> 00:22:50,400
so I finally persevered so because I

624
00:22:50,400 --> 00:22:52,290
really do like annotations in Java I

625
00:22:52,290 --> 00:22:54,780
want a similar feature in Perl and it's

626
00:22:54,780 --> 00:22:56,910
and I want it to behave in very much the

627
00:22:56,910 --> 00:22:59,340
way the Perl six traits do so that's

628
00:22:59,340 --> 00:23:02,100
what we have so you have to load a trait

629
00:23:02,100 --> 00:23:04,290
provider which is essentially a package

630
00:23:04,290 --> 00:23:07,230
with with subroutines named for your

631
00:23:07,230 --> 00:23:09,090
traits okay you're basically just

632
00:23:09,090 --> 00:23:11,040
associated a handler with with other

633
00:23:11,040 --> 00:23:13,740
stuff so what this will do in the

634
00:23:13,740 --> 00:23:15,870
background is it'll actually use that B

635
00:23:15,870 --> 00:23:19,140
compiler phase hooks to install a begin

636
00:23:19,140 --> 00:23:21,630
block that will install all the things

637
00:23:21,630 --> 00:23:24,270
that you need to collect to all the the

638
00:23:24,270 --> 00:23:26,690
weirdness of the Perl API to collect

639
00:23:26,690 --> 00:23:30,300
this information and and to apply or I'm

640
00:23:30,300 --> 00:23:35,130
sorry and to apply the the provider and

641
00:23:35,130 --> 00:23:37,200
then it'll remove itself it'll then

642
00:23:37,200 --> 00:23:39,090
encode another inject another begin

643
00:23:39,090 --> 00:23:39,299
block

644
00:23:39,299 --> 00:23:41,070
to remove all evidence of that so you

645
00:23:41,070 --> 00:23:42,960
don't see that you just used a feature

646
00:23:42,960 --> 00:23:44,940
in Perl it takes it all the way it

647
00:23:44,940 --> 00:23:46,230
cleans it all out because essentially

648
00:23:46,230 --> 00:23:50,450
otherwise you mess up your namespace so

649
00:23:50,450 --> 00:23:53,100
that's how to implement that that's all

650
00:23:53,100 --> 00:23:53,489
you do

651
00:23:53,489 --> 00:23:58,139
that's your provider thing the the

652
00:23:58,139 --> 00:24:00,600
handler gets the meta object so this is

653
00:24:00,600 --> 00:24:03,629
a mop class object the method name that

654
00:24:03,629 --> 00:24:07,289
you had that you attach this to and then

655
00:24:07,289 --> 00:24:09,090
any other additional information so if

656
00:24:09,090 --> 00:24:11,730
you remember beforehand we have the type

657
00:24:11,730 --> 00:24:13,999
read-only read/write and then the slot

658
00:24:13,999 --> 00:24:17,999
value in there so basically just write

659
00:24:17,999 --> 00:24:19,619
this and it uses the mop again to add a

660
00:24:19,619 --> 00:24:21,899
method of the name and it creates a

661
00:24:21,899 --> 00:24:24,359
read-only accessor or readwrite accessor

662
00:24:24,359 --> 00:24:26,869
and using the slot name map

663
00:24:26,869 --> 00:24:30,989
this is also introspective so if you if

664
00:24:30,989 --> 00:24:34,019
you get a mop method object you'll find

665
00:24:34,019 --> 00:24:36,210
that the code attributes are there so we

666
00:24:36,210 --> 00:24:38,700
do leave them leave those in there for

667
00:24:38,700 --> 00:24:42,509
because perl expects them then you can

668
00:24:42,509 --> 00:24:44,399
also grab the actual trade object which

669
00:24:44,399 --> 00:24:46,259
will have it broken down into the actual

670
00:24:46,259 --> 00:24:48,600
name of the trait the arguments for the

671
00:24:48,600 --> 00:24:50,489
trait and then you can actually find out

672
00:24:50,489 --> 00:24:52,169
the fully qualified name of the handler

673
00:24:52,169 --> 00:24:55,309
that's going to be calling it as well

674
00:24:56,600 --> 00:24:59,419
you can get crazy with this if you want

675
00:24:59,419 --> 00:25:02,730
get off here so we're getting this

676
00:25:02,730 --> 00:25:04,889
string we're gonna obviously turn this

677
00:25:04,889 --> 00:25:06,450
into an op spec right and then we got

678
00:25:06,450 --> 00:25:08,009
these this is also by the way not only

679
00:25:08,009 --> 00:25:10,139
this is maybe a good use case for these

680
00:25:10,139 --> 00:25:12,389
this feature it's also maybe a good use

681
00:25:12,389 --> 00:25:15,059
case for the the pre declared

682
00:25:15,059 --> 00:25:17,070
subroutines because I'm gonna build the

683
00:25:17,070 --> 00:25:19,289
entire guts of this I might as well just

684
00:25:19,289 --> 00:25:23,820
not bother setting it up here get opt is

685
00:25:23,820 --> 00:25:27,840
implemented like this okay now you're

686
00:25:27,840 --> 00:25:29,600
all going what

687
00:25:29,600 --> 00:25:31,799
that's because get up and again if

688
00:25:31,799 --> 00:25:33,840
you've worked with Java annotations Java

689
00:25:33,840 --> 00:25:35,669
annotations just smack some stuff onto

690
00:25:35,669 --> 00:25:37,350
your class and then you can tell Java

691
00:25:37,350 --> 00:25:38,730
annotations whether you want you want

692
00:25:38,730 --> 00:25:41,039
them to keep it at runtime or do it at

693
00:25:41,039 --> 00:25:43,710
or just keep it for compile time but in

694
00:25:43,710 --> 00:25:45,600
another class has to inspect that and do

695
00:25:45,600 --> 00:25:46,379
something with it

696
00:25:46,379 --> 00:25:48,179
so it separates the concerns a little

697
00:25:48,179 --> 00:25:50,340
bit there so in this case just for this

698
00:25:50,340 --> 00:25:53,100
case I implemented get up in this way so

699
00:25:53,100 --> 00:25:55,140
I can lou through all the methods in my

700
00:25:55,140 --> 00:25:58,140
meta so to assume that's my class I can

701
00:25:58,140 --> 00:26:00,030
get the if I have a code attribute that

702
00:26:00,030 --> 00:26:01,559
is opt so I know that I'm looking for

703
00:26:01,559 --> 00:26:03,299
that I can get rid of them if I don't

704
00:26:03,299 --> 00:26:04,110
have it

705
00:26:04,110 --> 00:26:06,090
get the trait make sure the trade is

706
00:26:06,090 --> 00:26:07,530
also opt and then from there I can build

707
00:26:07,530 --> 00:26:09,299
the opspecs so I had all those strings I

708
00:26:09,299 --> 00:26:11,429
can start to slice them up and build the

709
00:26:11,429 --> 00:26:13,200
off spec and then I can pass it in to

710
00:26:13,200 --> 00:26:14,910
get up long and then I can get my values

711
00:26:14,910 --> 00:26:16,860
out and I can be done I actually have a

712
00:26:16,860 --> 00:26:18,240
test of this that works with all the

713
00:26:18,240 --> 00:26:19,740
code that's missing and uncomment it out

714
00:26:19,740 --> 00:26:24,179
here but there's this this is also if

715
00:26:24,179 --> 00:26:25,799
you're familiar with Jackson which is a

716
00:26:25,799 --> 00:26:30,059
java library for for json serialization

717
00:26:30,059 --> 00:26:31,919
and data binding the same thing can be

718
00:26:31,919 --> 00:26:33,900
implemented through the same way also

719
00:26:33,900 --> 00:26:36,299
have a test that shows that working if

720
00:26:36,299 --> 00:26:40,039
you've used the jax-rs web service

721
00:26:40,039 --> 00:26:42,659
annotation sets those are also very nice

722
00:26:42,659 --> 00:26:45,240
hibernate hibernate has some annotation

723
00:26:45,240 --> 00:26:48,090
sets for validation basically porting

724
00:26:48,090 --> 00:26:49,409
all these things to perl would give us a

725
00:26:49,409 --> 00:26:51,330
lot of lot of stuff and as I said before

726
00:26:51,330 --> 00:26:55,200
all this happens at begin time so it all

727
00:26:55,200 --> 00:26:57,120
happens early early early in your

728
00:26:57,120 --> 00:27:00,350
process outside of your pre fork so ok

729
00:27:00,350 --> 00:27:07,140
ten minutes so this is fast Moxie is the

730
00:27:07,140 --> 00:27:10,980
moose redo but not really so I don't

731
00:27:10,980 --> 00:27:12,840
have a better name for it if anybody

732
00:27:12,840 --> 00:27:15,000
hasn't good name for it we can come up

733
00:27:15,000 --> 00:27:17,340
with one but essentially it uses all

734
00:27:17,340 --> 00:27:18,450
those things that I just showed you

735
00:27:18,450 --> 00:27:21,330
before so extends and has are both

736
00:27:21,330 --> 00:27:23,309
implemented with the begin lift so again

737
00:27:23,309 --> 00:27:25,470
these things all happen very early in

738
00:27:25,470 --> 00:27:28,440
the compile time and turn into the the

739
00:27:28,440 --> 00:27:30,600
canonical versions of themselves we're

740
00:27:30,600 --> 00:27:33,360
using method traits so we have all your

741
00:27:33,360 --> 00:27:36,030
all your standard moose things you have

742
00:27:36,030 --> 00:27:37,049
your read-only accessories your

743
00:27:37,049 --> 00:27:38,250
read/write accessories we have

744
00:27:38,250 --> 00:27:41,960
predicates that we can you can set up

745
00:27:41,960 --> 00:27:44,159
clearers like a lot of those those

746
00:27:44,159 --> 00:27:45,690
features in moose to generate different

747
00:27:45,690 --> 00:27:47,730
types of accessories it did it here or

748
00:27:47,730 --> 00:27:50,820
we have versions of it here and you can

749
00:27:50,820 --> 00:27:52,919
see else with the extents now one of the

750
00:27:52,919 --> 00:27:54,539
things I know some of you might be

751
00:27:54,539 --> 00:27:55,770
looking at this and saying okay we've

752
00:27:55,770 --> 00:27:57,419
got some redundancy here right we've got

753
00:27:57,419 --> 00:27:59,370
X up there and and why why aren't we

754
00:27:59,370 --> 00:28:01,620
associating our accessories with that

755
00:28:01,620 --> 00:28:03,390
well again

756
00:28:03,390 --> 00:28:05,610
compile time it'll know it's here it's

757
00:28:05,610 --> 00:28:06,780
there's less for me to

758
00:28:06,780 --> 00:28:08,880
I just have to stick in a new version or

759
00:28:08,880 --> 00:28:11,490
a new sub but the glove is already there

760
00:28:11,490 --> 00:28:13,290
so we're doing we're doing less work

761
00:28:13,290 --> 00:28:17,520
number one and two sometimes you want

762
00:28:17,520 --> 00:28:19,770
encapsulation so one of the biggest

763
00:28:19,770 --> 00:28:21,270
criticisms I've always gotten with

764
00:28:21,270 --> 00:28:23,850
mousse is that encouraged struct style

765
00:28:23,850 --> 00:28:26,670
classes meaning you create a bunch of

766
00:28:26,670 --> 00:28:29,010
fields for your class and then you have

767
00:28:29,010 --> 00:28:30,330
accessories for all of them and

768
00:28:30,330 --> 00:28:31,920
everybody can get to everything and

769
00:28:31,920 --> 00:28:34,920
everything's public so with Moxie that's

770
00:28:34,920 --> 00:28:37,620
not the case you can you can set your

771
00:28:37,620 --> 00:28:39,870
accessories and your and your slots are

772
00:28:39,870 --> 00:28:42,030
separated differently and then oh crap

773
00:28:42,030 --> 00:28:43,620
and I don't have it in here and there's

774
00:28:43,620 --> 00:28:46,020
also private accessors and when I say

775
00:28:46,020 --> 00:28:48,150
private accessors and I totally forgot

776
00:28:48,150 --> 00:28:49,470
to put a slide in here for this

777
00:28:49,470 --> 00:28:51,780
when I say private accessories I mean we

778
00:28:51,780 --> 00:28:53,970
generate lexical subroutines that are

779
00:28:53,970 --> 00:28:56,790
not available in the dispatch of the

780
00:28:56,790 --> 00:29:00,030
actual class and they are also not

781
00:29:00,030 --> 00:29:03,300
available in - to anybody outside of the

782
00:29:03,300 --> 00:29:04,860
class because there are truly lexical

783
00:29:04,860 --> 00:29:07,020
subroutines within the scope of the

784
00:29:07,020 --> 00:29:08,940
package and they know what they know

785
00:29:08,940 --> 00:29:11,190
itself is automatically so you can

786
00:29:11,190 --> 00:29:13,020
basically do all stuff I totally forgot

787
00:29:13,020 --> 00:29:14,670
to get a slide for that it's in the test

788
00:29:14,670 --> 00:29:17,310
suite anyway point is we're generating a

789
00:29:17,310 --> 00:29:18,990
lot of these successors for you in a

790
00:29:18,990 --> 00:29:20,790
slightly different way than normal

791
00:29:20,790 --> 00:29:23,420
mousse but it allows you a better set of

792
00:29:23,420 --> 00:29:25,380
encapsulation so you can have a better

793
00:29:25,380 --> 00:29:27,480
separation between what is your state

794
00:29:27,480 --> 00:29:29,880
which is these slots that you have and

795
00:29:29,880 --> 00:29:32,040
then what is your access and how do you

796
00:29:32,040 --> 00:29:35,550
how do people access that state it also

797
00:29:35,550 --> 00:29:37,680
works with overloading and stuff like

798
00:29:37,680 --> 00:29:41,250
that so we got the accessor there this

799
00:29:41,250 --> 00:29:43,680
is just because signatures because

800
00:29:43,680 --> 00:29:45,330
apparently overloading sends a whole

801
00:29:45,330 --> 00:29:47,010
bunch of extra arguments into your thing

802
00:29:47,010 --> 00:29:50,670
I don't know why so Moxie Moxie also

803
00:29:50,670 --> 00:29:54,090
turns on signatures and Moxie turns on

804
00:29:54,090 --> 00:29:57,180
postfix DRF it turns on current sub it

805
00:29:57,180 --> 00:29:58,530
turns on lexical Sauve it turns on

806
00:29:58,530 --> 00:30:00,660
postfix dear fqq it turns on ref

807
00:30:00,660 --> 00:30:02,700
aliasing it turns on every cool new

808
00:30:02,700 --> 00:30:04,560
feature that you could ever want

809
00:30:04,560 --> 00:30:07,560
including strict and warnings in in in

810
00:30:07,560 --> 00:30:09,420
its import so it's sort of like moose in

811
00:30:09,420 --> 00:30:10,970
that sense and then it forces you

812
00:30:10,970 --> 00:30:15,530
forcefully into the future if it can

813
00:30:16,149 --> 00:30:18,820
so this is a test that sort of runs but

814
00:30:18,820 --> 00:30:21,010
but doesn't actually entirely work yet

815
00:30:21,010 --> 00:30:22,299
in there and I'm just these are my last

816
00:30:22,299 --> 00:30:24,279
little bits here but I just want to show

817
00:30:24,279 --> 00:30:26,260
how you could extend things with the

818
00:30:26,260 --> 00:30:29,830
traits the method traits mechanism Moxie

819
00:30:29,830 --> 00:30:32,590
supports it already so we can guess what

820
00:30:32,590 --> 00:30:35,200
this does it's a read-only accessor for

821
00:30:35,200 --> 00:30:36,970
the description json parameter just

822
00:30:36,970 --> 00:30:38,710
tells it hey when you're collapsing this

823
00:30:38,710 --> 00:30:40,600
object from json make sure you turret

824
00:30:40,600 --> 00:30:41,950
you saw a field for description and a

825
00:30:41,950 --> 00:30:43,929
store for a field for is done and when

826
00:30:43,929 --> 00:30:45,490
you pull it back out you can do the same

827
00:30:45,490 --> 00:30:48,490
thing and and and get it out of there so

828
00:30:48,490 --> 00:30:49,870
these are just annotations again they

829
00:30:49,870 --> 00:30:51,460
were on outside yeah I know it's you

830
00:30:51,460 --> 00:30:53,110
look at me like what yeah I'm sorry I'm

831
00:30:53,110 --> 00:30:55,240
going really fast here anyway wouldn't

832
00:30:55,240 --> 00:30:56,770
this stuff kind of stuff be cool I mean

833
00:30:56,770 --> 00:30:59,110
catalysts did did all sorts of messy

834
00:30:59,110 --> 00:31:00,970
 with this stuff but now we have

835
00:31:00,970 --> 00:31:03,100
subroutine signatures we can add these

836
00:31:03,100 --> 00:31:05,260
annotations here here we go that our web

837
00:31:05,260 --> 00:31:09,700
service done okay and and what's

838
00:31:09,700 --> 00:31:11,140
happening is there's not much going on

839
00:31:11,140 --> 00:31:13,480
in the class so the class is very very

840
00:31:13,480 --> 00:31:15,549
testable because what's going on with

841
00:31:15,549 --> 00:31:17,260
puts and consumes it doesn't do anything

842
00:31:17,260 --> 00:31:20,260
to the class so the class on its own is

843
00:31:20,260 --> 00:31:23,230
entirely testable by itself in this way

844
00:31:23,230 --> 00:31:27,039
now I may have a runner that generates

845
00:31:27,039 --> 00:31:28,960
understands all this meta information in

846
00:31:28,960 --> 00:31:30,669
all these places and then creates

847
00:31:30,669 --> 00:31:33,190
something that runs this and properly

848
00:31:33,190 --> 00:31:34,870
delegates to these other bits that are

849
00:31:34,870 --> 00:31:37,149
just doing the data bits again if you

850
00:31:37,149 --> 00:31:39,100
look at jax-rs and some of the java

851
00:31:39,100 --> 00:31:41,200
annotation stuff it works out very

852
00:31:41,200 --> 00:31:43,149
nicely because you add all this meta

853
00:31:43,149 --> 00:31:44,440
information and you don't really need to

854
00:31:44,440 --> 00:31:46,270
care about it when you want to test in

855
00:31:46,270 --> 00:31:48,190
isolation but then when you want to run

856
00:31:48,190 --> 00:31:50,320
it in in a particular environment you

857
00:31:50,320 --> 00:31:51,880
you the meta information adds to it

858
00:31:51,880 --> 00:31:58,020
anyway sorry they're not crazy so yeah

859
00:31:58,020 --> 00:32:00,309
we're building on this it's getting

860
00:32:00,309 --> 00:32:04,330
there the status universal object is

861
00:32:04,330 --> 00:32:05,500
stable I've been fiddling with this

862
00:32:05,500 --> 00:32:08,320
thing for geez I don't know like eight

863
00:32:08,320 --> 00:32:10,840
nine months now I've been writing a

864
00:32:10,840 --> 00:32:12,399
bunch of new classes in it stuff like

865
00:32:12,399 --> 00:32:14,380
that that's entirely stable I totally

866
00:32:14,380 --> 00:32:16,289
recommend people trying to use that

867
00:32:16,289 --> 00:32:20,409
playing with it I love bug fixes teacher

868
00:32:20,409 --> 00:32:24,130
suggestions other stuff like that doc

869
00:32:24,130 --> 00:32:26,880
fixes please

870
00:32:27,290 --> 00:32:28,730
other one the other two those are those

871
00:32:28,730 --> 00:32:31,430
are they involve excess that I wrote so

872
00:32:31,430 --> 00:32:33,170
I'm not gonna put them above alpha until

873
00:32:33,170 --> 00:32:34,700
I get somebody else to look over my C

874
00:32:34,700 --> 00:32:37,700
code but but those ones they work

875
00:32:37,700 --> 00:32:40,160
something they didn't work just that I

876
00:32:40,160 --> 00:32:43,880
wrote the C so that's a bad thing the

877
00:32:43,880 --> 00:32:46,370
mop I'm calling a beta but this has been

878
00:32:46,370 --> 00:32:47,990
around for at least a year and a half

879
00:32:47,990 --> 00:32:49,400
now and I've been using it in various

880
00:32:49,400 --> 00:32:50,660
places for at least a year and a half

881
00:32:50,660 --> 00:32:52,520
now I'm calling it beta because also

882
00:32:52,520 --> 00:32:54,080
there's a bunch of stuff that should be

883
00:32:54,080 --> 00:32:55,850
moved into excess that is currently

884
00:32:55,850 --> 00:32:58,700
using the Pearl pure pearl horrible

885
00:32:58,700 --> 00:33:01,310
crazy weird approach to it you move it

886
00:33:01,310 --> 00:33:02,720
into excess it'll be a lot faster but

887
00:33:02,720 --> 00:33:04,790
again I shouldn't write that excess and

888
00:33:04,790 --> 00:33:06,830
that's complicated excess but that's

889
00:33:06,830 --> 00:33:08,800
fairly stable from an API perspective

890
00:33:08,800 --> 00:33:11,180
method traits and Moxie I was hoping to

891
00:33:11,180 --> 00:33:13,820
get released like before the talk but I

892
00:33:13,820 --> 00:33:15,500
didn't because I was working on the

893
00:33:15,500 --> 00:33:17,600
slides so but these things are moving

894
00:33:17,600 --> 00:33:20,300
forward I I spent five years fiddling

895
00:33:20,300 --> 00:33:22,760
with this project and this idea of let's

896
00:33:22,760 --> 00:33:25,430
get some more modern stuff into Perl but

897
00:33:25,430 --> 00:33:28,880
get it into the core and finally now

898
00:33:28,880 --> 00:33:30,320
we're moving we're moving forward in

899
00:33:30,320 --> 00:33:33,710
this so yeah questions thoughts I don't

900
00:33:33,710 --> 00:33:35,060
know if I have time enough for questions

901
00:33:35,060 --> 00:33:36,680
actually three minutes three minutes

902
00:33:36,680 --> 00:33:41,960
three questions one in women in each so

903
00:33:41,960 --> 00:33:44,420
the plan and the rule was always put it

904
00:33:44,420 --> 00:33:47,240
on in Sipan give it a little bit of time

905
00:33:47,240 --> 00:33:49,130
to shake out all the bugs and and stuff

906
00:33:49,130 --> 00:33:50,900
like that then we'll move it into core

907
00:33:50,900 --> 00:33:53,510
it's a negotiation I basically the

908
00:33:53,510 --> 00:33:56,480
Sawyer and everybody in p5p running

909
00:33:56,480 --> 00:33:58,940
through stuff like that at the moment

910
00:33:58,940 --> 00:34:00,830
they're all very minimal on their

911
00:34:00,830 --> 00:34:04,340
dependencies so should be pretty easy to

912
00:34:04,340 --> 00:34:07,250
install from Sipan worst cases you have

913
00:34:07,250 --> 00:34:08,780
to get a new test more or something like

914
00:34:08,780 --> 00:34:10,280
that and that pulls down the whole world

915
00:34:10,280 --> 00:34:16,389
or something but but yet suni yes

916
00:34:16,389 --> 00:34:19,389
question

917
00:34:23,810 --> 00:34:27,469
so I couldn't figure out his thing the

918
00:34:27,469 --> 00:34:29,179
the only thing that I was able to sort

919
00:34:29,179 --> 00:34:31,820
of figure out at one point was there's a

920
00:34:31,820 --> 00:34:34,159
developing in lift which raffle wrote

921
00:34:34,159 --> 00:34:36,730
but that's full of crazy stuff as well

922
00:34:36,730 --> 00:34:39,109
no this is everyone so a couple of

923
00:34:39,109 --> 00:34:40,219
people have tried this in various

924
00:34:40,219 --> 00:34:42,320
different ways I didn't care about some

925
00:34:42,320 --> 00:34:43,460
of the things that they cared about and

926
00:34:43,460 --> 00:34:44,210
they didn't care about some of the

927
00:34:44,210 --> 00:34:45,830
things I care about eventually I'd like

928
00:34:45,830 --> 00:34:47,060
to see them all merge because I think

929
00:34:47,060 --> 00:34:48,918
they all try and do the same thing but

930
00:34:48,918 --> 00:34:53,780
there's just level of crazy yeah so any

931
00:34:53,780 --> 00:34:56,080
other questions

932
00:34:56,080 --> 00:34:59,060
no we're good okay we're done thank you

933
00:34:59,060 --> 00:35:10,099
[Applause]

