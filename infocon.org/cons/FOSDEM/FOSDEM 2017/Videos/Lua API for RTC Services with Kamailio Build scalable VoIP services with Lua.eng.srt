1
00:03:36,270 --> 00:03:40,540
or register to the network the response

2
00:03:40,540 --> 00:03:43,660
to such requests would be looking like

3
00:03:43,660 --> 00:03:46,450
this so pretty much a similar format the

4
00:03:46,450 --> 00:03:48,430
first line it's different because it has

5
00:03:48,430 --> 00:03:51,010
the response code then headers and body

6
00:03:51,010 --> 00:03:55,270
the body it's where it describes the

7
00:03:55,270 --> 00:03:57,790
type of the session here it's media

8
00:03:57,790 --> 00:03:59,740
window so it's a void call but could be

9
00:03:59,740 --> 00:04:03,460
another M line for video and so on so

10
00:04:03,460 --> 00:04:06,280
practically the goal of Camellia it's to

11
00:04:06,280 --> 00:04:08,860
sit somewhere in the network and route

12
00:04:08,860 --> 00:04:11,560
such packages between phones between

13
00:04:11,560 --> 00:04:14,530
gateways between media server because if

14
00:04:14,530 --> 00:04:16,690
someone is not answering there could be

15
00:04:16,690 --> 00:04:20,320
a voicemail service that comma a Lea

16
00:04:20,320 --> 00:04:23,500
will keep the ringing state to a phone

17
00:04:23,500 --> 00:04:25,420
for like I don't know 20 seconds and

18
00:04:25,420 --> 00:04:28,330
then will stop that branch of the call

19
00:04:28,330 --> 00:04:31,300
and redirect the the call to voice box

20
00:04:31,300 --> 00:04:34,180
service so the people can leave an audio

21
00:04:34,180 --> 00:04:37,990
message that could be played later and

22
00:04:37,990 --> 00:04:41,830
different other kind of situation with

23
00:04:41,830 --> 00:04:45,780
application server integration with

24
00:05:48,090 --> 00:05:50,910
and actually it's an evolution right now

25
00:05:50,910 --> 00:05:53,190
because Lu are they embedded interpreter

26
00:05:53,190 --> 00:05:58,550
was that like eight nine years ago

27
00:06:00,810 --> 00:06:04,380
saintly and I'm gonna have the details

28
00:06:04,380 --> 00:06:08,460
present in the next slides because we

29
00:06:08,460 --> 00:06:11,160
are routing packets and we are targeting

30
00:06:11,160 --> 00:06:14,100
to be quite flexible because again sip

31
00:06:14,100 --> 00:06:16,500
could be using me so many scenarios but

32
00:06:16,500 --> 00:06:18,570
then it's a text protocol and you need

33
00:06:18,570 --> 00:06:21,750
sometimes to remove bad headers we

34
00:06:21,750 --> 00:06:24,750
started back in 2001 with this project

35
00:06:24,750 --> 00:06:27,540
and our configuration file actually it's

36
00:06:27,540 --> 00:06:33,000
a scripting language itself so it has at

37
00:06:33,000 --> 00:06:36,600
the beginning some part with what we

38
00:06:36,600 --> 00:06:38,640
call global parameters as you see there

39
00:06:38,640 --> 00:06:41,880
like debug to listen where Camille you

40
00:06:41,880 --> 00:06:43,890
should start listening for sip traffic

41
00:06:43,890 --> 00:06:46,440
then we have a modular architecture so

42
00:06:46,440 --> 00:06:48,960
you need to load extension as we call

43
00:06:48,960 --> 00:06:51,120
the module you set parameters for the

44
00:06:51,120 --> 00:06:53,030
module and that would be the passive

45
00:06:53,030 --> 00:06:55,700
part of the config file because it's

46
00:06:55,700 --> 00:06:59,450
interpreted only at startup and then

47
00:06:59,450 --> 00:07:02,880
that's it and we have what we call

48
00:07:02,880 --> 00:07:06,000
routing blocks and that's the active

49
00:07:06,000 --> 00:07:09,090
part of a configuration file and that's

50
00:07:09,090 --> 00:07:14,070
executed for each sip message so it's

51
00:07:14,070 --> 00:07:17,490
kind of rudimentary scripting languages

52
00:07:17,490 --> 00:07:20,280
we have if condition we have assignments

53
00:07:20,280 --> 00:07:22,320
some string operations some arithmetic

54
00:07:22,320 --> 00:07:25,620
operations some modularity as you could

55
00:07:25,620 --> 00:07:27,600
define route blocks that could be

56
00:07:27,600 --> 00:07:31,320
executed for from another out block we

57
00:07:31,320 --> 00:07:33,630
call action what's inside this function

58
00:07:33,630 --> 00:07:37,070
and expression inside the routing blocks

59
00:07:37,070 --> 00:07:40,770
some control statements like exit return

60
00:07:40,770 --> 00:07:46,130
and so on so why were right now here

61
00:07:46,130 --> 00:07:49,169
again this programming language was

62
00:07:49,169 --> 00:07:52,200
designed at its core it was extended of

63
00:07:52,200 --> 00:07:54,539
course along this year but the concept

64
00:07:54,539 --> 00:07:58,050
was started in 2001 and actually we as

65
00:07:58,050 --> 00:08:01,530
developers we try to focus on putting

66
00:08:01,530 --> 00:08:03,840
their features for voice over IP

67
00:08:03,840 --> 00:08:06,919
real-time communication not really

68
00:08:06,919 --> 00:08:11,280
becoming yet another scripting language

69
00:08:11,280 --> 00:08:12,930
programmers

70
00:08:12,930 --> 00:08:18,840
out there because again one of the main

71
00:08:18,840 --> 00:08:22,340
targets for the application was

72
00:08:22,340 --> 00:08:26,520
performance and many of us they're being

73
00:08:26,520 --> 00:08:29,729
computer science engineers and what

74
00:08:29,729 --> 00:08:31,889
mentioned the project was started in a

75
00:08:31,889 --> 00:08:33,630
Research Institute so I was not really a

76
00:08:33,630 --> 00:08:36,570
pressure for production people had time

77
00:08:36,570 --> 00:08:40,380
to optimize their and for this some of

78
00:08:40,380 --> 00:08:42,000
the characteristics we do a pre

79
00:08:42,000 --> 00:08:44,820
compilation at startup so we optimize if

80
00:08:44,820 --> 00:08:46,470
they are like regular expression in the

81
00:08:46,470 --> 00:08:49,709
config file we compile them to binary

82
00:08:49,709 --> 00:08:54,360
formats with the linear execution so one

83
00:08:54,360 --> 00:08:56,850
by one of course following the branches

84
00:08:56,850 --> 00:09:00,149
for if jumping when executing routing

85
00:09:00,149 --> 00:09:02,910
blocks but then also we have quite a lot

86
00:09:02,910 --> 00:09:06,330
of limitation because we practically

87
00:09:06,330 --> 00:09:09,060
have support only for integer and string

88
00:09:09,060 --> 00:09:15,089
values extending this language require C

89
00:09:15,089 --> 00:09:17,310
coding and some other tools sometimes

90
00:09:17,310 --> 00:09:20,910
like yak and Bastogne for those familiar

91
00:09:20,910 --> 00:09:27,270
and our startup optimization is

92
00:09:27,270 --> 00:09:29,310
precompilation was not really designed

93
00:09:29,310 --> 00:09:32,940
for something that people demand

94
00:09:32,940 --> 00:09:35,339
quite often in real-time communication

95
00:09:35,339 --> 00:09:37,920
reload in the config because they are

96
00:09:37,920 --> 00:09:40,770
afraid of you know not impacting the

97
00:09:40,770 --> 00:09:44,040
active call at the moment with signaling

98
00:09:44,040 --> 00:09:46,380
only as we don't process media this is

99
00:09:46,380 --> 00:09:48,930
not that visible but still you know

100
00:09:48,930 --> 00:09:52,770
people demanded and there are some cases

101
00:09:52,770 --> 00:09:56,820
where you don't really want to restart

102
00:09:56,820 --> 00:10:04,290
so at some point I sort of you know

103
00:10:04,290 --> 00:10:06,870
instead of from time to time someone

104
00:10:06,870 --> 00:10:09,600
comes in says I want to do now this kind

105
00:10:09,600 --> 00:10:11,850
of string parsing is there a function

106
00:10:11,850 --> 00:10:13,950
for it or it's an expression for it and

107
00:10:13,950 --> 00:10:17,339
we added quite a lot but then again keep

108
00:10:17,339 --> 00:10:20,339
adding in when one of your community

109
00:10:20,339 --> 00:10:23,839
user it's asking you kind of feel again

110
00:10:23,839 --> 00:10:26,370
working on something that is not the

111
00:10:26,370 --> 00:10:26,700
main

112
00:10:26,700 --> 00:10:30,320
purpose of this project so it's when I

113
00:10:30,320 --> 00:10:33,540
look for a scripting language initially

114
00:10:33,540 --> 00:10:36,630
was ability to execute inside our

115
00:10:36,630 --> 00:10:38,730
configuration file inside our routing

116
00:10:38,730 --> 00:10:41,220
blocks triggering the execution of a

117
00:10:41,220 --> 00:10:44,850
script that it's loaded at startup and I

118
00:10:44,850 --> 00:10:49,910
added this up Lua module executing

119
00:10:49,910 --> 00:10:54,300
application scripts in Lua and from the

120
00:10:54,300 --> 00:10:56,600
beginning I targeted to be able to

121
00:10:56,600 --> 00:11:00,060
reload the script if you want but

122
00:11:00,060 --> 00:11:02,490
actually the support was added by Victor

123
00:11:02,490 --> 00:11:06,540
reloading if I remember back in I know

124
00:11:06,540 --> 00:11:12,240
few years or several years ago probably

125
00:11:12,240 --> 00:11:14,970
everyone knows here but when embedding

126
00:11:14,970 --> 00:11:20,910
it it's a very simple and we sort of

127
00:11:20,910 --> 00:11:24,660
have our modules and then exporting to

128
00:11:24,660 --> 00:11:27,330
Lou I would require to make a wrapper

129
00:11:27,330 --> 00:11:30,390
there are some tools out there that you

130
00:11:30,390 --> 00:11:33,990
can get the skeletons and so on but it

131
00:11:33,990 --> 00:11:36,830
feel a bit heavy and the issue is that

132
00:11:36,830 --> 00:11:39,990
you know having the the dependency of

133
00:11:39,990 --> 00:11:42,780
wine each module was not really a

134
00:11:42,780 --> 00:11:45,420
solution as people want to install as

135
00:11:45,420 --> 00:11:47,670
less as possible dependencies and some

136
00:11:47,670 --> 00:11:49,890
people like other scripting languages as

137
00:11:49,890 --> 00:11:51,750
I said someone else had did Python

138
00:11:51,750 --> 00:11:54,540
someone else added the port we didn't

139
00:11:54,540 --> 00:11:56,910
want to have each module depending on

140
00:11:56,910 --> 00:12:02,720
all of them so one of the limitation of

141
00:12:02,720 --> 00:12:06,300
this module was like someone adds a

142
00:12:06,300 --> 00:12:08,340
chameleon module and then if you wants

143
00:12:08,340 --> 00:12:12,360
to export to our lua module because we

144
00:12:12,360 --> 00:12:15,330
exported to Lourdes s heart module zip

145
00:12:15,330 --> 00:12:20,190
routing we require to add to upload

146
00:12:20,190 --> 00:12:23,960
another wrapper so that was a bit of

147
00:12:23,960 --> 00:12:26,970
overhead and also the up low I had to

148
00:12:26,970 --> 00:12:29,090
bound to our module we have some

149
00:12:29,090 --> 00:12:32,250
intermodule interface and things like

150
00:12:32,250 --> 00:12:34,370
that but still was not like

151
00:12:34,370 --> 00:12:38,430
automatically however he this kind of

152
00:12:38,430 --> 00:12:41,170
scripting was

153
00:12:41,170 --> 00:12:46,000
quite useful I use it in many of my

154
00:12:46,000 --> 00:12:47,860
deployments at the beginning for example

155
00:12:47,860 --> 00:12:50,740
we didn't have like an HTTP client and I

156
00:12:50,740 --> 00:12:53,980
will use luau with the the the HTTP

157
00:12:53,980 --> 00:12:57,040
module to do queries and fetch like JSON

158
00:12:57,040 --> 00:13:00,070
documents and then handle it inside the

159
00:13:00,070 --> 00:13:06,360
Camellia configuration file so

160
00:13:06,360 --> 00:13:12,370
practically like last year in spring I

161
00:13:12,370 --> 00:13:14,410
didn't analyzing and we are doing quite

162
00:13:14,410 --> 00:13:17,130
well with you know handling document

163
00:13:17,130 --> 00:13:19,810
information you know we have parsed in

164
00:13:19,810 --> 00:13:21,600
the config file for JSON XML

165
00:13:21,600 --> 00:13:25,000
serialization you know comma separated

166
00:13:25,000 --> 00:13:27,490
list and so on for the transport

167
00:13:27,490 --> 00:13:30,400
meanwhile who had the HTTP client but

168
00:13:30,400 --> 00:13:34,240
also JSON RPC clients if you couldn't

169
00:13:34,240 --> 00:13:37,270
connect with other API services even by

170
00:13:37,270 --> 00:13:39,670
sip or build your own protocol as we

171
00:13:39,670 --> 00:13:44,380
give you a basic connector for it but

172
00:13:44,380 --> 00:13:47,290
the controller's again the one that was

173
00:13:47,290 --> 00:13:51,430
actually requiring changes in many

174
00:13:51,430 --> 00:13:55,560
places the interpreter and we had this

175
00:13:55,560 --> 00:13:58,150
embedded execution inside the config

176
00:13:58,150 --> 00:14:01,270
file or better said inline execution in

177
00:14:01,270 --> 00:14:04,270
the config file that was a bit like okay

178
00:14:04,270 --> 00:14:06,910
I have my config file here and I have a

179
00:14:06,910 --> 00:14:09,220
lower script there and from my config

180
00:14:09,220 --> 00:14:13,830
file i execute parts of that Lua script

181
00:14:13,830 --> 00:14:17,910
and again those limitation mainly on

182
00:14:17,910 --> 00:14:21,970
reload and language extension double or

183
00:14:21,970 --> 00:14:24,580
other kind of arithmetic operations that

184
00:14:24,580 --> 00:14:27,930
people want to use now for random

185
00:14:27,930 --> 00:14:30,520
decisions because for example what could

186
00:14:30,520 --> 00:14:32,440
happen in a real-time communication if

187
00:14:32,440 --> 00:14:34,090
it's a black out of the network and you

188
00:14:34,090 --> 00:14:37,570
are a big customer like a big customer

189
00:14:37,570 --> 00:14:40,380
user base if you're like 10 million

190
00:14:40,380 --> 00:14:43,360
phones connecting to your service and

191
00:14:43,360 --> 00:14:46,000
the network is down then in ten minutes

192
00:14:46,000 --> 00:14:49,320
you get ten millions registration at a

193
00:14:49,320 --> 00:14:52,300
moment and you need to randomize that

194
00:14:52,300 --> 00:14:52,819
because you

195
00:14:52,819 --> 00:14:56,179
you want like tsunamis coming every 20

196
00:14:56,179 --> 00:14:58,309
minutes when telephones register so you

197
00:14:58,309 --> 00:15:00,289
have to reject in the first face telling

198
00:15:00,289 --> 00:15:02,269
to the phone we register in two minutes

199
00:15:02,269 --> 00:15:06,109
and you need sometimes a bit more you

200
00:15:06,109 --> 00:15:11,569
know this kind of math operations so the

201
00:15:11,569 --> 00:15:14,419
solution is after discussing like making

202
00:15:14,419 --> 00:15:18,529
the active part possible to be executed

203
00:15:18,529 --> 00:15:21,019
in different scripting languages and

204
00:15:21,019 --> 00:15:23,589
actually we are now just to release

205
00:15:23,589 --> 00:15:29,089
camellia five zero as we labeled the

206
00:15:29,089 --> 00:15:31,749
version number probably by end of

207
00:15:31,749 --> 00:15:35,629
February we'll be out there and all

208
00:15:35,629 --> 00:15:37,489
those rotten blocks that I had an

209
00:15:37,489 --> 00:15:41,209
example before and I'll have some

210
00:15:41,209 --> 00:15:48,439
comparison next could be now in the full

211
00:15:48,439 --> 00:15:51,979
in Lua and right now JavaScript and

212
00:15:51,979 --> 00:15:54,109
Python Perl hasn't been extended because

213
00:15:54,109 --> 00:15:57,529
needs to just hope to a interface that

214
00:15:57,529 --> 00:15:59,600
we call it camellia embedded interface

215
00:15:59,600 --> 00:16:02,389
which practically it's a kind of

216
00:16:02,389 --> 00:16:05,419
abstract structure each module exports

217
00:16:05,419 --> 00:16:10,489
to this list of chemists ruptures and

218
00:16:10,489 --> 00:16:13,399
then each language embedded language

219
00:16:13,399 --> 00:16:15,559
module it's fetching from there and

220
00:16:15,559 --> 00:16:20,149
exporting to Lua Python and so on so

221
00:16:20,149 --> 00:16:22,159
again the core parameters of our

222
00:16:22,159 --> 00:16:24,769
application logic modules camellia

223
00:16:24,769 --> 00:16:27,919
modules not Lua modules just not to be

224
00:16:27,919 --> 00:16:31,489
any confusion and setting the parameters

225
00:16:31,489 --> 00:16:35,629
for camellia modules it still has to be

226
00:16:35,629 --> 00:16:39,499
on native oil but then you can specify

227
00:16:39,499 --> 00:16:43,729
the routing scripting language for the

228
00:16:43,729 --> 00:16:47,419
active part so by putting this CFG

229
00:16:47,419 --> 00:16:50,059
engine if you don't set it will be the

230
00:16:50,059 --> 00:16:52,029
native one but you can set it to lower

231
00:16:52,029 --> 00:16:56,899
to Python or Java Script with duct tape

232
00:16:56,899 --> 00:16:59,539
it's an interpreter that it's easy to

233
00:16:59,539 --> 00:17:02,989
embed and actually it's practically like

234
00:17:02,989 --> 00:17:05,240
Lua if you really need to do something

235
00:17:05,240 --> 00:17:06,380
and you're familiar with

236
00:17:06,380 --> 00:17:09,619
you want to do it for JavaScript this is

237
00:17:09,619 --> 00:17:11,810
following the same concept with states

238
00:17:11,810 --> 00:17:13,910
and so on and is just changing some

239
00:17:13,910 --> 00:17:15,829
structure sometimes it was like taking

240
00:17:15,829 --> 00:17:18,160
the Lua function and changing from

241
00:17:18,160 --> 00:17:22,250
lowest state structure to gestate or

242
00:17:22,250 --> 00:17:27,069
something ducked state as I said before

243
00:17:27,069 --> 00:17:31,160
we had this module exported to Lua SR

244
00:17:31,160 --> 00:17:35,090
where we exported our C function to Lua

245
00:17:35,090 --> 00:17:38,120
script not to break that I exported

246
00:17:38,120 --> 00:17:41,450
another one case are so camellia ship

247
00:17:41,450 --> 00:17:46,220
routing and there is no need to touch

248
00:17:46,220 --> 00:17:51,410
our lower module to export from your

249
00:17:51,410 --> 00:17:53,870
camera module you just have to put it in

250
00:17:53,870 --> 00:17:58,100
your chameleon module I want to export

251
00:17:58,100 --> 00:18:00,110
to kami interface dysfunctions and

252
00:18:00,110 --> 00:18:03,620
that's it so no more C coding in at Lua

253
00:18:03,620 --> 00:18:08,750
and again you put everything as a script

254
00:18:08,750 --> 00:18:10,550
you don't have like or out block

255
00:18:10,550 --> 00:18:13,280
incoming executing function from a Lua

256
00:18:13,280 --> 00:18:16,640
script or executing a full Lua script so

257
00:18:16,640 --> 00:18:18,920
here it's a comparison actually what it

258
00:18:18,920 --> 00:18:21,710
would be native this is native a request

259
00:18:21,710 --> 00:18:24,320
route and this is Lua

260
00:18:24,320 --> 00:18:27,500
in lower there's some predefined names

261
00:18:27,500 --> 00:18:30,920
for a function that are executed for

262
00:18:30,920 --> 00:18:32,690
example request route is executed when

263
00:18:32,690 --> 00:18:38,090
we get a sip request the equivalent of

264
00:18:38,090 --> 00:18:40,700
that would be defining a function case

265
00:18:40,700 --> 00:18:44,570
our request route and then you can start

266
00:18:44,570 --> 00:18:48,290
executing other function that we export

267
00:18:48,290 --> 00:18:52,610
in side the what you want you implement

268
00:18:52,610 --> 00:18:55,820
inside the Louis script so practically

269
00:18:55,820 --> 00:18:59,180
here we call the route breaking it that

270
00:18:59,180 --> 00:19:03,080
would be like a function and there it's

271
00:19:03,080 --> 00:19:05,200
up to you to choose the name because

272
00:19:05,200 --> 00:19:08,180
case our underscore out reckon it it was

273
00:19:08,180 --> 00:19:13,210
just my option here to make it a bit of

274
00:19:13,210 --> 00:19:15,800
equivalent but instead of that it's up

275
00:19:15,800 --> 00:19:18,380
to you to choose a name for the function

276
00:19:18,380 --> 00:19:20,090
that we execute in the script is

277
00:19:20,090 --> 00:19:25,400
no longer mandatory to have like kiss

278
00:19:25,400 --> 00:19:29,090
our quiz route so I use some similar

279
00:19:29,090 --> 00:19:33,140
names for the sub routes similar names

280
00:19:33,140 --> 00:19:36,590
for the lua functions and then you see

281
00:19:36,590 --> 00:19:40,880
here like execution of a a function

282
00:19:40,880 --> 00:19:44,659
exported by comma helicase our module

283
00:19:44,659 --> 00:19:47,750
like getting a variable checking if a

284
00:19:47,750 --> 00:19:50,330
transaction exists case RTM it's our

285
00:19:50,330 --> 00:19:52,940
module transaction management and T

286
00:19:52,940 --> 00:19:55,010
check trans tells if it's a

287
00:19:55,010 --> 00:19:57,200
retransmission of that request and then

288
00:19:57,200 --> 00:20:01,970
you can decide what to do again we have

289
00:20:01,970 --> 00:20:05,029
sub routes in camarillo like her out and

290
00:20:05,029 --> 00:20:06,770
i detect this is part of our default

291
00:20:06,770 --> 00:20:08,539
config file it's why I use it for the

292
00:20:08,539 --> 00:20:10,850
example so people can make want one

293
00:20:10,850 --> 00:20:15,340
relation here I define function case our

294
00:20:15,340 --> 00:20:18,860
route not detect again my choice of name

295
00:20:18,860 --> 00:20:20,840
this time you could change it to

296
00:20:20,840 --> 00:20:23,510
something else completely and inside it

297
00:20:23,510 --> 00:20:28,850
you use this function exported by comma

298
00:20:28,850 --> 00:20:33,110
ilho case our module of course this is

299
00:20:33,110 --> 00:20:36,110
one-to-one relation but the I think it's

300
00:20:36,110 --> 00:20:38,240
lower benefit would be to put something

301
00:20:38,240 --> 00:20:40,610
in between which is native in lua and

302
00:20:40,610 --> 00:20:42,200
it's an extension that in camellia

303
00:20:42,200 --> 00:20:44,120
doesn't exist it's where most of the

304
00:20:44,120 --> 00:20:47,120
people will add the new feature to their

305
00:20:47,120 --> 00:20:52,190
service besides this you know reloading

306
00:20:52,190 --> 00:20:54,649
this in the previous slide was like a

307
00:20:54,649 --> 00:20:59,960
basic service so I put here a link to a

308
00:20:59,960 --> 00:21:03,289
more complete configuration file that

309
00:21:03,289 --> 00:21:06,100
has like you know detecting attacks

310
00:21:06,100 --> 00:21:09,070
authentication authorization accounting

311
00:21:09,070 --> 00:21:12,350
location services net reversal so you

312
00:21:12,350 --> 00:21:16,970
can go to this link and you will see or

313
00:21:16,970 --> 00:21:21,970
actually program its

314
00:21:21,970 --> 00:21:24,679
maybe at the end I can show it if I have

315
00:21:24,679 --> 00:21:28,490
enough time so this would be the

316
00:21:28,490 --> 00:21:30,770
description and now actually I want to

317
00:21:30,770 --> 00:21:32,659
go a bit into the developer because for

318
00:21:32,659 --> 00:21:34,700
them it's about developers and actually

319
00:21:34,700 --> 00:21:36,770
I have also some question maybe some wot

320
00:21:36,770 --> 00:21:39,289
guys but also our guys from camellia

321
00:21:39,289 --> 00:21:40,970
because they are some of them that

322
00:21:40,970 --> 00:21:43,130
really work with this module you and

323
00:21:43,130 --> 00:21:46,190
Victor here there are also very good

324
00:21:46,190 --> 00:21:50,059
friends of luan so again

325
00:21:50,059 --> 00:21:53,240
summarizing we have to be fast very fast

326
00:21:53,240 --> 00:21:56,600
because there are deployments out there

327
00:21:56,600 --> 00:21:58,700
using it and there millions of active

328
00:21:58,700 --> 00:22:02,120
users and some of them are not targeting

329
00:22:02,120 --> 00:22:03,860
residential but they are like carriers

330
00:22:03,860 --> 00:22:06,260
in routing like several billions of

331
00:22:06,260 --> 00:22:14,659
minutes per month so that's a critical

332
00:22:14,659 --> 00:22:17,539
feature we call it like transaction or

333
00:22:17,539 --> 00:22:19,730
call setups per second because again we

334
00:22:19,730 --> 00:22:22,100
don't deal with media for our job is to

335
00:22:22,100 --> 00:22:24,919
connect people after that if you want to

336
00:22:24,919 --> 00:22:27,230
use out your video we have a helper

337
00:22:27,230 --> 00:22:29,659
application in case of not traversal but

338
00:22:29,659 --> 00:22:32,990
typically simply supposed to be like

339
00:22:32,990 --> 00:22:39,320
peer-to-peer direct media streams I want

340
00:22:39,320 --> 00:22:42,230
to be dynamic again we have our modules

341
00:22:42,230 --> 00:22:47,029
is not easy to know which module user

342
00:22:47,029 --> 00:22:51,880
wants to use in its config file and then

343
00:22:51,880 --> 00:22:55,340
exporting what that module does to Lua

344
00:22:55,340 --> 00:22:59,740
has to be done without really changing

345
00:22:59,740 --> 00:23:07,039
Lua our Lua module at Lua and also I was

346
00:23:07,039 --> 00:23:09,080
looking to preserve as much as possible

347
00:23:09,080 --> 00:23:12,919
the experience from our native scripting

348
00:23:12,919 --> 00:23:15,140
language and one of the feature I found

349
00:23:15,140 --> 00:23:17,510
it a bit tricky was this stop of the

350
00:23:17,510 --> 00:23:20,240
execution of the routing script what

351
00:23:20,240 --> 00:23:22,429
income ILO config file is the exit

352
00:23:22,429 --> 00:23:25,250
because the exit from Lua it's actually

353
00:23:25,250 --> 00:23:26,990
stopping the interpreter the interpreter

354
00:23:26,990 --> 00:23:28,789
is Camellia now because it's already

355
00:23:28,789 --> 00:23:31,399
embedded there killing camellia probably

356
00:23:31,399 --> 00:23:33,320
nobody wants to have right

357
00:23:33,320 --> 00:23:36,530
for each call like we have okay out

358
00:23:36,530 --> 00:23:38,900
relay exit that would mean relay and

359
00:23:38,900 --> 00:23:45,500
kill camellia so the solution for for

360
00:23:45,500 --> 00:23:49,010
this one as it was the simple node one

361
00:23:49,010 --> 00:23:51,020
of the simples that I could find and

362
00:23:51,020 --> 00:23:54,380
maybe someone has other ideas if there

363
00:23:54,380 --> 00:23:56,780
are more familiar with law was using the

364
00:23:56,780 --> 00:23:57,470
error

365
00:23:57,470 --> 00:24:01,400
so error practically it's stopping the

366
00:24:01,400 --> 00:24:02,690
config file it's drawing like an

367
00:24:02,690 --> 00:24:06,140
exception more or less and I do it with

368
00:24:06,140 --> 00:24:08,840
a special string so when you call error

369
00:24:08,840 --> 00:24:10,670
you have to give a message for the error

370
00:24:10,670 --> 00:24:14,240
and I choose a string like this tilde

371
00:24:14,240 --> 00:24:19,010
tilde Kara case our exit and I catch it

372
00:24:19,010 --> 00:24:22,220
inside comma elio in whopper to the Lua

373
00:24:22,220 --> 00:24:27,170
interpreter and by that I emulated the

374
00:24:27,170 --> 00:24:29,870
exit and seems to be fine I was looking

375
00:24:29,870 --> 00:24:32,600
at eventually optimize it a bit more

376
00:24:32,600 --> 00:24:35,290
instead of a string to try to use some

377
00:24:35,290 --> 00:24:38,090
integer values there but it was fast

378
00:24:38,090 --> 00:24:44,000
enough for what I need it so this is the

379
00:24:44,000 --> 00:24:46,820
implementation of the the exit inside

380
00:24:46,820 --> 00:24:51,350
the our module case sorry you'll have to

381
00:24:51,350 --> 00:24:54,620
use this function don't use the low exit

382
00:24:54,620 --> 00:24:58,130
use case our X from extensions and exit

383
00:24:58,130 --> 00:25:00,500
so it's not exported by another camera

384
00:25:00,500 --> 00:25:04,790
module its exported by up lower this

385
00:25:04,790 --> 00:25:06,620
would be the implementation and here is

386
00:25:06,620 --> 00:25:08,360
how we handle this is the main function

387
00:25:08,360 --> 00:25:12,110
that executes slower script and get the

388
00:25:12,110 --> 00:25:14,390
response and at some point if it was a

389
00:25:14,390 --> 00:25:16,340
narrower we actually check to see if is

390
00:25:16,340 --> 00:25:19,100
that string and if is that string we

391
00:25:19,100 --> 00:25:20,960
don't actually say it's an error we know

392
00:25:20,960 --> 00:25:22,760
that actually the user wanted to do an

393
00:25:22,760 --> 00:25:28,010
exit of the execution now going to the

394
00:25:28,010 --> 00:25:33,310
next one that I had the dynamic and fast

395
00:25:33,310 --> 00:25:35,990
the initial approach was like how I

396
00:25:35,990 --> 00:25:39,650
export some modules to our case are

397
00:25:39,650 --> 00:25:41,930
based on what other chameleon modules

398
00:25:41,930 --> 00:25:43,850
are loaded so practically on the case

399
00:25:43,850 --> 00:25:45,680
art and the module name income alert

400
00:25:45,680 --> 00:25:47,000
EMSL and then

401
00:25:47,000 --> 00:25:50,000
functions and this could be dynamic and

402
00:25:50,000 --> 00:25:52,490
the first solution I found out there was

403
00:25:52,490 --> 00:25:55,700
changing the index of the hash table

404
00:25:55,700 --> 00:25:57,560
because in lieu up pretty much

405
00:25:57,560 --> 00:25:59,420
everything it's a hash table including a

406
00:25:59,420 --> 00:26:01,910
module and you have the option to change

407
00:26:01,910 --> 00:26:04,550
the index of that module so I mean

408
00:26:04,550 --> 00:26:06,980
instead of just looking for a function

409
00:26:06,980 --> 00:26:09,290
inside the law interpreter will execute

410
00:26:09,290 --> 00:26:12,290
the C function which will look up the

411
00:26:12,290 --> 00:26:14,390
common ileac station and we'll execute

412
00:26:14,390 --> 00:26:17,630
that and actually it was working quite

413
00:26:17,630 --> 00:26:19,790
fine but at some point I always start

414
00:26:19,790 --> 00:26:22,250
wondering if I'm not too intrusive in

415
00:26:22,250 --> 00:26:28,940
inside the Lua and changing that indexes

416
00:26:28,940 --> 00:26:31,160
of the function felt like maybe this you

417
00:26:31,160 --> 00:26:33,620
know the guy that really developed this

418
00:26:33,620 --> 00:26:35,690
module find new solution you know

419
00:26:35,690 --> 00:26:37,460
computers evolved their different

420
00:26:37,460 --> 00:26:42,080
optimization that may do there and then

421
00:26:42,080 --> 00:26:45,470
is more like just messing around more

422
00:26:45,470 --> 00:26:48,920
with it it was rather simple my test was

423
00:26:48,920 --> 00:26:52,640
really fast this is practically the

424
00:26:52,640 --> 00:26:55,580
index function so instead of using the

425
00:26:55,580 --> 00:26:57,950
native Lua index I had to implement a

426
00:26:57,950 --> 00:27:00,740
small rubber inside comma area which is

427
00:27:00,740 --> 00:27:03,440
searching in the list of the existing

428
00:27:03,440 --> 00:27:06,920
loaded modules and finding the the

429
00:27:06,920 --> 00:27:13,120
function that was supposed to run again

430
00:27:13,120 --> 00:27:20,300
summary of this approach and my concern

431
00:27:20,300 --> 00:27:24,440
about this was you know just messing up

432
00:27:24,440 --> 00:27:27,500
with the index capability might not be

433
00:27:27,500 --> 00:27:30,590
the right approach so then I went for

434
00:27:30,590 --> 00:27:32,060
the second actually both of them are

435
00:27:32,060 --> 00:27:34,400
still present we could change it very

436
00:27:34,400 --> 00:27:36,320
quickly it's probably two or three lines

437
00:27:36,320 --> 00:27:37,790
of code to change from one to another

438
00:27:37,790 --> 00:27:41,000
because the the embedded interface stays

439
00:27:41,000 --> 00:27:49,280
the same I went for kind of making

440
00:27:49,280 --> 00:27:52,880
one-to-one relation by estimating the

441
00:27:52,880 --> 00:27:55,610
maximum number of function to be

442
00:27:55,610 --> 00:27:58,130
exported by camarillo modules and I

443
00:27:58,130 --> 00:28:00,080
looked and I said okay people

444
00:28:00,080 --> 00:28:03,950
I combine like 20 50 modules TM is the

445
00:28:03,950 --> 00:28:07,309
largest 100 exported function okay we

446
00:28:07,309 --> 00:28:09,200
don't export all of them to lure and

447
00:28:09,200 --> 00:28:11,570
actually makes no sense to export all

448
00:28:11,570 --> 00:28:13,700
camera area functions to lure like sub

449
00:28:13,700 --> 00:28:17,179
string it's or rather string you know

450
00:28:17,179 --> 00:28:19,340
parsing function they're also in Lua so

451
00:28:19,340 --> 00:28:21,289
exporting what we did in camellia for

452
00:28:21,289 --> 00:28:23,149
our config file makes no sense to do

453
00:28:23,149 --> 00:28:28,519
like search you know I decided to go now

454
00:28:28,519 --> 00:28:35,330
with like 1024 regenerated wrappers so

455
00:28:35,330 --> 00:28:38,350
pre generated C functions which

456
00:28:38,350 --> 00:28:42,130
practically inside them they execute

457
00:28:42,130 --> 00:28:45,940
common function with an index so

458
00:28:45,940 --> 00:28:48,529
practically I have a table at the

459
00:28:48,529 --> 00:28:53,570
beginning this is populated up to like

460
00:28:53,570 --> 00:28:56,990
from this function with 0 up to 1000 23

461
00:28:56,990 --> 00:28:59,840
and this would be empty and as we load

462
00:28:59,840 --> 00:29:02,210
modules in camarillo we put here

463
00:29:02,210 --> 00:29:05,570
what's exported to cami interface we

464
00:29:05,570 --> 00:29:07,309
populate the second part of the table

465
00:29:07,309 --> 00:29:12,740
and then practically when the lava the

466
00:29:12,740 --> 00:29:16,370
function is executed in lua script this

467
00:29:16,370 --> 00:29:18,860
gets executed but inside it was in the

468
00:29:18,860 --> 00:29:22,070
next slide is practically saying execute

469
00:29:22,070 --> 00:29:26,750
this part of the array by index so we

470
00:29:26,750 --> 00:29:28,850
have the index coming from the left side

471
00:29:28,850 --> 00:29:32,210
to point to the right side which is the

472
00:29:32,210 --> 00:29:37,159
wrapper around comma Ilha function so

473
00:29:37,159 --> 00:29:40,010
again we start with an empty table on

474
00:29:40,010 --> 00:29:42,500
the right side we load module and comma

475
00:29:42,500 --> 00:29:46,789
Helio startup will populate this second

476
00:29:46,789 --> 00:29:50,450
table so that function that's on the

477
00:29:50,450 --> 00:29:52,159
left side in the previous table it's

478
00:29:52,159 --> 00:29:55,549
practically that four lines up there is

479
00:29:55,549 --> 00:29:57,590
just a wrapper to another one giving the

480
00:29:57,590 --> 00:30:01,809
index so is low estate plus the index

481
00:30:02,720 --> 00:30:05,539
and they are generated they are

482
00:30:05,539 --> 00:30:07,519
statically generated right now it's a

483
00:30:07,519 --> 00:30:10,369
script inside that our module applaud

484
00:30:10,369 --> 00:30:12,409
that generates it we'll have to increase

485
00:30:12,409 --> 00:30:15,470
it if someone complains that is not

486
00:30:15,470 --> 00:30:19,489
enough and this is the structure that

487
00:30:19,489 --> 00:30:23,029
it's in the right side so practically

488
00:30:23,029 --> 00:30:25,759
would be this kami is the structure that

489
00:30:25,759 --> 00:30:30,200
points to our module function and the C

490
00:30:30,200 --> 00:30:32,989
function corresponding to it and again

491
00:30:32,989 --> 00:30:35,359
initially this is practically the table

492
00:30:35,359 --> 00:30:39,619
it's also statically defined left side

493
00:30:39,619 --> 00:30:41,450
it's populated with pointers of the

494
00:30:41,450 --> 00:30:43,249
function the second side will be

495
00:30:43,249 --> 00:30:52,039
populated at startup and here it's okay

496
00:30:52,039 --> 00:30:53,779
getting the index based on what's

497
00:30:53,779 --> 00:30:57,799
executed by the code that so practically

498
00:30:57,799 --> 00:31:00,519
this function it's executed by all those

499
00:31:00,519 --> 00:31:03,679
statically generated and we'll get the

500
00:31:03,679 --> 00:31:07,580
index and the index returns that wrapper

501
00:31:07,580 --> 00:31:11,149
we have for our camellia modules so I

502
00:31:11,149 --> 00:31:12,739
did that testing with the second

503
00:31:12,739 --> 00:31:15,529
approach and practically there is no

504
00:31:15,529 --> 00:31:17,450
difference

505
00:31:17,450 --> 00:31:22,340
this is microseconds and that's not even

506
00:31:22,340 --> 00:31:24,799
do la for a rather complex configuration

507
00:31:24,799 --> 00:31:27,710
file so practically there every DS model

508
00:31:27,710 --> 00:31:31,009
is the same I couldn't notice sometimes

509
00:31:31,009 --> 00:31:34,580
it was even better the less the maximum

510
00:31:34,580 --> 00:31:36,710
was actually better for Lua this is one

511
00:31:36,710 --> 00:31:38,389
of the example because again it was

512
00:31:38,389 --> 00:31:41,419
really no difference we kind of execute

513
00:31:41,419 --> 00:31:45,529
more or less by pointer we have a single

514
00:31:45,529 --> 00:31:49,070
step of finding the function pointer by

515
00:31:49,070 --> 00:31:55,249
an index so the benefits here and I'm

516
00:31:55,249 --> 00:31:59,749
getting very fast and of course Lu as a

517
00:31:59,749 --> 00:32:03,200
better documentation and it's a larger

518
00:32:03,200 --> 00:32:06,200
set of extension if you know blue.i

519
00:32:06,200 --> 00:32:10,159
extension for what a lot of other things

520
00:32:10,159 --> 00:32:12,169
also testing now should be easier

521
00:32:12,169 --> 00:32:13,849
because you are some testing framework

522
00:32:13,849 --> 00:32:15,799
that you could put inside your config

523
00:32:15,799 --> 00:32:16,549
file

524
00:32:16,549 --> 00:32:19,669
and one of the most demanded from

525
00:32:19,669 --> 00:32:22,599
camellias ID you can do the load of this

526
00:32:22,599 --> 00:32:25,309
scripting language I give here an

527
00:32:25,309 --> 00:32:28,399
example of like real benefit will be

528
00:32:28,399 --> 00:32:30,830
sending the Twitter message when you get

529
00:32:30,830 --> 00:32:33,080
when you have a missed call so I'm

530
00:32:33,080 --> 00:32:34,789
calling you you don't answer then the

531
00:32:34,789 --> 00:32:36,820
server could send your direct message

532
00:32:36,820 --> 00:32:40,729
practically you'll have to keep a

533
00:32:40,729 --> 00:32:42,950
mapping so here it's a table you have to

534
00:32:42,950 --> 00:32:45,409
define create it and keep the mapping

535
00:32:45,409 --> 00:32:47,509
between Twitter user ID and CP user ID

536
00:32:47,509 --> 00:32:50,509
this would be the Lua script for sending

537
00:32:50,509 --> 00:32:53,329
a tweet so it's already a Twitter

538
00:32:53,329 --> 00:32:55,759
package and then you have to use this

539
00:32:55,759 --> 00:32:59,209
authentication tokens and then sending a

540
00:32:59,209 --> 00:33:01,869
message would be like just this

541
00:33:01,869 --> 00:33:04,309
implementing this as a chameleon module

542
00:33:04,309 --> 00:33:09,829
will be probably a lot of C code and I

543
00:33:09,829 --> 00:33:14,059
put here more resources that if you want

544
00:33:14,059 --> 00:33:18,829
to read one of quite important probably

545
00:33:18,829 --> 00:33:20,570
for Camarillo guys in the room would be

546
00:33:20,570 --> 00:33:23,899
listing the API is function available

547
00:33:23,899 --> 00:33:27,070
that we export will be this an RPC

548
00:33:27,070 --> 00:33:32,719
command API list and also reload you

549
00:33:32,719 --> 00:33:37,070
have direct links to to it this is the

550
00:33:37,070 --> 00:33:39,849
link where we document the for or the

551
00:33:39,849 --> 00:33:44,539
base are a package that Camaro exports

552
00:33:44,539 --> 00:33:48,259
to lo interpreter case our needs to to

553
00:33:48,259 --> 00:33:52,009
get its own documentation page I expect

554
00:33:52,009 --> 00:33:53,869
but again for case are you can list

555
00:33:53,869 --> 00:33:58,909
available functions with an RPC so you

556
00:33:58,909 --> 00:34:01,339
load your modules you do this command

557
00:34:01,339 --> 00:34:03,289
and you see what's available there the

558
00:34:03,289 --> 00:34:04,820
name of the function and the type of the

559
00:34:04,820 --> 00:34:07,459
parameters right now of course it's kind

560
00:34:07,459 --> 00:34:09,889
of like one-to-one relation to what's

561
00:34:09,889 --> 00:34:13,159
inside the configuration file so like T

562
00:34:13,159 --> 00:34:15,139
relay for sending out in transaction

563
00:34:15,139 --> 00:34:17,839
mode we'll have an equivalent case our

564
00:34:17,839 --> 00:34:22,760
name of the module typically TM dot t

565
00:34:22,760 --> 00:34:24,929
relay

566
00:34:24,929 --> 00:34:29,130
so as I wanted to have like five minutes

567
00:34:29,130 --> 00:34:35,010
discussion I'm ready with this and again

568
00:34:35,010 --> 00:34:38,080
I'm also open for suggestion if someone

569
00:34:38,080 --> 00:34:41,100
more familiar with Loic would give us

570
00:34:41,100 --> 00:34:44,889
better solution for I don't this exit or

571
00:34:44,889 --> 00:34:49,210
for you know dynamically at the startup

572
00:34:49,210 --> 00:34:58,980
of the interpreter plugging ok so

573
00:34:58,980 --> 00:35:01,980
questions

574
00:35:03,000 --> 00:35:09,380
yep so you said that you lost em cool

575
00:35:09,380 --> 00:35:13,290
native things in from Lewis so you give

576
00:35:13,290 --> 00:35:14,580
them access to all the standard

577
00:35:14,580 --> 00:35:16,140
libraries yeah

578
00:35:16,140 --> 00:35:20,880
so we trust our users yeah

579
00:35:20,880 --> 00:35:23,369
so we give full access we don't try to

580
00:35:23,369 --> 00:35:25,590
limit it just try to document it because

581
00:35:25,590 --> 00:35:27,720
also in camellia we have a function

582
00:35:27,720 --> 00:35:29,700
that's called abort because sometimes

583
00:35:29,700 --> 00:35:32,400
it's used to make a crash and you want

584
00:35:32,400 --> 00:35:36,090
to get the core damp so practically

585
00:35:36,090 --> 00:35:37,650
Kyler doesn't do anything if you don't

586
00:35:37,650 --> 00:35:39,240
have a scripting language so we give

587
00:35:39,240 --> 00:35:43,650
full power to our users and if it's

588
00:35:43,650 --> 00:35:45,119
crashing it's their problem not ours

589
00:35:45,119 --> 00:35:55,560
we're open source thank you for coming

590
00:35:55,560 --> 00:35:58,440
now I see a big group of people and

591
00:35:58,440 --> 00:36:00,599
again thank you to all the fold them

592
00:36:00,599 --> 00:36:04,470
organized errs and admin of the rooms

593
00:36:04,470 --> 00:36:08,010
because without them would be no for

594
00:36:08,010 --> 00:36:10,280
them

