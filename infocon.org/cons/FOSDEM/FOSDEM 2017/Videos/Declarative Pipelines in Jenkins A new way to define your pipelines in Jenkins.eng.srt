1
00:00:00,000 --> 00:00:03,469
pipeline happens in a stage

2
00:00:04,490 --> 00:00:06,680
there's nothing running outside of

3
00:00:06,680 --> 00:00:09,430
stages this will work better with

4
00:00:09,430 --> 00:00:12,860
visualization I including the existing

5
00:00:12,860 --> 00:00:16,040
stage view plugin and the in beta for a

6
00:00:16,040 --> 00:00:19,070
little bit longer blue ocean UI for

7
00:00:19,070 --> 00:00:22,369
Jenkins it's easier to look at any

8
00:00:22,369 --> 00:00:24,800
declarative pipeline and understand what

9
00:00:24,800 --> 00:00:27,980
it's doing than it is with a structured

10
00:00:27,980 --> 00:00:29,869
pipeline just as looking at any kind of

11
00:00:29,869 --> 00:00:32,479
configuration file is easier than

12
00:00:32,479 --> 00:00:34,940
looking at an arbitrary bash script

13
00:00:34,940 --> 00:00:37,579
because that's following certain rules

14
00:00:37,579 --> 00:00:40,969
it's more like configuration the

15
00:00:40,969 --> 00:00:43,010
structure also enables round-tripping

16
00:00:43,010 --> 00:00:45,320
with the visual editor which is got a

17
00:00:45,320 --> 00:00:47,120
beta coming out on Monday more detail on

18
00:00:47,120 --> 00:00:50,870
that later and the whole thing has been

19
00:00:50,870 --> 00:00:53,629
built with width and for blue ocean

20
00:00:53,629 --> 00:00:57,170
visualizations so we've got markings in

21
00:00:57,170 --> 00:00:59,179
blue ocean for stages that are skipped

22
00:00:59,179 --> 00:01:01,699
due to a failure in an earlier stage for

23
00:01:01,699 --> 00:01:05,059
stages that are skipped because you can

24
00:01:05,059 --> 00:01:07,010
decided to conditionally not execute it

25
00:01:07,010 --> 00:01:08,720
so we've got a predictable execution

26
00:01:08,720 --> 00:01:12,740
model and better visualization of that

27
00:01:12,740 --> 00:01:16,880
execution model now the error reporting

28
00:01:16,880 --> 00:01:18,979
which is one of the things I have had

29
00:01:18,979 --> 00:01:22,729
the most fun working on one of the

30
00:01:22,729 --> 00:01:24,530
biggest frustrations I've had with

31
00:01:24,530 --> 00:01:27,500
pipeline is running an hour-long build

32
00:01:27,500 --> 00:01:30,259
and then discovering 55 minutes into it

33
00:01:30,259 --> 00:01:32,570
that I have a typo in a variable name or

34
00:01:32,570 --> 00:01:34,850
a parameter name and the whole thing

35
00:01:34,850 --> 00:01:36,770
barfs out there's that there's no way

36
00:01:36,770 --> 00:01:38,810
for me to know ahead of time without

37
00:01:38,810 --> 00:01:43,009
executing it whether I actually have the

38
00:01:43,009 --> 00:01:45,409
right syntax have the right parameter

39
00:01:45,409 --> 00:01:48,950
types etc declarative does syntax and

40
00:01:48,950 --> 00:01:52,880
validation checking before actually

41
00:01:52,880 --> 00:01:54,439
executing the build it's at the very

42
00:01:54,439 --> 00:01:56,630
very beginning of the build it goes

43
00:01:56,630 --> 00:01:58,430
through make sure the syntax looks right

44
00:01:58,430 --> 00:02:05,240
make sure that we've got the right types

45
00:02:05,240 --> 00:02:07,670
on all of our steps make sure that we're

46
00:02:07,670 --> 00:02:09,880
not doing something completely insane

47
00:02:09,880 --> 00:02:14,540
and errors out at that time at the very

48
00:02:14,540 --> 00:02:16,520
very beginning of the build with errors

49
00:02:16,520 --> 00:02:17,069
that

50
00:02:17,069 --> 00:02:19,049
for today's compilation errors pointing

51
00:02:19,049 --> 00:02:21,420
to exactly where the air was telling you

52
00:02:21,420 --> 00:02:24,120
what the air was giving you suggestions

53
00:02:24,120 --> 00:02:25,560
for what you might have meant if you

54
00:02:25,560 --> 00:02:27,569
have a typo in a parameter name or

55
00:02:27,569 --> 00:02:31,829
something like that and through this

56
00:02:31,829 --> 00:02:33,870
we're able to eliminate many of the

57
00:02:33,870 --> 00:02:36,269
potentially confusing stack traces that

58
00:02:36,269 --> 00:02:38,189
pipeline can give you when things go

59
00:02:38,189 --> 00:02:40,170
wrong not all of them there are still

60
00:02:40,170 --> 00:02:44,939
some that can sneak through but I think

61
00:02:44,939 --> 00:02:46,919
a lot of the most commonly encountered

62
00:02:46,919 --> 00:02:48,930
and mystifying stack traces now instead

63
00:02:48,930 --> 00:02:50,669
will give you a clear error message

64
00:02:50,669 --> 00:02:53,400
about what's wrong in their definition

65
00:02:53,400 --> 00:02:55,799
of your pipeline rather than again

66
00:02:55,799 --> 00:02:57,209
waiting until the end of the build and

67
00:02:57,209 --> 00:03:01,079
saying oh yeah something went wrong and

68
00:03:01,079 --> 00:03:04,079
yeah we validate syntax we make sure

69
00:03:04,079 --> 00:03:06,389
we've got required configuration we make

70
00:03:06,389 --> 00:03:09,329
sure step parameter types match up and

71
00:03:09,329 --> 00:03:15,299
more so an important thing to touch on

72
00:03:15,299 --> 00:03:17,579
with declarative pipeline is is what

73
00:03:17,579 --> 00:03:20,669
this means for scripted pipeline in

74
00:03:20,669 --> 00:03:23,280
practice it doesn't mean anything both

75
00:03:23,280 --> 00:03:26,540
still exist the declarative pipeline is

76
00:03:26,540 --> 00:03:29,849
very much built on top of scripted

77
00:03:29,849 --> 00:03:32,759
pipeline it's not a separate thing it's

78
00:03:32,759 --> 00:03:37,949
a new syntax for pipeline and we're now

79
00:03:37,949 --> 00:03:40,590
calling traditional pipeline scripted

80
00:03:40,590 --> 00:03:43,079
pipeline so that you can distinguish

81
00:03:43,079 --> 00:03:44,609
between the two and understand their

82
00:03:44,609 --> 00:03:50,250
roles the visualizations like blue ocean

83
00:03:50,250 --> 00:03:52,290
and stage view don't see any difference

84
00:03:52,290 --> 00:03:57,180
between a run of a declarative pipeline

85
00:03:57,180 --> 00:03:59,849
versus a run of a scripted pipeline

86
00:03:59,849 --> 00:04:01,769
because they're all still just

87
00:04:01,769 --> 00:04:03,540
generating stages and running steps

88
00:04:03,540 --> 00:04:09,299
within stages so it's not not a

89
00:04:09,299 --> 00:04:10,620
different thing it's still the same

90
00:04:10,620 --> 00:04:12,239
execution engine it's a different way to

91
00:04:12,239 --> 00:04:16,380
use that execution engine and scripted

92
00:04:16,380 --> 00:04:18,298
pipeline is still used inside

93
00:04:18,298 --> 00:04:21,478
declarative pipeline all of your step

94
00:04:21,478 --> 00:04:24,060
invocations you're still using those

95
00:04:24,060 --> 00:04:27,479
there's still escape patches where you

96
00:04:27,479 --> 00:04:30,930
can use a more the full

97
00:04:30,930 --> 00:04:33,630
of scripted pipeline syntax without

98
00:04:33,630 --> 00:04:38,850
validation and you can always copy the

99
00:04:38,850 --> 00:04:41,580
by view your steps and contents from a

100
00:04:41,580 --> 00:04:45,780
declarative stage into a scripted

101
00:04:45,780 --> 00:04:47,699
pipeline and they'll work just fine it's

102
00:04:47,699 --> 00:04:50,479
a subset of the scripted pipeline syntax

103
00:04:50,479 --> 00:04:54,960
so declarative isn't meant to cover

104
00:04:54,960 --> 00:04:57,389
absolutely every use case that scripted

105
00:04:57,389 --> 00:05:00,330
pipeline does it's meant to cover a lot

106
00:05:00,330 --> 00:05:01,590
of them the ones that are fairly

107
00:05:01,590 --> 00:05:04,470
standard that are fairly predictable

108
00:05:04,470 --> 00:05:07,199
fairly consistent and when you need to

109
00:05:07,199 --> 00:05:08,490
go beyond that when you've got more

110
00:05:08,490 --> 00:05:11,310
complex logic or you just can't quite

111
00:05:11,310 --> 00:05:13,289
fit it in declarative that's when you

112
00:05:13,289 --> 00:05:19,199
move on to scripted so why did we write

113
00:05:19,199 --> 00:05:23,310
declarative pipelines so first of all

114
00:05:23,310 --> 00:05:24,479
we've got the reasons why we think

115
00:05:24,479 --> 00:05:26,759
everyone should be using pipeline it's

116
00:05:26,759 --> 00:05:29,130
the future of Jenkins it's also the

117
00:05:29,130 --> 00:05:33,120
present of Jenkins now pipeline gives

118
00:05:33,120 --> 00:05:35,610
you durability so that your builds can

119
00:05:35,610 --> 00:05:38,070
continue despite a master restart or a

120
00:05:38,070 --> 00:05:39,630
disconnect between the agent and the

121
00:05:39,630 --> 00:05:42,690
master gives you pipeline is code the

122
00:05:42,690 --> 00:05:44,520
Jenkins filed the ability to have your

123
00:05:44,520 --> 00:05:47,039
Jenkins build definition checked into

124
00:05:47,039 --> 00:05:48,659
source control versioned and source

125
00:05:48,659 --> 00:05:52,310
control alongside the rest of your code

126
00:05:52,310 --> 00:05:54,990
pipeline has a much more modern back-end

127
00:05:54,990 --> 00:05:57,659
implementation in the Jenkins internals

128
00:05:57,659 --> 00:05:59,729
than the traditional freestyle builds do

129
00:05:59,729 --> 00:06:03,389
which gives us a lot more potential for

130
00:06:03,389 --> 00:06:05,460
improvements and optimizations going

131
00:06:05,460 --> 00:06:10,020
forward and pipeline is more powerful

132
00:06:10,020 --> 00:06:11,820
and it's more flexible than traditional

133
00:06:11,820 --> 00:06:14,130
Jenkins jobs there was a great blog post

134
00:06:14,130 --> 00:06:18,320
that just went up last week I think on

135
00:06:18,320 --> 00:06:21,449
conditional build steps and how you can

136
00:06:21,449 --> 00:06:23,220
replace those in pipeline without

137
00:06:23,220 --> 00:06:25,440
jumping through quite the same weird

138
00:06:25,440 --> 00:06:27,780
hoops to put conditionality in a

139
00:06:27,780 --> 00:06:32,729
traditional Jenkins freestyle job so the

140
00:06:32,729 --> 00:06:34,050
way we see declare the reasons for

141
00:06:34,050 --> 00:06:35,610
declared is we want to have benefits for

142
00:06:35,610 --> 00:06:38,639
both new users of pipeline and existing

143
00:06:38,639 --> 00:06:40,590
users of pipeline I'm going to touch on

144
00:06:40,590 --> 00:06:42,539
the new user reasons first and I think

145
00:06:42,539 --> 00:06:44,610
these don't just apply to new use

146
00:06:44,610 --> 00:06:47,580
but two they're particularly relevant

147
00:06:47,580 --> 00:06:50,729
they're declarative has a lower barrier

148
00:06:50,729 --> 00:06:52,710
of entry than scripted pipelines it's

149
00:06:52,710 --> 00:06:55,860
not just throwing you at a blank text

150
00:06:55,860 --> 00:06:58,289
editor and saying here write a groovy

151
00:06:58,289 --> 00:07:03,710
script to run my build it has a sorry

152
00:07:03,710 --> 00:07:05,550
okay

153
00:07:05,550 --> 00:07:08,909
it has a predictable well defined and

154
00:07:08,909 --> 00:07:11,490
documented syntax they can tell you what

155
00:07:11,490 --> 00:07:15,060
you need to do how to do it etc and as I

156
00:07:15,060 --> 00:07:17,639
mentioned there's the upcoming UI editor

157
00:07:17,639 --> 00:07:19,889
so that you'll be able to actually go to

158
00:07:19,889 --> 00:07:22,020
Jenkins write your job through the

159
00:07:22,020 --> 00:07:25,319
editor it'll save down into a Jenkins

160
00:07:25,319 --> 00:07:28,199
file and round-trip etc so they you can

161
00:07:28,199 --> 00:07:29,939
get started without having to even touch

162
00:07:29,939 --> 00:07:32,189
the Jenkins file by hand we're not quite

163
00:07:32,189 --> 00:07:33,840
there yet with the editor but we will be

164
00:07:33,840 --> 00:07:36,960
soon declarative is more human readable

165
00:07:36,960 --> 00:07:38,849
again I said that it's more of a

166
00:07:38,849 --> 00:07:42,020
configuration feel than a script feel

167
00:07:42,020 --> 00:07:45,509
and while not saying configuration files

168
00:07:45,509 --> 00:07:48,419
are necessarily easy to read they tend

169
00:07:48,419 --> 00:07:51,500
to be easier to read than scripts

170
00:07:51,500 --> 00:07:53,610
declarative does not require groovy

171
00:07:53,610 --> 00:07:57,060
specific expertise now I don't think

172
00:07:57,060 --> 00:07:58,770
that pipe that scripted pipeline

173
00:07:58,770 --> 00:08:01,440
necessarily requires a lot of groovy

174
00:08:01,440 --> 00:08:04,020
specific expertise either but it can

175
00:08:04,020 --> 00:08:06,089
feel that way and when you get into more

176
00:08:06,089 --> 00:08:09,810
complicated things it can be that way so

177
00:08:09,810 --> 00:08:11,870
we wanted to make sure people didn't get

178
00:08:11,870 --> 00:08:15,060
intimidated by having to think they

179
00:08:15,060 --> 00:08:17,460
really need to learn a new language or

180
00:08:17,460 --> 00:08:19,349
write scripts and something they're not

181
00:08:19,349 --> 00:08:22,250
comfortable with just to run their build

182
00:08:22,250 --> 00:08:24,930
so we think that declarative is a better

183
00:08:24,930 --> 00:08:26,339
experience for someone who's just

184
00:08:26,339 --> 00:08:28,139
getting started with pipelines and for

185
00:08:28,139 --> 00:08:32,940
someone who's not not writing a ton of

186
00:08:32,940 --> 00:08:36,049
them or it's just part of their job and

187
00:08:36,049 --> 00:08:38,640
will help we hope that people will find

188
00:08:38,640 --> 00:08:40,130
that to be the case

189
00:08:40,130 --> 00:08:46,910
now while declarative is in large part

190
00:08:46,910 --> 00:08:52,050
directed at the kind of newer or more

191
00:08:52,050 --> 00:08:54,270
casual users we do think it will be

192
00:08:54,270 --> 00:08:57,110
really useful for the more

193
00:08:57,110 --> 00:09:01,259
advanced for existing users since

194
00:09:01,259 --> 00:09:03,630
declarative is using the same engine as

195
00:09:03,630 --> 00:09:05,940
scripted your existing investments in

196
00:09:05,940 --> 00:09:10,740
shared libraries and the like silh apply

197
00:09:10,740 --> 00:09:14,250
there's not a case we have to start over

198
00:09:14,250 --> 00:09:15,810
and learn a completely new thing you

199
00:09:15,810 --> 00:09:17,220
don't have to throw out all the work

200
00:09:17,220 --> 00:09:20,009
you've done just to switch over to using

201
00:09:20,009 --> 00:09:24,540
declarative and by expanding the usage

202
00:09:24,540 --> 00:09:27,720
and usability we're putting less burden

203
00:09:27,720 --> 00:09:31,399
on the Jenkins domain experts in a shop

204
00:09:31,399 --> 00:09:34,759
it's not like we want to make it so that

205
00:09:34,759 --> 00:09:37,319
you don't end up having to have one or

206
00:09:37,319 --> 00:09:39,569
two people who are the people who know

207
00:09:39,569 --> 00:09:41,339
how to write Jenkins jobs and so

208
00:09:41,339 --> 00:09:43,560
everybody else has to go through them to

209
00:09:43,560 --> 00:09:46,259
write a Jenkins job so it should

210
00:09:46,259 --> 00:09:48,540
hopefully lower the burden on the

211
00:09:48,540 --> 00:09:54,079
experts and empower everybody else more

212
00:09:54,620 --> 00:09:57,300
again since we're moving to this more

213
00:09:57,300 --> 00:09:58,980
configuration syntax we think that

214
00:09:58,980 --> 00:10:00,600
that's going to make collaboration and

215
00:10:00,600 --> 00:10:05,910
code review easier one thing the the

216
00:10:05,910 --> 00:10:08,069
error reporting I mentioned doesn't just

217
00:10:08,069 --> 00:10:10,380
work at the isn't just available at the

218
00:10:10,380 --> 00:10:12,360
beginning of the build there's also a

219
00:10:12,360 --> 00:10:17,100
CLI commanded more to come to run that

220
00:10:17,100 --> 00:10:19,800
linting or validation against a Jenkins

221
00:10:19,800 --> 00:10:21,990
file without even having to run a build

222
00:10:21,990 --> 00:10:24,720
so you can get a faster feedback loop on

223
00:10:24,720 --> 00:10:26,819
whether you've actually written a valid

224
00:10:26,819 --> 00:10:31,050
Jenkins file and we also think there's a

225
00:10:31,050 --> 00:10:34,709
real value in separation of the Jenkins

226
00:10:34,709 --> 00:10:36,779
infrastructure related configuration

227
00:10:36,779 --> 00:10:40,829
like what are my agent names like what

228
00:10:40,829 --> 00:10:43,110
tools do I need installed from the step

229
00:10:43,110 --> 00:10:45,800
execution so that you don't have the

230
00:10:45,800 --> 00:10:49,740
configuration interwoven with the build

231
00:10:49,740 --> 00:10:52,139
steps so that you can more easily see oh

232
00:10:52,139 --> 00:10:54,329
this is the stuff that I need to change

233
00:10:54,329 --> 00:10:55,829
when I'm copying it over to a new master

234
00:10:55,829 --> 00:11:01,920
or I can go as an admin go change the

235
00:11:01,920 --> 00:11:04,230
you know label everywhere but I don't

236
00:11:04,230 --> 00:11:05,699
have to worry about oh but some are deep

237
00:11:05,699 --> 00:11:07,410
in the steps of this one build maybe

238
00:11:07,410 --> 00:11:09,839
they do something different with it we

239
00:11:09,839 --> 00:11:10,810
think that

240
00:11:10,810 --> 00:11:12,850
separation is going to lead to easier

241
00:11:12,850 --> 00:11:17,260
maintainability and easier scaling so

242
00:11:17,260 --> 00:11:19,750
now let's do a walk-through of the

243
00:11:19,750 --> 00:11:25,570
syntax hold on one sec need to make sure

244
00:11:25,570 --> 00:11:30,220
my presenter notes show up you can't

245
00:11:30,220 --> 00:11:32,020
read this so we're gonna move on it's

246
00:11:32,020 --> 00:11:33,910
just an example of scripted pipeline and

247
00:11:33,910 --> 00:11:35,110
declarative pipeline

248
00:11:35,110 --> 00:11:37,080
don't worry there's a lot better

249
00:11:37,080 --> 00:11:39,250
visualization later I just wanted to

250
00:11:39,250 --> 00:11:41,710
keep this so I could make a point that

251
00:11:41,710 --> 00:11:43,600
it's not necessarily the case that

252
00:11:43,600 --> 00:11:46,870
declarative is going to be shorter for

253
00:11:46,870 --> 00:11:50,440
all of the pipelines in terms of text

254
00:11:50,440 --> 00:11:53,160
you know the scripted pipeline is

255
00:11:53,160 --> 00:11:55,330
shorter than the declarative pipeline

256
00:11:55,330 --> 00:11:57,310
declarative pipeline is a little verbose

257
00:11:57,310 --> 00:11:59,980
at times because we believe that the

258
00:11:59,980 --> 00:12:02,080
verbosity provides more information

259
00:12:02,080 --> 00:12:04,390
makes it easier to understand and use

260
00:12:04,390 --> 00:12:08,080
and thought that was that the problem is

261
00:12:08,080 --> 00:12:10,780
not necessarily that the pipeline could

262
00:12:10,780 --> 00:12:12,820
get too long it's that the pipeline

263
00:12:12,820 --> 00:12:14,140
could get too confusing

264
00:12:14,140 --> 00:12:16,900
so now we'll actually start looking at

265
00:12:16,900 --> 00:12:21,580
the syntax I will find some way to get

266
00:12:21,580 --> 00:12:26,680
links to the examples I've got here but

267
00:12:26,680 --> 00:12:30,280
for now so the first thing that's

268
00:12:30,280 --> 00:12:32,830
relevant is that right there the

269
00:12:32,830 --> 00:12:37,090
pipeline block everything in declarative

270
00:12:37,090 --> 00:12:39,730
goes within a pipe a block called

271
00:12:39,730 --> 00:12:42,150
pipeline and if it's not in there

272
00:12:42,150 --> 00:12:46,360
declarative doesn't care about it so

273
00:12:46,360 --> 00:12:48,220
we've got our own syntax within that

274
00:12:48,220 --> 00:12:50,110
that's not executed exactly the same way

275
00:12:50,110 --> 00:12:52,150
as scripted pipeline then the first

276
00:12:52,150 --> 00:12:53,920
thing we've got after that is declaring

277
00:12:53,920 --> 00:12:55,510
the agent that our job is going to run

278
00:12:55,510 --> 00:12:58,540
on and here we're saying that we want to

279
00:12:58,540 --> 00:13:02,230
run on in a docker container we give the

280
00:13:02,230 --> 00:13:06,040
image name and declarative will

281
00:13:06,040 --> 00:13:07,900
automatically say okay they didn't say

282
00:13:07,900 --> 00:13:09,460
what label they want to run on they can

283
00:13:09,460 --> 00:13:11,530
run anywhere you can specify the label

284
00:13:11,530 --> 00:13:14,230
but you don't have to and it will fetch

285
00:13:14,230 --> 00:13:17,380
the container image it will run the

286
00:13:17,380 --> 00:13:19,000
container and it will run the rest of

287
00:13:19,000 --> 00:13:21,190
the build within that container so it's

288
00:13:21,190 --> 00:13:22,720
a

289
00:13:22,720 --> 00:13:25,360
a simpler way to be able to specify the

290
00:13:25,360 --> 00:13:28,089
configuration for your agents and can be

291
00:13:28,089 --> 00:13:31,089
overridden per stage not just at the top

292
00:13:31,089 --> 00:13:35,709
level there's other options for agent

293
00:13:35,709 --> 00:13:37,629
besides just docker obviously there's

294
00:13:37,629 --> 00:13:38,709
label

295
00:13:38,709 --> 00:13:40,689
there's docker file in which case it

296
00:13:40,689 --> 00:13:42,399
builds a docker file from your

297
00:13:42,399 --> 00:13:44,350
repository and runs inside the resulting

298
00:13:44,350 --> 00:13:46,839
container and there's also some magic

299
00:13:46,839 --> 00:13:49,389
shortcuts for saying don't run on any

300
00:13:49,389 --> 00:13:51,819
agent for some weird edge cases or run

301
00:13:51,819 --> 00:13:55,600
on any agent but in general I think that

302
00:13:55,600 --> 00:13:57,550
you'll figure that out and plus we've

303
00:13:57,550 --> 00:14:04,089
got dogs options contains a few

304
00:14:04,089 --> 00:14:06,069
different things at the backend but what

305
00:14:06,069 --> 00:14:09,550
you could think about it as four options

306
00:14:09,550 --> 00:14:11,319
for your pipeline that would apply

307
00:14:11,319 --> 00:14:13,420
across your entire pipeline so here

308
00:14:13,420 --> 00:14:15,550
we're setting the build discard or job

309
00:14:15,550 --> 00:14:19,029
property to make sure that after five

310
00:14:19,029 --> 00:14:20,980
yeah when we run our six build the first

311
00:14:20,980 --> 00:14:24,459
build gets deleted etc and time out here

312
00:14:24,459 --> 00:14:26,589
is the timeout step that wraps the

313
00:14:26,589 --> 00:14:29,949
entire build and if the build takes more

314
00:14:29,949 --> 00:14:32,769
than 30 minutes it will get killed and

315
00:14:32,769 --> 00:14:35,199
reported as having timed out so when we

316
00:14:35,199 --> 00:14:37,589
need to do things that are not just

317
00:14:37,589 --> 00:14:40,240
applying to a part of the build but for

318
00:14:40,240 --> 00:14:43,379
everything those show up in options

319
00:14:43,379 --> 00:14:46,029
parameters our traditional job

320
00:14:46,029 --> 00:14:49,209
parameters we've pulled them into their

321
00:14:49,209 --> 00:14:50,709
own section here so that it's a little

322
00:14:50,709 --> 00:14:52,149
more clear than the way it is in

323
00:14:52,149 --> 00:14:56,500
scripted pipeline so string boolean / am

324
00:14:56,500 --> 00:14:59,800
very sings don't think we need to go

325
00:14:59,800 --> 00:15:02,439
into a lot of detail there the one thing

326
00:15:02,439 --> 00:15:05,439
worth noting is that in current versions

327
00:15:05,439 --> 00:15:07,689
of Jenkins from 2:17 onward

328
00:15:07,689 --> 00:15:11,079
there's a params variable in your

329
00:15:11,079 --> 00:15:12,759
scripted pipelines or declarative

330
00:15:12,759 --> 00:15:15,819
pipelines that will not use the default

331
00:15:15,819 --> 00:15:18,730
value if you haven't already specified

332
00:15:18,730 --> 00:15:20,680
the pipe of the the parameters so you

333
00:15:20,680 --> 00:15:22,629
don't have to run the build once and

334
00:15:22,629 --> 00:15:24,160
then run it again to make sure it

335
00:15:24,160 --> 00:15:26,079
doesn't error out you still just get the

336
00:15:26,079 --> 00:15:28,000
default value on that first run but at

337
00:15:28,000 --> 00:15:29,290
least it doesn't error so that's

338
00:15:29,290 --> 00:15:31,329
something nice

339
00:15:31,329 --> 00:15:33,850
the next key part and probably I mean

340
00:15:33,850 --> 00:15:35,580
the bulk of

341
00:15:35,580 --> 00:15:39,780
Clara t'v is stages you put all of your

342
00:15:39,780 --> 00:15:42,900
stages inside the stages block it's a at

343
00:15:42,900 --> 00:15:45,830
least one and as many more as you want

344
00:15:45,830 --> 00:15:50,820
each stage takes a name and then I it

345
00:15:50,820 --> 00:15:52,320
can take some configuration that we'll

346
00:15:52,320 --> 00:15:54,240
take a look at later and then a block of

347
00:15:54,240 --> 00:15:56,490
steps to execute and so each of these

348
00:15:56,490 --> 00:15:58,950
chunks of steps are executed in that

349
00:15:58,950 --> 00:16:00,210
stage they'll show up in the

350
00:16:00,210 --> 00:16:03,180
visualization in blue ocean so you can

351
00:16:03,180 --> 00:16:05,340
see how long that particular chunk took

352
00:16:05,340 --> 00:16:06,540
what the results were from that

353
00:16:06,540 --> 00:16:09,840
particular stage it's organization is a

354
00:16:09,840 --> 00:16:12,990
good thing having a better sense of the

355
00:16:12,990 --> 00:16:14,640
individual parts of your build is a good

356
00:16:14,640 --> 00:16:16,650
thing and so we're enforcing that by

357
00:16:16,650 --> 00:16:19,460
requiring that everything be in a stage

358
00:16:19,460 --> 00:16:25,920
I mentioned that trycatch isn't needed

359
00:16:25,920 --> 00:16:27,600
to make sure you send an email at the

360
00:16:27,600 --> 00:16:28,890
end of the bill that's another thing

361
00:16:28,890 --> 00:16:30,450
that really annoyed me about scripted

362
00:16:30,450 --> 00:16:34,050
pipeline is that if your build fails

363
00:16:34,050 --> 00:16:37,020
because the command fails or anything

364
00:16:37,020 --> 00:16:37,580
really

365
00:16:37,580 --> 00:16:40,770
unless you've wrapped that failure that

366
00:16:40,770 --> 00:16:42,480
the section of code that could fail with

367
00:16:42,480 --> 00:16:44,730
a try-catch or pipeline zone catch error

368
00:16:44,730 --> 00:16:47,280
step the build will just stop when it

369
00:16:47,280 --> 00:16:48,630
gets to the error and will never

370
00:16:48,630 --> 00:16:51,840
actually clean up afterwards or send an

371
00:16:51,840 --> 00:16:54,360
email to let you know it broke etc so we

372
00:16:54,360 --> 00:16:56,820
have the post section now the post

373
00:16:56,820 --> 00:16:59,810
section actually is available both for

374
00:16:59,810 --> 00:17:03,090
the entire build and for individual

375
00:17:03,090 --> 00:17:06,060
stages it checks to see whether the

376
00:17:06,060 --> 00:17:08,720
current build status matches a condition

377
00:17:08,720 --> 00:17:11,760
so always meeting it always runs

378
00:17:11,760 --> 00:17:13,709
regardless of what the build status is

379
00:17:13,709 --> 00:17:16,050
and then we've also got success unstable

380
00:17:16,050 --> 00:17:18,839
failure there's also changed in case the

381
00:17:18,839 --> 00:17:21,270
the build status is changed from the

382
00:17:21,270 --> 00:17:23,430
previous build and this is an extension

383
00:17:23,430 --> 00:17:25,619
point so we can add more conditions

384
00:17:25,619 --> 00:17:29,820
going forward so no matter what when the

385
00:17:29,820 --> 00:17:31,740
build ends we're gonna gather the J unit

386
00:17:31,740 --> 00:17:34,770
tests and junior test results and report

387
00:17:34,770 --> 00:17:36,990
on them if the build successful we'll

388
00:17:36,990 --> 00:17:38,610
get an email saying hey the build

389
00:17:38,610 --> 00:17:42,030
succeeded unstable we'll be notified

390
00:17:42,030 --> 00:17:44,370
there's test failures failure that

391
00:17:44,370 --> 00:17:45,600
there's build failures now this is a

392
00:17:45,600 --> 00:17:49,649
fairly simplistic example but

393
00:17:49,649 --> 00:17:52,269
here we've attached this just to this

394
00:17:52,269 --> 00:17:54,460
specific stage so we're gonna get these

395
00:17:54,460 --> 00:17:57,850
emails based on the results of this one

396
00:17:57,850 --> 00:18:01,899
stage not necessarily the whole build so

397
00:18:01,899 --> 00:18:03,789
you may not be wanting to necessarily

398
00:18:03,789 --> 00:18:06,130
send emails of the result of one stage

399
00:18:06,130 --> 00:18:08,590
but you may want to again check for

400
00:18:08,590 --> 00:18:11,409
archive unit test results even if the

401
00:18:11,409 --> 00:18:14,649
build failed like on a find bugs check

402
00:18:14,649 --> 00:18:16,419
that comes after the unit test run or

403
00:18:16,419 --> 00:18:19,809
something like that you may need to do

404
00:18:19,809 --> 00:18:22,840
cleanup if you're running a more

405
00:18:22,840 --> 00:18:24,340
complicated integration test or

406
00:18:24,340 --> 00:18:25,360
something like that where you want to

407
00:18:25,360 --> 00:18:27,220
make sure the machine gets back into a

408
00:18:27,220 --> 00:18:29,169
pristine state before you run the next

409
00:18:29,169 --> 00:18:33,370
build now we have another stage here

410
00:18:33,370 --> 00:18:40,080
that has the when condition when is

411
00:18:40,169 --> 00:18:42,190
evaluated to determine whether we're

412
00:18:42,190 --> 00:18:45,309
going to execute the stage the example I

413
00:18:45,309 --> 00:18:47,980
have here is using one of the built in

414
00:18:47,980 --> 00:18:51,070
conditions we're adding more there as

415
00:18:51,070 --> 00:18:52,690
well the built in condition here is

416
00:18:52,690 --> 00:18:54,909
branch if the branch that we're on

417
00:18:54,909 --> 00:18:57,279
currently matches the pattern that we've

418
00:18:57,279 --> 00:18:59,409
given it in this case master then we're

419
00:18:59,409 --> 00:19:01,950
gonna publish our artifacts to s3 if

420
00:19:01,950 --> 00:19:04,269
we're on a pull request branch or a

421
00:19:04,269 --> 00:19:05,500
feature branch or something like that

422
00:19:05,500 --> 00:19:07,360
well we're not deploying it we're not

423
00:19:07,360 --> 00:19:10,000
going live with it so we're not going to

424
00:19:10,000 --> 00:19:13,620
publish to s3 so we've got that

425
00:19:13,620 --> 00:19:16,389
conditionality that in what I think is

426
00:19:16,389 --> 00:19:20,250
an easier way than we've had previously

427
00:19:20,250 --> 00:19:23,380
there's also one that looks a condition

428
00:19:23,380 --> 00:19:24,850
that looks to see whether an environment

429
00:19:24,850 --> 00:19:26,880
variable is set to a specific value and

430
00:19:26,880 --> 00:19:30,519
one that allows you to write a pipeline

431
00:19:30,519 --> 00:19:32,799
expression that should return a boolean

432
00:19:32,799 --> 00:19:34,179
ideally so you can do more complicated

433
00:19:34,179 --> 00:19:37,539
logic for your wind check you know it is

434
00:19:37,539 --> 00:19:40,149
it noon you know is it afternoon new or

435
00:19:40,149 --> 00:19:41,889
is it the morning for some reason you

436
00:19:41,889 --> 00:19:45,039
might actually care about that and then

437
00:19:45,039 --> 00:19:47,860
here we've got a step invocation using

438
00:19:47,860 --> 00:19:51,220
the kind of ugly meta step syntax I just

439
00:19:51,220 --> 00:19:52,779
wanted to show that that actually can be

440
00:19:52,779 --> 00:19:56,019
done that you're not just limited to the

441
00:19:56,019 --> 00:19:59,470
more aesthetically pleasing in simple

442
00:19:59,470 --> 00:20:01,630
steps the legacy older steps that

443
00:20:01,630 --> 00:20:02,280
haven't up

444
00:20:02,280 --> 00:20:06,210
to have the better syntax throughout all

445
00:20:06,210 --> 00:20:08,130
a pipeline can still be used within

446
00:20:08,130 --> 00:20:12,450
declarative now we've got our final

447
00:20:12,450 --> 00:20:16,080
stage which also is only running when

448
00:20:16,080 --> 00:20:19,560
we're on master and in this case we're

449
00:20:19,560 --> 00:20:21,330
using something that's coming from a

450
00:20:21,330 --> 00:20:25,980
shared library to show there is no

451
00:20:25,980 --> 00:20:27,570
actual step called with tower that's

452
00:20:27,570 --> 00:20:29,420
somebody somebody wrote for an example

453
00:20:29,420 --> 00:20:33,030
and but it's still if you've got your

454
00:20:33,030 --> 00:20:34,170
shared libraries and you've got them

455
00:20:34,170 --> 00:20:36,510
available you can use them within the

456
00:20:36,510 --> 00:20:38,460
steps and declarative just as you can in

457
00:20:38,460 --> 00:20:40,320
scripted they work just fine the

458
00:20:40,320 --> 00:20:42,870
validation still can be used to some

459
00:20:42,870 --> 00:20:46,740
extent and you can nest state steps when

460
00:20:46,740 --> 00:20:48,630
you've got block scope steps that say

461
00:20:48,630 --> 00:20:51,810
okay everything within this block runs

462
00:20:51,810 --> 00:20:54,030
with access to tower and with the

463
00:20:54,030 --> 00:21:02,760
credentials for Tower and now the next

464
00:21:02,760 --> 00:21:08,600
example so here we're just using a label

465
00:21:08,600 --> 00:21:11,040
we're just saying run on any agent that

466
00:21:11,040 --> 00:21:15,630
has the docker agents label on it we're

467
00:21:15,630 --> 00:21:18,390
taking advantage of a nifty trick with

468
00:21:18,390 --> 00:21:19,770
the environment section where you can

469
00:21:19,770 --> 00:21:21,600
set environment variables that'll be

470
00:21:21,600 --> 00:21:23,250
available throughout the build what

471
00:21:23,250 --> 00:21:24,750
we're doing here is using a special

472
00:21:24,750 --> 00:21:26,040
function that's available and

473
00:21:26,040 --> 00:21:28,820
declarative to take the ID of

474
00:21:28,820 --> 00:21:30,630
credentials that you've configured in

475
00:21:30,630 --> 00:21:33,540
Jenkins and automatically put them into

476
00:21:33,540 --> 00:21:34,950
an environment variable that you can

477
00:21:34,950 --> 00:21:36,900
then use later on so this is a shortcut

478
00:21:36,900 --> 00:21:38,190
to make sure you don't have to jump

479
00:21:38,190 --> 00:21:39,990
through as many hoops using the width

480
00:21:39,990 --> 00:21:42,840
credential step to make those

481
00:21:42,840 --> 00:21:45,570
environment variables populated so you

482
00:21:45,570 --> 00:21:46,770
can actually have access to your

483
00:21:46,770 --> 00:21:51,480
credentials throughout the build another

484
00:21:51,480 --> 00:21:53,700
section we've got here our directive

485
00:21:53,700 --> 00:21:56,240
we've got here is the Tools directive

486
00:21:56,240 --> 00:22:01,650
this if you've used maven or JDK x' or

487
00:22:01,650 --> 00:22:03,510
npm or a number of other tools and

488
00:22:03,510 --> 00:22:05,880
jenkins you may have encountered that

489
00:22:05,880 --> 00:22:09,180
they can auto install onto if you've

490
00:22:09,180 --> 00:22:10,740
configured them on the master you can

491
00:22:10,740 --> 00:22:12,240
auto install them on the agents you

492
00:22:12,240 --> 00:22:13,920
don't have to make sure they're already

493
00:22:13,920 --> 00:22:15,300
installed etc

494
00:22:15,300 --> 00:22:17,429
and what we have here is a nice simple

495
00:22:17,429 --> 00:22:20,910
syntax for making sure that those tools

496
00:22:20,910 --> 00:22:22,710
get installed onto the agent before we

497
00:22:22,710 --> 00:22:25,679
run saying give me a maven tool with

498
00:22:25,679 --> 00:22:27,000
this configured version

499
00:22:27,000 --> 00:22:29,700
give me a JDK tool with this configured

500
00:22:29,700 --> 00:22:32,040
version important thing to note here is

501
00:22:32,040 --> 00:22:34,130
that the tools sent at the tools

502
00:22:34,130 --> 00:22:37,380
directive and tools installer doesn't

503
00:22:37,380 --> 00:22:40,679
actually work on docker containers I'm

504
00:22:40,679 --> 00:22:43,170
working on that that's a limitation in

505
00:22:43,170 --> 00:22:45,210
pipeline in general and I am working on

506
00:22:45,210 --> 00:22:48,360
that but if you're running on just

507
00:22:48,360 --> 00:22:50,460
straight agents this will work for you

508
00:22:50,460 --> 00:22:54,960
out of the box yeah this one's just a

509
00:22:54,960 --> 00:22:56,460
simple stage but I wanted to have a

510
00:22:56,460 --> 00:22:58,260
example that actually seemed kind of

511
00:22:58,260 --> 00:22:59,640
realistic so I wanted to make sure that

512
00:22:59,640 --> 00:23:02,220
I was actually running steps and here

513
00:23:02,220 --> 00:23:03,960
we're running two steps you can run as

514
00:23:03,960 --> 00:23:06,720
many steps as you want I have a tendency

515
00:23:06,720 --> 00:23:08,730
to have my examples tend to be just one

516
00:23:08,730 --> 00:23:10,950
step so I wanted to make sure that I

517
00:23:10,950 --> 00:23:13,110
showed yes you can do more than one step

518
00:23:13,110 --> 00:23:16,620
I know that may have been obvious but I

519
00:23:16,620 --> 00:23:19,410
was afraid it wouldn't be next step

520
00:23:19,410 --> 00:23:25,140
tests so here we're showing per stage

521
00:23:25,140 --> 00:23:28,110
configuration and specifically per stage

522
00:23:28,110 --> 00:23:30,929
configuration of agent so our first step

523
00:23:30,929 --> 00:23:33,390
that ran made clean and make package and

524
00:23:33,390 --> 00:23:36,179
generated our build artifacts was

525
00:23:36,179 --> 00:23:40,740
running on just the agent load and now

526
00:23:40,740 --> 00:23:42,420
we want to run tests but we want to run

527
00:23:42,420 --> 00:23:45,690
those inside a docker container so we've

528
00:23:45,690 --> 00:23:48,960
specified the image that we're gonna

529
00:23:48,960 --> 00:23:51,600
build in and we've specified reuse node

530
00:23:51,600 --> 00:23:55,470
true what that means is that the this

531
00:23:55,470 --> 00:24:00,809
stages agent will run on the same agent

532
00:24:00,809 --> 00:24:02,640
that the previous stage ran on we'll

533
00:24:02,640 --> 00:24:04,170
have access to the workspace and the

534
00:24:04,170 --> 00:24:05,790
checkout and the artifacts we already

535
00:24:05,790 --> 00:24:07,350
built so we don't have to worry about

536
00:24:07,350 --> 00:24:09,480
copying them around etc everything's

537
00:24:09,480 --> 00:24:11,880
already available so that we would then

538
00:24:11,880 --> 00:24:15,780
run our you know shell step to actually

539
00:24:15,780 --> 00:24:17,580
do the deploy using that environment

540
00:24:17,580 --> 00:24:19,140
variable that we defined before with the

541
00:24:19,140 --> 00:24:22,650
credentials it's got access to the

542
00:24:22,650 --> 00:24:25,020
artifacts and has everything it needs to

543
00:24:25,020 --> 00:24:27,450
deploy without having to worry about

544
00:24:27,450 --> 00:24:28,280
stash

545
00:24:28,280 --> 00:24:32,450
between stages etc the reuse node field

546
00:24:32,450 --> 00:24:34,100
doesn't mean anything at the top level

547
00:24:34,100 --> 00:24:35,900
because there's no previous node to

548
00:24:35,900 --> 00:24:38,720
views but it's a handy trick for docker

549
00:24:38,720 --> 00:24:41,150
and docker files so that you don't have

550
00:24:41,150 --> 00:24:42,560
to check things out twice you don't have

551
00:24:42,560 --> 00:24:44,210
to build things twice you don't have to

552
00:24:44,210 --> 00:24:49,340
copy your artifacts around and so those

553
00:24:49,340 --> 00:24:51,260
are the two examples let's talk a little

554
00:24:51,260 --> 00:24:53,660
bit about the validation like I said

555
00:24:53,660 --> 00:24:56,870
this is my baby in this is my favorite

556
00:24:56,870 --> 00:24:58,910
part because I've gotten so annoyed at

557
00:24:58,910 --> 00:25:02,180
error reporting in declare in scripted

558
00:25:02,180 --> 00:25:03,620
pipelines and then the lack of easy

559
00:25:03,620 --> 00:25:06,110
visibility into what I did wrong because

560
00:25:06,110 --> 00:25:11,030
I do a lot wrong the first thing is as I

561
00:25:11,030 --> 00:25:12,890
said it always happens at the beginning

562
00:25:12,890 --> 00:25:14,570
of a pipeline build when you're declared

563
00:25:14,570 --> 00:25:18,890
a pipeline build starts it compiles and

564
00:25:18,890 --> 00:25:21,080
validates and make sure that your syntax

565
00:25:21,080 --> 00:25:23,450
is actually right and not just in the

566
00:25:23,450 --> 00:25:26,180
sense that the groovy script can compile

567
00:25:26,180 --> 00:25:29,480
because getting a groovy compilable

568
00:25:29,480 --> 00:25:33,560
groovy script is not very hard you can

569
00:25:33,560 --> 00:25:35,360
have very broken groovy that can still

570
00:25:35,360 --> 00:25:38,870
compile but once we're in that phase

571
00:25:38,870 --> 00:25:40,040
we're loose we start doing the

572
00:25:40,040 --> 00:25:42,650
validation we look to see okay if you've

573
00:25:42,650 --> 00:25:45,800
got did you have stage because if you

574
00:25:45,800 --> 00:25:47,120
don't have a stage what's the point

575
00:25:47,120 --> 00:25:49,820
we're gonna error out on you did you

576
00:25:49,820 --> 00:25:53,240
supply an agent name an agent type that

577
00:25:53,240 --> 00:25:55,250
that's actually existing and it's

578
00:25:55,250 --> 00:25:57,320
available on this master because if you

579
00:25:57,320 --> 00:26:00,440
try to do agent banana there's no agent

580
00:26:00,440 --> 00:26:02,120
implementation for banana it doesn't

581
00:26:02,120 --> 00:26:03,620
know what that is it should tell you

582
00:26:03,620 --> 00:26:05,870
that ahead of time and say well did you

583
00:26:05,870 --> 00:26:08,720
mean one of these and it will it'll do

584
00:26:08,720 --> 00:26:10,340
the same thing for parameters if you

585
00:26:10,340 --> 00:26:13,580
give it a an agent the wrong parameter

586
00:26:13,580 --> 00:26:15,230
if you give a step the wrong parameter

587
00:26:15,230 --> 00:26:18,680
that doesn't exist or you have the wrong

588
00:26:18,680 --> 00:26:21,680
type it's going to tell you that so that

589
00:26:21,680 --> 00:26:23,060
you can know ahead of time oh right

590
00:26:23,060 --> 00:26:26,450
that's what I need to go fix and the

591
00:26:26,450 --> 00:26:28,490
errors point to the problem areas with

592
00:26:28,490 --> 00:26:32,510
line and column number with what I hope

593
00:26:32,510 --> 00:26:36,170
is a useful and internationalized though

594
00:26:36,170 --> 00:26:39,040
not yet localized error message

595
00:26:39,040 --> 00:26:41,840
hopefully with suggestions to point you

596
00:26:41,840 --> 00:26:42,020
in

597
00:26:42,020 --> 00:26:45,950
right direction so my apologies for this

598
00:26:45,950 --> 00:26:49,460
text sighs but yeah so here I got an

599
00:26:49,460 --> 00:26:51,980
error saying invalid parameter you went

600
00:26:51,980 --> 00:26:54,920
did you mean unit because I did the time

601
00:26:54,920 --> 00:26:56,690
out step and I got time right that's

602
00:26:56,690 --> 00:26:59,150
that's an existing yeah thing 15 is the

603
00:26:59,150 --> 00:27:01,790
right type you int minutes wait no you

604
00:27:01,790 --> 00:27:02,120
wait

605
00:27:02,120 --> 00:27:04,700
no I meant unit okay so it's telling me

606
00:27:04,700 --> 00:27:06,590
what I did wrong where I did wrong and

607
00:27:06,590 --> 00:27:08,150
giving me an idea of how to make it

608
00:27:08,150 --> 00:27:11,030
right next here

609
00:27:11,030 --> 00:27:13,160
I'm calling the sleep step but instead

610
00:27:13,160 --> 00:27:14,810
of giving it a number I'm giving it a

611
00:27:14,810 --> 00:27:18,350
string and that's not a valid parameter

612
00:27:18,350 --> 00:27:20,180
type you can't really tell something to

613
00:27:20,180 --> 00:27:24,200
sleep for quote ten minutes unquote and

614
00:27:24,200 --> 00:27:26,120
so it's telling me that it was expecting

615
00:27:26,120 --> 00:27:28,700
an INT but it got ten minutes so you

616
00:27:28,700 --> 00:27:31,460
might want to change that and what I've

617
00:27:31,460 --> 00:27:33,890
got an empty stage that doesn't have any

618
00:27:33,890 --> 00:27:37,880
steps in it it's reporting that there's

619
00:27:37,880 --> 00:27:39,920
nothing to execute within that stage and

620
00:27:39,920 --> 00:27:42,320
saying that's that doesn't fit into the

621
00:27:42,320 --> 00:27:44,120
syntax that's not allowed you've got to

622
00:27:44,120 --> 00:27:46,040
actually have something to do in a stage

623
00:27:46,040 --> 00:27:48,710
and so it's giving me a useful in our

624
00:27:48,710 --> 00:27:50,510
message pointing at what went wrong

625
00:27:50,510 --> 00:27:52,130
giving me the lining column of

626
00:27:52,130 --> 00:27:53,510
information same as you get from a

627
00:27:53,510 --> 00:27:55,970
compilation error I think that's really

628
00:27:55,970 --> 00:28:01,340
useful now you can do this linting

629
00:28:01,340 --> 00:28:04,300
without actually having to run the build

630
00:28:04,300 --> 00:28:07,280
the way that I recommend is using the

631
00:28:07,280 --> 00:28:11,270
Jenkins SSH CLI which case you need your

632
00:28:11,270 --> 00:28:13,340
Jenkins administrator to open an SSH

633
00:28:13,340 --> 00:28:14,600
port and need to make sure you have

634
00:28:14,600 --> 00:28:16,910
creds but that's we'll ignore that for

635
00:28:16,910 --> 00:28:21,130
the moment you SSH into the master

636
00:28:21,130 --> 00:28:23,840
called the declare of declarative linter

637
00:28:23,840 --> 00:28:26,930
command and pipe in the Jenkins file and

638
00:28:26,930 --> 00:28:29,180
it will give you the same results the

639
00:28:29,180 --> 00:28:32,180
same messaging that you got when you run

640
00:28:32,180 --> 00:28:34,280
it in your build again it'll tell you if

641
00:28:34,280 --> 00:28:35,840
it's successful it'll tell you if it

642
00:28:35,840 --> 00:28:37,280
failed and if it failed it will tell you

643
00:28:37,280 --> 00:28:39,620
where it failed and why it failed you

644
00:28:39,620 --> 00:28:42,410
can also do that via the rest api with

645
00:28:42,410 --> 00:28:45,140
curl that curl command is a little ugly

646
00:28:45,140 --> 00:28:46,340
because i made sure we're actually using

647
00:28:46,340 --> 00:28:49,220
jenkins crumbs because you're you really

648
00:28:49,220 --> 00:28:51,500
should have crumb protection enabled so

649
00:28:51,500 --> 00:28:56,590
on your master it's a good security tip

650
00:28:56,590 --> 00:29:04,600
and we've got plans for I'm sorry yes

651
00:29:07,330 --> 00:29:09,489
the question was whether you could

652
00:29:09,489 --> 00:29:11,989
validate scripted pipelines using this

653
00:29:11,989 --> 00:29:12,499
as well

654
00:29:12,499 --> 00:29:17,570
no that's we would still like to

655
00:29:17,570 --> 00:29:19,879
eventually be able to do validation and

656
00:29:19,879 --> 00:29:21,950
linting for scripted pipelines but it's

657
00:29:21,950 --> 00:29:24,169
a lot harder problem they're doing it

658
00:29:24,169 --> 00:29:25,549
for declarative that's part of why we

659
00:29:25,549 --> 00:29:28,730
wrote declarative is giving it with this

660
00:29:28,730 --> 00:29:30,889
this structure and the predictability we

661
00:29:30,889 --> 00:29:34,070
can we don't have to worry about things

662
00:29:34,070 --> 00:29:36,529
like Oh what type is that what yeah that

663
00:29:36,529 --> 00:29:39,049
that random class what is that etc we

664
00:29:39,049 --> 00:29:41,119
actually know what all the possibilities

665
00:29:41,119 --> 00:29:46,909
are and can better analyze what could go

666
00:29:46,909 --> 00:29:50,210
wrong but so for for the foreseeable

667
00:29:50,210 --> 00:29:52,190
future no we will not have validation of

668
00:29:52,190 --> 00:29:55,759
scripted pipelines we do have plans to

669
00:29:55,759 --> 00:30:01,609
have a more flexible offline validator

670
00:30:01,609 --> 00:30:03,619
that doesn't require you to SSH into

671
00:30:03,619 --> 00:30:06,320
Jenkins to do it that's not around yet

672
00:30:06,320 --> 00:30:11,259
but that is on our roadmap as well as

673
00:30:11,259 --> 00:30:16,909
GDS elf or IntelliJ and other things to

674
00:30:16,909 --> 00:30:18,980
make the development and testing of your

675
00:30:18,980 --> 00:30:21,049
pipelines of your declarative pipelines

676
00:30:21,049 --> 00:30:23,149
easier we'll see where that goes and

677
00:30:23,149 --> 00:30:25,029
like I've said this is just one dot oh

678
00:30:25,029 --> 00:30:28,669
so it's we'll see where we end up taking

679
00:30:28,669 --> 00:30:30,259
things further I just want to mainly

680
00:30:30,259 --> 00:30:33,399
focus on what we've already got for you

681
00:30:33,399 --> 00:30:37,429
who hears heard of blue ocean if you

682
00:30:37,429 --> 00:30:38,749
haven't you should check it out it's

683
00:30:38,749 --> 00:30:41,989
like pretty especially by Jenkins

684
00:30:41,989 --> 00:30:43,639
standards I mean by Jenkins standards

685
00:30:43,639 --> 00:30:46,489
it's gorgeous I say this is somebody who

686
00:30:46,489 --> 00:30:48,889
loves the traditional Jenkins UI because

687
00:30:48,889 --> 00:30:53,299
I've lived in it for nine years but so

688
00:30:53,299 --> 00:30:55,100
I'm not gonna talk that much about blue

689
00:30:55,100 --> 00:30:57,350
ocean here because I am NOT a UI person

690
00:30:57,350 --> 00:31:01,789
but I did want to just mention a couple

691
00:31:01,789 --> 00:31:03,859
things that are declarative specific in

692
00:31:03,859 --> 00:31:06,859
blue ocean or to relate related to

693
00:31:06,859 --> 00:31:09,160
declarative in blue

694
00:31:09,160 --> 00:31:10,870
that we've got some special smarts on

695
00:31:10,870 --> 00:31:13,630
both sides for optimized visualization

696
00:31:13,630 --> 00:31:18,460
such as operations inside declarative

697
00:31:18,460 --> 00:31:22,390
like the SCM check out like docker image

698
00:31:22,390 --> 00:31:25,120
prep or building the contain the image

699
00:31:25,120 --> 00:31:27,820
for the container post build actions

700
00:31:27,820 --> 00:31:29,860
things that are not specified inside

701
00:31:29,860 --> 00:31:32,980
your actual stages block but that still

702
00:31:32,980 --> 00:31:35,770
actually take time in your build they

703
00:31:35,770 --> 00:31:36,910
get marked with special

704
00:31:36,910 --> 00:31:39,130
behind-the-scenes synthetic stages so

705
00:31:39,130 --> 00:31:41,020
that declarative so that blue ocean

706
00:31:41,020 --> 00:31:43,270
knows it doesn't have to put those in

707
00:31:43,270 --> 00:31:45,580
the main UI because you're not really as

708
00:31:45,580 --> 00:31:47,710
long as those don't fail you're not

709
00:31:47,710 --> 00:31:50,770
really concerned with seeing that in

710
00:31:50,770 --> 00:31:52,480
your visualization that's just the cost

711
00:31:52,480 --> 00:31:54,670
of doing business you know that there's

712
00:31:54,670 --> 00:31:55,900
gonna be a little time for your check

713
00:31:55,900 --> 00:31:57,340
out there's gonna be a little time for

714
00:31:57,340 --> 00:32:01,090
your docker image prep etcetera you

715
00:32:01,090 --> 00:32:04,900
don't need to have your you know your

716
00:32:04,900 --> 00:32:07,300
graph of stages necessarily include

717
00:32:07,300 --> 00:32:10,210
those and as I also mentioned that we've

718
00:32:10,210 --> 00:32:12,100
got special marking of stages that have

719
00:32:12,100 --> 00:32:14,200
been skipped due to either an

720
00:32:14,200 --> 00:32:16,750
unsatisfied when condition or a failure

721
00:32:16,750 --> 00:32:18,880
in an earlier stage so that those will

722
00:32:18,880 --> 00:32:21,490
show up differently in blue ocean so

723
00:32:21,490 --> 00:32:23,410
that you'll be able to see okay yeah

724
00:32:23,410 --> 00:32:27,370
this stage didn't run because there was

725
00:32:27,370 --> 00:32:29,950
a wind condition that was not met so

726
00:32:29,950 --> 00:32:32,530
it'll be I think it's gray but don't

727
00:32:32,530 --> 00:32:35,560
quote me but so you won't have you know

728
00:32:35,560 --> 00:32:37,870
every single build you run will show in

729
00:32:37,870 --> 00:32:40,150
blue ocean or show every stage that's in

730
00:32:40,150 --> 00:32:42,250
the execution model even if they didn't

731
00:32:42,250 --> 00:32:44,950
run that time so that even if the build

732
00:32:44,950 --> 00:32:46,600
failed on the first stage it'll still

733
00:32:46,600 --> 00:32:48,190
mark that the second third and fourth

734
00:32:48,190 --> 00:32:50,290
stages existed it just they would have

735
00:32:50,290 --> 00:32:52,180
done anything and they'll be displayed

736
00:32:52,180 --> 00:32:54,310
in a special way so you can see that

737
00:32:54,310 --> 00:32:58,900
they were just skipped now just a little

738
00:32:58,900 --> 00:33:01,720
teaser on the editor like I said the

739
00:33:01,720 --> 00:33:08,470
editor will go into beta on Monday it's

740
00:33:08,470 --> 00:33:13,090
still not not quite done it doesn't yet

741
00:33:13,090 --> 00:33:15,790
do the round-tripping being able to read

742
00:33:15,790 --> 00:33:18,010
a Jenkins file from your get repo and

743
00:33:18,010 --> 00:33:20,230
then write the changed Jenkins file to

744
00:33:20,230 --> 00:33:21,549
the git repo that's in

745
00:33:21,549 --> 00:33:23,730
works it will happen before it goes 1o

746
00:33:23,730 --> 00:33:26,559
but I wanted to show you a little bit of

747
00:33:26,559 --> 00:33:33,399
what the UI looks like pretty again it's

748
00:33:33,399 --> 00:33:36,789
like it's like a visual editor it's so

749
00:33:36,789 --> 00:33:40,169
you can specify your stages you can

750
00:33:40,169 --> 00:33:44,350
specify parallel execution by clicking

751
00:33:44,350 --> 00:33:46,059
that plus there and then you can see

752
00:33:46,059 --> 00:33:47,649
here we've gotten our test stage that

753
00:33:47,649 --> 00:33:49,929
we're executing both on Chrome and on

754
00:33:49,929 --> 00:33:52,499
Firefox and also on Internet Explorer

755
00:33:52,499 --> 00:33:55,409
and then we get our deploy stage there

756
00:33:55,409 --> 00:34:00,009
so that's just the basic graph that you

757
00:34:00,009 --> 00:34:01,869
end up getting it looks a lot ok almost

758
00:34:01,869 --> 00:34:04,299
identical to what you see for the run

759
00:34:04,299 --> 00:34:07,119
visualization in blue ocean not a

760
00:34:07,119 --> 00:34:10,089
surprise it's part of the blue ocean UI

761
00:34:10,089 --> 00:34:15,969
theme now here we're specifying a shell

762
00:34:15,969 --> 00:34:18,969
script to run a shell step to run inside

763
00:34:18,969 --> 00:34:21,879
the chrome parallel chunk so it's just

764
00:34:21,879 --> 00:34:26,069
standard put in some shell it will run

765
00:34:26,069 --> 00:34:30,069
and it is able to do the validation in

766
00:34:30,069 --> 00:34:33,819
real time so that when we use print

767
00:34:33,819 --> 00:34:35,409
messages you know echo and we don't

768
00:34:35,409 --> 00:34:38,379
require put in a parameter for it it's

769
00:34:38,379 --> 00:34:40,299
saying wait no that's that's not valid

770
00:34:40,299 --> 00:34:41,980
you need a parameter you can't run that

771
00:34:41,980 --> 00:34:43,989
without a parameter and it's giving you

772
00:34:43,989 --> 00:34:46,629
that validation right away through the

773
00:34:46,629 --> 00:34:48,250
editor without having to even wait to

774
00:34:48,250 --> 00:34:51,849
run a linting against it or run it in

775
00:34:51,849 --> 00:34:55,270
Jenkins which we think is going to be

776
00:34:55,270 --> 00:34:58,329
really handy so that especially for when

777
00:34:58,329 --> 00:34:59,770
you're getting started but also I still

778
00:34:59,770 --> 00:35:01,450
use the free style editor just like oh I

779
00:35:01,450 --> 00:35:03,040
just need to do something quick Bam Bam

780
00:35:03,040 --> 00:35:05,640
Bam OK ROCK it works

781
00:35:05,640 --> 00:35:09,540
and again it's we've been designing

782
00:35:09,540 --> 00:35:11,790
declarative with the editor in mind

783
00:35:11,790 --> 00:35:15,690
since day zero we've made sure that

784
00:35:15,690 --> 00:35:19,390
conversion between the the syntax that

785
00:35:19,390 --> 00:35:22,270
the is internal to the editor and the

786
00:35:22,270 --> 00:35:24,579
syntax that it actually runs in Jenkins

787
00:35:24,579 --> 00:35:27,490
that conversion is seamless

788
00:35:27,490 --> 00:35:30,069
we've got enumerable tests making sure

789
00:35:30,069 --> 00:35:32,619
that we've made sure the data model

790
00:35:32,619 --> 00:35:35,500
makes sense for the editor it's we

791
00:35:35,500 --> 00:35:37,840
very very much want to make sure the

792
00:35:37,840 --> 00:35:41,440
editor is a good usable tool for you

793
00:35:41,440 --> 00:35:46,570
with declarative pipelines and that it

794
00:35:46,570 --> 00:35:51,190
can help well kill freestyle because I

795
00:35:51,190 --> 00:35:54,100
with the with the editor I I personally

796
00:35:54,100 --> 00:35:55,840
feel that we are getting to the point

797
00:35:55,840 --> 00:35:57,700
where freestyle doesn't offer anything

798
00:35:57,700 --> 00:36:00,280
that you can't do better in pipelines

799
00:36:00,280 --> 00:36:02,560
either and declarative for most cases in

800
00:36:02,560 --> 00:36:04,150
scripted for the more complicated cases

801
00:36:04,150 --> 00:36:07,090
now I'm sure I'm wrong I'm sure there

802
00:36:07,090 --> 00:36:08,410
are things I'm missing but we'll get

803
00:36:08,410 --> 00:36:13,120
those too and so yeah Monday the beta

804
00:36:13,120 --> 00:36:17,110
comes out not sure how long it'll take

805
00:36:17,110 --> 00:36:20,500
to get to 100 I expect it will be this

806
00:36:20,500 --> 00:36:23,170
spring and we're looking forward to you

807
00:36:23,170 --> 00:36:25,690
giving it a try and giving feedback and

808
00:36:25,690 --> 00:36:27,730
seeing what's horrible and what's

809
00:36:27,730 --> 00:36:32,590
wonderful so what is the one over lease

810
00:36:32,590 --> 00:36:35,200
I just want to wrap up with that since

811
00:36:35,200 --> 00:36:38,170
you know that's why I'm here

812
00:36:38,170 --> 00:36:40,900
one Oh came out on Wednesday of last

813
00:36:40,900 --> 00:36:46,390
week it's in the update center we will

814
00:36:46,390 --> 00:36:48,880
be very very very careful not to make

815
00:36:48,880 --> 00:36:50,740
any breaking backwards compatibility

816
00:36:50,740 --> 00:36:52,930
changes if we do that's a bug and we

817
00:36:52,930 --> 00:36:57,630
will undo it but I think our tests are

818
00:36:57,630 --> 00:36:59,650
comprehensive enough that that's not

819
00:36:59,650 --> 00:37:03,580
going to happen by accident and I won't

820
00:37:03,580 --> 00:37:06,390
merge anything that does that either

821
00:37:06,390 --> 00:37:09,100
it's important to note that declarative

822
00:37:09,100 --> 00:37:12,310
does require Jenkins 271 or later it's

823
00:37:12,310 --> 00:37:17,170
the first LTS line of Jenkins to blue

824
00:37:17,170 --> 00:37:19,780
ocean has the same requirement who

825
00:37:19,780 --> 00:37:24,700
here's running Jenkins - and who here is

826
00:37:24,700 --> 00:37:28,060
running Jenkins 1x it's a good time to

827
00:37:28,060 --> 00:37:30,670
upgrade to 7 vid that I'm not be I'm not

828
00:37:30,670 --> 00:37:33,310
entirely being facetious a little but

829
00:37:33,310 --> 00:37:33,940
not entirely

830
00:37:33,940 --> 00:37:36,640
I think the tus the the Jenkins 2 line

831
00:37:36,640 --> 00:37:39,670
is beyond mature at this point I think

832
00:37:39,670 --> 00:37:41,350
it's worth the upgrade I think that the

833
00:37:41,350 --> 00:37:44,350
improvements that it has over the 1x

834
00:37:44,350 --> 00:37:48,760
line for usability and UI are worth it

835
00:37:48,760 --> 00:37:52,990
and if you want new stuff you kind of

836
00:37:52,990 --> 00:37:59,290
got to go to two so there are blog posts

837
00:37:59,290 --> 00:38:02,320
coming up and one already up on Jake and

838
00:38:02,320 --> 00:38:04,750
site I hope they introducing declarative

839
00:38:04,750 --> 00:38:06,970
they'll be more detailed blog posts on

840
00:38:06,970 --> 00:38:08,980
some specific aspects like the syntax

841
00:38:08,980 --> 00:38:13,030
checking or the docker integration this

842
00:38:13,030 --> 00:38:16,860
talk obviously is part of the 100 launch

843
00:38:16,950 --> 00:38:20,350
we're doing a Jenkins online meetup on

844
00:38:20,350 --> 00:38:23,200
Wednesday February 15th talking in more

845
00:38:23,200 --> 00:38:27,160
detail about declarative with more

846
00:38:27,160 --> 00:38:30,700
information more deeper demo dives and

847
00:38:30,700 --> 00:38:32,940
some talk about the editor as well and

848
00:38:32,940 --> 00:38:36,970
there is by I think most open source

849
00:38:36,970 --> 00:38:38,710
standards and especially by jagged

850
00:38:38,710 --> 00:38:40,030
standards and immense amount of

851
00:38:40,030 --> 00:38:42,940
documentation up on Jenkins at i/o Thank

852
00:38:42,940 --> 00:38:48,640
You Tyler and we it's now when you go to

853
00:38:48,640 --> 00:38:53,350
the pipeline documentation what when you

854
00:38:53,350 --> 00:38:54,820
go to the pipeline documentation on

855
00:38:54,820 --> 00:38:56,770
Jenkins dot IO it starts showing you

856
00:38:56,770 --> 00:38:58,390
declarative you can switch over to see

857
00:38:58,390 --> 00:39:02,050
the scripted but our plan going forward

858
00:39:02,050 --> 00:39:04,180
is that the default way you start is

859
00:39:04,180 --> 00:39:06,280
with the clarity and so we want to make

860
00:39:06,280 --> 00:39:07,900
sure it's documented it's accessible

861
00:39:07,900 --> 00:39:13,720
it's understandable and if you find

862
00:39:13,720 --> 00:39:15,460
flaws in the documentation the things

863
00:39:15,460 --> 00:39:17,170
that could be improved pull requests are

864
00:39:17,170 --> 00:39:20,530
very much welcome as our bug reports see

865
00:39:20,530 --> 00:39:21,820
if you don't actually want to you know

866
00:39:21,820 --> 00:39:26,410
fix the docs yourself so resources like

867
00:39:26,410 --> 00:39:29,440
I said the main one is Jenkins io / doc

868
00:39:29,440 --> 00:39:31,660
that's the canonical place the

869
00:39:31,660 --> 00:39:33,910
definitive place the right place to go

870
00:39:33,910 --> 00:39:36,430
to find documentation on declarative and

871
00:39:36,430 --> 00:39:40,060
on scripted pipelines and pretty much

872
00:39:40,060 --> 00:39:41,680
anything else that Tyler actually gets

873
00:39:41,680 --> 00:39:44,710
around to writing about Jenkins I think

874
00:39:44,710 --> 00:39:46,660
that Tyler and his team have done an

875
00:39:46,660 --> 00:39:48,850
amazing job with the Jenkins i/o Docs

876
00:39:48,850 --> 00:39:52,390
and I think it's it's something we're

877
00:39:52,390 --> 00:39:54,010
proud of and that I think is really

878
00:39:54,010 --> 00:39:57,310
useful so don't be afraid to give it a

879
00:39:57,310 --> 00:39:59,490
look

880
00:39:59,560 --> 00:40:02,750
amusingly the examples actually pull

881
00:40:02,750 --> 00:40:04,400
requests actually didn't land yet so

882
00:40:04,400 --> 00:40:07,340
we'll work on that but I think if

883
00:40:07,340 --> 00:40:09,200
there's enough examples in the

884
00:40:09,200 --> 00:40:11,290
documentation that you'll be ok for now

885
00:40:11,290 --> 00:40:14,840
and if you really are curious you can

886
00:40:14,840 --> 00:40:19,070
find the source for the plugin on github

887
00:40:19,070 --> 00:40:21,050
and pipeline model definition plugin

888
00:40:21,050 --> 00:40:23,330
don't ask about the name you never have

889
00:40:23,330 --> 00:40:25,160
to think about that if you're on Jenkins

890
00:40:25,160 --> 00:40:27,920
2 7 1 or later if you just update the

891
00:40:27,920 --> 00:40:30,050
pipeline aggregator that pulls in all

892
00:40:30,050 --> 00:40:32,060
the other plugins this gets pulled in

893
00:40:32,060 --> 00:40:33,830
with it so you don't have to jump

894
00:40:33,830 --> 00:40:35,450
through hoops to install it but in case

895
00:40:35,450 --> 00:40:36,800
you wanted to see the source I always

896
00:40:36,800 --> 00:40:40,880
feel the need to link it and we have

897
00:40:40,880 --> 00:40:42,620
reference cards has anybody already

898
00:40:42,620 --> 00:40:43,940
picked up a reference card from the

899
00:40:43,940 --> 00:40:46,880
Jenkins booth all right well I've got

900
00:40:46,880 --> 00:40:49,070
some more up here and they're also

901
00:40:49,070 --> 00:40:53,120
available online and we're pretty happy

902
00:40:53,120 --> 00:40:59,410
with them and yeah printed material and

903
00:40:59,410 --> 00:41:01,850
that's pretty much it so let's we got

904
00:41:01,850 --> 00:41:05,450
about four minutes for questions so does

905
00:41:05,450 --> 00:41:16,130
anybody have any questions yes the

906
00:41:16,130 --> 00:41:18,970
question was do we have plans to support

907
00:41:18,970 --> 00:41:23,030
stages in parallel so right now you can

908
00:41:23,030 --> 00:41:26,450
use parallel but it doesn't but then you

909
00:41:26,450 --> 00:41:28,160
have to specify your nodes etc within

910
00:41:28,160 --> 00:41:29,930
that it's it's it's it's ugly it's a

911
00:41:29,930 --> 00:41:31,790
little awkward so the answer to your

912
00:41:31,790 --> 00:41:34,640
question is yes I have a pending post

913
00:41:34,640 --> 00:41:37,040
one Oh work-in-progress pull request

914
00:41:37,040 --> 00:41:39,260
doing exactly that to give you a good

915
00:41:39,260 --> 00:41:41,870
ability to say here's a bunch of stages

916
00:41:41,870 --> 00:41:45,110
to run in parallel we're still working

917
00:41:45,110 --> 00:41:47,090
on exactly what the syntax will be

918
00:41:47,090 --> 00:41:49,370
exactly how the execution works but

919
00:41:49,370 --> 00:41:51,950
parallel stage execution will be in

920
00:41:51,950 --> 00:41:54,110
within the next six weeks or so it would

921
00:41:54,110 --> 00:41:56,030
be my guess we consider that a

922
00:41:56,030 --> 00:41:57,470
requirement there are some things that

923
00:41:57,470 --> 00:41:59,000
blue ocean needs to do for better

924
00:41:59,000 --> 00:42:01,370
visualization of that so I need to bug

925
00:42:01,370 --> 00:42:05,090
them but that is we consider that a

926
00:42:05,090 --> 00:42:06,920
requirement we wanted to have that for

927
00:42:06,920 --> 00:42:08,420
one oh but we wanted to make sure that

928
00:42:08,420 --> 00:42:09,590
we

929
00:42:09,590 --> 00:42:12,890
focused on getting what we had really

930
00:42:12,890 --> 00:42:15,440
solid before adding that feature but it

931
00:42:15,440 --> 00:42:18,190
will be there soon I promise

932
00:42:18,190 --> 00:42:30,530
yes so the question was can one stage

933
00:42:30,530 --> 00:42:32,990
declare what is gonna run which stage is

934
00:42:32,990 --> 00:42:34,640
gonna run next and what steps are going

935
00:42:34,640 --> 00:42:37,430
to run in that stage so the the stage

936
00:42:37,430 --> 00:42:39,740
execution order is the LexCorp it's the

937
00:42:39,740 --> 00:42:43,250
order that it's specified in the that

938
00:42:43,250 --> 00:42:44,030
Jenkins file

939
00:42:44,030 --> 00:42:46,820
I have played around with being able to

940
00:42:46,820 --> 00:42:50,030
say this stage can't run until these

941
00:42:50,030 --> 00:42:53,180
other stages are done or this stage when

942
00:42:53,180 --> 00:42:55,070
this stage finishes this other stage

943
00:42:55,070 --> 00:42:56,840
kicks off but I'm not sure if I'm gonna

944
00:42:56,840 --> 00:42:59,390
be able to find a good syntax for that

945
00:42:59,390 --> 00:43:02,810
that actually makes sense that so for

946
00:43:02,810 --> 00:43:06,910
now the it's just what's next in line

947
00:43:06,910 --> 00:43:09,050
but we'll see that's an area I'm

948
00:43:09,050 --> 00:43:11,560
definitely interested in it more of an

949
00:43:11,560 --> 00:43:14,750
execution dependency graph but I need to

950
00:43:14,750 --> 00:43:16,250
figure out what the right way to do that

951
00:43:16,250 --> 00:43:19,910
is and if I can't find the right way I'm

952
00:43:19,910 --> 00:43:23,170
not going to do it we're not going to

953
00:43:23,170 --> 00:43:26,300
it's important it's really important to

954
00:43:26,300 --> 00:43:29,180
us that declarative continue to make

955
00:43:29,180 --> 00:43:33,920
sense and provide the both simplicity

956
00:43:33,920 --> 00:43:37,250
and power so if we have to make a

957
00:43:37,250 --> 00:43:41,770
compromise between full power and full

958
00:43:41,770 --> 00:43:44,060
understand ability and usability in

959
00:43:44,060 --> 00:43:45,500
declarative we're gonna go with

960
00:43:45,500 --> 00:43:48,110
usability because you can always switch

961
00:43:48,110 --> 00:43:49,760
to using a scripted pipeline and when

962
00:43:49,760 --> 00:43:50,890
you need more power

963
00:43:50,890 --> 00:43:57,200
yes is there any way to enforce

964
00:43:57,200 --> 00:44:01,100
declarative right now no there are some

965
00:44:01,100 --> 00:44:04,940
ideas I would expect that if there could

966
00:44:04,940 --> 00:44:06,650
be something from cloudBees that would

967
00:44:06,650 --> 00:44:08,600
require that but right now there is not

968
00:44:08,600 --> 00:44:11,000
a way to enforce requiring declarative

969
00:44:11,000 --> 00:44:15,400
for everything yes

970
00:44:27,980 --> 00:44:31,170
yes yeah the question was whether

971
00:44:31,170 --> 00:44:32,880
there's a way to get some of the power

972
00:44:32,880 --> 00:44:35,190
of full scripted pipeline without having

973
00:44:35,190 --> 00:44:37,369
to completely leave declarative pipeline

974
00:44:37,369 --> 00:44:39,930
there's a special step that's available

975
00:44:39,930 --> 00:44:41,160
called script

976
00:44:41,160 --> 00:44:44,040
it's just script curly-brace steps and

977
00:44:44,040 --> 00:44:46,230
if it's inside anything that's inside

978
00:44:46,230 --> 00:44:48,930
that script block doesn't go through

979
00:44:48,930 --> 00:44:51,119
validation so we're not checking it to

980
00:44:51,119 --> 00:44:52,710
make sure it fits the sentence upset of

981
00:44:52,710 --> 00:44:55,740
the syntax we allow we're not making

982
00:44:55,740 --> 00:44:58,619
sure that the step parameters are valid

983
00:44:58,619 --> 00:45:01,080
we're allowing you to do if else for

984
00:45:01,080 --> 00:45:05,029
etcetera things that we don't like

