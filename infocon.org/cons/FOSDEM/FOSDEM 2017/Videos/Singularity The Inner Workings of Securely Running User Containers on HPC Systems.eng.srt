1
00:00:04,540 --> 00:00:10,180
okay can you guys hear me so as you said

2
00:00:10,180 --> 00:00:12,160
yeah I'm Michael Bauer for the last nine

3
00:00:12,160 --> 00:00:14,529
months or so I worked at the GSI you can

4
00:00:14,529 --> 00:00:16,960
find me on github at power m97

5
00:00:16,960 --> 00:00:19,150
send me an email about what I met you

6
00:00:19,150 --> 00:00:21,280
missed out edu if you want you find this

7
00:00:21,280 --> 00:00:23,800
particularly interesting so I'm here to

8
00:00:23,800 --> 00:00:25,810
talk a little bit about singularity so

9
00:00:25,810 --> 00:00:28,330
singularity is a container solution for

10
00:00:28,330 --> 00:00:32,049
HPC environments here's our homepage

11
00:00:32,049 --> 00:00:35,800
singularity LBL gov you can also check

12
00:00:35,800 --> 00:00:37,890
us out on github we've had a lot of a

13
00:00:37,890 --> 00:00:40,510
lot of contribution in the last six or

14
00:00:40,510 --> 00:00:43,059
seven months lots of activity feel free

15
00:00:43,059 --> 00:00:45,339
to come by and contribute there's a list

16
00:00:45,339 --> 00:00:48,069
of our contributors so the project head

17
00:00:48,069 --> 00:00:49,449
is Greg kertzer at Lawrence Berkeley

18
00:00:49,449 --> 00:00:54,729
National Lab myself Brian Krishna and

19
00:00:54,729 --> 00:00:57,309
Vanessa are some of the core developers

20
00:00:57,309 --> 00:00:58,719
and then we also have people who have

21
00:00:58,719 --> 00:01:00,399
made other significant contributions to

22
00:01:00,399 --> 00:01:04,629
our code base so first want to kind of

23
00:01:04,629 --> 00:01:06,220
pose a question I'm assuming that at the

24
00:01:06,220 --> 00:01:07,720
container dev room most everybody

25
00:01:07,720 --> 00:01:09,190
actually knows what a container is

26
00:01:09,190 --> 00:01:11,740
already but it's important to kind of

27
00:01:11,740 --> 00:01:13,150
strictly define what we mean by a

28
00:01:13,150 --> 00:01:15,940
container and to do that I want to talk

29
00:01:15,940 --> 00:01:17,440
first about virtual machines and

30
00:01:17,440 --> 00:01:20,080
wikipedia talks and they say computing a

31
00:01:20,080 --> 00:01:21,940
virtual machine is an emulation of a

32
00:01:21,940 --> 00:01:24,070
computer system just at its most basic

33
00:01:24,070 --> 00:01:28,030
level and you know a good example VMware

34
00:01:28,030 --> 00:01:31,840
virtual box what have you some pros you

35
00:01:31,840 --> 00:01:33,490
can run different operating systems so

36
00:01:33,490 --> 00:01:34,810
back when I was younger it was really

37
00:01:34,810 --> 00:01:36,490
cool that I could run Windows on my

38
00:01:36,490 --> 00:01:39,970
dad's Mac OS laptop it's awesome you can

39
00:01:39,970 --> 00:01:42,070
save money so we didn't have to buy you

40
00:01:42,070 --> 00:01:43,810
know a second laptop in order to run

41
00:01:43,810 --> 00:01:45,790
programs that only run on Windows namely

42
00:01:45,790 --> 00:01:49,030
games for me and it's a little bit

43
00:01:49,030 --> 00:01:50,560
easier to maintain than hardware you can

44
00:01:50,560 --> 00:01:52,030
download a new virtual machine if you

45
00:01:52,030 --> 00:01:55,690
want write some down sides at the same

46
00:01:55,690 --> 00:01:57,940
time is performance it's gonna be a

47
00:01:57,940 --> 00:02:00,400
little bit slower most likely and you're

48
00:02:00,400 --> 00:02:02,290
gonna have memory requirements and

49
00:02:02,290 --> 00:02:05,020
storage requirements that you wouldn't

50
00:02:05,020 --> 00:02:06,310
otherwise have so to run a virtual

51
00:02:06,310 --> 00:02:07,780
machine you know maybe you need 10

52
00:02:07,780 --> 00:02:11,140
gigabytes of space and to talk about

53
00:02:11,140 --> 00:02:12,609
containers then we can say that

54
00:02:12,609 --> 00:02:14,200
containers are very similar in their

55
00:02:14,200 --> 00:02:16,900
goal to a virtual machine with the

56
00:02:16,900 --> 00:02:18,969
container you want to take some

57
00:02:18,969 --> 00:02:20,799
environment you want to encapsulate it

58
00:02:20,799 --> 00:02:23,950
and store it into some file or system of

59
00:02:23,950 --> 00:02:27,310
files to be distributed with the

60
00:02:27,310 --> 00:02:29,379
container however we don't do any sort

61
00:02:29,379 --> 00:02:31,389
of kernel emulation there's no

62
00:02:31,389 --> 00:02:34,060
architecture of virtualization it's just

63
00:02:34,060 --> 00:02:40,120
software package into one file and what

64
00:02:40,120 --> 00:02:42,909
that means is we don't have to waste an

65
00:02:42,909 --> 00:02:45,159
extra 5% performance to emulate the

66
00:02:45,159 --> 00:02:48,069
kernel we have a much smaller footprint

67
00:02:48,069 --> 00:02:51,790
on the disk we have nearly instantaneous

68
00:02:51,790 --> 00:02:53,439
startup time so when you guys you know

69
00:02:53,439 --> 00:02:54,819
when you do doctor run you're running

70
00:02:54,819 --> 00:02:57,340
immediately rather than waiting two or

71
00:02:57,340 --> 00:02:59,079
three minutes for VirtualBox to start up

72
00:02:59,079 --> 00:03:01,389
its virtual machines and you can run

73
00:03:01,389 --> 00:03:03,129
multiple instances of the same container

74
00:03:03,129 --> 00:03:05,950
using just one image on disk so if you

75
00:03:05,950 --> 00:03:10,329
fire up you know 20 20 docker containers

76
00:03:10,329 --> 00:03:13,269
you really only have one image on the

77
00:03:13,269 --> 00:03:15,510
disk

78
00:03:17,489 --> 00:03:21,569
my internet died hold on

79
00:03:53,209 --> 00:03:56,659
make it fullscreen

80
00:03:58,959 --> 00:04:08,290
there we go can i oh it's possible to

81
00:04:08,290 --> 00:04:26,440
get fullscreen there we go okay looks

82
00:04:26,440 --> 00:04:27,610
good okay

83
00:04:27,610 --> 00:04:32,050
I lost the Internet it's fine so cotton

84
00:04:32,050 --> 00:04:33,610
to talk about specifically running

85
00:04:33,610 --> 00:04:35,229
multiple instances of the same container

86
00:04:35,229 --> 00:04:37,150
just off of the same base image this is

87
00:04:37,150 --> 00:04:40,030
a depiction of Dockers image structure

88
00:04:40,030 --> 00:04:42,550
so you have multiple read-only layers

89
00:04:42,550 --> 00:04:44,949
built on top of each other and then at

90
00:04:44,949 --> 00:04:47,440
the top here cut off if I can scroll up

91
00:04:47,440 --> 00:04:52,630
just a little bit you can see that you

92
00:04:52,630 --> 00:04:54,430
have a small thing maybe a couple

93
00:04:54,430 --> 00:04:56,770
megabyte read/write layer where any

94
00:04:56,770 --> 00:04:59,320
running application can do read/write

95
00:04:59,320 --> 00:05:02,830
operations on and these are all you know

96
00:05:02,830 --> 00:05:05,740
each instance of a container your run

97
00:05:05,740 --> 00:05:07,210
will have their own read/write layer at

98
00:05:07,210 --> 00:05:09,400
the top that allows you to do some

99
00:05:09,400 --> 00:05:10,449
really kind of cool things with

100
00:05:10,449 --> 00:05:13,240
containers so a lot of places actually

101
00:05:13,240 --> 00:05:14,650
using containers you know you can deploy

102
00:05:14,650 --> 00:05:17,909
on Amazon with AWS Google cloud platform

103
00:05:17,909 --> 00:05:20,050
you have companies that are now

104
00:05:20,050 --> 00:05:21,760
providing their services as a container

105
00:05:21,760 --> 00:05:24,940
let you use some big web sites even are

106
00:05:24,940 --> 00:05:27,400
using containers such as reddit to

107
00:05:27,400 --> 00:05:30,580
deploy all of their infrastructure and

108
00:05:30,580 --> 00:05:32,020
so I want to talk about specifically

109
00:05:32,020 --> 00:05:40,180
containers for scientific computing if I

110
00:05:40,180 --> 00:05:45,270
what yeah I am and it doesn't align

111
00:05:45,529 --> 00:05:59,439
Oh oh wait and it won't align it's okay

112
00:05:59,439 --> 00:06:02,869
is worth the try anyway so I want to

113
00:06:02,869 --> 00:06:04,459
talk about specifically containers in

114
00:06:04,459 --> 00:06:08,269
scientific computing we see containers a

115
00:06:08,269 --> 00:06:11,299
lot in industry but for instance at the

116
00:06:11,299 --> 00:06:12,739
place I was been working at for the last

117
00:06:12,739 --> 00:06:15,079
nine months they were not using

118
00:06:15,079 --> 00:06:17,509
containers at all and they wanted to

119
00:06:17,509 --> 00:06:20,149
investigate containers for their HPC and

120
00:06:20,149 --> 00:06:22,399
why would we want to do that well you

121
00:06:22,399 --> 00:06:23,929
can first and foremost

122
00:06:23,929 --> 00:06:26,779
escape dependency hell and so you know

123
00:06:26,779 --> 00:06:29,029
they always have the issue that we were

124
00:06:29,029 --> 00:06:31,909
trying to run some version of code and

125
00:06:31,909 --> 00:06:34,789
it was depending on library a we have

126
00:06:34,789 --> 00:06:37,069
library B and it didn't run and users

127
00:06:37,069 --> 00:06:38,359
get pissed off because of that and they

128
00:06:38,359 --> 00:06:41,989
yell at IT because of that secondly you

129
00:06:41,989 --> 00:06:43,819
want your remote code to work the exact

130
00:06:43,819 --> 00:06:45,799
same way as your local code every single

131
00:06:45,799 --> 00:06:48,169
time and with containers you know you

132
00:06:48,169 --> 00:06:49,429
can run the container on your local

133
00:06:49,429 --> 00:06:50,929
machine send the container to the

134
00:06:50,929 --> 00:06:52,789
cluster and the cluster just runs the

135
00:06:52,789 --> 00:06:55,129
container and it only runs what's inside

136
00:06:55,129 --> 00:06:57,799
the container and third of all and maybe

137
00:06:57,799 --> 00:06:59,389
most important even for scientific

138
00:06:59,389 --> 00:07:01,219
computing is that you can have one file

139
00:07:01,219 --> 00:07:03,110
that distributes your entire environment

140
00:07:03,110 --> 00:07:05,719
used to generate results and that's

141
00:07:05,719 --> 00:07:07,339
really important for repres ability of

142
00:07:07,339 --> 00:07:10,039
results when we're doing an experiment

143
00:07:10,039 --> 00:07:14,089
and you can have everything that you

144
00:07:14,089 --> 00:07:16,399
used for that experiment inside one file

145
00:07:16,399 --> 00:07:19,099
and give that file to other people you

146
00:07:19,099 --> 00:07:21,169
can promise them that they're going to

147
00:07:21,169 --> 00:07:23,179
be able to reproduce your results using

148
00:07:23,179 --> 00:07:27,219
the exact same environment that you did

149
00:07:27,729 --> 00:07:31,189
so here's a little diagram of what users

150
00:07:31,189 --> 00:07:34,279
absolutely hate where you run code

151
00:07:34,279 --> 00:07:38,149
locally it works perfectly you run code

152
00:07:38,149 --> 00:07:42,699
on the cluster it works not perfectly

153
00:07:43,189 --> 00:07:45,539
yeah okay this is supposed to be

154
00:07:45,539 --> 00:07:48,419
animated but it's a PDF so I can't do

155
00:07:48,419 --> 00:07:50,819
that so we created a little bit of a

156
00:07:50,819 --> 00:07:52,649
checklist when I was working there when

157
00:07:52,649 --> 00:07:53,849
we were investigating container

158
00:07:53,849 --> 00:07:56,999
solutions to use for our HPC for what we

159
00:07:56,999 --> 00:07:58,469
actually need in order to have a

160
00:07:58,469 --> 00:08:00,689
container solution so one can any user

161
00:08:00,689 --> 00:08:02,069
run containers without special

162
00:08:02,069 --> 00:08:03,089
privileges

163
00:08:03,089 --> 00:08:05,369
- can we integrate it seamlessly into

164
00:08:05,369 --> 00:08:06,899
our infrastructure do we have to install

165
00:08:06,899 --> 00:08:08,759
something like kubernetes or you know

166
00:08:08,759 --> 00:08:10,740
docker swarm and do we have to waste

167
00:08:10,740 --> 00:08:12,899
time and effort to get that configured

168
00:08:12,899 --> 00:08:15,959
properly third is it portable between

169
00:08:15,959 --> 00:08:17,969
many systems can we send it on older

170
00:08:17,969 --> 00:08:20,189
hosts can we send it across the ocean to

171
00:08:20,189 --> 00:08:21,959
somebody else to let them use our

172
00:08:21,959 --> 00:08:24,689
container and fourth can we let users

173
00:08:24,689 --> 00:08:27,080
bring containers onto our cluster

174
00:08:27,080 --> 00:08:28,919
without any sort of administrative

175
00:08:28,919 --> 00:08:30,930
oversight you know I don't want to have

176
00:08:30,930 --> 00:08:33,389
to scan my users containers to make sure

177
00:08:33,389 --> 00:08:35,250
they don't have malicious content and I

178
00:08:35,250 --> 00:08:38,909
don't want to have to trust my users and

179
00:08:38,909 --> 00:08:41,789
so we first we investigated dr. as most

180
00:08:41,789 --> 00:08:44,430
people do it fills three out of four of

181
00:08:44,430 --> 00:08:48,149
the check boxes doesn't really integrate

182
00:08:48,149 --> 00:08:50,100
nicely into our architecture we would

183
00:08:50,100 --> 00:08:51,360
have probably had to install something

184
00:08:51,360 --> 00:08:53,939
like kubernetes on our server to get it

185
00:08:53,939 --> 00:08:56,579
to working work properly so that kind of

186
00:08:56,579 --> 00:08:58,860
rule docker out for us and another

187
00:08:58,860 --> 00:09:01,410
really really important point for HPC is

188
00:09:01,410 --> 00:09:03,959
that your container software can't come

189
00:09:03,959 --> 00:09:06,240
anywhere close to root privileges ever

190
00:09:06,240 --> 00:09:09,630
so you you have to ensure that if you

191
00:09:09,630 --> 00:09:11,009
give users the ability to run a

192
00:09:11,009 --> 00:09:12,660
container they're not going to be able

193
00:09:12,660 --> 00:09:14,009
to do something that they would

194
00:09:14,009 --> 00:09:15,930
otherwise not be able to do on the host

195
00:09:15,930 --> 00:09:19,649
machine and with bakker we actually find

196
00:09:19,649 --> 00:09:21,779
out that we run into a slight bit of an

197
00:09:21,779 --> 00:09:24,269
issue where docker actually runs a root

198
00:09:24,269 --> 00:09:27,269
level process all the time as a daemon

199
00:09:27,269 --> 00:09:29,880
that spawns containers and kills

200
00:09:29,880 --> 00:09:31,529
containers in an in charge of scheduling

201
00:09:31,529 --> 00:09:34,829
containers and so when we had initially

202
00:09:34,829 --> 00:09:37,709
proposed to IT that we installed docker

203
00:09:37,709 --> 00:09:39,740
on the cluster and try it out they just

204
00:09:39,740 --> 00:09:42,810
told us no they wouldn't let us install

205
00:09:42,810 --> 00:09:44,310
something that had a root process on

206
00:09:44,310 --> 00:09:47,130
every machine and that really rule about

207
00:09:47,130 --> 00:09:52,829
docker for us and so that's kind of

208
00:09:52,829 --> 00:09:54,839
where the investigation came in and then

209
00:09:54,839 --> 00:09:56,190
we stumbled upon see

210
00:09:56,190 --> 00:09:58,470
hilarity and singularity is the solution

211
00:09:58,470 --> 00:10:01,080
that we chose design for high

212
00:10:01,080 --> 00:10:04,560
performance computing so as you can see

213
00:10:04,560 --> 00:10:05,580
we can go back through the checklist

214
00:10:05,580 --> 00:10:07,830
we're filling up every single check mark

215
00:10:07,830 --> 00:10:11,550
this time there's no root level daemon

216
00:10:11,550 --> 00:10:12,690
so we don't have to worry about the

217
00:10:12,690 --> 00:10:15,270
first point where we talk or you kind of

218
00:10:15,270 --> 00:10:18,630
have to worry about that it can be run

219
00:10:18,630 --> 00:10:20,310
essentially the same way as you run any

220
00:10:20,310 --> 00:10:22,290
application you can directly execute a

221
00:10:22,290 --> 00:10:26,310
container as a file on your disk it's

222
00:10:26,310 --> 00:10:28,170
portable so singularities built it

223
00:10:28,170 --> 00:10:30,240
doesn't require any any kernel features

224
00:10:30,240 --> 00:10:32,040
from most recent kernel you can run it

225
00:10:32,040 --> 00:10:34,140
back I think one of our users was

226
00:10:34,140 --> 00:10:36,530
running it on Red Hat with two point six

227
00:10:36,530 --> 00:10:39,300
so you know designed for maximum

228
00:10:39,300 --> 00:10:42,750
portability and then we don't actually

229
00:10:42,750 --> 00:10:45,180
have to worry about trusting our users

230
00:10:45,180 --> 00:10:48,350
there's no issue with giving a user full

231
00:10:48,350 --> 00:10:50,430
control over what containers they're

232
00:10:50,430 --> 00:10:52,800
running on the cluster we won't run into

233
00:10:52,800 --> 00:10:54,180
issues with that and we'll talk a little

234
00:10:54,180 --> 00:10:59,640
more about that anyway again with

235
00:10:59,640 --> 00:11:01,530
singularity any container can be run by

236
00:11:01,530 --> 00:11:04,280
any user at any time for any reason so

237
00:11:04,280 --> 00:11:06,060
when you run a container with

238
00:11:06,060 --> 00:11:08,370
singularity the user is the same user ID

239
00:11:08,370 --> 00:11:10,200
inside the container as they are on the

240
00:11:10,200 --> 00:11:13,860
host you don't have to again just to

241
00:11:13,860 --> 00:11:15,030
reiterate you don't have to change your

242
00:11:15,030 --> 00:11:17,810
workflow at all to use singularity so

243
00:11:17,810 --> 00:11:20,670
you know in our instance it was just

244
00:11:20,670 --> 00:11:23,480
changing our batch submission script to

245
00:11:23,480 --> 00:11:26,580
just run singularity instead of running

246
00:11:26,580 --> 00:11:28,890
whatever ever executable we had to run

247
00:11:28,890 --> 00:11:30,960
or directly executing the image file

248
00:11:30,960 --> 00:11:35,310
itself thirdly it's a single image file

249
00:11:35,310 --> 00:11:37,050
and so that ties in really well and

250
00:11:37,050 --> 00:11:39,540
that's kind of one of the big topics

251
00:11:39,540 --> 00:11:40,920
that we discuss in a paper that we

252
00:11:40,920 --> 00:11:42,420
submitted for publishing recently about

253
00:11:42,420 --> 00:11:45,330
singularity is that we have just one

254
00:11:45,330 --> 00:11:47,280
file and so you can distribute that file

255
00:11:47,280 --> 00:11:49,890
and it contains everything necessary to

256
00:11:49,890 --> 00:11:51,839
run everything that you've wanted to run

257
00:11:51,839 --> 00:11:55,020
and it's safe you know you don't have to

258
00:11:55,020 --> 00:11:56,250
again you don't have to worry about

259
00:11:56,250 --> 00:11:59,220
users and what they have inside their

260
00:11:59,220 --> 00:12:00,660
container because they can't do anything

261
00:12:00,660 --> 00:12:03,350
malicious

262
00:12:03,430 --> 00:12:06,320
as you can see there are a lot of places

263
00:12:06,320 --> 00:12:08,450
actually now that are trusting our

264
00:12:08,450 --> 00:12:10,850
container software to run on their

265
00:12:10,850 --> 00:12:14,060
clusters so place I work GSI home wilt

266
00:12:14,060 --> 00:12:17,480
center the running on art cluster a

267
00:12:17,480 --> 00:12:19,340
couple other big ones there's people

268
00:12:19,340 --> 00:12:29,090
running at MIT on Stampede Texas so here

269
00:12:29,090 --> 00:12:31,220
I want to compare singularity to a

270
00:12:31,220 --> 00:12:32,870
couple other leading container solutions

271
00:12:32,870 --> 00:12:35,180
so shifter which you may or may not have

272
00:12:35,180 --> 00:12:36,980
heard of is similar to singularity its

273
00:12:36,980 --> 00:12:38,780
containers designed for high performance

274
00:12:38,780 --> 00:12:42,310
computing charlie cloud is also the same

275
00:12:42,310 --> 00:12:46,550
it's a slightly less mature version dr.

276
00:12:46,550 --> 00:12:48,200
which I'm sure everybody's heard of and

277
00:12:48,200 --> 00:12:50,450
then singularity and there are three

278
00:12:50,450 --> 00:12:51,890
kind of main points that make this

279
00:12:51,890 --> 00:12:53,780
really important for high-performance

280
00:12:53,780 --> 00:12:57,020
computing one native support for GPUs

281
00:12:57,020 --> 00:12:58,700
inside your container it's really

282
00:12:58,700 --> 00:13:00,680
important especially for scientific

283
00:13:00,680 --> 00:13:03,170
computing that you can use your GPU

284
00:13:03,170 --> 00:13:06,010
inside the container without any extra

285
00:13:06,010 --> 00:13:12,920
integration the second native support

286
00:13:12,920 --> 00:13:14,620
for InfiniBand

287
00:13:14,620 --> 00:13:18,260
again it's really important that we can

288
00:13:18,260 --> 00:13:21,200
run InfiniBand and use not just IP over

289
00:13:21,200 --> 00:13:23,540
InfiniBand but verbs or our DMA inside

290
00:13:23,540 --> 00:13:25,880
your container without having to do any

291
00:13:25,880 --> 00:13:28,310
extra integration so you can just simply

292
00:13:28,310 --> 00:13:30,170
specify you want to use InfiniBand and

293
00:13:30,170 --> 00:13:31,670
then inside the container you'll have

294
00:13:31,670 --> 00:13:34,940
access to it and also we have native

295
00:13:34,940 --> 00:13:38,450
support for open MPI the other two HPC

296
00:13:38,450 --> 00:13:40,730
containers they provide also similar

297
00:13:40,730 --> 00:13:42,950
native solutions so it's not such a big

298
00:13:42,950 --> 00:13:44,360
difference but from docker it's a big

299
00:13:44,360 --> 00:13:46,510
difference

300
00:13:57,270 --> 00:14:02,920
right so essentially what we're saying

301
00:14:02,920 --> 00:14:08,410
is we don't have to rely on any other

302
00:14:08,410 --> 00:14:10,090
software to build a singularity image

303
00:14:10,090 --> 00:14:14,740
okay so with essentially shifter and

304
00:14:14,740 --> 00:14:16,840
charlie cloud you can only use docker

305
00:14:16,840 --> 00:14:21,880
images and so on those services you have

306
00:14:21,880 --> 00:14:23,470
to rely on docker in order to have an

307
00:14:23,470 --> 00:14:25,690
image on singularity it's possible to

308
00:14:25,690 --> 00:14:27,220
use something like Dee bootstrap to just

309
00:14:27,220 --> 00:14:29,410
build your image yourself kind of

310
00:14:29,410 --> 00:14:32,430
natively and really quickly and easily

311
00:14:32,430 --> 00:14:35,790
that answer your question

312
00:14:39,340 --> 00:14:43,040
yeah so we actually submitted a paper

313
00:14:43,040 --> 00:14:45,880
this is where that graphic is from

314
00:14:45,880 --> 00:14:48,230
talking about containers for scientific

315
00:14:48,230 --> 00:14:53,030
computing specifically so now I would

316
00:14:53,030 --> 00:14:55,370
like to cover a bit of a basic usage of

317
00:14:55,370 --> 00:14:57,950
singularity kind of just to get people

318
00:14:57,950 --> 00:14:59,930
into the work flow of singularity and

319
00:14:59,930 --> 00:15:03,140
how you would actually use it so I like

320
00:15:03,140 --> 00:15:05,090
to think of singularity being being used

321
00:15:05,090 --> 00:15:06,980
kind of in three separate segments you

322
00:15:06,980 --> 00:15:08,720
have a create process where you run

323
00:15:08,720 --> 00:15:10,790
pseudo singularity create give it a name

324
00:15:10,790 --> 00:15:13,610
and that puts the physical image file on

325
00:15:13,610 --> 00:15:14,120
the disk

326
00:15:14,120 --> 00:15:17,240
you have pseudo singularity bootstrap

327
00:15:17,240 --> 00:15:19,010
and then you tell it an image and then a

328
00:15:19,010 --> 00:15:20,690
definition file which I'll talk about in

329
00:15:20,690 --> 00:15:24,020
a bit and all that does is it takes a

330
00:15:24,020 --> 00:15:25,910
set of rules inside your definition file

331
00:15:25,910 --> 00:15:28,400
analogous to a docker file and it builds

332
00:15:28,400 --> 00:15:30,380
your image either from scratch or you

333
00:15:30,380 --> 00:15:32,090
can also build it from you know a docker

334
00:15:32,090 --> 00:15:34,370
image from upstream hosted on docker hub

335
00:15:34,370 --> 00:15:37,880
and then running your image so there are

336
00:15:37,880 --> 00:15:39,710
three main ways to run an image you have

337
00:15:39,710 --> 00:15:42,170
singularity shell which just as it you

338
00:15:42,170 --> 00:15:43,610
know as it may seem it opens up an

339
00:15:43,610 --> 00:15:45,320
interactive shell inside the container

340
00:15:45,320 --> 00:15:48,350
for you to play around with singularity

341
00:15:48,350 --> 00:15:50,690
exact can just execute any sort of

342
00:15:50,690 --> 00:15:53,780
executable that you specify and then

343
00:15:53,780 --> 00:15:56,150
singularity run and also directly

344
00:15:56,150 --> 00:15:57,920
executing the image these are kind of

345
00:15:57,920 --> 00:16:00,620
the same and what that does is there's a

346
00:16:00,620 --> 00:16:02,630
script that you can specify inside the

347
00:16:02,630 --> 00:16:05,000
bootstrap file called the run script and

348
00:16:05,000 --> 00:16:07,250
it just executes that script when you

349
00:16:07,250 --> 00:16:12,590
run direct execution so now I have and

350
00:16:12,590 --> 00:16:14,210
hopefully this is still cache because I

351
00:16:14,210 --> 00:16:16,780
don't have Internet

352
00:16:31,970 --> 00:16:35,229
there you go

353
00:16:42,750 --> 00:16:53,910
oh yeah no it's not cooperating so I

354
00:16:53,910 --> 00:16:55,380
haven't asked you cinema little

355
00:16:55,380 --> 00:16:57,240
demonstration just for the basic

356
00:16:57,240 --> 00:17:02,990
bootstrapping process why will that not

357
00:17:03,920 --> 00:17:05,849
okay I don't know why it's not going

358
00:17:05,849 --> 00:17:08,609
fullscreen over here but essentially if

359
00:17:08,609 --> 00:17:10,699
we can maybe play it and zoom out a bit

360
00:17:10,699 --> 00:17:15,300
there this will just show you kind of

361
00:17:15,300 --> 00:17:16,890
how simple it is to get started with

362
00:17:16,890 --> 00:17:18,689
singularity and it'll take you through

363
00:17:18,689 --> 00:17:21,060
the creation process which we're doing

364
00:17:21,060 --> 00:17:23,670
right now by specifying a size so five

365
00:17:23,670 --> 00:17:26,839
hundred and sixty eight megabytes

366
00:17:26,959 --> 00:17:30,690
correct and so the thing about the

367
00:17:30,690 --> 00:17:32,490
creation of the image is we want users

368
00:17:32,490 --> 00:17:34,290
to create their image locally on their

369
00:17:34,290 --> 00:17:37,080
own computer so it's actually because of

370
00:17:37,080 --> 00:17:38,790
the way singularity works we're doing

371
00:17:38,790 --> 00:17:40,320
set UID and we don't have user name

372
00:17:40,320 --> 00:17:45,300
spaces it's kind of for now not feasible

373
00:17:45,300 --> 00:17:47,700
to be able to let a user bootstrap with

374
00:17:47,700 --> 00:17:49,860
just some arbitrary code on the remote

375
00:17:49,860 --> 00:17:52,470
environment because in order to do most

376
00:17:52,470 --> 00:17:54,570
bootstrapping things you need to

377
00:17:54,570 --> 00:17:56,790
actually have sudo you don't have to get

378
00:17:56,790 --> 00:18:00,750
install or whatever right and so I

379
00:18:00,750 --> 00:18:03,180
bootstrap the image here with just a

380
00:18:03,180 --> 00:18:08,280
basic definition file and then all we do

381
00:18:08,280 --> 00:18:09,690
to run it is singularity shell and

382
00:18:09,690 --> 00:18:11,250
that's actually as you can see we don't

383
00:18:11,250 --> 00:18:14,390
need sudo there to use it

384
00:18:21,670 --> 00:18:27,760
okay so security supports several

385
00:18:27,760 --> 00:18:31,570
different actually image formats so the

386
00:18:31,570 --> 00:18:34,240
most common most basic would just be the

387
00:18:34,240 --> 00:18:38,170
image file which isn't listed here but

388
00:18:38,170 --> 00:18:41,710
it's just a dot IMG file it's a file

389
00:18:41,710 --> 00:18:43,540
system that's formatted by singularity

390
00:18:43,540 --> 00:18:46,150
create and it's just one file usually

391
00:18:46,150 --> 00:18:48,370
four to five hundred megabytes or maybe

392
00:18:48,370 --> 00:18:50,500
a little bit more we also allow you to

393
00:18:50,500 --> 00:18:53,670
have just a directory so you can you can

394
00:18:53,670 --> 00:18:56,110
directly if you extract for instance a

395
00:18:56,110 --> 00:18:58,420
docker the archive generated by docker

396
00:18:58,420 --> 00:19:00,790
export if you have that in a directory

397
00:19:00,790 --> 00:19:02,800
you can then use that as a container or

398
00:19:02,800 --> 00:19:04,720
if you have an archive itself you can

399
00:19:04,720 --> 00:19:10,020
use that as a container as well so

400
00:19:10,020 --> 00:19:13,540
singularity also for for users that are

401
00:19:13,540 --> 00:19:16,090
more accustomed to docker we have direct

402
00:19:16,090 --> 00:19:19,320
docker integration

403
00:19:22,400 --> 00:19:24,500
so if you watch this what I'm gonna be

404
00:19:24,500 --> 00:19:27,080
able to do is I'm gonna run just as a

405
00:19:27,080 --> 00:19:29,120
non root user I'm gonna do a singularity

406
00:19:29,120 --> 00:19:32,240
shell command and I'm gonna directly

407
00:19:32,240 --> 00:19:34,040
call on the docker API and we're gonna

408
00:19:34,040 --> 00:19:38,030
run the one-two 1404 version without any

409
00:19:38,030 --> 00:19:40,540
extra privileges

410
00:19:50,020 --> 00:19:52,360
and this was done in my hotel room so

411
00:19:52,360 --> 00:19:54,040
the internet was awful downloading 100

412
00:19:54,040 --> 00:19:58,780
megabytes so it takes 2 minutes and if

413
00:19:58,780 --> 00:20:03,010
we go to about here yeah you can see it

414
00:20:03,010 --> 00:20:04,780
finishes downloading and extracting and

415
00:20:04,780 --> 00:20:07,470
puts us directly into a docker container

416
00:20:07,470 --> 00:20:09,820
and the next thing that I want to point

417
00:20:09,820 --> 00:20:12,309
out is I'm going to exit the container

418
00:20:12,309 --> 00:20:20,770
here and then I'm gonna rerun again

419
00:20:20,770 --> 00:20:22,990
singularity shell and directly call on

420
00:20:22,990 --> 00:20:25,720
the docker API and you'll notice that

421
00:20:25,720 --> 00:20:29,170
it's just instant this time and that's

422
00:20:29,170 --> 00:20:31,120
because we actually restore these in

423
00:20:31,120 --> 00:20:34,000
cache and normally in the home directory

424
00:20:34,000 --> 00:20:36,520
also optionally in the temp directory so

425
00:20:36,520 --> 00:20:39,010
if you run ten instances on on some node

426
00:20:39,010 --> 00:20:41,470
somewhere on your cluster of the same

427
00:20:41,470 --> 00:20:43,510
singularity container or docker

428
00:20:43,510 --> 00:20:45,970
container you're actually only going to

429
00:20:45,970 --> 00:20:48,490
have to download it once so we support

430
00:20:48,490 --> 00:20:51,000
that as well

431
00:20:54,380 --> 00:21:01,350
so there's no native integration for any

432
00:21:01,350 --> 00:21:03,900
schedulers except for slurm so we

433
00:21:03,900 --> 00:21:05,340
integrate directly with the slurm

434
00:21:05,340 --> 00:21:08,340
plug-in manager and I was going to talk

435
00:21:08,340 --> 00:21:10,350
about that it's actually on my my slides

436
00:21:10,350 --> 00:21:12,690
online except those aren't behaving

437
00:21:12,690 --> 00:21:18,950
properly they might be now they're not

438
00:21:18,950 --> 00:21:21,480
but essentially what you can do is if

439
00:21:21,480 --> 00:21:24,450
you're using slurm you can just add a

440
00:21:24,450 --> 00:21:26,309
line into a nice batch submission script

441
00:21:26,309 --> 00:21:29,159
that specifies what container and it'll

442
00:21:29,159 --> 00:21:30,990
start the container before the job is

443
00:21:30,990 --> 00:21:32,820
run and then run the job script inside

444
00:21:32,820 --> 00:21:38,789
the container so the primary is a

445
00:21:38,789 --> 00:21:43,820
request for the primary motivation for

446
00:21:43,820 --> 00:21:46,260
for searching for singularity at where I

447
00:21:46,260 --> 00:21:49,200
was working was we were running jobs for

448
00:21:49,200 --> 00:21:52,220
Alice were an Alice to you to Center and

449
00:21:52,220 --> 00:21:57,059
our cluster there is a a debian based

450
00:21:57,059 --> 00:22:02,220
system whereas alice and certain they're

451
00:22:02,220 --> 00:22:06,750
expecting scientific linux and what

452
00:22:06,750 --> 00:22:08,100
happened is that we were getting you

453
00:22:08,100 --> 00:22:09,750
know an exceptional amount of errors

454
00:22:09,750 --> 00:22:12,870
something like 40% error rate which is

455
00:22:12,870 --> 00:22:15,890
not normal not what they're expecting

456
00:22:15,890 --> 00:22:19,230
not acceptable either so for those of

457
00:22:19,230 --> 00:22:21,090
you who are unfamiliar this is kind of

458
00:22:21,090 --> 00:22:22,799
what the alice project is looking like

459
00:22:22,799 --> 00:22:26,070
or more in general that w LCG they

460
00:22:26,070 --> 00:22:28,200
generate data at the tier zero inside

461
00:22:28,200 --> 00:22:30,360
actually the Alice detector at CERN the

462
00:22:30,360 --> 00:22:33,690
data is distributed to tier 1 centers as

463
00:22:33,690 --> 00:22:36,120
one in each member country and then it's

464
00:22:36,120 --> 00:22:38,429
also distributed later for processing to

465
00:22:38,429 --> 00:22:41,610
tier two centers and the GSI is a tier 2

466
00:22:41,610 --> 00:22:43,080
Center and that's where I work and

467
00:22:43,080 --> 00:22:45,360
that's our computer that we've been

468
00:22:45,360 --> 00:22:46,919
building the green cube will have

469
00:22:46,919 --> 00:22:49,909
300,000 cores

470
00:22:50,690 --> 00:22:52,369
so again as I said we're trying to run

471
00:22:52,369 --> 00:22:55,549
2,000 jobs at the same time except 40%

472
00:22:55,549 --> 00:22:56,989
of them are failing because we're

473
00:22:56,989 --> 00:22:59,739
running on the wrong operating system

474
00:22:59,739 --> 00:23:04,070
and so our current solution for what

475
00:23:04,070 --> 00:23:06,799
they were doing is mounting some

476
00:23:06,799 --> 00:23:10,279
libraries in lustre in some weird

477
00:23:10,279 --> 00:23:13,519
directory they have their slur job

478
00:23:13,519 --> 00:23:15,229
submission script they actually have to

479
00:23:15,229 --> 00:23:18,849
intercept the script modify the script

480
00:23:18,849 --> 00:23:23,989
hacking some LD library path fix I think

481
00:23:23,989 --> 00:23:25,340
there's more I don't know what they were

482
00:23:25,340 --> 00:23:26,779
doing they couldn't explain it to me

483
00:23:26,779 --> 00:23:28,549
well enough for me to figure it out the

484
00:23:28,549 --> 00:23:31,759
point is that it's a big ugly mess that

485
00:23:31,759 --> 00:23:35,840
they're doing and so we converted that

486
00:23:35,840 --> 00:23:41,869
to run on singularity so the singularity

487
00:23:41,869 --> 00:23:45,830
solution to this problem is much simpler

488
00:23:45,830 --> 00:23:48,229
so we packaged scientific Linux 6 into a

489
00:23:48,229 --> 00:23:51,349
container we modify our slurm submission

490
00:23:51,349 --> 00:23:53,450
script simply just to be executing the

491
00:23:53,450 --> 00:23:56,659
container instead of executing the alice

492
00:23:56,659 --> 00:23:59,659
job environment we no longer have to

493
00:23:59,659 --> 00:24:03,769
modify or to mal lustre to get access to

494
00:24:03,769 --> 00:24:05,359
the libraries that we were supposed to

495
00:24:05,359 --> 00:24:07,849
have on scientific Linux and we can test

496
00:24:07,849 --> 00:24:11,389
our containers locally for deployment so

497
00:24:11,389 --> 00:24:13,879
here we we have a small diagram kind of

498
00:24:13,879 --> 00:24:15,950
this is our singularity build file and

499
00:24:15,950 --> 00:24:17,450
essentially what it does is it will pull

500
00:24:17,450 --> 00:24:19,429
the scientific Linux docker container

501
00:24:19,429 --> 00:24:22,489
from upstream CERN actually provides in

502
00:24:22,489 --> 00:24:26,599
the Atlas repository a doctor file for

503
00:24:26,599 --> 00:24:29,389
building a docker container and some

504
00:24:29,389 --> 00:24:31,159
singularity can just natively integrate

505
00:24:31,159 --> 00:24:33,499
with with docker it's just a simple

506
00:24:33,499 --> 00:24:35,989
one-line inside the build file and we're

507
00:24:35,989 --> 00:24:38,269
using scientific Linux already then we

508
00:24:38,269 --> 00:24:40,399
package it up into a container we store

509
00:24:40,399 --> 00:24:41,840
it on our filesystem and it's that

510
00:24:41,840 --> 00:24:45,220
accessible anywhere on the cluster

511
00:24:47,950 --> 00:24:52,400
so how exactly do we do what we're doing

512
00:24:52,400 --> 00:24:54,440
how can we have such secure containers

513
00:24:54,440 --> 00:24:56,000
how can we ensure to system

514
00:24:56,000 --> 00:24:57,650
administrators that users aren't going

515
00:24:57,650 --> 00:25:01,180
to be able to escalate their privileges

516
00:25:01,930 --> 00:25:04,370
so singularity it's it's actually very

517
00:25:04,370 --> 00:25:07,610
basic at it's at its heart it's a set

518
00:25:07,610 --> 00:25:10,940
UID binary and it's owned by root and so

519
00:25:10,940 --> 00:25:14,810
when you call it your real user ID is

520
00:25:14,810 --> 00:25:18,410
zero what we do is we mount all the

521
00:25:18,410 --> 00:25:21,470
necessary sort of files we bind about

522
00:25:21,470 --> 00:25:23,690
the image we do any sort of bind

523
00:25:23,690 --> 00:25:26,930
mounting that the user wants clean the

524
00:25:26,930 --> 00:25:28,430
environment to ensure that there are no

525
00:25:28,430 --> 00:25:30,200
leftover environment variables being

526
00:25:30,200 --> 00:25:33,650
passed through and then we hide inside

527
00:25:33,650 --> 00:25:36,230
certain namespaces if possible so the

528
00:25:36,230 --> 00:25:37,760
one that we always use we always use the

529
00:25:37,760 --> 00:25:39,950
mountain namespace on newer kernels if

530
00:25:39,950 --> 00:25:42,740
you're interested in trying it it's

531
00:25:42,740 --> 00:25:44,870
possible to now use user namespaces it's

532
00:25:44,870 --> 00:25:47,570
also possible to hide behind a process

533
00:25:47,570 --> 00:25:49,400
of PID namespace so that you can only

534
00:25:49,400 --> 00:25:52,720
see processes running in your container

535
00:25:52,720 --> 00:25:56,570
so running with a set UID binary is kind

536
00:25:56,570 --> 00:25:59,060
of insecure by nature I mean you're

537
00:25:59,060 --> 00:26:01,100
asking a system administrator to trust

538
00:26:01,100 --> 00:26:03,230
something that immediately grants the

539
00:26:03,230 --> 00:26:07,820
user root privileges by calling it so in

540
00:26:07,820 --> 00:26:09,950
order to securely do this and do it in a

541
00:26:09,950 --> 00:26:12,380
way that's auditable we have two

542
00:26:12,380 --> 00:26:14,180
function calls in our code we have a

543
00:26:14,180 --> 00:26:16,100
call called singularity privilege

544
00:26:16,100 --> 00:26:18,440
escalate which changes the effective

545
00:26:18,440 --> 00:26:21,110
user ID inside the running process to

546
00:26:21,110 --> 00:26:25,430
zero we then do one action at a time so

547
00:26:25,430 --> 00:26:27,740
for instance in order to mount a bind

548
00:26:27,740 --> 00:26:31,010
mount we have to have root privileges to

549
00:26:31,010 --> 00:26:33,920
do that and then we drop it immediately

550
00:26:33,920 --> 00:26:36,410
after using singularity privilege drop

551
00:26:36,410 --> 00:26:40,460
and we only ever use any of these

552
00:26:40,460 --> 00:26:42,610
function calls immediately followed by

553
00:26:42,610 --> 00:26:44,950
the other one

554
00:26:44,950 --> 00:26:46,750
so you can all you can actually look in

555
00:26:46,750 --> 00:26:48,250
our code and you can look around and you

556
00:26:48,250 --> 00:26:49,570
can see exactly what's wrong with

557
00:26:49,570 --> 00:26:51,400
privileges exactly what's wrong without

558
00:26:51,400 --> 00:26:55,270
privileges and you can audit the code to

559
00:26:55,270 --> 00:26:57,460
see that we're actually doing what we

560
00:26:57,460 --> 00:27:00,100
say we're doing so another thing that we

561
00:27:00,100 --> 00:27:01,960
get asked a lot is why don't we use user

562
00:27:01,960 --> 00:27:03,870
name spaces always and by default

563
00:27:03,870 --> 00:27:08,260
because for instance docker doctor

564
00:27:08,260 --> 00:27:10,000
always is running but namespaces now I

565
00:27:10,000 --> 00:27:12,850
believe by default and inside a

566
00:27:12,850 --> 00:27:15,640
namespace what we have is we map the

567
00:27:15,640 --> 00:27:18,010
user ID on the host to a user ID inside

568
00:27:18,010 --> 00:27:20,140
of the container inside of the user

569
00:27:20,140 --> 00:27:22,270
namespace and so for instance if your

570
00:27:22,270 --> 00:27:24,460
user ID 1000 on the host you might have

571
00:27:24,460 --> 00:27:26,860
a mapping present that's 1000 to 0 and

572
00:27:26,860 --> 00:27:29,290
then you'll be user ID 0 inside the

573
00:27:29,290 --> 00:27:31,870
namespace and it looks and feels for the

574
00:27:31,870 --> 00:27:33,610
most part besides a few system calls

575
00:27:33,610 --> 00:27:35,380
like root you can do almost everything

576
00:27:35,380 --> 00:27:37,920
you want to do the issue with this

577
00:27:37,920 --> 00:27:40,540
specifically for us is that it has the

578
00:27:40,540 --> 00:27:42,040
potential to break portability between

579
00:27:42,040 --> 00:27:44,440
environments so if you actually go back

580
00:27:44,440 --> 00:27:46,690
and you inspect what you've done outside

581
00:27:46,690 --> 00:27:48,580
of the user namespace again and you look

582
00:27:48,580 --> 00:27:50,620
into the containers file system you'll

583
00:27:50,620 --> 00:27:53,530
notice that things that you created with

584
00:27:53,530 --> 00:27:55,750
user ID 0 inside the file system now

585
00:27:55,750 --> 00:27:59,110
have user ID 1000 on the host and so if

586
00:27:59,110 --> 00:28:00,550
you send that to another system where

587
00:28:00,550 --> 00:28:01,870
you don't have an account with ID a

588
00:28:01,870 --> 00:28:03,760
thousand but one thousand and ten we

589
00:28:03,760 --> 00:28:05,200
would have to do extra work to make sure

590
00:28:05,200 --> 00:28:07,510
that your new user ID is mapped to your

591
00:28:07,510 --> 00:28:11,200
old user ID which is mapped to root so

592
00:28:11,200 --> 00:28:13,420
we had that provides a portability issue

593
00:28:13,420 --> 00:28:15,750
for us

594
00:28:17,309 --> 00:28:20,320
as I've iterated earlier this is really

595
00:28:20,320 --> 00:28:22,899
the real danger for us when developing

596
00:28:22,899 --> 00:28:24,639
this code and this is what we try our

597
00:28:24,639 --> 00:28:26,979
best and actually I mean we right now we

598
00:28:26,979 --> 00:28:29,289
succeed we make sure that no user code

599
00:28:29,289 --> 00:28:32,200
gets executed as user root ever if it

600
00:28:32,200 --> 00:28:33,729
does you've got to consider your system

601
00:28:33,729 --> 00:28:35,499
compromised because you you can't trust

602
00:28:35,499 --> 00:28:37,149
that your users are one intelligent

603
00:28:37,149 --> 00:28:39,389
enough to know what they're doing or to

604
00:28:39,389 --> 00:28:46,239
non-malicious so again security at

605
00:28:46,239 --> 00:28:49,599
singularity this is one really big thing

606
00:28:49,599 --> 00:28:51,580
that we focus on we spend a lot of time

607
00:28:51,580 --> 00:28:53,049
looking through our code ensuring that

608
00:28:53,049 --> 00:28:55,599
that there are no edge cases that are

609
00:28:55,599 --> 00:28:57,999
going to cause security issues and the

610
00:28:57,999 --> 00:28:59,830
first principle that we have is never

611
00:28:59,830 --> 00:29:02,830
let users run code as real route ever

612
00:29:02,830 --> 00:29:07,539
just doesn't happen - we only use the

613
00:29:07,539 --> 00:29:09,099
effective you idea of zero when

614
00:29:09,099 --> 00:29:13,629
absolutely 100% necessary to do one

615
00:29:13,629 --> 00:29:15,789
thing in our code so what I mentioned

616
00:29:15,789 --> 00:29:18,159
earlier minding mounting a bind mount we

617
00:29:18,159 --> 00:29:20,529
have to escalate we only escalate do it

618
00:29:20,529 --> 00:29:24,129
and then drop it and three we drop

619
00:29:24,129 --> 00:29:25,629
permissions and capabilities when

620
00:29:25,629 --> 00:29:27,759
forking into a new thread so when you

621
00:29:27,759 --> 00:29:29,919
fork into a new thread the child process

622
00:29:29,919 --> 00:29:32,499
actually waits and it stands idle until

623
00:29:32,499 --> 00:29:34,840
the parent process is able to drop

624
00:29:34,840 --> 00:29:36,369
permissions confirms that the

625
00:29:36,369 --> 00:29:38,139
permissions have been dropped and then

626
00:29:38,139 --> 00:29:39,849
tells the child process through a pipe

627
00:29:39,849 --> 00:29:41,679
that it's good to continue and then you

628
00:29:41,679 --> 00:29:43,359
can continue on with the child processes

629
00:29:43,359 --> 00:29:45,220
code and that's kind of to ensure that

630
00:29:45,220 --> 00:29:47,019
when we fork into the actual container

631
00:29:47,019 --> 00:29:49,720
process the user can't force a race

632
00:29:49,720 --> 00:29:51,789
condition and try and beat us and take

633
00:29:51,789 --> 00:29:55,259
over the parent process with route

634
00:29:55,649 --> 00:29:57,729
another thing we have to look at is

635
00:29:57,729 --> 00:29:59,429
isolation

636
00:29:59,429 --> 00:30:02,919
kind of what do we I selected the most

637
00:30:02,919 --> 00:30:07,809
secure environment for a user one thing

638
00:30:07,809 --> 00:30:10,299
we do we bind mount the image file just

639
00:30:10,299 --> 00:30:12,309
into the hosts file system at a specific

640
00:30:12,309 --> 00:30:16,929
location you chroot to move into the

641
00:30:16,929 --> 00:30:20,440
mounted images location we mount vices

642
00:30:20,440 --> 00:30:25,210
we mount the host host file also resolve

643
00:30:25,210 --> 00:30:28,950
complement and a few other files and

644
00:30:28,950 --> 00:30:30,680
then we use names

645
00:30:30,680 --> 00:30:32,300
faces when possible I talked about user

646
00:30:32,300 --> 00:30:35,570
namespaces early your PID namespaces we

647
00:30:35,570 --> 00:30:37,700
can mount those and we do it on request

648
00:30:37,700 --> 00:30:39,650
but not by default the idea is to make

649
00:30:39,650 --> 00:30:41,450
it as close to the host environment as

650
00:30:41,450 --> 00:30:43,580
possible without doing any extra

651
00:30:43,580 --> 00:30:47,390
necessary work a big difference in

652
00:30:47,390 --> 00:30:49,040
between doctrine and singularity

653
00:30:49,040 --> 00:30:51,470
specifically is the network isolation so

654
00:30:51,470 --> 00:30:53,630
in dr. you might be familiar with Lib

655
00:30:53,630 --> 00:30:55,400
network where you have to actually go in

656
00:30:55,400 --> 00:30:59,240
and set up a network and and kind of

657
00:30:59,240 --> 00:31:02,720
tell docker how you want containers to

658
00:31:02,720 --> 00:31:04,610
interact with the network on singularity

659
00:31:04,610 --> 00:31:07,940
we don't have that so you simply are

660
00:31:07,940 --> 00:31:10,400
just on the host using the host network

661
00:31:10,400 --> 00:31:12,110
so whatever network stack you have on

662
00:31:12,110 --> 00:31:14,390
your host your users can still make use

663
00:31:14,390 --> 00:31:16,310
of that for instance IP over InfiniBand

664
00:31:16,310 --> 00:31:19,880
you know Ethernet whatever all works and

665
00:31:19,880 --> 00:31:21,530
you can also use your your hosts

666
00:31:21,530 --> 00:31:23,990
physical devices inside the container we

667
00:31:23,990 --> 00:31:25,820
make it a point to isolate as little as

668
00:31:25,820 --> 00:31:27,470
necessary while still maintaining

669
00:31:27,470 --> 00:31:29,960
security and that allows you to do

670
00:31:29,960 --> 00:31:33,190
things like using your GPU

671
00:31:40,110 --> 00:31:43,419
so just a little more to touch on some

672
00:31:43,419 --> 00:31:46,090
more specific things that we do to

673
00:31:46,090 --> 00:31:48,100
ensure that we're not letting users

674
00:31:48,100 --> 00:31:50,860
escalate permissions one thing we do is

675
00:31:50,860 --> 00:31:52,840
only the so there's two binaries

676
00:31:52,840 --> 00:31:54,880
installed by singularity there's a set

677
00:31:54,880 --> 00:31:57,190
UID binary in an on-set UID binary and

678
00:31:57,190 --> 00:32:00,010
when you call the non set UID binary it

679
00:32:00,010 --> 00:32:02,169
in turn calls to set UID a binary and

680
00:32:02,169 --> 00:32:05,049
only that non set UID binary is allowed

681
00:32:05,049 --> 00:32:07,270
to call the set UID binary no user can

682
00:32:07,270 --> 00:32:09,279
call it on their own and that kind of

683
00:32:09,279 --> 00:32:12,220
ensures that you never have any extra

684
00:32:12,220 --> 00:32:15,340
arguments that would potentially corrupt

685
00:32:15,340 --> 00:32:18,610
our runtime and it forces the set UID

686
00:32:18,610 --> 00:32:21,539
binary to be sure that it has the proper

687
00:32:21,539 --> 00:32:24,760
arguments to actually execute and as we

688
00:32:24,760 --> 00:32:26,049
talked about earlier we have the

689
00:32:26,049 --> 00:32:28,450
singularity printed escalate and drop to

690
00:32:28,450 --> 00:32:30,970
escalate and drop privileges and also

691
00:32:30,970 --> 00:32:33,580
when we're mounting files we do it with

692
00:32:33,580 --> 00:32:37,630
the MS no s UID bit and essentially that

693
00:32:37,630 --> 00:32:40,179
ensures us that there are no set UID

694
00:32:40,179 --> 00:32:42,399
files put into the container so if you

695
00:32:42,399 --> 00:32:44,710
have a container that should have a set

696
00:32:44,710 --> 00:32:47,799
UID final a file you mount that

697
00:32:47,799 --> 00:32:49,929
container that will no longer look like

698
00:32:49,929 --> 00:32:54,730
a set UID binary and we also when we

699
00:32:54,730 --> 00:32:56,740
open files we have close on exact flag

700
00:32:56,740 --> 00:33:00,399
set so that the child process is unable

701
00:33:00,399 --> 00:33:03,680
to compromise the parent process

702
00:33:03,680 --> 00:33:06,819
[Applause]

703
00:33:07,150 --> 00:33:12,110
so yeah so that's about all I have in

704
00:33:12,110 --> 00:33:14,090
terms of your really specific stuff this

705
00:33:14,090 --> 00:33:17,000
is kind of a table that we have that

706
00:33:17,000 --> 00:33:18,950
displays all of our commands how we can

707
00:33:18,950 --> 00:33:23,450
use things and what they do so yeah we

708
00:33:23,450 --> 00:34:16,940
have some point is specifically to use

709
00:34:16,940 --> 00:34:19,550
in order mechanism okay so the question

710
00:34:19,550 --> 00:34:22,460
is why I'm using set UID in singularity

711
00:34:22,460 --> 00:34:26,960
when when we can use sort of newer

712
00:34:26,960 --> 00:34:29,060
methods such as you know username faces

713
00:34:29,060 --> 00:34:34,909
or whatever okay so we actually we we do

714
00:34:34,909 --> 00:34:36,590
interact with capabilities so when we

715
00:34:36,590 --> 00:34:38,480
when we create we have the no new

716
00:34:38,480 --> 00:34:42,949
privileges capability set inside of the

717
00:34:42,949 --> 00:34:45,860
child processes and we do that when we

718
00:34:45,860 --> 00:34:48,379
can and so there are certain things that

719
00:34:48,379 --> 00:34:49,969
we allow so when you compile a

720
00:34:49,969 --> 00:34:52,149
singularity it assembles a list of

721
00:34:52,149 --> 00:34:55,010
abilities that the kernel has and so the

722
00:34:55,010 --> 00:34:57,530
MS no new prints is one of the things

723
00:34:57,530 --> 00:34:59,450
that we look at and if we have that then

724
00:34:59,450 --> 00:35:01,460
we say okay we're gonna set this

725
00:35:01,460 --> 00:35:03,770
specifically because it's available and

726
00:35:03,770 --> 00:35:06,620
so we do all that we can but it's sort

727
00:35:06,620 --> 00:35:08,960
of as available by the kernel and the

728
00:35:08,960 --> 00:35:12,830
idea is we want this to be useful on as

729
00:35:12,830 --> 00:35:16,130
old of a kernel as possible and so we do

730
00:35:16,130 --> 00:35:18,020
have a user using like 2.6 kernel I

731
00:35:18,020 --> 00:35:19,730
think and I'm not sure what features are

732
00:35:19,730 --> 00:35:22,150
available

733
00:35:55,680 --> 00:35:57,760
right so the second half of the question

734
00:35:57,760 --> 00:36:03,000
is not understanding why it's important

735
00:36:03,000 --> 00:36:05,560
essentially that why we care that we

736
00:36:05,560 --> 00:36:06,940
just want to limit users the ability to

737
00:36:06,940 --> 00:36:10,390
run as root and so the answer to that is

738
00:36:10,390 --> 00:36:12,160
I think your users if they're just

739
00:36:12,160 --> 00:36:15,820
running on your system normally and they

740
00:36:15,820 --> 00:36:17,460
can submit some arbitrary code there

741
00:36:17,460 --> 00:36:19,600
then they can probably do the same

742
00:36:19,600 --> 00:36:21,550
things as you want them to do as you're

743
00:36:21,550 --> 00:36:23,950
afraid of them doing so the idea is that

744
00:36:23,950 --> 00:36:26,050
you have you know all the same measures

745
00:36:26,050 --> 00:36:29,080
on your cluster they work inside the

746
00:36:29,080 --> 00:36:31,600
container the same it's just that it's

747
00:36:31,600 --> 00:36:35,530
inside of a container now exactly it's

748
00:36:35,530 --> 00:36:37,180
not it's not that it's not that you

749
00:36:37,180 --> 00:36:39,430
right it's not that you can take this

750
00:36:39,430 --> 00:36:42,130
and put this on an insecure system and

751
00:36:42,130 --> 00:36:43,770
all of a sudden users can't do anything

752
00:36:43,770 --> 00:36:46,720
it's just that whatever measures you

753
00:36:46,720 --> 00:36:49,600
have in place on your cluster we're not

754
00:36:49,600 --> 00:36:51,940
going to destroy your efforts to do that

755
00:36:51,940 --> 00:36:53,650
and we're gonna ensure that they can't

756
00:36:53,650 --> 00:36:55,500
have root while trying while doing that

757
00:36:55,500 --> 00:36:58,119
and so if there is you know a kernel

758
00:36:58,119 --> 00:37:00,070
vulnerability we can't program prevent

759
00:37:00,070 --> 00:37:03,060
that and we're not going to prevent that

760
00:37:12,109 --> 00:37:14,520
it's supposed to be safe when they can

761
00:37:14,520 --> 00:37:16,109
go home to recoding in containment

762
00:37:16,109 --> 00:37:18,030
that you don't isolate say the network

763
00:37:18,030 --> 00:37:25,770
for you don't even if you isolate that's

764
00:37:25,770 --> 00:37:30,960
HPC I mean my point is just that there's

765
00:37:30,960 --> 00:37:33,119
no inherent vulnerability by running the

766
00:37:33,119 --> 00:37:36,480
container right I mean users if you're

767
00:37:36,480 --> 00:37:38,310
using an HPC the users are running

768
00:37:38,310 --> 00:37:40,320
arbitrary code on your system by just by

769
00:37:40,320 --> 00:37:43,380
definition essentially and that's why

770
00:37:43,380 --> 00:37:45,119
we're having singularities for users to

771
00:37:45,119 --> 00:37:48,020
run that arbitrary code

772
00:38:37,140 --> 00:38:58,660
yeah so what was it can you repeat the

773
00:38:58,660 --> 00:39:00,690
question

774
00:39:05,499 --> 00:39:10,680
so the Great War the origin

775
00:39:10,970 --> 00:39:14,730
convention seekers for what the

776
00:39:14,730 --> 00:39:18,269
singularity and one single are they

777
00:39:18,269 --> 00:39:20,490
actually provides that you don't get for

778
00:39:20,490 --> 00:39:23,029
accurate

779
00:39:23,070 --> 00:39:26,400
right so the question is I seem to be

780
00:39:26,400 --> 00:39:28,770
talking negatively about other features

781
00:39:28,770 --> 00:39:29,820
that maybe other container

782
00:39:29,820 --> 00:39:32,310
implementations are using that are you

783
00:39:32,310 --> 00:39:34,920
know features of containers and why am I

784
00:39:34,920 --> 00:39:36,450
talking negatively of those and why

785
00:39:36,450 --> 00:39:37,950
don't we implement them and the answer

786
00:39:37,950 --> 00:39:47,910
is you know right okay so what does the

787
00:39:47,910 --> 00:39:49,680
singularity provide that's not just to

788
00:39:49,680 --> 00:39:51,360
change route and just mounting an image

789
00:39:51,360 --> 00:39:55,230
right so one we do use isolation

790
00:39:55,230 --> 00:39:57,270
features when it's possible so you know

791
00:39:57,270 --> 00:39:59,370
user namespaces when it's possible we do

792
00:39:59,370 --> 00:40:01,800
so but we only do so at the request of

793
00:40:01,800 --> 00:40:04,440
the user so the idea in in the HPC

794
00:40:04,440 --> 00:40:06,630
environment is we want to make our

795
00:40:06,630 --> 00:40:08,190
containers kind of as similar to the

796
00:40:08,190 --> 00:40:10,710
hosts as possible so that we don't have

797
00:40:10,710 --> 00:40:12,570
to mess with what users and what the

798
00:40:12,570 --> 00:40:14,310
administrators are already used to and

799
00:40:14,310 --> 00:40:17,700
so for instance network isolation we

800
00:40:17,700 --> 00:40:19,320
don't want to have to have somebody

801
00:40:19,320 --> 00:40:21,780
defining new policies to create a new

802
00:40:21,780 --> 00:40:24,120
system of network we just want it to

803
00:40:24,120 --> 00:40:25,770
appear like it's the host but allow

804
00:40:25,770 --> 00:40:27,420
users to bring their own environment and

805
00:40:27,420 --> 00:40:29,580
singularities specifically what we do is

806
00:40:29,580 --> 00:40:33,030
we research for you know certain things

807
00:40:33,030 --> 00:40:35,460
that we can do to provide security and

808
00:40:35,460 --> 00:40:37,560
isolation for your container that you

809
00:40:37,560 --> 00:40:39,180
maybe otherwise can't do without root

810
00:40:39,180 --> 00:40:42,510
and so you know essentially yes what

811
00:40:42,510 --> 00:40:44,010
we're doing is mounting an image change

812
00:40:44,010 --> 00:40:47,220
routing into it but in order to do

813
00:40:47,220 --> 00:40:48,690
certain aspects of that you are going to

814
00:40:48,690 --> 00:40:50,250
need route and so we do have a set UID

815
00:40:50,250 --> 00:40:52,200
binary to do that and it's done in a

816
00:40:52,200 --> 00:40:58,010
sort of defined controlled way go ahead

817
00:40:58,010 --> 00:41:00,010
ow

818
00:41:37,670 --> 00:41:39,750
correct so the question is can we not

819
00:41:39,750 --> 00:41:42,510
use the the essentially the set you

820
00:41:42,510 --> 00:41:44,760
Eddie part of slurm to do whatever is

821
00:41:44,760 --> 00:41:46,170
necessary to mount the container and the

822
00:41:46,170 --> 00:41:48,000
answer is we can and we do and that

823
00:41:48,000 --> 00:41:50,220
slurm integration actually so we have a

824
00:41:50,220 --> 00:41:52,440
slurm plugin that we wrote I was

825
00:41:52,440 --> 00:41:54,030
supposed to have a slide that showed you

826
00:41:54,030 --> 00:41:57,109
exactly how that worked

827
00:41:57,319 --> 00:42:00,450
but of course my internet died see if I

828
00:42:00,450 --> 00:42:03,049
can bring it over here

829
00:42:12,610 --> 00:42:14,000
anyway

830
00:42:14,000 --> 00:42:16,190
we do have a plugin that was created for

831
00:42:16,190 --> 00:42:19,070
us by a user and it does integrate

832
00:42:19,070 --> 00:42:22,250
exactly as you specified it uses sort of

833
00:42:22,250 --> 00:42:25,910
the the root part of s patch hooks into

834
00:42:25,910 --> 00:42:27,500
that you can define it like with the

835
00:42:27,500 --> 00:42:31,010
just the pound sign s patch - -

836
00:42:31,010 --> 00:42:33,080
singularity and then path to the

837
00:42:33,080 --> 00:42:35,260
container and then it does all of that

838
00:42:35,260 --> 00:42:37,790
just using the singularity library that

839
00:42:37,790 --> 00:42:39,620
comes with it not using the singularity

840
00:42:39,620 --> 00:42:44,500
executable go ahead

841
00:42:49,549 --> 00:43:04,979
hmm is that the question can you talk

842
00:43:04,979 --> 00:43:18,690
louder sorry I can hear at the same time

843
00:43:18,690 --> 00:43:21,359
the same thing it'll just so those those

844
00:43:21,359 --> 00:43:26,910
are read-only layers right and so they

845
00:43:26,910 --> 00:43:28,619
will all look at the same cache directly

846
00:43:28,619 --> 00:43:31,499
so if you say if you rub just on your

847
00:43:31,499 --> 00:43:32,759
terminal on your computer you run

848
00:43:32,759 --> 00:43:34,680
singularity run some docker container

849
00:43:34,680 --> 00:43:36,119
and you do that twice on two separate

850
00:43:36,119 --> 00:43:37,799
windows it'll just look at the same

851
00:43:37,799 --> 00:43:39,410
cache directory since they're read-only

852
00:43:39,410 --> 00:43:41,549
they'll both just read from it at the

853
00:43:41,549 --> 00:43:44,459
same time and it works just as you would

854
00:43:44,459 --> 00:43:46,259
expect like doing it simultaneously with

855
00:43:46,259 --> 00:43:50,959
docker glad

856
00:43:57,890 --> 00:44:01,200
so the question is we're not talking

857
00:44:01,200 --> 00:44:03,210
about portability does it mean something

858
00:44:03,210 --> 00:44:05,220
else rather than Linux and the answer is

859
00:44:05,220 --> 00:44:07,140
essentially no is it just for Linux I

860
00:44:07,140 --> 00:44:09,300
mean all the HPC environments that I've

861
00:44:09,300 --> 00:44:12,030
personally been involved with have been

862
00:44:12,030 --> 00:44:15,750
on the on Linux and the the goal is just

863
00:44:15,750 --> 00:44:17,760
to make it portability between different

864
00:44:17,760 --> 00:44:19,430
versions of Linux distributions

865
00:44:19,430 --> 00:44:21,780
different libraries different users

866
00:44:21,780 --> 00:44:25,530
different sites I think that was all the

867
00:44:25,530 --> 00:44:27,700
time we have

868
00:44:27,700 --> 00:44:35,460
[Applause]

