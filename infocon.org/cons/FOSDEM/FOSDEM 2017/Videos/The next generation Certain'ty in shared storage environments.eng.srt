1
00:00:12,820 --> 00:00:48,470
if you hold them until the end going

2
00:00:48,470 --> 00:00:52,729
into the project in the storage

3
00:00:52,729 --> 00:00:55,360
architecture it's been mentioned before

4
00:00:55,360 --> 00:00:57,799
just to give you a little bit of context

5
00:00:57,799 --> 00:00:59,449
into what we'll be talking about in the

6
00:00:59,449 --> 00:01:01,940
rest of the presentation then we get

7
00:01:01,940 --> 00:01:03,879
into the mayhem that's happening in

8
00:01:03,879 --> 00:01:06,590
everyday deployments of over it happens

9
00:01:06,590 --> 00:01:08,630
all the time and so we'll talk about the

10
00:01:08,630 --> 00:01:10,790
kinds of things that happen and then

11
00:01:10,790 --> 00:01:12,650
we're going to talk about what we can do

12
00:01:12,650 --> 00:01:14,630
to remedy that and to kind of restore

13
00:01:14,630 --> 00:01:16,580
order into the system from a storage

14
00:01:16,580 --> 00:01:18,830
perspective and then I'm going to try to

15
00:01:18,830 --> 00:01:20,270
bring it all together with some

16
00:01:20,270 --> 00:01:22,850
step-by-step examples to kind of go

17
00:01:22,850 --> 00:01:24,590
through the algorithms that we employ

18
00:01:24,590 --> 00:01:26,270
and how they're going to help solve the

19
00:01:26,270 --> 00:01:28,030
problem

20
00:01:28,030 --> 00:01:31,510
so this is just a really quick overview

21
00:01:31,510 --> 00:01:34,540
of it basically over it is enterprise

22
00:01:34,540 --> 00:01:37,290
virtualization management it is

23
00:01:37,290 --> 00:01:40,300
orchestrated by a management application

24
00:01:40,300 --> 00:01:43,180
that we call the overt engine and it is

25
00:01:43,180 --> 00:01:47,260
connecting out to hundreds of hosts on

26
00:01:47,260 --> 00:01:49,030
top of which we can run thousands of

27
00:01:49,030 --> 00:01:51,490
virtual machines engine is kind of the

28
00:01:51,490 --> 00:01:53,950
brain behind the entire operation which

29
00:01:53,950 --> 00:01:56,050
just dispatches commands out to the

30
00:01:56,050 --> 00:01:58,390
hosts to achieve the results that we're

31
00:01:58,390 --> 00:02:00,670
needing in our system and it provides

32
00:02:00,670 --> 00:02:03,729
the interfaces to end users the REST API

33
00:02:03,729 --> 00:02:09,340
in a web interface now connecting out to

34
00:02:09,340 --> 00:02:12,070
shared storage we support lots of

35
00:02:12,070 --> 00:02:14,770
different types there from NFS to Guster

36
00:02:14,770 --> 00:02:18,070
I scuzzy fibre channel seven others as

37
00:02:18,070 --> 00:02:21,520
well so that's a really brief

38
00:02:21,520 --> 00:02:23,410
introduction let's just go down one

39
00:02:23,410 --> 00:02:26,440
level into the chain here so basically

40
00:02:26,440 --> 00:02:29,020
each storage endpoint its main function

41
00:02:29,020 --> 00:02:33,280
is to store virtual machine discs and we

42
00:02:33,280 --> 00:02:37,030
call those images we're using the Q mu Q

43
00:02:37,030 --> 00:02:39,340
Cal - image format so in our case a

44
00:02:39,340 --> 00:02:41,790
virtual machine disk can actually be a

45
00:02:41,790 --> 00:02:45,070
sequence of underlying volumes organized

46
00:02:45,070 --> 00:02:50,260
into a chain so for the purposes of

47
00:02:50,260 --> 00:02:52,000
today's presentation we'll really be

48
00:02:52,000 --> 00:02:54,220
working at the volume level so it's

49
00:02:54,220 --> 00:02:56,410
important to understand what it thinks a

50
00:02:56,410 --> 00:02:59,410
volume is in this case the obvious

51
00:02:59,410 --> 00:03:01,540
component which is the data area and

52
00:03:01,540 --> 00:03:04,269
this is the block device or the file out

53
00:03:04,269 --> 00:03:05,980
on the storage that were actually

54
00:03:05,980 --> 00:03:08,710
initializing as the data area

55
00:03:08,710 --> 00:03:12,610
be a raw volume or a qko volume okay so

56
00:03:12,610 --> 00:03:14,770
that one's pretty easy the next one is

57
00:03:14,770 --> 00:03:16,660
the metadata area and this is stored

58
00:03:16,660 --> 00:03:19,480
somewhere next to roughly the volume out

59
00:03:19,480 --> 00:03:21,370
on the storage domain and that's a it's

60
00:03:21,370 --> 00:03:23,170
a very small area where we have key

61
00:03:23,170 --> 00:03:26,530
value pairs the stores properties of the

62
00:03:26,530 --> 00:03:28,420
volume such as does it have a parent

63
00:03:28,420 --> 00:03:31,150
does the system regard the contents of

64
00:03:31,150 --> 00:03:34,900
the data area is legal these type of

65
00:03:34,900 --> 00:03:36,700
things and then one thing that I'll talk

66
00:03:36,700 --> 00:03:39,730
about today which is the volume

67
00:03:39,730 --> 00:03:44,350
generation we have is the lease area

68
00:03:44,350 --> 00:03:47,290
I'll get into this one in more detail

69
00:03:47,290 --> 00:03:49,810
but it's a shared storage lease and a

70
00:03:49,810 --> 00:03:51,910
host is able to utilize this to gain

71
00:03:51,910 --> 00:04:01,240
exclusive access to the volume storage

72
00:04:01,240 --> 00:04:02,830
operations occurring which can be

73
00:04:02,830 --> 00:04:06,190
classified into two main groups the

74
00:04:06,190 --> 00:04:09,010
first one our metadata operations these

75
00:04:09,010 --> 00:04:10,930
really change the shape of the storage I

76
00:04:10,930 --> 00:04:12,400
like to think of so adding and removing

77
00:04:12,400 --> 00:04:15,340
volumes from the system if you were here

78
00:04:15,340 --> 00:04:16,839
last year in this room I gave a

79
00:04:16,839 --> 00:04:19,570
presentation on how we could manage in a

80
00:04:19,570 --> 00:04:21,070
resilient manner these type of

81
00:04:21,070 --> 00:04:23,260
operations by using garbage collection

82
00:04:23,260 --> 00:04:26,290
and storage transactions today I'm going

83
00:04:26,290 --> 00:04:28,240
to focus on the data path operations

84
00:04:28,240 --> 00:04:30,400
which are the other type these are kind

85
00:04:30,400 --> 00:04:32,740
of the main operations that are

86
00:04:32,740 --> 00:04:35,050
occurring in a steady state over

87
00:04:35,050 --> 00:04:37,210
environment the main one being the

88
00:04:37,210 --> 00:04:38,800
obvious one being a virtual machine

89
00:04:38,800 --> 00:04:40,990
accessing its disk while it runs on a

90
00:04:40,990 --> 00:04:44,040
host but other examples are the

91
00:04:44,040 --> 00:04:47,890
hypervisor copying one volume from a

92
00:04:47,890 --> 00:04:49,690
source volume to a destination volume

93
00:04:49,690 --> 00:04:54,640
for example so these ones requiring a

94
00:04:54,640 --> 00:04:55,750
little bit of different kind of

95
00:04:55,750 --> 00:04:57,580
protection since garbage collection

96
00:04:57,580 --> 00:04:58,090
really

97
00:04:58,090 --> 00:05:01,330
can't handle the job so we can take all

98
00:05:01,330 --> 00:05:03,970
of our data path operations and

99
00:05:03,970 --> 00:05:05,680
encapsulate them into something called a

100
00:05:05,680 --> 00:05:08,260
storage job so let's say we're taking a

101
00:05:08,260 --> 00:05:10,570
high-level operation such as cloning a

102
00:05:10,570 --> 00:05:13,540
virtual machine disk from one storage

103
00:05:13,540 --> 00:05:14,770
type to another

104
00:05:14,770 --> 00:05:17,050
this may comprise multiple sub

105
00:05:17,050 --> 00:05:19,450
operations for example if we have a

106
00:05:19,450 --> 00:05:21,280
volume chain we have to copy each volume

107
00:05:21,280 --> 00:05:24,070
in the chain over to the destination so

108
00:05:24,070 --> 00:05:26,320
a storage job is going to be one copy

109
00:05:26,320 --> 00:05:28,540
from one volume to another so the kind

110
00:05:28,540 --> 00:05:31,450
of the most granular form of operation

111
00:05:31,450 --> 00:05:32,979
that we can can provide

112
00:05:32,979 --> 00:05:35,889
okay so engine is going to package these

113
00:05:35,889 --> 00:05:38,080
into a storage job and schedule it for

114
00:05:38,080 --> 00:05:41,620
execution on a host of its choosing at

115
00:05:41,620 --> 00:05:44,650
some point that host is going to begin

116
00:05:44,650 --> 00:05:48,150
to run the job when it has resources and

117
00:05:48,150 --> 00:05:52,630
it's going to basically run that job in

118
00:05:52,630 --> 00:05:55,360
an asynchronous fashion allowing engine

119
00:05:55,360 --> 00:05:58,210
to query the progress during the

120
00:05:58,210 --> 00:06:02,680
operation okay basically when the

121
00:06:02,680 --> 00:06:04,630
operation is completed

122
00:06:04,630 --> 00:06:09,460
it goes in a persistent manner so it's

123
00:06:09,460 --> 00:06:11,289
sort of maps to the process of actually

124
00:06:11,289 --> 00:06:14,680
copying the data so that's a little bit

125
00:06:14,680 --> 00:06:18,400
about the storage jobs so this all works

126
00:06:18,400 --> 00:06:19,300
really great

127
00:06:19,300 --> 00:06:22,180
designed for reason because of the chaos

128
00:06:22,180 --> 00:06:26,229
that happens in everyday words so we can

129
00:06:26,229 --> 00:06:29,050
have power outages network service

130
00:06:29,050 --> 00:06:31,419
interruptions hard work those of all

131
00:06:31,419 --> 00:06:33,129
different stripes which are affecting

132
00:06:33,129 --> 00:06:34,810
the operation of the system in

133
00:06:34,810 --> 00:06:38,259
unexpected ways and we can have software

134
00:06:38,259 --> 00:06:43,990
bugs even over the queue and of course

135
00:06:43,990 --> 00:06:50,289
our stuff too so you know we can have

136
00:06:50,289 --> 00:06:52,300
redundant power supplies redundant

137
00:06:52,300 --> 00:06:56,979
networks we can have maintained we can

138
00:06:56,979 --> 00:06:58,240
have better software development

139
00:06:58,240 --> 00:07:00,400
processes but how does we try we can't

140
00:07:00,400 --> 00:07:02,789
eliminate these so if you want to have

141
00:07:02,789 --> 00:07:04,960
reliable storage you're gonna have to

142
00:07:04,960 --> 00:07:07,000
design it from the ground up with some

143
00:07:07,000 --> 00:07:11,580
algorithms that are going to do that and

144
00:07:11,580 --> 00:07:17,139
so this graphic presentation of what I

145
00:07:17,139 --> 00:07:19,659
said the interesting thing is there are

146
00:07:19,659 --> 00:07:21,039
a lot of different ways that failures

147
00:07:21,039 --> 00:07:23,529
can happen with different effects so the

148
00:07:23,529 --> 00:07:25,479
host can lose its connection to storage

149
00:07:25,479 --> 00:07:27,819
engine can lose its connection to the

150
00:07:27,819 --> 00:07:29,830
host and then there could be internal

151
00:07:29,830 --> 00:07:31,870
problems with the host itself and the

152
00:07:31,870 --> 00:07:33,639
main thing is a lot of these are going

153
00:07:33,639 --> 00:07:35,469
to look exactly the same to the engine

154
00:07:35,469 --> 00:07:37,240
so we can't say if it was a power outage

155
00:07:37,240 --> 00:07:40,930
do this we have what happens we have no

156
00:07:40,930 --> 00:07:45,819
idea so how do we restore order when we

157
00:07:45,819 --> 00:07:47,800
don't even know what went wrong but

158
00:07:47,800 --> 00:07:49,509
basically where we can disturb us down

159
00:07:49,509 --> 00:07:52,719
to is figure out all of the outstanding

160
00:07:52,719 --> 00:07:54,520
jobs that were running across the

161
00:07:54,520 --> 00:07:58,659
affected hosts in the system and we need

162
00:07:58,659 --> 00:08:00,970
to figure out what's happened to them

163
00:08:00,970 --> 00:08:03,040
and you have to use storage to do this

164
00:08:03,040 --> 00:08:05,770
storage is really the point of record it

165
00:08:05,770 --> 00:08:08,530
is as I like to just say if it's not on

166
00:08:08,530 --> 00:08:10,630
storage it never happened regardless of

167
00:08:10,630 --> 00:08:13,090
what you tell me so this is our end

168
00:08:13,090 --> 00:08:14,890
point we'll use the storage to tell us

169
00:08:14,890 --> 00:08:17,740
what happened so the first thing we need

170
00:08:17,740 --> 00:08:19,120
to do is determine if there are any

171
00:08:19,120 --> 00:08:21,070
running jobs and decide if we want to

172
00:08:21,070 --> 00:08:23,530
wait for those or kill them and then

173
00:08:23,530 --> 00:08:25,810
with any jobs that are ending we need to

174
00:08:25,810 --> 00:08:27,880
decide if they succeeded or failed so

175
00:08:27,880 --> 00:08:30,970
that we can report back to engen and we

176
00:08:30,970 --> 00:08:32,710
can correlate all of the outstanding

177
00:08:32,710 --> 00:08:35,770
jobs into resolving the end user command

178
00:08:35,770 --> 00:08:37,179
whether whatever it was that they

179
00:08:37,179 --> 00:08:41,289
requested in order to do these things

180
00:08:41,289 --> 00:08:43,599
and again having a storage based

181
00:08:43,599 --> 00:08:46,150
approach we have a couple of tools the

182
00:08:46,150 --> 00:08:49,660
first one is volume leases and I touched

183
00:08:49,660 --> 00:08:51,640
on these these are implemented with a

184
00:08:51,640 --> 00:08:53,620
technology called sand lock which we

185
00:08:53,620 --> 00:08:56,260
discussed last year as well sand lock

186
00:08:56,260 --> 00:08:58,750
runs a daemon on every single house

187
00:08:58,750 --> 00:09:01,000
that's connected to overt storage and it

188
00:09:01,000 --> 00:09:05,140
allows the host to join a lock space on

189
00:09:05,140 --> 00:09:07,480
each storage domain so the storage just

190
00:09:07,480 --> 00:09:10,210
a lock is maintained out on storage once

191
00:09:10,210 --> 00:09:11,770
you're a member of that lock space is a

192
00:09:11,770 --> 00:09:13,930
host you can request volume releases

193
00:09:13,930 --> 00:09:16,060
which allows you to gain exclusive

194
00:09:16,060 --> 00:09:22,990
access to the volumes the basically says

195
00:09:22,990 --> 00:09:24,910
you have to abide by the Paxos lease

196
00:09:24,910 --> 00:09:27,220
algorithm which means that you are

197
00:09:27,220 --> 00:09:28,470
occasion

198
00:09:28,470 --> 00:09:31,230
and renewing your lease on storage and

199
00:09:31,230 --> 00:09:33,950
also you know making sure that you're

200
00:09:33,950 --> 00:09:36,960
passing the liveliness checks and if as

201
00:09:36,960 --> 00:09:38,460
a host you're failing to operate

202
00:09:38,460 --> 00:09:41,190
correctly then sandlot can fence you and

203
00:09:41,190 --> 00:09:43,440
this is really a two-phase thing so the

204
00:09:43,440 --> 00:09:44,970
first thing sound lock will try to do is

205
00:09:44,970 --> 00:09:47,820
kill any outstanding processes that are

206
00:09:47,820 --> 00:09:50,280
associated with volume leases if that

207
00:09:50,280 --> 00:09:52,560
fails it can use the kernel watchdog

208
00:09:52,560 --> 00:09:54,330
device to force a hard reset of the

209
00:09:54,330 --> 00:09:58,650
system so with this in place we now have

210
00:09:58,650 --> 00:10:00,630
a guarantee of exclusive access to

211
00:10:00,630 --> 00:10:02,670
volumes but also importantly we have a

212
00:10:02,670 --> 00:10:06,420
guarantee that those leases won't become

213
00:10:06,420 --> 00:10:08,640
stale or stuck in the case of failing

214
00:10:08,640 --> 00:10:10,590
hosts they'll always be released so that

215
00:10:10,590 --> 00:10:12,690
we can use another host to satisfy the

216
00:10:12,690 --> 00:10:15,810
request the second tool that we're going

217
00:10:15,810 --> 00:10:17,910
to use and talk about today is volume

218
00:10:17,910 --> 00:10:21,930
generations volume generations are

219
00:10:21,930 --> 00:10:24,540
simply monotonically increasing value

220
00:10:24,540 --> 00:10:28,740
within the volume metadata that can only

221
00:10:28,740 --> 00:10:32,490
be changed during holding the volume and

222
00:10:32,490 --> 00:10:34,320
which allow us to sequence the jobs

223
00:10:34,320 --> 00:10:36,840
together so that we can guarantee that

224
00:10:36,840 --> 00:10:38,820
only one storage job per volume

225
00:10:38,820 --> 00:10:44,880
generation is able to run all these

226
00:10:44,880 --> 00:10:46,950
things and put them together in a rough

227
00:10:46,950 --> 00:10:49,530
storage job structure so no matter what

228
00:10:49,530 --> 00:10:50,610
the job is

229
00:10:50,610 --> 00:10:54,110
we always acquire the volume beliefs we

230
00:10:54,110 --> 00:10:57,210
compare a requested generation which is

231
00:10:57,210 --> 00:10:59,160
supplied by the engine when scheduling

232
00:10:59,160 --> 00:11:01,650
the job with the actual generation that

233
00:11:01,650 --> 00:11:04,530
as it appears on storage if they match

234
00:11:04,530 --> 00:11:06,830
we do whatever work the job prescribes

235
00:11:06,830 --> 00:11:08,360
when we're done

236
00:11:08,360 --> 00:11:09,980
we increment the volume generation to

237
00:11:09,980 --> 00:11:12,350
the next integer and then we release the

238
00:11:12,350 --> 00:11:15,140
volume lease so let's take a look at how

239
00:11:15,140 --> 00:11:19,010
this works in a normal flow first thing

240
00:11:19,010 --> 00:11:20,990
engine chooses a host and schedules a

241
00:11:20,990 --> 00:11:24,290
job job whatever it may be onto it and

242
00:11:24,290 --> 00:11:26,600
it gets a response from from the host

243
00:11:26,600 --> 00:11:28,910
saying that the scheduling was

244
00:11:28,910 --> 00:11:30,440
successful so now we can begin

245
00:11:30,440 --> 00:11:33,769
monitoring the job at some point the

246
00:11:33,769 --> 00:11:35,570
host is going to run the job and the

247
00:11:35,570 --> 00:11:37,130
first thing is to require the volume

248
00:11:37,130 --> 00:11:40,700
lease next we validate the generation

249
00:11:40,700 --> 00:11:45,430
against the storage and find it to match

250
00:11:47,950 --> 00:11:52,910
the job and get periodic updates back to

251
00:11:52,910 --> 00:11:56,240
the engine when we're done we increment

252
00:11:56,240 --> 00:11:58,430
the generation and release the volume

253
00:11:58,430 --> 00:12:08,899
lease resolve the situation

254
00:12:08,899 --> 00:12:11,570
so that's all fine and good but let's

255
00:12:11,570 --> 00:12:16,040
see what happens when a problem begin

256
00:12:16,040 --> 00:12:18,140
again with a job that's scheduled on the

257
00:12:18,140 --> 00:12:21,920
host and we are using just noting here

258
00:12:21,920 --> 00:12:24,529
we're using generation 1 for the volume

259
00:12:24,529 --> 00:12:28,730
this is the expected generation then

260
00:12:28,730 --> 00:12:31,339
during monitoring something bad happens

261
00:12:31,339 --> 00:12:33,560
we're no longer able to talk to the host

262
00:12:33,560 --> 00:12:38,750
at this point we have no idea talking to

263
00:12:38,750 --> 00:12:40,370
the storage still and continuing to

264
00:12:40,370 --> 00:12:43,220
write to the volume no idea whatsoever

265
00:12:43,220 --> 00:12:45,170
what's going on so we have to figure out

266
00:12:45,170 --> 00:12:47,930
what's going on we're going to use

267
00:12:47,930 --> 00:12:49,399
something I'm calling volume

268
00:12:49,399 --> 00:12:51,620
reconnaissance and this is actually just

269
00:12:51,620 --> 00:12:54,290
a storage job like any other storage job

270
00:12:54,290 --> 00:12:57,470
except it's point is to resolve what's

271
00:12:57,470 --> 00:13:00,110
happening with the affected volume so

272
00:13:00,110 --> 00:13:02,930
basically we schedule it onto the onto a

273
00:13:02,930 --> 00:13:06,380
house that we're able to talk to and

274
00:13:06,380 --> 00:13:08,870
it's going to check if the job is

275
00:13:08,870 --> 00:13:11,240
running by way of trying to acquire the

276
00:13:11,240 --> 00:13:13,280
volume lease so that's going to give us

277
00:13:13,280 --> 00:13:15,620
that piece of information and if it is

278
00:13:15,620 --> 00:13:17,240
able to acquire the lease then it's

279
00:13:17,240 --> 00:13:19,400
going to be able to determine success or

280
00:13:19,400 --> 00:13:21,260
failure based on the value of volume

281
00:13:21,260 --> 00:13:25,460
generation so let's take a look at how

282
00:13:25,460 --> 00:13:28,340
this works in practice so here we go

283
00:13:28,340 --> 00:13:30,530
we're gonna select host B which is still

284
00:13:30,530 --> 00:13:32,930
responding to us and we are going to

285
00:13:32,930 --> 00:13:34,790
schedule a reconnaissance job with the

286
00:13:34,790 --> 00:13:37,550
last known generation of the volume

287
00:13:37,550 --> 00:13:41,420
which is still 1 at this point and now

288
00:13:41,420 --> 00:13:43,310
it's time to check on that lease and so

289
00:13:43,310 --> 00:13:45,850
there's two potential situations we can

290
00:13:45,850 --> 00:13:48,830
find ourselves in in the first case we

291
00:13:48,830 --> 00:13:50,690
fail to acquire the volume lease so it's

292
00:13:50,690 --> 00:13:53,120
worth noting here that volume leases are

293
00:13:53,120 --> 00:13:55,820
a Trilok semantics so you're going to

294
00:13:55,820 --> 00:13:58,400
try the lease if you if you can't get it

295
00:13:58,400 --> 00:14:00,950
you get an error immediately so if you

296
00:14:00,950 --> 00:14:02,930
fail to acquire the lease we know that

297
00:14:02,930 --> 00:14:05,570
the job is running or has been running

298
00:14:05,570 --> 00:14:09,320
recently on the host and we can choose

299
00:14:09,320 --> 00:14:11,180
whether we want to wait for a while or

300
00:14:11,180 --> 00:14:13,040
if we want to use a feature from sanh

301
00:14:13,040 --> 00:14:16,580
lock which says I'm repealing the host

302
00:14:16,580 --> 00:14:18,770
rock and I'm going to request it for

303
00:14:18,770 --> 00:14:21,290
myself and that's a way of forcing the

304
00:14:21,290 --> 00:14:23,750
job to end and fencing it so that's a

305
00:14:23,750 --> 00:14:26,810
decision we can make in the alternate

306
00:14:26,810 --> 00:14:29,030
scenario we acquire the lease

307
00:14:29,030 --> 00:14:31,220
successfully and now we know there's

308
00:14:31,220 --> 00:14:32,460
nothing running

309
00:14:32,460 --> 00:14:33,930
and we move on to the next step to

310
00:14:33,930 --> 00:14:37,020
resolve the situation and here again we

311
00:14:37,020 --> 00:14:39,149
have two possible paths we can take in

312
00:14:39,149 --> 00:14:42,540
the first case the volume generation

313
00:14:42,540 --> 00:14:44,430
matches and that is actually going to

314
00:14:44,430 --> 00:14:46,620
tell us that one of two situations has

315
00:14:46,620 --> 00:14:48,450
happened either the job was still

316
00:14:48,450 --> 00:14:51,540
scheduled and never ran or the job

317
00:14:51,540 --> 00:14:53,520
failed because the last thing a

318
00:14:53,520 --> 00:14:55,649
successful job does is increment the

319
00:14:55,649 --> 00:14:59,250
volume generation so the other other

320
00:14:59,250 --> 00:15:02,550
chance the other option is the volume

321
00:15:02,550 --> 00:15:05,370
generation comparison fails and in this

322
00:15:05,370 --> 00:15:07,110
case it's counterintuitive but that

323
00:15:07,110 --> 00:15:08,760
actually teaches us that the previous

324
00:15:08,760 --> 00:15:13,950
job was successful okay now it's

325
00:15:13,950 --> 00:15:15,240
important to note that in the previous

326
00:15:15,240 --> 00:15:17,820
slide when we acquired the volume race

327
00:15:17,820 --> 00:15:19,860
in both of those cases we incremented

328
00:15:19,860 --> 00:15:23,279
the generation to two okay and that's

329
00:15:23,279 --> 00:15:24,690
important to note because it has a

330
00:15:24,690 --> 00:15:28,020
really good function if for example host

331
00:15:28,020 --> 00:15:30,149
a comes back to life and reconnects to

332
00:15:30,149 --> 00:15:32,940
storage tries to execute that job we

333
00:15:32,940 --> 00:15:35,610
don't want to stomping on what we may

334
00:15:35,610 --> 00:15:37,740
have done since the you know since we

335
00:15:37,740 --> 00:15:40,230
did our reconnaissance so this is a way

336
00:15:40,230 --> 00:15:42,270
of pre-empting those old jobs we don't

337
00:15:42,270 --> 00:15:44,130
care about that we've resolved so this

338
00:15:44,130 --> 00:15:45,990
one is going to acquire the volume lease

339
00:15:45,990 --> 00:15:48,029
it's going to compare the generation

340
00:15:48,029 --> 00:15:49,650
find it doesn't match it's not going to

341
00:15:49,650 --> 00:15:52,760
be able to proceed any further

342
00:15:53,450 --> 00:15:55,400
so a couple of things we want to do in

343
00:15:55,400 --> 00:15:58,250
the future so really talk about copying

344
00:15:58,250 --> 00:16:01,360
volumes from a source to a destination I

345
00:16:01,360 --> 00:16:03,770
always talked about the destination

346
00:16:03,770 --> 00:16:05,390
lease which is the most important

347
00:16:05,390 --> 00:16:09,230
arguably because it it's right access

348
00:16:09,230 --> 00:16:12,770
the source volume we want to acquire a

349
00:16:12,770 --> 00:16:14,780
shared lease for that as well now today

350
00:16:14,780 --> 00:16:16,910
engine protects against performing a

351
00:16:16,910 --> 00:16:18,560
volume operation on a volume that's

352
00:16:18,560 --> 00:16:21,110
shared through orchestration level

353
00:16:21,110 --> 00:16:23,840
locking but we'd like to be further

354
00:16:23,840 --> 00:16:26,450
safer to have it down in the storage

355
00:16:26,450 --> 00:16:32,300
subsystem itself the next one is job

356
00:16:32,300 --> 00:16:35,540
execution so obviously the design is set

357
00:16:35,540 --> 00:16:37,610
up so that we can if we have four

358
00:16:37,610 --> 00:16:39,530
volumes to copy at once we can do them

359
00:16:39,530 --> 00:16:41,600
all on different hosts at the same time

360
00:16:41,600 --> 00:16:43,580
there's a bit of scheduling logic that

361
00:16:43,580 --> 00:16:46,070
goes into dispatching all the operations

362
00:16:46,070 --> 00:16:47,960
monitoring all the status and then

363
00:16:47,960 --> 00:16:50,660
combining it into the final result so

364
00:16:50,660 --> 00:16:53,330
we're working on that and then finally

365
00:16:53,330 --> 00:16:55,370
we have something called VM leases which

366
00:16:55,370 --> 00:16:57,170
is a way of actually using a storage

367
00:16:57,170 --> 00:16:59,660
leased to represent a VM so at the

368
00:16:59,660 --> 00:17:01,700
storage level preventing two VMs from

369
00:17:01,700 --> 00:17:03,530
running on multiple hosts which would

370
00:17:03,530 --> 00:17:06,109
obviously be a bad idea so that's great

371
00:17:06,109 --> 00:17:09,200
in storage we we prevent storage

372
00:17:09,200 --> 00:17:11,089
operations from conflicting with running

373
00:17:11,089 --> 00:17:13,339
VMs again by orchestration level locking

374
00:17:13,339 --> 00:17:15,560
but we want to in the end in the storage

375
00:17:15,560 --> 00:17:18,170
level prevent that as well for extra

376
00:17:18,170 --> 00:17:22,369
safety so I hope you found this

377
00:17:22,369 --> 00:17:25,640
walkthrough interesting here's some

378
00:17:25,640 --> 00:17:27,319
links to the over at project we're

379
00:17:27,319 --> 00:17:29,600
always welcoming more multi users and

380
00:17:29,600 --> 00:17:33,110
more developers so I'd love to have to

381
00:17:33,110 --> 00:17:34,320
see everyone over

382
00:17:34,320 --> 00:17:36,690
and at this time if there's any

383
00:17:36,690 --> 00:17:42,149
questions about anything I'm not seeing

384
00:17:42,149 --> 00:17:49,340
you just yell out or something Thanks

385
00:17:49,820 --> 00:17:52,460
because it's supported in hosted engine

386
00:17:52,460 --> 00:17:54,809
yeah it should be working everywhere it

387
00:17:54,809 --> 00:17:56,820
should be agnostic of that in terms of a

388
00:17:56,820 --> 00:17:58,610
VM lease integration will have to be

389
00:17:58,610 --> 00:18:01,110
extra careful about that of course but

390
00:18:01,110 --> 00:18:03,570
for typical storage operations it will

391
00:18:03,570 --> 00:18:06,080
work seamlessly

392
00:18:09,060 --> 00:18:13,589
[Applause]

