1
00:00:05,220 --> 00:00:09,670
solo everyone next up we have ed Felten

2
00:00:09,670 --> 00:00:12,809
and he will be talking about cloud a B I

3
00:00:12,809 --> 00:00:21,339
enjoyed the talk so hi there

4
00:00:21,339 --> 00:00:24,910
good afternoon so my name is eskelta I'm

5
00:00:24,910 --> 00:00:26,560
an open source and flues yes from the

6
00:00:26,560 --> 00:00:28,269
Netherlands and today I'm going to talk

7
00:00:28,269 --> 00:00:30,579
about how I've been sort of spending my

8
00:00:30,579 --> 00:00:32,740
time for the last two two and a half

9
00:00:32,740 --> 00:00:35,140
years so first I'll give a sort of a

10
00:00:35,140 --> 00:00:37,059
short bio of Who I am

11
00:00:37,059 --> 00:00:39,309
I started using open source software

12
00:00:39,309 --> 00:00:43,210
back in 2003 that was a year I started

13
00:00:43,210 --> 00:00:44,680
studying and I ain't over and there was

14
00:00:44,680 --> 00:00:47,820
a UNIX users group at my university and

15
00:00:47,820 --> 00:00:49,840
at the UNIX user group was the only

16
00:00:49,840 --> 00:00:51,879
place where they had free Wi-Fi back

17
00:00:51,879 --> 00:00:53,649
then so that was sort of a reason for me

18
00:00:53,649 --> 00:00:55,030
to became a member of the UNIX users

19
00:00:55,030 --> 00:00:57,670
group but soon I discovered that the

20
00:00:57,670 --> 00:00:59,170
free Wi-Fi was and everything and I

21
00:00:59,170 --> 00:01:00,640
actually became interested in all of the

22
00:01:00,640 --> 00:01:01,989
hardware that they had them display over

23
00:01:01,989 --> 00:01:04,569
there so that sort of got me dragging to

24
00:01:04,569 --> 00:01:07,690
acting on open source software so what's

25
00:01:07,690 --> 00:01:09,820
actually pretty awesome is back in 2004

26
00:01:09,820 --> 00:01:11,230
so that was the first year of my studies

27
00:01:11,230 --> 00:01:14,530
I actually attended foster and I counted

28
00:01:14,530 --> 00:01:17,440
around a bit and I realized that this is

29
00:01:17,440 --> 00:01:19,000
the 12th time I'm actually attending

30
00:01:19,000 --> 00:01:22,000
Foss them so still the conference is all

31
00:01:22,000 --> 00:01:23,890
the same they still have the same steak

32
00:01:23,890 --> 00:01:26,560
breads as they had 12 years ago so yeah

33
00:01:26,560 --> 00:01:29,350
it's pretty nice conference so after

34
00:01:29,350 --> 00:01:30,910
hacking on open-source software for a

35
00:01:30,910 --> 00:01:34,390
couple of years I you started using

36
00:01:34,390 --> 00:01:36,940
FreeBSD as my primary operating system

37
00:01:36,940 --> 00:01:39,550
on my systems and I became really

38
00:01:39,550 --> 00:01:41,440
interested in how it worked under the

39
00:01:41,440 --> 00:01:43,960
hood you know theming all of the source

40
00:01:43,960 --> 00:01:46,680
code that was stored under user source

41
00:01:46,680 --> 00:01:49,810
together with a guy from my studies we

42
00:01:49,810 --> 00:01:51,940
actually even ported freebsd over to the

43
00:01:51,940 --> 00:01:54,370
Xbox one at one point in time which was

44
00:01:54,370 --> 00:01:58,090
a pretty fun project so in 2008 after

45
00:01:58,090 --> 00:02:00,430
sending in enough patches filling up the

46
00:02:00,430 --> 00:02:01,990
the bug tracker at the freebie is the

47
00:02:01,990 --> 00:02:05,650
often enough I was awarded with a SVM

48
00:02:05,650 --> 00:02:10,479
account back then or CVS even still one

49
00:02:10,479 --> 00:02:12,310
of the first PSD conferences I attendant

50
00:02:12,310 --> 00:02:17,079
was BSD can 2008 in camp in Canada and

51
00:02:17,079 --> 00:02:18,260
one of the speaker's back

52
00:02:18,260 --> 00:02:20,000
that the conference was Chris Latner and

53
00:02:20,000 --> 00:02:22,840
maybe you've heard that name in the news

54
00:02:22,840 --> 00:02:25,459
last week or two weeks ago he's actually

55
00:02:25,459 --> 00:02:27,709
one of the founders of the LVM project

56
00:02:27,709 --> 00:02:30,890
and nowadays he's some kind of compiler

57
00:02:30,890 --> 00:02:35,569
tech lead at Tesla I think and he gave a

58
00:02:35,569 --> 00:02:38,599
really good talk about LVM clang the C

59
00:02:38,599 --> 00:02:40,940
C++ compiler so it had really got me

60
00:02:40,940 --> 00:02:42,680
motivated on you know taking a look at

61
00:02:42,680 --> 00:02:44,959
that compiler as well so one of the

62
00:02:44,959 --> 00:02:46,579
larger things I've been working on back

63
00:02:46,579 --> 00:02:48,709
then was sort of integrating LVM clang

64
00:02:48,709 --> 00:02:50,390
into the freebies the operating system

65
00:02:50,390 --> 00:02:52,760
which is sort of the de facto standard

66
00:02:52,760 --> 00:02:56,650
compiler today at least in FreeBSD so

67
00:02:56,650 --> 00:02:59,329
enough about FreeBSD and LVM I'm not

68
00:02:59,329 --> 00:03:01,010
really going to talk a lot about those

69
00:03:01,010 --> 00:03:02,870
projects today I'm actually going to

70
00:03:02,870 --> 00:03:05,180
talk about what I what I've been up to

71
00:03:05,180 --> 00:03:08,209
since 2014 and this talk is sort of a

72
00:03:08,209 --> 00:03:10,510
bit like chronologically structured so

73
00:03:10,510 --> 00:03:12,739
the first thing we're going to look at

74
00:03:12,739 --> 00:03:17,030
is what if I be doing in 2014 so back in

75
00:03:17,030 --> 00:03:20,150
2014 I was working as an expat in

76
00:03:20,150 --> 00:03:23,120
Germany I had some time to kill in the

77
00:03:23,120 --> 00:03:26,180
evenings so what I started doing was I

78
00:03:26,180 --> 00:03:28,669
was sort of created to get repo in my

79
00:03:28,669 --> 00:03:30,410
home directory and started hacking on

80
00:03:30,410 --> 00:03:33,680
some C++ code I started working on a

81
00:03:33,680 --> 00:03:37,190
database server written in C++ and this

82
00:03:37,190 --> 00:03:40,010
database server was sort of making use

83
00:03:40,010 --> 00:03:41,329
of a whole bunch of things I've never

84
00:03:41,329 --> 00:03:43,879
used before so I was experimenting with

85
00:03:43,879 --> 00:03:45,739
with data structures like miracle trees

86
00:03:45,739 --> 00:03:47,870
for making sure that all of the data was

87
00:03:47,870 --> 00:03:51,290
consistent stored inside of it what was

88
00:03:51,290 --> 00:03:52,970
really interesting about this data

89
00:03:52,970 --> 00:03:54,949
database server that I was designing was

90
00:03:54,949 --> 00:03:56,750
said I wasn't using like sequel queries

91
00:03:56,750 --> 00:03:58,790
or something to you know get access to

92
00:03:58,790 --> 00:04:01,579
the data but I was actually loading a

93
00:04:01,579 --> 00:04:03,829
full BART VM in there so dart is the

94
00:04:03,829 --> 00:04:06,169
scripting language that that is being

95
00:04:06,169 --> 00:04:07,940
designed by Google sort of a JavaScript

96
00:04:07,940 --> 00:04:09,829
replacement and I thought that would be

97
00:04:09,829 --> 00:04:11,780
pretty awesome to actually design stored

98
00:04:11,780 --> 00:04:13,129
procedures in like a high-level

99
00:04:13,129 --> 00:04:16,279
programming language like dart for

100
00:04:16,279 --> 00:04:18,048
replicating transactions across the

101
00:04:18,048 --> 00:04:19,699
network I was using something similar to

102
00:04:19,699 --> 00:04:22,190
Beck sauce called raft but the problem

103
00:04:22,190 --> 00:04:23,900
with this project is I was only working

104
00:04:23,900 --> 00:04:26,450
on this a couple of evenings evenings a

105
00:04:26,450 --> 00:04:29,150
night the other evenings of the week I

106
00:04:29,150 --> 00:04:31,370
usually went over to pubs together

107
00:04:31,370 --> 00:04:33,199
if some people sitting here in the

108
00:04:33,199 --> 00:04:35,389
audience even so that project didn't

109
00:04:35,389 --> 00:04:36,800
actually make a lot of progress in the

110
00:04:36,800 --> 00:04:38,720
end it was just a forgotten get repo

111
00:04:38,720 --> 00:04:41,030
that sort of stayed in my home directory

112
00:04:41,030 --> 00:04:42,470
and it might even be the case that I

113
00:04:42,470 --> 00:04:44,240
reinstalled my laptop so that the code

114
00:04:44,240 --> 00:04:46,790
is now gone but it was a really good

115
00:04:46,790 --> 00:04:48,199
excuse for me to experiment with all

116
00:04:48,199 --> 00:04:51,050
sorts of new technology that I hadn't

117
00:04:51,050 --> 00:04:53,360
used before so just to sort of give you

118
00:04:53,360 --> 00:04:55,190
short overview of how it worked you had

119
00:04:55,190 --> 00:04:56,600
a couple of servers that were sort of

120
00:04:56,600 --> 00:04:59,060
connected with each other in like in a

121
00:04:59,060 --> 00:05:00,889
mesh and they would just replicate all

122
00:05:00,889 --> 00:05:02,270
the transactions over that would be

123
00:05:02,270 --> 00:05:04,160
coming in and then on the outside you'd

124
00:05:04,160 --> 00:05:06,169
you'd have sort of a swarm of clients

125
00:05:06,169 --> 00:05:08,240
and maybe even some caching nodes that

126
00:05:08,240 --> 00:05:10,280
would hold on to certain parts of the

127
00:05:10,280 --> 00:05:11,660
tree and would make sure that that would

128
00:05:11,660 --> 00:05:16,220
all sort of get replicated so one of the

129
00:05:16,220 --> 00:05:17,660
things I was experimenting with first

130
00:05:17,660 --> 00:05:19,460
this database server was I wanted to

131
00:05:19,460 --> 00:05:22,310
harden it so the problem is you're

132
00:05:22,310 --> 00:05:24,169
running arbitrary dart code in a virtual

133
00:05:24,169 --> 00:05:25,610
machine what could possibly go wrong

134
00:05:25,610 --> 00:05:27,820
you know it's user-supplied dart code

135
00:05:27,820 --> 00:05:30,380
what if this dart code simply contains

136
00:05:30,380 --> 00:05:32,240
statements in there that simply say like

137
00:05:32,240 --> 00:05:33,860
you know open these arbitrary files on

138
00:05:33,860 --> 00:05:38,419
disk remove slash EDC / password etc so

139
00:05:38,419 --> 00:05:40,099
I wanted to make use of sandboxing to

140
00:05:40,099 --> 00:05:41,750
actually make sure that if even if there

141
00:05:41,750 --> 00:05:43,910
would be an exploit in the dart VM there

142
00:05:43,910 --> 00:05:45,380
would be no way of breaking out of the

143
00:05:45,380 --> 00:05:48,820
VM and running arbitrary code

144
00:05:50,300 --> 00:05:53,069
the usage access pattern is quite simple

145
00:05:53,069 --> 00:05:55,619
it either accesses its data set that the

146
00:05:55,619 --> 00:05:57,089
stored is some kind of directory on disk

147
00:05:57,089 --> 00:06:00,059
it talks to the other servers in the in

148
00:06:00,059 --> 00:06:02,580
the raft consensus group so like the

149
00:06:02,580 --> 00:06:04,949
inner mesh and then you'd have TCP

150
00:06:04,949 --> 00:06:06,389
connections coming in from clients on

151
00:06:06,389 --> 00:06:08,839
sort of the outside of the network so

152
00:06:08,839 --> 00:06:13,619
what I did back then was I sort of got

153
00:06:13,619 --> 00:06:16,740
distracted and instead of focusing on

154
00:06:16,740 --> 00:06:19,050
like getting the database server working

155
00:06:19,050 --> 00:06:21,180
I ended up focusing only on the

156
00:06:21,180 --> 00:06:22,889
sandboxing and getting that right which

157
00:06:22,889 --> 00:06:24,119
meant that in the end I didn't have a

158
00:06:24,119 --> 00:06:26,479
functional database server sort of

159
00:06:26,479 --> 00:06:30,270
completely stupid idea so I sort of

160
00:06:30,270 --> 00:06:31,830
started making an inventory of all the

161
00:06:31,830 --> 00:06:33,419
security frameworks that are out there

162
00:06:33,419 --> 00:06:38,639
and I sort of came up with this this

163
00:06:38,639 --> 00:06:40,919
slide is sort of my observation of like

164
00:06:40,919 --> 00:06:42,479
the current state of security frameworks

165
00:06:42,479 --> 00:06:45,300
I'm by no means an expert on them but

166
00:06:45,300 --> 00:06:46,860
this is sort of my interpretation of

167
00:06:46,860 --> 00:06:52,199
them so at the at like the top they can

168
00:06:52,199 --> 00:06:54,180
be sort of divided in two separate

169
00:06:54,180 --> 00:06:57,240
groups once that I sort of call static

170
00:06:57,240 --> 00:06:59,189
policy like and other ones that I called

171
00:06:59,189 --> 00:07:01,830
dynamic capability like and I completely

172
00:07:01,830 --> 00:07:03,419
have it like a completely different

173
00:07:03,419 --> 00:07:05,009
mindset of attacking the problem of

174
00:07:05,009 --> 00:07:08,669
hardening software so this static policy

175
00:07:08,669 --> 00:07:10,019
like frameworks they're sort of built

176
00:07:10,019 --> 00:07:12,089
from this mindset saying like the

177
00:07:12,089 --> 00:07:14,580
problem with unique security is in its

178
00:07:14,580 --> 00:07:17,039
security model namely in the way file

179
00:07:17,039 --> 00:07:19,889
system permissions work so we need to

180
00:07:19,889 --> 00:07:21,990
extend on that file system permissions

181
00:07:21,990 --> 00:07:23,759
need to be more complex there need to be

182
00:07:23,759 --> 00:07:26,159
more access control lists or more

183
00:07:26,159 --> 00:07:29,309
frameworks provided by the kernel and

184
00:07:29,309 --> 00:07:31,439
good examples of those frameworks are a

185
00:07:31,439 --> 00:07:34,050
Parmer and selinux and something that

186
00:07:34,050 --> 00:07:36,599
they call POSIX capabilities even though

187
00:07:36,599 --> 00:07:38,249
that system has nothing to do with

188
00:07:38,249 --> 00:07:43,349
capability based security and those

189
00:07:43,349 --> 00:07:45,059
systems they're typically configured by

190
00:07:45,059 --> 00:07:48,389
administrators users in some cases even

191
00:07:48,389 --> 00:07:50,490
package maintainer zuv operating systems

192
00:07:50,490 --> 00:07:52,889
so app armour security policies they're

193
00:07:52,889 --> 00:07:56,249
typically written by by by distro

194
00:07:56,249 --> 00:07:58,409
package maintainer state they build what

195
00:07:58,409 --> 00:08:00,749
they do is they sort of run the program

196
00:08:00,749 --> 00:08:02,399
that they want have harden for a certain

197
00:08:02,399 --> 00:08:03,060
period of

198
00:08:03,060 --> 00:08:06,060
and they said analyze it for say a

199
00:08:06,060 --> 00:08:09,000
couple of hours a couple of days and the

200
00:08:09,000 --> 00:08:10,500
output of that analysis is sort of

201
00:08:10,500 --> 00:08:12,180
turned into a security policy that's put

202
00:08:12,180 --> 00:08:15,270
in place so what happens if if there's

203
00:08:15,270 --> 00:08:16,770
some kind of exploit in it and then that

204
00:08:16,770 --> 00:08:19,500
attacker takes over the application that

205
00:08:19,500 --> 00:08:21,810
person can only run the actions that a

206
00:08:21,810 --> 00:08:23,460
part of the security policy that was

207
00:08:23,460 --> 00:08:26,390
generated during the training phase so

208
00:08:26,390 --> 00:08:29,160
what what i've observed is that those

209
00:08:29,160 --> 00:08:30,840
security frameworks they typically only

210
00:08:30,840 --> 00:08:32,549
provide like very little gain in

211
00:08:32,549 --> 00:08:35,190
security so the best examples I can give

212
00:08:35,190 --> 00:08:37,620
you for example a web browser has a foul

213
00:08:37,620 --> 00:08:40,080
open file save dialog you know whenever

214
00:08:40,080 --> 00:08:42,510
you've done download a file press ctrl s

215
00:08:42,510 --> 00:08:44,670
you get this pop-up box where you can

216
00:08:44,670 --> 00:08:46,980
browse the entire file system well that

217
00:08:46,980 --> 00:08:48,390
sort of automatically means that this

218
00:08:48,390 --> 00:08:49,770
browser needs to be able to access the

219
00:08:49,770 --> 00:08:51,450
entire file system of your of your

220
00:08:51,450 --> 00:08:53,580
system so it basically makes it pretty

221
00:08:53,580 --> 00:08:56,520
much useless also what I think what I

222
00:08:56,520 --> 00:08:58,200
really dislike about the system is that

223
00:08:58,200 --> 00:09:00,060
it's configured by users and

224
00:09:00,060 --> 00:09:02,940
administrators people who have no sort

225
00:09:02,940 --> 00:09:04,440
of real deep understanding of how the

226
00:09:04,440 --> 00:09:06,390
software works internally and we sort of

227
00:09:06,390 --> 00:09:08,040
expect those people to come up with

228
00:09:08,040 --> 00:09:09,780
security policies to make the software

229
00:09:09,780 --> 00:09:11,730
secure like the software developer

230
00:09:11,730 --> 00:09:13,260
doesn't even care about it sort of

231
00:09:13,260 --> 00:09:15,270
throws Dakota over the fence and then

232
00:09:15,270 --> 00:09:17,010
other people have to clean up afterwards

233
00:09:17,010 --> 00:09:19,680
and make it more secure so what you also

234
00:09:19,680 --> 00:09:21,030
see if the last couple years said it's

235
00:09:21,030 --> 00:09:23,280
that all these new security models they

236
00:09:23,280 --> 00:09:25,350
sort of tend to pop up and those are

237
00:09:25,350 --> 00:09:27,480
more dynamic capability like so how it

238
00:09:27,480 --> 00:09:29,520
works is that it's not a policy that

239
00:09:29,520 --> 00:09:31,590
sort of installed globally or in the

240
00:09:31,590 --> 00:09:34,200
system and CDC but it's sort of part of

241
00:09:34,200 --> 00:09:36,390
the programming API sware sort of the

242
00:09:36,390 --> 00:09:38,940
program can say like I've acquired all

243
00:09:38,940 --> 00:09:40,380
the things that I need to access I've

244
00:09:40,380 --> 00:09:42,360
got my network connections I can access

245
00:09:42,360 --> 00:09:44,580
these parts on disk now lock me up and

246
00:09:44,580 --> 00:09:46,710
throw away the keys that's sort of how

247
00:09:46,710 --> 00:09:49,020
the security model works and Linux has a

248
00:09:49,020 --> 00:09:51,720
second model I think the most commonly

249
00:09:51,720 --> 00:09:53,940
used flavor of seccomp is ii BPF where

250
00:09:53,940 --> 00:09:57,170
they have some kind of

251
00:10:00,549 --> 00:10:05,839
OpenBSD pledge and these tend to have

252
00:10:05,839 --> 00:10:07,429
like a really big gain in security as

253
00:10:07,429 --> 00:10:08,899
you'll see in a couple of minutes so a

254
00:10:08,899 --> 00:10:11,289
lot of people ask me whenever I sort of

255
00:10:11,289 --> 00:10:14,089
talk about these this topic is where

256
00:10:14,089 --> 00:10:17,679
does docker fit in in this picture and

257
00:10:17,679 --> 00:10:20,509
it's sort of a really tough question but

258
00:10:20,509 --> 00:10:21,979
if you sort of look at how doctors use

259
00:10:21,979 --> 00:10:24,049
typically I'd say it's more like a

260
00:10:24,049 --> 00:10:26,689
static system you know it's set up by

261
00:10:26,689 --> 00:10:28,819
the users to run a program in a confined

262
00:10:28,819 --> 00:10:31,339
space it's not used as sort of an API by

263
00:10:31,339 --> 00:10:35,269
programs itself so now we're sort of

264
00:10:35,269 --> 00:10:37,129
going to discuss how capsicum works and

265
00:10:37,129 --> 00:10:39,859
basically capsicum is a sort of two-step

266
00:10:39,859 --> 00:10:42,919
recipe for making making software more

267
00:10:42,919 --> 00:10:46,159
secure so the first thing that that the

268
00:10:46,159 --> 00:10:47,989
capsicum developers have sort of done is

269
00:10:47,989 --> 00:10:50,209
they've made the operating system sort

270
00:10:50,209 --> 00:10:52,249
of more object oriented you could call

271
00:10:52,249 --> 00:10:52,909
it like that

272
00:10:52,909 --> 00:10:57,829
so what I've done is I've sort of made

273
00:10:57,829 --> 00:10:59,719
turn everything into a file descriptor

274
00:10:59,719 --> 00:11:03,259
so normally for there are sort of

275
00:11:03,259 --> 00:11:04,969
multiple namespaces that the process can

276
00:11:04,969 --> 00:11:06,829
access it has its file descriptors it

277
00:11:06,829 --> 00:11:07,909
can access the entire file system

278
00:11:07,909 --> 00:11:10,189
namespace then there's the process table

279
00:11:10,189 --> 00:11:12,439
then there's the network stack all sorts

280
00:11:12,439 --> 00:11:14,089
of separate frameworks but what I first

281
00:11:14,089 --> 00:11:16,099
did is I sort of tried to unify it into

282
00:11:16,099 --> 00:11:19,819
signal like scope follow scripters in

283
00:11:19,819 --> 00:11:22,519
this case so one thing that I've sort of

284
00:11:22,519 --> 00:11:24,169
really focused on a lot is having

285
00:11:24,169 --> 00:11:26,059
directory file descriptor support so

286
00:11:26,059 --> 00:11:28,009
that you can open a certain directory

287
00:11:28,009 --> 00:11:30,169
that's on disk and then sort of say like

288
00:11:30,169 --> 00:11:32,389
this file descriptor now represents all

289
00:11:32,389 --> 00:11:34,039
the files that are stored underneath

290
00:11:34,039 --> 00:11:38,059
this directory so you can point to sub

291
00:11:38,059 --> 00:11:40,039
trees in the filesystem basically and

292
00:11:40,039 --> 00:11:41,209
what I've also done is I've added

293
00:11:41,209 --> 00:11:42,799
something called process descriptors

294
00:11:42,799 --> 00:11:45,199
where instead of process IDs that are

295
00:11:45,199 --> 00:11:47,089
sort of global system-wide and you can

296
00:11:47,089 --> 00:11:49,459
see send signals to them based on some

297
00:11:49,459 --> 00:11:52,909
very rudimentary mentary form of access

298
00:11:52,909 --> 00:11:54,679
controls they've changed that into

299
00:11:54,679 --> 00:11:56,599
process descriptors so as you'll see

300
00:11:56,599 --> 00:11:58,159
later on they're sort of a special for

301
00:11:58,159 --> 00:12:01,039
call PD fork and that sort of gives you

302
00:12:01,039 --> 00:12:04,959
a follow skipper to a child process and

303
00:12:10,390 --> 00:12:12,190
if you can't read or write over it but

304
00:12:12,190 --> 00:12:15,040
it sort of acts as a handle giving you

305
00:12:15,040 --> 00:12:16,720
ownership of that process on the other

306
00:12:16,720 --> 00:12:20,050
side and if you close it you sort of

307
00:12:20,050 --> 00:12:22,570
lose that process and in practice that

308
00:12:22,570 --> 00:12:23,950
means that that process gets killed and

309
00:12:23,950 --> 00:12:26,890
shut down so the second step that

310
00:12:26,890 --> 00:12:28,269
they've sort of done with capsicum is

311
00:12:28,269 --> 00:12:29,980
sort of now that the operating system is

312
00:12:29,980 --> 00:12:32,260
more object oriented let's actually let

313
00:12:32,260 --> 00:12:34,390
those objects determine what the process

314
00:12:34,390 --> 00:12:37,390
can do so a process can actually give up

315
00:12:37,390 --> 00:12:40,450
rights it can say I never need to access

316
00:12:40,450 --> 00:12:41,740
this certain resource anymore

317
00:12:41,740 --> 00:12:43,329
by simply calling closed on the file

318
00:12:43,329 --> 00:12:46,540
descriptor and it's gone privilege

319
00:12:46,540 --> 00:12:48,490
separation so say if you have this huge

320
00:12:48,490 --> 00:12:50,050
program and you want to divide it into

321
00:12:50,050 --> 00:12:51,820
multiple sub processes that all have

322
00:12:51,820 --> 00:12:53,470
their sort of separate rights

323
00:12:53,470 --> 00:12:55,149
that's called privilege separation

324
00:12:55,149 --> 00:12:56,380
that's something that you can really

325
00:12:56,380 --> 00:12:57,850
easily implement by this model

326
00:12:57,850 --> 00:12:59,769
you can simply fork the process into two

327
00:12:59,769 --> 00:13:02,800
processes one process closes 1/2 foot to

328
00:13:02,800 --> 00:13:03,760
follow Scripture and the other one

329
00:13:03,760 --> 00:13:05,440
closed the other half and then you've

330
00:13:05,440 --> 00:13:07,720
really separated the privileges of the

331
00:13:07,720 --> 00:13:11,290
process another very nifty feature of

332
00:13:11,290 --> 00:13:13,570
UNIX based operating systems that a lot

333
00:13:13,570 --> 00:13:15,399
of people are unaware of is that you can

334
00:13:15,399 --> 00:13:17,680
actually pass file descriptors to other

335
00:13:17,680 --> 00:13:20,949
processes so if you create a UNIX socket

336
00:13:20,949 --> 00:13:22,810
between two processes you can use a

337
00:13:22,810 --> 00:13:26,769
special message type called SCM writes

338
00:13:26,769 --> 00:13:28,540
where you basically say I've got this

339
00:13:28,540 --> 00:13:30,370
array of file descriptors now push it

340
00:13:30,370 --> 00:13:32,019
through the socket and pop it up on the

341
00:13:32,019 --> 00:13:34,930
other side and if the other side

342
00:13:34,930 --> 00:13:37,660
receives those file descriptors it sort

343
00:13:37,660 --> 00:13:38,949
of duplicates them into different

344
00:13:38,949 --> 00:13:40,690
process so that's also a really nifty

345
00:13:40,690 --> 00:13:42,370
trick where you can sort of say like

346
00:13:42,370 --> 00:13:44,140
I've got access to this directory and

347
00:13:44,140 --> 00:13:45,579
now I need this this other running

348
00:13:45,579 --> 00:13:47,560
process to write some stuff into it well

349
00:13:47,560 --> 00:13:48,970
just push it through a socket and it

350
00:13:48,970 --> 00:13:51,940
comes out on the other side and what you

351
00:13:51,940 --> 00:13:53,740
see is a result of this models that UNIX

352
00:13:53,740 --> 00:13:55,899
user group credentials they become less

353
00:13:55,899 --> 00:13:57,970
important so if you're using capsicum

354
00:13:57,970 --> 00:14:00,130
even if you run a process as root it

355
00:14:00,130 --> 00:14:02,019
doesn't really matter anymore because

356
00:14:02,019 --> 00:14:04,630
the the rights that that process has are

357
00:14:04,630 --> 00:14:06,550
largely now determined by the set of

358
00:14:06,550 --> 00:14:09,339
file descriptors that it owns so how

359
00:14:09,339 --> 00:14:11,370
does capsicum work in practice

360
00:14:11,370 --> 00:14:13,990
first of all process starts up like your

361
00:14:13,990 --> 00:14:17,620
ordinary uniques process you can just

362
00:14:17,620 --> 00:14:19,390
run it from them from a command line or

363
00:14:19,390 --> 00:14:22,580
from like an init script

364
00:14:22,580 --> 00:14:25,100
at some point in time the process calls

365
00:14:25,100 --> 00:14:26,930
the cap enter system call and that sort

366
00:14:26,930 --> 00:14:29,000
of locks up the process it switches the

367
00:14:29,000 --> 00:14:30,260
process over into something called

368
00:14:30,260 --> 00:14:33,560
capabilities mode and when you do that a

369
00:14:33,560 --> 00:14:35,270
lot of things are suddenly forbidden so

370
00:14:35,270 --> 00:14:37,580
you can no longer or open files by

371
00:14:37,580 --> 00:14:39,950
arbitrary file names you can no longer

372
00:14:39,950 --> 00:14:42,230
bind to arbitrary IP addresses and port

373
00:14:42,230 --> 00:14:44,150
numbers you can no longer connect to

374
00:14:44,150 --> 00:14:46,040
arbitrary hosts from the network also

375
00:14:46,040 --> 00:14:48,170
regular forking is not supported because

376
00:14:48,170 --> 00:14:49,400
that needs to be done through the PD

377
00:14:49,400 --> 00:14:51,710
fork all the same of killing processes

378
00:14:51,710 --> 00:14:53,210
you can't just send arbitrary signals to

379
00:14:53,210 --> 00:14:55,430
processes in the process table and the

380
00:14:55,430 --> 00:14:56,810
same holds for some administrative

381
00:14:56,810 --> 00:14:58,490
system calls so rebooting a mounting

382
00:14:58,490 --> 00:15:00,110
doesn't make any sense of course if

383
00:15:00,110 --> 00:15:02,270
you're in this unprivileged mode but

384
00:15:02,270 --> 00:15:03,350
there's a whole bunch of things that you

385
00:15:03,350 --> 00:15:05,360
can still use so reading on file

386
00:15:05,360 --> 00:15:06,830
descriptors writing or file descriptors

387
00:15:06,830 --> 00:15:08,870
creating pipes and socket pairs those

388
00:15:08,870 --> 00:15:10,070
are only things that sort of have this

389
00:15:10,070 --> 00:15:12,320
local impact doesn't have a global

390
00:15:12,320 --> 00:15:14,390
impact on the system then you can still

391
00:15:14,390 --> 00:15:16,160
use the open app system call which was

392
00:15:16,160 --> 00:15:18,800
added in POSIX 2008 which is sort of a

393
00:15:18,800 --> 00:15:20,870
special flavor of the normal open system

394
00:15:20,870 --> 00:15:22,730
call but allows you to open files

395
00:15:22,730 --> 00:15:26,780
underneath a certain directory and same

396
00:15:26,780 --> 00:15:28,220
holds for connecting and binding to

397
00:15:28,220 --> 00:15:30,020
sockets I've made special system calls

398
00:15:30,020 --> 00:15:31,790
where you can at least say like I want

399
00:15:31,790 --> 00:15:33,530
to bind a UNIX socket to a certain path

400
00:15:33,530 --> 00:15:37,550
under a certain directory a very

401
00:15:37,550 --> 00:15:39,470
important aspect of capabilities mode of

402
00:15:39,470 --> 00:15:40,910
course is that there's no way of leaving

403
00:15:40,910 --> 00:15:43,070
capabilities Motors no cap leave system

404
00:15:43,070 --> 00:15:44,810
call otherwise the entire security model

405
00:15:44,810 --> 00:15:46,250
would be useless of course because an

406
00:15:46,250 --> 00:15:48,100
attacker could take an open application

407
00:15:48,100 --> 00:15:50,480
called cap leave and then it could just

408
00:15:50,480 --> 00:15:53,240
go on as it normally does so that's a

409
00:15:53,240 --> 00:15:56,510
really important aspect so for my

410
00:15:56,510 --> 00:15:59,510
database server how you use capsicum in

411
00:15:59,510 --> 00:16:01,730
this case is it's you know again the

412
00:16:01,730 --> 00:16:03,560
same strategy the process starts up like

413
00:16:03,560 --> 00:16:05,960
a regular UNIX process it reads it reads

414
00:16:05,960 --> 00:16:07,760
in its configuration file and in the

415
00:16:07,760 --> 00:16:09,740
configuration file it specifies which

416
00:16:09,740 --> 00:16:11,870
directories need to be used in which IP

417
00:16:11,870 --> 00:16:13,580
addresses on which we need to listen so

418
00:16:13,580 --> 00:16:15,680
we create all these sockets and file

419
00:16:15,680 --> 00:16:17,120
descriptors and then at some point we

420
00:16:17,120 --> 00:16:19,760
call cap enter and voila from that point

421
00:16:19,760 --> 00:16:21,890
on we can only start processing requests

422
00:16:21,890 --> 00:16:22,970
that are coming in and we can't do

423
00:16:22,970 --> 00:16:27,880
anything else so

424
00:16:29,030 --> 00:16:31,320
for my database server I started using

425
00:16:31,320 --> 00:16:35,640
capsicum and even though in in theory it

426
00:16:35,640 --> 00:16:37,080
sounds like a pretty awesome security

427
00:16:37,080 --> 00:16:39,090
framework that gives you some really

428
00:16:39,090 --> 00:16:40,260
tight isolation

429
00:16:40,260 --> 00:16:42,570
I noticed that using it in practice can

430
00:16:42,570 --> 00:16:45,300
be pretty tricky so it took me quite a

431
00:16:45,300 --> 00:16:46,800
long time before I managed to get the

432
00:16:46,800 --> 00:16:49,760
dart VM working within capsicum that was

433
00:16:49,760 --> 00:16:53,400
really exciting so the reason for this

434
00:16:53,400 --> 00:16:54,630
is that you end up with all these pieces

435
00:16:54,630 --> 00:16:56,550
of code that are your this slide and

436
00:16:56,550 --> 00:16:58,290
they're used in practice and there's

437
00:16:58,290 --> 00:17:00,720
they're simply there and you'll sort of

438
00:17:00,720 --> 00:17:02,820
have to deal with that so the top one

439
00:17:02,820 --> 00:17:04,949
was somewhere in the dart VM I think

440
00:17:04,949 --> 00:17:06,510
they had some some code in there where

441
00:17:06,510 --> 00:17:08,220
you could deal with times in different

442
00:17:08,220 --> 00:17:12,119
time zones and if you sort of look up

443
00:17:12,119 --> 00:17:14,130
and see how you convert times to a

444
00:17:14,130 --> 00:17:17,339
certain time in a time zone you have to

445
00:17:17,339 --> 00:17:18,930
use the following sequence so first you

446
00:17:18,930 --> 00:17:20,939
change an environment variable called TZ

447
00:17:20,939 --> 00:17:23,579
you said it - the name of the time zone

448
00:17:23,579 --> 00:17:25,800
you want to use and then what you do is

449
00:17:25,800 --> 00:17:27,119
you call this magic function called TZ

450
00:17:27,119 --> 00:17:29,310
at set and it sort of reinitialize is

451
00:17:29,310 --> 00:17:30,750
the sea library to use a different time

452
00:17:30,750 --> 00:17:32,730
zone and then afterwards you can call

453
00:17:32,730 --> 00:17:35,370
the local time function so under the

454
00:17:35,370 --> 00:17:37,080
hood what happens the T jet-set function

455
00:17:37,080 --> 00:17:39,120
tries to open files under user share

456
00:17:39,120 --> 00:17:41,130
zone info but if you're calling cap

457
00:17:41,130 --> 00:17:43,230
enter then that kind of code no longer

458
00:17:43,230 --> 00:17:45,210
works and what's really annoying is that

459
00:17:45,210 --> 00:17:46,770
bursty jet-set you can't do any error

460
00:17:46,770 --> 00:17:49,320
handling so this piece of code it still

461
00:17:49,320 --> 00:17:51,090
works as it does normally the only

462
00:17:51,090 --> 00:17:53,150
difference is that it still either

463
00:17:53,150 --> 00:17:55,410
represents the time in the old time zone

464
00:17:55,410 --> 00:17:57,000
that was sort of active before calling

465
00:17:57,000 --> 00:18:00,210
T's at set or it uses UTC or something

466
00:18:00,210 --> 00:18:02,010
weird you can't really tell anymore what

467
00:18:02,010 --> 00:18:04,650
it does and also this piece of code that

468
00:18:04,650 --> 00:18:05,970
was at the bottom was also fairly

469
00:18:05,970 --> 00:18:07,260
annoying

470
00:18:07,260 --> 00:18:09,000
there is a piece of code that tried to

471
00:18:09,000 --> 00:18:11,430
convert a multi byte string to a white

472
00:18:11,430 --> 00:18:13,410
character string so what does it what it

473
00:18:13,410 --> 00:18:15,540
means sort of in layman's terms it took

474
00:18:15,540 --> 00:18:17,520
a utf-8 string and it converts it over

475
00:18:17,520 --> 00:18:19,080
to Unicode code points so you can

476
00:18:19,080 --> 00:18:20,850
process it character by character and

477
00:18:20,850 --> 00:18:23,460
call it uses this new locale function

478
00:18:23,460 --> 00:18:25,970
that sort of creates a handle to a

479
00:18:25,970 --> 00:18:28,680
localization object and in this case

480
00:18:28,680 --> 00:18:32,190
it's representing utf-8 the problem of

481
00:18:32,190 --> 00:18:34,110
this function is that it tries to open

482
00:18:34,110 --> 00:18:38,940
user share locale utf-8 slash LCC type

483
00:18:38,940 --> 00:18:40,620
or some file on disk and

484
00:18:40,620 --> 00:18:42,720
come come can no longer access it so

485
00:18:42,720 --> 00:18:44,520
this piece of coats of expects that it

486
00:18:44,520 --> 00:18:46,860
can same he convert utf-8 over to

487
00:18:46,860 --> 00:18:48,480
Unicode but then it sort of starts to

488
00:18:48,480 --> 00:18:50,940
fail and this piece of code is actually

489
00:18:50,940 --> 00:18:54,120
sort of the the most interesting one I

490
00:18:54,120 --> 00:18:55,530
ran into and this sort of really

491
00:18:55,530 --> 00:18:56,910
demonstrates one of the weaknesses of

492
00:18:56,910 --> 00:18:59,280
capsicum this is a crypto library you

493
00:18:59,280 --> 00:19:00,990
can find any internet live Tom Krebs you

494
00:19:00,990 --> 00:19:03,150
can find it on github which is the name

495
00:19:03,150 --> 00:19:04,830
of the source file in there I've

496
00:19:04,830 --> 00:19:06,960
reported this issue numerous times to

497
00:19:06,960 --> 00:19:08,280
the upstream offer but he doesn't

498
00:19:08,280 --> 00:19:10,380
respond what happens this piece of code

499
00:19:10,380 --> 00:19:12,720
tries to implement a cryptographically

500
00:19:12,720 --> 00:19:15,630
secure random number generator so it

501
00:19:15,630 --> 00:19:17,220
tries to open that few random and twice

502
00:19:17,220 --> 00:19:19,380
to read some data from it eventually but

503
00:19:19,380 --> 00:19:21,240
that simply no longer works so what do

504
00:19:21,240 --> 00:19:22,710
we do when we can't opened a few random

505
00:19:22,710 --> 00:19:24,990
well yeah then we just call the clock

506
00:19:24,990 --> 00:19:27,030
function to get like the the running

507
00:19:27,030 --> 00:19:29,250
time of the current process and that

508
00:19:29,250 --> 00:19:30,990
should be used as like the initial seed

509
00:19:30,990 --> 00:19:33,090
for all of the random number computation

510
00:19:33,090 --> 00:19:36,150
so we try to make our application more

511
00:19:36,150 --> 00:19:37,890
secure but by calling cap enter we

512
00:19:37,890 --> 00:19:41,880
actually made alot less secure so what I

513
00:19:41,880 --> 00:19:43,380
learnt in 2013

514
00:19:43,380 --> 00:19:46,320
well sandboxing is stupid and you

515
00:19:46,320 --> 00:19:48,809
shouldn't use it that's sort of why my

516
00:19:48,809 --> 00:19:51,780
takeaway from it it's no fun at all you

517
00:19:51,780 --> 00:19:54,030
spend a lot of time figuring out why

518
00:19:54,030 --> 00:19:56,160
your program doesn't work you run into

519
00:19:56,160 --> 00:19:57,960
these issues that you can actually only

520
00:19:57,960 --> 00:19:59,640
discover by tracing the application

521
00:19:59,640 --> 00:20:01,380
system call by system call and figuring

522
00:20:01,380 --> 00:20:03,300
out what's going wrong there's no

523
00:20:03,300 --> 00:20:05,250
tooling that actually helps you along

524
00:20:05,250 --> 00:20:07,050
the way you know you're you're on your

525
00:20:07,050 --> 00:20:12,210
own and yeah even if you get it working

526
00:20:12,210 --> 00:20:14,100
in the end you still can't be certain

527
00:20:14,100 --> 00:20:15,510
that it actually works in the way you've

528
00:20:15,510 --> 00:20:19,590
sort of expected so I want to sort of

529
00:20:19,590 --> 00:20:21,150
close off this part of my talk by

530
00:20:21,150 --> 00:20:23,460
putting this slide in there if you are

531
00:20:23,460 --> 00:20:25,830
considering using sandboxing frameworks

532
00:20:25,830 --> 00:20:28,980
only mimics STR right now or on any UNIX

533
00:20:28,980 --> 00:20:31,890
flavor then please please please don't

534
00:20:31,890 --> 00:20:33,809
use it within any code that makes use of

535
00:20:33,809 --> 00:20:35,940
third-party libraries because you

536
00:20:35,940 --> 00:20:37,620
actually can't be certain what those

537
00:20:37,620 --> 00:20:39,390
libraries are doing on the inside and

538
00:20:39,390 --> 00:20:41,309
the code in those libraries might

539
00:20:41,309 --> 00:20:43,679
actually be changing over time upstream

540
00:20:43,679 --> 00:20:46,440
might actually reimplementation a number

541
00:20:46,440 --> 00:20:48,000
generator by something that was shown on

542
00:20:48,000 --> 00:20:50,730
one of the previous slides and your

543
00:20:50,730 --> 00:20:52,710
users will simply install the

544
00:20:52,710 --> 00:20:54,370
application install of the dependence

545
00:20:54,370 --> 00:20:55,480
and they might actually end up with

546
00:20:55,480 --> 00:20:57,490
something that's insecure so this is the

547
00:20:57,490 --> 00:20:59,650
reason why sandbox in frameworks work

548
00:20:59,650 --> 00:21:03,130
well for Google Chrome browser tabs they

549
00:21:03,130 --> 00:21:05,230
make use of ii and a reason for that is

550
00:21:05,230 --> 00:21:08,740
they only run c c++ code in there that

551
00:21:08,740 --> 00:21:10,450
they've written themselves or maintained

552
00:21:10,450 --> 00:21:12,460
themselves or have part of their own

553
00:21:12,460 --> 00:21:15,780
distribution that also explains why

554
00:21:15,780 --> 00:21:18,130
pledge works really well for the OpenBSD

555
00:21:18,130 --> 00:21:20,559
people you know they've been they

556
00:21:20,559 --> 00:21:22,390
typically post these reports saying like

557
00:21:22,390 --> 00:21:25,059
we've poured it over so many dozens or

558
00:21:25,059 --> 00:21:27,100
hundreds programs over to use pledge it

559
00:21:27,100 --> 00:21:30,309
works for them because applications and

560
00:21:30,309 --> 00:21:33,070
OpenBSD tempt to be fairly small up to

561
00:21:33,070 --> 00:21:35,800
ten thousand lines of C code and they

562
00:21:35,800 --> 00:21:37,420
make use of libraries that are all part

563
00:21:37,420 --> 00:21:39,130
of their base systems so that's why it

564
00:21:39,130 --> 00:21:41,050
works for them but this also sort of

565
00:21:41,050 --> 00:21:42,460
demonstrates why I didn't work well for

566
00:21:42,460 --> 00:21:44,860
me and it also shows you why if you run

567
00:21:44,860 --> 00:21:46,660
PS on your system and take a look at all

568
00:21:46,660 --> 00:21:48,460
of the processes that are on there that

569
00:21:48,460 --> 00:21:50,500
almost none of them use any sandboxing

570
00:21:50,500 --> 00:21:58,150
framework so 2014 was over I moved back

571
00:21:58,150 --> 00:22:01,770
to the Netherlands at the end of 2014 a

572
00:22:01,770 --> 00:22:04,240
gopher and I we found a new apartment in

573
00:22:04,240 --> 00:22:05,770
which we wanted to live so I was

574
00:22:05,770 --> 00:22:07,390
spending there a couple of days in a row

575
00:22:07,390 --> 00:22:09,580
you know sitting on my knees putting new

576
00:22:09,580 --> 00:22:11,830
floorboards in there and it sort of gave

577
00:22:11,830 --> 00:22:13,420
me some time to sort of reflect on

578
00:22:13,420 --> 00:22:15,820
everything that I've been doing in 2014

579
00:22:15,820 --> 00:22:19,750
so one of the things that I sort of

580
00:22:19,750 --> 00:22:22,210
realized while I was sort of working on

581
00:22:22,210 --> 00:22:23,200
my apartment and getting it all

582
00:22:23,200 --> 00:22:27,730
appreciate was this could all be avoided

583
00:22:27,730 --> 00:22:29,230
if we simply had a programming

584
00:22:29,230 --> 00:22:30,580
environment that didn't have this sort

585
00:22:30,580 --> 00:22:32,679
of state transition in it so where you

586
00:22:32,679 --> 00:22:34,390
didn't call kept enter to sandbox but

587
00:22:34,390 --> 00:22:37,059
simply had sandbox in always turned on

588
00:22:37,059 --> 00:22:38,800
where you could sort of assume that the

589
00:22:38,800 --> 00:22:42,580
program was sandbox so in that case you

590
00:22:42,580 --> 00:22:44,770
could sort of design a C programming

591
00:22:44,770 --> 00:22:46,390
environment where sandboxing is always

592
00:22:46,390 --> 00:22:48,690
enabled that's very important that

593
00:22:48,690 --> 00:22:51,010
allows you to remove all sorts of

594
00:22:51,010 --> 00:22:53,830
functions that are only that only work

595
00:22:53,830 --> 00:22:55,360
in a non sandbox environment so for

596
00:22:55,360 --> 00:22:56,770
example the open call you could just

597
00:22:56,770 --> 00:22:58,630
remove them entirely and all of the

598
00:22:58,630 --> 00:23:01,000
remaining stuff you could just

599
00:23:01,000 --> 00:23:02,530
reimplemented in such a way that it

600
00:23:02,530 --> 00:23:04,480
works well with sandboxing so it really

601
00:23:04,480 --> 00:23:06,100
takes into account that it's running in

602
00:23:06,100 --> 00:23:07,620
the sandbox mode

603
00:23:07,620 --> 00:23:10,320
the advantage of having such a model is

604
00:23:10,320 --> 00:23:13,230
you can now compile your application and

605
00:23:13,230 --> 00:23:16,480
it will break it will break in dozens of

606
00:23:16,480 --> 00:23:19,180
places maybe even hundreds of places but

607
00:23:19,180 --> 00:23:20,980
still you know exactly which pieces of

608
00:23:20,980 --> 00:23:23,950
code you sort of need to inspect to get

609
00:23:23,950 --> 00:23:26,620
it working with sandboxing so it gives

610
00:23:26,620 --> 00:23:28,270
you this really good guided approach of

611
00:23:28,270 --> 00:23:29,980
getting your program sandbox you know

612
00:23:29,980 --> 00:23:31,690
you you start up off of one hundred

613
00:23:31,690 --> 00:23:33,130
compiler errors of your program not

614
00:23:33,130 --> 00:23:35,140
working and then you sort of start keep

615
00:23:35,140 --> 00:23:37,210
on working until you've reached zero and

616
00:23:37,210 --> 00:23:39,760
then you your program works well in the

617
00:23:39,760 --> 00:23:43,630
sandbox mode so for example taking this

618
00:23:43,630 --> 00:23:45,040
piece of code that was from the crypto

619
00:23:45,040 --> 00:23:46,990
library if he would sort of try to build

620
00:23:46,990 --> 00:23:48,610
it in such an environment that the sort

621
00:23:48,610 --> 00:23:50,530
of stripped-down you just get arrows

622
00:23:50,530 --> 00:23:52,270
like be so your compiled compiler would

623
00:23:52,270 --> 00:23:54,520
first throw a like a warning saying like

624
00:23:54,520 --> 00:23:55,990
you know you're trying to call an open

625
00:23:55,990 --> 00:23:58,480
function and I don't know if the

626
00:23:58,480 --> 00:23:59,920
existence of any function under that

627
00:23:59,920 --> 00:24:02,110
name and later on it tries to link that

628
00:24:02,110 --> 00:24:03,700
program and your linker will fro default

629
00:24:03,700 --> 00:24:05,350
the error message is at the bottom

630
00:24:05,350 --> 00:24:07,330
saying that it can't actually combine

631
00:24:07,330 --> 00:24:08,860
all of the object files of your program

632
00:24:08,860 --> 00:24:11,860
into a program because there is no open

633
00:24:11,860 --> 00:24:15,580
function function present so in this

634
00:24:15,580 --> 00:24:17,050
case it's like really trivial to get

635
00:24:17,050 --> 00:24:18,550
this fixed if you'd see a piece of code

636
00:24:18,550 --> 00:24:20,290
that tries to do stuff like this you

637
00:24:20,290 --> 00:24:23,230
could just replace all of it by a simple

638
00:24:23,230 --> 00:24:25,390
call to function so I get random or arc

639
00:24:25,390 --> 00:24:26,710
foreign and buff depending on your

640
00:24:26,710 --> 00:24:28,450
operating system because these two

641
00:24:28,450 --> 00:24:30,190
functions they can be properly

642
00:24:30,190 --> 00:24:31,690
implemented in such a way that they work

643
00:24:31,690 --> 00:24:34,330
well with sandboxing so it's it's really

644
00:24:34,330 --> 00:24:37,060
about just detecting break just because

645
00:24:37,060 --> 00:24:40,600
of sandboxing as early as possible so

646
00:24:40,600 --> 00:24:44,380
what I did then is I after I was

647
00:24:44,380 --> 00:24:47,110
finished decorating the apartment open

648
00:24:47,110 --> 00:24:48,960
up my laptop started hacking again I

649
00:24:48,960 --> 00:24:51,910
went to the page of the boesak

650
00:24:51,910 --> 00:24:54,010
specification which you can just freely

651
00:24:54,010 --> 00:24:56,440
access under this really an annoying URL

652
00:24:56,440 --> 00:24:58,360
so I can't expect you to memorize the

653
00:24:58,360 --> 00:25:01,360
numbers at the end but you can just get

654
00:25:01,360 --> 00:25:02,980
this huge list of all of the functions

655
00:25:02,980 --> 00:25:04,570
that are part of the specification and

656
00:25:04,570 --> 00:25:06,130
it's like hundreds of functions and what

657
00:25:06,130 --> 00:25:07,300
I sort of started doing was sort of

658
00:25:07,300 --> 00:25:10,180
redacting it so just taking a list and

659
00:25:10,180 --> 00:25:11,530
removing everything off it that I

660
00:25:11,530 --> 00:25:14,170
thought was either sort of ancient craft

661
00:25:14,170 --> 00:25:16,300
that you shouldn't be using anyway or

662
00:25:16,300 --> 00:25:19,990
stuff that you should only make sense in

663
00:25:19,990 --> 00:25:20,710
an MA

664
00:25:20,710 --> 00:25:22,270
sandbox environment or stuff that only

665
00:25:22,270 --> 00:25:23,470
makes sense in this privileged

666
00:25:23,470 --> 00:25:26,559
environment and also added a couple of

667
00:25:26,559 --> 00:25:28,690
extensions on top things that Linux has

668
00:25:28,690 --> 00:25:30,789
and BSD has but it's not part of the

669
00:25:30,789 --> 00:25:32,620
Bozek specification - bit sad that

670
00:25:32,620 --> 00:25:34,480
that's the case because in my opinion

671
00:25:34,480 --> 00:25:36,159
that the Poe's expect could do a lot

672
00:25:36,159 --> 00:25:37,929
better job of sort of catching up with

673
00:25:37,929 --> 00:25:40,870
what's being used in practice and I

674
00:25:40,870 --> 00:25:42,549
ended up with this list that was sort of

675
00:25:42,549 --> 00:25:46,210
remarkably small so just to give a

676
00:25:46,210 --> 00:25:49,570
comparison Linux has about 300 system

677
00:25:49,570 --> 00:25:53,260
calls FreeBSD has a bit more I think 400

678
00:25:53,260 --> 00:25:57,279
around a ballpark and this environment

679
00:25:57,279 --> 00:25:59,679
that I sort of came up with with looking

680
00:25:59,679 --> 00:26:01,419
at this list would only give me sort of

681
00:26:01,419 --> 00:26:03,399
an an operating system that it would

682
00:26:03,399 --> 00:26:05,320
only have 60 system calls in them so

683
00:26:05,320 --> 00:26:07,840
that's that's tiny also the number of

684
00:26:07,840 --> 00:26:09,399
data structures that was being used was

685
00:26:09,399 --> 00:26:11,230
really compact so the programming

686
00:26:11,230 --> 00:26:13,120
interface for for this environment

687
00:26:13,120 --> 00:26:14,740
against the operating system was just

688
00:26:14,740 --> 00:26:18,039
tiny compared to normal UNIX flavors so

689
00:26:18,039 --> 00:26:20,140
what I thought then was if it's so tiny

690
00:26:20,140 --> 00:26:22,029
would it make sense to sort of come up

691
00:26:22,029 --> 00:26:26,580
with like a formal specification yeah

692
00:26:26,580 --> 00:26:29,529
so this is basically what cloud ABI is

693
00:26:29,529 --> 00:26:31,630
it's nothing more than a specification

694
00:26:31,630 --> 00:26:36,039
of a compact UNIX and it's stored in

695
00:26:36,039 --> 00:26:38,140
this nicely formatted text file

696
00:26:38,140 --> 00:26:40,360
Molly's wrote in all of nice code to to

697
00:26:40,360 --> 00:26:42,100
actually process that file and turn it

698
00:26:42,100 --> 00:26:44,169
into bindings so it allows you to create

699
00:26:44,169 --> 00:26:47,320
C header files system call tables and

700
00:26:47,320 --> 00:26:49,120
even documentation and those C had a

701
00:26:49,120 --> 00:26:51,039
file system called tables those are sort

702
00:26:51,039 --> 00:26:53,440
of copied into can be copied into source

703
00:26:53,440 --> 00:26:54,940
trees of operating systems to provide

704
00:26:54,940 --> 00:26:58,570
support so those bindings are really

705
00:26:58,570 --> 00:27:00,880
low-level you shouldn't be using them in

706
00:27:00,880 --> 00:27:02,049
practice this is really all sort of

707
00:27:02,049 --> 00:27:04,090
machine generated API so instead of

708
00:27:04,090 --> 00:27:05,380
calling printf for you to end up with

709
00:27:05,380 --> 00:27:09,730
snippets that look like this but it's it

710
00:27:09,730 --> 00:27:11,020
can be used as sort of a basis for

711
00:27:11,020 --> 00:27:14,110
building other things on top so if you

712
00:27:14,110 --> 00:27:16,600
want to build cloud ABI programs you can

713
00:27:16,600 --> 00:27:18,130
simply install those header files on

714
00:27:18,130 --> 00:27:20,049
your system and use a copy of clang

715
00:27:20,049 --> 00:27:22,419
should be a pretty recent one 3.8 or

716
00:27:22,419 --> 00:27:26,940
later and call that in the right way to

717
00:27:26,940 --> 00:27:29,289
target cloud ABI if you just make sure

718
00:27:29,289 --> 00:27:31,179
that you sim link it under the right

719
00:27:31,179 --> 00:27:32,919
names and invoke the compiler under that

720
00:27:32,919 --> 00:27:34,450
net frutos symlinks

721
00:27:34,450 --> 00:27:35,859
and clang is smart enough to figure out

722
00:27:35,859 --> 00:27:37,179
that it should be should be across

723
00:27:37,179 --> 00:27:42,220
compiler so what I've also been working

724
00:27:42,220 --> 00:27:44,559
on is AC library called cloud Lipsy I'm

725
00:27:44,559 --> 00:27:47,019
really bad at naming things and it's

726
00:27:47,019 --> 00:27:50,320
basically just a compact C library built

727
00:27:50,320 --> 00:27:52,149
on top of cloud ABI it implements all

728
00:27:52,149 --> 00:27:54,070
irrelevant stuff from POSIX and ISO C

729
00:27:54,070 --> 00:27:56,619
and compared to normal C libraries that

730
00:27:56,619 --> 00:27:58,989
sort of different instead of relying all

731
00:27:58,989 --> 00:28:01,299
of the the false order user share user

732
00:28:01,299 --> 00:28:02,379
shares own info

733
00:28:02,379 --> 00:28:04,899
it has also state the sets built-in so

734
00:28:04,899 --> 00:28:06,669
that means that it still works well in

735
00:28:06,669 --> 00:28:07,779
sandbox applications

736
00:28:07,779 --> 00:28:09,759
there's also a large testing coverage of

737
00:28:09,759 --> 00:28:12,580
more than 900 tests right now and it

738
00:28:12,580 --> 00:28:15,669
works fairly reliably so here's a list

739
00:28:15,669 --> 00:28:17,200
of software have already ported over to

740
00:28:17,200 --> 00:28:22,809
the cloud ABI looking at the time I had

741
00:28:22,809 --> 00:28:24,759
a couple of projects sort of like bold

742
00:28:24,759 --> 00:28:26,259
over there that I wanted to look in to

743
00:28:26,259 --> 00:28:28,869
sort of show the patches to see to see

744
00:28:28,869 --> 00:28:31,119
how those have reported over but I'll

745
00:28:31,119 --> 00:28:33,429
keep that as an exercise left to the

746
00:28:33,429 --> 00:28:36,309
reader so what's been ported over there

747
00:28:36,309 --> 00:28:38,739
is sort of huge variety of things so it

748
00:28:38,739 --> 00:28:41,019
ranges from crypto libraries already the

749
00:28:41,019 --> 00:28:42,580
start of some GUI libraries have been

750
00:28:42,580 --> 00:28:44,259
ported over you know free type for font

751
00:28:44,259 --> 00:28:46,059
rendering and Kiro for canvas rendering

752
00:28:46,059 --> 00:28:48,700
some some database related projects so

753
00:28:48,700 --> 00:28:51,700
level DB memcache D and I'm pretty

754
00:28:51,700 --> 00:28:53,350
excited about is that we've also ported

755
00:28:53,350 --> 00:28:55,749
over Python free recently so at the end

756
00:28:55,749 --> 00:28:58,179
of my talk you'll get a link to my blog

757
00:28:58,179 --> 00:28:59,679
and there's an article on there on how

758
00:28:59,679 --> 00:29:01,299
you can actually run a sandbox to copy

759
00:29:01,299 --> 00:29:04,119
of Python even in there we're also

760
00:29:04,119 --> 00:29:05,950
working on getting django ported over we

761
00:29:05,950 --> 00:29:07,389
can already run some really simple

762
00:29:07,389 --> 00:29:09,190
django based projects but there's still

763
00:29:09,190 --> 00:29:11,309
a lot of work that needs to be done to

764
00:29:11,309 --> 00:29:14,350
sort of make all of it work I think even

765
00:29:14,350 --> 00:29:16,509
templating is sort of still somewhat

766
00:29:16,509 --> 00:29:18,820
broken in there and need some more -

767
00:29:18,820 --> 00:29:22,779
gurus to to sort of get working so what

768
00:29:22,779 --> 00:29:24,190
we've done is all of that software has

769
00:29:24,190 --> 00:29:25,869
been ported over has also been sort of

770
00:29:25,869 --> 00:29:28,269
pre packaged so what we've done is we've

771
00:29:28,269 --> 00:29:30,070
created this repository of recipes of

772
00:29:30,070 --> 00:29:32,070
how software for cloudy guy can be built

773
00:29:32,070 --> 00:29:34,359
one of the things that I really dislike

774
00:29:34,359 --> 00:29:37,570
about packaged collections is that every

775
00:29:37,570 --> 00:29:39,220
packaged collection nowadays has its own

776
00:29:39,220 --> 00:29:41,379
package manager so if you're using

777
00:29:41,379 --> 00:29:43,179
Python then you have to call pip to

778
00:29:43,179 --> 00:29:44,529
upgrade all of the software that you've

779
00:29:44,529 --> 00:29:45,940
installed through that mechanism same

780
00:29:45,940 --> 00:29:47,740
with sipan's heat and

781
00:29:47,740 --> 00:29:50,050
cetera so what we're doing is we going

782
00:29:50,050 --> 00:29:51,309
in this different direction where we're

783
00:29:51,309 --> 00:29:52,720
actually generating packages for

784
00:29:52,720 --> 00:29:54,670
different operating systems so we're

785
00:29:54,670 --> 00:29:57,160
creating Debian packages rpms even

786
00:29:57,160 --> 00:29:59,410
packages for homebrew on Mac OS and you

787
00:29:59,410 --> 00:30:01,600
can install them by simply running sort

788
00:30:01,600 --> 00:30:02,860
of the native package manager on your

789
00:30:02,860 --> 00:30:04,720
system it's also really nice because the

790
00:30:04,720 --> 00:30:06,760
package names have the architecture in

791
00:30:06,760 --> 00:30:08,500
them you can install multiple copies of

792
00:30:08,500 --> 00:30:10,870
them for different architectures so if

793
00:30:10,870 --> 00:30:12,280
you were to cross compile software for

794
00:30:12,280 --> 00:30:14,890
say an arm it's really easy just install

795
00:30:14,890 --> 00:30:16,690
like the arm version of that package and

796
00:30:16,690 --> 00:30:19,420
you can compile compile directly on your

797
00:30:19,420 --> 00:30:21,760
macbook some piece of code for an

798
00:30:21,760 --> 00:30:23,290
embedded system which i think is like a

799
00:30:23,290 --> 00:30:24,630
huge plus

800
00:30:24,630 --> 00:30:26,890
running cloud ABI software there's a

801
00:30:26,890 --> 00:30:29,170
bunch of operating systems that support

802
00:30:29,170 --> 00:30:31,929
it by now or for which we provide ways

803
00:30:31,929 --> 00:30:34,120
of running it on there so freebie is the

804
00:30:34,120 --> 00:30:35,620
11 or later have all of the support

805
00:30:35,620 --> 00:30:39,940
integrated Linux net bsd we've patch had

806
00:30:39,940 --> 00:30:42,760
sets available for those as well there

807
00:30:42,760 --> 00:30:44,380
is also an emulator available that

808
00:30:44,380 --> 00:30:46,990
allows you to run cloud ABI programs on

809
00:30:46,990 --> 00:30:48,700
unpatched operating systems so this is

810
00:30:48,700 --> 00:30:50,620
what I'm using on my macbook I can't

811
00:30:50,620 --> 00:30:52,090
expect people here in the audience to

812
00:30:52,090 --> 00:30:54,280
recompile the kernel Sarah macbook so

813
00:30:54,280 --> 00:30:56,890
this there's a simple emulator out there

814
00:30:56,890 --> 00:30:58,600
that can at least be used to run cloud

815
00:30:58,600 --> 00:31:00,760
ABI software unfortunately it doesn't

816
00:31:00,760 --> 00:31:03,490
enforce any of the sandboxing under the

817
00:31:03,490 --> 00:31:06,040
hood so if you would write a piece of

818
00:31:06,040 --> 00:31:07,870
inline assembly in your code that sort

819
00:31:07,870 --> 00:31:09,610
of tries to call a Mac OS system called

820
00:31:09,610 --> 00:31:11,290
directly instead of going through the

821
00:31:11,290 --> 00:31:13,990
emulator you can bypass security but

822
00:31:13,990 --> 00:31:15,730
it's sort of good enough for you know

823
00:31:15,730 --> 00:31:17,679
testing software before you deploy it

824
00:31:17,679 --> 00:31:22,870
over to your Linux or BSD cluster so

825
00:31:22,870 --> 00:31:24,880
running cloud ABI software this is a

826
00:31:24,880 --> 00:31:27,190
very simple copy of LS that I've sort of

827
00:31:27,190 --> 00:31:29,860
added to the slide so instead of just

828
00:31:29,860 --> 00:31:32,559
reading the directory listing from a

829
00:31:32,559 --> 00:31:34,390
directory which you specify on a command

830
00:31:34,390 --> 00:31:36,580
line it simply assumes that a file

831
00:31:36,580 --> 00:31:38,620
descriptor in this case file descriptor

832
00:31:38,620 --> 00:31:40,600
0 corresponds to a directory and file

833
00:31:40,600 --> 00:31:41,770
descriptor 1 corresponds to your

834
00:31:41,770 --> 00:31:43,929
terminal so if you want to run this you

835
00:31:43,929 --> 00:31:45,490
end up doing this you end up building it

836
00:31:45,490 --> 00:31:48,280
and running it like this so it's a bit

837
00:31:48,280 --> 00:31:50,380
nasty sort of past fresh EDC over and

838
00:31:50,380 --> 00:31:52,750
standard in and voila you've got a copy

839
00:31:52,750 --> 00:31:54,700
of LS that can only access a directory

840
00:31:54,700 --> 00:31:56,500
and access your terminal that's it so

841
00:31:56,500 --> 00:32:01,350
this works but it doesn't really scale

842
00:32:01,350 --> 00:32:03,120
think of the following use case you've

843
00:32:03,120 --> 00:32:05,279
got a web server that can listen on ten

844
00:32:05,279 --> 00:32:07,650
IP addresses and has 40 different

845
00:32:07,650 --> 00:32:09,779
virtual hosts and for all of those you

846
00:32:09,779 --> 00:32:12,000
need one file descriptor passing this in

847
00:32:12,000 --> 00:32:13,289
on the command line doesn't make any

848
00:32:13,289 --> 00:32:16,039
sense or you know it's it's a mess

849
00:32:16,039 --> 00:32:20,220
so I've been working on an alternative

850
00:32:20,220 --> 00:32:23,299
for that called cloud ABI desh run and

851
00:32:23,299 --> 00:32:25,860
what you basically do is you you've just

852
00:32:25,860 --> 00:32:27,809
invoked it like this you say I want to

853
00:32:27,809 --> 00:32:29,640
run this executable and I want to

854
00:32:29,640 --> 00:32:31,590
provide it a configuration file of how

855
00:32:31,590 --> 00:32:33,299
it needs to be started and this

856
00:32:33,299 --> 00:32:34,770
configuration file sort of a replacement

857
00:32:34,770 --> 00:32:36,419
for command line arguments and it's sort

858
00:32:36,419 --> 00:32:38,460
of Yama like and where it differs from

859
00:32:38,460 --> 00:32:40,740
Yama or extends on yamo is that it's

860
00:32:40,740 --> 00:32:43,140
actually it has file descriptors as a

861
00:32:43,140 --> 00:32:47,760
native datatype so consider this simple

862
00:32:47,760 --> 00:32:49,230
web server for which you're writing a

863
00:32:49,230 --> 00:32:51,000
configuration file normally you'd write

864
00:32:51,000 --> 00:32:52,919
something down like this where you say

865
00:32:52,919 --> 00:32:54,270
it needs to listen on this IP address

866
00:32:54,270 --> 00:32:57,539
and each taxes these files on disk with

867
00:32:57,539 --> 00:32:59,549
cloud ABI run you sort of add

868
00:32:59,549 --> 00:33:01,289
annotations to them where you say like

869
00:33:01,289 --> 00:33:04,710
this is not a string of some kind of IP

870
00:33:04,710 --> 00:33:06,899
address this really needs to be a socket

871
00:33:06,899 --> 00:33:09,179
on which we want to listen and that's

872
00:33:09,179 --> 00:33:10,919
what you do with those exclamations tags

873
00:33:10,919 --> 00:33:12,120
that you see in there that sort of a

874
00:33:12,120 --> 00:33:13,649
standard feature of Yama where you can

875
00:33:13,649 --> 00:33:15,799
introduce typing information into the

876
00:33:15,799 --> 00:33:18,960
definitions so what happens is this file

877
00:33:18,960 --> 00:33:21,779
sort of gets parsed and gets converted

878
00:33:21,779 --> 00:33:24,659
by Claudia I run into this format namely

879
00:33:24,659 --> 00:33:26,730
where all of the files all the resources

880
00:33:26,730 --> 00:33:28,200
are replaced by file descriptor numbers

881
00:33:28,200 --> 00:33:29,880
and this is being passed on to the

882
00:33:29,880 --> 00:33:32,520
program there is also an API for

883
00:33:32,520 --> 00:33:36,179
accessing those files from within the

884
00:33:36,179 --> 00:33:37,799
program of course so instead of using

885
00:33:37,799 --> 00:33:40,440
the init main entry point you now use an

886
00:33:40,440 --> 00:33:42,029
alternative entry point called program

887
00:33:42,029 --> 00:33:43,890
main where you have some accessor

888
00:33:43,890 --> 00:33:45,690
functions for iterating over maps and

889
00:33:45,690 --> 00:33:48,870
dictionaries or sorry maps of sequences

890
00:33:48,870 --> 00:33:50,190
and you also have functions for

891
00:33:50,190 --> 00:33:52,020
accessing boolean's integers strings

892
00:33:52,020 --> 00:33:55,830
file scripters so what's the advantage

893
00:33:55,830 --> 00:33:58,799
of using cloudy ABI run you know of a

894
00:33:58,799 --> 00:34:00,390
unified configuration file format

895
00:34:00,390 --> 00:34:02,159
there's no need to write your own

896
00:34:02,159 --> 00:34:04,470
configuration file parsers programs tend

897
00:34:04,470 --> 00:34:06,059
to become smaller as a result of using

898
00:34:06,059 --> 00:34:09,690
this and there's also no way of actually

899
00:34:09,690 --> 00:34:11,369
accidentally leaking resources into a

900
00:34:11,369 --> 00:34:13,199
program what's really awesome about this

901
00:34:13,199 --> 00:34:14,760
mechanism is you can just

902
00:34:14,760 --> 00:34:15,870
as long as you make sure that you're not

903
00:34:15,870 --> 00:34:18,149
using any exclamation mark tags for

904
00:34:18,149 --> 00:34:19,168
things that you don't want to give away

905
00:34:19,168 --> 00:34:21,510
to a process you can run stuff that you

906
00:34:21,510 --> 00:34:24,000
don't even trust so you can sort of say

907
00:34:24,000 --> 00:34:26,130
like I'm providing in to fowl scripters

908
00:34:26,130 --> 00:34:28,649
one of my standard in on the terminal

909
00:34:28,649 --> 00:34:30,179
one of the standard out on the terminal

910
00:34:30,179 --> 00:34:32,159
as well and then the process can only

911
00:34:32,159 --> 00:34:33,418
read and write through a terminal and

912
00:34:33,418 --> 00:34:35,219
can't do anything else and that's sort

913
00:34:35,219 --> 00:34:36,899
of really ensured by using this utility

914
00:34:36,899 --> 00:34:38,880
that there's no accidental leakage of

915
00:34:38,880 --> 00:34:42,110
stuff another really cool thing of this

916
00:34:42,110 --> 00:34:44,340
mechanism is that it makes programs

917
00:34:44,340 --> 00:34:47,690
really easy to test so because you know

918
00:34:47,690 --> 00:34:50,940
what a program is going to access you

919
00:34:50,940 --> 00:34:53,969
also know that it can't actually

920
00:34:53,969 --> 00:34:55,830
interfere with your production setup for

921
00:34:55,830 --> 00:34:57,210
example so if you have a production and

922
00:34:57,210 --> 00:35:00,240
a staging setup you only need to sort of

923
00:35:00,240 --> 00:35:01,800
check the configuration file to make

924
00:35:01,800 --> 00:35:02,790
sure that you don't list file

925
00:35:02,790 --> 00:35:04,920
descriptors that correspond to servers

926
00:35:04,920 --> 00:35:07,260
or datasets belong to the production

927
00:35:07,260 --> 00:35:08,970
setup and now you can safely your run

928
00:35:08,970 --> 00:35:11,250
your process knowing that it won't

929
00:35:11,250 --> 00:35:14,820
interfere so what if I shown you so far

930
00:35:14,820 --> 00:35:17,160
in this presentation you know I've been

931
00:35:17,160 --> 00:35:18,900
talking about the cloud EBI project that

932
00:35:18,900 --> 00:35:20,430
I've been working on with a bunch of

933
00:35:20,430 --> 00:35:22,590
other people and it's a framework for

934
00:35:22,590 --> 00:35:24,450
building testable and secure programs

935
00:35:24,450 --> 00:35:26,010
and it consists of a couple of

936
00:35:26,010 --> 00:35:28,680
components namely the raw definitions of

937
00:35:28,680 --> 00:35:30,840
the ABI the C library that's built on

938
00:35:30,840 --> 00:35:33,240
top of that the package collection for

939
00:35:33,240 --> 00:35:36,720
prepackaged programs and the cloud ABI

940
00:35:36,720 --> 00:35:38,460
run utility that can be used to safely

941
00:35:38,460 --> 00:35:42,630
spawn those sandbox processes so now I

942
00:35:42,630 --> 00:35:45,200
want to close off this talk by sort of

943
00:35:45,200 --> 00:35:48,410
sketching a road map for the future so

944
00:35:48,410 --> 00:35:50,550
what is going to happen until the end of

945
00:35:50,550 --> 00:35:55,920
times 2048 so I've got some short-term

946
00:35:55,920 --> 00:35:57,450
goals I'm not saying that there are

947
00:35:57,450 --> 00:36:00,060
personal goals but these are goals for

948
00:36:00,060 --> 00:36:01,380
the project I think things that the

949
00:36:01,380 --> 00:36:03,540
project should explore so first of all

950
00:36:03,540 --> 00:36:04,980
we need support for more programming

951
00:36:04,980 --> 00:36:05,670
languages

952
00:36:05,670 --> 00:36:08,340
right now we have support for C C++

953
00:36:08,340 --> 00:36:10,800
Python and Lua

954
00:36:10,800 --> 00:36:13,560
I think so just for programming

955
00:36:13,560 --> 00:36:15,930
languages scripting languages but this

956
00:36:15,930 --> 00:36:18,120
needs to be more nowadays you see a lot

957
00:36:18,120 --> 00:36:20,220
of people writing software and go and in

958
00:36:20,220 --> 00:36:21,780
rust and all sorts of other modern

959
00:36:21,780 --> 00:36:25,080
languages we need to sort of be on board

960
00:36:25,080 --> 00:36:26,640
with that as well so we can actually

961
00:36:26,640 --> 00:36:28,130
welcome more people

962
00:36:28,130 --> 00:36:31,970
into the project also so far we've had a

963
00:36:31,970 --> 00:36:33,500
really strong focus on getting libraries

964
00:36:33,500 --> 00:36:36,260
to work you know as you saw in the

965
00:36:36,260 --> 00:36:38,300
previous slides there's a whole bunch of

966
00:36:38,300 --> 00:36:39,800
libraries saidif already mean packages

967
00:36:39,800 --> 00:36:41,630
but now sometimes actually get full

968
00:36:41,630 --> 00:36:43,610
programs to work we have all of the

969
00:36:43,610 --> 00:36:45,320
dependencies ported over and now we can

970
00:36:45,320 --> 00:36:46,730
actually start building full programs

971
00:36:46,730 --> 00:36:49,430
you know having a sandbox my sequel

972
00:36:49,430 --> 00:36:51,470
server where you're you can only sort of

973
00:36:51,470 --> 00:36:53,510
say like this is your data directory and

974
00:36:53,510 --> 00:36:54,680
this is your socket on which you're

975
00:36:54,680 --> 00:36:56,660
receiving incoming sequel queries that's

976
00:36:56,660 --> 00:36:59,630
pretty awesome same holds for nodejs if

977
00:36:59,630 --> 00:37:01,340
you want to run sandbox web applications

978
00:37:01,340 --> 00:37:04,790
of course linux support right now it's

979
00:37:04,790 --> 00:37:06,680
an external repository this needs to be

980
00:37:06,680 --> 00:37:09,560
integrated period or at least the things

981
00:37:09,560 --> 00:37:10,940
that we can get rid of need to be

982
00:37:10,940 --> 00:37:13,430
upstream into the official Linux kernel

983
00:37:13,430 --> 00:37:16,100
so in the end all of cloud EBI support

984
00:37:16,100 --> 00:37:17,510
is nothing more than a simple kernel

985
00:37:17,510 --> 00:37:19,520
module that you can load into a stock

986
00:37:19,520 --> 00:37:21,890
Linux kernel and of course there's

987
00:37:21,890 --> 00:37:23,270
always the need to improve the

988
00:37:23,270 --> 00:37:27,410
documentation always and I already have

989
00:37:27,410 --> 00:37:29,510
a couple of how-tos on like the cloud

990
00:37:29,510 --> 00:37:32,210
API blog but we really need to extend on

991
00:37:32,210 --> 00:37:33,440
that there needs to be good developer

992
00:37:33,440 --> 00:37:37,340
documentation as well long term goal for

993
00:37:37,340 --> 00:37:39,350
the project so a lot of people they sort

994
00:37:39,350 --> 00:37:41,180
of say to me like cloud API is the

995
00:37:41,180 --> 00:37:43,010
stupidest name I've ever heard it

996
00:37:43,010 --> 00:37:45,100
doesn't make any sense

997
00:37:45,100 --> 00:37:48,380
the reason for that is that I often also

998
00:37:48,380 --> 00:37:49,790
have to show this slide sort of

999
00:37:49,790 --> 00:37:52,700
explaining the sort of original mindset

1000
00:37:52,700 --> 00:37:55,940
I had for the project so cloudy API is a

1001
00:37:55,940 --> 00:37:57,260
way where you can do dependency

1002
00:37:57,260 --> 00:38:00,740
injection for UNIX programs and what

1003
00:38:00,740 --> 00:38:02,300
would happen if you could actually make

1004
00:38:02,300 --> 00:38:04,430
use of that as part of some kind of

1005
00:38:04,430 --> 00:38:06,410
cluster management system so say you

1006
00:38:06,410 --> 00:38:08,360
want to deploy a pipeline of database

1007
00:38:08,360 --> 00:38:11,000
servers web front-ends batch jobs all of

1008
00:38:11,000 --> 00:38:12,860
that stuff and you've made use of this

1009
00:38:12,860 --> 00:38:14,570
model there you could actually design

1010
00:38:14,570 --> 00:38:17,000
some pretty fancy stuff so first of all

1011
00:38:17,000 --> 00:38:19,490
you could build some kind of GUI where

1012
00:38:19,490 --> 00:38:20,870
you can drag and drop programs on a

1013
00:38:20,870 --> 00:38:22,370
canvas and hook them up fruit like

1014
00:38:22,370 --> 00:38:24,530
arrows say like this is a web front-end

1015
00:38:24,530 --> 00:38:25,970
it needs to talk to this database server

1016
00:38:25,970 --> 00:38:27,980
you could just click a play button and

1017
00:38:27,980 --> 00:38:29,420
it would automatically set it up it

1018
00:38:29,420 --> 00:38:30,950
would know how to sort of connect all of

1019
00:38:30,950 --> 00:38:33,080
those programs together you could also

1020
00:38:33,080 --> 00:38:34,730
even have like monitoring dashboards

1021
00:38:34,730 --> 00:38:37,730
based on this concept where you know the

1022
00:38:37,730 --> 00:38:39,200
cluster management system knows the

1023
00:38:39,200 --> 00:38:41,000
relationship between programs so we can

1024
00:38:41,000 --> 00:38:41,509
actually

1025
00:38:41,509 --> 00:38:44,329
if you accurate monitoring for that also

1026
00:38:44,329 --> 00:38:47,089
a very interesting aspect is that this

1027
00:38:47,089 --> 00:38:48,979
kind of mechanism could be used for like

1028
00:38:48,979 --> 00:38:50,809
setting up the connections between those

1029
00:38:50,809 --> 00:38:53,029
processes securely so if it knows that

1030
00:38:53,029 --> 00:38:55,069
it's going to start up to two processors

1031
00:38:55,069 --> 00:38:57,499
on the same server it doesn't even need

1032
00:38:57,499 --> 00:38:59,089
to care about cryptography because it's

1033
00:38:59,089 --> 00:39:00,979
already sort of secure nobody kind can

1034
00:39:00,979 --> 00:39:02,659
eavesdrop on those kinds of connections

1035
00:39:02,659 --> 00:39:05,209
but if it's starting those two processes

1036
00:39:05,209 --> 00:39:07,249
in different data centers then the

1037
00:39:07,249 --> 00:39:08,569
cluster management system could be

1038
00:39:08,569 --> 00:39:09,979
responsible for creating the keys

1039
00:39:09,979 --> 00:39:12,319
sending them over to the two servers

1040
00:39:12,319 --> 00:39:14,599
running the processes and the server

1041
00:39:14,599 --> 00:39:16,639
could then automatically set up a secure

1042
00:39:16,639 --> 00:39:18,259
channel between those two processes

1043
00:39:18,259 --> 00:39:23,989
which simplifies this kind of management

1044
00:39:23,989 --> 00:39:25,939
a lot I think using kubernetes a lot and

1045
00:39:25,939 --> 00:39:28,099
we have to spend quite a lot of time

1046
00:39:28,099 --> 00:39:29,659
getting all of the crypto and all of the

1047
00:39:29,659 --> 00:39:31,639
key exchange right and this could be

1048
00:39:31,639 --> 00:39:34,099
sort of solved automatically so my

1049
00:39:34,099 --> 00:39:35,719
long-term goal is maybe we could extend

1050
00:39:35,719 --> 00:39:37,880
sort of tools like cuban 8's to have

1051
00:39:37,880 --> 00:39:40,249
proper cloud api support and do this out

1052
00:39:40,249 --> 00:39:43,729
of the box so now I'm sort of at the

1053
00:39:43,729 --> 00:39:46,989
last one or two slides of my talk I

1054
00:39:46,989 --> 00:39:48,769
briefly want to talk about the

1055
00:39:48,769 --> 00:39:51,829
sustainability of this project I've been

1056
00:39:51,829 --> 00:39:53,419
working on this project for two years I

1057
00:39:53,419 --> 00:39:54,679
had the luck of being able to work on

1058
00:39:54,679 --> 00:39:57,849
this for for one full year

1059
00:39:58,269 --> 00:40:00,799
unfortunately because there is sort of

1060
00:40:00,799 --> 00:40:02,779
no full-time headcount on this project

1061
00:40:02,779 --> 00:40:05,059
anymore the things that have sort of

1062
00:40:05,059 --> 00:40:06,859
shown on the previous slide are actually

1063
00:40:06,859 --> 00:40:10,479
sort of infeasible at this moment and

1064
00:40:10,479 --> 00:40:12,769
that's why I sort of you know this is

1065
00:40:12,769 --> 00:40:14,119
sort of like a call for help to the

1066
00:40:14,119 --> 00:40:15,589
audience if you think that this is a

1067
00:40:15,589 --> 00:40:18,109
cool project you know at least start

1068
00:40:18,109 --> 00:40:20,839
using it you know try exploring it see

1069
00:40:20,839 --> 00:40:22,969
whether it works for you you'll quickly

1070
00:40:22,969 --> 00:40:25,369
run into bugs hopefully send pull

1071
00:40:25,369 --> 00:40:27,079
requests and you know it would be

1072
00:40:27,079 --> 00:40:29,869
awesome if like but the cloudy API team

1073
00:40:29,869 --> 00:40:31,249
can grow because I think it's a really

1074
00:40:31,249 --> 00:40:34,359
valuable project you know in my opinion

1075
00:40:34,359 --> 00:40:36,409
that allows you to build secure

1076
00:40:36,409 --> 00:40:38,809
applications just easily compared to

1077
00:40:38,809 --> 00:40:40,339
toll of the existing frameworks out

1078
00:40:40,339 --> 00:40:44,989
there so please give it a try I wanna

1079
00:40:44,989 --> 00:40:46,130
give my special thanks to a couple of

1080
00:40:46,130 --> 00:40:47,899
people some of them are sitting in the

1081
00:40:47,899 --> 00:40:49,909
audience good friends of mine have been

1082
00:40:49,909 --> 00:40:52,819
sort of either pestering me with bug

1083
00:40:52,819 --> 00:40:54,890
reports or just giving me

1084
00:40:54,890 --> 00:40:58,400
mental support or cat ogia our cats

1085
00:40:58,400 --> 00:41:00,440
walking on my keyboard all day long

1086
00:41:00,440 --> 00:41:02,510
wrecking my code I want to thank two

1087
00:41:02,510 --> 00:41:04,280
people at Kuna Bay Bay who've also been

1088
00:41:04,280 --> 00:41:06,200
supporting me over last half year and

1089
00:41:06,200 --> 00:41:07,460
I've allowed to sort of work on this

1090
00:41:07,460 --> 00:41:10,640
part time so this concludes my talk

1091
00:41:10,640 --> 00:41:12,950
here's a couple of links be sure to

1092
00:41:12,950 --> 00:41:16,750
check them out are there any questions

1093
00:41:22,900 --> 00:41:25,160
so thank you for doing this because it's

1094
00:41:25,160 --> 00:41:26,360
really important that we finally got a

1095
00:41:26,360 --> 00:41:29,750
secure Linux open source and free

1096
00:41:29,750 --> 00:41:32,600
software kernel and my question is first

1097
00:41:32,600 --> 00:41:34,880
of all the the problems that you noted

1098
00:41:34,880 --> 00:41:37,130
we're all more or less to do with the

1099
00:41:37,130 --> 00:41:39,770
the VFS and use basically say you don't

1100
00:41:39,770 --> 00:41:42,410
have a root VFS you can't do open why

1101
00:41:42,410 --> 00:41:44,300
don't you do something like a CX root

1102
00:41:44,300 --> 00:41:47,119
and then bind in the appropriate global

1103
00:41:47,119 --> 00:41:51,980
state that is benign and my second

1104
00:41:51,980 --> 00:41:53,510
question is is that you talk about the

1105
00:41:53,510 --> 00:41:56,750
save issue with Firefox why don't you

1106
00:41:56,750 --> 00:42:00,230
have something like a power box or have

1107
00:42:00,230 --> 00:42:01,490
you thought about how to do a power box

1108
00:42:01,490 --> 00:42:06,320
so so to answer your your your first

1109
00:42:06,320 --> 00:42:08,480
question which was why didn't you sort

1110
00:42:08,480 --> 00:42:10,640
of ever way of organizing the filesystem

1111
00:42:10,640 --> 00:42:14,300
layout so what I've noticed is that this

1112
00:42:14,300 --> 00:42:15,710
is basically also the mindset that

1113
00:42:15,710 --> 00:42:17,450
operating systems like plan nine have

1114
00:42:17,450 --> 00:42:20,780
been using you know get give have proper

1115
00:42:20,780 --> 00:42:22,910
api swear processes can sort of create

1116
00:42:22,910 --> 00:42:24,260
layouts of their own file system

1117
00:42:24,260 --> 00:42:26,420
namespaces everything is done in the

1118
00:42:26,420 --> 00:42:29,630
falsest namespace but my observation is

1119
00:42:29,630 --> 00:42:31,460
is that it sort of quickly gets messy

1120
00:42:31,460 --> 00:42:35,720
and bloating because so in the case of a

1121
00:42:35,720 --> 00:42:38,270
file system what you can do is you can

1122
00:42:38,270 --> 00:42:40,250
sort of pass it on to new processes to

1123
00:42:40,250 --> 00:42:42,980
child processes to help or processes but

1124
00:42:42,980 --> 00:42:44,240
what you'll see in practice is that

1125
00:42:44,240 --> 00:42:45,980
nobody will borrow to sort of clean

1126
00:42:45,980 --> 00:42:48,500
those up so then you sort of end up in a

1127
00:42:48,500 --> 00:42:50,030
state where you have like a bunch of

1128
00:42:50,030 --> 00:42:51,980
sort of privileged separated processes

1129
00:42:51,980 --> 00:42:54,260
but in the end I still make use of this

1130
00:42:54,260 --> 00:42:56,150
bloaty file system namespace where

1131
00:42:56,150 --> 00:42:57,410
there's a lot of stuff in there that

1132
00:42:57,410 --> 00:42:59,619
processors don't need to access so

1133
00:42:59,619 --> 00:43:02,090
basically how this differs from from

1134
00:43:02,090 --> 00:43:03,920
what you proposed how cloudy API differs

1135
00:43:03,920 --> 00:43:05,750
is that it's a false Krypton namespace

1136
00:43:05,750 --> 00:43:08,990
it's a flat namespace and my hope is

1137
00:43:08,990 --> 00:43:11,390
compared to using a false or like a tree

1138
00:43:11,390 --> 00:43:15,350
based namespace is that this will not

1139
00:43:15,350 --> 00:43:17,090
leak as quickly you know the people are

1140
00:43:17,090 --> 00:43:20,570
a bit more thoughtful about this well

1141
00:43:20,570 --> 00:43:22,760
maybe it's a bit overly often optimistic

1142
00:43:22,760 --> 00:43:23,990
but we'll see

1143
00:43:23,990 --> 00:43:26,210
to answer your your second question so

1144
00:43:26,210 --> 00:43:28,100
like the example I gave with the browser

1145
00:43:28,100 --> 00:43:32,119
I mean it's it's just like a simple

1146
00:43:32,119 --> 00:43:33,240
example

1147
00:43:33,240 --> 00:43:35,340
that could like be substituted for any

1148
00:43:35,340 --> 00:43:37,590
different application so for example

1149
00:43:37,590 --> 00:43:39,480
your text editor has the same issue of

1150
00:43:39,480 --> 00:43:41,910
course when you're running vim it can

1151
00:43:41,910 --> 00:43:43,260
also access a lot of things in the

1152
00:43:43,260 --> 00:43:44,670
meantime that shouldn't be accessible

1153
00:43:44,670 --> 00:43:47,670
and yeah that could be solved by making

1154
00:43:47,670 --> 00:43:49,530
use of different sort of helper tools

1155
00:43:49,530 --> 00:43:51,480
but the nice thing about this approach

1156
00:43:51,480 --> 00:43:53,670
is that it actually enforces the use of

1157
00:43:53,670 --> 00:43:55,619
a mechanism like that you know it's not

1158
00:43:55,619 --> 00:43:58,350
about just that I've got like a whole

1159
00:43:58,350 --> 00:44:00,030
solution for that in place already set

1160
00:44:00,030 --> 00:44:01,800
up but the idea beyond cloud API is to

1161
00:44:01,800 --> 00:44:03,000
come up with my environment that sort of

1162
00:44:03,000 --> 00:44:05,700
forces people to design applications in

1163
00:44:05,700 --> 00:44:07,520
this sort of privileged separated way

1164
00:44:07,520 --> 00:44:10,350
that's sort of you know trying to solve

1165
00:44:10,350 --> 00:44:12,030
it at the root and not at the top that's

1166
00:44:12,030 --> 00:44:13,890
that's what the cloudy API project is

1167
00:44:13,890 --> 00:44:16,520
about did it answer your questions or

1168
00:44:16,520 --> 00:44:20,150
any other questions

1169
00:44:24,109 --> 00:44:29,930
Oh God are you aware of e and so they

1170
00:44:29,930 --> 00:44:32,180
have a mechanism called vats and that

1171
00:44:32,180 --> 00:44:33,440
more or less does exactly what you're

1172
00:44:33,440 --> 00:44:34,519
talking about with respect to

1173
00:44:34,519 --> 00:44:36,289
automatically creating secure channels

1174
00:44:36,289 --> 00:44:39,859
between between multiple computers over

1175
00:44:39,859 --> 00:44:42,999
the network and doing consistency things

1176
00:44:42,999 --> 00:44:46,459
so I'm not aware of that project

1177
00:44:46,459 --> 00:44:47,930
specifically well what's the name of

1178
00:44:47,930 --> 00:44:51,229
that again II just to let her eat that's

1179
00:44:51,229 --> 00:44:56,259
it okay oh look into that damn man

1180
00:44:58,289 --> 00:45:00,880
if you look for a mark millar and a then

1181
00:45:00,880 --> 00:45:04,499
you'll find it ah thanks

1182
00:45:13,260 --> 00:45:15,300
well then if nobody else has questions

1183
00:45:15,300 --> 00:45:17,070
and thanks for attending my talk later

1184
00:45:17,070 --> 00:45:18,810
today there's going to be a talk in a

1185
00:45:18,810 --> 00:45:20,790
BSD DEP room where I sort of go into

1186
00:45:20,790 --> 00:45:22,590
more details on the kernel side of how

1187
00:45:22,590 --> 00:45:25,740
all of this works well I guess not all

1188
00:45:25,740 --> 00:45:27,060
of you should be showing up because the

1189
00:45:27,060 --> 00:45:31,070
room is a lot smaller than than this one

1190
00:45:37,610 --> 00:45:44,850
all right thanks that's for you thanks

1191
00:45:44,850 --> 00:45:47,960
in China

1192
00:46:02,980 --> 00:46:06,540
yeah so the charger was mine

1193
00:46:12,869 --> 00:46:15,220
yeah so I'm going to discuss how it

1194
00:46:15,220 --> 00:46:22,230
works because the point is I

1195
00:46:25,030 --> 00:46:28,380
because I wasn't sure I would

1196
00:47:37,010 --> 00:47:40,849
so I guess I should

1197
00:48:24,610 --> 00:48:27,600
I got everything

1198
00:48:39,690 --> 00:48:44,970
so fun

