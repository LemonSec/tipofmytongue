1
00:00:04,660 --> 00:00:07,480
okay so welcome to my talk my name is

2
00:00:07,480 --> 00:00:10,150
useless and I'm gonna talk a little bit

3
00:00:10,150 --> 00:00:12,880
about virtualization from the hot

4
00:00:12,880 --> 00:00:17,490
perspective and let me just quickly

5
00:00:17,490 --> 00:00:21,160
introduce the heart to you because I

6
00:00:21,160 --> 00:00:23,860
believe a lot of people just know the

7
00:00:23,860 --> 00:00:26,230
stupid jokes about it never being done

8
00:00:26,230 --> 00:00:30,730
and released and first of all what is he

9
00:00:30,730 --> 00:00:33,600
heart the heart is a general-purpose

10
00:00:33,600 --> 00:00:36,430
multi server microkernel based operating

11
00:00:36,430 --> 00:00:41,560
system and the GNU project intended it

12
00:00:41,560 --> 00:00:44,230
to be a replacement for the UNIX kernel

13
00:00:44,230 --> 00:00:48,600
and as we all know that didn't happen

14
00:00:48,600 --> 00:00:52,120
but I think there are still a lot of

15
00:00:52,120 --> 00:00:55,300
value in the heart because first and

16
00:00:55,300 --> 00:00:57,840
foremost it exists and this is highly

17
00:00:57,840 --> 00:01:02,650
compatible so we built on the GNU C

18
00:01:02,650 --> 00:01:07,090
library and we have a fat C library so

19
00:01:07,090 --> 00:01:09,700
most applications just need to be

20
00:01:09,700 --> 00:01:12,189
recompiled of course there are bugs and

21
00:01:12,189 --> 00:01:15,729
cracks and stuff like that but it's

22
00:01:15,729 --> 00:01:17,399
highly compatible

23
00:01:17,399 --> 00:01:21,280
also you got Debian new heart so you can

24
00:01:21,280 --> 00:01:25,030
install it like debian gnu/linux and you

25
00:01:25,030 --> 00:01:30,789
will feel at home I promise it is also a

26
00:01:30,789 --> 00:01:33,189
great place to contribute to learn

27
00:01:33,189 --> 00:01:36,340
system programming's and maybe to learn

28
00:01:36,340 --> 00:01:38,439
how to work in the project or in a glue

29
00:01:38,439 --> 00:01:43,329
project and I think the most important

30
00:01:43,329 --> 00:01:47,139
thing for me was that it freed my mind

31
00:01:47,139 --> 00:01:51,579
from a really narrow perspective of what

32
00:01:51,579 --> 00:01:54,729
an operating system is and can do for me

33
00:01:54,729 --> 00:01:58,270
and for users and really the heart is

34
00:01:58,270 --> 00:02:03,609
about the first freedom the ability to

35
00:02:03,609 --> 00:02:07,479
run a program as the user wishes and it

36
00:02:07,479 --> 00:02:12,790
gives me freedom for example from my if

37
00:02:12,790 --> 00:02:15,820
I work at a on a system that I don't

38
00:02:15,820 --> 00:02:16,420
control

39
00:02:16,420 --> 00:02:18,640
I'm an unprivileged user

40
00:02:18,640 --> 00:02:21,760
I still want to do crazy stuff on the

41
00:02:21,760 --> 00:02:25,210
machine or even if I if it's my own

42
00:02:25,210 --> 00:02:29,230
machine you know I want to run any

43
00:02:29,230 --> 00:02:32,560
program in the environment that I want

44
00:02:32,560 --> 00:02:36,880
and I control to a greater extent then

45
00:02:36,880 --> 00:02:43,180
it is possible on on Linux say hmm so

46
00:02:43,180 --> 00:02:45,070
what about virtualization it's

47
00:02:45,070 --> 00:02:48,790
everywhere that's that's that's clear

48
00:02:48,790 --> 00:02:50,740
and people do it for different reasons

49
00:02:50,740 --> 00:02:53,709
so maybe they do it for development or

50
00:02:53,709 --> 00:02:57,280
for you know the can't the cloudy stuff

51
00:02:57,280 --> 00:03:01,510
is about maintenance mostly and some

52
00:03:01,510 --> 00:03:02,800
people do it for security

53
00:03:02,800 --> 00:03:05,170
whatever the reason virtualization is

54
00:03:05,170 --> 00:03:09,700
everywhere and there are different kinds

55
00:03:09,700 --> 00:03:13,959
of virtualization so you might have a

56
00:03:13,959 --> 00:03:16,989
whole system emulation of virtualization

57
00:03:16,989 --> 00:03:22,180
like box or qmo or you might want to

58
00:03:22,180 --> 00:03:24,610
virtualize just a tiny part of the

59
00:03:24,610 --> 00:03:28,080
system so it differs in grain grain

60
00:03:28,080 --> 00:03:30,910
granularity right

61
00:03:30,910 --> 00:03:34,020
[Music]

62
00:03:35,940 --> 00:03:40,950
and second Tuesday in 2012 I was here

63
00:03:40,950 --> 00:03:43,860
and I watch the talk from this Italian

64
00:03:43,860 --> 00:03:46,890
professor answered Diwali if I

65
00:03:46,890 --> 00:03:50,850
mispronounce his name I'm sorry and he

66
00:03:50,850 --> 00:03:53,730
came up or he provided a very general

67
00:03:53,730 --> 00:03:56,040
definition of what virtualization is and

68
00:03:56,040 --> 00:03:58,530
he said it's the ability to interpose

69
00:03:58,530 --> 00:04:04,400
any resource and I like that but I would

70
00:04:04,400 --> 00:04:06,270
say it a bit differently

71
00:04:06,270 --> 00:04:09,420
I want to shape the execution

72
00:04:09,420 --> 00:04:12,990
environment of my my programs in any way

73
00:04:12,990 --> 00:04:13,400
I like

74
00:04:13,400 --> 00:04:16,320
this is the point for me the important

75
00:04:16,320 --> 00:04:23,240
point so we do have a coarse-grained

76
00:04:23,240 --> 00:04:25,500
virtualization mechanism in hurt and

77
00:04:25,500 --> 00:04:29,610
it's sub hurts and it's it's a bit about

78
00:04:29,610 --> 00:04:34,230
like I don't know zones or containers or

79
00:04:34,230 --> 00:04:37,770
lxg and what it does it gives you

80
00:04:37,770 --> 00:04:43,770
another well another view of the system

81
00:04:43,770 --> 00:04:48,380
ended you replace the whole system and

82
00:04:48,380 --> 00:04:50,850
it's tricky actually to do this on

83
00:04:50,850 --> 00:04:53,010
monolithic systems because they are you

84
00:04:53,010 --> 00:04:56,220
have everything or every year resource

85
00:04:56,220 --> 00:04:58,830
implemented in the kernel and if you

86
00:04:58,830 --> 00:05:01,110
want to do some similar containers you

87
00:05:01,110 --> 00:05:03,690
have to introduce namespaces in the

88
00:05:03,690 --> 00:05:07,020
kernel and the Linux community has been

89
00:05:07,020 --> 00:05:10,230
doing that for like a decade now and I'm

90
00:05:10,230 --> 00:05:12,510
not even sure they they finished and

91
00:05:12,510 --> 00:05:15,720
even even if they did the security of

92
00:05:15,720 --> 00:05:18,690
this system always depends on the

93
00:05:18,690 --> 00:05:21,270
implementation if there is a bug well

94
00:05:21,270 --> 00:05:24,180
you break out of of the namespaces I

95
00:05:24,180 --> 00:05:29,340
don't know environment the nice thing is

96
00:05:29,340 --> 00:05:32,280
that it's kind of trivial on multi

97
00:05:32,280 --> 00:05:34,710
server operating systems because you

98
00:05:34,710 --> 00:05:36,919
just have to start another set of

99
00:05:36,919 --> 00:05:39,630
processes that implement all the

100
00:05:39,630 --> 00:05:44,100
resources so this is how it looks like

101
00:05:44,100 --> 00:05:46,810
to start this up hurt

102
00:05:46,810 --> 00:05:50,360
you do we have this program called boot

103
00:05:50,360 --> 00:05:53,660
and you give it a device or it could

104
00:05:53,660 --> 00:05:57,230
even be a file and this file contains of

105
00:05:57,230 --> 00:06:00,380
this block device contains an X 2 image

106
00:06:00,380 --> 00:06:06,170
for example and then boot mimics what

107
00:06:06,170 --> 00:06:10,370
grew up and marked us when starting a

108
00:06:10,370 --> 00:06:13,700
real hard system so it loads the initial

109
00:06:13,700 --> 00:06:18,980
service and it executes this weird

110
00:06:18,980 --> 00:06:21,670
scripting language called boot script

111
00:06:21,670 --> 00:06:26,920
and you can see this here so we load the

112
00:06:26,920 --> 00:06:31,280
file system server and the pass is apply

113
00:06:31,280 --> 00:06:35,840
the root device to it this is this is

114
00:06:35,840 --> 00:06:37,550
the thing that's different on real

115
00:06:37,550 --> 00:06:41,780
health and then we load the XXL wha that

116
00:06:41,780 --> 00:06:47,260
execute processes and then the whole

117
00:06:47,260 --> 00:06:54,260
server bootstrap just starts and what

118
00:06:54,260 --> 00:06:59,020
you see here is a screenshot of starting

119
00:06:59,020 --> 00:07:01,670
debian new health system that I

120
00:07:01,670 --> 00:07:05,840
installed using Deb bootstrap and I just

121
00:07:05,840 --> 00:07:09,130
tweaked it a tiny bit that's basically

122
00:07:09,130 --> 00:07:12,290
the the hurt system runs unmodified

123
00:07:12,290 --> 00:07:15,230
inside and it's just the debian bits

124
00:07:15,230 --> 00:07:18,380
that don't quite cope with the subhodh

125
00:07:18,380 --> 00:07:20,990
environment but it works to a large

126
00:07:20,990 --> 00:07:30,980
extent so how does it actually work well

127
00:07:30,980 --> 00:07:33,440
we just start another set of servers

128
00:07:33,440 --> 00:07:36,380
like the proxy server that implements

129
00:07:36,380 --> 00:07:38,810
processes and the filesystem service and

130
00:07:38,810 --> 00:07:42,260
the XXL was it's a completely separate

131
00:07:42,260 --> 00:07:49,370
set and it actually virtualizes very few

132
00:07:49,370 --> 00:07:53,360
things most kernel objects like tasks

133
00:07:53,360 --> 00:07:54,550
and

134
00:07:54,550 --> 00:07:57,520
I don't know memory management has just

135
00:07:57,520 --> 00:08:05,229
used SS up to hurt online which we

136
00:08:05,229 --> 00:08:09,639
released in December last year we had to

137
00:08:09,639 --> 00:08:13,750
run SAP hearts from privileged user

138
00:08:13,750 --> 00:08:20,199
that's rude basically and under this

139
00:08:20,199 --> 00:08:22,680
model here at realized resources were

140
00:08:22,680 --> 00:08:25,960
weakened solely so that you could see

141
00:08:25,960 --> 00:08:28,870
and type stuff and the root device and

142
00:08:28,870 --> 00:08:33,789
the time device and - for the mock

143
00:08:33,789 --> 00:08:37,419
device setup you you have this this

144
00:08:37,419 --> 00:08:40,659
device master port that you used to look

145
00:08:40,659 --> 00:08:45,640
up devices so that was virtualized so an

146
00:08:45,640 --> 00:08:49,600
online we introduced unproved

147
00:08:49,600 --> 00:08:54,550
unprivileged Chophouse and it was

148
00:08:54,550 --> 00:08:57,250
actually not that much to do so the only

149
00:08:57,250 --> 00:09:00,940
thing that was needed is to get tasks

150
00:09:00,940 --> 00:09:05,920
ports for the newly created tasks tasks

151
00:09:05,920 --> 00:09:10,529
are Demark equal equivalent of processes

152
00:09:10,529 --> 00:09:14,500
so what was needed is a way to hand

153
00:09:14,500 --> 00:09:18,160
tasks ports to the unprivileged boot

154
00:09:18,160 --> 00:09:22,200
process and we added that and you know

155
00:09:22,200 --> 00:09:26,709
we know through mechanism called task

156
00:09:26,709 --> 00:09:30,959
modifications and we added another

157
00:09:30,959 --> 00:09:35,470
privilege kernel port stop that we don't

158
00:09:35,470 --> 00:09:37,120
have because we are running and probably

159
00:09:37,120 --> 00:09:43,589
unprivileged and yeah stuff like that

160
00:09:43,589 --> 00:09:47,320
it's actually not a big change and the

161
00:09:47,320 --> 00:09:50,200
nice thing about this boot program is

162
00:09:50,200 --> 00:09:55,690
that's it's tiny it's like 2,600 lines

163
00:09:55,690 --> 00:09:57,970
of code which is for a C program not

164
00:09:57,970 --> 00:10:00,370
that big and it actually contains a lot

165
00:10:00,370 --> 00:10:03,370
of stop functions and this weird boot

166
00:10:03,370 --> 00:10:06,040
script puzzle thing so it's quite simple

167
00:10:06,040 --> 00:10:07,440
to do

168
00:10:07,440 --> 00:10:09,720
coarse-grained virtualization on a

169
00:10:09,720 --> 00:10:12,600
microkernel multi server based operating

170
00:10:12,600 --> 00:10:18,810
system but that's actually not the the

171
00:10:18,810 --> 00:10:25,889
interesting thing for me because I want

172
00:10:25,889 --> 00:10:30,439
to do fine grained virtualization and

173
00:10:30,439 --> 00:10:33,389
one central design aspect of the hurt is

174
00:10:33,389 --> 00:10:36,240
that every service is looked up through

175
00:10:36,240 --> 00:10:42,060
the virtual file system so you have the

176
00:10:42,060 --> 00:10:46,379
/dev directory containing all the what

177
00:10:46,379 --> 00:10:50,430
UNIX called device nodes and in the

178
00:10:50,430 --> 00:10:53,129
heart it's its nodes and they are

179
00:10:53,129 --> 00:10:56,629
connected to service so we've got

180
00:10:56,629 --> 00:11:02,129
death-knell and stuff zero the block

181
00:11:02,129 --> 00:11:05,850
devices and then we have this set of

182
00:11:05,850 --> 00:11:09,810
hurt service under slash service like we

183
00:11:09,810 --> 00:11:12,720
crash server if a process dies it talks

184
00:11:12,720 --> 00:11:14,550
to the crash server and creates a core

185
00:11:14,550 --> 00:11:17,430
dump or whatever and we have to start

186
00:11:17,430 --> 00:11:19,529
observe all that manages the system

187
00:11:19,529 --> 00:11:23,699
startup and we also got these server

188
00:11:23,699 --> 00:11:26,009
socket directory and it contains our

189
00:11:26,009 --> 00:11:33,269
network stack or network servers and we

190
00:11:33,269 --> 00:11:36,389
don't have a central configuration on

191
00:11:36,389 --> 00:11:39,180
how to how this should looks but what we

192
00:11:39,180 --> 00:11:43,829
do is that every node in our file system

193
00:11:43,829 --> 00:11:49,230
can contain a translator record which is

194
00:11:49,230 --> 00:11:57,620
basically a command line and on access

195
00:11:57,620 --> 00:12:00,509
heard servers born this is a bit like

196
00:12:00,509 --> 00:12:03,959
socket activation but more general and

197
00:12:03,959 --> 00:12:07,230
in a distributed way and done in the 90s

198
00:12:07,230 --> 00:12:13,920
so the Linux Forks a bit late and as an

199
00:12:13,920 --> 00:12:17,130
example this is how our network stack

200
00:12:17,130 --> 00:12:19,110
looks like

201
00:12:19,110 --> 00:12:22,980
and so trance is a program that can

202
00:12:22,980 --> 00:12:25,500
probably the translator records and we

203
00:12:25,500 --> 00:12:30,269
have this d/deaf net dde which is Linux

204
00:12:30,269 --> 00:12:34,070
device drivers running in user space and

205
00:12:34,070 --> 00:12:38,310
then we have a a simple program a deaf

206
00:12:38,310 --> 00:12:43,560
node for the a vennett device and it

207
00:12:43,560 --> 00:12:47,160
looks up the of annette device through

208
00:12:47,160 --> 00:12:51,690
the net ID driver stack and then on top

209
00:12:51,690 --> 00:12:56,940
I lay out the Evan at multiplexer which

210
00:12:56,940 --> 00:13:00,510
is an ever net bridge and it is

211
00:13:00,510 --> 00:13:03,149
connected to the primary event a device

212
00:13:03,149 --> 00:13:07,980
and then finally on top of all that we

213
00:13:07,980 --> 00:13:15,480
have the Linux tcp/ip stack and it sits

214
00:13:15,480 --> 00:13:18,390
on this note and it talks to one of the

215
00:13:18,390 --> 00:13:20,730
nodes provided by the event at

216
00:13:20,730 --> 00:13:25,670
multiplexer so this is our network stack

217
00:13:29,770 --> 00:13:35,120
so the heart uses a terminology we have

218
00:13:35,120 --> 00:13:38,120
a thing called translators and what is

219
00:13:38,120 --> 00:13:41,360
the translator a translator is a server

220
00:13:41,360 --> 00:13:46,120
and it exposes a certain interface and

221
00:13:46,120 --> 00:13:48,920
why is it called a translator

222
00:13:48,920 --> 00:13:51,110
it's called the translator because it

223
00:13:51,110 --> 00:13:53,480
translates between you know one domain

224
00:13:53,480 --> 00:13:57,110
and the set of virtual file system

225
00:13:57,110 --> 00:14:02,840
operations and maybe more so the virtual

226
00:14:02,840 --> 00:14:07,250
file system operations described in the

227
00:14:07,250 --> 00:14:10,400
file hard filesystem definitions this is

228
00:14:10,400 --> 00:14:14,690
our our file system protocol the heart

229
00:14:14,690 --> 00:14:16,640
is a set of protocols and we have a

230
00:14:16,640 --> 00:14:19,720
reference implementation so this is the

231
00:14:19,720 --> 00:14:24,470
filesystem protocol and there are

232
00:14:24,470 --> 00:14:27,620
operations like they'll look up and you

233
00:14:27,620 --> 00:14:29,930
give it a note in the path and the set

234
00:14:29,930 --> 00:14:32,420
of flags and maybe a mode if you want to

235
00:14:32,420 --> 00:14:35,620
create a file and you get another note

236
00:14:35,620 --> 00:14:41,570
and sometimes you want to extend this to

237
00:14:41,570 --> 00:14:45,200
allow for more operations because a bit

238
00:14:45,200 --> 00:14:48,350
like the plan 9 we say everything is a

239
00:14:48,350 --> 00:14:51,170
file and then we don't want to

240
00:14:51,170 --> 00:14:54,020
communicate byte streams on top of this

241
00:14:54,020 --> 00:14:56,360
file system interface but we have

242
00:14:56,360 --> 00:14:58,790
structured data being passed around and

243
00:14:58,790 --> 00:15:03,460
we have RPC definitions - and we get

244
00:15:03,460 --> 00:15:06,410
clients tops and sour stops created for

245
00:15:06,410 --> 00:15:09,230
it this is how it looks like if we trace

246
00:15:09,230 --> 00:15:11,930
the program we do step on et Cie

247
00:15:11,930 --> 00:15:15,350
hostname and what we see as we sent a

248
00:15:15,350 --> 00:15:19,400
dear lookup message to this this is the

249
00:15:19,400 --> 00:15:22,010
path and did flex and de mode and so and

250
00:15:22,010 --> 00:15:25,670
we get back another port port as a

251
00:15:25,670 --> 00:15:29,380
reference to a capability

252
00:15:34,650 --> 00:15:39,420
and as I said the design aspect is that

253
00:15:39,420 --> 00:15:41,580
the virtual file system is used for

254
00:15:41,580 --> 00:15:44,280
server lookups and almost every server

255
00:15:44,280 --> 00:15:46,410
in the heart is accessible using the

256
00:15:46,410 --> 00:15:52,440
virtual file system and for me there is

257
00:15:52,440 --> 00:15:53,160
a set of

258
00:15:53,160 --> 00:15:57,590
under-appreciated family of translators

259
00:15:57,590 --> 00:16:00,450
and it's the family of translators that

260
00:16:00,450 --> 00:16:04,470
just modify the map from the virtual

261
00:16:04,470 --> 00:16:07,130
file system to the virtual file system

262
00:16:07,130 --> 00:16:10,410
using that kind of translator we can

263
00:16:10,410 --> 00:16:14,220
modify the view one process has on on

264
00:16:14,220 --> 00:16:20,520
the system as a whole so every process

265
00:16:20,520 --> 00:16:24,660
has a working directory and a root

266
00:16:24,660 --> 00:16:28,080
directory similar to how it's

267
00:16:28,080 --> 00:16:32,790
implemented on other unix's and we can

268
00:16:32,790 --> 00:16:37,260
manipulate the root directory using set

269
00:16:37,260 --> 00:16:40,650
trans change wood it's not change food

270
00:16:40,650 --> 00:16:45,030
in the UNIX sense but it allows us to

271
00:16:45,030 --> 00:16:50,670
start a process with with the new root

272
00:16:50,670 --> 00:16:54,450
directory and we can provide a server

273
00:16:54,450 --> 00:16:59,090
that provides this root directory to the

274
00:16:59,090 --> 00:17:02,990
to the service this is how it looks like

275
00:17:02,990 --> 00:17:07,980
so we do set runs change good we want to

276
00:17:07,980 --> 00:17:13,440
execute this command and we want the

277
00:17:13,440 --> 00:17:16,560
root directory to be provided by the

278
00:17:16,560 --> 00:17:20,839
remap translator and we want to remap

279
00:17:20,839 --> 00:17:24,450
etc' hostname and we want to substitute

280
00:17:24,450 --> 00:17:28,339
it with my hostname some other file and

281
00:17:28,339 --> 00:17:31,530
then this program is run and you see not

282
00:17:31,530 --> 00:17:35,280
the host name but my file so I

283
00:17:35,280 --> 00:17:41,190
successfully exchanged global

284
00:17:41,190 --> 00:17:44,460
configuration file in the UNIX way with

285
00:17:44,460 --> 00:17:47,730
my own file and I strongly believe that

286
00:17:47,730 --> 00:17:48,540
this

287
00:17:48,540 --> 00:17:51,000
something that I as a user of a computer

288
00:17:51,000 --> 00:17:55,740
should be allowed to do and because

289
00:17:55,740 --> 00:17:59,040
every server in the hood is accessible

290
00:17:59,040 --> 00:18:02,670
through the virtual file system using

291
00:18:02,670 --> 00:18:06,570
this very simple technique we can for

292
00:18:06,570 --> 00:18:09,900
example replace the server socket tool

293
00:18:09,900 --> 00:18:15,180
which is the in the network translator

294
00:18:15,180 --> 00:18:19,860
for the internet family with my own

295
00:18:19,860 --> 00:18:24,050
server and start some program using it

296
00:18:24,050 --> 00:18:29,600
this way if my tcp/ip stack uses a VPN I

297
00:18:29,600 --> 00:18:33,390
get all of the network traffic routed

298
00:18:33,390 --> 00:18:35,570
through my weekend and this is on a

299
00:18:35,570 --> 00:18:40,940
process base so this is a very powerful

300
00:18:40,940 --> 00:18:49,980
way of doing virtualization so I played

301
00:18:49,980 --> 00:18:52,290
around with this idea and I came up with

302
00:18:52,290 --> 00:18:56,210
the simplest possible translator and

303
00:18:56,210 --> 00:18:59,570
it's the it is the identity translator

304
00:18:59,570 --> 00:19:02,880
it proxies or requests but it doesn't

305
00:19:02,880 --> 00:19:08,430
alter them in any way and if it is used

306
00:19:08,430 --> 00:19:10,710
like a traditional translator in the

307
00:19:10,710 --> 00:19:17,700
hood you can actually mount file systems

308
00:19:17,700 --> 00:19:21,170
or stuff like that by attaching

309
00:19:21,170 --> 00:19:24,750
translators to some node and if we do

310
00:19:24,750 --> 00:19:29,160
this with the identity translator so I'm

311
00:19:29,160 --> 00:19:33,780
attaching to the node mount the identity

312
00:19:33,780 --> 00:19:37,560
translator and I feed it some directory

313
00:19:37,560 --> 00:19:40,980
as the underlying node which is a bad

314
00:19:40,980 --> 00:19:44,610
name for I would call it the input of

315
00:19:44,610 --> 00:19:49,650
the function and now it behaves a bit

316
00:19:49,650 --> 00:19:53,280
like it sibling so I just see the

317
00:19:53,280 --> 00:19:56,400
content of the directory but there is a

318
00:19:56,400 --> 00:20:00,830
very important difference because if I

319
00:20:00,830 --> 00:20:04,490
do an LS on

320
00:20:05,070 --> 00:20:08,190
what is happening is that the the

321
00:20:08,190 --> 00:20:09,960
identity translator does the lookup for

322
00:20:09,960 --> 00:20:13,580
me so the lookup is executed with the

323
00:20:13,580 --> 00:20:18,360
privileges of the identity translator

324
00:20:18,360 --> 00:20:21,540
which is kind of a problem but it's okay

325
00:20:21,540 --> 00:20:24,390
if I'm the one who is actually starting

326
00:20:24,390 --> 00:20:27,240
the identity translator this is one of

327
00:20:27,240 --> 00:20:29,630
the open problems how this kind of

328
00:20:29,630 --> 00:20:32,910
server interacts with the heart

329
00:20:32,910 --> 00:20:35,760
authentication model but I think it's

330
00:20:35,760 --> 00:20:41,160
okay for personal translators and I can

331
00:20:41,160 --> 00:20:43,560
carry the what translators attached the

332
00:20:43,560 --> 00:20:45,720
note using this function and it says

333
00:20:45,720 --> 00:20:50,850
it's the identity translator and if I

334
00:20:50,850 --> 00:20:56,970
use it with the change hood command it

335
00:20:56,970 --> 00:21:00,900
actually implements change would the the

336
00:21:00,900 --> 00:21:05,190
UNIX change good and we have the change

337
00:21:05,190 --> 00:21:06,870
good on the heart and it's implemented

338
00:21:06,870 --> 00:21:08,580
in the file systems all of us and it's a

339
00:21:08,580 --> 00:21:10,500
bit like a hack and this is a nice way

340
00:21:10,500 --> 00:21:12,600
to implement a change route because I

341
00:21:12,600 --> 00:21:15,780
have an external server that provides a

342
00:21:15,780 --> 00:21:21,840
way a view on the unsung resources and I

343
00:21:21,840 --> 00:21:25,980
just start micro my program like LS or

344
00:21:25,980 --> 00:21:28,800
shell or Firefox or whatever using this

345
00:21:28,800 --> 00:21:33,720
as the root directory and it doesn't

346
00:21:33,720 --> 00:21:36,150
actually stop there because now we can

347
00:21:36,150 --> 00:21:40,590
go crazy and we can implement and TPG

348
00:21:40,590 --> 00:21:43,200
translator and by the way these are

349
00:21:43,200 --> 00:21:45,210
actually implemented they are kind of

350
00:21:45,210 --> 00:21:48,360
prototypes but it works as I show it

351
00:21:48,360 --> 00:21:58,050
here and I have this this translator her

352
00:21:58,050 --> 00:22:01,290
Gigi and as a wrapper around it because

353
00:22:01,290 --> 00:22:04,110
it's cumbersome to use such reference

354
00:22:04,110 --> 00:22:06,990
change words to set it up but now I can

355
00:22:06,990 --> 00:22:10,760
just do verify and this starts the the

356
00:22:10,760 --> 00:22:14,799
PGP translator and I do

357
00:22:14,799 --> 00:22:20,629
go fetch this archive over FTP from the

358
00:22:20,629 --> 00:22:24,679
new archive and when it does that it

359
00:22:24,679 --> 00:22:27,019
actually goes ahead and verify his

360
00:22:27,019 --> 00:22:30,730
signature that is distributed with this

361
00:22:30,730 --> 00:22:34,100
table all and only if the verification

362
00:22:34,100 --> 00:22:38,320
succeeds it allows me to open that file

363
00:22:38,320 --> 00:22:41,539
likewise it allows me to encrypt a

364
00:22:41,539 --> 00:22:42,649
tarball

365
00:22:42,649 --> 00:22:45,710
so I say encrypt for some address and

366
00:22:45,710 --> 00:22:49,730
then create a table wall and it actually

367
00:22:49,730 --> 00:22:52,730
creates an encrypted table all so this

368
00:22:52,730 --> 00:22:57,309
is stuff that you can do

369
00:23:01,510 --> 00:23:05,290
finally yeah I believe that virtual

370
00:23:05,290 --> 00:23:09,070
machines or virtualization technology

371
00:23:09,070 --> 00:23:13,780
like VMware or box or stuff like that

372
00:23:13,780 --> 00:23:19,620
is popular because it's easy to explain

373
00:23:19,620 --> 00:23:23,080
if I fire up a virtual machine and it's

374
00:23:23,080 --> 00:23:25,720
just like a physical machine this is a

375
00:23:25,720 --> 00:23:36,820
good picture for the mind and it's not I

376
00:23:36,820 --> 00:23:38,950
think it's very important to explain the

377
00:23:38,950 --> 00:23:41,679
operating system to the users because

378
00:23:41,679 --> 00:23:45,250
it's important if we want to empower a

379
00:23:45,250 --> 00:23:49,809
user we need to explain the system to

380
00:23:49,809 --> 00:23:52,000
the user how it is composed and this

381
00:23:52,000 --> 00:23:54,280
gets even more tricky if we start with

382
00:23:54,280 --> 00:23:56,770
the distributed system like the heart

383
00:23:56,770 --> 00:24:00,730
and I have a prototype for that that I

384
00:24:00,730 --> 00:24:08,530
wanted demo and there are two aspects to

385
00:24:08,530 --> 00:24:11,980
it the first aspect is explaining how

386
00:24:11,980 --> 00:24:14,320
the system looked like at a global level

387
00:24:14,320 --> 00:24:17,470
and the second is how to explain the

388
00:24:17,470 --> 00:24:24,809
relation between tasks okay wish me luck

389
00:24:27,840 --> 00:24:31,139
let's see

390
00:24:34,350 --> 00:24:46,930
so nice huh this is actually a tree and

391
00:24:46,930 --> 00:24:50,500
this is the root of the tree and then we

392
00:24:50,500 --> 00:24:54,400
have slash death and it looks a bit like

393
00:24:54,400 --> 00:24:56,530
a snowflake it contains all the device

394
00:24:56,530 --> 00:25:00,430
notes and then we have slash run which

395
00:25:00,430 --> 00:25:05,650
is a temporary file system and if I

396
00:25:05,650 --> 00:25:07,630
mouse over it it shows me some

397
00:25:07,630 --> 00:25:10,870
additional information about this and we

398
00:25:10,870 --> 00:25:14,590
can see here our slash service and we

399
00:25:14,590 --> 00:25:21,880
have sockets and here up here as my

400
00:25:21,880 --> 00:25:27,640
tcp/ip stack and the first try to do

401
00:25:27,640 --> 00:25:32,530
this with with generating static static

402
00:25:32,530 --> 00:25:35,110
images using graphics but this

403
00:25:35,110 --> 00:25:37,450
completely failed because you get huge

404
00:25:37,450 --> 00:25:40,060
images that are hard to comprehend and

405
00:25:40,060 --> 00:25:45,100
how to display so I opted for for an

406
00:25:45,100 --> 00:25:47,920
interactive exploration tool and this

407
00:25:47,920 --> 00:25:53,470
this is my prototype and the other thing

408
00:25:53,470 --> 00:25:57,850
that you can do with it and need to

409
00:25:57,850 --> 00:26:00,419
restart it

410
00:26:06,570 --> 00:26:12,650
Oh awesome

411
00:26:12,650 --> 00:26:21,030
ok so this is my process this is he

412
00:26:21,030 --> 00:26:25,050
heard that UI and it's actually

413
00:26:25,050 --> 00:26:28,640
connected to other tasks now you know

414
00:26:28,640 --> 00:26:31,890
the proxy about that implements the

415
00:26:31,890 --> 00:26:35,580
process the the concept of a process of

416
00:26:35,580 --> 00:26:38,940
a positive process and for some reason

417
00:26:38,940 --> 00:26:41,910
it has a connection Oh what you are

418
00:26:41,910 --> 00:26:45,270
seeing is a directed graph and we you

419
00:26:45,270 --> 00:26:53,160
see an etch if if this process has a

420
00:26:53,160 --> 00:26:56,850
port or handler to an object implemented

421
00:26:56,850 --> 00:27:00,630
by the server so this edge says for some

422
00:27:00,630 --> 00:27:03,120
reason I don't know the process opened

423
00:27:03,120 --> 00:27:05,280
deafer and 'm or the few random I don't

424
00:27:05,280 --> 00:27:11,430
know and so this is the proc server this

425
00:27:11,430 --> 00:27:15,270
is the tcp/ip stack the local network

426
00:27:15,270 --> 00:27:17,700
stack this is a root filesystem

427
00:27:17,700 --> 00:27:21,090
this is the authentication server and we

428
00:27:21,090 --> 00:27:23,160
can actually start from there to explore

429
00:27:23,160 --> 00:27:27,600
explore the system for example this is C

430
00:27:27,600 --> 00:27:34,580
terminal oh and I can ask what other

431
00:27:34,580 --> 00:27:37,880
processes have open the terminal by

432
00:27:37,880 --> 00:27:43,230
double-clicking on this and I see that

433
00:27:43,230 --> 00:27:45,720
there's my shell that also has a part of

434
00:27:45,720 --> 00:27:49,500
the terminal and sudo because I started

435
00:27:49,500 --> 00:27:51,450
the program with privileges because it

436
00:27:51,450 --> 00:27:53,700
has to be privileged to probe into all

437
00:27:53,700 --> 00:27:57,600
the other processes and we can ask you

438
00:27:57,600 --> 00:28:01,650
know what other kind of programs are

439
00:28:01,650 --> 00:28:05,110
using the tcp/ip stack

440
00:28:05,110 --> 00:28:14,170
a bunch often what the JavaScript world

441
00:28:14,170 --> 00:28:20,170
can do huh and we see actually here's

442
00:28:20,170 --> 00:28:23,920
the event at multiplexer and as I omit

443
00:28:23,920 --> 00:28:28,570
hope it works better with a bigger

444
00:28:28,570 --> 00:28:32,200
display we see it has a connection to

445
00:28:32,200 --> 00:28:35,799
the device driver which is to be

446
00:28:35,799 --> 00:28:38,070
expected

447
00:28:51,330 --> 00:28:56,820
so to conclude from my point of view

448
00:28:56,820 --> 00:28:59,590
being able to manipulate the virtual

449
00:28:59,590 --> 00:29:02,980
file system is a way to do fine-grained

450
00:29:02,980 --> 00:29:05,919
virtualization on the hood and it's

451
00:29:05,919 --> 00:29:08,379
actually surprisingly easy and fun to do

452
00:29:08,379 --> 00:29:13,409
on a multi server operating system and

453
00:29:13,409 --> 00:29:15,580
if you're interested you should actually

454
00:29:15,580 --> 00:29:16,899
come talk to us

455
00:29:16,899 --> 00:29:20,490
join us do some fun stuff with it and

456
00:29:20,490 --> 00:29:24,039
you can imagine all kinds of servers

457
00:29:24,039 --> 00:29:28,090
that do similar things to this so maybe

458
00:29:28,090 --> 00:29:32,279
we can have a geeks translator because

459
00:29:32,279 --> 00:29:35,799
there are people working on porting the

460
00:29:35,799 --> 00:29:39,070
new geeks to the hurt or the other way

461
00:29:39,070 --> 00:29:43,330
around or both and mine elicits here and

462
00:29:43,330 --> 00:29:45,330
he's going to give a talk about that

463
00:29:45,330 --> 00:29:52,269
tomorrow I hope that's up-to-date and if

464
00:29:52,269 --> 00:29:55,299
you haven't already you should go ahead

465
00:29:55,299 --> 00:29:57,879
and watch the previous talk because the

466
00:29:57,879 --> 00:30:01,409
previous talk was about the same thing

467
00:30:01,409 --> 00:30:04,600
mostly but for the GNote operating

468
00:30:04,600 --> 00:30:07,840
system and it's interesting to see their

469
00:30:07,840 --> 00:30:09,999
perspective on this so if you're

470
00:30:09,999 --> 00:30:14,649
interested go ahead and watch it and if

471
00:30:14,649 --> 00:30:18,070
you want there are two fun papers both

472
00:30:18,070 --> 00:30:20,559
are called virtual machine monitors

473
00:30:20,559 --> 00:30:24,100
microkernels done right here on Argus

474
00:30:24,100 --> 00:30:28,779
Pro the other contra and it's a nice

475
00:30:28,779 --> 00:30:31,419
introduction to you know different ways

476
00:30:31,419 --> 00:30:38,169
on the on the world and that's it I'm

477
00:30:38,169 --> 00:30:40,889
happy to expect

478
00:31:02,020 --> 00:31:04,640
so the question is about the web server

479
00:31:04,640 --> 00:31:07,190
is actually running on the be hurt

480
00:31:07,190 --> 00:31:10,070
system this one by the way hurt is

481
00:31:10,070 --> 00:31:15,230
running on actually Harper not a new

482
00:31:15,230 --> 00:31:19,789
hardware but on hotter and it's actually

483
00:31:19,789 --> 00:31:21,440
gathering the information from the

484
00:31:21,440 --> 00:31:25,100
system it's we have this this thing

485
00:31:25,100 --> 00:31:26,960
called pot and foo which does the same

486
00:31:26,960 --> 00:31:57,529
thing but not with the you know Jason so

487
00:31:57,529 --> 00:32:01,700
the question was whether we can have the

488
00:32:01,700 --> 00:32:04,010
heart running across different machines

489
00:32:04,010 --> 00:32:07,309
on the neck and if it provides single

490
00:32:07,309 --> 00:32:10,940
system image kind of interface the

491
00:32:10,940 --> 00:32:14,330
answer is no Marc was designed to allow

492
00:32:14,330 --> 00:32:17,899
that but it was lost on never really

493
00:32:17,899 --> 00:32:20,240
implemented and I know there is a guy

494
00:32:20,240 --> 00:32:24,070
working on net message that is able to

495
00:32:24,070 --> 00:32:27,950
send Marc messages across the network

496
00:32:27,950 --> 00:32:30,409
and I hadn't tried it but apparently it

497
00:32:30,409 --> 00:32:33,890
it works to some degree I don't know so

498
00:32:33,890 --> 00:32:35,899
it's possible in theory but it's not our

499
00:32:35,899 --> 00:32:38,080
focus

500
00:32:40,430 --> 00:32:48,080
oh yeah I don't know too much about the

501
00:32:48,080 --> 00:32:48,830
eater

502
00:32:48,830 --> 00:32:51,890
but when SMTP is what gets into her

503
00:32:51,890 --> 00:32:56,900
eventually in the future somewhere what

504
00:32:56,900 --> 00:32:59,420
would the impact on Sun hurts babe

505
00:32:59,420 --> 00:33:02,750
in terms of privileges and I mean a

506
00:33:02,750 --> 00:33:10,970
submerge could right so the question is

507
00:33:10,970 --> 00:33:14,360
about SMP support and rather how it

508
00:33:14,360 --> 00:33:21,220
impacts supports so mark has been always

509
00:33:21,220 --> 00:33:24,830
SMP capable capable but currently our

510
00:33:24,830 --> 00:33:28,820
version of Mark only runs on 32-bit its

511
00:33:28,820 --> 00:33:32,480
Intel processors and we don't do SMP

512
00:33:32,480 --> 00:33:33,230
sorry

513
00:33:33,230 --> 00:33:36,560
and if he would that would be nice

514
00:33:36,560 --> 00:33:40,450
then again and the second part was about

515
00:33:40,450 --> 00:33:44,060
whether one support can hawk resources

516
00:33:44,060 --> 00:33:48,740
like the processes and accounting we

517
00:33:48,740 --> 00:33:50,540
don't do accounting and that's a huge

518
00:33:50,540 --> 00:33:53,660
problem and so we don't have a good

519
00:33:53,660 --> 00:33:59,660
answer for for denial of service attacks

520
00:33:59,660 --> 00:34:02,600
basically if you need that you should

521
00:34:02,600 --> 00:34:06,250
probably look at G note

522
00:34:08,889 --> 00:34:12,159
it's possible to implement that in mark

523
00:34:12,159 --> 00:34:14,690
everything is possible in theory but it

524
00:34:14,690 --> 00:34:18,320
would require a huge amount of work to

525
00:34:18,320 --> 00:34:42,800
bring mark up to speed so the question

526
00:34:42,800 --> 00:34:44,480
is whether we want to use hardware

527
00:34:44,480 --> 00:34:46,480
virtualization if you want to run a

528
00:34:46,480 --> 00:34:51,560
different operating system and sure if

529
00:34:51,560 --> 00:34:54,650
you want to do that we should part

530
00:34:54,650 --> 00:34:59,840
QA mo and stuff like that someone would

531
00:34:59,840 --> 00:35:02,720
have to do it I'm not that interested in

532
00:35:02,720 --> 00:35:22,820
that because I think this is more fun so

533
00:35:22,820 --> 00:35:25,190
the question was whether it's possible

534
00:35:25,190 --> 00:35:27,830
to implement that in the kernel or maybe

535
00:35:27,830 --> 00:35:31,340
also in user space a hypervisor I'm not

536
00:35:31,340 --> 00:35:33,680
sure we do device drivers in user space

537
00:35:33,680 --> 00:35:36,800
so maybe it's possible to implement some

538
00:35:36,800 --> 00:35:39,380
or most of that in your space - I don't

539
00:35:39,380 --> 00:35:41,470
know

540
00:35:45,560 --> 00:35:48,120
regarding the TrueType as a virtual

541
00:35:48,120 --> 00:35:50,220
machine more it was microphone is done

542
00:35:50,220 --> 00:35:51,270
right don't you think

543
00:35:51,270 --> 00:35:53,310
Taizo is in a better position because

544
00:35:53,310 --> 00:35:58,790
you can refer questions to his colleague

545
00:36:02,870 --> 00:36:05,760
so this was a snarky remark about the

546
00:36:05,760 --> 00:36:11,160
papers and the one author named hands so

547
00:36:11,160 --> 00:36:14,810
the other one can say talk to the hand

548
00:36:14,810 --> 00:36:17,450
lots of fun papers you should greet them

549
00:36:17,450 --> 00:36:24,270
it's about mostly balls N and the first

550
00:36:24,270 --> 00:36:27,450
paper argues that then is a better way

551
00:36:27,450 --> 00:36:30,810
to approach the problem because of this

552
00:36:30,810 --> 00:36:33,690
incentives and the other paper refutes

553
00:36:33,690 --> 00:36:37,730
this claims by interpreting these n

554
00:36:37,730 --> 00:36:40,950
architecture from a microkernel point of

555
00:36:40,950 --> 00:36:49,290
view and it's it's a fun read yeah the

556
00:36:49,290 --> 00:36:53,280
first one and this is from the scent

557
00:36:53,280 --> 00:36:56,220
Zen people and it's pro and the other

558
00:36:56,220 --> 00:37:00,470
one was written later and it spawned huh

559
00:37:06,810 --> 00:37:13,240
all right any more questions I guess not

560
00:37:13,240 --> 00:37:14,570
no thank you

561
00:37:14,570 --> 00:37:21,749
[Applause]

