1
00:00:00,000 --> 00:00:02,060
Oh

2
00:00:05,250 --> 00:00:10,719
okay hey hey I'm Chris I switch

3
00:00:10,719 --> 00:00:14,530
companies I work for Twitter now and I'm

4
00:00:14,530 --> 00:00:16,180
still doing kind of the same stuff as I

5
00:00:16,180 --> 00:00:18,250
did at Oracle so I'm still working on

6
00:00:18,250 --> 00:00:19,810
compilers and I'm actually surprised

7
00:00:19,810 --> 00:00:21,360
that there are so many people here today

8
00:00:21,360 --> 00:00:23,500
usually the room is empty when I talk

9
00:00:23,500 --> 00:00:28,060
about compilers so we're trying draw the

10
00:00:28,060 --> 00:00:30,910
Twitter you know I say experience in a

11
00:00:30,910 --> 00:00:33,730
production environment that means we are

12
00:00:33,730 --> 00:00:35,829
not running it really in production but

13
00:00:35,829 --> 00:00:39,850
we tried it and I'll show a bunch of

14
00:00:39,850 --> 00:00:43,030
graphs later how that how that works out

15
00:00:43,030 --> 00:00:45,940
so I know you all of you have Twitter

16
00:00:45,940 --> 00:00:48,129
accounts so give a little love to pass

17
00:00:48,129 --> 00:00:51,659
them and maybe to our Twitter DM team

18
00:00:51,659 --> 00:00:57,069
you so a little bit about Twitter

19
00:00:57,069 --> 00:01:00,210
you all know Twitter to service this is

20
00:01:00,210 --> 00:01:02,440
how it looks like so it's a huge

21
00:01:02,440 --> 00:01:05,650
distributed system we have many many

22
00:01:05,650 --> 00:01:09,910
services we have to tweet the main tweet

23
00:01:09,910 --> 00:01:12,160
service which reads and writes tweets

24
00:01:12,160 --> 00:01:14,020
and then use the service time line

25
00:01:14,020 --> 00:01:15,280
service social graph service you know

26
00:01:15,280 --> 00:01:16,480
all that all the difference so these are

27
00:01:16,480 --> 00:01:19,810
the kind of the main ones and and the

28
00:01:19,810 --> 00:01:22,570
service it's many chains per service

29
00:01:22,570 --> 00:01:25,420
right we run tons and tons of them we

30
00:01:25,420 --> 00:01:27,220
have thousands of machines and when

31
00:01:27,220 --> 00:01:29,830
running in thousands of kvms and we have

32
00:01:29,830 --> 00:01:31,540
multiple data centers so there's there's

33
00:01:31,540 --> 00:01:36,700
a lot of stuff going on so if we can cut

34
00:01:36,700 --> 00:01:41,320
down with you know on maybe CPU time a

35
00:01:41,320 --> 00:01:46,600
memory usage this pays off a lot Twitter

36
00:01:46,600 --> 00:01:49,120
is doing open source so we love open

37
00:01:49,120 --> 00:01:52,990
source we're using many projects we also

38
00:01:52,990 --> 00:01:54,310
giving we're giving back to the

39
00:01:54,310 --> 00:01:56,560
community this is the link where you can

40
00:01:56,560 --> 00:01:59,290
find all the projects a lot of I think

41
00:01:59,290 --> 00:02:01,990
actually all of it is on github I might

42
00:02:01,990 --> 00:02:04,659
be wrong but so growl is a good fit for

43
00:02:04,659 --> 00:02:07,840
us in general and because it's open

44
00:02:07,840 --> 00:02:10,628
source and and we are we're planning if

45
00:02:10,628 --> 00:02:13,840
we you know if we find something that we

46
00:02:13,840 --> 00:02:15,730
can optimize we definitely contribute it

47
00:02:15,730 --> 00:02:17,390
back

48
00:02:17,390 --> 00:02:20,690
so Twitter internally we have our own

49
00:02:20,690 --> 00:02:23,630
cdks based on an open chat ek right now

50
00:02:23,630 --> 00:02:27,230
it update we're in the works of open

51
00:02:27,230 --> 00:02:28,370
sourcing our stuff

52
00:02:28,370 --> 00:02:32,330
the from what I've heard we've done over

53
00:02:32,330 --> 00:02:36,020
the last couple of years some GC

54
00:02:36,020 --> 00:02:37,880
optimizations but I think almost all of

55
00:02:37,880 --> 00:02:42,500
it is already upstream so I did this I

56
00:02:42,500 --> 00:02:46,790
backed toward a JVM ci to our own 8 jdk

57
00:02:46,790 --> 00:02:50,360
so that we can actually run growth we

58
00:02:50,360 --> 00:02:51,560
have something called contrail it's

59
00:02:51,560 --> 00:02:53,120
basically a GFI replaced and I'm not

60
00:02:53,120 --> 00:02:56,210
talking about this and CMS improvements

61
00:02:56,210 --> 00:02:58,340
but as I said what I've heard that's all

62
00:02:58,340 --> 00:02:59,990
upstream now

63
00:02:59,990 --> 00:03:03,440
so why Gras like I think every time I'm

64
00:03:03,440 --> 00:03:06,260
here I'm talking about this I've worked

65
00:03:06,260 --> 00:03:07,970
on C 2 for a very long time and it's

66
00:03:07,970 --> 00:03:10,490
very complicated and it's not really

67
00:03:10,490 --> 00:03:13,790
getting better there's there's work

68
00:03:13,790 --> 00:03:15,620
being done to clean it up a little bit

69
00:03:15,620 --> 00:03:17,900
but it but it's still the same old

70
00:03:17,900 --> 00:03:20,300
complex code it's it's the learning

71
00:03:20,300 --> 00:03:23,959
curve it's way way too steep well we've

72
00:03:23,959 --> 00:03:25,550
noticed that over the years when we

73
00:03:25,550 --> 00:03:26,810
hired new people it's like these people

74
00:03:26,810 --> 00:03:28,820
they need to learn for years and years

75
00:03:28,820 --> 00:03:35,420
until they can actually work on C 2 in

76
00:03:35,420 --> 00:03:36,530
my opinion there were no major

77
00:03:36,530 --> 00:03:37,910
optimizations in the last couple of

78
00:03:37,910 --> 00:03:40,070
years for C - most of the stuff that's

79
00:03:40,070 --> 00:03:44,150
done for C 2 is some intrinsic stuff but

80
00:03:44,150 --> 00:03:47,030
there was no new as Capon I was in the

81
00:03:47,030 --> 00:03:49,459
implementation or not really an

82
00:03:49,459 --> 00:03:51,620
improvement within lining and all that

83
00:03:51,620 --> 00:03:54,380
stuff there was a little bit but that's

84
00:03:54,380 --> 00:03:58,100
another topic and in my opinion it's

85
00:03:58,100 --> 00:03:59,989
reached at the end of life already a

86
00:03:59,989 --> 00:04:02,600
long time ago so grouse learning curve

87
00:04:02,600 --> 00:04:04,370
is much shorter for people who have

88
00:04:04,370 --> 00:04:08,780
looked at the code well away talked

89
00:04:08,780 --> 00:04:12,950
about it yes but it's compared to C - I

90
00:04:12,950 --> 00:04:16,010
think I think it's shorter you have you

91
00:04:16,010 --> 00:04:18,950
have the advantages of Java compared to

92
00:04:18,950 --> 00:04:23,960
the C++ version but hotspots using right

93
00:04:23,960 --> 00:04:25,850
it's kind of as you get you can't use

94
00:04:25,850 --> 00:04:28,670
any utility stuff and so

95
00:04:28,670 --> 00:04:30,920
and it's highly marginalized so this is

96
00:04:30,920 --> 00:04:33,290
like it's kind of old snapshot I don't

97
00:04:33,290 --> 00:04:34,700
know if it's still true but it has like

98
00:04:34,700 --> 00:04:39,470
83 worse in that area different modules

99
00:04:39,470 --> 00:04:42,140
that have there are no circle of

100
00:04:42,140 --> 00:04:44,000
dependencies the build system takes care

101
00:04:44,000 --> 00:04:45,620
of that and make sure you don't

102
00:04:45,620 --> 00:04:48,050
introduce circular dependencies and so

103
00:04:48,050 --> 00:04:51,560
everything's the you have you have

104
00:04:51,560 --> 00:04:53,660
platform independent modules and then

105
00:04:53,660 --> 00:04:55,850
you have platform dependent modules that

106
00:04:55,850 --> 00:04:57,260
implement stuff for your CPU

107
00:04:57,260 --> 00:05:01,390
architecture and so on its own okay so

108
00:05:01,390 --> 00:05:06,050
so we've ran we've ran growl at Twitter

109
00:05:06,050 --> 00:05:10,310
and and we found a few bugs so actually

110
00:05:10,310 --> 00:05:13,250
not that many we basically only found

111
00:05:13,250 --> 00:05:15,890
two I'm talking about three bucks here

112
00:05:15,890 --> 00:05:19,640
now just two - so - do you have an idea

113
00:05:19,640 --> 00:05:23,570
that the things we noticed this this one

114
00:05:23,570 --> 00:05:26,330
I think I actually noticed that one even

115
00:05:26,330 --> 00:05:28,970
before I started running stuff at

116
00:05:28,970 --> 00:05:32,090
Twitter it's basically growl does not

117
00:05:32,090 --> 00:05:34,990
support certain on site replacement

118
00:05:34,990 --> 00:05:39,830
compilations which turns out could be an

119
00:05:39,830 --> 00:05:41,840
issue so when you turn on print

120
00:05:41,840 --> 00:05:43,370
compilation it looks like something like

121
00:05:43,370 --> 00:05:45,650
this it says all I can't do a Noah's Ark

122
00:05:45,650 --> 00:05:52,070
with LOX and Tom Tom Rodriguez and I

123
00:05:52,070 --> 00:05:54,050
would discuss this a little bit then the

124
00:05:54,050 --> 00:05:57,440
way the cool brawl is currently set up

125
00:05:57,440 --> 00:05:59,480
in its tiered environment it's not

126
00:05:59,480 --> 00:06:01,160
really a problem because what happens

127
00:06:01,160 --> 00:06:04,190
you get those message message message a

128
00:06:04,190 --> 00:06:07,280
couple times I can't remember the number

129
00:06:07,280 --> 00:06:08,840
a hundred or a thousand I don't know and

130
00:06:08,840 --> 00:06:11,510
and then the tier compilation system

131
00:06:11,510 --> 00:06:13,040
says okay I'm not compiling this with

132
00:06:13,040 --> 00:06:15,140
tier 4 anymore so I just compile it with

133
00:06:15,140 --> 00:06:17,660
Tier one and it composite with C one and

134
00:06:17,660 --> 00:06:20,270
it's basically fine it could be an issue

135
00:06:20,270 --> 00:06:25,400
if it's a if it's a very performance

136
00:06:25,400 --> 00:06:27,470
sensitive method but I've not found the

137
00:06:27,470 --> 00:06:29,560
case where that's that's that's an issue

138
00:06:29,560 --> 00:06:35,120
so park 128 is still open so if someone

139
00:06:35,120 --> 00:06:37,970
wants to go and fix it please do it I

140
00:06:37,970 --> 00:06:40,490
don't have time right now to do that so

141
00:06:40,490 --> 00:06:41,680
this is

142
00:06:41,680 --> 00:06:44,050
this is a real bug that I found about

143
00:06:44,050 --> 00:06:47,169
running I think it was the tweet service

144
00:06:47,169 --> 00:06:51,729
actually the the thing you want to you

145
00:06:51,729 --> 00:06:54,310
know notice it's this one here it had to

146
00:06:54,310 --> 00:06:56,169
run for a couple days until it crashed

147
00:06:56,169 --> 00:07:00,280
but it cracked consistently so I I was

148
00:07:00,280 --> 00:07:02,199
trying to figure out what this is and

149
00:07:02,199 --> 00:07:04,930
then eventually I figured out that it's

150
00:07:04,930 --> 00:07:06,759
caught it's this thing called hipster

151
00:07:06,759 --> 00:07:10,840
that that we that we use to analyze the

152
00:07:10,840 --> 00:07:12,729
heap so it's basically a bytecode

153
00:07:12,729 --> 00:07:16,990
instrumentation thing oh yeah here it is

154
00:07:16,990 --> 00:07:18,759
well that's like that's a github page

155
00:07:18,759 --> 00:07:21,160
and provides an agent library to do heap

156
00:07:21,160 --> 00:07:22,660
profiling blah blah blah and so and so

157
00:07:22,660 --> 00:07:26,229
we use that and it turned out I'm not

158
00:07:26,229 --> 00:07:27,699
going into the details here because we

159
00:07:27,699 --> 00:07:29,680
don't have the time but this is this is

160
00:07:29,680 --> 00:07:32,440
as you know a snapshot of the discussion

161
00:07:32,440 --> 00:07:36,940
we had and on the github page it had to

162
00:07:36,940 --> 00:07:40,419
do with with intrinsic basically so

163
00:07:40,419 --> 00:07:43,389
there and the one that failed was the

164
00:07:43,389 --> 00:07:45,340
double value off because it's part of

165
00:07:45,340 --> 00:07:47,889
the core library and it's used by growl

166
00:07:47,889 --> 00:07:49,810
itself but there were then it got

167
00:07:49,810 --> 00:07:52,090
instrumented because it does a new

168
00:07:52,090 --> 00:07:54,280
object and so on so that was basically

169
00:07:54,280 --> 00:07:58,120
the issue this one was closed it was it

170
00:07:58,120 --> 00:08:00,220
was a rather big change as you can see

171
00:08:00,220 --> 00:08:01,840
though sixty-five files have to be

172
00:08:01,840 --> 00:08:06,150
touched but now it works

173
00:08:06,150 --> 00:08:12,250
this one was annoying too so I renamed

174
00:08:12,250 --> 00:08:13,900
it later when I figured out actually

175
00:08:13,900 --> 00:08:16,270
what it was but this one this is what

176
00:08:16,270 --> 00:08:19,690
happens we we saw this weird exceptions

177
00:08:19,690 --> 00:08:22,560
flying by tons and tons of exceptions

178
00:08:22,560 --> 00:08:26,699
and I couldn't figure out why and so

179
00:08:26,699 --> 00:08:29,409
some day I decided to run the nettie for

180
00:08:29,409 --> 00:08:32,349
test suite just someone told me uh some

181
00:08:32,349 --> 00:08:34,059
of our services have just upgraded from

182
00:08:34,059 --> 00:08:36,490
93 to 94 and I thought ok I'll run the

183
00:08:36,490 --> 00:08:39,039
test we why not and this is what

184
00:08:39,039 --> 00:08:44,039
happened in a buffer failure alright so

185
00:08:44,039 --> 00:08:46,810
this one is was a really really awkward

186
00:08:46,810 --> 00:08:49,770
one because reversed bytes didn't work

187
00:08:49,770 --> 00:08:52,750
and you would think if that doesn't work

188
00:08:52,750 --> 00:08:55,089
something else will break right but it

189
00:08:55,089 --> 00:08:55,490
didn't

190
00:08:55,490 --> 00:08:58,010
it never did it was if basically was

191
00:08:58,010 --> 00:09:00,410
wrong from day one but just in this

192
00:09:00,410 --> 00:09:04,640
particular case it did it been so tom

193
00:09:04,640 --> 00:09:10,910
fixed it rather small fix but and these

194
00:09:10,910 --> 00:09:12,800
were the only two real bugs that we

195
00:09:12,800 --> 00:09:15,459
found everything else just worked fine

196
00:09:15,459 --> 00:09:18,890
so and now I'm coming to I think the

197
00:09:18,890 --> 00:09:21,260
more important and interesting part a

198
00:09:21,260 --> 00:09:24,140
couple of performance graphs and stuff

199
00:09:24,140 --> 00:09:27,830
so it's I used the tweet service because

200
00:09:27,830 --> 00:09:29,089
it's it's our main service

201
00:09:29,089 --> 00:09:32,330
it's a finagle thrift service you can

202
00:09:32,330 --> 00:09:34,490
you can download thin they go from that

203
00:09:34,490 --> 00:09:39,320
page play around with it I have

204
00:09:39,320 --> 00:09:41,630
dedicated machines for these testings

205
00:09:41,630 --> 00:09:45,230
and all of the instances receive the

206
00:09:45,230 --> 00:09:48,830
exact same requests so not even the

207
00:09:48,830 --> 00:09:51,050
number of requests is the same it's the

208
00:09:51,050 --> 00:09:53,839
exact same request so they and it's it's

209
00:09:53,839 --> 00:09:55,610
it's read-only by the way so because

210
00:09:55,610 --> 00:09:57,110
because this isn't in a staging

211
00:09:57,110 --> 00:09:59,089
environment we kind of write tweets but

212
00:09:59,089 --> 00:10:01,370
we we read tweets and we read the same

213
00:10:01,370 --> 00:10:04,279
tools and I've ran this with the growl

214
00:10:04,279 --> 00:10:09,579
am 0.17 with the charioteer everything

215
00:10:09,579 --> 00:10:14,750
so this side is only to show you what

216
00:10:14,750 --> 00:10:17,450
the load looks like over this is all of

217
00:10:17,450 --> 00:10:19,339
the crafts are 24 hours it's it's one

218
00:10:19,339 --> 00:10:22,820
day and you there are two colors in here

219
00:10:22,820 --> 00:10:25,339
blue c2 and the orange one is growl and

220
00:10:25,339 --> 00:10:27,320
you can see okay it gets the same

221
00:10:27,320 --> 00:10:29,480
requests you know throughout throughout

222
00:10:29,480 --> 00:10:31,670
the day I picked this particular

223
00:10:31,670 --> 00:10:34,190
snapshot because you have pretty high

224
00:10:34,190 --> 00:10:36,500
loads but you have this plateau down

225
00:10:36,500 --> 00:10:38,899
here with low load I don't know why this

226
00:10:38,899 --> 00:10:40,370
happened and it doesn't really matter

227
00:10:40,370 --> 00:10:42,680
but it but it's a good example to see

228
00:10:42,680 --> 00:10:44,690
the difference between between high and

229
00:10:44,690 --> 00:10:50,180
low loads so most of the graphs that I'm

230
00:10:50,180 --> 00:10:54,730
showing they have a moving average

231
00:10:54,730 --> 00:10:56,930
because then it's easier to see what's

232
00:10:56,930 --> 00:10:58,730
happening so this one's using a moving

233
00:10:58,730 --> 00:11:01,940
average of 60 minutes and and these are

234
00:11:01,940 --> 00:11:04,699
the scavenge cycles that are happening I

235
00:11:04,699 --> 00:11:07,339
cannot yeah I should mention this I

236
00:11:07,339 --> 00:11:09,330
cannot show you the

237
00:11:09,330 --> 00:11:11,850
the the y-axis because now I'm not

238
00:11:11,850 --> 00:11:13,560
allowed to it's confidential information

239
00:11:13,560 --> 00:11:16,620
so I I have to basically tell you what

240
00:11:16,620 --> 00:11:18,839
the percentages are so here what we're

241
00:11:18,839 --> 00:11:22,709
seeing is between one and two percent

242
00:11:22,709 --> 00:11:25,560
less scavenge cycles with grow that's

243
00:11:25,560 --> 00:11:29,399
mainly because of the better escape

244
00:11:29,399 --> 00:11:33,240
analysis so you produce less garbage and

245
00:11:33,240 --> 00:11:36,029
so that means you have one to two

246
00:11:36,029 --> 00:11:40,589
percent less scavenge cycles this is the

247
00:11:40,589 --> 00:11:44,640
scavenge time this is again moving

248
00:11:44,640 --> 00:11:47,010
average ten minutes now and I think all

249
00:11:47,010 --> 00:11:48,420
that all the following slides are also

250
00:11:48,420 --> 00:11:53,670
moving average ten because so there

251
00:11:53,670 --> 00:11:56,360
there are two things to to say here

252
00:11:56,360 --> 00:12:00,690
because we have less scavenge cycles and

253
00:12:00,690 --> 00:12:02,820
the reason we have less scavenge cycles

254
00:12:02,820 --> 00:12:06,420
is we have less garbage in the young

255
00:12:06,420 --> 00:12:10,019
generations and and so it it takes a

256
00:12:10,019 --> 00:12:12,450
long time to fill it up but when it

257
00:12:12,450 --> 00:12:16,230
fills it up there's and and it hits

258
00:12:16,230 --> 00:12:18,600
basically the the threshold so it kicks

259
00:12:18,600 --> 00:12:21,209
off at you see you have less garbage in

260
00:12:21,209 --> 00:12:24,930
it more life objects and that means the

261
00:12:24,930 --> 00:12:28,740
collection then takes longer so this I

262
00:12:28,740 --> 00:12:31,140
think it's somewhere here it's like all

263
00:12:31,140 --> 00:12:34,649
over here that's a it's a maximum 30

264
00:12:34,649 --> 00:12:38,430
percent Morris scavenge time which is

265
00:12:38,430 --> 00:12:42,720
quite a lot but usually it's between 10

266
00:12:42,720 --> 00:12:45,149
and 20 percent still a lot compared to

267
00:12:45,149 --> 00:12:51,120
only one to two percent less cycles this

268
00:12:51,120 --> 00:12:54,779
is the old Chen we have one two three

269
00:12:54,779 --> 00:12:58,649
four cycles in the bay the interesting

270
00:12:58,649 --> 00:13:04,589
part here is this so the the old

271
00:13:04,589 --> 00:13:06,990
occupancy when you run crawl is is

272
00:13:06,990 --> 00:13:09,540
higher it's because growl is a Java

273
00:13:09,540 --> 00:13:13,170
program right it has state and so this

274
00:13:13,170 --> 00:13:15,390
is this is the the state of Java basic

275
00:13:15,390 --> 00:13:17,550
are the state of Gras and it's between

276
00:13:17,550 --> 00:13:20,029
[Music]

277
00:13:20,029 --> 00:13:23,280
1004 here I think that's 10 megabytes

278
00:13:23,280 --> 00:13:27,090
and 60 megabytes you have to account for

279
00:13:27,090 --> 00:13:28,860
that so there are there multiple ways to

280
00:13:28,860 --> 00:13:30,410
deal with that right now

281
00:13:30,410 --> 00:13:33,390
there is no real way to deal with it you

282
00:13:33,390 --> 00:13:36,000
can just increase your old chin size by

283
00:13:36,000 --> 00:13:38,220
60 megabytes and you're basically back

284
00:13:38,220 --> 00:13:42,660
to where you were but you did it it's

285
00:13:42,660 --> 00:13:44,880
important to notice that this is

286
00:13:44,880 --> 00:13:52,320
happening no they all generation in the

287
00:13:52,320 --> 00:13:59,370
heap Java heap oh not old

288
00:13:59,370 --> 00:14:03,450
so it's p99 late latencies for for tweet

289
00:14:03,450 --> 00:14:07,140
wreaths think again it's this this one's

290
00:14:07,140 --> 00:14:09,870
moving average of 10 minutes there's

291
00:14:09,870 --> 00:14:11,640
some awkward spikes in here at c2 I

292
00:14:11,640 --> 00:14:12,900
don't know you know it doesn't really

293
00:14:12,900 --> 00:14:16,080
matter but what do you see whatever my

294
00:14:16,080 --> 00:14:19,140
notes oh yeah you can't really see a lot

295
00:14:19,140 --> 00:14:22,200
here this this graph down here is

296
00:14:22,200 --> 00:14:24,960
basically an integrate over the graph up

297
00:14:24,960 --> 00:14:27,420
here and so the difference it's hard to

298
00:14:27,420 --> 00:14:29,310
see here there's a difference growl it's

299
00:14:29,310 --> 00:14:33,300
a slightly higher a 1% more so you have

300
00:14:33,300 --> 00:14:38,040
one percent worse p99 latencies and this

301
00:14:38,040 --> 00:14:42,210
is this is probably very likely because

302
00:14:42,210 --> 00:14:46,050
of the highest scavenge times it's it's

303
00:14:46,050 --> 00:14:48,210
easier to see with the P for nine

304
00:14:48,210 --> 00:14:51,540
latencies because and the difference is

305
00:14:51,540 --> 00:14:56,310
then what is it 2.5% more that's what

306
00:14:56,310 --> 00:15:03,330
you're paying oh it's uh it's the

307
00:15:03,330 --> 00:15:06,890
request time of a tweet

308
00:15:11,460 --> 00:15:14,370
so this one for this one I could I could

309
00:15:14,370 --> 00:15:17,700
show the y-axis actually it's a this is

310
00:15:17,700 --> 00:15:20,460
it's split out this is user CPU time and

311
00:15:20,460 --> 00:15:22,470
this is system CPU time I I did it

312
00:15:22,470 --> 00:15:24,649
because it's very interesting down here

313
00:15:24,649 --> 00:15:28,050
you have slightly better what are the

314
00:15:28,050 --> 00:15:33,149
notes up to 4% better user CPU time I

315
00:15:33,149 --> 00:15:37,380
think this is because you have less

316
00:15:37,380 --> 00:15:39,480
scavenge cycles so that means you have

317
00:15:39,480 --> 00:15:44,100
less CPU time usage and also I think it

318
00:15:44,100 --> 00:15:47,880
produces likely take the code

319
00:15:47,880 --> 00:15:50,160
the interesting part down here is that

320
00:15:50,160 --> 00:15:54,510
how much is it under load four percent

321
00:15:54,510 --> 00:15:59,670
worse yeah four percent so this this is

322
00:15:59,670 --> 00:16:03,480
four percent worse system GPU time which

323
00:16:03,480 --> 00:16:08,130
I cannot explain I don't know why I have

324
00:16:08,130 --> 00:16:11,540
no idea but since the overall you know

325
00:16:11,540 --> 00:16:14,370
system CPU time is only between what 15

326
00:16:14,370 --> 00:16:16,860
and 20 percent and you have 4 percent

327
00:16:16,860 --> 00:16:19,610
more of that it doesn't really matter

328
00:16:19,610 --> 00:16:23,040
this one is a very interesting graph how

329
00:16:23,040 --> 00:16:26,310
am i doing with time pretty good this

330
00:16:26,310 --> 00:16:27,870
one's a pretty interesting graph so what

331
00:16:27,870 --> 00:16:33,720
it does it shows you how many GC this

332
00:16:33,720 --> 00:16:37,500
one and CPU milliseconds know how many

333
00:16:37,500 --> 00:16:40,560
tweets per GC and CPU milliseconds it

334
00:16:40,560 --> 00:16:45,209
can send out basically and so high is

335
00:16:45,209 --> 00:16:50,600
better here and you can see that the GC

336
00:16:50,600 --> 00:16:53,940
for the footage GC milliseconds c2 is

337
00:16:53,940 --> 00:16:56,640
basically always better and that's

338
00:16:56,640 --> 00:16:59,279
because the what was it like 20-30

339
00:16:59,279 --> 00:17:03,450
percent higher scavenge cycle types this

340
00:17:03,450 --> 00:17:05,490
is black graph but on the other hand

341
00:17:05,490 --> 00:17:09,569
when you look at CPU time you can see

342
00:17:09,569 --> 00:17:12,390
that the grah especially when the load

343
00:17:12,390 --> 00:17:19,290
is low that grows better so this is what

344
00:17:19,290 --> 00:17:24,290
is the top graph you see it's 20% less

345
00:17:24,290 --> 00:17:27,349
and the bottom graph CPU up to eight

346
00:17:27,349 --> 00:17:28,820
percent better that's probably here

347
00:17:28,820 --> 00:17:31,820
somewhere but yeah but only when the

348
00:17:31,820 --> 00:17:33,680
load slow it's basically the same here

349
00:17:33,680 --> 00:17:36,110
and then if you remember the first graph

350
00:17:36,110 --> 00:17:38,120
I showed you there's what's a pretty

351
00:17:38,120 --> 00:17:40,160
high load and then it went down again

352
00:17:40,160 --> 00:17:42,500
and you can see that like the graphs go

353
00:17:42,500 --> 00:17:47,960
like this yeah this is this is pretty

354
00:17:47,960 --> 00:17:53,480
much what what we've seen so far I tried

355
00:17:53,480 --> 00:17:55,130
to come up with a summary slide that

356
00:17:55,130 --> 00:17:56,990
this is basically the only thing I could

357
00:17:56,990 --> 00:18:00,050
come up with we could in theory replace

358
00:18:00,050 --> 00:18:03,140
see to withdraw at Twitter today it's

359
00:18:03,140 --> 00:18:05,060
there is it there's an issue with the P

360
00:18:05,060 --> 00:18:07,700
for nine time you know some some people

361
00:18:07,700 --> 00:18:10,540
care about that in the at Twitter and

362
00:18:10,540 --> 00:18:15,470
four percent might be too much I played

363
00:18:15,470 --> 00:18:20,210
around with you know that the the thing

364
00:18:20,210 --> 00:18:23,420
I mentioned with the young Jen and the

365
00:18:23,420 --> 00:18:25,760
the the scavenge is taking longer

366
00:18:25,760 --> 00:18:28,160
because you have more life objects in it

367
00:18:28,160 --> 00:18:31,970
so and then the ocean the slightly

368
00:18:31,970 --> 00:18:34,160
higher occupancy of the ocean

369
00:18:34,160 --> 00:18:37,730
I tried to change the ratio of of the

370
00:18:37,730 --> 00:18:40,400
young sizes and the old sizes to maybe

371
00:18:40,400 --> 00:18:43,370
come to a point where I can get the the

372
00:18:43,370 --> 00:18:45,380
scavenge times back to where they were

373
00:18:45,380 --> 00:18:48,470
and the the old Chen you know slightly

374
00:18:48,470 --> 00:18:51,080
bigger so that we have the same number

375
00:18:51,080 --> 00:18:54,890
of old cycles it did I could so far I

376
00:18:54,890 --> 00:18:58,010
haven't found the right ratio so that's

377
00:18:58,010 --> 00:18:59,480
that's why I didn't show it because I

378
00:18:59,480 --> 00:19:03,860
couldn't get anywhere near the the

379
00:19:03,860 --> 00:19:07,550
scavenge times so I I have to spend more

380
00:19:07,550 --> 00:19:11,780
time on doing that yeah that's it

381
00:19:11,780 --> 00:19:14,180
I've had I have a ton more slides but I

382
00:19:14,180 --> 00:19:19,760
don't have time to show them but I like

383
00:19:19,760 --> 00:19:20,890
minutes left there you go

384
00:19:20,890 --> 00:19:24,760
yeah I can take questions now

385
00:19:25,680 --> 00:19:29,870
so the question is what about stability

386
00:19:29,870 --> 00:19:35,880
right so besides the two bucks that I've

387
00:19:35,880 --> 00:19:39,420
shown that actually crashed it hasn't

388
00:19:39,420 --> 00:19:44,430
crashed no but I have not run it on a

389
00:19:44,430 --> 00:19:48,360
thousand machines right I've so I in

390
00:19:48,360 --> 00:19:50,580
production in I've ran it once in in

391
00:19:50,580 --> 00:19:53,250
real production but it was only one

392
00:19:53,250 --> 00:19:56,520
machine and and the the dedicated

393
00:19:56,520 --> 00:20:00,260
machines I have it's it's basically per

394
00:20:00,260 --> 00:20:03,540
pair configurations one machine but I've

395
00:20:03,540 --> 00:20:06,710
ran them for I don't know a week or two

396
00:20:06,710 --> 00:20:09,810
so and and I've not seen any issues so

397
00:20:09,810 --> 00:20:13,500
far and we do we restart our service

398
00:20:13,500 --> 00:20:16,230
service is pretty frequently so it's

399
00:20:16,230 --> 00:20:18,600
they're not running a year right because

400
00:20:18,600 --> 00:20:21,330
when we update the software we have to

401
00:20:21,330 --> 00:20:23,370
restart them of course it's a good

402
00:20:23,370 --> 00:20:25,460
question what's the typical CPU

403
00:20:25,460 --> 00:20:33,920
utilization in Twitter CPU load maybe

404
00:20:34,610 --> 00:20:36,750
it's basically the one graph I showed

405
00:20:36,750 --> 00:20:40,230
you but twenty percent so things of that

406
00:20:40,230 --> 00:20:42,720
snow I mean the the graph I showed you

407
00:20:42,720 --> 00:20:45,870
it's not so the the y-axis was that

408
00:20:45,870 --> 00:20:49,470
course that's what they call it so it's

409
00:20:49,470 --> 00:20:52,560
it's you know it really depends on the

410
00:20:52,560 --> 00:20:55,140
load you get but it can go up to it and

411
00:20:55,140 --> 00:20:58,770
then there's not we have multiple

412
00:20:58,770 --> 00:21:00,810
services running on one machine for

413
00:21:00,810 --> 00:21:04,800
example so it's you know so what is the

414
00:21:04,800 --> 00:21:06,630
performance of the compiler itself

415
00:21:06,630 --> 00:21:10,140
compiler to see a compare to see - so

416
00:21:10,140 --> 00:21:11,670
how fast does it compile a method oh

417
00:21:11,670 --> 00:21:14,430
yeah yeah right I haven't mentioned that

418
00:21:14,430 --> 00:21:17,820
so one thing I completely left out is

419
00:21:17,820 --> 00:21:20,580
the the issue of the warm-up startup

420
00:21:20,580 --> 00:21:24,270
problem which for I guess for a lot of

421
00:21:24,270 --> 00:21:27,330
people is an issue but for Twitter it's

422
00:21:27,330 --> 00:21:31,350
not because the you have to compile your

423
00:21:31,350 --> 00:21:33,390
compiler right because it's Java and

424
00:21:33,390 --> 00:21:35,010
it's not a IOT compote because it's

425
00:21:35,010 --> 00:21:37,160
eight

426
00:21:37,710 --> 00:21:40,590
but it only adds in in the tiered

427
00:21:40,590 --> 00:21:43,620
environment the way it's set up today is

428
00:21:43,620 --> 00:21:47,940
that Grob gets compiled with c1 only you

429
00:21:47,940 --> 00:21:49,920
can you can tweak that you can get in

430
00:21:49,920 --> 00:21:52,620
switch it in a way that actually grout

431
00:21:52,620 --> 00:21:54,630
compares itself but the default ways

432
00:21:54,630 --> 00:21:57,390
that c1 composite so it's pretty fast to

433
00:21:57,390 --> 00:22:00,000
compile growl itself and and it adds

434
00:22:00,000 --> 00:22:03,570
about I think I tried it or starting up

435
00:22:03,570 --> 00:22:05,640
an empty Eclipse workspace or something

436
00:22:05,640 --> 00:22:09,420
like that it adds about 20 percent of

437
00:22:09,420 --> 00:22:14,190
the runtime or the startup time but it's

438
00:22:14,190 --> 00:22:17,690
only in the first 20 to 30 seconds right

439
00:22:17,690 --> 00:22:25,680
yeah and then that we put if you compile

440
00:22:25,680 --> 00:22:27,590
it with c1 only it's not as good

441
00:22:27,590 --> 00:22:30,480
obviously because you know c1 it's not

442
00:22:30,480 --> 00:22:32,010
doing that many optimizations but if you

443
00:22:32,010 --> 00:22:34,620
compile it with growl itself it's it's

444
00:22:34,620 --> 00:22:38,100
about the same can't continue the topic

445
00:22:38,100 --> 00:22:41,670
so if you load a new class and you're CJ

446
00:22:41,670 --> 00:22:44,280
that's get involved it or final is no

447
00:22:44,280 --> 00:22:46,140
longer final and you get a deopt

448
00:22:46,140 --> 00:22:48,600
did you do you measure you know if

449
00:22:48,600 --> 00:22:51,720
you've the drop back the time it takes

450
00:22:51,720 --> 00:22:53,910
to recompile a given method is longer

451
00:22:53,910 --> 00:22:55,770
than the one would see - or is it

452
00:22:55,770 --> 00:23:00,870
compare and a noticeable difference it's

453
00:23:00,870 --> 00:23:03,350
about the same I mean at the time when

454
00:23:03,350 --> 00:23:06,720
it depends on when it happens if it if

455
00:23:06,720 --> 00:23:09,000
it happens later in the game when when

456
00:23:09,000 --> 00:23:11,160
Roz already warmed up and everything's

457
00:23:11,160 --> 00:23:13,560
compiled it's about the same but if it

458
00:23:13,560 --> 00:23:18,770
if it happens earlier it it might

459
00:23:18,770 --> 00:23:21,570
because it's a Noah's are it might

460
00:23:21,570 --> 00:23:24,150
trigger some paths in in Brawl itself

461
00:23:24,150 --> 00:23:25,640
that that are not compiled yet

462
00:23:25,640 --> 00:23:28,740
which means you have a slight delay but

463
00:23:28,740 --> 00:23:32,180
it's it's it's not that bad

464
00:23:32,200 --> 00:23:34,600
so really cool work and they think

465
00:23:34,600 --> 00:23:35,889
there's anything in particular in

466
00:23:35,889 --> 00:23:38,019
Twitter's environment that makes a girl

467
00:23:38,019 --> 00:23:40,749
perform this close to c2 I mean at least

468
00:23:40,749 --> 00:23:42,309
from my point of view there are really

469
00:23:42,309 --> 00:23:45,700
there is a closer like the Audrey only

470
00:23:45,700 --> 00:23:48,059
benefits of running in the Twitter

471
00:23:48,059 --> 00:23:50,529
infrastructure compared to just learn is

472
00:23:50,529 --> 00:23:52,840
loose on all kinds of applications

473
00:23:52,840 --> 00:24:02,999
I don't really know most of Twitter's

474
00:24:02,999 --> 00:24:06,340
services or almost all of our software's

475
00:24:06,340 --> 00:24:10,419
Scala I don't think anyone has put some

476
00:24:10,419 --> 00:24:13,210
work into optimizing growth for Scala

477
00:24:13,210 --> 00:24:15,999
but it it seems to just work fine so I'm

478
00:24:15,999 --> 00:24:18,940
it it definitely depends on on the code

479
00:24:18,940 --> 00:24:21,009
shape but it but it seems the stuff

480
00:24:21,009 --> 00:24:24,220
we're doing like this service based you

481
00:24:24,220 --> 00:24:27,580
know female whatever stuff it seems to

482
00:24:27,580 --> 00:24:29,830
work fine yeah there definitely other

483
00:24:29,830 --> 00:24:34,539
cases where it's not that good I mean I

484
00:24:34,539 --> 00:24:36,039
might have shown this last year I can't

485
00:24:36,039 --> 00:24:40,690
remember a year before when you run spec

486
00:24:40,690 --> 00:24:50,080
gbb withdrawal it's like 20% slower hey

487
00:24:50,080 --> 00:24:53,019
Chris how's the the additional heat

488
00:24:53,019 --> 00:24:56,320
required translate into overall reserved

489
00:24:56,320 --> 00:25:00,669
memory compared to C to white because I

490
00:25:00,669 --> 00:25:02,350
imagine the hot spot has its own data

491
00:25:02,350 --> 00:25:04,809
but it's often yeah so there's something

492
00:25:04,809 --> 00:25:06,669
there it's not oh yeah definitely yeah

493
00:25:06,669 --> 00:25:10,179
so I've not done this measurement in

494
00:25:10,179 --> 00:25:12,669
quite some time but I've done it a few

495
00:25:12,669 --> 00:25:17,590
years ago how much memory is C 2 using

496
00:25:17,590 --> 00:25:19,090
when it compiled stuff and how much is

497
00:25:19,090 --> 00:25:22,480
crawl using when it compositor C 2 can

498
00:25:22,480 --> 00:25:25,179
spike up to 500 megabytes for

499
00:25:25,179 --> 00:25:27,399
compilations I mean you know these are

500
00:25:27,399 --> 00:25:28,899
the outliers and it needs to be a huge

501
00:25:28,899 --> 00:25:31,330
method with lots of loop optimization

502
00:25:31,330 --> 00:25:32,830
stuff going on but he can spike a lot

503
00:25:32,830 --> 00:25:35,289
and usually you don't see that you see

504
00:25:35,289 --> 00:25:38,080
it with Grob gives it some on your Java

505
00:25:38,080 --> 00:25:40,299
heap right and so it's much more visible

506
00:25:40,299 --> 00:25:45,129
so back then when I measured this if you

507
00:25:45,129 --> 00:25:45,970
run with

508
00:25:45,970 --> 00:25:48,400
compressed oops you're actually using

509
00:25:48,400 --> 00:25:53,410
less memory than c2 but if you run with

510
00:25:53,410 --> 00:25:56,260
you know regular references it's it was

511
00:25:56,260 --> 00:26:02,790
slightly more but I'm really hoping for

512
00:26:02,790 --> 00:26:05,140
for value types and all that stuff to

513
00:26:05,140 --> 00:26:05,860
help out here

514
00:26:05,860 --> 00:26:07,630
because it's it's basically a compiler

515
00:26:07,630 --> 00:26:10,180
graph this is the biggest thing and if

516
00:26:10,180 --> 00:26:11,830
you have value types for data it will be

517
00:26:11,830 --> 00:26:15,899
really cool so I'm just waiting for that

518
00:26:17,370 --> 00:26:20,570
okay that's it thank you

519
00:26:20,570 --> 00:26:27,970
[Applause]

