1
00:00:09,990 --> 00:00:14,400
so let's go hello everybody

2
00:00:14,400 --> 00:00:17,920
next speaker is young boy please give

3
00:00:17,920 --> 00:00:20,400
him a warm welcome

4
00:00:23,400 --> 00:00:27,220
thank you I'm leading the developments

5
00:00:27,220 --> 00:00:30,039
of the spark technology at a decor so a

6
00:00:30,039 --> 00:00:33,670
decor is free software provider of

7
00:00:33,670 --> 00:00:35,829
development environments in particular

8
00:00:35,829 --> 00:00:37,930
we develop the Ignatz compiler for ADA

9
00:00:37,930 --> 00:00:40,210
which is part of GCC at least that's how

10
00:00:40,210 --> 00:00:42,820
we started 20 years ago and today that's

11
00:00:42,820 --> 00:00:44,770
still half of our activity and the other

12
00:00:44,770 --> 00:00:46,420
half is on all the other tools that you

13
00:00:46,420 --> 00:00:48,250
need when you develop critical software

14
00:00:48,250 --> 00:00:52,600
I am going to talk about spot so spark

15
00:00:52,600 --> 00:00:54,910
is a technology to prove properties of

16
00:00:54,910 --> 00:00:58,660
programs and when I mentioned proof I'm

17
00:00:58,660 --> 00:01:01,269
sure that some of you may have very bad

18
00:01:01,269 --> 00:01:03,339
memories coming back to your mind but

19
00:01:03,339 --> 00:01:07,510
vicious math proof in high school so if

20
00:01:07,510 --> 00:01:09,250
that happens to you just relax because

21
00:01:09,250 --> 00:01:11,620
we spark the tool does the math and you

22
00:01:11,620 --> 00:01:15,940
do the code so here is a satellite view

23
00:01:15,940 --> 00:01:19,570
of the technology spark takes programs

24
00:01:19,570 --> 00:01:23,230
in the ADA programming language it turns

25
00:01:23,230 --> 00:01:25,570
them into the intermediate verification

26
00:01:25,570 --> 00:01:28,510
language called y3 and it uses the y3

27
00:01:28,510 --> 00:01:30,400
verification platform to generate

28
00:01:30,400 --> 00:01:33,100
formulas logical mathematical formulas

29
00:01:33,100 --> 00:01:35,320
that are proved by these things which

30
00:01:35,320 --> 00:01:38,440
are automatic provers alter go CVC for

31
00:01:38,440 --> 00:01:42,670
z3 and all of these bits pieces are free

32
00:01:42,670 --> 00:01:45,040
software developed by separate groups

33
00:01:45,040 --> 00:01:46,270
that we integrate and to which we

34
00:01:46,270 --> 00:01:50,080
contribute so let's see now on an

35
00:01:50,080 --> 00:01:52,720
example how this works I'm assuming that

36
00:01:52,720 --> 00:01:56,410
you know Tetris whatever you program

37
00:01:56,410 --> 00:01:58,060
there are typically two kinds of

38
00:01:58,060 --> 00:02:00,600
properties that you may want to verify

39
00:02:00,600 --> 00:02:03,460
for first you want to check that the

40
00:02:03,460 --> 00:02:05,260
program doesn't go wild that it stays

41
00:02:05,260 --> 00:02:07,330
within reasonable bounds that's what we

42
00:02:07,330 --> 00:02:07,720
call

43
00:02:07,720 --> 00:02:10,628
program integrity and then you want to

44
00:02:10,628 --> 00:02:12,519
ensure that the program does something

45
00:02:12,519 --> 00:02:15,129
good and that's we call what we call

46
00:02:15,129 --> 00:02:16,000
functionality

47
00:02:16,000 --> 00:02:19,540
so for tetris we'd like to show that all

48
00:02:19,540 --> 00:02:21,760
the data that is read is properly

49
00:02:21,760 --> 00:02:25,510
initialized typical reason for for bugs

50
00:02:25,510 --> 00:02:28,090
and that there are no language error or

51
00:02:28,090 --> 00:02:29,770
exception so depending on your language

52
00:02:29,770 --> 00:02:32,350
so for example division by zero buffer

53
00:02:32,350 --> 00:02:35,260
overflow etc so that's part that's for

54
00:02:35,260 --> 00:02:37,990
the program integrity then we'd like to

55
00:02:37,990 --> 00:02:39,700
show that the flow of data in the

56
00:02:39,700 --> 00:02:41,320
program is correct it's accessed

57
00:02:41,320 --> 00:02:42,730
correctly with respect to the

58
00:02:42,730 --> 00:02:45,790
specification that complete lines are

59
00:02:45,790 --> 00:02:47,530
removed and that's quite important that

60
00:02:47,530 --> 00:02:50,590
because that's how you score points and

61
00:02:50,590 --> 00:02:52,120
that the following piece doesn't develop

62
00:02:52,120 --> 00:02:54,100
with the pieces that have already fallen

63
00:02:54,100 --> 00:02:58,240
or doesn't go outside because then it's

64
00:02:58,240 --> 00:02:59,590
really annoying when a piece goes

65
00:02:59,590 --> 00:03:02,470
somewhere you cannot see it anymore so

66
00:03:02,470 --> 00:03:05,260
that's that's for the functionality so

67
00:03:05,260 --> 00:03:07,420
let's see how you express that's in a

68
00:03:07,420 --> 00:03:11,650
DES so in Ada there are very rich

69
00:03:11,650 --> 00:03:16,240
features to express data types so for

70
00:03:16,240 --> 00:03:19,180
example the cell here you can express it

71
00:03:19,180 --> 00:03:22,450
with the enumeration so either empty or

72
00:03:22,450 --> 00:03:26,200
one of the well-known shapes of Tetris

73
00:03:26,200 --> 00:03:28,570
super op all if you tilt your heads on

74
00:03:28,570 --> 00:03:29,770
the right a bit you will see that this

75
00:03:29,770 --> 00:03:33,340
one is a J and the shape is any cell

76
00:03:33,340 --> 00:03:35,680
that is not the empty one so a subtype

77
00:03:35,680 --> 00:03:38,440
of this one and the 3 shape is also a

78
00:03:38,440 --> 00:03:40,840
subtype of cell for those shapes that

79
00:03:40,840 --> 00:03:44,500
fits within a square bounding box of

80
00:03:44,500 --> 00:03:46,600
site 3 so that's all the shapes except I

81
00:03:46,600 --> 00:03:49,810
and all because they are of size 4 and 2

82
00:03:49,810 --> 00:03:52,360
respectively so that's what they were

83
00:03:52,360 --> 00:03:56,440
Sayla then a piece is a record made of a

84
00:03:56,440 --> 00:03:58,420
shape a direction which is itself a

85
00:03:58,420 --> 00:04:00,010
generation and then a pair of

86
00:04:00,010 --> 00:04:03,070
coordinates for the top left cell in the

87
00:04:03,070 --> 00:04:05,019
square bounding box so it defines the

88
00:04:05,019 --> 00:04:07,630
position of a piece and we have the

89
00:04:07,630 --> 00:04:09,459
current piece following which is a

90
00:04:09,459 --> 00:04:11,950
global variable called herpes and

91
00:04:11,950 --> 00:04:15,310
finally the board is just a matrix or

92
00:04:15,310 --> 00:04:17,918
the board is an array of lines were 9 is

93
00:04:17,918 --> 00:04:20,680
an array of cells and we have the board

94
00:04:20,680 --> 00:04:23,459
here as a global level

95
00:04:23,650 --> 00:04:28,450
the API of Tetris is quite simple so you

96
00:04:28,450 --> 00:04:30,400
have five possible actions that you can

97
00:04:30,400 --> 00:04:33,940
apply to the piece so you can move left

98
00:04:33,940 --> 00:04:37,630
so your left you can move right you're

99
00:04:37,630 --> 00:04:41,620
right you can move down okay and you can

100
00:04:41,620 --> 00:04:44,020
turn counterclockwise and and clockwise

101
00:04:44,020 --> 00:04:48,000
and I won't do any funny gymnastic here

102
00:04:48,000 --> 00:04:50,680
so there's a procedure to action that

103
00:04:50,680 --> 00:04:53,380
applies an action and tells you if this

104
00:04:53,380 --> 00:04:55,180
was successful for example if I'm

105
00:04:55,180 --> 00:04:57,850
completely on on your legs I won't be

106
00:04:57,850 --> 00:05:01,240
able to move more okay so that's the the

107
00:05:01,240 --> 00:05:03,220
function procedure tells you tells the

108
00:05:03,220 --> 00:05:05,620
color about it and there's a procedure

109
00:05:05,620 --> 00:05:07,180
to include the piece in the board after

110
00:05:07,180 --> 00:05:09,160
it has fallen and to delete the complete

111
00:05:09,160 --> 00:05:11,680
lines to score points and you can see

112
00:05:11,680 --> 00:05:14,139
here on this main function essentially a

113
00:05:14,139 --> 00:05:19,060
main loop with a sub loop where these

114
00:05:19,060 --> 00:05:21,160
various pieces of the API are called so

115
00:05:21,160 --> 00:05:25,960
nothing surprising so let's see how we

116
00:05:25,960 --> 00:05:28,990
now analyze this code we could do it on

117
00:05:28,990 --> 00:05:32,020
the command line or in any of the ideas

118
00:05:32,020 --> 00:05:33,580
that we support so for toppling one of

119
00:05:33,580 --> 00:05:35,770
the ideas you go to the SPARC menu and

120
00:05:35,770 --> 00:05:39,160
you click on examine file this starts by

121
00:05:39,160 --> 00:05:41,050
generating a bunch of useful information

122
00:05:41,050 --> 00:05:43,120
and then calls this data and information

123
00:05:43,120 --> 00:05:46,150
flow algorithm if it returns without any

124
00:05:46,150 --> 00:05:47,710
message that means that there are no

125
00:05:47,710 --> 00:05:50,160
reads of initialized at a new program

126
00:05:50,160 --> 00:05:53,260
that's the case here so quite good so

127
00:05:53,260 --> 00:05:56,639
let's go further let's state the actual

128
00:05:56,639 --> 00:05:59,970
accesses to global var ball in the API

129
00:05:59,970 --> 00:06:02,710
so first of all the proceed do action

130
00:06:02,710 --> 00:06:05,500
will read the global ribald that

131
00:06:05,500 --> 00:06:07,479
represent the board will read the

132
00:06:07,479 --> 00:06:09,669
current piece and it may update the

133
00:06:09,669 --> 00:06:11,680
current piece because it will change its

134
00:06:11,680 --> 00:06:16,090
direction or its location so we specify

135
00:06:16,090 --> 00:06:17,770
it with this contract here these global

136
00:06:17,770 --> 00:06:20,080
contracts saying that cure board should

137
00:06:20,080 --> 00:06:21,639
be an input and cure piece should be an

138
00:06:21,639 --> 00:06:24,789
input output and we do this for all the

139
00:06:24,789 --> 00:06:28,350
API really easy here and when the

140
00:06:28,350 --> 00:06:30,940
analysis sorry clicking on examine file

141
00:06:30,940 --> 00:06:32,979
returns without any message we now know

142
00:06:32,979 --> 00:06:35,310
that the implementation of the codes

143
00:06:35,310 --> 00:06:36,930
respects

144
00:06:36,930 --> 00:06:39,690
all these they discourage data flows in

145
00:06:39,690 --> 00:06:44,100
the end in the specification so let's go

146
00:06:44,100 --> 00:06:46,919
further now let's click in the spark

147
00:06:46,919 --> 00:06:49,440
menu on proof file so now again after a

148
00:06:49,440 --> 00:06:51,509
generation of some useful information it

149
00:06:51,509 --> 00:06:53,340
does again the same flow analysis and

150
00:06:53,340 --> 00:06:55,470
now goes to proof so calling the

151
00:06:55,470 --> 00:06:58,530
approvers that I mentioned before this

152
00:06:58,530 --> 00:07:00,449
time if you get the message you get the

153
00:07:00,449 --> 00:07:01,590
warranty that there are no runtime

154
00:07:01,590 --> 00:07:03,419
errors in your program so no division by

155
00:07:03,419 --> 00:07:05,729
zero no buffer overflow which may have

156
00:07:05,729 --> 00:07:08,910
an impact on security here unfortunately

157
00:07:08,910 --> 00:07:11,250
we get six messages and possible buffer

158
00:07:11,250 --> 00:07:13,800
overflows and four messages and possible

159
00:07:13,800 --> 00:07:17,910
violations of data ranges so in fact

160
00:07:17,910 --> 00:07:20,220
this is expected because as many

161
00:07:20,220 --> 00:07:22,199
programs the API is not supposed to be

162
00:07:22,199 --> 00:07:24,570
called in any order at any time during

163
00:07:24,570 --> 00:07:27,990
the lifetime of the of the game so you

164
00:07:27,990 --> 00:07:30,080
need to specify the precondition

165
00:07:30,080 --> 00:07:32,970
precondition we can specify it with the

166
00:07:32,970 --> 00:07:35,550
initial contract pre States when you are

167
00:07:35,550 --> 00:07:39,479
allowed to call this procedure and here

168
00:07:39,479 --> 00:07:41,280
it says that focal in this procedure

169
00:07:41,280 --> 00:07:43,139
include peace in board the current peace

170
00:07:43,139 --> 00:07:45,659
has to be within bounds within bounds we

171
00:07:45,659 --> 00:07:48,270
express it easily in ada with the what

172
00:07:48,270 --> 00:07:50,190
we call an expression function so a

173
00:07:50,190 --> 00:07:51,870
function whose body is simply an

174
00:07:51,870 --> 00:07:53,270
expression so you can think of

175
00:07:53,270 --> 00:07:56,099
functional language bit so here it

176
00:07:56,099 --> 00:07:58,590
discriminates on the shape of the piece

177
00:07:58,590 --> 00:08:01,740
and depending on the shape it does verse

178
00:08:01,740 --> 00:08:03,570
checks that rely on another expression

179
00:08:03,570 --> 00:08:06,090
function within bounds that states that

180
00:08:06,090 --> 00:08:08,120
a pair of coordinates is within the

181
00:08:08,120 --> 00:08:11,340
bounds of the board and with these

182
00:08:11,340 --> 00:08:14,099
preconditions on two functions we have

183
00:08:14,099 --> 00:08:17,729
no messages so we assure that the call

184
00:08:17,729 --> 00:08:19,530
game logic has no runtime errors

185
00:08:19,530 --> 00:08:22,349
quite good so let's go one step further

186
00:08:22,349 --> 00:08:24,840
and let's express the reach properties

187
00:08:24,840 --> 00:08:26,820
that I talked about at the beginning so

188
00:08:26,820 --> 00:08:28,199
the fact that there are no complete

189
00:08:28,199 --> 00:08:30,539
lines and there's no overlap so for

190
00:08:30,539 --> 00:08:34,229
example no complete lines for the board

191
00:08:34,229 --> 00:08:36,270
can be expressed as an expression like

192
00:08:36,270 --> 00:08:39,529
before saying that for all Y coordinates

193
00:08:39,529 --> 00:08:44,279
then the line on the board at this

194
00:08:44,279 --> 00:08:47,200
coordinates is not complete

195
00:08:47,200 --> 00:08:48,940
the fact that the line is complete is

196
00:08:48,940 --> 00:08:51,130
also expressed as an expression function

197
00:08:51,130 --> 00:08:54,490
here saying that for all sales on the

198
00:08:54,490 --> 00:08:58,120
line then the line at this location

199
00:08:58,120 --> 00:09:00,490
that's an array excess in a DA is not

200
00:09:00,490 --> 00:09:03,340
the empty one so it's really easy notice

201
00:09:03,340 --> 00:09:05,920
here that I have sticked this annotation

202
00:09:05,920 --> 00:09:08,350
ghost that means that this function is

203
00:09:08,350 --> 00:09:10,720
only meant for verification it's a ghost

204
00:09:10,720 --> 00:09:12,370
function it will be stripped out of the

205
00:09:12,370 --> 00:09:16,210
final binary when when we build it so of

206
00:09:16,210 --> 00:09:20,470
a novel app is similar so with a rich

207
00:09:20,470 --> 00:09:22,870
case expression here that discriminates

208
00:09:22,870 --> 00:09:24,940
on the shape of the piece but that's

209
00:09:24,940 --> 00:09:29,140
equivalent well these properties doesn't

210
00:09:29,140 --> 00:09:31,240
all don't old hallways they all had

211
00:09:31,240 --> 00:09:33,820
certain poor parts of the program and

212
00:09:33,820 --> 00:09:36,370
for this we need to express the

213
00:09:36,370 --> 00:09:38,350
underlying state automaton of the

214
00:09:38,350 --> 00:09:41,560
program for this Tetris that's very

215
00:09:41,560 --> 00:09:43,750
simple first the piece is falling here

216
00:09:43,750 --> 00:09:48,460
then the piece is blood then the piece

217
00:09:48,460 --> 00:09:50,380
is including in the board so there's no

218
00:09:50,380 --> 00:09:54,100
current piece anymore and then hopefully

219
00:09:54,100 --> 00:09:56,620
some full lines are removed and you

220
00:09:56,620 --> 00:09:58,950
score points and here we get the board

221
00:09:58,950 --> 00:10:01,240
where the full line has been removed so

222
00:10:01,240 --> 00:10:04,090
that's four states and it loops until

223
00:10:04,090 --> 00:10:07,450
you lose we can express that in ghost

224
00:10:07,450 --> 00:10:11,380
code in ada so we can define a ghost

225
00:10:11,380 --> 00:10:14,920
States okay that defines these four

226
00:10:14,920 --> 00:10:17,260
possible states and in an enumeration

227
00:10:17,260 --> 00:10:19,810
and we have a global variable curse

228
00:10:19,810 --> 00:10:22,150
States that stores the current state

229
00:10:22,150 --> 00:10:24,850
that's also a ghost garble and then a

230
00:10:24,850 --> 00:10:27,910
valid configuration discriminates on the

231
00:10:27,910 --> 00:10:29,500
value of the current state so for

232
00:10:29,500 --> 00:10:32,410
example for the first two states we want

233
00:10:32,410 --> 00:10:34,390
to ensure that the current piece is not

234
00:10:34,390 --> 00:10:36,610
developing with the current board after

235
00:10:36,610 --> 00:10:38,020
what it doesn't matter because there's

236
00:10:38,020 --> 00:10:39,360
no current piece anymore

237
00:10:39,360 --> 00:10:43,090
and we want for the last States we'll

238
00:10:43,090 --> 00:10:44,500
have to clean that there are no complete

239
00:10:44,500 --> 00:10:46,570
lines so the function the two function

240
00:10:46,570 --> 00:10:48,430
we defined before we call them here as

241
00:10:48,430 --> 00:10:50,650
part of the valid configuration and that

242
00:10:50,650 --> 00:10:53,140
depends on the current state so that's

243
00:10:53,140 --> 00:10:56,320
again a good function and finally we can

244
00:10:56,320 --> 00:11:00,390
use these specification functions

245
00:11:00,390 --> 00:11:02,700
in the contract for our API so Indian

246
00:11:02,700 --> 00:11:05,279
piecing board should have a contract

247
00:11:05,279 --> 00:11:08,040
here that states the precondition so in

248
00:11:08,040 --> 00:11:10,290
which cases you can call it and the post

249
00:11:10,290 --> 00:11:13,740
condition which states what this service

250
00:11:13,740 --> 00:11:16,350
warranty is to the color so the

251
00:11:16,350 --> 00:11:17,700
precondition here was include peace in

252
00:11:17,700 --> 00:11:19,470
boards peace in board should be called

253
00:11:19,470 --> 00:11:22,440
here should should be called here so it

254
00:11:22,440 --> 00:11:23,910
should be called when the current states

255
00:11:23,910 --> 00:11:26,700
is that the piece is blocked and we have

256
00:11:26,700 --> 00:11:28,470
a valid configuration so this is

257
00:11:28,470 --> 00:11:29,730
something that is maintained this is an

258
00:11:29,730 --> 00:11:30,899
invariant of the pool and is valid

259
00:11:30,899 --> 00:11:34,230
configuration and it should return with

260
00:11:34,230 --> 00:11:36,060
the current state being bored before

261
00:11:36,060 --> 00:11:38,100
clean here and still with the valid

262
00:11:38,100 --> 00:11:43,500
configuration so let's now recall

263
00:11:43,500 --> 00:11:46,310
profile on these codes does the same

264
00:11:46,310 --> 00:11:49,050
there's no message well you can get the

265
00:11:49,050 --> 00:11:51,269
list of things that have been proved if

266
00:11:51,269 --> 00:11:55,200
you select the right switch but

267
00:11:55,200 --> 00:11:57,180
otherwise it returns without any message

268
00:11:57,180 --> 00:11:59,670
so you've proved that's your code which

269
00:11:59,670 --> 00:12:01,769
is here less than two hundred lines of

270
00:12:01,769 --> 00:12:03,810
code completely implements the

271
00:12:03,810 --> 00:12:05,430
specification the rich specification

272
00:12:05,430 --> 00:12:08,370
that we've chosen how hard was it

273
00:12:08,370 --> 00:12:10,740
because this kind of tools can sometimes

274
00:12:10,740 --> 00:12:12,779
run for hours

275
00:12:12,779 --> 00:12:14,850
it's a gigabytes of memory so that that

276
00:12:14,850 --> 00:12:19,019
can be concerned here due to the modular

277
00:12:19,019 --> 00:12:21,029
way that analysis is performed function

278
00:12:21,029 --> 00:12:24,750
by function it's fully proved at what we

279
00:12:24,750 --> 00:12:26,810
called level zero out of four levels so

280
00:12:26,810 --> 00:12:29,519
well the detail is that only one prover

281
00:12:29,519 --> 00:12:31,829
automatic provides calls we leave it

282
00:12:31,829 --> 00:12:33,570
very little time for each individual

283
00:12:33,570 --> 00:12:35,880
proof one second and we don't split the

284
00:12:35,880 --> 00:12:39,000
work for for it so we just each time

285
00:12:39,000 --> 00:12:41,670
give it one full thing to prove it's

286
00:12:41,670 --> 00:12:44,220
proved in 11 second on one core it goes

287
00:12:44,220 --> 00:12:46,740
down to four seconds on multi-core of

288
00:12:46,740 --> 00:12:48,449
course on such a small example small

289
00:12:48,449 --> 00:12:50,070
example that doesn't really matter but

290
00:12:50,070 --> 00:12:53,190
on the example yes this is fully bulk

291
00:12:53,190 --> 00:12:55,740
automation bulk parallelism sorry for

292
00:12:55,740 --> 00:13:00,029
for proving things that independently we

293
00:13:00,029 --> 00:13:03,329
have compiled this code this proven

294
00:13:03,329 --> 00:13:05,820
Tetris so you've seen now what I mean by

295
00:13:05,820 --> 00:13:09,680
proved for originally for this Atmel

296
00:13:09,680 --> 00:13:13,610
some 4s explaining pro board

297
00:13:13,610 --> 00:13:16,130
and so there is display here that really

298
00:13:16,130 --> 00:13:18,380
just to play with it and with my

299
00:13:18,380 --> 00:13:20,089
colleague three stones in gold were

300
00:13:20,089 --> 00:13:24,560
presented yesterday the 64-bit made bare

301
00:13:24,560 --> 00:13:26,450
metal programming on Raspberry Pi 3 we

302
00:13:26,450 --> 00:13:29,570
did the drivers and the DB SP for this

303
00:13:29,570 --> 00:13:32,600
board and then another colleague ported

304
00:13:32,600 --> 00:13:35,779
it to the is PayPal time watch the

305
00:13:35,779 --> 00:13:37,700
colleague ported it to the Unity game

306
00:13:37,700 --> 00:13:41,230
platform and the last one we did is this

307
00:13:41,230 --> 00:13:45,970
RG boy game game platform derive here

308
00:13:45,970 --> 00:13:48,829
we're here this interesting because we

309
00:13:48,829 --> 00:13:52,070
don't have in a deck we don't develop an

310
00:13:52,070 --> 00:13:54,880
idea compiler for this AVR 8-bit

311
00:13:54,880 --> 00:13:57,829
processor that I have here so we we

312
00:13:57,829 --> 00:13:59,779
compiled the spark code to see and then

313
00:13:59,779 --> 00:14:02,360
using GCC the C code to this platform so

314
00:14:02,360 --> 00:14:04,370
you can have the the full story bits

315
00:14:04,370 --> 00:14:05,990
behind this project that blog that they

316
00:14:05,990 --> 00:14:07,490
don't want to come including the source

317
00:14:07,490 --> 00:14:10,399
codes and you can download this tool set

318
00:14:10,399 --> 00:14:13,100
at libre de tocar that come i have many

319
00:14:13,100 --> 00:14:17,690
more links on the page of the talk with

320
00:14:17,690 --> 00:14:19,940
extensive documentation with the free

321
00:14:19,940 --> 00:14:22,699
online e-learning course there's a

322
00:14:22,699 --> 00:14:26,000
university book on spark most of our

323
00:14:26,000 --> 00:14:28,100
users there are big industrial products

324
00:14:28,100 --> 00:14:30,110
so for example if you fly to the UK

325
00:14:30,110 --> 00:14:32,269
you're using spark and knowingly because

326
00:14:32,269 --> 00:14:35,089
the a traffic control in the UK is

327
00:14:35,089 --> 00:14:36,620
written in spark the tool that's a

328
00:14:36,620 --> 00:14:38,180
traffic controller is used for routing

329
00:14:38,180 --> 00:14:41,329
airplanes and and detecting complex but

330
00:14:41,329 --> 00:14:43,790
they're also free software groups that

331
00:14:43,790 --> 00:14:46,010
you spark so for example the main

332
00:14:46,010 --> 00:14:48,440
separation channel which is developed in

333
00:14:48,440 --> 00:14:50,060
the University of Huddersfield in

334
00:14:50,060 --> 00:14:53,000
Switzerland is done in spark so thank

335
00:14:53,000 --> 00:14:55,899
you for your attention

336
00:14:57,350 --> 00:15:00,660
thank you very much Janek I think

337
00:15:00,660 --> 00:15:02,369
there's no time for questions there's

338
00:15:02,369 --> 00:15:06,019
hardly one minute left serve you

