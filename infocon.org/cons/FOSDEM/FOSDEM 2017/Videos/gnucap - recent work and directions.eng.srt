1
00:00:09,780 --> 00:00:11,940
I'm not a Ock user myself so I

2
00:00:11,940 --> 00:00:14,219
appreciate feedback I've got only

3
00:00:14,219 --> 00:00:18,060
feedback from one user so it works I

4
00:00:18,060 --> 00:00:22,890
know that but you can try extensions can

5
00:00:22,890 --> 00:00:25,560
also be installed from directly from git

6
00:00:25,560 --> 00:00:31,710
or the district edges look at the

7
00:00:31,710 --> 00:00:36,600
reading files that are part of the

8
00:00:36,600 --> 00:00:40,110
extensions and or fall back to district

9
00:00:40,110 --> 00:00:41,969
edges extensions

10
00:00:41,969 --> 00:00:44,879
that's what mod mod provision in Linux

11
00:00:44,879 --> 00:00:47,219
is implemented as a simple command line

12
00:00:47,219 --> 00:00:50,159
flag you you specify an assay for attach

13
00:00:50,159 --> 00:00:52,320
and then you get a new cap session with

14
00:00:52,320 --> 00:00:55,170
that extension loaded put that into a

15
00:00:55,170 --> 00:00:57,780
start up wrapper or low loads or plugins

16
00:00:57,780 --> 00:01:01,710
interactively there's also an RC file so

17
00:01:01,710 --> 00:01:03,269
if you have plugins that you always want

18
00:01:03,269 --> 00:01:06,210
to use but this is working this is all

19
00:01:06,210 --> 00:01:08,280
being worked on to streamline the

20
00:01:08,280 --> 00:01:13,170
process for example make what does it do

21
00:01:13,170 --> 00:01:15,840
you Hank how to plug in and load it

22
00:01:15,840 --> 00:01:20,640
immediately into directly as the the C

23
00:01:20,640 --> 00:01:23,729
code into the into a new cap so we don't

24
00:01:23,729 --> 00:01:28,939
have to worry about compilation yourself

25
00:01:28,939 --> 00:01:32,490
we have pages the two that I mentioned

26
00:01:32,490 --> 00:01:34,979
and there's a random variables package

27
00:01:34,979 --> 00:01:37,560
that implements where random

28
00:01:37,560 --> 00:01:41,070
distributions in a more or more or less

29
00:01:41,070 --> 00:01:43,350
advanced major as compared to the spice

30
00:01:43,350 --> 00:01:45,840
random variables we have this

31
00:01:45,840 --> 00:01:49,259
just-in-time compilation we also have

32
00:01:49,259 --> 00:01:51,659
the the canoe cup Quatro checked which

33
00:01:51,659 --> 00:01:55,289
tries to to implement or drop in

34
00:01:55,289 --> 00:01:58,859
replacement for quark seder which is the

35
00:01:58,859 --> 00:02:01,859
simulator engine behind the cost project

36
00:02:01,859 --> 00:02:05,189
or the default simulator engine and a

37
00:02:05,189 --> 00:02:07,920
real-time new processor is a it's a toy

38
00:02:07,920 --> 00:02:10,440
project but it works it's fun you can

39
00:02:10,440 --> 00:02:14,880
use your stereo too or you can plug the

40
00:02:14,880 --> 00:02:17,640
real time process to your stereo and

41
00:02:17,640 --> 00:02:22,500
real time simulate audio filters if they

42
00:02:22,500 --> 00:02:23,520
are small enough for

43
00:02:23,520 --> 00:02:25,860
your computer's fast enough and of

44
00:02:25,860 --> 00:02:28,220
course we have lots of model packs ready

45
00:02:28,220 --> 00:02:33,150
which are probably from from spice time

46
00:02:33,150 --> 00:02:36,690
where new cab wasn't in it as primarily

47
00:02:36,690 --> 00:02:39,260
as a spice replacement which is still is

48
00:02:39,260 --> 00:02:42,360
and yeah some of them have been ported

49
00:02:42,360 --> 00:02:46,170
some new work and some are available as

50
00:02:46,170 --> 00:02:48,990
packages if you are packager feel free

51
00:02:48,990 --> 00:02:52,380
ask stupid questions I I will always

52
00:02:52,380 --> 00:02:55,940
he'll try to get it into Debian myself

53
00:02:55,940 --> 00:02:59,120
other Diesel's I haven't looked at so

54
00:02:59,120 --> 00:03:01,700
III will have with that I appreciate

55
00:03:01,700 --> 00:03:05,010
packages and I would like to see more of

56
00:03:05,010 --> 00:03:08,850
them so the new cap GT project that was

57
00:03:08,850 --> 00:03:11,310
a google Summer of Code project massive

58
00:03:11,310 --> 00:03:16,350
and Krishna who has initiated basic

59
00:03:16,350 --> 00:03:19,080
parsing for GD automatic sync new care

60
00:03:19,080 --> 00:03:21,660
which probably was an idea of Al Davis

61
00:03:21,660 --> 00:03:27,300
and a netlist and schematic should

62
00:03:27,300 --> 00:03:32,180
essentially be the same thing and this

63
00:03:32,180 --> 00:03:34,950
will go a long way and we have started

64
00:03:34,950 --> 00:03:37,650
it like this and I wanted simulation

65
00:03:37,650 --> 00:03:45,560
from this and added some more conceptual

66
00:03:46,670 --> 00:03:47,940
well

67
00:03:47,940 --> 00:03:50,490
algorithms to immediately simulate from

68
00:03:50,490 --> 00:03:53,130
JIRA schematics without intermediates

69
00:03:53,130 --> 00:03:55,890
tests this is now in the main line as a

70
00:03:55,890 --> 00:04:01,800
plugin so main line now allow me to to

71
00:04:01,800 --> 00:04:03,720
plug in my own sub circuit

72
00:04:03,720 --> 00:04:06,930
implementation which here takes care of

73
00:04:06,930 --> 00:04:10,950
netlist expansion from schematics and I

74
00:04:10,950 --> 00:04:14,820
can use all these cheetahs Kemetic GCM

75
00:04:14,820 --> 00:04:18,089
hierarchy build my hierarchical netlist

76
00:04:18,089 --> 00:04:20,548
anesthesia schematic and directly run it

77
00:04:20,548 --> 00:04:24,540
in canoe Kapur loaded and I've got some

78
00:04:24,540 --> 00:04:27,840
quirks implemented I call the default

79
00:04:27,840 --> 00:04:31,430
port values which takes care of some

80
00:04:31,430 --> 00:04:34,770
connecting connecting ports that are not

81
00:04:34,770 --> 00:04:37,050
represented in the symbols or

82
00:04:37,050 --> 00:04:40,259
not represented for other reasons and

83
00:04:40,259 --> 00:04:44,060
yes spice sdb which you might know

84
00:04:44,060 --> 00:04:48,840
didn't cut it for me and so this

85
00:04:48,840 --> 00:04:52,259
happened and yeah the the architecture

86
00:04:52,259 --> 00:04:54,120
is pretty simple you have this

87
00:04:54,120 --> 00:04:57,569
hierarchical schematic it uses symbols

88
00:04:57,569 --> 00:05:01,039
symbols have tributes one is device and

89
00:05:01,039 --> 00:05:04,590
on the nuke website the device specifies

90
00:05:04,590 --> 00:05:07,560
what device model will be used for that

91
00:05:07,560 --> 00:05:10,259
and then you can either simulate or

92
00:05:10,259 --> 00:05:12,240
translate it one two one two a very lot

93
00:05:12,240 --> 00:05:15,930
noticed and you can interpret your

94
00:05:15,930 --> 00:05:18,449
results in the same namespace at your

95
00:05:18,449 --> 00:05:20,370
very long at list or your schematic

96
00:05:20,370 --> 00:05:22,860
there is no name mangling there is no

97
00:05:22,860 --> 00:05:26,310
magic with with global nets it's all in

98
00:05:26,310 --> 00:05:29,550
place and it's much easier to to to play

99
00:05:29,550 --> 00:05:35,539
with circuits and with simulation and an

100
00:05:35,539 --> 00:05:38,969
example this is the example I showed you

101
00:05:38,969 --> 00:05:43,440
last year and the same we have a simple

102
00:05:43,440 --> 00:05:47,130
low pass sub circuit and you you might

103
00:05:47,130 --> 00:05:48,870
know the cheetah format it has these

104
00:05:48,870 --> 00:05:51,029
coordinates in and it has components

105
00:05:51,029 --> 00:05:53,759
like resistors symbol and the Daevas

106
00:05:53,759 --> 00:05:56,219
attributes specified what it is and when

107
00:05:56,219 --> 00:05:58,949
I read that into nuclear and dump it in

108
00:05:58,949 --> 00:06:02,550
very low I get this add an Augmented

109
00:06:02,550 --> 00:06:05,490
varial netlist which is all ton of the

110
00:06:05,490 --> 00:06:09,569
components with with coordinates for

111
00:06:09,569 --> 00:06:12,389
example there's a net and it has its

112
00:06:12,389 --> 00:06:17,219
places and places are attached to the to

113
00:06:17,219 --> 00:06:21,900
the the wires or so you can this mouse

114
00:06:21,900 --> 00:06:26,279
available yes you have you have this x

115
00:06:26,279 --> 00:06:30,029
and y coordinates which which are sort

116
00:06:30,029 --> 00:06:36,120
of a standard in very log these are used

117
00:06:36,120 --> 00:06:40,379
to to express what what we need to get

118
00:06:40,379 --> 00:06:42,719
the schematic information covered in

119
00:06:42,719 --> 00:06:47,580
your in this very long list yeah what

120
00:06:47,580 --> 00:06:49,979
else I have started the component

121
00:06:49,979 --> 00:06:50,880
library

122
00:06:50,880 --> 00:06:55,890
at elements the the GDR civil symbols

123
00:06:55,890 --> 00:06:59,760
all have default device attributes and I

124
00:06:59,760 --> 00:07:01,560
want them to resolve in a useful way so

125
00:07:01,560 --> 00:07:06,030
I started to implement you have

126
00:07:06,030 --> 00:07:09,420
components that that just work as would

127
00:07:09,420 --> 00:07:11,220
expect from from what this will look

128
00:07:11,220 --> 00:07:15,060
like and you can just change the device

129
00:07:15,060 --> 00:07:17,130
attribute and add anything behind that

130
00:07:17,130 --> 00:07:20,010
device that you might wish like spice

131
00:07:20,010 --> 00:07:23,730
macro cells which are often used or even

132
00:07:23,730 --> 00:07:30,060
very long a models and to get an easy a

133
00:07:30,060 --> 00:07:33,060
grip on how to use that I have last week

134
00:07:33,060 --> 00:07:36,210
I and included some some examples that

135
00:07:36,210 --> 00:07:39,090
you can run directly from from the

136
00:07:39,090 --> 00:07:43,110
installed package to get an idea of how

137
00:07:43,110 --> 00:07:47,610
easy is intended to work I have an

138
00:07:47,610 --> 00:07:50,070
operational amplifier I scraped it off

139
00:07:50,070 --> 00:07:53,070
some wood archive and added an analysis

140
00:07:53,070 --> 00:07:55,350
to that so you can you can run it you

141
00:07:55,350 --> 00:07:58,410
can see how it works and similar a

142
00:07:58,410 --> 00:08:00,270
frequency divider that has been

143
00:08:00,270 --> 00:08:03,240
communicated on on the IRC channel by

144
00:08:03,240 --> 00:08:06,120
some other guy he was asking how to do

145
00:08:06,120 --> 00:08:08,550
that with spice STB and I said spice sdb

146
00:08:08,550 --> 00:08:10,740
no you don't need that and now it's here

147
00:08:10,740 --> 00:08:14,670
as as in life example and as a

148
00:08:14,670 --> 00:08:17,610
comparator circuit that I found added to

149
00:08:17,610 --> 00:08:18,420
the repository

150
00:08:18,420 --> 00:08:20,820
how does it look like in practice you

151
00:08:20,820 --> 00:08:22,590
load that plug-in again this is the

152
00:08:22,590 --> 00:08:23,760
first line here

153
00:08:23,760 --> 00:08:28,110
oh sorry you then have the component

154
00:08:28,110 --> 00:08:33,030
libraries included the commands for for

155
00:08:33,030 --> 00:08:36,030
fetching schematics are bit weird they

156
00:08:36,030 --> 00:08:37,950
could be streamlined that's the first

157
00:08:37,950 --> 00:08:41,010
approach to that simply says that there

158
00:08:41,010 --> 00:08:44,460
should be a device my voice in the in

159
00:08:44,460 --> 00:08:47,250
the device namespace and it is fetched

160
00:08:47,250 --> 00:08:53,270
from from the schematic and then I I can

161
00:08:53,270 --> 00:08:55,890
switch to very log to some other stuff

162
00:08:55,890 --> 00:08:58,170
and even switch to spite run a

163
00:08:58,170 --> 00:09:03,060
simulation and get the results this is a

164
00:09:03,060 --> 00:09:06,870
this is a trip of a new obsession you

165
00:09:06,870 --> 00:09:08,670
can type in these commands because well

166
00:09:08,670 --> 00:09:10,710
dump into a file and read it directly

167
00:09:10,710 --> 00:09:12,150
into a new cab

168
00:09:12,150 --> 00:09:14,900
anyone who knows Python knows that

169
00:09:14,900 --> 00:09:18,630
either way works and it's the same here

170
00:09:18,630 --> 00:09:23,730
and should be as simple as possible and

171
00:09:23,730 --> 00:09:27,450
that was intent the next project is new

172
00:09:27,450 --> 00:09:31,290
head EMS this is a bit more involved it

173
00:09:31,290 --> 00:09:35,610
is older and it has been used for for

174
00:09:35,610 --> 00:09:36,690
other purposes

175
00:09:36,690 --> 00:09:40,080
I purported this to a stream canoe cab

176
00:09:40,080 --> 00:09:43,470
which yeah it was kind of a deal because

177
00:09:43,470 --> 00:09:46,530
all the interfaces in new kept UF where

178
00:09:46,530 --> 00:09:50,370
it was originally written for were a bit

179
00:09:50,370 --> 00:09:54,510
um a bit more broke and in the in the in

180
00:09:54,510 --> 00:09:57,180
the main project and I needed some some

181
00:09:57,180 --> 00:09:59,730
adaptions and accommodate for hacks that

182
00:09:59,730 --> 00:10:03,720
didn't really work and so this is a pure

183
00:10:03,720 --> 00:10:06,360
plug-in and doesn't need any changes in

184
00:10:06,360 --> 00:10:11,089
the mainline ATS msxml provides

185
00:10:11,089 --> 00:10:15,080
templates for ejecting simulated

186
00:10:15,080 --> 00:10:18,270
component code for spice so there is

187
00:10:18,270 --> 00:10:21,720
essentially jacobian stamping code I

188
00:10:21,720 --> 00:10:27,630
have completely rewritten that to to to

189
00:10:27,630 --> 00:10:31,710
it to more resemble the margin which is

190
00:10:31,710 --> 00:10:37,070
the old model compiler architecture

191
00:10:37,070 --> 00:10:43,530
that's why sort is I implemented control

192
00:10:43,530 --> 00:10:46,140
sources so it's it's based on on netlist

193
00:10:46,140 --> 00:10:50,400
of controlled components and the the

194
00:10:50,400 --> 00:10:53,520
real code is written in C++ and is not

195
00:10:53,520 --> 00:10:56,400
generated the only part that's generated

196
00:10:56,400 --> 00:10:58,890
is some arithmetic expressions and some

197
00:10:58,890 --> 00:11:01,260
top quality stuff which need to be

198
00:11:01,260 --> 00:11:05,310
worked on but we have now a net list of

199
00:11:05,310 --> 00:11:07,860
control components and of course it's

200
00:11:07,860 --> 00:11:10,170
band-aid but works so you can see that

201
00:11:10,170 --> 00:11:12,180
the transient simulation in genuki works

202
00:11:12,180 --> 00:11:13,890
better than the others by using these

203
00:11:13,890 --> 00:11:16,620
models don't expect they arm

204
00:11:16,620 --> 00:11:19,030
particularly fast the optimization has

205
00:11:19,030 --> 00:11:23,310
not been implemented thank you

206
00:11:23,310 --> 00:11:25,600
so we have voltage sources and current

207
00:11:25,600 --> 00:11:28,090
probes unlike the the the spice two

208
00:11:28,090 --> 00:11:31,810
plates for the open spice delights I

209
00:11:31,810 --> 00:11:35,320
don't know what what what the in-house

210
00:11:35,320 --> 00:11:39,580
tools can with with a DNS so what we can

211
00:11:39,580 --> 00:11:41,650
do is these water sources and probes

212
00:11:41,650 --> 00:11:45,390
which were missing we can instantiate

213
00:11:45,390 --> 00:11:49,750
subcircuit components into into compiled

214
00:11:49,750 --> 00:11:53,020
lists which sort of make use of the

215
00:11:53,020 --> 00:11:57,220
dynamic loader and anti Spungen

216
00:11:57,220 --> 00:12:00,610
algorithm that we have ended up we have

217
00:12:00,610 --> 00:12:05,520
some more linear operators than the AMS

218
00:12:05,520 --> 00:12:11,500
templates have and it's it looks like at

219
00:12:11,500 --> 00:12:15,010
the end I am optimistic that we can

220
00:12:15,010 --> 00:12:18,390
recycle huge parts of that to

221
00:12:18,390 --> 00:12:22,570
re-implement the ADM a second el part

222
00:12:22,570 --> 00:12:26,080
and reuse for example our sources and to

223
00:12:26,080 --> 00:12:30,040
get a grip on optimization on top of

224
00:12:30,040 --> 00:12:34,180
this architecture and weather right a

225
00:12:34,180 --> 00:12:39,220
non model gen inspired tool or we use

226
00:12:39,220 --> 00:12:42,640
Icarus well it depends on who who does

227
00:12:42,640 --> 00:12:44,470
it or who has experience with these

228
00:12:44,470 --> 00:12:50,740
compilers anyway this architecture I

229
00:12:50,740 --> 00:12:52,570
think works and should be should be

230
00:12:52,570 --> 00:12:56,440
should be continued or being worked on

231
00:12:56,440 --> 00:13:01,750
and maybe that might be a way to compile

232
00:13:01,750 --> 00:13:04,540
and distribute IP blocks people have

233
00:13:04,540 --> 00:13:08,230
secrets I think it's bad but we need to

234
00:13:08,230 --> 00:13:10,740
respect that and if it's possible to

235
00:13:10,740 --> 00:13:13,420
compile these secrets into binary blob

236
00:13:13,420 --> 00:13:16,330
that can be distributed for new cap in

237
00:13:16,330 --> 00:13:18,670
some way would be beneficial for

238
00:13:18,670 --> 00:13:23,140
everything for for everyone because they

239
00:13:23,140 --> 00:13:26,020
get the simulation and we get models and

240
00:13:26,020 --> 00:13:28,830
we don't have to use size macro cells

241
00:13:28,830 --> 00:13:29,980
let's

242
00:13:29,980 --> 00:13:33,070
what happens and of course we need

243
00:13:33,070 --> 00:13:37,690
phylidia and support yeah we are working

244
00:13:37,690 --> 00:13:42,640
on it maybe next year in practice we

245
00:13:42,640 --> 00:13:47,290
have this schematic again here I have

246
00:13:47,290 --> 00:13:52,240
yeah this is I had the the unit tests

247
00:13:52,240 --> 00:13:57,870
and the BCM SEC six package has a 17

248
00:13:57,870 --> 00:14:04,000
inverter ring oscillator I put it into a

249
00:14:04,000 --> 00:14:07,590
schematic and then you again see this

250
00:14:07,590 --> 00:14:11,920
see this batch file and you you run it

251
00:14:11,920 --> 00:14:13,450
and of course you can

252
00:14:13,450 --> 00:14:16,720
a HDL include you might know this

253
00:14:16,720 --> 00:14:19,420
command I hold it like this to ring a

254
00:14:19,420 --> 00:14:20,350
bell

255
00:14:20,350 --> 00:14:23,920
this this model include your your spy

256
00:14:23,920 --> 00:14:27,400
style or very lock style haraam sets

257
00:14:27,400 --> 00:14:30,940
that a shift and and running oscillator

258
00:14:30,940 --> 00:14:33,520
get some result that you can immediately

259
00:14:33,520 --> 00:14:38,640
new plot or visualize anyway wish and

260
00:14:38,790 --> 00:14:44,110
that's how easy as it has become yeah

261
00:14:44,110 --> 00:14:49,060
the outlook we need some corporation

262
00:14:49,060 --> 00:14:52,270
force let's work in progress on quarks

263
00:14:52,270 --> 00:14:56,200
and I hope at the Kika and there will be

264
00:14:56,200 --> 00:15:00,400
some schematic exchange someday so we

265
00:15:00,400 --> 00:15:04,500
can have this maybe this very lock

266
00:15:04,500 --> 00:15:07,660
schematic bridge or some other format

267
00:15:07,660 --> 00:15:11,350
that we can Horace I don't know it might

268
00:15:11,350 --> 00:15:14,830
make sense to have that and I hope four

269
00:15:14,830 --> 00:15:18,550
pages always and I have a lot of crap in

270
00:15:18,550 --> 00:15:21,520
the F repository that is really

271
00:15:21,520 --> 00:15:24,430
worthwhile and clever some of the things

272
00:15:24,430 --> 00:15:27,580
aren't but the point is it's possible to

273
00:15:27,580 --> 00:15:30,580
port all this in plugins and I will keep

274
00:15:30,580 --> 00:15:34,810
working on that and that's it thank you

275
00:15:34,810 --> 00:15:36,330
for listening

276
00:15:36,330 --> 00:15:43,419
[Applause]

277
00:15:52,600 --> 00:15:55,490
the question is where the binary plops

278
00:15:55,490 --> 00:15:58,459
are licensed in in license terms

279
00:15:58,459 --> 00:16:02,480
applicable to the project yes they are

280
00:16:02,480 --> 00:16:05,389
because we don't link to a kernel we

281
00:16:05,389 --> 00:16:10,579
just load the plugins so what we

282
00:16:10,579 --> 00:16:12,560
currently have is a spice wrapper you

283
00:16:12,560 --> 00:16:15,110
can come with your spice two or three

284
00:16:15,110 --> 00:16:20,060
binary blobs wrap them them into a new

285
00:16:20,060 --> 00:16:24,529
cap class link it to that the class is

286
00:16:24,529 --> 00:16:27,529
licensed you know whatever you want to

287
00:16:27,529 --> 00:16:29,800
do with it lightens so we get this

288
00:16:29,800 --> 00:16:35,000
binary blob wrapped for free and with

289
00:16:35,000 --> 00:16:38,810
every freedoms and without any license

290
00:16:38,810 --> 00:16:40,670
restrictions I can do what whatever you

291
00:16:40,670 --> 00:16:58,430
wish with that binary block there's

292
00:16:58,430 --> 00:17:01,839
another round from elf to this oh no I

293
00:17:01,839 --> 00:17:03,699
yeah

294
00:17:03,699 --> 00:17:08,949
GPL applies to distribution not use and

295
00:17:08,949 --> 00:17:12,829
so the the bit about binary blobs well

296
00:17:12,829 --> 00:17:14,750
it's not our favorite thing but

297
00:17:14,750 --> 00:17:16,520
sometimes the models come that way and

298
00:17:16,520 --> 00:17:21,020
we're stuck with it and these binary

299
00:17:21,020 --> 00:17:23,270
blobs are not binary blobs written for

300
00:17:23,270 --> 00:17:24,919
the new caps they're binary blobs that

301
00:17:24,919 --> 00:17:28,040
were written for something else possibly

302
00:17:28,040 --> 00:17:33,590
even ngspice and and and and the point

303
00:17:33,590 --> 00:17:35,840
the point is that well here's a here

304
00:17:35,840 --> 00:17:39,200
device model we want to use it I I don't

305
00:17:39,200 --> 00:17:41,690
I don't really know where it came from

306
00:17:41,690 --> 00:17:47,900
but somehow it's here and so so by

307
00:17:47,900 --> 00:17:50,080
adding an extra layer

308
00:17:50,080 --> 00:17:53,830
it it puts in a position where we can

309
00:17:53,830 --> 00:17:55,720
use this binary blob that was intended

310
00:17:55,720 --> 00:18:01,960
for something else and map it to the new

311
00:18:01,960 --> 00:18:19,350
cap interface thank you

