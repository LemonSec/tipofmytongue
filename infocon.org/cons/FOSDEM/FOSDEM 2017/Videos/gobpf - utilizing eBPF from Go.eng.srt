1
00:00:04,890 --> 00:00:10,629
good morning so my name is Mikkel I work

2
00:00:10,629 --> 00:00:11,620
for kinfolk

3
00:00:11,620 --> 00:00:15,219
we are small company from Berlin we do

4
00:00:15,219 --> 00:00:19,150
mostly Linux software and among many

5
00:00:19,150 --> 00:00:19,990
other things

6
00:00:19,990 --> 00:00:25,930
it's a BBF today so the talk is about

7
00:00:25,930 --> 00:00:29,950
copy BF it's a fairly new library to

8
00:00:29,950 --> 00:00:35,559
work with a BBS programs from go and it

9
00:00:35,559 --> 00:00:40,329
aims to help you to access the IPPF

10
00:00:40,329 --> 00:00:45,999
subsystem from your go software the talk

11
00:00:45,999 --> 00:00:48,819
is basically two parts it's the first

12
00:00:48,819 --> 00:00:52,239
part on a BBF in generous or what is it

13
00:00:52,239 --> 00:00:55,329
how does it work the basic principles

14
00:00:55,329 --> 00:00:56,049
behind it

15
00:00:56,049 --> 00:00:58,299
and in the second part we are going to

16
00:00:58,299 --> 00:01:05,170
look into go PPF which is also split

17
00:01:05,170 --> 00:01:07,720
into two parts depending on what you use

18
00:01:07,720 --> 00:01:11,619
cases and yes just see how it works in

19
00:01:11,619 --> 00:01:18,310
general so EB PF is a so-called bytecode

20
00:01:18,310 --> 00:01:22,259
virtual machine in the Linux kernel

21
00:01:22,770 --> 00:01:26,350
today it's used for tracing networking

22
00:01:26,350 --> 00:01:30,009
so software-defined networking for

23
00:01:30,009 --> 00:01:32,380
performance analysis for security

24
00:01:32,380 --> 00:01:39,520
purposes and so on the classic PPV F or

25
00:01:39,520 --> 00:01:41,890
the Berkeley packet filter is much older

26
00:01:41,890 --> 00:01:47,770
sauce or the the functionality to use to

27
00:01:47,770 --> 00:01:50,109
use it for packet filtering has been in

28
00:01:50,109 --> 00:01:51,789
the Linux kernel for a long time and

29
00:01:51,789 --> 00:02:00,210
it's used by for example TCP dump in

30
00:02:00,210 --> 00:02:05,590
1992 there was no unified way to filter

31
00:02:05,590 --> 00:02:08,590
network traffic and the beastie packet

32
00:02:08,590 --> 00:02:13,030
filter paper brought such a system which

33
00:02:13,030 --> 00:02:14,030
then was

34
00:02:14,030 --> 00:02:18,370
implemented for the Linux kernel as well

35
00:02:20,950 --> 00:02:24,080
and today it's called enhanced PPF

36
00:02:24,080 --> 00:02:26,540
because it has grown a lot more

37
00:02:26,540 --> 00:02:29,150
functionality over the usual packet

38
00:02:29,150 --> 00:02:32,690
filtering use case you can attach to

39
00:02:32,690 --> 00:02:36,130
kernel events you

40
00:02:39,099 --> 00:02:41,540
modify network packets

41
00:02:41,540 --> 00:02:46,519
drop them or to route them you can use

42
00:02:46,519 --> 00:02:50,689
it to do Cisco filtering and a lot more

43
00:02:50,689 --> 00:02:54,950
stuff a nice property is the safety

44
00:02:54,950 --> 00:02:57,200
guarantee you get through the BPF

45
00:02:57,200 --> 00:03:00,349
verifier so when you load your BPF

46
00:03:00,349 --> 00:03:03,200
program into the linux kernel it first

47
00:03:03,200 --> 00:03:05,299
gets verified because the kernel needs

48
00:03:05,299 --> 00:03:09,590
to make sure that your program isn't

49
00:03:09,590 --> 00:03:12,920
malicious it doesn't block the kernel

50
00:03:12,920 --> 00:03:14,209
forever and so on

51
00:03:14,209 --> 00:03:17,569
so after you're to get through the

52
00:03:17,569 --> 00:03:20,150
verify you can be sure that no loops in

53
00:03:20,150 --> 00:03:22,010
there that there is no invalid memory

54
00:03:22,010 --> 00:03:24,400
access and so on

55
00:03:24,400 --> 00:03:27,139
and of course you are running in the

56
00:03:27,139 --> 00:03:30,139
kernel so it's very fast and it's all

57
00:03:30,139 --> 00:03:32,689
also cheat compiled on some

58
00:03:32,689 --> 00:03:36,709
architectures so fast is a requirement

59
00:03:36,709 --> 00:03:39,470
to do for example networking so it's

60
00:03:39,470 --> 00:03:45,319
good we have done so from a high level

61
00:03:45,319 --> 00:03:47,900
perspective it looks like this in this

62
00:03:47,900 --> 00:03:52,970
space you have your program and from

63
00:03:52,970 --> 00:03:57,680
there you use the PPF Cisco or some

64
00:03:57,680 --> 00:04:00,560
library which makes your life easier to

65
00:04:00,560 --> 00:04:04,400
interact with the Linux kernel and load

66
00:04:04,400 --> 00:04:06,650
your program or your programs you can

67
00:04:06,650 --> 00:04:10,549
have many of them those live in kernel

68
00:04:10,549 --> 00:04:13,609
space of course and then you have ebps

69
00:04:13,609 --> 00:04:17,779
maps to share data between be BBF

70
00:04:17,779 --> 00:04:21,380
programs and to share data between the

71
00:04:21,380 --> 00:04:24,849
IPPF program in kernel space and your

72
00:04:24,849 --> 00:04:29,590
program running in user space

73
00:04:31,800 --> 00:04:34,830
so first a couple of details on a PDF

74
00:04:34,830 --> 00:04:38,490
programs they can be attached to sockets

75
00:04:38,490 --> 00:04:43,370
that is again the traditional use case

76
00:04:43,370 --> 00:04:47,280
so if you want to execute some IPPF

77
00:04:47,280 --> 00:04:50,430
program whenever a packet arrives you

78
00:04:50,430 --> 00:04:53,699
can use that feature you can attach to

79
00:04:53,699 --> 00:04:57,409
kernel trice points the Linux kernel

80
00:04:57,409 --> 00:05:00,060
already does define a lot of trace

81
00:05:00,060 --> 00:05:05,099
points so you often you can just look

82
00:05:05,099 --> 00:05:07,130
into what you want to trace you can

83
00:05:07,130 --> 00:05:10,229
check out kernel source tree see where

84
00:05:10,229 --> 00:05:12,240
the trace points are but what is

85
00:05:12,240 --> 00:05:14,729
available there and then maybe just

86
00:05:14,729 --> 00:05:18,599
attached to a trace point if that

87
00:05:18,599 --> 00:05:23,840
doesn't work for you k probes maybe do

88
00:05:23,840 --> 00:05:27,870
you can use k probes to to inject a

89
00:05:27,870 --> 00:05:30,960
program as a handler at a certain

90
00:05:30,960 --> 00:05:33,740
address so for example if you want to

91
00:05:33,740 --> 00:05:37,919
trace sis call a Linux Cisco you could

92
00:05:37,919 --> 00:05:40,860
use the K probe which then always

93
00:05:40,860 --> 00:05:46,199
triggers when the Cisco is executed and

94
00:05:46,199 --> 00:05:49,080
there are you probes that's basically

95
00:05:49,080 --> 00:05:51,150
the same as K probes the only difference

96
00:05:51,150 --> 00:05:54,680
is that those were are for a user space

97
00:05:54,680 --> 00:05:57,659
function calls so if you want to trace

98
00:05:57,659 --> 00:06:03,199
something there you would use u probes

99
00:06:03,889 --> 00:06:09,029
then we have maps maps are the data

100
00:06:09,029 --> 00:06:12,180
structures to share data between kernel

101
00:06:12,180 --> 00:06:15,599
and user space when you create a map you

102
00:06:15,599 --> 00:06:19,199
can say what data you want to put in

103
00:06:19,199 --> 00:06:24,240
there so it's up to you if you want to

104
00:06:24,240 --> 00:06:26,610
have an integer value in there and you

105
00:06:26,610 --> 00:06:29,069
only need to store one you can create a

106
00:06:29,069 --> 00:06:32,819
map with a size one and define that key

107
00:06:32,819 --> 00:06:36,289
and value is of type integer for example

108
00:06:36,289 --> 00:06:40,320
and there's one special a special map

109
00:06:40,320 --> 00:06:44,300
it's called a proc array and this is

110
00:06:44,300 --> 00:06:47,030
of a lookup table in the eb PF system

111
00:06:47,030 --> 00:06:52,370
which contains entries to other EPF

112
00:06:52,370 --> 00:06:55,040
functions so if you want to replace

113
00:06:55,040 --> 00:06:57,920
you're currently running a p PF program

114
00:06:57,920 --> 00:07:01,310
with another one you could look up one

115
00:07:01,310 --> 00:07:06,410
there and call it and you should be

116
00:07:06,410 --> 00:07:08,960
aware that the main page for BPF is

117
00:07:08,960 --> 00:07:12,020
rather out-of-date so it's it can be

118
00:07:12,020 --> 00:07:16,220
pretty hard to to get information under

119
00:07:16,220 --> 00:07:18,530
available programs or map types and you

120
00:07:18,530 --> 00:07:21,530
should look into the source code so I

121
00:07:21,530 --> 00:07:24,680
think right now maybe for map types are

122
00:07:24,680 --> 00:07:26,660
in the main page and in Linux for two

123
00:07:26,660 --> 00:07:30,200
point ten or eight or ten map map types

124
00:07:30,200 --> 00:07:39,190
so it's not super up-to-date yeah that's

125
00:07:39,190 --> 00:07:44,090
the list of existing Maps right now we

126
00:07:44,090 --> 00:07:46,070
have a hash which actually works like

127
00:07:46,070 --> 00:07:48,380
you would expect from a hash or map key

128
00:07:48,380 --> 00:07:51,500
value we have an array and then we have

129
00:07:51,500 --> 00:07:56,150
different types for special use cases I

130
00:07:56,150 --> 00:08:00,500
will show you one in detail and that is

131
00:08:00,500 --> 00:08:04,760
type perfect mental ray so it's an array

132
00:08:04,760 --> 00:08:08,270
of file descriptors with perfect when

133
00:08:08,270 --> 00:08:14,150
theta and the nice thing about it is

134
00:08:14,150 --> 00:08:17,600
that kernel can just write into a ring

135
00:08:17,600 --> 00:08:19,910
buffer and doesn't have to wait for you

136
00:08:19,910 --> 00:08:23,930
in user space and the user space program

137
00:08:23,930 --> 00:08:26,210
can then map the memory of the ring

138
00:08:26,210 --> 00:08:30,110
buffer and read from it asynchronously

139
00:08:30,110 --> 00:08:34,370
and that's also a type of map that you

140
00:08:34,370 --> 00:08:39,110
often would use when you use K probes to

141
00:08:39,110 --> 00:08:42,580
trace something and we will see that in

142
00:08:42,580 --> 00:08:48,680
one example later so to give you an idea

143
00:08:48,680 --> 00:08:51,140
how BBF looks like when you really write

144
00:08:51,140 --> 00:08:54,980
a BPF assembly or soda assembly I will

145
00:08:54,980 --> 00:08:55,610
show you

146
00:08:55,610 --> 00:08:59,209
a short code snippet but you don't have

147
00:08:59,209 --> 00:09:03,440
usually have to do that so that's a very

148
00:09:03,440 --> 00:09:06,050
small program you could load into the

149
00:09:06,050 --> 00:09:11,630
kernel as is to count FJ its syscalls

150
00:09:11,630 --> 00:09:14,180
so whenever the Cisco gets called it

151
00:09:14,180 --> 00:09:18,850
increments the counter by one and exit

152
00:09:18,850 --> 00:09:22,850
and yeah as you can see is it looks

153
00:09:22,850 --> 00:09:24,740
rather tricky and it's not very

154
00:09:24,740 --> 00:09:28,430
approachable so fortunately we don't

155
00:09:28,430 --> 00:09:33,130
have to have to do that but we can use

156
00:09:33,130 --> 00:09:42,890
tooling around enhance PPF and modern

157
00:09:42,890 --> 00:09:49,490
tracing tools on Linux there is the the

158
00:09:49,490 --> 00:09:51,800
AIA Weiser project you can find it on

159
00:09:51,800 --> 00:09:56,110
github and also on irise the dot org so

160
00:09:56,110 --> 00:09:59,120
if you are into that and want to learn

161
00:09:59,120 --> 00:10:02,269
more about the available tools find

162
00:10:02,269 --> 00:10:04,160
documentation and so on that's a good

163
00:10:04,160 --> 00:10:07,510
place to start

164
00:10:10,090 --> 00:10:15,610
so now on go BPF it's I said before a

165
00:10:15,610 --> 00:10:18,310
liable library to create load and you

166
00:10:18,310 --> 00:10:20,980
see BPF programs and it's actually two

167
00:10:20,980 --> 00:10:24,160
subjects addresses it's one which allows

168
00:10:24,160 --> 00:10:28,150
you to use Segoe and the BPF compiler

169
00:10:28,150 --> 00:10:30,970
collection and a second package which

170
00:10:30,970 --> 00:10:34,750
allows you to use pre-built elf object

171
00:10:34,750 --> 00:10:37,690
files and we will have a quick look on

172
00:10:37,690 --> 00:10:43,810
both part why go PBF when we started

173
00:10:43,810 --> 00:10:45,400
working in that area there was no

174
00:10:45,400 --> 00:10:48,370
library yet which did what we wanted to

175
00:10:48,370 --> 00:10:53,500
do but we found who a project from IO

176
00:10:53,500 --> 00:10:58,600
visor which wants to be they call it

177
00:10:58,600 --> 00:11:00,880
data plane so I think the idea is that

178
00:11:00,880 --> 00:11:03,010
you have a demon on your system and then

179
00:11:03,010 --> 00:11:07,570
you ask the demon be an API for system

180
00:11:07,570 --> 00:11:10,030
data and the program then loads for

181
00:11:10,030 --> 00:11:13,150
example some eb bf program to provide

182
00:11:13,150 --> 00:11:19,360
you with the necessary data and second

183
00:11:19,360 --> 00:11:22,870
reason is we work on with scope which is

184
00:11:22,870 --> 00:11:27,100
a tool to do cluster monitoring so for

185
00:11:27,100 --> 00:11:29,500
example Kuban it is and this is written

186
00:11:29,500 --> 00:11:34,150
in go and it also needs to get a lot of

187
00:11:34,150 --> 00:11:37,450
data from your system so for example

188
00:11:37,450 --> 00:11:40,360
running processes containers network

189
00:11:40,360 --> 00:11:45,280
connections and right now their approach

190
00:11:45,280 --> 00:11:49,690
is to to pass proc and check the

191
00:11:49,690 --> 00:11:55,570
contract tables and this is rather

192
00:11:55,570 --> 00:11:58,450
difficult to do because you have to scan

193
00:11:58,450 --> 00:12:00,670
a lot of data and that's very fast and

194
00:12:00,670 --> 00:12:02,650
when you have a lot of processes or a

195
00:12:02,650 --> 00:12:06,040
lot of containers it can be tricky to do

196
00:12:06,040 --> 00:12:09,520
that reliable and fast and depending on

197
00:12:09,520 --> 00:12:11,080
the use case it's much nice that you

198
00:12:11,080 --> 00:12:13,720
have a BBF there because the kernel is

199
00:12:13,720 --> 00:12:17,860
doing a lot of work and you just have to

200
00:12:17,860 --> 00:12:21,360
read the events then

201
00:12:21,750 --> 00:12:25,199
so when you use the bcc package from go

202
00:12:25,199 --> 00:12:31,790
PPF you can write your program in in C

203
00:12:31,790 --> 00:12:34,949
it's a modified C language for BPF

204
00:12:34,949 --> 00:12:37,800
back-end so it feels like C you have to

205
00:12:37,800 --> 00:12:41,550
be careful about a couple of constraints

206
00:12:41,550 --> 00:12:45,449
because in the end the BCC will build an

207
00:12:45,449 --> 00:12:48,689
e BB F tool out of it and it has to pass

208
00:12:48,689 --> 00:12:53,189
the kernel verifier but it makes things

209
00:12:53,189 --> 00:12:55,649
a lot easier you have a lot of helper

210
00:12:55,649 --> 00:13:00,930
functions interacting with a map is much

211
00:13:00,930 --> 00:13:04,230
more comfortable than assembly code we

212
00:13:04,230 --> 00:13:10,500
saw before and so on lips easy lip easy

213
00:13:10,500 --> 00:13:12,660
C actually is not only the library which

214
00:13:12,660 --> 00:13:15,209
helps you to write your program but it's

215
00:13:15,209 --> 00:13:19,170
also a compiler so the it works like you

216
00:13:19,170 --> 00:13:21,990
you pass it your program a source code

217
00:13:21,990 --> 00:13:24,180
either you read it from a file or you

218
00:13:24,180 --> 00:13:26,309
just have it in your go code and some

219
00:13:26,309 --> 00:13:30,949
constant for example and then it

220
00:13:30,949 --> 00:13:33,839
translates your program into BPF

221
00:13:33,839 --> 00:13:39,829
bytecode so we can actually verify it or

222
00:13:39,829 --> 00:13:43,559
GCC verifies it for you before it gets

223
00:13:43,559 --> 00:13:47,730
passed to the kernel and BCC also

224
00:13:47,730 --> 00:13:49,170
provides you with a lot of headers

225
00:13:49,170 --> 00:13:52,500
before you often had to import kernel

226
00:13:52,500 --> 00:13:55,279
headers to have all the necessary

227
00:13:55,279 --> 00:13:59,759
definitions for BPF and all that is in

228
00:13:59,759 --> 00:14:05,069
BCC so it's really a nice library and

229
00:14:05,069 --> 00:14:08,579
you should check it out if you want so I

230
00:14:08,579 --> 00:14:11,550
will show you a bit of source code this

231
00:14:11,550 --> 00:14:16,529
is a snippet from from the example tool

232
00:14:16,529 --> 00:14:22,589
in the go PPF repository and as you can

233
00:14:22,589 --> 00:14:26,279
see here we just define a source were

234
00:14:26,279 --> 00:14:31,350
variable and put our C code in there two

235
00:14:31,350 --> 00:14:34,090
important things here one is

236
00:14:34,090 --> 00:14:37,690
we define a struct of type Joan event

237
00:14:37,690 --> 00:14:44,020
and then we define an array and it's of

238
00:14:44,020 --> 00:14:47,860
type perfume and as we saw before where

239
00:14:47,860 --> 00:14:50,710
we are going to write those events so

240
00:14:50,710 --> 00:14:54,670
that's the map which we then can read

241
00:14:54,670 --> 00:14:58,960
from user space later and the go part

242
00:14:58,960 --> 00:15:01,660
looks like this here we load the source

243
00:15:01,660 --> 00:15:04,450
code then we get a reference on the

244
00:15:04,450 --> 00:15:09,850
table then we get the reference as a

245
00:15:09,850 --> 00:15:13,230
perf map and we pass it the channel and

246
00:15:13,230 --> 00:15:16,060
then we can read from the channel the

247
00:15:16,060 --> 00:15:19,600
events so we have a loop we just wait

248
00:15:19,600 --> 00:15:22,380
for data and whenever there is data we

249
00:15:22,380 --> 00:15:29,710
print it and in copy pfpc see it looks

250
00:15:29,710 --> 00:15:33,100
like this we open a perf buffer and we

251
00:15:33,100 --> 00:15:37,690
give it a callback cookie and then we

252
00:15:37,690 --> 00:15:41,589
have a gateway function which takes the

253
00:15:41,589 --> 00:15:45,060
cookie looks up the handler data and

254
00:15:45,060 --> 00:15:53,380
sends back the event data so I will

255
00:15:53,380 --> 00:15:57,100
quickly show that to you so here we have

256
00:15:57,100 --> 00:16:02,770
the example program and since you need

257
00:16:02,770 --> 00:16:05,650
root permissions for the EPF syscall I

258
00:16:05,650 --> 00:16:12,040
am root here and when I now do some

259
00:16:12,040 --> 00:16:14,170
action here you can see we get an event

260
00:16:14,170 --> 00:16:19,360
and we get a correct report on what was

261
00:16:19,360 --> 00:16:22,180
happening and also the return value so I

262
00:16:22,180 --> 00:16:24,100
was not allowed to do the second

263
00:16:24,100 --> 00:16:27,040
operation permission denied and here is

264
00:16:27,040 --> 00:16:33,750
the return value not zero yeah so

265
00:16:37,820 --> 00:16:40,640
the second package in Gil PBF itself so

266
00:16:40,640 --> 00:16:43,990
if you don't want to translate your

267
00:16:43,990 --> 00:16:48,680
program before you actually use it or if

268
00:16:48,680 --> 00:16:53,930
you cannot ship BCC le PCC on all your

269
00:16:53,930 --> 00:16:57,860
systems because maybe it's too large and

270
00:16:57,860 --> 00:16:59,900
your containers should be small and tiny

271
00:16:59,900 --> 00:17:02,650
then you could think about using

272
00:17:02,650 --> 00:17:08,329
precompiled object files this feature

273
00:17:08,329 --> 00:17:11,839
relies on elf sections so in Linux else

274
00:17:11,839 --> 00:17:17,440
fails you have sections and by defining

275
00:17:17,440 --> 00:17:21,079
by setting a particular section name so

276
00:17:21,079 --> 00:17:22,940
here for example okay Redbridge for a

277
00:17:22,940 --> 00:17:28,880
return probe we allow go PPF to detect

278
00:17:28,880 --> 00:17:30,950
from the elf file how the contents

279
00:17:30,950 --> 00:17:37,670
should be loaded if you are interested

280
00:17:37,670 --> 00:17:39,410
in that you could have a look on the TCP

281
00:17:39,410 --> 00:17:41,750
tracer BPF package from with works it's

282
00:17:41,750 --> 00:17:46,460
as the name says a TCP tracer and we

283
00:17:46,460 --> 00:17:51,200
plan to use that and scope so it does

284
00:17:51,200 --> 00:17:53,990
exactly that it's a very small C program

285
00:17:53,990 --> 00:17:56,090
it gets compiled to an alpha object file

286
00:17:56,090 --> 00:17:59,560
and dividend later loaded with copy bf2

287
00:17:59,560 --> 00:18:07,490
to trace TCP connections yeah you can

288
00:18:07,490 --> 00:18:10,280
create such object files with clang I

289
00:18:10,280 --> 00:18:13,450
think the BPF beckoned has been in the

290
00:18:13,450 --> 00:18:16,360
static compiler for quite some while so

291
00:18:16,360 --> 00:18:20,720
you first produce bit code object file

292
00:18:20,720 --> 00:18:24,110
and feed that into the compiler and then

293
00:18:24,110 --> 00:18:29,170
by selecting architecture BPF you

294
00:18:29,170 --> 00:18:35,740
generate the BPF bytecode for later use

295
00:18:39,280 --> 00:18:41,800
nice or tricky feature of go ppl have

296
00:18:41,800 --> 00:18:44,680
alpha state you can create your program

297
00:18:44,680 --> 00:18:50,710
for multiple kernel versions usually you

298
00:18:50,710 --> 00:18:52,990
have to tell the colonel when you load

299
00:18:52,990 --> 00:18:55,390
the program for which version it was

300
00:18:55,390 --> 00:18:57,160
written because the kernel will only

301
00:18:57,160 --> 00:18:58,900
accept the program which was written

302
00:18:58,900 --> 00:19:00,550
exactly for the version you are running

303
00:19:00,550 --> 00:19:04,840
and this can be tricky when you have a

304
00:19:04,840 --> 00:19:07,000
patch release of the Linux kernel you

305
00:19:07,000 --> 00:19:09,460
maybe don't want to recompile your

306
00:19:09,460 --> 00:19:17,200
program so we built in this feature when

307
00:19:17,200 --> 00:19:19,600
you set it to this constant we will try

308
00:19:19,600 --> 00:19:22,150
to guess the the current kernel version

309
00:19:22,150 --> 00:19:24,730
during runtime and then just say to the

310
00:19:24,730 --> 00:19:26,290
kernel you have rebuild it for the two

311
00:19:26,290 --> 00:19:31,300
version you can do that it can be tricky

312
00:19:31,300 --> 00:19:33,940
because sometimes kernel structures

313
00:19:33,940 --> 00:19:37,210
change functions change a bit depending

314
00:19:37,210 --> 00:19:39,520
on what you do in your EB bf program it

315
00:19:39,520 --> 00:19:42,880
could break afterwards so you should

316
00:19:42,880 --> 00:19:44,710
know what you can expect from the corner

317
00:19:44,710 --> 00:19:52,380
or what you rely on and one last word

318
00:19:52,380 --> 00:19:55,440
continuous integration is also tricky

319
00:19:55,440 --> 00:19:58,690
you need root access you need a modern

320
00:19:58,690 --> 00:20:00,670
kernel you often don't have that so if

321
00:20:00,670 --> 00:20:03,460
you ever need to test Linux kernel

322
00:20:03,460 --> 00:20:06,130
features have a look on stage 1 builder

323
00:20:06,130 --> 00:20:09,670
on the stage 1 build a project with here

324
00:20:09,670 --> 00:20:15,880
we used rocket for custom we use rocket

325
00:20:15,880 --> 00:20:19,450
with a custom stage 1 image which allows

326
00:20:19,450 --> 00:20:22,680
us to test any workloads on CI systems

327
00:20:22,680 --> 00:20:28,560
and time is up I believe so that's it

328
00:20:35,020 --> 00:20:38,570
we have time for questions wrong need

329
00:20:38,570 --> 00:20:41,450
some time to build up anyone having a

330
00:20:41,450 --> 00:20:46,400
question yeah yeah actually I have two

331
00:20:46,400 --> 00:20:50,570
questions first I don't I didn't get the

332
00:20:50,570 --> 00:20:52,730
main idea behind using BB F in that

333
00:20:52,730 --> 00:20:55,190
context of tracing and it's firstly used

334
00:20:55,190 --> 00:20:57,410
in networking especially for filtering

335
00:20:57,410 --> 00:21:00,320
packets so what are the the new features

336
00:21:00,320 --> 00:21:03,590
that give it this good reputation second

337
00:21:03,590 --> 00:21:07,190
in the context of tracing what about its

338
00:21:07,190 --> 00:21:09,050
overhead compared to other route racing

339
00:21:09,050 --> 00:21:11,450
towards like the truss or system tab and

340
00:21:11,450 --> 00:21:15,550
how we can measure it thank you

341
00:21:19,100 --> 00:21:25,520
I think I will start with the second

342
00:21:25,520 --> 00:21:28,460
question so I think the main feature the

343
00:21:28,460 --> 00:21:31,700
main advantage is that you can have it

344
00:21:31,700 --> 00:21:33,500
in mainline kernel you don't need to

345
00:21:33,500 --> 00:21:35,690
need to have any extra modules it's

346
00:21:35,690 --> 00:21:42,560
supported by upstream yeah and regarding

347
00:21:42,560 --> 00:21:46,850
the first questions or many a lot of the

348
00:21:46,850 --> 00:21:49,310
functionality wasn't possible before so

349
00:21:49,310 --> 00:21:50,750
maybe you know Brendan Gregg from

350
00:21:50,750 --> 00:21:54,170
Netflix who has been doing this for a

351
00:21:54,170 --> 00:21:58,610
long time and dtrace from Solaris always

352
00:21:58,610 --> 00:22:01,550
was quite powerful of to trace systems

353
00:22:01,550 --> 00:22:06,110
and Linux for a long time didn't give

354
00:22:06,110 --> 00:22:10,340
you the same features to trace programs

355
00:22:10,340 --> 00:22:11,500
[Music]

356
00:22:11,500 --> 00:22:14,960
regarding networking of one feature from

357
00:22:14,960 --> 00:22:20,060
EBP eff is fast data path xdp it's used

358
00:22:20,060 --> 00:22:24,080
for example by the cilium project so

359
00:22:24,080 --> 00:22:26,690
they do contain a security and

360
00:22:26,690 --> 00:22:29,960
networking with EP PF and this is

361
00:22:29,960 --> 00:22:34,030
something you couldn't do before

362
00:22:34,600 --> 00:22:39,909
any other questions nope okay thank you

363
00:22:39,909 --> 00:22:40,680
very much

364
00:22:40,680 --> 00:22:47,579
[Applause]

