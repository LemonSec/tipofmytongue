1
00:00:04,700 --> 00:00:14,570
okay we can start it's time so I'm

2
00:00:14,570 --> 00:00:16,309
actually one of those people who is

3
00:00:16,309 --> 00:00:17,840
using geeks in the production

4
00:00:17,840 --> 00:00:20,480
environment and in the web website is

5
00:00:20,480 --> 00:00:26,019
called Jean Network org it's hosted by

6
00:00:26,019 --> 00:00:27,890
University of Tennessee Health Science

7
00:00:27,890 --> 00:00:31,579
Center in Memphis and this is a site

8
00:00:31,579 --> 00:00:33,260
that has been developed over the last 20

9
00:00:33,260 --> 00:00:36,859
years yes so even though it's it's in

10
00:00:36,859 --> 00:00:39,170
essentially a simple set up you know

11
00:00:39,170 --> 00:00:43,250
we're running Titan and my sequel to

12
00:00:43,250 --> 00:00:45,949
offer these services I'm gonna explain

13
00:00:45,949 --> 00:00:47,989
to you you know how it got out of hand a

14
00:00:47,989 --> 00:00:53,059
bit anyway what is what does geeks to be

15
00:00:53,059 --> 00:00:58,599
it's it's all about sleeping at night

16
00:01:00,070 --> 00:01:02,749
yeah I mean the last 20 years I've been

17
00:01:02,749 --> 00:01:06,080
managing systems and sometimes you know

18
00:01:06,080 --> 00:01:07,670
running 40 servers or something in that

19
00:01:07,670 --> 00:01:10,790
order and you would get a call in the

20
00:01:10,790 --> 00:01:11,960
middle of the night and somebody says

21
00:01:11,960 --> 00:01:13,369
you know hey you get a run to the data

22
00:01:13,369 --> 00:01:15,560
center you know that's something I

23
00:01:15,560 --> 00:01:17,869
really want to avoid I could have

24
00:01:17,869 --> 00:01:20,600
somebody else go now I think but if it's

25
00:01:20,600 --> 00:01:25,880
so you know we are doing better so it's

26
00:01:25,880 --> 00:01:27,500
about control software deployment and

27
00:01:27,500 --> 00:01:29,229
it's about controlling the full

28
00:01:29,229 --> 00:01:31,130
dependency graph and I'll explain that

29
00:01:31,130 --> 00:01:34,880
in a bit and also what you want to do is

30
00:01:34,880 --> 00:01:36,950
salute also nicely pointed out you want

31
00:01:36,950 --> 00:01:38,719
your system to be deterministic you know

32
00:01:38,719 --> 00:01:40,759
once you deploy it you want to be you

33
00:01:40,759 --> 00:01:42,950
want to really know it's the one that

34
00:01:42,950 --> 00:01:45,670
you actually deployed

35
00:01:46,430 --> 00:01:49,510
no sorry

36
00:01:49,600 --> 00:01:51,150
so I'm going to talk about four things

37
00:01:51,150 --> 00:01:54,190
one is deployments in a developing

38
00:01:54,190 --> 00:01:55,120
testing staging and production

39
00:01:55,120 --> 00:01:58,060
environment the second point I want to

40
00:01:58,060 --> 00:01:59,710
discuss is easy installation and I'll

41
00:01:59,710 --> 00:02:01,360
get to yeah that will be the longest

42
00:02:01,360 --> 00:02:05,290
point distributed workflows I'll discuss

43
00:02:05,290 --> 00:02:07,210
shortly and then orchestration of

44
00:02:07,210 --> 00:02:09,940
services is something we could see as

45
00:02:09,940 --> 00:02:12,509
the next step

46
00:02:16,879 --> 00:02:20,689
so when you talk about deployment he

47
00:02:20,689 --> 00:02:23,900
never is essentially simple but it's all

48
00:02:23,900 --> 00:02:25,459
about dependencies you know and there's

49
00:02:25,459 --> 00:02:26,900
a link here at the bottom this this

50
00:02:26,900 --> 00:02:30,139
slide you can you can find online and

51
00:02:30,139 --> 00:02:33,049
I'm gonna educate you a little bit what

52
00:02:33,049 --> 00:02:36,950
it looks like so this is a graph that is

53
00:02:36,950 --> 00:02:39,650
being produced by by geeks you know when

54
00:02:39,650 --> 00:02:41,209
you put all the dependencies together it

55
00:02:41,209 --> 00:02:44,659
can show you an SVG and I hope I can

56
00:02:44,659 --> 00:02:50,200
scroll it yeah so somewhere at the top

57
00:02:50,200 --> 00:02:52,939
there's G Network right so this is this

58
00:02:52,939 --> 00:02:56,329
is actually the starting point so G

59
00:02:56,329 --> 00:02:59,620
network depends on quite a few things

60
00:02:59,620 --> 00:03:02,959
and let's go sideways see what's here so

61
00:03:02,959 --> 00:03:05,900
there's this Redis okay in this our TTL

62
00:03:05,900 --> 00:03:09,409
which is an our library there's part in

63
00:03:09,409 --> 00:03:15,590
parallel in there so it for the okay so

64
00:03:15,590 --> 00:03:17,599
here are some of the art packages many

65
00:03:17,599 --> 00:03:20,480
of which ricardo has has made has

66
00:03:20,480 --> 00:03:25,989
packaged yes yeah it continued for a bit

67
00:03:25,989 --> 00:03:29,599
and then let's see there's also some

68
00:03:29,599 --> 00:03:37,060
where oops how to configure so false

69
00:03:37,060 --> 00:03:41,930
cups is even there don't knows why so

70
00:03:41,930 --> 00:03:44,269
this is the glitzy stuff and then we're

71
00:03:44,269 --> 00:03:48,979
getting in XML parsing we're getting

72
00:03:48,979 --> 00:03:53,120
into forms the X X to some X stuff

73
00:03:53,120 --> 00:03:56,919
somehow so how's it all possible

74
00:03:56,919 --> 00:03:59,060
let's see what's here I'm missing out on

75
00:03:59,060 --> 00:04:00,889
the Python stuff because it's also quite

76
00:04:00,889 --> 00:04:03,099
huge

77
00:04:04,930 --> 00:04:09,379
anyway how's that for is there bell

78
00:04:09,379 --> 00:04:11,060
grinds even there wipsy is fortunately

79
00:04:11,060 --> 00:04:17,750
there quartz it is blip anyway so to

80
00:04:17,750 --> 00:04:19,850
build a assistant deterministically you

81
00:04:19,850 --> 00:04:21,470
know you have the immediate dependencies

82
00:04:21,470 --> 00:04:23,060
which are quite obvious yes oh yeah

83
00:04:23,060 --> 00:04:25,010
maybe you're using side pipe

84
00:04:25,010 --> 00:04:27,080
yeah or arc ETL which depends on a few

85
00:04:27,080 --> 00:04:29,449
other our packages but you also you know

86
00:04:29,449 --> 00:04:31,100
to get to these environments to deploy

87
00:04:31,100 --> 00:04:32,780
it these packages have their own

88
00:04:32,780 --> 00:04:34,970
dependencies yes so when I showed this

89
00:04:34,970 --> 00:04:37,729
to my professor he said how come rubies

90
00:04:37,729 --> 00:04:41,240
in there yeah it's not supposed to be

91
00:04:41,240 --> 00:04:42,800
any ruby in there yeah but there's a

92
00:04:42,800 --> 00:04:44,150
dependency on ruby somewhere you know

93
00:04:44,150 --> 00:04:47,330
one of these packages requires ruby yeah

94
00:04:47,330 --> 00:04:48,590
so this is the stuff we're finding out

95
00:04:48,590 --> 00:04:50,030
and the versioning is extremely

96
00:04:50,030 --> 00:04:51,979
important right I mean when you want to

97
00:04:51,979 --> 00:04:53,360
have something deterministic you don't

98
00:04:53,360 --> 00:04:55,520
want to under your you know to be

99
00:04:55,520 --> 00:04:57,620
building on shifting sand yeah so we

100
00:04:57,620 --> 00:04:59,630
have actually one thing I didn't show

101
00:04:59,630 --> 00:05:01,039
you but there are three pythons in there

102
00:05:01,039 --> 00:05:04,070
this part in 2.4 part in 2.7 and part in

103
00:05:04,070 --> 00:05:07,250
3.3 I think or 3.1 wherever they are yes

104
00:05:07,250 --> 00:05:09,320
so there are packages also depending on

105
00:05:09,320 --> 00:05:14,750
different pythons yeah so let's go back

106
00:05:14,750 --> 00:05:17,380
to the slides

107
00:05:18,430 --> 00:05:20,750
yes so essentially what is simple is

108
00:05:20,750 --> 00:05:22,690
it's actually not so simple

109
00:05:22,690 --> 00:05:25,220
yeah and there there's also dependencies

110
00:05:25,220 --> 00:05:27,050
for open Blas and Atlas which are kind

111
00:05:27,050 --> 00:05:29,480
of competing libraries and then there's

112
00:05:29,480 --> 00:05:31,130
the Ruby dependency and the number of

113
00:05:31,130 --> 00:05:32,450
dependencies is actually growing over

114
00:05:32,450 --> 00:05:34,040
time yeah and if any time you add a

115
00:05:34,040 --> 00:05:35,860
package you'll get more dependents in

116
00:05:35,860 --> 00:05:39,680
and I've so far avoided doing the

117
00:05:39,680 --> 00:05:43,700
JavaScript stuff because the JavaScript

118
00:05:43,700 --> 00:05:45,320
we're loading at Hawke now which which

119
00:05:45,320 --> 00:05:48,290
NPM is actually great if the node

120
00:05:48,290 --> 00:05:50,150
package manager but it's it's such a

121
00:05:50,150 --> 00:05:56,660
mess it's unbelievable am i doing for

122
00:05:56,660 --> 00:06:01,750
time so

123
00:06:03,900 --> 00:06:05,820
also in development the developers were

124
00:06:05,820 --> 00:06:07,590
using differents systems essentially

125
00:06:07,590 --> 00:06:09,180
right I mean they were doing it ad hoc

126
00:06:09,180 --> 00:06:10,950
so you say okay I want Python so you

127
00:06:10,950 --> 00:06:13,169
install Python yeah you want to install

128
00:06:13,169 --> 00:06:14,850
sy PI you will get a version of side PI

129
00:06:14,850 --> 00:06:17,160
and and now this raises real questions

130
00:06:17,160 --> 00:06:20,010
we know if you find a bug is it actually

131
00:06:20,010 --> 00:06:22,470
you know inside the code base itself or

132
00:06:22,470 --> 00:06:24,450
is it inside the you know downline

133
00:06:24,450 --> 00:06:26,310
dependencies there's not a chance of

134
00:06:26,310 --> 00:06:28,830
reproducing these yeah unless you work

135
00:06:28,830 --> 00:06:33,060
on exactly the same machine so I you

136
00:06:33,060 --> 00:06:35,070
know a year ago heroic ly I started

137
00:06:35,070 --> 00:06:38,360
packaging this stuff and II knew geeks

138
00:06:38,360 --> 00:06:40,650
basically essentially what I did is I

139
00:06:40,650 --> 00:06:44,130
took a check out of the geeks itself yes

140
00:06:44,130 --> 00:06:46,200
so I took I started from the trunk of of

141
00:06:46,200 --> 00:06:50,330
geeks and start building it from there

142
00:06:50,330 --> 00:06:53,040
yeah this means that you know at that

143
00:06:53,040 --> 00:06:56,130
point in time I sort of fixated the

144
00:06:56,130 --> 00:06:58,139
environment right so I was using exactly

145
00:06:58,139 --> 00:07:00,330
that version of Python and I was already

146
00:07:00,330 --> 00:07:03,150
was in geeks the problem with geeks is

147
00:07:03,150 --> 00:07:05,250
that if you if you keep updating the

148
00:07:05,250 --> 00:07:07,320
gates the get tree of geeks itself these

149
00:07:07,320 --> 00:07:09,780
packages changed also right so over time

150
00:07:09,780 --> 00:07:12,570
you'll you'll be hitting issues with

151
00:07:12,570 --> 00:07:13,620
dependencies that are not working

152
00:07:13,620 --> 00:07:18,229
anymore so I fixated it in February and

153
00:07:18,229 --> 00:07:20,220
next to that I was using the geeks

154
00:07:20,220 --> 00:07:22,229
package part so I put in my own packages

155
00:07:22,229 --> 00:07:25,740
right Oh our own packages and in this in

156
00:07:25,740 --> 00:07:27,930
this repository link is here there now

157
00:07:27,930 --> 00:07:31,950
some 100 plus packages and some of them

158
00:07:31,950 --> 00:07:33,120
are duplicates not with the truck

159
00:07:33,120 --> 00:07:34,979
because the trunk has moved on yeah and

160
00:07:34,979 --> 00:07:36,450
I actually did synchronize in August

161
00:07:36,450 --> 00:07:39,600
last year and it was non-trivial

162
00:07:39,600 --> 00:07:41,700
actually to move from February yeah

163
00:07:41,700 --> 00:07:42,870
because there were a number of packages

164
00:07:42,870 --> 00:07:44,910
that you know were duplicates but

165
00:07:44,910 --> 00:07:46,080
they're also package that that somehow

166
00:07:46,080 --> 00:07:47,789
we're broken so I had to revert on

167
00:07:47,789 --> 00:07:51,120
things yeah so switching you know half

168
00:07:51,120 --> 00:07:55,100
after half year to a new and updated

169
00:07:55,100 --> 00:07:58,380
geeks tree is non-trivial actually you

170
00:07:58,380 --> 00:08:00,330
know it's I'm not looking forward to the

171
00:08:00,330 --> 00:08:01,590
next one because it's going to cost me a

172
00:08:01,590 --> 00:08:02,580
day maybe two days

173
00:08:02,580 --> 00:08:04,500
it's it'll be possible yeah but it's

174
00:08:04,500 --> 00:08:05,490
it's something that it's work that

175
00:08:05,490 --> 00:08:08,630
you're never looking forward to

176
00:08:09,750 --> 00:08:12,460
so another solution I put in is using

177
00:08:12,460 --> 00:08:15,550
shared profiles so essentially what we

178
00:08:15,550 --> 00:08:17,020
do now is we have G network we've

179
00:08:17,020 --> 00:08:19,120
fixated that the the the geeks tree we

180
00:08:19,120 --> 00:08:21,100
fix it at the geeks package path with

181
00:08:21,100 --> 00:08:23,170
their own packages and then we deploy it

182
00:08:23,170 --> 00:08:25,240
all right so we deployed in something

183
00:08:25,240 --> 00:08:28,090
called user local shared GN staging so

184
00:08:28,090 --> 00:08:30,520
this is a staging branch and then the

185
00:08:30,520 --> 00:08:33,900
version of the of the of the tree right

186
00:08:33,900 --> 00:08:36,099
so when we get to the next stage if we

187
00:08:36,099 --> 00:08:37,720
want to move it to production will

188
00:08:37,720 --> 00:08:38,919
actually do is I'll mount it on our

189
00:08:38,919 --> 00:08:40,870
mounted profile on the user local shared

190
00:08:40,870 --> 00:08:43,599
GM production with this particular

191
00:08:43,599 --> 00:08:45,190
version you know so we said this is how

192
00:08:45,190 --> 00:08:46,000
we move forward

193
00:08:46,000 --> 00:08:48,910
and although the developers they did and

194
00:08:48,910 --> 00:08:51,220
you know deployment people they share

195
00:08:51,220 --> 00:08:53,350
the same structure so we know exactly at

196
00:08:53,350 --> 00:08:54,730
any point in time what is actually in

197
00:08:54,730 --> 00:08:58,870
gene network 2.0 8fc ff4 yeah based on

198
00:08:58,870 --> 00:09:02,700
the orchids August check out of geeks

199
00:09:04,170 --> 00:09:06,029
so geeks channels could be an

200
00:09:06,029 --> 00:09:07,500
improvement and that's what I'm gonna

201
00:09:07,500 --> 00:09:11,220
touch and in a bit so some some

202
00:09:11,220 --> 00:09:12,269
discussion we have on the maintenance

203
00:09:12,269 --> 00:09:15,800
will this yeah

204
00:09:15,800 --> 00:09:18,630
heat channels do not exist at this point

205
00:09:18,630 --> 00:09:22,920
right but the idea is that we fix that

206
00:09:22,920 --> 00:09:24,540
we allow people to provide different

207
00:09:24,540 --> 00:09:26,790
versions of the get health of the geeks

208
00:09:26,790 --> 00:09:29,940
tree yeah so for example you know if you

209
00:09:29,940 --> 00:09:32,700
are you have a product like T Network

210
00:09:32,700 --> 00:09:34,500
and I want to tell somebody else you

211
00:09:34,500 --> 00:09:36,450
know please install this product at this

212
00:09:36,450 --> 00:09:38,459
version I would provide them a channel

213
00:09:38,459 --> 00:09:39,750
essentially I would say I would tell

214
00:09:39,750 --> 00:09:42,390
them you know say tell geeks to use this

215
00:09:42,390 --> 00:09:44,279
channel and from that point onwards you

216
00:09:44,279 --> 00:09:45,600
know you'll be installing software from

217
00:09:45,600 --> 00:09:49,140
that particular version of the tree and

218
00:09:49,140 --> 00:09:51,990
that's that's ideally what I want and

219
00:09:51,990 --> 00:09:53,430
you can also roll backwards you could

220
00:09:53,430 --> 00:09:55,290
say okay you know I have you know Ruby

221
00:09:55,290 --> 00:09:57,839
one point eight point seven it's very

222
00:09:57,839 --> 00:09:59,640
old Ruby and sometimes you need it yeah

223
00:09:59,640 --> 00:10:01,200
you could actually provide a channel for

224
00:10:01,200 --> 00:10:02,640
that say okay I'm gonna provide a ruby

225
00:10:02,640 --> 00:10:03,870
one point eight point seven channel that

226
00:10:03,870 --> 00:10:05,579
other people can use right which is

227
00:10:05,579 --> 00:10:07,410
which is disconnected from the main

228
00:10:07,410 --> 00:10:07,860
geeks

229
00:10:07,860 --> 00:10:14,550
branch and maybe Peaks trunk another

230
00:10:14,550 --> 00:10:16,260
thing that is a problem if you know

231
00:10:16,260 --> 00:10:18,089
geeks package path at this point is

232
00:10:18,089 --> 00:10:19,560
disconnected because it actually doesn't

233
00:10:19,560 --> 00:10:22,890
look like the geeks tree itself right so

234
00:10:22,890 --> 00:10:24,360
if you create a package in your own

235
00:10:24,360 --> 00:10:26,519
geeks package path and you want to

236
00:10:26,519 --> 00:10:28,260
migrate it into trunk it's actually a

237
00:10:28,260 --> 00:10:31,019
bit of work and it's work is not good

238
00:10:31,019 --> 00:10:32,970
yeah so if you if we if we had a channel

239
00:10:32,970 --> 00:10:34,829
that that you know which is actually a

240
00:10:34,829 --> 00:10:36,990
reflection of the of the of the the

241
00:10:36,990 --> 00:10:39,600
geeks tree it would it will become much

242
00:10:39,600 --> 00:10:41,250
more trivial you know to to merge

243
00:10:41,250 --> 00:10:44,480
patches with the main trunk

244
00:10:45,610 --> 00:10:48,050
so for now I'm the one who's the

245
00:10:48,050 --> 00:10:50,330
juggling branches yeah because I cannot

246
00:10:50,330 --> 00:10:51,650
even explain to others how to do this

247
00:10:51,650 --> 00:10:55,510
stuff and they're not ready for it

248
00:11:04,600 --> 00:11:07,430
so the second part of my talk was is

249
00:11:07,430 --> 00:11:10,190
about installation and I gave this this

250
00:11:10,190 --> 00:11:13,160
also yesterday for the HPC group we also

251
00:11:13,160 --> 00:11:14,780
have the problem that we are running on

252
00:11:14,780 --> 00:11:16,760
hyper high-performance computing systems

253
00:11:16,760 --> 00:11:19,430
and supercomputers yes so we want to run

254
00:11:19,430 --> 00:11:23,480
geeks packages there and you know these

255
00:11:23,480 --> 00:11:26,480
guys and gals who manage these systems

256
00:11:26,480 --> 00:11:27,890
they're they're highly resistant to

257
00:11:27,890 --> 00:11:32,300
giving you route yeah they want they

258
00:11:32,300 --> 00:11:33,530
don't want to give you administrative

259
00:11:33,530 --> 00:11:36,650
privileges yeah so antiques itself you

260
00:11:36,650 --> 00:11:38,510
know requires a geeks daemon to install

261
00:11:38,510 --> 00:11:40,280
stuff so that's that's you know to start

262
00:11:40,280 --> 00:11:41,450
that you need to administer the

263
00:11:41,450 --> 00:11:43,850
privileges it's a no-go

264
00:11:43,850 --> 00:11:46,070
in many HPC environments you know

265
00:11:46,070 --> 00:11:47,650
there's a few exceptions now but it's

266
00:11:47,650 --> 00:11:51,890
yeah rule there is has got one but it's

267
00:11:51,890 --> 00:11:53,510
rare it's it'll come over time you know

268
00:11:53,510 --> 00:11:55,280
people the administrators will start to

269
00:11:55,280 --> 00:11:56,600
realize that we actually are saving them

270
00:11:56,600 --> 00:11:59,420
time and they get better environments

271
00:11:59,420 --> 00:12:05,470
but anyway so the alternative is you

272
00:12:05,470 --> 00:12:07,970
know people people to circumvent this

273
00:12:07,970 --> 00:12:09,800
question in HPC environments what they

274
00:12:09,800 --> 00:12:11,570
start to do is use stuff like brew

275
00:12:11,570 --> 00:12:13,700
called easy build which actually are

276
00:12:13,700 --> 00:12:15,320
built environments that work under a

277
00:12:15,320 --> 00:12:19,040
local user account the downside of these

278
00:12:19,040 --> 00:12:20,930
systems the build systems is that

279
00:12:20,930 --> 00:12:23,000
they're non reproducible while they are

280
00:12:23,000 --> 00:12:24,710
reproducible as as long as you're using

281
00:12:24,710 --> 00:12:26,450
the same home directory that you're in

282
00:12:26,450 --> 00:12:28,550
you know building stuff in but also it's

283
00:12:28,550 --> 00:12:29,870
hard to share you know it's hard to

284
00:12:29,870 --> 00:12:33,260
share these these build tools and you

285
00:12:33,260 --> 00:12:34,430
need to build from scratch every time

286
00:12:34,430 --> 00:12:35,570
which is a lot of work you need to

287
00:12:35,570 --> 00:12:39,800
bootstrap yeah doc our and and container

288
00:12:39,800 --> 00:12:41,630
solutions in HPC environments are not an

289
00:12:41,630 --> 00:12:42,050
option

290
00:12:42,050 --> 00:12:44,630
yeah there are actually HPC environments

291
00:12:44,630 --> 00:12:47,930
that are trying to provide them now but

292
00:12:47,930 --> 00:12:50,510
you know even docker needs administrator

293
00:12:50,510 --> 00:12:52,490
privileges and people always worried you

294
00:12:52,490 --> 00:12:53,630
know that their systems are going to get

295
00:12:53,630 --> 00:12:55,839
screwed

296
00:12:57,900 --> 00:13:00,940
so something I wrote in the last couple

297
00:13:00,940 --> 00:13:03,390
of months is called relocatable geeks

298
00:13:03,390 --> 00:13:05,920
and it was based on an insight which I

299
00:13:05,920 --> 00:13:09,340
had with a code or a few years back at

300
00:13:09,340 --> 00:13:11,020
Folsom and Elko was here a few hours ago

301
00:13:11,020 --> 00:13:14,530
but he left he's an inventor of Nix

302
00:13:14,530 --> 00:13:16,990
yeah Nick and Geeks was fort for Tom

303
00:13:16,990 --> 00:13:18,790
Nick so you know there are many shared

304
00:13:18,790 --> 00:13:20,950
similarities and one of them is that you

305
00:13:20,950 --> 00:13:24,550
know we have a path / news / tour and

306
00:13:24,550 --> 00:13:25,780
then we have a hash value

307
00:13:25,780 --> 00:13:28,180
flipsie version and then for example the

308
00:13:28,180 --> 00:13:31,450
name of the file right and the key

309
00:13:31,450 --> 00:13:32,890
insight is that this you know this is if

310
00:13:32,890 --> 00:13:34,540
you look into files this is quite

311
00:13:34,540 --> 00:13:36,640
recognizable right this hash value is

312
00:13:36,640 --> 00:13:40,390
unique so what about you know just

313
00:13:40,390 --> 00:13:42,910
patching these files within something

314
00:13:42,910 --> 00:13:48,490
new if you look at the LDC - which is

315
00:13:48,490 --> 00:13:50,260
the decompiler yeah and you're and you

316
00:13:50,260 --> 00:13:51,460
look at the shared libraries that it

317
00:13:51,460 --> 00:13:54,490
uses you can see this pattern of hash

318
00:13:54,490 --> 00:13:59,140
values right all fingerprints yeah some

319
00:13:59,140 --> 00:14:00,640
of them are shared so the glitzy ones

320
00:14:00,640 --> 00:14:03,240
are shared

321
00:14:05,210 --> 00:14:10,510
OOP sorry

322
00:14:10,760 --> 00:14:12,950
so how about relocating those yeah so we

323
00:14:12,950 --> 00:14:14,900
replace them with something is a target

324
00:14:14,900 --> 00:14:15,890
prefix so if you have a home directory

325
00:14:15,890 --> 00:14:18,650
slash home slash user yeah we're gonna

326
00:14:18,650 --> 00:14:22,430
replace them and it will look like this

327
00:14:22,430 --> 00:14:25,070
right in this case I install it in the

328
00:14:25,070 --> 00:14:28,910
home directory opt LDC test and then you

329
00:14:28,910 --> 00:14:30,380
know I've rewritten the hash value to

330
00:14:30,380 --> 00:14:32,180
look like this and these are the files

331
00:14:32,180 --> 00:14:35,750
so after installation of this this LDC -

332
00:14:35,750 --> 00:14:36,920
it's actually sitting in the home

333
00:14:36,920 --> 00:14:39,860
directory you'll set opt and we'll this

334
00:14:39,860 --> 00:14:41,750
resolved and the answer is yes it will

335
00:14:41,750 --> 00:14:44,080
just work

336
00:14:46,850 --> 00:14:50,899
yes so just to reiterate yeah we are

337
00:14:50,899 --> 00:14:53,770
replacing that value with that value and

338
00:14:53,770 --> 00:14:56,649
[Music]

339
00:14:56,649 --> 00:14:59,919
we see

340
00:15:00,870 --> 00:15:03,050
looks like I'm skipping something anyway

341
00:15:03,050 --> 00:15:07,080
I did this as an experiment and I used

342
00:15:07,080 --> 00:15:09,510
Elka Elka also created a tool called

343
00:15:09,510 --> 00:15:11,010
patch elf which which actually allows

344
00:15:11,010 --> 00:15:14,570
you to rewrite elf files and it worked

345
00:15:14,570 --> 00:15:17,490
for textual files like with Ruby pearl

346
00:15:17,490 --> 00:15:18,900
and best scripts that have the same

347
00:15:18,900 --> 00:15:21,600
fingerprints it also works to replace

348
00:15:21,600 --> 00:15:24,030
them but some formats like compiled

349
00:15:24,030 --> 00:15:26,100
Python files and JPEG files you know

350
00:15:26,100 --> 00:15:27,450
turned out to be a little less easy

351
00:15:27,450 --> 00:15:28,920
mostly because they're not zero

352
00:15:28,920 --> 00:15:31,860
terminated strings you know they're

353
00:15:31,860 --> 00:15:33,600
they're actually strings that are give

354
00:15:33,600 --> 00:15:35,490
it they have a length indicator in input

355
00:15:35,490 --> 00:15:40,770
in front of them so one night I came up

356
00:15:40,770 --> 00:15:42,150
with the solution I said why don't I

357
00:15:42,150 --> 00:15:43,740
keep the you know the size of this path

358
00:15:43,740 --> 00:15:45,750
exactly the same so I don't have to warn

359
00:15:45,750 --> 00:15:47,760
you know worried about what it actually

360
00:15:47,760 --> 00:15:49,500
looks like inside the file you know

361
00:15:49,500 --> 00:15:51,510
where the serial terminated or some

362
00:15:51,510 --> 00:15:54,750
other length indicator so there was a

363
00:15:54,750 --> 00:15:57,600
second insight so if you see these two

364
00:15:57,600 --> 00:15:59,460
paths you know now they have the exact

365
00:15:59,460 --> 00:16:02,520
same length I just passed it in you know

366
00:16:02,520 --> 00:16:07,290
you just slam them in and it works it's

367
00:16:07,290 --> 00:16:12,350
definitely the easy way to go yeah

368
00:16:12,350 --> 00:16:14,760
so I replaced it in all files there are

369
00:16:14,760 --> 00:16:16,110
some URLs on here where all these

370
00:16:16,110 --> 00:16:17,670
projects are so you can you can visit

371
00:16:17,670 --> 00:16:20,760
them in lecture if you want yes so this

372
00:16:20,760 --> 00:16:22,890
is the idea you know you're in this case

373
00:16:22,890 --> 00:16:24,870
I have home user opted in the first one

374
00:16:24,870 --> 00:16:27,210
so I slam it in in the second case I

375
00:16:27,210 --> 00:16:29,010
tell it to install any user local share

376
00:16:29,010 --> 00:16:31,440
LD see one point zero one and you can

377
00:16:31,440 --> 00:16:33,330
see it says this exact same length and

378
00:16:33,330 --> 00:16:35,490
what I do is actually I cannibalize the

379
00:16:35,490 --> 00:16:37,770
hash value yes it becomes shorter in the

380
00:16:37,770 --> 00:16:40,640
second case because the prefix is longer

381
00:16:40,640 --> 00:16:42,990
yeah you can cannibalize a long way you

382
00:16:42,990 --> 00:16:44,490
know I can I can cannibalize all the way

383
00:16:44,490 --> 00:16:46,080
back to it doesn't exist anymore and

384
00:16:46,080 --> 00:16:47,310
then I can go a bit further too

385
00:16:47,310 --> 00:16:49,050
and if you add it all up you you have

386
00:16:49,050 --> 00:16:50,640
about 40 left letters you can use this

387
00:16:50,640 --> 00:16:52,470
prefix you know to come up with these

388
00:16:52,470 --> 00:16:56,190
unique paths and cannibalizing the hash

389
00:16:56,190 --> 00:16:57,690
value is not that important in this case

390
00:16:57,690 --> 00:17:00,000
because I'm in geeks we use it to

391
00:17:00,000 --> 00:17:02,780
isolate you know all these all these

392
00:17:02,780 --> 00:17:05,459
directories in this case I tell it to

393
00:17:05,459 --> 00:17:07,140
this install that somewhere unique yes

394
00:17:07,140 --> 00:17:09,000
I'm I'm telling it to install it in this

395
00:17:09,000 --> 00:17:13,040
folder or the LDC test folder over there

396
00:17:13,040 --> 00:17:14,900
yeah so what didn't yeah it looks like

397
00:17:14,900 --> 00:17:16,069
internally it doesn't matter because

398
00:17:16,069 --> 00:17:20,020
we're not sharing yeah

399
00:17:24,130 --> 00:17:26,930
okay so for the LDC compiler there's an

400
00:17:26,930 --> 00:17:28,250
example you can actually download this

401
00:17:28,250 --> 00:17:32,150
it's it's online it's a it's a 40

402
00:17:32,150 --> 00:17:33,800
megabyte download you unpack it it's

403
00:17:33,800 --> 00:17:36,320
about on the 40 megabytes installation

404
00:17:36,320 --> 00:17:37,880
of the binary takes three seconds on my

405
00:17:37,880 --> 00:17:41,720
laptop so this is very different from

406
00:17:41,720 --> 00:17:47,390
you know these easy build ideas or even

407
00:17:47,390 --> 00:17:49,490
doctor installations know this is very

408
00:17:49,490 --> 00:17:51,590
lightweight you had only thing I'm doing

409
00:17:51,590 --> 00:17:57,050
is replacing all the parts and as many

410
00:17:57,050 --> 00:17:58,820
people have tested this now for the

411
00:17:58,820 --> 00:17:59,810
dealer decompiler

412
00:17:59,810 --> 00:18:06,440
so yeah they're happy and yeah there's

413
00:18:06,440 --> 00:18:08,120
two other things that are important one

414
00:18:08,120 --> 00:18:11,120
is that the shared library you know this

415
00:18:11,120 --> 00:18:12,920
is this package I can call it a package

416
00:18:12,920 --> 00:18:14,780
now contains two shared libraries all

417
00:18:14,780 --> 00:18:16,610
the way down to glitzy and even the

418
00:18:16,610 --> 00:18:19,280
Linnet loader isn't there yes so with

419
00:18:19,280 --> 00:18:20,750
many systems you have this problem that

420
00:18:20,750 --> 00:18:24,080
if you deploy binaries somewhere else

421
00:18:24,080 --> 00:18:27,260
yeah you will get conflicts for example

422
00:18:27,260 --> 00:18:28,790
because they want to load the underlying

423
00:18:28,790 --> 00:18:32,180
distributions clip C or Lipsy yeah or

424
00:18:32,180 --> 00:18:33,800
else eat for else as for library or

425
00:18:33,800 --> 00:18:35,870
whatever you know and the can be there

426
00:18:35,870 --> 00:18:37,700
can be problems there can be mismatches

427
00:18:37,700 --> 00:18:40,160
so she's a lot a lot of in internet

428
00:18:40,160 --> 00:18:42,080
forums they discuss you know these

429
00:18:42,080 --> 00:18:45,620
problems about libraries not working and

430
00:18:45,620 --> 00:18:47,210
that's the reason that's a more ten more

431
00:18:47,210 --> 00:18:50,930
minutes so I also did the same thing

432
00:18:50,930 --> 00:18:53,120
with Ruby SSL the nokogiri or nokogiri

433
00:18:53,120 --> 00:18:55,040
is in famous for installation

434
00:18:55,040 --> 00:18:57,800
yeah because it it's a ruby gem that

435
00:18:57,800 --> 00:19:00,950
depends on lip XML too and it's you know

436
00:19:00,950 --> 00:19:02,330
the Internet is just you know I think

437
00:19:02,330 --> 00:19:03,470
half of the Internet is filled with

438
00:19:03,470 --> 00:19:05,000
messages about people having problem

439
00:19:05,000 --> 00:19:06,950
installing the Conoco beauty it just

440
00:19:06,950 --> 00:19:07,400
works

441
00:19:07,400 --> 00:19:10,040
and some vampires are too we we

442
00:19:10,040 --> 00:19:12,410
developed it's written in Indy and is

443
00:19:12,410 --> 00:19:13,880
used in many high sequencing in

444
00:19:13,880 --> 00:19:15,560
sequencing high performs computer

445
00:19:15,560 --> 00:19:17,150
centers around the world and there was a

446
00:19:17,150 --> 00:19:20,300
very very one hard to reproduce very one

447
00:19:20,300 --> 00:19:24,470
very hard to reproduce bug it's sack

448
00:19:24,470 --> 00:19:27,110
folds occasionally right under some

449
00:19:27,110 --> 00:19:28,880
conditions on some environments but it's

450
00:19:28,880 --> 00:19:31,970
never reproduced but we can see pop up

451
00:19:31,970 --> 00:19:33,680
once in a while so I created the binary

452
00:19:33,680 --> 00:19:34,520
distribution

453
00:19:34,520 --> 00:19:36,380
it was deployed on the clock

454
00:19:36,380 --> 00:19:40,940
in Australia they ran it for a day they

455
00:19:40,940 --> 00:19:43,760
saw some of these sect faults they ran

456
00:19:43,760 --> 00:19:46,039
the D gdb debugger against it and we

457
00:19:46,039 --> 00:19:47,510
found the exact location where the sect

458
00:19:47,510 --> 00:19:49,490
fault happens and we fixed it it's

459
00:19:49,490 --> 00:19:50,870
actually not in some bomber but it's

460
00:19:50,870 --> 00:19:54,470
upstream yeah so I'm actually doing

461
00:19:54,470 --> 00:19:55,850
remote debugging somebody else is

462
00:19:55,850 --> 00:19:57,590
running it and I'm helping with the

463
00:19:57,590 --> 00:20:00,230
debugging and we're doing more we're

464
00:20:00,230 --> 00:20:06,799
gonna we're gonna add more so the

465
00:20:06,799 --> 00:20:08,780
potential here is also that you know we

466
00:20:08,780 --> 00:20:10,700
can actually create once 1-click

467
00:20:10,700 --> 00:20:14,890
installs yeah for binary packages

468
00:20:15,700 --> 00:20:17,630
yeah and it's something I want to

469
00:20:17,630 --> 00:20:20,539
discuss in the future of gigs there

470
00:20:20,539 --> 00:20:22,730
there are security concerns of course

471
00:20:22,730 --> 00:20:24,140
you know when you create a binary that's

472
00:20:24,140 --> 00:20:25,429
downloadable from the web and you just

473
00:20:25,429 --> 00:20:26,570
install it you know with your eyes

474
00:20:26,570 --> 00:20:28,909
closed we need to work on that somehow

475
00:20:28,909 --> 00:20:32,120
but I think it is really cool that we

476
00:20:32,120 --> 00:20:33,500
can actually use a gigs package that is

477
00:20:33,500 --> 00:20:34,940
well tested and has been you know

478
00:20:34,940 --> 00:20:36,650
possibly being used by already a hundred

479
00:20:36,650 --> 00:20:39,289
thousand people and we just deploy it by

480
00:20:39,289 --> 00:20:44,210
rewriting the internal path so the

481
00:20:44,210 --> 00:20:46,400
second the third part of this talk then

482
00:20:46,400 --> 00:20:48,380
I hardly have time left so that's going

483
00:20:48,380 --> 00:20:51,080
to be really short it's about workflows

484
00:20:51,080 --> 00:20:55,130
you know we have a need for running

485
00:20:55,130 --> 00:20:58,010
tools in order sequentially and in

486
00:20:58,010 --> 00:21:00,080
parallel on these high performance

487
00:21:00,080 --> 00:21:03,409
computing systems and essentially is

488
00:21:03,409 --> 00:21:05,750
called a workflow and there's been many

489
00:21:05,750 --> 00:21:07,340
standards have been developed for

490
00:21:07,340 --> 00:21:09,260
workflows at the moment there's a

491
00:21:09,260 --> 00:21:10,520
project going on is called the common

492
00:21:10,520 --> 00:21:11,870
workflow language and it has a lot of

493
00:21:11,870 --> 00:21:15,530
momentum in our community and it started

494
00:21:15,530 --> 00:21:17,059
nice you know it started really as a

495
00:21:17,059 --> 00:21:18,740
good idea because it says you know it

496
00:21:18,740 --> 00:21:20,450
started as a descriptive document of the

497
00:21:20,450 --> 00:21:24,890
workflow but soon they they embedded

498
00:21:24,890 --> 00:21:26,419
JavaScript because they wanted to do

499
00:21:26,419 --> 00:21:28,990
more and they wanted to avoid repetition

500
00:21:28,990 --> 00:21:35,000
and they also have looping now yes the

501
00:21:35,000 --> 00:21:39,740
deterministic it no longer is and you

502
00:21:39,740 --> 00:21:40,970
know when you look at these workflow

503
00:21:40,970 --> 00:21:42,530
standards yeah you know occasionally

504
00:21:42,530 --> 00:21:43,909
something will pop up and create a new

505
00:21:43,909 --> 00:21:46,280
standard like this one and it turns out

506
00:21:46,280 --> 00:21:48,510
it's actually quite hard to do yeah

507
00:21:48,510 --> 00:21:50,070
because people want to put in the

508
00:21:50,070 --> 00:21:51,419
kitchen sink that's what's really the

509
00:21:51,419 --> 00:22:00,960
problem is so essentially it's already

510
00:22:00,960 --> 00:22:02,549
already a workflow engine right I mean

511
00:22:02,549 --> 00:22:04,559
we can do we can handle dependencies

512
00:22:04,559 --> 00:22:06,870
which is serial execution and we can

513
00:22:06,870 --> 00:22:08,640
also handle parallel execution away

514
00:22:08,640 --> 00:22:10,080
because of the build farm you know the

515
00:22:10,080 --> 00:22:12,410
way the built form has been designed

516
00:22:12,410 --> 00:22:15,330
yeah so rulers gonna talk about

517
00:22:15,330 --> 00:22:18,750
workflows at at 3:30 in this room yeah

518
00:22:18,750 --> 00:22:20,070
and he's been doing a lot of work in

519
00:22:20,070 --> 00:22:22,110
this area I'm not saying that you know

520
00:22:22,110 --> 00:22:24,840
build farms are a great idea but he's

521
00:22:24,840 --> 00:22:28,919
probably doing something else the fourth

522
00:22:28,919 --> 00:22:31,190
part of the talk is the orchestration so

523
00:22:31,190 --> 00:22:33,450
you know making the rounds visiting

524
00:22:33,450 --> 00:22:36,540
companies and academic institutions this

525
00:22:36,540 --> 00:22:38,130
is something that pops up every time you

526
00:22:38,130 --> 00:22:40,260
know we you know we people are using

527
00:22:40,260 --> 00:22:42,780
tools like puppets and and and and chef

528
00:22:42,780 --> 00:22:47,010
and likewise we and Ludo describe

529
00:22:47,010 --> 00:22:48,390
services which are services running

530
00:22:48,390 --> 00:22:51,419
inside a computer but we also have

531
00:22:51,419 --> 00:22:53,700
serves that run out across computers now

532
00:22:53,700 --> 00:22:55,860
right so we have yeah we have systems

533
00:22:55,860 --> 00:22:57,660
that depend on each other and it is

534
00:22:57,660 --> 00:22:59,660
called orchestration yeah one service

535
00:22:59,660 --> 00:23:02,580
may need another service to run now how

536
00:23:02,580 --> 00:23:04,679
do you how do you set up the order of

537
00:23:04,679 --> 00:23:06,929
these and when the one service goes down

538
00:23:06,929 --> 00:23:09,270
what do the other services do right this

539
00:23:09,270 --> 00:23:11,280
is called orchestration and I think for

540
00:23:11,280 --> 00:23:13,980
with the functional paradigm that we

541
00:23:13,980 --> 00:23:16,140
have with with geeks we can actually now

542
00:23:16,140 --> 00:23:18,179
push forward to to make things happen

543
00:23:18,179 --> 00:23:20,480
here too

544
00:23:21,600 --> 00:23:23,910
so it may be something for the final

545
00:23:23,910 --> 00:23:26,020
discussion today which is about the

546
00:23:26,020 --> 00:23:32,129
future of geeks conclusion

547
00:23:34,629 --> 00:23:36,429
geeks allows for controlled insane

548
00:23:36,429 --> 00:23:37,959
software deployment with profiles and

549
00:23:37,959 --> 00:23:39,820
gates the other way I'm doing it and we

550
00:23:39,820 --> 00:23:41,079
should have channels to make it easier

551
00:23:41,079 --> 00:23:42,600
for me

552
00:23:42,600 --> 00:23:46,119
[Laughter]

553
00:23:46,119 --> 00:23:48,369
geeks has a relocatable binary packages

554
00:23:48,369 --> 00:23:50,349
now you know and we should continue

555
00:23:50,349 --> 00:23:51,999
experimenting with that and see how far

556
00:23:51,999 --> 00:23:55,179
it gets us mix will handle rap workflows

557
00:23:55,179 --> 00:23:56,919
I have no doubts because rule is working

558
00:23:56,919 --> 00:23:59,229
hard on it and orchestration should be

559
00:23:59,229 --> 00:24:04,959
an agenda that's my conclusion and as

560
00:24:04,959 --> 00:24:06,339
acknowledgments from people who are

561
00:24:06,339 --> 00:24:09,279
working yes a rule Ludo and Ricardo

562
00:24:09,279 --> 00:24:12,549
especially do nagi's communities which

563
00:24:12,549 --> 00:24:13,869
you know one of the things that really

564
00:24:13,869 --> 00:24:15,789
strikes me with geeks is is that it and

565
00:24:15,789 --> 00:24:17,859
guard is that it attracts so many really

566
00:24:17,859 --> 00:24:19,479
intelligent peoples or I'm really happy

567
00:24:19,479 --> 00:24:23,440
you're here and then I want to thank

568
00:24:23,440 --> 00:24:24,909
professor Robert Williams who's paying

569
00:24:24,909 --> 00:24:35,949
my bills thank you so Chris you can set

570
00:24:35,949 --> 00:24:47,909
up have you got any questions yes yes

571
00:25:00,049 --> 00:25:02,189
then there Oh

572
00:25:02,189 --> 00:25:12,809
the lie mr. laughs yeah so the question

573
00:25:12,809 --> 00:25:16,229
is am I should I be afraid about you

574
00:25:16,229 --> 00:25:18,239
know the source code that's a if

575
00:25:18,239 --> 00:25:19,559
somebody asks for it and you know it's

576
00:25:19,559 --> 00:25:21,869
all online I will need to open source

577
00:25:21,869 --> 00:25:37,409
software yeah yeah so I we do have dekes

578
00:25:37,409 --> 00:25:39,719
package pass but it's also online it's

579
00:25:39,719 --> 00:25:42,989
out in open yes I I'm highly resistant

580
00:25:42,989 --> 00:25:46,789
to using any type of propriety software

581
00:25:47,059 --> 00:25:49,949
yeah also our own systems are completely

582
00:25:49,949 --> 00:25:51,269
in the open you know it's all open

583
00:25:51,269 --> 00:25:53,969
source software so the gauge package

584
00:25:53,969 --> 00:25:57,059
path is just a construct we can import

585
00:25:57,059 --> 00:26:00,359
the second get tree into the packaging

586
00:26:00,359 --> 00:26:03,569
tree right and but the second packaging

587
00:26:03,569 --> 00:26:05,729
tree is just I need it because it's not

588
00:26:05,729 --> 00:26:08,069
on the main tree but it is out in open

589
00:26:08,069 --> 00:26:09,989
you know anyone can use it anyone can

590
00:26:09,989 --> 00:26:21,329
update it sorry the home is last bit

591
00:26:21,329 --> 00:26:28,210
again how do you just face

592
00:26:28,210 --> 00:26:30,970
yes yes so how do we handle the

593
00:26:30,970 --> 00:26:34,149
versioning yes so yeah we you have to

594
00:26:34,149 --> 00:26:35,649
explicitly for every package say okay

595
00:26:35,649 --> 00:26:38,619
this is the version I want to use right

596
00:26:38,619 --> 00:26:41,169
or the gate check out or whatever and

597
00:26:41,169 --> 00:26:45,070
that's you describe in the package have

598
00:26:45,070 --> 00:26:47,110
a look at the links that that RMIT my

599
00:26:47,110 --> 00:27:08,440
talk and because it's all there yes okay

600
00:27:08,440 --> 00:27:10,570
so yeah the question is how do we handle

601
00:27:10,570 --> 00:27:16,509
Python packages and Geeks there's really

602
00:27:16,509 --> 00:27:18,490
three ways to do this to go about this

603
00:27:18,490 --> 00:27:21,340
the the best way is to actually write

604
00:27:21,340 --> 00:27:24,159
Geeks packages for python modules yeah

605
00:27:24,159 --> 00:27:26,610
which describe their dependencies also

606
00:27:26,610 --> 00:27:28,749
and you install the package with geeks

607
00:27:28,749 --> 00:27:31,360
and and it pulls it pulls it in with

608
00:27:31,360 --> 00:27:34,929
with the dependencies to make it easy to

609
00:27:34,929 --> 00:27:38,590
make it easy we also provide a generator

610
00:27:38,590 --> 00:27:40,360
so you can you can eat for example if

611
00:27:40,360 --> 00:27:42,279
the package is already in pip now or

612
00:27:42,279 --> 00:27:45,700
five pi or whatever they're called it

613
00:27:45,700 --> 00:27:47,470
can it can pull that information and

614
00:27:47,470 --> 00:27:48,490
then create a package for you

615
00:27:48,490 --> 00:27:51,340
automatically and geeks yeah and for

616
00:27:51,340 --> 00:27:53,470
this I use the geeks package partner for

617
00:27:53,470 --> 00:27:57,129
example but you're not completely

618
00:27:57,129 --> 00:28:00,090
delivered to geeks because you can also

619
00:28:00,090 --> 00:28:02,139
gigs actually has a package called

620
00:28:02,139 --> 00:28:03,730
virtual Python virtual environment so

621
00:28:03,730 --> 00:28:04,899
you can start up a virtual environment

622
00:28:04,899 --> 00:28:07,629
for Python and use partner from there

623
00:28:07,629 --> 00:28:09,610
and so you can just use Pippin by PI to

624
00:28:09,610 --> 00:28:12,840
to pull in packages

625
00:28:12,840 --> 00:28:14,909
and the third option is just to use you

626
00:28:14,909 --> 00:28:18,120
know as a source tree and to provide it

627
00:28:18,120 --> 00:28:22,470
as an in the patent path sorry gigs does

628
00:28:22,470 --> 00:28:24,090
not force you to work in any way you can

629
00:28:24,090 --> 00:28:26,759
you can you know gradually incremental

630
00:28:26,759 --> 00:28:33,610
II work towards the perfect solution so

631
00:28:33,610 --> 00:28:36,689
[Music]

632
00:28:37,610 --> 00:28:40,289
she probably make a fun thing huh yeah

633
00:28:40,289 --> 00:28:43,610
we also have two minutes left

