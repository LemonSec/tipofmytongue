1
00:00:14,400 --> 00:00:20,650
so hello everybody I'm Metreon the

2
00:00:20,650 --> 00:00:23,320
meeting of stress and today I will talk

3
00:00:23,320 --> 00:00:26,160
about a new strange feature called Cisco

4
00:00:26,160 --> 00:00:30,609
fault injection so does anybody know

5
00:00:30,609 --> 00:00:39,250
what stress is nice so as most of you

6
00:00:39,250 --> 00:00:43,090
know stress is a traditional diagnostic

7
00:00:43,090 --> 00:00:45,250
debugging and instructional user space

8
00:00:45,250 --> 00:00:49,079
utility for Linux are how traditional is

9
00:00:49,079 --> 00:00:54,570
25 years old so quite original and

10
00:00:54,570 --> 00:00:57,129
traditionally it's used to monitor

11
00:00:57,129 --> 00:00:59,800
interactions between user space protests

12
00:00:59,800 --> 00:01:04,510
and been external the most known are

13
00:01:04,510 --> 00:01:08,470
system calls and also signal deliveries

14
00:01:08,470 --> 00:01:12,640
so changes of process state as Jayce has

15
00:01:12,640 --> 00:01:15,130
traditional everything's traditional

16
00:01:15,130 --> 00:01:19,120
versus his transitional comment line

17
00:01:19,120 --> 00:01:21,760
interface and multiple filtering

18
00:01:21,760 --> 00:01:24,370
capabilities so because the interface is

19
00:01:24,370 --> 00:01:26,350
traditional it's easy to use for people

20
00:01:26,350 --> 00:01:29,350
who are used to this for 20-something

21
00:01:29,350 --> 00:01:32,680
years and it's quite powerful because of

22
00:01:32,680 --> 00:01:36,370
this filtering capabilities but last

23
00:01:36,370 --> 00:01:39,160
year a stretch has been extended to do

24
00:01:39,160 --> 00:01:41,800
something very untraditional and it is

25
00:01:41,800 --> 00:01:47,800
to tamper with traces by injection Falls

26
00:01:47,800 --> 00:01:50,980
instakill Cisco fault injection the

27
00:01:50,980 --> 00:01:53,470
current implementation is based on the

28
00:01:53,470 --> 00:01:56,500
work made by jisuk student of first last

29
00:01:56,500 --> 00:02:00,460
year like email money I'm not sure how

30
00:02:00,460 --> 00:02:02,770
to pronounce his name so I'm sorry if

31
00:02:02,770 --> 00:02:05,410
it's wrong she will some Sunday

32
00:02:05,410 --> 00:02:11,170
correctly so what is a fault injection

33
00:02:11,170 --> 00:02:14,560
just a brief recollection it's a

34
00:02:14,560 --> 00:02:16,689
software testing technique used for

35
00:02:16,689 --> 00:02:19,430
improving test coverage

36
00:02:19,430 --> 00:02:22,550
mostly of our hunting paths that my

37
00:02:22,550 --> 00:02:25,130
otherwise fairly befouled by introducing

38
00:02:25,130 --> 00:02:28,250
falls this is a nice definition from

39
00:02:28,250 --> 00:02:30,170
Wikipedia thanks to the key video for

40
00:02:30,170 --> 00:02:33,590
this so where do we place a stress among

41
00:02:33,590 --> 00:02:36,320
other fault injection tools

42
00:02:36,320 --> 00:02:38,930
it's obviously software it's run time

43
00:02:38,930 --> 00:02:42,080
the most of instrumentation tools are

44
00:02:42,080 --> 00:02:45,140
compile time this is run time it does it

45
00:02:45,140 --> 00:02:47,360
work by means of Cisco into position

46
00:02:47,360 --> 00:02:52,510
it's user space unlike many current

47
00:02:52,510 --> 00:02:56,870
techniques we have its unprivileged

48
00:02:56,870 --> 00:02:59,870
and as I said it has traditional command

49
00:02:59,870 --> 00:03:03,620
line interface so now I'll show you a

50
00:03:03,620 --> 00:03:06,950
series of examples but hopefully we will

51
00:03:06,950 --> 00:03:09,590
get you an idea what that is called

52
00:03:09,590 --> 00:03:12,230
photo Jack's and syndics is what you

53
00:03:12,230 --> 00:03:15,400
could do the fit and I'll start with a

54
00:03:15,400 --> 00:03:18,710
simple program cut from koryo tools

55
00:03:18,710 --> 00:03:20,720
which is linking dynamically with

56
00:03:20,720 --> 00:03:23,690
Phillip C and we'll see what could be

57
00:03:23,690 --> 00:03:26,690
done so the top box you see a

58
00:03:26,690 --> 00:03:31,160
traditional output and in the bottom box

59
00:03:31,160 --> 00:03:33,560
something with fault injection

60
00:03:33,560 --> 00:03:39,230
so let's filter of all let's filter all

61
00:03:39,230 --> 00:03:44,390
open circles of this material comment

62
00:03:44,390 --> 00:03:49,280
and let's have them all what you can see

63
00:03:49,280 --> 00:03:54,440
here that this ends in dynamic linker it

64
00:03:54,440 --> 00:03:56,690
tries to open its cache it fails it

65
00:03:56,690 --> 00:03:58,700
tries to open Lipsy in redefined

66
00:03:58,700 --> 00:04:00,980
locations on this architecture where our

67
00:04:00,980 --> 00:04:03,709
fall occasions in this build of Lipsy

68
00:04:03,709 --> 00:04:07,489
that fails nothing very it's quite

69
00:04:07,489 --> 00:04:11,870
predictable let's do something something

70
00:04:11,870 --> 00:04:16,279
different let's change our code that

71
00:04:16,279 --> 00:04:20,630
dynamic linker will get from the fault

72
00:04:20,630 --> 00:04:23,330
one which is energy is function of the

73
00:04:23,330 --> 00:04:25,669
prevented to something that has a

74
00:04:25,669 --> 00:04:27,740
different meaning for for dynamic linker

75
00:04:27,740 --> 00:04:32,630
as you see it tries twice as many like

76
00:04:32,630 --> 00:04:36,320
occasions when it sees a record in the

77
00:04:36,320 --> 00:04:38,530
end

78
00:04:43,139 --> 00:04:50,550
the record of open Cisco you can inject

79
00:04:50,550 --> 00:04:54,240
fold not on all indications but just in

80
00:04:54,240 --> 00:04:57,090
the first one or whatever else so if you

81
00:04:57,090 --> 00:05:00,090
inject a fall just to the first

82
00:05:00,090 --> 00:05:03,270
indication you can see that dynamic

83
00:05:03,270 --> 00:05:08,460
linker just it does all the same it

84
00:05:08,460 --> 00:05:11,189
tries Lipsy in different locations finds

85
00:05:11,189 --> 00:05:16,889
it and everything works but if you fail

86
00:05:16,889 --> 00:05:20,900
second and all subsequent indications

87
00:05:20,900 --> 00:05:25,139
what happens directly opens its cache

88
00:05:25,139 --> 00:05:27,840
and tries to open Lipsy according to the

89
00:05:27,840 --> 00:05:30,930
cache as you see it fails and then I

90
00:05:30,930 --> 00:05:34,919
trace all these predefined locations and

91
00:05:34,919 --> 00:05:38,099
you can notice that it tries Lipsy tries

92
00:05:38,099 --> 00:05:39,930
to open loop she at the same location it

93
00:05:39,930 --> 00:05:43,919
tried before why why damn I think it

94
00:05:43,919 --> 00:05:46,770
does this because there are different

95
00:05:46,770 --> 00:05:48,539
code paths and they don't know about

96
00:05:48,539 --> 00:05:51,240
each other in the first part tries to

97
00:05:51,240 --> 00:05:54,240
open and in another code path it also

98
00:05:54,240 --> 00:05:57,300
tries to open and it doesn't care but so

99
00:05:57,300 --> 00:06:00,330
it Chinese it's not about just a funny

100
00:06:00,330 --> 00:06:08,009
thing let's let's that anything to do it

101
00:06:08,009 --> 00:06:10,490
work and have a look at the cat itself

102
00:06:10,490 --> 00:06:14,669
so the third open Cisco is the she's

103
00:06:14,669 --> 00:06:19,229
call made but made by cat itself and it

104
00:06:19,229 --> 00:06:22,379
looks like what you would expect from a

105
00:06:22,379 --> 00:06:25,319
cut it fails and it exits with error

106
00:06:25,319 --> 00:06:32,580
code another way you can specify false

107
00:06:32,580 --> 00:06:37,259
is to say how often you would to inject

108
00:06:37,259 --> 00:06:40,159
them for example you can inject them

109
00:06:40,159 --> 00:06:43,139
starting with third one with third and

110
00:06:43,139 --> 00:06:46,889
then every second one so you see that

111
00:06:46,889 --> 00:06:50,310
cat handles the situation outside

112
00:06:50,310 --> 00:06:54,289
properly so it reports error on every

113
00:06:54,289 --> 00:06:56,309
case when the

114
00:06:56,309 --> 00:06:59,819
and purchases everything that's that's

115
00:06:59,819 --> 00:07:03,229
opened and exits with error code so

116
00:07:03,229 --> 00:07:08,399
looks like it works fine and now let's

117
00:07:08,399 --> 00:07:10,589
have a look at something more

118
00:07:10,589 --> 00:07:12,899
interesting let's combine fault

119
00:07:12,899 --> 00:07:16,229
injection with pass filtering so in the

120
00:07:16,229 --> 00:07:18,539
top box you see a sequence of the

121
00:07:18,539 --> 00:07:21,179
schools that are related to the files

122
00:07:21,179 --> 00:07:24,419
pass to cat and that's not in this case

123
00:07:24,419 --> 00:07:29,819
and in the bottom I will just fail each

124
00:07:29,819 --> 00:07:32,629
of the Cisco so you'll see how cat

125
00:07:32,629 --> 00:07:36,089
handle this so the first move is seen

126
00:07:36,089 --> 00:07:40,949
and that second one is F star and for

127
00:07:40,949 --> 00:07:44,249
some reason cat considers this as an

128
00:07:44,249 --> 00:07:49,110
error it's quite an unusual thing that

129
00:07:49,110 --> 00:07:52,739
if that fails so probably it's a same

130
00:07:52,739 --> 00:07:56,249
thing to do is to fail anything from

131
00:07:56,249 --> 00:08:00,239
another site that F advice is call its

132
00:08:00,239 --> 00:08:04,979
its advice so cat is also quite right

133
00:08:04,979 --> 00:08:08,339
that it ignores this error it's just an

134
00:08:08,339 --> 00:08:11,159
advice to kernel that cat is going to do

135
00:08:11,159 --> 00:08:18,389
some some sequential reads what more or

136
00:08:18,389 --> 00:08:20,399
less the same with read if you fail the

137
00:08:20,399 --> 00:08:23,429
read with a heart error it's quite right

138
00:08:23,429 --> 00:08:26,579
to report it and fail but what do you

139
00:08:26,579 --> 00:08:30,719
feel cat will do if it sees temporary

140
00:08:30,719 --> 00:08:34,169
error would it restart it or would it

141
00:08:34,169 --> 00:08:36,348
fail

142
00:08:39,059 --> 00:08:43,000
it would restart cat is a good program

143
00:08:43,000 --> 00:08:45,190
after all and it knows that interrupted

144
00:08:45,190 --> 00:08:47,350
system call is a temporary error it

145
00:08:47,350 --> 00:08:53,080
should be restarted so and this is a

146
00:08:53,080 --> 00:08:58,450
peculiar thing this is a then you fail

147
00:08:58,450 --> 00:09:03,100
close to school let has no importance

148
00:09:03,100 --> 00:09:06,400
what CAD does it just opens file

149
00:09:06,400 --> 00:09:10,270
persists it and close it it's open it

150
00:09:10,270 --> 00:09:15,400
opens it read-only and what's the use of

151
00:09:15,400 --> 00:09:18,340
reporting this is a hard error run it

152
00:09:18,340 --> 00:09:21,010
then you can't close a file open

153
00:09:21,010 --> 00:09:24,790
read-only I don't know I would say it's

154
00:09:24,790 --> 00:09:28,360
a minor barking cat very minor to

155
00:09:28,360 --> 00:09:33,270
complain and exit with error code is

156
00:09:33,270 --> 00:09:35,680
because the the file was successfully

157
00:09:35,680 --> 00:09:38,200
purchased from the beginning to the end

158
00:09:38,200 --> 00:09:44,770
so why does it here you can see in brief

159
00:09:44,770 --> 00:09:47,880
that you can specify different fault

160
00:09:47,880 --> 00:09:52,330
injection expressions that would work

161
00:09:52,330 --> 00:09:57,730
and in letterbox and the second box you

162
00:09:57,730 --> 00:10:00,280
see that a stress actually can follow

163
00:10:00,280 --> 00:10:06,600
descriptors so even if CAD has no idea

164
00:10:06,600 --> 00:10:09,850
what the file it's working with a

165
00:10:09,850 --> 00:10:13,750
strange does know and can apply its

166
00:10:13,750 --> 00:10:17,380
filters so it's like what what you can

167
00:10:17,380 --> 00:10:19,890
see in the bottom box it's a primitive

168
00:10:19,890 --> 00:10:23,320
like primitive access control using a

169
00:10:23,320 --> 00:10:28,150
stress then let's have a look at real

170
00:10:28,150 --> 00:10:32,710
box this is a more less famous back in

171
00:10:32,710 --> 00:10:38,860
Python 3 to 5 and it's it was found by

172
00:10:38,860 --> 00:10:43,680
the student who did this just a project

173
00:10:45,200 --> 00:10:48,329
Python on every invocation needs some

174
00:10:48,329 --> 00:10:51,839
randomness for installation and when it

175
00:10:51,839 --> 00:10:54,690
fails to obtain this randomness it's a

176
00:10:54,690 --> 00:10:56,430
fatal error which is fine

177
00:10:56,430 --> 00:10:59,390
probably but it's not fine that it's

178
00:10:59,390 --> 00:11:03,329
throws a segmentation fault at

179
00:11:03,329 --> 00:11:08,810
hexadecimal address 50 it's not not good

180
00:11:08,810 --> 00:11:15,120
it's about why it does this ridiculous

181
00:11:15,120 --> 00:11:22,820
thing because it addresses a method of

182
00:11:22,820 --> 00:11:26,790
object which was not allocated because

183
00:11:26,790 --> 00:11:31,890
of lack of randomness as saw hexadecimal

184
00:11:31,890 --> 00:11:35,640
addresses just offset the inertial table

185
00:11:35,640 --> 00:11:40,410
like this fortunately this bug was seems

186
00:11:40,410 --> 00:11:42,839
to be at least fixed in Python physics

187
00:11:42,839 --> 00:11:45,480
first they were work around with it by

188
00:11:45,480 --> 00:11:48,149
using get random she's call but I

189
00:11:48,149 --> 00:11:50,910
actually tried to false get random and

190
00:11:50,910 --> 00:11:53,670
fine found out that it no longer seek

191
00:11:53,670 --> 00:11:54,000
false

192
00:11:54,000 --> 00:11:59,959
that's funny thing anyway and another

193
00:11:59,959 --> 00:12:04,769
real bug who was found with dynamic

194
00:12:04,769 --> 00:12:13,100
linker itself so if you fail and protect

195
00:12:13,130 --> 00:12:18,120
you can see that dynamic linker from

196
00:12:18,120 --> 00:12:20,459
Lipsy ignores error from the first and

197
00:12:20,459 --> 00:12:24,740
projector but it treats all subsequent

198
00:12:24,740 --> 00:12:28,829
errors as fatal that's quite natural to

199
00:12:28,829 --> 00:12:32,910
do so with all subsequent but why it

200
00:12:32,910 --> 00:12:36,269
ignores the first error it's because

201
00:12:36,269 --> 00:12:38,790
they're different code paths and the

202
00:12:38,790 --> 00:12:41,959
only code path that exists in currents

203
00:12:41,959 --> 00:12:45,209
ellipses dynamic linker is the one

204
00:12:45,209 --> 00:12:49,680
that's early a in its running and it's

205
00:12:49,680 --> 00:12:53,699
just ignores the earth and this actually

206
00:12:53,699 --> 00:12:55,199
can happen for example because of

207
00:12:55,199 --> 00:12:57,209
fragmentation and

208
00:12:57,209 --> 00:13:02,160
that the colvett which failed is the one

209
00:13:02,160 --> 00:13:05,910
with choice dough to remove access it's

210
00:13:05,910 --> 00:13:09,329
brought none so actually some some pages

211
00:13:09,329 --> 00:13:13,019
are remains to be accessible which are

212
00:13:13,019 --> 00:13:16,230
supposed not to be so it's like like it

213
00:13:16,230 --> 00:13:21,360
would be a minor security issue if it's

214
00:13:21,360 --> 00:13:26,129
not a imaginary problem because if first

215
00:13:26,129 --> 00:13:28,559
and protect call files it's very likely

216
00:13:28,559 --> 00:13:30,600
that all subsequent also fail and they

217
00:13:30,600 --> 00:13:36,860
appropriate that still it's about now

218
00:13:36,860 --> 00:13:40,170
I'll try to explain you what's going on

219
00:13:40,170 --> 00:13:41,399
under the hood and how it's all

220
00:13:41,399 --> 00:13:44,879
implemented so when tracy's invokes this

221
00:13:44,879 --> 00:13:49,790
is called kernel puts it in so called

222
00:13:49,790 --> 00:13:53,429
Cisco enter stop state so it's

223
00:13:53,429 --> 00:13:56,369
completely stopped at the same time

224
00:13:56,369 --> 00:13:59,220
Asturias awakens it fetches his call

225
00:13:59,220 --> 00:14:03,779
number its arguments apply filters

226
00:14:03,779 --> 00:14:06,209
you've seen all other kinds of filters

227
00:14:06,209 --> 00:14:09,480
history supports it decides and may I

228
00:14:09,480 --> 00:14:12,420
was keep this Cisco or brin something

229
00:14:12,420 --> 00:14:15,379
and then it tells the kernel to go on

230
00:14:15,379 --> 00:14:20,519
with stress Tracey then kernel executes

231
00:14:20,519 --> 00:14:25,019
this is call and before passing control

232
00:14:25,019 --> 00:14:27,899
tool to user space

233
00:14:27,899 --> 00:14:30,689
it puts traces again in a stop state

234
00:14:30,689 --> 00:14:32,970
it's a slightly different state school

235
00:14:32,970 --> 00:14:36,449
she's called exit stop at the stylus

236
00:14:36,449 --> 00:14:41,220
trace awakens again it may fit Cisco

237
00:14:41,220 --> 00:14:45,749
return code and agreements depend it

238
00:14:45,749 --> 00:14:48,569
depends whether the the call is filtered

239
00:14:48,569 --> 00:14:51,929
or not also it prints at this time this

240
00:14:51,929 --> 00:14:55,319
return code is necessary and tells care

241
00:14:55,319 --> 00:14:57,720
not to let the trace you go all all this

242
00:14:57,720 --> 00:15:00,629
cycle repeats itself until something

243
00:15:00,629 --> 00:15:03,269
happens with Tracy where it's exit so

244
00:15:03,269 --> 00:15:06,240
hotel so taking these two parts together

245
00:15:06,240 --> 00:15:08,759
you can see the sequence and in this

246
00:15:08,759 --> 00:15:10,920
sequence we had two

247
00:15:10,920 --> 00:15:14,459
places where a strays actually can

248
00:15:14,459 --> 00:15:17,730
temper this disco with the score number

249
00:15:17,730 --> 00:15:20,490
versus called arguments which the

250
00:15:20,490 --> 00:15:21,630
scholar turncoat

251
00:15:21,630 --> 00:15:24,480
and this is exactly the way how this

252
00:15:24,480 --> 00:15:26,880
code fault injection is implemented so

253
00:15:26,880 --> 00:15:30,329
on Anthony's call a stress replaces his

254
00:15:30,329 --> 00:15:31,050
call number

255
00:15:31,050 --> 00:15:36,620
we're gonna invalid 1 minus 1 and then

256
00:15:36,620 --> 00:15:40,730
Colonel sees this invalid is call it

257
00:15:40,730 --> 00:15:43,589
it's just invalid Cisco

258
00:15:43,589 --> 00:15:46,350
so it's returns an error for an invalid

259
00:15:46,350 --> 00:15:49,850
Cisco which is in a season most

260
00:15:49,850 --> 00:15:53,250
architectures but not all of them so you

261
00:15:53,250 --> 00:15:57,170
shouldn't rely on this error code and

262
00:15:57,170 --> 00:16:01,529
then on exigencies called if instructed

263
00:16:01,529 --> 00:16:04,949
to replace error code it it replaces

264
00:16:04,949 --> 00:16:09,570
this error code with the one that was

265
00:16:09,570 --> 00:16:11,209
misfired

266
00:16:11,209 --> 00:16:16,339
so it's actually pretty simple inside

267
00:16:16,370 --> 00:16:20,790
but this is not the only thing as you

268
00:16:20,790 --> 00:16:22,740
can see from this slide it's not the

269
00:16:22,740 --> 00:16:25,380
only thing that could be done not just

270
00:16:25,380 --> 00:16:27,660
this is called fault injection but other

271
00:16:27,660 --> 00:16:30,209
kinds of injections jump rings for

272
00:16:30,209 --> 00:16:35,760
example this is some recent development

273
00:16:35,760 --> 00:16:39,329
not not in the least stressed version

274
00:16:39,329 --> 00:16:42,750
yet you can inject a signal at any of

275
00:16:42,750 --> 00:16:46,050
these points the current limitation it's

276
00:16:46,050 --> 00:16:48,829
injected on

277
00:16:51,460 --> 00:16:56,510
I'm exiting anything yeah an existence

278
00:16:56,510 --> 00:17:00,950
is called so what would you use this

279
00:17:00,950 --> 00:17:06,490
signal injection for for example if you

280
00:17:06,490 --> 00:17:10,520
want to terminate program you would you

281
00:17:10,520 --> 00:17:11,959
would probably use a different signal

282
00:17:11,959 --> 00:17:15,349
for this or if you want to dump it for

283
00:17:15,349 --> 00:17:17,689
further analysis by another tool like

284
00:17:17,689 --> 00:17:25,250
gdb and another the way you can tamper

285
00:17:25,250 --> 00:17:30,260
with is to replace its own code of Cisco

286
00:17:30,260 --> 00:17:32,780
with something that doesn't look like an

287
00:17:32,780 --> 00:17:35,450
error actually so you can pretend it's

288
00:17:35,450 --> 00:17:39,430
it's called completed successfully but

289
00:17:39,430 --> 00:17:43,520
actually skip it so by replacing Cisco

290
00:17:43,520 --> 00:17:46,450
number one entering to an invalid one

291
00:17:46,450 --> 00:17:49,790
this way you skip the Cisco and on

292
00:17:49,790 --> 00:17:54,410
exiting you can replace return code with

293
00:17:54,410 --> 00:17:58,220
like zero which for Cisco's like unlink

294
00:17:58,220 --> 00:18:01,880
means that everything is fine so the

295
00:18:01,880 --> 00:18:06,080
tracer will suppose that a new complete

296
00:18:06,080 --> 00:18:08,630
successfully and their file is gone but

297
00:18:08,630 --> 00:18:14,390
it's actually yeah this is not as easy

298
00:18:14,390 --> 00:18:19,010
as it looks for more complicated schools

299
00:18:19,010 --> 00:18:23,530
they have some semantics that has to be

300
00:18:23,530 --> 00:18:28,010
forward some somehow for example many

301
00:18:28,010 --> 00:18:33,200
schools when they succeed some portions

302
00:18:33,200 --> 00:18:36,710
of memory are filled with some useful

303
00:18:36,710 --> 00:18:38,630
information by the kernel so for them

304
00:18:38,630 --> 00:18:41,890
this is not as easy but for simple

305
00:18:41,890 --> 00:18:45,410
discourse like handling its work from

306
00:18:45,410 --> 00:18:48,160
current master

307
00:18:52,620 --> 00:18:55,630
probably forgot to tell that the this

308
00:18:55,630 --> 00:18:59,370
API Astraeus is using is called Petrus

309
00:18:59,370 --> 00:19:03,220
it's the same API used by the

310
00:19:03,220 --> 00:19:06,400
traditional interface as I think about

311
00:19:06,400 --> 00:19:11,160
stress so it's the same as used by gdb

312
00:19:11,160 --> 00:19:16,030
it's more or less that all I would like

313
00:19:16,030 --> 00:19:19,960
to tell about fault injection but I can

314
00:19:19,960 --> 00:19:20,950
answer your questions

315
00:19:20,950 --> 00:19:26,530
because some some things are better on

316
00:19:26,530 --> 00:19:30,940
certain questions so by the way the

317
00:19:30,940 --> 00:19:33,550
title of this talk was probably invented

318
00:19:33,550 --> 00:19:38,140
by the student who made this jisub

319
00:19:38,140 --> 00:19:43,530
project he can visit his sock page and

320
00:19:43,530 --> 00:19:48,010
maybe you'll get an idea what was

321
00:19:48,010 --> 00:19:50,950
planned in the beginning and how it's

322
00:19:50,950 --> 00:19:54,790
changed and compare these things you can

323
00:19:54,790 --> 00:19:58,420
grab the source Cisco fault injection is

324
00:19:58,420 --> 00:20:02,980
part of the recent release which was in

325
00:20:02,980 --> 00:20:09,930
December I think so it's you can use it

326
00:20:12,179 --> 00:20:25,919
bigger thing so this full injection

327
00:20:25,919 --> 00:20:29,669
makes a stretch a testing tool but I

328
00:20:29,669 --> 00:20:32,470
it's quite a modern thing so I'm not

329
00:20:32,470 --> 00:20:35,950
sure it's already widely used as a

330
00:20:35,950 --> 00:20:40,899
testing tool I am stuck I'm thinking of

331
00:20:40,899 --> 00:20:44,200
using stress itself for a stress this

332
00:20:44,200 --> 00:20:47,860
year because it's not easy to reproduce

333
00:20:47,860 --> 00:20:53,409
some faults related to pitch race system

334
00:20:53,409 --> 00:21:00,850
call for example but that's so just a

335
00:21:00,850 --> 00:21:05,679
new way of fault detection a new way of

336
00:21:05,679 --> 00:21:09,009
testing something that otherwise would

337
00:21:09,009 --> 00:21:13,350
require a compile-time instrumentation

338
00:21:13,350 --> 00:21:16,740
and probably the only

339
00:21:16,740 --> 00:21:21,220
runtime and privileged user space for

340
00:21:21,220 --> 00:21:25,110
the ejection tool for Linux we have now

341
00:21:26,009 --> 00:21:32,490
so I think it's time to ask questions

342
00:22:05,169 --> 00:22:14,329
so which one of slides so so the

343
00:22:14,329 --> 00:22:17,209
question the question was how cut was

344
00:22:17,209 --> 00:22:21,709
able to to complain about how cat was

345
00:22:21,709 --> 00:22:24,769
able to to report an error if linker was

346
00:22:24,769 --> 00:22:27,609
unable to load lip see it's not a cut

347
00:22:27,609 --> 00:22:31,009
the error diagnostic you see it comes

348
00:22:31,009 --> 00:22:35,209
from dynamic linker it's not a it's

349
00:22:35,209 --> 00:22:39,979
still a dynamic linker at this point so

350
00:22:39,979 --> 00:22:43,729
you can see the prefix is cat but it's

351
00:22:43,729 --> 00:22:46,399
not a cat it's dynamic linker who

352
00:22:46,399 --> 00:22:49,369
complains that it can't up award lip see

353
00:22:49,369 --> 00:22:57,529
and that's all any more questions yes

354
00:22:57,529 --> 00:22:59,690
please

355
00:22:59,690 --> 00:23:02,769
[Music]

356
00:23:27,960 --> 00:23:30,900
first of all I've been told so the

357
00:23:30,900 --> 00:23:35,160
question is why the current

358
00:23:35,160 --> 00:23:38,040
implementation uses an invalid Cisco

359
00:23:38,040 --> 00:23:41,940
number for fourth injection instead of

360
00:23:41,940 --> 00:23:46,380
using some harmless Cisco that has no

361
00:23:46,380 --> 00:23:51,630
side effects so that monitoring system

362
00:23:51,630 --> 00:23:55,680
like SELinux wouldn't or something like

363
00:23:55,680 --> 00:23:58,410
this out it with it wouldn't complain

364
00:23:58,410 --> 00:24:01,890
about something wrong is going on first

365
00:24:01,890 --> 00:24:03,600
of all it's not easy to find a hammer at

366
00:24:03,600 --> 00:24:06,000
Cisco I've been told yet recently that

367
00:24:06,000 --> 00:24:10,170
get bid might fail in current linux

368
00:24:10,170 --> 00:24:12,120
kernel's get bid my fellow it's not

369
00:24:12,120 --> 00:24:14,389
allowed

370
00:24:17,270 --> 00:24:22,200
ok so in theory it's possible to invoke

371
00:24:22,200 --> 00:24:28,710
a get beat I think it's not a technical

372
00:24:28,710 --> 00:24:33,480
issue but from optimization point of

373
00:24:33,480 --> 00:24:38,690
view it's less probably less work less

374
00:24:38,690 --> 00:24:44,190
you will need less Cisco indications to

375
00:24:44,190 --> 00:24:48,390
do this on on exigencies call you'll

376
00:24:48,390 --> 00:24:53,490
have to replace like two registers on

377
00:24:53,490 --> 00:24:58,170
some architectures and in case of in

378
00:24:58,170 --> 00:25:00,720
religious call it will not have to

379
00:25:00,720 --> 00:25:03,810
replace at least the register that

380
00:25:03,810 --> 00:25:05,970
contains the indication of the design

381
00:25:05,970 --> 00:25:10,230
error so it's slightly I think it's

382
00:25:10,230 --> 00:25:12,330
slightly

383
00:25:12,330 --> 00:25:17,009
faster to use an invalid Cisco but I

384
00:25:17,009 --> 00:25:20,059
think it's quite a valid point

385
00:25:20,059 --> 00:25:25,700
thank you any more questions

386
00:25:27,649 --> 00:25:36,139
no really okay ah yes please

387
00:25:47,610 --> 00:25:50,669
[Music]

388
00:25:50,719 --> 00:25:54,419
so the question is I heard it was is

389
00:25:54,419 --> 00:25:57,029
there anything probably external from

390
00:25:57,029 --> 00:26:01,440
states that do some random what's random

391
00:26:01,440 --> 00:26:08,609
ejection random and so in the initial G

392
00:26:08,609 --> 00:26:15,179
sock design there was an interface to do

393
00:26:15,179 --> 00:26:17,820
some random injection but later I

394
00:26:17,820 --> 00:26:20,969
decided that it's better done by a fuzzy

395
00:26:20,969 --> 00:26:26,459
driver that's per ancestries so my idea

396
00:26:26,459 --> 00:26:29,789
is that if you want randomness you just

397
00:26:29,789 --> 00:26:32,940
do it in a driver of the trance trace

398
00:26:32,940 --> 00:26:36,329
and not even stress itself so currently

399
00:26:36,329 --> 00:26:41,639
this injection is predictable there is

400
00:26:41,639 --> 00:26:47,279
no random injection but it might change

401
00:26:47,279 --> 00:26:52,859
if somebody would suggest a plausible

402
00:26:52,859 --> 00:26:56,129
case how how this would be used as

403
00:26:56,129 --> 00:26:58,409
currently I think is better done in a

404
00:26:58,409 --> 00:27:02,479
fuzzy driver outside

405
00:27:14,769 --> 00:27:19,250
is it a problem with the comment line is

406
00:27:19,250 --> 00:27:27,980
long okay does anybody have any more

407
00:27:27,980 --> 00:27:37,340
questions yes please I'm not sure I hear

408
00:27:37,340 --> 00:27:39,769
anything but I will have to repeat what

409
00:27:39,769 --> 00:27:41,840
you are saying so please make it he will

410
00:27:41,840 --> 00:27:56,289
at least for me okay so Steve said that

411
00:27:56,289 --> 00:28:00,799
it's a relation isn't like just a good

412
00:28:00,799 --> 00:28:13,399
words about this okay so coming up next

413
00:28:13,399 --> 00:28:15,880
in this room we have a quick talk on

414
00:28:15,880 --> 00:28:19,510
testing web applications

