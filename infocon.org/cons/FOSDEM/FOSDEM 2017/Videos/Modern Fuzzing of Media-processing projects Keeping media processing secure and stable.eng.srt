1
00:00:33,070 --> 00:00:39,410
one two three doesn't work yep hi

2
00:00:39,410 --> 00:00:42,110
everyone scent for coming I'm max from

3
00:00:42,110 --> 00:00:44,390
Google Chrome security team and I'm

4
00:00:44,390 --> 00:00:47,030
mostly working on fuzzing of Chrome

5
00:00:47,030 --> 00:00:50,150
browser or its components and other open

6
00:00:50,150 --> 00:00:53,090
source projects for those who may be

7
00:00:53,090 --> 00:00:56,330
sync like what I might forget in open

8
00:00:56,330 --> 00:00:58,610
media room I had an internship five

9
00:00:58,610 --> 00:01:00,949
years ago in Intel Corporation working

10
00:01:00,949 --> 00:01:01,909
on media is the key

11
00:01:01,909 --> 00:01:06,229
I've been trying to implement h.265 and

12
00:01:06,229 --> 00:01:08,150
code event so I remember some stuff like

13
00:01:08,150 --> 00:01:11,960
macro blocks variable blends CODIS IP

14
00:01:11,960 --> 00:01:14,299
frame so I feel pretty comfortable in

15
00:01:14,299 --> 00:01:16,820
open media their room and agenda of my

16
00:01:16,820 --> 00:01:19,909
talk I'm going to briefly explain what

17
00:01:19,909 --> 00:01:23,180
is the puzzle how you can do it how we

18
00:01:23,180 --> 00:01:25,820
do it at Google why media processing

19
00:01:25,820 --> 00:01:29,420
projects seems to be a good target for

20
00:01:29,420 --> 00:01:32,689
phasing and in the end I'll give another

21
00:01:32,689 --> 00:01:34,969
your voice as fast project it's like a

22
00:01:34,969 --> 00:01:37,070
fuzzy novice as a service for open

23
00:01:37,070 --> 00:01:38,560
source

24
00:01:38,560 --> 00:01:42,979
okay let's start buzzing or fast testing

25
00:01:42,979 --> 00:01:45,890
it is also called so it's basically a

26
00:01:45,890 --> 00:01:48,890
pretty simple routine you just generate

27
00:01:48,890 --> 00:01:51,799
some data you use this data as an input

28
00:01:51,799 --> 00:01:55,159
to your target you monitor your target

29
00:01:55,159 --> 00:01:58,840
for unexpected actions like crashes some

30
00:01:58,840 --> 00:02:02,479
inconsistency some security bugs and you

31
00:02:02,479 --> 00:02:04,399
just repeat this process until you find

32
00:02:04,399 --> 00:02:08,288
some sandbox some unexpected stuff

33
00:02:08,288 --> 00:02:11,900
why person is good and white people you

34
00:02:11,900 --> 00:02:16,160
use it together with memory memory tools

35
00:02:16,160 --> 00:02:18,620
also called sanitizers address sanitizer

36
00:02:18,620 --> 00:02:20,720
memory sanitizer undefined affair

37
00:02:20,720 --> 00:02:23,690
sanitizer and so on it helps to find lot

38
00:02:23,690 --> 00:02:26,390
of bugs almost every type of memory

39
00:02:26,390 --> 00:02:29,150
corruption box any other crashes like

40
00:02:29,150 --> 00:02:32,000
new directs uncaught exceptions data

41
00:02:32,000 --> 00:02:35,720
races like any stuff you you may have on

42
00:02:35,720 --> 00:02:36,050
in

43
00:02:36,050 --> 00:02:38,570
C or C++ written projects all these

44
00:02:38,570 --> 00:02:40,880
troubles can be not I mean not all

45
00:02:40,880 --> 00:02:42,800
troubles in the project but all types of

46
00:02:42,800 --> 00:02:47,360
these problems can be found and it Dulce

47
00:02:47,360 --> 00:02:50,120
is useful for finding illogical bugs but

48
00:02:50,120 --> 00:02:53,660
it requires some smarter approach to

49
00:02:53,660 --> 00:02:56,720
your fuzzy target I will show some

50
00:02:56,720 --> 00:02:59,960
examples later and one more good points

51
00:02:59,960 --> 00:03:02,750
it also finds not only crushes or

52
00:03:02,750 --> 00:03:04,910
breakages it also finds friends or out

53
00:03:04,910 --> 00:03:08,480
of memory box when you just let's say

54
00:03:08,480 --> 00:03:10,790
you have one kilobyte video file and you

55
00:03:10,790 --> 00:03:15,290
try to decode it and it takes a team I

56
00:03:15,290 --> 00:03:17,720
don't know 80 or 100 gigabytes of memory

57
00:03:17,720 --> 00:03:20,240
it's definitely a bug and it's also can

58
00:03:20,240 --> 00:03:23,540
be easily found to is possible and

59
00:03:23,540 --> 00:03:26,360
speaking about fuzzing approaches we can

60
00:03:26,360 --> 00:03:29,120
split it into three types first one is

61
00:03:29,120 --> 00:03:32,510
generation based when you write some

62
00:03:32,510 --> 00:03:35,120
generator to generate data for your

63
00:03:35,120 --> 00:03:37,280
father because basically you can read if

64
00:03:37,280 --> 00:03:39,770
you random and feed it to your target

65
00:03:39,770 --> 00:03:42,050
but it doesn't make sense in most of the

66
00:03:42,050 --> 00:03:45,940
cases so you write something let's say

67
00:03:45,940 --> 00:03:49,480
HTML page generator you just took all

68
00:03:49,480 --> 00:03:53,570
names of HTML tags and you generate some

69
00:03:53,570 --> 00:03:55,940
text based on these elements then you

70
00:03:55,940 --> 00:03:59,120
try to open weight generated by your

71
00:03:59,120 --> 00:04:01,730
generator with a browser and sometimes

72
00:04:01,730 --> 00:04:03,800
you will find some unexpected stuff in

73
00:04:03,800 --> 00:04:06,020
browser another approach is mutation

74
00:04:06,020 --> 00:04:09,800
based when you do not generate data you

75
00:04:09,800 --> 00:04:11,720
already have some data like you have

76
00:04:11,720 --> 00:04:14,390
waited video files reddit HTML documents

77
00:04:14,390 --> 00:04:16,730
depends on your target and you have some

78
00:04:16,730 --> 00:04:18,980
notation engine which or its existing

79
00:04:18,980 --> 00:04:21,829
target sent mutate them duplicate some

80
00:04:21,829 --> 00:04:24,590
parts interlace them everything which

81
00:04:24,590 --> 00:04:27,530
can be created on any programmed and

82
00:04:27,530 --> 00:04:30,230
another approach it is stuff which we

83
00:04:30,230 --> 00:04:32,120
call like a modern approach it's a

84
00:04:32,120 --> 00:04:35,060
guided rotation based phazon rotation

85
00:04:35,060 --> 00:04:38,390
based size parties already explained

86
00:04:38,390 --> 00:04:41,300
guided means that has an engine which

87
00:04:41,300 --> 00:04:44,830
generates inputs and mutates inputs its

88
00:04:44,830 --> 00:04:48,020
tracks coverage of targets for every

89
00:04:48,020 --> 00:04:50,600
input generated so let's say fasten

90
00:04:50,600 --> 00:04:53,900
engine generates some video file it

91
00:04:53,900 --> 00:04:57,350
feeds it to decoder and it sees which

92
00:04:57,350 --> 00:04:58,729
parts of code are covered

93
00:04:58,729 --> 00:05:01,130
then it mutates this input generates

94
00:05:01,130 --> 00:05:03,830
another one feeds it to decoder and see

95
00:05:03,830 --> 00:05:06,169
if new coverage has been reached if new

96
00:05:06,169 --> 00:05:09,229
coverage has been reached pass an engine

97
00:05:09,229 --> 00:05:11,870
saves this input is let's say interest

98
00:05:11,870 --> 00:05:14,930
in one if NASA nuke has been reached it

99
00:05:14,930 --> 00:05:18,130
just ignores it due to that you

100
00:05:18,130 --> 00:05:20,840
accumulate 5s over time and your

101
00:05:20,840 --> 00:05:21,410
coverage

102
00:05:21,410 --> 00:05:23,330
grows over time so if you fasten for app

103
00:05:23,330 --> 00:05:26,510
let's say I don't know month so we call

104
00:05:26,510 --> 00:05:29,390
0 months you can get a pretty high

105
00:05:29,390 --> 00:05:34,430
percent of coverage of your target how

106
00:05:34,430 --> 00:05:35,360
does it look

107
00:05:35,360 --> 00:05:38,600
usually let's start from the bottom this

108
00:05:38,600 --> 00:05:41,240
just three lines this is what first

109
00:05:41,240 --> 00:05:43,310
target essentially is you just need to

110
00:05:43,310 --> 00:05:47,270
write a one function which has arguments

111
00:05:47,270 --> 00:05:51,320
data and size of data that's it and you

112
00:05:51,320 --> 00:05:55,010
use this data as you want usually you

113
00:05:55,010 --> 00:05:56,990
just feed this data into some target API

114
00:05:56,990 --> 00:06:00,320
to which you want to test in this

115
00:06:00,320 --> 00:06:03,919
example target API is it some artificial

116
00:06:03,919 --> 00:06:09,590
example which has a bug we are short on

117
00:06:09,590 --> 00:06:12,140
time so I just disclose it to incise is

118
00:06:12,140 --> 00:06:16,340
sorry you have buffer over read/write

119
00:06:16,340 --> 00:06:18,590
you have only three elements in in data

120
00:06:18,590 --> 00:06:22,190
array but you try to check element with

121
00:06:22,190 --> 00:06:24,310
index 3 which is like for sediment and

122
00:06:24,310 --> 00:06:27,349
this example works in just three

123
00:06:27,349 --> 00:06:30,260
iterations it finds this bug and but of

124
00:06:30,260 --> 00:06:33,969
course this is an artificial example

125
00:06:34,120 --> 00:06:37,310
another nice real-world example is our

126
00:06:37,310 --> 00:06:39,440
Olympics ml read memory father or you

127
00:06:39,440 --> 00:06:42,169
can find it on github but it just has

128
00:06:42,169 --> 00:06:45,830
one call inside this first RTT just

129
00:06:45,830 --> 00:06:48,410
calls xml read memory function which

130
00:06:48,410 --> 00:06:51,680
basically just parse xml document from

131
00:06:51,680 --> 00:06:55,610
memory and we said one-liner we found

132
00:06:55,610 --> 00:06:58,849
about 30 bucks in lib XML for or last

133
00:06:58,849 --> 00:07:02,920
year syrup 0 he battle flows

134
00:07:02,920 --> 00:07:07,720
the use of the free all this stuff this

135
00:07:07,720 --> 00:07:10,030
is that example of fast target is

136
00:07:10,030 --> 00:07:12,760
actually father defined interface and

137
00:07:12,760 --> 00:07:14,890
the father is an engine for graduating

138
00:07:14,890 --> 00:07:17,560
rata spasm it is not the only engine in

139
00:07:17,560 --> 00:07:20,230
the world but it is the one from which

140
00:07:20,230 --> 00:07:24,340
we started our our project it's actually

141
00:07:24,340 --> 00:07:26,440
a library which provides main so you

142
00:07:26,440 --> 00:07:28,930
just write the function which you saw on

143
00:07:28,930 --> 00:07:33,000
previous slide then you compile your

144
00:07:33,000 --> 00:07:35,620
target with specific flux which is

145
00:07:35,620 --> 00:07:39,040
basically some cine types of to address

146
00:07:39,040 --> 00:07:41,350
sanitizer memory sanitizer depends on

147
00:07:41,350 --> 00:07:43,960
which build you are going to test and

148
00:07:43,960 --> 00:07:47,320
you need to specify coverage type which

149
00:07:47,320 --> 00:07:49,330
will be used to track coverage when

150
00:07:49,330 --> 00:07:54,010
testing different inputs and that's it

151
00:07:54,010 --> 00:07:56,080
when you write first target compile it

152
00:07:56,080 --> 00:07:59,680
and run it over some corpus basically

153
00:07:59,680 --> 00:08:01,510
you can start with empty corpus corpus

154
00:08:01,510 --> 00:08:05,580
is a set of inputs set of test cases

155
00:08:05,580 --> 00:08:08,500
initial test cases if you have some you

156
00:08:08,500 --> 00:08:11,560
better to put it in this directory

157
00:08:11,560 --> 00:08:13,930
because it will give some understanding

158
00:08:13,930 --> 00:08:16,630
of the target to fuzz an engine but you

159
00:08:16,630 --> 00:08:18,850
can also start with an empty directory

160
00:08:18,850 --> 00:08:26,680
it works why media projects are written

161
00:08:26,680 --> 00:08:29,520
in C C++ are good targets for fuzzing

162
00:08:29,520 --> 00:08:32,200
basically because it has a lot of stuff

163
00:08:32,200 --> 00:08:35,530
working with raw memory and if it's

164
00:08:35,530 --> 00:08:38,229
equals plus it can give some logic with

165
00:08:38,229 --> 00:08:42,760
objects and if you write it you

166
00:08:42,760 --> 00:08:45,370
definitely know which how many troubles

167
00:08:45,370 --> 00:08:48,370
you may have in this and another point

168
00:08:48,370 --> 00:08:50,710
because media processing is actually

169
00:08:50,710 --> 00:08:53,140
used everywhere you know this better

170
00:08:53,140 --> 00:08:55,930
than me because like any device so is a

171
00:08:55,930 --> 00:08:58,270
battery and Wi-Fi connection definitely

172
00:08:58,270 --> 00:09:00,610
has several products and libraries for

173
00:09:00,610 --> 00:09:04,630
the phone in media and another not only

174
00:09:04,630 --> 00:09:08,800
devices in this room but everywhere and

175
00:09:08,800 --> 00:09:12,480
due to that media projects are

176
00:09:12,480 --> 00:09:15,160
definitely a target for attackers and

177
00:09:15,160 --> 00:09:21,339
some most known cases from previous two

178
00:09:21,339 --> 00:09:24,129
years three years you probably seen

179
00:09:24,129 --> 00:09:26,529
ffmpeg and thousand fixes article from

180
00:09:26,529 --> 00:09:30,610
guys from Google security team I hope

181
00:09:30,610 --> 00:09:32,470
you felt about stage fright it was a

182
00:09:32,470 --> 00:09:35,920
vulnerability in media library for

183
00:09:35,920 --> 00:09:38,829
Android which allowed to hack android

184
00:09:38,829 --> 00:09:41,709
phone just by sending a MMS message to

185
00:09:41,709 --> 00:09:44,709
Joseph onto the phone oniel another

186
00:09:44,709 --> 00:09:48,430
example from one and half years ago is

187
00:09:48,430 --> 00:09:51,579
viral video it was an FM ffmpeg

188
00:09:51,579 --> 00:09:55,569
vulnerability in parsing of playlists so

189
00:09:55,569 --> 00:09:58,540
it allowed to read local files from from

190
00:09:58,540 --> 00:10:00,699
the remote server on Facebook on YouTube

191
00:10:00,699 --> 00:10:03,610
just on every video question series in

192
00:10:03,610 --> 00:10:08,500
the world yeah this is all links so when

193
00:10:08,500 --> 00:10:10,449
you if you angry City you can then open

194
00:10:10,449 --> 00:10:12,579
the presentation and treat more another

195
00:10:12,579 --> 00:10:14,680
example from last year is image tragic

196
00:10:14,680 --> 00:10:18,089
it was a back in image magic library for

197
00:10:18,089 --> 00:10:21,040
image processing it also affected

198
00:10:21,040 --> 00:10:22,959
Facebook and you may be recently heard

199
00:10:22,959 --> 00:10:27,250
that one guy got $40,000 reward for

200
00:10:27,250 --> 00:10:30,519
reporting that Facebook uses vulnerable

201
00:10:30,519 --> 00:10:33,519
version of image magic and he tells to

202
00:10:33,519 --> 00:10:36,399
execute code on on remote surreal and

203
00:10:36,399 --> 00:10:39,130
another example the most recent it's in

204
00:10:39,130 --> 00:10:42,399
Chris Evans blocked it was a bug in G

205
00:10:42,399 --> 00:10:45,509
streamer which worked on linux desktops

206
00:10:45,509 --> 00:10:48,660
basically you download a file and open

207
00:10:48,660 --> 00:10:51,850
the directory don't wander in file

208
00:10:51,850 --> 00:10:55,240
explorer and usually you see a preview

209
00:10:55,240 --> 00:10:58,000
of of the image and this functionality

210
00:10:58,000 --> 00:11:01,240
of preview was has been abused by chris

211
00:11:01,240 --> 00:11:04,149
evans and he wrote an exploit to turn it

212
00:11:04,149 --> 00:11:09,699
to remote code execution yeah just a

213
00:11:09,699 --> 00:11:12,699
quick note we sometimes at at google and

214
00:11:12,699 --> 00:11:14,980
an open source project hear from some

215
00:11:14,980 --> 00:11:18,459
maintainer so programmers that share

216
00:11:18,459 --> 00:11:21,639
projects have been fast but actually it

217
00:11:21,639 --> 00:11:23,500
doesn't work with this way because you

218
00:11:23,500 --> 00:11:27,379
know how fuzzy works is

219
00:11:27,379 --> 00:11:29,569
his techniques are changing since the

220
00:11:29,569 --> 00:11:33,019
project itself changes and to get high

221
00:11:33,019 --> 00:11:35,749
coverage and to cover most of your

222
00:11:35,749 --> 00:11:38,179
project it actually takes time so the

223
00:11:38,179 --> 00:11:40,369
best approach is to make it in a

224
00:11:40,369 --> 00:11:44,479
continuous way you just take new-built

225
00:11:44,479 --> 00:11:47,299
every day or twice a day and fastened

226
00:11:47,299 --> 00:11:50,419
existing corpus at this build and a good

227
00:11:50,419 --> 00:11:52,909
example just from the last week bogging

228
00:11:52,909 --> 00:12:00,169
OpenSSL we took it took about 550 CPU

229
00:12:00,169 --> 00:12:02,539
days to find it it was very interesting

230
00:12:02,539 --> 00:12:04,279
back because open itself has two

231
00:12:04,279 --> 00:12:07,519
implementations to multiply big numbers

232
00:12:07,519 --> 00:12:12,709
and it was a logical bug which the first

233
00:12:12,709 --> 00:12:15,169
target actually used data data and its

234
00:12:15,169 --> 00:12:17,720
size is the two big numbers and then

235
00:12:17,720 --> 00:12:21,649
it's called big numbers multiplied two

236
00:12:21,649 --> 00:12:23,389
different implementations slow one and

237
00:12:23,389 --> 00:12:25,099
optimize one and then it it was

238
00:12:25,099 --> 00:12:26,979
comparing the results of this

239
00:12:26,979 --> 00:12:29,599
multiplication operations and if result

240
00:12:29,599 --> 00:12:31,970
isn't the same it was a problem so this

241
00:12:31,970 --> 00:12:33,889
what has been found it was carry

242
00:12:33,889 --> 00:12:36,459
propagation backing optimized epic an

243
00:12:36,459 --> 00:12:38,899
implementation which used almost

244
00:12:38,899 --> 00:12:41,089
everywhere because when you do it you

245
00:12:41,089 --> 00:12:44,829
want to use better faster version and

246
00:12:44,829 --> 00:12:48,169
yeah now about as fast as I said I'm

247
00:12:48,169 --> 00:12:50,539
from Google Chrome team and we are doing

248
00:12:50,539 --> 00:12:52,909
fuzzing for previous maybe six years

249
00:12:52,909 --> 00:12:55,879
already and we have a large

250
00:12:55,879 --> 00:12:57,829
infrastructure about fifteen thousands

251
00:12:57,829 --> 00:13:00,439
of CPU cores to run father's to

252
00:13:00,439 --> 00:13:03,859
deduplicate crashes to check fixes and

253
00:13:03,859 --> 00:13:05,959
so on so like when you try to do it at

254
00:13:05,959 --> 00:13:08,539
scale you find you will meet a lot of

255
00:13:08,539 --> 00:13:10,999
problem and because sometimes it's like

256
00:13:10,999 --> 00:13:13,639
Russian aggression every minutes and

257
00:13:13,639 --> 00:13:16,279
you've got thousands of similar bugs per

258
00:13:16,279 --> 00:13:18,169
day and you need to understand which

259
00:13:18,169 --> 00:13:20,569
bugs I unique which are not and few

260
00:13:20,569 --> 00:13:23,329
months ago we just copied go on it this

261
00:13:23,329 --> 00:13:27,079
infrastructure and made it free and

262
00:13:27,079 --> 00:13:29,299
accessible for large open source

263
00:13:29,299 --> 00:13:33,169
projects on which let's say the modern

264
00:13:33,169 --> 00:13:37,220
internet relies on yes so this is all

265
00:13:37,220 --> 00:13:39,259
free we have already more than 50

266
00:13:39,259 --> 00:13:41,160
projects with about

267
00:13:41,160 --> 00:13:43,920
200 first targets a lot of bugs found

268
00:13:43,920 --> 00:13:46,920
and most of them already fix it

269
00:13:46,920 --> 00:13:50,819
and yeah we encourage every open-source

270
00:13:50,819 --> 00:13:53,339
project to try fuzzing to just try write

271
00:13:53,339 --> 00:13:57,990
a simple fast target to test your your

272
00:13:57,990 --> 00:14:00,360
code and if you can and would like join

273
00:14:00,360 --> 00:14:02,189
to this project this would be awesome

274
00:14:02,189 --> 00:14:04,050
because like all you need just to write

275
00:14:04,050 --> 00:14:06,629
these puzzles for target all other

276
00:14:06,629 --> 00:14:08,699
issues are handled by existing

277
00:14:08,699 --> 00:14:09,389
infrastructure

278
00:14:09,389 --> 00:14:11,279
essentially it's phazon is a service and

279
00:14:11,279 --> 00:14:17,100
it is free yeah here I have an example

280
00:14:17,100 --> 00:14:21,959
of bug found and file it by our app we

281
00:14:21,959 --> 00:14:24,000
call it cluster fast it's the whole

282
00:14:24,000 --> 00:14:26,759
infrastructure is cluster of us and it

283
00:14:26,759 --> 00:14:30,360
is a real example from ffmpeg yeah it

284
00:14:30,360 --> 00:14:33,089
has a type of bug stand battle flow it

285
00:14:33,089 --> 00:14:35,790
has a minimize this case to reproduce

286
00:14:35,790 --> 00:14:39,019
all the info like stack trace

287
00:14:39,019 --> 00:14:41,459
configuration which memory tool has been

288
00:14:41,459 --> 00:14:44,670
used and of course for security bug they

289
00:14:44,670 --> 00:14:46,829
access well only by people you specify

290
00:14:46,829 --> 00:14:48,899
your security team or maybe you and

291
00:14:48,899 --> 00:14:51,360
other developers no not it's not open

292
00:14:51,360 --> 00:14:55,800
until you fix it yeah and also it not

293
00:14:55,800 --> 00:14:58,230
only files back automatically it also

294
00:14:58,230 --> 00:15:01,199
verify fixes like this is the same

295
00:15:01,199 --> 00:15:03,000
example as a maintainer

296
00:15:03,000 --> 00:15:07,009
maybe he's here Michael I don't know

297
00:15:07,009 --> 00:15:09,600
he wrote that patch of light and like

298
00:15:09,600 --> 00:15:12,720
sense then one guy from Google said that

299
00:15:12,720 --> 00:15:14,399
coolant if everything is fine

300
00:15:14,399 --> 00:15:16,470
cluster fast we'll mark it as fix it in

301
00:15:16,470 --> 00:15:19,410
plus the back and then even the same day

302
00:15:19,410 --> 00:15:21,449
class Rufus has detected this issue is

303
00:15:21,449 --> 00:15:25,019
fixed and close the bug so you just like

304
00:15:25,019 --> 00:15:27,660
beard back you fixed and you shouldn't

305
00:15:27,660 --> 00:15:31,199
do anything else yeah we also have some

306
00:15:31,199 --> 00:15:34,170
stuff to help you I'm sorry you don't

307
00:15:34,170 --> 00:15:36,569
see it but it is not very important to

308
00:15:36,569 --> 00:15:40,290
see it's a statistics dashboard each has

309
00:15:40,290 --> 00:15:43,230
some numbers some percents for every

310
00:15:43,230 --> 00:15:45,660
father such as number of those cases

311
00:15:45,660 --> 00:15:49,680
executed in given time arranged coverage

312
00:15:49,680 --> 00:15:53,490
by functions and by code edges it has

313
00:15:53,490 --> 00:15:54,810
links to coverage

314
00:15:54,810 --> 00:15:57,060
to report I will show an example on the

315
00:15:57,060 --> 00:16:01,670
next slide speed of generating of inputs

316
00:16:01,670 --> 00:16:05,670
links to corpus which grows over time

317
00:16:05,670 --> 00:16:08,279
and there are a few more columns like

318
00:16:08,279 --> 00:16:10,680
performance analysis I will also show an

319
00:16:10,680 --> 00:16:15,150
example so you you get analytics for

320
00:16:15,150 --> 00:16:18,000
your feathers also an example of courage

321
00:16:18,000 --> 00:16:22,680
report for another ffmpeg father you

322
00:16:22,680 --> 00:16:25,020
don't see probably these lines but you

323
00:16:25,020 --> 00:16:26,700
also shouldn't it is this are different

324
00:16:26,700 --> 00:16:29,370
source code file assent percent of code

325
00:16:29,370 --> 00:16:32,390
coverage in every file if you click on

326
00:16:32,390 --> 00:16:35,790
final name you will see more detail to

327
00:16:35,790 --> 00:16:37,680
you like which functions have been

328
00:16:37,680 --> 00:16:39,839
covered attentive and which lines are

329
00:16:39,839 --> 00:16:41,820
cover it and which lines are not covered

330
00:16:41,820 --> 00:16:47,910
by existing fuzzing corpus yeah another

331
00:16:47,910 --> 00:16:49,380
feature is automated performance

332
00:16:49,380 --> 00:16:53,279
analyzer which checks your father walks

333
00:16:53,279 --> 00:16:57,690
every day and if your father has some

334
00:16:57,690 --> 00:17:02,339
which is basically set of issues is is

335
00:17:02,339 --> 00:17:04,410
not big it's known issues every time

336
00:17:04,410 --> 00:17:06,839
your father can be crashing every time

337
00:17:06,839 --> 00:17:09,420
like you run it and it crashes in five

338
00:17:09,420 --> 00:17:12,569
seconds so it doesn't work technically

339
00:17:12,569 --> 00:17:14,160
and you need to fix it as soon as

340
00:17:14,160 --> 00:17:16,829
possible because you just waste CPU

341
00:17:16,829 --> 00:17:19,079
cycles and there are other issues which

342
00:17:19,079 --> 00:17:21,290
are similar for some fathers so this

343
00:17:21,290 --> 00:17:24,839
performance analyzers let you know them

344
00:17:24,839 --> 00:17:27,510
without checking logs for hundreds of

345
00:17:27,510 --> 00:17:30,510
fuzzing runs which have happen in every

346
00:17:30,510 --> 00:17:36,510
time on on the infrastructure here are

347
00:17:36,510 --> 00:17:40,170
links for looking at other examples of

348
00:17:40,170 --> 00:17:42,960
first targets in in chromium in existing

349
00:17:42,960 --> 00:17:45,090
areas past projects we actually have

350
00:17:45,090 --> 00:17:47,010
only affair from back in OSS faster so

351
00:17:47,010 --> 00:17:50,040
if you are working on other decoding

352
00:17:50,040 --> 00:17:52,500
projects I don't know VLC player I've

353
00:17:52,500 --> 00:17:55,890
see a lot of guys with heads you are

354
00:17:55,890 --> 00:17:58,110
super welcome to take a look at it -

355
00:17:58,110 --> 00:18:00,630
pink me and we definitely should work

356
00:18:00,630 --> 00:18:02,880
something out on that and I've seen that

357
00:18:02,880 --> 00:18:04,860
github already has a lot of fast targets

358
00:18:04,860 --> 00:18:07,890
for I don't know for which projects like

359
00:18:07,890 --> 00:18:10,190
what

360
00:18:17,760 --> 00:18:20,830
[Music]

361
00:18:20,830 --> 00:18:27,409
[Applause]

362
00:19:24,330 --> 00:19:27,760
so the question is how developers

363
00:19:27,760 --> 00:19:30,640
maintainer of project can affect what we

364
00:19:30,640 --> 00:19:33,190
do it is fussn't can add some

365
00:19:33,190 --> 00:19:35,320
complications to further all inputs and

366
00:19:35,320 --> 00:19:39,060
so well basically our idea is to move

367
00:19:39,060 --> 00:19:41,830
responsibility for fast target sent for

368
00:19:41,830 --> 00:19:44,620
corpus to to developers actually we we

369
00:19:44,620 --> 00:19:47,530
are trying to do not own fast targets do

370
00:19:47,530 --> 00:19:50,470
not own this sort of feathers for ffmpeg

371
00:19:50,470 --> 00:19:54,550
we initially had won 4-0 in in Google

372
00:19:54,550 --> 00:19:56,980
internal stuff and this father supports

373
00:19:56,980 --> 00:19:59,920
about 60 different configurations so we

374
00:19:59,920 --> 00:20:01,840
just pushed that father to ffmpeg

375
00:20:01,840 --> 00:20:05,290
repository and then ffmpeg guys helped

376
00:20:05,290 --> 00:20:06,880
us to let's say integrate it in our

377
00:20:06,880 --> 00:20:09,340
existing pipeline so if you have

378
00:20:09,340 --> 00:20:12,190
something to improve the best way is to

379
00:20:12,190 --> 00:20:14,590
do it to push it inside your target

380
00:20:14,590 --> 00:20:18,570
repository compare another one

381
00:20:22,210 --> 00:20:24,770
we should find those guys who who

382
00:20:24,770 --> 00:20:28,190
rejected your pull request my Z's

383
00:20:28,190 --> 00:20:30,200
Kevin's you also welcome to create a

384
00:20:30,200 --> 00:20:48,320
pull request on oysters we stock into

385
00:20:48,320 --> 00:20:50,570
place in three places first of all you

386
00:20:50,570 --> 00:20:52,820
can upload it just two voices first will

387
00:20:52,820 --> 00:20:56,510
be story and add one line to build a

388
00:20:56,510 --> 00:20:59,390
such script zero another way to store it

389
00:20:59,390 --> 00:21:02,270
in target repository of your project but

390
00:21:02,270 --> 00:21:04,610
again in build a sage script you know as

391
00:21:04,610 --> 00:21:07,490
fast you need to copy this file as to

392
00:21:07,490 --> 00:21:10,630
output directory and third place is a

393
00:21:10,630 --> 00:21:16,159
cloud storage where we run father's on

394
00:21:16,159 --> 00:21:17,780
different machines and all of them are

395
00:21:17,780 --> 00:21:20,210
syncing files to common place and

396
00:21:20,210 --> 00:21:22,700
project maintainer have access to this

397
00:21:22,700 --> 00:21:24,230
common place and they can download

398
00:21:24,230 --> 00:21:26,450
existing corpus they can drop new files

399
00:21:26,450 --> 00:21:28,850
in there so if you are not maintain your

400
00:21:28,850 --> 00:21:30,890
of the project you don't have access

401
00:21:30,890 --> 00:21:33,230
them but if you are maintain your

402
00:21:33,230 --> 00:21:35,570
developer who is responsible for box you

403
00:21:35,570 --> 00:21:38,900
you can access their and it is written

404
00:21:38,900 --> 00:21:42,080
somewhere on Isis past page but yeah I I

405
00:21:42,080 --> 00:21:46,270
agree that it probably hard to find

406
00:22:13,739 --> 00:22:17,789
so the question if I got it like fuzz

407
00:22:17,789 --> 00:22:19,950
engine buzzing engine generates inputs

408
00:22:19,950 --> 00:22:23,879
and feeds them to the target to get turn

409
00:22:23,879 --> 00:22:26,369
timer roars but doesn't feel it to exist

410
00:22:26,369 --> 00:22:27,840
in unit tests right

411
00:22:27,840 --> 00:22:30,779
yeah but essentially it's somewhat

412
00:22:30,779 --> 00:22:33,179
similar to unit testing but it is better

413
00:22:33,179 --> 00:22:34,950
because like in unit testing you have

414
00:22:34,950 --> 00:22:37,169
some input testing put some

415
00:22:37,169 --> 00:22:39,080
functionality and some expected output

416
00:22:39,080 --> 00:22:42,210
that's it in fasten you only have this

417
00:22:42,210 --> 00:22:44,399
functionality and you do not have a

418
00:22:44,399 --> 00:22:46,590
specific output you have millions of

419
00:22:46,590 --> 00:22:48,480
them they are generated and you also do

420
00:22:48,480 --> 00:22:51,899
not have any output you can't have if

421
00:22:51,899 --> 00:22:53,820
you want to do some correctness checking

422
00:22:53,820 --> 00:22:56,009
if as an example this OpenSSL

423
00:22:56,009 --> 00:22:59,960
multiplication but technically basically

424
00:22:59,960 --> 00:23:02,429
first target is a unit test but

425
00:23:02,429 --> 00:23:05,820
continuous unit tests without fix-it

426
00:23:05,820 --> 00:23:08,549
input and output values and we are

427
00:23:08,549 --> 00:23:10,259
trying in in chromium we are trying to

428
00:23:10,259 --> 00:23:12,629
convert existing unit tests into false

429
00:23:12,629 --> 00:23:15,690
targets to have them as a enhancement

430
00:23:15,690 --> 00:23:17,580
like we would like to have unit tests

431
00:23:17,580 --> 00:23:22,489
because people are really important

432
00:23:25,759 --> 00:24:08,039
because it me start from the end the

433
00:24:08,039 --> 00:24:10,080
question is about number of CPU cores

434
00:24:10,080 --> 00:24:13,440
which we are using 15,000 of course its

435
00:24:13,440 --> 00:24:15,960
internal google internal chrono

436
00:24:15,960 --> 00:24:17,130
infrastructure for

437
00:24:17,130 --> 00:24:19,440
chromium browser for all races first we

438
00:24:19,440 --> 00:24:23,640
have let me do not lie to you my did

439
00:24:23,640 --> 00:24:26,309
four thousand ten five hundred CPU cores

440
00:24:26,309 --> 00:24:29,100
at the moment but we we add more when we

441
00:24:29,100 --> 00:24:32,400
were getting more projects and the first

442
00:24:32,400 --> 00:24:34,110
question was about fuzzing not only

443
00:24:34,110 --> 00:24:35,730
media projects but drivers

444
00:24:35,730 --> 00:24:38,460
graphic processing stuff yes we have

445
00:24:38,460 --> 00:24:41,390
some of them we have you can go to

446
00:24:41,390 --> 00:24:44,580
chromium code search like chromium code

447
00:24:44,580 --> 00:24:47,669
search and look for GPU file you will

448
00:24:47,669 --> 00:24:50,159
find there an example or maybe two of

449
00:24:50,159 --> 00:24:55,850
existing GP or father thank you

