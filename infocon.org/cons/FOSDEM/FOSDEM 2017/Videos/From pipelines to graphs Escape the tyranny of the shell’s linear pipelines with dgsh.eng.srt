1
00:00:00,060 --> 00:00:09,920
[Applause]

2
00:00:09,920 --> 00:00:13,980
good afternoon this is the reason I love

3
00:00:13,980 --> 00:00:18,600
UNIX with five lines of code we can

4
00:00:18,600 --> 00:00:21,359
build a spell checker so we can take the

5
00:00:21,359 --> 00:00:23,609
document from the web we can translate

6
00:00:23,609 --> 00:00:26,310
all their words into and separate them

7
00:00:26,310 --> 00:00:28,619
into a word in each line move the

8
00:00:28,619 --> 00:00:32,130
uppercase to lowercase sort them get one

9
00:00:32,130 --> 00:00:34,050
word on each line so remove duplicate

10
00:00:34,050 --> 00:00:36,660
words and then find out with common the

11
00:00:36,660 --> 00:00:38,310
words that are not in the dictionary and

12
00:00:38,310 --> 00:00:40,770
those are the spelling errors so pipe

13
00:00:40,770 --> 00:00:42,150
lines are extremely powerful

14
00:00:42,150 --> 00:00:46,080
last year I showed you another example

15
00:00:46,080 --> 00:00:48,060
where I used but one problem with

16
00:00:48,060 --> 00:00:50,940
pipelines is that they are linear so we

17
00:00:50,940 --> 00:00:52,830
can have a pipeline from one process to

18
00:00:52,830 --> 00:00:54,630
the other but that's the only thing we

19
00:00:54,630 --> 00:00:55,140
can do

20
00:00:55,140 --> 00:00:57,060
last year I showed you an example from

21
00:00:57,060 --> 00:00:59,100
the UNIX history repository where

22
00:00:59,100 --> 00:01:01,710
extracted various metrics such as how

23
00:01:01,710 --> 00:01:04,559
the number of the lengths of identifiers

24
00:01:04,559 --> 00:01:06,240
and the file names increases over time

25
00:01:06,240 --> 00:01:08,729
and the number of users over the

26
00:01:08,729 --> 00:01:10,619
registered key word of the go to keyword

27
00:01:10,619 --> 00:01:13,649
decreases in order to do that I pipeline

28
00:01:13,649 --> 00:01:16,229
many processes in a graph that's why

29
00:01:16,229 --> 00:01:18,420
they following find all files and then

30
00:01:18,420 --> 00:01:20,009
pass them through a preprocessor and

31
00:01:20,009 --> 00:01:22,219
through various grabs to find include

32
00:01:22,219 --> 00:01:25,289
names and their various identifiers such

33
00:01:25,289 --> 00:01:28,229
as the register or go-to and so on but

34
00:01:28,229 --> 00:01:29,700
as you see this is not a linear pipeline

35
00:01:29,700 --> 00:01:32,819
it is a graph so how can we do that how

36
00:01:32,819 --> 00:01:35,369
can a program such a graph with the UNIX

37
00:01:35,369 --> 00:01:37,530
shell there are a number of alternatives

38
00:01:37,530 --> 00:01:38,880
but they didn't find any of them

39
00:01:38,880 --> 00:01:41,310
particularly satisfactory so one of them

40
00:01:41,310 --> 00:01:43,560
is to run each pipeline separately but

41
00:01:43,560 --> 00:01:45,389
this is inefficient so because some

42
00:01:45,389 --> 00:01:47,810
parts of the processing get repeated

43
00:01:47,810 --> 00:01:50,069
another thing is to use temporary file

44
00:01:50,069 --> 00:01:51,869
store something and then reuse it this

45
00:01:51,869 --> 00:01:54,719
is awful because you have touched a disk

46
00:01:54,719 --> 00:01:57,689
and this performance files is a very

47
00:01:57,689 --> 00:02:00,780
damaging bash offers us a syntax to do

48
00:02:00,780 --> 00:02:03,659
that where we can send out the output to

49
00:02:03,659 --> 00:02:06,539
a process and we can use T to simulate

50
00:02:06,539 --> 00:02:09,240
those processes as files but this

51
00:02:09,240 --> 00:02:11,700
quickly gets ugly also it turns out but

52
00:02:11,700 --> 00:02:14,430
you cannot find in again the results so

53
00:02:14,430 --> 00:02:16,950
this is limiting in order to solve these

54
00:02:16,950 --> 00:02:19,080
problems and to create a better

55
00:02:19,080 --> 00:02:20,680
alternative

56
00:02:20,680 --> 00:02:25,650
and I created the Dodge the best thing

57
00:02:25,650 --> 00:02:28,540
since sliced bread it can process

58
00:02:28,540 --> 00:02:31,269
streams it can process big datasets it

59
00:02:31,269 --> 00:02:33,849
uses bash it uses existing UNIX tools so

60
00:02:33,849 --> 00:02:36,310
the tools you use and love you can still

61
00:02:36,310 --> 00:02:38,560
use them and does this in an express of

62
00:02:38,560 --> 00:02:39,510
an efficient way

63
00:02:39,510 --> 00:02:42,219
how does it work let me give you an

64
00:02:42,219 --> 00:02:44,650
example say you want to compress to come

65
00:02:44,650 --> 00:02:46,569
to compare various compression programs

66
00:02:46,569 --> 00:02:49,299
and I do that on the Karamazov brothers

67
00:02:49,299 --> 00:02:53,500
a text files and we get this output so

68
00:02:53,500 --> 00:02:55,329
how can we do this without storing

69
00:02:55,329 --> 00:02:56,919
anything on this so doing it everything

70
00:02:56,919 --> 00:02:58,959
on the fly obtaining the packets and

71
00:02:58,959 --> 00:03:01,000
then passing it through the different

72
00:03:01,000 --> 00:03:03,819
compression programs here is the graph

73
00:03:03,819 --> 00:03:06,609
that we want to have so you run T to

74
00:03:06,609 --> 00:03:08,409
send the output to file the word come to

75
00:03:08,409 --> 00:03:11,079
exit be zip and gzip then your word

76
00:03:11,079 --> 00:03:13,480
count the outputs your supremes the

77
00:03:13,480 --> 00:03:15,430
labels and you catenate everything

78
00:03:15,430 --> 00:03:17,980
together these are normal or almost

79
00:03:17,980 --> 00:03:21,099
normal UNIX tools this is how you

80
00:03:21,099 --> 00:03:24,280
express this in Dutch so you curl UT

81
00:03:24,280 --> 00:03:27,340
this is the special syntax and multiply

82
00:03:27,340 --> 00:03:29,530
p-- block where you are synchronously

83
00:03:29,530 --> 00:03:32,379
run all the commands that you want at

84
00:03:32,379 --> 00:03:34,840
the end you pass the pipe again the

85
00:03:34,840 --> 00:03:36,760
output of the multipath block through

86
00:03:36,760 --> 00:03:38,620
cut to concatenate the results together

87
00:03:38,620 --> 00:03:42,669
and get the output that I showed you so

88
00:03:42,669 --> 00:03:44,829
the mechanisms you have in Dutch are

89
00:03:44,829 --> 00:03:47,049
first of all multiply blocks you can

90
00:03:47,049 --> 00:03:48,939
also have Unix commands with multiple

91
00:03:48,939 --> 00:03:51,549
input or output channels such as cut to

92
00:03:51,549 --> 00:03:53,919
gather the results or tea to fan out the

93
00:03:53,919 --> 00:03:56,109
result or paste to gather the results

94
00:03:56,109 --> 00:03:59,560
and also store values to as a symbolic

95
00:03:59,560 --> 00:04:03,189
links through the graph we have adapted

96
00:04:03,189 --> 00:04:05,709
a number of programs for example T that

97
00:04:05,709 --> 00:04:07,629
can have an arbitrary number of output

98
00:04:07,629 --> 00:04:13,120
channels or paste and cut that can merge

99
00:04:13,120 --> 00:04:14,949
together many other channels and there

100
00:04:14,949 --> 00:04:17,228
are other programs that can do similar

101
00:04:17,228 --> 00:04:18,209
things

102
00:04:18,209 --> 00:04:20,620
there is an API with a single command

103
00:04:20,620 --> 00:04:22,419
you can convert any UNIX

104
00:04:22,419 --> 00:04:25,030
program to work with Dutch so what you

105
00:04:25,030 --> 00:04:27,520
do is we call Dutch negotiate you pass

106
00:04:27,520 --> 00:04:29,349
the tool name the number of file

107
00:04:29,349 --> 00:04:32,320
descriptors that you can you want the

108
00:04:32,320 --> 00:04:33,420
number of

109
00:04:33,420 --> 00:04:35,130
input file descriptors and output file

110
00:04:35,130 --> 00:04:36,720
descriptors that you want and as a

111
00:04:36,720 --> 00:04:38,100
result you get the input file

112
00:04:38,100 --> 00:04:39,690
descriptors and out to file descriptors

113
00:04:39,690 --> 00:04:42,240
that your tool can use so you say I want

114
00:04:42,240 --> 00:04:44,130
for input file descriptors and five are

115
00:04:44,130 --> 00:04:45,930
two file descriptors you get them and

116
00:04:45,930 --> 00:04:49,560
you play with them and that's all for

117
00:04:49,560 --> 00:04:51,420
backward compatibility for existing

118
00:04:51,420 --> 00:04:53,010
tools if you want don't want to adapt

119
00:04:53,010 --> 00:04:54,570
them with the API there's a command

120
00:04:54,570 --> 00:04:56,430
called that wrap that allows you to

121
00:04:56,430 --> 00:04:58,290
specify whether the command is mute

122
00:04:58,290 --> 00:05:00,210
doesn't have any input or whether it

123
00:05:00,210 --> 00:05:02,520
doesn't produce any output and you can

124
00:05:02,520 --> 00:05:04,890
also specify pseudo arguments that get

125
00:05:04,890 --> 00:05:07,140
converted into file descriptors so that

126
00:05:07,140 --> 00:05:10,020
it works correctly with any other dutch

127
00:05:10,020 --> 00:05:12,780
command let me give you some further

128
00:05:12,780 --> 00:05:15,420
examples first of all a motivating

129
00:05:15,420 --> 00:05:17,910
example say from debugging perspective

130
00:05:17,910 --> 00:05:19,770
say you want to find the differences

131
00:05:19,770 --> 00:05:23,910
between two straight outputs and what

132
00:05:23,910 --> 00:05:25,920
you would do is run orc and sort the

133
00:05:25,920 --> 00:05:27,960
result the problem with this is that you

134
00:05:27,960 --> 00:05:31,170
the flow goes in this direction then

135
00:05:31,170 --> 00:05:33,780
goes back to calm and then forward to

136
00:05:33,780 --> 00:05:35,940
more it goes in a crazy way backward and

137
00:05:35,940 --> 00:05:38,250
forward to touch what you do is you have

138
00:05:38,250 --> 00:05:40,350
a multiplier block with the two orcs you

139
00:05:40,350 --> 00:05:42,540
pipe that to come and you pipe that two

140
00:05:42,540 --> 00:05:45,300
more so the direction is exactly as we

141
00:05:45,300 --> 00:05:50,070
are used to read programs another

142
00:05:50,070 --> 00:05:51,690
example say you want to find duplicate

143
00:05:51,690 --> 00:05:55,260
files an efficient way to do that is to

144
00:05:55,260 --> 00:05:58,820
run md5sum to create a to create a

145
00:05:58,820 --> 00:06:02,580
checksum out of each file and then find

146
00:06:02,580 --> 00:06:04,590
those that appear multiple times the

147
00:06:04,590 --> 00:06:06,090
problem is that once you do that with

148
00:06:06,090 --> 00:06:08,130
unique you've lost the names of the

149
00:06:08,130 --> 00:06:10,880
files so what I'm doing here is I'm

150
00:06:10,880 --> 00:06:14,070
creating those checksums with the unique

151
00:06:14,070 --> 00:06:16,560
but I'm also concatenated the output to

152
00:06:16,560 --> 00:06:18,390
get the copy and then passing the

153
00:06:18,390 --> 00:06:20,910
results to join some walk magic to get

154
00:06:20,910 --> 00:06:24,480
names of duplicated files as another

155
00:06:24,480 --> 00:06:26,970
example say you want to run git log and

156
00:06:26,970 --> 00:06:29,280
you want to find who is there who has

157
00:06:29,280 --> 00:06:31,290
done the most committing in which days

158
00:06:31,290 --> 00:06:33,810
these commits have happened you can do

159
00:06:33,810 --> 00:06:37,500
that with a short unique so and in short

160
00:06:37,500 --> 00:06:40,410
again sequence but you want to do it

161
00:06:40,410 --> 00:06:42,270
once for each time without running log

162
00:06:42,270 --> 00:06:44,639
multiple times so here I have functioned

163
00:06:44,639 --> 00:06:47,250
Princeton number a run log for the

164
00:06:47,250 --> 00:06:49,979
authors and the dates with T I found out

165
00:06:49,979 --> 00:06:52,500
two two processes one for the authors

166
00:06:52,500 --> 00:06:54,569
and one for the days and with cut I

167
00:06:54,569 --> 00:06:57,060
joined them again and if I run this on

168
00:06:57,060 --> 00:06:59,939
the Linux kernel I get a list of authors

169
00:06:59,939 --> 00:07:01,979
and a list of days where most commits

170
00:07:01,979 --> 00:07:03,300
happen it appears that for some reason

171
00:07:03,300 --> 00:07:06,539
Tuesday is the day for we feel most

172
00:07:06,539 --> 00:07:09,539
productive getting back to the

173
00:07:09,539 --> 00:07:11,189
misspelled words the pipelining

174
00:07:11,189 --> 00:07:13,590
initially showed was maybe impressive

175
00:07:13,590 --> 00:07:15,360
but it doesn't show us where the words

176
00:07:15,360 --> 00:07:18,180
occur we can do that if we find the list

177
00:07:18,180 --> 00:07:21,300
of common words and then we pipe that to

178
00:07:21,300 --> 00:07:24,060
a script and for some more show we also

179
00:07:24,060 --> 00:07:27,150
ask F clip to color the words together

180
00:07:27,150 --> 00:07:30,090
with the original text so what I'm doing

181
00:07:30,090 --> 00:07:32,159
here is I have one multiply plot to find

182
00:07:32,159 --> 00:07:34,650
the errors and another one to pass

183
00:07:34,650 --> 00:07:37,080
through the text to grab with fixed

184
00:07:37,080 --> 00:07:39,810
rings and colors to get a result such as

185
00:07:39,810 --> 00:07:44,699
this if I Denton Tom Sawyer another

186
00:07:44,699 --> 00:07:46,379
interesting example is you want to find

187
00:07:46,379 --> 00:07:49,169
C and C++ symbols that should be static

188
00:07:49,169 --> 00:07:51,240
you can do that very easily if you run

189
00:07:51,240 --> 00:07:53,819
the output if you run em on compiled

190
00:07:53,819 --> 00:07:55,919
files and you find the files they're

191
00:07:55,919 --> 00:07:58,529
symbols that are exported from values

192
00:07:58,529 --> 00:08:00,360
compiled files but are not imported into

193
00:08:00,360 --> 00:08:02,699
any other file those obviously symbols

194
00:08:02,699 --> 00:08:04,409
should be started because no one uses

195
00:08:04,409 --> 00:08:07,529
them outside that file so again a

196
00:08:07,529 --> 00:08:10,379
multiply block with way on the output of

197
00:08:10,379 --> 00:08:13,050
and then to find those that are exported

198
00:08:13,050 --> 00:08:15,330
and those that are undefined and those

199
00:08:15,330 --> 00:08:17,759
that are not imported are the ones that

200
00:08:17,759 --> 00:08:20,310
we want so if I ran that on bus I see a

201
00:08:20,310 --> 00:08:23,400
list of files the list goes on who can

202
00:08:23,400 --> 00:08:26,069
do weblog reporting you can do 2d

203
00:08:26,069 --> 00:08:28,560
Fourier transforms and a mark processing

204
00:08:28,560 --> 00:08:30,689
with completely tools that no one wrote

205
00:08:30,689 --> 00:08:33,539
for this purpose parallel FFT

206
00:08:33,539 --> 00:08:37,140
computation parallel word cancer you can

207
00:08:37,140 --> 00:08:41,010
do MapReduce just by using this tool you

208
00:08:41,010 --> 00:08:42,990
can find get computer activity over time

209
00:08:42,990 --> 00:08:46,620
and so on what I'm asking you to do is

210
00:08:46,620 --> 00:08:49,350
first of all go there download it use it

211
00:08:49,350 --> 00:08:52,640
profit from it package it so if you are

212
00:08:52,640 --> 00:08:55,500
associated with a distribution create a

213
00:08:55,500 --> 00:08:58,490
package for it adapt existing tool

214
00:08:58,490 --> 00:09:00,529
or even develop new tools that are

215
00:09:00,529 --> 00:09:03,200
compatible with Dutch and also

216
00:09:03,200 --> 00:09:05,740
contributed enhancements and bug fixes

217
00:09:05,740 --> 00:09:08,360
as a small motivation there is a

218
00:09:08,360 --> 00:09:12,649
treasure hunt so go to the page of Dutch

219
00:09:12,649 --> 00:09:15,500
find the word associated with this book

220
00:09:15,500 --> 00:09:18,709
this fine book debugging find the script

221
00:09:18,709 --> 00:09:21,080
there and email me the output of that

222
00:09:21,080 --> 00:09:23,240
script you need Dutch to run the script

223
00:09:23,240 --> 00:09:25,430
and you get a digital copy of the book

224
00:09:25,430 --> 00:09:29,680
in three formats thank you very much

225
00:09:36,430 --> 00:09:38,689
thank you I we actually have another

226
00:09:38,689 --> 00:09:40,819
five minutes or more than five minutes

227
00:09:40,819 --> 00:09:45,729
so if you have any questions then that

228
00:09:47,800 --> 00:09:50,849
[Music]

229
00:09:56,200 --> 00:09:59,450
thanks for the presentation I was

230
00:09:59,450 --> 00:10:01,700
wondering how do you create the graphs

231
00:10:01,700 --> 00:10:06,550
the visualizations right I left out the

232
00:10:06,550 --> 00:10:08,300
implementation part because this is

233
00:10:08,300 --> 00:10:11,030
supposed to be a lighting talk there's a

234
00:10:11,030 --> 00:10:13,550
lot of magic happening behind the scenes

235
00:10:13,550 --> 00:10:17,230
so what is happening is first of all the

236
00:10:17,230 --> 00:10:21,170
processes get connected together in a

237
00:10:21,170 --> 00:10:23,240
linear fashion in a way that allows all

238
00:10:23,240 --> 00:10:25,370
processes to talk with each other at the

239
00:10:25,370 --> 00:10:27,080
points where you have fan out or phone

240
00:10:27,080 --> 00:10:29,150
in so at the input and output part of

241
00:10:29,150 --> 00:10:31,570
the concentrator blocks there are some

242
00:10:31,570 --> 00:10:34,910
concentrators that create those paths

243
00:10:34,910 --> 00:10:37,010
that join the processes together and

244
00:10:37,010 --> 00:10:39,290
then messages start flowing around and

245
00:10:39,290 --> 00:10:41,570
the negotiation process happens where

246
00:10:41,570 --> 00:10:43,640
each process says how many inputs it can

247
00:10:43,640 --> 00:10:45,560
provide and how many outputs it can

248
00:10:45,560 --> 00:10:48,170
provide and this packet goes around and

249
00:10:48,170 --> 00:10:50,150
around and all until everyone agrees or

250
00:10:50,150 --> 00:10:52,310
if there is no agreement the processes

251
00:10:52,310 --> 00:10:53,660
exit with an error if there is an

252
00:10:53,660 --> 00:10:56,390
agreement they they get the file

253
00:10:56,390 --> 00:10:58,370
descriptors and then the actual

254
00:10:58,370 --> 00:11:00,800
processing begins you know to get the

255
00:11:00,800 --> 00:11:02,320
descriptor what happens is at each

256
00:11:02,320 --> 00:11:05,270
negotiation part they initially they

257
00:11:05,270 --> 00:11:07,730
communicate with sockets instead of

258
00:11:07,730 --> 00:11:10,190
normal pipes and at the end of the

259
00:11:10,190 --> 00:11:12,980
negotiation they they pass file

260
00:11:12,980 --> 00:11:14,660
descriptors through those sockets that

261
00:11:14,660 --> 00:11:18,320
they can use from then on did that

262
00:11:18,320 --> 00:11:20,770
answer the question

263
00:11:24,210 --> 00:11:28,000
partly sure but I specifically wanted to

264
00:11:28,000 --> 00:11:29,890
know about the beautiful graphics yet

265
00:11:29,890 --> 00:11:33,460
because okay I think it looks like

266
00:11:33,460 --> 00:11:36,450
you're using a tool for that interested

267
00:11:36,450 --> 00:11:39,630
much much simpler you set an environment

268
00:11:39,630 --> 00:11:42,460
before calling ducks you set an

269
00:11:42,460 --> 00:11:44,020
environment variable with the name of

270
00:11:44,020 --> 00:11:47,050
the output file and instead of running

271
00:11:47,050 --> 00:11:49,120
the process just creates the dot graph

272
00:11:49,120 --> 00:11:54,760
for you so journey do you have any

273
00:11:54,760 --> 00:11:56,860
numbers on the speed up you can achieve

274
00:11:56,860 --> 00:11:59,890
on daily tasks for instance yes yes

275
00:11:59,890 --> 00:12:12,820
things so this is the time for that the

276
00:12:12,820 --> 00:12:15,100
blue one the red one is with the sage

277
00:12:15,100 --> 00:12:18,250
with the temporary files and for some

278
00:12:18,250 --> 00:12:20,350
programs I also implemented them in Java

279
00:12:20,350 --> 00:12:22,540
or Perl and the time was a lot longer

280
00:12:22,540 --> 00:12:25,660
but of course that's uses more course so

281
00:12:25,660 --> 00:12:28,990
it can be a lot more efficient so you

282
00:12:28,990 --> 00:12:31,630
get typically get a speed-up especially

283
00:12:31,630 --> 00:12:34,959
if you can use more cores how do you

284
00:12:34,959 --> 00:12:37,029
control the number of processes which

285
00:12:37,029 --> 00:12:39,790
are executed in parallel so how many how

286
00:12:39,790 --> 00:12:41,380
do you control the number of processes

287
00:12:41,380 --> 00:12:43,360
executed thoroughly how do you control

288
00:12:43,360 --> 00:12:45,310
the number of processes it's a dance

289
00:12:45,310 --> 00:12:47,260
that if you saw the beginning launches

290
00:12:47,260 --> 00:12:48,880
all processes that you have specified

291
00:12:48,880 --> 00:12:51,250
there is a tool called Dutch parallel

292
00:12:51,250 --> 00:12:53,080
where you specify how many it

293
00:12:53,080 --> 00:12:55,209
automatically creates a multiply plop

294
00:12:55,209 --> 00:12:57,550
homogeneously with as many processes you

295
00:12:57,550 --> 00:13:00,550
say so you say - n 10 and creates ten

296
00:13:00,550 --> 00:13:02,350
processes but other than that it's

297
00:13:02,350 --> 00:13:04,420
spawns of all the processes you have

298
00:13:04,420 --> 00:13:07,570
specified another question this seems

299
00:13:07,570 --> 00:13:09,250
like a really cool tool but it will be

300
00:13:09,250 --> 00:13:10,600
awesome if it were integrated into

301
00:13:10,600 --> 00:13:12,160
something like bash do you have plans

302
00:13:12,160 --> 00:13:14,890
for that do I have plans to integrate it

303
00:13:14,890 --> 00:13:16,959
with bash actually it is integrated with

304
00:13:16,959 --> 00:13:19,720
bash it's just not that it's a I'm using

305
00:13:19,720 --> 00:13:21,760
the source code of bash and it's built

306
00:13:21,760 --> 00:13:24,490
in so if bash wants to take it upstream

307
00:13:24,490 --> 00:13:27,779
it's there on github

308
00:13:29,490 --> 00:13:35,670
okay I think we have another two minutes

309
00:13:35,670 --> 00:13:38,650
hi what's it like when errors occurred

310
00:13:38,650 --> 00:13:41,890
in some other pipelines what happens if

311
00:13:41,890 --> 00:13:44,830
an error occurs there are three things

312
00:13:44,830 --> 00:13:47,050
that can happen the negotiation may fail

313
00:13:47,050 --> 00:13:48,580
then a packet goes around it says to

314
00:13:48,580 --> 00:13:51,700
everyone go away we messed up another

315
00:13:51,700 --> 00:13:53,680
thing is that one command may fail at

316
00:13:53,680 --> 00:13:56,710
random at that point there is also a

317
00:13:56,710 --> 00:13:59,260
message that goes around but it may not

318
00:13:59,260 --> 00:14:00,760
be able to go around because the comet

319
00:14:00,760 --> 00:14:03,100
has exit prematurely there is an alarm

320
00:14:03,100 --> 00:14:05,080
in the timeout that can take over at

321
00:14:05,080 --> 00:14:07,900
that point and if no command gets a

322
00:14:07,900 --> 00:14:09,820
message at the specific within a

323
00:14:09,820 --> 00:14:11,710
specific time then they again quit

324
00:14:11,710 --> 00:14:15,070
automatically we had trouble sorting

325
00:14:15,070 --> 00:14:18,010
that out in the beginning then any more

326
00:14:18,010 --> 00:14:22,480
questions sure about I missed the first

327
00:14:22,480 --> 00:14:24,640
part of the presentation so my question

328
00:14:24,640 --> 00:14:27,610
is what was your initial front

329
00:14:27,610 --> 00:14:30,640
frustration that led you to write this

330
00:14:30,640 --> 00:14:34,350
program this beautiful problem

331
00:14:37,860 --> 00:14:40,750
it was trying to implement a graph such

332
00:14:40,750 --> 00:14:43,660
as this one with bash so it would get

333
00:14:43,660 --> 00:14:45,970
all backwards if I ratted to erode it

334
00:14:45,970 --> 00:14:50,160
with T less a greater than Open bracket

335
00:14:55,360 --> 00:14:58,179
hi sorry there's something I didn't

336
00:14:58,179 --> 00:15:00,069
understand did you read the spark

337
00:15:00,069 --> 00:15:03,269
directly basically graphs in bash

338
00:15:03,269 --> 00:15:06,100
did I really meant yes is this a

339
00:15:06,100 --> 00:15:09,299
reimplementation of the spark at da G's

340
00:15:09,299 --> 00:15:12,819
what what we've done is we took bash and

341
00:15:12,819 --> 00:15:14,949
added the capability to express multiple

342
00:15:14,949 --> 00:15:17,920
blocks in it so double curly brace which

343
00:15:17,920 --> 00:15:20,679
means a block where things around mean

344
00:15:20,679 --> 00:15:23,920
parallel this impacts yeah I mean is

345
00:15:23,920 --> 00:15:26,459
there any theoretical difference with

346
00:15:26,459 --> 00:15:29,889
the da cheese from France Park it's just

347
00:15:29,889 --> 00:15:32,529
like a directed acyclic graph of

348
00:15:32,529 --> 00:15:36,339
processing right where do these tags

349
00:15:36,339 --> 00:15:42,189
occur which tool in spark who can talk

350
00:15:42,189 --> 00:15:47,170
about this later took after so thank you

351
00:15:47,170 --> 00:15:49,590
very much yes

352
00:15:49,590 --> 00:15:58,669
[Applause]

