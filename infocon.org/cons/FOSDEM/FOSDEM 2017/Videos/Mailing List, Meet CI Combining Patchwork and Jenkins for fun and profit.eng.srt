1
00:00:04,940 --> 00:00:07,260
hello everybody our next speaker is

2
00:00:07,260 --> 00:00:09,510
Stephen Finnegan with the mailing list

3
00:00:09,510 --> 00:00:11,550
welcome see I please give him a warm

4
00:00:11,550 --> 00:00:13,969
welcome

5
00:00:16,849 --> 00:00:18,840
morning everyone everyone can hear me

6
00:00:18,840 --> 00:00:23,539
okay still wait so I'm seeing felucca

7
00:00:23,539 --> 00:00:26,190
developer from Ireland working on an

8
00:00:26,190 --> 00:00:30,090
open set predominantly I worked on open

9
00:00:30,090 --> 00:00:32,729
V switch previously my last employer

10
00:00:32,729 --> 00:00:35,970
Intel and when I was working on open V

11
00:00:35,970 --> 00:00:40,680
switch we saw a kind of a pretty common

12
00:00:40,680 --> 00:00:43,260
problem with some of the work that we

13
00:00:43,260 --> 00:00:47,100
will plan on do it so when we were in

14
00:00:47,100 --> 00:00:50,670
Intel Intel has this deep leak a data

15
00:00:50,670 --> 00:00:53,579
path as part of open V switch and the

16
00:00:53,579 --> 00:00:55,410
deepening K data path isn't really the

17
00:00:55,410 --> 00:00:57,629
it's not the main way of view is in open

18
00:00:57,629 --> 00:01:00,000
V switch so Intel us a lot of focus on

19
00:01:00,000 --> 00:01:01,739
it and it's a lot of use in telco and

20
00:01:01,739 --> 00:01:03,840
any of the applications but because it

21
00:01:03,840 --> 00:01:06,060
wasn't the main data path in there we

22
00:01:06,060 --> 00:01:07,440
saw a lot of problems where people were

23
00:01:07,440 --> 00:01:09,149
submitting patches to upstream open V

24
00:01:09,149 --> 00:01:12,209
switch and those patches were killing

25
00:01:12,209 --> 00:01:17,459
functionality with a DP DK data path and

26
00:01:17,459 --> 00:01:20,670
this is a pretty common problem with a

27
00:01:20,670 --> 00:01:24,149
free open source projects open source

28
00:01:24,149 --> 00:01:25,619
projects really really like using

29
00:01:25,619 --> 00:01:27,360
mailing lists the Linux kernel is based

30
00:01:27,360 --> 00:01:29,490
on a mailing list patchwork itself which

31
00:01:29,490 --> 00:01:31,140
I'm going to talk about in a minute is

32
00:01:31,140 --> 00:01:34,140
based on a mailing list and in this case

33
00:01:34,140 --> 00:01:35,640
open V switch was based on a mailing

34
00:01:35,640 --> 00:01:38,849
list and the problem is that mailing

35
00:01:38,849 --> 00:01:41,310
lists don't work very well with tools

36
00:01:41,310 --> 00:01:43,849
like Jenkins and Travis and build button

37
00:01:43,849 --> 00:01:47,780
insert random build automation tool here

38
00:01:47,780 --> 00:01:50,580
so we set out about 18 months or two

39
00:01:50,580 --> 00:01:54,630
years ago to to try and remedy that

40
00:01:54,630 --> 00:01:56,610
problem we spotted that there was this

41
00:01:56,610 --> 00:01:58,619
tool called patch work which actually

42
00:01:58,619 --> 00:02:01,200
does work very well with main list I'll

43
00:02:01,200 --> 00:02:02,520
go into a bit of detail about what patch

44
00:02:02,520 --> 00:02:03,690
work is for anyone that's not familiar

45
00:02:03,690 --> 00:02:06,119
with it in a moment and what we wanted

46
00:02:06,119 --> 00:02:08,340
to do was we wanted to take patch work

47
00:02:08,340 --> 00:02:09,840
and we wanted to be able to hook it in

48
00:02:09,840 --> 00:02:12,840
to Jenkins and provide a way to use

49
00:02:12,840 --> 00:02:15,810
Jenkins of middle but or whatever to

50
00:02:15,810 --> 00:02:17,760
automatically test the patches that come

51
00:02:17,760 --> 00:02:20,159
and continually test them and make sure

52
00:02:20,159 --> 00:02:21,450
that they don't regress anything that's

53
00:02:21,450 --> 00:02:24,030
already in the codebase and basically do

54
00:02:24,030 --> 00:02:25,200
all the good stuff that were able to get

55
00:02:25,200 --> 00:02:26,700
using github and garrett and other tools

56
00:02:26,700 --> 00:02:35,220
like that so patchwork is this tool that

57
00:02:35,220 --> 00:02:38,250
takes a mailing list and puts it into a

58
00:02:38,250 --> 00:02:40,530
nice pretty web UI that lets you do a

59
00:02:40,530 --> 00:02:41,849
couple of cool things with that

60
00:02:41,849 --> 00:02:43,950
manliness with patches on that mailing

61
00:02:43,950 --> 00:02:47,069
list so you can do stuff you can you

62
00:02:47,069 --> 00:02:48,870
track reviewers or delegates and

63
00:02:48,870 --> 00:02:50,970
patchwork terminology you can bundle

64
00:02:50,970 --> 00:02:53,040
patches up and download the mbox files

65
00:02:53,040 --> 00:02:56,819
of an entire series of patches you can

66
00:02:56,819 --> 00:02:58,980
keep track of the state of a patch as it

67
00:02:58,980 --> 00:03:00,840
works with the whatever your internal

68
00:03:00,840 --> 00:03:03,480
workflow is as you review it as you test

69
00:03:03,480 --> 00:03:05,099
it whatever you need to do with your

70
00:03:05,099 --> 00:03:12,349
patches and it works pretty well so we

71
00:03:12,349 --> 00:03:14,400
had a look at this and we started there

72
00:03:14,400 --> 00:03:16,739
was a couple of small changes we could

73
00:03:16,739 --> 00:03:18,810
make that might actually allow us to

74
00:03:18,810 --> 00:03:21,980
hook us into Jenkins

75
00:03:22,770 --> 00:03:25,500
so there's four main features that we've

76
00:03:25,500 --> 00:03:30,870
been working on in the original summary

77
00:03:30,870 --> 00:03:33,360
for this presentation I said that these

78
00:03:33,360 --> 00:03:35,010
were gonna be included in Patrick to

79
00:03:35,010 --> 00:03:36,930
know unfortunately life as a way of

80
00:03:36,930 --> 00:03:39,480
getting in between you and your

81
00:03:39,480 --> 00:03:41,880
development time so three of these

82
00:03:41,880 --> 00:03:44,670
things emerged upstream the final one

83
00:03:44,670 --> 00:03:46,650
the last one at the end is still in

84
00:03:46,650 --> 00:03:48,120
development I hope to get that finished

85
00:03:48,120 --> 00:03:49,830
in the next month or so and that should

86
00:03:49,830 --> 00:03:55,440
make the $2 release complete the first

87
00:03:55,440 --> 00:03:58,230
of these features is a the best API so

88
00:03:58,230 --> 00:04:01,350
patchwork came with this XML RPC API

89
00:04:01,350 --> 00:04:03,240
which has been around since Patrick was

90
00:04:03,240 --> 00:04:06,060
first developed in about 2008 it works

91
00:04:06,060 --> 00:04:07,490
pretty well

92
00:04:07,490 --> 00:04:10,890
XML RPC has kind of gone by the wayside

93
00:04:10,890 --> 00:04:13,770
West restful api is in the new black as

94
00:04:13,770 --> 00:04:16,260
far as web apps go

95
00:04:16,260 --> 00:04:19,470
so we said right we'll keep the XML RPC

96
00:04:19,470 --> 00:04:21,690
API what will expose this new restful

97
00:04:21,690 --> 00:04:23,460
api and everything that patchwork knows

98
00:04:23,460 --> 00:04:25,620
we're going to expose that through this

99
00:04:25,620 --> 00:04:27,450
REST API so that's patches that's

100
00:04:27,450 --> 00:04:30,990
bundles that's users people projects the

101
00:04:30,990 --> 00:04:34,200
whole thing and that's built on Django

102
00:04:34,200 --> 00:04:35,850
rest framework which is possibly one of

103
00:04:35,850 --> 00:04:37,740
the nicest libraries I've ever had the

104
00:04:37,740 --> 00:04:40,430
pleasure of working with

105
00:04:41,380 --> 00:04:42,880
the next thing the thing that's probably

106
00:04:42,880 --> 00:04:45,520
taken the most time to work on has been

107
00:04:45,520 --> 00:04:48,280
a series support so for anyone here

108
00:04:48,280 --> 00:04:50,410
that's familiar with the mailing list

109
00:04:50,410 --> 00:04:53,830
workflow a series is a collection of

110
00:04:53,830 --> 00:04:59,320
patches that exactly like a series of

111
00:04:59,320 --> 00:05:01,360
commits and getting get you need to

112
00:05:01,360 --> 00:05:03,820
apply the patches in order in order to

113
00:05:03,820 --> 00:05:07,660
build a logical feature or bug fix or

114
00:05:07,660 --> 00:05:09,960
whatever you need to do so at the

115
00:05:09,960 --> 00:05:11,980
historically patch work hasn't supported

116
00:05:11,980 --> 00:05:14,620
series it supported bundles which kind

117
00:05:14,620 --> 00:05:16,120
of equate to the same thing but bundles

118
00:05:16,120 --> 00:05:18,190
have to be done manually so someone has

119
00:05:18,190 --> 00:05:20,620
to go in and take a collection of

120
00:05:20,620 --> 00:05:22,570
patches and form into bundle we wanted

121
00:05:22,570 --> 00:05:24,600
that to be automatic

122
00:05:24,600 --> 00:05:27,880
so series support is a part of the

123
00:05:27,880 --> 00:05:30,580
upstream patchwork at the moment it

124
00:05:30,580 --> 00:05:33,970
exposes patches it also extends patch

125
00:05:33,970 --> 00:05:35,680
works ability to track other types of

126
00:05:35,680 --> 00:05:38,770
mails in this case cover letters so a

127
00:05:38,770 --> 00:05:41,080
cover letter is a message that comes

128
00:05:41,080 --> 00:05:42,160
before a series that gives you

129
00:05:42,160 --> 00:05:43,600
information about what the e-series is

130
00:05:43,600 --> 00:05:45,250
intended to do gives you a big-picture

131
00:05:45,250 --> 00:05:48,340
view so this will also attract cover

132
00:05:48,340 --> 00:05:49,840
letters for you and it will keep track

133
00:05:49,840 --> 00:05:52,120
of things like have a received all of

134
00:05:52,120 --> 00:05:53,740
the patches that have come in off that

135
00:05:53,740 --> 00:05:54,850
should have been submitted to the

136
00:05:54,850 --> 00:05:56,110
manless so if the mailing list has

137
00:05:56,110 --> 00:05:57,820
dropped two patches out of a ten-pack

138
00:05:57,820 --> 00:06:00,790
series you're able to see this both

139
00:06:00,790 --> 00:06:03,100
through the web UI and through the rest

140
00:06:03,100 --> 00:06:05,490
api

141
00:06:06,590 --> 00:06:10,190
as a extension to this you're able to

142
00:06:10,190 --> 00:06:13,970
download patches and patch in boxes we

143
00:06:13,970 --> 00:06:15,770
wanted to make it possible to download

144
00:06:15,770 --> 00:06:19,610
the bucks for an entire series and for

145
00:06:19,610 --> 00:06:21,470
the sake of testing we wanted to be able

146
00:06:21,470 --> 00:06:23,660
to download a patch regardless of where

147
00:06:23,660 --> 00:06:25,370
it was in the series with all its

148
00:06:25,370 --> 00:06:27,290
dependencies so if you had a 10 patch

149
00:06:27,290 --> 00:06:30,260
series we wanted to test patch 5 which

150
00:06:30,260 --> 00:06:31,610
meant you need to download the first

151
00:06:31,610 --> 00:06:33,830
four patches so you could apply those

152
00:06:33,830 --> 00:06:35,840
and make sure that the fifth one applied

153
00:06:35,840 --> 00:06:38,630
cleanly it's the first of the things

154
00:06:38,630 --> 00:06:40,460
that's still work-in-progress those

155
00:06:40,460 --> 00:06:42,020
patches up on this on the patchwork

156
00:06:42,020 --> 00:06:43,550
mailing list at the moment going through

157
00:06:43,550 --> 00:06:46,190
a review I hope to get that merged in

158
00:06:46,190 --> 00:06:52,460
the next few weeks the next thing this

159
00:06:52,460 --> 00:06:54,110
is a thing that's currently being used

160
00:06:54,110 --> 00:06:55,940
by a couple of projects I know DPD care

161
00:06:55,940 --> 00:06:58,250
using it and I'm hoping to start using

162
00:06:58,250 --> 00:07:00,760
it for open V switch in the near future

163
00:07:00,760 --> 00:07:04,820
checks are simply a way of keeping track

164
00:07:04,820 --> 00:07:09,290
of the test results from a given test or

165
00:07:09,290 --> 00:07:14,080
build that you run so we wanted a way of

166
00:07:14,080 --> 00:07:16,730
exposing this information to the to

167
00:07:16,730 --> 00:07:18,560
Jenkins so that we can surely go and

168
00:07:18,560 --> 00:07:20,600
test on them but we also wanted a way of

169
00:07:20,600 --> 00:07:22,400
reporting that information back to patch

170
00:07:22,400 --> 00:07:24,260
work so someone could go in and get a

171
00:07:24,260 --> 00:07:27,530
one stop snapshot view of the current

172
00:07:27,530 --> 00:07:29,630
state of a patch so not only were able

173
00:07:29,630 --> 00:07:31,220
to see who's currently reviewing your

174
00:07:31,220 --> 00:07:33,920
patch and what state it is through the

175
00:07:33,920 --> 00:07:35,780
review pipeline but you're also able to

176
00:07:35,780 --> 00:07:40,520
see is that patch test the passing so

177
00:07:40,520 --> 00:07:42,320
many tests so if you have three

178
00:07:42,320 --> 00:07:43,910
different guys won't test of all those

179
00:07:43,910 --> 00:07:46,940
guys happy with the tape patch this is

180
00:07:46,940 --> 00:07:49,490
up there at the moment and it's exposed

181
00:07:49,490 --> 00:07:51,080
through the rest api and it's also

182
00:07:51,080 --> 00:07:53,570
exposed to the legacy xml-rpc api which

183
00:07:53,570 --> 00:07:57,440
i'm pretty sure is how DP DK using this

184
00:07:57,440 --> 00:08:00,460
functionality at the moment

185
00:08:00,910 --> 00:08:03,240
the final one the one that's taken

186
00:08:03,240 --> 00:08:06,160
that's kept me up late at night for the

187
00:08:06,160 --> 00:08:09,520
last couple of weeks has been events so

188
00:08:09,520 --> 00:08:11,530
events this is based on a actually how

189
00:08:11,530 --> 00:08:14,800
github do events in their API I figured

190
00:08:14,800 --> 00:08:17,130
that why reinvent the wheel

191
00:08:17,130 --> 00:08:19,750
events will keep track of life cycle

192
00:08:19,750 --> 00:08:21,220
events and different elements the

193
00:08:21,220 --> 00:08:24,220
patchwork tracks so if there's a new

194
00:08:24,220 --> 00:08:27,070
bundle created if a patch is created

195
00:08:27,070 --> 00:08:29,830
crucially if a patch is created and then

196
00:08:29,830 --> 00:08:32,590
all of its dependencies are met

197
00:08:32,590 --> 00:08:35,349
ie patch number five in a series if the

198
00:08:35,349 --> 00:08:37,770
first four patches have been received

199
00:08:37,770 --> 00:08:39,970
events will be raised for this and they

200
00:08:39,970 --> 00:08:41,080
provide a quick and easy way of

201
00:08:41,080 --> 00:08:44,350
downloading the patch and then your

202
00:08:44,350 --> 00:08:47,260
series for those kind of events this is

203
00:08:47,260 --> 00:08:49,390
pretty crucial when it comes to CI

204
00:08:49,390 --> 00:08:52,150
because it gives you a an automated way

205
00:08:52,150 --> 00:08:54,820
of figuring out what it is that is

206
00:08:54,820 --> 00:08:59,290
available for testing so how do you

207
00:08:59,290 --> 00:09:00,310
actually go about using all this

208
00:09:00,310 --> 00:09:03,490
functionality this it I put together a

209
00:09:03,490 --> 00:09:05,410
little bit of a demo I'm not going to go

210
00:09:05,410 --> 00:09:07,210
into all the detail on it here I've a

211
00:09:07,210 --> 00:09:09,820
blog post which should be published in

212
00:09:09,820 --> 00:09:11,980
this evening on my website where you can

213
00:09:11,980 --> 00:09:13,990
find the actual specific commands you

214
00:09:13,990 --> 00:09:16,590
could run but how would you go about

215
00:09:16,590 --> 00:09:19,810
tying patch work into in this case

216
00:09:19,810 --> 00:09:26,170
Jenkins so it's not that difficult since

217
00:09:26,170 --> 00:09:28,210
not enough anyway patch work receives

218
00:09:28,210 --> 00:09:30,610
patches from a mailing list and it fires

219
00:09:30,610 --> 00:09:33,040
events so remember now events is still

220
00:09:33,040 --> 00:09:35,740
in development so there any of the

221
00:09:35,740 --> 00:09:38,560
examples I show might change in the next

222
00:09:38,560 --> 00:09:41,320
week or two but it'll fire a patch

223
00:09:41,320 --> 00:09:43,500
complete or a patch dependencies MIT

224
00:09:43,500 --> 00:09:47,350
event which you have some little script

225
00:09:47,350 --> 00:09:48,820
running somewhere it's able to pull in

226
00:09:48,820 --> 00:09:50,680
those patches and it's able to build

227
00:09:50,680 --> 00:09:51,910
your job request which is going to

228
00:09:51,910 --> 00:09:55,690
submit to Jenkins Jenkins takes that

229
00:09:55,690 --> 00:10:00,010
that job requests important step here it

230
00:10:00,010 --> 00:10:02,230
submits the check back to patch work say

231
00:10:02,230 --> 00:10:05,110
in the pending state saying that I'm

232
00:10:05,110 --> 00:10:07,690
about to kick off a test the testers in

233
00:10:07,690 --> 00:10:09,970
the pending state which provides users

234
00:10:09,970 --> 00:10:13,180
with a visibility about whether their CI

235
00:10:13,180 --> 00:10:14,220
system is running

236
00:10:14,220 --> 00:10:16,350
and then what kind of CR what kind of

237
00:10:16,350 --> 00:10:18,600
test I've actually run expected to run

238
00:10:18,600 --> 00:10:23,630
against that patch Jenkins in this case

239
00:10:23,630 --> 00:10:27,360
pulls in the patch runs all of its tests

240
00:10:27,360 --> 00:10:31,800
and gets his head bizarre whether that's

241
00:10:31,800 --> 00:10:35,070
a success or a failure or warning and

242
00:10:35,070 --> 00:10:36,870
then it pushes that was a straight back

243
00:10:36,870 --> 00:10:40,230
up to patch work that information then

244
00:10:40,230 --> 00:10:43,230
is visible for users you provide a URL

245
00:10:43,230 --> 00:10:44,280
where you can go and get more

246
00:10:44,280 --> 00:10:45,600
information so if you have build

247
00:10:45,600 --> 00:10:49,080
artifacts provide a URL where users can

248
00:10:49,080 --> 00:10:51,000
find all those build artifacts give a

249
00:10:51,000 --> 00:10:53,310
brief description and of course the

250
00:10:53,310 --> 00:10:58,890
actual test data so there's a lot more

251
00:10:58,890 --> 00:11:00,420
if there's a couple of tools that are

252
00:11:00,420 --> 00:11:03,000
already using a very severe API snow

253
00:11:03,000 --> 00:11:05,880
patches one that are well the demo that

254
00:11:05,880 --> 00:11:08,400
I built use plain old bash scripts

255
00:11:08,400 --> 00:11:09,660
because they were nice and hacky and I

256
00:11:09,660 --> 00:11:11,450
was able to do it in a couple of hours

257
00:11:11,450 --> 00:11:15,170
but hopefully we build upon that in time

258
00:11:15,170 --> 00:11:16,980
how we're actually planning on building

259
00:11:16,980 --> 00:11:19,440
upon that the first thing is emerge all

260
00:11:19,440 --> 00:11:20,520
of the patches that are currently

261
00:11:20,520 --> 00:11:22,890
sitting in the main of this so finish

262
00:11:22,890 --> 00:11:25,100
events finish the ability to download

263
00:11:25,100 --> 00:11:29,460
series em boxes and document everything

264
00:11:29,460 --> 00:11:33,530
to the eyeballs if we can in addition

265
00:11:33,530 --> 00:11:35,610
those are really any reason in that

266
00:11:35,610 --> 00:11:38,040
workflow to keep a script around it is

267
00:11:38,040 --> 00:11:39,840
possible for Jenkins to actually do this

268
00:11:39,840 --> 00:11:42,090
itself what by way over Jenkins plug-in

269
00:11:42,090 --> 00:11:45,120
or something similar and there's also no

270
00:11:45,120 --> 00:11:46,710
reason to actually use Jenkins I use

271
00:11:46,710 --> 00:11:48,300
that use that because it was the lowest

272
00:11:48,300 --> 00:11:52,260
common denominator but from coming from

273
00:11:52,260 --> 00:11:55,290
openstax ooh it's pretty much like the

274
00:11:55,290 --> 00:11:57,420
bee's knees other testing automation

275
00:11:57,420 --> 00:12:00,240
tools if I can find a way of hooking Zul

276
00:12:00,240 --> 00:12:02,520
into a inter patch work then that's

277
00:12:02,520 --> 00:12:04,350
something that I definitely like to to

278
00:12:04,350 --> 00:12:06,570
do to bring in all the different

279
00:12:06,570 --> 00:12:09,589
advantages that Zul offers

280
00:12:09,920 --> 00:12:12,769
so that's a very brief overview of the

281
00:12:12,769 --> 00:12:13,850
kind of stuff that's coming down the

282
00:12:13,850 --> 00:12:16,670
pipeline for Patrick to dato this the

283
00:12:16,670 --> 00:12:17,720
first place you're probably going to

284
00:12:17,720 --> 00:12:20,059
find this would be the odds labs

285
00:12:20,059 --> 00:12:23,269
instance which is it's used for open V

286
00:12:23,269 --> 00:12:26,359
switch and a good fewer other Linux

287
00:12:26,359 --> 00:12:29,389
kernel projects and I'm hoping to get

288
00:12:29,389 --> 00:12:32,540
the date playing development kit guys on

289
00:12:32,540 --> 00:12:33,619
board with this as well and get

290
00:12:33,619 --> 00:12:36,589
automated testing on there more

291
00:12:36,589 --> 00:12:38,269
information available on the website and

292
00:12:38,269 --> 00:12:41,179
the gate repo and of course on the

293
00:12:41,179 --> 00:12:42,709
mailing list isn't probably the best

294
00:12:42,709 --> 00:12:45,230
place to find all of this so I've been

295
00:12:45,230 --> 00:12:47,869
seeing Finnegan I'm hoping to take any

296
00:12:47,869 --> 00:12:50,419
questions that anyone might have thanks

297
00:12:50,419 --> 00:12:54,639
for listening Thank You Steven

298
00:12:54,639 --> 00:12:57,379
so we have two minutes if there's any

299
00:12:57,379 --> 00:13:02,079
questions don't be shy

300
00:13:09,269 --> 00:13:13,119
first of all thanks for the talk

301
00:13:13,119 --> 00:13:15,839
this is something I was thinking about

302
00:13:15,839 --> 00:13:18,790
for the last couple of weeks because I

303
00:13:18,790 --> 00:13:20,470
was going to write some sort of

304
00:13:20,470 --> 00:13:22,480
integration between Jenkins and

305
00:13:22,480 --> 00:13:29,920
patchwork and this helps to clear to

306
00:13:29,920 --> 00:13:32,619
make this idea about this bit more clear

307
00:13:32,619 --> 00:13:35,410
because some I was reading the

308
00:13:35,410 --> 00:13:36,910
documentation for patchwork and some

309
00:13:36,910 --> 00:13:39,730
things were missing and you basically

310
00:13:39,730 --> 00:13:41,800
described those things I think I will

311
00:13:41,800 --> 00:13:43,149
contribute some patches for the

312
00:13:43,149 --> 00:13:46,480
documentation so that this bit is

313
00:13:46,480 --> 00:13:50,709
covered the one question i planning to

314
00:13:50,709 --> 00:13:54,100
write a jenkins blog in for this or is

315
00:13:54,100 --> 00:13:57,369
it something that's so I started a

316
00:13:57,369 --> 00:14:00,670
couple of weeks back I spent about two

317
00:14:00,670 --> 00:14:02,619
days trying to install NetBeans which I

318
00:14:02,619 --> 00:14:04,779
had used since college and unfortunately

319
00:14:04,779 --> 00:14:08,019
isn't packaged on Fedora and that pretty

320
00:14:08,019 --> 00:14:09,939
much took all the energy that I had to

321
00:14:09,939 --> 00:14:13,839
go and write java code again so at some

322
00:14:13,839 --> 00:14:16,110
point in the next few months

323
00:14:16,110 --> 00:14:18,759
Jenkins plugin would be my ideal target

324
00:14:18,759 --> 00:14:20,649
if I can't get a Jenkins blogging go and

325
00:14:20,649 --> 00:14:22,660
I might try build parts or something cuz

326
00:14:22,660 --> 00:14:25,839
that's python-based oh yeah one question

327
00:14:25,839 --> 00:14:29,009
of this REST API does it set any

328
00:14:29,009 --> 00:14:35,860
relevant HTTP headers so that like with

329
00:14:35,860 --> 00:14:38,470
it etag or modified time some like this

330
00:14:38,470 --> 00:14:41,259
last modified so that no a script no no

331
00:14:41,259 --> 00:14:44,199
not yet so there's there's two big

332
00:14:44,199 --> 00:14:46,209
optimizations needed for the most API

333
00:14:46,209 --> 00:14:48,309
the first one is e tags so I can

334
00:14:48,309 --> 00:14:51,279
actually you don't need to make requests

335
00:14:51,279 --> 00:14:52,959
to the server every time the second one

336
00:14:52,959 --> 00:14:57,299
is go back to the actual rest api body

337
00:14:57,299 --> 00:15:00,339
you'll see stuff example there's a

338
00:15:00,339 --> 00:15:02,740
patching a series there i want the

339
00:15:02,740 --> 00:15:05,350
ability to expand that patching series

340
00:15:05,350 --> 00:15:06,879
inline side again i don't need to make

341
00:15:06,879 --> 00:15:08,079
two additional requests of the server

342
00:15:08,079 --> 00:15:11,319
but i need to get to that all out after

343
00:15:11,319 --> 00:15:13,389
200 is out then maybe the lesson

344
00:15:13,389 --> 00:15:16,660
optimization for 2.1 i'm afraid the time

345
00:15:16,660 --> 00:15:17,980
it's up you have to continue talk

346
00:15:17,980 --> 00:15:19,029
outside

347
00:15:19,029 --> 00:15:20,930
thanks a lot stephen

348
00:15:20,930 --> 00:15:27,839
[Applause]

