1
00:00:04,660 --> 00:00:07,580
okay so for those of you who don't know

2
00:00:07,580 --> 00:00:09,530
it the getter project is a suite of free

3
00:00:09,530 --> 00:00:11,990
spare programs for electronic design

4
00:00:11,990 --> 00:00:16,250
intubation it has G skin per schematic

5
00:00:16,250 --> 00:00:18,410
capture occasion it has Jeannette list

6
00:00:18,410 --> 00:00:20,210
which is a command-line tool for

7
00:00:20,210 --> 00:00:22,820
creating net lists which are lists of

8
00:00:22,820 --> 00:00:24,289
component and the connection between

9
00:00:24,289 --> 00:00:28,460
them it has CB for PCB layout the OP we

10
00:00:28,460 --> 00:00:31,010
for inspecting Cobb of us before sending

11
00:00:31,010 --> 00:00:33,379
them to application and recently

12
00:00:33,379 --> 00:00:35,960
somewhere in between those connecting

13
00:00:35,960 --> 00:00:39,170
this so on this talk is about what's on

14
00:00:39,170 --> 00:00:42,379
white is there and if maybe you want to

15
00:00:42,379 --> 00:00:46,699
use it so I got involved with adder in

16
00:00:46,699 --> 00:00:51,860
2009 I was using GSM to add some to

17
00:00:51,860 --> 00:00:54,019
creating simple schematics and every

18
00:00:54,019 --> 00:00:56,960
time would add a component I would click

19
00:00:56,960 --> 00:01:00,080
it and I think what happened because you

20
00:01:00,080 --> 00:01:01,729
have to select it and then press ok

21
00:01:01,729 --> 00:01:03,739
which I knew but it still was compared

22
00:01:03,739 --> 00:01:06,650
to ative to mean so I created a patch

23
00:01:06,650 --> 00:01:08,299
which would be allowed to double ache

24
00:01:08,299 --> 00:01:11,420
component and I was made it at problem

25
00:01:11,420 --> 00:01:15,590
soft but then I wondered if it would be

26
00:01:15,590 --> 00:01:17,960
a good idea to put the components act to

27
00:01:17,960 --> 00:01:20,530
the side of the main widow as a doc and

28
00:01:20,530 --> 00:01:22,640
if it would be a good idea to have

29
00:01:22,640 --> 00:01:24,830
project browse the way I could select

30
00:01:24,830 --> 00:01:26,920
file in the current working directory or

31
00:01:26,920 --> 00:01:30,590
property editor and then realized that

32
00:01:30,590 --> 00:01:32,720
what way the code is organized right now

33
00:01:32,720 --> 00:01:36,500
this be not not easy and that's probably

34
00:01:36,500 --> 00:01:39,190
way why it hasn't been invented before

35
00:01:39,190 --> 00:01:44,930
so because the the wish to have a common

36
00:01:44,930 --> 00:01:48,310
user interface both PCP and GCM was

37
00:01:48,310 --> 00:01:50,810
around for some wild with Ganim I

38
00:01:50,810 --> 00:01:55,460
decided to work on that and four years

39
00:01:55,460 --> 00:01:57,530
later I told most of the user interface

40
00:01:57,530 --> 00:02:00,830
issues I had the library we talked a

41
00:02:00,830 --> 00:02:03,170
project browser and some other people's

42
00:02:03,170 --> 00:02:05,270
which were nice to have which didn't

43
00:02:05,270 --> 00:02:08,030
accustomed get out right now but I still

44
00:02:08,030 --> 00:02:10,340
haven't collected this so the main get a

45
00:02:10,340 --> 00:02:12,740
code and that is because I wanted to

46
00:02:12,740 --> 00:02:15,140
have a good flippin foundation which

47
00:02:15,140 --> 00:02:17,660
would allow me to not applicate any code

48
00:02:17,660 --> 00:02:18,470
which

49
00:02:18,470 --> 00:02:20,240
not using this related and this

50
00:02:20,240 --> 00:02:22,400
scripting foundation didn't exist yet to

51
00:02:22,400 --> 00:02:26,090
get on but in order to work on that I

52
00:02:26,090 --> 00:02:27,890
would have to answer a few questions

53
00:02:27,890 --> 00:02:29,230
asked

54
00:02:29,230 --> 00:02:32,900
what is scripting what purpose does it

55
00:02:32,900 --> 00:02:36,410
solve and what are the constraints under

56
00:02:36,410 --> 00:02:42,410
which circling is working so in a

57
00:02:42,410 --> 00:02:45,560
proprietary context an application is

58
00:02:45,560 --> 00:02:49,480
this big drop of code and you can't

59
00:02:49,480 --> 00:02:52,070
inspect it you can't change the way it

60
00:02:52,070 --> 00:02:55,310
works but users from our experience

61
00:02:55,310 --> 00:02:57,740
usually want to automate the tasks done

62
00:02:57,740 --> 00:02:59,510
in education they want to change the

63
00:02:59,510 --> 00:03:01,250
applications durations and do more

64
00:03:01,250 --> 00:03:05,209
complex functionality and also it makes

65
00:03:05,209 --> 00:03:07,370
sense to extend user interface depending

66
00:03:07,370 --> 00:03:10,730
on the workload for maybe a simulation

67
00:03:10,730 --> 00:03:14,290
or importing schematic into PC beam and

68
00:03:14,290 --> 00:03:17,540
obviously combine those to create more

69
00:03:17,540 --> 00:03:19,520
complex functionality and extend the use

70
00:03:19,520 --> 00:03:23,269
in is with that so awareness new is may

71
00:03:23,269 --> 00:03:25,310
embed scripting interpreter into an

72
00:03:25,310 --> 00:03:27,590
application and export the functionality

73
00:03:27,590 --> 00:03:29,570
of application as procedures to the

74
00:03:29,570 --> 00:03:32,150
scripting in Britain and then the

75
00:03:32,150 --> 00:03:34,040
attacks at various point for example

76
00:03:34,040 --> 00:03:37,010
application startup or pressing a user

77
00:03:37,010 --> 00:03:40,370
interface button saving a file where as

78
00:03:40,370 --> 00:03:43,670
user scripts are executed so this is

79
00:03:43,670 --> 00:03:46,340
basically a way to regain some of the

80
00:03:46,340 --> 00:03:48,470
flexibility which is lost by not being

81
00:03:48,470 --> 00:03:50,810
able to modify the application in the

82
00:03:50,810 --> 00:03:52,209
first place

83
00:03:52,209 --> 00:03:55,489
free software users can modify the

84
00:03:55,489 --> 00:03:58,900
package so there is so need to do script

85
00:03:58,900 --> 00:04:01,280
but there are a few reasons what may be

86
00:04:01,280 --> 00:04:04,239
good idea to the zom-- anyway because

87
00:04:04,239 --> 00:04:07,910
the iLab application the the high-level

88
00:04:07,910 --> 00:04:11,080
logic of an application is usually more

89
00:04:11,080 --> 00:04:16,010
more complicated error-prone to express

90
00:04:16,010 --> 00:04:18,290
in a low-level language so it may make

91
00:04:18,290 --> 00:04:19,910
sense both for the levels of the

92
00:04:19,910 --> 00:04:21,649
application and the users to have

93
00:04:21,649 --> 00:04:23,840
another language I love language to

94
00:04:23,840 --> 00:04:28,669
address this functional team also we

95
00:04:28,669 --> 00:04:30,650
have worked with developer console

96
00:04:30,650 --> 00:04:32,030
Firefox

97
00:04:32,030 --> 00:04:33,920
probably now that's really good for

98
00:04:33,920 --> 00:04:36,470
learning how the script work and for

99
00:04:36,470 --> 00:04:39,230
debugging and it would be a nice thing

100
00:04:39,230 --> 00:04:41,930
to have that you in a ADA application

101
00:04:41,930 --> 00:04:46,760
and finally today most users will get

102
00:04:46,760 --> 00:04:48,950
the binaries from their abuse package

103
00:04:48,950 --> 00:04:51,800
management so as a very important thing

104
00:04:51,800 --> 00:04:53,540
that they are able to modify the

105
00:04:53,540 --> 00:04:59,870
occasion without having to rebuild it so

106
00:04:59,870 --> 00:05:01,730
you may ask why not write an application

107
00:05:01,730 --> 00:05:03,920
in a high level in the first place and

108
00:05:03,920 --> 00:05:05,750
actually in most cases that a good idea

109
00:05:05,750 --> 00:05:08,480
there are a few problems with that if

110
00:05:08,480 --> 00:05:10,760
the application does very data-intensive

111
00:05:10,760 --> 00:05:14,360
work like pitch shifting stuff or this

112
00:05:14,360 --> 00:05:17,990
is much much much easier to press in for

113
00:05:17,990 --> 00:05:21,470
example scene and a solution for that be

114
00:05:21,470 --> 00:05:25,490
to create an extension for the for the

115
00:05:25,490 --> 00:05:28,570
high level language which embeds the

116
00:05:28,570 --> 00:05:31,250
witch extents lens by this functionality

117
00:05:31,250 --> 00:05:35,450
which is done in for example Z and you

118
00:05:35,450 --> 00:05:37,100
could write the rest location still in a

119
00:05:37,100 --> 00:05:39,230
highly language and would not have any

120
00:05:39,230 --> 00:05:41,690
performance problems because the the

121
00:05:41,690 --> 00:05:44,260
important data parts are written in see

122
00:05:44,260 --> 00:05:47,210
also application step time may be an

123
00:05:47,210 --> 00:05:49,070
issue depending on the machine script

124
00:05:49,070 --> 00:05:51,380
interpeter may take like a second to

125
00:05:51,380 --> 00:05:53,390
load up and this is not always

126
00:05:53,390 --> 00:05:55,880
acceptable as a delay for a user phase

127
00:05:55,880 --> 00:05:58,640
to show up so one approach to this would

128
00:05:58,640 --> 00:06:01,640
be to write the user interface in a for

129
00:06:01,640 --> 00:06:04,610
example C C++ and then embed it's

130
00:06:04,610 --> 00:06:07,130
creating interpreter which executes sort

131
00:06:07,130 --> 00:06:08,720
of the Cape application the high level

132
00:06:08,720 --> 00:06:09,860
code which is written in a high-level

133
00:06:09,860 --> 00:06:18,560
language another another point where

134
00:06:18,560 --> 00:06:22,700
there's a difference betwee was useful

135
00:06:22,700 --> 00:06:26,390
for proprietary and for free Square and

136
00:06:26,390 --> 00:06:29,120
how do we deal with user contributed

137
00:06:29,120 --> 00:06:33,740
code with proprietary software when us

138
00:06:33,740 --> 00:06:36,980
at this API and the users use it to add

139
00:06:36,980 --> 00:06:39,530
their scripts but what they do that is

140
00:06:39,530 --> 00:06:43,400
basically their own problem it is not

141
00:06:43,400 --> 00:06:46,800
usual for user scripts to be

142
00:06:46,800 --> 00:06:51,599
to go back into the application for in a

143
00:06:51,599 --> 00:06:54,449
free software context a model where user

144
00:06:54,449 --> 00:06:58,169
code is contributed that's true it's

145
00:06:58,169 --> 00:07:00,330
usually much more is really much better

146
00:07:00,330 --> 00:07:02,400
example the Linux kernel is really

147
00:07:02,400 --> 00:07:05,159
aggressive about this and tries to get

148
00:07:05,159 --> 00:07:08,250
things into the repository this has a

149
00:07:08,250 --> 00:07:11,610
few advantages users will see the code

150
00:07:11,610 --> 00:07:14,009
if it's in a repository but even more

151
00:07:14,009 --> 00:07:15,870
important the developers will see this

152
00:07:15,870 --> 00:07:17,909
code when the developer changes

153
00:07:17,909 --> 00:07:20,610
something and for example that the

154
00:07:20,610 --> 00:07:22,650
signature of a function can just grab

155
00:07:22,650 --> 00:07:25,469
the repository for lines which this and

156
00:07:25,469 --> 00:07:29,430
can fix it within the same commit script

157
00:07:29,430 --> 00:07:32,009
is often used as a way to move the

158
00:07:32,009 --> 00:07:34,229
responsibility for the contributor code

159
00:07:34,229 --> 00:07:37,409
from the users from the application

160
00:07:37,409 --> 00:07:39,060
wonder to ease the users but this

161
00:07:39,060 --> 00:07:40,469
doesn't make sense in a free software

162
00:07:40,469 --> 00:07:44,939
context so by taking responsibility for

163
00:07:44,939 --> 00:07:48,360
the code the the contributors are not

164
00:07:48,360 --> 00:07:50,789
left alone with old incredible versions

165
00:07:50,789 --> 00:07:54,029
at the users have the not be broken code

166
00:07:54,029 --> 00:07:57,270
even if the original contributor is not

167
00:07:57,270 --> 00:08:01,770
around anymore project and finally there

168
00:08:01,770 --> 00:08:09,750
is a apart which is for which consents

169
00:08:09,750 --> 00:08:13,349
the programming because up to now this

170
00:08:13,349 --> 00:08:15,360
looks like much more additional

171
00:08:15,360 --> 00:08:17,310
responsibility for the developers where

172
00:08:17,310 --> 00:08:19,080
they don't get anything back they do in

173
00:08:19,080 --> 00:08:21,300
fact get at something back and this is

174
00:08:21,300 --> 00:08:23,610
really a thing because they need to

175
00:08:23,610 --> 00:08:25,770
worry less about what they are breaking

176
00:08:25,770 --> 00:08:30,569
outside the repository so in the if you

177
00:08:30,569 --> 00:08:33,630
have a plug-in model where others have

178
00:08:33,630 --> 00:08:35,549
their own code living on their own

179
00:08:35,549 --> 00:08:39,299
machines you usually define the API to

180
00:08:39,299 --> 00:08:41,490
have still some flexibility because you

181
00:08:41,490 --> 00:08:42,448
will break everything

182
00:08:42,448 --> 00:08:44,550
if the add-ons would rely on the

183
00:08:44,550 --> 00:08:46,050
internals of the program and then it all

184
00:08:46,050 --> 00:08:50,070
changed so if the code lives in response

185
00:08:50,070 --> 00:08:53,070
to read this not necessary you can have

186
00:08:53,070 --> 00:08:54,990
the code use the internals of the

187
00:08:54,990 --> 00:08:57,300
application and can just change the code

188
00:08:57,300 --> 00:08:58,480
along with the internal

189
00:08:58,480 --> 00:09:01,480
if the change if the necessity there to

190
00:09:01,480 --> 00:09:08,079
change anything so in order to create

191
00:09:08,079 --> 00:09:10,690
good scripting from the nation it is

192
00:09:10,690 --> 00:09:17,320
necessary to see what is what's a good

193
00:09:17,320 --> 00:09:19,990
idea to have for scripting in a free

194
00:09:19,990 --> 00:09:21,279
software context as opposed to

195
00:09:21,279 --> 00:09:23,589
proprietary software cause the models we

196
00:09:23,589 --> 00:09:26,410
know for there may not be very useful in

197
00:09:26,410 --> 00:09:27,839
a free software contest

198
00:09:27,839 --> 00:09:31,290
the most obvious thing probably is

199
00:09:31,290 --> 00:09:33,339
functionality of the application should

200
00:09:33,339 --> 00:09:38,820
be aware w's and if you ever used in for

201
00:09:38,820 --> 00:09:42,220
for example script 2 and have tried

202
00:09:42,220 --> 00:09:43,839
running from command line there is an

203
00:09:43,839 --> 00:09:46,269
option not show the GUI but it is loaded

204
00:09:46,269 --> 00:09:49,600
anyway so when you run a script

205
00:09:49,600 --> 00:09:51,130
from the kumara and it takes a very long

206
00:09:51,130 --> 00:09:54,220
time for him to start up was not usually

207
00:09:54,220 --> 00:09:57,190
acceptable for command-line tools so the

208
00:09:57,190 --> 00:09:59,769
most the easiest approach to this would

209
00:09:59,769 --> 00:10:02,380
be to try to strictly separate between

210
00:10:02,380 --> 00:10:05,199
the GUI code which is not loaded at all

211
00:10:05,199 --> 00:10:07,120
if there are any executed and

212
00:10:07,120 --> 00:10:09,100
punctuality which is well of the scripts

213
00:10:09,100 --> 00:10:11,639
there's for example how PC handles this

214
00:10:11,639 --> 00:10:14,769
but if you do this very seriously what

215
00:10:14,769 --> 00:10:16,930
you are left with is a slim occasion

216
00:10:16,930 --> 00:10:19,209
which basically embeds a scripting

217
00:10:19,209 --> 00:10:21,100
interpreter and exports a lot of

218
00:10:21,100 --> 00:10:23,250
optional team and then runs the script

219
00:10:23,250 --> 00:10:26,410
but any of this you could also have just

220
00:10:26,410 --> 00:10:29,920
made the part of the the functionality

221
00:10:29,920 --> 00:10:31,930
of the occasional library and invoke

222
00:10:31,930 --> 00:10:33,880
scripting operator which then unser

223
00:10:33,880 --> 00:10:37,060
script using the library so you could

224
00:10:37,060 --> 00:10:40,510
take this this idea to have the

225
00:10:40,510 --> 00:10:42,519
functionality of Gale available as one

226
00:10:42,519 --> 00:10:44,410
of our libraries which can then be used

227
00:10:44,410 --> 00:10:46,720
by other programs which are having to

228
00:10:46,720 --> 00:10:51,010
spawn another approach process another

229
00:10:51,010 --> 00:10:54,339
thing which would be really good are you

230
00:10:54,339 --> 00:10:58,000
to have is high level code being able to

231
00:10:58,000 --> 00:11:00,819
operate on the same data a same process

232
00:11:00,819 --> 00:11:04,720
as load of the code this has a number of

233
00:11:04,720 --> 00:11:07,120
advantages for example if you wanted to

234
00:11:07,120 --> 00:11:11,069
to able to switch which language use

235
00:11:11,069 --> 00:11:13,600
according to which is appropriate for a

236
00:11:13,600 --> 00:11:16,360
problem then there should not be the

237
00:11:16,360 --> 00:11:18,699
need to serialize the data feed to an

238
00:11:18,699 --> 00:11:21,959
external program and deserialize it back

239
00:11:21,959 --> 00:11:26,860
and also it would be it would make the

240
00:11:26,860 --> 00:11:29,620
difference between an external script at

241
00:11:29,620 --> 00:11:31,750
a high level functionality of the

242
00:11:31,750 --> 00:11:36,100
application much much smaller because it

243
00:11:36,100 --> 00:11:37,779
would basically do the same thing it

244
00:11:37,779 --> 00:11:40,260
would execute some high level code and

245
00:11:40,260 --> 00:11:43,569
in one case in the application and in

246
00:11:43,569 --> 00:11:45,279
other case it's having invoked another

247
00:11:45,279 --> 00:11:47,560
way but it's basically the C code and

248
00:11:47,560 --> 00:11:49,149
although it would make an interactive

249
00:11:49,149 --> 00:11:54,160
code possible so in order for this to

250
00:11:54,160 --> 00:11:59,620
work what we to have is being a point

251
00:11:59,620 --> 00:12:02,439
where the load of the boat and the high

252
00:12:02,439 --> 00:12:04,540
level code in both access the same data

253
00:12:04,540 --> 00:12:08,550
without having to worry for each other's

254
00:12:08,550 --> 00:12:11,350
implementation details or private fields

255
00:12:11,350 --> 00:12:15,010
or whatever so it is necessary to

256
00:12:15,010 --> 00:12:17,560
enforce a wary straight object model

257
00:12:17,560 --> 00:12:22,120
where there are no fields private to

258
00:12:22,120 --> 00:12:23,889
some part of the application so they can

259
00:12:23,889 --> 00:12:29,040
all in the same way it says the data and

260
00:12:29,160 --> 00:12:33,130
this from this follows that is not

261
00:12:33,130 --> 00:12:34,680
possible to have for example

262
00:12:34,680 --> 00:12:36,699
notifications when adding changes

263
00:12:36,699 --> 00:12:38,980
because it would mean that every code

264
00:12:38,980 --> 00:12:41,230
every part of the code to have to run

265
00:12:41,230 --> 00:12:43,060
these triggers and if any part didn't in

266
00:12:43,060 --> 00:12:44,620
this triggers then something would not

267
00:12:44,620 --> 00:12:47,709
be updated on the screen or undone or on

268
00:12:47,709 --> 00:12:51,519
undo and redo so for this to work we

269
00:12:51,519 --> 00:12:54,130
have we need to have a one orientated

270
00:12:54,130 --> 00:12:56,350
edge enter where we have a number of

271
00:12:56,350 --> 00:12:59,110
revision objects' instead of as one for

272
00:12:59,110 --> 00:13:04,660
file object and if anything changes the

273
00:13:04,660 --> 00:13:06,850
occasion just has a pointer on one

274
00:13:06,850 --> 00:13:09,370
revision object I can compare this

275
00:13:09,370 --> 00:13:11,649
revision objects and see what needs you

276
00:13:11,649 --> 00:13:15,809
updated or what needs to be under done

277
00:13:15,809 --> 00:13:18,939
in order for this to be implemented in

278
00:13:18,939 --> 00:13:20,770
an efficient way it would be necessary

279
00:13:20,770 --> 00:13:25,180
to encapsulate the storage code into

280
00:13:25,180 --> 00:13:28,030
a part of the application so for example

281
00:13:28,030 --> 00:13:29,800
the high level co does not have to query

282
00:13:29,800 --> 00:13:32,820
every object and iterate over it and see

283
00:13:32,820 --> 00:13:35,710
anything if it has the right property

284
00:13:35,710 --> 00:13:38,140
it's looking for but it can run high

285
00:13:38,140 --> 00:13:41,650
level query like please give me a handle

286
00:13:41,650 --> 00:13:44,950
for every object which has color blue

287
00:13:44,950 --> 00:13:48,340
and move all these objects with fit this

288
00:13:48,340 --> 00:13:53,260
handle to an area or read all level

289
00:13:53,260 --> 00:13:58,270
floating attributes so this is what I

290
00:13:58,270 --> 00:14:01,570
did that it's on storage which is this

291
00:14:01,570 --> 00:14:04,870
very stretch part of the application it

292
00:14:04,870 --> 00:14:07,570
defines the revision pipe which

293
00:14:07,570 --> 00:14:10,060
represents one wash to the file it

294
00:14:10,060 --> 00:14:12,970
represents it it implements object type

295
00:14:12,970 --> 00:14:15,160
which represents the identity of an

296
00:14:15,160 --> 00:14:18,970
object which is basically what you would

297
00:14:18,970 --> 00:14:25,240
have left if you is actually five

298
00:14:25,240 --> 00:14:26,110
minutes left

299
00:14:26,110 --> 00:14:31,990
if this which is what would be they

300
00:14:31,990 --> 00:14:35,980
selected if you changed the revision by

301
00:14:35,980 --> 00:14:40,930
undoing or redoing and what would still

302
00:14:40,930 --> 00:14:42,610
be selected and it defines a selection

303
00:14:42,610 --> 00:14:45,640
type which is the same thing for a set

304
00:14:45,640 --> 00:14:49,960
of objects in addition to this a defined

305
00:14:49,960 --> 00:14:53,170
set of data types which obtain the data

306
00:14:53,170 --> 00:14:56,440
for an object and this look for example

307
00:14:56,440 --> 00:14:59,230
like this this is a structure for a net

308
00:14:59,230 --> 00:15:01,870
and you might notice that some recon

309
00:15:01,870 --> 00:15:03,790
things are not in this data structure

310
00:15:03,790 --> 00:15:06,850
like for example the pending box of the

311
00:15:06,850 --> 00:15:10,270
object in Vichy on the screen or if the

312
00:15:10,270 --> 00:15:12,700
object is ected or what that's this neck

313
00:15:12,700 --> 00:15:19,210
as a nectar tube or what net what

314
00:15:19,210 --> 00:15:21,070
attribute objects are attached to its

315
00:15:21,070 --> 00:15:26,650
net and this is because the the bounding

316
00:15:26,650 --> 00:15:27,910
box is something which can be

317
00:15:27,910 --> 00:15:30,190
recalculated there would not be what

318
00:15:30,190 --> 00:15:32,290
situation where the boundbox has changed

319
00:15:32,290 --> 00:15:34,090
but the object parameters are not

320
00:15:34,090 --> 00:15:35,100
changed

321
00:15:35,100 --> 00:15:38,940
and the selection is something which is

322
00:15:38,940 --> 00:15:41,430
only useful in the interactive context

323
00:15:41,430 --> 00:15:43,620
and it would make sense to have an

324
00:15:43,620 --> 00:15:45,750
additional pointer to for example a

325
00:15:45,750 --> 00:15:47,910
selection object so if the Crypt wants

326
00:15:47,910 --> 00:15:49,680
to change the selection in addition to

327
00:15:49,680 --> 00:15:51,540
the contents of the file it can update

328
00:15:51,540 --> 00:15:53,790
the election object and it would be

329
00:15:53,790 --> 00:15:55,530
possible to change the selection or

330
00:15:55,530 --> 00:15:58,200
change it on under we do by keeping

331
00:15:58,200 --> 00:16:00,030
track of a selection object or ignoring

332
00:16:00,030 --> 00:16:02,150
it

333
00:16:02,970 --> 00:16:07,680
thank you texts are which the objects on

334
00:16:07,680 --> 00:16:10,590
the open get a Jeff so it makes sense to

335
00:16:10,590 --> 00:16:14,430
have them as individual objects and keep

336
00:16:14,430 --> 00:16:17,070
some break of the structural data so

337
00:16:17,070 --> 00:16:19,410
there are dedicated lips on stretch

338
00:16:19,410 --> 00:16:23,160
functions for looking up all attributes

339
00:16:23,160 --> 00:16:29,370
attached to one object for example also

340
00:16:29,370 --> 00:16:32,160
a question which is important is what

341
00:16:32,160 --> 00:16:34,320
data should be aside or revision for

342
00:16:34,320 --> 00:16:37,320
example symbols in Connecticut Jeff are

343
00:16:37,320 --> 00:16:41,490
usually added from a library so the user

344
00:16:41,490 --> 00:16:43,620
does not expect them to be undone redone

345
00:16:43,620 --> 00:16:47,400
when they undo and redo and X Maps there

346
00:16:47,400 --> 00:16:49,350
is no way to change a pics map from side

347
00:16:49,350 --> 00:16:51,960
at risk in so this is a strong indicator

348
00:16:51,960 --> 00:16:53,460
that they would not be part of the

349
00:16:53,460 --> 00:16:56,630
eruption paths on the other hand are

350
00:16:56,630 --> 00:17:00,030
objects which represent all the journal

351
00:17:00,030 --> 00:17:01,890
geometry which cannot be represented by

352
00:17:01,890 --> 00:17:05,490
a simple line or circle or arc objects

353
00:17:05,490 --> 00:17:08,040
for example the the arrow under

354
00:17:08,040 --> 00:17:09,810
transistor and they are modified by

355
00:17:09,810 --> 00:17:12,420
moving handle inside G skin so this is

356
00:17:12,420 --> 00:17:14,459
not a trivia question it's what makes

357
00:17:14,459 --> 00:17:21,209
sense since context this is how tones

358
00:17:21,209 --> 00:17:23,849
currently implemented in get on various

359
00:17:23,849 --> 00:17:25,380
lips on starch which I just talked about

360
00:17:25,380 --> 00:17:27,510
here is an example program which I will

361
00:17:27,510 --> 00:17:29,970
skip for time reasons there is so

362
00:17:29,970 --> 00:17:32,790
Authority which are Python bindings for

363
00:17:32,790 --> 00:17:35,040
lips on storage I decided for Python

364
00:17:35,040 --> 00:17:36,810
because it's a language which is

365
00:17:36,810 --> 00:17:38,970
relatively easy to learn opposed to a

366
00:17:38,970 --> 00:17:40,470
scheme which is currently used in the

367
00:17:40,470 --> 00:17:41,840
Jeff

368
00:17:41,840 --> 00:17:45,919
here an example for that Sandow ghetto

369
00:17:45,919 --> 00:17:48,950
which is basically the parts of the

370
00:17:48,950 --> 00:17:50,990
ghetto which interesting to use another

371
00:17:50,990 --> 00:17:54,590
application ported to use the new

372
00:17:54,590 --> 00:17:59,900
functions there's a new file form

373
00:17:59,900 --> 00:18:01,850
there's a command-line tools on which

374
00:18:01,850 --> 00:18:03,799
offers all the functionality you would

375
00:18:03,799 --> 00:18:05,690
expect not do well on the command line

376
00:18:05,690 --> 00:18:08,659
for example convert a file from one

377
00:18:08,659 --> 00:18:11,720
format to another or attracting symbols

378
00:18:11,720 --> 00:18:13,130
from a static file

379
00:18:13,130 --> 00:18:16,010
Genet list which has been ported and

380
00:18:16,010 --> 00:18:19,610
factored so it's now Python package and

381
00:18:19,610 --> 00:18:22,250
can be used from any application and

382
00:18:22,250 --> 00:18:25,850
there is support for Kyle which is

383
00:18:25,850 --> 00:18:27,860
important because it allows users to

384
00:18:27,860 --> 00:18:30,789
near the old set up they have with

385
00:18:30,789 --> 00:18:33,590
executed scheme configuration files and

386
00:18:33,590 --> 00:18:36,230
made custom scheme Co executed in the

387
00:18:36,230 --> 00:18:41,029
netlist and it will still work so if you

388
00:18:41,029 --> 00:18:42,860
use data Jeff you can use on right know

389
00:18:42,860 --> 00:18:45,279
for example for writing scripts which

390
00:18:45,279 --> 00:18:48,020
manipulates Kemah TX writing a nest and

391
00:18:48,020 --> 00:18:51,159
best net is there and the most important

392
00:18:51,159 --> 00:18:55,070
restriction on this is G skinned are not

393
00:18:55,070 --> 00:18:57,500
used the new larry's yet so I can't

394
00:18:57,500 --> 00:18:59,899
manipulate the objects load into the

395
00:18:59,899 --> 00:19:02,840
editor but you could in theory use a

396
00:19:02,840 --> 00:19:04,640
Python interpreter edit a schematic

397
00:19:04,640 --> 00:19:05,960
files which I wouldn't see what you're

398
00:19:05,960 --> 00:19:07,450
doing

399
00:19:07,450 --> 00:19:10,549
the most obvious next step would be to

400
00:19:10,549 --> 00:19:15,140
use a new libraries entries can - this

401
00:19:15,140 --> 00:19:18,380
is a trivial because lib Godot is the

402
00:19:18,380 --> 00:19:20,690
shared part of G skin and some other

403
00:19:20,690 --> 00:19:23,870
applications and my approach so far has

404
00:19:23,870 --> 00:19:25,850
been to port the other applications to

405
00:19:25,850 --> 00:19:28,970
use the new Larry's first I've done this

406
00:19:28,970 --> 00:19:30,830
for Jeanette list which is probably the

407
00:19:30,830 --> 00:19:33,080
most complicated part and are to doing

408
00:19:33,080 --> 00:19:37,010
so for J trip and lip lip Gator Cairo

409
00:19:37,010 --> 00:19:39,169
but there are some problems like for

410
00:19:39,169 --> 00:19:44,059
example lip G a trip users GDK is Brett

411
00:19:44,059 --> 00:19:46,340
butchered but it's not supported anymore

412
00:19:46,340 --> 00:19:49,490
so it may make sense to recreate the lip

413
00:19:49,490 --> 00:19:52,760
petticoat and have for some time to

414
00:19:52,760 --> 00:19:55,159
oceans around one for the old tools to

415
00:19:55,159 --> 00:19:55,520
you

416
00:19:55,520 --> 00:19:58,090
one so it can merge back into G system

417
00:19:58,090 --> 00:20:01,420
sodium can be updated to the libraries

418
00:20:01,420 --> 00:20:06,140
what you see b @ b would really be also

419
00:20:06,140 --> 00:20:10,390
a good idea i post data structure for

420
00:20:10,390 --> 00:20:13,880
for PCP on the mailing list but didn't

421
00:20:13,880 --> 00:20:16,100
have time to pull these parts of PCP or

422
00:20:16,100 --> 00:20:18,850
into a library layer yeah and for our

423
00:20:18,850 --> 00:20:21,170
products it may be interesting to use

424
00:20:21,170 --> 00:20:23,960
this approach - or maybe even the same

425
00:20:23,960 --> 00:20:27,830
Larry - and this make as possible have a

426
00:20:27,830 --> 00:20:31,370
common user interface which is used for

427
00:20:31,370 --> 00:20:35,690
several projects and applications thanks

428
00:20:35,690 --> 00:20:53,120
for listening yes if I could with the

429
00:20:53,120 --> 00:20:55,550
same for kaika well in theory now in

430
00:20:55,550 --> 00:20:56,990
practice I don't have neatly not have

431
00:20:56,990 --> 00:20:59,150
the time for that but I could support

432
00:20:59,150 --> 00:21:03,220
you if you wanted to do that hi Kat

433
00:21:05,770 --> 00:21:13,279
[Applause]

