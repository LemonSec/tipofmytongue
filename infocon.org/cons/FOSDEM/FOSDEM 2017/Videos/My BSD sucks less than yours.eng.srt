1
00:00:13,019 --> 00:00:37,079
40 seconds boarding starts exactly so

2
00:00:37,079 --> 00:00:42,579
this is something experimental yeah that

3
00:00:42,579 --> 00:00:46,120
sort of a talk not for you don't yes not

4
00:00:46,120 --> 00:00:50,170
butyl it's a singing yeah anyway welcome

5
00:00:50,170 --> 00:00:53,079
everyone thank you for attending this

6
00:00:53,079 --> 00:00:59,920
thing so my name is Antoine shokudo I've

7
00:00:59,920 --> 00:01:08,950
been obviously developer for and I'm

8
00:01:08,950 --> 00:01:11,290
Batista who saw I'm a FreeBSD developer

9
00:01:11,290 --> 00:01:14,770
member of the core team and I'm there

10
00:01:14,770 --> 00:01:17,380
I'm the product since almost eight years

11
00:01:17,380 --> 00:01:24,150
now and we're here to speak about Thanks

12
00:01:24,150 --> 00:01:26,920
so just a quick disclaimer before we

13
00:01:26,920 --> 00:01:28,750
start we're going to talk about a lot of

14
00:01:28,750 --> 00:01:31,570
different topics but of course first

15
00:01:31,570 --> 00:01:33,100
we're not expert at everything and

16
00:01:33,100 --> 00:01:34,960
second each topic that we're going to

17
00:01:34,960 --> 00:01:36,880
talk about could have their own one hour

18
00:01:36,880 --> 00:01:38,890
talk so there are a lot of stuff we're

19
00:01:38,890 --> 00:01:40,960
not going to go deep into so sorry about

20
00:01:40,960 --> 00:01:46,180
that and well what first let's start

21
00:01:46,180 --> 00:01:48,310
with how we came up with the idea this

22
00:01:48,310 --> 00:01:52,270
job was pretty funny at tree it was like

23
00:01:52,270 --> 00:01:54,040
I don't know it was summertime it was

24
00:01:54,040 --> 00:01:56,799
yeah we're having herbal teas bombs

25
00:01:56,799 --> 00:01:59,770
cakes yeah exactly we're having

26
00:01:59,770 --> 00:02:01,570
interactions talking about something

27
00:02:01,570 --> 00:02:06,630
like the ponies unicorn yeah

28
00:02:07,070 --> 00:02:09,660
loves meeting me the usual meeting can

29
00:02:09,660 --> 00:02:12,170
have yeah exactly whether a lot of

30
00:02:12,170 --> 00:02:14,610
political discussion with with Baptist

31
00:02:14,610 --> 00:02:18,180
so that was it no is it so quiet summer

32
00:02:18,180 --> 00:02:22,340
afternoon and whoa no you can throw that

33
00:02:22,340 --> 00:02:25,770
it was it was in a pub somewhere and I

34
00:02:25,770 --> 00:02:27,330
remember where we're having our 10th

35
00:02:27,330 --> 00:02:32,210
bite of what was it a crappy beer that

36
00:02:47,570 --> 00:02:50,520
so we're having our 10 pints of Heineken

37
00:02:50,520 --> 00:02:52,650
and I was like but geez that this beer

38
00:02:52,650 --> 00:02:54,150
that doesn't have any flavor anymore

39
00:02:54,150 --> 00:02:56,820
it's like can feel the taste yeah and

40
00:02:56,820 --> 00:02:57,690
that's what hit me

41
00:02:57,690 --> 00:03:00,690
my god you guys you said you don't have

42
00:03:00,690 --> 00:03:11,280
flavor packages so I'm talking about

43
00:03:11,280 --> 00:03:15,630
flavor flavor gain packages on OpenBSD

44
00:03:15,630 --> 00:03:18,650
is actually very interesting concept I

45
00:03:18,650 --> 00:03:21,930
not aware of any other UNIX package

46
00:03:21,930 --> 00:03:24,060
manager that actually implemented that

47
00:03:24,060 --> 00:03:26,970
doesn't mean there are no enemies

48
00:03:26,970 --> 00:03:30,269
what flavored package does it that it

49
00:03:30,269 --> 00:03:32,550
allows you to provide packages compiled

50
00:03:32,550 --> 00:03:34,620
with a different set of options so

51
00:03:34,620 --> 00:03:36,570
that's very convenient from the Japan

52
00:03:36,570 --> 00:03:39,390
easy point of view since according to

53
00:03:39,390 --> 00:03:40,769
the options that you want to compile the

54
00:03:40,769 --> 00:03:43,440
package with the final binary will

55
00:03:43,440 --> 00:03:45,900
change since we will end up linking to

56
00:03:45,900 --> 00:03:47,940
different libraries etc so to give you

57
00:03:47,940 --> 00:03:52,019
an example let's say you want to compile

58
00:03:52,019 --> 00:03:54,299
send mail and you want to give it

59
00:03:54,299 --> 00:03:57,090
support for SASL or LDAP anything like

60
00:03:57,090 --> 00:03:58,980
that so of course if you compile you can

61
00:03:58,980 --> 00:04:00,630
set up your package will link again sell

62
00:04:00,630 --> 00:04:02,010
that maybe it's something you want maybe

63
00:04:02,010 --> 00:04:03,720
or something you don't want and the

64
00:04:03,720 --> 00:04:06,390
thing is that on open BSD we really want

65
00:04:06,390 --> 00:04:07,890
the user to use packages and the

66
00:04:07,890 --> 00:04:10,769
compiled things so flavor lets you

67
00:04:10,769 --> 00:04:13,140
basically create a package with a

68
00:04:13,140 --> 00:04:15,480
predefined set of options so we actually

69
00:04:15,480 --> 00:04:16,250
have several

70
00:04:16,250 --> 00:04:17,720
in packages that you can choose from

71
00:04:17,720 --> 00:04:18,980
when you install it that they all

72
00:04:18,980 --> 00:04:20,839
conflict with each other of course

73
00:04:20,839 --> 00:04:24,230
and that's actually pretty convenient

74
00:04:24,230 --> 00:04:26,450
from from a dependency point of view

75
00:04:26,450 --> 00:04:28,990
it's different from what sub-packages

76
00:04:28,990 --> 00:04:32,780
sub package is when you build one big

77
00:04:32,780 --> 00:04:35,060
package just to split so that's

78
00:04:35,060 --> 00:04:37,400
typically used for things like like PHP

79
00:04:37,400 --> 00:04:41,990
for example on OpenBSD we build PHP with

80
00:04:41,990 --> 00:04:44,540
support for all modules and at the end

81
00:04:44,540 --> 00:04:45,830
of the packaging we're sure you speed

82
00:04:45,830 --> 00:04:47,600
the package so you have can see I'm a

83
00:04:47,600 --> 00:04:51,760
PHP MySQL PHP blah blah blah

84
00:04:52,240 --> 00:04:55,460
yeah on FreeBSD it's through that we

85
00:04:55,460 --> 00:04:57,530
don't have the flavors actually we have

86
00:04:57,530 --> 00:05:02,240
kind of I would say shitty packaged

87
00:05:02,240 --> 00:05:04,040
system where you just hack things so

88
00:05:04,040 --> 00:05:07,340
that you get actually a sub package so

89
00:05:07,340 --> 00:05:09,680
for the case of PHP it's basically the

90
00:05:09,680 --> 00:05:11,390
same as OpenBSD in the end you get to

91
00:05:11,390 --> 00:05:15,800
PHP PHP - I'm up whatever but it's true

92
00:05:15,800 --> 00:05:17,840
that some situation like for early build

93
00:05:17,840 --> 00:05:20,030
up where you probably want to unload all

94
00:05:20,030 --> 00:05:21,890
of disables hazards depending on what

95
00:05:21,890 --> 00:05:24,110
you need right now we have two packages

96
00:05:24,110 --> 00:05:27,830
say both conflict together birds imagine

97
00:05:27,830 --> 00:05:30,290
someone is depending on LDAP and doesn't

98
00:05:30,290 --> 00:05:33,110
care if it's South or not what we have

99
00:05:33,110 --> 00:05:34,910
this pine I the default is the default

100
00:05:34,910 --> 00:05:38,360
so if you install I don't know liberal

101
00:05:38,360 --> 00:05:40,760
apps a soul and you some men depend on

102
00:05:40,760 --> 00:05:42,290
the build up then it will remove some

103
00:05:42,290 --> 00:05:44,210
mail which is probably a good idea to

104
00:05:44,210 --> 00:05:48,320
remove something anyway but but we have

105
00:05:48,320 --> 00:05:50,930
work in progress in that direction we

106
00:05:50,930 --> 00:05:54,070
are working a lot on that the problem is

107
00:05:54,070 --> 00:05:56,360
we have a lot of old tool that deals

108
00:05:56,360 --> 00:05:59,419
with the Box 3/4 master port upgrade on

109
00:05:59,419 --> 00:06:01,850
second thought that depends on having a

110
00:06:01,850 --> 00:06:04,040
unique origin per package and if you go

111
00:06:04,040 --> 00:06:06,200
to flavors if you go to set packages

112
00:06:06,200 --> 00:06:10,790
then you break that parity so that's why

113
00:06:10,790 --> 00:06:13,460
it took so long to come to come now but

114
00:06:13,460 --> 00:06:15,560
we have this idea that ok photos tools

115
00:06:15,560 --> 00:06:18,710
let's make let's make this happen

116
00:06:18,710 --> 00:06:21,290
and see if someone care about this do

117
00:06:21,290 --> 00:06:23,720
they will have to fix it and we will be

118
00:06:23,720 --> 00:06:27,060
happy to keep those tool if it's fixed

119
00:06:27,060 --> 00:06:31,870
okay so my fix I need uh I say said

120
00:06:31,870 --> 00:06:33,280
supporting opening and up on for

121
00:06:33,280 --> 00:06:35,500
previously yep so I actually make to be

122
00:06:35,500 --> 00:06:36,550
done Excel right

123
00:06:36,550 --> 00:06:38,350
no actually we have a package for it

124
00:06:38,350 --> 00:06:41,140
okay and but then what happened if I if

125
00:06:41,140 --> 00:06:43,120
I run like packages of date and packages

126
00:06:43,120 --> 00:06:44,290
are great it will remove everything that

127
00:06:44,290 --> 00:06:53,650
depends on you yeah yeah so one of the

128
00:06:53,650 --> 00:06:56,980
thing we do supports and I what you is

129
00:06:56,980 --> 00:06:59,740
we do support upgrading packages on the

130
00:06:59,740 --> 00:07:00,820
given release

131
00:07:00,820 --> 00:07:03,550
I mean binary I got a security issue I

132
00:07:03,550 --> 00:07:05,440
got an inversion and I have the packages

133
00:07:05,440 --> 00:07:10,000
in place we actually do support binary

134
00:07:10,000 --> 00:07:12,270
package of grade on the given release

135
00:07:12,270 --> 00:07:15,280
but we do not provide the frequent buy

136
00:07:15,280 --> 00:07:22,030
packages so yeah so yeah it's true that

137
00:07:22,030 --> 00:07:23,980
you need some kind of a bill box where

138
00:07:23,980 --> 00:07:25,810
you can you can distribute your packages

139
00:07:25,810 --> 00:07:28,450
a day form there's actually working

140
00:07:28,450 --> 00:07:31,090
progress in this area and I'm pretty

141
00:07:31,090 --> 00:07:34,060
confident that within this year we'll be

142
00:07:34,060 --> 00:07:35,950
able to provide binary upgrade for

143
00:07:35,950 --> 00:07:37,600
packages on whole or export it really

144
00:07:37,600 --> 00:07:41,020
nice yeah so keeping your box up to

145
00:07:41,020 --> 00:07:44,280
Deadwood just do you matter of

146
00:07:48,770 --> 00:07:51,060
talking about distributing packages

147
00:07:51,060 --> 00:07:53,130
actually it's important to note that

148
00:07:53,130 --> 00:07:54,870
there a lot of operation on the OpenBSD

149
00:07:54,870 --> 00:08:00,720
when using package at all don't in using

150
00:08:00,720 --> 00:08:02,610
a no privilege user the fetching the

151
00:08:02,610 --> 00:08:04,260
packages extracting very finger

152
00:08:04,260 --> 00:08:07,680
verifying the signature etc it's all

153
00:08:07,680 --> 00:08:09,870
done as a separate user we don't go

154
00:08:09,870 --> 00:08:12,540
online as a route or nor as the bill

155
00:08:12,540 --> 00:08:17,850
user we actually prevent the bill user

156
00:08:17,850 --> 00:08:22,500
to go online and if I remember correctly

157
00:08:22,500 --> 00:08:26,790
um you guys try to do that in leap fetch

158
00:08:26,790 --> 00:08:28,650
clipping privilege something like that

159
00:08:28,650 --> 00:08:30,900
that was very well actually

160
00:08:30,900 --> 00:08:33,270
yeah what we do is since they won almost

161
00:08:33,270 --> 00:08:35,039
well since cap see comes day one

162
00:08:35,039 --> 00:08:37,799
packages capsicum eyes so every single

163
00:08:37,799 --> 00:08:39,809
dangerous area are running in the

164
00:08:39,809 --> 00:08:44,550
sandbox we also added some privilege

165
00:08:44,550 --> 00:08:46,830
jobs recently actually just before you

166
00:08:46,830 --> 00:08:51,570
did in two weeks before well I chose

167
00:08:51,570 --> 00:08:57,420
three days exactly before MBS the deed I

168
00:08:57,420 --> 00:09:01,610
had to revert the fetchick part because

169
00:09:01,610 --> 00:09:04,790
it wasn't able to you way to read the

170
00:09:04,790 --> 00:09:07,560
net daughter the dotnet or see something

171
00:09:07,560 --> 00:09:10,230
that people were using so for the next

172
00:09:10,230 --> 00:09:12,030
video we'll add it again and other

173
00:09:12,030 --> 00:09:13,950
mechanisms that can fit this to this

174
00:09:13,950 --> 00:09:17,550
nature c5 but anyway we are some books

175
00:09:17,550 --> 00:09:19,320
almost everywhere so we're safe even if

176
00:09:19,320 --> 00:09:21,120
we route but of course it's better to

177
00:09:21,120 --> 00:09:22,800
have privilege separation and most

178
00:09:22,800 --> 00:09:25,200
things in packets now if they don't need

179
00:09:25,200 --> 00:09:27,030
routes requirements switch into an

180
00:09:27,030 --> 00:09:34,260
unprivileged user guess we're pretty

181
00:09:34,260 --> 00:09:36,500
much done with the packet side

182
00:09:36,500 --> 00:09:39,430
[Music]

183
00:09:39,430 --> 00:09:42,320
yeah well no I just wanted to add that

184
00:09:42,320 --> 00:09:44,720
there there is a big difference in the

185
00:09:44,720 --> 00:09:46,670
way we see things in open beers doing

186
00:09:46,670 --> 00:09:48,440
trivia do one where we go to packaging

187
00:09:48,440 --> 00:09:51,680
is that since day one our primary goal

188
00:09:51,680 --> 00:09:54,320
was always to provide binary packages so

189
00:09:54,320 --> 00:09:58,250
it is a little bit shameful that we're

190
00:09:58,250 --> 00:10:00,290
not actually providing upgrade for these

191
00:10:00,290 --> 00:10:02,779
packages or on a given release as I say

192
00:10:02,779 --> 00:10:05,000
this this is going to change but it's

193
00:10:05,000 --> 00:10:07,220
really a different different vision that

194
00:10:07,220 --> 00:10:09,140
we have compared to you where you

195
00:10:09,140 --> 00:10:10,670
actually do build a lot of stuff for at

196
00:10:10,670 --> 00:10:12,830
least historically you used to be able

197
00:10:12,830 --> 00:10:19,060
to thank you

198
00:10:23,800 --> 00:10:39,680
yeah we used to be a lot of stuff yeah

199
00:10:39,680 --> 00:10:42,649
but one thing about the poster II that

200
00:10:42,649 --> 00:10:44,600
it works on every single supported

201
00:10:44,600 --> 00:10:46,550
version of previously because we have

202
00:10:46,550 --> 00:10:49,089
kind of long-term support in FreeBSD and

203
00:10:49,089 --> 00:10:52,310
so it hurts you to make large

204
00:10:52,310 --> 00:10:54,589
modifications that may break old version

205
00:10:54,589 --> 00:10:56,089
but yeah that's something you don't

206
00:10:56,089 --> 00:10:57,470
really know I do do support only

207
00:10:57,470 --> 00:11:02,300
focusing for six months that four

208
00:11:02,300 --> 00:11:03,830
packages we only support the current

209
00:11:03,830 --> 00:11:08,540
release which today is six know the OS

210
00:11:08,540 --> 00:11:12,520
itself is supported for two releases and

211
00:11:12,520 --> 00:11:16,790
aside from current snapshots our ports

212
00:11:16,790 --> 00:11:18,170
tree is actually tied to a specific

213
00:11:18,170 --> 00:11:18,830
release

214
00:11:18,830 --> 00:11:21,440
so we don't follow a rolling release

215
00:11:21,440 --> 00:11:25,250
model on the poster and we don't want

216
00:11:25,250 --> 00:11:27,050
our user to be forces great to a new

217
00:11:27,050 --> 00:11:29,000
major release of a software on a given

218
00:11:29,000 --> 00:11:30,740
release so if you other if you have the

219
00:11:30,740 --> 00:11:33,700
major date of some port in your tree

220
00:11:33,700 --> 00:11:36,110
maybe you don't want to have to be

221
00:11:36,110 --> 00:11:38,029
forced and updated until you actually

222
00:11:38,029 --> 00:11:39,570
upgrade your

223
00:11:39,570 --> 00:11:41,800
so it's against a different a different

224
00:11:41,800 --> 00:11:45,490
way of seeing how I'd seen the packaging

225
00:11:45,490 --> 00:11:48,460
you guys also considering the fact that

226
00:11:48,460 --> 00:11:52,780
we do have regular six-month eases our

227
00:11:52,780 --> 00:12:02,470
package really time but that's as I

228
00:12:02,470 --> 00:12:04,540
mentioned there's our ongoing discussion

229
00:12:04,540 --> 00:12:07,300
about supporting previous releases not

230
00:12:07,300 --> 00:12:16,150
just when I say support what I mean is

231
00:12:16,150 --> 00:12:24,689
that we actually provide CBF's package

232
00:12:24,750 --> 00:12:32,470
when providing as well this is actually

233
00:12:32,470 --> 00:12:36,520
going to change there is a historical

234
00:12:36,520 --> 00:12:39,580
suspect that allow you to touch

235
00:12:39,580 --> 00:12:42,730
different release of OpenBSD without the

236
00:12:42,730 --> 00:12:45,550
need to recompile anything which will be

237
00:12:45,550 --> 00:12:46,900
which I guess would make a huge

238
00:12:46,900 --> 00:12:56,170
difference in that yeah I do understand

239
00:12:56,170 --> 00:13:00,070
the need for for LTS release I do but I

240
00:13:00,070 --> 00:13:01,510
just don't want to be the one who

241
00:13:01,510 --> 00:13:02,860
actually administer it what kind of

242
00:13:02,860 --> 00:13:10,210
releases talking about support I see

243
00:13:10,210 --> 00:13:12,810
that you guys have liked some long-term

244
00:13:12,810 --> 00:13:16,080
support extended support normal support

245
00:13:16,080 --> 00:13:19,900
policies how come FreeBSD tank bomb one

246
00:13:19,900 --> 00:13:22,150
what seemed supportive and 10.2 wasn't

247
00:13:22,150 --> 00:13:23,530
come on

248
00:13:23,530 --> 00:13:28,060
that easy no in our model what we have

249
00:13:28,060 --> 00:13:30,610
we have the normal releases so a normal

250
00:13:30,610 --> 00:13:33,220
releases is a really easy technical to

251
00:13:33,220 --> 00:13:34,390
the stable Brian should say okay

252
00:13:34,390 --> 00:13:37,510
agencies forgive the 1000 and then use

253
00:13:37,510 --> 00:13:41,020
board that for a minimum of 12 months 12

254
00:13:41,020 --> 00:13:44,890
months and so to quote to put the policy

255
00:13:44,890 --> 00:13:47,500
on the website and for to present

256
00:13:47,500 --> 00:13:49,420
additional time if needed to ensure that

257
00:13:49,420 --> 00:13:51,790
newer release

258
00:13:51,790 --> 00:13:53,520
that there is a new release at least

259
00:13:53,520 --> 00:13:56,320
three months before the older normal

260
00:13:56,320 --> 00:13:58,210
release expires so that the normal one

261
00:13:58,210 --> 00:14:02,230
easy and then you got the extended at

262
00:14:02,230 --> 00:14:04,420
the extended is basically you select a

263
00:14:04,420 --> 00:14:05,050
release

264
00:14:05,050 --> 00:14:07,620
usually the second release each time and

265
00:14:07,620 --> 00:14:11,580
you keep it for 24 more months and

266
00:14:11,580 --> 00:14:15,370
that's it and after the latest release

267
00:14:15,370 --> 00:14:18,460
of the given branch is extended support

268
00:14:18,460 --> 00:14:20,500
so you have it you have 24 more months

269
00:14:20,500 --> 00:14:30,340
on the latest one so that's easy decided

270
00:14:30,340 --> 00:14:32,620
to take that to a model but everyone

271
00:14:32,620 --> 00:14:34,480
will understand now so basically right

272
00:14:34,480 --> 00:14:37,480
now a given branch like the previous the

273
00:14:37,480 --> 00:14:41,350
11 will be supported for 5 years and we

274
00:14:41,350 --> 00:14:43,870
can make release whenever we want I

275
00:14:43,870 --> 00:14:45,340
would have that branch as soon as it

276
00:14:45,340 --> 00:14:47,620
release it there people will have don't

277
00:14:47,620 --> 00:14:48,940
remember something extra two months

278
00:14:48,940 --> 00:14:50,950
three months they have three months to

279
00:14:50,950 --> 00:14:52,510
upgrade to the new release and given

280
00:14:52,510 --> 00:14:54,850
would provide stable ABI their artist

281
00:14:54,850 --> 00:14:56,950
let's say you knew a revision of the

282
00:14:56,950 --> 00:14:59,260
same release and then people can exactly

283
00:14:59,260 --> 00:15:01,150
know where they are and how long it

284
00:15:01,150 --> 00:15:02,820
support it and you won't have any more

285
00:15:02,820 --> 00:15:06,520
ten one 11:01 supported while alluding

286
00:15:06,520 --> 00:15:08,320
to is not supported anymore and you can

287
00:15:08,320 --> 00:15:14,320
understand what you're doing yeah well I

288
00:15:14,320 --> 00:15:17,200
don't really support model keeps your

289
00:15:17,200 --> 00:15:18,910
future out of the hands of the user

290
00:15:18,910 --> 00:15:21,670
I understand the big what what you

291
00:15:21,670 --> 00:15:25,290
mention about however is it asked for

292
00:15:25,290 --> 00:15:29,350
some opinion I mean our modal is makes a

293
00:15:29,350 --> 00:15:31,300
bit more sense and you keep the code

294
00:15:31,300 --> 00:15:33,130
stable was still pretty fresh we have a

295
00:15:33,130 --> 00:15:34,480
new release every six months whatever is

296
00:15:34,480 --> 00:15:36,490
in current will be in the next release

297
00:15:36,490 --> 00:15:39,400
in a few weeks or and worst case in five

298
00:15:39,400 --> 00:15:44,560
six month yeah well I think you

299
00:15:44,560 --> 00:15:45,960
misunderstood the way we are developing

300
00:15:45,960 --> 00:15:48,780
like the previous development branches

301
00:15:48,780 --> 00:15:51,820
will not only receive bug fixes but also

302
00:15:51,820 --> 00:15:53,590
new features as well as long as it don't

303
00:15:53,590 --> 00:15:56,170
break the ABI and compatibility let's

304
00:15:56,170 --> 00:15:58,450
say we have a new client version and we

305
00:15:58,450 --> 00:15:58,889
need a new

306
00:15:58,889 --> 00:16:00,540
conversion for anything to a new

307
00:16:00,540 --> 00:16:03,209
compiler then we can just merge the

308
00:16:03,209 --> 00:16:05,100
compiler and 11 to will be released with

309
00:16:05,100 --> 00:16:06,929
a new compiler so all the new feature

310
00:16:06,929 --> 00:16:09,059
will add up in any way in the releases

311
00:16:09,059 --> 00:16:11,609
that the users have so that's not that

312
00:16:11,609 --> 00:16:12,269
different

313
00:16:12,269 --> 00:16:14,879
it's that we do guarantee that we don't

314
00:16:14,879 --> 00:16:16,319
break the API so you if you build a

315
00:16:16,319 --> 00:16:18,389
binary on 3ds 11 that's oh

316
00:16:18,389 --> 00:16:23,459
then on 11.3 it will run outer-box well

317
00:16:23,459 --> 00:16:26,399
you did say that you had to wait for the

318
00:16:26,399 --> 00:16:28,079
very least two years before being able

319
00:16:28,079 --> 00:16:32,369
to use more than four in the poultry why

320
00:16:32,369 --> 00:16:36,720
because with the previous model we had

321
00:16:36,720 --> 00:16:39,689
to support release and we don't release

322
00:16:39,689 --> 00:16:41,669
a new version because if you release a

323
00:16:41,669 --> 00:16:44,009
new version let's say we release ten but

324
00:16:44,009 --> 00:16:46,109
for then the support get extended for

325
00:16:46,109 --> 00:16:48,600
two years and then we can't bring new

326
00:16:48,600 --> 00:16:50,999
tools because it was three works on 11

327
00:16:50,999 --> 00:16:54,600
and 10 then I need to get the compiler I

328
00:16:54,600 --> 00:16:57,629
got in my 10.4 working for the poultry

329
00:16:57,629 --> 00:17:00,899
anyway or the feature that I added which

330
00:17:00,899 --> 00:17:04,648
are in previous 11 and not yet in then I

331
00:17:04,648 --> 00:17:07,138
will have to go to two years it was free

332
00:17:07,138 --> 00:17:08,730
to be able to use them which is not the

333
00:17:08,730 --> 00:17:10,559
case anymore because with a new model

334
00:17:10,559 --> 00:17:12,959
what I'll do is just measure to 10 to

335
00:17:12,959 --> 00:17:16,169
release a new version of 10 and then in

336
00:17:16,169 --> 00:17:18,269
that case I don't extend the support but

337
00:17:18,269 --> 00:17:19,980
still the user benefit from the new tool

338
00:17:19,980 --> 00:17:21,388
and the post we can just trade away

339
00:17:21,388 --> 00:17:24,299
users so we fix that with the music with

340
00:17:24,299 --> 00:17:35,690
the new release model it confused yeah

341
00:17:37,880 --> 00:17:44,720
yeah let's look at a binary abase okay

342
00:17:44,720 --> 00:17:48,059
giving me the support binary agreed it's

343
00:17:48,059 --> 00:17:50,310
very easy to grade from another version

344
00:17:50,310 --> 00:17:52,110
you mean aversion let's say I release

345
00:17:52,110 --> 00:17:54,480
previous the 11.1 I just do previously

346
00:17:54,480 --> 00:17:57,780
updates food is the sorry previously

347
00:17:57,780 --> 00:17:59,850
upgrade and I'm going to the new person

348
00:17:59,850 --> 00:18:04,260
in place and that's very nice but I'm

349
00:18:04,260 --> 00:18:08,490
also able to go from Metin from micro

350
00:18:08,490 --> 00:18:10,260
release 200 the matter of release and do

351
00:18:10,260 --> 00:18:16,050
a nice upgrade so it's very simple it

352
00:18:16,050 --> 00:18:18,740
helps us to do a lot of things and

353
00:18:18,740 --> 00:18:21,870
seriously how serious it should be - for

354
00:18:21,870 --> 00:18:24,780
me - and it OpenBSD boxes where you are

355
00:18:24,780 --> 00:18:30,590
breaking ABI you can't a great place and

356
00:18:33,800 --> 00:18:36,270
actually it's not it's not entirely true

357
00:18:36,270 --> 00:18:38,940
as I mentioned earlier binary of grades

358
00:18:38,940 --> 00:18:41,720
between releases or perfectly supported

359
00:18:41,720 --> 00:18:45,030
obviously what is not supported indeed

360
00:18:45,030 --> 00:18:48,090
are in place in grades of the beta

361
00:18:48,090 --> 00:18:52,020
system at least well I don't see it as

362
00:18:52,020 --> 00:18:54,540
an issue usually supporting in place

363
00:18:54,540 --> 00:18:57,600
great is nice when the actual great

364
00:18:57,600 --> 00:19:00,030
process takes a long time to not don't

365
00:19:00,030 --> 00:19:03,780
whether the machine like offline for

366
00:19:03,780 --> 00:19:07,590
like 30 minutes but when you have a

367
00:19:07,590 --> 00:19:09,840
machine in production you have really

368
00:19:09,840 --> 00:19:15,570
don't see any way right also the great

369
00:19:15,570 --> 00:19:18,000
process of OpenBSD itself is one of the

370
00:19:18,000 --> 00:19:20,460
easiest and fastest that I've worked

371
00:19:20,460 --> 00:19:21,440
with

372
00:19:21,440 --> 00:19:27,390
that's actually an objective with you it

373
00:19:27,390 --> 00:19:29,430
is it is I mean just redo it on the GSD

374
00:19:29,430 --> 00:19:33,120
or the run this kernel and it will do

375
00:19:33,120 --> 00:19:34,680
the rest for you let go three minutes

376
00:19:34,680 --> 00:19:37,170
seriously and with support for Co to

377
00:19:37,170 --> 00:19:39,690
install a note of grade open gives you

378
00:19:39,690 --> 00:19:41,610
you really have absolutely nothing to do

379
00:19:41,610 --> 00:19:44,160
it's completely automatic I mean you can

380
00:19:44,160 --> 00:19:46,290
you kind of great like thousands of

381
00:19:46,290 --> 00:19:48,390
thoughts and by just beginning

382
00:19:48,390 --> 00:19:50,130
Coffee colonel everything will be

383
00:19:50,130 --> 00:19:51,750
automatically upgraded package is

384
00:19:51,750 --> 00:19:55,560
included and when you first boot after

385
00:19:55,560 --> 00:19:56,190
your great

386
00:19:56,190 --> 00:19:59,520
we have ceased merge which is like a

387
00:19:59,520 --> 00:20:03,330
merge master is run automatically very

388
00:20:03,330 --> 00:20:04,950
early into during the boot process so

389
00:20:04,950 --> 00:20:08,310
even your configurations I will well

390
00:20:08,310 --> 00:20:09,660
have a good chance to be automatically

391
00:20:09,660 --> 00:20:17,280
updated if you if you twitch a

392
00:20:17,280 --> 00:20:19,890
configuration file log then obviously it

393
00:20:19,890 --> 00:20:21,630
will require manual intervention they

394
00:20:21,630 --> 00:20:24,240
will not try to force a greater fire

395
00:20:24,240 --> 00:20:26,580
yeah it's a merger thank you it's

396
00:20:26,580 --> 00:20:29,250
complicated anyway yeah but it will send

397
00:20:29,250 --> 00:20:30,660
you a mail telling you that this and

398
00:20:30,660 --> 00:20:35,730
this and this by what if it goes there

399
00:20:35,730 --> 00:20:37,710
is there is no there is no configuration

400
00:20:37,710 --> 00:20:38,880
file that will prevent you from booting

401
00:20:38,880 --> 00:20:47,910
yeah ok so that's not that bad so you're

402
00:20:47,910 --> 00:20:49,190
able to go from a release to release

403
00:20:49,190 --> 00:20:52,470
seems that it's pretty ok but what you

404
00:20:52,470 --> 00:20:55,500
do to update in your I mean you've got

405
00:20:55,500 --> 00:21:02,310
security issues and let's say we got

406
00:21:02,310 --> 00:21:05,730
security issue then you need to get it's

407
00:21:05,730 --> 00:21:10,290
running I think that's I applied to CVS

408
00:21:10,290 --> 00:21:16,620
and I bill yes well yeah I mentioned it

409
00:21:16,620 --> 00:21:20,280
to bit earlier as well it's to adapt

410
00:21:20,280 --> 00:21:22,830
updates within a particular release are

411
00:21:22,830 --> 00:21:24,420
not supported I mean they are supported

412
00:21:24,420 --> 00:21:27,750
using a CVS patch so you have to build

413
00:21:27,750 --> 00:21:32,250
new release yourself or I mentioned

414
00:21:32,250 --> 00:21:34,890
suspect earlier hopefully this will it

415
00:21:34,890 --> 00:21:51,450
would be enabled for the wait for six

416
00:21:51,450 --> 00:22:03,690
point two or six point three what we get

417
00:22:03,690 --> 00:22:05,280
is that we try to create something

418
00:22:05,280 --> 00:22:07,590
really stupid and simple something that

419
00:22:07,590 --> 00:22:09,150
would just fetch

420
00:22:09,150 --> 00:22:11,430
pre-compiled horrible same kind of

421
00:22:11,430 --> 00:22:15,950
terrible that we do the base system sets

422
00:22:15,950 --> 00:22:20,630
so fetching verifying with signify

423
00:22:20,630 --> 00:22:21,780
extracting

424
00:22:21,780 --> 00:22:24,510
and then installing the new batteries

425
00:22:24,510 --> 00:22:27,140
libraries etc while creating a rollback

426
00:22:27,140 --> 00:22:32,280
toggle in case something bad happened so

427
00:22:32,280 --> 00:22:34,830
we're trying to to have a very very very

428
00:22:34,830 --> 00:22:35,940
simple tool

429
00:22:35,940 --> 00:22:39,890
hopefully people will like it then

430
00:22:40,370 --> 00:22:44,430
hopefully well on freebsd we do support

431
00:22:44,430 --> 00:22:46,950
right now already binary upgrade in

432
00:22:46,950 --> 00:22:49,500
place which are very nice I mean you get

433
00:22:49,500 --> 00:22:51,840
security issue to forgive that fact over

434
00:22:51,840 --> 00:22:53,220
there that's installed and then

435
00:22:53,220 --> 00:22:57,750
everything has been replaced modified so

436
00:22:57,750 --> 00:23:01,680
the way the tool works is basically it

437
00:23:01,680 --> 00:23:04,980
works based on binaries so security

438
00:23:04,980 --> 00:23:06,980
officer will just rebuild the system

439
00:23:06,980 --> 00:23:10,380
make by narrative of the binaries that

440
00:23:10,380 --> 00:23:11,790
has changed between the two builds and

441
00:23:11,790 --> 00:23:12,210
then you

442
00:23:12,210 --> 00:23:14,670
and you you install it it works very

443
00:23:14,670 --> 00:23:17,190
nicely it's very convenient for security

444
00:23:17,190 --> 00:23:20,400
fixes it's very simple for the user it's

445
00:23:20,400 --> 00:23:23,250
safe for these if they does a bit more

446
00:23:23,250 --> 00:23:25,230
things like I tell what I said earlier

447
00:23:25,230 --> 00:23:28,350
operating from a release to erase so the

448
00:23:28,350 --> 00:23:30,780
way this is well the same way you do

449
00:23:30,780 --> 00:23:33,210
fetch all your new binaries what

450
00:23:33,210 --> 00:23:35,310
actually patches between the old reason

451
00:23:35,310 --> 00:23:38,490
a new release and then it's installed a

452
00:23:38,490 --> 00:23:40,380
new quad batcher colonel and prepared

453
00:23:40,380 --> 00:23:42,240
the colonel you reboot on a new Colonel

454
00:23:42,240 --> 00:23:44,190
you're on the old userland but the new

455
00:23:44,190 --> 00:23:45,840
Colonel then you install the new user on

456
00:23:45,840 --> 00:23:49,590
that to prevent having new user on that

457
00:23:49,590 --> 00:23:51,720
night have Cisco that doesn't exist yet

458
00:23:51,720 --> 00:23:54,360
in your old colonel and then it met all

459
00:23:54,360 --> 00:23:56,250
the comp regression file and hopefully

460
00:23:56,250 --> 00:23:58,920
everything works this is nice

461
00:23:58,920 --> 00:24:01,230
it will it works tell the world the

462
00:24:01,230 --> 00:24:04,410
problem is it can be very long I mean by

463
00:24:04,410 --> 00:24:08,780
very long is try to fetch something like

464
00:24:08,780 --> 00:24:12,600
hundred thousand of binary patches until

465
00:24:12,600 --> 00:24:14,670
they get it and then try to wait for

466
00:24:14,670 --> 00:24:16,860
your first script to figure out which

467
00:24:16,860 --> 00:24:18,990
one it should patch how it verifies with

468
00:24:18,990 --> 00:24:19,590
professor

469
00:24:19,590 --> 00:24:21,780
checksum signatures bla bla bla so can

470
00:24:21,780 --> 00:24:23,160
take a very long time to be able to a

471
00:24:23,160 --> 00:24:25,860
great format from a release to another

472
00:24:25,860 --> 00:24:29,460
one so we are now trying to experiment

473
00:24:29,460 --> 00:24:33,450
with replacing that package itself so if

474
00:24:33,450 --> 00:24:36,660
we packet today system so it will remain

475
00:24:36,660 --> 00:24:38,580
the basis time but split into multiple

476
00:24:38,580 --> 00:24:41,580
packages and then it depends I don't

477
00:24:41,580 --> 00:24:46,860
know yet to be honest but a lot and and

478
00:24:46,860 --> 00:24:48,180
then when you get security of that you

479
00:24:48,180 --> 00:24:49,710
get a new version of your package and

480
00:24:49,710 --> 00:24:51,300
then if I get upgrade its installed like

481
00:24:51,300 --> 00:24:53,130
every single thing we have in the 4-3 on

482
00:24:53,130 --> 00:24:55,530
the package is already and that's what

483
00:24:55,530 --> 00:24:57,960
that might be way faster than what we

484
00:24:57,960 --> 00:25:00,300
have right now one of the issue to be

485
00:25:00,300 --> 00:25:02,250
honest with there are sometimes some

486
00:25:02,250 --> 00:25:05,280
drawback with in-place upgrades is we

487
00:25:05,280 --> 00:25:07,770
depend on some technologies that we

488
00:25:07,770 --> 00:25:11,250
developed initially ourself and or will

489
00:25:11,250 --> 00:25:13,950
depend in another upstream were which we

490
00:25:13,950 --> 00:25:18,870
work with like the FS and the timestream

491
00:25:18,870 --> 00:25:21,810
decide well for them the upgrades are a

492
00:25:21,810 --> 00:25:23,040
bit like on open

493
00:25:23,040 --> 00:25:24,630
like you gotta release and the bread is

494
00:25:24,630 --> 00:25:26,700
tried go to the new release and so the

495
00:25:26,700 --> 00:25:28,940
kernel and the user and has to be the

496
00:25:28,940 --> 00:25:31,110
same and in sync

497
00:25:31,110 --> 00:25:32,640
why don't previously there's a moment

498
00:25:32,640 --> 00:25:34,650
you are on a new kernel and you still

499
00:25:34,650 --> 00:25:36,960
have the old the old user or tool and if

500
00:25:36,960 --> 00:25:41,790
let's say the sums is some sum function

501
00:25:41,790 --> 00:25:43,530
from the FF has changed then your user

502
00:25:43,530 --> 00:25:45,750
onto won't work with that and we had a

503
00:25:45,750 --> 00:25:47,700
couple of time to arraign blamin the

504
00:25:47,700 --> 00:25:49,770
backward compatibility into ZFS to make

505
00:25:49,770 --> 00:25:53,250
sure that we can support our so it's

506
00:25:53,250 --> 00:25:55,410
extra work some time but I think it's

507
00:25:55,410 --> 00:25:59,730
it's worth surprise do try to be very

508
00:25:59,730 --> 00:26:03,270
very clever here we're way much simpler

509
00:26:03,270 --> 00:26:05,730
than that anyway yeah well I can play

510
00:26:05,730 --> 00:26:08,760
some great yeah okay that's nice but you

511
00:26:08,760 --> 00:26:10,140
still need to reboot I mean if you

512
00:26:10,140 --> 00:26:11,700
hadn't play some great a tree and you

513
00:26:11,700 --> 00:26:13,440
don't need to reboot then okay you have

514
00:26:13,440 --> 00:26:18,750
my yeah well anyway

515
00:26:18,750 --> 00:26:21,360
ah another interesting thing we have in

516
00:26:21,360 --> 00:26:24,480
the freebsd model is what a cool polar

517
00:26:24,480 --> 00:26:27,450
it's principle of least astonishment so

518
00:26:27,450 --> 00:26:29,550
basically it means that don't try to

519
00:26:29,550 --> 00:26:33,570
 up the user system so if something

520
00:26:33,570 --> 00:26:35,280
was working you regretted something new

521
00:26:35,280 --> 00:26:38,370
make sure that you don't break

522
00:26:38,370 --> 00:26:39,780
everything on the system and then your

523
00:26:39,780 --> 00:26:42,450
bread goes out of box yeah and you know

524
00:26:42,450 --> 00:26:44,550
we're not afraid of breaking backward

525
00:26:44,550 --> 00:26:46,500
compatibility when we think it makes

526
00:26:46,500 --> 00:26:50,150
sense and can help us push ideas forward

527
00:26:50,150 --> 00:26:52,110
but that's it I kind of send any

528
00:26:52,110 --> 00:26:55,470
footballer obviously except when he goes

529
00:26:55,470 --> 00:26:58,770
against back basic security like for

530
00:26:58,770 --> 00:27:01,080
example reading you're upgrading me five

531
00:27:01,080 --> 00:27:02,520
somewhere in the source source tree or

532
00:27:02,520 --> 00:27:05,340
SSH or something I see that just to

533
00:27:05,340 --> 00:27:08,340
satisfy 40 clients you guys kept da say

534
00:27:08,340 --> 00:27:13,230
encryption AES CBC ssh-1 support like

535
00:27:13,230 --> 00:27:15,360
month and month after an extreme

536
00:27:15,360 --> 00:27:19,020
actually yeah because it's all the

537
00:27:19,020 --> 00:27:20,370
release we didn't want the guy to be

538
00:27:20,370 --> 00:27:22,350
able to grade and having their key not

539
00:27:22,350 --> 00:27:23,820
working but on the next major release

540
00:27:23,820 --> 00:27:26,250
will remove that so yeah given our model

541
00:27:26,250 --> 00:27:30,090
it's mostly for sure but that's not

542
00:27:30,090 --> 00:27:30,780
exactly

543
00:27:30,780 --> 00:27:33,120
also what polish should does not really

544
00:27:33,120 --> 00:27:34,970
prevents every search

545
00:27:34,970 --> 00:27:37,720
we could have removed that if you wanted

546
00:27:37,720 --> 00:27:40,400
that's the drawback of poor people if

547
00:27:40,400 --> 00:27:42,110
you don't like to do something they

548
00:27:42,110 --> 00:27:44,480
scream at Paul and say hey don't touch

549
00:27:44,480 --> 00:27:47,870
my system while Paul says we should not

550
00:27:47,870 --> 00:27:49,970
 up the system of the user but

551
00:27:49,970 --> 00:27:51,830
sometimes we need to and so we need to

552
00:27:51,830 --> 00:27:54,080
tell them how they care they will have

553
00:27:54,080 --> 00:27:56,120
to upgrade and have warning long enough

554
00:27:56,120 --> 00:27:59,030
in advance and thing like that so there

555
00:27:59,030 --> 00:28:00,860
we have to be very careful that polla

556
00:28:00,860 --> 00:28:04,100
it's a very nice principle it's not an

557
00:28:04,100 --> 00:28:07,180
excuse to not do anything

558
00:28:07,180 --> 00:28:12,890
speaking of great delivery you know how

559
00:28:12,890 --> 00:28:18,320
you guys build and ship packages open

560
00:28:18,320 --> 00:28:21,550
busy we use a tool it's called the DPB

561
00:28:21,550 --> 00:28:25,130
builder it's a demon that works straight

562
00:28:25,130 --> 00:28:27,740
Milty note setup for building the entire

563
00:28:27,740 --> 00:28:35,690
forestry or and build like did the

564
00:28:35,690 --> 00:28:38,720
entire set of packages in less than 24

565
00:28:38,720 --> 00:28:40,880
hours which is which is convenient so we

566
00:28:40,880 --> 00:28:44,840
can have a new set every day as most of

567
00:28:44,840 --> 00:28:46,100
our demon comes with privilege

568
00:28:46,100 --> 00:28:48,080
separation it runs out the different

569
00:28:48,080 --> 00:28:53,230
bill user as I mentioned earlier it uses

570
00:28:53,230 --> 00:28:56,300
should send dogs to build packages the

571
00:28:56,300 --> 00:28:58,250
actual go for that to be like each

572
00:28:58,250 --> 00:29:01,060
package bill will have its own sandbox

573
00:29:01,060 --> 00:29:05,900
so there's working for that and yeah as

574
00:29:05,900 --> 00:29:07,220
I mentioned the only process that goes

575
00:29:07,220 --> 00:29:08,600
honoring is the affection which is

576
00:29:08,600 --> 00:29:11,180
performed well on freebies historically

577
00:29:11,180 --> 00:29:13,520
we were using a tool which which had a

578
00:29:13,520 --> 00:29:15,590
design beside being the total crap had a

579
00:29:15,590 --> 00:29:17,870
design which was pretty close to TPP it

580
00:29:17,870 --> 00:29:22,420
was holes in the box and it works quite

581
00:29:22,420 --> 00:29:24,770
okay back in the time as we tended to a

582
00:29:24,770 --> 00:29:28,680
new tool which actually I wrote

583
00:29:28,680 --> 00:29:34,220
stop showing off yeah it's crap as well

584
00:29:34,220 --> 00:29:36,570
and so basically what it does is instead

585
00:29:36,570 --> 00:29:38,340
of distributing the bill which can bring

586
00:29:38,340 --> 00:29:43,860
a lot of complexity to the always put

587
00:29:43,860 --> 00:29:45,090
this idea to build everything in one

588
00:29:45,090 --> 00:29:47,670
single box distributing one bill per

589
00:29:47,670 --> 00:29:49,800
core so we end up with something like if

590
00:29:49,800 --> 00:29:51,690
you have a 24 core box you have 24

591
00:29:51,690 --> 00:29:53,190
packages that are built at the same time

592
00:29:53,190 --> 00:29:57,720
and doing that by surprise we discover

593
00:29:57,720 --> 00:30:01,650
that we got faster build we ended up

594
00:30:01,650 --> 00:30:03,120
with something like a single day to

595
00:30:03,120 --> 00:30:06,809
build the entire pod three back in the

596
00:30:06,809 --> 00:30:09,300
time when it was only 24,000 packages

597
00:30:09,300 --> 00:30:14,059
now it's way more and now chrome exists

598
00:30:15,080 --> 00:30:18,750
so aside from that what we have is the

599
00:30:18,750 --> 00:30:21,090
packages are signed on a box without

600
00:30:21,090 --> 00:30:23,460
internet access the main difference

601
00:30:23,460 --> 00:30:26,280
which is the way you are doing is

602
00:30:26,280 --> 00:30:28,140
probably because we don't sign per

603
00:30:28,140 --> 00:30:30,030
package we sign the entire repository

604
00:30:30,030 --> 00:30:33,510
which has hashes of what package is - we

605
00:30:33,510 --> 00:30:35,040
have only one's nature to check instead

606
00:30:35,040 --> 00:30:46,920
of per package and every package which

607
00:30:46,920 --> 00:30:52,290
make them also easier to share yes we -

608
00:30:52,290 --> 00:30:54,059
per year we're neighbor now able to

609
00:30:54,059 --> 00:30:56,309
provide updates and binary packages

610
00:30:56,309 --> 00:30:58,730
almost every day well before it was

611
00:30:58,730 --> 00:31:02,040
whenever is that crystal was happy to

612
00:31:02,040 --> 00:31:04,860
build things and the big thing - to

613
00:31:04,860 --> 00:31:08,460
build things properly so what working on

614
00:31:08,460 --> 00:31:11,640
that work that new tool to bid to have a

615
00:31:11,640 --> 00:31:14,040
lot of while - to have faster builds

616
00:31:14,040 --> 00:31:15,170
whatever we use every single

617
00:31:15,170 --> 00:31:17,940
functionality that we have on previously

618
00:31:17,940 --> 00:31:20,190
like we use gems to separate the bills

619
00:31:20,190 --> 00:31:21,690
to make sure that they don't have access

620
00:31:21,690 --> 00:31:23,550
to the network when we need to when they

621
00:31:23,550 --> 00:31:25,590
don't need access to your network we can

622
00:31:25,590 --> 00:31:28,050
use as NFS - popular to have a fast

623
00:31:28,050 --> 00:31:30,330
population of the various channels so

624
00:31:30,330 --> 00:31:32,100
it's building and single date on a

625
00:31:32,100 --> 00:31:35,010
single core we use tmpfs if you want

626
00:31:35,010 --> 00:31:39,690
faster you and of course we will use SMB

627
00:31:39,690 --> 00:31:41,350
because yeah we can

628
00:31:41,350 --> 00:31:52,960
more than 24 course oh speaking of

629
00:31:52,960 --> 00:31:55,120
multiple course are you guys still

630
00:31:55,120 --> 00:31:57,570
having the giant look somewhere

631
00:31:57,570 --> 00:32:06,809
everywhere okay just working for there

632
00:32:06,960 --> 00:32:09,340
obviously for regular desktop usage or

633
00:32:09,340 --> 00:32:11,799
big log SNP implementation model so the

634
00:32:11,799 --> 00:32:16,360
kernel is good enough the reason is that

635
00:32:16,360 --> 00:32:17,830
most time on the workstation you know we

636
00:32:17,830 --> 00:32:23,799
only have a handful amount of course and

637
00:32:23,799 --> 00:32:25,929
one actual schedule reason isn't bad

638
00:32:25,929 --> 00:32:29,289
either it's just it's a bit old it was

639
00:32:29,289 --> 00:32:31,720
written for real SNP machines meaning

640
00:32:31,720 --> 00:32:34,059
that it does not consider the the cache

641
00:32:34,059 --> 00:32:36,880
distance between the course and that's

642
00:32:36,880 --> 00:32:38,740
one of the main reason why you're here

643
00:32:38,740 --> 00:32:46,539
with your several sockets strict we do a

644
00:32:46,539 --> 00:32:52,350
lot of ping pong so we can use 24 cores

645
00:32:52,530 --> 00:32:55,690
it's way way better for us in terms of

646
00:32:55,690 --> 00:32:57,970
performance to actually split this is 24

647
00:32:57,970 --> 00:33:05,700
cores into six different machines yeah

648
00:33:06,720 --> 00:33:09,640
yeah well I wonder how you will handle

649
00:33:09,640 --> 00:33:11,309
this kind of change in the model of

650
00:33:11,309 --> 00:33:15,820
OpenBSD because I mean when previously

651
00:33:15,820 --> 00:33:18,130
took that road and change the model to

652
00:33:18,130 --> 00:33:20,440
go to something more simple it took a

653
00:33:20,440 --> 00:33:23,799
lot of time it also ended up with some

654
00:33:23,799 --> 00:33:28,659
fabulous release like FreeBSD 5.0 and so

655
00:33:28,659 --> 00:33:30,070
I'm not saying that the world we took

656
00:33:30,070 --> 00:33:32,350
well we have to change almost everything

657
00:33:32,350 --> 00:33:35,200
in one degrees is the only one to go but

658
00:33:35,200 --> 00:33:37,450
I don't see how you can do with a very

659
00:33:37,450 --> 00:33:40,690
incremental simple way getting rid of

660
00:33:40,690 --> 00:33:43,299
this giant clock okay well there's a few

661
00:33:43,299 --> 00:33:44,770
things that can

662
00:33:44,770 --> 00:33:53,080
incremental to the schedule itself for

663
00:33:53,080 --> 00:33:55,059
example some song performance issue that

664
00:33:55,059 --> 00:33:56,880
we haven't opened bfv actually come from

665
00:33:56,880 --> 00:34:00,840
in lock in our teeth for any penetration

666
00:34:00,840 --> 00:34:04,929
so that's being actively worked on we do

667
00:34:04,929 --> 00:34:06,880
expect a huge improvement in that regard

668
00:34:06,880 --> 00:34:08,879
for the next release or the one after

669
00:34:08,879 --> 00:34:11,560
and contrary to the myth I mean we scale

670
00:34:11,560 --> 00:34:13,480
very nicely on the big userland

671
00:34:13,480 --> 00:34:16,719
workloads of course is our raw

672
00:34:16,719 --> 00:34:19,719
performance on par with FreeBSD s no but

673
00:34:19,719 --> 00:34:22,300
we have different priorities and we're

674
00:34:22,300 --> 00:34:26,379
okay if we lose a bit of if that gains

675
00:34:26,379 --> 00:34:28,360
our is more security or more simplicity

676
00:34:28,360 --> 00:34:30,820
or something that's closer to the goal

677
00:34:30,820 --> 00:34:35,560
that we have yeah so to tell the truth

678
00:34:35,560 --> 00:34:37,480
anyway a simply supported something that

679
00:34:37,480 --> 00:34:39,460
should be done all the time because

680
00:34:39,460 --> 00:34:41,440
things change easier for once okay to

681
00:34:41,440 --> 00:34:43,149
multiple circuit to multiple cores and

682
00:34:43,149 --> 00:34:45,429
whatever I'm on three B's in exchange is

683
00:34:45,429 --> 00:34:48,429
really to get something like better Numa

684
00:34:48,429 --> 00:34:52,750
we're supporting the kernel we need us

685
00:34:52,750 --> 00:34:56,290
Hur improve a lot of looking mechanism

686
00:34:56,290 --> 00:34:59,350
to get into if we can direction of not

687
00:34:59,350 --> 00:35:01,420
less things we are experimenting right

688
00:35:01,420 --> 00:35:06,550
now with concurrency eternal what is the

689
00:35:06,550 --> 00:35:08,290
current status right now

690
00:35:08,290 --> 00:35:11,170
after moving to a faster it's a pelican

691
00:35:11,170 --> 00:35:15,460
DSD our entire scuzzy stack and kernel

692
00:35:15,460 --> 00:35:17,230
fighting already fully as some people

693
00:35:17,230 --> 00:35:20,130
example recently there's been some huge

694
00:35:20,130 --> 00:35:23,550
work and progress on making our network

695
00:35:23,550 --> 00:35:27,359
stack SMP friendly

696
00:35:27,410 --> 00:35:31,359
the goal being to be able to learn to

697
00:35:31,359 --> 00:35:35,470
forward traffic over verticals right I

698
00:35:35,470 --> 00:35:38,779
don't think you will argue the fact that

699
00:35:38,779 --> 00:35:41,210
murder and scheduling is on as you

700
00:35:41,210 --> 00:35:44,269
mentioned it most operating system

701
00:35:44,269 --> 00:35:46,279
actually had to do it several times I

702
00:35:46,279 --> 00:35:47,660
mean they don't even rolled back and

703
00:35:47,660 --> 00:35:48,950
then when you see what happened in the

704
00:35:48,950 --> 00:35:51,529
Linux land for example it's scheduling

705
00:35:51,529 --> 00:35:53,390
right if I mean they have like ten

706
00:35:53,390 --> 00:35:56,539
different scheduler and so yeah that

707
00:35:56,539 --> 00:35:58,809
scaling is hard

708
00:35:58,809 --> 00:36:02,750
so as usual VSD we lied a bit behind and

709
00:36:02,750 --> 00:36:04,009
that's we were that we're also learning

710
00:36:04,009 --> 00:36:07,069
from the other operating system mistakes

711
00:36:07,069 --> 00:36:09,650
so hopefully it will come there slowly

712
00:36:09,650 --> 00:36:12,890
but and hopefully with those simple

713
00:36:12,890 --> 00:36:14,690
implementation because that's how we

714
00:36:14,690 --> 00:36:24,410
like when as I said earlier right so

715
00:36:24,410 --> 00:36:25,730
what are you here can you explain me

716
00:36:25,730 --> 00:36:27,440
something I never understand them on the

717
00:36:27,440 --> 00:36:28,819
20s the end the way you are bought the

718
00:36:28,819 --> 00:36:31,549
project it's in fact you keep rewriting

719
00:36:31,549 --> 00:36:34,519
all the tools even if there is already B

720
00:36:34,519 --> 00:36:36,769
is the license counterparts I mean httpd

721
00:36:36,769 --> 00:36:41,210
years in V mmm well you're not suffering

722
00:36:41,210 --> 00:36:45,710
some kind of NIH syndrome it's actually

723
00:36:45,710 --> 00:36:49,160
a very good question I'm glad that you

724
00:36:49,160 --> 00:36:51,589
asked because in my opinion there are

725
00:36:51,589 --> 00:36:54,950
very objective reasons to do that

726
00:36:54,950 --> 00:36:57,980
the first one would be trust in people

727
00:36:57,980 --> 00:37:00,500
we have a coding style practice and

728
00:37:00,500 --> 00:37:03,380
process that makes us confident in what

729
00:37:03,380 --> 00:37:07,400
we develop we know someone will not

730
00:37:07,400 --> 00:37:09,019
decide to change the software license

731
00:37:09,019 --> 00:37:10,759
for example one day to the next or stead

732
00:37:10,759 --> 00:37:13,940
start adding options and knobs for each

733
00:37:13,940 --> 00:37:16,069
and every crazy crazy corner case that

734
00:37:16,069 --> 00:37:20,180
no one would be using and looking at how

735
00:37:20,180 --> 00:37:25,790
many CVS impacted like ntpd

736
00:37:25,790 --> 00:37:28,430
OpenSSL in the last couple years would

737
00:37:28,430 --> 00:37:31,250
be a good hint as to why it was

738
00:37:31,250 --> 00:37:34,100
necessary to actually create and keeping

739
00:37:34,100 --> 00:37:36,620
the implementation for us or for and

740
00:37:36,620 --> 00:37:40,880
become libre SSL so I I don't think it's

741
00:37:40,880 --> 00:37:44,120
really NIH seem to want to right sector

742
00:37:44,120 --> 00:37:47,000
secure implementation even if BSD come

743
00:37:47,000 --> 00:37:52,330
to court a success right but let's

744
00:37:57,570 --> 00:37:59,630
you

745
00:37:59,950 --> 00:38:04,150
there's no BSD though is the quality a

746
00:38:04,150 --> 00:38:06,460
good enough one but not good enough

747
00:38:06,460 --> 00:38:08,710
amazing alternatives but what about D

748
00:38:08,710 --> 00:38:12,190
hive I mean it was working because of

749
00:38:12,190 --> 00:38:15,220
the design it's very easy to to add

750
00:38:15,220 --> 00:38:17,350
security requirements that you may want

751
00:38:17,350 --> 00:38:20,590
and so why started a new implementation

752
00:38:20,590 --> 00:38:24,040
well well because we had to basically a

753
00:38:24,040 --> 00:38:28,570
few years ago an effort was started to

754
00:38:28,570 --> 00:38:32,020
actually port beehive but after just a

755
00:38:32,020 --> 00:38:34,150
week trying to do that

756
00:38:34,150 --> 00:38:36,610
and not even being able to compile if

757
00:38:36,610 --> 00:38:38,980
you like to see files you say that I

758
00:38:38,980 --> 00:38:41,650
mean if it's that much work to be true

759
00:38:41,650 --> 00:38:44,140
port in the software then we just should

760
00:38:44,140 --> 00:38:49,780
write from scratch I mean I mean the

761
00:38:49,780 --> 00:38:51,820
situation may have changed since no

762
00:38:51,820 --> 00:38:53,590
b-hop has been according to Mac OS I

763
00:38:53,590 --> 00:38:56,620
think so maybe it may be involved but at

764
00:38:56,620 --> 00:38:58,450
the time it was it was really

765
00:38:58,450 --> 00:39:00,010
complicated and but there was an effort

766
00:39:00,010 --> 00:39:02,020
that started so it's not it's not that

767
00:39:02,020 --> 00:39:03,670
we said okay let's raid vmm and not

768
00:39:03,670 --> 00:39:05,200
looking to be I we actually did look

769
00:39:05,200 --> 00:39:10,000
into the zone but only non I guess I

770
00:39:10,000 --> 00:39:13,510
guess have in control and rewriting some

771
00:39:13,510 --> 00:39:18,430
part of the software ecosystem gives us

772
00:39:18,430 --> 00:39:20,320
a base system that in our definition

773
00:39:20,320 --> 00:39:22,660
just works and works the way we want to

774
00:39:22,660 --> 00:39:26,230
get work like if you ever feel the need

775
00:39:26,230 --> 00:39:28,420
to to know harden something on open BSD

776
00:39:28,420 --> 00:39:30,880
or Twitter build billions of options

777
00:39:30,880 --> 00:39:32,590
then you're clearly on the wrong

778
00:39:32,590 --> 00:39:34,810
operating system and that's why it also

779
00:39:34,810 --> 00:39:37,000
we're rewriting Stevens to be really

780
00:39:37,000 --> 00:39:41,290
simple right right but I mean what about

781
00:39:41,290 --> 00:39:43,330
the case of some boxing we have capsicum

782
00:39:43,330 --> 00:39:46,210
it works but it was there way before

783
00:39:46,210 --> 00:39:49,990
openness teaser why no there's also very

784
00:39:49,990 --> 00:39:52,660
good reason for that but before we talk

785
00:39:52,660 --> 00:39:55,690
about capsicum and our sandbox in

786
00:39:55,690 --> 00:39:58,030
implementation since you brought up the

787
00:39:58,030 --> 00:40:00,610
subject of security and we can talk

788
00:40:00,610 --> 00:40:03,610
about it okay let's go on it so I'll

789
00:40:03,610 --> 00:40:05,200
maybe start with something which is not

790
00:40:05,200 --> 00:40:05,890
directly

791
00:40:05,890 --> 00:40:08,560
really to security but helps a lot when

792
00:40:08,560 --> 00:40:10,300
you develop to get secure application

793
00:40:10,300 --> 00:40:11,040
what to not

794
00:40:11,040 --> 00:40:13,350
flows say let's look let's look a bit

795
00:40:13,350 --> 00:40:14,940
about our Matlock implementation which

796
00:40:14,940 --> 00:40:18,960
is a de Malik yeah so that's always very

797
00:40:18,960 --> 00:40:20,820
nice but that Malik is very nice because

798
00:40:20,820 --> 00:40:22,650
it helps us to do you have a lot of

799
00:40:22,650 --> 00:40:24,390
tuning you can do on it zoom a lab that

800
00:40:24,390 --> 00:40:27,300
come for the malecon variable where you

801
00:40:27,300 --> 00:40:30,420
can for example use a tool called a

802
00:40:30,420 --> 00:40:32,250
flick broth leak which allows you

803
00:40:32,250 --> 00:40:33,990
through Malik to detect memory leaks a

804
00:40:33,990 --> 00:40:36,830
bit like deeper to list are doing that

805
00:40:36,830 --> 00:40:40,860
we can do hip profiling we can do a lot

806
00:40:40,860 --> 00:40:42,770
of thing like that we can also put some

807
00:40:42,770 --> 00:40:45,300
garbage in the memory when you malloc so

808
00:40:45,300 --> 00:40:46,860
that to make sure that you don't across

809
00:40:46,860 --> 00:40:49,020
things yeah I think we're pretty similar

810
00:40:49,020 --> 00:40:49,920
in that regard

811
00:40:49,920 --> 00:40:51,990
a memory allocator has a lot of

812
00:40:51,990 --> 00:40:54,900
countermeasures as well some are not

813
00:40:54,900 --> 00:40:56,190
enabled by default because they're very

814
00:40:56,190 --> 00:41:00,450
costly in terms of performance but we

815
00:41:00,450 --> 00:41:02,880
developer do run with them because it

816
00:41:02,880 --> 00:41:04,620
allows us to catch a lot of for a

817
00:41:04,620 --> 00:41:07,740
different issue beforehand so pretty we

818
00:41:07,740 --> 00:41:09,390
have a lot of very convenient option in

819
00:41:09,390 --> 00:41:13,310
our you no matter the capital C option

820
00:41:16,190 --> 00:41:22,650
options we have court pages that can be

821
00:41:22,650 --> 00:41:25,170
enabled so just provide you with

822
00:41:25,170 --> 00:41:29,820
overruns attention whole bunch of

823
00:41:29,820 --> 00:41:31,110
different very different come to measure

824
00:41:31,110 --> 00:41:34,350
like that yes like baseball or quickness

825
00:41:34,350 --> 00:41:36,870
a chain regarding a bugging and memory

826
00:41:36,870 --> 00:41:40,470
related put on some security issues in a

827
00:41:40,470 --> 00:41:46,250
different way almost on a side topic

828
00:41:46,250 --> 00:41:52,490
related but the way we develop our

829
00:41:52,490 --> 00:41:55,950
demons on OpenBSD always pretty much the

830
00:41:55,950 --> 00:42:00,060
same we do primitive separation

831
00:42:00,060 --> 00:42:03,030
most of the code is one shrewder as a no

832
00:42:03,030 --> 00:42:05,060
privilege user and

833
00:42:05,060 --> 00:42:08,880
OpenSSH kind of led the way for the way

834
00:42:08,880 --> 00:42:10,140
we're doing things now

835
00:42:10,140 --> 00:42:11,970
it was the first to actually implement

836
00:42:11,970 --> 00:42:17,370
all of this before so we use also

837
00:42:17,370 --> 00:42:20,940
privilege revocation privilege to drop

838
00:42:20,940 --> 00:42:23,100
privilege as soon as possible

839
00:42:23,100 --> 00:42:25,740
I mentioned NCPD earlier which is a good

840
00:42:25,740 --> 00:42:29,670
example it's a really traditional soon

841
00:42:29,670 --> 00:42:30,990
if you look at the code it's a good

842
00:42:30,990 --> 00:42:34,080
example diversity of traditional OpenBSD

843
00:42:34,080 --> 00:42:35,580
your rating demon

844
00:42:35,580 --> 00:42:37,770
it was reeking with principle of

845
00:42:37,770 --> 00:42:40,860
whispers these privileged in line so not

846
00:42:40,860 --> 00:42:43,860
only does it upset and quick drop but it

847
00:42:43,860 --> 00:42:46,220
also has complete privilege separation

848
00:42:46,220 --> 00:42:49,400
cos e curve for the constraint feature

849
00:42:49,400 --> 00:42:51,960
constraint feature is actually a pretty

850
00:42:51,960 --> 00:42:55,580
cool one it allows you to medicate the

851
00:42:55,580 --> 00:43:00,770
man-in-the-middle attack is when you

852
00:43:01,760 --> 00:43:10,560
also connect and and get the time from

853
00:43:10,560 --> 00:43:12,030
the web server as well so you can

854
00:43:12,030 --> 00:43:14,310
actually comply here what's the time

855
00:43:14,310 --> 00:43:16,050
server and one well-known to what the

856
00:43:16,050 --> 00:43:17,850
well-known web server on the internet

857
00:43:17,850 --> 00:43:20,880
gives you and if the constraint is to

858
00:43:20,880 --> 00:43:27,120
art then from there is probably yeah the

859
00:43:27,120 --> 00:43:30,060
thing is you did that but have a lot of

860
00:43:30,060 --> 00:43:32,130
power indicator points P like for

861
00:43:32,130 --> 00:43:33,570
example you don't support half of the

862
00:43:33,570 --> 00:43:35,010
feature that are supposed to be

863
00:43:35,010 --> 00:43:36,840
supported like authenticating the P

864
00:43:36,840 --> 00:43:39,000
rocket which are giving you a time or

865
00:43:39,000 --> 00:43:41,700
supporting properly seconded well in

866
00:43:41,700 --> 00:43:45,420
that case but you actually judge

867
00:43:45,420 --> 00:43:48,210
described exactly the strength of open

868
00:43:48,210 --> 00:43:50,640
activity it is simple it does not it

869
00:43:50,640 --> 00:43:52,320
doesn't need to authenticate because we

870
00:43:52,320 --> 00:43:54,690
use constraints that's good enough

871
00:43:54,690 --> 00:43:56,370
it doesn't need to implement the kitchen

872
00:43:56,370 --> 00:43:58,020
scene because no one cares and the one

873
00:43:58,020 --> 00:44:02,550
uses most antiquity feature and is a

874
00:44:02,550 --> 00:44:04,680
need for it then we have the aunty Beaty

875
00:44:04,680 --> 00:44:06,960
package that people can can install and

876
00:44:06,960 --> 00:44:09,230
use instead it's just by default with

877
00:44:09,230 --> 00:44:13,400
something simple and secure really

878
00:44:13,400 --> 00:44:17,650
related topic we are well known for our

879
00:44:17,650 --> 00:44:21,859
exploit mitigation techniques it's

880
00:44:21,859 --> 00:44:23,150
important to note that all of these have

881
00:44:23,150 --> 00:44:25,970
been enabled by default for years and

882
00:44:25,970 --> 00:44:28,940
they're very hard to actually disable we

883
00:44:28,940 --> 00:44:30,650
don't want to encourage people to

884
00:44:30,650 --> 00:44:33,800
activate them we actually I'm doing them

885
00:44:33,800 --> 00:44:35,869
by default and they get very hard to

886
00:44:35,869 --> 00:44:40,850
disable them I'm going to into a lot of

887
00:44:40,850 --> 00:44:57,320
details national protection by

888
00:44:57,320 --> 00:45:02,450
executable static binaries as well the

889
00:45:02,450 --> 00:45:04,940
way we approach the OS development is

890
00:45:04,940 --> 00:45:07,040
that we assume that we're running in a

891
00:45:07,040 --> 00:45:15,280
hostile environment yeah some freebsd

892
00:45:15,280 --> 00:45:18,560
well yeah we don't have yet SLR but we

893
00:45:18,560 --> 00:45:20,600
have hopefully closer we have a couple

894
00:45:20,600 --> 00:45:22,310
of mitigation technique weight loss I

895
00:45:22,310 --> 00:45:24,470
agree but we also have something like

896
00:45:24,470 --> 00:45:25,700
the marker mark which is mandatory

897
00:45:25,700 --> 00:45:27,410
access control which it's very nice to

898
00:45:27,410 --> 00:45:29,540
be able to compartmentalize what an

899
00:45:29,540 --> 00:45:31,280
application is supposed to access to you

900
00:45:31,280 --> 00:45:34,580
as a resource network file systems or to

901
00:45:34,580 --> 00:45:37,850
view on a system preventing saying that

902
00:45:37,850 --> 00:45:41,150
there are other users or the process way

903
00:45:41,150 --> 00:45:47,410
more we also have very nice of auditing

904
00:45:47,410 --> 00:45:50,540
framework is to open DSM which allows

905
00:45:50,540 --> 00:45:53,240
YouTube let's report everything that

906
00:45:53,240 --> 00:45:55,220
happened on your system and even record

907
00:45:55,220 --> 00:45:57,020
that on a remote machine if you need to

908
00:45:57,020 --> 00:46:00,190
so distributed mechanism okay

909
00:46:00,190 --> 00:46:03,140
well justice will be done on what you

910
00:46:03,140 --> 00:46:05,660
say earlier regarding your capsule

911
00:46:05,660 --> 00:46:09,030
so we do have a sandbox implementation

912
00:46:09,030 --> 00:46:13,410
it's called pledge so now the reason why

913
00:46:13,410 --> 00:46:15,060
we did not pour capsicum is that

914
00:46:15,060 --> 00:46:17,880
capsicum is too complicated I'm not

915
00:46:17,880 --> 00:46:19,170
saying it's bad it's a very it's a very

916
00:46:19,170 --> 00:46:21,180
good capability system it's just too

917
00:46:21,180 --> 00:46:26,010
complex and as such we think it doesn't

918
00:46:26,010 --> 00:46:30,420
get as much use as it should be the

919
00:46:30,420 --> 00:46:34,890
pledge Sisko is actually very simple and

920
00:46:34,890 --> 00:46:38,190
describe exactly what we how we envision

921
00:46:38,190 --> 00:46:39,869
security we want to provide affordable

922
00:46:39,869 --> 00:46:43,080
security by affordable and in simple

923
00:46:43,080 --> 00:46:46,830
easy to use and make it easy for the

924
00:46:46,830 --> 00:46:48,690
actual developer programmer to add

925
00:46:48,690 --> 00:46:52,080
pledge call into his coat when pledge

926
00:46:52,080 --> 00:46:55,830
was implemented 30 percent of our base

927
00:46:55,830 --> 00:46:58,619
system was pledged after only about two

928
00:46:58,619 --> 00:47:01,740
month and today we have between 85 and

929
00:47:01,740 --> 00:47:04,830
90 percent of the entire user land in

930
00:47:04,830 --> 00:47:08,160
base that use wakes and even some B

931
00:47:08,160 --> 00:47:11,430
ports that chromium is pledged so it's a

932
00:47:11,430 --> 00:47:13,680
it's actually pretty easy to use is so

933
00:47:13,680 --> 00:47:16,460
and as such people actually use memory

934
00:47:16,460 --> 00:47:20,400
also has a nice side effect is that I

935
00:47:20,400 --> 00:47:22,230
guess that that's also true with

936
00:47:22,230 --> 00:47:26,040
capsicum but I'd encourage actually a

937
00:47:26,040 --> 00:47:27,930
Rio dating your code you know exactly

938
00:47:27,930 --> 00:47:29,580
where you want to put the pledge goal

939
00:47:29,580 --> 00:47:35,490
and to my that so so another picture we

940
00:47:35,490 --> 00:47:37,619
have a pretty very low curve is the

941
00:47:37,619 --> 00:47:40,500
chance which her container secured by

942
00:47:40,500 --> 00:47:44,520
design by default and which allows you

943
00:47:44,520 --> 00:47:46,859
to to to run the process in the reason

944
00:47:46,859 --> 00:47:48,840
that cannot do anything if you want to

945
00:47:48,840 --> 00:47:50,790
like reducing you can just limiting the

946
00:47:50,790 --> 00:47:52,059
number of CPU you can

947
00:47:52,059 --> 00:47:54,249
the memory the resource the access to

948
00:47:54,249 --> 00:47:55,749
the names work on though and say me that

949
00:47:55,749 --> 00:47:58,689
it is very important to be able to add

950
00:47:58,689 --> 00:48:01,449
security on the system yeah yeah that

951
00:48:01,449 --> 00:48:04,359
regard I do agree that kusa we have no

952
00:48:04,359 --> 00:48:07,749
container like technology there's been

953
00:48:07,749 --> 00:48:10,809
an initial effort a few years ago old

954
00:48:10,809 --> 00:48:13,299
sis jail but it was it was using

955
00:48:13,299 --> 00:48:17,339
systrace which had the big security flow

956
00:48:17,339 --> 00:48:20,769
that rendered basically do you the

957
00:48:20,769 --> 00:48:22,509
sandbox completely ridiculous

958
00:48:22,509 --> 00:48:27,519
so anyway well I think given the time we

959
00:48:27,519 --> 00:48:30,160
polies keep the project explanation on

960
00:48:30,160 --> 00:48:32,469
how the different project works and

961
00:48:32,469 --> 00:48:36,039
that's a run to which will not spawn it

962
00:48:36,039 --> 00:48:41,769
assuming it so sorry yeah it supposed to

963
00:48:41,769 --> 00:48:47,650
do to tractor but right I mean you

964
00:48:47,650 --> 00:48:49,749
playing a lot about your license purity

965
00:48:49,749 --> 00:48:51,339
everything should be BSD and we do

966
00:48:51,339 --> 00:48:53,999
almost the same but I'm very surprised

967
00:48:53,999 --> 00:48:58,029
by the fact that I there's a lot of

968
00:48:58,029 --> 00:48:59,890
product we're working on to bring BSD

969
00:48:59,890 --> 00:49:02,019
license tools in the base system and we

970
00:49:02,019 --> 00:49:03,699
don't see you in that area in particular

971
00:49:03,699 --> 00:49:05,319
when speak about the tool chain for

972
00:49:05,319 --> 00:49:08,019
example we are very close to get the

973
00:49:08,019 --> 00:49:17,289
first released without GPL for what what

974
00:49:17,289 --> 00:49:18,789
that one is

975
00:49:18,789 --> 00:49:21,939
so tell one previously means the the

976
00:49:21,939 --> 00:49:24,429
main support it release not in terms of

977
00:49:24,429 --> 00:49:26,199
supporting the code so basically right

978
00:49:26,199 --> 00:49:29,979
now attendee 64 and ice 386 but it mean

979
00:49:29,979 --> 00:49:32,019
that the one we are providing binary

980
00:49:32,019 --> 00:49:33,900
security patches

981
00:49:33,900 --> 00:49:36,539
while security binary security patches

982
00:49:36,539 --> 00:49:38,469
because security patches will provide

983
00:49:38,469 --> 00:49:40,869
for everything and says that the most

984
00:49:40,869 --> 00:49:43,769
common one we don't provide for mates

985
00:49:43,769 --> 00:49:47,499
well see well we support that for more

986
00:49:47,499 --> 00:49:49,599
we don't split it so there is no to you

987
00:49:49,599 --> 00:49:52,229
one two or three

988
00:49:54,420 --> 00:49:57,160
yeah so basically previously the status

989
00:49:57,160 --> 00:50:03,160
right now is on Tier one we removed dççe

990
00:50:03,160 --> 00:50:05,589
responsiveness plus we have a full

991
00:50:05,589 --> 00:50:10,630
almost full compiler chain BSD license

992
00:50:10,630 --> 00:50:13,690
we also remove half of the Venuti within

993
00:50:13,690 --> 00:50:15,729
our home vector and to chain project

994
00:50:15,729 --> 00:50:17,949
which removes every single the linker

995
00:50:17,949 --> 00:50:19,749
we're pretty close to add I will leave

996
00:50:19,749 --> 00:50:20,920
right now which would be the next

997
00:50:20,920 --> 00:50:26,799
thinker and so the only left thing or oh

998
00:50:26,799 --> 00:50:31,930
we removed taking food because okay who

999
00:50:31,930 --> 00:50:33,969
reads taking full files

1000
00:50:33,969 --> 00:50:42,749
I mean no one will remove CBS and

1001
00:50:42,749 --> 00:50:46,479
evening removed replaced by along VB so

1002
00:50:46,479 --> 00:50:48,160
what is left is we still have

1003
00:50:48,160 --> 00:50:50,410
communities well as leaf has been

1004
00:50:50,410 --> 00:50:52,630
replaced by an open D and the PSD mix

1005
00:50:52,630 --> 00:50:54,279
plus some FreeBSD patches on top of it

1006
00:50:54,279 --> 00:51:00,299
you might want the patch yeah I need to

1007
00:51:00,299 --> 00:51:02,769
graph is still there because a couple of

1008
00:51:02,769 --> 00:51:04,299
men page of up wondering and because we

1009
00:51:04,299 --> 00:51:05,739
have a lot of papers that were written

1010
00:51:05,739 --> 00:51:07,900
back in the old time by FreeBSD

1011
00:51:07,900 --> 00:51:09,400
developers that are in the base system

1012
00:51:09,400 --> 00:51:11,769
that are written in rough so we are

1013
00:51:11,769 --> 00:51:13,769
still looking at what we do with that

1014
00:51:13,769 --> 00:51:15,999
new rap is still there because there is

1015
00:51:15,999 --> 00:51:18,219
too many bugs in busy bread for now but

1016
00:51:18,219 --> 00:51:19,719
I mean for phobias it well I'm pretty

1017
00:51:19,719 --> 00:51:23,110
sure that will be fully

1018
00:51:23,110 --> 00:51:25,190
gpl-licensed stuff what is this

1019
00:51:25,190 --> 00:51:28,280
situation for you okay I will not talk

1020
00:51:28,280 --> 00:51:33,370
about the licenses itself because carry

1021
00:51:33,370 --> 00:51:36,410
it besides a few exceptions most of the

1022
00:51:36,410 --> 00:51:37,280
userland

1023
00:51:37,280 --> 00:51:41,110
is BSD license on open BSD with

1024
00:51:41,110 --> 00:51:44,060
obviously still had some count of a fork

1025
00:51:44,060 --> 00:51:47,650
of canoe CVS that we can move right now

1026
00:51:47,650 --> 00:51:50,540
RCS is actually over white BSD every

1027
00:51:50,540 --> 00:51:54,020
bite so that's one word gives you

1028
00:51:54,020 --> 00:51:56,660
license many dot takes care of our

1029
00:51:56,660 --> 00:52:01,430
manuals so we actually don't need a

1030
00:52:01,430 --> 00:52:05,830
system at all so it's gone since what

1031
00:52:05,830 --> 00:52:08,600
regarding the truth shell to change

1032
00:52:08,600 --> 00:52:11,450
sorry you guys are figurehead I agree

1033
00:52:11,450 --> 00:52:16,310
but did jump on the bandwagon tens 2164

1034
00:52:16,310 --> 00:52:18,770
architecture so now we do have a lot of

1035
00:52:18,770 --> 00:52:23,620
the NC like I know the younger in pace I

1036
00:52:23,620 --> 00:52:25,820
don't want to go too much into detail

1037
00:52:25,820 --> 00:52:27,920
because this effort is someone somewhat

1038
00:52:27,920 --> 00:52:31,100
recent so there's probably a lot of

1039
00:52:31,100 --> 00:52:32,840
things that comes to changing in the

1040
00:52:32,840 --> 00:52:36,140
upcoming month but we're doing pretty

1041
00:52:36,140 --> 00:52:37,340
much we're going pretty much into the

1042
00:52:37,340 --> 00:52:39,490
same directions also you guys are either

1043
00:52:39,490 --> 00:52:44,750
LG g2 are six eight or etc but as I

1044
00:52:44,750 --> 00:52:46,340
mentioned earlier we have no cheer one

1045
00:52:46,340 --> 00:52:48,410
two three so we still have to support

1046
00:52:48,410 --> 00:52:50,810
some architecture that will most

1047
00:52:50,810 --> 00:52:53,650
probably never be supported by LLVM and

1048
00:52:53,650 --> 00:52:57,910
the gang so we'll have to keep

1049
00:52:57,910 --> 00:53:06,710
GCC yeah so I'm pretty sure that it took

1050
00:53:06,710 --> 00:53:09,940
that long because you wanted to skip

1051
00:53:09,940 --> 00:53:25,160
this one will be very quick so basically

1052
00:53:25,160 --> 00:53:26,450
we have another PI system support

1053
00:53:26,450 --> 00:53:28,579
including very modern one we have

1054
00:53:28,579 --> 00:53:31,099
delicious update signal that we have

1055
00:53:31,099 --> 00:53:33,950
very nice cozy schedule support very

1056
00:53:33,950 --> 00:53:36,460
low-level system for storage

1057
00:53:36,460 --> 00:53:49,490
multipass encryption Wow I guess

1058
00:53:49,490 --> 00:53:51,920
well I would summarize it by saying that

1059
00:53:51,920 --> 00:53:56,140
we still have bugs in stock contigs yeah

1060
00:53:56,140 --> 00:54:00,140
yeah but I mean you guys have Kurt so

1061
00:54:00,140 --> 00:54:04,789
yeah yeah no we we don't have doing we

1062
00:54:04,789 --> 00:54:07,480
don't have the ZFS oh I'll just be I

1063
00:54:07,480 --> 00:54:13,400
just like soon but not just that I use

1064
00:54:13,400 --> 00:54:19,849
EFS daily operating systems it's really

1065
00:54:19,849 --> 00:54:22,849
great it's just super scary what what

1066
00:54:22,849 --> 00:54:25,579
scares me the most is that it requires

1067
00:54:25,579 --> 00:54:29,210
ECC memory and when the faxes come

1068
00:54:29,210 --> 00:54:32,170
before PC memory though that's really

1069
00:54:32,170 --> 00:54:34,880
it's how you're recommended of course it

1070
00:54:34,880 --> 00:54:37,730
works it about it but so that's kind of

1071
00:54:37,730 --> 00:54:39,859
scary it's big it's not justify system

1072
00:54:39,859 --> 00:54:43,420
is actually an entire volume

1073
00:54:45,830 --> 00:54:49,820
- lacy - I mean feature-wise it's great

1074
00:54:49,820 --> 00:54:52,370
it's awesome and there's no too bad we

1075
00:54:52,370 --> 00:54:53,870
don't have time to compare our best of

1076
00:54:53,870 --> 00:54:55,420
the situation

1077
00:54:55,420 --> 00:55:02,510
pretty much yeah we think I think it's

1078
00:55:02,510 --> 00:55:04,400
getting there except there true we have

1079
00:55:04,400 --> 00:55:06,410
all the packages everything but I mean

1080
00:55:06,410 --> 00:55:08,060
the drivers are we are selling behind

1081
00:55:08,060 --> 00:55:13,610
the wire yeah so anyway so let's think

1082
00:55:13,610 --> 00:55:17,930
consider that might be FG success than

1083
00:55:17,930 --> 00:55:22,820
yours I'm not really sure I pretty found

1084
00:55:22,820 --> 00:55:26,530
that mine sex very well less than yours

1085
00:55:26,530 --> 00:55:30,320
anyway I'm really happy that openly the

1086
00:55:30,320 --> 00:55:33,110
even if it sucks more than freebsd is

1087
00:55:33,110 --> 00:55:35,300
around as they pushed a lot of bsd

1088
00:55:35,300 --> 00:55:39,020
license tool and they are very pushing

1089
00:55:39,020 --> 00:55:43,190
also security security coding principle

1090
00:55:43,190 --> 00:55:45,680
and wide-spreading that I'm very unhappy

1091
00:55:45,680 --> 00:55:47,900
that you were there thank you well I

1092
00:55:47,900 --> 00:55:49,970
think three beers is very important as

1093
00:55:49,970 --> 00:55:53,510
well first of all it's a real enterprise

1094
00:55:53,510 --> 00:55:58,160
operating system and it's for me the way

1095
00:55:58,160 --> 00:55:59,720
I say that it's slowly filling out the

1096
00:55:59,720 --> 00:56:02,020
response left by ocellaris

1097
00:56:02,020 --> 00:56:05,470
some amazing piece of sort of technology

1098
00:56:05,470 --> 00:56:08,420
and what is great about it is that it's

1099
00:56:08,420 --> 00:56:15,740
actually our emblem 2d IKEA the external

1100
00:56:15,740 --> 00:56:17,960
ecosystem that is that is people know

1101
00:56:17,960 --> 00:56:20,530
about pretty edgy huge company is really

1102
00:56:20,530 --> 00:56:24,620
like I mean Netflix and all just like

1103
00:56:24,620 --> 00:56:27,320
like some weird weird fringe operating

1104
00:56:27,320 --> 00:56:30,260
system thank you

1105
00:56:30,260 --> 00:56:33,590
so we both organized an Acura busy cone

1106
00:56:33,590 --> 00:56:36,320
in Paris in September so we hope to see

1107
00:56:36,320 --> 00:56:38,020
you everyone there

1108
00:56:38,020 --> 00:56:40,610
save the dates and you cannot be a known

1109
00:56:40,610 --> 00:56:43,570
version of the talk yeah

1110
00:56:43,570 --> 00:56:47,920
totally we know now that 52 hours

1111
00:56:51,680 --> 00:56:57,750
well in Frankish anyway thank you very

1112
00:56:57,750 --> 00:56:59,900
much

1113
00:57:00,580 --> 00:57:07,949
[Applause]

1114
00:57:08,910 --> 00:57:11,960
[Music]

