1
00:00:35,930 --> 00:00:43,320
okay so I'm trying to talk more about

2
00:00:43,320 --> 00:00:45,750
our functionality because I don't think

3
00:00:45,750 --> 00:00:49,950
that people really know our project and

4
00:00:49,950 --> 00:00:53,670
if somebody wants to go later into how

5
00:00:53,670 --> 00:00:57,090
things are deft or deeper development

6
00:00:57,090 --> 00:01:01,290
stuff we have a main developer here who

7
00:01:01,290 --> 00:01:03,510
can ask certain questions like that I'm

8
00:01:03,510 --> 00:01:09,270
just like from the usage and

9
00:01:09,270 --> 00:01:18,590
administration side of things we have a

10
00:01:18,890 --> 00:01:23,509
distributed parallel file system that

11
00:01:23,509 --> 00:01:26,330
can do your applications with its

12
00:01:26,330 --> 00:01:33,530
distribution we have we have

13
00:01:33,530 --> 00:01:36,630
concentrated on some simplicity how

14
00:01:36,630 --> 00:01:39,509
would God like that I mean the basic

15
00:01:39,509 --> 00:01:42,509
idea is if you have terms of data and

16
00:01:42,509 --> 00:01:44,399
just need to set up something fast so

17
00:01:44,399 --> 00:01:48,360
that you can put it there we think we

18
00:01:48,360 --> 00:01:49,950
have the right solution for that because

19
00:01:49,950 --> 00:01:53,910
it's like eight lines of text eight to

20
00:01:53,910 --> 00:01:55,380
ten lines of text to set the whole thing

21
00:01:55,380 --> 00:02:02,399
up so I just used the example with the

22
00:02:02,399 --> 00:02:04,380
t-shirt I mean you don't go to a rocket

23
00:02:04,380 --> 00:02:06,630
scientist to design you a new place for

24
00:02:06,630 --> 00:02:10,560
your data if you just want to store

25
00:02:10,560 --> 00:02:12,780
things that you just grabbed from the

26
00:02:12,780 --> 00:02:15,440
latest roster

27
00:02:17,860 --> 00:02:20,490
yeah

28
00:02:23,720 --> 00:02:29,480
yeah we are we are basically the system

29
00:02:29,480 --> 00:02:31,700
has two main components you have

30
00:02:31,700 --> 00:02:34,640
metadata server and as many junk servers

31
00:02:34,640 --> 00:02:35,450
as you like

32
00:02:35,450 --> 00:02:38,480
I think the limit currently is 1,024

33
00:02:38,480 --> 00:02:42,080
chunk servers you can store up to one

34
00:02:42,080 --> 00:02:46,790
extra byte of data and the setup is very

35
00:02:46,790 --> 00:02:49,370
very simple but and I will show that

36
00:02:49,370 --> 00:02:51,170
later in the demo I did that yesterday

37
00:02:51,170 --> 00:02:55,310
and some problems because the collectors

38
00:02:55,310 --> 00:02:59,560
were not working but I can show you that

39
00:03:05,500 --> 00:03:11,720
so there's there's basically no real

40
00:03:11,720 --> 00:03:13,670
learning curve there about there's one

41
00:03:13,670 --> 00:03:16,460
command to manage the system they are

42
00:03:16,460 --> 00:03:22,250
about to config files for a master and

43
00:03:22,250 --> 00:03:25,790
three for a tank server but you that

44
00:03:25,790 --> 00:03:27,260
mostly you don't need to touch the

45
00:03:27,260 --> 00:03:29,480
default configuration will do nearly

46
00:03:29,480 --> 00:03:30,890
everything for you the only thing you

47
00:03:30,890 --> 00:03:32,690
have to do is to tell the chunk servers

48
00:03:32,690 --> 00:03:34,190
where the master is and where you want

49
00:03:34,190 --> 00:03:42,410
them to store your data yeah so master

50
00:03:42,410 --> 00:03:47,540
chunk servers we have options to 4h a on

51
00:03:47,540 --> 00:03:52,430
your masters the when one of the masses

52
00:03:52,430 --> 00:03:56,200
fail then the one that has the latest

53
00:03:56,200 --> 00:04:00,170
version of the data just takes over the

54
00:04:00,170 --> 00:04:02,660
switchover is very very fast I think we

55
00:04:02,660 --> 00:04:05,420
had in our latest test it's up one

56
00:04:05,420 --> 00:04:09,380
second but it takes to switch over from

57
00:04:09,380 --> 00:04:15,440
one master server to to do a fight over

58
00:04:15,440 --> 00:04:17,680
one

59
00:04:18,450 --> 00:04:22,180
you can you can mix all kinds of

60
00:04:22,180 --> 00:04:26,290
platforms we have we have our software

61
00:04:26,290 --> 00:04:28,950
available for everything that UNIX like

62
00:04:28,950 --> 00:04:32,890
so I have a setup where I have chunk

63
00:04:32,890 --> 00:04:37,630
servers on BSD on CentOS on Debian mix I

64
00:04:37,630 --> 00:04:42,490
even have Solaris chunk servers and they

65
00:04:42,490 --> 00:04:44,860
all work together so I have so the

66
00:04:44,860 --> 00:04:46,360
system is basically distributed over all

67
00:04:46,360 --> 00:04:49,980
of them and it doesn't really matter the

68
00:04:49,980 --> 00:04:54,910
the the chunks are saved in a normal

69
00:04:54,910 --> 00:05:00,250
file system so the so the performance of

70
00:05:00,250 --> 00:05:02,860
your your chunk servers mostly depends

71
00:05:02,860 --> 00:05:06,460
how you setup the system under it we

72
00:05:06,460 --> 00:05:08,560
mostly use accessories that have asked

73
00:05:08,560 --> 00:05:12,820
for our for our scenarios but it

74
00:05:12,820 --> 00:05:14,500
basically depends what you happen would

75
00:05:14,500 --> 00:05:19,290
you like there is also an option to to

76
00:05:19,290 --> 00:05:24,040
use a tape as a chunk server so that you

77
00:05:24,040 --> 00:05:26,170
could basically have replicas of your

78
00:05:26,170 --> 00:05:28,780
chunks automatically saved on tech

79
00:05:28,780 --> 00:05:34,450
drives right and as like we tell you

80
00:05:34,450 --> 00:05:37,800
later in the demo you can change your

81
00:05:37,800 --> 00:05:40,660
your storage policies on the fly so

82
00:05:40,660 --> 00:05:43,840
basically if you decide that you want to

83
00:05:43,840 --> 00:05:48,640
have three copies of a file in your in

84
00:05:48,640 --> 00:05:51,280
your storage now and later decide that

85
00:05:51,280 --> 00:05:53,230
those files are not important anymore

86
00:05:53,230 --> 00:05:55,750
and you just need one copy it's one

87
00:05:55,750 --> 00:05:58,480
liner and it and the chunk servers will

88
00:05:58,480 --> 00:06:03,150
basically reconfigure that by themselves

89
00:06:05,599 --> 00:06:10,339
yeah and you can group your chunk

90
00:06:10,339 --> 00:06:15,499
servers so basically when you each time

91
00:06:15,499 --> 00:06:18,830
server can have a level and depending

92
00:06:18,830 --> 00:06:22,929
how you're set your policies you can

93
00:06:22,929 --> 00:06:26,929
define that certain data is only safe to

94
00:06:26,929 --> 00:06:29,569
certain groups of chunk servers so let's

95
00:06:29,569 --> 00:06:32,899
say you have to chunk servers with SSDs

96
00:06:32,899 --> 00:06:34,909
and three chunk servers with hard drives

97
00:06:34,909 --> 00:06:38,270
you just give the chunk servers for the

98
00:06:38,270 --> 00:06:40,999
hard drives one label and the ones for

99
00:06:40,999 --> 00:06:44,839
the SSD another variable and by defining

100
00:06:44,839 --> 00:06:46,969
your policy you can just with one line

101
00:06:46,969 --> 00:06:49,669
tell them where the data is supposed to

102
00:06:49,669 --> 00:06:51,818
be

103
00:06:56,619 --> 00:06:58,969
besides replication we also support

104
00:06:58,969 --> 00:07:04,669
erasure coding the the advantage of a

105
00:07:04,669 --> 00:07:06,439
racial coding besides that you have more

106
00:07:06,439 --> 00:07:09,949
space is that the system then starts

107
00:07:09,949 --> 00:07:13,189
striping so basically as you set your

108
00:07:13,189 --> 00:07:17,149
erasure codes your system gets power

109
00:07:17,149 --> 00:07:21,169
rights so when you use replication your

110
00:07:21,169 --> 00:07:23,240
clients will write to the first chunk

111
00:07:23,240 --> 00:07:25,939
server and that chunk server will do the

112
00:07:25,939 --> 00:07:29,300
replication when you use a razor coding

113
00:07:29,300 --> 00:07:32,180
the way you set your erasure codes let's

114
00:07:32,180 --> 00:07:34,759
say three data parts and to parity parts

115
00:07:34,759 --> 00:07:37,159
that we write to five chunk servers in

116
00:07:37,159 --> 00:07:39,490
parallel

117
00:07:49,600 --> 00:07:52,600
No

118
00:07:52,780 --> 00:07:56,860
I think the smallest will be the

119
00:07:56,860 --> 00:08:04,810
smallest will be about 138 k 64 K 164 K

120
00:08:04,810 --> 00:08:08,700
we will not cut the file pieces

121
00:08:13,770 --> 00:08:17,400
yeah since since we're eraser coating

122
00:08:17,400 --> 00:08:19,139
the system was paralyzed you will

123
00:08:19,139 --> 00:08:20,880
basically get nearly the same

124
00:08:20,880 --> 00:08:24,930
performance from fuel flow system as

125
00:08:24,930 --> 00:08:28,380
from a few fast systems like from a lot

126
00:08:28,380 --> 00:08:34,770
of slow systems that way it's relatively

127
00:08:34,770 --> 00:08:36,630
easy to have an upgrade path where you

128
00:08:36,630 --> 00:08:40,740
start with with systems that you have

129
00:08:40,740 --> 00:08:42,539
and you can at any time whether if you

130
00:08:42,539 --> 00:08:49,890
replace them on the fly yeah with the

131
00:08:49,890 --> 00:08:51,839
with with the labeling that I talked

132
00:08:51,839 --> 00:08:54,510
about you can create some kind of basic

133
00:08:54,510 --> 00:08:57,959
hearing because you can set speak labels

134
00:08:57,959 --> 00:09:03,750
and define where your data goes through

135
00:09:03,750 --> 00:09:07,890
and that's that's not a replacement for

136
00:09:07,890 --> 00:09:09,540
outside hearing yet but it's like a

137
00:09:09,540 --> 00:09:12,630
start you can you can have as many

138
00:09:12,630 --> 00:09:14,370
labels as you want and since the

139
00:09:14,370 --> 00:09:17,100
movement is very fast it's relatively

140
00:09:17,100 --> 00:09:20,430
easy to to create a manual hearing on

141
00:09:20,430 --> 00:09:23,390
your data path

142
00:09:26,580 --> 00:09:31,649
okay so we have we have a system that we

143
00:09:31,649 --> 00:09:35,850
developed for the master server high

144
00:09:35,850 --> 00:09:38,070
availability which is based on the rest

145
00:09:38,070 --> 00:09:43,940
protocol and is and is using a quorum

146
00:09:43,940 --> 00:09:47,220
the reason why we developed that is that

147
00:09:47,220 --> 00:09:50,970
we had quite some problems with using

148
00:09:50,970 --> 00:09:55,440
what was available there there were a

149
00:09:55,440 --> 00:09:58,890
lot of split brain scenarios and in

150
00:09:58,890 --> 00:10:01,490
general the switchover was too slow and

151
00:10:01,490 --> 00:10:05,190
with our new with our new AJ for the

152
00:10:05,190 --> 00:10:09,540
master servers we have in my experience

153
00:10:09,540 --> 00:10:13,790
under one second switch over time

154
00:10:18,510 --> 00:10:23,970
so the the if you if you configure your

155
00:10:23,970 --> 00:10:28,889
policy to be replication the your client

156
00:10:28,889 --> 00:10:31,170
will basically send start sending data

157
00:10:31,170 --> 00:10:35,070
to the first junk server and depending

158
00:10:35,070 --> 00:10:38,459
on how many replicas you set you will it

159
00:10:38,459 --> 00:10:40,320
will create a chain reaction so when the

160
00:10:40,320 --> 00:10:42,449
first slice of data goes to the first

161
00:10:42,449 --> 00:10:44,430
chunk server it will start replicating

162
00:10:44,430 --> 00:10:49,110
to the next and so on yeah until all the

163
00:10:49,110 --> 00:10:51,089
data is copied and all the replicas are

164
00:10:51,089 --> 00:10:57,600
done that way you your client basically

165
00:10:57,600 --> 00:11:00,769
is done as soon as he has the data

166
00:11:00,769 --> 00:11:02,910
copied to the first chunk server and

167
00:11:02,910 --> 00:11:04,139
doesn't have to think about all the

168
00:11:04,139 --> 00:11:15,389
replicas we have copy metadata only

169
00:11:15,389 --> 00:11:19,649
snapshots so basically it's a copy on

170
00:11:19,649 --> 00:11:25,769
first write system so like in a set FS

171
00:11:25,769 --> 00:11:27,720
system you would basically have no space

172
00:11:27,720 --> 00:11:30,779
occupied by by your snapshots and we

173
00:11:30,779 --> 00:11:32,220
have no limits on the amount of

174
00:11:32,220 --> 00:11:35,149
snapshots right now

175
00:11:40,839 --> 00:11:45,130
the system has when you add discs or you

176
00:11:45,130 --> 00:11:48,730
add new chunk servers the the chunk

177
00:11:48,730 --> 00:11:51,180
servers will try to balance out the

178
00:11:51,180 --> 00:12:03,180
space during write operations and

179
00:12:16,110 --> 00:12:20,340
what the outer balancing

180
00:12:29,260 --> 00:12:33,470
no basically if I if you say said that

181
00:12:33,470 --> 00:12:34,970
you want to have three copies of every

182
00:12:34,970 --> 00:12:38,210
time it will still keep three coffees on

183
00:12:38,210 --> 00:12:39,800
three different chunk servers the point

184
00:12:39,800 --> 00:12:42,440
is it will try to have the same amount

185
00:12:42,440 --> 00:12:44,510
of data on the amount of drives and

186
00:12:44,510 --> 00:12:47,290
chunk servers that you have it's not

187
00:12:47,290 --> 00:12:50,779
unless you use labels it does not stick

188
00:12:50,779 --> 00:12:53,300
to certain chunk servers so you can set

189
00:12:53,300 --> 00:12:55,160
a policy of three have twenty chunk

190
00:12:55,160 --> 00:12:56,600
servers it will always keep three copies

191
00:12:56,600 --> 00:12:59,390
but it will not tell you where we will

192
00:12:59,390 --> 00:13:01,220
distribute and how to balance the data

193
00:13:01,220 --> 00:13:04,029
so that all your chunk servers are

194
00:13:04,029 --> 00:13:08,020
utilized in the same way

195
00:13:15,840 --> 00:13:20,070
that depends if it's replication or if

196
00:13:20,070 --> 00:13:22,680
it's eraser coding if it's replication I

197
00:13:22,680 --> 00:13:25,520
think it's round robin

198
00:13:41,110 --> 00:13:43,570
if you can either have if you have it

199
00:13:43,570 --> 00:13:46,720
undefined it will try to balance out by

200
00:13:46,720 --> 00:13:49,930
space right and busyness of of a certain

201
00:13:49,930 --> 00:13:52,930
chunk server if you have labels then it

202
00:13:52,930 --> 00:13:55,720
will go there where you defined which

203
00:13:55,720 --> 00:13:58,410
should right

204
00:14:37,600 --> 00:14:40,260
yes

205
00:14:56,300 --> 00:14:59,310
yes you don't speak directly to the

206
00:14:59,310 --> 00:15:00,390
Chancellor when you speak to the

207
00:15:00,390 --> 00:15:02,040
metadata forever first and that will

208
00:15:02,040 --> 00:15:05,180
tell you where to find your turn

209
00:15:10,530 --> 00:15:13,530
yes

210
00:15:19,529 --> 00:15:27,569
I can show that yes it's pretty easy you

211
00:15:27,569 --> 00:15:29,670
just in the chunks already have a

212
00:15:29,670 --> 00:15:31,800
definition file where you specify the

213
00:15:31,800 --> 00:15:33,629
directories where it's supposed to save

214
00:15:33,629 --> 00:15:36,300
its data if you put a star in front of

215
00:15:36,300 --> 00:15:38,009
that entry and reload the chunk server

216
00:15:38,009 --> 00:15:41,009
it will empty that directory so just

217
00:15:41,009 --> 00:15:42,899
wait until all the chunks are moved to a

218
00:15:42,899 --> 00:15:45,930
different safe place and when it's moved

219
00:15:45,930 --> 00:15:48,899
you just switch it off shrinking is very

220
00:15:48,899 --> 00:15:59,970
simple yes unless you have a goal of one

221
00:15:59,970 --> 00:16:03,420
then you're out of luck so if you don't

222
00:16:03,420 --> 00:16:07,740
have replicas sets then as as long as

223
00:16:07,740 --> 00:16:10,470
you have as long as you have set your

224
00:16:10,470 --> 00:16:12,420
goal so that you have enough replicas

225
00:16:12,420 --> 00:16:16,379
yes it will automatically create new

226
00:16:16,379 --> 00:16:20,100
chance to the next available space if

227
00:16:20,100 --> 00:16:23,240
you have

228
00:16:46,160 --> 00:16:50,940
the only scenario that I had that I have

229
00:16:50,940 --> 00:16:53,180
experienced in the last months were

230
00:16:53,180 --> 00:16:56,100
where we had a problem that actually

231
00:16:56,100 --> 00:16:58,320
balanced itself out after a while

232
00:16:58,320 --> 00:17:01,199
funny enough was somebody took like

233
00:17:01,199 --> 00:17:03,230
discs out of one chunk server and

234
00:17:03,230 --> 00:17:06,859
shoveled them into another chance ever

235
00:17:06,859 --> 00:17:12,750
that was tricky but it still managed to

236
00:17:12,750 --> 00:17:15,390
delete old versions start replicate

237
00:17:15,390 --> 00:17:17,369
stuff around and it balanced itself out

238
00:17:17,369 --> 00:17:18,990
I was pretty surprised that it managed

239
00:17:18,990 --> 00:17:24,089
to do that but it did so it's pretty

240
00:17:24,089 --> 00:17:26,510
robust

241
00:17:31,080 --> 00:17:36,730
anybody has any so yeah we we run like I

242
00:17:36,730 --> 00:17:40,950
said on on nearly everything I

243
00:17:40,950 --> 00:17:44,020
personally have tried PhD center of

244
00:17:44,020 --> 00:17:50,230
Debian Solaris what else oh I have a

245
00:17:50,230 --> 00:17:53,530
server and a client on the Mac there is

246
00:17:53,530 --> 00:17:57,580
a commercial Windows client for people

247
00:17:57,580 --> 00:18:01,409
that insist on that operating system I

248
00:18:03,240 --> 00:18:06,550
don't think that there's any platform

249
00:18:06,550 --> 00:18:08,620
that we couldn't support I know that

250
00:18:08,620 --> 00:18:12,090
there are people running it on arm

251
00:18:12,120 --> 00:18:17,320
there's a relatively slope a small

252
00:18:17,320 --> 00:18:18,700
community for that there's one

253
00:18:18,700 --> 00:18:20,650
University in Germany that wants to set

254
00:18:20,650 --> 00:18:25,600
up a rather large arm scenario I'm

255
00:18:25,600 --> 00:18:27,400
pretty interested how that will work

256
00:18:27,400 --> 00:18:34,540
with the new 64-bit aren't so if you

257
00:18:34,540 --> 00:18:38,140
have any other adventurous in unix-like

258
00:18:38,140 --> 00:18:40,930
operating system you would require is

259
00:18:40,930 --> 00:18:42,790
that if as on we can port that probably

260
00:18:42,790 --> 00:18:45,730
as well the FreeBSD port talked about

261
00:18:45,730 --> 00:18:48,150
three hours

262
00:18:50,020 --> 00:18:54,389
yeah so

263
00:18:57,179 --> 00:19:01,020
let me just show you

264
00:19:04,000 --> 00:19:10,290
I just connect the the demo computer I

265
00:19:10,290 --> 00:19:16,570
basically created a very small small

266
00:19:16,570 --> 00:19:23,280
setup to show how a desert if it's just

267
00:19:23,280 --> 00:19:26,940
get set up in a minute

268
00:19:33,020 --> 00:19:36,020
yeah

269
00:19:49,650 --> 00:19:53,809
have to wait for the network to wake up

270
00:20:06,130 --> 00:20:09,030
does that fit

271
00:20:30,280 --> 00:20:33,910
yes I basically set up a couple of

272
00:20:33,910 --> 00:20:44,560
containers in in proxmox to show if I've

273
00:20:44,560 --> 00:21:01,740
set up so all I have to do is I try just

274
00:21:01,740 --> 00:21:05,400
have to get that back

275
00:21:16,280 --> 00:21:18,320
I don't remember how inverted but I can

276
00:21:18,320 --> 00:21:21,250
at least make it bigger

277
00:21:29,260 --> 00:21:31,830
and

278
00:21:33,830 --> 00:21:39,000
that won't oh yeah but now I don't know

279
00:21:39,000 --> 00:21:44,240
where the truth yeah so is that readable

280
00:21:46,100 --> 00:21:50,250
yeah so basically we hard-coded some

281
00:21:50,250 --> 00:21:58,320
stuff if you don't set a name for the

282
00:21:58,320 --> 00:21:59,730
master server and the configuration

283
00:21:59,730 --> 00:22:02,790
files it will assume that it's called em

284
00:22:02,790 --> 00:22:05,370
FS masters so all you have to do if you

285
00:22:05,370 --> 00:22:07,740
have if you want to do a fast setup is

286
00:22:07,740 --> 00:22:11,460
put em FS master and your host file and

287
00:22:11,460 --> 00:22:13,560
point it to the IP of your metadata

288
00:22:13,560 --> 00:22:21,900
server right so basically

289
00:22:21,900 --> 00:22:29,510
VMFS master entry sets it up

290
00:22:31,340 --> 00:22:33,970
so

291
00:22:36,000 --> 00:22:37,990
yeah there's one thing I didn't talk

292
00:22:37,990 --> 00:22:41,890
about that you you can define a topology

293
00:22:41,890 --> 00:22:48,190
of your third scenario you can set which

294
00:22:48,190 --> 00:22:51,400
chunk servers should be preferred by

295
00:22:51,400 --> 00:22:55,360
which network segment so that way if you

296
00:22:55,360 --> 00:22:58,000
have a large complex network

297
00:22:58,000 --> 00:23:00,010
infrastructure you can make certain

298
00:23:00,010 --> 00:23:03,610
clients just talk preferably to certain

299
00:23:03,610 --> 00:23:07,000
time servers we have a customer that has

300
00:23:07,000 --> 00:23:09,430
a large rendering farm with a pretty

301
00:23:09,430 --> 00:23:14,320
chaotic network structure and since they

302
00:23:14,320 --> 00:23:16,090
are trying to keep copies of all the

303
00:23:16,090 --> 00:23:18,370
data on all the chunk servers so they

304
00:23:18,370 --> 00:23:22,230
are close to the to the rendering nodes

305
00:23:22,230 --> 00:23:25,420
they use topology to basically have one

306
00:23:25,420 --> 00:23:32,040
client always talk to one concern so

307
00:23:32,040 --> 00:23:36,030
what I basically do is I just I just

308
00:23:36,030 --> 00:23:41,140
copied the the sample files from the

309
00:23:41,140 --> 00:23:43,590
packages

310
00:24:01,020 --> 00:24:05,559
when I don't change anything I have to

311
00:24:05,559 --> 00:24:09,990
create an empty metadata file

312
00:24:19,220 --> 00:24:23,680
and can just start the metadata server

313
00:24:33,799 --> 00:24:36,610
check

314
00:24:43,150 --> 00:24:46,900
get this one again

315
00:24:58,149 --> 00:25:00,779
yeah

316
00:25:01,990 --> 00:25:07,179
and I and we have a very simple

317
00:25:11,510 --> 00:25:16,310
web interface that basically lets you

318
00:25:16,310 --> 00:25:22,160
monitor all the stuff limited but you

319
00:25:22,160 --> 00:25:24,920
can see you have a started it's a data

320
00:25:24,920 --> 00:25:27,220
server you can see how much RAM it has

321
00:25:27,220 --> 00:25:31,730
how much RAM it occupies all the meta

322
00:25:31,730 --> 00:25:34,970
data is kept in RAM while it's working

323
00:25:34,970 --> 00:25:38,840
so the amount of files you can you can

324
00:25:38,840 --> 00:25:40,970
store in the desired FS system is

325
00:25:40,970 --> 00:25:42,530
basically limited by the amount of RAM

326
00:25:42,530 --> 00:25:50,270
you put into your metadata yes so we

327
00:25:50,270 --> 00:25:52,430
have a metadata server basically running

328
00:25:52,430 --> 00:25:57,970
I will attach to chunk servers to it

329
00:25:58,210 --> 00:26:01,270
which is also quite simple

330
00:26:01,270 --> 00:26:03,770
so it's just one package it's called Lu

331
00:26:03,770 --> 00:26:04,940
31st chunk server

332
00:26:04,940 --> 00:26:09,200
I have created a directory for the

333
00:26:09,200 --> 00:26:13,700
chunks it's called dessert if s1 when I

334
00:26:13,700 --> 00:26:17,500
have two files to configure for that

335
00:26:21,679 --> 00:26:26,730
one is basically yes one is basically

336
00:26:26,730 --> 00:26:30,259
telling him where he can find it

337
00:26:35,670 --> 00:26:38,100
and the other one is a configuration

338
00:26:38,100 --> 00:26:40,020
file where I can keep the default values

339
00:26:40,020 --> 00:26:42,030
because I put em FS master into the host

340
00:26:42,030 --> 00:26:44,300
file

341
00:26:59,920 --> 00:27:01,750
and you can see I have a chunk server

342
00:27:01,750 --> 00:27:04,660
running with 4 gigabytes of available

343
00:27:04,660 --> 00:27:11,410
available space so adding another chunk

344
00:27:11,410 --> 00:27:13,270
server is just doing exactly the same

345
00:27:13,270 --> 00:27:17,580
and you can see in this example

346
00:27:17,580 --> 00:27:22,540
configuration file for the hard disk how

347
00:27:22,540 --> 00:27:24,430
you can remove for Hart if you just put

348
00:27:24,430 --> 00:27:27,190
a star in front and it will just

349
00:27:27,190 --> 00:27:29,890
redistribute all the chunks to different

350
00:27:29,890 --> 00:27:32,460
storage spaces

351
00:27:43,290 --> 00:27:47,910
we have our we we have our own protocol

352
00:27:47,910 --> 00:27:53,800
it's a few spaced client we are working

353
00:27:53,800 --> 00:27:57,310
on some other clients currently one is

354
00:27:57,310 --> 00:28:00,420
native client for qmo

355
00:28:00,420 --> 00:28:04,560
that should be released pretty soon

356
00:28:07,710 --> 00:28:11,890
another one is a relation interface for

357
00:28:11,890 --> 00:28:16,390
HDFS so that you can connect Hadoop

358
00:28:16,390 --> 00:28:20,140
light systems to it and there is a plan

359
00:28:20,140 --> 00:28:25,210
to release an NFS conversion so that you

360
00:28:25,210 --> 00:28:27,670
could locally connect by NFS and it

361
00:28:27,670 --> 00:28:32,970
would speak Lazar on the network side

362
00:28:39,780 --> 00:28:53,500
multi-tenancy what in which way so we

363
00:28:53,500 --> 00:28:58,750
have a full POSIX implementation and you

364
00:28:58,750 --> 00:29:03,790
can define rights for hosts per

365
00:29:03,790 --> 00:29:06,430
directory and for subdirectory it's

366
00:29:06,430 --> 00:29:08,290
basically similar how you would do an

367
00:29:08,290 --> 00:29:11,740
NFS setup you define on the master which

368
00:29:11,740 --> 00:29:13,720
part of your namespace you want to be

369
00:29:13,720 --> 00:29:17,790
available to which clients ability

370
00:29:21,520 --> 00:29:24,049
it won't be totally visible you can

371
00:29:24,049 --> 00:29:27,350
inhibit reads but I don't know if it

372
00:29:27,350 --> 00:29:29,270
will not show you that there is a

373
00:29:29,270 --> 00:29:40,400
directory available okay what universe

374
00:29:40,400 --> 00:29:47,750
are we using for metadata so it's in

375
00:29:47,750 --> 00:29:52,059
memory data structure created path

376
00:29:54,550 --> 00:29:57,550
C++

377
00:30:08,220 --> 00:30:10,990
depends it depends how many streams you

378
00:30:10,990 --> 00:30:13,450
have single-speed countries about 600

379
00:30:13,450 --> 00:30:17,590
megabytes the the hue ammo driver seems

380
00:30:17,590 --> 00:30:19,120
to be a bit faster has about seven

381
00:30:19,120 --> 00:30:21,070
hundred fifty megabytes in our last

382
00:30:21,070 --> 00:30:24,550
tests but that's per single stream so

383
00:30:24,550 --> 00:30:27,990
for example if you would do a VM hosting

384
00:30:27,990 --> 00:30:31,150
we usually need to run mounts per

385
00:30:31,150 --> 00:30:33,730
virtual machine and each mount would

386
00:30:33,730 --> 00:30:37,210
have 750 megawatts so yes you could

387
00:30:37,210 --> 00:30:38,830
saturate it but not for the single

388
00:30:38,830 --> 00:30:58,410
stream like like media if the if it's

389
00:30:58,410 --> 00:31:03,100
mail storage with single small files nor

390
00:31:03,100 --> 00:31:09,130
yet it's like we said before if it's

391
00:31:09,130 --> 00:31:12,280
under 64 K the fire will not be split so

392
00:31:12,280 --> 00:31:14,200
you will not really have distribution

393
00:31:14,200 --> 00:31:19,470
and the performance would go down

394
00:31:25,360 --> 00:31:34,880
any objects plus you care one thing yeah

395
00:31:34,880 --> 00:31:36,470
I don't have the clients out here but

396
00:31:36,470 --> 00:31:41,960
you can change the policy with one

397
00:31:41,960 --> 00:31:46,070
command on any objects so you can set a

398
00:31:46,070 --> 00:31:48,940
goal of two now for your directory and

399
00:31:48,940 --> 00:31:51,080
change it to the goal of three just

400
00:31:51,080 --> 00:31:52,640
saying there's not a fast set country

401
00:31:52,640 --> 00:31:54,950
and it will immediately start creating

402
00:31:54,950 --> 00:31:57,710
the next particular so you can move from

403
00:31:57,710 --> 00:32:03,260
ECE to +12 replication of five just for

404
00:32:03,260 --> 00:32:06,110
the one-liner which is quite interesting

405
00:32:06,110 --> 00:32:10,039
if you want to do backups if you have if

406
00:32:10,039 --> 00:32:11,659
you have chunk servers that are defined

407
00:32:11,659 --> 00:32:14,360
as tech drives you could just do a

408
00:32:14,360 --> 00:32:16,159
policy change on the directory and you

409
00:32:16,159 --> 00:32:18,200
would have automatic back ups to LTO

410
00:32:18,200 --> 00:32:20,470
tapes

411
00:32:23,250 --> 00:32:26,590
and you get it back by changing the

412
00:32:26,590 --> 00:32:29,080
policy on the directory with another

413
00:32:29,080 --> 00:32:38,220
life yes

414
00:32:38,220 --> 00:32:44,740
fires amount of files program I have a

415
00:32:44,740 --> 00:32:52,360
table but I don't remember one second I

416
00:32:52,360 --> 00:32:55,199
get it the tape

417
00:33:11,160 --> 00:33:14,160
yes

418
00:33:16,700 --> 00:33:23,520
let me go here so you have a there's a

419
00:33:23,520 --> 00:33:32,250
client the client has the config file

420
00:33:32,250 --> 00:33:33,990
where you basically define your mount

421
00:33:33,990 --> 00:33:35,940
points if you want you can just you can

422
00:33:35,940 --> 00:33:37,560
also do it on the command line

423
00:33:37,560 --> 00:33:43,760
I can type today anyway

424
00:33:43,760 --> 00:33:48,300
and basically all you have to do is if

425
00:33:48,300 --> 00:33:51,649
the directory exists yes

426
00:33:54,620 --> 00:33:58,770
again the it has to know where the EMFs

427
00:33:58,770 --> 00:34:01,590
matters if you use a different name for

428
00:34:01,590 --> 00:34:03,930
your metadata server you have to set it

429
00:34:03,930 --> 00:34:07,260
in the configuration file if not it

430
00:34:07,260 --> 00:34:12,510
works right out of the book and there's

431
00:34:12,510 --> 00:34:15,270
your new directory it's mounted and

432
00:34:15,270 --> 00:34:19,130
actually say we

433
00:34:27,850 --> 00:34:30,429
it has a goal of one so there's only one

434
00:34:30,429 --> 00:34:33,550
replica it doesn't really make sense to

435
00:34:33,550 --> 00:34:35,199
set a different goal now I just have one

436
00:34:35,199 --> 00:34:38,860
thanks overwrite setting a different

437
00:34:38,860 --> 00:34:44,860
goal would just be two three five ten to

438
00:34:44,860 --> 00:34:47,320
that password and it would distribute as

439
00:34:47,320 --> 00:34:49,680
many

440
00:35:00,550 --> 00:35:06,100
would yet and it would wait for you to

441
00:35:06,100 --> 00:35:08,860
add more self-service so once you add a

442
00:35:08,860 --> 00:35:10,540
new trunk server it would automatically

443
00:35:10,540 --> 00:35:22,980
starts are creating new chunks back yes

444
00:35:24,010 --> 00:35:28,090
it creates it creates dams the memory to

445
00:35:28,090 --> 00:35:31,510
disk every your trick how often do we

446
00:35:31,510 --> 00:35:35,730
dump the metadata to disk

447
00:35:41,349 --> 00:35:44,199
yeah so we create one dam per hour and

448
00:35:44,199 --> 00:35:45,670
you can set it up in the configuration

449
00:35:45,670 --> 00:35:46,660
to do it more often

450
00:35:46,660 --> 00:35:49,089
plus you can create so-called meta

451
00:35:49,089 --> 00:35:51,789
loggers that will constantly knock all

452
00:35:51,789 --> 00:35:59,489
changes to your metadata server yes

453
00:36:07,220 --> 00:36:26,880
integration test yes we mostly do load

454
00:36:26,880 --> 00:36:30,150
tests with any tool that I can find I

455
00:36:30,150 --> 00:36:34,050
mean it's like the the test for a three

456
00:36:34,050 --> 00:36:37,290
ten six was like I had about twelve

457
00:36:37,290 --> 00:36:39,270
chunk servers and I was bombarding it

458
00:36:39,270 --> 00:36:41,400
from multiple streams with IO materials

459
00:36:41,400 --> 00:36:44,100
own and FIO at the same time and then

460
00:36:44,100 --> 00:36:50,760
started kicking chunk servers up I think

461
00:36:50,760 --> 00:36:53,430
for for redundancy testing that's good

462
00:36:53,430 --> 00:36:57,930
enough constant hundred percent load is

463
00:36:57,930 --> 00:37:00,540
is always a nice test there is nothing

464
00:37:00,540 --> 00:37:04,370
that you can do more than that

465
00:37:07,260 --> 00:37:13,150
so we have members of the community that

466
00:37:13,150 --> 00:37:20,769
basically have tried it with we have our

467
00:37:20,769 --> 00:37:22,420
own system but that's the commercial

468
00:37:22,420 --> 00:37:26,829
solution that we invented that's based

469
00:37:26,829 --> 00:37:32,710
on the raft algorithm but it's your

470
00:37:32,710 --> 00:37:51,190
choice yes it's just a directory okay

471
00:37:51,190 --> 00:37:53,619
you have a performance impact on what

472
00:37:53,619 --> 00:37:58,990
you choose but it will always be in the

473
00:37:58,990 --> 00:38:01,299
replication I don't see I don't see

474
00:38:01,299 --> 00:38:03,279
really a big impact if you use

475
00:38:03,279 --> 00:38:05,109
replication but there will be a very big

476
00:38:05,109 --> 00:38:06,700
impact if you use the razor coding

477
00:38:06,700 --> 00:38:08,589
because your rights are paralyzed and

478
00:38:08,589 --> 00:38:10,059
you will always have the performance of

479
00:38:10,059 --> 00:38:13,740
the slowest chunk server in the right

480
00:38:13,740 --> 00:38:16,390
because the right will only be finished

481
00:38:16,390 --> 00:38:19,420
if all the chunk servers in that stripe

482
00:38:19,420 --> 00:38:27,730
set are done yes I actually have the

483
00:38:27,730 --> 00:38:29,589
same experience as the set guys that

484
00:38:29,589 --> 00:38:32,230
everything that starts with E X is not

485
00:38:32,230 --> 00:38:37,589
really a good choice we have quite

486
00:38:37,589 --> 00:38:41,380
nicely work to that with XSS and for

487
00:38:41,380 --> 00:38:43,569
very high performance we have such FS

488
00:38:43,569 --> 00:38:46,569
setups with all tuning that you can do

489
00:38:46,569 --> 00:38:50,380
there was the de pasión in limit is that

490
00:38:50,380 --> 00:38:52,119
you shouldn't fill your file system more

491
00:38:52,119 --> 00:38:54,640
than 80% because then your performance

492
00:38:54,640 --> 00:38:57,000
goes like

493
00:39:01,770 --> 00:39:05,260
okay I can't you I can answer any

494
00:39:05,260 --> 00:39:09,630
question but after that because tons of

495
00:39:11,250 --> 00:39:14,339
thank you

496
00:39:17,170 --> 00:39:20,539
[Applause]

