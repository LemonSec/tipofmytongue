1
00:00:11,250 --> 00:00:16,550
with a request and a few other things

2
00:00:16,550 --> 00:00:19,500
biggest difference for me is that they

3
00:00:19,500 --> 00:00:22,650
are fully open source so the Community

4
00:00:22,650 --> 00:00:24,539
Edition you can install by yourself and

5
00:00:24,539 --> 00:00:28,590
you have a fully open source version

6
00:00:28,590 --> 00:00:32,930
control software it's very nice for

7
00:00:32,930 --> 00:00:37,200
on-premise environments where companies

8
00:00:37,200 --> 00:00:39,510
are not necessarily very happy about

9
00:00:39,510 --> 00:00:41,969
pushing their code to various cloud

10
00:00:41,969 --> 00:00:45,149
environments or SAS products get lab

11
00:00:45,149 --> 00:00:48,949
makes a very nice on-prem alternative

12
00:00:48,949 --> 00:00:53,129
there's a Community Edition and the

13
00:00:53,129 --> 00:00:56,039
Enterprise Edition if you are at a

14
00:00:56,039 --> 00:00:57,600
company that has the financial means I

15
00:00:57,600 --> 00:00:58,739
would recommend you to go with the

16
00:00:58,739 --> 00:01:01,229
Enterprise Edition simply because in

17
00:01:01,229 --> 00:01:03,120
order for the Community Edition to exist

18
00:01:03,120 --> 00:01:04,860
people need to pay for the Enterprise

19
00:01:04,860 --> 00:01:09,240
Edition so we all benefit from that we

20
00:01:09,240 --> 00:01:11,880
are an enterprise user as well but we

21
00:01:11,880 --> 00:01:14,850
also use open source for the clients

22
00:01:14,850 --> 00:01:19,260
where that is the better option good lab

23
00:01:19,260 --> 00:01:22,830
CI is a continuous integration service

24
00:01:22,830 --> 00:01:24,450
the nice thing is that it's fully

25
00:01:24,450 --> 00:01:26,840
integrated with with gate lab itself so

26
00:01:26,840 --> 00:01:29,220
because of the fact that most of the

27
00:01:29,220 --> 00:01:31,230
time when you're doing some kind of CI

28
00:01:31,230 --> 00:01:35,010
it's very tightly coupled to your to the

29
00:01:35,010 --> 00:01:36,680
source code that you want to do CI on

30
00:01:36,680 --> 00:01:41,730
it's quite nice that Ghaleb CI is so

31
00:01:41,730 --> 00:01:46,500
closely closely coupled it's fully open

32
00:01:46,500 --> 00:01:49,020
source as I already said if you are

33
00:01:49,020 --> 00:01:51,090
already using gate lab SIA a good lab

34
00:01:51,090 --> 00:01:53,490
Community Edition all you need to do is

35
00:01:53,490 --> 00:01:56,810
check in and get get lab CID mo file and

36
00:01:56,810 --> 00:02:02,070
presto you're getting started it's not

37
00:02:02,070 --> 00:02:04,200
actually true you also need a runner but

38
00:02:04,200 --> 00:02:09,959
we'll get to that in a minute this

39
00:02:09,959 --> 00:02:12,000
minute

40
00:02:12,000 --> 00:02:15,930
and get lab CI runners are what is

41
00:02:15,930 --> 00:02:18,570
referred to as machines or environments

42
00:02:18,570 --> 00:02:22,610
that run your is a you guys okay yeah

43
00:02:22,610 --> 00:02:26,930
green shirts is uh they fixed trouble

44
00:02:26,930 --> 00:02:30,810
so the runners they they run your your

45
00:02:30,810 --> 00:02:33,210
builds there are many different

46
00:02:33,210 --> 00:02:35,220
different types of runners but basically

47
00:02:35,220 --> 00:02:37,260
a runner is some kind of environment

48
00:02:37,260 --> 00:02:40,230
that that picks up builds from get lab

49
00:02:40,230 --> 00:02:45,180
CI through the internal api's it can be

50
00:02:45,180 --> 00:02:48,780
specific to a to a project or serve any

51
00:02:48,780 --> 00:02:51,480
project so specific to a project is for

52
00:02:51,480 --> 00:02:53,610
instance if you have a certain code that

53
00:02:53,610 --> 00:02:55,260
has the condone Li works for Windows

54
00:02:55,260 --> 00:02:56,880
then you will have a runner that runs

55
00:02:56,880 --> 00:02:59,220
Windows and you won't want to run your

56
00:02:59,220 --> 00:03:02,340
other projects on them so see later on

57
00:03:02,340 --> 00:03:06,840
how we can determine which projects get

58
00:03:06,840 --> 00:03:09,660
run on which runners but in general

59
00:03:09,660 --> 00:03:12,150
runners are the isolated environments

60
00:03:12,150 --> 00:03:15,600
where you run your code there are a ton

61
00:03:15,600 --> 00:03:17,730
of different runners you can look them

62
00:03:17,730 --> 00:03:21,600
up but most useful at the moment

63
00:03:21,600 --> 00:03:23,400
depending on your project of course is a

64
00:03:23,400 --> 00:03:27,420
docker runner it just runs one or more

65
00:03:27,420 --> 00:03:29,820
docker containers that pick up builds

66
00:03:29,820 --> 00:03:31,709
execute a bunch of stuff and then throw

67
00:03:31,709 --> 00:03:35,670
it all away after it's done it's very

68
00:03:35,670 --> 00:03:40,709
easy to get started the the way the the

69
00:03:40,709 --> 00:03:43,500
standard Runner is set up with the gate

70
00:03:43,500 --> 00:03:46,739
lab is very easy to run however if

71
00:03:46,739 --> 00:03:47,880
you're going to run this in production

72
00:03:47,880 --> 00:03:50,100
for a longer period of time look into

73
00:03:50,100 --> 00:03:53,459
the actual docker installations

74
00:03:53,459 --> 00:03:56,910
underneath we had one problem where by

75
00:03:56,910 --> 00:03:58,170
default it was using one of those

76
00:03:58,170 --> 00:04:00,120
storage drivers where it can only eat

77
00:04:00,120 --> 00:04:04,010
space and it can never release space I

78
00:04:04,010 --> 00:04:07,709
won't get into that here but yeah so

79
00:04:07,709 --> 00:04:10,410
it's a it's useful to look into that

80
00:04:10,410 --> 00:04:12,709
I'd recommend running your runners on a

81
00:04:12,709 --> 00:04:15,750
separate VM so you have a one VM that

82
00:04:15,750 --> 00:04:17,970
runs the gate lab see get lab

83
00:04:17,970 --> 00:04:20,039
installation including get lab CI and

84
00:04:20,039 --> 00:04:23,030
then one VM that

85
00:04:23,199 --> 00:04:28,069
runners that's the easiest so the doctor

86
00:04:28,069 --> 00:04:30,860
runner basically goes against what the

87
00:04:30,860 --> 00:04:34,430
real idea of docker was and abuses all

88
00:04:34,430 --> 00:04:38,360
your your dhaka runners as throw away

89
00:04:38,360 --> 00:04:41,300
VMs which feels a bit awkward at first

90
00:04:41,300 --> 00:04:43,400
but it's actually quite nice after you

91
00:04:43,400 --> 00:04:45,440
get used to it because it just simply

92
00:04:45,440 --> 00:04:50,599
works I currently do a lot of operations

93
00:04:50,599 --> 00:04:54,020
stuff so a lot of puppet code and we use

94
00:04:54,020 --> 00:04:57,139
a lot of gillip CI for testing puppet

95
00:04:57,139 --> 00:04:58,280
code and it's actually really nice

96
00:04:58,280 --> 00:05:00,440
because the thing with puppet code is

97
00:05:00,440 --> 00:05:02,660
that it actually makes changes to a

98
00:05:02,660 --> 00:05:03,949
system if you're going to run anything

99
00:05:03,949 --> 00:05:07,400
so you want these kind of throwaway

100
00:05:07,400 --> 00:05:09,139
environments because you don't want to

101
00:05:09,139 --> 00:05:10,639
use it twice you want to start with the

102
00:05:10,639 --> 00:05:12,710
same baseline every time for I guess for

103
00:05:12,710 --> 00:05:13,909
web applications that's a little bit

104
00:05:13,909 --> 00:05:15,320
different because they usually don't

105
00:05:15,320 --> 00:05:17,570
make that many changes to the actual

106
00:05:17,570 --> 00:05:20,240
system underneath but yeah in our case

107
00:05:20,240 --> 00:05:26,180
it's quite important so as I said the

108
00:05:26,180 --> 00:05:27,440
only thing you need to do is in your

109
00:05:27,440 --> 00:05:31,880
gate lab project which is the same as a

110
00:05:31,880 --> 00:05:35,000
as a how to set at a github project or a

111
00:05:35,000 --> 00:05:38,300
bitbucket project whatever so in your

112
00:05:38,300 --> 00:05:39,620
project in a root of your project you

113
00:05:39,620 --> 00:05:41,479
check in a file called git lab

114
00:05:41,479 --> 00:05:45,680
CI ml and here on the right we see the

115
00:05:45,680 --> 00:05:49,009
simplest one of the simplest versions of

116
00:05:49,009 --> 00:05:52,490
what you could be doing so we're we're

117
00:05:52,490 --> 00:05:53,870
choosing a docker image here this

118
00:05:53,870 --> 00:05:55,610
specifies which image where we're

119
00:05:55,610 --> 00:05:58,509
running just comes from the docker hub

120
00:05:58,509 --> 00:06:02,440
and then we have one job called test

121
00:06:02,440 --> 00:06:04,940
here this label can be anything you want

122
00:06:04,940 --> 00:06:07,699
so if you wanted to be your mother's

123
00:06:07,699 --> 00:06:10,729
name that's totally fine it's probably

124
00:06:10,729 --> 00:06:12,229
more convenient to use something that

125
00:06:12,229 --> 00:06:15,530
actually means anything but hey and then

126
00:06:15,530 --> 00:06:18,159
in its simplest form it has a script

127
00:06:18,159 --> 00:06:21,380
parameter and that just has a number of

128
00:06:21,380 --> 00:06:22,550
statements that you want it to execute

129
00:06:22,550 --> 00:06:24,820
in this case we'll do a bundle install

130
00:06:24,820 --> 00:06:28,460
and then a bundle animal do a rake lint

131
00:06:28,460 --> 00:06:31,370
and a rake syntax tasks this was taken

132
00:06:31,370 --> 00:06:33,199
from one of our puppet projects but you

133
00:06:33,199 --> 00:06:35,330
get the point

134
00:06:35,330 --> 00:06:38,910
so once you've checked this into your

135
00:06:38,910 --> 00:06:42,810
repository from that moment on for every

136
00:06:42,810 --> 00:06:47,370
push to the branch that has this a file

137
00:06:47,370 --> 00:06:50,880
in it it'll run your billed for every

138
00:06:50,880 --> 00:06:54,090
merge request it will also run but you

139
00:06:54,090 --> 00:06:57,389
have to be understanding that your gait

140
00:06:57,389 --> 00:06:59,880
lab CI can be different between branches

141
00:06:59,880 --> 00:07:01,380
I wouldn't necessarily recommend doing

142
00:07:01,380 --> 00:07:04,470
that but you'll notice it when you make

143
00:07:04,470 --> 00:07:06,810
changes to a gait lab CI file and you'll

144
00:07:06,810 --> 00:07:08,580
probably have it sitting in a topic

145
00:07:08,580 --> 00:07:10,860
branch first which gets gets a merge

146
00:07:10,860 --> 00:07:12,720
request and until that is merged you

147
00:07:12,720 --> 00:07:16,130
have two different and gillip CI files

148
00:07:16,130 --> 00:07:18,389
so you have to be a bit aware of what

149
00:07:18,389 --> 00:07:20,190
it's actually running it's not a big

150
00:07:20,190 --> 00:07:23,610
deal but you could intentionally abuse

151
00:07:23,610 --> 00:07:24,930
that if you wanted to if you have some

152
00:07:24,930 --> 00:07:27,330
kind of a specific situation but I

153
00:07:27,330 --> 00:07:32,610
haven't really run into that so jobs

154
00:07:32,610 --> 00:07:35,520
this little test here is a basically a

155
00:07:35,520 --> 00:07:40,380
job name so the jobs can be run in all

156
00:07:40,380 --> 00:07:42,690
of these different ways as I said these

157
00:07:42,690 --> 00:07:44,490
are these are basically the runners you

158
00:07:44,490 --> 00:07:45,870
could run it locally but then you're

159
00:07:45,870 --> 00:07:49,200
screwing with your gait lab the VM that

160
00:07:49,200 --> 00:07:50,910
get lab runs on so I wouldn't recommend

161
00:07:50,910 --> 00:07:52,289
that

162
00:07:52,289 --> 00:07:56,430
and then varying degrees of complexity

163
00:07:56,430 --> 00:08:00,360
that also provide flexibility you can

164
00:08:00,360 --> 00:08:02,280
even connect to a remote SSH server if

165
00:08:02,280 --> 00:08:03,660
you really need to run it on that

166
00:08:03,660 --> 00:08:05,430
specific machine because I don't know it

167
00:08:05,430 --> 00:08:06,930
has an IP address or it has something

168
00:08:06,930 --> 00:08:09,210
else that it has to be running on that

169
00:08:09,210 --> 00:08:12,740
machine and that's also totally possible

170
00:08:12,740 --> 00:08:17,039
as you see here though we have now split

171
00:08:17,039 --> 00:08:21,660
up our our git lab CI file into multiple

172
00:08:21,660 --> 00:08:27,720
jobs so it's doing exactly the same as

173
00:08:27,720 --> 00:08:29,220
what it was doing here a bundle install

174
00:08:29,220 --> 00:08:32,099
a rake lint and a rake syntax there are

175
00:08:32,099 --> 00:08:34,708
two good reasons why you want to keep

176
00:08:34,708 --> 00:08:37,940
your jobs as small as possible

177
00:08:37,940 --> 00:08:41,080
the first one is because you

178
00:08:41,080 --> 00:08:45,010
can then how to say that parallel these

179
00:08:45,010 --> 00:08:47,590
jobs can now run in parallel so if you

180
00:08:47,590 --> 00:08:49,900
have multiple runners available these

181
00:08:49,900 --> 00:08:51,490
jobs can run in parallel cutting your

182
00:08:51,490 --> 00:08:53,830
build time in theoretically half it

183
00:08:53,830 --> 00:08:55,780
won't be exactly half but cutting your

184
00:08:55,780 --> 00:08:57,700
build time and if you multiply this by a

185
00:08:57,700 --> 00:09:01,200
lot that will save you a bunch of time

186
00:09:01,200 --> 00:09:04,960
so the first reason is to enable

187
00:09:04,960 --> 00:09:10,480
parallel parallelization and the second

188
00:09:10,480 --> 00:09:12,580
reason is that if something goes wrong

189
00:09:12,580 --> 00:09:14,890
with a with a job it's much nicer to

190
00:09:14,890 --> 00:09:18,160
have a very specific place to go in

191
00:09:18,160 --> 00:09:21,340
search you'll have to dive into the the

192
00:09:21,340 --> 00:09:23,950
build log anyway but if you already know

193
00:09:23,950 --> 00:09:26,290
that you failed against rakes in text

194
00:09:26,290 --> 00:09:28,360
and you know exactly like this is where

195
00:09:28,360 --> 00:09:32,800
the the problem is going to be one more

196
00:09:32,800 --> 00:09:34,330
thing that we see here is the before

197
00:09:34,330 --> 00:09:38,770
script section where before script is a

198
00:09:38,770 --> 00:09:40,720
special it's not a job this is a special

199
00:09:40,720 --> 00:09:45,190
configuration parameter which runs a

200
00:09:45,190 --> 00:09:47,110
bundle install or actually whatever is

201
00:09:47,110 --> 00:09:49,480
in the before script is run before the

202
00:09:49,480 --> 00:09:52,210
script of every job it's unimaginable

203
00:09:52,210 --> 00:09:57,760
how how difficult this is but it's kind

204
00:09:57,760 --> 00:09:59,830
of self-explanatory and the before

205
00:09:59,830 --> 00:10:02,860
script runs before every job you see

206
00:10:02,860 --> 00:10:05,650
that I created the names of the jobs

207
00:10:05,650 --> 00:10:09,460
here using job : test : syntax it's not

208
00:10:09,460 --> 00:10:10,840
actually necessary you could just call

209
00:10:10,840 --> 00:10:13,780
this job syntax but because we have

210
00:10:13,780 --> 00:10:15,910
things that are jobs and things that are

211
00:10:15,910 --> 00:10:18,580
not jobs in the gate lab CI file I find

212
00:10:18,580 --> 00:10:22,000
it very convenient to prefix all the

213
00:10:22,000 --> 00:10:24,760
jobs with job and later on we'll see

214
00:10:24,760 --> 00:10:28,320
that this syntax job runs in the test

215
00:10:28,320 --> 00:10:31,630
environment so I like to call my jobs

216
00:10:31,630 --> 00:10:35,170
job like literally the word job then the

217
00:10:35,170 --> 00:10:36,340
name of the environment and then the

218
00:10:36,340 --> 00:10:37,900
name of the job so that it becomes more

219
00:10:37,900 --> 00:10:40,300
easy to for you to grasp what runs where

220
00:10:40,300 --> 00:10:45,780
and and when

221
00:10:47,670 --> 00:10:51,670
so if you do that you can create a nice

222
00:10:51,670 --> 00:10:53,619
little pipeline so you have multiple

223
00:10:53,619 --> 00:10:55,660
jobs and you can create a nice little

224
00:10:55,660 --> 00:10:58,059
pipeline so these are all individual

225
00:10:58,059 --> 00:11:00,699
jobs and get lab creates this overview

226
00:11:00,699 --> 00:11:03,910
for you automatically we'll see in a

227
00:11:03,910 --> 00:11:05,529
minute how these are different stages

228
00:11:05,529 --> 00:11:09,699
and how to match all of these together

229
00:11:09,699 --> 00:11:13,959
but after a build has passed you you get

230
00:11:13,959 --> 00:11:15,819
your pipeline actually while it's

231
00:11:15,819 --> 00:11:17,110
running you can see this pipeline as

232
00:11:17,110 --> 00:11:18,339
well you can see the progress and you

233
00:11:18,339 --> 00:11:20,470
can see the jobs completing or not

234
00:11:20,470 --> 00:11:24,490
completing and you'll see little green

235
00:11:24,490 --> 00:11:26,319
checkmarks once a build has been

236
00:11:26,319 --> 00:11:27,670
completed you can see that it's in

237
00:11:27,670 --> 00:11:29,499
progress you can click on it and see the

238
00:11:29,499 --> 00:11:35,129
build log getting created all of that

239
00:11:35,129 --> 00:11:38,709
the this is a link to the commits that

240
00:11:38,709 --> 00:11:44,949
created the that's being tested here you

241
00:11:44,949 --> 00:11:46,509
see one special thing that you probably

242
00:11:46,509 --> 00:11:50,019
noticed a red cross but it's continuing

243
00:11:50,019 --> 00:11:52,689
anyway it's a special feature I won't

244
00:11:52,689 --> 00:11:54,309
dive into too much but you can set

245
00:11:54,309 --> 00:11:57,910
certain jobs to allow them to fail so

246
00:11:57,910 --> 00:11:59,439
it's okay that it doesn't build on

247
00:11:59,439 --> 00:12:01,019
Windows because who wants to know wait

248
00:12:01,019 --> 00:12:03,850
it's okay there's a fails on Windows for

249
00:12:03,850 --> 00:12:05,470
whatever the specific reason is this is

250
00:12:05,470 --> 00:12:10,439
actually the pipeline of the gate lab CI

251
00:12:10,439 --> 00:12:12,910
multi Runner I think the docker runner

252
00:12:12,910 --> 00:12:15,279
for a gate lab see I just made a

253
00:12:15,279 --> 00:12:16,569
screenshot of that to show you how

254
00:12:16,569 --> 00:12:22,029
pipeline looks so this was really nice

255
00:12:22,029 --> 00:12:24,100
this bundle install thing but it has a

256
00:12:24,100 --> 00:12:24,879
problem

257
00:12:24,879 --> 00:12:28,259
does anybody know what the problem is

258
00:12:30,569 --> 00:12:32,860
imagine we're running this a thousand

259
00:12:32,860 --> 00:12:35,369
times a day

260
00:12:37,480 --> 00:12:40,320
sorry

261
00:12:41,790 --> 00:12:44,350
exactly so we're doing this bundle

262
00:12:44,350 --> 00:12:47,260
install before this job before this job

263
00:12:47,260 --> 00:12:50,410
times a thousand that just adds up

264
00:12:50,410 --> 00:12:53,230
we could easily reduce that amount of

265
00:12:53,230 --> 00:12:55,930
time and spent on that by using what is

266
00:12:55,930 --> 00:13:01,810
called artifacts and dependencies so an

267
00:13:01,810 --> 00:13:05,110
artifact a job can export an artifact

268
00:13:05,110 --> 00:13:07,090
which is just a bunch of files that are

269
00:13:07,090 --> 00:13:09,460
created by that job or maybe not created

270
00:13:09,460 --> 00:13:11,560
by their job but usually created by that

271
00:13:11,560 --> 00:13:16,170
job that can then be used in subsequent

272
00:13:16,170 --> 00:13:20,380
jobs throughout the pipeline so exactly

273
00:13:20,380 --> 00:13:22,000
why would we run bundle install every

274
00:13:22,000 --> 00:13:23,920
time it doesn't really make any sense

275
00:13:23,920 --> 00:13:26,050
if you run bundle install with - -

276
00:13:26,050 --> 00:13:30,610
deployment it'll install all the gems in

277
00:13:30,610 --> 00:13:34,240
the directory where your gem file is in

278
00:13:34,240 --> 00:13:37,960
a subdirectory called vendor so we've

279
00:13:37,960 --> 00:13:39,760
changed the script a little bit we make

280
00:13:39,760 --> 00:13:41,620
it bundle install - - deployment and

281
00:13:41,620 --> 00:13:48,640
then we create artifacts from the vendor

282
00:13:48,640 --> 00:13:50,200
path so everything is in the vendor path

283
00:13:50,200 --> 00:13:52,510
well after this job is done we zipped up

284
00:13:52,510 --> 00:13:57,580
and sent to the ticket lab where this

285
00:13:57,580 --> 00:13:59,830
job then downloads it because these jobs

286
00:13:59,830 --> 00:14:01,330
can actually be running on different

287
00:14:01,330 --> 00:14:03,190
runners on different physical machines

288
00:14:03,190 --> 00:14:04,810
and if acun different virtual machines

289
00:14:04,810 --> 00:14:07,500
on different docker ho docker instances

290
00:14:07,500 --> 00:14:11,760
so they're communicated back and forth

291
00:14:12,030 --> 00:14:14,350
you want to make sure that you set this

292
00:14:14,350 --> 00:14:19,120
expire in flag because by default expiry

293
00:14:19,120 --> 00:14:23,800
is never and that means that all your

294
00:14:23,800 --> 00:14:25,690
artifacts are going to be on your gate

295
00:14:25,690 --> 00:14:28,480
lab server forever and ever eternally

296
00:14:28,480 --> 00:14:32,370
and I just use a bunch of space so

297
00:14:32,370 --> 00:14:35,250
expired them in whatever is convenient

298
00:14:35,250 --> 00:14:38,380
after this time it would be deleted but

299
00:14:38,380 --> 00:14:40,090
this is a vendor it's a bunch of

300
00:14:40,090 --> 00:14:42,280
downloaded gem so nobody really cares

301
00:14:42,280 --> 00:14:43,990
about them after the pipeline has been

302
00:14:43,990 --> 00:14:46,930
completed it does mean that the pipeline

303
00:14:46,930 --> 00:14:48,940
has to complete within a day but I'm

304
00:14:48,940 --> 00:14:51,340
willing to gamble that that is actually

305
00:14:51,340 --> 00:14:53,670
happening

306
00:14:54,810 --> 00:15:00,460
so this job exports the artifacts but

307
00:15:00,460 --> 00:15:02,200
then obviously we need to say in these

308
00:15:02,200 --> 00:15:04,830
jobs that they are actually depending on

309
00:15:04,830 --> 00:15:08,320
the original on the artifacts job so we

310
00:15:08,320 --> 00:15:11,700
see that now I've created a job in the

311
00:15:11,700 --> 00:15:15,220
called job build artifacts and now here

312
00:15:15,220 --> 00:15:18,279
the other two jobs have a dependency on

313
00:15:18,279 --> 00:15:20,320
job build artifacts and because of the

314
00:15:20,320 --> 00:15:22,150
dependency they automatically download

315
00:15:22,150 --> 00:15:24,310
the artifacts from the job that they are

316
00:15:24,310 --> 00:15:29,050
depending on and the first line is

317
00:15:29,050 --> 00:15:35,200
bundle install - deployment which wants

318
00:15:35,200 --> 00:15:36,700
to go through my gem file and download

319
00:15:36,700 --> 00:15:38,470
all the gems that are in there except

320
00:15:38,470 --> 00:15:40,420
that it sees it's getting this vendor

321
00:15:40,420 --> 00:15:44,470
directory from the from the artifacts

322
00:15:44,470 --> 00:15:48,160
job so it automatically sees that all of

323
00:15:48,160 --> 00:15:49,779
the gems are already there and it

324
00:15:49,779 --> 00:15:52,480
doesn't need to do anything and then we

325
00:15:52,480 --> 00:15:54,700
can continue as normal with the with the

326
00:15:54,700 --> 00:15:58,570
other jobs this example is obviously

327
00:15:58,570 --> 00:16:00,459
specific to ruby but you can hopefully

328
00:16:00,459 --> 00:16:03,160
imagine how this works for whatever

329
00:16:03,160 --> 00:16:06,130
language you're in whatever situation

330
00:16:06,130 --> 00:16:07,540
you're in it's a very very flexible

331
00:16:07,540 --> 00:16:16,720
system so stages allow you to create

332
00:16:16,720 --> 00:16:19,660
different you know stages of a of a

333
00:16:19,660 --> 00:16:22,180
pipeline it's what you saw here these

334
00:16:22,180 --> 00:16:23,500
are stages pre-built

335
00:16:23,500 --> 00:16:28,060
just bill package release and we define

336
00:16:28,060 --> 00:16:29,200
them like this these are actually the

337
00:16:29,200 --> 00:16:30,760
default stages but we've mentioned them

338
00:16:30,760 --> 00:16:32,950
here for clarity and you can add as many

339
00:16:32,950 --> 00:16:36,610
stages as you want the stages will be

340
00:16:36,610 --> 00:16:39,730
run through in the order that you define

341
00:16:39,730 --> 00:16:41,140
them here so if you put test before

342
00:16:41,140 --> 00:16:42,940
build then that's the then first all the

343
00:16:42,940 --> 00:16:45,339
jobs in test stage will be done and then

344
00:16:45,339 --> 00:16:50,230
all the ones in the build stage jobs of

345
00:16:50,230 --> 00:16:52,300
the same stage that don't have

346
00:16:52,300 --> 00:16:57,330
dependencies can run in parallel so

347
00:16:57,330 --> 00:17:00,130
again referring back to this these four

348
00:17:00,130 --> 00:17:03,339
jobs will all run in parallel if they

349
00:17:03,339 --> 00:17:05,359
can

350
00:17:05,359 --> 00:17:09,059
which reduces our our time significantly

351
00:17:09,059 --> 00:17:13,490
from running them all in sequence so

352
00:17:13,490 --> 00:17:15,240
it's very simple

353
00:17:15,240 --> 00:17:17,339
all we need to do is in each job

354
00:17:17,339 --> 00:17:20,419
determine the stage that it's in build

355
00:17:20,419 --> 00:17:26,429
test test the deploy stage I left it out

356
00:17:26,429 --> 00:17:29,610
because it's short enough already

357
00:17:29,610 --> 00:17:32,779
is it readable for the guys in the back

358
00:17:32,779 --> 00:17:34,830
yeah I was wondering while I was making

359
00:17:34,830 --> 00:17:37,230
the slides it's gonna depend on the size

360
00:17:37,230 --> 00:17:42,389
of the screen all I put up the slides in

361
00:17:42,389 --> 00:17:46,049
the Fossum website as well after this so

362
00:17:46,049 --> 00:17:48,769
he can take a look there

363
00:17:48,769 --> 00:17:52,860
so that's stages fairly straightforward

364
00:17:52,860 --> 00:17:57,600
also limiting builds I don't know how am

365
00:17:57,600 --> 00:18:05,940
i doing on time what's perfect so

366
00:18:05,940 --> 00:18:08,549
sometimes you want certain builds to not

367
00:18:08,549 --> 00:18:12,169
run sorry certain jobs to not always run

368
00:18:12,169 --> 00:18:16,139
you can think of jobs that take a lot of

369
00:18:16,139 --> 00:18:18,779
resources either lots of time or lots of

370
00:18:18,779 --> 00:18:21,509
processing power and then you might want

371
00:18:21,509 --> 00:18:24,649
to think hey I only want to run these

372
00:18:24,649 --> 00:18:27,899
when I'm actually deploying to do in a

373
00:18:27,899 --> 00:18:30,120
staging or a production environment or I

374
00:18:30,120 --> 00:18:32,210
want to only run these for the master

375
00:18:32,210 --> 00:18:36,389
branch for that we have two options we

376
00:18:36,389 --> 00:18:39,870
have only and we have accept and as you

377
00:18:39,870 --> 00:18:43,169
might expect only defines a list of get

378
00:18:43,169 --> 00:18:45,389
reps for which the build is created and

379
00:18:45,389 --> 00:18:48,779
accept a list of get reps for which it's

380
00:18:48,779 --> 00:18:57,299
not created so in this case we will only

381
00:18:57,299 --> 00:19:02,000
run this for the for the master branch

382
00:19:02,000 --> 00:19:05,850
except you wouldn't actually use this

383
00:19:05,850 --> 00:19:10,950
combination like this together but so

384
00:19:10,950 --> 00:19:13,139
you can actually so it works on git ref

385
00:19:13,139 --> 00:19:15,570
so it works on tags as well as on branch

386
00:19:15,570 --> 00:19:18,349
names so you could actually have

387
00:19:18,349 --> 00:19:20,659
branch is a branch name here so you run

388
00:19:20,659 --> 00:19:22,159
it only for master branch

389
00:19:22,159 --> 00:19:25,700
except for bills that are tagged as

390
00:19:25,700 --> 00:19:32,119
developed there is also a special key

391
00:19:32,119 --> 00:19:33,889
that you can put here and I forget what

392
00:19:33,889 --> 00:19:38,049
it's called a special key which only

393
00:19:38,049 --> 00:19:41,059
runs this job had specifically requested

394
00:19:41,059 --> 00:19:46,839
through the API triggers that's the one

395
00:19:46,839 --> 00:19:49,429
thank you

396
00:19:49,429 --> 00:19:53,269
so the use case for that and my pain is

397
00:19:53,269 --> 00:19:55,039
relatively limited but I presume it's

398
00:19:55,039 --> 00:19:57,709
there because that's why it's built but

399
00:19:57,709 --> 00:20:01,129
yeah we also see here allow failure this

400
00:20:01,129 --> 00:20:02,839
is that tag that I was mentioning that

401
00:20:02,839 --> 00:20:06,049
allows this windows build this windows a

402
00:20:06,049 --> 00:20:08,419
job to finish and the rest of the

403
00:20:08,419 --> 00:20:16,609
pipeline can continue anyway selecting

404
00:20:16,609 --> 00:20:23,419
specific runners so you can use tags in

405
00:20:23,419 --> 00:20:27,649
a job to make sure that a job only runs

406
00:20:27,649 --> 00:20:29,809
on a specific runner

407
00:20:29,809 --> 00:20:33,409
so as you're registering a runner for

408
00:20:33,409 --> 00:20:34,879
instance if you're registering a Windows

409
00:20:34,879 --> 00:20:37,309
machine or sorry a Windows runner

410
00:20:37,309 --> 00:20:39,169
you can say hey you can tag it with

411
00:20:39,169 --> 00:20:42,589
Windows and then in your jobs you can

412
00:20:42,589 --> 00:20:44,479
tag your Windows jobs with Windows and

413
00:20:44,479 --> 00:20:46,519
nothing else will run on those Machir on

414
00:20:46,519 --> 00:20:49,700
those runners except for jobs that have

415
00:20:49,700 --> 00:20:55,789
been tagged Windows now you can have

416
00:20:55,789 --> 00:20:58,549
multiple tags so whatever you it's

417
00:20:58,549 --> 00:21:00,679
fairly a flexible system you see them

418
00:21:00,679 --> 00:21:03,159
here as well

419
00:21:07,370 --> 00:21:10,830
using this system you can you can do

420
00:21:10,830 --> 00:21:15,120
things that not only for for Windows and

421
00:21:15,120 --> 00:21:19,190
non Windows but also for if you have

422
00:21:19,190 --> 00:21:22,289
runners running in in different cloud

423
00:21:22,289 --> 00:21:23,669
environments for instance they won't

424
00:21:23,669 --> 00:21:25,950
necessarily always be able to run the

425
00:21:25,950 --> 00:21:29,669
same kind of jobs so you can you can

426
00:21:29,669 --> 00:21:32,789
very fairly flexible define here which

427
00:21:32,789 --> 00:21:39,570
jobs can run where manual build a small

428
00:21:39,570 --> 00:21:42,779
but very important introduction and that

429
00:21:42,779 --> 00:21:44,580
makes for a nice finish

430
00:21:44,580 --> 00:21:49,039
so manual builds are very simple but

431
00:21:49,039 --> 00:21:53,100
they will create this little play button

432
00:21:53,100 --> 00:21:56,309
here and the only way to run this build

433
00:21:56,309 --> 00:22:00,390
this job is by clicking that button this

434
00:22:00,390 --> 00:22:02,460
can be very useful for this kind of

435
00:22:02,460 --> 00:22:03,690
setup where you want to test and build

436
00:22:03,690 --> 00:22:05,490
and deploy to staging you don't care as

437
00:22:05,490 --> 00:22:07,380
as long as the previous jobs all

438
00:22:07,380 --> 00:22:09,860
complete successfully then let's go and

439
00:22:09,860 --> 00:22:13,950
deploy to staging but the actual deploy

440
00:22:13,950 --> 00:22:16,380
to production you want a human being to

441
00:22:16,380 --> 00:22:18,360
actually press that button and say hey

442
00:22:18,360 --> 00:22:21,090
let's go and deploy this

443
00:22:21,090 --> 00:22:24,720
so you said manual to true I didn't

444
00:22:24,720 --> 00:22:28,620
actually include the I'd say that the

445
00:22:28,620 --> 00:22:30,419
the parameter but it's literally called

446
00:22:30,419 --> 00:22:32,760
manual and you set it to true I think

447
00:22:32,760 --> 00:22:34,789
you can figure it out

448
00:22:34,789 --> 00:22:38,909
if you set that up then your build will

449
00:22:38,909 --> 00:22:42,720
be manually deployed only so your job

450
00:22:42,720 --> 00:22:45,000
will only be executed when you manually

451
00:22:45,000 --> 00:22:48,090
press that red button we use that for

452
00:22:48,090 --> 00:22:51,960
exactly this this set up so we have some

453
00:22:51,960 --> 00:22:54,390
some puppet repositories and we don't

454
00:22:54,390 --> 00:22:56,909
care about puppet code going to staging

455
00:22:56,909 --> 00:23:00,090
server and that's totally fine but for

456
00:23:00,090 --> 00:23:02,429
puppet code to go to production server

457
00:23:02,429 --> 00:23:06,570
requires all kinds of unfortunate

458
00:23:06,570 --> 00:23:10,620
approvals from people but once they are

459
00:23:10,620 --> 00:23:13,200
there then somebody can simply press

460
00:23:13,200 --> 00:23:14,580
this button so that nobody has to

461
00:23:14,580 --> 00:23:17,520
actually touch the production server

462
00:23:17,520 --> 00:23:19,860
and it becomes really nice if you couple

463
00:23:19,860 --> 00:23:24,050
this with for instance LDAP

464
00:23:24,050 --> 00:23:26,670
authentication for gitlab then you can

465
00:23:26,670 --> 00:23:29,970
really closely determine who can deploy

466
00:23:29,970 --> 00:23:36,600
to your production environments secret

467
00:23:36,600 --> 00:23:39,900
variables needs a little bit of work in

468
00:23:39,900 --> 00:23:44,340
my opinion but it's already there so

469
00:23:44,340 --> 00:23:46,620
sometimes you have things that you want

470
00:23:46,620 --> 00:23:55,050
to not show in your gait lab CI Yama

471
00:23:55,050 --> 00:23:58,620
file so for instance passwords to places

472
00:23:58,620 --> 00:24:02,730
or API keys etc etc you can have your

473
00:24:02,730 --> 00:24:05,160
whole project be open source but it's

474
00:24:05,160 --> 00:24:06,929
really did would be convenient to not

475
00:24:06,929 --> 00:24:10,670
have your AWS access secrets

476
00:24:10,670 --> 00:24:15,540
checked into your gait lab CI file for

477
00:24:15,540 --> 00:24:18,750
this there are secret variables there on

478
00:24:18,750 --> 00:24:21,450
the on the get lab project level so in

479
00:24:21,450 --> 00:24:23,670
your project you determine you define

480
00:24:23,670 --> 00:24:27,059
this variable has this value and then in

481
00:24:27,059 --> 00:24:31,020
your gait lab CI llamo you can just use

482
00:24:31,020 --> 00:24:35,400
them as a variable to that will

483
00:24:35,400 --> 00:24:36,809
automatically get the value from the

484
00:24:36,809 --> 00:24:39,330
from the secret variable from the

485
00:24:39,330 --> 00:24:42,809
project the downside is that currently

486
00:24:42,809 --> 00:24:46,020
they are not masked and will just show

487
00:24:46,020 --> 00:24:48,030
up in the build log so if you are using

488
00:24:48,030 --> 00:24:49,860
I don't know when it'll be ask

489
00:24:49,860 --> 00:24:51,929
credentials in your that are actually a

490
00:24:51,929 --> 00:24:54,420
secret variable in your project if

491
00:24:54,420 --> 00:24:58,950
something in your build prints those

492
00:24:58,950 --> 00:25:02,940
variables so to the log they will just

493
00:25:02,940 --> 00:25:06,150
show up so it's kind of a dangerous

494
00:25:06,150 --> 00:25:07,800
thing at the moment you have to be

495
00:25:07,800 --> 00:25:10,740
really careful about this there is a an

496
00:25:10,740 --> 00:25:14,280
issue open for this which is developing

497
00:25:14,280 --> 00:25:17,490
slowly but nicely and I'm sure that not

498
00:25:17,490 --> 00:25:18,900
too

499
00:25:18,900 --> 00:25:21,660
long in the future we will have a

500
00:25:21,660 --> 00:25:23,490
solution for this we're automatically

501
00:25:23,490 --> 00:25:27,150
the build log will not contain and these

502
00:25:27,150 --> 00:25:35,390
things to go a little bit more advanced

503
00:25:35,390 --> 00:25:39,000
you'll fairly quickly probably run into

504
00:25:39,000 --> 00:25:41,550
a place where you say hey but I want

505
00:25:41,550 --> 00:25:44,960
access to this private repository and

506
00:25:44,960 --> 00:25:49,290
the to get the docker runner or the

507
00:25:49,290 --> 00:25:51,540
runner the gillip CI runner does not

508
00:25:51,540 --> 00:25:54,210
have special privileges to access your

509
00:25:54,210 --> 00:25:58,170
gait lab instance it only has the

510
00:25:58,170 --> 00:26:03,780
specific commits that you are testing at

511
00:26:03,780 --> 00:26:07,170
that moment so if you want to do things

512
00:26:07,170 --> 00:26:11,460
with in this case SSH for instance

513
00:26:11,460 --> 00:26:13,320
private repositories then you'll have to

514
00:26:13,320 --> 00:26:17,310
get a bit creative to be able to to get

515
00:26:17,310 --> 00:26:20,720
that working how does it work

516
00:26:20,720 --> 00:26:24,080
so first you create a new message keeper

517
00:26:24,080 --> 00:26:29,250
and at the private key as a secret

518
00:26:29,250 --> 00:26:34,100
variable inside the the project the the

519
00:26:34,100 --> 00:26:39,830
public key and you will how to say that

520
00:26:39,830 --> 00:26:42,450
put it here where are you

521
00:26:42,450 --> 00:26:44,460
and then in a before script before the

522
00:26:44,460 --> 00:26:47,190
job so we have a very simple test job

523
00:26:47,190 --> 00:26:48,990
here that this SSH is to get at gitlab

524
00:26:48,990 --> 00:26:51,330
dot-com and it does it get clone just

525
00:26:51,330 --> 00:26:54,360
simply to show how it works it does it

526
00:26:54,360 --> 00:26:57,810
get clone of a private repository so the

527
00:26:57,810 --> 00:26:59,220
only thing you need to do in your before

528
00:26:59,220 --> 00:27:00,510
script is make sure that whatever

529
00:27:00,510 --> 00:27:02,490
environment you're running in actually

530
00:27:02,490 --> 00:27:06,090
has SSH agent installed and has the

531
00:27:06,090 --> 00:27:12,000
private key how to say that creates the

532
00:27:12,000 --> 00:27:15,450
private key on the on them on the build

533
00:27:15,450 --> 00:27:16,680
environment that you're running at that

534
00:27:16,680 --> 00:27:19,740
moment so we just in this case we're

535
00:27:19,740 --> 00:27:21,090
gonna add get update and I've got

536
00:27:21,090 --> 00:27:24,150
install of open SSH client we SSH add

537
00:27:24,150 --> 00:27:26,310
the private key see this is the dollar

538
00:27:26,310 --> 00:27:30,240
SSH private key is the reference to the

539
00:27:30,240 --> 00:27:32,490
secret variable that lives in the

540
00:27:32,490 --> 00:27:39,480
object-level we created ssh directory we

541
00:27:39,480 --> 00:27:42,620
said hole strict host key checking off

542
00:27:42,620 --> 00:27:45,750
in the SSH config file this is all

543
00:27:45,750 --> 00:27:48,809
mumbo-jumbo that just boils down to get

544
00:27:48,809 --> 00:27:52,410
this environment ready to to do a check

545
00:27:52,410 --> 00:27:55,230
out of private repository and then here

546
00:27:55,230 --> 00:27:58,140
you can actually do the gate clone with

547
00:27:58,140 --> 00:28:00,210
a private repository the nice thing is

548
00:28:00,210 --> 00:28:02,160
that this will be destroyed the moment

549
00:28:02,160 --> 00:28:08,130
after the build is done however you have

550
00:28:08,130 --> 00:28:09,780
to be careful to not somewhere

551
00:28:09,780 --> 00:28:12,210
accidentally print this private key to

552
00:28:12,210 --> 00:28:14,790
your build log because then your private

553
00:28:14,790 --> 00:28:17,220
key is there especially if you're doing

554
00:28:17,220 --> 00:28:20,250
open source projects this becomes a bit

555
00:28:20,250 --> 00:28:23,970
more of a challenge because you want to

556
00:28:23,970 --> 00:28:25,620
make sure that nobody ever accidentally

557
00:28:25,620 --> 00:28:28,470
does something in your in your build log

558
00:28:28,470 --> 00:28:35,490
that prints that key so as for the use

559
00:28:35,490 --> 00:28:38,820
case of this so one is to check out

560
00:28:38,820 --> 00:28:43,850
private repositories the other one is to

561
00:28:43,850 --> 00:28:47,610
to deploy to production servers or any

562
00:28:47,610 --> 00:28:50,070
kind of server that is not in the same

563
00:28:50,070 --> 00:28:54,240
that's not easily accessible so if you

564
00:28:54,240 --> 00:28:59,429
have a deploy job like here for instance

565
00:28:59,429 --> 00:29:02,429
in this deploy job you could have here

566
00:29:02,429 --> 00:29:06,570
some some commands that actually SSH

567
00:29:06,570 --> 00:29:09,210
into your production machine and run a

568
00:29:09,210 --> 00:29:14,070
command there or run a command over SSH

569
00:29:14,070 --> 00:29:16,470
on your production and instance whatever

570
00:29:16,470 --> 00:29:21,929
you you prefer either way this looks a

571
00:29:21,929 --> 00:29:23,580
bit complicated but it's a really a one

572
00:29:23,580 --> 00:29:25,559
one-time thing and it's fairly well

573
00:29:25,559 --> 00:29:27,330
documented what you need to have there

574
00:29:27,330 --> 00:29:30,630
and once you do that it becomes very

575
00:29:30,630 --> 00:29:34,910
easy to do secure communication with

576
00:29:34,910 --> 00:29:41,940
different places is that clear

577
00:29:41,940 --> 00:29:50,500
everybody awake one of the last things I

578
00:29:50,500 --> 00:29:52,600
want to show is the the yellow anchors

579
00:29:52,600 --> 00:29:54,430
this is not actually a good lab see I

580
00:29:54,430 --> 00:29:57,400
feature this is some deep dark corner of

581
00:29:57,400 --> 00:30:03,070
Gamal that allows this stuff we don't

582
00:30:03,070 --> 00:30:05,050
actually use it because I find it to be

583
00:30:05,050 --> 00:30:11,230
a fairly how to say that complicated way

584
00:30:11,230 --> 00:30:15,460
of accomplishing things but depending on

585
00:30:15,460 --> 00:30:16,300
what you're doing and how much

586
00:30:16,300 --> 00:30:18,430
duplication of stuff you have in your

587
00:30:18,430 --> 00:30:19,990
get lab see I file this might become

588
00:30:19,990 --> 00:30:23,890
useful so this stuff here on the left is

589
00:30:23,890 --> 00:30:26,350
equal to this stuff on the right and

590
00:30:26,350 --> 00:30:28,210
this is purely on a llamó level so good

591
00:30:28,210 --> 00:30:29,350
lap see I doesn't really have anything

592
00:30:29,350 --> 00:30:31,210
to do with this it's just a trick that

593
00:30:31,210 --> 00:30:32,830
you can use to have some deduplication

594
00:30:32,830 --> 00:30:37,960
in your in your gait lab see I file so

595
00:30:37,960 --> 00:30:41,040
to run through it real quickly so we

596
00:30:41,040 --> 00:30:44,800
define this this hidden key called job

597
00:30:44,800 --> 00:30:47,440
template and then we assign all of these

598
00:30:47,440 --> 00:30:49,540
things to it and then everywhere where

599
00:30:49,540 --> 00:30:53,410
we use it we just these are less than

600
00:30:53,410 --> 00:30:55,570
signs they are actually merging and this

601
00:30:55,570 --> 00:30:59,530
is the the job definition that refers to

602
00:30:59,530 --> 00:31:03,340
this job definition and it gets merged

603
00:31:03,340 --> 00:31:08,590
into this test test one job so what we

604
00:31:08,590 --> 00:31:11,920
see is that this stuff is equal for job

605
00:31:11,920 --> 00:31:13,720
one and job two

606
00:31:13,720 --> 00:31:17,340
so we might as well extract it here so

607
00:31:17,340 --> 00:31:20,710
this actually expands on a llamó level

608
00:31:20,710 --> 00:31:25,180
two to this where we have two jobs one

609
00:31:25,180 --> 00:31:30,670
called test one which uses ruby two one

610
00:31:30,670 --> 00:31:32,740
and Postgres and read this and you see

611
00:31:32,740 --> 00:31:34,990
the say the exact same thing here so you

612
00:31:34,990 --> 00:31:37,060
could just as well use this or actually

613
00:31:37,060 --> 00:31:40,420
this but this has the deduplication

614
00:31:40,420 --> 00:31:43,150
especially if this becomes if n becomes

615
00:31:43,150 --> 00:31:45,640
larger than two that becomes more useful

616
00:31:45,640 --> 00:31:47,770
to have that that kind of

617
00:31:47,770 --> 00:31:52,659
deduplication use it with care because

618
00:31:52,659 --> 00:31:55,899
it has a tendency to get really rough

619
00:31:55,899 --> 00:31:57,549
really quickly

620
00:31:57,549 --> 00:31:59,200
we've played around with it and then

621
00:31:59,200 --> 00:32:04,360
decided not to not to use it that's kind

622
00:32:04,360 --> 00:32:04,690
of it

623
00:32:04,690 --> 00:32:07,090
I was going to do a demo but I was smart

624
00:32:07,090 --> 00:32:10,299
enough to buy a new MacBook Pro 2016

625
00:32:10,299 --> 00:32:13,149
kind of thing and it has use BC only so

626
00:32:13,149 --> 00:32:15,370
I thought ok I'll buy every connector

627
00:32:15,370 --> 00:32:18,520
Under the Sun except for VGA because

628
00:32:18,520 --> 00:32:21,760
that's kind of a 1996 thing and of

629
00:32:21,760 --> 00:32:25,350
course Fossum runs everything on VGA so

630
00:32:25,350 --> 00:32:31,480
I'm graciously borrowing Tyler's laptop

631
00:32:31,480 --> 00:32:34,299
and therefore demoing is going to be a

632
00:32:34,299 --> 00:32:38,080
little bit tricky however are there any

633
00:32:38,080 --> 00:32:38,590
questions

634
00:32:38,590 --> 00:32:44,428
Oh a bunch of questions

635
00:32:58,289 --> 00:33:02,850
sorry coming in

636
00:33:11,510 --> 00:33:15,620
so the question is so that the the

637
00:33:15,620 --> 00:33:17,790
imagine that you have jobs that are not

638
00:33:17,790 --> 00:33:20,520
necessarily pass or fail and but do you

639
00:33:20,520 --> 00:33:21,990
have some kind of metric that you want

640
00:33:21,990 --> 00:33:25,200
to use not directly that I am aware of

641
00:33:25,200 --> 00:33:28,560
but there is for instance for code

642
00:33:28,560 --> 00:33:30,750
coverage which is one of the use cases I

643
00:33:30,750 --> 00:33:33,290
could imagine this a you'd want this for

644
00:33:33,290 --> 00:33:37,620
there is a I would almost call the hack

645
00:33:37,620 --> 00:33:40,980
that allows you to define a regular

646
00:33:40,980 --> 00:33:44,490
expression on the get lab level that

647
00:33:44,490 --> 00:33:47,610
will be searched in the build log for

648
00:33:47,610 --> 00:33:49,760
the output of the code coverage

649
00:33:49,760 --> 00:33:54,090
percentage but other than that right now

650
00:33:54,090 --> 00:33:56,580
it's a binary thing I'm also looking at

651
00:33:56,580 --> 00:33:58,980
our gate lab friend over there and so if

652
00:33:58,980 --> 00:34:00,800
I'm incorrect it's something you have to

653
00:34:00,800 --> 00:34:02,910
tell me that I mean correct but I think

654
00:34:02,910 --> 00:34:06,630
that's the way it is right yeah and

655
00:34:06,630 --> 00:34:09,650
there are more questions yeah

656
00:34:26,650 --> 00:34:39,860
so the question is logged with the G or

657
00:34:39,860 --> 00:34:46,310
log luck with the CK so the question is

658
00:34:46,310 --> 00:34:49,100
that can can get lepsy I lock other

659
00:34:49,100 --> 00:34:51,889
resources than then the runner I'm not

660
00:34:51,889 --> 00:34:54,710
aware of it so the you can do this in

661
00:34:54,710 --> 00:34:56,780
scripts if you can find a creative way

662
00:34:56,780 --> 00:34:59,780
to do that but I'm not aware of it being

663
00:34:59,780 --> 00:35:03,650
able to do other external things at the

664
00:35:03,650 --> 00:35:05,950
moment

665
00:35:18,340 --> 00:35:22,460
so the artifacts how are they kept so

666
00:35:22,460 --> 00:35:25,550
you refer to them so by default they're

667
00:35:25,550 --> 00:35:28,010
available within the same build of the

668
00:35:28,010 --> 00:35:29,990
pipeline but you can make some changes

669
00:35:29,990 --> 00:35:33,860
to that by having a de keyed with which

670
00:35:33,860 --> 00:35:36,110
they are stored and you can change that

671
00:35:36,110 --> 00:35:38,390
so that you can use them across builds

672
00:35:38,390 --> 00:35:39,920
as well I haven't personally played with

673
00:35:39,920 --> 00:35:41,300
that so I cannot tell you the details

674
00:35:41,300 --> 00:35:43,490
but I have seen that that is indeed

675
00:35:43,490 --> 00:35:55,700
possible yeah so you have to the

676
00:35:55,700 --> 00:35:58,130
question is do you need to update them

677
00:35:58,130 --> 00:36:02,690
so what we do to do because this comes

678
00:36:02,690 --> 00:36:04,790
actually straight from an actual CID

679
00:36:04,790 --> 00:36:08,030
that we are using so what we're doing is

680
00:36:08,030 --> 00:36:09,740
here we do a bundle install - -

681
00:36:09,740 --> 00:36:12,230
deployment which stores everything in

682
00:36:12,230 --> 00:36:14,600
the vendor subdirectory and then here we

683
00:36:14,600 --> 00:36:17,170
do a bundle install - - deployment again

684
00:36:17,170 --> 00:36:20,360
it might have changed its super unlucky

685
00:36:20,360 --> 00:36:22,700
for our use case at the moment but this

686
00:36:22,700 --> 00:36:23,750
is how you would do it if you have a

687
00:36:23,750 --> 00:36:25,340
longer cache time or you want to use

688
00:36:25,340 --> 00:36:27,890
them across builds and then you you can

689
00:36:27,890 --> 00:36:30,230
do a construction like this to make sure

690
00:36:30,230 --> 00:36:32,630
that hey nothing should have changed but

691
00:36:32,630 --> 00:36:34,280
please go and check that that is

692
00:36:34,280 --> 00:36:42,200
actually the case can you use Dockers

693
00:36:42,200 --> 00:36:44,780
layered file system for artifacts to be

694
00:36:44,780 --> 00:36:48,880
honest I have no answer to that question

695
00:36:49,030 --> 00:36:52,900
you'd have to look at I was sorry

696
00:37:07,279 --> 00:37:09,079
sorry I didn't get your second question

697
00:37:09,079 --> 00:37:10,699
let me ask let me answer the first

698
00:37:10,699 --> 00:37:12,229
question first and so the first question

699
00:37:12,229 --> 00:37:14,390
was where did the logs go

700
00:37:14,390 --> 00:37:16,729
the logs go back to gate lab CI itself

701
00:37:16,729 --> 00:37:18,709
so they're not stored on the runner so

702
00:37:18,709 --> 00:37:21,109
you you can access your logs as far back

703
00:37:21,109 --> 00:37:23,839
as your as your history of pipeline goes

704
00:37:23,839 --> 00:37:26,179
so you can always look back at your logs

705
00:37:26,179 --> 00:37:38,419
in your second question code review yeah

706
00:37:38,419 --> 00:37:40,459
so the question is can you integrate

707
00:37:40,459 --> 00:37:45,109
code review theoretically you would

708
00:37:45,109 --> 00:37:46,849
solve that problem on the get lab side

709
00:37:46,849 --> 00:37:48,259
and not necessarily on the gate live CI

710
00:37:48,259 --> 00:37:52,689
side so what we do for instance is that

711
00:37:52,689 --> 00:37:55,789
somebody creates code does a merge

712
00:37:55,789 --> 00:37:58,579
request with the with the upstream and

713
00:37:58,579 --> 00:38:02,419
then that needs to be reviewed before

714
00:38:02,419 --> 00:38:04,009
the merge request gets merged and then

715
00:38:04,009 --> 00:38:06,049
because then you also have the ability

716
00:38:06,049 --> 00:38:08,979
in get lab to do to use commenting and

717
00:38:08,979 --> 00:38:11,419
push further commits to the to the build

718
00:38:11,419 --> 00:38:15,049
so the the the testing is what is done

719
00:38:15,049 --> 00:38:17,539
on the on the gate Lab CI side and the

720
00:38:17,539 --> 00:38:19,489
the human aspect of the code review that

721
00:38:19,489 --> 00:38:26,769
happens on the on the gate Lab side so

722
00:38:26,769 --> 00:38:28,909
the question is can you pass a docker

723
00:38:28,909 --> 00:38:29,869
file instead of an image

724
00:38:29,869 --> 00:38:32,269
you cannot theoretically directly pass

725
00:38:32,269 --> 00:38:34,489
the docker file but since one of the

726
00:38:34,489 --> 00:38:36,380
last couple of versions there's an

727
00:38:36,380 --> 00:38:38,479
internal docker registry built in to get

728
00:38:38,479 --> 00:38:41,900
labs see a CI itself so you can actually

729
00:38:41,900 --> 00:38:44,599
build your own doctor instances and push

730
00:38:44,599 --> 00:38:47,630
them to to get lab CI and then refer to

731
00:38:47,630 --> 00:38:49,130
them here so they don't ever need to see

732
00:38:49,130 --> 00:38:50,630
the outside world they just all

733
00:38:50,630 --> 00:38:54,039
everything lives in github

734
00:38:59,690 --> 00:39:03,840
yeah that's come and talk to me after

735
00:39:03,840 --> 00:39:05,610
the session because that's exactly one

736
00:39:05,610 --> 00:39:07,160
of the things that I wanted to look into

737
00:39:07,160 --> 00:39:10,620
and some time soon so you can actually

738
00:39:10,620 --> 00:39:13,170
build a docker image from a docker image

739
00:39:13,170 --> 00:39:14,900
and then use that in the rest of your

740
00:39:14,900 --> 00:39:20,480
pipeline which is quite a nice solution

741
00:39:42,880 --> 00:39:45,019
so the question is what if you have

742
00:39:45,019 --> 00:39:47,209
multiple source repositories that depend

743
00:39:47,209 --> 00:39:51,019
on each other and you want to do CI on a

744
00:39:51,019 --> 00:39:54,319
combination of these deployments so this

745
00:39:54,319 --> 00:39:55,689
has been a problem for us as well

746
00:39:55,689 --> 00:40:00,079
specifically we had two repositories one

747
00:40:00,079 --> 00:40:03,139
is a puppet control repository and the

748
00:40:03,139 --> 00:40:05,929
other one is a puppet module the gitlab

749
00:40:05,929 --> 00:40:07,999
CI whenever you push to the puppet

750
00:40:07,999 --> 00:40:11,089
module so the control repository is kind

751
00:40:11,089 --> 00:40:12,679
of what sits at the top and it checks

752
00:40:12,679 --> 00:40:14,329
out a bunch of modules including this

753
00:40:14,329 --> 00:40:16,159
one that we were making changes to the

754
00:40:16,159 --> 00:40:19,219
module had its own CI process and the

755
00:40:19,219 --> 00:40:20,929
control repository had its own CI

756
00:40:20,929 --> 00:40:23,809
process what happened is that if you

757
00:40:23,809 --> 00:40:26,329
push nearly simultaneous because

758
00:40:26,329 --> 00:40:27,739
sometimes it happens you made a bunch of

759
00:40:27,739 --> 00:40:30,009
changes and it touches both of those

760
00:40:30,009 --> 00:40:36,199
repositories so we would push to one

761
00:40:36,199 --> 00:40:38,119
repository which has an automatic deploy

762
00:40:38,119 --> 00:40:40,339
to staging environment or both of them

763
00:40:40,339 --> 00:40:41,599
have an automatic deploy to staging

764
00:40:41,599 --> 00:40:42,829
environment if everything is green you

765
00:40:42,829 --> 00:40:44,630
push to them simultaneously this

766
00:40:44,630 --> 00:40:47,689
pipeline completes fine and pushes

767
00:40:47,689 --> 00:40:50,449
through to your staging environment this

768
00:40:50,449 --> 00:40:52,579
pipeline does not complete complete fine

769
00:40:52,579 --> 00:40:57,649
and actually breaks to the code base so

770
00:40:57,649 --> 00:40:59,599
as this one is deploying to your staging

771
00:40:59,599 --> 00:41:01,849
environment you are now deploying broken

772
00:41:01,849 --> 00:41:03,349
code because it actually checks out the

773
00:41:03,349 --> 00:41:06,289
the other job as well and we've had some

774
00:41:06,289 --> 00:41:08,829
let's say unfortunate side effects I

775
00:41:08,829 --> 00:41:11,449
mean we didn't just we didn't actually

776
00:41:11,449 --> 00:41:15,639
drop any production databases so we're

777
00:41:18,519 --> 00:41:21,469
sorry I couldn't resist making a joke at

778
00:41:21,469 --> 00:41:24,529
least once I do command you if you

779
00:41:24,529 --> 00:41:27,939
haven't looked into it so get lab

780
00:41:27,939 --> 00:41:31,519
accidentally dropped a or destroyed a

781
00:41:31,519 --> 00:41:33,079
production database this week and had a

782
00:41:33,079 --> 00:41:36,979
massive outage firmness but if you want

783
00:41:36,979 --> 00:41:38,959
to see how you want to do operations the

784
00:41:38,959 --> 00:41:42,829
it is absolutely exemplary how they were

785
00:41:42,829 --> 00:41:44,449
public about this there's a Google Doc

786
00:41:44,449 --> 00:41:46,519
that you could openly access that has

787
00:41:46,519 --> 00:41:48,450
older

788
00:41:48,450 --> 00:41:51,240
the details in it what happened who

789
00:41:51,240 --> 00:41:54,090
fixed what who went where what are the

790
00:41:54,090 --> 00:41:55,830
consequences how are we learning from

791
00:41:55,830 --> 00:41:57,810
this at some point there was even a

792
00:41:57,810 --> 00:42:00,660
YouTube live feed where you could just

793
00:42:00,660 --> 00:42:05,120
watch engineers fix get labs production

794
00:42:05,120 --> 00:42:09,600
environment just I'm really impressed by

795
00:42:09,600 --> 00:42:14,850
that and really it's an unfortunate turn

796
00:42:14,850 --> 00:42:16,650
of events where somebody made a mistake

797
00:42:16,650 --> 00:42:17,610
and then it turned out that all the

798
00:42:17,610 --> 00:42:19,220
fail-safes didn't really actually work

799
00:42:19,220 --> 00:42:21,840
I've been there and it's not a great

800
00:42:21,840 --> 00:42:23,700
place it doesn't make you a bad engineer

801
00:42:23,700 --> 00:42:27,990
just it's that one unfortunate one in a

802
00:42:27,990 --> 00:42:30,630
gazillion cases that it happens to

803
00:42:30,630 --> 00:42:32,730
everyone at some point anyway I digress

804
00:42:32,730 --> 00:42:35,630
any more questions

805
00:42:40,590 --> 00:42:43,330
do you have any notifications if a job

806
00:42:43,330 --> 00:42:45,190
succeeds or fails yes so first of all

807
00:42:45,190 --> 00:42:45,970
there's email

808
00:42:45,970 --> 00:42:47,470
I think it's enabled by default if you

809
00:42:47,470 --> 00:42:49,630
enable the the email said SMTP settings

810
00:42:49,630 --> 00:42:51,130
and get lapped and it automatically

811
00:42:51,130 --> 00:42:53,380
starts emailing you and when jobs when

812
00:42:53,380 --> 00:42:57,670
pipelines fail or succeed secondly

813
00:42:57,670 --> 00:43:01,990
gitlab also comes packaged with a an

814
00:43:01,990 --> 00:43:03,460
open-source slack alternative called

815
00:43:03,460 --> 00:43:05,350
matter most if you haven't looked into

816
00:43:05,350 --> 00:43:07,510
it do look into it because it's really

817
00:43:07,510 --> 00:43:10,590
really a great communication platform

818
00:43:10,590 --> 00:43:13,660
fully open source it is already deployed

819
00:43:13,660 --> 00:43:17,890
if you have gitlab seee installed with

820
00:43:17,890 --> 00:43:20,040
the omnibus installer it's already there

821
00:43:20,040 --> 00:43:22,150
literally one line and you can start

822
00:43:22,150 --> 00:43:25,420
using it and get lepsy I will post

823
00:43:25,420 --> 00:43:28,810
notifications to matter most channels if

824
00:43:28,810 --> 00:43:32,770
you wanted to you can also do wet web

825
00:43:32,770 --> 00:43:34,180
hooks and a whole bunch of other stuff

826
00:43:34,180 --> 00:43:36,750
it's all good lab level and stuff

827
00:43:36,750 --> 00:43:39,760
somebody in the back has a really urgent

828
00:43:39,760 --> 00:43:42,690
question

829
00:44:02,680 --> 00:44:06,170
so their plans

830
00:44:06,170 --> 00:44:07,940
I don't know anything about it I have no

831
00:44:07,940 --> 00:44:10,849
official ties to get lab other than we

832
00:44:10,849 --> 00:44:12,349
buy some licenses from them

833
00:44:12,349 --> 00:44:14,660
but so the question is a build matrix is

834
00:44:14,660 --> 00:44:16,519
where you say hey what I want to run all

835
00:44:16,519 --> 00:44:18,140
versions of this against all versions of

836
00:44:18,140 --> 00:44:20,930
that I can honestly say that I don't

837
00:44:20,930 --> 00:44:32,539
know if that currently exists yeah yeah

838
00:44:32,539 --> 00:44:35,269
so then you get into dirty ugly mo for

839
00:44:35,269 --> 00:44:37,359
now

840
00:44:38,950 --> 00:44:42,049
[Music]

841
00:44:52,740 --> 00:44:55,819
[Music]

