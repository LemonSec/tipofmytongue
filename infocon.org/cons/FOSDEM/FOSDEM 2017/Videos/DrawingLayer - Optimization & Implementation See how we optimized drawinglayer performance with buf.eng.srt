1
00:00:04,590 --> 00:00:08,240
so welcome everyone to this year's

2
00:00:08,240 --> 00:00:12,180
drawing layer talk so the city I wanted

3
00:00:12,180 --> 00:00:14,280
to concentrate not to take on a high

4
00:00:14,280 --> 00:00:16,619
level about the primitive stuff and all

5
00:00:16,619 --> 00:00:19,080
this again and what was happening in the

6
00:00:19,080 --> 00:00:19,680
background

7
00:00:19,680 --> 00:00:24,390
to prepare the all the needed data for

8
00:00:24,390 --> 00:00:26,609
the rendering of the a diffuse system I

9
00:00:26,609 --> 00:00:28,769
just wanted to show you four concrete

10
00:00:28,769 --> 00:00:31,920
examples which happened about the last

11
00:00:31,920 --> 00:00:35,910
year which are in the product and have

12
00:00:35,910 --> 00:00:39,870
led to some good speed ups and they

13
00:00:39,870 --> 00:00:41,730
describe pretty well where the problems

14
00:00:41,730 --> 00:00:45,149
are currently and seeing how to solve

15
00:00:45,149 --> 00:00:49,530
them can help to understand how to use

16
00:00:49,530 --> 00:00:52,590
the current techniques to be able to

17
00:00:52,590 --> 00:00:56,039
solve such problems so just let's start

18
00:00:56,039 --> 00:00:58,890
with with one of my favorite bugs in the

19
00:00:58,890 --> 00:01:04,170
last time so squirrel bug so it's a big

20
00:01:04,170 --> 00:01:07,890
problem is that we have an SVG import

21
00:01:07,890 --> 00:01:10,310
which which we got from an external

22
00:01:10,310 --> 00:01:14,360
customer I think it was Munich say used

23
00:01:14,360 --> 00:01:18,210
SVG graphic called squirrel a very small

24
00:01:18,210 --> 00:01:22,020
form just in writer and this document

25
00:01:22,020 --> 00:01:24,330
just didn't work and the reason was

26
00:01:24,330 --> 00:01:25,290
really sis

27
00:01:25,290 --> 00:01:30,150
SVG graphic it's pretty big half a

28
00:01:30,150 --> 00:01:33,990
megabyte and the reason it works so slow

29
00:01:33,990 --> 00:01:37,530
is it contains five SVG patterns each

30
00:01:37,530 --> 00:01:40,560
containing 440 polygons by itself

31
00:01:40,560 --> 00:01:43,970
justice to describe simple points but

32
00:01:43,970 --> 00:01:46,920
440 and five of those patterns in the

33
00:01:46,920 --> 00:01:51,750
SVG file and this patterns are used with

34
00:01:51,750 --> 00:01:54,960
texture repeat to fill just poorly

35
00:01:54,960 --> 00:01:59,220
polygons and this multiplies with a

36
00:01:59,220 --> 00:02:01,500
foreigner for the polygons so you had

37
00:02:01,500 --> 00:02:04,680
millions of simple polygons just to

38
00:02:04,680 --> 00:02:06,719
define the graphic in end-effector and

39
00:02:06,719 --> 00:02:09,508
it was all forward folded up and

40
00:02:09,508 --> 00:02:13,349
prepared for rendering so

41
00:02:13,349 --> 00:02:15,959
before when that decomposes pattern and

42
00:02:15,959 --> 00:02:18,329
processes it transformed sales and times

43
00:02:18,329 --> 00:02:21,840
so say it's actually some reuse when the

44
00:02:21,840 --> 00:02:25,799
pattern is prepared as a primitive it is

45
00:02:25,799 --> 00:02:28,099
it is not copied or something it's just

46
00:02:28,099 --> 00:02:31,409
reference because a primitive is in you

47
00:02:31,409 --> 00:02:34,230
know API object so that it's not even

48
00:02:34,230 --> 00:02:37,530
the problem but the problem is you said

49
00:02:37,530 --> 00:02:39,989
really all of since polygons get

50
00:02:39,989 --> 00:02:42,150
transformed system dependence was the

51
00:02:42,150 --> 00:02:44,280
system dependent form and have to be

52
00:02:44,280 --> 00:02:49,200
rendered in each each for its own and

53
00:02:49,200 --> 00:02:53,609
afterwards I just decided don't do that

54
00:02:53,609 --> 00:02:58,079
just we when one of the tiles as rgba

55
00:02:58,079 --> 00:03:02,159
and when the it s bitmap so this this of

56
00:03:02,159 --> 00:03:04,349
course works too but you have to do some

57
00:03:04,349 --> 00:03:08,419
fine-tuning because quality of

58
00:03:08,419 --> 00:03:11,340
pre-rendered bitmaps is of course not as

59
00:03:11,340 --> 00:03:12,930
good so you have to take care for

60
00:03:12,930 --> 00:03:14,879
sitting for the output target is it

61
00:03:14,879 --> 00:03:18,540
output target bitmap like screen do you

62
00:03:18,540 --> 00:03:21,989
have meta file or PDF export or

63
00:03:21,989 --> 00:03:23,699
printings and you should avoid to do

64
00:03:23,699 --> 00:03:27,329
that of course and only up to a

65
00:03:27,329 --> 00:03:30,989
specified zoom level because when you

66
00:03:30,989 --> 00:03:34,139
zoom deeply in you automatically don't

67
00:03:34,139 --> 00:03:36,540
have the problem because only a few of

68
00:03:36,540 --> 00:03:39,959
the tiles are rendered so you can just

69
00:03:39,959 --> 00:03:44,970
goes away to use a higher quality so the

70
00:03:44,970 --> 00:03:48,299
C original approach had a high quality

71
00:03:48,299 --> 00:03:50,909
but had speed problems when when all of

72
00:03:50,909 --> 00:03:53,810
the stuff was shown

73
00:03:58,440 --> 00:04:00,940
and this is a good example how you can

74
00:04:00,940 --> 00:04:04,720
optimize stuff using the primitives you

75
00:04:04,720 --> 00:04:09,040
can just react inside primitive

76
00:04:09,040 --> 00:04:10,890
decomposition all you have the

77
00:04:10,890 --> 00:04:13,090
alternative to do it in the active

78
00:04:13,090 --> 00:04:16,269
renderer and in the rinoa when when you

79
00:04:16,269 --> 00:04:21,010
get to pattern repeat primitive you can

80
00:04:21,010 --> 00:04:24,490
just say when you know is a concrete

81
00:04:24,490 --> 00:04:29,170
resolution what will I do to get this

82
00:04:29,170 --> 00:04:32,170
graphic out as fast as possible and I

83
00:04:32,170 --> 00:04:37,360
have this here this is this travel which

84
00:04:37,360 --> 00:04:43,420
which you have now and now you can

85
00:04:43,420 --> 00:04:47,350
really zoom in it's still not extremely

86
00:04:47,350 --> 00:04:51,720
fast but you can see you can at least

87
00:04:51,720 --> 00:04:53,590
the scroll in it

88
00:04:53,590 --> 00:04:56,740
and when you go really really deeply

89
00:04:56,740 --> 00:05:01,360
into it you see this pattern so these

90
00:05:01,360 --> 00:05:03,400
patterns are not really useful in the

91
00:05:03,400 --> 00:05:05,320
end effect because they are more or less

92
00:05:05,320 --> 00:05:08,710
just used to make some great own but of

93
00:05:08,710 --> 00:05:10,960
course you cannot ignore the definition

94
00:05:10,960 --> 00:05:13,270
of the underlying as which is all you

95
00:05:13,270 --> 00:05:15,910
have to render them somehow it would

96
00:05:15,910 --> 00:05:18,700
look different so this was solved and

97
00:05:18,700 --> 00:05:23,099
it's much faster now as you see

98
00:05:23,580 --> 00:05:27,640
so maybe after each of the examples I

99
00:05:27,640 --> 00:05:29,920
have four of them maybe if you have

100
00:05:29,920 --> 00:05:32,290
questions since this example make a

101
00:05:32,290 --> 00:05:35,370
short break

102
00:05:35,370 --> 00:05:40,570
okay fine let's go to the next one we

103
00:05:40,570 --> 00:05:42,670
have a problem with red line drawing

104
00:05:42,670 --> 00:05:45,820
only no sweat lines every line may be

105
00:05:45,820 --> 00:05:47,710
just a straight simple line with two

106
00:05:47,710 --> 00:05:51,340
points or maybe a busy curve when the

107
00:05:51,340 --> 00:05:54,400
lion sickness is not on sale which which

108
00:05:54,400 --> 00:05:58,210
means in the office to have independent

109
00:05:58,210 --> 00:06:00,190
forms assuming you have a von Pearson

110
00:06:00,190 --> 00:06:03,880
line which is by the way not provided by

111
00:06:03,880 --> 00:06:06,700
other office programs and just for

112
00:06:06,700 --> 00:06:12,670
historical reasons so most of the

113
00:06:12,670 --> 00:06:14,590
problems come from all the charts which

114
00:06:14,590 --> 00:06:19,510
have such red lines and the 11th is

115
00:06:19,510 --> 00:06:22,930
simply no support for poly polygons

116
00:06:22,930 --> 00:06:27,010
which suicide when you decompose Safed

117
00:06:27,010 --> 00:06:30,040
line and of course no direct feed line

118
00:06:30,040 --> 00:06:33,700
support so the problem is only on linux

119
00:06:33,700 --> 00:06:38,590
but this guy all-seer is a solution now

120
00:06:38,590 --> 00:06:44,440
and before the optimization the poly

121
00:06:44,440 --> 00:06:46,720
polygons had to be decomposed so to

122
00:06:46,720 --> 00:06:49,180
repeat so it's in full quality quality

123
00:06:49,180 --> 00:06:51,910
every time no buffering and since is of

124
00:06:51,910 --> 00:06:54,430
course pretty slow and after the

125
00:06:54,430 --> 00:06:55,930
optimization

126
00:06:55,930 --> 00:07:01,570
I used kayo this direct-fed line kayo

127
00:07:01,570 --> 00:07:04,780
and ara because I made measurements to

128
00:07:04,780 --> 00:07:07,570
decide what to do and this is just the

129
00:07:07,570 --> 00:07:10,690
best way to do it i also tried before to

130
00:07:10,690 --> 00:07:13,960
buffer the trepidation completely but

131
00:07:13,960 --> 00:07:18,310
this has a bad memory overhead so cairo

132
00:07:18,310 --> 00:07:21,130
is just the way to go in here for the

133
00:07:21,130 --> 00:07:23,310
moment

134
00:07:25,759 --> 00:07:28,860
did long-term we really need better

135
00:07:28,860 --> 00:07:33,299
support to draw in some way lines with

136
00:07:33,299 --> 00:07:35,669
some line sickness in just one color

137
00:07:35,669 --> 00:07:37,829
much better on Linux we don't have a

138
00:07:37,829 --> 00:07:40,799
good solution today I think what code

139
00:07:40,799 --> 00:07:44,099
kweilyn was just talking about may help

140
00:07:44,099 --> 00:07:46,349
to get in the right direction but what

141
00:07:46,349 --> 00:07:50,819
we really need is whenever a basic

142
00:07:50,819 --> 00:07:52,559
renderer for the a diffuse which is

143
00:07:52,559 --> 00:07:54,389
using that stuff that ralien is now

144
00:07:54,389 --> 00:07:57,479
offering and I hope we get this together

145
00:07:57,479 --> 00:08:00,869
because we can make huge steps forward

146
00:08:00,869 --> 00:08:04,079
when we do that questions to this

147
00:08:04,079 --> 00:08:09,689
example maybe by the way this example

148
00:08:09,689 --> 00:08:13,259
also has the problem sets a geometry

149
00:08:13,259 --> 00:08:15,659
information has to come somehow phones

150
00:08:15,659 --> 00:08:19,979
at 2d charts to the editor at all

151
00:08:19,979 --> 00:08:22,619
sorcerer says of which now which

152
00:08:22,619 --> 00:08:25,199
directly uses a primitive representation

153
00:08:25,199 --> 00:08:28,079
before that there are even meter meter

154
00:08:28,079 --> 00:08:31,550
files used for that

155
00:08:33,700 --> 00:08:38,320
so I don't show is a previous example

156
00:08:38,320 --> 00:08:40,990
life because the loading surcharge takes

157
00:08:40,990 --> 00:08:43,179
a long time maybe when we have some time

158
00:08:43,179 --> 00:08:44,940
left I can show you later

159
00:08:44,940 --> 00:08:48,400
so refactor sweetie run over to use

160
00:08:48,400 --> 00:08:52,050
mortis readiness this is one thing I

161
00:08:52,050 --> 00:08:54,970
wanted to do for years and never found

162
00:08:54,970 --> 00:08:58,650
the time to do it because the sweetie

163
00:08:58,650 --> 00:09:02,140
visualization is a 2d primitive which

164
00:09:02,140 --> 00:09:06,630
decomposes the 3d primitive content to

165
00:09:06,630 --> 00:09:12,010
RGB a bitmap which is send painted due

166
00:09:12,010 --> 00:09:14,320
to supporting many systems we need a

167
00:09:14,320 --> 00:09:15,820
fallback software whenever

168
00:09:15,820 --> 00:09:18,340
implementation to show all the 3d stuff

169
00:09:18,340 --> 00:09:22,480
and up to today unfortunately it's a

170
00:09:22,480 --> 00:09:25,900
fallback software renderer is the only

171
00:09:25,900 --> 00:09:29,140
runner for our 3d representations so

172
00:09:29,140 --> 00:09:31,990
sweidy is not overused in the office but

173
00:09:31,990 --> 00:09:34,480
from time to time it gets used and it

174
00:09:34,480 --> 00:09:39,190
would be nice to again use use stuff

175
00:09:39,190 --> 00:09:42,340
kweilyn was doing the last time to maybe

176
00:09:42,340 --> 00:09:46,750
at least get one day direct Hardware

177
00:09:46,750 --> 00:09:48,970
whenever frozen sweetie stuff would be

178
00:09:48,970 --> 00:09:53,320
no problem you can just implement a

179
00:09:53,320 --> 00:09:56,860
primitive renderer which converts 3d

180
00:09:56,860 --> 00:09:59,950
primitive geometry definition completely

181
00:09:59,950 --> 00:10:02,980
to this RGB a bitmaps or just a

182
00:10:02,980 --> 00:10:05,440
replacement forces forces fallback

183
00:10:05,440 --> 00:10:07,480
Renoir but the fall back Renoir will

184
00:10:07,480 --> 00:10:10,210
still be needed even in the future you

185
00:10:10,210 --> 00:10:11,950
never know where the office is running

186
00:10:11,950 --> 00:10:14,080
and if you have something like OpenGL

187
00:10:14,080 --> 00:10:16,480
available so we always need a good

188
00:10:16,480 --> 00:10:19,320
fallback and you also need a fallback

189
00:10:19,320 --> 00:10:22,420
for PDF own rendering or samson's

190
00:10:22,420 --> 00:10:25,030
there's no way to get OpenGL to render

191
00:10:25,030 --> 00:10:28,540
bitmaps in 1200 dpi when you want to

192
00:10:28,540 --> 00:10:30,250
print something in high quality or

193
00:10:30,250 --> 00:10:30,870
something

194
00:10:30,870 --> 00:10:34,590
it's bitmap data

195
00:10:35,570 --> 00:10:39,500
so before the 2d primitive creates you

196
00:10:39,500 --> 00:10:41,920
dependent at GPR in its decomposition

197
00:10:41,920 --> 00:10:44,660
already intelligent buffering but

198
00:10:44,660 --> 00:10:45,530
single-threaded

199
00:10:45,530 --> 00:10:49,360
already intelligent buffering means

200
00:10:49,660 --> 00:10:53,000
fallback sweidy software is capable of

201
00:10:53,000 --> 00:10:57,200
just whenever parts of the 2d scene and

202
00:10:57,200 --> 00:10:59,960
it takes into account if you zoomed in

203
00:10:59,960 --> 00:11:02,540
or out and which which part can be

204
00:11:02,540 --> 00:11:05,870
reused and even if you were just zoom

205
00:11:05,870 --> 00:11:09,560
slightly in up to a difference of 25 or

206
00:11:09,560 --> 00:11:11,960
50 percent I'm not sure after look and

207
00:11:11,960 --> 00:11:15,380
the sauce it even avoids me rendering

208
00:11:15,380 --> 00:11:17,570
and goes on bitmap scaling and stuff

209
00:11:17,570 --> 00:11:19,610
like that so this is all this is already

210
00:11:19,610 --> 00:11:23,090
pretty much optimized and so the

211
00:11:23,090 --> 00:11:24,980
interesting thing is this is all done

212
00:11:24,980 --> 00:11:29,380
inside of this one single primitive for

213
00:11:29,380 --> 00:11:33,200
3d representation it's a 2d primitive

214
00:11:33,200 --> 00:11:37,640
for 3d 3d scene representation and all

215
00:11:37,640 --> 00:11:39,980
these optimizations and rendering and

216
00:11:39,980 --> 00:11:43,190
how to how to react on it can either be

217
00:11:43,190 --> 00:11:45,740
done in the renderer if so whenever it's

218
00:11:45,740 --> 00:11:48,860
a screen target or directly in the

219
00:11:48,860 --> 00:11:51,020
decomposition which is offered from the

220
00:11:51,020 --> 00:11:54,620
primitive so says even even a choice

221
00:11:54,620 --> 00:11:59,300
it's it's dynamic to do so luckily there

222
00:11:59,300 --> 00:12:01,820
was also already a thread pool in the

223
00:12:01,820 --> 00:12:03,740
office when I when I looked how I caught

224
00:12:03,740 --> 00:12:08,540
parallel eyes set and first it was hard

225
00:12:08,540 --> 00:12:10,850
to use a big because it was a global

226
00:12:10,850 --> 00:12:13,610
global thread pool and of course it

227
00:12:13,610 --> 00:12:15,560
makes only sense to use a global

228
00:12:15,560 --> 00:12:18,890
instance of it you could instantiate

229
00:12:18,890 --> 00:12:22,310
your own one but of course makes no

230
00:12:22,310 --> 00:12:24,440
sense when you want to share your work

231
00:12:24,440 --> 00:12:29,249
with all existing CPUs

232
00:12:29,249 --> 00:12:33,220
lucky luckily missus was optimized Souls

233
00:12:33,220 --> 00:12:36,670
so secure could wait exactly for the

234
00:12:36,670 --> 00:12:39,009
tasks you were scheduling yourself in

235
00:12:39,009 --> 00:12:41,679
your parallelization and not not for all

236
00:12:41,679 --> 00:12:43,839
tasks which could break other mechanisms

237
00:12:43,839 --> 00:12:48,879
in the office so after said I pretty

238
00:12:48,879 --> 00:12:54,339
rough parallelized rendering did work

239
00:12:54,339 --> 00:12:57,009
pretty well and bright and brought some

240
00:12:57,009 --> 00:13:00,279
really good success so now really when

241
00:13:00,279 --> 00:13:02,470
you have 8 cause 8 course map may be

242
00:13:02,470 --> 00:13:08,499
used and you can use much bigger 3d

243
00:13:08,499 --> 00:13:12,879
objects than before for example when you

244
00:13:12,879 --> 00:13:18,189
have something like this in the software

245
00:13:18,189 --> 00:13:21,519
renderer this is nothing I would try to

246
00:13:21,519 --> 00:13:24,730
do with all the business over the office

247
00:13:24,730 --> 00:13:28,089
version so simply simply we will take

248
00:13:28,089 --> 00:13:31,119
minutes minutes - not minutes but much

249
00:13:31,119 --> 00:13:33,879
longer to render and in the current

250
00:13:33,879 --> 00:13:37,230
version you can see it uses fat lines

251
00:13:37,230 --> 00:13:40,899
and even even with red lines you get you

252
00:13:40,899 --> 00:13:43,839
get a pretty decent reaction now when

253
00:13:43,839 --> 00:13:46,449
you when you when you are summe

254
00:13:46,449 --> 00:13:52,209
or all working working with basic

255
00:13:52,209 --> 00:13:55,540
graphic stuff so this is much better

256
00:13:55,540 --> 00:13:59,099
response and this is

257
00:14:00,760 --> 00:14:03,520
still the software and don't forget that

258
00:14:03,520 --> 00:14:06,220
no hardware involved and it's a software

259
00:14:06,220 --> 00:14:09,760
vendor which even does anti l Eliza with

260
00:14:09,760 --> 00:14:13,360
over sampling so said you don't get some

261
00:14:13,360 --> 00:14:18,130
hard edges or something so this is a big

262
00:14:18,130 --> 00:14:22,710
success and you can you can see here I

263
00:14:22,710 --> 00:14:25,600
said really this Vidya whenever I was

264
00:14:25,600 --> 00:14:30,780
using for short times a lot of CCP use

265
00:14:31,410 --> 00:14:37,300
questions falls for this optimization it

266
00:14:37,300 --> 00:14:39,250
shows again what you what you can really

267
00:14:39,250 --> 00:14:43,600
do using superlatives we have and where

268
00:14:43,600 --> 00:14:47,020
you can where you can go in between and

269
00:14:47,020 --> 00:14:52,950
do your optimizations so and hopefully

270
00:14:52,950 --> 00:14:57,100
when we get sis CPUs with 32 cores or

271
00:14:57,100 --> 00:14:59,530
something we've we heard about it will

272
00:14:59,530 --> 00:15:07,120
get even faster but it still the

273
00:15:07,120 --> 00:15:10,120
software fallback so we should really

274
00:15:10,120 --> 00:15:14,650
find some time or sponsoring or someone

275
00:15:14,650 --> 00:15:16,330
willing to do

276
00:15:16,330 --> 00:15:20,070
hardware's with even Orson

277
00:15:21,170 --> 00:15:24,780
so in the last the last example is more

278
00:15:24,780 --> 00:15:26,990
intelligent handling of animated gifs

279
00:15:26,990 --> 00:15:32,130
that's a problem and a back ache Raylan

280
00:15:32,130 --> 00:15:36,620
first found roughly fixed by just

281
00:15:36,620 --> 00:15:40,440
on-demand creating CG frames there

282
00:15:40,440 --> 00:15:43,020
because Bruce huge gifts there was an

283
00:15:43,020 --> 00:15:45,480
example gif which was playing for 8

284
00:15:45,480 --> 00:15:48,150
minutes as I'm saying it's extremely

285
00:15:48,150 --> 00:15:51,270
crazy big stuff and of course the office

286
00:15:51,270 --> 00:15:53,180
was breaking completely because

287
00:15:53,180 --> 00:15:57,960
footprint did not handle says because up

288
00:15:57,960 --> 00:16:00,930
to sense the office was was importing

289
00:16:00,930 --> 00:16:06,510
significant pletely see give us rendered

290
00:16:06,510 --> 00:16:09,540
into the single pictures as preparation

291
00:16:09,540 --> 00:16:11,970
and the singer pictures were put in an

292
00:16:11,970 --> 00:16:14,460
animated switch primitive and it were in

293
00:16:14,460 --> 00:16:17,310
this case at 800 or something of them

294
00:16:17,310 --> 00:16:21,530
all pre-rendered us RGBA images and

295
00:16:21,530 --> 00:16:26,010
start in insists primitive so for

296
00:16:26,010 --> 00:16:28,080
smaller gifts this works perfectly and

297
00:16:28,080 --> 00:16:30,120
all the images are prerunner

298
00:16:30,120 --> 00:16:32,460
and you have a wonderful performance and

299
00:16:32,460 --> 00:16:35,220
no problems and the reasons this was

300
00:16:35,220 --> 00:16:39,630
this was done is said for the first time

301
00:16:39,630 --> 00:16:41,400
in the offices sorry we were able to

302
00:16:41,400 --> 00:16:43,680
have multiple gifts on one screen with

303
00:16:43,680 --> 00:16:47,030
overlapping and working animation stuff

304
00:16:47,030 --> 00:16:51,840
but for this big big fat gif image we

305
00:16:51,840 --> 00:16:54,240
had just just to do something more

306
00:16:54,240 --> 00:16:56,940
intelligent and afterwards a

307
00:16:56,940 --> 00:16:59,310
specialization animated switch primitive

308
00:16:59,310 --> 00:17:02,760
again the solution is to directly do

309
00:17:02,760 --> 00:17:06,030
something inside the primitive which was

310
00:17:06,030 --> 00:17:09,329
hosting all the sub level data and add

311
00:17:09,329 --> 00:17:12,000
some intelligence intelligence at set

312
00:17:12,000 --> 00:17:18,390
spot so now it's holding it it's looking

313
00:17:18,390 --> 00:17:20,849
how much data it's holding how many

314
00:17:20,849 --> 00:17:23,209
frames

315
00:17:23,599 --> 00:17:26,910
does it allow itself to use the

316
00:17:26,910 --> 00:17:29,460
pre-rendering does it buffer or not how

317
00:17:29,460 --> 00:17:31,480
much does it buffers there

318
00:17:31,480 --> 00:17:35,889
memory limits set and frames get thrown

319
00:17:35,889 --> 00:17:38,409
away vans been say a long time not us

320
00:17:38,409 --> 00:17:40,690
and and all that dynamic buffering stuff

321
00:17:40,690 --> 00:17:46,059
which works pretty well and evens replay

322
00:17:46,059 --> 00:17:48,360
timing with some millisecond settings

323
00:17:48,360 --> 00:17:52,960
get get adapted when the first animation

324
00:17:52,960 --> 00:17:57,370
plays or shows said it can just not be

325
00:17:57,370 --> 00:18:02,769
promised at givers running in NZ in the

326
00:18:02,769 --> 00:18:08,820
defined mode which likens fire so again

327
00:18:08,820 --> 00:18:12,279
it's a important point is that it's at

328
00:18:12,279 --> 00:18:14,230
this all can done can be done

329
00:18:14,230 --> 00:18:16,899
dynamically inside the primitive stuff

330
00:18:16,899 --> 00:18:19,750
or alternatively it's a renderer if you

331
00:18:19,750 --> 00:18:24,789
want so that's the fourth example you

332
00:18:24,789 --> 00:18:28,690
have questions for the fourth example so

333
00:18:28,690 --> 00:18:33,190
maybe I still have the time to show see

334
00:18:33,190 --> 00:18:36,149
other examples

335
00:18:36,580 --> 00:18:44,779
so overtime yeah so six for example is

336
00:18:44,779 --> 00:18:47,360
for fat line testing just a lot of fat

337
00:18:47,360 --> 00:18:50,000
lines on this is now on windows so I

338
00:18:50,000 --> 00:18:52,549
cannot chose the optimization really but

339
00:18:52,549 --> 00:19:00,320
this works known on Linux too and just

340
00:19:00,320 --> 00:19:04,490
to show you it's a chart test you can

341
00:19:04,490 --> 00:19:08,179
already come here I just just want to

342
00:19:08,179 --> 00:19:10,370
show you the chart the chart is now

343
00:19:10,370 --> 00:19:13,250
loading and it will load for a long time

344
00:19:13,250 --> 00:19:15,500
and at the end you get a little peek

345
00:19:15,500 --> 00:19:19,970
from this video in the ring so the

346
00:19:19,970 --> 00:19:22,610
sweetie rendering and chart rendering is

347
00:19:22,610 --> 00:19:31,570
really optimized but the

348
00:19:32,230 --> 00:19:35,600
chart chart data and and cyclic loading

349
00:19:35,600 --> 00:19:38,929
is really long and not and not paralyzes

350
00:19:38,929 --> 00:19:42,169
you see this is a really big fat 3d

351
00:19:42,169 --> 00:19:44,450
chart and this makes only a small peak

352
00:19:44,450 --> 00:19:53,990
recess of the runner thank you the

353
00:19:53,990 --> 00:19:56,320
question

