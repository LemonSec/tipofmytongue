1
00:00:04,490 --> 00:00:08,840
hi my name is Vicenta terbaru and I am a

2
00:00:08,840 --> 00:00:10,670
software engineer at the Maria DB

3
00:00:10,670 --> 00:00:13,929
foundation today I'm going to give you a

4
00:00:13,929 --> 00:00:16,790
introduction into two advanced query

5
00:00:16,790 --> 00:00:19,610
features which are window functions and

6
00:00:19,610 --> 00:00:22,009
common table expressions both of them

7
00:00:22,009 --> 00:00:28,009
are coming in the numerator b10 - okay

8
00:00:28,009 --> 00:00:33,860
and I'm not going to give you a full

9
00:00:33,860 --> 00:00:36,800
description of what we support but my

10
00:00:36,800 --> 00:00:39,199
idea is to try and show you what they're

11
00:00:39,199 --> 00:00:41,329
capable of and give you a few examples

12
00:00:41,329 --> 00:00:45,320
of how things work so we're going to go

13
00:00:45,320 --> 00:00:48,109
through both both of them give you some

14
00:00:48,109 --> 00:00:51,320
examples show you why things work a lot

15
00:00:51,320 --> 00:00:54,769
faster with common table expressions and

16
00:00:54,769 --> 00:00:57,350
window functions and I'm also going to

17
00:00:57,350 --> 00:00:59,749
give you a short video on what we

18
00:00:59,749 --> 00:01:03,640
support so I'm starting with cities

19
00:01:03,640 --> 00:01:05,800
starting with a simple example

20
00:01:05,800 --> 00:01:11,630
here we have a table of engineers so

21
00:01:11,630 --> 00:01:13,909
this highlighted in red is the folks

22
00:01:13,909 --> 00:01:17,000
common table expression definition we

23
00:01:17,000 --> 00:01:19,009
start with the keyword with this is how

24
00:01:19,009 --> 00:01:21,909
you identify common table expressions

25
00:01:21,909 --> 00:01:24,740
then you have the common table

26
00:01:24,740 --> 00:01:28,040
expression name followed by the body

27
00:01:28,040 --> 00:01:32,420
which defines what you will find in that

28
00:01:32,420 --> 00:01:36,350
table definition afterwards we can use

29
00:01:36,350 --> 00:01:41,169
it as if the table were in our database

30
00:01:41,720 --> 00:01:44,570
a similar solution can be done without

31
00:01:44,570 --> 00:01:48,470
cities using derived tables and the two

32
00:01:48,470 --> 00:01:50,660
queries are identical the difference is

33
00:01:50,660 --> 00:01:53,270
that you have the table definition in

34
00:01:53,270 --> 00:01:57,350
line with in the query this gets

35
00:01:57,350 --> 00:02:01,010
complicated as you add more tables more

36
00:02:01,010 --> 00:02:03,200
derived tables if you look on the right

37
00:02:03,200 --> 00:02:08,960
we have a a nested view of how to derive

38
00:02:08,960 --> 00:02:10,280
tables would look like if they were to

39
00:02:10,280 --> 00:02:11,420
reference each other

40
00:02:11,420 --> 00:02:14,140
however with CDE is we can define this

41
00:02:14,140 --> 00:02:17,720
one at the time so here we first define

42
00:02:17,720 --> 00:02:19,970
engineers and then we want to select all

43
00:02:19,970 --> 00:02:21,800
the engineers that are are from Europe

44
00:02:21,800 --> 00:02:25,130
so we define another table expression EU

45
00:02:25,130 --> 00:02:27,350
engineers which references the first

46
00:02:27,350 --> 00:02:32,590
table you can see it here as engineers

47
00:02:32,590 --> 00:02:35,959
this makes things a lot make more

48
00:02:35,959 --> 00:02:37,580
maintainable and I'm not sure if you

49
00:02:37,580 --> 00:02:40,400
have had the pleasure of working with 20

50
00:02:40,400 --> 00:02:43,880
nested loops but things get out of hand

51
00:02:43,880 --> 00:02:46,240
pretty quickly

52
00:02:47,670 --> 00:02:50,720
so one use case example is say you are

53
00:02:50,720 --> 00:02:53,340
part of the sales division and you want

54
00:02:53,340 --> 00:02:56,420
to see which product which products have

55
00:02:56,420 --> 00:02:59,010
performed better this year as opposed to

56
00:02:59,010 --> 00:03:01,440
last year we can do this by defining

57
00:03:01,440 --> 00:03:04,770
first a table expression with all the

58
00:03:04,770 --> 00:03:07,860
products and all the sales for the for

59
00:03:07,860 --> 00:03:12,440
that product grouped by ear obviously

60
00:03:12,440 --> 00:03:16,920
and then we can just join this table

61
00:03:16,920 --> 00:03:19,230
with it with itself see here that we are

62
00:03:19,230 --> 00:03:22,430
referencing the common table twice and

63
00:03:22,430 --> 00:03:24,900
this will give you all the products

64
00:03:24,900 --> 00:03:27,239
which have performed better than the

65
00:03:27,239 --> 00:03:28,950
previous year based on the amount of

66
00:03:28,950 --> 00:03:32,610
sales doing this without common table

67
00:03:32,610 --> 00:03:34,110
expressions without the either require

68
00:03:34,110 --> 00:03:36,540
to use a view or to define the derived

69
00:03:36,540 --> 00:03:40,579
table twice which is not scalable

70
00:03:41,330 --> 00:03:45,269
so in in summary CDs are defined with a

71
00:03:45,269 --> 00:03:47,670
with clause that's how you're going to

72
00:03:47,670 --> 00:03:51,030
see them in the query they are similar

73
00:03:51,030 --> 00:03:52,739
to derive tables however they provide

74
00:03:52,739 --> 00:03:54,329
more advantages

75
00:03:54,329 --> 00:03:56,220
there are also extensions to allow

76
00:03:56,220 --> 00:03:58,290
recursive definitions I'm not going to

77
00:03:58,290 --> 00:04:01,500
go into details on those obviously they

78
00:04:01,500 --> 00:04:03,320
can provide you with cleaner code and

79
00:04:03,320 --> 00:04:06,239
sometimes the optimizer can better

80
00:04:06,239 --> 00:04:07,560
understand what you actually want from

81
00:04:07,560 --> 00:04:09,690
the data and thus optimize your queries

82
00:04:09,690 --> 00:04:14,359
to produce more efficient query plans

83
00:04:14,860 --> 00:04:17,200
now the second feature pairs very well

84
00:04:17,200 --> 00:04:18,880
with common table expressions we're

85
00:04:18,880 --> 00:04:22,089
going to see this shortly window

86
00:04:22,089 --> 00:04:25,180
functions are another advanced topic and

87
00:04:25,180 --> 00:04:26,650
I've seen a lot of people not really

88
00:04:26,650 --> 00:04:29,890
fully understand how they work so that's

89
00:04:29,890 --> 00:04:32,530
what I'm trying to show you here give

90
00:04:32,530 --> 00:04:33,910
you a brief understanding of how you

91
00:04:33,910 --> 00:04:35,680
should think about them and how you

92
00:04:35,680 --> 00:04:37,840
should think about writing queries using

93
00:04:37,840 --> 00:04:41,620
window functions so window functions are

94
00:04:41,620 --> 00:04:44,350
special because they behave like two

95
00:04:44,350 --> 00:04:47,500
different things one they act like

96
00:04:47,500 --> 00:04:51,040
similar aggregate functions and that

97
00:04:51,040 --> 00:04:53,680
they compute their result based on

98
00:04:53,680 --> 00:04:57,190
multiple rows like sum and average but

99
00:04:57,190 --> 00:04:58,930
at the same time they do not collapse

100
00:04:58,930 --> 00:05:02,370
your row your rows so you get one result

101
00:05:02,370 --> 00:05:07,320
for each entry in the Select statement

102
00:05:07,320 --> 00:05:10,300
okay and you can obviously identify them

103
00:05:10,300 --> 00:05:11,980
with the over Clause which comes right

104
00:05:11,980 --> 00:05:16,540
after the function name let's start with

105
00:05:16,540 --> 00:05:21,460
a simple example so let's see say we

106
00:05:21,460 --> 00:05:23,890
have this table which represents a set

107
00:05:23,890 --> 00:05:25,870
of users all right we have email first

108
00:05:25,870 --> 00:05:29,590
name last name and we also specify what

109
00:05:29,590 --> 00:05:32,590
kind of a user it is in this case either

110
00:05:32,590 --> 00:05:36,040
admins or regular users if you would

111
00:05:36,040 --> 00:05:38,890
like to create a primary key for this

112
00:05:38,890 --> 00:05:41,050
table say you forgot to define one as an

113
00:05:41,050 --> 00:05:43,919
integer you would you would want to get

114
00:05:43,919 --> 00:05:47,320
say an auto increment column well you

115
00:05:47,320 --> 00:05:51,010
can get this by using the row number

116
00:05:51,010 --> 00:05:54,010
function and the function does what

117
00:05:54,010 --> 00:05:54,640
you'd expect

118
00:05:54,640 --> 00:05:57,310
it sets a number in increase that

119
00:05:57,310 --> 00:06:00,850
increases for each row in the Select

120
00:06:00,850 --> 00:06:04,620
statement now the problem here is that

121
00:06:04,620 --> 00:06:07,660
we have not if we have not defined an

122
00:06:07,660 --> 00:06:11,950
order for this window function the order

123
00:06:11,950 --> 00:06:14,020
here that we see one two three four five

124
00:06:14,020 --> 00:06:16,110
is not deterministic

125
00:06:16,110 --> 00:06:20,310
these rows can actually come up

126
00:06:21,290 --> 00:06:25,880
in this order 2 1 2 1 3 5 4 at the same

127
00:06:25,880 --> 00:06:28,990
time you could get the reverse result

128
00:06:28,990 --> 00:06:31,940
and the reason why this is is that

129
00:06:31,940 --> 00:06:34,600
window functions are computed after

130
00:06:34,600 --> 00:06:37,900
everything else except the order clause

131
00:06:37,900 --> 00:06:40,190
right so the window function can get

132
00:06:40,190 --> 00:06:42,950
these rows in any order unless we

133
00:06:42,950 --> 00:06:47,000
specify differently that that comes as

134
00:06:47,000 --> 00:06:48,860
the form of a parameter for the over

135
00:06:48,860 --> 00:06:52,280
Clause we tell we tell them that the

136
00:06:52,280 --> 00:06:54,260
window function should receive the or

137
00:06:54,260 --> 00:06:58,460
the rows in this order alphabetically by

138
00:06:58,460 --> 00:07:05,090
email now a second question comes to

139
00:07:05,090 --> 00:07:07,120
mind what if we want to two separate

140
00:07:07,120 --> 00:07:10,160
sequences of numbers one for regular

141
00:07:10,160 --> 00:07:14,900
users and want or for admin users this

142
00:07:14,900 --> 00:07:18,230
can be done using an extra parameter to

143
00:07:18,230 --> 00:07:22,370
the over Clause called partition by it

144
00:07:22,370 --> 00:07:24,410
does what you expect it splits the data

145
00:07:24,410 --> 00:07:27,890
up based on the column defined in the

146
00:07:27,890 --> 00:07:33,650
partition statement so here our rows are

147
00:07:33,650 --> 00:07:37,220
split into users that are regular users

148
00:07:37,220 --> 00:07:40,580
and administrators so you see we have

149
00:07:40,580 --> 00:07:44,990
two sequences both starting from 1 1 for

150
00:07:44,990 --> 00:07:48,610
the admins and 1 for the regular users

151
00:07:51,279 --> 00:07:53,859
now I also mentioned that window

152
00:07:53,859 --> 00:07:55,269
functions behave like aggregate

153
00:07:55,269 --> 00:07:57,489
functions and that they are computed

154
00:07:57,489 --> 00:08:02,379
over a set of rows let's look at this

155
00:08:02,379 --> 00:08:04,779
example say we have some sort of sensor

156
00:08:04,779 --> 00:08:06,729
that picks up data from time to time and

157
00:08:06,729 --> 00:08:08,999
it puts that data into a table we have

158
00:08:08,999 --> 00:08:11,619
the time stamp and the value that the

159
00:08:11,619 --> 00:08:15,219
sensor recorded if we order it by time

160
00:08:15,219 --> 00:08:17,379
and plot it we might get some sort of

161
00:08:17,379 --> 00:08:20,199
graph that resembles this one and we

162
00:08:20,199 --> 00:08:21,569
don't like the data because it's noisy

163
00:08:21,569 --> 00:08:24,669
and we would like to smooth it out we

164
00:08:24,669 --> 00:08:27,219
can do this by averaging across the set

165
00:08:27,219 --> 00:08:30,699
of values so we want the point that's

166
00:08:30,699 --> 00:08:33,610
represented to be an average of say a

167
00:08:33,610 --> 00:08:35,919
couple of points before it and a couple

168
00:08:35,919 --> 00:08:38,848
of points after it

169
00:08:40,020 --> 00:08:42,179
right and we can do this using the

170
00:08:42,179 --> 00:08:44,670
average function now we've transformed

171
00:08:44,670 --> 00:08:47,010
the regular aggregate average that you

172
00:08:47,010 --> 00:08:49,980
actually using a regular sequel into a

173
00:08:49,980 --> 00:08:51,890
window function using the over Clause

174
00:08:51,890 --> 00:08:54,060
and now the function behaves slightly

175
00:08:54,060 --> 00:08:57,360
differently we first need to order the

176
00:08:57,360 --> 00:09:00,029
data data by time because that's how we

177
00:09:00,029 --> 00:09:04,110
want things to be averaged over then we

178
00:09:04,110 --> 00:09:06,570
need to tell it that we want to get it

179
00:09:06,570 --> 00:09:09,180
to average stuff with a few rows before

180
00:09:09,180 --> 00:09:12,660
and a few rows after and we do this with

181
00:09:12,660 --> 00:09:15,510
another special syntax called a frame

182
00:09:15,510 --> 00:09:18,360
definition here with we tell it to

183
00:09:18,360 --> 00:09:21,510
average three rows before it and three

184
00:09:21,510 --> 00:09:25,790
rows after the current value and now

185
00:09:25,790 --> 00:09:29,220
this is an average of seven values we

186
00:09:29,220 --> 00:09:32,670
can increase the window that the average

187
00:09:32,670 --> 00:09:35,399
is computed over I specifying different

188
00:09:35,399 --> 00:09:37,680
numbers they don't they do not have to

189
00:09:37,680 --> 00:09:41,279
be the same they can even be references

190
00:09:41,279 --> 00:09:43,920
to other columns so it's it's a bit more

191
00:09:43,920 --> 00:09:47,790
complicated but this is in essence how

192
00:09:47,790 --> 00:09:50,040
you can define the set of rows that the

193
00:09:50,040 --> 00:09:55,770
window function is computed over if I go

194
00:09:55,770 --> 00:09:59,810
for a step by step how this frame moves

195
00:09:59,810 --> 00:10:03,180
I've taken this the previous example

196
00:10:03,180 --> 00:10:05,070
have replaced average with some just so

197
00:10:05,070 --> 00:10:06,270
that I don't have to divide everything

198
00:10:06,270 --> 00:10:09,000
by by a certain number but the idea is

199
00:10:09,000 --> 00:10:12,360
the same so on the Left we average but

200
00:10:12,360 --> 00:10:15,810
we some three rows the previous the

201
00:10:15,810 --> 00:10:18,930
current and the next row and the the

202
00:10:18,930 --> 00:10:22,410
other one does does it with five rows in

203
00:10:22,410 --> 00:10:25,110
blue I've highlighted which rows are

204
00:10:25,110 --> 00:10:26,970
used in the computation and the red is

205
00:10:26,970 --> 00:10:30,120
the current row that we're computing for

206
00:10:30,120 --> 00:10:31,589
the first one we do not have any

207
00:10:31,589 --> 00:10:33,720
previous rows so we just take the

208
00:10:33,720 --> 00:10:37,410
current row and the row after it this

209
00:10:37,410 --> 00:10:39,540
gives you two plus five and in the first

210
00:10:39,540 --> 00:10:41,430
column and two plus five plus four in

211
00:10:41,430 --> 00:10:43,960
the second one

212
00:10:43,960 --> 00:10:47,470
as we move forward the frame advances

213
00:10:47,470 --> 00:10:50,650
now we do have previous rows so we add

214
00:10:50,650 --> 00:10:53,920
those as well and we add another row as

215
00:10:53,920 --> 00:10:57,900
the next row is has moved as well

216
00:10:57,900 --> 00:11:00,850
if we move even more the frame now

217
00:11:00,850 --> 00:11:02,940
starts to remove rows from the result

218
00:11:02,940 --> 00:11:08,460
and adds new ones as they come in

219
00:11:09,070 --> 00:11:11,470
notice that now even the second column

220
00:11:11,470 --> 00:11:14,650
starts to lose rows because we are

221
00:11:14,650 --> 00:11:19,110
advancing the window function even more

222
00:11:21,180 --> 00:11:23,680
computing this is actually pretty easy

223
00:11:23,680 --> 00:11:26,470
if you look at how values get added and

224
00:11:26,470 --> 00:11:29,500
removed so for each new row that we get

225
00:11:29,500 --> 00:11:33,430
we get to keep a set of rows remove sum

226
00:11:33,430 --> 00:11:37,630
and then add some this is the key to why

227
00:11:37,630 --> 00:11:41,530
window functions behave very very well

228
00:11:41,530 --> 00:11:45,670
for certain data datasets because each

229
00:11:45,670 --> 00:11:47,770
computation is constant time you just

230
00:11:47,770 --> 00:11:52,660
remove one thing and add another so what

231
00:11:52,660 --> 00:11:55,180
what this is called what we call it is

232
00:11:55,180 --> 00:12:00,070
online computation and is it works for

233
00:12:00,070 --> 00:12:03,430
almost all window functions that we

234
00:12:03,430 --> 00:12:05,140
support there are a few exceptions but

235
00:12:05,140 --> 00:12:06,460
I'm not going to go into detail on that

236
00:12:06,460 --> 00:12:08,820
right now

237
00:12:09,020 --> 00:12:11,390
and this is how the end result would

238
00:12:11,390 --> 00:12:17,420
look like so now I'm going to give you

239
00:12:17,420 --> 00:12:19,820
two examples from real-life applications

240
00:12:19,820 --> 00:12:21,649
that actually had to solve will slightly

241
00:12:21,649 --> 00:12:26,600
condense but in if it's the same idea so

242
00:12:26,600 --> 00:12:28,130
say you're in a bank and you have a lot

243
00:12:28,130 --> 00:12:32,180
of transactions from users now we have a

244
00:12:32,180 --> 00:12:34,730
timestamp for transaction we have the

245
00:12:34,730 --> 00:12:38,720
customer ID and the amount that the

246
00:12:38,720 --> 00:12:41,149
transaction was either either deposit

247
00:12:41,149 --> 00:12:43,880
some money or pay pay some money to a

248
00:12:43,880 --> 00:12:47,779
different account and we want to get a

249
00:12:47,779 --> 00:12:50,120
balance statement for all the customers

250
00:12:50,120 --> 00:12:55,760
in the bank so the the balance statement

251
00:12:55,760 --> 00:13:01,000
can be computed with regular sequel by

252
00:13:01,000 --> 00:13:04,370
doing a sub query where we sum up all

253
00:13:04,370 --> 00:13:08,180
the transactions before it okay so here

254
00:13:08,180 --> 00:13:11,930
we we join the table with itself and by

255
00:13:11,930 --> 00:13:14,360
joining we add all the transactions that

256
00:13:14,360 --> 00:13:16,850
have the same customer ID as seen here

257
00:13:16,850 --> 00:13:19,700
but have a timestamp that is lesser than

258
00:13:19,700 --> 00:13:22,600
the one that we are currently computing

259
00:13:22,600 --> 00:13:25,790
so this is an irregular sequel with

260
00:13:25,790 --> 00:13:27,290
window functions this becomes a lot

261
00:13:27,290 --> 00:13:29,510
easier to define because we just need to

262
00:13:29,510 --> 00:13:32,149
think about our computation so what we

263
00:13:32,149 --> 00:13:35,270
want to do we want to sum up things then

264
00:13:35,270 --> 00:13:37,610
we want to split our data by customer

265
00:13:37,610 --> 00:13:39,020
because we want a separate balance

266
00:13:39,020 --> 00:13:42,350
statement for each customer we order our

267
00:13:42,350 --> 00:13:45,589
data by the timestamp and then finally

268
00:13:45,589 --> 00:13:48,380
we want to tell the sum function that it

269
00:13:48,380 --> 00:13:51,740
has to add all rows from the beginning

270
00:13:51,740 --> 00:13:54,620
up to the current row so here this is

271
00:13:54,620 --> 00:13:56,600
where unbounded preceding and current

272
00:13:56,600 --> 00:14:01,270
row syntax comes into play

273
00:14:03,480 --> 00:14:05,610
now why is this important well let's

274
00:14:05,610 --> 00:14:08,130
look at the performance of this

275
00:14:08,130 --> 00:14:10,710
implementation so if you if you were to

276
00:14:10,710 --> 00:14:12,380
write this query with a regular sequel

277
00:14:12,380 --> 00:14:14,790
on the left you have the number of rows

278
00:14:14,790 --> 00:14:18,630
used in the in this in this test and the

279
00:14:18,630 --> 00:14:22,070
time it took for the query to execute

280
00:14:22,070 --> 00:14:24,720
with regular sequel without using an

281
00:14:24,720 --> 00:14:29,550
index the the time increases quite

282
00:14:29,550 --> 00:14:32,970
quickly and past a certain amount it's

283
00:14:32,970 --> 00:14:35,610
this transaction takes quite a long time

284
00:14:35,610 --> 00:14:39,660
to to finish if you do have an index

285
00:14:39,660 --> 00:14:42,600
things improve but compared to window

286
00:14:42,600 --> 00:14:46,410
functions the speed-up is 10x so we've

287
00:14:46,410 --> 00:14:48,990
managed to define a query which no

288
00:14:48,990 --> 00:14:51,510
longer uses self joins or not you don't

289
00:14:51,510 --> 00:14:54,330
have to do n squared operations instead

290
00:14:54,330 --> 00:14:56,490
it is it scales up in linear time with

291
00:14:56,490 --> 00:15:00,840
the data set so this is this is how we

292
00:15:00,840 --> 00:15:05,160
can get quite a huge improvement by just

293
00:15:05,160 --> 00:15:06,870
rewriting your queries using window

294
00:15:06,870 --> 00:15:11,670
functions another another use case is

295
00:15:11,670 --> 00:15:13,950
using top-end query in is in top-end

296
00:15:13,950 --> 00:15:18,650
queries when you want to get the top n

297
00:15:18,650 --> 00:15:22,620
people from a certain data set you can

298
00:15:22,620 --> 00:15:24,870
do this both with a regular sequel by

299
00:15:24,870 --> 00:15:28,290
just counting them the expression is a

300
00:15:28,290 --> 00:15:29,730
bit complicated but you can just count

301
00:15:29,730 --> 00:15:33,240
them unfortunately if you want to get a

302
00:15:33,240 --> 00:15:34,920
ranked column for them you will have to

303
00:15:34,920 --> 00:15:38,430
define the query again which makes makes

304
00:15:38,430 --> 00:15:41,220
the whole career look like a mess but

305
00:15:41,220 --> 00:15:42,600
with window functions we have a very

306
00:15:42,600 --> 00:15:45,150
interesting solution which is the rank

307
00:15:45,150 --> 00:15:50,210
function which does just this first it

308
00:15:50,210 --> 00:15:53,430
we just partition the data by Department

309
00:15:53,430 --> 00:15:55,710
and then we rank it in order by salary

310
00:15:55,710 --> 00:15:59,430
decreasing for for this example now I

311
00:15:59,430 --> 00:16:02,010
said we wanted the top top 5 earners so

312
00:16:02,010 --> 00:16:05,610
we want to filter this well you cannot

313
00:16:05,610 --> 00:16:10,530
filter it by using we're using a window

314
00:16:10,530 --> 00:16:12,760
function in the where clause

315
00:16:12,760 --> 00:16:15,220
because when the functions are computed

316
00:16:15,220 --> 00:16:18,730
after the where Clause is evaluated so

317
00:16:18,730 --> 00:16:21,370
this is where city is come in with city

318
00:16:21,370 --> 00:16:24,820
is you get a you can wrap the window

319
00:16:24,820 --> 00:16:27,750
function query and then filter that one

320
00:16:27,750 --> 00:16:31,920
outside of the window function query

321
00:16:31,920 --> 00:16:33,970
let's look at the performance for this

322
00:16:33,970 --> 00:16:35,710
one

323
00:16:35,710 --> 00:16:38,410
the reason I've put dot dot dot there is

324
00:16:38,410 --> 00:16:40,810
because it never finishes at least not

325
00:16:40,810 --> 00:16:46,470
until a battery dies on this laptop so

326
00:16:46,470 --> 00:16:49,660
even with a very small data set getting

327
00:16:49,660 --> 00:16:51,730
the top end is very difficult with

328
00:16:51,730 --> 00:16:53,530
regular sequel however it is in test

329
00:16:53,530 --> 00:16:57,730
instantaneous with window functions so

330
00:16:57,730 --> 00:16:59,950
whenever you have these kinds of queries

331
00:16:59,950 --> 00:17:01,750
making use of window functions can

332
00:17:01,750 --> 00:17:03,070
greatly improve your applications

333
00:17:03,070 --> 00:17:09,670
performance alright so in in summary

334
00:17:09,670 --> 00:17:11,349
window functions do help you eliminate

335
00:17:11,349 --> 00:17:13,390
self joins like we've seen with both

336
00:17:13,390 --> 00:17:16,359
examples at the same time they make

337
00:17:16,359 --> 00:17:17,440
queries more readable

338
00:17:17,440 --> 00:17:19,390
no more duplicating of sub queries

339
00:17:19,390 --> 00:17:23,410
everywhere and in most use cases that

340
00:17:23,410 --> 00:17:25,720
you will find with window functions they

341
00:17:25,720 --> 00:17:27,459
will speed up your computation as

342
00:17:27,459 --> 00:17:31,780
opposed to using regular sequel all

343
00:17:31,780 --> 00:17:34,120
right here's a set of functions we do

344
00:17:34,120 --> 00:17:36,910
support this is almost an exhaustive

345
00:17:36,910 --> 00:17:39,790
list of what the standard suggests that

346
00:17:39,790 --> 00:17:42,900
we we do we do have a few exceptions but

347
00:17:42,900 --> 00:17:47,050
these are most of them

348
00:17:47,050 --> 00:17:49,270
right thank you very much for listening

349
00:17:49,270 --> 00:17:56,129
and if you have any questions yes

350
00:18:04,570 --> 00:18:07,570
yes

351
00:18:22,120 --> 00:18:26,000
okay so the question is can you use can

352
00:18:26,000 --> 00:18:28,190
you have user-defined functions used as

353
00:18:28,190 --> 00:18:31,309
window functions and the question is not

354
00:18:31,309 --> 00:18:34,040
yet but we actually do have this planned

355
00:18:34,040 --> 00:18:36,140
and it will most likely come up in the

356
00:18:36,140 --> 00:18:40,130
next release we have actually have a

357
00:18:40,130 --> 00:18:41,330
google Summer of Code student who's

358
00:18:41,330 --> 00:18:44,480
contributed a patch which allows user

359
00:18:44,480 --> 00:18:45,559
defined functions to be used as

360
00:18:45,559 --> 00:18:49,030
aggregate functions and then getting

361
00:18:49,030 --> 00:18:51,110
aggregate functions into window

362
00:18:51,110 --> 00:18:54,459
functions is a trivial step

363
00:18:57,029 --> 00:19:00,029
okay

364
00:19:07,360 --> 00:19:09,929
yes

365
00:19:11,830 --> 00:19:18,610
oh okay

366
00:19:18,610 --> 00:19:20,530
so I'm not quite sure I understand your

367
00:19:20,530 --> 00:19:23,520
statement sir

368
00:19:24,210 --> 00:19:27,110
when you write your own

369
00:19:32,050 --> 00:19:35,840
okay what what what I'm what I'm saying

370
00:19:35,840 --> 00:19:37,640
is that is that we have have

371
00:19:37,640 --> 00:19:39,830
user-defined functions as SQL functions

372
00:19:39,830 --> 00:19:44,510
procedures like you would define a yes

373
00:19:44,510 --> 00:19:45,920
that's what I mean what I said that we

374
00:19:45,920 --> 00:19:48,170
have planned for so we want you to allow

375
00:19:48,170 --> 00:19:50,210
to allow you to use regular sequel to

376
00:19:50,210 --> 00:19:52,430
define your own functions as window

377
00:19:52,430 --> 00:19:57,160
functions okay

378
00:20:00,390 --> 00:20:02,520
all right well if there are no more

379
00:20:02,520 --> 00:20:04,460
questions thank you very much

380
00:20:04,460 --> 00:20:12,150
[Applause]

