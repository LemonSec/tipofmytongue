1
00:00:00,000 --> 00:00:02,359
okay

2
00:00:04,480 --> 00:00:06,819
Hey hello everybody I would like to

3
00:00:06,819 --> 00:00:08,709
welcome you to the BSD dev room at

4
00:00:08,709 --> 00:00:12,580
FOSDEM 2017 thank you for being such a

5
00:00:12,580 --> 00:00:14,620
large crowd here I see a lot of faces I

6
00:00:14,620 --> 00:00:18,160
know which is good now I'm gonna tell

7
00:00:18,160 --> 00:00:21,160
you as like I'm gonna tell you as my

8
00:00:21,160 --> 00:00:23,290
first as I first talk today in this dev

9
00:00:23,290 --> 00:00:28,320
room about how we package source code of

10
00:00:28,320 --> 00:00:30,790
programs written and go in package

11
00:00:30,790 --> 00:00:32,950
source so first of all I would like a

12
00:00:32,950 --> 00:00:34,570
quick show of hands who here knows what

13
00:00:34,570 --> 00:00:38,730
packaged source is ok so I don't need to

14
00:00:38,730 --> 00:00:41,200
explain it and for a long time who here

15
00:00:41,200 --> 00:00:44,950
knows about go ah most people that's

16
00:00:44,950 --> 00:00:45,490
great

17
00:00:45,490 --> 00:00:51,430
it's awesome so so package stores

18
00:00:51,430 --> 00:00:53,500
obviously is the net VST packages

19
00:00:53,500 --> 00:00:56,770
collection which doesn't mean it runs

20
00:00:56,770 --> 00:00:58,239
only on that VST it means it's

21
00:00:58,239 --> 00:00:59,950
maintained by people in the net VC

22
00:00:59,950 --> 00:01:04,229
project contains over 17,000 packages

23
00:01:04,229 --> 00:01:06,670
it's been growing it's still growing

24
00:01:06,670 --> 00:01:09,249
after all these years and the really

25
00:01:09,249 --> 00:01:11,219
cool thing about it is that it runs on

26
00:01:11,219 --> 00:01:15,759
23 different platforms out of the box so

27
00:01:15,759 --> 00:01:18,999
that includes any sort of PSD you might

28
00:01:18,999 --> 00:01:20,740
want to throw at it like NetBSD OpenBSD

29
00:01:20,740 --> 00:01:27,219
FreeBSD dragonfly bit rig whatever it

30
00:01:27,219 --> 00:01:31,060
includes Linux even even Windows the you

31
00:01:31,060 --> 00:01:32,740
know the patch for Windows thing that

32
00:01:32,740 --> 00:01:34,799
they're doing is basically Linux and

33
00:01:34,799 --> 00:01:37,539
Psyche when I believe is supported as

34
00:01:37,539 --> 00:01:40,539
well some cool features that package

35
00:01:40,539 --> 00:01:42,969
sauce will give you you can if you're

36
00:01:42,969 --> 00:01:44,079
one of on one of the mainstream

37
00:01:44,079 --> 00:01:46,600
platforms you can use precompiled binary

38
00:01:46,600 --> 00:01:48,310
packages there's something called

39
00:01:48,310 --> 00:01:50,560
package in which is a lot like apt-get

40
00:01:50,560 --> 00:01:53,319
so really easy installation upgrade and

41
00:01:53,319 --> 00:01:57,219
so and so forth you can set it up

42
00:01:57,219 --> 00:02:00,039
unprivileged that can be super super

43
00:02:00,039 --> 00:02:01,899
helpful that means you don't need root

44
00:02:01,899 --> 00:02:06,579
for building packages or installing

45
00:02:06,579 --> 00:02:10,030
packages or using them so you could do a

46
00:02:10,030 --> 00:02:12,130
container like thing if you wanted to

47
00:02:12,130 --> 00:02:13,390
like poor-man's docker

48
00:02:13,390 --> 00:02:17,439
so to speak by by having a private

49
00:02:17,439 --> 00:02:18,190
package store

50
00:02:18,190 --> 00:02:19,960
three per major app that you just

51
00:02:19,960 --> 00:02:21,370
packaged together and it doesn't need

52
00:02:21,370 --> 00:02:23,770
root access to to do anything which is

53
00:02:23,770 --> 00:02:26,650
cool and there is a separate site

54
00:02:26,650 --> 00:02:28,050
project it's called whip

55
00:02:28,050 --> 00:02:29,280
work-in-progress

56
00:02:29,280 --> 00:02:31,210
so if you want to get started with

57
00:02:31,210 --> 00:02:33,760
packaged source after all that I've told

58
00:02:33,760 --> 00:02:37,180
you today it's super super easy to get

59
00:02:37,180 --> 00:02:41,290
an account for that it uses that uses

60
00:02:41,290 --> 00:02:43,810
git unlike main package doors which is

61
00:02:43,810 --> 00:02:46,600
CVS still and it's very low barrier to

62
00:02:46,600 --> 00:02:48,190
entry and it's really really very easy

63
00:02:48,190 --> 00:02:52,060
to to create packages now go a little

64
00:02:52,060 --> 00:02:56,020
more into detail a package in package

65
00:02:56,020 --> 00:02:59,860
stores minimally needs four files there

66
00:02:59,860 --> 00:03:02,860
make file dist info just discard

67
00:03:02,860 --> 00:03:04,630
description and the P list the packing

68
00:03:04,630 --> 00:03:08,920
list so so the make file is essentially

69
00:03:08,920 --> 00:03:11,800
a bunch of variables that are being

70
00:03:11,800 --> 00:03:14,910
declared and then at the end you include

71
00:03:14,910 --> 00:03:17,170
a1 include line that does all the work

72
00:03:17,170 --> 00:03:20,020
the dist info is automatically generated

73
00:03:20,020 --> 00:03:22,840
it contains check sums for the file

74
00:03:22,840 --> 00:03:26,709
you're gonna download description is

75
00:03:26,709 --> 00:03:29,080
something you need to write it it's well

76
00:03:29,080 --> 00:03:31,150
it's one or two paragraphs describing

77
00:03:31,150 --> 00:03:33,700
the package and the packing list again

78
00:03:33,700 --> 00:03:35,770
is auto generated by the infrastructure

79
00:03:35,770 --> 00:03:37,360
is a list of files in the package

80
00:03:37,360 --> 00:03:42,700
basically and the installation of of a

81
00:03:42,700 --> 00:03:44,709
packaged source package or the builds

82
00:03:44,709 --> 00:03:46,660
goes in these predefined stages so

83
00:03:46,660 --> 00:03:48,880
that's a structure that's basically set

84
00:03:48,880 --> 00:03:52,600
in stone and it's but it worked really

85
00:03:52,600 --> 00:03:54,250
well over the years and it's a good

86
00:03:54,250 --> 00:03:57,489
structure so I I probably forgot a bunch

87
00:03:57,489 --> 00:04:01,690
of stages here but first of all the

88
00:04:01,690 --> 00:04:03,130
first stage is fetched where you

89
00:04:03,130 --> 00:04:06,100
download the distribution file or you

90
00:04:06,100 --> 00:04:07,540
know you copy it from somewhere where

91
00:04:07,540 --> 00:04:10,239
you have it in your local red hole then

92
00:04:10,239 --> 00:04:15,040
you check the then you check the check

93
00:04:15,040 --> 00:04:16,959
sums to verify that you've actually got

94
00:04:16,959 --> 00:04:19,980
the correct file with the correct size

95
00:04:19,980 --> 00:04:22,780
then then you build tools you install

96
00:04:22,780 --> 00:04:24,760
dependencies that goes recursively does

97
00:04:24,760 --> 00:04:26,890
the same thing for every package you

98
00:04:26,890 --> 00:04:30,039
depend on then you extract the source

99
00:04:30,039 --> 00:04:31,990
code then you apply any patches on

100
00:04:31,990 --> 00:04:33,730
top of it if there any then there's a

101
00:04:33,730 --> 00:04:35,050
stage called build where you do the

102
00:04:35,050 --> 00:04:37,090
actual I've got configure obviously

103
00:04:37,090 --> 00:04:41,230
there's configured and build then stage

104
00:04:41,230 --> 00:04:43,510
install which is where you install it

105
00:04:43,510 --> 00:04:45,940
into a staging directory so called

106
00:04:45,940 --> 00:04:50,050
dester and then the packaged stage which

107
00:04:50,050 --> 00:04:51,940
takes whatever is in the dester or

108
00:04:51,940 --> 00:04:53,800
rather the subset that's in the P list

109
00:04:53,800 --> 00:04:59,800
and packs it together in a package and

110
00:04:59,800 --> 00:05:02,260
then package install takes that

111
00:05:02,260 --> 00:05:04,210
generated binary cliquish and installs

112
00:05:04,210 --> 00:05:08,380
it on your system right now we switch

113
00:05:08,380 --> 00:05:11,290
gears a little bit and go into the world

114
00:05:11,290 --> 00:05:17,080
of you know go so it's a fairly popular

115
00:05:17,080 --> 00:05:19,740
programming language to put it mildly

116
00:05:19,740 --> 00:05:21,880
it's in fact it's so popular that

117
00:05:21,880 --> 00:05:23,680
tomorrow there's going to be an entire

118
00:05:23,680 --> 00:05:29,650
devrel about go related topics in the in

119
00:05:29,650 --> 00:05:34,330
the departure all in the H building in

120
00:05:34,330 --> 00:05:36,580
the in the world of go there is a tool

121
00:05:36,580 --> 00:05:39,580
that's also called go and the go tool

122
00:05:39,580 --> 00:05:41,770
handles among other things

123
00:05:41,770 --> 00:05:43,720
fetching building and installing go

124
00:05:43,720 --> 00:05:45,850
programs and let's look at how it does

125
00:05:45,850 --> 00:05:47,130
that

126
00:05:47,130 --> 00:05:50,950
here's a simple example so I chose I

127
00:05:50,950 --> 00:05:52,750
chose a random package that was the last

128
00:05:52,750 --> 00:05:54,970
package I was working on don't the read

129
00:05:54,970 --> 00:05:58,450
too much into it so what's happening

130
00:05:58,450 --> 00:06:03,880
here is you tell it to go get something

131
00:06:03,880 --> 00:06:08,380
I'm sorry it's a little bit small the

132
00:06:08,380 --> 00:06:13,000
the three dots at the end is a is like

133
00:06:13,000 --> 00:06:15,790
is a is a meta pattern it's like a star

134
00:06:15,790 --> 00:06:18,340
except it matches subdirectory so every

135
00:06:18,340 --> 00:06:22,210
that means I want to install everything

136
00:06:22,210 --> 00:06:25,720
that's under this path download it and

137
00:06:25,720 --> 00:06:28,120
install it and so go get will download

138
00:06:28,120 --> 00:06:30,040
that you know this import paths look

139
00:06:30,040 --> 00:06:34,120
like URLs that's intentional then it

140
00:06:34,120 --> 00:06:36,340
sees that there is a dependency in there

141
00:06:36,340 --> 00:06:39,160
that we don't have so it tries to

142
00:06:39,160 --> 00:06:40,630
download that there's this little a

143
00:06:40,630 --> 00:06:42,330
little bit of a special case because

144
00:06:42,330 --> 00:06:44,360
it's sort of a

145
00:06:44,360 --> 00:06:46,729
assembling so to speak from an import

146
00:06:46,729 --> 00:06:49,789
path to an actual get repo somewhere

147
00:06:49,789 --> 00:06:53,900
else then it downloads that and then it

148
00:06:53,900 --> 00:06:57,430
builds the things in opposite order

149
00:06:57,430 --> 00:06:59,990
sounds you know similar enough to what

150
00:06:59,990 --> 00:07:01,729
we what we did in in package drawers

151
00:07:01,729 --> 00:07:05,569
right and there's this thing called the

152
00:07:05,569 --> 00:07:07,849
go path at the top if we look at this go

153
00:07:07,849 --> 00:07:10,669
path that we've just created you'll

154
00:07:10,669 --> 00:07:12,620
notice that there are no two directories

155
00:07:12,620 --> 00:07:14,810
called source and package there might be

156
00:07:14,810 --> 00:07:16,280
a third directory called bin if there

157
00:07:16,280 --> 00:07:19,940
was a binary and so source contains the

158
00:07:19,940 --> 00:07:21,379
source code for those things that we

159
00:07:21,379 --> 00:07:24,560
downloaded and it's arranged by import

160
00:07:24,560 --> 00:07:29,060
path that's a that's a standard way that

161
00:07:29,060 --> 00:07:32,629
go arranges its source code and then the

162
00:07:32,629 --> 00:07:35,419
package subdirectory has a another

163
00:07:35,419 --> 00:07:38,509
subdirectory for your platform so from

164
00:07:38,509 --> 00:07:39,740
the same source tree you know you could

165
00:07:39,740 --> 00:07:41,330
build for as many platforms as you want

166
00:07:41,330 --> 00:07:44,090
and it would not conflict and then it

167
00:07:44,090 --> 00:07:48,020
has you'll notice it has one level of

168
00:07:48,020 --> 00:07:49,759
directories less because each

169
00:07:49,759 --> 00:07:52,580
subdirectory in source is conceptually

170
00:07:52,580 --> 00:07:54,949
one package corresponding to one file in

171
00:07:54,949 --> 00:07:59,090
pkg now there is some mismatch between

172
00:07:59,090 --> 00:08:01,969
that because it does download then

173
00:08:01,969 --> 00:08:03,590
discover something then download some

174
00:08:03,590 --> 00:08:05,840
more stuffed and then discover some more

175
00:08:05,840 --> 00:08:08,270
and then build stuff recursively in the

176
00:08:08,270 --> 00:08:12,620
middle so that doesn't quite fit with

177
00:08:12,620 --> 00:08:16,240
the model we have in in packaged source

178
00:08:16,240 --> 00:08:18,830
now there's two possible approaches to

179
00:08:18,830 --> 00:08:22,729
this one of them is to basically ignore

180
00:08:22,729 --> 00:08:24,949
the ecosystem to say we only pet a we

181
00:08:24,949 --> 00:08:27,830
only package go itself and then tell the

182
00:08:27,830 --> 00:08:30,590
user just run go get something something

183
00:08:30,590 --> 00:08:33,440
and you'll get your binary and in fact

184
00:08:33,440 --> 00:08:36,260
that is what the people from the go team

185
00:08:36,260 --> 00:08:38,208
have recommended to me but I think

186
00:08:38,208 --> 00:08:41,059
that's unsatisfactory that's clearly not

187
00:08:41,059 --> 00:08:44,630
what you want because at some point

188
00:08:44,630 --> 00:08:46,850
there is some software that's written in

189
00:08:46,850 --> 00:08:49,490
gold that somebody wants to run and you

190
00:08:49,490 --> 00:08:51,380
know you don't want as you don't want

191
00:08:51,380 --> 00:08:52,970
them to be special snowflakes you want

192
00:08:52,970 --> 00:08:55,190
them to be packages such as all the rest

193
00:08:55,190 --> 00:08:57,199
of your system in package stores for

194
00:08:57,199 --> 00:08:58,100
example we have a link

195
00:08:58,100 --> 00:09:00,470
called package lint that's written in go

196
00:09:00,470 --> 00:09:04,579
so it's actually become a quite an

197
00:09:04,579 --> 00:09:06,500
important topic for a bunch of

198
00:09:06,500 --> 00:09:10,130
developers so let's deal with it some

199
00:09:10,130 --> 00:09:12,829
more some more thoughts on this is most

200
00:09:12,829 --> 00:09:15,649
of the packages or the individual say

201
00:09:15,649 --> 00:09:17,690
downloadable units in this go ecosystem

202
00:09:17,690 --> 00:09:21,139
are kind of small and do relatively

203
00:09:21,139 --> 00:09:23,120
little and in that they're similar to

204
00:09:23,120 --> 00:09:25,550
purl packages or maybe the the tech live

205
00:09:25,550 --> 00:09:27,560
ones or so so there's like hundreds of

206
00:09:27,560 --> 00:09:32,029
tiny ones or if you've ever used nodejs

207
00:09:32,029 --> 00:09:35,149
and you've used NPM like you install

208
00:09:35,149 --> 00:09:37,639
some some random tool you to npm install

209
00:09:37,639 --> 00:09:39,829
Bower for example and then you look in

210
00:09:39,829 --> 00:09:42,949
your npm modules directory and all of a

211
00:09:42,949 --> 00:09:44,089
sudden you have three hundred fifty

212
00:09:44,089 --> 00:09:45,529
modules in there and it's a little bit

213
00:09:45,529 --> 00:09:46,819
like that

214
00:09:46,819 --> 00:09:48,589
now the binary is once they're built

215
00:09:48,589 --> 00:09:50,240
they don't depend on anything really

216
00:09:50,240 --> 00:09:51,680
because it's statically linked

217
00:09:51,680 --> 00:09:57,920
except maybe Lipsy but okay and so so

218
00:09:57,920 --> 00:09:59,540
once you've built your binary package

219
00:09:59,540 --> 00:10:00,709
you can actually install it without

220
00:10:00,709 --> 00:10:02,480
having all the intermediate libraries

221
00:10:02,480 --> 00:10:04,610
there so that's kind of a nice property

222
00:10:04,610 --> 00:10:06,880
so we have a framework in package stores

223
00:10:06,880 --> 00:10:09,680
called gold package m'kay that allows

224
00:10:09,680 --> 00:10:12,380
you to write these packages relatively

225
00:10:12,380 --> 00:10:13,850
easily we're going to go through this

226
00:10:13,850 --> 00:10:17,029
goal ovh that we've seen before see how

227
00:10:17,029 --> 00:10:19,459
that works so first step when you want

228
00:10:19,459 --> 00:10:21,649
to package this thing we go to its home

229
00:10:21,649 --> 00:10:24,410
page or to its github in this case and

230
00:10:24,410 --> 00:10:28,240
we download the latest release oh look

231
00:10:28,240 --> 00:10:32,959
there are no releases hmm yeah okay so

232
00:10:32,959 --> 00:10:35,480
instead we search for the latest commit

233
00:10:35,480 --> 00:10:38,000
and take that date and take the the

234
00:10:38,000 --> 00:10:40,600
sha-1 of of the commit which is a

235
00:10:40,600 --> 00:10:43,730
endless hex string and now stick that in

236
00:10:43,730 --> 00:10:46,639
our make file here's the actual make

237
00:10:46,639 --> 00:10:48,139
file for this thing except there's one

238
00:10:48,139 --> 00:10:52,370
bit missing so you notice the the

239
00:10:52,370 --> 00:10:54,160
version number is a little bit awkward

240
00:10:54,160 --> 00:10:58,189
we've chosen a category we have this

241
00:10:58,189 --> 00:11:02,600
this weird tag singing here and then the

242
00:11:02,600 --> 00:11:06,170
the more interesting bits for for go

243
00:11:06,170 --> 00:11:09,260
specifically as probably this this block

244
00:11:09,260 --> 00:11:12,309
here so

245
00:11:12,309 --> 00:11:15,009
so the go source path is basically where

246
00:11:15,009 --> 00:11:18,930
in in your cope half this thing would

247
00:11:18,930 --> 00:11:21,430
would be placed so it's it the the

248
00:11:21,430 --> 00:11:23,889
import path you want for that package in

249
00:11:23,889 --> 00:11:27,639
the end and the goatest base is the

250
00:11:27,639 --> 00:11:30,160
directory name that your github download

251
00:11:30,160 --> 00:11:32,170
will have because it's if you just

252
00:11:32,170 --> 00:11:33,759
extract the file it will not be in the

253
00:11:33,759 --> 00:11:35,649
correct directory so this does a little

254
00:11:35,649 --> 00:11:38,290
bit of gymnastics to move it into a

255
00:11:38,290 --> 00:11:43,179
newly created go path so to speak to

256
00:11:43,179 --> 00:11:48,550
this subdirectory and a new build and it

257
00:11:48,550 --> 00:11:50,319
looks like this again apologies for the

258
00:11:50,319 --> 00:11:54,009
for the font size and there's this year

259
00:11:54,009 --> 00:11:55,629
happens well of course there was a

260
00:11:55,629 --> 00:11:57,449
dependency we don't have that package

261
00:11:57,449 --> 00:12:00,009
but wait you say I have that package

262
00:12:00,009 --> 00:12:02,559
from earlier right I downloaded it but

263
00:12:02,559 --> 00:12:06,009
yeah you you don't want that you do you

264
00:12:06,009 --> 00:12:08,800
want your your built to be hermetic in

265
00:12:08,800 --> 00:12:13,059
the sense that it uses only dependencies

266
00:12:13,059 --> 00:12:16,569
it has actually declared so that in the

267
00:12:16,569 --> 00:12:18,220
end your dependency tree makes make

268
00:12:18,220 --> 00:12:21,490
sense so it so it's clear that it's a

269
00:12:21,490 --> 00:12:23,470
good thing that it's not finding it now

270
00:12:23,470 --> 00:12:26,800
let's add that dependency we we add an

271
00:12:26,800 --> 00:12:30,550
include for the building three dot Mk of

272
00:12:30,550 --> 00:12:32,769
this of this package which conveniently

273
00:12:32,769 --> 00:12:36,279
enough already exists then we rerun make

274
00:12:36,279 --> 00:12:39,579
and you see kind of inspect you not very

275
00:12:39,579 --> 00:12:43,179
spectacular it builds so what happened

276
00:12:43,179 --> 00:12:47,079
now what did this include built link

277
00:12:47,079 --> 00:12:51,160
something something actually do so

278
00:12:51,160 --> 00:12:53,980
buildling is a framework part of package

279
00:12:53,980 --> 00:12:57,420
doors it was written originally for I

280
00:12:57,420 --> 00:13:00,009
suppose the package is written in C or

281
00:13:00,009 --> 00:13:00,959
C++

282
00:13:00,959 --> 00:13:03,910
many of these use auto cons and if

283
00:13:03,910 --> 00:13:05,259
you're trying to package something is

284
00:13:05,259 --> 00:13:08,589
uses auto cons you know it checks for

285
00:13:08,589 --> 00:13:11,369
presence or absence of certain libraries

286
00:13:11,369 --> 00:13:17,259
so if you happen to have an extra

287
00:13:17,259 --> 00:13:19,149
library installed that the package may

288
00:13:19,149 --> 00:13:20,769
link against it can add that as a

289
00:13:20,769 --> 00:13:22,540
dependency and then it's not recorded in

290
00:13:22,540 --> 00:13:24,939
your package but the binary does depend

291
00:13:24,939 --> 00:13:25,830
on it

292
00:13:25,830 --> 00:13:28,450
so that's a big problem I think OpenBSD

293
00:13:28,450 --> 00:13:30,580
had a long long history of sort of

294
00:13:30,580 --> 00:13:35,200
purging unwanted dependencies package

295
00:13:35,200 --> 00:13:36,580
source did this building thing instead

296
00:13:36,580 --> 00:13:39,070
and it turns out and turns out it works

297
00:13:39,070 --> 00:13:42,760
beautifully for forego because what we

298
00:13:42,760 --> 00:13:48,640
do we we create a shadow go path where

299
00:13:48,640 --> 00:13:51,209
we link in the entire source code and

300
00:13:51,209 --> 00:13:55,270
pack N and also in also the package

301
00:13:55,270 --> 00:13:58,180
files like the entire contents of all

302
00:13:58,180 --> 00:14:04,000
the declared dependencies and then we

303
00:14:04,000 --> 00:14:06,100
set the environment variable to tell the

304
00:14:06,100 --> 00:14:07,690
go tool that it should look therefore

305
00:14:07,690 --> 00:14:12,850
code a networks just fine I'll show you

306
00:14:12,850 --> 00:14:16,149
how the building 3mk works in this case

307
00:14:16,149 --> 00:14:18,910
we show you the one for this package

308
00:14:18,910 --> 00:14:21,160
because we want to allow other packages

309
00:14:21,160 --> 00:14:22,990
to depend on it obviously there's a

310
00:14:22,990 --> 00:14:24,610
little tool called create build link

311
00:14:24,610 --> 00:14:27,490
that basically creates this thing on its

312
00:14:27,490 --> 00:14:31,000
own so what it does this is the magic

313
00:14:31,000 --> 00:14:33,670
bit here the building content filter so

314
00:14:33,670 --> 00:14:35,260
it takes the entire contents of the go

315
00:14:35,260 --> 00:14:37,600
PKG subdirectory which is where we

316
00:14:37,600 --> 00:14:42,060
install the source and PKG directories

317
00:14:42,060 --> 00:14:47,649
and ads and and build links it in the

318
00:14:47,649 --> 00:14:49,600
dependency method is built so that means

319
00:14:49,600 --> 00:14:51,970
it will not be a dependency of the final

320
00:14:51,970 --> 00:14:53,920
package it's only a built dependency

321
00:14:53,920 --> 00:14:58,649
which is what it is and here it hasn't

322
00:14:58,649 --> 00:15:01,300
we have repeated this include so if you

323
00:15:01,300 --> 00:15:05,410
depend on go OVH it'll transitively

324
00:15:05,410 --> 00:15:07,300
depend on go in II so we can actually

325
00:15:07,300 --> 00:15:12,730
build the thing this has another very

326
00:15:12,730 --> 00:15:14,980
nice property and also very important

327
00:15:14,980 --> 00:15:19,690
property the the compiled source code so

328
00:15:19,690 --> 00:15:21,459
the way that go the way the gold fool

329
00:15:21,459 --> 00:15:28,540
works is a little bit like make if you

330
00:15:28,540 --> 00:15:29,950
know if any of the source files are

331
00:15:29,950 --> 00:15:31,480
newer than the binary filed and the

332
00:15:31,480 --> 00:15:33,520
binary file is stale so it needs to be

333
00:15:33,520 --> 00:15:36,850
rebuilt if if your compiler is new as a

334
00:15:36,850 --> 00:15:38,180
different version

335
00:15:38,180 --> 00:15:40,100
the compiled file the compiled files

336
00:15:40,100 --> 00:15:42,410
also still needs to be rebuilt however

337
00:15:42,410 --> 00:15:44,990
you can't just rebuild random things

338
00:15:44,990 --> 00:15:46,670
that are already installed because their

339
00:15:46,670 --> 00:15:48,980
file checksums have been recorded and

340
00:15:48,980 --> 00:15:50,780
also the directory is hopefully

341
00:15:50,780 --> 00:15:56,510
read-only so when it's when you're

342
00:15:56,510 --> 00:16:00,470
building the tree in then it can replace

343
00:16:00,470 --> 00:16:02,900
those compiled files with newer versions

344
00:16:02,900 --> 00:16:05,240
if it needs to and it doesn't count

345
00:16:05,240 --> 00:16:08,780
because you just delete the the shadow

346
00:16:08,780 --> 00:16:11,240
go path once you're done so that is

347
00:16:11,240 --> 00:16:12,380
actually that solves a lot of problems

348
00:16:12,380 --> 00:16:17,300
and it makes it kind of lower the

349
00:16:17,300 --> 00:16:21,050
mismatch between package stores and an

350
00:16:21,050 --> 00:16:26,390
end goal now I would say so this is

351
00:16:26,390 --> 00:16:27,890
basically where we are but the problem

352
00:16:27,890 --> 00:16:29,990
is it's still relatively tedious so to

353
00:16:29,990 --> 00:16:32,960
give you an example because as anecdotes

354
00:16:32,960 --> 00:16:35,510
are totally what we need give you

355
00:16:35,510 --> 00:16:36,740
example I'm working on something called

356
00:16:36,740 --> 00:16:39,200
caddy it's a web server written in go

357
00:16:39,200 --> 00:16:42,550
very high-performance very cool project

358
00:16:42,550 --> 00:16:45,350
encryption built in zero config and so

359
00:16:45,350 --> 00:16:46,460
on

360
00:16:46,460 --> 00:16:49,850
has hundreds of other go packages that

361
00:16:49,850 --> 00:16:51,320
it depends on and if you package them

362
00:16:51,320 --> 00:16:53,600
one by one then you're gonna be like me

363
00:16:53,600 --> 00:16:57,010
two months later still packaging things

364
00:16:57,010 --> 00:17:00,760
so yeah this could be automated right

365
00:17:00,760 --> 00:17:04,970
yes the next logical step in in this

366
00:17:04,970 --> 00:17:07,670
direction however is not trivial you've

367
00:17:07,670 --> 00:17:09,380
seen a lot of metadata that I've

368
00:17:09,380 --> 00:17:12,650
manually added basically like you know

369
00:17:12,650 --> 00:17:15,380
because there was no release the finding

370
00:17:15,380 --> 00:17:17,240
the latest commit and date and so on and

371
00:17:17,240 --> 00:17:20,030
putting that in the comment which I have

372
00:17:20,030 --> 00:17:21,980
mentioned is a one-line description of

373
00:17:21,980 --> 00:17:23,990
the package I don't know where to get

374
00:17:23,990 --> 00:17:25,369
that from what's the license of the

375
00:17:25,369 --> 00:17:30,890
package does not there's no so unlike

376
00:17:30,890 --> 00:17:32,780
Perl packages there's no manifest that

377
00:17:32,780 --> 00:17:34,540
has these things recorded in a neatly

378
00:17:34,540 --> 00:17:40,610
consumable way which is very sad then

379
00:17:40,610 --> 00:17:43,730
the long description readme dot MD files

380
00:17:43,730 --> 00:17:45,770
sometimes leave a lot to be desired you

381
00:17:45,770 --> 00:17:47,270
can't just take the first few paragraphs

382
00:17:47,270 --> 00:17:49,190
and say this is my description that

383
00:17:49,190 --> 00:17:51,600
doesn't work well

384
00:17:51,600 --> 00:17:54,330
then the whole canonical import path

385
00:17:54,330 --> 00:17:56,790
versus source code location that the

386
00:17:56,790 --> 00:17:58,500
tooling can help you so you saw the goat

387
00:17:58,500 --> 00:17:59,970
you will discover where the thing

388
00:17:59,970 --> 00:18:01,590
actually is you can use that

389
00:18:01,590 --> 00:18:04,980
programmatically the same way you could

390
00:18:04,980 --> 00:18:06,290
do dependency resolution

391
00:18:06,290 --> 00:18:08,460
programmatically you can ask the go tool

392
00:18:08,460 --> 00:18:10,740
which which the other packages does this

393
00:18:10,740 --> 00:18:12,690
thing depend on but please filter out

394
00:18:12,690 --> 00:18:15,360
the standard ones and then you match

395
00:18:15,360 --> 00:18:18,600
that against packages you have already

396
00:18:18,600 --> 00:18:20,130
in your tree so you can write the

397
00:18:20,130 --> 00:18:22,170
dependence files that would be maybe a

398
00:18:22,170 --> 00:18:27,179
worthwhile first step then some some of

399
00:18:27,179 --> 00:18:28,710
those have extra dependencies for

400
00:18:28,710 --> 00:18:30,330
testing unfortunately package source

401
00:18:30,330 --> 00:18:33,240
doesn't have a concept of what obviously

402
00:18:33,240 --> 00:18:36,000
called regressed depends so you can't

403
00:18:36,000 --> 00:18:39,210
say package XY is only used for the

404
00:18:39,210 --> 00:18:42,510
regression tests the way I've been doing

405
00:18:42,510 --> 00:18:45,179
that is I put it in the the build

406
00:18:45,179 --> 00:18:46,980
dependencies in the make file but not in

407
00:18:46,980 --> 00:18:50,730
the build link file but it's probably

408
00:18:50,730 --> 00:18:52,950
not the greatest solution sometimes

409
00:18:52,950 --> 00:18:55,050
things they depend on see libraries like

410
00:18:55,050 --> 00:18:57,600
you have gold wrappers that you know

411
00:18:57,600 --> 00:19:00,990
reference e library yeah so I've

412
00:19:00,990 --> 00:19:02,790
previously written such a thing for perl

413
00:19:02,790 --> 00:19:05,040
packages actually what's called c-pen to

414
00:19:05,040 --> 00:19:08,700
port or Sipan to package on the on a

415
00:19:08,700 --> 00:19:11,130
package store side so maybe yeah maybe

416
00:19:11,130 --> 00:19:13,520
I'll should tackle that at some point

417
00:19:13,520 --> 00:19:15,600
would be a worthwhile thing to do a

418
00:19:15,600 --> 00:19:17,429
thing because the go ecosystem is large

419
00:19:17,429 --> 00:19:19,980
and has many interesting things that may

420
00:19:19,980 --> 00:19:22,740
not be I would say may not be known

421
00:19:22,740 --> 00:19:25,620
enough in like the circle of people who

422
00:19:25,620 --> 00:19:28,380
were likely to use a net VST but there's

423
00:19:28,380 --> 00:19:32,970
some cool stuff in there and so so as my

424
00:19:32,970 --> 00:19:37,350
last sort of point I'm trying to make

425
00:19:37,350 --> 00:19:40,800
and that I also promised I would make in

426
00:19:40,800 --> 00:19:43,590
the description of this talk is as an

427
00:19:43,590 --> 00:19:47,070
upstream author like as the author of a

428
00:19:47,070 --> 00:19:49,080
go package what can you do to make it

429
00:19:49,080 --> 00:19:51,570
easy to package the software that you

430
00:19:51,570 --> 00:19:55,559
have written so my first my first point

431
00:19:55,559 --> 00:19:58,590
is give us releases please like a lot of

432
00:19:58,590 --> 00:20:00,540
the goal community does never releases

433
00:20:00,540 --> 00:20:02,220
anything they just push on github

434
00:20:02,220 --> 00:20:03,980
continuously

435
00:20:03,980 --> 00:20:06,500
and if you do releases please also do

436
00:20:06,500 --> 00:20:08,720
release notes because we like seeing

437
00:20:08,720 --> 00:20:15,799
what changed then we've we've sort of

438
00:20:15,799 --> 00:20:19,789
tackle the whole GoGet process so it

439
00:20:19,789 --> 00:20:21,409
would be nice if your software supported

440
00:20:21,409 --> 00:20:26,210
that and so I've seen I've seen things I

441
00:20:26,210 --> 00:20:28,279
don't remember what what prog what

442
00:20:28,279 --> 00:20:29,929
project this was it delivered and

443
00:20:29,929 --> 00:20:32,330
installed go and said just let's just

444
00:20:32,330 --> 00:20:34,400
compile and run this thing and it'll do

445
00:20:34,400 --> 00:20:38,120
the rest this is not likely to work

446
00:20:38,120 --> 00:20:41,630
unfortunately and the the most horrible

447
00:20:41,630 --> 00:20:44,409
part is when your software during builds

448
00:20:44,409 --> 00:20:47,450
for example this installer go during

449
00:20:47,450 --> 00:20:50,559
build decides to download more stuff

450
00:20:50,559 --> 00:20:53,720
that does not fit at all with the

451
00:20:53,720 --> 00:20:56,450
Hermetic building that we would like to

452
00:20:56,450 --> 00:21:02,690
have and that is just necessary for

453
00:21:02,690 --> 00:21:04,549
rapid for making any sort of record

454
00:21:04,549 --> 00:21:08,480
usable package out of your code so don't

455
00:21:08,480 --> 00:21:11,659
do this please and also please some some

456
00:21:11,659 --> 00:21:13,010
readme is are really bad as I said

457
00:21:13,010 --> 00:21:14,779
please put more sensible descriptions

458
00:21:14,779 --> 00:21:16,390
what what does your thing actually do

459
00:21:16,390 --> 00:21:21,440
maybe for for just libraries it might be

460
00:21:21,440 --> 00:21:23,419
more more fruitful to look at the go doc

461
00:21:23,419 --> 00:21:25,880
output because many people have crappy

462
00:21:25,880 --> 00:21:28,460
read miss but good comments in the code

463
00:21:28,460 --> 00:21:31,640
that might be an idea and avoid circular

464
00:21:31,640 --> 00:21:33,340
dependency is that's a good one as well

465
00:21:33,340 --> 00:21:38,380
so the go get works on the level of

466
00:21:38,380 --> 00:21:40,580
package like it builds package by

467
00:21:40,580 --> 00:21:42,049
package

468
00:21:42,049 --> 00:21:44,120
whereas package stores typically works

469
00:21:44,120 --> 00:21:47,840
on a per protist file so basically all

470
00:21:47,840 --> 00:21:51,980
of for example golang.org slash X slash

471
00:21:51,980 --> 00:21:55,789
net is one one entity for us and there

472
00:21:55,789 --> 00:21:57,919
used to be a circle dependency it might

473
00:21:57,919 --> 00:21:59,990
still be in there there's a package and

474
00:21:59,990 --> 00:22:04,279
go net that depends on the metadata

475
00:22:04,279 --> 00:22:08,260
package from from the google cloud

476
00:22:08,289 --> 00:22:12,740
libraries and then this and then there's

477
00:22:12,740 --> 00:22:14,539
another package in the google cloud

478
00:22:14,539 --> 00:22:16,669
libraries that depends on something from

479
00:22:16,669 --> 00:22:17,450
the

480
00:22:17,450 --> 00:22:20,450
that repo so if you try to build first

481
00:22:20,450 --> 00:22:24,139
one than the other you're gonna fail so

482
00:22:24,139 --> 00:22:25,730
you have to split one of the two to get

483
00:22:25,730 --> 00:22:27,139
rid of the circular dependency and

484
00:22:27,139 --> 00:22:29,000
that's really crappy so please don't do

485
00:22:29,000 --> 00:22:34,940
it and that's mostly it thank you

486
00:22:34,940 --> 00:22:37,549
here are some links the first one is the

487
00:22:37,549 --> 00:22:38,870
link to this event you can leave your

488
00:22:38,870 --> 00:22:41,539
feedback here I'll upload the slides a

489
00:22:41,539 --> 00:22:45,470
little bit later then package stores org

490
00:22:45,470 --> 00:22:47,690
don't need to explain goaling org also

491
00:22:47,690 --> 00:22:50,059
package stores se is super cool it's a

492
00:22:50,059 --> 00:22:53,210
browsable package directory of the

493
00:22:53,210 --> 00:22:54,440
things that are in there so you can

494
00:22:54,440 --> 00:22:58,159
search for something like go OVH or

495
00:22:58,159 --> 00:23:00,019
whatever and it will pop up a little

496
00:23:00,019 --> 00:23:01,639
page it says that gives you the

497
00:23:01,639 --> 00:23:03,019
description gives you a link to the

498
00:23:03,019 --> 00:23:05,450
sources you can you can click on the

499
00:23:05,450 --> 00:23:07,130
dependencies reverse dependencies that's

500
00:23:07,130 --> 00:23:10,490
really nice and I have one bonus slide

501
00:23:10,490 --> 00:23:11,990
maybe if there are some questions first

502
00:23:11,990 --> 00:23:19,250
add any questions no okay here's the

503
00:23:19,250 --> 00:23:23,139
bonus slide so net BST is kind of cool

504
00:23:23,139 --> 00:23:27,320
if you're using cloud stuff because of

505
00:23:27,320 --> 00:23:30,470
its Zen support it runs great on a bunch

506
00:23:30,470 --> 00:23:33,409
of Zen based cloud solutions such as

507
00:23:33,409 --> 00:23:38,570
Amazon ec2 and starting from the FPC 7-1

508
00:23:38,570 --> 00:23:43,549
are a release candidate one we finally

509
00:23:43,549 --> 00:23:47,149
have enough stuff to be able to run

510
00:23:47,149 --> 00:23:49,309
under Google compute engine which is

511
00:23:49,309 --> 00:23:53,570
sort of KVM based however there's still

512
00:23:53,570 --> 00:23:57,200
a couple of bugs it's not quite easy to

513
00:23:57,200 --> 00:24:00,620
to create such images so there's same

514
00:24:00,620 --> 00:24:03,350
semi-official for support coming this is

515
00:24:03,350 --> 00:24:04,700
something I've been doing in my day job

516
00:24:04,700 --> 00:24:06,440
it's not released yet that URL doesn't

517
00:24:06,440 --> 00:24:08,659
work yet it'll be there in one or two

518
00:24:08,659 --> 00:24:13,100
weeks and it's basically a script where

519
00:24:13,100 --> 00:24:16,000
you can enter a release and the platform

520
00:24:16,000 --> 00:24:21,769
386 or MD 64 it builds you an image and

521
00:24:21,769 --> 00:24:23,269
then it can upload and and there's a

522
00:24:23,269 --> 00:24:24,919
readme that explains how to use it you

523
00:24:24,919 --> 00:24:27,559
can upload that to a Google cloud

524
00:24:27,559 --> 00:24:29,419
platform and create your own net piece

525
00:24:29,419 --> 00:24:30,390
DBMS

526
00:24:30,390 --> 00:24:32,070
thank you very much

527
00:24:32,070 --> 00:24:42,050
[Applause]

