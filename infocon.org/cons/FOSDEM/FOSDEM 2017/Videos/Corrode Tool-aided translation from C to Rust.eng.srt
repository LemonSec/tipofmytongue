1
00:00:04,630 --> 00:00:08,530
our speaker is Jamie sharp and it's

2
00:00:08,530 --> 00:00:09,790
about rocket science

3
00:00:09,790 --> 00:00:11,920
I was literally because he will called

4
00:00:11,920 --> 00:00:13,449
for an open source rocket

5
00:00:13,449 --> 00:00:17,500
I got Scarabus on very serious renown he

6
00:00:17,500 --> 00:00:19,240
also created a website to connect people

7
00:00:19,240 --> 00:00:22,030
with unlike comas that has over five

8
00:00:22,030 --> 00:00:27,000
million pages in almost 500,000 comics

9
00:00:27,000 --> 00:00:30,100
50,000 I told you serious stuff here

10
00:00:30,100 --> 00:00:32,558
once you fix them it's over Baghdad

11
00:00:32,558 --> 00:00:35,140
existed since since he was three years

12
00:00:35,140 --> 00:00:39,069
old that's an impressive thing the

13
00:00:39,069 --> 00:00:40,420
contractor who just wants to make

14
00:00:40,420 --> 00:00:42,280
computing reliable and safe for us

15
00:00:42,280 --> 00:00:45,239
welcome Jamie

16
00:00:55,160 --> 00:00:58,360
[Applause]

17
00:01:41,170 --> 00:01:44,260
[Music]

18
00:01:46,890 --> 00:01:49,810
is an interesting tool for trying to

19
00:01:49,810 --> 00:01:52,420
address cybersecurity issues among

20
00:01:52,420 --> 00:01:59,739
others because memory safety features of

21
00:01:59,739 --> 00:02:04,810
the language through its type system

22
00:02:04,810 --> 00:02:07,420
addresses many common security

23
00:02:07,420 --> 00:02:09,520
vulnerabilities but for everyone's other

24
00:02:09,520 --> 00:02:12,250
sorts of things this is also an

25
00:02:12,250 --> 00:02:23,340
interesting tool in terms techniques

26
00:02:24,350 --> 00:02:28,880
a union type in the language can let you

27
00:02:28,880 --> 00:02:31,220
structure your code in a way that makes

28
00:02:31,220 --> 00:03:39,770
it easier to and this is working in C so

29
00:03:39,770 --> 00:03:43,550
just basic engineering things that the

30
00:03:43,550 --> 00:03:45,140
rest community is really focused on

31
00:03:45,140 --> 00:03:48,290
usability of the language and these

32
00:03:48,290 --> 00:03:49,820
these broader software engineering

33
00:03:49,820 --> 00:03:55,700
issues there's other projects that we've

34
00:03:55,700 --> 00:03:59,540
been experimenting with innovating types

35
00:03:59,540 --> 00:04:02,520
of the existing C code to rust like the

36
00:04:02,520 --> 00:04:05,340
emacs incrementally according to rest

37
00:04:05,340 --> 00:04:07,470
because we didn't have enough operating

38
00:04:07,470 --> 00:04:14,220
systems projects in West yet the

39
00:04:14,220 --> 00:04:21,238
experimental part of the educational

40
00:04:21,238 --> 00:04:24,990
exercise just to see how there's folks

41
00:04:24,990 --> 00:04:26,460
to rewrite in core utils there's a bunch

42
00:04:26,460 --> 00:04:28,380
of news projects right you can dig

43
00:04:28,380 --> 00:04:30,360
through reddit or whatever and find a

44
00:04:30,360 --> 00:04:33,450
bunch of private analyst so maybe maybe

45
00:04:33,450 --> 00:04:37,969
what we should do is everything that's

46
00:04:39,020 --> 00:04:53,400
just in small projects we've got maybe

47
00:04:53,400 --> 00:04:56,400
thousands of lines of C ranging up to to

48
00:04:56,400 --> 00:04:58,140
bigger projects with millions of lines

49
00:04:58,140 --> 00:05:02,990
of C if you go and try a handle rewrite

50
00:05:04,010 --> 00:05:05,600
[Applause]

51
00:05:05,600 --> 00:05:15,900
introduce new bugs it's super tedious

52
00:05:15,900 --> 00:05:19,170
process you don't to do this so maybe

53
00:05:19,170 --> 00:05:21,450
maybe the answer is let's not do this by

54
00:05:21,450 --> 00:05:24,510
hand maybe the answer is we should

55
00:05:24,510 --> 00:05:26,520
automate this process of translating C

56
00:05:26,520 --> 00:05:28,830
to rust so I'd like to tell you about

57
00:05:28,830 --> 00:05:30,639
this project open

58
00:05:30,639 --> 00:05:37,030
less than a year now called corrode in

59
00:05:37,030 --> 00:05:39,729
the process of translating C code to

60
00:05:39,729 --> 00:05:42,580
rust so with some particular principles

61
00:05:42,580 --> 00:05:46,840
that corrode follows pledge aims to

62
00:05:46,840 --> 00:05:50,860
preserve safety and correctness so given

63
00:05:50,860 --> 00:05:52,990
that we're studying from C source which

64
00:05:52,990 --> 00:05:54,969
is not particularly safe and often not

65
00:05:54,969 --> 00:05:57,219
particularly correct preserving its

66
00:05:57,219 --> 00:05:58,990
existing memo of safety and correctness

67
00:05:58,990 --> 00:06:06,550
is not a very high bar so is not safe

68
00:06:06,550 --> 00:06:10,150
frost it is rest in the unsafe subset of

69
00:06:10,150 --> 00:06:13,449
the language that means that it might

70
00:06:13,449 --> 00:06:16,360
crash in spite of the usual promises

71
00:06:16,360 --> 00:06:21,030
that rust provides and memory safety

72
00:06:21,479 --> 00:06:30,639
safe as the input was is that people

73
00:06:30,639 --> 00:06:31,779
always ask me about what do you do

74
00:06:31,779 --> 00:06:33,969
undefined behavior in the C source that

75
00:06:33,969 --> 00:06:35,800
you're translating and the answer is

76
00:06:35,800 --> 00:06:39,759
that I try to really reasonably can pick

77
00:06:39,759 --> 00:06:44,110
a unsurprising definition for undefined

78
00:06:44,110 --> 00:06:46,900
behavior given the creator's acting as

79
00:06:46,900 --> 00:06:51,099
the C compiler undefined behavior than C

80
00:06:51,099 --> 00:06:52,779
means that the C compiler gets to do

81
00:06:52,779 --> 00:06:56,710
whatever it wants to and so I try to to

82
00:06:56,710 --> 00:06:59,800
pick what I'm doing as something that

83
00:06:59,800 --> 00:07:01,270
will be least surprising to the

84
00:07:01,270 --> 00:07:05,400
programmer principle of code is

85
00:07:05,400 --> 00:07:07,870
preserving maintainability to the extent

86
00:07:07,870 --> 00:07:10,240
possible so if you started with code

87
00:07:10,240 --> 00:07:13,560
that you could actually maintain

88
00:07:13,780 --> 00:07:16,660
of of corrode should be rust that you

89
00:07:16,660 --> 00:07:34,180
can actually maintain preserve the

90
00:07:34,180 --> 00:07:35,560
structure of the code as much as

91
00:07:35,560 --> 00:07:38,170
possible preserve female as much as

92
00:07:38,170 --> 00:07:40,540
possible that may be the program was

93
00:07:40,540 --> 00:07:45,550
originally written and finally cleared

94
00:07:45,550 --> 00:07:49,300
aims to preserve ABI so if you run code

95
00:07:49,300 --> 00:07:52,260
on a piece of C source the output rest

96
00:07:52,260 --> 00:07:58,270
should still link against other C code

97
00:07:58,270 --> 00:08:00,100
that the original C code was able to

98
00:08:00,100 --> 00:08:01,510
link against this it should be

99
00:08:01,510 --> 00:08:03,760
compatible at the level of binary

100
00:08:03,760 --> 00:08:12,960
linking code to be used as a way of

101
00:08:12,960 --> 00:08:17,830
making rest be a drop-in replacement as

102
00:08:17,830 --> 00:08:21,460
much as little of the existing C source

103
00:08:21,460 --> 00:08:41,770
the making code more safe than than the

104
00:08:41,770 --> 00:08:45,180
original or more correct somehow

105
00:08:45,180 --> 00:08:58,720
the idea is that it is easier to for you

106
00:08:58,720 --> 00:09:31,390
to take this improvement to do this for

107
00:09:31,390 --> 00:09:36,240
instance is a giant pile of rest and say

108
00:09:36,240 --> 00:09:39,580
this function this function this one

109
00:09:39,580 --> 00:09:41,110
function has been pissing me off for

110
00:09:41,110 --> 00:09:48,030
years I'm going to rewrite unless first

111
00:09:48,270 --> 00:09:52,390
a function that is the most safety

112
00:09:52,390 --> 00:09:54,730
critical or something whatever approach

113
00:09:54,730 --> 00:09:56,110
you want to take you can do it

114
00:09:56,110 --> 00:10:00,070
incrementally by using corrode this is

115
00:10:00,070 --> 00:10:05,380
good we have some tools that gets I can

116
00:10:05,380 --> 00:10:11,250
you have questions to say thanks to that

117
00:10:11,250 --> 00:10:15,150
give us from C to rust

118
00:10:19,060 --> 00:10:22,900
should be is this a good idea

119
00:10:23,230 --> 00:10:26,590
and then suggest some principles here

120
00:10:26,590 --> 00:10:30,350
first of all if you just want to

121
00:10:30,350 --> 00:10:32,390
translate something from C to rust in

122
00:10:32,390 --> 00:10:34,430
order to learn something means

123
00:10:34,430 --> 00:10:36,770
absolutely do this is an excellent

124
00:10:36,770 --> 00:10:41,090
exercise you learn at a time I certainly

125
00:10:41,090 --> 00:10:44,410
learned a time just fell in corrode

126
00:10:45,460 --> 00:10:49,670
actually use your translated rest I'd

127
00:10:49,670 --> 00:10:53,240
like to recommend three principles first

128
00:10:53,240 --> 00:10:55,700
can you demonstrate that the rest is

129
00:10:55,700 --> 00:11:01,040
equivalent to the original see that you

130
00:11:01,040 --> 00:11:02,810
might do that demonstration when that

131
00:11:02,810 --> 00:11:05,270
would be that assuming code is

132
00:11:05,270 --> 00:11:08,030
trustworthy if you can say well I used

133
00:11:08,030 --> 00:11:12,200
corrode then then yes that's that's all

134
00:11:12,200 --> 00:11:15,530
you need to prove right that that these

135
00:11:15,530 --> 00:11:17,390
must be proven because corrode did all

136
00:11:17,390 --> 00:11:20,330
the work does not yet trustworthy but

137
00:11:20,330 --> 00:11:21,700
I'm working on it

138
00:11:21,700 --> 00:11:24,300
another approach might be

139
00:11:24,300 --> 00:11:25,740
you're working with a project that has a

140
00:11:25,740 --> 00:11:28,560
test suite you know assuming that it

141
00:11:28,560 --> 00:11:30,810
passed the test suite before if it still

142
00:11:30,810 --> 00:11:32,730
passes the test suite after switching to

143
00:11:32,730 --> 00:11:35,120
rest that's pretty good evidence right

144
00:11:35,120 --> 00:11:42,630
no principle is that rust advantages are

145
00:11:42,630 --> 00:11:44,580
actually going to help with the kinds of

146
00:11:44,580 --> 00:11:46,920
bugs the project faces so if you're

147
00:11:46,920 --> 00:11:48,570
looking if you're looking at the project

148
00:11:48,570 --> 00:11:52,380
that has a significant component where

149
00:11:52,380 --> 00:11:57,200
it's interacting with some trusted data

150
00:11:58,730 --> 00:12:07,580
switching to rust is a good idea and

151
00:12:07,580 --> 00:12:10,620
you're barely touching memory or

152
00:12:10,620 --> 00:12:13,500
whatever maybe rest advantages are not

153
00:12:13,500 --> 00:12:19,310
so helpful to you the community actually

154
00:12:19,310 --> 00:12:22,680
interested in accepting patches that in

155
00:12:22,680 --> 00:12:25,710
that switch to rust so if I gotta throw

156
00:12:25,710 --> 00:12:27,420
a Mesa patch at these guys sitting the

157
00:12:27,420 --> 00:12:30,230
front row or they actually take it

158
00:12:30,230 --> 00:12:34,730
seemed a lot of head shakes there so

159
00:12:36,410 --> 00:12:38,340
patches that are not actually going to

160
00:12:38,340 --> 00:12:40,460
get accepted

161
00:12:40,460 --> 00:12:43,800
switch gears and talk about a case study

162
00:12:43,800 --> 00:12:53,430
I did this approach convert a giant pile

163
00:12:53,430 --> 00:13:01,110
of code to a project in this case study

164
00:13:01,110 --> 00:13:06,900
to something that's not actually project

165
00:13:06,900 --> 00:13:15,690
is not actually maintained because I was

166
00:13:15,690 --> 00:13:19,860
going to take them nobody's going to

167
00:13:19,860 --> 00:13:23,180
take them no matter what so it's fine

168
00:13:24,710 --> 00:13:26,610
see because crouch

169
00:13:26,610 --> 00:13:30,390
only rip to see projects with security

170
00:13:30,390 --> 00:13:32,400
implications because otherwise it's not

171
00:13:32,400 --> 00:13:35,690
terribly interesting to switch to rest

172
00:13:35,690 --> 00:13:40,410
interesting someone might actually get

173
00:13:40,410 --> 00:13:42,930
some value out of this so this is kind

174
00:13:42,930 --> 00:13:44,640
of a position to be in right it's it's

175
00:13:44,640 --> 00:13:46,410
unknown people don't care about it

176
00:13:46,410 --> 00:13:47,790
enough to maintain it that they care

177
00:13:47,790 --> 00:13:50,900
about it enough to use it

178
00:13:51,779 --> 00:13:56,360
the conversion system

179
00:14:01,700 --> 00:14:03,179
[Applause]

180
00:14:03,179 --> 00:14:05,619
CVS there's an ancient source code out

181
00:14:05,619 --> 00:14:09,160
there it's still in CVS everyone was

182
00:14:09,160 --> 00:14:11,279
moved to give in mercurial or whatever

183
00:14:11,279 --> 00:14:13,959
there's still six percent of W users

184
00:14:13,959 --> 00:14:15,579
with CVS installed according to the

185
00:14:15,579 --> 00:14:43,209
automated popularity contest much easier

186
00:14:43,209 --> 00:14:50,470
to you actually exploit this is abuse

187
00:14:50,470 --> 00:14:54,069
and has security implications the last

188
00:14:54,069 --> 00:15:06,929
release of it was in 2008 50 rounds of C

189
00:15:08,339 --> 00:15:11,110
50,000 lines of C well it's not a huge

190
00:15:11,110 --> 00:15:13,360
codebase but that's not trivial it's

191
00:15:13,360 --> 00:15:18,339
still it's an interesting exercise CB SS

192
00:15:18,339 --> 00:15:20,549
utilize our main quarters of see that

193
00:15:20,549 --> 00:15:23,139
that other projects may have managed to

194
00:15:23,139 --> 00:15:25,619
avoid

195
00:15:25,710 --> 00:15:27,930
so that the original see release anyway

196
00:15:27,930 --> 00:15:31,290
was from 1989 so there's still like K

197
00:15:31,290 --> 00:15:33,149
and I have style function prototypes in

198
00:15:33,149 --> 00:15:35,460
their doom and things like that and that

199
00:15:35,460 --> 00:15:36,750
was kind of exciting to implement

200
00:15:36,750 --> 00:15:46,649
encourage all sorts of things as a nice

201
00:15:46,649 --> 00:15:48,600
bonus CVS those have an extensive test

202
00:15:48,600 --> 00:15:50,610
suite so that's turned out to be really

203
00:15:50,610 --> 00:15:55,140
useful to tell you about so far in this

204
00:15:55,140 --> 00:15:59,760
case study 4% of the source lines of

205
00:15:59,760 --> 00:16:01,560
code I've translated to rust which

206
00:16:01,560 --> 00:16:02,820
doesn't sound like much but it was

207
00:16:02,820 --> 00:16:04,649
basically I went for the things that I

208
00:16:04,649 --> 00:16:06,330
could do in a couple of days and the

209
00:16:06,330 --> 00:16:07,380
rest of my time was spent fixing

210
00:16:07,380 --> 00:16:18,240
corroded bugs account sense so not

211
00:16:18,240 --> 00:16:20,339
coming blank lines and comments and that

212
00:16:20,339 --> 00:16:21,440
sort of thing

213
00:16:21,440 --> 00:16:24,990
and that's 10 out of the 68 source files

214
00:16:24,990 --> 00:16:31,050
that are the core of CVS there's a bunch

215
00:16:31,050 --> 00:16:34,500
of reasons why that that number that six

216
00:16:34,500 --> 00:16:36,290
point four percent is still fairly small

217
00:16:36,290 --> 00:16:40,490
code is absolutely work-in-progress tool

218
00:16:40,490 --> 00:16:44,010
the missed issue is that control flow is

219
00:16:44,010 --> 00:16:47,940
hard West does not have go-to statements

220
00:16:47,940 --> 00:16:52,520
or C style switch statements and the

221
00:16:52,520 --> 00:16:56,910
number of wacky things you can do let me

222
00:16:56,910 --> 00:17:01,320
just say best device for example that

223
00:17:01,320 --> 00:17:06,660
you can't directly express in rust mean

224
00:17:06,660 --> 00:17:09,540
that that getting the translation of

225
00:17:09,540 --> 00:17:11,730
arbitrary C control flow to rust is

226
00:17:11,730 --> 00:17:16,569
tricky that's that's the biggest thing

227
00:17:16,569 --> 00:17:18,880
working on right now actually there's

228
00:17:18,880 --> 00:17:20,130
[Music]

229
00:17:20,130 --> 00:17:22,000
there's a bunch of different little

230
00:17:22,000 --> 00:17:24,130
corners of the C specification that I

231
00:17:24,130 --> 00:17:25,299
just haven't gotten around to

232
00:17:25,299 --> 00:17:29,139
implementing yet and corrode the a

233
00:17:29,139 --> 00:17:32,500
couple of features and see that don't

234
00:17:32,500 --> 00:17:38,100
have any direct correspondence in rust

235
00:17:38,100 --> 00:17:41,230
notably available arrays or bit fields

236
00:17:41,230 --> 00:17:51,129
and structs issue I mentioned you know

237
00:17:51,129 --> 00:17:54,419
word should preserve maintainability

238
00:17:54,419 --> 00:17:57,759
unfortunately in order to quickly get

239
00:17:57,759 --> 00:18:00,929
started trying

240
00:18:01,000 --> 00:18:03,399
I took an approach where it looks at

241
00:18:03,399 --> 00:18:06,220
only pre-process to see source which

242
00:18:06,220 --> 00:18:08,919
means every times curb sees it all the

243
00:18:08,919 --> 00:18:10,990
comments are gone and all of the macros

244
00:18:10,990 --> 00:18:14,799
are fully expanded so so you lost the

245
00:18:14,799 --> 00:18:19,509
comments and the macros means that if

246
00:18:19,509 --> 00:18:21,909
you use macros in a significant way the

247
00:18:21,909 --> 00:18:24,419
generated code looks like crap so

248
00:18:24,419 --> 00:18:26,679
there's a bunch of stuff to be done

249
00:18:26,679 --> 00:18:32,049
still right I can at least demonstrate

250
00:18:32,049 --> 00:18:35,710
that I can use this partially justified

251
00:18:35,710 --> 00:18:38,860
version of CVS to clone the CVS source

252
00:18:38,860 --> 00:18:42,090
tree from CVS

253
00:18:48,260 --> 00:18:51,680
thing is that is the CVS test suite

254
00:18:51,680 --> 00:18:55,340
which takes like an hour to run actually

255
00:18:55,340 --> 00:19:02,080
still passes but pause for applause here

256
00:19:06,630 --> 00:19:10,089
[Applause]

257
00:19:14,140 --> 00:19:17,209
[Music]

258
00:19:39,380 --> 00:19:42,429
[Music]

259
00:19:58,510 --> 00:20:01,580
how C is specified the deal with

260
00:20:01,580 --> 00:20:04,010
unsigned rap and all sorts of things

261
00:20:04,010 --> 00:20:08,780
right ideally that would recognize this

262
00:20:08,780 --> 00:20:11,990
kind of nominee Ematic crust and suggest

263
00:20:11,990 --> 00:20:13,400
maybe you wanted to write it the other

264
00:20:13,400 --> 00:20:17,120
way other sorts of things that would be

265
00:20:17,120 --> 00:20:21,350
nice to have tools for courage every

266
00:20:21,350 --> 00:20:23,000
time you have a pointer in your C source

267
00:20:23,000 --> 00:20:26,000
code generates rust that uses raw

268
00:20:26,000 --> 00:20:28,280
pointers it'd be nice to be able to

269
00:20:28,280 --> 00:20:31,070
recognize and at least partially

270
00:20:31,070 --> 00:20:33,590
automated way that those runners are

271
00:20:33,590 --> 00:20:36,410
being used in such a way that you can

272
00:20:36,410 --> 00:20:38,980
replace them with say frost biotypes

273
00:20:38,980 --> 00:20:42,470
this is non-trivial if anyone's looking

274
00:20:42,470 --> 00:20:44,870
for you know a PhD thesis project or

275
00:20:44,870 --> 00:20:46,779
something I mean

276
00:20:46,779 --> 00:20:49,730
the key thing I'll say about this is

277
00:20:49,730 --> 00:20:52,549
that there's only a bunch of tools that

278
00:20:52,549 --> 00:20:56,450
rust developers can use notably Clippy

279
00:20:56,450 --> 00:20:57,769
which you should definitely check out if

280
00:20:57,769 --> 00:21:00,529
you haven't seen it that are in the

281
00:21:00,529 --> 00:21:02,929
category of neat tools for checking

282
00:21:02,929 --> 00:21:06,820
different kinds of code style issues and

283
00:21:06,820 --> 00:21:09,409
west fix which is a tool for Chan to

284
00:21:09,409 --> 00:21:14,960
automatically apply the fixes for you so

285
00:21:14,960 --> 00:21:17,360
improving those tools to recognize these

286
00:21:17,360 --> 00:21:21,950
kinds of memedia Matic rust and i really

287
00:21:21,950 --> 00:21:24,950
suggest fixes for them improving those

288
00:21:24,950 --> 00:21:27,679
tools is useful for almost developers

289
00:21:27,679 --> 00:21:29,419
not just people using corrode so I think

290
00:21:29,419 --> 00:21:31,429
this is this is going to be a valuable

291
00:21:31,429 --> 00:21:35,350
work for the community as a whole

292
00:21:42,039 --> 00:21:46,149
concept of making it feasible to

293
00:21:46,149 --> 00:21:52,610
incremental e migrate from C to rust I

294
00:21:52,610 --> 00:21:55,490
think with with like the control flow

295
00:21:55,490 --> 00:21:58,850
stuff taken care of it's gonna be very

296
00:21:58,850 --> 00:22:02,600
close to you know handling most of the C

297
00:22:02,600 --> 00:22:05,570
source that's out there I bet there's

298
00:22:05,570 --> 00:22:08,570
plenty left to do in terms of making the

299
00:22:08,570 --> 00:22:11,710
resulting generated rest source better I

300
00:22:11,710 --> 00:22:15,140
particularly think

301
00:22:15,140 --> 00:22:17,420
and the Mozilla open innovation team for

302
00:22:17,420 --> 00:22:22,960
supporting their pen rest last year and

303
00:22:22,960 --> 00:22:27,500
people who've submitted contributions to

304
00:22:27,500 --> 00:22:33,640
corrode feel free to grab kool-aid from

305
00:22:33,640 --> 00:22:38,630
this check out my for a bunch of

306
00:22:38,630 --> 00:22:44,720
detailed posts and with that I think I

307
00:22:44,720 --> 00:22:48,130
have a couple minutes for questions

308
00:22:54,880 --> 00:22:56,940
you

