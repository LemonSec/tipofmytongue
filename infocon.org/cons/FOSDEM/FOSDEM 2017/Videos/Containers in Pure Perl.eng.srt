1
00:00:06,710 --> 00:00:10,070
so I will be talking about containers

2
00:00:10,070 --> 00:00:14,639
today but half of my presentation is not

3
00:00:14,639 --> 00:00:20,160
about containers so first who here have

4
00:00:20,160 --> 00:00:24,269
played with Linux containers okay there

5
00:00:24,269 --> 00:00:27,179
are some people I hope that by the end

6
00:00:27,179 --> 00:00:28,859
of the presentation some of you would

7
00:00:28,859 --> 00:00:32,180
decide to join the container camp

8
00:00:32,180 --> 00:00:35,970
writing per code foreigner code so Who

9
00:00:35,970 --> 00:00:38,880
am I I'm the chief System Architect of

10
00:00:38,880 --> 00:00:39,570
side ground

11
00:00:39,570 --> 00:00:42,300
I'm also Co into the CTO of two

12
00:00:42,300 --> 00:00:44,700
companies organizing a few conferences

13
00:00:44,700 --> 00:00:48,600
some of you may know me from Europe 2014

14
00:00:48,600 --> 00:00:52,170
in Bulgaria also teaching some stuff and

15
00:00:52,170 --> 00:00:54,750
time maintainer of looms and share

16
00:00:54,750 --> 00:00:58,890
Linux saternus and very soon next week

17
00:00:58,890 --> 00:01:08,310
Linux C group so in 2015 there were two

18
00:01:08,310 --> 00:01:10,999
talks about containers in Perl

19
00:01:10,999 --> 00:01:14,670
unfortunately I didn't found everything

20
00:01:14,670 --> 00:01:18,390
that is available for pro indoles talks

21
00:01:18,390 --> 00:01:22,740
which is not very good since links and

22
00:01:22,740 --> 00:01:27,390
share is I think five six years old

23
00:01:27,390 --> 00:01:33,289
module links a tenacious be around 2013

24
00:01:33,289 --> 00:01:37,229
and these were not included so the other

25
00:01:37,229 --> 00:01:40,950
thing is how you why you need containers

26
00:01:40,950 --> 00:01:43,740
I need continuous because I offer

27
00:01:43,740 --> 00:01:48,749
containers through my cube brand but in

28
00:01:48,749 --> 00:01:50,969
order to start containers there I use

29
00:01:50,969 --> 00:01:56,009
alexei or lxd data tools outside Perl

30
00:01:56,009 --> 00:01:58,799
and all of my management is written in

31
00:01:58,799 --> 00:02:01,529
Perl and I was like okay what is the

32
00:02:01,529 --> 00:02:04,560
container and what I need to do to make

33
00:02:04,560 --> 00:02:07,229
it turn entirely in Perl because I don't

34
00:02:07,229 --> 00:02:09,929
need to do a system something that's

35
00:02:09,929 --> 00:02:13,129
something that I really don't like and

36
00:02:13,129 --> 00:02:15,689
currently the only way you can create

37
00:02:15,689 --> 00:02:16,770
container

38
00:02:16,770 --> 00:02:18,180
[Music]

39
00:02:18,180 --> 00:02:20,750
usually the people what think is

40
00:02:20,750 --> 00:02:24,870
alexeyev XD currency or docker so these

41
00:02:24,870 --> 00:02:27,959
are your options and all of them require

42
00:02:27,959 --> 00:02:31,230
system something also there is another

43
00:02:31,230 --> 00:02:33,090
thing for containers

44
00:02:33,090 --> 00:02:36,329
I'm infrastructure guy but if you want

45
00:02:36,329 --> 00:02:38,879
to run your application sandboxed like

46
00:02:38,879 --> 00:02:43,439
you have an API it receives some code

47
00:02:43,439 --> 00:02:47,790
some data that cannot be really

48
00:02:47,790 --> 00:02:50,310
sanitized you you're not sure that it

49
00:02:50,310 --> 00:02:53,190
can be sanitized so you want to create

50
00:02:53,190 --> 00:02:55,920
the sandbox so my first part of

51
00:02:55,920 --> 00:02:57,569
representation would be how you'd

52
00:02:57,569 --> 00:03:02,220
approach this problem and I'll finish

53
00:03:02,220 --> 00:03:04,470
with the containers that are the maximum

54
00:03:04,470 --> 00:03:06,900
security that you can get inside your

55
00:03:06,900 --> 00:03:10,950
application I have some example code so

56
00:03:10,950 --> 00:03:13,680
I hope you understand it a little bit

57
00:03:13,680 --> 00:03:17,909
easier installation and sandboxing I try

58
00:03:17,909 --> 00:03:20,189
to be the most complete guide for

59
00:03:20,189 --> 00:03:24,239
securing complications in Linux I found

60
00:03:24,239 --> 00:03:26,879
like 50 different presentations on

61
00:03:26,879 --> 00:03:29,579
internet that don't mention some of this

62
00:03:29,579 --> 00:03:33,569
stuff when you're using truth truth is

63
00:03:33,569 --> 00:03:37,639
well-known when you're using it try to

64
00:03:37,639 --> 00:03:42,060
to root in directory that is not an

65
00:03:42,060 --> 00:03:45,000
overlay filesystem because most of the

66
00:03:45,000 --> 00:03:48,510
security issues with tooth were caused

67
00:03:48,510 --> 00:03:53,549
by faulty filesystem I mean the code had

68
00:03:53,549 --> 00:03:56,729
a bug in the file system or usually a

69
00:03:56,729 --> 00:03:59,280
problem with the configuration of the

70
00:03:59,280 --> 00:04:02,669
overlay filesystem and overlays are used

71
00:04:02,669 --> 00:04:05,879
in da currency and most of these

72
00:04:05,879 --> 00:04:09,389
applications also try not to share the

73
00:04:09,389 --> 00:04:11,510
whole file system with your application

74
00:04:11,510 --> 00:04:14,310
bind mount what you need inside the

75
00:04:14,310 --> 00:04:17,120
truth and nothing else you don't need

76
00:04:17,120 --> 00:04:20,608
more than what your application actually

77
00:04:20,608 --> 00:04:23,610
requires dropping privileges you see

78
00:04:23,610 --> 00:04:26,490
it's not actually qvo in perl actually

79
00:04:26,490 --> 00:04:29,279
you can shoot yourself in the leg a few

80
00:04:29,279 --> 00:04:32,040
times like 5 times at least

81
00:04:32,040 --> 00:04:37,170
before you do it properly most of the

82
00:04:37,170 --> 00:04:40,440
developers simply don't remember that

83
00:04:40,440 --> 00:04:43,260
Linux has capabilities and they don't

84
00:04:43,260 --> 00:04:47,100
use this feature of the Linux also you

85
00:04:47,100 --> 00:04:51,680
need to set limits most of you are very

86
00:04:51,680 --> 00:04:54,540
understand very well the new limits but

87
00:04:54,540 --> 00:04:57,300
I don't think any one of you is using

88
00:04:57,300 --> 00:04:59,730
cgroups for their applications this is

89
00:04:59,730 --> 00:05:02,370
why I started writing the cgroups module

90
00:05:02,370 --> 00:05:06,300
because see groups are very good set of

91
00:05:06,300 --> 00:05:07,800
limits that you can apply to multiple

92
00:05:07,800 --> 00:05:10,140
processes not only to a single process

93
00:05:10,140 --> 00:05:13,650
and then you can add links namespaces

94
00:05:13,650 --> 00:05:17,100
where you can simply separate this

95
00:05:17,100 --> 00:05:18,930
application totally from there are

96
00:05:18,930 --> 00:05:20,970
applications on your machines which is

97
00:05:20,970 --> 00:05:23,790
actually container izing this and the

98
00:05:23,790 --> 00:05:25,680
last thing that you can do with your

99
00:05:25,680 --> 00:05:29,250
application is using second the comp is

100
00:05:29,250 --> 00:05:32,190
a filter for Cisco's that your

101
00:05:32,190 --> 00:05:35,730
application can do so let's look at

102
00:05:35,730 --> 00:05:38,940
these things true we have out of the box

103
00:05:38,940 --> 00:05:40,830
in Perl that's nice

104
00:05:40,830 --> 00:05:43,020
the one thing that you have to remember

105
00:05:43,020 --> 00:05:45,930
is that after true thing you have to do

106
00:05:45,930 --> 00:05:48,750
CH gear because if you don't you're

107
00:05:48,750 --> 00:05:51,180
still outside of the truth there

108
00:05:51,180 --> 00:05:53,400
directory and you have access to file

109
00:05:53,400 --> 00:05:57,150
files outside the truth then setting hue

110
00:05:57,150 --> 00:06:01,290
limits it's easy you have these in the

111
00:06:01,290 --> 00:06:06,780
POSIX module I'm not going to go to talk

112
00:06:06,780 --> 00:06:10,290
more about those jumping privileges now

113
00:06:10,290 --> 00:06:12,630
this is the funny part we have these

114
00:06:12,630 --> 00:06:16,290
internal variables that we use to change

115
00:06:16,290 --> 00:06:19,790
the user ID and change the group ID and

116
00:06:19,790 --> 00:06:23,700
unfortunately some people mistake the

117
00:06:23,700 --> 00:06:27,000
effective user ID with the early user ID

118
00:06:27,000 --> 00:06:28,530
because they are so close on the

119
00:06:28,530 --> 00:06:32,760
keyboard so the problem is that your

120
00:06:32,760 --> 00:06:36,720
turn started user ID doesn't change the

121
00:06:36,720 --> 00:06:39,900
permissions that the kernel checks so if

122
00:06:39,900 --> 00:06:42,000
you don't change the effective user ID

123
00:06:42,000 --> 00:06:45,470
you haven't dropped any privileges

124
00:06:45,470 --> 00:06:49,520
unfortunately okay I'll continue on the

125
00:06:49,520 --> 00:06:51,860
next slides with that the other thing is

126
00:06:51,860 --> 00:06:54,490
the same problem with the groups and

127
00:06:54,490 --> 00:06:58,040
most of the processes if you start a

128
00:06:58,040 --> 00:07:00,110
program on Linux you don't have a single

129
00:07:00,110 --> 00:07:03,290
group you have like five at least groups

130
00:07:03,290 --> 00:07:06,610
that your user account is a part of so

131
00:07:06,610 --> 00:07:09,980
when you change your group a group ID

132
00:07:09,980 --> 00:07:13,040
you're changing your main group ID but

133
00:07:13,040 --> 00:07:16,160
there are five are left with with you so

134
00:07:16,160 --> 00:07:18,770
your application still has group access

135
00:07:18,770 --> 00:07:22,070
to defiles that are from those other

136
00:07:22,070 --> 00:07:24,800
groups usually you see what you would do

137
00:07:24,800 --> 00:07:29,240
is use the init groups function and it

138
00:07:29,240 --> 00:07:32,900
will clear your groups unfortunately we

139
00:07:32,900 --> 00:07:37,580
don't have this in Pro so I found out

140
00:07:37,580 --> 00:07:39,710
that and this is not in the

141
00:07:39,710 --> 00:07:42,260
documentation I don't know why but I

142
00:07:42,260 --> 00:07:45,680
found out that if you use the running

143
00:07:45,680 --> 00:07:49,060
group and give it two times the same

144
00:07:49,060 --> 00:07:51,740
group that you want to change it will

145
00:07:51,740 --> 00:07:54,890
actually call set groups with a single

146
00:07:54,890 --> 00:07:57,890
group and you would actually get the

147
00:07:57,890 --> 00:08:00,470
same functionality as in groups which is

148
00:08:00,470 --> 00:08:05,600
quite nice for capabilities you can use

149
00:08:05,600 --> 00:08:11,260
Linux peer sitio I'll show you in a bit

150
00:08:11,260 --> 00:08:16,910
then creating a new namespace you can

151
00:08:16,910 --> 00:08:20,169
use other links and share if you want to

152
00:08:20,169 --> 00:08:24,020
do the fork inside your application then

153
00:08:24,020 --> 00:08:26,180
you would use links and share if you

154
00:08:26,180 --> 00:08:31,669
want to create new namespace but inside

155
00:08:31,669 --> 00:08:33,409
a new process that is not related to

156
00:08:33,409 --> 00:08:36,789
yours you can use Linux chrome and

157
00:08:36,789 --> 00:08:41,990
create new process called new process if

158
00:08:41,990 --> 00:08:44,270
you want only to enter in the namespace

159
00:08:44,270 --> 00:08:46,850
like you already have for like ten

160
00:08:46,850 --> 00:08:51,020
containers inside your on your machine

161
00:08:51,020 --> 00:08:53,480
what you want to do is enter one of

162
00:08:53,480 --> 00:08:55,610
those containers like only it's

163
00:08:55,610 --> 00:08:59,180
networking space or IPC namespace

164
00:08:59,180 --> 00:09:01,940
and execute some comment like connecting

165
00:09:01,940 --> 00:09:04,010
to the socket of my Sequoia inside of

166
00:09:04,010 --> 00:09:07,520
that you can use little satellites and

167
00:09:07,520 --> 00:09:11,300
these are very very easy if you want to

168
00:09:11,300 --> 00:09:14,540
create a control group you would use as

169
00:09:14,540 --> 00:09:18,070
little C group currently you would

170
00:09:18,070 --> 00:09:21,820
probably create the directory initialize

171
00:09:21,820 --> 00:09:24,980
the control group and a lot of other

172
00:09:24,980 --> 00:09:28,040
stuff in order to actually use that C

173
00:09:28,040 --> 00:09:32,360
group say comp rules you can use the

174
00:09:32,360 --> 00:09:34,430
link second module so we have this

175
00:09:34,430 --> 00:09:40,100
inside power right now the proper way to

176
00:09:40,100 --> 00:09:42,740
actually drop your privileges would be

177
00:09:42,740 --> 00:09:45,080
something like this you would first

178
00:09:45,080 --> 00:09:48,050
create the control group a lot of the

179
00:09:48,050 --> 00:09:49,670
stuff have to be done before you

180
00:09:49,670 --> 00:09:53,690
actually drop your privileges so some of

181
00:09:53,690 --> 00:09:56,390
this stuff can be changed but for

182
00:09:56,390 --> 00:09:59,150
example why we are creating the control

183
00:09:59,150 --> 00:10:01,310
group before - routing because the

184
00:10:01,310 --> 00:10:04,670
control group would be on usually

185
00:10:04,670 --> 00:10:07,940
mounted at this FSC group which is okay

186
00:10:07,940 --> 00:10:09,920
but after you to root you don't have

187
00:10:09,920 --> 00:10:13,490
this FS signal if you bind mount that

188
00:10:13,490 --> 00:10:15,950
inside your church you are exposing a

189
00:10:15,950 --> 00:10:19,040
lot of the kernel to the user so this is

190
00:10:19,040 --> 00:10:20,840
something that you don't want to do this

191
00:10:20,840 --> 00:10:23,810
is why you first create the control

192
00:10:23,810 --> 00:10:27,230
group outside of the truth if you want

193
00:10:27,230 --> 00:10:29,360
to create a other directories for your

194
00:10:29,360 --> 00:10:31,790
application you have to do that before

195
00:10:31,790 --> 00:10:35,000
you drop the privileges then you are

196
00:10:35,000 --> 00:10:39,200
setting the you limits when you do this

197
00:10:39,200 --> 00:10:42,560
if for example one of the limits is for

198
00:10:42,560 --> 00:10:46,760
number of processes that you can have on

199
00:10:46,760 --> 00:10:49,250
one machine when you set these limits

200
00:10:49,250 --> 00:10:52,310
and your application you already have

201
00:10:52,310 --> 00:10:55,940
reached the limit this will stop your

202
00:10:55,940 --> 00:10:58,520
application this is why I'm setting the

203
00:10:58,520 --> 00:11:01,010
limits second maybe you can swap them

204
00:11:01,010 --> 00:11:04,610
first so you can exit right away without

205
00:11:04,610 --> 00:11:07,820
doing any stuff on your file system then

206
00:11:07,820 --> 00:11:12,380
your two routing then you may want to

207
00:11:12,380 --> 00:11:15,230
drop some of the Cisco's that you want

208
00:11:15,230 --> 00:11:17,750
to do now you want allow to the process

209
00:11:17,750 --> 00:11:22,040
and you can drop some of the

210
00:11:22,040 --> 00:11:24,170
capabilities or all of the capabilities

211
00:11:24,170 --> 00:11:28,060
of balloons I have an example for

212
00:11:28,060 --> 00:11:31,220
dropping capabilities I think in the

213
00:11:31,220 --> 00:11:33,410
presentation so you would understand why

214
00:11:33,410 --> 00:11:35,690
then you are creating the namespaces

215
00:11:35,690 --> 00:11:38,660
after that you are in completely

216
00:11:38,660 --> 00:11:40,550
different Linux namespace this means

217
00:11:40,550 --> 00:11:44,300
that if you have created with links and

218
00:11:44,300 --> 00:11:48,890
share of the new namespaces you don't

219
00:11:48,890 --> 00:11:51,200
have a PC connectivity to the host

220
00:11:51,200 --> 00:11:53,030
machine you don't have networking to the

221
00:11:53,030 --> 00:11:55,850
host machine you don't have file systems

222
00:11:55,850 --> 00:11:58,790
from the host machine your process ID is

223
00:11:58,790 --> 00:12:00,980
different from the one you see on the

224
00:12:00,980 --> 00:12:04,640
host machine your user ID may be zero

225
00:12:04,640 --> 00:12:07,700
even though you're not rude and you can

226
00:12:07,700 --> 00:12:11,270
do a lot of other stuff there so when

227
00:12:11,270 --> 00:12:14,240
you do this you're completely different

228
00:12:14,240 --> 00:12:16,670
system now your application sees

229
00:12:16,670 --> 00:12:20,300
completely different system and then you

230
00:12:20,300 --> 00:12:25,100
should drop your groups so what was it

231
00:12:25,100 --> 00:12:33,740
parent is Open bracket and then drop the

232
00:12:33,740 --> 00:12:35,920
username last you drop the user ID

233
00:12:35,920 --> 00:12:40,010
because if you drop the user ID anywhere

234
00:12:40,010 --> 00:12:44,270
before that use root privileges so you

235
00:12:44,270 --> 00:12:48,130
cannot do anything of the power things

236
00:12:48,130 --> 00:12:52,670
so the problem with setting the user ID

237
00:12:52,670 --> 00:12:55,790
now usually what you would do is set

238
00:12:55,790 --> 00:12:57,920
during user ID the effective user ID

239
00:12:57,920 --> 00:13:02,420
group and then a user ID and what I have

240
00:13:02,420 --> 00:13:04,850
done here is issued the system command

241
00:13:04,850 --> 00:13:08,390
simply to see what's happening what user

242
00:13:08,390 --> 00:13:13,040
ID I am now what I would see on my

243
00:13:13,040 --> 00:13:16,850
laptop is I would have first result

244
00:13:16,850 --> 00:13:21,440
before why I don't have okay my first

245
00:13:21,440 --> 00:13:24,380
system and my second system here so my

246
00:13:24,380 --> 00:13:25,850
first system show

247
00:13:25,850 --> 00:13:28,910
me the route I'm route I'm group route

248
00:13:28,910 --> 00:13:31,310
and these are the other groups them that

249
00:13:31,310 --> 00:13:35,839
I'm part of after I switched to 1001 my

250
00:13:35,839 --> 00:13:40,699
wife's I did I changed the user ID but

251
00:13:40,699 --> 00:13:43,759
now I have more even more groups because

252
00:13:43,759 --> 00:13:48,829
before because I added Tony's group as

253
00:13:48,829 --> 00:13:51,829
you can see I changed the user ID change

254
00:13:51,829 --> 00:13:54,470
the group ID but I'm still with the

255
00:13:54,470 --> 00:13:59,509
groups so if I change the group ID

256
00:13:59,509 --> 00:14:04,540
properly now what you would see here

257
00:14:06,069 --> 00:14:09,680
usually what's happening is if you don't

258
00:14:09,680 --> 00:14:13,459
do if you don't give it to group IDs

259
00:14:13,459 --> 00:14:16,100
here it called it doesn't call set

260
00:14:16,100 --> 00:14:19,399
groups and you simply do set get and

261
00:14:19,399 --> 00:14:21,440
nothing else and said it doesn't change

262
00:14:21,440 --> 00:14:25,519
the general groups so I think this

263
00:14:25,519 --> 00:14:30,980
creates a code to set groups and now I'm

264
00:14:30,980 --> 00:14:33,550
left with only with the groups of time

265
00:14:33,550 --> 00:14:37,699
this is easier for me and this is the

266
00:14:37,699 --> 00:14:42,880
proper way to do it general thing is I

267
00:14:42,880 --> 00:14:46,850
have a longer example so this is my pink

268
00:14:46,850 --> 00:14:50,060
which is a normal pink it should show me

269
00:14:50,060 --> 00:14:52,699
if the host is survive or a rich bow I

270
00:14:52,699 --> 00:14:55,579
didn't show the whole code but that's

271
00:14:55,579 --> 00:15:00,350
enough so what I did is okay I changed

272
00:15:00,350 --> 00:15:04,160
the groups properly change the user ID

273
00:15:04,160 --> 00:15:08,990
and then it should system right what's

274
00:15:08,990 --> 00:15:12,529
happening here is that I see if that I

275
00:15:12,529 --> 00:15:15,319
cannot access the socket the neck ping

276
00:15:15,319 --> 00:15:18,350
has a check for the effective user ID

277
00:15:18,350 --> 00:15:20,630
currently I had to remove it just to

278
00:15:20,630 --> 00:15:23,750
show you this example so usually you

279
00:15:23,750 --> 00:15:26,689
wouldn't reach this part but after we

280
00:15:26,689 --> 00:15:29,029
moved removing that you see that you

281
00:15:29,029 --> 00:15:30,949
cannot create the role socket this is

282
00:15:30,949 --> 00:15:36,519
because your now user ID 99 and

283
00:15:40,760 --> 00:15:44,030
this normal user and it doesn't have the

284
00:15:44,030 --> 00:15:48,440
capability capmetro when you have this

285
00:15:48,440 --> 00:15:51,200
capability you can actually create this

286
00:15:51,200 --> 00:15:57,050
socket without having cruel taxes so if

287
00:15:57,050 --> 00:16:02,390
we add this line here after the system

288
00:16:02,390 --> 00:16:07,820
before the actual ping and this is using

289
00:16:07,820 --> 00:16:10,580
the PR CTL setting the effective

290
00:16:10,580 --> 00:16:15,710
capabilities natural cap nitro to 1 when

291
00:16:15,710 --> 00:16:22,690
we have this we can actually ping it why

292
00:16:22,690 --> 00:16:26,660
this is a big issue for me because you

293
00:16:26,660 --> 00:16:31,430
shouldn't be able to do this and I'll

294
00:16:31,430 --> 00:16:36,170
tell you why because now here your user

295
00:16:36,170 --> 00:16:39,740
ID 99 and user ID 99 shouldn't have

296
00:16:39,740 --> 00:16:43,400
capability to set capabilities but it

297
00:16:43,400 --> 00:16:46,880
actually did that with user 1899 and we

298
00:16:46,880 --> 00:16:49,430
did the proper thing with the groups so

299
00:16:49,430 --> 00:16:56,980
it's not the group's the problem is here

300
00:16:56,980 --> 00:17:00,200
when we're setting the user ID it

301
00:17:00,200 --> 00:17:05,869
actually calls set set a eat you eat so

302
00:17:05,869 --> 00:17:09,380
effective user ID the sinner the library

303
00:17:09,380 --> 00:17:13,849
function set effective user and this

304
00:17:13,849 --> 00:17:17,180
function changes your user ID but saves

305
00:17:17,180 --> 00:17:19,310
your previous user ID in the safety

306
00:17:19,310 --> 00:17:21,949
already and fortunately now your

307
00:17:21,949 --> 00:17:25,550
application can go back to root without

308
00:17:25,550 --> 00:17:28,069
a problem and if your application can do

309
00:17:28,069 --> 00:17:29,600
it somebody that is attacking your

310
00:17:29,600 --> 00:17:31,940
application also can do it so this is

311
00:17:31,940 --> 00:17:35,750
your case here if you don't actually use

312
00:17:35,750 --> 00:17:39,680
set you it directly to clean the saved

313
00:17:39,680 --> 00:17:44,090
user ID your fault

314
00:17:44,090 --> 00:17:47,790
so in order to do it properly you need

315
00:17:47,790 --> 00:17:49,980
to include the situate function from the

316
00:17:49,980 --> 00:17:52,590
POSIX module because it's the only

317
00:17:52,590 --> 00:17:54,840
function that actually calls directly

318
00:17:54,840 --> 00:18:01,820
set you it after you do this oh

319
00:18:01,820 --> 00:18:06,090
okay after you do this you can now you

320
00:18:06,090 --> 00:18:10,950
can change the capabilities now and it's

321
00:18:10,950 --> 00:18:13,800
all fine it's all good it's how we were

322
00:18:13,800 --> 00:18:17,720
expecting it one other thing for

323
00:18:17,720 --> 00:18:22,380
capabilities for those of you that are

324
00:18:22,380 --> 00:18:25,440
not used to capabilities don't know how

325
00:18:25,440 --> 00:18:26,250
they work

326
00:18:26,250 --> 00:18:29,430
you have the effective capabilities this

327
00:18:29,430 --> 00:18:32,610
is a bit mask that combines all the

328
00:18:32,610 --> 00:18:35,160
capabilities that you have usually root

329
00:18:35,160 --> 00:18:39,030
has all the capabilities usually so the

330
00:18:39,030 --> 00:18:42,120
bit mask is all once then you have

331
00:18:42,120 --> 00:18:44,370
permitted capabilities these are

332
00:18:44,370 --> 00:18:47,250
capabilities that you are allowed to

333
00:18:47,250 --> 00:18:51,240
receive if you start an application that

334
00:18:51,240 --> 00:18:54,780
has set file capabilities flag on it

335
00:18:54,780 --> 00:18:59,450
like a file option and then you have the

336
00:18:59,450 --> 00:19:02,160
invertible capabilities which is another

337
00:19:02,160 --> 00:19:05,970
mask which is used when you're working

338
00:19:05,970 --> 00:19:09,330
or exacting another application so you

339
00:19:09,330 --> 00:19:11,580
have this mask and you can say okay I

340
00:19:11,580 --> 00:19:15,450
want to leave only cabinet role so you

341
00:19:15,450 --> 00:19:18,810
said only cabinet or out there and then

342
00:19:18,810 --> 00:19:21,720
when you create a new process this new

343
00:19:21,720 --> 00:19:23,970
process you will have only that

344
00:19:23,970 --> 00:19:27,560
capability but inside your your

345
00:19:27,560 --> 00:19:29,970
application if you do this here like

346
00:19:29,970 --> 00:19:33,390
said invertible it wouldn't change the

347
00:19:33,390 --> 00:19:36,180
outcome of the pink because it is for

348
00:19:36,180 --> 00:19:38,730
the next process this process has to

349
00:19:38,730 --> 00:19:42,780
drop his capabilities first so you have

350
00:19:42,780 --> 00:19:45,720
to set the effective capabilities to

351
00:19:45,720 --> 00:19:51,230
zero for everything except capmetro okay

352
00:19:55,220 --> 00:20:00,720
okay so I'm skipping the example for you

353
00:20:00,720 --> 00:20:03,690
limit and it should say say comp here

354
00:20:03,690 --> 00:20:08,130
sorry okay and we are continuing now

355
00:20:08,130 --> 00:20:10,770
with the containers part right

356
00:20:10,770 --> 00:20:14,250
creating namespaces with purl and

357
00:20:14,250 --> 00:20:17,160
control groups with purl usually what

358
00:20:17,160 --> 00:20:22,260
you'd have is a parent and child process

359
00:20:22,260 --> 00:20:29,270
and when you create a namespace this is

360
00:20:29,270 --> 00:20:32,070
this becomes a little bit of a problem

361
00:20:32,070 --> 00:20:34,470
because for example if you create a new

362
00:20:34,470 --> 00:20:36,840
mountain a space in the child process

363
00:20:36,840 --> 00:20:39,810
now the child cannot see any file that

364
00:20:39,810 --> 00:20:42,870
the parent can see if you haven't

365
00:20:42,870 --> 00:20:45,390
mounted before that Bank mounted some of

366
00:20:45,390 --> 00:20:48,840
the file system to the new to route that

367
00:20:48,840 --> 00:20:52,380
serve this child processes you cannot

368
00:20:52,380 --> 00:20:55,020
actually from the child you cannot see

369
00:20:55,020 --> 00:20:58,950
any file if the same happens for every

370
00:20:58,950 --> 00:21:01,860
namespace like if you create a socket in

371
00:21:01,860 --> 00:21:04,230
the parent and expect to access it from

372
00:21:04,230 --> 00:21:04,950
the child

373
00:21:04,950 --> 00:21:08,640
UNIX socket you cannot because yeah when

374
00:21:08,640 --> 00:21:11,030
you switch to the new IPC namespace

375
00:21:11,030 --> 00:21:12,360
there

376
00:21:12,360 --> 00:21:15,450
this socket doesn't exist at all like

377
00:21:15,450 --> 00:21:17,700
these numbers here these are internal

378
00:21:17,700 --> 00:21:20,970
numbers from the kernel for the

379
00:21:20,970 --> 00:21:23,160
namespaces that you're currently using

380
00:21:23,160 --> 00:21:27,060
so if these are not the same numbers on

381
00:21:27,060 --> 00:21:29,820
above new your processes you don't have

382
00:21:29,820 --> 00:21:35,940
access to this information networking if

383
00:21:35,940 --> 00:21:37,980
you create a new network namespace keep

384
00:21:37,980 --> 00:21:41,160
in mind that you would only have no you

385
00:21:41,160 --> 00:21:43,320
wouldn't have any interfaces there you

386
00:21:43,320 --> 00:21:46,200
have to create interfaces like pull back

387
00:21:46,200 --> 00:21:49,800
you have to create eth0 you have to

388
00:21:49,800 --> 00:21:52,200
create routing inside of that currently

389
00:21:52,200 --> 00:21:54,750
in Perl we don't have libraries for this

390
00:21:54,750 --> 00:21:57,330
which is something that I really hate

391
00:21:57,330 --> 00:21:58,740
and I'm working on that

392
00:21:58,740 --> 00:22:02,130
also because in order to configure the

393
00:22:02,130 --> 00:22:03,969
network interface inside this

394
00:22:03,969 --> 00:22:06,879
new network namespace I have to issue IP

395
00:22:06,879 --> 00:22:10,209
route comments and this is only system

396
00:22:10,209 --> 00:22:12,039
system system system and per is not

397
00:22:12,039 --> 00:22:17,049
system right this is not very good bid

398
00:22:17,049 --> 00:22:20,379
namespace and username space for the pit

399
00:22:20,379 --> 00:22:22,839
namespace for example if these are the

400
00:22:22,839 --> 00:22:27,009
bids inside on the host machine inside

401
00:22:27,009 --> 00:22:29,919
the pit new namespace for the child your

402
00:22:29,919 --> 00:22:32,109
process ID can be completely different

403
00:22:32,109 --> 00:22:36,789
like it can be 0 it can be 1 it can be

404
00:22:36,789 --> 00:22:42,879
any other bid now bid number so all this

405
00:22:42,879 --> 00:22:44,949
is a problem of communication between

406
00:22:44,949 --> 00:22:46,569
the parent and the child and when you

407
00:22:46,569 --> 00:22:50,609
create a container like with docker or

408
00:22:50,609 --> 00:22:54,759
LHC or lxd the problem is that it's even

409
00:22:54,759 --> 00:22:58,989
bigger because this parent and child are

410
00:22:58,989 --> 00:23:00,789
not actually parent and child you have

411
00:23:00,789 --> 00:23:03,309
to separate your application in two you

412
00:23:03,309 --> 00:23:05,229
have to have a demon on the host machine

413
00:23:05,229 --> 00:23:08,289
a demon on the client inside the

414
00:23:08,289 --> 00:23:10,839
container you have to think about some

415
00:23:10,839 --> 00:23:14,079
TCP UDP connection between those simply

416
00:23:14,079 --> 00:23:18,309
to make them talk so this is a very big

417
00:23:18,309 --> 00:23:26,199
problem yeah also when you change the

418
00:23:26,199 --> 00:23:28,569
pit namespace you cannot even send

419
00:23:28,569 --> 00:23:31,779
signals to this process which is very

420
00:23:31,779 --> 00:23:34,589
very very bad

421
00:23:34,589 --> 00:23:41,259
ok so if we don't share all of the

422
00:23:41,259 --> 00:23:47,019
namespaces this process can actually

423
00:23:47,019 --> 00:23:49,419
access different parts of your operating

424
00:23:49,419 --> 00:23:53,139
system like if you haven't created a new

425
00:23:53,139 --> 00:23:54,339
network namespace

426
00:23:54,339 --> 00:23:56,169
it still has access to the network on

427
00:23:56,169 --> 00:23:58,779
the same host so for example if you want

428
00:23:58,779 --> 00:24:00,999
to learn your application on the same

429
00:24:00,999 --> 00:24:04,029
port in different containers and if you

430
00:24:04,029 --> 00:24:06,329
haven't created a new network namespace

431
00:24:06,329 --> 00:24:09,579
after the first application binded for

432
00:24:09,579 --> 00:24:12,549
example to port 80 everyone every other

433
00:24:12,549 --> 00:24:15,789
application wouldn't be able to do the

434
00:24:15,789 --> 00:24:17,580
same goes for sockets

435
00:24:17,580 --> 00:24:21,350
and shared memory and stuff like this

436
00:24:21,350 --> 00:24:28,410
now what we had missing in her first

437
00:24:28,410 --> 00:24:33,600
list of supported namespaces I'm adding

438
00:24:33,600 --> 00:24:36,900
this in the next release of links on

439
00:24:36,900 --> 00:24:39,210
share I'm not sure if I should put it

440
00:24:39,210 --> 00:24:43,040
there or so or create a new module but

441
00:24:43,040 --> 00:24:45,660
listing all the namespaces that you

442
00:24:45,660 --> 00:24:48,750
currently support your kernel can be

443
00:24:48,750 --> 00:24:51,150
configured to only have for example user

444
00:24:51,150 --> 00:24:53,940
name space or network name space but not

445
00:24:53,940 --> 00:24:56,130
all five of the namespaces that you have

446
00:24:56,130 --> 00:25:00,930
are I think maybe six so if you want to

447
00:25:00,930 --> 00:25:03,120
see what you're supporting you have to

448
00:25:03,120 --> 00:25:07,100
cut this file it's obviously easy to

449
00:25:07,100 --> 00:25:10,680
open the file in Perl also if you want

450
00:25:10,680 --> 00:25:13,670
to see what control groups you support

451
00:25:13,670 --> 00:25:19,740
their CPU sets CPU memory block ion

452
00:25:19,740 --> 00:25:24,300
network cos and a lot more if you want

453
00:25:24,300 --> 00:25:26,190
to see what the current kernel supports

454
00:25:26,190 --> 00:25:29,670
you have to open this file in the Linux

455
00:25:29,670 --> 00:25:33,210
e group module you simply call C group

456
00:25:33,210 --> 00:25:37,770
list and it tells you now what control

457
00:25:37,770 --> 00:25:42,060
groups you currently have also when

458
00:25:42,060 --> 00:25:44,490
you're creating a new C group you

459
00:25:44,490 --> 00:25:46,400
actually have to create a directory with

460
00:25:46,400 --> 00:25:51,660
inside the mount of the C group there is

461
00:25:51,660 --> 00:25:54,570
different way of mounting the C groups

462
00:25:54,570 --> 00:25:57,540
one is to mount all the C groups in a

463
00:25:57,540 --> 00:26:02,520
single directory and create sub sub

464
00:26:02,520 --> 00:26:07,310
directories with different C groups or

465
00:26:07,310 --> 00:26:11,400
you can mount only for example CPU set

466
00:26:11,400 --> 00:26:13,980
in one directory memory in our directory

467
00:26:13,980 --> 00:26:16,800
Boca are in third directory and when you

468
00:26:16,800 --> 00:26:21,540
create one director and director in for

469
00:26:21,540 --> 00:26:24,810
example the CPU set you have only cpu

470
00:26:24,810 --> 00:26:27,720
set control group set up for this and

471
00:26:27,720 --> 00:26:29,850
you have to go to the other directory

472
00:26:29,850 --> 00:26:32,370
for the memory gel directory for the

473
00:26:32,370 --> 00:26:33,500
block IO

474
00:26:33,500 --> 00:26:36,690
unfortunately system the system D does

475
00:26:36,690 --> 00:26:40,410
this stupid mounting so I had to support

476
00:26:40,410 --> 00:26:43,650
it it's easier when all of your files

477
00:26:43,650 --> 00:26:46,580
are in single directory like this so

478
00:26:46,580 --> 00:26:48,900
creating a new control group is nice

479
00:26:48,900 --> 00:26:52,350
you're only creating a directory but if

480
00:26:52,350 --> 00:26:57,809
you haven't set same behavior to one you

481
00:26:57,809 --> 00:26:59,940
have to setup the control group because

482
00:26:59,940 --> 00:27:02,610
you cannot put the process inside of it

483
00:27:02,610 --> 00:27:05,789
because it doesn't contain any CPUs or

484
00:27:05,789 --> 00:27:09,750
memory so if you put a process there it

485
00:27:09,750 --> 00:27:11,520
cannot be shadowed anywhere so it

486
00:27:11,520 --> 00:27:13,140
doesn't the kernel doesn't allow you to

487
00:27:13,140 --> 00:27:18,090
put process there so if this is not set

488
00:27:18,090 --> 00:27:25,470
to one here you would normally cut this

489
00:27:25,470 --> 00:27:28,460
file which is from the main C group and

490
00:27:28,460 --> 00:27:31,710
put the information into the new C group

491
00:27:31,710 --> 00:27:35,039
CPU side CPUs again the same thing for

492
00:27:35,039 --> 00:27:37,590
memories these are the actual memory

493
00:27:37,590 --> 00:27:40,100
banks that you have on your machine and

494
00:27:40,100 --> 00:27:43,320
once you have put all of them work some

495
00:27:43,320 --> 00:27:45,960
of them to the new control group now you

496
00:27:45,960 --> 00:27:48,270
can actually push a process there and

497
00:27:48,270 --> 00:27:50,730
putting your process is quite easy you

498
00:27:50,730 --> 00:27:55,950
simply a hit inside the the tasks file

499
00:27:55,950 --> 00:28:00,870
now I'm going to show you in a bit how

500
00:28:00,870 --> 00:28:05,429
you can create this in Perl first what

501
00:28:05,429 --> 00:28:08,700
we usually do now is outside processes

502
00:28:08,700 --> 00:28:11,970
using system to create the container and

503
00:28:11,970 --> 00:28:13,710
inside the container we start this

504
00:28:13,710 --> 00:28:17,400
process the problem here is that even if

505
00:28:17,400 --> 00:28:19,860
your application is the only thing that

506
00:28:19,860 --> 00:28:22,850
resides in this container

507
00:28:22,850 --> 00:28:26,010
you'd use alexei create air is your

508
00:28:26,010 --> 00:28:32,429
docker which is a demon that is creating

509
00:28:32,429 --> 00:28:34,950
your containers and a common that is

510
00:28:34,950 --> 00:28:36,600
connecting to this demon and telling it

511
00:28:36,600 --> 00:28:39,330
okay i'm starting on your container and

512
00:28:39,330 --> 00:28:43,160
this new container you have to monitor

513
00:28:43,160 --> 00:28:45,680
this is something that your application

514
00:28:45,680 --> 00:28:49,460
would want to do monitor its child's but

515
00:28:49,460 --> 00:28:52,940
it's it's children but you can't because

516
00:28:52,940 --> 00:28:55,040
you're like connecting to another

517
00:28:55,040 --> 00:28:58,040
virtual machine now and this is breaking

518
00:28:58,040 --> 00:29:03,190
your connection of your code so let's

519
00:29:03,190 --> 00:29:06,830
look at something very simple an

520
00:29:06,830 --> 00:29:09,440
application that is forking and we have

521
00:29:09,440 --> 00:29:13,370
a bit directional pipe inside of it this

522
00:29:13,370 --> 00:29:16,280
is directly from the programming book

523
00:29:16,280 --> 00:29:21,310
example so it's it should be okay

524
00:29:21,310 --> 00:29:23,230
[Laughter]

525
00:29:23,230 --> 00:29:27,380
then in the child here what we have done

526
00:29:27,380 --> 00:29:29,840
is the first one after the house the

527
00:29:29,840 --> 00:29:32,240
first line is from the book and then we

528
00:29:32,240 --> 00:29:35,990
initialize a new control group which is

529
00:29:35,990 --> 00:29:39,830
actually doing the make gear inside C

530
00:29:39,830 --> 00:29:43,730
group sis FSC group and creating the

531
00:29:43,730 --> 00:29:47,680
demo1 directory it automatically checks

532
00:29:47,680 --> 00:29:53,000
ok automatically checks if you have

533
00:29:53,000 --> 00:29:56,480
enabled st. st. behavior and if you

534
00:29:56,480 --> 00:29:59,930
haven't it automatically gets the see

535
00:29:59,930 --> 00:30:03,650
all CPUs and memories from the previous

536
00:30:03,650 --> 00:30:07,910
C group the topmost C group and

537
00:30:07,910 --> 00:30:11,440
initializes your demo one C group then

538
00:30:11,440 --> 00:30:16,310
you simply print the process ID your

539
00:30:16,310 --> 00:30:21,410
process ID in the tasks file I'm using

540
00:30:21,410 --> 00:30:26,420
the move bid function because obviously

541
00:30:26,420 --> 00:30:28,820
you would you'd be enabled this way to

542
00:30:28,820 --> 00:30:32,090
move a process from one group to another

543
00:30:32,090 --> 00:30:35,270
C group and you don't need to have an

544
00:30:35,270 --> 00:30:39,640
hour functionally to issue your own pit

545
00:30:39,640 --> 00:30:44,120
to another file then I want to share all

546
00:30:44,120 --> 00:30:48,160
of my namespaces so I have created a

547
00:30:48,160 --> 00:30:53,240
very simple constant clone container and

548
00:30:53,240 --> 00:30:56,480
this is actually binary Orange

549
00:30:56,480 --> 00:31:02,000
of the frogs kwan-yuen ace cone units

550
00:31:02,000 --> 00:31:07,299
cone new IPC and so on so in order to

551
00:31:07,299 --> 00:31:10,880
compact space now we have created a new

552
00:31:10,880 --> 00:31:14,480
container with a new control group okay

553
00:31:14,480 --> 00:31:18,799
we didn't root we didn't set it here but

554
00:31:18,799 --> 00:31:20,929
this is completely different container

555
00:31:20,929 --> 00:31:25,669
now and these two containers so the

556
00:31:25,669 --> 00:31:30,740
parent and the child can still talk by

557
00:31:30,740 --> 00:31:35,030
the pipe which is quite nice because now

558
00:31:35,030 --> 00:31:37,790
your you can build your application and

559
00:31:37,790 --> 00:31:41,150
put your code that you want sandboxed

560
00:31:41,150 --> 00:31:44,240
here prepare everything in the parent

561
00:31:44,240 --> 00:31:47,690
and have all the data structures of your

562
00:31:47,690 --> 00:31:50,030
application without actually using

563
00:31:50,030 --> 00:31:53,630
store-bought JSON bees on and so on

564
00:31:53,630 --> 00:31:56,980
to transfer your data over the network

565
00:31:56,980 --> 00:32:00,890
because in this container that you're

566
00:32:00,890 --> 00:32:06,290
earning your insecure code is outside of

567
00:32:06,290 --> 00:32:13,360
your box and that's it

568
00:32:14,280 --> 00:32:17,899
if you have questions

569
00:32:20,790 --> 00:32:23,809
really no questions

570
00:32:23,809 --> 00:32:30,440
I want to do the similar thing and if

571
00:32:30,440 --> 00:32:32,960
you separate processes I mean the

572
00:32:32,960 --> 00:32:35,210
problem is if you have a server starting

573
00:32:35,210 --> 00:32:37,489
from which should not be moved and then

574
00:32:37,489 --> 00:32:42,889
you need to become root yeah yeah so you

575
00:32:42,889 --> 00:32:44,869
need a second second you I mean and

576
00:32:44,869 --> 00:32:47,629
scripting in the middle yeah doesn't

577
00:32:47,629 --> 00:32:49,789
work in Windows

578
00:32:49,789 --> 00:32:53,419
so you need a safe wrapper yeah the

579
00:32:53,419 --> 00:32:55,340
first thing you should do and in the

580
00:32:55,340 --> 00:32:57,440
third side then is to reduce yourself to

581
00:32:57,440 --> 00:33:00,200
whatever safe grounds and bail out if

582
00:33:00,200 --> 00:33:02,839
you don't manage yeah one of the

583
00:33:02,839 --> 00:33:04,849
implications I found is that you can't

584
00:33:04,849 --> 00:33:08,299
you break the it's a nice model it

585
00:33:08,299 --> 00:33:10,969
worked but you break the signal chain

586
00:33:10,969 --> 00:33:13,309
though because he come from from the

587
00:33:13,309 --> 00:33:18,979
parent and signal yeah you can yeah you

588
00:33:18,979 --> 00:33:25,309
can't no you can use the bi-directional

589
00:33:25,309 --> 00:33:27,440
pipe and that's it you can talk to your

590
00:33:27,440 --> 00:33:30,739
application but you cannot send signals

591
00:33:30,739 --> 00:33:33,559
or why other thing is what I have done

592
00:33:33,559 --> 00:33:37,190
for me is when the child is created it

593
00:33:37,190 --> 00:33:41,389
sends its bid it's process ID back to

594
00:33:41,389 --> 00:33:47,149
the parent but it from that bid and the

595
00:33:47,149 --> 00:33:49,009
parent actually can see which is the

596
00:33:49,009 --> 00:33:53,259
child inside the container and that's it

597
00:34:01,389 --> 00:34:08,960
yeah but how can in this in the

598
00:34:08,960 --> 00:34:11,839
beginning it shouldn't be able to do

599
00:34:11,839 --> 00:34:19,639
this then it wouldn't start at all yeah

600
00:34:19,639 --> 00:34:21,679
if you have a longer any path but if you

601
00:34:21,679 --> 00:34:24,139
already know the process ID from the

602
00:34:24,139 --> 00:34:28,849
parent which is still route you can

603
00:34:28,849 --> 00:34:31,339
actually do whatever you want on the

604
00:34:31,339 --> 00:34:32,929
child

605
00:34:32,929 --> 00:34:34,790
yeah but you have to leave the parent

606
00:34:34,790 --> 00:34:37,909
alerts that's it or you can simply leave

607
00:34:37,909 --> 00:34:40,389
a few capabilities for the parent like

608
00:34:40,389 --> 00:34:44,540
in the example I showed we don't drop

609
00:34:44,540 --> 00:34:47,179
capabilities at all even in the child

610
00:34:47,179 --> 00:34:50,929
but we should and in the parent when we

611
00:34:50,929 --> 00:34:52,280
were dropping capabilities we can

612
00:34:52,280 --> 00:34:56,780
actually drop only the capabilities not

613
00:34:56,780 --> 00:34:59,450
we don't need and if you need for

614
00:34:59,450 --> 00:35:03,170
example signaling it's bad because you

615
00:35:03,170 --> 00:35:06,380
would need cap sysadmin which is like

616
00:35:06,380 --> 00:35:17,500
half of the kernel I forgot to show you

617
00:35:17,500 --> 00:35:21,079
settin s setting s is similar to and

618
00:35:21,079 --> 00:35:24,890
share the difference is that you

619
00:35:24,890 --> 00:35:27,200
actually enter inside the container so

620
00:35:27,200 --> 00:35:30,020
you have to have a container that is

621
00:35:30,020 --> 00:35:31,970
already running somewhere like your

622
00:35:31,970 --> 00:35:34,339
application is running inside one

623
00:35:34,339 --> 00:35:36,050
container this is how you can actually

624
00:35:36,050 --> 00:35:39,890
do signaling inside the container like

625
00:35:39,890 --> 00:35:42,770
you're changing the namespace the bid

626
00:35:42,770 --> 00:35:45,500
namespace to the one of your application

627
00:35:45,500 --> 00:35:48,319
and you can safely with normal user I

628
00:35:48,319 --> 00:35:52,430
did like 99 send a signal to your

629
00:35:52,430 --> 00:35:55,190
application so again this is another way

630
00:35:55,190 --> 00:36:01,549
to approach your problem with it's a lot

631
00:36:01,549 --> 00:36:05,750
easier with set and s because you don't

632
00:36:05,750 --> 00:36:08,839
need to remember the process ID in the

633
00:36:08,839 --> 00:36:12,410
parent and you actually you are actually

634
00:36:12,410 --> 00:36:13,910
in the same namespace so it's not a

635
00:36:13,910 --> 00:36:16,309
problem now you have similar issues with

636
00:36:16,309 --> 00:36:18,980
shared memory for example if you want to

637
00:36:18,980 --> 00:36:22,280
change this certain things in the shared

638
00:36:22,280 --> 00:36:25,130
memory of an our namespace you have to

639
00:36:25,130 --> 00:36:29,180
enter there so you'd usually have a

640
00:36:29,180 --> 00:36:32,750
docker comment or Alexia touch and then

641
00:36:32,750 --> 00:36:35,480
you learn app or skip that you have

642
00:36:35,480 --> 00:36:37,220
copied it inside this container right

643
00:36:37,220 --> 00:36:40,940
now with Linux set unless you can simply

644
00:36:40,940 --> 00:36:41,660
do okay

645
00:36:41,660 --> 00:36:43,520
Satanist to this network namespace of

646
00:36:43,520 --> 00:36:46,930
this process and that's it

647
00:36:49,250 --> 00:36:56,350
anything else okay thank you

648
00:36:56,350 --> 00:37:03,699
[Applause]

