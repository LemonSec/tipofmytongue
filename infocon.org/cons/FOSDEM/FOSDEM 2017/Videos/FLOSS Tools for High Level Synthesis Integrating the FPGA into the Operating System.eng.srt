1
00:00:14,250 --> 00:00:18,660
let's love what I say that lovely loved

2
00:00:18,660 --> 00:00:26,410
aromatherapy Molly anyway thank you hi

3
00:00:26,410 --> 00:00:30,570
good morning we can start now

4
00:00:30,570 --> 00:00:33,340
my name is javi how do you appear I came

5
00:00:33,340 --> 00:00:36,970
from Spain and today I want to talk

6
00:00:36,970 --> 00:00:39,490
about the high level synthesis what's

7
00:00:39,490 --> 00:00:42,630
the status of this kind of technology in

8
00:00:42,630 --> 00:00:45,640
respecting to free free open-source

9
00:00:45,640 --> 00:00:49,540
software tools the point is that we will

10
00:00:49,540 --> 00:00:52,329
see we have not very a lot of

11
00:00:52,329 --> 00:00:54,660
alternatives to do this by using only

12
00:00:54,660 --> 00:00:58,900
free open-source software and the main

13
00:00:58,900 --> 00:01:01,480
topic on the main idea of this talk is

14
00:01:01,480 --> 00:01:03,670
to rise the plaque about all the issues

15
00:01:03,670 --> 00:01:07,869
we have right now and to try to to

16
00:01:07,869 --> 00:01:11,229
mobilize to to push the community in

17
00:01:11,229 --> 00:01:14,550
order to to take all this this issue

18
00:01:14,550 --> 00:01:17,890
from our company we have started do some

19
00:01:17,890 --> 00:01:20,710
work in order to reach these kind of

20
00:01:20,710 --> 00:01:23,710
things but as we will see this some

21
00:01:23,710 --> 00:01:27,430
there is a lot of work to be done yet ok

22
00:01:27,430 --> 00:01:29,920
let's start I want to make some comments

23
00:01:29,920 --> 00:01:31,690
about the state of the art about high

24
00:01:31,690 --> 00:01:35,799
level synthesis and we why is this

25
00:01:35,799 --> 00:01:37,990
become becoming very very important

26
00:01:37,990 --> 00:01:41,619
right now maybe you are already aware of

27
00:01:41,619 --> 00:01:43,570
this but in the last year's a lot of

28
00:01:43,570 --> 00:01:47,350
difference algorithms are starting to to

29
00:01:47,350 --> 00:01:50,680
gain a lot of traction and that require

30
00:01:50,680 --> 00:01:53,520
and this algorithm requires a lot of

31
00:01:53,520 --> 00:01:56,890
computational power for example we have

32
00:01:56,890 --> 00:01:59,460
imbalance speed we have better vision

33
00:01:59,460 --> 00:02:03,460
deeper machine learning Big Data data

34
00:02:03,460 --> 00:02:05,770
mining all of these kind of algorithms

35
00:02:05,770 --> 00:02:10,209
is there are not very complex as per as

36
00:02:10,209 --> 00:02:12,930
per design but they require a lot of

37
00:02:12,930 --> 00:02:15,819
computational power a lot of much more

38
00:02:15,819 --> 00:02:17,599
much operation

39
00:02:17,599 --> 00:02:20,499
and an extreme power link with the data

40
00:02:20,499 --> 00:02:24,430
in this situation the von Neumann CPUs

41
00:02:24,430 --> 00:02:28,629
the well-known CPU that used to be

42
00:02:28,629 --> 00:02:31,549
accelerated by the path of Morelos is

43
00:02:31,549 --> 00:02:34,609
not a scaling anymore we need to design

44
00:02:34,609 --> 00:02:37,370
or to develop alternative architectures

45
00:02:37,370 --> 00:02:40,879
in order to take all this kind of this

46
00:02:40,879 --> 00:02:45,829
kind of tasks well this is where FPGA is

47
00:02:45,829 --> 00:02:46,930
come to the rescue

48
00:02:46,930 --> 00:02:49,669
most of this kind of task does this very

49
00:02:49,669 --> 00:02:52,370
computational intensive tasks are right

50
00:02:52,370 --> 00:02:55,370
now I take off by using GPU tools for

51
00:02:55,370 --> 00:02:57,409
example is very well known the Nvidia

52
00:02:57,409 --> 00:03:01,909
CUDA so that you can program program in

53
00:03:01,909 --> 00:03:05,870
a very high level and and they provide a

54
00:03:05,870 --> 00:03:08,599
lot of floating-point parallel lines

55
00:03:08,599 --> 00:03:12,519
very powerful very very powerful one

56
00:03:12,519 --> 00:03:17,719
sorry the point is that for example this

57
00:03:17,719 --> 00:03:20,239
looks like very promising but there are

58
00:03:20,239 --> 00:03:22,099
some algorithms in which this approach

59
00:03:22,099 --> 00:03:24,290
doesn't fit very well for example we

60
00:03:24,290 --> 00:03:26,329
have the inference in a typical vision

61
00:03:26,329 --> 00:03:29,840
that you might suppose the using

62
00:03:29,840 --> 00:03:31,609
floating points our arithmetic is a very

63
00:03:31,609 --> 00:03:35,109
good idea but is not a good idea it

64
00:03:35,109 --> 00:03:38,569
empirical test so that the by using

65
00:03:38,569 --> 00:03:40,310
fixed and pointed metics you might

66
00:03:40,310 --> 00:03:43,819
improve the most all of the matrix you

67
00:03:43,819 --> 00:03:45,829
say silicon real estate because the

68
00:03:45,829 --> 00:03:49,370
logics you need fewer logical gates in

69
00:03:49,370 --> 00:03:51,739
order to implement the thing you also

70
00:03:51,739 --> 00:03:55,400
have fewer power consumption and even

71
00:03:55,400 --> 00:03:57,709
and surprisingly enough even the

72
00:03:57,709 --> 00:04:00,349
algorithm is more accurate by using

73
00:04:00,349 --> 00:04:02,239
fixed point aromatics that using

74
00:04:02,239 --> 00:04:04,219
floating point arithmetic this is maybe

75
00:04:04,219 --> 00:04:07,069
counter intuitive but is how the things

76
00:04:07,069 --> 00:04:12,049
really works some of the some benders on

77
00:04:12,049 --> 00:04:13,519
some hardware vendors for example Google

78
00:04:13,519 --> 00:04:16,279
are starting to develop their own very

79
00:04:16,279 --> 00:04:18,620
new hardware architectures but if you

80
00:04:18,620 --> 00:04:21,108
develop a team a chip from the ground up

81
00:04:21,108 --> 00:04:25,340
the cost are very very high so in this

82
00:04:25,340 --> 00:04:27,740
kind of agonies where you are you can

83
00:04:27,740 --> 00:04:29,810
change the algorithm the software is

84
00:04:29,810 --> 00:04:30,850
constantly

85
00:04:30,850 --> 00:04:34,150
involving your flexibility is a must and

86
00:04:34,150 --> 00:04:36,040
this is where FPS came to the rescue

87
00:04:36,040 --> 00:04:39,070
because poor definition you cannot find

88
00:04:39,070 --> 00:04:40,690
any more flexible

89
00:04:40,690 --> 00:04:43,570
any more flexible than I have PA and the

90
00:04:43,570 --> 00:04:45,490
thing is that the whole industry is

91
00:04:45,490 --> 00:04:48,430
looking at FTEs for answers let's see

92
00:04:48,430 --> 00:04:50,200
some examples for example we have a

93
00:04:50,200 --> 00:04:52,840
winter is striking back the winter the

94
00:04:52,840 --> 00:04:54,160
windows

95
00:04:54,160 --> 00:04:57,880
sorry winter is Microsoft + Intel is

96
00:04:57,880 --> 00:05:01,420
where we used to call that and he says

97
00:05:01,420 --> 00:05:03,640
looking back I don't know if you were

98
00:05:03,640 --> 00:05:05,770
aware of this but Intel has just bought

99
00:05:05,770 --> 00:05:08,260
al-qaeda now this was the the second

100
00:05:08,260 --> 00:05:11,650
brunt of a PE s in market share and it

101
00:05:11,650 --> 00:05:14,680
was funny enough that a couple of years

102
00:05:14,680 --> 00:05:17,860
ago in the first either EDF room in the

103
00:05:17,860 --> 00:05:20,380
in the digital design panel we started

104
00:05:20,380 --> 00:05:22,660
to talk about a rumor about Microsoft

105
00:05:22,660 --> 00:05:25,690
get it involved in FPS and so on and

106
00:05:25,690 --> 00:05:28,810
about project catapult that is an SDK

107
00:05:28,810 --> 00:05:31,510
that Microsoft Harper just released in

108
00:05:31,510 --> 00:05:34,660
order to accelerate the to accelerate

109
00:05:34,660 --> 00:05:39,010
software by using fps they are pardoning

110
00:05:39,010 --> 00:05:42,070
in some way with Intel and for example

111
00:05:42,070 --> 00:05:44,680
they are already using this in the beam

112
00:05:44,680 --> 00:05:47,020
search and game and they are planning to

113
00:05:47,020 --> 00:05:51,310
use this also in office365 in this

114
00:05:51,310 --> 00:05:54,340
picture I really like it do you have a

115
00:05:54,340 --> 00:05:56,830
see on professor in which in the same

116
00:05:56,830 --> 00:05:59,530
package you will have the multi-core CPU

117
00:05:59,530 --> 00:06:03,400
and an antenna FPA all packets in the

118
00:06:03,400 --> 00:06:07,090
same in a same socket so this kind of

119
00:06:07,090 --> 00:06:09,390
technology is going to be pushing the

120
00:06:09,390 --> 00:06:11,710
it's going to be pushing the data center

121
00:06:11,710 --> 00:06:14,770
a lot of but not only the consortium

122
00:06:14,770 --> 00:06:17,200
formed by Intel and Windows I'm sorry a

123
00:06:17,200 --> 00:06:20,890
Microsoft is using this approach there

124
00:06:20,890 --> 00:06:23,050
are some other examples too for example

125
00:06:23,050 --> 00:06:24,970
we have basil Bob I do I don't know

126
00:06:24,970 --> 00:06:27,580
whose spring news that is accelerate in

127
00:06:27,580 --> 00:06:30,850
SQL at the Dutton said at the data

128
00:06:30,850 --> 00:06:34,330
center by using silence Kintex ultra

129
00:06:34,330 --> 00:06:34,890
scale

130
00:06:34,890 --> 00:06:37,000
parts I don't know if you were one of

131
00:06:37,000 --> 00:06:38,170
these was very interesting

132
00:06:38,170 --> 00:06:41,620
still if has said before Amazon Web

133
00:06:41,620 --> 00:06:43,950
Services are already offering

134
00:06:43,950 --> 00:06:46,800
some units in which you can accelerate

135
00:06:46,800 --> 00:06:50,310
the which you can accelerate the

136
00:06:50,310 --> 00:06:53,840
software by using up to eight shillings

137
00:06:53,840 --> 00:06:58,460
FPGAs and IBM and with these

138
00:06:58,460 --> 00:07:02,190
intelligence our main concept I started

139
00:07:02,190 --> 00:07:06,780
to work with Cylons and by using the in

140
00:07:06,780 --> 00:07:10,800
order to integrate their power PC CPUs

141
00:07:10,800 --> 00:07:14,220
with the FPGA is coming from in front

142
00:07:14,220 --> 00:07:16,860
silence sorry and even more they have

143
00:07:16,860 --> 00:07:18,900
designed the own chip for deep learning

144
00:07:18,900 --> 00:07:21,620
that is called true north and what is

145
00:07:21,620 --> 00:07:24,840
not more people know that the this chip

146
00:07:24,840 --> 00:07:26,820
is actually designed by the Cornell

147
00:07:26,820 --> 00:07:29,850
University FPGA experts so what is

148
00:07:29,850 --> 00:07:32,730
really in the industry is a very

149
00:07:32,730 --> 00:07:37,470
specific @pe area so after these

150
00:07:37,470 --> 00:07:40,800
examples let's focusing how how level

151
00:07:40,800 --> 00:07:43,590
synthesis work what the target is to

152
00:07:43,590 --> 00:07:45,540
accelerate software going by using an

153
00:07:45,540 --> 00:07:47,430
FPGA what does this mean

154
00:07:47,430 --> 00:07:50,580
okay we can do we want to automatically

155
00:07:50,580 --> 00:07:52,410
generate a code for a high level

156
00:07:52,410 --> 00:07:55,110
definition for example OpenCL the

157
00:07:55,110 --> 00:07:58,590
language a decision in Kilda sorry the

158
00:07:58,590 --> 00:08:00,720
language that is using for and give you

159
00:08:00,720 --> 00:08:03,960
another another hardware platform stood

160
00:08:03,960 --> 00:08:05,490
for acceleration is becoming the de

161
00:08:05,490 --> 00:08:09,720
facto standard for most of the APA

162
00:08:09,720 --> 00:08:13,410
vendors - namely silence or internal

163
00:08:13,410 --> 00:08:16,710
formally and alpena the idea is to take

164
00:08:16,710 --> 00:08:20,610
all the this growing community of GPU

165
00:08:20,610 --> 00:08:23,760
based programmers that are very used to

166
00:08:23,760 --> 00:08:26,790
to use OpenCL on this kind of technology

167
00:08:26,790 --> 00:08:30,720
and take them and provide the FPS tools

168
00:08:30,720 --> 00:08:33,390
- in order to allow them to program an

169
00:08:33,390 --> 00:08:36,000
API without noting that they are using

170
00:08:36,000 --> 00:08:37,130
an FPGA

171
00:08:37,130 --> 00:08:39,419
these are very complex and expensive

172
00:08:39,419 --> 00:08:42,390
commercial tools in which they do

173
00:08:42,390 --> 00:08:43,650
provide an application the application

174
00:08:43,650 --> 00:08:46,290
get profiled by a Bulgarian machine or

175
00:08:46,290 --> 00:08:49,800
something similar and the most computing

176
00:08:49,800 --> 00:08:53,960
intensive task even I identified and

177
00:08:53,960 --> 00:08:57,210
there is a an automatically generation

178
00:08:57,210 --> 00:08:57,690
of the

179
00:08:57,690 --> 00:09:01,830
of the vehicle that cover these parts of

180
00:09:01,830 --> 00:09:05,430
the software that is most intensive then

181
00:09:05,430 --> 00:09:08,640
the software part is compiled and the

182
00:09:08,640 --> 00:09:11,340
scene and the hardware part the gate

183
00:09:11,340 --> 00:09:12,900
were part the partner is going to be

184
00:09:12,900 --> 00:09:14,940
deployed in the PE is also compiled and

185
00:09:14,940 --> 00:09:18,330
generated and then another piece of the

186
00:09:18,330 --> 00:09:22,020
of this of these tools is a special

187
00:09:22,020 --> 00:09:24,210
kernel model that is in charge of

188
00:09:24,210 --> 00:09:28,050
logging and logging and unloading the

189
00:09:28,050 --> 00:09:31,560
PGA's course as they are demanded by the

190
00:09:31,560 --> 00:09:36,110
by the algorithms who is how are we

191
00:09:36,110 --> 00:09:41,040
approaching this this kind of stuff

192
00:09:41,040 --> 00:09:42,990
from our company because there is not

193
00:09:42,990 --> 00:09:46,590
the in the past that have been some some

194
00:09:46,590 --> 00:09:50,070
tries to to develop high level synthesis

195
00:09:50,070 --> 00:09:52,710
tool in which you can program almost

196
00:09:52,710 --> 00:09:56,000
anything and it gets automatically

197
00:09:56,000 --> 00:09:59,670
profile like like in the tool the the

198
00:09:59,670 --> 00:10:02,340
band or FPGA vendors are providing but

199
00:10:02,340 --> 00:10:05,220
it is very complex there is no actually

200
00:10:05,220 --> 00:10:07,530
there is not any free open-source tool

201
00:10:07,530 --> 00:10:10,590
that is working right now in this way so

202
00:10:10,590 --> 00:10:12,840
our idea is to provide that set of

203
00:10:12,840 --> 00:10:14,970
hardware accelerated libraries for a

204
00:10:14,970 --> 00:10:17,760
specific port purpose let's see for

205
00:10:17,760 --> 00:10:19,410
example if we are going to program

206
00:10:19,410 --> 00:10:22,080
digital signal processing we want to

207
00:10:22,080 --> 00:10:25,260
have a set of libraries in which the

208
00:10:25,260 --> 00:10:27,510
most common operation are already

209
00:10:27,510 --> 00:10:30,950
present Assizes so that you can use the

210
00:10:30,950 --> 00:10:34,380
call of function and what you are on the

211
00:10:34,380 --> 00:10:36,990
thing what is doing is taking this

212
00:10:36,990 --> 00:10:40,500
presenta sized thing this is also has

213
00:10:40,500 --> 00:10:42,330
application for on a liberal such as

214
00:10:42,330 --> 00:10:44,580
embedded vision inverse kinematics and

215
00:10:44,580 --> 00:10:49,110
so the provided libraries must include a

216
00:10:49,110 --> 00:10:52,140
software side providing the wrapper like

217
00:10:52,140 --> 00:10:55,140
a ipi api in order to live with the

218
00:10:55,140 --> 00:10:56,490
standard software so that you can

219
00:10:56,490 --> 00:10:58,830
program a standard program and call this

220
00:10:58,830 --> 00:11:01,020
kind of libraries and i wanna get wurr

221
00:11:01,020 --> 00:11:04,590
side the fpga side in which the

222
00:11:04,590 --> 00:11:07,260
optimized HDL code is already present i

223
00:11:07,260 --> 00:11:10,500
sized this must be transparent for the

224
00:11:10,500 --> 00:11:11,290
programmers

225
00:11:11,290 --> 00:11:14,500
we can yes call the use the API make

226
00:11:14,500 --> 00:11:18,000
some includes and use dysfunction and

227
00:11:18,000 --> 00:11:21,190
and the system as in the in the previous

228
00:11:21,190 --> 00:11:25,020
case need to be in charge of logging and

229
00:11:25,020 --> 00:11:28,870
unloved in the FPGA part as the as the

230
00:11:28,870 --> 00:11:31,150
called the binary that you are executing

231
00:11:31,150 --> 00:11:33,780
the program in the CPU is needing the

232
00:11:33,780 --> 00:11:36,250
Pierre part in order to accelerate the

233
00:11:36,250 --> 00:11:41,920
thing how do we can integrate the FPGA

234
00:11:41,920 --> 00:11:43,570
into the operating system earlier to get

235
00:11:43,570 --> 00:11:46,540
this kind of him for sure first of all

236
00:11:46,540 --> 00:11:48,190
we are only focus on Linux I am not

237
00:11:48,190 --> 00:11:50,290
going to talk about Windows or nothing

238
00:11:50,290 --> 00:11:53,620
at all and what we need as I have

239
00:11:53,620 --> 00:11:56,380
previously said is to have some hardware

240
00:11:56,380 --> 00:11:58,750
accelerated libraries with the own

241
00:11:58,750 --> 00:12:01,770
associated with the stream for the FPGA

242
00:12:01,770 --> 00:12:04,180
we need to know that different library

243
00:12:04,180 --> 00:12:06,340
version is talking about libraries in

244
00:12:06,340 --> 00:12:08,230
the standard software in the server

245
00:12:08,230 --> 00:12:12,550
software point of view might require

246
00:12:12,550 --> 00:12:15,250
different bit stream versions too so we

247
00:12:15,250 --> 00:12:17,800
need to match the first the software

248
00:12:17,800 --> 00:12:21,280
part and the bit stream part so what we

249
00:12:21,280 --> 00:12:23,560
are doing is to package to packaging the

250
00:12:23,560 --> 00:12:25,840
Associated bit stream for each of these

251
00:12:25,840 --> 00:12:29,200
libraries as a little package so that

252
00:12:29,200 --> 00:12:31,470
you can we can establish

253
00:12:31,470 --> 00:12:34,690
interdependencies between the FPGA part

254
00:12:34,690 --> 00:12:37,120
and the software part so that it you

255
00:12:37,120 --> 00:12:40,090
need to install a software by instance

256
00:12:40,090 --> 00:12:42,520
of this kind of libraries the bit stream

257
00:12:42,520 --> 00:12:45,820
is also deployed and the person matches

258
00:12:45,820 --> 00:12:48,120
the version of the software library too

259
00:12:48,120 --> 00:12:50,680
and it's very important also this a

260
00:12:50,680 --> 00:12:53,560
comment that the bit stream needs to be

261
00:12:53,560 --> 00:12:57,310
present aside why this is also important

262
00:12:57,310 --> 00:12:59,860
well because synthesizing a bit stream

263
00:12:59,860 --> 00:13:04,000
is very a very time-consuming task you

264
00:13:04,000 --> 00:13:06,160
can lose a lot of time you cannot be

265
00:13:06,160 --> 00:13:07,150
synthesizing

266
00:13:07,150 --> 00:13:10,090
on the flight and even more important

267
00:13:10,090 --> 00:13:13,780
because only a x86 processor are able to

268
00:13:13,780 --> 00:13:16,000
run the the most of the synthesized

269
00:13:16,000 --> 00:13:18,610
tools that are available today may be

270
00:13:18,610 --> 00:13:22,540
yoshie-san expecting well kin-por later

271
00:13:22,540 --> 00:13:24,440
about this because

272
00:13:24,440 --> 00:13:27,080
you are using an ARM processor you

273
00:13:27,080 --> 00:13:29,440
cannot synthesize the thing inside the

274
00:13:29,440 --> 00:13:33,560
inside the chip we are using dr. project

275
00:13:33,560 --> 00:13:35,540
as the building system so that

276
00:13:35,540 --> 00:13:38,510
everything including the bitstream of

277
00:13:38,510 --> 00:13:40,280
the frame with the string associated to

278
00:13:40,280 --> 00:13:45,020
the libraries are are monitored and we

279
00:13:45,020 --> 00:13:48,880
use HDL make in order to integrate the

280
00:13:48,880 --> 00:13:53,390
bitstream synthesis inside the system

281
00:13:53,390 --> 00:13:55,870
the operating system generation so that

282
00:13:55,870 --> 00:14:00,170
by using HDL make we can generate some

283
00:14:00,170 --> 00:14:03,110
resides in with the Willis if I doctor

284
00:14:03,110 --> 00:14:05,900
project the building system all need to

285
00:14:05,900 --> 00:14:10,970
hold the Ignat how it needs to handle

286
00:14:10,970 --> 00:14:15,290
the the APL call code in order to delay

287
00:14:15,290 --> 00:14:18,170
the the package the package including

288
00:14:18,170 --> 00:14:22,850
the midstream as a couple of examples we

289
00:14:22,850 --> 00:14:25,820
have used this with the CERN open

290
00:14:25,820 --> 00:14:28,970
hardware kit in order to provide yes for

291
00:14:28,970 --> 00:14:32,840
internal use by the way by the moment to

292
00:14:32,840 --> 00:14:36,410
provide the automatic to provide

293
00:14:36,410 --> 00:14:39,370
automatic support for all different

294
00:14:39,370 --> 00:14:42,320
different mobile different hardware that

295
00:14:42,320 --> 00:14:45,680
can be inserted in in a carry about this

296
00:14:45,680 --> 00:14:47,330
sorry I have not explained this because

297
00:14:47,330 --> 00:14:52,030
I bring a little bit out of time

298
00:14:53,110 --> 00:14:56,570
this board is supporting grease you can

299
00:14:56,570 --> 00:14:59,720
plug different hardware models and each

300
00:14:59,720 --> 00:15:01,540
of them have different functionality

301
00:15:01,540 --> 00:15:04,520
these are controlled by an FPGA and if

302
00:15:04,520 --> 00:15:09,080
you depending of the on the depending of

303
00:15:09,080 --> 00:15:11,240
the model you are plugging into sorry

304
00:15:11,240 --> 00:15:12,350
depending on the mode you are plugging

305
00:15:12,350 --> 00:15:14,089
into you will need a different bit

306
00:15:14,089 --> 00:15:17,630
string of the FPGA to so by using it

307
00:15:17,630 --> 00:15:20,990
will make we have generated different

308
00:15:20,990 --> 00:15:22,970
packages different Linux packages for

309
00:15:22,970 --> 00:15:27,500
each of these different models that not

310
00:15:27,500 --> 00:15:30,950
only include the sorry that not only

311
00:15:30,950 --> 00:15:33,230
include the kernel model but we have

312
00:15:33,230 --> 00:15:35,270
also package for the users by program

313
00:15:35,270 --> 00:15:38,090
and also for the PA salafi we

314
00:15:38,090 --> 00:15:42,760
- to make a linear run time in which the

315
00:15:42,760 --> 00:15:46,400
sorry in which one of these models needs

316
00:15:46,400 --> 00:15:49,850
to be support by just installing one of

317
00:15:49,850 --> 00:15:52,160
the packets all of the different ones

318
00:15:52,160 --> 00:15:54,890
are generated and installed the user Spy

319
00:15:54,890 --> 00:15:57,920
the usual space program the kernel model

320
00:15:57,920 --> 00:16:02,030
plus the PDA system another very

321
00:16:02,030 --> 00:16:04,580
interesting example that we are using is

322
00:16:04,580 --> 00:16:07,160
for robotic controls I don't know if you

323
00:16:07,160 --> 00:16:09,500
are have heard about Ross the robotic

324
00:16:09,500 --> 00:16:12,560
operating system that there is one of

325
00:16:12,560 --> 00:16:14,510
the parts of this project that is called

326
00:16:14,510 --> 00:16:16,850
Ross industrial that is devoted to

327
00:16:16,850 --> 00:16:18,920
applying robotic operating system to

328
00:16:18,920 --> 00:16:22,760
industrial manipulators and it's also a

329
00:16:22,760 --> 00:16:27,710
free open source sdk in this kind of

330
00:16:27,710 --> 00:16:29,750
robotic controls there is a need for

331
00:16:29,750 --> 00:16:33,320
massive computational power we are part

332
00:16:33,320 --> 00:16:35,300
of this consortium and we are in charge

333
00:16:35,300 --> 00:16:38,000
of in trying to accelerate the the most

334
00:16:38,000 --> 00:16:41,240
in intensive algorithms that they this

335
00:16:41,240 --> 00:16:45,260
robots use by using FPGA and for example

336
00:16:45,260 --> 00:16:48,260
the most the most appropriate examples

337
00:16:48,260 --> 00:16:50,570
in order to do this is the the inverse

338
00:16:50,570 --> 00:16:51,320
kinematics

339
00:16:51,320 --> 00:16:53,930
the distance you know you take robotic

340
00:16:53,930 --> 00:16:57,650
arm they tell the tell it wording need

341
00:16:57,650 --> 00:17:02,420
to put the tooltip and it automatically

342
00:17:02,420 --> 00:17:05,900
calculates all of the movements or the

343
00:17:05,900 --> 00:17:09,550
different service it has it has a very

344
00:17:09,550 --> 00:17:12,859
computing intensive task and in order to

345
00:17:12,859 --> 00:17:15,650
clarify a path or movement a robot my

346
00:17:15,650 --> 00:17:19,760
lost about tens of seconds tends not ten

347
00:17:19,760 --> 00:17:22,910
tens of seconds maybe even a minute he

348
00:17:22,910 --> 00:17:24,369
is compress enough

349
00:17:24,369 --> 00:17:26,869
another one is point load that is more

350
00:17:26,869 --> 00:17:30,850
related to artificial vision and so on

351
00:17:30,850 --> 00:17:35,330
yeah I feel the abyssal zone we are

352
00:17:35,330 --> 00:17:38,840
working in applying the the previous the

353
00:17:38,840 --> 00:17:43,430
previous approach to this kind of to

354
00:17:43,430 --> 00:17:46,010
these two examples we have a mission

355
00:17:46,010 --> 00:17:50,240
feature that need to need to to get into

356
00:17:50,240 --> 00:17:51,190
the FPGA

357
00:17:51,190 --> 00:17:53,170
in order to be able to use this approach

358
00:17:53,170 --> 00:17:57,460
of having library accelerated by a few

359
00:17:57,460 --> 00:18:00,940
years that is the that is the partial

360
00:18:00,940 --> 00:18:05,680
reconfiguration maybe you have already

361
00:18:05,680 --> 00:18:08,230
heard about the Pareto rule that applies

362
00:18:08,230 --> 00:18:12,850
to libraries in general so that not all

363
00:18:12,850 --> 00:18:14,410
the libraries had use at the same time

364
00:18:14,410 --> 00:18:19,000
and most of the and the libraries are in

365
00:18:19,000 --> 00:18:22,780
the professor's as low that are unloaded

366
00:18:22,780 --> 00:18:26,740
in the cache cache a memory as they are

367
00:18:26,740 --> 00:18:30,820
required in order to perform to

368
00:18:30,820 --> 00:18:33,850
implement this approach in an efficient

369
00:18:33,850 --> 00:18:37,350
way in in FPGA in order to accelerate

370
00:18:37,350 --> 00:18:40,840
libraries in an FPGA in efficient way we

371
00:18:40,840 --> 00:18:44,430
need a way in order to we problem only

372
00:18:44,430 --> 00:18:47,500
slices of the PA not all the TA we need

373
00:18:47,500 --> 00:18:50,380
to handle the FPA configuration memory

374
00:18:50,380 --> 00:18:54,400
uses the CPU handle the cache and the

375
00:18:54,400 --> 00:18:57,280
cache a memory there are already some

376
00:18:57,280 --> 00:19:00,390
tools are able to do this but they are

377
00:19:00,390 --> 00:19:03,790
authoring but they are very expensive or

378
00:19:03,790 --> 00:19:08,230
they are not commercial turna tips there

379
00:19:08,230 --> 00:19:09,760
are only supporting high grant devices

380
00:19:09,760 --> 00:19:14,650
and but they are very expensive and some

381
00:19:14,650 --> 00:19:17,920
conclusions they are no a lot of flows

382
00:19:17,920 --> 00:19:20,290
freely very open source tools in order

383
00:19:20,290 --> 00:19:24,280
to do this SDL make is a very

384
00:19:24,280 --> 00:19:26,320
interesting tool that allow us to at

385
00:19:26,320 --> 00:19:30,070
least to manage all the pain of handling

386
00:19:30,070 --> 00:19:35,040
handling a PE and PL libraries together

387
00:19:35,040 --> 00:19:38,620
and we need also an SDL library standard

388
00:19:38,620 --> 00:19:41,350
may be IP exact can be a good candidate

389
00:19:41,350 --> 00:19:44,110
we need maybe another alternatives and

390
00:19:44,110 --> 00:19:46,720
we is very important also to have a IP

391
00:19:46,720 --> 00:19:48,820
integrator and maybe field so can be a

392
00:19:48,820 --> 00:19:51,220
very good idea in order to to use in

393
00:19:51,220 --> 00:19:53,400
order to do this kind of things and

394
00:19:53,400 --> 00:19:56,290
finally to have a workaround for partial

395
00:19:56,290 --> 00:20:00,440
reconfiguration and that is sorry

396
00:20:00,440 --> 00:20:06,690
yes but I I don't run anything okay okay

397
00:20:06,690 --> 00:20:12,210
okay okay I have told before about the

398
00:20:12,210 --> 00:20:14,070
atl make I under maintain a novice will

399
00:20:14,070 --> 00:20:17,340
make I have told you about since high

400
00:20:17,340 --> 00:20:20,760
level synthesis but this is my core my

401
00:20:20,760 --> 00:20:24,299
core tool and this is a an assistant to

402
00:20:24,299 --> 00:20:27,270
a common line to in order to to make the

403
00:20:27,270 --> 00:20:31,200
life easier for FPGA designers I have

404
00:20:31,200 --> 00:20:33,510
some stuff that I want to show you a

405
00:20:33,510 --> 00:20:36,419
video about the whole you can about the

406
00:20:36,419 --> 00:20:39,720
brand new graphical user interface I am

407
00:20:39,720 --> 00:20:43,950
developing for for HDL baked let's see

408
00:20:43,950 --> 00:20:56,070
sorry okay can you see that

409
00:20:56,070 --> 00:21:00,179
I am in this video I am just going to

410
00:21:00,179 --> 00:21:04,649
create to plan an ETL make project taken

411
00:21:04,649 --> 00:21:06,539
from the open harbor repository a site

412
00:21:06,539 --> 00:21:10,020
maintained by sir once why am have

413
00:21:10,020 --> 00:21:13,799
already download this these repository

414
00:21:13,799 --> 00:21:15,960
because HDL make is very useful in order

415
00:21:15,960 --> 00:21:19,559
to to use controlled version for your

416
00:21:19,559 --> 00:21:23,460
HDL code I have all right now know that

417
00:21:23,460 --> 00:21:27,390
the signings IESE tools and then I am

418
00:21:27,390 --> 00:21:29,760
going to learn the HDL what right now I

419
00:21:29,760 --> 00:21:34,549
call the dealmaker is like no javascript

420
00:21:34,549 --> 00:21:37,409
wrapper for HDL make so that you can

421
00:21:37,409 --> 00:21:40,289
open it in a in our web page so that you

422
00:21:40,289 --> 00:21:43,080
can run the synthesis even in your own

423
00:21:43,080 --> 00:21:46,919
computer and open this graphical user

424
00:21:46,919 --> 00:21:51,899
interface or even run it in a server in

425
00:21:51,899 --> 00:21:53,669
a server with all the tools installed

426
00:21:53,669 --> 00:21:56,669
and just accessing with any other

427
00:21:56,669 --> 00:22:00,470
computer we have some different controls

428
00:22:00,470 --> 00:22:04,950
now I am fitting the Cove because it

429
00:22:04,950 --> 00:22:07,020
automatically fits the libraries it need

430
00:22:07,020 --> 00:22:09,480
the IP core libraries in it in order to

431
00:22:09,480 --> 00:22:13,389
make the machine places and

432
00:22:13,389 --> 00:22:15,820
as now I can make a pouch because

433
00:22:15,820 --> 00:22:17,320
synthesis process is very very

434
00:22:17,320 --> 00:22:22,320
time-consuming very time-consuming task

435
00:22:22,320 --> 00:22:27,219
now here we have run in the we can see

436
00:22:27,219 --> 00:22:29,679
that the synthesis is running what the

437
00:22:29,679 --> 00:22:33,099
FET is running and now I am going to

438
00:22:33,099 --> 00:22:37,539
make the auto so at a makefile synthesis

439
00:22:37,539 --> 00:22:40,739
makefile has been just generated

440
00:22:40,739 --> 00:22:43,509
synthesis make file generated and now I

441
00:22:43,509 --> 00:22:47,200
am going to run the the make command

442
00:22:47,200 --> 00:22:49,440
because it will make produce make files

443
00:22:49,440 --> 00:22:53,109
we are running in in local mode and then

444
00:22:53,109 --> 00:22:56,079
all the IES see stuff from zionists

445
00:22:56,079 --> 00:22:58,839
start appealing in the in the in the

446
00:22:58,839 --> 00:23:03,039
screen now we need to stop because this

447
00:23:03,039 --> 00:23:07,539
is very thank consuming and after some

448
00:23:07,539 --> 00:23:09,609
minutes she want to be faster

449
00:23:09,609 --> 00:23:12,669
right now the synthesis has finally

450
00:23:12,669 --> 00:23:13,409
ended

451
00:23:13,409 --> 00:23:19,329
okay that video is not okay the

452
00:23:19,329 --> 00:23:24,969
synthesis a finale oh I saw the video

453
00:23:24,969 --> 00:23:29,469
was sorta sorry okay now we have a

454
00:23:29,469 --> 00:23:31,539
programming file we have for religion a

455
00:23:31,539 --> 00:23:35,349
the bitstream and then we could go to

456
00:23:35,349 --> 00:23:39,759
the to a file browser and get to grab

457
00:23:39,759 --> 00:23:42,669
the byte stream and to download it this

458
00:23:42,669 --> 00:23:44,320
is very usefully you are running the

459
00:23:44,320 --> 00:23:46,329
synthesis in a different machine so that

460
00:23:46,329 --> 00:23:48,729
you can access through your web browser

461
00:23:48,729 --> 00:23:50,979
and the synthesis is perform in another

462
00:23:50,979 --> 00:23:53,339
big machine and you can just grab the

463
00:23:53,339 --> 00:23:58,539
devstream one of the cool things we can

464
00:23:58,539 --> 00:24:01,059
do with this maybe this is the most

465
00:24:01,059 --> 00:24:03,729
interesting one is the one you have for

466
00:24:03,729 --> 00:24:05,259
really parts of the design and you have

467
00:24:05,259 --> 00:24:07,539
the relation between the inner parts of

468
00:24:07,539 --> 00:24:12,579
the design itself we have other projects

469
00:24:12,579 --> 00:24:14,440
alligator so that you are you can see

470
00:24:14,440 --> 00:24:17,739
the whole structure of the of the design

471
00:24:17,739 --> 00:24:21,819
itself you can browse the design you can

472
00:24:21,819 --> 00:24:25,539
close and you can close and collapse and

473
00:24:25,539 --> 00:24:26,559
expand the

474
00:24:26,559 --> 00:24:30,210
different branches from the design I

475
00:24:31,559 --> 00:24:33,909
think there is no much many more to

476
00:24:33,909 --> 00:24:42,580
explain in this well we see that we can

477
00:24:42,580 --> 00:24:45,490
film and to navigate and we can collapse

478
00:24:45,490 --> 00:24:49,240
the different branches also in order to

479
00:24:49,240 --> 00:24:52,360
focus in the parts of the design we we

480
00:24:52,360 --> 00:24:55,690
really want to focus on and I think the

481
00:24:55,690 --> 00:25:02,259
video is yes a minute left but it's the

482
00:25:02,259 --> 00:25:04,509
same I need not move from from the

483
00:25:04,509 --> 00:25:06,720
browser

