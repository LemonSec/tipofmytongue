1
00:00:00,030 --> 00:00:02,059
Oh

2
00:00:04,680 --> 00:00:09,480
I'm Brian Boram as the picture says I

3
00:00:09,480 --> 00:00:10,620
work for a company called weave works

4
00:00:10,620 --> 00:00:13,080
which is a Fulton source software

5
00:00:13,080 --> 00:00:18,660
company and before we get started can we

6
00:00:18,660 --> 00:00:21,480
can we get a show of hands who um who

7
00:00:21,480 --> 00:00:26,310
already knows kubernetes almost well

8
00:00:26,310 --> 00:00:28,019
let's say 2/3 okay

9
00:00:28,019 --> 00:00:34,829
docker more Linux yeah it's just

10
00:00:34,829 --> 00:00:40,910
checking who knows like be tables oh no

11
00:00:40,910 --> 00:00:45,750
so yeah I put in this is ancient wisdom

12
00:00:45,750 --> 00:00:49,500
that after the zombie apocalypse you're

13
00:00:49,500 --> 00:00:52,260
gonna need someone in your party who you

14
00:00:52,260 --> 00:00:53,520
know someone who can hunt someone who

15
00:00:53,520 --> 00:00:55,910
can heal and someone who knows IP tables

16
00:00:55,910 --> 00:01:04,319
so what I I'm here to talk about so a a

17
00:01:04,319 --> 00:01:07,530
way of blocking unwanted traffic so the

18
00:01:07,530 --> 00:01:11,400
basic idea that I'm gonna wipe my hands

19
00:01:11,400 --> 00:01:13,890
around its kind of dark isn't it and can

20
00:01:13,890 --> 00:01:15,900
you tell I have hands yes there are

21
00:01:15,900 --> 00:01:19,230
people waving back at me so so the basic

22
00:01:19,230 --> 00:01:22,500
idea that you have group a things and

23
00:01:22,500 --> 00:01:23,730
they're allowed to talk to group B

24
00:01:23,730 --> 00:01:24,870
things and they're not allowed to talk

25
00:01:24,870 --> 00:01:27,780
to group C things I'm going to talk

26
00:01:27,780 --> 00:01:29,430
about that in the context of kubernetes

27
00:01:29,430 --> 00:01:31,350
which is a Orchestrator a thing that

28
00:01:31,350 --> 00:01:34,409
runs software for you on many many

29
00:01:34,409 --> 00:01:37,409
machines I'm going to tell you how we

30
00:01:37,409 --> 00:01:39,120
implemented that in an open source

31
00:01:39,120 --> 00:01:45,270
program which is part of we've met okay

32
00:01:45,270 --> 00:01:49,440
so this is some kind of security talk so

33
00:01:49,440 --> 00:01:52,110
we have to have a threat model so this

34
00:01:52,110 --> 00:01:54,240
is my threat model the big guy is very

35
00:01:54,240 --> 00:01:58,220
big and very angry and coming after you

36
00:01:58,220 --> 00:02:03,900
so what do we do we have our threat on

37
00:02:03,900 --> 00:02:05,549
the left hand side we have our network

38
00:02:05,549 --> 00:02:07,920
on the right hand side and we put a

39
00:02:07,920 --> 00:02:11,099
firewall in between them that's how we

40
00:02:11,099 --> 00:02:13,579
keep them out

41
00:02:15,020 --> 00:02:22,300
the problem is this doesn't always work

42
00:02:23,110 --> 00:02:26,920
if the attacker gets inside your network

43
00:02:26,920 --> 00:02:30,950
he is now free to hit any node on the

44
00:02:30,950 --> 00:02:34,120
system because they're all connected

45
00:02:34,120 --> 00:02:37,580
worse than that well it may not even be

46
00:02:37,580 --> 00:02:39,170
an attacker you know this this may

47
00:02:39,170 --> 00:02:41,180
actually just be the the dev version of

48
00:02:41,180 --> 00:02:42,230
your software that you managed to

49
00:02:42,230 --> 00:02:46,010
release to production by mistake you

50
00:02:46,010 --> 00:02:48,830
know this this could be not even

51
00:02:48,830 --> 00:02:50,270
malicious it could just be randomly

52
00:02:50,270 --> 00:02:55,520
attacking your your system so so what do

53
00:02:55,520 --> 00:02:58,760
we want to do we want to put a bunch

54
00:02:58,760 --> 00:03:01,640
more firewalls in there and and stop

55
00:03:01,640 --> 00:03:03,380
this right we want to we want to stop

56
00:03:03,380 --> 00:03:08,210
all that unwanted traffic now imagine

57
00:03:08,210 --> 00:03:09,500
doing that in an environment which is

58
00:03:09,500 --> 00:03:11,570
very very dynamic where things can come

59
00:03:11,570 --> 00:03:13,340
and go all the time where things can

60
00:03:13,340 --> 00:03:16,850
auto scale up and down more machines

61
00:03:16,850 --> 00:03:18,890
fewer machines running containers

62
00:03:18,890 --> 00:03:24,170
running under control of an Orchestrator

63
00:03:24,170 --> 00:03:26,240
which is just firing them up wherever it

64
00:03:26,240 --> 00:03:28,700
feels like so it's a very very dynamic

65
00:03:28,700 --> 00:03:30,260
environment so that's the problem we

66
00:03:30,260 --> 00:03:35,690
have to solve okay so I'm going to take

67
00:03:35,690 --> 00:03:37,040
an example just to show you a little bit

68
00:03:37,040 --> 00:03:39,350
more about how this works in kubernetes

69
00:03:39,350 --> 00:03:43,100
how you how you specify this so as a

70
00:03:43,100 --> 00:03:45,110
fairly typical example like a three-tier

71
00:03:45,110 --> 00:03:47,810
system where the presentation is

72
00:03:47,810 --> 00:03:48,980
supposed to talk to the middle tier but

73
00:03:48,980 --> 00:03:50,210
it's not supposed to talk to the data

74
00:03:50,210 --> 00:03:54,290
tier so this if you can read that this

75
00:03:54,290 --> 00:03:56,480
is how you would write a network policy

76
00:03:56,480 --> 00:03:59,230
in kubernetes there's a yeah mod file

77
00:03:59,230 --> 00:04:01,850
this is actually like what it would look

78
00:04:01,850 --> 00:04:05,960
like pasted it in so that's a meta data

79
00:04:05,960 --> 00:04:09,110
at the top saying it's a policy and then

80
00:04:09,110 --> 00:04:11,300
we say the presentation tier will only

81
00:04:11,300 --> 00:04:16,040
accept ingress on port 80 so it's pretty

82
00:04:16,040 --> 00:04:18,140
simple that's how you set up those rules

83
00:04:18,140 --> 00:04:21,410
in kubernetes what do we mean by a tier

84
00:04:21,410 --> 00:04:23,390
Colin presentation in kubernetes you can

85
00:04:23,390 --> 00:04:26,600
label anything you like and particularly

86
00:04:26,600 --> 00:04:29,030
you label pods

87
00:04:29,030 --> 00:04:31,040
which are public applaud is the

88
00:04:31,040 --> 00:04:32,480
abstraction of your running software

89
00:04:32,480 --> 00:04:34,240
what is really a collection of

90
00:04:34,240 --> 00:04:38,090
containers one container perhaps or more

91
00:04:38,090 --> 00:04:41,290
than one container which go together so

92
00:04:41,290 --> 00:04:45,950
so we label our containers here's a

93
00:04:45,950 --> 00:04:49,040
little bit more complicated rule this

94
00:04:49,040 --> 00:04:51,820
one says anything in the middle tier

95
00:04:51,820 --> 00:04:54,800
will only accept input from anything in

96
00:04:54,800 --> 00:04:57,920
the presentation tier so this time we

97
00:04:57,920 --> 00:04:59,300
said where it's coming from and we did

98
00:04:59,300 --> 00:05:01,190
not say anything about ports now we can

99
00:05:01,190 --> 00:05:02,570
kind of mix and match that we can we can

100
00:05:02,570 --> 00:05:04,550
reject restrict the protocols the port's

101
00:05:04,550 --> 00:05:06,980
the where it's coming from where it's

102
00:05:06,980 --> 00:05:08,320
going to

103
00:05:08,320 --> 00:05:11,090
so that is kubernetes Network policy

104
00:05:11,090 --> 00:05:14,120
that was added as a specification about

105
00:05:14,120 --> 00:05:17,450
a year ago and there are three or four

106
00:05:17,450 --> 00:05:21,860
implementations of that specification so

107
00:05:21,860 --> 00:05:24,800
how do we implement it well this is an

108
00:05:24,800 --> 00:05:26,900
open source conference get over to

109
00:05:26,900 --> 00:05:30,740
github and read the source No ok you

110
00:05:30,740 --> 00:05:34,640
expected me to do more work ok so this

111
00:05:34,640 --> 00:05:36,500
is a kind of high-level architecture

112
00:05:36,500 --> 00:05:43,190
diagram of how this works we run we run

113
00:05:43,190 --> 00:05:46,760
a daemon process on every host so in

114
00:05:46,760 --> 00:05:50,590
this picture I have two hosts and

115
00:05:50,590 --> 00:05:55,160
kubernetes has this master service which

116
00:05:55,160 --> 00:05:56,740
knows everything about what's going on

117
00:05:56,740 --> 00:06:00,410
so we set up a a watch this is within

118
00:06:00,410 --> 00:06:04,700
the kubernetes api we say I want to be

119
00:06:04,700 --> 00:06:07,850
notified of all changes and in

120
00:06:07,850 --> 00:06:10,180
particular two network policies and pods

121
00:06:10,180 --> 00:06:13,640
so I'm going to get calls over that API

122
00:06:13,640 --> 00:06:17,390
when any of those things change then we

123
00:06:17,390 --> 00:06:19,190
drive IP tables I told you that was

124
00:06:19,190 --> 00:06:24,490
important how does that work well we

125
00:06:24,490 --> 00:06:27,860
inject into the top-level forwarding

126
00:06:27,860 --> 00:06:32,270
chain a rule that that says we're going

127
00:06:32,270 --> 00:06:34,729
to check some rules under the oops don't

128
00:06:34,729 --> 00:06:38,840
do that and we're going to either ok

129
00:06:38,840 --> 00:06:40,910
we're going to check some rules under

130
00:06:40,910 --> 00:06:42,710
the heading of we've NPC

131
00:06:42,710 --> 00:06:44,570
network policy controller if we do not

132
00:06:44,570 --> 00:06:47,690
pass those rules then drop the packet so

133
00:06:47,690 --> 00:06:48,830
that's the most important thing we

134
00:06:48,830 --> 00:06:53,780
failsafe the next thing we do is is we

135
00:06:53,780 --> 00:06:56,450
say if if this is if this is an

136
00:06:56,450 --> 00:06:59,510
established connection then accept the

137
00:06:59,510 --> 00:07:01,820
packet this is a performance hack we

138
00:07:01,820 --> 00:07:05,510
don't want to check every packet we only

139
00:07:05,510 --> 00:07:07,100
want to check the ones that open a new

140
00:07:07,100 --> 00:07:09,800
connection so the first thing we do is

141
00:07:09,800 --> 00:07:10,880
we say if it's an already established

142
00:07:10,880 --> 00:07:16,280
connection then accept it and otherwise

143
00:07:16,280 --> 00:07:19,100
we check a couple of other chains what

144
00:07:19,100 --> 00:07:22,310
are we going to do in those chains we we

145
00:07:22,310 --> 00:07:24,980
need to so this is kind of flow of the

146
00:07:24,980 --> 00:07:27,980
system we we start with the source

147
00:07:27,980 --> 00:07:31,520
address on the network that's going to

148
00:07:31,520 --> 00:07:35,330
go over a bridge Linux bridge in the

149
00:07:35,330 --> 00:07:37,250
course of traversing that bridge it's

150
00:07:37,250 --> 00:07:39,260
going to get run through the IP tables

151
00:07:39,260 --> 00:07:41,750
rules and we make use of this other

152
00:07:41,750 --> 00:07:43,580
thing called an IP set who knows about

153
00:07:43,580 --> 00:07:47,990
IP sets oh watch furor okay okay so

154
00:07:47,990 --> 00:07:51,110
today you learn something so so an IP

155
00:07:51,110 --> 00:07:55,760
set is a pretty useful thing because in

156
00:07:55,760 --> 00:07:58,250
a large kubernetes system there could be

157
00:07:58,250 --> 00:07:59,990
thousands of pods there could be

158
00:07:59,990 --> 00:08:02,720
thousands of combinations of source and

159
00:08:02,720 --> 00:08:04,550
destination IP addresses that we want to

160
00:08:04,550 --> 00:08:08,120
either accept or reject and if we wrote

161
00:08:08,120 --> 00:08:11,480
a rule for each one of those then it

162
00:08:11,480 --> 00:08:12,740
would start to get slower and slower and

163
00:08:12,740 --> 00:08:14,780
slower because it's kind of a linear

164
00:08:14,780 --> 00:08:19,610
search and IP set is a hash table into

165
00:08:19,610 --> 00:08:21,080
which we can put the same information we

166
00:08:21,080 --> 00:08:22,310
can put the source to destination the

167
00:08:22,310 --> 00:08:25,450
port and we can match against that in a

168
00:08:25,450 --> 00:08:30,530
unit time approximately operation and if

169
00:08:30,530 --> 00:08:33,919
it passes we send it the destination so

170
00:08:33,919 --> 00:08:35,780
just because you're enjoying this so

171
00:08:35,780 --> 00:08:38,080
much we'll take a look at the exact

172
00:08:38,080 --> 00:08:42,620
syntax of those rules so we say we're

173
00:08:42,620 --> 00:08:44,720
using the set module it's like an add-on

174
00:08:44,720 --> 00:08:47,660
module for our IP tables but it you know

175
00:08:47,660 --> 00:08:50,630
ships in every district and we're going

176
00:08:50,630 --> 00:08:52,700
to match a set with a very very funny

177
00:08:52,700 --> 00:08:54,520
name

178
00:08:54,520 --> 00:08:56,350
if so there's two kinds there's a con

179
00:08:56,350 --> 00:08:57,700
where we just match on the destination

180
00:08:57,700 --> 00:08:59,740
that's the kind of default set and then

181
00:08:59,740 --> 00:09:01,180
this is the what we call the ingress

182
00:09:01,180 --> 00:09:03,220
chain where we match on both the source

183
00:09:03,220 --> 00:09:05,980
and the destination so that just depends

184
00:09:05,980 --> 00:09:08,170
back in those policies it depends

185
00:09:08,170 --> 00:09:12,610
whether the admin specified anything

186
00:09:12,610 --> 00:09:15,070
about the source or just about the

187
00:09:15,070 --> 00:09:20,230
destination why the funny names so

188
00:09:20,230 --> 00:09:23,230
basically this is an encoding the the

189
00:09:23,230 --> 00:09:26,470
space of names so each one of these

190
00:09:26,470 --> 00:09:28,210
corresponds to a network policy in

191
00:09:28,210 --> 00:09:30,520
kubernetes and and the length of name

192
00:09:30,520 --> 00:09:32,260
you can have in kubernetes is longer

193
00:09:32,260 --> 00:09:33,910
than the length of name you can have in

194
00:09:33,910 --> 00:09:36,670
IP tables so we kind of crunched them

195
00:09:36,670 --> 00:09:38,230
down and made use of some extra

196
00:09:38,230 --> 00:09:40,690
characters that it's a little bit like

197
00:09:40,690 --> 00:09:43,360
base64 encoding except it's base 86

198
00:09:43,360 --> 00:09:50,530
encoding and or anyway okay so those are

199
00:09:50,530 --> 00:09:53,280
the change that works that's what we do

200
00:09:53,280 --> 00:09:55,660
it is incredibly easy to get these

201
00:09:55,660 --> 00:10:00,700
things wrong when you are specifying the

202
00:10:00,700 --> 00:10:03,250
rules if you get it wrong it will drop

203
00:10:03,250 --> 00:10:06,300
your traffic when you didn't want it to

204
00:10:06,300 --> 00:10:09,100
so we add one more rule at the top level

205
00:10:09,100 --> 00:10:14,190
we we use the NF log net filter logging

206
00:10:14,190 --> 00:10:17,890
technique or rule destination whatever

207
00:10:17,890 --> 00:10:20,590
you call that thing and then we pick

208
00:10:20,590 --> 00:10:23,740
that up in our program we use you log D

209
00:10:23,740 --> 00:10:27,700
just to subscribe to that we use channel

210
00:10:27,700 --> 00:10:30,640
86 because two eight that's kind of

211
00:10:30,640 --> 00:10:33,970
slang 86 it is get rid of it so that's

212
00:10:33,970 --> 00:10:36,580
those we log connections that get

213
00:10:36,580 --> 00:10:41,830
dropped by our daemon and we also export

214
00:10:41,830 --> 00:10:43,720
that as a metric that can be picked up

215
00:10:43,720 --> 00:10:45,310
as something like Prometheus so you can

216
00:10:45,310 --> 00:10:47,920
you can allow if you suddenly get a lot

217
00:10:47,920 --> 00:10:51,400
of rejected connections then that means

218
00:10:51,400 --> 00:10:53,320
either you have some kind of attacker in

219
00:10:53,320 --> 00:10:55,470
your system or you miss configured it

220
00:10:55,470 --> 00:10:58,120
and both of those things are interesting

221
00:10:58,120 --> 00:11:00,790
things to be monitoring so we export

222
00:11:00,790 --> 00:11:05,730
those okay

223
00:11:05,730 --> 00:11:08,340
the

224
00:11:08,340 --> 00:11:12,010
blog post is the first link if you're

225
00:11:12,010 --> 00:11:13,870
interested to read more about how it

226
00:11:13,870 --> 00:11:16,450
works has a walkthrough of how you can

227
00:11:16,450 --> 00:11:19,720
set it up and try it out the code is on

228
00:11:19,720 --> 00:11:26,650
github it is all written in go and and

229
00:11:26,650 --> 00:11:30,130
we also have a cloud service where you

230
00:11:30,130 --> 00:11:33,580
can kind of run all this stuff hosted so

231
00:11:33,580 --> 00:11:35,590
that's pretty much what I came to say

232
00:11:35,590 --> 00:11:47,260
thank you thank you so do you have any

233
00:11:47,260 --> 00:11:49,810
questions we have another maybe about

234
00:11:49,810 --> 00:11:58,540
five minutes for questions one there get

235
00:11:58,540 --> 00:12:07,600
some exercise about six more role thanks

236
00:12:07,600 --> 00:12:09,760
for the talk I actually have two

237
00:12:09,760 --> 00:12:12,880
questions okay first one is it doesn't

238
00:12:12,880 --> 00:12:16,870
seem like you need to use weave as a sdn

239
00:12:16,870 --> 00:12:19,840
provider but I think maybe we need

240
00:12:19,840 --> 00:12:22,030
because I didn't see any connection

241
00:12:22,030 --> 00:12:24,250
between weave as a sdn provider and

242
00:12:24,250 --> 00:12:27,790
weave as the network policy controller

243
00:12:27,790 --> 00:12:30,670
yeah and this second question should I

244
00:12:30,670 --> 00:12:32,560
answer that and then come back to your

245
00:12:32,560 --> 00:12:35,740
other one okay so you're absolutely

246
00:12:35,740 --> 00:12:39,460
right the program that we implemented is

247
00:12:39,460 --> 00:12:43,540
is fully generic it will work

248
00:12:43,540 --> 00:12:45,550
in any situation where you can persuade

249
00:12:45,550 --> 00:12:48,370
IP tables to check the source and

250
00:12:48,370 --> 00:12:51,700
destination and port of your packet we

251
00:12:51,700 --> 00:12:55,930
only ship it as part of weave net

252
00:12:55,930 --> 00:12:59,380
because because you do you do need to

253
00:12:59,380 --> 00:13:02,860
somehow start the process you know we

254
00:13:02,860 --> 00:13:04,720
don't want to just tell IP tables to run

255
00:13:04,720 --> 00:13:06,370
our rules on every packet on the machine

256
00:13:06,370 --> 00:13:08,560
because we only want to run the rules

257
00:13:08,560 --> 00:13:10,200
for the packets that belong to

258
00:13:10,200 --> 00:13:15,610
kubernetes so so there's there's like a

259
00:13:15,610 --> 00:13:18,490
few lines of config to send basically

260
00:13:18,490 --> 00:13:19,720
you need to know like the name of the

261
00:13:19,720 --> 00:13:20,240
bridge

262
00:13:20,240 --> 00:13:22,880
or something like that in order to start

263
00:13:22,880 --> 00:13:25,330
the process off but your your

264
00:13:25,330 --> 00:13:27,440
observation is absolutely correct that

265
00:13:27,440 --> 00:13:30,470
the we've NPC is a standalone program

266
00:13:30,470 --> 00:13:33,440
and it just so happens that we ship it

267
00:13:33,440 --> 00:13:36,649
alongside our Sdn the the two things do

268
00:13:36,649 --> 00:13:40,580
not need each other and thank you and

269
00:13:40,580 --> 00:13:43,130
second question what happens if we

270
00:13:43,130 --> 00:13:46,339
implement a new network policy that

271
00:13:46,339 --> 00:13:51,290
blocks a connection that was already

272
00:13:51,290 --> 00:13:55,520
established and does it do anything does

273
00:13:55,520 --> 00:13:58,459
it right yeah it does not because of

274
00:13:58,459 --> 00:14:01,010
that because of that that performance

275
00:14:01,010 --> 00:14:05,470
hack where we if I can find that rule

276
00:14:05,470 --> 00:14:10,940
yeah so this thing where we we don't

277
00:14:10,940 --> 00:14:12,980
want to impose the lookup overhead on

278
00:14:12,980 --> 00:14:14,870
every packet we only do on connection

279
00:14:14,870 --> 00:14:17,000
establishment so if you manage to

280
00:14:17,000 --> 00:14:19,490
establish connection that will stay

281
00:14:19,490 --> 00:14:23,660
active so we we did discuss I'm a member

282
00:14:23,660 --> 00:14:25,730
of the kubernetes sig Network committee

283
00:14:25,730 --> 00:14:28,160
and we did discuss this point and we

284
00:14:28,160 --> 00:14:30,680
felt like if the bad guy got in already

285
00:14:30,680 --> 00:14:33,829
then you know that that's too bad reboot

286
00:14:33,829 --> 00:14:35,000
the machine or something like that if

287
00:14:35,000 --> 00:14:36,670
you if you want to drop that connection

288
00:14:36,670 --> 00:14:39,350
that's not within the scope of

289
00:14:39,350 --> 00:14:41,810
kubernetes network policy to drop

290
00:14:41,810 --> 00:14:46,339
already active connections thank you we

291
00:14:46,339 --> 00:14:48,020
have a question we have time for another

292
00:14:48,020 --> 00:14:50,470
two minutes for another question or two

293
00:14:50,470 --> 00:14:53,029
somebody's interested quick think of

294
00:14:53,029 --> 00:14:55,170
something

295
00:14:55,170 --> 00:14:57,779
oh one in the middle there that's like

296
00:14:57,779 --> 00:15:00,329
the worst possible place can you just do

297
00:15:00,329 --> 00:15:07,050
sign language do you have any numbers in

298
00:15:07,050 --> 00:15:09,660
terms of basically performance and

299
00:15:09,660 --> 00:15:11,760
escalation so at at the point that you

300
00:15:11,760 --> 00:15:13,230
start having more containers basically

301
00:15:13,230 --> 00:15:15,300
you start having more rules or VP tables

302
00:15:15,300 --> 00:15:17,399
does this effect and how the

303
00:15:17,399 --> 00:15:19,440
performances right you're asking about

304
00:15:19,440 --> 00:15:21,839
performance so they the design of the

305
00:15:21,839 --> 00:15:24,600
system is that there's one rule per

306
00:15:24,600 --> 00:15:28,560
policy the number of containers should

307
00:15:28,560 --> 00:15:32,519
not impact the performance because it's

308
00:15:32,519 --> 00:15:34,680
that each each source destination is a

309
00:15:34,680 --> 00:15:38,070
hash table lookup so it's designed to

310
00:15:38,070 --> 00:15:41,699
remain the same speed as the number of

311
00:15:41,699 --> 00:15:44,720
containers or pods and kubernetes grows

312
00:15:44,720 --> 00:15:48,750
it will slow down very slightly as you

313
00:15:48,750 --> 00:15:52,860
add more policies because each policy

314
00:15:52,860 --> 00:15:56,300
has to be checked to see if it applies

