1
00:00:00,030 --> 00:00:02,538
we're gonna

2
00:00:04,770 --> 00:00:08,189
start our first talk given by Patrick

3
00:00:08,189 --> 00:00:09,770
carriage and he's going to talk about

4
00:00:09,770 --> 00:00:14,670
specifications thanks me when yeah okay

5
00:00:14,670 --> 00:00:18,360
high specification at the mom I want my

6
00:00:18,360 --> 00:00:19,830
talk is called boost up your code new

7
00:00:19,830 --> 00:00:22,259
specifications but anyone heard about

8
00:00:22,259 --> 00:00:23,970
about specification pattern or

9
00:00:23,970 --> 00:00:30,180
specifications okay not much so what

10
00:00:30,180 --> 00:00:32,759
aspects specification

11
00:00:32,759 --> 00:00:36,030
what are these we go to specifications

12
00:00:36,030 --> 00:00:39,649
later first we should tackle the problem

13
00:00:39,649 --> 00:00:42,839
who is working with doctrine broker law

14
00:00:42,839 --> 00:00:45,649
or anything else

15
00:00:45,859 --> 00:00:49,980
not much so the other half is doing SQL

16
00:00:49,980 --> 00:00:51,929
statements on your own which P do at

17
00:00:51,929 --> 00:01:01,920
least my school comments oh yeah okay so

18
00:01:01,920 --> 00:01:04,739
an Oran what's in your I'm it's a

19
00:01:04,739 --> 00:01:07,290
relational mapper and object relational

20
00:01:07,290 --> 00:01:10,680
mapper Maps your PHP object or model or

21
00:01:10,680 --> 00:01:12,360
in tightly however you want to call it

22
00:01:12,360 --> 00:01:15,540
doctrine is called anti t2 that the

23
00:01:15,540 --> 00:01:17,759
based able to simply database wrote a

24
00:01:17,759 --> 00:01:20,579
row so let's take a look at an example

25
00:01:20,579 --> 00:01:23,399
model in this case pretty clear class

26
00:01:23,399 --> 00:01:25,530
unicron which has an ID

27
00:01:25,530 --> 00:01:28,200
we always need an ID and primary key and

28
00:01:28,200 --> 00:01:30,450
unique identifier for database and we

29
00:01:30,450 --> 00:01:32,219
have a name of course a unique on should

30
00:01:32,219 --> 00:01:34,649
have a name and a color why not

31
00:01:34,649 --> 00:01:37,350
birthdate okay and it has laser horns

32
00:01:37,350 --> 00:01:39,750
maybe not it could be true or false and

33
00:01:39,750 --> 00:01:43,320
it poops rainbows and it can fly because

34
00:01:43,320 --> 00:01:46,049
unicorns must fly so this is a example

35
00:01:46,049 --> 00:01:49,049
which be less it's simple and or in

36
00:01:49,049 --> 00:01:51,149
configuration for doctrine proper

37
00:01:51,149 --> 00:01:53,159
however isn't shown yet because it

38
00:01:53,159 --> 00:01:55,829
doesn't matter today but if you have a

39
00:01:55,829 --> 00:01:58,950
unicorn class or any model you use you

40
00:01:58,950 --> 00:02:01,560
want to save it to the database so use

41
00:02:01,560 --> 00:02:04,500
your or m to create this table with

42
00:02:04,500 --> 00:02:07,409
varieties and in what chart I need for

43
00:02:07,409 --> 00:02:09,869
the boolean so let's take a look at

44
00:02:09,869 --> 00:02:10,440
clouds

45
00:02:10,440 --> 00:02:15,840
this is Klaus it's an awesome unicorn so

46
00:02:15,840 --> 00:02:19,520
we'll prepare to set the hairs class

47
00:02:20,360 --> 00:02:26,280
it's what you can't put rainbows but it

48
00:02:26,280 --> 00:02:29,580
has not a laser horn sadly it would be

49
00:02:29,580 --> 00:02:33,420
more cruel but so we define clouds we

50
00:02:33,420 --> 00:02:35,520
create a new unicorn instance name it

51
00:02:35,520 --> 00:02:38,310
clouds it's white 30 years old please

52
00:02:38,310 --> 00:02:39,959
congratulate Klaus it's busy it's

53
00:02:39,959 --> 00:02:44,819
birthday today and yeah no laser on it

54
00:02:44,819 --> 00:02:47,820
proves rainbows and can fly so now we

55
00:02:47,820 --> 00:02:49,769
save it to the database in this case I

56
00:02:49,769 --> 00:02:52,200
use doctrine to proceed it and that's

57
00:02:52,200 --> 00:02:55,110
all and this this is Klaus saved to the

58
00:02:55,110 --> 00:02:57,959
database simple select or mais Seco

59
00:02:57,959 --> 00:03:01,310
so that's the basics of in your m and

60
00:03:01,310 --> 00:03:04,769
now to the problem then you go and your

61
00:03:04,769 --> 00:03:08,040
repositories who is writing records

62
00:03:08,040 --> 00:03:12,000
Taurus with advanced methods of you yeah

63
00:03:12,000 --> 00:03:15,989
not that many so what isn't represent or

64
00:03:15,989 --> 00:03:18,300
the officer official definition is

65
00:03:18,300 --> 00:03:20,430
mediates between the domain and data

66
00:03:20,430 --> 00:03:22,350
mapping layers using a collection like

67
00:03:22,350 --> 00:03:24,660
interface 4x16 domain object ah blah

68
00:03:24,660 --> 00:03:27,900
blah yeah it's the official definition

69
00:03:27,900 --> 00:03:31,440
by Martin Fowler so a repository class

70
00:03:31,440 --> 00:03:33,750
it's a central class for your unicorn

71
00:03:33,750 --> 00:03:36,900
model for any other entity with all the

72
00:03:36,900 --> 00:03:40,799
fine bye methods find by one etcetera so

73
00:03:40,799 --> 00:03:43,079
you don't use query pillars in your

74
00:03:43,079 --> 00:03:44,940
controllers in your services you

75
00:03:44,940 --> 00:03:46,109
shouldn't do that

76
00:03:46,109 --> 00:03:48,090
who is doing that who's great very

77
00:03:48,090 --> 00:03:51,320
builders in the controller

78
00:03:52,920 --> 00:03:57,940
sometimes the doesn't matter and you can

79
00:03:57,940 --> 00:04:00,760
reuse Creek area code so you parts of

80
00:04:00,760 --> 00:04:02,560
the query builder within the repository

81
00:04:02,560 --> 00:04:05,500
class so but the problem of a repository

82
00:04:05,500 --> 00:04:08,920
class it can grow let's take a look you

83
00:04:08,920 --> 00:04:11,560
can have a fine one by D so you can find

84
00:04:11,560 --> 00:04:14,830
clouds by his ID one you could find it

85
00:04:14,830 --> 00:04:18,640
by his name to find clouds by house yeah

86
00:04:18,640 --> 00:04:22,240
his name you can't find a unicorn by

87
00:04:22,240 --> 00:04:26,530
specific color or find unicorns in

88
00:04:26,530 --> 00:04:28,570
iterative so we have education here to

89
00:04:28,570 --> 00:04:32,650
the hurt or I'll find a unicorn which

90
00:04:32,650 --> 00:04:35,170
are which can cook rainbows or not

91
00:04:35,170 --> 00:04:37,530
depends of the parameter of the method

92
00:04:37,530 --> 00:04:40,810
or you can find one by thread and names

93
00:04:40,810 --> 00:04:43,540
so you're searching clouds but if you

94
00:04:43,540 --> 00:04:45,400
want only find clouds in the lower world

95
00:04:45,400 --> 00:04:49,900
and you can find unique inspired and

96
00:04:49,900 --> 00:04:51,820
color so you want to find all green

97
00:04:51,820 --> 00:04:53,800
unicorns but only in this specific herd

98
00:04:53,800 --> 00:04:57,430
not every green unicorn you can find by

99
00:04:57,430 --> 00:05:00,760
color with laser ones and so on and so

100
00:05:00,760 --> 00:05:01,200
on

101
00:05:01,200 --> 00:05:08,410
who has counted the methods nope eight

102
00:05:08,410 --> 00:05:10,600
years and that's not all

103
00:05:10,600 --> 00:05:13,510
every time you need another criteria

104
00:05:13,510 --> 00:05:16,450
another combination and so on you have

105
00:05:16,450 --> 00:05:18,580
to create a new method maybe refactor

106
00:05:18,580 --> 00:05:21,340
code and so on so on maybe fifteen

107
00:05:21,340 --> 00:05:23,710
twenty twenty five methods in a big

108
00:05:23,710 --> 00:05:27,010
domain model that sucks that really

109
00:05:27,010 --> 00:05:27,370
sucks

110
00:05:27,370 --> 00:05:31,360
so how we can do this we use

111
00:05:31,360 --> 00:05:34,240
specifications so what our

112
00:05:34,240 --> 00:05:36,070
specifications again it's called

113
00:05:36,070 --> 00:05:38,190
marquales specification pattern and

114
00:05:38,190 --> 00:05:40,900
again the central idea of specification

115
00:05:40,900 --> 00:05:42,970
or separate the statement from the

116
00:05:42,970 --> 00:05:47,530
candidate object it's yeah still same

117
00:05:47,530 --> 00:05:50,320
definition so separate the statement

118
00:05:50,320 --> 00:05:51,700
from the candidate object that's the

119
00:05:51,700 --> 00:05:54,730
sense of a specification so you separate

120
00:05:54,730 --> 00:05:57,310
your search methods defined by one from

121
00:05:57,310 --> 00:05:58,990
the candidate object from the unicorn

122
00:05:58,990 --> 00:06:02,350
away so specifications are in that sense

123
00:06:02,350 --> 00:06:03,610
they are composable

124
00:06:03,610 --> 00:06:04,070
you

125
00:06:04,070 --> 00:06:05,720
combine them like you have done before

126
00:06:05,720 --> 00:06:08,330
in the repository about specifications

127
00:06:08,330 --> 00:06:11,180
should be reusable so you can reuse them

128
00:06:11,180 --> 00:06:13,820
we will see later and the important

129
00:06:13,820 --> 00:06:16,310
point is specifications should be test

130
00:06:16,310 --> 00:06:19,790
able such big trip restores with 25

131
00:06:19,790 --> 00:06:20,810
methods and so on

132
00:06:20,810 --> 00:06:26,570
and not really test ever so back to Laos

133
00:06:26,570 --> 00:06:29,240
we define a business rule for today and

134
00:06:29,240 --> 00:06:32,600
also unicorns the awesome unicorn can

135
00:06:32,600 --> 00:06:35,060
fly of course like Klaus does it put

136
00:06:35,060 --> 00:06:36,950
rainbows in the first vital that's an

137
00:06:36,950 --> 00:06:38,960
awesome unicorn and that is a business

138
00:06:38,960 --> 00:06:43,210
rule and to define this specification

139
00:06:43,210 --> 00:06:45,260
sorry this business rule in to a

140
00:06:45,260 --> 00:06:47,330
specification we can't create a simple

141
00:06:47,330 --> 00:06:50,030
class called awesome unicorn which

142
00:06:50,030 --> 00:06:51,880
implements a specification interface

143
00:06:51,880 --> 00:06:54,950
specification interface zeroes the only

144
00:06:54,950 --> 00:06:58,400
method it has is is satisfied by in this

145
00:06:58,400 --> 00:07:00,950
case we are using is satisfied by by

146
00:07:00,950 --> 00:07:04,100
Unicron instance and can the test the

147
00:07:04,100 --> 00:07:06,380
unicorn instance on its method can it

148
00:07:06,380 --> 00:07:09,230
fly can you put rainbows and if the

149
00:07:09,230 --> 00:07:12,110
color is white it either returns true or

150
00:07:12,110 --> 00:07:15,350
false that's all about a specification

151
00:07:15,350 --> 00:07:22,370
less any questions to it does it look

152
00:07:22,370 --> 00:07:25,240
simple enough for specification less

153
00:07:25,240 --> 00:07:28,580
that's fine the only part is we get the

154
00:07:28,580 --> 00:07:32,690
unicorn instance which means it is test

155
00:07:32,690 --> 00:07:36,740
able but not reusable because we only

156
00:07:36,740 --> 00:07:39,080
have a unique on instance you want to

157
00:07:39,080 --> 00:07:41,210
test the turtle against and ok awesome

158
00:07:41,210 --> 00:07:43,760
you reckon you won't test Turtles but

159
00:07:43,760 --> 00:07:47,930
you can't test it on our yeah you can't

160
00:07:47,930 --> 00:07:50,330
test it on the turtle and of course it's

161
00:07:50,330 --> 00:07:52,700
not compostable how you can combine it

162
00:07:52,700 --> 00:07:53,180
with and

163
00:07:53,180 --> 00:07:57,230
and door so let's add some compose

164
00:07:57,230 --> 00:08:01,060
methods like ant eggs so we combine our

165
00:08:01,060 --> 00:08:03,950
specifications this with an end

166
00:08:03,950 --> 00:08:06,350
specification test to the supplied

167
00:08:06,350 --> 00:08:10,190
specification or we can use an or X

168
00:08:10,190 --> 00:08:14,150
method and not as how this is how you

169
00:08:14,150 --> 00:08:16,250
can combo specification classes you

170
00:08:16,250 --> 00:08:17,560
create another specification

171
00:08:17,560 --> 00:08:19,419
and specification or specification

172
00:08:19,419 --> 00:08:22,480
negation specification which combines

173
00:08:22,480 --> 00:08:26,440
another specification classes how we can

174
00:08:26,440 --> 00:08:29,169
use it it's simple we create a new

175
00:08:29,169 --> 00:08:31,510
awesome unicorn specification and

176
00:08:31,510 --> 00:08:33,190
combine it with a youngster

177
00:08:33,190 --> 00:08:36,549
specification and of course with an new

178
00:08:36,549 --> 00:08:39,549
laser one specification not it's not

179
00:08:39,549 --> 00:08:41,950
naturally readable because the negation

180
00:08:41,950 --> 00:08:45,250
is afterwards but it's more readable

181
00:08:45,250 --> 00:08:47,700
than SQL statements or repositories and

182
00:08:47,700 --> 00:08:51,900
to test if this you recon instance

183
00:08:51,900 --> 00:08:54,490
satisfies this specification and is an

184
00:08:54,490 --> 00:08:55,660
awesome young unicorn

185
00:08:55,660 --> 00:08:58,540
simply supply you the unicorn delay is

186
00:08:58,540 --> 00:09:01,210
satisfied method that's all in this case

187
00:09:01,210 --> 00:09:06,760
maybe it's an awesome young unicorn yeah

188
00:09:06,760 --> 00:09:10,029
the pros of this it's solid it's a

189
00:09:10,029 --> 00:09:13,660
simple class it's reusable it is

190
00:09:13,660 --> 00:09:15,490
separated from the repositories it's

191
00:09:15,490 --> 00:09:17,830
separated from your models its

192
00:09:17,830 --> 00:09:22,390
uniqueness table or anyone disagree with

193
00:09:22,390 --> 00:09:25,110
that simple class its unit testable and

194
00:09:25,110 --> 00:09:29,770
of course composable maybe you're asking

195
00:09:29,770 --> 00:09:33,190
why we should add an X or X or not

196
00:09:33,190 --> 00:09:35,770
methods we could do this outside wafer

197
00:09:35,770 --> 00:09:40,800
if - yeah it depends how you like it

198
00:09:40,800 --> 00:09:44,170
okay it still has some cons it could be

199
00:09:44,170 --> 00:09:47,080
clearer writing big is in a return

200
00:09:47,080 --> 00:09:51,070
statement is not that nice and of course

201
00:09:51,070 --> 00:09:52,720
as I said it's only used April on a

202
00:09:52,720 --> 00:09:56,050
unicorn instance so specification

203
00:09:56,050 --> 00:09:58,240
pattern is cool by writing it on your

204
00:09:58,240 --> 00:10:02,980
own sax so you fool us rules the real

205
00:10:02,980 --> 00:10:05,770
awesome library simply install it with

206
00:10:05,770 --> 00:10:10,570
composer and the features is it doesn't

207
00:10:10,570 --> 00:10:13,450
use if statements it uses a data act

208
00:10:13,450 --> 00:10:16,959
Gnostic DSL domain-specific language to

209
00:10:16,959 --> 00:10:19,750
express our business rules which means

210
00:10:19,750 --> 00:10:22,709
you write

211
00:10:28,450 --> 00:10:30,510
you

212
00:10:31,339 --> 00:10:33,230
the instance level as we have done

213
00:10:33,230 --> 00:10:36,110
before and now it gets awesome it works

214
00:10:36,110 --> 00:10:38,329
directly at the data source level which

215
00:10:38,329 --> 00:10:40,360
doctrine probe lines on

216
00:10:40,360 --> 00:10:43,970
so first let's instantiate a ruler's

217
00:10:43,970 --> 00:10:47,319
engine we need a file compiler because

218
00:10:47,319 --> 00:10:49,790
somehow has two powers our business rule

219
00:10:49,790 --> 00:10:52,459
this is the compiler it doesn't matter

220
00:10:52,459 --> 00:10:55,100
how what you use you can use only the

221
00:10:55,100 --> 00:10:57,850
whole puzzle at this time or you

222
00:10:57,850 --> 00:11:00,290
preferable define your cache do you need

223
00:11:00,290 --> 00:11:02,689
to clear it of the deployments or if you

224
00:11:02,689 --> 00:11:05,209
have changed the business rules and then

225
00:11:05,209 --> 00:11:07,459
we create a new rulers with the compiler

226
00:11:07,459 --> 00:11:09,439
say we want to support arbitrary

227
00:11:09,439 --> 00:11:12,019
builders and we want to support array

228
00:11:12,019 --> 00:11:15,529
visitor we see you later

229
00:11:15,529 --> 00:11:18,309
what's the difference between these two

230
00:11:18,309 --> 00:11:24,639
okay anyone using symphony girl so

231
00:11:24,639 --> 00:11:28,670
require the rules panel configurator

232
00:11:28,670 --> 00:11:32,269
arrays supported by default but if you

233
00:11:32,269 --> 00:11:35,120
want to use doctrine configure a to use

234
00:11:35,120 --> 00:11:37,610
it that's all and get rulers from the

235
00:11:37,610 --> 00:11:40,279
service container normal stuff to do

236
00:11:40,279 --> 00:11:42,230
cache directory is configured to the

237
00:11:42,230 --> 00:11:44,269
symphony cache okay it's cleared with

238
00:11:44,269 --> 00:11:47,300
the same free cash and so on so let's

239
00:11:47,300 --> 00:11:49,250
get back to our awesome Unicom business

240
00:11:49,250 --> 00:11:53,449
rule yeah if we have to rule it doesn't

241
00:11:53,449 --> 00:11:57,470
look like the guys before doesn't matter

242
00:11:57,470 --> 00:12:00,230
now so we have to rule can fly through

243
00:12:00,230 --> 00:12:03,230
and poops rainbows is true and kala is

244
00:12:03,230 --> 00:12:03,860
prepared

245
00:12:03,860 --> 00:12:09,100
parameter kala looks like SQL does it

246
00:12:10,740 --> 00:12:13,260
not as much difference that's nice

247
00:12:13,260 --> 00:12:16,140
because it's a specific language it's

248
00:12:16,140 --> 00:12:18,390
not really SQL if you use custom

249
00:12:18,390 --> 00:12:21,690
function and so on but if any developer

250
00:12:21,690 --> 00:12:24,690
looks at it each every developer can

251
00:12:24,690 --> 00:12:28,020
understand it and that's really nice so

252
00:12:28,020 --> 00:12:29,310
we are screwloose

253
00:12:29,310 --> 00:12:32,850
if the unicorn instance satisfies this

254
00:12:32,850 --> 00:12:35,640
rule of course we have to supply the

255
00:12:35,640 --> 00:12:38,460
parameter for color its while we could

256
00:12:38,460 --> 00:12:40,650
encode here you could use the color and

257
00:12:40,650 --> 00:12:42,900
write it statically here in the rule it

258
00:12:42,900 --> 00:12:45,830
depends on you how you prefer it and

259
00:12:45,830 --> 00:12:49,320
rulers says is it true it satisfies this

260
00:12:49,320 --> 00:12:52,710
rule or not but you don't want to

261
00:12:52,710 --> 00:12:55,530
clutter your code with rules business

262
00:12:55,530 --> 00:12:58,370
rules all over the your code base so

263
00:12:58,370 --> 00:13:01,680
again we create a specification class in

264
00:13:01,680 --> 00:13:04,110
this case it's an awesome unicron class

265
00:13:04,110 --> 00:13:05,870
which extends an abstract specification

266
00:13:05,870 --> 00:13:09,840
is a class supplied our rulers it could

267
00:13:09,840 --> 00:13:11,730
also implement the specification

268
00:13:11,730 --> 00:13:13,680
interface again but the abstract

269
00:13:13,680 --> 00:13:16,530
specification has some methods for your

270
00:13:16,530 --> 00:13:20,840
helping you like the N X or X and not

271
00:13:20,840 --> 00:13:23,730
and again here we have our business rule

272
00:13:23,730 --> 00:13:28,470
it's the only position in your code base

273
00:13:28,470 --> 00:13:30,810
where this business rule is defined in

274
00:13:30,810 --> 00:13:33,270
any other part of your code you use the

275
00:13:33,270 --> 00:13:40,890
specification class Thanks okay still

276
00:13:40,890 --> 00:13:44,760
stuck with this microphone yeah same

277
00:13:44,760 --> 00:13:47,900
rule same parameters color white and

278
00:13:47,900 --> 00:13:51,270
this say is the data kostik es el to

279
00:13:51,270 --> 00:13:53,400
express our business role for every

280
00:13:53,400 --> 00:13:55,050
business rule for every rule you want to

281
00:13:55,050 --> 00:13:57,210
use you create one specification class

282
00:13:57,210 --> 00:14:00,030
write the rule right parameters of

283
00:14:00,030 --> 00:14:03,540
course this can be internal property is

284
00:14:03,540 --> 00:14:06,140
supplied by the constructor no problem

285
00:14:06,140 --> 00:14:09,210
it's the same usage we create a new

286
00:14:09,210 --> 00:14:11,370
awesome unicorn instance and combine it

287
00:14:11,370 --> 00:14:13,710
with a youngster and with laser harm not

288
00:14:13,710 --> 00:14:17,670
but now we ask rulers is the unicorn

289
00:14:17,670 --> 00:14:18,900
instance

290
00:14:18,900 --> 00:14:21,360
is the specifications satisfied by this

291
00:14:21,360 --> 00:14:24,750
unique on instance so is it on some

292
00:14:24,750 --> 00:14:28,800
young unicorn or not rulers tells us so

293
00:14:28,800 --> 00:14:32,730
it works on the instance level but if

294
00:14:32,730 --> 00:14:34,760
you have big database of unicron's

295
00:14:34,760 --> 00:14:37,590
thousands ten thousands you don't want

296
00:14:37,590 --> 00:14:39,780
to fetch ten thousands of unicorn in the

297
00:14:39,780 --> 00:14:42,390
memory you want to filter on the SQL

298
00:14:42,390 --> 00:14:45,090
level on the database level directly no

299
00:14:45,090 --> 00:14:47,610
problem in this case with doctrine we

300
00:14:47,610 --> 00:14:50,610
great on query builder select unicorn

301
00:14:50,610 --> 00:14:55,050
from a unicorn table and unscrew us to

302
00:14:55,050 --> 00:14:57,390
fill the disk weary builder with our

303
00:14:57,390 --> 00:15:00,480
specification and we get back an array

304
00:15:00,480 --> 00:15:03,860
of unicorns which satisfies our

305
00:15:03,860 --> 00:15:08,280
specifications so in this case rulers is

306
00:15:08,280 --> 00:15:10,770
building and query builder for you out

307
00:15:10,770 --> 00:15:14,190
from your business rules and it works on

308
00:15:14,190 --> 00:15:16,280
the data source level which means

309
00:15:16,280 --> 00:15:17,910
performance performance performance

310
00:15:17,910 --> 00:15:20,040
performance you don't want to fetch

311
00:15:20,040 --> 00:15:23,820
10000 unicorns in the memory estate ok

312
00:15:23,820 --> 00:15:26,790
everything as promised before but

313
00:15:26,790 --> 00:15:30,330
reusability in this case with a name

314
00:15:30,330 --> 00:15:32,720
specification and the rainbow grouping

315
00:15:32,720 --> 00:15:35,820
specification which we combine we are

316
00:15:35,820 --> 00:15:38,310
asking rulers to filter our query

317
00:15:38,310 --> 00:15:41,820
builder against our spec and get to the

318
00:15:41,820 --> 00:15:44,840
first one and we have Klaus because

319
00:15:44,840 --> 00:15:46,950
Klaus and Klaus

320
00:15:46,950 --> 00:15:50,310
oops rainbows of course now we get the

321
00:15:50,310 --> 00:15:52,560
herd of clouds it's a simple doctrine

322
00:15:52,560 --> 00:15:56,990
education and asked rulers to filter

323
00:15:56,990 --> 00:15:59,730
again the rainbow pooping specification

324
00:15:59,730 --> 00:16:02,880
against the herd which is returned by

325
00:16:02,880 --> 00:16:06,510
Klaus so the same specification rainbow

326
00:16:06,510 --> 00:16:08,490
pooping spec here and rainbow pooping

327
00:16:08,490 --> 00:16:11,820
spec here is used against and Unicron

328
00:16:11,820 --> 00:16:14,900
instance and Unicron data source and

329
00:16:14,900 --> 00:16:21,170
heard data in this case heard instances

330
00:16:22,770 --> 00:16:26,380
so it's reusable on every array great

331
00:16:26,380 --> 00:16:28,060
builder instance of a unicorn

332
00:16:28,060 --> 00:16:29,620
it doesn't matter very useful

333
00:16:29,620 --> 00:16:31,570
specification you can use any recruit

334
00:16:31,570 --> 00:16:34,150
great it only wants and use it on multi

335
00:16:34,150 --> 00:16:37,480
resources in this case I will sorry

336
00:16:37,480 --> 00:16:40,180
the help returns still array of unicorns

337
00:16:40,180 --> 00:16:43,570
so yeah reuse it or not we repeal the

338
00:16:43,570 --> 00:16:46,470
reuse it on an array of unicorns

339
00:16:46,470 --> 00:16:50,170
okay the same girls reusability on

340
00:16:50,170 --> 00:16:53,250
different types with named spec clouds

341
00:16:53,250 --> 00:16:57,160
clouds could be a unicorn so we can

342
00:16:57,160 --> 00:16:59,380
array of unicorns named clouds a clouds

343
00:16:59,380 --> 00:17:02,110
could be a turtle so we are filtering

344
00:17:02,110 --> 00:17:05,410
array of turtles against to get all

345
00:17:05,410 --> 00:17:07,660
turtles which are called clouds the same

346
00:17:07,660 --> 00:17:09,790
specification is used on different

347
00:17:09,790 --> 00:17:13,079
instant array instant typed arrays so

348
00:17:13,079 --> 00:17:16,599
it's reusable on any class with the same

349
00:17:16,599 --> 00:17:18,940
properties which are asked in the

350
00:17:18,940 --> 00:17:21,520
business world of course in this case

351
00:17:21,520 --> 00:17:23,829
you have to design your domain your

352
00:17:23,829 --> 00:17:26,770
models clearly you can't have name and

353
00:17:26,770 --> 00:17:28,780
title in two different properties and

354
00:17:28,780 --> 00:17:32,710
expect to reuse your specifications see

355
00:17:32,710 --> 00:17:36,370
this is our name specification we forget

356
00:17:36,370 --> 00:17:38,410
rule with name is of course the name and

357
00:17:38,410 --> 00:17:40,870
return parameter the Pribilof this name

358
00:17:40,870 --> 00:17:43,150
it comes from a constructor everywhere

359
00:17:43,150 --> 00:17:44,230
it doesn't matter

360
00:17:44,230 --> 00:17:47,980
and class unicorn has a name property

361
00:17:47,980 --> 00:17:49,780
and turtle must have the same name

362
00:17:49,780 --> 00:17:52,710
property otherwise it wouldn't work

363
00:17:52,710 --> 00:17:56,080
especially on some fields like birthdate

364
00:17:56,080 --> 00:17:59,560
date of birth this is really important

365
00:17:59,560 --> 00:18:04,900
to design your domain another feature of

366
00:18:04,900 --> 00:18:07,900
rules are custom functions in this case

367
00:18:07,900 --> 00:18:11,010
a greater than H specification H tag

368
00:18:11,010 --> 00:18:16,080
where the rule is birth date is

369
00:18:16,090 --> 00:18:19,760
yep Biff that is over H and H is

370
00:18:19,760 --> 00:18:23,929
parameter supplied so I want to do it

371
00:18:23,929 --> 00:18:26,809
simple I want on don't I don't want to

372
00:18:26,809 --> 00:18:29,690
do date/time math in my daily codebase

373
00:18:29,690 --> 00:18:32,299
so the date time F is done by the custom

374
00:18:32,299 --> 00:18:36,590
function H and it's a custom function so

375
00:18:36,590 --> 00:18:38,870
we must define it for every execute

376
00:18:38,870 --> 00:18:41,000
array visitor the brain builder and so

377
00:18:41,000 --> 00:18:43,909
on let's take a look how we do it this

378
00:18:43,909 --> 00:18:47,240
is an array H operator it's simple a

379
00:18:47,240 --> 00:18:49,940
callback less would invoke where we get

380
00:18:49,940 --> 00:18:52,760
the H returns at a time and simply

381
00:18:52,760 --> 00:18:55,820
returns the take time from the a minus H

382
00:18:55,820 --> 00:18:59,179
years so if you sorry sorry we get the

383
00:18:59,179 --> 00:19:01,399
date time the exact date time 30 years

384
00:19:01,399 --> 00:19:06,620
ago in this H operator simply on the

385
00:19:06,620 --> 00:19:08,870
Arabia defined on a rare visitor age is

386
00:19:08,870 --> 00:19:11,480
a new array H operator so we have this

387
00:19:11,480 --> 00:19:13,909
business rule before with the age we can

388
00:19:13,909 --> 00:19:15,950
now use this rule with a race of

389
00:19:15,950 --> 00:19:21,559
unicron's of turtles etc of course but

390
00:19:21,559 --> 00:19:23,330
we don't have only a race to fist we

391
00:19:23,330 --> 00:19:25,039
also have a doctrine very builder to

392
00:19:25,039 --> 00:19:27,049
filter so we have to create an array H

393
00:19:27,049 --> 00:19:30,470
operator for doctrine it's simple

394
00:19:30,470 --> 00:19:34,669
doctrine H operator and in this case we

395
00:19:34,669 --> 00:19:37,639
have to do some doctrine math if you

396
00:19:37,639 --> 00:19:40,250
don't know dql for doctrine it doesn't

397
00:19:40,250 --> 00:19:42,889
matter in this case I use the current

398
00:19:42,889 --> 00:19:47,620
age and substract the age times 12 as

399
00:19:47,620 --> 00:19:50,779
months from the current date doctor it

400
00:19:50,779 --> 00:19:53,029
doesn't super add substract in years so

401
00:19:53,029 --> 00:19:55,970
I have to calculate with mums and this

402
00:19:55,970 --> 00:20:00,139
is directly a t-coil statement return

403
00:20:00,139 --> 00:20:02,600
for doctrine query builder in this case

404
00:20:02,600 --> 00:20:07,279
because it's tql we have to do an inline

405
00:20:07,279 --> 00:20:10,340
operator H nu and so on and submit to

406
00:20:10,340 --> 00:20:12,470
the Google App Engine it's only

407
00:20:12,470 --> 00:20:14,240
important for you if you want to great

408
00:20:14,240 --> 00:20:19,100
custom functions but it's nice to get

409
00:20:19,100 --> 00:20:20,510
help with custom function the business

410
00:20:20,510 --> 00:20:22,850
rule don't do date/time mass every time

411
00:20:22,850 --> 00:20:25,399
maybe you want to use string length in

412
00:20:25,399 --> 00:20:26,880
your business RAL

413
00:20:26,880 --> 00:20:28,980
there are many possibilities why you

414
00:20:28,980 --> 00:20:33,620
want the custom operator yeah join

415
00:20:33,620 --> 00:20:36,509
trance on eyes so in this case with a

416
00:20:36,509 --> 00:20:39,570
hurt specification which is basically

417
00:20:39,570 --> 00:20:43,230
asking that her property on the unicron

418
00:20:43,230 --> 00:20:45,960
for unicorn the unicorn has in her

419
00:20:45,960 --> 00:20:48,690
education and as the name of the

420
00:20:48,690 --> 00:20:51,690
educated herd is the same name I'm

421
00:20:51,690 --> 00:20:55,559
searching for and this is how I use it

422
00:20:55,559 --> 00:20:59,009
you simply create a unicorn

423
00:20:59,009 --> 00:21:01,940
query builder as before rulers

424
00:21:01,940 --> 00:21:04,500
automatically detects you are asking for

425
00:21:04,500 --> 00:21:08,340
join if your mapping is ok and filters

426
00:21:08,340 --> 00:21:12,029
all hurts in this case which it's named

427
00:21:12,029 --> 00:21:14,429
Adams maybe you have a unique on health

428
00:21:14,429 --> 00:21:14,789
names

429
00:21:14,789 --> 00:21:19,379
Adams family yeah of course this is

430
00:21:19,379 --> 00:21:21,779
works only for doctoring or em not for

431
00:21:21,779 --> 00:21:25,679
proper or laravel eloquent maybe you can

432
00:21:25,679 --> 00:21:28,049
create a pull request for it but it's

433
00:21:28,049 --> 00:21:30,990
nice and this case it's auto-detected

434
00:21:30,990 --> 00:21:33,450
but you can also sub play inner join

435
00:21:33,450 --> 00:21:35,129
left and right join if you want and

436
00:21:35,129 --> 00:21:41,370
rulers use your to define trying to any

437
00:21:41,370 --> 00:21:52,470
questions to rule us so far yet the

438
00:21:52,470 --> 00:21:54,330
question is why I didn't use getters and

439
00:21:54,330 --> 00:21:58,279
setters because it's an example

440
00:22:01,129 --> 00:22:03,059
basically under the hood it uses

441
00:22:03,059 --> 00:22:05,490
Symphony prepare the accessor it works

442
00:22:05,490 --> 00:22:08,009
with public properties and it works with

443
00:22:08,009 --> 00:22:09,840
get the setters if they are present

444
00:22:09,840 --> 00:22:12,389
that's not a problem it was only for

445
00:22:12,389 --> 00:22:16,830
example to keep the cow shot yeah not a

446
00:22:16,830 --> 00:22:19,220
question

447
00:22:23,420 --> 00:22:29,780
so bad yeah one group is not supported I

448
00:22:29,780 --> 00:22:32,700
graded some special function to group

449
00:22:32,700 --> 00:22:35,700
that but it was really up it was really

450
00:22:35,700 --> 00:22:39,840
ugly to do that so let's take a look

451
00:22:39,840 --> 00:22:42,210
under the hood this is the basic

452
00:22:42,210 --> 00:22:46,140
architecture of rulers which means the

453
00:22:46,140 --> 00:22:49,380
rule gets passed by a parser and combat

454
00:22:49,380 --> 00:22:51,540
into intermediate representation or

455
00:22:51,540 --> 00:22:55,050
called as abstract syntax tree by an

456
00:22:55,050 --> 00:22:58,520
awesome library who are compiler and

457
00:22:58,520 --> 00:23:01,680
this intermediate representation is

458
00:23:01,680 --> 00:23:05,850
compiled to PHP code SQL queries elastic

459
00:23:05,850 --> 00:23:09,560
search queries which means on runtime

460
00:23:09,560 --> 00:23:12,930
nothing is parsed again if your rule is

461
00:23:12,930 --> 00:23:15,930
passed once it's compiled effectively to

462
00:23:15,930 --> 00:23:19,110
PHP code in for example this is our

463
00:23:19,110 --> 00:23:20,970
awesome Unicron rule can flies through a

464
00:23:20,970 --> 00:23:23,570
roof frame plus and so on it's compiled

465
00:23:23,570 --> 00:23:27,090
to PHP code and this is reused every

466
00:23:27,090 --> 00:23:28,410
time you use the awesome unique on

467
00:23:28,410 --> 00:23:31,980
specification so don't worry if you

468
00:23:31,980 --> 00:23:34,380
write big strings as business rule it's

469
00:23:34,380 --> 00:23:36,060
really performant because it gets

470
00:23:36,060 --> 00:23:38,730
compiled and here you can see we use

471
00:23:38,730 --> 00:23:42,510
array access for you and in the backend

472
00:23:42,510 --> 00:23:45,260
this is simply prepared the accessor on

473
00:23:45,260 --> 00:23:47,670
so it doesn't matter if you use get the

474
00:23:47,670 --> 00:23:49,980
setters or public methods because if you

475
00:23:49,980 --> 00:23:52,710
have a simply domain transfer object you

476
00:23:52,710 --> 00:23:55,830
don't need getters and setters and this

477
00:23:55,830 --> 00:23:59,010
is the case doctrine target of our work

478
00:23:59,010 --> 00:24:01,890
spec so rulers detected it joins to the

479
00:24:01,890 --> 00:24:04,890
here at education and usages with get

480
00:24:04,890 --> 00:24:06,780
join alias target hurt hurt

481
00:24:06,780 --> 00:24:14,510
dot name and so on and so on yeah

482
00:24:14,510 --> 00:24:18,380
so a variable targets we have seen some

483
00:24:18,380 --> 00:24:20,000
of them already

484
00:24:20,000 --> 00:24:21,860
it's you can filter on an array of

485
00:24:21,860 --> 00:24:24,380
arrays which mean you don't have to

486
00:24:24,380 --> 00:24:28,100
grade objects or Manos Unicom could also

487
00:24:28,100 --> 00:24:31,640
be a two-dimensional array with array

488
00:24:31,640 --> 00:24:34,400
keys as that prepare this yeah array of

489
00:24:34,400 --> 00:24:37,100
objects we have already had an array of

490
00:24:37,100 --> 00:24:38,990
unicron instant sort of turtling senses

491
00:24:38,990 --> 00:24:41,900
doctrine or engrave pillars online to

492
00:24:41,900 --> 00:24:45,049
get awesome for who's who you are using

493
00:24:45,049 --> 00:24:47,030
doctrine I can still feel it

494
00:24:47,030 --> 00:24:50,660
use pump and filter pump models for the

495
00:24:50,660 --> 00:24:53,450
laravel guys you can filter immigrant

496
00:24:53,450 --> 00:24:56,750
with immigrant so for every one of you

497
00:24:56,750 --> 00:25:00,530
it should work and about reusability

498
00:25:00,530 --> 00:25:02,780
it's really nice you can feel the last

499
00:25:02,780 --> 00:25:06,140
exert and solar servers so you have one

500
00:25:06,140 --> 00:25:09,020
specification where you can first look

501
00:25:09,020 --> 00:25:11,540
into elastic search like a product

502
00:25:11,540 --> 00:25:13,640
specification where such as searching

503
00:25:13,640 --> 00:25:16,160
for specific product such inelastic

504
00:25:16,160 --> 00:25:17,540
search before because it's more

505
00:25:17,540 --> 00:25:19,520
performant and to search in my as well

506
00:25:19,520 --> 00:25:22,580
if you don't find anything then search

507
00:25:22,580 --> 00:25:25,730
in the database with the same rule it

508
00:25:25,730 --> 00:25:27,679
doesn't matter the data source you use

509
00:25:27,679 --> 00:25:29,840
you always use the same specification

510
00:25:29,840 --> 00:25:33,140
class to filter your stuff yeah and of

511
00:25:33,140 --> 00:25:34,880
course you can build your own executor

512
00:25:34,880 --> 00:25:38,710
like in our company we use yeah

513
00:25:38,710 --> 00:25:40,790
sometimes everyone wants to write his

514
00:25:40,790 --> 00:25:43,490
own over em we have one in our company

515
00:25:43,490 --> 00:25:46,340
so ahead great and execute the to fill

516
00:25:46,340 --> 00:25:49,510
our own over N and it's ok

517
00:25:49,510 --> 00:25:53,150
I mean our Oren's actually creating on

518
00:25:53,150 --> 00:25:55,549
visitor for your custom stuff is nice

519
00:25:55,549 --> 00:25:59,870
maybe if you haven't breath API you can

520
00:25:59,870 --> 00:26:02,780
great unfit execute the filter graph API

521
00:26:02,780 --> 00:26:07,790
that would be cool if anyone does so I'm

522
00:26:07,790 --> 00:26:11,270
going fast oh man yeah a few use cases

523
00:26:11,270 --> 00:26:13,760
we can look at the reverse row before we

524
00:26:13,760 --> 00:26:15,980
had to find one by D by name and so on

525
00:26:15,980 --> 00:26:18,110
which are one two three four five six

526
00:26:18,110 --> 00:26:20,720
seven eight nine ten methods by now and

527
00:26:20,720 --> 00:26:24,620
many more we don't want to use this

528
00:26:24,620 --> 00:26:27,140
every cuz we have tamed the

529
00:26:27,140 --> 00:26:30,320
rulers which means we have one matching

530
00:26:30,320 --> 00:26:34,520
method on the repository matching

531
00:26:34,520 --> 00:26:36,590
against a specification any

532
00:26:36,590 --> 00:26:38,540
specification you have it doesn't matter

533
00:26:38,540 --> 00:26:40,670
of course the specification you use here

534
00:26:40,670 --> 00:26:43,040
must match against the model with the

535
00:26:43,040 --> 00:26:45,110
rule otherwise you get an exception and

536
00:26:45,110 --> 00:26:48,170
we great a query builder unicorn local

537
00:26:48,170 --> 00:26:50,570
and of course in this case it looks like

538
00:26:50,570 --> 00:26:52,490
a unique on repository has to be a

539
00:26:52,490 --> 00:26:55,130
service no problem because we have a dis

540
00:26:55,130 --> 00:26:58,190
rules instance and asking rulers to

541
00:26:58,190 --> 00:27:00,920
filter our internet very build up a

542
00:27:00,920 --> 00:27:02,720
gainst the supplied specification that's

543
00:27:02,720 --> 00:27:03,260
all

544
00:27:03,260 --> 00:27:06,710
not more every Europe is Rory can look

545
00:27:06,710 --> 00:27:11,840
like this ok but we still have a little

546
00:27:11,840 --> 00:27:14,150
problem yet any current one can think

547
00:27:14,150 --> 00:27:17,110
about the problem yet

548
00:27:22,840 --> 00:27:27,820
no this top of doctrine

549
00:27:32,889 --> 00:27:35,330
of course but it's part of the main

550
00:27:35,330 --> 00:27:37,339
modeling this case what if you have 1

551
00:27:37,339 --> 00:27:40,119
million unicorns in the database and

552
00:27:40,119 --> 00:27:43,339
have a really simple specification maybe

553
00:27:43,339 --> 00:27:45,739
you want to get all rainbow pooping once

554
00:27:45,739 --> 00:27:49,039
and if you have 1 million unicorns maybe

555
00:27:49,039 --> 00:27:52,940
half of them can poop rainbows and you

556
00:27:52,940 --> 00:27:56,139
get a result a half a million unicorns

557
00:27:56,139 --> 00:27:59,839
that's performance yeah that's a problem

558
00:27:59,839 --> 00:28:04,219
in this case man sir - before this is

559
00:28:04,219 --> 00:28:07,009
simplest fact it's really simple three

560
00:28:07,009 --> 00:28:09,469
lines and that's all spec to 1 on 1

561
00:28:09,469 --> 00:28:12,019
million unicron's this case I want to

562
00:28:12,019 --> 00:28:16,309
use pay a nation so I create the gorilla

563
00:28:16,309 --> 00:28:18,739
and ask ruler to apply my filter

564
00:28:18,739 --> 00:28:21,709
specification on it and get back again a

565
00:28:21,709 --> 00:28:24,249
query builder and not the result already

566
00:28:24,249 --> 00:28:26,539
now I can do with the query builder

567
00:28:26,539 --> 00:28:29,149
anything I want in this case I set the

568
00:28:29,149 --> 00:28:31,999
first result set max result to do

569
00:28:31,999 --> 00:28:34,820
pagination say I'm a guinea pig in it on

570
00:28:34,820 --> 00:28:37,940
it now performance problem is there's no

571
00:28:37,940 --> 00:28:39,200
performance problem anymore

572
00:28:39,200 --> 00:28:43,369
if you use mega nation because on every

573
00:28:43,369 --> 00:28:45,289
side you use pagination you want maybe

574
00:28:45,289 --> 00:28:47,749
if you have a list view you want to show

575
00:28:47,749 --> 00:28:49,820
only 200 unicorns and then next set

576
00:28:49,820 --> 00:28:51,379
hundred unicorns and not half a million

577
00:28:51,379 --> 00:28:53,659
ones so you need a big inator and it's

578
00:28:53,659 --> 00:28:54,379
not a problem

579
00:28:54,379 --> 00:28:56,869
because instead of filter spec use apply

580
00:28:56,869 --> 00:28:58,519
filters back and get back your query

581
00:28:58,519 --> 00:28:58,940
builder

582
00:28:58,940 --> 00:29:02,739
this works for laravel and palm to

583
00:29:02,739 --> 00:29:07,159
another example where i get into touch

584
00:29:07,159 --> 00:29:11,629
with rulers was this search form for a

585
00:29:11,629 --> 00:29:13,940
retailer search we're searching for the

586
00:29:13,940 --> 00:29:16,700
country at a country region or in silk

587
00:29:16,700 --> 00:29:18,950
cotton and we have a search for a

588
00:29:18,950 --> 00:29:21,979
keyword and some special assortments of

589
00:29:21,979 --> 00:29:26,659
the products and in this case I used

590
00:29:26,659 --> 00:29:29,570
rulers to make each of the form field to

591
00:29:29,570 --> 00:29:33,619
one specification object because country

592
00:29:33,619 --> 00:29:36,859
country maybe is a simple rule temperate

593
00:29:36,859 --> 00:29:38,869
zone is a complex rule with joints and

594
00:29:38,869 --> 00:29:41,799
so on so I could combine a country

595
00:29:41,799 --> 00:29:43,999
specification and country song

596
00:29:43,999 --> 00:29:45,950
specification or keywords

597
00:29:45,950 --> 00:29:49,220
vacation Nicole 'true the controller

598
00:29:49,220 --> 00:29:51,139
called the filter service looks really

599
00:29:51,139 --> 00:29:53,870
small because the big business world of

600
00:29:53,870 --> 00:29:56,960
these of each field is encapsulated in a

601
00:29:56,960 --> 00:29:59,990
specification class and what's nice

602
00:29:59,990 --> 00:30:03,860
again specification is a class so why a

603
00:30:03,860 --> 00:30:07,059
specification shouldn't be entitled to

604
00:30:07,059 --> 00:30:10,760
so for an assortment I have a assortment

605
00:30:10,760 --> 00:30:13,010
and type tip assortment milk model which

606
00:30:13,010 --> 00:30:15,409
is our own RM doesn't know and

607
00:30:15,409 --> 00:30:17,539
implements the specification which means

608
00:30:17,539 --> 00:30:20,659
it is safe into the database in our CMS

609
00:30:20,659 --> 00:30:22,940
the editor can define the business rules

610
00:30:22,940 --> 00:30:25,070
this is safe in these rules

611
00:30:25,070 --> 00:30:27,980
it's the textile business rule safe in

612
00:30:27,980 --> 00:30:31,159
the database by the CMS editors and name

613
00:30:31,159 --> 00:30:34,370
doesn't matter it's for the backend so

614
00:30:34,370 --> 00:30:37,039
yeah name rules it comes from the bacon

615
00:30:37,039 --> 00:30:39,110
it comes from the database yours

616
00:30:39,110 --> 00:30:42,250
business rules from the database why not

617
00:30:42,250 --> 00:30:46,880
so the local part is the local ID is in

618
00:30:46,880 --> 00:30:50,179
set of assortments this is Incept is a

619
00:30:50,179 --> 00:30:53,179
custom function and of course if the

620
00:30:53,179 --> 00:30:56,120
rules aren't empty from the editor we

621
00:30:56,120 --> 00:31:00,169
combined it with or and return it so we

622
00:31:00,169 --> 00:31:02,269
have a specification from the database

623
00:31:02,269 --> 00:31:05,950
from the editors that's nice

624
00:31:05,950 --> 00:31:09,500
and this is used for the assortments so

625
00:31:09,500 --> 00:31:13,070
our CMS editors can grade add and move

626
00:31:13,070 --> 00:31:15,710
assortment to filter the retailer's on

627
00:31:15,710 --> 00:31:19,549
this map search another nice use case is

628
00:31:19,549 --> 00:31:24,130
water bag where's her depart wallah back

629
00:31:24,130 --> 00:31:28,820
nice and water bag is like yeah is used

630
00:31:28,820 --> 00:31:32,840
to save articles on the internet and you

631
00:31:32,840 --> 00:31:34,820
can't read it here really it has some

632
00:31:34,820 --> 00:31:40,690
tags and these tags are taking rules

633
00:31:40,690 --> 00:31:44,210
from rulers so reading time is lower

634
00:31:44,210 --> 00:31:47,559
equals 5 this is a rule of business rule

635
00:31:47,559 --> 00:31:50,960
so your game you define business rules

636
00:31:50,960 --> 00:31:53,289
in the database and use it 10

637
00:31:53,289 --> 00:31:56,289
specifications

638
00:31:56,500 --> 00:32:03,980
yep nobody could create one nailed up

639
00:32:03,980 --> 00:32:06,470
visitor would be nice but would it be

640
00:32:06,470 --> 00:32:16,280
your use case that's a nice idea maybe

641
00:32:16,280 --> 00:32:18,230
you can grate on visitor and supplier to

642
00:32:18,230 --> 00:32:23,180
rule us okay I was going fast too fast

643
00:32:23,180 --> 00:32:26,000
seems but now we have an plenty of time

644
00:32:26,000 --> 00:32:28,240
for questions

645
00:32:46,090 --> 00:32:55,280
what sadly we can't unit test these

646
00:32:55,280 --> 00:32:57,170
rules we do integration tests because

647
00:32:57,170 --> 00:32:59,930
you can unit as the rule against a race

648
00:32:59,930 --> 00:33:02,570
but not against the data source there

649
00:33:02,570 --> 00:33:06,410
you have to do integration tests so we

650
00:33:06,410 --> 00:33:09,140
are one level higher the integration

651
00:33:09,140 --> 00:33:13,210
behavior testing level

652
00:33:21,910 --> 00:33:24,320
if we want to introduce caching in the

653
00:33:24,320 --> 00:33:25,940
middle what do you mean with caching in

654
00:33:25,940 --> 00:33:40,880
the middle caching with does belong um

655
00:33:40,880 --> 00:33:42,230
if I understand the question correctly

656
00:33:42,230 --> 00:33:45,170
you can still use for example doctrine

657
00:33:45,170 --> 00:33:46,970
query cache result cache doesn't no

658
00:33:46,970 --> 00:33:49,220
problem because apply field to spec you

659
00:33:49,220 --> 00:33:51,500
get bit the query builder and can set

660
00:33:51,500 --> 00:33:55,460
use result cache and so on and the other

661
00:33:55,460 --> 00:33:57,770
caching layer would be in the controller

662
00:33:57,770 --> 00:34:02,260
the page cache of the controller and

663
00:34:02,260 --> 00:34:05,330
what is already cache is the business

664
00:34:05,330 --> 00:34:07,880
rule which gets compiled down to PHP

665
00:34:07,880 --> 00:34:09,679
code decoy queries elastic search

666
00:34:09,679 --> 00:34:13,668
queries this is already cached but this

667
00:34:13,668 --> 00:34:15,080
is not a case result that the cache

668
00:34:15,080 --> 00:34:17,739
business world

669
00:34:24,940 --> 00:34:34,418
a way to other results with the result

670
00:34:34,418 --> 00:34:36,460
you can do anything you want because the

671
00:34:36,460 --> 00:34:39,030
result is mostly array of your instances

672
00:34:39,030 --> 00:34:48,579
thank you ordering sorry sorry autopilot

673
00:34:48,579 --> 00:34:52,899
yep I wanted to use quick query builder

674
00:34:52,899 --> 00:34:55,929
at the autobuyer method and then filter

675
00:34:55,929 --> 00:34:58,990
or my filters back and then use the

676
00:34:58,990 --> 00:35:00,819
great builder to add order by group

677
00:35:00,819 --> 00:35:03,579
buyer and so on all the ring grouping is

678
00:35:03,579 --> 00:35:05,440
not defined in the business world that's

679
00:35:05,440 --> 00:35:09,280
a matter of your repository again so you

680
00:35:09,280 --> 00:35:11,829
are filtering the query builder or apply

681
00:35:11,829 --> 00:35:13,240
a filter on the great builder for

682
00:35:13,240 --> 00:35:15,460
filtering with this business rule but

683
00:35:15,460 --> 00:35:18,609
ordering group being having or whatever

684
00:35:18,609 --> 00:35:21,430
limiting pagination is a case of your

685
00:35:21,430 --> 00:35:23,879
query builder

686
00:35:36,610 --> 00:35:38,840
they get compiled on the first execution

687
00:35:38,840 --> 00:35:42,080
there's no warm-up script to fetch all

688
00:35:42,080 --> 00:35:43,520
your specification the code base and

689
00:35:43,520 --> 00:35:48,290
compile it beforehand so for also Munich

690
00:35:48,290 --> 00:35:50,570
on specification the compiled PHP code

691
00:35:50,570 --> 00:35:52,880
is created on the first time you filter

692
00:35:52,880 --> 00:35:54,770
on this specification but then it's

693
00:35:54,770 --> 00:35:59,480
reused every time yep after first

694
00:35:59,480 --> 00:36:01,940
execution it each compiled specification

695
00:36:01,940 --> 00:36:04,040
is reused that's the part of the

696
00:36:04,040 --> 00:36:14,660
performance not some questions so please

697
00:36:14,660 --> 00:36:16,820
you find the slides on fossum specs and

698
00:36:16,820 --> 00:36:19,340
please give feedback on joining and

699
00:36:19,340 --> 00:36:22,130
maybe for the first time conference on

700
00:36:22,130 --> 00:36:34,070
first time - feedback so thank you this

701
00:36:34,070 --> 00:36:36,950
was fast you can all get on your twitter

702
00:36:36,950 --> 00:36:40,460
and follow me and yeah take a look at

703
00:36:40,460 --> 00:36:41,720
our company side and so on

704
00:36:41,720 --> 00:36:44,259
Thanks

