1
00:00:04,590 --> 00:00:10,590
so no yes or no sorry Jorge it's a

2
00:00:10,590 --> 00:00:12,360
letter now assisting

3
00:00:12,360 --> 00:00:14,820
he likes monitoring things including the

4
00:00:14,820 --> 00:00:17,490
cloud including stacks of raspberry pies

5
00:00:17,490 --> 00:00:19,619
with sensors everything on and he is

6
00:00:19,619 --> 00:00:20,400
going to tell us how to troubleshoot

7
00:00:20,400 --> 00:00:23,609
kubernetes okay welcome okay thank you

8
00:00:23,609 --> 00:00:26,060
okay

9
00:00:29,070 --> 00:00:31,409
so today it's been high intensive day

10
00:00:31,409 --> 00:00:35,340
for me this is my third talk it

11
00:00:35,340 --> 00:00:39,000
has anyone seen one of the previous ones

12
00:00:39,000 --> 00:00:45,120
can you raise hands oh cool so he knows

13
00:00:45,120 --> 00:00:50,580
a snake I've shown this slide before if

14
00:00:50,580 --> 00:00:52,560
you're here is probably because you're

15
00:00:52,560 --> 00:00:54,720
running vanities or you're applying to

16
00:00:54,720 --> 00:00:59,730
do so and until we got things like

17
00:00:59,730 --> 00:01:01,950
containers burn it is when we have to

18
00:01:01,950 --> 00:01:03,870
troubleshoot and find out what was wrong

19
00:01:03,870 --> 00:01:07,259
was break a broken on our servers we use

20
00:01:07,259 --> 00:01:10,729
the years tools like that but then when

21
00:01:10,729 --> 00:01:15,659
containers came around things stopped

22
00:01:15,659 --> 00:01:17,460
working basically those tools they were

23
00:01:17,460 --> 00:01:21,270
not aware of namespaces of T groups we

24
00:01:21,270 --> 00:01:25,590
have to treat them the were not working

25
00:01:25,590 --> 00:01:29,210
as good as they were working before and

26
00:01:29,210 --> 00:01:32,369
actually this is a real problem or I

27
00:01:32,369 --> 00:01:35,579
have included here in issue on cornetist

28
00:01:35,579 --> 00:01:38,639
github project and someone trying to

29
00:01:38,639 --> 00:01:42,990
troubleshoot and the answer of the

30
00:01:42,990 --> 00:01:45,600
developer says well you know like try to

31
00:01:45,600 --> 00:01:48,959
run Bosch loop over there do some prints

32
00:01:48,959 --> 00:01:52,789
see if somehow you can get visibility of

33
00:01:52,789 --> 00:01:57,200
what's going on inside of the containers

34
00:01:57,200 --> 00:02:00,439
we have containers for multiple reasons

35
00:02:00,439 --> 00:02:04,859
probably for ones to dimension is that

36
00:02:04,859 --> 00:02:07,619
they are simple they are small most of

37
00:02:07,619 --> 00:02:10,709
the time still always they are isolated

38
00:02:10,709 --> 00:02:12,989
from security point of view that's

39
00:02:12,989 --> 00:02:15,629
that's nice they have less dependencies

40
00:02:15,629 --> 00:02:17,050
we ship everything with

41
00:02:17,050 --> 00:02:19,330
have to deal with messing things around

42
00:02:19,330 --> 00:02:23,620
put the block boxes we cannot see what's

43
00:02:23,620 --> 00:02:26,950
happening inside as we used to do before

44
00:02:26,950 --> 00:02:30,240
or we have to break these things and

45
00:02:30,240 --> 00:02:32,770
install the troubleshooting tools inside

46
00:02:32,770 --> 00:02:35,830
which is not the desire or the best

47
00:02:35,830 --> 00:02:41,680
option that's why we are trying to fix

48
00:02:41,680 --> 00:02:43,990
with Cizek Cystic it's like a

49
00:02:43,990 --> 00:02:46,930
combination of all those tools you were

50
00:02:46,930 --> 00:02:49,410
using before to troubleshoot your

51
00:02:49,410 --> 00:02:52,000
servers each top BM style has thought

52
00:02:52,000 --> 00:02:55,270
all of them all together in one single

53
00:02:55,270 --> 00:02:57,850
tool available opens first we also have

54
00:02:57,850 --> 00:02:59,650
a commercial product but that's not for

55
00:02:59,650 --> 00:03:05,860
today and what we do differently is she

56
00:03:05,860 --> 00:03:08,410
thinks it's cheerful on one side we are

57
00:03:08,410 --> 00:03:11,040
able to keep complete visibility of

58
00:03:11,040 --> 00:03:13,540
everything that's happening inside of

59
00:03:13,540 --> 00:03:17,700
the containers we have managed to did

60
00:03:17,700 --> 00:03:22,120
instrument in or the kernel we install a

61
00:03:22,120 --> 00:03:25,060
kernel module that basically it does

62
00:03:25,060 --> 00:03:27,700
capture all the system calls we copy

63
00:03:27,700 --> 00:03:30,610
them into ring buffer and then we let

64
00:03:30,610 --> 00:03:35,650
user space process to pick the data from

65
00:03:35,650 --> 00:03:38,260
the buffer and suddenly we have more

66
00:03:38,260 --> 00:03:40,870
everything to a user space where we are

67
00:03:40,870 --> 00:03:43,989
more comfortable monkeying things around

68
00:03:43,989 --> 00:03:47,670
grouping and segmenting and everything

69
00:03:47,670 --> 00:03:50,320
so yeah it's all the kernel module the

70
00:03:50,320 --> 00:03:53,709
agent or the kernel module captures

71
00:03:53,709 --> 00:03:55,930
everything we move down into the user

72
00:03:55,930 --> 00:03:58,750
space can either be a diamond or we can

73
00:03:58,750 --> 00:04:01,180
even run inside of a privilege container

74
00:04:01,180 --> 00:04:03,250
because we need to do it in small to

75
00:04:03,250 --> 00:04:05,350
install that kernel module but kernel

76
00:04:05,350 --> 00:04:09,370
module builds dynamically using the KMS

77
00:04:09,370 --> 00:04:11,860
if we don't have Winery

78
00:04:11,860 --> 00:04:14,200
so they get included in the distribution

79
00:04:14,200 --> 00:04:17,380
that you are probably using if your is

80
00:04:17,380 --> 00:04:19,690
not cool we can still open the capture

81
00:04:19,690 --> 00:04:21,220
files but we can't capture

82
00:04:21,220 --> 00:04:24,730
nabu yeah and we dump everything into a

83
00:04:24,730 --> 00:04:29,180
file and this approach basically

84
00:04:29,180 --> 00:04:32,240
some benefits have some advantages we

85
00:04:32,240 --> 00:04:35,450
discover since that process the the

86
00:04:35,450 --> 00:04:38,120
Cystic can see everything happening your

87
00:04:38,120 --> 00:04:41,300
host we can automatically discover every

88
00:04:41,300 --> 00:04:43,400
container you run so there is no need to

89
00:04:43,400 --> 00:04:45,590
instrument to configure the Oh have a

90
00:04:45,590 --> 00:04:49,010
scale up replica or something and then

91
00:04:49,010 --> 00:04:51,590
there is new container or there are less

92
00:04:51,590 --> 00:04:53,030
containers and I need to reconfigure

93
00:04:53,030 --> 00:04:55,310
things around now forget about that no

94
00:04:55,310 --> 00:04:57,500
instrumentation so there is no need to

95
00:04:57,500 --> 00:05:00,500
install an agent in every container or

96
00:05:00,500 --> 00:05:02,720
funky things like that and full

97
00:05:02,720 --> 00:05:06,650
visibility the corn or the thing that

98
00:05:06,650 --> 00:05:09,080
you have to pay the trade-off is that

99
00:05:09,080 --> 00:05:13,010
you need to store the kernel module if

100
00:05:13,010 --> 00:05:16,250
you haven't been into my previous talks

101
00:05:16,250 --> 00:05:18,860
or have mentioned this the reason I'm

102
00:05:18,860 --> 00:05:20,210
going to answer this because probably

103
00:05:20,210 --> 00:05:22,820
otherwise will be a question that you

104
00:05:22,820 --> 00:05:25,250
will be making me at the end is when we

105
00:05:25,250 --> 00:05:29,810
started says they EBP F didn't exist or

106
00:05:29,810 --> 00:05:34,220
didn't exist as it is today so we have

107
00:05:34,220 --> 00:05:37,340
no chance to use that has been involved

108
00:05:37,340 --> 00:05:40,820
in and for a period of time it has some

109
00:05:40,820 --> 00:05:42,890
limitations so for example we have to

110
00:05:42,890 --> 00:05:46,730
copy everything on the buffers and EVP F

111
00:05:46,730 --> 00:05:48,260
has some limitation on the amount of

112
00:05:48,260 --> 00:05:50,240
data you could copy out from system

113
00:05:50,240 --> 00:05:52,310
calls there there are some limitations

114
00:05:52,310 --> 00:05:55,370
those they have been solve so maybe in

115
00:05:55,370 --> 00:05:58,730
the future we change then the other

116
00:05:58,730 --> 00:06:02,060
problem with kubernetes were we

117
00:06:02,060 --> 00:06:04,310
containers and microservices is that we

118
00:06:04,310 --> 00:06:06,950
don't have like single house and one two

119
00:06:06,950 --> 00:06:08,330
three and number of services running

120
00:06:08,330 --> 00:06:11,750
inside now like we have a scheduler and

121
00:06:11,750 --> 00:06:14,710
it's moving things around all the time

122
00:06:14,710 --> 00:06:18,080
so when we need to filter we need to

123
00:06:18,080 --> 00:06:22,100
organize things we would like to get the

124
00:06:22,100 --> 00:06:25,250
be like as close as this as possible

125
00:06:25,250 --> 00:06:28,340
where we can say ok so I have I have my

126
00:06:28,340 --> 00:06:31,360
Cassandra service or I have my radius or

127
00:06:31,360 --> 00:06:34,660
and I want to filter things by that well

128
00:06:34,660 --> 00:06:38,210
the other very cool thing we did stake

129
00:06:38,210 --> 00:06:40,850
is we talk to your container

130
00:06:40,850 --> 00:06:42,630
Orchestrator

131
00:06:42,630 --> 00:06:46,260
so either it's been docker or corn it is

132
00:06:46,260 --> 00:06:49,530
open share TCOs messes

133
00:06:49,530 --> 00:06:52,920
I even a bunch of other platforms we can

134
00:06:52,920 --> 00:06:55,350
talk to them understand how you are

135
00:06:55,350 --> 00:06:58,050
deploying our containers how do you

136
00:06:58,050 --> 00:07:01,290
schedule them how they are related to

137
00:07:01,290 --> 00:07:04,310
each other and use that information to

138
00:07:04,310 --> 00:07:06,690
venture because at the end of the day

139
00:07:06,690 --> 00:07:09,270
what says they can do is cup is

140
00:07:09,270 --> 00:07:11,970
capturing all these events that they are

141
00:07:11,970 --> 00:07:15,540
the system goals with some context as we

142
00:07:15,540 --> 00:07:17,370
can understand better what they are

143
00:07:17,370 --> 00:07:17,730
doing

144
00:07:17,730 --> 00:07:21,630
filter them and run scripts to change

145
00:07:21,630 --> 00:07:24,630
generate reports and find out what these

146
00:07:24,630 --> 00:07:27,180
things are doing we can do this life or

147
00:07:27,180 --> 00:07:30,480
we can dump things into a file which is

148
00:07:30,480 --> 00:07:36,420
similar to TCP dump pickup files we have

149
00:07:36,420 --> 00:07:38,220
container support I have mentioned this

150
00:07:38,220 --> 00:07:41,730
before and we have common line interface

151
00:07:41,730 --> 00:07:44,160
but also we have courses interface

152
00:07:44,160 --> 00:07:48,660
something similar to HD and this is

153
00:07:48,660 --> 00:07:50,760
basically everything I have 4 slots now

154
00:07:50,760 --> 00:07:53,700
we are moving into the dangerous part of

155
00:07:53,700 --> 00:07:57,210
this presentation which is the demo I

156
00:07:57,210 --> 00:08:01,530
have a very cool use case how he can or

157
00:08:01,530 --> 00:08:05,580
of the story that happened to us when

158
00:08:05,580 --> 00:08:08,880
running kubernetes I wanted to fully

159
00:08:08,880 --> 00:08:11,040
share it life but there was some

160
00:08:11,040 --> 00:08:13,650
last-minute problem with the network

161
00:08:13,650 --> 00:08:15,330
because it depends on something external

162
00:08:15,330 --> 00:08:17,190
but no worries because I have a system

163
00:08:17,190 --> 00:08:20,400
capture and I'm going to able to show

164
00:08:20,400 --> 00:08:23,520
you exactly the same thing but first of

165
00:08:23,520 --> 00:08:25,640
all we are brave and we are going to

166
00:08:25,640 --> 00:08:31,280
show you something life let me move this

167
00:08:31,280 --> 00:08:33,809
this terminal background you can forget

168
00:08:33,809 --> 00:08:34,289
about it

169
00:08:34,289 --> 00:08:38,729
it's Molly notes so I don't forget the

170
00:08:38,729 --> 00:08:42,409
things so basically I have here a

171
00:08:42,409 --> 00:08:47,840
kubernetes instance it's run in

172
00:08:47,840 --> 00:08:50,190
different containers you stole

173
00:08:50,190 --> 00:08:52,290
everything just pull in the different

174
00:08:52,290 --> 00:08:55,230
docker containers and first of all I

175
00:08:55,230 --> 00:08:58,200
want to show you how we can leverage how

176
00:08:58,200 --> 00:09:02,730
we can use Cystic to understand how

177
00:09:02,730 --> 00:09:04,950
cover needs work and I'm going to

178
00:09:04,950 --> 00:09:06,900
illustrate this with an example a very

179
00:09:06,900 --> 00:09:11,610
simple example of a service so I'm going

180
00:09:11,610 --> 00:09:13,530
to first thing I'm going to do I'm going

181
00:09:13,530 --> 00:09:16,470
to create namespace which is a pretty

182
00:09:16,470 --> 00:09:19,110
cool app very very very critical that's

183
00:09:19,110 --> 00:09:22,550
why I'm for need on kubernetes then

184
00:09:22,550 --> 00:09:27,180
inside of this namespace I have a

185
00:09:27,180 --> 00:09:30,720
service with the deployment and I'll be

186
00:09:30,720 --> 00:09:34,980
deploying three replicas of on nginx

187
00:09:34,980 --> 00:09:40,500
container simples up so let me deploy

188
00:09:40,500 --> 00:09:47,250
that and let's see okay it was catch so

189
00:09:47,250 --> 00:09:53,310
that's running already cool so one of

190
00:09:53,310 --> 00:09:55,940
the things it's very interested in order

191
00:09:55,940 --> 00:10:00,330
kubernetes does for us is managing the

192
00:10:00,330 --> 00:10:02,100
load balancer you probably if I'm not

193
00:10:02,100 --> 00:10:05,760
going to discover anything me for you so

194
00:10:05,760 --> 00:10:08,670
we deploy with deploy a service govern a

195
00:10:08,670 --> 00:10:11,040
displace load balancer in front and

196
00:10:11,040 --> 00:10:13,200
distributes the traffic between the

197
00:10:13,200 --> 00:10:16,560
number of containers we have there there

198
00:10:16,560 --> 00:10:19,500
are multiple or different strategies in

199
00:10:19,500 --> 00:10:22,980
this case just choosing a load balancer

200
00:10:22,980 --> 00:10:27,270
on on one fix IP address we can do this

201
00:10:27,270 --> 00:10:30,180
with DNS from robben but in this case we

202
00:10:30,180 --> 00:10:34,770
keep it simple so we know that our

203
00:10:34,770 --> 00:10:38,480
back-end service gets that IP address

204
00:10:38,480 --> 00:10:43,110
the chief for one and I got these three

205
00:10:43,110 --> 00:10:47,750
different end points my index pots

206
00:10:47,750 --> 00:10:54,690
what I'm going to do now is to lunch one

207
00:10:54,690 --> 00:10:57,260
client just with curl

208
00:10:57,260 --> 00:11:00,700
and leave that on the background and

209
00:11:00,700 --> 00:11:04,400
I'll open a new shell so we can follow

210
00:11:04,400 --> 00:11:06,699
up

211
00:11:14,730 --> 00:11:18,339
okay perfect so this is my client so now

212
00:11:18,339 --> 00:11:24,790
if I do curl buckin this works so

213
00:11:24,790 --> 00:11:28,480
basically returns the default homepage

214
00:11:28,480 --> 00:11:32,800
for nginx cool now that surprised but do

215
00:11:32,800 --> 00:11:36,670
we really know what's happening behind

216
00:11:36,670 --> 00:11:39,279
the scenes here we can imagine if we

217
00:11:39,279 --> 00:11:42,190
read the documentation but the first

218
00:11:42,190 --> 00:11:44,920
step to get familiar and to use properly

219
00:11:44,920 --> 00:11:48,459
a troubleshooting tool is to understand

220
00:11:48,459 --> 00:11:50,730
how the infrastructure really works so

221
00:11:50,730 --> 00:11:55,540
what I'm going to do is to leverage

222
00:11:55,540 --> 00:11:57,970
Cystic for that I told you already

223
00:11:57,970 --> 00:12:00,070
so one of the things very interested in

224
00:12:00,070 --> 00:12:03,839
things of cystic is that we can use some

225
00:12:03,839 --> 00:12:08,890
kubernetes entities or objects to filter

226
00:12:08,890 --> 00:12:13,690
out things showing here the different

227
00:12:13,690 --> 00:12:16,870
labels we understand from kubernetes if

228
00:12:16,870 --> 00:12:19,089
you are using custom ones we can also

229
00:12:19,089 --> 00:12:21,070
filter them but these are the difference

230
00:12:21,070 --> 00:12:25,800
so of namespaces like the usual stuff

231
00:12:25,800 --> 00:12:32,070
what I want to do now is show you the

232
00:12:32,070 --> 00:12:36,900
course interface so I'll be using cystic

233
00:12:36,900 --> 00:12:40,709
actually I wanted to show you this

234
00:12:40,709 --> 00:12:44,470
basically what we do here and she turns

235
00:12:44,470 --> 00:12:48,130
a snake to connect to cover needs API so

236
00:12:48,130 --> 00:12:51,370
we know how things work inside so these

237
00:12:51,370 --> 00:12:54,130
are all the processes running in my

238
00:12:54,130 --> 00:12:56,920
machine this is could be H sub well it's

239
00:12:56,920 --> 00:12:59,950
not because if we see here this is

240
00:12:59,950 --> 00:13:01,270
probably one of the most interesting

241
00:13:01,270 --> 00:13:03,790
sections they are different beers that

242
00:13:03,790 --> 00:13:07,959
we have pre-built for you I'll show some

243
00:13:07,959 --> 00:13:10,060
of them before you know talks like using

244
00:13:10,060 --> 00:13:13,000
tracers or using this for security but

245
00:13:13,000 --> 00:13:15,520
if you have a look at it here we have

246
00:13:15,520 --> 00:13:18,490
purple beads for different orchestration

247
00:13:18,490 --> 00:13:20,230
tools in this case we will focus on

248
00:13:20,230 --> 00:13:24,100
communities so if I click here I'm going

249
00:13:24,100 --> 00:13:25,750
to be able to see the

250
00:13:25,750 --> 00:13:28,840
different namespaces I got so I have my

251
00:13:28,840 --> 00:13:31,960
critical up and also cube system which

252
00:13:31,960 --> 00:13:36,460
is the internal namespace well let me

253
00:13:36,460 --> 00:13:41,620
stop here did close this I could get

254
00:13:41,620 --> 00:13:48,430
this with with gives in keep CTR what

255
00:13:48,430 --> 00:13:50,500
it's interesting here is that I'm able

256
00:13:50,500 --> 00:13:54,430
to show you some metrics CPA memory for

257
00:13:54,430 --> 00:13:58,360
Network aggregated all that information

258
00:13:58,360 --> 00:14:01,270
so I could see what was the memory usage

259
00:14:01,270 --> 00:14:03,550
for the namespace or the network users

260
00:14:03,550 --> 00:14:06,070
in the same way I do this for namespaces

261
00:14:06,070 --> 00:14:10,900
I can do for deployments with my back

262
00:14:10,900 --> 00:14:16,450
and deployment or for services and

263
00:14:16,450 --> 00:14:18,790
what's interesting is that is that this

264
00:14:18,790 --> 00:14:22,210
is like a tree there is a hierarchy here

265
00:14:22,210 --> 00:14:26,500
so if I go into my button and I hit

266
00:14:26,500 --> 00:14:31,150
enter automatically I go to the level

267
00:14:31,150 --> 00:14:34,960
underneath on I see or the poll all the

268
00:14:34,960 --> 00:14:37,180
pots that they are running inside of a

269
00:14:37,180 --> 00:14:39,520
service all the time I'm showing the

270
00:14:39,520 --> 00:14:42,400
metrics and if you pay attention here on

271
00:14:42,400 --> 00:14:47,830
filter I can see the filter the seasons

272
00:14:47,830 --> 00:14:50,080
diggy supply and so this this very same

273
00:14:50,080 --> 00:14:52,480
filter can be applied on the command

274
00:14:52,480 --> 00:14:54,540
line

275
00:14:54,800 --> 00:14:57,880
[Music]

276
00:14:59,800 --> 00:15:02,439
so one of the things I want to show now

277
00:15:02,439 --> 00:15:07,119
is as I mentioned before I want to

278
00:15:07,119 --> 00:15:09,220
understand what really happens behind

279
00:15:09,220 --> 00:15:12,869
the scenes when I do curl back in and

280
00:15:12,869 --> 00:15:16,779
how all that correction is handled all

281
00:15:16,779 --> 00:15:19,269
the load balancing and everything so

282
00:15:19,269 --> 00:15:23,259
what I'm going to do is she open seasick

283
00:15:23,259 --> 00:15:25,989
with a few filters in this case I'm

284
00:15:25,989 --> 00:15:28,019
using the command line interface so

285
00:15:28,019 --> 00:15:31,779
minus K for the kubernetes api then I'm

286
00:15:31,779 --> 00:15:37,860
giving Evan type open to see opened

287
00:15:37,860 --> 00:15:40,839
opens is called some foils and then I

288
00:15:40,839 --> 00:15:45,670
want to see every file that it's in /e

289
00:15:45,670 --> 00:15:49,299
DC and also I want to see everything

290
00:15:49,299 --> 00:15:53,679
that in the client pot so if I go back

291
00:15:53,679 --> 00:16:00,189
here and I do curl back on automatically

292
00:16:00,189 --> 00:16:06,309
I see all the files that they were open

293
00:16:06,309 --> 00:16:11,019
in my client container under is las et

294
00:16:11,019 --> 00:16:14,170
Cie remember I'm able to see this from

295
00:16:14,170 --> 00:16:17,139
outside okay since as they go says they

296
00:16:17,139 --> 00:16:19,350
gets running on my hosts in this case

297
00:16:19,350 --> 00:16:22,059
okay that's cool I can see yeah the

298
00:16:22,059 --> 00:16:24,160
different open parameters and everything

299
00:16:24,160 --> 00:16:27,240
but I'm curious and I would like to know

300
00:16:27,240 --> 00:16:30,730
what it's actually that I'm reading for

301
00:16:30,730 --> 00:16:33,819
those files I mean this case where I can

302
00:16:33,819 --> 00:16:38,110
do is to leverage on cystic chisels

303
00:16:38,110 --> 00:16:41,889
cystic chisels are some lower scripts we

304
00:16:41,889 --> 00:16:46,059
got that we feed all the system calls or

305
00:16:46,059 --> 00:16:48,009
the events and all the related

306
00:16:48,009 --> 00:16:52,089
information and with those Lua scripts

307
00:16:52,089 --> 00:16:55,439
we can reform and information aggregated

308
00:16:55,439 --> 00:16:57,879
manipulated and for example generator

309
00:16:57,879 --> 00:17:02,079
report or format the output so I'm going

310
00:17:02,079 --> 00:17:09,369
to do see a comb fds is all right come

311
00:17:09,369 --> 00:17:12,208
on let me know check

312
00:17:14,140 --> 00:17:17,390
now I was doing spy firewall would be

313
00:17:17,390 --> 00:17:25,240
the same thing okay so if I run this

314
00:17:28,240 --> 00:17:29,840
command again

315
00:17:29,840 --> 00:17:32,270
mmm nothing happens probably I'm doing

316
00:17:32,270 --> 00:17:52,820
something wrong spy filed it in yeah I

317
00:17:52,820 --> 00:17:56,360
will be his neck oh I don't know why I

318
00:17:56,360 --> 00:17:59,139
have on my notes

319
00:18:04,950 --> 00:18:08,450
what's wrong

320
00:18:15,440 --> 00:18:18,609
[Music]

321
00:18:19,660 --> 00:18:24,200
hmmm this is the first episode of the

322
00:18:24,200 --> 00:18:38,810
demo there we go now this is what I show

323
00:18:38,810 --> 00:18:42,230
you before well otherwise I will move

324
00:18:42,230 --> 00:18:43,790
into the next come on I wanted to show

325
00:18:43,790 --> 00:18:45,850
you

326
00:18:52,780 --> 00:19:08,990
what anyway I'm not messing this with

327
00:19:08,990 --> 00:19:14,480
this the other thing you wanted to show

328
00:19:14,480 --> 00:19:23,450
you boy that's working if I use this

329
00:19:23,450 --> 00:19:28,400
other chisel and I was working I can see

330
00:19:28,400 --> 00:19:33,980
exactly what I was waiting ok

331
00:19:33,980 --> 00:19:36,320
it was it's very similar to the echo fds

332
00:19:36,320 --> 00:19:40,430
so when I did open and a switch so I did

333
00:19:40,430 --> 00:19:43,790
curl so call let's try to resolve that

334
00:19:43,790 --> 00:19:48,110
name so open NS which I with a Revit

335
00:19:48,110 --> 00:19:52,490
file then I open hofstadt Kampf then I

336
00:19:52,490 --> 00:19:56,630
open resolve Kampf then I read the hosts

337
00:19:56,630 --> 00:19:59,510
and with all of the information I didn't

338
00:19:59,510 --> 00:20:01,760
read anything else under a slash et Cie

339
00:20:01,760 --> 00:20:05,060
so this is a nice way to see where my

340
00:20:05,060 --> 00:20:06,890
application is actually reading from

341
00:20:06,890 --> 00:20:07,880
those files because they could be

342
00:20:07,880 --> 00:20:09,860
changing automatically or things like

343
00:20:09,860 --> 00:20:16,250
that another use case of tittles another

344
00:20:16,250 --> 00:20:19,310
example I wanted to show you is by users

345
00:20:19,310 --> 00:20:21,860
spy users is a chisel that will print

346
00:20:21,860 --> 00:20:26,480
everything I execute so simple is that

347
00:20:26,480 --> 00:20:30,560
come here I execute again and I can see

348
00:20:30,560 --> 00:20:33,020
how the rogue user executed that comma

349
00:20:33,020 --> 00:20:35,660
so these are the kind of things are

350
00:20:35,660 --> 00:20:38,050
going to be very convenient to

351
00:20:38,050 --> 00:20:41,480
troubleshoot your kubernetes when you

352
00:20:41,480 --> 00:20:44,450
have an issue that last example before

353
00:20:44,450 --> 00:20:47,270
we move to someone else I'm using HTTP

354
00:20:47,270 --> 00:20:52,840
lock so guess what it's going to decode

355
00:20:52,840 --> 00:20:56,150
system calls writing into sockets will

356
00:20:56,150 --> 00:20:59,360
decode the HTTP protocol and will show

357
00:20:59,360 --> 00:21:01,760
me here the request including HTTP

358
00:21:01,760 --> 00:21:04,940
method or return response called latency

359
00:21:04,940 --> 00:21:07,570
things like that

360
00:21:08,190 --> 00:21:14,950
ttttt so this is very interesting but

361
00:21:14,950 --> 00:21:18,100
still I would like to know everything

362
00:21:18,100 --> 00:21:21,460
that's happening so and I mentioned

363
00:21:21,460 --> 00:21:27,720
before I'm not copping everything

364
00:21:31,560 --> 00:21:36,090
and I mentioned before says they can see

365
00:21:36,090 --> 00:21:38,400
everything so okay let's see everything

366
00:21:38,400 --> 00:21:40,380
going to explain you here

367
00:21:40,380 --> 00:21:42,360
this come on so again I'm collecting to

368
00:21:42,360 --> 00:21:46,110
cover needs API using PK that's printing

369
00:21:46,110 --> 00:21:49,560
from which container is that even coming

370
00:21:49,560 --> 00:21:53,400
from in a form of the output asthey and

371
00:21:53,400 --> 00:21:57,420
then I'm applying some filters and I can

372
00:21:57,420 --> 00:21:58,740
already foresee this is going to fail

373
00:21:58,740 --> 00:22:04,670
but and then I'm applying some filters

374
00:22:10,970 --> 00:22:16,170
that my notes they were not as good as I

375
00:22:16,170 --> 00:22:25,800
thought I'm filtering all the traffic

376
00:22:25,800 --> 00:22:29,130
that's network traffic with FD type so

377
00:22:29,130 --> 00:22:30,270
for the Scriptures that they are

378
00:22:30,270 --> 00:22:35,780
actually ipv4 or ipv6 and then I'm using

379
00:22:35,780 --> 00:22:39,270
some kubernetes filter saying okay

380
00:22:39,270 --> 00:22:41,250
everything on the namespace critical up

381
00:22:41,250 --> 00:22:45,860
or that it's Skye DNS which is the

382
00:22:45,860 --> 00:22:50,400
resolver I'm using so if I run my

383
00:22:50,400 --> 00:22:55,910
command I can see everything that works

384
00:22:55,910 --> 00:23:02,580
executed so let me show you from the

385
00:23:02,580 --> 00:23:07,290
beginning this is a bit complicated but

386
00:23:07,290 --> 00:23:10,020
we'll go through so I hope I'm just

387
00:23:10,020 --> 00:23:11,550
going to highlight the most important

388
00:23:11,550 --> 00:23:12,390
parts okay

389
00:23:12,390 --> 00:23:15,480
so we get the socket first of the thing

390
00:23:15,480 --> 00:23:18,300
we know we see that this is going to

391
00:23:18,300 --> 00:23:22,160
port 53 so it's the DNS resolution and

392
00:23:22,160 --> 00:23:27,180
the dns resolution goes into my DNS

393
00:23:27,180 --> 00:23:30,050
server which is we can see the IP there

394
00:23:30,050 --> 00:23:33,210
but then and we see that it's coming

395
00:23:33,210 --> 00:23:36,930
from curl then we see that the next

396
00:23:36,930 --> 00:23:39,870
message is actually coming from Sky DNS

397
00:23:39,870 --> 00:23:44,630
we read from the socket but we open

398
00:23:44,630 --> 00:23:48,860
a new connection to this guy on port

399
00:23:48,860 --> 00:23:53,290
4001 so we know that vodka is etcd and

400
00:23:53,290 --> 00:23:59,960
what we do there is etcd press requests

401
00:23:59,960 --> 00:24:03,980
with this URL trying to find out what's

402
00:24:03,980 --> 00:24:07,040
the IP address associated with the

403
00:24:07,040 --> 00:24:14,180
domain name we do that we get their

404
00:24:14,180 --> 00:24:17,450
reply over here I'm not going to get

405
00:24:17,450 --> 00:24:20,570
into the details digitate let me find

406
00:24:20,570 --> 00:24:23,630
there we go you see their JSON reply

407
00:24:23,630 --> 00:24:27,440
with the IP address tur then that goes

408
00:24:27,440 --> 00:24:31,850
back to Sky DNS sky DNS sends a DNS

409
00:24:31,850 --> 00:24:36,680
response and then we see curl here that

410
00:24:36,680 --> 00:24:40,040
it got it got the IP address then where

411
00:24:40,040 --> 00:24:42,470
we need to connect it one very

412
00:24:42,470 --> 00:24:44,060
interesting thing are actually I don't

413
00:24:44,060 --> 00:24:50,240
want to miss is what is this 241 so if

414
00:24:50,240 --> 00:25:02,320
we go back to mark over Nittis keep city

415
00:25:02,320 --> 00:25:05,860
notice not here

416
00:25:09,260 --> 00:25:13,539
Kiev City I'll inspect

417
00:25:21,220 --> 00:25:29,630
describe we see that 241 is the IP

418
00:25:29,630 --> 00:25:32,389
address of the load balancer okay so

419
00:25:32,389 --> 00:25:36,320
what etc' replied was the IP address of

420
00:25:36,320 --> 00:25:39,529
the load balancer let's go back here we

421
00:25:39,529 --> 00:25:42,860
see curl connecting to that IP address

422
00:25:42,860 --> 00:25:49,760
to digital let's find it out fifty three

423
00:25:49,760 --> 00:25:57,260
to two Tin Tin Tin there we go

424
00:25:57,260 --> 00:26:02,240
so or should we even so it's connecting

425
00:26:02,240 --> 00:26:09,500
to this API address 241 port 80 but then

426
00:26:09,500 --> 00:26:14,000
suddenly when we keep reading and we see

427
00:26:14,000 --> 00:26:18,110
the nginx port on this line we already

428
00:26:18,110 --> 00:26:22,250
see that this reply it's not coming from

429
00:26:22,250 --> 00:26:25,450
the same ip address so this is different

430
00:26:25,450 --> 00:26:30,590
172 1705 which is the IP address of the

431
00:26:30,590 --> 00:26:35,500
pole this is three key this is fake so

432
00:26:35,500 --> 00:26:39,260
we see the reply back or we see the get

433
00:26:39,260 --> 00:26:40,070
how in Enochs

434
00:26:40,070 --> 00:26:45,230
gets the real they get request we do the

435
00:26:45,230 --> 00:26:47,570
right mark which arrives to curl and

436
00:26:47,570 --> 00:26:51,350
curl print is okay so we see how the

437
00:26:51,350 --> 00:26:58,880
system calls yes we got the question we

438
00:26:58,880 --> 00:27:01,399
don't have a way to export yes the

439
00:27:01,399 --> 00:27:03,380
question was is there is any way to

440
00:27:03,380 --> 00:27:07,190
export to pick up we didn't have a way

441
00:27:07,190 --> 00:27:11,480
now because probably if not all both of

442
00:27:11,480 --> 00:27:14,179
the filters that we can be using on TCP

443
00:27:14,179 --> 00:27:16,539
dump can be used here already

444
00:27:16,539 --> 00:27:21,919
okay so we did this there was we saw the

445
00:27:21,919 --> 00:27:22,850
system called

446
00:27:22,850 --> 00:27:24,770
like all the sockets and everything

447
00:27:24,770 --> 00:27:29,900
writes with files been read to

448
00:27:29,900 --> 00:27:32,630
understand the DNS resolution but we

449
00:27:32,630 --> 00:27:34,700
found out that there were some changes

450
00:27:34,700 --> 00:27:39,010
on the IP address and actually if we do

451
00:27:39,010 --> 00:27:48,070
EP tables we'll see how kubernetes has

452
00:27:48,070 --> 00:27:59,050
one I am in the right place

453
00:28:08,860 --> 00:28:17,450
this is fake here we have one place tube

454
00:28:17,450 --> 00:28:21,040
services where all the traffic that goes

455
00:28:21,040 --> 00:28:23,960
into the bakken service because the

456
00:28:23,960 --> 00:28:26,510
screen is so small cannot be seen

457
00:28:26,510 --> 00:28:29,330
properly but we will if we read this

458
00:28:29,330 --> 00:28:32,390
carefully we will see how kubernetes

459
00:28:32,390 --> 00:28:35,990
creates a chain in on ebay tables at all

460
00:28:35,990 --> 00:28:37,970
the traffic that goes into the IEP that

461
00:28:37,970 --> 00:28:40,310
IP address is split in three different

462
00:28:40,310 --> 00:28:42,940
chains with some probability

463
00:28:42,940 --> 00:28:45,350
deterministic module to load balance

464
00:28:45,350 --> 00:28:46,910
between the different containers

465
00:28:46,910 --> 00:28:49,520
different pods and the traffic goes to a

466
00:28:49,520 --> 00:28:52,940
different IP address okay that's more or

467
00:28:52,940 --> 00:28:58,310
less how it works so think it's very

468
00:28:58,310 --> 00:29:02,360
useful for this and if we have some more

469
00:29:02,360 --> 00:29:08,870
time I got something else prepare which

470
00:29:08,870 --> 00:29:14,210
is one issue I experimented and we have

471
00:29:14,210 --> 00:29:18,200
45 minutes right so we have 10 mins more

472
00:29:18,200 --> 00:29:24,530
ok perfect so this is life this is very

473
00:29:24,530 --> 00:29:28,220
helpful to understand what kubernetes is

474
00:29:28,220 --> 00:29:30,230
doing behind the scenes but actually the

475
00:29:30,230 --> 00:29:33,470
title of this talk was how we control

476
00:29:33,470 --> 00:29:36,800
the kubernetes and as I said before

477
00:29:36,800 --> 00:29:39,890
I wanted to have do this life but there

478
00:29:39,890 --> 00:29:42,400
are some network external dependencies

479
00:29:42,400 --> 00:29:45,320
so instead of bringing a capture file of

480
00:29:45,320 --> 00:29:49,010
an issue that happened to us and we were

481
00:29:49,010 --> 00:29:51,190
running exactly the same scenario but

482
00:29:51,190 --> 00:29:55,850
girl instead of returning immediately it

483
00:29:55,850 --> 00:29:58,640
was taking close to 10 seconds waiting

484
00:29:58,640 --> 00:30:03,350
there hang in and then it was working so

485
00:30:03,350 --> 00:30:06,020
what is the worst thing that can happen

486
00:30:06,020 --> 00:30:07,400
to us

487
00:30:07,400 --> 00:30:10,940
as operators of an infrastructure the

488
00:30:10,940 --> 00:30:12,980
things fails now that's great because we

489
00:30:12,980 --> 00:30:15,430
can fix it worst thing of the harbor can

490
00:30:15,430 --> 00:30:19,090
is that things work very slowly and we

491
00:30:19,090 --> 00:30:22,660
don't know why so I took a capture of

492
00:30:22,660 --> 00:30:24,820
the other scenario and I'm going to show

493
00:30:24,820 --> 00:30:27,520
you how we found the problem using

494
00:30:27,520 --> 00:30:36,420
system so I'm moving back

495
00:30:41,340 --> 00:30:44,879
hopefully this is big enough what I'm

496
00:30:44,879 --> 00:30:48,659
going to do here is again open I think

497
00:30:48,659 --> 00:30:50,159
you're going to hate this cos of your

498
00:30:50,159 --> 00:30:55,080
destroyed open a captured foil and again

499
00:30:55,080 --> 00:30:57,749
include our PV for an eye PVC sockets

500
00:30:57,749 --> 00:31:01,590
filter boy again my critical up on the

501
00:31:01,590 --> 00:31:05,070
sky DNS and what it's very interesting

502
00:31:05,070 --> 00:31:08,940
here and as you see this is going can

503
00:31:08,940 --> 00:31:12,830
you still see this this is very slow

504
00:31:12,830 --> 00:31:15,179
it's very interesting here I'm going to

505
00:31:15,179 --> 00:31:17,879
go quickly it's similar to what we saw

506
00:31:17,879 --> 00:31:20,509
before we are going to see curl are

507
00:31:20,509 --> 00:31:24,450
trying to resolve a house name will go

508
00:31:24,450 --> 00:31:29,610
to a etcd ABCD will try sorry will go to

509
00:31:29,610 --> 00:31:32,460
sky DNS Kai DNS will try to resolve

510
00:31:32,460 --> 00:31:38,730
through etcd and if the entry is not

511
00:31:38,730 --> 00:31:41,009
foreign Anisa t it's going to try with

512
00:31:41,009 --> 00:31:44,429
different search domains and at the end

513
00:31:44,429 --> 00:31:46,320
we'll see that something unexpected

514
00:31:46,320 --> 00:31:50,539
happens so actually let me go through

515
00:31:50,539 --> 00:31:53,580
directly to the points I want to show

516
00:31:53,580 --> 00:31:59,669
you so we can see that first my request

517
00:31:59,669 --> 00:32:01,950
or the request that goes through ET city

518
00:32:01,950 --> 00:32:04,980
it's very very long what I'm sorry I

519
00:32:04,980 --> 00:32:07,230
forgot since the beginning now what we

520
00:32:07,230 --> 00:32:09,090
are doing differently is instead of

521
00:32:09,090 --> 00:32:12,299
using curl button I'm using a fully

522
00:32:12,299 --> 00:32:15,029
qualified domain name because it works

523
00:32:15,029 --> 00:32:16,499
or at least according to the

524
00:32:16,499 --> 00:32:20,970
documentation if I give curl or any DNS

525
00:32:20,970 --> 00:32:25,950
which my service SVC then my name space

526
00:32:25,950 --> 00:32:28,679
dot cluster dot local cover net lease

527
00:32:28,679 --> 00:32:33,299
offer the DNS entry by default so by

528
00:32:33,299 --> 00:32:37,259
some reason I see on the Siskel's and

529
00:32:37,259 --> 00:32:42,179
all this tracing that we are profiting a

530
00:32:42,179 --> 00:32:45,419
very funny search or we are searching

531
00:32:45,419 --> 00:32:47,700
for a very funny domain name so it's

532
00:32:47,700 --> 00:32:50,610
probably search doing funky stuff we'll

533
00:32:50,610 --> 00:32:53,009
see here we do this request that

534
00:32:53,009 --> 00:32:54,370
obviously

535
00:32:54,370 --> 00:32:59,380
it's not going to be fun we'll do the

536
00:32:59,380 --> 00:33:03,580
request again removing some parts of it

537
00:33:03,580 --> 00:33:07,289
sir the search domain it's removing

538
00:33:07,289 --> 00:33:16,150
different parts again not phone he does

539
00:33:16,150 --> 00:33:20,169
it one more time with less it's not

540
00:33:20,169 --> 00:33:24,159
found so we might think that we are

541
00:33:24,159 --> 00:33:25,630
losing time

542
00:33:25,630 --> 00:33:27,580
so the original problem was this was

543
00:33:27,580 --> 00:33:32,230
taken to execute around 8 to 10 seconds

544
00:33:32,230 --> 00:33:35,890
but if we if we look at the time stamps

545
00:33:35,890 --> 00:33:39,760
from the beginning this was 41 minutes

546
00:33:39,760 --> 00:33:46,809
39 seconds and I'm here I'm still 41

547
00:33:46,809 --> 00:33:50,890
minutes 39 seconds so what's the problem

548
00:33:50,890 --> 00:33:56,080
here why this is not working if we see

549
00:33:56,080 --> 00:34:05,309
already here let me find it I did it in

550
00:34:19,380 --> 00:34:22,380


551
00:34:25,560 --> 00:34:29,530
if we see already here we start to see a

552
00:34:29,530 --> 00:34:32,830
DNS request that they are having oh they

553
00:34:32,830 --> 00:34:35,679
are appending at the end something we

554
00:34:35,679 --> 00:34:39,340
are not expecting local domain raising

555
00:34:39,340 --> 00:34:42,550
so let me keep searching because I want

556
00:34:42,550 --> 00:34:45,610
to find and actually I will I want to

557
00:34:45,610 --> 00:34:55,179
find the last request we do here you see

558
00:34:55,179 --> 00:34:57,780
where I'm trying to do a local domain

559
00:34:57,780 --> 00:35:01,690
I'm already at the end and this is not

560
00:35:01,690 --> 00:35:05,470
working so that's that's crazy so what

561
00:35:05,470 --> 00:35:09,450
happen what it's happening here is that

562
00:35:09,450 --> 00:35:12,910
let's start to look at the timestamp on

563
00:35:12,910 --> 00:35:20,410
the left so we go faster 41:47 41 43 so

564
00:35:20,410 --> 00:35:21,670
what happened in between

565
00:35:21,670 --> 00:35:29,620
oh I love that so what's happening in

566
00:35:29,620 --> 00:35:36,610
here look look what we can see here so

567
00:35:36,610 --> 00:35:40,180
what's happening is that the sky DNS is

568
00:35:40,180 --> 00:35:45,040
going to etcd it's trying to forty to

569
00:35:45,040 --> 00:35:49,180
get sorry the DNS request is going to

570
00:35:49,180 --> 00:35:53,860
sky DNS sky DNS identifies this request

571
00:35:53,860 --> 00:35:56,830
with a local domain appended at the end

572
00:35:56,830 --> 00:36:00,280
and sky DNS s whoa this is a domain i

573
00:36:00,280 --> 00:36:02,800
don't have in kubernetes so this must be

574
00:36:02,800 --> 00:36:05,350
some external annoying so let's send

575
00:36:05,350 --> 00:36:09,900
this out to my upstream DNS server and

576
00:36:09,900 --> 00:36:12,850
because my upper string DNS server it's

577
00:36:12,850 --> 00:36:14,710
not answering so it's answering very

578
00:36:14,710 --> 00:36:18,640
slowly is not even available we wait for

579
00:36:18,640 --> 00:36:22,510
a full dns timeout almost four seconds

580
00:36:22,510 --> 00:36:25,990
so this will happen one time will happen

581
00:36:25,990 --> 00:36:29,710
two times and will happen three times

582
00:36:29,710 --> 00:36:35,440
until Lipsy decides it's enough stop it

583
00:36:35,440 --> 00:36:38,880
trying to remove

584
00:36:39,670 --> 00:36:43,490
pieces of my of my full search domain

585
00:36:43,490 --> 00:36:48,369
and we will just try to resolve the

586
00:36:48,369 --> 00:36:51,770
fully qualified domain vanilla as I gave

587
00:36:51,770 --> 00:36:55,099
it to my curl and then obviously will

588
00:36:55,099 --> 00:37:00,380
work so this is what happens at the end

589
00:37:00,380 --> 00:37:05,270
so this is a very good way to when we

590
00:37:05,270 --> 00:37:07,579
have different services talking to each

591
00:37:07,579 --> 00:37:10,309
other how we can get visibility of

592
00:37:10,309 --> 00:37:14,420
things one one side the other side says

593
00:37:14,420 --> 00:37:16,520
Lake and the filters are very convenient

594
00:37:16,520 --> 00:37:19,040
and you will say well but this was

595
00:37:19,040 --> 00:37:22,730
everything Network I could have done

596
00:37:22,730 --> 00:37:26,530
this with PCP done and with more patient

597
00:37:26,530 --> 00:37:30,230
using my filters I said okay yes but you

598
00:37:30,230 --> 00:37:32,480
want to be completely sure that what was

599
00:37:32,480 --> 00:37:37,160
happening on your client so as I show

600
00:37:37,160 --> 00:37:42,470
you before since they thus allow not

601
00:37:42,470 --> 00:37:46,520
only to filter on your network traffic

602
00:37:46,520 --> 00:37:49,640
but on any file descriptor so if I'm

603
00:37:49,640 --> 00:37:54,290
using the echo FDS as I show you before

604
00:37:54,290 --> 00:37:56,930
and now I'm going to repeat it because

605
00:37:56,930 --> 00:38:00,680
now will make more sense to you if I

606
00:38:00,680 --> 00:38:04,299
don't have the same problem I had before

607
00:38:12,589 --> 00:38:19,170
so I can see that the was something

608
00:38:19,170 --> 00:38:21,599
appended at the end which was local

609
00:38:21,599 --> 00:38:25,020
domain that it KN we found out it

610
00:38:25,020 --> 00:38:27,000
because it was being executed in a

611
00:38:27,000 --> 00:38:30,390
developer machine and the developer had

612
00:38:30,390 --> 00:38:32,940
a local domain added by probably some

613
00:38:32,940 --> 00:38:36,240
network manager crap or who knows and

614
00:38:36,240 --> 00:38:39,270
that was going or was being transmitted

615
00:38:39,270 --> 00:38:42,180
into kubernetes and kubernetes was

616
00:38:42,180 --> 00:38:46,020
creating the docker containers with the

617
00:38:46,020 --> 00:38:49,650
search domain appended to it and how you

618
00:38:49,650 --> 00:38:51,510
can be sure that this is happening well

619
00:38:51,510 --> 00:38:58,520
again we know that we can use Cystic to

620
00:38:58,520 --> 00:39:04,289
understand how kubernetes is instructing

621
00:39:04,289 --> 00:39:09,089
docker to create the containers so I'm

622
00:39:09,089 --> 00:39:10,859
not going to use local domain here

623
00:39:10,859 --> 00:39:13,470
because this is not life on my example

624
00:39:13,470 --> 00:39:16,859
what I'm going to use just search so if

625
00:39:16,859 --> 00:39:20,880
I run singular comment to the one before

626
00:39:20,880 --> 00:39:24,270
but this time I'm filtering on unique

627
00:39:24,270 --> 00:39:28,980
sockets and if I try to launch a new

628
00:39:28,980 --> 00:39:31,920
container I'll see how cover knit is

629
00:39:31,920 --> 00:39:36,510
using the docker API on a UNIX socket to

630
00:39:36,510 --> 00:39:39,329
tell docker how you need to create this

631
00:39:39,329 --> 00:39:43,529
container according to the description

632
00:39:43,529 --> 00:39:48,059
so I'm going to run this now I'm going

633
00:39:48,059 --> 00:39:52,490
to create a different container

634
00:39:52,490 --> 00:39:56,240
different name there we go

635
00:39:56,240 --> 00:39:59,629
super container

636
00:40:07,530 --> 00:40:11,530
and teach it in tune something is

637
00:40:11,530 --> 00:40:14,890
failing here again having buffer

638
00:40:14,890 --> 00:40:20,440
contains search well you will have to

639
00:40:20,440 --> 00:40:21,100
believe me

640
00:40:21,100 --> 00:40:23,020
well probably there is something wrong

641
00:40:23,020 --> 00:40:25,360
on my filtering I want to keep the last

642
00:40:25,360 --> 00:40:28,600
five minutes for questions but yeah this

643
00:40:28,600 --> 00:40:33,460
is the idea if or when you leave this

644
00:40:33,460 --> 00:40:36,730
talk now in five minutes what I would

645
00:40:36,730 --> 00:40:39,460
like you to remember or to keep for how

646
00:40:39,460 --> 00:40:41,560
much that you can use Cystic to

647
00:40:41,560 --> 00:40:43,600
troubleshoot anywhere you can hold

648
00:40:43,600 --> 00:40:47,560
anywhere on your hosts if we compare

649
00:40:47,560 --> 00:40:51,070
this to order a BPF based tools this is

650
00:40:51,070 --> 00:40:53,620
way more simple to use you don't need to

651
00:40:53,620 --> 00:40:56,260
know exactly what kind of system called

652
00:40:56,260 --> 00:40:58,480
you want to hurt you need to code any

653
00:40:58,480 --> 00:41:02,560
script just using something similar to

654
00:41:02,560 --> 00:41:05,590
what could be TCP dump both or nest

655
00:41:05,590 --> 00:41:08,830
roids and system cooler where you can

656
00:41:08,830 --> 00:41:12,070
very quickly see a lot of things

657
00:41:12,070 --> 00:41:14,830
obviously it's not as complete as it has

658
00:41:14,830 --> 00:41:16,930
different use cases but you can see

659
00:41:16,930 --> 00:41:19,690
Network you can see file descriptors you

660
00:41:19,690 --> 00:41:22,330
can see everything that has us is called

661
00:41:22,330 --> 00:41:26,680
a touch and this is everything I have

662
00:41:26,680 --> 00:41:32,850
for today I'm living here three links

663
00:41:32,850 --> 00:41:36,760
this very same talk it's fully explained

664
00:41:36,760 --> 00:41:44,470
in the last link so if you're very tired

665
00:41:44,470 --> 00:41:46,540
and you want to look at this is call

666
00:41:46,540 --> 00:41:49,300
these calls more carefully maybe with a

667
00:41:49,300 --> 00:41:54,040
beer in your hand more relaxed go three

668
00:41:54,040 --> 00:41:56,140
you have the same capture so you can

669
00:41:56,140 --> 00:41:58,240
play with filters yourself and

670
00:41:58,240 --> 00:42:00,730
everything totally recommended I hope

671
00:42:00,730 --> 00:42:03,010
you like it we have five minutes for

672
00:42:03,010 --> 00:42:04,600
questions

673
00:42:04,600 --> 00:42:14,110
[Applause]

674
00:42:18,660 --> 00:42:21,810
the question was how can I run this on

675
00:42:21,810 --> 00:42:26,340
any system like the eCos well in this

676
00:42:26,340 --> 00:42:29,880
case it was a command-line tool that it

677
00:42:29,880 --> 00:42:32,070
was installed through a package but

678
00:42:32,070 --> 00:42:34,560
since they can be installed just pulling

679
00:42:34,560 --> 00:42:37,140
the container for docker from docker huh

680
00:42:37,140 --> 00:42:39,450
any place where you can run a docker

681
00:42:39,450 --> 00:42:40,020
container

682
00:42:40,020 --> 00:42:43,740
he can run Cystic the requirement is

683
00:42:43,740 --> 00:42:46,130
that needs to be a privileged container

684
00:42:46,130 --> 00:42:49,260
because we need to pin the kernel module

685
00:42:49,260 --> 00:42:51,390
insert it and we need to execute in

686
00:42:51,390 --> 00:42:55,160
small so that happens

687
00:42:58,200 --> 00:43:01,390
what's the best part of a

688
00:43:01,390 --> 00:43:04,569
there is a question was when I have a

689
00:43:04,569 --> 00:43:07,779
multiple machines scenario how can I

690
00:43:07,779 --> 00:43:11,229
correlate the events or the system calls

691
00:43:11,229 --> 00:43:13,299
between all of them at the moment there

692
00:43:13,299 --> 00:43:16,589
is no tool to merge the different

693
00:43:16,589 --> 00:43:19,440
capture files

694
00:43:19,440 --> 00:43:22,150
yes we have the commercial tool that

695
00:43:22,150 --> 00:43:25,509
does something similar to run on

696
00:43:25,509 --> 00:43:29,049
multiple hosts shouldn't be very

697
00:43:29,049 --> 00:43:31,809
difficult in the same way we have tools

698
00:43:31,809 --> 00:43:35,469
to merge chippie copper or files

699
00:43:35,469 --> 00:43:37,869
together we could write a very simple

700
00:43:37,869 --> 00:43:40,450
tool to merge this and then open the

701
00:43:40,450 --> 00:43:42,069
only thing to take into account is that

702
00:43:42,069 --> 00:43:44,619
these files they tend to grow very very

703
00:43:44,619 --> 00:43:45,420
quickly

704
00:43:45,420 --> 00:43:48,009
remember that they store all the system

705
00:43:48,009 --> 00:43:49,809
calls with all the i/o buffers

706
00:43:49,809 --> 00:43:52,390
everything being executed on your

707
00:43:52,390 --> 00:43:54,489
machine so just a few seconds on a

708
00:43:54,489 --> 00:43:57,430
production server can be a fee gigabytes

709
00:43:57,430 --> 00:43:59,559
so you need to be careful with filters

710
00:43:59,559 --> 00:44:02,140
to keep only the information you are

711
00:44:02,140 --> 00:44:08,109
interested in well if you have no

712
00:44:08,109 --> 00:44:11,319
questions send me a tweet message or

713
00:44:11,319 --> 00:44:15,950
anything be happy to answer thank you

714
00:44:15,950 --> 00:44:23,689
[Applause]

