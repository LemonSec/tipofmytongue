1
00:00:00,000 --> 00:00:03,469
want I want in 20 minutes

2
00:00:07,340 --> 00:00:09,480
the person in the audience who don't

3
00:00:09,480 --> 00:00:11,760
have microphone so just like with the

4
00:00:11,760 --> 00:00:15,020
summer of your question yeah

5
00:00:23,259 --> 00:00:29,660
all right so hello I am Nick or my full

6
00:00:29,660 --> 00:00:30,980
name is Dominic Dortch

7
00:00:30,980 --> 00:00:34,699
maybe some of you already attended the

8
00:00:34,699 --> 00:00:38,329
talk I can and I did about the repeaters

9
00:00:38,329 --> 00:00:40,489
yesterday is there anyone here who

10
00:00:40,489 --> 00:00:44,269
attended the various talk yesterday okay

11
00:00:44,269 --> 00:00:47,420
so I have to start off with a few

12
00:00:47,420 --> 00:00:49,220
excuses I know you never do this in a

13
00:00:49,220 --> 00:00:51,769
talk but first thing is the preparation

14
00:00:51,769 --> 00:00:54,769
for this was a two hour workshop ended

15
00:00:54,769 --> 00:00:57,289
here is now cut down to a 25-minute talk

16
00:00:57,289 --> 00:01:01,399
so I will give you a quick introduction

17
00:01:01,399 --> 00:01:03,829
into it was a mic you mean this is what

18
00:01:03,829 --> 00:01:04,459
we will do today

19
00:01:04,459 --> 00:01:08,710
the second excuse is yeah actually

20
00:01:08,710 --> 00:01:11,240
officially this will be the most

21
00:01:11,240 --> 00:01:12,770
unprofessional talking this room because

22
00:01:12,770 --> 00:01:15,619
I am NOT a geospatial expert at all my

23
00:01:15,619 --> 00:01:18,110
knowledge about geospatial and geography

24
00:01:18,110 --> 00:01:20,330
stuff basically boils down to what you

25
00:01:20,330 --> 00:01:23,810
cannot watch what coordinates are so

26
00:01:23,810 --> 00:01:25,610
this is a technical talk about how to

27
00:01:25,610 --> 00:01:27,799
handle OpenStreetMap data and then you

28
00:01:27,799 --> 00:01:31,790
can do all the fancy do your stuff with

29
00:01:31,790 --> 00:01:36,290
this that you like okay so when we

30
00:01:36,290 --> 00:01:38,119
develop the repeaters which is a

31
00:01:38,119 --> 00:01:41,270
framework for developing augmented

32
00:01:41,270 --> 00:01:44,899
reality games you maybe know pokemon go

33
00:01:44,899 --> 00:01:48,469
or ingress and we started developing a

34
00:01:48,469 --> 00:01:51,110
framework that helps at creating such

35
00:01:51,110 --> 00:01:55,369
games and we had we wanted to bind game

36
00:01:55,369 --> 00:01:58,280
objects like items and non player

37
00:01:58,280 --> 00:02:00,890
characters and stuff like this in this

38
00:02:00,890 --> 00:02:03,469
framework to OpenStreetMap objects so we

39
00:02:03,469 --> 00:02:06,500
didn't only want game developers to be

40
00:02:06,500 --> 00:02:09,859
able to just let items and characters

41
00:02:09,859 --> 00:02:13,070
spawn it given gear locations but also

42
00:02:13,070 --> 00:02:15,650
add objects that are taken on street map

43
00:02:15,650 --> 00:02:22,030
and so we had to find a way how to get

44
00:02:22,030 --> 00:02:25,370
hold of the full set of OpenStreetMap

45
00:02:25,370 --> 00:02:28,820
life data which is well there are

46
00:02:28,820 --> 00:02:31,699
basically two ways to do this one way is

47
00:02:31,699 --> 00:02:34,190
you can directly access the

48
00:02:34,190 --> 00:02:34,940
OpenStreetMap

49
00:02:34,940 --> 00:02:36,530
api

50
00:02:36,530 --> 00:02:38,840
and you can do this once you can do this

51
00:02:38,840 --> 00:02:40,730
twice but if you do this a few thousand

52
00:02:40,730 --> 00:02:44,900
times and they will sooner or later gets

53
00:02:44,900 --> 00:02:46,040
a bit angry with you

54
00:02:46,040 --> 00:02:48,110
or the service will just not let you

55
00:02:48,110 --> 00:02:49,850
access it in anymore you can't do this

56
00:02:49,850 --> 00:02:52,520
in a centralized server application in

57
00:02:52,520 --> 00:02:56,209
the second way we could have done this

58
00:02:56,209 --> 00:02:58,730
we could have just downloaded the whole

59
00:02:58,730 --> 00:03:01,700
kind of data from um street map imported

60
00:03:01,700 --> 00:03:04,130
it in a huge database which is I don't

61
00:03:04,130 --> 00:03:06,650
have exit numbers numbers maybe one of

62
00:03:06,650 --> 00:03:10,010
you has I think it's compressed in a

63
00:03:10,010 --> 00:03:12,290
tarball it's one and a half terabyte or

64
00:03:12,290 --> 00:03:16,430
something don't know so and we didn't

65
00:03:16,430 --> 00:03:17,870
have the resources to handle this and we

66
00:03:17,870 --> 00:03:19,550
couldn't set up a database instance to

67
00:03:19,550 --> 00:03:21,680
work with this data and then we came up

68
00:03:21,680 --> 00:03:29,060
with an idea or let's say we thought

69
00:03:29,060 --> 00:03:31,760
what needed to be done we wanted to have

70
00:03:31,760 --> 00:03:33,410
all of um street map available not just

71
00:03:33,410 --> 00:03:35,569
a subset but we wanted to have all of it

72
00:03:35,569 --> 00:03:37,910
so people creating augmented reality

73
00:03:37,910 --> 00:03:39,410
games on the server

74
00:03:39,410 --> 00:03:40,790
they shouldn't be limited in what they

75
00:03:40,790 --> 00:03:43,700
could do with the data we wanted the

76
00:03:43,700 --> 00:03:45,620
application itself to only load relevant

77
00:03:45,620 --> 00:03:50,440
data not the full set and the data

78
00:03:50,440 --> 00:03:53,239
should have the we wanted to data to be

79
00:03:53,239 --> 00:03:56,239
available on the local server at any at

80
00:03:56,239 --> 00:03:58,549
any point in time and not loaded from

81
00:03:58,549 --> 00:04:02,380
the OpenStreetMap API every few seconds

82
00:04:02,380 --> 00:04:06,950
there were few cool add-ons that we who

83
00:04:06,950 --> 00:04:09,140
wanted to add first of all we were using

84
00:04:09,140 --> 00:04:11,930
SQL alchemy which is an object

85
00:04:11,930 --> 00:04:13,730
relational mapper for SQL based

86
00:04:13,730 --> 00:04:16,850
databases in Python who of you knows SQL

87
00:04:16,850 --> 00:04:20,358
alchemy this is great for those who

88
00:04:20,358 --> 00:04:23,479
don't it as I said it is an object

89
00:04:23,479 --> 00:04:26,510
relational mapper which basically allows

90
00:04:26,510 --> 00:04:29,330
definition of database tables and views

91
00:04:29,330 --> 00:04:32,570
in pure Python objects and you can

92
00:04:32,570 --> 00:04:34,880
access them as a pure Python objects and

93
00:04:34,880 --> 00:04:38,860
the mapper will do all the work with the

94
00:04:38,860 --> 00:04:40,940
relational creating the tables in the

95
00:04:40,940 --> 00:04:43,490
SQL database maintaining relations with

96
00:04:43,490 --> 00:04:47,409
foreign keys and all of the stuff

97
00:04:47,820 --> 00:04:51,270
we wanted to keep this transparent so

98
00:04:51,270 --> 00:04:54,900
developers using SQL alchemy could just

99
00:04:54,900 --> 00:04:57,600
use OpenStreetMap as if it were

100
00:04:57,600 --> 00:04:59,580
available in the local in the local SQL

101
00:04:59,580 --> 00:05:03,150
database even if it isn't so let's say

102
00:05:03,150 --> 00:05:07,260
the the application is querying for any

103
00:05:07,260 --> 00:05:10,500
objects tagged shop equals shop equals

104
00:05:10,500 --> 00:05:13,610
bakery somewhere in the bounding box and

105
00:05:13,610 --> 00:05:16,470
then they just make an SQL query and

106
00:05:16,470 --> 00:05:18,900
then osm erica me kicks in and says oh i

107
00:05:18,900 --> 00:05:20,790
don't have this data available I get it

108
00:05:20,790 --> 00:05:23,130
from Street Map places in the database

109
00:05:23,130 --> 00:05:24,570
but this is all completely transparent

110
00:05:24,570 --> 00:05:34,620
for the developer yeah okay we can this

111
00:05:34,620 --> 00:05:38,160
slide is a bit outdated because due to

112
00:05:38,160 --> 00:05:43,290
the cutting of the to our workshop I now

113
00:05:43,290 --> 00:05:46,980
reuse the presentations from the

114
00:05:46,980 --> 00:05:49,350
presentations from from another

115
00:05:49,350 --> 00:05:53,490
conference but still yeah awesome

116
00:05:53,490 --> 00:05:55,860
alchemy is not yet so stable we are

117
00:05:55,860 --> 00:05:57,540
using it in very PD tools and it works

118
00:05:57,540 --> 00:06:00,390
quite well it gets slow at some points

119
00:06:00,390 --> 00:06:04,320
when it gets many concurrent excesses

120
00:06:04,320 --> 00:06:15,390
but it works quite well ok so before we

121
00:06:15,390 --> 00:06:17,790
get to an example how to how awesome

122
00:06:17,790 --> 00:06:19,290
alchemy can be used in a Python

123
00:06:19,290 --> 00:06:23,880
application we implemented support for

124
00:06:23,880 --> 00:06:26,100
life of OpenStreetMap data so only the

125
00:06:26,100 --> 00:06:28,590
current data not for historical data

126
00:06:28,590 --> 00:06:31,830
because well there might be used for

127
00:06:31,830 --> 00:06:34,560
this but normally in a in a in an

128
00:06:34,560 --> 00:06:37,650
application that users use there is no

129
00:06:37,650 --> 00:06:41,430
need for historical data for for old

130
00:06:41,430 --> 00:06:44,070
revisions of OpenStreetMap data but only

131
00:06:44,070 --> 00:06:46,770
for the current data set and for this

132
00:06:46,770 --> 00:06:50,540
life data we support the basic

133
00:06:50,540 --> 00:06:52,680
OpenStreetMap data set which consists of

134
00:06:52,680 --> 00:06:55,890
nodes ways and relations who of you is

135
00:06:55,890 --> 00:06:58,800
not familiar to some extent with the

136
00:06:58,800 --> 00:07:00,450
OpenStreetMap data model how the map

137
00:07:00,450 --> 00:07:02,669
data is made up

138
00:07:02,669 --> 00:07:08,580
okay so basically it consists of nodes

139
00:07:08,580 --> 00:07:10,710
that are at certain coordinates and you

140
00:07:10,710 --> 00:07:13,500
can put these nodes together to a way or

141
00:07:13,500 --> 00:07:15,630
an area and you can put arbitrary

142
00:07:15,630 --> 00:07:17,160
objects together in relation and then

143
00:07:17,160 --> 00:07:19,680
you just extend it with key value pairs

144
00:07:19,680 --> 00:07:21,810
that make up the whole map rendering and

145
00:07:21,810 --> 00:07:24,800
all the properties of these map object

146
00:07:24,800 --> 00:07:28,650
it is very easy to model in a relational

147
00:07:28,650 --> 00:07:38,850
database okay so we use the the overpass

148
00:07:38,850 --> 00:07:44,180
API in the backend which is a bit yeah

149
00:07:44,180 --> 00:07:46,560
it works a bit better in this case and

150
00:07:46,560 --> 00:07:50,280
it also allows it also allows public

151
00:07:50,280 --> 00:07:53,490
access a bit more than than the base of

152
00:07:53,490 --> 00:07:57,419
oh speaking of API the most important

153
00:07:57,419 --> 00:07:59,220
component then is an SQL to overpass

154
00:07:59,220 --> 00:08:01,229
care compiler you know overpass uses

155
00:08:01,229 --> 00:08:04,229
this kind of domain-specific language to

156
00:08:04,229 --> 00:08:06,900
query text and bounding boxes and all

157
00:08:06,900 --> 00:08:10,199
the kinds of data but we as I said we

158
00:08:10,199 --> 00:08:13,410
wanted the developers to only need to

159
00:08:13,410 --> 00:08:15,900
use SQL or the SQL wrapper in SQL

160
00:08:15,900 --> 00:08:18,240
alchemy and so first thing we did this

161
00:08:18,240 --> 00:08:21,210
we build a compiler that gets an SQL

162
00:08:21,210 --> 00:08:24,690
query from SQL alchemy translates it it

163
00:08:24,690 --> 00:08:26,970
compiles it into an overpass care

164
00:08:26,970 --> 00:08:29,070
program and sends it to the overpass API

165
00:08:29,070 --> 00:08:31,860
and then import the resulting ml data

166
00:08:31,860 --> 00:08:35,370
back and we implemented of course some

167
00:08:35,370 --> 00:08:37,820
some caching so the so as imagine we can

168
00:08:37,820 --> 00:08:40,500
actually figure out that some data is

169
00:08:40,500 --> 00:08:41,789
already available and doesn't need to

170
00:08:41,789 --> 00:08:44,750
reload it from the internet

171
00:08:44,750 --> 00:08:48,050
so the basic flow in North America means

172
00:08:48,050 --> 00:08:50,850
for example we query for nodes within a

173
00:08:50,850 --> 00:08:54,690
bounding box it kicks it jumps into the

174
00:08:54,690 --> 00:08:56,130
it just triggered by the SQL alchemy

175
00:08:56,130 --> 00:08:56,880
module

176
00:08:56,880 --> 00:09:00,300
intercepts the query compiled to over

177
00:09:00,300 --> 00:09:04,050
Pascal then it kept the normalized hash

178
00:09:04,050 --> 00:09:05,940
of this of this program and looked in

179
00:09:05,940 --> 00:09:08,459
the database when this query was last

180
00:09:08,459 --> 00:09:11,730
run if it was run at any time if it was

181
00:09:11,730 --> 00:09:14,669
run recently then it just

182
00:09:14,669 --> 00:09:17,349
returns and does nothing and that SQL

183
00:09:17,349 --> 00:09:18,999
alchemy provides its data from the SQL

184
00:09:18,999 --> 00:09:21,999
back-end and if not it does this whole

185
00:09:21,999 --> 00:09:26,849
importing overpass cams and all that

186
00:09:34,200 --> 00:09:37,470
so here's a short example for example we

187
00:09:37,470 --> 00:09:38,850
want to get all bakeries within a

188
00:09:38,850 --> 00:09:42,630
bounding box then escharotomy is used

189
00:09:42,630 --> 00:09:45,660
like this in order to get to carry all

190
00:09:45,660 --> 00:09:48,030
objects of the ethic of the note class

191
00:09:48,030 --> 00:09:51,510
and filter it by its latitude and

192
00:09:51,510 --> 00:09:54,480
longitude to create a bounding box and

193
00:09:54,480 --> 00:09:58,560
oh this is a latish issue this would

194
00:09:58,560 --> 00:10:01,380
have been quotation mark contain s for

195
00:10:01,380 --> 00:10:05,700
key equals shop and this results in an

196
00:10:05,700 --> 00:10:11,400
SQL query object like so and then also

197
00:10:11,400 --> 00:10:13,860
marking me takes this query and compiles

198
00:10:13,860 --> 00:10:19,470
it to this simple to this simple over

199
00:10:19,470 --> 00:10:22,680
Pascal program actually this compiler

200
00:10:22,680 --> 00:10:26,430
was written by eyeko who no there was no

201
00:10:26,430 --> 00:10:27,990
one who had a very piece of stock

202
00:10:27,990 --> 00:10:30,810
actually for a 14-year old at this point

203
00:10:30,810 --> 00:10:32,940
who created this compiler I did this

204
00:10:32,940 --> 00:10:39,450
this was very cool okay so let's look at

205
00:10:39,450 --> 00:10:42,660
an example so using the flask web

206
00:10:42,660 --> 00:10:45,240
framework this is not anything that has

207
00:10:45,240 --> 00:10:50,490
to do with OSM alchemy basically but we

208
00:10:50,490 --> 00:10:53,490
use it as a basic web application

209
00:10:53,490 --> 00:10:55,410
framework because it is easy to use and

210
00:10:55,410 --> 00:10:59,240
to and to understand at this point so

211
00:10:59,240 --> 00:11:02,250
this is basically everything we need to

212
00:11:02,250 --> 00:11:05,400
do in Python now to get the web

213
00:11:05,400 --> 00:11:07,320
application available you can use

214
00:11:07,320 --> 00:11:08,730
whatever framework you like or no

215
00:11:08,730 --> 00:11:12,150
framework at all we create the SQL

216
00:11:12,150 --> 00:11:15,330
alchemy object to access the database

217
00:11:15,330 --> 00:11:17,430
this can be done with SQL Academy itself

218
00:11:17,430 --> 00:11:19,740
as well we are using flask s squared

219
00:11:19,740 --> 00:11:21,150
alchemy here which is a thin wrapper

220
00:11:21,150 --> 00:11:25,080
around around ask alchemy to make it fit

221
00:11:25,080 --> 00:11:29,040
within into this micro microwave

222
00:11:29,040 --> 00:11:31,890
framework and then all we need to do to

223
00:11:31,890 --> 00:11:34,110
at the OpenStreetMap tables to the

224
00:11:34,110 --> 00:11:36,480
database it's just a create an instance

225
00:11:36,480 --> 00:11:40,290
of the awesome alchemy library passing

226
00:11:40,290 --> 00:11:42,300
the database object telling it to

227
00:11:42,300 --> 00:11:45,330
actually use the overpass bag and create

228
00:11:45,330 --> 00:11:47,370
the tables and run it and at this point

229
00:11:47,370 --> 00:11:48,390
we have

230
00:11:48,390 --> 00:11:50,550
the OpenStreetMap tables available we

231
00:11:50,550 --> 00:11:53,820
can do for example we can do queries on

232
00:11:53,820 --> 00:11:59,250
OS m dot node or OS m dot dot way just

233
00:11:59,250 --> 00:12:07,950
as we like so this is a slightly

234
00:12:07,950 --> 00:12:09,570
extended version of the program it's a

235
00:12:09,570 --> 00:12:12,480
few more lines what we added is this

236
00:12:12,480 --> 00:12:15,840
this is for flask wrestlers which simply

237
00:12:15,840 --> 00:12:18,960
creates a restful interface a JSON

238
00:12:18,960 --> 00:12:22,100
interface that you can query using HTTP

239
00:12:22,100 --> 00:12:27,750
and so with this simple program we

240
00:12:27,750 --> 00:12:30,240
already have a program that gives us all

241
00:12:30,240 --> 00:12:32,160
of OpenStreetMap in it with a JSON

242
00:12:32,160 --> 00:12:33,870
interface with local caching and with

243
00:12:33,870 --> 00:12:36,360
not using nothing but a plain SQL

244
00:12:36,360 --> 00:12:38,840
database that we have and the

245
00:12:38,840 --> 00:12:42,270
Ericka me and the magic in the

246
00:12:42,270 --> 00:12:45,690
background so but at this point we could

247
00:12:45,690 --> 00:12:48,690
already just well with no authentication

248
00:12:48,690 --> 00:12:51,600
and nothing at all this is very basic

249
00:12:51,600 --> 00:12:54,590
but you could now just go and create a

250
00:12:54,590 --> 00:12:58,020
web front-end using angularjs or jQuery

251
00:12:58,020 --> 00:13:01,260
or whatever you like and just access the

252
00:13:01,260 --> 00:13:03,360
office treatment data with where

253
00:13:03,360 --> 00:13:03,810
whatever

254
00:13:03,810 --> 00:13:09,780
HTTP localhost / API sniffs there's note

255
00:13:09,780 --> 00:13:13,280
and then query for anything you like and

256
00:13:13,280 --> 00:13:18,630
yeah this is not so exciting because we

257
00:13:18,630 --> 00:13:20,640
could actually do this with open street

258
00:13:20,640 --> 00:13:22,590
you could actually query OpenStreetMap

259
00:13:22,590 --> 00:13:25,470
from JavaScript itself and we wouldn't

260
00:13:25,470 --> 00:13:28,560
need this the server but it gets more

261
00:13:28,560 --> 00:13:33,439
important when we want to link

262
00:13:33,500 --> 00:13:37,080
OpenStreetMap data with our own data in

263
00:13:37,080 --> 00:13:40,320
SQL and this is a very neat thing we can

264
00:13:40,320 --> 00:13:43,830
now have we can now put a foreign key in

265
00:13:43,830 --> 00:13:47,700
our own database table that map's to an

266
00:13:47,700 --> 00:13:50,160
own street map object and will show up

267
00:13:50,160 --> 00:13:55,100
in SQL alchemy as a relation so

268
00:13:56,450 --> 00:13:59,100
and those of you who know SK alchemy

269
00:13:59,100 --> 00:14:02,850
which was most of you as I remember this

270
00:14:02,850 --> 00:14:05,550
is a basic database model in SQL alchemy

271
00:14:05,550 --> 00:14:07,410
it will for those who do not know SQL

272
00:14:07,410 --> 00:14:10,440
alchemy this will just map to an SQL

273
00:14:10,440 --> 00:14:14,340
table called review in this case which

274
00:14:14,340 --> 00:14:16,800
will have an integer column as a primary

275
00:14:16,800 --> 00:14:17,310
key called

276
00:14:17,310 --> 00:14:21,570
ID and it will have a foreign key column

277
00:14:21,570 --> 00:14:24,000
called osm note ID which maps to the US

278
00:14:24,000 --> 00:14:26,820
M notes table which will be filled by

279
00:14:26,820 --> 00:14:28,320
was M alchemy with live data from

280
00:14:28,320 --> 00:14:31,080
OpenStreetMap and what we can do when we

281
00:14:31,080 --> 00:14:33,300
have an instance of this review class in

282
00:14:33,300 --> 00:14:35,850
our application we can now adjust let's

283
00:14:35,850 --> 00:14:39,330
say we call this instance my review we

284
00:14:39,330 --> 00:14:43,380
can just do my review sm node dot tex

285
00:14:43,380 --> 00:14:46,020
and then we have the dictionary of text

286
00:14:46,020 --> 00:14:48,390
of this node and we can just see in our

287
00:14:48,390 --> 00:14:52,200
application in our object model what

288
00:14:52,200 --> 00:14:56,160
hours m notice is linked to when there

289
00:14:56,160 --> 00:14:58,260
are two columns one for star so which is

290
00:14:58,260 --> 00:15:01,590
an integer column in the in a Unicode

291
00:15:01,590 --> 00:15:04,110
string column called comment so what we

292
00:15:04,110 --> 00:15:06,690
did now is we can create reviews for

293
00:15:06,690 --> 00:15:09,060
arbitrary OpenStreetMap nodes like

294
00:15:09,060 --> 00:15:10,770
bakeries or restaurants or hotels or

295
00:15:10,770 --> 00:15:14,610
whatever we can add a specific number of

296
00:15:14,610 --> 00:15:16,350
stars through this review just like you

297
00:15:16,350 --> 00:15:19,800
know from any any review platform and we

298
00:15:19,800 --> 00:15:21,110
can add a comment and this is

299
00:15:21,110 --> 00:15:23,190
automatically links to the life of the

300
00:15:23,190 --> 00:15:24,720
street map data and should we lose this

301
00:15:24,720 --> 00:15:26,760
OpenStreetMap data at some point in time

302
00:15:26,760 --> 00:15:29,280
or it needs an update or sm alchemy will

303
00:15:29,280 --> 00:15:31,800
do and we will always have a foreign key

304
00:15:31,800 --> 00:15:34,140
link to the real um street map object

305
00:15:34,140 --> 00:15:36,300
here and we can just we can see it in

306
00:15:36,300 --> 00:15:38,220
the J'son we can see it in our object

307
00:15:38,220 --> 00:15:42,410
model we can see and use it everywhere

308
00:15:43,160 --> 00:15:46,329
like so

309
00:15:46,329 --> 00:15:50,889
this query gets inquiries for all of

310
00:15:50,889 --> 00:15:52,899
them street map notes and filter them by

311
00:15:52,899 --> 00:15:56,379
ID so we just get a singer SM note here

312
00:15:56,379 --> 00:15:59,139
with this query this bakery is actually

313
00:15:59,139 --> 00:16:02,229
my favorite bakery next to my next to

314
00:16:02,229 --> 00:16:05,349
where I live and then we create an

315
00:16:05,349 --> 00:16:08,829
instance of the review class and provide

316
00:16:08,829 --> 00:16:12,069
all the columns we need we provide an

317
00:16:12,069 --> 00:16:15,009
argument osm note which has passed the

318
00:16:15,009 --> 00:16:18,549
bakery object for the foreign key we

319
00:16:18,549 --> 00:16:20,529
provide a number of stars and the

320
00:16:20,529 --> 00:16:24,459
comment and yeah we add it to the

321
00:16:24,459 --> 00:16:28,349
database and commit it and everything is

322
00:16:28,349 --> 00:16:30,669
everything is done and now we have this

323
00:16:30,669 --> 00:16:35,379
these two linked object just as if there

324
00:16:35,379 --> 00:16:36,939
weren't any OpenStreetMap back-end at

325
00:16:36,939 --> 00:16:42,220
all okay and then for example if we

326
00:16:42,220 --> 00:16:44,979
query the rest interface for this

327
00:16:44,979 --> 00:16:47,949
OpenStreetMap node we also get a back

328
00:16:47,949 --> 00:16:50,199
reference so we can now adjust query for

329
00:16:50,199 --> 00:16:51,849
OpenStreetMap nodes and we will

330
00:16:51,849 --> 00:16:54,849
automatically get all reviews from our

331
00:16:54,849 --> 00:16:57,449
local data model linked with this

332
00:16:57,449 --> 00:17:02,379
OpenStreetMap object so we can know for

333
00:17:02,379 --> 00:17:04,089
example in the web interface just have

334
00:17:04,089 --> 00:17:07,929
an open street map somewhere in a in a

335
00:17:07,929 --> 00:17:10,569
leaflet map or something and have to use

336
00:17:10,569 --> 00:17:13,480
a click on any open street map object

337
00:17:13,480 --> 00:17:15,849
there if we have a data layer and then

338
00:17:15,849 --> 00:17:18,519
we can ask our review service or review

339
00:17:18,519 --> 00:17:21,909
web web application to return this

340
00:17:21,909 --> 00:17:23,949
OpenStreetMap object and it will be

341
00:17:23,949 --> 00:17:26,439
filled with the back reference to our

342
00:17:26,439 --> 00:17:31,779
local data and yes we are recreating yet

343
00:17:31,779 --> 00:17:39,039
with us ok do I have time for a live

344
00:17:39,039 --> 00:17:49,019
demonstration no not reading yeah ok

345
00:17:49,019 --> 00:17:52,750
it's anyone here who did not get the

346
00:17:52,750 --> 00:17:55,690
basic idea and needs Nia needs me to

347
00:17:55,690 --> 00:17:57,490
show this in practice how this will look

348
00:17:57,490 --> 00:17:59,320
when I access it with with

349
00:17:59,320 --> 00:18:11,380
Zhora gland okay yeah okay before we get

350
00:18:11,380 --> 00:18:18,540
to the question or feedback minutes so

351
00:18:18,540 --> 00:18:21,130
as I already mentioned the introduction

352
00:18:21,130 --> 00:18:22,720
this is not so much about actually

353
00:18:22,720 --> 00:18:25,120
handing geospatial data but it is about

354
00:18:25,120 --> 00:18:27,250
getting the OpenStreetMap data into the

355
00:18:27,250 --> 00:18:28,990
application and then you can use it for

356
00:18:28,990 --> 00:18:30,820
everything you like you can could

357
00:18:30,820 --> 00:18:34,180
actually at post GIS to it as an

358
00:18:34,180 --> 00:18:36,760
additional layer and then you get all

359
00:18:36,760 --> 00:18:39,400
the fancy geospatial requiring

360
00:18:39,400 --> 00:18:42,670
functionality that it provides you can

361
00:18:42,670 --> 00:18:45,210
of course do your own calculations with

362
00:18:45,210 --> 00:18:47,680
with the geo data from home stream if

363
00:18:47,680 --> 00:18:50,080
you can link it with your own geo data

364
00:18:50,080 --> 00:18:56,060
in the database just as you like okay so

365
00:18:56,060 --> 00:18:57,300
[Music]

366
00:18:57,300 --> 00:19:05,440
maybe let's skip to this first you can

367
00:19:05,440 --> 00:19:10,780
find osm alchemy on github I am not so

368
00:19:10,780 --> 00:19:13,720
sure whether this URL still works it

369
00:19:13,720 --> 00:19:16,810
should I hope that github still redirect

370
00:19:16,810 --> 00:19:19,300
it if not you will find it in the very

371
00:19:19,300 --> 00:19:22,090
PDS organization you can find an example

372
00:19:22,090 --> 00:19:26,860
use of what I'm alchemy at the very p2

373
00:19:26,860 --> 00:19:29,230
server application and if you have any

374
00:19:29,230 --> 00:19:31,330
questions or want to play with it or try

375
00:19:31,330 --> 00:19:34,510
it out or have any feedback just report

376
00:19:34,510 --> 00:19:37,960
initiate on github or just ping me by

377
00:19:37,960 --> 00:19:41,140
email or Java there are more contacts

378
00:19:41,140 --> 00:19:43,180
there there are more contact

379
00:19:43,180 --> 00:19:45,730
possibilities in the digital repository

380
00:19:45,730 --> 00:19:51,210
I think all right

381
00:19:51,210 --> 00:19:54,970
so what we are as I said we are using it

382
00:19:54,970 --> 00:19:56,740
in the automatic way in the augmented

383
00:19:56,740 --> 00:20:00,880
reality framework very pin it was you

384
00:20:00,880 --> 00:20:03,010
can try it here on campus actually you

385
00:20:03,010 --> 00:20:05,020
can go to nightly dot very PD to store

386
00:20:05,020 --> 00:20:07,660
org and Ricky's tent you can play an

387
00:20:07,660 --> 00:20:09,220
augmented reality game that uses

388
00:20:09,220 --> 00:20:13,210
OpenStreetMap data from this from most

389
00:20:13,210 --> 00:20:15,430
mi comida to you yeah provide an

390
00:20:15,430 --> 00:20:17,460
augmented reality game here on campus

391
00:20:17,460 --> 00:20:22,330
and the next project will be creating a

392
00:20:22,330 --> 00:20:24,940
basic review and check-in service like

393
00:20:24,940 --> 00:20:26,980
the like Foursquare or Yale where you

394
00:20:26,980 --> 00:20:30,070
can review any location okay I can

395
00:20:30,070 --> 00:20:32,020
check-in at locations using ordinary

396
00:20:32,020 --> 00:20:34,720
OpenStreetMap data just like I showed in

397
00:20:34,720 --> 00:20:37,980
the example yeah

398
00:20:37,980 --> 00:20:42,150
we will see what it turns out of that

399
00:20:42,150 --> 00:20:47,790
yeah maybe I can get some feedback from

400
00:20:47,790 --> 00:20:51,610
from you for this idea any ideas what

401
00:20:51,610 --> 00:20:54,310
you think could be done with it was ml

402
00:20:54,310 --> 00:20:56,590
give me anything that you think is a bad

403
00:20:56,590 --> 00:20:58,690
idea or a good idea actually when we

404
00:20:58,690 --> 00:21:01,120
started this we weren't so sure whether

405
00:21:01,120 --> 00:21:02,740
it would work out in the end if it would

406
00:21:02,740 --> 00:21:07,330
be if it could be a good idea to add

407
00:21:07,330 --> 00:21:10,690
this much transparency and abstraction

408
00:21:10,690 --> 00:21:12,460
to it but it turned out to work quite

409
00:21:12,460 --> 00:21:15,730
well but maybe there are some critical

410
00:21:15,730 --> 00:21:18,430
voices who can warn us that something

411
00:21:18,430 --> 00:21:20,320
will fail big at some point in time

412
00:21:20,320 --> 00:21:24,100
something good everything could him so

413
00:21:24,100 --> 00:21:30,990
any questions ideas or feedback yeah

414
00:21:45,890 --> 00:21:49,250
the question was how we could expose the

415
00:21:49,250 --> 00:22:07,010
graph QL interface from a scaler Acme we

416
00:22:07,010 --> 00:22:09,799
haven't tried this but we could or we

417
00:22:09,799 --> 00:22:12,230
would even be more happy if you could

418
00:22:12,230 --> 00:22:18,980
actually try so you we where I was Amaka

419
00:22:18,980 --> 00:22:23,299
me is limited to creating these to

420
00:22:23,299 --> 00:22:25,220
creating the database entrance on the

421
00:22:25,220 --> 00:22:27,169
fly and the rest is pure a scary we

422
00:22:27,169 --> 00:22:32,750
didn't modify a scale alchemy we just

423
00:22:32,750 --> 00:22:35,149
add triggers to get the data online so

424
00:22:35,149 --> 00:22:38,270
if what you imagined to do with graph QL

425
00:22:38,270 --> 00:22:40,970
works with the basic SQL I can meet it

426
00:22:40,970 --> 00:22:42,679
will also work with the home Street Map

427
00:22:42,679 --> 00:22:47,960
data that gets into it yeah so neither a

428
00:22:47,960 --> 00:22:50,480
square I can me no no well as carica me

429
00:22:50,480 --> 00:22:52,549
doesn't know that there is America me it

430
00:22:52,549 --> 00:22:54,260
just runs the trigger code and then it

431
00:22:54,260 --> 00:23:01,029
forgets about yet you

432
00:23:10,740 --> 00:23:16,780
actually well you could also throw over

433
00:23:16,780 --> 00:23:20,140
Pascal queries into osm alchemy we do

434
00:23:20,140 --> 00:23:22,960
not expose this API but in Python you

435
00:23:22,960 --> 00:23:25,930
can use whatever whatever functions from

436
00:23:25,930 --> 00:23:28,330
a module that you like so you could do

437
00:23:28,330 --> 00:23:29,680
this we do not expose it right now

438
00:23:29,680 --> 00:23:31,770
because we really only have this

439
00:23:31,770 --> 00:23:34,120
transparency through ask alchemy but you

440
00:23:34,120 --> 00:23:36,550
could yet we could probably expose it as

441
00:23:36,550 --> 00:23:48,310
well if it is important if the local

442
00:23:48,310 --> 00:23:51,790
bakery disappears then it will at some

443
00:23:51,790 --> 00:23:53,590
point its appear from the database it

444
00:23:53,590 --> 00:23:55,390
will be if your neighbor cashing in it

445
00:23:55,390 --> 00:23:57,160
was my cue me and it doesn't look at the

446
00:23:57,160 --> 00:24:00,700
object within let's say a day or so they

447
00:24:00,700 --> 00:24:03,670
don't want Venice for a day but then it

448
00:24:03,670 --> 00:24:09,060
will of course Venice yes but there

449
00:24:09,060 --> 00:24:11,710
because open stream objects could vanish

450
00:24:11,710 --> 00:24:14,770
we did not add hard foreign key

451
00:24:14,770 --> 00:24:18,360
constraints to to the data model so X so

452
00:24:18,360 --> 00:24:20,860
your database won't hit inconsistent

453
00:24:20,860 --> 00:24:22,450
when the USM nodes vanish so you were

454
00:24:22,450 --> 00:24:24,640
still in this example keep the reviews

455
00:24:24,640 --> 00:24:26,380
and you can probably link them to

456
00:24:26,380 --> 00:24:28,420
another osm element in some maintenance

457
00:24:28,420 --> 00:24:30,910
code or something I'll just drop them

458
00:24:30,910 --> 00:24:38,610
here okay I am bit short-sighted sorry

459
00:24:38,610 --> 00:24:42,929
so any more questions yeah at the back

460
00:24:49,090 --> 00:24:53,570
yes it can the question was whether it's

461
00:24:53,570 --> 00:24:55,370
weather also alchemy can work offline

462
00:24:55,370 --> 00:24:58,640
without accessing overpass and yes it

463
00:24:58,640 --> 00:25:01,190
can well of course you will have to make

464
00:25:01,190 --> 00:25:05,230
sure to get the data you need

