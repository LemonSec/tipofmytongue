1
00:00:00,030 --> 00:00:03,530
hello everyone my name

2
00:00:04,520 --> 00:00:08,660
is yellow very excited to be R my talk

3
00:00:08,660 --> 00:00:11,389
is going to be about 6lowpan and Pt TCP

4
00:00:11,389 --> 00:00:14,230
and how to support new link layer types

5
00:00:14,230 --> 00:00:16,430
but first of all I'm going to give a

6
00:00:16,430 --> 00:00:19,220
short introduction because and

7
00:00:19,220 --> 00:00:21,560
afterwards they give a small really

8
00:00:21,560 --> 00:00:27,710
small demonstration okay so what to

9
00:00:27,710 --> 00:00:30,619
speak of B first of all pick a TCP is an

10
00:00:30,619 --> 00:00:34,250
ability CP IP stack for the Internet of

11
00:00:34,250 --> 00:00:37,220
Things it was a it's mostly backed by

12
00:00:37,220 --> 00:00:40,400
alpha intelligent systems those guys and

13
00:00:40,400 --> 00:00:41,780
it's developed from scratch

14
00:00:41,780 --> 00:00:44,660
with an Islander things revolution it's

15
00:00:44,660 --> 00:00:49,149
the first commute was in a January 2012

16
00:00:49,149 --> 00:00:54,160
where the the the the tree like key

17
00:00:54,160 --> 00:00:57,140
goals were to make a modular and a

18
00:00:57,140 --> 00:01:00,079
qualitative in a portable tcp/ip stack

19
00:01:00,079 --> 00:01:03,379
so for example portable it works with

20
00:01:03,379 --> 00:01:06,259
various operating systems on various

21
00:01:06,259 --> 00:01:09,380
devices like for example for tourists

22
00:01:09,380 --> 00:01:15,109
which talk in some hours support speaker

23
00:01:15,109 --> 00:01:17,689
TCP as well modularity every module is

24
00:01:17,689 --> 00:01:19,880
so like yeah you can switch it down and

25
00:01:19,880 --> 00:01:21,259
switch it off compile it didn't compile

26
00:01:21,259 --> 00:01:24,560
it down that etc and also qualities are

27
00:01:24,560 --> 00:01:29,179
very high priority on Pico TCP it's

28
00:01:29,179 --> 00:01:32,600
published with the GPL v2 Rises but soon

29
00:01:32,600 --> 00:01:34,399
it will be also be published under GPL

30
00:01:34,399 --> 00:01:38,719
v3 but more on that later then about 6

31
00:01:38,719 --> 00:01:41,209
lo pan what is 6lowpan for those who

32
00:01:41,209 --> 00:01:45,859
don't know 6 lo pans 6lowpan is stands

33
00:01:45,859 --> 00:01:49,189
for ipv6 over low rate and lossy

34
00:01:49,189 --> 00:01:52,789
personal area networks what's my name I

35
00:01:52,789 --> 00:01:57,709
did its adaption layer and optimization

36
00:01:57,709 --> 00:01:59,450
later that doesn't really fit in the

37
00:01:59,450 --> 00:02:03,950
regular tcp/ip protocol suite it's it's

38
00:02:03,950 --> 00:02:06,289
squeezed between the network layer and

39
00:02:06,289 --> 00:02:11,530
the link layer between ipv6 and the

40
00:02:11,530 --> 00:02:14,240
802.15.4

41
00:02:14,240 --> 00:02:15,599
[Music]

42
00:02:15,599 --> 00:02:20,079
this is our regular standard 6lowpan

43
00:02:20,079 --> 00:02:23,500
snack you look like it looks like UDP as

44
00:02:23,500 --> 00:02:26,920
a transport layer ipv6 which ipv6 enable

45
00:02:26,920 --> 00:02:30,609
discovery as well 6lowpan which provides

46
00:02:30,609 --> 00:02:32,530
the compression of fragmentation because

47
00:02:32,530 --> 00:02:35,109
those links most of the time of like an

48
00:02:35,109 --> 00:02:37,390
MTU of alerted 35 bytes for example

49
00:02:37,390 --> 00:02:40,780
almost yeah small and to use and so the

50
00:02:40,780 --> 00:02:42,549
the frames have to be compressed and

51
00:02:42,549 --> 00:02:47,590
fragmented because ip67 500 bytes in a

52
00:02:47,590 --> 00:02:50,170
single frame so that's what 6lowpan

53
00:02:50,170 --> 00:02:53,799
provides but most of the the specs in

54
00:02:53,799 --> 00:02:56,620
the available they only support like

55
00:02:56,620 --> 00:03:01,120
only 802.15.4 which is really cool and

56
00:03:01,120 --> 00:03:03,939
they also support no mac that you that

57
00:03:03,939 --> 00:03:07,389
you just provide 6lowpan buffer and do

58
00:03:07,389 --> 00:03:08,409
whatever you want with it

59
00:03:08,409 --> 00:03:20,430
but unlike physical physical radios like

60
00:03:20,430 --> 00:03:23,199
radio standards like bluetooth has a new

61
00:03:23,199 --> 00:03:27,310
standard coming out maybe you want it

62
00:03:27,310 --> 00:03:31,180
over yeah any any radio you want I want

63
00:03:31,180 --> 00:03:35,319
six low ipv6 over those radio links then

64
00:03:35,319 --> 00:03:38,349
we should provide the capability to

65
00:03:38,349 --> 00:03:42,359
extend it further then only the 802.15.4

66
00:03:42,359 --> 00:03:46,120
standard so that was my goal really to

67
00:03:46,120 --> 00:03:52,389
do now I'll give you small demo

68
00:03:52,389 --> 00:03:57,729
code so I unfortunately I couldn't

69
00:03:57,729 --> 00:04:02,470
finish fancy demo with meshing and

70
00:04:02,470 --> 00:04:03,849
everything because I'm still working on

71
00:04:03,849 --> 00:04:07,090
a machine part which is a mesh under

72
00:04:07,090 --> 00:04:10,180
topology so it meshes on the at link

73
00:04:10,180 --> 00:04:14,680
layer level but now I have virtual below

74
00:04:14,680 --> 00:04:19,930
so we have a virtual radio network in

75
00:04:19,930 --> 00:04:22,120
people TCP that can simulate radios and

76
00:04:22,120 --> 00:04:25,390
I've just took

77
00:04:25,390 --> 00:04:28,780
a sense of the the the the flexibility

78
00:04:28,780 --> 00:04:31,240
of 6lowpan impetus be I just started

79
00:04:31,240 --> 00:04:34,120
some sometime in events but chases the

80
00:04:34,120 --> 00:04:37,810
empty empty you of the device for like

81
00:04:37,810 --> 00:04:40,840
for example - one or two twenty seven to

82
00:04:40,840 --> 00:04:45,250
eight II bites and later on it changes

83
00:04:45,250 --> 00:04:47,050
to two hundred bytes so it's really

84
00:04:47,050 --> 00:04:53,500
flexible and so the 6lowpan EPP at that

85
00:04:53,500 --> 00:04:54,430
to death

86
00:04:54,430 --> 00:04:59,250
so first start

87
00:05:02,680 --> 00:05:12,280
so this is the radio driver oops oh

88
00:05:12,280 --> 00:05:18,290
wait I'm gonna compile again because

89
00:05:18,290 --> 00:05:19,940
your radio driver sometimes is a little

90
00:05:19,940 --> 00:05:24,160
bit yeah it's not the best

91
00:05:31,889 --> 00:05:35,490
seriously the

92
00:05:43,699 --> 00:05:47,030
wait seriously

93
00:05:47,030 --> 00:05:50,140
[Music]

94
00:05:59,990 --> 00:06:05,440
okey this is embarrassing

95
00:06:05,440 --> 00:06:11,650
yeah so there are each video

96
00:06:19,020 --> 00:06:24,840
no no no I'm gonna do this okay but I

97
00:06:24,840 --> 00:06:26,490
[Music]

98
00:06:26,490 --> 00:06:31,479
pick up that yeah it captures the

99
00:06:31,479 --> 00:06:35,229
devices messages that it sends and so

100
00:06:35,229 --> 00:06:39,520
we're now probably going to see yeah

101
00:06:39,520 --> 00:06:42,419
this one

102
00:06:44,050 --> 00:06:47,229
so now first of all we have like an MTU

103
00:06:47,229 --> 00:06:51,699
of 125 bytes for I Triple E idiot until

104
00:06:51,699 --> 00:06:57,270
800 mm - it's about 15.4 so the the

105
00:06:57,270 --> 00:06:58,990
fragmentation and the compression layer

106
00:06:58,990 --> 00:07:02,349
adapts to depth but after a while the

107
00:07:02,349 --> 00:07:08,349
the nth Ange - 80 bytes here and then

108
00:07:08,349 --> 00:07:10,150
the adaption

109
00:07:10,150 --> 00:07:12,699
yeah it just purposes it and the

110
00:07:12,699 --> 00:07:15,310
fragments it's further to 80 bytes and

111
00:07:15,310 --> 00:07:18,880
then later at a later point the

112
00:07:18,880 --> 00:07:25,270
compression isn't anymore so it just it

113
00:07:25,270 --> 00:07:27,460
doesn't - you have to let bytes and it

114
00:07:27,460 --> 00:07:30,039
fits inside an entire packet and it

115
00:07:30,039 --> 00:07:31,150
doesn't need to fragment it in

116
00:07:31,150 --> 00:07:35,319
compresses anymore so that's just to

117
00:07:35,319 --> 00:07:39,190
give you an idea about gather the

118
00:07:39,190 --> 00:07:43,759
compression the flexibility of 6lowpan

119
00:07:43,759 --> 00:07:48,529
and so how does 6lowpan a picky tcp look

120
00:07:48,529 --> 00:07:53,120
like you we have the ipv6 module the

121
00:07:53,120 --> 00:07:55,069
6lowpan module which provides the

122
00:07:55,069 --> 00:07:56,839
compression of fragmentation and then we

123
00:07:56,839 --> 00:07:59,419
have another module 6lowpan link layer

124
00:07:59,419 --> 00:08:02,599
and this allows to easily interchange

125
00:08:02,599 --> 00:08:04,610
the the mac layer the the the link layer

126
00:08:04,610 --> 00:08:08,779
itself to provide other support for

127
00:08:08,779 --> 00:08:13,099
other devices by the way the the same

128
00:08:13,099 --> 00:08:15,229
application is running at the moment on

129
00:08:15,229 --> 00:08:19,399
these these two devices just a blinky

130
00:08:19,399 --> 00:08:26,689
application that how does it work

131
00:08:26,689 --> 00:08:31,189
so when ipv6 watts is sent a frame so we

132
00:08:31,189 --> 00:08:33,320
have the ipv6 volume on top the 6lowpan

133
00:08:33,320 --> 00:08:35,120
module and then the 6lowpan link layer

134
00:08:35,120 --> 00:08:38,899
module so every module in Piku tcp looks

135
00:08:38,899 --> 00:08:41,839
like this every protocol is all to two

136
00:08:41,839 --> 00:08:45,230
queues like the going queue and outgoing

137
00:08:45,230 --> 00:08:47,930
queue they can hold multiple frames at

138
00:08:47,930 --> 00:08:50,899
once and then next to that we have the

139
00:08:50,899 --> 00:08:53,829
petition and picket TCP stack itself

140
00:08:53,829 --> 00:08:57,680
with the scheduler and and everything

141
00:08:57,680 --> 00:09:02,269
and yeah functions so if I push the 620

142
00:09:02,269 --> 00:09:04,459
sets of frame it sensed it to the stack

143
00:09:04,459 --> 00:09:07,370
which includes it into the 6lowpan queue

144
00:09:07,370 --> 00:09:09,519
out to wake you

145
00:09:09,519 --> 00:09:13,100
after which at the moment la at some

146
00:09:13,100 --> 00:09:16,220
point the schedule calls process out of

147
00:09:16,220 --> 00:09:20,350
the city open and the d key use it and

148
00:09:20,350 --> 00:09:23,149
start forcing it and what is it what

149
00:09:23,149 --> 00:09:25,250
does it do it first gets the link layer

150
00:09:25,250 --> 00:09:26,510
addresses from the neighbor discovery

151
00:09:26,510 --> 00:09:33,260
table yeah from the ipv6 addresses

152
00:09:33,260 --> 00:09:36,170
addresses and then it immediately pushes

153
00:09:36,170 --> 00:09:39,649
the frame to the 6lowpan link layer to

154
00:09:39,649 --> 00:09:41,740
check if it fits

155
00:09:41,740 --> 00:09:47,120
inside the single NTU and if it doesn't

156
00:09:47,120 --> 00:09:49,759
the link leg is going to give back the

157
00:09:49,759 --> 00:09:52,399
available bytes and then the the the

158
00:09:52,399 --> 00:09:53,990
6lowpan adaption layer styles

159
00:09:53,990 --> 00:09:56,870
compressing and fragmentation and then

160
00:09:56,870 --> 00:09:59,569
eventually when if when it does fit then

161
00:09:59,569 --> 00:10:03,259
it's included in the outgoing cue of

162
00:10:03,259 --> 00:10:06,290
6lowpan link lay the module and then

163
00:10:06,290 --> 00:10:08,420
afterwards the schedule of calls again

164
00:10:08,420 --> 00:10:11,600
the the the 6lowpan link layer module to

165
00:10:11,600 --> 00:10:13,880
process the frame and then it goes to

166
00:10:13,880 --> 00:10:16,730
the device driver eventually so that's

167
00:10:16,730 --> 00:10:22,430
that's how it works the six itself is

168
00:10:22,430 --> 00:10:25,880
based on extensions so we have several

169
00:10:25,880 --> 00:10:29,540
extensions that we can add and remove

170
00:10:29,540 --> 00:10:33,470
from the the linker and so two are

171
00:10:33,470 --> 00:10:35,360
currently installed like picker mesh

172
00:10:35,360 --> 00:10:39,110
which which is on which I'm working now

173
00:10:39,110 --> 00:10:43,850
and 6lowpan link layer Mac and they have

174
00:10:43,850 --> 00:10:46,519
to provide three functionalities so

175
00:10:46,519 --> 00:10:50,690
estimation to see if they repent the

176
00:10:50,690 --> 00:10:54,589
heavy foot processing if the available

177
00:10:54,589 --> 00:10:59,149
bytes is sufficient for the the 6lowpan

178
00:10:59,149 --> 00:11:01,930
frame that has to fit in it

179
00:11:01,930 --> 00:11:05,720
poses in is just when an incoming frame

180
00:11:05,720 --> 00:11:08,120
has to be handled and processed out for

181
00:11:08,120 --> 00:11:12,980
how to reframe and so we define a

182
00:11:12,980 --> 00:11:16,190
6lowpan link layer protocol structure to

183
00:11:16,190 --> 00:11:19,610
do to make it easily interchangeable for

184
00:11:19,610 --> 00:11:25,670
different protocols and they have to add

185
00:11:25,670 --> 00:11:27,769
these functionally they have to

186
00:11:27,769 --> 00:11:29,870
implement these functionalities so

187
00:11:29,870 --> 00:11:32,089
process import nest mate I just

188
00:11:32,089 --> 00:11:36,199
explained an estimated double sorry an

189
00:11:36,199 --> 00:11:39,759
address for network because it has to

190
00:11:39,759 --> 00:11:45,110
translate ipv6 address to a link address

191
00:11:45,110 --> 00:11:47,389
that's that's to get it from the baby

192
00:11:47,389 --> 00:11:50,899
discovery tables or something that's the

193
00:11:50,899 --> 00:11:51,560
load

194
00:11:51,560 --> 00:11:55,580
the evidence it has to be able to

195
00:11:55,580 --> 00:11:58,190
compare the address and also to derive

196
00:11:58,190 --> 00:12:01,820
from interface identifier ipv6 interface

197
00:12:01,820 --> 00:12:05,020
identify from the link layer address

198
00:12:05,020 --> 00:12:09,950
which can be derived from the extended

199
00:12:09,950 --> 00:12:14,089
universal identify 64-bit or form 16-bit

200
00:12:14,089 --> 00:12:19,550
short addresses so and we define pickle

201
00:12:19,550 --> 00:12:22,220
inkling address for that so that it's

202
00:12:22,220 --> 00:12:25,250
it's a generic version of link layer

203
00:12:25,250 --> 00:12:29,570
addresses then pick a pickle device a

204
00:12:29,570 --> 00:12:34,460
6lowpan device look just as - yes

205
00:12:34,460 --> 00:12:36,710
functions it has to implement sent and

206
00:12:36,710 --> 00:12:39,290
Pole to send to transmit a frame on the

207
00:12:39,290 --> 00:12:43,250
wire and to see if the something has to

208
00:12:43,250 --> 00:12:48,620
be done or an incoming frame is yeah

209
00:12:48,620 --> 00:12:51,730
there is an incoming frame of something

210
00:12:51,730 --> 00:12:55,460
so if you want to implement 6lowpan for

211
00:12:55,460 --> 00:12:59,570
your video you have to first of all

212
00:12:59,570 --> 00:13:03,050
define define how to you you're going to

213
00:13:03,050 --> 00:13:07,310
use addresses like yeah euy 64 external

214
00:13:07,310 --> 00:13:10,339
evidences or short addresses write some

215
00:13:10,339 --> 00:13:14,450
helper functions register them in pick a

216
00:13:14,450 --> 00:13:17,930
tcp we petrifies on the initialization

217
00:13:17,930 --> 00:13:21,460
of ratifies it just works with that

218
00:13:21,460 --> 00:13:22,970
implementation of the link layer

219
00:13:22,970 --> 00:13:26,480
protocol and then you're done so I've

220
00:13:26,480 --> 00:13:29,720
spent a while implementing six level and

221
00:13:29,720 --> 00:13:34,250
I have some thoughts about well it's

222
00:13:34,250 --> 00:13:37,700
actually good 6lowpan because it's kind

223
00:13:37,700 --> 00:13:40,280
of weird if you think about it that it's

224
00:13:40,280 --> 00:13:44,540
it's it's it says over ipv6 over low

225
00:13:44,540 --> 00:13:50,500
heat and lossy wireless networks but if

226
00:13:50,500 --> 00:13:54,040
it's kind of weird because so the entire

227
00:13:54,040 --> 00:13:57,480
tcp/ip stack says

228
00:13:57,480 --> 00:14:00,160
yeah okay here's my framing here's my

229
00:14:00,160 --> 00:14:03,430
forwarding ipv6 and etc etc let 6lowpan

230
00:14:03,430 --> 00:14:05,860
says at was like yeah it I don't

231
00:14:05,860 --> 00:14:09,250
care I'm just gonna remove it compress

232
00:14:09,250 --> 00:14:11,620
it it's kind of computationally

233
00:14:11,620 --> 00:14:14,530
expensive to do so I find it kind of

234
00:14:14,530 --> 00:14:19,660
weird that it's early so low power if I

235
00:14:19,660 --> 00:14:24,970
think early it's more easy to but the

236
00:14:24,970 --> 00:14:27,160
good thing about 6lowpan is that it's

237
00:14:27,160 --> 00:14:30,850
standardized tcp/ip futures that you can

238
00:14:30,850 --> 00:14:34,090
use you can use fancy things like DNS

239
00:14:34,090 --> 00:14:39,370
for example or co-op or a cool thing I

240
00:14:39,370 --> 00:14:41,860
also worked on DNS based service

241
00:14:41,860 --> 00:14:44,140
discovery on Patricia P which is kind of

242
00:14:44,140 --> 00:14:48,430
cool if every device really register is

243
00:14:48,430 --> 00:14:50,050
the whole service and then mouse itself

244
00:14:50,050 --> 00:14:51,790
network through 6lowpan it would be

245
00:14:51,790 --> 00:14:54,160
really cool and you've the sensors with

246
00:14:54,160 --> 00:14:56,790
their own service they can provide

247
00:14:56,790 --> 00:15:00,310
analyst on the on the network so quite

248
00:15:00,310 --> 00:15:02,190
low power applications

249
00:15:02,190 --> 00:15:05,320
yeah messed apologies with ipv6

250
00:15:05,320 --> 00:15:10,900
addressing and also another application

251
00:15:10,900 --> 00:15:13,630
would be to reach different radio links

252
00:15:13,630 --> 00:15:19,390
like I just said you can also like this

253
00:15:19,390 --> 00:15:22,710
device can for example support a Tripoli

254
00:15:22,710 --> 00:15:25,930
802.15.4 but another device with the

255
00:15:25,930 --> 00:15:28,630
same stack can use Bluetooth Low Energy

256
00:15:28,630 --> 00:15:33,370
for example so that's kind of cool to

257
00:15:33,370 --> 00:15:36,550
have and with these different protocols

258
00:15:36,550 --> 00:15:41,290
everywhere this is maybe not that bad

259
00:15:41,290 --> 00:15:47,820
not a bad idea so this is my final slide

260
00:15:47,820 --> 00:15:52,180
because TCP is going to have a release

261
00:15:52,180 --> 00:15:56,350
next week which includes 6lowpan support

262
00:15:56,350 --> 00:16:01,150
and gplv2 three licensing plus GPL v2

263
00:16:01,150 --> 00:16:03,720
licensing and

264
00:16:03,720 --> 00:16:08,550
yeah that's it are there any questions

265
00:16:10,490 --> 00:16:14,570
don't forget to be Jewish

266
00:16:30,750 --> 00:16:37,050
because you yeah

267
00:16:42,690 --> 00:16:48,329
so so the question is how does it work

268
00:16:48,329 --> 00:16:52,649
with the GPL v2 and GPL v3 licensing

269
00:16:52,649 --> 00:16:55,560
with static like linking on embedded

270
00:16:55,560 --> 00:16:57,000
devices

271
00:16:57,000 --> 00:17:00,689
what if applications have to have to use

272
00:17:00,689 --> 00:17:07,500
the GPL v2 and GPL v3 as well and I have

273
00:17:07,500 --> 00:17:08,699
to be honest I don't know a lot about

274
00:17:08,699 --> 00:17:13,919
licensing I know so I may because I give

275
00:17:13,919 --> 00:17:18,439
the word to farik

276
00:17:32,440 --> 00:17:35,499
[Music]

277
00:17:42,990 --> 00:17:47,130
so if there is also a license for

278
00:17:47,130 --> 00:17:50,820
commercial applications and then if you

279
00:17:50,820 --> 00:17:52,520
pay for it to be used in your

280
00:17:52,520 --> 00:17:57,630
proprietary application so that's any

281
00:17:57,630 --> 00:18:13,110
more questions yeah so the question is

282
00:18:13,110 --> 00:18:15,420
the different compression schemes in

283
00:18:15,420 --> 00:18:21,510
six-lap I like H 0 and H E UDP in NFC

284
00:18:21,510 --> 00:18:27,450
for like 94 49:44 but there are a little

285
00:18:27,450 --> 00:18:32,190
duplicate so we don't support those we

286
00:18:32,190 --> 00:18:36,510
support IP HC compression and next

287
00:18:36,510 --> 00:18:40,080
further UDP decompression we support

288
00:18:40,080 --> 00:18:45,900
it's also in same RFC but there is also

289
00:18:45,900 --> 00:18:49,920
the generic and which is coming out in

290
00:18:49,920 --> 00:18:52,980
yeah it's it's it's a proposal in RFC

291
00:18:52,980 --> 00:18:56,460
proposal okay

292
00:18:56,460 --> 00:18:58,980
yeah so the the generic header

293
00:18:58,980 --> 00:19:03,350
compression we don't implement see yes

294
00:19:10,780 --> 00:19:15,260
yeah yeah you can I am sorry so the the

295
00:19:15,260 --> 00:19:19,190
the the the helper functions yeah it's

296
00:19:19,190 --> 00:19:28,970
the interface with link layer like sorry

297
00:19:28,970 --> 00:19:33,620
no here yeah it's the interface with the

298
00:19:33,620 --> 00:19:37,460
the link protocol so those you can

299
00:19:37,460 --> 00:19:40,010
register them with the initialization of

300
00:19:40,010 --> 00:19:42,160
the device so you can assign a different

301
00:19:42,160 --> 00:19:45,350
link layer protocol to any Elliott to a

302
00:19:45,350 --> 00:19:51,189
different device so that makes it

303
00:19:59,789 --> 00:20:04,049
I have a dual TCP I am sorry so the

304
00:20:04,049 --> 00:20:07,379
question was recalled pickup TCP do we

305
00:20:07,379 --> 00:20:10,710
actually do participate in CP yeah we do

306
00:20:10,710 --> 00:20:14,570
TCP as well but that's not really

307
00:20:14,570 --> 00:20:18,720
advised with a 6lowpan because there are

308
00:20:18,720 --> 00:20:21,090
lots in networks their connection I

309
00:20:21,090 --> 00:20:23,129
would be better to use a connectionless

310
00:20:23,129 --> 00:20:26,220
protocol like UDP so standards 6lowpan

311
00:20:26,220 --> 00:20:33,229
stacked most often uses UDP forward

312
00:20:38,920 --> 00:20:45,630
I will know which DCP requires a

313
00:20:45,630 --> 00:20:52,290
somewhat more but now with UDP we have I

314
00:20:52,290 --> 00:20:58,090
don't know about Flash but that's that's

315
00:20:58,090 --> 00:21:02,340
what that's with the baggy symbols in so

316
00:21:02,340 --> 00:21:06,850
if we put TCP I wouldn't know exactly

317
00:21:06,850 --> 00:21:09,730
how much it would add to the to the

318
00:21:09,730 --> 00:21:11,890
stack there have been talks about pica

319
00:21:11,890 --> 00:21:14,530
TCP in this def room or in the embedded

320
00:21:14,530 --> 00:21:17,290
data from previous years which focus on

321
00:21:17,290 --> 00:21:19,870
the TCP part and on the memory footprint

322
00:21:19,870 --> 00:21:22,810
and size so you can check those and then

323
00:21:22,810 --> 00:21:24,550
you'll get a lot of figures and I guess

324
00:21:24,550 --> 00:21:30,550
also on your website 6lowpan

325
00:21:30,550 --> 00:21:35,250
yeah I need because we support other

326
00:21:35,250 --> 00:21:38,830
protocols we don't this is just the

327
00:21:38,830 --> 00:21:41,050
6lowpan part of pica TCP it's so many

328
00:21:41,050 --> 00:21:44,220
small parts to do much more than only

329
00:21:44,220 --> 00:21:47,030
6lowpan

330
00:21:47,030 --> 00:21:50,320
any more questions

331
00:21:51,570 --> 00:21:55,079
[Applause]

