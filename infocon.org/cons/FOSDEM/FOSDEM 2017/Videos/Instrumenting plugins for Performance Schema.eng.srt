1
00:00:00,030 --> 00:00:02,900
great

2
00:00:05,150 --> 00:00:09,030
so my name is mark Leith I'm a senior

3
00:00:09,030 --> 00:00:11,820
software development manager in Oracle I

4
00:00:11,820 --> 00:00:12,959
actually work in what's called the

5
00:00:12,959 --> 00:00:17,280
enterprise tools team in Oracle so my

6
00:00:17,280 --> 00:00:19,650
responsibility is actually a tool called

7
00:00:19,650 --> 00:00:21,360
MySQL Enterprise monitor which comes

8
00:00:21,360 --> 00:00:24,600
with the subscription in MySQL

9
00:00:24,600 --> 00:00:27,390
I'm also the original developer of the

10
00:00:27,390 --> 00:00:29,820
sis schema which is now included in five

11
00:00:29,820 --> 00:00:34,290
seven by default and because I have so

12
00:00:34,290 --> 00:00:36,570
much responsibility around the

13
00:00:36,570 --> 00:00:38,519
monitoring tool I also have a whole

14
00:00:38,519 --> 00:00:40,890
bunch of input into all of the

15
00:00:40,890 --> 00:00:43,859
instrumentation in the server as well so

16
00:00:43,859 --> 00:00:46,949
I've had a lot of input into shaping

17
00:00:46,949 --> 00:00:49,559
performance schema and a lot of the the

18
00:00:49,559 --> 00:00:50,940
other instrumentation in the server is

19
00:00:50,940 --> 00:00:56,010
one so a quick overview of what I'll

20
00:00:56,010 --> 00:00:58,379
talk today first why you should

21
00:00:58,379 --> 00:01:00,030
instrument your plugins in performance

22
00:01:00,030 --> 00:01:01,199
schemer I think Valerie did a pretty

23
00:01:01,199 --> 00:01:04,790
good job of describing why a minute ago

24
00:01:04,790 --> 00:01:07,800
a quick look at the the interfaces that

25
00:01:07,800 --> 00:01:10,500
are available to actually use from

26
00:01:10,500 --> 00:01:13,590
performance schema itself show a few

27
00:01:13,590 --> 00:01:15,840
examples of how you take your current

28
00:01:15,840 --> 00:01:19,290
code in in a plugin and push it into the

29
00:01:19,290 --> 00:01:23,100
instrumented interfaces and then I

30
00:01:23,100 --> 00:01:25,649
answer any questions before I would do

31
00:01:25,649 --> 00:01:28,020
that I want to get an idea of has

32
00:01:28,020 --> 00:01:29,939
anybody actually written a plug-in with

33
00:01:29,939 --> 00:01:34,170
perform a plugin for MySQL wow that's

34
00:01:34,170 --> 00:01:35,670
more people than I expected some of you

35
00:01:35,670 --> 00:01:37,829
are actually developers on Oracle that's

36
00:01:37,829 --> 00:01:40,439
that's wrong of any of you actually

37
00:01:40,439 --> 00:01:42,840
considered writing plug-ins for the

38
00:01:42,840 --> 00:01:44,600
MySQL

39
00:01:44,600 --> 00:01:49,909
you know a couple so the why I people

40
00:01:49,909 --> 00:01:52,869
don't really realize that as MySQL has

41
00:01:52,869 --> 00:01:55,360
moved on over the years we've actually

42
00:01:55,360 --> 00:01:57,290
added a whole bunch of really good

43
00:01:57,290 --> 00:01:59,840
interfaces into the server so you hear a

44
00:01:59,840 --> 00:02:01,970
lot that you know you there's not enough

45
00:02:01,970 --> 00:02:04,759
instrumentation I want to do firewalling

46
00:02:04,759 --> 00:02:07,009
and all of this kind of stuff

47
00:02:07,009 --> 00:02:09,619
over the years we've added a bunch of

48
00:02:09,619 --> 00:02:12,200
interfaces not just storage engines but

49
00:02:12,200 --> 00:02:20,900
being able to do things like see what

50
00:02:20,900 --> 00:02:21,440
it's doing

51
00:02:21,440 --> 00:02:23,420
change it along the way block it with

52
00:02:23,420 --> 00:02:26,930
firewalling those kind of things we have

53
00:02:26,930 --> 00:02:29,680
an audit interface we have our own audit

54
00:02:29,680 --> 00:02:33,800
plugin that we have with Oracle there

55
00:02:33,800 --> 00:02:34,790
are other ones that are out there like

56
00:02:34,790 --> 00:02:38,840
the one that percona has a Maria but the

57
00:02:38,840 --> 00:02:40,760
other thing is with that data you can do

58
00:02:40,760 --> 00:02:42,709
your own thing right you there's there's

59
00:02:42,709 --> 00:02:44,060
a lot of data that you can get in the

60
00:02:44,060 --> 00:02:46,970
audit stream about who is doing what

61
00:02:46,970 --> 00:02:49,130
what kind of problems are coming up with

62
00:02:49,130 --> 00:02:51,140
errors those kind of things so it's a a

63
00:02:51,140 --> 00:02:53,269
great interface that's that's probably

64
00:02:53,269 --> 00:02:55,370
the one that I think most people should

65
00:02:55,370 --> 00:02:57,440
look at almost DBAs that want to trace

66
00:02:57,440 --> 00:02:59,390
what's going on on their systems and

67
00:02:59,390 --> 00:03:01,220
I'll give an example based on the audit

68
00:03:01,220 --> 00:03:05,620
one today we also have full text search

69
00:03:05,620 --> 00:03:08,239
not many people use that information

70
00:03:08,239 --> 00:03:10,750
schema tables can be pluggable as well

71
00:03:10,750 --> 00:03:15,950
so you can again look at or get a whole

72
00:03:15,950 --> 00:03:17,570
bunch of data from the server and expose

73
00:03:17,570 --> 00:03:20,269
that if you want to I've written for

74
00:03:20,269 --> 00:03:22,790
instance information schema tables in

75
00:03:22,790 --> 00:03:24,950
the past that go off and do system calls

76
00:03:24,950 --> 00:03:28,220
and find CPU usage and i/o usage and all

77
00:03:28,220 --> 00:03:30,200
of that kind of stuff it's it's not hard

78
00:03:30,200 --> 00:03:32,190
to write those kind of things

79
00:03:32,190 --> 00:03:34,980
and then replication interfaces you know

80
00:03:34,980 --> 00:03:37,440
that as we've worked on things like

81
00:03:37,440 --> 00:03:39,840
group replication like we have given

82
00:03:39,840 --> 00:03:41,640
interfaces into the binary log streams

83
00:03:41,640 --> 00:03:44,280
as well so those are things that people

84
00:03:44,280 --> 00:03:46,770
can I think will start to pick up and

85
00:03:46,770 --> 00:03:49,500
use more you know as we do integration

86
00:03:49,500 --> 00:03:52,320
with other big data systems you can

87
00:03:52,320 --> 00:03:54,510
inter interact with the binary log

88
00:03:54,510 --> 00:03:56,190
stream and for instance throw it over to

89
00:03:56,190 --> 00:03:58,110
Kafka or whatever you want to do on that

90
00:03:58,110 --> 00:03:59,910
side so there's a lot of great

91
00:03:59,910 --> 00:04:03,990
interfaces there but as they're doing a

92
00:04:03,990 --> 00:04:05,130
whole bunch of work you need to

93
00:04:05,130 --> 00:04:08,580
instrument them as well and if you don't

94
00:04:08,580 --> 00:04:11,490
do that you you saw the example from

95
00:04:11,490 --> 00:04:14,940
Valerie earlier where for example Rox DB

96
00:04:14,940 --> 00:04:17,298
was waiting for a whole bunch of time

97
00:04:17,298 --> 00:04:20,640
waiting for a mutex right he had to go

98
00:04:20,640 --> 00:04:22,830
off and use perf for that performance

99
00:04:22,830 --> 00:04:25,290
schema does track mutexes and it could

100
00:04:25,290 --> 00:04:29,120
have shown that as well so it is

101
00:04:29,120 --> 00:04:31,920
essentially creating your own new black

102
00:04:31,920 --> 00:04:34,590
hole's Road I mean this is the way that

103
00:04:34,590 --> 00:04:36,240
I look at the server you know the little

104
00:04:36,240 --> 00:04:37,410
points of light are essentially

105
00:04:37,410 --> 00:04:40,950
instruments in in performance schema the

106
00:04:40,950 --> 00:04:42,990
the black hole is essentially you know

107
00:04:42,990 --> 00:04:45,270
you you don't know what what is

108
00:04:45,270 --> 00:04:48,150
happening in the server that used to be

109
00:04:48,150 --> 00:04:49,380
a supermassive black hole before

110
00:04:49,380 --> 00:04:51,000
performance schema came along

111
00:04:51,000 --> 00:04:55,080
essentially but yeah you should try and

112
00:04:55,080 --> 00:04:58,250
shrink those as much as possible

113
00:04:58,510 --> 00:05:03,290
so the the interfaces themselves the

114
00:05:03,290 --> 00:05:05,390
main interface is all in this include

115
00:05:05,390 --> 00:05:10,460
MySQL psi directory it has the psi dot H

116
00:05:10,460 --> 00:05:13,790
file which is essentially the ABI within

117
00:05:13,790 --> 00:05:16,010
that one it's a versioned interface but

118
00:05:16,010 --> 00:05:18,980
exposed as a standard interface so you

119
00:05:18,980 --> 00:05:21,290
use the standard interface and it calls

120
00:05:21,290 --> 00:05:23,270
out to the Virgin version interfaces

121
00:05:23,270 --> 00:05:31,700
appropriately and the first thing I'd

122
00:05:31,700 --> 00:05:33,710
say is go off and read this document

123
00:05:33,710 --> 00:05:37,520
we've put a bunch of a bunch of work

124
00:05:37,520 --> 00:05:41,480
into actually doing proper documentation

125
00:05:41,480 --> 00:05:44,750
in doctor-doctor to inform at the

126
00:05:44,750 --> 00:05:48,170
performance schema interface is a great

127
00:05:48,170 --> 00:05:50,570
example of that as well we it's probably

128
00:05:50,570 --> 00:05:53,930
the better documented interface in

129
00:05:53,930 --> 00:05:56,750
doxygen right now so don't have a read

130
00:05:56,750 --> 00:06:01,730
of the that file I mean all that that

131
00:06:01,730 --> 00:06:04,580
section of the manual essentially it

132
00:06:04,580 --> 00:06:07,040
tells you all about the ethos of how

133
00:06:07,040 --> 00:06:09,920
performance schema should work and is

134
00:06:09,920 --> 00:06:14,090
instrumented and how it's architected in

135
00:06:14,090 --> 00:06:16,640
the background and then gives you a

136
00:06:16,640 --> 00:06:19,190
whole bunch of info in how to use these

137
00:06:19,190 --> 00:06:22,160
interfaces so that that's where it

138
00:06:22,160 --> 00:06:25,240
started essentially

139
00:06:26,410 --> 00:06:29,530
the API itself is broken down into these

140
00:06:29,530 --> 00:06:34,840
smaller header files so it the the main

141
00:06:34,840 --> 00:06:36,370
these are pretty much the main ones that

142
00:06:36,370 --> 00:06:38,800
you'll use as in a performance or a

143
00:06:38,800 --> 00:06:43,300
plug-in developer so the first one is

144
00:06:43,300 --> 00:06:46,780
this MySQL thread had a file that was

145
00:06:46,780 --> 00:06:48,700
almost the original one that came along

146
00:06:48,700 --> 00:06:51,480
with 5 5 so in 5 5 we instrumented

147
00:06:51,480 --> 00:06:53,590
mutexes read/write locks

148
00:06:53,590 --> 00:06:57,730
conditions file i/o as well and threats

149
00:06:57,730 --> 00:07:01,390
themselves so if you're doing anything

150
00:07:01,390 --> 00:07:05,620
like creating a thread or locking a

151
00:07:05,620 --> 00:07:08,950
mutex creating a mutex anything you know

152
00:07:08,950 --> 00:07:11,380
with the the standard POSIX interface on

153
00:07:11,380 --> 00:07:14,710
those things in the in this in the

154
00:07:14,710 --> 00:07:18,100
thread had a what we essentially do is

155
00:07:18,100 --> 00:07:21,790
we wrap all of those interfaces that the

156
00:07:21,790 --> 00:07:23,940
standard posit interfaces with our own

157
00:07:23,940 --> 00:07:27,130
instrumentation so we call into

158
00:07:27,130 --> 00:07:28,780
performance schema say that we're going

159
00:07:28,780 --> 00:07:31,170
to start some weight whatever it may be

160
00:07:31,170 --> 00:07:35,350
we do the standard POSIX call and then

161
00:07:35,350 --> 00:07:37,480
we call in afterwards and say hey I

162
00:07:37,480 --> 00:07:39,700
finished essentially that that's all all

163
00:07:39,700 --> 00:07:42,490
that these do so they create a bunch of

164
00:07:42,490 --> 00:07:45,220
macros if performance beamer is not

165
00:07:45,220 --> 00:07:48,730
enabled they basically turn into no ops

166
00:07:48,730 --> 00:07:51,640
and if it is enabled it turns into will

167
00:07:51,640 --> 00:07:53,350
do some instrumentation of this section

168
00:07:53,350 --> 00:07:55,310
of the code

169
00:07:55,310 --> 00:07:58,250
so if you create a thread or you know a

170
00:07:58,250 --> 00:08:00,470
lot of plugins don't create threads but

171
00:08:00,470 --> 00:08:01,639
if you do that then you'll do it through

172
00:08:01,639 --> 00:08:05,360
there with file i/o it's all in this

173
00:08:05,360 --> 00:08:09,680
MySQL file header again same simple

174
00:08:09,680 --> 00:08:13,520
thing so if you're doing a an open of a

175
00:08:13,520 --> 00:08:15,800
file or a write of a file or whatever it

176
00:08:15,800 --> 00:08:18,260
is you'd instead go and look at this

177
00:08:18,260 --> 00:08:21,770
this interface the nice thing about the

178
00:08:21,770 --> 00:08:24,860
file interface is actually it will end

179
00:08:24,860 --> 00:08:27,139
up shrinking your code a little bit as

180
00:08:27,139 --> 00:08:29,000
well and I'll talk about that in a

181
00:08:29,000 --> 00:08:31,940
minute it's one memory is new in five

182
00:08:31,940 --> 00:08:33,849
seven so if you're allocating memory

183
00:08:33,849 --> 00:08:37,250
then use this interface so instead of a

184
00:08:37,250 --> 00:08:40,219
malloc you do a MySQL malloc all of

185
00:08:40,219 --> 00:08:42,080
those kind of things and what we'll do

186
00:08:42,080 --> 00:08:43,700
there is not so much track the time

187
00:08:43,700 --> 00:08:45,620
spent track the overall memory that

188
00:08:45,620 --> 00:08:47,390
you're allocating over over time in your

189
00:08:47,390 --> 00:08:52,690
plugins as well Network IO is standard

190
00:08:52,690 --> 00:08:58,370
stuff so even both socket and TCP not a

191
00:08:58,370 --> 00:09:00,440
lot of plugins tend to do that but you

192
00:09:00,440 --> 00:09:02,649
can't do that in plugins as well

193
00:09:02,649 --> 00:09:04,869
each of these they all call out to the

194
00:09:04,869 --> 00:09:08,160
underlying psi and use the PSI

195
00:09:08,160 --> 00:09:10,779
interfaces through the version debut

196
00:09:10,779 --> 00:09:13,019
coming

197
00:09:15,690 --> 00:09:17,690
so let's dream a little bit we'll

198
00:09:17,690 --> 00:09:19,680
imagine you're going to create an audit

199
00:09:19,680 --> 00:09:22,950
log plugin it's going to block some

200
00:09:22,950 --> 00:09:27,240
stuff to a file track some stats what

201
00:09:27,240 --> 00:09:28,830
you'd basically need to be able to do

202
00:09:28,830 --> 00:09:31,530
with that is open the file right to it

203
00:09:31,530 --> 00:09:34,830
in some way maybe sync it from time to

204
00:09:34,830 --> 00:09:38,070
time you'll also have to have a mutex to

205
00:09:38,070 --> 00:09:39,840
protect the file access because you'll

206
00:09:39,840 --> 00:09:41,190
have multiple threads trying to do their

207
00:09:41,190 --> 00:09:45,390
stuff at one point in time so it's a

208
00:09:45,390 --> 00:09:47,400
fairly simple plugin but just imagine

209
00:09:47,400 --> 00:09:49,110
that kind of plugin and what you need to

210
00:09:49,110 --> 00:09:56,280
do for it so when you come in to start

211
00:09:56,280 --> 00:09:59,130
doing this stuff originally you'll start

212
00:09:59,130 --> 00:10:01,140
off with if you haven't or if you've

213
00:10:01,140 --> 00:10:03,180
written a plug-in not many of you have

214
00:10:03,180 --> 00:10:06,690
if you had written one you'd have

215
00:10:06,690 --> 00:10:11,130
something like a pthread mutex T you'll

216
00:10:11,130 --> 00:10:13,530
go into an in it you're in it the mutex

217
00:10:13,530 --> 00:10:18,020
in some way look what you do with

218
00:10:18,020 --> 00:10:20,100
performance schema to actually push this

219
00:10:20,100 --> 00:10:21,660
stuff in into performance key mirrors

220
00:10:21,660 --> 00:10:24,720
you instead use this MySQL mutex so

221
00:10:24,720 --> 00:10:27,450
essentially most of the POSIX interface

222
00:10:27,450 --> 00:10:30,540
you can replace the P thread with a

223
00:10:30,540 --> 00:10:32,340
MySQL and you'll be done from that

224
00:10:32,340 --> 00:10:36,840
perspective so you pretty much like for

225
00:10:36,840 --> 00:10:39,420
like change there the next line you'll

226
00:10:39,420 --> 00:10:41,730
see there and I hope you guys can read

227
00:10:41,730 --> 00:10:43,059
that bit over there

228
00:10:43,059 --> 00:10:45,219
but then the next line you see there is

229
00:10:45,219 --> 00:10:47,379
actually given it a key so when you look

230
00:10:47,379 --> 00:10:48,759
at performance schema each of the

231
00:10:48,759 --> 00:10:51,249
instrument names they all start with

232
00:10:51,249 --> 00:10:54,399
something they have a category and they

233
00:10:54,399 --> 00:10:56,589
have their end name that's essentially

234
00:10:56,589 --> 00:11:00,519
the key that you create here you create

235
00:11:00,519 --> 00:11:03,969
a an array of those things as well you

236
00:11:03,969 --> 00:11:06,579
can actually do that you can hit them

237
00:11:06,579 --> 00:11:08,649
once with without the array but the

238
00:11:08,649 --> 00:11:10,359
interface allows both an array or a

239
00:11:10,359 --> 00:11:12,519
single one to be passed so if you have

240
00:11:12,519 --> 00:11:14,799
more multiple mutexes you'd add them all

241
00:11:14,799 --> 00:11:19,629
to this array you give the the category

242
00:11:19,629 --> 00:11:23,369
right you see where I'm saying this

243
00:11:23,369 --> 00:11:25,859
category client error that's the

244
00:11:25,859 --> 00:11:28,389
generally you'd name that that your

245
00:11:28,389 --> 00:11:36,099
plug-in name yeah generally you that

246
00:11:36,099 --> 00:11:38,649
would be your plug-in name so we'll call

247
00:11:38,649 --> 00:11:42,699
it client error and then we count how

248
00:11:42,699 --> 00:11:45,609
many values are in that array again you

249
00:11:45,609 --> 00:11:47,019
don't have to do this you can go

250
00:11:47,019 --> 00:11:51,189
straight to the register but if you use

251
00:11:51,189 --> 00:11:52,899
an array count the number of things in

252
00:11:52,899 --> 00:11:55,829
the array pass it to this registration

253
00:11:55,829 --> 00:11:58,119
function and the thing that I should

254
00:11:58,119 --> 00:12:00,489
have done here actually I've missed it

255
00:12:00,489 --> 00:12:02,619
out is you include MySQL thread header

256
00:12:02,619 --> 00:12:05,889
file as well of course and then you go

257
00:12:05,889 --> 00:12:08,529
and register the the mutexes themselves

258
00:12:08,529 --> 00:12:11,049
that's actually calling into performance

259
00:12:11,049 --> 00:12:13,149
schemer and saying hey I've got these

260
00:12:13,149 --> 00:12:15,489
mutexes you need to track them in some

261
00:12:15,489 --> 00:12:17,049
way you need to expose them in the

262
00:12:17,049 --> 00:12:18,639
instruments table to let people turn

263
00:12:18,639 --> 00:12:21,389
them on or off those kind of things so

264
00:12:21,389 --> 00:12:23,649
once you've registered you then go off

265
00:12:23,649 --> 00:12:26,679
and actually init your your mutex like

266
00:12:26,679 --> 00:12:29,019
you would with pea thread but instead

267
00:12:29,019 --> 00:12:32,079
using Maya script well so it's a fairly

268
00:12:32,079 --> 00:12:34,809
simple change right yeah for the most

269
00:12:34,809 --> 00:12:39,309
part you're changing the the prefix of

270
00:12:39,309 --> 00:12:42,399
whatever you're doing and creating some

271
00:12:42,399 --> 00:12:44,589
key to register it within performance

272
00:12:44,589 --> 00:12:46,419
schema and then registering it

273
00:12:46,419 --> 00:12:49,079
essentially

274
00:12:51,000 --> 00:12:54,460
so similarly with files but before you'd

275
00:12:54,460 --> 00:12:57,040
have some file pointer you'd go off and

276
00:12:57,040 --> 00:12:59,230
do an F open standard interface

277
00:12:59,230 --> 00:13:03,190
basically error at the end of it in the

278
00:13:03,190 --> 00:13:05,740
audit class we log and we're going into

279
00:13:05,740 --> 00:13:10,720
the end of the the actual query run but

280
00:13:10,720 --> 00:13:12,580
if you're doing other kinds of plugins

281
00:13:12,580 --> 00:13:14,740
you may consider where you sit in that

282
00:13:14,740 --> 00:13:17,440
and how do you actually instrument the

283
00:13:17,440 --> 00:13:23,350
rest of the instrumentation after that

284
00:13:23,350 --> 00:13:25,800
basically

285
00:13:26,830 --> 00:13:31,089
and that's pretty much it from me any

286
00:13:31,089 --> 00:13:33,930
questions

287
00:13:49,910 --> 00:13:53,220
so the question is what if there's a lot

288
00:13:53,220 --> 00:13:55,080
of files if you have a lot of files that

289
00:13:55,080 --> 00:13:56,250
are created by your plugin should you

290
00:13:56,250 --> 00:13:59,540
instrument them singly or all as well

291
00:13:59,540 --> 00:14:02,610
you shouldn't instrument them all singly

292
00:14:02,610 --> 00:14:05,070
right I mean the point with a lot of

293
00:14:05,070 --> 00:14:08,220
this stuff is to to drill down at that

294
00:14:08,220 --> 00:14:09,930
little point of light right and find out

295
00:14:09,930 --> 00:14:12,750
in the file IO a case who's creating the

296
00:14:12,750 --> 00:14:15,690
most IO if you do it all of one file you

297
00:14:15,690 --> 00:14:17,910
can't do that right you need to track it

298
00:14:17,910 --> 00:14:19,740
down to one file the one thing that you

299
00:14:19,740 --> 00:14:21,720
have to consider is we have these max

300
00:14:21,720 --> 00:14:24,140
counters in performance schema right max

301
00:14:24,140 --> 00:14:27,270
mutexes and max files and those kind of

302
00:14:27,270 --> 00:14:30,470
things we set those based on our

303
00:14:30,470 --> 00:14:34,590
defaults of what we need generally so

304
00:14:34,590 --> 00:14:35,730
one of the things that you might

305
00:14:35,730 --> 00:14:38,060
consider after you've done that is

306
00:14:38,060 --> 00:14:40,140
increasing those max things as the

307
00:14:40,140 --> 00:14:42,540
defaults in the server itself you can

308
00:14:42,540 --> 00:14:43,830
see that they get lost right you have

309
00:14:43,830 --> 00:14:45,600
these performance schema xx lost

310
00:14:45,600 --> 00:14:47,340
counters that are in the status counters

311
00:14:47,340 --> 00:14:50,690
if you have to file one actually losing

312
00:14:50,690 --> 00:14:52,440
instrumentation then you have to

313
00:14:52,440 --> 00:14:55,350
increase it so I mean you consider the

314
00:14:55,350 --> 00:14:57,090
increased buffers and everything that

315
00:14:57,090 --> 00:15:00,030
comes with it but never mush everything

316
00:15:00,030 --> 00:15:00,660
into one

317
00:15:00,660 --> 00:15:02,940
I wouldn't anyway right because it it

318
00:15:02,940 --> 00:15:07,100
hides where time is being spent again

319
00:15:10,990 --> 00:15:13,400
no because bin logs are actually tracked

320
00:15:13,400 --> 00:15:15,290
individually as well right if you look

321
00:15:15,290 --> 00:15:16,700
in the file instances table in

322
00:15:16,700 --> 00:15:18,500
performance schema every single bin lock

323
00:15:18,500 --> 00:15:20,960
is there so we don't mush it all into

324
00:15:20,960 --> 00:15:24,140
one it's it's a pin lock event type

325
00:15:24,140 --> 00:15:26,960
but the instances of those are each

326
00:15:26,960 --> 00:15:34,490
individual bin log ok thanks

327
00:15:34,490 --> 00:15:40,879
[Applause]

