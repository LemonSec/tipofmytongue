1
00:00:00,000 --> 00:00:03,260
Donna came here again

2
00:00:04,550 --> 00:00:06,750
is gonna tell us what's new we could

3
00:00:06,750 --> 00:00:12,510
situates yeah thank you for organizing

4
00:00:12,510 --> 00:00:23,550
it again all guys wonderful yeah so my

5
00:00:23,550 --> 00:00:26,310
name is Dan bogus I'm part of CJ rates

6
00:00:26,310 --> 00:00:31,080
project for who did not hear about us

7
00:00:31,080 --> 00:00:35,309
yet we are located in very Bavaria

8
00:00:35,309 --> 00:00:39,989
Germany over 9 years of experience with

9
00:00:39,989 --> 00:00:44,999
both server-side solutions in wholesale

10
00:00:44,999 --> 00:00:51,179
as well as retail and yeah we educate

11
00:00:51,179 --> 00:00:52,859
ourselves towards responsibly

12
00:00:52,859 --> 00:00:55,679
understanding the real time processing

13
00:00:55,679 --> 00:01:00,329
constraints and what everybody or a lot

14
00:01:00,329 --> 00:01:02,789
of us experienced the seriousness of

15
00:01:02,789 --> 00:01:07,409
flight system outages this is our

16
00:01:07,409 --> 00:01:10,290
background this is why how we came up

17
00:01:10,290 --> 00:01:13,890
towards cg rates we were designing large

18
00:01:13,890 --> 00:01:17,210
VoIP infrastructure and we needed

19
00:01:17,210 --> 00:01:20,210
reliable

20
00:01:23,110 --> 00:01:25,170
you

21
00:01:26,680 --> 00:01:28,740
you

22
00:01:29,960 --> 00:01:32,860
of course

23
00:01:34,090 --> 00:01:39,170
it's a pluggable solution so you can get

24
00:01:39,170 --> 00:01:45,040
it in your infrastructure it's able to

25
00:01:45,040 --> 00:01:47,570
accommodate new components it was

26
00:01:47,570 --> 00:01:49,850
designed to accommodate new components

27
00:01:49,850 --> 00:01:54,710
into IP network for example add a new

28
00:01:54,710 --> 00:01:56,930
voice switch in your network an SMS

29
00:01:56,930 --> 00:02:00,530
service and put siege rates to help you

30
00:02:00,530 --> 00:02:05,300
billing that it's what what we focused

31
00:02:05,300 --> 00:02:07,490
on a lot it's non intrusive into

32
00:02:07,490 --> 00:02:10,130
existing setups so we should not

33
00:02:10,130 --> 00:02:13,400
participate into influencing your your

34
00:02:13,400 --> 00:02:16,430
switch or your switch crashes we just

35
00:02:16,430 --> 00:02:18,620
share information with your switch and

36
00:02:18,620 --> 00:02:21,410
it's the responsibility of the switch

37
00:02:21,410 --> 00:02:23,900
administrator to take decisions based

38
00:02:23,900 --> 00:02:26,510
based on that so the power we transfer

39
00:02:26,510 --> 00:02:29,510
it to you we don't ask you to route your

40
00:02:29,510 --> 00:02:33,290
traffic towards specific like Mamet

41
00:02:33,290 --> 00:02:35,780
environment or or something it's it's

42
00:02:35,780 --> 00:02:41,180
all pluggable it's fully open source the

43
00:02:41,180 --> 00:02:43,310
full sources you can find on on github

44
00:02:43,310 --> 00:02:46,430
fork it modify it make it better we are

45
00:02:46,430 --> 00:02:50,780
happy to do that no add-ons so we don't

46
00:02:50,780 --> 00:02:54,769
put our business model towards selling

47
00:02:54,769 --> 00:02:58,040
add-ons in in separate private we don't

48
00:02:58,040 --> 00:03:01,489
do that and there is a community behind

49
00:03:01,489 --> 00:03:05,870
ever-growing and you can get a hold of

50
00:03:05,870 --> 00:03:08,810
it over various channels we are

51
00:03:08,810 --> 00:03:11,390
performance oriented as a real-time

52
00:03:11,390 --> 00:03:14,540
solution we needed to be able to move a

53
00:03:14,540 --> 00:03:18,739
lot of traffic we we have focused a lot

54
00:03:18,739 --> 00:03:20,959
on building an advanced caching system

55
00:03:20,959 --> 00:03:24,410
that's actually the secret behind our

56
00:03:24,410 --> 00:03:27,890
performance this caching system it's

57
00:03:27,890 --> 00:03:32,060
it's an sectional it has a lot of this

58
00:03:32,060 --> 00:03:36,980
this Ally LRU the least used record it

59
00:03:36,980 --> 00:03:39,769
will be kicked out and hottest

60
00:03:39,769 --> 00:03:42,200
information will be always keep kept in

61
00:03:42,200 --> 00:03:44,120
memory

62
00:03:44,120 --> 00:03:46,310
we everything what we do it's a

63
00:03:46,310 --> 00:03:48,560
synchronous so it's towards a

64
00:03:48,560 --> 00:03:51,439
non-blocking stuff and performance we

65
00:03:51,439 --> 00:03:53,420
use micro threads for that so we are not

66
00:03:53,420 --> 00:03:56,799
limited by the system threads and system

67
00:03:56,799 --> 00:04:00,159
thread limitations you can do

68
00:04:00,159 --> 00:04:03,310
theoretically millions of micro threads

69
00:04:03,310 --> 00:04:06,230
test-driven development as a rating

70
00:04:06,230 --> 00:04:08,359
engine this was the the top priority for

71
00:04:08,359 --> 00:04:12,409
us which we should be reliable so as as

72
00:04:12,409 --> 00:04:15,530
I speak we have about 1600 tests part of

73
00:04:15,530 --> 00:04:21,048
our test builds so this works as our

74
00:04:21,048 --> 00:04:24,650
guard we are very we feel more secure by

75
00:04:24,650 --> 00:04:28,699
by doing this we have a modular

76
00:04:28,699 --> 00:04:32,990
architecture we we did it cloud ready we

77
00:04:32,990 --> 00:04:37,340
have micro services you can as I told

78
00:04:37,340 --> 00:04:38,840
you we have various components which you

79
00:04:38,840 --> 00:04:40,669
can start stop make them talk to each

80
00:04:40,669 --> 00:04:43,970
other on the same server or spread over

81
00:04:43,970 --> 00:04:48,710
different even locations they all talk

82
00:04:48,710 --> 00:04:51,560
to each other between between themselves

83
00:04:51,560 --> 00:04:55,099
over our pcs this can be internal within

84
00:04:55,099 --> 00:04:58,940
process or between processes it's easy

85
00:04:58,940 --> 00:05:01,580
to enhance it by rewriting specific

86
00:05:01,580 --> 00:05:03,440
component you are not happy about our

87
00:05:03,440 --> 00:05:05,419
implementation you take for example our

88
00:05:05,419 --> 00:05:07,669
I don't know CDR server out you put your

89
00:05:07,669 --> 00:05:10,250
own and just keep our rating part and

90
00:05:10,250 --> 00:05:15,650
and so on feature each we we do various

91
00:05:15,650 --> 00:05:18,130
things with

92
00:05:22,090 --> 00:05:25,960
a buzzword at some point multi-tenancy

93
00:05:25,960 --> 00:05:30,280
from day one we are rating engine again

94
00:05:30,280 --> 00:05:33,160
the original part of the system with the

95
00:05:33,160 --> 00:05:35,710
Rive charging and a number rating it

96
00:05:35,710 --> 00:05:37,750
starts being popular here around

97
00:05:37,750 --> 00:05:42,840
wholesale carriers to do a number rating

98
00:05:42,840 --> 00:05:46,690
account balances money management with

99
00:05:46,690 --> 00:05:50,320
bundles we do very complicated setups

100
00:05:50,320 --> 00:05:53,410
with bundles combining data SMS is this

101
00:05:53,410 --> 00:06:00,010
kind of playground of MVNO providers we

102
00:06:00,010 --> 00:06:02,860
do session management or event charging

103
00:06:02,860 --> 00:06:06,010
with balance reservation refunds again

104
00:06:06,010 --> 00:06:09,010
complicated things imagine that you need

105
00:06:09,010 --> 00:06:12,610
to refund out of bonus and so on so it

106
00:06:12,610 --> 00:06:15,190
can in an also in real time it can

107
00:06:15,190 --> 00:06:19,510
become quite some fun to work with see

108
00:06:19,510 --> 00:06:21,490
they are logging which i will talk a bit

109
00:06:21,490 --> 00:06:23,680
about today with support also for

110
00:06:23,680 --> 00:06:26,950
interim records we have fraud detection

111
00:06:26,950 --> 00:06:29,950
with automatic mitigation so you can

112
00:06:29,950 --> 00:06:32,620
leave the system while you flip to even

113
00:06:32,620 --> 00:06:34,060
shutdown accounts for you if something

114
00:06:34,060 --> 00:06:37,000
does not look right you can do various

115
00:06:37,000 --> 00:06:39,760
escalation procedures and so on if fraud

116
00:06:39,760 --> 00:06:46,990
is detected LCR module with QoS so it

117
00:06:46,990 --> 00:06:49,570
can take decision based on the the

118
00:06:49,570 --> 00:06:53,500
routes quality of your suppliers it can

119
00:06:53,500 --> 00:06:55,660
do also LCR over bundles which is not

120
00:06:55,660 --> 00:06:59,229
very common but useful you can get like

121
00:06:59,229 --> 00:07:01,060
thousand minutes which can be used for

122
00:07:01,060 --> 00:07:03,880
free in the weekend from a supplier of

123
00:07:03,880 --> 00:07:07,599
yours this this LCR is able to consider

124
00:07:07,599 --> 00:07:10,180
that cost statistics with pattern

125
00:07:10,180 --> 00:07:12,520
monitoring and stuff like that calculate

126
00:07:12,520 --> 00:07:15,970
ASR ACD in real time and also react on

127
00:07:15,970 --> 00:07:19,380
it based on pattern diameter server

128
00:07:19,380 --> 00:07:25,530
useful again in MVNO scenarios in 3G 4G

129
00:07:25,530 --> 00:07:30,280
XG then resource allocation controller

130
00:07:30,280 --> 00:07:32,710
if you want to give your customers a

131
00:07:32,710 --> 00:07:35,229
number of channels or resources is

132
00:07:35,229 --> 00:07:35,980
possible to

133
00:07:35,980 --> 00:07:39,490
rates built-in high availability so we

134
00:07:39,490 --> 00:07:44,650
can have maintain active active various

135
00:07:44,650 --> 00:07:47,770
components active passive and so on

136
00:07:47,770 --> 00:07:49,900
there are a lot of combinations you can

137
00:07:49,900 --> 00:07:53,290
do inside and we educate ourselves to be

138
00:07:53,290 --> 00:07:59,260
agile in developing new features a bit

139
00:07:59,260 --> 00:08:03,460
about history we started around 2012 and

140
00:08:03,460 --> 00:08:05,890
ever since we will keep pushing code

141
00:08:05,890 --> 00:08:08,650
this code would represent features for

142
00:08:08,650 --> 00:08:10,780
us because we are pretty conservative in

143
00:08:10,780 --> 00:08:13,510
adding a lot of code so our code we try

144
00:08:13,510 --> 00:08:15,730
to keep our code based as small as

145
00:08:15,730 --> 00:08:18,910
possible but it it was growing out of

146
00:08:18,910 --> 00:08:21,270
unplanned feature in the drug

147
00:08:21,270 --> 00:08:23,260
introduction implementation

148
00:08:23,260 --> 00:08:27,190
most of our actually all of our code is

149
00:08:27,190 --> 00:08:30,400
written in go we were quite pioneers

150
00:08:30,400 --> 00:08:33,490
pioneers in go in 2012 when we started

151
00:08:33,490 --> 00:08:34,150
with cigeratte

152
00:08:34,150 --> 00:08:37,390
go is was in in weekly release so it was

153
00:08:37,390 --> 00:08:40,049
quite interesting to grow CG rates and

154
00:08:40,049 --> 00:08:44,980
also go so we grow together I think and

155
00:08:44,980 --> 00:08:50,530
yeah we provide our own testing tools so

156
00:08:50,530 --> 00:08:53,050
you can you you can estimate how fast

157
00:08:53,050 --> 00:08:55,840
your system is based on your own data so

158
00:08:55,840 --> 00:08:58,600
you see a CTR tester within the same

159
00:08:58,600 --> 00:09:01,990
process we have estimated around 82,000

160
00:09:01,990 --> 00:09:04,540
requests per second in calculations and

161
00:09:04,540 --> 00:09:08,710
outside from a different programming

162
00:09:08,710 --> 00:09:10,450
language from Python for example via

163
00:09:10,450 --> 00:09:13,540
api's we got almost 5000 requests per

164
00:09:13,540 --> 00:09:21,250
second CDR server this is what the

165
00:09:21,250 --> 00:09:24,760
component responsible about CDRs it's

166
00:09:24,760 --> 00:09:27,370
accessible via a number of different API

167
00:09:27,370 --> 00:09:31,020
so you can push CDRs into saturates via

168
00:09:31,020 --> 00:09:36,940
JSON HTTP HTTP rest go wherever there

169
00:09:36,940 --> 00:09:39,040
are a number of API is already available

170
00:09:39,040 --> 00:09:43,720
to you you can also push over off line

171
00:09:43,720 --> 00:09:46,060
CD or CD are import so if you get the

172
00:09:46,060 --> 00:09:48,730
CDR from your suppliers over CSV

173
00:09:48,730 --> 00:09:52,630
all fixed with value all these are

174
00:09:52,630 --> 00:09:58,029
supported it's automatic so I notify

175
00:09:58,029 --> 00:10:00,399
will will tell us when you get the CDR

176
00:10:00,399 --> 00:10:02,410
into the folder and we automatically

177
00:10:02,410 --> 00:10:04,540
pick up so it's close to real time from

178
00:10:04,540 --> 00:10:07,990
the moment you you push it in you can we

179
00:10:07,990 --> 00:10:10,019
can monitor various folders there and

180
00:10:10,019 --> 00:10:14,260
have various import templates and logic

181
00:10:14,260 --> 00:10:16,930
for each folder so you get a lot of

182
00:10:16,930 --> 00:10:19,120
functionality also there what's

183
00:10:19,120 --> 00:10:21,220
important for the open source world we

184
00:10:21,220 --> 00:10:27,240
have plugins for a lot of open source

185
00:10:27,240 --> 00:10:30,220
solutions so we have four asterisks for

186
00:10:30,220 --> 00:10:34,029
example via a RI we have free switch via

187
00:10:34,029 --> 00:10:38,079
F sock then we have camellia via Ava P

188
00:10:38,079 --> 00:10:40,870
and we also have open seeds via the new

189
00:10:40,870 --> 00:10:44,670
module which opens its core developers

190
00:10:44,670 --> 00:10:49,240
wrote it mode CG rates and of course

191
00:10:49,240 --> 00:10:53,860
regarding the the required thing by

192
00:10:53,860 --> 00:10:58,769
mobile operator we have diameter support

193
00:10:58,769 --> 00:11:02,410
we have derived charging support these

194
00:11:02,410 --> 00:11:05,709
things are session emulation so if you

195
00:11:05,709 --> 00:11:08,050
get a lot of distributors and resellers

196
00:11:08,050 --> 00:11:11,199
in your network then you can use the

197
00:11:11,199 --> 00:11:13,360
rive charging you get one CDR and fork

198
00:11:13,360 --> 00:11:15,940
it into unlimited so in this way you can

199
00:11:15,940 --> 00:11:19,180
get reseller or distributors chaining or

200
00:11:19,180 --> 00:11:22,180
inbound versus outbound traffic charging

201
00:11:22,180 --> 00:11:23,470
so you know how much you need to charge

202
00:11:23,470 --> 00:11:26,260
your customer and how much your supplier

203
00:11:26,260 --> 00:11:27,940
will charge you

204
00:11:27,940 --> 00:11:31,829
we have real-time Cydia replication and

205
00:11:31,829 --> 00:11:35,760
CDR exporter for seniors which we store

206
00:11:35,760 --> 00:11:41,110
and the there is another useful

207
00:11:41,110 --> 00:11:44,740
components in regards to CD ours the CDR

208
00:11:44,740 --> 00:11:47,290
stat which is calculating stats in

209
00:11:47,290 --> 00:11:50,740
real-time for you so you know as I told

210
00:11:50,740 --> 00:11:56,170
ASR a CD PDD and/or average call cost

211
00:11:56,170 --> 00:11:58,959
for the the cue the CDs which are in our

212
00:11:58,959 --> 00:12:02,710
dues these queues are very performant

213
00:12:02,710 --> 00:12:06,279
in memory so you can get quite heavy

214
00:12:06,279 --> 00:12:09,820
traffic thrown on it and a lot of

215
00:12:09,820 --> 00:12:13,210
configuration parameters again and also

216
00:12:13,210 --> 00:12:15,399
you can it can be also a part of fraud

217
00:12:15,399 --> 00:12:17,529
detection so you monitor the stats of

218
00:12:17,529 --> 00:12:21,279
your customers just a quick look on the

219
00:12:21,279 --> 00:12:26,170
on how you can process the CDRs via

220
00:12:26,170 --> 00:12:30,610
various in interfaces we pass it over

221
00:12:30,610 --> 00:12:34,089
through internal components we can store

222
00:12:34,089 --> 00:12:37,330
it or not on our side and that's that

223
00:12:37,330 --> 00:12:40,390
the part I wanted to tell about

224
00:12:40,390 --> 00:12:43,420
performance this EDR replicator can pick

225
00:12:43,420 --> 00:12:46,000
the CDR from the moment we are done with

226
00:12:46,000 --> 00:12:48,430
rating which means few milliseconds

227
00:12:48,430 --> 00:12:50,980
after you have sent us the CDR and it

228
00:12:50,980 --> 00:12:53,020
can send it to you via a number of

229
00:12:53,020 --> 00:12:55,990
transports for example it can send via

230
00:12:55,990 --> 00:13:00,100
HTTP Jason or HTTP rest to you back and

231
00:13:00,100 --> 00:13:04,690
or put it in a in a queue the new module

232
00:13:04,690 --> 00:13:07,500
which would have just implemented so

233
00:13:07,500 --> 00:13:10,000
it's very useful because you can get

234
00:13:10,000 --> 00:13:13,000
your own database schema in this way you

235
00:13:13,000 --> 00:13:15,130
don't need to query anymore CG rates and

236
00:13:15,130 --> 00:13:17,589
you stay fast because on all this pad

237
00:13:17,589 --> 00:13:20,050
there is almost no disk involved so that

238
00:13:20,050 --> 00:13:23,290
that means very fast and from the moment

239
00:13:23,290 --> 00:13:26,110
you you send it to CG rate to the moment

240
00:13:26,110 --> 00:13:28,150
you get it already rated on your side

241
00:13:28,150 --> 00:13:30,820
its few milliseconds so you get seniors

242
00:13:30,820 --> 00:13:33,550
rated like from the cloud but with your

243
00:13:33,550 --> 00:13:38,560
own instance of rating so I think I did

244
00:13:38,560 --> 00:13:56,620
it so I have time for one question what

245
00:13:56,620 --> 00:13:59,610
do you mean by time usage

246
00:14:00,560 --> 00:14:09,290
after different price yeah we do that

247
00:14:09,290 --> 00:14:12,380
true to using different account bundles

248
00:14:12,380 --> 00:14:14,630
or balances so you give one thousand

249
00:14:14,630 --> 00:14:17,180
with a price and after one thousand it's

250
00:14:17,180 --> 00:14:19,399
gone automatically you consume out of

251
00:14:19,399 --> 00:14:24,740
another one with different price yes

252
00:14:24,740 --> 00:14:27,010
please

253
00:14:32,029 --> 00:14:44,389
what do you mean how do we keep our

254
00:14:44,389 --> 00:14:46,970
balances you mean in in float we keep

255
00:14:46,970 --> 00:14:50,110
but we round after each operation on it

256
00:14:50,110 --> 00:14:52,880
because we had some some issues with

257
00:14:52,880 --> 00:14:56,240
flow type but we came out that you know

258
00:14:56,240 --> 00:14:58,670
in go there is no stable solution yet

259
00:14:58,670 --> 00:15:01,550
for four decimals like in Python is so

260
00:15:01,550 --> 00:15:04,699
we work with float but every after every

261
00:15:04,699 --> 00:15:08,360
operations we are rounding it we allow

262
00:15:08,360 --> 00:15:10,910
we apply rounding on it so in the end we

263
00:15:10,910 --> 00:15:14,000
we get like others are using big numbers

264
00:15:14,000 --> 00:15:16,040
for it because sort of is the same

265
00:15:16,040 --> 00:15:18,199
solution but in a different way

266
00:15:18,199 --> 00:15:30,079
implemented it in in in the next couple

267
00:15:30,079 --> 00:15:33,199
of months yes we are actively it's it's

268
00:15:33,199 --> 00:15:34,670
an active project for us

269
00:15:34,670 --> 00:15:36,980
now after diameter it will be right

270
00:15:36,980 --> 00:15:39,490
radius

271
00:15:40,449 --> 00:15:44,680
thanks a lot man thank you very much

