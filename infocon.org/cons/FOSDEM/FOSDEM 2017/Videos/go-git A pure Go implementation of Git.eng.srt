1
00:00:21,440 --> 00:00:25,710
what is that abuse it is building the

2
00:00:25,710 --> 00:00:27,480
first official intelligence that

3
00:00:27,480 --> 00:00:30,420
understands cold and the first step to

4
00:00:30,420 --> 00:00:33,260
this is analyzing all online open source

5
00:00:33,260 --> 00:00:36,570
we are currently analyzing 70 million

6
00:00:36,570 --> 00:00:39,900
repositories that's every repository on

7
00:00:39,900 --> 00:00:42,570
github that is not a fork and we are now

8
00:00:42,570 --> 00:00:45,809
creating a new pipeline to analyze for

9
00:00:45,809 --> 00:00:48,510
than 60 million rip stories so that

10
00:00:48,510 --> 00:00:51,830
includes are all github Forks but also

11
00:00:51,830 --> 00:00:55,769
get report studies hosted everywhere

12
00:00:55,769 --> 00:01:00,900
else so this is a posture this requires

13
00:01:00,900 --> 00:01:05,479
our intensive use of get so our first

14
00:01:05,479 --> 00:01:08,909
progress to see nagi implementation the

15
00:01:08,909 --> 00:01:12,540
useful choices are the command line

16
00:01:12,540 --> 00:01:15,900
interface or livid - which is a library

17
00:01:15,900 --> 00:01:19,189
that has bindings or many languages and

18
00:01:19,189 --> 00:01:23,490
J get which also very nice library in

19
00:01:23,490 --> 00:01:28,380
Java by Google but the language of

20
00:01:28,380 --> 00:01:32,250
choice has shortest go so none of these

21
00:01:32,250 --> 00:01:33,570
as they are

22
00:01:33,570 --> 00:01:38,310
feed our stack not need so when we

23
00:01:38,310 --> 00:01:41,520
update our shifting go where get to all

24
00:01:41,520 --> 00:01:44,880
which are the shell bindings for leap

25
00:01:44,880 --> 00:01:50,190
get to which are really complete but

26
00:01:50,190 --> 00:01:52,740
they require signal which is not that

27
00:01:52,740 --> 00:01:57,120
nice fast and it's not portable for us

28
00:01:57,120 --> 00:02:00,480
to extend it in the way we needed from

29
00:02:00,480 --> 00:02:04,409
go so that was kind of discouraged there

30
00:02:04,409 --> 00:02:06,690
is also some nice from online interface

31
00:02:06,690 --> 00:02:10,500
wrappers they work really fast because

32
00:02:10,500 --> 00:02:13,400
well we just likes a good get the

33
00:02:13,400 --> 00:02:16,140
official get implement English also is

34
00:02:16,140 --> 00:02:19,530
really fast but they are very inflexible

35
00:02:19,530 --> 00:02:22,049
we can extend the underlies greedy

36
00:02:22,049 --> 00:02:24,569
behavior and there are a lot of Peter

37
00:02:24,569 --> 00:02:27,959
were a lot of Pingo implementations most

38
00:02:27,959 --> 00:02:31,860
of them are abandoned just are the very

39
00:02:31,860 --> 00:02:34,319
earliest states because I guess that

40
00:02:34,319 --> 00:02:34,920
people

41
00:02:34,920 --> 00:02:38,010
a little pole star target implementation

42
00:02:38,010 --> 00:02:40,530
but then figures out it's actually much

43
00:02:40,530 --> 00:02:44,120
bigger than support he thinks so

44
00:02:44,120 --> 00:02:46,440
portage was doing it from class and

45
00:02:46,440 --> 00:02:50,910
that's what we all get was bored so we

46
00:02:50,910 --> 00:02:54,150
wrote the full implementation in people

47
00:02:54,150 --> 00:02:57,690
with idiomatic API for both high and low

48
00:02:57,690 --> 00:03:01,140
level in Gator nology that's known as

49
00:03:01,140 --> 00:03:05,730
plumbing porcelain moment and we have a

50
00:03:05,730 --> 00:03:09,420
focus on extensibility I will talk more

51
00:03:09,420 --> 00:03:11,670
about that later so again to be

52
00:03:11,670 --> 00:03:14,010
comparable feature applies we live get

53
00:03:14,010 --> 00:03:16,500
to and they get we are in not there but

54
00:03:16,500 --> 00:03:18,540
we are working towards towards it

55
00:03:18,540 --> 00:03:20,340
we are ready put two years of

56
00:03:20,340 --> 00:03:23,400
development into it so we are rerun

57
00:03:23,400 --> 00:03:31,620
truck so why do you want to extend why

58
00:03:31,620 --> 00:03:33,420
do we focus on extensibility one of the

59
00:03:33,420 --> 00:03:35,459
first things that we needed to extend

60
00:03:35,459 --> 00:03:38,700
this storage back-end storage balancing

61
00:03:38,700 --> 00:03:42,180
go get define how get objects reference

62
00:03:42,180 --> 00:03:46,019
configuration and so on our start so we

63
00:03:46,019 --> 00:03:47,760
provide three implementations with what

64
00:03:47,760 --> 00:03:51,180
we did itself one just in memory starts

65
00:03:51,180 --> 00:03:52,859
backing that you can use for testing or

66
00:03:52,859 --> 00:03:55,590
also for a processing reports that is

67
00:03:55,590 --> 00:03:59,190
really fast if they fit in memory and

68
00:03:59,190 --> 00:04:01,799
then we referred system implementation

69
00:04:01,799 --> 00:04:04,980
that uses a builder files in abstraction

70
00:04:04,980 --> 00:04:08,400
but the open source is you gotta get

71
00:04:08,400 --> 00:04:12,750
this go Billy but you plug around and in

72
00:04:12,750 --> 00:04:14,810
fact we have implementations that use

73
00:04:14,810 --> 00:04:18,839
databases as Cassandra as a back-end we

74
00:04:18,839 --> 00:04:21,390
have in tradition that our storage back

75
00:04:21,390 --> 00:04:24,930
in wrappers for doing gutsy rather a lot

76
00:04:24,930 --> 00:04:28,280
of facilities to this another

77
00:04:28,280 --> 00:04:30,330
interesting extension bodies our

78
00:04:30,330 --> 00:04:33,060
workpiece as built on file systems so

79
00:04:33,060 --> 00:04:37,020
were not limited to take out a critical

80
00:04:37,020 --> 00:04:39,960
to commit into the into the disk you can

81
00:04:39,960 --> 00:04:44,630
check out in a memory or can't erase or

82
00:04:44,630 --> 00:04:46,830
anywhere that you implement original

83
00:04:46,830 --> 00:04:47,800
files come in the face

84
00:04:47,800 --> 00:04:50,680
and we can also plot transports so we

85
00:04:50,680 --> 00:04:55,150
implement all standard get transport ssh

86
00:04:55,150 --> 00:04:57,729
HTTP and one but we cannot apply your

87
00:04:57,729 --> 00:05:01,810
own we actually use it for performing

88
00:05:01,810 --> 00:05:07,030
additions in some cases so let's go

89
00:05:07,030 --> 00:05:13,030
through our use case the first building

90
00:05:13,030 --> 00:05:15,539
block for analyzing all the repositories

91
00:05:15,539 --> 00:05:18,940
online is having a local copy of a

92
00:05:18,940 --> 00:05:21,220
blooper story in our clutter so we can

93
00:05:21,220 --> 00:05:25,509
proceed faster and on-demand so we are

94
00:05:25,509 --> 00:05:28,509
fetching repository from github

95
00:05:28,509 --> 00:05:31,840
bitbucket savannah self host report or

96
00:05:31,840 --> 00:05:35,409
italic role from google we are trying to

97
00:05:35,409 --> 00:05:40,240
be very extensive here but this leads to

98
00:05:40,240 --> 00:05:42,219
the first problem which is fortune

99
00:05:42,219 --> 00:05:45,550
London see the vast majority of

100
00:05:45,550 --> 00:05:47,680
repositories are that you find online

101
00:05:47,680 --> 00:05:52,599
our Forks in fact in github there are

102
00:05:52,599 --> 00:05:54,849
like 70 million reports Tories are like

103
00:05:54,849 --> 00:06:00,340
60 million if you add fort so if we

104
00:06:00,340 --> 00:06:03,190
story master branch on the master branch

105
00:06:03,190 --> 00:06:06,430
of all we have known Forks we get around

106
00:06:06,430 --> 00:06:09,580
72 rights it will not fork to that we

107
00:06:09,580 --> 00:06:12,699
had 240 terabytes that's only the master

108
00:06:12,699 --> 00:06:16,210
branch this is a lower bound but most

109
00:06:16,210 --> 00:06:18,840
though of the data is just president

110
00:06:18,840 --> 00:06:21,699
most folks are just copy of the original

111
00:06:21,699 --> 00:06:24,310
report sorry last a couple of comments

112
00:06:24,310 --> 00:06:30,370
so if blue represents Forks we don't

113
00:06:30,370 --> 00:06:33,520
really want to store all of those copies

114
00:06:33,520 --> 00:06:36,250
that are 90% when the data they just

115
00:06:36,250 --> 00:06:38,529
take too much space in our cluster for

116
00:06:38,529 --> 00:06:42,669
nothing so we'll read by looking at

117
00:06:42,669 --> 00:06:46,449
Forks just as a namespace set of

118
00:06:46,449 --> 00:06:48,270
preferences of the original repository

119
00:06:48,270 --> 00:06:52,090
so for us we can see the forecast it's

120
00:06:52,090 --> 00:06:53,500
just a similar story not a poor study

121
00:06:53,500 --> 00:06:56,409
but it just has some branches that are

122
00:06:56,409 --> 00:06:59,380
pointing to shower 2000 and part of it

123
00:06:59,380 --> 00:06:59,960
is

124
00:06:59,960 --> 00:07:02,660
so we tour all the forks of same report

125
00:07:02,660 --> 00:07:04,370
study together in the same block

126
00:07:04,370 --> 00:07:08,330
reporter in our stores so easier objects

127
00:07:08,330 --> 00:07:12,170
if a commit or files present in in

128
00:07:12,170 --> 00:07:13,760
multiple forks of the same trip story

129
00:07:13,760 --> 00:07:16,460
they'd commit that file is just not

130
00:07:16,460 --> 00:07:20,600
tortoise Whisperer fix it reference or

131
00:07:20,600 --> 00:07:22,430
branch with the ID of the Ripper study

132
00:07:22,430 --> 00:07:24,140
that was Fred from so we will still

133
00:07:24,140 --> 00:07:26,540
distinguish between them let's see an

134
00:07:26,540 --> 00:07:29,570
example let's say that this is the

135
00:07:29,570 --> 00:07:31,610
history of the Gogi report story the

136
00:07:31,610 --> 00:07:35,150
real one is actually lunar but we have

137
00:07:35,150 --> 00:07:38,690
three comments here and we have a couple

138
00:07:38,690 --> 00:07:42,830
of forks and they just sir most of their

139
00:07:42,830 --> 00:07:44,360
history with their regional diversity

140
00:07:44,360 --> 00:07:47,180
and they just add account probably for

141
00:07:47,180 --> 00:07:50,180
doing a pull request so if we store them

142
00:07:50,180 --> 00:07:52,700
together just looks like this single

143
00:07:52,700 --> 00:07:55,970
repository three branches and we prefix

144
00:07:55,970 --> 00:07:58,880
each branch with the original repository

145
00:07:58,880 --> 00:08:02,420
show which still distinguish but they

146
00:08:02,420 --> 00:08:04,400
still a problem so how do say that the

147
00:08:04,400 --> 00:08:06,560
repository we felt is a fork from

148
00:08:06,560 --> 00:08:10,250
another we could rely on name but their

149
00:08:10,250 --> 00:08:12,500
works that have different nature did not

150
00:08:12,500 --> 00:08:15,320
report stories and there are reports

151
00:08:15,320 --> 00:08:16,940
that had the same name as our query in

152
00:08:16,940 --> 00:08:19,220
the independent for some like their five

153
00:08:19,220 --> 00:08:21,280
River stories that are called go get

154
00:08:21,280 --> 00:08:23,510
what and they are completely unrelated

155
00:08:23,510 --> 00:08:26,300
implementations we could lie also

156
00:08:26,300 --> 00:08:30,800
negatory pie but that works me on github

157
00:08:30,800 --> 00:08:33,080
of course and even on github it only

158
00:08:33,080 --> 00:08:34,849
works if you created the fork

159
00:08:34,849 --> 00:08:38,330
using the github web interface so that

160
00:08:38,330 --> 00:08:41,870
won't fly for us what we do is take

161
00:08:41,870 --> 00:08:45,490
advantage of the fact that a work

162
00:08:45,490 --> 00:08:47,960
started the same set of initial permits

163
00:08:47,960 --> 00:08:50,660
asked the original repository so it may

164
00:08:50,660 --> 00:08:52,850
have longer or sort of history it may

165
00:08:52,850 --> 00:08:55,460
Harbor branch's but if you were to the

166
00:08:55,460 --> 00:08:57,080
first commit that was not a repository

167
00:08:57,080 --> 00:08:59,600
the hassle that commit actually the same

168
00:08:59,600 --> 00:09:04,460
for all Forks so in our local stats we

169
00:09:04,460 --> 00:09:08,240
don't store a repository per remote name

170
00:09:08,240 --> 00:09:10,070
of the repository but we create a

171
00:09:10,070 --> 00:09:12,430
repository for its fast

172
00:09:12,430 --> 00:09:15,100
of mesial committed we saw and then we

173
00:09:15,100 --> 00:09:18,010
fetch a repository with we push it grant

174
00:09:18,010 --> 00:09:20,860
to a local repository that corresponds

175
00:09:20,860 --> 00:09:24,820
to a fash of the initial commit so this

176
00:09:24,820 --> 00:09:28,030
what this works nicely across all get

177
00:09:28,030 --> 00:09:30,310
providers because just realize gate and

178
00:09:30,310 --> 00:09:33,670
on are not in any realistic or any

179
00:09:33,670 --> 00:09:41,320
external API so this actually how our

180
00:09:41,320 --> 00:09:43,630
local store that looks like within stuff

181
00:09:43,630 --> 00:09:46,780
works we just store their incremental

182
00:09:46,780 --> 00:09:51,070
parts and we merge together see this

183
00:09:51,070 --> 00:09:54,880
with our force from the upper story will

184
00:09:54,880 --> 00:09:57,700
yet store one of them containing the

185
00:09:57,700 --> 00:10:04,660
information of Oregon so them will use

186
00:10:04,660 --> 00:10:09,940
the request or at minimum but still have

187
00:10:09,940 --> 00:10:15,730
access to all information the net

188
00:10:15,730 --> 00:10:18,010
problem for building this this mirror on

189
00:10:18,010 --> 00:10:21,340
our I and sing it for analyzing is that

190
00:10:21,340 --> 00:10:25,270
is where do we spread so we need a

191
00:10:25,270 --> 00:10:28,240
storage that is oriented to bus

192
00:10:28,240 --> 00:10:31,200
repository analysis so when we open our

193
00:10:31,200 --> 00:10:33,970
story we open in for analyzing the whole

194
00:10:33,970 --> 00:10:36,340
study in our these cases it's unlikely

195
00:10:36,340 --> 00:10:38,260
that we that we want to open a repressed

196
00:10:38,260 --> 00:10:41,980
or it with just a commit so with

197
00:10:41,980 --> 00:10:44,830
distributed file system for this we have

198
00:10:44,830 --> 00:10:47,920
used HDFS and will clutter that the good

199
00:10:47,920 --> 00:10:49,960
thing of these file systems is that they

200
00:10:49,960 --> 00:10:54,100
have really high dropped they are the

201
00:10:54,100 --> 00:10:56,200
controverted they have highlight see an

202
00:10:56,200 --> 00:10:59,200
MIT report study is composed of many

203
00:10:59,200 --> 00:11:01,720
files if you look into the dot lead the

204
00:11:01,720 --> 00:11:04,630
rectory and of your repository you will

205
00:11:04,630 --> 00:11:07,960
see one or more files you will see index

206
00:11:07,960 --> 00:11:11,290
files reference files you will see our

207
00:11:11,290 --> 00:11:13,990
comfy file so we want to analyze our

208
00:11:13,990 --> 00:11:16,690
personally we need all of that but in

209
00:11:16,690 --> 00:11:21,280
some cases this the time that we spend

210
00:11:21,280 --> 00:11:23,890
the dependency of accessing all of these

211
00:11:23,890 --> 00:11:25,620
files adds up

212
00:11:25,620 --> 00:11:27,180
some point for the summer of studies we

213
00:11:27,180 --> 00:11:29,970
spend more time just waiting for input

214
00:11:29,970 --> 00:11:32,310
operations to start rather than rather

215
00:11:32,310 --> 00:11:35,700
than in the actual data transfer and

216
00:11:35,700 --> 00:11:38,100
this gets worse every time we are the

217
00:11:38,100 --> 00:11:39,150
ADA repositories

218
00:11:39,150 --> 00:11:41,580
because every time we pull we get our

219
00:11:41,580 --> 00:11:45,750
files so this is performance scale that

220
00:11:45,750 --> 00:11:51,270
just gets worse over time so how do we

221
00:11:51,270 --> 00:11:54,060
solve a blog with we create an we create

222
00:11:54,060 --> 00:11:56,430
an efficient alchemy format for

223
00:11:56,430 --> 00:11:58,470
efficient for this you case is called

224
00:11:58,470 --> 00:12:01,710
Sigma we archive its repository as a

225
00:12:01,710 --> 00:12:04,950
sync file we have a coolant as back-end

226
00:12:04,950 --> 00:12:08,520
make you to go get that operates on

227
00:12:08,520 --> 00:12:10,700
archive River stories transparently

228
00:12:10,700 --> 00:12:16,200
without extracting them perforce update

229
00:12:16,200 --> 00:12:18,150
to the updates to them in the most

230
00:12:18,150 --> 00:12:20,760
efficient way for all salon

231
00:12:20,760 --> 00:12:23,339
it's the affair Google Cloud Storage so

232
00:12:23,339 --> 00:12:26,610
we we baked all the implemented details

233
00:12:26,610 --> 00:12:29,550
of this into this storage back and now

234
00:12:29,550 --> 00:12:33,300
can you saw get transparent with this

235
00:12:33,300 --> 00:12:35,850
kind of report story you can read more

236
00:12:35,850 --> 00:12:37,560
details where Edition details all these

237
00:12:37,560 --> 00:12:41,730
in our block all the details world hold

238
00:12:41,730 --> 00:12:43,770
these for this design and so are our

239
00:12:43,770 --> 00:12:45,959
there and it's also open source so you

240
00:12:45,959 --> 00:12:53,070
can use it for for other stuff so what I

241
00:12:53,070 --> 00:12:57,570
told you up to now is wonderful main use

242
00:12:57,570 --> 00:13:01,940
cases I will like to highlight

243
00:13:06,370 --> 00:13:08,110
project

244
00:13:08,110 --> 00:13:11,410
use gold and might be the resting for

245
00:13:11,410 --> 00:13:13,900
the go audience one is given which is a

246
00:13:13,900 --> 00:13:16,950
secret or face to get and you can just

247
00:13:16,950 --> 00:13:19,750
use it to do an right unlike any get

248
00:13:19,750 --> 00:13:23,590
repertory and you can write sequel query

249
00:13:23,590 --> 00:13:27,160
seconds there reporter very soon will be

250
00:13:27,160 --> 00:13:29,620
implemented as I call database driver so

251
00:13:29,620 --> 00:13:31,750
you will be able to connect I know

252
00:13:31,750 --> 00:13:34,780
you're aware I'm your geezer proper

253
00:13:34,780 --> 00:13:38,370
study but decreasing to do but you can

254
00:13:38,370 --> 00:13:41,430
we should be a ghost able it's a service

255
00:13:41,430 --> 00:13:45,490
is a self for that service it's like the

256
00:13:45,490 --> 00:13:48,040
go pockets dot in-service this don't

257
00:13:48,040 --> 00:13:52,630
four dozen who've you know go pockets

258
00:13:52,630 --> 00:14:01,120
dot in right and around so he go package

259
00:14:01,120 --> 00:14:06,340
dot in you can provide URLs to get

260
00:14:06,340 --> 00:14:08,860
Ripper studies that pin to specific

261
00:14:08,860 --> 00:14:11,440
branches and you can use that for in

262
00:14:11,440 --> 00:14:13,450
your row in ports for making imports

263
00:14:13,450 --> 00:14:15,100
that are stable and will not depend I

264
00:14:15,100 --> 00:14:17,410
wish on the master plan

265
00:14:17,410 --> 00:14:19,360
grappa gasoline is the most popular

266
00:14:19,360 --> 00:14:21,250
series of doing that but you can use

267
00:14:21,250 --> 00:14:23,170
ghost able to run your own and you're on

268
00:14:23,170 --> 00:14:25,150
the main with public and private rebel

269
00:14:25,150 --> 00:14:34,660
stories so it's recap go get miss

270
00:14:34,660 --> 00:14:37,660
working with get in go very simple an

271
00:14:37,660 --> 00:14:42,190
idiomatic we have been using it for more

272
00:14:42,190 --> 00:14:45,100
than one year in production with years

273
00:14:45,100 --> 00:14:47,470
of reports studies so even if the

274
00:14:47,470 --> 00:14:50,560
feature set is not complete there is a

275
00:14:50,560 --> 00:14:54,460
really a very solid base there and we

276
00:14:54,460 --> 00:14:56,920
have implemented lot of advanced use

277
00:14:56,920 --> 00:14:59,580
cases single that would otherwise

278
00:14:59,580 --> 00:15:05,620
require a real complaint in in the from

279
00:15:05,620 --> 00:15:10,330
black really a new enough gives that was

280
00:15:10,330 --> 00:15:12,820
preceded by Microsoft and they do

281
00:15:12,820 --> 00:15:14,830
something that is similar to our storage

282
00:15:14,830 --> 00:15:17,590
backends but you should not the

283
00:15:17,590 --> 00:15:20,230
command-line interface so they had to

284
00:15:20,230 --> 00:15:21,999
implement a kernel driver

285
00:15:21,999 --> 00:15:24,429
with a new billet or a system for doing

286
00:15:24,429 --> 00:15:28,449
that in a pretty complex way in every

287
00:15:28,449 --> 00:15:30,549
case that was just like fill three

288
00:15:30,549 --> 00:15:33,819
hundred lines of code so here you have

289
00:15:33,819 --> 00:15:37,769
the project URL like did have the stable

290
00:15:37,769 --> 00:15:41,049
stable version import the development

291
00:15:41,049 --> 00:15:44,289
version import you see said what go stay

292
00:15:44,289 --> 00:15:48,789
with us we have this fancy fancy URL for

293
00:15:48,789 --> 00:16:06,339
our imports thank you I think we have

294
00:16:06,339 --> 00:16:10,599
quite a lot of time for questions yeah I

295
00:16:10,599 --> 00:16:17,589
like mean talk so how big is the is a

296
00:16:17,589 --> 00:16:20,379
project currently maybe in number of

297
00:16:20,379 --> 00:16:23,519
lines of code or something and how much

298
00:16:23,519 --> 00:16:26,829
would grow in the future to get to the

299
00:16:26,829 --> 00:16:31,809
same capabilities as debug it or or take

300
00:16:31,809 --> 00:16:37,239
it yeah so sighs I've got to check out

301
00:16:37,239 --> 00:16:40,029
the Sigma only of Michael's know what's

302
00:16:40,029 --> 00:16:45,369
the side lines of code what do we know

303
00:16:45,369 --> 00:16:51,090
having time mister sorry

304
00:16:51,090 --> 00:16:54,280
your season it's quite tricky because if

305
00:16:54,280 --> 00:16:58,030
my screen is slapped out that has to

306
00:16:58,030 --> 00:16:58,810
time like this

307
00:16:58,810 --> 00:17:03,580
but I know what maybe 30,000 slight of

308
00:17:03,580 --> 00:17:06,430
cold maybe not sure

309
00:17:06,430 --> 00:17:11,500
so we implement so up to now we have

310
00:17:11,500 --> 00:17:15,150
implemented everything that we need for

311
00:17:15,150 --> 00:17:19,000
reportedly analysis which is not what

312
00:17:19,000 --> 00:17:23,260
most users want so we can grow on face

313
00:17:23,260 --> 00:17:26,950
pool push we have a client and server

314
00:17:26,950 --> 00:17:29,670
side for both of those we can traverse

315
00:17:29,670 --> 00:17:32,250
repositories

316
00:17:32,250 --> 00:17:37,480
maybe so all the kind of stuff so it's

317
00:17:37,480 --> 00:17:40,090
pretty complete on that side one of the

318
00:17:40,090 --> 00:17:43,840
major missing parts is creating commits

319
00:17:43,840 --> 00:17:47,770
so if you actually want to create new

320
00:17:47,770 --> 00:17:50,500
commits politically that's not there yet

321
00:17:50,500 --> 00:17:55,350
but it should be the next stable release

322
00:17:55,350 --> 00:18:00,580
when we will be on par we take it a

323
00:18:00,580 --> 00:18:05,100
little bit - so maybe fully on barb

324
00:18:05,100 --> 00:18:09,280
puller acres so yeah not not anytime

325
00:18:09,280 --> 00:18:13,270
soon attention but for features that we

326
00:18:13,270 --> 00:18:16,690
implement will prevent a lot of

327
00:18:16,690 --> 00:18:19,150
possibilities for extending the behavior

328
00:18:19,150 --> 00:18:22,830
that you don't have without libraries

329
00:18:28,170 --> 00:18:34,060
thanks you did you define the repertory

330
00:18:34,060 --> 00:18:37,330
is for the first commit how do you deal

331
00:18:37,330 --> 00:18:39,400
with the boilerplate repositories that

332
00:18:39,400 --> 00:18:45,490
are used to space for many products so

333
00:18:45,490 --> 00:18:49,360
there are couple of cases when easy one

334
00:18:49,360 --> 00:18:54,130
is the boilerplate that copious and

335
00:18:54,130 --> 00:18:56,380
easier with us in associations such as

336
00:18:56,380 --> 00:19:01,660
they get ignore file that but most cases

337
00:19:01,660 --> 00:19:03,049
the hearts of the four committees

338
00:19:03,049 --> 00:19:04,730
different because the committee includes

339
00:19:04,730 --> 00:19:07,519
your alpha name the time stamp and the

340
00:19:07,519 --> 00:19:10,659
common measures soon if you start our

341
00:19:10,659 --> 00:19:12,799
repository with the same container

342
00:19:12,799 --> 00:19:14,809
different one but you have like all

343
00:19:14,809 --> 00:19:17,539
press or this static page generators

344
00:19:17,539 --> 00:19:22,399
that use clone and yeah so currently we

345
00:19:22,399 --> 00:19:28,299
just we just store all of them as Forks

346
00:19:28,299 --> 00:19:31,279
which actually also what it hadass

347
00:19:31,279 --> 00:19:35,179
internally and we don't depreciate among

348
00:19:35,179 --> 00:19:38,960
them we see all the web pages completely

349
00:19:38,960 --> 00:19:40,820
independent web pages owned by different

350
00:19:40,820 --> 00:19:44,450
people as part of the same project we

351
00:19:44,450 --> 00:19:46,669
are allies all of them but we

352
00:19:46,669 --> 00:19:50,029
interpreters as Farsi so we didn't get

353
00:19:50,029 --> 00:19:55,009
into the problem of solving this but we

354
00:19:55,009 --> 00:19:59,419
might try some stuff in the future such

355
00:19:59,419 --> 00:20:02,690
as trying to detect a point in time

356
00:20:02,690 --> 00:20:06,320
where they call base diverted a lot

357
00:20:06,320 --> 00:20:10,100
within them I guess would definitely

358
00:20:10,100 --> 00:20:13,759
possible to let the only thing is that

359
00:20:13,759 --> 00:20:18,279
that's very computationally expensive so

360
00:20:18,279 --> 00:20:23,840
in our case for example but only this

361
00:20:23,840 --> 00:20:25,609
probably our use K we are focusing on

362
00:20:25,609 --> 00:20:28,909
call we don't care that much for example

363
00:20:28,909 --> 00:20:31,970
about the usual example of static

364
00:20:31,970 --> 00:20:35,690
generated pages actually they're bad for

365
00:20:35,690 --> 00:20:37,340
us because we are trying to understand

366
00:20:37,340 --> 00:20:40,549
horrible codes and dopant in a lot of

367
00:20:40,549 --> 00:20:43,600
other generated code we don't want to

368
00:20:43,600 --> 00:20:46,309
interpret your auto generated code as if

369
00:20:46,309 --> 00:20:49,639
it was great in my view because you are

370
00:20:49,639 --> 00:20:52,970
not writing code but yeah I guess we

371
00:20:52,970 --> 00:20:56,139
will have to do swing in the future

372
00:20:56,480 --> 00:21:00,650
and so I have a question regarding a fog

373
00:21:00,650 --> 00:21:04,910
detection algorithm do you support the

374
00:21:04,910 --> 00:21:07,010
taking get graphed you know when you

375
00:21:07,010 --> 00:21:09,140
graph to represent areas in one yeah

376
00:21:09,140 --> 00:21:13,820
it's really because so I saw a simple

377
00:21:13,820 --> 00:21:18,860
example where there was something a 1 in

378
00:21:18,860 --> 00:21:21,470
shall commit but if you take the salvia

379
00:21:21,470 --> 00:21:24,020
trooper story the the get get river

380
00:21:24,020 --> 00:21:26,660
study it has seven initial comments or

381
00:21:26,660 --> 00:21:31,970
seven rude comments in our case in our

382
00:21:31,970 --> 00:21:33,830
application we make the distinct enough

383
00:21:33,830 --> 00:21:37,340
route commit which are all routes have

384
00:21:37,340 --> 00:21:42,200
no parent and we made this arbitrary

385
00:21:42,200 --> 00:21:44,900
this is a definition of the initial

386
00:21:44,900 --> 00:21:49,430
curve which is route commit so for our

387
00:21:49,430 --> 00:21:51,260
reference is the route with a youth

388
00:21:51,260 --> 00:21:54,920
which by going through history only

389
00:21:54,920 --> 00:21:56,810
throwing the first parent

390
00:21:56,810 --> 00:21:59,600
so in the early summer we only follow

391
00:21:59,600 --> 00:22:02,780
the first parent and we always greet the

392
00:22:02,780 --> 00:22:06,590
same initial commit so it has seven is

393
00:22:06,590 --> 00:22:09,050
route commit but only one of them is

394
00:22:09,050 --> 00:22:13,250
initial commit it's actually the first

395
00:22:13,250 --> 00:22:16,160
the proper the proper first we commit

396
00:22:16,160 --> 00:22:18,590
and the other were like pools

397
00:22:18,590 --> 00:22:21,500
I think that were merged into that over

398
00:22:21,500 --> 00:22:26,000
time and we saw all of that in the

399
00:22:26,000 --> 00:22:31,060
initial commit if you have a fork that

400
00:22:31,060 --> 00:22:34,430
in the case that you merge two different

401
00:22:34,430 --> 00:22:39,950
stories usually some Forks that my heart

402
00:22:39,950 --> 00:22:42,110
DIF different ischial commit even if

403
00:22:42,110 --> 00:22:44,240
they share part of the history they will

404
00:22:44,240 --> 00:22:47,780
sort independently in our storage and we

405
00:22:47,780 --> 00:22:50,660
are not trying to figure out so now

406
00:22:50,660 --> 00:22:52,640
currently that duplicates that

407
00:22:52,640 --> 00:22:57,170
information in some cases now we are in

408
00:22:57,170 --> 00:22:59,390
the figure out if we use it alternates

409
00:22:59,390 --> 00:23:04,310
to even share information in in those

410
00:23:04,310 --> 00:23:09,230
cases that's still working progress

411
00:23:09,230 --> 00:23:16,170
thank you so my question is regarding

412
00:23:16,170 --> 00:23:19,800
the extensibility of this so you

413
00:23:19,800 --> 00:23:22,770
mentioned that it's easy to price easy

414
00:23:22,770 --> 00:23:27,900
to write new stretch back ends but no

415
00:23:27,900 --> 00:23:30,960
only supports started clicking right so

416
00:23:30,960 --> 00:23:33,440
you have to kind of further pray it and

417
00:23:33,440 --> 00:23:37,170
create it and make a kind of compiling

418
00:23:37,170 --> 00:23:40,350
plugin or something that or go get this

419
00:23:40,350 --> 00:23:43,520
hybrid it's not meant for for writing

420
00:23:43,520 --> 00:23:46,320
come online type in write a comma in

421
00:23:46,320 --> 00:23:49,500
client because it which in fact we are

422
00:23:49,500 --> 00:23:53,390
kind of doing but just for as an example

423
00:23:53,390 --> 00:23:58,170
so if you do your own storage again you

424
00:23:58,170 --> 00:24:00,510
will be using an application and in that

425
00:24:00,510 --> 00:24:02,790
application you would also do importing

426
00:24:02,790 --> 00:24:04,830
go get you will import in your storage

427
00:24:04,830 --> 00:24:06,960
back-end and you will be passing it will

428
00:24:06,960 --> 00:24:11,720
get so you hold the static linking

429
00:24:11,720 --> 00:24:17,910
effects that I mean that's this case it

430
00:24:17,910 --> 00:24:19,710
will be much like three quickly if you

431
00:24:19,710 --> 00:24:26,460
want to do the get online where where

432
00:24:26,460 --> 00:24:28,200
you can plug so that's back in the

433
00:24:28,200 --> 00:24:30,420
hanging and runtime fraction here that

434
00:24:30,420 --> 00:24:33,240
we don't we don't try to do that at the

435
00:24:33,240 --> 00:24:37,520
moment but movie about contribution

436
00:24:39,110 --> 00:24:42,189
any other question

437
00:24:44,050 --> 00:24:47,760
all right so thank you

438
00:24:47,760 --> 00:24:56,299
[Applause]

