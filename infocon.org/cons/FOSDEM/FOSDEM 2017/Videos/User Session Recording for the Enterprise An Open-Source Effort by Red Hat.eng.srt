1
00:00:05,479 --> 00:00:10,799
so hello everyone and my name is Nikolai

2
00:00:10,799 --> 00:00:13,080
Kondratiev and I will be speaking about

3
00:00:13,080 --> 00:00:16,890
user session recording which is

4
00:00:16,890 --> 00:00:20,730
basically meant for use on critical

5
00:00:20,730 --> 00:00:23,730
systems on sensitive systems to record

6
00:00:23,730 --> 00:00:26,849
whatever users do whatever users access

7
00:00:26,849 --> 00:00:32,400
whatever users run on those systems so I

8
00:00:32,400 --> 00:00:35,190
come from Finland I'm originally Russian

9
00:00:35,190 --> 00:00:36,930
and I moved to finland five years ago

10
00:00:36,930 --> 00:00:40,650
and now I'm working at Red Hat in the

11
00:00:40,650 --> 00:00:44,160
identity management group I'm helping

12
00:00:44,160 --> 00:00:47,760
this SSD I maintain free reduce packages

13
00:00:47,760 --> 00:00:52,440
and I mostly focus on this topic on user

14
00:00:52,440 --> 00:00:56,190
session recording project in my free

15
00:00:56,190 --> 00:00:59,460
time I founded the Digi mint project

16
00:00:59,460 --> 00:01:02,070
which works on improving Linux support

17
00:01:02,070 --> 00:01:04,680
for generic graphics tables which are

18
00:01:04,680 --> 00:01:08,700
not welcome but still graphics tables

19
00:01:08,700 --> 00:01:11,840
and I still maintain it and also I work

20
00:01:11,840 --> 00:01:14,610
I'll also try to study electronics and

21
00:01:14,610 --> 00:01:21,600
embed it so has anybody of you been

22
00:01:21,600 --> 00:01:25,380
recorded before but Sarah you were oh

23
00:01:25,380 --> 00:01:29,070
there is one person one person that's

24
00:01:29,070 --> 00:01:31,110
interesting that's a first

25
00:01:31,110 --> 00:01:33,450
has you ever set up recording yourself

26
00:01:33,450 --> 00:01:39,930
recording of somebody you did great

27
00:01:39,930 --> 00:01:43,490
if you didn't do your great you didn't

28
00:01:43,490 --> 00:01:47,549
any of your aggression whatever okay

29
00:01:47,549 --> 00:01:55,470
there's one person okay so we've been

30
00:01:55,470 --> 00:01:57,270
doing this identity management thing

31
00:01:57,270 --> 00:02:01,320
which is pre IP and SSD for quite a

32
00:02:01,320 --> 00:02:05,340
while now and it's gotten pretty good so

33
00:02:05,340 --> 00:02:07,560
people started migrating to it and

34
00:02:07,560 --> 00:02:09,568
people who previously used commercial

35
00:02:09,568 --> 00:02:11,970
solutions like Active Directory and some

36
00:02:11,970 --> 00:02:14,160
other solutions they started using it

37
00:02:14,160 --> 00:02:16,680
and they noticed that

38
00:02:16,680 --> 00:02:19,079
it works pretty well but they still have

39
00:02:19,079 --> 00:02:21,269
the one of the essential parts missing

40
00:02:21,269 --> 00:02:24,209
which is session recording which is

41
00:02:24,209 --> 00:02:27,420
mandated often for medical organizations

42
00:02:27,420 --> 00:02:30,180
and financial institutions and sometimes

43
00:02:30,180 --> 00:02:33,290
you're required by law

44
00:02:34,549 --> 00:02:38,579
so people basically need to see and know

45
00:02:38,579 --> 00:02:41,250
what their contractors do on their

46
00:02:41,250 --> 00:02:45,450
systems and when something happens they

47
00:02:45,450 --> 00:02:48,000
need to know who broke the system and

48
00:02:48,000 --> 00:02:50,519
how they did it how exactly they did it

49
00:02:50,519 --> 00:02:57,930
and what was happening so basically the

50
00:02:57,930 --> 00:03:00,180
companies and the government they want

51
00:03:00,180 --> 00:03:02,939
to have everything recorded ideally

52
00:03:02,939 --> 00:03:05,400
whatever the user does if they could

53
00:03:05,400 --> 00:03:08,159
they could they they would put a camera

54
00:03:08,159 --> 00:03:10,769
behind the users back and see what scoop

55
00:03:10,769 --> 00:03:12,060
what was going on and I guess there are

56
00:03:12,060 --> 00:03:14,909
some installations that do that but

57
00:03:14,909 --> 00:03:16,620
essentially yes they want everything

58
00:03:16,620 --> 00:03:18,450
recorded they want it stored somewhere

59
00:03:18,450 --> 00:03:21,989
safe and nobody except religious persons

60
00:03:21,989 --> 00:03:25,199
could access it and they want to easily

61
00:03:25,199 --> 00:03:28,470
find who did what and when and what was

62
00:03:28,470 --> 00:03:33,199
going on and how how exactly they did it

63
00:03:33,199 --> 00:03:35,250
they want to see what was actually

64
00:03:35,250 --> 00:03:38,220
happening so there are a lot of

65
00:03:38,220 --> 00:03:40,680
commercial offerings for this and they

66
00:03:40,680 --> 00:03:43,709
they go from dedicated hardware which

67
00:03:43,709 --> 00:03:45,150
you can buy and put in front of your

68
00:03:45,150 --> 00:03:46,889
servers and it will intercept secure

69
00:03:46,889 --> 00:03:48,629
connections provided you have the keys

70
00:03:48,629 --> 00:03:52,790
and record SSH sessions and record the

71
00:03:52,790 --> 00:03:55,859
SSL die database connections and

72
00:03:55,859 --> 00:03:57,989
everything

73
00:03:57,989 --> 00:04:00,900
there are jump servers that you can

74
00:04:00,900 --> 00:04:04,139
install also on your own hardware or you

75
00:04:04,139 --> 00:04:06,389
can install software on your directly on

76
00:04:06,389 --> 00:04:09,629
your target servers and it would act as

77
00:04:09,629 --> 00:04:11,729
a user space partially user space

78
00:04:11,729 --> 00:04:14,099
partially kernel space solution to

79
00:04:14,099 --> 00:04:16,639
intercept data and send it somewhere

80
00:04:16,639 --> 00:04:22,019
they record keystrokes the record

81
00:04:22,019 --> 00:04:25,110
processes executed the record URLs

82
00:04:25,110 --> 00:04:27,840
accessed and applications started and

83
00:04:27,840 --> 00:04:30,830
these solutions often work

84
00:04:30,830 --> 00:04:34,650
they're often offered both for unix

85
00:04:34,650 --> 00:04:40,410
linux and windows and pretty often they

86
00:04:40,410 --> 00:04:41,880
are also integrated with identity

87
00:04:41,880 --> 00:04:45,150
management solutions and they often come

88
00:04:45,150 --> 00:04:51,210
with you no third-party identity

89
00:04:51,210 --> 00:04:53,220
management solutions not that not

90
00:04:53,220 --> 00:04:54,630
necessarily those that come with your

91
00:04:54,630 --> 00:04:57,509
system for example on Windows because

92
00:04:57,509 --> 00:04:59,669
some people want to unify that across

93
00:04:59,669 --> 00:05:04,349
unix's and Linux's and windows's and

94
00:05:04,349 --> 00:05:06,449
they also have access controls

95
00:05:06,449 --> 00:05:10,169
recordings and management of central

96
00:05:10,169 --> 00:05:12,210
central storage for the recordings and

97
00:05:12,210 --> 00:05:15,090
searching and analysis and of course the

98
00:05:15,090 --> 00:05:19,440
playback so yeah there's lots of

99
00:05:19,440 --> 00:05:21,180
solutions but they are pretty expensive

100
00:05:21,180 --> 00:05:24,060
and sometimes they involve pretty

101
00:05:24,060 --> 00:05:27,360
involved and cumbersome licensing terms

102
00:05:27,360 --> 00:05:29,940
like licensing per server or licensing

103
00:05:29,940 --> 00:05:34,979
per user etc just people don't like that

104
00:05:34,979 --> 00:05:38,039
paying money and a lot of it and then

105
00:05:38,039 --> 00:05:40,050
you can fix it yourself and you can't

106
00:05:40,050 --> 00:05:42,180
improve it because the source is closed

107
00:05:42,180 --> 00:05:44,669
and you are aligned often on just one

108
00:05:44,669 --> 00:05:49,080
supplier and if if they screw up you can

109
00:05:49,080 --> 00:05:55,740
do much so of course the ideal situation

110
00:05:55,740 --> 00:05:58,139
would be having access to the source

111
00:05:58,139 --> 00:06:00,780
code and being able to look inside and

112
00:06:00,780 --> 00:06:02,780
being able to see what's going on and

113
00:06:02,780 --> 00:06:06,750
fix it and at least understand what's

114
00:06:06,750 --> 00:06:10,620
going on so you can try to fix the

115
00:06:10,620 --> 00:06:13,139
problem while waiting for the or the fix

116
00:06:13,139 --> 00:06:17,219
somehow work it around and of course

117
00:06:17,219 --> 00:06:19,289
people want support especially

118
00:06:19,289 --> 00:06:22,280
enterprises

119
00:06:24,659 --> 00:06:28,900
there are existing solutions which

120
00:06:28,900 --> 00:06:32,039
people use and actually we at Red Hat

121
00:06:32,039 --> 00:06:37,030
build for customers like using script

122
00:06:37,030 --> 00:06:39,639
and building a jump server or with SSH

123
00:06:39,639 --> 00:06:42,069
access and some air ever you put files

124
00:06:42,069 --> 00:06:44,949
and before they get to the target system

125
00:06:44,949 --> 00:06:48,550
so that that is recorded and those it is

126
00:06:48,550 --> 00:06:50,740
all it is all do to yourself and it

127
00:06:50,740 --> 00:06:55,530
takes a lot of time and maintenance so

128
00:06:55,530 --> 00:06:59,500
you can do script the basic tool which

129
00:06:59,500 --> 00:07:02,050
is completely not security-oriented it

130
00:07:02,050 --> 00:07:05,349
doesn't have any any protection for the

131
00:07:05,349 --> 00:07:06,849
recordings and you can do it only at

132
00:07:06,849 --> 00:07:09,940
your own will you can do what like if

133
00:07:09,940 --> 00:07:11,169
you want to record yourself you can use

134
00:07:11,169 --> 00:07:12,550
it but if you want to record somebody

135
00:07:12,550 --> 00:07:14,349
else you need to go to great lengths to

136
00:07:14,349 --> 00:07:19,090
protect your recording there is the

137
00:07:19,090 --> 00:07:23,830
pseudo it io logging it is security

138
00:07:23,830 --> 00:07:26,590
oriented and it works pretty well and

139
00:07:26,590 --> 00:07:31,870
you can search it you can play it back

140
00:07:31,870 --> 00:07:37,599
on the terminal but you doesn't have

141
00:07:37,599 --> 00:07:40,990
anything to get to support getting the

142
00:07:40,990 --> 00:07:44,169
recording of the system and as far as I

143
00:07:44,169 --> 00:07:44,409
know

144
00:07:44,409 --> 00:07:47,110
well the session is recorded it's the

145
00:07:47,110 --> 00:07:49,240
file the direct recording is incomplete

146
00:07:49,240 --> 00:07:52,419
and you can stream it so but pseudo you

147
00:07:52,419 --> 00:07:54,759
can only record to file the record the

148
00:07:54,759 --> 00:07:56,770
session and then get it off the system

149
00:07:56,770 --> 00:08:02,199
bizarre sink or something then there is

150
00:08:02,199 --> 00:08:04,240
the closest thing that that exists there

151
00:08:04,240 --> 00:08:10,029
is the tty audit and it's a sub system

152
00:08:10,029 --> 00:08:12,699
in the kernel kind of attached to this

153
00:08:12,699 --> 00:08:17,229
is why where you can request login all

154
00:08:17,229 --> 00:08:22,509
the user input to audit log and it's

155
00:08:22,509 --> 00:08:24,279
pretty good and that it can be you can

156
00:08:24,279 --> 00:08:26,830
send these logs somewhere where it can

157
00:08:26,830 --> 00:08:28,750
be kept safe and pretty fast

158
00:08:28,750 --> 00:08:33,090
but it only records input

159
00:08:34,049 --> 00:08:39,549
so what we're trying to build is well

160
00:08:39,549 --> 00:08:42,039
what the users ask so and they and they

161
00:08:42,039 --> 00:08:45,750
need the data that you enter the screen

162
00:08:45,750 --> 00:08:48,790
that you see and what you execute again

163
00:08:48,790 --> 00:08:51,940
and what you access and you need to get

164
00:08:51,940 --> 00:08:53,440
it off the machine as as soon as

165
00:08:53,440 --> 00:08:58,839
possible and store securely you also did

166
00:08:58,839 --> 00:09:01,420
people also ask to be able to search for

167
00:09:01,420 --> 00:09:04,120
particular events that happened like you

168
00:09:04,120 --> 00:09:06,870
can search for the comments executed our

169
00:09:06,870 --> 00:09:09,580
social particular text that user entered

170
00:09:09,580 --> 00:09:13,140
or so on the screen and they want to

171
00:09:13,140 --> 00:09:15,610
correlate that with other events that

172
00:09:15,610 --> 00:09:18,700
happen and you know some server crashing

173
00:09:18,700 --> 00:09:21,220
or some stacktrace and appearance

174
00:09:21,220 --> 00:09:25,020
somewhere or access logs or something

175
00:09:25,020 --> 00:09:28,089
and they want to be able to see the

176
00:09:28,089 --> 00:09:30,279
recording not not the recording but

177
00:09:30,279 --> 00:09:32,790
directly the session as it is going on

178
00:09:32,790 --> 00:09:35,950
in case the in case they want to catch

179
00:09:35,950 --> 00:09:38,830
something as it's happening and most

180
00:09:38,830 --> 00:09:40,750
likely it's not going to be a human it's

181
00:09:40,750 --> 00:09:43,209
going to be some some machinery that's

182
00:09:43,209 --> 00:09:47,350
just watches that stream and when

183
00:09:47,350 --> 00:09:49,390
something happens they of course would

184
00:09:49,390 --> 00:09:53,920
like to see what happened and they won't

185
00:09:53,920 --> 00:09:56,970
again the central control where you can

186
00:09:56,970 --> 00:09:59,589
where you can see where clearly can set

187
00:09:59,589 --> 00:10:01,779
like you can I want to record these

188
00:10:01,779 --> 00:10:04,990
servers on this farm I don't want to

189
00:10:04,990 --> 00:10:06,520
record those servers I want to record

190
00:10:06,520 --> 00:10:10,720
those user groups and they want to also

191
00:10:10,720 --> 00:10:12,550
control the access to the actual

192
00:10:12,550 --> 00:10:19,510
recording as well so tgy audit already

193
00:10:19,510 --> 00:10:21,820
does it with logs and we thought that

194
00:10:21,820 --> 00:10:24,370
perhaps going with logs would give us a

195
00:10:24,370 --> 00:10:29,649
lot a lot of benefits we already have

196
00:10:29,649 --> 00:10:33,940
the delivery system we have audit logs

197
00:10:33,940 --> 00:10:37,420
which record those accesses those files

198
00:10:37,420 --> 00:10:42,760
those processes executed and we have

199
00:10:42,760 --> 00:10:47,980
a lot of solutions to analyze the these

200
00:10:47,980 --> 00:10:55,630
logs and to correlate them so we were

201
00:10:55,630 --> 00:10:58,120
trying to decide what we can use for the

202
00:10:58,120 --> 00:11:03,310
analysis and for correlation and we

203
00:11:03,310 --> 00:11:05,080
wanted something of course open sources

204
00:11:05,080 --> 00:11:08,770
we want everything to be and we wanted

205
00:11:08,770 --> 00:11:10,270
something that would scale to the

206
00:11:10,270 --> 00:11:12,160
enterprise level and that would have all

207
00:11:12,160 --> 00:11:18,270
the features that users are expecting so

208
00:11:18,270 --> 00:11:22,570
the current the hippest solution right

209
00:11:22,570 --> 00:11:24,780
now is elastic search in Cabana with

210
00:11:24,780 --> 00:11:27,340
Cabana possibly replaced with trahana

211
00:11:27,340 --> 00:11:29,080
or some other tools but basically

212
00:11:29,080 --> 00:11:33,400
elastic searches is the king of open

213
00:11:33,400 --> 00:11:36,580
source solutions and we enter it had

214
00:11:36,580 --> 00:11:38,610
actually are working on the project

215
00:11:38,610 --> 00:11:41,800
currently called the vrq which is a

216
00:11:41,800 --> 00:11:45,640
working name which is trying to build a

217
00:11:45,640 --> 00:11:49,090
solution for it had products where you

218
00:11:49,090 --> 00:11:53,230
would be able to set up elastic search

219
00:11:53,230 --> 00:11:56,290
and logo forward all the logs normalize

220
00:11:56,290 --> 00:11:58,560
them and then correlate them and

221
00:11:58,560 --> 00:12:03,160
normalization means that you wouldn't

222
00:12:03,160 --> 00:12:08,290
that this solution would take the basic

223
00:12:08,290 --> 00:12:10,000
fields that you need to start

224
00:12:10,000 --> 00:12:13,500
correlating like host names timestamps

225
00:12:13,500 --> 00:12:16,600
user names etc and they put and they it

226
00:12:16,600 --> 00:12:18,940
would put them into fields that are

227
00:12:18,940 --> 00:12:21,370
named consistently which you can expect

228
00:12:21,370 --> 00:12:24,550
to see in the logs there was a previous

229
00:12:24,550 --> 00:12:28,330
effort which was called Cee which tried

230
00:12:28,330 --> 00:12:32,350
to completely normalize all the logs and

231
00:12:32,350 --> 00:12:34,600
after several years of effort they

232
00:12:34,600 --> 00:12:38,980
basically gave up and this approach that

233
00:12:38,980 --> 00:12:42,520
we are trying to take is there's a

234
00:12:42,520 --> 00:12:47,050
moderate approach if I can say so and we

235
00:12:47,050 --> 00:12:48,970
already got that work in an open shipped

236
00:12:48,970 --> 00:12:53,830
more or less and it's going to OpenStack

237
00:12:53,830 --> 00:12:57,030
and possibly some other it had products

238
00:12:57,030 --> 00:13:05,320
so next so we need to from that list

239
00:13:05,320 --> 00:13:09,060
remains the central control we need to

240
00:13:09,060 --> 00:13:13,450
record what users enter and see and we

241
00:13:13,450 --> 00:13:14,860
need to make sense of what it logs

242
00:13:14,860 --> 00:13:18,280
because audit logs are plaintext we need

243
00:13:18,280 --> 00:13:19,330
to get them to

244
00:13:19,330 --> 00:13:21,940
elasticsearch and we need to make them

245
00:13:21,940 --> 00:13:25,840
searchable and we need to be able to

246
00:13:25,840 --> 00:13:28,210
look for exact data that happened in

247
00:13:28,210 --> 00:13:31,960
audit logs then we need to deliver it to

248
00:13:31,960 --> 00:13:33,730
elastic search and then they need to

249
00:13:33,730 --> 00:13:37,390
play it back so for central control we

250
00:13:37,390 --> 00:13:39,430
would naturally choose three APA because

251
00:13:39,430 --> 00:13:43,450
it's a full-featured identity management

252
00:13:43,450 --> 00:13:46,990
solution couple to this SSD which allows

253
00:13:46,990 --> 00:13:50,410
you to do things like log into your

254
00:13:50,410 --> 00:13:52,540
system even if it's away from the domain

255
00:13:52,540 --> 00:13:58,000
controller and we are currently working

256
00:13:58,000 --> 00:14:00,010
on I didn't session recording support to

257
00:14:00,010 --> 00:14:07,080
s SSD and it's getting pretty close so

258
00:14:07,080 --> 00:14:09,790
for login input and output we developed

259
00:14:09,790 --> 00:14:12,880
a tool called T log which basically goes

260
00:14:12,880 --> 00:14:15,930
between the terminal and the shell and

261
00:14:15,930 --> 00:14:18,160
records everything that passes between

262
00:14:18,160 --> 00:14:20,110
converted to Jason and locks it to

263
00:14:20,110 --> 00:14:24,400
syslog then it already saw three

264
00:14:24,400 --> 00:14:27,210
releases it's still not completely

265
00:14:27,210 --> 00:14:29,080
production ready but it's pretty

266
00:14:29,080 --> 00:14:31,110
full-featured

267
00:14:31,110 --> 00:14:35,560
and we are doing things with it quite

268
00:14:35,560 --> 00:14:41,380
quite a long while next about the audit

269
00:14:41,380 --> 00:14:43,620
logs

270
00:14:46,399 --> 00:14:52,440
we built another tool which allows you

271
00:14:52,440 --> 00:14:54,959
to convert the audit logs single shot if

272
00:14:54,959 --> 00:14:57,089
you'd like or you can put it under

273
00:14:57,089 --> 00:15:00,990
oldest p'tee which is a wooded d plugin

274
00:15:00,990 --> 00:15:04,589
manager where it receives the events

275
00:15:04,589 --> 00:15:07,050
among other plugins and converts to the

276
00:15:07,050 --> 00:15:09,990
JSON again or to XML if you'd like

277
00:15:09,990 --> 00:15:12,899
and that sends that to syslog at the

278
00:15:12,899 --> 00:15:15,390
moment and we are working closely with

279
00:15:15,390 --> 00:15:18,839
the audit team and trying to make this

280
00:15:18,839 --> 00:15:23,670
to produce output which is as close as

281
00:15:23,670 --> 00:15:26,089
possible to the original logs in

282
00:15:26,089 --> 00:15:29,850
structure so that people who want to

283
00:15:29,850 --> 00:15:32,640
convert audit logs to their own systems

284
00:15:32,640 --> 00:15:37,800
like they can they can have already a

285
00:15:37,800 --> 00:15:41,010
big XML pipeline for converting those

286
00:15:41,010 --> 00:15:44,339
logs and for storing them as required by

287
00:15:44,339 --> 00:15:47,579
regulations and so that they can use

288
00:15:47,579 --> 00:15:49,950
this tool to simplify conversion so they

289
00:15:49,950 --> 00:15:53,779
don't have to parse the logs themselves

290
00:15:57,860 --> 00:16:01,019
so this is this already has one release

291
00:16:01,019 --> 00:16:06,029
and it's available on github the

292
00:16:06,029 --> 00:16:07,649
delivery to elasticsearch we already

293
00:16:07,649 --> 00:16:10,860
have our syslog which supports that we

294
00:16:10,860 --> 00:16:13,230
have it in rail and fedora and you can

295
00:16:13,230 --> 00:16:15,959
of course install fluency or log stash

296
00:16:15,959 --> 00:16:20,880
which also do that pretty well and the

297
00:16:20,880 --> 00:16:23,040
common solution which is VI Q which I

298
00:16:23,040 --> 00:16:26,699
talked about earlier could also be used

299
00:16:26,699 --> 00:16:32,399
for that so we have may already have a

300
00:16:32,399 --> 00:16:34,800
terminal playback for the data that was

301
00:16:34,800 --> 00:16:38,459
sent elasticsearch the user input and

302
00:16:38,459 --> 00:16:42,029
output but we are working on a web UI

303
00:16:42,029 --> 00:16:44,370
which would allow you to control it

304
00:16:44,370 --> 00:16:46,800
better rewind it and look for special

305
00:16:46,800 --> 00:16:48,779
strings for example like you can search

306
00:16:48,779 --> 00:16:51,990
for comment that will give you matches

307
00:16:51,990 --> 00:16:55,360
so you can click on a match and you

308
00:16:55,360 --> 00:16:59,410
see the logs at this moment and also the

309
00:16:59,410 --> 00:17:02,679
playback in the terminal would rewind to

310
00:17:02,679 --> 00:17:04,659
that point so you can see what was

311
00:17:04,659 --> 00:17:06,669
exactly happening or you can search what

312
00:17:06,669 --> 00:17:09,159
was user entering or what was on the

313
00:17:09,159 --> 00:17:10,898
screen and it would also remind logs and

314
00:17:10,898 --> 00:17:14,980
sync everything we are trying to build

315
00:17:14,980 --> 00:17:17,829
it as a reusable vbi component so that

316
00:17:17,829 --> 00:17:20,079
you can use it in your own management

317
00:17:20,079 --> 00:17:24,809
solution and connected to mastic search

318
00:17:25,319 --> 00:17:30,549
so a basic scheme is this basically we

319
00:17:30,549 --> 00:17:35,130
have to log record an input and output

320
00:17:35,130 --> 00:17:39,539
or shape converts in order the events

321
00:17:39,539 --> 00:17:43,269
they're joining in the in the logs and

322
00:17:43,269 --> 00:17:45,669
you can use any combinations of our C's

323
00:17:45,669 --> 00:17:48,250
log log station or fluency to forward

324
00:17:48,250 --> 00:17:51,130
that data to elasticsearch from there

325
00:17:51,130 --> 00:17:53,710
from there you can view it in Cabana or

326
00:17:53,710 --> 00:18:00,340
in the upcoming web UI so we think that

327
00:18:00,340 --> 00:18:01,750
this approach is actually better than

328
00:18:01,750 --> 00:18:04,990
many commercial conference indirect in

329
00:18:04,990 --> 00:18:07,899
this regard that you can reuse already

330
00:18:07,899 --> 00:18:10,389
existing login infrastructure and you

331
00:18:10,389 --> 00:18:13,120
can save resources meaning hardware

332
00:18:13,120 --> 00:18:15,760
resources and the existing hardware

333
00:18:15,760 --> 00:18:17,830
resources and you don't need to add that

334
00:18:17,830 --> 00:18:21,460
much new capacity and you don't need

335
00:18:21,460 --> 00:18:23,590
that much maintenance compared to a

336
00:18:23,590 --> 00:18:25,059
separate system which has its own

337
00:18:25,059 --> 00:18:30,429
delivery mechanism and its own

338
00:18:30,429 --> 00:18:33,639
maintenance protocols this also allows

339
00:18:33,639 --> 00:18:36,789
you easy correlation with other logs

340
00:18:36,789 --> 00:18:39,519
compared to system which which lives on

341
00:18:39,519 --> 00:18:43,299
its own where you might go to the effort

342
00:18:43,299 --> 00:18:47,710
of finding the recording noticing the

343
00:18:47,710 --> 00:18:49,480
timestamp and then go into your logs

344
00:18:49,480 --> 00:18:51,220
separately and then trying to correlate

345
00:18:51,220 --> 00:18:55,899
that and you will be able to easily see

346
00:18:55,899 --> 00:18:58,149
what's going on actually at the same

347
00:18:58,149 --> 00:19:02,309
time even though those are some of those

348
00:19:02,309 --> 00:19:05,950
commercial offerings they offer some

349
00:19:05,950 --> 00:19:08,260
events that happen at the the time of

350
00:19:08,260 --> 00:19:09,850
recording of specific

351
00:19:09,850 --> 00:19:12,850
there are not as flexible as correlating

352
00:19:12,850 --> 00:19:17,140
all the logs together so I'm going to

353
00:19:17,140 --> 00:19:23,400
show you a little demo and this demo

354
00:19:23,400 --> 00:19:27,310
user which is recorded the log in the

355
00:19:27,310 --> 00:19:32,200
system I will start playback up the

356
00:19:32,200 --> 00:19:33,910
users session at the same time and

357
00:19:33,910 --> 00:19:35,980
playback will be going the recording

358
00:19:35,980 --> 00:19:37,720
will be going to the elastic search and

359
00:19:37,720 --> 00:19:39,940
playback will be happening directly from

360
00:19:39,940 --> 00:19:46,810
elastic search at the same time and I'll

361
00:19:46,810 --> 00:19:49,680
do some some work in the terminal and

362
00:19:49,680 --> 00:19:52,210
then we'll take a look at the logs of

363
00:19:52,210 --> 00:19:55,630
the raw logs in Journal and the logs as

364
00:19:55,630 --> 00:19:58,740
they can be seen in Cabana

365
00:20:08,980 --> 00:20:11,560
the first thing I'll do when I log into

366
00:20:11,560 --> 00:20:13,990
the system I will note the session ID

367
00:20:13,990 --> 00:20:15,850
the audit session ID which is unique for

368
00:20:15,850 --> 00:20:19,330
every login to the system and I will use

369
00:20:19,330 --> 00:20:24,300
that session ID to look up the messages

370
00:20:24,300 --> 00:20:31,690
in the rustic search so this is session

371
00:20:31,690 --> 00:20:39,970
85 and we are hopes yes and of course of

372
00:20:39,970 --> 00:20:42,030
course

373
00:21:06,070 --> 00:21:09,250
okay so we are live so on the left is

374
00:21:09,250 --> 00:21:12,460
the original session and on the right is

375
00:21:12,460 --> 00:21:14,470
the recording that's been played back at

376
00:21:14,470 --> 00:21:20,800
the same time so let's try for the start

377
00:21:20,800 --> 00:21:24,180
just do a sudo command

378
00:21:24,180 --> 00:21:26,830
and they'll enter some August password

379
00:21:26,830 --> 00:21:31,949
and fail

380
00:21:38,080 --> 00:21:43,110
just some output

381
00:21:47,130 --> 00:21:50,929
or interactive editing

382
00:21:58,640 --> 00:22:00,800
just to show that everything is

383
00:22:00,800 --> 00:22:05,150
preserved and you can see exactly what

384
00:22:05,150 --> 00:22:07,330
was happening

385
00:22:19,670 --> 00:22:24,280
or something fancier

386
00:22:53,540 --> 00:22:57,520
and then we end the session

387
00:23:00,210 --> 00:23:03,119
so I need to terminate the playback

388
00:23:03,119 --> 00:23:06,629
explicitly because it doesn't record the

389
00:23:06,629 --> 00:23:09,360
end of the session for now mostly

390
00:23:09,360 --> 00:23:13,100
because sessions can end without warning

391
00:23:13,100 --> 00:23:15,809
so let's see now how this looks in

392
00:23:15,809 --> 00:23:18,678
Journal

393
00:23:25,500 --> 00:23:29,400
so there are some messengers here from T

394
00:23:29,400 --> 00:23:32,370
log which represent the user input and

395
00:23:32,370 --> 00:23:36,809
output and timing if I can highlight

396
00:23:36,809 --> 00:23:39,889
them better at their house

397
00:23:45,120 --> 00:23:48,870
so this two top lines are coming from

398
00:23:48,870 --> 00:23:50,910
Turlock and you can see that it's not

399
00:23:50,910 --> 00:23:54,210
very readable but we'll get back to that

400
00:23:54,210 --> 00:23:57,210
inky bond of a little bit easier you can

401
00:23:57,210 --> 00:24:04,010
also see converted audit messages

402
00:24:04,310 --> 00:24:07,550
already in Jason coming from a shape and

403
00:24:07,550 --> 00:24:11,610
they are slightly more readable this is

404
00:24:11,610 --> 00:24:19,830
basically text structured text so all

405
00:24:19,830 --> 00:24:23,190
this or shape and silicates sent to

406
00:24:23,190 --> 00:24:26,330
elasticsearch two separate indexes and

407
00:24:26,330 --> 00:24:32,300
in Cabana the look something like this

408
00:24:37,940 --> 00:24:42,530
right now we are looking at audit logs

409
00:24:42,530 --> 00:24:47,030
and we'll try to see the processes that

410
00:24:47,030 --> 00:24:50,200
the user executed

411
00:24:58,450 --> 00:25:01,629
so these are all exactly these calls

412
00:25:01,629 --> 00:25:09,879
that the user executed here we can find

413
00:25:09,879 --> 00:25:13,080
our PS command

414
00:25:17,740 --> 00:25:22,080
and has lots of data about what happened

415
00:25:22,080 --> 00:25:32,279
or all in command and you can search for

416
00:25:32,490 --> 00:25:36,450
specific comments

417
00:25:44,820 --> 00:25:47,820
yeah

418
00:25:49,660 --> 00:25:53,430
here is the MC

419
00:25:54,270 --> 00:25:59,460
that's around at the end now if you take

420
00:25:59,460 --> 00:26:05,190
a look at them but the actual user input

421
00:26:05,190 --> 00:26:09,770
and output you can also search it for

422
00:26:09,770 --> 00:26:13,580
let's say you do

423
00:26:23,300 --> 00:26:25,580
and they can see what started the first

424
00:26:25,580 --> 00:26:28,490
one they can see where the super prompt

425
00:26:28,490 --> 00:26:33,850
appeared and then the next message was

426
00:26:33,850 --> 00:26:37,820
another pseudo prompt and then on a

427
00:26:37,820 --> 00:26:40,670
pseudo prompt and then message about

428
00:26:40,670 --> 00:26:43,840
incorrect passwords

429
00:26:48,950 --> 00:26:52,510
any questions about the demo

430
00:27:00,510 --> 00:27:03,880
yes actually the question was can you

431
00:27:03,880 --> 00:27:07,299
see the shortcuts the user used well you

432
00:27:07,299 --> 00:27:09,520
can find that in the in the text in in

433
00:27:09,520 --> 00:27:12,130
the logged messages it will be exactly

434
00:27:12,130 --> 00:27:14,620
as the terminal received them so you

435
00:27:14,620 --> 00:27:16,870
have to search for specific control

436
00:27:16,870 --> 00:27:18,730
characters that the terminal receives

437
00:27:18,730 --> 00:27:24,309
but you can find that and in the perhaps

438
00:27:24,309 --> 00:27:27,700
in the web UI we can add an option to

439
00:27:27,700 --> 00:27:30,130
display these shortcuts somehow I'm not

440
00:27:30,130 --> 00:27:32,049
sure if that they'll be very reliable

441
00:27:32,049 --> 00:27:36,100
because you get the messages to get the

442
00:27:36,100 --> 00:27:38,620
characters from the kernel which

443
00:27:38,620 --> 00:27:40,809
converts them which are converted from

444
00:27:40,809 --> 00:27:41,470
keystrokes

445
00:27:41,470 --> 00:27:44,740
and you can only extrapolate that but

446
00:27:44,740 --> 00:27:52,860
you can kind of try to find that anymore

447
00:27:54,380 --> 00:28:12,830
let's use a mic her I can't quite hear

448
00:28:12,830 --> 00:28:19,010
you well so I'm not familiar with

449
00:28:19,010 --> 00:28:22,850
ordered D so can you just briefly

450
00:28:22,850 --> 00:28:26,570
explain what an auditable event is is it

451
00:28:26,570 --> 00:28:28,490
any command that you enter into the

452
00:28:28,490 --> 00:28:32,960
terminal so the question was how does

453
00:28:32,960 --> 00:28:38,030
hold it work or the D works and how what

454
00:28:38,030 --> 00:28:41,500
kind of data it logs is that right so

455
00:28:41,500 --> 00:28:47,299
what did subsystem is basically a big

456
00:28:47,299 --> 00:28:50,840
number of hooks in the kernel where it

457
00:28:50,840 --> 00:28:54,380
is intercepting cisco's and events that

458
00:28:54,380 --> 00:28:56,450
were happening like the particular

459
00:28:56,450 --> 00:28:58,549
actions that happened in the kernel and

460
00:28:58,549 --> 00:29:01,190
then locks that through that link

461
00:29:01,190 --> 00:29:03,980
interface the user space process and the

462
00:29:03,980 --> 00:29:11,120
data available can be can be basically

463
00:29:11,120 --> 00:29:15,460
those Siskel's and events like

464
00:29:15,460 --> 00:29:18,440
somebody's log log inning logging out

465
00:29:18,440 --> 00:29:21,409
and not not only kernel can write to

466
00:29:21,409 --> 00:29:24,620
those logs but also user space like M or

467
00:29:24,620 --> 00:29:28,070
sudo and there is plenty of data about

468
00:29:28,070 --> 00:29:29,720
what's happening mostly related to

469
00:29:29,720 --> 00:29:33,409
security in fact there can be event for

470
00:29:33,409 --> 00:29:36,250
example like renaming a disk volume

471
00:29:36,250 --> 00:29:38,690
whatever you whatever you can expect

472
00:29:38,690 --> 00:29:41,179
that it would be necessary for tracking

473
00:29:41,179 --> 00:29:43,669
events in the system security wise that

474
00:29:43,669 --> 00:29:48,000
will be there okay so

475
00:29:48,000 --> 00:29:50,370
I will leave some time for questions at

476
00:29:50,370 --> 00:29:54,110
the end for now

477
00:29:54,110 --> 00:29:57,390
next is I'm going to tell you how this

478
00:29:57,390 --> 00:29:59,450
works

479
00:30:09,230 --> 00:30:13,070
so the basic basic process how to log is

480
00:30:13,070 --> 00:30:16,600
started and how it records is the user

481
00:30:16,600 --> 00:30:19,940
we will take an example of login at the

482
00:30:19,940 --> 00:30:22,309
local console which is handled by

483
00:30:22,309 --> 00:30:26,360
program called logging and what login

484
00:30:26,360 --> 00:30:29,330
does is it verifies user credentials

485
00:30:29,330 --> 00:30:34,279
using Pam and then it retrieves the

486
00:30:34,279 --> 00:30:35,600
shell that it should start

487
00:30:35,600 --> 00:30:37,970
if the credentials were correct from an

488
00:30:37,970 --> 00:30:42,380
SS and this is where we configure an SS

489
00:30:42,380 --> 00:30:45,200
by Putin for example by changing for

490
00:30:45,200 --> 00:30:49,580
example passwd file we say that this

491
00:30:49,580 --> 00:30:53,600
user will not use bash or other shell we

492
00:30:53,600 --> 00:30:56,240
will tell it that the user is going to

493
00:30:56,240 --> 00:30:59,330
be using T log as the shell so login

494
00:30:59,330 --> 00:31:02,630
receives that information from NSS and

495
00:31:02,630 --> 00:31:07,850
start Zillow which retrieves the actual

496
00:31:07,850 --> 00:31:10,340
shell to start from its environment or

497
00:31:10,340 --> 00:31:13,429
from its configuration and then starts

498
00:31:13,429 --> 00:31:16,100
that shell under a PT Y which is

499
00:31:16,100 --> 00:31:19,490
observed at terminal and it intercepts

500
00:31:19,490 --> 00:31:21,289
what is going between that cell the

501
00:31:21,289 --> 00:31:25,730
terminal and the actual terminal and

502
00:31:25,730 --> 00:31:30,919
locks that and that was the most basic

503
00:31:30,919 --> 00:31:32,450
case but this is what we are planning

504
00:31:32,450 --> 00:31:39,740
for s SSD since SSD has modules and Pam

505
00:31:39,740 --> 00:31:42,380
and and SS and can control what goes in

506
00:31:42,380 --> 00:31:44,899
and out of there we can do this

507
00:31:44,899 --> 00:31:47,149
dynamically and for the start we are

508
00:31:47,149 --> 00:31:50,899
doing local configuration where in local

509
00:31:50,899 --> 00:31:52,970
configuration of SSD you can write I

510
00:31:52,970 --> 00:31:55,519
will direct this users they will direct

511
00:31:55,519 --> 00:31:59,539
these groups that when logging accesses

512
00:31:59,539 --> 00:32:03,529
NSS to receive the shell assesses the

513
00:32:03,529 --> 00:32:05,960
will check if the user matches that

514
00:32:05,960 --> 00:32:08,330
shall the matches matches that list of

515
00:32:08,330 --> 00:32:10,669
users or that list of groups and then it

516
00:32:10,669 --> 00:32:13,490
will say the user shell is still logged

517
00:32:13,490 --> 00:32:17,110
not the actual shell and when

518
00:32:17,110 --> 00:32:20,419
Logan sets up this session for the user

519
00:32:20,419 --> 00:32:22,669
to log in in particular the environment

520
00:32:22,669 --> 00:32:23,529
for the user

521
00:32:23,529 --> 00:32:27,169
SSST can again check if that user is to

522
00:32:27,169 --> 00:32:29,090
be recorded by mentioned user names and

523
00:32:29,090 --> 00:32:31,700
group names and it can put the actual

524
00:32:31,700 --> 00:32:33,740
shelter start in the environment as an

525
00:32:33,740 --> 00:32:36,139
environment arrival which will then be

526
00:32:36,139 --> 00:32:39,289
picked by T log when it started and

527
00:32:39,289 --> 00:32:42,399
clock will start the actual shell and

528
00:32:42,399 --> 00:32:47,389
then it's preceded again BTY actual

529
00:32:47,389 --> 00:32:50,480
shell passing the data over between them

530
00:32:50,480 --> 00:32:54,500
and login that that's the plan for this

531
00:32:54,500 --> 00:32:58,129
is the integration they further plan

532
00:32:58,129 --> 00:33:00,769
this for pre API integration for

533
00:33:00,769 --> 00:33:02,750
identity management integration is to

534
00:33:02,750 --> 00:33:05,570
have something that to have something

535
00:33:05,570 --> 00:33:08,419
like their what we already have we have

536
00:33:08,419 --> 00:33:11,090
a CL Linux configuration where you can

537
00:33:11,090 --> 00:33:15,259
sign host based access control rules H

538
00:33:15,259 --> 00:33:20,690
back rules to SEO Linux maps and then

539
00:33:20,690 --> 00:33:26,320
assess SD would download applicable Maps

540
00:33:26,320 --> 00:33:30,820
locally and mesh them for specific users

541
00:33:30,820 --> 00:33:36,259
and implement them but in this case in

542
00:33:36,259 --> 00:33:37,820
the case of chiloé configuration we

543
00:33:37,820 --> 00:33:39,110
would basically store tillow

544
00:33:39,110 --> 00:33:43,149
configuration Jason in directory and

545
00:33:43,149 --> 00:33:46,700
also do matching on the local side and

546
00:33:46,700 --> 00:33:50,149
provide the to log with configuration or

547
00:33:50,149 --> 00:33:52,779
environment

548
00:33:55,649 --> 00:34:00,279
so tillow can can be configured to

549
00:34:00,279 --> 00:34:03,009
record input and output and window

550
00:34:03,009 --> 00:34:06,340
resizes which actually the last part is

551
00:34:06,340 --> 00:34:08,619
not what ever like look not everyone

552
00:34:08,619 --> 00:34:11,260
does that usually even though side

553
00:34:11,260 --> 00:34:12,819
resizes are not logged and you are

554
00:34:12,819 --> 00:34:15,969
restricted to that we are not yet

555
00:34:15,969 --> 00:34:17,679
supporting that on playback but in the

556
00:34:17,679 --> 00:34:20,050
web UI we will be observing the window

557
00:34:20,050 --> 00:34:21,520
resizes under size in the UI

558
00:34:21,520 --> 00:34:25,839
appropriately there is a configuration

559
00:34:25,839 --> 00:34:27,369
for the Lotus that you're supposed to

560
00:34:27,369 --> 00:34:29,469
display before starts recording and if

561
00:34:29,469 --> 00:34:31,030
you really want to you can remove it

562
00:34:31,030 --> 00:34:37,780
altogether and then yeah you can choose

563
00:34:37,780 --> 00:34:40,179
to try to syslog or file and you can

564
00:34:40,179 --> 00:34:43,179
also choose to if you want the recording

565
00:34:43,179 --> 00:34:46,109
delivered it's low latency very fast or

566
00:34:46,109 --> 00:34:50,109
if you want to save on overhead of all

567
00:34:50,109 --> 00:34:54,069
the syslog headers and the common fields

568
00:34:54,069 --> 00:34:56,739
that you log logs and tell it's a lot

569
00:34:56,739 --> 00:35:00,099
big messages and yeah there is already a

570
00:35:00,099 --> 00:35:01,930
tool to playback from elastic search as

571
00:35:01,930 --> 00:35:03,970
you saw but from file which is useful

572
00:35:03,970 --> 00:35:08,829
for the bugging it's a couple words

573
00:35:08,829 --> 00:35:12,569
about the schema that is used for

574
00:35:12,569 --> 00:35:17,380
encoding the session so we have to chop

575
00:35:17,380 --> 00:35:21,069
that chop the stream into messages into

576
00:35:21,069 --> 00:35:22,869
discreet messages because it's smoke you

577
00:35:22,869 --> 00:35:24,790
can just write there indefinitely as

578
00:35:24,790 --> 00:35:28,720
opposed to local chunks and restore

579
00:35:28,720 --> 00:35:30,670
input and output in separate fields so

580
00:35:30,670 --> 00:35:32,049
that you can actually search it because

581
00:35:32,049 --> 00:35:34,119
if you store the stream as it comes from

582
00:35:34,119 --> 00:35:37,150
the terminal just as it goes you will

583
00:35:37,150 --> 00:35:40,599
have them mixed all together for example

584
00:35:40,599 --> 00:35:42,760
when you you type a comment on your

585
00:35:42,760 --> 00:35:45,819
shell in this case you would receive two

586
00:35:45,819 --> 00:35:48,130
characters for each character you typed

587
00:35:48,130 --> 00:35:51,280
for the input and for the output so to

588
00:35:51,280 --> 00:35:53,410
be able to search them maybe sort them

589
00:35:53,410 --> 00:35:56,470
separately similarly how to do I or

590
00:35:56,470 --> 00:36:01,569
according does of course you can output

591
00:36:01,569 --> 00:36:04,500
anything on the terminal but

592
00:36:04,500 --> 00:36:08,060
Jason has to develop and be invalid

593
00:36:08,060 --> 00:36:13,770
means having valid utf-8 and Jason so we

594
00:36:13,770 --> 00:36:15,750
have to handle somehow binary data and

595
00:36:15,750 --> 00:36:18,510
which is invalid utf-8 Jason and we

596
00:36:18,510 --> 00:36:20,910
encode that separately as a byte array

597
00:36:20,910 --> 00:36:25,020
and perhaps will change that later but

598
00:36:25,020 --> 00:36:30,270
we will preserve binary data always then

599
00:36:30,270 --> 00:36:32,760
we store also millisecond precision

600
00:36:32,760 --> 00:36:35,880
timing when you type chlorophyll is

601
00:36:35,880 --> 00:36:38,250
preserved how fast you type and what you

602
00:36:38,250 --> 00:36:42,750
did and then yes they even diverse iris

603
00:36:42,750 --> 00:36:45,450
as well they are preserved is timing and

604
00:36:45,450 --> 00:36:47,910
the schema actually is done in a way

605
00:36:47,910 --> 00:36:52,530
where if you want to you can after login

606
00:36:52,530 --> 00:36:54,480
already if after you store everything

607
00:36:54,480 --> 00:36:56,790
elasticsearch you can go over those

608
00:36:56,790 --> 00:36:58,740
messages and combine them into bigger

609
00:36:58,740 --> 00:37:00,960
messages or even combine the whole

610
00:37:00,960 --> 00:37:05,730
session in a single message in a single

611
00:37:05,730 --> 00:37:08,720
elasticsearch document

612
00:37:13,480 --> 00:37:16,690
our shape it works simpler than too long

613
00:37:16,690 --> 00:37:22,420
basically we refuse streaming it runs on

614
00:37:22,420 --> 00:37:25,420
this petite blonde and the chain goes

615
00:37:25,420 --> 00:37:28,420
from Colonel where it's feeding the log

616
00:37:28,420 --> 00:37:29,950
messages through that link toward D

617
00:37:29,950 --> 00:37:33,790
which feeds binary binary data to

618
00:37:33,790 --> 00:37:37,990
audacity and which formats the actual

619
00:37:37,990 --> 00:37:40,750
audit log messages which is then fed to

620
00:37:40,750 --> 00:37:43,960
our shape and converted to Jason and

621
00:37:43,960 --> 00:37:46,690
passed over to elastic search through

622
00:37:46,690 --> 00:37:49,210
fluency RC slow corner locks - whichever

623
00:37:49,210 --> 00:37:55,690
you prefer so as I already said we try

624
00:37:55,690 --> 00:37:57,160
to keep the structure as close as

625
00:37:57,160 --> 00:38:01,569
possible to the audit structure and both

626
00:38:01,569 --> 00:38:06,339
Jason and maximal kept similar so it's

627
00:38:06,339 --> 00:38:10,210
easier to reason about them and we

628
00:38:10,210 --> 00:38:13,900
preserve both the raw wood it feels like

629
00:38:13,900 --> 00:38:16,960
user IDs and we add also the

630
00:38:16,960 --> 00:38:20,490
interpretation so-called interpretation

631
00:38:20,490 --> 00:38:23,040
like converting user ID the username

632
00:38:23,040 --> 00:38:27,430
locally because it might be late if it's

633
00:38:27,430 --> 00:38:29,380
already on the on elasticsearch to

634
00:38:29,380 --> 00:38:30,760
convert anything because you don't have

635
00:38:30,760 --> 00:38:33,760
access to use of databases and things

636
00:38:33,760 --> 00:38:34,829
like that

637
00:38:34,829 --> 00:38:39,190
apart from actual parsed ordered data we

638
00:38:39,190 --> 00:38:42,369
also preserve the raw text as we

639
00:38:42,369 --> 00:38:44,619
received it because some regulations

640
00:38:44,619 --> 00:38:46,150
might require it and it's useful for

641
00:38:46,150 --> 00:38:49,119
debugging and that's the next step we're

642
00:38:49,119 --> 00:38:50,640
planning to add so-called

643
00:38:50,640 --> 00:38:53,200
audit normalizations it's a new feature

644
00:38:53,200 --> 00:38:59,230
which showed it works on where semantic

645
00:38:59,230 --> 00:39:01,599
information is extracted from all these

646
00:39:01,599 --> 00:39:06,329
messages and represented as a triplet of

647
00:39:06,329 --> 00:39:09,579
subject action and object where it would

648
00:39:09,579 --> 00:39:12,480
record this subject is particularly user

649
00:39:12,480 --> 00:39:17,020
trying to try to write does an action to

650
00:39:17,020 --> 00:39:19,030
this particular file as an object and

651
00:39:19,030 --> 00:39:22,410
with this result success

652
00:39:22,410 --> 00:39:26,130
failure and that date allows for very

653
00:39:26,130 --> 00:39:27,960
interesting visualizations of what was

654
00:39:27,960 --> 00:39:29,940
happening which actors existed on the

655
00:39:29,940 --> 00:39:33,680
system and what they did and or

656
00:39:33,680 --> 00:39:37,289
vice-versa who acted on this specific

657
00:39:37,289 --> 00:39:41,690
object and when and this also allows

658
00:39:41,690 --> 00:39:44,430
formatting human readable messages

659
00:39:44,430 --> 00:39:50,519
compared to draw audit data where you

660
00:39:50,519 --> 00:39:57,150
would see actual event easily and they

661
00:39:57,150 --> 00:40:00,869
plan to use that in web UI so there is

662
00:40:00,869 --> 00:40:04,500
an example this is heavily dreamed as

663
00:40:04,500 --> 00:40:07,859
you saw there's much more data but this

664
00:40:07,859 --> 00:40:16,308
is easier to grasp okay

665
00:40:16,560 --> 00:40:20,100
so for to log we still have to deal with

666
00:40:20,100 --> 00:40:24,060
recording passwords because even though

667
00:40:24,060 --> 00:40:27,240
by default the input recording is turned

668
00:40:27,240 --> 00:40:28,680
off if you turn it on it will record

669
00:40:28,680 --> 00:40:30,780
everything and there is a bit of a

670
00:40:30,780 --> 00:40:34,170
difficulty in excluding password and Pam

671
00:40:34,170 --> 00:40:38,430
TTY uses this approach of detection when

672
00:40:38,430 --> 00:40:40,980
they echo is turned off and it stops

673
00:40:40,980 --> 00:40:46,160
recording but that is of course you know

674
00:40:46,160 --> 00:40:52,730
not not secure but on the other hand

675
00:40:52,730 --> 00:40:55,560
there are many many more ways to avoid

676
00:40:55,560 --> 00:40:57,990
being recorded for example you can

677
00:40:57,990 --> 00:41:01,290
upload a script and then name it as a

678
00:41:01,290 --> 00:41:05,070
common comment which doesn't doesn't

679
00:41:05,070 --> 00:41:08,160
raise any flags or anything and then two

680
00:41:08,160 --> 00:41:12,120
weeks later you can execute it but

681
00:41:12,120 --> 00:41:13,770
that's why we need audit logs as well

682
00:41:13,770 --> 00:41:16,110
where the actual disrepute of comments

683
00:41:16,110 --> 00:41:17,910
and actual executed processes are

684
00:41:17,910 --> 00:41:21,030
recorded we also need to know detect

685
00:41:21,030 --> 00:41:22,380
when we are running on the graphical

686
00:41:22,380 --> 00:41:25,740
session because the graphical sessions

687
00:41:25,740 --> 00:41:30,390
also get one session ID and that means

688
00:41:30,390 --> 00:41:32,100
that all the terminals terminal

689
00:41:32,100 --> 00:41:34,140
emulators that the open will get the

690
00:41:34,140 --> 00:41:36,090
same session ID and there is basically

691
00:41:36,090 --> 00:41:38,610
no way to distinguish them so we need to

692
00:41:38,610 --> 00:41:40,470
detect that and stop recording and live

693
00:41:40,470 --> 00:41:42,900
recording graphical sessions to other

694
00:41:42,900 --> 00:41:45,450
software which records graphics which is

695
00:41:45,450 --> 00:41:49,200
work for future and they need to support

696
00:41:49,200 --> 00:41:53,190
converting terminal encoding character

697
00:41:53,190 --> 00:41:55,680
encodings because some people still use

698
00:41:55,680 --> 00:41:59,100
other encodings except utf-8 and that

699
00:41:59,100 --> 00:42:03,150
was its own difficulties like invalid

700
00:42:03,150 --> 00:42:06,720
characters etc so for our shape there is

701
00:42:06,720 --> 00:42:09,630
a problem and in that budget lock is a

702
00:42:09,630 --> 00:42:12,090
big mess nobody knows what can appear

703
00:42:12,090 --> 00:42:15,210
there exactly we know the developers we

704
00:42:15,210 --> 00:42:17,790
have they have long history and even the

705
00:42:17,790 --> 00:42:19,470
know the developers are not able to

706
00:42:19,470 --> 00:42:22,500
reproduce some events that are supposed

707
00:42:22,500 --> 00:42:25,700
to happen and we somehow need to make it

708
00:42:25,700 --> 00:42:28,130
they make a schema that we go

709
00:42:28,130 --> 00:42:31,250
be reliable and so people can parse it

710
00:42:31,250 --> 00:42:34,640
and can actually use it and again the

711
00:42:34,640 --> 00:42:41,180
character encoding conversion so the

712
00:42:41,180 --> 00:42:43,790
latest plans is to try to get web the

713
00:42:43,790 --> 00:42:45,380
first webview I work in an cockpit

714
00:42:45,380 --> 00:42:48,700
project which is a several management UI

715
00:42:48,700 --> 00:42:55,280
mostly for fedora and well also for L we

716
00:42:55,280 --> 00:42:57,200
are planning to basically just record

717
00:42:57,200 --> 00:42:59,450
local sessions tour the local and let

718
00:42:59,450 --> 00:43:01,850
you play back in the in the cockpit UI

719
00:43:01,850 --> 00:43:07,250
in the terminal emulator so it's it's

720
00:43:07,250 --> 00:43:10,670
easy to try both to log in the shape you

721
00:43:10,670 --> 00:43:12,410
can download the list release our

722
00:43:12,410 --> 00:43:14,000
players which are very fresh I just did

723
00:43:14,000 --> 00:43:16,910
them two days ago or you can build it

724
00:43:16,910 --> 00:43:18,920
yourself the dependencies are very short

725
00:43:18,920 --> 00:43:22,330
the list of depends is very short and

726
00:43:22,330 --> 00:43:25,040
you can log and way back to walk to and

727
00:43:25,040 --> 00:43:27,710
from file and to elasticsearch and there

728
00:43:27,710 --> 00:43:29,720
are the instructions for setting all of

729
00:43:29,720 --> 00:43:33,890
that up they are indeed knee all shape

730
00:43:33,890 --> 00:43:35,510
is even easier there's just one

731
00:43:35,510 --> 00:43:38,450
dependency instructions are also in read

732
00:43:38,450 --> 00:43:41,990
me and you can just take your own

733
00:43:41,990 --> 00:43:43,640
ordered lock if you have on the system

734
00:43:43,640 --> 00:43:49,490
most probably convert it and see how it

735
00:43:49,490 --> 00:43:55,310
looks okay we have five minutes any

736
00:43:55,310 --> 00:43:57,759
questions

737
00:43:59,280 --> 00:44:01,970
go ahead

738
00:44:07,320 --> 00:44:11,560
so it wasn't very clear to me how you

739
00:44:11,560 --> 00:44:14,470
did the replaying of the sessions it

740
00:44:14,470 --> 00:44:19,150
seemed to me that you were sending some

741
00:44:19,150 --> 00:44:23,350
of the inputs when a certain buffer was

742
00:44:23,350 --> 00:44:28,660
full but not delineated on commands is

743
00:44:28,660 --> 00:44:30,210
that correct

744
00:44:30,210 --> 00:44:32,710
which which gave a really smooth

745
00:44:32,710 --> 00:44:34,600
experience when you were doing the

746
00:44:34,600 --> 00:44:39,700
replay the instantaneous replay but I am

747
00:44:39,700 --> 00:44:42,190
wondering whether that doesn't

748
00:44:42,190 --> 00:44:45,300
compromise search ability

749
00:44:45,960 --> 00:44:49,960
yes the search in the question was does

750
00:44:49,960 --> 00:44:53,050
the recording actual input and output is

751
00:44:53,050 --> 00:44:55,540
it really searchable that much is that

752
00:44:55,540 --> 00:45:00,430
the question because there's yeah it's a

753
00:45:00,430 --> 00:45:02,950
I would say that recording actual input

754
00:45:02,950 --> 00:45:05,580
and output is more of an illustration of

755
00:45:05,580 --> 00:45:08,410
the what actually happened and the

756
00:45:08,410 --> 00:45:12,220
moment the main logs are audit logs if

757
00:45:12,220 --> 00:45:13,930
you want to search for something exactly

758
00:45:13,930 --> 00:45:15,550
it should search the audit logs which

759
00:45:15,550 --> 00:45:18,580
will be both of these session novels and

760
00:45:18,580 --> 00:45:20,170
the input and output an audit logs will

761
00:45:20,170 --> 00:45:21,690
be searchable through the same interface

762
00:45:21,690 --> 00:45:25,180
so the session the recording of the

763
00:45:25,180 --> 00:45:27,160
screen and the input is needed to make

764
00:45:27,160 --> 00:45:28,900
it easier to understand what's happening

765
00:45:28,900 --> 00:45:32,110
but it's not the not the authoritative

766
00:45:32,110 --> 00:45:37,020
data it's very easy to stew to spoof

767
00:45:37,020 --> 00:45:40,450
things in there but it helps a lot if

768
00:45:40,450 --> 00:45:42,810
you have

769
00:45:45,090 --> 00:45:49,800
so as this is more thought about

770
00:45:49,800 --> 00:45:54,010
corporations is there any ETA for Red

771
00:45:54,010 --> 00:45:59,500
Hat Enterprise Linux support well the

772
00:45:59,500 --> 00:46:02,230
question was is this going to be

773
00:46:02,230 --> 00:46:05,860
supported in rel is there some kind of

774
00:46:05,860 --> 00:46:08,170
roadmap or timeline when it's going to

775
00:46:08,170 --> 00:46:12,430
be there yeah the question was is there

776
00:46:12,430 --> 00:46:14,830
any timeline for inclusion into Red Hat

777
00:46:14,830 --> 00:46:19,960
Enterprise Linux so far I can't promise

778
00:46:19,960 --> 00:46:24,610
anything we are working on door right

779
00:46:24,610 --> 00:46:27,070
now so to log is in fedora but an old

780
00:46:27,070 --> 00:46:28,660
version I'm going to be updating it

781
00:46:28,660 --> 00:46:32,410
there and those shape actually there is

782
00:46:32,410 --> 00:46:34,360
a question of how shape will continue

783
00:46:34,360 --> 00:46:36,520
whether it will be a part of order deed

784
00:46:36,520 --> 00:46:40,080
or whether it will be a separate package

785
00:46:40,080 --> 00:46:42,780
that will depend on actually what

786
00:46:42,780 --> 00:46:45,670
customers on users want what they how

787
00:46:45,670 --> 00:46:48,490
they perceive the usefulness of it but

788
00:46:48,490 --> 00:46:50,200
eventually it will make its way into

789
00:46:50,200 --> 00:46:54,850
Fedora and I expect it is likely that it

790
00:46:54,850 --> 00:46:57,460
will be a part of cockpit in a way as I

791
00:46:57,460 --> 00:47:00,090
said and that means Fedora

792
00:47:00,090 --> 00:47:02,800
but the ultimate target is of course

793
00:47:02,800 --> 00:47:06,040
getting this Tyrell and making it usable

794
00:47:06,040 --> 00:47:09,580
not only as part of a huge for example

795
00:47:09,580 --> 00:47:13,150
that VIP project where you are supposed

796
00:47:13,150 --> 00:47:16,780
to have open ship and all the login

797
00:47:16,780 --> 00:47:21,670
setup and everything but also usable in

798
00:47:21,670 --> 00:47:23,740
smaller setups and not necessarily in

799
00:47:23,740 --> 00:47:25,570
the realm of fedora it can be tendon or

800
00:47:25,570 --> 00:47:26,100
anything

801
00:47:26,100 --> 00:47:30,550
so yes the ultimate target Israel but I

802
00:47:30,550 --> 00:47:34,560
can't tell you the exact dates

803
00:47:37,710 --> 00:47:41,190
presentation you know the section trade

804
00:47:41,190 --> 00:47:44,860
you talk about two tones to mark and the

805
00:47:44,860 --> 00:47:49,630
new shape yes and is it included in the

806
00:47:49,630 --> 00:47:53,190
radical distribution it may be with me

807
00:47:53,190 --> 00:47:55,390
the question was

808
00:47:55,390 --> 00:47:57,430
see Logan the shape are to log in the

809
00:47:57,430 --> 00:47:59,410
shape included into redheads

810
00:47:59,410 --> 00:48:02,980
distributions not yet you can download

811
00:48:02,980 --> 00:48:05,740
RPM packages and try that they have

812
00:48:05,740 --> 00:48:07,600
packages for a rail and they have

813
00:48:07,600 --> 00:48:10,990
packages for fedora several versions you

814
00:48:10,990 --> 00:48:12,550
can easily try it or you can build it

815
00:48:12,550 --> 00:48:15,010
yourself but ultimately yes it will be

816
00:48:15,010 --> 00:48:20,830
in route and in fedora any more

817
00:48:20,830 --> 00:48:26,280
questions I have finished candy here

818
00:48:26,280 --> 00:48:28,660
well when they are over I know that

819
00:48:28,660 --> 00:48:31,200
first M is almost over come and take

820
00:48:31,200 --> 00:48:42,610
some candy thank you very much very

821
00:48:42,610 --> 00:48:46,350
interesting thank you

