1
00:00:00,030 --> 00:00:02,690
almost

2
00:00:04,600 --> 00:00:08,019
he can give us okay yeah so uh hi my

3
00:00:08,019 --> 00:00:10,150
name is Tillman chela I work in the

4
00:00:10,150 --> 00:00:12,610
Samsung open source group and I'm here

5
00:00:12,610 --> 00:00:15,279
today to talk about Jerry script so I'll

6
00:00:15,279 --> 00:00:17,650
start off just talking a little bit

7
00:00:17,650 --> 00:00:20,650
about JavaScript what it does how it

8
00:00:20,650 --> 00:00:23,050
works and so on and then I'll show you a

9
00:00:23,050 --> 00:00:25,780
quick demo data set up on the table

10
00:00:25,780 --> 00:00:28,000
there in front already and then we'll

11
00:00:28,000 --> 00:00:31,810
have time for a couple of questions so

12
00:00:31,810 --> 00:00:34,510
yeah essentially what is Jerry script

13
00:00:34,510 --> 00:00:36,999
Jerry script is a really lightweight

14
00:00:36,999 --> 00:00:40,210
JavaScript engine so we developed that

15
00:00:40,210 --> 00:00:42,940
from scratch and really with the goal of

16
00:00:42,940 --> 00:00:46,690
having an engine that can run on really

17
00:00:46,690 --> 00:00:48,899
resource constrained microcontrollers so

18
00:00:48,899 --> 00:00:52,239
devices let's say I think like 32k of

19
00:00:52,239 --> 00:00:54,389
RAM is is what you need to do something

20
00:00:54,389 --> 00:00:57,670
which is not just a hello world so for a

21
00:00:57,670 --> 00:01:00,729
hello world you right now you need 3k of

22
00:01:00,729 --> 00:01:03,100
RAM so that's basically the bare minimum

23
00:01:03,100 --> 00:01:05,319
of memory that you need on the device

24
00:01:05,319 --> 00:01:09,939
and yeah as I said originally it was

25
00:01:09,939 --> 00:01:12,729
developed by Samsung but now we have a

26
00:01:12,729 --> 00:01:15,430
small community around it various

27
00:01:15,430 --> 00:01:18,329
different companies contributing and

28
00:01:18,329 --> 00:01:21,189
it's an open source project so it's

29
00:01:21,189 --> 00:01:24,310
released under the Apache License 2.0

30
00:01:24,310 --> 00:01:28,890
and you can find it on github and yeah

31
00:01:28,890 --> 00:01:33,609
so yeah one of the first questions

32
00:01:33,609 --> 00:01:35,560
usually we get when we talk about Jerry

33
00:01:35,560 --> 00:01:38,140
script is that people ask why do you

34
00:01:38,140 --> 00:01:39,789
even want to run JavaScript on a

35
00:01:39,789 --> 00:01:42,570
microcontroller why not just use C and

36
00:01:42,570 --> 00:01:45,929
the motivation for that is that

37
00:01:45,929 --> 00:01:48,100
javascript is such a popular language

38
00:01:48,100 --> 00:01:51,070
and it's really easy to you to use and

39
00:01:51,070 --> 00:01:54,700
to learn and there so many developers

40
00:01:54,700 --> 00:01:57,340
out there that we just want to give them

41
00:01:57,340 --> 00:02:01,600
a way to develop for small low-end

42
00:02:01,600 --> 00:02:04,359
IOT devices in the languages they used

43
00:02:04,359 --> 00:02:07,569
to and and yeah with the tools that they

44
00:02:07,569 --> 00:02:10,000
used to so that's kind of our core

45
00:02:10,000 --> 00:02:13,930
motivation for doing this and the other

46
00:02:13,930 --> 00:02:16,030
thing is that in this segment like small

47
00:02:16,030 --> 00:02:17,350
IOT connected

48
00:02:17,350 --> 00:02:19,420
is running on a microcontroller that you

49
00:02:19,420 --> 00:02:21,910
typically are not really you don't

50
00:02:21,910 --> 00:02:23,620
really run performance critical code

51
00:02:23,620 --> 00:02:26,740
there is more like control tasks pulling

52
00:02:26,740 --> 00:02:28,300
some sense or sending some Network

53
00:02:28,300 --> 00:02:32,200
messages and so there you can also at

54
00:02:32,200 --> 00:02:34,540
least to a certain extent get away with

55
00:02:34,540 --> 00:02:37,000
the inherent performance overhead a

56
00:02:37,000 --> 00:02:41,530
JavaScript engine always has and the the

57
00:02:41,530 --> 00:02:44,350
other thing is that or the hope is that

58
00:02:44,350 --> 00:02:46,240
JavaScript being a higher level language

59
00:02:46,240 --> 00:02:49,210
then see you you can be more productive

60
00:02:49,210 --> 00:02:51,900
you can write a code faster develop your

61
00:02:51,900 --> 00:02:54,340
application faster and also your

62
00:02:54,340 --> 00:02:56,830
products and get them shipped faster so

63
00:02:56,830 --> 00:03:00,190
that's kind of the the hope there and

64
00:03:00,190 --> 00:03:03,370
another interesting aspect is that with

65
00:03:03,370 --> 00:03:05,440
JavaScript it's also really easy to just

66
00:03:05,440 --> 00:03:09,010
load some code over the web and so you

67
00:03:09,010 --> 00:03:11,050
could think for example you have a small

68
00:03:11,050 --> 00:03:13,440
microcontroller and then run an

69
00:03:13,440 --> 00:03:16,180
webserver on that like a really really

70
00:03:16,180 --> 00:03:19,390
simple light white one and connect with

71
00:03:19,390 --> 00:03:22,090
a web browser and enter some JavaScript

72
00:03:22,090 --> 00:03:24,220
code executed life on the device and

73
00:03:24,220 --> 00:03:26,410
maybe interact with some peripherals

74
00:03:26,410 --> 00:03:28,390
connected to the microcontroller so

75
00:03:28,390 --> 00:03:29,830
that's something especially for

76
00:03:29,830 --> 00:03:31,990
prototyping I think that's would be an

77
00:03:31,990 --> 00:03:34,210
interesting use case and that's very

78
00:03:34,210 --> 00:03:36,760
easy to do with JavaScript but if you

79
00:03:36,760 --> 00:03:39,580
want to do this with C this will be much

80
00:03:39,580 --> 00:03:42,280
more complicated so that's that's kind

81
00:03:42,280 --> 00:03:44,350
of one the dynamic nature of JavaScript

82
00:03:44,350 --> 00:03:49,030
helps a bit there so yeah just a couple

83
00:03:49,030 --> 00:03:51,340
of like kind of the key characteristics

84
00:03:51,340 --> 00:03:54,720
of JavaScript to give you a better idea

85
00:03:54,720 --> 00:03:57,760
essentially the single most optimal

86
00:03:57,760 --> 00:04:00,010
single most important optimization goal

87
00:04:00,010 --> 00:04:03,040
is to have a low memory footprint

88
00:04:03,040 --> 00:04:05,500
because that's typically the resource

89
00:04:05,500 --> 00:04:07,570
you are the most constrained on the

90
00:04:07,570 --> 00:04:10,120
device we also care a lot about

91
00:04:10,120 --> 00:04:12,790
performance and the code size of the

92
00:04:12,790 --> 00:04:15,820
engine itself but a lot of the

93
00:04:15,820 --> 00:04:17,738
optimizations are really targeted to

94
00:04:17,738 --> 00:04:20,920
keeping the memory usage as low as

95
00:04:20,920 --> 00:04:23,560
possible and that's also why we do

96
00:04:23,560 --> 00:04:25,840
things like so we don't do any

97
00:04:25,840 --> 00:04:27,580
just-in-time compilation we just don't

98
00:04:27,580 --> 00:04:29,570
have enough space for that

99
00:04:29,570 --> 00:04:31,820
so we we just have an a classic

100
00:04:31,820 --> 00:04:34,280
interpreter which executes the

101
00:04:34,280 --> 00:04:37,340
javascript bytecode and all those things

102
00:04:37,340 --> 00:04:41,990
and to achieve the the low memory

103
00:04:41,990 --> 00:04:44,390
footprint we do various different things

104
00:04:44,390 --> 00:04:46,820
so one thing is that we have a very

105
00:04:46,820 --> 00:04:50,300
compact object representation so all the

106
00:04:50,300 --> 00:04:52,370
the data structures that we need in the

107
00:04:52,370 --> 00:04:54,680
engine to represent a JavaScript object

108
00:04:54,680 --> 00:04:57,740
so that is very much optimized to be as

109
00:04:57,740 --> 00:05:00,620
compact as possible and then we we also

110
00:05:00,620 --> 00:05:03,880
do things like pointer compression so

111
00:05:03,880 --> 00:05:07,790
internally on our heap we use 16-bit

112
00:05:07,790 --> 00:05:09,860
pointers even though we typically

113
00:05:09,860 --> 00:05:14,180
execute on a 32-bit host so that way

114
00:05:14,180 --> 00:05:17,770
especially for pointer heavy programs we

115
00:05:17,770 --> 00:05:20,060
we save a lot of memory because

116
00:05:20,060 --> 00:05:22,070
essentially our pointers are half the

117
00:05:22,070 --> 00:05:25,990
size than they would would be regularly

118
00:05:25,990 --> 00:05:29,150
so obviously that you have to pay the

119
00:05:29,150 --> 00:05:31,640
price in terms of whenever there is a

120
00:05:31,640 --> 00:05:35,660
access to memory you have to compress or

121
00:05:35,660 --> 00:05:39,920
decompress the pointer but what from

122
00:05:39,920 --> 00:05:42,410
what we've seen is still the trade-off

123
00:05:42,410 --> 00:05:44,360
is still if you are on a constrained

124
00:05:44,360 --> 00:05:47,530
device to still pays off over all and

125
00:05:47,530 --> 00:05:50,480
for people who who don't want to use

126
00:05:50,480 --> 00:05:52,160
compressed pointers we also have an

127
00:05:52,160 --> 00:05:54,410
option to turn that off and that also

128
00:05:54,410 --> 00:05:55,820
gives you a larger address space so

129
00:05:55,820 --> 00:05:57,350
right now with pointer compression

130
00:05:57,350 --> 00:06:00,830
turned on you can just address 512k of

131
00:06:00,830 --> 00:06:03,650
memory which is for most of the really

132
00:06:03,650 --> 00:06:06,560
small devices just fine but yeah if you

133
00:06:06,560 --> 00:06:08,450
have a device with two megabytes and you

134
00:06:08,450 --> 00:06:11,450
really want to use that then you you can

135
00:06:11,450 --> 00:06:14,000
also turn it off in terms of translation

136
00:06:14,000 --> 00:06:16,280
from the sources to the byte code that

137
00:06:16,280 --> 00:06:19,580
we actually execute there's we try to be

138
00:06:19,580 --> 00:06:22,040
as lightweight as possible so we go

139
00:06:22,040 --> 00:06:23,810
while we are passing we are already

140
00:06:23,810 --> 00:06:26,510
creating the bytecode instructions and

141
00:06:26,510 --> 00:06:30,280
we are not having any intermediate

142
00:06:30,280 --> 00:06:33,050
representations in between so we don't

143
00:06:33,050 --> 00:06:35,810
even construct an AST so a C stands for

144
00:06:35,810 --> 00:06:38,180
abstract syntax tree so we go straight

145
00:06:38,180 --> 00:06:40,800
while we pass we already create the

146
00:06:40,800 --> 00:06:45,210
code and at the at the very core of the

147
00:06:45,210 --> 00:06:49,020
engine is the compact bytecode of Terry

148
00:06:49,020 --> 00:06:52,020
scripts so that's also what one of the

149
00:06:52,020 --> 00:06:54,289
key features that makes JavaScript

150
00:06:54,289 --> 00:06:57,780
successful so this is essentially we

151
00:06:57,780 --> 00:06:59,909
have like I think like two or three

152
00:06:59,909 --> 00:07:04,050
hundred different byte code operations

153
00:07:04,050 --> 00:07:06,900
that represent common constructs in

154
00:07:06,900 --> 00:07:09,629
JavaScript and then we don't execute

155
00:07:09,629 --> 00:07:12,750
them directly we have we decompose them

156
00:07:12,750 --> 00:07:14,940
into up to five kind of atomic

157
00:07:14,940 --> 00:07:16,710
operations which are much more simple

158
00:07:16,710 --> 00:07:18,870
and those are implemented by the

159
00:07:18,870 --> 00:07:22,139
interpreter and yeah this this whole

160
00:07:22,139 --> 00:07:24,569
setup gives us a very very compact

161
00:07:24,569 --> 00:07:28,099
representation on the bytecode level

162
00:07:28,099 --> 00:07:30,270
couple more things about javascript so

163
00:07:30,270 --> 00:07:32,819
it's it's written in pure c 99 so we

164
00:07:32,819 --> 00:07:35,039
really try to keep it that way and not

165
00:07:35,039 --> 00:07:37,710
use any new extensions just to make it

166
00:07:37,710 --> 00:07:39,900
as portable as possible so that as long

167
00:07:39,900 --> 00:07:43,050
as your platform has a see 99 compliant

168
00:07:43,050 --> 00:07:44,729
compiler that you can just build it and

169
00:07:44,729 --> 00:07:48,150
and it will work just fine it's code

170
00:07:48,150 --> 00:07:51,000
size right no the source code we are

171
00:07:51,000 --> 00:07:54,210
currently at 91 thousand lines of code

172
00:07:54,210 --> 00:07:56,520
so we're getting close to a hundred

173
00:07:56,520 --> 00:08:00,180
thousand lines of code there and the

174
00:08:00,180 --> 00:08:02,099
code size so the size of the JavaScript

175
00:08:02,099 --> 00:08:06,630
binary itself that is at 133 K right now

176
00:08:06,630 --> 00:08:09,779
on thumb 2 and this is with the full

177
00:08:09,779 --> 00:08:12,889
profile so the whole language standard

178
00:08:12,889 --> 00:08:16,500
if we we also offer a minimal profile

179
00:08:16,500 --> 00:08:17,789
where some of the features are dropped

180
00:08:17,789 --> 00:08:20,129
and then you can even get below 100 K

181
00:08:20,129 --> 00:08:22,979
and this number is important because

182
00:08:22,979 --> 00:08:25,409
that's essentially the amount of flesh

183
00:08:25,409 --> 00:08:27,870
that you need on the device to get there

184
00:08:27,870 --> 00:08:30,810
script running and it's also in a way

185
00:08:30,810 --> 00:08:33,809
the the overhead in terms of flash

186
00:08:33,809 --> 00:08:36,328
memory that you have to pay for using

187
00:08:36,328 --> 00:08:39,320
javascript versus a native c application

188
00:08:39,320 --> 00:08:42,029
one important thing to mention is that

189
00:08:42,029 --> 00:08:43,919
JavaScript really implements the full

190
00:08:43,919 --> 00:08:47,320
ACMA script 5.1 so not so we implement

191
00:08:47,320 --> 00:08:49,810
love that and we also have the

192
00:08:49,810 --> 00:08:52,150
corresponding test 262 results so this

193
00:08:52,150 --> 00:08:54,280
really works we passed the conformance

194
00:08:54,280 --> 00:08:59,940
test suite and the another thing is the

195
00:08:59,940 --> 00:09:03,670
our C API so if you have an existing

196
00:09:03,670 --> 00:09:05,740
application and you want to add some

197
00:09:05,740 --> 00:09:08,380
scripting capabilities to it then you

198
00:09:08,380 --> 00:09:12,580
can use the C API for that or the other

199
00:09:12,580 --> 00:09:13,210
way around

200
00:09:13,210 --> 00:09:15,220
if you have a JavaScript application and

201
00:09:15,220 --> 00:09:17,230
you want to invoke some native code then

202
00:09:17,230 --> 00:09:19,050
you can also do this through the C API

203
00:09:19,050 --> 00:09:22,690
and another feature is the bytecode

204
00:09:22,690 --> 00:09:26,380
snapshot feature so that one is allows

205
00:09:26,380 --> 00:09:28,570
you to essentially pre-compiled your

206
00:09:28,570 --> 00:09:30,310
JavaScript sources into the compact

207
00:09:30,310 --> 00:09:32,500
bytecode format and you could even just

208
00:09:32,500 --> 00:09:35,230
deploy the bytecode rather than even the

209
00:09:35,230 --> 00:09:37,300
sources and this has a couple of

210
00:09:37,300 --> 00:09:39,750
advantages so one of them is that you

211
00:09:39,750 --> 00:09:42,220
the whole process is a bit faster

212
00:09:42,220 --> 00:09:43,810
because you don't need to pass the code

213
00:09:43,810 --> 00:09:45,460
again you can do that offline

214
00:09:45,460 --> 00:09:47,470
essentially but that's usually not

215
00:09:47,470 --> 00:09:49,660
almost not even noticeable the

216
00:09:49,660 --> 00:09:51,910
difference the the other benefit is that

217
00:09:51,910 --> 00:09:55,030
you can if you pre compile the bytecode

218
00:09:55,030 --> 00:09:57,580
you can off load it into flash memory

219
00:09:57,580 --> 00:09:59,800
and this is very useful because if you

220
00:09:59,800 --> 00:10:01,450
have let's say you have some library

221
00:10:01,450 --> 00:10:04,660
code written in JavaScript that is not

222
00:10:04,660 --> 00:10:06,760
changing very often then you can just

223
00:10:06,760 --> 00:10:08,920
pre compile it to the compact bytecode

224
00:10:08,920 --> 00:10:11,590
and you can put it into flash memory and

225
00:10:11,590 --> 00:10:13,390
you can execute it directly from flash

226
00:10:13,390 --> 00:10:16,300
and that way you reduce the pressure of

227
00:10:16,300 --> 00:10:18,400
on the on the overall main main memory

228
00:10:18,400 --> 00:10:22,170
so yeah that's quite a nice feature and

229
00:10:22,170 --> 00:10:25,000
yeah portability so this is also very

230
00:10:25,000 --> 00:10:27,460
important so we try to be as portable as

231
00:10:27,460 --> 00:10:30,370
possible so JavaScript can run on all

232
00:10:30,370 --> 00:10:34,660
different platforms and ports and so the

233
00:10:34,660 --> 00:10:36,610
the engine is designed to be fully

234
00:10:36,610 --> 00:10:38,610
self-contained so we don't even have

235
00:10:38,610 --> 00:10:40,570
dependencies on the C standard library

236
00:10:40,570 --> 00:10:44,080
we have our own really small cisterna

237
00:10:44,080 --> 00:10:46,300
Larissa's really just some essential

238
00:10:46,300 --> 00:10:48,160
functions that we have in there and

239
00:10:48,160 --> 00:10:50,800
because of that you can also just run it

240
00:10:50,800 --> 00:10:52,750
bare metal you don't need any operating

241
00:10:52,750 --> 00:10:56,000
system or runtime support from the

242
00:10:56,000 --> 00:11:00,470
from the operating system and out of the

243
00:11:00,470 --> 00:11:02,300
box we support a couple of different

244
00:11:02,300 --> 00:11:04,670
BOTS so the first one that we supported

245
00:11:04,670 --> 00:11:08,509
was the stm32f4 but we have a couple

246
00:11:08,509 --> 00:11:11,209
more so for example the arena 101

247
00:11:11,209 --> 00:11:13,910
that's an x86 base board inter

248
00:11:13,910 --> 00:11:16,579
contributed that port and maintains it

249
00:11:16,579 --> 00:11:19,639
and then we have also the freedom

250
00:11:19,639 --> 00:11:23,569
freedom bought from an XP and photon

251
00:11:23,569 --> 00:11:26,209
board so a bit more about that in a

252
00:11:26,209 --> 00:11:28,610
couple of slides and we also have an

253
00:11:28,610 --> 00:11:32,600
experimental port for the esp8266 and

254
00:11:32,600 --> 00:11:35,660
for in terms of real-time operating

255
00:11:35,660 --> 00:11:38,990
systems we have support for not x4z fear

256
00:11:38,990 --> 00:11:42,920
embed OS and riot and if you want you

257
00:11:42,920 --> 00:11:45,439
can run it on on a desktop operating

258
00:11:45,439 --> 00:11:47,870
system as well and it's particularly

259
00:11:47,870 --> 00:11:50,779
useful if you want for example you want

260
00:11:50,779 --> 00:11:52,759
to debug an issue in Jerry's trip then

261
00:11:52,759 --> 00:11:54,680
on the desktop you have usually better

262
00:11:54,680 --> 00:11:57,160
debugging capabilities than on this more

263
00:11:57,160 --> 00:11:59,949
microcontroller especially things like

264
00:11:59,949 --> 00:12:03,230
warrant or address sanitize if you want

265
00:12:03,230 --> 00:12:05,899
to track memory corruption box then it's

266
00:12:05,899 --> 00:12:07,939
much easier to do on the desktop then on

267
00:12:07,939 --> 00:12:11,300
the on the small devices yeah so just to

268
00:12:11,300 --> 00:12:13,129
get an idea what kind of hardware we're

269
00:12:13,129 --> 00:12:15,379
targeting so they the photon board is

270
00:12:15,379 --> 00:12:20,509
essentially $20 Wi-Fi enabled IOT board

271
00:12:20,509 --> 00:12:27,230
and that one has 100 and coax and free

272
00:12:27,230 --> 00:12:30,259
clocked at 120 megahertz has a megabyte

273
00:12:30,259 --> 00:12:34,279
of RAM and 128 K of when I go to flash

274
00:12:34,279 --> 00:12:37,759
one or 28k of ram so that on that board

275
00:12:37,759 --> 00:12:39,470
you can already do quite a lot with

276
00:12:39,470 --> 00:12:43,430
javascript so it won on 28 K you can run

277
00:12:43,430 --> 00:12:47,660
substantial amount of JavaScript so in

278
00:12:47,660 --> 00:12:49,670
the demo I also using the photon so I

279
00:12:49,670 --> 00:12:53,509
can show it to you there as well so yeah

280
00:12:53,509 --> 00:12:55,860
just to give you an idea of how

281
00:12:55,860 --> 00:12:58,620
memory it consumes in practice I want to

282
00:12:58,620 --> 00:13:02,490
show some slides about measurement

283
00:13:02,490 --> 00:13:06,480
results so this is the yeah should be

284
00:13:06,480 --> 00:13:09,779
readable I guess so for the so this is

285
00:13:09,779 --> 00:13:12,089
memory consumption for the SunSpider

286
00:13:12,089 --> 00:13:15,600
benchmark and we are comparing Jerry

287
00:13:15,600 --> 00:13:18,740
script versus duct tape duct tape is

288
00:13:18,740 --> 00:13:21,959
another open source light wide

289
00:13:21,959 --> 00:13:24,360
JavaScript engine so in a way it's a

290
00:13:24,360 --> 00:13:27,870
competitor to Jerry script and what you

291
00:13:27,870 --> 00:13:30,300
can see here is essentially so that the

292
00:13:30,300 --> 00:13:32,820
red bars are the memory consumption of

293
00:13:32,820 --> 00:13:35,990
duct tape the blue bars are the bars

294
00:13:35,990 --> 00:13:37,950
represent Jerry script memory

295
00:13:37,950 --> 00:13:40,019
consumption and you can see that we

296
00:13:40,019 --> 00:13:44,279
fairly consistently significantly below

297
00:13:44,279 --> 00:13:47,940
what duct tape consumes so that was not

298
00:13:47,940 --> 00:13:49,860
always the case like that but we spent

299
00:13:49,860 --> 00:13:51,570
pretty much the whole last year we spent

300
00:13:51,570 --> 00:13:54,029
a lot of optimization so we optimized

301
00:13:54,029 --> 00:13:56,040
for memory consumption and also

302
00:13:56,040 --> 00:13:58,399
performance you will see that next slide

303
00:13:58,399 --> 00:14:01,940
so yeah right now we are we are doing

304
00:14:01,940 --> 00:14:04,110
significantly better and it if you look

305
00:14:04,110 --> 00:14:07,160
at cases like this here the date format

306
00:14:07,160 --> 00:14:10,740
benchmark we are really easily in order

307
00:14:10,740 --> 00:14:14,850
of magnitude better and performance wise

308
00:14:14,850 --> 00:14:16,949
it looks quite similar it's the

309
00:14:16,949 --> 00:14:19,709
difference is not as big as on the

310
00:14:19,709 --> 00:14:23,160
memory consumption side but yeah there's

311
00:14:23,160 --> 00:14:25,380
even one benchmark here where we are

312
00:14:25,380 --> 00:14:30,000
pretty close but on average we're like

313
00:14:30,000 --> 00:14:34,100
two times faster than duct tape so

314
00:14:34,339 --> 00:14:36,929
you can see we spent a lot of time on

315
00:14:36,929 --> 00:14:42,929
that so demo so I have set up a small

316
00:14:42,929 --> 00:14:45,059
demo day and I'll just explain you a

317
00:14:45,059 --> 00:14:47,189
little bit what's what devices are there

318
00:14:47,189 --> 00:14:51,600
so essentially it's multiplayer pong

319
00:14:51,600 --> 00:14:54,779
implementation so very classic game and

320
00:14:54,779 --> 00:14:57,420
we have two devices so we have the

321
00:14:57,420 --> 00:15:00,059
Raspberry Pi here and we have a photon

322
00:15:00,059 --> 00:15:02,579
board and each of them is connected to

323
00:15:02,579 --> 00:15:06,199
an LED matrix connected by I squared C

324
00:15:06,199 --> 00:15:08,249
so you can see that they're all ready

325
00:15:08,249 --> 00:15:13,019
and then we run so all of all of the

326
00:15:13,019 --> 00:15:16,739
code that's running is JavaScript and we

327
00:15:16,739 --> 00:15:19,709
on on the PI we run just Linux and then

328
00:15:19,709 --> 00:15:21,869
JavaScript on top of it and on the

329
00:15:21,869 --> 00:15:24,989
photon we run JavaScript on top of riots

330
00:15:24,989 --> 00:15:27,899
and we're using riot because for the

331
00:15:27,899 --> 00:15:31,139
communication we're using 6lowpan so

332
00:15:31,139 --> 00:15:35,069
riot has a very good stack for that and

333
00:15:35,069 --> 00:15:37,230
that's why we're going with riot here

334
00:15:37,230 --> 00:15:39,149
and and the other thing to mention is

335
00:15:39,149 --> 00:15:41,639
that each of the device can so it can be

336
00:15:41,639 --> 00:15:43,019
controlled by a human player that's why

337
00:15:43,019 --> 00:15:45,589
we have the keypad on the PI and

338
00:15:45,589 --> 00:15:49,199
switches on the on the photon but you

339
00:15:49,199 --> 00:15:50,790
can also run it in AI mode where the

340
00:15:50,790 --> 00:15:53,669
just the computer opponent is playing so

341
00:15:53,669 --> 00:15:56,429
yeah so maybe I'll just show it to you

342
00:15:56,429 --> 00:15:59,329
if it still works

343
00:15:59,360 --> 00:16:04,470
yeah so now basically both devices in AI

344
00:16:04,470 --> 00:16:07,319
mode and you can see that this is the

345
00:16:07,319 --> 00:16:10,319
sort of AI is not perfect so sometimes

346
00:16:10,319 --> 00:16:13,290
what you guys wins and so this is a

347
00:16:13,290 --> 00:16:14,970
photon board so you can see it's really

348
00:16:14,970 --> 00:16:18,269
small the flashing LED means that

349
00:16:18,269 --> 00:16:21,509
whenever there's a 6lowpan packet being

350
00:16:21,509 --> 00:16:25,610
transferred the the LED gets toggled and

351
00:16:25,610 --> 00:16:28,829
since the board just has Wi-Fi built-in

352
00:16:28,829 --> 00:16:32,339
we have to use an 802 54 transceiver for

353
00:16:32,339 --> 00:16:36,209
the yeah for the communication and that

354
00:16:36,209 --> 00:16:38,430
one is just this is just a regular

355
00:16:38,430 --> 00:16:41,580
open labs 802 54 field so the same one

356
00:16:41,580 --> 00:16:43,620
that we're using on the on the PI and

357
00:16:43,620 --> 00:16:45,960
this one is just hooked up wire spi and

358
00:16:45,960 --> 00:16:49,680
that works actually quite well yeah it's

359
00:16:49,680 --> 00:16:51,720
just regular PI so maybe I'll just stop

360
00:16:51,720 --> 00:16:58,320
playing myself lost okay I need to

361
00:16:58,320 --> 00:16:59,160
practice more

362
00:16:59,160 --> 00:17:01,440
yeah and you see so the ball essentially

363
00:17:01,440 --> 00:17:06,599
passes over the network and it's very

364
00:17:06,599 --> 00:17:09,329
smooth so obviously it since it's okay

365
00:17:09,329 --> 00:17:11,010
now I turn on the air mode again so

366
00:17:11,010 --> 00:17:13,410
obviously since it's 6lowpan is a lossy

367
00:17:13,410 --> 00:17:15,480
protocols or maybe not the perfect

368
00:17:15,480 --> 00:17:17,959
protocol for this kind of use case but

369
00:17:17,959 --> 00:17:20,880
it works quite well in practice actually

370
00:17:20,880 --> 00:17:28,040
and ya can play a little bit more yeah

371
00:17:30,610 --> 00:17:33,850
yep that's it very much for my

372
00:17:33,850 --> 00:17:36,969
thank you

373
00:17:43,430 --> 00:17:46,020
so it looks like we have still seven

374
00:17:46,020 --> 00:17:50,810
minutes for questions yeah yes

375
00:17:51,580 --> 00:17:56,560
after your talk last year yeah

376
00:17:56,560 --> 00:18:05,830
vn I miss Peter we we tried okay I think

377
00:18:05,830 --> 00:18:09,790
we got to the point where it's we try to

378
00:18:09,790 --> 00:18:19,390
arrive second things we try to

379
00:18:19,390 --> 00:18:23,080
contribute very simple things like keeps

380
00:18:23,080 --> 00:18:25,300
a little bit of the readme things like

381
00:18:25,300 --> 00:18:28,540
that the request was like for a simple

382
00:18:28,540 --> 00:18:30,430
reading course it will change like I

383
00:18:30,430 --> 00:18:32,890
think it was three nines of changes was

384
00:18:32,890 --> 00:18:39,070
was horrible discussion one thing we and

385
00:18:39,070 --> 00:18:40,660
I think have we mentioned it in my talk

386
00:18:40,660 --> 00:18:44,110
this evening he was very frustrated

387
00:18:44,110 --> 00:18:48,310
about this merging process that got some

388
00:18:48,310 --> 00:18:49,770
kind of

389
00:18:49,770 --> 00:18:52,670
lengthy

390
00:18:52,679 --> 00:18:57,289
debated by musical employees of Samsung

391
00:18:58,909 --> 00:19:03,480
so yeah I think there is no problem with

392
00:19:03,480 --> 00:19:07,890
you our contribution policy I mean you

393
00:19:07,890 --> 00:19:10,980
know the simple simple example on how to

394
00:19:10,980 --> 00:19:14,710
run it so we don't create you too

395
00:19:14,710 --> 00:19:17,860
yeah yes I'll just repeat the questions

396
00:19:17,860 --> 00:19:21,370
so just the short summary he tried to

397
00:19:21,370 --> 00:19:23,770
contribute some small changes to Jerry

398
00:19:23,770 --> 00:19:27,010
script and it didn't work as smooth as

399
00:19:27,010 --> 00:19:31,480
expected so yeah essentially I guess

400
00:19:31,480 --> 00:19:32,410
that was still very much in the

401
00:19:32,410 --> 00:19:34,660
beginning of the year right so so we

402
00:19:34,660 --> 00:19:37,210
have improved a lot I think on on the

403
00:19:37,210 --> 00:19:39,250
overall contribution process and also

404
00:19:39,250 --> 00:19:41,980
how the things get merged and we I think

405
00:19:41,980 --> 00:19:43,330
at that time we didn't even have any

406
00:19:43,330 --> 00:19:46,140
contribution guidelines or anything so

407
00:19:46,140 --> 00:19:48,940
if you look at it now you can see that

408
00:19:48,940 --> 00:19:51,280
we actually have quite a good throughput

409
00:19:51,280 --> 00:19:54,340
and also the time between poor request

410
00:19:54,340 --> 00:19:57,010
being sent and getting much obviously

411
00:19:57,010 --> 00:19:58,480
depends on the size of the change but

412
00:19:58,480 --> 00:20:00,520
now I think if you would do the same

413
00:20:00,520 --> 00:20:02,920
again now probably will be merged in

414
00:20:02,920 --> 00:20:08,740
here in a day or two so oh yeah all

415
00:20:08,740 --> 00:20:10,740
right so the other question was that

416
00:20:10,740 --> 00:20:14,800
JavaScript didn't work on MIPS so that's

417
00:20:14,800 --> 00:20:17,260
pretty much still the case so no one has

418
00:20:17,260 --> 00:20:20,020
really I mean we haven't gotten really

419
00:20:20,020 --> 00:20:22,780
any interest in in MIPS specific ports

420
00:20:22,780 --> 00:20:25,390
so at least from Samsung side we're not

421
00:20:25,390 --> 00:20:27,640
working on that and also from community

422
00:20:27,640 --> 00:20:30,610
we haven't really seen any further steps

423
00:20:30,610 --> 00:20:32,530
in the direction but we would obviously

424
00:20:32,530 --> 00:20:35,680
be open to that so

425
00:20:35,680 --> 00:20:39,490
I wanted to Jerry Street and open the

426
00:20:39,490 --> 00:20:41,530
Realty for all the different

427
00:20:41,530 --> 00:20:59,410
architectures okay 97 yeah we don't

428
00:20:59,410 --> 00:21:02,460
really test on MIPS or even build yeah

429
00:21:02,460 --> 00:21:05,620
ok next question who was for I don't

430
00:21:05,620 --> 00:21:08,429
know maybe you've

431
00:21:14,850 --> 00:21:18,910
yeah we so the question was whether we

432
00:21:18,910 --> 00:21:21,190
did any memory consumption or

433
00:21:21,190 --> 00:21:23,380
performance measurements against the

434
00:21:23,380 --> 00:21:26,020
established desktop engines like v8 or

435
00:21:26,020 --> 00:21:29,350
spider monkey or JavaScript core and we

436
00:21:29,350 --> 00:21:31,270
have done some measurements a while ago

437
00:21:31,270 --> 00:21:34,570
on memory consumption and they are

438
00:21:34,570 --> 00:21:36,340
typically the minimum footprint you have

439
00:21:36,340 --> 00:21:39,130
is like eight megabyte so there's no way

440
00:21:39,130 --> 00:21:42,070
you can scale that down and performance

441
00:21:42,070 --> 00:21:44,559
wise I think we are at least I would say

442
00:21:44,559 --> 00:21:47,110
like a hundred times slower or something

443
00:21:47,110 --> 00:21:49,990
like that so on the desktop I would only

444
00:21:49,990 --> 00:21:52,659
recommend usage if performance is not

445
00:21:52,659 --> 00:21:58,590
your primary goal okay next

446
00:21:58,590 --> 00:22:01,629
[Music]

447
00:22:11,809 --> 00:22:12,990
yeah

448
00:22:12,990 --> 00:22:16,020
so so the question was that javascript

449
00:22:16,020 --> 00:22:18,210
is a lot about the ecosystem and the

450
00:22:18,210 --> 00:22:20,010
question is whether we it's easy for us

451
00:22:20,010 --> 00:22:22,679
to use existing code or like NPM

452
00:22:22,679 --> 00:22:25,289
packages things like that so we

453
00:22:25,289 --> 00:22:26,880
essentially we've been pretty much

454
00:22:26,880 --> 00:22:29,370
focusing on getting the engine to a

455
00:22:29,370 --> 00:22:31,320
level where it's competitive against the

456
00:22:31,320 --> 00:22:35,100
other engines out there and so on we we

457
00:22:35,100 --> 00:22:36,870
also have a framework called I Peter J's

458
00:22:36,870 --> 00:22:38,669
which essentially is like a light wired

459
00:22:38,669 --> 00:22:39,750
version of nodejs

460
00:22:39,750 --> 00:22:43,080
for for running on top of JavaScript but

461
00:22:43,080 --> 00:22:45,809
that's still so development last year

462
00:22:45,809 --> 00:22:48,419
was not really going strong so it's so I

463
00:22:48,419 --> 00:22:49,710
would say still kind of in the early

464
00:22:49,710 --> 00:22:53,909
stages but framework which is which is a

465
00:22:53,909 --> 00:22:56,640
bit more mature is Zephie ajs so

466
00:22:56,640 --> 00:23:00,320
internal developed basically or yeah

467
00:23:00,320 --> 00:23:03,960
jsapi for Sofia and they've been working

468
00:23:03,960 --> 00:23:08,190
got on that quite a lot last year so so

469
00:23:08,190 --> 00:23:10,770
that definitely works but I think

470
00:23:10,770 --> 00:23:14,400
there's still still kind of early days

471
00:23:14,400 --> 00:23:16,970
in terms of JavaScript frameworks

472
00:23:16,970 --> 00:23:21,740
targeted at really those low-end devices

473
00:23:21,740 --> 00:23:27,600
yeah okay one more minutes one minute

474
00:23:27,600 --> 00:23:32,030
forty yeah one more custom

475
00:23:32,460 --> 00:23:34,590
know that before so meet the questions

476
00:23:34,590 --> 00:23:36,510
what is what is exactly at the moment

477
00:23:36,510 --> 00:23:39,000
the community center is it like what is

478
00:23:39,000 --> 00:23:40,740
the governance process I am part of a

479
00:23:40,740 --> 00:23:50,880
foundation yeah okay so so the question

480
00:23:50,880 --> 00:23:53,970
was in terms of like governance of the

481
00:23:53,970 --> 00:23:55,830
project or how the project is organized

482
00:23:55,830 --> 00:24:00,870
and essentially so we just in September

483
00:24:00,870 --> 00:24:03,030
last year we moved our script over to

484
00:24:03,030 --> 00:24:04,410
the J's foundation so the Jazz

485
00:24:04,410 --> 00:24:06,330
foundation is it's also a relatively new

486
00:24:06,330 --> 00:24:09,690
foundation covering kind of all the

487
00:24:09,690 --> 00:24:11,580
different JavaScript projects and it

488
00:24:11,580 --> 00:24:16,110
came out of the jQuery foundation and in

489
00:24:16,110 --> 00:24:18,090
terms of governance we we have

490
00:24:18,090 --> 00:24:19,860
contributors from various different

491
00:24:19,860 --> 00:24:21,840
companies so Intel is a strong

492
00:24:21,840 --> 00:24:27,300
contributor the Naro pebble was a big

493
00:24:27,300 --> 00:24:29,280
use of JavaScript unfortunately they got

494
00:24:29,280 --> 00:24:31,380
acquired by Fitbit but they were

495
00:24:31,380 --> 00:24:33,030
actually using javascript already in

496
00:24:33,030 --> 00:24:36,570
production on their smartwatches so that

497
00:24:36,570 --> 00:24:38,790
was quite interesting but yeah in terms

498
00:24:38,790 --> 00:24:41,490
of governance we have we we're kind of

499
00:24:41,490 --> 00:24:44,070
growing and right now still a lot of the

500
00:24:44,070 --> 00:24:46,230
core maintainer czar employed by Samsung

501
00:24:46,230 --> 00:24:48,960
but we are slowly getting more

502
00:24:48,960 --> 00:24:52,350
appointing more people to from other

503
00:24:52,350 --> 00:24:54,330
companies and kind of diversifying the

504
00:24:54,330 --> 00:24:57,450
community and the D code

505
00:24:57,450 --> 00:24:59,580
I mean it's Apache 2.0 and it has been

506
00:24:59,580 --> 00:25:01,410
all the RP has been transferred to the

507
00:25:01,410 --> 00:25:04,590
J's foundation so this is not not really

508
00:25:04,590 --> 00:25:07,820
a Samsung project anymore

509
00:25:07,870 --> 00:25:14,049
okay okay I think we're done okay so yep

510
00:25:14,049 --> 00:25:20,799
sure yeah so the question is if there

511
00:25:20,799 --> 00:25:24,429
are any plans to work on es6 features so

512
00:25:24,429 --> 00:25:27,580
we actually have started already or not

513
00:25:27,580 --> 00:25:30,220
Samsung but people from Intel have

514
00:25:30,220 --> 00:25:32,830
contributed some some early es6 features

515
00:25:32,830 --> 00:25:35,350
already so we are certainly open to

516
00:25:35,350 --> 00:25:37,690
contributions in that area and and we've

517
00:25:37,690 --> 00:25:40,090
also been working on support for

518
00:25:40,090 --> 00:25:43,210
promises so yeah that's definitely

519
00:25:43,210 --> 00:25:45,970
something we are interested in and also

520
00:25:45,970 --> 00:25:47,590
the community seems to be quite

521
00:25:47,590 --> 00:25:50,158
interested in

522
00:25:52,060 --> 00:26:00,849
[Applause]

