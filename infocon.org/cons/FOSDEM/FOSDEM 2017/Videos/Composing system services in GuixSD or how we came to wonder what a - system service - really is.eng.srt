1
00:00:00,060 --> 00:00:00,990
so good

2
00:00:00,990 --> 00:00:03,439
[Music]

3
00:00:04,520 --> 00:00:06,680
morning I think it's it's the morning

4
00:00:06,680 --> 00:00:09,889
it's probably the first time I I have

5
00:00:09,889 --> 00:00:10,670
questions

6
00:00:10,670 --> 00:00:12,799
before I even start the talk but that's

7
00:00:12,799 --> 00:00:14,299
that's a good thing it shows there is

8
00:00:14,299 --> 00:00:18,520
interest I guess so

9
00:00:18,520 --> 00:00:21,410
yeah I'm the cool maintainer of geeks

10
00:00:21,410 --> 00:00:23,360
together with Ricardo which you've

11
00:00:23,360 --> 00:00:25,730
probably seen this morning or you should

12
00:00:25,730 --> 00:00:28,280
have seen maybe I'm going to talk about

13
00:00:28,280 --> 00:00:31,760
geeks SD which is a freak new Linux

14
00:00:31,760 --> 00:00:34,850
distribution and about how we manage

15
00:00:34,850 --> 00:00:38,840
system services in geeks SD so I'm

16
00:00:38,840 --> 00:00:41,239
pretty sure the intertubes has already

17
00:00:41,239 --> 00:00:43,670
started making fun of me because I'm you

18
00:00:43,670 --> 00:00:45,170
know supposed to be the maintainer of a

19
00:00:45,170 --> 00:00:48,160
distribution and I'm just you know

20
00:00:48,160 --> 00:00:51,020
claiming that I recently discovered what

21
00:00:51,020 --> 00:00:53,809
system services I'm pretty sure people

22
00:00:53,809 --> 00:00:54,980
are making fun of me

23
00:00:54,980 --> 00:01:00,739
but anyway so yeah first of all let me

24
00:01:00,739 --> 00:01:03,140
maybe do a recap of what geeks is the

25
00:01:03,140 --> 00:01:06,049
East how many of you have a feeling like

26
00:01:06,049 --> 00:01:08,240
how many of you have used it or read

27
00:01:08,240 --> 00:01:14,499
about it okay a hundred percent that's

28
00:01:14,499 --> 00:01:16,749
that's pretty good stats

29
00:01:16,749 --> 00:01:21,200
okay so well as you know geek CD is that

30
00:01:21,200 --> 00:01:23,200
free distribution where you can

31
00:01:23,200 --> 00:01:25,880
basically declare what your operating

32
00:01:25,880 --> 00:01:28,429
system is going to look like so that's

33
00:01:28,429 --> 00:01:31,310
different from most distributions we

34
00:01:31,310 --> 00:01:33,740
used to like you know Debian and also

35
00:01:33,740 --> 00:01:36,409
traditional distributions because

36
00:01:36,409 --> 00:01:38,599
instead of you know logging in as root

37
00:01:38,599 --> 00:01:41,420
installing packages and fiddling with

38
00:01:41,420 --> 00:01:44,450
files in 8c you go right from the start

39
00:01:44,450 --> 00:01:46,279
and you write this this configuration

40
00:01:46,279 --> 00:01:49,189
file and that's it right that's that's

41
00:01:49,189 --> 00:01:51,819
how your operating system is going to be

42
00:01:51,819 --> 00:01:54,560
so previously John Darrington talked

43
00:01:54,560 --> 00:01:56,539
about the the graphical installer for

44
00:01:56,539 --> 00:01:59,869
gig switch which is just brand-new and

45
00:01:59,869 --> 00:02:02,329
until now you know you had to when you

46
00:02:02,329 --> 00:02:04,609
were installing gigs SD you had to

47
00:02:04,609 --> 00:02:06,259
actually write this kind of

48
00:02:06,259 --> 00:02:08,090
configuration file or start from a

49
00:02:08,090 --> 00:02:10,758
template and actually instantiate it

50
00:02:10,758 --> 00:02:15,250
live from the USB installation image

51
00:02:15,250 --> 00:02:17,800
so what is it telling us well here we

52
00:02:17,800 --> 00:02:19,960
see a number of useful pieces of

53
00:02:19,960 --> 00:02:22,180
information like we have you know the

54
00:02:22,180 --> 00:02:24,850
local timezone user accounts fight

55
00:02:24,850 --> 00:02:27,430
systems and so on and so forth and we

56
00:02:27,430 --> 00:02:29,290
have this last bit here which is what

57
00:02:29,290 --> 00:02:30,940
I'm going to talk about which is system

58
00:02:30,940 --> 00:02:34,660
services right so that's usually the

59
00:02:34,660 --> 00:02:36,850
most important part I would say maybe of

60
00:02:36,850 --> 00:02:39,400
the system configuration and it's also

61
00:02:39,400 --> 00:02:42,070
the most difficult part the thing that

62
00:02:42,070 --> 00:02:45,490
is pretty hard to get right right so we

63
00:02:45,490 --> 00:02:47,350
have sort of conflicting requirements

64
00:02:47,350 --> 00:02:50,770
here because for geeks is D we want to

65
00:02:50,770 --> 00:02:53,350
make it as simple as possible for users

66
00:02:53,350 --> 00:02:55,690
to you know choose what system services

67
00:02:55,690 --> 00:02:58,990
are available what options they use but

68
00:02:58,990 --> 00:03:00,850
at the same time we want to be able to

69
00:03:00,850 --> 00:03:02,920
handle pretty much any kind of system

70
00:03:02,920 --> 00:03:05,980
service so the thing is we want to be

71
00:03:05,980 --> 00:03:08,320
able to have essentially just one line

72
00:03:08,320 --> 00:03:10,120
per system service in in the

73
00:03:10,120 --> 00:03:13,050
configuration that people actually write

74
00:03:13,050 --> 00:03:15,610
but it should be able to handle complex

75
00:03:15,610 --> 00:03:20,470
you know service compositions so I'm

76
00:03:20,470 --> 00:03:24,550
just showing briefly what user sees and

77
00:03:24,550 --> 00:03:26,350
what users actually type in in their

78
00:03:26,350 --> 00:03:29,650
config so here we have we have two

79
00:03:29,650 --> 00:03:31,420
additional system services so we're

80
00:03:31,420 --> 00:03:32,890
saying I want to use the you know the

81
00:03:32,890 --> 00:03:35,170
basic system services like you know a

82
00:03:35,170 --> 00:03:38,260
login console and so on and I want to

83
00:03:38,260 --> 00:03:40,540
add a couple of services to them so the

84
00:03:40,540 --> 00:03:43,000
first one is a DHCP client so I can get

85
00:03:43,000 --> 00:03:45,060
networking and the second one is the

86
00:03:45,060 --> 00:03:50,620
sshd service the SSH daemon and I'm just

87
00:03:50,620 --> 00:03:52,480
choosing default configuration values

88
00:03:52,480 --> 00:03:54,970
here but of course we want to be able to

89
00:03:54,970 --> 00:03:57,190
you know to specify options to that so

90
00:03:57,190 --> 00:04:00,130
let's say for example for OpenSSH I can

91
00:04:00,130 --> 00:04:05,230
just try this thing here and you know if

92
00:04:05,230 --> 00:04:07,420
you're not familiar with scheme that's

93
00:04:07,420 --> 00:04:10,450
okay you can guess what it's going to do

94
00:04:10,450 --> 00:04:13,810
right we have an open ssh configuration

95
00:04:13,810 --> 00:04:15,280
object here that's being instantiated

96
00:04:15,280 --> 00:04:18,519
and we're saying i want to set this

97
00:04:18,519 --> 00:04:21,279
particular field x11 for writing to to

98
00:04:21,279 --> 00:04:23,590
false and these are the field to you

99
00:04:23,590 --> 00:04:24,520
know that name

100
00:04:24,520 --> 00:04:27,460
and that's how you customize services

101
00:04:27,460 --> 00:04:32,320
okay but sometimes also you want to be

102
00:04:32,320 --> 00:04:34,090
able to say okay I want to use the

103
00:04:34,090 --> 00:04:36,639
desktop services which is to say that

104
00:04:36,639 --> 00:04:38,770
all the services that you expect from a

105
00:04:38,770 --> 00:04:41,979
desktop style installation which is you

106
00:04:41,979 --> 00:04:44,590
know a graphical server maybe you know

107
00:04:44,590 --> 00:04:45,850
maybe that kind of thing

108
00:04:45,850 --> 00:04:48,820
you know networking and all that except

109
00:04:48,820 --> 00:04:50,470
that there's one thing I don't like so I

110
00:04:50,470 --> 00:04:54,789
want to remove it how many people are

111
00:04:54,789 --> 00:04:56,440
familiar with scheme in this film

112
00:04:56,440 --> 00:05:01,690
oh yeah that's ninety percent okay well

113
00:05:01,690 --> 00:05:06,099
the thing is this scheme right and you

114
00:05:06,099 --> 00:05:08,470
have to know that remove is a procedure

115
00:05:08,470 --> 00:05:11,380
that you know you give it a predicate

116
00:05:11,380 --> 00:05:13,509
here and it removes item from the list

117
00:05:13,509 --> 00:05:15,699
which is the second argument that's

118
00:05:15,699 --> 00:05:18,460
that's essentially the story and so

119
00:05:18,460 --> 00:05:20,380
lambda just means this is a function

120
00:05:20,380 --> 00:05:22,930
right it takes one argument which is a

121
00:05:22,930 --> 00:05:26,110
service and if that service is a service

122
00:05:26,110 --> 00:05:29,590
of type NTP well that's the one I want

123
00:05:29,590 --> 00:05:32,229
to filter out okay so here I'm just

124
00:05:32,229 --> 00:05:34,360
saying okay I'm removing the NTP service

125
00:05:34,360 --> 00:05:36,699
from my machine because it's in this

126
00:05:36,699 --> 00:05:39,400
list of default Desktop Services but I

127
00:05:39,400 --> 00:05:42,159
don't want to have it okay so this is

128
00:05:42,159 --> 00:05:43,659
just standard scheme we're just

129
00:05:43,659 --> 00:05:46,060
manipulating values which happened to be

130
00:05:46,060 --> 00:05:50,349
services okay sometimes you want to be

131
00:05:50,349 --> 00:05:52,570
able to do more complex modifications

132
00:05:52,570 --> 00:05:55,419
like again you want to be able to use

133
00:05:55,419 --> 00:05:57,820
those Desktop Services because it's

134
00:05:57,820 --> 00:06:00,520
pretty complete and so on but you want

135
00:06:00,520 --> 00:06:03,639
to change a few details so let's say you

136
00:06:03,639 --> 00:06:07,090
want to change the way you know the mean

137
00:06:07,090 --> 00:06:10,570
get TTY login thing welcomes you like

138
00:06:10,570 --> 00:06:12,039
you want to change the message of the

139
00:06:12,039 --> 00:06:14,320
day that's something you can do this way

140
00:06:14,320 --> 00:06:17,830
using the modify services thing and here

141
00:06:17,830 --> 00:06:20,289
we're changing the way you power so the

142
00:06:20,289 --> 00:06:22,509
power management service you know

143
00:06:22,509 --> 00:06:24,159
handles various events and that's

144
00:06:24,159 --> 00:06:28,150
something we are doing here right and

145
00:06:28,150 --> 00:06:30,039
again this is this is still a simple

146
00:06:30,039 --> 00:06:32,860
scheme list of objects service objects

147
00:06:32,860 --> 00:06:35,010
and so we can have variable holding that

148
00:06:35,010 --> 00:06:37,420
thing

149
00:06:37,420 --> 00:06:43,270
and so on so if you're used to puppet or

150
00:06:43,270 --> 00:06:46,360
NC ball I know the person sitting next

151
00:06:46,360 --> 00:06:49,420
to me right before is presumably using

152
00:06:49,420 --> 00:06:54,160
puppets or maybe hacking on it well you

153
00:06:54,160 --> 00:06:56,170
know this kind of declaration is not

154
00:06:56,170 --> 00:06:58,360
very different after all right it's just

155
00:06:58,360 --> 00:07:00,220
you specify all the details of your

156
00:07:00,220 --> 00:07:01,540
operating system and then you want

157
00:07:01,540 --> 00:07:04,480
puppet or and symbol something and you

158
00:07:04,480 --> 00:07:06,310
get your system which is going to

159
00:07:06,310 --> 00:07:09,060
instantiate roughly what you asked for

160
00:07:09,060 --> 00:07:11,830
but there's a pretty big difference I

161
00:07:11,830 --> 00:07:14,040
would say between gigs SD and puppet

162
00:07:14,040 --> 00:07:17,410
which is that in gigs SD this is

163
00:07:17,410 --> 00:07:19,930
functional in the sense that you give it

164
00:07:19,930 --> 00:07:22,870
a configuration and you get an operating

165
00:07:22,870 --> 00:07:26,020
system instance right and you can do

166
00:07:26,020 --> 00:07:28,630
that you know anytime on any machine

167
00:07:28,630 --> 00:07:31,320
you'll always get the exact same result

168
00:07:31,320 --> 00:07:36,160
even bitwise modulo maybe a couple of

169
00:07:36,160 --> 00:07:38,230
packages that don't that are not bit

170
00:07:38,230 --> 00:07:40,720
reproducible right so that's that's a

171
00:07:40,720 --> 00:07:43,960
very strong kind of guarantee whereas if

172
00:07:43,960 --> 00:07:45,550
you're using puppet well puppet is

173
00:07:45,550 --> 00:07:47,470
essentially trying to modify the state

174
00:07:47,470 --> 00:07:50,080
of existing machines by running new

175
00:07:50,080 --> 00:07:52,600
commands and so on and so if everything

176
00:07:52,600 --> 00:07:54,970
goes well you'll end up with pretty much

177
00:07:54,970 --> 00:07:57,580
the stage that you asked for but in some

178
00:07:57,580 --> 00:08:00,280
cases you know you might have problems I

179
00:08:00,280 --> 00:08:01,630
don't know maybe we can discuss it

180
00:08:01,630 --> 00:08:04,090
afterwards but yeah it doesn't always

181
00:08:04,090 --> 00:08:07,030
work from what I heard so that that's a

182
00:08:07,030 --> 00:08:11,410
story so what do we do with this

183
00:08:11,410 --> 00:08:13,660
configuration well we have a bunch of

184
00:08:13,660 --> 00:08:15,400
commands so we have the gig system

185
00:08:15,400 --> 00:08:17,020
command which is the Central Dispatch

186
00:08:17,020 --> 00:08:20,460
kind of commands for gigs SD and

187
00:08:20,460 --> 00:08:22,840
essentially we always provide one of

188
00:08:22,840 --> 00:08:25,480
those configuration files and then we

189
00:08:25,480 --> 00:08:28,330
can do a bunch of things with them so

190
00:08:28,330 --> 00:08:31,030
first thing is we can build the system

191
00:08:31,030 --> 00:08:34,829
so it let me just show an example

192
00:08:35,059 --> 00:08:38,049
where's Marshall

193
00:08:38,799 --> 00:08:44,499
oh okay yeah it's gonna get better

194
00:08:44,499 --> 00:08:45,279
afterwards

195
00:08:45,279 --> 00:08:47,679
yeah so here I'm just running geek

196
00:08:47,679 --> 00:08:51,009
system build some file and what I'm

197
00:08:51,009 --> 00:08:56,410
getting here I'm just getting as a

198
00:08:56,410 --> 00:08:59,019
result one of those big directory names

199
00:08:59,019 --> 00:09:01,689
that you should be used to by now with a

200
00:09:01,689 --> 00:09:03,730
hash which is actually hidden in this

201
00:09:03,730 --> 00:09:09,639
case I can show it just for the sake of

202
00:09:09,639 --> 00:09:15,489
it so this is the big hash right and you

203
00:09:15,489 --> 00:09:17,679
know it doesn't seem very useful as

204
00:09:17,679 --> 00:09:19,569
search right it's just a directory but

205
00:09:19,569 --> 00:09:22,689
what's in there is that there's actually

206
00:09:22,689 --> 00:09:24,999
everything that defines the system

207
00:09:24,999 --> 00:09:27,339
instance so if I jumped into that

208
00:09:27,339 --> 00:09:32,199
directory I see a bunch of entries so

209
00:09:32,199 --> 00:09:33,819
the first one is boot it's actually a

210
00:09:33,819 --> 00:09:36,489
boot script I probably don't need to go

211
00:09:36,489 --> 00:09:38,829
into the details here just it see which

212
00:09:38,829 --> 00:09:42,399
is two systems slash eetzi directory and

213
00:09:42,399 --> 00:09:44,889
then you have the initial run these two

214
00:09:44,889 --> 00:09:47,319
kernel and a number of other things

215
00:09:47,319 --> 00:09:51,339
right and again you can run gig system

216
00:09:51,339 --> 00:09:52,959
build with this particular configuration

217
00:09:52,959 --> 00:09:55,509
anywhere you always get the same result

218
00:09:55,509 --> 00:10:01,980
I can also do things like gig system VM

219
00:10:01,980 --> 00:10:05,709
and if I do gig system VM it's gonna do

220
00:10:05,709 --> 00:10:07,959
essentially the same thing as gig system

221
00:10:07,959 --> 00:10:09,939
build but in addition it's going to

222
00:10:09,939 --> 00:10:12,519
build a virtual machine image that runs

223
00:10:12,519 --> 00:10:15,459
the system I declare and so what I get

224
00:10:15,459 --> 00:10:18,269
as a result here is the script that

225
00:10:18,269 --> 00:10:23,009
rescuing you for that VM right

226
00:10:24,089 --> 00:10:27,220
yeah just to show I'm not cheating yeah

227
00:10:27,220 --> 00:10:30,459
this is the system that's booting trust

228
00:10:30,459 --> 00:10:36,459
me and again if I want to instantiate it

229
00:10:36,459 --> 00:10:38,410
in a container I can do the same thing

230
00:10:38,410 --> 00:10:40,390
but with big system container this time

231
00:10:40,390 --> 00:10:43,600
and I'm gonna get a script that spawns

232
00:10:43,600 --> 00:10:47,130
the container right so I have one

233
00:10:47,130 --> 00:10:49,750
declaration operating system declaration

234
00:10:49,750 --> 00:10:51,459
and then I can instantiate it in

235
00:10:51,459 --> 00:10:53,380
different ways and of course I can

236
00:10:53,380 --> 00:10:55,180
instantiate it on the bare metal but I'm

237
00:10:55,180 --> 00:10:57,149
not gonna do it life because you know

238
00:10:57,149 --> 00:11:00,430
but I could do geek system reconfigure

239
00:11:00,430 --> 00:11:03,220
and I would essentially switch my system

240
00:11:03,220 --> 00:11:11,110
to that new declaration so what happens

241
00:11:11,110 --> 00:11:13,149
at runtime so we have this this

242
00:11:13,149 --> 00:11:15,220
wonderful operating system declaration

243
00:11:15,220 --> 00:11:18,430
thing and at one time when we boot geek

244
00:11:18,430 --> 00:11:20,680
sysd what we get is of course Linux

245
00:11:20,680 --> 00:11:23,560
labor so Linux without the proprietary

246
00:11:23,560 --> 00:11:26,500
blobs and then we have an initial Ram

247
00:11:26,500 --> 00:11:29,110
disk that initializes like mounts root

248
00:11:29,110 --> 00:11:31,089
filesystem and it's actually written in

249
00:11:31,089 --> 00:11:36,160
guide scheme and then we have PID one so

250
00:11:36,160 --> 00:11:38,680
PID one in our case is the new Shepherd

251
00:11:38,680 --> 00:11:41,589
which is a very little-known piece of

252
00:11:41,589 --> 00:11:45,040
software I guess it's an init system

253
00:11:45,040 --> 00:11:49,060
right so we're not using system D or our

254
00:11:49,060 --> 00:11:51,490
units or one of these we're using the

255
00:11:51,490 --> 00:11:53,949
Shepherd which is also written in guide

256
00:11:53,949 --> 00:11:56,790
so I show why it's interesting and

257
00:11:56,790 --> 00:11:59,410
finally we have applications which may

258
00:11:59,410 --> 00:12:02,440
or may not be written in guy

259
00:12:02,440 --> 00:12:05,019
yeah some of them are still not written

260
00:12:05,019 --> 00:12:12,129
in guys that happened okay so before

261
00:12:12,129 --> 00:12:15,149
I've shown the

262
00:12:17,940 --> 00:12:20,910
things so what you as a user will enter

263
00:12:20,910 --> 00:12:22,650
in your operating system configuration

264
00:12:22,650 --> 00:12:24,830
and now I'm going to talk about the

265
00:12:24,830 --> 00:12:27,690
developer side of things right so how do

266
00:12:27,690 --> 00:12:29,640
you as a developer as a geek CD

267
00:12:29,640 --> 00:12:34,290
developer define a service so roughly

268
00:12:34,290 --> 00:12:37,140
the idea is that you specify you know a

269
00:12:37,140 --> 00:12:42,000
shepherd service structure which has you

270
00:12:42,000 --> 00:12:43,830
know documentation requirements so you

271
00:12:43,830 --> 00:12:46,050
can say what one of the services it

272
00:12:46,050 --> 00:12:48,510
depends on and you can say how to start

273
00:12:48,510 --> 00:12:49,590
it how to stop it

274
00:12:49,590 --> 00:12:53,430
right and here we have this hash tailed

275
00:12:53,430 --> 00:12:56,700
thing if you're familiar with some sort

276
00:12:56,700 --> 00:12:58,740
of list you can you could think of it

277
00:12:58,740 --> 00:13:00,920
like quasi quotes which means

278
00:13:00,920 --> 00:13:04,200
essentially introducing code here little

279
00:13:04,200 --> 00:13:06,540
code that will end up in the Shepherd

280
00:13:06,540 --> 00:13:09,240
itself so it's not being executed right

281
00:13:09,240 --> 00:13:11,730
now it's just we're just producing code

282
00:13:11,730 --> 00:13:13,980
for execution at runtime

283
00:13:13,980 --> 00:13:17,700
right and so this is the code that the

284
00:13:17,700 --> 00:13:20,040
Shepherd PID 1 is going to execute when

285
00:13:20,040 --> 00:13:24,630
we start MySQL so we're essentially

286
00:13:24,630 --> 00:13:28,020
using the the API of the shepherd here

287
00:13:28,020 --> 00:13:29,790
so we have this make fork exact

288
00:13:29,790 --> 00:13:31,950
constructor thing it's a bit of an

289
00:13:31,950 --> 00:13:34,200
obscure name but it's been there for

290
00:13:34,200 --> 00:13:37,680
ages so that's how it is which tells

291
00:13:37,680 --> 00:13:40,020
well you note when my sequel you need to

292
00:13:40,020 --> 00:13:42,720
call this command and with this argument

293
00:13:42,720 --> 00:13:46,970
and this needs to happen as this user

294
00:13:46,970 --> 00:13:51,270
that kind of thing so that's the basic

295
00:13:51,270 --> 00:13:55,950
idea but the good thing about Shepherd

296
00:13:55,950 --> 00:13:59,520
is that it's written in scheme so we can

297
00:13:59,520 --> 00:14:03,360
actually like inject scheme in it so if

298
00:14:03,360 --> 00:14:05,010
you think about system the system D is

299
00:14:05,010 --> 00:14:08,730
written in C and so when when they want

300
00:14:08,730 --> 00:14:10,920
to add new features to system D it

301
00:14:10,920 --> 00:14:14,280
actually has to get into that setting so

302
00:14:14,280 --> 00:14:17,460
it's it's I mean it's modular but still

303
00:14:17,460 --> 00:14:20,400
you have to get into that thing right it

304
00:14:20,400 --> 00:14:23,370
has to be within system D whereas here

305
00:14:23,370 --> 00:14:26,670
we can just say ok well the Shepherd

306
00:14:26,670 --> 00:14:28,830
doesn't know how to launch file systems

307
00:14:28,830 --> 00:14:31,529
for instance yet it's a useful thing

308
00:14:31,529 --> 00:14:35,850
to the right so so if you're familiar

309
00:14:35,850 --> 00:14:38,430
with system the system B has this local

310
00:14:38,430 --> 00:14:42,089
FS dot argot thing to basically say okay

311
00:14:42,089 --> 00:14:43,889
I'm mounting all the local file systems

312
00:14:43,889 --> 00:14:47,069
well we have something similar here we

313
00:14:47,069 --> 00:14:49,800
have a file system service and it needs

314
00:14:49,800 --> 00:14:53,100
to be able to modify systems so we

315
00:14:53,100 --> 00:14:56,160
happen to have a module in Geeks that

316
00:14:56,160 --> 00:14:58,439
provides bindings to the c library and

317
00:14:58,439 --> 00:15:01,439
in turn that allows us to modify systems

318
00:15:01,439 --> 00:15:04,709
so we just want to use this module here

319
00:15:04,709 --> 00:15:07,290
and so we say okay I'm going to import

320
00:15:07,290 --> 00:15:10,680
those modules for the Shepherd and then

321
00:15:10,680 --> 00:15:12,540
I can use my amount and new mount

322
00:15:12,540 --> 00:15:16,430
procedures provided by this module so

323
00:15:16,430 --> 00:15:18,930
essentially without touching the code of

324
00:15:18,930 --> 00:15:20,850
the Shepherd we've added new

325
00:15:20,850 --> 00:15:23,249
functionality to it right we've just

326
00:15:23,249 --> 00:15:25,290
imported the ability to mount and

327
00:15:25,290 --> 00:15:27,300
unmount file systems without actually

328
00:15:27,300 --> 00:15:29,939
changing it so if you look at the git

329
00:15:29,939 --> 00:15:31,709
repo of the Shepherd you'll see it's

330
00:15:31,709 --> 00:15:34,949
quite inactive actually and one of the

331
00:15:34,949 --> 00:15:37,949
reasons for it is that well we can do

332
00:15:37,949 --> 00:15:40,439
things without actually modifying it so

333
00:15:40,439 --> 00:15:46,620
that's pretty cool now for another

334
00:15:46,620 --> 00:15:49,860
example so this is the typical you know

335
00:15:49,860 --> 00:15:52,680
service for a demon with the starts

336
00:15:52,680 --> 00:15:55,529
method to launch the demon so beetle B

337
00:15:55,529 --> 00:15:57,480
is an IRC gateway that I'm using on my

338
00:15:57,480 --> 00:15:58,889
laptop I don't know if you're using it

339
00:15:58,889 --> 00:16:04,829
it's pretty cool so beetle B is software

340
00:16:04,829 --> 00:16:06,059
that needs to talk to the network

341
00:16:06,059 --> 00:16:09,959
obviously right but it shouldn't have to

342
00:16:09,959 --> 00:16:12,689
talk to to have access to the file

343
00:16:12,689 --> 00:16:15,769
system like slash home and so on right

344
00:16:15,769 --> 00:16:18,750
so we've been discussing like for a

345
00:16:18,750 --> 00:16:21,209
month that we need to be able to

346
00:16:21,209 --> 00:16:23,040
showcase why it's so cool to have the

347
00:16:23,040 --> 00:16:25,829
Shepherd in in scheme so the previous

348
00:16:25,829 --> 00:16:28,290
example I gave about mount and you mount

349
00:16:28,290 --> 00:16:29,999
you know that's pretty cool but I still

350
00:16:29,999 --> 00:16:34,170
yeah kind of trivial right and so why

351
00:16:34,170 --> 00:16:36,149
don't the xxi them I thought okay let's

352
00:16:36,149 --> 00:16:38,839
let's make it happen so the thing here

353
00:16:38,839 --> 00:16:41,579
we want to be able to and it'll be in a

354
00:16:41,579 --> 00:16:45,209
container so that at least we reduce

355
00:16:45,209 --> 00:16:48,300
seeing the attack surface well we happen

356
00:16:48,300 --> 00:16:50,339
to have a container module in Geeks

357
00:16:50,339 --> 00:16:51,959
itself which is used for other things

358
00:16:51,959 --> 00:16:55,589
and so why don't we just import it for

359
00:16:55,589 --> 00:16:58,170
that definition inside of the Shepard

360
00:16:58,170 --> 00:17:00,569
so that we can run bilby inside a

361
00:17:00,569 --> 00:17:03,029
container well that's what we are doing

362
00:17:03,029 --> 00:17:12,809
here it's a rogue premier and so so

363
00:17:12,809 --> 00:17:15,119
essentially what happens here is that we

364
00:17:15,119 --> 00:17:17,250
just you know added this slash container

365
00:17:17,250 --> 00:17:19,949
things so we using a different procedure

366
00:17:19,949 --> 00:17:23,669
to start the process but this procedure

367
00:17:23,669 --> 00:17:25,890
is not defined in the Shepherd itself

368
00:17:25,890 --> 00:17:30,029
its defined in our own module here and

369
00:17:30,029 --> 00:17:33,510
and it actually works as as incredible

370
00:17:33,510 --> 00:17:39,539
as it may seem so so this is my my VM

371
00:17:39,539 --> 00:17:44,190
okay yeah I'm afraid this is not super

372
00:17:44,190 --> 00:17:48,960
readable but anyway the thing is I can

373
00:17:48,960 --> 00:17:51,330
use the hurt command to as a shepherd

374
00:17:51,330 --> 00:17:53,760
about my bit will be service and it's

375
00:17:53,760 --> 00:17:57,270
telling me that it's running as PID 476

376
00:17:57,270 --> 00:18:00,720
and so if I get into that container of

377
00:18:00,720 --> 00:18:06,480
PID 476 using Geeks container what's the

378
00:18:06,480 --> 00:18:10,350
story gigs container exec you know so

379
00:18:10,350 --> 00:18:16,649
I'm using gigs container exec 476 I'm

380
00:18:16,649 --> 00:18:18,750
afraid this is cueing me I'm afraid this

381
00:18:18,750 --> 00:18:21,750
is not so yeah okay but I just tell you

382
00:18:21,750 --> 00:18:22,880
what's happening on the screen

383
00:18:22,880 --> 00:18:25,799
essentially we have a shell that's

384
00:18:25,799 --> 00:18:29,669
running inside that that container and

385
00:18:29,669 --> 00:18:33,649
if we look at /proc

386
00:18:35,170 --> 00:18:42,260
well /proc / 0-9 we see there's only one

387
00:18:42,260 --> 00:18:44,420
process inside that container so that

388
00:18:44,420 --> 00:18:46,640
spill be running as PID one inside that

389
00:18:46,640 --> 00:18:52,790
container right that's that's sorry okay

390
00:18:52,790 --> 00:18:57,399
so that that's it for the world premiere

391
00:18:58,510 --> 00:19:00,650
so so far I've been talking about

392
00:19:00,650 --> 00:19:04,130
services that are typically demons right

393
00:19:04,130 --> 00:19:06,590
and that use the shepherd to be spawn

394
00:19:06,590 --> 00:19:09,920
that's that's the main use case so I'm

395
00:19:09,920 --> 00:19:11,090
going to talk about the story of

396
00:19:11,090 --> 00:19:15,100
services in gigs SD and how it went from

397
00:19:15,100 --> 00:19:19,670
sucking to being pretty cool so let's

398
00:19:19,670 --> 00:19:23,900
start with our first take on this so

399
00:19:23,900 --> 00:19:25,820
initially the focus when designing

400
00:19:25,820 --> 00:19:28,520
system services and geeks SD was like

401
00:19:28,520 --> 00:19:31,400
well all we need is something like let's

402
00:19:31,400 --> 00:19:34,220
say system the unit files right all we

403
00:19:34,220 --> 00:19:35,810
need is to be able to describe

404
00:19:35,810 --> 00:19:38,960
dependencies among services right we

405
00:19:38,960 --> 00:19:41,630
want to be able to say okay first thing

406
00:19:41,630 --> 00:19:45,860
as I do is to you know multi systems and

407
00:19:45,860 --> 00:19:48,320
then their user proceeds and then

408
00:19:48,320 --> 00:19:50,870
there's syslog D and there's a bunch of

409
00:19:50,870 --> 00:19:52,790
of stuff up there that you don't need to

410
00:19:52,790 --> 00:19:55,340
worry about but yeah that's that's the

411
00:19:55,340 --> 00:19:57,140
main idea right we have a dependency

412
00:19:57,140 --> 00:20:00,770
graph this graph is actually generated

413
00:20:00,770 --> 00:20:02,930
by by a command which is geek system

414
00:20:02,930 --> 00:20:05,090
Shepard graph so you can you know you

415
00:20:05,090 --> 00:20:07,280
you give it a config file and produce it

416
00:20:07,280 --> 00:20:12,020
the dependency graph for Shepard so that

417
00:20:12,020 --> 00:20:16,580
was the initial take on this so

418
00:20:16,580 --> 00:20:19,250
essentially the model was was well you

419
00:20:19,250 --> 00:20:21,290
know you have a demon and you just write

420
00:20:21,290 --> 00:20:25,630
service start stop and you're done right

421
00:20:25,630 --> 00:20:29,120
well except that there are some cases

422
00:20:29,120 --> 00:20:32,150
where you know before starting the demon

423
00:20:32,150 --> 00:20:34,160
you need to do some initialization right

424
00:20:34,160 --> 00:20:37,400
like you need to create Varley my secret

425
00:20:37,400 --> 00:20:39,740
something like that right so we added

426
00:20:39,740 --> 00:20:42,970
this activate field or service structure

427
00:20:42,970 --> 00:20:45,720
to handle this case

428
00:20:45,720 --> 00:20:48,600
well it turns out that you know for some

429
00:20:48,600 --> 00:20:51,029
demons you also need user accounts right

430
00:20:51,029 --> 00:20:54,750
so yeah like for Postgres you need the

431
00:20:54,750 --> 00:20:57,690
Postgres user accounts so we added these

432
00:20:57,690 --> 00:21:01,860
two fields to our service structure to

433
00:21:01,860 --> 00:21:06,779
handle this case and yeah turns out that

434
00:21:06,779 --> 00:21:08,899
for some services you also need pum

435
00:21:08,899 --> 00:21:11,490
service declaration you know pluggable

436
00:21:11,490 --> 00:21:13,049
authentication module service

437
00:21:13,049 --> 00:21:16,740
declaration and well for some services

438
00:21:16,740 --> 00:21:19,470
you also need files at the precise

439
00:21:19,470 --> 00:21:22,620
location is in slash eetzi so I think

440
00:21:22,620 --> 00:21:26,009
you see what I'm getting at right this

441
00:21:26,009 --> 00:21:28,769
is not very modular or extensive alright

442
00:21:28,769 --> 00:21:30,809
we ended up adding fields in that

443
00:21:30,809 --> 00:21:33,000
service structure and it didn't feel

444
00:21:33,000 --> 00:21:35,820
quite right although it did the job for

445
00:21:35,820 --> 00:21:41,159
a while and then it was like last year

446
00:21:41,159 --> 00:21:43,980
or maybe a bit more than a year ago and

447
00:21:43,980 --> 00:21:46,110
the wingull came to the mailing list and

448
00:21:46,110 --> 00:21:48,330
said ok gives us this cool but I want to

449
00:21:48,330 --> 00:21:53,460
be able to run gnome ok fine and to run

450
00:21:53,460 --> 00:21:55,470
gnome we actually need the whole free

451
00:21:55,470 --> 00:21:59,850
desktop set of services well I was like

452
00:21:59,850 --> 00:22:03,210
let's just add them right ok so what do

453
00:22:03,210 --> 00:22:06,120
we need well we need you dev and d-bus

454
00:22:06,120 --> 00:22:08,610
to start with ok that's that simple we

455
00:22:08,610 --> 00:22:12,600
have them and then we need things like

456
00:22:12,600 --> 00:22:15,240
you power for power management and you

457
00:22:15,240 --> 00:22:20,970
disks ok but Debus needs to know about

458
00:22:20,970 --> 00:22:23,879
you power you know it needs its dot

459
00:22:23,879 --> 00:22:26,940
service declaration thing that allows it

460
00:22:26,940 --> 00:22:29,309
to know that gb/s is it that you power

461
00:22:29,309 --> 00:22:32,429
is a debug service and same for you this

462
00:22:32,429 --> 00:22:34,259
so there is some sort of a connection

463
00:22:34,259 --> 00:22:37,049
between you power and d-bus but it's not

464
00:22:37,049 --> 00:22:40,440
like just you know a demon in the usual

465
00:22:40,440 --> 00:22:43,500
sense it's something else right and you

466
00:22:43,500 --> 00:22:46,440
de have also needs rules you know this

467
00:22:46,440 --> 00:22:49,740
dot wolves files from you power and you

468
00:22:49,740 --> 00:22:52,350
disks or just you power I don't remember

469
00:22:52,350 --> 00:22:55,519
anyway it needs info from those packages

470
00:22:55,519 --> 00:22:58,860
so it's like ok we can hack something

471
00:22:58,860 --> 00:23:01,140
we can we can manage it so at this point

472
00:23:01,140 --> 00:23:05,070
we were still fine right and then ID and

473
00:23:05,070 --> 00:23:08,640
he kept explaining well turns out we

474
00:23:08,640 --> 00:23:14,580
also need pockets login d and well it

475
00:23:14,580 --> 00:23:16,650
would be nice if we had this thing

476
00:23:16,650 --> 00:23:18,270
called ecology which is for color

477
00:23:18,270 --> 00:23:20,880
management and geo clue which is the

478
00:23:20,880 --> 00:23:23,790
deepest service for geolocation news by

479
00:23:23,790 --> 00:23:28,500
some applications I was like okay well

480
00:23:28,500 --> 00:23:30,570
how does that work right you know there

481
00:23:30,570 --> 00:23:33,570
are these arrows these are not arrows

482
00:23:33,570 --> 00:23:35,340
like independency in a Shepard

483
00:23:35,340 --> 00:23:37,020
dependency graph it's something else

484
00:23:37,020 --> 00:23:39,419
right there are connections between all

485
00:23:39,419 --> 00:23:41,429
those services but it's not not

486
00:23:41,429 --> 00:23:42,960
completely clear what these are all

487
00:23:42,960 --> 00:23:45,660
right it's about you know passing files

488
00:23:45,660 --> 00:23:47,850
and pieces of information between

489
00:23:47,850 --> 00:23:52,530
services and so at that point we we

490
00:23:52,530 --> 00:23:54,210
understood that we were essentially

491
00:23:54,210 --> 00:23:56,130
screwed right we we had to do something

492
00:23:56,130 --> 00:24:00,960
about services and gigs SD and to me

493
00:24:00,960 --> 00:24:03,720
yeah it really felt like this example in

494
00:24:03,720 --> 00:24:06,030
particular it it it felt like yeah

495
00:24:06,030 --> 00:24:08,250
spaghetti right but at the same time we

496
00:24:08,250 --> 00:24:10,890
knew that we had something to do and

497
00:24:10,890 --> 00:24:15,270
that's how it all started so nowadays in

498
00:24:15,270 --> 00:24:17,970
geeks is d we have composable services

499
00:24:17,970 --> 00:24:20,220
and we can handle this kind of situation

500
00:24:20,220 --> 00:24:22,590
and we actually have genome earning and

501
00:24:22,590 --> 00:24:25,830
that kind of thing so the key insight

502
00:24:25,830 --> 00:24:29,309
here from this free desktop example in

503
00:24:29,309 --> 00:24:32,549
that services you could think of them as

504
00:24:32,549 --> 00:24:35,790
extending each other right so like

505
00:24:35,790 --> 00:24:39,000
ecology you know ecology provides a dot

506
00:24:39,000 --> 00:24:42,090
service file to deepers all right so

507
00:24:42,090 --> 00:24:44,580
that you could think of it as extending

508
00:24:44,580 --> 00:24:47,160
the functionality of the person away and

509
00:24:47,160 --> 00:24:50,070
you have new power that provides you dev

510
00:24:50,070 --> 00:24:52,980
rules to you dev which is sort of like

511
00:24:52,980 --> 00:24:56,250
you know extending you dev and that was

512
00:24:56,250 --> 00:24:58,410
the key insight when we started

513
00:24:58,410 --> 00:25:03,720
redesigning services in pixels D so I'm

514
00:25:03,720 --> 00:25:05,520
gonna make a short digression to talk

515
00:25:05,520 --> 00:25:09,120
about how Nick so is the thing because I

516
00:25:09,120 --> 00:25:11,100
had been working on Nick's ways before

517
00:25:11,100 --> 00:25:12,030
and I

518
00:25:12,030 --> 00:25:14,460
obviously knew that that they were doing

519
00:25:14,460 --> 00:25:18,600
better than we were doing right so let's

520
00:25:18,600 --> 00:25:22,860
see how it works in Nick's voice so this

521
00:25:22,860 --> 00:25:25,440
is this is how you would write a service

522
00:25:25,440 --> 00:25:27,660
definition in Nick's voice so it's

523
00:25:27,660 --> 00:25:31,290
written the Nick's language but a game

524
00:25:31,290 --> 00:25:33,720
is out being a Nick's expert you could I

525
00:25:33,720 --> 00:25:35,010
guess you can understand what's

526
00:25:35,010 --> 00:25:38,600
happening here and it's all pretty

527
00:25:38,600 --> 00:25:41,220
consisting values and those values have

528
00:25:41,220 --> 00:25:45,090
meaningful names right and the thing

529
00:25:45,090 --> 00:25:48,030
here about service extension is that

530
00:25:48,030 --> 00:25:52,680
Nick's West seem to get it right so we

531
00:25:52,680 --> 00:25:56,280
can see here that sshd is adding new

532
00:25:56,280 --> 00:25:59,340
users it's extending what's in slushied

533
00:25:59,340 --> 00:26:02,700
see it's adding new services for system

534
00:26:02,700 --> 00:26:04,860
D all these things right so it's

535
00:26:04,860 --> 00:26:10,110
extending things in a way there's a

536
00:26:10,110 --> 00:26:12,270
difference still compared I mean there

537
00:26:12,270 --> 00:26:14,190
are a few things I was not completely

538
00:26:14,190 --> 00:26:15,930
happy about it so the great thing that's

539
00:26:15,930 --> 00:26:19,080
it's it's super versatile right from

540
00:26:19,080 --> 00:26:21,030
from your service definition you can

541
00:26:21,030 --> 00:26:22,590
change the whole system essentially

542
00:26:22,590 --> 00:26:25,890
right from time to slash it C to system

543
00:26:25,890 --> 00:26:28,800
D right and this is the really cool

544
00:26:28,800 --> 00:26:31,680
thing that we want to have but the

545
00:26:31,680 --> 00:26:35,580
not-so-great thing is that in in Nix OS

546
00:26:35,580 --> 00:26:39,410
you're actually building a big key value

547
00:26:39,410 --> 00:26:42,780
object right key value dictionary that

548
00:26:42,780 --> 00:26:44,400
contains the configuration of the whole

549
00:26:44,400 --> 00:26:47,340
system and so every service

550
00:26:47,340 --> 00:26:50,100
implementation received this config

551
00:26:50,100 --> 00:26:53,220
parameter as input and country actually

552
00:26:53,220 --> 00:26:54,960
represents the whole system

553
00:26:54,960 --> 00:26:58,080
configuration right and from there it

554
00:26:58,080 --> 00:27:01,950
actually produces additional key value

555
00:27:01,950 --> 00:27:04,700
pairs to add into that record that

556
00:27:04,700 --> 00:27:10,080
dictionary and you might have been this

557
00:27:10,080 --> 00:27:13,740
thing also the M key if so the thing is

558
00:27:13,740 --> 00:27:16,920
you can in an express service you can

559
00:27:16,920 --> 00:27:18,330
look at the existing system

560
00:27:18,330 --> 00:27:20,520
configuration but then it's recursive

561
00:27:20,520 --> 00:27:22,230
right it's actually a fixed point

562
00:27:22,230 --> 00:27:23,429
because you're looking at the

563
00:27:23,429 --> 00:27:25,140
configuration that you are currently

564
00:27:25,140 --> 00:27:28,140
building and so NYX is a lazy language

565
00:27:28,140 --> 00:27:29,820
but you have to pay attention to this

566
00:27:29,820 --> 00:27:32,190
thing because if you don't do that you

567
00:27:32,190 --> 00:27:34,620
might end up in an endless loops because

568
00:27:34,620 --> 00:27:36,720
you know you're looking at at a data

569
00:27:36,720 --> 00:27:37,920
structure that you're building at the

570
00:27:37,920 --> 00:27:41,250
same time that kind of thing and also my

571
00:27:41,250 --> 00:27:43,410
main grief is that it's it has good

572
00:27:43,410 --> 00:27:46,140
structure syntactically I mean you can

573
00:27:46,140 --> 00:27:48,000
see the structure of things each C

574
00:27:48,000 --> 00:27:52,140
system D and so on but then it doesn't

575
00:27:52,140 --> 00:27:54,930
that structure is purely syntactic right

576
00:27:54,930 --> 00:27:57,240
you cannot really tell what's going on

577
00:27:57,240 --> 00:27:59,700
how services are extending each other

578
00:27:59,700 --> 00:28:02,280
right you know that those arrows that I

579
00:28:02,280 --> 00:28:03,960
showed before we don't really have them

580
00:28:03,960 --> 00:28:10,140
here and so yeah this is what we want to

581
00:28:10,140 --> 00:28:13,140
have so we have this I would call it

582
00:28:13,140 --> 00:28:15,930
this system extension graph so we have

583
00:28:15,930 --> 00:28:18,380
color D again providing dot walls files

584
00:28:18,380 --> 00:28:22,620
I log in Norway xx geo clue predict dot

585
00:28:22,620 --> 00:28:24,690
service file and so on and so forth and

586
00:28:24,690 --> 00:28:27,540
we want to be able to model that graph

587
00:28:27,540 --> 00:28:29,730
really that's what we want to be able to

588
00:28:29,730 --> 00:28:32,850
do index is D so we can actually see

589
00:28:32,850 --> 00:28:34,800
what's going on and be pretty clear

590
00:28:34,800 --> 00:28:37,920
about what service modifies what all the

591
00:28:37,920 --> 00:28:40,260
parts of the system right you shouldn't

592
00:28:40,260 --> 00:28:42,330
be able to just change any part of the

593
00:28:42,330 --> 00:28:44,730
system configuration at some point you

594
00:28:44,730 --> 00:28:47,250
have to precisely say ok I need to

595
00:28:47,250 --> 00:28:52,080
change slash eat see for instance but

596
00:28:52,080 --> 00:28:54,930
yeah so this is the basic graph form for

597
00:28:54,930 --> 00:28:56,910
free desktop but again if we look a bit

598
00:28:56,910 --> 00:28:57,780
further

599
00:28:57,780 --> 00:29:00,330
while we see this pattern in different

600
00:29:00,330 --> 00:29:02,790
places like Debus itself you could think

601
00:29:02,790 --> 00:29:05,400
that it's extending the shepherd by

602
00:29:05,400 --> 00:29:07,500
providing a service definition to start

603
00:29:07,500 --> 00:29:10,920
it and D base is also extending slash it

604
00:29:10,920 --> 00:29:13,980
C by you know providing solution C /

605
00:29:13,980 --> 00:29:18,950
Debus one the directory

606
00:29:20,040 --> 00:29:23,710
so this is again what we want to be able

607
00:29:23,710 --> 00:29:26,170
to keep on the and the user side of

608
00:29:26,170 --> 00:29:28,600
things right the users should still be

609
00:29:28,600 --> 00:29:30,790
able to have that simple list of values

610
00:29:30,790 --> 00:29:34,210
that they manipulate and so we have some

611
00:29:34,210 --> 00:29:36,100
sort of a mismatch here because we want

612
00:29:36,100 --> 00:29:37,810
to have a model which is essentially a

613
00:29:37,810 --> 00:29:40,840
graph yet at the same time we want users

614
00:29:40,840 --> 00:29:43,030
to be able to manipulate a simple list

615
00:29:43,030 --> 00:29:46,590
of objects so how did we do that

616
00:29:46,590 --> 00:29:49,510
well the thing here is to introduce a

617
00:29:49,510 --> 00:29:52,240
notion of services which are first-class

618
00:29:52,240 --> 00:29:55,390
values representing services which may

619
00:29:55,390 --> 00:29:57,960
or may not be shepherd services and

620
00:29:57,960 --> 00:30:01,690
service types which represent you know

621
00:30:01,690 --> 00:30:06,850
classes of services so let's let's see

622
00:30:06,850 --> 00:30:11,280
an example where is it

623
00:30:15,020 --> 00:30:20,550
okay so going back to my desktop service

624
00:30:20,550 --> 00:30:24,830
example this is the ecology service type

625
00:30:24,830 --> 00:30:28,260
so this is how we define it in geeks is

626
00:30:28,260 --> 00:30:32,160
d we have we define a service type okay

627
00:30:32,160 --> 00:30:34,770
and it has a number of extensions so

628
00:30:34,770 --> 00:30:36,600
these are exactly though that I should

629
00:30:36,600 --> 00:30:40,440
be for in the graph right so it extends

630
00:30:40,440 --> 00:30:42,240
the the so called account service

631
00:30:42,240 --> 00:30:44,190
meaning that it's creating new user

632
00:30:44,190 --> 00:30:47,580
accounts it extends the activation

633
00:30:47,580 --> 00:30:49,920
service meaning that it provides code to

634
00:30:49,920 --> 00:30:52,800
run when you boot the system like you

635
00:30:52,800 --> 00:30:55,110
know creating volley ecology something

636
00:30:55,110 --> 00:30:58,530
like that then it extends dbest to

637
00:30:58,530 --> 00:31:02,940
provide its dot service file and we're

638
00:31:02,940 --> 00:31:05,130
making a distinction between service

639
00:31:05,130 --> 00:31:08,550
types and services because you know so

640
00:31:08,550 --> 00:31:10,380
this is color D so typically you have

641
00:31:10,380 --> 00:31:12,270
only one instance of ecology running on

642
00:31:12,270 --> 00:31:15,630
your system but in some cases like sshd

643
00:31:15,630 --> 00:31:18,150
you may want to have several instances

644
00:31:18,150 --> 00:31:21,450
of them so likewise we have an sshd

645
00:31:21,450 --> 00:31:22,770
service type

646
00:31:22,770 --> 00:31:25,140
well actually OpenSSH service type and

647
00:31:25,140 --> 00:31:28,080
you can have several instances of this

648
00:31:28,080 --> 00:31:32,100
particular type so in this way we are

649
00:31:32,100 --> 00:31:34,860
defining the graph that I should be for

650
00:31:34,860 --> 00:31:38,040
you know for all the services and we can

651
00:31:38,040 --> 00:31:39,930
pretty much achieve what I showed for an

652
00:31:39,930 --> 00:31:43,020
XS which is that you can choose which

653
00:31:43,020 --> 00:31:44,970
parts of the system you want to extend

654
00:31:44,970 --> 00:31:47,880
and actually you know define how you

655
00:31:47,880 --> 00:31:51,810
extend it so for the account service

656
00:31:51,810 --> 00:31:54,420
extension we provide user account

657
00:31:54,420 --> 00:31:56,940
subject that's that's how extend it and

658
00:31:56,940 --> 00:32:00,150
then for the color deactivation we

659
00:32:00,150 --> 00:32:03,330
provide a snippet of code for Debus we

660
00:32:03,330 --> 00:32:06,330
provide the package object and then what

661
00:32:06,330 --> 00:32:08,310
do we have here

662
00:32:08,310 --> 00:32:11,670
and for pockets we provide pocket

663
00:32:11,670 --> 00:32:14,190
actions which are themselves contained

664
00:32:14,190 --> 00:32:17,220
in a package object so this is all you

665
00:32:17,220 --> 00:32:20,100
know we have disjoint types for all the

666
00:32:20,100 --> 00:32:22,500
things so we can know precisely what

667
00:32:22,500 --> 00:32:23,610
well it is that we are manipulating

668
00:32:23,610 --> 00:32:27,050
right so it's not like this

669
00:32:27,050 --> 00:32:29,550
you know key-value dictionary that i

670
00:32:29,550 --> 00:32:31,410
should be for you have to be very

671
00:32:31,410 --> 00:32:32,880
precise about the types that you're

672
00:32:32,880 --> 00:32:34,800
manipulating and things that you're

673
00:32:34,800 --> 00:32:42,510
providing as extensions right and then

674
00:32:42,510 --> 00:32:45,030
once we have that we can use that geek

675
00:32:45,030 --> 00:32:48,000
system extension graph command and we

676
00:32:48,000 --> 00:32:50,640
can visualize how the system services

677
00:32:50,640 --> 00:32:52,830
are composed which is I think pretty

678
00:32:52,830 --> 00:32:56,520
unique to geeks is D and so even for a

679
00:32:56,520 --> 00:32:58,530
simple system like I should before is

680
00:32:58,530 --> 00:33:00,809
essentially just the basic services plus

681
00:33:00,809 --> 00:33:04,830
sshd we get to grab thats already you

682
00:33:04,830 --> 00:33:09,929
know kind of big but essentially we find

683
00:33:09,929 --> 00:33:13,230
the same thing things as before so at

684
00:33:13,230 --> 00:33:16,440
the top over there just above the screen

685
00:33:16,440 --> 00:33:21,960
hey we have OpenSSH and these pinkish

686
00:33:21,960 --> 00:33:24,660
arrows actually show what OpenSSH

687
00:33:24,660 --> 00:33:27,059
extends so we can see that it extends

688
00:33:27,059 --> 00:33:30,210
the activate service the account service

689
00:33:30,210 --> 00:33:35,370
and the Shepherd white PID one yeah and

690
00:33:35,370 --> 00:33:38,100
we have a bunch of other extensions

691
00:33:38,100 --> 00:33:41,000
going on here

692
00:33:43,410 --> 00:33:46,980
now hey if we look at that example that

693
00:33:46,980 --> 00:33:48,990
that supposedly simple free desktop

694
00:33:48,990 --> 00:33:51,990
example well it's still still spaghetti

695
00:33:51,990 --> 00:33:55,320
right but at least we can visualize

696
00:33:55,320 --> 00:34:01,050
those packages and that's right that's

697
00:34:01,050 --> 00:34:06,030
probably an improvement I guess but more

698
00:34:06,030 --> 00:34:08,040
seriously it allows you to reason about

699
00:34:08,040 --> 00:34:11,190
what's going on here kind of so if

700
00:34:11,190 --> 00:34:13,679
obviously you have to zoom in to get a

701
00:34:13,679 --> 00:34:15,360
feel of what's going on but essentially

702
00:34:15,360 --> 00:34:18,810
we see gnome that's extending what is it

703
00:34:18,810 --> 00:34:21,629
Paul kit and Paul kit is doing it thing

704
00:34:21,629 --> 00:34:27,540
with Uddhav and whatever so we can write

705
00:34:27,540 --> 00:34:29,250
what the details don't really matter

706
00:34:29,250 --> 00:34:32,340
here it just just to show that here we

707
00:34:32,340 --> 00:34:34,260
have a well-defined structure of

708
00:34:34,260 --> 00:34:36,750
services and service extensions and we

709
00:34:36,750 --> 00:34:41,239
can visualize it that does the story so

710
00:34:41,239 --> 00:34:45,000
at each step on this kind of graph frame

711
00:34:45,000 --> 00:34:46,949
manipulating different types of objects

712
00:34:46,949 --> 00:34:51,449
so if we go to Paul kits for instance

713
00:34:51,449 --> 00:34:53,629
Paul kit is concerned with policy rules

714
00:34:53,629 --> 00:34:56,310
whereas you dev is concerned with you

715
00:34:56,310 --> 00:34:59,520
dev roles and the account service is

716
00:34:59,520 --> 00:35:01,500
concerned with user accounts right and

717
00:35:01,500 --> 00:35:04,320
at some point it has to be folded into

718
00:35:04,320 --> 00:35:06,300
something that's low level right that's

719
00:35:06,300 --> 00:35:09,750
close to what you have on disk and this

720
00:35:09,750 --> 00:35:12,060
is way at the bottom here just below the

721
00:35:12,060 --> 00:35:15,600
screen this time we have one node which

722
00:35:15,600 --> 00:35:19,380
is the system so you remember when I run

723
00:35:19,380 --> 00:35:21,900
gig system build I got one directory as

724
00:35:21,900 --> 00:35:24,750
a result well that's this node here at

725
00:35:24,750 --> 00:35:28,460
the bottom so the system is a service

726
00:35:28,460 --> 00:35:31,170
that's itself extended by all these

727
00:35:31,170 --> 00:35:33,560
things

728
00:35:34,690 --> 00:35:37,220
so what that means is that we need to be

729
00:35:37,220 --> 00:35:39,500
able to fold values and to sort of

730
00:35:39,500 --> 00:35:41,750
compile them from this high level like

731
00:35:41,750 --> 00:35:43,670
user accounts you'd have rules into

732
00:35:43,670 --> 00:35:45,770
something as low level as files on disk

733
00:35:45,770 --> 00:35:49,040
so how does that work well there is a

734
00:35:49,040 --> 00:35:54,170
fall services procedure that I don't

735
00:35:54,170 --> 00:35:56,119
know if I'm going to be able to present

736
00:35:56,119 --> 00:36:02,260
maybe yes maybe yes okay let's do it

737
00:36:04,630 --> 00:36:08,119
okay so Alex showed you the gazer and

738
00:36:08,119 --> 00:36:09,290
the ripple and all that so you're

739
00:36:09,290 --> 00:36:11,380
probably super familiar with it now so

740
00:36:11,380 --> 00:36:14,000
essentially I'm running guile here and

741
00:36:14,000 --> 00:36:15,859
I'm saying okay I want to load my

742
00:36:15,859 --> 00:36:18,770
operating system configuration like this

743
00:36:18,770 --> 00:36:22,400
and I get an operating system object and

744
00:36:22,400 --> 00:36:26,030
from there I can do like I can query it

745
00:36:26,030 --> 00:36:28,609
like how many system services do I have

746
00:36:28,609 --> 00:36:32,140
in there well I have 27 of them fine and

747
00:36:32,140 --> 00:36:35,060
now how do we actually compile these to

748
00:36:35,060 --> 00:36:37,490
those low-level files on disk

749
00:36:37,490 --> 00:36:40,480
essentially well I can use this fold

750
00:36:40,480 --> 00:36:45,849
services thing it's not in my history

751
00:36:47,710 --> 00:36:52,319
so I can say operating system services

752
00:36:52,319 --> 00:36:56,829
if if I give no arguments then I'm

753
00:36:56,829 --> 00:36:58,960
getting as a result a single value which

754
00:36:58,960 --> 00:37:02,260
is the the system service right and if I

755
00:37:02,260 --> 00:37:04,390
look at the parameters field of that

756
00:37:04,390 --> 00:37:06,640
value it's actually well the system

757
00:37:06,640 --> 00:37:08,740
itself right so derivation that'd be the

758
00:37:08,740 --> 00:37:11,400
system but I can also stop at

759
00:37:11,400 --> 00:37:15,220
intermediary intermediary levels so I

760
00:37:15,220 --> 00:37:19,809
can say okay this time I'm specifying a

761
00:37:19,809 --> 00:37:25,240
target system type let's say it's the

762
00:37:25,240 --> 00:37:30,700
service type I'm getting this huge value

763
00:37:30,700 --> 00:37:33,910
which actually represents all the files

764
00:37:33,910 --> 00:37:35,829
that are going to end up in slash eetzi

765
00:37:35,829 --> 00:37:38,680
alright so I can do as some sort of a

766
00:37:38,680 --> 00:37:40,480
step-by-step compilation of this

767
00:37:40,480 --> 00:37:42,880
high-level declaration to what's going

768
00:37:42,880 --> 00:37:51,270
to end up on disk any husker in the room

769
00:37:51,270 --> 00:37:58,809
so this is a monolid I think so just to

770
00:37:58,809 --> 00:38:01,930
conclude I think the takeaway message is

771
00:38:01,930 --> 00:38:05,589
obviously that this you know we leverage

772
00:38:05,589 --> 00:38:08,790
a holistic approach to system services

773
00:38:08,790 --> 00:38:13,359
so more seriously so the initial idea

774
00:38:13,359 --> 00:38:16,480
that essentially a system the unit file

775
00:38:16,480 --> 00:38:19,720
is what a system service is turned out

776
00:38:19,720 --> 00:38:22,780
to be float:right system services are

777
00:38:22,780 --> 00:38:25,030
more than just you know actions to start

778
00:38:25,030 --> 00:38:26,770
daemon stop daemon and stuff like that

779
00:38:26,770 --> 00:38:28,900
it's more than just this dependency

780
00:38:28,900 --> 00:38:33,700
graph service extensions as I showed

781
00:38:33,700 --> 00:38:35,619
they capture all these aspects of

782
00:38:35,619 --> 00:38:37,960
service configuration and how they

783
00:38:37,960 --> 00:38:41,349
interact with each other and it makes

784
00:38:41,349 --> 00:38:44,559
complex configuration tractable so there

785
00:38:44,559 --> 00:38:47,680
is a Geeks contributor maybe maybe

786
00:38:47,680 --> 00:38:50,410
somewhere here Chris Christopher Baines

787
00:38:50,410 --> 00:38:53,440
who has been using it at their workplace

788
00:38:53,440 --> 00:38:56,559
to actually build very complex kind of

789
00:38:56,559 --> 00:38:58,990
things like you know Web Services in

790
00:38:58,990 --> 00:39:00,910
Ruby's that extend the end

791
00:39:00,910 --> 00:39:03,100
service which in turn does create these

792
00:39:03,100 --> 00:39:04,680
things that I don't really understand

793
00:39:04,680 --> 00:39:07,390
but yeah you know like complex

794
00:39:07,390 --> 00:39:08,980
configuration like though that you have

795
00:39:08,980 --> 00:39:11,890
on Web Services you can handle them in

796
00:39:11,890 --> 00:39:13,780
this way and you can still reason about

797
00:39:13,780 --> 00:39:16,570
them and find out what's going on and

798
00:39:16,570 --> 00:39:20,140
that's pretty cool I think and so you

799
00:39:20,140 --> 00:39:21,790
should come up with your own system

800
00:39:21,790 --> 00:39:26,050
services because then the the limit is

801
00:39:26,050 --> 00:39:29,860
imagination right I mean you can you can

802
00:39:29,860 --> 00:39:32,470
think of very high level services like

803
00:39:32,470 --> 00:39:35,380
you know the like I don't know get lab

804
00:39:35,380 --> 00:39:37,630
service or you know something that

805
00:39:37,630 --> 00:39:40,150
provides a big service and interns you

806
00:39:40,150 --> 00:39:42,040
can you know decompose all the details

807
00:39:42,040 --> 00:39:43,900
of what's going to happen and that's

808
00:39:43,900 --> 00:39:46,510
really cool so you're welcome to join us

809
00:39:46,510 --> 00:39:50,380
in having fun with Zeke's SD and that's

810
00:39:50,380 --> 00:39:51,730
it

811
00:39:51,730 --> 00:39:59,530
[Applause]

812
00:39:59,530 --> 00:40:02,930
any questions yep

813
00:40:02,930 --> 00:40:04,940
since you're interesting like the kind

814
00:40:04,940 --> 00:40:06,260
of services graphs that you were showing

815
00:40:06,260 --> 00:40:08,480
they basically execute us with the geese

816
00:40:08,480 --> 00:40:10,160
come on right so this basically they

817
00:40:10,160 --> 00:40:13,130
they're generated on the fly from a for

818
00:40:13,130 --> 00:40:14,390
my description system description right

819
00:40:14,390 --> 00:40:16,099
if you so that is intriguing to some we

820
00:40:16,099 --> 00:40:17,780
also for all that likes complex software

821
00:40:17,780 --> 00:40:20,119
footage is to try and know like just to

822
00:40:20,119 --> 00:40:25,520
visualize yeah yeah think you might work

823
00:40:25,520 --> 00:40:26,119
environment

824
00:40:26,119 --> 00:40:36,829
like providing web services right so

825
00:40:36,829 --> 00:40:38,810
yeah so just repeat your comment is

826
00:40:38,810 --> 00:40:41,750
about visualizing in graphs in general

827
00:40:41,750 --> 00:40:43,880
and how you combine things right I think

828
00:40:43,880 --> 00:40:45,770
it's really useful and actually I was

829
00:40:45,770 --> 00:40:48,140
really jealous of Eustace yesterday in

830
00:40:48,140 --> 00:40:51,290
the her talk because I would have loved

831
00:40:51,290 --> 00:40:54,440
to have the d3.js kind of thing where

832
00:40:54,440 --> 00:40:56,450
you could you know show how you compile

833
00:40:56,450 --> 00:40:59,810
services down to the final value next

834
00:40:59,810 --> 00:41:04,460
time maybe other questions do we still

835
00:41:04,460 --> 00:41:09,400
have time yes Oh sundar

836
00:41:25,460 --> 00:41:29,100
yeah so yeah so the question is about

837
00:41:29,100 --> 00:41:31,290
memory and CPU usage when building a

838
00:41:31,290 --> 00:41:33,000
configuration and the complex

839
00:41:33,000 --> 00:41:35,640
configuration so I think I don't have

840
00:41:35,640 --> 00:41:39,330
any concrete figures and also with I've

841
00:41:39,330 --> 00:41:41,520
never really toyed with configurations

842
00:41:41,520 --> 00:41:43,650
that are really that complex I mean a

843
00:41:43,650 --> 00:41:46,710
desktop configuration already has some

844
00:41:46,710 --> 00:41:48,660
complexity but maybe not as much as the

845
00:41:48,660 --> 00:41:52,800
the web services I mentioned earlier so

846
00:41:52,800 --> 00:41:55,620
you've seen it in action it takes like I

847
00:41:55,620 --> 00:41:57,630
don't know maybe a couple of seconds at

848
00:41:57,630 --> 00:41:59,460
least where things are already in store

849
00:41:59,460 --> 00:42:03,270
I haven't done any memory usage

850
00:42:03,270 --> 00:42:07,770
measurement it's not not super efficient

851
00:42:07,770 --> 00:42:12,150
probably but still not maybe yeah I

852
00:42:12,150 --> 00:42:13,470
remember with large Knicks waste

853
00:42:13,470 --> 00:42:15,480
configurations you could have huge

854
00:42:15,480 --> 00:42:19,650
memory hogs I think it's probably less

855
00:42:19,650 --> 00:42:20,970
bad but again I haven't done any

856
00:42:20,970 --> 00:42:28,950
measurement so I can't really tell yeah

857
00:42:28,950 --> 00:42:31,819
all the questions

858
00:42:32,200 --> 00:42:36,350
or maybe your break okay

859
00:42:36,350 --> 00:42:43,559
[Applause]

860
00:42:43,559 --> 00:42:45,619
you

