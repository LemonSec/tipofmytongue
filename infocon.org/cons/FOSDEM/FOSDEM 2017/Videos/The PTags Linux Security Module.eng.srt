1
00:00:00,000 --> 00:00:03,140
who's going to talk about

2
00:00:04,890 --> 00:00:09,660
process tags welcome hello thank you to

3
00:00:09,660 --> 00:00:13,230
the organizer of the security room first

4
00:00:13,230 --> 00:00:18,060
because the the except my talk thank you

5
00:00:18,060 --> 00:00:21,529
to you to be here so I will speak about

6
00:00:21,529 --> 00:00:22,710
PTX

7
00:00:22,710 --> 00:00:24,990
that this process tag so it's a good

8
00:00:24,990 --> 00:00:29,820
name process tax it's currently

9
00:00:29,820 --> 00:00:33,480
implemented as module in the kernel but

10
00:00:33,480 --> 00:00:35,760
it's not in the corner because it's not

11
00:00:35,760 --> 00:00:37,829
on the tree of the kernel so it's a

12
00:00:37,829 --> 00:00:42,390
Linux security module based system it

13
00:00:42,390 --> 00:00:46,140
benefits from the stacking facility that

14
00:00:46,140 --> 00:00:51,890
is implemented in Colonel since Linux

15
00:00:51,890 --> 00:00:57,000
4.1 and cents to Casa flow that is the

16
00:00:57,000 --> 00:01:00,600
route or of smack security module it

17
00:01:00,600 --> 00:01:03,780
allows to stack several Linux security

18
00:01:03,780 --> 00:01:06,660
module and it's an ongoing effort that

19
00:01:06,660 --> 00:01:14,009
is still continuing to the the idea is

20
00:01:14,009 --> 00:01:18,030
just a dream as to be able to allow at

21
00:01:18,030 --> 00:01:23,820
the same time sa Linux upon or tomorrow

22
00:01:23,820 --> 00:01:29,930
and smack so we'll see now why to tag

23
00:01:29,930 --> 00:01:31,649
that's the question

24
00:01:31,649 --> 00:01:34,020
but I think that you'll see at the top

25
00:01:34,020 --> 00:01:38,280
the devices here are not tagged so it's

26
00:01:38,280 --> 00:01:41,579
a shame because you can not say if it's

27
00:01:41,579 --> 00:01:45,560
the fish soup that you like or this

28
00:01:45,560 --> 00:01:51,149
 bloody comp if that you dislike

29
00:01:51,149 --> 00:01:57,780
ok currently kernel processor attacked

30
00:01:57,780 --> 00:02:00,689
any any processes tact that's the way

31
00:02:00,689 --> 00:02:06,149
that works as a Linux smack and some

32
00:02:06,149 --> 00:02:09,449
other so currently it already exists but

33
00:02:09,449 --> 00:02:13,260
you cannot do it by your home for you

34
00:02:13,260 --> 00:02:18,120
user space use so that's the idea

35
00:02:18,120 --> 00:02:24,030
how it works currently there is two

36
00:02:24,030 --> 00:02:29,909
fights by task this one that is in the

37
00:02:29,909 --> 00:02:35,040
proc PID of the main process and at its

38
00:02:35,040 --> 00:02:37,680
here it's at for the attribute that's

39
00:02:37,680 --> 00:02:40,379
where we you will find security

40
00:02:40,379 --> 00:02:43,110
attribute but be aware it will challenge

41
00:02:43,110 --> 00:02:47,700
soon and error is obscene of Phi P tax

42
00:02:47,700 --> 00:02:52,310
that allows you to converse with the

43
00:02:52,310 --> 00:02:55,290
module so you can read it you can write

44
00:02:55,290 --> 00:02:58,530
it and it responds to I know defeat that

45
00:02:58,530 --> 00:03:01,470
is a very cool thing

46
00:03:01,470 --> 00:03:05,849
so our p tax P tags are just strings you

47
00:03:05,849 --> 00:03:12,269
know so no the string cannot contain a

48
00:03:12,269 --> 00:03:17,840
newline character so this are just

49
00:03:17,840 --> 00:03:24,750
strings without control character you

50
00:03:24,750 --> 00:03:29,280
can insert spaces but no tabs so no

51
00:03:29,280 --> 00:03:32,010
confusion if you see a space it's a

52
00:03:32,010 --> 00:03:36,769
space not at that and it's a field

53
00:03:36,769 --> 00:03:43,549
structured separated by colons okay then

54
00:03:43,549 --> 00:03:47,190
how to use it for example you can here

55
00:03:47,190 --> 00:03:51,900
just use your share to show the content

56
00:03:51,900 --> 00:03:55,530
of the P tags so it just shows you the

57
00:03:55,530 --> 00:04:00,000
tax of the process one the line you can

58
00:04:00,000 --> 00:04:04,379
rip it there is also a kind of query

59
00:04:04,379 --> 00:04:08,480
language so you can write to this same

60
00:04:08,480 --> 00:04:14,519
file you can write this it means do you

61
00:04:14,519 --> 00:04:20,160
have this and the answer is yes and do

62
00:04:20,160 --> 00:04:24,539
this and the answer is no that's really

63
00:04:24,539 --> 00:04:27,289
simple okay

64
00:04:28,420 --> 00:04:32,810
it provides also a kind of white car

65
00:04:32,810 --> 00:04:40,420
query so this is structured as a Yoshi

66
00:04:41,860 --> 00:04:48,440
currently you can add tags using this

67
00:04:48,440 --> 00:04:52,160
kind of query language so just a plus

68
00:04:52,160 --> 00:04:54,050
plus this tag okay

69
00:04:54,050 --> 00:04:59,270
plus this tag and at the end you get the

70
00:04:59,270 --> 00:05:07,790
process tag okay oh yes a sign not

71
00:05:07,790 --> 00:05:10,669
attacks are returned at Saatchi such

72
00:05:10,669 --> 00:05:14,080
cool thank you

73
00:05:14,140 --> 00:05:18,260
okay another aspect is tags can have

74
00:05:18,260 --> 00:05:23,300
value so here you say give the value

75
00:05:23,300 --> 00:05:25,030
simple to the test

76
00:05:25,030 --> 00:05:28,550
thanks but the the tag have to exist

77
00:05:28,550 --> 00:05:33,620
before okay you can remove the value of

78
00:05:33,620 --> 00:05:36,200
attack that is not exactly the same that

79
00:05:36,200 --> 00:05:39,380
setting the value equal nothing because

80
00:05:39,380 --> 00:05:42,050
the value equal nothing is the value

81
00:05:42,050 --> 00:05:44,750
nothing but not having a value is not

82
00:05:44,750 --> 00:05:48,140
having the value nothing okay it seems

83
00:05:48,140 --> 00:05:58,600
reasonable and you can also remove tags

84
00:05:58,600 --> 00:06:01,910
that's cool this kind of query language

85
00:06:01,910 --> 00:06:06,350
is very easy to learn so remove test

86
00:06:06,350 --> 00:06:14,919
then remove at the end it's removed

87
00:06:16,860 --> 00:06:25,210
okay now forking executing will fork you

88
00:06:25,210 --> 00:06:28,780
the process keeps its tag so the child

89
00:06:28,780 --> 00:06:31,120
process has the same tiles did the

90
00:06:31,120 --> 00:06:37,720
parent process when you exactly the tax

91
00:06:37,720 --> 00:06:42,400
that are not having the Kipp flag it is

92
00:06:42,400 --> 00:06:49,930
shown here as hat sign the tags that are

93
00:06:49,930 --> 00:06:52,930
not true they do not have the Cape like

94
00:06:52,930 --> 00:06:59,800
are removed and only the tax that must

95
00:06:59,800 --> 00:07:02,500
be kept our kids that's cool

96
00:07:02,500 --> 00:07:08,590
and efficient so now let's go in how it

97
00:07:08,590 --> 00:07:13,660
works when you have to do something with

98
00:07:13,660 --> 00:07:17,110
Kip flags so here is nothing here is

99
00:07:17,110 --> 00:07:20,080
attack and the tag with the Cape flags

100
00:07:20,080 --> 00:07:25,120
so the Guru's error are not so

101
00:07:25,120 --> 00:07:27,370
complicated but I will not enter in that

102
00:07:27,370 --> 00:07:30,280
so what is important is to know that you

103
00:07:30,280 --> 00:07:34,180
can set the keep the flag remove the Kip

104
00:07:34,180 --> 00:07:38,340
flag create the tag it's it's logic ok

105
00:07:38,340 --> 00:07:41,490
nothing really

106
00:07:41,490 --> 00:07:48,490
extraordinaire it works now about the

107
00:07:48,490 --> 00:07:51,150
star that is the pattern you are

108
00:07:51,150 --> 00:07:54,220
matching something it also works for

109
00:07:54,220 --> 00:07:58,270
removing but also yeah that is special

110
00:07:58,270 --> 00:08:04,169
for adding keep flag

111
00:08:04,889 --> 00:08:07,379
okay we are in the room of security and

112
00:08:07,379 --> 00:08:11,219
we have not talked about security

113
00:08:11,219 --> 00:08:15,689
currently so why why is it here in the

114
00:08:15,689 --> 00:08:19,009
room of security it's because this is

115
00:08:19,009 --> 00:08:22,800
related to process it so you you want to

116
00:08:22,800 --> 00:08:25,469
take the process for what reason I don't

117
00:08:25,469 --> 00:08:26,069
know

118
00:08:26,069 --> 00:08:32,849
but if anyone can do that it's just a

119
00:08:32,849 --> 00:08:36,299
nightmare so there are rules that tell

120
00:08:36,299 --> 00:08:38,269
you what you can do so the rules are

121
00:08:38,269 --> 00:08:41,700
very easy if you are a colonel process

122
00:08:41,700 --> 00:08:44,760
or can I thread you can do anyone

123
00:08:44,760 --> 00:08:46,620
anything that you want but it's not

124
00:08:46,620 --> 00:08:49,560
intended to be used by Konnor process or

125
00:08:49,560 --> 00:08:50,760
canals right

126
00:08:50,760 --> 00:08:53,399
it's a finality there is no internal API

127
00:08:53,399 --> 00:08:57,630
it's only user space taking so you

128
00:08:57,630 --> 00:09:01,339
should have the capability of

129
00:09:01,339 --> 00:09:03,360
administrating one that ori access

130
00:09:03,360 --> 00:09:08,970
control its i maybe someone will say

131
00:09:08,970 --> 00:09:14,720
okay can we create a new capability no I

132
00:09:14,720 --> 00:09:19,970
used what existed so there is a way of

133
00:09:19,970 --> 00:09:23,610
dealing with IOT capabilities is to use

134
00:09:23,610 --> 00:09:27,779
the prefix ptex contacts so if a process

135
00:09:27,779 --> 00:09:31,709
has special tagging that means starting

136
00:09:31,709 --> 00:09:36,300
with P tags it can had it can serve it

137
00:09:36,300 --> 00:09:40,860
can set it can also manage others

138
00:09:40,860 --> 00:09:45,930
processes so this are the basic actions

139
00:09:45,930 --> 00:09:49,820
that you can perform adding a tag

140
00:09:49,820 --> 00:09:52,380
removing attack setting the value of

141
00:09:52,380 --> 00:09:55,860
attack changing the tags of another

142
00:09:55,860 --> 00:10:01,140
process so here are some examples it

143
00:10:01,140 --> 00:10:01,589
means

144
00:10:01,589 --> 00:10:06,740
okay this one can remove any tag of

145
00:10:06,740 --> 00:10:11,510
itself and

146
00:10:11,510 --> 00:10:14,270
it can not remove the tags starting with

147
00:10:14,270 --> 00:10:15,080
P tags

148
00:10:15,080 --> 00:10:19,760
that's another security aspect is that

149
00:10:19,760 --> 00:10:23,470
to remove tags with P tax you must have

150
00:10:23,470 --> 00:10:27,320
this oh no it's not here it's here

151
00:10:27,320 --> 00:10:30,260
because here I also explained it it you

152
00:10:30,260 --> 00:10:34,010
you must have this kind of tag telling

153
00:10:34,010 --> 00:10:37,820
that you can add P tags that's it's a

154
00:10:37,820 --> 00:10:40,690
security it's a kind of traffic language

155
00:10:40,690 --> 00:10:46,060
not so hard to understand but efficient

156
00:10:46,060 --> 00:10:50,210
so here are example of use case the

157
00:10:50,210 --> 00:10:53,750
launcher use case ok the launcher here

158
00:10:53,750 --> 00:10:59,060
has some tags that allows him to create

159
00:10:59,060 --> 00:11:02,600
new text for the luncheon process then

160
00:11:02,600 --> 00:11:07,040
it drops its privilege and at the end it

161
00:11:07,040 --> 00:11:11,540
exacts for the processes it has to

162
00:11:11,540 --> 00:11:16,610
launch and process is now tagged with

163
00:11:16,610 --> 00:11:22,130
what the launcher expect to give errors

164
00:11:22,130 --> 00:11:25,190
to pass because in the fact you know

165
00:11:25,190 --> 00:11:31,460
it's not mandatory to use this to remove

166
00:11:31,460 --> 00:11:34,850
the privilege but you have to to have

167
00:11:34,850 --> 00:11:37,700
privilege before so it's the issue with

168
00:11:37,700 --> 00:11:39,680
the launcher launcher has to be

169
00:11:39,680 --> 00:11:42,320
privileged and to remove and dropped its

170
00:11:42,320 --> 00:11:45,170
privilege so that's that's an issue with

171
00:11:45,170 --> 00:11:49,100
launcher use case it was designed at

172
00:11:49,100 --> 00:11:52,190
first to give permissions to client so

173
00:11:52,190 --> 00:11:55,400
the client as attacked the tag is a kind

174
00:11:55,400 --> 00:11:58,900
of permission the server can query what

175
00:11:58,900 --> 00:12:03,320
permission does this process as this tag

176
00:12:03,320 --> 00:12:08,600
yes okay I will process there is for

177
00:12:08,600 --> 00:12:11,570
example the identity use case this

178
00:12:11,570 --> 00:12:14,240
client query an identity to a server

179
00:12:14,240 --> 00:12:17,180
this server gives their identity to the

180
00:12:17,180 --> 00:12:20,090
client the client do something Forks

181
00:12:20,090 --> 00:12:22,930
exacts etc any process is created as the

182
00:12:22,930 --> 00:12:24,980
identity

183
00:12:24,980 --> 00:12:29,610
negotiated here the monitor use cases

184
00:12:29,610 --> 00:12:32,820
can be to to tag process or this winter

185
00:12:32,820 --> 00:12:37,620
and also a are assertive 4% it's not

186
00:12:37,620 --> 00:12:40,380
good but a good value I have to monitor

187
00:12:40,380 --> 00:12:44,880
it okay and many more use case that's

188
00:12:44,880 --> 00:12:48,350
happened to your imagination

189
00:12:48,350 --> 00:12:52,560
okay it endures name space because I had

190
00:12:52,560 --> 00:12:56,160
a discussion with surgeon about it and

191
00:12:56,160 --> 00:13:00,060
it seems to be a very good idea to have

192
00:13:00,060 --> 00:13:02,910
name space so it's already in when you

193
00:13:02,910 --> 00:13:06,210
create a user name space you get the

194
00:13:06,210 --> 00:13:09,990
user ID 0 and all the capabilities and

195
00:13:09,990 --> 00:13:13,410
you can redesign all your system but at

196
00:13:13,410 --> 00:13:22,970
the ground it's managed ok some issues

197
00:13:22,970 --> 00:13:28,800
so latest version of V of the camera do

198
00:13:28,800 --> 00:13:31,700
not more allows to write these kind of

199
00:13:31,700 --> 00:13:35,490
files so there was a very interesting

200
00:13:35,490 --> 00:13:41,520
debate on the mailing list also the

201
00:13:41,520 --> 00:13:45,180
files in this episode of file system are

202
00:13:45,180 --> 00:13:48,630
restricted and a news case so you cannot

203
00:13:48,630 --> 00:13:51,030
write so many things it's limited in

204
00:13:51,030 --> 00:13:55,260
size extra so another critic is that PID

205
00:13:55,260 --> 00:13:57,290
can be faked

206
00:13:57,290 --> 00:14:04,440
ok and currently the thread are like

207
00:14:04,440 --> 00:14:07,340
process so they receive and a new

208
00:14:07,340 --> 00:14:13,710
identity and they will be they can have

209
00:14:13,710 --> 00:14:15,870
different tags it's not a good idea I

210
00:14:15,870 --> 00:14:19,770
think we have to manage process threads

211
00:14:19,770 --> 00:14:23,790
of the same process to a same space of

212
00:14:23,790 --> 00:14:26,300
tags

213
00:14:27,329 --> 00:14:30,660
and there is also we have to shift from

214
00:14:30,660 --> 00:14:34,499
a crate structure to the tasks structure

215
00:14:34,499 --> 00:14:37,379
but it's an ongoing effort inside the

216
00:14:37,379 --> 00:14:40,470
kennel and the security module that's

217
00:14:40,470 --> 00:14:46,619
also carried by the writer of tomorrow I

218
00:14:46,619 --> 00:14:50,999
don't remember its name Nikki okay so

219
00:14:50,999 --> 00:14:55,649
the next version will use something that

220
00:14:55,649 --> 00:14:57,929
I'm developing that is the process

221
00:14:57,929 --> 00:15:02,309
unique identifier with its file system

222
00:15:02,309 --> 00:15:07,049
that will not be restricted there will

223
00:15:07,049 --> 00:15:17,749
be a new get capabilities and we will

224
00:15:17,749 --> 00:15:20,999
share the same tags for all threads of

225
00:15:20,999 --> 00:15:25,619
our process so it's available currently

226
00:15:25,619 --> 00:15:29,399
there is user libera re that you can

227
00:15:29,399 --> 00:15:33,419
find here that integrates query language

228
00:15:33,419 --> 00:15:37,319
etcetera you it's a facility the the H

229
00:15:37,319 --> 00:15:42,470
file is here so it's easy to read and

230
00:15:42,470 --> 00:15:46,589
description is here you can see hit if

231
00:15:46,589 --> 00:15:49,230
you want to check it and use it in your

232
00:15:49,230 --> 00:15:52,999
project there exists layers for Yocto

233
00:15:52,999 --> 00:15:56,459
already existing and if you have

234
00:15:56,459 --> 00:15:59,669
question you can ask me that's all i

235
00:15:59,669 --> 00:16:03,319
already uploaded

236
00:16:03,660 --> 00:16:10,110
slides and it's up to you thank you

237
00:16:13,770 --> 00:16:16,360
thank you who say and we have time for

238
00:16:16,360 --> 00:16:21,630
questions and one raise your hand

239
00:16:22,920 --> 00:16:24,490
Thanks

240
00:16:24,490 --> 00:16:27,220
you said that you can't fake a PID how

241
00:16:27,220 --> 00:16:31,090
do you do that I never did that and

242
00:16:31,090 --> 00:16:34,870
people say me and not not the first time

243
00:16:34,870 --> 00:16:37,300
that you can fake it and it's true

244
00:16:37,300 --> 00:16:39,820
because you can make sleep a process

245
00:16:39,820 --> 00:16:42,730
create process until you get the right P

246
00:16:42,730 --> 00:16:44,830
I D and wake up the process and the

247
00:16:44,830 --> 00:16:47,350
process just awake and say okay hey

248
00:16:47,350 --> 00:16:51,820
that's you know no it's not him okay so

249
00:16:51,820 --> 00:16:53,530
you're talking about the kernel space

250
00:16:53,530 --> 00:16:56,440
when you deck here your process from the

251
00:16:56,440 --> 00:16:59,650
PID list but not from the shuttle Q

252
00:16:59,650 --> 00:17:05,290
right can you repeat because I have do

253
00:17:05,290 --> 00:17:08,770
you talk about Q's in the kernel when

254
00:17:08,770 --> 00:17:12,670
you can remove the process from the

255
00:17:12,670 --> 00:17:16,270
process list but not from the kernel Q

256
00:17:16,270 --> 00:17:19,410
where the process are shuttled it's

257
00:17:19,410 --> 00:17:23,130
about removing some of the process

258
00:17:23,130 --> 00:17:28,630
structure it's I didn't check this this

259
00:17:28,630 --> 00:17:31,270
part okay you for pointing me this out

260
00:17:31,270 --> 00:17:40,240
okay okay thanks more questions so would

261
00:17:40,240 --> 00:17:43,120
there be an automated way to notify me

262
00:17:43,120 --> 00:17:48,060
if if my Firefox of my Mayer's our

263
00:17:48,060 --> 00:17:52,680
sponsor shell or something like that

264
00:17:52,680 --> 00:17:56,590
yeah say okay this tax and then some

265
00:17:56,590 --> 00:17:58,630
process pops up which shouldn't have

266
00:17:58,630 --> 00:18:01,440
attack were from a privileged process

267
00:18:01,440 --> 00:18:04,000
would this be possible with this

268
00:18:04,000 --> 00:18:08,320
framework I really don't understand the

269
00:18:08,320 --> 00:18:12,250
question sorry let's say someone

270
00:18:12,250 --> 00:18:14,620
exploited my server and then he says

271
00:18:14,620 --> 00:18:15,770
okay I'm a

272
00:18:15,770 --> 00:18:19,350
open net cat reversal and I want to see

273
00:18:19,350 --> 00:18:21,510
this automatically automatically so

274
00:18:21,510 --> 00:18:23,580
could I see a okay there's a new Pro net

275
00:18:23,580 --> 00:18:29,070
cut process any other binary and makes a

276
00:18:29,070 --> 00:18:31,260
internet connection and I see okay this

277
00:18:31,260 --> 00:18:36,020
shouldn't be open by my postfix

278
00:18:36,530 --> 00:18:39,120
currently it has to be implemented I

279
00:18:39,120 --> 00:18:42,030
don't know if it is the good framework

280
00:18:42,030 --> 00:18:45,330
for doing this thing but if it is a good

281
00:18:45,330 --> 00:18:47,730
framework you know it's a mediation so

282
00:18:47,730 --> 00:18:52,350
the tag is a kind of telling to the

283
00:18:52,350 --> 00:18:54,900
process that will allow or not the

284
00:18:54,900 --> 00:18:58,289
connection if the client has a right or

285
00:18:58,289 --> 00:19:01,830
not maybe but I don't think it's really

286
00:19:01,830 --> 00:19:08,580
the good framework okay thanks we have

287
00:19:08,580 --> 00:19:15,990
another question up here so can you talk

288
00:19:15,990 --> 00:19:17,850
about some interesting use case that

289
00:19:17,850 --> 00:19:20,640
they that you do have in mind so what's

290
00:19:20,640 --> 00:19:22,950
some real-world application that you

291
00:19:22,950 --> 00:19:33,000
have okay for me I I came here that's

292
00:19:33,000 --> 00:19:35,309
that's not the first time that I'm here

293
00:19:35,309 --> 00:19:37,830
in security room - two years ago I spoke

294
00:19:37,830 --> 00:19:40,320
about launch or a secure launcher so the

295
00:19:40,320 --> 00:19:42,299
secure answer was the my primary concern

296
00:19:42,299 --> 00:19:47,340
bit was a student research so it has

297
00:19:47,340 --> 00:19:51,150
yeah there is the the process of the

298
00:19:51,150 --> 00:19:54,299
launcher okay you give some permission

299
00:19:54,299 --> 00:19:58,020
you to a process and the it will follows

300
00:19:58,020 --> 00:20:01,770
the process and its child's and they

301
00:20:01,770 --> 00:20:06,260
there is I I don't see another way to

302
00:20:06,260 --> 00:20:12,120
doing that so I what I presented two

303
00:20:12,120 --> 00:20:16,280
years ago was a use of

304
00:20:17,510 --> 00:20:23,870
fuse I used fuse fight system to mimic

305
00:20:23,870 --> 00:20:29,910
prop PID file system to do that thing it

306
00:20:29,910 --> 00:20:33,000
was a little bit different because I use

307
00:20:33,000 --> 00:20:39,350
it file names and directory entries okay

308
00:20:39,350 --> 00:20:49,410
so air is currently in what I the user I

309
00:20:49,410 --> 00:20:55,200
had and it's and I'm still thinking

310
00:20:55,200 --> 00:20:58,920
about that will it be used this way or

311
00:20:58,920 --> 00:20:59,550
not

312
00:20:59,550 --> 00:21:02,850
but in fact for me it was more

313
00:21:02,850 --> 00:21:07,080
interesting to have such framework such

314
00:21:07,080 --> 00:21:11,790
tool because it's more than just that it

315
00:21:11,790 --> 00:21:18,900
can be more and on the Linux mailing

316
00:21:18,900 --> 00:21:22,920
list cache of Lapras proposed to to use

317
00:21:22,920 --> 00:21:25,980
it for example to store do so we spoke

318
00:21:25,980 --> 00:21:30,240
about the monitoring use case very very

319
00:21:30,240 --> 00:21:33,180
easy monetary use case where some

320
00:21:33,180 --> 00:21:35,250
processes are still monitoring system

321
00:21:35,250 --> 00:21:39,420
and get advertising from Allah etc and

322
00:21:39,420 --> 00:21:42,630
so checks this one maybe he this one no

323
00:21:42,630 --> 00:21:48,510
etc and at the end can give values it

324
00:21:48,510 --> 00:21:54,140
has it may have values long term system

325
00:21:54,140 --> 00:22:00,480
No thank you thank you

326
00:22:00,480 --> 00:22:02,860
more questions

327
00:22:02,860 --> 00:22:16,240
raise your hands okay so this might be a

328
00:22:16,240 --> 00:22:19,330
no question but I know systemd and

329
00:22:19,330 --> 00:22:23,620
selinux uses tagging basically tags the

330
00:22:23,620 --> 00:22:26,500
process what I don't understand is is

331
00:22:26,500 --> 00:22:29,320
this the same system or it's built it's

332
00:22:29,320 --> 00:22:32,740
basically a set of a language on top of

333
00:22:32,740 --> 00:22:34,270
it like I don't understand the

334
00:22:34,270 --> 00:22:35,770
difference between the tagging and

335
00:22:35,770 --> 00:22:40,620
system d-ends SELinux and this Thank You

336
00:22:41,370 --> 00:22:47,410
SELinux use a tag it's tag that's the

337
00:22:47,410 --> 00:22:51,250
process tag that you can read at duty to

338
00:22:51,250 --> 00:22:54,550
protect okay

339
00:22:54,550 --> 00:22:58,360
here you have for a process you replace

340
00:22:58,360 --> 00:23:02,010
your P tags with current and you get the

341
00:23:02,010 --> 00:23:05,380
the identity of the process from selinux

342
00:23:05,380 --> 00:23:08,590
point of view okay it may change in

343
00:23:08,590 --> 00:23:11,170
function but that currently is current

344
00:23:11,170 --> 00:23:12,360
okay

345
00:23:12,360 --> 00:23:16,420
that's the same for smack so it's a tag

346
00:23:16,420 --> 00:23:19,060
that is attached to processes and tests

347
00:23:19,060 --> 00:23:23,860
structure by the Linux security module

348
00:23:23,860 --> 00:23:26,920
framework so it's attached to the

349
00:23:26,920 --> 00:23:32,020
credential and it's dedicated to as

350
00:23:32,020 --> 00:23:37,720
Linux so it's in kernel it's made inside

351
00:23:37,720 --> 00:23:42,190
and used inside it check any file access

352
00:23:42,190 --> 00:23:49,240
any IPC anything is checked against this

353
00:23:49,240 --> 00:23:53,770
tag that is the security tag okay here

354
00:23:53,770 --> 00:23:55,690
we are speaking of something that you

355
00:23:55,690 --> 00:23:59,410
can use as at the user level it's not

356
00:23:59,410 --> 00:24:02,730
dedicated to s

