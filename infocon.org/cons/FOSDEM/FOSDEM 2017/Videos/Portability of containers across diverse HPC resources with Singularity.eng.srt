1
00:00:15,890 --> 00:00:19,890
okay we good okay so we're gonna be

2
00:00:19,890 --> 00:00:22,380
talking in my part of the talk at least

3
00:00:22,380 --> 00:00:24,150
briefly just a quick introduction to

4
00:00:24,150 --> 00:00:26,820
singularity which is the software that

5
00:00:26,820 --> 00:00:30,300
I'm a developer on here's our website so

6
00:00:30,300 --> 00:00:32,009
singularities developed as a container

7
00:00:32,009 --> 00:00:34,350
solution for high performance scientific

8
00:00:34,350 --> 00:00:36,320
computing as opposed to docker where

9
00:00:36,320 --> 00:00:38,490
they mainly developed for industry

10
00:00:38,490 --> 00:00:41,580
solutions they're kind of three main

11
00:00:41,580 --> 00:00:43,140
reasons that we've been finding it

12
00:00:43,140 --> 00:00:46,590
useful to have containers in scientific

13
00:00:46,590 --> 00:00:48,530
computing one escaped dependency how

14
00:00:48,530 --> 00:00:51,000
somebody having to you know go around

15
00:00:51,000 --> 00:00:52,650
and manage everybody's versions of their

16
00:00:52,650 --> 00:00:55,550
libraries for every single scientist

17
00:00:55,550 --> 00:00:58,920
number two is that you can ensure that

18
00:00:58,920 --> 00:01:00,870
your code is gonna work on your laptop

19
00:01:00,870 --> 00:01:04,110
the same way that it's gonna work on the

20
00:01:04,110 --> 00:01:06,509
cluster every time and that's a huge

21
00:01:06,509 --> 00:01:11,179
benefit and a third also very important

22
00:01:11,179 --> 00:01:13,649
kind of point for scientific computing

23
00:01:13,649 --> 00:01:16,590
is we can take one file and we can send

24
00:01:16,590 --> 00:01:21,929
it we can send it everywhere and you

25
00:01:21,929 --> 00:01:23,159
know that's really great for repre doose

26
00:01:23,159 --> 00:01:25,079
ability of your research you can take

27
00:01:25,079 --> 00:01:26,479
that file send it to some other

28
00:01:26,479 --> 00:01:28,409
supercomputer and have somebody verify

29
00:01:28,409 --> 00:01:33,119
your results so I'm sure many people who

30
00:01:33,119 --> 00:01:35,399
have worked on at HPC are familiar with

31
00:01:35,399 --> 00:01:37,049
the scenario you know on the Left you're

32
00:01:37,049 --> 00:01:39,179
working on your computer you run some

33
00:01:39,179 --> 00:01:42,289
code and it works you send it over to

34
00:01:42,289 --> 00:01:45,270
you know run on the HPC and all of a

35
00:01:45,270 --> 00:01:51,149
sudden nothing works anymore so that's

36
00:01:51,149 --> 00:01:54,119
what we developed singularity for so

37
00:01:54,119 --> 00:01:57,389
singularity anything any user on the

38
00:01:57,389 --> 00:01:58,859
cluster they can run a container without

39
00:01:58,859 --> 00:02:01,289
any special privileges as opposed to

40
00:02:01,289 --> 00:02:02,340
docker where they're kind of always

41
00:02:02,340 --> 00:02:04,850
having a root level daemon running

42
00:02:04,850 --> 00:02:07,700
singularity integrates right into an HPC

43
00:02:07,700 --> 00:02:10,169
infrastructure so when you would

44
00:02:10,169 --> 00:02:11,940
normally run whatever code that you've

45
00:02:11,940 --> 00:02:13,890
built you can instead just run a

46
00:02:13,890 --> 00:02:16,099
singularity container as an executable

47
00:02:16,099 --> 00:02:18,450
but instead you're executing now

48
00:02:18,450 --> 00:02:22,349
inside of a container singularities

49
00:02:22,349 --> 00:02:25,890
portable between systems we allow you to

50
00:02:25,890 --> 00:02:27,450
run your singularity container on

51
00:02:27,450 --> 00:02:28,980
essentially any system that can support

52
00:02:28,980 --> 00:02:31,379
singularity and we actually have users

53
00:02:31,379 --> 00:02:33,420
that are running on you know incredibly

54
00:02:33,420 --> 00:02:35,190
old kernels we don't require any new

55
00:02:35,190 --> 00:02:37,230
features so you don't have to take use

56
00:02:37,230 --> 00:02:39,000
of namespaces if you don't want to and

57
00:02:39,000 --> 00:02:43,430
I'll run back on you know kernel to even

58
00:02:43,430 --> 00:02:47,580
and then any user can bring any

59
00:02:47,580 --> 00:02:49,769
container onto the HPC and so you don't

60
00:02:49,769 --> 00:02:51,209
have to worry about screening a user's

61
00:02:51,209 --> 00:02:52,739
container for malicious content you

62
00:02:52,739 --> 00:02:54,480
don't have to worry about security

63
00:02:54,480 --> 00:02:55,950
implications of people bringing any

64
00:02:55,950 --> 00:02:57,930
container that they want to onto your

65
00:02:57,930 --> 00:03:00,720
HPC system and that makes the job a lot

66
00:03:00,720 --> 00:03:02,280
easier for administrators and IT

67
00:03:02,280 --> 00:03:04,849
security people who are worried about

68
00:03:04,849 --> 00:03:09,060
malicious code being run again here I

69
00:03:09,060 --> 00:03:11,510
kind of reiterate the same points

70
00:03:11,510 --> 00:03:13,620
something really important to note is

71
00:03:13,620 --> 00:03:15,299
the concept that we have one single

72
00:03:15,299 --> 00:03:18,840
image file and for you know scientific

73
00:03:18,840 --> 00:03:20,400
work that's we found that's really

74
00:03:20,400 --> 00:03:21,959
important one of the things that we

75
00:03:21,959 --> 00:03:23,340
talked about in a paper that we

76
00:03:23,340 --> 00:03:24,389
submitted for publishing about

77
00:03:24,389 --> 00:03:27,120
singularity is the fact that we can now

78
00:03:27,120 --> 00:03:29,579
use just an image file to distribute not

79
00:03:29,579 --> 00:03:31,680
only the code that you've used to run

80
00:03:31,680 --> 00:03:33,959
your experiments but also the

81
00:03:33,959 --> 00:03:35,700
environment you use to run it in and

82
00:03:35,700 --> 00:03:37,980
data that you used to generate and so

83
00:03:37,980 --> 00:03:39,989
you can you know ensure that somebody

84
00:03:39,989 --> 00:03:42,120
who wants to reproduce your results has

85
00:03:42,120 --> 00:03:46,730
the means to do so so here's a list

86
00:03:46,730 --> 00:03:48,630
incomplete list of some of the places

87
00:03:48,630 --> 00:03:50,940
that have installed singularity there's

88
00:03:50,940 --> 00:03:53,790
a couple places I think in the top 10

89
00:03:53,790 --> 00:03:58,170
from the top 500 list like impede is on

90
00:03:58,170 --> 00:04:02,280
their GSI which they're still working on

91
00:04:02,280 --> 00:04:06,239
their cluster there so the basic usage

92
00:04:06,239 --> 00:04:08,130
of singularity kind of falls into three

93
00:04:08,130 --> 00:04:11,310
main parts for the work flow your first

94
00:04:11,310 --> 00:04:12,540
part you're gonna be working you're

95
00:04:12,540 --> 00:04:14,099
gonna create an image file so that's

96
00:04:14,099 --> 00:04:15,630
usually done with pseudo singularity

97
00:04:15,630 --> 00:04:18,209
image singularity create and you give it

98
00:04:18,209 --> 00:04:20,519
a name and that creates a physical dot

99
00:04:20,519 --> 00:04:24,240
IMG file on the disk and then the second

100
00:04:24,240 --> 00:04:26,490
part is to bootstrap it and that's the

101
00:04:26,490 --> 00:04:27,990
process of installing whatever software

102
00:04:27,990 --> 00:04:31,650
you want on your image you know

103
00:04:31,650 --> 00:04:32,340
configuring

104
00:04:32,340 --> 00:04:34,110
inside the image your operating system

105
00:04:34,110 --> 00:04:36,180
and then you're gonna run it and we can

106
00:04:36,180 --> 00:04:38,100
run it in you know three separate ways

107
00:04:38,100 --> 00:04:39,720
singularity shell just opens up an

108
00:04:39,720 --> 00:04:41,930
interactive shell inside the container

109
00:04:41,930 --> 00:04:43,380
singularity exec

110
00:04:43,380 --> 00:04:46,710
will open up any executive or will

111
00:04:46,710 --> 00:04:48,510
execute any file inside the container

112
00:04:48,510 --> 00:04:50,850
that you want it to and then singularity

113
00:04:50,850 --> 00:04:52,860
run is sort of a special command we can

114
00:04:52,860 --> 00:04:55,110
on the bootstrapping process we can

115
00:04:55,110 --> 00:04:56,760
actually generate a script inside the

116
00:04:56,760 --> 00:04:58,830
container that will do anything you want

117
00:04:58,830 --> 00:05:01,229
when you do singularity run and that's

118
00:05:01,229 --> 00:05:03,270
actually what happens when you just

119
00:05:03,270 --> 00:05:06,450
directly execute the image file is that

120
00:05:06,450 --> 00:05:08,070
it will execute that run script and

121
00:05:08,070 --> 00:05:10,110
allow you you know to just execute the

122
00:05:10,110 --> 00:05:14,850
image as an executable so this is kind

123
00:05:14,850 --> 00:05:17,790
of a just a small comparison in contrast

124
00:05:17,790 --> 00:05:20,310
between a couple other container

125
00:05:20,310 --> 00:05:26,180
solutions so as far as HPC goes

126
00:05:26,180 --> 00:05:28,590
singularity fulfills what we had

127
00:05:28,590 --> 00:05:29,910
determined were some very important

128
00:05:29,910 --> 00:05:32,430
points and you can kind of see that

129
00:05:32,430 --> 00:05:33,960
docker doesn't fulfill a lot of things

130
00:05:33,960 --> 00:05:36,600
and stalker is is developed with a

131
00:05:36,600 --> 00:05:38,729
totally different kind of goal in mind

132
00:05:38,729 --> 00:05:41,729
and shifter and Charlie cloud are

133
00:05:41,729 --> 00:05:44,100
similar to singularity and that they're

134
00:05:44,100 --> 00:05:47,030
both developed also for HPC environments

135
00:05:47,030 --> 00:05:49,979
however we do have some slight

136
00:05:49,979 --> 00:05:54,060
differences between them and this is

137
00:05:54,060 --> 00:05:56,970
just just an overview of a couple of the

138
00:05:56,970 --> 00:06:01,979
commands and what we are able to run as

139
00:06:01,979 --> 00:06:04,260
far as container formats and so now I'll

140
00:06:04,260 --> 00:06:08,599
turn it over to you

141
00:06:18,800 --> 00:06:28,410
okay what a full-size please so I would

142
00:06:28,410 --> 00:06:30,450
normally to everyone I hope you enjoyed

143
00:06:30,450 --> 00:06:37,100
last night I'm this guy sets our

144
00:06:37,100 --> 00:06:39,900
government which is the guy that appears

145
00:06:39,900 --> 00:06:44,190
in every on the website and every other

146
00:06:44,190 --> 00:06:47,070
place had a medical issue his well I

147
00:06:47,070 --> 00:06:48,390
don't mind on him

148
00:06:48,390 --> 00:06:53,040
but we will have a little secret between

149
00:06:53,040 --> 00:06:55,800
all of the room and me and this talk was

150
00:06:55,800 --> 00:06:56,880
given by say sir

151
00:06:56,880 --> 00:07:01,140
so if anyone asked you I'm say sir are

152
00:07:01,140 --> 00:07:05,640
we talking about given the introduction

153
00:07:05,640 --> 00:07:09,210
Michael gave a sensing variety I'll be

154
00:07:09,210 --> 00:07:13,140
talking about a specific HPC use case

155
00:07:13,140 --> 00:07:18,780
for a singularity for those of you that

156
00:07:18,780 --> 00:07:21,300
hadn't work as systems of many as

157
00:07:21,300 --> 00:07:23,780
administrator on a supercomputing Center

158
00:07:23,780 --> 00:07:28,530
the real pain is done when one user

159
00:07:28,530 --> 00:07:32,970
opens a ticket pushing you to upgrade

160
00:07:32,970 --> 00:07:35,900
some kind of library it's a the hull

161
00:07:35,900 --> 00:07:39,620
there's there's no worst thing than that

162
00:07:39,620 --> 00:07:43,010
you have a very stable configuration

163
00:07:43,010 --> 00:07:46,040
very well performant configuration and

164
00:07:46,040 --> 00:07:48,360
the trickiest part of that is

165
00:07:48,360 --> 00:07:51,270
maintaining it over time so as long as

166
00:07:51,270 --> 00:07:54,930
you don't I upgrade anything everything

167
00:07:54,930 --> 00:07:58,080
will be well so by the time you ask

168
00:07:58,080 --> 00:08:04,110
someone to install this 1.0.0 p4 of

169
00:08:04,110 --> 00:08:05,310
OpenSSL

170
00:08:05,310 --> 00:08:07,919
because you need that for that Python

171
00:08:07,919 --> 00:08:10,140
library that connects to any other place

172
00:08:10,140 --> 00:08:12,960
you are totally screwing them up so

173
00:08:12,960 --> 00:08:16,919
don't do please but given that we have

174
00:08:16,919 --> 00:08:20,340
singularity to rescue us

175
00:08:20,340 --> 00:08:23,590
I'll be talking about I will to be

176
00:08:23,590 --> 00:08:26,050
talking about the creation of a portable

177
00:08:26,050 --> 00:08:28,660
container because Michael did better

178
00:08:28,660 --> 00:08:32,980
than me so I'll be talking about two use

179
00:08:32,980 --> 00:08:35,350
cases for singularity in the HPC

180
00:08:35,350 --> 00:08:38,890
environment one of them is having access

181
00:08:38,890 --> 00:08:41,820
to InfiniBand interconnection and

182
00:08:41,820 --> 00:08:44,920
actually using that and the other one is

183
00:08:44,920 --> 00:08:48,640
having very expensive gpgpu cards

184
00:08:48,640 --> 00:08:51,280
installed on the machines and actually

185
00:08:51,280 --> 00:08:55,240
using them with the same software stack

186
00:08:55,240 --> 00:08:57,700
you are used to in jury room - or in

187
00:08:57,700 --> 00:09:05,650
your Debian laptop so well text is very

188
00:09:05,650 --> 00:09:07,210
small because I didn't do the

189
00:09:07,210 --> 00:09:10,330
presentation I'd do it very but it's

190
00:09:10,330 --> 00:09:12,460
uploaded to the website one of my slaves

191
00:09:12,460 --> 00:09:16,030
uploaded like five minutes ago so the

192
00:09:16,030 --> 00:09:18,550
finishing files will be available to all

193
00:09:18,550 --> 00:09:21,130
of you so you don't get blind by having

194
00:09:21,130 --> 00:09:24,730
to look at this small text size in this

195
00:09:24,730 --> 00:09:29,740
part are the basic comments of creating

196
00:09:29,740 --> 00:09:32,050
a container do you select this as

197
00:09:32,050 --> 00:09:34,180
parameter is important as you select the

198
00:09:34,180 --> 00:09:36,630
size for the container you can have

199
00:09:36,630 --> 00:09:39,280
container as big as you need because it

200
00:09:39,280 --> 00:09:41,470
creates a dispersed file on the file

201
00:09:41,470 --> 00:09:44,230
system so let's say you need 32

202
00:09:44,230 --> 00:09:47,800
gigabytes but maybe you want to be using

203
00:09:47,800 --> 00:09:50,410
them since the beginning of your

204
00:09:50,410 --> 00:09:54,370
development you will create an actual 32

205
00:09:54,370 --> 00:09:58,470
gigabyte file but it will be like maybe

206
00:09:58,470 --> 00:10:01,930
200 megabyte um on the file system so it

207
00:10:01,930 --> 00:10:04,390
can grow us as you're putting things

208
00:10:04,390 --> 00:10:07,120
inside the container the bootstrap

209
00:10:07,120 --> 00:10:09,670
definition is the secret sauce for

210
00:10:09,670 --> 00:10:14,020
singularity it's all of all of the work

211
00:10:14,020 --> 00:10:15,700
we singularity will belong in the

212
00:10:15,700 --> 00:10:21,310
definition files it's where you have a

213
00:10:21,310 --> 00:10:24,670
minimal set up of them of the language

214
00:10:24,670 --> 00:10:26,650
distribution you are going to use within

215
00:10:26,650 --> 00:10:30,190
the container and then you add as many

216
00:10:30,190 --> 00:10:33,460
software as you need and as many stages

217
00:10:33,460 --> 00:10:33,910
for

218
00:10:33,910 --> 00:10:35,680
building the software or installing any

219
00:10:35,680 --> 00:10:37,840
code you need to install inside the

220
00:10:37,840 --> 00:10:45,250
container and one of the options is

221
00:10:45,250 --> 00:10:47,680
expanding the container given you're

222
00:10:47,680 --> 00:10:49,600
running out of space because you have to

223
00:10:49,600 --> 00:10:52,390
download those Nvidia drivers that take

224
00:10:52,390 --> 00:10:55,390
one gigabyte compressed and like five

225
00:10:55,390 --> 00:10:58,510
uncompressed you will have to expand

226
00:10:58,510 --> 00:11:02,800
your container the easiest definition

227
00:11:02,800 --> 00:11:06,580
file is in this form the breakfasting

228
00:11:06,580 --> 00:11:08,650
just specifies the bootstrap method you

229
00:11:08,650 --> 00:11:12,250
are going to use it almost all of our

230
00:11:12,250 --> 00:11:15,610
work has been done on John with center

231
00:11:15,610 --> 00:11:18,340
ways or the bootstrap with Debian where

232
00:11:18,340 --> 00:11:21,280
you want to you select the operating

233
00:11:21,280 --> 00:11:22,960
system version and the mirror you are

234
00:11:22,960 --> 00:11:26,020
going to download that there's a very

235
00:11:26,020 --> 00:11:28,420
clever solution for that given you can

236
00:11:28,420 --> 00:11:31,750
install a PT catcher ng thing the

237
00:11:31,750 --> 00:11:33,430
Machine you are creating the containers

238
00:11:33,430 --> 00:11:38,110
and you only download the RPM or DEP

239
00:11:38,110 --> 00:11:41,350
files once and the container creation

240
00:11:41,350 --> 00:11:43,840
will speed up over time on the running

241
00:11:43,840 --> 00:11:47,500
script section it's you write the code

242
00:11:47,500 --> 00:11:49,000
that will be executed when you call

243
00:11:49,000 --> 00:11:51,910
singularity run or slash dot slash a

244
00:11:51,910 --> 00:11:55,420
container name and in the post section

245
00:11:55,420 --> 00:11:58,840
is the secret sauce part for your

246
00:11:58,840 --> 00:12:01,270
reproducibility as Michael was talking

247
00:12:01,270 --> 00:12:06,870
to us let's have a look at the example

248
00:12:06,870 --> 00:12:10,630
these guys have been working in a blind

249
00:12:10,630 --> 00:12:13,980
association in Spain so they do so tiny

250
00:12:13,980 --> 00:12:18,670
text in order to push you to our

251
00:12:18,670 --> 00:12:23,470
association of blind people we all have

252
00:12:23,470 --> 00:12:26,620
to concentrate on this part we are

253
00:12:26,620 --> 00:12:30,730
creating a bunch of directories for the

254
00:12:30,730 --> 00:12:34,300
paths we are going to bind between

255
00:12:34,300 --> 00:12:37,450
outside world given the machine and

256
00:12:37,450 --> 00:12:40,420
insect world given the container so

257
00:12:40,420 --> 00:12:42,760
let's say we have a parallel a very high

258
00:12:42,760 --> 00:12:44,590
speed parallel file system for scratch

259
00:12:44,590 --> 00:12:47,089
we can bind a

260
00:12:47,089 --> 00:12:50,569
this scratch inside the container so

261
00:12:50,569 --> 00:12:53,329
when our application running inside our

262
00:12:53,329 --> 00:12:56,240
environment needs to write local files

263
00:12:56,240 --> 00:13:01,209
per node they can be written in the

264
00:13:01,209 --> 00:13:06,050
fanciest hardware available and if you

265
00:13:06,050 --> 00:13:09,350
need to dump some of your partial

266
00:13:09,350 --> 00:13:12,769
results in a shared file system you can

267
00:13:12,769 --> 00:13:16,129
point them to a scratch file system that

268
00:13:16,129 --> 00:13:19,100
is shared among the machines so it gives

269
00:13:19,100 --> 00:13:26,089
you access to the actual enjoyable part

270
00:13:26,089 --> 00:13:29,420
of running code on a supercomputer on a

271
00:13:29,420 --> 00:13:31,850
supercomputer which is everything is

272
00:13:31,850 --> 00:13:36,920
faster than interrupted and by this part

273
00:13:36,920 --> 00:13:40,579
of the definition file you are

274
00:13:40,579 --> 00:13:43,670
installing every dependence you are

275
00:13:43,670 --> 00:13:46,279
going to need this step it is run on

276
00:13:46,279 --> 00:13:48,589
your local machine so the root

277
00:13:48,589 --> 00:13:51,920
privileges you're needing are more or

278
00:13:51,920 --> 00:13:54,379
less granted or can be run inside a

279
00:13:54,379 --> 00:13:56,360
virtual machine that you have stalled in

280
00:13:56,360 --> 00:13:58,399
a machine you don't have root access

281
00:13:58,399 --> 00:14:03,949
let's say for the run script you are

282
00:14:03,949 --> 00:14:09,199
loading as many environment variables

283
00:14:09,199 --> 00:14:14,509
you're going to need as possible so in

284
00:14:14,509 --> 00:14:17,480
the case of the examples you are going

285
00:14:17,480 --> 00:14:22,660
to it won't be there you are going to

286
00:14:22,660 --> 00:14:27,259
use openmpi libraries with InfiniBand

287
00:14:27,259 --> 00:14:30,769
with local InfiniBand drivers bind it to

288
00:14:30,769 --> 00:14:34,420
the image and you are going to use the

289
00:14:34,420 --> 00:14:38,269
openmpi version that sweets must your

290
00:14:38,269 --> 00:14:41,240
code so you are not limited to the

291
00:14:41,240 --> 00:14:45,019
openmpi version or internal MPI version

292
00:14:45,019 --> 00:14:47,589
available at the supercomputing Center

293
00:14:47,589 --> 00:14:51,470
given that we have almost magical

294
00:14:51,470 --> 00:14:53,929
example as Gregg told us yesterday of

295
00:14:53,929 --> 00:14:58,160
what can be wrong with containers this

296
00:14:58,160 --> 00:15:00,230
is actual coding and Spanish super

297
00:15:00,230 --> 00:15:01,269
computer

298
00:15:01,269 --> 00:15:08,389
this is native code it's a longing Saval

299
00:15:08,389 --> 00:15:11,509
you it's the same code run inside a

300
00:15:11,509 --> 00:15:13,999
saint always singularity container and

301
00:15:13,999 --> 00:15:17,839
the same honor you want to singularity

302
00:15:17,839 --> 00:15:21,459
container as you can see there's our

303
00:15:21,459 --> 00:15:24,799
improvement only by objecting the

304
00:15:24,799 --> 00:15:29,689
version of the operating system on the

305
00:15:29,689 --> 00:15:32,540
other hand if you follow the path of

306
00:15:32,540 --> 00:15:36,679
center weighs 7.3 within singularity

307
00:15:36,679 --> 00:15:39,319
you're not going to have so much

308
00:15:39,319 --> 00:15:41,480
bandwidth and the scale doesn't make

309
00:15:41,480 --> 00:15:44,359
sense because there's no such difference

310
00:15:44,359 --> 00:15:48,859
between the parts but the general idea

311
00:15:48,859 --> 00:15:53,929
is a container is performing better than

312
00:15:53,929 --> 00:15:58,389
negative code for this specific use case

313
00:15:58,389 --> 00:16:02,449
in terms of bandwidth a container is

314
00:16:02,449 --> 00:16:05,779
performing almost equal that native code

315
00:16:05,779 --> 00:16:11,749
within the cluster now this is the setup

316
00:16:11,749 --> 00:16:14,899
for the benchmarks will be uploaded with

317
00:16:14,899 --> 00:16:19,899
the with the presentation to the webpage

318
00:16:20,589 --> 00:16:23,480
another example of trying to make you

319
00:16:23,480 --> 00:16:30,279
blind as you as you cannot see how I

320
00:16:30,279 --> 00:16:35,269
will tell we are installing a DQ'd

321
00:16:35,269 --> 00:16:37,610
abrasion we are going to need within the

322
00:16:37,610 --> 00:16:40,069
container and the only thing we have to

323
00:16:40,069 --> 00:16:43,699
have is the driver available at the

324
00:16:43,699 --> 00:16:46,639
external file system given it can be

325
00:16:46,639 --> 00:16:50,199
loaded as a model to the kernel we can

326
00:16:50,199 --> 00:16:54,350
run this code with the libraries we are

327
00:16:54,350 --> 00:16:57,559
needing and we can take the advantage of

328
00:16:57,559 --> 00:17:00,739
having a very powerful DP GPU card in

329
00:17:00,739 --> 00:17:04,760
the in the host and we have all all of

330
00:17:04,760 --> 00:17:10,650
our stock values to outside the host

331
00:17:10,650 --> 00:17:16,510
so another example this time is with

332
00:17:16,510 --> 00:17:20,679
China it will be hard if you thought the

333
00:17:20,679 --> 00:17:23,490
other slides were the difficult ones

334
00:17:23,490 --> 00:17:30,700
this it's Pablo's fault now we are the

335
00:17:30,700 --> 00:17:33,880
bootstrapping the last person last LTS

336
00:17:33,880 --> 00:17:37,809
version of you want to and for the post

337
00:17:37,809 --> 00:17:42,570
part you can see we are compiling

338
00:17:42,570 --> 00:17:45,880
openmpi installing cuda inside the

339
00:17:45,880 --> 00:17:48,130
container so it will have much in

340
00:17:48,130 --> 00:17:50,350
versions of the cutest AK and killer

341
00:17:50,350 --> 00:17:52,179
drivers inside and outside the container

342
00:17:52,179 --> 00:17:57,240
and you are loading this those libraries

343
00:17:57,240 --> 00:18:00,520
when running the container so you don't

344
00:18:00,520 --> 00:18:03,700
have to take care about running some

345
00:18:03,700 --> 00:18:07,000
script just before calling as much or

346
00:18:07,000 --> 00:18:09,820
any other queue manager you are going to

347
00:18:09,820 --> 00:18:11,830
use because the container will take care

348
00:18:11,830 --> 00:18:13,870
for itself of setting up the correct

349
00:18:13,870 --> 00:18:21,040
environment more crappy small text now

350
00:18:21,040 --> 00:18:22,900
you are compiling actual actually

351
00:18:22,900 --> 00:18:25,270
downloading and compiling the source

352
00:18:25,270 --> 00:18:30,490
code for change and by the time you need

353
00:18:30,490 --> 00:18:33,790
to run that you are going to call the

354
00:18:33,790 --> 00:18:36,660
python executable inside the container

355
00:18:36,660 --> 00:18:40,780
with the channel example code the blacks

356
00:18:40,780 --> 00:18:44,670
inside the container in case you need to

357
00:18:44,670 --> 00:18:49,210
write your home directory will be binded

358
00:18:49,210 --> 00:18:51,850
directly inside the containers way so

359
00:18:51,850 --> 00:18:55,390
anything you are writing in the home

360
00:18:55,390 --> 00:18:57,850
directory inside the container will be

361
00:18:57,850 --> 00:19:02,340
outside also and if you need to bind the

362
00:19:02,340 --> 00:19:06,420
special folders for let's say drivers or

363
00:19:06,420 --> 00:19:10,620
libraries that for the InfiniBand stuff

364
00:19:10,620 --> 00:19:15,460
you combine them by passing outside path

365
00:19:15,460 --> 00:19:19,450
and inside path and the container run

366
00:19:19,450 --> 00:19:21,280
script will set up the environment for

367
00:19:21,280 --> 00:19:23,760
using this

368
00:19:24,630 --> 00:19:27,940
I'm a bit long on time so I will give

369
00:19:27,940 --> 00:19:32,350
you some time for questions and thank

370
00:19:32,350 --> 00:19:34,350
you very much for the presentation

371
00:19:34,350 --> 00:19:39,590
[Applause]

372
00:19:39,590 --> 00:19:40,679
[Music]

373
00:19:40,679 --> 00:19:56,470
somebody has to act something we were

374
00:19:56,470 --> 00:19:59,500
guessing about newer based versions of

375
00:19:59,500 --> 00:20:04,299
the of GCC compiling the libraries

376
00:20:04,299 --> 00:20:08,350
inside the container but we didn't

377
00:20:08,350 --> 00:20:10,690
profile that that's something we found

378
00:20:10,690 --> 00:20:15,220
but it's more likely that you want to

379
00:20:15,220 --> 00:20:19,600
sixteen is using GCC five and and sent

380
00:20:19,600 --> 00:20:23,080
always is using a bit older Bastion so

381
00:20:23,080 --> 00:20:25,210
it's it's likely it could be like that

382
00:20:25,210 --> 00:20:28,419
but we don't have data it's just

383
00:20:28,419 --> 00:20:30,960
guessing

384
00:20:34,500 --> 00:20:49,120
oh you will have the same permissions oh

385
00:20:49,120 --> 00:20:51,800
[Music]

386
00:20:51,800 --> 00:20:56,460
he was asking if you are binding host

387
00:20:56,460 --> 00:20:59,120
director is inside the container you can

388
00:20:59,120 --> 00:21:01,590
skylight privileges inside the container

389
00:21:01,590 --> 00:21:03,270
for actual file system outside the

390
00:21:03,270 --> 00:21:05,670
container when you are running the

391
00:21:05,670 --> 00:21:07,500
container for the creation part you need

392
00:21:07,500 --> 00:21:09,840
root privileges in the machine but by

393
00:21:09,840 --> 00:21:11,160
the time you are run in the container

394
00:21:11,160 --> 00:21:14,130
you will be running them with the actual

395
00:21:14,130 --> 00:21:17,040
user privileges that is running the

396
00:21:17,040 --> 00:21:21,060
container so in a short supercomputing

397
00:21:21,060 --> 00:21:23,040
environment it's likely an unprivileged

398
00:21:23,040 --> 00:21:28,440
user let's say you have to bind some et

399
00:21:28,440 --> 00:21:30,990
saliva bugs for infinite ball libraries

400
00:21:30,990 --> 00:21:33,570
and those files are all borrowed and

401
00:21:33,570 --> 00:21:35,820
only right below a root inside the

402
00:21:35,820 --> 00:21:37,590
container you will have the same

403
00:21:37,590 --> 00:21:40,800
permissions for this file so you you can

404
00:21:40,800 --> 00:21:43,020
not do anything inside the container

405
00:21:43,020 --> 00:21:46,440
that won't be allowed to you inside the

406
00:21:46,440 --> 00:22:10,980
country outside the container yeah you

407
00:22:10,980 --> 00:22:12,960
have to have module installed inside the

408
00:22:12,960 --> 00:22:15,380
container

409
00:22:45,929 --> 00:22:52,269
okay I'll just with it yeah and so the

410
00:22:52,269 --> 00:22:56,649
answer is essentially yes so that's the

411
00:22:56,649 --> 00:22:58,419
entirety of how singularities working is

412
00:22:58,419 --> 00:23:00,340
we're either having a set UID binary in

413
00:23:00,340 --> 00:23:01,929
which case all privileges are dropped

414
00:23:01,929 --> 00:23:03,850
before any user code is run we only use

415
00:23:03,850 --> 00:23:06,100
it to do certain things like that

416
00:23:06,100 --> 00:23:09,370
require you root privileges or on some

417
00:23:09,370 --> 00:23:10,779
newer kernels you can do it entirely in

418
00:23:10,779 --> 00:23:12,850
user space and in which case then you're

419
00:23:12,850 --> 00:23:16,260
using user name spaces instead

420
00:23:20,240 --> 00:23:28,339
[Applause]

421
00:24:10,280 --> 00:24:13,730
those green hats

422
00:24:45,690 --> 00:24:48,690
let's

