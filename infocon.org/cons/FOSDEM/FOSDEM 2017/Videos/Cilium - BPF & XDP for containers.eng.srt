1
00:00:40,920 --> 00:00:45,969
[Applause]

2
00:00:47,270 --> 00:00:50,359
[Music]

3
00:00:53,430 --> 00:00:56,509
[Music]

4
00:01:00,170 --> 00:01:03,209
[Music]

5
00:01:13,470 --> 00:01:15,270
[Music]

6
00:01:15,270 --> 00:01:19,270
particularly or for not working on the

7
00:01:19,270 --> 00:01:23,350
server the existing flow table base

8
00:01:23,350 --> 00:01:27,189
model works well for virtual switches

9
00:01:27,189 --> 00:01:29,770
it's not necessarily the best model if

10
00:01:29,770 --> 00:01:32,289
we have programming languages and you

11
00:01:32,289 --> 00:01:33,929
have two compilers and you have to feel

12
00:01:33,929 --> 00:01:36,700
the full flexibility we can on the CPU

13
00:01:36,700 --> 00:01:38,859
can do anything why do we want to limit

14
00:01:38,859 --> 00:01:41,950
our self to put the console as initially

15
00:01:41,950 --> 00:01:45,820
in 19 for fixed a six so the future is

16
00:01:45,820 --> 00:01:48,580
the future of networking I see as DPF

17
00:01:48,580 --> 00:01:53,860
programs getting generated and an

18
00:01:53,860 --> 00:01:57,009
endpoint could be a linux task they see

19
00:01:57,009 --> 00:02:00,940
a VM a container whatever now you see

20
00:02:00,940 --> 00:02:04,030
that basically communicates with packets

21
00:02:04,030 --> 00:02:07,659
can be an endpoint and when I say return

22
00:02:07,659 --> 00:02:10,929
of the program that I read of that is we

23
00:02:10,929 --> 00:02:14,790
will generate the program that is all

24
00:02:38,800 --> 00:02:40,880
knocking and security for that

25
00:02:40,880 --> 00:02:42,850
particular endpoint what does that mean

26
00:02:42,850 --> 00:02:45,500
if the container is sending a packet we

27
00:02:45,500 --> 00:02:50,330
know the MAC addresses to have that

28
00:02:50,330 --> 00:02:57,800
fixed MAC address so instead of if the

29
00:02:57,800 --> 00:03:00,140
source MAC is not that this specific MAC

30
00:03:00,140 --> 00:03:01,880
then drop the packet and so on for

31
00:03:01,880 --> 00:03:03,890
everything so instead I mean for tables

32
00:03:03,890 --> 00:03:07,510
it's actual programs that we leverage I

33
00:03:07,510 --> 00:03:09,830
did you show you the example in the left

34
00:03:09,830 --> 00:03:11,510
you can see a floater there is a showing

35
00:03:11,510 --> 00:03:13,550
an obvious flow table example I

36
00:03:13,550 --> 00:03:21,940
basically like fixed static flow

37
00:03:21,940 --> 00:03:25,010
controls which describe a packet or set

38
00:03:25,010 --> 00:03:27,200
of packets or particular one flow and

39
00:03:27,200 --> 00:03:29,090
then a set of actions which are executed

40
00:03:29,090 --> 00:03:31,220
for that for on the right you see the

41
00:03:31,220 --> 00:03:34,130
opposite which is a program and the

42
00:03:34,130 --> 00:03:36,950
program defines the behavior for every

43
00:03:36,950 --> 00:03:38,330
packet that is flowing through that

44
00:03:38,330 --> 00:03:40,700
program and this example is showing you

45
00:03:40,700 --> 00:03:43,460
basically if Serena says every every MAC

46
00:03:43,460 --> 00:03:46,760
address needs to be the macros off the

47
00:03:46,760 --> 00:03:49,520
content automatic cannot contain and the

48
00:03:49,520 --> 00:03:50,750
second one doesn't doesn't doesn't

49
00:03:50,750 --> 00:03:52,670
doesn't LT look up through the hash

50
00:03:52,670 --> 00:03:55,900
table and then performs in out reaction

51
00:03:55,900 --> 00:03:58,010
so these are just to make sure you

52
00:03:58,010 --> 00:04:01,840
understand that the two different models

53
00:04:03,640 --> 00:04:06,800
which is how can you attach this B

54
00:04:06,800 --> 00:04:08,600
player programs and actually apply to

55
00:04:08,600 --> 00:04:11,060
networking and then you talked about the

56
00:04:11,060 --> 00:04:14,480
tool chain on top which is student C

57
00:04:14,480 --> 00:04:17,959
code use all the packing to translate

58
00:04:17,959 --> 00:04:21,290
pseudo C code to bytecode we can then

59
00:04:21,290 --> 00:04:22,870
take that bytecode

60
00:04:22,870 --> 00:04:25,449
the colonel the verifier ensures that

61
00:04:25,449 --> 00:04:27,130
you're not actually crashing the colonel

62
00:04:27,130 --> 00:04:28,900
and you can then attach it to various

63
00:04:28,900 --> 00:04:30,699
working points inside of coal the

64
00:04:30,699 --> 00:04:32,940
moments we've actually currently

65
00:04:32,940 --> 00:04:36,729
knowledge RTC ingress and egress and XTP

66
00:04:36,729 --> 00:04:41,620
so we capability of passing all packets

67
00:04:41,620 --> 00:04:43,750
that leave a container or go into a

68
00:04:43,750 --> 00:04:47,229
container what we see on the wire on top

69
00:04:47,229 --> 00:04:48,820
of a VX line and captive eyes or

70
00:04:48,820 --> 00:04:50,500
something like that we can feed all of

71
00:04:50,500 --> 00:04:53,760
them through BPA programs

72
00:04:54,270 --> 00:05:09,900
so this basically visualization that

73
00:05:09,900 --> 00:05:13,210
contains what is essentially required

74
00:05:13,210 --> 00:05:15,010
for that endpoint to give you a couple

75
00:05:15,010 --> 00:05:22,270
of examples supported all into that

76
00:05:22,270 --> 00:05:24,639
program if an endpoint requires port

77
00:05:24,639 --> 00:05:26,919
mapping for example my service is

78
00:05:26,919 --> 00:05:28,780
running or a task is running on port

79
00:05:28,780 --> 00:05:32,620
8080 one wants to expose itself we will

80
00:05:32,620 --> 00:05:35,229
compile the instructions necessary to do

81
00:05:35,229 --> 00:05:36,729
the part before translation if that is

82
00:05:36,729 --> 00:05:39,340
not needed will simply omit it out

83
00:05:39,340 --> 00:05:46,750
another example is this means that

84
00:05:46,750 --> 00:05:49,030
instead of having a considerable

85
00:05:49,030 --> 00:05:51,490
pipeline we have a programmable pipeline

86
00:05:51,490 --> 00:05:53,229
that that always only contains the

87
00:05:53,229 --> 00:05:57,550
minimal amount of code required so

88
00:05:57,550 --> 00:06:01,240
there's the promise of all of this DK

89
00:06:01,240 --> 00:06:07,300
talks I'm sure and capabilities there

90
00:06:07,300 --> 00:06:09,250
are what this is trying to achieve is

91
00:06:09,250 --> 00:06:11,380
basically find that sweet spot in the

92
00:06:11,380 --> 00:06:15,520
middle which is the flexibility and the

93
00:06:15,520 --> 00:06:18,099
extensibility of user space networking

94
00:06:18,099 --> 00:06:20,199
alter the performance of it because we

95
00:06:20,199 --> 00:06:22,260
can we can write a program with the

96
00:06:22,260 --> 00:06:24,639
exact requirements that we need right

97
00:06:24,639 --> 00:06:25,540
this is

98
00:06:25,540 --> 00:06:28,060
these were a lot of the DPD k interest

99
00:06:28,060 --> 00:06:30,100
is coming from because you got to define

100
00:06:30,100 --> 00:06:31,600
exactly what your application is

101
00:06:31,600 --> 00:06:33,700
supposed to do with packets at the same

102
00:06:33,700 --> 00:06:35,590
time you don't want to leave the kernel

103
00:06:35,590 --> 00:06:37,480
we're going to stay within the kernel to

104
00:06:37,480 --> 00:06:39,310
leverage the hardware abstraction we

105
00:06:39,310 --> 00:06:41,110
want to leverage the safety model that

106
00:06:41,110 --> 00:06:43,810
the comb provides I'm going to have to

107
00:06:43,810 --> 00:06:45,820
reliability aftercoma like the kernel

108
00:06:45,820 --> 00:06:48,880
provides a DPF verify which ensures a

109
00:06:48,880 --> 00:06:50,950
DPF program cannot crash the coma

110
00:06:50,950 --> 00:06:53,260
because the consequences can be very

111
00:06:53,260 --> 00:06:57,310
severe if you have a protocol parser and

112
00:06:57,310 --> 00:06:59,230
you can trigger that remotely through a

113
00:06:59,230 --> 00:07:01,540
packet a single pocket could simply take

114
00:07:01,540 --> 00:07:03,460
down your Center the entire data center

115
00:07:03,460 --> 00:07:05,350
sefa is something that you want to avoid

116
00:07:05,350 --> 00:07:08,200
at all costs some mechanism needs to be

117
00:07:08,200 --> 00:07:10,060
in place to ensure that the safety can

118
00:07:10,060 --> 00:07:12,790
be guaranteed and the last aspect which

119
00:07:12,790 --> 00:07:15,220
makes this very flexible is that these

120
00:07:15,220 --> 00:07:17,680
programs they not just regenerated once

121
00:07:17,680 --> 00:07:19,210
I'd start

122
00:07:19,210 --> 00:07:21,160
they can actually be regenerated at any

123
00:07:21,160 --> 00:07:23,410
time as you see fit and you can

124
00:07:23,410 --> 00:07:25,570
recompile and reattach them into the

125
00:07:25,570 --> 00:07:27,880
kernel without losing any state this

126
00:07:27,880 --> 00:07:30,310
means if something changes in your

127
00:07:30,310 --> 00:07:32,230
environment you need to change the

128
00:07:32,230 --> 00:07:34,330
program you can do so the replace

129
00:07:34,330 --> 00:07:36,610
automatically replaced a program without

130
00:07:36,610 --> 00:07:40,540
losing any many connections one simple

131
00:07:40,540 --> 00:07:43,480
example is for example balancing

132
00:07:43,480 --> 00:07:46,150
function which has a particular back in

133
00:07:46,150 --> 00:07:48,010
selection which for example is using the

134
00:07:48,010 --> 00:07:53,530
packets hash you can regenerate the code

135
00:07:53,530 --> 00:07:56,350
on decoding only include the new back in

136
00:07:56,350 --> 00:07:58,750
selection atomically replace it and all

137
00:07:58,750 --> 00:08:00,730
the connection state is still in place

138
00:08:00,730 --> 00:08:03,970
this is because cold and state abuse a

139
00:08:03,970 --> 00:08:06,400
CREP right there's people and those deep

140
00:08:06,400 --> 00:08:10,469
left maps and a maps contain the state

141
00:08:17,570 --> 00:08:20,680
[Music]

142
00:08:32,929 --> 00:08:35,549
does it really make sense that if they

143
00:08:35,549 --> 00:08:38,399
is sending if ones who talk to be to

144
00:08:38,399 --> 00:08:40,529
actually construct the packet just to

145
00:08:40,529 --> 00:08:42,059
drop in the end because of policy that

146
00:08:42,059 --> 00:08:43,529
doesn't make any sense what you want

147
00:08:43,529 --> 00:08:46,019
instead is to actually deny the system

148
00:08:46,019 --> 00:08:47,940
call that is causing the packet to be

149
00:08:47,940 --> 00:08:49,980
constructed so we can start thinking

150
00:08:49,980 --> 00:08:51,329
outside of the box of traditional

151
00:08:51,329 --> 00:08:54,360
networking and start connecting concepts

152
00:08:54,360 --> 00:08:57,240
such as attaching vpf programs to system

153
00:08:57,240 --> 00:08:58,980
calls to trace points and so on and

154
00:08:58,980 --> 00:09:00,540
actually provides the actual

155
00:09:00,540 --> 00:09:02,100
functionality that your application

156
00:09:02,100 --> 00:09:03,899
developer wants at the right level

157
00:09:03,899 --> 00:09:05,670
instead of trying to solve everything

158
00:09:05,670 --> 00:09:10,860
and actually PDF your slips as the

159
00:09:10,860 --> 00:09:12,930
ability to run vpf at the driver level

160
00:09:12,930 --> 00:09:14,970
it's a very close to the hardware but we

161
00:09:14,970 --> 00:09:17,300
can we can achieve a typical duplication

162
00:09:17,300 --> 00:09:22,770
speed so this is definitely interesting

163
00:09:22,770 --> 00:09:24,300
for things like live plants and dropping

164
00:09:24,300 --> 00:09:30,510
packages or and so on this is the most

165
00:09:30,510 --> 00:09:32,130
obvious one right if you can generate

166
00:09:32,130 --> 00:09:33,870
the program you can actually turn a lot

167
00:09:33,870 --> 00:09:35,459
of configuration into constants so

168
00:09:35,459 --> 00:09:37,050
things like the containers MAC address

169
00:09:37,050 --> 00:09:39,480
or the tasks macros IP address all of

170
00:09:39,480 --> 00:09:41,459
that will just become constants in the

171
00:09:41,459 --> 00:09:43,200
program and the compiler can optimize

172
00:09:43,200 --> 00:09:45,450
them so make sure that I can I believe

173
00:09:45,450 --> 00:09:47,190
further address you're basically choose

174
00:09:47,190 --> 00:09:48,270
to load it into

175
00:09:48,270 --> 00:09:49,860
before it's written into the packet so

176
00:09:49,860 --> 00:09:52,020
there's no cache miss and looking up the

177
00:09:52,020 --> 00:09:53,820
IP address of the container first it's

178
00:09:53,820 --> 00:09:56,520
in the program the compiler can optimize

179
00:09:56,520 --> 00:10:03,149
its heavily on the fly what does that

180
00:10:03,149 --> 00:10:05,339
mean it really matters the data

181
00:10:05,339 --> 00:10:07,529
structure are usually there's a best fit

182
00:10:07,529 --> 00:10:10,110
depending on your specific need if you

183
00:10:10,110 --> 00:10:12,390
have service a service to your casting

184
00:10:12,390 --> 00:10:14,880
check and test be the top each other and

185
00:10:14,880 --> 00:10:16,890
be has a list of two allowed consumers

186
00:10:16,890 --> 00:10:19,230
actually make sense to unroll that loop

187
00:10:19,230 --> 00:10:20,730
and encode the allowed consumers

188
00:10:20,730 --> 00:10:22,770
directly into the code if you have

189
00:10:22,770 --> 00:10:25,350
10,000 allowed consumers of that service

190
00:10:25,350 --> 00:10:26,580
it doesn't make any sense to have

191
00:10:26,580 --> 00:10:28,560
turnover loop that we want a hash table

192
00:10:28,560 --> 00:10:31,170
right if you have a structure that's

193
00:10:31,170 --> 00:10:33,350
actually collecting data that's a

194
00:10:33,350 --> 00:10:35,730
statistical data and you're writing

195
00:10:35,730 --> 00:10:37,560
through that table so you definitely

196
00:10:37,560 --> 00:10:39,720
want per CPU our tables so based on

197
00:10:39,720 --> 00:10:41,670
these needs we can we can pick the right

198
00:10:41,670 --> 00:10:45,949
data structure at the cogeneration time

199
00:10:48,740 --> 00:10:52,140
state is decoupled from code which means

200
00:10:52,140 --> 00:10:57,380
the state it's collecting statistics

201
00:10:57,380 --> 00:11:00,089
without actually losing state or data

202
00:11:00,089 --> 00:11:05,760
which is protocol without a single

203
00:11:05,760 --> 00:11:13,620
connection getting dropped statistics

204
00:11:13,620 --> 00:11:15,149
you have huge discussions over the last

205
00:11:15,149 --> 00:11:17,430
couple of years and in the current

206
00:11:17,430 --> 00:11:19,529
environment about what types of TCP

207
00:11:19,529 --> 00:11:21,360
metrics should be collected this is a

208
00:11:21,360 --> 00:11:22,890
huge discussion because every single

209
00:11:22,890 --> 00:11:24,480
statistic collected will have a

210
00:11:24,480 --> 00:11:27,000
performance impact BPF and cilium allows

211
00:11:27,000 --> 00:11:28,380
you to basically define your own

212
00:11:28,380 --> 00:11:29,970
statistical actors as you see fit

213
00:11:29,970 --> 00:11:32,070
because you are the only person that

214
00:11:32,070 --> 00:11:34,680
actually pays the penalty for it you're

215
00:11:34,680 --> 00:11:36,390
not imposing the penalty the performance

216
00:11:36,390 --> 00:11:37,620
penalty on everybody else

217
00:11:37,620 --> 00:11:40,170
so whatever BPF is capable of matching

218
00:11:40,170 --> 00:11:42,450
which is essentially everything you can

219
00:11:42,450 --> 00:11:44,730
you can collect collect statistics of

220
00:11:44,730 --> 00:11:47,120
some sort

221
00:11:48,480 --> 00:11:51,220
this is a city architecture itself so I

222
00:11:51,220 --> 00:11:52,510
talked about like the benefits of

223
00:11:52,510 --> 00:11:54,880
generating BPF programs and so on so in

224
00:11:54,880 --> 00:12:03,490
itself is a decoupled into the that's

225
00:12:03,490 --> 00:12:05,410
the actual data path that's where the

226
00:12:05,410 --> 00:12:06,880
packets are flowing through and then

227
00:12:06,880 --> 00:12:08,410
users pay if you have an ancient-weapon

228
00:12:08,410 --> 00:12:10,480
goal which actually compiles the

229
00:12:10,480 --> 00:12:14,980
programs and adjusted the ancien itself

230
00:12:14,980 --> 00:12:17,130
receives events from those or

231
00:12:17,130 --> 00:12:19,210
orchestration systems that could be

232
00:12:19,210 --> 00:12:21,690
darker and darker at time this could be

233
00:12:21,690 --> 00:12:24,520
kubernetes this could be nozzles and so

234
00:12:24,520 --> 00:12:27,880
on as it receives these events will

235
00:12:27,880 --> 00:12:31,510
generate programs as required so if a

236
00:12:31,510 --> 00:12:33,310
local container is getting stalled we

237
00:12:33,310 --> 00:12:44,130
will receive it on top the most

238
00:12:44,130 --> 00:12:45,730
interesting one is probably the

239
00:12:45,730 --> 00:12:47,980
monitoring and component which is built

240
00:12:47,980 --> 00:12:50,380
on top of the per frame buffer the very

241
00:12:50,380 --> 00:12:52,600
fast share memory based ring buffer

242
00:12:52,600 --> 00:12:54,910
which allows us for example to send

243
00:12:54,910 --> 00:12:57,940
notifications whenever a packet is being

244
00:12:57,940 --> 00:12:59,590
dropped the ring buffer is extremely

245
00:12:59,590 --> 00:13:01,690
fast it can literally support millions

246
00:13:01,690 --> 00:13:03,520
of millions of droplet vacations per

247
00:13:03,520 --> 00:13:06,540
second so you can you can monitor and

248
00:13:06,540 --> 00:13:10,900
policy violations working speeds and as

249
00:13:10,900 --> 00:13:12,820
Daniel mentioned the structure of this

250
00:13:12,820 --> 00:13:15,340
ring buffer is up to us to define so

251
00:13:15,340 --> 00:13:16,780
it's up to us to define the actual

252
00:13:16,780 --> 00:13:19,570
metadata that is provided to to to you

253
00:13:19,570 --> 00:13:24,090
so the implementation for example

254
00:13:24,090 --> 00:13:32,740
includes the container ID all the labels

255
00:13:32,740 --> 00:13:34,150
attached to it the container that is

256
00:13:34,150 --> 00:13:36,100
receiving it the packet lengths the

257
00:13:36,100 --> 00:13:38,380
first 64 byte packets

258
00:13:38,380 --> 00:13:40,660
that's all this information is not

259
00:13:40,660 --> 00:13:42,490
visible if you if you use something like

260
00:13:42,490 --> 00:13:44,370
TCP dump or

261
00:13:44,370 --> 00:13:47,129
Jeffrey has to be dropped monitor things

262
00:13:47,129 --> 00:13:48,569
like that we can provide a lot more

263
00:13:48,569 --> 00:13:50,790
metadata to help you debug and

264
00:13:50,790 --> 00:13:58,139
troubleshoot your network cilium takes

265
00:13:58,139 --> 00:13:59,999
advantage of PDF in two ways we want to

266
00:13:59,999 --> 00:14:01,439
talk a lot about like the performance

267
00:14:01,439 --> 00:14:04,079
benefits Security benefits and so on we

268
00:14:04,079 --> 00:14:05,430
take the flexibility to actually

269
00:14:05,430 --> 00:14:07,319
drastically simplified a networking

270
00:14:07,319 --> 00:14:10,410
model so but now can we throw most of

271
00:14:10,410 --> 00:14:13,439
networking principles that are out there

272
00:14:13,439 --> 00:14:16,680
it's a single l3 flaps there is no

273
00:14:16,680 --> 00:14:18,540
subnets nothing potentially every

274
00:14:18,540 --> 00:14:19,680
endpoint can talk to every other

275
00:14:19,680 --> 00:14:21,959
endpoint as long as the security policy

276
00:14:21,959 --> 00:14:23,910
allows for that so there's you don't

277
00:14:23,910 --> 00:14:28,999
need to be GP or anything like that it's

278
00:14:30,800 --> 00:14:34,559
a huge simplification I'm sure that

279
00:14:34,559 --> 00:14:36,689
people have never won BGP large p2p

280
00:14:36,689 --> 00:14:38,519
networks it's actually not too evil at

281
00:14:38,519 --> 00:14:40,879
all right

282
00:14:41,309 --> 00:14:44,699
we support ipv6 I prefer and not for six

283
00:14:44,699 --> 00:14:46,620
which means we can translate between e4

284
00:14:46,620 --> 00:14:48,870
and b6 others family just doesn't matter

285
00:14:48,870 --> 00:14:51,870
anymore right you can use whatever you

286
00:14:51,870 --> 00:14:53,879
want the application developer running

287
00:14:53,879 --> 00:14:55,920
continuously will not have to care about

288
00:14:55,920 --> 00:15:01,410
addressing identity based security this

289
00:15:01,410 --> 00:15:03,420
is basically a decoupling

290
00:15:03,420 --> 00:15:05,129
addressing from security so instead of

291
00:15:05,129 --> 00:15:06,540
having IP tables

292
00:15:06,540 --> 00:15:09,929
apples or apples which match on IPs and

293
00:15:09,929 --> 00:15:12,959
plates what we do instead is we derive

294
00:15:12,959 --> 00:15:16,439
the identity of the packet based on for

295
00:15:16,439 --> 00:15:24,170
example container labels each endpoint

296
00:15:24,170 --> 00:15:26,040
identity and then we attach that

297
00:15:26,040 --> 00:15:27,990
identity to the packet so it gets

298
00:15:27,990 --> 00:15:31,319
carried which means we can enforce

299
00:15:31,319 --> 00:15:33,629
security policies decouple from from

300
00:15:33,629 --> 00:15:36,179
from addressing this scale has extremely

301
00:15:36,179 --> 00:15:38,309
well because an identity is just the

302
00:15:38,309 --> 00:15:39,990
numbers on the receiving side it's

303
00:15:39,990 --> 00:15:41,730
literally just a hash table lookup that

304
00:15:41,730 --> 00:15:44,480
Allah that decides whether a packet

305
00:15:44,480 --> 00:15:46,449
supposed to be delivered on Optima trees

306
00:15:46,449 --> 00:15:49,279
the cost of past enforcement is the same

307
00:15:49,279 --> 00:15:50,949
whether you're running one end point

308
00:15:50,949 --> 00:15:53,360
100,000 points already I have one course

309
00:15:53,360 --> 00:15:55,310
it alone loaded or ten million policy

310
00:15:55,310 --> 00:16:10,519
rules all the complexity is in the proxy

311
00:16:10,519 --> 00:16:13,370
which can do service routing service

312
00:16:13,370 --> 00:16:16,399
trolling API problems circuit breaking

313
00:16:16,399 --> 00:16:18,410
and so on so smoothly literally

314
00:16:18,410 --> 00:16:21,529
basically injecting in more proxy into

315
00:16:21,529 --> 00:16:26,300
every into every endpoint we can

316
00:16:26,300 --> 00:16:29,139
transfer into an encryption which means

317
00:16:29,139 --> 00:16:31,630
if you have applications which don't

318
00:16:31,630 --> 00:16:34,790
which have not implemented TLS we can do

319
00:16:34,790 --> 00:16:49,730
the end-to-end encryption encrypted from

320
00:16:49,730 --> 00:17:01,760
your task into silicon example it's

321
00:17:01,760 --> 00:17:04,429
showing applications of front and back

322
00:17:04,429 --> 00:17:07,549
ends we're attaching a label to each of

323
00:17:07,549 --> 00:17:11,540
them and basically allowing a user to

324
00:17:11,540 --> 00:17:13,010
talking to their to the to the local

325
00:17:13,010 --> 00:17:14,599
antelope ones talking your front and

326
00:17:14,599 --> 00:17:16,549
front and talking to back-end very

327
00:17:16,549 --> 00:17:19,280
simple right each of these will get an

328
00:17:19,280 --> 00:17:21,290
identity it will enforce the policy

329
00:17:21,290 --> 00:17:24,079
where we can tune top is we can also add

330
00:17:24,079 --> 00:17:26,359
in wireless which means you can take

331
00:17:26,359 --> 00:17:28,189
that policy you can now apply it into

332
00:17:28,189 --> 00:17:30,110
let's a production environment in a qi

333
00:17:30,110 --> 00:17:32,590
environment and the way to do that is

334
00:17:32,590 --> 00:17:37,309
very simple you can say any endpoint

335
00:17:37,309 --> 00:17:39,559
with the label production in order to

336
00:17:39,559 --> 00:17:40,940
consume that you also need to have a

337
00:17:40,940 --> 00:17:41,640
little

338
00:17:41,640 --> 00:17:43,710
the endpoint of the label QA in order to

339
00:17:43,710 --> 00:17:45,330
consume that you also need to have to

340
00:17:45,330 --> 00:17:48,180
label QA so given given this this is

341
00:17:48,180 --> 00:17:49,500
something that is very simple to

342
00:17:49,500 --> 00:17:51,420
understand you can build very simple

343
00:17:51,420 --> 00:17:54,240
constraints with tools and with metadata

344
00:17:54,240 --> 00:17:56,160
that everybody understands and in the

345
00:17:56,160 --> 00:17:57,980
backend all of this gets translated into

346
00:17:57,980 --> 00:18:03,240
identities that we can then enforce so

347
00:18:03,240 --> 00:18:04,680
the main question I think that everybody

348
00:18:04,680 --> 00:18:06,480
is might be wondering do you have a

349
00:18:06,480 --> 00:18:18,420
couple of people talks of this the same

350
00:18:18,420 --> 00:18:20,460
thing is a lot of the decal slides just

351
00:18:20,460 --> 00:18:22,500
showing one very extreme end of the

352
00:18:22,500 --> 00:18:25,170
spectrum which is this is the TCP stack

353
00:18:25,170 --> 00:18:27,600
performing and point to end point on a

354
00:18:27,600 --> 00:18:30,120
single note there's no hardware involved

355
00:18:30,120 --> 00:18:33,120
at all this is using th ESO and grr

356
00:18:33,120 --> 00:18:35,550
heavily but this is trying to make the

357
00:18:35,550 --> 00:18:37,410
point that the TCP stack itself in the

358
00:18:37,410 --> 00:18:44,700
coal is not necessarily slow right if

359
00:18:44,700 --> 00:18:46,920
you absolutely need to see 64 byte

360
00:18:46,920 --> 00:18:49,710
packets on the wire then the Kuro is to

361
00:18:49,710 --> 00:18:51,390
simply not optimize to handle that if

362
00:18:51,390 --> 00:18:53,760
you care about through if you care about

363
00:18:53,760 --> 00:18:55,920
TCP performance in general the kernel is

364
00:18:55,920 --> 00:18:57,660
very well capable of handling that we

365
00:18:57,660 --> 00:19:00,390
can we can do 70 gigs of TCP traffic on

366
00:19:00,390 --> 00:19:02,960
a single core as well so it's not about

367
00:19:02,960 --> 00:19:04,940
[Music]

368
00:19:04,940 --> 00:19:07,350
it's about like what kind of programming

369
00:19:07,350 --> 00:19:09,360
technologies that you use the processor

370
00:19:09,360 --> 00:19:11,730
packets or whether you want to process

371
00:19:11,730 --> 00:19:13,560
every packet individually whether you

372
00:19:13,560 --> 00:19:15,480
apply something like zero that you build

373
00:19:15,480 --> 00:19:17,370
a chime frame that you can then pass

374
00:19:17,370 --> 00:19:29,010
through the stack at once we just got

375
00:19:29,010 --> 00:19:30,420
started a couple of months ago ders is

376
00:19:30,420 --> 00:19:33,360
still very fresh please also feel free

377
00:19:33,360 --> 00:19:36,420
to reach out to me on Twitter we also

378
00:19:36,420 --> 00:19:41,670
maintain a slack channel and we do have

379
00:19:41,670 --> 00:19:43,110
stickers

380
00:19:43,110 --> 00:19:45,360
automated table because there's talks

381
00:19:45,360 --> 00:19:48,570
afterwards as well with feel free to get

382
00:19:48,570 --> 00:19:51,210
a sticker on your way down

383
00:19:51,210 --> 00:20:22,200
if capsulation protocol external ID

384
00:20:22,200 --> 00:20:25,290
Jannetty re you can also put into ipv6

385
00:20:25,290 --> 00:20:27,600
maybe are using your own protocols and

386
00:20:27,600 --> 00:20:28,950
you have space somewhere they'll be

387
00:20:28,950 --> 00:20:31,410
running quick on top of UDP of space

388
00:20:31,410 --> 00:20:34,470
that we don't believe gives you the

389
00:20:34,470 --> 00:20:36,419
ability in the flexibility to inject it

390
00:20:36,419 --> 00:20:38,580
anywhere we just need to know what those

391
00:20:38,580 --> 00:20:40,530
bits or store you can even store those

392
00:20:40,530 --> 00:20:43,080
bits in what's another framework like a

393
00:20:43,080 --> 00:20:44,790
typical application and we can read it

394
00:20:44,790 --> 00:20:46,710
as long as they know where the bits are

395
00:20:46,710 --> 00:20:50,299
set we can use them

396
00:20:52,290 --> 00:20:55,129
lotta questions

397
00:21:04,820 --> 00:21:06,810
you have to start with something that's

398
00:21:06,810 --> 00:21:22,530
fair right I think is when I say this is

399
00:21:22,530 --> 00:21:23,970
the future I think the model is the

400
00:21:23,970 --> 00:21:26,220
future and whether BPF are the

401
00:21:26,220 --> 00:21:27,900
technology as it stands right now it's

402
00:21:27,900 --> 00:21:29,190
the future I don't know we'll see I

403
00:21:29,190 --> 00:21:33,090
think I see cogeneration and writing

404
00:21:33,090 --> 00:21:35,910
particular like specific programs to to

405
00:21:35,910 --> 00:21:38,520
solve networking and security for

406
00:21:38,520 --> 00:21:41,070
particular impose I see that as I as a

407
00:21:41,070 --> 00:21:43,980
as a revolutionary step on top of SDN

408
00:21:43,980 --> 00:21:47,280
order as the flow table basters Jana

409
00:21:47,280 --> 00:21:50,970
would say dude answer the second

410
00:21:50,970 --> 00:21:54,870
question which is the segregation should

411
00:21:54,870 --> 00:21:58,260
we add like PPF to db/decade absolutely

412
00:21:58,260 --> 00:22:00,930
but I mean there is a classic PPF user

413
00:22:00,930 --> 00:22:02,940
space some time already

414
00:22:02,940 --> 00:22:04,440
we should definitely be play upon that

415
00:22:04,440 --> 00:22:05,730
runs on top of TP decals that we can

416
00:22:05,730 --> 00:22:08,930
have EPF users versus rock

417
00:22:23,830 --> 00:22:27,260
so the question is what about the

418
00:22:27,260 --> 00:22:30,410
obvious Rajat is on a way to actually

419
00:22:30,410 --> 00:22:32,600
leverage PPF as far as I know what

420
00:22:32,600 --> 00:22:33,940
they're looking at right now is actually

421
00:22:33,940 --> 00:22:36,710
building a fully compatible replacement

422
00:22:36,710 --> 00:22:38,750
for the existing Colonel data path which

423
00:22:38,750 --> 00:22:40,400
means the DPF program will actually

424
00:22:40,400 --> 00:22:43,460
parse Annette link messages and take

425
00:22:43,460 --> 00:22:47,530
existing data power flows where sue is

426
00:22:47,530 --> 00:22:50,420
not about to just a flow map flow table

427
00:22:50,420 --> 00:22:52,640
model at all and doesn't even have a

428
00:22:52,640 --> 00:22:54,470
concept of flow so I think there's

429
00:22:54,470 --> 00:22:56,420
little overlap and it doesn't doesn't

430
00:22:56,420 --> 00:22:59,780
make sense unless obvious RIA trusts and

431
00:22:59,780 --> 00:23:01,820
refocus on something else other than a

432
00:23:01,820 --> 00:23:04,179
flow table

433
00:23:25,700 --> 00:23:38,909
because it's a second time but that will

434
00:23:38,909 --> 00:23:46,409
mean that it's a deficit - like

435
00:23:46,409 --> 00:23:56,580
something from the orchestration how am

436
00:23:56,580 --> 00:24:03,090
I supposed to repeat that question I

437
00:24:03,090 --> 00:24:04,740
think it's an excellent question so the

438
00:24:04,740 --> 00:24:08,100
question is there's process out there

439
00:24:08,100 --> 00:24:10,490
which would allow you to write p4 code

440
00:24:10,490 --> 00:24:12,869
translate that into BPF which is done

441
00:24:12,869 --> 00:24:15,570
being one people has the flexibility to

442
00:24:15,570 --> 00:24:17,789
be a back-end for p4 then the second

443
00:24:17,789 --> 00:24:19,799
part of the question more assuming is

444
00:24:19,799 --> 00:24:21,149
aiming for something that is actually

445
00:24:21,149 --> 00:24:24,179
not in line before in terms of it's not

446
00:24:24,179 --> 00:24:26,610
a pipeline based flow model it does not

447
00:24:26,610 --> 00:24:28,440
have a configuration and then a runtime

448
00:24:28,440 --> 00:24:29,279
mode

449
00:24:29,279 --> 00:24:32,190
how does the cilium cope with the lack

450
00:24:32,190 --> 00:24:34,320
of tooling that has been created for

451
00:24:34,320 --> 00:24:37,619
flow based mouths frankly we just have

452
00:24:37,619 --> 00:24:38,999
to collect new tooling but this is that

453
00:24:38,999 --> 00:24:40,860
this is a good chance because a lot of

454
00:24:40,860 --> 00:24:43,350
the coiling has been written for our key

455
00:24:43,350 --> 00:24:45,929
models that have been around for 20 30

456
00:24:45,929 --> 00:24:48,360
years it's not necessarily a tooling you

457
00:24:48,360 --> 00:24:50,460
require in a cloud environment or in a

458
00:24:50,460 --> 00:24:52,649
diverse environment where frankly a lot

459
00:24:52,649 --> 00:24:55,110
of people don't even have to keep all of

460
00:24:55,110 --> 00:24:57,240
our key they have the skill sets

461
00:24:57,240 --> 00:24:59,039
required is very wide if you can

462
00:24:59,039 --> 00:25:00,330
abstract that and actually provide

463
00:25:00,330 --> 00:25:03,360
tooling that is more specific and more

464
00:25:03,360 --> 00:25:05,549
abstract and it's - still are

465
00:25:05,549 --> 00:25:07,559
sufficiently I think that's the way to

466
00:25:07,559 --> 00:25:07,980
go

467
00:25:07,980 --> 00:25:09,749
an application that whopper would like

468
00:25:09,749 --> 00:25:11,730
to see a package package job

469
00:25:11,730 --> 00:25:13,889
notification from this container to this

470
00:25:13,889 --> 00:25:15,539
container from this service to this is a

471
00:25:15,539 --> 00:25:17,549
service and IP address doesn't tell a

472
00:25:17,549 --> 00:25:19,169
application that will offer anything

473
00:25:19,169 --> 00:25:20,500
because it doesn't even know I

474
00:25:20,500 --> 00:25:22,419
when an IP address relates to in terms

475
00:25:22,419 --> 00:25:33,159
of which service that might be the

476
00:25:33,159 --> 00:25:36,520
question is is so capable of adjusting

477
00:25:36,520 --> 00:25:38,500
money manipulating and it's a chatter

478
00:25:38,500 --> 00:25:46,299
thread yep so PPF can you can also

479
00:25:46,299 --> 00:25:49,840
extend modify the packet size so it is

480
00:25:49,840 --> 00:25:53,080
capable as I mentioned in the talk we

481
00:25:53,080 --> 00:25:55,169
have actually divided a format for six

482
00:25:55,169 --> 00:25:57,520
implementations vpf which also requires

483
00:25:57,520 --> 00:25:59,080
obviously to leave out the entire header

484
00:25:59,080 --> 00:26:00,940
and change the packet size so absolutely

485
00:26:00,940 --> 00:26:05,980
yes it is capable of moving MSA chatters

486
00:26:05,980 --> 00:26:07,600
I don't point out the limitation though

487
00:26:07,600 --> 00:26:09,520
one limitation is that you cannot have

488
00:26:09,520 --> 00:26:16,630
us because potentially be a problem if

489
00:26:16,630 --> 00:26:18,490
it never breaks out the loop you can

490
00:26:18,490 --> 00:26:19,840
crash your call right that's the

491
00:26:19,840 --> 00:26:21,429
limitations or along the parsing side

492
00:26:21,429 --> 00:26:22,900
you need to be more creative

493
00:26:22,900 --> 00:26:27,330
contributors decoded single

494
00:26:28,260 --> 00:26:30,460
yeah absolutely absolutely yeah

495
00:26:30,460 --> 00:26:31,390
absolutely

496
00:26:31,390 --> 00:26:34,030
so BPF is not specific to any protocols

497
00:26:34,030 --> 00:26:39,250
at all it's completely generic if two

498
00:26:39,250 --> 00:26:41,110
minutes there's one more question if

499
00:26:41,110 --> 00:26:43,500
there is one

500
00:26:50,580 --> 00:26:53,820
be sure to get a people a cinnamon stick

501
00:26:53,820 --> 00:26:55,800
do anything about the place guys to get

502
00:26:55,800 --> 00:26:59,360
oneself Thank You chef that machine

