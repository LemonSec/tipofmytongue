1
00:00:05,180 --> 00:00:09,360
thanks Patrick thanks for coming here

2
00:00:09,360 --> 00:00:12,480
some David disabled from Susur working

3
00:00:12,480 --> 00:00:14,699
the storage team there and I'll be

4
00:00:14,699 --> 00:00:17,210
talking about just a project I worked on

5
00:00:17,210 --> 00:00:20,250
for a hack week at Sousa which was

6
00:00:20,250 --> 00:00:26,759
basically a USB gateway so a quick quick

7
00:00:26,759 --> 00:00:29,460
look at the agenda I'll start off just

8
00:00:29,460 --> 00:00:31,349
with an introduction to the project

9
00:00:31,349 --> 00:00:35,220
itself we'll take a look at or just have

10
00:00:35,220 --> 00:00:37,290
an overview of SEP hope we caught the

11
00:00:37,290 --> 00:00:39,380
talks earlier it talks earlier about

12
00:00:39,380 --> 00:00:42,780
sort of the set architecture and how it

13
00:00:42,780 --> 00:00:46,020
solves all your storage problems a look

14
00:00:46,020 --> 00:00:49,080
at USD storage so the USB storage stack

15
00:00:49,080 --> 00:00:52,800
in in Linux then move on to a

16
00:00:52,800 --> 00:00:54,660
demonstration so I'll do a live demo

17
00:00:54,660 --> 00:00:58,710
with the board I have with me yeah I

18
00:00:58,710 --> 00:01:00,450
have a set cost of running on my laptop

19
00:01:00,450 --> 00:01:03,960
so I'll sort of use that for the test

20
00:01:03,960 --> 00:01:07,380
demo and then look at how this could

21
00:01:07,380 --> 00:01:09,719
also be used for public storage so a

22
00:01:09,719 --> 00:01:13,020
public cloud storage so where we have to

23
00:01:13,020 --> 00:01:17,609
say Amazon or Azur behind the Storage

24
00:01:17,609 --> 00:01:21,600
Gateway and finally look it's yeah some

25
00:01:21,600 --> 00:01:24,030
future challenges so what else could be

26
00:01:24,030 --> 00:01:26,789
done with a device like this or this

27
00:01:26,789 --> 00:01:29,100
sort of project and finished with a

28
00:01:29,100 --> 00:01:34,939
conclusion can everyone hear me okay

29
00:01:36,680 --> 00:01:39,660
so the project itself was sort of

30
00:01:39,660 --> 00:01:43,260
conceived with with hack week so as an

31
00:01:43,260 --> 00:01:45,510
engineer at Sousa we get normally once

32
00:01:45,510 --> 00:01:48,420
or twice a year an event or we have an

33
00:01:48,420 --> 00:01:51,390
event called hack week and within hack

34
00:01:51,390 --> 00:01:53,460
week we can work on whatever we feel

35
00:01:53,460 --> 00:01:56,970
like working on so it's really great

36
00:01:56,970 --> 00:01:58,800
time to sort of innovate within the

37
00:01:58,800 --> 00:02:01,350
company we can work on something which

38
00:02:01,350 --> 00:02:04,680
we're sort of passionate about so in my

39
00:02:04,680 --> 00:02:06,630
case it was I think a year or so ago now

40
00:02:06,630 --> 00:02:10,020
I had I had an arm board so QB trucks

41
00:02:10,020 --> 00:02:12,540
sort of gathering dusk got dust in the

42
00:02:12,540 --> 00:02:16,200
corner wanted to do something with it I

43
00:02:16,200 --> 00:02:20,520
wanted to learn something new and I work

44
00:02:20,520 --> 00:02:22,380
on storage normally so I thought yeah

45
00:02:22,380 --> 00:02:25,760
look I'll combine these things and

46
00:02:25,760 --> 00:02:30,870
create a USB storage gateway so in this

47
00:02:30,870 --> 00:02:34,260
case we have basically out our USB host

48
00:02:34,260 --> 00:02:37,530
so any stupid device for the USB port

49
00:02:37,530 --> 00:02:40,370
which nowadays is pretty much everything

50
00:02:40,370 --> 00:02:44,190
I can then connect this USB gateway to

51
00:02:44,190 --> 00:02:48,900
my my device and basically access the

52
00:02:48,900 --> 00:02:51,480
set cluster or the Ceph storage through

53
00:02:51,480 --> 00:02:58,790
USD so the goals of the project

54
00:02:58,790 --> 00:03:01,980
initially my main goal was just to get

55
00:03:01,980 --> 00:03:05,580
something usable so I thought okay this

56
00:03:05,580 --> 00:03:08,970
could then be yeah something at home I

57
00:03:08,970 --> 00:03:10,650
could then potentially say run a safe

58
00:03:10,650 --> 00:03:13,260
cluster in my basement then connect my

59
00:03:13,260 --> 00:03:16,290
stereo my television whatever else has a

60
00:03:16,290 --> 00:03:19,290
USB port connect that and plumb it all

61
00:03:19,290 --> 00:03:23,640
into Seth for storage another

62
00:03:23,640 --> 00:03:26,190
possibility would be booting from the

63
00:03:26,190 --> 00:03:28,920
SEP cluster so most laptops nowadays can

64
00:03:28,920 --> 00:03:31,860
boot from USB so you plug in the Gateway

65
00:03:31,860 --> 00:03:34,050
you boot straight from the safe cluster

66
00:03:34,050 --> 00:03:37,350
or the cloud storage encryption on the

67
00:03:37,350 --> 00:03:40,590
device itself so in cases where I don't

68
00:03:40,590 --> 00:03:44,850
trust the cloud storage as

69
00:03:44,850 --> 00:03:47,490
specially for public cloud where I have

70
00:03:47,490 --> 00:03:49,650
no trust that they're going to you know

71
00:03:49,650 --> 00:03:51,630
keep my data safe so I want to do

72
00:03:51,630 --> 00:03:55,590
encryption on my side as close to as

73
00:03:55,590 --> 00:03:57,180
close to the client as possible

74
00:03:57,180 --> 00:04:00,060
I can then keep the keys on on the

75
00:04:00,060 --> 00:04:02,610
gateway carry that with me and yeah

76
00:04:02,610 --> 00:04:05,520
don't share anything with with the

77
00:04:05,520 --> 00:04:09,360
public cloud with the cloud and finally

78
00:04:09,360 --> 00:04:12,930
simple configurations so something like

79
00:04:12,930 --> 00:04:15,510
this I didn't want to to need to SSH

80
00:04:15,510 --> 00:04:17,760
into the board itself every time I

81
00:04:17,760 --> 00:04:19,730
wanted to change the complete person

82
00:04:19,730 --> 00:04:25,670
that was also a goal so now look at SEF

83
00:04:25,670 --> 00:04:28,170
yeah hopefully caught the the talks

84
00:04:28,170 --> 00:04:34,140
earlier it's it's basically a project an

85
00:04:34,140 --> 00:04:37,500
amazing project which sort of provides

86
00:04:37,500 --> 00:04:40,050
the ability to aggregate you know a pool

87
00:04:40,050 --> 00:04:41,880
of hardware or the storage across that

88
00:04:41,880 --> 00:04:45,330
hardware and have a logical storage pool

89
00:04:45,330 --> 00:04:47,940
which can then be carved up for for

90
00:04:47,940 --> 00:04:50,490
block storage for file system for object

91
00:04:50,490 --> 00:04:55,380
storage yet scalable there's no sort of

92
00:04:55,380 --> 00:05:01,710
single point of failure in this case or

93
00:05:01,710 --> 00:05:04,440
in for this project I'm mostly just

94
00:05:04,440 --> 00:05:06,570
focused on the router what device

95
00:05:06,570 --> 00:05:09,810
interface for surf so in this case we

96
00:05:09,810 --> 00:05:12,750
have a block device image on the safe

97
00:05:12,750 --> 00:05:16,260
cluster which is backed by individual

98
00:05:16,260 --> 00:05:18,870
objects on the surf object store or

99
00:05:18,870 --> 00:05:22,580
rattles at the back end

100
00:05:24,720 --> 00:05:29,440
so the Ceph RBD feature or interface has

101
00:05:29,440 --> 00:05:34,419
some quite cool features it offers yeah

102
00:05:34,419 --> 00:05:35,979
but it's in provision so basically

103
00:05:35,979 --> 00:05:37,629
you're not consuming space within your

104
00:05:37,629 --> 00:05:40,419
SEF cluster until you're writing to the

105
00:05:40,419 --> 00:05:41,740
image

106
00:05:41,740 --> 00:05:43,810
yeah resizable so you can grow and

107
00:05:43,810 --> 00:05:45,909
shrink your images there you can also do

108
00:05:45,909 --> 00:05:49,080
things like snapshots and clones and

109
00:05:49,080 --> 00:05:53,169
there's also yeah support within the

110
00:05:53,169 --> 00:05:56,110
Linux kernel so with Linux you can

111
00:05:56,110 --> 00:05:58,330
basically map a rather Spock device

112
00:05:58,330 --> 00:06:00,909
image it appears as a local block device

113
00:06:00,909 --> 00:06:03,159
and you could use that as you would any

114
00:06:03,159 --> 00:06:07,120
other disk on the user space side

115
00:06:07,120 --> 00:06:12,039
there's 4qm use integration so you can

116
00:06:12,039 --> 00:06:14,169
run virtual machines with you in you and

117
00:06:14,169 --> 00:06:17,110
that's then backed by robust popularized

118
00:06:17,110 --> 00:06:22,389
images on the set cluster so now look at

119
00:06:22,389 --> 00:06:26,050
the hardware that I had for this USB

120
00:06:26,050 --> 00:06:29,590
Gateway project so I started with the

121
00:06:29,590 --> 00:06:34,330
top left there which is a QB truck yeah

122
00:06:34,330 --> 00:06:43,509
that's so a dual core cortex yet Keuka

123
00:06:43,509 --> 00:06:47,289
why 2008 twenty boards with gigabyte

124
00:06:47,289 --> 00:06:51,370
Gigabit Ethernet yeah what else does it

125
00:06:51,370 --> 00:06:52,990
have so it's got a USB on-the-go port

126
00:06:52,990 --> 00:06:56,139
which is obviously what's needed for

127
00:06:56,139 --> 00:06:58,690
this project and has a bunch of other

128
00:06:58,690 --> 00:07:00,729
things on there which just really aren't

129
00:07:00,729 --> 00:07:04,180
aren't required and yeah make the board

130
00:07:04,180 --> 00:07:07,419
a whole lot bigger and less portable so

131
00:07:07,419 --> 00:07:10,389
yeah after that I moved on to the Nano

132
00:07:10,389 --> 00:07:14,590
pioneer which is this board here this is

133
00:07:14,590 --> 00:07:16,960
sort of I think it's four centimeters by

134
00:07:16,960 --> 00:07:18,909
four centimeters so it's very much

135
00:07:18,909 --> 00:07:21,969
something you could or I could imagine

136
00:07:21,969 --> 00:07:23,919
carrying with me and you know plugging

137
00:07:23,919 --> 00:07:26,400
it in and using it

138
00:07:26,400 --> 00:07:31,229
on the go both of them are relatively

139
00:07:31,229 --> 00:07:34,590
inexpensive so the Nano pine you know is

140
00:07:34,590 --> 00:07:42,169
under $10 so certainly doable price-wise

141
00:07:42,830 --> 00:07:45,210
yeah performance wise they're not great

142
00:07:45,210 --> 00:07:48,030
in that or lease in an open EO has 100

143
00:07:48,030 --> 00:07:53,310
megabits Network and an USB 2 so yeah it

144
00:07:53,310 --> 00:07:54,900
would be nice to try something with more

145
00:07:54,900 --> 00:07:57,930
powerful hardware but at this stage or

146
00:07:57,930 --> 00:08:02,370
wasn't a priority so yeah the big

147
00:08:02,370 --> 00:08:04,229
benefit of using these boards is that

148
00:08:04,229 --> 00:08:06,990
they have thanks to the sun sea

149
00:08:06,990 --> 00:08:09,900
community they have excellent mainline

150
00:08:09,900 --> 00:08:14,760
kernel support there's also a openSUSE

151
00:08:14,760 --> 00:08:19,710
tumbleweed port for both boards which

152
00:08:19,710 --> 00:08:21,510
which is something you know obviously

153
00:08:21,510 --> 00:08:22,889
working at Caesar I wanted to run

154
00:08:22,889 --> 00:08:26,600
openSUSE on a board like that

155
00:08:30,280 --> 00:08:35,169
so USB storage I won't go into huge

156
00:08:35,169 --> 00:08:39,030
detail yeah I recommend a talk by

157
00:08:39,030 --> 00:08:42,729
Christoph a Parsi act so he spoke

158
00:08:42,729 --> 00:08:46,000
yesterday on USB it was a great talks

159
00:08:46,000 --> 00:08:47,920
that are going through the details of

160
00:08:47,920 --> 00:08:50,530
usb on Linux and this is just sort of

161
00:08:50,530 --> 00:08:53,080
listening what I used or what I needed

162
00:08:53,080 --> 00:08:57,490
to configure for this project so USB is

163
00:08:57,490 --> 00:09:00,300
or can be used as a scuzzy transport

164
00:09:00,300 --> 00:09:03,300
which is how I'm using it in this case

165
00:09:03,300 --> 00:09:06,580
so the two options there bulk only

166
00:09:06,580 --> 00:09:11,080
transport an USB Attached disguisey USB

167
00:09:11,080 --> 00:09:14,190
Attached Guzzi's and a more recent

168
00:09:14,190 --> 00:09:17,920
addition to to USB and that allows for

169
00:09:17,920 --> 00:09:20,980
things like command tag queuing and I

170
00:09:20,980 --> 00:09:23,410
think also out of order completion on on

171
00:09:23,410 --> 00:09:29,680
USB 3 the USB gadget stack in Linux

172
00:09:29,680 --> 00:09:32,410
includes two modules for for handling

173
00:09:32,410 --> 00:09:35,550
this so we have the mass storage Keo

174
00:09:35,550 --> 00:09:37,870
which is what I ended up using that

175
00:09:37,870 --> 00:09:40,720
there's also F TCM which sort of plums

176
00:09:40,720 --> 00:09:44,440
into the Linux kernel scuzzy target so

177
00:09:44,440 --> 00:09:47,710
that's basically a scuzzy transport for

178
00:09:47,710 --> 00:09:50,280
USB

179
00:09:53,310 --> 00:09:57,670
so the the Gateway itself as you saw all

180
00:09:57,670 --> 00:09:59,260
of the features are already there in

181
00:09:59,260 --> 00:10:02,260
Linux I mean we have the rather Spock

182
00:10:02,260 --> 00:10:05,769
device kernel client we have the USB

183
00:10:05,769 --> 00:10:09,040
gadget stack which supports USB

184
00:10:09,040 --> 00:10:10,350
mass-storage

185
00:10:10,350 --> 00:10:13,089
there's really not that much to do for

186
00:10:13,089 --> 00:10:16,120
encryption there's VM crypt in the end

187
00:10:16,120 --> 00:10:18,850
the project itself was or is mostly just

188
00:10:18,850 --> 00:10:20,620
about configuring these different

189
00:10:20,620 --> 00:10:24,190
components and making it relatively easy

190
00:10:24,190 --> 00:10:30,130
to do that so here's sort of a look at

191
00:10:30,130 --> 00:10:34,390
how the board's configured or how I've

192
00:10:34,390 --> 00:10:37,570
set up this this gateway so basically

193
00:10:37,570 --> 00:10:41,589
what we have is a board that then boots

194
00:10:41,589 --> 00:10:45,970
Linux once it's connected and initially

195
00:10:45,970 --> 00:10:49,180
we boot into a we expose a configuration

196
00:10:49,180 --> 00:10:52,300
file system via USB so this is just a

197
00:10:52,300 --> 00:10:56,140
ram disk where you can yeah you can

198
00:10:56,140 --> 00:10:57,820
provide your set credentials to access

199
00:10:57,820 --> 00:11:00,520
the set cluster you can specify which

200
00:11:00,520 --> 00:11:04,959
image you want exposed by the board yeah

201
00:11:04,959 --> 00:11:08,500
Lux key for the encrypt and once we're

202
00:11:08,500 --> 00:11:11,800
done with that now you can eject so this

203
00:11:11,800 --> 00:11:16,050
is exposed as an injectable logical unit

204
00:11:16,050 --> 00:11:20,140
so once once that is then ejected and we

205
00:11:20,140 --> 00:11:22,510
intercept that eject or we detect it and

206
00:11:22,510 --> 00:11:24,990
then basically process the user

207
00:11:24,990 --> 00:11:27,940
configuration so basically at that stage

208
00:11:27,940 --> 00:11:31,300
we can remount that image and take the

209
00:11:31,300 --> 00:11:33,430
separate n choose and look at what needs

210
00:11:33,430 --> 00:11:36,910
to be exposed and go ahead and do that

211
00:11:36,910 --> 00:11:43,089
and expose of our USB so now on through

212
00:11:43,089 --> 00:11:48,250
the demo so as I already said I have my

213
00:11:48,250 --> 00:11:50,980
set cluster running on my laptop so it's

214
00:11:50,980 --> 00:11:54,100
yeah just a very simple V start cluster

215
00:11:54,100 --> 00:11:59,490
just bring up console

216
00:12:18,480 --> 00:12:26,019
we said okay

217
00:12:26,019 --> 00:12:29,100
yeah not really

218
00:12:33,570 --> 00:12:35,880
so there you can see I have my chef

219
00:12:35,880 --> 00:12:40,199
cluster running with three OS ds1

220
00:12:40,199 --> 00:12:42,480
monitor and these are all just local

221
00:12:42,480 --> 00:12:45,779
processes on the laptop and now what

222
00:12:45,779 --> 00:12:47,940
I'll do is go ahead and connect my

223
00:12:47,940 --> 00:13:01,319
gateway so one thing I should say I

224
00:13:01,319 --> 00:13:03,209
haven't really worked on optimizing is

225
00:13:03,209 --> 00:13:05,600
the boot time of the the Gateway itself

226
00:13:05,600 --> 00:13:08,519
so normally you would expect that you

227
00:13:08,519 --> 00:13:11,160
know once you connect your USB key you

228
00:13:11,160 --> 00:13:13,019
can immediately access the storage there

229
00:13:13,019 --> 00:13:15,990
so at this stage it's still sort of in

230
00:13:15,990 --> 00:13:18,300
the tens of seconds until it boots and

231
00:13:18,300 --> 00:13:21,569
then eventually shows the configuration

232
00:13:21,569 --> 00:13:25,649
file system so just wait a little where

233
00:13:25,649 --> 00:13:29,750
it's just coming up yeah there we go

234
00:13:29,750 --> 00:13:31,949
so I have my device a notification

235
00:13:31,949 --> 00:13:38,010
saying that there's a new USB device and

236
00:13:38,010 --> 00:13:40,949
so you can see this config file system

237
00:13:40,949 --> 00:13:44,490
here so what this thing has now this is

238
00:13:44,490 --> 00:13:46,860
exposed as I said earlier as a rant war

239
00:13:46,860 --> 00:13:50,779
it's backed by a ram disk we have our

240
00:13:50,779 --> 00:13:54,660
RVD USB comp so in here basically I'm

241
00:13:54,660 --> 00:13:58,740
saying okay I want to expose the USB

242
00:13:58,740 --> 00:14:02,130
image on my RBD pool within the set

243
00:14:02,130 --> 00:14:06,480
cluster I have my set user that I want

244
00:14:06,480 --> 00:14:12,420
to use there is that in this case I have

245
00:14:12,420 --> 00:14:16,529
a run con flag so what this basically

246
00:14:16,529 --> 00:14:19,529
says is that when the Gateway boots it

247
00:14:19,529 --> 00:14:21,660
should first expose the configuration

248
00:14:21,660 --> 00:14:23,910
file system which is what we're seeing

249
00:14:23,910 --> 00:14:26,639
here so if I want it to boot immediately

250
00:14:26,639 --> 00:14:31,139
in expose sip then what I can do is go

251
00:14:31,139 --> 00:14:35,910
ahead and delete that file diem crypt so

252
00:14:35,910 --> 00:14:38,899
that's where we configure our VM crypt

253
00:14:38,899 --> 00:14:41,320
likes keys

254
00:14:41,320 --> 00:14:45,040
and within SEP I just have the standard

255
00:14:45,040 --> 00:14:48,610
set comp and the keyring there so one

256
00:14:48,610 --> 00:14:52,959
thing I want to do is just copy the

257
00:14:52,959 --> 00:14:55,570
Decepticon fan keyring that I have for

258
00:14:55,570 --> 00:14:58,000
myself cluster just do that from the

259
00:14:58,000 --> 00:15:07,839
command line good backup so now the

260
00:15:07,839 --> 00:15:09,459
other thing I mentioned was that once we

261
00:15:09,459 --> 00:15:12,930
act this configuration file system that

262
00:15:12,930 --> 00:15:15,660
configuration is processed or committed

263
00:15:15,660 --> 00:15:23,470
and we should then see the rudder swap

264
00:15:23,470 --> 00:15:26,259
device image appear and there it is as

265
00:15:26,259 --> 00:15:30,069
set down there so basically the gateways

266
00:15:30,069 --> 00:15:33,250
committed the the configuration connects

267
00:15:33,250 --> 00:15:35,610
to the set cluster on my laptop and then

268
00:15:35,610 --> 00:15:40,290
maps it and exposes apply a USB so here

269
00:15:40,290 --> 00:15:43,800
we can see

270
00:15:46,400 --> 00:15:50,240
so I have you know a one gigabyte image

271
00:15:50,240 --> 00:15:54,100
there which is it's now exposed and

272
00:15:54,100 --> 00:16:00,370
connected by USB yes

273
00:16:01,459 --> 00:16:04,740
yes I did so in this case I have a fat

274
00:16:04,740 --> 00:16:09,779
file system on the device and I'll use

275
00:16:09,779 --> 00:16:11,790
so the reason why I have it as fat

276
00:16:11,790 --> 00:16:15,570
rather than XT or XPS or butter FS is

277
00:16:15,570 --> 00:16:19,820
because I now wanted to demonstrate a

278
00:16:19,820 --> 00:16:22,850
stupid device accessing the safe storage

279
00:16:22,850 --> 00:16:30,540
so what I have here is is just a stock

280
00:16:30,540 --> 00:16:33,000
android mobile phone which obviously has

281
00:16:33,000 --> 00:16:36,269
no knowledge of Ceph but what I can also

282
00:16:36,269 --> 00:16:40,290
do is connect the USD gateway now to to

283
00:16:40,290 --> 00:16:45,899
the Android phone so in this case

284
00:16:45,899 --> 00:16:49,440
android supports fat32 now as you know

285
00:16:49,440 --> 00:16:55,350
USB stick so what I want to do is then

286
00:16:55,350 --> 00:16:57,899
wait for the board to boot and just so

287
00:16:57,899 --> 00:17:00,839
we've got some data to write to this F

288
00:17:00,839 --> 00:17:03,350
cluster

289
00:17:07,999 --> 00:17:16,850
okay and should come up any time now

290
00:17:21,439 --> 00:17:25,220
hopefully yes there is so just copy over

291
00:17:25,220 --> 00:17:31,279
that photo to the gateway so I basically

292
00:17:31,279 --> 00:17:35,289
see that as I would any other USB

293
00:17:36,669 --> 00:17:43,240
storage device and I'll copy that

294
00:17:46,420 --> 00:17:53,260
and now I can go ahead and eject it done

295
00:17:53,260 --> 00:17:56,740
so that's ejected you can power down the

296
00:17:56,740 --> 00:17:59,970
gate right now but what I'll do is use

297
00:17:59,970 --> 00:18:04,960
now just the rather Spock device client

298
00:18:04,960 --> 00:18:07,780
on my laptop just to map that image just

299
00:18:07,780 --> 00:18:11,710
so we can confirm that what we wrote so

300
00:18:11,710 --> 00:18:13,780
this photo is is actually there on this

301
00:18:13,780 --> 00:18:24,850
F cluster so I'm mapping I've mapped the

302
00:18:24,850 --> 00:18:30,970
USB image there just need to mount it as

303
00:18:30,970 --> 00:18:33,180
well

304
00:18:34,620 --> 00:18:37,250
good

305
00:18:38,590 --> 00:18:41,919
and there I can see that I've so this is

306
00:18:41,919 --> 00:18:43,870
just as I said using the rather Spock

307
00:18:43,870 --> 00:18:46,509
device client on my laptop the gateway

308
00:18:46,509 --> 00:18:49,120
isn't involved but there we can see the

309
00:18:49,120 --> 00:18:56,379
the photo that I so there's a very

310
00:18:56,379 --> 00:19:08,490
blurry photo oh that's the demo

311
00:19:13,660 --> 00:19:16,860
on with the talk

312
00:19:19,650 --> 00:19:21,929
so any questions about the demonstration

313
00:19:21,929 --> 00:19:28,559
at this stage or yes so what I have is

314
00:19:28,559 --> 00:19:32,909
basically once it can't access so if the

315
00:19:32,909 --> 00:19:35,520
the Gateway boots and can't access the

316
00:19:35,520 --> 00:19:37,049
SEF cluster so if you boot it without

317
00:19:37,049 --> 00:19:40,289
network access they need basically

318
00:19:40,289 --> 00:19:42,210
expose us to compete because it knows

319
00:19:42,210 --> 00:19:51,299
something has to be done so next off I

320
00:19:51,299 --> 00:19:54,179
also wanted to use the same thing for

321
00:19:54,179 --> 00:19:58,799
public cloud storage so in this case if

322
00:19:58,799 --> 00:20:01,580
I didn't have a safe cluster at home

323
00:20:01,580 --> 00:20:04,559
yeah I I could then use say a public

324
00:20:04,559 --> 00:20:08,029
cloud storage provider like Azur or

325
00:20:08,029 --> 00:20:11,659
Amazon s3 it needs exactly the same

326
00:20:11,659 --> 00:20:16,289
technology or components to yeah have a

327
00:20:16,289 --> 00:20:20,520
gateway for that with Microsoft Azure

328
00:20:20,520 --> 00:20:23,490
and there's basically a protocol or a

329
00:20:23,490 --> 00:20:25,350
restful protocol for accessing the

330
00:20:25,350 --> 00:20:27,600
virtual machine images in the azure

331
00:20:27,600 --> 00:20:31,380
cloud so I wrote this was in a prior

332
00:20:31,380 --> 00:20:33,929
hack week I wrote a client which speaks

333
00:20:33,929 --> 00:20:38,299
that protocol so the idea was then to

334
00:20:38,299 --> 00:20:41,760
yeah basically map between the scuzzy

335
00:20:41,760 --> 00:20:44,059
requests coming in from the USB host

336
00:20:44,059 --> 00:20:50,539
into this Azur restful protocol for

337
00:20:50,539 --> 00:20:53,450
their blog IO

338
00:20:53,450 --> 00:20:58,380
so with this I use the l io so in kernel

339
00:20:58,380 --> 00:21:01,320
scuzzy target with Alli oh there's a

340
00:21:01,320 --> 00:21:04,710
user space back-end which is T CMU

341
00:21:04,710 --> 00:21:09,600
runner I think that was added by Annie

342
00:21:09,600 --> 00:21:12,630
Grover from Red Hat's worked on that so

343
00:21:12,630 --> 00:21:14,010
basically with this back-end

344
00:21:14,010 --> 00:21:17,039
we have yeah something running in user

345
00:21:17,039 --> 00:21:19,559
space which then receives the scuzzy

346
00:21:19,559 --> 00:21:23,730
request from the USB host with that

347
00:21:23,730 --> 00:21:25,559
back-end I just snapped that too then a

348
00:21:25,559 --> 00:21:28,590
public cloud request so in a zoo

349
00:21:28,590 --> 00:21:30,929
blop blop requests and that goes into

350
00:21:30,929 --> 00:21:37,169
the cloud so this uses the elasto clouds

351
00:21:37,169 --> 00:21:39,480
clients and which is a project I worked

352
00:21:39,480 --> 00:21:42,860
on for that and this is basically just a

353
00:21:42,860 --> 00:21:47,010
POSIX like a library for yeah performing

354
00:21:47,010 --> 00:21:50,760
restful cloud IO as I said earlier I

355
00:21:50,760 --> 00:21:54,029
have been l io back-end which handles

356
00:21:54,029 --> 00:21:57,360
mapping of the scuzzy requests to the

357
00:21:57,360 --> 00:22:02,580
elasto library calls so it looks

358
00:22:02,580 --> 00:22:05,100
something like this for the public cloud

359
00:22:05,100 --> 00:22:07,950
case here we have the USB host on the

360
00:22:07,950 --> 00:22:13,140
Left connected to the USB gateway that

361
00:22:13,140 --> 00:22:15,480
goes or the scuzzy requests are then

362
00:22:15,480 --> 00:22:17,940
processed by the Linux

363
00:22:17,940 --> 00:22:19,860
I've skully Target or sorry scuzzy

364
00:22:19,860 --> 00:22:24,590
target there's T CMU above or below that

365
00:22:24,590 --> 00:22:27,210
basically as the user space backend and

366
00:22:27,210 --> 00:22:29,610
finally there's elasto which handles

367
00:22:29,610 --> 00:22:34,789
speaking with the Microsoft Azure cloud

368
00:22:37,039 --> 00:22:40,039
okay

369
00:22:41,030 --> 00:22:45,230
next up testing yeah so with this

370
00:22:45,230 --> 00:22:47,600
project I didn't really want to at least

371
00:22:47,600 --> 00:22:49,520
initially I was testing everything on

372
00:22:49,520 --> 00:22:51,890
the hardware itself which is a little

373
00:22:51,890 --> 00:22:53,870
fiddly when you're you know plugging in

374
00:22:53,870 --> 00:22:57,080
pulling out cables all day so I found

375
00:22:57,080 --> 00:22:59,990
later on there was this dummy HDD module

376
00:22:59,990 --> 00:23:03,440
within the Linux kernel this is great

377
00:23:03,440 --> 00:23:07,510
for testing exactly something like this

378
00:23:07,510 --> 00:23:11,780
where basically you you can use that as

379
00:23:11,780 --> 00:23:15,260
a loopback in a single system so in my

380
00:23:15,260 --> 00:23:17,480
case I just had a VM with everything on

381
00:23:17,480 --> 00:23:20,110
there and use the USB loopback

382
00:23:20,110 --> 00:23:25,880
functionality to test it so now on to

383
00:23:25,880 --> 00:23:29,929
future challenges so in the hack week

384
00:23:29,929 --> 00:23:32,799
that I had or the one week I had I think

385
00:23:32,799 --> 00:23:35,450
yeah I proved that it is perfectly

386
00:23:35,450 --> 00:23:38,870
possible to to to have something like

387
00:23:38,870 --> 00:23:41,659
this I think it is a reasonable device

388
00:23:41,659 --> 00:23:44,030
or something which is usable potentially

389
00:23:44,030 --> 00:23:46,730
to others but I think there are still

390
00:23:46,730 --> 00:23:49,520
plenty of of things which which could be

391
00:23:49,520 --> 00:23:51,320
done or it could be improved in many

392
00:23:51,320 --> 00:23:53,470
different ways

393
00:23:53,470 --> 00:23:56,480
yeah the first on the list I have is can

394
00:23:56,480 --> 00:23:58,880
concurrent image access so imagine where

395
00:23:58,880 --> 00:24:02,809
you have say you know if they cost under

396
00:24:02,809 --> 00:24:04,970
$10 and you could imagine maybe buying

397
00:24:04,970 --> 00:24:07,940
ten of these and sort of exposing maybe

398
00:24:07,940 --> 00:24:10,970
the same image by these gateways in that

399
00:24:10,970 --> 00:24:13,000
case you would need a way to to manage

400
00:24:13,000 --> 00:24:15,710
exposing a consistent image to all of

401
00:24:15,710 --> 00:24:19,880
those hosts or connected hosts in that

402
00:24:19,880 --> 00:24:22,850
case I think using something so yeah

403
00:24:22,850 --> 00:24:24,890
avoiding a cluster filesystem and using

404
00:24:24,890 --> 00:24:27,740
something like just snapshots where the

405
00:24:27,740 --> 00:24:31,100
first gateway to map sees or has write

406
00:24:31,100 --> 00:24:34,280
access to the the parent and then any

407
00:24:34,280 --> 00:24:37,100
subsequent connects just get a snapshot

408
00:24:37,100 --> 00:24:40,370
which was taken as the first hose

409
00:24:40,370 --> 00:24:43,460
connected I think that maybe of

410
00:24:43,460 --> 00:24:46,039
something which would yeah make having

411
00:24:46,039 --> 00:24:52,130
concurrent access usable anyway some

412
00:24:52,130 --> 00:24:54,500
other challenges so power is definitely

413
00:24:54,500 --> 00:24:57,710
a challenge I have had problems powering

414
00:24:57,710 --> 00:25:01,340
the board from the portable devices like

415
00:25:01,340 --> 00:25:05,059
mobile phones it's yeah really a little

416
00:25:05,059 --> 00:25:07,309
unsure whether the board will come up or

417
00:25:07,309 --> 00:25:10,280
not so one option would be to add a

418
00:25:10,280 --> 00:25:12,140
battery to the board so you're not so

419
00:25:12,140 --> 00:25:17,179
reliant on power from the USB host F PCM

420
00:25:17,179 --> 00:25:22,520
so this was the l io USB transport that

421
00:25:22,520 --> 00:25:24,830
plumb straight into the Linux kernel

422
00:25:24,830 --> 00:25:27,260
scuzzy targets I didn't actually get

423
00:25:27,260 --> 00:25:31,100
that working on the board so I wanted to

424
00:25:31,100 --> 00:25:32,659
sort of havin another play around with

425
00:25:32,659 --> 00:25:34,760
that and see whether it was a hardware

426
00:25:34,760 --> 00:25:37,730
issue or whether I just didn't set it up

427
00:25:37,730 --> 00:25:42,200
right caching so many of these in better

428
00:25:42,200 --> 00:25:45,770
boards have you know some onboard

429
00:25:45,770 --> 00:25:49,280
storage or in this case an SD card and

430
00:25:49,280 --> 00:25:51,830
when the root filesystem is under one

431
00:25:51,830 --> 00:25:54,140
gigabytes you produce the rest of that

432
00:25:54,140 --> 00:25:58,010
SD card or on-board storage for caching

433
00:25:58,010 --> 00:26:00,520
is a read case or a write back cache

434
00:26:00,520 --> 00:26:02,659
that would certainly do something to

435
00:26:02,659 --> 00:26:04,960
look at

436
00:26:07,390 --> 00:26:10,720
now this case you again but performance

437
00:26:10,720 --> 00:26:12,940
wise so I think at this stage most

438
00:26:12,940 --> 00:26:15,100
important would be the boot time so you

439
00:26:15,100 --> 00:26:17,320
saw it takes tens of seconds to come up

440
00:26:17,320 --> 00:26:21,070
and expose the storage one thing I did

441
00:26:21,070 --> 00:26:23,679
have or at least with the QT truck

442
00:26:23,679 --> 00:26:26,440
I did try running everything from the

443
00:26:26,440 --> 00:26:29,290
inner gram FS which was actually worked

444
00:26:29,290 --> 00:26:31,179
quite well so in that case I had it

445
00:26:31,179 --> 00:26:34,510
booting in yeah I think it was three or

446
00:26:34,510 --> 00:26:37,260
four seconds so it was much quicker but

447
00:26:37,260 --> 00:26:41,190
it's a little ugly implementation wise

448
00:26:41,190 --> 00:26:44,169
also in terms of raw storage performance

449
00:26:44,169 --> 00:26:47,710
I think having us be free and yeah

450
00:26:47,710 --> 00:26:52,020
Gigabit Ethernet or fast Wi-Fi would be

451
00:26:52,020 --> 00:26:53,350
great

452
00:26:53,350 --> 00:26:55,210
the only problem is that these wards are

453
00:26:55,210 --> 00:26:57,910
quite expensive and they're also not as

454
00:26:57,910 --> 00:27:00,100
portable as at least the ones I've seen

455
00:27:00,100 --> 00:27:05,280
are as portable as an open ear

456
00:27:08,410 --> 00:27:11,890
in conclusion yeah

457
00:27:11,890 --> 00:27:16,030
surf is fantastic it solves all of your

458
00:27:16,030 --> 00:27:17,320
storage problems I would just say

459
00:27:17,320 --> 00:27:20,020
recommend using it anyone that hasn't

460
00:27:20,020 --> 00:27:24,040
tried it out in terms of utilizing set

461
00:27:24,040 --> 00:27:27,160
from yeah many devices or opening up set

462
00:27:27,160 --> 00:27:29,650
to many more devices I think something

463
00:27:29,650 --> 00:27:33,010
like a USB gateway is useful for that I

464
00:27:33,010 --> 00:27:35,440
think it's a viable option for something

465
00:27:35,440 --> 00:27:41,440
like that I think as in particular using

466
00:27:41,440 --> 00:27:43,450
encryption on the board itself is

467
00:27:43,450 --> 00:27:46,750
particularly beneficial for a public

468
00:27:46,750 --> 00:27:49,120
cloud or where it's backed by a public

469
00:27:49,120 --> 00:27:55,420
cloud yeah cheap hardware really under

470
00:27:55,420 --> 00:27:57,580
$10 it makes something like this or a

471
00:27:57,580 --> 00:27:59,920
project like this but by possible quite

472
00:27:59,920 --> 00:28:04,480
viable and having open source or Linux

473
00:28:04,480 --> 00:28:06,420
kernel mainline mainline kernel support

474
00:28:06,420 --> 00:28:09,490
for something like this is hugely

475
00:28:09,490 --> 00:28:15,070
beneficial but otherwise looks like I'm

476
00:28:15,070 --> 00:28:18,970
a little early but yeah I guess I'd like

477
00:28:18,970 --> 00:28:22,840
to thank beforehand the upstream Sun sea

478
00:28:22,840 --> 00:28:25,690
community for kernel hacking and getting

479
00:28:25,690 --> 00:28:27,910
these boards working they do really an

480
00:28:27,910 --> 00:28:31,450
amazing job and also so invidious baba

481
00:28:31,450 --> 00:28:35,500
hadouken Muller and Alex cropland Caesar

482
00:28:35,500 --> 00:28:36,990
because they've also worked on the

483
00:28:36,990 --> 00:28:39,550
openSUSE tumbleweed port for these

484
00:28:39,550 --> 00:28:47,280
boards otherwise any questions yes

485
00:28:53,640 --> 00:28:55,799
so the question was what sort of been

486
00:28:55,799 --> 00:28:57,690
bandwidth or performance could I get

487
00:28:57,690 --> 00:29:02,070
with USB to on the so I mostly do

488
00:29:02,070 --> 00:29:04,290
benchmarking on the QB truck board which

489
00:29:04,290 --> 00:29:08,370
has a Gigabit Ethernet port in that case

490
00:29:08,370 --> 00:29:11,040
that was pollinated by the the USB 2

491
00:29:11,040 --> 00:29:14,340
port and I think it was yeah it was sort

492
00:29:14,340 --> 00:29:16,170
of 10 to 15 megabytes per second

493
00:29:16,170 --> 00:29:20,549
throughput via USB to the to the set

494
00:29:20,549 --> 00:29:23,610
cluster in this case my earth cluster is

495
00:29:23,610 --> 00:29:26,940
is memory back to anyway so yeah the

496
00:29:26,940 --> 00:29:28,940
bandwidth or sorry the bottleneck was

497
00:29:28,940 --> 00:29:32,750
very much the USB 2 port on the board

498
00:29:32,750 --> 00:29:37,460
other questions yes

499
00:29:43,640 --> 00:29:48,710
I haven't done benchmarks with

500
00:29:48,710 --> 00:29:51,200
encryption yet so the all winner chips

501
00:29:51,200 --> 00:29:55,370
include basically offload support for

502
00:29:55,370 --> 00:29:59,809
certain encryption types it's not fully

503
00:29:59,809 --> 00:30:03,170
implemented on the h3 chip I said a 20 I

504
00:30:03,170 --> 00:30:06,049
think was done the h3 is still working

505
00:30:06,049 --> 00:30:09,100
progress from the upstream some C guys

506
00:30:09,100 --> 00:30:13,280
but yeah I think once that's done it

507
00:30:13,280 --> 00:30:14,720
shouldn't be too much of a performance

508
00:30:14,720 --> 00:30:17,049
penalty

509
00:30:29,340 --> 00:30:32,330
you're

510
00:30:39,740 --> 00:30:43,130
so the question was have I considered

511
00:30:43,130 --> 00:30:47,809
using a much smaller Linux distribution

512
00:30:47,809 --> 00:30:50,789
yeah I work for Caesars obviously

513
00:30:50,789 --> 00:30:54,630
playing with openSUSE is something I

514
00:30:54,630 --> 00:31:00,030
like doing but that said I could also so

515
00:31:00,030 --> 00:31:01,950
I I mentioned I had it running from in a

516
00:31:01,950 --> 00:31:06,150
tram FS on openSUSE so I could also just

517
00:31:06,150 --> 00:31:08,940
build this in a tram FS and do

518
00:31:08,940 --> 00:31:10,470
everything from that in that case that

519
00:31:10,470 --> 00:31:14,159
was also like 15 megabytes with

520
00:31:14,159 --> 00:31:16,200
everything on there to run this project

521
00:31:16,200 --> 00:31:19,679
so it certainly is possible to use yeah

522
00:31:19,679 --> 00:31:23,700
minimal setup and yeah run everything

523
00:31:23,700 --> 00:31:30,830
very quickly yes yes

524
00:31:40,580 --> 00:31:43,890
yeah yeah well that's so this is a

525
00:31:43,890 --> 00:31:47,570
problem with any USD storage right

526
00:31:47,570 --> 00:31:49,860
normally I think most hosts are

527
00:31:49,860 --> 00:31:53,700
configured to do a synchronous i/o to

528
00:31:53,700 --> 00:31:58,020
the USD storage you should always check

529
00:31:58,020 --> 00:32:01,320
the device before you unplug same goes

530
00:32:01,320 --> 00:32:03,480
for any other USB key so I don't think

531
00:32:03,480 --> 00:32:05,850
it differs too much in that regard from

532
00:32:05,850 --> 00:32:15,080
a regular USB key yes network outages

533
00:32:15,290 --> 00:32:23,070
yeah but this is completely synchronous

534
00:32:23,070 --> 00:32:27,900
on the gateway side so yeah it's not

535
00:32:27,900 --> 00:32:30,570
buffering anything so if you basically

536
00:32:30,570 --> 00:32:32,880
if you lose network access and you won't

537
00:32:32,880 --> 00:32:35,970
get successful successful iOS on the USB

538
00:32:35,970 --> 00:32:38,180
side

539
00:32:50,190 --> 00:32:53,380
so any USB requests won't be

540
00:32:53,380 --> 00:32:55,690
acknowledged as successful until it's

541
00:32:55,690 --> 00:32:57,700
basically reached the safe storage and

542
00:32:57,700 --> 00:32:59,740
then say if obviously does it's magic

543
00:32:59,740 --> 00:33:02,590
for replication of the back end once the

544
00:33:02,590 --> 00:33:05,680
Gateway has a completion then it will

545
00:33:05,680 --> 00:33:08,830
finally acknowledge to the USB host that

546
00:33:08,830 --> 00:33:13,000
the i/o is successfully complete so yeah

547
00:33:13,000 --> 00:33:14,890
it's really not not doing much in that

548
00:33:14,890 --> 00:33:16,480
regard there's no buffering on the

549
00:33:16,480 --> 00:33:22,530
gateway at this stage I'm more questions

550
00:33:29,900 --> 00:33:32,900
yes

551
00:33:37,590 --> 00:33:40,070
yeah

552
00:33:44,630 --> 00:33:49,760
so so this so the question was how do

553
00:33:49,760 --> 00:33:52,040
you manage accessing the configuration

554
00:33:52,040 --> 00:33:54,860
again this is something Wentz asked

555
00:33:54,860 --> 00:33:58,280
earlier so basically if the board comes

556
00:33:58,280 --> 00:33:59,960
up or the Gateway comes up and can't

557
00:33:59,960 --> 00:34:02,300
access the Ceph cluster using the

558
00:34:02,300 --> 00:34:05,540
configuration that was provided then it

559
00:34:05,540 --> 00:34:08,719
returns to exposing a configuration file

560
00:34:08,719 --> 00:34:10,909
system and actually it also copies the

561
00:34:10,909 --> 00:34:13,280
log onto the config file system which is

562
00:34:13,280 --> 00:34:15,440
for debugging quite cool so you can see

563
00:34:15,440 --> 00:34:16,790
okay

564
00:34:16,790 --> 00:34:18,620
it processes the confit couldn't connect

565
00:34:18,620 --> 00:34:20,600
to the SEF cluster or the image isn't

566
00:34:20,600 --> 00:34:23,659
there this is the area where I get and

567
00:34:23,659 --> 00:34:25,489
then yeah you can reconfigure your your

568
00:34:25,489 --> 00:34:28,209
board at that stage

569
00:34:31,129 --> 00:34:36,389
yeah exactly yes exactly you can you can

570
00:34:36,389 --> 00:34:38,099
boot it without network and then you'll

571
00:34:38,099 --> 00:34:46,498
see your company again yes someone so

572
00:34:46,498 --> 00:34:48,659
the question was whether more than one

573
00:34:48,659 --> 00:34:52,079
the image could be exposed yes at this

574
00:34:52,079 --> 00:34:55,559
stage you saw the config file it's not

575
00:34:55,559 --> 00:34:57,989
really set up to handle apps but yeah it

576
00:34:57,989 --> 00:35:00,749
would be easily doable so you could

577
00:35:00,749 --> 00:35:03,930
expose multiple images the question is

578
00:35:03,930 --> 00:35:05,759
then whether the host supports multiple

579
00:35:05,759 --> 00:35:09,229
lungs or whether say your stereo or

580
00:35:09,229 --> 00:35:11,809
television whether you can then access

581
00:35:11,809 --> 00:35:14,969
say one one or something aside from the

582
00:35:14,969 --> 00:35:18,200
default or the first

583
00:35:22,970 --> 00:35:26,960
any other questions otherwise yes one

584
00:35:26,960 --> 00:35:34,520
last yeah it's actually pretty ugly

585
00:35:34,520 --> 00:35:38,569
shell scripts yeah the reason why I

586
00:35:38,569 --> 00:35:40,280
wrote it in shell was because I was

587
00:35:40,280 --> 00:35:41,690
initially playing around with doing it

588
00:35:41,690 --> 00:35:45,020
from inner daddy in which case there's

589
00:35:45,020 --> 00:35:47,990
no Python there's no Perl is no code I

590
00:35:47,990 --> 00:35:50,359
think at this stage I prefer to rewrite

591
00:35:50,359 --> 00:35:53,390
it in something a little nicer I was

592
00:35:53,390 --> 00:35:55,460
considering maybe a a rust project just

593
00:35:55,460 --> 00:36:01,220
so I can play with brass but yeah so the

594
00:36:01,220 --> 00:36:03,829
the link for the code itself is just a

595
00:36:03,829 --> 00:36:08,869
top link for elasto so this cloud

596
00:36:08,869 --> 00:36:13,609
storage client it's also on github TCM

597
00:36:13,609 --> 00:36:18,170
you runner so this was any Grover's is

598
00:36:18,170 --> 00:36:22,310
the openSUSE link for tumbleweed on a

599
00:36:22,310 --> 00:36:24,829
lot of these arm boards and of course

600
00:36:24,829 --> 00:36:29,930
the sunset community okay

601
00:36:29,930 --> 00:36:31,630
oh thanks for coming

602
00:36:31,630 --> 00:36:38,729
[Applause]

603
00:36:52,689 --> 00:36:59,390
Thanks that's it thank you very much for

604
00:36:59,390 --> 00:37:01,569
that

605
00:37:18,339 --> 00:37:22,130
you could have yeah you could have been

606
00:37:22,130 --> 00:37:25,510
nothing behind yep

607
00:42:26,290 --> 00:42:29,400
[Music]

608
00:43:01,460 --> 00:43:04,519
[Music]

609
00:43:31,220 --> 00:43:34,359
[Music]

610
00:44:29,730 --> 00:44:32,849
[Music]

611
00:45:36,590 --> 00:45:39,699
[Music]

612
00:45:42,680 --> 00:45:47,670
hi thank you very much first of all even

613
00:45:47,670 --> 00:45:49,349
though I have a mic I don't think it's

614
00:45:49,349 --> 00:45:51,239
really amplified well I have a very weak

615
00:45:51,239 --> 00:45:53,849
voice if I need to speak up just wave to

616
00:45:53,849 --> 00:45:56,999
me and already okay boy that'll be

617
00:45:56,999 --> 00:46:00,749
challenged can you hear me

618
00:46:00,749 --> 00:46:02,910
so there's no amplification through mic

619
00:46:02,910 --> 00:46:04,650
I hope at least the video stream can

620
00:46:04,650 --> 00:46:07,559
hear me yes hi there I'd like to give a

621
00:46:07,559 --> 00:46:09,869
small talk about a small project I'm

622
00:46:09,869 --> 00:46:13,349
involved in since July 2015 called open

623
00:46:13,349 --> 00:46:15,719
attic let me dive right in I have

624
00:46:15,719 --> 00:46:18,089
probably way too much slides for the

625
00:46:18,089 --> 00:46:19,949
time I have let's see how far we can

626
00:46:19,949 --> 00:46:25,709
come so basically what does open attic

627
00:46:25,709 --> 00:46:27,329
do what was the vision behind it it

628
00:46:27,329 --> 00:46:31,279
started about six years ago by now and

629
00:46:31,279 --> 00:46:34,859
it started as so many other open-source

630
00:46:34,859 --> 00:46:38,759
project with somebody had to scratch his

631
00:46:38,759 --> 00:46:40,380
own itch because there was a problem

632
00:46:40,380 --> 00:46:42,209
that they need a solution for so they

633
00:46:42,209 --> 00:46:43,529
thought well we can do this by ourselves

634
00:46:43,529 --> 00:46:46,049
they're going with it in this case the

635
00:46:46,049 --> 00:46:48,959
situation was that the company IT Nobel

636
00:46:48,959 --> 00:46:52,499
where were all kinetic evolves from they

637
00:46:52,499 --> 00:46:54,359
were as a spin-off of another company

638
00:46:54,359 --> 00:46:56,160
we're doing data center operations for

639
00:46:56,160 --> 00:47:00,989
them and they needed storage so as you

640
00:47:00,989 --> 00:47:02,640
probably are aware nowadays storage

641
00:47:02,640 --> 00:47:04,799
exceeds the boundaries of hardware much

642
00:47:04,799 --> 00:47:06,949
faster than people can share hardest in

643
00:47:06,949 --> 00:47:10,619
data growth everywhere so and they need

644
00:47:10,619 --> 00:47:12,630
to replace a number of proprietary

645
00:47:12,630 --> 00:47:14,880
storage systems were quite surprised by

646
00:47:14,880 --> 00:47:17,009
the price tags that they were the quotes

647
00:47:17,009 --> 00:47:19,499
that they received so they thought why

648
00:47:19,499 --> 00:47:22,410
can't we do this differently and if you

649
00:47:22,410 --> 00:47:24,959
look at it a Linux distribution nowadays

650
00:47:24,959 --> 00:47:26,519
gives you everything you need to set up

651
00:47:26,519 --> 00:47:28,529
a fully fledged storage system you just

652
00:47:28,529 --> 00:47:31,349
buy cheap commodity hardware shop and

653
00:47:31,349 --> 00:47:33,059
lots of hard disks and you have a server

654
00:47:33,059 --> 00:47:35,660
that fulfills most of the common needs

655
00:47:35,660 --> 00:47:38,699
so the idea was okay Linux by itself is

656
00:47:38,699 --> 00:47:40,109
good it has everything but you need

657
00:47:40,109 --> 00:47:42,229
something on top that makes a bit more

658
00:47:42,229 --> 00:47:45,089
approachable easier to manage and unify

659
00:47:45,089 --> 00:47:47,999
it because in many in many cases you

660
00:47:47,999 --> 00:47:49,680
have administrators that might

661
00:47:49,680 --> 00:47:51,780
be familiar with using a UI but they are

662
00:47:51,780 --> 00:47:54,210
not that familiar the command line so

663
00:47:54,210 --> 00:47:56,190
open ethics vision really was to to give

664
00:47:56,190 --> 00:47:58,860
a a more friendly user interface and a

665
00:47:58,860 --> 00:48:00,900
unified experience to managing all kinds

666
00:48:00,900 --> 00:48:05,240
of storage storage here meaning both

667
00:48:05,240 --> 00:48:08,550
what is usually called masters of fire

668
00:48:08,550 --> 00:48:11,640
based like sambar or NFS but also

669
00:48:11,640 --> 00:48:13,260
block-based storage protocols

670
00:48:13,260 --> 00:48:15,000
particularly I scuzzy would be an

671
00:48:15,000 --> 00:48:20,850
example here and later on during the

672
00:48:20,850 --> 00:48:22,890
lifecycle of open attic they also

673
00:48:22,890 --> 00:48:25,620
realize that single server instances or

674
00:48:25,620 --> 00:48:27,660
even multi nodes configurations can't

675
00:48:27,660 --> 00:48:29,630
keep up with the storage requirements

676
00:48:29,630 --> 00:48:32,580
and the developers looked around and

677
00:48:32,580 --> 00:48:34,200
figured out that Seth might be quite a

678
00:48:34,200 --> 00:48:35,550
nice alternative here which is a

679
00:48:35,550 --> 00:48:38,490
distributed storage system in which you

680
00:48:38,490 --> 00:48:40,500
not just have a single server body add

681
00:48:40,500 --> 00:48:42,240
more disk but you simply throw in more

682
00:48:42,240 --> 00:48:44,340
servers or even complete racks if you

683
00:48:44,340 --> 00:48:46,530
need more storage and said pretty much

684
00:48:46,530 --> 00:48:48,600
organizes itself to make use of the

685
00:48:48,600 --> 00:48:50,340
storage tree and ensure the redundancy

686
00:48:50,340 --> 00:48:53,640
and make sure yeah its gifts along with

687
00:48:53,640 --> 00:48:57,450
the hardware that you give it to him so

688
00:48:57,450 --> 00:48:59,160
it started as an in-house project and

689
00:48:59,160 --> 00:49:01,740
later became an open-source product I

690
00:49:01,740 --> 00:49:04,380
would call it the idea behind it was

691
00:49:04,380 --> 00:49:06,900
that there was an enterprise version in

692
00:49:06,900 --> 00:49:08,820
the community version and that the

693
00:49:08,820 --> 00:49:10,620
company would then sell licenses with

694
00:49:10,620 --> 00:49:13,230
added support and other value on top to

695
00:49:13,230 --> 00:49:14,490
monetize on the software

696
00:49:14,490 --> 00:49:19,680
um interestingly that didn't really work

697
00:49:19,680 --> 00:49:23,280
out so when I joined the company in June

698
00:49:23,280 --> 00:49:26,850
July 2015 we made a number of drastic

699
00:49:26,850 --> 00:49:28,920
changes to how often addict was governed

700
00:49:28,920 --> 00:49:32,070
and managed and yeah run as a project

701
00:49:32,070 --> 00:49:35,400
before that basically the developers all

702
00:49:35,400 --> 00:49:37,890
work in-house at the company and the

703
00:49:37,890 --> 00:49:40,410
development took place like with many

704
00:49:40,410 --> 00:49:42,840
proprietary products very internally

705
00:49:42,840 --> 00:49:45,150
faced and every once in a while they

706
00:49:45,150 --> 00:49:47,100
released the community version but there

707
00:49:47,100 --> 00:49:48,750
wasn't really a community around it so

708
00:49:48,750 --> 00:49:51,080
there wasn't an infrastructure that was

709
00:49:51,080 --> 00:49:53,970
inviting for users to come and work with

710
00:49:53,970 --> 00:49:56,580
the project so that's something that

711
00:49:56,580 --> 00:50:00,750
we've changed drastically also we we got

712
00:50:00,750 --> 00:50:02,650
rid of the dual licensing that was

713
00:50:02,650 --> 00:50:06,040
place back then the the Enterprise

714
00:50:06,040 --> 00:50:08,170
Edition had a few additional bits on top

715
00:50:08,170 --> 00:50:10,030
that you would have to pay for all of

716
00:50:10,030 --> 00:50:12,070
this was folded into a single code we

717
00:50:12,070 --> 00:50:14,670
released under the GPL and went ahead

718
00:50:14,670 --> 00:50:16,630
since then there's no distinction

719
00:50:16,630 --> 00:50:18,700
between enterprises communities just or

720
00:50:18,700 --> 00:50:22,000
fnatic going forward we also got rid of

721
00:50:22,000 --> 00:50:24,010
the requirement for contributors signing

722
00:50:24,010 --> 00:50:25,630
a contributor license agreement so

723
00:50:25,630 --> 00:50:28,270
similar to self basically if you

724
00:50:28,270 --> 00:50:29,920
contribute to open attic all we require

725
00:50:29,920 --> 00:50:32,860
is that you add a sign of line to your

726
00:50:32,860 --> 00:50:34,570
commit message similar to how the Linux

727
00:50:34,570 --> 00:50:36,370
kernel and many other open source source

728
00:50:36,370 --> 00:50:37,600
projects do it nowadays

729
00:50:37,600 --> 00:50:42,940
so the the bar for contributing code is

730
00:50:42,940 --> 00:50:44,980
much lower than nowadays and that was

731
00:50:44,980 --> 00:50:47,980
really noticeable by the yeah just the

732
00:50:47,980 --> 00:50:49,150
amount and the growth of the community

733
00:50:49,150 --> 00:50:53,320
that we've seen since then we also

734
00:50:53,320 --> 00:50:55,150
opened up a lot of other things that

735
00:50:55,150 --> 00:50:56,830
used to be internal most popular of

736
00:50:56,830 --> 00:50:59,050
course is the bug tracker we are based

737
00:50:59,050 --> 00:51:01,840
on Atlassian JIRA and we now have a

738
00:51:01,840 --> 00:51:03,670
publicly hosted JIRA incident that's

739
00:51:03,670 --> 00:51:07,060
fully open so you can really see all the

740
00:51:07,060 --> 00:51:09,670
issues or roadmap planning everything is

741
00:51:09,670 --> 00:51:11,470
translated open you can leave comments

742
00:51:11,470 --> 00:51:13,360
you can vote on it you can submit back

743
00:51:13,360 --> 00:51:14,920
reports like you would expect from any

744
00:51:14,920 --> 00:51:18,280
other open source project we also

745
00:51:18,280 --> 00:51:20,200
changed the way of how we work on the

746
00:51:20,200 --> 00:51:22,960
code we now make much more use of

747
00:51:22,960 --> 00:51:24,610
different code branches we have

748
00:51:24,610 --> 00:51:26,830
established a process for performing

749
00:51:26,830 --> 00:51:28,690
pull requests and doing commenting on

750
00:51:28,690 --> 00:51:31,690
them these were all things that were

751
00:51:31,690 --> 00:51:33,640
quite new to the open attic developer so

752
00:51:33,640 --> 00:51:36,460
we learned as we go along and it's a

753
00:51:36,460 --> 00:51:38,890
process that now basically there's no

754
00:51:38,890 --> 00:51:41,320
difference if you are paid for working

755
00:51:41,320 --> 00:51:42,580
on phonetic or if you're a community

756
00:51:42,580 --> 00:51:44,530
contributor it's all going through the

757
00:51:44,530 --> 00:51:46,440
same procedures same requirements and

758
00:51:46,440 --> 00:51:51,220
same expectations we also switch the

759
00:51:51,220 --> 00:51:53,170
list model nowadays we try to come up

760
00:51:53,170 --> 00:51:54,880
with in new open edit release at least

761
00:51:54,880 --> 00:51:56,680
once per month roughly every four five

762
00:51:56,680 --> 00:52:00,730
six four to five weeks and we have

763
00:52:00,730 --> 00:52:02,500
nightly builds if you're curious so if

764
00:52:02,500 --> 00:52:04,060
you are looking for testing a new

765
00:52:04,060 --> 00:52:05,680
feature that has just been committed you

766
00:52:05,680 --> 00:52:07,680
don't want to wait for the next release

767
00:52:07,680 --> 00:52:12,220
just take a nightly build um yeah with

768
00:52:12,220 --> 00:52:15,070
regards to feature developments we have

769
00:52:15,070 --> 00:52:16,510
kind of like a train model

770
00:52:16,510 --> 00:52:18,940
basically people work in parallel on

771
00:52:18,940 --> 00:52:21,220
features and once they are ready and

772
00:52:21,220 --> 00:52:22,330
they've passed the review and have

773
00:52:22,330 --> 00:52:23,950
passed all the tests then they will be

774
00:52:23,950 --> 00:52:26,380
merge into the development branch that

775
00:52:26,380 --> 00:52:28,750
will eventually become the next release

776
00:52:28,750 --> 00:52:31,450
but if a developer doesn't make it in

777
00:52:31,450 --> 00:52:32,860
time since we are in a monthly cycle

778
00:52:32,860 --> 00:52:34,780
there's not just a really long period

779
00:52:34,780 --> 00:52:36,850
before he has another opportunity to get

780
00:52:36,850 --> 00:52:39,250
a stuff merged in so that really helped

781
00:52:39,250 --> 00:52:40,690
accelerating the whole development

782
00:52:40,690 --> 00:52:42,850
process and making changes to the

783
00:52:42,850 --> 00:52:44,430
project

784
00:52:44,430 --> 00:52:48,580
also in the beginning many different

785
00:52:48,580 --> 00:52:50,950
components were managed in separate code

786
00:52:50,950 --> 00:52:53,020
repositories so like the documentation

787
00:52:53,020 --> 00:52:54,970
was in one repo tests were in another

788
00:52:54,970 --> 00:52:57,580
one and integrating them and getting

789
00:52:57,580 --> 00:52:59,110
them aligned was always a bit of a

790
00:52:59,110 --> 00:53:00,790
challenge so we simply lumped all of

791
00:53:00,790 --> 00:53:02,920
these repos together into one single

792
00:53:02,920 --> 00:53:05,380
repo which now means that you could

793
00:53:05,380 --> 00:53:08,200
basically no can work on a feature write

794
00:53:08,200 --> 00:53:10,330
the documentation create the tests and

795
00:53:10,330 --> 00:53:11,740
have them all in the single branch and

796
00:53:11,740 --> 00:53:13,330
commit and merge them at the same time

797
00:53:13,330 --> 00:53:15,340
so it's it's much more easy to keep

798
00:53:15,340 --> 00:53:18,780
tracking and keep the stuff synchronized

799
00:53:18,780 --> 00:53:22,510
a few key aspects of our phonetic we are

800
00:53:22,510 --> 00:53:23,740
well aware that we're not alone

801
00:53:23,740 --> 00:53:25,360
especially when it comes to storage

802
00:53:25,360 --> 00:53:27,010
management there are quite a number of

803
00:53:27,010 --> 00:53:28,900
projects out there that do similar

804
00:53:28,900 --> 00:53:32,290
things that we do so we try to come up

805
00:53:32,290 --> 00:53:35,050
with a few yeah cornerstones of what we

806
00:53:35,050 --> 00:53:38,140
would like to focus on primarily the

807
00:53:38,140 --> 00:53:40,570
goal is storage management and Storage

808
00:53:40,570 --> 00:53:42,700
Management only you see many projects

809
00:53:42,700 --> 00:53:44,560
that start also doing things like

810
00:53:44,560 --> 00:53:48,190
managing containers or plugins so there

811
00:53:48,190 --> 00:53:50,410
mum sometimes more aimed at home users

812
00:53:50,410 --> 00:53:52,540
that want to have an appliance somewhere

813
00:53:52,540 --> 00:53:54,220
in the corner that isn't just a file

814
00:53:54,220 --> 00:53:55,960
server but maybe also an own cloud

815
00:53:55,960 --> 00:53:57,880
instance or provides a BitTorrent server

816
00:53:57,880 --> 00:54:01,120
or what have not this is currently fully

817
00:54:01,120 --> 00:54:03,150
out of scope so we really focus just on

818
00:54:03,150 --> 00:54:05,740
managing your storage and exposing it

819
00:54:05,740 --> 00:54:08,880
through various protocols and embedded

820
00:54:08,880 --> 00:54:11,110
yeah such support is something that

821
00:54:11,110 --> 00:54:12,880
we've added recently that's quite

822
00:54:12,880 --> 00:54:17,430
noticeable of course we're fully gplv2

823
00:54:17,430 --> 00:54:20,320
no arbitrary functional restrictions so

824
00:54:20,320 --> 00:54:22,810
there are a lot of free storage

825
00:54:22,810 --> 00:54:24,340
management systems that you can download

826
00:54:24,340 --> 00:54:26,530
and use but they apply some form of

827
00:54:26,530 --> 00:54:28,960
limitation on you for example for the

828
00:54:28,960 --> 00:54:29,809
amount of data

829
00:54:29,809 --> 00:54:31,189
you can store in it or the amount of

830
00:54:31,189 --> 00:54:33,289
concurrent use or what have not and if

831
00:54:33,289 --> 00:54:34,969
you reach that limit here all the sudden

832
00:54:34,969 --> 00:54:37,400
need to buy a license or pay for for

833
00:54:37,400 --> 00:54:39,799
getting over that barrier that's not the

834
00:54:39,799 --> 00:54:41,449
case with the open attic you are free to

835
00:54:41,449 --> 00:54:43,819
do with it whatever you want in what

836
00:54:43,819 --> 00:54:47,719
sizes you want to use it we're based on

837
00:54:47,719 --> 00:54:49,910
standard Linux tools as I said most

838
00:54:49,910 --> 00:54:52,910
distributions provide all the frameworks

839
00:54:52,910 --> 00:54:54,469
and tools that you need to set up such a

840
00:54:54,469 --> 00:54:56,839
system by default it's just a matter of

841
00:54:56,839 --> 00:54:58,819
orchestrating them and making them more

842
00:54:58,819 --> 00:55:00,920
accessible to the user and that's the

843
00:55:00,920 --> 00:55:03,799
the part that we're taking on we try

844
00:55:03,799 --> 00:55:05,599
hard to support multiple Ennis

845
00:55:05,599 --> 00:55:09,529
distributions originally open etic came

846
00:55:09,529 --> 00:55:12,109
from the Debian corner so we started

847
00:55:12,109 --> 00:55:13,640
with there been added to bun too later

848
00:55:13,640 --> 00:55:17,660
on since two years ago we started adding

849
00:55:17,660 --> 00:55:21,339
rpms for cent OS and Enterprise Linux

850
00:55:21,339 --> 00:55:25,959
and it's souza as well and this gives us

851
00:55:25,959 --> 00:55:28,789
an opportunity compared to some other

852
00:55:28,789 --> 00:55:30,349
storage management systems that

853
00:55:30,349 --> 00:55:32,660
sometimes are based on non Linux

854
00:55:32,660 --> 00:55:37,009
operating systems one key concern that

855
00:55:37,009 --> 00:55:39,079
sometimes comes up here is this hardware

856
00:55:39,079 --> 00:55:41,929
support that most vendors have pretty

857
00:55:41,929 --> 00:55:43,789
solid support when it comes to providing

858
00:55:43,789 --> 00:55:46,219
Linux drivers in the server space but if

859
00:55:46,219 --> 00:55:48,709
you're getting into non Linux but UNIX

860
00:55:48,709 --> 00:55:50,119
the operating systems the driver

861
00:55:50,119 --> 00:55:51,739
situation can sometimes be a bit more

862
00:55:51,739 --> 00:55:54,890
challenging so that that usually helps

863
00:55:54,890 --> 00:55:57,829
us to get adoption we don't enforce a

864
00:55:57,829 --> 00:56:00,140
choice of Linux distribution on you you

865
00:56:00,140 --> 00:56:02,689
can basically use what you feel familiar

866
00:56:02,689 --> 00:56:04,189
with as the base platform and can put

867
00:56:04,189 --> 00:56:10,309
open adding on top okay what can we do

868
00:56:10,309 --> 00:56:12,650
so far what's the functionality of

869
00:56:12,650 --> 00:56:16,339
automatic like so basically the

870
00:56:16,339 --> 00:56:18,019
technology consists of two separate

871
00:56:18,019 --> 00:56:19,910
components the the most noticeable one

872
00:56:19,910 --> 00:56:22,809
is the the web GUI that is what you see

873
00:56:22,809 --> 00:56:25,189
with open attic version two all that

874
00:56:25,189 --> 00:56:26,630
started about two and a half years ago

875
00:56:26,630 --> 00:56:29,989
we switched from an XJS based to an

876
00:56:29,989 --> 00:56:33,079
angularjs based from web front-end so we

877
00:56:33,079 --> 00:56:36,140
use javascript libraries to make the UI

878
00:56:36,140 --> 00:56:40,809
yeah visually appealing and easy to use

879
00:56:40,809 --> 00:56:43,490
the backend is the other component

880
00:56:43,490 --> 00:56:46,130
which has a RESTful API it's also a new

881
00:56:46,130 --> 00:56:47,750
addition in version 2 that we're working

882
00:56:47,750 --> 00:56:51,170
on the former version one at X was using

883
00:56:51,170 --> 00:56:54,890
XML RPC so the RESTful API makes it a

884
00:56:54,890 --> 00:56:57,560
bit more easier to talk to with the

885
00:56:57,560 --> 00:56:59,690
backend and the web and provident only

886
00:56:59,690 --> 00:57:01,550
uses the REST API so everything that you

887
00:57:01,550 --> 00:57:03,590
can accomplish by by the web interface

888
00:57:03,590 --> 00:57:06,619
can also be accomplished by calling REST

889
00:57:06,619 --> 00:57:10,670
API calls yeah and with regards to

890
00:57:10,670 --> 00:57:13,940
storage we provide the usual suspects in

891
00:57:13,940 --> 00:57:15,800
in its simplest form and and and we're

892
00:57:15,800 --> 00:57:20,140
open etic comes from that you have

893
00:57:21,830 --> 00:57:24,320
rupees hard disk with the logical volume

894
00:57:24,320 --> 00:57:27,530
manager LVM into at the storage pool and

895
00:57:27,530 --> 00:57:29,810
we also support the ZFS file system or

896
00:57:29,810 --> 00:57:33,650
the butterfly system if you prefer so we

897
00:57:33,650 --> 00:57:36,080
you have a basic storage unit which is

898
00:57:36,080 --> 00:57:38,180
the storage pool and open data can then

899
00:57:38,180 --> 00:57:41,150
be used to carve out volumes out of that

900
00:57:41,150 --> 00:57:46,370
pool based on your requirements we will

901
00:57:46,370 --> 00:57:49,730
support a number of file systems as I

902
00:57:49,730 --> 00:57:51,500
said ZFS is one of the fastest we

903
00:57:51,500 --> 00:57:52,130
support

904
00:57:52,130 --> 00:57:54,440
butterface for other use cases so you

905
00:57:54,440 --> 00:57:56,720
can really choose how to configure

906
00:57:56,720 --> 00:57:58,520
storage for the workload at hand that

907
00:57:58,520 --> 00:58:02,660
you want to serve we have the process of

908
00:58:02,660 --> 00:58:05,960
adding support for MD IBD the

909
00:58:05,960 --> 00:58:08,570
distributed replicated block device so

910
00:58:08,570 --> 00:58:10,430
in a multi node setup where you have

911
00:58:10,430 --> 00:58:13,310
let's say two automatic instances you

912
00:58:13,310 --> 00:58:15,620
can configure that a volume that you

913
00:58:15,620 --> 00:58:17,000
create on the one node will be

914
00:58:17,000 --> 00:58:19,070
replicated synchronously to the second

915
00:58:19,070 --> 00:58:21,740
node for redundancy purposes the

916
00:58:21,740 --> 00:58:23,150
back-end support has been in place for

917
00:58:23,150 --> 00:58:25,550
quite a while already and we're now in

918
00:58:25,550 --> 00:58:28,520
the final stretch of finishing the UI

919
00:58:28,520 --> 00:58:31,190
part of that as well so that's a pull

920
00:58:31,190 --> 00:58:33,320
request that's really getting close to

921
00:58:33,320 --> 00:58:36,680
review now we also do starch monitoring

922
00:58:36,680 --> 00:58:40,040
in the backend so one of the things if

923
00:58:40,040 --> 00:58:42,500
you of course as I said you can just use

924
00:58:42,500 --> 00:58:45,080
Linux and set up a share and create a

925
00:58:45,080 --> 00:58:46,930
small file server by yourself but

926
00:58:46,930 --> 00:58:49,340
something something that usually gets

927
00:58:49,340 --> 00:58:51,260
forgotten during that process is making

928
00:58:51,260 --> 00:58:52,700
sure that the storage is properly

929
00:58:52,700 --> 00:58:55,100
monitored and then your users become

930
00:58:55,100 --> 00:58:56,720
your monitoring system because they will

931
00:58:56,720 --> 00:58:59,290
scream once their disk grunts for

932
00:58:59,290 --> 00:59:01,430
automatic basically automates this

933
00:59:01,430 --> 00:59:03,260
process so each time you create a new

934
00:59:03,260 --> 00:59:05,300
volume will also reconfigure the

935
00:59:05,300 --> 00:59:07,040
monitoring framework in the background

936
00:59:07,040 --> 00:59:08,720
to make sure that it's being tracked and

937
00:59:08,720 --> 00:59:13,460
you see the utilization and then as I

938
00:59:13,460 --> 00:59:15,440
said local storage is way open and it

939
00:59:15,440 --> 00:59:17,630
comes from with the addition of Ceph we

940
00:59:17,630 --> 00:59:22,850
are now starting to make yeah we want to

941
00:59:22,850 --> 00:59:24,830
add functionality that makes it easy to

942
00:59:24,830 --> 00:59:27,470
manage the self cluster to create new

943
00:59:27,470 --> 00:59:30,410
storage objects like block devices or

944
00:59:30,410 --> 00:59:32,390
new safe pools also start doing

945
00:59:32,390 --> 00:59:34,640
monitoring so you get an insight of how

946
00:59:34,640 --> 00:59:35,600
yourself cluster

947
00:59:35,600 --> 00:59:37,220
doing this is the functionality that we

948
00:59:37,220 --> 00:59:40,550
know most actively working on at the

949
00:59:40,550 --> 00:59:46,010
moment and this combined with the the

950
00:59:46,010 --> 00:59:47,690
the recent changes that I've just talked

951
00:59:47,690 --> 00:59:49,430
about with opening the project was

952
00:59:49,430 --> 00:59:52,370
something that Sousa got curious and we

953
00:59:52,370 --> 00:59:54,140
had a development partnership with Sousa

954
00:59:54,140 --> 00:59:57,740
for the entire last year basically we

955
00:59:57,740 --> 00:59:59,510
worked together with Sousa developers on

956
00:59:59,510 --> 01:00:02,510
advancing the set functionality and in

957
01:00:02,510 --> 01:00:05,630
November Sousa agreed on acquiring the

958
01:00:05,630 --> 01:00:07,850
team and the project from IT novum we're

959
01:00:07,850 --> 01:00:10,340
now part of Sousa since then but this

960
01:00:10,340 --> 01:00:11,930
doesn't really mean that we will now

961
01:00:11,930 --> 01:00:13,190
ditch support for the other

962
01:00:13,190 --> 01:00:14,810
distributions there are no intentions to

963
01:00:14,810 --> 01:00:16,550
change how the project is being run and

964
01:00:16,550 --> 01:00:20,300
gathered so components this is it we

965
01:00:20,300 --> 01:00:24,470
have on the one hand back-end as you can

966
01:00:24,470 --> 01:00:26,930
see we're using pretty boring technology

967
01:00:26,930 --> 01:00:29,150
here bread-and-butter stuff this is by

968
01:00:29,150 --> 01:00:31,100
intention because since we need to

969
01:00:31,100 --> 01:00:33,050
support multiple distributions we need

970
01:00:33,050 --> 01:00:35,180
to figure out ok what's the common to

971
01:00:35,180 --> 01:00:37,730
says that we can use if you start making

972
01:00:37,730 --> 01:00:39,980
choices that are not available in all of

973
01:00:39,980 --> 01:00:42,140
on any of the distributions it would be

974
01:00:42,140 --> 01:00:45,170
difficult to support it over there so

975
01:00:45,170 --> 01:00:47,000
the the automatic back-end is written in

976
01:00:47,000 --> 01:00:50,210
Jungle it's a Python application usually

977
01:00:50,210 --> 01:00:52,370
prepare jungle is used as an application

978
01:00:52,370 --> 01:00:54,740
server for yeah let's say web shops or

979
01:00:54,740 --> 01:00:56,570
something like that but it turns out

980
01:00:56,570 --> 01:01:00,830
that the whole way how jungle organizes

981
01:01:00,830 --> 01:01:02,480
data and how its structured with jungle

982
01:01:02,480 --> 01:01:04,300
models makes it a very suitable

983
01:01:04,300 --> 01:01:06,410
framework for something like a storage

984
01:01:06,410 --> 01:01:10,330
management system as well and basically

985
01:01:10,330 --> 01:01:12,740
John was the abstraction layer and

986
01:01:12,740 --> 01:01:14,450
underneath we are calling the regular

987
01:01:14,450 --> 01:01:17,540
Linux tools that an administrator will

988
01:01:17,540 --> 01:01:19,250
all see you so for example if you create

989
01:01:19,250 --> 01:01:22,820
a new volume we are calling BG create or

990
01:01:22,820 --> 01:01:26,150
L we create mkfs all the steps that you

991
01:01:26,150 --> 01:01:28,250
as an administrator would have to

992
01:01:28,250 --> 01:01:30,140
perform step by step to come to the same

993
01:01:30,140 --> 01:01:34,730
goal MRR automated bio phonetic for the

994
01:01:34,730 --> 01:01:36,380
monitoring we currently are based on

995
01:01:36,380 --> 01:01:38,780
Argus or a singer and using PNP for

996
01:01:38,780 --> 01:01:41,690
nagas for the grafts which we are

997
01:01:41,690 --> 01:01:43,150
storing in our default they have a

998
01:01:43,150 --> 01:01:44,750
picture about that

999
01:01:44,750 --> 01:01:47,130
when it comes to safe

1000
01:01:47,130 --> 01:01:49,589
the the current functionality is using

1001
01:01:49,589 --> 01:01:52,289
liberator so basically the become an API

1002
01:01:52,289 --> 01:01:53,970
that is used to talk with a safe cluster

1003
01:01:53,970 --> 01:01:57,589
to obtain information or to to issue

1004
01:01:57,589 --> 01:02:00,749
administrative commands and we're now in

1005
01:02:00,749 --> 01:02:02,940
the process of doing more than just

1006
01:02:02,940 --> 01:02:04,710
talking to an existing self-test that we

1007
01:02:04,710 --> 01:02:06,569
would like to be able to also set up and

1008
01:02:06,569 --> 01:02:09,089
configure and manage a cluster and this

1009
01:02:09,089 --> 01:02:12,089
is where salt comes into place soldiers

1010
01:02:12,089 --> 01:02:14,400
and yeah and deployment and automation

1011
01:02:14,400 --> 01:02:17,759
framework and Sue's is also working on

1012
01:02:17,759 --> 01:02:20,489
safe specific management functionality

1013
01:02:20,489 --> 01:02:22,289
based on salt that's a project called

1014
01:02:22,289 --> 01:02:25,470
deep sea and there's a talk by Yann

1015
01:02:25,470 --> 01:02:27,779
later on in this room at 3 p.m. she want

1016
01:02:27,779 --> 01:02:30,089
to learn more about it

1017
01:02:30,089 --> 01:02:32,509
yeah the web front-end as I said

1018
01:02:32,509 --> 01:02:36,299
angularjs bootstrap also pretty well in

1019
01:02:36,299 --> 01:02:38,009
in web developer terms pretty boring

1020
01:02:38,009 --> 01:02:40,170
stuff by now but it gets the job done

1021
01:02:40,170 --> 01:02:44,640
and yeah we are working on improving the

1022
01:02:44,640 --> 01:02:46,920
functionality and adding more every day

1023
01:02:46,920 --> 01:02:50,460
basically we also put a strong emphasis

1024
01:02:50,460 --> 01:02:53,549
on testing so each commit or each new

1025
01:02:53,549 --> 01:02:55,529
functionality is supposed to be

1026
01:02:55,529 --> 01:02:57,660
accompanied by a number of tests we

1027
01:02:57,660 --> 01:03:00,329
tests on three different layers

1028
01:03:00,329 --> 01:03:02,630
basically we have Python unit tests

1029
01:03:02,630 --> 01:03:05,729
where we use the the jungle unit rest

1030
01:03:05,729 --> 01:03:09,529
framework the entire application is

1031
01:03:09,529 --> 01:03:12,479
tested through a test suit that is named

1032
01:03:12,479 --> 01:03:14,849
Gatling that we developed ourselves in

1033
01:03:14,849 --> 01:03:17,759
which it calls the REST API directly and

1034
01:03:17,759 --> 01:03:20,039
automates the testing on that level and

1035
01:03:20,039 --> 01:03:23,099
we also have automated tests for the

1036
01:03:23,099 --> 01:03:25,589
full web UI based on protractor Jasmine

1037
01:03:25,589 --> 01:03:27,630
where you basically are remote

1038
01:03:27,630 --> 01:03:29,999
controlling a web browser to simulate

1039
01:03:29,999 --> 01:03:32,069
clicks on the UI and you check if the

1040
01:03:32,069 --> 01:03:35,630
web UI gives you the expected results

1041
01:03:35,630 --> 01:03:39,630
that's the architecture from in a visual

1042
01:03:39,630 --> 01:03:41,009
point of view so you have the jungle

1043
01:03:41,009 --> 01:03:44,700
application in the middle some data is

1044
01:03:44,700 --> 01:03:48,180
persisted in the Postgres database if

1045
01:03:48,180 --> 01:03:49,729
you want to set up a multi node

1046
01:03:49,729 --> 01:03:52,440
automatic system the only thing that it

1047
01:03:52,440 --> 01:03:53,940
needs to be shared is the Postgres

1048
01:03:53,940 --> 01:03:55,650
database so if you have a second node

1049
01:03:55,650 --> 01:03:57,660
you connect them both to the same

1050
01:03:57,660 --> 01:03:59,789
Postgres database and then you can use

1051
01:03:59,789 --> 01:04:00,960
one web

1052
01:04:00,960 --> 01:04:02,940
you IFO kinetic to manage your two notes

1053
01:04:02,940 --> 01:04:08,040
together since the Jenga application

1054
01:04:08,040 --> 01:04:10,280
doesn't have root privileges we have a

1055
01:04:10,280 --> 01:04:13,440
separate process which is called the

1056
01:04:13,440 --> 01:04:16,260
open attic system D which can should not

1057
01:04:16,260 --> 01:04:17,700
be confused with Leonard pattering

1058
01:04:17,700 --> 01:04:20,940
system D it's a coincidence but this is

1059
01:04:20,940 --> 01:04:22,740
a root process that communicates with

1060
01:04:22,740 --> 01:04:24,359
the jungle applications through D bus

1061
01:04:24,359 --> 01:04:27,119
and performs the actual shell commands

1062
01:04:27,119 --> 01:04:29,220
that will get you to the required

1063
01:04:29,220 --> 01:04:31,619
results like creating a volume creating

1064
01:04:31,619 --> 01:04:33,530
a file system setting up and share and

1065
01:04:33,530 --> 01:04:35,880
you can basically take a look at the

1066
01:04:35,880 --> 01:04:37,560
command log of system leaders to take

1067
01:04:37,560 --> 01:04:38,880
check all the commands that we are

1068
01:04:38,880 --> 01:04:42,390
issuing to get the job done with regards

1069
01:04:42,390 --> 01:04:44,609
to communicating with a safe cluster as

1070
01:04:44,609 --> 01:04:46,440
a set currently this is mostly based on

1071
01:04:46,440 --> 01:04:49,560
librar asleep are reading this is a

1072
01:04:49,560 --> 01:04:51,900
quick overview of how the monitoring

1073
01:04:51,900 --> 01:04:56,250
takes place again the system ba doesn't

1074
01:04:56,250 --> 01:04:59,310
only configure the storage itself but it

1075
01:04:59,310 --> 01:05:03,839
also uses ginger and creates Maggie's

1076
01:05:03,839 --> 01:05:05,520
configuration files based on templates

1077
01:05:05,520 --> 01:05:07,950
and then then restarts Nagios to make

1078
01:05:07,950 --> 01:05:11,490
sure that the new starch objects are

1079
01:05:11,490 --> 01:05:14,910
being properly monitored PMP for nargis

1080
01:05:14,910 --> 01:05:16,619
does this information in round-robin

1081
01:05:16,619 --> 01:05:19,349
databases and then we use the backend to

1082
01:05:19,349 --> 01:05:21,960
take out that information to visualize

1083
01:05:21,960 --> 01:05:26,700
it right now this is used with our D

1084
01:05:26,700 --> 01:05:29,730
tool which creates P and G graphs and

1085
01:05:29,730 --> 01:05:32,849
force F we are also using our ad tool to

1086
01:05:32,849 --> 01:05:35,490
export JSON data and the rendering takes

1087
01:05:35,490 --> 01:05:37,589
place on the web UI instead of just

1088
01:05:37,589 --> 01:05:39,300
displaying static pngs

1089
01:05:39,300 --> 01:05:42,089
this is how it looks like force F it's a

1090
01:05:42,089 --> 01:05:45,060
bit more complicated here since we are

1091
01:05:45,060 --> 01:05:47,490
using the Django application to talk to

1092
01:05:47,490 --> 01:05:49,530
the Ceph cluster and we have an Argus

1093
01:05:49,530 --> 01:05:51,630
bug in that sense it's check where is

1094
01:05:51,630 --> 01:05:53,609
through the the nagas the general

1095
01:05:53,609 --> 01:05:56,190
application but then again it writes the

1096
01:05:56,190 --> 01:05:59,070
data to Rd we use the JSON export for

1097
01:05:59,070 --> 01:06:01,490
the visualization

1098
01:06:01,650 --> 01:06:03,960
so what are we working on at the moment

1099
01:06:03,960 --> 01:06:07,529
what's going what's cooking particular

1100
01:06:07,529 --> 01:06:09,930
as I said the the IBD stuff needs to get

1101
01:06:09,930 --> 01:06:11,400
finished this is something that we've

1102
01:06:11,400 --> 01:06:14,599
been working on for quite a while and

1103
01:06:14,599 --> 01:06:16,380
one of the things we're currently

1104
01:06:16,380 --> 01:06:19,650
missing is that we depend on the storage

1105
01:06:19,650 --> 01:06:21,630
boots that we manage to be existing

1106
01:06:21,630 --> 01:06:24,720
before so if you want to use ZFS you

1107
01:06:24,720 --> 01:06:26,999
have to manually create the zpool on the

1108
01:06:26,999 --> 01:06:28,650
command line first before we can make

1109
01:06:28,650 --> 01:06:32,220
use of it similar for LVM once you have

1110
01:06:32,220 --> 01:06:34,259
that starch who configured you can tell

1111
01:06:34,259 --> 01:06:35,789
open attic to resist it and then

1112
01:06:35,789 --> 01:06:38,130
creating the actual volumes on top of it

1113
01:06:38,130 --> 01:06:40,619
can be done through the UI but that's

1114
01:06:40,619 --> 01:06:41,819
something of course that we would like

1115
01:06:41,819 --> 01:06:46,400
to change so that's work in progress I

1116
01:06:46,400 --> 01:06:49,259
scuzzy fiber channel functionality needs

1117
01:06:49,259 --> 01:06:51,420
to be expanded there's quite a lot of

1118
01:06:51,420 --> 01:06:55,440
things that we haven't looked at yet we

1119
01:06:55,440 --> 01:06:56,849
track all the things that are still open

1120
01:06:56,849 --> 01:06:58,769
in the JIRA so we're not just tracking

1121
01:06:58,769 --> 01:07:00,599
bugs there but all the ideas that we

1122
01:07:00,599 --> 01:07:03,859
have and we try to group them into

1123
01:07:03,859 --> 01:07:08,759
bigger stories - - yes - have useful

1124
01:07:08,759 --> 01:07:10,769
chunks of work that somebody can take a

1125
01:07:10,769 --> 01:07:16,980
look at when it comes to safely we just

1126
01:07:16,980 --> 01:07:19,980
defined a few goals beforehand we want

1127
01:07:19,980 --> 01:07:21,930
to be able to both manage and monitor a

1128
01:07:21,930 --> 01:07:24,930
safe cluster through the UI and give it

1129
01:07:24,930 --> 01:07:27,239
to that you as a seven administrator

1130
01:07:27,239 --> 01:07:30,119
actually want to use right now there are

1131
01:07:30,119 --> 01:07:32,009
a few tools out there that give you

1132
01:07:32,009 --> 01:07:33,809
sometimes a little bit of monitoring

1133
01:07:33,809 --> 01:07:36,809
sometimes a bit of management but we try

1134
01:07:36,809 --> 01:07:39,059
to come up with a solution that gives

1135
01:07:39,059 --> 01:07:43,009
you more rounded experience here

1136
01:07:43,009 --> 01:07:45,450
especially considering that asset class

1137
01:07:45,450 --> 01:07:47,549
that can become quite large with lots of

1138
01:07:47,549 --> 01:07:52,349
objects and we make it or that we

1139
01:07:52,349 --> 01:07:53,880
visualise it in a way that you're not

1140
01:07:53,880 --> 01:07:55,559
getting overwhelmed did you only see the

1141
01:07:55,559 --> 01:07:57,180
information that's really relevant for

1142
01:07:57,180 --> 01:07:59,039
you at this point in time because well

1143
01:07:59,039 --> 01:08:01,799
ideally Jeff is supposed to be kind of

1144
01:08:01,799 --> 01:08:03,839
managing and itself in healing itself

1145
01:08:03,839 --> 01:08:05,460
but he still maybe want to know about

1146
01:08:05,460 --> 01:08:09,170
what's going on in the background

1147
01:08:09,800 --> 01:08:12,500
and very importantly you should still be

1148
01:08:12,500 --> 01:08:14,300
able to use the command line tools to

1149
01:08:14,300 --> 01:08:16,399
make changes to your cluster without

1150
01:08:16,399 --> 01:08:18,200
open attic getting confused by it that's

1151
01:08:18,200 --> 01:08:20,120
one of the the big challenges that we

1152
01:08:20,120 --> 01:08:23,540
had to face for the local storage

1153
01:08:23,540 --> 01:08:26,509
systems that we manage we basically

1154
01:08:26,509 --> 01:08:28,970
assume that open etic is in charge of

1155
01:08:28,970 --> 01:08:31,640
the configuration and once you started

1156
01:08:31,640 --> 01:08:33,049
using open attic for the storage

1157
01:08:33,049 --> 01:08:35,960
management well you can make changes

1158
01:08:35,960 --> 01:08:37,520
manually but open attic will simply

1159
01:08:37,520 --> 01:08:38,930
overwrite them the next time if you

1160
01:08:38,930 --> 01:08:40,939
haven't made sure that of netic is aware

1161
01:08:40,939 --> 01:08:44,720
of them and force F we are trying harder

1162
01:08:44,720 --> 01:08:46,790
to make sure that this is possible so if

1163
01:08:46,790 --> 01:08:48,410
you're using the safe command line tools

1164
01:08:48,410 --> 01:08:50,899
to create let's say another set pool or

1165
01:08:50,899 --> 01:08:53,180
an RVD of an etic needs to be aware of

1166
01:08:53,180 --> 01:08:56,000
that and that was a bit of a challenge

1167
01:08:56,000 --> 01:08:58,910
by the way of how Django works and how

1168
01:08:58,910 --> 01:09:02,569
its data and information I wish I had

1169
01:09:02,569 --> 01:09:04,970
more time to talk about that but if we

1170
01:09:04,970 --> 01:09:06,529
have time in the end maybe if you're

1171
01:09:06,529 --> 01:09:08,779
interested I can share some of their

1172
01:09:08,779 --> 01:09:09,979
ideas that we have there

1173
01:09:09,979 --> 01:09:12,830
so what works when it comes to self we

1174
01:09:12,830 --> 01:09:15,620
have a cluster status dashboard so you

1175
01:09:15,620 --> 01:09:18,200
basically can see the overall cluster

1176
01:09:18,200 --> 01:09:20,509
health some of the performance

1177
01:09:20,509 --> 01:09:22,359
indicators with graphs and everything

1178
01:09:22,359 --> 01:09:26,870
you can manage set pools you can monitor

1179
01:09:26,870 --> 01:09:29,689
them including eurasia coded profiles

1180
01:09:29,689 --> 01:09:32,420
for the pools you are able to create

1181
01:09:32,420 --> 01:09:34,460
Rather's block devices through the

1182
01:09:34,460 --> 01:09:36,950
weather UI you can delete them again

1183
01:09:36,950 --> 01:09:40,670
they are monitored we also start looking

1184
01:09:40,670 --> 01:09:43,580
into the infrastructure so you have the

1185
01:09:43,580 --> 01:09:46,759
e-beam OSD manage well it's not

1186
01:09:46,759 --> 01:09:48,229
management it but you can at least see

1187
01:09:48,229 --> 01:09:50,299
all the OSD that are in your cluster in

1188
01:09:50,299 --> 01:09:54,010
what state they are in when you're using

1189
01:09:54,010 --> 01:09:56,630
deep sea as the backend to configure

1190
01:09:56,630 --> 01:09:58,550
safe cluster you also get an inventory

1191
01:09:58,550 --> 01:10:00,320
list of all the nodes that you cast the

1192
01:10:00,320 --> 01:10:03,680
consists of which will they have you can

1193
01:10:03,680 --> 01:10:05,780
take a look at the the safe crash map

1194
01:10:05,780 --> 01:10:08,240
which is the basically the algorithm

1195
01:10:08,240 --> 01:10:10,010
that determines of how data is

1196
01:10:10,010 --> 01:10:11,810
distributed in your cluster what kind of

1197
01:10:11,810 --> 01:10:13,670
redundancy you have configured and how

1198
01:10:13,670 --> 01:10:15,890
how the data should be distributed among

1199
01:10:15,890 --> 01:10:17,300
the various

1200
01:10:17,300 --> 01:10:22,030
availability level so to say and we also

1201
01:10:22,030 --> 01:10:24,680
want to make it possible that you can

1202
01:10:24,680 --> 01:10:26,780
manage multiple safe clusters within one

1203
01:10:26,780 --> 01:10:28,670
open attic instance so let's say you

1204
01:10:28,670 --> 01:10:31,670
have a production safe cluster and a

1205
01:10:31,670 --> 01:10:33,740
staging or a testing safe Questor you

1206
01:10:33,740 --> 01:10:37,390
can use one to to manage them both

1207
01:10:37,390 --> 01:10:40,190
roadmap well that's just a small glimpse

1208
01:10:40,190 --> 01:10:42,440
we have quite a long long there is the

1209
01:10:42,440 --> 01:10:44,450
only lorry list of stuff that we still

1210
01:10:44,450 --> 01:10:47,450
want to accomplish the dashboard needs

1211
01:10:47,450 --> 01:10:48,920
some more laughs and we would like to

1212
01:10:48,920 --> 01:10:51,050
make much more information about the

1213
01:10:51,050 --> 01:10:54,760
surplus the visible from the dashboard

1214
01:10:54,760 --> 01:10:58,610
we also noticed that based on on the

1215
01:10:58,610 --> 01:11:01,460
over the nature of self that some tasks

1216
01:11:01,460 --> 01:11:03,170
takes some time so you do wish you a

1217
01:11:03,170 --> 01:11:06,110
command to tool it to trigger an action

1218
01:11:06,110 --> 01:11:09,380
in the safe cluster and it works and it

1219
01:11:09,380 --> 01:11:12,650
may take some time and you have no way

1220
01:11:12,650 --> 01:11:16,790
of knowing how much time it takes but as

1221
01:11:16,790 --> 01:11:18,650
a web application your browser can just

1222
01:11:18,650 --> 01:11:20,300
stand still and wait because you would

1223
01:11:20,300 --> 01:11:24,200
run into a timeout so one of the things

1224
01:11:24,200 --> 01:11:26,840
that we had to come up with is a queuing

1225
01:11:26,840 --> 01:11:30,140
mechanism where you can simply and QC

1226
01:11:30,140 --> 01:11:31,940
these jobs that take longer and then

1227
01:11:31,940 --> 01:11:34,070
make sure that you get notified once

1228
01:11:34,070 --> 01:11:35,720
it's finished so the web application

1229
01:11:35,720 --> 01:11:38,860
doesn't hang or you run into timeouts

1230
01:11:38,860 --> 01:11:41,960
yeah the whole part about deploying and

1231
01:11:41,960 --> 01:11:45,290
remote configuration of nodes with with

1232
01:11:45,290 --> 01:11:46,610
salt is something that we are very

1233
01:11:46,610 --> 01:11:48,170
closely working on with the deep-sea

1234
01:11:48,170 --> 01:11:52,010
developers so as the next step you

1235
01:11:52,010 --> 01:11:53,870
should not only be able to see all the

1236
01:11:53,870 --> 01:11:55,670
existing nodes but we would like to make

1237
01:11:55,670 --> 01:11:58,580
it possible for you to simply boot up

1238
01:11:58,580 --> 01:12:00,260
and you note that registers with thought

1239
01:12:00,260 --> 01:12:02,570
and he will see that a new node has

1240
01:12:02,570 --> 01:12:06,110
joined and used salt minion basically

1241
01:12:06,110 --> 01:12:08,360
and you could then use open etic to

1242
01:12:08,360 --> 01:12:10,730
assign role to that node let's say this

1243
01:12:10,730 --> 01:12:13,160
is going to be a new OSD click and then

1244
01:12:13,160 --> 01:12:15,380
deep sea will BES its job to configure

1245
01:12:15,380 --> 01:12:21,950
or not and accordingly more monitoring I

1246
01:12:21,950 --> 01:12:23,690
sigasi tariff management is also

1247
01:12:23,690 --> 01:12:25,850
something that we are looking into so

1248
01:12:25,850 --> 01:12:28,160
basically you define one node in your

1249
01:12:28,160 --> 01:12:29,140
cluster as

1250
01:12:29,140 --> 01:12:32,140
I see target host in which our BD images

1251
01:12:32,140 --> 01:12:33,880
from the circus will be made available

1252
01:12:33,880 --> 01:12:38,110
as ice Gaza targets agentic already

1253
01:12:38,110 --> 01:12:40,180
supports that but only on the local note

1254
01:12:40,180 --> 01:12:41,970
where open the Attic is running on so

1255
01:12:41,970 --> 01:12:45,220
usually if you consider the open attic

1256
01:12:45,220 --> 01:12:46,750
note as a management not it's usually

1257
01:12:46,750 --> 01:12:49,980
not having the performance parameters

1258
01:12:49,980 --> 01:12:52,900
that you would need for a full-fledged

1259
01:12:52,900 --> 01:12:54,910
ice Kazi target server usually that

1260
01:12:54,910 --> 01:12:57,010
should be a bit more powerful machine

1261
01:12:57,010 --> 01:13:00,100
and and to avoid having to install open

1262
01:13:00,100 --> 01:13:01,570
ethic on that note as well we're now

1263
01:13:01,570 --> 01:13:04,330
looking into using deep sea and so forth

1264
01:13:04,330 --> 01:13:08,710
for that instead Radice gateway is

1265
01:13:08,710 --> 01:13:12,250
another big construction site the thing

1266
01:13:12,250 --> 01:13:15,220
is that ACEF custer consists of several

1267
01:13:15,220 --> 01:13:18,550
components and they they have their own

1268
01:13:18,550 --> 01:13:20,350
way of how they are being managed they

1269
01:13:20,350 --> 01:13:22,000
have their own api's of how you need to

1270
01:13:22,000 --> 01:13:24,340
talk to them in the case of raiders

1271
01:13:24,340 --> 01:13:26,140
gateway for example there's a rat of

1272
01:13:26,140 --> 01:13:28,660
Skateway admin ops api which you need to

1273
01:13:28,660 --> 01:13:30,510
use to talk with the Gateway for

1274
01:13:30,510 --> 01:13:34,090
creating managing the users and the

1275
01:13:34,090 --> 01:13:36,640
buckets and so on so we need to develop

1276
01:13:36,640 --> 01:13:38,710
the the interface on our and to

1277
01:13:38,710 --> 01:13:41,800
establish that communication path and

1278
01:13:41,800 --> 01:13:45,300
the existing functionality in like the

1279
01:13:45,300 --> 01:13:47,740
RBD management or the pool management

1280
01:13:47,740 --> 01:13:49,720
still needs a lot of more features that

1281
01:13:49,720 --> 01:13:53,980
we're working on and also monitoring is

1282
01:13:53,980 --> 01:13:55,540
one of the things that we need to expand

1283
01:13:55,540 --> 01:13:57,700
right now

1284
01:13:57,700 --> 01:14:00,220
the expectation is that open attic and

1285
01:14:00,220 --> 01:14:03,190
the nagas instance runs on that note in

1286
01:14:03,190 --> 01:14:05,200
a distributed cluster like SEF this is

1287
01:14:05,200 --> 01:14:07,060
not going to scale so we are looking for

1288
01:14:07,060 --> 01:14:09,940
a more lightweight approach the current

1289
01:14:09,940 --> 01:14:12,010
plan is that we will be using connect d4

1290
01:14:12,010 --> 01:14:15,040
there so each safe node also a runs

1291
01:14:15,040 --> 01:14:17,440
colleague D configured in a way that it

1292
01:14:17,440 --> 01:14:20,410
just forwards the monitoring data to a

1293
01:14:20,410 --> 01:14:22,810
central collecti instance so you have a

1294
01:14:22,810 --> 01:14:25,060
way to consolidate the monitoring data

1295
01:14:25,060 --> 01:14:26,830
on one node which will make it much

1296
01:14:26,830 --> 01:14:30,670
easier to ya monitor and visualize the

1297
01:14:30,670 --> 01:14:33,130
whole cluster status in its individual

1298
01:14:33,130 --> 01:14:34,809
nodes

1299
01:14:34,809 --> 01:14:37,729
all right I didn't dare challenging the

1300
01:14:37,729 --> 01:14:39,139
demo gods that forced them because

1301
01:14:39,139 --> 01:14:41,090
network is usually something that you

1302
01:14:41,090 --> 01:14:43,190
can't rely on you have to live with a

1303
01:14:43,190 --> 01:14:45,079
few screenshots but we have a live demo

1304
01:14:45,079 --> 01:14:48,079
that you can toy around if you like the

1305
01:14:48,079 --> 01:14:51,519
links will be later the stage this is it

1306
01:14:51,519 --> 01:14:54,739
our traditional storage management

1307
01:14:54,739 --> 01:14:56,719
dashboard so to say this so this is what

1308
01:14:56,719 --> 01:14:58,909
you see when you're using a fanatic for

1309
01:14:58,909 --> 01:15:01,429
managing traditional storage like Samba

1310
01:15:01,429 --> 01:15:06,260
NFS and so on you can create and define

1311
01:15:06,260 --> 01:15:08,119
the volumes they are listed over here

1312
01:15:08,119 --> 01:15:11,679
and for each volume we also create

1313
01:15:11,679 --> 01:15:13,729
monitoring data and performance data

1314
01:15:13,729 --> 01:15:17,420
that you could take a look at it's a bit

1315
01:15:17,420 --> 01:15:20,090
hard to see if you if you click on the

1316
01:15:20,090 --> 01:15:21,889
demo you you can tie your own process

1317
01:15:21,889 --> 01:15:24,889
and see it in more details one of the

1318
01:15:24,889 --> 01:15:28,449
things that is quite interesting int

1319
01:15:28,449 --> 01:15:30,949
it's pretty unique I haven't seen it in

1320
01:15:30,949 --> 01:15:33,079
any other applications first what we

1321
01:15:33,079 --> 01:15:35,809
call our API recorder so as I said

1322
01:15:35,809 --> 01:15:39,099
though the web UI uses the REST API

1323
01:15:39,099 --> 01:15:42,170
exclusively the web UI uses the REST API

1324
01:15:42,170 --> 01:15:44,449
exclusively to talk with the automatic

1325
01:15:44,449 --> 01:15:47,659
back-end and sometimes you don't want to

1326
01:15:47,659 --> 01:15:49,249
use the UI but you want to automate

1327
01:15:49,249 --> 01:15:51,729
certain tasks in a script or something

1328
01:15:51,729 --> 01:15:54,559
through the open attic REST API so

1329
01:15:54,559 --> 01:15:56,539
instead of having to look up the

1330
01:15:56,539 --> 01:15:59,539
documentation for the API you basically

1331
01:15:59,539 --> 01:16:02,929
enable the API recorder in the UI and

1332
01:16:02,929 --> 01:16:04,999
you click through the tasks that you

1333
01:16:04,999 --> 01:16:06,409
want to accomplish once and then you

1334
01:16:06,409 --> 01:16:08,780
stop the API recorder and it will

1335
01:16:08,780 --> 01:16:11,209
automatically create a small Python

1336
01:16:11,209 --> 01:16:13,550
script snippet that basically includes

1337
01:16:13,550 --> 01:16:15,709
all the REST API calls that you have

1338
01:16:15,709 --> 01:16:17,570
performed so you can use these as a

1339
01:16:17,570 --> 01:16:19,550
snippet or template to embed in your

1340
01:16:19,550 --> 01:16:22,219
application to get the same or to repeat

1341
01:16:22,219 --> 01:16:26,239
this particular task this is the safe

1342
01:16:26,239 --> 01:16:28,909
cluster dashboard as you can see we're

1343
01:16:28,909 --> 01:16:31,209
using a different graphing engine here

1344
01:16:31,209 --> 01:16:35,300
this way we are we are extracting the

1345
01:16:35,300 --> 01:16:37,039
data from the round robin database

1346
01:16:37,039 --> 01:16:39,739
through Jason and then use JavaScript

1347
01:16:39,739 --> 01:16:41,630
libraries to visualize it which makes it

1348
01:16:41,630 --> 01:16:43,999
much easier and much more dynamic to

1349
01:16:43,999 --> 01:16:47,150
work with the data on the UI the

1350
01:16:47,150 --> 01:16:48,480
dashboard is fully configured

1351
01:16:48,480 --> 01:16:50,580
so you can resize and rearrange those

1352
01:16:50,580 --> 01:16:52,920
widgets you can have multiple dashboards

1353
01:16:52,920 --> 01:16:55,860
and they are stored with your user

1354
01:16:55,860 --> 01:16:57,510
profile so if another administrator

1355
01:16:57,510 --> 01:17:00,150
looks and he can set up a dashboard by

1356
01:17:00,150 --> 01:17:03,240
his means and and doesn't have to take

1357
01:17:03,240 --> 01:17:06,890
over what you have configured basically

1358
01:17:06,890 --> 01:17:11,190
you can also mix UI elements from both

1359
01:17:11,190 --> 01:17:13,500
the traditional side or the safe cluster

1360
01:17:13,500 --> 01:17:16,470
side or if you have multiple set Busters

1361
01:17:16,470 --> 01:17:18,330
you could create one dashboard that

1362
01:17:18,330 --> 01:17:20,010
shows you the overall view for both

1363
01:17:20,010 --> 01:17:23,100
clusters in one page so you can really

1364
01:17:23,100 --> 01:17:27,720
tweak it to your liking safe pool lists

1365
01:17:27,720 --> 01:17:31,460
as you see we are always using the same

1366
01:17:31,460 --> 01:17:35,130
UI elements with a data table on top and

1367
01:17:35,130 --> 01:17:38,070
then the grass underneath one things

1368
01:17:38,070 --> 01:17:39,780
that I have on my wish list is that I

1369
01:17:39,780 --> 01:17:41,010
would like to make it possible that

1370
01:17:41,010 --> 01:17:43,830
these graphs that are currently belong

1371
01:17:43,830 --> 01:17:46,050
to a certain set who could also be taken

1372
01:17:46,050 --> 01:17:48,540
and pinned onto the front dashboard so

1373
01:17:48,540 --> 01:17:50,430
you if you have a certain pool that you

1374
01:17:50,430 --> 01:17:52,410
want to monitor more closely it should

1375
01:17:52,410 --> 01:17:54,270
be possible to drag it on the on the

1376
01:17:54,270 --> 01:17:57,080
front dash water to make it visible name

1377
01:17:57,080 --> 01:17:59,970
yeah safe procreation some of the

1378
01:17:59,970 --> 01:18:02,400
features that we support here boring

1379
01:18:02,400 --> 01:18:05,520
let's keep all that our BD if these are

1380
01:18:05,520 --> 01:18:10,950
the block devices now I think the pull

1381
01:18:10,950 --> 01:18:12,210
request is almost done that you will

1382
01:18:12,210 --> 01:18:14,970
also see the utilization of the RB DS

1383
01:18:14,970 --> 01:18:21,230
here Oh Steve it's repeating as I said

1384
01:18:21,230 --> 01:18:23,310
screenshots are not as exciting as a

1385
01:18:23,310 --> 01:18:26,550
live demo but my past experiences at

1386
01:18:26,550 --> 01:18:28,080
first then was that the network usually

1387
01:18:28,080 --> 01:18:29,580
works by the time you're about to head

1388
01:18:29,580 --> 01:18:33,720
home so oh that's the crash map editor

1389
01:18:33,720 --> 01:18:36,120
as I said basically you see a

1390
01:18:36,120 --> 01:18:38,220
visualization of the topology and you're

1391
01:18:38,220 --> 01:18:40,890
able to drag notes around it you can add

1392
01:18:40,890 --> 01:18:44,430
new notes change the properties here and

1393
01:18:44,430 --> 01:18:46,710
with that I'm already at my link list

1394
01:18:46,710 --> 01:18:48,690
these are some of the resources that you

1395
01:18:48,690 --> 01:18:52,050
can take a look on we have a Google

1396
01:18:52,050 --> 01:18:54,840
Group for discussion that serves as our

1397
01:18:54,840 --> 01:18:56,550
mailing list slash forum if you want to

1398
01:18:56,550 --> 01:18:59,130
get in touch we are on hash open attic

1399
01:18:59,130 --> 01:19:00,860
on free notes as well

1400
01:19:00,860 --> 01:19:02,480
so come over there if you have questions

1401
01:19:02,480 --> 01:19:04,659
and suggestions

1402
01:19:04,659 --> 01:19:07,520
most of the discussion really happens on

1403
01:19:07,520 --> 01:19:09,980
bit packet and in the form of the pull

1404
01:19:09,980 --> 01:19:11,719
requests there's a lot of communication

1405
01:19:11,719 --> 01:19:13,460
between the developers working on the

1406
01:19:13,460 --> 01:19:16,219
code and then of course on our bug

1407
01:19:16,219 --> 01:19:21,949
tracker so yeah these are the key

1408
01:19:21,949 --> 01:19:24,139
resources to get in touch with us first

1409
01:19:24,139 --> 01:19:27,559
and with that I'm a bit ahead of my time

1410
01:19:27,559 --> 01:19:30,860
amazing so if you have questions we

1411
01:19:30,860 --> 01:19:36,440
still have time for that I know it's

1412
01:19:36,440 --> 01:19:40,790
after lunch okay

1413
01:19:40,790 --> 01:19:46,579
there's the question when is software

1414
01:19:46,579 --> 01:19:49,340
ever ready when it's software ever ready

1415
01:19:49,340 --> 01:19:54,739
no ethic - oh is out and based on on all

1416
01:19:54,739 --> 01:19:56,480
the testing that we do we are pretty

1417
01:19:56,480 --> 01:19:58,099
confident that each release that you

1418
01:19:58,099 --> 01:20:00,110
publish is safe to use the good thing

1419
01:20:00,110 --> 01:20:01,820
about often ethic especially if you use

1420
01:20:01,820 --> 01:20:04,130
it for traditional storage management

1421
01:20:04,130 --> 01:20:07,309
even though if automatic crashes that

1422
01:20:07,309 --> 01:20:09,949
the actual serving of data is performed

1423
01:20:09,949 --> 01:20:11,840
by other subsystems of the operating

1424
01:20:11,840 --> 01:20:14,090
system like the Samba server like kernel

1425
01:20:14,090 --> 01:20:17,389
NFS we are not really in the path of

1426
01:20:17,389 --> 01:20:20,210
serving the data to prove the users even

1427
01:20:20,210 --> 01:20:23,090
if automatic has a problem a crashes

1428
01:20:23,090 --> 01:20:25,989
which doesn't really happen that often

1429
01:20:25,989 --> 01:20:28,010
we are not messing with your data

1430
01:20:28,010 --> 01:20:30,050
directly unless you really accidentally

1431
01:20:30,050 --> 01:20:33,500
delete in something like that or so but

1432
01:20:33,500 --> 01:20:35,599
we are still of course in the process of

1433
01:20:35,599 --> 01:20:37,219
adding more functionality with each

1434
01:20:37,219 --> 01:20:38,989
release as I said we have the Train

1435
01:20:38,989 --> 01:20:41,030
model so what we have out right now is

1436
01:20:41,030 --> 01:20:43,599
it's ready to use and can be used with

1437
01:20:43,599 --> 01:20:47,030
with confidence but as I said it we

1438
01:20:47,030 --> 01:20:48,860
still have a lot of guests to fill and

1439
01:20:48,860 --> 01:20:50,599
of course we would like you to encourage

1440
01:20:50,599 --> 01:20:55,489
- to give it a try and help us gathering

1441
01:20:55,489 --> 01:20:57,710
guidance of where we should focus on

1442
01:20:57,710 --> 01:21:00,949
next so we think well that we have now

1443
01:21:00,949 --> 01:21:04,340
come to a point where we provide a good

1444
01:21:04,340 --> 01:21:06,800
set of useful functionality we are where

1445
01:21:06,800 --> 01:21:08,449
we are not fully there yet compared to

1446
01:21:08,449 --> 01:21:10,550
other projects but we would like to get

1447
01:21:10,550 --> 01:21:12,710
your feedback on what your use cases are

1448
01:21:12,710 --> 01:21:14,000
and what person

1449
01:21:14,000 --> 01:21:16,100
what you're looking for what we should

1450
01:21:16,100 --> 01:21:18,260
be focusing on basically there was

1451
01:21:18,260 --> 01:21:24,020
another question yeah so the question

1452
01:21:24,020 --> 01:21:25,250
was if we have any plans to support

1453
01:21:25,250 --> 01:21:30,050
Kerberos for authentication the thing is

1454
01:21:30,050 --> 01:21:31,910
are you talking about using it for

1455
01:21:31,910 --> 01:21:33,680
authenticating users to the web

1456
01:21:33,680 --> 01:21:36,050
front-end and the answers that should

1457
01:21:36,050 --> 01:21:39,340
work I haven't tested it

