1
00:00:05,060 --> 00:00:09,059
what about basil and we here we are we

2
00:00:09,059 --> 00:00:11,430
cause really he is a software engineer

3
00:00:11,430 --> 00:00:16,920
in Google since 2011 July 11 and since

4
00:00:16,920 --> 00:00:20,090
last year he started working on basil

5
00:00:20,090 --> 00:00:31,050
please welcome Klaus okay so second much

6
00:00:31,050 --> 00:00:33,390
and thank you for the opportunity to

7
00:00:33,390 --> 00:00:38,970
present basil the involved them

8
00:00:38,970 --> 00:00:42,510
and the purpose of this talk is to give

9
00:00:42,510 --> 00:00:44,250
you an idea of what are the ideas behind

10
00:00:44,250 --> 00:00:46,980
basil and bitching about the look and

11
00:00:46,980 --> 00:00:53,989
feel so what is sale short answer

12
00:00:53,989 --> 00:00:58,140
it's about tool that is like make and

13
00:00:58,140 --> 00:01:01,160
many other to us it organizes how we get

14
00:01:01,160 --> 00:01:05,309
derived files from sauce so typically

15
00:01:05,309 --> 00:01:10,920
compiling stuff yeah it is a tool that

16
00:01:10,920 --> 00:01:13,200
is used at Google for over a decade or

17
00:01:13,200 --> 00:01:16,020
it's a core of a tool who has sounds the

18
00:01:16,020 --> 00:01:22,380
setting extensions compile them and from

19
00:01:22,380 --> 00:01:25,830
that humidity things in use to it for so

20
00:01:25,830 --> 00:01:26,099
long

21
00:01:26,099 --> 00:01:29,160
you can already write that it's mainly

22
00:01:29,160 --> 00:01:32,179
focused and the use case we have a book

23
00:01:32,179 --> 00:01:34,530
whenever there's a design decision to be

24
00:01:34,530 --> 00:01:37,890
made it's made to metal support badge in

25
00:01:37,890 --> 00:01:39,070
this case

26
00:01:39,070 --> 00:01:43,670
you have a large single codebase so the

27
00:01:43,670 --> 00:01:46,270
majority of code at Google is in one big

28
00:01:46,270 --> 00:01:49,880
repository and that is an active

29
00:01:49,880 --> 00:01:52,400
development and basically we built

30
00:01:52,400 --> 00:01:56,090
everything from head all the time so

31
00:01:56,090 --> 00:01:58,070
that's usually quite a large one

32
00:01:58,070 --> 00:01:59,180
repository

33
00:01:59,180 --> 00:02:01,640
oh what a repository and it happens to

34
00:02:01,640 --> 00:02:05,540
be not just Google with tens tens of

35
00:02:05,540 --> 00:02:09,139
millions of files and tens of thousands

36
00:02:09,139 --> 00:02:12,530
of engineers working on it and it is an

37
00:02:12,530 --> 00:02:14,780
open source since 2015

38
00:02:14,780 --> 00:02:19,930
so only recently in open sourced okay so

39
00:02:19,930 --> 00:02:24,020
why is another good system as mentioned

40
00:02:24,020 --> 00:02:28,209
already it's optimized for large

41
00:02:28,209 --> 00:02:32,570
repositories so what baeza tries to do

42
00:02:32,570 --> 00:02:34,970
is to be fast and not only by running

43
00:02:34,970 --> 00:02:39,790
six parallel but also across the caching

44
00:02:39,790 --> 00:02:41,989
but to do so without those in

45
00:02:41,989 --> 00:02:44,959
correctness that is the main focus on

46
00:02:44,959 --> 00:02:47,420
build to build correctly in the sense

47
00:02:47,420 --> 00:02:50,090
that if you know clean up everything and

48
00:02:50,090 --> 00:02:52,280
compile again you get the same result

49
00:02:52,280 --> 00:02:57,560
that it gives you with caching and the

50
00:02:57,560 --> 00:03:01,250
same idea means not only functionally

51
00:03:01,250 --> 00:03:03,650
the same program an experiment program

52
00:03:03,650 --> 00:03:05,870
but really bye-bye-bye it's the same

53
00:03:05,870 --> 00:03:08,810
thing which actually is a bit of

54
00:03:08,810 --> 00:03:10,760
challenge with all the times that enter

55
00:03:10,760 --> 00:03:14,360
this compilation all the time okay and

56
00:03:14,360 --> 00:03:15,620
the other thing which you can deduce

57
00:03:15,620 --> 00:03:17,540
from the fact that it is meant for large

58
00:03:17,540 --> 00:03:21,560
code base is that you go for declarative

59
00:03:21,560 --> 00:03:22,220
style

60
00:03:22,220 --> 00:03:25,570
so you'll separate the concerns of

61
00:03:25,570 --> 00:03:29,060
writing an application and knowing how

62
00:03:29,060 --> 00:03:30,680
you build it so you say this is a C

63
00:03:30,680 --> 00:03:33,590
program and have some specialized

64
00:03:33,590 --> 00:03:34,370
knowledge of

65
00:03:34,370 --> 00:03:36,319
for a company like uber then it is

66
00:03:36,319 --> 00:03:39,220
necessary because they have specialized

67
00:03:39,220 --> 00:03:42,709
engineers in building an application and

68
00:03:42,709 --> 00:03:45,140
others who know best how to optimize for

69
00:03:45,140 --> 00:03:46,940
the architecture we're running in four

70
00:03:46,940 --> 00:03:49,970
things on and it's also generally useful

71
00:03:49,970 --> 00:03:52,940
at or have a central point where you

72
00:03:52,940 --> 00:03:55,160
maintain the rewards how you build your

73
00:03:55,160 --> 00:04:02,959
plants okay so how does it work

74
00:04:02,959 --> 00:04:05,420
and it goes to an example later but the

75
00:04:05,420 --> 00:04:09,079
general overview is you get a target I

76
00:04:09,079 --> 00:04:10,910
want to build that thing then you reach

77
00:04:10,910 --> 00:04:13,940
all the post parts or actually all the

78
00:04:13,940 --> 00:04:16,430
files you need all the websites you need

79
00:04:16,430 --> 00:04:18,529
there's nothing like recursive calling

80
00:04:18,529 --> 00:04:23,510
or yeah no recursive calling you just

81
00:04:23,510 --> 00:04:26,060
create construct the whole travel all

82
00:04:26,060 --> 00:04:28,010
the dependencies you have recursively

83
00:04:28,010 --> 00:04:31,330
but this all in the same process and

84
00:04:31,330 --> 00:04:33,919
from there you decide what actions you

85
00:04:33,919 --> 00:04:36,949
need to do so which invocations of its

86
00:04:36,949 --> 00:04:41,900
on and then executed except if you've

87
00:04:41,900 --> 00:04:42,650
done the same

88
00:04:42,650 --> 00:04:44,120
come on already with the same input

89
00:04:44,120 --> 00:04:46,100
because then you don't have to do it

90
00:04:46,100 --> 00:04:47,260
twice

91
00:04:47,260 --> 00:04:52,090
okay so generally generic tool and

92
00:04:52,090 --> 00:04:55,639
that's to give you a bit of feeling how

93
00:04:55,639 --> 00:04:57,410
how are the whole thing looks like let's

94
00:04:57,410 --> 00:04:58,520
go through an example

95
00:04:58,520 --> 00:05:02,479
Oh before one of the main design

96
00:05:02,479 --> 00:05:05,389
features is that the repositories they

97
00:05:05,389 --> 00:05:07,910
can be said we read all the both parts

98
00:05:07,910 --> 00:05:11,930
that can be a lot of them and the

99
00:05:11,930 --> 00:05:14,870
assumption is the resep true for google

100
00:05:14,870 --> 00:05:17,950
you work from the same code base for

101
00:05:17,950 --> 00:05:20,900
extended amount of time and compile

102
00:05:20,900 --> 00:05:23,210
again run tests change code run tests

103
00:05:23,210 --> 00:05:28,100
again so optimizing for subsequence

104
00:05:28,100 --> 00:05:29,630
patience of building not only for the

105
00:05:29,630 --> 00:05:34,250
first Foreman and therefore to not

106
00:05:34,250 --> 00:05:36,050
compute the whole dependency graph over

107
00:05:36,050 --> 00:05:37,760
and over again where it has a

108
00:05:37,760 --> 00:05:40,040
client-server architecture that is once

109
00:05:40,040 --> 00:05:42,200
you start basil for the first time in a

110
00:05:42,200 --> 00:05:45,260
worse working directory on a code base

111
00:05:45,260 --> 00:05:48,080
it will start a sermon the background

112
00:05:48,080 --> 00:05:51,050
that constructs the dependency crowd and

113
00:05:51,050 --> 00:05:56,810
keeps it in memory and once you ask for

114
00:05:56,810 --> 00:05:58,850
another build or another test in the

115
00:05:58,850 --> 00:06:02,570
same barking director in the same check

116
00:06:02,570 --> 00:06:06,020
out basically same workspace then the

117
00:06:06,020 --> 00:06:07,430
information will already be in memory

118
00:06:07,430 --> 00:06:11,810
and only updated with changes made to

119
00:06:11,810 --> 00:06:16,150
the paths since the last moment basil

120
00:06:16,600 --> 00:06:19,310
that's also we can handle the whole

121
00:06:19,310 --> 00:06:20,750
depends across the memory and read

122
00:06:20,750 --> 00:06:24,350
everything without using too much time

123
00:06:24,350 --> 00:06:28,010
on computing all the on computing the

124
00:06:28,010 --> 00:06:30,890
build car over and over again okay but

125
00:06:30,890 --> 00:06:34,370
as I said particular to style look let's

126
00:06:34,370 --> 00:06:36,680
look at a simple example we want to

127
00:06:36,680 --> 00:06:38,210
write hello world which is simple

128
00:06:38,210 --> 00:06:41,990
program except to demonstrate a point I

129
00:06:41,990 --> 00:06:47,660
choose to call it library make a quarter

130
00:06:47,660 --> 00:06:49,580
library so this program depends on a

131
00:06:49,580 --> 00:06:52,190
library as it is usual was also bigger

132
00:06:52,190 --> 00:06:57,110
pieces of software and this cases of the

133
00:06:57,110 --> 00:07:00,350
severity of a data and you have an

134
00:07:00,350 --> 00:07:04,100
implementation okay then it could be a

135
00:07:04,100 --> 00:07:07,940
typical well part of the sauce tree but

136
00:07:07,940 --> 00:07:12,410
it's already all the relevant us in

137
00:07:12,410 --> 00:07:15,350
that's indicate and now we want to tell

138
00:07:15,350 --> 00:07:17,200
me something

139
00:07:17,200 --> 00:07:20,680
from that the first thing is we have a

140
00:07:20,680 --> 00:07:24,550
workspace file which in essence and in

141
00:07:24,550 --> 00:07:26,470
actually many examples is just an empty

142
00:07:26,470 --> 00:07:30,190
file it's two purposes on the one hand

143
00:07:30,190 --> 00:07:34,300
to give the border of the color base and

144
00:07:34,300 --> 00:07:36,400
the reference point where homeworld

145
00:07:36,400 --> 00:07:40,420
absolute pass or absolute absence names

146
00:07:40,420 --> 00:07:43,720
of of targets of envelope to her to and

147
00:07:43,720 --> 00:07:48,000
it also allows to specify external

148
00:07:48,000 --> 00:07:49,990
dependencies that are built-in so

149
00:07:49,990 --> 00:07:54,400
external repositories essays wants to

150
00:07:54,400 --> 00:07:56,050
construct the holograph so it also needs

151
00:07:56,050 --> 00:07:58,900
about external depositors that are part

152
00:07:58,900 --> 00:08:02,650
of the build and but for the the main

153
00:08:02,650 --> 00:08:04,000
uses that you have ever seen is a big

154
00:08:04,000 --> 00:08:06,640
repository you want an example so very

155
00:08:06,640 --> 00:08:09,940
often simplified just to get the name

156
00:08:09,940 --> 00:08:12,610
space clear and then you have the extra

157
00:08:12,610 --> 00:08:15,340
load files in this case you have a

158
00:08:15,340 --> 00:08:18,220
library of stuff from the top next to

159
00:08:18,220 --> 00:08:20,770
the C program you have a good first

160
00:08:20,770 --> 00:08:23,020
thing look I have a binary it's written

161
00:08:23,020 --> 00:08:26,590
in C it has a name this is the source

162
00:08:26,590 --> 00:08:28,360
file and by the way it depends on that

163
00:08:28,360 --> 00:08:31,300
library and for the library is similar

164
00:08:31,300 --> 00:08:32,620
say this is a library

165
00:08:32,620 --> 00:08:36,370
it has a name and all the C files in

166
00:08:36,370 --> 00:08:38,140
that directory are my source files and

167
00:08:38,140 --> 00:08:40,750
all the pedophiles tuned up to that

168
00:08:40,750 --> 00:08:44,380
library the important thing to notice is

169
00:08:44,380 --> 00:08:47,950
what is not in that Bill's child and

170
00:08:47,950 --> 00:08:50,200
this is how all the details about what

171
00:08:50,200 --> 00:08:53,290
is might see to attain

172
00:08:53,290 --> 00:08:56,410
do it across compilation or not what is

173
00:08:56,410 --> 00:09:00,640
my faucet ID architecture that all this

174
00:09:00,640 --> 00:09:05,530
best can also use for C there is some

175
00:09:05,530 --> 00:09:08,800
knowledge building and the whole point

176
00:09:08,800 --> 00:09:10,510
is you don't have to specify at each

177
00:09:10,510 --> 00:09:17,170
location place ok so now let's try to go

178
00:09:17,170 --> 00:09:19,780
to the world and see what what happens

179
00:09:19,780 --> 00:09:22,480
the first thing is we want to build a

180
00:09:22,480 --> 00:09:25,159
target so we need to know what

181
00:09:25,159 --> 00:09:27,349
from the namespace you see this is the

182
00:09:27,349 --> 00:09:31,489
top level package so we say hey to know

183
00:09:31,489 --> 00:09:33,589
whether package and then we actually

184
00:09:33,589 --> 00:09:37,669
find the most violent read it once we

185
00:09:37,669 --> 00:09:40,579
know when in let me see okay it's a

186
00:09:40,579 --> 00:09:44,869
binary we discover dependencies that we

187
00:09:44,869 --> 00:09:46,909
declare dependency is one of the source

188
00:09:46,909 --> 00:09:51,289
file and the other is library okay now

189
00:09:51,289 --> 00:09:55,549
wait to go to the library and performing

190
00:09:55,549 --> 00:09:57,649
that again the important thing is what

191
00:09:57,649 --> 00:09:59,029
was not found on the slide

192
00:09:59,029 --> 00:10:02,599
where's the horse implicitly record

193
00:10:02,599 --> 00:10:04,759
switch toots which ended this building

194
00:10:04,759 --> 00:10:07,339
things for so we later change that you

195
00:10:07,339 --> 00:10:08,959
know that all the boundaries have to be

196
00:10:08,959 --> 00:10:14,569
again okay but then forward it's found

197
00:10:14,569 --> 00:10:17,749
in a package so you read the directory

198
00:10:17,749 --> 00:10:21,679
and as all I mentioned the whole

199
00:10:21,679 --> 00:10:24,379
dependency process and kept the memory

200
00:10:24,379 --> 00:10:29,599
in the server okay then you see Club

201
00:10:29,599 --> 00:10:31,309
expressions which means you have to

202
00:10:31,309 --> 00:10:33,470
really read the content of the directory

203
00:10:33,470 --> 00:10:37,249
you discover the files you need and now

204
00:10:37,249 --> 00:10:38,720
you've just come on all the things you

205
00:10:38,720 --> 00:10:40,909
need for your boat then you can in

206
00:10:40,909 --> 00:10:44,509
variables and know which attractions

207
00:10:44,509 --> 00:10:46,189
have to perform so which combination

208
00:10:46,189 --> 00:10:49,299
stands in this case you compile the

209
00:10:49,299 --> 00:11:00,589
object library so that this is the crowd

210
00:11:00,589 --> 00:11:03,259
that is actually proactive this is how

211
00:11:03,259 --> 00:11:05,239
we get to derived files from source

212
00:11:05,239 --> 00:11:08,599
files these are the edges but important

213
00:11:08,599 --> 00:11:12,129
thing is there are all the other

214
00:11:12,129 --> 00:11:15,019
dependencies for you reread during the

215
00:11:15,019 --> 00:11:18,859
planning of the execution and we need to

216
00:11:18,859 --> 00:11:20,930
keep track of in order to this our

217
00:11:20,930 --> 00:11:23,390
something changes and that's what made

218
00:11:23,390 --> 00:11:25,990
us it really because all the

219
00:11:25,990 --> 00:11:28,790
dependencies not only those better

220
00:11:28,790 --> 00:11:33,649
source files for example if we add a

221
00:11:33,649 --> 00:11:36,589
file to that directory just simply

222
00:11:36,589 --> 00:11:38,480
adding the part then of course nothing

223
00:11:38,480 --> 00:11:41,500
has changed to the target speed build

224
00:11:41,500 --> 00:11:44,149
but we just tell them that the content

225
00:11:44,149 --> 00:11:47,029
of the directory has changed and when

226
00:11:47,029 --> 00:11:50,930
it's time I actually impossible but it

227
00:11:50,930 --> 00:11:53,510
tries to be notified by the operating

228
00:11:53,510 --> 00:11:56,300
system about changes but you can always

229
00:11:56,300 --> 00:12:03,190
fall back to restarting everything if so

230
00:12:03,190 --> 00:12:05,660
you definitely try to avoid reading all

231
00:12:05,660 --> 00:12:08,899
the files again but actively try to find

232
00:12:08,899 --> 00:12:10,640
out what's changed in any case the

233
00:12:10,640 --> 00:12:12,430
content of the directory has changed

234
00:12:12,430 --> 00:12:14,870
which means the whole part of the graph

235
00:12:14,870 --> 00:12:20,600
gets validated everything that so

236
00:12:20,600 --> 00:12:22,700
basically the director has changed

237
00:12:22,700 --> 00:12:26,560
everything that is reachable from here

238
00:12:33,760 --> 00:12:42,790
and okay so yeah but basically since

239
00:12:42,790 --> 00:12:50,560
this is color that sorry that a large

240
00:12:50,560 --> 00:12:52,660
part of the grounds now that we walk

241
00:12:52,660 --> 00:12:55,690
through the graph again and Muncie hit

242
00:12:55,690 --> 00:13:00,580
the the library rule we see that since

243
00:13:00,580 --> 00:13:03,250
the count of the director has changed we

244
00:13:03,250 --> 00:13:05,800
need to extend the egg for the extra

245
00:13:05,800 --> 00:13:07,450
graphs of differently so we have the

246
00:13:07,450 --> 00:13:09,540
missing parts of the action graph and

247
00:13:09,540 --> 00:13:12,820
then we know what needs to be done again

248
00:13:12,820 --> 00:13:16,240
so again the point of traffic is that by

249
00:13:16,240 --> 00:13:18,940
really recording everything that went

250
00:13:18,940 --> 00:13:21,910
into that built you can detect changes

251
00:13:21,910 --> 00:13:26,710
and don't have to we're not missing

252
00:13:26,710 --> 00:13:28,510
updates so we can rely on it being

253
00:13:28,510 --> 00:13:31,210
correct so we don't have to clean every

254
00:13:31,210 --> 00:13:33,990
single start all over again

255
00:13:33,990 --> 00:13:40,090
okay so actions as already mentioned

256
00:13:40,090 --> 00:13:43,690
these are the the production part these

257
00:13:43,690 --> 00:13:46,360
come this are locations of compilers and

258
00:13:46,360 --> 00:13:49,360
linkers and so on so they actually do

259
00:13:49,360 --> 00:13:52,890
something they generate artifacts and

260
00:13:52,890 --> 00:13:55,690
tend to take the biggest part of the

261
00:13:55,690 --> 00:14:00,850
time of the system so that's like

262
00:14:00,850 --> 00:14:03,790
particularly interesting in avoiding

263
00:14:03,790 --> 00:14:06,660
redoing them again

264
00:14:08,020 --> 00:14:11,100
so we've seen the dependency graph and

265
00:14:11,100 --> 00:14:13,630
how swear that something has changed and

266
00:14:13,630 --> 00:14:17,350
we need to redo it again but there's

267
00:14:17,350 --> 00:14:20,170
also fashion of actions themselves in

268
00:14:20,170 --> 00:14:23,380
the sense that in the inputs hasn't

269
00:14:23,380 --> 00:14:24,730
changed you don't need to renew the

270
00:14:24,730 --> 00:14:29,350
action so we don't do it of course for

271
00:14:29,350 --> 00:14:32,440
this to work correctly base needs to

272
00:14:32,440 --> 00:14:34,270
know all the inputs and all the outputs

273
00:14:34,270 --> 00:14:39,190
of an action another one so basically

274
00:14:39,190 --> 00:14:41,260
for knowledge about that because if you

275
00:14:41,260 --> 00:14:43,630
read more file when you declare you

276
00:14:43,630 --> 00:14:46,630
might accidentally hit you might not

277
00:14:46,630 --> 00:14:47,800
really do an action that needs to be

278
00:14:47,800 --> 00:14:52,270
redone so conceptually that means they

279
00:14:52,270 --> 00:14:54,970
are not such done something targets so

280
00:14:54,970 --> 00:14:57,070
you have an empty file saying yeah I've

281
00:14:57,070 --> 00:14:59,709
done all the prerequisite tasks but you

282
00:14:59,709 --> 00:15:01,000
actually do these they are all the

283
00:15:01,000 --> 00:15:04,410
inputs and outputs that go into a target

284
00:15:04,410 --> 00:15:09,430
and your only elections are supposed to

285
00:15:09,430 --> 00:15:11,709
only read the input that are declared

286
00:15:11,709 --> 00:15:14,380
now say suppose that sounds like a huge

287
00:15:14,380 --> 00:15:16,600
burden on the person writing the build

288
00:15:16,600 --> 00:15:21,870
file well there is some tools that help

289
00:15:21,870 --> 00:15:25,930
basil has built in a concept of a

290
00:15:25,930 --> 00:15:27,910
sandbox to make the easier to write

291
00:15:27,910 --> 00:15:32,649
correct load files which only exit

292
00:15:32,649 --> 00:15:37,209
people they declare and so by a sandbox

293
00:15:37,209 --> 00:15:40,180
it's basically isolated environment

294
00:15:40,180 --> 00:15:41,980
where only the declared impossibly

295
00:15:41,980 --> 00:15:43,950
declared tools of the next are present

296
00:15:43,950 --> 00:15:47,079
the only they declare outputs are moved

297
00:15:47,079 --> 00:15:51,130
out depending on the operating system

298
00:15:51,130 --> 00:15:53,079
that can be implemented in the different

299
00:15:53,079 --> 00:15:56,890
way can be a change short or is there's

300
00:15:56,890 --> 00:15:59,529
lots of the annotation where you just

301
00:15:59,529 --> 00:16:02,380
make a temporary directory link assuming

302
00:16:02,380 --> 00:16:05,410
in every single need nothing else so

303
00:16:05,410 --> 00:16:08,079
that is not a security feature it's just

304
00:16:08,079 --> 00:16:13,420
a tool to help you detect incorrect

305
00:16:13,420 --> 00:16:14,760
declarations

306
00:16:14,760 --> 00:16:18,860
and for then it works really reliable

307
00:16:18,860 --> 00:16:23,040
and the other advantage of having fully

308
00:16:23,040 --> 00:16:26,279
knowledge of oils and output files that

309
00:16:26,279 --> 00:16:29,279
you can't send them and actually to be

310
00:16:29,279 --> 00:16:31,949
executed to a remote place so we don't

311
00:16:31,949 --> 00:16:32,790
have to build everything on your

312
00:16:32,790 --> 00:16:35,820
organization you can use a milk glass

313
00:16:35,820 --> 00:16:41,519
that you have in that one and that using

314
00:16:41,519 --> 00:16:43,889
a birth cluster was fully declared upon

315
00:16:43,889 --> 00:16:46,500
outputs is really powerful in a

316
00:16:46,500 --> 00:16:49,110
situation like Google where basically

317
00:16:49,110 --> 00:16:53,839
every base metal a setting that is

318
00:16:53,839 --> 00:16:57,930
between different developers not only

319
00:16:57,930 --> 00:17:01,050
not compiling a file if you already know

320
00:17:01,050 --> 00:17:03,329
if someone else work on the same code

321
00:17:03,329 --> 00:17:06,809
base did it because then the church we

322
00:17:06,809 --> 00:17:09,030
want execution will tell you I know the

323
00:17:09,030 --> 00:17:13,799
answer that is is it and as I said so if

324
00:17:13,799 --> 00:17:15,780
it working the same code base that can

325
00:17:15,780 --> 00:17:19,880
save a lot of time and be very efficient

326
00:17:19,880 --> 00:17:24,209
okay that's the general idea of how it

327
00:17:24,209 --> 00:17:28,799
works and now I chose C program what

328
00:17:28,799 --> 00:17:31,110
about other languages so first of all

329
00:17:31,110 --> 00:17:34,290
business specialized knowledge about a

330
00:17:34,290 --> 00:17:37,049
lot of programming languages including C

331
00:17:37,049 --> 00:17:44,030
C++ Java pious and in about it also has

332
00:17:44,030 --> 00:17:47,400
generic rules in particular called

333
00:17:47,400 --> 00:17:51,809
general which is well generically to to

334
00:17:51,809 --> 00:17:56,190
generate artifacts it's basically just

335
00:17:56,190 --> 00:18:00,360
no it is a shadow Marta say execute the

336
00:18:00,360 --> 00:18:02,040
check amount from these inputs and

337
00:18:02,040 --> 00:18:05,760
outputs and to specify the market

338
00:18:05,760 --> 00:18:09,080
variables that might look familiar its

339
00:18:09,080 --> 00:18:13,740
dollar add stole the lesson and so on so

340
00:18:13,740 --> 00:18:15,150
that rule should look pretty familiar

341
00:18:15,150 --> 00:18:18,410
basically the only

342
00:18:18,670 --> 00:18:22,160
but at least it means your generically

343
00:18:22,160 --> 00:18:25,220
enough to build arbitrary things because

344
00:18:25,220 --> 00:18:29,690
we can do that and in your next Arace is

345
00:18:29,690 --> 00:18:33,580
a second one so you can build it

346
00:18:33,580 --> 00:18:36,500
nevertheless as I mentioned that the

347
00:18:36,500 --> 00:18:39,980
ideas serve a central declarative place

348
00:18:39,980 --> 00:18:47,690
about how to build things so oh yes

349
00:18:47,690 --> 00:18:49,580
finally if you want a central place

350
00:18:49,580 --> 00:18:52,460
where you have the knowledge of how to

351
00:18:52,460 --> 00:18:55,370
build things and mm scale and all that

352
00:18:55,370 --> 00:18:57,830
information to base it because they're

353
00:18:57,830 --> 00:18:59,330
more and more programming language and

354
00:18:59,330 --> 00:18:59,570
so on

355
00:18:59,570 --> 00:19:02,540
coming up over and over again I mean it

356
00:19:02,540 --> 00:19:04,640
worked as long as it was a to trust for

357
00:19:04,640 --> 00:19:06,980
one company where you all the languages

358
00:19:06,980 --> 00:19:10,520
you have and could head and control the

359
00:19:10,520 --> 00:19:13,220
to yourself but you know that's not a

360
00:19:13,220 --> 00:19:15,530
good approach tor and specialized

361
00:19:15,530 --> 00:19:17,240
knowledge of each and every language in

362
00:19:17,240 --> 00:19:20,240
the world into a single tool so that's

363
00:19:20,240 --> 00:19:23,870
why there well there's a need for a way

364
00:19:23,870 --> 00:19:25,100
to extend the built has but they

365
00:19:25,100 --> 00:19:28,700
actually is one and that's for Scylla

366
00:19:28,700 --> 00:19:34,310
it's it's an extension language it's has

367
00:19:34,310 --> 00:19:38,530
a syntax that looks quite similar

368
00:19:38,530 --> 00:19:42,890
semantics is quite similar but it's well

369
00:19:42,890 --> 00:19:46,150
it's basically is - restricted to some

370
00:19:46,150 --> 00:19:49,460
core we don't have too far reach side

371
00:19:49,460 --> 00:19:51,110
effects so that he can evaluate it's

372
00:19:51,110 --> 00:19:54,860
locally don't influence state and have

373
00:19:54,860 --> 00:19:56,180
at least the declaration of what you

374
00:19:56,180 --> 00:20:00,070
want to put in a very insulated way

375
00:20:01,060 --> 00:20:03,040
because the you Justin is the one for

376
00:20:03,040 --> 00:20:08,200
you so in the simple case and as I

377
00:20:08,200 --> 00:20:09,940
hinted on the gender well that is quite

378
00:20:09,940 --> 00:20:13,500
a generic case already is that you can

379
00:20:13,500 --> 00:20:16,630
code up the knowledge how to build your

380
00:20:16,630 --> 00:20:19,980
language that isn't the basil and

381
00:20:19,980 --> 00:20:22,540
describe how to compile that language by

382
00:20:22,540 --> 00:20:25,930
means of already existing rules I mean

383
00:20:25,930 --> 00:20:28,180
it could be just generals all over the

384
00:20:28,180 --> 00:20:32,110
place so the typical example yes to

385
00:20:32,110 --> 00:20:33,370
build the language to trusted to run

386
00:20:33,370 --> 00:20:36,190
that shelter and by the way you have

387
00:20:36,190 --> 00:20:41,770
several targets for the binary and

388
00:20:41,770 --> 00:20:46,480
binary just from their source you can

389
00:20:46,480 --> 00:20:48,640
derive several targets that's typically

390
00:20:48,640 --> 00:20:50,890
some this documentation yes it would

391
00:20:50,890 --> 00:20:52,660
ever our sefa and then you carry the

392
00:20:52,660 --> 00:20:55,720
manager web patients on and they want to

393
00:20:55,720 --> 00:20:58,150
have an one rule and yeah commands for

394
00:20:58,150 --> 00:21:00,220
that so that would be face yes it's a

395
00:21:00,220 --> 00:21:03,040
general and I generate these five states

396
00:21:03,040 --> 00:21:05,200
from that source fire event whenever I

397
00:21:05,200 --> 00:21:08,020
write that technologists I please hit

398
00:21:08,020 --> 00:21:10,570
all the know all the words to do those

399
00:21:10,570 --> 00:21:14,560
things and here's example how suggesting

400
00:21:14,560 --> 00:21:16,630
look like and as promised the language

401
00:21:16,630 --> 00:21:20,830
really looks like person including all

402
00:21:20,830 --> 00:21:23,800
the things that you can pass parameters

403
00:21:23,800 --> 00:21:28,500
by name and not only positional which is

404
00:21:28,500 --> 00:21:31,030
very useful you can add support values

405
00:21:31,030 --> 00:21:34,620
for parameters you can do some simple

406
00:21:34,620 --> 00:21:39,400
computations and then you can well and

407
00:21:39,400 --> 00:21:42,270
you can manage to already existing rules

408
00:21:42,270 --> 00:21:45,250
like the general which is the native

409
00:21:45,250 --> 00:21:48,480
food and

410
00:21:48,490 --> 00:21:55,340
yeah so simple enough and assisted you

411
00:21:55,340 --> 00:21:58,520
can even the typical case not only to

412
00:21:58,520 --> 00:22:00,310
some computations on the parameter to

413
00:22:00,310 --> 00:22:02,630
set up your command and that all the

414
00:22:02,630 --> 00:22:05,150
language correctly and then

415
00:22:05,150 --> 00:22:08,690
american-made foods can also do that

416
00:22:08,690 --> 00:22:10,430
additionally depending on parameters or

417
00:22:10,430 --> 00:22:12,710
you can map to multiple nature tools so

418
00:22:12,710 --> 00:22:14,990
that by one declaration you declare a

419
00:22:14,990 --> 00:22:17,240
bunch of targets that semantically you

420
00:22:17,240 --> 00:22:21,680
know together so you write such an

421
00:22:21,680 --> 00:22:24,560
extension in a separate file with the

422
00:22:24,560 --> 00:22:27,620
ending dot pzl and then in a build file

423
00:22:27,620 --> 00:22:29,660
or in every go file that means that

424
00:22:29,660 --> 00:22:32,480
extension you load it by saying this is

425
00:22:32,480 --> 00:22:34,640
the fire where the extension is

426
00:22:34,640 --> 00:22:37,550
subscribed and specifying the symbols

427
00:22:37,550 --> 00:22:40,580
you want to import from that tie so that

428
00:22:40,580 --> 00:22:42,890
by reading about firing you actually

429
00:22:42,890 --> 00:22:44,270
know what is in your name space are not

430
00:22:44,270 --> 00:22:49,850
suddenly accidentally declare commands

431
00:22:49,850 --> 00:22:54,770
you not aware of and I don't have an

432
00:22:54,770 --> 00:22:58,160
example for that but sky rocket sauce

433
00:22:58,160 --> 00:23:00,710
was has full access to the actual

434
00:23:00,710 --> 00:23:03,350
interface so in the more complicated

435
00:23:03,350 --> 00:23:06,980
cases you can really not only refer to

436
00:23:06,980 --> 00:23:10,010
later fools but specify actions in

437
00:23:10,010 --> 00:23:13,910
detail including all the things that

438
00:23:13,910 --> 00:23:16,220
native foods can do like check the

439
00:23:16,220 --> 00:23:19,940
parameters for tides technical

440
00:23:19,940 --> 00:23:23,060
parameters are present and this kind of

441
00:23:23,060 --> 00:23:26,900
things so I won't go into more details

442
00:23:26,900 --> 00:23:29,960
of Scylla instead answer the question

443
00:23:29,960 --> 00:23:32,900
that comes up occasionally is whether

444
00:23:32,900 --> 00:23:35,210
they did it take so long when there's

445
00:23:35,210 --> 00:23:37,190
the whole process of sourcing takes too

446
00:23:37,190 --> 00:23:37,550
long

447
00:23:37,550 --> 00:23:39,350
I said yes it was

448
00:23:39,350 --> 00:23:42,049
fifteen and in a census to going on

449
00:23:42,049 --> 00:23:43,700
there some tests which are not open

450
00:23:43,700 --> 00:23:46,250
source there are some functionality

451
00:23:46,250 --> 00:23:48,260
which we intend to have hopeless Oscar

452
00:23:48,260 --> 00:23:51,400
is not there yet

453
00:23:51,400 --> 00:23:55,870
yeah and there is to remember that is

454
00:23:55,870 --> 00:23:58,520
only we can open source project after

455
00:23:58,520 --> 00:24:03,049
lot of years of internal usage on a

456
00:24:03,049 --> 00:24:08,090
single repository I mean large one but a

457
00:24:08,090 --> 00:24:11,150
single one and in fact as I said its

458
00:24:11,150 --> 00:24:12,980
base is another father of the two years

459
00:24:12,980 --> 00:24:15,080
at Google it is the same tool just

460
00:24:15,080 --> 00:24:17,720
Google some extent was compiled in so

461
00:24:17,720 --> 00:24:20,659
that also means that everything has to

462
00:24:20,659 --> 00:24:23,630
work all the time also for the non

463
00:24:23,630 --> 00:24:27,289
published use cases who can afford to

464
00:24:27,289 --> 00:24:29,870
and not have been gestured software for

465
00:24:29,870 --> 00:24:32,740
extended period of time

466
00:24:32,740 --> 00:24:37,880
but once yeah but from that history that

467
00:24:37,880 --> 00:24:39,770
is used for years only for an intern in

468
00:24:39,770 --> 00:24:44,299
this case a lot of properties of the

469
00:24:44,299 --> 00:24:46,370
codebase arose which made it hard of the

470
00:24:46,370 --> 00:24:48,110
sauce that are still blocked open source

471
00:24:48,110 --> 00:24:51,250
of some tests the one is sitting at 41

472
00:24:51,250 --> 00:24:53,450
huge code bases a lot of useful

473
00:24:53,450 --> 00:24:55,820
libraries they tend to use there are a

474
00:24:55,820 --> 00:25:00,049
lot of dependencies including library

475
00:25:00,049 --> 00:25:03,020
that solve a problem that also the sauce

476
00:25:03,020 --> 00:25:04,789
that is what I thought but they are

477
00:25:04,789 --> 00:25:08,330
moving specific internal technology and

478
00:25:08,330 --> 00:25:11,600
so on and of course if you want to make

479
00:25:11,600 --> 00:25:12,980
a tool of the sourcing it all the

480
00:25:12,980 --> 00:25:15,950
dependencies of a sauce so cutting

481
00:25:15,950 --> 00:25:17,330
dependencies of finding the best

482
00:25:17,330 --> 00:25:23,020
libraries the big task yeah so economy

483
00:25:23,020 --> 00:25:30,049
just easy to do it and historically is

484
00:25:30,049 --> 00:25:31,490
the most is only code base if there was

485
00:25:31,490 --> 00:25:34,640
a big focus on these languages that are

486
00:25:34,640 --> 00:25:37,610
widely used Google so the whole

487
00:25:37,610 --> 00:25:38,630
extension

488
00:25:38,630 --> 00:25:41,270
if Scylla is something that only very

489
00:25:41,270 --> 00:25:46,039
late in the process okay and also still

490
00:25:46,039 --> 00:25:49,789
there's bit of focus on the Builder

491
00:25:49,789 --> 00:25:51,410
languages and we're trying to remove

492
00:25:51,410 --> 00:25:54,890
that and make it imaginary tool oh yeah

493
00:25:54,890 --> 00:25:56,870
and if you have a large code base then

494
00:25:56,870 --> 00:26:00,970
it's very easy to or if you have only

495
00:26:00,970 --> 00:26:03,950
one code base where things are supposed

496
00:26:03,950 --> 00:26:05,799
to work and going build everything from

497
00:26:05,799 --> 00:26:08,270
then you have the advantage that for all

498
00:26:08,270 --> 00:26:10,100
interfaces you know all the core sites

499
00:26:10,100 --> 00:26:14,090
that can change it easily which is not

500
00:26:14,090 --> 00:26:16,270
that nice for an open-source project if

501
00:26:16,270 --> 00:26:20,809
things change all the time and of course

502
00:26:20,809 --> 00:26:24,169
it is it wasn't intended originally the

503
00:26:24,169 --> 00:26:26,450
sauce project we find hard-coded paths

504
00:26:26,450 --> 00:26:29,870
everywhere and I mean a lot of things

505
00:26:29,870 --> 00:26:31,549
that are all easy to fix but in some

506
00:26:31,549 --> 00:26:33,919
that's why it takes such a while to get

507
00:26:33,919 --> 00:26:40,190
it so us yeah a lot of small pieces like

508
00:26:40,190 --> 00:26:46,640
that that's by the process of the system

509
00:26:46,640 --> 00:26:48,860
is still in parts going on in so what is

510
00:26:48,860 --> 00:26:50,480
open source is a useful tool and it's

511
00:26:50,480 --> 00:26:55,010
alright and that brings me to the

512
00:26:55,010 --> 00:26:55,429
roadmap

513
00:26:55,429 --> 00:26:59,330
where is basic trying to move to so the

514
00:26:59,330 --> 00:27:01,100
beta on this phase 1 of 0

515
00:27:01,100 --> 00:27:03,140
I'm messing on a rope that we currently

516
00:27:03,140 --> 00:27:05,720
say we want to be there sometime next

517
00:27:05,720 --> 00:27:11,270
year hopefully what does it mean so the

518
00:27:11,270 --> 00:27:14,000
first thing is we want the public

519
00:27:14,000 --> 00:27:15,980
repository to be the primary one at the

520
00:27:15,980 --> 00:27:18,500
moment the Google intern repository is

521
00:27:18,500 --> 00:27:21,080
the primary one and then at least once a

522
00:27:21,080 --> 00:27:21,590
day

523
00:27:21,590 --> 00:27:23,799
it's gets exported to the public one

524
00:27:23,799 --> 00:27:26,470
that sounds more like a technical

525
00:27:26,470 --> 00:27:29,150
technical detail were committed the

526
00:27:29,150 --> 00:27:31,940
first and then exported but that has a

527
00:27:31,940 --> 00:27:35,360
lot of consequences in particular since

528
00:27:35,360 --> 00:27:38,760
you first first of all we want to first

529
00:27:38,760 --> 00:27:43,650
auditory that means the intensity to be

530
00:27:43,650 --> 00:27:44,970
well defined the conduit is the moment

531
00:27:44,970 --> 00:27:46,890
you trust is but internally run all the

532
00:27:46,890 --> 00:27:49,620
internal tests that you care about and

533
00:27:49,620 --> 00:27:54,419
then similar some success that is a big

534
00:27:54,419 --> 00:27:56,040
commitment saying me to get the

535
00:27:56,040 --> 00:27:58,200
interfaces well documented and well

536
00:27:58,200 --> 00:28:01,350
tested because the is using that we

537
00:28:01,350 --> 00:28:03,960
can't afford had engineers not able to

538
00:28:03,960 --> 00:28:10,679
for a long time and to be a proper

539
00:28:10,679 --> 00:28:12,960
source project we also want all the

540
00:28:12,960 --> 00:28:15,900
design reviews in public we working

541
00:28:15,900 --> 00:28:17,730
groups whatever there's still some use

542
00:28:17,730 --> 00:28:20,610
cases which are goo the only and so

543
00:28:20,610 --> 00:28:25,910
sometimes things come up but there is

544
00:28:25,910 --> 00:28:28,710
more more going the direction of having

545
00:28:28,710 --> 00:28:32,990
generic interfaces and of design reviews

546
00:28:32,990 --> 00:28:35,640
and at the moment it happens that's the

547
00:28:35,640 --> 00:28:38,549
whole core team are persons employed at

548
00:28:38,549 --> 00:28:42,540
Google which is for a to open-source

549
00:28:42,540 --> 00:28:46,100
project we the optimist extended base

550
00:28:46,100 --> 00:28:49,169
and I said meaning prerequisite for that

551
00:28:49,169 --> 00:28:54,500
is to getting stable and well-documented

552
00:28:54,559 --> 00:28:58,650
and what is the big goal any further a

553
00:28:58,650 --> 00:29:01,290
lot of kind of technical improvements

554
00:29:01,290 --> 00:29:04,010
that we hope to solve on the way there

555
00:29:04,010 --> 00:29:06,480
for example we'd like to improve the

556
00:29:06,480 --> 00:29:08,460
world Institute here I said remote

557
00:29:08,460 --> 00:29:10,290
executors very powerful especially we

558
00:29:10,290 --> 00:29:13,410
can share caches between different

559
00:29:13,410 --> 00:29:15,000
persons work in the same codebase

560
00:29:15,000 --> 00:29:20,669
so how does have an execution does have

561
00:29:20,669 --> 00:29:22,790
an API and the prototype implementation

562
00:29:22,790 --> 00:29:26,580
and what we hope to make that more

563
00:29:26,580 --> 00:29:29,200
standard

564
00:29:29,200 --> 00:29:32,350
and used by a lot of people and get out

565
00:29:32,350 --> 00:29:38,019
of this prototypical state and set for

566
00:29:38,019 --> 00:29:42,250
it to become a community project and to

567
00:29:42,250 --> 00:29:45,909
be a generically useful to we aim to be

568
00:29:45,909 --> 00:29:49,630
more repositories of specialized search

569
00:29:49,630 --> 00:29:51,669
rules for languages which aren't that

570
00:29:51,669 --> 00:29:54,429
important within Google and hope that

571
00:29:54,429 --> 00:29:56,380
there's a community contributed in all

572
00:29:56,380 --> 00:29:58,539
the is a community and we hope that this

573
00:29:58,539 --> 00:30:00,789
increases and there's a good collection

574
00:30:00,789 --> 00:30:05,470
of rules so that basic can become more a

575
00:30:05,470 --> 00:30:07,240
language agnostic tool that knows how to

576
00:30:07,240 --> 00:30:10,360
organize compiling how to do caching

577
00:30:10,360 --> 00:30:13,090
correctly dependency tracking and have

578
00:30:13,090 --> 00:30:14,880
the specialist knowledge about

579
00:30:14,880 --> 00:30:18,399
individual programming languages in a

580
00:30:18,399 --> 00:30:21,299
separate place

581
00:30:28,580 --> 00:30:32,880
and the other thing which best can be

582
00:30:32,880 --> 00:30:34,980
work going on is improving the story of

583
00:30:34,980 --> 00:30:36,870
remote repositories I said that there's

584
00:30:36,870 --> 00:30:39,600
something that only came up became an

585
00:30:39,600 --> 00:30:42,210
issue with open sourcing as within

586
00:30:42,210 --> 00:30:43,790
Google there's only that one repository

587
00:30:43,790 --> 00:30:46,830
me it's work you can specify remote

588
00:30:46,830 --> 00:30:48,630
repositories as a dependency in a build

589
00:30:48,630 --> 00:30:50,400
file they get hatched they get a

590
00:30:50,400 --> 00:30:51,950
compiled

591
00:30:51,950 --> 00:30:56,640
Medela improve things to improve in

592
00:30:56,640 --> 00:30:58,559
particular recognizing you had something

593
00:30:58,559 --> 00:31:00,690
in the hash value or they declared

594
00:31:00,690 --> 00:31:02,370
virtually unchanged doesn't matter that

595
00:31:02,370 --> 00:31:03,600
you're not catching it from a separate

596
00:31:03,600 --> 00:31:07,380
place the silicon cash it or even saying

597
00:31:07,380 --> 00:31:09,000
yes you know these are the artifacts

598
00:31:09,000 --> 00:31:10,650
coming out of that remote repository

599
00:31:10,650 --> 00:31:13,440
don't even need to recompile that their

600
00:31:13,440 --> 00:31:14,970
post areas have changed

601
00:31:14,970 --> 00:31:17,460
then what about because of remote

602
00:31:17,460 --> 00:31:20,340
dependencies if somewhat repository

603
00:31:20,340 --> 00:31:22,710
depends on another boat repository and

604
00:31:22,710 --> 00:31:24,920
what if to that point to the same thing

605
00:31:24,920 --> 00:31:28,740
so there is there it is working

606
00:31:28,740 --> 00:31:30,360
principle there's a lot of more

607
00:31:30,360 --> 00:31:32,910
improvements to be made and working on

608
00:31:32,910 --> 00:31:36,210
it and lot of small deeds is also

609
00:31:36,210 --> 00:31:38,730
something which I didn't mention the

610
00:31:38,730 --> 00:31:40,530
size but it's also very big is on the

611
00:31:40,530 --> 00:31:42,750
platform so making sure base runs well

612
00:31:42,750 --> 00:31:47,880
on iOS on Windows the witness especially

613
00:31:47,880 --> 00:31:53,850
is a lot of work going on yeah so to sum

614
00:31:53,850 --> 00:32:00,210
up what are the approaches of Basel has

615
00:32:00,210 --> 00:32:02,010
a declarative approach so you say what

616
00:32:02,010 --> 00:32:03,750
you want to build and then have a

617
00:32:03,750 --> 00:32:05,160
separate place we have the knowledge how

618
00:32:05,160 --> 00:32:06,110
to build it

619
00:32:06,110 --> 00:32:08,670
you really track all the dependencies

620
00:32:08,670 --> 00:32:10,740
including towards including things that

621
00:32:10,740 --> 00:32:15,120
are implicit arrest by a tool and that

622
00:32:15,120 --> 00:32:17,790
is what ensures correctness and you have

623
00:32:17,790 --> 00:32:20,370
some supports to help you really know

624
00:32:20,370 --> 00:32:23,850
what you're reading boxes and that

625
00:32:23,850 --> 00:32:26,370
foreknowledge enables hospice because

626
00:32:26,370 --> 00:32:29,700
can Marcus and Nikesh and executes

627
00:32:29,700 --> 00:32:31,170
remotely very easily because you know

628
00:32:31,170 --> 00:32:34,340
what is needed and can share that

629
00:32:34,340 --> 00:32:38,059
between different it's a different

630
00:32:38,059 --> 00:32:41,720
people working on the same code base and

631
00:32:41,720 --> 00:32:44,660
it is open source and the plan is to

632
00:32:44,660 --> 00:32:47,100
committed and there is some commitment

633
00:32:47,100 --> 00:32:50,270
to that of the palace to get a fully use

634
00:32:50,270 --> 00:32:53,730
oh it is already useful too but make it

635
00:32:53,730 --> 00:32:55,350
a more community project not a project

636
00:32:55,350 --> 00:32:58,830
dominated by one company and you are

637
00:32:58,830 --> 00:33:01,350
invited to try by yourself so there's a

638
00:33:01,350 --> 00:33:03,830
home page the whole core design github

639
00:33:03,830 --> 00:33:06,450
there are too many lists one for people

640
00:33:06,450 --> 00:33:09,330
who just want to use the tool and start

641
00:33:09,330 --> 00:33:11,460
mailing lists for discussion on how to

642
00:33:11,460 --> 00:33:16,559
extend beta further how to develop it we

643
00:33:16,559 --> 00:33:20,070
see channel and all release it is for

644
00:33:20,070 --> 00:33:26,340
release artifacts are signed and free so

645
00:33:26,340 --> 00:33:30,179
that is the end of my presentation and I

646
00:33:30,179 --> 00:33:32,070
give a question and we also have a stand

647
00:33:32,070 --> 00:33:35,730
next door where can meet the base

648
00:33:35,730 --> 00:33:39,620
developers today and tomorrow

649
00:33:40,810 --> 00:33:44,210
[Applause]

650
00:33:46,310 --> 00:33:50,510
[Applause]

651
00:33:53,429 --> 00:33:57,130
hello thank you for presentation

652
00:33:57,130 --> 00:34:01,570
are there any plans on making Bissell

653
00:34:01,570 --> 00:34:05,350
more modular right now with one big

654
00:34:05,350 --> 00:34:07,480
binary file which stays about

655
00:34:07,480 --> 00:34:11,168
dependencies this hundred plus megabytes

656
00:34:11,168 --> 00:34:15,190
I know this could be necessary for for

657
00:34:15,190 --> 00:34:16,960
the requital should burn to make it

658
00:34:16,960 --> 00:34:21,850
useful but so I'm not sure what you mean

659
00:34:21,850 --> 00:34:24,810
by more modular so the code itself is

660
00:34:24,810 --> 00:34:27,969
organized - that's awesome internal

661
00:34:27,969 --> 00:34:32,190
interface working at morality and

662
00:34:32,190 --> 00:34:34,510
another thing that goes in the direction

663
00:34:34,510 --> 00:34:37,659
of modularity is to get more specialized

664
00:34:37,659 --> 00:34:40,480
knowledge all of the tool into file

665
00:34:40,480 --> 00:34:43,330
describing builds that it probably will

666
00:34:43,330 --> 00:34:48,369
always be a kind of biggest binary and

667
00:34:48,369 --> 00:34:50,199
this certainly won't get rid of the

668
00:34:50,199 --> 00:35:01,540
dependencies of so you can remove that

669
00:35:01,540 --> 00:35:07,050
all of the dependencies in the binary

670
00:35:09,990 --> 00:35:14,160
the reason why - of

671
00:35:16,420 --> 00:35:19,460
there are all plants of a direction but

672
00:35:19,460 --> 00:35:22,400
I don't think they are the highest

673
00:35:22,400 --> 00:35:24,619
priority at the moment so there are

674
00:35:24,619 --> 00:35:27,619
plans to make it a more generic tool and

675
00:35:27,619 --> 00:35:30,020
not one about everything but on the

676
00:35:30,020 --> 00:35:32,270
other hand it's very useful if you have

677
00:35:32,270 --> 00:35:36,230
one binary that just works which also X

678
00:35:36,230 --> 00:35:38,900
employment in that is a big thing but

679
00:35:38,900 --> 00:35:51,190
there are variations thank you for it

680
00:35:51,190 --> 00:35:53,560
one question is this specific tool to be

681
00:35:53,560 --> 00:35:56,560
history why did you decide to what

682
00:35:56,560 --> 00:35:58,740
sources now like five years ago

683
00:35:58,740 --> 00:36:02,350
particular reason and another one who we

684
00:36:02,350 --> 00:36:07,200
see Android and chrome you see this

685
00:36:07,830 --> 00:36:22,060
second question yes Android well so we

686
00:36:22,060 --> 00:36:24,210
are

687
00:36:42,800 --> 00:36:46,010
our buttocks are in that stable yet so

688
00:36:46,010 --> 00:36:49,109
it will take a while before we

689
00:36:49,109 --> 00:36:52,190
we certainly hope that

690
00:36:52,190 --> 00:36:55,950
and the question is awesome now earlier

691
00:36:55,950 --> 00:36:58,320
that's you know better because I talked

692
00:36:58,320 --> 00:37:00,390
to Mona here I'm happy that I could join

693
00:37:00,390 --> 00:37:02,580
of the source project because I like

694
00:37:02,580 --> 00:37:04,200
working the open source and is having

695
00:37:04,200 --> 00:37:10,970
contact okay why why not

696
00:37:17,090 --> 00:37:20,930
they can talk about it

697
00:37:56,690 --> 00:37:59,789
[Music]

698
00:38:07,600 --> 00:38:10,600
okay

699
00:38:26,460 --> 00:38:29,630
[Music]

700
00:38:36,420 --> 00:38:39,070
[Music]

701
00:38:39,070 --> 00:38:42,980
and declare target and the information

702
00:38:42,980 --> 00:38:48,940
into the declare minor changes then only

703
00:38:48,940 --> 00:38:51,940
valid

704
00:38:52,820 --> 00:38:56,280
so it's all women as far as I know it

705
00:38:56,280 --> 00:38:58,950
doesn't affect the value the content of

706
00:38:58,950 --> 00:39:02,100
external tools so if it's happy to sneak

707
00:39:02,100 --> 00:39:04,140
in a new compiler and that wouldn't burn

708
00:39:04,140 --> 00:39:06,990
notice but video declare you want to

709
00:39:06,990 --> 00:39:09,270
build four different to China

710
00:39:09,270 --> 00:39:14,160
let us noticed okay thanks man you

711
00:39:14,160 --> 00:39:16,560
decide I'm going to use GCC 5.4 for

712
00:39:16,560 --> 00:39:19,410
example if you change that everything

713
00:39:19,410 --> 00:39:22,040
clouds everything

714
00:39:30,460 --> 00:39:34,680
yes I don't know

715
00:39:42,590 --> 00:39:45,789
[Music]

716
00:39:52,369 --> 00:40:26,190
okay so this is knowledge about the

717
00:40:26,190 --> 00:40:37,350
various various but being that you have

718
00:40:37,350 --> 00:40:41,280
to describe how horrible burst but you

719
00:40:41,280 --> 00:40:43,770
can talk into a given source free or

720
00:40:43,770 --> 00:40:45,780
built file that then has a specialized

721
00:40:45,780 --> 00:40:57,160
information that doesn't questions

722
00:40:57,160 --> 00:41:01,140
except for the beach I want right so

723
00:41:01,140 --> 00:41:03,640
important we need to compile it's on a

724
00:41:03,640 --> 00:41:05,559
platform where somebody's finally not

725
00:41:05,559 --> 00:41:07,809
available but they're so resources

726
00:41:07,809 --> 00:41:09,720
enough to on it sorry

727
00:41:09,720 --> 00:41:13,269
what a gate project needs to file on a

728
00:41:13,269 --> 00:41:15,460
platform where Java either is not

729
00:41:15,460 --> 00:41:17,650
available or it's too big of a

730
00:41:17,650 --> 00:41:22,150
dependency machine so the question was

731
00:41:22,150 --> 00:41:24,309
what do we do it is not available

732
00:41:24,309 --> 00:41:28,119
so basically itself is in Britain Java

733
00:41:28,119 --> 00:41:30,880
so on the host platform you need to be

734
00:41:30,880 --> 00:41:33,930
able to run powerful otherwise economy

735
00:41:33,930 --> 00:41:36,670
but the other prostitution you can cross

736
00:41:36,670 --> 00:41:38,589
compile for a platform where you don't

737
00:41:38,589 --> 00:41:42,160
need to run java if if the problem you

738
00:41:42,160 --> 00:41:49,980
trying to is a second question or so

739
00:41:49,980 --> 00:41:52,869
committing code base over the choir

740
00:41:52,869 --> 00:41:56,940
signup the CLA sorry does just

741
00:41:56,940 --> 00:41:59,200
contributing to the code requires flying

742
00:41:59,200 --> 00:42:04,990
a CLA yes continue duty to that requires

743
00:42:04,990 --> 00:42:09,160
a steal a scientist ela question the

744
00:42:09,160 --> 00:42:14,650
answers yes it does and so but the call

745
00:42:14,650 --> 00:42:16,269
itself want to be a personalized so if

746
00:42:16,269 --> 00:42:19,150
you say corporate Google taken and the

747
00:42:19,150 --> 00:42:21,309
ability to four teams I would prefer

748
00:42:21,309 --> 00:42:24,779
that either

749
00:42:31,940 --> 00:42:35,030
[Music]

750
00:42:48,960 --> 00:42:52,360
okay so the st. Mark's family knows we

751
00:42:52,360 --> 00:42:56,200
use the username space and then we

752
00:42:56,200 --> 00:42:58,480
create a mountain a space in a network

753
00:42:58,480 --> 00:43:01,330
namespace and that we set those up to

754
00:43:01,330 --> 00:43:03,100
show just the files that you have

755
00:43:03,100 --> 00:43:07,870
declared and I mean effectively one is

756
00:43:07,870 --> 00:43:11,830
your user but the rights work out in

757
00:43:11,830 --> 00:43:16,890
some way on Magnus we use the existing

758
00:43:16,890 --> 00:43:19,270
microwave sandbox a mechanism in which

759
00:43:19,270 --> 00:43:22,510
you know probably on Windows we don't

760
00:43:22,510 --> 00:43:24,880
currently have the sandbox but we hope

761
00:43:24,880 --> 00:43:27,840
that at some point

762
00:43:42,860 --> 00:43:45,959
[Music]

763
00:44:23,700 --> 00:44:56,469
and then after we have all the building

764
00:44:56,469 --> 00:44:59,579
down and to package our binary library

765
00:44:59,579 --> 00:45:06,029
into packages I can be answered yes so

766
00:45:06,029 --> 00:45:08,969
so the question was ten paces package

767
00:45:08,969 --> 00:45:12,549
the architects created and the answers

768
00:45:12,549 --> 00:45:15,660
business knowledge about certain package

769
00:45:15,660 --> 00:45:19,539
formats as far as I know deputy dr.

770
00:45:19,539 --> 00:45:24,099
Deming packages and he ends and both are

771
00:45:24,099 --> 00:45:29,170
obviously and else is already existing

772
00:45:29,170 --> 00:45:33,099
but the planets is there more packaging

773
00:45:33,099 --> 00:45:35,890
Comets need and then to have that as

774
00:45:35,890 --> 00:45:37,359
tensions that are compiling more

775
00:45:37,359 --> 00:45:39,099
specialized luncheon to the original

776
00:45:39,099 --> 00:45:42,759
binary but I mean whatever you know how

777
00:45:42,759 --> 00:45:44,739
to put by the way you can also is a

778
00:45:44,739 --> 00:45:47,470
generator artifacts to get new artifact

779
00:45:47,470 --> 00:45:51,309
which is when the page this just

780
00:45:51,309 --> 00:45:53,880
effectors

781
00:46:00,500 --> 00:46:03,890
you said one of your goals was support

782
00:46:03,890 --> 00:46:07,010
for Windows but but you said if you

783
00:46:07,010 --> 00:46:09,740
speche in your latest extensions how

784
00:46:09,740 --> 00:46:14,560
does that fit with your golden windows

785
00:46:14,560 --> 00:46:18,830
ok so the question was based on Windows

786
00:46:18,830 --> 00:46:21,410
and how does it fit with you have rules

787
00:46:21,410 --> 00:46:26,000
that explicitly called mesh I mean you

788
00:46:26,000 --> 00:46:29,330
can only of course you'll always be the

789
00:46:29,330 --> 00:46:33,490
tool trained to be present and the

790
00:46:33,490 --> 00:46:36,370
target so there is something like

791
00:46:36,370 --> 00:46:38,990
whirlwind special windows and if you

792
00:46:38,990 --> 00:46:41,960
want to write a rule in beshte 0 both

793
00:46:41,960 --> 00:46:44,570
language as they are compiled language

794
00:46:44,570 --> 00:46:47,570
many Methodist or mesh but they are

795
00:46:47,570 --> 00:46:50,930
plans to have ruled that are specific to

796
00:46:50,930 --> 00:46:53,870
language like compiling C code parallel

797
00:46:53,870 --> 00:46:57,020
with the nature to chain but you need a

798
00:46:57,020 --> 00:46:59,240
tool you have to have it on the missions

799
00:46:59,240 --> 00:47:01,340
where you're building there's so much

800
00:47:01,340 --> 00:47:04,510
way around that

801
00:47:18,740 --> 00:47:20,540
we've been on one more question after

802
00:47:20,540 --> 00:47:25,839
that thank you for what is the status of

803
00:47:25,839 --> 00:47:32,589
ID integration like idea or Eclipse IDE

804
00:47:32,589 --> 00:47:36,230
integration you know better because Ione

805
00:47:36,230 --> 00:47:40,400
is playing in extend and come on tide

806
00:47:40,400 --> 00:47:46,490
pools and that works a bad so we have an

807
00:47:46,490 --> 00:47:49,040
experimental plugin for eclipse we have

808
00:47:49,040 --> 00:47:51,320
a supportive plugin for it IntelliJ

809
00:47:51,320 --> 00:47:54,140
which also works with Android studio we

810
00:47:54,140 --> 00:47:56,780
have an eclipse for Xcode we don't plug

811
00:47:56,780 --> 00:48:00,619
in sorry we have a plugin for Xcode

812
00:48:00,619 --> 00:48:04,070
which is all supported we are looking at

813
00:48:04,070 --> 00:48:06,800
providing for visual studio as well but

814
00:48:06,800 --> 00:48:08,839
currently our focus is to make things

815
00:48:08,839 --> 00:48:10,760
work really well on windows first before

816
00:48:10,760 --> 00:48:13,089
we start

817
00:48:14,780 --> 00:48:16,950
we don't have any plans for NetBeans

818
00:48:16,950 --> 00:48:21,470
right now but feel free to come here

819
00:48:28,880 --> 00:48:32,329
there's no more question thank you

820
00:48:32,329 --> 00:48:34,539
everyone

821
00:48:37,340 --> 00:48:41,659
[Applause]

