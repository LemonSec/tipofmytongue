1
00:00:00,079 --> 00:00:03,650
that worked great

2
00:00:04,450 --> 00:00:10,539
I hope I am Tom Jones I'm a researcher

3
00:00:10,539 --> 00:00:13,960
at Universal Aberdeen I work on Internet

4
00:00:13,960 --> 00:00:16,689
transport I currently work on an EU

5
00:00:16,689 --> 00:00:21,009
project which is trying to build a new

6
00:00:21,009 --> 00:00:23,410
soccer API to replace the one we have

7
00:00:23,410 --> 00:00:26,969
and the offers features and

8
00:00:26,969 --> 00:00:29,680
deployability and fall over and

9
00:00:29,680 --> 00:00:33,610
automation it's really cool before that

10
00:00:33,610 --> 00:00:34,899
I'm going to talk about putting boxes on

11
00:00:34,899 --> 00:00:39,340
hills so I start working at University

12
00:00:39,340 --> 00:00:43,090
of Aberdeen in 2014 I was hired into the

13
00:00:43,090 --> 00:00:44,410
electronics research group where we do

14
00:00:44,410 --> 00:00:46,600
cool stuff with satellites and at that

15
00:00:46,600 --> 00:00:49,800
point we had gotten involved with the

16
00:00:49,800 --> 00:00:53,110
craziest UK funding idea you'll ever

17
00:00:53,110 --> 00:00:56,710
hear of it was an interdisciplinary hub

18
00:00:56,710 --> 00:00:59,860
called dot rule there the hub was made

19
00:00:59,860 --> 00:01:03,509
up of social scientists ecologists

20
00:01:03,509 --> 00:01:05,619
biologists transport people and by

21
00:01:05,619 --> 00:01:07,210
transport people I mean like cars and

22
00:01:07,210 --> 00:01:13,810
buses not you interesting transport and

23
00:01:13,810 --> 00:01:15,909
social scientists if you ever want crazy

24
00:01:15,909 --> 00:01:17,409
ideas work with the social scientists

25
00:01:17,409 --> 00:01:22,299
and it's unreal at a part of that rule

26
00:01:22,299 --> 00:01:26,139
we did really strange things so here we

27
00:01:26,139 --> 00:01:27,520
have a picture of the internals of the

28
00:01:27,520 --> 00:01:32,590
camera trap we built the the project was

29
00:01:32,590 --> 00:01:34,299
driven by some sightings on the

30
00:01:34,299 --> 00:01:35,679
quarantine Goren mountain range in

31
00:01:35,679 --> 00:01:38,499
Scotland there are sightings every year

32
00:01:38,499 --> 00:01:40,359
in a month of this really rare birds

33
00:01:40,359 --> 00:01:41,799
that people have been trying to track

34
00:01:41,799 --> 00:01:43,840
down forever and they want to try and

35
00:01:43,840 --> 00:01:45,609
get some idea of what its mating habits

36
00:01:45,609 --> 00:01:48,849
were and how often it visited sites and

37
00:01:48,849 --> 00:01:50,529
they looked at using commercial camera

38
00:01:50,529 --> 00:01:52,450
traps but because we had all this

39
00:01:52,450 --> 00:01:54,039
funding we decided to build something a

40
00:01:54,039 --> 00:01:59,590
bit more complicated so I think this is

41
00:01:59,590 --> 00:02:01,149
one of the very early prototypes where

42
00:02:01,149 --> 00:02:06,929
we use microcontrollers and 6lowpan

43
00:02:06,929 --> 00:02:09,639
later on we replaced all this with a

44
00:02:09,639 --> 00:02:14,450
Raspberry Pi and Arduino camera

45
00:02:14,450 --> 00:02:16,580
activation stuff and then we connected

46
00:02:16,580 --> 00:02:18,650
it all to our huge satellite modem and

47
00:02:18,650 --> 00:02:21,430
we had a satellite link that it hung off

48
00:02:21,430 --> 00:02:23,959
and what we did with this is we took it

49
00:02:23,959 --> 00:02:27,950
up the biggest man range in Scotland and

50
00:02:27,950 --> 00:02:29,720
this comes with its own problems

51
00:02:29,720 --> 00:02:31,700
this marriage is covered in deer not

52
00:02:31,700 --> 00:02:33,709
reindeer but there are weaned you

53
00:02:33,709 --> 00:02:35,660
actually the normal deer that run wild

54
00:02:35,660 --> 00:02:39,380
across here the deer use any rocks or

55
00:02:39,380 --> 00:02:40,880
stones they come across too rough

56
00:02:40,880 --> 00:02:42,709
against so they can remove their antlers

57
00:02:42,709 --> 00:02:45,019
so anything hard on ground level was

58
00:02:45,019 --> 00:02:48,080
going to be attacked repeatedly by angry

59
00:02:48,080 --> 00:02:55,400
deer so you think okay well you just

60
00:02:55,400 --> 00:02:56,599
raised off the ground and you have a

61
00:02:56,599 --> 00:02:58,760
flimsy base but the kangaroo mountain

62
00:02:58,760 --> 00:03:00,290
range also sees the highest wind speeds

63
00:03:00,290 --> 00:03:02,599
in the UK the highest recorded wind

64
00:03:02,599 --> 00:03:05,030
speed in United Kingdom was there like

65
00:03:05,030 --> 00:03:07,190
the end of last year like 136 miles an

66
00:03:07,190 --> 00:03:08,930
hour and I don't know what you can't

67
00:03:08,930 --> 00:03:11,450
really see because it's quite small but

68
00:03:11,450 --> 00:03:13,489
Sally doesn't have any perforation

69
00:03:13,489 --> 00:03:16,970
because it gets to minus 50 C so that

70
00:03:16,970 --> 00:03:18,140
would freeze and the dish would stop

71
00:03:18,140 --> 00:03:21,859
working but it's just a big kite that

72
00:03:21,859 --> 00:03:23,480
you put on a mountain and then it gets

73
00:03:23,480 --> 00:03:25,880
like 139 hour winds and stuff gets blown

74
00:03:25,880 --> 00:03:30,410
away and and this was really hard to

75
00:03:30,410 --> 00:03:34,819
work with this project worked great we

76
00:03:34,819 --> 00:03:36,350
could take pictures of mountains we did

77
00:03:36,350 --> 00:03:40,459
live demos the bird was never seen again

78
00:03:40,459 --> 00:03:42,530
we have no idea what happened to it but

79
00:03:42,530 --> 00:03:45,170
the camera took quite a good number of

80
00:03:45,170 --> 00:03:47,569
pictures of Heather if you don't know

81
00:03:47,569 --> 00:03:49,519
Heather it all looks the same but yeah

82
00:03:49,519 --> 00:03:52,250
so we did this and it was it was great

83
00:03:52,250 --> 00:03:54,850
fun to do a nice piece of engineering

84
00:03:54,850 --> 00:03:57,739
doing this we did a lot of satellite

85
00:03:57,739 --> 00:03:59,810
work and we've done satellite work in

86
00:03:59,810 --> 00:04:01,549
the past we have a long history of doing

87
00:04:01,549 --> 00:04:03,650
it and we started looking at how video

88
00:04:03,650 --> 00:04:05,590
applications work over satellite links

89
00:04:05,590 --> 00:04:06,950
so

90
00:04:06,950 --> 00:04:07,970
satellite links are different than

91
00:04:07,970 --> 00:04:09,049
normal links because you're talking to

92
00:04:09,049 --> 00:04:12,590
something way up in space you have round

93
00:04:12,590 --> 00:04:16,160
trip times of about 750 milliseconds so

94
00:04:16,160 --> 00:04:17,418
anything you do is going to see a

95
00:04:17,418 --> 00:04:20,029
massive delay and this software that's

96
00:04:20,029 --> 00:04:21,168
being written for the internet just

97
00:04:21,168 --> 00:04:23,090
isn't prepared for this there bugs in

98
00:04:23,090 --> 00:04:24,770
Firefox where you can't use a satellite

99
00:04:24,770 --> 00:04:27,370
link that we fixed but

100
00:04:27,370 --> 00:04:30,190
just having a strange set of links gives

101
00:04:30,190 --> 00:04:34,510
you strange circumstances along with

102
00:04:34,510 --> 00:04:36,370
satellite work we do a lot of TCP can

103
00:04:36,370 --> 00:04:38,290
TCP congestion control stuff and this is

104
00:04:38,290 --> 00:04:42,220
where I start to get involved at a

105
00:04:42,220 --> 00:04:45,520
normal TCP connection has these states

106
00:04:45,520 --> 00:04:48,520
that are all time-base we go through

107
00:04:48,520 --> 00:04:51,070
slow start we end up in a steady state

108
00:04:51,070 --> 00:04:54,340
and any loss we see is gonna cause a big

109
00:04:54,340 --> 00:04:57,460
problem to our time slow star is our

110
00:04:57,460 --> 00:05:01,210
exponential growth phase for Oh picture

111
00:05:01,210 --> 00:05:03,460
somewhere so star is an exponential

112
00:05:03,460 --> 00:05:06,310
growth phase and on a satellite link

113
00:05:06,310 --> 00:05:09,850
it's being driven by ax on an RTT so

114
00:05:09,850 --> 00:05:11,680
when you have a loss down and you have

115
00:05:11,680 --> 00:05:13,449
to slow start again up to this slow

116
00:05:13,449 --> 00:05:16,539
start threshold you spend a lot of time

117
00:05:16,539 --> 00:05:18,789
so when you try and browse the web over

118
00:05:18,789 --> 00:05:20,500
satellite link and you have some loss

119
00:05:20,500 --> 00:05:22,960
you have elements not load and things

120
00:05:22,960 --> 00:05:24,850
get really messed up and it's very hard

121
00:05:24,850 --> 00:05:30,100
to keep track of and at this time people

122
00:05:30,100 --> 00:05:34,320
decide decide to do TCP video over HTTP

123
00:05:34,320 --> 00:05:37,870
so instead of using live protocols that

124
00:05:37,870 --> 00:05:41,200
can adapt to loss Netflix and everyone

125
00:05:41,200 --> 00:05:43,270
decided that we will use TCP over HTTP

126
00:05:43,270 --> 00:05:44,800
because it always works against you

127
00:05:44,800 --> 00:05:46,870
firewalls Nats aren't a problem this

128
00:05:46,870 --> 00:05:53,080
would be really great but as the

129
00:05:53,080 --> 00:05:54,340
research community solved very quickly

130
00:05:54,340 --> 00:05:56,770
the HTTP video is very awkward there's a

131
00:05:56,770 --> 00:05:58,720
paper a title that I'll never forget

132
00:05:58,720 --> 00:06:01,570
confused timid and unstable about the

133
00:06:01,570 --> 00:06:03,639
congestion response for YouTube and

134
00:06:03,639 --> 00:06:06,220
Netflix as soon as they see loss in the

135
00:06:06,220 --> 00:06:08,620
network their honor will slow down this

136
00:06:08,620 --> 00:06:11,550
is this doesn't work it

137
00:06:17,840 --> 00:06:19,900
you

138
00:06:20,060 --> 00:06:22,120
you

139
00:06:24,919 --> 00:06:28,129
our fight

140
00:06:28,129 --> 00:06:30,559
you know you request the manifest over

141
00:06:30,559 --> 00:06:34,489
HTTP which to describes where the next

142
00:06:34,489 --> 00:06:36,169
chunk of segments are and you'll

143
00:06:36,169 --> 00:06:38,539
download one of these segments and based

144
00:06:38,539 --> 00:06:39,859
on the amount of time it takes to get

145
00:06:39,859 --> 00:06:41,539
the segment you can decide whether or

146
00:06:41,539 --> 00:06:43,449
not to change rates so you could have

147
00:06:43,449 --> 00:06:48,979
adaptive video bit rates and and the

148
00:06:48,979 --> 00:06:51,199
segments of times so they're they're not

149
00:06:51,199 --> 00:06:52,759
going to use the entire playback time so

150
00:06:52,759 --> 00:07:06,219
that you can keep a buffer rolling there

151
00:07:06,219 --> 00:07:09,709
this leads to very bursty traffic and

152
00:07:09,709 --> 00:07:12,259
when we look at this HTTP traffic over

153
00:07:12,259 --> 00:07:16,039
satellite links we want to take as much

154
00:07:16,039 --> 00:07:18,349
as we can in a chunk so we end up with

155
00:07:18,349 --> 00:07:21,079
long periods where our TCP connection

156
00:07:21,079 --> 00:07:25,159
isn't doing anything and TCP is defined

157
00:07:25,159 --> 00:07:29,269
to close down there because we have a we

158
00:07:29,269 --> 00:07:33,619
have a congestion window there yeah so

159
00:07:33,619 --> 00:07:34,610
we have a congestion window that

160
00:07:34,610 --> 00:07:37,009
describes this the congestion window was

161
00:07:37,009 --> 00:07:38,989
just a guess over the Cape a DES about

162
00:07:38,989 --> 00:07:44,209
the capability of the network when we

163
00:07:44,209 --> 00:07:45,769
enter a period where we're not sending

164
00:07:45,769 --> 00:07:50,089
this guest gets worse and worse so we

165
00:07:50,089 --> 00:07:53,389
did work on something called new cwv new

166
00:07:53,389 --> 00:07:55,759
cwv is an adaptation for rate limited

167
00:07:55,759 --> 00:07:58,279
traffic rate limited traffic is when the

168
00:07:58,279 --> 00:08:01,069
application is trying to send less than

169
00:08:01,069 --> 00:08:07,419
the network can provide and you see WV

170
00:08:07,419 --> 00:08:09,289
enhances something called congestion

171
00:08:09,289 --> 00:08:10,819
window value validation which is an

172
00:08:10,819 --> 00:08:15,529
older RFC and we provide a new method

173
00:08:15,529 --> 00:08:18,669
for guessing how much is in the pipe I

174
00:08:18,669 --> 00:08:22,489
got involved in this in 2014 the crazy

175
00:08:22,489 --> 00:08:24,169
social scientists we had in the project

176
00:08:24,169 --> 00:08:26,719
went to India instead of working and I

177
00:08:26,719 --> 00:08:28,159
was a bit of a loss of what to do

178
00:08:28,159 --> 00:08:30,949
we had PhD students and one of my

179
00:08:30,949 --> 00:08:32,719
colleagues raffalo Seki had been working

180
00:08:32,719 --> 00:08:34,429
on this and he had an implementation in

181
00:08:34,429 --> 00:08:37,370
anis - we done simulation in the lab we

182
00:08:37,370 --> 00:08:40,309
had an implementation for Linux

183
00:08:40,309 --> 00:08:43,080
there's an issue when you cwv the both

184
00:08:43,080 --> 00:08:44,550
linux and freebsd have pluggable

185
00:08:44,550 --> 00:08:47,490
congestion control but new cwv needs to

186
00:08:47,490 --> 00:08:48,750
do this estimation outside of the

187
00:08:48,750 --> 00:08:50,670
congestion control mechanisms so that

188
00:08:50,670 --> 00:08:52,290
we've not informated something that is

189
00:08:52,290 --> 00:08:56,280
only applicable for new Reno or cubic so

190
00:08:56,280 --> 00:08:58,380
that we can do it below the pluggable

191
00:08:58,380 --> 00:09:01,590
layer of course nobody wants to mess

192
00:09:01,590 --> 00:09:03,900
with the TCP stack like this so it's

193
00:09:03,900 --> 00:09:06,300
very hard to deploy so I did this

194
00:09:06,300 --> 00:09:08,970
imitation 2014 I pushed that publicly I

195
00:09:08,970 --> 00:09:13,830
followed the drafts right now the bug

196
00:09:13,830 --> 00:09:18,810
tracker says this but but who knows and

197
00:09:18,810 --> 00:09:23,130
I don't know what's next here and is

198
00:09:23,130 --> 00:09:24,450
doing a lot of work on the TCP stack

199
00:09:24,450 --> 00:09:26,640
there's there's one problem with this

200
00:09:26,640 --> 00:09:28,680
and the new zwv needs packet pacing to

201
00:09:28,680 --> 00:09:30,930
really get a seen benefit and freebsd

202
00:09:30,930 --> 00:09:31,980
doesn't have packet pacing in its

203
00:09:31,980 --> 00:09:36,650
network stack yet soon I hear the

204
00:09:36,650 --> 00:09:38,670
Randall and Netflix said this wasn't a

205
00:09:38,670 --> 00:09:41,610
problem because they had vendor drivers

206
00:09:41,610 --> 00:09:43,650
that would do pacing for them so they

207
00:09:43,650 --> 00:09:45,690
could take you cwv we start talking

208
00:09:45,690 --> 00:09:48,900
about this in 2015 2017 but this is only

209
00:09:48,900 --> 00:09:50,850
a month ago so maybe maybe we'll see

210
00:09:50,850 --> 00:09:55,070
something soon so this is really just

211
00:09:55,070 --> 00:09:57,210
context for how hard it is to do things

212
00:09:57,210 --> 00:10:02,040
in the Internet we're trying to deploy a

213
00:10:02,040 --> 00:10:03,630
change the congestion control that will

214
00:10:03,630 --> 00:10:07,050
give benefit to most people Google or

215
00:10:07,050 --> 00:10:10,350
Netflix Facebook can do whatever they

216
00:10:10,350 --> 00:10:13,230
want they have all this equipment they

217
00:10:13,230 --> 00:10:14,760
can run their own hardware they can run

218
00:10:14,760 --> 00:10:17,280
on private networks they don't need

219
00:10:17,280 --> 00:10:19,380
these changes they can pay people to do

220
00:10:19,380 --> 00:10:21,090
it but anybody who's going to compete

221
00:10:21,090 --> 00:10:22,470
with them in the future needs these

222
00:10:22,470 --> 00:10:24,360
standardized changes and if we figure

223
00:10:24,360 --> 00:10:25,710
out how to do these changes we should be

224
00:10:25,710 --> 00:10:28,730
able to deploy them and get them going

225
00:10:29,480 --> 00:10:31,620
but it's so hard to get us to move

226
00:10:31,620 --> 00:10:33,480
because the ITF doesn't want to do TCP

227
00:10:33,480 --> 00:10:37,020
changes if you want to change the value

228
00:10:37,020 --> 00:10:38,700
of a field and an IP protocol you're

229
00:10:38,700 --> 00:10:40,560
gonna have a horrible time it's going to

230
00:10:40,560 --> 00:10:42,810
take forever to get to the ITF no one

231
00:10:42,810 --> 00:10:44,130
will deploy in their networks and then

232
00:10:44,130 --> 00:10:45,930
it might not work because it just may

233
00:10:45,930 --> 00:10:46,500
not work

234
00:10:46,500 --> 00:10:48,630
this happened with ecn on the internet

235
00:10:48,630 --> 00:10:50,430
to like 6 years to get to the point

236
00:10:50,430 --> 00:10:53,270
where we decided we need easy

237
00:10:53,270 --> 00:10:54,890
fall back and know we're starting to see

238
00:10:54,890 --> 00:10:59,210
cm marks come into the network I I only

239
00:10:59,210 --> 00:11:01,540
have the slides I think is hilarious

240
00:11:01,540 --> 00:11:04,100
there's someone on Twitter tweeted this

241
00:11:04,100 --> 00:11:05,390
and if you press really hard you can get

242
00:11:05,390 --> 00:11:10,280
more pockets so the the changes we're

243
00:11:10,280 --> 00:11:12,020
proposing with the neat projects come

244
00:11:12,020 --> 00:11:14,150
from a couple of core issues one of them

245
00:11:14,150 --> 00:11:16,070
is trying to do this but a lot of these

246
00:11:16,070 --> 00:11:17,570
problems come from how programmers see

247
00:11:17,570 --> 00:11:20,000
the access to the network rather than

248
00:11:20,000 --> 00:11:23,510
the reality we have you know someone

249
00:11:23,510 --> 00:11:24,800
connects to a rooster and it goes

250
00:11:24,800 --> 00:11:26,210
through the cloud and that you get

251
00:11:26,210 --> 00:11:28,010
traffic at the other end and it worked

252
00:11:28,010 --> 00:11:33,020
great and it's all fun but in real life

253
00:11:33,020 --> 00:11:34,730
there's loads of stuff in the middle

254
00:11:34,730 --> 00:11:37,010
that's playing with your traffic that

255
00:11:37,010 --> 00:11:39,650
doesn't have this one agenda for what

256
00:11:39,650 --> 00:11:42,530
wants to do we have corporate proxies

257
00:11:42,530 --> 00:11:45,050
that want to break down TLS or they can

258
00:11:45,050 --> 00:11:48,260
see what you're doing people injecting

259
00:11:48,260 --> 00:11:51,050
ads firewalls that not necessarily

260
00:11:51,050 --> 00:11:54,080
misconfigured but configured in a naive

261
00:11:54,080 --> 00:11:57,800
way where will allow TCP port 84 for 3m

262
00:11:57,800 --> 00:12:00,170
UDP port 53 nobody uses anything else

263
00:12:00,170 --> 00:12:02,690
right but that just completely stopped

264
00:12:02,690 --> 00:12:07,070
any deployment of new protocols and of

265
00:12:07,070 --> 00:12:08,030
course there's a lot of assumptions

266
00:12:08,030 --> 00:12:10,400
about how we get onto the network in the

267
00:12:10,400 --> 00:12:13,730
past when we designed TCP it was for a

268
00:12:13,730 --> 00:12:15,680
very limited set of network access

269
00:12:15,680 --> 00:12:18,020
technologies and the networked access

270
00:12:18,020 --> 00:12:20,780
that the network technologies were very

271
00:12:20,780 --> 00:12:24,230
homogeneous they were very similar a 56k

272
00:12:24,230 --> 00:12:26,960
dial-up link is going to be similar to

273
00:12:26,960 --> 00:12:29,060
somebody else's I mean allowing for

274
00:12:29,060 --> 00:12:30,200
terrible phone lines it's going to be

275
00:12:30,200 --> 00:12:32,270
very similar but mobile technologies

276
00:12:32,270 --> 00:12:37,100
like 2g 3G 4G you see wild spikes in

277
00:12:37,100 --> 00:12:42,200
latency you see wild spikes in bandwidth

278
00:12:42,200 --> 00:12:46,160
you see random loss and the algorithms

279
00:12:46,160 --> 00:12:48,200
we have our design to tree loss as a

280
00:12:48,200 --> 00:12:50,060
sign of congestion where we can stop

281
00:12:50,060 --> 00:12:51,740
sending but everyone will know that

282
00:12:51,740 --> 00:12:54,050
they've been on the phone and the car

283
00:12:54,050 --> 00:12:56,090
moves four meters and you get a

284
00:12:56,090 --> 00:12:57,470
different model of what the network does

285
00:12:57,470 --> 00:12:59,990
because the trees in the way anymore and

286
00:12:59,990 --> 00:13:03,470
everything works much better and then on

287
00:13:03,470 --> 00:13:04,670
top of this we have a socket API and

288
00:13:04,670 --> 00:13:06,829
it's crap

289
00:13:06,829 --> 00:13:11,730
you're nodding is great all right some

290
00:13:11,730 --> 00:13:16,920
code on Windows so the socket buys them

291
00:13:16,920 --> 00:13:22,760
very well for the last 35 years longer

292
00:13:22,760 --> 00:13:24,540
everything in the Internet is now

293
00:13:24,540 --> 00:13:27,180
changed and it's different but the

294
00:13:27,180 --> 00:13:29,279
access we have is okay the issue really

295
00:13:29,279 --> 00:13:31,709
is that it doesn't offer any way to move

296
00:13:31,709 --> 00:13:33,449
away from it and there's no way to move

297
00:13:33,449 --> 00:13:35,790
transport protocols if you wanted to do

298
00:13:35,790 --> 00:13:37,769
something with like this series of calls

299
00:13:37,769 --> 00:13:41,430
that you had to interfaces and you

300
00:13:41,430 --> 00:13:42,690
needed to choose between them you have

301
00:13:42,690 --> 00:13:45,649
to spend a lot of time right

302
00:13:50,380 --> 00:13:56,350
it's there okay so what bother why not

303
00:13:56,350 --> 00:14:00,610
move everything into user space why not

304
00:14:00,610 --> 00:14:04,810
and we just do on top of UDP and we'll

305
00:14:04,810 --> 00:14:06,040
push it across the network and it'll all

306
00:14:06,040 --> 00:14:08,860
work fine and this is this is happening

307
00:14:08,860 --> 00:14:11,890
a lot setp which is developed by Michael

308
00:14:11,890 --> 00:14:15,130
Tilson in FreeBSD offers a user space

309
00:14:15,130 --> 00:14:16,450
implementation that you can run over

310
00:14:16,450 --> 00:14:19,390
anything you can get UDP socket on and

311
00:14:19,390 --> 00:14:21,010
this is what's being ruled out in web

312
00:14:21,010 --> 00:14:22,840
browsers right now so this is a new

313
00:14:22,840 --> 00:14:24,130
transport protocol on the Internet and

314
00:14:24,130 --> 00:14:27,300
it's running in user space and it works

315
00:14:27,300 --> 00:14:30,610
this is what quick tries to do so quick

316
00:14:30,610 --> 00:14:34,840
is our quick from Google is a a

317
00:14:34,840 --> 00:14:37,810
transport protocol that sits under HTTP

318
00:14:37,810 --> 00:14:43,480
2 and it offers nice reliable streams

319
00:14:43,480 --> 00:14:44,950
and you don't have head-of-line blocking

320
00:14:44,950 --> 00:14:47,290
between streams and has some cool crypto

321
00:14:47,290 --> 00:14:50,650
stuff but if being developed by Google

322
00:14:50,650 --> 00:14:53,080
we're three years since it was announced

323
00:14:53,080 --> 00:14:56,350
and we have one implementation the the

324
00:14:56,350 --> 00:14:58,300
standards bodies moving very slowly they

325
00:14:58,300 --> 00:15:01,030
met last week and it's not really going

326
00:15:01,030 --> 00:15:01,690
anywhere

327
00:15:01,690 --> 00:15:04,420
and we have like Facebook push the draft

328
00:15:04,420 --> 00:15:05,830
last year about trying to do this

329
00:15:05,830 --> 00:15:07,750
generalized for UDP transport so they

330
00:15:07,750 --> 00:15:08,890
can build stuff they're gonna tell

331
00:15:08,890 --> 00:15:10,870
anybody about but we have this same

332
00:15:10,870 --> 00:15:12,310
problem where big players can do this

333
00:15:12,310 --> 00:15:16,180
it's finally they can will and do

334
00:15:16,180 --> 00:15:17,770
whatever they want because they have

335
00:15:17,770 --> 00:15:19,870
loads of money but nobody else gets to

336
00:15:19,870 --> 00:15:21,310
take advantage of this and the openness

337
00:15:21,310 --> 00:15:23,890
of the Internet and the web it will

338
00:15:23,890 --> 00:15:25,870
really suffer it if we do this and

339
00:15:25,870 --> 00:15:27,580
there's also tcp or UDP which is just

340
00:15:27,580 --> 00:15:34,320
run sanity and you shouldn't do it so I

341
00:15:34,320 --> 00:15:39,520
work on this it's quite complicated this

342
00:15:39,520 --> 00:15:41,410
is the picture we sent to the EU last

343
00:15:41,410 --> 00:15:47,290
year yeah and don't tell them but we're

344
00:15:47,290 --> 00:15:48,450
not gonna do any of this

345
00:15:48,450 --> 00:15:53,230
we have a we have a new API for

346
00:15:53,230 --> 00:15:56,800
accessing the network its event-driven

347
00:15:56,800 --> 00:15:59,590
it's built on top of libuv if you've

348
00:15:59,590 --> 00:16:01,000
used the boovie that you know the

349
00:16:01,000 --> 00:16:02,410
networking stuff isn't great so we have

350
00:16:02,410 --> 00:16:03,939
a Mesa consistent

351
00:16:03,939 --> 00:16:07,539
for doing that and we have a system for

352
00:16:07,539 --> 00:16:09,669
building and integrating new transport

353
00:16:09,669 --> 00:16:11,559
protocols that can run over the Internet

354
00:16:11,559 --> 00:16:13,149
so we can run this completely

355
00:16:13,149 --> 00:16:14,919
directionally over completely directly

356
00:16:14,919 --> 00:16:18,939
over the sockets you have so we can run

357
00:16:18,939 --> 00:16:21,249
this over you just if you just have a

358
00:16:21,249 --> 00:16:23,259
system with TCP and UDP neat we'll run

359
00:16:23,259 --> 00:16:25,299
over this and you'll get some benefits

360
00:16:25,299 --> 00:16:27,999
but in all of them we can run on top of

361
00:16:27,999 --> 00:16:29,829
transports in userspace so we can take

362
00:16:29,829 --> 00:16:31,659
advantage of the user space setp library

363
00:16:31,659 --> 00:16:33,519
and if quick becomes a real transport

364
00:16:33,519 --> 00:16:35,379
protocol that's usable then we can just

365
00:16:35,379 --> 00:16:37,629
plug it into this system because we've

366
00:16:37,629 --> 00:16:40,739
built an extensible model for doing this

367
00:16:40,739 --> 00:16:45,609
and we have some things that allow us to

368
00:16:45,609 --> 00:16:47,919
apply magic to how we create connections

369
00:16:47,919 --> 00:16:51,489
over here we have just on the far right

370
00:16:51,489 --> 00:16:53,379
we have two information bases that

371
00:16:53,379 --> 00:16:56,019
capture stuff about the network and this

372
00:16:56,019 --> 00:16:57,689
is all mediated through a policy manager

373
00:16:57,689 --> 00:17:00,099
policy manager allows you to direct at a

374
00:17:00,099 --> 00:17:01,959
high level what you want from your

375
00:17:01,959 --> 00:17:05,529
transports treatment and the the biggest

376
00:17:05,529 --> 00:17:07,559
thing we've implanted right now is

377
00:17:07,559 --> 00:17:11,859
fallback and homing over SCTP and tcp so

378
00:17:11,859 --> 00:17:13,119
you can say at a high level that you

379
00:17:13,119 --> 00:17:18,849
want a reliable ordered stream and the

380
00:17:18,849 --> 00:17:20,589
policy manager can use information we've

381
00:17:20,589 --> 00:17:24,509
captured about previous connections your

382
00:17:24,509 --> 00:17:28,620
interfaces whatever else you might have

383
00:17:28,620 --> 00:17:31,690
Sdn orchestrators in the network and we

384
00:17:31,690 --> 00:17:36,610
can do selection to find the best some

385
00:17:36,610 --> 00:17:38,470
values the best transport protocol that

386
00:17:38,470 --> 00:17:41,320
is available and is going to work over

387
00:17:41,320 --> 00:17:45,250
ipv4 ipv6 TCP SCTP we have this you do

388
00:17:45,250 --> 00:17:49,019
one call you get all of this for free

389
00:17:50,220 --> 00:17:52,389
applications are a bit smaller they look

390
00:17:52,389 --> 00:17:58,710
like this this one has the building and

391
00:17:58,710 --> 00:18:00,549
applications work through the API

392
00:18:00,549 --> 00:18:02,950
directly into the neat user module using

393
00:18:02,950 --> 00:18:05,620
modules made of five pieces we have a

394
00:18:05,620 --> 00:18:11,158
framework we have the selection come

395
00:18:11,680 --> 00:18:16,030
we have selection components that allow

396
00:18:16,030 --> 00:18:20,200
us to operate independent of transport

397
00:18:20,200 --> 00:18:22,930
protocol itself we have the policy

398
00:18:22,930 --> 00:18:26,440
system we have transport components

399
00:18:26,440 --> 00:18:28,330
themselves so we have quite a nice

400
00:18:28,330 --> 00:18:30,750
abstract API for this we have an

401
00:18:30,750 --> 00:18:33,690
abstraction on top of security protocols

402
00:18:33,690 --> 00:18:37,840
so with needs by saying one flag and a

403
00:18:37,840 --> 00:18:42,130
policy in providing some certs you can

404
00:18:42,130 --> 00:18:44,680
get TLS or D TLS for free with a nice

405
00:18:44,680 --> 00:18:47,200
API there's there's no dealing with

406
00:18:47,200 --> 00:18:57,640
little of SSL and then we integrate with

407
00:18:57,640 --> 00:19:00,250
the network itself not only can we

408
00:19:00,250 --> 00:19:02,620
gather information from other

409
00:19:02,620 --> 00:19:03,850
connections that happen in the global

410
00:19:03,850 --> 00:19:05,830
system but we can gather information

411
00:19:05,830 --> 00:19:08,500
from things you have in the network so

412
00:19:08,500 --> 00:19:10,690
the characteristic information base we

413
00:19:10,690 --> 00:19:13,600
have bottom here and is actually just a

414
00:19:13,600 --> 00:19:16,050
set of JSON files on disk that describe

415
00:19:16,050 --> 00:19:19,240
um the high speeds you've got in an

416
00:19:19,240 --> 00:19:21,370
interface they're successful selection

417
00:19:21,370 --> 00:19:23,560
choices on an interface but it can be

418
00:19:23,560 --> 00:19:26,380
fed in from other places so we can look

419
00:19:26,380 --> 00:19:28,150
up MIBs and we can figure out what TCP

420
00:19:28,150 --> 00:19:29,350
congestion control algorithms you have

421
00:19:29,350 --> 00:19:30,670
and then provide that for a selection

422
00:19:30,670 --> 00:19:35,050
from there or we could integrate with an

423
00:19:35,050 --> 00:19:37,930
SDN controller on your network and the

424
00:19:37,930 --> 00:19:40,180
Sdn controller can then say I can create

425
00:19:40,180 --> 00:19:42,460
stuff for you if you need it by we can

426
00:19:42,460 --> 00:19:45,010
we can make a new interface for you and

427
00:19:45,010 --> 00:19:47,380
it will work really well when we have

428
00:19:47,380 --> 00:19:51,310
all of this implement now we have a we

429
00:19:51,310 --> 00:19:53,230
have a demo for one of our partners EMC

430
00:19:53,230 --> 00:19:55,990
which does flow selection between small

431
00:19:55,990 --> 00:19:58,390
flows and big flows by specifying our

432
00:19:58,390 --> 00:20:00,910
file size you say you have a small file

433
00:20:00,910 --> 00:20:03,220
and you get at the normal 10 megabit

434
00:20:03,220 --> 00:20:06,400
link with low latency specify a high

435
00:20:06,400 --> 00:20:09,040
file size and you get given a QoS mark

436
00:20:09,040 --> 00:20:10,750
that you set and then you get your

437
00:20:10,750 --> 00:20:12,970
traffic directed over a higher latency

438
00:20:12,970 --> 00:20:14,560
bit higher bandwidth link and we're

439
00:20:14,560 --> 00:20:16,810
showing this to the EU in May so we have

440
00:20:16,810 --> 00:20:19,740
demos for this working

441
00:20:20,860 --> 00:20:23,059
applications are very simple so the

442
00:20:23,059 --> 00:20:24,409
architecture picture is really big and

443
00:20:24,409 --> 00:20:27,320
complicated but it really boils down to

444
00:20:27,320 --> 00:20:32,899
almost nothing at all our connection

445
00:20:32,899 --> 00:20:34,480
state is metered inside of context and

446
00:20:34,480 --> 00:20:38,139
we have one context per thread we're

447
00:20:38,139 --> 00:20:43,070
working on this right now the with this

448
00:20:43,070 --> 00:20:45,259
we can then create floats we have one

449
00:20:45,259 --> 00:20:47,240
single primitive for accessing the

450
00:20:47,240 --> 00:20:51,710
network and the application can choose

451
00:20:51,710 --> 00:20:53,960
its properties it wants to get for a

452
00:20:53,960 --> 00:20:56,929
policy the the properties here or as a

453
00:20:56,929 --> 00:20:58,460
bit mask which is what we had maybe a

454
00:20:58,460 --> 00:21:00,860
year ago we now have properties defined

455
00:21:00,860 --> 00:21:03,409
as JSON so you can build more

456
00:21:03,409 --> 00:21:06,129
complicated things set up some callbacks

457
00:21:06,129 --> 00:21:09,440
and then you do it open and you do an

458
00:21:09,440 --> 00:21:11,299
open and neat just handles everything

459
00:21:11,299 --> 00:21:13,779
else for you

460
00:21:21,810 --> 00:21:24,090
um and this is what it looks like this

461
00:21:24,090 --> 00:21:26,370
is how it hooks in further you get your

462
00:21:26,370 --> 00:21:28,370
event and you do reads and writes

463
00:21:28,370 --> 00:21:31,140
they're they're obviously issues between

464
00:21:31,140 --> 00:21:34,170
Datagram and stream protocols but we're

465
00:21:34,170 --> 00:21:35,940
an active research project so we're

466
00:21:35,940 --> 00:21:37,140
we're trying to resolve all of this so

467
00:21:37,140 --> 00:21:38,820
you get a nice API but this is as

468
00:21:38,820 --> 00:21:40,770
complicated as we want things to be now

469
00:21:40,770 --> 00:21:42,540
you set the property for a security you

470
00:21:42,540 --> 00:21:44,880
get D TLS and it works you don't have to

471
00:21:44,880 --> 00:21:46,590
figure out your cipher suites or your

472
00:21:46,590 --> 00:21:49,050
trust chain we find the most sensible

473
00:21:49,050 --> 00:21:51,570
thing to do here youyou want a traffic

474
00:21:51,570 --> 00:21:52,560
protocol it's reliable we give you

475
00:21:52,560 --> 00:21:53,820
reliable transport protocol and you just

476
00:21:53,820 --> 00:21:56,130
do reason writes against it I'll after

477
00:21:56,130 --> 00:21:58,380
the last talk I just gave about the

478
00:21:58,380 --> 00:22:01,410
server side if you swap out the open for

479
00:22:01,410 --> 00:22:04,400
an accept the court is exactly so

480
00:22:04,400 --> 00:22:06,570
obviously that the flow semantics are a

481
00:22:06,570 --> 00:22:08,220
bit different because you get given

482
00:22:08,220 --> 00:22:11,310
flows instead of having a flow but it's

483
00:22:11,310 --> 00:22:12,300
all the same you just get the

484
00:22:12,300 --> 00:22:13,950
unconnected event and the code can be

485
00:22:13,950 --> 00:22:17,670
kept very very simple and because we're

486
00:22:17,670 --> 00:22:18,780
only your project we have commercial

487
00:22:18,780 --> 00:22:21,890
partners when I record my fighters EMC

488
00:22:21,890 --> 00:22:24,930
another one is Mozilla so I spent all

489
00:22:24,930 --> 00:22:27,590
weekend in plenary in Mozilla in Paris

490
00:22:27,590 --> 00:22:29,880
and we're trying right now for our debt

491
00:22:29,880 --> 00:22:31,620
for a demo session to the EU in May to

492
00:22:31,620 --> 00:22:34,020
have Firefox doing selection between

493
00:22:34,020 --> 00:22:38,340
SCTP and tcp and for a connection set up

494
00:22:38,340 --> 00:22:40,400
we have this running on freebsd if

495
00:22:40,400 --> 00:22:42,330
anybody really cares they can bug

496
00:22:42,330 --> 00:22:44,640
michael tucks in and you say go away or

497
00:22:44,640 --> 00:22:47,730
come back in a week and what we get from

498
00:22:47,730 --> 00:22:51,450
this is is incredible though SCTP if you

499
00:22:51,450 --> 00:22:52,680
if you don't know you can have a look at

500
00:22:52,680 --> 00:22:54,510
it but it offers multihoming and

501
00:22:54,510 --> 00:22:57,240
multipath so the demo we have is a file

502
00:22:57,240 --> 00:22:59,970
download through HTTP and if you get tcp

503
00:22:59,970 --> 00:23:01,230
on your network you get a normal file

504
00:23:01,230 --> 00:23:03,540
download if you get SCTP on your network

505
00:23:03,540 --> 00:23:04,890
and you have multiple interfaces you get

506
00:23:04,890 --> 00:23:07,620
multipath we do CMT so we can share the

507
00:23:07,620 --> 00:23:09,420
connections from the application you get

508
00:23:09,420 --> 00:23:14,270
twice the bandwidth I think it's awesome

509
00:23:16,820 --> 00:23:21,080
may yet some once promised it to the EU

510
00:23:21,080 --> 00:23:31,220
so and yeah and Linux and we're

511
00:23:31,220 --> 00:23:32,900
developing all this on top of FreeBSD so

512
00:23:32,900 --> 00:23:34,100
this is the the main impetus for the

513
00:23:34,100 --> 00:23:36,110
talk is that there's nothing FreeBSD

514
00:23:36,110 --> 00:23:37,700
specific and any of this we could do

515
00:23:37,700 --> 00:23:39,920
this on any platform it turns out

516
00:23:39,920 --> 00:23:41,720
because the SCTP static runs on freebsd

517
00:23:41,720 --> 00:23:44,000
it's the best place to run it because

518
00:23:44,000 --> 00:23:46,100
the hub have sensible networking and

519
00:23:46,100 --> 00:23:48,320
it's all easy and things compile

520
00:23:48,320 --> 00:23:51,500
properly but we do continuous

521
00:23:51,500 --> 00:23:52,700
integration on all the platforms we

522
00:23:52,700 --> 00:23:54,290
support if anybody can find a Windows

523
00:23:54,290 --> 00:23:56,240
developer we would love one but I don't

524
00:23:56,240 --> 00:23:59,240
know them outside and we have builds

525
00:23:59,240 --> 00:24:00,920
right now build BOTS that you can find

526
00:24:00,920 --> 00:24:03,980
through our github and running on arm

527
00:24:03,980 --> 00:24:07,820
FreeBSD heads stable net BSD OS 10 and

528
00:24:07,820 --> 00:24:11,270
Ubuntu I bet you as well grain that

529
00:24:11,270 --> 00:24:15,500
feels yeah and really you project so

530
00:24:15,500 --> 00:24:18,200
we're very open all of the all of the

531
00:24:18,200 --> 00:24:19,730
research we're doing is open access and

532
00:24:19,730 --> 00:24:21,500
being made available as soon as we can

533
00:24:21,500 --> 00:24:23,900
all of the architecture and

534
00:24:23,900 --> 00:24:26,390
specifications we have we're releasing

535
00:24:26,390 --> 00:24:29,360
as soon as we we have them available as

536
00:24:29,360 --> 00:24:30,500
well if you want to read a 60 page

537
00:24:30,500 --> 00:24:32,750
document about why and how well

538
00:24:32,750 --> 00:24:34,370
stateless all together we have it not

539
00:24:34,370 --> 00:24:36,410
interesting will and although the

540
00:24:36,410 --> 00:24:37,700
development is happening in real time

541
00:24:37,700 --> 00:24:39,530
available we have a public github will

542
00:24:39,530 --> 00:24:41,690
take patches from anyone we really want

543
00:24:41,690 --> 00:24:44,450
patches from somebody if you feel like

544
00:24:44,450 --> 00:24:46,460
fixing our documentation then then we're

545
00:24:46,460 --> 00:24:50,530
doing great yeah

546
00:24:50,530 --> 00:24:53,780
they though they want us to show that we

547
00:24:53,780 --> 00:24:56,180
have convinced other people to use this

548
00:24:56,180 --> 00:25:01,250
and it yeah so I don't know how you

549
00:25:01,250 --> 00:25:04,670
measure this and yeah so all the course

550
00:25:04,670 --> 00:25:06,230
online you can go and have a look it's

551
00:25:06,230 --> 00:25:08,000
really easy to check out very few

552
00:25:08,000 --> 00:25:09,890
dependencies there are examples for how

553
00:25:09,890 --> 00:25:12,500
to drive everything if you have some

554
00:25:12,500 --> 00:25:13,760
networking problem that you really want

555
00:25:13,760 --> 00:25:15,200
to solve with protocols but you can't

556
00:25:15,200 --> 00:25:16,820
trust the network to be reliable this

557
00:25:16,820 --> 00:25:19,250
will this will work for it we are a year

558
00:25:19,250 --> 00:25:21,080
into development so things are a bit

559
00:25:21,080 --> 00:25:25,010
janky later we're gonna do some bindings

560
00:25:25,010 --> 00:25:27,710
to pison and maybe go so that you can

561
00:25:27,710 --> 00:25:29,540
access this through saner languages and

562
00:25:29,540 --> 00:25:29,770
you

563
00:25:29,770 --> 00:25:32,670
use everything and but it's all there

564
00:25:32,670 --> 00:25:44,650
yeah and that's me I have loads of times

565
00:25:44,650 --> 00:25:46,860
for questions

566
00:25:56,010 --> 00:25:58,300
can I just repeat that source recorded

567
00:25:58,300 --> 00:26:02,320
and I think this is amazing I think we

568
00:26:02,320 --> 00:26:04,720
should be keynote live at large UNIX

569
00:26:04,720 --> 00:26:07,140
conferences

570
00:26:18,360 --> 00:26:23,580
what's the bit you're having the repple

571
00:26:25,560 --> 00:26:27,760
no no I'll be trying to avoid threads

572
00:26:27,760 --> 00:26:28,450
because there anything is too

573
00:26:28,450 --> 00:26:30,750
complicated

574
00:26:38,190 --> 00:26:47,830
yeah no I'm aware of

575
00:26:47,830 --> 00:26:49,990
I don't so the question is if we have

576
00:26:49,990 --> 00:26:52,480
issues with thread pools and libuv and I

577
00:26:52,480 --> 00:26:54,160
haven't I haven't seen any traffic in

578
00:26:54,160 --> 00:26:57,220
the issues from this I think we'll get

579
00:26:57,220 --> 00:26:59,020
more issues as people try and do more

580
00:26:59,020 --> 00:27:01,090
but we have Firefox running on this

581
00:27:01,090 --> 00:27:01,600
right now

582
00:27:01,600 --> 00:27:06,610
so Firefox is a really big thing and

583
00:27:06,610 --> 00:27:08,950
it's really really stressed the code

584
00:27:08,950 --> 00:27:10,600
we've written it's made it its trip

585
00:27:10,600 --> 00:27:12,400
loads of bugs it's been great to do we

586
00:27:12,400 --> 00:27:14,680
see it found loads of issues it would be

587
00:27:14,680 --> 00:27:17,500
good to know it would be good to have

588
00:27:17,500 --> 00:27:19,300
bigger workloads go through we did some

589
00:27:19,300 --> 00:27:20,530
performance stuff when we managed to

590
00:27:20,530 --> 00:27:23,980
push 6 gigabit through it so it's ok as

591
00:27:23,980 --> 00:27:24,910
a networking library there's no issue

592
00:27:24,910 --> 00:27:27,000
there

593
00:27:29,820 --> 00:27:33,070
they haven't been started if you would

594
00:27:33,070 --> 00:27:35,679
like to start it so the problem now is

595
00:27:35,679 --> 00:27:38,830
we don't have a stable API so even the

596
00:27:38,830 --> 00:27:40,270
example programs we have keep breaking

597
00:27:40,270 --> 00:27:42,340
and you don't want to build on top of

598
00:27:42,340 --> 00:27:43,720
that especially if you've got to deal

599
00:27:43,720 --> 00:27:44,890
with different languages

600
00:27:44,890 --> 00:27:47,380
i I'm hoping within the next six months

601
00:27:47,380 --> 00:27:49,080
we'll have something stable enough that

602
00:27:49,080 --> 00:27:51,520
the demos were building from keep

603
00:27:51,520 --> 00:27:54,010
breaking and I think the Firefox work

604
00:27:54,010 --> 00:27:55,299
we've done is going to force that to

605
00:27:55,299 --> 00:27:58,900
happen because Daniels Steinberg the the

606
00:27:58,900 --> 00:28:01,270
curl developer worked for Mozilla for us

607
00:28:01,270 --> 00:28:03,580
on this and he's very annoyed every time

608
00:28:03,580 --> 00:28:17,230
we change the API so I think we're gonna

609
00:28:17,230 --> 00:28:19,330
have to approach this we spent a lot of

610
00:28:19,330 --> 00:28:22,480
time so that so the four partners we

611
00:28:22,480 --> 00:28:23,590
have we have a tiny norwegian company

612
00:28:23,590 --> 00:28:26,559
called sell away we have EMC Mozilla and

613
00:28:26,559 --> 00:28:29,140
Cisco and Cisco are very interested in

614
00:28:29,140 --> 00:28:31,240
being able to abstractly deal with names

615
00:28:31,240 --> 00:28:33,610
and do stuff like connect to a name

616
00:28:33,610 --> 00:28:37,299
rather than a service at some point that

617
00:28:37,299 --> 00:28:38,590
people from UI or wanted to get rid of

618
00:28:38,590 --> 00:28:43,360
port numbers we top them down if you

619
00:28:43,360 --> 00:28:45,640
wanted to build something on top of the

620
00:28:45,640 --> 00:28:47,950
same networking library that resolved

621
00:28:47,950 --> 00:28:49,059
the networking issue you could

622
00:28:49,059 --> 00:28:51,790
definitely do it if we have a good DNS

623
00:28:51,790 --> 00:28:54,120
library integrated and we have great DNS

624
00:28:54,120 --> 00:28:57,910
but if you had a more abstract system I

625
00:28:57,910 --> 00:28:58,960
think this would be a nice place to hook

626
00:28:58,960 --> 00:29:01,110
into

627
00:29:08,349 --> 00:29:12,279
okay cool thank you

628
00:29:14,080 --> 00:29:22,780
oh I have heard of this yet so the Rena

629
00:29:22,780 --> 00:29:25,300
protocol stack yeah I was asked this

630
00:29:25,300 --> 00:29:26,610
when I give this talk last year

631
00:29:26,610 --> 00:29:30,280
somewhere else and yeah there's there's

632
00:29:30,280 --> 00:29:32,110
tons of work in this space as well this

633
00:29:32,110 --> 00:29:33,820
isn't we're not unique in any way

634
00:29:33,820 --> 00:29:34,870
there's like five or six different

635
00:29:34,870 --> 00:29:37,480
projects that at different levels people

636
00:29:37,480 --> 00:29:40,090
will have seen them Brian trammels post

637
00:29:40,090 --> 00:29:42,520
sockets draft they picked such a better

638
00:29:42,520 --> 00:29:46,330
name than we did yeah so that there's

639
00:29:46,330 --> 00:29:48,490
there lots of efforts trying to try to

640
00:29:48,490 --> 00:29:50,290
fix this API because this is now being

641
00:29:50,290 --> 00:29:58,000
seen as a stumbling block okay thank you

642
00:29:58,000 --> 00:29:59,350
very much

643
00:29:59,350 --> 00:30:07,100
[Applause]

