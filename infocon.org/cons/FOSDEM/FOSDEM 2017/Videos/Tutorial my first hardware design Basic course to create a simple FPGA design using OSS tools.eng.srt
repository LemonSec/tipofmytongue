1
00:00:00,030 --> 00:00:02,239
so

2
00:00:04,569 --> 00:00:07,479
it is a tutorial for hardware design

3
00:00:07,479 --> 00:00:10,539
very basic stuff but it can be it can

4
00:00:10,539 --> 00:00:13,299
give you guidelines about things you can

5
00:00:13,299 --> 00:00:17,110
do so it's forcing like that that for

6
00:00:17,110 --> 00:00:25,960
software and most particularly okay and

7
00:00:25,960 --> 00:00:26,800
Wapiti Curie

8
00:00:26,800 --> 00:00:32,700
it's for designing Mouse this kind of

9
00:00:32,700 --> 00:00:37,540
circuit of chip and two kind of cheetah

10
00:00:37,540 --> 00:00:41,320
some data analog so they under value

11
00:00:41,320 --> 00:00:45,010
signals at some data digital and so it's

12
00:00:45,010 --> 00:00:48,030
only it's a talk about digital design

13
00:00:48,030 --> 00:00:51,940
digital chip okay so the first thing to

14
00:00:51,940 --> 00:00:55,510
know is that designing a chip is very

15
00:00:55,510 --> 00:00:57,940
complex requires a lot of knowledge a

16
00:00:57,940 --> 00:01:02,620
lot of tools and it's also very very

17
00:01:02,620 --> 00:01:07,570
very expensive but only big company can

18
00:01:07,570 --> 00:01:12,689
afford to design a very complex and very

19
00:01:12,689 --> 00:01:15,450
very big chip

20
00:01:15,450 --> 00:01:18,869
hopefully there are some kind of chips

21
00:01:18,869 --> 00:01:24,670
like this one that can be programmable

22
00:01:24,670 --> 00:01:34,329
by user so the features of the chips are

23
00:01:34,329 --> 00:01:36,549
completely defined by the user usually

24
00:01:36,549 --> 00:01:43,029
it's complete its defined by the Builder

25
00:01:43,029 --> 00:01:45,609
of the board but if you can get you can

26
00:01:45,609 --> 00:01:49,139
buy board with this kind of chips and

27
00:01:49,139 --> 00:01:53,740
program it by yourself it's because it

28
00:01:53,740 --> 00:01:56,950
has a very particular architecture which

29
00:01:56,950 --> 00:02:01,630
is composed of logical block so where

30
00:02:01,630 --> 00:02:04,329
you can define the logical function that

31
00:02:04,329 --> 00:02:07,689
would be done and a network of

32
00:02:07,689 --> 00:02:11,110
connection that is also programmable and

33
00:02:11,110 --> 00:02:15,220
the user will also define how the signal

34
00:02:15,220 --> 00:02:19,739
are rooted within this network

35
00:02:20,010 --> 00:02:26,250
and they're also bad so what our

36
00:02:26,250 --> 00:02:30,370
available on the connector off and they

37
00:02:30,370 --> 00:02:32,260
are also programmable at least to set

38
00:02:32,260 --> 00:02:38,940
direction of the part and other features

39
00:02:38,940 --> 00:02:44,470
well I talk about digital circuit so we

40
00:02:44,470 --> 00:02:48,060
are only speaking about zero and one

41
00:02:48,060 --> 00:02:51,480
it's very simple it's a well it's about

42
00:02:51,480 --> 00:02:59,739
binary logic so the way to do

43
00:02:59,739 --> 00:03:02,350
computation on binary logic is using

44
00:03:02,350 --> 00:03:06,160
gates there are I would say three basic

45
00:03:06,160 --> 00:03:09,069
gates which is not yet

46
00:03:09,069 --> 00:03:12,430
so it just invest the signal if you add

47
00:03:12,430 --> 00:03:14,739
0 at the input to get one if you have

48
00:03:14,739 --> 00:03:17,200
the one you get to 0 it corresponds to

49
00:03:17,200 --> 00:03:21,819
the teeth in the C language you have or

50
00:03:21,819 --> 00:03:25,690
gate so as you as soon as one of the

51
00:03:25,690 --> 00:03:29,140
input is 1 the output is 1 if both

52
00:03:29,140 --> 00:03:33,549
inputs are 0 they'll put in 0 this

53
00:03:33,549 --> 00:03:36,190
correspond to the pipe up to the logical

54
00:03:36,190 --> 00:03:41,910
pipe operator in C and there is an gate

55
00:03:41,910 --> 00:03:47,590
which is output is 1 only if and only if

56
00:03:47,590 --> 00:03:51,430
both the inputs are set to 1 and this

57
00:03:51,430 --> 00:03:53,079
corresponds to the ampersand operator

58
00:03:53,079 --> 00:03:57,970
and the proto of see where this was

59
00:03:57,970 --> 00:04:02,200
liked very simple maybe too simple you

60
00:04:02,200 --> 00:04:05,709
can say okay what can we do with only 3

61
00:04:05,709 --> 00:04:09,040
operators sweet logical operators but

62
00:04:09,040 --> 00:04:12,660
you get a lot of power by combining them

63
00:04:12,660 --> 00:04:17,190
so for example usually the eggs are so

64
00:04:17,190 --> 00:04:20,829
exclusive or operator which is expressed

65
00:04:20,829 --> 00:04:26,530
with carrot in C can be created by all

66
00:04:26,530 --> 00:04:30,160
the paiute gate so here

67
00:04:30,160 --> 00:04:37,720
if boss what is which should know if

68
00:04:37,720 --> 00:04:45,280
both if both output a 1 and not those

69
00:04:45,280 --> 00:04:50,710
input are 0 so put is 1 this is the user

70
00:04:50,710 --> 00:04:56,710
symbol for zone and with the XOR gate

71
00:04:56,710 --> 00:04:59,110
you can also do computation with

72
00:04:59,110 --> 00:05:02,140
mathematical computation like for

73
00:05:02,140 --> 00:05:06,310
starting another so another one bit

74
00:05:06,310 --> 00:05:10,350
adder is in fact exhort gate

75
00:05:10,350 --> 00:05:14,680
so another is little bit simple and we

76
00:05:14,680 --> 00:05:18,490
can complete it by designing what we

77
00:05:18,490 --> 00:05:23,410
call a full adder so I would say half

78
00:05:23,410 --> 00:05:26,560
adder is a simple adder and the career

79
00:05:26,560 --> 00:05:29,620
so the curry is one only if both inputs

80
00:05:29,620 --> 00:05:34,690
are one and if you want to be a little

81
00:05:34,690 --> 00:05:38,200
bit more couplet you can design a full

82
00:05:38,200 --> 00:05:40,900
adder with an input carry and output

83
00:05:40,900 --> 00:05:44,410
carry so it becomes it a bit complex it

84
00:05:44,410 --> 00:05:47,920
handles all the values cases of the

85
00:05:47,920 --> 00:05:51,820
possible inputs value of the inputs and

86
00:05:51,820 --> 00:05:55,590
generate the Sun and the output curry

87
00:05:55,590 --> 00:05:59,950
and usually it's too complex to be

88
00:05:59,950 --> 00:06:03,880
written like like this so on scheme you

89
00:06:03,880 --> 00:06:08,320
abstract with a box saying okay so it's

90
00:06:08,320 --> 00:06:12,760
another and with this full adder you can

91
00:06:12,760 --> 00:06:15,970
do 6 little bit more complex because you

92
00:06:15,970 --> 00:06:20,530
can group them together and here you

93
00:06:20,530 --> 00:06:23,890
have a 4-bit other and if you want to

94
00:06:23,890 --> 00:06:26,410
set it to bit other you can just

95
00:06:26,410 --> 00:06:30,850
replicate this scheme several times so

96
00:06:30,850 --> 00:06:34,510
you have inputs a and input B the Sun

97
00:06:34,510 --> 00:06:38,470
and at the end a carry that you can

98
00:06:38,470 --> 00:06:43,540
ignore this is how you do a summation

99
00:06:43,540 --> 00:06:48,430
an edition in hardware and if you can

100
00:06:48,430 --> 00:06:56,080
add what you cannot so multiply so you

101
00:06:56,080 --> 00:06:59,380
replicate there are several times and

102
00:06:59,380 --> 00:07:04,930
you either it's like a multiplication on

103
00:07:04,930 --> 00:07:08,590
the bench paper and pencil you add only

104
00:07:08,590 --> 00:07:12,400
if the bit is said to one and each time

105
00:07:12,400 --> 00:07:17,040
you shift this is how you can do

106
00:07:17,040 --> 00:07:21,670
multiplayer in hardware starting from

107
00:07:21,670 --> 00:07:31,300
other starting from simple gates so as

108
00:07:31,300 --> 00:07:34,660
you may as you have seen just using

109
00:07:34,660 --> 00:07:38,950
simple logical gate you can do I would

110
00:07:38,950 --> 00:07:41,590
say almost any mathematical function

111
00:07:41,590 --> 00:07:44,380
well almost any simple mathematical

112
00:07:44,380 --> 00:07:47,500
function in hardware so from it you get

113
00:07:47,500 --> 00:07:52,350
you have inputs and you compute outputs

114
00:07:52,350 --> 00:07:57,910
that's nice but in fact that's not that

115
00:07:57,910 --> 00:08:00,850
powerful because very quickly your

116
00:08:00,850 --> 00:08:03,730
design becomes very very big we have

117
00:08:03,730 --> 00:08:07,120
seen how big is a multiplier if you do a

118
00:08:07,120 --> 00:08:08,950
lot of multiplication in your

119
00:08:08,950 --> 00:08:11,610
computation it will be very very large

120
00:08:11,610 --> 00:08:14,410
and one way to short

121
00:08:14,410 --> 00:08:17,200
shorten the computation is to use the

122
00:08:17,200 --> 00:08:22,270
right person you want to reuse the

123
00:08:22,270 --> 00:08:28,810
output in as inputs and fortunately or

124
00:08:28,810 --> 00:08:32,490
as a matter of fact you can't do that

125
00:08:32,490 --> 00:08:37,720
easily the reason is because hardware is

126
00:08:37,720 --> 00:08:41,289
not about only logical concept it's also

127
00:08:41,289 --> 00:08:45,040
about physical concept like time

128
00:08:45,040 --> 00:08:48,280
propagation if you if you come back to

129
00:08:48,280 --> 00:08:52,480
the full adder there are three inputs

130
00:08:52,480 --> 00:08:56,100
and in fact the times

131
00:08:56,100 --> 00:09:00,480
it's times there is a gate it takes time

132
00:09:00,480 --> 00:09:02,610
to compute the output because some

133
00:09:02,610 --> 00:09:05,759
capacity capacity in the in the design

134
00:09:05,759 --> 00:09:13,860
star Eden it's not it's not lightning

135
00:09:13,860 --> 00:09:15,540
fast it takes time to compute the output

136
00:09:15,540 --> 00:09:20,639
and as a consequence the output are not

137
00:09:20,639 --> 00:09:27,420
ready at the same time so you may expect

138
00:09:27,420 --> 00:09:30,990
a perfect output like in this diagram

139
00:09:30,990 --> 00:09:36,600
but in fact for example the output of a

140
00:09:36,600 --> 00:09:42,029
zero comes just before but before the

141
00:09:42,029 --> 00:09:46,110
output of a one and if you observe a

142
00:09:46,110 --> 00:09:51,300
loop it will drift more and more and for

143
00:09:51,300 --> 00:09:53,089
example the output of a two will be

144
00:09:53,089 --> 00:09:55,860
available much later and because of that

145
00:09:55,860 --> 00:09:59,850
you will add wrong outputs at many times

146
00:09:59,850 --> 00:10:02,430
so you don't know where is the correct

147
00:10:02,430 --> 00:10:09,839
output so you can try to avoid this

148
00:10:09,839 --> 00:10:11,759
nastiest fact by for example balancing

149
00:10:11,759 --> 00:10:14,240
the circuit but it's very very very hard

150
00:10:14,240 --> 00:10:18,149
so the main word and when you do digital

151
00:10:18,149 --> 00:10:22,730
design is never have direct feedback and

152
00:10:22,730 --> 00:10:25,980
the way to solve that is to use what we

153
00:10:25,980 --> 00:10:31,709
call a register memorizing element which

154
00:10:31,709 --> 00:10:36,779
need a clock and this particular gate

155
00:10:36,779 --> 00:10:41,279
what we well we call it a flip-flop will

156
00:10:41,279 --> 00:10:46,490
only win drive we memorize the input and

157
00:10:46,490 --> 00:10:51,029
we reflect the input only at some times

158
00:10:51,029 --> 00:10:53,310
when the clock is active so here for

159
00:10:53,310 --> 00:11:00,779
example the clock is active so the the

160
00:11:00,779 --> 00:11:03,839
input of the flip-flop here will be

161
00:11:03,839 --> 00:11:06,569
reflected to the output just when the

162
00:11:06,569 --> 00:11:08,600
clock is active here

163
00:11:08,600 --> 00:11:10,820
again here's a clock he cast is active

164
00:11:10,820 --> 00:11:12,800
the input is here and will be reflected

165
00:11:12,800 --> 00:11:18,680
on the output here and with this kind of

166
00:11:18,680 --> 00:11:21,950
circuit you have a perfect

167
00:11:21,950 --> 00:11:27,530
well perfectly clean output that reason

168
00:11:27,530 --> 00:11:31,760
why we always use much almost always use

169
00:11:31,760 --> 00:11:35,600
clocks in digital circuit and I'm the

170
00:11:35,600 --> 00:11:37,730
reason why any digital circuit as a

171
00:11:37,730 --> 00:11:42,680
maximum clock weight due to the time it

172
00:11:42,680 --> 00:11:47,420
takes for the loop and that's a

173
00:11:47,420 --> 00:11:49,940
performance attached to any digital

174
00:11:49,940 --> 00:11:54,800
circuit so most of the digital circuit

175
00:11:54,800 --> 00:11:57,560
are composed of logic gates that do

176
00:11:57,560 --> 00:12:01,730
computation and phipps herbs or register

177
00:12:01,730 --> 00:12:04,790
that are used to synchronize the circuit

178
00:12:04,790 --> 00:12:12,290
the computation so that the base of how

179
00:12:12,290 --> 00:12:16,730
to design a circuit computation

180
00:12:16,730 --> 00:12:20,900
segmentation it's possible to design a

181
00:12:20,900 --> 00:12:25,400
real circuit using schematic editor but

182
00:12:25,400 --> 00:12:27,350
it works well for very simple circuit

183
00:12:27,350 --> 00:12:30,760
but as soon as it becomes a bit complex

184
00:12:30,760 --> 00:12:34,640
people prefer to use an HDL which is

185
00:12:34,640 --> 00:12:36,560
hardware description language it's like

186
00:12:36,560 --> 00:12:39,230
along with a salon weed or general in

187
00:12:39,230 --> 00:12:41,690
which but the target specific

188
00:12:41,690 --> 00:12:47,450
specifically hardware there are two

189
00:12:47,450 --> 00:12:53,110
mains hardware language very log and

190
00:12:53,110 --> 00:12:58,990
VHDL and here we use VHDL

191
00:13:00,990 --> 00:13:05,930
so we have this kind of board with a

192
00:13:05,930 --> 00:13:09,990
programmable secrete FPGA and since

193
00:13:09,990 --> 00:13:16,170
about two years we have complete open

194
00:13:16,170 --> 00:13:22,470
source software tools to program this

195
00:13:22,470 --> 00:13:25,350
kind of circuit so there is a scent it

196
00:13:25,350 --> 00:13:28,950
is named uses there is a pleasant note I

197
00:13:28,950 --> 00:13:30,810
will explain that later

198
00:13:30,810 --> 00:13:33,570
that is named eric lee hazlewood and

199
00:13:33,570 --> 00:13:36,620
there is ice term which is used to

200
00:13:36,620 --> 00:13:41,310
create the the binary binary stream to

201
00:13:41,310 --> 00:13:43,890
program this circuit so this body is

202
00:13:43,890 --> 00:13:49,590
about 20 euros so very affordable and it

203
00:13:49,590 --> 00:13:54,840
is supported by open source tools so

204
00:13:54,840 --> 00:14:00,420
it's very nice for for beginners so the

205
00:14:00,420 --> 00:14:07,550
first one the only example using the HDL

206
00:14:07,550 --> 00:14:10,980
this described is when an entity

207
00:14:10,980 --> 00:14:13,050
describes the interface of the sorry

208
00:14:13,050 --> 00:14:15,050
which means how it will communicate with

209
00:14:15,050 --> 00:14:19,200
the environment so there is one input

210
00:14:19,200 --> 00:14:22,440
which is the clock and on this board

211
00:14:22,440 --> 00:14:26,820
the clock is generated by your circuit

212
00:14:26,820 --> 00:14:33,120
on the board and five outputs which are

213
00:14:33,120 --> 00:14:37,500
routed on this circuit on the 5 LEDs but

214
00:14:37,500 --> 00:14:39,060
they are not very easy to see it

215
00:14:39,060 --> 00:14:43,580
mattered I will show so just described

216
00:14:43,580 --> 00:14:47,370
with no TT the interface inputs and

217
00:14:47,370 --> 00:14:50,180
outputs

218
00:14:54,220 --> 00:14:57,740
and in vhdl you have the architectures

219
00:14:57,740 --> 00:15:00,500
which describe the internal of the

220
00:15:00,500 --> 00:15:04,360
circuit so i havenít immediate wire

221
00:15:04,360 --> 00:15:07,700
which is which which is a internal clock

222
00:15:07,700 --> 00:15:09,950
because extra clock is three McGirt and

223
00:15:09,950 --> 00:15:13,190
if I try to blink the LED after swimming

224
00:15:13,190 --> 00:15:16,310
guards you will see the sink so I use a

225
00:15:16,310 --> 00:15:21,470
divider to go to divide to four Hertz

226
00:15:21,470 --> 00:15:25,040
which is visible at this point so all

227
00:15:25,040 --> 00:15:28,070
the LEDs will be being together at four

228
00:15:28,070 --> 00:15:33,230
else and how I convert from three three

229
00:15:33,230 --> 00:15:36,110
minutes to four heads I just use a

230
00:15:36,110 --> 00:15:39,500
controller that is incremented each time

231
00:15:39,500 --> 00:15:44,990
the clock as a rising edge from zero to

232
00:15:44,990 --> 00:15:48,430
one so each time the clock is rising

233
00:15:48,430 --> 00:15:52,730
either I average the top of my filter

234
00:15:52,730 --> 00:15:57,410
which is three million minus one and so

235
00:15:57,410 --> 00:16:01,340
I reset the contour to 0 and then I

236
00:16:01,340 --> 00:16:05,270
switch the clock oh if I if I even reach

237
00:16:05,270 --> 00:16:08,750
the maximum of my cooter I just element

238
00:16:08,750 --> 00:16:11,990
it so the guitar will increment it until

239
00:16:11,990 --> 00:16:16,430
300 and then I turn that it will revert

240
00:16:16,430 --> 00:16:20,210
to zero and switch the for McGurk's

241
00:16:20,210 --> 00:16:28,240
clock you have to know that in any

242
00:16:28,240 --> 00:16:31,580
hardware description language everything

243
00:16:31,580 --> 00:16:33,590
is parallel

244
00:16:33,590 --> 00:16:35,690
so this executes at the same time as

245
00:16:35,690 --> 00:16:37,100
this one this one this one this one and

246
00:16:37,100 --> 00:16:39,200
the process is liquid at the same time

247
00:16:39,200 --> 00:16:41,320
at this one everything is parallel

248
00:16:41,320 --> 00:16:44,270
except that within the process execution

249
00:16:44,270 --> 00:16:47,320
is second sure so this is not a tutorial

250
00:16:47,320 --> 00:16:52,460
computer toriel about VHDL just a view

251
00:16:52,460 --> 00:16:57,110
of how it's done so once you have

252
00:16:57,110 --> 00:17:02,330
written the entity and the structure we

253
00:17:02,330 --> 00:17:04,880
will go to synthesis which will come at

254
00:17:04,880 --> 00:17:05,689
it

255
00:17:05,689 --> 00:17:10,159
- binary code used to program the

256
00:17:10,159 --> 00:17:17,000
programs FPGA and using the GS dead

257
00:17:17,000 --> 00:17:20,209
front-end you first analyze the the file

258
00:17:20,209 --> 00:17:22,309
so you let the compiler know about these

259
00:17:22,309 --> 00:17:25,269
files and then you did the Santa teasers

260
00:17:25,269 --> 00:17:28,039
you say ok I want to generate - sorry

261
00:17:28,039 --> 00:17:32,179
for lead which is known here and I want

262
00:17:32,179 --> 00:17:39,610
to target this FPGA so if this FPGA is a

263
00:17:39,610 --> 00:17:45,460
IC e-40 and you specify the output file

264
00:17:45,460 --> 00:17:49,460
so you guys a lot of processing that is

265
00:17:49,460 --> 00:17:54,289
done on the input file and it generate

266
00:17:54,289 --> 00:17:58,879
what we call an at least which is a net

267
00:17:58,879 --> 00:18:03,049
of gates and off registers and then you

268
00:18:03,049 --> 00:18:07,970
can use a rack the P&L - + to place all

269
00:18:07,970 --> 00:18:12,830
these gates so it will try to assign

270
00:18:12,830 --> 00:18:17,809
each gate to the logical blocks of the

271
00:18:17,809 --> 00:18:21,529
FPGA and to route all the nets what's

272
00:18:21,529 --> 00:18:24,080
very to be technical it pretty

273
00:18:24,080 --> 00:18:28,700
automatically and if it works you you're

274
00:18:28,700 --> 00:18:32,659
okay and with when usual it was usually

275
00:18:32,659 --> 00:18:35,059
it works it works it falls apart you are

276
00:18:35,059 --> 00:18:36,919
using too many gates and there's not

277
00:18:36,919 --> 00:18:40,580
enough gates of the the FPGA or if you

278
00:18:40,580 --> 00:18:44,419
are just at the limit the person who

279
00:18:44,419 --> 00:18:48,049
talk and say no I cannot find all I

280
00:18:48,049 --> 00:18:51,259
cannot find all those routes and when

281
00:18:51,259 --> 00:18:53,450
you pass on what you so specify which

282
00:18:53,450 --> 00:18:58,610
pads is assigned to all the input and

283
00:18:58,610 --> 00:19:03,049
then you have to program the FPGA so in

284
00:19:03,049 --> 00:19:06,649
fact on this board you have a USB

285
00:19:06,649 --> 00:19:08,990
connector and the USB connector is

286
00:19:08,990 --> 00:19:13,399
connected to to a flash so you write a

287
00:19:13,399 --> 00:19:17,899
binary to the flash and the FPGA when it

288
00:19:17,899 --> 00:19:19,389
is started it

289
00:19:19,389 --> 00:19:21,789
with binary from the flash and program

290
00:19:21,789 --> 00:19:27,459
all this all the route network and and

291
00:19:27,459 --> 00:19:35,769
the logical block and once once you once

292
00:19:35,769 --> 00:19:38,499
you flashed you have rhythms of your

293
00:19:38,499 --> 00:19:42,159
binary stream in the flash it's ok so

294
00:19:42,159 --> 00:19:46,079
it's not exactly the one I have program

295
00:19:48,779 --> 00:19:53,679
but you could see LED blinking in fact

296
00:19:53,679 --> 00:19:55,359
it's what I think it's a different it's

297
00:19:55,359 --> 00:19:57,070
a thirty more elaborately designed it's

298
00:19:57,070 --> 00:20:05,349
rotating but almost the same so this is

299
00:20:05,349 --> 00:20:11,289
all the open-source tools i abused okay

300
00:20:11,289 --> 00:20:14,440
i am the developer of jl so that's why i

301
00:20:14,440 --> 00:20:17,669
have used it

302
00:20:17,669 --> 00:20:20,139
your sis is a synthetic server but it

303
00:20:20,139 --> 00:20:24,009
also that's also gone up front end which

304
00:20:24,009 --> 00:20:27,940
is normal when it is almost pizza food

305
00:20:27,940 --> 00:20:31,479
why the VHL front-end is just when still

306
00:20:31,479 --> 00:20:33,539
work-in-progress

307
00:20:33,539 --> 00:20:38,829
what's at so you have a really touched

308
00:20:38,829 --> 00:20:40,690
an open-source option for this kind of

309
00:20:40,690 --> 00:20:43,499
SPG

310
00:20:45,310 --> 00:20:55,819
[Applause]

311
00:20:58,620 --> 00:21:03,370
it's ladies semiconductor but if you

312
00:21:03,370 --> 00:21:06,850
look on Google for ICU for tea you will

313
00:21:06,850 --> 00:21:09,149
find it

314
00:21:16,590 --> 00:21:19,919
the Bing

315
00:21:19,980 --> 00:21:27,360
good question minion sir

316
00:21:27,360 --> 00:21:30,640
first if you don't do back you don't get

317
00:21:30,640 --> 00:21:38,760
to debug second what you can do with

318
00:21:38,760 --> 00:21:42,160
once you have written your design you

319
00:21:42,160 --> 00:21:45,160
can simulate it so it's completely

320
00:21:45,160 --> 00:21:48,760
software approach and you can see you

321
00:21:48,760 --> 00:21:51,690
can try to feed inputs and you can see

322
00:21:51,690 --> 00:21:55,210
what has outputs or you can write test

323
00:21:55,210 --> 00:21:57,900
bench to be sure that your design

324
00:21:57,900 --> 00:22:03,220
behaves correctly and sometimes it bears

325
00:22:03,220 --> 00:22:06,220
correctly on the paper and we say and

326
00:22:06,220 --> 00:22:10,200
when you program in network and then

327
00:22:10,200 --> 00:22:12,070
it's not easy

328
00:22:12,070 --> 00:22:14,740
usually you have to you can you can you

329
00:22:14,740 --> 00:22:18,220
have to add some circuit to try to

330
00:22:18,220 --> 00:22:20,350
understand what happens and was in the

331
00:22:20,350 --> 00:22:24,659
stress Cup but that is kind of difficult

332
00:22:26,510 --> 00:22:29,650
[Music]

333
00:22:32,220 --> 00:22:36,010
know unless you want to other on

334
00:22:36,010 --> 00:22:38,980
circuits that try to read values net and

335
00:22:38,980 --> 00:22:42,600
outputs on the external part but no

336
00:22:42,600 --> 00:22:45,740
[Music]

337
00:22:47,670 --> 00:22:53,710
yeah yes there does simulation for VHDL

338
00:22:53,710 --> 00:22:55,780
and I carries very not does simulation

339
00:22:55,780 --> 00:23:01,080
for very long so it's complete

340
00:23:01,090 --> 00:23:05,310
[Applause]

