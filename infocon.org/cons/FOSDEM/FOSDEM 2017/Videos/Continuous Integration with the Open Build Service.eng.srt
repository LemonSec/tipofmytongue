1
00:00:00,000 --> 00:00:03,560
paestum 2017 there's for you

2
00:00:04,490 --> 00:00:06,650
since Deborah we have Christian

3
00:00:06,650 --> 00:00:09,260
brookmire and he will be presenting he

4
00:00:09,260 --> 00:00:16,520
didn't Thanks sorry so I would like to

5
00:00:16,520 --> 00:00:19,070
start my presentation with a short life

6
00:00:19,070 --> 00:00:21,970
demo I'm not sure if it would will work

7
00:00:21,970 --> 00:00:25,099
because in the I only have 20 minutes

8
00:00:25,099 --> 00:00:28,160
time so in the past it took around 15-20

9
00:00:28,160 --> 00:00:29,540
minutes so I'm not sure if it will

10
00:00:29,540 --> 00:00:31,939
finish in the end so I have a repository

11
00:00:31,939 --> 00:00:36,020
on github created and I will just it's a

12
00:00:36,020 --> 00:00:38,149
simple hello world program so I will

13
00:00:38,149 --> 00:00:39,739
just change it to hello

14
00:00:39,739 --> 00:00:49,149
destroy deaf room so and committed

15
00:00:50,070 --> 00:00:53,520
so and in the end I can show you that we

16
00:00:53,520 --> 00:00:55,860
have a new Linux distribution created

17
00:00:55,860 --> 00:00:58,200
and with a with my package installed

18
00:00:58,200 --> 00:01:09,479
already so I'm from openSUSE I work at

19
00:01:09,479 --> 00:01:12,270
Suzy and the PO solutions team so I'm we

20
00:01:12,270 --> 00:01:15,150
work mice mostly on the mobile service

21
00:01:15,150 --> 00:01:17,550
and some of you may notice that we

22
00:01:17,550 --> 00:01:19,860
brought our own beer to our booth so you

23
00:01:19,860 --> 00:01:23,220
can buy it at our Cheers any anybody

24
00:01:23,220 --> 00:01:28,110
thirsty so I wanted to start my

25
00:01:28,110 --> 00:01:32,759
presentation with some comparison to

26
00:01:32,759 --> 00:01:34,140
brewing here

27
00:01:34,140 --> 00:01:36,360
so why it's important to have quality

28
00:01:36,360 --> 00:01:50,960
assurance I tried it this morning

29
00:01:53,900 --> 00:01:57,330
so what can possibly go wrong so if you

30
00:01:57,330 --> 00:01:59,820
work for a brewery and you have to be

31
00:01:59,820 --> 00:02:01,620
you're in charge of the quality of your

32
00:02:01,620 --> 00:02:03,840
beer then and you don't have automatic

33
00:02:03,840 --> 00:02:06,030
testing then you have to taste it

34
00:02:06,030 --> 00:02:07,799
yourself and you're constantly drunk

35
00:02:07,799 --> 00:02:11,820
probably so you if you pee is not not

36
00:02:11,820 --> 00:02:14,549
good so you get bad publicity so nobody

37
00:02:14,549 --> 00:02:16,920
will buy your beer nobody wants to drink

38
00:02:16,920 --> 00:02:20,220
it and because it's food so government

39
00:02:20,220 --> 00:02:22,110
is involved so they will probably give

40
00:02:22,110 --> 00:02:24,420
you some fine and eventually they will

41
00:02:24,420 --> 00:02:29,040
close your brewery which means so they

42
00:02:29,040 --> 00:02:31,410
will for sure close it if the beers so

43
00:02:31,410 --> 00:02:33,630
bad that people get sick from from

44
00:02:33,630 --> 00:02:36,840
drinking it so what happens in the end

45
00:02:36,840 --> 00:02:40,019
sale sales decrease costs increase and

46
00:02:40,019 --> 00:02:44,280
you're broke so how is this related to

47
00:02:44,280 --> 00:02:47,519
software so in software it's also

48
00:02:47,519 --> 00:02:50,760
important to have high quality and how

49
00:02:50,760 --> 00:02:53,850
do you how do we measure quality in in

50
00:02:53,850 --> 00:02:58,530
software so one measurement is that the

51
00:02:58,530 --> 00:02:59,760
software should meet all your

52
00:02:59,760 --> 00:03:02,609
requirements which also means it should

53
00:03:02,609 --> 00:03:03,870
be free of PACs so

54
00:03:03,870 --> 00:03:07,110
software failures and how do we make

55
00:03:07,110 --> 00:03:09,420
sure that we don't introduce bugs so I

56
00:03:09,420 --> 00:03:12,540
would like to decide Martin Fowler maybe

57
00:03:12,540 --> 00:03:14,430
some of you knowing me published some

58
00:03:14,430 --> 00:03:17,459
some famous books so continuous

59
00:03:17,459 --> 00:03:19,620
integration doesn't get rid of bugs but

60
00:03:19,620 --> 00:03:21,690
it does make them dramatically easier to

61
00:03:21,690 --> 00:03:25,440
find and remove so and this is my topic

62
00:03:25,440 --> 00:03:27,690
of my talk continuous integration with

63
00:03:27,690 --> 00:03:33,390
their open build service so what I will

64
00:03:33,390 --> 00:03:36,810
talk about this is basically the

65
00:03:36,810 --> 00:03:39,599
workflow I want to show you so in the in

66
00:03:39,599 --> 00:03:42,810
the right corner you see it maybe some

67
00:03:42,810 --> 00:03:46,200
of you coding and pushing your your code

68
00:03:46,200 --> 00:03:48,299
constantly to the upstream repository

69
00:03:48,299 --> 00:03:52,970
could be github or some other favorite

70
00:03:52,970 --> 00:03:56,060
favorite source control management

71
00:03:56,060 --> 00:04:00,540
system so from there from the repository

72
00:04:00,540 --> 00:04:03,000
we want to get the code into the build

73
00:04:03,000 --> 00:04:04,799
service which automatically builds

74
00:04:04,799 --> 00:04:07,739
binaries for us so for instance RPM

75
00:04:07,739 --> 00:04:09,930
packages Debian packages which you can

76
00:04:09,930 --> 00:04:11,190
install then on your favorite

77
00:04:11,190 --> 00:04:16,079
distributions and so the next step but

78
00:04:16,079 --> 00:04:17,880
what we would like to do is build out of

79
00:04:17,880 --> 00:04:21,870
all of these packages complete a

80
00:04:21,870 --> 00:04:26,039
complete Linux image so for instance an

81
00:04:26,039 --> 00:04:30,750
ISO or raw image so and with my raw

82
00:04:30,750 --> 00:04:33,450
image I would like to be able every time

83
00:04:33,450 --> 00:04:34,860
I build a new package and get a new

84
00:04:34,860 --> 00:04:36,870
distribution I would like to be able to

85
00:04:36,870 --> 00:04:40,289
see if this image still works so that

86
00:04:40,289 --> 00:04:43,110
all the packages are installed it boots

87
00:04:43,110 --> 00:04:47,669
correctly the services are running and

88
00:04:47,669 --> 00:04:49,979
get some feedback in the end so yes it

89
00:04:49,979 --> 00:04:54,020
works or no it doesn't work anymore so

90
00:04:54,020 --> 00:04:59,130
how can the build service and the tools

91
00:04:59,130 --> 00:05:01,200
that you use for instance we use okay to

92
00:05:01,200 --> 00:05:05,210
test the distributions so the full stack

93
00:05:05,210 --> 00:05:09,770
how can have it

94
00:05:10,279 --> 00:05:12,969
so

95
00:05:13,439 --> 00:05:16,979
and the post service is so vital you

96
00:05:16,979 --> 00:05:20,129
need to build service it's see you as a

97
00:05:20,129 --> 00:05:23,239
software developer shouldn't care about

98
00:05:23,239 --> 00:05:25,939
distributing your software to different

99
00:05:25,939 --> 00:05:29,089
different distributions to different

100
00:05:29,089 --> 00:05:31,379
architectures you should just care about

101
00:05:31,379 --> 00:05:34,229
your source code and then push it to the

102
00:05:34,229 --> 00:05:36,119
build service and get a new package for

103
00:05:36,119 --> 00:05:39,269
instance for su say for openSUSE leap or

104
00:05:39,269 --> 00:05:43,499
a tumbleweed or fedora so this is the

105
00:05:43,499 --> 00:05:45,360
only thing but you should care about so

106
00:05:45,360 --> 00:05:47,339
in the build service hubs here so you

107
00:05:47,339 --> 00:05:50,219
just push your your code and you spec

108
00:05:50,219 --> 00:05:52,679
files or your your package description

109
00:05:52,679 --> 00:05:54,300
to the build service and it

110
00:05:54,300 --> 00:05:57,749
automatically creates all the specified

111
00:05:57,749 --> 00:06:00,419
binaries for you so you get out

112
00:06:00,419 --> 00:06:02,069
different architectures you get out

113
00:06:02,069 --> 00:06:05,909
different distributions and furthermore

114
00:06:05,909 --> 00:06:08,189
if some of your depends dependencies

115
00:06:08,189 --> 00:06:10,529
changed it will rebuild all your all

116
00:06:10,529 --> 00:06:13,499
your packages so if one package relies

117
00:06:13,499 --> 00:06:15,989
on one other and this get gets rebuilt

118
00:06:15,989 --> 00:06:20,359
it will repeat the wall chain

119
00:06:23,460 --> 00:06:26,729
furthermore you can in the bolts of this

120
00:06:26,729 --> 00:06:30,660
collaborate so imagine like github so if

121
00:06:30,660 --> 00:06:32,610
you if you have a pack in a package you

122
00:06:32,610 --> 00:06:35,310
can fork it fix it and submit it back so

123
00:06:35,310 --> 00:06:36,979
like you were to it with code and github

124
00:06:36,979 --> 00:06:44,180
so that is one of our main features so

125
00:06:44,180 --> 00:06:46,800
the first step is how do you get your

126
00:06:46,800 --> 00:06:49,770
code into the repository you you all

127
00:06:49,770 --> 00:06:51,660
work in free software development so I

128
00:06:51,660 --> 00:06:53,370
will leave out the step you all know how

129
00:06:53,370 --> 00:06:56,340
to get code into your github or git

130
00:06:56,340 --> 00:07:00,360
repository the next step is how to get

131
00:07:00,360 --> 00:07:01,979
how do we get the code from the

132
00:07:01,979 --> 00:07:05,910
repository to the build service so in

133
00:07:05,910 --> 00:07:08,330
the build service everything is

134
00:07:08,330 --> 00:07:12,810
everything is so the main structure is

135
00:07:12,810 --> 00:07:14,490
you have a project and inside your

136
00:07:14,490 --> 00:07:15,960
project project you have different

137
00:07:15,960 --> 00:07:17,729
packages so for instance here you have

138
00:07:17,729 --> 00:07:19,440
an applications project with a

139
00:07:19,440 --> 00:07:21,660
sub-project popular and then you would

140
00:07:21,660 --> 00:07:28,919
have a gym or firefox package so this is

141
00:07:28,919 --> 00:07:31,590
basically the hello world project I

142
00:07:31,590 --> 00:07:35,610
showed you in the beginning and so how

143
00:07:35,610 --> 00:07:37,979
do we get it now into the world service

144
00:07:37,979 --> 00:07:39,960
so the main feature what we you see a

145
00:07:39,960 --> 00:07:42,300
services so services is like you know

146
00:07:42,300 --> 00:07:46,020
some you can trigger a service to modify

147
00:07:46,020 --> 00:07:49,949
to change to update your source files

148
00:07:49,949 --> 00:07:53,460
and we have for instance tasks service

149
00:07:53,460 --> 00:07:55,800
which will trick it which you can

150
00:07:55,800 --> 00:07:57,270
trigger and it will automatically

151
00:07:57,270 --> 00:07:59,130
download your source files from the

152
00:07:59,130 --> 00:08:01,650
builds from github repacks it and

153
00:08:01,650 --> 00:08:03,780
commits it to the to the build service

154
00:08:03,780 --> 00:08:07,139
so that you get with it so that you get

155
00:08:07,139 --> 00:08:12,919
automatically a new RPM package both so

156
00:08:12,919 --> 00:08:15,150
there's another service for instance a

157
00:08:15,150 --> 00:08:18,150
set set version which will automatically

158
00:08:18,150 --> 00:08:20,580
update your your package description

159
00:08:20,580 --> 00:08:25,130
with a actual with the correct version

160
00:08:25,589 --> 00:08:29,349
so and how do you trigger and get up we

161
00:08:29,349 --> 00:08:32,409
have a really nice feature so there is a

162
00:08:32,409 --> 00:08:35,198
github hook already built in in in

163
00:08:35,198 --> 00:08:37,870
github so you just have to specify your

164
00:08:37,870 --> 00:08:40,479
token of the project and specify the

165
00:08:40,479 --> 00:08:43,089
there's already a default instance of

166
00:08:43,089 --> 00:08:44,709
the build service specified but you can

167
00:08:44,709 --> 00:08:47,139
enter some other so if you want to host

168
00:08:47,139 --> 00:08:49,180
your own build service instance you can

169
00:08:49,180 --> 00:08:54,339
enter this one so that means if we set

170
00:08:54,339 --> 00:08:56,589
up this with every commit you do to your

171
00:08:56,589 --> 00:09:00,070
github or some other SCM management

172
00:09:00,070 --> 00:09:02,980
system and you get the source code

173
00:09:02,980 --> 00:09:04,570
committed to the build service which

174
00:09:04,570 --> 00:09:06,490
will automatically trigger a rebuild of

175
00:09:06,490 --> 00:09:14,260
your package so we have the first first

176
00:09:14,260 --> 00:09:18,970
two steps the third step is actually

177
00:09:18,970 --> 00:09:21,040
automatically built in the in the build

178
00:09:21,040 --> 00:09:24,370
service so I don't need to talk much

179
00:09:24,370 --> 00:09:26,860
about this one because as soon as you as

180
00:09:26,860 --> 00:09:28,660
you change your sources it will trigger

181
00:09:28,660 --> 00:09:31,839
the rebuild anyway but how do we get out

182
00:09:31,839 --> 00:09:34,870
of the package is now complete Linux

183
00:09:34,870 --> 00:09:37,630
distributions so like an ISO image or

184
00:09:37,630 --> 00:09:42,339
raw image so in openSUSE we use key B

185
00:09:42,339 --> 00:09:46,920
which is a command line tool to

186
00:09:46,920 --> 00:09:50,620
automatically build a fully complete

187
00:09:50,620 --> 00:09:56,380
Linux distribution so we have we use it

188
00:09:56,380 --> 00:09:58,449
at su set to build all of our SUSE Linux

189
00:09:58,449 --> 00:10:00,550
Enterprise and also in openSUSE to build

190
00:10:00,550 --> 00:10:05,079
all our options a releases Soviet two

191
00:10:05,079 --> 00:10:06,370
versions now we have the old version

192
00:10:06,370 --> 00:10:08,470
which is in Perl written and a new

193
00:10:08,470 --> 00:10:10,810
version which is now in peyten rewritten

194
00:10:10,810 --> 00:10:14,230
and which we use from from the next of

195
00:10:14,230 --> 00:10:18,339
this was a really song so how does it

196
00:10:18,339 --> 00:10:20,889
work you basically you have your package

197
00:10:20,889 --> 00:10:22,779
sources which are in the build service

198
00:10:22,779 --> 00:10:24,519
anyway so you author your packages and

199
00:10:24,519 --> 00:10:26,920
then you have a image description which

200
00:10:26,920 --> 00:10:29,380
will contain all the repositories all

201
00:10:29,380 --> 00:10:32,160
the packages you want to install all

202
00:10:32,160 --> 00:10:36,540
users for instance you can specify

203
00:10:36,540 --> 00:10:40,079
config files to override you can specify

204
00:10:40,079 --> 00:10:42,069
transcripts to be executed while

205
00:10:42,069 --> 00:10:48,730
building the image so

206
00:10:48,730 --> 00:10:50,769
this is basically an image description

207
00:10:50,769 --> 00:10:52,870
so the most important file is is

208
00:10:52,870 --> 00:10:56,380
config.xml which is a configuration file

209
00:10:56,380 --> 00:10:58,570
which contains all the stuff I already

210
00:10:58,570 --> 00:11:00,130
mentioned then you have images and

211
00:11:00,130 --> 00:11:02,889
config file script which is which are

212
00:11:02,889 --> 00:11:05,019
too shy scripts which can execute it and

213
00:11:05,019 --> 00:11:08,410
then you have a root root directory

214
00:11:08,410 --> 00:11:10,990
which just gets copied over your root

215
00:11:10,990 --> 00:11:13,389
directory to when you can use it to

216
00:11:13,389 --> 00:11:17,620
overwrite files so but do you need to

217
00:11:17,620 --> 00:11:22,320
write all of this from scratch No

218
00:11:22,529 --> 00:11:26,320
so we have in so but we notice that many

219
00:11:26,320 --> 00:11:30,040
people use SUSE studio which is our from

220
00:11:30,040 --> 00:11:32,980
from Susie an online tool to create

221
00:11:32,980 --> 00:11:35,980
image description and images so many

222
00:11:35,980 --> 00:11:40,360
people configured their their image and

223
00:11:40,360 --> 00:11:42,670
SUSE Studio exported all the files and

224
00:11:42,670 --> 00:11:45,670
imported it into the build service so

225
00:11:45,670 --> 00:11:48,220
when we wanted to get rid of this step

226
00:11:48,220 --> 00:11:51,250
so we included now the base image

227
00:11:51,250 --> 00:11:53,230
description so on the main page you just

228
00:11:53,230 --> 00:11:56,740
go to a new image and then we have some

229
00:11:56,740 --> 00:11:58,959
pre selection of base images we selected

230
00:11:58,959 --> 00:12:01,440
and then you get the pre-configured

231
00:12:01,440 --> 00:12:05,040
image description

232
00:12:08,800 --> 00:12:13,829
so that is what we have now is step one

233
00:12:13,829 --> 00:12:17,739
two three and four so the last step is

234
00:12:17,739 --> 00:12:23,649
now how do we get the how can we put the

235
00:12:23,649 --> 00:12:26,619
image test it and check if it still does

236
00:12:26,619 --> 00:12:31,170
what it should do so there is open QA

237
00:12:31,170 --> 00:12:34,839
some of you main went to the talk this

238
00:12:34,839 --> 00:12:37,239
morning from richer so we already showed

239
00:12:37,239 --> 00:12:41,160
some some stuff about okay which is our

240
00:12:41,160 --> 00:12:43,509
distribution test system which we use

241
00:12:43,509 --> 00:12:45,639
for tumbleweed for SUSE Linux Enterprise

242
00:12:45,639 --> 00:12:49,059
so every every tumble bit release what

243
00:12:49,059 --> 00:12:51,699
we do gets before we release gets tested

244
00:12:51,699 --> 00:12:57,279
with open create okay it's basically you

245
00:12:57,279 --> 00:12:59,259
have burn web front-end which has a

246
00:12:59,259 --> 00:13:01,749
database and then you have several

247
00:13:01,749 --> 00:13:05,279
workers and which run the auto installer

248
00:13:05,279 --> 00:13:08,049
and which run different tests

249
00:13:08,049 --> 00:13:11,439
so this several tech ends for instance

250
00:13:11,439 --> 00:13:13,869
we use mostly use QE mode to put the

251
00:13:13,869 --> 00:13:18,399
images and run the tests and but you can

252
00:13:18,399 --> 00:13:21,610
also have unreal Hardware yeah if I PMI

253
00:13:21,610 --> 00:13:27,100
or with a lip word so the vet front end

254
00:13:27,100 --> 00:13:29,259
looks like this that was yesterday

255
00:13:29,259 --> 00:13:31,629
evening so I tried some stuff everything

256
00:13:31,629 --> 00:13:36,220
failed so I hope that my Apple will

257
00:13:36,220 --> 00:13:41,199
we'll know finish so how do the tests

258
00:13:41,199 --> 00:13:44,829
look like so yeah

259
00:13:44,829 --> 00:13:47,199
it's basically written in Perl so you

260
00:13:47,199 --> 00:13:49,389
can write in the tests everything but

261
00:13:49,389 --> 00:13:51,879
you can do in Perl and we have some

262
00:13:51,879 --> 00:13:53,470
macros like for instance the asset

263
00:13:53,470 --> 00:13:56,259
screen here and it specifies a needle

264
00:13:56,259 --> 00:13:58,569
which is bootloader in the time this 30

265
00:13:58,569 --> 00:14:02,949
seconds so the bootloader and it's a

266
00:14:02,949 --> 00:14:04,720
needle and it's needle it's called

267
00:14:04,720 --> 00:14:06,009
because finding the needle in the

268
00:14:06,009 --> 00:14:09,519
haystack and when you run the first time

269
00:14:09,519 --> 00:14:12,730
the test I will stop in the in the web

270
00:14:12,730 --> 00:14:14,829
UI and will ask you I don't I don't know

271
00:14:14,829 --> 00:14:16,629
this needle do you want to trade it and

272
00:14:16,629 --> 00:14:19,629
then you go to the interactive mode and

273
00:14:19,629 --> 00:14:22,030
it shows you the output of the screen

274
00:14:22,030 --> 00:14:26,620
then you can with a with a selector you

275
00:14:26,620 --> 00:14:28,390
can select what do you want to see what

276
00:14:28,390 --> 00:14:30,190
do you want to check on the screen so

277
00:14:30,190 --> 00:14:33,300
that's basically fuzzy image comparison

278
00:14:33,300 --> 00:14:37,180
and checks if there's some major changes

279
00:14:37,180 --> 00:14:39,520
so you're here you see the boot menu in

280
00:14:39,520 --> 00:14:41,530
in gruff and I wanted to check that

281
00:14:41,530 --> 00:14:44,110
there is the first boot option hello

282
00:14:44,110 --> 00:14:44,970
FOSDEM

283
00:14:44,970 --> 00:14:48,160
still there so I created here of the

284
00:14:48,160 --> 00:14:56,110
needle and then it runs through so that

285
00:14:56,110 --> 00:14:59,290
was basically about the main workflow

286
00:14:59,290 --> 00:15:02,050
but what we have in the for the

287
00:15:02,050 --> 00:15:04,960
continuous integration so what is next

288
00:15:04,960 --> 00:15:08,680
in there and input service we prepare

289
00:15:08,680 --> 00:15:10,990
actually and you release which we will

290
00:15:10,990 --> 00:15:14,200
release around February or mid February

291
00:15:14,200 --> 00:15:16,780
so which will basically include the

292
00:15:16,780 --> 00:15:21,449
images feature but I already showed you

293
00:15:22,410 --> 00:15:26,860
so that was - that you can create some

294
00:15:26,860 --> 00:15:29,230
base images which you just need to adapt

295
00:15:29,230 --> 00:15:32,200
a little bit and the next feature is the

296
00:15:32,200 --> 00:15:34,990
multiple package so that means that you

297
00:15:34,990 --> 00:15:36,610
can inside a package you can build

298
00:15:36,610 --> 00:15:38,830
several binaries out of it so you don't

299
00:15:38,830 --> 00:15:41,890
need it was already possible before but

300
00:15:41,890 --> 00:15:43,630
you needed to create some links between

301
00:15:43,630 --> 00:15:47,020
packages and this is now built in we use

302
00:15:47,020 --> 00:15:50,080
it for instance for our arm arm images

303
00:15:50,080 --> 00:15:52,960
so we have a base image description and

304
00:15:52,960 --> 00:15:55,930
then we apply several patches to the to

305
00:15:55,930 --> 00:15:57,940
the different ports so we have one

306
00:15:57,940 --> 00:16:00,310
package container but inside we build

307
00:16:00,310 --> 00:16:02,410
many different images for the different

308
00:16:02,410 --> 00:16:07,199
boards like raspberry pie or banana pie

309
00:16:07,830 --> 00:16:17,100
so I hope that my build is done yet

310
00:16:25,160 --> 00:16:28,160
fish

311
00:16:33,200 --> 00:16:36,170
nope so that is that is my belt from

312
00:16:36,170 --> 00:16:38,510
yesterday evening but I can show you

313
00:16:38,510 --> 00:16:42,079
this this one so here you see the test

314
00:16:42,079 --> 00:16:44,240
result and you see all the needles I

315
00:16:44,240 --> 00:16:47,329
created so you see here I check for the

316
00:16:47,329 --> 00:16:49,790
hello for stem so that is my hello world

317
00:16:49,790 --> 00:16:53,480
program and here you see my bootloader

318
00:16:53,480 --> 00:16:59,630
which checks here 100% match and it also

319
00:16:59,630 --> 00:17:03,519
creates you for instance a video

320
00:17:13,700 --> 00:17:16,790
so you see all the steps that got

321
00:17:16,790 --> 00:17:22,160
executed from from my test so if you if

322
00:17:22,160 --> 00:17:23,869
something goes wrong and you want to

323
00:17:23,869 --> 00:17:25,910
compare you just go to the page watch

324
00:17:25,910 --> 00:17:27,980
the video and see okay but what went

325
00:17:27,980 --> 00:17:28,430
wrong

326
00:17:28,430 --> 00:17:30,020
and also if for instance the needle

327
00:17:30,020 --> 00:17:33,380
doesn't match it compares it shows you

328
00:17:33,380 --> 00:17:36,260
the new image and says what is different

329
00:17:36,260 --> 00:17:37,730
and then do you want to update the

330
00:17:37,730 --> 00:17:39,080
needle or do you want to have a

331
00:17:39,080 --> 00:17:41,270
different needle or is it is it really a

332
00:17:41,270 --> 00:17:46,120
failure so that you can report it

333
00:17:52,060 --> 00:17:54,899
so

334
00:18:01,080 --> 00:18:04,470
so we have a booth here which is in this

335
00:18:04,470 --> 00:18:07,260
building downstairs on on the right you

336
00:18:07,260 --> 00:18:09,810
can see my green arrow in the corner in

337
00:18:09,810 --> 00:18:11,700
the right corner so if you have

338
00:18:11,700 --> 00:18:15,360
questions just drop by and we can show

339
00:18:15,360 --> 00:18:18,630
you also some more examples how it works

340
00:18:18,630 --> 00:18:23,340
how we use it for openSUSE to test it we

341
00:18:23,340 --> 00:18:24,840
can also show you the build service if

342
00:18:24,840 --> 00:18:34,440
you and otherwise I'm basically done so

343
00:18:34,440 --> 00:18:37,320
yeah if you want me to write me an email

344
00:18:37,320 --> 00:18:42,080
or you can find me on github or Twitter

345
00:18:48,080 --> 00:18:52,560
it's-it's supports subversion for

346
00:18:52,560 --> 00:18:57,090
instance and mercurial and it's the sort

347
00:18:57,090 --> 00:18:59,250
service the code is on github so if you

348
00:18:59,250 --> 00:19:00,990
want to have support for another system

349
00:19:00,990 --> 00:19:03,030
just send a pull request and we will

350
00:19:03,030 --> 00:19:11,700
include it and you need to maintain the

351
00:19:11,700 --> 00:19:14,720
spec file within

352
00:19:19,640 --> 00:19:23,750
I haven't tried this but I know that for

353
00:19:23,750 --> 00:19:26,870
instance some colleagues to maintain

354
00:19:26,870 --> 00:19:29,059
their key before us oh yeah their Kiva

355
00:19:29,059 --> 00:19:33,980
descriptions in in github but I don't

356
00:19:33,980 --> 00:19:36,919
know if you can pull it completely so

357
00:19:36,919 --> 00:19:39,730
the spec fight you

358
00:19:58,809 --> 00:20:03,110
you can specify it so there's you saw

359
00:20:03,110 --> 00:20:05,840
the XML file so that was just the base

360
00:20:05,840 --> 00:20:07,940
option but you can specify more options

361
00:20:07,940 --> 00:20:11,360
so you can for instance set in the unix

362
00:20:11,360 --> 00:20:14,269
time stand or they get version or you

363
00:20:14,269 --> 00:20:18,009
just hard code it and say it should be

364
00:20:18,009 --> 00:20:21,200
2.3 and then increment so there are

365
00:20:21,200 --> 00:20:46,820
options to specify the versions so you

366
00:20:46,820 --> 00:20:50,210
can also be sir

367
00:20:50,210 --> 00:20:52,549
the question was if it's possible to

368
00:20:52,549 --> 00:20:53,899
also call with the key be other

369
00:20:53,899 --> 00:20:57,830
distributions than openSUSE right yes

370
00:20:57,830 --> 00:20:59,379
you can also called

371
00:20:59,379 --> 00:21:04,249
redhead you can build fedora so but that

372
00:21:04,249 --> 00:21:08,320
are the only two I know so far

373
00:21:17,040 --> 00:21:20,099
[Music]

374
00:21:26,800 --> 00:21:31,130
yeah it'sit's specified it's a recipe so

375
00:21:31,130 --> 00:21:33,680
you you send and say trigger service to

376
00:21:33,680 --> 00:21:36,260
run it and what we what we did in in

377
00:21:36,260 --> 00:21:39,050
github we included so you can send pull

378
00:21:39,050 --> 00:21:40,790
requests to github to include a service

379
00:21:40,790 --> 00:21:43,160
so they yeah I've also hooked so every

380
00:21:43,160 --> 00:21:44,900
time when you commit to the master or

381
00:21:44,900 --> 00:21:47,960
some branch it will it can send a risk

382
00:21:47,960 --> 00:21:48,470
called

383
00:21:48,470 --> 00:21:51,160
an RP call and which triggers the the

384
00:21:51,160 --> 00:21:54,340
service run

385
00:22:11,399 --> 00:22:15,309
so in in in the github service you can

386
00:22:15,309 --> 00:22:17,799
also specify the target so you can say

387
00:22:17,799 --> 00:22:20,289
only a master or only on this branch or

388
00:22:20,289 --> 00:22:23,139
only then you take some if you if you

389
00:22:23,139 --> 00:22:25,990
create a tech in the indicator branch so

390
00:22:25,990 --> 00:22:28,929
that you can specify it in github when

391
00:22:28,929 --> 00:22:39,880
you want to trigger bian is already

392
00:22:39,880 --> 00:22:41,559
supported in the build service but not

393
00:22:41,559 --> 00:22:44,590
in the key B so though you can build the

394
00:22:44,590 --> 00:22:49,740
packages but you can build the image

395
00:23:01,950 --> 00:23:05,850
thank you thanks

