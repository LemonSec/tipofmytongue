1
00:00:00,000 --> 00:00:02,029
I

2
00:00:19,070 --> 00:00:23,700
test one to test test test one to test

3
00:00:23,700 --> 00:00:26,700
test a little my name is Brandon

4
00:00:26,700 --> 00:00:29,189
Phillips I'm a little teapot short and

5
00:00:29,189 --> 00:00:35,580
stout I'm a little teapot Brandon

6
00:00:35,580 --> 00:00:38,300
Phillips test one two

7
00:00:38,300 --> 00:00:40,730
test one two

8
00:00:40,730 --> 00:00:44,040
hello I am Brandon Phillips testing 1 2

9
00:00:44,040 --> 00:00:55,129
s 1 2 to s 1 - 2 - 1 - hello

10
00:00:58,809 --> 00:01:03,870
sorry I didn't use one of these district

11
00:01:04,910 --> 00:01:09,570
yeah I turned it off you I turned it off

12
00:01:09,570 --> 00:01:19,530
hello test one two hello it's good okay

13
00:01:19,530 --> 00:01:23,160
all right we're gonna get started there

14
00:01:23,160 --> 00:01:25,110
are people outside this room that must

15
00:01:25,110 --> 00:01:27,800
have their livestream so we will begin

16
00:01:27,800 --> 00:01:28,950
hello

17
00:01:28,950 --> 00:01:31,290
I am Brandon Phillips I am the CTO and

18
00:01:31,290 --> 00:01:33,650
co-founder of a company called core OS

19
00:01:33,650 --> 00:01:36,229
we build a lot of open source software

20
00:01:36,229 --> 00:01:38,040
particularly around server

21
00:01:38,040 --> 00:01:40,080
infrastructure and I'm gonna be talking

22
00:01:40,080 --> 00:01:43,350
through kind of the motivations behind a

23
00:01:43,350 --> 00:01:46,500
lot of what we're building and what

24
00:01:46,500 --> 00:01:48,210
we've learned over the last few years

25
00:01:48,210 --> 00:01:49,320
about building this sort of

26
00:01:49,320 --> 00:01:53,250
infrastructure so oh and we are supposed

27
00:01:53,250 --> 00:01:54,960
to have a nice little gift for you okay

28
00:01:54,960 --> 00:01:56,760
excellent you and would welcome you all

29
00:01:56,760 --> 00:01:58,220
to give him a round of applause

30
00:01:58,220 --> 00:02:01,519
[Applause]

31
00:02:04,150 --> 00:02:06,800
you may just watch me eat biscuits for

32
00:02:06,800 --> 00:02:10,340
the next 50 minutes so what I'm going to

33
00:02:10,340 --> 00:02:12,200
do is talk through sort of some of our

34
00:02:12,200 --> 00:02:13,760
motivations on building the stuff that

35
00:02:13,760 --> 00:02:16,459
we've been building and give you kind of

36
00:02:16,459 --> 00:02:20,350
a hint at where all this stuff is going

37
00:02:20,350 --> 00:02:23,840
all right so there are 3.5 billion

38
00:02:23,840 --> 00:02:28,010
Internet users today and this is a

39
00:02:28,010 --> 00:02:30,110
pretty overwhelming number it's a little

40
00:02:30,110 --> 00:02:32,930
less than a majority of the world about

41
00:02:32,930 --> 00:02:34,910
like 48 percent of the world's

42
00:02:34,910 --> 00:02:37,459
population is able to get access to the

43
00:02:37,459 --> 00:02:40,610
Internet and there are about 29 million

44
00:02:40,610 --> 00:02:42,860
people in the world that are in software

45
00:02:42,860 --> 00:02:46,130
engineering or the IT industry that's us

46
00:02:46,130 --> 00:02:50,989
and so 3.5 billion versus 29 million

47
00:02:50,989 --> 00:02:54,340
means that we are extremely outnumbered

48
00:02:54,340 --> 00:02:56,900
there are a lot of people out there who

49
00:02:56,900 --> 00:03:00,500
do not speak the language that we speak

50
00:03:00,500 --> 00:03:04,190
of technology and software what they

51
00:03:04,190 --> 00:03:05,959
care about is they care about their

52
00:03:05,959 --> 00:03:07,850
communications they care about their

53
00:03:07,850 --> 00:03:11,540
commerce and largely it's our

54
00:03:11,540 --> 00:03:13,190
responsibility to take care of those

55
00:03:13,190 --> 00:03:17,269
things for them and it's not like this

56
00:03:17,269 --> 00:03:19,540
problem of us being outnumbered as

57
00:03:19,540 --> 00:03:22,640
people in the computer industry is going

58
00:03:22,640 --> 00:03:26,860
to improve over time last year 238

59
00:03:26,860 --> 00:03:31,820
million new people came online all right

60
00:03:31,820 --> 00:03:34,130
so what are these people doing largely

61
00:03:34,130 --> 00:03:36,140
what they're doing is they are taking

62
00:03:36,140 --> 00:03:39,440
their data their billions and billions

63
00:03:39,440 --> 00:03:42,799
of phones and laptops in the world and

64
00:03:42,799 --> 00:03:44,690
they're taking that data and they're

65
00:03:44,690 --> 00:03:47,420
putting onto servers I know a lot of us

66
00:03:47,420 --> 00:03:50,140
as people in the technology industry

67
00:03:50,140 --> 00:03:52,489
don't feel that the client-server model

68
00:03:52,489 --> 00:03:55,310
is necessarily fair for for people's

69
00:03:55,310 --> 00:03:57,590
rights for the way that people should

70
00:03:57,590 --> 00:04:00,230
have freedoms and freedom from tracking

71
00:04:00,230 --> 00:04:02,780
but it is the dominant paradigm of the

72
00:04:02,780 --> 00:04:05,900
world the reason that we have companies

73
00:04:05,900 --> 00:04:08,329
like Google and Facebook and Twitter is

74
00:04:08,329 --> 00:04:10,010
because this model works extremely well

75
00:04:10,010 --> 00:04:13,699
for the consumer the 3.5 billion users

76
00:04:13,699 --> 00:04:14,900
out there

77
00:04:14,900 --> 00:04:17,389
and so these people like I said are

78
00:04:17,389 --> 00:04:19,130
putting their documents commerce and

79
00:04:19,130 --> 00:04:21,589
communications into these servers and

80
00:04:21,589 --> 00:04:24,020
it's our responsibility to take care of

81
00:04:24,020 --> 00:04:25,699
that data as responsibly as we possibly

82
00:04:25,699 --> 00:04:31,639
can so best estimates is there's on the

83
00:04:31,639 --> 00:04:35,180
order of a hundred million servers in

84
00:04:35,180 --> 00:04:38,030
the world pieces of hardware connected

85
00:04:38,030 --> 00:04:39,680
the internet that are taking in all this

86
00:04:39,680 --> 00:04:42,760
data storing it securing it hopefully

87
00:04:42,760 --> 00:04:44,750
giving it back to people on their

88
00:04:44,750 --> 00:04:50,060
request which means that with 29 million

89
00:04:50,060 --> 00:04:52,760
of us 100 million servers it's about

90
00:04:52,760 --> 00:04:54,590
three per person in the software and IT

91
00:04:54,590 --> 00:04:57,860
industry how many people here maintain a

92
00:04:57,860 --> 00:05:01,940
server themselves all right how many

93
00:05:01,940 --> 00:05:03,680
people in here maintain over three

94
00:05:03,680 --> 00:05:07,970
servers themselves all right and over a

95
00:05:07,970 --> 00:05:11,570
hundred servers themselves all right

96
00:05:11,570 --> 00:05:13,520
vanishingly small I'm gonna guess that

97
00:05:13,520 --> 00:05:15,289
these people work at an Internet giant

98
00:05:15,289 --> 00:05:15,949
of some sort

99
00:05:15,949 --> 00:05:18,289
the Internet giants are the people like

100
00:05:18,289 --> 00:05:20,450
Google the people like Twitter that

101
00:05:20,450 --> 00:05:22,729
people like Amazon the people who

102
00:05:22,729 --> 00:05:25,760
largely their businesses have one way or

103
00:05:25,760 --> 00:05:27,440
the other being transformed by

104
00:05:27,440 --> 00:05:29,720
technology we're seeing this all over

105
00:05:29,720 --> 00:05:31,910
the place your neighborhood grocery

106
00:05:31,910 --> 00:05:34,669
store is now having to compete with with

107
00:05:34,669 --> 00:05:37,460
every single online retailer who wants

108
00:05:37,460 --> 00:05:40,720
to deliver you things via bicycle via

109
00:05:40,720 --> 00:05:44,539
van by a guy walking your groceries from

110
00:05:44,539 --> 00:05:47,300
the grocery store to your house but

111
00:05:47,300 --> 00:05:48,860
every single company in the world one

112
00:05:48,860 --> 00:05:51,680
way or the other is having to compete in

113
00:05:51,680 --> 00:05:56,510
this way so how do these companies that

114
00:05:56,510 --> 00:05:59,830
are maintaining a hundred or more

115
00:05:59,830 --> 00:06:05,419
servers per person doing it we saw that

116
00:06:05,419 --> 00:06:07,190
when everyone raised their hand in here

117
00:06:07,190 --> 00:06:08,479
we saw the majority of people were

118
00:06:08,479 --> 00:06:11,030
comfortable you know managing under a

119
00:06:11,030 --> 00:06:12,650
hundred servers and then they got

120
00:06:12,650 --> 00:06:15,380
vanishingly small as he started to talk

121
00:06:15,380 --> 00:06:18,130
about managing over a hundred servers

122
00:06:18,130 --> 00:06:21,229
and largely there's been a lot of best

123
00:06:21,229 --> 00:06:23,840
practices and ideas developed over the

124
00:06:23,840 --> 00:06:26,360
years at a lot of these companies this

125
00:06:26,360 --> 00:06:27,560
is a book I

126
00:06:27,560 --> 00:06:28,790
I didn't know that O'Reilly was a

127
00:06:28,790 --> 00:06:30,260
sponsor but you should purchase this

128
00:06:30,260 --> 00:06:34,760
book from our sponsor O'Reilly also the

129
00:06:34,760 --> 00:06:38,810
book is under Creative Commons too so if

130
00:06:38,810 --> 00:06:40,100
you don't want to support the sponsor

131
00:06:40,100 --> 00:06:44,780
you can do that as well but what what

132
00:06:44,780 --> 00:06:48,410
this what this book describes is the

133
00:06:48,410 --> 00:06:50,270
perspective of Google and Google's

134
00:06:50,270 --> 00:06:53,480
engineers they have a set of Engineers

135
00:06:53,480 --> 00:06:56,060
called site reliability engineers which

136
00:06:56,060 --> 00:06:58,760
are kind of a hybrid between software

137
00:06:58,760 --> 00:07:01,450
engineering and system administration

138
00:07:01,450 --> 00:07:04,250
where they spend some of their time on

139
00:07:04,250 --> 00:07:05,780
call but they spend a lot of their time

140
00:07:05,780 --> 00:07:07,820
thinking about how to better organize

141
00:07:07,820 --> 00:07:11,090
how to create better processes how to

142
00:07:11,090 --> 00:07:14,990
make the application more reliable for

143
00:07:14,990 --> 00:07:16,639
both the people who are building it and

144
00:07:16,639 --> 00:07:19,850
for the people who are using it and so

145
00:07:19,850 --> 00:07:23,270
in in this book it's about enabling

146
00:07:23,270 --> 00:07:26,630
teams to organize better to specialize

147
00:07:26,630 --> 00:07:28,729
so that people are able to focus on

148
00:07:28,729 --> 00:07:31,669
problems people work best when they have

149
00:07:31,669 --> 00:07:33,289
a handful of things that are responsible

150
00:07:33,289 --> 00:07:35,750
for improving instead of a massive

151
00:07:35,750 --> 00:07:38,120
overwhelming wall of everything is

152
00:07:38,120 --> 00:07:39,890
broken I think we've all been in that

153
00:07:39,890 --> 00:07:42,380
situation it's not very motivating when

154
00:07:42,380 --> 00:07:46,940
everything is broken and take risks if

155
00:07:46,940 --> 00:07:49,580
you have if you have people are focused

156
00:07:49,580 --> 00:07:52,039
on things and you're able to measure it

157
00:07:52,039 --> 00:07:53,750
and you're well-organized you're able to

158
00:07:53,750 --> 00:07:57,229
take calculated risks and largely they

159
00:07:57,229 --> 00:08:00,139
do this they're able to effectively ship

160
00:08:00,139 --> 00:08:03,530
software because they have a bunch of

161
00:08:03,530 --> 00:08:05,330
technologies that they've built as well

162
00:08:05,330 --> 00:08:07,700
it's not just people in process but also

163
00:08:07,700 --> 00:08:11,560
smarter technologies that enable this so

164
00:08:11,560 --> 00:08:13,550
those technologies that we're going to

165
00:08:13,550 --> 00:08:15,410
be talking through here our containers

166
00:08:15,410 --> 00:08:19,130
clustering and monitoring so who here is

167
00:08:19,130 --> 00:08:20,840
familiar with the concept of a container

168
00:08:20,840 --> 00:08:22,639
or docker anything like that

169
00:08:22,639 --> 00:08:25,610
great it's about half so I'll do a quick

170
00:08:25,610 --> 00:08:28,340
review and then we'll dive into some of

171
00:08:28,340 --> 00:08:29,450
the interesting things that have been

172
00:08:29,450 --> 00:08:32,599
built around kubernetes so containers

173
00:08:32,599 --> 00:08:34,099
are pretty straightforward if you aren't

174
00:08:34,099 --> 00:08:36,890
familiar with them it begins with you

175
00:08:36,890 --> 00:08:39,860
and you are software engineer so we'll

176
00:08:39,860 --> 00:08:40,960
go through a couple

177
00:08:40,960 --> 00:08:43,179
use a software engineer you take your

178
00:08:43,179 --> 00:08:45,310
source code you turn that source code

179
00:08:45,310 --> 00:08:47,770
into a container image a container image

180
00:08:47,770 --> 00:08:49,720
really is just a file system like a

181
00:08:49,720 --> 00:08:51,910
tarball with everything inside of it

182
00:08:51,910 --> 00:08:54,220
that is required to run your program so

183
00:08:54,220 --> 00:08:56,170
if it's java application at my avid jar

184
00:08:56,170 --> 00:08:58,000
there's a Python application it might

185
00:08:58,000 --> 00:09:01,450
have a Python file and then you give it

186
00:09:01,450 --> 00:09:04,420
a name so this name is how you'll be

187
00:09:04,420 --> 00:09:07,060
able to tell other people to download it

188
00:09:07,060 --> 00:09:09,070
it'll be the place that you upload it so

189
00:09:09,070 --> 00:09:11,950
think of something like github only this

190
00:09:11,950 --> 00:09:15,010
is for container images so you know in

191
00:09:15,010 --> 00:09:17,260
that chorus we have a thing called Kwai

192
00:09:17,260 --> 00:09:20,020
dot IO it's called Kwai cuz that's how

193
00:09:20,020 --> 00:09:24,070
we pronounce it a lot of people may

194
00:09:24,070 --> 00:09:26,770
pronounce it ki I'm sorry we we've

195
00:09:26,770 --> 00:09:28,150
looked it up in a dictionary and we

196
00:09:28,150 --> 00:09:29,770
didn't know how to pronounce now it's

197
00:09:29,770 --> 00:09:34,000
quite and so you you upload and download

198
00:09:34,000 --> 00:09:37,110
the containers from Kwai hopefully you

199
00:09:37,110 --> 00:09:39,640
find the digests maybe you take that

200
00:09:39,640 --> 00:09:41,380
digest and you create a signature and

201
00:09:41,380 --> 00:09:44,770
move the signature around as well all

202
00:09:44,770 --> 00:09:46,390
right so now you have this little piece

203
00:09:46,390 --> 00:09:49,120
of thing this little asset that you can

204
00:09:49,120 --> 00:09:51,490
move around and host on the internet

205
00:09:51,490 --> 00:09:53,320
somewhere and then you as an Operations

206
00:09:53,320 --> 00:09:55,390
engineer the person who actually wants

207
00:09:55,390 --> 00:09:58,180
to run the application your world looks

208
00:09:58,180 --> 00:09:58,810
like this

209
00:09:58,810 --> 00:10:00,820
you have your three servers I want to

210
00:10:00,820 --> 00:10:02,500
make it comfortable for everybody didn't

211
00:10:02,500 --> 00:10:04,200
want to have too many servers up there

212
00:10:04,200 --> 00:10:07,690
you have your three servers you say one

213
00:10:07,690 --> 00:10:08,290
way or the other

214
00:10:08,290 --> 00:10:10,810
I want those I want that container

215
00:10:10,810 --> 00:10:14,860
running on my three servers three three

216
00:10:14,860 --> 00:10:16,630
copies of the application show up maybe

217
00:10:16,630 --> 00:10:19,570
SSH tin and maybe you ran a fab file

218
00:10:19,570 --> 00:10:23,350
maybe use configuration management maybe

219
00:10:23,350 --> 00:10:25,360
you said I want to run this particular

220
00:10:25,360 --> 00:10:27,970
container on this other server maybe you

221
00:10:27,970 --> 00:10:29,290
want to run this other container on this

222
00:10:29,290 --> 00:10:32,380
other server a couple of times and so

223
00:10:32,380 --> 00:10:33,670
the neat thing is that you're able to

224
00:10:33,670 --> 00:10:36,880
deploy lots of little programs on top of

225
00:10:36,880 --> 00:10:38,260
the same servers and not really worry

226
00:10:38,260 --> 00:10:39,580
about the conflicting with each other

227
00:10:39,580 --> 00:10:42,070
not necessarily taking up the same ports

228
00:10:42,070 --> 00:10:43,750
you don't have to worry about packages

229
00:10:43,750 --> 00:10:47,140
installed etc so containers are really

230
00:10:47,140 --> 00:10:49,510
about application packaging and it

231
00:10:49,510 --> 00:10:52,270
allows you to kind of ship around App

232
00:10:52,270 --> 00:10:54,870
Store style pieces of

233
00:10:54,870 --> 00:10:58,230
all right so we have this source code

234
00:10:58,230 --> 00:11:02,769
and what we've done is we've we've

235
00:11:02,769 --> 00:11:04,509
transformed it into this container image

236
00:11:04,509 --> 00:11:07,870
so what what was actually the process

237
00:11:07,870 --> 00:11:09,459
that happened there what what happened

238
00:11:09,459 --> 00:11:10,600
to green source code to contain our

239
00:11:10,600 --> 00:11:13,180
Ridge so let's just run through a quick

240
00:11:13,180 --> 00:11:14,980
example I download this particular

241
00:11:14,980 --> 00:11:19,509
repository I tell every pause the

242
00:11:19,509 --> 00:11:22,240
tutorial this container image for me I'm

243
00:11:22,240 --> 00:11:23,620
gonna name it like this with this

244
00:11:23,620 --> 00:11:27,180
version number and then I push it off to

245
00:11:27,180 --> 00:11:29,889
the quite hosting service so it feels

246
00:11:29,889 --> 00:11:31,629
very similar if you're familiar with git

247
00:11:31,629 --> 00:11:33,819
or any sort of distributed version

248
00:11:33,819 --> 00:11:36,490
control system feels very similar only

249
00:11:36,490 --> 00:11:38,379
there's a build step in there and then

250
00:11:38,379 --> 00:11:39,759
what's happening behind the scene is

251
00:11:39,759 --> 00:11:41,589
that similar to a make file there's a

252
00:11:41,589 --> 00:11:44,470
little DSL that describes how to build

253
00:11:44,470 --> 00:11:46,720
the thing and then you can push it off

254
00:11:46,720 --> 00:11:50,709
after it's built alright so you end up

255
00:11:50,709 --> 00:11:52,629
with this little container image at the

256
00:11:52,629 --> 00:11:54,490
end of that process you've taken your

257
00:11:54,490 --> 00:11:56,889
source code and transformed it and then

258
00:11:56,889 --> 00:11:59,139
inside of this one because the program

259
00:11:59,139 --> 00:12:02,939
is written in go all we have is Lib C

260
00:12:02,939 --> 00:12:06,189
gives of some little reasons and then

261
00:12:06,189 --> 00:12:09,370
FTD which for the most part is

262
00:12:09,370 --> 00:12:12,279
statically compiled and then we push it

263
00:12:12,279 --> 00:12:16,240
off the claim and then you know similar

264
00:12:16,240 --> 00:12:18,040
to github or whatever you can look at it

265
00:12:18,040 --> 00:12:20,439
and see it and share it with friends and

266
00:12:20,439 --> 00:12:24,879
store it etc alright so the next bit is

267
00:12:24,879 --> 00:12:28,410
about actually running the container so

268
00:12:28,410 --> 00:12:30,850
how does that happen what is the process

269
00:12:30,850 --> 00:12:34,300
there so containers are just normal

270
00:12:34,300 --> 00:12:36,610
Linux processes that happen to live

271
00:12:36,610 --> 00:12:39,579
inside of their own file system so when

272
00:12:39,579 --> 00:12:42,009
I do something like this where I say run

273
00:12:42,009 --> 00:12:45,639
the container what happens is that a

274
00:12:45,639 --> 00:12:50,009
normal Linux process is created that is

275
00:12:50,009 --> 00:12:52,389
talking to the normal Linux interface

276
00:12:52,389 --> 00:12:54,519
really the main difference at the end of

277
00:12:54,519 --> 00:12:55,899
it is it lives in this thing called the

278
00:12:55,899 --> 00:12:57,879
namespace which isolates it from the

279
00:12:57,879 --> 00:13:00,009
rest of the system meaning that it has

280
00:13:00,009 --> 00:13:03,490
its own root filesystem and so it only

281
00:13:03,490 --> 00:13:05,170
sees the things that were in the

282
00:13:05,170 --> 00:13:06,180
container image

283
00:13:06,180 --> 00:13:10,080
that it was built-in okay so pretty

284
00:13:10,080 --> 00:13:11,660
straightforward not a lot has changed

285
00:13:11,660 --> 00:13:14,670
essentially just like you would hop get

286
00:13:14,670 --> 00:13:17,250
install something or young install or

287
00:13:17,250 --> 00:13:19,640
DNF or whatever they're calling it now

288
00:13:19,640 --> 00:13:23,700
the thing and putting it on a big shared

289
00:13:23,700 --> 00:13:25,260
file system you create all these little

290
00:13:25,260 --> 00:13:28,470
file systems and so what it allows you

291
00:13:28,470 --> 00:13:30,000
to do is abstract away the operating

292
00:13:30,000 --> 00:13:32,100
system from the application and this is

293
00:13:32,100 --> 00:13:35,250
really really powerful because who here

294
00:13:35,250 --> 00:13:37,320
likes to maintain really really large

295
00:13:37,320 --> 00:13:40,100
api's with sprawling in dependencies

296
00:13:40,100 --> 00:13:43,620
there's one guy in the back I just need

297
00:13:43,620 --> 00:13:45,959
to point that out so though nobody likes

298
00:13:45,959 --> 00:13:49,170
doing that engineers like engineers I

299
00:13:49,170 --> 00:13:51,120
feel like all want to maintain something

300
00:13:51,120 --> 00:13:52,320
that looks like Unix

301
00:13:52,320 --> 00:13:54,120
it's like I take some bytes I send some

302
00:13:54,120 --> 00:13:56,880
bytes I don't care that's that's my life

303
00:13:56,880 --> 00:13:59,130
I don't want to interpret them if I read

304
00:13:59,130 --> 00:14:00,959
I want to buffer them I don't want to do

305
00:14:00,959 --> 00:14:04,440
anything with them but the reality is is

306
00:14:04,440 --> 00:14:06,000
that our world is very complicated and

307
00:14:06,000 --> 00:14:07,709
we're asking these Linux distros to do

308
00:14:07,709 --> 00:14:10,170
something really hard when we're talking

309
00:14:10,170 --> 00:14:12,270
about server software where they have to

310
00:14:12,270 --> 00:14:15,089
maintain as the stability of our

311
00:14:15,089 --> 00:14:16,770
databases and our web servers and

312
00:14:16,770 --> 00:14:18,420
everything else and then at the same

313
00:14:18,420 --> 00:14:20,520
time we're asking them to make sure that

314
00:14:20,520 --> 00:14:22,680
all the latest security patches get

315
00:14:22,680 --> 00:14:25,290
applied as well and then also I want to

316
00:14:25,290 --> 00:14:27,029
make sure that the piece of software

317
00:14:27,029 --> 00:14:29,760
that I need is installed but it doesn't

318
00:14:29,760 --> 00:14:31,470
conflict with anything else so it

319
00:14:31,470 --> 00:14:33,480
absolutely must be Python 2 installed

320
00:14:33,480 --> 00:14:35,370
where it absolutely must be Python 3

321
00:14:35,370 --> 00:14:38,430
installed on the boss it's a lot of

322
00:14:38,430 --> 00:14:39,959
interdependencies and I think we all

323
00:14:39,959 --> 00:14:43,890
kind of hate to have that job can you

324
00:14:43,890 --> 00:14:45,959
know show Han sook who is a distro

325
00:14:45,959 --> 00:14:49,589
maintainer in the room yeah it's it's

326
00:14:49,589 --> 00:14:53,370
it's hard work and so what we've done

327
00:14:53,370 --> 00:14:56,010
I'm what containers enable is they

328
00:14:56,010 --> 00:14:58,260
enable you to ship a lot less code in

329
00:14:58,260 --> 00:15:01,079
the actual Linux distro the the thing

330
00:15:01,079 --> 00:15:04,560
that's running the kernel and push a lot

331
00:15:04,560 --> 00:15:06,329
of that complexity and managing the

332
00:15:06,329 --> 00:15:07,529
interdependencies for particular

333
00:15:07,529 --> 00:15:11,510
applications into the container images

334
00:15:11,839 --> 00:15:14,820
alright so now what we have with all

335
00:15:14,820 --> 00:15:17,510
these pieces is that we have a way of

336
00:15:17,510 --> 00:15:19,769
developing software and

337
00:15:19,769 --> 00:15:22,619
getting into a unit a really nice kind

338
00:15:22,619 --> 00:15:25,350
of sealed unit and then we have a way of

339
00:15:25,350 --> 00:15:28,110
running that on top of regular Linux

340
00:15:28,110 --> 00:15:30,749
servers but isolating it from the rest

341
00:15:30,749 --> 00:15:32,249
of the software that's running on that

342
00:15:32,249 --> 00:15:36,509
server so we have a really really nice

343
00:15:36,509 --> 00:15:39,480
way of organizing people together you

344
00:15:39,480 --> 00:15:41,670
can now start to imagine that me as a

345
00:15:41,670 --> 00:15:44,069
operations person only really cares

346
00:15:44,069 --> 00:15:45,720
about the container I don't have to

347
00:15:45,720 --> 00:15:47,009
worry about really what's in there I

348
00:15:47,009 --> 00:15:48,720
just have to know that it'll be a file

349
00:15:48,720 --> 00:15:50,489
system and then a Linux process will

350
00:15:50,489 --> 00:15:52,559
come out and then me is somebody who's

351
00:15:52,559 --> 00:15:54,569
building a CI system I don't really have

352
00:15:54,569 --> 00:15:57,059
to think about as a Java or Python or

353
00:15:57,059 --> 00:15:59,129
whatever everything is kind of sealed

354
00:15:59,129 --> 00:16:00,959
together and then me as a software

355
00:16:00,959 --> 00:16:02,309
engineer I don't have to really think

356
00:16:02,309 --> 00:16:04,439
about the underlying kernel or what

357
00:16:04,439 --> 00:16:06,209
software is going to be available on the

358
00:16:06,209 --> 00:16:07,769
server when it gets there so I'm

359
00:16:07,769 --> 00:16:09,480
stealing my software in together with

360
00:16:09,480 --> 00:16:13,949
everything eight needs all right so we

361
00:16:13,949 --> 00:16:15,899
have this unit that can be shipped

362
00:16:15,899 --> 00:16:18,839
around and so what naturally it leads to

363
00:16:18,839 --> 00:16:23,489
is this concept of clustering and I like

364
00:16:23,489 --> 00:16:26,269
to think of clustering as botnets so

365
00:16:26,269 --> 00:16:28,740
we've had this idea of clustering

366
00:16:28,740 --> 00:16:31,350
servers together for a long time but

367
00:16:31,350 --> 00:16:34,019
it's usually been in in the context at

368
00:16:34,019 --> 00:16:35,699
least in the media and for a lot of us

369
00:16:35,699 --> 00:16:38,399
in the context of somebody maliciously

370
00:16:38,399 --> 00:16:40,019
taking you over thousands of machines

371
00:16:40,019 --> 00:16:42,179
and then they have an IRC network or

372
00:16:42,179 --> 00:16:43,999
something that they control them from

373
00:16:43,999 --> 00:16:46,740
we're we're creating essentially through

374
00:16:46,740 --> 00:16:48,920
clustering and all these technologies

375
00:16:48,920 --> 00:16:52,949
the I don't know what the right term is

376
00:16:52,949 --> 00:16:54,269
but we're creating like the polite

377
00:16:54,269 --> 00:16:57,449
botnet so if you're going to manage

378
00:16:57,449 --> 00:17:01,019
hundreds of servers per person as these

379
00:17:01,019 --> 00:17:05,189
internet giants do what do you do you

380
00:17:05,189 --> 00:17:06,779
have way too many servers for manual

381
00:17:06,779 --> 00:17:08,849
placement so are you gonna remember that

382
00:17:08,849 --> 00:17:10,799
oh yeah yesterday I deployed two server

383
00:17:10,799 --> 00:17:14,449
90 today I deployed the 80

384
00:17:14,449 --> 00:17:16,709
shoot what did I deploy a few weeks ago

385
00:17:16,709 --> 00:17:19,980
on server 7 and so it's just kind of an

386
00:17:19,980 --> 00:17:21,630
intractable problem like we're joking

387
00:17:21,630 --> 00:17:23,250
ourselves if you think that the human

388
00:17:23,250 --> 00:17:26,609
can do this maybe you'll get cute and

389
00:17:26,609 --> 00:17:27,750
you'll be like oh I'll just write a

390
00:17:27,750 --> 00:17:29,580
while loop and I'll track it in a file

391
00:17:29,580 --> 00:17:31,350
and I'll check it in to get

392
00:17:31,350 --> 00:17:34,600
but then when you start to think about

393
00:17:34,600 --> 00:17:37,540
statistics and realize that computers

394
00:17:37,540 --> 00:17:40,510
actually fail pretty regularly and

395
00:17:40,510 --> 00:17:44,170
whether for hardware reasons or you hire

396
00:17:44,170 --> 00:17:45,940
the new intern and he tripped over the

397
00:17:45,940 --> 00:17:48,730
cable whatever the reason is inevitably

398
00:17:48,730 --> 00:17:50,590
you're going to have machines that go

399
00:17:50,590 --> 00:17:53,170
away and now you have to remember

400
00:17:53,170 --> 00:17:55,450
actually something was running on that

401
00:17:55,450 --> 00:18:00,450
server what was it running etc and so

402
00:18:00,450 --> 00:18:02,740
the problems here is that there's really

403
00:18:02,740 --> 00:18:04,750
no monitoring if you're just placing

404
00:18:04,750 --> 00:18:06,820
things randomly and there's no state to

405
00:18:06,820 --> 00:18:10,750
recover when something goes sideways so

406
00:18:10,750 --> 00:18:13,780
a common pattern and what we're gonna do

407
00:18:13,780 --> 00:18:15,040
is we're gonna create our kind of

408
00:18:15,040 --> 00:18:17,140
control network so we're going to take a

409
00:18:17,140 --> 00:18:19,840
couple of machines from our hundreds

410
00:18:19,840 --> 00:18:21,429
that we're having to maintain and we're

411
00:18:21,429 --> 00:18:24,580
going to set those aside and what we'll

412
00:18:24,580 --> 00:18:26,920
do is we'll run an API on here and we'll

413
00:18:26,920 --> 00:18:28,870
run a couple of little databases on here

414
00:18:28,870 --> 00:18:33,040
and we'll use this API in this database

415
00:18:33,040 --> 00:18:36,490
to be able to control the other machines

416
00:18:36,490 --> 00:18:40,270
in the cluster and so with this we're

417
00:18:40,270 --> 00:18:42,550
able to have a centralized place to

418
00:18:42,550 --> 00:18:44,920
start to monitor the system we're able

419
00:18:44,920 --> 00:18:47,740
to entrust the state of the system to a

420
00:18:47,740 --> 00:18:51,010
number of computers and computers are

421
00:18:51,010 --> 00:18:53,410
really really good at horribly boring

422
00:18:53,410 --> 00:18:56,440
work like looking and seeing if

423
00:18:56,440 --> 00:18:57,429
somebody's doing what they're supposed

424
00:18:57,429 --> 00:18:58,809
to be doing if they're not supposed to

425
00:18:58,809 --> 00:18:59,950
be if they're doing something they're

426
00:18:59,950 --> 00:19:02,080
not supposed to be doing reconciling

427
00:19:02,080 --> 00:19:04,240
that and sort of sitting there and just

428
00:19:04,240 --> 00:19:06,070
saying are you doing realist we're doing

429
00:19:06,070 --> 00:19:09,760
every five seconds so what we actually

430
00:19:09,760 --> 00:19:12,640
end up with is these sets of servers

431
00:19:12,640 --> 00:19:14,679
telling these other servers what to be

432
00:19:14,679 --> 00:19:17,620
doing and then these sets of servers are

433
00:19:17,620 --> 00:19:19,179
actively sitting there checking them

434
00:19:19,179 --> 00:19:21,309
every few seconds seeing if they're

435
00:19:21,309 --> 00:19:22,330
actually doing what they should be doing

436
00:19:22,330 --> 00:19:25,900
and maybe the intern trips over another

437
00:19:25,900 --> 00:19:27,580
server you really need to fire the

438
00:19:27,580 --> 00:19:32,920
intern the the the software will notice

439
00:19:32,920 --> 00:19:35,410
hey that instance the application isn't

440
00:19:35,410 --> 00:19:37,120
running I'll schedule it to a new

441
00:19:37,120 --> 00:19:41,440
machine alright so it's a pretty simple

442
00:19:41,440 --> 00:19:44,380
concept reserve a couple of machines to

443
00:19:44,380 --> 00:19:44,710
control

444
00:19:44,710 --> 00:19:47,919
the rest of the machines so what's

445
00:19:47,919 --> 00:19:50,140
actually running on these machines so

446
00:19:50,140 --> 00:19:53,520
this is where we get to kubernetes and

447
00:19:53,520 --> 00:19:56,559
kubernetes is a open-source project

448
00:19:56,559 --> 00:19:58,299
actually see a couple of kubernetes

449
00:19:58,299 --> 00:20:00,330
speakers in the audience which is great

450
00:20:00,330 --> 00:20:03,429
it's an open-source project that was

451
00:20:03,429 --> 00:20:05,919
introduced by Google has now been moved

452
00:20:05,919 --> 00:20:07,659
to the cloud native computing foundation

453
00:20:07,659 --> 00:20:10,000
which is one of our sponsors I'm really

454
00:20:10,000 --> 00:20:11,559
hitting the sponsors I can't wait to get

455
00:20:11,559 --> 00:20:16,059
my kick back and it's been donated to

456
00:20:16,059 --> 00:20:18,490
the CN CF and it's a project that is

457
00:20:18,490 --> 00:20:21,659
about 18 months old since its wand ATO

458
00:20:21,659 --> 00:20:26,440
and what it does is it is an API and a

459
00:20:26,440 --> 00:20:29,799
set of services to create this this

460
00:20:29,799 --> 00:20:33,159
control cluster and what it looks like

461
00:20:33,159 --> 00:20:36,789
when you dive into it you can think of

462
00:20:36,789 --> 00:20:38,440
it just as this high-level abstract

463
00:20:38,440 --> 00:20:40,029
pretty logo and not think about the

464
00:20:40,029 --> 00:20:41,860
details but when we get into the details

465
00:20:41,860 --> 00:20:44,289
really what it is is it's a couple of

466
00:20:44,289 --> 00:20:47,080
components it's a primary data store and

467
00:20:47,080 --> 00:20:49,510
this data store is special and that it's

468
00:20:49,510 --> 00:20:52,750
replicated again because no server is

469
00:20:52,750 --> 00:20:56,679
safe from the intern you you have those

470
00:20:56,679 --> 00:20:58,390
three special servers that are running

471
00:20:58,390 --> 00:21:00,460
kubernetes but what if the intern trips

472
00:21:00,460 --> 00:21:02,590
over one of those you make sure that the

473
00:21:02,590 --> 00:21:05,350
data is backed up so it's a replicated

474
00:21:05,350 --> 00:21:07,480
database and then you have an API server

475
00:21:07,480 --> 00:21:09,299
which is what everyone interacts with

476
00:21:09,299 --> 00:21:11,200
that's where the command line tools

477
00:21:11,200 --> 00:21:13,299
interact with it's what the server's

478
00:21:13,299 --> 00:21:16,929
actually check in and the monitoring

479
00:21:16,929 --> 00:21:20,529
happens there etc so pretty simple you

480
00:21:20,529 --> 00:21:22,330
know if I was to draw this diagram it

481
00:21:22,330 --> 00:21:23,679
like identical to something like

482
00:21:23,679 --> 00:21:26,320
WordPress you have a database you have

483
00:21:26,320 --> 00:21:28,720
an API server and in this case we have a

484
00:21:28,720 --> 00:21:30,850
database and then API server pretty

485
00:21:30,850 --> 00:21:32,620
approachable architecture nothing really

486
00:21:32,620 --> 00:21:37,720
fancy all right so as discussed one of

487
00:21:37,720 --> 00:21:39,610
the things that we need to do when

488
00:21:39,610 --> 00:21:41,169
building these systems is we have to

489
00:21:41,169 --> 00:21:45,159
face failure failure becomes more and

490
00:21:45,159 --> 00:21:46,840
more common as you start to maintain

491
00:21:46,840 --> 00:21:50,919
more and more servers and with 3.5

492
00:21:50,919 --> 00:21:53,919
billion users and only a handful of

493
00:21:53,919 --> 00:21:56,440
people in the software and IT industry

494
00:21:56,440 --> 00:21:58,300
you better be

495
00:21:58,300 --> 00:22:00,760
really effective at facing failure it's

496
00:22:00,760 --> 00:22:02,560
not going to be great for you if you

497
00:22:02,560 --> 00:22:04,030
have to care every time a server goes

498
00:22:04,030 --> 00:22:05,680
down and it's not going to be great for

499
00:22:05,680 --> 00:22:06,160
the user

500
00:22:06,160 --> 00:22:09,250
think about 3.5 billion users and then

501
00:22:09,250 --> 00:22:13,090
100 million servers that's a lot of

502
00:22:13,090 --> 00:22:15,010
users per server you're gonna make a lot

503
00:22:15,010 --> 00:22:17,080
of people unhappy if one of those

504
00:22:17,080 --> 00:22:19,360
servers goes down for 24 hours and

505
00:22:19,360 --> 00:22:21,370
you're sitting there trying to

506
00:22:21,370 --> 00:22:24,070
desperately get the hard drive back or

507
00:22:24,070 --> 00:22:26,170
switch out the power supply

508
00:22:26,170 --> 00:22:28,270
you've taken thousands and thousands of

509
00:22:28,270 --> 00:22:30,520
people offline from accessing their data

510
00:22:30,520 --> 00:22:36,490
and services so what were what we built

511
00:22:36,490 --> 00:22:40,150
is this thing called @ çd FTD is this

512
00:22:40,150 --> 00:22:42,070
special database that kubernetes uses

513
00:22:42,070 --> 00:22:45,340
and so it was introduced by core OS

514
00:22:45,340 --> 00:22:48,130
which is the company that I founded and

515
00:22:48,130 --> 00:22:51,340
work for in 2013 it's the primary data

516
00:22:51,340 --> 00:22:53,400
store and it does this interesting thing

517
00:22:53,400 --> 00:22:56,410
where without human intervention

518
00:22:56,410 --> 00:22:58,180
it essentially runs the little

519
00:22:58,180 --> 00:23:00,220
democratic system an algorithm called

520
00:23:00,220 --> 00:23:04,380
raft where if the machines go down

521
00:23:04,380 --> 00:23:06,730
somebody reacts themselves as the leader

522
00:23:06,730 --> 00:23:08,650
of the cluster and work can continue

523
00:23:08,650 --> 00:23:11,320
with no human involved and this is for

524
00:23:11,320 --> 00:23:15,880
you we've put in thousands and thousands

525
00:23:15,880 --> 00:23:18,070
and thousands of engineering hours to do

526
00:23:18,070 --> 00:23:19,780
this little fancy trick where computers

527
00:23:19,780 --> 00:23:21,940
run their own voting system and elect

528
00:23:21,940 --> 00:23:25,210
new leaders for one simple reason

529
00:23:25,210 --> 00:23:27,670
getting woken up at night sucks is

530
00:23:27,670 --> 00:23:30,610
really the worst if you're on call you

531
00:23:30,610 --> 00:23:32,380
don't want just because one server to go

532
00:23:32,380 --> 00:23:35,080
goes down to be woken up and have to

533
00:23:35,080 --> 00:23:37,480
take care of logging into the machine

534
00:23:37,480 --> 00:23:38,890
and deciding which one's the leader

535
00:23:38,890 --> 00:23:39,570
today

536
00:23:39,570 --> 00:23:42,790
so what we're gonna do here and as an

537
00:23:42,790 --> 00:23:48,360
introduction to @cd come on internet is

538
00:23:48,360 --> 00:23:50,800
there's a service that we run called

539
00:23:50,800 --> 00:23:53,710
played at CDI oh this is like an MMORPG

540
00:23:53,710 --> 00:23:58,300
for computer failures so what inevitably

541
00:23:58,300 --> 00:24:00,340
happens here is that a few people will

542
00:24:00,340 --> 00:24:02,350
pull up this site if not I'll run it

543
00:24:02,350 --> 00:24:06,340
myself but this is a TD cluster so we

544
00:24:06,340 --> 00:24:09,000
have five machines in this cluster and

545
00:24:09,000 --> 00:24:11,810
we're able to arbitrarily at any

546
00:24:11,810 --> 00:24:15,590
tell them one of them to stop so right

547
00:24:15,590 --> 00:24:18,950
now the little circle in green there is

548
00:24:18,950 --> 00:24:21,320
the leader and so I'm gonna test this

549
00:24:21,320 --> 00:24:23,120
idea that the servers are running their

550
00:24:23,120 --> 00:24:25,340
own democratic system and will elect new

551
00:24:25,340 --> 00:24:29,510
leaders by clicking stop and hopefully

552
00:24:29,510 --> 00:24:33,110
within a few seconds because computers

553
00:24:33,110 --> 00:24:34,700
are much faster at voting than human

554
00:24:34,700 --> 00:24:37,270
beings are the votes are counted and a

555
00:24:37,270 --> 00:24:39,800
new leader has been elected and what

556
00:24:39,800 --> 00:24:42,590
this means is that I'm able to write

557
00:24:42,590 --> 00:24:45,440
data into the database and what you'll

558
00:24:45,440 --> 00:24:47,090
notice is that all the little hashes

559
00:24:47,090 --> 00:24:50,690
here ha until somebody takes too many

560
00:24:50,690 --> 00:24:54,620
offline so as as a community I would ask

561
00:24:54,620 --> 00:24:56,270
that somebody turn on at least one more

562
00:24:56,270 --> 00:24:59,510
server the democracy kind of breaks down

563
00:24:59,510 --> 00:25:01,970
once you have less than 50% of people

564
00:25:01,970 --> 00:25:05,030
voting all right thank you

565
00:25:05,030 --> 00:25:14,090
so I'll restart that one just give me a

566
00:25:14,090 --> 00:25:17,180
second all right so what will happen is

567
00:25:17,180 --> 00:25:18,800
that I'm able to actually put data into

568
00:25:18,800 --> 00:25:20,450
the database and you'll notice that the

569
00:25:20,450 --> 00:25:24,260
hash will actually update hopefully rate

570
00:25:24,260 --> 00:25:29,390
limit exceeded I love you guys so what

571
00:25:29,390 --> 00:25:30,530
will happen is that you're able to write

572
00:25:30,530 --> 00:25:33,050
into the database once the rate limits

573
00:25:33,050 --> 00:25:35,420
not like C did I have to back off for 3

574
00:25:35,420 --> 00:25:37,580
seconds what will happen is that it'll

575
00:25:37,580 --> 00:25:38,840
write into the database

576
00:25:38,840 --> 00:25:43,130
it'll get replicated around and then the

577
00:25:43,130 --> 00:25:45,350
the database will ensure that that data

578
00:25:45,350 --> 00:25:48,080
is available for reads later all right

579
00:25:48,080 --> 00:25:49,100
you guys are having a lot of fun with

580
00:25:49,100 --> 00:25:50,630
this I'll let you got it you get the

581
00:25:50,630 --> 00:25:51,320
basic idea

582
00:25:51,320 --> 00:25:53,960
computers are able to elect and take

583
00:25:53,960 --> 00:25:56,930
care of the database on their own ok so

584
00:25:56,930 --> 00:25:59,960
what should happen is that if you have

585
00:25:59,960 --> 00:26:02,420
the database saying up is that you're

586
00:26:02,420 --> 00:26:05,660
able to restart individual machines

587
00:26:05,660 --> 00:26:07,720
you're able to write into the database

588
00:26:07,720 --> 00:26:12,880
and then you'll see the value stored

589
00:26:12,880 --> 00:26:16,010
okay and then one final thing I'd like

590
00:26:16,010 --> 00:26:17,810
to mention about Ed CD before we move on

591
00:26:17,810 --> 00:26:22,490
is that this happened so I hadn't really

592
00:26:22,490 --> 00:26:24,200
been aware of FOSDEM until a couple of

593
00:26:24,200 --> 00:26:25,400
years ago

594
00:26:25,400 --> 00:26:30,460
we design the logo for @cd in 2013

595
00:26:30,460 --> 00:26:40,100
awkward it's okay I think I think

596
00:26:40,100 --> 00:26:41,600
they're just really good friends or

597
00:26:41,600 --> 00:26:43,720
maybe relatives cousins or something

598
00:26:43,720 --> 00:26:45,170
it's fine

599
00:26:45,170 --> 00:26:50,240
so that's the data sort of kubernetes is

600
00:26:50,240 --> 00:26:52,610
that CD and then I wanted to talk

601
00:26:52,610 --> 00:26:54,320
through more about what kubernetes

602
00:26:54,320 --> 00:26:55,730
actually does and why it's an

603
00:26:55,730 --> 00:26:58,040
interesting project and why we've seen

604
00:26:58,040 --> 00:27:00,470
such rapid adoption of it in such a

605
00:27:00,470 --> 00:27:02,750
short period of time and really what

606
00:27:02,750 --> 00:27:05,240
what what kubernetes is doing is it's

607
00:27:05,240 --> 00:27:07,270
creating really really consistent

608
00:27:07,270 --> 00:27:12,230
infrastructure api's everywhere so this

609
00:27:12,230 --> 00:27:14,000
is kind of what kubernetes looks like in

610
00:27:14,000 --> 00:27:17,090
the abstract you have maybe you're

611
00:27:17,090 --> 00:27:19,580
running on some on Amazon so you have

612
00:27:19,580 --> 00:27:22,400
the Amazon API so you talk to the Amazon

613
00:27:22,400 --> 00:27:24,950
API as you create some virtual machine

614
00:27:24,950 --> 00:27:26,929
instances and then on top of that you

615
00:27:26,929 --> 00:27:29,570
put kubernetes and kubernetes behaves

616
00:27:29,570 --> 00:27:31,760
like kubernetes and kind of abstract

617
00:27:31,760 --> 00:27:34,160
away the underlying infrastructure and

618
00:27:34,160 --> 00:27:36,559
kubernetes works well on Microsoft Azure

619
00:27:36,559 --> 00:27:40,870
or maybe on top of the Google API is

620
00:27:40,870 --> 00:27:44,120
works on top of the digital ocean api's

621
00:27:44,120 --> 00:27:47,510
and so essentially on top of any sort of

622
00:27:47,510 --> 00:27:50,380
cloud infrastructure it works fine

623
00:27:50,380 --> 00:27:54,860
OpenStack api's and then also its able

624
00:27:54,860 --> 00:27:57,679
to run perfectly fine on top of bare

625
00:27:57,679 --> 00:28:00,380
metal machines as well so what you have

626
00:28:00,380 --> 00:28:02,900
is this way of shipping and talking

627
00:28:02,900 --> 00:28:04,940
about infrastructure that's really

628
00:28:04,940 --> 00:28:07,340
really consistent and can be ran pretty

629
00:28:07,340 --> 00:28:11,059
much anywhere and this has a few

630
00:28:11,059 --> 00:28:14,260
advantages that we've really never seen

631
00:28:14,260 --> 00:28:18,140
so one of the problems that we've had as

632
00:28:18,140 --> 00:28:21,110
kind of an open-source community for a

633
00:28:21,110 --> 00:28:23,600
long time as fragmentation can I get a

634
00:28:23,600 --> 00:28:29,030
BIM can I get an e max and fragmentation

635
00:28:29,030 --> 00:28:32,030
is hit us hard in the cloud environments

636
00:28:32,030 --> 00:28:35,000
as well you really when you choose a

637
00:28:35,000 --> 00:28:36,700
particular cloud

638
00:28:36,700 --> 00:28:38,760
you have to program against their api's

639
00:28:38,760 --> 00:28:42,160
open sack made a valiant effort to you

640
00:28:42,160 --> 00:28:44,920
know create a single standard API didn't

641
00:28:44,920 --> 00:28:46,540
work out so well it's okay

642
00:28:46,540 --> 00:28:48,700
but kubernetes kind of moves up the

643
00:28:48,700 --> 00:28:51,100
stack and we're creating a single API to

644
00:28:51,100 --> 00:28:53,220
talk to any sort of infrastructure and

645
00:28:53,220 --> 00:28:56,410
so what kubernetes is creating

646
00:28:56,410 --> 00:28:58,390
consistency for was creating an API for

647
00:28:58,390 --> 00:29:00,400
this is essentially all major components

648
00:29:00,400 --> 00:29:02,440
of what we think of as computing at

649
00:29:02,440 --> 00:29:04,870
least back-end server computing so

650
00:29:04,870 --> 00:29:06,640
compute it's able to run on all these

651
00:29:06,640 --> 00:29:08,220
different compute environments

652
00:29:08,220 --> 00:29:11,530
networking it is able to be flexible and

653
00:29:11,530 --> 00:29:12,820
work inside of any networking

654
00:29:12,820 --> 00:29:16,120
environment whether it's you know top of

655
00:29:16,120 --> 00:29:18,160
rack switches that are smart or vx LAN

656
00:29:18,160 --> 00:29:21,550
or etc it can talk to different storage

657
00:29:21,550 --> 00:29:25,120
systems so you can mount disks whether

658
00:29:25,120 --> 00:29:27,580
they're from Amazon's EBS or in a best

659
00:29:27,580 --> 00:29:32,020
mount or cluster FS and then it can do

660
00:29:32,020 --> 00:29:34,840
load balancing you know the piece of

661
00:29:34,840 --> 00:29:36,580
software that's actually routing the

662
00:29:36,580 --> 00:29:39,670
requests down to your application down

663
00:29:39,670 --> 00:29:42,940
to your container and so across all of

664
00:29:42,940 --> 00:29:45,280
these sort of foundational pieces of

665
00:29:45,280 --> 00:29:47,550
what is back-end in an infrastructure

666
00:29:47,550 --> 00:29:50,380
kubernetes has created a consistent API

667
00:29:50,380 --> 00:29:52,660
where I don't necessarily know what I'm

668
00:29:52,660 --> 00:29:54,130
talking to the kubernetes api whether

669
00:29:54,130 --> 00:29:56,410
that api is being served on AWS or

670
00:29:56,410 --> 00:29:59,170
OpenStack or bare metal pretty useful

671
00:29:59,170 --> 00:30:04,150
pretty useful property and so one of the

672
00:30:04,150 --> 00:30:06,100
things that's interesting with this is

673
00:30:06,100 --> 00:30:08,590
this idea of Federation which the

674
00:30:08,590 --> 00:30:11,620
kubernetes community has been marching

675
00:30:11,620 --> 00:30:14,620
towards so if you imagine that this API

676
00:30:14,620 --> 00:30:18,010
can run against any compute and that all

677
00:30:18,010 --> 00:30:20,770
of us are having to maintain lots and

678
00:30:20,770 --> 00:30:22,870
lots of servers so you have a single

679
00:30:22,870 --> 00:30:26,190
kubernetes cluster here and the boss or

680
00:30:26,190 --> 00:30:28,660
your company decides you know what

681
00:30:28,660 --> 00:30:30,310
you've been so effective at managing

682
00:30:30,310 --> 00:30:34,000
hundreds of servers with kubernetes we

683
00:30:34,000 --> 00:30:35,830
actually are just gonna double our

684
00:30:35,830 --> 00:30:38,110
capacity so if you just manage you know

685
00:30:38,110 --> 00:30:39,910
a couple under more that'd be great for

686
00:30:39,910 --> 00:30:42,220
the company if you could handle that and

687
00:30:42,220 --> 00:30:44,680
then a few months later this is going

688
00:30:44,680 --> 00:30:47,710
well and so just a few hundred more in

689
00:30:47,710 --> 00:30:51,550
another data center and so this is

690
00:30:51,550 --> 00:30:53,260
actually possible and something that's

691
00:30:53,260 --> 00:30:55,120
been worked on inside of kubernetes it's

692
00:30:55,120 --> 00:30:56,920
called Federation and it's this

693
00:30:56,920 --> 00:30:59,470
interesting concept that we take the

694
00:30:59,470 --> 00:31:01,630
exact same thing that kubernetes is

695
00:31:01,630 --> 00:31:04,540
doing today with individual machines and

696
00:31:04,540 --> 00:31:07,170
then we click it up to the idea that we

697
00:31:07,170 --> 00:31:09,310
run that exact same infrastructure

698
00:31:09,310 --> 00:31:14,380
against against entire clusters so

699
00:31:14,380 --> 00:31:16,180
you'll notice the architecture is very

700
00:31:16,180 --> 00:31:16,780
similar

701
00:31:16,780 --> 00:31:20,470
we have kubernetes running by itself

702
00:31:20,470 --> 00:31:22,750
inside of a san francisco data center in

703
00:31:22,750 --> 00:31:24,250
new york data center in a berlin data

704
00:31:24,250 --> 00:31:27,610
center and then at the top we're running

705
00:31:27,610 --> 00:31:31,180
kubernetes again with SED datastore only

706
00:31:31,180 --> 00:31:33,550
it's that that API is spread out over

707
00:31:33,550 --> 00:31:35,920
all three data centers and controlling

708
00:31:35,920 --> 00:31:37,630
the individual data centers so it's

709
00:31:37,630 --> 00:31:39,690
thinking about a data center instead of

710
00:31:39,690 --> 00:31:42,400
individual hosts so a pretty interesting

711
00:31:42,400 --> 00:31:45,250
concept and something that eventually

712
00:31:45,250 --> 00:31:47,830
allows for this thing where you could

713
00:31:47,830 --> 00:31:49,960
actually be running applications a

714
00:31:49,960 --> 00:31:52,300
single application across multiple

715
00:31:52,300 --> 00:31:54,790
different cloud providers or physical

716
00:31:54,790 --> 00:31:59,410
networks this is all work in progress

717
00:31:59,410 --> 00:32:02,950
about 40% of the kubernetes api today is

718
00:32:02,950 --> 00:32:05,800
able to do this thing where you have

719
00:32:05,800 --> 00:32:07,540
federated api that then talks to

720
00:32:07,540 --> 00:32:09,250
clusters the clusters and talk to

721
00:32:09,250 --> 00:32:13,690
individual machines okay so

722
00:32:13,690 --> 00:32:17,530
kubernetes has this API and what is this

723
00:32:17,530 --> 00:32:19,600
API actually do well it does a number of

724
00:32:19,600 --> 00:32:21,160
things you can tell it to run a

725
00:32:21,160 --> 00:32:23,350
container and it'll go off and run that

726
00:32:23,350 --> 00:32:25,480
container for you but a really important

727
00:32:25,480 --> 00:32:27,840
thing that it does is it allows you to

728
00:32:27,840 --> 00:32:30,160
connect pieces of the infrastructure

729
00:32:30,160 --> 00:32:34,780
together using a concept of labels so in

730
00:32:34,780 --> 00:32:36,400
a lot of infrastructure we think of

731
00:32:36,400 --> 00:32:38,500
hierarchies we think of the front end

732
00:32:38,500 --> 00:32:40,360
and the back end we think of the load

733
00:32:40,360 --> 00:32:42,580
balancer and then then then the scale

734
00:32:42,580 --> 00:32:45,400
out tear but kubernetes has a little bit

735
00:32:45,400 --> 00:32:47,530
of a different opinion on how service

736
00:32:47,530 --> 00:32:49,570
discovery and the overall system works

737
00:32:49,570 --> 00:32:52,150
so you may have different objects these

738
00:32:52,150 --> 00:32:55,000
objects are here in these gray boxes on

739
00:32:55,000 --> 00:32:56,800
these might be individual containers

740
00:32:56,800 --> 00:32:59,080
they might be services that represent

741
00:32:59,080 --> 00:33:00,100
load balance

742
00:33:00,100 --> 00:33:03,280
etc I mean what kubernetes does is it

743
00:33:03,280 --> 00:33:06,220
allows you to label and group these

744
00:33:06,220 --> 00:33:07,809
things in arbitrary different ways which

745
00:33:07,809 --> 00:33:10,660
we'll see in a second so perhaps you're

746
00:33:10,660 --> 00:33:14,140
interested in separating out the parts

747
00:33:14,140 --> 00:33:16,540
of the infrastructure as their component

748
00:33:16,540 --> 00:33:19,900
parts front end versus back end or

749
00:33:19,900 --> 00:33:21,520
perhaps you're interested in figuring

750
00:33:21,520 --> 00:33:24,550
out who deployed the infrastructure so

751
00:33:24,550 --> 00:33:26,890
was it my colleague reethu did she

752
00:33:26,890 --> 00:33:29,500
deploy these containers or was it me who

753
00:33:29,500 --> 00:33:32,860
deployed the containers or maybe in a

754
00:33:32,860 --> 00:33:34,480
different way you would like to look at

755
00:33:34,480 --> 00:33:36,340
the infrastructure as a separation

756
00:33:36,340 --> 00:33:38,740
between the production side and the dev

757
00:33:38,740 --> 00:33:41,679
side and so kubernetes has this really

758
00:33:41,679 --> 00:33:43,630
flexible system where there's actually a

759
00:33:43,630 --> 00:33:45,330
lot of different perspectives on how

760
00:33:45,330 --> 00:33:48,000
infrastructure is organized

761
00:33:48,000 --> 00:33:49,660
sometimes we'll think of it in

762
00:33:49,660 --> 00:33:51,910
hierarchical terms but it is really

763
00:33:51,910 --> 00:33:53,679
really convenient to have this idea of

764
00:33:53,679 --> 00:33:58,809
different groupings in a query and so

765
00:33:58,809 --> 00:34:01,510
this grouping in this query system is

766
00:34:01,510 --> 00:34:02,980
really at the core of what kubernetes

767
00:34:02,980 --> 00:34:05,260
does and it's throughout the entire way

768
00:34:05,260 --> 00:34:08,800
that the API works and so one really

769
00:34:08,800 --> 00:34:10,149
interesting thing is we end up with

770
00:34:10,149 --> 00:34:12,340
these really decoupled systems where we

771
00:34:12,340 --> 00:34:17,469
can start to think of the system as a

772
00:34:17,469 --> 00:34:20,350
set of control loops acting on top of

773
00:34:20,350 --> 00:34:24,699
these queries looking for what the users

774
00:34:24,699 --> 00:34:26,770
asks us to do and then making a query

775
00:34:26,770 --> 00:34:27,850
and finding out what's actually

776
00:34:27,850 --> 00:34:29,859
happening in the cluster so this is a

777
00:34:29,859 --> 00:34:32,260
really practical example so you're

778
00:34:32,260 --> 00:34:35,050
running an application we'll look at

779
00:34:35,050 --> 00:34:36,520
this in a second you're running an

780
00:34:36,520 --> 00:34:38,619
application you say that the application

781
00:34:38,619 --> 00:34:40,629
is going to be labeled in this way it's

782
00:34:40,629 --> 00:34:42,730
going to be called a people app equals

783
00:34:42,730 --> 00:34:44,469
web and it's going to be environment

784
00:34:44,469 --> 00:34:47,619
equals prod and then the system is

785
00:34:47,619 --> 00:34:49,270
constantly looking like a thermostat

786
00:34:49,270 --> 00:34:51,940
looks at the temperature and talks to

787
00:34:51,940 --> 00:34:54,010
your thermos or your talk to your

788
00:34:54,010 --> 00:34:56,080
furnace what is going to be doing is

789
00:34:56,080 --> 00:34:58,090
this constantly looking saying well are

790
00:34:58,090 --> 00:35:02,230
are the is the state of the system in

791
00:35:02,230 --> 00:35:05,350
this case the state of the system is one

792
00:35:05,350 --> 00:35:07,390
running container is the state of the

793
00:35:07,390 --> 00:35:09,340
system matching the desired state of the

794
00:35:09,340 --> 00:35:12,310
system the user has asked for and it's

795
00:35:12,310 --> 00:35:13,630
constantly checking the state

796
00:35:13,630 --> 00:35:17,589
as using these labels to do that and if

797
00:35:17,589 --> 00:35:19,990
it finds that it's actually not matching

798
00:35:19,990 --> 00:35:22,240
the state what it'll do is it'll ask the

799
00:35:22,240 --> 00:35:24,369
system to schedule new instances of the

800
00:35:24,369 --> 00:35:29,559
containers pretty powerful concept we're

801
00:35:29,559 --> 00:35:31,660
able to kind of be couple these concepts

802
00:35:31,660 --> 00:35:33,250
of what's running versus what would I

803
00:35:33,250 --> 00:35:37,750
like to have running so this is a

804
00:35:37,750 --> 00:35:40,839
demonstration of that happening so it

805
00:35:40,839 --> 00:35:42,490
happens really fast because kubernetes

806
00:35:42,490 --> 00:35:45,250
is very very responsive so what I'll be

807
00:35:45,250 --> 00:35:47,769
doing is I go into the console this is a

808
00:35:47,769 --> 00:35:50,799
console for kubernetes I say I want to

809
00:35:50,799 --> 00:35:51,880
have two copies of this application

810
00:35:51,880 --> 00:35:54,910
running and boom within about one second

811
00:35:54,910 --> 00:35:57,099
I have two copies running and I can

812
00:35:57,099 --> 00:35:58,900
drill in and start to look at metrics of

813
00:35:58,900 --> 00:36:00,789
that cup that running copy of the

814
00:36:00,789 --> 00:36:03,549
application and this happens because

815
00:36:03,549 --> 00:36:05,380
I've essentially set the thermostatic to

816
00:36:05,380 --> 00:36:09,670
and the system responds now that works

817
00:36:09,670 --> 00:36:11,619
fine for really simple applications the

818
00:36:11,619 --> 00:36:15,039
scale-out web applications it gets more

819
00:36:15,039 --> 00:36:16,269
interesting when you have to think about

820
00:36:16,269 --> 00:36:18,460
databases or running other sorts of

821
00:36:18,460 --> 00:36:21,519
applications on top of kubernetes so

822
00:36:21,519 --> 00:36:23,440
what you'd love to be able to do is say

823
00:36:23,440 --> 00:36:27,279
run my database on top of kubernetes and

824
00:36:27,279 --> 00:36:30,329
make it really really simple but

825
00:36:30,329 --> 00:36:32,740
databases are harder because they store

826
00:36:32,740 --> 00:36:35,819
state they need to replicate state etc

827
00:36:35,819 --> 00:36:39,069
and so you have to worry about resizes

828
00:36:39,069 --> 00:36:44,259
upgrades reconfigurations backup healing

829
00:36:44,259 --> 00:36:46,690
what happens when instances fail and

830
00:36:46,690 --> 00:36:48,640
these are concerns that you really don't

831
00:36:48,640 --> 00:36:50,349
have in a horizontally scaled

832
00:36:50,349 --> 00:36:53,559
application if your web back in fails

833
00:36:53,559 --> 00:36:58,480
just start up a new one and so earlier

834
00:36:58,480 --> 00:37:00,250
or late last year we introduced this

835
00:37:00,250 --> 00:37:02,470
idea of kubernetes operators and what

836
00:37:02,470 --> 00:37:04,539
they enabled you to do is start to

837
00:37:04,539 --> 00:37:06,970
specify really complex applications that

838
00:37:06,970 --> 00:37:10,569
require active specific management at a

839
00:37:10,569 --> 00:37:12,549
high level so what you'd like to be able

840
00:37:12,549 --> 00:37:14,980
to do is say I want to have a Postgres

841
00:37:14,980 --> 00:37:16,660
database I want it to be in a cluster of

842
00:37:16,660 --> 00:37:18,670
three maybe I want a couple of read

843
00:37:18,670 --> 00:37:23,100
replicas and one write replicas

844
00:37:23,100 --> 00:37:25,620
and so what these pieces of software

845
00:37:25,620 --> 00:37:27,360
that we call operators are doing are

846
00:37:27,360 --> 00:37:28,590
they're representing the human knowledge

847
00:37:28,590 --> 00:37:30,210
of how to scale and back out these

848
00:37:30,210 --> 00:37:34,710
systems in software and so we've done

849
00:37:34,710 --> 00:37:36,480
this initially for the database that

850
00:37:36,480 --> 00:37:39,540
backs kubernetes call that CD where you

851
00:37:39,540 --> 00:37:41,400
can actually just ask the cluster give

852
00:37:41,400 --> 00:37:43,920
me a net CD cluster you ask kubernetes

853
00:37:43,920 --> 00:37:46,080
give me an app at CD cluster of three

854
00:37:46,080 --> 00:37:48,500
and it'll handle all the backup and

855
00:37:48,500 --> 00:37:51,270
recovery and healing of that cluster

856
00:37:51,270 --> 00:37:54,270
over time so it essentially goes through

857
00:37:54,270 --> 00:37:56,550
this constant loop of is cluster healthy

858
00:37:56,550 --> 00:37:58,350
if it's not what should I be doing to

859
00:37:58,350 --> 00:38:00,420
make it a healthy I'll take those

860
00:38:00,420 --> 00:38:02,700
actions is the cluster healthy what

861
00:38:02,700 --> 00:38:03,330
should I be doing

862
00:38:03,330 --> 00:38:08,310
etc in a constant loop now the final

863
00:38:08,310 --> 00:38:10,020
kind of bit of this is we have the

864
00:38:10,020 --> 00:38:12,150
ability to scale our application we have

865
00:38:12,150 --> 00:38:13,920
the ability to run the application over

866
00:38:13,920 --> 00:38:15,840
lots of different different disparate

867
00:38:15,840 --> 00:38:18,510
pieces of back-end infrastructure and

868
00:38:18,510 --> 00:38:20,760
server compute infrastructure on the

869
00:38:20,760 --> 00:38:22,800
last bit is monitoring without

870
00:38:22,800 --> 00:38:24,240
monitoring you really have no idea

871
00:38:24,240 --> 00:38:28,620
whether you're serving the users and you

872
00:38:28,620 --> 00:38:30,660
have really no idea whether the system

873
00:38:30,660 --> 00:38:33,930
is working at all so we build this thing

874
00:38:33,930 --> 00:38:36,930
called prometheus operator Prometheus is

875
00:38:36,930 --> 00:38:40,470
a monitoring system inspired by the

876
00:38:40,470 --> 00:38:43,070
system Boardman that comes out of Google

877
00:38:43,070 --> 00:38:45,780
but what we've done is we've used this

878
00:38:45,780 --> 00:38:47,760
idea of labels in kubernetes and applied

879
00:38:47,760 --> 00:38:50,100
it to monitoring systems so I'll show

880
00:38:50,100 --> 00:38:52,470
you an example of this so I have this

881
00:38:52,470 --> 00:38:54,120
little application called host info

882
00:38:54,120 --> 00:38:59,520
running and host info is deployed on my

883
00:38:59,520 --> 00:39:02,160
cluster and we have Prometheus going and

884
00:39:02,160 --> 00:39:03,570
actually just scraping a lot of the

885
00:39:03,570 --> 00:39:07,620
basic metrics about host info so what we

886
00:39:07,620 --> 00:39:09,570
can do with kubernetes and these

887
00:39:09,570 --> 00:39:11,220
monitoring systems is we can go all the

888
00:39:11,220 --> 00:39:13,740
way from the load balancer down to the

889
00:39:13,740 --> 00:39:15,540
individual container down to the server

890
00:39:15,540 --> 00:39:17,250
that's running that container so I'll

891
00:39:17,250 --> 00:39:21,930
show you that live here so we go into a

892
00:39:21,930 --> 00:39:25,590
service we go into this service for host

893
00:39:25,590 --> 00:39:27,480
info try to make this bigger

894
00:39:27,480 --> 00:39:29,490
I'm going to the service for host info

895
00:39:29,490 --> 00:39:32,220
inside of post info service we have this

896
00:39:32,220 --> 00:39:35,280
label selector this label selector finds

897
00:39:35,280 --> 00:39:36,480
that there's one

898
00:39:36,480 --> 00:39:38,430
we have application running I drill in

899
00:39:38,430 --> 00:39:41,490
that I can find out you know how much

900
00:39:41,490 --> 00:39:43,800
RAM and CPU has been used there I can

901
00:39:43,800 --> 00:39:45,869
drill down again and find out which

902
00:39:45,869 --> 00:39:48,690
machine is this running on what what

903
00:39:48,690 --> 00:39:51,270
labels are on this machine what version

904
00:39:51,270 --> 00:39:52,830
of software is it running what kernel

905
00:39:52,830 --> 00:39:54,960
version is is running this is really

906
00:39:54,960 --> 00:39:55,859
powerful stuff

907
00:39:55,859 --> 00:39:57,690
we've gone from all the way from the

908
00:39:57,690 --> 00:39:58,859
load balancer through the running

909
00:39:58,859 --> 00:40:00,810
process down to the running machine I'm

910
00:40:00,810 --> 00:40:02,880
in a few clicks and the whole way

911
00:40:02,880 --> 00:40:05,730
through we have live up-to-date

912
00:40:05,730 --> 00:40:09,119
statistics on the the process on the

913
00:40:09,119 --> 00:40:11,790
machine pretty pretty powerful concepts

914
00:40:11,790 --> 00:40:16,920
and then I also would like you to try

915
00:40:16,920 --> 00:40:18,780
out so I'm running this application host

916
00:40:18,780 --> 00:40:22,040
F up org F ups my personal domain and

917
00:40:22,040 --> 00:40:25,290
this application is essentially just

918
00:40:25,290 --> 00:40:28,530
keeping a visitor account and then at

919
00:40:28,530 --> 00:40:30,480
the same time I have Prometheus

920
00:40:30,480 --> 00:40:32,869
monitoring the application directly

921
00:40:32,869 --> 00:40:35,730
so getting application specific metrics

922
00:40:35,730 --> 00:40:38,520
so what I can do now is I can come in to

923
00:40:38,520 --> 00:40:41,280
the application I can say I want to

924
00:40:41,280 --> 00:40:46,609
scale it up to maybe five copies and

925
00:40:46,609 --> 00:40:49,320
Prometheus will immediately respond to

926
00:40:49,320 --> 00:40:51,150
that as those applications are deployed

927
00:40:51,150 --> 00:40:54,119
and start to pick them out and then we

928
00:40:54,119 --> 00:40:56,430
can start to do useful things like say I

929
00:40:56,430 --> 00:40:59,310
want to find all HTTP requests that have

930
00:40:59,310 --> 00:41:01,380
happened in five second intervals and

931
00:41:01,380 --> 00:41:04,680
get the rate of that and make a graph

932
00:41:04,680 --> 00:41:06,660
and maybe give it for the last two

933
00:41:06,660 --> 00:41:09,150
minutes and so we started to see all the

934
00:41:09,150 --> 00:41:10,920
live statistics of what's happening

935
00:41:10,920 --> 00:41:12,060
inside the cluster and for this

936
00:41:12,060 --> 00:41:16,320
particular application so what's next

937
00:41:16,320 --> 00:41:18,780
for kubernetes there's a bunch of

938
00:41:18,780 --> 00:41:20,910
different work going on kubernetes is

939
00:41:20,910 --> 00:41:24,020
one of the most the most active github

940
00:41:24,020 --> 00:41:28,260
repo right now today in the world so

941
00:41:28,260 --> 00:41:29,790
there's a really huge healthy growth of

942
00:41:29,790 --> 00:41:32,400
open-source community better metrics of

943
00:41:32,400 --> 00:41:35,640
monitoring across the entire system ever

944
00:41:35,640 --> 00:41:38,040
improving security defaults we have role

945
00:41:38,040 --> 00:41:39,540
based access control and we can use

946
00:41:39,540 --> 00:41:41,990
internet identities like Open ID Connect

947
00:41:41,990 --> 00:41:43,830
support for more and more cloud

948
00:41:43,830 --> 00:41:46,710
platforms more prepackaged applications

949
00:41:46,710 --> 00:41:48,660
so you can just deploy a wordpress or

950
00:41:48,660 --> 00:41:50,040
deploy whatever

951
00:41:50,040 --> 00:41:51,540
and if you're interested we have this

952
00:41:51,540 --> 00:41:55,410
entire tracking repo of features now the

953
00:41:55,410 --> 00:41:56,820
last thing I want to touch on before I

954
00:41:56,820 --> 00:42:00,120
go is why I'm here what drives me to

955
00:42:00,120 --> 00:42:03,330
build all this crazy technology so core

956
00:42:03,330 --> 00:42:05,970
OS has a really clear mission it's a

957
00:42:05,970 --> 00:42:07,830
pretty straightforward one secure the

958
00:42:07,830 --> 00:42:09,360
Internet I think we'll be done here any

959
00:42:09,360 --> 00:42:11,450
day

960
00:42:11,520 --> 00:42:14,070
so what coriolis is trying to do and why

961
00:42:14,070 --> 00:42:15,900
we build this stuff and why we think all

962
00:42:15,900 --> 00:42:17,550
this stuff is important to securing the

963
00:42:17,550 --> 00:42:20,190
Internet is if we go back to our 3.5

964
00:42:20,190 --> 00:42:23,280
billion users these people are pouring

965
00:42:23,280 --> 00:42:26,940
their lives into these servers and it's

966
00:42:26,940 --> 00:42:29,100
our responsibility to take care of them

967
00:42:29,100 --> 00:42:30,810
in the best way possible using the best

968
00:42:30,810 --> 00:42:33,690
possible technology again it's it's

969
00:42:33,690 --> 00:42:35,310
their commerce that's documents with

970
00:42:35,310 --> 00:42:36,780
their personal photos

971
00:42:36,780 --> 00:42:38,960
it's everything they've communicated and

972
00:42:38,960 --> 00:42:43,380
so with all these servers we need to

973
00:42:43,380 --> 00:42:45,570
take responsibility this is a heavy

974
00:42:45,570 --> 00:42:50,490
heavy responsibility and so we like to

975
00:42:50,490 --> 00:42:52,110
think of ourselves as building what is

976
00:42:52,110 --> 00:42:54,600
self-driving infrastructure essentially

977
00:42:54,600 --> 00:42:56,730
taking away a lot of the toil and

978
00:42:56,730 --> 00:42:58,860
concerns that all of us have and

979
00:42:58,860 --> 00:43:02,070
maintaining infrastructure and making it

980
00:43:02,070 --> 00:43:04,230
more like a set of applications where

981
00:43:04,230 --> 00:43:08,190
you don't have to be an expert you don't

982
00:43:08,190 --> 00:43:09,840
have to be an expert in patching every

983
00:43:09,840 --> 00:43:11,930
single component these these

984
00:43:11,930 --> 00:43:14,270
infrastructure is giving dizzyingly

985
00:43:14,270 --> 00:43:16,920
complicated and it's impossible for us

986
00:43:16,920 --> 00:43:20,520
to be both kernel experts database

987
00:43:20,520 --> 00:43:23,120
experts experts in our own applications

988
00:43:23,120 --> 00:43:26,760
at the same time and so we need help in

989
00:43:26,760 --> 00:43:28,080
automation to make all this stuff

990
00:43:28,080 --> 00:43:31,470
successful and the reason there's

991
00:43:31,470 --> 00:43:33,450
urgency here and the reason this is

992
00:43:33,450 --> 00:43:35,760
important is because without expertise

993
00:43:35,760 --> 00:43:38,460
we will inevitably miss the latest

994
00:43:38,460 --> 00:43:41,670
security update we have as engineers

995
00:43:41,670 --> 00:43:44,220
inside the Linux kernel across the

996
00:43:44,220 --> 00:43:46,410
entire ecosystem we have at any given

997
00:43:46,410 --> 00:43:50,610
time about you know maybe a month maybe

998
00:43:50,610 --> 00:43:53,520
two or three months time period where

999
00:43:53,520 --> 00:43:54,810
there's not an entire panic on the

1000
00:43:54,810 --> 00:43:57,750
internet where some horrible security

1001
00:43:57,750 --> 00:43:59,940
vulnerability comes out and we have to

1002
00:43:59,940 --> 00:44:02,880
all respond to it who had to respond to

1003
00:44:02,880 --> 00:44:03,780
dirty cow

1004
00:44:03,780 --> 00:44:07,350
who had to respond to heartbleed these

1005
00:44:07,350 --> 00:44:10,050
are things that happen constantly and we

1006
00:44:10,050 --> 00:44:12,150
need automation in order to ensure that

1007
00:44:12,150 --> 00:44:15,870
our software systems are caught fixed

1008
00:44:15,870 --> 00:44:19,260
and that our users are secured because

1009
00:44:19,260 --> 00:44:21,720
remember we're responsible for more and

1010
00:44:21,720 --> 00:44:23,550
more millions and millions of users when

1011
00:44:23,550 --> 00:44:26,730
we run these servers and we know how to

1012
00:44:26,730 --> 00:44:28,620
make really really secure systems right

1013
00:44:28,620 --> 00:44:30,870
this is the most secure computer in the

1014
00:44:30,870 --> 00:44:34,020
world but it's not interesting it's not

1015
00:44:34,020 --> 00:44:35,640
interesting because it's not connected

1016
00:44:35,640 --> 00:44:38,760
and so we have to we have to worry about

1017
00:44:38,760 --> 00:44:41,400
these vulnerabilities because connected

1018
00:44:41,400 --> 00:44:44,850
systems are the interesting ones and so

1019
00:44:44,850 --> 00:44:47,370
I wanted to like create a diagram for

1020
00:44:47,370 --> 00:44:49,380
the internet and just looking for

1021
00:44:49,380 --> 00:44:51,210
creative common images of Internet is

1022
00:44:51,210 --> 00:44:52,500
great so I wanted to just share a couple

1023
00:44:52,500 --> 00:44:57,570
of these with you oh actually this so we

1024
00:44:57,570 --> 00:45:00,660
talked about we talked about this time

1025
00:45:00,660 --> 00:45:03,150
window where security vulnerabilities

1026
00:45:03,150 --> 00:45:05,670
are disclosed to where we fix them this

1027
00:45:05,670 --> 00:45:07,590
is not something that's in the popular

1028
00:45:07,590 --> 00:45:10,140
culture of our world and if there's

1029
00:45:10,140 --> 00:45:11,670
anything that I hope that you take away

1030
00:45:11,670 --> 00:45:13,530
from this it's the importance of

1031
00:45:13,530 --> 00:45:15,180
patching and keeping our software

1032
00:45:15,180 --> 00:45:18,240
infrastructure up-to-date John Oliver if

1033
00:45:18,240 --> 00:45:20,550
you haven't seen him he has a great show

1034
00:45:20,550 --> 00:45:24,420
he gave this talk on the safety and

1035
00:45:24,420 --> 00:45:27,540
security of mobile devices and he had

1036
00:45:27,540 --> 00:45:30,930
this great moment where this is a bunch

1037
00:45:30,930 --> 00:45:33,990
of Apple engineers supposedly finding

1038
00:45:33,990 --> 00:45:36,780
out of a new zero-day and iPhone and

1039
00:45:36,780 --> 00:45:39,060
having to respond to it in a responsible

1040
00:45:39,060 --> 00:45:44,670
manner but at any given time all of our

1041
00:45:44,670 --> 00:45:46,650
computer systems as they say here in

1042
00:45:46,650 --> 00:45:49,530
this clip are dancing madly on the edge

1043
00:45:49,530 --> 00:45:53,010
of this volcano this bitter edge of

1044
00:45:53,010 --> 00:45:56,070
systems being secured and insecure and

1045
00:45:56,070 --> 00:45:58,860
the only thing that ever is able to

1046
00:45:58,860 --> 00:46:02,250
guarantee that security over time with

1047
00:46:02,250 --> 00:46:03,840
this idea that the next heartbleed is

1048
00:46:03,840 --> 00:46:05,670
just around the corner is our ability to

1049
00:46:05,670 --> 00:46:08,100
patch and update these systems that's

1050
00:46:08,100 --> 00:46:09,810
what keeps us from falling inside the

1051
00:46:09,810 --> 00:46:11,690
volcano

1052
00:46:11,690 --> 00:46:15,589
so we run software we automate the

1053
00:46:15,589 --> 00:46:17,900
updates of it no matter what it is and

1054
00:46:17,900 --> 00:46:20,990
that's what we do at Koro s if you want

1055
00:46:20,990 --> 00:46:23,180
to get free stuff get kubernetes for

1056
00:46:23,180 --> 00:46:25,339
yourself run it on your laptop with mini

1057
00:46:25,339 --> 00:46:27,710
tube we have a tectonic free tier

1058
00:46:27,710 --> 00:46:29,630
tectonics is our kubernetes product you

1059
00:46:29,630 --> 00:46:31,280
can find it at chorus comm slash

1060
00:46:31,280 --> 00:46:33,950
tectonic you can join us in the

1061
00:46:33,950 --> 00:46:35,539
community that helped us build great

1062
00:46:35,539 --> 00:46:37,700
code there's cool stuff under github

1063
00:46:37,700 --> 00:46:39,530
column slash core OS whether you like

1064
00:46:39,530 --> 00:46:42,799
operating systems databases identity or

1065
00:46:42,799 --> 00:46:45,349
anything else github.com slash core OS

1066
00:46:45,349 --> 00:46:49,250
Gabe comm slash kubernetes largest

1067
00:46:49,250 --> 00:46:51,710
growing cubit or open source community

1068
00:46:51,710 --> 00:46:54,109
on github

1069
00:46:54,109 --> 00:46:56,480
lots of charge to showing you you should

1070
00:46:56,480 --> 00:47:00,020
join up with this stuff it's exploding

1071
00:47:00,020 --> 00:47:02,359
we're core us and we're helping to run

1072
00:47:02,359 --> 00:47:04,160
the world servers we have offices in

1073
00:47:04,160 --> 00:47:06,049
Berlin San Francisco New York if you

1074
00:47:06,049 --> 00:47:09,380
want to join us directly and we have an

1075
00:47:09,380 --> 00:47:12,230
event in May in San Francisco and that's

1076
00:47:12,230 --> 00:47:12,859
all I got

1077
00:47:12,859 --> 00:47:14,450
thank you for your attention

1078
00:47:14,450 --> 00:47:27,819
[Applause]

1079
00:47:29,310 --> 00:47:32,160
so if you want questions we have five

1080
00:47:32,160 --> 00:47:33,080
minutes

1081
00:47:33,080 --> 00:47:36,590
but it's cool

1082
00:47:37,610 --> 00:47:43,370
yeah yeah I'm good

