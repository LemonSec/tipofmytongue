1
00:00:04,760 --> 00:00:08,969
so hi Christian male cop and I'm going

2
00:00:08,969 --> 00:00:14,160
to talk to you about cube I for those

3
00:00:14,160 --> 00:00:17,220
who don't know me I started contributing

4
00:00:17,220 --> 00:00:20,970
to Katie about nine years ago and for

5
00:00:20,970 --> 00:00:22,949
the last four years I've been

6
00:00:22,949 --> 00:00:25,410
responsible for the desktop client for

7
00:00:25,410 --> 00:00:29,609
co-op systems who develops the the co-op

8
00:00:29,609 --> 00:00:37,170
group our server so what is Q cube is a

9
00:00:37,170 --> 00:00:39,030
modern communication and collaboration

10
00:00:39,030 --> 00:00:43,770
client its email its clan during its

11
00:00:43,770 --> 00:00:46,950
task manage and management but it's also

12
00:00:46,950 --> 00:00:52,980
instant messaging note-taking it's that

13
00:00:52,980 --> 00:00:55,140
doesn't mean that we do all that right

14
00:00:55,140 --> 00:00:57,449
now already but that sort of the the

15
00:00:57,449 --> 00:01:02,190
scope that we want to work within so

16
00:01:02,190 --> 00:01:05,519
it's it's built using cute quick on top

17
00:01:05,519 --> 00:01:09,860
of a high-performance core called sync

18
00:01:10,820 --> 00:01:14,549
it's developed with a katie community we

19
00:01:14,549 --> 00:01:17,340
have other members of the Takeda

20
00:01:17,340 --> 00:01:19,260
community that are part of the

21
00:01:19,260 --> 00:01:21,299
development team especially the the

22
00:01:21,299 --> 00:01:25,080
visual design group the kt v DG that

23
00:01:25,080 --> 00:01:28,790
helps with a lot of the usability issues

24
00:01:28,790 --> 00:01:34,560
so for some of its goals we aim to be

25
00:01:34,560 --> 00:01:38,250
pretty and useful so we don't want to

26
00:01:38,250 --> 00:01:41,070
make a toy that just looks pretty but we

27
00:01:41,070 --> 00:01:43,140
also believe that in order for people to

28
00:01:43,140 --> 00:01:47,729
like to use the application having a

29
00:01:47,729 --> 00:01:51,960
clean user interface helps a lot we want

30
00:01:51,960 --> 00:01:55,409
to have a maintainable code base so that

31
00:01:55,409 --> 00:02:00,630
means we we we have a focus on testing

32
00:02:00,630 --> 00:02:02,610
it well and having it automatically

33
00:02:02,610 --> 00:02:04,680
tested so we can move fast without

34
00:02:04,680 --> 00:02:07,430
breaking stuff

35
00:02:08,389 --> 00:02:11,820
we also have a focus on deployability

36
00:02:11,820 --> 00:02:15,080
what I mean by that is not only

37
00:02:15,080 --> 00:02:18,660
portability so we want to target a

38
00:02:18,660 --> 00:02:22,740
macosx may want to target windows but we

39
00:02:22,740 --> 00:02:24,660
also want to go on mobile platforms

40
00:02:24,660 --> 00:02:28,080
eventually so we try to keep our demand

41
00:02:28,080 --> 00:02:31,770
dependency chain and control and only

42
00:02:31,770 --> 00:02:35,840
depend on things that we really require

43
00:02:40,100 --> 00:02:43,350
but by deployable we also mean that we

44
00:02:43,350 --> 00:02:45,780
want to support automated setup so if

45
00:02:45,780 --> 00:02:49,860
you have large deployments which we for

46
00:02:49,860 --> 00:02:52,200
instance do with collapse essence then

47
00:02:52,200 --> 00:02:53,970
you want to be able to script most of

48
00:02:53,970 --> 00:02:56,040
the setup process and have the necessary

49
00:02:56,040 --> 00:03:02,840
tools for that as well cube should be a

50
00:03:02,840 --> 00:03:05,550
high performance tool when you require

51
00:03:05,550 --> 00:03:09,209
it so it gets the job done quickly we

52
00:03:09,209 --> 00:03:11,549
think that it's important that you don't

53
00:03:11,549 --> 00:03:15,570
have to wait for the tool but it also

54
00:03:15,570 --> 00:03:17,280
shouldn't get in your way if you're not

55
00:03:17,280 --> 00:03:19,890
actively using it so if you if you don't

56
00:03:19,890 --> 00:03:21,870
use it it should get up get out of your

57
00:03:21,870 --> 00:03:23,640
way and if you're using it it should be

58
00:03:23,640 --> 00:03:28,440
there another target that we have is to

59
00:03:28,440 --> 00:03:31,170
make secure communication easier and

60
00:03:31,170 --> 00:03:36,350
more effortless more about that later

61
00:03:36,709 --> 00:03:40,140
so but where are we right now

62
00:03:40,140 --> 00:03:43,110
cube is in a fairly early state of

63
00:03:43,110 --> 00:03:45,900
development we've worked on it for the

64
00:03:45,900 --> 00:03:48,120
last year but it's a it was a lot of

65
00:03:48,120 --> 00:03:49,860
framework building figuring out the

66
00:03:49,860 --> 00:03:54,269
architecture preparing so that we can

67
00:03:54,269 --> 00:03:57,590
scale up the development as well so

68
00:03:57,590 --> 00:04:01,260
initially we're focusing on email only

69
00:04:01,260 --> 00:04:03,840
so we're building a a simple email

70
00:04:03,840 --> 00:04:08,370
client as an or MVP of sorts because

71
00:04:08,370 --> 00:04:10,950
that's just the hardest use case and

72
00:04:10,950 --> 00:04:15,450
they device so if we can deal with a

73
00:04:15,450 --> 00:04:18,120
million emails or say folders that have

74
00:04:18,120 --> 00:04:20,730
contained like 60,000 miles or so

75
00:04:20,730 --> 00:04:23,670
a new list is not going to be a problem

76
00:04:23,670 --> 00:04:27,170
that's why we're focusing on email first

77
00:04:27,170 --> 00:04:30,060
so that's pretty much the current state

78
00:04:30,060 --> 00:04:34,500
of queue it's very fairly basic so far

79
00:04:34,500 --> 00:04:36,960
we can get to the mail we can show the

80
00:04:36,960 --> 00:04:39,540
mail we can render plain text mail we

81
00:04:39,540 --> 00:04:42,030
can render HTML mail and we have the

82
00:04:42,030 --> 00:04:46,080
encryption or the whole GPG stack I'm

83
00:04:46,080 --> 00:04:49,140
already included thanks to two code that

84
00:04:49,140 --> 00:04:51,900
we share with Katie with the rest of

85
00:04:51,900 --> 00:04:57,480
Katie p.m. so with contact we have

86
00:04:57,480 --> 00:05:00,270
support from multiple accounts but

87
00:05:00,270 --> 00:05:02,700
that's pretty pretty much where it is

88
00:05:02,700 --> 00:05:05,550
right now so it's still quite a bit away

89
00:05:05,550 --> 00:05:11,760
from from being useful for end-users if

90
00:05:11,760 --> 00:05:13,650
we have time I'm also going to do a

91
00:05:13,650 --> 00:05:17,420
quick live demo at the end but we'll see

92
00:05:17,420 --> 00:05:21,660
so in order for you to understand

93
00:05:21,660 --> 00:05:24,300
whether this application could also be

94
00:05:24,300 --> 00:05:27,150
useful to you or whether you would be

95
00:05:27,150 --> 00:05:28,470
interested in something like that

96
00:05:28,470 --> 00:05:30,600
and ideally of course whether you used

97
00:05:30,600 --> 00:05:33,030
to be interested in in actively working

98
00:05:33,030 --> 00:05:35,850
on it I'm going to highlight some of the

99
00:05:35,850 --> 00:05:37,740
there are two focus areas that we have

100
00:05:37,740 --> 00:05:41,310
to hopefully show show you like where we

101
00:05:41,310 --> 00:05:48,420
where we eventually want to go for users

102
00:05:48,420 --> 00:05:52,370
I think one important aspect is that we

103
00:05:52,370 --> 00:05:55,950
want to focus more on workflows so

104
00:05:55,950 --> 00:05:57,450
traditionally we have like email

105
00:05:57,450 --> 00:05:58,800
application we have a calendar

106
00:05:58,800 --> 00:06:01,940
application as a note taking application

107
00:06:01,940 --> 00:06:04,950
but they're all sort of separate they

108
00:06:04,950 --> 00:06:08,610
they perhaps integrate a little bit but

109
00:06:08,610 --> 00:06:09,710
not a lot

110
00:06:09,710 --> 00:06:13,560
however the tasks the tasks that users

111
00:06:13,560 --> 00:06:17,400
actually have to do often involve a

112
00:06:17,400 --> 00:06:20,630
variety of these different applications

113
00:06:20,630 --> 00:06:24,690
so if you think of a a workflow like

114
00:06:24,690 --> 00:06:26,880
organizing a meeting you have some some

115
00:06:26,880 --> 00:06:29,310
communication initially perhaps then you

116
00:06:29,310 --> 00:06:31,740
have some scheduling which could be done

117
00:06:31,740 --> 00:06:34,360
over the calendar

118
00:06:34,360 --> 00:06:38,300
then at some point you you have the

119
00:06:38,300 --> 00:06:40,009
meeting for for the meeting you probably

120
00:06:40,009 --> 00:06:41,840
have an agenda which is sort of a task

121
00:06:41,840 --> 00:06:43,810
list that you maybe want to run through

122
00:06:43,810 --> 00:06:46,039
during the meeting they're taking notes

123
00:06:46,039 --> 00:06:48,349
and so out of that committing minutes

124
00:06:48,349 --> 00:06:50,419
that you perhaps have to approve again

125
00:06:50,419 --> 00:06:52,550
depending on the nature of the meeting

126
00:06:52,550 --> 00:06:55,099
so there is is quite a variety of

127
00:06:55,099 --> 00:06:57,949
different tasks in there where we think

128
00:06:57,949 --> 00:07:01,789
we we can support the user better if we

129
00:07:01,789 --> 00:07:04,460
if we model that and not just gave him

130
00:07:04,460 --> 00:07:06,830
like an a an email application and the

131
00:07:06,830 --> 00:07:08,719
calendar application and then leave him

132
00:07:08,719 --> 00:07:12,370
up to figuring it out himself

133
00:07:15,729 --> 00:07:19,639
another focus is certainly usability we

134
00:07:19,639 --> 00:07:22,069
we work closely together with usability

135
00:07:22,069 --> 00:07:24,199
experts and designers from the ground up

136
00:07:24,199 --> 00:07:26,169
we try to build that into the

137
00:07:26,169 --> 00:07:28,580
development process that we do that

138
00:07:28,580 --> 00:07:33,319
regularly and not as an afterthought we

139
00:07:33,319 --> 00:07:37,699
we don't want to solve all possible use

140
00:07:37,699 --> 00:07:41,389
cases with cube we believe that for for

141
00:07:41,389 --> 00:07:43,729
a good user experience we have to figure

142
00:07:43,729 --> 00:07:46,430
out which problems we have to solve and

143
00:07:46,430 --> 00:07:48,620
then focus on them and try to solve them

144
00:07:48,620 --> 00:07:52,539
cleanly and just do what we do right

145
00:07:52,539 --> 00:07:55,189
instead of just adding adding features

146
00:07:55,189 --> 00:08:01,789
because we could and another focus point

147
00:08:01,789 --> 00:08:05,349
in regards to usability is certain and

148
00:08:05,349 --> 00:08:08,330
the the whole security aspect because

149
00:08:08,330 --> 00:08:11,719
currently this is just fairly complex

150
00:08:11,719 --> 00:08:15,319
leading to users not using encryption

151
00:08:15,319 --> 00:08:17,300
for instance because you have to set it

152
00:08:17,300 --> 00:08:19,969
all up yourself and we believe there are

153
00:08:19,969 --> 00:08:21,949
a lot of opportunities to improve up on

154
00:08:21,949 --> 00:08:24,110
that by integrating for instance the key

155
00:08:24,110 --> 00:08:26,330
management into the address book by

156
00:08:26,330 --> 00:08:30,800
using things like trust and first use by

157
00:08:30,800 --> 00:08:34,698
having a simple visualization integrated

158
00:08:34,698 --> 00:08:37,909
with like the color scheme green yellow

159
00:08:37,909 --> 00:08:42,799
red so you recognize immediately whether

160
00:08:42,799 --> 00:08:46,220
a communication channel is secure or you

161
00:08:46,220 --> 00:08:47,500
don't know or

162
00:08:47,500 --> 00:08:50,600
actually insecure because the key was

163
00:08:50,600 --> 00:08:58,100
revoked for instance cube is first and

164
00:08:58,100 --> 00:09:00,680
foremost a networking application

165
00:09:00,680 --> 00:09:02,930
because if we're building a

166
00:09:02,930 --> 00:09:04,370
communication and collaboration some

167
00:09:04,370 --> 00:09:07,279
solution where you're gonna wanna

168
00:09:07,279 --> 00:09:14,990
communicate with someone and we what

169
00:09:14,990 --> 00:09:17,240
that means is we we focus only on

170
00:09:17,240 --> 00:09:19,880
content that you have typically stored

171
00:09:19,880 --> 00:09:22,640
on a remote server we don't want to rely

172
00:09:22,640 --> 00:09:26,930
too much on local data because if we do

173
00:09:26,930 --> 00:09:30,279
that then we for instance break the

174
00:09:30,279 --> 00:09:33,860
multi device use case so if you have a

175
00:09:33,860 --> 00:09:36,200
web interface you have a laptop you have

176
00:09:36,200 --> 00:09:39,080
perhaps a mobile device if you rely on

177
00:09:39,080 --> 00:09:42,860
the local data of one of these devices

178
00:09:42,860 --> 00:09:44,930
then you're not going to have that same

179
00:09:44,930 --> 00:09:48,650
data available on on another device so

180
00:09:48,650 --> 00:09:52,370
therefore we believe we should take this

181
00:09:52,370 --> 00:09:55,160
as a focus point and say okay that if

182
00:09:55,160 --> 00:09:56,810
the data is not available on the server

183
00:09:56,810 --> 00:09:59,089
then we're not going to use it that

184
00:09:59,089 --> 00:10:01,700
doesn't mean you can't use it with local

185
00:10:01,700 --> 00:10:03,980
data like a male deer we for instance

186
00:10:03,980 --> 00:10:07,730
have right now a male deer back-end per

187
00:10:07,730 --> 00:10:10,820
cube which then just treats the male

188
00:10:10,820 --> 00:10:13,580
deer as the remote content but that's

189
00:10:13,580 --> 00:10:18,070
just not really the focus point of

190
00:10:18,070 --> 00:10:20,990
course we are doing all the network

191
00:10:20,990 --> 00:10:24,110
access over open protocols as far as

192
00:10:24,110 --> 00:10:26,780
possible that's currently just IMAP for

193
00:10:26,780 --> 00:10:30,080
for accessing email and the Daath

194
00:10:30,080 --> 00:10:32,060
protocols for address book and

195
00:10:32,060 --> 00:10:34,780
calendaring

196
00:10:38,970 --> 00:10:41,940
from the development perspective I think

197
00:10:41,940 --> 00:10:47,310
one of the most important aspects is

198
00:10:47,310 --> 00:10:50,670
that we're trying to build reusable

199
00:10:50,670 --> 00:10:54,650
components so that's sort of in

200
00:10:54,650 --> 00:10:57,240
preparation for what I was talking about

201
00:10:57,240 --> 00:10:59,610
earlier that we want to start mixing up

202
00:10:59,610 --> 00:11:02,160
different application types if you will

203
00:11:02,160 --> 00:11:05,460
so for instance if you have an address

204
00:11:05,460 --> 00:11:09,570
book you render the contact in some way

205
00:11:09,570 --> 00:11:11,820
so that could be a component that is

206
00:11:11,820 --> 00:11:14,220
then can then be reused for instance it

207
00:11:14,220 --> 00:11:17,520
in the email view if you click on on the

208
00:11:17,520 --> 00:11:21,890
sender or or some other sort of contact

209
00:11:21,890 --> 00:11:28,350
so that way we enable consistency but we

210
00:11:28,350 --> 00:11:33,779
also enable use cases by allowing to for

211
00:11:33,779 --> 00:11:35,700
those components to be used outside of

212
00:11:35,700 --> 00:11:39,150
cube so these components can be

213
00:11:39,150 --> 00:11:42,450
installed as k packages which is just a

214
00:11:42,450 --> 00:11:46,230
a folder structure essentially bundling

215
00:11:46,230 --> 00:11:50,940
a qml file with the plugins necessary to

216
00:11:50,940 --> 00:11:53,310
access the data so the component itself

217
00:11:53,310 --> 00:11:56,520
knows how to get to the data so if you

218
00:11:56,520 --> 00:11:58,290
have a calendar component you could for

219
00:11:58,290 --> 00:12:01,130
instance show that in your desktop clock

220
00:12:01,130 --> 00:12:04,830
applet and then you get the full power

221
00:12:04,830 --> 00:12:10,350
of your regular calendar that you're

222
00:12:10,350 --> 00:12:10,860
used to

223
00:12:10,860 --> 00:12:16,580
inside that clock applet

224
00:12:22,160 --> 00:12:27,470
one of the major problems that I want to

225
00:12:27,470 --> 00:12:31,160
address with Cuban that I think quickly

226
00:12:31,160 --> 00:12:33,410
becomes a problem in a project of that

227
00:12:33,410 --> 00:12:36,800
size because if we were going to work on

228
00:12:36,800 --> 00:12:38,149
that for a couple of years is going to

229
00:12:38,149 --> 00:12:43,670
be a fairly large project the problem

230
00:12:43,670 --> 00:12:46,610
there is complexity complexity can very

231
00:12:46,610 --> 00:12:51,050
quickly become so big that you can't

232
00:12:51,050 --> 00:12:55,129
really move anymore and that it feels a

233
00:12:55,129 --> 00:12:58,100
bit like a Rube Goldberg machine where

234
00:12:58,100 --> 00:12:59,629
you touch one part and then something

235
00:12:59,629 --> 00:13:01,160
else moves and that triggers another

236
00:13:01,160 --> 00:13:04,129
process and that just becomes very

237
00:13:04,129 --> 00:13:07,519
difficult to reason about after some

238
00:13:07,519 --> 00:13:13,819
time so in the cue architecture on a on

239
00:13:13,819 --> 00:13:16,459
a very high level it looks like this so

240
00:13:16,459 --> 00:13:21,170
you have these are processes you have to

241
00:13:21,170 --> 00:13:25,279
cube process and you have here two

242
00:13:25,279 --> 00:13:29,300
backends that are called resources so

243
00:13:29,300 --> 00:13:30,769
that could be for instance and I'm a

244
00:13:30,769 --> 00:13:32,600
back-end and that could be a call death

245
00:13:32,600 --> 00:13:34,550
back-end or it could be two different

246
00:13:34,550 --> 00:13:40,009
IMAP servers and then you have a a

247
00:13:40,009 --> 00:13:43,579
library so that would be the API that

248
00:13:43,579 --> 00:13:46,189
cube is built against and that provides

249
00:13:46,189 --> 00:13:50,990
a unified access layer so from the

250
00:13:50,990 --> 00:13:54,529
application perspective it just queries

251
00:13:54,529 --> 00:13:56,389
for instance for emails or it queries

252
00:13:56,389 --> 00:13:59,060
for calendars or it queries for events

253
00:13:59,060 --> 00:14:01,009
it doesn't really know that there are

254
00:14:01,009 --> 00:14:04,730
multiple resources respectively doesn't

255
00:14:04,730 --> 00:14:07,180
really care

256
00:14:07,480 --> 00:14:11,920
if we zoom in on that then the green box

257
00:14:11,920 --> 00:14:15,150
is to resource you have declined

258
00:14:15,150 --> 00:14:18,760
generating commands so if you modify an

259
00:14:18,760 --> 00:14:21,820
email or mark it as read or delete it it

260
00:14:21,820 --> 00:14:24,550
sends the commands to the resource the

261
00:14:24,550 --> 00:14:27,490
resource or sit in a queue then all the

262
00:14:27,490 --> 00:14:31,030
resource does is essentially processing

263
00:14:31,030 --> 00:14:33,610
that queue it just processes one

264
00:14:33,610 --> 00:14:36,790
modification after the other and all

265
00:14:36,790 --> 00:14:38,080
these modifications go through a

266
00:14:38,080 --> 00:14:42,130
pipeline the pipeline contains different

267
00:14:42,130 --> 00:14:44,500
steps that's an extension point for us

268
00:14:44,500 --> 00:14:47,980
to process modifications before they hit

269
00:14:47,980 --> 00:14:53,800
the store so in there we could for

270
00:14:53,800 --> 00:14:56,830
instance do things like filtering or so

271
00:14:56,830 --> 00:15:00,880
to folders so and once that pipeline is

272
00:15:00,880 --> 00:15:02,520
processed we hit the store a

273
00:15:02,520 --> 00:15:04,930
notification is emitted that the

274
00:15:04,930 --> 00:15:06,760
revision of the store has changed that's

275
00:15:06,760 --> 00:15:09,970
just never increasing revision and then

276
00:15:09,970 --> 00:15:12,430
clients will just update once they get

277
00:15:12,430 --> 00:15:18,070
it so they just replay the changes on

278
00:15:18,070 --> 00:15:20,050
the other side we have the source which

279
00:15:20,050 --> 00:15:23,380
would for a and IMAP resource that would

280
00:15:23,380 --> 00:15:28,800
be the diameter so we have a process

281
00:15:28,800 --> 00:15:32,470
synchronized process here so not nothing

282
00:15:32,470 --> 00:15:34,020
it's this little process but just

283
00:15:34,020 --> 00:15:36,190
something that figures out what's the

284
00:15:36,190 --> 00:15:37,990
difference between the server and what I

285
00:15:37,990 --> 00:15:39,850
have locally generates a bunch of

286
00:15:39,850 --> 00:15:41,920
changes throws them in the queue the

287
00:15:41,920 --> 00:15:43,840
resource process is it exactly the same

288
00:15:43,840 --> 00:15:47,080
way if the change didn't come already

289
00:15:47,080 --> 00:15:50,200
from the source then to read the right

290
00:15:50,200 --> 00:15:52,300
back we'll just it also listens to the

291
00:15:52,300 --> 00:15:53,830
revision and will just replay any

292
00:15:53,830 --> 00:15:56,770
changes and that didn't come from here

293
00:15:56,770 --> 00:15:59,530
to the source again does synchronizing

294
00:15:59,530 --> 00:16:03,790
the state so what we get are these nice

295
00:16:03,790 --> 00:16:08,230
reactive loops so the client all it does

296
00:16:08,230 --> 00:16:10,540
is listen for changes and it has a bunch

297
00:16:10,540 --> 00:16:13,750
of month models that are essentially

298
00:16:13,750 --> 00:16:15,790
self updating and that just replay those

299
00:16:15,790 --> 00:16:20,470
changes and on the other side you just

300
00:16:20,470 --> 00:16:24,430
fire commands at the resource and then

301
00:16:24,430 --> 00:16:26,050
your you're done

302
00:16:26,050 --> 00:16:31,120
so that becomes it becomes much easier

303
00:16:31,120 --> 00:16:35,140
to reason about the system and it allows

304
00:16:35,140 --> 00:16:39,700
us to mostly contain the the state to

305
00:16:39,700 --> 00:16:43,720
the database so we don't have different

306
00:16:43,720 --> 00:16:45,760
parts of the system that maintained

307
00:16:45,760 --> 00:16:50,470
their own state and that I believe helps

308
00:16:50,470 --> 00:16:55,950
a lot with keeping the complexity at bay

309
00:16:59,850 --> 00:17:03,880
another dip another important aspect is

310
00:17:03,880 --> 00:17:09,400
certainly performance our approach to

311
00:17:09,400 --> 00:17:11,619
performance is not necessarily to try to

312
00:17:11,619 --> 00:17:15,160
optimize things as as far as possible

313
00:17:15,160 --> 00:17:18,520
because they don't it's always costly

314
00:17:18,520 --> 00:17:22,240
and might introduce more complexity so

315
00:17:22,240 --> 00:17:25,089
what we try to do is to not do

316
00:17:25,089 --> 00:17:28,630
unnecessary work and do the work only

317
00:17:28,630 --> 00:17:32,500
ones that we have to do what that means

318
00:17:32,500 --> 00:17:36,010
first and foremost is queryable data so

319
00:17:36,010 --> 00:17:38,740
we have to be able to query for exactly

320
00:17:38,740 --> 00:17:41,290
the data that we actually need for tasks

321
00:17:41,290 --> 00:17:43,990
at hand so for instance if we have a

322
00:17:43,990 --> 00:17:47,380
large email folder say thick 60,000

323
00:17:47,380 --> 00:17:51,100
messages or so if we can't query for the

324
00:17:51,100 --> 00:17:53,620
data we're going to have to load all

325
00:17:53,620 --> 00:17:55,750
those messages sort them for instance in

326
00:17:55,750 --> 00:17:58,540
memory and then throw 90% of them away

327
00:17:58,540 --> 00:18:01,630
again or 99% because you actually only

328
00:18:01,630 --> 00:18:06,580
have space for like 15 or so what we're

329
00:18:06,580 --> 00:18:08,320
doing instead is we're building the

330
00:18:08,320 --> 00:18:11,470
necessary indexes to be able to query

331
00:18:11,470 --> 00:18:13,990
for exactly that data so we can query

332
00:18:13,990 --> 00:18:16,180
for instance for the first hundred

333
00:18:16,180 --> 00:18:19,030
emails in a folder sorted by date and

334
00:18:19,030 --> 00:18:20,560
then we load exactly that and as you

335
00:18:20,560 --> 00:18:22,480
scroll down in the view we just fetch

336
00:18:22,480 --> 00:18:32,320
more by not only doing it once I mean we

337
00:18:32,320 --> 00:18:35,920
don't do we try to not do the work when

338
00:18:35,920 --> 00:18:38,530
we read so if you click on the folder

339
00:18:38,530 --> 00:18:40,180
and it loads the data we don't want to

340
00:18:40,180 --> 00:18:42,880
resort your whole list every time we

341
00:18:42,880 --> 00:18:45,280
built the index when you store the email

342
00:18:45,280 --> 00:18:48,520
we've done it once and then we we catch

343
00:18:48,520 --> 00:18:51,150
the result

344
00:18:53,480 --> 00:18:57,500
cube or sink is built on top of a

345
00:18:57,500 --> 00:18:59,510
high-performance key value store and

346
00:18:59,510 --> 00:19:02,150
it's called LM DB I don't know whether

347
00:19:02,150 --> 00:19:05,059
you've heard of it it it's a a key value

348
00:19:05,059 --> 00:19:07,610
store that supports single write or

349
00:19:07,610 --> 00:19:10,549
multi reader semantics so we have the

350
00:19:10,549 --> 00:19:12,890
resource process as the single writer in

351
00:19:12,890 --> 00:19:16,850
the system and all clients as the

352
00:19:16,850 --> 00:19:20,299
readers so one client is certainly cube

353
00:19:20,299 --> 00:19:22,700
another could be a an applet that

354
00:19:22,700 --> 00:19:27,620
listens for new mails or something but

355
00:19:27,620 --> 00:19:31,220
what that gives us is in process access

356
00:19:31,220 --> 00:19:33,830
to the data so if you start cube you

357
00:19:33,830 --> 00:19:36,530
wouldn't have to you wouldn't have to

358
00:19:36,530 --> 00:19:40,040
start any any other processes the

359
00:19:40,040 --> 00:19:42,440
resource processes are not necessary for

360
00:19:42,440 --> 00:19:44,900
read-only access you only need those

361
00:19:44,900 --> 00:19:47,090
processes if you actually want to get

362
00:19:47,090 --> 00:19:50,270
updates from your server if you start

363
00:19:50,270 --> 00:19:55,820
cube it just Allen DB is just a a memory

364
00:19:55,820 --> 00:19:58,970
mapped file essentially or the database

365
00:19:58,970 --> 00:20:01,309
is just a memory mapped file so if you

366
00:20:01,309 --> 00:20:03,290
start cube it will just memory map the

367
00:20:03,290 --> 00:20:05,360
database into the process and then you

368
00:20:05,360 --> 00:20:08,299
can get to the data directly in process

369
00:20:08,299 --> 00:20:11,510
which makes it very fast and also allows

370
00:20:11,510 --> 00:20:13,990
you to do things like recursive queries

371
00:20:13,990 --> 00:20:17,510
without the real penalty because you

372
00:20:17,510 --> 00:20:20,630
have the data directly available in

373
00:20:20,630 --> 00:20:26,750
process and it leaves it delegates that

374
00:20:26,750 --> 00:20:28,700
the complexity of for instance loading

375
00:20:28,700 --> 00:20:31,220
more data and making sure that that is

376
00:20:31,220 --> 00:20:36,559
fast to the file system yeah so that

377
00:20:36,559 --> 00:20:38,840
does also - to write more

378
00:20:38,840 --> 00:20:41,889
straightforward code

379
00:20:44,890 --> 00:20:48,540
last but not least is deployment and

380
00:20:48,540 --> 00:20:54,670
maintenance if we want to do large large

381
00:20:54,670 --> 00:20:58,660
deployments of q we have to have proper

382
00:20:58,660 --> 00:21:01,960
support for it to make it as easy as

383
00:21:01,960 --> 00:21:07,350
possible to do these kinds of setups one

384
00:21:07,350 --> 00:21:11,530
example for for this focus is sink shell

385
00:21:11,530 --> 00:21:14,230
which is a little command-line utility

386
00:21:14,230 --> 00:21:16,390
that allows you to do things like

387
00:21:16,390 --> 00:21:18,669
setting up accounts for a user and

388
00:21:18,669 --> 00:21:21,120
modifying them removing them but also

389
00:21:21,120 --> 00:21:23,740
synchronizing them for instance

390
00:21:23,740 --> 00:21:26,020
synchronizing a certain set of folders

391
00:21:26,020 --> 00:21:30,370
and the the command-line utility will

392
00:21:30,370 --> 00:21:32,020
block until the synchronization is

393
00:21:32,020 --> 00:21:33,880
complete so you can put it into a script

394
00:21:33,880 --> 00:21:38,110
and run it for for multiple users if you

395
00:21:38,110 --> 00:21:41,860
want but it also allows you to do things

396
00:21:41,860 --> 00:21:46,559
like wearing the local store and even

397
00:21:46,559 --> 00:21:51,309
modifying basically old objects so you

398
00:21:51,309 --> 00:21:54,309
can access the the full API that the

399
00:21:54,309 --> 00:21:58,870
application also has available it even

400
00:21:58,870 --> 00:22:00,910
allows you to run it as a script

401
00:22:00,910 --> 00:22:03,130
interpreter and then it's you can write

402
00:22:03,130 --> 00:22:05,559
sync shell scripts and it has a little

403
00:22:05,559 --> 00:22:08,500
ripple as addition but that's nice to

404
00:22:08,500 --> 00:22:10,620
have

405
00:22:12,950 --> 00:22:15,710
the other important point is definitely

406
00:22:15,710 --> 00:22:18,170
a clean separation between configuration

407
00:22:18,170 --> 00:22:21,110
and data what that means that the

408
00:22:21,110 --> 00:22:23,020
configuration contains for instance your

409
00:22:23,020 --> 00:22:26,570
accounts that you have set up but

410
00:22:26,570 --> 00:22:28,610
everything you download from your from

411
00:22:28,610 --> 00:22:31,429
the grouper server that is data so you

412
00:22:31,429 --> 00:22:33,980
should be at should be able at any point

413
00:22:33,980 --> 00:22:37,100
in time essentially to delete the data

414
00:22:37,100 --> 00:22:40,520
and the only thing that happens is that

415
00:22:40,520 --> 00:22:42,620
you have to pull the data again down

416
00:22:42,620 --> 00:22:45,860
from the server but that makes sure for

417
00:22:45,860 --> 00:22:47,059
instance if you have profile

418
00:22:47,059 --> 00:22:49,070
synchronization in a in a corporate

419
00:22:49,070 --> 00:22:51,140
setup that he can have the the

420
00:22:51,140 --> 00:22:53,929
configuration files under their profile

421
00:22:53,929 --> 00:22:55,790
synchronization and you can keep the

422
00:22:55,790 --> 00:22:57,980
data on the local machine and if you

423
00:22:57,980 --> 00:22:59,870
switch to another machine you may have

424
00:22:59,870 --> 00:23:01,669
to download some data again from the

425
00:23:01,669 --> 00:23:05,110
server but that's about it

426
00:23:06,169 --> 00:23:07,809
last but not least we have a

427
00:23:07,809 --> 00:23:10,640
configurable logging that you can tune

428
00:23:10,640 --> 00:23:14,480
the log levels with sync shell because

429
00:23:14,480 --> 00:23:16,309
we don't want to go the approach that

430
00:23:16,309 --> 00:23:19,580
you that people compile out the logging

431
00:23:19,580 --> 00:23:21,320
output and then we have to provide

432
00:23:21,320 --> 00:23:24,500
custom binaries if there is a problem so

433
00:23:24,500 --> 00:23:26,600
we'd rather have proper logging support

434
00:23:26,600 --> 00:23:28,760
and that we then can also integrate with

435
00:23:28,760 --> 00:23:32,000
for instance journal D or whatever that

436
00:23:32,000 --> 00:23:35,169
the system supports

437
00:23:40,680 --> 00:23:44,570
yeah I think now is a very good time to

438
00:23:44,570 --> 00:23:48,930
join this project um over the last year

439
00:23:48,930 --> 00:23:50,820
we've we've pretty much figured out the

440
00:23:50,820 --> 00:23:53,220
architecture and are are quite happy

441
00:23:53,220 --> 00:23:56,160
where it's going so we can now start to

442
00:23:56,160 --> 00:23:59,430
scale this up a bit more I think is a

443
00:23:59,430 --> 00:24:02,690
very interesting modern C++ copays and

444
00:24:02,690 --> 00:24:07,290
so if you're interested in in algorithms

445
00:24:07,290 --> 00:24:09,630
and performance work and that kind of

446
00:24:09,630 --> 00:24:11,550
stuff then sync is very interesting but

447
00:24:11,550 --> 00:24:15,360
it's probably a more advanced code base

448
00:24:15,360 --> 00:24:18,930
on the cube side it's it's a lot easier

449
00:24:18,930 --> 00:24:22,200
all the whole UI is written in qml so

450
00:24:22,200 --> 00:24:23,880
there's a lot of that there's a lot of

451
00:24:23,880 --> 00:24:28,230
design work and then there are some

452
00:24:28,230 --> 00:24:29,910
models and controllers that are written

453
00:24:29,910 --> 00:24:33,290
in C++ but that's fairly straightforward

454
00:24:33,290 --> 00:24:36,930
but we also need help with things like

455
00:24:36,930 --> 00:24:40,380
cross platform built so we unfortunately

456
00:24:40,380 --> 00:24:43,590
didn't get to do builds on mac and

457
00:24:43,590 --> 00:24:46,050
windows and android so that's all stuff

458
00:24:46,050 --> 00:24:47,910
that we should get going

459
00:24:47,910 --> 00:24:51,930
but like the manpower right now we do

460
00:24:51,930 --> 00:24:53,970
have weekly online meetings that are

461
00:24:53,970 --> 00:24:56,010
open to anyone that would like to try

462
00:24:56,010 --> 00:24:58,110
and just write me an email write an

463
00:24:58,110 --> 00:25:01,200
email to the mailing list and otherwise

464
00:25:01,200 --> 00:25:04,800
you can find more information on cube

465
00:25:04,800 --> 00:25:13,080
that KD that work I just packaged in

466
00:25:13,080 --> 00:25:17,370
early tech preview for Fedora 25 it's

467
00:25:17,370 --> 00:25:19,350
mostly right now it's mostly for me to

468
00:25:19,350 --> 00:25:22,290
make sure that we actually can package

469
00:25:22,290 --> 00:25:24,210
everything and that it works as it

470
00:25:24,210 --> 00:25:25,830
should

471
00:25:25,830 --> 00:25:28,620
it's not meant at all for end-users to

472
00:25:28,620 --> 00:25:31,290
do anything useful but you're welcome to

473
00:25:31,290 --> 00:25:33,300
try it and see what's what

474
00:25:33,300 --> 00:25:37,110
and follow it along that information is

475
00:25:37,110 --> 00:25:39,570
also under on the home page of course

476
00:25:39,570 --> 00:25:43,050
and we'll update this with more

477
00:25:43,050 --> 00:25:45,920
up-to-date information as we go along we

478
00:25:45,920 --> 00:25:50,160
plan to release a or tag a tech preview

479
00:25:50,160 --> 00:25:52,800
within the next couple of weeks

480
00:25:52,800 --> 00:25:54,540
but that will still be for for

481
00:25:54,540 --> 00:25:58,620
development so for for end-users

482
00:25:58,620 --> 00:26:01,350
it's going to be more towards and after

483
00:26:01,350 --> 00:26:04,110
year for something actually and user

484
00:26:04,110 --> 00:26:09,000
ready we also built a flat pack already

485
00:26:09,000 --> 00:26:11,490
together with eyelash if you've seen his

486
00:26:11,490 --> 00:26:14,310
talk it's in their same repository as

487
00:26:14,310 --> 00:26:18,600
all other KDE applications it's not

488
00:26:18,600 --> 00:26:20,700
automatically updated yet but eventually

489
00:26:20,700 --> 00:26:22,910
we'll get like nightly builds for that

490
00:26:22,910 --> 00:26:25,050
and you can of course build it from

491
00:26:25,050 --> 00:26:31,980
source yourself if you feel like it yeah

492
00:26:31,980 --> 00:26:35,330
with that we can do we still have time

493
00:26:35,330 --> 00:26:40,970
then we can do a short demo

494
00:26:44,530 --> 00:26:50,879
Oh No

495
00:27:00,350 --> 00:27:03,039
so yeah

496
00:27:03,980 --> 00:27:06,509
that's a bit interesting on a small

497
00:27:06,509 --> 00:27:10,980
screen like that but yet on the right we

498
00:27:10,980 --> 00:27:14,909
have like a conversation view for emails

499
00:27:14,909 --> 00:27:24,059
we can that for instance an encrypted

500
00:27:24,059 --> 00:27:36,539
message we can render some HTML spam we

501
00:27:36,539 --> 00:27:42,919
can switch accounts like this right now

502
00:27:45,350 --> 00:27:48,499
yeah there's a composer that you can

503
00:27:48,499 --> 00:27:53,970
send an email from and you can move some

504
00:27:53,970 --> 00:27:55,499
mails and you can Marcus read but it's

505
00:27:55,499 --> 00:27:59,190
not ready for pro consumption really but

506
00:27:59,190 --> 00:28:02,340
yeah if I click here on a folder we

507
00:28:02,340 --> 00:28:04,919
always issue a query directly to storage

508
00:28:04,919 --> 00:28:07,200
we don't cache anything or so which

509
00:28:07,200 --> 00:28:09,629
again helps a lot with the complexity

510
00:28:09,629 --> 00:28:15,960
that we don't have to do that yeah with

511
00:28:15,960 --> 00:28:18,320
that

512
00:28:19,360 --> 00:28:22,830
we come to two questions

513
00:28:24,200 --> 00:28:29,769
it seems like a bit odd a possible

514
00:28:29,769 --> 00:28:32,989
successor of contact is there some

515
00:28:32,989 --> 00:28:36,830
limitation on that we're not seeking to

516
00:28:36,830 --> 00:28:40,700
repeat the question was whether the

517
00:28:40,700 --> 00:28:45,259
intention is to replace contact we do

518
00:28:45,259 --> 00:28:47,869
not intend to replace contact there are

519
00:28:47,869 --> 00:28:49,820
many happy users of contact there's a

520
00:28:49,820 --> 00:28:52,309
team supporting continuing to support

521
00:28:52,309 --> 00:28:56,690
contact for collab systems this will be

522
00:28:56,690 --> 00:28:59,149
the successor for our use of contacts or

523
00:28:59,149 --> 00:29:01,549
contact is our current desktop client q

524
00:29:01,549 --> 00:29:02,899
will be the successor for it

525
00:29:02,899 --> 00:29:05,869
and will we believe it's more more

526
00:29:05,869 --> 00:29:08,539
suitable for for our use case but I

527
00:29:08,539 --> 00:29:09,739
think it's it's really a different

528
00:29:09,739 --> 00:29:12,909
target audience contact has an

529
00:29:12,909 --> 00:29:16,190
incredible amount of great features that

530
00:29:16,190 --> 00:29:19,940
work for a lot of people and we believe

531
00:29:19,940 --> 00:29:22,580
we want to build a simpler product that

532
00:29:22,580 --> 00:29:50,210
has a bit more more focus well so the

533
00:29:50,210 --> 00:29:54,350
question the question was whether about

534
00:29:54,350 --> 00:29:56,179
the same question for Arkady whether I'm

535
00:29:56,179 --> 00:29:58,909
seeking to replace Arkady the answer is

536
00:29:58,909 --> 00:30:03,320
pretty much the same I have or I'm

537
00:30:03,320 --> 00:30:07,129
maintaining contact professionally for

538
00:30:07,129 --> 00:30:09,739
co-op systems so I am quite familiar

539
00:30:09,739 --> 00:30:12,230
with the whole system and I was

540
00:30:12,230 --> 00:30:15,799
obviously heavily inspired by bio conadi

541
00:30:15,799 --> 00:30:21,549
and and contact as well but I

542
00:30:22,550 --> 00:30:27,170
I believe that our conadi as as it is is

543
00:30:27,170 --> 00:30:30,680
it's too complex and I believe this

544
00:30:30,680 --> 00:30:35,600
system improves upon a some pain points

545
00:30:35,600 --> 00:30:40,970
if you will that that I've seen with our

546
00:30:40,970 --> 00:30:43,430
karate so that's that's my might try for

547
00:30:43,430 --> 00:30:54,530
an improvement up on that essentially

548
00:30:54,530 --> 00:31:06,050
because it's easier so the question was

549
00:31:06,050 --> 00:31:10,540
whether we would have exchange support

550
00:31:10,540 --> 00:31:13,880
the answer is I don't know it's

551
00:31:13,880 --> 00:31:16,570
certainly not an initial focus we're

552
00:31:16,570 --> 00:31:18,800
perfectly open to any contributions

553
00:31:18,800 --> 00:31:26,150
really yeah but I mean there's there's

554
00:31:26,150 --> 00:31:28,630
nothing in principle from keeping us

555
00:31:28,630 --> 00:31:33,280
from having an exchange support

556
00:31:52,949 --> 00:31:55,749
so the question was whether the only

557
00:31:55,749 --> 00:31:58,329
viable way is to use ActiveSync and that

558
00:31:58,329 --> 00:32:01,539
you would need a license for that and I

559
00:32:01,539 --> 00:32:04,320
don't know

560
00:32:23,490 --> 00:32:29,210
so the answer would be EWS apparently

561
00:32:42,559 --> 00:32:45,158
yeah

562
00:32:46,250 --> 00:32:52,980
[Applause]

