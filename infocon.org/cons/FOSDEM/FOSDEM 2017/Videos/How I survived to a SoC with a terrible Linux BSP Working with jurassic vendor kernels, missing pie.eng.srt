1
00:00:00,060 --> 00:00:03,260
so hi everybody I

2
00:00:04,580 --> 00:00:07,550
look at Rizzoli and a mathematically

3
00:00:07,550 --> 00:00:11,600
looks engineer so my job is to put Linux

4
00:00:11,600 --> 00:00:14,860
on embedded devices on devices with a

5
00:00:14,860 --> 00:00:18,650
custom electronics and I do all the

6
00:00:18,650 --> 00:00:20,440
current applications and so on I also

7
00:00:20,440 --> 00:00:23,360
give a few contribution to the

8
00:00:23,360 --> 00:00:26,380
Bitterroot project and a few other ones

9
00:00:26,380 --> 00:00:30,020
today about some experiences I've had

10
00:00:30,020 --> 00:00:32,840
with system and chips which have a bed

11
00:00:32,840 --> 00:00:34,940
support there are some with good support

12
00:00:34,940 --> 00:00:36,829
some with bad support so I will talk

13
00:00:36,829 --> 00:00:39,770
about one that I met in the other

14
00:00:39,770 --> 00:00:43,160
category basically I thought at least

15
00:00:43,160 --> 00:00:46,310
from this talk I will refer to an

16
00:00:46,310 --> 00:00:48,739
embedded system is a physical product

17
00:00:48,739 --> 00:00:52,550
that has a electronic device in a fine

18
00:00:52,550 --> 00:00:54,290
board that is designed specifically for

19
00:00:54,290 --> 00:00:57,020
that product custom boat with a system

20
00:00:57,020 --> 00:01:01,010
on chip at its heart so that's anybody

21
00:01:01,010 --> 00:01:03,440
don't understand what the system and GPS

22
00:01:03,440 --> 00:01:06,530
or anybody has said so far okay nobody

23
00:01:06,530 --> 00:01:10,639
so during the fight would go OK the chip

24
00:01:10,639 --> 00:01:13,670
that I will be talking about is this one

25
00:01:13,670 --> 00:01:18,109
it's from Chinese brain and it's

26
00:01:18,109 --> 00:01:23,240
basically designed to allow producing

27
00:01:23,240 --> 00:01:28,369
very low-cost devices is it queries and

28
00:01:28,369 --> 00:01:31,069
online cooking 240 mega so it's pretty

29
00:01:31,069 --> 00:01:33,529
slow compared to our system and chip

30
00:01:33,529 --> 00:01:37,990
that are very common nowadays but it has

31
00:01:37,990 --> 00:01:41,420
quite reasonable amount of proof as many

32
00:01:41,420 --> 00:01:45,200
actually especially in h.264 encoder and

33
00:01:45,200 --> 00:01:48,310
decoder and many others it has a

34
00:01:48,310 --> 00:01:53,359
peculiar design choice so it has 64

35
00:01:53,359 --> 00:01:56,179
megabytes of ddr2 ram in package so it

36
00:01:56,179 --> 00:01:58,219
means the packet you see on the board

37
00:01:58,219 --> 00:02:01,039
contains actually two silicon guys one

38
00:02:01,039 --> 00:02:02,899
is the system and chip itself and the

39
00:02:02,899 --> 00:02:04,520
other is the RAM which are developed

40
00:02:04,520 --> 00:02:08,119
internally so this means you donate

41
00:02:08,119 --> 00:02:11,569
access to run directly outside also the

42
00:02:11,569 --> 00:02:14,050
package is in a QFP

43
00:02:14,050 --> 00:02:16,870
this whole set of things allows to have

44
00:02:16,870 --> 00:02:18,670
very cheap products if you don't

45
00:02:18,670 --> 00:02:20,620
understand why it's electronic stuff and

46
00:02:20,620 --> 00:02:22,270
it's not the goal of this talk I will be

47
00:02:22,270 --> 00:02:26,890
talking about software support system

48
00:02:26,890 --> 00:02:29,350
and cheap needs some software support

49
00:02:29,350 --> 00:02:31,570
because any every system on chip is

50
00:02:31,570 --> 00:02:33,670
different from another it's not Nexus 6

51
00:02:33,670 --> 00:02:36,630
in x86 motherboard which is standardized

52
00:02:36,630 --> 00:02:39,760
so you need what is usually called a

53
00:02:39,760 --> 00:02:43,480
good Support Package BSP or development

54
00:02:43,480 --> 00:02:48,970
kit has decay and the kind of idea BSP

55
00:02:48,970 --> 00:02:51,100
that we would love to receive for any

56
00:02:51,100 --> 00:02:53,410
system on cheap and that happens with

57
00:02:53,410 --> 00:03:00,850
some is and get the color and mainly you

58
00:03:00,850 --> 00:03:04,330
route or mailboxes to get the upstream

59
00:03:04,330 --> 00:03:06,280
version for that which support for at

60
00:03:06,280 --> 00:03:07,810
least the peripherals that can be

61
00:03:07,810 --> 00:03:11,530
involved in booting and good way to have

62
00:03:11,530 --> 00:03:13,660
your documentation because at some point

63
00:03:13,660 --> 00:03:18,070
you need to understand Hardware the

64
00:03:18,070 --> 00:03:20,350
reason I would like to receive this is I

65
00:03:20,350 --> 00:03:29,050
have a kernel that has a very good many

66
00:03:29,050 --> 00:03:31,570
testing infrastructure so the code

67
00:03:31,570 --> 00:03:34,750
quality is very good and especially you

68
00:03:34,750 --> 00:03:39,040
get support basically for any amount of

69
00:03:39,040 --> 00:03:41,350
time one from for the future so it's

70
00:03:41,350 --> 00:03:43,660
well supported and you have bug fixes

71
00:03:43,660 --> 00:03:49,750
and so on and also using this component

72
00:03:49,750 --> 00:03:51,670
specially you boot means you can reuse

73
00:03:51,670 --> 00:03:55,660
the the booty and finger play mechanism

74
00:03:55,660 --> 00:03:57,160
from other devices you've already made

75
00:03:57,160 --> 00:03:59,230
so you reuse the same component it's

76
00:03:59,230 --> 00:04:01,540
less work to make a new product of

77
00:04:01,540 --> 00:04:04,239
course unfortunately this is not what I

78
00:04:04,239 --> 00:04:07,480
received so this is the start of my my

79
00:04:07,480 --> 00:04:11,210
quest and the

80
00:04:11,210 --> 00:04:13,570
steps that I will talk about you

81
00:04:13,570 --> 00:04:15,970
documentation the obscure the to chain

82
00:04:15,970 --> 00:04:21,110
booty the tools and customer support so

83
00:04:21,110 --> 00:04:25,370
the mutation as I said I would like to

84
00:04:25,370 --> 00:04:27,620
have good documentation on the official

85
00:04:27,620 --> 00:04:30,710
website you can find a data sheet which

86
00:04:30,710 --> 00:04:32,300
is basically a list of features a very

87
00:04:32,300 --> 00:04:34,280
detailed list of features and that's it

88
00:04:34,280 --> 00:04:36,380
so you don't get anything else on the

89
00:04:36,380 --> 00:04:38,600
public website but if you're a customer

90
00:04:38,600 --> 00:04:41,180
it's well defined you receive a lot of

91
00:04:41,180 --> 00:04:45,020
stuff but it's so under and e8 so I went

92
00:04:45,020 --> 00:04:47,930
I cannot tell anything about that but

93
00:04:47,930 --> 00:04:51,320
luckily there is a third way to get some

94
00:04:51,320 --> 00:04:53,270
material without being a customer with

95
00:04:53,270 --> 00:04:57,010
an ad a that is you can buy affordable

96
00:04:57,010 --> 00:05:00,620
evolution kit development kit which is

97
00:05:00,620 --> 00:05:04,940
available for online Chinese stores it's

98
00:05:04,940 --> 00:05:08,270
a pretty nice board so you can get an

99
00:05:08,270 --> 00:05:10,250
apology hardware but also a DVD along

100
00:05:10,250 --> 00:05:13,880
with basically a subset of that the

101
00:05:13,880 --> 00:05:15,460
material that is given to customers

102
00:05:15,460 --> 00:05:18,950
especially there is these manual the

103
00:05:18,950 --> 00:05:22,640
design guide which is vertically the

104
00:05:22,640 --> 00:05:24,590
degradation for each peripheral that's

105
00:05:24,590 --> 00:05:27,290
inside the system on chip so with that

106
00:05:27,290 --> 00:05:32,270
you you have list of registers a list of

107
00:05:32,270 --> 00:05:34,340
fields inside register with at least a

108
00:05:34,340 --> 00:05:36,470
name for each of them for most of them

109
00:05:36,470 --> 00:05:38,270
you also have a description of the

110
00:05:38,270 --> 00:05:40,100
device and in description of the fields

111
00:05:40,100 --> 00:05:43,060
so this is the very basic thing you can

112
00:05:43,060 --> 00:05:46,700
work on when you need to implement or

113
00:05:46,700 --> 00:05:52,690
tweak or that a device driver okay the

114
00:05:52,690 --> 00:05:57,020
documentation is well it's good enough

115
00:05:57,020 --> 00:05:59,810
if you use to reading this kind of

116
00:05:59,810 --> 00:06:01,970
document and you have an idea of how

117
00:06:01,970 --> 00:06:05,270
system and chips work generally so you

118
00:06:05,270 --> 00:06:07,190
we kind of know where the pieces are and

119
00:06:07,190 --> 00:06:09,500
you can fill in what is not completely

120
00:06:09,500 --> 00:06:11,570
documented or properly documented so

121
00:06:11,570 --> 00:06:15,730
it's just it's okay it's enough okay so

122
00:06:15,730 --> 00:06:20,870
come to the first pieces the lyrics can

123
00:06:20,870 --> 00:06:22,280
of course which has to support your

124
00:06:22,280 --> 00:06:23,690
peripheral so basically it has to happen

125
00:06:23,690 --> 00:06:25,490
device drivers for each of your

126
00:06:25,490 --> 00:06:29,360
peripherals so the root zone that is

127
00:06:29,360 --> 00:06:31,340
provided is actually derived from Linux

128
00:06:31,340 --> 00:06:35,270
kernel to 6.30 5.4 which is being

129
00:06:35,270 --> 00:06:39,770
released in 2010 it's very old at least

130
00:06:39,770 --> 00:06:43,160
compared to the evolution of software

131
00:06:43,160 --> 00:06:49,630
it's a lot of time - 6 2 2 4 5 4 so 2 6

132
00:06:49,630 --> 00:06:53,240
35.4 is not even the latest release in

133
00:06:53,240 --> 00:06:58,580
the stable branch for - 635 the

134
00:06:58,580 --> 00:07:00,950
difference between that 414 you are

135
00:07:00,950 --> 00:07:03,530
missing 11 months of bug fixes it's more

136
00:07:03,530 --> 00:07:06,410
than 1,000 comets and so just in case

137
00:07:06,410 --> 00:07:10,250
one of these bugs will hit you

138
00:07:10,250 --> 00:07:12,980
it's better to merge in the changes from

139
00:07:12,980 --> 00:07:17,090
the 14 release which luckily is very

140
00:07:17,090 --> 00:07:19,190
easy because it has minimal conflicts

141
00:07:19,190 --> 00:07:22,370
they can solve unfortunately the

142
00:07:22,370 --> 00:07:24,290
difference with the mainline kernel is

143
00:07:24,290 --> 00:07:26,420
huge it's uncountable

144
00:07:26,420 --> 00:07:29,540
so there's a pile of new features pile

145
00:07:29,540 --> 00:07:32,690
of improvements not to make sure that

146
00:07:32,690 --> 00:07:35,150
fixes especially security bugs

147
00:07:35,150 --> 00:07:37,430
there are secure there are bugs and

148
00:07:37,430 --> 00:07:40,070
security bugs in every color but if you

149
00:07:40,070 --> 00:07:43,220
upgrade it you can stay on on a safe

150
00:07:43,220 --> 00:07:43,460
side

151
00:07:43,460 --> 00:07:46,280
if you don't well every old kernel has

152
00:07:46,280 --> 00:07:48,170
bugs and they are exploiting the world

153
00:07:48,170 --> 00:07:51,230
so you you are at risk if a twist if

154
00:07:51,230 --> 00:07:54,130
your device is connected to the Internet

155
00:07:54,130 --> 00:07:56,960
also you donate device 3 so this means

156
00:07:56,960 --> 00:08:01,400
you have the the build file less which

157
00:08:01,400 --> 00:08:03,710
is ok - its but it's a bit annoying to

158
00:08:03,710 --> 00:08:07,610
work with the addition to the color are

159
00:08:07,610 --> 00:08:09,950
provided by the vendor as a set of touch

160
00:08:09,950 --> 00:08:12,580
files so there are huge files there is

161
00:08:12,580 --> 00:08:14,300
there is no

162
00:08:14,300 --> 00:08:16,159
come eat or something like that the

163
00:08:16,159 --> 00:08:19,940
first one is 3.6 megabytes so it's other

164
00:08:19,940 --> 00:08:24,409
stuff you just pull them in you don't

165
00:08:24,409 --> 00:08:26,599
you cannot see exactly why this thing

166
00:08:26,599 --> 00:08:30,470
has been done and and the reason that it

167
00:08:30,470 --> 00:08:35,589
is on so the amount of changes is

168
00:08:36,190 --> 00:08:39,349
170,000 lines which perhaps is a

169
00:08:39,349 --> 00:08:41,719
reasonable amount for a new system on

170
00:08:41,719 --> 00:08:45,500
chip but this camera has several issues

171
00:08:45,500 --> 00:08:50,209
besides the how did provide some serious

172
00:08:50,209 --> 00:08:52,820
issues were many intricate agura's bugs

173
00:08:52,820 --> 00:08:56,839
missing features and code quality here

174
00:08:56,839 --> 00:09:00,290
is just a few examples of the bugs that

175
00:09:00,290 --> 00:09:03,620
I encountered one is when you try to set

176
00:09:03,620 --> 00:09:05,390
up audio so the first thing I did when I

177
00:09:05,390 --> 00:09:08,750
want to test the microphone the audio

178
00:09:08,750 --> 00:09:12,079
audio capture is also record my file

179
00:09:12,079 --> 00:09:13,850
that love and they got a color crash

180
00:09:13,850 --> 00:09:17,180
that's because when you don't specify

181
00:09:17,180 --> 00:09:18,890
channel that on the default channel

182
00:09:18,890 --> 00:09:20,690
there is a null point and reference so

183
00:09:20,690 --> 00:09:25,820
that was very quick to fix but it's a

184
00:09:25,820 --> 00:09:28,850
bit annoying the situation was a bit

185
00:09:28,850 --> 00:09:33,290
worse with the h.264 codec the decoder

186
00:09:33,290 --> 00:09:37,730
for example it works with sample stream

187
00:09:37,730 --> 00:09:39,800
so at the sample file that has been

188
00:09:39,800 --> 00:09:42,020
perfectly encoded but if there are

189
00:09:42,020 --> 00:09:45,800
errors in the file we more likely if

190
00:09:45,800 --> 00:09:47,390
you're streaming from the network it's

191
00:09:47,390 --> 00:09:48,890
absolutely normal that you have packet

192
00:09:48,890 --> 00:09:52,940
loss so if there are packet loss this

193
00:09:52,940 --> 00:09:55,579
dream is not perfect and in that case

194
00:09:55,579 --> 00:09:57,860
you have lots of crashes because of null

195
00:09:57,860 --> 00:10:01,550
point and the references so either you

196
00:10:01,550 --> 00:10:03,860
check everything in user space before

197
00:10:03,860 --> 00:10:06,260
fiddly to the driver or you fix it into

198
00:10:06,260 --> 00:10:08,360
the driver to avoid the null pointer

199
00:10:08,360 --> 00:10:13,940
dereferences okay next next kind of

200
00:10:13,940 --> 00:10:18,410
analysis in the kernel is it's not

201
00:10:18,410 --> 00:10:22,760
complete so for example GPIO it's a very

202
00:10:22,760 --> 00:10:25,070
basic feature of any system on chip so

203
00:10:25,070 --> 00:10:25,850
they

204
00:10:25,850 --> 00:10:28,009
implemented with basic functionality but

205
00:10:28,009 --> 00:10:29,690
you don't have interrupt support for

206
00:10:29,690 --> 00:10:33,589
example so if you want to your software

207
00:10:33,589 --> 00:10:35,060
to do something when a button is pressed

208
00:10:35,060 --> 00:10:37,190
you have either to purl it continuously

209
00:10:37,190 --> 00:10:41,410
or to implement interpreting on your own

210
00:10:41,410 --> 00:10:44,690
power management is another issue

211
00:10:44,690 --> 00:10:46,790
actually it's implemented in two

212
00:10:46,790 --> 00:10:47,540
different ways

213
00:10:47,540 --> 00:10:50,420
one with a proprietary API and one with

214
00:10:50,420 --> 00:10:54,319
the linux standard api but none of them

215
00:10:54,319 --> 00:10:57,230
really work especially this with the son

216
00:10:57,230 --> 00:11:01,069
of API it's incomplete and it doesn't

217
00:11:01,069 --> 00:11:03,769
really work so if you need power

218
00:11:03,769 --> 00:11:06,230
management you have to fill in the gaps

219
00:11:06,230 --> 00:11:11,839
and make it working properly yeah let's

220
00:11:11,839 --> 00:11:14,300
have a look at code quality for a

221
00:11:14,300 --> 00:11:16,880
package theoretically might be something

222
00:11:16,880 --> 00:11:19,519
that you don't care about if you just

223
00:11:19,519 --> 00:11:22,519
download it build it use it and it

224
00:11:22,519 --> 00:11:26,060
worked perfectly so theoretically you

225
00:11:26,060 --> 00:11:28,279
don't care about what it's inside but in

226
00:11:28,279 --> 00:11:30,319
the practice you need it big in this

227
00:11:30,319 --> 00:11:31,970
case because you have missing feature

228
00:11:31,970 --> 00:11:33,410
you have back so you have to look inside

229
00:11:33,410 --> 00:11:36,529
the code and if the code is well written

230
00:11:36,529 --> 00:11:39,860
well you can quite easily make your way

231
00:11:39,860 --> 00:11:42,620
through through through the code and

232
00:11:42,620 --> 00:11:45,730
understand what it does and find back

233
00:11:45,730 --> 00:11:48,920
but in this case I'm afraid it is not

234
00:11:48,920 --> 00:11:49,790
what happens

235
00:11:49,790 --> 00:11:52,939
the code quality is very very bad when

236
00:11:52,939 --> 00:11:55,939
people matrix there are number 500 lines

237
00:11:55,939 --> 00:11:59,180
added that start with - if with our hash

238
00:11:59,180 --> 00:12:01,910
if zero so this is probably not the best

239
00:12:01,910 --> 00:12:04,970
way to remove code it doesn't work or

240
00:12:04,970 --> 00:12:09,410
something or test work so but let's view

241
00:12:09,410 --> 00:12:11,720
a couple examples which are more

242
00:12:11,720 --> 00:12:20,180
specific since 2.6 Linux has a very rich

243
00:12:20,180 --> 00:12:24,259
and an effective device driver model so

244
00:12:24,259 --> 00:12:27,110
you can basically mix and match every

245
00:12:27,110 --> 00:12:29,389
peripheral with each other as far as the

246
00:12:29,389 --> 00:12:32,660
hardware allows it to do it so it's very

247
00:12:32,660 --> 00:12:36,350
moderate but unfortunately is not what

248
00:12:36,350 --> 00:12:39,019
happens in some of the

249
00:12:39,019 --> 00:12:41,509
drivers for example this is the full

250
00:12:41,509 --> 00:12:44,449
buffer driver the filter for driver has

251
00:12:44,449 --> 00:12:47,420
this consulate so basically what it does

252
00:12:47,420 --> 00:12:50,389
is if in K config you enabled this

253
00:12:50,389 --> 00:12:54,019
display then include this dot C file and

254
00:12:54,019 --> 00:12:56,959
if you know this other display then

255
00:12:56,959 --> 00:12:58,910
include this other Godsey file and so on

256
00:12:58,910 --> 00:13:01,730
for several other display motors so this

257
00:13:01,730 --> 00:13:04,310
is because basically there is no display

258
00:13:04,310 --> 00:13:06,920
driver it's the full buffer that does

259
00:13:06,920 --> 00:13:10,730
also the display driver and so some of

260
00:13:10,730 --> 00:13:12,769
the frame buffer functions are actually

261
00:13:12,769 --> 00:13:15,529
implemented in the other dot C file

262
00:13:15,529 --> 00:13:19,759
which is which differentiates from

263
00:13:19,759 --> 00:13:21,949
oldest player to another this means for

264
00:13:21,949 --> 00:13:24,889
example you cannot reuse a standard

265
00:13:24,889 --> 00:13:27,379
display driver with this frame buffer so

266
00:13:27,379 --> 00:13:30,920
it's not modular it somewhat looks like

267
00:13:30,920 --> 00:13:35,029
from some finger design that is that

268
00:13:35,029 --> 00:13:37,129
doesn't have the need the flexible

269
00:13:37,129 --> 00:13:44,589
device driver mode of quality is with

270
00:13:44,589 --> 00:13:51,110
the h.264 codec memory allocation so it

271
00:13:51,110 --> 00:13:54,560
handles video it's quite normal than a

272
00:13:54,560 --> 00:13:59,089
that a 264 codec has needs to have

273
00:13:59,089 --> 00:14:00,740
pretty large amounts of memory

274
00:14:00,740 --> 00:14:05,689
it needs an contiguous so actually it's

275
00:14:05,689 --> 00:14:09,350
not trivial maybe to allocate contiguous

276
00:14:09,350 --> 00:14:11,420
amounts of memory but the in this case

277
00:14:11,420 --> 00:14:15,740
is done this way so in the 264 codec

278
00:14:15,740 --> 00:14:18,380
code there is this function which is

279
00:14:18,380 --> 00:14:21,230
gate ABC buffer size which shows the

280
00:14:21,230 --> 00:14:23,509
number of byte that it needs for the

281
00:14:23,509 --> 00:14:26,240
continuous buffer so you just ask you

282
00:14:26,240 --> 00:14:29,839
and it says 2.5 make lights okay this is

283
00:14:29,839 --> 00:14:31,790
not a constant this is not the defines a

284
00:14:31,790 --> 00:14:33,380
variable it's a per case but it's just a

285
00:14:33,380 --> 00:14:37,420
variable so don't it's not a constant

286
00:14:37,570 --> 00:14:41,630
okay Cody Stein compiled this

287
00:14:41,630 --> 00:14:44,330
dysfunctional get was it this function

288
00:14:44,330 --> 00:14:51,380
here gets exploited and by the enemy

289
00:14:51,380 --> 00:14:53,660
code so in the memory management

290
00:14:53,660 --> 00:14:57,260
it is this reserve notes zero function

291
00:14:57,260 --> 00:15:00,010
which is called in doing pretty early

292
00:15:00,010 --> 00:15:05,320
qll setup so it's what it does is

293
00:15:05,320 --> 00:15:08,120
Colgate ABC buffer size which is Israel

294
00:15:08,120 --> 00:15:10,700
to know how much in is to allocate so

295
00:15:10,700 --> 00:15:14,990
this means that the if we applied this

296
00:15:14,990 --> 00:15:18,350
model to all the kernel mmm got C must

297
00:15:18,350 --> 00:15:20,870
know about every single driver that

298
00:15:20,870 --> 00:15:23,360
needs novella few kilobytes of memory

299
00:15:23,360 --> 00:15:27,560
and so it's definitely not scalable and

300
00:15:27,560 --> 00:15:30,680
also it has a very practical implication

301
00:15:30,680 --> 00:15:34,610
since this code here is in booty cannot

302
00:15:34,610 --> 00:15:38,089
be built as a module so this means the

303
00:15:38,089 --> 00:15:39,500
whole driver can be built as a module

304
00:15:39,500 --> 00:15:42,290
because otherwise this function would

305
00:15:42,290 --> 00:15:44,779
not be available at boot time so the

306
00:15:44,779 --> 00:15:47,060
whole driver must be in kernel and if

307
00:15:47,060 --> 00:15:49,910
you have a bug in the driver and as I

308
00:15:49,910 --> 00:15:58,719
said we have is not possible anymore

309
00:16:01,320 --> 00:16:05,920
[Music]

310
00:16:05,920 --> 00:16:10,010
handle it approximately I do this thing

311
00:16:10,010 --> 00:16:13,070
so in my git repository started from

312
00:16:13,070 --> 00:16:16,850
26.2 5.14 so I I don't care about that

313
00:16:16,850 --> 00:16:20,020
for I wanted fixes I apply the patches

314
00:16:20,020 --> 00:16:24,709
fixing the few the few conflicts on a

315
00:16:24,709 --> 00:16:26,449
branch what I have done the drops so

316
00:16:26,449 --> 00:16:28,880
this is the pristine copy I get from the

317
00:16:28,880 --> 00:16:30,589
vendor but it's good version so I can do

318
00:16:30,589 --> 00:16:33,529
git diff and get back and whatever then

319
00:16:33,529 --> 00:16:36,750
a I have a second branch that

320
00:16:36,750 --> 00:16:41,959
why I applied fixes to the 2d kernel and

321
00:16:41,959 --> 00:16:44,399
emerging the new patches as soon as they

322
00:16:44,399 --> 00:16:47,009
are available and then I have a third

323
00:16:47,009 --> 00:16:50,060
branch where I do my development where I

324
00:16:50,060 --> 00:16:52,620
emerging stuff from the fixes branches

325
00:16:52,620 --> 00:16:55,290
so I can at any time I can let's say you

326
00:16:55,290 --> 00:16:57,029
have the pristine copy from the vendor

327
00:16:57,029 --> 00:17:00,420
is something that the vendor collect the

328
00:17:00,420 --> 00:17:04,049
bins and my own kernel this is one

329
00:17:04,049 --> 00:17:07,740
possibility to handle okay let's move to

330
00:17:07,740 --> 00:17:09,809
the next step which is the to chain so

331
00:17:09,809 --> 00:17:12,809
of course we need a to chain and it's

332
00:17:12,809 --> 00:17:15,299
obvious why if the vendor provides I can

333
00:17:15,299 --> 00:17:17,699
change so they provide the to change in

334
00:17:17,699 --> 00:17:22,230
the BSP and it's based on very odd

335
00:17:22,230 --> 00:17:24,359
components that just like the color so

336
00:17:24,359 --> 00:17:27,169
basically GCC and you see we'd see from

337
00:17:27,169 --> 00:17:31,230
2007 so there is no secrecy level

338
00:17:31,230 --> 00:17:33,929
support they are not at the latest bug

339
00:17:33,929 --> 00:17:37,049
fix release and they also supply a few

340
00:17:37,049 --> 00:17:40,470
other libraries because with some

341
00:17:40,470 --> 00:17:44,880
quickly so but this detail is so old

342
00:17:44,880 --> 00:17:47,640
that you basically cannot build several

343
00:17:47,640 --> 00:17:52,650
modern software so basically your design

344
00:17:52,650 --> 00:17:56,330
your algorithm to pick a to change a

345
00:17:56,330 --> 00:17:58,799
twist the one that they follow is first

346
00:17:58,799 --> 00:18:00,600
done use the provider to change it's too

347
00:18:00,600 --> 00:18:04,380
old it's not usable so okay you could

348
00:18:04,380 --> 00:18:07,169
use a pretty little chain as many people

349
00:18:07,169 --> 00:18:09,510
do with the mid systems because so it's

350
00:18:09,510 --> 00:18:11,520
easy you don't have to build it you're a

351
00:18:11,520 --> 00:18:15,260
big time it's easy to use it's ready

352
00:18:15,260 --> 00:18:19,650
okay but since you have color to 635 you

353
00:18:19,650 --> 00:18:21,450
need a to chain that has been built with

354
00:18:21,450 --> 00:18:25,140
kernel no later than that because other

355
00:18:25,140 --> 00:18:28,770
otherwise you might have something not

356
00:18:28,770 --> 00:18:29,549
working

357
00:18:29,549 --> 00:18:31,980
so probably the tool chain is itself

358
00:18:31,980 --> 00:18:33,690
quite old

359
00:18:33,690 --> 00:18:38,030
well actually I in some cases i to use

360
00:18:38,030 --> 00:18:42,900
pretty little chains with more than

361
00:18:42,900 --> 00:18:45,210
current headers to some extent they work

362
00:18:45,210 --> 00:18:45,860
so

363
00:18:45,860 --> 00:18:48,309
it's a risk but you might want to fight

364
00:18:48,309 --> 00:18:50,629
probably the best idea is to build the

365
00:18:50,629 --> 00:18:54,460
altar chain it's not even that difficult

366
00:18:54,460 --> 00:18:57,350
if you use the proper tools at least so

367
00:18:57,350 --> 00:18:58,940
there are many there is course to ng

368
00:18:58,940 --> 00:19:01,519
which is very powerful and flexible but

369
00:19:01,519 --> 00:19:02,960
if you want something more simple your

370
00:19:02,960 --> 00:19:04,549
build system probably does one build we

371
00:19:04,549 --> 00:19:08,119
tell them that others can build a to

372
00:19:08,119 --> 00:19:10,730
chain so you can tell it build one we

373
00:19:10,730 --> 00:19:14,659
covered color ladders to 625 and white

374
00:19:14,659 --> 00:19:18,049
note on GCC maybe a very note on GCC and

375
00:19:18,049 --> 00:19:21,049
a very modern C library will not really

376
00:19:21,049 --> 00:19:24,769
work very well but if you stick to like

377
00:19:24,769 --> 00:19:28,970
GCC for weight or similar it's probably

378
00:19:28,970 --> 00:19:33,499
going to work but that's okay so next

379
00:19:33,499 --> 00:19:37,730
the topic is booting booting in in

380
00:19:37,730 --> 00:19:40,609
embedded system is very crucial very

381
00:19:40,609 --> 00:19:44,299
critical because it's different from one

382
00:19:44,299 --> 00:19:46,119
machine to another because of the

383
00:19:46,119 --> 00:19:49,519
restrictions of software needs software

384
00:19:49,519 --> 00:19:51,710
upgrades need to somewhat interact with

385
00:19:51,710 --> 00:19:53,480
booting so it's very a very irrelevant

386
00:19:53,480 --> 00:19:56,330
matter it's very important to get it

387
00:19:56,330 --> 00:19:56,690
right

388
00:19:56,690 --> 00:20:04,359
and so in the BSP there is no bootloader

389
00:20:04,629 --> 00:20:08,029
now you would know by works no nothing

390
00:20:08,029 --> 00:20:10,340
that you probably know about there are

391
00:20:10,340 --> 00:20:13,309
some proper tribute orders you have the

392
00:20:13,309 --> 00:20:15,169
sources but they are not open source and

393
00:20:15,169 --> 00:20:16,609
they are tailored to the specific

394
00:20:16,609 --> 00:20:17,739
machine

395
00:20:17,739 --> 00:20:21,200
okay so reusing components is not enough

396
00:20:21,200 --> 00:20:24,960
so in case you have

397
00:20:24,960 --> 00:20:27,299
you have an existing rule then you want

398
00:20:27,299 --> 00:20:29,039
to reuse the same scheme well at least

399
00:20:29,039 --> 00:20:32,610
it's not straightforward so let's talk

400
00:20:32,610 --> 00:20:36,029
about beauty in detail this is about you

401
00:20:36,029 --> 00:20:39,179
can see a white stand or a bootie

402
00:20:39,179 --> 00:20:40,620
possible is no standard booting process

403
00:20:40,620 --> 00:20:44,399
but these quantities I mean the normal

404
00:20:44,399 --> 00:20:46,919
ones let's say I picked as an example

405
00:20:46,919 --> 00:20:51,840
non flesh so the the hardware itself the

406
00:20:51,840 --> 00:20:54,809
system cheap as most system of chips do

407
00:20:54,809 --> 00:20:57,630
it has a beautiful inside and so it will

408
00:20:57,630 --> 00:21:00,390
execute that code internally and that

409
00:21:00,390 --> 00:21:03,090
isn't something you cannot change and

410
00:21:03,090 --> 00:21:06,779
what it does is load as small small

411
00:21:06,779 --> 00:21:09,120
firmware into internal Ram it relates

412
00:21:09,120 --> 00:21:10,830
move because one is not is being

413
00:21:10,830 --> 00:21:14,340
initialized yet the 64 megabytes of RAM

414
00:21:14,340 --> 00:21:16,770
are not initialized because the it's

415
00:21:16,770 --> 00:21:19,679
some package but it's something that the

416
00:21:19,679 --> 00:21:21,779
system and cheap die does not know about

417
00:21:21,779 --> 00:21:27,270
so it's not initialized so this similar

418
00:21:27,270 --> 00:21:29,820
piece of code is small so if usually

419
00:21:29,820 --> 00:21:31,770
non-interactive it is it does only one

420
00:21:31,770 --> 00:21:35,429
thing that is initialize the main ram so

421
00:21:35,429 --> 00:21:37,230
you have plenty of space and then you

422
00:21:37,230 --> 00:21:40,220
know the main the main bootloader from

423
00:21:40,220 --> 00:21:44,520
from the memory itself so we you boot is

424
00:21:44,520 --> 00:21:47,580
the most widely used and it's loaded

425
00:21:47,580 --> 00:21:50,520
into DDR and then one so you would

426
00:21:50,520 --> 00:21:52,440
according to its environment variable

427
00:21:52,440 --> 00:21:56,130
and good scripts mount the in this

428
00:21:56,130 --> 00:21:58,529
example mount the UPI FS root filesystem

429
00:21:58,529 --> 00:22:00,480
loads the current from there into one

430
00:22:00,480 --> 00:22:02,399
and boots it and then the column will

431
00:22:02,399 --> 00:22:05,850
use the root file system itself so one

432
00:22:05,850 --> 00:22:09,750
of those three possibilities the one you

433
00:22:09,750 --> 00:22:12,299
can do with the standard with the boot

434
00:22:12,299 --> 00:22:13,980
loaders provided with this chip is

435
00:22:13,980 --> 00:22:18,539
actually this one below so the first

436
00:22:18,539 --> 00:22:20,490
part looks pretty similar it is so you

437
00:22:20,490 --> 00:22:22,380
have a first order this is called mangoo

438
00:22:22,380 --> 00:22:23,880
though it's just an SPL

439
00:22:23,880 --> 00:22:26,370
so we initialize this external memory

440
00:22:26,370 --> 00:22:28,590
and fetches

441
00:22:28,590 --> 00:22:31,649
something from from the flesh into that

442
00:22:31,649 --> 00:22:33,090
into there

443
00:22:33,090 --> 00:22:35,279
the second piece that gets loaded is

444
00:22:35,279 --> 00:22:36,669
called and

445
00:22:36,669 --> 00:22:39,279
he'll order but it's very different from

446
00:22:39,279 --> 00:22:43,539
reboot anything else so what it does in

447
00:22:43,539 --> 00:22:46,239
the name of booting or follow the I will

448
00:22:46,239 --> 00:22:49,809
go down it mounts a fat partition on

449
00:22:49,809 --> 00:22:52,929
NAND flash and it loads from there a

450
00:22:52,929 --> 00:22:55,090
file which is called confronted B but

451
00:22:55,090 --> 00:22:57,789
it's actually a Linux in it with a

452
00:22:57,789 --> 00:22:59,649
repellent in it from the face that's it

453
00:22:59,649 --> 00:23:03,580
it leads that and boots it and in the

454
00:23:03,580 --> 00:23:05,679
interim the first the init script does

455
00:23:05,679 --> 00:23:08,169
look in the fat partition mount of a

456
00:23:08,169 --> 00:23:10,450
petition and look there for a shell

457
00:23:10,450 --> 00:23:14,529
script to start that shell script can of

458
00:23:14,529 --> 00:23:16,419
course access fat and anything else

459
00:23:16,419 --> 00:23:20,859
other files and do anything but there is

460
00:23:20,859 --> 00:23:22,179
another possibility if you press a

461
00:23:22,179 --> 00:23:24,519
button you reboot then any pity loader

462
00:23:24,519 --> 00:23:26,409
will follow this other path path and

463
00:23:26,409 --> 00:23:29,200
just expose the fat partition as USB

464
00:23:29,200 --> 00:23:32,440
mass storage devices so that means you

465
00:23:32,440 --> 00:23:35,230
can connect it to a PC and look the

466
00:23:35,230 --> 00:23:38,200
files in the fact partition these this

467
00:23:38,200 --> 00:23:43,359
routing scheme is interesting advantage

468
00:23:43,359 --> 00:23:46,269
so it leads to very easily deploy demos

469
00:23:46,269 --> 00:23:48,609
so the debugger provides some demos

470
00:23:48,609 --> 00:23:52,450
these are a completely file a script and

471
00:23:52,450 --> 00:23:55,210
maybe something else so you just press

472
00:23:55,210 --> 00:23:57,850
the button during boot mount must Origin

473
00:23:57,850 --> 00:23:59,710
PC copy the files that have been

474
00:23:59,710 --> 00:24:02,440
provided by the vendor as a demo and you

475
00:24:02,440 --> 00:24:04,629
are removed on the dimmer ones so it's

476
00:24:04,629 --> 00:24:09,279
very easy to test the days about demo to

477
00:24:09,279 --> 00:24:12,039
test the a 264 video plugin and other

478
00:24:12,039 --> 00:24:14,350
for testing audio for testing Ethernet

479
00:24:14,350 --> 00:24:16,359
and so on it's very easy to deploy them

480
00:24:16,359 --> 00:24:19,929
also for hardware designers which maybe

481
00:24:19,929 --> 00:24:21,879
don't use Linux they use Windows so they

482
00:24:21,879 --> 00:24:25,509
they can deploy them by easily ok but it

483
00:24:25,509 --> 00:24:27,970
also has disadvantages one is it to this

484
00:24:27,970 --> 00:24:28,419
fact

485
00:24:28,419 --> 00:24:30,700
fat is absolutely unreliable especially

486
00:24:30,700 --> 00:24:34,210
on power loss and it cannot contain a

487
00:24:34,210 --> 00:24:35,739
root filesystem at all it doesn't have

488
00:24:35,739 --> 00:24:37,809
permission use your siblings and so on

489
00:24:37,809 --> 00:24:39,609
so it's not an option for your file

490
00:24:39,609 --> 00:24:43,359
system also fatties are double mint

491
00:24:43,359 --> 00:24:45,940
which is unreliable and there is a flash

492
00:24:45,940 --> 00:24:47,140
translation layer

493
00:24:47,140 --> 00:24:51,780
that allows to have somewhat reliable

494
00:24:51,780 --> 00:24:56,610
virtual partition to put felt all these

495
00:24:56,610 --> 00:24:59,920
works but it's a binary module so if

496
00:24:59,920 --> 00:25:01,360
there's a bug in there

497
00:25:01,360 --> 00:25:06,250
you can come before vendor to fix it or

498
00:25:06,250 --> 00:25:08,980
the words you're on your own and also

499
00:25:08,980 --> 00:25:10,510
this scheme does no provision for

500
00:25:10,510 --> 00:25:12,910
redundancy at all so if any of this

501
00:25:12,910 --> 00:25:16,420
component is on a its corrupted or maybe

502
00:25:16,420 --> 00:25:18,970
do remap radio you break it the device

503
00:25:18,970 --> 00:25:21,940
will not good anymore so you have to

504
00:25:21,940 --> 00:25:24,490
connect it to a PC or a flash it but if

505
00:25:24,490 --> 00:25:27,940
you are on the field or legal in the day

506
00:25:27,940 --> 00:25:32,920
it doesn't work other issues are related

507
00:25:32,920 --> 00:25:34,960
to linux stuff

508
00:25:34,960 --> 00:25:37,570
one is the system in the skin is immune

509
00:25:37,570 --> 00:25:39,730
from FS in it so effective school is

510
00:25:39,730 --> 00:25:42,850
fantastic but it's Iran so changes are

511
00:25:42,850 --> 00:25:44,800
you can change the files but the changes

512
00:25:44,800 --> 00:25:46,570
are volatile unless you save them

513
00:25:46,570 --> 00:25:47,530
somewhere else

514
00:25:47,530 --> 00:25:49,840
it also have a limited size and

515
00:25:49,840 --> 00:25:52,480
everything it contains is to be run even

516
00:25:52,480 --> 00:25:54,900
everything even think that you don't use

517
00:25:54,900 --> 00:25:57,580
sits around for the whole existence of

518
00:25:57,580 --> 00:26:00,670
the in atomic test okay you could store

519
00:26:00,670 --> 00:26:02,830
persistent changes in the fat partition

520
00:26:02,830 --> 00:26:04,720
but of course you run into the issues

521
00:26:04,720 --> 00:26:08,350
with fat has also in this component

522
00:26:08,350 --> 00:26:10,000
negative pass is a common type to the

523
00:26:10,000 --> 00:26:12,550
kernel so if you want to change how the

524
00:26:12,550 --> 00:26:14,860
color boots any parameter you cannot do

525
00:26:14,860 --> 00:26:17,500
that this is for example this is an

526
00:26:17,500 --> 00:26:19,510
issue in doing development if you want

527
00:26:19,510 --> 00:26:21,700
to mount your root filesystem over an

528
00:26:21,700 --> 00:26:24,220
effect you have to change the color

529
00:26:24,220 --> 00:26:25,630
command line and you cannot do that

530
00:26:25,630 --> 00:26:28,450
because you can wait you can but you

531
00:26:28,450 --> 00:26:30,250
have to reveal your color refresh your

532
00:26:30,250 --> 00:26:32,440
kernel and then boot and when you want

533
00:26:32,440 --> 00:26:34,420
to switch to non fresh booting you have

534
00:26:34,420 --> 00:26:36,670
to do it again so it's very

535
00:26:36,670 --> 00:26:42,010
uncomfortable ok and finally these nodes

536
00:26:42,010 --> 00:26:45,220
cannot load the kernel via TFTP which is

537
00:26:45,220 --> 00:26:46,870
another very handy thing to do when you

538
00:26:46,870 --> 00:26:48,460
are doing development if you develop in

539
00:26:48,460 --> 00:26:49,660
the color you want to test the feature

540
00:26:49,660 --> 00:26:52,720
that is not in a module then you could

541
00:26:52,720 --> 00:26:53,290
just

542
00:26:53,290 --> 00:26:54,610
well did via TFT

543
00:26:54,610 --> 00:26:57,220
be and test it very very quickly but

544
00:26:57,220 --> 00:26:59,170
it's something that you cannot do in

545
00:26:59,170 --> 00:27:02,590
this case okay so I started looking for

546
00:27:02,590 --> 00:27:04,720
alternative routing options that solve

547
00:27:04,720 --> 00:27:08,679
at least most of these issues here the

548
00:27:08,679 --> 00:27:11,010
steps that the step-by-step guide so

549
00:27:11,010 --> 00:27:15,580
first step is okay keep the system as it

550
00:27:15,580 --> 00:27:18,040
is that add a squatcher fast food plate

551
00:27:18,040 --> 00:27:21,250
system so you have a PI system that can

552
00:27:21,250 --> 00:27:23,170
be as you as large as you want but

553
00:27:23,170 --> 00:27:26,520
reasonably large as you want and it's

554
00:27:26,520 --> 00:27:29,049
efficient it doesn't keep everything

555
00:27:29,049 --> 00:27:34,720
around okay so we lose that hold but it

556
00:27:34,720 --> 00:27:38,669
has drawbacks it's read-only and also

557
00:27:38,669 --> 00:27:41,950
it's not yet possible to do atomic

558
00:27:41,950 --> 00:27:44,020
upgrades on that because it's on fact

559
00:27:44,020 --> 00:27:47,049
and so on so it's not really good

560
00:27:47,049 --> 00:27:53,290
improvement next step okay once we have

561
00:27:53,290 --> 00:27:55,690
a Linux current running we have plenty

562
00:27:55,690 --> 00:27:58,450
of options we have you di na VI FS which

563
00:27:58,450 --> 00:28:02,290
are very good for NAND flash they are

564
00:28:02,290 --> 00:28:07,049
efficient or scalable what scalable and

565
00:28:07,049 --> 00:28:10,059
well they handle bad sectors and it's a

566
00:28:10,059 --> 00:28:14,230
proper UNIX filesystem so one idea is

567
00:28:14,230 --> 00:28:16,240
this one you just restrict the fat

568
00:28:16,240 --> 00:28:20,799
partition to be as small as enough to

569
00:28:20,799 --> 00:28:24,100
contain the color and then you tweak the

570
00:28:24,100 --> 00:28:28,240
image manifest to not mount not look for

571
00:28:28,240 --> 00:28:31,179
a shell speed but to mount your ubi FS

572
00:28:31,179 --> 00:28:34,679
neutral system so in that case you have

573
00:28:34,679 --> 00:28:38,020
everything that is I think most of the

574
00:28:38,020 --> 00:28:39,100
things that are relevant for your

575
00:28:39,100 --> 00:28:41,110
product inside this where they are safe

576
00:28:41,110 --> 00:28:43,240
and you can do what Annika braids and so

577
00:28:43,240 --> 00:28:44,820
on

578
00:28:44,820 --> 00:28:49,059
on the other side you lose a USB

579
00:28:49,059 --> 00:28:51,580
mass-storage availability so at least

580
00:28:51,580 --> 00:28:54,549
you can still use USB mass-storage to

581
00:28:54,549 --> 00:28:57,790
upgrade but only the basically Korea and

582
00:28:57,790 --> 00:29:00,820
India trauma face for the movie staff

583
00:29:00,820 --> 00:29:04,540
you have to do it with other means so

584
00:29:04,540 --> 00:29:07,340
basically what we did is the

585
00:29:07,340 --> 00:29:09,980
riah is now a trophy to the minimum size

586
00:29:09,980 --> 00:29:13,120
and everything order does not do its

587
00:29:13,120 --> 00:29:16,520
specific feature which is upgrading the

588
00:29:16,520 --> 00:29:20,780
USB cable for demos so we lose the most

589
00:29:20,780 --> 00:29:22,820
of the advantages of this scheme so

590
00:29:22,820 --> 00:29:25,250
let's get rid of the scheme at all as

591
00:29:25,250 --> 00:29:26,990
far as possible so leave the fat

592
00:29:26,990 --> 00:29:28,940
partition remove and Vicky loader it is

593
00:29:28,940 --> 00:29:31,430
possible because member order can just

594
00:29:31,430 --> 00:29:33,860
load a linux image file not as that

595
00:29:33,860 --> 00:29:36,440
image but an image file at address 0 and

596
00:29:36,440 --> 00:29:40,370
good for it so you can have your Linux

597
00:29:40,370 --> 00:29:42,920
image passing from FS the wackyland and

598
00:29:42,920 --> 00:29:46,370
it will be loaded and it will mount your

599
00:29:46,370 --> 00:29:49,460
UV ifs so you have less components on it

600
00:29:49,460 --> 00:29:54,520
so less bugs less boot time is fun ok so

601
00:29:54,520 --> 00:29:58,910
the website is your kernel is on Berlin

602
00:29:58,910 --> 00:30:04,070
so it's not in a safe place and so you

603
00:30:04,070 --> 00:30:07,190
need to at least provide space for two

604
00:30:07,190 --> 00:30:10,340
copies of the kernel in case one of them

605
00:30:10,340 --> 00:30:12,590
face but then the loader does not

606
00:30:12,590 --> 00:30:15,890
directly handle redundancies or you

607
00:30:15,890 --> 00:30:19,310
could click that and you could use some

608
00:30:19,310 --> 00:30:21,500
different scheme abusing can exec to

609
00:30:21,500 --> 00:30:23,270
load another color for a safe area and

610
00:30:23,270 --> 00:30:25,220
ubi and so on so there are different

611
00:30:25,220 --> 00:30:27,340
variations several variations you can do

612
00:30:27,340 --> 00:30:33,470
that even elaborate on that actually the

613
00:30:33,470 --> 00:30:36,650
final step would be to put your boot to

614
00:30:36,650 --> 00:30:38,660
this situation this will be probably the

615
00:30:38,660 --> 00:30:42,260
best because in this case what you can

616
00:30:42,260 --> 00:30:46,160
keep with the SPL it's quite ok except

617
00:30:46,160 --> 00:30:49,670
it's not redundant but in this scheme

618
00:30:49,670 --> 00:30:52,280
you basically have all the possibilities

619
00:30:52,280 --> 00:30:55,340
that you know in other method system so

620
00:30:55,340 --> 00:30:58,030
if you have other boards using you would

621
00:30:58,030 --> 00:31:00,980
you can just use the same scheme do the

622
00:31:00,980 --> 00:31:03,590
same things and save a lot of time while

623
00:31:03,590 --> 00:31:07,130
having more features and firstly if you

624
00:31:07,130 --> 00:31:10,160
ask your boss to do this activity to

625
00:31:10,160 --> 00:31:12,260
plan the activity you have to keep it to

626
00:31:12,260 --> 00:31:15,810
account it enough time to market

627
00:31:15,810 --> 00:31:18,240
and unless you're used to this kind of

628
00:31:18,240 --> 00:31:20,700
activity it's very difficult to

629
00:31:20,700 --> 00:31:22,790
understand how much time it will take

630
00:31:22,790 --> 00:31:26,880
okay so I'm afraid I didn't do this so I

631
00:31:26,880 --> 00:31:28,860
don't have you put for this chip to

632
00:31:28,860 --> 00:31:33,830
present okay next topic is about tools

633
00:31:33,830 --> 00:31:37,700
actually in the IDF DSP that I presented

634
00:31:37,700 --> 00:31:40,620
at the beginning there are no tools if

635
00:31:40,620 --> 00:31:42,600
you noticed that's because it would be

636
00:31:42,600 --> 00:31:45,350
great if you could just work with

637
00:31:45,350 --> 00:31:48,480
standard tools open source stuff without

638
00:31:48,480 --> 00:31:51,900
having to alight on anything that is the

639
00:31:51,900 --> 00:32:05,190
vendor specific sorry actually system

640
00:32:05,190 --> 00:32:09,780
vendors tend to have a boot ROM that

641
00:32:09,780 --> 00:32:12,690
speaks a proprietary protocol so you

642
00:32:12,690 --> 00:32:15,330
need a specific tool to interact with

643
00:32:15,330 --> 00:32:18,060
the chip when there is no filler no

644
00:32:18,060 --> 00:32:20,550
software nothing on your flesh so at

645
00:32:20,550 --> 00:32:24,330
least for development and for production

646
00:32:24,330 --> 00:32:27,390
probably you need to interact with the

647
00:32:27,390 --> 00:32:30,060
chip without anything any piece of

648
00:32:30,060 --> 00:32:32,190
software stored in the memories so you

649
00:32:32,190 --> 00:32:34,170
need to store the first piece of

650
00:32:34,170 --> 00:32:37,320
software there and it's also useful for

651
00:32:37,320 --> 00:32:41,520
for development so basically you need

652
00:32:41,520 --> 00:32:45,480
some tools and so what you get is this

653
00:32:45,480 --> 00:32:48,840
one which is you get a tool that

654
00:32:48,840 --> 00:32:52,880
basically to connect via USB to the

655
00:32:52,880 --> 00:32:56,640
system on chip interacts with the boot

656
00:32:56,640 --> 00:33:00,270
ROM and it can flash several types of

657
00:33:00,270 --> 00:33:02,820
memory NAND nor it can also put your

658
00:33:02,820 --> 00:33:04,650
stuff environment executive actively so

659
00:33:04,650 --> 00:33:07,620
it's pretty flexible and USB very handy

660
00:33:07,620 --> 00:33:13,260
so it's quite good at least the design

661
00:33:13,260 --> 00:33:16,659
is quite good the software itself is

662
00:33:16,659 --> 00:33:18,639
well it works but it's for winners only

663
00:33:18,639 --> 00:33:21,729
so you need a Windows machine addition

664
00:33:21,729 --> 00:33:23,529
to your Linux machine just for this tool

665
00:33:23,529 --> 00:33:26,320
and it's completely proprietary there

666
00:33:26,320 --> 00:33:29,369
are no salt no sauces so you cannot

667
00:33:29,369 --> 00:33:32,049
modify extended ported to Linux or

668
00:33:32,049 --> 00:33:35,019
anything and it's a GUI software so you

669
00:33:35,019 --> 00:33:37,049
cannot put it in your script to automate

670
00:33:37,049 --> 00:33:41,529
any goal any task that has to do further

671
00:33:41,529 --> 00:33:42,869
steps

672
00:33:42,869 --> 00:33:46,570
finally the the protocol between the

673
00:33:46,570 --> 00:33:49,029
boot rom and the PC is not documented so

674
00:33:49,029 --> 00:33:51,249
this doesn't know how to write your own

675
00:33:51,249 --> 00:33:54,909
tool basically you look to this Tootie's

676
00:33:54,909 --> 00:33:57,009
tool unless you want to reverse-engineer

677
00:33:57,009 --> 00:34:02,409
the protocol or the tool itself another

678
00:34:02,409 --> 00:34:06,729
peculiarity of this tool is what it does

679
00:34:06,729 --> 00:34:11,289
is it it means a sort of partition table

680
00:34:11,289 --> 00:34:14,530
in one flesh it's a usual because with

681
00:34:14,530 --> 00:34:17,010
partition tables on hard drives and

682
00:34:17,010 --> 00:34:21,639
similar su SD cards and USB drives but

683
00:34:21,639 --> 00:34:24,480
in them flash there is no standard for

684
00:34:24,480 --> 00:34:28,059
having partition tables so it might be a

685
00:34:28,059 --> 00:34:30,399
good idea because it actually allows to

686
00:34:30,399 --> 00:34:33,879
organize data and device the scribe

687
00:34:33,879 --> 00:34:38,379
itself but ok this is done but without

688
00:34:38,379 --> 00:34:40,409
any using any standard so it's a

689
00:34:40,409 --> 00:34:43,179
proprietary scheme that is quite

690
00:34:43,179 --> 00:34:46,989
thorough to how the other tools work so

691
00:34:46,989 --> 00:34:50,230
basically cv2 enforces this partitioning

692
00:34:50,230 --> 00:34:52,449
scheme you cannot get rid of the scheme

693
00:34:52,449 --> 00:34:56,859
itself it doesn't hurt very much but you

694
00:34:56,859 --> 00:34:59,079
just have to know it so basically this

695
00:34:59,079 --> 00:35:02,890
is where it stores close to the main

696
00:35:02,890 --> 00:35:06,490
rotor the list of where you can find the

697
00:35:06,490 --> 00:35:08,950
next framer and at which address in

698
00:35:08,950 --> 00:35:15,369
memory have to load it so another topic

699
00:35:15,369 --> 00:35:20,900
here is customer support so if you had

700
00:35:20,900 --> 00:35:24,230
see perfect so see with a perfect BSP

701
00:35:24,230 --> 00:35:26,840
you'd only customer support but I don't

702
00:35:26,840 --> 00:35:28,820
think this is realistic even in the best

703
00:35:28,820 --> 00:35:30,770
cases so you need some customer support

704
00:35:30,770 --> 00:35:33,740
at some times and Jerry speaking with

705
00:35:33,740 --> 00:35:35,870
system and chips and vendors in general

706
00:35:35,870 --> 00:35:37,460
there are several issues that can happen

707
00:35:37,460 --> 00:35:41,120
with customer support that make it more

708
00:35:41,120 --> 00:35:44,420
or less effective but what is what

709
00:35:44,420 --> 00:35:46,970
matters if you had stand on mailing code

710
00:35:46,970 --> 00:35:49,220
you are not you're gonna have to stick

711
00:35:49,220 --> 00:35:51,860
to the vendor you can have support from

712
00:35:51,860 --> 00:35:53,980
the community from the peripheral of

713
00:35:53,980 --> 00:35:57,200
vendors of commercial support providers

714
00:35:57,200 --> 00:35:58,940
and so on so you can have many

715
00:35:58,940 --> 00:36:02,990
possibilities while if you have such as

716
00:36:02,990 --> 00:36:05,840
in this case you have the sources but

717
00:36:05,840 --> 00:36:07,910
it's not in the public and it's a very

718
00:36:07,910 --> 00:36:10,130
odd corner almost nobody will support

719
00:36:10,130 --> 00:36:10,430
you

720
00:36:10,430 --> 00:36:14,420
except the value in yourself and if you

721
00:36:14,420 --> 00:36:16,760
don't even have the sources such as for

722
00:36:16,760 --> 00:36:19,220
the tools all for the house itself it's

723
00:36:19,220 --> 00:36:21,050
all go vendor so you have to rely on

724
00:36:21,050 --> 00:36:24,980
them and something that can be inside in

725
00:36:24,980 --> 00:36:27,710
the customer support is well the

726
00:36:27,710 --> 00:36:30,170
engineer in the vendor company who knows

727
00:36:30,170 --> 00:36:32,510
the answer is not directly reachable

728
00:36:32,510 --> 00:36:36,500
there are since man customer support

729
00:36:36,500 --> 00:36:41,300
department is on the filter so it might

730
00:36:41,300 --> 00:36:44,330
be difficult to reach the person who

731
00:36:44,330 --> 00:36:46,760
knows the answer also a responsiveness

732
00:36:46,760 --> 00:36:49,130
is an issue some our responses are not

733
00:36:49,130 --> 00:36:52,100
and you might have times the issues if

734
00:36:52,100 --> 00:36:55,010
you are in Europe and customer support

735
00:36:55,010 --> 00:36:57,770
is in the USA or in China you will have

736
00:36:57,770 --> 00:37:01,960
a one-day delay at each iteration so

737
00:37:01,960 --> 00:37:05,000
actually in my case for this cheap

738
00:37:05,000 --> 00:37:07,340
customer support is quite responsive so

739
00:37:07,340 --> 00:37:10,970
you get a reply the next day that is

740
00:37:10,970 --> 00:37:12,620
sometimes they saw the issues on

741
00:37:12,620 --> 00:37:14,840
Thursday not so this is a good example

742
00:37:14,840 --> 00:37:17,090
so I wrote an email say the proprietor

743
00:37:17,090 --> 00:37:18,920
who doesn't work on my PC and the

744
00:37:18,920 --> 00:37:21,760
replies was it also mine successful shot

745
00:37:21,760 --> 00:37:25,640
okay so next lady next email okay online

746
00:37:25,640 --> 00:37:26,750
it doesn't work

747
00:37:26,750 --> 00:37:29,330
we have some logs from from the software

748
00:37:29,330 --> 00:37:31,130
so I can send them to you I can debug it

749
00:37:31,130 --> 00:37:34,220
and the replies was I'm sorry

750
00:37:34,220 --> 00:37:36,860
other logging would not be practical so

751
00:37:36,860 --> 00:37:38,630
I don't know exactly what it means but

752
00:37:38,630 --> 00:37:41,720
basically I had to saw this on my own in

753
00:37:41,720 --> 00:37:43,220
other cases they saw the issue so we

754
00:37:43,220 --> 00:37:51,459
need like a 50 50 50 situation okay so

755
00:37:51,820 --> 00:37:55,610
let's draw some conclusions the the

756
00:37:55,610 --> 00:37:58,160
resulting and the final result on the

757
00:37:58,160 --> 00:38:00,200
product to be developed is the polymer

758
00:38:00,200 --> 00:38:05,210
works but the other quality is less than

759
00:38:05,210 --> 00:38:08,540
it should it would have been with with

760
00:38:08,540 --> 00:38:09,950
another system and chip with good

761
00:38:09,950 --> 00:38:14,210
support so it has issues that shouldn't

762
00:38:14,210 --> 00:38:16,970
be there also it doesn't exploit

763
00:38:16,970 --> 00:38:21,320
completely well the hardware and so the

764
00:38:21,320 --> 00:38:23,390
hammer would a lot to do much better but

765
00:38:23,390 --> 00:38:26,630
the software is an obstacle we spend a

766
00:38:26,630 --> 00:38:28,670
lot of time as you as you might have

767
00:38:28,670 --> 00:38:31,220
imagined in supporting ourselves fixing

768
00:38:31,220 --> 00:38:34,310
bugs filling in the gaps and then the

769
00:38:34,310 --> 00:38:37,640
booting mechanism that I showed you so a

770
00:38:37,640 --> 00:38:40,400
lot of time spent is a cost and is

771
00:38:40,400 --> 00:38:42,890
there's impact or time to market so it's

772
00:38:42,890 --> 00:38:46,490
bad for business or for everybody and so

773
00:38:46,490 --> 00:38:49,520
I started wondering what what could be

774
00:38:49,520 --> 00:38:51,830
done to improve the situation and okay

775
00:38:51,830 --> 00:38:53,750
what can I do to improve the situation

776
00:38:53,750 --> 00:38:57,200
as well as analytics engineer what I can

777
00:38:57,200 --> 00:39:02,680
do what I should do is try to assess any

778
00:39:02,680 --> 00:39:06,380
potential problem any obstacle as early

779
00:39:06,380 --> 00:39:08,400
as possible so

780
00:39:08,400 --> 00:39:11,759
especially with respect to to beauty and

781
00:39:11,759 --> 00:39:14,729
to hardware support the drivers and so

782
00:39:14,729 --> 00:39:19,130
on test them as soon as possible try to

783
00:39:19,130 --> 00:39:21,539
understand any possible issue as soon as

784
00:39:21,539 --> 00:39:24,989
possible so if it's enough you can

785
00:39:24,989 --> 00:39:26,519
influence the the choice of four

786
00:39:26,519 --> 00:39:32,190
component or another also as a hobbyist

787
00:39:32,190 --> 00:39:35,099
always hacker there is something you can

788
00:39:35,099 --> 00:39:38,009
do like if you want to buy buy one with

789
00:39:38,009 --> 00:39:41,940
good support so ok but I'm afraid as a

790
00:39:41,940 --> 00:39:43,619
single hobbyist it will not move the

791
00:39:43,619 --> 00:39:47,369
market with your by choice unless you

792
00:39:47,369 --> 00:39:49,499
really build something that is so viral

793
00:39:49,499 --> 00:39:51,569
that thousands of people will want to do

794
00:39:51,569 --> 00:39:54,359
it but ok that congressional cooperation

795
00:39:54,359 --> 00:39:59,339
in that case nothing you could do and

796
00:39:59,339 --> 00:40:01,589
that would be very much appreciated is

797
00:40:01,589 --> 00:40:05,400
all yours leaves and start improving

798
00:40:05,400 --> 00:40:08,279
support and mayline it so it happened

799
00:40:08,279 --> 00:40:09,719
without the system and chips like the

800
00:40:09,719 --> 00:40:12,150
over your family for example and the

801
00:40:12,150 --> 00:40:15,329
result is made so but I'm afraid this is

802
00:40:15,329 --> 00:40:21,360
not work for a couple days absolutely so

803
00:40:21,360 --> 00:40:23,059
[Music]

804
00:40:23,059 --> 00:40:26,160
who is able to really change the thing

805
00:40:26,160 --> 00:40:28,049
is of course tango because it's their

806
00:40:28,049 --> 00:40:31,069
choice to provide a good or a bad PSP so

807
00:40:31,069 --> 00:40:33,930
this is a basic efficient good DSP means

808
00:40:33,930 --> 00:40:35,039
happy engineer

809
00:40:35,039 --> 00:40:36,779
so the help engineer will make good

810
00:40:36,779 --> 00:40:38,460
products and good products will sell

811
00:40:38,460 --> 00:40:43,950
more this is somatogenic rule but not

812
00:40:43,950 --> 00:40:46,950
applies but it is generally not very

813
00:40:46,950 --> 00:40:50,309
well perceived at some at some

814
00:40:50,309 --> 00:40:55,380
high-level decision points let's go

815
00:40:55,380 --> 00:40:57,710
through some more practical details so

816
00:40:57,710 --> 00:41:02,400
don't we it will take less time to put

817
00:41:02,400 --> 00:41:05,089
you boot to your device than to

818
00:41:05,089 --> 00:41:07,680
implement your own bootloader and when

819
00:41:07,680 --> 00:41:09,779
you're done with that you will get a lot

820
00:41:09,779 --> 00:41:16,049
more features so anything and if you

821
00:41:16,049 --> 00:41:19,040
malign it people will improve it

822
00:41:19,040 --> 00:41:20,990
basically it's for free for you people

823
00:41:20,990 --> 00:41:23,300
will fix your box in the corner will add

824
00:41:23,300 --> 00:41:27,140
features without even you to to have to

825
00:41:27,140 --> 00:41:32,240
move one finger okay so so try to push

826
00:41:32,240 --> 00:41:34,700
go to my line is definitely the best

827
00:41:34,700 --> 00:41:38,780
thing for long-term software support for

828
00:41:38,780 --> 00:41:40,910
your device so if you do that well it's

829
00:41:40,910 --> 00:41:43,790
expensive it takes time and it takes

830
00:41:43,790 --> 00:41:49,040
some skill people but in the long term

831
00:41:49,040 --> 00:41:51,290
it's rewarding the products that are

832
00:41:51,290 --> 00:41:57,770
built on your chip will be better the

833
00:41:57,770 --> 00:42:00,920
community so if it's already doing that

834
00:42:00,920 --> 00:42:03,170
but also software support let your

835
00:42:03,170 --> 00:42:06,290
engineers reply to questions on public

836
00:42:06,290 --> 00:42:11,320
mailing list on IRC on public Channel so

837
00:42:11,320 --> 00:42:14,000
everybody benefits if I look for a

838
00:42:14,000 --> 00:42:15,440
question it's probably already been

839
00:42:15,440 --> 00:42:17,420
answered somewhere else I don't need to

840
00:42:17,420 --> 00:42:20,000
wait for the next day and other people

841
00:42:20,000 --> 00:42:23,030
can improve the answer and your

842
00:42:23,030 --> 00:42:24,620
engineers will not have to reply to the

843
00:42:24,620 --> 00:42:26,590
same question to ten different customers

844
00:42:26,590 --> 00:42:31,340
and also making cheap boards that are a

845
00:42:31,340 --> 00:42:34,010
hacker maker friendly like Novus berry

846
00:42:34,010 --> 00:42:38,000
pie and bigger go back and so they sell

847
00:42:38,000 --> 00:42:41,780
a lot of a lot of chips and they they

848
00:42:41,780 --> 00:42:44,750
allow a system-on-chip to be easier to

849
00:42:44,750 --> 00:42:47,000
use for real talk for real products that

850
00:42:47,000 --> 00:42:50,570
are based on custom hardware I'm afraid

851
00:42:50,570 --> 00:42:52,400
in this case it would be pretty hard

852
00:42:52,400 --> 00:42:55,610
because the chip is really slow compared

853
00:42:55,610 --> 00:42:58,100
to a hacker fill the board that you can

854
00:42:58,100 --> 00:43:01,430
find around so it will be very difficult

855
00:43:01,430 --> 00:43:04,010
but if you have even a little more CPU

856
00:43:04,010 --> 00:43:05,900
power or some specific features that are

857
00:43:05,900 --> 00:43:08,900
the other chief to not have this could

858
00:43:08,900 --> 00:43:12,230
really be a way to allow people to start

859
00:43:12,230 --> 00:43:13,630
hacking on your software and

860
00:43:13,630 --> 00:43:16,100
contributing to it making it a little

861
00:43:16,100 --> 00:43:21,320
better so okay I hope these these will

862
00:43:21,320 --> 00:43:25,070
happen to some vendors at some point it

863
00:43:25,070 --> 00:43:26,800
happened in the past to some vendors so

864
00:43:26,800 --> 00:43:28,990
that is hope

865
00:43:28,990 --> 00:43:32,940
okay that's all yes question

866
00:43:32,940 --> 00:43:41,770
okay I think the man was first so the

867
00:43:41,770 --> 00:43:44,290
question is do you have an opinion about

868
00:43:44,290 --> 00:43:47,470
which vendor is best well I don't know

869
00:43:47,470 --> 00:43:49,750
what the guys and I definitely not have

870
00:43:49,750 --> 00:43:52,800
a complete view of the market but

871
00:43:52,800 --> 00:43:57,760
basically just go to the latest colonel

872
00:43:57,760 --> 00:44:02,290
and check with chips are supported about

873
00:44:02,290 --> 00:44:04,089
the bidding process the u-boot

874
00:44:04,089 --> 00:44:12,339
substation check that for this chip

875
00:44:12,339 --> 00:44:15,460
sorry I have seen in the past most

876
00:44:15,460 --> 00:44:18,609
vendors provide you boot maybe it's

877
00:44:18,609 --> 00:44:20,560
already route it's not in a line but

878
00:44:20,560 --> 00:44:22,390
it's to do you would say it's still a

879
00:44:22,390 --> 00:44:25,359
standard component so five years old you

880
00:44:25,359 --> 00:44:28,320
would already does a lot of things and

881
00:44:28,320 --> 00:44:35,109
so it's better than nothing my question

882
00:44:35,109 --> 00:44:37,680
would be why would you choose such a

883
00:44:37,680 --> 00:44:40,480
chip with the crappy software support

884
00:44:40,480 --> 00:44:46,780
it's not 2007 anymore yeah question is

885
00:44:46,780 --> 00:44:48,220
why did you choose this one another

886
00:44:48,220 --> 00:44:51,130
other one because software is not the

887
00:44:51,130 --> 00:44:52,930
only component there is also a girl and

888
00:44:52,930 --> 00:44:58,330
cost okay so I think yeah it was cheap

889
00:44:58,330 --> 00:45:03,609
yeah okay

890
00:45:03,609 --> 00:45:06,839
any other question

891
00:45:21,770 --> 00:45:24,900
so the curse is it's a problem to for

892
00:45:24,900 --> 00:45:43,020
the vendors okay so what he said

893
00:45:43,020 --> 00:45:45,630
it's a problem very much male I mean

894
00:45:45,630 --> 00:45:49,050
there could soft wear support actually

895
00:45:49,050 --> 00:45:52,170
it is not money at all of course so they

896
00:45:52,170 --> 00:45:55,680
can choose and it takes time to do it it

897
00:45:55,680 --> 00:45:58,980
takes money because people have to work

898
00:45:58,980 --> 00:46:00,780
on that it takes more time that

899
00:46:00,780 --> 00:46:02,790
developing bad software a good software

900
00:46:02,790 --> 00:46:04,550
is more expensive than that software so

901
00:46:04,550 --> 00:46:09,450
they can just send the same man and says

902
00:46:09,450 --> 00:46:15,540
there is Linux so it's that is Linux but

903
00:46:15,540 --> 00:46:17,490
it's a little bit more different to

904
00:46:17,490 --> 00:46:21,510
understand the code quality so we have

905
00:46:21,510 --> 00:46:25,230
four so that some vendors do take like

906
00:46:25,230 --> 00:46:27,750
there's possibility of doing the lining

907
00:46:27,750 --> 00:46:29,849
and the advantages some others they

908
00:46:29,849 --> 00:46:33,089
don't do the investment that's that's

909
00:46:33,089 --> 00:46:44,819
what happens sorry well I feel they are

910
00:46:44,819 --> 00:46:52,349
a bit short-sighted okay mmm you should

911
00:46:52,349 --> 00:46:52,859
ask them

912
00:46:52,859 --> 00:46:58,069
I'm sorry yeah

913
00:47:04,390 --> 00:47:07,420
okay so question is did you find any

914
00:47:07,420 --> 00:47:09,920
relationship between the quality of

915
00:47:09,920 --> 00:47:11,930
software and the quality of hardware so

916
00:47:11,930 --> 00:47:13,580
it backs in the hardware and so on

917
00:47:13,580 --> 00:47:16,070
I'm not a hugger designer but I work

918
00:47:16,070 --> 00:47:18,920
with the hundreds on you so the Harvard

919
00:47:18,920 --> 00:47:23,270
general works quite well we have a we

920
00:47:23,270 --> 00:47:27,550
have a couple of problems but although

921
00:47:27,550 --> 00:47:31,220
nothing really big so no the hardware

922
00:47:31,220 --> 00:47:35,660
does not show big problems so it's very

923
00:47:35,660 --> 00:47:38,089
unrelated of course the people who do

924
00:47:38,089 --> 00:47:39,770
the other and people the software are

925
00:47:39,770 --> 00:47:41,869
very different and maybe also their

926
00:47:41,869 --> 00:48:08,650
bosses so the approach is different so

927
00:48:08,650 --> 00:48:23,470
is there some marketing material ok if

928
00:48:23,470 --> 00:48:27,920
the issues I had not much really I don't

929
00:48:27,920 --> 00:48:31,750
have access to marketing and high level

930
00:48:31,750 --> 00:48:37,700
people have access to engineers who

931
00:48:37,700 --> 00:48:40,390
provide support

932
00:48:40,910 --> 00:48:44,570
no I didn't I might I might send a link

933
00:48:44,570 --> 00:48:54,020
to to this right you know good for

934
00:48:54,020 --> 00:48:58,010
Windows version X sticker on it some

935
00:48:58,010 --> 00:48:59,720
sort of marketing effort you know sort

936
00:48:59,720 --> 00:49:02,630
of guaranteed main nine minutes and some

937
00:49:02,630 --> 00:49:05,180
logo that start to move for market

938
00:49:05,180 --> 00:49:07,160
because you know that's something you

939
00:49:07,160 --> 00:49:10,670
can point to a marketing guy to say well

940
00:49:10,670 --> 00:49:13,280
your competitor has guaranteed main line

941
00:49:13,280 --> 00:49:15,360
Linux yeah

942
00:49:15,360 --> 00:49:18,810
why do you think that could make a

943
00:49:18,810 --> 00:49:20,730
difference well that's very interesting

944
00:49:20,730 --> 00:49:24,480
for web media so question is do you

945
00:49:24,480 --> 00:49:27,300
think that something could change if we

946
00:49:27,300 --> 00:49:32,490
had some sort of logo like it's Linux

947
00:49:32,490 --> 00:49:34,670
mayline compliant or something like that

948
00:49:34,670 --> 00:49:39,660
like the words with Windows stuff well

949
00:49:39,660 --> 00:49:42,150
probably it could improve situation so

950
00:49:42,150 --> 00:49:44,460
if there is something like standardized

951
00:49:44,460 --> 00:49:48,420
by Madinah condition or something so you

952
00:49:48,420 --> 00:49:51,300
can put a logo saying this is in may

953
00:49:51,300 --> 00:49:53,820
lives or good quality or there are the

954
00:49:53,820 --> 00:49:58,110
sources so some not so good quality yes

955
00:49:58,110 --> 00:50:03,750
it might be good I cannot say if it will

956
00:50:03,750 --> 00:50:07,170
would move the buy decision but it would

957
00:50:07,170 --> 00:50:11,960
be it could be a good

958
00:50:20,080 --> 00:50:30,730
[Applause]

