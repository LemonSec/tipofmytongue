1
00:02:16,410 --> 00:02:20,560
and it's okay I mean the real stuff is

2
00:02:20,560 --> 00:02:22,569
just going to start now you didn't miss

3
00:02:22,569 --> 00:02:23,489
anything

4
00:02:23,489 --> 00:02:26,920
then it really works just as pulling

5
00:02:26,920 --> 00:02:29,200
really does so at anytime during the

6
00:02:29,200 --> 00:02:30,819
connection you can ask Jones for

7
00:02:30,819 --> 00:02:32,590
information it will return a snapshot of

8
00:02:32,590 --> 00:02:34,209
whatever is happening in there so how

9
00:02:34,209 --> 00:02:36,280
many packets were sent was the what's

10
00:02:36,280 --> 00:02:38,049
the current state of eyes detail s all

11
00:02:38,049 --> 00:02:39,850
those kind of things and if you are

12
00:02:39,850 --> 00:02:41,680
familiar enough with all of T of those

13
00:02:41,680 --> 00:02:42,970
things you can have a look at those

14
00:02:42,970 --> 00:02:44,590
snapshot maybe one or one or more

15
00:02:44,590 --> 00:02:46,510
snapshots in time to figure out what's

16
00:02:46,510 --> 00:02:48,880
going wrong which of course is far from

17
00:02:48,880 --> 00:02:50,950
the ideal solution I mean this is just a

18
00:02:50,950 --> 00:02:53,170
quick view about this information is

19
00:02:53,170 --> 00:02:54,849
returned so it's split in different

20
00:02:54,849 --> 00:02:56,260
parts that you can actually study

21
00:02:56,260 --> 00:02:58,930
different pieces of the what's happening

22
00:02:58,930 --> 00:03:01,000
what would be more interesting is that

23
00:03:01,000 --> 00:03:02,560
kind of an a synchronous approach so

24
00:03:02,560 --> 00:03:04,000
something where you actually Jones

25
00:03:04,000 --> 00:03:05,950
notifies you in real time about whatever

26
00:03:05,950 --> 00:03:07,630
is happening either within the core

27
00:03:07,630 --> 00:03:09,459
within different plugins which is

28
00:03:09,459 --> 00:03:11,980
actually what we started working on some

29
00:03:11,980 --> 00:03:14,079
time ago and we call them even Tendler

30
00:03:14,079 --> 00:03:16,389
so basically all the companies can

31
00:03:16,389 --> 00:03:18,190
generate demands and there is an

32
00:03:18,190 --> 00:03:19,989
internal mechanism within Janus that

33
00:03:19,989 --> 00:03:22,060
then broadcasts these events to

34
00:03:22,060 --> 00:03:24,220
different new plugins within channels

35
00:03:24,220 --> 00:03:25,810
that can then handle these events in

36
00:03:25,810 --> 00:03:28,209
different ways and so as we'll see later

37
00:03:28,209 --> 00:03:30,040
you can use these plugins for different

38
00:03:30,040 --> 00:03:31,630
things so one plug-in may save to a

39
00:03:31,630 --> 00:03:33,250
database when other plugins you may use

40
00:03:33,250 --> 00:03:34,720
for different things and so on

41
00:03:34,720 --> 00:03:35,959
the idea is that

42
00:03:35,959 --> 00:03:37,940
it's not the event tenders per se that

43
00:03:37,940 --> 00:03:39,560
provide the troubleshooting they just

44
00:03:39,560 --> 00:03:41,420
provide you with the means to actually

45
00:03:41,420 --> 00:03:43,819
either integrate with existing platform

46
00:03:43,819 --> 00:03:45,560
so do the stuff yourself in order to do

47
00:03:45,560 --> 00:03:47,420
something more creative and I also

48
00:03:47,420 --> 00:03:49,549
talked a bit about the sample event

49
00:03:49,549 --> 00:03:50,870
ender that we implemented in the

50
00:03:50,870 --> 00:03:52,519
meanwhile and so the idea is that

51
00:03:52,519 --> 00:03:54,230
internally it pretty much works this way

52
00:03:54,230 --> 00:03:56,480
so Janos generates an event there is an

53
00:03:56,480 --> 00:03:58,730
event manager within Janos that relays

54
00:03:58,730 --> 00:04:00,530
this event world the plugins that are

55
00:04:00,530 --> 00:04:02,269
registered really in Janus to receive

56
00:04:02,269 --> 00:04:03,980
these events and then each event can do

57
00:04:03,980 --> 00:04:05,629
whatever it needs to do with this event

58
00:04:05,629 --> 00:04:08,420
so one may just from at the event to

59
00:04:08,420 --> 00:04:10,790
JSON and send it via HTTP to something

60
00:04:10,790 --> 00:04:13,010
else for processing or it may save to

61
00:04:13,010 --> 00:04:15,230
database or it may populate a CDR of

62
00:04:15,230 --> 00:04:16,789
some sort or whatever you need it to do

63
00:04:16,789 --> 00:04:18,829
I mean it really is up to what you

64
00:04:18,829 --> 00:04:21,589
implement in your own plugin there and

65
00:04:21,589 --> 00:04:22,910
there are different types of events that

66
00:04:22,910 --> 00:04:25,039
you can generate and subscribe to really

67
00:04:25,039 --> 00:04:26,630
much pretty much depending on what you

68
00:04:26,630 --> 00:04:28,400
want to troubleshoot so if it's just

69
00:04:28,400 --> 00:04:30,169
session related stuff or if it's

70
00:04:30,169 --> 00:04:32,800
anything related to the WebRTC setup or

71
00:04:32,800 --> 00:04:34,880
statistics in real time and things like

72
00:04:34,880 --> 00:04:36,860
this which will see a brief example of

73
00:04:36,860 --> 00:04:38,840
this in a minute and the idea is of

74
00:04:38,840 --> 00:04:40,610
course that each of those events which

75
00:04:40,610 --> 00:04:42,620
of course presents you a partial view of

76
00:04:42,620 --> 00:04:44,360
what is happening can then be used

77
00:04:44,360 --> 00:04:46,160
together with other events in order to

78
00:04:46,160 --> 00:04:48,200
correlate and have a better picture of

79
00:04:48,200 --> 00:04:50,090
whatever is happening also let's say

80
00:04:50,090 --> 00:04:51,860
within the context of a conference

81
00:04:51,860 --> 00:04:53,300
rather than a single peer connection

82
00:04:53,300 --> 00:04:56,930
just make a single example and to make

83
00:04:56,930 --> 00:04:59,539
this easier also to integrate with other

84
00:04:59,539 --> 00:05:01,430
platforms we started writing a single

85
00:05:01,430 --> 00:05:03,229
event handler for the moment which is

86
00:05:03,229 --> 00:05:04,970
the only event and all that is currently

87
00:05:04,970 --> 00:05:06,590
available hopefully this will change in

88
00:05:06,590 --> 00:05:07,039
the future

89
00:05:07,039 --> 00:05:09,110
and this event title does nothing more

90
00:05:09,110 --> 00:05:11,270
than getting that event the Janus

91
00:05:11,270 --> 00:05:13,550
originates formatted to JSON and then

92
00:05:13,550 --> 00:05:15,800
shoot it out via HTTP to an external

93
00:05:15,800 --> 00:05:17,419
back-end so that in these external

94
00:05:17,419 --> 00:05:18,919
back-end you can do some fancy stuff

95
00:05:18,919 --> 00:05:21,770
with it and so it does it is a bit much

96
00:05:21,770 --> 00:05:23,240
smarter than that so we can aggregate

97
00:05:23,240 --> 00:05:24,860
events so that you do not shoot a single

98
00:05:24,860 --> 00:05:26,960
single message per event and something

99
00:05:26,960 --> 00:05:29,000
like this some basic retransmission

100
00:05:29,000 --> 00:05:30,830
mechanism identification and so on but

101
00:05:30,830 --> 00:05:32,479
really it's nothing more than that in

102
00:05:32,479 --> 00:05:34,639
principle it's really just a way to take

103
00:05:34,639 --> 00:05:36,229
this event shoot it somewhere else so

104
00:05:36,229 --> 00:05:38,210
that you can play with them in a in a

105
00:05:38,210 --> 00:05:40,460
nice way which I also try to describe a

106
00:05:40,460 --> 00:05:42,320
bit in some in some examples and blog

107
00:05:42,320 --> 00:05:46,490
posts and if we refer to the previous

108
00:05:46,490 --> 00:05:47,750
image where I've mentioned they're not

109
00:05:47,750 --> 00:05:49,280
be an application that was falling for

110
00:05:49,280 --> 00:05:49,639
him

111
00:05:49,639 --> 00:05:51,770
and in this case the admin application

112
00:05:51,770 --> 00:05:53,090
is notified in real time whatever

113
00:05:53,090 --> 00:05:54,830
happens so anytime a session is created

114
00:05:54,830 --> 00:05:56,360
the admin is aware of that

115
00:05:56,360 --> 00:05:59,479
anytime something happens where RTC wise

116
00:05:59,479 --> 00:06:01,759
it is also being notified it is notified

117
00:06:01,759 --> 00:06:03,740
about any offer that happens anytime the

118
00:06:03,740 --> 00:06:05,659
eye state changes and things like this

119
00:06:05,659 --> 00:06:07,219
so that you're immediately aware of what

120
00:06:07,219 --> 00:06:09,319
as whatever is happening within the

121
00:06:09,319 --> 00:06:11,029
platform we should make make it easier

122
00:06:11,029 --> 00:06:12,110
to build monitoring and troubleshooting

123
00:06:12,110 --> 00:06:14,599
things on top of that and the nice thing

124
00:06:14,599 --> 00:06:16,580
about this first interaction is

125
00:06:16,580 --> 00:06:17,990
something that is actually related to

126
00:06:17,990 --> 00:06:19,990
the presentation you will see later on

127
00:06:19,990 --> 00:06:22,669
in fact Lorenzo is going to talk a bit

128
00:06:22,669 --> 00:06:24,979
about how they use these events to

129
00:06:24,979 --> 00:06:26,810
within the home or framework in order to

130
00:06:26,810 --> 00:06:28,550
monitor a Janus framework which was

131
00:06:28,550 --> 00:06:30,800
really exciting and interesting for me

132
00:06:30,800 --> 00:06:33,110
and I won't have too much on these in

133
00:06:33,110 --> 00:06:35,419
this light but I just wanted to say that

134
00:06:35,419 --> 00:06:36,680
I'm really excited about this for

135
00:06:36,680 --> 00:06:38,330
several reasons most of all because

136
00:06:38,330 --> 00:06:40,639
Janus and home are both figures from

137
00:06:40,639 --> 00:06:42,589
meteorology which is something that I

138
00:06:42,589 --> 00:06:45,110
really like about most importantly I'm

139
00:06:45,110 --> 00:06:47,270
I'm from mythical or may take well

140
00:06:47,270 --> 00:06:50,120
people call it and we call it mythical B

141
00:06:50,120 --> 00:06:51,050
which means awesome

142
00:06:51,050 --> 00:06:54,139
in English we called it like that also

143
00:06:54,139 --> 00:06:56,150
because it's what Homer Simpson says in

144
00:06:56,150 --> 00:06:57,650
the Italian version of The Sims on

145
00:06:57,650 --> 00:06:59,629
anytime something exciting happens so

146
00:06:59,629 --> 00:07:01,159
it's really like a match made in heaven

147
00:07:01,159 --> 00:07:08,990
for us and you can over there so just to

148
00:07:08,990 --> 00:07:11,000
show this a bit more in practice I

149
00:07:11,000 --> 00:07:13,430
didn't really make some demos upper

150
00:07:13,430 --> 00:07:15,020
running but I did make some dumps in

151
00:07:15,020 --> 00:07:18,229
order to show you how this all works at

152
00:07:18,229 --> 00:07:20,750
least from a from an events perspective

153
00:07:20,750 --> 00:07:22,520
and I started a couple of different

154
00:07:22,520 --> 00:07:24,050
demos within John's so we have different

155
00:07:24,050 --> 00:07:26,330
demos to showcase different plugins and

156
00:07:26,330 --> 00:07:28,699
this one shows my ugly face trying an

157
00:07:28,699 --> 00:07:30,409
echo test demo so whatever I sent to

158
00:07:30,409 --> 00:07:32,659
John's B is being sent back to me so we

159
00:07:32,659 --> 00:07:34,189
create a single peer connection that we

160
00:07:34,189 --> 00:07:36,319
can monitor and so I I captured some

161
00:07:36,319 --> 00:07:38,689
dumps of the event and mekinese in order

162
00:07:38,689 --> 00:07:41,210
to see what the what Janus is actually

163
00:07:41,210 --> 00:07:44,149
telling me about whatever happens and

164
00:07:44,149 --> 00:07:47,419
this is also summarized in a blog post

165
00:07:47,419 --> 00:07:48,860
that I wrote some time ago that shows

166
00:07:48,860 --> 00:07:51,349
how I actually wrote a simple node.js

167
00:07:51,349 --> 00:07:54,409
application that gets all the events

168
00:07:54,409 --> 00:07:56,089
from the sample and the plug-in as a

169
00:07:56,089 --> 00:07:58,759
JSON object and then saves these events

170
00:07:58,759 --> 00:08:00,589
to a database formatted somehow so that

171
00:08:00,589 --> 00:08:02,509
I can then make some processing over the

172
00:08:02,509 --> 00:08:02,850
data

173
00:08:02,850 --> 00:08:05,040
the tables to see if I can get some

174
00:08:05,040 --> 00:08:06,630
information about what happened during a

175
00:08:06,630 --> 00:08:08,820
specific session and so if we look at

176
00:08:08,820 --> 00:08:10,590
the events they are formatted as days

177
00:08:10,590 --> 00:08:12,860
and as I sent we we get a lot of events

178
00:08:12,860 --> 00:08:15,150
about anything that happens in this case

179
00:08:15,150 --> 00:08:17,010
we see a session has been created using

180
00:08:17,010 --> 00:08:19,950
the HTTP transport in particular we see

181
00:08:19,950 --> 00:08:21,570
a handle has been attached to the echo

182
00:08:21,570 --> 00:08:23,550
test plug-in and the results to this

183
00:08:23,550 --> 00:08:25,470
piece of information that is actually

184
00:08:25,470 --> 00:08:27,000
very important for correlation and I'll

185
00:08:27,000 --> 00:08:29,940
show this in the next demo that after

186
00:08:29,940 --> 00:08:33,210
after we created a handle that is a

187
00:08:33,210 --> 00:08:35,159
basically an abstraction of a connection

188
00:08:35,159 --> 00:08:36,990
between a user and the plugin

189
00:08:36,990 --> 00:08:38,849
we can create a peer connection over it

190
00:08:38,849 --> 00:08:40,530
which is exactly what happens in this

191
00:08:40,530 --> 00:08:42,929
other event so we get an event saying

192
00:08:42,929 --> 00:08:44,880
that the remote peers starting sending

193
00:08:44,880 --> 00:08:48,120
us an an SDP and off to basically create

194
00:08:48,120 --> 00:08:50,310
a peer connection this gets passed to

195
00:08:50,310 --> 00:08:52,620
the to the echo test plug-in and the

196
00:08:52,620 --> 00:08:54,180
echo does plug-in sends back an answer

197
00:08:54,180 --> 00:08:56,850
to to establish the communication which

198
00:08:56,850 --> 00:08:58,500
is exemplified in this other event that

199
00:08:58,500 --> 00:09:01,860
we get here so we get the owner is local

200
00:09:01,860 --> 00:09:03,840
because it's basically the the SDP that

201
00:09:03,840 --> 00:09:06,270
John is generated for itself in this

202
00:09:06,270 --> 00:09:08,400
case it's an answer so as soon as the

203
00:09:08,400 --> 00:09:10,170
offer and answers have been exchanged

204
00:09:10,170 --> 00:09:12,450
the actual peer connection setup starts

205
00:09:12,450 --> 00:09:14,010
which means that we start getting events

206
00:09:14,010 --> 00:09:16,020
about the ice state machines or whatever

207
00:09:16,020 --> 00:09:17,910
happening with it whatever starts

208
00:09:17,910 --> 00:09:19,860
happening within eyes in this case for

209
00:09:19,860 --> 00:09:21,690
instance we might get demands related to

210
00:09:21,690 --> 00:09:23,970
ice that is in a connecting phase so the

211
00:09:23,970 --> 00:09:26,400
ice connectivity checks start taking

212
00:09:26,400 --> 00:09:29,760
place after these eventually the the

213
00:09:29,760 --> 00:09:31,200
connection succeeds from a nice

214
00:09:31,200 --> 00:09:33,330
perspective and we are also notified

215
00:09:33,330 --> 00:09:34,950
about the selected pair that has been

216
00:09:34,950 --> 00:09:36,960
chosen for that specific connection

217
00:09:36,960 --> 00:09:38,280
which may be important for several

218
00:09:38,280 --> 00:09:40,830
different reasons one size has been done

219
00:09:40,830 --> 00:09:42,750
we come up to the detail last

220
00:09:42,750 --> 00:09:45,060
information so after ice is done we

221
00:09:45,060 --> 00:09:46,710
still need to do a DTLS handshake to

222
00:09:46,710 --> 00:09:49,890
exchange the SRTP keys so even in this

223
00:09:49,890 --> 00:09:51,630
case we see that DTLS is still trying

224
00:09:51,630 --> 00:09:53,370
and that gets to a connected phase if

225
00:09:53,370 --> 00:09:54,810
this doesn't happen we know that there

226
00:09:54,810 --> 00:09:56,250
is something warm from instance in the

227
00:09:56,250 --> 00:09:58,530
DTLS sent cheek and so gives us some

228
00:09:58,530 --> 00:10:00,300
ideas about why something is wrong in

229
00:10:00,300 --> 00:10:02,580
the connection set up and so on once

230
00:10:02,580 --> 00:10:04,710
this is being done media starts being

231
00:10:04,710 --> 00:10:06,330
exchanged and so we get the events on

232
00:10:06,330 --> 00:10:08,550
that as well so first of all we are told

233
00:10:08,550 --> 00:10:10,380
that the peer connection is apt from the

234
00:10:10,380 --> 00:10:13,080
from the Janus perspective we get

235
00:10:13,080 --> 00:10:15,330
information about audio and video that

236
00:10:15,330 --> 00:10:16,200
are there

237
00:10:16,200 --> 00:10:18,000
being received by Janice which is

238
00:10:18,000 --> 00:10:19,620
important because it means that Janice

239
00:10:19,620 --> 00:10:21,870
is getting now media from the user and

240
00:10:21,870 --> 00:10:25,350
so can start using it and we also get

241
00:10:25,350 --> 00:10:27,750
lives that is sticks about each second

242
00:10:27,750 --> 00:10:29,490
or so for each connection so that you

243
00:10:29,490 --> 00:10:32,550
can for instance see live statistics

244
00:10:32,550 --> 00:10:34,110
that tell you about the packets being

245
00:10:34,110 --> 00:10:35,610
exchanged and things like this and so

246
00:10:35,610 --> 00:10:36,780
may be useful for several different

247
00:10:36,780 --> 00:10:38,970
reasons and this happens for both audio

248
00:10:38,970 --> 00:10:42,270
and video so all kind of information

249
00:10:42,270 --> 00:10:43,470
that as you can imagine are really

250
00:10:43,470 --> 00:10:44,850
important for understanding whether or

251
00:10:44,850 --> 00:10:46,110
not the peer connection is actually

252
00:10:46,110 --> 00:10:48,330
doing its job or not and more

253
00:10:48,330 --> 00:10:49,890
importantly this is also important for

254
00:10:49,890 --> 00:10:51,690
the next demo we also backed event from

255
00:10:51,690 --> 00:10:53,250
plugins themselves and considering the

256
00:10:53,250 --> 00:10:55,050
plugins may be written by turd but in

257
00:10:55,050 --> 00:10:57,180
implementers by whoever they are very

258
00:10:57,180 --> 00:10:58,710
much plug-in specific as you can imagine

259
00:10:58,710 --> 00:11:00,420
so we just provide a framework for

260
00:11:00,420 --> 00:11:02,310
allowing plugins to notify you about

261
00:11:02,310 --> 00:11:04,590
anything that happens within a plugin in

262
00:11:04,590 --> 00:11:06,690
this case the echo test user was just

263
00:11:06,690 --> 00:11:08,550
adjusting the bitrate settings to force

264
00:11:08,550 --> 00:11:10,440
a different bitrate for the

265
00:11:10,440 --> 00:11:11,640
communication so nothing really

266
00:11:11,640 --> 00:11:14,340
important so if we want to look instead

267
00:11:14,340 --> 00:11:15,990
at a more complex application like a

268
00:11:15,990 --> 00:11:18,420
media conferencing application maybe and

269
00:11:18,420 --> 00:11:20,520
Here I am talking with myself because I

270
00:11:20,520 --> 00:11:25,560
don't have any friends this is also

271
00:11:25,560 --> 00:11:27,930
explained in another blog post where I

272
00:11:27,930 --> 00:11:29,640
tried to explain a bit how things work

273
00:11:29,640 --> 00:11:32,190
in this case we were very interested in

274
00:11:32,190 --> 00:11:33,810
knowing whether or not we can figure out

275
00:11:33,810 --> 00:11:35,880
the relationship between peer

276
00:11:35,880 --> 00:11:37,710
connections belonging to different users

277
00:11:37,710 --> 00:11:39,420
first of all if we want if we were able

278
00:11:39,420 --> 00:11:41,550
to associate peer connections belonging

279
00:11:41,550 --> 00:11:43,800
to the same users to a specific user and

280
00:11:43,800 --> 00:11:46,410
if you be if we are able to reconstruct

281
00:11:46,410 --> 00:11:48,270
the topology of a video room so who is

282
00:11:48,270 --> 00:11:50,430
subscribed to whom who is publishing and

283
00:11:50,430 --> 00:11:52,410
things like this which is basically what

284
00:11:52,410 --> 00:11:54,600
the next dumped try to provide so I will

285
00:11:54,600 --> 00:11:56,610
not go through the same session only

286
00:11:56,610 --> 00:11:58,020
about this event we assume that

287
00:11:58,020 --> 00:11:59,610
everything is fine in that sense we

288
00:11:59,610 --> 00:12:02,040
focus instead of the plugins generated

289
00:12:02,040 --> 00:12:03,750
by the video room plug-in which give us

290
00:12:03,750 --> 00:12:05,580
some context about what the video room

291
00:12:05,580 --> 00:12:07,770
does with the subscriptions in principle

292
00:12:07,770 --> 00:12:10,320
so in this case we see that this session

293
00:12:10,320 --> 00:12:14,010
handle combination has a participant

294
00:12:14,010 --> 00:12:16,020
joint in this case it's called chi-chu

295
00:12:16,020 --> 00:12:17,670
chi-chu chi-chu is one of the users i

296
00:12:17,670 --> 00:12:20,910
use i always using in my demos yes a

297
00:12:20,910 --> 00:12:22,770
specific ID in the room one two three

298
00:12:22,770 --> 00:12:25,170
four so I know that it is this handle is

299
00:12:25,170 --> 00:12:26,910
being used to publish the contribution

300
00:12:26,910 --> 00:12:29,500
by teacher in the room at the same time

301
00:12:29,500 --> 00:12:31,600
instead he's using those session and I'm

302
00:12:31,600 --> 00:12:34,720
the combination to to publish his own

303
00:12:34,720 --> 00:12:37,780
contribution in the room and then we see

304
00:12:37,780 --> 00:12:39,010
different events related to

305
00:12:39,010 --> 00:12:40,960
subscriptions instead we see another

306
00:12:40,960 --> 00:12:42,850
handle being used to subscribe in this

307
00:12:42,850 --> 00:12:44,980
case this is subscribe to feed 83

308
00:12:44,980 --> 00:12:49,330
something that is that is basically the

309
00:12:49,330 --> 00:12:51,820
idea that Chicho head and then we see

310
00:12:51,820 --> 00:12:53,890
another subscription instead for the

311
00:12:53,890 --> 00:12:56,260
feed 52 something so we know that

312
00:12:56,260 --> 00:12:58,510
somebody has subscribed to people's feel

313
00:12:58,510 --> 00:13:01,090
instead so intuitively we know that they

314
00:13:01,090 --> 00:13:02,710
are both publishing and they're

315
00:13:02,710 --> 00:13:04,500
subscribed to each other but it is not

316
00:13:04,500 --> 00:13:06,820
to be given for granted because you can

317
00:13:06,820 --> 00:13:09,430
actually use this plugin for from things

318
00:13:09,430 --> 00:13:10,900
that are much more complex than that and

319
00:13:10,900 --> 00:13:13,030
so we want to be sure of this what we

320
00:13:13,030 --> 00:13:14,530
can do is basically looking at the

321
00:13:14,530 --> 00:13:16,750
events that that were associated to the

322
00:13:16,750 --> 00:13:19,150
create the handle creation and we see

323
00:13:19,150 --> 00:13:20,830
that these two different handles over

324
00:13:20,830 --> 00:13:24,400
here the same opak identifiers and so

325
00:13:24,400 --> 00:13:27,640
have these other two to one disorder too

326
00:13:27,640 --> 00:13:28,930
which means that they both were

327
00:13:28,930 --> 00:13:31,510
originated by the same user basically so

328
00:13:31,510 --> 00:13:33,160
we know that those handles Bay were

329
00:13:33,160 --> 00:13:35,500
created by the same user and looking at

330
00:13:35,500 --> 00:13:37,060
the session I'll handle identifiers and

331
00:13:37,060 --> 00:13:38,140
things like this we can basically

332
00:13:38,140 --> 00:13:40,150
reconstruct the topology which is that

333
00:13:40,150 --> 00:13:42,610
people is using a specific handle to

334
00:13:42,610 --> 00:13:45,040
publish he subscribed to a specific ID

335
00:13:45,040 --> 00:13:47,200
we are we are different to handle and so

336
00:13:47,200 --> 00:13:49,480
on we know which end up belongs to we

337
00:13:49,480 --> 00:13:51,100
can figure out that the they're

338
00:13:51,100 --> 00:13:52,870
basically subscribe to each other which

339
00:13:52,870 --> 00:13:56,530
is what we wanted to figure out and this

340
00:13:56,530 --> 00:13:58,000
is basically how you can correlate

341
00:13:58,000 --> 00:13:59,770
information related to different plugins

342
00:13:59,770 --> 00:14:01,720
with each other which is which is kind

343
00:14:01,720 --> 00:14:04,780
of cool and just to conclude basically

344
00:14:04,780 --> 00:14:07,839
because I managed somehow to to talk

345
00:14:07,839 --> 00:14:10,360
about 95 slides in 15 minutes so I

346
00:14:10,360 --> 00:14:13,300
deserve replies for this this is really

347
00:14:13,300 --> 00:14:15,130
something really new that we've been

348
00:14:15,130 --> 00:14:17,410
experimenting with and the idea is that

349
00:14:17,410 --> 00:14:20,500
in the future more and more plugins will

350
00:14:20,500 --> 00:14:22,360
come to basically handle this in and see

351
00:14:22,360 --> 00:14:24,220
more creative ways in the next

352
00:14:24,220 --> 00:14:25,900
presentation Lorenzo will show us how

353
00:14:25,900 --> 00:14:27,880
they actually handle this to integrate

354
00:14:27,880 --> 00:14:30,430
this within the humor framework and it

355
00:14:30,430 --> 00:14:32,200
would be really nice to have actually a

356
00:14:32,200 --> 00:14:33,910
native plug-in that acts as an event

357
00:14:33,910 --> 00:14:35,589
enter within Janus itself rather than

358
00:14:35,589 --> 00:14:37,330
relying on a plug-in that shoots event

359
00:14:37,330 --> 00:14:39,790
an event to a node.js application which

360
00:14:39,790 --> 00:14:41,830
then introduces the events in jars which

361
00:14:41,830 --> 00:14:42,490
would be

362
00:14:42,490 --> 00:14:44,830
quite quite cool we will also have a

363
00:14:44,830 --> 00:14:46,470
student working on this kind of

364
00:14:46,470 --> 00:14:48,970
interaction in the future which is kind

365
00:14:48,970 --> 00:14:51,459
of nice but more importantly I mean help

366
00:14:51,459 --> 00:14:53,170
us play with these if you're interested

367
00:14:53,170 --> 00:14:55,180
in these just start using it let us know

368
00:14:55,180 --> 00:14:57,250
if if there is anything more that is

369
00:14:57,250 --> 00:14:59,110
needed on this or if you think it's

370
00:14:59,110 --> 00:15:02,260
actually just niceties and this is all

371
00:15:02,260 --> 00:15:04,360
I've got so I'm open to questions if

372
00:15:04,360 --> 00:15:07,260
there is any time for that

373
00:15:10,930 --> 00:15:20,140
[Applause]

