1
00:00:00,030 --> 00:00:03,289
I'm adamant

2
00:00:04,690 --> 00:00:09,580
I work at Oracle mainly contributing to

3
00:00:09,580 --> 00:00:16,199
booth geometry and I would like to mmm

4
00:00:16,199 --> 00:00:19,270
basically show you a bunch of examples

5
00:00:19,270 --> 00:00:25,720
and showed that it's easy to do job

6
00:00:25,720 --> 00:00:28,090
geographic stuff or John Doe metrical

7
00:00:28,090 --> 00:00:32,980
stuff actually in C++ with both geometry

8
00:00:32,980 --> 00:00:38,679
the first hour I'll talk a little bit

9
00:00:38,679 --> 00:00:40,989
about the library and then show the

10
00:00:40,989 --> 00:00:47,469
simple example and mmm actually during

11
00:00:47,469 --> 00:00:50,800
the whole talk there will be many

12
00:00:50,800 --> 00:00:53,260
examples showing you how to how to

13
00:00:53,260 --> 00:00:55,539
create primitives use various algorithms

14
00:00:55,539 --> 00:00:58,749
and special index and then at the end

15
00:00:58,749 --> 00:01:03,239
I'll show you a few tools for developers

16
00:01:03,239 --> 00:01:08,440
simplifying the buggin so it's both

17
00:01:08,440 --> 00:01:11,350
geometries is a part of both supposes

18
00:01:11,350 --> 00:01:14,110
libraries it's mostly written in simple

19
00:01:14,110 --> 00:01:16,660
puzzle 3 but has called conditionally

20
00:01:16,660 --> 00:01:19,750
enabled features if compilers allows it

21
00:01:19,750 --> 00:01:23,530
and it kept heavily relies on meta

22
00:01:23,530 --> 00:01:26,500
programming and techniques such as tag

23
00:01:26,500 --> 00:01:31,620
dispatching so it defines primitives

24
00:01:31,620 --> 00:01:35,410
also implements them for users

25
00:01:35,410 --> 00:01:40,330
convenience and algorithms which can be

26
00:01:40,330 --> 00:01:43,810
used by by the users and it's the

27
00:01:43,810 --> 00:01:49,060
purpose is to be a DC standard

28
00:01:49,060 --> 00:01:51,400
conformance and there's also an

29
00:01:51,400 --> 00:01:58,480
implementation of special index yeah

30
00:01:58,480 --> 00:02:00,640
some of some of the links there also on

31
00:02:00,640 --> 00:02:05,560
the presentation the ad hoc page so no

32
00:02:05,560 --> 00:02:08,970
no need to to write them and

33
00:02:08,970 --> 00:02:11,510
[Music]

34
00:02:11,510 --> 00:02:13,610
yeah here's the simple hello world

35
00:02:13,610 --> 00:02:19,310
example mmm yes it's how the world and

36
00:02:19,310 --> 00:02:21,580
not hollow plane I will need

37
00:02:21,580 --> 00:02:25,459
geographical points here you can see

38
00:02:25,459 --> 00:02:28,840
that yeah we need some some includes

39
00:02:28,840 --> 00:02:36,340
then point type his is defined I'm using

40
00:02:36,340 --> 00:02:40,970
point template defined in both geometry

41
00:02:40,970 --> 00:02:43,790
here and then I'm calling the distance

42
00:02:43,790 --> 00:02:47,629
function passing two points one is my

43
00:02:47,629 --> 00:02:50,840
home city which in Poland and the other

44
00:02:50,840 --> 00:02:57,560
one is Brussels and what I get is the

45
00:02:57,560 --> 00:02:59,900
distance it's different than the

46
00:02:59,900 --> 00:03:04,370
distance displayed at the Google Maps

47
00:03:04,370 --> 00:03:09,230
because here we are actually using this

48
00:03:09,230 --> 00:03:16,340
farad model and Google is the sphere mmm

49
00:03:16,340 --> 00:03:20,389
these are the the primitives that boost

50
00:03:20,389 --> 00:03:21,349
geometry sports

51
00:03:21,349 --> 00:03:26,359
so basically mmm basic primitives that

52
00:03:26,359 --> 00:03:31,489
are defined in the ODC standard plus the

53
00:03:31,489 --> 00:03:34,280
bounding box which in both geometries

54
00:03:34,280 --> 00:03:41,480
separate primitive and here here is how

55
00:03:41,480 --> 00:03:43,760
how it looks like in the code mmm so

56
00:03:43,760 --> 00:03:49,000
basically metadata like the

57
00:03:49,000 --> 00:03:52,280
dimensionality of geometries and the

58
00:03:52,280 --> 00:03:55,340
coordinate systems are defined in the

59
00:03:55,340 --> 00:03:58,489
point type and then this information is

60
00:03:58,489 --> 00:04:03,169
propagated into the more complex

61
00:04:03,169 --> 00:04:06,349
geometries that are using this point

62
00:04:06,349 --> 00:04:08,930
type so here I'm defining point line

63
00:04:08,930 --> 00:04:12,169
string polygon and multi polygon in a

64
00:04:12,169 --> 00:04:14,120
way that a lie string is a range of

65
00:04:14,120 --> 00:04:20,029
points polygon is contains an exterior

66
00:04:20,029 --> 00:04:21,510
ring and

67
00:04:21,510 --> 00:04:24,240
some number of interlinks also

68
00:04:24,240 --> 00:04:25,860
containing points and a multi polygon

69
00:04:25,860 --> 00:04:30,960
contains is a range of polygons and here

70
00:04:30,960 --> 00:04:37,920
I create the objects so drip

71
00:04:37,920 --> 00:04:40,260
representations of light string polygons

72
00:04:40,260 --> 00:04:41,190
and multi polygons

73
00:04:41,190 --> 00:04:44,310
fill it with data and display some

74
00:04:44,310 --> 00:04:48,030
distances mm between light string and

75
00:04:48,030 --> 00:04:49,620
polygon and nice Lincoln multi polygons

76
00:04:49,620 --> 00:04:51,350
this is done in Cartesian as you can see

77
00:04:51,350 --> 00:04:57,270
at the top right corner and this is how

78
00:04:57,270 --> 00:04:59,880
it looks like right the distance between

79
00:04:59,880 --> 00:05:01,980
line string and polygon and movement are

80
00:05:01,980 --> 00:05:06,300
the same it's also possible to use your

81
00:05:06,300 --> 00:05:11,660
own implementations of primitives here I

82
00:05:11,660 --> 00:05:17,070
define my point implementing a point

83
00:05:17,070 --> 00:05:23,790
primitive register it's using register

84
00:05:23,790 --> 00:05:25,530
macros provided by the library which

85
00:05:25,530 --> 00:05:30,660
works in most typical scenarios they

86
00:05:30,660 --> 00:05:33,480
basically technically speaking adapt the

87
00:05:33,480 --> 00:05:37,920
my point type to one of the to the point

88
00:05:37,920 --> 00:05:41,550
concept and defined by boost geometry so

89
00:05:41,550 --> 00:05:44,910
the first the first macro adapts my

90
00:05:44,910 --> 00:05:48,300
points to to the point concept and the

91
00:05:48,300 --> 00:05:51,900
second macro adapts vector of points to

92
00:05:51,900 --> 00:05:55,470
line string concept so I can use vector

93
00:05:55,470 --> 00:05:58,890
for points sliced ring and then again

94
00:05:58,890 --> 00:06:01,560
I'm creating a point I'm creating a

95
00:06:01,560 --> 00:06:04,860
vector of points which is now mmm

96
00:06:04,860 --> 00:06:07,980
treated as a line string by the library

97
00:06:07,980 --> 00:06:13,850
and again I'm calculating some distance

98
00:06:14,630 --> 00:06:18,770
so the distance is the same

99
00:06:20,599 --> 00:06:26,639
yeah boost boost library has many

100
00:06:26,639 --> 00:06:32,129
albert's I grouped them here by the the

101
00:06:32,129 --> 00:06:35,460
number of of inputs and the kind of

102
00:06:35,460 --> 00:06:37,979
output so the area and perimeter takes

103
00:06:37,979 --> 00:06:41,330
one geometry and returns some value

104
00:06:41,330 --> 00:06:44,639
crosses relational operations and

105
00:06:44,639 --> 00:06:48,000
distance takes two geometries and either

106
00:06:48,000 --> 00:06:51,780
returns boolean value or or a distance

107
00:06:51,780 --> 00:06:55,039
value and centroids in convex for

108
00:06:55,039 --> 00:06:57,659
algorithms which takes one geometry and

109
00:06:57,659 --> 00:07:00,479
creates another geometry from it and set

110
00:07:00,479 --> 00:07:02,210
operations take two geometries and

111
00:07:02,210 --> 00:07:06,050
perform said set operation so returning

112
00:07:06,050 --> 00:07:13,020
the third geometry yeah very similar to

113
00:07:13,020 --> 00:07:17,030
the the last example the difference that

114
00:07:17,030 --> 00:07:20,490
I'm calling different algorithms area

115
00:07:20,490 --> 00:07:26,069
and perimeter the land as certain

116
00:07:26,069 --> 00:07:28,919
algorithms are able to take certain

117
00:07:28,919 --> 00:07:31,590
types of geometries so the lens is able

118
00:07:31,590 --> 00:07:33,539
to take linear geometries and airy open

119
00:07:33,539 --> 00:07:37,889
perimeter can only take array of

120
00:07:37,889 --> 00:07:41,729
geometries and here yeah light string in

121
00:07:41,729 --> 00:07:45,270
is passed to the lens and polygon is

122
00:07:45,270 --> 00:07:48,389
passed to the area and perimeter and

123
00:07:48,389 --> 00:07:51,479
also we get some results and know how

124
00:07:51,479 --> 00:07:56,430
many ten minutes the rest of the

125
00:07:56,430 --> 00:08:00,870
examples is very similar here relational

126
00:08:00,870 --> 00:08:05,129
operations I'm checking the intersection

127
00:08:05,129 --> 00:08:09,449
of a line string and and a line strings

128
00:08:09,449 --> 00:08:13,229
and polygon and x-ray this is probably

129
00:08:13,229 --> 00:08:14,550
not yes

130
00:08:14,550 --> 00:08:16,860
the example is not correct sorry

131
00:08:16,860 --> 00:08:22,949
actually what I'm the results shows the

132
00:08:22,949 --> 00:08:25,289
result of the these relational

133
00:08:25,289 --> 00:08:27,500
operations of the first light string and

134
00:08:27,500 --> 00:08:30,419
polygon

135
00:08:30,419 --> 00:08:35,099
or they fertilize drink here which which

136
00:08:35,099 --> 00:08:37,950
looks like this so nicely intersects the

137
00:08:37,950 --> 00:08:43,828
polygon and you can see de9 intersection

138
00:08:43,828 --> 00:08:50,209
matrix representation in the second case

139
00:08:52,490 --> 00:08:55,700
the next group of algorithms so

140
00:08:55,700 --> 00:08:59,250
algorithms generating geometry from

141
00:08:59,250 --> 00:09:02,310
other geometry like some centroid

142
00:09:02,310 --> 00:09:04,440
envelope and convex hull so in the first

143
00:09:04,440 --> 00:09:07,890
case the centroid will be a point the

144
00:09:07,890 --> 00:09:10,470
envelope will be a box and convex hull

145
00:09:10,470 --> 00:09:15,829
is a polygon and I'm printing the wkt

146
00:09:15,829 --> 00:09:20,040
representation of all of those outputs

147
00:09:20,040 --> 00:09:26,339
in geometries which looks like this next

148
00:09:26,339 --> 00:09:31,140
algorithm a buffer as you can see here

149
00:09:31,140 --> 00:09:34,440
how birds not only takes input down to

150
00:09:34,440 --> 00:09:37,199
geometries but also additional arguments

151
00:09:37,199 --> 00:09:41,000
in this case these are the organs

152
00:09:41,000 --> 00:09:44,430
defining how the buffer should be

153
00:09:44,430 --> 00:09:48,260
calculated so it will be a symmetric

154
00:09:48,260 --> 00:09:54,390
buffer of a line string and the the

155
00:09:54,390 --> 00:09:58,459
output geometry will be a multi polygon

156
00:09:59,930 --> 00:10:05,239
yes and it's it's quite longer

157
00:10:07,019 --> 00:10:11,560
and some separations that is

158
00:10:11,560 --> 00:10:13,470
intersection and symmetrical difference

159
00:10:13,470 --> 00:10:16,230
the input geometries are polygons and

160
00:10:16,230 --> 00:10:20,860
the output has to be multi polygon so

161
00:10:20,860 --> 00:10:23,350
there are two Multi polygons in the

162
00:10:23,350 --> 00:10:29,709
output and it looked like this mmm

163
00:10:29,709 --> 00:10:32,920
as for this special index it's an

164
00:10:32,920 --> 00:10:34,749
implementation of our tree actually

165
00:10:34,749 --> 00:10:40,480
there are three variants of our tree the

166
00:10:40,480 --> 00:10:43,649
classic one with line your split

167
00:10:43,649 --> 00:10:46,600
quadratic split and the air start tree

168
00:10:46,600 --> 00:10:52,269
it's also supports bulk loading and it

169
00:10:52,269 --> 00:10:54,699
has some support 11 features like strafe

170
00:10:54,699 --> 00:10:57,879
locators and mu semantics and allows you

171
00:10:57,879 --> 00:11:06,970
to use value type of any kind assumed in

172
00:11:06,970 --> 00:11:11,370
this example mmm this is the most common

173
00:11:11,370 --> 00:11:16,329
thing that public can be done with

174
00:11:16,329 --> 00:11:19,050
special index so what I want to do is to

175
00:11:19,050 --> 00:11:22,300
create some containers a container of

176
00:11:22,300 --> 00:11:24,699
polygons and then prepare a special

177
00:11:24,699 --> 00:11:29,920
index for representing this these

178
00:11:29,920 --> 00:11:34,769
polygons then perform some special query

179
00:11:34,769 --> 00:11:38,829
getting those polygons which intersect

180
00:11:38,829 --> 00:11:42,670
another query polygon so here I will

181
00:11:42,670 --> 00:11:46,889
need point polygon and box types and

182
00:11:46,889 --> 00:11:52,589
then I would like to define a tree type

183
00:11:52,589 --> 00:11:56,079
as you can see in the arch I'm storing a

184
00:11:56,079 --> 00:12:00,220
pair of box and ID of a polygon in my

185
00:12:00,220 --> 00:12:06,100
container here and I'm storing this

186
00:12:06,100 --> 00:12:09,490
value here in the air tree and the

187
00:12:09,490 --> 00:12:11,319
variant of the earth tree which will be

188
00:12:11,319 --> 00:12:16,420
built is the earth star tree so here the

189
00:12:16,420 --> 00:12:19,230
container of polygons is created

190
00:12:19,230 --> 00:12:21,630
it's a it's a vector of polygons filled

191
00:12:21,630 --> 00:12:25,889
with data here here the three object is

192
00:12:25,889 --> 00:12:28,589
created and then for each polygon I'm

193
00:12:28,589 --> 00:12:30,860
storing a pair

194
00:12:30,860 --> 00:12:34,500
containing an envelope of a polygon and

195
00:12:34,500 --> 00:12:37,670
have ID

196
00:12:38,370 --> 00:12:40,920
let's port the query here is the query

197
00:12:40,920 --> 00:12:45,990
polygon filled with data I'm returning

198
00:12:45,990 --> 00:12:49,410
its envelope expanding it a little bit

199
00:12:49,410 --> 00:12:53,360
with written buffer function and then

200
00:12:53,360 --> 00:12:55,740
performing the query storing the result

201
00:12:55,740 --> 00:12:58,920
in a in a vector of values then for each

202
00:12:58,920 --> 00:13:02,100
value in the result I'm printing first

203
00:13:02,100 --> 00:13:04,380
the wkt of a corresponding polygon and

204
00:13:04,380 --> 00:13:08,579
then if it intersects the original query

205
00:13:08,579 --> 00:13:13,529
polygon the word intersects otherwise

206
00:13:13,529 --> 00:13:18,060
not intersect so as you can see two

207
00:13:18,060 --> 00:13:20,940
polygons has to be checked and one of

208
00:13:20,940 --> 00:13:22,829
them intersects and other one doesn't

209
00:13:22,829 --> 00:13:30,510
intersect the query polygon yes and for

210
00:13:30,510 --> 00:13:32,870
your disposals there are there are also

211
00:13:32,870 --> 00:13:36,990
some tools which should allow you to

212
00:13:36,990 --> 00:13:40,680
debug the code more easily first of them

213
00:13:40,680 --> 00:13:43,709
is the graphical debugging extension for

214
00:13:43,709 --> 00:13:49,290
visual C++ plus to do in 2015 and which

215
00:13:49,290 --> 00:13:55,079
are little to debug the decodes wise

216
00:13:55,079 --> 00:13:58,199
seeing the graphical presentation in

217
00:13:58,199 --> 00:14:01,800
compositing in in runtime right Oh in

218
00:14:01,800 --> 00:14:08,850
the back time and the other one is our

219
00:14:08,850 --> 00:14:11,420
debugging helpers for Qt creator

220
00:14:11,420 --> 00:14:15,180
allowing you to easily see the contents

221
00:14:15,180 --> 00:14:20,149
of of geometries

222
00:14:20,640 --> 00:14:26,600
and we have three minutes left so we can

223
00:14:26,600 --> 00:14:31,519
answer some questions if you have one

224
00:14:38,930 --> 00:14:55,140
yes the only difference between Oh as

225
00:14:55,140 --> 00:14:59,970
you can see here as I said the metadata

226
00:14:59,970 --> 00:15:03,600
like coordinate system is contained in a

227
00:15:03,600 --> 00:15:05,550
point type right it is bound with point

228
00:15:05,550 --> 00:15:08,579
ID here you can see that geographic

229
00:15:08,579 --> 00:15:11,519
coordinate system the point will be

230
00:15:11,519 --> 00:15:13,649
using geographic coordinate system and

231
00:15:13,649 --> 00:15:19,769
the units are degrees and here on the

232
00:15:19,769 --> 00:15:21,860
other hand the point is using Cartesian

233
00:15:21,860 --> 00:15:26,250
so in order to use spherical geometries

234
00:15:26,250 --> 00:15:32,640
you only need to put either BG's yes

235
00:15:32,640 --> 00:15:36,600
spiracle with some units right radians

236
00:15:36,600 --> 00:15:40,589
or degrees or spherical equatorial which

237
00:15:40,589 --> 00:15:43,410
will be probably something which you'd

238
00:15:43,410 --> 00:15:46,250
like more

239
00:15:51,310 --> 00:15:53,860
okay if there are no questions then

240
00:15:53,860 --> 00:15:56,270
thank you

241
00:15:56,270 --> 00:16:02,220
[Applause]

