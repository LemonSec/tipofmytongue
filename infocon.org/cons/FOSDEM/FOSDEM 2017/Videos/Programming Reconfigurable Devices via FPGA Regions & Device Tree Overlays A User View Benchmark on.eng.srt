1
00:00:04,850 --> 00:00:09,710
so our next speaker is Rick lambda bar

2
00:00:09,710 --> 00:00:11,660
and if we spoke about programming robot

3
00:00:11,660 --> 00:00:16,990
figural device let's upload it thank you

4
00:00:16,990 --> 00:00:20,750
so I gonna have a short talk about using

5
00:00:20,750 --> 00:00:22,429
reprogrammable advisors or

6
00:00:22,429 --> 00:00:26,150
reconfigurable devices namely FPGAs with

7
00:00:26,150 --> 00:00:30,160
and enough space systems we use the

8
00:00:30,160 --> 00:00:35,180
recently main line ported FPGA framework

9
00:00:35,180 --> 00:00:37,670
that has been written by an entire that

10
00:00:37,670 --> 00:00:40,550
is working for inter and I think last

11
00:00:40,550 --> 00:00:42,379
year on the first and there was already

12
00:00:42,379 --> 00:00:45,649
a speech about that a talk that was a

13
00:00:45,649 --> 00:00:48,739
longer one but sadly that is lost so the

14
00:00:48,739 --> 00:00:53,840
video is not present anymore so why we

15
00:00:53,840 --> 00:00:56,690
came across this this this topic is we

16
00:00:56,690 --> 00:01:00,910
implemented a system that accelerates

17
00:01:00,910 --> 00:01:05,510
cryptography engines by that's a

18
00:01:05,510 --> 00:01:07,010
traditional one the software driver

19
00:01:07,010 --> 00:01:08,990
running on the CPU and we moved that

20
00:01:08,990 --> 00:01:13,939
into an FPGA here and that's basically

21
00:01:13,939 --> 00:01:17,290
what we did we needed some more

22
00:01:17,290 --> 00:01:18,470
subsystems

23
00:01:18,470 --> 00:01:20,869
that's the hardware driver that talks to

24
00:01:20,869 --> 00:01:25,369
the a hardware engine via DMA and that

25
00:01:25,369 --> 00:01:27,020
actually integrates that into the crew

26
00:01:27,020 --> 00:01:30,680
PF crypto FPA crypto API within the

27
00:01:30,680 --> 00:01:35,320
Linux kernel that leverages the

28
00:01:35,320 --> 00:01:36,860
accelerator at the heart of

29
00:01:36,860 --> 00:01:39,799
functionality and exposes it to all

30
00:01:39,799 --> 00:01:43,700
system portions that want to use it so

31
00:01:43,700 --> 00:01:47,060
that could be user space tools the same

32
00:01:47,060 --> 00:01:49,640
as kernel space tools because all of

33
00:01:49,640 --> 00:01:53,570
them can talk to the crypto API and this

34
00:01:53,570 --> 00:01:55,939
way we have a very flexible interface to

35
00:01:55,939 --> 00:02:02,149
our new hardware then as cryptography

36
00:02:02,149 --> 00:02:05,390
algorithms advance and the systems

37
00:02:05,390 --> 00:02:07,340
change you also want to be able to

38
00:02:07,340 --> 00:02:10,550
change the baseline cryptography

39
00:02:10,550 --> 00:02:13,070
algorithm that's why we use a

40
00:02:13,070 --> 00:02:15,500
reconfigurable system so we can swap out

41
00:02:15,500 --> 00:02:17,210
the old algorithm and swap

42
00:02:17,210 --> 00:02:19,910
a new algorithm or move more of them

43
00:02:19,910 --> 00:02:24,950
whatever and for doing that we use the

44
00:02:24,950 --> 00:02:28,970
Linux kernel FPGA framework and that's

45
00:02:28,970 --> 00:02:34,550
shown here we have the the internals of

46
00:02:34,550 --> 00:02:37,820
this framework shown here and a slightly

47
00:02:37,820 --> 00:02:41,660
darker blue and the other one and that

48
00:02:41,660 --> 00:02:46,030
handles all the FPGA specific parts and

49
00:02:46,030 --> 00:02:49,400
the user actually influences what

50
00:02:49,400 --> 00:02:52,850
happens via device tree overlays I come

51
00:02:52,850 --> 00:02:56,750
back to that in the next slide and you

52
00:02:56,750 --> 00:02:58,820
obviously need some drivers that

53
00:02:58,820 --> 00:03:00,680
interact with the physical device and

54
00:03:00,680 --> 00:03:04,790
that's those ones here that are specific

55
00:03:04,790 --> 00:03:08,480
to whatever fpga device you use in our

56
00:03:08,480 --> 00:03:12,470
case this was a multiplayer system on

57
00:03:12,470 --> 00:03:16,190
ship some type of platform so we have

58
00:03:16,190 --> 00:03:19,250
those CPUs actually was - and the FPGA

59
00:03:19,250 --> 00:03:23,180
PI apart on one single chip but other

60
00:03:23,180 --> 00:03:26,090
configurations are just working the same

61
00:03:26,090 --> 00:03:31,060
way so you have the FPGA region that

62
00:03:31,060 --> 00:03:33,620
represents a physical region within the

63
00:03:33,620 --> 00:03:37,760
reconfigurable device then this one is

64
00:03:37,760 --> 00:03:40,550
configured from by the user here as

65
00:03:40,550 --> 00:03:43,540
mentioned via the device tree overlays

66
00:03:43,540 --> 00:03:48,140
the FPGA manager over here manages the

67
00:03:48,140 --> 00:03:52,550
the Association of which firmware or in

68
00:03:52,550 --> 00:03:55,490
this case bitstream actually is loaded

69
00:03:55,490 --> 00:03:58,580
and that's also leveraging the standard

70
00:03:58,580 --> 00:04:01,790
Linux interface structure for firmware

71
00:04:01,790 --> 00:04:04,220
loadings that's the same device that's a

72
00:04:04,220 --> 00:04:06,680
system that's also used by USB systems

73
00:04:06,680 --> 00:04:10,990
for example then the FPGA bridge part

74
00:04:10,990 --> 00:04:13,880
decouples every device specific things

75
00:04:13,880 --> 00:04:16,608
and uses the connecticut pass and the

76
00:04:16,608 --> 00:04:18,829
configuration access port this part

77
00:04:18,829 --> 00:04:21,950
actually loads the film we're into the

78
00:04:21,950 --> 00:04:26,030
FPGA config configuration memory and the

79
00:04:26,030 --> 00:04:28,970
decoupler is associated with those

80
00:04:28,970 --> 00:04:30,560
little devices

81
00:04:30,560 --> 00:04:33,770
and during a reconfiguration process

82
00:04:33,770 --> 00:04:37,280
that's decouples what is in the region

83
00:04:37,280 --> 00:04:39,470
from what is within in the outside of

84
00:04:39,470 --> 00:04:42,440
the region because the behavior of logic

85
00:04:42,440 --> 00:04:44,240
within the region isn't specified during

86
00:04:44,240 --> 00:04:52,010
the reconfiguration process yeah okay so

87
00:04:52,010 --> 00:04:54,910
how do we actually trigger a

88
00:04:54,910 --> 00:04:58,130
reconfiguration and how to separate what

89
00:04:58,130 --> 00:05:02,120
we want to specify what goes in their

90
00:05:02,120 --> 00:05:03,770
parameters

91
00:05:03,770 --> 00:05:07,130
platform drivers or the bitstream itself

92
00:05:07,130 --> 00:05:10,340
that's done via the device tree overlay

93
00:05:10,340 --> 00:05:12,860
so every region that is within the FPGA

94
00:05:12,860 --> 00:05:16,190
has a stub present representation in the

95
00:05:16,190 --> 00:05:19,970
overall system device tree and by

96
00:05:19,970 --> 00:05:23,990
loading this overlay onto this addresses

97
00:05:23,990 --> 00:05:26,450
the actual process of reconfiguration is

98
00:05:26,450 --> 00:05:30,110
triggered so we put the device tree

99
00:05:30,110 --> 00:05:32,450
overlay loaded into the new currently

100
00:05:32,450 --> 00:05:34,729
present device tree that figures the

101
00:05:34,729 --> 00:05:36,350
reconciliation process which is shown in

102
00:05:36,350 --> 00:05:40,130
the next slide and the AAS bit stream is

103
00:05:40,130 --> 00:05:42,350
configured into the FPGA and afterwards

104
00:05:42,350 --> 00:05:43,940
the driver is loaded and the system is

105
00:05:43,940 --> 00:05:46,130
fully operational and can use the new

106
00:05:46,130 --> 00:05:52,150
hardware so that's the the process of

107
00:05:52,150 --> 00:05:54,410
reconfiguration we have the

108
00:05:54,410 --> 00:05:58,220
configuration part and the deactivation

109
00:05:58,220 --> 00:06:02,950
I would say and it's a multiple of steps

110
00:06:02,950 --> 00:06:06,020
the coloring I come back to that later

111
00:06:06,020 --> 00:06:06,760
on

112
00:06:06,760 --> 00:06:11,360
so we start with loading the device tree

113
00:06:11,360 --> 00:06:14,570
overnight as already presented and this

114
00:06:14,570 --> 00:06:17,030
triggers the the bitstream loading part

115
00:06:17,030 --> 00:06:19,039
interacting with the firmware subsystem

116
00:06:19,039 --> 00:06:23,570
and when the firmware is available the

117
00:06:23,570 --> 00:06:26,120
devices are decoupled so to make the

118
00:06:26,120 --> 00:06:29,000
FPGA ready for reconfiguration and do

119
00:06:29,000 --> 00:06:30,889
not disturbing any other parts and the

120
00:06:30,889 --> 00:06:34,389
FPGA that's that are keep on working and

121
00:06:34,389 --> 00:06:38,900
then the actually done reconfiguration

122
00:06:38,900 --> 00:06:41,960
is executed that uses the

123
00:06:41,960 --> 00:06:45,180
program and configuration access port

124
00:06:45,180 --> 00:06:49,230
and loads the bitstream into the FPGA

125
00:06:49,230 --> 00:06:52,760
which is actually one of the steps that

126
00:06:52,760 --> 00:06:56,400
contributes a larger amount of time to

127
00:06:56,400 --> 00:06:59,820
the overall process afterwards of this

128
00:06:59,820 --> 00:07:04,590
configuration is completed the region is

129
00:07:04,590 --> 00:07:07,620
coupled again so that from this point on

130
00:07:07,620 --> 00:07:10,590
the hardware can be accessed that has

131
00:07:10,590 --> 00:07:14,610
just been loaded into the FPGA and after

132
00:07:14,610 --> 00:07:17,370
that there's a change that has just been

133
00:07:17,370 --> 00:07:19,920
done to the hardware needs to be

134
00:07:19,920 --> 00:07:22,170
reflected into the device tree so that

135
00:07:22,170 --> 00:07:24,180
all other systems now know and are aware

136
00:07:24,180 --> 00:07:27,990
about this new hardware so this is the

137
00:07:27,990 --> 00:07:30,230
application of the device tree overlay

138
00:07:30,230 --> 00:07:33,240
after that all the other subsystems that

139
00:07:33,240 --> 00:07:36,990
might be involved and one might use this

140
00:07:36,990 --> 00:07:42,000
new hardware now gets triggered so the

141
00:07:42,000 --> 00:07:44,220
driver is loaded that is specific to

142
00:07:44,220 --> 00:07:47,370
this new hardware and all the subsystems

143
00:07:47,370 --> 00:07:50,520
I initialized like in our case the

144
00:07:50,520 --> 00:07:55,890
support for a crypto API then the system

145
00:07:55,890 --> 00:07:57,900
is ready it can be used

146
00:07:57,900 --> 00:08:00,780
that's this cycle that's usually people

147
00:08:00,780 --> 00:08:03,720
are interested in but as you have

148
00:08:03,720 --> 00:08:06,060
reconfigurable systems you all you also

149
00:08:06,060 --> 00:08:08,280
want to know how fast can a reconfigure

150
00:08:08,280 --> 00:08:11,580
a system how long is my that's a dead

151
00:08:11,580 --> 00:08:14,640
time in in case I I cannot actually use

152
00:08:14,640 --> 00:08:17,190
the resources I have within the e system

153
00:08:17,190 --> 00:08:20,040
because they are bound within this

154
00:08:20,040 --> 00:08:24,210
process here and that's why we started

155
00:08:24,210 --> 00:08:26,400
to have a closer look at it which steps

156
00:08:26,400 --> 00:08:31,880
are executed and which take how long and

157
00:08:31,880 --> 00:08:35,909
that's coming later on then so let's say

158
00:08:35,909 --> 00:08:38,729
the the execution phase ends at some

159
00:08:38,729 --> 00:08:40,409
time you have encrypted your file or

160
00:08:40,409 --> 00:08:45,360
whatever you have been done and then you

161
00:08:45,360 --> 00:08:48,150
go on you want to reuse this region you

162
00:08:48,150 --> 00:08:50,880
want to put another algorithm into the

163
00:08:50,880 --> 00:08:54,780
device you're the undie platform drivers

164
00:08:54,780 --> 00:08:55,440
unload

165
00:08:55,440 --> 00:08:59,270
the DCO that you realize your overlay is

166
00:08:59,270 --> 00:09:01,710
unremoved from the currently present

167
00:09:01,710 --> 00:09:05,490
device tree and the region has decoupled

168
00:09:05,490 --> 00:09:08,520
again from the system so after this step

169
00:09:08,520 --> 00:09:13,410
we are ready again and the the complete

170
00:09:13,410 --> 00:09:17,820
process can start all over again let's

171
00:09:17,820 --> 00:09:19,560
come to some of the results that we

172
00:09:19,560 --> 00:09:23,730
obtained during measuring the system so

173
00:09:23,730 --> 00:09:25,770
as there are a couple of steps involved

174
00:09:25,770 --> 00:09:28,980
will drive us from the chip render and

175
00:09:28,980 --> 00:09:31,200
also some more subsystems within the

176
00:09:31,200 --> 00:09:35,730
kernel we used F trays to gather

177
00:09:35,730 --> 00:09:38,010
information about when functions will

178
00:09:38,010 --> 00:09:40,410
enter and exit during the overall

179
00:09:40,410 --> 00:09:45,270
process then originally the intention

180
00:09:45,270 --> 00:09:47,400
was to show or to see what what the

181
00:09:47,400 --> 00:09:51,440
performance of our accelerator was but

182
00:09:51,440 --> 00:09:53,790
then we discover about this interesting

183
00:09:53,790 --> 00:09:56,640
process and now we present as this

184
00:09:56,640 --> 00:09:58,650
resides because there are more general

185
00:09:58,650 --> 00:10:03,290
interesting than our specific ones and

186
00:10:03,290 --> 00:10:06,840
yeah we use F trays for this our

187
00:10:06,840 --> 00:10:09,630
bitstream size or so the the size of our

188
00:10:09,630 --> 00:10:13,290
accelerator was almost 6 megabits mega

189
00:10:13,290 --> 00:10:15,210
by it that have been loaded into the

190
00:10:15,210 --> 00:10:21,540
FPGA and this overall process for all of

191
00:10:21,540 --> 00:10:24,930
that verb take it took about 135

192
00:10:24,930 --> 00:10:29,160
milliseconds and so you see if you want

193
00:10:29,160 --> 00:10:31,770
to change the encryption algorithm for

194
00:10:31,770 --> 00:10:35,130
your hardware accelerator to I don't

195
00:10:35,130 --> 00:10:35,480
know

196
00:10:35,480 --> 00:10:37,770
encrypt one email and then another one

197
00:10:37,770 --> 00:10:40,110
for another email you see that probably

198
00:10:40,110 --> 00:10:42,870
does needs to lead to an very efficient

199
00:10:42,870 --> 00:10:44,100
system because you spent more time

200
00:10:44,100 --> 00:10:48,920
reconfiguring it than actually computing

201
00:10:48,920 --> 00:10:53,250
an interesting part was to see that the

202
00:10:53,250 --> 00:10:56,580
the second largest contributor to the

203
00:10:56,580 --> 00:10:59,970
overall time is actually loading the bit

204
00:10:59,970 --> 00:11:03,480
stream and that doesn't involve the FPGA

205
00:11:03,480 --> 00:11:06,060
anyway so it's just fetching the bit

206
00:11:06,060 --> 00:11:07,059
stream

207
00:11:07,059 --> 00:11:11,199
that can be accelerated but that's let's

208
00:11:11,199 --> 00:11:13,409
come back to that later

209
00:11:13,409 --> 00:11:17,829
so that was what we originally also

210
00:11:17,829 --> 00:11:19,119
thought about was the main

211
00:11:19,119 --> 00:11:21,009
contributor that's the actual

212
00:11:21,009 --> 00:11:24,759
configuration process itself that's the

213
00:11:24,759 --> 00:11:27,039
time needed to transport the bitstream

214
00:11:27,039 --> 00:11:29,499
from the RAM to the configuration memory

215
00:11:29,499 --> 00:11:34,169
on the FPGA through various

216
00:11:34,169 --> 00:11:37,599
interconnects connectivity interfaces on

217
00:11:37,599 --> 00:11:40,539
on the it on the chip and the third

218
00:11:40,539 --> 00:11:44,769
largest contributor is the driver itself

219
00:11:44,769 --> 00:11:49,479
so that's also interesting as this is

220
00:11:49,479 --> 00:11:52,359
not a part of the framework so anybody

221
00:11:52,359 --> 00:11:55,689
who implements drivers for reconfiguring

222
00:11:55,689 --> 00:11:57,699
systems should think about the setup

223
00:11:57,699 --> 00:12:02,049
times for them the good news is only 1%

224
00:12:02,049 --> 00:12:03,999
of the overall time is spent within the

225
00:12:03,999 --> 00:12:06,699
FPGA framework on everything else that

226
00:12:06,699 --> 00:12:10,319
we haven't covered in in this slide so

227
00:12:10,319 --> 00:12:13,149
the framework itself seems to be quite

228
00:12:13,149 --> 00:12:16,589
well implemented with less overhead and

229
00:12:16,589 --> 00:12:21,759
shows good performance and that also

230
00:12:21,759 --> 00:12:26,079
leads the next slide as we see

231
00:12:26,079 --> 00:12:28,839
performance bottlenecks especially with

232
00:12:28,839 --> 00:12:31,059
respect to the FPGA a reconfiguration

233
00:12:31,059 --> 00:12:36,099
interface that's nothing we can change

234
00:12:36,099 --> 00:12:38,199
about as the FPGA when must have to

235
00:12:38,199 --> 00:12:42,759
support that also some issues within the

236
00:12:42,759 --> 00:12:46,239
fabric root causes for that so that

237
00:12:46,239 --> 00:12:47,589
communication with the reconfiguration

238
00:12:47,589 --> 00:12:50,529
access part is actually bit slower than

239
00:12:50,529 --> 00:12:52,119
it should be

240
00:12:52,119 --> 00:12:55,029
the firmware caching itself has not yet

241
00:12:55,029 --> 00:12:57,369
been used and in the system so that's

242
00:12:57,369 --> 00:13:01,359
that can be implemented within the FPGA

243
00:13:01,359 --> 00:13:04,269
framework in the kernel that currently

244
00:13:04,269 --> 00:13:06,129
does not level registry the caching

245
00:13:06,129 --> 00:13:08,799
mechanism which is already built in to

246
00:13:08,799 --> 00:13:14,009
the firmware subsystem yeah I just know

247
00:13:14,009 --> 00:13:17,639
components that have traditionally built

248
00:13:17,639 --> 00:13:19,870
into reconfigurable

249
00:13:19,870 --> 00:13:24,690
supports schedulers and governors or

250
00:13:24,690 --> 00:13:28,180
whatever other things are needed to make

251
00:13:28,180 --> 00:13:30,730
an efficient use of the hardware that

252
00:13:30,730 --> 00:13:35,260
has just been enabled that's hopefully

253
00:13:35,260 --> 00:13:36,970
intentionally left out of the scope of

254
00:13:36,970 --> 00:13:42,670
the FPGA manager as that's very used

255
00:13:42,670 --> 00:13:46,360
case specific and we can implement it

256
00:13:46,360 --> 00:13:51,700
and use our space anyway yeah using

257
00:13:51,700 --> 00:13:54,850
device through overlays uses interfaces

258
00:13:54,850 --> 00:13:57,790
that are more or less stable currently

259
00:13:57,790 --> 00:14:00,690
it has they have been developed for

260
00:14:00,690 --> 00:14:03,190
supporting shields and modular embedded

261
00:14:03,190 --> 00:14:04,839
systems like the raspberry PI's out

262
00:14:04,839 --> 00:14:09,790
there and we just reuse them for

263
00:14:09,790 --> 00:14:12,940
reconfigurable systems and that works

264
00:14:12,940 --> 00:14:15,970
quite well for now which would be an

265
00:14:15,970 --> 00:14:18,360
interesting part is getting

266
00:14:18,360 --> 00:14:21,160
automatically automatically generated

267
00:14:21,160 --> 00:14:24,640
device for overlay from the vendor tools

268
00:14:24,640 --> 00:14:29,860
as they usually do generate general

269
00:14:29,860 --> 00:14:33,820
drivers for hardware parts that have

270
00:14:33,820 --> 00:14:35,980
been created some of the mappings like

271
00:14:35,980 --> 00:14:38,980
addresses or offsets and some things are

272
00:14:38,980 --> 00:14:41,470
known to those tools so that could

273
00:14:41,470 --> 00:14:45,820
actually help with using those approach

274
00:14:45,820 --> 00:14:50,740
and to get to our last slide it is a

275
00:14:50,740 --> 00:14:55,720
good reconfigurable system and we can

276
00:14:55,720 --> 00:14:58,720
use it it's efficiently supports using

277
00:14:58,720 --> 00:15:02,260
reconfigurable systems and the

278
00:15:02,260 --> 00:15:04,260
reconfiguration times are quite slow

279
00:15:04,260 --> 00:15:08,310
fast but the overhead is low and we can

280
00:15:08,310 --> 00:15:11,200
efficiently develop a heterogeneous

281
00:15:11,200 --> 00:15:14,500
systems by them because of we don't need

282
00:15:14,500 --> 00:15:16,600
reboots if you change our hardware this

283
00:15:16,600 --> 00:15:20,200
is a traditional problem so you get fast

284
00:15:20,200 --> 00:15:23,200
test cycles you have a complete

285
00:15:23,200 --> 00:15:25,450
compatibility layer for static and

286
00:15:25,450 --> 00:15:28,020
reconfigurable systems so that's not

287
00:15:28,020 --> 00:15:31,959
especially needed to reconfigure but it

288
00:15:31,959 --> 00:15:33,050
can also be used to

289
00:15:33,050 --> 00:15:37,279
TEKsystems let's conclude that's it

290
00:15:37,279 --> 00:15:38,890
thank you

291
00:15:38,890 --> 00:15:44,870
[Applause]

