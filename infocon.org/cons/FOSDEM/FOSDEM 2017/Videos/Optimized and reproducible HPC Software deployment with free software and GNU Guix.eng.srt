1
00:00:01,340 --> 00:00:05,250
so the next clock is about using the new

2
00:00:05,250 --> 00:00:09,000
geeks on HPC systems so my little bit

3
00:00:09,000 --> 00:00:11,940
cambiado right so good morning everyone

4
00:00:11,940 --> 00:00:13,800
so this is again going to be one of

5
00:00:13,800 --> 00:00:16,890
these two people talks and so I'm little

6
00:00:16,890 --> 00:00:19,230
bit contests and prints is going to talk

7
00:00:19,230 --> 00:00:22,140
afterwards about how we can use geeks on

8
00:00:22,140 --> 00:00:24,509
HPC systems where we don't have root

9
00:00:24,509 --> 00:00:28,679
access so before I go into the details

10
00:00:28,679 --> 00:00:31,109
about what geeks is and all that let me

11
00:00:31,109 --> 00:00:33,960
first recap what the situation is on HPC

12
00:00:33,960 --> 00:00:37,200
systems so I'm guessing that many people

13
00:00:37,200 --> 00:00:38,970
here are familiar with what the

14
00:00:38,970 --> 00:00:41,430
situation is on HPC systems is not that

15
00:00:41,430 --> 00:00:44,280
great we already had a talk this morning

16
00:00:44,280 --> 00:00:47,580
about how to improve things let me just

17
00:00:47,580 --> 00:00:50,280
describe a few key ingredients of what

18
00:00:50,280 --> 00:00:52,770
you can find on most systems nowadays so

19
00:00:52,770 --> 00:00:56,030
this is a recipe so the first ingredient

20
00:00:56,030 --> 00:00:59,100
is you have your you know supercomputer

21
00:00:59,100 --> 00:01:01,470
it's superfast it's wonderful and so

22
00:01:01,470 --> 00:01:03,540
first thing you do is you you install an

23
00:01:03,540 --> 00:01:06,570
old new Linux distribution right it's

24
00:01:06,570 --> 00:01:08,579
outdated so people are going to complain

25
00:01:08,579 --> 00:01:11,130
you know that so right from the start

26
00:01:11,130 --> 00:01:14,039
and it's also inflexible right if you're

27
00:01:14,039 --> 00:01:16,079
not roots on that machine you're not

28
00:01:16,079 --> 00:01:18,090
going to be able to do sudo apt-get

29
00:01:18,090 --> 00:01:21,179
install blah blah right so at the as an

30
00:01:21,179 --> 00:01:23,310
HPC user you're not going to be

31
00:01:23,310 --> 00:01:26,579
satisfied right so sis admins have come

32
00:01:26,579 --> 00:01:28,859
up with solutions to try on and improve

33
00:01:28,859 --> 00:01:32,429
on that situation so the main solution

34
00:01:32,429 --> 00:01:35,100
that we're seeing so far is to add a

35
00:01:35,100 --> 00:01:38,039
layer of homemade modules so if you're

36
00:01:38,039 --> 00:01:39,450
not familiar with modules

37
00:01:39,450 --> 00:01:42,600
it's dating so it's you know it's a set

38
00:01:42,600 --> 00:01:44,069
of commands that you can use from the

39
00:01:44,069 --> 00:01:46,259
shell and you can say okay I wanna load

40
00:01:46,259 --> 00:01:48,840
this specific package like GCC at that

41
00:01:48,840 --> 00:01:52,200
version yeah you can you know select

42
00:01:52,200 --> 00:01:53,069
what you want to have in your

43
00:01:53,069 --> 00:01:56,009
environments so that's already a great

44
00:01:56,009 --> 00:01:57,840
improvement because it brings a lot of

45
00:01:57,840 --> 00:02:00,329
flexibility that HPC users actually need

46
00:02:00,329 --> 00:02:03,049
right you know you have a machine with

47
00:02:03,049 --> 00:02:05,729
tens of users they have different needs

48
00:02:05,729 --> 00:02:08,038
in terms of libraries tools and versions

49
00:02:08,038 --> 00:02:09,538
and so you want them to be able to

50
00:02:09,538 --> 00:02:13,110
choose that now the problem is that to

51
00:02:13,110 --> 00:02:14,520
actually achieve that

52
00:02:14,520 --> 00:02:16,710
that means our essentially making a

53
00:02:16,710 --> 00:02:19,410
distribution of their own and doing that

54
00:02:19,410 --> 00:02:22,470
by hand all right so they're compiling

55
00:02:22,470 --> 00:02:24,510
lots of packages by themselves

56
00:02:24,510 --> 00:02:25,710
installing them in those special

57
00:02:25,710 --> 00:02:28,980
directories and so on and so forth so I

58
00:02:28,980 --> 00:02:30,360
know if it's the same for you but my

59
00:02:30,360 --> 00:02:32,280
experience with modules on the cluster

60
00:02:32,280 --> 00:02:34,940
at work has been pretty much like this

61
00:02:34,940 --> 00:02:37,860
so first thing you know sis admins are

62
00:02:37,860 --> 00:02:40,590
kind and they produce new modules you

63
00:02:40,590 --> 00:02:41,760
know with packages that you actually

64
00:02:41,760 --> 00:02:44,820
need but it doesn't work right from the

65
00:02:44,820 --> 00:02:46,740
start right so they first need to treat

66
00:02:46,740 --> 00:02:49,370
the modules until it kind of works and

67
00:02:49,370 --> 00:02:52,610
then it's like all right there is a

68
00:02:52,610 --> 00:02:55,890
there is a runtime linker error like I

69
00:02:55,890 --> 00:02:58,230
cannot you know when this command I get

70
00:02:58,230 --> 00:02:59,700
an undefined reference error or

71
00:02:59,700 --> 00:03:02,910
something and so they tweak things again

72
00:03:02,910 --> 00:03:05,790
and you know some user complains that

73
00:03:05,790 --> 00:03:07,740
this particular piece of software needs

74
00:03:07,740 --> 00:03:09,480
to be compared with different Flags so

75
00:03:09,480 --> 00:03:13,500
you know they tweak that module and then

76
00:03:13,500 --> 00:03:15,510
new versions are out so they need to

77
00:03:15,510 --> 00:03:17,940
rebuild everything and then some user is

78
00:03:17,940 --> 00:03:20,340
unhappy you know like you have a

79
00:03:20,340 --> 00:03:22,709
deadline for a paper submission and just

80
00:03:22,709 --> 00:03:24,270
check before the deadline they decide to

81
00:03:24,270 --> 00:03:25,830
upgrade everything and to remove the old

82
00:03:25,830 --> 00:03:27,840
versions and you're like wow I'm screwed

83
00:03:27,840 --> 00:03:31,170
and so that happens in reality right so

84
00:03:31,170 --> 00:03:33,420
we have flexibility but still the users

85
00:03:33,420 --> 00:03:37,110
can be in a hard situation and so on and

86
00:03:37,110 --> 00:03:39,630
so forth so that's not so great right

87
00:03:39,630 --> 00:03:42,120
and of course you can have user build

88
00:03:42,120 --> 00:03:44,880
software on top of that especially with

89
00:03:44,880 --> 00:03:46,500
all the language specific package

90
00:03:46,500 --> 00:03:49,860
managers so chris webber yesterday was

91
00:03:49,860 --> 00:03:52,110
saying this is one package manager per

92
00:03:52,110 --> 00:03:54,030
child it looks like it you know there is

93
00:03:54,030 --> 00:03:57,450
so many tools available so it's becoming

94
00:03:57,450 --> 00:04:02,130
a real mess so fortunately people have

95
00:04:02,130 --> 00:04:04,200
started to consider you know changing

96
00:04:04,200 --> 00:04:06,090
the status quo and we had to talk about

97
00:04:06,090 --> 00:04:08,910
singularity this morning and we'll have

98
00:04:08,910 --> 00:04:12,060
talked about EasyBib right after and so

99
00:04:12,060 --> 00:04:15,090
let's see how we can fix HPC cluster

100
00:04:15,090 --> 00:04:18,779
environments so essentially there are

101
00:04:18,779 --> 00:04:21,839
two approaches in use so the first

102
00:04:21,839 --> 00:04:24,150
approach is to write specific package

103
00:04:24,150 --> 00:04:26,729
managers for HPC that address those

104
00:04:26,729 --> 00:04:27,919
problems

105
00:04:27,919 --> 00:04:30,530
the main ones I know of our easy build

106
00:04:30,530 --> 00:04:34,069
and spark right and so these are package

107
00:04:34,069 --> 00:04:35,990
managers which are designed to be used

108
00:04:35,990 --> 00:04:38,300
on top of your you know old inflexible

109
00:04:38,300 --> 00:04:39,560
this tool that you have in the first

110
00:04:39,560 --> 00:04:44,419
place that's very good because it solves

111
00:04:44,419 --> 00:04:46,129
quite a number of the problems I

112
00:04:46,129 --> 00:04:48,110
mentioned so first of all people can

113
00:04:48,110 --> 00:04:50,870
actually share their packaged recipes as

114
00:04:50,870 --> 00:04:53,210
opposed to having each sysadmin of each

115
00:04:53,210 --> 00:04:55,340
machine building things by themselves

116
00:04:55,340 --> 00:04:59,090
just for their specific machine right so

117
00:04:59,090 --> 00:05:01,490
people can actually share their recipe

118
00:05:01,490 --> 00:05:04,669
their packages and it provides easy ways

119
00:05:04,669 --> 00:05:07,490
to deploy software because anyone can

120
00:05:07,490 --> 00:05:09,979
install these buildings back on on the

121
00:05:09,979 --> 00:05:12,409
machine without being routes so if you

122
00:05:12,409 --> 00:05:14,680
install easy build then you can you know

123
00:05:14,680 --> 00:05:17,930
install your favourite packages on that

124
00:05:17,930 --> 00:05:20,469
particular cluster and it works alright

125
00:05:20,469 --> 00:05:25,669
so that's that's a great improvement now

126
00:05:25,669 --> 00:05:27,139
there is some limitation with this

127
00:05:27,139 --> 00:05:31,189
approach I think I'm going to maybe not

128
00:05:31,189 --> 00:05:33,349
make friends with the next speaker but

129
00:05:33,349 --> 00:05:36,710
okay we'll discuss that so one of the

130
00:05:36,710 --> 00:05:40,099
main issues I can see that well so first

131
00:05:40,099 --> 00:05:42,229
of all as I said it's these are tools

132
00:05:42,229 --> 00:05:43,669
that are meant to be used on top of the

133
00:05:43,669 --> 00:05:45,349
distro that's that's available in the

134
00:05:45,349 --> 00:05:47,899
system right so every user is going to

135
00:05:47,899 --> 00:05:49,909
recompile software in their home

136
00:05:49,909 --> 00:05:52,279
directory and that can be kind of

137
00:05:52,279 --> 00:05:53,779
annoying you know that's that's kind of

138
00:05:53,779 --> 00:05:56,539
a waste of resources and you know CPU

139
00:05:56,539 --> 00:05:59,870
and storage the second issue is this one

140
00:05:59,870 --> 00:06:01,460
I don't know if you can read it from the

141
00:06:01,460 --> 00:06:05,330
back of the room but this is a you know

142
00:06:05,330 --> 00:06:08,000
a sample back report from easy build I

143
00:06:08,000 --> 00:06:11,509
think where people are saying well

144
00:06:11,509 --> 00:06:14,360
jesusí libraries sometimes end up being

145
00:06:14,360 --> 00:06:16,669
you know built with this flag and

146
00:06:16,669 --> 00:06:20,210
sometimes not you know that's not a

147
00:06:20,210 --> 00:06:22,129
great situation to be in right we'd

148
00:06:22,129 --> 00:06:25,699
rather have something reproducible this

149
00:06:25,699 --> 00:06:28,610
is kind of unavoidable because you know

150
00:06:28,610 --> 00:06:32,000
as a non-word user on new linux there is

151
00:06:32,000 --> 00:06:34,849
simply no way you can get a fully

152
00:06:34,849 --> 00:06:37,219
isolated build environment so that's

153
00:06:37,219 --> 00:06:41,419
what you end up with right okay and for

154
00:06:41,419 --> 00:06:41,770
good

155
00:06:41,770 --> 00:06:43,900
this is the same kind of big report but

156
00:06:43,900 --> 00:06:46,569
falls back this time and again you see

157
00:06:46,569 --> 00:06:48,610
on some computers we have this behavior

158
00:06:48,610 --> 00:06:50,379
and on some computers we have these

159
00:06:50,379 --> 00:06:52,750
different behavior that's not a great

160
00:06:52,750 --> 00:06:56,770
situation to be in so that was the first

161
00:06:56,770 --> 00:06:59,110
approach to fixing the HPC cluster

162
00:06:59,110 --> 00:07:01,539
environment issue second approach is to

163
00:07:01,539 --> 00:07:05,530
I would say give up on packaging so what

164
00:07:05,530 --> 00:07:06,310
does that mean

165
00:07:06,310 --> 00:07:08,259
have you heard of that thing called

166
00:07:08,259 --> 00:07:11,710
docker well that's the story you

167
00:07:11,710 --> 00:07:13,990
basically make an app bundle with docker

168
00:07:13,990 --> 00:07:15,970
or a singularity like we saw this

169
00:07:15,970 --> 00:07:18,970
morning but were you what you're doing

170
00:07:18,970 --> 00:07:20,710
when you're using an app bundle is

171
00:07:20,710 --> 00:07:22,690
essentially you're you're telling people

172
00:07:22,690 --> 00:07:25,750
okay this is my application right this

173
00:07:25,750 --> 00:07:26,680
all shrink-wrapped

174
00:07:26,680 --> 00:07:30,639
like Ricardo said yesterday essentially

175
00:07:30,639 --> 00:07:32,620
you're providing a complete image that

176
00:07:32,620 --> 00:07:34,360
contains you know all your dependencies

177
00:07:34,360 --> 00:07:36,430
plus your applications plus you know

178
00:07:36,430 --> 00:07:39,909
everything and that's not so great

179
00:07:39,909 --> 00:07:43,569
because it prevents experimentation like

180
00:07:43,569 --> 00:07:46,330
from a reproducible science viewpoint

181
00:07:46,330 --> 00:07:48,550
you not only want to be able to run the

182
00:07:48,550 --> 00:07:51,159
software as these you also want to like

183
00:07:51,159 --> 00:07:53,530
fiddle with that that particular box

184
00:07:53,530 --> 00:07:56,650
here right and how do you do that see

185
00:07:56,650 --> 00:07:58,930
that's not if if all you have are the

186
00:07:58,930 --> 00:08:01,150
the bits of this app bundle well that's

187
00:08:01,150 --> 00:08:04,150
not very helpful and also what if

188
00:08:04,150 --> 00:08:06,279
somebody comes and say hey look I have

189
00:08:06,279 --> 00:08:08,050
my application also available as a

190
00:08:08,050 --> 00:08:10,599
bundle right and now how do you compute

191
00:08:10,599 --> 00:08:12,669
them right you end up with you know

192
00:08:12,669 --> 00:08:14,620
maybe this box and this box is the same

193
00:08:14,620 --> 00:08:16,210
but there's nothing you can do right

194
00:08:16,210 --> 00:08:21,699
they are not shared at all so I think

195
00:08:21,699 --> 00:08:24,069
this solution is the wrong one

196
00:08:24,069 --> 00:08:27,969
to put it simply so this one the

197
00:08:27,969 --> 00:08:29,800
question is can we have our cake and eat

198
00:08:29,800 --> 00:08:33,510
it too and that's where geeks comes in

199
00:08:33,510 --> 00:08:36,010
so how many people in the room have

200
00:08:36,010 --> 00:08:38,159
heard about geeks

201
00:08:38,159 --> 00:08:41,849
ok that's yeah like half of the room

202
00:08:41,849 --> 00:08:45,430
so essentially geeks is a package

203
00:08:45,430 --> 00:08:47,260
manager

204
00:08:47,260 --> 00:08:49,540
it's a transactional package managers

205
00:08:49,540 --> 00:08:52,060
like that can be used as non-root it

206
00:08:52,060 --> 00:08:53,140
allows you to manage software

207
00:08:53,140 --> 00:08:55,060
environments it provides lots of tools

208
00:08:55,060 --> 00:08:55,570
and ap

209
00:08:55,570 --> 00:08:57,460
is to feed always you know packages

210
00:08:57,460 --> 00:09:00,880
environments and so on it has like

211
00:09:00,880 --> 00:09:04,300
almost 5,000 packages available on four

212
00:09:04,300 --> 00:09:06,150
architectures and we are providing

213
00:09:06,150 --> 00:09:09,090
binaries through continuous integration

214
00:09:09,090 --> 00:09:12,220
so when you're using gigs and if you

215
00:09:12,220 --> 00:09:14,680
want to trust the binaries you we

216
00:09:14,680 --> 00:09:16,810
provide from our server you can simply

217
00:09:16,810 --> 00:09:21,280
use them it has a pretty active

218
00:09:21,280 --> 00:09:24,550
community with roughly 40 contributors

219
00:09:24,550 --> 00:09:26,710
every month so I would say yeah it's

220
00:09:26,710 --> 00:09:30,010
pretty active so how does that work how

221
00:09:30,010 --> 00:09:34,030
much things like two minutes okay so let

222
00:09:34,030 --> 00:09:38,580
me see just a very quick demo

223
00:09:38,580 --> 00:09:40,300
essentially you have a command-line

224
00:09:40,300 --> 00:09:42,040
interface that allows you to search for

225
00:09:42,040 --> 00:09:45,130
packages to install packages and this is

226
00:09:45,130 --> 00:09:48,900
this is happening as non-root right okay

227
00:09:48,900 --> 00:09:52,060
it tells you what environment variables

228
00:09:52,060 --> 00:09:54,160
you may need to set in your in your

229
00:09:54,160 --> 00:09:55,630
environment if you want to be able to

230
00:09:55,630 --> 00:09:59,950
use the software and this is all

231
00:09:59,950 --> 00:10:01,750
transactional so in a single transaction

232
00:10:01,750 --> 00:10:04,360
you can say I want to install something

233
00:10:04,360 --> 00:10:09,490
and we move something else right that's

234
00:10:09,490 --> 00:10:11,800
a single transaction and if you're

235
00:10:11,800 --> 00:10:14,320
unhappy then you can always roll back

236
00:10:14,320 --> 00:10:18,040
and this is all per user so if you're on

237
00:10:18,040 --> 00:10:19,990
an HPC cluster that means that everyone

238
00:10:19,990 --> 00:10:21,960
can run these commands for themselves

239
00:10:21,960 --> 00:10:26,020
which is pretty pretty nice okay you can

240
00:10:26,020 --> 00:10:28,600
list the generations and finally wall

241
00:10:28,600 --> 00:10:32,310
back if you're happy with the new setup

242
00:10:32,310 --> 00:10:36,520
okay so how did it work well under the

243
00:10:36,520 --> 00:10:39,130
hood all the packages are built in

244
00:10:39,130 --> 00:10:41,290
isolated environments so this is really

245
00:10:41,290 --> 00:10:44,260
the crucial part here so we're building

246
00:10:44,260 --> 00:10:47,110
packages in NCH routes with separate

247
00:10:47,110 --> 00:10:49,260
namespaces and so on and so forth so

248
00:10:49,260 --> 00:10:52,840
containers and what we get as a result

249
00:10:52,840 --> 00:10:56,920
is a unique file name in in that store

250
00:10:56,920 --> 00:11:02,530
directory with that long hash right and

251
00:11:02,530 --> 00:11:04,600
essentially everything is going to be

252
00:11:04,600 --> 00:11:06,820
well almost everything is going to be

253
00:11:06,820 --> 00:11:08,620
bit identical for every

254
00:11:08,620 --> 00:11:11,290
like if I build this package and shots

255
00:11:11,290 --> 00:11:12,670
build this package on a different

256
00:11:12,670 --> 00:11:14,980
machine we're going to get the very same

257
00:11:14,980 --> 00:11:20,610
beats most of the time so in in a paper

258
00:11:20,610 --> 00:11:23,560
Ricardo Ramos and myself wrote we

259
00:11:23,560 --> 00:11:26,490
explain how this kind of tool can be

260
00:11:26,490 --> 00:11:30,550
useful in an HPC setup and what you know

261
00:11:30,550 --> 00:11:33,790
what kind of goodies provides and so for

262
00:11:33,790 --> 00:11:35,470
from an experimentation viewpoint it

263
00:11:35,470 --> 00:11:38,710
means it has tools to create package

264
00:11:38,710 --> 00:11:41,770
variants you know you can say I want to

265
00:11:41,770 --> 00:11:43,450
use this package between different

266
00:11:43,450 --> 00:11:46,360
source I want to use this MEMS package

267
00:11:46,360 --> 00:11:47,710
but I want to use the different

268
00:11:47,710 --> 00:11:50,350
dependencies and so on and so forth and

269
00:11:50,350 --> 00:11:52,390
you can have your personal packages as

270
00:11:52,390 --> 00:11:53,640
well

271
00:11:53,640 --> 00:11:57,070
okay so pure is going to talk about non

272
00:11:57,070 --> 00:11:59,790
root usage

273
00:12:18,130 --> 00:12:20,510
so just wanna I think so

274
00:12:20,510 --> 00:12:22,430
I was talking about isolated build

275
00:12:22,430 --> 00:12:25,250
environments right and essentially we

276
00:12:25,250 --> 00:12:27,440
have a build demon here and that's what

277
00:12:27,440 --> 00:12:30,019
provides isolated build environments but

278
00:12:30,019 --> 00:12:32,209
that demon needs to run as root which is

279
00:12:32,209 --> 00:12:35,480
you know a source of problem on HPC

280
00:12:35,480 --> 00:12:37,339
machines where you cannot have this

281
00:12:37,339 --> 00:12:41,149
demon running as wolves right I mean I

282
00:12:41,149 --> 00:12:51,519
have a solution this is work

283
00:12:53,860 --> 00:12:57,139
alright so taking off we're a little

284
00:12:57,139 --> 00:12:57,800
left off

285
00:12:57,800 --> 00:13:00,500
yeah geeks basically installs in a path

286
00:13:00,500 --> 00:13:02,690
called new slash store yeah and this is

287
00:13:02,690 --> 00:13:04,519
done for reasons reproducibility we want

288
00:13:04,519 --> 00:13:06,589
everything to be exactly the same in

289
00:13:06,589 --> 00:13:10,550
every environment but on the typical HPC

290
00:13:10,550 --> 00:13:12,529
setup and I'm using a supercomputer at

291
00:13:12,529 --> 00:13:15,290
Oakridge yeah we're not allowed to run a

292
00:13:15,290 --> 00:13:17,240
demon with root privileges you know so

293
00:13:17,240 --> 00:13:19,279
the build system running on oak reaches

294
00:13:19,279 --> 00:13:23,360
out one solution we have which is also

295
00:13:23,360 --> 00:13:25,209
described by Ricardo is he who is here

296
00:13:25,209 --> 00:13:28,339
you could mount a new store through NFS

297
00:13:28,339 --> 00:13:30,230
and have to have a build demon sitting

298
00:13:30,230 --> 00:13:33,339
on a separate note somewhere which is a

299
00:13:33,339 --> 00:13:35,209
possibility of creating these packages

300
00:13:35,209 --> 00:13:36,440
download these packages installing these

301
00:13:36,440 --> 00:13:38,930
packages and making them available in

302
00:13:38,930 --> 00:13:40,699
the cluster so if you gave a slightly

303
00:13:40,699 --> 00:13:42,260
enlightened system minister this is a

304
00:13:42,260 --> 00:13:46,160
possibility but if you don't what what

305
00:13:46,160 --> 00:13:49,040
do you do right so some years back with

306
00:13:49,040 --> 00:13:52,130
the next set right and this is this is a

307
00:13:52,130 --> 00:13:53,269
link actually this these slides are

308
00:13:53,269 --> 00:13:55,670
online you can you can download them if

309
00:13:55,670 --> 00:13:56,779
you click on this link it will take you

310
00:13:56,779 --> 00:13:57,980
to the next distribution which is

311
00:13:57,980 --> 00:13:59,779
assisted distribution of geeks geeks was

312
00:13:59,779 --> 00:14:03,529
forked of Nyx five years ago and I try

313
00:14:03,529 --> 00:14:04,910
to use P route and people it worked

314
00:14:04,910 --> 00:14:07,940
great yeah so it actually slams in you

315
00:14:07,940 --> 00:14:10,610
know a local directory for a global

316
00:14:10,610 --> 00:14:13,430
directory yeah so the new store actually

317
00:14:13,430 --> 00:14:15,290
goats remounted somewhere in my home

318
00:14:15,290 --> 00:14:17,120
directory and that way I could run this

319
00:14:17,120 --> 00:14:18,120
over with

320
00:14:18,120 --> 00:14:19,710
every time this direct it needs to be

321
00:14:19,710 --> 00:14:22,880
resolved yeah it slows down the process

322
00:14:22,880 --> 00:14:28,950
so a couple years back with a local Dora

323
00:14:28,950 --> 00:14:31,500
I'm all set for them here I had a

324
00:14:31,500 --> 00:14:33,029
discussion he said okay you know you

325
00:14:33,029 --> 00:14:34,650
have actually pretty unique path here

326
00:14:34,650 --> 00:14:35,010
right

327
00:14:35,010 --> 00:14:37,100
so for glitzy two point two point three

328
00:14:37,100 --> 00:14:39,870
the Lipsy library the shared library we

329
00:14:39,870 --> 00:14:41,150
have a path and it looks like this

330
00:14:41,150 --> 00:14:44,100
includes a hash value and if you would

331
00:14:44,100 --> 00:14:45,240
scan the software you could actually

332
00:14:45,240 --> 00:14:50,430
find this hash value yes if you do look

333
00:14:50,430 --> 00:14:52,529
for this you know the LinkedIn shared

334
00:14:52,529 --> 00:14:54,180
libraries of the LDC cope island

335
00:14:54,180 --> 00:14:57,390
decompiler you will see something like

336
00:14:57,390 --> 00:14:59,790
this yeah so this also explains the way

337
00:14:59,790 --> 00:15:02,850
what what gigs actually does right yeah

338
00:15:02,850 --> 00:15:05,580
it's it it hard links all these

339
00:15:05,580 --> 00:15:07,490
libraries yes so they are found

340
00:15:07,490 --> 00:15:12,839
separately on your system so one thing

341
00:15:12,839 --> 00:15:14,190
you could do is try to rewrite these

342
00:15:14,190 --> 00:15:15,660
targets inside the files

343
00:15:15,660 --> 00:15:18,600
yeah and Conda actually does this - in

344
00:15:18,600 --> 00:15:21,839
some cases yeah and only dependency you

345
00:15:21,839 --> 00:15:23,820
actually is left is the Linux kernel

346
00:15:23,820 --> 00:15:25,200
itself because actually when we when we

347
00:15:25,200 --> 00:15:28,050
ship this Eclipse is included and the

348
00:15:28,050 --> 00:15:30,120
Linnet loader the shared library loader

349
00:15:30,120 --> 00:15:31,830
is also included there which is this one

350
00:15:31,830 --> 00:15:39,450
load Linux so what happened here yeah

351
00:15:39,450 --> 00:15:41,339
the path is a fingerprint we scan all

352
00:15:41,339 --> 00:15:42,720
the files replace the fingerprints with

353
00:15:42,720 --> 00:15:44,279
something else which has a relative path

354
00:15:44,279 --> 00:15:46,110
so this is good news left store and here

355
00:15:46,110 --> 00:15:48,290
I have a home directory up to lbc test

356
00:15:48,290 --> 00:15:50,250
yeah and it worked

357
00:15:50,250 --> 00:15:52,080
yeah and there's a tool written by Elka

358
00:15:52,080 --> 00:15:53,850
called pad shelf which actually can do

359
00:15:53,850 --> 00:15:57,930
this for you on elf files and the link

360
00:15:57,930 --> 00:16:01,080
is here and in textual files like in

361
00:16:01,080 --> 00:16:02,520
Ruby and Perl there's also these these

362
00:16:02,520 --> 00:16:04,680
these long file names these have these

363
00:16:04,680 --> 00:16:05,910
fingerprints which could also be

364
00:16:05,910 --> 00:16:07,740
replaced easily of course unfortunately

365
00:16:07,740 --> 00:16:09,750
when it comes to Python and JVM it

366
00:16:09,750 --> 00:16:12,089
doesn't work that well mostly because

367
00:16:12,089 --> 00:16:14,220
they're not zero terminated yeah and you

368
00:16:14,220 --> 00:16:15,690
cannot just without knowing their

369
00:16:15,690 --> 00:16:17,100
internal file format description we

370
00:16:17,100 --> 00:16:21,110
cannot just expand these files yeah so

371
00:16:21,110 --> 00:16:24,029
so one night I had an idea I said well

372
00:16:24,029 --> 00:16:25,620
why don't we keep the file path exactly

373
00:16:25,620 --> 00:16:28,380
the same size and patch everything yeah

374
00:16:28,380 --> 00:16:31,410
so basically there's a second insight

375
00:16:31,410 --> 00:16:33,300
yes a the end of is something that has

376
00:16:33,300 --> 00:16:35,190
the exact same fine length so yeah

377
00:16:35,190 --> 00:16:37,730
string length it's the home user opt

378
00:16:37,730 --> 00:16:40,560
gets replaced and the hashed value

379
00:16:40,560 --> 00:16:43,319
basically it gets cannibalized yet to

380
00:16:43,319 --> 00:16:50,100
make it the same size okay and it works

381
00:16:50,100 --> 00:16:51,810
the only downside is that you know the

382
00:16:51,810 --> 00:16:53,399
prefix can have to be up to 40 letters

383
00:16:53,399 --> 00:16:56,069
long yeah because then your hash values

384
00:16:56,069 --> 00:17:00,209
going on the and the prefix so I've put

385
00:17:00,209 --> 00:17:01,709
in an example it's online you can do it

386
00:17:01,709 --> 00:17:04,679
yeah so you can download the latest D

387
00:17:04,679 --> 00:17:06,059
compiler which was released only a few

388
00:17:06,059 --> 00:17:09,390
days ago it's a 24 megabyte downloads it

389
00:17:09,390 --> 00:17:12,089
unpacks into 140 megabyte and installs

390
00:17:12,089 --> 00:17:16,409
in 3 seconds yeah so in the installation

391
00:17:16,409 --> 00:17:19,789
of course is the rewriting of the path

392
00:17:20,780 --> 00:17:23,220
and it comes with the batteries included

393
00:17:23,220 --> 00:17:24,569
right because all the shared libraries

394
00:17:24,569 --> 00:17:27,299
are with it and Eclipse e included so

395
00:17:27,299 --> 00:17:28,470
you don't have this typical problem that

396
00:17:28,470 --> 00:17:30,090
you get these glitzy incompatibilities

397
00:17:30,090 --> 00:17:32,940
or LLVM incompatible included in

398
00:17:32,940 --> 00:17:34,500
compatibility is because the kitchen

399
00:17:34,500 --> 00:17:40,860
sink is sink it's just included yeah so

400
00:17:40,860 --> 00:17:43,140
so far i've tried elysee i've tried ruby

401
00:17:43,140 --> 00:17:45,150
with SSL and nokogiri which also

402
00:17:45,150 --> 00:17:48,720
notorious and then a some bombuh tool

403
00:17:48,720 --> 00:17:51,809
which is a tool that is written in indy

404
00:17:51,809 --> 00:17:53,309
in the D language and it's actually

405
00:17:53,309 --> 00:17:55,799
deployed among many HBC's around the

406
00:17:55,799 --> 00:17:59,220
world yeah and this tool at the until

407
00:17:59,220 --> 00:18:00,929
today we've actually done you know by

408
00:18:00,929 --> 00:18:02,610
statically linking in the libraries yeah

409
00:18:02,610 --> 00:18:04,980
so it's a binary without any references

410
00:18:04,980 --> 00:18:07,260
to outside with the current version is

411
00:18:07,260 --> 00:18:09,059
actually were using now to debug

412
00:18:09,059 --> 00:18:13,070
problems comes with the shared libraries

413
00:18:13,070 --> 00:18:14,760
and more is coming

414
00:18:14,760 --> 00:18:17,220
yes our Oakridge actually takes a great

415
00:18:17,220 --> 00:18:19,380
interest in this project so maybe that

416
00:18:19,380 --> 00:18:22,980
we get some support from them so gigs

417
00:18:22,980 --> 00:18:24,690
all says cross copulation it's built in

418
00:18:24,690 --> 00:18:26,280
like Ludo said you know she could say

419
00:18:26,280 --> 00:18:28,049
something add like these builds and

420
00:18:28,049 --> 00:18:29,370
instead of target for the bits in this

421
00:18:29,370 --> 00:18:32,970
case and then compile something and then

422
00:18:32,970 --> 00:18:33,990
you moved to to the new architecture

423
00:18:33,990 --> 00:18:39,360
Nouveau just runs yeah so I think in the

424
00:18:39,360 --> 00:18:41,130
foreseeable future we will have fire

425
00:18:41,130 --> 00:18:44,539
support and also Nvidia

426
00:18:45,320 --> 00:18:47,669
so what does this actually gives us yeah

427
00:18:47,669 --> 00:18:49,259
the thing is to understand really

428
00:18:49,259 --> 00:18:51,360
clearly is that X is an existing

429
00:18:51,360 --> 00:18:53,100
distribution here so people are are

430
00:18:53,100 --> 00:18:54,899
using these packages everyday and

431
00:18:54,899 --> 00:18:57,059
there's thousands of people who deploy

432
00:18:57,059 --> 00:18:58,320
these packages as maybe a hundred

433
00:18:58,320 --> 00:18:59,580
thousand people who use these packages

434
00:18:59,580 --> 00:19:02,370
yeah so unlike many other systems like

435
00:19:02,370 --> 00:19:03,929
easy built which is you know kind of ad

436
00:19:03,929 --> 00:19:06,559
hoc you've actually completely

437
00:19:06,559 --> 00:19:09,809
reproducible and tested environment the

438
00:19:09,809 --> 00:19:11,159
only thing on this trick that I'm doing

439
00:19:11,159 --> 00:19:13,860
is rewriting the prefix yeah so if

440
00:19:13,860 --> 00:19:15,330
there's any issue with the software it

441
00:19:15,330 --> 00:19:16,590
could be it could have to do with the

442
00:19:16,590 --> 00:19:19,590
prefix itself but so far we've not hit

443
00:19:19,590 --> 00:19:22,529
any problems and I want to conclude that

444
00:19:22,529 --> 00:19:23,970
two simple ideas which happened at

445
00:19:23,970 --> 00:19:29,789
folsom can come a long way then we can

446
00:19:29,789 --> 00:19:31,320
carry built HPC you know I can easily

447
00:19:31,320 --> 00:19:33,419
see this happen you can create a

448
00:19:33,419 --> 00:19:35,370
repository of binary packages and this

449
00:19:35,370 --> 00:19:37,529
can be 1-click installs in essentially

450
00:19:37,529 --> 00:19:39,389
there already but the install script is

451
00:19:39,389 --> 00:19:41,399
inside the Tarble at this point you can

452
00:19:41,399 --> 00:19:43,019
have it outside you can ships over

453
00:19:43,019 --> 00:19:44,970
easily yeah

454
00:19:44,970 --> 00:19:59,220
maybe we get it in Linux thank you any

455
00:19:59,220 --> 00:20:07,350
questions I actually have a question one

456
00:20:07,350 --> 00:20:15,629
of the people actually you're hitting

457
00:20:15,629 --> 00:20:19,440
good points isolation is a big issue and

458
00:20:19,440 --> 00:20:22,320
there are actually people now combined

459
00:20:22,320 --> 00:20:25,730
easy builds with Nix

460
00:20:34,030 --> 00:20:37,640
don't talk to build all the scientific

461
00:20:37,640 --> 00:20:39,920
sort of it is that a use case that makes

462
00:20:39,920 --> 00:20:41,540
sense to you or do you say you just

463
00:20:41,540 --> 00:20:43,610
throw all these people up and go the

464
00:20:43,610 --> 00:20:51,530
geeks or next week yeah so about using

465
00:20:51,530 --> 00:20:53,300
geeks as a back-end for easy build I

466
00:20:53,300 --> 00:20:56,090
don't know exactly how that could work I

467
00:20:56,090 --> 00:20:57,320
guess I don't know is easy bit

468
00:20:57,320 --> 00:21:00,150
sufficiently well

469
00:21:00,150 --> 00:21:02,340
yeah I don't know I mean maybe it would

470
00:21:02,340 --> 00:21:03,900
make sense do you want to come in

471
00:21:03,900 --> 00:21:05,430
yeah I think calm down we've seen the

472
00:21:05,430 --> 00:21:09,090
same thing right so and I think with

473
00:21:09,090 --> 00:21:10,650
both these systems you have real prom

474
00:21:10,650 --> 00:21:12,300
with bootstrapping yeah because you you

475
00:21:12,300 --> 00:21:13,440
have to bootstrap from the underlying

476
00:21:13,440 --> 00:21:15,930
distribution all right so one thing

477
00:21:15,930 --> 00:21:17,970
these can do immediately is create the

478
00:21:17,970 --> 00:21:20,400
bootstrap environment and from and build

479
00:21:20,400 --> 00:21:22,560
up from there and then slowly you know

480
00:21:22,560 --> 00:21:24,690
when you have geeks it available you can

481
00:21:24,690 --> 00:21:26,790
start replacing you know the stuff

482
00:21:26,790 --> 00:21:27,900
that's already there you don't have to

483
00:21:27,900 --> 00:21:29,840
do again an easy build

484
00:21:29,840 --> 00:21:32,670
how much scientific software is now

485
00:21:32,670 --> 00:21:43,670
supported Ricardo yes Prince

486
00:21:50,039 --> 00:21:53,679
there are a few HPC deployments already

487
00:21:53,679 --> 00:21:55,629
and people mostly by you info people

488
00:21:55,629 --> 00:21:58,169
like this these two people have been

489
00:21:58,169 --> 00:22:01,299
packaging a lot of value in four plus HP

490
00:22:01,299 --> 00:22:04,600
c plus algebra software to the yeah i

491
00:22:04,600 --> 00:22:06,279
think about forunate are packages in

492
00:22:06,279 --> 00:22:19,120
there well geek sexy also has a

493
00:22:19,120 --> 00:22:21,279
generator for packages yeah so of an

494
00:22:21,279 --> 00:22:22,869
existing art packaging you want to pull

495
00:22:22,869 --> 00:22:34,450
it in most of it is generator there's

496
00:22:34,450 --> 00:22:37,029
other stuff in easy both reasonably sure

497
00:22:37,029 --> 00:22:38,950
it's nothing deep sets it just really

498
00:22:38,950 --> 00:22:41,470
really nicely just like interactive

499
00:22:41,470 --> 00:22:46,299
configurations right if you package

500
00:22:46,299 --> 00:22:52,929
denotes a package manager npm we found

501
00:22:52,929 --> 00:22:54,700
already at two people died on the way

502
00:22:54,700 --> 00:23:01,080
right yes

503
00:23:06,340 --> 00:23:15,849
that's pretty what if they're if they

504
00:23:15,849 --> 00:23:17,349
don't to use our studio at this point I

505
00:23:17,349 --> 00:23:22,769
would suggest geeks yeah sorry

506
00:23:22,769 --> 00:23:34,330
why leader should answer this right so

507
00:23:34,330 --> 00:23:36,129
yeah I mean obviously you should be

508
00:23:36,129 --> 00:23:39,369
using geeks that's I mean the reason is

509
00:23:39,369 --> 00:23:41,499
that you would get so the advantage you

510
00:23:41,499 --> 00:23:43,359
would get with geeks ovaries abilities

511
00:23:43,359 --> 00:23:45,940
that reproducibility thing right so we

512
00:23:45,940 --> 00:23:47,979
have we have our plus lots of our

513
00:23:47,979 --> 00:23:49,929
packages and if you install them with

514
00:23:49,929 --> 00:23:51,879
geeks it's gonna be reproducible you

515
00:23:51,879 --> 00:23:53,440
know that it's gonna work just like on

516
00:23:53,440 --> 00:23:55,809
every other machine of geeks users right

517
00:23:55,809 --> 00:23:58,839
there's not gonna be bad surprises just

518
00:23:58,839 --> 00:24:01,960
on your specific machine now you will

519
00:24:01,960 --> 00:24:04,749
also I mean as it is now you'll have

520
00:24:04,749 --> 00:24:06,849
probably to run that that build demon

521
00:24:06,849 --> 00:24:09,009
has rules which may or may not be a

522
00:24:09,009 --> 00:24:11,529
problem in your case but the solution

523
00:24:11,529 --> 00:24:13,869
that Pietro DS is precisely one of the

524
00:24:13,869 --> 00:24:15,729
options we want to offer for people who

525
00:24:15,729 --> 00:24:19,349
cannot run the demon ass words

526
00:24:28,550 --> 00:24:30,710
Yeah right yeah you can't get twister

527
00:24:30,710 --> 00:24:33,320
right yeah so so we have a couple of

528
00:24:33,320 --> 00:24:35,120
more gig stops tomorrow in the guard EV

529
00:24:35,120 --> 00:24:38,030
room yeah so if you're interesting the

530
00:24:38,030 --> 00:24:39,590
technology that you'll get a lot more

531
00:24:39,590 --> 00:24:41,949
out of that

532
00:24:59,590 --> 00:25:12,879
say Sunday please everyone that's all we

533
00:25:12,879 --> 00:25:14,409
have time for in terms of questions if

534
00:25:14,409 --> 00:25:15,480
you want if you have further questions

535
00:25:15,480 --> 00:25:18,279
ok meet up with little bit comes open

536
00:25:18,279 --> 00:25:20,559
outside keep the discussion going

537
00:25:20,559 --> 00:25:22,860
thank you very much

538
00:25:22,860 --> 00:25:26,110
[Applause]

