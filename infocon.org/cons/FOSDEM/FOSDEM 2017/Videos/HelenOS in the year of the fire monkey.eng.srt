1
00:00:00,120 --> 00:00:03,860
okay everybody thanks

2
00:00:04,440 --> 00:00:08,790
for coming to this status update of the

3
00:00:08,790 --> 00:00:14,160
Helena West project from 2016 my name is

4
00:00:14,160 --> 00:00:16,619
Martin jetski actually this dock should

5
00:00:16,619 --> 00:00:19,160
have been presented by here Kabir Marsh

6
00:00:19,160 --> 00:00:25,099
but unfortunately he fell ill this week

7
00:00:25,099 --> 00:00:28,199
nothing serious just an influenza but

8
00:00:28,199 --> 00:00:31,289
still it was hard for him to make it to

9
00:00:31,289 --> 00:00:33,480
force them so he asked me if I can jump

10
00:00:33,480 --> 00:00:39,030
in in the last minute I hope that this

11
00:00:39,030 --> 00:00:41,070
won't affect the quality of the talk too

12
00:00:41,070 --> 00:00:46,530
much so let's start before I dig into

13
00:00:46,530 --> 00:00:48,329
the technical details let me just

14
00:00:48,329 --> 00:00:52,469
refresh you some of you might not know

15
00:00:52,469 --> 00:00:55,320
what Helen OS is so let's have a brief

16
00:00:55,320 --> 00:00:58,260
introduction these are some adjectives

17
00:00:58,260 --> 00:01:00,870
that might describe her animus in a

18
00:01:00,870 --> 00:01:02,699
nutshell it's an open source

19
00:01:02,699 --> 00:01:05,970
general-purpose multi-platform article

20
00:01:05,970 --> 00:01:09,030
sorry microkernel multi server operating

21
00:01:09,030 --> 00:01:11,399
system designed and implemented from

22
00:01:11,399 --> 00:01:14,280
scratch and of course you can download

23
00:01:14,280 --> 00:01:17,220
the sources and also some binaries at

24
00:01:17,220 --> 00:01:20,250
our website which you could you see up

25
00:01:20,250 --> 00:01:24,209
there let's dig a little bit deeper so

26
00:01:24,209 --> 00:01:28,679
open source means that our own code the

27
00:01:28,679 --> 00:01:32,520
bulk of the code base has the BSD

28
00:01:32,520 --> 00:01:35,729
license the new BSD license and we also

29
00:01:35,729 --> 00:01:38,729
use some third-party components which we

30
00:01:38,729 --> 00:01:43,340
don't link directly to but which we use

31
00:01:43,340 --> 00:01:47,310
indirectly which are under GPL general

32
00:01:47,310 --> 00:01:50,190
purpose that means that we don't want to

33
00:01:50,190 --> 00:01:52,679
be biased towards any particle Hughes

34
00:01:52,679 --> 00:01:55,530
case or any particle deployment we want

35
00:01:55,530 --> 00:01:58,319
to create an operating system that is as

36
00:01:58,319 --> 00:02:02,789
useful for servers desktops embedded

37
00:02:02,789 --> 00:02:06,509
systems as for any other particle use

38
00:02:06,509 --> 00:02:09,899
case multi-platform we country support

39
00:02:09,899 --> 00:02:14,760
these seven hardware architectures this

40
00:02:14,760 --> 00:02:16,860
is our nomenclature but I I believe you

41
00:02:16,860 --> 00:02:17,910
can

42
00:02:17,910 --> 00:02:21,120
understand the abbreviations you might

43
00:02:21,120 --> 00:02:23,130
remember from last year that I have I

44
00:02:23,130 --> 00:02:26,430
set eight architectures nowadays it's

45
00:02:26,430 --> 00:02:28,890
seven that that's because we have

46
00:02:28,890 --> 00:02:31,980
removed one we have removed the SPARC v8

47
00:02:31,980 --> 00:02:37,320
the 32-bit spark variant because we lost

48
00:02:37,320 --> 00:02:40,200
access to this special kind of hardware

49
00:02:40,200 --> 00:02:44,340
it's being used mostly in in in the

50
00:02:44,340 --> 00:02:47,310
space domain and also the emulators for

51
00:02:47,310 --> 00:02:49,980
this platform are very hard to get if

52
00:02:49,980 --> 00:02:51,540
you don't want to pay thousands of

53
00:02:51,540 --> 00:02:54,510
dollars a year so to lower our

54
00:02:54,510 --> 00:02:56,340
maintenance burden we have removed this

55
00:02:56,340 --> 00:02:59,550
architecture but it might come back some

56
00:02:59,550 --> 00:03:00,690
time later

57
00:03:00,690 --> 00:03:03,450
it's a microkernel obviously I mean yes

58
00:03:03,450 --> 00:03:04,980
we are here in the microkernel in the

59
00:03:04,980 --> 00:03:07,890
room let's not talk about it it's a

60
00:03:07,890 --> 00:03:10,140
multi server that means that the entire

61
00:03:10,140 --> 00:03:14,280
system is composed from fine grained

62
00:03:14,280 --> 00:03:17,970
components and so if you are if you are

63
00:03:17,970 --> 00:03:20,430
looking for a fancy a buzzword

64
00:03:20,430 --> 00:03:22,380
describing this of the architecture it's

65
00:03:22,380 --> 00:03:25,620
micro-services and it really is I mean

66
00:03:25,620 --> 00:03:28,650
it's much it's an operating system built

67
00:03:28,650 --> 00:03:33,800
out of microservices and the the longest

68
00:03:33,800 --> 00:03:36,390
ejective designed and implemented from

69
00:03:36,390 --> 00:03:41,340
scratch we don't really mean it so in in

70
00:03:41,340 --> 00:03:43,800
the core components in the kernel in the

71
00:03:43,800 --> 00:03:47,900
user space we don't use any baroque code

72
00:03:47,900 --> 00:03:52,020
we designed the system in a way we see

73
00:03:52,020 --> 00:03:59,720
the most fit in 2017 so our native API

74
00:03:59,720 --> 00:04:06,090
tries to reflect our ideas of how how an

75
00:04:06,090 --> 00:04:08,280
app how a modern operating system should

76
00:04:08,280 --> 00:04:10,520
be designed we don't have a goal of

77
00:04:10,520 --> 00:04:15,120
implementing legacy api's because we

78
00:04:15,120 --> 00:04:16,829
really believe that there is no betrayal

79
00:04:16,829 --> 00:04:18,418
in Occident linux there is no better

80
00:04:18,418 --> 00:04:20,988
Windows than Windows we don't want to be

81
00:04:20,988 --> 00:04:25,080
better Linux and Linux we want to be the

82
00:04:25,080 --> 00:04:28,260
best microkernel operating system on the

83
00:04:28,260 --> 00:04:30,210
other hand of course for practical

84
00:04:30,210 --> 00:04:31,040
reasons

85
00:04:31,040 --> 00:04:34,590
for pragmatic reasons from time to time

86
00:04:34,590 --> 00:04:37,190
we do need to pour some some

87
00:04:37,190 --> 00:04:40,920
applications and libraries from these

88
00:04:40,920 --> 00:04:43,380
legacy systems so we do have an

89
00:04:43,380 --> 00:04:46,620
adaptation layer for poor change and we

90
00:04:46,620 --> 00:04:52,140
have some portrait components but this

91
00:04:52,140 --> 00:04:56,430
is a totally different topic so this

92
00:04:56,430 --> 00:04:59,850
this is an image that you probably

93
00:04:59,850 --> 00:05:03,990
aren't able to read in detail and it's

94
00:05:03,990 --> 00:05:06,810
fine in such a way because I don't

95
00:05:06,810 --> 00:05:09,060
really want to go into the architecture

96
00:05:09,060 --> 00:05:11,970
right now but it somehow shows the total

97
00:05:11,970 --> 00:05:14,310
composition of the system it's not not

98
00:05:14,310 --> 00:05:16,770
drawn it's not drawn in scale so this is

99
00:05:16,770 --> 00:05:19,470
this is the entire microkernel and these

100
00:05:19,470 --> 00:05:24,120
boxes might sometimes you present a few

101
00:05:24,120 --> 00:05:26,390
functions or even a single function so

102
00:05:26,390 --> 00:05:31,440
this is really not not a not a component

103
00:05:31,440 --> 00:05:34,710
but it shows that even our microkernel

104
00:05:34,710 --> 00:05:38,520
has some internal structure it's divided

105
00:05:38,520 --> 00:05:42,000
into into the large architecture

106
00:05:42,000 --> 00:05:44,330
independent part which implements

107
00:05:44,330 --> 00:05:47,010
everything in the same way on all

108
00:05:47,010 --> 00:05:49,740
architectures and there is an hardware

109
00:05:49,740 --> 00:05:52,020
abstraction layer and then there is the

110
00:05:52,020 --> 00:05:55,200
part that is platform specific it's

111
00:05:55,200 --> 00:06:00,000
roughly 10 to 15% of the kernel so we

112
00:06:00,000 --> 00:06:03,480
really try to make our code base as

113
00:06:03,480 --> 00:06:06,900
generic as possible and then this this

114
00:06:06,900 --> 00:06:09,510
entire microkernel is shown here as this

115
00:06:09,510 --> 00:06:11,910
single component of the system and then

116
00:06:11,910 --> 00:06:14,970
you can see the other components here

117
00:06:14,970 --> 00:06:18,450
and even even composed components like a

118
00:06:18,450 --> 00:06:23,210
file system compose component which

119
00:06:23,210 --> 00:06:25,350
logically contains all the other

120
00:06:25,350 --> 00:06:29,010
primitive components inside of it one

121
00:06:29,010 --> 00:06:34,170
note for example the networking is also

122
00:06:34,170 --> 00:06:38,490
d componentized so basically if you know

123
00:06:38,490 --> 00:06:41,640
the networking reference model the

124
00:06:41,640 --> 00:06:44,320
physical layer link layer

125
00:06:44,320 --> 00:06:46,480
transport layer and so on this is

126
00:06:46,480 --> 00:06:49,270
exactly the way how our networking stack

127
00:06:49,270 --> 00:06:51,550
is structured physically so there is a

128
00:06:51,550 --> 00:06:54,280
separate component separate tasks

129
00:06:54,280 --> 00:06:56,200
running in isolation from the other

130
00:06:56,200 --> 00:06:59,170
tasks in the networking stack for each

131
00:06:59,170 --> 00:07:04,480
each of the networking layer just to

132
00:07:04,480 --> 00:07:07,900
give you some rough idea in total this

133
00:07:07,900 --> 00:07:10,690
is really not just the kernel but in

134
00:07:10,690 --> 00:07:13,660
total this is the size of the codebase

135
00:07:13,660 --> 00:07:18,250
this is some rough estimate of the work

136
00:07:18,250 --> 00:07:20,260
effort of course the system was really

137
00:07:20,260 --> 00:07:22,120
wrong because the basic COCOMO model is

138
00:07:22,120 --> 00:07:25,240
not suited for for for systems or

139
00:07:25,240 --> 00:07:28,270
systems software but it can give you

140
00:07:28,270 --> 00:07:32,860
some idea and accept of let's say six to

141
00:07:32,860 --> 00:07:35,500
eight core developers this has been

142
00:07:35,500 --> 00:07:40,480
developed in the course of some twenty

143
00:07:40,480 --> 00:07:44,650
four master visas for bachelor thesis 11

144
00:07:44,650 --> 00:07:47,020
google Summer of Code projects and so on

145
00:07:47,020 --> 00:07:49,920
so so yeah I should really mention our

146
00:07:49,920 --> 00:07:52,260
contributors here because we are

147
00:07:52,260 --> 00:07:59,410
eternally thankful for them okay now you

148
00:07:59,410 --> 00:08:02,680
might think these are just some crazy

149
00:08:02,680 --> 00:08:04,390
people who are just trying to reinvent

150
00:08:04,390 --> 00:08:07,410
the wheel and this has no sense of

151
00:08:07,410 --> 00:08:12,250
really making giving any attention let

152
00:08:12,250 --> 00:08:14,980
me let me explain it from a different

153
00:08:14,980 --> 00:08:16,860
perspective

154
00:08:16,860 --> 00:08:20,320
the legacy operating systems of course

155
00:08:20,320 --> 00:08:22,900
they are working they are working quite

156
00:08:22,900 --> 00:08:27,190
well I would say but their designs and

157
00:08:27,190 --> 00:08:31,240
api's are in many cases broken insecure

158
00:08:31,240 --> 00:08:32,760
[Music]

159
00:08:32,760 --> 00:08:36,429
the very least they are morally morally

160
00:08:36,429 --> 00:08:40,210
obsolete and that doesn't necessarily

161
00:08:40,210 --> 00:08:42,549
mean that everything is wrong with with

162
00:08:42,549 --> 00:08:46,300
Linux or that that there is no hope of

163
00:08:46,300 --> 00:08:49,990
taking inspiration in in principles or

164
00:08:49,990 --> 00:08:52,000
implementations that have been around

165
00:08:52,000 --> 00:08:54,640
for for many years I have spoken about

166
00:08:54,640 --> 00:08:57,400
this topic two years back

167
00:08:57,400 --> 00:09:00,820
but many things can be can be designed

168
00:09:00,820 --> 00:09:03,100
in a better way with current software

169
00:09:03,100 --> 00:09:06,550
engineering standards and principles by

170
00:09:06,550 --> 00:09:08,670
thinking out of the box by not

171
00:09:08,670 --> 00:09:11,800
implementing yet another unix by not

172
00:09:11,800 --> 00:09:15,360
trying to reinvent england oaks or

173
00:09:15,360 --> 00:09:20,020
granting gnu/linux and also if i can

174
00:09:20,020 --> 00:09:22,780
slightly separate from my respected

175
00:09:22,780 --> 00:09:24,490
colleagues from other microkernel

176
00:09:24,490 --> 00:09:27,040
systems we also think that it's

177
00:09:27,040 --> 00:09:30,400
important that we write the bulk of our

178
00:09:30,400 --> 00:09:33,400
system core components ourselves that we

179
00:09:33,400 --> 00:09:37,210
don't import drivers from from linux

180
00:09:37,210 --> 00:09:41,200
using some driver driver device driver

181
00:09:41,200 --> 00:09:44,530
kits or ramp kernels or whatever because

182
00:09:44,530 --> 00:09:46,120
we are really afraid of Franken

183
00:09:46,120 --> 00:09:48,790
components we don't want them we want

184
00:09:48,790 --> 00:09:51,520
our components to suit our architecture

185
00:09:51,520 --> 00:09:55,000
not to somehow glue them together using

186
00:09:55,000 --> 00:09:57,970
calibration wires if you don't get get

187
00:09:57,970 --> 00:10:00,490
my idea I'll show you these three

188
00:10:00,490 --> 00:10:03,160
pictures and let them sink for for a few

189
00:10:03,160 --> 00:10:06,520
seconds so we don't want this we want an

190
00:10:06,520 --> 00:10:08,860
ER nicely designed and engineered

191
00:10:08,860 --> 00:10:17,790
operating system okay let's move on

192
00:10:19,019 --> 00:10:22,350
there's also another issue with

193
00:10:22,350 --> 00:10:25,330
borrowing components from other systems

194
00:10:25,330 --> 00:10:28,120
which we would like to avoid and that's

195
00:10:28,120 --> 00:10:31,140
the maintenance burden of the ds4

196
00:10:31,140 --> 00:10:34,930
components so once you you fork

197
00:10:34,930 --> 00:10:38,140
something from which is external you

198
00:10:38,140 --> 00:10:40,420
basically create what there could be our

199
00:10:40,420 --> 00:10:43,180
marsh goes software for sale so it's

200
00:10:43,180 --> 00:10:48,610
it's a snapshot of the code which the

201
00:10:48,610 --> 00:10:51,130
upstream is no longer required to

202
00:10:51,130 --> 00:10:53,589
maintain or to update you are required

203
00:10:53,589 --> 00:10:56,800
to do it and this creates the

204
00:10:56,800 --> 00:11:01,540
possibility of you forgetting or not not

205
00:11:01,540 --> 00:11:05,529
managing to back port security fixes new

206
00:11:05,529 --> 00:11:08,560
features sometimes you have to deal with

207
00:11:08,560 --> 00:11:12,279
diverging lease licenses and all this

208
00:11:12,279 --> 00:11:14,920
kind of stuff so the Helenus main line

209
00:11:14,920 --> 00:11:18,250
the the microkernel and the core

210
00:11:18,250 --> 00:11:20,470
components they are always fresh they

211
00:11:20,470 --> 00:11:23,410
are always working in sync and they

212
00:11:23,410 --> 00:11:27,640
don't age while the colony west coast

213
00:11:27,640 --> 00:11:29,680
line repository which contains the

214
00:11:29,680 --> 00:11:31,839
portrait software I have spoken about

215
00:11:31,839 --> 00:11:34,959
they they tend to do this and this for

216
00:11:34,959 --> 00:11:36,959
us really shows the difference between

217
00:11:36,959 --> 00:11:40,690
between creating the system in our own

218
00:11:40,690 --> 00:11:44,110
image and between porting some Frankin

219
00:11:44,110 --> 00:11:47,290
components from other systems because

220
00:11:47,290 --> 00:11:51,730
foreign components they don't follow our

221
00:11:51,730 --> 00:11:56,050
basic development principle to design

222
00:11:56,050 --> 00:11:58,750
something then implemented then run some

223
00:11:58,750 --> 00:12:01,680
verifications tests on it and then

224
00:12:01,680 --> 00:12:04,000
reiterating by learning from our own

225
00:12:04,000 --> 00:12:09,610
mistakes let me do a short Intermezzo

226
00:12:09,610 --> 00:12:11,890
here we would really like to cross

227
00:12:11,890 --> 00:12:16,060
pollinate I think we try every time we

228
00:12:16,060 --> 00:12:18,970
can so last year

229
00:12:18,970 --> 00:12:22,350
Jakub year math has created this website

230
00:12:22,350 --> 00:12:26,709
microkernel dot info and the idea behind

231
00:12:26,709 --> 00:12:31,600
it is really to to join our forces with

232
00:12:31,600 --> 00:12:32,590
our

233
00:12:32,590 --> 00:12:36,250
microkernel friends with other projects

234
00:12:36,250 --> 00:12:39,280
it has been inspired by the way--by by

235
00:12:39,280 --> 00:12:42,430
the website unicorn org in from the

236
00:12:42,430 --> 00:12:46,000
unicorn o community and the purpose is

237
00:12:46,000 --> 00:12:49,890
the same so it basically lists in

238
00:12:49,890 --> 00:12:53,170
alphabetical order the currently life

239
00:12:53,170 --> 00:12:57,610
and and progressing microkernel

240
00:12:57,610 --> 00:13:00,340
operating systems everybody can be

241
00:13:00,340 --> 00:13:04,240
included I mean there are no no no hard

242
00:13:04,240 --> 00:13:08,110
criteria for being accepted there is

243
00:13:08,110 --> 00:13:12,760
just just a brief brief overview of each

244
00:13:12,760 --> 00:13:17,260
of the systems and interlink of course

245
00:13:17,260 --> 00:13:18,850
the unicorn or guys that they went

246
00:13:18,850 --> 00:13:20,950
already a little bit further so their

247
00:13:20,950 --> 00:13:24,280
their euni-unni kernel.org website also

248
00:13:24,280 --> 00:13:26,560
contains some tutorials and some other

249
00:13:26,560 --> 00:13:28,660
helpful materials we can also have a

250
00:13:28,660 --> 00:13:31,120
tweet and also move in that direction no

251
00:13:31,120 --> 00:13:32,110
problem with that

252
00:13:32,110 --> 00:13:36,280
nobody just did it so again your input

253
00:13:36,280 --> 00:13:39,430
from everyone here is more than no more

254
00:13:39,430 --> 00:13:41,950
than welcome really the the purpose is

255
00:13:41,950 --> 00:13:45,190
to create some some quasi neutral ground

256
00:13:45,190 --> 00:13:49,750
for our own microkernel advocacy of

257
00:13:49,750 --> 00:13:51,910
course it won't be totally neutral ever

258
00:13:51,910 --> 00:13:55,450
because everybody is somehow involved in

259
00:13:55,450 --> 00:13:58,900
in some of these systems more or less

260
00:13:58,900 --> 00:14:04,540
but but we can at least try and if I can

261
00:14:04,540 --> 00:14:07,150
even say so we have also become we have

262
00:14:07,150 --> 00:14:10,030
also the common enemy right so we can

263
00:14:10,030 --> 00:14:15,850
join forces well I was really more I

264
00:14:15,850 --> 00:14:19,660
could joke but I mean we are I would say

265
00:14:19,660 --> 00:14:21,610
that we are more friends with the unit

266
00:14:21,610 --> 00:14:23,080
kernel guys than we are with the

267
00:14:23,080 --> 00:14:25,660
monolithic kernel guys let's put it in

268
00:14:25,660 --> 00:14:30,160
that way so again please any

269
00:14:30,160 --> 00:14:33,070
contributions are welcome and the other

270
00:14:33,070 --> 00:14:35,530
suggestion for cross-pollination we have

271
00:14:35,530 --> 00:14:38,200
already discussed this in the in the

272
00:14:38,200 --> 00:14:40,510
mailing list of this dev room we would

273
00:14:40,510 --> 00:14:45,460
really like to apply for

274
00:14:45,460 --> 00:14:47,200
this year's google Summer of Code as a

275
00:14:47,200 --> 00:14:49,450
number of organization I mean

276
00:14:49,450 --> 00:14:51,670
Helen OS has some experience in google

277
00:14:51,670 --> 00:14:53,399
Summer of Code we have been accepted

278
00:14:53,399 --> 00:14:57,279
three times and we were quite successful

279
00:14:57,279 --> 00:14:58,210
in G Seok

280
00:14:58,210 --> 00:15:02,770
we weren't accepted five times but still

281
00:15:02,770 --> 00:15:05,230
google Summer of Code is very at least

282
00:15:05,230 --> 00:15:09,010
we see it as a very valuable thing for

283
00:15:09,010 --> 00:15:12,399
for a niche software project because it

284
00:15:12,399 --> 00:15:15,610
really widens the awareness or spreads

285
00:15:15,610 --> 00:15:20,020
the awareness of the project mmm more

286
00:15:20,020 --> 00:15:24,930
than anything else I would say so the

287
00:15:24,930 --> 00:15:27,339
you know the ratio between the

288
00:15:27,339 --> 00:15:31,149
acceptance and non acceptance we don't

289
00:15:31,149 --> 00:15:34,209
know why we were accepted in these years

290
00:15:34,209 --> 00:15:36,520
and weren't accepted in those years I

291
00:15:36,520 --> 00:15:39,459
mean obviously our application was was

292
00:15:39,459 --> 00:15:40,450
consistent

293
00:15:40,450 --> 00:15:43,000
we didn't didn't just grew up in the

294
00:15:43,000 --> 00:15:45,760
other years everybody knows that

295
00:15:45,760 --> 00:15:49,690
Google's Google is not sharing his or

296
00:15:49,690 --> 00:15:52,930
sorry its internal criteria for

297
00:15:52,930 --> 00:15:55,390
accepting projects into ji-sook so we

298
00:15:55,390 --> 00:15:58,150
don't know what what was the problem for

299
00:15:58,150 --> 00:16:01,209
them but we think or at least we have a

300
00:16:01,209 --> 00:16:04,510
hypothesis that one issue might be that

301
00:16:04,510 --> 00:16:08,890
they're simply just an ambulance or that

302
00:16:08,890 --> 00:16:10,029
there are two too many

303
00:16:10,029 --> 00:16:12,150
operating system projects in general

304
00:16:12,150 --> 00:16:14,770
applying for G so currently there is

305
00:16:14,770 --> 00:16:17,350
Linux FreeBSD NetBSD OpenBSD

306
00:16:17,350 --> 00:16:21,450
or almost all you can have it and

307
00:16:21,450 --> 00:16:24,520
probably they don't quite distinguished

308
00:16:24,520 --> 00:16:26,650
between the monolithic systems and

309
00:16:26,650 --> 00:16:29,950
microkernel systems so maybe and I

310
00:16:29,950 --> 00:16:31,660
really believe that we should at least

311
00:16:31,660 --> 00:16:35,170
try even if we don't succeed an umbrella

312
00:16:35,170 --> 00:16:40,209
organization for for all microkernel

313
00:16:40,209 --> 00:16:43,930
systems might help in in this way so we

314
00:16:43,930 --> 00:16:46,720
had already some I would say positive

315
00:16:46,720 --> 00:16:49,329
feedback from from some other guys so if

316
00:16:49,329 --> 00:16:53,380
if somebody wants to add something to it

317
00:16:53,380 --> 00:16:56,320
here let's discuss it here or during the

318
00:16:56,320 --> 00:16:57,320
dinner

319
00:16:57,320 --> 00:16:59,250
just think about some of the

320
00:16:59,250 --> 00:17:01,100
technicalities so the deadline of the

321
00:17:01,100 --> 00:17:04,199
application is approaching quickly we

322
00:17:04,199 --> 00:17:06,839
can manage it but we have to really

323
00:17:06,839 --> 00:17:11,790
agree on this sooner than later so so

324
00:17:11,790 --> 00:17:13,679
first question is who should fill in the

325
00:17:13,679 --> 00:17:18,359
application are there any volunteers so

326
00:17:18,359 --> 00:17:20,699
we are volunteering yeah we have some

327
00:17:20,699 --> 00:17:24,329
experience so we we can give it a try I

328
00:17:24,329 --> 00:17:28,199
mean obviously we won't do it like copy

329
00:17:28,199 --> 00:17:30,030
pasting for our own application but we

330
00:17:30,030 --> 00:17:33,950
will try to give it some some twist

331
00:17:33,950 --> 00:17:38,030
again an input is more than welcome

332
00:17:38,030 --> 00:17:41,520
where the idea page for for this

333
00:17:41,520 --> 00:17:43,470
organization should be hosted I mean I

334
00:17:43,470 --> 00:17:45,540
really think that the micro crown dot

335
00:17:45,540 --> 00:17:48,809
info is is the perfect place to to host

336
00:17:48,809 --> 00:17:52,890
it again please do send us your your

337
00:17:52,890 --> 00:17:55,350
topics your ideas for ji-sook if you

338
00:17:55,350 --> 00:17:57,270
want to be included I mean the more

339
00:17:57,270 --> 00:18:00,510
topics the better that's that's probably

340
00:18:00,510 --> 00:18:03,929
the the key if you know if you need some

341
00:18:03,929 --> 00:18:07,410
inspiration I can send you I can send

342
00:18:07,410 --> 00:18:10,050
you links to our previous ideas pages

343
00:18:10,050 --> 00:18:12,000
even from those years that we were

344
00:18:12,000 --> 00:18:15,929
really accepted so you can you can see

345
00:18:15,929 --> 00:18:21,120
some working example and the last

346
00:18:21,120 --> 00:18:24,510
question I would like to ask here to my

347
00:18:24,510 --> 00:18:26,490
colleagues should we discourage

348
00:18:26,490 --> 00:18:28,710
individual applications from the

349
00:18:28,710 --> 00:18:31,530
individual projects what's your opinion

350
00:18:31,530 --> 00:18:35,940
on that anybody I mean anybody who wants

351
00:18:35,940 --> 00:18:39,950
to join this if it's okay or not

352
00:18:50,520 --> 00:18:53,619
[Music]

353
00:19:09,760 --> 00:19:29,559
but then I would say the investment of

354
00:19:29,559 --> 00:19:39,320
mentoring this so my experience there

355
00:19:39,320 --> 00:19:41,120
are two two layers in your question the

356
00:19:41,120 --> 00:19:42,620
one layer is whether it is worth the

357
00:19:42,620 --> 00:19:45,500
short short term short - short term

358
00:19:45,500 --> 00:19:47,830
investment I would say still yes because

359
00:19:47,830 --> 00:19:50,929
the usual at least in our case the usual

360
00:19:50,929 --> 00:19:54,200
ji-suk project creates roughly the same

361
00:19:54,200 --> 00:19:56,750
amount of code as a master thesis but

362
00:19:56,750 --> 00:19:59,780
the master thesis can take a year or two

363
00:19:59,780 --> 00:20:03,200
years to - to be finished and sometimes

364
00:20:03,200 --> 00:20:05,690
even never gets finished in G soak the

365
00:20:05,690 --> 00:20:07,730
same amount of work gets done by the

366
00:20:07,730 --> 00:20:11,720
student in three months so if it

367
00:20:11,720 --> 00:20:14,090
succeeds it's quicker if it fails it's

368
00:20:14,090 --> 00:20:16,640
also quicker so so from that point of

369
00:20:16,640 --> 00:20:18,770
view it's I would say it's worth the

370
00:20:18,770 --> 00:20:21,470
investment and you probably also do some

371
00:20:21,470 --> 00:20:24,050
some supervise some astrophysicists

372
00:20:24,050 --> 00:20:26,960
from time to time so you know what I'm

373
00:20:26,960 --> 00:20:29,120
talking about and about the long term

374
00:20:29,120 --> 00:20:31,730
whether whether it really ignites some

375
00:20:31,730 --> 00:20:34,610
students to to stay with the community

376
00:20:34,610 --> 00:20:37,309
yeah the I would say the red return

377
00:20:37,309 --> 00:20:42,140
ratio is not very high it's something in

378
00:20:42,140 --> 00:20:44,179
our case something like 10 to 20 percent

379
00:20:44,179 --> 00:20:49,100
of the students but it's still more than

380
00:20:49,100 --> 00:20:52,610
zero meaning that these students or

381
00:20:52,610 --> 00:20:55,070
these people would not know about us

382
00:20:55,070 --> 00:20:58,970
without without participating in ji-sook

383
00:20:58,970 --> 00:20:59,960
so it's

384
00:20:59,960 --> 00:21:02,840
it's a net benefit still even if it's

385
00:21:02,840 --> 00:21:06,410
just marginal it's a net benefit so I I

386
00:21:06,410 --> 00:21:10,910
mean if this should fly or that this

387
00:21:10,910 --> 00:21:14,450
needed is to come up with I don't know

388
00:21:14,450 --> 00:21:17,210
three four interesting projects from

389
00:21:17,210 --> 00:21:20,690
each of the participating projects in

390
00:21:20,690 --> 00:21:23,930
under this umbrella which is probably

391
00:21:23,930 --> 00:21:26,780
not so hard I mean you should probably

392
00:21:26,780 --> 00:21:29,960
have some some ideas flying around for

393
00:21:29,960 --> 00:21:32,600
other purposes so just putting them in

394
00:21:32,600 --> 00:21:35,090
some shape that is somehow somehow

395
00:21:35,090 --> 00:21:39,230
acceptable might take I don't know two

396
00:21:39,230 --> 00:21:42,110
three hours and so we will see of course

397
00:21:42,110 --> 00:21:45,410
I cannot guarantee anything but but I

398
00:21:45,410 --> 00:21:48,620
really think we should try and if I may

399
00:21:48,620 --> 00:21:51,050
answer to to my own question I think we

400
00:21:51,050 --> 00:21:53,120
should not discourage the individual

401
00:21:53,120 --> 00:21:54,980
projects for applying still because I

402
00:21:54,980 --> 00:21:58,130
mean we don't know what the Google's

403
00:21:58,130 --> 00:22:00,800
criteria are so they might see it as a

404
00:22:00,800 --> 00:22:02,900
problem that they are trying to have

405
00:22:02,900 --> 00:22:05,960
more stakes in in the ballot or maybe

406
00:22:05,960 --> 00:22:09,470
not we will see we can even try to two

407
00:22:09,470 --> 00:22:11,870
years in advance in different settings

408
00:22:11,870 --> 00:22:14,960
and hope that we are not fighting an

409
00:22:14,960 --> 00:22:18,530
Oracle which which changes every time we

410
00:22:18,530 --> 00:22:23,540
I mean we can just try so if somebody is

411
00:22:23,540 --> 00:22:26,240
in please email me or Amelia Cooper

412
00:22:26,240 --> 00:22:29,960
we'll just make it happen somehow and

413
00:22:29,960 --> 00:22:33,250
everybody is welcome

414
00:22:41,080 --> 00:22:43,150
go check your headphones this kind of

415
00:22:43,150 --> 00:22:49,240
process they are the spark so I like

416
00:22:49,240 --> 00:22:56,080
this as a response to this is not even

417
00:22:56,080 --> 00:22:57,460
necessary I mean the umbrella

418
00:22:57,460 --> 00:22:59,440
organization is really something that

419
00:22:59,440 --> 00:23:02,200
that covers multiple individual projects

420
00:23:02,200 --> 00:23:04,180
I mean good new is doing that I mean the

421
00:23:04,180 --> 00:23:06,970
know is participating in G soak in many

422
00:23:06,970 --> 00:23:09,520
years as Ambra organization for various

423
00:23:09,520 --> 00:23:11,590
good new rewrite it or even the new

424
00:23:11,590 --> 00:23:13,900
unrelated project so this is just just

425
00:23:13,900 --> 00:23:17,200
an single organization that that

426
00:23:17,200 --> 00:23:32,260
supports basically and I don't know why

427
00:23:32,260 --> 00:23:33,910
but you know maybe it's because you know

428
00:23:33,910 --> 00:23:35,260
they like sort of how the money is

429
00:23:35,260 --> 00:23:36,970
managed to the guarantee that it won't

430
00:23:36,970 --> 00:23:40,420
be some random people whatever but if

431
00:23:40,420 --> 00:23:42,400
you have a non-profit in the United

432
00:23:42,400 --> 00:23:44,110
States is actually much easier to get

433
00:23:44,110 --> 00:23:46,290
your projects accepted on top of that

434
00:23:46,290 --> 00:23:49,300
again in a SF the trick is that SFO

435
00:23:49,300 --> 00:23:51,190
which gets accepted is you know we're to

436
00:23:51,190 --> 00:23:55,270
the front of the and then you can

437
00:23:55,270 --> 00:23:56,650
basically have as many projects within

438
00:23:56,650 --> 00:24:02,320
the SF umbrella as you want that's my

439
00:24:02,320 --> 00:24:03,810
point exactly

440
00:24:03,810 --> 00:24:06,250
so perhaps we should skip this

441
00:24:06,250 --> 00:24:09,520
discussion to define time but I just

442
00:24:09,520 --> 00:24:12,060
wanted to show this here and again

443
00:24:12,060 --> 00:24:14,700
everybody's welcome

444
00:24:14,700 --> 00:24:18,700
so now let's move to the status update

445
00:24:18,700 --> 00:24:21,970
of foreign OS we are talking about the

446
00:24:21,970 --> 00:24:24,430
year of the fire monkey which somehow

447
00:24:24,430 --> 00:24:27,310
coincides with the period for must force

448
00:24:27,310 --> 00:24:29,890
them to dis years for them that works

449
00:24:29,890 --> 00:24:33,510
nicely some general observation yeah

450
00:24:33,510 --> 00:24:37,000
there is slightly less activity on our

451
00:24:37,000 --> 00:24:40,300
side and in previous years mostly

452
00:24:40,300 --> 00:24:42,730
because the core contributors are

453
00:24:42,730 --> 00:24:46,570
somehow distracted now me included so so

454
00:24:46,570 --> 00:24:49,510
we don't have so much time to contribute

455
00:24:49,510 --> 00:24:52,750
to her on OS that also there are much

456
00:24:52,750 --> 00:24:54,700
less students so we didn't part

457
00:24:54,700 --> 00:24:56,350
but in Google summer cold we didn't

458
00:24:56,350 --> 00:24:58,870
participate in Esau Summer of Code in

459
00:24:58,870 --> 00:25:01,630
space and there were only two master

460
00:25:01,630 --> 00:25:05,230
thesis running compared to say six or

461
00:25:05,230 --> 00:25:08,700
eight in in the previous years and I

462
00:25:08,700 --> 00:25:11,700
would say we are somehow platooning

463
00:25:11,700 --> 00:25:15,130
really this is this is the key key

464
00:25:15,130 --> 00:25:19,000
message here of course I cannot climb

465
00:25:19,000 --> 00:25:20,650
that Helen Lewis is perfect and

466
00:25:20,650 --> 00:25:23,220
unfinished that will never happen but

467
00:25:23,220 --> 00:25:27,040
it's finished from some perspective that

468
00:25:27,040 --> 00:25:30,280
we don't like any major subsystem now so

469
00:25:30,280 --> 00:25:32,260
we have networking we have sound we have

470
00:25:32,260 --> 00:25:36,160
USB I know you you name it

471
00:25:36,160 --> 00:25:39,310
so so there is no dis no big chunk of

472
00:25:39,310 --> 00:25:41,670
code totally missing so we are more

473
00:25:41,670 --> 00:25:44,310
switching into the face of optimizations

474
00:25:44,310 --> 00:25:46,390
refactoring and so on and that's

475
00:25:46,390 --> 00:25:49,270
probably not so attractive to too many

476
00:25:49,270 --> 00:25:53,800
people so that's my explanation why why

477
00:25:53,800 --> 00:25:58,780
the output is smaller this can be also

478
00:25:58,780 --> 00:26:02,230
Illustrated on our traditional NOS camp

479
00:26:02,230 --> 00:26:05,290
which is our hackathon which has been

480
00:26:05,290 --> 00:26:09,760
done since 2005 so not so long as the

481
00:26:09,760 --> 00:26:13,210
OpenBSD socket on but also for for a

482
00:26:13,210 --> 00:26:18,910
long time and this year only some three

483
00:26:18,910 --> 00:26:22,210
developers participated there were some

484
00:26:22,210 --> 00:26:25,000
overlaps but yeah on average through

485
00:26:25,000 --> 00:26:27,340
three so this is this is quite poor but

486
00:26:27,340 --> 00:26:31,480
we managed to implement something so

487
00:26:31,480 --> 00:26:34,120
what we are currently working on or what

488
00:26:34,120 --> 00:26:37,450
has been done recently I was hoping to

489
00:26:37,450 --> 00:26:41,350
to make a release before for them but

490
00:26:41,350 --> 00:26:44,950
then yeah Cooper went fell ill and I had

491
00:26:44,950 --> 00:26:48,340
to write those slides and so on so I

492
00:26:48,340 --> 00:26:50,320
didn't manage but I might manage

493
00:26:50,320 --> 00:26:52,330
tomorrow so it might be a first-time

494
00:26:52,330 --> 00:26:55,690
release yay so we have done some

495
00:26:55,690 --> 00:27:00,820
improvements on our sparc64 support for

496
00:27:00,820 --> 00:27:04,180
some 4u hardware this has been jointly

497
00:27:04,180 --> 00:27:06,400
done with with parallel developments in

498
00:27:06,400 --> 00:27:07,730
qmo

499
00:27:07,730 --> 00:27:11,690
so we are very is hard to how to

500
00:27:11,690 --> 00:27:14,480
quantify but we are somehow close to be

501
00:27:14,480 --> 00:27:17,600
really able to run Helen OS on some for

502
00:27:17,600 --> 00:27:21,710
you in Cuomo s on physical hardware this

503
00:27:21,710 --> 00:27:23,930
has been linked with somehow

504
00:27:23,930 --> 00:27:27,200
generalizing ours user space 0 console

505
00:27:27,200 --> 00:27:29,720
code so previously there were different

506
00:27:29,720 --> 00:27:32,810
ways how to use user space your console

507
00:27:32,810 --> 00:27:34,730
on different platforms and this has been

508
00:27:34,730 --> 00:27:37,790
somehow unified do we have a simple

509
00:27:37,790 --> 00:27:42,170
installer which is non interactive maybe

510
00:27:42,170 --> 00:27:44,750
a little bit dangerous it tries to not

511
00:27:44,750 --> 00:27:47,780
to override anything on your local hard

512
00:27:47,780 --> 00:27:51,560
drive but I will still not really run it

513
00:27:51,560 --> 00:27:54,530
without consideration and it's it's

514
00:27:54,530 --> 00:27:57,770
basically a first step into really

515
00:27:57,770 --> 00:28:01,370
deploying line OS as a permanent

516
00:28:01,370 --> 00:28:04,160
operating system so it currently targets

517
00:28:04,160 --> 00:28:07,400
qmo and works on these two platforms but

518
00:28:07,400 --> 00:28:10,940
it it includes a reproducible built of

519
00:28:10,940 --> 00:28:14,600
grub so we are pushing this idea that

520
00:28:14,600 --> 00:28:16,730
our bills should be reproducible that

521
00:28:16,730 --> 00:28:20,060
you should be able to run a single

522
00:28:20,060 --> 00:28:24,590
command on any platform on any any any

523
00:28:24,590 --> 00:28:27,740
guest system and this single command

524
00:28:27,740 --> 00:28:30,170
should create the same binaries so the

525
00:28:30,170 --> 00:28:33,770
the same the the same composition of

526
00:28:33,770 --> 00:28:37,100
components and so on and of course the

527
00:28:37,100 --> 00:28:40,550
graph is one of the components that we

528
00:28:40,550 --> 00:28:43,520
don't link to but we use as a bootloader

529
00:28:43,520 --> 00:28:49,220
so we build it also finally we have us

530
00:28:49,220 --> 00:28:54,440
USB 2.0 support that has been in in

531
00:28:54,440 --> 00:28:57,710
writing for three or four years because

532
00:28:57,710 --> 00:29:01,010
one of the original authors of our USB

533
00:29:01,010 --> 00:29:04,790
stack decided that he would like to

534
00:29:04,790 --> 00:29:07,730
rewrite it completely and he is more or

535
00:29:07,730 --> 00:29:12,440
less date with some input from us so it

536
00:29:12,440 --> 00:29:16,430
not only enables USB 2.0 but it also

537
00:29:16,430 --> 00:29:21,059
opens much easier path to to you

538
00:29:21,059 --> 00:29:25,129
be 3.0 and so on we have optimized our

539
00:29:25,129 --> 00:29:28,289
processing of hardware interrupts in

540
00:29:28,289 --> 00:29:33,600
userspace drivers originally there was

541
00:29:33,600 --> 00:29:35,519
them there might have been a large

542
00:29:35,519 --> 00:29:38,940
overhead if the device was generating

543
00:29:38,940 --> 00:29:42,269
too many interrupts you know single in a

544
00:29:42,269 --> 00:29:48,179
single unit of time because each of the

545
00:29:48,179 --> 00:29:50,519
interrupts was translated to an IPC

546
00:29:50,519 --> 00:29:54,119
message and for each of this IPC message

547
00:29:54,119 --> 00:29:57,629
a new worker febrile was always created

548
00:29:57,629 --> 00:29:59,940
and then this post which created the

549
00:29:59,940 --> 00:30:03,690
overhead so now now it works in much

550
00:30:03,690 --> 00:30:05,929
more optimized way

551
00:30:05,929 --> 00:30:09,299
basically it's coalescing the course

552
00:30:09,299 --> 00:30:14,070
somehow so that the fibrillar the work

553
00:30:14,070 --> 00:30:15,990
of rebels do not have to be created and

554
00:30:15,990 --> 00:30:19,379
destroyed every time there's again much

555
00:30:19,379 --> 00:30:22,470
more to do here some feeble pooling

556
00:30:22,470 --> 00:30:25,139
might might help even in different

557
00:30:25,139 --> 00:30:28,169
workloads we have improved our dynamic

558
00:30:28,169 --> 00:30:33,509
linking especially with respect to the

559
00:30:33,509 --> 00:30:36,119
threat local storage handling and we

560
00:30:36,119 --> 00:30:39,600
finally have dynamic linking enabled by

561
00:30:39,600 --> 00:30:43,980
default on a 32 so if you compile her on

562
00:30:43,980 --> 00:30:50,700
OS 4 for x86 it will be created dynamic

563
00:30:50,700 --> 00:30:53,159
dynamic reading binaries will be created

564
00:30:53,159 --> 00:30:59,429
by default town another another small

565
00:30:59,429 --> 00:31:02,249
improvements which is somehow related

566
00:31:02,249 --> 00:31:05,129
with the federal storage for a very long

567
00:31:05,129 --> 00:31:07,889
time from the early beginning of helena

568
00:31:07,889 --> 00:31:12,139
was we had this ugly special sis call

569
00:31:12,139 --> 00:31:18,029
for setting the TLS base address on on

570
00:31:18,029 --> 00:31:21,899
x86 and on AMD 64 but basically because

571
00:31:21,899 --> 00:31:28,039
this this sets the the the FS or GS

572
00:31:28,039 --> 00:31:30,539
registered selector which is done used

573
00:31:30,539 --> 00:31:33,210
as the best as the pointer for the base

574
00:31:33,210 --> 00:31:34,710
address for the federalists

575
00:31:34,710 --> 00:31:38,670
and this cannot be done or the both this

576
00:31:38,670 --> 00:31:40,530
was not possible to be done from user

577
00:31:40,530 --> 00:31:42,870
space so there had to be somewhere how

578
00:31:42,870 --> 00:31:46,200
to how to deal with it and we really

579
00:31:46,200 --> 00:31:48,380
didn't like it of course it's it's a

580
00:31:48,380 --> 00:31:51,690
ugly thing to have this stupid z-score

581
00:31:51,690 --> 00:31:54,300
just for the sake of one architecture so

582
00:31:54,300 --> 00:31:56,790
our current solution is to have a

583
00:31:56,790 --> 00:31:59,670
different configuration of the three

584
00:31:59,670 --> 00:32:03,300
local storage that can live with with a

585
00:32:03,300 --> 00:32:07,350
static configuration of the of the GS

586
00:32:07,350 --> 00:32:11,070
and FS the segments and only a pointer

587
00:32:11,070 --> 00:32:13,410
in in this in this federal storage

588
00:32:13,410 --> 00:32:16,380
structure can-can needs to be changed

589
00:32:16,380 --> 00:32:18,090
and then this is used as the basic

590
00:32:18,090 --> 00:32:22,080
address for for our local area there is

591
00:32:22,080 --> 00:32:24,000
even a better solution we have discussed

592
00:32:24,000 --> 00:32:27,170
it with yaqoob mere mass how to do it

593
00:32:27,170 --> 00:32:31,860
you know even more elegant way there are

594
00:32:31,860 --> 00:32:34,890
these two new instructions since I've a

595
00:32:34,890 --> 00:32:38,550
bridge which can be used to set these

596
00:32:38,550 --> 00:32:40,680
two registers or not not these two

597
00:32:40,680 --> 00:32:46,610
registers but basically the the the

598
00:32:46,610 --> 00:32:49,860
values of the of the segments or the

599
00:32:49,860 --> 00:32:51,390
base addresses of the segment's from

600
00:32:51,390 --> 00:32:57,330
user space of course on older cpus this

601
00:32:57,330 --> 00:33:00,360
does not work so how to do it in a

602
00:33:00,360 --> 00:33:03,030
generic way well it can be emulated so

603
00:33:03,030 --> 00:33:06,750
so if the kernel receives an exception

604
00:33:06,750 --> 00:33:08,700
that there is an invalid instruction and

605
00:33:08,700 --> 00:33:11,310
it's this particle instruction it just

606
00:33:11,310 --> 00:33:14,490
can be unmerited it in theory it works

607
00:33:14,490 --> 00:33:16,830
nicely and it's elegant but the

608
00:33:16,830 --> 00:33:18,900
performance is worse than the our

609
00:33:18,900 --> 00:33:22,080
current current implementation with this

610
00:33:22,080 --> 00:33:25,580
GCC specific option so we are still

611
00:33:25,580 --> 00:33:29,100
thinking about what should we do with

612
00:33:29,100 --> 00:33:32,490
that and of course we have been doing

613
00:33:32,490 --> 00:33:35,280
like I already said lot of code

614
00:33:35,280 --> 00:33:38,130
refactoring we have fixed many bugs that

615
00:33:38,130 --> 00:33:41,220
have been discovered by by verification

616
00:33:41,220 --> 00:33:44,430
tools we are still on the bleeding edge

617
00:33:44,430 --> 00:33:47,280
of the GCC toolchain

618
00:33:47,280 --> 00:33:50,040
and we have helped to discover a

619
00:33:50,040 --> 00:33:55,730
regression in qmo to 700 non-armed

620
00:33:55,970 --> 00:34:01,110
yeah risk rife I know I have promised

621
00:34:01,110 --> 00:34:03,660
that this should be ready in 36 hours

622
00:34:03,660 --> 00:34:07,590
last year and frankly I really didn't

623
00:34:07,590 --> 00:34:10,440
spend 36 hours to do it so sorry it's

624
00:34:10,440 --> 00:34:14,400
still not there is some there is some

625
00:34:14,400 --> 00:34:16,710
skeleton code in the main line so at

626
00:34:16,710 --> 00:34:18,480
least you can you can try whether the

627
00:34:18,480 --> 00:34:21,900
the risk 5 compiler is still compiling

628
00:34:21,900 --> 00:34:24,330
the sources but it's still not it's

629
00:34:24,330 --> 00:34:26,820
booting but it's not doing anything past

630
00:34:26,820 --> 00:34:31,949
the initial kernel initialization if I

631
00:34:31,949 --> 00:34:35,699
may have one small excuse for that they

632
00:34:35,699 --> 00:34:37,440
have been some changes in the in the

633
00:34:37,440 --> 00:34:39,690
specific in the previous pacification of

634
00:34:39,690 --> 00:34:42,030
risk 5 during the year and they have

635
00:34:42,030 --> 00:34:46,260
been also changes in the spike simulator

636
00:34:46,260 --> 00:34:49,190
which is something like a reference

637
00:34:49,190 --> 00:34:51,690
implementation of the risk 5 platform

638
00:34:51,690 --> 00:34:53,850
and some of these changes were not

639
00:34:53,850 --> 00:34:56,639
explicitly tracked and documented so so

640
00:34:56,639 --> 00:34:59,640
it was really a bad surprise that you

641
00:34:59,640 --> 00:35:02,520
compile you come compile the code run it

642
00:35:02,520 --> 00:35:07,020
and then you have to debug it for for an

643
00:35:07,020 --> 00:35:10,560
hour to really understand what what went

644
00:35:10,560 --> 00:35:15,720
wrong why it's not working as it used to

645
00:35:15,720 --> 00:35:23,430
work a week ago and to to final items I

646
00:35:23,430 --> 00:35:26,190
would like to mention a little bit in

647
00:35:26,190 --> 00:35:28,310
more detail it's a service manager and

648
00:35:28,310 --> 00:35:34,290
user space pagers so we have where he

649
00:35:34,290 --> 00:35:36,750
where is he yeah there he is

650
00:35:36,750 --> 00:35:39,150
McHale called me my my former master

651
00:35:39,150 --> 00:35:41,610
student who implemented the service

652
00:35:41,610 --> 00:35:43,860
manager for her anniversary's master

653
00:35:43,860 --> 00:35:48,540
thesis so yeah I have already mentioned

654
00:35:48,540 --> 00:35:51,710
the term micro services so naturally a

655
00:35:51,710 --> 00:35:53,910
microkernel multi server operating

656
00:35:53,910 --> 00:35:57,890
system is composed of services but

657
00:35:57,890 --> 00:36:00,990
this is an overloaded term so we are

658
00:36:00,990 --> 00:36:03,420
talking about the system services now

659
00:36:03,420 --> 00:36:06,620
like like the microkernel servers and

660
00:36:06,620 --> 00:36:09,720
they're also you know logical services

661
00:36:09,720 --> 00:36:13,170
like if you if you run an HTTP server or

662
00:36:13,170 --> 00:36:15,990
I don't know NFS server on your machine

663
00:36:15,990 --> 00:36:18,780
that's a different kind of service not

664
00:36:18,780 --> 00:36:20,640
necessarily tied to the to the

665
00:36:20,640 --> 00:36:23,220
architecture of the operating system so

666
00:36:23,220 --> 00:36:25,880
so this service manager for Harnois

667
00:36:25,880 --> 00:36:30,630
tries to combine these two entities

668
00:36:30,630 --> 00:36:33,240
somehow together so to have a unified

669
00:36:33,240 --> 00:36:35,820
look on on the microkernel services and

670
00:36:35,820 --> 00:36:38,910
on the logical services it is remotely

671
00:36:38,910 --> 00:36:41,670
inspired by system management framework

672
00:36:41,670 --> 00:36:46,410
or system D please don't kill me let's

673
00:36:46,410 --> 00:36:49,560
move on so basically there are two two

674
00:36:49,560 --> 00:36:52,800
new components one is doing the

675
00:36:52,800 --> 00:36:55,470
dependency solving so it basically

676
00:36:55,470 --> 00:36:59,070
starts and stops the logical services

677
00:36:59,070 --> 00:37:01,560
according to some dependencies these

678
00:37:01,560 --> 00:37:03,870
dependencies can be either explicit so

679
00:37:03,870 --> 00:37:06,150
they can be specified in a configuration

680
00:37:06,150 --> 00:37:10,380
file in in some in some decorative way

681
00:37:10,380 --> 00:37:13,980
similar to what you might know from

682
00:37:13,980 --> 00:37:19,410
other system management frameworks and

683
00:37:19,410 --> 00:37:22,290
of course there are those implicit

684
00:37:22,290 --> 00:37:25,650
dependencies that that are built from

685
00:37:25,650 --> 00:37:27,660
the architecture of the composition of

686
00:37:27,660 --> 00:37:30,480
the of the microkernel services so this

687
00:37:30,480 --> 00:37:32,700
is this is basically for more or less

688
00:37:32,700 --> 00:37:36,330
for free because it used to work without

689
00:37:36,330 --> 00:37:38,820
without this new component previously

690
00:37:38,820 --> 00:37:41,910
now it's just integrated into into one

691
00:37:41,910 --> 00:37:45,540
package and there are some some unit

692
00:37:45,540 --> 00:37:48,870
types like the the individual service

693
00:37:48,870 --> 00:37:51,120
instances that can be either a service

694
00:37:51,120 --> 00:37:54,920
meaning process a mount point a

695
00:37:54,920 --> 00:38:00,210
configuration or a target and then there

696
00:38:00,210 --> 00:38:02,400
is the task one service which basically

697
00:38:02,400 --> 00:38:05,880
is monitoring the lifecycle of the

698
00:38:05,880 --> 00:38:09,680
services and provides an monitoring API

699
00:38:09,680 --> 00:38:11,520
so it manages

700
00:38:11,520 --> 00:38:14,490
the logical relationship between between

701
00:38:14,490 --> 00:38:17,820
the physical processes because there is

702
00:38:17,820 --> 00:38:21,570
no such thing in an oasis as a parent

703
00:38:21,570 --> 00:38:24,840
and child process so this has to be

704
00:38:24,840 --> 00:38:29,870
created on it has to be created anew and

705
00:38:29,870 --> 00:38:33,390
this service can later be used for

706
00:38:33,390 --> 00:38:36,300
restarting for example if if a service

707
00:38:36,300 --> 00:38:39,620
fails or something like that so its

708
00:38:39,620 --> 00:38:45,980
dependency part and life cycle part and

709
00:38:45,980 --> 00:38:50,370
final implementation piece that has been

710
00:38:50,370 --> 00:38:54,000
done is are the use of space pagers this

711
00:38:54,000 --> 00:38:57,660
is one thing that in in which Helen OS

712
00:38:57,660 --> 00:39:00,900
architecture the first from from I would

713
00:39:00,900 --> 00:39:03,870
say most of the l4 family operating

714
00:39:03,870 --> 00:39:07,100
systems which really focus on on

715
00:39:07,100 --> 00:39:10,350
removing all memory management from the

716
00:39:10,350 --> 00:39:13,410
kernel except the privileged parts like

717
00:39:13,410 --> 00:39:16,770
right like accessing the page tables and

718
00:39:16,770 --> 00:39:19,500
managing the TLB you know how I know as

719
00:39:19,500 --> 00:39:22,800
we have decided to have a different

720
00:39:22,800 --> 00:39:24,900
approach to have a slightly more

721
00:39:24,900 --> 00:39:27,750
traditional architecture of the memory

722
00:39:27,750 --> 00:39:30,090
management with colonel frame allocator

723
00:39:30,090 --> 00:39:33,720
a kernel heap-allocated serve which is a

724
00:39:33,720 --> 00:39:36,900
slap a locator by the way and a virtual

725
00:39:36,900 --> 00:39:42,270
address space manager it's still mostly

726
00:39:42,270 --> 00:39:45,570
mechanisms so so there are almost no

727
00:39:45,570 --> 00:39:49,950
policies in the kernel except maybe

728
00:39:49,950 --> 00:39:52,680
maybe some basic algorithms like single

729
00:39:52,680 --> 00:39:56,820
fit and so on our our motivation for

730
00:39:56,820 --> 00:40:00,390
doing or for implementing memory

731
00:40:00,390 --> 00:40:02,910
management in this way was that we

732
00:40:02,910 --> 00:40:04,590
believe that it's still a single point

733
00:40:04,590 --> 00:40:06,930
of failure so even if we push it out

734
00:40:06,930 --> 00:40:09,900
into user space the colonel would not

735
00:40:09,900 --> 00:40:13,800
survive even for its own purposes if if

736
00:40:13,800 --> 00:40:16,860
the memory management service or the

737
00:40:16,860 --> 00:40:19,020
memory management server would fail in

738
00:40:19,020 --> 00:40:21,840
user space so in that case we don't see

739
00:40:21,840 --> 00:40:25,830
a major point for not having this in the

740
00:40:25,830 --> 00:40:29,070
itself so originally there were three

741
00:40:29,070 --> 00:40:32,850
address space area backends for mapping

742
00:40:32,850 --> 00:40:35,670
physical memory for devices because also

743
00:40:35,670 --> 00:40:38,310
the kernel needs to have support to the

744
00:40:38,310 --> 00:40:40,220
hardware at least four for the timer

745
00:40:40,220 --> 00:40:43,020
then for anonymous memory that basically

746
00:40:43,020 --> 00:40:46,440
is used to give memory to do user space

747
00:40:46,440 --> 00:40:51,240
task and for for mapping elf binaries

748
00:40:51,240 --> 00:40:53,130
because the kernel during bootstrap

749
00:40:53,130 --> 00:40:56,460
needs to run some initial binary so it

750
00:40:56,460 --> 00:41:00,390
needs to be able to to access that

751
00:41:00,390 --> 00:41:02,780
structure in some in some structured

752
00:41:02,780 --> 00:41:05,910
intelligent way and now there is another

753
00:41:05,910 --> 00:41:10,410
that can which can forward page faults

754
00:41:10,410 --> 00:41:13,440
to user space basically so the current

755
00:41:13,440 --> 00:41:15,570
implementation is really quite

756
00:41:15,570 --> 00:41:16,820
straightforward

757
00:41:16,820 --> 00:41:22,980
there is a task that needs to access

758
00:41:22,980 --> 00:41:25,860
some memory which is being provided by

759
00:41:25,860 --> 00:41:30,060
some other user space task and it can be

760
00:41:30,060 --> 00:41:31,650
anything it can be for example the

761
00:41:31,650 --> 00:41:34,320
virtual file system provided in

762
00:41:34,320 --> 00:41:37,830
providing memory mapped files so each of

763
00:41:37,830 --> 00:41:40,530
these tasks has its virtual memory map

764
00:41:40,530 --> 00:41:46,830
in the kernel and first the new address

765
00:41:46,830 --> 00:41:50,070
space area is created by by the client

766
00:41:50,070 --> 00:41:52,860
and it's a special kind of virtual

767
00:41:52,860 --> 00:41:56,120
memory area which with with that user

768
00:41:56,120 --> 00:42:03,330
user pager then this creates a dedicated

769
00:42:03,330 --> 00:42:05,730
IPC connection to look to the server and

770
00:42:05,730 --> 00:42:09,870
the server creates its internal

771
00:42:09,870 --> 00:42:12,300
representation of this this client of

772
00:42:12,300 --> 00:42:17,160
this this request then if the client

773
00:42:17,160 --> 00:42:19,830
accesses the memory it touches the

774
00:42:19,830 --> 00:42:24,090
memory within that that area that needs

775
00:42:24,090 --> 00:42:27,140
to be served by by the pager it

776
00:42:27,140 --> 00:42:30,060
naturally creates a page fault and this

777
00:42:30,060 --> 00:42:32,370
page fault is forwarded to the to the

778
00:42:32,370 --> 00:42:36,870
pager as an IPC message while the the IG

779
00:42:36,870 --> 00:42:38,690
is blocked

780
00:42:38,690 --> 00:42:43,450
and now the pager asks the colonel to to

781
00:42:43,450 --> 00:42:47,690
give the kind some part of its door

782
00:42:47,690 --> 00:42:50,990
space so it basically answers the IPC

783
00:42:50,990 --> 00:42:56,330
call by did this this return value says

784
00:42:56,330 --> 00:42:59,240
that it's okay to provide the memory to

785
00:42:59,240 --> 00:43:01,460
the to the client and supplies its

786
00:43:01,460 --> 00:43:03,800
virtual address of the piece of memory

787
00:43:03,800 --> 00:43:06,230
that it wants to provide this virtual

788
00:43:06,230 --> 00:43:08,360
memory is then translated to the

789
00:43:08,360 --> 00:43:10,730
physical address by the colonel and this

790
00:43:10,730 --> 00:43:13,400
physical address is then mapped to to

791
00:43:13,400 --> 00:43:16,310
the client and the client is woken up

792
00:43:16,310 --> 00:43:20,420
and that's it I mean now this this dot

793
00:43:20,420 --> 00:43:25,460
or this this page is Elias to this page

794
00:43:25,460 --> 00:43:28,490
so it's very quite straightforward

795
00:43:28,490 --> 00:43:31,130
implementation we have some additional

796
00:43:31,130 --> 00:43:33,020
ideas how to make it in in a more

797
00:43:33,020 --> 00:43:37,430
generic way in the future but just for

798
00:43:37,430 --> 00:43:39,530
the purpose of implementing memory

799
00:43:39,530 --> 00:43:40,910
mapped files this works

800
00:43:40,910 --> 00:43:46,100
14:30 nicely so any plans for this year

801
00:43:46,100 --> 00:43:50,330
for the year of the fire rooster yeah we

802
00:43:50,330 --> 00:43:52,220
have some research papers in the paper

803
00:43:52,220 --> 00:43:54,770
in the pipeline we would like to finish

804
00:43:54,770 --> 00:43:58,340
them and submit them I would really like

805
00:43:58,340 --> 00:44:03,040
to finish the risk risk report we have

806
00:44:03,040 --> 00:44:06,410
ongoing cooperation with with the

807
00:44:06,410 --> 00:44:09,830
seasoned neck that's the Czech national

808
00:44:09,830 --> 00:44:11,900
domain registry they have this nice

809
00:44:11,900 --> 00:44:14,180
project called tourism Nia you might

810
00:44:14,180 --> 00:44:15,410
have heard about it

811
00:44:15,410 --> 00:44:18,740
even on last force demand on this was

812
00:44:18,740 --> 00:44:22,640
done so it's basically a very well

813
00:44:22,640 --> 00:44:26,900
designed home or small office router and

814
00:44:26,900 --> 00:44:31,400
we would really like to fine-tune Helen

815
00:44:31,400 --> 00:44:33,200
OS on this particle piece of hardware

816
00:44:33,200 --> 00:44:35,380
and then start some some interesting

817
00:44:35,380 --> 00:44:38,960
collaboration with them we'll try to

818
00:44:38,960 --> 00:44:42,920
switch to be annual release cycle just

819
00:44:42,920 --> 00:44:46,070
because we are no longer interface that

820
00:44:46,070 --> 00:44:48,830
we are waiting for this major subsystem

821
00:44:48,830 --> 00:44:51,110
to be returned that by major subsystem

822
00:44:51,110 --> 00:44:52,369
to be written

823
00:44:52,369 --> 00:44:55,190
it's probably easier to take inspiration

824
00:44:55,190 --> 00:44:57,170
from the genome guys where they're

825
00:44:57,170 --> 00:45:01,460
simply release often with with new small

826
00:45:01,460 --> 00:45:06,289
perhaps smaller updates and we have

827
00:45:06,289 --> 00:45:08,869
already done some IPC optimizations and

828
00:45:08,869 --> 00:45:11,359
again now it's time to really dig in

829
00:45:11,359 --> 00:45:15,259
deeper and to to for example implement

830
00:45:15,259 --> 00:45:17,569
some weight free algorithms to improve

831
00:45:17,569 --> 00:45:22,309
the IDI overheads and so on so that's

832
00:45:22,309 --> 00:45:24,469
basically all for me thank you very much

833
00:45:24,469 --> 00:45:31,279
for your attention and if there are any

834
00:45:31,279 --> 00:45:33,049
questions I will be happy to answer them

835
00:45:33,049 --> 00:45:36,079
and we can still discuss the ji-sook

836
00:45:36,079 --> 00:45:42,619
stuff if there is some interest maybe

837
00:45:42,619 --> 00:45:43,160
later

838
00:45:43,160 --> 00:45:45,460
thank you

