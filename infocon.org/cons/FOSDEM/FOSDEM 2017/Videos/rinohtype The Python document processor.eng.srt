1
00:00:04,840 --> 00:00:08,450
welcome everybody my name is Becky I'll

2
00:00:08,450 --> 00:00:11,210
be giving a talk about my project frying

3
00:00:11,210 --> 00:00:11,780
outside

4
00:00:11,780 --> 00:00:13,970
it's a project I've been working on

5
00:00:13,970 --> 00:00:18,020
since 2008 I was doing a PhD back then I

6
00:00:18,020 --> 00:00:19,970
was using latte it was kind of getting

7
00:00:19,970 --> 00:00:24,020
fed up with it because of the difficult

8
00:00:24,020 --> 00:00:27,650
messages and difficulty to create a

9
00:00:27,650 --> 00:00:31,430
custom style so these were the reasons I

10
00:00:31,430 --> 00:00:34,790
started working on rhyno type now

11
00:00:34,790 --> 00:00:37,190
finally after all these years it's in a

12
00:00:37,190 --> 00:00:40,340
kind of beta stage so it's more or less

13
00:00:40,340 --> 00:00:46,760
ready for general use so what is it if

14
00:00:46,760 --> 00:00:48,980
you're not familiar but if you're

15
00:00:48,980 --> 00:00:51,019
familiar with Lada you will know how it

16
00:00:51,019 --> 00:00:54,170
works it's a batch document processor as

17
00:00:54,170 --> 00:00:56,989
an input it takes structured document

18
00:00:56,989 --> 00:00:59,239
this can be restructured text or a

19
00:00:59,239 --> 00:01:02,600
markdown format besides these

20
00:01:02,600 --> 00:01:05,900
lightweight markup formats it also

21
00:01:05,900 --> 00:01:08,360
accepts or there's a very simple

22
00:01:08,360 --> 00:01:11,840
front-end for dog book files and there's

23
00:01:11,840 --> 00:01:14,030
also a commercial front-end for data

24
00:01:14,030 --> 00:01:16,700
files which is an XML format that is

25
00:01:16,700 --> 00:01:20,240
used by technical writers of course

26
00:01:20,240 --> 00:01:23,410
besides the text stored in the

27
00:01:23,410 --> 00:01:25,940
structured documents we can also provide

28
00:01:25,940 --> 00:01:30,380
images random type accepts PDF PNG and

29
00:01:30,380 --> 00:01:33,530
JPEG images if you want to use other

30
00:01:33,530 --> 00:01:36,290
bitmaps you can do so if below is

31
00:01:36,290 --> 00:01:40,910
installed to style the outputs Rhino

32
00:01:40,910 --> 00:01:43,760
type defend depends on style definition

33
00:01:43,760 --> 00:01:45,890
in the form of a style sheet and the

34
00:01:45,890 --> 00:01:48,830
document templates these are both in

35
00:01:48,830 --> 00:01:52,240
platens text files in any format and

36
00:01:52,240 --> 00:01:54,710
besides these style definitions we also

37
00:01:54,710 --> 00:01:58,190
require phones and I know types of

38
00:01:58,190 --> 00:02:00,920
course the most common font formats such

39
00:02:00,920 --> 00:02:03,200
as open type TrueType and PostScript

40
00:02:03,200 --> 00:02:06,200
type 1 formats so combining these inputs

41
00:02:06,200 --> 00:02:09,709
Heine type will produce an output that

42
00:02:09,709 --> 00:02:13,060
is a PDF document

43
00:02:14,400 --> 00:02:18,430
an example of its usage vinyl type comes

44
00:02:18,430 --> 00:02:22,360
with a command-line tool called Rhino we

45
00:02:22,360 --> 00:02:25,780
can pass a restructure text document or

46
00:02:25,780 --> 00:02:27,310
the file name of a restructured text

47
00:02:27,310 --> 00:02:30,430
document to it and Rhino will pretend it

48
00:02:30,430 --> 00:02:33,549
to a PDF file and tell you about it like

49
00:02:33,549 --> 00:02:37,599
this it also accepts common mark so

50
00:02:37,599 --> 00:02:41,560
common mark markdown files you can see

51
00:02:41,560 --> 00:02:43,390
that you can all that Rhino also accept

52
00:02:43,390 --> 00:02:46,739
some options we'll go over them later

53
00:02:46,739 --> 00:02:49,060
for example this one and there's a

54
00:02:49,060 --> 00:02:53,500
document to an a5 paper formats it also

55
00:02:53,500 --> 00:02:56,680
presents the progress using a progress

56
00:02:56,680 --> 00:02:58,989
bar so you can see how long it will take

57
00:02:58,989 --> 00:03:01,260
to render the document

58
00:03:01,260 --> 00:03:03,940
besides the command-line tool there is

59
00:03:03,940 --> 00:03:06,069
also a sphinx book this is basically a

60
00:03:06,069 --> 00:03:08,920
drop-in replacement for the logic so you

61
00:03:08,920 --> 00:03:11,409
do not require to have a large lot of

62
00:03:11,409 --> 00:03:13,840
installation to produce videos from

63
00:03:13,840 --> 00:03:18,639
Sphinx anymore you can use it like this

64
00:03:18,639 --> 00:03:21,310
using the Sphinx build commands you just

65
00:03:21,310 --> 00:03:24,609
pass the Rhino option the Rhino rhino to

66
00:03:24,609 --> 00:03:27,190
the Builder option of Sphinx builds

67
00:03:27,190 --> 00:03:29,230
along with the source directly and

68
00:03:29,230 --> 00:03:32,379
output directory I'll also give an

69
00:03:32,379 --> 00:03:35,500
example of this further on as for

70
00:03:35,500 --> 00:03:38,769
installation Rhino type works on Python

71
00:03:38,769 --> 00:03:42,220
3 only Python 3 point 3 and up to be

72
00:03:42,220 --> 00:03:45,280
precise it's written in pure Python so

73
00:03:45,280 --> 00:03:49,000
there's no compilation required and it

74
00:03:49,000 --> 00:03:52,090
depends on just a couple of external

75
00:03:52,090 --> 00:03:55,419
packages so there's packages for common

76
00:03:55,419 --> 00:03:58,810
mark or markdown support for

77
00:03:58,810 --> 00:04:00,639
restructured text that is handled by doc

78
00:04:00,639 --> 00:04:04,209
utils and then there's pure PNG to parse

79
00:04:04,209 --> 00:04:07,569
PNG files and besides that Rhino type

80
00:04:07,569 --> 00:04:11,440
also or packages phones separately so

81
00:04:11,440 --> 00:04:12,849
these are also installed when you

82
00:04:12,849 --> 00:04:16,630
install run a time for the next release

83
00:04:16,630 --> 00:04:20,168
I've planned to also provide standalone

84
00:04:20,168 --> 00:04:22,330
applications so if you don't have bite

85
00:04:22,330 --> 00:04:24,490
on installed you can just

86
00:04:24,490 --> 00:04:26,800
to download the Windows installer or Mac

87
00:04:26,800 --> 00:04:29,710
OS application bundle and that includes

88
00:04:29,710 --> 00:04:35,710
Python along with a run at IP so I want

89
00:04:35,710 --> 00:04:38,919
to give a small demo this will be

90
00:04:38,919 --> 00:04:46,449
difficult so in this folder we have an

91
00:04:46,449 --> 00:04:49,720
example restructure text file so with a

92
00:04:49,720 --> 00:04:53,199
document title section another section

93
00:04:53,199 --> 00:04:56,440
and then a subsection a paragraph here

94
00:04:56,440 --> 00:04:59,130
with the link in it's a small table

95
00:04:59,130 --> 00:05:01,389
another paragraph in the second section

96
00:05:01,389 --> 00:05:10,030
and some nested lists so we can just

97
00:05:10,030 --> 00:05:16,180
call rhino passing it file name and you

98
00:05:16,180 --> 00:05:18,550
can see it has surrendered document

99
00:05:18,550 --> 00:05:20,889
twice and this is to make sure that page

100
00:05:20,889 --> 00:05:24,159
references are handled correctly you

101
00:05:24,159 --> 00:05:25,780
know with lauda if you're familiar with

102
00:05:25,780 --> 00:05:27,310
logic you know you have to run it a

103
00:05:27,310 --> 00:05:28,259
couple of times

104
00:05:28,259 --> 00:05:31,479
final type handles this transparently

105
00:05:31,479 --> 00:05:35,530
and you mostly need to runs for a single

106
00:05:35,530 --> 00:05:38,860
document if we run it again it will only

107
00:05:38,860 --> 00:05:40,990
need a single pass because it writes a

108
00:05:40,990 --> 00:05:43,330
cache file storing a reference

109
00:05:43,330 --> 00:05:53,729
information then for the sphinx builder

110
00:05:53,729 --> 00:05:57,909
if as an example taking a relatively

111
00:05:57,909 --> 00:06:02,380
small sphinx project from a simple JSON

112
00:06:02,380 --> 00:06:06,099
project to make this build with a high

113
00:06:06,099 --> 00:06:08,830
node type we have to make one small

114
00:06:08,830 --> 00:06:12,370
adjustment and as to add the sphinx

115
00:06:12,370 --> 00:06:16,120
build module location to the list of

116
00:06:16,120 --> 00:06:20,050
extensions in console pi after this we

117
00:06:20,050 --> 00:06:24,940
can events finish builds like this so

118
00:06:24,940 --> 00:06:27,969
passing it that I know I know as the

119
00:06:27,969 --> 00:06:30,130
booth option the source directory which

120
00:06:30,130 --> 00:06:31,389
is the current directory in this case

121
00:06:31,389 --> 00:06:34,599
and an output directory then you get the

122
00:06:34,599 --> 00:06:36,020
standard Sphinx

123
00:06:36,020 --> 00:06:39,500
outputs along with Heine types progress

124
00:06:39,500 --> 00:06:41,030
indicator so this takes a little bit

125
00:06:41,030 --> 00:06:43,810
longer because it's a larger document

126
00:06:43,810 --> 00:06:57,160
and again there's a second pass and then

127
00:06:57,160 --> 00:07:03,380
I'll show perhaps show the output of the

128
00:07:03,380 --> 00:07:06,370
first example

129
00:07:10,270 --> 00:07:15,009
so this Rhino by default uses the

130
00:07:15,009 --> 00:07:17,570
article templates which is a consists of

131
00:07:17,570 --> 00:07:19,880
title page so we have document title

132
00:07:19,880 --> 00:07:22,580
here that was specified in this research

133
00:07:22,580 --> 00:07:24,889
attack dogs restructured text document

134
00:07:24,889 --> 00:07:26,780
along with the dates then we have a

135
00:07:26,780 --> 00:07:29,870
table of contents which is hyperlink to

136
00:07:29,870 --> 00:07:32,180
the pages and also lists the pages as

137
00:07:32,180 --> 00:07:35,539
you'd expect and rennet I also generates

138
00:07:35,539 --> 00:07:38,240
bookmarks in PDF so you can jump to each

139
00:07:38,240 --> 00:07:42,409
section using that so this is the

140
00:07:42,409 --> 00:07:44,630
content actual content of the documents

141
00:07:44,630 --> 00:07:47,000
you can see the two sections and the

142
00:07:47,000 --> 00:07:56,440
table then the output of

143
00:07:58,870 --> 00:08:02,320
sings builder

144
00:08:10,750 --> 00:08:13,780
so this uses the book template by

145
00:08:13,780 --> 00:08:17,230
default which can be configured so it's

146
00:08:17,230 --> 00:08:19,960
a title page a larger table of contents

147
00:08:19,960 --> 00:08:22,690
and then the actual content is a

148
00:08:22,690 --> 00:08:24,550
breakfast you can also see the syntax

149
00:08:24,550 --> 00:08:31,120
highlighting for code blocks and this is

150
00:08:31,120 --> 00:08:32,679
the first chapter so you can see that

151
00:08:32,679 --> 00:08:35,650
chapters start on new pages and you

152
00:08:35,650 --> 00:08:37,390
might recognize the style of the

153
00:08:37,390 --> 00:08:40,210
document it's modeled after the lot of

154
00:08:40,210 --> 00:08:43,360
output produced by a swings so that's a

155
00:08:43,360 --> 00:08:45,850
default style sheet shipped with Rhino

156
00:08:45,850 --> 00:08:49,690
type special in the book template is

157
00:08:49,690 --> 00:08:52,510
that it also generates an index and this

158
00:08:52,510 --> 00:08:54,910
is not limited to documents generated by

159
00:08:54,910 --> 00:08:57,550
Sphinx it's also possible for plain

160
00:08:57,550 --> 00:08:58,570
restructuredtext

161
00:08:58,570 --> 00:09:01,300
documents so it's a generated by Rhino

162
00:09:01,300 --> 00:09:08,980
type itself so let's go back to the

163
00:09:08,980 --> 00:09:12,400
presentation so there is summary of what

164
00:09:12,400 --> 00:09:16,180
I've shown for the Sphinx sinks builder

165
00:09:16,180 --> 00:09:18,570
it basically uses the lot X document

166
00:09:18,570 --> 00:09:20,770
definition and comfort of Pi so if you

167
00:09:20,770 --> 00:09:23,620
have a lot of output configured Hana

168
00:09:23,620 --> 00:09:25,360
type will interpret this configuration

169
00:09:25,360 --> 00:09:27,730
you only have to add it to the list of

170
00:09:27,730 --> 00:09:32,860
extensions so suppose you want to change

171
00:09:32,860 --> 00:09:35,740
the style of the output first we need to

172
00:09:35,740 --> 00:09:38,380
know how high note type handles this in

173
00:09:38,380 --> 00:09:41,650
fact it's very similar to CSS where we

174
00:09:41,650 --> 00:09:44,589
select the elements on the page using

175
00:09:44,589 --> 00:09:47,680
selectors and this is performed in the

176
00:09:47,680 --> 00:09:49,839
documentary so the front end it creates

177
00:09:49,839 --> 00:09:52,839
a documentary which is then transformed

178
00:09:52,839 --> 00:09:55,060
to internal representation and Rhyno

179
00:09:55,060 --> 00:09:58,839
type to another documentary and this one

180
00:09:58,839 --> 00:10:01,510
for this sample document is displayed on

181
00:10:01,510 --> 00:10:03,610
the right we have the two sections each

182
00:10:03,610 --> 00:10:07,000
with a unique ID a subsection and you

183
00:10:07,000 --> 00:10:08,650
have the heading of the section

184
00:10:08,650 --> 00:10:12,760
paragraph table over here and the lists

185
00:10:12,760 --> 00:10:16,510
over here so once we have this we can

186
00:10:16,510 --> 00:10:19,480
start selecting elements so let me first

187
00:10:19,480 --> 00:10:22,240
say that paragraphs are also

188
00:10:22,240 --> 00:10:24,910
included in this documentary and they

189
00:10:24,910 --> 00:10:28,990
also consists of a tree to represent

190
00:10:28,990 --> 00:10:33,340
nested styling so this paragraph above

191
00:10:33,340 --> 00:10:35,680
witnesses styling is represented in this

192
00:10:35,680 --> 00:10:39,370
tree so we have for example the simple

193
00:10:39,370 --> 00:10:41,920
text without styling and then there's a

194
00:10:41,920 --> 00:10:45,610
this whole part is emphasized as this

195
00:10:45,610 --> 00:10:48,490
one and part of that is then strongly

196
00:10:48,490 --> 00:10:49,930
emphasized and so on

197
00:10:49,930 --> 00:10:52,660
so this basically completes the tree

198
00:10:52,660 --> 00:10:57,220
shown above in the previous slide so we

199
00:10:57,220 --> 00:10:59,350
can match elements based on their

200
00:10:59,350 --> 00:11:01,000
context

201
00:11:01,000 --> 00:11:06,070
just like in CSS each element in this

202
00:11:06,070 --> 00:11:08,590
tree is called a flowable which is float

203
00:11:08,590 --> 00:11:10,390
on to a page and we can adapt to the

204
00:11:10,390 --> 00:11:14,230
width of the page or center itself

205
00:11:14,230 --> 00:11:18,270
inside the available width also each

206
00:11:18,270 --> 00:11:22,860
element industry is a Python object and

207
00:11:22,860 --> 00:11:25,420
so this is a class name so these

208
00:11:25,420 --> 00:11:27,339
selectors are basically Buyten source

209
00:11:27,339 --> 00:11:29,950
codes using operator overloading we can

210
00:11:29,950 --> 00:11:34,030
use this to construct selectors so for

211
00:11:34,030 --> 00:11:37,240
example this one represents the table

212
00:11:37,240 --> 00:11:40,000
cell or represents a paragraph that's a

213
00:11:40,000 --> 00:11:42,400
direct child of a table cell by using

214
00:11:42,400 --> 00:11:45,570
the forward slash notation so it selects

215
00:11:45,570 --> 00:11:50,200
industry this paragraph for example we

216
00:11:50,200 --> 00:11:54,339
can use the ellipsis that's provided by

217
00:11:54,339 --> 00:11:56,910
Python to match multiple levels of

218
00:11:56,910 --> 00:11:59,890
elements and this selects them all

219
00:11:59,890 --> 00:12:02,020
paragraphs that are part of list so as

220
00:12:02,020 --> 00:12:05,650
well as this list item in the enumerated

221
00:12:05,650 --> 00:12:08,470
list it also matches the paragraph in

222
00:12:08,470 --> 00:12:13,800
the bulleted list we can also match

223
00:12:13,800 --> 00:12:16,450
elements based on their style style is

224
00:12:16,450 --> 00:12:22,830
similar to HTML ID or class attributes

225
00:12:23,100 --> 00:12:27,100
for example enumerated lists fixing you

226
00:12:27,100 --> 00:12:28,420
can see they are the same object

227
00:12:28,420 --> 00:12:30,550
enumerated and bulleted lists are the

228
00:12:30,550 --> 00:12:34,600
same flowable but their style is

229
00:12:34,600 --> 00:12:37,209
different so this enumerated and this is

230
00:12:37,209 --> 00:12:40,230
bulleted and that's basically the the

231
00:12:40,230 --> 00:12:43,690
enumerated is provided by styling it as

232
00:12:43,690 --> 00:12:47,199
an enumerated list and it's selected

233
00:12:47,199 --> 00:12:50,680
like this using this gloss method called

234
00:12:50,680 --> 00:12:54,040
like and then passing the style name we

235
00:12:54,040 --> 00:12:57,519
can also match arbitrary attributes such

236
00:12:57,519 --> 00:13:00,310
as that level section has a level

237
00:13:00,310 --> 00:13:03,250
attributes specified that specifies its

238
00:13:03,250 --> 00:13:07,480
level in the hierarchy so this is a

239
00:13:07,480 --> 00:13:10,300
level two section so this is a level one

240
00:13:10,300 --> 00:13:12,670
section as well as this one so it's not

241
00:13:12,670 --> 00:13:15,100
selected but this one is a subsection is

242
00:13:15,100 --> 00:13:19,420
a level two level two section and we

243
00:13:19,420 --> 00:13:21,220
said to select the heading below it so

244
00:13:21,220 --> 00:13:25,209
it matches this this element we can do

245
00:13:25,209 --> 00:13:28,480
some more complex things like this but I

246
00:13:28,480 --> 00:13:32,459
will not going to detail about this

247
00:13:33,149 --> 00:13:35,980
different from CSS is that Linotype

248
00:13:35,980 --> 00:13:38,230
provides an extra level of abstraction

249
00:13:38,230 --> 00:13:41,889
so instead of specifying selectors in a

250
00:13:41,889 --> 00:13:44,380
style sheet we first met the selectors

251
00:13:44,380 --> 00:13:47,019
two style names these this has two

252
00:13:47,019 --> 00:13:48,940
advantages they provide a descriptive

253
00:13:48,940 --> 00:13:52,810
name and second these measures that

254
00:13:52,810 --> 00:13:55,420
collect all these selectors and map into

255
00:13:55,420 --> 00:13:57,699
style names can be reused by multiple

256
00:13:57,699 --> 00:14:01,930
style sheets so this saves some work we

257
00:14:01,930 --> 00:14:04,839
can also reuse style names in new style

258
00:14:04,839 --> 00:14:08,949
and new selector definitions so line

259
00:14:08,949 --> 00:14:12,610
lock over yours defines like this and if

260
00:14:12,610 --> 00:14:16,360
we combine them we can map that to a

261
00:14:16,360 --> 00:14:20,170
nested line block there's some more

262
00:14:20,170 --> 00:14:22,600
examples given but they're pretty

263
00:14:22,600 --> 00:14:26,529
straightforward then on to the style

264
00:14:26,529 --> 00:14:29,260
sheets as I said it's a basic text file

265
00:14:29,260 --> 00:14:32,410
in any format so style sheet starts with

266
00:14:32,410 --> 00:14:35,290
the style sheet section we can give it a

267
00:14:35,290 --> 00:14:38,769
name it also supports variables so for

268
00:14:38,769 --> 00:14:41,079
example we can define a variable sounds

269
00:14:41,079 --> 00:14:45,670
typeface to specify which phone to use

270
00:14:45,670 --> 00:14:46,690
for all

271
00:14:46,690 --> 00:14:48,970
some service type faces in the documents

272
00:14:48,970 --> 00:14:50,860
so if we use this variable in style

273
00:14:50,860 --> 00:14:54,070
definitions later on we only need to

274
00:14:54,070 --> 00:14:56,860
change this one same for color blue

275
00:14:56,860 --> 00:15:00,850
which can later be changed easily then

276
00:15:00,850 --> 00:15:05,170
we define a default paragraph style so

277
00:15:05,170 --> 00:15:07,600
except for these two sections all of the

278
00:15:07,600 --> 00:15:09,730
other sections they should map to style

279
00:15:09,730 --> 00:15:12,540
names that are defined in a matcher

280
00:15:12,540 --> 00:15:16,420
except for this one it is not specified

281
00:15:16,420 --> 00:15:18,640
in the Metro and that's why we have to

282
00:15:18,640 --> 00:15:21,000
specify that that it's a paragraph style

283
00:15:21,000 --> 00:15:24,640
why because this is used as a base for

284
00:15:24,640 --> 00:15:28,000
other styles so we can define some font

285
00:15:28,000 --> 00:15:31,930
properties some settings regarding to

286
00:15:31,930 --> 00:15:34,810
typesetting text alignment how to align

287
00:15:34,810 --> 00:15:38,080
the text horizontally then we have the

288
00:15:38,080 --> 00:15:41,320
body style this is a style for body

289
00:15:41,320 --> 00:15:43,390
paragraph so most of the paragraphs in

290
00:15:43,390 --> 00:15:46,480
your document it has the base style

291
00:15:46,480 --> 00:15:49,030
default as the base style so it

292
00:15:49,030 --> 00:15:50,350
basically inherits all of these

293
00:15:50,350 --> 00:15:52,830
properties and adds the space above

294
00:15:52,830 --> 00:15:56,680
property and they're elves also have an

295
00:15:56,680 --> 00:15:59,800
in inline text style for emphasized text

296
00:15:59,800 --> 00:16:05,069
and this sets the fonts length to italic

297
00:16:08,200 --> 00:16:10,870
we also support inheritance and style

298
00:16:10,870 --> 00:16:14,050
sheets so mostly you will use a style

299
00:16:14,050 --> 00:16:16,000
sheet that is shipped with Rhino type or

300
00:16:16,000 --> 00:16:19,090
provided separately you can inherit from

301
00:16:19,090 --> 00:16:21,460
this simply by specifying the base so

302
00:16:21,460 --> 00:16:24,820
Sphinx is a style sheet that is included

303
00:16:24,820 --> 00:16:27,670
with Rhino type and you can just specify

304
00:16:27,670 --> 00:16:29,980
it by name you can also specify others

305
00:16:29,980 --> 00:16:34,180
by filename for example we can overwrite

306
00:16:34,180 --> 00:16:37,839
a vera variables so for example replace

307
00:16:37,839 --> 00:16:40,510
all suns typefaces with droid suns and

308
00:16:40,510 --> 00:16:45,670
the style sheet and we also overwrite

309
00:16:45,670 --> 00:16:48,850
emphasized text this basically this note

310
00:16:48,850 --> 00:16:51,730
that this inherits all properties of the

311
00:16:51,730 --> 00:16:54,580
emphasized text or emphasis style of the

312
00:16:54,580 --> 00:16:57,350
base style sheet and additionally sets

313
00:16:57,350 --> 00:16:59,949
the phone color so it text won't be

314
00:16:59,949 --> 00:17:04,339
italic and receive a color if you don't

315
00:17:04,339 --> 00:17:05,990
want to inherit the properties of the

316
00:17:05,990 --> 00:17:09,079
base style sheet style you can send base

317
00:17:09,079 --> 00:17:12,380
to default style as indicated here so

318
00:17:12,380 --> 00:17:14,390
this will only changes the font color

319
00:17:14,390 --> 00:17:17,599
and not the font weight as was done in

320
00:17:17,599 --> 00:17:21,349
the base type sheets for example how

321
00:17:21,349 --> 00:17:27,399
much time is left ten minutes okay

322
00:17:31,780 --> 00:17:35,059
because this is a little bit slower with

323
00:17:35,059 --> 00:17:42,590
one hand so suppose we want to change

324
00:17:42,590 --> 00:17:45,320
some some of the properties of the

325
00:17:45,320 --> 00:17:47,570
restructure text documents I've shown

326
00:17:47,570 --> 00:17:52,730
before now how do we find out which

327
00:17:52,730 --> 00:17:56,510
style definitions we have to change for

328
00:17:56,510 --> 00:18:03,549
this Rhino type need to change back

329
00:18:04,540 --> 00:18:07,040
every time a vinyl type renders a

330
00:18:07,040 --> 00:18:09,919
document it also generates a style log

331
00:18:09,919 --> 00:18:12,620
and this is basically basically a

332
00:18:12,620 --> 00:18:14,900
representation of the document as it is

333
00:18:14,900 --> 00:18:18,290
rendered for each page it will hand it

334
00:18:18,290 --> 00:18:21,770
will list the three of the elements that

335
00:18:21,770 --> 00:18:23,929
have been rendered to the page so let's

336
00:18:23,929 --> 00:18:26,150
go to page 3 where the actual content is

337
00:18:26,150 --> 00:18:29,150
and there we can find the first section

338
00:18:29,150 --> 00:18:32,240
and we can see that this maps to the

339
00:18:32,240 --> 00:18:37,549
chapter style for the section heading it

340
00:18:37,549 --> 00:18:40,309
maps to the heading level 1 style so we

341
00:18:40,309 --> 00:18:43,100
can start and change this in the Styles

342
00:18:43,100 --> 00:18:46,100
stylesheet in case heading level 1 was

343
00:18:46,100 --> 00:18:49,370
not specified in the style sheet it

344
00:18:49,370 --> 00:18:52,490
would move on put them put an X here and

345
00:18:52,490 --> 00:18:55,760
move on would move on to the next style

346
00:18:55,760 --> 00:19:00,650
in the list so we can do this for the

347
00:19:00,650 --> 00:19:04,640
example documents so here specified some

348
00:19:04,640 --> 00:19:06,900
name description and

349
00:19:06,900 --> 00:19:10,890
which base style sheet to use we also

350
00:19:10,890 --> 00:19:14,820
overwrite a variable which changes the

351
00:19:14,820 --> 00:19:18,300
font and finally we change the heading

352
00:19:18,300 --> 00:19:22,140
level style so it also inherits from the

353
00:19:22,140 --> 00:19:24,150
base style but we change some properties

354
00:19:24,150 --> 00:19:26,220
such as font size font weight font color

355
00:19:26,220 --> 00:19:29,190
and also change the format of the number

356
00:19:29,190 --> 00:19:31,920
preceding the section title and similar

357
00:19:31,920 --> 00:19:37,940
for level 2 do we make similar changes

358
00:19:39,860 --> 00:19:45,300
so the result of this I am to make it

359
00:19:45,300 --> 00:19:48,450
use the custom style sheet we can

360
00:19:48,450 --> 00:19:51,360
specify it like this so - - style sheets

361
00:19:51,360 --> 00:19:56,250
specify the file name and then this is

362
00:19:56,250 --> 00:19:59,400
the original document and this is what

363
00:19:59,400 --> 00:20:02,610
changed style sheet so I can see that

364
00:20:02,610 --> 00:20:05,610
section titles have been has received a

365
00:20:05,610 --> 00:20:07,710
different color the numbering has

366
00:20:07,710 --> 00:20:10,280
changed to using no more Roman numerals

367
00:20:10,280 --> 00:20:14,190
and also this title has changed and

368
00:20:14,190 --> 00:20:18,330
using ABC for any section titles section

369
00:20:18,330 --> 00:20:20,220
numbers you can also see that the font

370
00:20:20,220 --> 00:20:22,429
has changed because we set the variable

371
00:20:22,429 --> 00:20:25,679
not only in the base in the body

372
00:20:25,679 --> 00:20:32,370
paragraphs but also in the table finally

373
00:20:32,370 --> 00:20:34,620
we can also customize the look of the

374
00:20:34,620 --> 00:20:37,230
output documents by using document

375
00:20:37,230 --> 00:20:40,559
templates this determine which parts are

376
00:20:40,559 --> 00:20:42,750
part of the documents so typically

377
00:20:42,750 --> 00:20:44,700
there's a title page from matter with

378
00:20:44,700 --> 00:20:46,820
table of contents and possibly other

379
00:20:46,820 --> 00:20:49,650
things than the actual contents of the

380
00:20:49,650 --> 00:20:52,950
document and finally back matter with an

381
00:20:52,950 --> 00:20:56,010
index so this is defined by the template

382
00:20:56,010 --> 00:21:01,559
and for each documents parts there's

383
00:21:01,559 --> 00:21:04,679
also a page template provided and this

384
00:21:04,679 --> 00:21:06,990
can be configured so for example margins

385
00:21:06,990 --> 00:21:09,750
can be set the number of columns spacing

386
00:21:09,750 --> 00:21:12,210
between columns and which takes to place

387
00:21:12,210 --> 00:21:14,190
in the header and the footer fields for

388
00:21:14,190 --> 00:21:18,150
example and besides the configuration of

389
00:21:18,150 --> 00:21:18,710
page

390
00:21:18,710 --> 00:21:21,289
page page templates you can also

391
00:21:21,289 --> 00:21:24,880
configure certain aspects of the

392
00:21:24,880 --> 00:21:30,669
document parts so here's an example

393
00:21:31,899 --> 00:21:34,909
so we configure the article template

394
00:21:34,909 --> 00:21:36,649
which is part of the high note aisle

395
00:21:36,649 --> 00:21:39,860
distribution we specify which parts to

396
00:21:39,860 --> 00:21:42,169
include in the output so here it commits

397
00:21:42,169 --> 00:21:44,270
the front and Batman back matter only

398
00:21:44,270 --> 00:21:46,909
leaves the title and the contents parts

399
00:21:46,909 --> 00:21:49,460
you can also specify which style sheet

400
00:21:49,460 --> 00:21:52,970
to use you can specify which language to

401
00:21:52,970 --> 00:21:56,210
use for typical titles such as table of

402
00:21:56,210 --> 00:21:59,840
contents or the index and we can also

403
00:21:59,840 --> 00:22:04,039
for the article template as a special

404
00:22:04,039 --> 00:22:06,320
option which allows you to select where

405
00:22:06,320 --> 00:22:08,000
to this very abstract on the title page

406
00:22:08,000 --> 00:22:14,240
or later in the document we can also

407
00:22:14,240 --> 00:22:16,940
override titles for sections so the

408
00:22:16,940 --> 00:22:19,159
language already sets these for each

409
00:22:19,159 --> 00:22:21,409
language but you can still override them

410
00:22:21,409 --> 00:22:23,120
like this so for the table of contents

411
00:22:23,120 --> 00:22:27,950
you can string it again you can work

412
00:22:27,950 --> 00:22:30,740
with variables and paper size variable

413
00:22:30,740 --> 00:22:33,529
is used in the page templates so this

414
00:22:33,529 --> 00:22:35,240
will change the page all over the

415
00:22:35,240 --> 00:22:39,380
document and this corresponds to the

416
00:22:39,380 --> 00:22:42,950
title part and so you can set the page

417
00:22:42,950 --> 00:22:46,220
number formats using lowercase no Roman

418
00:22:46,220 --> 00:22:48,470
numerals in this case and at which page

419
00:22:48,470 --> 00:22:50,480
to end the part so this make sure that

420
00:22:50,480 --> 00:22:54,559
the next part starts on the right hand

421
00:22:54,559 --> 00:23:00,370
as a page and for the title page

422
00:23:00,370 --> 00:23:02,960
templates you can set the margins for

423
00:23:02,960 --> 00:23:04,730
example top margin has changed here and

424
00:23:04,730 --> 00:23:08,029
you can even set the backgrounds using

425
00:23:08,029 --> 00:23:12,080
this PDF image and we can set a scale

426
00:23:12,080 --> 00:23:13,940
option to fill or fit the page for

427
00:23:13,940 --> 00:23:20,419
example so this is an example of style

428
00:23:20,419 --> 00:23:21,950
for the Rhino type manual I've been

429
00:23:21,950 --> 00:23:23,870
working on and it shows what is possible

430
00:23:23,870 --> 00:23:30,059
so using margins and indentation

431
00:23:30,059 --> 00:23:32,399
in a smart way you can obtain this kind

432
00:23:32,399 --> 00:23:34,679
of results it also changes the link

433
00:23:34,679 --> 00:23:37,679
color it's a trend this is using a

434
00:23:37,679 --> 00:23:40,529
background for the title to make it a

435
00:23:40,529 --> 00:23:44,309
little bit more more nice and this is an

436
00:23:44,309 --> 00:23:46,019
ad page spread for the left page and a

437
00:23:46,019 --> 00:23:49,759
right page changes the footers

438
00:23:49,759 --> 00:23:51,629
separately for the left and the

439
00:23:51,629 --> 00:23:54,929
right-hand pages to obtain this result

440
00:23:54,929 --> 00:24:02,009
now all of these things like style

441
00:24:02,009 --> 00:24:03,739
sheets and document templates they're

442
00:24:03,739 --> 00:24:06,749
handled similarly by Rhino type they are

443
00:24:06,749 --> 00:24:10,609
called resources and they can be

444
00:24:10,609 --> 00:24:13,950
retrieved by name so by entry point so

445
00:24:13,950 --> 00:24:15,929
these can be provided in separate

446
00:24:15,929 --> 00:24:19,639
packages on PI bi and then used in

447
00:24:19,639 --> 00:24:22,559
documents by just referring to them by

448
00:24:22,559 --> 00:24:24,419
name you can find out which of them are

449
00:24:24,419 --> 00:24:26,700
installed by using the appropriate list

450
00:24:26,700 --> 00:24:30,239
options also the front ends are handled

451
00:24:30,239 --> 00:24:31,159
in this way

452
00:24:31,159 --> 00:24:34,829
so in the future I hope to enable to

453
00:24:34,829 --> 00:24:37,049
automatically install forms for example

454
00:24:37,049 --> 00:24:40,739
from PI bi when is being used by

455
00:24:40,739 --> 00:24:42,329
documents so you don't have to manually

456
00:24:42,329 --> 00:24:44,759
install it when you retrieve the

457
00:24:44,759 --> 00:24:49,739
document and again it so that's it some

458
00:24:49,739 --> 00:24:52,789
more references and contact information

459
00:24:52,789 --> 00:24:56,149
we have still time for questions a

460
00:24:56,149 --> 00:24:59,570
couple of questions

461
00:25:06,120 --> 00:25:08,960
no that is not supported at this moment

462
00:25:08,960 --> 00:25:12,390
it's a PDF back-end this as simple as

463
00:25:12,390 --> 00:25:15,090
possible at this moment to make this

464
00:25:15,090 --> 00:25:17,360
possible

465
00:25:19,700 --> 00:25:23,520
no no but there there is a that's would

466
00:25:23,520 --> 00:25:26,580
be in fun project perhaps there's a lot

467
00:25:26,580 --> 00:25:31,110
a parser for Python only 2.7 you could

468
00:25:31,110 --> 00:25:33,539
use it to write a front-end for a Rhino

469
00:25:33,539 --> 00:25:36,559
type and it's it's I think it's even

470
00:25:36,559 --> 00:25:40,380
like evaluates test code so perhaps it's

471
00:25:40,380 --> 00:25:45,020
pretty powerful yes

472
00:25:50,809 --> 00:25:54,309
sorry can you repeat the question

473
00:26:00,040 --> 00:26:02,679
yes you can you can set the alignment of

474
00:26:02,679 --> 00:26:09,040
images using the the statute yes it does

475
00:26:09,040 --> 00:26:10,150
handle Unicode

476
00:26:10,150 --> 00:26:12,010
but it's not been properly tested with

477
00:26:12,010 --> 00:26:15,250
other script yet but that's why I wrote

478
00:26:15,250 --> 00:26:18,010
it in Python 3 so that internal is all

479
00:26:18,010 --> 00:26:18,880
Unicode

480
00:26:18,880 --> 00:26:25,660
so that yeah yeah yeah it doesn't yeah

481
00:26:25,660 --> 00:26:28,630
right-to-left is not yet supported but

482
00:26:28,630 --> 00:26:37,840
Unicode should handle yes it does

483
00:26:37,840 --> 00:26:40,120
depending on if the custom directory

484
00:26:40,120 --> 00:26:43,690
directive expends to known directive you

485
00:26:43,690 --> 00:26:45,280
don't have to change anything in Rhino

486
00:26:45,280 --> 00:26:48,160
type but you can also for example create

487
00:26:48,160 --> 00:26:51,299
a specific flowable that handles your

488
00:26:51,299 --> 00:27:02,650
custom directory yes it should not be

489
00:27:02,650 --> 00:27:03,340
too difficult

490
00:27:03,340 --> 00:27:07,240
each it starts from document tree in

491
00:27:07,240 --> 00:27:10,270
which each node as a name and this is

492
00:27:10,270 --> 00:27:15,070
mapped to a Python class so in this

493
00:27:15,070 --> 00:27:18,309
class you implement the mapping to the

494
00:27:18,309 --> 00:27:21,389
internal representation

495
00:27:26,390 --> 00:27:30,390
so it's things you things kind of

496
00:27:30,390 --> 00:27:32,190
handles this for restructuredtext

497
00:27:32,190 --> 00:27:35,100
but for other formats like the basic

498
00:27:35,100 --> 00:27:39,000
restructure text content it's not not

499
00:27:39,000 --> 00:27:41,850
possible to to pass it to to documents

500
00:27:41,850 --> 00:27:43,650
and it will not concatenate that's not

501
00:27:43,650 --> 00:27:49,650
support enough ok that's it I think

502
00:27:49,650 --> 00:27:51,460
thank you

503
00:27:51,460 --> 00:27:57,180
[Applause]

504
00:27:57,180 --> 00:28:00,309
[Music]

