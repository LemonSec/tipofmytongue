1
00:00:08,160 --> 00:00:14,350
night-night go okay the next guitar is

2
00:00:14,350 --> 00:00:16,359
45 minutes in the schedule why is that

3
00:00:16,359 --> 00:00:18,310
why is it special so it's actually

4
00:00:18,310 --> 00:00:19,630
shorter because we took two

5
00:00:19,630 --> 00:00:21,250
presentations and if we squish them

6
00:00:21,250 --> 00:00:29,740
together in a single one so Nicholas so

7
00:00:29,740 --> 00:00:31,510
yeah so Nicholas were probably giving

8
00:00:31,510 --> 00:00:33,129
the more interesting part at all giving

9
00:00:33,129 --> 00:00:35,140
the introductory to the following

10
00:00:35,140 --> 00:00:37,089
question fek is why I went in how to use

11
00:00:37,089 --> 00:00:38,769
them with our flocks or part one is why

12
00:00:38,769 --> 00:00:42,640
when and then part two is how and now

13
00:00:42,640 --> 00:00:44,499
lastly I gave a similar presentation so

14
00:00:44,499 --> 00:00:48,359
you might think just for someone there

15
00:00:48,359 --> 00:00:50,800
yeah one guy okay good

16
00:00:50,800 --> 00:00:52,449
if it's one guy they not that I'm that's

17
00:00:52,449 --> 00:00:55,809
too bad off if it's two guys and that's

18
00:00:55,809 --> 00:00:57,370
not too bad I didn't wanna for people

19
00:00:57,370 --> 00:00:59,079
but I also didn't want to give the same

20
00:00:59,079 --> 00:01:01,359
presentation twice and there was

21
00:01:01,359 --> 00:01:03,010
something that we've realized sort of

22
00:01:03,010 --> 00:01:05,310
and actually this goes back to the panel

23
00:01:05,310 --> 00:01:07,330
you know we sometimes start in the

24
00:01:07,330 --> 00:01:09,579
middle so um basically that's just uh

25
00:01:09,579 --> 00:01:11,590
well you want to do FPGA is more

26
00:01:11,590 --> 00:01:13,270
accelerated blah blah one and this is

27
00:01:13,270 --> 00:01:16,810
what you do and then I think Daniel this

28
00:01:16,810 --> 00:01:17,829
morning gave a really good presentation

29
00:01:17,829 --> 00:01:20,289
have started from basically scratch they

30
00:01:20,289 --> 00:01:22,840
you know everyone calm down we want to

31
00:01:22,840 --> 00:01:24,189
do a ham radio this is what we do it's

32
00:01:24,189 --> 00:01:28,119
it's not that hard and I I felt I felt

33
00:01:28,119 --> 00:01:30,490
that was a good approach and so today I

34
00:01:30,490 --> 00:01:32,109
will actually talk about something very

35
00:01:32,109 --> 00:01:36,100
basic which is why do we even have it

36
00:01:36,100 --> 00:01:38,890
why would we want them now if you know

37
00:01:38,890 --> 00:01:40,780
all of this and I want to apologize it's

38
00:01:40,780 --> 00:01:43,509
the next ten minutes will be not the

39
00:01:43,509 --> 00:01:47,859
most enlightening but I do feel there's

40
00:01:47,859 --> 00:01:49,570
more conversations with people it's

41
00:01:49,570 --> 00:01:51,009
sometimes nice to sort of start from

42
00:01:51,009 --> 00:01:52,899
zero and talking like it's assuming you

43
00:01:52,899 --> 00:01:55,749
know nothing why is this interesting and

44
00:01:55,749 --> 00:01:57,189
that is exactly what I'm gonna mark

45
00:01:57,189 --> 00:02:02,380
right now now first of all we always

46
00:02:02,380 --> 00:02:03,909
assume that everyone knows what an SDR

47
00:02:03,909 --> 00:02:06,219
looks like and but maybe that's not true

48
00:02:06,219 --> 00:02:07,929
and here's sort of a very very very very

49
00:02:07,929 --> 00:02:10,119
high-level schematic um

50
00:02:10,119 --> 00:02:13,330
it's really hard to to get any in your

51
00:02:13,330 --> 00:02:13,960
high-level

52
00:02:13,960 --> 00:02:18,940
this and we start on this look at the

53
00:02:18,940 --> 00:02:20,440
analog side which I'm completely gonna

54
00:02:20,440 --> 00:02:22,090
ignore now so this is all everything has

55
00:02:22,090 --> 00:02:28,900
antennas and filters and whatnot oh man

56
00:02:28,900 --> 00:02:32,770
I guess I hopefully spoke loud enough to

57
00:02:32,770 --> 00:02:35,110
pick up the first couple of minutes it's

58
00:02:35,110 --> 00:02:37,810
like half an hour I was stationed during

59
00:02:37,810 --> 00:02:39,670
and asking people the same question how

60
00:02:39,670 --> 00:02:43,170
could you possibly forget the microphone

61
00:02:43,230 --> 00:02:46,480
let's not talk about that today we've

62
00:02:46,480 --> 00:02:47,950
already talked about ADCs and DACs a

63
00:02:47,950 --> 00:02:49,450
little bit and what comes out of those

64
00:02:49,450 --> 00:02:53,620
is digital data now on most commercially

65
00:02:53,620 --> 00:02:55,960
available software radios and by the way

66
00:02:55,960 --> 00:02:56,950
I work for a company that builds

67
00:02:56,950 --> 00:02:59,080
software radios they look like that but

68
00:02:59,080 --> 00:03:01,660
it's not limited to that like this is

69
00:03:01,660 --> 00:03:02,980
sort of the business or the generic

70
00:03:02,980 --> 00:03:05,890
design it you always have data coming

71
00:03:05,890 --> 00:03:08,680
from the deck goes into an FPGA and then

72
00:03:08,680 --> 00:03:10,150
between the FPGA and your actual

73
00:03:10,150 --> 00:03:11,710
software running so can you can radio

74
00:03:11,710 --> 00:03:14,190
for example you will have some kind of

75
00:03:14,190 --> 00:03:17,140
transport something that is getting the

76
00:03:17,140 --> 00:03:18,750
data from the FPGA into your software

77
00:03:18,750 --> 00:03:20,740
that's also something I don't really

78
00:03:20,740 --> 00:03:22,360
want to talk about now but there's a

79
00:03:22,360 --> 00:03:23,890
difference between those black lines and

80
00:03:23,890 --> 00:03:27,070
those orange lines which is the black

81
00:03:27,070 --> 00:03:28,900
lines are typically PCB traces as a

82
00:03:28,900 --> 00:03:31,870
matter of fact or something similar some

83
00:03:31,870 --> 00:03:35,020
some local connector whereas the orange

84
00:03:35,020 --> 00:03:38,440
thick arrow could be anything so network

85
00:03:38,440 --> 00:03:41,170
I know it could be through the internet

86
00:03:41,170 --> 00:03:46,060
I for all I can okay and here we have an

87
00:03:46,060 --> 00:03:48,400
FPGA what the hell does this guy do and

88
00:03:48,400 --> 00:03:50,410
what is it so first of all what is an

89
00:03:50,410 --> 00:03:52,510
FPGA and I just copy and paste at the

90
00:03:52,510 --> 00:03:54,850
Wikipedia definition here integrated

91
00:03:54,850 --> 00:03:56,050
circuit designed it we could figure by

92
00:03:56,050 --> 00:03:58,480
customer or designer after manufacturing

93
00:03:58,480 --> 00:04:02,800
hence field-programmable okay so let's

94
00:04:02,800 --> 00:04:04,600
let's dissect that so we have a

95
00:04:04,600 --> 00:04:07,120
user-definable digital circuit so the

96
00:04:07,120 --> 00:04:08,740
digital is sort of something like if you

97
00:04:08,740 --> 00:04:10,450
go and sort of the very very modern

98
00:04:10,450 --> 00:04:11,950
things they're all actually people will

99
00:04:11,950 --> 00:04:14,050
actually start implementing analog

100
00:04:14,050 --> 00:04:16,120
components on a few G and then

101
00:04:16,120 --> 00:04:17,290
technically I think we shouldn't be

102
00:04:17,290 --> 00:04:19,120
calling them FPGA anymore but that the

103
00:04:19,120 --> 00:04:21,010
name is just stuck so let's stick with

104
00:04:21,010 --> 00:04:25,090
that going back to this slide it means

105
00:04:25,090 --> 00:04:26,680
we have an output of the deck and then

106
00:04:26,680 --> 00:04:27,670
somewhere we have maybe an

107
00:04:27,670 --> 00:04:28,750
our connection and then we have

108
00:04:28,750 --> 00:04:30,880
something that we can define so so when

109
00:04:30,880 --> 00:04:33,160
we when we saw the hardware we say okay

110
00:04:33,160 --> 00:04:35,980
this is yet to be defined but it's a

111
00:04:35,980 --> 00:04:37,660
digital hardware circuit so that's

112
00:04:37,660 --> 00:04:40,120
important to keep in mind we will have

113
00:04:40,120 --> 00:04:41,890
you know flip-flops and it's a great

114
00:04:41,890 --> 00:04:43,810
somewhere in there but we'd like at the

115
00:04:43,810 --> 00:04:45,490
time when we manufacture we don't know

116
00:04:45,490 --> 00:04:48,370
yet what they are that's that's a thing

117
00:04:48,370 --> 00:04:51,820
to keep in mind and even after shipping

118
00:04:51,820 --> 00:04:54,940
the device we can readily change that

119
00:04:54,940 --> 00:04:57,850
basically at any time with some caveats

120
00:04:57,850 --> 00:05:01,960
and what is the typical clock rate for

121
00:05:01,960 --> 00:05:04,990
such an FPGA well you know that berries

122
00:05:04,990 --> 00:05:07,240
there's not there's no something you

123
00:05:07,240 --> 00:05:08,230
know there's no one answer to that

124
00:05:08,230 --> 00:05:09,970
question but it's not gigahertz it's

125
00:05:09,970 --> 00:05:11,500
usually typically in the order of

126
00:05:11,500 --> 00:05:13,270
several hundred megahertz now if you

127
00:05:13,270 --> 00:05:14,560
think hundred megahertz so this sounds

128
00:05:14,560 --> 00:05:16,570
but does that sound like a lot you come

129
00:05:16,570 --> 00:05:17,830
from a software world maybe it doesn't

130
00:05:17,830 --> 00:05:19,870
but it's actually more than you need in

131
00:05:19,870 --> 00:05:22,570
most cases and I will tell you why in a

132
00:05:22,570 --> 00:05:28,120
sec so yes in an in a sec fill don't be

133
00:05:28,120 --> 00:05:28,870
so impatient

134
00:05:28,870 --> 00:05:33,280
drink some club Marty so um I actually

135
00:05:33,280 --> 00:05:35,940
have a lot of colleagues that like me

136
00:05:35,940 --> 00:05:38,020
studied electrical engineering and then

137
00:05:38,020 --> 00:05:40,990
started doing software but if you study

138
00:05:40,990 --> 00:05:42,790
electric chain you handle stuff like

139
00:05:42,790 --> 00:05:44,950
this in class and if you remember what

140
00:05:44,950 --> 00:05:45,550
you did in school

141
00:05:45,550 --> 00:05:47,500
you're you have all the knowledge you

142
00:05:47,500 --> 00:05:49,000
needs to get started with their pga

143
00:05:49,000 --> 00:05:52,690
development so how do we even program

144
00:05:52,690 --> 00:05:54,730
such an FPGA and as a matter of fact I

145
00:05:54,730 --> 00:05:57,220
will show one show it's a demo here so

146
00:05:57,220 --> 00:05:59,140
there's there is one buried somewhere

147
00:05:59,140 --> 00:06:01,450
here and this is something that I will

148
00:06:01,450 --> 00:06:02,890
be programming reprogramming all the

149
00:06:02,890 --> 00:06:05,110
time and how does that even happen so on

150
00:06:05,110 --> 00:06:07,270
a very high level four steps first of

151
00:06:07,270 --> 00:06:10,090
all define your circuitry like okay what

152
00:06:10,090 --> 00:06:13,270
do we even want to achieve and this is

153
00:06:13,270 --> 00:06:14,740
will be all kinds of things I said oh

154
00:06:14,740 --> 00:06:16,570
yeah we have the AGC on the one side and

155
00:06:16,570 --> 00:06:17,950
we have some kind of transport there but

156
00:06:17,950 --> 00:06:20,080
everything that's in between needs to be

157
00:06:20,080 --> 00:06:21,640
defined in order for something useful to

158
00:06:21,640 --> 00:06:25,210
come out of it so I need to design the

159
00:06:25,210 --> 00:06:27,220
digital circuit that then later on I

160
00:06:27,220 --> 00:06:30,820
will actually be requiring we have ways

161
00:06:30,820 --> 00:06:32,440
to encode that for example we have

162
00:06:32,440 --> 00:06:34,030
programming languages called ver log of

163
00:06:34,030 --> 00:06:35,470
the HDL which is sort of our textual

164
00:06:35,470 --> 00:06:37,960
descriptions there are graphical tools

165
00:06:37,960 --> 00:06:40,330
and honestly I'm not a fan of graphical

166
00:06:40,330 --> 00:06:41,650
tools in general

167
00:06:41,650 --> 00:06:43,660
for FPGA development they make more

168
00:06:43,660 --> 00:06:46,330
sense than for Co development I feel

169
00:06:46,330 --> 00:06:48,580
because what you are right what you are

170
00:06:48,580 --> 00:06:50,110
developing at the end of the day is a

171
00:06:50,110 --> 00:06:51,610
digital circuit and we are used to

172
00:06:51,610 --> 00:06:54,940
dealing with schematics practically

173
00:06:54,940 --> 00:06:57,370
though if you if you're maintaining this

174
00:06:57,370 --> 00:06:59,650
you will probably use very log or VHDL

175
00:06:59,650 --> 00:07:03,970
and for good reason so now comes the the

176
00:07:03,970 --> 00:07:06,520
black box pod so we take this say very

177
00:07:06,520 --> 00:07:08,680
log of VHDL or whatever and then we turn

178
00:07:08,680 --> 00:07:09,910
it into a bit stream it's like sort of

179
00:07:09,910 --> 00:07:13,449
the compile step in software and this is

180
00:07:13,449 --> 00:07:14,979
sort of a binary file that is usually

181
00:07:14,979 --> 00:07:17,229
proprietary and we like we don't exactly

182
00:07:17,229 --> 00:07:18,850
know what's in there except people have

183
00:07:18,850 --> 00:07:22,199
reverse interesting it engineered it

184
00:07:22,199 --> 00:07:23,889
point I'm trying to make it at this

185
00:07:23,889 --> 00:07:25,510
point you will be like relying a lot on

186
00:07:25,510 --> 00:07:28,000
proprietary tools and tool chains there

187
00:07:28,000 --> 00:07:30,610
are exceptions to this but this is

188
00:07:30,610 --> 00:07:32,530
something we currently have to live with

189
00:07:32,530 --> 00:07:34,840
now once we have the bitstream this is

190
00:07:34,840 --> 00:07:37,330
actually an instruction for the FPGA how

191
00:07:37,330 --> 00:07:38,800
to internal you can reconfigure itself

192
00:07:38,800 --> 00:07:40,750
so we have some pins let's say like here

193
00:07:40,750 --> 00:07:42,910
we can load that that bit stream and

194
00:07:42,910 --> 00:07:47,050
then that's that's what we do and if you

195
00:07:47,050 --> 00:07:49,000
buy a eval board those will be very

196
00:07:49,000 --> 00:07:50,830
obviously exposed I have pictures of

197
00:07:50,830 --> 00:07:53,260
those and what can we use them for well

198
00:07:53,260 --> 00:07:55,000
can you run software so that sort of a

199
00:07:55,000 --> 00:07:57,460
table question we could but the way we

200
00:07:57,460 --> 00:07:59,139
run software in it is we we configure

201
00:07:59,139 --> 00:08:01,000
the digital circuit to behave like a CPU

202
00:08:01,000 --> 00:08:02,950
and then it runs software it's typically

203
00:08:02,950 --> 00:08:05,590
not a very efficient use of our FPGA so

204
00:08:05,590 --> 00:08:08,080
if you have a digital circuit that you

205
00:08:08,080 --> 00:08:09,669
can draw out that's something you would

206
00:08:09,669 --> 00:08:12,130
want to put on an FPGA and something to

207
00:08:12,130 --> 00:08:14,440
keep in mind is you have a lot of space

208
00:08:14,440 --> 00:08:15,849
in some of these fu genes you can take

209
00:08:15,849 --> 00:08:19,449
data from everywhere do things you know

210
00:08:19,449 --> 00:08:21,250
in several places at the same time you

211
00:08:21,250 --> 00:08:22,930
can sort of split it in several regions

212
00:08:22,930 --> 00:08:24,669
and every one of those can be handling a

213
00:08:24,669 --> 00:08:27,930
subtask at the same time so the design

214
00:08:27,930 --> 00:08:31,449
philosophy here is very very very deep

215
00:08:31,449 --> 00:08:34,440
and I can't cover it in five minutes but

216
00:08:34,440 --> 00:08:36,729
here's sort of a typical example this is

217
00:08:36,729 --> 00:08:42,279
an FFT as a digital circuit and this is

218
00:08:42,279 --> 00:08:43,419
something where it's very obvious that

219
00:08:43,419 --> 00:08:45,640
you can put it on an FPGA and if you if

220
00:08:45,640 --> 00:08:47,170
you were to put this in software for

221
00:08:47,170 --> 00:08:48,880
example you'd be writing some kind of

222
00:08:48,880 --> 00:08:50,890
recursive function maybe and then you

223
00:08:50,890 --> 00:08:52,270
have to deal with stacks something

224
00:08:52,270 --> 00:08:54,550
something something but on an FPGA it's

225
00:08:54,550 --> 00:08:55,420
very easy you have

226
00:08:55,420 --> 00:08:57,220
on the left-hand side and then it sort

227
00:08:57,220 --> 00:08:58,660
of gets clocked through from left to

228
00:08:58,660 --> 00:09:00,220
right and at the output you have UFT a

229
00:09:00,220 --> 00:09:01,750
couple of clock cycles late it's very

230
00:09:01,750 --> 00:09:04,780
nice so if F key is filters and neural

231
00:09:04,780 --> 00:09:06,880
networks examples of things that are

232
00:09:06,880 --> 00:09:09,490
easily implementable on FPGA is control

233
00:09:09,490 --> 00:09:12,730
loops also nice because I mentioned this

234
00:09:12,730 --> 00:09:14,650
here we can control latency very tightly

235
00:09:14,650 --> 00:09:16,570
that's nice control loops if we have to

236
00:09:16,570 --> 00:09:19,120
do sort of complex decision-making it

237
00:09:19,120 --> 00:09:23,620
can get difficult now as I said earlier

238
00:09:23,620 --> 00:09:25,120
we can replace the content of knife

239
00:09:25,120 --> 00:09:26,440
could year but we can't do it anytime

240
00:09:26,440 --> 00:09:28,630
willy-nilly because one of the reasons

241
00:09:28,630 --> 00:09:31,810
is this is like a big part of iced tea

242
00:09:31,810 --> 00:09:33,880
and it'll take down certain pieces of

243
00:09:33,880 --> 00:09:35,830
the rest of the component of the sei if

244
00:09:35,830 --> 00:09:37,810
we do so so this is copied from a

245
00:09:37,810 --> 00:09:39,730
schematic of this device which is

246
00:09:39,730 --> 00:09:45,940
downloadable on the Eddas website and so

247
00:09:45,940 --> 00:09:48,280
I don't want to go into detail but this

248
00:09:48,280 --> 00:09:51,400
here is basically the FPGA and it has

249
00:09:51,400 --> 00:09:54,670
certain components connected to it okay

250
00:09:54,670 --> 00:09:56,620
I cropped them out that was stupid but

251
00:09:56,620 --> 00:09:59,020
like the whole point of this slide was

252
00:09:59,020 --> 00:10:00,730
to show that here we have a network

253
00:10:00,730 --> 00:10:04,030
connection Ethernet actually no that's

254
00:10:04,030 --> 00:10:07,260
not true we do not but let's say we have

255
00:10:07,260 --> 00:10:10,270
and we are talking to that FPGA over the

256
00:10:10,270 --> 00:10:11,890
Ethernet connection and then reprogram

257
00:10:11,890 --> 00:10:13,720
in down grows that youth indication

258
00:10:13,720 --> 00:10:17,130
there's something to keep in mind so

259
00:10:17,130 --> 00:10:20,710
there are three major challenges for

260
00:10:20,710 --> 00:10:22,900
FPGA development the first one is sort

261
00:10:22,900 --> 00:10:24,550
of the digital logic part and if you can

262
00:10:24,550 --> 00:10:25,990
come out of as I said earlier in IE

263
00:10:25,990 --> 00:10:28,890
school you will be familiar with this so

264
00:10:28,890 --> 00:10:30,970
what's this equation has a digital

265
00:10:30,970 --> 00:10:32,950
circuit and what is this equation you

266
00:10:32,950 --> 00:10:36,370
someone said it is a convolution so um

267
00:10:36,370 --> 00:10:38,710
could you draw that ours out as an as a

268
00:10:38,710 --> 00:10:41,590
as a digital circuit it's not a trick

269
00:10:41,590 --> 00:10:45,750
question do you think you could do that

270
00:10:45,750 --> 00:10:48,910
yeah I mean it's not not not hard but we

271
00:10:48,910 --> 00:10:51,490
have what we basically add a bunch of

272
00:10:51,490 --> 00:10:53,380
things and a bunch of things we add up a

273
00:10:53,380 --> 00:10:55,180
delayed versions of a signal multiplied

274
00:10:55,180 --> 00:10:58,270
by something else so I could use the

275
00:10:58,270 --> 00:11:00,130
whiteboard to do that but I want to

276
00:11:00,130 --> 00:11:04,270
still make a last time but here's here's

277
00:11:04,270 --> 00:11:07,680
a here's an example what is this dude

278
00:11:07,710 --> 00:11:10,380
to the other question it's a shift

279
00:11:10,380 --> 00:11:15,210
register yes so um if the purpose of

280
00:11:15,210 --> 00:11:16,770
this is and actually copied this from

281
00:11:16,770 --> 00:11:19,050
Wikipedia to that there's a you can't

282
00:11:19,050 --> 00:11:22,050
see it here there's the the this the

283
00:11:22,050 --> 00:11:25,380
source is listed to put the purpose of

284
00:11:25,380 --> 00:11:26,670
this circus is to have a serial

285
00:11:26,670 --> 00:11:28,680
connection here serial data coming in

286
00:11:28,680 --> 00:11:33,390
and we we shift so we have data here

287
00:11:33,390 --> 00:11:35,340
then we have a clock signal it sort of

288
00:11:35,340 --> 00:11:37,920
toggles these flip-flops we do this four

289
00:11:37,920 --> 00:11:40,260
times and then the the bit that was here

290
00:11:40,260 --> 00:11:42,330
got all all the way here and then the

291
00:11:42,330 --> 00:11:44,100
one after that is here the one after

292
00:11:44,100 --> 00:11:46,470
that is here sir so we have four bits so

293
00:11:46,470 --> 00:11:49,590
now we have gone from serial apparel so

294
00:11:49,590 --> 00:11:50,700
it's a serial in parallel out shift

295
00:11:50,700 --> 00:11:55,080
register circuit I think this is fairly

296
00:11:55,080 --> 00:11:57,060
I you know I hate saying this is easy

297
00:11:57,060 --> 00:11:58,590
but you know because I started it blow

298
00:11:58,590 --> 00:12:00,330
but I think this these are concepts that

299
00:12:00,330 --> 00:12:04,740
are tangible I think you can play around

300
00:12:04,740 --> 00:12:06,480
with simulators and you'll you will get

301
00:12:06,480 --> 00:12:08,880
very far and I I would love to hear

302
00:12:08,880 --> 00:12:10,020
people disagree and then have a

303
00:12:10,020 --> 00:12:13,560
discussion over that some other time

304
00:12:13,560 --> 00:12:16,950
however oh there we are no III blended

305
00:12:16,950 --> 00:12:18,300
it out because it has the answer to my

306
00:12:18,300 --> 00:12:21,240
question however when we actually

307
00:12:21,240 --> 00:12:22,620
implement these we have but I'm just

308
00:12:22,620 --> 00:12:25,350
gonna call it circuit magic so I'm sort

309
00:12:25,350 --> 00:12:27,530
of understanding the logic is one part

310
00:12:27,530 --> 00:12:30,180
but then actually building it we get all

311
00:12:30,180 --> 00:12:31,800
these weird constrains or terrorists

312
00:12:31,800 --> 00:12:34,500
here like what I what like what could go

313
00:12:34,500 --> 00:12:36,690
wrong and this in the circuit just like

314
00:12:36,690 --> 00:12:44,280
random ideas like history someone set up

315
00:12:44,280 --> 00:12:45,690
and hold violation there you go that's

316
00:12:45,690 --> 00:12:46,980
good I'm sorry I can't want to because

317
00:12:46,980 --> 00:12:49,380
that's more useful to my and yeah set up

318
00:12:49,380 --> 00:12:52,550
a whole managed what does that mean

319
00:13:03,070 --> 00:13:05,060
okay I don't want to go in that my

320
00:13:05,060 --> 00:13:07,460
future but I'm glad you do because that

321
00:13:07,460 --> 00:13:11,030
me because that that sort of emphasizes

322
00:13:11,030 --> 00:13:13,630
my point that you have this simple

323
00:13:13,630 --> 00:13:14,950
[Music]

324
00:13:14,950 --> 00:13:16,970
circuit and then all of a sudden have to

325
00:13:16,970 --> 00:13:18,710
think of all these things so I just

326
00:13:18,710 --> 00:13:20,390
randomly came up with these four like

327
00:13:20,390 --> 00:13:22,580
where does this come from like how fast

328
00:13:22,580 --> 00:13:24,500
is it and that goes slightly into your

329
00:13:24,500 --> 00:13:26,360
question like will the flop flip flops

330
00:13:26,360 --> 00:13:29,920
keep up which is sort of a you know

331
00:13:29,920 --> 00:13:32,120
unscientific way of asking the same

332
00:13:32,120 --> 00:13:35,600
question like I mean how like when will

333
00:13:35,600 --> 00:13:37,550
I be reading these outputs because like

334
00:13:37,550 --> 00:13:39,440
they not valid until I was like put in

335
00:13:39,440 --> 00:13:42,290
for like it toy inputs right so how do I

336
00:13:42,290 --> 00:13:43,760
synchronize the input to the output in

337
00:13:43,760 --> 00:13:45,470
the door all these things that I

338
00:13:45,470 --> 00:13:48,140
suddenly need to care about and that's

339
00:13:48,140 --> 00:13:50,570
really something that is sort of the art

340
00:13:50,570 --> 00:13:54,380
of FPGA or something you know you should

341
00:13:54,380 --> 00:13:56,360
have to go through and that the tools

342
00:13:56,360 --> 00:13:58,190
are sort of one of the biggest like

343
00:13:58,190 --> 00:13:59,870
personally I'm a little bit miffed by

344
00:13:59,870 --> 00:14:01,670
that because you know in the software

345
00:14:01,670 --> 00:14:03,620
world we have like you know GCC has come

346
00:14:03,620 --> 00:14:05,390
a long way recently yeah like produce

347
00:14:05,390 --> 00:14:07,010
nice error messages and just be easy to

348
00:14:07,010 --> 00:14:09,800
setup and you go to a C programming

349
00:14:09,800 --> 00:14:11,030
tutorial you can start writing code

350
00:14:11,030 --> 00:14:14,150
immediately with most proprietary tool

351
00:14:14,150 --> 00:14:15,530
chains you will have to like for example

352
00:14:15,530 --> 00:14:18,380
the precursor to the tool called vivid

353
00:14:18,380 --> 00:14:20,000
or was called eyes ian was about 20

354
00:14:20,000 --> 00:14:22,940
gigabytes installation you know because

355
00:14:22,940 --> 00:14:26,240
it shipped all these random things yeah

356
00:14:26,240 --> 00:14:27,589
and good luck getting that run on sort

357
00:14:27,589 --> 00:14:31,460
of one of the the unsupported OSS I just

358
00:14:31,460 --> 00:14:33,140
I just pictured a random like picked a

359
00:14:33,140 --> 00:14:34,670
random screenshot ready sort of trying

360
00:14:34,670 --> 00:14:36,380
to debug something that's going on on

361
00:14:36,380 --> 00:14:39,320
the FPGA and you will be spending a lot

362
00:14:39,320 --> 00:14:40,610
of time trying to sort of go through

363
00:14:40,610 --> 00:14:44,120
menus and I you know that's that's just

364
00:14:44,120 --> 00:14:46,610
not great it's just the way it is so

365
00:14:46,610 --> 00:14:48,290
there are actually some developments in

366
00:14:48,290 --> 00:14:51,770
open source fpga development but they

367
00:14:51,770 --> 00:14:53,570
sort of target very specific chips and

368
00:14:53,570 --> 00:14:56,570
on that broadly applicable i hope

369
00:14:56,570 --> 00:14:58,520
that'll change and twenty years from now

370
00:14:58,520 --> 00:15:01,400
we'll be laughing about this if you're

371
00:15:01,400 --> 00:15:05,540
interested there are nice resources EDA

372
00:15:05,540 --> 00:15:07,430
playground is this guy showed a

373
00:15:07,430 --> 00:15:08,810
screenshot here is

374
00:15:08,810 --> 00:15:11,300
you can sort of load examples and then

375
00:15:11,300 --> 00:15:12,650
play around and you can press play and

376
00:15:12,650 --> 00:15:13,940
it'll sort of tell you what's what's

377
00:15:13,940 --> 00:15:19,010
going on that sort of a so a mental

378
00:15:19,010 --> 00:15:21,320
shift you have to do going from sort of

379
00:15:21,320 --> 00:15:23,270
a description of a circuit to then

380
00:15:23,270 --> 00:15:25,670
running it sort of in time that's

381
00:15:25,670 --> 00:15:27,500
something that is covered in many many

382
00:15:27,500 --> 00:15:29,030
tutorials and I can't really do that

383
00:15:29,030 --> 00:15:31,550
right now if you want to get started

384
00:15:31,550 --> 00:15:33,500
cheaply and maybe even using few tools

385
00:15:33,500 --> 00:15:35,720
so yo sis it's a free tool chain and

386
00:15:35,720 --> 00:15:37,520
then that's the ICO board which is a

387
00:15:37,520 --> 00:15:39,200
extension for the Raspberry Pi which has

388
00:15:39,200 --> 00:15:41,900
a small FPGA and it'll let you do some

389
00:15:41,900 --> 00:15:43,340
interesting things if you want to go for

390
00:15:43,340 --> 00:15:44,840
the bigger FPGAs you will have to work

391
00:15:44,840 --> 00:15:47,150
with the proprietary tools from Silex

392
00:15:47,150 --> 00:15:49,010
and share they offer they both have oh

393
00:15:49,010 --> 00:15:50,630
this is the ICO board that they have

394
00:15:50,630 --> 00:15:53,150
like evil kids like these these are

395
00:15:53,150 --> 00:15:54,560
slightly more expensive but they will

396
00:15:54,560 --> 00:15:55,460
also let you do really interesting

397
00:15:55,460 --> 00:15:57,080
things you could even play around with

398
00:15:57,080 --> 00:15:58,670
Jesse three or four per year if you have

399
00:15:58,670 --> 00:16:02,060
stuff like this and then of course use

400
00:16:02,060 --> 00:16:04,220
appears like these will also let you to

401
00:16:04,220 --> 00:16:08,420
STR and use FPGAs at the same time okay

402
00:16:08,420 --> 00:16:11,030
I'm already over time so very very

403
00:16:11,030 --> 00:16:16,030
briefly explain RF NOC which is an FPGA

404
00:16:16,030 --> 00:16:19,130
framework that like we as an I just

405
00:16:19,130 --> 00:16:23,090
research have been working on so the

406
00:16:23,090 --> 00:16:24,500
problem we're trying to solve no

407
00:16:24,500 --> 00:16:25,940
actually yeah this one slide yeah I this

408
00:16:25,940 --> 00:16:27,560
light I carry around on every

409
00:16:27,560 --> 00:16:30,140
presentation I give on RF north so if

410
00:16:30,140 --> 00:16:31,550
you walk out now out of this

411
00:16:31,550 --> 00:16:32,750
presentation I'd like you to remember

412
00:16:32,750 --> 00:16:35,180
this one slide what is our flock it is

413
00:16:35,180 --> 00:16:38,720
for FPGA is what can radio is for GPS so

414
00:16:38,720 --> 00:16:42,620
we have this sort of block based modular

415
00:16:42,620 --> 00:16:45,290
design approach both in RF knock and

416
00:16:45,290 --> 00:16:48,950
CUDA radio and then include as you as

417
00:16:48,950 --> 00:16:50,450
Marcus traveler lien generator we have

418
00:16:50,450 --> 00:16:52,460
this ability to write blocks and then

419
00:16:52,460 --> 00:16:54,080
data will magically go from one block to

420
00:16:54,080 --> 00:16:55,970
the next it's obviously not magic but we

421
00:16:55,970 --> 00:16:57,350
don't have to care how it happens

422
00:16:57,350 --> 00:16:59,510
the same thing is true for FPGAs and

423
00:16:59,510 --> 00:17:02,090
what i talked only about the digital

424
00:17:02,090 --> 00:17:03,860
clock man so the digital magic that you

425
00:17:03,860 --> 00:17:05,990
have to do is much much reduced if you

426
00:17:05,990 --> 00:17:10,640
use a framework such as this and we like

427
00:17:10,640 --> 00:17:12,470
working together with kin radio so and

428
00:17:12,470 --> 00:17:13,910
I'll show that in a bit

429
00:17:13,910 --> 00:17:16,339
okay so here's an example of a gonna

430
00:17:16,339 --> 00:17:17,930
radio application that would simply not

431
00:17:17,930 --> 00:17:20,569
work even though it's very simple so you

432
00:17:20,569 --> 00:17:22,640
generate data from your SDR

433
00:17:22,640 --> 00:17:24,050
you stream it to the computer then you

434
00:17:24,050 --> 00:17:28,280
calculate an FFT 1024 K whatever complex

435
00:17:28,280 --> 00:17:29,900
I'm adding average and then you plot

436
00:17:29,900 --> 00:17:32,950
that so a very very simple spectrum at

437
00:17:32,950 --> 00:17:34,850
estimation application this is sort of

438
00:17:34,850 --> 00:17:39,200
DSP 101 level already this won't work if

439
00:17:39,200 --> 00:17:41,450
you have a high bandwidth so why because

440
00:17:41,450 --> 00:17:43,370
a you need to get data out of your SDR

441
00:17:43,370 --> 00:17:45,310
onto your computer fast enough which is

442
00:17:45,310 --> 00:17:47,900
maybe not even theoretically possible if

443
00:17:47,900 --> 00:17:49,610
you have say Gigabit Ethernet connection

444
00:17:49,610 --> 00:17:52,310
then you're doing all these simple

445
00:17:52,310 --> 00:17:54,140
number crunchy applications on the

446
00:17:54,140 --> 00:17:55,760
computer which you could just as well or

447
00:17:55,760 --> 00:17:57,380
much much much much better do on the

448
00:17:57,380 --> 00:18:01,250
FPGA and then here you are decimating

449
00:18:01,250 --> 00:18:02,750
your data so the output of this block is

450
00:18:02,750 --> 00:18:06,890
very low range but so so you can plot it

451
00:18:06,890 --> 00:18:08,800
but you've done all this unnecessary

452
00:18:08,800 --> 00:18:10,910
calculation on your computer why not

453
00:18:10,910 --> 00:18:13,610
move all of this stuff to the FPGA and

454
00:18:13,610 --> 00:18:15,890
that's exactly but and yeah this is the

455
00:18:15,890 --> 00:18:17,720
visit this is the important part is we

456
00:18:17,720 --> 00:18:19,190
want to move this to the FPGA but we do

457
00:18:19,190 --> 00:18:22,400
not want to lose this modular approach

458
00:18:22,400 --> 00:18:24,380
right we don't want to say ok we we fold

459
00:18:24,380 --> 00:18:25,730
all of this into here and then we have

460
00:18:25,730 --> 00:18:27,020
this new black box that does everything

461
00:18:27,020 --> 00:18:28,610
on this piece that's not the point now

462
00:18:28,610 --> 00:18:29,510
we know we want to have the same

463
00:18:29,510 --> 00:18:32,180
modularity but on the FPGA so I'm gonna

464
00:18:32,180 --> 00:18:35,480
run a little example right now and then

465
00:18:35,480 --> 00:18:37,100
this slide will actually explain an

466
00:18:37,100 --> 00:18:44,360
example so oh my antenna oh so I have an

467
00:18:44,360 --> 00:18:48,710
embedded str here which means i are crap

468
00:18:48,710 --> 00:18:51,230
to forget it

469
00:18:51,230 --> 00:18:55,220
jeez I'm sorry I am just someone having

470
00:18:55,220 --> 00:19:01,160
nice and warm SMA please OSP

471
00:19:01,160 --> 00:19:04,920
your reception will be great let's just

472
00:19:04,920 --> 00:19:09,150
give it a try I was I was testing this

473
00:19:09,150 --> 00:19:10,830
in my hotel room on and that's where my

474
00:19:10,830 --> 00:19:18,740
antenna is right now I almost did not oh

475
00:19:18,740 --> 00:19:21,450
yeah so this is an embedded Linux I've

476
00:19:21,450 --> 00:19:25,020
logged in you can see this is my command

477
00:19:25,020 --> 00:19:28,230
prompt on on the device and I will run

478
00:19:28,230 --> 00:19:30,750
an application in Kundu radio here it is

479
00:19:30,750 --> 00:19:34,860
which looks like this so we sample stuff

480
00:19:34,860 --> 00:19:37,230
then we put it through a couple of DSP

481
00:19:37,230 --> 00:19:39,120
applications then we put it through this

482
00:19:39,120 --> 00:19:40,410
block called phosphor which by the way

483
00:19:40,410 --> 00:19:44,610
it's still my road it'll it'll then

484
00:19:44,610 --> 00:19:46,860
distribute the data through these zero

485
00:19:46,860 --> 00:19:49,440
and pure connect us to my laptop the

486
00:19:49,440 --> 00:19:50,850
reason I need the laptop for this is

487
00:19:50,850 --> 00:19:52,170
because I need to visualize this and

488
00:19:52,170 --> 00:19:54,360
this does not have a display so then on

489
00:19:54,360 --> 00:19:55,860
my laptop just for clarity I will be

490
00:19:55,860 --> 00:19:59,610
running this application which just just

491
00:19:59,610 --> 00:20:00,750
only does visualizations

492
00:20:00,750 --> 00:20:02,850
I have one like this is getting the data

493
00:20:02,850 --> 00:20:07,620
in and then here we we visualize it okay

494
00:20:07,620 --> 00:20:12,870
so what I will do here so I'll set up my

495
00:20:12,870 --> 00:20:18,440
environment and so what I did earlier

496
00:20:18,440 --> 00:20:21,870
was I compiled this to a Python this

497
00:20:21,870 --> 00:20:23,400
year to a Python script which is now

498
00:20:23,400 --> 00:20:26,070
living on on the on the device and I

499
00:20:26,070 --> 00:20:36,210
will I will execute the end and I would

500
00:20:36,210 --> 00:20:37,530
be blown away if this works out of the

501
00:20:37,530 --> 00:20:42,960
box well so it does all kinds of output

502
00:20:42,960 --> 00:20:45,750
but I'm gonna scroll right to the top

503
00:20:45,750 --> 00:20:48,630
and here there we go

504
00:20:48,630 --> 00:20:51,900
it said loading FPGA image bla bla bla

505
00:20:51,900 --> 00:20:54,120
bla bla some bit file done and then it

506
00:20:54,120 --> 00:20:56,010
talks to the FPGA all all the rest of

507
00:20:56,010 --> 00:20:58,860
this output is just verbose information

508
00:20:58,860 --> 00:21:02,070
about conversing with the FPGA so it's

509
00:21:02,070 --> 00:21:03,690
doing stuff but we can't see it we need

510
00:21:03,690 --> 00:21:05,340
something to visualize it and I will do

511
00:21:05,340 --> 00:21:10,410
it in do that in here there we go so um

512
00:21:10,410 --> 00:21:14,460
we have 56 megahertz of bandwidth

513
00:21:14,460 --> 00:21:15,779
being processed and beautifully

514
00:21:15,779 --> 00:21:17,519
displayed now that doesn't sound too

515
00:21:17,519 --> 00:21:19,289
impressive if you know your spectrum

516
00:21:19,289 --> 00:21:22,169
analyzer but here we have an armed

517
00:21:22,169 --> 00:21:23,879
dual-core running at six hundred

518
00:21:23,879 --> 00:21:26,610
something megahertz like this by itself

519
00:21:26,610 --> 00:21:29,610
would never ever ever be able to process

520
00:21:29,610 --> 00:21:32,220
that that kind of data by putting it on

521
00:21:32,220 --> 00:21:34,350
the FPGA that works but not only did we

522
00:21:34,350 --> 00:21:36,570
put it on the FPGA but we also kept it

523
00:21:36,570 --> 00:21:38,129
there in a sort of modular fashion that

524
00:21:38,129 --> 00:21:40,289
just sort of easily understandable so if

525
00:21:40,289 --> 00:21:42,450
I'm debugging this I could go into the

526
00:21:42,450 --> 00:21:46,350
is it yeah I could go go into new radio

527
00:21:46,350 --> 00:21:48,269
and then sort of tap into outputs of

528
00:21:48,269 --> 00:21:52,259
individual components so um oh man I'm

529
00:21:52,259 --> 00:21:59,070
stealing Nick last time sorry so this is

530
00:21:59,070 --> 00:22:03,210
what the application looks like and if

531
00:22:03,210 --> 00:22:04,559
you know can do radio then this looks

532
00:22:04,559 --> 00:22:07,200
familiar but we have these green arrows

533
00:22:07,200 --> 00:22:09,869
which notify green arrow means this is

534
00:22:09,869 --> 00:22:11,820
happening on the FPGA black arrow means

535
00:22:11,820 --> 00:22:14,129
happening on the CPU and dashed means

536
00:22:14,129 --> 00:22:18,240
it's going from one to the other okay so

537
00:22:18,240 --> 00:22:22,230
um this is what this is what happens

538
00:22:22,230 --> 00:22:24,720
internally inside the use-ip we have all

539
00:22:24,720 --> 00:22:27,059
these individual blocks and if we run

540
00:22:27,059 --> 00:22:28,830
the Kinue radio app it'll simply tap out

541
00:22:28,830 --> 00:22:30,929
the data at there at the right position

542
00:22:30,929 --> 00:22:36,119
so um this is at some point you make a

543
00:22:36,119 --> 00:22:37,559
choice which blocks you want to run on

544
00:22:37,559 --> 00:22:40,200
an FPGA so here's a random random

545
00:22:40,200 --> 00:22:44,039
selection and then what Nicholas will

546
00:22:44,039 --> 00:22:50,490
talk about is like how whoa and when

547
00:22:50,490 --> 00:22:51,600
Nicholas will talk about now is how do

548
00:22:51,600 --> 00:22:52,919
you actually build a block and there's a

549
00:22:52,919 --> 00:22:55,769
sort of the internals the the point we

550
00:22:55,769 --> 00:22:57,840
were trying the problem we're trying to

551
00:22:57,840 --> 00:22:59,730
solve is that all of this magic was like

552
00:22:59,730 --> 00:23:00,899
data comes in goes out like how does

553
00:23:00,899 --> 00:23:02,460
that have this taken care by a framework

554
00:23:02,460 --> 00:23:06,269
and in this example is like say this is

555
00:23:06,269 --> 00:23:08,369
the radio it sends data to another block

556
00:23:08,369 --> 00:23:10,379
which could be an FFT all you have to do

557
00:23:10,379 --> 00:23:13,080
is put in your lines of vera log here

558
00:23:13,080 --> 00:23:16,730
that will then do the actual processing

559
00:23:16,789 --> 00:23:21,559
so let me just just connect

560
00:23:21,580 --> 00:23:31,419
and you can take over if you came to

561
00:23:31,419 --> 00:23:34,980
them the talk because of the name FPGA

562
00:23:34,980 --> 00:23:59,369
APA is over okay Wow

563
00:24:00,170 --> 00:24:10,530
well yeah I hope it is ok alright ok so

564
00:24:10,530 --> 00:24:12,480
I'm not going to talk about what very

565
00:24:12,480 --> 00:24:14,810
obvious or what can you do in the code

566
00:24:14,810 --> 00:24:16,980
because right now I'm going to talk

567
00:24:16,980 --> 00:24:18,960
about Arif not and understanding the

568
00:24:18,960 --> 00:24:21,120
framework of Arif nog is already some

569
00:24:21,120 --> 00:24:24,330
challenge and well with 20 minutes I

570
00:24:24,330 --> 00:24:27,920
would be like kind of running over it so

571
00:24:27,920 --> 00:24:36,570
if this works and it doesn't Jesus

572
00:24:36,570 --> 00:24:37,890
morning what do you do

573
00:24:37,890 --> 00:24:43,380
ok no my computer just crashed and

574
00:24:43,380 --> 00:24:46,560
that's the first yeah alright I'm gonna

575
00:24:46,560 --> 00:24:48,240
need to sleep so I will continue talking

576
00:24:48,240 --> 00:24:51,170
about it boots

577
00:24:51,170 --> 00:24:54,360
so f knock as Morgan already said it's

578
00:24:54,360 --> 00:24:56,700
just a way to connect your blocks in a

579
00:24:56,700 --> 00:25:00,270
genuine radio fashion so to say so I am

580
00:25:00,270 --> 00:25:02,070
assuming that everybody has used you

581
00:25:02,070 --> 00:25:05,700
know radio right and has anybody or

582
00:25:05,700 --> 00:25:08,100
everybody create your own out of you

583
00:25:08,100 --> 00:25:10,980
modeling you know radio out of three

584
00:25:10,980 --> 00:25:15,480
modules well okay that is less than I

585
00:25:15,480 --> 00:25:19,560
expected actually but it's okay so the

586
00:25:19,560 --> 00:25:21,420
thing is that you can do the same stuff

587
00:25:21,420 --> 00:25:24,270
with RF not module that is the sorta

588
00:25:24,270 --> 00:25:25,940
stuff that I'm going to be talking about

589
00:25:25,940 --> 00:25:31,790
when everything works and I hope it will

590
00:25:40,700 --> 00:25:44,960
all right okay so this is the outline

591
00:25:44,960 --> 00:25:48,630
I'm gonna start who I am so I'm master

592
00:25:48,630 --> 00:25:51,530
students in ki T in Karlsruhe Germany I

593
00:25:51,530 --> 00:25:55,110
spent six months last year and in Santa

594
00:25:55,110 --> 00:25:56,960
Clara being an intern in Atlas research

595
00:25:56,960 --> 00:25:59,570
all right now I'm working for either Zak

596
00:25:59,570 --> 00:26:01,680
customer support engineer meaning that

597
00:26:01,680 --> 00:26:03,540
if you have some problems with RF knock

598
00:26:03,540 --> 00:26:06,810
or good whatever from arrows and you

599
00:26:06,810 --> 00:26:08,660
contact us with the mailing list and

600
00:26:08,660 --> 00:26:11,250
sometimes I will answer because Marcos

601
00:26:11,250 --> 00:26:12,040
does it faster

602
00:26:12,040 --> 00:26:16,150
I'm better all right so create your own

603
00:26:16,150 --> 00:26:17,980
blog so the things that we want to do is

604
00:26:17,980 --> 00:26:20,049
to put our own application in the FPAA

605
00:26:20,049 --> 00:26:22,179
same stuff that you do with general

606
00:26:22,179 --> 00:26:24,400
radio you want to do that also in the

607
00:26:24,400 --> 00:26:27,429
fpga so we didn't radio what you do is

608
00:26:27,429 --> 00:26:29,980
you create some Python or C++ code and

609
00:26:29,980 --> 00:26:31,480
you hope it works and it's weird because

610
00:26:31,480 --> 00:26:34,360
you're really good at it but with RF

611
00:26:34,360 --> 00:26:35,710
knock you have to go a little bit

612
00:26:35,710 --> 00:26:38,980
further so we have this beautiful image

613
00:26:38,980 --> 00:26:40,890
that we use a lot this is called a

614
00:26:40,890 --> 00:26:43,660
hard-knock stack so basically what you

615
00:26:43,660 --> 00:26:45,250
have here in different colors is the

616
00:26:45,250 --> 00:26:47,500
different like interface that you're

617
00:26:47,500 --> 00:26:50,230
kind of working with so you have the

618
00:26:50,230 --> 00:26:52,450
FPGA you have the Jewish the integration

619
00:26:52,450 --> 00:26:54,460
and you know radio so FPE is what you

620
00:26:54,460 --> 00:26:56,350
want to have in the hardware so that is

621
00:26:56,350 --> 00:26:58,059
very local that is what you want to code

622
00:26:58,059 --> 00:27:00,760
that is going to be your IP but you want

623
00:27:00,760 --> 00:27:02,860
to connect that to your host computer if

624
00:27:02,860 --> 00:27:04,419
you're using for example one of the

625
00:27:04,419 --> 00:27:06,190
biggest devices but if your reason and

626
00:27:06,190 --> 00:27:08,500
better advice you'd really want that not

627
00:27:08,500 --> 00:27:10,710
your host but maybe good you know radio

628
00:27:10,710 --> 00:27:13,960
you use the UHD driver so that is the

629
00:27:13,960 --> 00:27:16,540
way that you connect your FPGA to the

630
00:27:16,540 --> 00:27:20,049
other part of the software so then

631
00:27:20,049 --> 00:27:21,669
you're going to generate you and your

632
00:27:21,669 --> 00:27:23,049
user your blog connections and

633
00:27:23,049 --> 00:27:25,030
everything will be really really nicely

634
00:27:25,030 --> 00:27:28,330
connected so basically the different

635
00:27:28,330 --> 00:27:30,040
colors are the the way that you're

636
00:27:30,040 --> 00:27:32,049
working but the different blocks are

637
00:27:32,049 --> 00:27:34,690
kind of the amount of files that you

638
00:27:34,690 --> 00:27:37,270
have to modify to do that so first you

639
00:27:37,270 --> 00:27:38,799
have the very low pile obviously because

640
00:27:38,799 --> 00:27:39,970
that is your IP that's what you're

641
00:27:39,970 --> 00:27:42,460
writing that is your algorithm but then

642
00:27:42,460 --> 00:27:44,440
you have to tell you HD okay I have a

643
00:27:44,440 --> 00:27:46,510
very log file I have my fpga image i

644
00:27:46,510 --> 00:27:48,640
want to connect that so the first part

645
00:27:48,640 --> 00:27:49,929
you have the block declaration that is

646
00:27:49,929 --> 00:27:53,230
an XML file normally usually at the

647
00:27:53,230 --> 00:27:55,150
beginning it contains only the amount of

648
00:27:55,150 --> 00:27:56,470
inputs and outputs that you block has

649
00:27:56,470 --> 00:27:58,690
and the NOC ID then okay I did something

650
00:27:58,690 --> 00:28:00,220
really important that is the only way

651
00:28:00,220 --> 00:28:01,480
that you computed your driver your

652
00:28:01,480 --> 00:28:04,000
general radio will know which block are

653
00:28:04,000 --> 00:28:06,340
you using so that is like the identifier

654
00:28:06,340 --> 00:28:08,410
that's it and that is like the first

655
00:28:08,410 --> 00:28:11,559
stuff that you're using in USD then you

656
00:28:11,559 --> 00:28:13,030
have your block controller if you have

657
00:28:13,030 --> 00:28:14,290
more than one input if you have

658
00:28:14,290 --> 00:28:15,820
something going on with the driver if

659
00:28:15,820 --> 00:28:17,650
you're actually going into the

660
00:28:17,650 --> 00:28:19,450
connection between the FPGA and the

661
00:28:19,450 --> 00:28:23,730
host you're gonna have to write that C++

662
00:28:23,730 --> 00:28:28,390
file usually you don't usually it just

663
00:28:28,390 --> 00:28:30,280
works with the descriptor because you

664
00:28:30,280 --> 00:28:31,660
have something that is called NOC script

665
00:28:31,660 --> 00:28:34,240
that is a way of instantiating or

666
00:28:34,240 --> 00:28:36,850
creating some small functions in your

667
00:28:36,850 --> 00:28:38,320
descriptor so that you don't really have

668
00:28:38,320 --> 00:28:40,900
to write a block controller right and

669
00:28:40,900 --> 00:28:44,310
then you want to have you know radial

670
00:28:44,310 --> 00:28:46,510
like blocks that you can connect that

671
00:28:46,510 --> 00:28:47,800
they would look really nice then you

672
00:28:47,800 --> 00:28:49,030
have to go a step further

673
00:28:49,030 --> 00:28:51,430
so basically apart from that like from

674
00:28:51,430 --> 00:28:54,180
like the orange spot is basically what

675
00:28:54,180 --> 00:28:58,390
you will know until now what your module

676
00:28:58,390 --> 00:29:00,490
did so it's going to create a lot of

677
00:29:00,490 --> 00:29:02,500
files that are going to describe the

678
00:29:02,500 --> 00:29:06,670
block as is at the XML basically is the

679
00:29:06,670 --> 00:29:08,020
one that you want to modify because if

680
00:29:08,020 --> 00:29:09,940
you have more inputs on your outputs you

681
00:29:09,940 --> 00:29:12,850
have to tell the digital radio and also

682
00:29:12,850 --> 00:29:15,640
if there's what you have the UHD

683
00:29:15,640 --> 00:29:17,620
streamer so actually there's what you're

684
00:29:17,620 --> 00:29:19,420
saying what type of samples are you

685
00:29:19,420 --> 00:29:22,060
using if you're taking parameters from

686
00:29:22,060 --> 00:29:23,920
your block from your graphical interface

687
00:29:23,920 --> 00:29:26,950
and then your block code is you can also

688
00:29:26,950 --> 00:29:28,720
do more signal processing with you know

689
00:29:28,720 --> 00:29:33,040
radio after you go to the samples that

690
00:29:33,040 --> 00:29:35,530
is like the basics but what happened

691
00:29:35,530 --> 00:29:37,450
like one year ago actually you had to

692
00:29:37,450 --> 00:29:40,660
know also where those files were to be

693
00:29:40,660 --> 00:29:43,000
put and that was quite a challenge you

694
00:29:43,000 --> 00:29:44,950
had to you had to know where Vivaro is

695
00:29:44,950 --> 00:29:46,690
going to look for the very lock you had

696
00:29:46,690 --> 00:29:48,310
to know where you HD is actually taking

697
00:29:48,310 --> 00:29:49,870
the world controller from and you have

698
00:29:49,870 --> 00:29:52,810
to know what your edges is first your

699
00:29:52,810 --> 00:29:55,000
errors is actually the out of three

700
00:29:55,000 --> 00:29:56,620
module for arif knock that Etta's

701
00:29:56,620 --> 00:29:58,630
provides so there's already some blocks

702
00:29:58,630 --> 00:30:01,390
that are written in Arabic that you can

703
00:30:01,390 --> 00:30:04,510
use but also if you had an out of three

704
00:30:04,510 --> 00:30:06,520
module that you want to use you actually

705
00:30:06,520 --> 00:30:08,500
have to write everything in the same

706
00:30:08,500 --> 00:30:10,420
repository as your edges and that was

707
00:30:10,420 --> 00:30:12,730
quite a problem because you don't really

708
00:30:12,730 --> 00:30:16,120
have to had different locations for

709
00:30:16,120 --> 00:30:17,380
something that is only doing one

710
00:30:17,380 --> 00:30:20,440
application so then is where F naught

711
00:30:20,440 --> 00:30:22,870
mod 2 actually comes from so if you're

712
00:30:22,870 --> 00:30:25,420
used if you have used your module you

713
00:30:25,420 --> 00:30:26,770
will be really familiar with it because

714
00:30:26,770 --> 00:30:28,750
this is based on that so what it does

715
00:30:28,750 --> 00:30:32,460
basically is I want to create my own

716
00:30:32,460 --> 00:30:34,440
removal and you like want to have

717
00:30:34,440 --> 00:30:36,480
everything in one location because that

718
00:30:36,480 --> 00:30:40,620
is when a new module is so right now is

719
00:30:40,620 --> 00:30:42,510
just a line of code it is you're a

720
00:30:42,510 --> 00:30:45,540
Python application and if you're

721
00:30:45,540 --> 00:30:47,520
familiar with your module what this does

722
00:30:47,520 --> 00:30:49,170
is basically the same options you're

723
00:30:49,170 --> 00:30:51,660
going to create a module that's it

724
00:30:51,660 --> 00:30:55,170
that's really easy so for example you do

725
00:30:55,170 --> 00:30:56,490
something like this you would create

726
00:30:56,490 --> 00:30:58,710
that so let's do it because I really

727
00:30:58,710 --> 00:31:00,270
hope that make computer doesn't crash

728
00:31:00,270 --> 00:31:03,540
anymore so I have these these folders

729
00:31:03,540 --> 00:31:05,580
it's for them the only thing that I have

730
00:31:05,580 --> 00:31:08,030
right now is only the presentation right

731
00:31:08,030 --> 00:31:10,230
but what I'm doing with this a source

732
00:31:10,230 --> 00:31:12,300
that the alias for setting up my pythons

733
00:31:12,300 --> 00:31:14,010
environment if you don't use PI bonds

734
00:31:14,010 --> 00:31:16,110
that is also really really useful right

735
00:31:16,110 --> 00:31:18,720
now so right now I have artists where a

736
00:31:18,720 --> 00:31:20,580
block module and I want to create a new

737
00:31:20,580 --> 00:31:23,310
mode right and I want to call it but the

738
00:31:23,310 --> 00:31:25,770
awesome because I am from well the name

739
00:31:25,770 --> 00:31:27,500
doesn't really matter right

740
00:31:27,500 --> 00:31:30,150
so I already create this and I have a

741
00:31:30,150 --> 00:31:33,270
whole bunch of files that are describing

742
00:31:33,270 --> 00:31:35,340
my block and you're getting everything

743
00:31:35,340 --> 00:31:36,780
in that location and that is great

744
00:31:36,780 --> 00:31:40,830
because that is what you want and right

745
00:31:40,830 --> 00:31:42,630
now I have only the module so is the

746
00:31:42,630 --> 00:31:44,700
structure there is no block yet I want

747
00:31:44,700 --> 00:31:47,370
to add the block right so every module

748
00:31:47,370 --> 00:31:53,190
add chair so I'm having a block that is

749
00:31:53,190 --> 00:31:54,450
going to be called chair and it's going

750
00:31:54,450 --> 00:31:56,970
to do whatever so right now is going to

751
00:31:56,970 --> 00:31:58,830
ask you something some stuff that you

752
00:31:58,830 --> 00:32:01,500
want to have maybe so that the

753
00:32:01,500 --> 00:32:03,480
application knows what it is going to do

754
00:32:03,480 --> 00:32:06,870
so you can add some arguments at the

755
00:32:06,870 --> 00:32:08,520
beginning so they are going to be

756
00:32:08,520 --> 00:32:11,310
automatically add right now I don't have

757
00:32:11,310 --> 00:32:14,700
any so I can skip that quality assurance

758
00:32:14,700 --> 00:32:18,840
no we don't right so this is important

759
00:32:18,840 --> 00:32:22,200
the NOC ID before the the earplug module

760
00:32:22,200 --> 00:32:24,480
actually you had to remember your NOC ID

761
00:32:24,480 --> 00:32:26,730
and all your files have to have the same

762
00:32:26,730 --> 00:32:29,280
knock ID you can choose whichever one

763
00:32:29,280 --> 00:32:31,350
here and then of the mode to recreate

764
00:32:31,350 --> 00:32:32,880
all the files with the same work I did

765
00:32:32,880 --> 00:32:34,260
because that is what you want right

766
00:32:34,260 --> 00:32:37,590
I don't really know one so you skip this

767
00:32:37,590 --> 00:32:39,900
and it creates one for me the good thing

768
00:32:39,900 --> 00:32:41,310
is that I don't have to remember every

769
00:32:41,310 --> 00:32:42,690
father is going to be created already

770
00:32:42,690 --> 00:32:45,480
has it that is done I don't care anymore

771
00:32:45,480 --> 00:32:48,270
as keep your controllers that depends if

772
00:32:48,270 --> 00:32:50,340
I actually don't want to use the blow

773
00:32:50,340 --> 00:32:51,720
controls because I can do everything

774
00:32:51,720 --> 00:32:53,460
with the generic block that is something

775
00:32:53,460 --> 00:32:55,110
that you might want to read about I

776
00:32:55,110 --> 00:32:58,590
don't have the time to strain it you can

777
00:32:58,590 --> 00:33:00,240
escape the block the block control

778
00:33:00,240 --> 00:33:01,890
generation because you can do it without

779
00:33:01,890 --> 00:33:03,990
it but if you create it because you

780
00:33:03,990 --> 00:33:05,280
don't know if you're gonna use it it's

781
00:33:05,280 --> 00:33:07,110
okay if you create it and you don't use

782
00:33:07,110 --> 00:33:09,260
it it's perfect nothing is gonna go bad

783
00:33:09,260 --> 00:33:11,400
same stuff with the block interface

784
00:33:11,400 --> 00:33:13,260
everything can be done in the XML if you

785
00:33:13,260 --> 00:33:15,480
know how to do it and if it's easy like

786
00:33:15,480 --> 00:33:17,190
you're actually doing a lot of stuff

787
00:33:17,190 --> 00:33:18,870
with the inputs and outputs everything

788
00:33:18,870 --> 00:33:20,419
was going to be working fine without the

789
00:33:20,419 --> 00:33:23,190
block interface a block contours so it's

790
00:33:23,190 --> 00:33:24,419
okay if you skip it but if you don't

791
00:33:24,419 --> 00:33:27,120
this one's okay so BAM I already got a

792
00:33:27,120 --> 00:33:30,750
bunch of files that obviously most of

793
00:33:30,750 --> 00:33:33,510
them are quite familiar from you know

794
00:33:33,510 --> 00:33:37,160
radio but important part is mostly this

795
00:33:37,160 --> 00:33:40,049
RF knock stuff or I miss one but it's

796
00:33:40,049 --> 00:33:43,470
okay so the XML is the one that has the

797
00:33:43,470 --> 00:33:45,059
NOC ID so that's why it's part of F

798
00:33:45,059 --> 00:33:47,280
knock the rest of those are basically

799
00:33:47,280 --> 00:33:50,190
software but the other ones are old

800
00:33:50,190 --> 00:33:52,110
hardware describers so you have the

801
00:33:52,110 --> 00:33:53,610
ready to go very low pile or you have

802
00:33:53,610 --> 00:33:55,770
the test bench and the good thing about

803
00:33:55,770 --> 00:33:58,830
the error if not more tool but they have

804
00:33:58,830 --> 00:34:01,559
brain I mean a lot of good things but

805
00:34:01,559 --> 00:34:03,270
for example if you are all right now

806
00:34:03,270 --> 00:34:06,419
starting with Arif nog framework it

807
00:34:06,419 --> 00:34:07,980
creates a block that is based on

808
00:34:07,980 --> 00:34:10,710
something that we call the skeleton and

809
00:34:10,710 --> 00:34:12,480
actually the skeleton is a full

810
00:34:12,480 --> 00:34:15,270
functional F NOC module that block sorry

811
00:34:15,270 --> 00:34:17,909
that it will work I mean if you create

812
00:34:17,909 --> 00:34:19,139
something like this and you actually

813
00:34:19,139 --> 00:34:20,520
don't know what you're gonna do but you

814
00:34:20,520 --> 00:34:22,260
want to try that really eager to know

815
00:34:22,260 --> 00:34:24,270
what is going on you can compile this

816
00:34:24,270 --> 00:34:27,149
block you can create the bit file for it

817
00:34:27,149 --> 00:34:29,040
and actually it will do something that

818
00:34:29,040 --> 00:34:31,440
is basically put input into output it's

819
00:34:31,440 --> 00:34:33,418
really easy but all the files that are

820
00:34:33,418 --> 00:34:35,909
already there are functional so you can

821
00:34:35,909 --> 00:34:37,409
just give it a try it will work well

822
00:34:37,409 --> 00:34:40,918
right out out of the box so let's go

823
00:34:40,918 --> 00:34:43,739
back here now this is basically what we

824
00:34:43,739 --> 00:34:46,980
did and having a bunch of files so the

825
00:34:46,980 --> 00:34:48,540
basic structure of the generated out of

826
00:34:48,540 --> 00:34:51,840
three module is somewhat alike to the

827
00:34:51,840 --> 00:34:54,570
one from you know radio important apart

828
00:34:54,570 --> 00:34:58,380
from those is the eruv knock folder that

829
00:34:58,380 --> 00:34:59,450
is this

830
00:34:59,450 --> 00:35:01,250
there is where all your files that are

831
00:35:01,250 --> 00:35:03,559
going to be FPA related are going to be

832
00:35:03,559 --> 00:35:05,720
located so you write your very look file

833
00:35:05,720 --> 00:35:08,510
you write your test bench you set up

834
00:35:08,510 --> 00:35:10,460
your make file for the test bench and

835
00:35:10,460 --> 00:35:12,799
everything will be here and you don't

836
00:35:12,799 --> 00:35:14,329
really have to deal with the repository

837
00:35:14,329 --> 00:35:17,119
for FPGA so there is no price location

838
00:35:17,119 --> 00:35:18,859
there is nothing else all your files are

839
00:35:18,859 --> 00:35:20,900
here and they will just be called

840
00:35:20,900 --> 00:35:23,779
whenever they are need don't need it all

841
00:35:23,779 --> 00:35:26,630
right so already build a blog I've been

842
00:35:26,630 --> 00:35:28,220
talking a lot but actually the block the

843
00:35:28,220 --> 00:35:29,660
creation of the block took me like less

844
00:35:29,660 --> 00:35:32,359
than one minute but the thing is that we

845
00:35:32,359 --> 00:35:34,160
want to use the FPGA because that's why

846
00:35:34,160 --> 00:35:37,369
we're here right so Eric moto doesn't do

847
00:35:37,369 --> 00:35:42,230
it geez right okay I'm gonna run so we

848
00:35:42,230 --> 00:35:43,549
have something that is going to do that

849
00:35:43,549 --> 00:35:45,500
for you like seriously it was not that

850
00:35:45,500 --> 00:35:46,430
easy to do

851
00:35:46,430 --> 00:35:48,920
the connection with your blocks if

852
00:35:48,920 --> 00:35:51,230
before up Nakamoto right now we have

853
00:35:51,230 --> 00:35:52,369
something is called you is the image

854
00:35:52,369 --> 00:35:53,569
builder and if you were working with

855
00:35:53,569 --> 00:35:55,670
that until one month ago was called mega

856
00:35:55,670 --> 00:35:58,250
py what it does is you tell the script

857
00:35:58,250 --> 00:36:00,799
I'm going to create an image with this

858
00:36:00,799 --> 00:36:03,260
this this block and it's like okay I'm

859
00:36:03,260 --> 00:36:04,970
doing it for you you don't have to care

860
00:36:04,970 --> 00:36:10,490
about it just an example I created an

861
00:36:10,490 --> 00:36:12,799
hour of tamale Larry's in there flop

862
00:36:12,799 --> 00:36:15,740
awesome I call it their full bar because

863
00:36:15,740 --> 00:36:18,680
whatever so f50 and window are blocks

864
00:36:18,680 --> 00:36:20,119
that Eidos provides so you don't really

865
00:36:20,119 --> 00:36:23,059
need to tell the the script where they

866
00:36:23,059 --> 00:36:24,680
allocated body are three module actually

867
00:36:24,680 --> 00:36:27,230
is nothing it's not what we found so you

868
00:36:27,230 --> 00:36:29,779
give that we - - I you say that the

869
00:36:29,779 --> 00:36:32,420
device target there is the x100 that is

870
00:36:32,420 --> 00:36:35,930
an address device - t arif log image the

871
00:36:35,930 --> 00:36:37,700
amount of blocks that you want to have

872
00:36:37,700 --> 00:36:40,069
if you want to fill it with rifles or or

873
00:36:40,069 --> 00:36:43,670
not does matter and it will do it for

874
00:36:43,670 --> 00:36:45,259
you and you just have to wait like about

875
00:36:45,259 --> 00:36:47,240
one or two hours what it's done but it's

876
00:36:47,240 --> 00:36:50,450
okay so maybe some of you don't really

877
00:36:50,450 --> 00:36:52,730
use common line you don't really

878
00:36:52,730 --> 00:36:54,079
remember the name of the blah blah blah

879
00:36:54,079 --> 00:36:55,789
blah we still got you back because we

880
00:36:55,789 --> 00:36:58,490
create a GUI for that and you're gonna

881
00:36:58,490 --> 00:37:01,009
find it really easy to know which blocks

882
00:37:01,009 --> 00:37:03,200
are available and if you add your olive

883
00:37:03,200 --> 00:37:04,549
tree module is going to be listed there

884
00:37:04,549 --> 00:37:05,960
you don't have to remember what it is

885
00:37:05,960 --> 00:37:08,720
anymore you have all the the targets

886
00:37:08,720 --> 00:37:11,720
here so if you have an extra hundred you

887
00:37:11,720 --> 00:37:13,100
you use the extra hundred

888
00:37:13,100 --> 00:37:15,140
200 that is was the device that Martin

889
00:37:15,140 --> 00:37:17,150
was using what did you choose that and

890
00:37:17,150 --> 00:37:18,950
you import all your blog's into that

891
00:37:18,950 --> 00:37:20,990
part and you click you know generate bit

892
00:37:20,990 --> 00:37:23,270
file and you just do it for you takes a

893
00:37:23,270 --> 00:37:24,680
long time you have to have be viral

894
00:37:24,680 --> 00:37:26,720
that's the only thing but it will do it

895
00:37:26,720 --> 00:37:29,030
for you and this button also is really

896
00:37:29,030 --> 00:37:30,470
interesting if you're really into you

897
00:37:30,470 --> 00:37:31,880
already and you're really really new

898
00:37:31,880 --> 00:37:33,920
into that you can create you all your

899
00:37:33,920 --> 00:37:35,810
blocks you have your flow graph and

900
00:37:35,810 --> 00:37:38,690
everything is working fine you import

901
00:37:38,690 --> 00:37:40,460
your DRC file here and all your blocks

902
00:37:40,460 --> 00:37:42,110
that are Arab not related are going to

903
00:37:42,110 --> 00:37:43,670
be put directly there and you're like

904
00:37:43,670 --> 00:37:45,200
yeah I got I have my flow graph

905
00:37:45,200 --> 00:37:47,840
I want the bid file for that just pump

906
00:37:47,840 --> 00:37:49,810
put it there and it will do it for you

907
00:37:49,810 --> 00:37:54,230
and that's it I kind of run a lot maybe

908
00:37:54,230 --> 00:37:57,080
you have a lot of questions well I'm

909
00:37:57,080 --> 00:37:59,500
open to questions

910
00:38:07,060 --> 00:38:10,270
the what

911
00:38:21,609 --> 00:38:33,470
what he was related yeah another

912
00:38:33,470 --> 00:38:40,640
question that will be more a marking

913
00:38:40,640 --> 00:39:05,839
question interested in we do not want to

914
00:39:05,839 --> 00:39:15,700
force everyone to write everything I

915
00:39:15,700 --> 00:39:25,579
don't know we have all right right now I

916
00:39:25,579 --> 00:39:28,000
mean we have this these are long time

917
00:39:28,000 --> 00:39:34,400
yes yes yes I am

918
00:39:34,400 --> 00:39:36,740
I'm really eager to improve to put the

919
00:39:36,740 --> 00:39:38,869
IP inclusion into Arabic more - because

920
00:39:38,869 --> 00:39:40,640
that's what we want but the thing is I'm

921
00:39:40,640 --> 00:39:41,960
doing my master teachers and it's they

922
00:39:41,960 --> 00:39:45,260
can also come up that I'm kind of yeah

923
00:39:45,260 --> 00:39:49,630
but it's gonna be very soon

924
00:40:01,240 --> 00:40:05,000
and we have looked at that so yeah it

925
00:40:05,000 --> 00:40:06,920
would allow us we exchanged boxes you

926
00:40:06,920 --> 00:40:08,119
know what I said oh yeah like you take

927
00:40:08,119 --> 00:40:09,740
down the FPGA like all the proof oh

928
00:40:09,740 --> 00:40:11,930
let's go away like that would solve that

929
00:40:11,930 --> 00:40:14,319
problem

930
00:40:19,940 --> 00:40:24,190
[Applause]

