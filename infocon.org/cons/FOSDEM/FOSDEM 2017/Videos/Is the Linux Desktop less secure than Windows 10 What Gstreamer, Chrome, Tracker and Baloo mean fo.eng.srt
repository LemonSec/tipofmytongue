1
00:00:00,000 --> 00:00:02,659
hello

2
00:00:04,650 --> 00:00:07,550
and welcome to the security dev room

3
00:00:07,550 --> 00:00:11,550
hope you had a nice lunch and are ready

4
00:00:11,550 --> 00:00:13,860
for talk by Hana Beck who's going to

5
00:00:13,860 --> 00:00:15,960
talk about desktop security

6
00:00:15,960 --> 00:00:25,800
please welcome Hannah yeah so I hope you

7
00:00:25,800 --> 00:00:27,840
have like your pitchforks ready and are

8
00:00:27,840 --> 00:00:30,300
really angry because I chose this very

9
00:00:30,300 --> 00:00:33,960
provocative talk title but I wanted yeah

10
00:00:33,960 --> 00:00:35,730
I want to talk about a few issues that I

11
00:00:35,730 --> 00:00:57,120
think there hello hello hello okay okay

12
00:00:57,120 --> 00:00:59,190
yeah I want to talk about a few issues

13
00:00:59,190 --> 00:01:02,670
with Linux desktop security and I mainly

14
00:01:02,670 --> 00:01:05,399
want to get you angry but not angry at

15
00:01:05,399 --> 00:01:07,710
me but angry at the situation and you

16
00:01:07,710 --> 00:01:10,319
should do something about it

17
00:01:10,319 --> 00:01:14,190
so kind of the the the idea for this

18
00:01:14,190 --> 00:01:16,170
talk I got when there was a this is a

19
00:01:16,170 --> 00:01:17,880
quote from Chris Evans who found a

20
00:01:17,880 --> 00:01:19,830
couple of security issues with common

21
00:01:19,830 --> 00:01:22,170
Linux desktop systems where he said yeah

22
00:01:22,170 --> 00:01:23,789
this was too easy it should not be

23
00:01:23,789 --> 00:01:25,830
possible to find a serious memory

24
00:01:25,830 --> 00:01:27,840
corruption vulnerability in the default

25
00:01:27,840 --> 00:01:32,959
Linux desktop and there is it that like

26
00:01:32,959 --> 00:01:35,880
yeah this is not the kind of situation

27
00:01:35,880 --> 00:01:37,740
that occurs with the latest Windows 10

28
00:01:37,740 --> 00:01:39,899
default install is it possible that

29
00:01:39,899 --> 00:01:46,530
Linux desktop security has rotten so so

30
00:01:46,530 --> 00:01:48,569
he published a couple of blog posts and

31
00:01:48,569 --> 00:01:50,940
the first one was in exploit against the

32
00:01:50,940 --> 00:01:53,940
powers of Nintendo sound files so

33
00:01:53,940 --> 00:01:58,649
Nintendo sound files that is like this

34
00:01:58,649 --> 00:02:03,330
I'm sorry it's not so loud but

35
00:02:03,330 --> 00:02:10,370
yeah so so it wasn't exploit against

36
00:02:10,370 --> 00:02:12,840
GStreamer which has a parser for

37
00:02:12,840 --> 00:02:14,670
Nintendo sound files which were

38
00:02:14,670 --> 00:02:18,000
extracted from NES games which is of

39
00:02:18,000 --> 00:02:19,920
course important because like we like to

40
00:02:19,920 --> 00:02:22,470
be able to listen to this Super Mario

41
00:02:22,470 --> 00:02:25,680
music interesting there was that it

42
00:02:25,680 --> 00:02:28,110
wasn't the some native parser so even if

43
00:02:28,110 --> 00:02:30,630
you're just opening a folder in the file

44
00:02:30,630 --> 00:02:33,150
manager with such a file that had this

45
00:02:33,150 --> 00:02:37,920
exploit it could exploit your system and

46
00:02:37,920 --> 00:02:40,050
an attacker could gain control over your

47
00:02:40,050 --> 00:02:44,190
system it was in Ubuntu 1204 which is

48
00:02:44,190 --> 00:02:48,590
kind of old but it's still supported

49
00:02:49,310 --> 00:02:51,620
also interesting here is that these

50
00:02:51,620 --> 00:02:54,000
Nintendo sound files the player here is

51
00:02:54,000 --> 00:02:55,770
basically a mini emulator that's

52
00:02:55,770 --> 00:02:58,230
emulating the functionality of the

53
00:02:58,230 --> 00:03:01,680
Nintendo sound chip and that means an

54
00:03:01,680 --> 00:03:04,020
attacker who like sends you such a sound

55
00:03:04,020 --> 00:03:07,800
file he can basically execute some kind

56
00:03:07,800 --> 00:03:10,500
of code and that makes it much easier to

57
00:03:10,500 --> 00:03:12,630
bypass certain exploit mitigation

58
00:03:12,630 --> 00:03:15,930
techniques and also interesting to fix

59
00:03:15,930 --> 00:03:18,270
this you could just delete the plug-in

60
00:03:18,270 --> 00:03:20,940
like the file and you could still play

61
00:03:20,940 --> 00:03:22,860
these nintendo sound files because there

62
00:03:22,860 --> 00:03:26,720
were two decoders for them in gstreamer

63
00:03:26,720 --> 00:03:32,910
so then the next exploit was against

64
00:03:32,910 --> 00:03:35,640
Flik files does anyone know what flick

65
00:03:35,640 --> 00:03:39,330
first is have you generated them or very

66
00:03:39,330 --> 00:03:41,700
few hands so they come from a software

67
00:03:41,700 --> 00:03:45,090
called Autodesk animator it's actually

68
00:03:45,090 --> 00:03:47,040
free software so the code is available

69
00:03:47,040 --> 00:03:50,280
under a BSD license it's a tool that was

70
00:03:50,280 --> 00:03:52,980
popular in the 90s in DOS to create

71
00:03:52,980 --> 00:03:57,690
animations I have such an animation for

72
00:03:57,690 --> 00:04:01,470
you so this was mplayer and now but the

73
00:04:01,470 --> 00:04:03,930
exploit wasn't restreamer but if i try

74
00:04:03,930 --> 00:04:06,750
to play this with totem which is using

75
00:04:06,750 --> 00:04:08,400
tree streamer it doesn't work

76
00:04:08,400 --> 00:04:12,030
so it had a decoder for it which had an

77
00:04:12,030 --> 00:04:14,190
exploit of a bark but it seems it

78
00:04:14,190 --> 00:04:15,669
doesn't work so

79
00:04:15,669 --> 00:04:23,030
yeah but mplayer can play it yeah now

80
00:04:23,030 --> 00:04:25,520
they're a few of interesting things came

81
00:04:25,520 --> 00:04:27,590
together so first of all there are a

82
00:04:27,590 --> 00:04:30,620
couple of browsers that automatically

83
00:04:30,620 --> 00:04:32,960
download files without asking any

84
00:04:32,960 --> 00:04:34,820
questions so if you click on a download

85
00:04:34,820 --> 00:04:36,740
they will just place them in the

86
00:04:36,740 --> 00:04:39,889
Downloads folder this is for example

87
00:04:39,889 --> 00:04:43,060
Chrome and epiphany and Conqueror

88
00:04:43,060 --> 00:04:45,560
Conqueror I tested early yesterday it

89
00:04:45,560 --> 00:04:48,290
doesn't even show you any kind of dialog

90
00:04:48,290 --> 00:04:50,090
so it just known what's the file and you

91
00:04:50,090 --> 00:04:52,370
don't see anything and if it you don't

92
00:04:52,370 --> 00:04:53,810
even have to click on the download

93
00:04:53,810 --> 00:04:55,790
because that a JavaScript can do for you

94
00:04:55,790 --> 00:04:59,180
so what that basically means that if

95
00:04:59,180 --> 00:05:00,889
you're using one of these browsers then

96
00:05:00,889 --> 00:05:03,729
any web page can create a file on your

97
00:05:03,729 --> 00:05:06,610
on your filesystem we're just

98
00:05:06,610 --> 00:05:09,200
interesting and I think also something

99
00:05:09,200 --> 00:05:11,590
where you could think more about it like

100
00:05:11,590 --> 00:05:13,940
whether that could be exploited in

101
00:05:13,940 --> 00:05:16,729
interesting ways also but important here

102
00:05:16,729 --> 00:05:18,410
is also this is not Linux specific

103
00:05:18,410 --> 00:05:20,240
chrome does the same thing in any

104
00:05:20,240 --> 00:05:25,520
operating system but then there's a tool

105
00:05:25,520 --> 00:05:27,620
called tracker which is part of the

106
00:05:27,620 --> 00:05:29,770
desktop search functionality in Nome and

107
00:05:29,770 --> 00:05:33,139
it automatically indexes new files

108
00:05:33,139 --> 00:05:35,360
created in your home directory which

109
00:05:35,360 --> 00:05:39,740
includes your downloads directory so the

110
00:05:39,740 --> 00:05:41,479
exploit was basically yeah a web page

111
00:05:41,479 --> 00:05:45,770
could give you this flick file it gets

112
00:05:45,770 --> 00:05:47,389
automatically downloaded it gets

113
00:05:47,389 --> 00:05:49,190
automatically indexed by tracker and

114
00:05:49,190 --> 00:05:55,190
then the exploit can run and there was a

115
00:05:55,190 --> 00:05:58,639
comment from the tracker developer below

116
00:05:58,639 --> 00:06:02,330
this blog post where he said yeah the

117
00:06:02,330 --> 00:06:04,220
gstreamer guys were extremely fast in

118
00:06:04,220 --> 00:06:07,550
fixing it ok great you could claim that

119
00:06:07,550 --> 00:06:09,200
other libraries used for metadata

120
00:06:09,200 --> 00:06:11,690
extraction or justice insecure but that

121
00:06:11,690 --> 00:06:13,870
really be bugs in these libraries to fix

122
00:06:13,870 --> 00:06:18,020
now from a security perspective I have a

123
00:06:18,020 --> 00:06:20,419
problem with this way of seeing these

124
00:06:20,419 --> 00:06:22,910
things because like if you look at the

125
00:06:22,910 --> 00:06:25,719
library's tracker is using it's like

126
00:06:25,719 --> 00:06:28,550
gstreamer ffmpeg flag ok these are more

127
00:06:28,550 --> 00:06:29,180
popular

128
00:06:29,180 --> 00:06:31,639
but also things like I don't know I

129
00:06:31,639 --> 00:06:34,820
didn't know what lip IPPC dated us I

130
00:06:34,820 --> 00:06:37,250
looked it up it actually seems to be

131
00:06:37,250 --> 00:06:39,320
some kind of tagging functionality for

132
00:06:39,320 --> 00:06:44,180
JPEGs that's non-starter yeah so there

133
00:06:44,180 --> 00:06:46,580
are a lot of libraries and and like

134
00:06:46,580 --> 00:06:49,190
maybe half of them have decent security

135
00:06:49,190 --> 00:06:50,840
and the other half like nobody ever

136
00:06:50,840 --> 00:06:53,660
looked for security so I think if you're

137
00:06:53,660 --> 00:06:55,850
writing a tool that's using all these

138
00:06:55,850 --> 00:07:00,169
libraries and exposing them to untrusted

139
00:07:00,169 --> 00:07:02,389
data you kind of have a repose and

140
00:07:02,389 --> 00:07:04,190
responsibility to care about that and

141
00:07:04,190 --> 00:07:05,840
you cannot just say yeah this is a bug

142
00:07:05,840 --> 00:07:08,930
and we'll fix it because like they there

143
00:07:08,930 --> 00:07:10,699
will always be another bug in one of

144
00:07:10,699 --> 00:07:14,289
these libraries that can be exploited

145
00:07:15,250 --> 00:07:18,590
yeah so like if you can any exploit any

146
00:07:18,590 --> 00:07:21,889
of these you basically can can exploit

147
00:07:21,889 --> 00:07:24,979
the system of a Linux user right away

148
00:07:24,979 --> 00:07:32,330
from a website it's not just tracker

149
00:07:32,330 --> 00:07:34,550
like KDE has a similar tool which is

150
00:07:34,550 --> 00:07:37,400
called Pulu and it basically has the

151
00:07:37,400 --> 00:07:40,190
same issue and also as I already

152
00:07:40,190 --> 00:07:42,530
mentioned earlier like the thumbnail

153
00:07:42,530 --> 00:07:44,840
creators have kind of a similar problem

154
00:07:44,840 --> 00:07:46,729
they are not getting executed

155
00:07:46,729 --> 00:07:48,139
automatically but they are getting

156
00:07:48,139 --> 00:07:50,530
executed as soon as you open a folder

157
00:07:50,530 --> 00:07:53,990
with your file manager so also the file

158
00:07:53,990 --> 00:07:56,000
manager here creates a huge attack

159
00:07:56,000 --> 00:08:02,090
surface so I think we have two problems

160
00:08:02,090 --> 00:08:03,860
here running like we have some

161
00:08:03,860 --> 00:08:06,440
automation here that's I think sometimes

162
00:08:06,440 --> 00:08:08,300
done a bit in a thoughtless way like

163
00:08:08,300 --> 00:08:10,849
okay if you click on a download it's

164
00:08:10,849 --> 00:08:12,680
nice if it's just gets downloaded no

165
00:08:12,680 --> 00:08:16,009
more dialog that's confusing people and

166
00:08:16,009 --> 00:08:18,259
you have this desktop search and you

167
00:08:18,259 --> 00:08:20,780
automatically index stuff with maybe an

168
00:08:20,780 --> 00:08:22,820
interesting feature but it creates a

169
00:08:22,820 --> 00:08:26,780
huge attack surface and then the other

170
00:08:26,780 --> 00:08:28,490
issue here we have is that there's a

171
00:08:28,490 --> 00:08:31,550
tenancy and I think in the free software

172
00:08:31,550 --> 00:08:34,339
community that people tend to use all

173
00:08:34,339 --> 00:08:36,880
kinds of libraries to support as many

174
00:08:36,880 --> 00:08:40,400
different file formats as possible and

175
00:08:40,400 --> 00:08:42,679
many of these libraries are just a very

176
00:08:42,679 --> 00:08:49,160
varying quality so what could we do

177
00:08:49,160 --> 00:08:53,959
about this so one idea is to use some

178
00:08:53,959 --> 00:08:55,999
kind of sandboxing so that you're kind

179
00:08:55,999 --> 00:08:58,610
of isolating the process so even if

180
00:08:58,610 --> 00:09:01,910
there are some exploited it is kind of

181
00:09:01,910 --> 00:09:04,819
limited in the impact it can create and

182
00:09:04,819 --> 00:09:07,639
these things something like such desktop

183
00:09:07,639 --> 00:09:10,040
search where you have a very isolated

184
00:09:10,040 --> 00:09:12,410
process that's just getting some input

185
00:09:12,410 --> 00:09:14,629
file and egg straight extracting some

186
00:09:14,629 --> 00:09:18,889
data is it's a very good charge it for

187
00:09:18,889 --> 00:09:21,470
scent boxing and actually after these

188
00:09:21,470 --> 00:09:22,100
events

189
00:09:22,100 --> 00:09:25,040
tracker implemented sandboxing which i

190
00:09:25,040 --> 00:09:27,110
think is great it happened really fast

191
00:09:27,110 --> 00:09:31,249
based on the Eclipse a calm and yeah

192
00:09:31,249 --> 00:09:33,139
that's one way of reducing the impact

193
00:09:33,139 --> 00:09:35,179
and as long as like the sandbox doesn't

194
00:09:35,179 --> 00:09:37,189
have vulnerabilities which unfortunately

195
00:09:37,189 --> 00:09:39,970
often happen also happens very often

196
00:09:39,970 --> 00:09:41,269
this

197
00:09:41,269 --> 00:09:43,730
yeah creates better security for these

198
00:09:43,730 --> 00:09:46,999
situations but as I said yeah okay KDE

199
00:09:46,999 --> 00:09:48,740
has a very similar tool and they haven't

200
00:09:48,740 --> 00:09:52,069
they have no sandboxing yet and also the

201
00:09:52,069 --> 00:09:53,809
same thing needs to happen for thumbnail

202
00:09:53,809 --> 00:09:56,389
s and similar stuff which has a large

203
00:09:56,389 --> 00:10:02,149
attack surface then there are several

204
00:10:02,149 --> 00:10:05,540
exploit mitigation techniques so based

205
00:10:05,540 --> 00:10:07,720
on the idea that there will always be

206
00:10:07,720 --> 00:10:10,339
security vulnerabilities a lot of

207
00:10:10,339 --> 00:10:12,199
technologies have been developed to just

208
00:10:12,199 --> 00:10:14,230
make it harder to write exploits and

209
00:10:14,230 --> 00:10:16,629
typical things are stack Canaries

210
00:10:16,629 --> 00:10:19,699
non-executable memory pages address

211
00:10:19,699 --> 00:10:22,699
space layout randomization and kinda new

212
00:10:22,699 --> 00:10:25,639
idea is called control control flow

213
00:10:25,639 --> 00:10:29,749
integrity so the first two we usually

214
00:10:29,749 --> 00:10:32,059
have them today so stack Canaries that's

215
00:10:32,059 --> 00:10:34,910
with GCC you have a flag F stack

216
00:10:34,910 --> 00:10:37,249
protector and I think on major

217
00:10:37,249 --> 00:10:39,170
distributions use this by default these

218
00:10:39,170 --> 00:10:41,809
days and non-executable memory that's

219
00:10:41,809 --> 00:10:46,220
these days is a feature of Intel CPUs so

220
00:10:46,220 --> 00:10:50,420
that that's usually available with a SLR

221
00:10:50,420 --> 00:10:52,970
it's a bit more complicated so there are

222
00:10:52,970 --> 00:10:54,829
the idea there's that you're just

223
00:10:54,829 --> 00:10:56,120
loading

224
00:10:56,120 --> 00:10:58,670
code and data on random addresses into

225
00:10:58,670 --> 00:11:01,940
memory and the the reason for that is

226
00:11:01,940 --> 00:11:04,100
that many exploits rely on the idea that

227
00:11:04,100 --> 00:11:08,290
you're you can override my some address

228
00:11:08,290 --> 00:11:11,710
for for some code and then jump into

229
00:11:11,710 --> 00:11:16,760
some area in the code and if the

230
00:11:16,760 --> 00:11:18,560
addresses are random then the attacker

231
00:11:18,560 --> 00:11:20,510
doesn't know where there's any valid

232
00:11:20,510 --> 00:11:24,020
code in memory so that's a pretty strong

233
00:11:24,020 --> 00:11:27,560
protection and the Linux kernel had a

234
00:11:27,560 --> 00:11:30,650
SLR support since - 612 so quite a while

235
00:11:30,650 --> 00:11:35,900
ago but if you want to if you want the

236
00:11:35,900 --> 00:11:39,020
ASL artwork you need the code needs to

237
00:11:39,020 --> 00:11:40,850
be compiled in a certain way that it's

238
00:11:40,850 --> 00:11:43,820
possible to load this code into random

239
00:11:43,820 --> 00:11:46,910
places in memory so there and the

240
00:11:46,910 --> 00:11:48,740
executable also needs some special

241
00:11:48,740 --> 00:11:50,450
properties so you need so-called

242
00:11:50,450 --> 00:11:52,370
position independent code and position

243
00:11:52,370 --> 00:11:55,040
independent executables which again our

244
00:11:55,040 --> 00:11:57,770
compiler flags and P is a linker flag

245
00:11:57,770 --> 00:12:00,860
and here that's a bit of a sad story

246
00:12:00,860 --> 00:12:02,600
because like Linux distributions have

247
00:12:02,600 --> 00:12:05,200
been extremely slow in adopting this so

248
00:12:05,200 --> 00:12:07,970
the current state it's gotten much

249
00:12:07,970 --> 00:12:10,339
better in the last couple of years like

250
00:12:10,339 --> 00:12:13,160
I want to introduced it last year Fedora

251
00:12:13,160 --> 00:12:17,720
in 2015 Debian is working on it and as

252
00:12:17,720 --> 00:12:19,610
far as I heard for the next version it

253
00:12:19,610 --> 00:12:22,790
should be enabled by default open

254
00:12:22,790 --> 00:12:25,160
through the only enables it for a few

255
00:12:25,160 --> 00:12:28,040
packages gen true only if you use harden

256
00:12:28,040 --> 00:12:31,820
gen - so this is something that should

257
00:12:31,820 --> 00:12:34,010
just be enabled by default everywhere it

258
00:12:34,010 --> 00:12:37,100
has like on 32 bits there was a bit of a

259
00:12:37,100 --> 00:12:38,779
problem that it had a significant

260
00:12:38,779 --> 00:12:41,720
performance cost on 64-bit it basically

261
00:12:41,720 --> 00:12:44,570
doesn't matter this is the performance

262
00:12:44,570 --> 00:12:46,790
impact is very low and it provides a

263
00:12:46,790 --> 00:12:48,350
very strong protection against many

264
00:12:48,350 --> 00:12:51,230
kinds of exploits so for other

265
00:12:51,230 --> 00:12:52,910
distributions that haven't enabled it

266
00:12:52,910 --> 00:12:56,230
yet by default please do that

267
00:12:57,279 --> 00:12:59,779
yeah Windows had this since Windows

268
00:12:59,779 --> 00:13:04,400
Vista so quite a while and modern

269
00:13:04,400 --> 00:13:06,200
Windows is alright Microsoft is

270
00:13:06,200 --> 00:13:08,270
experimenting a lot with more modern

271
00:13:08,270 --> 00:13:10,700
exploit mitigation techniques

272
00:13:10,700 --> 00:13:13,430
I'm not an expert in this but so I

273
00:13:13,430 --> 00:13:16,640
cannot tell a lot of details but a lot

274
00:13:16,640 --> 00:13:20,440
is happening there however these are

275
00:13:20,440 --> 00:13:22,970
similar to the Linux situation these are

276
00:13:22,970 --> 00:13:24,980
things that depend on on things like

277
00:13:24,980 --> 00:13:27,829
compiler flags so not all applications

278
00:13:27,829 --> 00:13:31,579
use this so it depends on the

279
00:13:31,579 --> 00:13:33,200
application it depends on configuration

280
00:13:33,200 --> 00:13:35,360
10 points you also have things like that

281
00:13:35,360 --> 00:13:37,850
anti-virus applications disable this

282
00:13:37,850 --> 00:13:42,470
because whatever the app so a mixed

283
00:13:42,470 --> 00:13:47,269
situation as well there yeah

284
00:13:47,269 --> 00:13:51,560
then is the idea of yeah with all the C

285
00:13:51,560 --> 00:13:53,149
code maybe we should use other

286
00:13:53,149 --> 00:13:55,399
programming languages and rust gained a

287
00:13:55,399 --> 00:13:58,880
lot of traction lately so yeah some

288
00:13:58,880 --> 00:14:00,410
people say yeah let's just stop using

289
00:14:00,410 --> 00:14:02,870
the C because IC is just full of these

290
00:14:02,870 --> 00:14:04,760
memory corruption issues and we should

291
00:14:04,760 --> 00:14:07,490
just rewrite everything in rust or maybe

292
00:14:07,490 --> 00:14:13,430
some other language which maybe this is

293
00:14:13,430 --> 00:14:16,640
the right thing to do right but it will

294
00:14:16,640 --> 00:14:18,260
take some time and we'll probably have

295
00:14:18,260 --> 00:14:20,089
the C code laying around for a while

296
00:14:20,089 --> 00:14:23,600
longer so yeah but actually G stream are

297
00:14:23,600 --> 00:14:25,700
already supports writing plugins in rust

298
00:14:25,700 --> 00:14:28,250
so that's a good thing so maybe someone

299
00:14:28,250 --> 00:14:30,230
wants to rewrite the Nintendo sound file

300
00:14:30,230 --> 00:14:34,339
browser or the flick parser in rust that

301
00:14:34,339 --> 00:14:40,579
would be good thing yeah or can we just

302
00:14:40,579 --> 00:14:42,829
like the s the Trekker developer

303
00:14:42,829 --> 00:14:47,240
proposed just fix all these bugs so and

304
00:14:47,240 --> 00:14:49,339
like I looked a bit at gstreamer and

305
00:14:49,339 --> 00:14:50,720
restreamer is a software that's

306
00:14:50,720 --> 00:14:52,190
extremely prone to memory corruption

307
00:14:52,190 --> 00:14:56,029
bugs it's it's written in C ok and it

308
00:14:56,029 --> 00:14:58,220
has passes for a lot of complicated file

309
00:14:58,220 --> 00:15:00,260
formats like really a lot I don't know

310
00:15:00,260 --> 00:15:04,970
like a hundred or something and we have

311
00:15:04,970 --> 00:15:07,760
a lot of similar software like ok ffmpeg

312
00:15:07,760 --> 00:15:09,260
is also media Pazza

313
00:15:09,260 --> 00:15:12,050
image magic which supports all kinds of

314
00:15:12,050 --> 00:15:16,010
image formats also browsers but browsers

315
00:15:16,010 --> 00:15:18,470
tend to have back bounty programs and

316
00:15:18,470 --> 00:15:20,329
better security teams so usually this

317
00:15:20,329 --> 00:15:23,360
stuff is but also things like Wireshark

318
00:15:23,360 --> 00:15:26,000
Sepideh maybe you've read that tcpdump

319
00:15:26,000 --> 00:15:28,250
recently had a release with I think like

320
00:15:28,250 --> 00:15:31,790
50 CVS I think most of them were

321
00:15:31,790 --> 00:15:38,360
reported by me two years ago so we could

322
00:15:38,360 --> 00:15:40,850
do some fuzzing and because many of

323
00:15:40,850 --> 00:15:42,980
these parks can be trivially found if

324
00:15:42,980 --> 00:15:46,010
you use a modern fuzzing tool by

325
00:15:46,010 --> 00:15:48,019
definition you can never find all the

326
00:15:48,019 --> 00:15:51,050
bugs with fuzzing but it's really like I

327
00:15:51,050 --> 00:15:53,240
rarely see a memory corruption back

328
00:15:53,240 --> 00:15:55,579
where I run a father on it and I don't

329
00:15:55,579 --> 00:15:59,060
find it so if you have many memory

330
00:15:59,060 --> 00:16:01,010
corruption box the box then it basically

331
00:16:01,010 --> 00:16:03,260
means nobody ever used a father on this

332
00:16:03,260 --> 00:16:07,010
software and yeah the typical tools you

333
00:16:07,010 --> 00:16:07,910
use these days

334
00:16:07,910 --> 00:16:10,190
American fuzzy loped is very popular and

335
00:16:10,190 --> 00:16:12,829
another one is Lib father which is from

336
00:16:12,829 --> 00:16:16,610
the LLVM developers and and the tool

337
00:16:16,610 --> 00:16:19,160
that can very well be used in

338
00:16:19,160 --> 00:16:20,899
combination with fuzzing is address

339
00:16:20,899 --> 00:16:24,560
sanitizer which finds memory safety

340
00:16:24,560 --> 00:16:29,019
issues that don't crash your application

341
00:16:29,019 --> 00:16:34,880
so I found 20 memory safety issues so

342
00:16:34,880 --> 00:16:36,529
some of them were crashes some of them

343
00:16:36,529 --> 00:16:38,690
were invalid memory weeds I should say

344
00:16:38,690 --> 00:16:40,699
here that they are not not necessarily

345
00:16:40,699 --> 00:16:44,300
all exploitable probably most of them

346
00:16:44,300 --> 00:16:45,800
are not and I had a bit of the

347
00:16:45,800 --> 00:16:47,570
discussion with the gstreamer developers

348
00:16:47,570 --> 00:16:49,610
who said hey why does did you did we get

349
00:16:49,610 --> 00:16:52,430
20 TVs for gstreamer and I said yeah

350
00:16:52,430 --> 00:16:55,040
well today the policy for CBS is that

351
00:16:55,040 --> 00:16:56,720
they get assigned very easily and

352
00:16:56,720 --> 00:16:59,480
basically every time a library does some

353
00:16:59,480 --> 00:17:01,940
invalid memory access it gets assigned

354
00:17:01,940 --> 00:17:04,160
to see ve and is considered a security

355
00:17:04,160 --> 00:17:06,439
vulnerability which does not mean that

356
00:17:06,439 --> 00:17:10,099
it's necessarily exploitable so this is

357
00:17:10,099 --> 00:17:12,890
quite a bit but it's also a message I

358
00:17:12,890 --> 00:17:15,410
want to give yours that this is doable

359
00:17:15,410 --> 00:17:17,630
like you can make a software like

360
00:17:17,630 --> 00:17:20,390
gstreamer much more secure and like

361
00:17:20,390 --> 00:17:23,209
Aaron I continued running the father and

362
00:17:23,209 --> 00:17:25,040
it I think now it ran for seven days

363
00:17:25,040 --> 00:17:29,240
without finding another buck so you can

364
00:17:29,240 --> 00:17:31,010
get to a state where it gets much harder

365
00:17:31,010 --> 00:17:35,080
to find these memory corruption box

366
00:17:35,460 --> 00:17:37,899
but there are dependencies like these

367
00:17:37,899 --> 00:17:40,299
rumors not just the restreamer software

368
00:17:40,299 --> 00:17:42,669
itself it's using a lot of third-party

369
00:17:42,669 --> 00:17:46,240
media libraries like clip opposed flag

370
00:17:46,240 --> 00:17:49,929
clip VPX are also things like rap game

371
00:17:49,929 --> 00:17:56,049
music emu Lipset play so do you notice

372
00:17:56,049 --> 00:17:58,059
the difference between these two lines

373
00:17:58,059 --> 00:18:03,190
like the upper ones are libraries that

374
00:18:03,190 --> 00:18:05,649
are used by browsers which usually means

375
00:18:05,649 --> 00:18:08,080
they are much safer because browsers pay

376
00:18:08,080 --> 00:18:10,570
you like very pay you a lot of money if

377
00:18:10,570 --> 00:18:12,220
you find security vulnerabilities in

378
00:18:12,220 --> 00:18:14,529
these libraries the lower line are more

379
00:18:14,529 --> 00:18:16,659
the obscure stuff like rough pack is the

380
00:18:16,659 --> 00:18:22,299
old basically pre flak lossless file

381
00:18:22,299 --> 00:18:24,220
format game music Emo's for all these

382
00:18:24,220 --> 00:18:27,760
nintendo sound files and other gaming

383
00:18:27,760 --> 00:18:32,289
consoles coding or that was a format by

384
00:18:32,289 --> 00:18:34,750
the BBC they've basically abandoned it

385
00:18:34,750 --> 00:18:37,270
it has security vulnerabilities but

386
00:18:37,270 --> 00:18:41,440
nobody's maintaining it Lipsett players

387
00:18:41,440 --> 00:18:44,679
for c64 5 so so these lower ones are

388
00:18:44,679 --> 00:18:46,360
much more problematic from a security

389
00:18:46,360 --> 00:18:50,440
perspective so why I think we can

390
00:18:50,440 --> 00:18:52,360
probably fix most security bugs in

391
00:18:52,360 --> 00:18:55,510
gstreamer doing the same thing for other

392
00:18:55,510 --> 00:18:59,049
dependencies is really hard and I'm I'm

393
00:18:59,049 --> 00:19:01,090
not sure like I'm trying but it's really

394
00:19:01,090 --> 00:19:05,399
a lot of stuff I want you to help

395
00:19:06,760 --> 00:19:10,179
so it's Linux less secure than Windows

396
00:19:10,179 --> 00:19:12,179
someone made an interesting comment

397
00:19:12,179 --> 00:19:14,529
below an article I wrote about this

398
00:19:14,529 --> 00:19:16,659
saying that yeah you don't have

399
00:19:16,659 --> 00:19:18,789
something like tracker in Windows except

400
00:19:18,789 --> 00:19:20,230
if you install an anti-virus software

401
00:19:20,230 --> 00:19:23,140
because an anti-virus software also has

402
00:19:23,140 --> 00:19:25,360
a lot of passes for complex file formats

403
00:19:25,360 --> 00:19:27,880
and usually the code quality is also

404
00:19:27,880 --> 00:19:30,220
really bad usually so maybe the

405
00:19:30,220 --> 00:19:31,779
conclusion could be if you install an

406
00:19:31,779 --> 00:19:34,179
anti-virus on a Windows you get the same

407
00:19:34,179 --> 00:19:40,870
insecurities you have for Linux and then

408
00:19:40,870 --> 00:19:44,460
this this shocked me a bit there was a

409
00:19:44,460 --> 00:19:48,580
bug found by a guy I cannot

410
00:19:48,580 --> 00:19:50,500
say his name correctly so I won't even

411
00:19:50,500 --> 00:19:52,740
try it he found a code injection

412
00:19:52,740 --> 00:19:55,390
vulnerability in a port it's a tool from

413
00:19:55,390 --> 00:19:57,850
Ubuntu which is used to handle crashes

414
00:19:57,850 --> 00:20:01,270
and it produces a crash file and you can

415
00:20:01,270 --> 00:20:03,280
like if you double click on that such a

416
00:20:03,280 --> 00:20:06,429
crash file it gives you some info okay

417
00:20:06,429 --> 00:20:11,440
I'll do it quick and then he asked some

418
00:20:11,440 --> 00:20:13,840
exploit dealing company who was like

419
00:20:13,840 --> 00:20:16,630
selling exploits to governments or

420
00:20:16,630 --> 00:20:20,679
whoever and they offered him $10,000 for

421
00:20:20,679 --> 00:20:23,500
this buck and so this means basically

422
00:20:23,500 --> 00:20:25,000
they're someone who thinks it's worth

423
00:20:25,000 --> 00:20:29,770
$10,000 to attack Ubuntu users so you

424
00:20:29,770 --> 00:20:31,690
could many people may think Linux

425
00:20:31,690 --> 00:20:33,100
desktop that doesn't really matter I

426
00:20:33,100 --> 00:20:34,990
mean nobody's using a Linux desktop I

427
00:20:34,990 --> 00:20:38,440
mean I do but not a lot of people but

428
00:20:38,440 --> 00:20:41,220
this really means like this matters so

429
00:20:41,220 --> 00:20:44,920
yeah Linux desktop security matters and

430
00:20:44,920 --> 00:20:47,970
we have to fix this

431
00:20:53,750 --> 00:20:55,920
Thank You Hannah we have time for

432
00:20:55,920 --> 00:20:58,380
questions raise your hand if you want to

433
00:20:58,380 --> 00:21:05,970
ask something or comment below do you

434
00:21:05,970 --> 00:21:07,890
have any thoughts concerning the cubes

435
00:21:07,890 --> 00:21:12,720
desktop I okay the question was if I

436
00:21:12,720 --> 00:21:15,120
have thoughts to continue cubes I

437
00:21:15,120 --> 00:21:17,160
haven't looked at it personally but the

438
00:21:17,160 --> 00:21:18,660
idea of cubes is should have a very

439
00:21:18,660 --> 00:21:23,490
strong concept of sandboxing maybe

440
00:21:23,490 --> 00:21:25,260
that's the right way to go

441
00:21:25,260 --> 00:21:27,210
what did what I don't think is sometimes

442
00:21:27,210 --> 00:21:29,820
people's thinks that sandboxing is the

443
00:21:29,820 --> 00:21:31,620
whole solution and I don't think that's

444
00:21:31,620 --> 00:21:33,000
the case because even if you have

445
00:21:33,000 --> 00:21:34,940
sandboxing you will always have

446
00:21:34,940 --> 00:21:37,530
potential to exploit things that run in

447
00:21:37,530 --> 00:21:39,960
the same context so even if we have

448
00:21:39,960 --> 00:21:42,600
sandboxing we should still make our

449
00:21:42,600 --> 00:21:49,189
software more secure more questions

450
00:21:51,200 --> 00:22:00,380
raise your hand maybe we can have a poll

451
00:22:00,380 --> 00:22:04,170
how many people think Linux desktop is

452
00:22:04,170 --> 00:22:11,820
more secure than Windows 10 phone not

453
00:22:11,820 --> 00:22:15,169
even half so interesting

454
00:22:28,470 --> 00:22:32,760
so about tracker but does it run does it

455
00:22:32,760 --> 00:22:36,870
run with permissions enough to do a lot

456
00:22:36,870 --> 00:22:41,030
of harm to the system does that count

457
00:22:41,030 --> 00:22:44,580
yet so like the old version of tracker

458
00:22:44,580 --> 00:22:46,740
ran which the user accounts permission

459
00:22:46,740 --> 00:22:48,590
so it had full access to other

460
00:22:48,590 --> 00:22:51,570
everything they use at us like as I said

461
00:22:51,570 --> 00:22:53,730
the new version all is sandbox using NYX

462
00:22:53,730 --> 00:22:57,030
lip second I hope that's done in a

463
00:22:57,030 --> 00:22:58,560
proper way and we'll restrict it to

464
00:22:58,560 --> 00:23:06,780
trust this process thank you there's

465
00:23:06,780 --> 00:23:08,400
another question raise your hand if you

466
00:23:08,400 --> 00:23:11,760
want to ask something more a comment

467
00:23:11,760 --> 00:23:13,530
than a question thanks hunter for a very

468
00:23:13,530 --> 00:23:15,270
interesting talk and thanks for

469
00:23:15,270 --> 00:23:17,370
reassuring me that using my satchel as

470
00:23:17,370 --> 00:23:19,500
my main file manager is a very good idea

471
00:23:19,500 --> 00:23:26,430
actually yeah but I wanted Linux desktop

472
00:23:26,430 --> 00:23:28,680
to be an option for average users and

473
00:23:28,680 --> 00:23:30,630
they won't use a shell as their fire

474
00:23:30,630 --> 00:23:40,550
manager anyone else

475
00:23:45,320 --> 00:23:49,750
okay let's fix Hannah for the talk

476
00:23:49,750 --> 00:23:57,210
[Applause]

