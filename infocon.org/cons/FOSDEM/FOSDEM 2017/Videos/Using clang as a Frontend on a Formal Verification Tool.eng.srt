1
00:00:00,709 --> 00:00:03,709
so

2
00:00:04,680 --> 00:00:06,979
good afternoon after 1:00 everyone um

3
00:00:06,979 --> 00:00:10,230
I'm gonna start here to talk about going

4
00:00:10,230 --> 00:00:13,110
as a front-end so this talk a bit will

5
00:00:13,110 --> 00:00:14,610
be a bit different from the other talks

6
00:00:14,610 --> 00:00:17,070
so this is actually not changing Clank

7
00:00:17,070 --> 00:00:21,599
itself but actually using it our agenda

8
00:00:21,599 --> 00:00:24,570
I'll just start by saying why do you

9
00:00:24,570 --> 00:00:26,730
need to find bugs a brief introduction

10
00:00:26,730 --> 00:00:29,519
to model checking a a swim see the two

11
00:00:29,519 --> 00:00:31,919
them working on and the cling front and

12
00:00:31,919 --> 00:00:34,530
inside the SPOC and the future of SMT

13
00:00:34,530 --> 00:00:37,670
solvers so why do we need to find bugs

14
00:00:37,670 --> 00:00:41,070
does anyone remember this case Ariane 5

15
00:00:41,070 --> 00:00:45,330
was launched in 1996 and exploded 40

16
00:00:45,330 --> 00:00:47,970
seconds after launch does anyone knows

17
00:00:47,970 --> 00:00:56,490
why the explosive what yeah it was an

18
00:00:56,490 --> 00:01:00,450
exception thrown by a confession to run

19
00:01:00,450 --> 00:01:04,349
a 64-bit flow to a 16-bit sign an

20
00:01:04,349 --> 00:01:07,500
integer and then they just lost the

21
00:01:07,500 --> 00:01:13,170
rocket so in 1996 also there is this

22
00:01:13,170 --> 00:01:15,899
case of USS yorktown they automated the

23
00:01:15,899 --> 00:01:19,380
the whole battleship and does anyone

24
00:01:19,380 --> 00:01:21,479
know why it started working why did

25
00:01:21,479 --> 00:01:26,780
break why crash so it was a really

26
00:01:26,780 --> 00:01:30,149
simple bug it was a division by zero and

27
00:01:30,149 --> 00:01:33,240
the whole battleship crashed and had to

28
00:01:33,240 --> 00:01:36,749
be towed back to the naval base so yeah

29
00:01:36,749 --> 00:01:41,159
embarrassing right so we need to fix

30
00:01:41,159 --> 00:01:43,200
bugs we cannot have those situations

31
00:01:43,200 --> 00:01:45,990
happening when you are commanding a

32
00:01:45,990 --> 00:01:49,649
battleship right so why it's formal

33
00:01:49,649 --> 00:01:53,159
mattis format is something is a way to

34
00:01:53,159 --> 00:01:57,240
try to avoid that to find bugs what's

35
00:01:57,240 --> 00:01:59,520
the main standard today it's testing

36
00:01:59,520 --> 00:02:02,249
your simulation so you have a program

37
00:02:02,249 --> 00:02:05,429
and you check a path on the on the

38
00:02:05,429 --> 00:02:09,270
program and you get an error on a okay

39
00:02:09,270 --> 00:02:12,750
so we checks paths on the program mine

40
00:02:12,750 --> 00:02:15,239
is it mainly some errors but that's okay

41
00:02:15,239 --> 00:02:17,780
you can check since it's quick it's as

42
00:02:17,780 --> 00:02:20,990
more memory requirements that time

43
00:02:20,990 --> 00:02:22,819
requirements you can actually check a

44
00:02:22,819 --> 00:02:25,180
lot of time so you get a good coverage

45
00:02:25,180 --> 00:02:28,220
on the other hand mother checking

46
00:02:28,220 --> 00:02:31,340
it's an encoding so you have the program

47
00:02:31,340 --> 00:02:34,569
in a specification of the program and

48
00:02:34,569 --> 00:02:39,010
you check all the passes all the single

49
00:02:39,010 --> 00:02:42,890
possible errors are checked by the model

50
00:02:42,890 --> 00:02:45,650
checking and in the end you have okay no

51
00:02:45,650 --> 00:02:48,680
bugs or error trace so you can actually

52
00:02:48,680 --> 00:02:50,840
see the the set of assignments that lead

53
00:02:50,840 --> 00:02:55,820
to the dead bug it the problem is since

54
00:02:55,820 --> 00:02:58,100
you're conferencing the whole program it

55
00:02:58,100 --> 00:02:59,840
can be extremely resource hangry so

56
00:02:59,840 --> 00:03:06,140
memory and time we are working here a

57
00:03:06,140 --> 00:03:08,239
when if it's time to we've bought the

58
00:03:08,239 --> 00:03:09,920
mother checking so it's kind of Callie's

59
00:03:09,920 --> 00:03:11,750
approach the mother checking we bound

60
00:03:11,750 --> 00:03:15,470
loops array size context switches so we

61
00:03:15,470 --> 00:03:17,840
just keep increasing until we find a bug

62
00:03:17,840 --> 00:03:20,360
oh we don't what we just say we don't

63
00:03:20,360 --> 00:03:22,670
know it's good at find bugs because

64
00:03:22,670 --> 00:03:25,730
usually bugs are really shallow in the

65
00:03:25,730 --> 00:03:27,380
program so we don't have to iterate that

66
00:03:27,380 --> 00:03:30,530
much to find bugs you can never prove

67
00:03:30,530 --> 00:03:33,470
that the problem does not have bugs so

68
00:03:33,470 --> 00:03:36,470
it will either say there's a bug or I

69
00:03:36,470 --> 00:03:40,040
don't know and if you have infinite

70
00:03:40,040 --> 00:03:41,750
loops it might be a problem because you

71
00:03:41,750 --> 00:03:45,320
can ever unroll all the possible all the

72
00:03:45,320 --> 00:03:47,120
problems all the possible read all the

73
00:03:47,120 --> 00:03:49,820
possible paths so you might never be

74
00:03:49,820 --> 00:03:51,170
able to actually check all the

75
00:03:51,170 --> 00:03:56,359
possibilities so yes we see it stands

76
00:03:56,359 --> 00:03:58,370
for efficient asymmetry basic context

77
00:03:58,370 --> 00:04:02,450
bounded model checker it's this it's

78
00:04:02,450 --> 00:04:05,180
this architecture I'm not going to go

79
00:04:05,180 --> 00:04:08,030
into details in each block but basically

80
00:04:08,030 --> 00:04:11,329
we get a source code a C or C++ we

81
00:04:11,329 --> 00:04:13,820
convert to a simple language called go

82
00:04:13,820 --> 00:04:16,130
to con go to language we basically

83
00:04:16,130 --> 00:04:18,738
remove switches loops and just make the

84
00:04:18,738 --> 00:04:20,690
program simpler we do a simple execution

85
00:04:20,690 --> 00:04:22,760
which is go through all the pets in the

86
00:04:22,760 --> 00:04:25,490
code we encode the constraint in

87
00:04:25,490 --> 00:04:28,849
properties of the code so prophets are

88
00:04:28,849 --> 00:04:31,160
like if the

89
00:04:31,160 --> 00:04:34,580
the the the parable is never zero if

90
00:04:34,580 --> 00:04:37,220
it's a division is the division this

91
00:04:37,220 --> 00:04:39,200
kind of stuff and then we call the using

92
00:04:39,200 --> 00:04:42,620
SM ET right now we support zetrov will

93
00:04:42,620 --> 00:04:46,430
black those mats at CVC annex and well

94
00:04:46,430 --> 00:04:49,940
this is the whole whole process and I'm

95
00:04:49,940 --> 00:04:56,450
focus on the claim continent yes when

96
00:04:56,450 --> 00:04:58,580
she has all this beauty verification

97
00:04:58,580 --> 00:05:01,910
support so for point a safety array

98
00:05:01,910 --> 00:05:03,620
bound access individual by zero a

99
00:05:03,620 --> 00:05:06,250
neighbor by default but we also check

100
00:05:06,250 --> 00:05:08,990
overflows memory leaks their logs that

101
00:05:08,990 --> 00:05:15,340
erases I'll show you a small example

102
00:05:15,820 --> 00:05:29,660
here few examples don't mind so don't

103
00:05:29,660 --> 00:05:31,130
mind the gaps in the program they are

104
00:05:31,130 --> 00:05:33,850
there for a reason

105
00:05:33,970 --> 00:05:38,960
so we just have function foo and it

106
00:05:38,960 --> 00:05:40,910
doesn't the division and we want to

107
00:05:40,910 --> 00:05:43,010
check all the possible values of a that

108
00:05:43,010 --> 00:05:45,680
will trigger bug in this program so it's

109
00:05:45,680 --> 00:05:51,160
simple as yes mercy

110
00:05:55,669 --> 00:05:58,639
so it will find a set of assignments

111
00:05:58,639 --> 00:06:01,550
that will lead to a bug you see these

112
00:06:01,550 --> 00:06:05,090
big numbers there so we can actually do

113
00:06:05,090 --> 00:06:07,340
something like okay my program will

114
00:06:07,340 --> 00:06:10,249
never have this kind of input for

115
00:06:10,249 --> 00:06:11,749
instance my program you only have a

116
00:06:11,749 --> 00:06:14,719
range of from 0 to 100 so we can write

117
00:06:14,719 --> 00:06:18,590
stuff like assume that a is between 0

118
00:06:18,590 --> 00:06:22,400
and 100 B is between zero hundred so

119
00:06:22,400 --> 00:06:25,520
this is example 2 so it will try to find

120
00:06:25,520 --> 00:06:29,779
the appropriate violation that will

121
00:06:29,779 --> 00:06:34,550
trigger division by 0 for for the values

122
00:06:34,550 --> 00:06:36,860
of a inside this range so you see if you

123
00:06:36,860 --> 00:06:40,310
use 5 and 1 this will trigger division

124
00:06:40,310 --> 00:06:44,389
by 0 T this is using boleto one of the

125
00:06:44,389 --> 00:06:46,639
server's you can actually check for

126
00:06:46,639 --> 00:06:49,419
using all this office those that read

127
00:06:49,419 --> 00:06:55,879
much so different assignments but they

128
00:06:55,879 --> 00:06:58,520
always trick the the division by zero

129
00:06:58,520 --> 00:07:01,849
this assume is actually the same as if

130
00:07:01,849 --> 00:07:05,659
we write and if if this condition is not

131
00:07:05,659 --> 00:07:11,779
matches return 0 so it's the same so

132
00:07:11,779 --> 00:07:14,479
finally this example 3 let's say I'm

133
00:07:14,479 --> 00:07:16,159
though I don't want to check the future

134
00:07:16,159 --> 00:07:17,419
by 0 right

135
00:07:17,419 --> 00:07:19,699
you can either disable division by 0

136
00:07:19,699 --> 00:07:21,889
using the flag for there for the tool or

137
00:07:21,889 --> 00:07:25,399
you just assume here so that C is never

138
00:07:25,399 --> 00:07:28,370
0 and C is the equation for the division

139
00:07:28,370 --> 00:07:36,169
right so let's see let's say so no bug

140
00:07:36,169 --> 00:07:39,560
right but I mean you don't want to check

141
00:07:39,560 --> 00:07:41,899
for that bug right but let's say you

142
00:07:41,899 --> 00:07:46,969
want to check for overflow you actually

143
00:07:46,969 --> 00:07:48,830
get a set of assignments for for

144
00:07:48,830 --> 00:07:52,990
overflow you check with all this overs

145
00:07:56,139 --> 00:08:10,970
that's sides as well sorry right so yeah

146
00:08:10,970 --> 00:08:13,130
so these are simple cases but you can

147
00:08:13,130 --> 00:08:15,770
see they are really effective to find

148
00:08:15,770 --> 00:08:17,900
those bugs so you have actually the set

149
00:08:17,900 --> 00:08:19,729
of assignments that lead to that so we

150
00:08:19,729 --> 00:08:21,860
it's easier for them for the for the

151
00:08:21,860 --> 00:08:25,090
develop to see how he can reproduce it

152
00:08:25,090 --> 00:08:30,430
another program here with kokoretsi so

153
00:08:30,430 --> 00:08:32,958
it's basically a program with a dialogue

154
00:08:32,958 --> 00:08:36,549
and we can check that as well yes Percy

155
00:08:36,549 --> 00:08:39,708
try something very naive when it comes

156
00:08:39,708 --> 00:08:43,849
to the check concurrent program so by

157
00:08:43,849 --> 00:08:49,480
default deadlock is not enabled so sorry

158
00:08:52,690 --> 00:08:56,360
so it checks by default if the email are

159
00:08:56,360 --> 00:08:59,209
returned and no point but if this like

160
00:08:59,209 --> 00:09:02,120
we can force it to always succeed so by

161
00:09:02,120 --> 00:09:03,700
default it doesn't check for deadlock

162
00:09:03,700 --> 00:09:08,980
but if we add the down-low

163
00:09:13,490 --> 00:09:16,850
it will eventually find a bug and give

164
00:09:16,850 --> 00:09:20,690
you the batteries for the for the said

165
00:09:20,690 --> 00:09:22,010
most assignments that lead to the

166
00:09:22,010 --> 00:09:24,860
batteries to that to the dialogue yes

167
00:09:24,860 --> 00:09:28,250
when C's try to interleave all the

168
00:09:28,250 --> 00:09:30,560
possible points in the program so if you

169
00:09:30,560 --> 00:09:32,930
have huge ears concurrent programs did

170
00:09:32,930 --> 00:09:36,020
that will take a while to to verify you

171
00:09:36,020 --> 00:09:45,830
try to need to leave everything okay so

172
00:09:45,830 --> 00:09:52,850
we encode everything using SMT and it's

173
00:09:52,850 --> 00:09:55,540
complicated

174
00:09:56,020 --> 00:09:58,370
awake and talk later okay

175
00:09:58,370 --> 00:10:04,790
all right so okay so these are simple

176
00:10:04,790 --> 00:10:09,709
examples of using a spoon C and the

177
00:10:09,709 --> 00:10:12,740
crank content right why your am we are

178
00:10:12,740 --> 00:10:15,110
moving to a client front-end so our old

179
00:10:15,110 --> 00:10:18,050
front end it was about 15 years old so

180
00:10:18,050 --> 00:10:20,300
we didn't have support for a bunch of

181
00:10:20,300 --> 00:10:26,990
stuffs so for instance compound compound

182
00:10:26,990 --> 00:10:35,420
literals stuff like this and well I'm

183
00:10:35,420 --> 00:10:38,180
not a really good Bison developer so I

184
00:10:38,180 --> 00:10:42,860
had no idea how to implement that and we

185
00:10:42,860 --> 00:10:45,070
didn't have support for designated

186
00:10:45,070 --> 00:10:47,270
initializers stuff like this to

187
00:10:47,270 --> 00:10:50,630
initialize a race no support for type of

188
00:10:50,630 --> 00:10:53,630
operator it was full of bugs almost 30k

189
00:10:53,630 --> 00:11:01,010
locks so every single what yeah yeah

190
00:11:01,010 --> 00:11:04,940
that's let's talk about that later so

191
00:11:04,940 --> 00:11:08,800
every single change in the program is

192
00:11:08,800 --> 00:11:11,980
what I mean it will lead to a lot of

193
00:11:11,980 --> 00:11:14,600
bugs and stuff and it was hard

194
00:11:14,600 --> 00:11:18,470
especially when I talk about C++ so we

195
00:11:18,470 --> 00:11:21,320
try to our old friend I try to support

196
00:11:21,320 --> 00:11:24,529
C+ 498 there was hard hugs everywhere to

197
00:11:24,529 --> 00:11:27,080
support them one of the problems that we

198
00:11:27,080 --> 00:11:28,940
ever really understood the rules for

199
00:11:28,940 --> 00:11:30,500
template Association because they are

200
00:11:30,500 --> 00:11:31,850
hard that you're gonna see that later

201
00:11:31,850 --> 00:11:34,550
and it extended this if front-end plus

202
00:11:34,550 --> 00:11:39,050
that 5k logs so yeah we don't we don't

203
00:11:39,050 --> 00:11:40,490
want to maintain that because that's not

204
00:11:40,490 --> 00:11:42,380
that's not the objective of the to the

205
00:11:42,380 --> 00:11:44,600
main aim of the dual the tool needs to

206
00:11:44,600 --> 00:11:46,370
verify the problem we don't want to

207
00:11:46,370 --> 00:11:50,450
maintain that and then came Clank clang

208
00:11:50,450 --> 00:11:53,480
has a well-defined ast so we just

209
00:11:53,480 --> 00:11:56,240
actually to write a converter for the SC

210
00:11:56,240 --> 00:11:58,370
from playing in two hours new features

211
00:11:58,370 --> 00:12:00,740
we just have to add a new conversion own

212
00:12:00,740 --> 00:12:03,800
I will never have to program in Flex

213
00:12:03,800 --> 00:12:07,100
buys anymore so that's that's alone it's

214
00:12:07,100 --> 00:12:09,770
good and we have a convenient function

215
00:12:09,770 --> 00:12:12,050
like evaluators integers evaluators

216
00:12:12,050 --> 00:12:14,600
boolean conditions insider the Clank

217
00:12:14,600 --> 00:12:17,930
that we can simplify a lot of the of DST

218
00:12:17,930 --> 00:12:22,220
for us we have one in here in nervous

219
00:12:22,220 --> 00:12:25,280
for a real compiling so the same errors

220
00:12:25,280 --> 00:12:26,930
and one is you get from the accomplished

221
00:12:26,930 --> 00:12:28,070
you're gonna have all on the

222
00:12:28,070 --> 00:12:31,550
verification tool and it's much smaller

223
00:12:31,550 --> 00:12:35,510
so just a see front-end is above for

224
00:12:35,510 --> 00:12:38,030
catalogs and the c++ about 7k locks so

225
00:12:38,030 --> 00:12:42,050
much easier to to support the c++

226
00:12:42,050 --> 00:12:43,700
front-end is not released yet because we

227
00:12:43,700 --> 00:12:45,830
don't have any polymer field but I'll

228
00:12:45,830 --> 00:12:48,410
talk about that later and there is

229
00:12:48,410 --> 00:12:51,220
another thing that alone by itself it's

230
00:12:51,220 --> 00:12:55,880
what it makes the claim awesome which is

231
00:12:55,880 --> 00:12:58,360
the SD conte all this - eh the templates

232
00:12:58,360 --> 00:13:00,800
the HT contain all this initiation in

233
00:13:00,800 --> 00:13:03,380
place have I told you that the air T

234
00:13:03,380 --> 00:13:06,050
conte all the sensation in plates and

235
00:13:06,050 --> 00:13:09,320
I'll show I'll show you why this is so

236
00:13:09,320 --> 00:13:15,040
great so I have here the standard so

237
00:13:15,040 --> 00:13:18,350
this is the probably the last standard

238
00:13:18,350 --> 00:13:20,120
before the release of the c-plus puzzle

239
00:13:20,120 --> 00:13:22,150
ever standard so you see they have date

240
00:13:22,150 --> 00:13:31,270
if we go to page three six eight

241
00:13:32,740 --> 00:13:40,010
so we are talking about its pleased

242
00:13:40,010 --> 00:13:43,960
instantiation right so that's easy right

243
00:13:43,960 --> 00:13:46,970
until we so we have a lot of points a

244
00:13:46,970 --> 00:13:51,590
lot of examples until we get to I'm not

245
00:13:51,590 --> 00:14:00,050
only right so explicit cessation so we

246
00:14:00,050 --> 00:14:03,500
get to the point number seven here and I

247
00:14:03,500 --> 00:14:10,520
read for you guys sorry

248
00:14:10,520 --> 00:14:14,170
here so a placement of explicit

249
00:14:14,170 --> 00:14:16,220
specialization declaration for function

250
00:14:16,220 --> 00:14:17,780
templates class templates member

251
00:14:17,780 --> 00:14:19,670
function of class template static that

252
00:14:19,670 --> 00:14:21,740
members of class templates may be a

253
00:14:21,740 --> 00:14:23,720
class of class simply its members class

254
00:14:23,720 --> 00:14:26,180
templates of classes may reflection

255
00:14:26,180 --> 00:14:28,040
templates of class in place memory

256
00:14:28,040 --> 00:14:29,600
function of member templates of clean

257
00:14:29,600 --> 00:14:31,700
plastic plates memory functions member

258
00:14:31,700 --> 00:14:33,740
the place of non template classes may be

259
00:14:33,740 --> 00:14:35,570
function templates of memory class of

260
00:14:35,570 --> 00:14:38,030
question fees etc and the placement of

261
00:14:38,030 --> 00:14:40,940
the presentation declaration of question

262
00:14:40,940 --> 00:14:43,070
plates remember class templates of non

263
00:14:43,070 --> 00:14:44,900
template classes member class templates

264
00:14:44,900 --> 00:14:46,310
of class templates etc

265
00:14:46,310 --> 00:14:48,770
Canford effect where the program is

266
00:14:48,770 --> 00:14:50,420
well-formed according to the relative

267
00:14:50,420 --> 00:14:51,950
positioning of the explicit

268
00:14:51,950 --> 00:14:53,600
specialization declaration and their

269
00:14:53,600 --> 00:14:55,370
point of sensations in the translation

270
00:14:55,370 --> 00:15:01,270
unit and specified above or below a

271
00:15:01,270 --> 00:15:03,020
specialization be careful about the

272
00:15:03,020 --> 00:15:05,150
location make you compile will be such

273
00:15:05,150 --> 00:15:07,400
as RiverKings or it's self immolation

274
00:15:07,400 --> 00:15:12,350
so it's hard right we don't have to deal

275
00:15:12,350 --> 00:15:14,510
with any more clever people down there

276
00:15:14,510 --> 00:15:16,220
for us I'm trying so we're just gonna

277
00:15:16,220 --> 00:15:21,230
use that really oh that's much better

278
00:15:21,230 --> 00:15:25,640
day so why moving to clang we are using

279
00:15:25,640 --> 00:15:27,950
liquid cooling because by the time we

280
00:15:27,950 --> 00:15:30,950
try to use the label clangs there were

281
00:15:30,950 --> 00:15:34,010
so many functionalities I think it's

282
00:15:34,010 --> 00:15:36,530
much better now but since we start with

283
00:15:36,530 --> 00:15:40,459
that we're not moving back again most of

284
00:15:40,459 --> 00:15:43,459
the code to walk the s3 is based on

285
00:15:43,459 --> 00:15:44,510
they've

286
00:15:44,510 --> 00:15:47,030
the coding st dumper type printer and

287
00:15:47,030 --> 00:15:52,700
the coding Lib Cochin some limitations

288
00:15:52,700 --> 00:15:56,450
we found is C++ Francis does not support

289
00:15:56,450 --> 00:15:58,130
implicit function declarations

290
00:15:58,130 --> 00:16:00,740
so yes BMC assumed that I showed you

291
00:16:00,740 --> 00:16:05,420
guys we're not gonna work by default I'm

292
00:16:05,420 --> 00:16:07,760
still trying to work out how to fix that

293
00:16:07,760 --> 00:16:10,790
some random car crashes for instance if

294
00:16:10,790 --> 00:16:13,640
you try to get a line number from from

295
00:16:13,640 --> 00:16:16,550
translation unit in to Incline 3.6 it

296
00:16:16,550 --> 00:16:20,120
crashed and what it fixed since then

297
00:16:20,120 --> 00:16:22,790
clang does not build a VJ before you so

298
00:16:22,790 --> 00:16:25,550
at least not using the defined ast so

299
00:16:25,550 --> 00:16:26,930
I'm gonna have to write on the other

300
00:16:26,930 --> 00:16:30,350
converter for that we have no access to

301
00:16:30,350 --> 00:16:32,390
the static analyzer that would be

302
00:16:32,390 --> 00:16:34,640
excellent for us since we are trying to

303
00:16:34,640 --> 00:16:36,620
verify the program try to get some

304
00:16:36,620 --> 00:16:38,780
information about the reasoning of the

305
00:16:38,780 --> 00:16:41,720
of the problem there are no absolute

306
00:16:41,720 --> 00:16:44,870
optimizations at ast level which is oh

307
00:16:44,870 --> 00:16:47,540
that's that's reasonable because all

308
00:16:47,540 --> 00:16:49,730
that optimization done that bytecode the

309
00:16:49,730 --> 00:16:54,140
VM so we get small optimizations and

310
00:16:54,140 --> 00:16:55,760
there are some lack of documentation

311
00:16:55,760 --> 00:17:00,950
some corner cases for instance let me

312
00:17:00,950 --> 00:17:09,619
show you guys so that's a small example

313
00:17:09,619 --> 00:17:14,990
we just have a class X and we do a copy

314
00:17:14,990 --> 00:17:17,030
constructor right we call constructor

315
00:17:17,030 --> 00:17:24,650
and if we try to generate the the ast

316
00:17:24,650 --> 00:17:29,500
for that so briefly this is the

317
00:17:39,450 --> 00:17:41,380
you

318
00:17:41,380 --> 00:17:43,440
you

319
00:17:45,870 --> 00:17:53,669
but I 0 I 1 I 2 of the member function

320
00:17:53,669 --> 00:17:58,529
the member STR so basically what Clank

321
00:17:58,529 --> 00:18:05,250
is telling me here is that this is the

322
00:18:05,250 --> 00:18:08,309
copy constructor for this class and I

323
00:18:08,309 --> 00:18:10,740
have no idea where this is coming from

324
00:18:10,740 --> 00:18:13,500
and Clank does not tell me either

325
00:18:13,500 --> 00:18:17,220
so however by the time you reach the

326
00:18:17,220 --> 00:18:19,710
Cochin and there when the Biko is

327
00:18:19,710 --> 00:18:23,370
generated Jezza main main copy for the

328
00:18:23,370 --> 00:18:27,090
four dead casings particulate but there

329
00:18:27,090 --> 00:18:29,940
is no no no documentation for that we

330
00:18:29,940 --> 00:18:33,240
just try to pass the DST when we see

331
00:18:33,240 --> 00:18:34,770
that and there is no explanation why

332
00:18:34,770 --> 00:18:45,090
that is is like that yeah but the thing

333
00:18:45,090 --> 00:18:49,110
is we are very careful when it comes to

334
00:18:49,110 --> 00:18:51,299
variables and if there is a variable

335
00:18:51,299 --> 00:18:53,460
with our declaration we don't like it

336
00:18:53,460 --> 00:19:10,159
so we just don't know what to do yeah

337
00:19:12,289 --> 00:19:15,510
exactly yeah we we don't have an idea

338
00:19:15,510 --> 00:19:22,679
how to do that okay so just a bit future

339
00:19:22,679 --> 00:19:25,169
bonus in this overs so why we don't

340
00:19:25,169 --> 00:19:29,429
check our base base code because the 70

341
00:19:29,429 --> 00:19:31,860
solvers are really resource-hungry we

342
00:19:31,860 --> 00:19:34,710
talk about how hundreds of gigabytes to

343
00:19:34,710 --> 00:19:38,460
to formally verified how to and this is

344
00:19:38,460 --> 00:19:41,940
well as meaty solvers evolving but

345
00:19:41,940 --> 00:19:44,460
they're still they still need a long way

346
00:19:44,460 --> 00:19:47,580
to go but I was the future for them so

347
00:19:47,580 --> 00:19:50,940
going mainstream so this is a serial

348
00:19:50,940 --> 00:19:53,250
patches by Dominic Chan they are on the

349
00:19:53,250 --> 00:19:57,630
fabric rate fabricator they add the tree

350
00:19:57,630 --> 00:20:00,620
to the contrary solver

351
00:20:00,620 --> 00:20:03,720
the memory usage is about 20% higher

352
00:20:03,720 --> 00:20:05,690
which is okay

353
00:20:05,690 --> 00:20:08,460
however their time to run is about 15

354
00:20:08,460 --> 00:20:10,890
times higher so that's something to

355
00:20:10,890 --> 00:20:13,110
improve but we are getting there with

356
00:20:13,110 --> 00:20:16,140
the surgery patches we are able to

357
00:20:16,140 --> 00:20:19,890
finally reason about symbolic cortex as

358
00:20:19,890 --> 00:20:21,690
expressions that this tech analyzer

359
00:20:21,690 --> 00:20:25,080
could not do before that it's not

360
00:20:25,080 --> 00:20:27,809
accepted to mainstream yeah but it's

361
00:20:27,809 --> 00:20:30,929
been under active discussions in the on

362
00:20:30,929 --> 00:20:35,760
the fabricator and that's it yes when we

363
00:20:35,760 --> 00:20:39,030
see is open source it's closed

364
00:20:39,030 --> 00:20:42,059
development however for some reason our

365
00:20:42,059 --> 00:20:46,320
develops are shy I guess and please

366
00:20:46,320 --> 00:20:48,750
check the code and any reason just send

367
00:20:48,750 --> 00:20:50,970
me any questions just send me an email

368
00:20:50,970 --> 00:21:02,809
like that thank you know any question

369
00:21:02,809 --> 00:21:16,440
yep not really

370
00:21:16,440 --> 00:21:21,090
no really okay so he asked if there is

371
00:21:21,090 --> 00:21:23,520
any other limitation other than the

372
00:21:23,520 --> 00:21:25,860
table for the C++ no really with

373
00:21:25,860 --> 00:21:28,830
everything else it's it's an it's there

374
00:21:28,830 --> 00:21:35,460
we just have to to pass it actually yeah

375
00:21:35,460 --> 00:21:40,280
yeah I mean not only ast but

376
00:21:44,899 --> 00:21:47,940
yes this is Danny sigh as we see on a

377
00:21:47,940 --> 00:21:50,009
later step none on the SD so the st is

378
00:21:50,009 --> 00:21:53,249
basically just to to confine that to our

379
00:21:53,249 --> 00:21:55,139
internal representation so we don't have

380
00:21:55,139 --> 00:21:57,450
to pass the program doing any kind of

381
00:21:57,450 --> 00:22:09,779
type check right so it's seen C++ yeah

382
00:22:09,779 --> 00:22:17,159
super special Evan basically we know No

383
00:22:17,159 --> 00:22:20,309
yeah yeah basically suppose we have some

384
00:22:20,309 --> 00:22:24,119
kind of some magpie developers so magpie

385
00:22:24,119 --> 00:22:28,109
is that that bird that likes to to steal

386
00:22:28,109 --> 00:22:31,169
shiny things so every new shiny things

387
00:22:31,169 --> 00:22:33,719
new features on C++ we just like to

388
00:22:33,719 --> 00:22:36,539
implement that so soon we're gonna be

389
00:22:36,539 --> 00:22:46,499
moving to super spies over 14 okay so

390
00:22:46,499 --> 00:22:49,019
yes about what's the biggest program we

391
00:22:49,019 --> 00:22:54,479
checked in terms of source code about

392
00:22:54,479 --> 00:22:57,649
ten megabytes of source code which is

393
00:22:57,649 --> 00:23:01,139
small to medium I guess it really

394
00:23:01,139 --> 00:23:03,570
depends on the on the program because a

395
00:23:03,570 --> 00:23:06,809
lot of stuff we can just throw away and

396
00:23:06,809 --> 00:23:08,940
not give it to the solver we can do some

397
00:23:08,940 --> 00:23:10,619
we do some kind of static analysis on

398
00:23:10,619 --> 00:23:11,999
the program later on to remove

399
00:23:11,999 --> 00:23:14,519
unreachable paths and that kind of stuff

400
00:23:14,519 --> 00:23:17,099
so it really depends on the program but

401
00:23:17,099 --> 00:23:19,559
so far about ten megabytes of source

402
00:23:19,559 --> 00:23:25,039
code or what

403
00:23:25,460 --> 00:23:29,280
on the honor - uh no really because it's

404
00:23:29,280 --> 00:23:39,390
too big yeah yeah so yes oh yes women

405
00:23:39,390 --> 00:23:43,230
see is a fork of CBM C and C BMC is

406
00:23:43,230 --> 00:23:45,840
mostly about sex overs it does have

407
00:23:45,840 --> 00:23:48,360
support for SMT solvers but it's less

408
00:23:48,360 --> 00:23:52,340
than ideal we are folks the SMT solvers

409
00:23:52,340 --> 00:23:55,340
yep

410
00:24:00,320 --> 00:24:05,669
so CLE as far as I know it tries to run

411
00:24:05,669 --> 00:24:10,640
the program and generate coverage right

412
00:24:12,799 --> 00:24:31,740
okay yeah we so what's the difference

413
00:24:31,740 --> 00:24:35,039
between clay and yes we receive so we

414
00:24:35,039 --> 00:24:37,289
walk all the paths or do the simple

415
00:24:37,289 --> 00:24:40,710
execution and we do a bundle check so

416
00:24:40,710 --> 00:24:44,370
you actually can define how many loop

417
00:24:44,370 --> 00:24:47,309
iterations do you want to to run and we

418
00:24:47,309 --> 00:24:49,289
call SMT so if I don't know if Kleos is

419
00:24:49,289 --> 00:24:54,360
a sm2 so yeah so yeah I would say the

420
00:24:54,360 --> 00:24:55,409
bounded model checking

421
00:24:55,409 --> 00:24:57,330
it's the difference you can bounded the

422
00:24:57,330 --> 00:25:13,679
verification yes yeah we have support

423
00:25:13,679 --> 00:25:17,400
for SEL there is a paper we publish four

424
00:25:17,400 --> 00:25:19,559
years ago I guess they define all the

425
00:25:19,559 --> 00:25:22,230
all the the semantics for them you just

426
00:25:22,230 --> 00:25:24,210
have to write in using Excel on the

427
00:25:24,210 --> 00:25:32,600
function calls yes LTL yeah yeah

428
00:25:36,320 --> 00:25:43,170
yes oh yes okay so for C++ it's not a

429
00:25:43,170 --> 00:25:45,540
big deal because they provide the whole

430
00:25:45,540 --> 00:25:47,940
code but for see stuff like string

431
00:25:47,940 --> 00:25:50,780
bridge have this kind of stuff we have a

432
00:25:50,780 --> 00:25:55,320
model for that internally it doesn't

433
00:25:55,320 --> 00:25:58,590
cover all the seed libraries but most of

434
00:25:58,590 --> 00:26:01,850
them are there so Headly strings chars

435
00:26:01,850 --> 00:26:05,580
files everything is there forty points

436
00:26:05,580 --> 00:26:20,130
as well yes because basically by the

437
00:26:20,130 --> 00:26:22,350
time we were looking at the crank we

438
00:26:22,350 --> 00:26:25,560
thought that the SC will provide the

439
00:26:25,560 --> 00:26:27,930
most information we need it for the

440
00:26:27,930 --> 00:26:28,650
verification

441
00:26:28,650 --> 00:26:32,250
so this CFG can come kind of optimize it

442
00:26:32,250 --> 00:26:35,730
some branches can be cutted and we just

443
00:26:35,730 --> 00:26:38,640
wanted the actual representation of the

444
00:26:38,640 --> 00:26:42,140
program which is bad because this CFG

445
00:26:42,140 --> 00:26:44,670
code kind of generate the view table for

446
00:26:44,670 --> 00:26:52,940
you right yeah yeah yeah

447
00:26:57,260 --> 00:27:00,210
yes there are there is a tool that does

448
00:27:00,210 --> 00:27:04,230
the scold smack so it generally it works

449
00:27:04,230 --> 00:27:07,590
from the biko and converts to a bogey

450
00:27:07,590 --> 00:27:09,090
language I think that isn't try to

451
00:27:09,090 --> 00:27:12,360
verify ya the advantages of that is that

452
00:27:12,360 --> 00:27:16,620
you can verify much more language not

453
00:27:16,620 --> 00:27:19,530
only C and C++ alright you were working

454
00:27:19,530 --> 00:27:22,140
at the LVN by code but since we are

455
00:27:22,140 --> 00:27:25,260
focusing on C and C++ we decide just go

456
00:27:25,260 --> 00:27:32,060
with Clank yep okay thank you very much

457
00:27:32,060 --> 00:27:36,490
[Applause]

