1
00:00:05,020 --> 00:00:14,500
hi everybody everyone can I walk

2
00:00:14,500 --> 00:00:17,630
canonical on the legacy and LXE project

3
00:00:17,630 --> 00:00:21,410
leader and without James major also were

4
00:00:21,410 --> 00:00:23,090
canonical and I'm the Technical

5
00:00:23,090 --> 00:00:25,520
Architect for OpenStack at canonical so

6
00:00:25,520 --> 00:00:26,739
we're gonna be talking to you about

7
00:00:26,739 --> 00:00:28,640
deploying OpenStack with machine

8
00:00:28,640 --> 00:00:30,800
containers and step banners gonna kick

9
00:00:30,800 --> 00:00:32,479
up with a bit of an overview of lex d

10
00:00:32,479 --> 00:00:34,070
which is the underlying container

11
00:00:34,070 --> 00:00:36,410
technology that goes in and then we'll

12
00:00:36,410 --> 00:00:38,480
go in a bit more on the the Nova driver

13
00:00:38,480 --> 00:00:40,399
we've implemented as well so I

14
00:00:40,399 --> 00:00:52,039
understand now all right okay so what's

15
00:00:52,039 --> 00:00:55,300
literally really briefly its

16
00:00:55,300 --> 00:00:57,980
buzykin new alexei experience we've been

17
00:00:57,980 --> 00:01:00,339
working on that for couple years now

18
00:01:00,339 --> 00:01:02,809
it's been it's still going to be really

19
00:01:02,809 --> 00:01:05,330
simple it comes with a community we done

20
00:01:05,330 --> 00:01:07,880
you know have an IDE interface it's got

21
00:01:07,880 --> 00:01:09,500
the REST API you can interact with you

22
00:01:09,500 --> 00:01:11,390
can script with it it's good it really

23
00:01:11,390 --> 00:01:15,500
easily it's got much clearer terminology

24
00:01:15,500 --> 00:01:16,850
than we ever did with FedEx see it's

25
00:01:16,850 --> 00:01:19,040
really clear what you're doing at any

26
00:01:19,040 --> 00:01:24,260
time it is it is really extremely fast

27
00:01:24,260 --> 00:01:26,720
because it's not the tradition we do in

28
00:01:26,720 --> 00:01:28,490
containers as you know know about

29
00:01:28,490 --> 00:01:29,990
transition out the head whatsoever

30
00:01:29,990 --> 00:01:34,160
buzzer key draw for performance with the

31
00:01:34,160 --> 00:01:36,260
exception of if you said stack resource

32
00:01:36,260 --> 00:01:37,520
limits you might have a tiny bit of

33
00:01:37,520 --> 00:01:39,140
overhead from the can order to do the

34
00:01:39,140 --> 00:01:42,770
resource limitation it's very secure we

35
00:01:42,770 --> 00:01:44,660
use every single security feature that

36
00:01:44,660 --> 00:01:47,660
exists in the kernel effectively to make

37
00:01:47,660 --> 00:01:49,070
those candidate codes are safe as you

38
00:01:49,070 --> 00:01:51,200
can possibly make them without turning

39
00:01:51,200 --> 00:01:52,810
them into full-fledged rat or machine

40
00:01:52,810 --> 00:01:55,550
and it's scalable it works perfectly

41
00:01:55,550 --> 00:01:57,590
fine for your day-to-day development

42
00:01:57,590 --> 00:01:59,570
thing which is what development on your

43
00:01:59,570 --> 00:02:00,650
laptop which is what I'll show you

44
00:02:00,650 --> 00:02:02,960
afterwards but it also scales to

45
00:02:02,960 --> 00:02:04,550
thousands of containers which is what

46
00:02:04,550 --> 00:02:06,050
James would be talking about afterwards

47
00:02:06,050 --> 00:02:09,889
if you use it through OpenStack

48
00:02:09,889 --> 00:02:12,330
but it's kind of what is Luke like so

49
00:02:12,330 --> 00:02:16,980
can usually in typical next department

50
00:02:16,980 --> 00:02:19,440
without multiple host they'd run their

51
00:02:19,440 --> 00:02:21,900
own UNIX kernel you might run the same

52
00:02:21,900 --> 00:02:23,370
one on each of them or not we don't

53
00:02:23,370 --> 00:02:24,720
really care

54
00:02:24,720 --> 00:02:29,330
you run Alexi is the the library and

55
00:02:29,330 --> 00:02:31,379
that we use to actually talk to the

56
00:02:31,379 --> 00:02:34,170
camel and that we've developed which is

57
00:02:34,170 --> 00:02:36,480
then used by XT which then expose the

58
00:02:36,480 --> 00:02:39,299
REST API that we have clients for so

59
00:02:39,299 --> 00:02:41,099
we've we ship of come in nine to be

60
00:02:41,099 --> 00:02:43,620
showing people have been writing their

61
00:02:43,620 --> 00:02:45,870
own tools of interest API directly and

62
00:02:45,870 --> 00:02:47,549
we've got Novell XT which is been other

63
00:02:47,549 --> 00:02:53,099
clients fall XD itself now briefly what

64
00:02:53,099 --> 00:02:55,500
it isn't so as I said earlier it's not

65
00:02:55,500 --> 00:02:59,370
another transition technology we only

66
00:02:59,370 --> 00:03:01,470
focus on containers we only those

67
00:03:01,470 --> 00:03:03,780
restrictive you can run inside them but

68
00:03:03,780 --> 00:03:07,890
it also gets you a lot more performance

69
00:03:07,890 --> 00:03:09,690
especially for like either workloads in

70
00:03:09,690 --> 00:03:11,790
the kind of stuff it's not a fork of

71
00:03:11,790 --> 00:03:14,430
Alexi it's by the same team that makes a

72
00:03:14,430 --> 00:03:17,160
taxi it's just a nice it was a nice way

73
00:03:17,160 --> 00:03:18,569
for us to reset cannibal excuse

74
00:03:18,569 --> 00:03:21,959
experience expose Alexi to like a multi

75
00:03:21,959 --> 00:03:26,549
host kind of thing and we do a bunch of

76
00:03:26,549 --> 00:03:30,930
things like it's image based it's not a

77
00:03:30,930 --> 00:03:33,269
fork of a taxi it is using lip LXE

78
00:03:33,269 --> 00:03:38,660
underneath it it steady support it isn't

79
00:03:39,840 --> 00:03:42,730
and it's not another application

80
00:03:42,730 --> 00:03:44,260
container manager Anderson that it's not

81
00:03:44,260 --> 00:03:45,790
another doctor it's not another racket

82
00:03:45,790 --> 00:03:47,710
we don't care about running a single

83
00:03:47,710 --> 00:03:49,390
process we don't care but what's running

84
00:03:49,390 --> 00:03:52,240
inside your container in any way we take

85
00:03:52,240 --> 00:03:54,850
full Linux distribution we exact it it's

86
00:03:54,850 --> 00:03:56,260
in its system and that's the extent of

87
00:03:56,260 --> 00:03:58,330
the interaction we've got with it the

88
00:03:58,330 --> 00:04:00,190
inside of the container so long it's

89
00:04:00,190 --> 00:04:01,690
because any process that we can exact

90
00:04:01,690 --> 00:04:03,820
we're perfectly happy with it we don't

91
00:04:03,820 --> 00:04:05,650
care what you're doing with your

92
00:04:05,650 --> 00:04:08,170
container so treat the same well you

93
00:04:08,170 --> 00:04:09,610
will do forget your machine in that

94
00:04:09,610 --> 00:04:14,320
regard because it's and I try and do a

95
00:04:14,320 --> 00:04:16,570
quick demo of what what we've got right

96
00:04:16,570 --> 00:04:19,988
now before James goes on talk about the

97
00:04:19,988 --> 00:04:30,100
OpenStack side of it so yeah so first

98
00:04:30,100 --> 00:04:31,360
thing on that machine I'm just gonna

99
00:04:31,360 --> 00:04:34,210
actually in Seoul next day I'm using the

100
00:04:34,210 --> 00:04:36,100
the snap package from a bin - we've got

101
00:04:36,100 --> 00:04:37,960
a bunch of different ways of spending it

102
00:04:37,960 --> 00:04:42,160
on different distros anyways it's

103
00:04:42,160 --> 00:04:45,700
installed it's poorly generating keys

104
00:04:45,700 --> 00:04:48,130
right now in the background what it's

105
00:04:48,130 --> 00:04:50,530
done already and so we can't just do the

106
00:04:50,530 --> 00:04:52,830
first configuration step which is

107
00:04:52,830 --> 00:04:56,410
configuring everything first I'm gonna

108
00:04:56,410 --> 00:04:58,690
use the affairs of a tweet and you pull

109
00:04:58,690 --> 00:05:02,080
for me called pull XD music on loop

110
00:05:02,080 --> 00:05:05,350
storage right now default size

111
00:05:05,350 --> 00:05:07,180
I do want XD to be available over the

112
00:05:07,180 --> 00:05:11,530
network use default address support give

113
00:05:11,530 --> 00:05:14,800
a password and the rest I don't care so

114
00:05:14,800 --> 00:05:16,180
nakshatras funding for networking and

115
00:05:16,180 --> 00:05:19,240
everything and selects it is configured

116
00:05:19,240 --> 00:05:21,280
and ready to roll first thing we'll do

117
00:05:21,280 --> 00:05:28,799
is just launch and open - 1604 container

118
00:05:28,860 --> 00:05:32,440
so it's gonna put a key grab the latest

119
00:05:32,440 --> 00:05:35,290
open - 1604 image for the architecture

120
00:05:35,290 --> 00:05:38,560
of that system which is 64-bit Intel and

121
00:05:38,560 --> 00:05:39,490
packet

122
00:05:39,490 --> 00:05:44,190
reach the metadata from it create a ZFS

123
00:05:44,190 --> 00:05:46,750
filesystem because I'm using ZFS of the

124
00:05:46,750 --> 00:05:48,880
backend for that article XD was so duper

125
00:05:48,880 --> 00:05:50,460
ifs and VM and a bunch of Allah

126
00:05:50,460 --> 00:05:52,740
backends but GFS in that case so it's

127
00:05:52,740 --> 00:05:54,960
creating a new ZFS file system which can

128
00:05:54,960 --> 00:05:56,400
then be cloned folio containers also

129
00:05:56,400 --> 00:05:57,810
that's making them really really quick

130
00:05:57,810 --> 00:05:59,790
to praise all right so that's integral

131
00:05:59,790 --> 00:06:02,130
to a container created now let's do an

132
00:06:02,130 --> 00:06:03,690
option Linux container just for good

133
00:06:03,690 --> 00:06:06,900
measure we've got community maintained

134
00:06:06,900 --> 00:06:10,650
images produced daily for a lot of Linux

135
00:06:10,650 --> 00:06:11,160
distributions

136
00:06:11,160 --> 00:06:13,890
I've got a point in oxygen instead the

137
00:06:13,890 --> 00:06:17,370
engine to Fedora CentOS Oracle

138
00:06:17,370 --> 00:06:23,250
Enterprise Linux polyfill with you so

139
00:06:23,250 --> 00:06:25,050
there's a good chance your distro and

140
00:06:25,050 --> 00:06:26,130
particular version of that this choice

141
00:06:26,130 --> 00:06:28,860
already available all right so those two

142
00:06:28,860 --> 00:06:32,550
containers created now that sadly

143
00:06:32,550 --> 00:06:35,220
doesn't require faith in screen but from

144
00:06:35,220 --> 00:06:39,500
a gazecki smart might Wow

145
00:06:40,250 --> 00:06:43,680
but we so we see do kind of running

146
00:06:43,680 --> 00:06:44,940
they've got the ipv4 address activity

147
00:06:44,940 --> 00:06:50,130
six address fine now can exact exact a

148
00:06:50,130 --> 00:06:54,570
shell inside the Ubuntu container which

149
00:06:54,570 --> 00:06:57,090
we've done can look at the process list

150
00:06:57,090 --> 00:06:59,970
inside there we basically see init

151
00:06:59,970 --> 00:07:01,860
process and the usual system deep

152
00:07:01,860 --> 00:07:04,170
suspects and cron and sshd in canisters

153
00:07:04,170 --> 00:07:08,880
but looks like a full system now we can

154
00:07:08,880 --> 00:07:14,010
go to cut things like CPU info like red

155
00:07:14,010 --> 00:07:16,460
lips

156
00:07:18,440 --> 00:07:23,400
Prague's drip alright so we see we've

157
00:07:23,400 --> 00:07:25,680
got 8 8 processors on there because

158
00:07:25,680 --> 00:07:27,200
that's what the physical machine earns

159
00:07:27,200 --> 00:07:29,910
disk space we've got the old system

160
00:07:29,910 --> 00:07:31,530
right now since the 42 gigs we saw

161
00:07:31,530 --> 00:07:34,650
earlier and memory we've got 12 gig

162
00:07:34,650 --> 00:07:36,780
that's what the host asked but we can

163
00:07:36,780 --> 00:07:40,200
change that live as we want so set we

164
00:07:40,200 --> 00:07:44,310
want to CPUs we want 1 gig of ram and we

165
00:07:44,310 --> 00:07:48,180
want at this limit of 5 gig go back

166
00:07:48,180 --> 00:07:51,210
inside the container disk space is done

167
00:07:51,210 --> 00:07:53,760
down to 5 gig memory is now down to one

168
00:07:53,760 --> 00:07:59,520
gig and a look at CPU in 4 we don't sue

169
00:07:59,520 --> 00:08:02,340
CPUs so that's resource management to

170
00:08:02,340 --> 00:08:04,650
flex day we can also do a resource block

171
00:08:04,650 --> 00:08:07,110
at your limit for I of two particular

172
00:08:07,110 --> 00:08:09,720
devices we can do better with limit for

173
00:08:09,720 --> 00:08:11,940
network all that kind of stuff all of

174
00:08:11,940 --> 00:08:14,130
that stuff can be applied live to our

175
00:08:14,130 --> 00:08:17,670
containers all right now we've had that

176
00:08:17,670 --> 00:08:20,370
second container after the next can

177
00:08:20,370 --> 00:08:22,700
create a snapshot or face current state

178
00:08:22,700 --> 00:08:25,620
with snapshot then we can get the shell

179
00:08:25,620 --> 00:08:27,900
inside there and let's installed

180
00:08:27,900 --> 00:08:33,120
something like a battery so ok but is

181
00:08:33,120 --> 00:08:34,980
installed we can create out to make sure

182
00:08:34,980 --> 00:08:38,159
that it is and now it's just we stole

183
00:08:38,159 --> 00:08:43,799
the snapshot container there yeah and if

184
00:08:43,799 --> 00:08:47,670
we query it's gone so you can snap it

185
00:08:47,670 --> 00:08:49,020
and revert extremely quickly

186
00:08:49,020 --> 00:08:50,430
it takes less than a second two

187
00:08:50,430 --> 00:08:51,780
snapshots less than a second to read

188
00:08:51,780 --> 00:08:56,340
about anything so that's

189
00:08:56,340 --> 00:08:58,860
like you're normal I'm sad story now

190
00:08:58,860 --> 00:09:01,650
legacy the alchemy 9 client tool can

191
00:09:01,650 --> 00:09:04,140
also deal with multiple hosts so I've

192
00:09:04,140 --> 00:09:06,570
got another server that I can install

193
00:09:06,570 --> 00:09:08,640
get back side we Alexei remote add to

194
00:09:08,640 --> 00:09:12,210
add a remote server that adds it to the

195
00:09:12,210 --> 00:09:14,670
list of the remotes I've got in my

196
00:09:14,670 --> 00:09:19,020
client and I can now do things like list

197
00:09:19,020 --> 00:09:20,850
what's running on that remote server

198
00:09:20,850 --> 00:09:25,010
just noting and say I want to start a

199
00:09:25,010 --> 00:09:29,220
alpine container on there that's done I

200
00:09:29,220 --> 00:09:31,980
can get a shell exactly the same way

201
00:09:31,980 --> 00:09:33,710
that's all about Network this time and

202
00:09:33,710 --> 00:09:36,210
let's create some random file on our

203
00:09:36,210 --> 00:09:41,610
system and part of that container there

204
00:09:41,610 --> 00:09:45,240
we go I can now move that container to

205
00:09:45,240 --> 00:09:49,290
my other host some just transferred over

206
00:09:49,290 --> 00:09:50,880
the network it did the ZFS and receive

207
00:09:50,880 --> 00:09:53,490
optimized file transfer and we see it's

208
00:09:53,490 --> 00:09:55,710
now on the same machine that's running

209
00:09:55,710 --> 00:09:59,040
the Arch Linux and Ubuntu container and

210
00:09:59,040 --> 00:10:02,820
I can just start it again here get my

211
00:10:02,820 --> 00:10:07,040
shell in there and the file is there

212
00:10:07,040 --> 00:10:10,459
asking questions

213
00:10:12,170 --> 00:10:22,120
yeah maybe yeah I can try the points

214
00:10:25,060 --> 00:10:28,300
let's see

215
00:10:30,450 --> 00:10:39,300
does that do last thing either they

216
00:10:39,300 --> 00:10:40,470
always one other question

217
00:10:40,470 --> 00:10:42,450
ouch team wasn't change the contrast

218
00:10:42,450 --> 00:10:50,010
yeah so the question is could I live my

219
00:10:50,010 --> 00:10:52,140
great containers between hosts right you

220
00:10:52,140 --> 00:10:53,520
can like my great containers between

221
00:10:53,520 --> 00:10:55,260
hosts with Flex D yes we do integrate

222
00:10:55,260 --> 00:10:57,390
with creo we've been doing some work on

223
00:10:57,390 --> 00:11:00,810
it the fact is we've not been actively

224
00:11:00,810 --> 00:11:02,400
maintaining crew it's like a better

225
00:11:02,400 --> 00:11:06,120
Rita kind of state feature where if we

226
00:11:06,120 --> 00:11:08,700
do have interests interested customers

227
00:11:08,700 --> 00:11:11,220
will be happy to ensure that your Pasco

228
00:11:11,220 --> 00:11:13,620
use case works but live migration in

229
00:11:13,620 --> 00:11:15,180
Linux means you need to be able to sell

230
00:11:15,180 --> 00:11:16,800
your eyes or the kernel state of your

231
00:11:16,800 --> 00:11:20,370
code which is rather tricky and so we

232
00:11:20,370 --> 00:11:21,480
can probably make it work for your

233
00:11:21,480 --> 00:11:22,920
particular use case if you really care

234
00:11:22,920 --> 00:11:24,630
about it but making it watch and rightly

235
00:11:24,630 --> 00:11:26,370
for everyone is something we just don't

236
00:11:26,370 --> 00:11:29,550
dive enough people to get done

237
00:11:29,550 --> 00:11:31,650
unfortunately but yes we do integrate

238
00:11:31,650 --> 00:11:33,630
with for you if who you works then you

239
00:11:33,630 --> 00:11:35,010
can like migrate containers are there

240
00:11:35,010 --> 00:11:36,450
running it simply if the prisoner is

241
00:11:36,450 --> 00:11:37,770
running and you Alexi move it's gonna

242
00:11:37,770 --> 00:11:41,790
say hi state move it restore it all

243
00:11:41,790 --> 00:11:44,520
right I'm gonna try and do it as that

244
00:11:44,520 --> 00:11:46,020
would really really quickly before it's

245
00:11:46,020 --> 00:11:49,380
James turn on my local laptop one thing

246
00:11:49,380 --> 00:11:51,000
that we can do is also device

247
00:11:51,000 --> 00:11:52,350
pass-through so I've got another

248
00:11:52,350 --> 00:11:59,190
container called Android C in which I

249
00:11:59,190 --> 00:12:01,290
can do a to be devices it's gonna show

250
00:12:01,290 --> 00:12:04,260
me that I've got nothing there we go

251
00:12:04,260 --> 00:12:08,520
I can add a USB device to it it will

252
00:12:08,520 --> 00:12:09,900
still show me that I've got nothing

253
00:12:09,900 --> 00:12:13,080
because my phone's not plugged in so now

254
00:12:13,080 --> 00:12:15,690
I plug my phone and unlock my phone and

255
00:12:15,690 --> 00:12:18,570
I run ADB devices again now my USB

256
00:12:18,570 --> 00:12:19,770
device has been passed into the

257
00:12:19,770 --> 00:12:22,410
container and I can get in adb shell and

258
00:12:22,410 --> 00:12:25,950
we can see that that's bus the other

259
00:12:25,950 --> 00:12:28,440
container that the cellphone have been

260
00:12:28,440 --> 00:12:31,050
passed in into the container

261
00:12:31,050 --> 00:12:33,560
so we we also do a for GPUs you can pass

262
00:12:33,560 --> 00:12:36,000
the GPU into the container if you want

263
00:12:36,000 --> 00:12:38,070
and the right devyn video or the FDR

264
00:12:38,070 --> 00:12:39,180
right nodes would be automatically

265
00:12:39,180 --> 00:12:43,860
passed for you exercise so really

266
00:12:43,860 --> 00:12:46,440
briefly before we go to Nevada XD just

267
00:12:46,440 --> 00:12:49,110
quick recap legs knee operates on system

268
00:12:49,110 --> 00:12:50,490
container so we run full dinner to these

269
00:12:50,490 --> 00:12:52,230
shows exactly like a virtual machine but

270
00:12:52,230 --> 00:12:54,660
using containers on Linux with a really

271
00:12:54,660 --> 00:12:57,120
simple REST API to drive all of that you

272
00:12:57,120 --> 00:13:00,480
could drive basket I did curl pretty

273
00:13:00,480 --> 00:13:03,149
easily we do daily images of mostly

274
00:13:03,149 --> 00:13:07,200
notes distributions and Lexie itself is

275
00:13:07,200 --> 00:13:08,880
available on Google bunch of these shows

276
00:13:08,880 --> 00:13:12,270
obviously main focus will burn too but

277
00:13:12,270 --> 00:13:13,500
it's available on their games through a

278
00:13:13,500 --> 00:13:15,779
snap it's available now clinics in show

279
00:13:15,779 --> 00:13:17,399
user repository and we've got native

280
00:13:17,399 --> 00:13:19,770
packages in trend to and alpine linux as

281
00:13:19,770 --> 00:13:21,120
well as someone's maintaining some

282
00:13:21,120 --> 00:13:23,630
packages and user repository for fedora

283
00:13:23,630 --> 00:13:29,220
that's it on my site thank you right and

284
00:13:29,220 --> 00:13:33,770
for the demo you're just off to do this

285
00:13:33,770 --> 00:13:37,709
okay so Stefan's gone into machine

286
00:13:37,709 --> 00:13:39,209
containers and how we manage them with

287
00:13:39,209 --> 00:13:40,800
leg ste so I'm going to talk about how

288
00:13:40,800 --> 00:13:43,260
we've integrated likes tea into

289
00:13:43,260 --> 00:13:47,100
OpenStack wither with a Nova driver okay

290
00:13:47,100 --> 00:13:50,310
so if we we look at a KBM got a number

291
00:13:50,310 --> 00:13:51,959
of guests running here we can pretty

292
00:13:51,959 --> 00:13:53,520
much simulate exactly the same thing

293
00:13:53,520 --> 00:13:56,160
with likes tea let's get some much

294
00:13:56,160 --> 00:13:58,620
lighter weight there's no simulated

295
00:13:58,620 --> 00:14:01,350
firmware bios you know it's running on

296
00:14:01,350 --> 00:14:02,760
the host kernel and it's just resource

297
00:14:02,760 --> 00:14:03,540
control via

298
00:14:03,540 --> 00:14:05,850
next and the best kernel mechanisms

299
00:14:05,850 --> 00:14:08,070
available to it and we can slide

300
00:14:08,070 --> 00:14:09,510
OpenStack between those things to

301
00:14:09,510 --> 00:14:14,790
provide a management layer so because

302
00:14:14,790 --> 00:14:17,040
Lex tea container is a machine container

303
00:14:17,040 --> 00:14:19,829
it has very similar semantics to a lip

304
00:14:19,829 --> 00:14:22,500
KVM virtual machine so all they're all

305
00:14:22,500 --> 00:14:24,930
the things you'd expect to do on an

306
00:14:24,930 --> 00:14:26,880
OpenStack cloud to kbm instance you can

307
00:14:26,880 --> 00:14:29,399
do pretty much all of them to lxd

308
00:14:29,399 --> 00:14:31,260
container running on a cloud as well so

309
00:14:31,260 --> 00:14:32,970
the kind of normal life cycle management

310
00:14:32,970 --> 00:14:37,160
for managing content machines and also

311
00:14:37,160 --> 00:14:40,020
resizing snapshotting plugging into

312
00:14:40,020 --> 00:14:42,110
virtualized networking so whatever SDA

313
00:14:42,110 --> 00:14:44,029
using on OpenStack we can pretty much

314
00:14:44,029 --> 00:14:46,519
plug into most things these days and we

315
00:14:46,519 --> 00:14:48,140
plug-in using the same semantics as a

316
00:14:48,140 --> 00:14:50,810
live kbm driver but without the the

317
00:14:50,810 --> 00:14:52,940
vertigo a layer and the the overhead

318
00:14:52,940 --> 00:14:57,310
that brings as well we can also apply

319
00:14:57,310 --> 00:14:59,480
resource constraints containers so

320
00:14:59,480 --> 00:15:01,670
Stefan demonstrated doing that on the

321
00:15:01,670 --> 00:15:03,560
fly by reducing the number of processor

322
00:15:03,560 --> 00:15:05,360
memories down but we can we basically

323
00:15:05,360 --> 00:15:07,610
can take the flavor mechanism and

324
00:15:07,610 --> 00:15:09,110
OpenStack and we can apply that to

325
00:15:09,110 --> 00:15:11,300
containers that they created so memory

326
00:15:11,300 --> 00:15:17,180
CPU we like woz to i/o operations and in

327
00:15:17,180 --> 00:15:18,290
the same way we can apply uh source

328
00:15:18,290 --> 00:15:20,630
controls to the the resources on the

329
00:15:20,630 --> 00:15:22,519
machine that containers going to consume

330
00:15:22,519 --> 00:15:27,380
we can also secure the machines with the

331
00:15:27,380 --> 00:15:29,209
standard security group mechanisms

332
00:15:29,209 --> 00:15:31,220
available in OpenStack so their IP

333
00:15:31,220 --> 00:15:33,140
tables firewalls or native open V switch

334
00:15:33,140 --> 00:15:35,060
fire warning work worked just fine with

335
00:15:35,060 --> 00:15:37,100
a NEX T container managed by up the

336
00:15:37,100 --> 00:15:40,700
stack as the perk container and we can

337
00:15:40,700 --> 00:15:43,480
Mike migrate containers between hosts so

338
00:15:43,480 --> 00:15:46,579
Stefan demonstrated this at the Lexi

339
00:15:46,579 --> 00:15:48,170
level but we we can plug into the

340
00:15:48,170 --> 00:15:50,329
migrate API and over staff as well and

341
00:15:50,329 --> 00:15:54,380
we can also do a kind of neat trick of

342
00:15:54,380 --> 00:15:58,010
exposing the entire hypervisor as what

343
00:15:58,010 --> 00:15:59,720
we call an exclusive machine container

344
00:15:59,720 --> 00:16:02,360
so it gives you the whole machine but

345
00:16:02,360 --> 00:16:03,890
with the the container abstraction layer

346
00:16:03,890 --> 00:16:05,720
around the processes that the the user

347
00:16:05,720 --> 00:16:08,060
is going to be consuming on the cloud so

348
00:16:08,060 --> 00:16:08,959
they're getting the Bama performance

349
00:16:08,959 --> 00:16:11,480
they're getting the benefit of being

350
00:16:11,480 --> 00:16:13,519
able to plug into whatever Sdn is used

351
00:16:13,519 --> 00:16:15,620
on the cloud but without the operational

352
00:16:15,620 --> 00:16:17,420
overhead of having to give someone a

353
00:16:17,420 --> 00:16:19,730
physical server and the the complexity

354
00:16:19,730 --> 00:16:22,100
that brings in terms of compromising

355
00:16:22,100 --> 00:16:23,870
firmware compromising bios and the

356
00:16:23,870 --> 00:16:25,670
hygiene you'd have to do as a cloud

357
00:16:25,670 --> 00:16:27,829
operator to be able to manage Hardware

358
00:16:27,829 --> 00:16:30,969
that you provide to tenants

359
00:16:31,129 --> 00:16:34,439
okay so I'm not doing a live demo a

360
00:16:34,439 --> 00:16:40,170
lifestyle window and I pre-recorded mind

361
00:16:40,170 --> 00:16:41,699
this morning because I was spinning

362
00:16:41,699 --> 00:16:45,329
chicken okay so I've got a we've got a

363
00:16:45,329 --> 00:16:48,600
mobile XD deployment in one of our laps

364
00:16:48,600 --> 00:16:50,490
so we're just gonna SSH into that and

365
00:16:50,490 --> 00:16:55,259
and take a look at it right so the

366
00:16:55,259 --> 00:16:57,089
normal travel about getting access to

367
00:16:57,089 --> 00:16:59,069
your cloud let's take a look at the the

368
00:16:59,069 --> 00:17:01,050
services we've got running this is a

369
00:17:01,050 --> 00:17:02,879
three compute node cloud we've got three

370
00:17:02,879 --> 00:17:04,919
hypervisors and our control plane is

371
00:17:04,919 --> 00:17:06,480
actually in Lexi containers on top of

372
00:17:06,480 --> 00:17:08,309
those as well I'm not going to talk

373
00:17:08,309 --> 00:17:10,260
about that today so let's have a look at

374
00:17:10,260 --> 00:17:12,809
one of the hypervisors you can see about

375
00:17:12,809 --> 00:17:14,279
half way down on the second column this

376
00:17:14,279 --> 00:17:16,319
is al XD hypervisor type rather than a

377
00:17:16,319 --> 00:17:18,000
qu hypervisor type which you should what

378
00:17:18,000 --> 00:17:21,029
you typically see with libvirt we also

379
00:17:21,029 --> 00:17:22,319
have a look at the Neutron Neutron

380
00:17:22,319 --> 00:17:24,119
agents running across the cloud and

381
00:17:24,119 --> 00:17:25,679
you'll see that although that's wrapped

382
00:17:25,679 --> 00:17:27,059
a little bit we can see the open V

383
00:17:27,059 --> 00:17:29,460
switch agents and the normal l3 and DHCP

384
00:17:29,460 --> 00:17:31,890
agents that we run on network nodes so

385
00:17:31,890 --> 00:17:33,419
for my kind of topology perspective the

386
00:17:33,419 --> 00:17:35,610
cloud looks very familiar to anybody

387
00:17:35,610 --> 00:17:37,710
who's ever deployed a Lipper kbm based

388
00:17:37,710 --> 00:17:40,020
cloud so ain't got any instances running

389
00:17:40,020 --> 00:17:42,360
at the moment so we'll we'll boot a

390
00:17:42,360 --> 00:17:44,309
couple of instances were a small one and

391
00:17:44,309 --> 00:17:49,919
a large one I'm too slow obviously here

392
00:17:49,919 --> 00:17:52,159
we go

393
00:17:53,030 --> 00:17:54,470
and they should be running pretty

394
00:17:54,470 --> 00:17:59,120
quickly but I can't type fast enough

395
00:17:59,120 --> 00:18:01,000
obviously

396
00:18:01,000 --> 00:18:03,470
why doesn't ASCII similar trim trim the

397
00:18:03,470 --> 00:18:06,080
gaps but yeah so those are those

398
00:18:06,080 --> 00:18:08,180
instances of booting and there should be

399
00:18:08,180 --> 00:18:09,320
both active from running

400
00:18:09,320 --> 00:18:11,840
they're just plugged into a private

401
00:18:11,840 --> 00:18:13,460
network which in this case is a GRE

402
00:18:13,460 --> 00:18:15,860
overlay network on the backend so we're

403
00:18:15,860 --> 00:18:18,620
using the ml to open V switch plug in

404
00:18:18,620 --> 00:18:20,720
for the networking on the cloud so we

405
00:18:20,720 --> 00:18:22,190
need to add some floating IP east about

406
00:18:22,190 --> 00:18:25,160
to access these instances so last octet

407
00:18:25,160 --> 00:18:27,860
there is 161 for the small and should be

408
00:18:27,860 --> 00:18:31,250
140 when we get there for the large

409
00:18:31,250 --> 00:18:33,670
instance

410
00:18:37,770 --> 00:18:39,720
and now we should be able to access them

411
00:18:39,720 --> 00:18:43,920
oh no we went I haven't done the

412
00:18:43,920 --> 00:18:44,970
security group bit yeah

413
00:18:44,970 --> 00:18:47,190
so what I know we can't ping the

414
00:18:47,190 --> 00:18:48,870
instance because it's completely fire

415
00:18:48,870 --> 00:18:51,690
walled off from the outside world so do

416
00:18:51,690 --> 00:18:53,130
something look at the security group so

417
00:18:53,130 --> 00:18:54,480
we've got the standard egress security

418
00:18:54,480 --> 00:18:56,730
group bills that all profiles come with

419
00:18:56,730 --> 00:18:59,790
they'd open stack so we'll add ping and

420
00:18:59,790 --> 00:19:03,600
SSH ingress from the outside worlds into

421
00:19:03,600 --> 00:19:05,429
that into the default group and then we

422
00:19:05,429 --> 00:19:06,780
should be able to access the instances

423
00:19:06,780 --> 00:19:09,200
just fine

424
00:19:15,100 --> 00:19:17,320
okay so we're getting a ping from it so

425
00:19:17,320 --> 00:19:20,730
just check the other one as well

426
00:19:23,710 --> 00:19:26,250
and

427
00:19:26,480 --> 00:19:29,470
let's log into one and have a look so

428
00:19:29,470 --> 00:19:32,420
I've looked at the the CPU info just see

429
00:19:32,420 --> 00:19:35,330
we've got a can't see how many cause

430
00:19:35,330 --> 00:19:36,860
we've got there is this this monster

431
00:19:36,860 --> 00:19:40,430
small it's got one and it's got two Giga

432
00:19:40,430 --> 00:19:42,890
memory which is off the top yeah I got

433
00:19:42,890 --> 00:19:45,200
this one earlier so no it's still off

434
00:19:45,200 --> 00:19:49,250
the top so it's got to Google memory and

435
00:19:49,250 --> 00:19:51,590
you can see the process listing there's

436
00:19:51,590 --> 00:19:53,450
much trim down as there's no kernel

437
00:19:53,450 --> 00:19:54,980
process is running but all the normal

438
00:19:54,980 --> 00:19:57,230
things you'd expect in a full system

439
00:19:57,230 --> 00:19:59,810
like SSH and syslog and cron and all the

440
00:19:59,810 --> 00:20:01,190
other things you need to operate in

441
00:20:01,190 --> 00:20:03,710
instance are there can I ask your

442
00:20:03,710 --> 00:20:04,820
question in the end because this won't

443
00:20:04,820 --> 00:20:07,510
wait for me unfortunately

444
00:20:08,260 --> 00:20:10,670
an IP address is being presented by the

445
00:20:10,670 --> 00:20:12,320
Lex deal and we can see the private IP

446
00:20:12,320 --> 00:20:15,110
address there that Neutron is allocated

447
00:20:15,110 --> 00:20:16,670
for the instance and we'll have a

448
00:20:16,670 --> 00:20:18,890
similar check on on the large instance

449
00:20:18,890 --> 00:20:22,190
as well we might get to see more CPU and

450
00:20:22,190 --> 00:20:24,940
promote information here by let's see

451
00:20:24,940 --> 00:20:29,900
notice the numbers off the top but again

452
00:20:29,900 --> 00:20:31,850
this is this is an 8 gig machine with

453
00:20:31,850 --> 00:20:34,880
with 4 cores rather than the wrong

454
00:20:34,880 --> 00:20:36,530
ticket machine with one core that the

455
00:20:36,530 --> 00:20:41,570
other one happened and some of the

456
00:20:41,570 --> 00:20:43,850
process listing as well so hopefully

457
00:20:43,850 --> 00:20:45,710
that gives you a flavor that like using

458
00:20:45,710 --> 00:20:49,220
Lexton machine container on an OpenStack

459
00:20:49,220 --> 00:20:50,630
cloud is of grace and their experience

460
00:20:50,630 --> 00:20:51,950
to what you would expect would live

461
00:20:51,950 --> 00:20:54,500
Liberty a VM there are still some gaps

462
00:20:54,500 --> 00:20:56,990
storage is still not a strong point we

463
00:20:56,990 --> 00:20:59,900
have basic support for the cinder I

464
00:20:59,900 --> 00:21:00,730
scuzzy

465
00:21:00,730 --> 00:21:03,620
driver and we're working on support for

466
00:21:03,620 --> 00:21:05,720
a safe driver this cycle as well so that

467
00:21:05,720 --> 00:21:07,700
should be available in their car to

468
00:21:07,700 --> 00:21:08,930
release towards this end of this month

469
00:21:08,930 --> 00:21:10,880
so we'll quickly talk about benchmarks

470
00:21:10,880 --> 00:21:12,860
so Stefan allude to the fact that you're

471
00:21:12,860 --> 00:21:14,350
getting very much bare metal performance

472
00:21:14,350 --> 00:21:16,760
so I've got a few benchmarks to go

473
00:21:16,760 --> 00:21:18,980
through just three this is the Hadoop

474
00:21:18,980 --> 00:21:21,890
terasort benchmark and this is using the

475
00:21:21,890 --> 00:21:23,120
exclusive machine stuff I was talking

476
00:21:23,120 --> 00:21:24,410
about earlier where we give a full

477
00:21:24,410 --> 00:21:26,870
machine to to a container or KVM

478
00:21:26,870 --> 00:21:28,790
instance so we looked at the total chip

479
00:21:28,790 --> 00:21:31,220
runtime and bare metal and low noville

480
00:21:31,220 --> 00:21:33,350
XD come very very close I think that if

481
00:21:33,350 --> 00:21:35,110
there is mainly due to use of

482
00:21:35,110 --> 00:21:36,670
the networking and the overhead that

483
00:21:36,670 --> 00:21:39,010
brings in at the networking layer gave

484
00:21:39,010 --> 00:21:41,080
him took quite a bit longer a number of

485
00:21:41,080 --> 00:21:43,630
failed jobs that had to be retried so

486
00:21:43,630 --> 00:21:46,480
that they did push things out and I've

487
00:21:46,480 --> 00:21:49,450
got a few latency things as well so some

488
00:21:49,450 --> 00:21:52,929
stress has lots of lots of small writers

489
00:21:52,929 --> 00:21:54,429
so we can see right right lane and

490
00:21:54,429 --> 00:21:56,320
Ceylon XD compared to K BM is much much

491
00:21:56,320 --> 00:21:58,660
lower and again that results in much

492
00:21:58,660 --> 00:22:01,330
much higher throughput for a cassandra

493
00:22:01,330 --> 00:22:04,690
stress benchmark okay so I think we've

494
00:22:04,690 --> 00:22:06,220
got about three and a half minutes left

495
00:22:06,220 --> 00:22:07,780
now so if anybody's got any questions

496
00:22:07,780 --> 00:22:09,490
please put your hand up and I'll repeat

497
00:22:09,490 --> 00:22:11,669
them

498
00:22:17,940 --> 00:22:20,530
idiot so the question is can you use

499
00:22:20,530 --> 00:22:23,110
less d2p in a container to a particular

500
00:22:23,110 --> 00:22:25,270
set of processes processes oh sorry

501
00:22:25,270 --> 00:22:27,730
cause on the host so see people's doing

502
00:22:27,730 --> 00:22:31,840
cpu infinity so yes you absolutely can

503
00:22:31,840 --> 00:22:34,660
the cpu limits we said if you just give

504
00:22:34,660 --> 00:22:36,850
us a straight number of CPUs we will do

505
00:22:36,850 --> 00:22:38,470
load balancing for you but if you give

506
00:22:38,470 --> 00:22:41,710
us a range say 1 through 4 or 1 comma 3

507
00:22:41,710 --> 00:22:44,620
to 4 or something that we will pin you

508
00:22:44,620 --> 00:22:46,570
on those particular of course yes so the

509
00:22:46,570 --> 00:22:48,400
second part of that is that can you do

510
00:22:48,400 --> 00:22:50,530
it through open stack yet not yet but

511
00:22:50,530 --> 00:22:53,920
when we will support the full set of

512
00:22:53,920 --> 00:22:56,050
flavor properties that allow you to do

513
00:22:56,050 --> 00:22:57,250
that probably by the end of the pike

514
00:22:57,250 --> 00:23:01,200
cycle so number 6 months yet

515
00:23:13,540 --> 00:23:16,280
first question is do you support

516
00:23:16,280 --> 00:23:21,860
container resize yes so yeah so you're

517
00:23:21,860 --> 00:23:23,150
obviously legacy as I was showing you

518
00:23:23,150 --> 00:23:25,610
can set everything live and that means

519
00:23:25,610 --> 00:23:27,350
that you can do resize pretty easily

520
00:23:27,350 --> 00:23:29,030
yeah and you can hop bug as well so if

521
00:23:29,030 --> 00:23:30,680
you want to add additional ports to an

522
00:23:30,680 --> 00:23:33,260
instance you can use the standard

523
00:23:33,260 --> 00:23:35,390
semantics via the OpenStack API to be

524
00:23:35,390 --> 00:23:37,280
able to add additional Neutron ports to

525
00:23:37,280 --> 00:23:39,350
a container and that's done as a whole

526
00:23:39,350 --> 00:23:41,150
plug event and has picked up is in the

527
00:23:41,150 --> 00:23:42,590
container appropriately and it's ago the

528
00:23:42,590 --> 00:23:44,990
question was about whether we're support

529
00:23:44,990 --> 00:23:47,990
to the OCI initiative we don't because

530
00:23:47,990 --> 00:23:49,700
it they mostly focus on application

531
00:23:49,700 --> 00:23:51,140
containers they don't care about running

532
00:23:51,140 --> 00:23:52,610
a full distro

533
00:23:52,610 --> 00:23:54,830
so it's not been a great fit in general

534
00:23:54,830 --> 00:23:56,630
we've been for Lake City specifically

535
00:23:56,630 --> 00:23:58,040
we've been looking at some but like the

536
00:23:58,040 --> 00:24:00,200
EOC ISDN and some of those aspects that

537
00:24:00,200 --> 00:24:02,900
could be useful for us but the the image

538
00:24:02,900 --> 00:24:05,870
side of it not but it's not a good fit

539
00:24:05,870 --> 00:24:07,250
because we care about like a full

540
00:24:07,250 --> 00:24:08,240
pristine

541
00:24:08,240 --> 00:24:10,040
destroy image coming from the vendor as

542
00:24:10,040 --> 00:24:12,140
opposed to having image source and

543
00:24:12,140 --> 00:24:16,100
people doing layers and stuff that is

544
00:24:16,100 --> 00:24:17,660
one at the back and then you're next

545
00:24:17,660 --> 00:24:19,930
yeah

546
00:24:28,970 --> 00:24:31,140
okay so the question is the device

547
00:24:31,140 --> 00:24:32,850
passed through was not using iommu

548
00:24:32,850 --> 00:24:34,650
no it's not because we're using the same

549
00:24:34,650 --> 00:24:36,770
camera as the host so we're not passing

550
00:24:36,770 --> 00:24:39,299
you can't pass a PCI device into a

551
00:24:39,299 --> 00:24:40,679
container just like you can't load oh

552
00:24:40,679 --> 00:24:41,940
come on what you're inside the container

553
00:24:41,940 --> 00:24:44,340
what who you do is the kind of module

554
00:24:44,340 --> 00:24:46,650
itself runs on the host in this case was

555
00:24:46,650 --> 00:24:48,870
giving me def burst USB devices and

556
00:24:48,870 --> 00:24:49,980
those were being passed into the

557
00:24:49,980 --> 00:24:51,929
container same thing when you pass the

558
00:24:51,929 --> 00:24:54,419
GPU the Nvidia driver will be installed

559
00:24:54,419 --> 00:24:56,010
on the host would get to dev and Vijay

560
00:24:56,010 --> 00:24:58,890
devices then XT would pass whichever of

561
00:24:58,890 --> 00:25:00,539
those dev and media devices you need for

562
00:25:00,539 --> 00:25:02,960
the container to use this sounded quite

563
00:25:02,960 --> 00:25:05,340
something like an SSRI of e virtual

564
00:25:05,340 --> 00:25:07,289
function and that it it presents is a

565
00:25:07,289 --> 00:25:08,909
host device and that can be mapped into

566
00:25:08,909 --> 00:25:11,450
the container

567
00:25:16,300 --> 00:25:20,000
so the questions about the risk of DNA

568
00:25:20,000 --> 00:25:21,860
attacks against the host if you do pass

569
00:25:21,860 --> 00:25:23,390
a device that gets you access to the

570
00:25:23,390 --> 00:25:25,480
entire host memory yes we can absolutely

571
00:25:25,480 --> 00:25:29,360
redo memory you have to be careful as to

572
00:25:29,360 --> 00:25:30,890
what you pass into the container all

573
00:25:30,890 --> 00:25:33,170
right thank that if anyone wants we've

574
00:25:33,170 --> 00:25:34,940
got a bunch of stickers here that you

575
00:25:34,940 --> 00:25:36,770
can come in correct if you're collecting

576
00:25:36,770 --> 00:25:39,530
stickers and thank you very much

577
00:25:39,530 --> 00:25:48,119
[Applause]

