1
00:00:00,000 --> 00:00:02,329
all right

2
00:00:10,210 --> 00:00:13,370
there we go

3
00:00:13,370 --> 00:00:14,769
[Music]

4
00:00:14,769 --> 00:00:18,230
DJ here's going started tell us all

5
00:00:18,230 --> 00:00:25,970
those never over cure this light doesn't

6
00:00:25,970 --> 00:00:27,169
mean anything but I think it's one of

7
00:00:27,169 --> 00:00:30,649
the funniest things in the world if you

8
00:00:30,649 --> 00:00:31,939
do need to make many copies of an IP

9
00:00:31,939 --> 00:00:33,440
packet you have to press much harder

10
00:00:33,440 --> 00:00:38,300
otherwise it won't work I'm Tom Jones

11
00:00:38,300 --> 00:00:41,989
I'm a researcher at the I'm a researcher

12
00:00:41,989 --> 00:00:43,789
at the University of Aberdeen I work on

13
00:00:43,789 --> 00:00:47,059
Internet transports the neat project

14
00:00:47,059 --> 00:00:49,039
that I work on is trying to build a new

15
00:00:49,039 --> 00:00:52,910
API for accessing the network with this

16
00:00:52,910 --> 00:00:54,370
API we're trying to abstract away

17
00:00:54,370 --> 00:00:56,210
transport to make it nicer for

18
00:00:56,210 --> 00:00:58,190
programmers so all of you guys so you

19
00:00:58,190 --> 00:00:59,690
can build applications without worrying

20
00:00:59,690 --> 00:01:00,920
too much about network details

21
00:01:00,920 --> 00:01:03,769
themselves I'm going to talk about QoS

22
00:01:03,769 --> 00:01:05,680
and deployability

23
00:01:05,680 --> 00:01:09,380
yeah so this is it everything in a

24
00:01:09,380 --> 00:01:12,699
picture for now yeah

25
00:01:14,440 --> 00:01:18,740
it's on both of my talks today and so

26
00:01:18,740 --> 00:01:20,060
before we could talk about us we need to

27
00:01:20,060 --> 00:01:22,730
talk about packets the simple model is

28
00:01:22,730 --> 00:01:26,690
exposed by the socket API and a lot of

29
00:01:26,690 --> 00:01:29,810
programming API is is that we have our

30
00:01:29,810 --> 00:01:31,610
client we connect through to another

31
00:01:31,610 --> 00:01:35,869
side and then we send data and then we

32
00:01:35,869 --> 00:01:38,180
get a stream of packets that goes all

33
00:01:38,180 --> 00:01:39,890
the way through and it all works and

34
00:01:39,890 --> 00:01:41,360
it's all great and there's no issues

35
00:01:41,360 --> 00:01:41,840
with this

36
00:01:41,840 --> 00:01:45,759
in reality though we're connected via

37
00:01:45,759 --> 00:01:48,470
Reuter and on this reel there's probably

38
00:01:48,470 --> 00:01:50,960
not this route is connected to Rousseau

39
00:01:50,960 --> 00:01:54,320
at your ISP the traffic in your ISP is

40
00:01:54,320 --> 00:01:56,690
trunk through MPLS it goes all the way

41
00:01:56,690 --> 00:01:58,040
through and eventually it will propagate

42
00:01:58,040 --> 00:02:00,380
out to a routes or the other side each

43
00:02:00,380 --> 00:02:03,410
of these rooters is a middle box for all

44
00:02:03,410 --> 00:02:06,250
of these readers we send traffic to them

45
00:02:06,250 --> 00:02:09,350
they receive and buffer the traffic and

46
00:02:09,350 --> 00:02:12,709
as they take in traffic and as they

47
00:02:12,709 --> 00:02:16,370
buffer it they have to make many copies

48
00:02:16,370 --> 00:02:18,410
as they make copies they make many

49
00:02:18,410 --> 00:02:21,470
modifications they might take shortcuts

50
00:02:21,470 --> 00:02:23,090
to accelerate this process so they can

51
00:02:23,090 --> 00:02:26,330
have them more stuff all of these middle

52
00:02:26,330 --> 00:02:28,370
boxes on the internet can cause trouble

53
00:02:28,370 --> 00:02:32,000
and we try to deploy something new and

54
00:02:32,000 --> 00:02:34,130
the use of qsr on the Internet is is

55
00:02:34,130 --> 00:02:39,680
somehow quite a new idea right now the

56
00:02:39,680 --> 00:02:42,470
way packets are treated without any sort

57
00:02:42,470 --> 00:02:44,140
of QoS considerations it's called the

58
00:02:44,140 --> 00:02:46,850
that is the default forwarding behavior

59
00:02:46,850 --> 00:02:48,650
it's hard to talk about the default

60
00:02:48,650 --> 00:02:51,250
where there's no QoS for the qf+

61
00:02:51,250 --> 00:02:53,690
there we think of default forwarding as

62
00:02:53,690 --> 00:02:55,850
everybody is the same the same way we

63
00:02:55,850 --> 00:02:56,870
want to be treated on the Metro

64
00:02:56,870 --> 00:02:58,730
everybody gets on the train everybody

65
00:02:58,730 --> 00:02:59,450
gets off the train

66
00:02:59,450 --> 00:03:01,519
there's no priority for any special

67
00:03:01,519 --> 00:03:03,049
people there's no separate

68
00:03:03,049 --> 00:03:05,540
classifications there's no difference

69
00:03:05,540 --> 00:03:09,380
between the packets we sent in reality

70
00:03:09,380 --> 00:03:11,060
we have packets that we do want to be

71
00:03:11,060 --> 00:03:13,640
treated differently much of the web

72
00:03:13,640 --> 00:03:16,010
workloads we do might be best effort

73
00:03:16,010 --> 00:03:17,420
because we don't particularly care about

74
00:03:17,420 --> 00:03:19,250
it being treated better or worse but

75
00:03:19,250 --> 00:03:20,959
when we start going to do real-time

76
00:03:20,959 --> 00:03:23,510
voice where we have hard latency

77
00:03:23,510 --> 00:03:25,800
requirements for the data

78
00:03:25,800 --> 00:03:28,080
we want it to have preferential

79
00:03:28,080 --> 00:03:30,660
treatment in the Q's and Reuters so that

80
00:03:30,660 --> 00:03:32,460
if there is a large queue we can get

81
00:03:32,460 --> 00:03:34,920
through a slightly faster but maybe

82
00:03:34,920 --> 00:03:36,210
there's a trade-off for this where I try

83
00:03:36,210 --> 00:03:37,800
where our packets get dropped more

84
00:03:37,800 --> 00:03:40,980
frequently and there's also the behavior

85
00:03:40,980 --> 00:03:43,680
where maybe we want a lower level of

86
00:03:43,680 --> 00:03:45,900
classification for traffic maybe we want

87
00:03:45,900 --> 00:03:48,360
to use the network when it's not being

88
00:03:48,360 --> 00:03:49,950
used as much as possible

89
00:03:49,950 --> 00:03:52,260
but as soon as active participant comes

90
00:03:52,260 --> 00:03:53,460
online we want this traffic to go away

91
00:03:53,460 --> 00:03:56,310
so now in the ITF we're trying to deploy

92
00:03:56,310 --> 00:03:58,650
scavenger traffic which can take

93
00:03:58,650 --> 00:04:00,770
advantage of the network as this Idol

94
00:04:00,770 --> 00:04:05,160
okay so the new picture we have our flow

95
00:04:05,160 --> 00:04:08,810
of packets and we tag them differently

96
00:04:09,260 --> 00:04:11,520
they get passed through to Reuters as

97
00:04:11,520 --> 00:04:13,260
they go through Reuters they get put

98
00:04:13,260 --> 00:04:15,420
into different queues different hues by

99
00:04:15,420 --> 00:04:18,269
the middle box means that the traffic is

100
00:04:18,269 --> 00:04:21,450
treated in a slightly different way and

101
00:04:21,450 --> 00:04:24,180
we get our nice EF marked traffic all

102
00:04:24,180 --> 00:04:25,470
the way through a nice and quickly and

103
00:04:25,470 --> 00:04:28,970
everything else gets queued reasonably

104
00:04:28,970 --> 00:04:32,550
so for this there are lots of different

105
00:04:32,550 --> 00:04:34,770
per hot behaviors we can talk about and

106
00:04:34,770 --> 00:04:36,930
QoS is implemented optionally for each

107
00:04:36,930 --> 00:04:38,970
hop on the network so we have the

108
00:04:38,970 --> 00:04:41,160
default as I said we have expedited

109
00:04:41,160 --> 00:04:42,510
forwarding which we would use for

110
00:04:42,510 --> 00:04:46,140
latency voice and we have 12 classes of

111
00:04:46,140 --> 00:04:48,720
assured forward in traffic and these are

112
00:04:48,720 --> 00:04:51,440
set up in different priorities based on

113
00:04:51,440 --> 00:04:53,670
how you want things forward and how you

114
00:04:53,670 --> 00:04:55,080
wanted to be treated in the network

115
00:04:55,080 --> 00:04:56,520
themselves but all of these are

116
00:04:56,520 --> 00:05:00,210
implemented just depending on the hop

117
00:05:00,210 --> 00:05:06,320
itself for the internet we implement

118
00:05:06,320 --> 00:05:09,990
differential services with what used to

119
00:05:09,990 --> 00:05:12,060
be the type of service fields in the IP

120
00:05:12,060 --> 00:05:15,510
header it's now been broken out and

121
00:05:15,510 --> 00:05:17,450
split down into a diff surf code point

122
00:05:17,450 --> 00:05:21,510
and the EC n bits so we now have a 6-bit

123
00:05:21,510 --> 00:05:23,850
code for representing QoS we have a

124
00:05:23,850 --> 00:05:25,380
two-bit code that the network can use

125
00:05:25,380 --> 00:05:27,330
the signal congestion to a receiver

126
00:05:27,330 --> 00:05:29,550
which is great you should look at but

127
00:05:29,550 --> 00:05:33,930
well I've scope but because we're

128
00:05:33,930 --> 00:05:37,110
reusing an old field we get strange

129
00:05:37,110 --> 00:05:39,189
behaviors in the network

130
00:05:39,189 --> 00:05:42,009
and we can't whenever we do anything in

131
00:05:42,009 --> 00:05:44,379
the ITF which involves changing the wire

132
00:05:44,379 --> 00:05:47,499
protocol or the interpretation of bits

133
00:05:47,499 --> 00:05:49,239
people suddenly ask is this going to

134
00:05:49,239 --> 00:05:51,069
work is it going to be deployable is it

135
00:05:51,069 --> 00:05:54,699
going to be blocked ecn two years to get

136
00:05:54,699 --> 00:05:57,330
deployed at all on the internet because

137
00:05:57,330 --> 00:05:59,499
there were a lot of middle boxes that

138
00:05:59,499 --> 00:06:01,569
bleach the bits or drop traffic with

139
00:06:01,569 --> 00:06:04,659
them set with accurate ecn insane

140
00:06:04,659 --> 00:06:07,089
fallback was fixed and if this happens

141
00:06:07,089 --> 00:06:09,939
again for dscp then qsr is going to be a

142
00:06:09,939 --> 00:06:13,719
long way from be deployed so i am an

143
00:06:13,719 --> 00:06:16,539
academic so we did some tests and we

144
00:06:16,539 --> 00:06:18,610
were to figure out how code points are

145
00:06:18,610 --> 00:06:20,679
being recommended for use now by the ITF

146
00:06:20,679 --> 00:06:23,050
are being treated on the internet we

147
00:06:23,050 --> 00:06:24,580
want to see if there's any pass/fail if

148
00:06:24,580 --> 00:06:26,139
there's any number you can send a DSP

149
00:06:26,139 --> 00:06:28,300
that'll stop packets getting through and

150
00:06:28,300 --> 00:06:29,860
we want to verify that the treatment for

151
00:06:29,860 --> 00:06:34,119
each of these groups we have is fair for

152
00:06:34,119 --> 00:06:36,069
the groups we can't tell if they're

153
00:06:36,069 --> 00:06:37,479
being treated correctly but we can tell

154
00:06:37,479 --> 00:06:38,919
if they're fair between the different

155
00:06:38,919 --> 00:06:42,729
groups themselves we expect four

156
00:06:42,729 --> 00:06:44,439
different treatments for our packets

157
00:06:44,439 --> 00:06:46,259
they passed through fine which is great

158
00:06:46,259 --> 00:06:49,179
if all of dscp marks always gets to the

159
00:06:49,179 --> 00:06:50,529
other end then we have something useful

160
00:06:50,529 --> 00:06:53,199
we can use if it get drops it's the

161
00:06:53,199 --> 00:06:55,839
opposite we can never use this more

162
00:06:55,839 --> 00:06:57,129
likely we're going to see bleaching of

163
00:06:57,129 --> 00:06:59,679
bits either the whole field set down to

164
00:06:59,679 --> 00:07:02,169
zero or certain sections from the old

165
00:07:02,169 --> 00:07:05,529
TOS field set down to zero and remarking

166
00:07:05,529 --> 00:07:07,119
and remarking internet is actually a

167
00:07:07,119 --> 00:07:11,759
great thing it means the operators are

168
00:07:11,819 --> 00:07:14,619
actively processing the traffic based on

169
00:07:14,619 --> 00:07:18,639
what you're buying from them this is

170
00:07:18,639 --> 00:07:20,289
what we thought we'd look for to

171
00:07:20,289 --> 00:07:22,539
generate a set of points we looked at

172
00:07:22,539 --> 00:07:24,729
drafts in the ITF right now so there's

173
00:07:24,729 --> 00:07:26,379
an 802 11 draft which is trying to fix

174
00:07:26,379 --> 00:07:29,860
mapping from dscp to 802 11 access

175
00:07:29,860 --> 00:07:33,519
classes this one is quite an easy one

176
00:07:33,519 --> 00:07:34,749
but we're just trying to make sure they

177
00:07:34,749 --> 00:07:36,509
all all of the bits learn the right way

178
00:07:36,509 --> 00:07:39,909
if you want to go today and use DSP fork

179
00:07:39,909 --> 00:07:41,409
us you will get benefit from this

180
00:07:41,409 --> 00:07:43,689
straight away your Linux wireless really

181
00:07:43,689 --> 00:07:46,329
does this it's great your freebsd

182
00:07:46,329 --> 00:07:47,559
wireless or does this it's great

183
00:07:47,559 --> 00:07:49,629
anything else I don't know give me the

184
00:07:49,629 --> 00:07:51,080
code

185
00:07:51,080 --> 00:07:53,130
MPLS is the core protocol in the

186
00:07:53,130 --> 00:07:55,020
internet and it's used for lots of

187
00:07:55,020 --> 00:07:58,560
interconnects I don't like 802 11 where

188
00:07:58,560 --> 00:07:59,790
they're really nice and they don't touch

189
00:07:59,790 --> 00:08:01,770
our packets MPLS reads the IP header

190
00:08:01,770 --> 00:08:04,770
generates a label takes it through the

191
00:08:04,770 --> 00:08:06,510
network and then resets the IP header

192
00:08:06,510 --> 00:08:08,220
based on the label that gets through the

193
00:08:08,220 --> 00:08:11,190
other end so MPLS networks change lots

194
00:08:11,190 --> 00:08:13,430
of IP headers as they pass traffic

195
00:08:13,430 --> 00:08:15,900
really troubling and then the last one

196
00:08:15,900 --> 00:08:17,160
which would be common for everyone here

197
00:08:17,160 --> 00:08:21,090
and will be WebRTC the there is a draft

198
00:08:21,090 --> 00:08:23,430
right now for QoS saying about mark you

199
00:08:23,430 --> 00:08:26,820
see it offers 12 points I think so you

200
00:08:26,820 --> 00:08:29,130
can set one of the three types and then

201
00:08:29,130 --> 00:08:31,080
four priorities for each of them there's

202
00:08:31,080 --> 00:08:32,490
implementation in Chrome there's nothing

203
00:08:32,490 --> 00:08:34,740
in Firefox if you want this implemented

204
00:08:34,740 --> 00:08:36,659
in Firefox there is a bug tracker list

205
00:08:36,659 --> 00:08:39,479
and I had confirmed this week if people

206
00:08:39,479 --> 00:08:41,760
bother them they will do this so if you

207
00:08:41,760 --> 00:08:44,000
want to bother these people it's great

208
00:08:44,000 --> 00:08:46,320
but so I went to read all of these I

209
00:08:46,320 --> 00:08:49,350
generated this list of 21 points if you

210
00:08:49,350 --> 00:08:50,430
can't really quickly you'll see there's

211
00:08:50,430 --> 00:08:54,570
more than 21 things here and I fill

212
00:08:54,570 --> 00:08:56,040
these out in two classes so on the Left

213
00:08:56,040 --> 00:09:00,030
we have our best effort default class we

214
00:09:00,030 --> 00:09:03,360
have EF next fast latency stuff and in

215
00:09:03,360 --> 00:09:05,060
brackets we have LBE

216
00:09:05,060 --> 00:09:07,320
and this is an effort we're trying to do

217
00:09:07,320 --> 00:09:08,580
right now so we can have scavenger

218
00:09:08,580 --> 00:09:11,640
background traffic we're not sure from

219
00:09:11,640 --> 00:09:13,170
the measurements we've done if this is

220
00:09:13,170 --> 00:09:16,590
going to be feasible but if it is it's

221
00:09:16,590 --> 00:09:18,920
really cool

222
00:09:19,100 --> 00:09:24,440
I have graphs so what we've done to

223
00:09:24,440 --> 00:09:27,440
generate these is we've done a we've

224
00:09:27,440 --> 00:09:29,780
done a sort of trace route trace route

225
00:09:29,780 --> 00:09:32,180
style ring search through the internet

226
00:09:32,180 --> 00:09:34,790
for a selection of hosts we've done

227
00:09:34,790 --> 00:09:39,050
measurements right now I know from the

228
00:09:39,050 --> 00:09:40,880
course or from digitalocean servers to

229
00:09:40,880 --> 00:09:44,900
top 100 websites we have a testbed

230
00:09:44,900 --> 00:09:47,720
called Munro which has lots of 3G

231
00:09:47,720 --> 00:09:50,300
connected nodes in Spain France UK in

232
00:09:50,300 --> 00:09:52,490
Norway we're not sure on the

233
00:09:52,490 --> 00:09:53,960
measurements from those but they look

234
00:09:53,960 --> 00:10:01,160
quite promising yeah so this tool it

235
00:10:01,160 --> 00:10:04,880
sets TTL low but the first thing it does

236
00:10:04,880 --> 00:10:06,920
is it tries to reach ability it reaches

237
00:10:06,920 --> 00:10:10,580
we do a TTL low and we send packets

238
00:10:10,580 --> 00:10:13,400
marked as a certain dscp when the TTL

239
00:10:13,400 --> 00:10:15,440
hits zero reuters will start forwarding

240
00:10:15,440 --> 00:10:18,080
packets under generate an ICMP time

241
00:10:18,080 --> 00:10:19,790
exceeded message the time exceeded

242
00:10:19,790 --> 00:10:21,650
message contains the original IP header

243
00:10:21,650 --> 00:10:23,960
this is so end hosts can reconstruct

244
00:10:23,960 --> 00:10:27,610
flows and we use this to detect where

245
00:10:27,610 --> 00:10:29,750
code points are changing in the network

246
00:10:29,750 --> 00:10:31,550
and what they are so with this tool we

247
00:10:31,550 --> 00:10:33,380
can't actually see the far end we can

248
00:10:33,380 --> 00:10:35,960
see one hop away but we can make quite a

249
00:10:35,960 --> 00:10:37,940
lot of conclusions from us I just have

250
00:10:37,940 --> 00:10:41,390
two slides on this and I have 300 of

251
00:10:41,390 --> 00:10:44,030
these graphs over sent this week but if

252
00:10:44,030 --> 00:10:45,290
you want to see them I can show you but

253
00:10:45,290 --> 00:10:48,440
they're all look very similar yeah so

254
00:10:48,440 --> 00:10:51,350
the one we expect this is a graph for B

255
00:10:51,350 --> 00:10:54,620
traffic so this is a dscp of 0 set the

256
00:10:54,620 --> 00:10:58,270
the plot is showing the percentage of

257
00:10:58,270 --> 00:11:01,880
marks at the last hop and at the top we

258
00:11:01,880 --> 00:11:05,210
have an average number of hops before

259
00:11:05,210 --> 00:11:07,040
first change and then average number of

260
00:11:07,040 --> 00:11:09,260
hops per path so the paths were like

261
00:11:09,260 --> 00:11:11,800
seven or eight hops

262
00:11:11,800 --> 00:11:17,230
and yeah so this is the behavior we

263
00:11:17,230 --> 00:11:19,300
expect to see we see a lot of RB traffic

264
00:11:19,300 --> 00:11:21,459
get through most of the remarking in the

265
00:11:21,459 --> 00:11:22,779
internet is bleaching down to zero

266
00:11:22,779 --> 00:11:24,639
anyway so this is a combined number we

267
00:11:24,639 --> 00:11:31,119
get three the more interesting one is to

268
00:11:31,119 --> 00:11:34,029
look at CS 1 which is the SCP 8 this is

269
00:11:34,029 --> 00:11:35,499
what is being suggested right now by the

270
00:11:35,499 --> 00:11:38,739
ietf to use for scavenger traffic so you

271
00:11:38,739 --> 00:11:40,949
can use this as background and we see

272
00:11:40,949 --> 00:11:44,649
53% of it gets through but we see 45% of

273
00:11:44,649 --> 00:11:47,230
it is marked to be now for most QoS

274
00:11:47,230 --> 00:11:49,089
classes it's actually ok to remark

275
00:11:49,089 --> 00:11:52,059
because you reduce priorities so you're

276
00:11:52,059 --> 00:11:53,949
not asking for something implicit but

277
00:11:53,949 --> 00:11:56,019
with this be remarketing we're getting

278
00:11:56,019 --> 00:11:58,480
promoted now if you started doing a

279
00:11:58,480 --> 00:11:59,889
Windows Update and you only wanted it to

280
00:11:59,889 --> 00:12:02,379
have access to traffic when you're not

281
00:12:02,379 --> 00:12:04,540
trying to do useful stuff and it's

282
00:12:04,540 --> 00:12:06,999
getting remarked to to be in the network

283
00:12:06,999 --> 00:12:08,290
then you're going to see a lot more

284
00:12:08,290 --> 00:12:10,449
bandwidth use than you expected when

285
00:12:10,449 --> 00:12:11,649
your network might not be able to take

286
00:12:11,649 --> 00:12:14,769
advantage of this ok the interesting one

287
00:12:14,769 --> 00:12:16,480
all of the rest of the non code points

288
00:12:16,480 --> 00:12:19,179
look like this and so we see about 50%

289
00:12:19,179 --> 00:12:22,389
work see about 13% get marked a B and

290
00:12:22,389 --> 00:12:26,259
then we see some other bits this is

291
00:12:26,259 --> 00:12:28,839
actual remarking the other two are

292
00:12:28,839 --> 00:12:31,299
bleaching of bits based on the old IP

293
00:12:31,299 --> 00:12:34,779
TOS field we couldn't figure out why so

294
00:12:34,779 --> 00:12:36,279
many rooters in the internet were doing

295
00:12:36,279 --> 00:12:37,990
this until we went and looked at the

296
00:12:37,990 --> 00:12:39,730
Cisco config and the Cisco

297
00:12:39,730 --> 00:12:41,769
recommendation for switches and Ritter's

298
00:12:41,769 --> 00:12:44,649
hasn't changed in a long time and the

299
00:12:44,649 --> 00:12:46,449
default rule just says leave these three

300
00:12:46,449 --> 00:12:48,699
bits but wipe these 3 bits and this is

301
00:12:48,699 --> 00:12:50,439
where we get traffic like this and we

302
00:12:50,439 --> 00:12:51,850
can see this consistently for all the

303
00:12:51,850 --> 00:12:56,290
marks we feeding for network ok enough

304
00:12:56,290 --> 00:12:57,779
science how do I use this

305
00:12:57,779 --> 00:13:01,059
from C you decide to use a DHCP I've

306
00:13:01,059 --> 00:13:03,339
done this in hex because I like hex pick

307
00:13:03,339 --> 00:13:07,149
out a nice en shift your DHCP mark up to

308
00:13:07,149 --> 00:13:07,509
bits

309
00:13:07,509 --> 00:13:10,119
so we hide the e CN field or with your

310
00:13:10,119 --> 00:13:12,749
EC n value and it costs that sock opt

311
00:13:12,749 --> 00:13:15,580
great nice and easy

312
00:13:15,580 --> 00:13:19,300
well the project I work on we've decided

313
00:13:19,300 --> 00:13:21,430
that the capi is old and crusty and we

314
00:13:21,430 --> 00:13:23,290
need to fix this so I have something

315
00:13:23,290 --> 00:13:29,980
much bigger and here we are here is yeah

316
00:13:29,980 --> 00:13:32,820
so here's the picture we sent to the EU

317
00:13:32,820 --> 00:13:34,980
[Music]

318
00:13:34,980 --> 00:13:39,279
yeah bureaucracy so this is what we sent

319
00:13:39,279 --> 00:13:41,380
it to you this stuff I don't tell them

320
00:13:41,380 --> 00:13:46,450
but we're not going to do it yeah no

321
00:13:46,450 --> 00:13:52,149
they'll never find out and so the new

322
00:13:52,149 --> 00:13:56,320
system offers a libuv based C API to the

323
00:13:56,320 --> 00:13:56,829
network

324
00:13:56,829 --> 00:13:58,480
so we've taken libuv and we've given it

325
00:13:58,480 --> 00:14:00,730
nicer networking primitives we've also

326
00:14:00,730 --> 00:14:03,790
given it loads of magic underneath we

327
00:14:03,790 --> 00:14:06,160
use traditional sockets but we can also

328
00:14:06,160 --> 00:14:08,079
have a we have a pluggable transport

329
00:14:08,079 --> 00:14:10,649
system so you can use any protocols

330
00:14:10,649 --> 00:14:15,100
currently we support you d PE tcp SCTP

331
00:14:15,100 --> 00:14:17,589
setp and userspace as like the forming

332
00:14:17,589 --> 00:14:19,420
protocols and we can do security

333
00:14:19,420 --> 00:14:21,370
transparently on top of all of these so

334
00:14:21,370 --> 00:14:23,529
if you don't like open SSL you don't

335
00:14:23,529 --> 00:14:25,390
have to use up an SSL you just give us a

336
00:14:25,390 --> 00:14:28,810
certificate and everything works it's

337
00:14:28,810 --> 00:14:32,680
great yeah this is a smaller picture but

338
00:14:32,680 --> 00:14:35,260
it's the same idea over on the left and

339
00:14:35,260 --> 00:14:37,089
right we have a Diagnostics and

340
00:14:37,089 --> 00:14:40,480
statistics interface and on the right we

341
00:14:40,480 --> 00:14:44,230
have a policy interface the system has a

342
00:14:44,230 --> 00:14:45,760
daemon that runs in the background and

343
00:14:45,760 --> 00:14:48,190
it gathers up interface statistics

344
00:14:48,190 --> 00:14:51,010
interfaces as they come and go through

345
00:14:51,010 --> 00:14:53,589
to successful connections successful

346
00:14:53,589 --> 00:14:55,810
protocol probing and then we have a

347
00:14:55,810 --> 00:14:58,870
policy system that can use this gathered

348
00:14:58,870 --> 00:15:01,540
information to apply with heuristic

349
00:15:01,540 --> 00:15:04,930
based algorithms selection choices for

350
00:15:04,930 --> 00:15:06,640
what you want to do as an application

351
00:15:06,640 --> 00:15:08,709
you can say I want datagrams

352
00:15:08,709 --> 00:15:11,440
and we can figure out if you can do SCTP

353
00:15:11,440 --> 00:15:14,290
and if you can't do setp then you get

354
00:15:14,290 --> 00:15:17,050
something maybe is UDP or you can say I

355
00:15:17,050 --> 00:15:20,260
need reliable transport this is it and

356
00:15:20,260 --> 00:15:22,180
will do will do happy eyeballs choices

357
00:15:22,180 --> 00:15:26,500
between ipv4 ipv6 SCTP TCP we can do

358
00:15:26,500 --> 00:15:28,209
probing for security on the server so

359
00:15:28,209 --> 00:15:28,960
the applications

360
00:15:28,960 --> 00:15:32,800
to do it we can do all of this cool

361
00:15:32,800 --> 00:15:34,570
magic so that things are automatic and

362
00:15:34,570 --> 00:15:37,060
they fall back so the API is nice and

363
00:15:37,060 --> 00:15:39,040
easy to use I don't care about this one

364
00:15:39,040 --> 00:15:40,570
okay so this is what an application

365
00:15:40,570 --> 00:15:43,060
looks like I've taken out all the error

366
00:15:43,060 --> 00:15:47,530
handling we we set up a context then we

367
00:15:47,530 --> 00:15:50,920
initialize it we have our contacts as I

368
00:15:50,920 --> 00:15:53,620
remain threading primitive we're dealing

369
00:15:53,620 --> 00:15:54,580
with this right now if you want to

370
00:15:54,580 --> 00:15:57,040
follow our github issues we create a

371
00:15:57,040 --> 00:15:58,660
flow the interface for a flow is the

372
00:15:58,660 --> 00:16:01,120
same for every transport we set up

373
00:16:01,120 --> 00:16:05,350
properties i left the old c bitmask we

374
00:16:05,350 --> 00:16:08,070
have but we now do properties via JSON

375
00:16:08,070 --> 00:16:11,710
you set up some callbacks and then we do

376
00:16:11,710 --> 00:16:15,070
an open and the open does everything for

377
00:16:15,070 --> 00:16:19,690
you you get your own connected event and

378
00:16:19,690 --> 00:16:21,010
you have a working flow when you have a

379
00:16:21,010 --> 00:16:23,170
working connection and if you've asked

380
00:16:23,170 --> 00:16:24,400
for something reliable then you have a

381
00:16:24,400 --> 00:16:27,790
working stream protocol but we might

382
00:16:27,790 --> 00:16:29,620
have negotiated setp for you and you

383
00:16:29,620 --> 00:16:33,180
have multi streaming a lot of cool stuff

384
00:16:34,200 --> 00:16:43,330
yeah read and writes and so the

385
00:16:43,330 --> 00:16:44,740
difference between the client and the

386
00:16:44,740 --> 00:16:47,550
server is the knee open as me except

387
00:16:47,550 --> 00:16:51,760
exactly within we do virtually except

388
00:16:51,760 --> 00:16:54,580
for UDP so we have some stuff to make

389
00:16:54,580 --> 00:16:56,140
UDP look a bit more like a connected

390
00:16:56,140 --> 00:16:59,110
protocol and then it's obviously it

391
00:16:59,110 --> 00:17:05,230
works great so neat for QoS you can set

392
00:17:05,230 --> 00:17:08,200
the DHCP value directly because we

393
00:17:08,200 --> 00:17:09,400
didn't want to remove this for people

394
00:17:09,400 --> 00:17:10,959
who actually had an idea of what they

395
00:17:10,959 --> 00:17:14,500
were to do you can set it by a name or

396
00:17:14,500 --> 00:17:17,140
you can set it by abstract high-level

397
00:17:17,140 --> 00:17:19,900
primitive if an application asks for a

398
00:17:19,900 --> 00:17:21,760
high-level QoS and we can do lots of

399
00:17:21,760 --> 00:17:23,950
interesting things if we know your

400
00:17:23,950 --> 00:17:26,500
network is going to have issues with

401
00:17:26,500 --> 00:17:28,590
certain marks we can choose other marks

402
00:17:28,590 --> 00:17:31,780
if you have multiple interfaces and you

403
00:17:31,780 --> 00:17:33,370
choose a queue ask for low latency and

404
00:17:33,370 --> 00:17:34,960
you have a satellite link we do lot of

405
00:17:34,960 --> 00:17:36,160
satellite research if you have a

406
00:17:36,160 --> 00:17:39,040
satellite link and a Wi-Fi link then we

407
00:17:39,040 --> 00:17:41,320
can pick the Wi-Fi link for you while we

408
00:17:41,320 --> 00:17:42,970
set up the QoS

409
00:17:42,970 --> 00:17:45,700
and we have tons of Hoops and

410
00:17:45,700 --> 00:17:47,860
integration into Sdn infrastructure so

411
00:17:47,860 --> 00:17:50,800
if you choose a high level QoS in your

412
00:17:50,800 --> 00:17:52,810
data center and you have normal cheap

413
00:17:52,810 --> 00:17:55,060
links and you have expensive little

414
00:17:55,060 --> 00:17:56,920
latency links we can pick this for you

415
00:17:56,920 --> 00:17:58,870
and do automatic provisioning and all

416
00:17:58,870 --> 00:18:02,130
hoops and integrates in well together

417
00:18:02,130 --> 00:18:05,770
okay the all of our science is happening

418
00:18:05,770 --> 00:18:07,870
the public all of our papers are open

419
00:18:07,870 --> 00:18:10,360
access and available the EU deliverables

420
00:18:10,360 --> 00:18:11,230
you don't want to read them but you

421
00:18:11,230 --> 00:18:12,970
could specify the architecture are all

422
00:18:12,970 --> 00:18:15,370
available online all of our software

423
00:18:15,370 --> 00:18:16,540
development is happening in the open

424
00:18:16,540 --> 00:18:19,480
right now we have public github issue

425
00:18:19,480 --> 00:18:22,210
trackers build bots we will take patches

426
00:18:22,210 --> 00:18:24,700
from anyone we want people to be

427
00:18:24,700 --> 00:18:26,950
involved and play with this this is a

428
00:18:26,950 --> 00:18:28,300
really nice way to access the network

429
00:18:28,300 --> 00:18:31,750
and it can do so much more

430
00:18:31,750 --> 00:18:39,900
[Applause]

431
00:18:48,090 --> 00:18:51,250
[Music]

432
00:18:57,240 --> 00:19:03,630
so all behaviors are recommendation Lots

433
00:19:04,030 --> 00:19:08,350
I've I set QoS and I'm at home and I

434
00:19:08,350 --> 00:19:10,060
have my home wireless River and I'm

435
00:19:10,060 --> 00:19:11,140
speaking to you and you have your home

436
00:19:11,140 --> 00:19:13,720
wireless River my pocket can get all the

437
00:19:13,720 --> 00:19:15,190
way across the internet the Q s had a Q

438
00:19:15,190 --> 00:19:16,120
s header intact

439
00:19:16,120 --> 00:19:17,950
our home roosters are going to use this

440
00:19:17,950 --> 00:19:20,350
for 802 11 access classes so we're gonna

441
00:19:20,350 --> 00:19:23,530
get our traffic and we're doing yeah for

442
00:19:23,530 --> 00:19:25,120
voice we're gonna get into the highest

443
00:19:25,120 --> 00:19:27,430
priority bin so we will get Q s data

444
00:19:27,430 --> 00:19:31,980
through between will do what they will

445
00:19:31,980 --> 00:19:34,360
well they might ignore it they might

446
00:19:34,360 --> 00:19:35,680
treat it differently they might have

447
00:19:35,680 --> 00:19:38,310
their own values for dealing with this

448
00:19:38,310 --> 00:19:40,180
there's a lot of active queue management

449
00:19:40,180 --> 00:19:43,270
that happens so it's probably going to

450
00:19:43,270 --> 00:19:46,120
be okay and I don't know it would be

451
00:19:46,120 --> 00:19:47,530
next to try the problem with this is you

452
00:19:47,530 --> 00:19:50,500
can't stress the network and then see

453
00:19:50,500 --> 00:19:51,940
what happens

454
00:19:51,940 --> 00:19:54,909
like us it's great for clothes networks

455
00:19:54,909 --> 00:19:57,879
but forget I'll note open Internet it's

456
00:19:57,879 --> 00:20:00,190
great at the end points so just that is

457
00:20:00,190 --> 00:20:01,570
a good enough reason to use it and if it

458
00:20:01,570 --> 00:20:12,549
gets through the networks right so if

459
00:20:12,549 --> 00:20:16,600
you have a run once we have an example

460
00:20:16,600 --> 00:20:19,059
application that does RTP streams with

461
00:20:19,059 --> 00:20:22,360
GStreamer and we call we tie run once

462
00:20:22,360 --> 00:20:24,700
into the UV event loop so that gets run

463
00:20:24,700 --> 00:20:28,139
once for every spin of the UV event loop

464
00:20:28,139 --> 00:20:30,490
if you have more suggestions I would

465
00:20:30,490 --> 00:20:31,509
love to hear them because it'd be great

466
00:20:31,509 --> 00:20:34,480
to be able to integrate more we have

467
00:20:34,480 --> 00:20:41,250
integration with Firefox right now but

468
00:20:46,900 --> 00:20:53,419
[Applause]

469
00:21:01,919 --> 00:21:04,919
yeah

