1
00:00:05,100 --> 00:00:10,080
Wayne and Orson I work at CERN and today

2
00:00:10,080 --> 00:00:14,639
I wanted to present you a feature we

3
00:00:14,639 --> 00:00:18,810
recently developed that is integration

4
00:00:18,810 --> 00:00:24,029
of spice simulation engine into kicad

5
00:00:24,029 --> 00:00:27,570
I'll start with a quick agenda so first

6
00:00:27,570 --> 00:00:29,550
I will give you a bit of background what

7
00:00:29,550 --> 00:00:32,130
were our goals and what features we

8
00:00:32,130 --> 00:00:35,070
currently support then a bit of

9
00:00:35,070 --> 00:00:38,240
technical details how we did that

10
00:00:38,240 --> 00:00:43,620
followed by a to-do list and then live

11
00:00:43,620 --> 00:00:50,100
demo hopefully it will work so how did

12
00:00:50,100 --> 00:00:53,280
we start with where does the idea come

13
00:00:53,280 --> 00:00:57,390
from so it was essentially a quick hack

14
00:00:57,390 --> 00:01:00,300
that turned into a useful feature some

15
00:01:00,300 --> 00:01:02,490
time last summer we accidentally

16
00:01:02,490 --> 00:01:05,430
discovered that ngspice can be built as

17
00:01:05,430 --> 00:01:07,590
a dll it was actually some Python guy

18
00:01:07,590 --> 00:01:12,930
who made a very nice API and turned

19
00:01:12,930 --> 00:01:15,410
ngspice simulator into a shared library

20
00:01:15,410 --> 00:01:19,290
for the purpose of processing signals

21
00:01:19,290 --> 00:01:22,860
within a Python based framework but we

22
00:01:22,860 --> 00:01:25,110
thought well this is an easy way of

23
00:01:25,110 --> 00:01:28,380
integrating a simulator into account

24
00:01:28,380 --> 00:01:34,080
application and our aim was well why

25
00:01:34,080 --> 00:01:37,110
don't we try making something that looks

26
00:01:37,110 --> 00:01:39,930
and feels a bit like the world non-free

27
00:01:39,930 --> 00:01:42,000
but industry-standard ltspice but in

28
00:01:42,000 --> 00:01:46,290
kicad so our goals were to have a

29
00:01:46,290 --> 00:01:48,630
simulator integrated into the eeschema

30
00:01:48,630 --> 00:01:50,909
which is well the fancy name for the

31
00:01:50,909 --> 00:01:53,130
kicad schematic editor that is

32
00:01:53,130 --> 00:01:56,130
compatible with spice models that is

33
00:01:56,130 --> 00:01:59,520
reasonably easy to use so well ideally

34
00:01:59,520 --> 00:02:03,360
one click to run a simulation and that

35
00:02:03,360 --> 00:02:05,760
in the longer run allows for the choice

36
00:02:05,760 --> 00:02:07,770
of the simulation kernel currently we

37
00:02:07,770 --> 00:02:09,989
support on the ngspice but this will

38
00:02:09,989 --> 00:02:14,069
likely change in the future so what do

39
00:02:14,069 --> 00:02:17,209
we support so far

40
00:02:17,209 --> 00:02:21,409
we can run operating point AC and

41
00:02:21,409 --> 00:02:25,129
transient analysis we have a road built

42
00:02:25,129 --> 00:02:30,379
in plotting application we also support

43
00:02:30,379 --> 00:02:33,349
live voltage and current probing so once

44
00:02:33,349 --> 00:02:34,730
the simulation is running you can

45
00:02:34,730 --> 00:02:40,189
basically click on to a component or or

46
00:02:40,189 --> 00:02:41,959
a wire the schematic the automatically

47
00:02:41,959 --> 00:02:44,859
updated plot with the corresponding

48
00:02:44,859 --> 00:02:49,129
signal value think of it as a virtual

49
00:02:49,129 --> 00:02:53,959
scope probe and another nice feature is

50
00:02:53,959 --> 00:02:57,829
that we can adjust the values of the RCL

51
00:02:57,829 --> 00:03:01,299
components in the real time

52
00:03:01,629 --> 00:03:05,420
this lets you observe as the operation

53
00:03:05,420 --> 00:03:10,790
of the circuit changes when live so how

54
00:03:10,790 --> 00:03:13,700
did we implement it basically the

55
00:03:13,700 --> 00:03:16,310
simulator is a separate key card

56
00:03:16,310 --> 00:03:18,170
application that is linked together with

57
00:03:18,170 --> 00:03:22,040
the schematic editor so we have to edit

58
00:03:22,040 --> 00:03:26,799
or frames the schematic frame and

59
00:03:26,799 --> 00:03:30,739
associated simulator that frame that

60
00:03:30,739 --> 00:03:32,750
runs in our in a separate window and

61
00:03:32,750 --> 00:03:35,629
then they both use an abstract class

62
00:03:35,629 --> 00:03:36,349
called

63
00:03:36,349 --> 00:03:38,690
spice simulator which provides an

64
00:03:38,690 --> 00:03:43,220
abstract API that is that is simulation

65
00:03:43,220 --> 00:03:45,560
kernel independent provided that the

66
00:03:45,560 --> 00:03:47,419
simulation kernel supports a spice

67
00:03:47,419 --> 00:03:50,150
compatible netlist then we specialize

68
00:03:50,150 --> 00:03:53,889
that class for instance here to ng spice

69
00:03:53,889 --> 00:03:57,680
and then use lib ng spice Tata so or a

70
00:03:57,680 --> 00:04:00,220
despised or DLL the dynamic library

71
00:04:00,220 --> 00:04:03,440
using its native API this way we can

72
00:04:03,440 --> 00:04:05,120
provide as many back and says we want

73
00:04:05,120 --> 00:04:10,819
right so what is on our to-do list it's

74
00:04:10,819 --> 00:04:12,829
still an experimental feature and it

75
00:04:12,829 --> 00:04:15,290
lacks a lot contour to cooks for

76
00:04:15,290 --> 00:04:18,199
instance so we would like to have to add

77
00:04:18,199 --> 00:04:19,970
more analyzes types for instance

78
00:04:19,970 --> 00:04:23,810
transfer functions noise analysis the

79
00:04:23,810 --> 00:04:26,029
plotting app is a bit quirky for the

80
00:04:26,029 --> 00:04:28,969
moment so it deserves a bit of user

81
00:04:28,969 --> 00:04:31,180
interface fixes

82
00:04:31,180 --> 00:04:35,050
we also like to have storage of the

83
00:04:35,050 --> 00:04:38,290
simulation sessions in files we need to

84
00:04:38,290 --> 00:04:42,610
work on the printing and PDF export the

85
00:04:42,610 --> 00:04:45,760
well one ambitious feature that we don't

86
00:04:45,760 --> 00:04:48,729
know if it will ever happen yes support

87
00:04:48,729 --> 00:04:50,590
for micro a simulation probably it

88
00:04:50,590 --> 00:04:52,930
through through another kernel I cook

89
00:04:52,930 --> 00:04:53,880
satyr

90
00:04:53,880 --> 00:04:57,790
the support for Ibis models for for

91
00:04:57,790 --> 00:05:01,330
signal integrity simulations then the

92
00:05:01,330 --> 00:05:05,530
last point is about life tuning of also

93
00:05:05,530 --> 00:05:07,630
sources and parametric variables as we

94
00:05:07,630 --> 00:05:10,740
currently only support our CL components

95
00:05:10,740 --> 00:05:17,220
so I'm gonna make a short demo showing a

96
00:05:17,220 --> 00:05:19,450
basically I will draw a simple circuit

97
00:05:19,450 --> 00:05:22,300
and simulate it just to show you how how

98
00:05:22,300 --> 00:05:26,979
it looks like before that well under

99
00:05:26,979 --> 00:05:28,979
under Windows you just need to download

100
00:05:28,979 --> 00:05:31,750
nightly I think the same applies to the

101
00:05:31,750 --> 00:05:33,880
OS X it comes already with built-in

102
00:05:33,880 --> 00:05:37,000
spice support under Linux you need Lib

103
00:05:37,000 --> 00:05:40,419
ngspice installed and most likely you

104
00:05:40,419 --> 00:05:42,669
need to compile from the sources so here

105
00:05:42,669 --> 00:05:45,280
are the magical incantations to do that

106
00:05:45,280 --> 00:05:47,080
just remember to have Lib ngspice

107
00:05:47,080 --> 00:05:50,200
installed it's available in most distros

108
00:05:50,200 --> 00:05:54,070
as a package and remember to be it with

109
00:05:54,070 --> 00:05:55,690
the key cat underscore spice flag

110
00:05:55,690 --> 00:06:01,979
enabled ok so it's time for the demo

111
00:06:06,620 --> 00:06:13,840
so let's try designing something simple

112
00:06:13,840 --> 00:06:24,080
like rectifier or something like this so

113
00:06:24,080 --> 00:06:27,560
most spice components are in the P spice

114
00:06:27,560 --> 00:06:32,600
library let's take a voltage source and

115
00:06:32,600 --> 00:06:34,910
then in order to edit it spice

116
00:06:34,910 --> 00:06:36,560
parameters we need to go to the

117
00:06:36,560 --> 00:06:39,670
properties and select edit spice model

118
00:06:39,670 --> 00:06:42,110
here you have a user-friendly way of

119
00:06:42,110 --> 00:06:49,390
entering all the sorts of source or

120
00:06:49,390 --> 00:06:56,990
component parameters so let's say 5

121
00:06:56,990 --> 00:07:08,740
volts sine of 1 kilohertz then let's add

122
00:07:09,040 --> 00:07:12,910
maybe a resistor

123
00:07:15,340 --> 00:07:18,909
maybe another one

124
00:07:27,370 --> 00:07:30,210
a diode

125
00:07:33,240 --> 00:07:39,710
and some capacitor for small thing

126
00:07:40,900 --> 00:07:46,650
and now while some values

127
00:07:53,369 --> 00:07:58,709
let's keep some more or less reasonable

128
00:08:00,989 --> 00:08:05,998
and wire it all together

129
00:08:23,050 --> 00:08:27,970
of course we need to add a ground net

130
00:08:27,970 --> 00:08:34,570
because every single ator needs that as

131
00:08:34,570 --> 00:08:39,060
a reference node otherwise it won't work

132
00:08:49,830 --> 00:08:52,950
and let's annotate the schematic so that

133
00:08:52,950 --> 00:08:58,560
every component has a unique name and

134
00:08:58,560 --> 00:09:02,719
maybe label a bita for a bunch of wires

135
00:09:14,750 --> 00:09:22,399
I'll save current ass okay so now

136
00:09:22,399 --> 00:09:24,110
in order to launch the simulation we

137
00:09:24,110 --> 00:09:27,279
have a simple circuit done go to tools

138
00:09:27,279 --> 00:09:33,620
simulator and then well it's easy run

139
00:09:33,620 --> 00:09:35,930
stop simulation well it reminds me that

140
00:09:35,930 --> 00:09:38,860
I forgot to select the analysis type and

141
00:09:38,860 --> 00:09:42,019
duration so yeah we need to go to the

142
00:09:42,019 --> 00:09:45,620
settings and let's write transient so

143
00:09:45,620 --> 00:09:50,089
let's say 10 microseconds times that 10

144
00:09:50,089 --> 00:09:57,290
milliseconds total run so no errors so

145
00:09:57,290 --> 00:09:59,569
now let's put serve some signals in the

146
00:09:59,569 --> 00:10:01,819
circuit for that we have either the at

147
00:10:01,819 --> 00:10:05,930
signals option where you can basically

148
00:10:05,930 --> 00:10:07,939
pick from all the units available in the

149
00:10:07,939 --> 00:10:15,250
design or we can use the probe tool

150
00:10:18,970 --> 00:10:25,959
but for some reason it is all flat did I

151
00:10:25,959 --> 00:10:36,420
do something wrong yeah I think so

152
00:10:39,560 --> 00:10:43,970
and it spice model transient singer saw

153
00:10:43,970 --> 00:10:49,160
it down strange maybe I forgot to save

154
00:10:49,160 --> 00:10:54,740
it so it defaulted to zero okay now it

155
00:10:54,740 --> 00:10:56,379
should work

156
00:10:56,379 --> 00:10:58,639
so yeah let's restart the simulation

157
00:10:58,639 --> 00:11:06,470
voila the other thing is that I

158
00:11:06,470 --> 00:11:10,449
connected the diode with this polarity

159
00:11:10,449 --> 00:11:13,339
but there is something wrong the plot is

160
00:11:13,339 --> 00:11:15,319
upside down right it's in the negative

161
00:11:15,319 --> 00:11:17,629
half so you know there was a common

162
00:11:17,629 --> 00:11:20,600
problem with kicad libraries when the

163
00:11:20,600 --> 00:11:22,879
transition was done before one between

164
00:11:22,879 --> 00:11:25,240
one version of library and the other and

165
00:11:25,240 --> 00:11:29,509
this changed the node mapping so if

166
00:11:29,509 --> 00:11:32,930
you're not in the spice model editor we

167
00:11:32,930 --> 00:11:38,180
provided the means for for overcoming

168
00:11:38,180 --> 00:11:41,480
such such problems and also for adapting

169
00:11:41,480 --> 00:11:44,629
your symbols to spice models which might

170
00:11:44,629 --> 00:11:48,110
have arbitrary terminal sequence so here

171
00:11:48,110 --> 00:11:50,420
we can invert this and this applies to

172
00:11:50,420 --> 00:11:56,180
all the components so now it's as it

173
00:11:56,180 --> 00:12:08,059
should be what else so I mentioned that

174
00:12:08,059 --> 00:12:09,829
we have like tuning of the component

175
00:12:09,829 --> 00:12:11,839
values so let me show you how it works

176
00:12:11,839 --> 00:12:14,509
so we can pick the screwdriver tool here

177
00:12:14,509 --> 00:12:18,019
and then let's say we want to see how

178
00:12:18,019 --> 00:12:19,879
the operation of the circuit changes as

179
00:12:19,879 --> 00:12:23,540
we change the capacitor value so a

180
00:12:23,540 --> 00:12:26,569
slider appeared here let's increase the

181
00:12:26,569 --> 00:12:30,939
range a bit to like something like this

182
00:12:30,939 --> 00:12:34,610
so as we increase the capacitance the

183
00:12:34,610 --> 00:12:37,569
signal becomes flatter

184
00:12:38,750 --> 00:12:43,699
yeah so this is not only a well a nice

185
00:12:43,699 --> 00:12:45,860
feature but also something that can be

186
00:12:45,860 --> 00:12:49,819
used in education - by the teachers to

187
00:12:49,819 --> 00:12:53,120
show people how how the operation of the

188
00:12:53,120 --> 00:12:54,709
circuit changes as they mess around with

189
00:12:54,709 --> 00:12:58,699
the components on this relation let me

190
00:12:58,699 --> 00:13:03,550
show you another circuit just quickly

191
00:13:08,259 --> 00:13:13,129
okay I think this is not me maybe not

192
00:13:13,129 --> 00:13:16,629
needed so it's basically a simple filter

193
00:13:16,629 --> 00:13:24,019
so here we can also run AC simulations

194
00:13:24,019 --> 00:13:32,629
and use the tuning feature to design

195
00:13:32,629 --> 00:13:38,300
filters without too much math so as I

196
00:13:38,300 --> 00:13:45,920
change the capacitor value the transfer

197
00:13:45,920 --> 00:13:53,059
function also follows and basically

198
00:13:53,059 --> 00:13:56,180
that's all I wanted to show you if there

199
00:13:56,180 --> 00:13:57,860
are any questions I'm happy to answer

200
00:13:57,860 --> 00:14:01,059
them thank you

201
00:14:05,270 --> 00:14:20,000
oh yeah so where is it I forgot to

202
00:14:20,000 --> 00:14:23,110
mention one important thing so this is a

203
00:14:23,110 --> 00:14:25,550
macro this uses a macro model of an

204
00:14:25,550 --> 00:14:29,840
op-amp and it's quite easy to select so

205
00:14:29,840 --> 00:14:32,420
to assign so you need to edit the spice

206
00:14:32,420 --> 00:14:35,350
model go to the integrated circuit tab

207
00:14:35,350 --> 00:14:40,910
select a file with the corresponding IC

208
00:14:40,910 --> 00:14:45,890
and in this drop-down box all the models

209
00:14:45,890 --> 00:14:47,810
that in the our data read that file will

210
00:14:47,810 --> 00:14:48,320
appear

211
00:14:48,320 --> 00:14:51,320
can you just select it yeah standard

212
00:14:51,320 --> 00:14:53,720
spice model in this case it comes from a

213
00:14:53,720 --> 00:15:06,290
lot of devices right any questions so

214
00:15:06,290 --> 00:15:09,380
the question was if I can add spice

215
00:15:09,380 --> 00:15:11,420
directives right to the schematics yes

216
00:15:11,420 --> 00:15:24,500
we can in fact we even have one here yep

217
00:15:24,500 --> 00:15:26,300
you can export a spice netlist from

218
00:15:26,300 --> 00:15:31,330
kicad so it's to generate netlist file

219
00:15:31,330 --> 00:15:34,490
here so you can use it with an external

220
00:15:34,490 --> 00:15:37,090
simulator

221
00:15:40,750 --> 00:15:50,170
I didn't try but whatever spa so the

222
00:15:50,170 --> 00:15:53,050
question was if I can put a white noise

223
00:15:53,050 --> 00:15:54,820
as the input and see the frequency

224
00:15:54,820 --> 00:15:58,390
response so you can do whatever the

225
00:15:58,390 --> 00:16:02,710
ngspice provides I never tried this in

226
00:16:02,710 --> 00:16:22,720
particular 'but is if we are generating

227
00:16:22,720 --> 00:16:24,640
a text netlist and passing it to

228
00:16:24,640 --> 00:16:26,500
dissimulate or if we are doing it in a

229
00:16:26,500 --> 00:16:31,570
let's say more binary way so we just use

230
00:16:31,570 --> 00:16:35,500
text the data is extracted basically as

231
00:16:35,500 --> 00:16:39,340
tables in the memory but netlist is

232
00:16:39,340 --> 00:16:41,590
parsed the normal way and passed to the

233
00:16:41,590 --> 00:16:43,950
simulator

234
00:17:08,130 --> 00:17:13,000
okay let me repeat so Orson the cold

235
00:17:13,000 --> 00:17:18,159
sore of the simulator feature said that

236
00:17:18,159 --> 00:17:21,730
we are not using files for for passing

237
00:17:21,730 --> 00:17:25,449
the netlist instead the API provided by

238
00:17:25,449 --> 00:17:27,909
ngspice basically inputs a netlist

239
00:17:27,909 --> 00:17:30,570
as a string that's a big string and

240
00:17:30,570 --> 00:17:32,919
that's it so there is no intermediate

241
00:17:32,919 --> 00:17:37,260
files and now there was another question

242
00:17:40,140 --> 00:17:43,299
whether we did a Python wrapper over

243
00:17:43,299 --> 00:18:09,940
ngspice no we did not it's pure C++ so

244
00:18:09,940 --> 00:18:12,520
the question is if we do have to rerun

245
00:18:12,520 --> 00:18:14,559
the entire simulation in order to tweak

246
00:18:14,559 --> 00:18:17,740
a value it depends how ngspice handles

247
00:18:17,740 --> 00:18:22,090
it because when you change the component

248
00:18:22,090 --> 00:18:24,220
value I don't think it reruns the entire

249
00:18:24,220 --> 00:18:28,990
simulation setup completely it just

250
00:18:28,990 --> 00:18:31,690
reruns the transient part or okay so

251
00:18:31,690 --> 00:18:34,240
somebody says yes it does but well

252
00:18:34,240 --> 00:18:37,649
computers are fast these days and for

253
00:18:37,649 --> 00:18:42,309
for AC analysis or relatively simple

254
00:18:42,309 --> 00:18:46,020
circuits it works quite in real time

255
00:19:05,760 --> 00:19:08,130
so the question is if there are any

256
00:19:08,130 --> 00:19:10,140
plans to annotate schematic symbols with

257
00:19:10,140 --> 00:19:12,930
spice models I wish there were but I

258
00:19:12,930 --> 00:19:15,720
don't think there are any such plans for

259
00:19:15,720 --> 00:19:18,540
the moment this heavily depends on the

260
00:19:18,540 --> 00:19:22,559
library managers when would you like to

261
00:19:22,559 --> 00:19:24,680
add something

262
00:20:12,200 --> 00:20:15,510
so in short people have their own

263
00:20:15,510 --> 00:20:18,690
library standards every company every

264
00:20:18,690 --> 00:20:22,260
designer uses concert components in a

265
00:20:22,260 --> 00:20:24,080
slightly different way so there is no

266
00:20:24,080 --> 00:20:27,750
gold plated solution to have you know

267
00:20:27,750 --> 00:20:29,910
like a single simulation library that

268
00:20:29,910 --> 00:20:40,890
will match everybody's requirements yep

269
00:20:40,890 --> 00:20:43,080
so is it possible based on the schematic

270
00:20:43,080 --> 00:20:45,960
to run the simulation and so on I have

271
00:20:45,960 --> 00:20:47,760
this system or you can just take the

272
00:20:47,760 --> 00:20:58,230
schematic on whatever the question was

273
00:20:58,230 --> 00:20:59,910
if it's possible to run the simulation

274
00:20:59,910 --> 00:21:02,390
from a command line on a headless system

275
00:21:02,390 --> 00:21:05,610
well you can always export spice netlist

276
00:21:05,610 --> 00:21:09,500
and run ng spice from the command line

277
00:21:14,420 --> 00:21:18,590
is a graphical application

278
00:21:35,920 --> 00:21:44,290
so the question so the question was how

279
00:21:44,290 --> 00:21:45,700
do we communicate between the between

280
00:21:45,700 --> 00:21:47,260
the simulator window and a schematic

281
00:21:47,260 --> 00:21:50,080
editor window whether we have some IPC

282
00:21:50,080 --> 00:21:53,200
protocol there is no protocol because

283
00:21:53,200 --> 00:21:56,350
they both run the GUI GUI runs in a

284
00:21:56,350 --> 00:21:58,210
single thread the simulator runs in a

285
00:21:58,210 --> 00:21:59,500
separate thread and all the

286
00:21:59,500 --> 00:22:01,090
communication between the windows is

287
00:22:01,090 --> 00:22:02,730
passed through standard vics widgets

288
00:22:02,730 --> 00:22:45,010
events okay so when just mentioned that

289
00:22:45,010 --> 00:22:46,630
in the version six we will also have

290
00:22:46,630 --> 00:22:48,130
Python scripting support for the

291
00:22:48,130 --> 00:22:52,799
schematics this will allow any sort of

292
00:22:53,100 --> 00:22:55,059
processing of the schematics will be

293
00:22:55,059 --> 00:22:56,799
done with from within a Python script

294
00:22:56,799 --> 00:23:02,919
including or perhaps simulation any

295
00:23:02,919 --> 00:23:05,400
questions

296
00:23:07,730 --> 00:23:17,019
[Applause]

