1
00:00:00,000 --> 00:00:02,870
this a developer ad

2
00:00:04,569 --> 00:00:08,109
get for the Google cloud platform ray is

3
00:00:08,109 --> 00:00:13,119
also a DevOps guru has built a number of

4
00:00:13,119 --> 00:00:14,500
applications for a number of different

5
00:00:14,500 --> 00:00:15,879
companies worked on a lot of open source

6
00:00:15,879 --> 00:00:19,930
projects and in likes photography and

7
00:00:19,930 --> 00:00:23,440
traveling yeah so good right all right

8
00:00:23,440 --> 00:00:29,230
thank you very much thank you I hope

9
00:00:29,230 --> 00:00:30,730
you're all applauding at the end of the

10
00:00:30,730 --> 00:00:33,309
talk as well yeah it's a cool so this

11
00:00:33,309 --> 00:00:36,309
talk is going to be G RPC 101 now what I

12
00:00:36,309 --> 00:00:38,550
learned yesterday is that 101 it's not a

13
00:00:38,550 --> 00:00:42,039
common concept in Europe apparently 101

14
00:00:42,039 --> 00:00:43,659
just means that is the first University

15
00:00:43,659 --> 00:00:46,269
session an introductory course kind of

16
00:00:46,269 --> 00:00:48,489
thing and my name is Ray I'm a developer

17
00:00:48,489 --> 00:00:49,629
advocate for the Google cloud platform

18
00:00:49,629 --> 00:00:51,909
and if you have any questions about

19
00:00:51,909 --> 00:00:54,489
today's talk please please contact me at

20
00:00:54,489 --> 00:00:57,190
Twitter on Twitter Saturn isn't that is

21
00:00:57,190 --> 00:00:59,709
my twitter handle if you don't like to

22
00:00:59,709 --> 00:01:01,899
talk please contact me on Google+

23
00:01:01,899 --> 00:01:03,219
because I don't think you will be using

24
00:01:03,219 --> 00:01:06,220
it so skinny now I hope you do know I'm

25
00:01:06,220 --> 00:01:07,780
just kidding if you have any good or bad

26
00:01:07,780 --> 00:01:09,520
just let me know on Twitter all right

27
00:01:09,520 --> 00:01:12,730
aside from developing applications being

28
00:01:12,730 --> 00:01:14,830
developer for a long time and did a few

29
00:01:14,830 --> 00:01:17,560
architecture really to work project

30
00:01:17,560 --> 00:01:18,970
manager and all that but my other

31
00:01:18,970 --> 00:01:20,560
passion is definitely just traveling in

32
00:01:20,560 --> 00:01:22,360
photography so if you want to see some

33
00:01:22,360 --> 00:01:24,100
of the faces at being to you know check

34
00:01:24,100 --> 00:01:27,250
out my Flickr also under the name Saturn

35
00:01:27,250 --> 00:01:29,110
ISM as well now I have a lot to talk

36
00:01:29,110 --> 00:01:31,270
about today some guys now breeze through

37
00:01:31,270 --> 00:01:32,800
some of the introduction stuff and then

38
00:01:32,800 --> 00:01:34,300
jump into some of the code to show you

39
00:01:34,300 --> 00:01:37,240
exactly how this works and the reason I

40
00:01:37,240 --> 00:01:39,910
wanted to do this talk as well which are

41
00:01:39,910 --> 00:01:42,430
constructive is because that there is a

42
00:01:42,430 --> 00:01:44,530
trend of you know micro-services right

43
00:01:44,530 --> 00:01:46,630
I'm not going to go into any of the

44
00:01:46,630 --> 00:01:48,220
theories or whatever like what you

45
00:01:48,220 --> 00:01:49,390
should be doing and what you should be

46
00:01:49,390 --> 00:01:52,180
doing it but if you do want to say

47
00:01:52,180 --> 00:01:54,220
create a micro services application or

48
00:01:54,220 --> 00:01:56,350
if you do want to develop any sorts of

49
00:01:56,350 --> 00:02:00,010
distributed systems one of the things

50
00:02:00,010 --> 00:02:01,210
that you're going to realize really

51
00:02:01,210 --> 00:02:02,920
really quickly is that we're gonna be

52
00:02:02,920 --> 00:02:05,280
breaking down like a single application

53
00:02:05,280 --> 00:02:07,540
potentially that we traditionally do

54
00:02:07,540 --> 00:02:10,360
into multiple ones and there are

55
00:02:10,360 --> 00:02:12,609
consequences for doing this so you need

56
00:02:12,609 --> 00:02:14,200
to know why you need to be doing this in

57
00:02:14,200 --> 00:02:16,329
the first place right and also the

58
00:02:16,329 --> 00:02:17,889
consequences are potentially you need

59
00:02:17,889 --> 00:02:18,400
more

60
00:02:18,400 --> 00:02:21,099
DevOps you need more ways to be managed

61
00:02:21,099 --> 00:02:23,349
and being able to deploy and monitor

62
00:02:23,349 --> 00:02:26,110
these different individual instances of

63
00:02:26,110 --> 00:02:28,959
your application or your services you

64
00:02:28,959 --> 00:02:30,730
need to you know provision for them and

65
00:02:30,730 --> 00:02:34,209
such but there are a lot of worries but

66
00:02:34,209 --> 00:02:35,980
there's one thing that people often this

67
00:02:35,980 --> 00:02:38,319
is how do you communicate between the

68
00:02:38,319 --> 00:02:40,870
two services right how do you actually

69
00:02:40,870 --> 00:02:43,870
do that and I think today most of the

70
00:02:43,870 --> 00:02:47,110
times we kind of flow back to well let's

71
00:02:47,110 --> 00:02:49,900
use rest right it's JSON over HTTP it's

72
00:02:49,900 --> 00:02:51,730
well-known and that's kind of the

73
00:02:51,730 --> 00:02:54,069
default choice today all right but be

74
00:02:54,069 --> 00:02:55,989
careful they'll just because you know

75
00:02:55,989 --> 00:02:57,760
remember you know 10 plus years ago

76
00:02:57,760 --> 00:03:00,160
where you know some other technology

77
00:03:00,160 --> 00:03:02,290
what's the Depot choice and you also

78
00:03:02,290 --> 00:03:05,260
have consequences for those as well so I

79
00:03:05,260 --> 00:03:07,090
want to show you something new hopefully

80
00:03:07,090 --> 00:03:09,220
something you'll like today as well but

81
00:03:09,220 --> 00:03:11,230
then you may be saying RPC that sounds a

82
00:03:11,230 --> 00:03:13,599
little familiar no RPC is being around

83
00:03:13,599 --> 00:03:15,459
for a long time I don't know anyone here

84
00:03:15,459 --> 00:03:19,269
used core body for anyone yeah you love

85
00:03:19,269 --> 00:03:25,090
me I think so just for the research for

86
00:03:25,090 --> 00:03:26,739
my talk I mean I've done this a long

87
00:03:26,739 --> 00:03:29,290
time ago but I found this great tutorial

88
00:03:29,290 --> 00:03:30,669
I mean it's a really good tutorial on

89
00:03:30,669 --> 00:03:32,769
how to use crowbar and you just make

90
00:03:32,769 --> 00:03:35,410
sure you can see this right I mean first

91
00:03:35,410 --> 00:03:37,269
of all first off with most of the RPC

92
00:03:37,269 --> 00:03:38,859
frameworks you're going to start off

93
00:03:38,859 --> 00:03:40,540
with the IDL interface definition

94
00:03:40,540 --> 00:03:42,519
language this is so that you have

95
00:03:42,519 --> 00:03:44,889
something intermediate that's a language

96
00:03:44,889 --> 00:03:47,379
agnostic but then you can use this

97
00:03:47,379 --> 00:03:49,150
interface definition language to

98
00:03:49,150 --> 00:03:52,510
generate code for many other languages

99
00:03:52,510 --> 00:03:54,220
right so that's pretty straightforward

100
00:03:54,220 --> 00:03:56,980
we have a in this example there's an app

101
00:03:56,980 --> 00:04:00,040
you do addition for two integers okay

102
00:04:00,040 --> 00:04:02,290
just two loans just make keep on your

103
00:04:02,290 --> 00:04:04,569
mind just to owns okay and then you

104
00:04:04,569 --> 00:04:06,280
generate the code this is a tutorial for

105
00:04:06,280 --> 00:04:08,620
bar right if you're not ready code you

106
00:04:08,620 --> 00:04:11,169
have to stop and then you implement the

107
00:04:11,169 --> 00:04:12,790
operation right that's pretty

108
00:04:12,790 --> 00:04:14,680
straightforward - I mean yeah not bad

109
00:04:14,680 --> 00:04:16,690
you just one one method and then what

110
00:04:16,690 --> 00:04:18,488
got me is when you want to implement a

111
00:04:18,488 --> 00:04:22,960
server yeah just to add two integers

112
00:04:22,960 --> 00:04:25,090
together this is what you have to go

113
00:04:25,090 --> 00:04:28,539
through to start the server which I just

114
00:04:28,539 --> 00:04:31,240
got completely lost all right and then

115
00:04:31,240 --> 00:04:32,289
they screw it down a little bit more I

116
00:04:32,289 --> 00:04:33,580
mean this is a great tutorial if I ever

117
00:04:33,580 --> 00:04:34,960
need to do core by against is the

118
00:04:34,960 --> 00:04:37,210
tutorial we'll look and this is what I

119
00:04:37,210 --> 00:04:39,310
need to do to to generate the client or

120
00:04:39,310 --> 00:04:41,500
is to use the client and again there are

121
00:04:41,500 --> 00:04:43,060
a number of things here that I don't

122
00:04:43,060 --> 00:04:45,819
understand for example narrow anymore

123
00:04:45,819 --> 00:04:48,340
and naming contacts and all that stuff

124
00:04:48,340 --> 00:04:52,660
so now what's a state of art for RPC no

125
00:04:52,660 --> 00:04:55,060
wonder I guess you know nobody really

126
00:04:55,060 --> 00:04:58,120
think about RPC anymore and then the C

127
00:04:58,120 --> 00:05:00,009
column is RMI which is great for Java

128
00:05:00,009 --> 00:05:03,220
developers but the problem is well first

129
00:05:03,220 --> 00:05:04,870
of all you can you can create Java code

130
00:05:04,870 --> 00:05:06,159
write you can write interface you can

131
00:05:06,159 --> 00:05:07,840
write implementations you can expose

132
00:05:07,840 --> 00:05:10,630
them I say remote you know service and

133
00:05:10,630 --> 00:05:12,460
then you can just invoke it it's really

134
00:05:12,460 --> 00:05:15,069
nice it's really easy to do however it

135
00:05:15,069 --> 00:05:17,590
is not so interoperable right even

136
00:05:17,590 --> 00:05:18,819
though it's so easy to use

137
00:05:18,819 --> 00:05:20,409
you can't really interrupt between

138
00:05:20,409 --> 00:05:22,150
different platforms different languages

139
00:05:22,150 --> 00:05:24,250
and then somebody had an idea of what

140
00:05:24,250 --> 00:05:26,580
wait a second why don't we just use XML

141
00:05:26,580 --> 00:05:29,979
for the interchange right for for the

142
00:05:29,979 --> 00:05:31,810
messaging format is machine readable and

143
00:05:31,810 --> 00:05:34,270
it's human readable kinda as well

144
00:05:34,270 --> 00:05:36,759
and then we have this thing called soap

145
00:05:36,759 --> 00:05:39,250
which we can do both styles of remote

146
00:05:39,250 --> 00:05:40,960
country can do document style codes you

147
00:05:40,960 --> 00:05:42,960
can do RPC its style cause as well

148
00:05:42,960 --> 00:05:46,360
regardless well we came a long way right

149
00:05:46,360 --> 00:05:49,120
now today they set up our this JSON over

150
00:05:49,120 --> 00:05:51,849
HTTP or rest folk services in most cases

151
00:05:51,849 --> 00:05:55,449
but why would you even consider RPC

152
00:05:55,449 --> 00:05:58,630
after what I go went through in the past

153
00:05:58,630 --> 00:06:02,819
couple minutes well I think about this

154
00:06:02,819 --> 00:06:06,969
first of all RPC is hopefully or

155
00:06:06,969 --> 00:06:08,620
definitely gonna be a little bit more

156
00:06:08,620 --> 00:06:10,569
efficient than say

157
00:06:10,569 --> 00:06:13,389
juice I'm over HTTP why because in most

158
00:06:13,389 --> 00:06:14,800
cases there are going to be binary

159
00:06:14,800 --> 00:06:16,930
they're binary photo codes right

160
00:06:16,930 --> 00:06:18,759
so I remember years ago people are

161
00:06:18,759 --> 00:06:20,770
saying well soap is too slow XML too

162
00:06:20,770 --> 00:06:21,789
slow well guess what

163
00:06:21,789 --> 00:06:23,889
anything with text it's going to be too

164
00:06:23,889 --> 00:06:26,979
slow for you so so that's why RPC still

165
00:06:26,979 --> 00:06:28,870
has a place in the world because there

166
00:06:28,870 --> 00:06:30,599
are mostly just gonna be binary

167
00:06:30,599 --> 00:06:33,400
messaging there are strongly typed

168
00:06:33,400 --> 00:06:35,020
because you defined everything through

169
00:06:35,020 --> 00:06:36,909
the idea is strongly typed across

170
00:06:36,909 --> 00:06:38,860
multiple languages unless if you use

171
00:06:38,860 --> 00:06:40,479
something else that's you cannot do

172
00:06:40,479 --> 00:06:41,919
typing I don't know what one I mentioned

173
00:06:41,919 --> 00:06:43,810
which one and then

174
00:06:43,810 --> 00:06:46,120
think about this there for the restful

175
00:06:46,120 --> 00:06:48,190
services most of the times you operate

176
00:06:48,190 --> 00:06:51,370
on a resource and you're limited to kind

177
00:06:51,370 --> 00:06:53,980
of the the the semantics of the HTTP

178
00:06:53,980 --> 00:06:55,960
verbs which are the guests that put the

179
00:06:55,960 --> 00:06:57,940
patch right they delete they're mostly

180
00:06:57,940 --> 00:07:01,690
CR UD operations now if you want to

181
00:07:01,690 --> 00:07:03,340
implement some more complicated business

182
00:07:03,340 --> 00:07:06,370
processes in a remote procedure call for

183
00:07:06,370 --> 00:07:10,600
example or via JSON over HTTP right how

184
00:07:10,600 --> 00:07:12,100
would you actually do it suppose you

185
00:07:12,100 --> 00:07:14,740
need to transfer money between two

186
00:07:14,740 --> 00:07:17,200
accounts right what is the right verb to

187
00:07:17,200 --> 00:07:18,940
use for that how do you actually

188
00:07:18,940 --> 00:07:22,450
implement a restful service for that in

189
00:07:22,450 --> 00:07:25,210
RPC you can simply define an operation

190
00:07:25,210 --> 00:07:27,669
that says transfer and then taking two

191
00:07:27,669 --> 00:07:29,470
parameters and that will define the

192
00:07:29,470 --> 00:07:33,640
service so RPC can in my mind can only

193
00:07:33,640 --> 00:07:36,310
be great it was great but it can be

194
00:07:36,310 --> 00:07:38,080
better and be great and being used today

195
00:07:38,080 --> 00:07:41,430
only if it's simple to use and

196
00:07:41,430 --> 00:07:43,510
interoperable between different

197
00:07:43,510 --> 00:07:46,210
languages and that's where G RPC comes

198
00:07:46,210 --> 00:07:46,600
from

199
00:07:46,600 --> 00:07:49,120
now at Google we actually use a internal

200
00:07:49,120 --> 00:07:51,490
framework code stubby stubby is our

201
00:07:51,490 --> 00:07:53,410
internal RPC framework is used for it

202
00:07:53,410 --> 00:07:55,479
just about everything for remote

203
00:07:55,479 --> 00:07:58,030
procedure calls and we handle about 10

204
00:07:58,030 --> 00:08:01,000
to the 10 RPC calls per second with

205
00:08:01,000 --> 00:08:03,940
stubby it was made to be very very

206
00:08:03,940 --> 00:08:06,430
efficient now just imagine if we need to

207
00:08:06,430 --> 00:08:08,050
make that pin to the 10 number of codes

208
00:08:08,050 --> 00:08:10,630
with rest or anything else it may not be

209
00:08:10,630 --> 00:08:12,880
a sufficient right now only that if it

210
00:08:12,880 --> 00:08:15,490
just takes it one byte bigger in the

211
00:08:15,490 --> 00:08:17,860
message size means necessary we're

212
00:08:17,860 --> 00:08:19,419
looking at 10 to the 10 more bytes that

213
00:08:19,419 --> 00:08:21,370
we have to transfer across the wire

214
00:08:21,370 --> 00:08:24,910
right across the data centers and what

215
00:08:24,910 --> 00:08:27,039
happened is that Google wanted to

216
00:08:27,039 --> 00:08:29,530
open-source your stubby and another

217
00:08:29,530 --> 00:08:34,089
company code square was trying to like

218
00:08:34,089 --> 00:08:37,270
make the next generation off their RPC

219
00:08:37,270 --> 00:08:38,740
from work as well so I think what

220
00:08:38,740 --> 00:08:41,080
happened is that I heard this happen is

221
00:08:41,080 --> 00:08:43,089
when they joined forces and they said

222
00:08:43,089 --> 00:08:45,070
well why don't we just open source this

223
00:08:45,070 --> 00:08:47,800
stubby thing all together and call it G

224
00:08:47,800 --> 00:08:50,050
RPC and that's what your RPC came from

225
00:08:50,050 --> 00:08:52,660
it's actually you know coming from the

226
00:08:52,660 --> 00:08:54,430
best practices of both companies in a

227
00:08:54,430 --> 00:08:57,540
way now the G RPC is fully

228
00:08:57,540 --> 00:09:00,420
open source the G in G RPC does not

229
00:09:00,420 --> 00:09:04,530
stand for any companies I know of but

230
00:09:04,530 --> 00:09:07,440
it's a recursive acronym it's G RPC

231
00:09:07,440 --> 00:09:10,020
remote procedure code framework okay it

232
00:09:10,020 --> 00:09:11,310
is simple to use which are hopefully

233
00:09:11,310 --> 00:09:14,390
you'll agree the general idea Matic

234
00:09:14,390 --> 00:09:16,920
bindings for the languages it is

235
00:09:16,920 --> 00:09:18,660
definitely performant and scalable as we

236
00:09:18,660 --> 00:09:20,610
saw you know in the past white and its

237
00:09:20,610 --> 00:09:23,610
interoperable extensible the underlying

238
00:09:23,610 --> 00:09:25,260
technology that's being used are also

239
00:09:25,260 --> 00:09:27,300
open source aware there are standards

240
00:09:27,300 --> 00:09:29,610
for example for the IDL it used to

241
00:09:29,610 --> 00:09:31,320
support about by 3 which is another open

242
00:09:31,320 --> 00:09:34,380
source project from Google and the big

243
00:09:34,380 --> 00:09:36,960
yellow sorrow binary in there of course

244
00:09:36,960 --> 00:09:39,720
put up or three payloads as well which

245
00:09:39,720 --> 00:09:41,790
is you know maybe into efficient binary

246
00:09:41,790 --> 00:09:43,770
payloads the underlying transport

247
00:09:43,770 --> 00:09:46,920
between services is being is using HTTP

248
00:09:46,920 --> 00:09:49,800
2 rather than HTTP 1 now why is that

249
00:09:49,800 --> 00:09:52,680
important well HTTP 2 is also a binary

250
00:09:52,680 --> 00:09:55,650
protocol so number one what happens is

251
00:09:55,650 --> 00:09:57,450
then you don't spend a lot of bikes on

252
00:09:57,450 --> 00:09:59,370
just describing the verbs right the gets

253
00:09:59,370 --> 00:10:01,890
to put the patch whatever the headers

254
00:10:01,890 --> 00:10:03,810
are being compressed for you okay in

255
00:10:03,810 --> 00:10:05,820
HTTP 2 header compressions there so

256
00:10:05,820 --> 00:10:07,800
rather than spending again a lot of

257
00:10:07,800 --> 00:10:09,450
bikes just to specify all of your

258
00:10:09,450 --> 00:10:11,550
headers they're all going to be

259
00:10:11,550 --> 00:10:12,750
compressed for you as well

260
00:10:12,750 --> 00:10:17,340
we are the algorithm codec pack the the

261
00:10:17,340 --> 00:10:20,490
streams are multiplexed so in HTTP 1

262
00:10:20,490 --> 00:10:22,440
what happens when you need multiple you

263
00:10:22,440 --> 00:10:24,420
know connections or strings while you

264
00:10:24,420 --> 00:10:25,770
open multiple connections or you do

265
00:10:25,770 --> 00:10:29,130
pipelining and such well in HTTP 2 the

266
00:10:29,130 --> 00:10:32,430
multiplexing is default in in the in the

267
00:10:32,430 --> 00:10:34,620
transport so you can multiplex multiple

268
00:10:34,620 --> 00:10:36,180
streams so you don't have to open up

269
00:10:36,180 --> 00:10:39,510
multiple connections and I said the word

270
00:10:39,510 --> 00:10:42,180
string streaming is also default in

271
00:10:42,180 --> 00:10:44,400
native in HTTP 2 so rather than dealing

272
00:10:44,400 --> 00:10:47,390
with WebSockets you can actually do

273
00:10:47,390 --> 00:10:50,160
client-to-server streaming and server to

274
00:10:50,160 --> 00:10:51,840
your client streaming and bi-directional

275
00:10:51,840 --> 00:10:55,320
streaming as well yeah and that's a

276
00:10:55,320 --> 00:10:57,210
beauty into HTTP - ok

277
00:10:57,210 --> 00:10:59,940
and just to show you what that feels

278
00:10:59,940 --> 00:11:02,790
like to be on a binary protocol here is

279
00:11:02,790 --> 00:11:06,870
a demo page ok so if I have internet

280
00:11:06,870 --> 00:11:07,350
here

281
00:11:07,350 --> 00:11:09,990
so that's HTTP 1 which you know it's

282
00:11:09,990 --> 00:11:11,279
loading what 200 more

283
00:11:11,279 --> 00:11:16,560
and that's http/2 but here is some I

284
00:11:16,560 --> 00:11:18,529
guess Fossum just really fast here yeah

285
00:11:18,529 --> 00:11:22,379
but yeah there you go so I'm average you

286
00:11:22,379 --> 00:11:24,149
know you can definitely see HTTP 2 is

287
00:11:24,149 --> 00:11:27,660
going to be much faster now you're not

288
00:11:27,660 --> 00:11:29,790
really really me thing is the server

289
00:11:29,790 --> 00:11:31,589
casually pushed it up to the client

290
00:11:31,589 --> 00:11:33,240
before the client even asked us for it

291
00:11:33,240 --> 00:11:36,000
now that's really cool just imagine

292
00:11:36,000 --> 00:11:38,699
you're in a situation where what the

293
00:11:38,699 --> 00:11:40,829
client requests is like index.html and

294
00:11:40,829 --> 00:11:43,290
you know you know for a fact that they

295
00:11:43,290 --> 00:11:45,029
need like a CSS and all these other

296
00:11:45,029 --> 00:11:46,709
things well guess what you can just push

297
00:11:46,709 --> 00:11:48,120
it to the client before they even ask

298
00:11:48,120 --> 00:11:51,870
for ok now it is a binary protocol so of

299
00:11:51,870 --> 00:11:55,649
course we expect it to be faster so this

300
00:11:55,649 --> 00:11:58,259
is a comparison that they have posted on

301
00:11:58,259 --> 00:12:00,389
a public blog actually the throughput

302
00:12:00,389 --> 00:12:02,610
comparison in with the same machines you

303
00:12:02,610 --> 00:12:04,170
can see that you know obviously you can

304
00:12:04,170 --> 00:12:06,449
get more throughput but know what is

305
00:12:06,449 --> 00:12:08,910
more interesting to me though is the

306
00:12:08,910 --> 00:12:11,730
throughput per CPU okay and that's

307
00:12:11,730 --> 00:12:14,189
important because we're quickly moving

308
00:12:14,189 --> 00:12:16,319
into what people call it cognitive world

309
00:12:16,319 --> 00:12:17,910
and that doesn't necessarily mean you

310
00:12:17,910 --> 00:12:20,129
run the cloud but what that means is you

311
00:12:20,129 --> 00:12:21,569
want to be as efficient and nimble as

312
00:12:21,569 --> 00:12:24,360
possible for your services and with your

313
00:12:24,360 --> 00:12:26,639
PC you can you know process more with

314
00:12:26,639 --> 00:12:30,809
less CPU now what I also entails is that

315
00:12:30,809 --> 00:12:33,809
if you do run this on a mobile devices

316
00:12:33,809 --> 00:12:37,350
or smaller devices or IOT devices well

317
00:12:37,350 --> 00:12:39,540
it's going to be more efficient as well

318
00:12:39,540 --> 00:12:42,029
it's supposedly hopefully also use less

319
00:12:42,029 --> 00:12:43,589
battery for the same amount data you

320
00:12:43,589 --> 00:12:45,569
transfer transfer now I want you to

321
00:12:45,569 --> 00:12:47,670
focus on the language is that that your

322
00:12:47,670 --> 00:12:50,850
PC can support a number of them my

323
00:12:50,850 --> 00:12:52,889
favorites Java here but I want to focus

324
00:12:52,889 --> 00:12:55,680
on three which is subjects at C C sharp

325
00:12:55,680 --> 00:12:59,279
and Java that's because these three

326
00:12:59,279 --> 00:13:02,250
languages are being used in mobile

327
00:13:02,250 --> 00:13:04,379
devices as well G RPC was made with

328
00:13:04,379 --> 00:13:06,509
mobile first in mind right so you can

329
00:13:06,509 --> 00:13:09,120
use G RPC on the client side from these

330
00:13:09,120 --> 00:13:10,980
mobile devices whether it's an iPhone or

331
00:13:10,980 --> 00:13:14,189
iOS or Windows Phone or Android phone

332
00:13:14,189 --> 00:13:18,689
okay so let's see it let's see how much

333
00:13:18,689 --> 00:13:20,939
time I have I got 30 minutes

334
00:13:20,939 --> 00:13:23,569
well great

335
00:13:24,060 --> 00:13:28,060
okay so with your PC I'm going to do

336
00:13:28,060 --> 00:13:29,649
first of all I'm gonna implement a very

337
00:13:29,649 --> 00:13:31,870
simple client-server thing so you just

338
00:13:31,870 --> 00:13:34,839
get a feel and then next I'm going to do

339
00:13:34,839 --> 00:13:36,160
bi-directional streaming with a

340
00:13:36,160 --> 00:13:38,170
real-time chap application with jar PC

341
00:13:38,170 --> 00:13:40,029
I'm going to hopefully I'll do that

342
00:13:40,029 --> 00:13:42,070
within the next 20 or 30 minutes or so

343
00:13:42,070 --> 00:13:44,470
all right hopefully I said all right so

344
00:13:44,470 --> 00:13:46,570
with your PC the first thing I need to

345
00:13:46,570 --> 00:13:49,269
do is to use the ideal to define your

346
00:13:49,269 --> 00:13:51,160
payload and your services and these

347
00:13:51,160 --> 00:13:52,899
files are going to be called the portal

348
00:13:52,899 --> 00:13:54,250
files please there are put up up for

349
00:13:54,250 --> 00:13:57,370
three definitions and to make sure we're

350
00:13:57,370 --> 00:13:59,410
using put up our three we need to press

351
00:13:59,410 --> 00:14:03,430
a syntaxes photo 3 ok now I see I seen a

352
00:14:03,430 --> 00:14:06,130
lot of many hands who were Java

353
00:14:06,130 --> 00:14:09,310
developers it's ok if you you're not

354
00:14:09,310 --> 00:14:11,440
because hopefully the simple wall makes

355
00:14:11,440 --> 00:14:13,620
a lot of sense but in this ideal its

356
00:14:13,620 --> 00:14:15,970
Universal for all languages right and

357
00:14:15,970 --> 00:14:17,860
just like in Java or in many other

358
00:14:17,860 --> 00:14:19,810
languages we have the concept of a

359
00:14:19,810 --> 00:14:22,779
package or namespace so what I can do is

360
00:14:22,779 --> 00:14:25,149
I can say well let me put it under this

361
00:14:25,149 --> 00:14:27,819
package right so oh the payload over the

362
00:14:27,819 --> 00:14:29,470
services is going to be generated under

363
00:14:29,470 --> 00:14:32,920
this type of package this file is going

364
00:14:32,920 --> 00:14:35,430
to be processed by a generator right

365
00:14:35,430 --> 00:14:37,540
basically something that generates the

366
00:14:37,540 --> 00:14:39,519
actual source code the stops in that

367
00:14:39,519 --> 00:14:41,560
generator can taking different options

368
00:14:41,560 --> 00:14:43,209
so for example I can say something like

369
00:14:43,209 --> 00:14:47,889
option Java multiple files is equal to

370
00:14:47,889 --> 00:14:50,529
true when I means is what by default is

371
00:14:50,529 --> 00:14:52,990
going to generate all the classes into a

372
00:14:52,990 --> 00:14:55,360
single giant Java file right with

373
00:14:55,360 --> 00:14:57,579
everything inside you can specify

374
00:14:57,579 --> 00:14:59,470
options for the generator and this

375
00:14:59,470 --> 00:15:01,779
specific one just says well for any of

376
00:15:01,779 --> 00:15:04,480
these payload and services let's

377
00:15:04,480 --> 00:15:07,000
generate a different Java file for it ok

378
00:15:07,000 --> 00:15:10,000
so that's how you can I set this up now

379
00:15:10,000 --> 00:15:12,699
the next thing you do is to define the

380
00:15:12,699 --> 00:15:15,370
message ok and the syntax is pretty

381
00:15:15,370 --> 00:15:17,079
straightforward you just say message I'm

382
00:15:17,079 --> 00:15:21,339
going to say hello request example T RPC

383
00:15:21,339 --> 00:15:23,290
is just you know working based on the

384
00:15:23,290 --> 00:15:24,790
operation and the requesting the

385
00:15:24,790 --> 00:15:27,910
response ok in this request object or a

386
00:15:27,910 --> 00:15:28,930
payload

387
00:15:28,930 --> 00:15:30,310
structure whatever you want to call it

388
00:15:30,310 --> 00:15:32,500
you can define multiple attributes so

389
00:15:32,500 --> 00:15:35,640
for example I can say string is equal to

390
00:15:35,640 --> 00:15:39,149
name field and I can assign it a tag now

391
00:15:39,149 --> 00:15:42,060
you can see here is strongly type the

392
00:15:42,060 --> 00:15:43,829
name of the field is right here

393
00:15:43,829 --> 00:15:45,990
but then you're saying it an integer tag

394
00:15:45,990 --> 00:15:49,290
right that's because this tag is

395
00:15:49,290 --> 00:15:51,060
actually going to be the bikes like is

396
00:15:51,060 --> 00:15:52,769
sent across the wire to identify this

397
00:15:52,769 --> 00:15:55,230
field uniquely within this message pelo

398
00:15:55,230 --> 00:15:58,019
so rather than sending the string that's

399
00:15:58,019 --> 00:16:00,420
you know name which is sending the bike

400
00:16:00,420 --> 00:16:03,209
over okay however it takes to send the

401
00:16:03,209 --> 00:16:06,959
integer over okay so I can strongly type

402
00:16:06,959 --> 00:16:08,760
everything here so I can say age is two

403
00:16:08,760 --> 00:16:11,700
for example I can even do enumerations

404
00:16:11,700 --> 00:16:15,839
or in ohms so for example I can say enum

405
00:16:15,839 --> 00:16:19,920
is sentiment that's how good were

406
00:16:19,920 --> 00:16:22,500
feeling today I'm feeling pretty okay so

407
00:16:22,500 --> 00:16:25,649
I'm gonna say happy is equal to one

408
00:16:25,649 --> 00:16:30,149
I see and it could be a little sleepy

409
00:16:30,149 --> 00:16:33,120
right now which I hope not but I saw

410
00:16:33,120 --> 00:16:35,399
somebody yummy but so sleepy imma gonna

411
00:16:35,399 --> 00:16:38,160
say three kids go to one happy is zero

412
00:16:38,160 --> 00:16:40,019
and then by the end of this talk it

413
00:16:40,019 --> 00:16:41,910
might be extremely angry at me so I'm

414
00:16:41,910 --> 00:16:44,940
gonna say angry is equal to two right so

415
00:16:44,940 --> 00:16:47,880
once he has defined this you know you

416
00:16:47,880 --> 00:16:50,490
can say sentiment is equal to three

417
00:16:50,490 --> 00:16:52,529
right again don't don't get messed up

418
00:16:52,529 --> 00:16:54,120
with the Eco signs because if you say in

419
00:16:54,120 --> 00:16:56,790
the tag is equal to three right you can

420
00:16:56,790 --> 00:16:59,399
do if you need list of things you can

421
00:16:59,399 --> 00:17:01,769
code you can use the keyword repeat or

422
00:17:01,769 --> 00:17:06,119
repeat E string and going to say hobbies

423
00:17:06,119 --> 00:17:09,569
is equal to four something like that and

424
00:17:09,569 --> 00:17:11,750
you can also do strongly type in maps or

425
00:17:11,750 --> 00:17:14,280
just you know hash tables or something

426
00:17:14,280 --> 00:17:16,829
like that so I can say map and I can

427
00:17:16,829 --> 00:17:18,390
strongly type the key and it's wrongly

428
00:17:18,390 --> 00:17:20,849
type development and gotta say bag of

429
00:17:20,849 --> 00:17:21,809
tricks

430
00:17:21,809 --> 00:17:24,240
it goes to five okay now life coding is

431
00:17:24,240 --> 00:17:27,079
definitely not my bag of tricks here

432
00:17:27,079 --> 00:17:30,809
alright so so you can do all those right

433
00:17:30,809 --> 00:17:32,460
pretty straightforward and I can't do

434
00:17:32,460 --> 00:17:35,760
the same thing for the response string

435
00:17:35,760 --> 00:17:37,830
and greeting it is equal to one now

436
00:17:37,830 --> 00:17:40,020
the tags just need to be unique within

437
00:17:40,020 --> 00:17:42,540
the message payload itself the next

438
00:17:42,540 --> 00:17:43,830
thing that I can do once I have the

439
00:17:43,830 --> 00:17:45,660
request in the response then I can

440
00:17:45,660 --> 00:17:48,540
define the services so I can define a

441
00:17:48,540 --> 00:17:49,410
service code

442
00:17:49,410 --> 00:17:53,220
creaking service for example and here I

443
00:17:53,220 --> 00:17:55,290
can define the operations the RPC calls

444
00:17:55,290 --> 00:17:57,960
itself so here I'm going to say greeting

445
00:17:57,960 --> 00:18:02,370
and go to taking a hollow request I am

446
00:18:02,370 --> 00:18:04,950
going to return returns

447
00:18:04,950 --> 00:18:09,510
hello response okay and that's it that's

448
00:18:09,510 --> 00:18:11,370
all I need to do - you know define this

449
00:18:11,370 --> 00:18:15,030
interface now in geo PC you can do

450
00:18:15,030 --> 00:18:16,530
streaming as well you can do

451
00:18:16,530 --> 00:18:18,570
bi-directional streaming client side to

452
00:18:18,570 --> 00:18:20,910
server server to client and that's

453
00:18:20,910 --> 00:18:23,280
because we are using HTTP to behind the

454
00:18:23,280 --> 00:18:25,200
scenes to make something streaming all

455
00:18:25,200 --> 00:18:26,550
you have to do is to advocate what

456
00:18:26,550 --> 00:18:29,490
stream and that's it so in this case if

457
00:18:29,490 --> 00:18:30,990
I add the keyword here that means oh

458
00:18:30,990 --> 00:18:33,150
this is a client client side string so

459
00:18:33,150 --> 00:18:34,620
imagine if you have like devices

460
00:18:34,620 --> 00:18:36,030
assigned you to string metrics to the

461
00:18:36,030 --> 00:18:37,470
server well that's probably how you

462
00:18:37,470 --> 00:18:40,470
would do just say coin size string if

463
00:18:40,470 --> 00:18:42,000
you want the server side to stream

464
00:18:42,000 --> 00:18:44,790
responses back liking a chat application

465
00:18:44,790 --> 00:18:46,380
then you just put that stream in the

466
00:18:46,380 --> 00:18:48,420
response and that becomes a server side

467
00:18:48,420 --> 00:18:52,740
to client side stream okay all right so

468
00:18:52,740 --> 00:18:55,470
now that's so good now next thing I need

469
00:18:55,470 --> 00:18:57,720
to do is to generate the actual stops

470
00:18:57,720 --> 00:19:00,390
okay now the generation of these starts

471
00:19:00,390 --> 00:19:02,190
is a little bit different across

472
00:19:02,190 --> 00:19:04,080
different languages but they're tooling

473
00:19:04,080 --> 00:19:06,990
for it now in Java I like to use maven

474
00:19:06,990 --> 00:19:10,170
so you can use so plugging in a been

475
00:19:10,170 --> 00:19:11,670
working if you're using Gradle you can

476
00:19:11,670 --> 00:19:14,010
use the plug-in Guido as well so what I

477
00:19:14,010 --> 00:19:16,680
can do is go to the G RPC page so here

478
00:19:16,680 --> 00:19:19,980
is the G RPC source code - RPC statue

479
00:19:19,980 --> 00:19:22,200
RPC Java and they got the different ones

480
00:19:22,200 --> 00:19:24,330
for different languages as well now if I

481
00:19:24,330 --> 00:19:26,790
scroll down they got instructions here

482
00:19:26,790 --> 00:19:28,590
so for example I can add in the

483
00:19:28,590 --> 00:19:30,360
dependencies I don't do this very

484
00:19:30,360 --> 00:19:34,710
quickly dependencies okay and then and

485
00:19:34,710 --> 00:19:39,840
I'm gonna add in the de putte plugins

486
00:19:39,840 --> 00:19:42,870
here now that's maven don't don't be

487
00:19:42,870 --> 00:19:45,169
scared

488
00:19:45,690 --> 00:19:47,850
if you're in gueto you can see it's

489
00:19:47,850 --> 00:19:51,510
slightly easier right all right it's

490
00:19:51,510 --> 00:19:52,980
really up to you on what you want to use

491
00:19:52,980 --> 00:19:56,550
okay good now that's uh sorry let me

492
00:19:56,550 --> 00:20:01,080
just go ahead and do live and clean and

493
00:20:01,080 --> 00:20:03,450
let me do a maven package so happy now

494
00:20:03,450 --> 00:20:05,520
is that that the the generator is

495
00:20:05,520 --> 00:20:08,940
tidying into the packaging face or the

496
00:20:08,940 --> 00:20:09,720
compiler face

497
00:20:09,720 --> 00:20:12,690
sorry the compile phase of the cycle now

498
00:20:12,690 --> 00:20:14,070
what's interesting here though is that

499
00:20:14,070 --> 00:20:17,360
this plugin actually downloads the right

500
00:20:17,360 --> 00:20:20,250
binary for your architecture so if

501
00:20:20,250 --> 00:20:21,930
you're on a Mac it's going to download

502
00:20:21,930 --> 00:20:24,090
the Mac version if you're on Linux it's

503
00:20:24,090 --> 00:20:25,890
going to download the Linux version of

504
00:20:25,890 --> 00:20:26,790
the compiler

505
00:20:26,790 --> 00:20:28,680
it's your PC compiler with a generator

506
00:20:28,680 --> 00:20:30,300
okay different platforms needs a

507
00:20:30,300 --> 00:20:32,370
different binary but they really may be

508
00:20:32,370 --> 00:20:34,260
easy for a Java developers to get

509
00:20:34,260 --> 00:20:37,620
started as well okay so that's great so

510
00:20:37,620 --> 00:20:42,450
now if I see target I see it I should be

511
00:20:42,450 --> 00:20:44,760
able to see general resources and here I

512
00:20:44,760 --> 00:20:48,900
got pulled off and I got Java and here

513
00:20:48,900 --> 00:20:51,090
you can probably see it I have the

514
00:20:51,090 --> 00:20:52,680
request and response generally this is

515
00:20:52,680 --> 00:20:54,720
kind of expected right then let's go

516
00:20:54,720 --> 00:20:56,210
ahead and implement some of these things

517
00:20:56,210 --> 00:20:58,920
come right about 300 lines of code

518
00:20:58,920 --> 00:21:01,710
I'm scanning now so first of all I'm

519
00:21:01,710 --> 00:21:04,260
gonna create a implementation class I'm

520
00:21:04,260 --> 00:21:08,400
gonna say greeting service info no

521
00:21:08,400 --> 00:21:14,100
please don't hurt it and there you go

522
00:21:14,100 --> 00:21:16,650
okay so in this class what I want to do

523
00:21:16,650 --> 00:21:21,450
is to extend for example the stops in

524
00:21:21,450 --> 00:21:23,220
public I'll be doing this for most of

525
00:21:23,220 --> 00:21:25,080
the languages as well so I'm going to

526
00:21:25,080 --> 00:21:28,590
say extend the info base and then I just

527
00:21:28,590 --> 00:21:30,270
have to override a implement and method

528
00:21:30,270 --> 00:21:32,460
itself which was called greeting right

529
00:21:32,460 --> 00:21:35,400
and here I can see that I get a request

530
00:21:35,400 --> 00:21:40,920
and a response as a observer now this is

531
00:21:40,920 --> 00:21:44,160
interesting because in this stop on the

532
00:21:44,160 --> 00:21:47,700
server side this interface with this

533
00:21:47,700 --> 00:21:49,500
implementation or the symmetric

534
00:21:49,500 --> 00:21:50,610
signature looks like something that

535
00:21:50,610 --> 00:21:52,680
should be invoke a synchronously right

536
00:21:52,680 --> 00:21:55,050
so rather than having the response on

537
00:21:55,050 --> 00:21:57,330
the left-hand side as a return value you

538
00:21:57,330 --> 00:21:58,590
give the response

539
00:21:58,590 --> 00:22:01,080
through the observer as a callback okay

540
00:22:01,080 --> 00:22:03,240
so on the server side everything is

541
00:22:03,240 --> 00:22:06,750
implemented with async in mind okay now

542
00:22:06,750 --> 00:22:09,270
the client gets to choose whether they

543
00:22:09,270 --> 00:22:11,400
want to invoke this synchronously or

544
00:22:11,400 --> 00:22:13,080
synchronously but the server side to

545
00:22:13,080 --> 00:22:15,659
handle all of the cases its implemented

546
00:22:15,659 --> 00:22:17,460
as a sync by default

547
00:22:17,460 --> 00:22:19,320
okay so here I can do something like

548
00:22:19,320 --> 00:22:22,620
gone print out the request for example I

549
00:22:22,620 --> 00:22:24,210
can do that

550
00:22:24,210 --> 00:22:27,270
I can create a response hello response

551
00:22:27,270 --> 00:22:30,750
now in Java in G RPC implementation they

552
00:22:30,750 --> 00:22:32,789
love to use the buter pattern so

553
00:22:32,789 --> 00:22:34,890
everything is down the puter so what I

554
00:22:34,890 --> 00:22:38,520
means is I can't get a new butor I can

555
00:22:38,520 --> 00:22:40,559
set the tweaking field for example I'm

556
00:22:40,559 --> 00:22:44,190
gonna say hello plus requests that can't

557
00:22:44,190 --> 00:22:47,490
get name there you go and I'm going to

558
00:22:47,490 --> 00:22:49,980
do this I'm going to assign this to a

559
00:22:49,980 --> 00:22:52,169
local variable called response and then

560
00:22:52,169 --> 00:22:54,149
what I can do is to return this to the

561
00:22:54,149 --> 00:22:56,940
client guess what I use the observer so

562
00:22:56,940 --> 00:23:01,039
this is called the response observer and

563
00:23:01,039 --> 00:23:03,870
here we have three messages we got up

564
00:23:03,870 --> 00:23:07,350
next completed and on error what that

565
00:23:07,350 --> 00:23:09,419
means is if you do catch an exception

566
00:23:09,419 --> 00:23:12,690
you throw it back via on arrow if you

567
00:23:12,690 --> 00:23:15,419
want it to be sent to the client if you

568
00:23:15,419 --> 00:23:17,309
need to send data to the client you call

569
00:23:17,309 --> 00:23:19,470
next now even though this is a unary

570
00:23:19,470 --> 00:23:21,390
code meaning the client is only

571
00:23:21,390 --> 00:23:24,840
expecting one response you can actually

572
00:23:24,840 --> 00:23:28,140
call next multiple times which is not

573
00:23:28,140 --> 00:23:29,730
good right if you do it it's going to

574
00:23:29,730 --> 00:23:33,390
give you a runtime exception but but

575
00:23:33,390 --> 00:23:34,919
that's the way that this interface works

576
00:23:34,919 --> 00:23:36,690
now are we done

577
00:23:36,690 --> 00:23:39,149
so I say hey go and send this response

578
00:23:39,149 --> 00:23:41,820
to the client now here's the tricky part

579
00:23:41,820 --> 00:23:45,570
you have to call uncompleted as well so

580
00:23:45,570 --> 00:23:47,549
you can close the string otherwise the

581
00:23:47,549 --> 00:23:49,320
client will be hung and it will be

582
00:23:49,320 --> 00:23:51,779
waiting for the next thing forever I

583
00:23:51,779 --> 00:23:53,669
want to tell the connection times out or

584
00:23:53,669 --> 00:23:54,750
on here you go

585
00:23:54,750 --> 00:23:57,510
I'm completely for it to move on okay

586
00:23:57,510 --> 00:24:00,590
all right so far so good

587
00:24:00,590 --> 00:24:03,840
all right so now let's go ahead and

588
00:24:03,840 --> 00:24:06,270
implement this server to start this to

589
00:24:06,270 --> 00:24:09,149
start the server is extremely easy

590
00:24:09,149 --> 00:24:11,190
they love the pewter pattern so there's

591
00:24:11,190 --> 00:24:12,290
a server fever

592
00:24:12,290 --> 00:24:14,419
zooming a little bit here I'm gonna say

593
00:24:14,419 --> 00:24:16,790
server beautiful port I'm going to

594
00:24:16,790 --> 00:24:19,669
listen on port 8080 and then I can't go

595
00:24:19,669 --> 00:24:21,230
ahead and register the service that I

596
00:24:21,230 --> 00:24:23,330
just created basically you can just give

597
00:24:23,330 --> 00:24:25,549
it a new instance of that implementation

598
00:24:25,549 --> 00:24:29,179
and Bute and assign this to a variable

599
00:24:29,179 --> 00:24:32,299
Co server and you're done okay and once

600
00:24:32,299 --> 00:24:33,830
you have this reference what you can do

601
00:24:33,830 --> 00:24:36,440
is to just go server that start and

602
00:24:36,440 --> 00:24:38,750
that's going to start the G RPC server

603
00:24:38,750 --> 00:24:41,690
in the background thread and so before

604
00:24:41,690 --> 00:24:43,520
they I don't want this man's right to

605
00:24:43,520 --> 00:24:45,169
exit so I'm going to say await

606
00:24:45,169 --> 00:24:47,270
termination okay and that's it that

607
00:24:47,270 --> 00:24:48,500
should be it for the server

608
00:24:48,500 --> 00:24:50,390
I hope how many people think this will

609
00:24:50,390 --> 00:24:52,370
work oh wow

610
00:24:52,370 --> 00:24:54,500
Wow thank you thank you yeah just for

611
00:24:54,500 --> 00:24:56,750
the record on the on the video nobody

612
00:24:56,750 --> 00:24:58,700
raised their hand here I said thank you

613
00:24:58,700 --> 00:25:00,799
alright anyways I don't want it so sad

614
00:25:00,799 --> 00:25:02,000
all right let's try this it's

615
00:25:02,000 --> 00:25:04,010
unbelievable that this will work and I

616
00:25:04,010 --> 00:25:09,080
agree with you let's so let's see can

617
00:25:09,080 --> 00:25:12,290
actually award so what happened is the

618
00:25:12,290 --> 00:25:13,790
the server is in the background thread

619
00:25:13,790 --> 00:25:16,160
and I'm not printing anything so this is

620
00:25:16,160 --> 00:25:18,590
it so the server is running I think all

621
00:25:18,590 --> 00:25:26,330
right the server is fun so the only way

622
00:25:26,330 --> 00:25:27,830
to try this out is to implement the

623
00:25:27,830 --> 00:25:32,360
client alright so if it doesn't work I

624
00:25:32,360 --> 00:25:34,820
got I got six postings right now for the

625
00:25:34,820 --> 00:25:36,799
client I got establish a connection to

626
00:25:36,799 --> 00:25:38,630
the server now rather than dealing with

627
00:25:38,630 --> 00:25:40,790
the TCP connections yourself or even the

628
00:25:40,790 --> 00:25:42,890
HTTP two connections yourself

629
00:25:42,890 --> 00:25:45,260
they abstract everything away and they

630
00:25:45,260 --> 00:25:47,240
give you this thing called a channel so

631
00:25:47,240 --> 00:25:48,530
what I can do is to create a new channel

632
00:25:48,530 --> 00:25:50,929
and I do that through a pewter of course

633
00:25:50,929 --> 00:25:55,700
I can't do for the local host port a DD

634
00:25:55,700 --> 00:26:00,070
okay and I'm going to use the plain text

635
00:26:00,070 --> 00:26:02,600
just because I mean the bevy of Armant

636
00:26:02,600 --> 00:26:06,770
I'm not setting up any SSL and let's go

637
00:26:06,770 --> 00:26:08,570
ahead and beauty okay

638
00:26:08,570 --> 00:26:11,419
I'm going to assign this to channel now

639
00:26:11,419 --> 00:26:13,640
this interesting part here is that um

640
00:26:13,640 --> 00:26:16,190
let's see here I can't do an in

641
00:26:16,190 --> 00:26:19,280
voiceover yeah so this is currently this

642
00:26:19,280 --> 00:26:21,620
is just going to point right the client

643
00:26:21,620 --> 00:26:23,990
to the server that's well-known if you

644
00:26:23,990 --> 00:26:25,580
do need to low balance across

645
00:26:25,580 --> 00:26:27,980
to both services or multiple G RPC

646
00:26:27,980 --> 00:26:30,140
endpoints well you have two facilities

647
00:26:30,140 --> 00:26:31,820
that can help you one is called the

648
00:26:31,820 --> 00:26:34,070
neighbors over basically helping you to

649
00:26:34,070 --> 00:26:36,410
give a service name in identify and

650
00:26:36,410 --> 00:26:39,560
return a list of endpoints that the

651
00:26:39,560 --> 00:26:41,810
service is being served from and on the

652
00:26:41,810 --> 00:26:46,250
client side you can then set up a load

653
00:26:46,250 --> 00:26:48,950
balancer factory to you know low balance

654
00:26:48,950 --> 00:26:52,100
across the list of endpoints and you can

655
00:26:52,100 --> 00:26:53,600
provide your own load balancing strategy

656
00:26:53,600 --> 00:26:55,280
or you can use the default one which is

657
00:26:55,280 --> 00:26:58,220
more like run wrapping strategy ok so

658
00:26:58,220 --> 00:26:59,720
now once you have the channel you can

659
00:26:59,720 --> 00:27:02,540
you you can create a stop to send

660
00:27:02,540 --> 00:27:04,580
traffic over the channel and to do that

661
00:27:04,580 --> 00:27:07,040
I'm gonna say G RPC Kesari greeting

662
00:27:07,040 --> 00:27:10,190
service in co2 RPC I can say a new stop

663
00:27:10,190 --> 00:27:13,010
now here's the interesting part right at

664
00:27:13,010 --> 00:27:13,700
least in Java

665
00:27:13,700 --> 00:27:15,920
when you do a new stop you have three

666
00:27:15,920 --> 00:27:18,260
options I mentioned before the server is

667
00:27:18,260 --> 00:27:20,570
always implemented as synchronously but

668
00:27:20,570 --> 00:27:22,730
it's up to the client to decide whether

669
00:27:22,730 --> 00:27:24,680
they want to block or not so you can

670
00:27:24,680 --> 00:27:26,360
create a new blocking stop which will

671
00:27:26,360 --> 00:27:28,850
block this call and get the return value

672
00:27:28,850 --> 00:27:31,460
in where we expect you can also get a

673
00:27:31,460 --> 00:27:32,870
future stop with your returning your

674
00:27:32,870 --> 00:27:35,060
Java feature where you can use the

675
00:27:35,060 --> 00:27:37,400
synchronous stop as well okay so for

676
00:27:37,400 --> 00:27:39,020
this example I'm gonna go ahead and just

677
00:27:39,020 --> 00:27:43,670
use the blocking stop okay and we come

678
00:27:43,670 --> 00:27:46,670
to assign this to a variable stop okay

679
00:27:46,670 --> 00:27:49,220
now we can actually make a call so I can

680
00:27:49,220 --> 00:27:54,200
say stop treating okay hello request I'm

681
00:27:54,200 --> 00:27:58,460
gonna use the new buter okay and in here

682
00:27:58,460 --> 00:28:00,260
I'm going to do I'm going to set my name

683
00:28:00,260 --> 00:28:07,900
- ready set age Oh 18 yeah

684
00:28:07,950 --> 00:28:12,130
at hobby so I can say coding right I can

685
00:28:12,130 --> 00:28:16,780
put back off tricks coding not live

686
00:28:16,780 --> 00:28:19,270
coding okay something like that right so

687
00:28:19,270 --> 00:28:20,920
if you can see generates all the methods

688
00:28:20,920 --> 00:28:23,860
for you it's so typesafe as soon as you

689
00:28:23,860 --> 00:28:25,210
stick with it the schoolteacher nari the

690
00:28:25,210 --> 00:28:28,860
right pelo for you and then I'm going to

691
00:28:28,860 --> 00:28:31,330
get the response back now because this

692
00:28:31,330 --> 00:28:34,600
is a synchronous stop I can't just get a

693
00:28:34,600 --> 00:28:35,620
response back I'm sorry

694
00:28:35,620 --> 00:28:37,000
yeah it's a blocking stop so I can't get

695
00:28:37,000 --> 00:28:38,860
a response back in the return value

696
00:28:38,860 --> 00:28:40,720
and in the end I'm going to go ahead and

697
00:28:40,720 --> 00:28:46,690
print it okay I'm gonna try this again

698
00:28:46,690 --> 00:28:51,160
how many people thinks it's a quirk wow

699
00:28:51,160 --> 00:28:53,530
the same number of hands okay I guess I

700
00:28:53,530 --> 00:28:55,390
have to work harder okay so here I'm

701
00:28:55,390 --> 00:28:58,920
going to do package and do it exact

702
00:28:58,920 --> 00:29:01,750
let's see let me just zoom in here I'm

703
00:29:01,750 --> 00:29:04,900
gonna move the response out of the view

704
00:29:04,900 --> 00:29:06,760
so you can't see it I think it worked

705
00:29:06,760 --> 00:29:08,740
I'm just kidding alright let's scroll

706
00:29:08,740 --> 00:29:10,240
down hold on a second I'm gonna scroll

707
00:29:10,240 --> 00:29:12,640
down there you go right so you can see

708
00:29:12,640 --> 00:29:15,190
that you actually connected well thank

709
00:29:15,190 --> 00:29:17,310
you

710
00:29:20,480 --> 00:29:23,460
and on the server side you can see we

711
00:29:23,460 --> 00:29:24,929
also generate all the two strings for

712
00:29:24,929 --> 00:29:26,429
you so you can you know if you really

713
00:29:26,429 --> 00:29:27,929
want to you can print this out so you

714
00:29:27,929 --> 00:29:31,789
can see all of the things I entered okay

715
00:29:31,789 --> 00:29:34,350
so that's not so hard that's pretty

716
00:29:34,350 --> 00:29:37,379
simple and straightforward for a simple

717
00:29:37,379 --> 00:29:39,809
service I would say right so the next

718
00:29:39,809 --> 00:29:41,970
thing I need to do I think I have on tou

719
00:29:41,970 --> 00:29:46,049
live in 20 right even the 2015 is left

720
00:29:46,049 --> 00:29:48,870
great so in the next couple of minutes

721
00:29:48,870 --> 00:29:51,629
what I'm going to do is I'm going to you

722
00:29:51,629 --> 00:29:54,149
know write some a few more lines of code

723
00:29:54,149 --> 00:29:56,610
to basically create a real-time chat

724
00:29:56,610 --> 00:29:59,370
server in the chat client in Java with

725
00:29:59,370 --> 00:30:01,500
your PC by using bi-directional

726
00:30:01,500 --> 00:30:03,389
streaming okay so I'm going to close

727
00:30:03,389 --> 00:30:06,259
this out and if I go to the chat server

728
00:30:06,259 --> 00:30:08,399
most of the bootstrapping here it's done

729
00:30:08,399 --> 00:30:09,539
because I went through the basics

730
00:30:09,539 --> 00:30:11,490
already so the only thing I want to show

731
00:30:11,490 --> 00:30:13,950
you is the proto file now in this

732
00:30:13,950 --> 00:30:16,379
profile like I mentioned if you want a

733
00:30:16,379 --> 00:30:17,870
streaming service you just put stream

734
00:30:17,870 --> 00:30:20,460
the side that you want to string in this

735
00:30:20,460 --> 00:30:22,590
case I want bidirectional streaming so i

736
00:30:22,590 --> 00:30:24,029
got stream on the left and stream on the

737
00:30:24,029 --> 00:30:26,399
right okay it's going to generate stub

738
00:30:26,399 --> 00:30:29,070
that looks like this line to implement

739
00:30:29,070 --> 00:30:30,750
so i'm going to open up the service

740
00:30:30,750 --> 00:30:37,289
implementation here okay now don't be

741
00:30:37,289 --> 00:30:39,090
scared again everyone going she's a

742
00:30:39,090 --> 00:30:40,769
little bit different this is just how

743
00:30:40,769 --> 00:30:43,409
Java works so it's a little bit more

744
00:30:43,409 --> 00:30:45,809
verbose here but it's fine it looks

745
00:30:45,809 --> 00:30:48,779
perfectly fine now so a few things I

746
00:30:48,779 --> 00:30:50,970
want to touch on here is that oh the

747
00:30:50,970 --> 00:30:53,309
message passing is being done through a

748
00:30:53,309 --> 00:30:54,929
Kobach interface code the stream

749
00:30:54,929 --> 00:30:57,960
observer whatever the client sends the

750
00:30:57,960 --> 00:31:00,690
data to the server guess what is the

751
00:31:00,690 --> 00:31:02,639
server will have a stream of server that

752
00:31:02,639 --> 00:31:04,740
listens to all next what you want to

753
00:31:04,740 --> 00:31:06,120
send the data back to the client

754
00:31:06,120 --> 00:31:07,860
we already saw you're going to get a

755
00:31:07,860 --> 00:31:09,299
stream observer reference and you're

756
00:31:09,299 --> 00:31:10,980
going to call next and send it out to

757
00:31:10,980 --> 00:31:15,059
the client so in this case since this is

758
00:31:15,059 --> 00:31:16,590
bi-directional streaming so what I'm

759
00:31:16,590 --> 00:31:17,970
going to do is I'm going to create

760
00:31:17,970 --> 00:31:20,519
basically return the new stream observer

761
00:31:20,519 --> 00:31:22,350
that will have this uh next

762
00:31:22,350 --> 00:31:24,210
implementation that's going to be

763
00:31:24,210 --> 00:31:26,580
listening to the data from the client

764
00:31:26,580 --> 00:31:29,340
and what I have done here is every time

765
00:31:29,340 --> 00:31:31,019
the client connects I'm going to add it

766
00:31:31,019 --> 00:31:31,530
to

767
00:31:31,530 --> 00:31:33,240
a list of clients that's currently

768
00:31:33,240 --> 00:31:35,460
connected and so what happens when I

769
00:31:35,460 --> 00:31:38,160
receive the message from the client is I

770
00:31:38,160 --> 00:31:39,930
need to broadcast it to all of the other

771
00:31:39,930 --> 00:31:41,700
clients that's currently connected as

772
00:31:41,700 --> 00:31:44,280
well so for that I can do I have a list

773
00:31:44,280 --> 00:31:47,160
of observers I can use the string and I

774
00:31:47,160 --> 00:31:48,720
can say for each of the string

775
00:31:48,720 --> 00:31:52,560
Oh observer and I can't do O'Donnell

776
00:31:52,560 --> 00:31:54,810
next right and here I can give you the

777
00:31:54,810 --> 00:31:56,730
chat message now what the gentleman said

778
00:31:56,730 --> 00:31:59,010
she looks like well I'm going to I typed

779
00:31:59,010 --> 00:32:01,110
it specifically to call a chat message

780
00:32:01,110 --> 00:32:02,610
from the server so that there's no

781
00:32:02,610 --> 00:32:05,130
confusion so I can do a new butor right

782
00:32:05,130 --> 00:32:09,600
and Bute and can assign this to the well

783
00:32:09,600 --> 00:32:13,170
I can send this to the variable chat for

784
00:32:13,170 --> 00:32:15,960
example now what goes in here is going

785
00:32:15,960 --> 00:32:18,210
to be the data payload I want to send to

786
00:32:18,210 --> 00:32:21,030
the client so I'm going to say oh let me

787
00:32:21,030 --> 00:32:24,420
see here new pewter yeah there we go

788
00:32:24,420 --> 00:32:27,690
so I can say set message and I'm just

789
00:32:27,690 --> 00:32:29,850
going to take the message in that's on

790
00:32:29,850 --> 00:32:31,920
the client okay that should be it so I'm

791
00:32:31,920 --> 00:32:33,540
iterating through all of the currently

792
00:32:33,540 --> 00:32:35,460
connected clients or observers I am

793
00:32:35,460 --> 00:32:37,320
going to send everyone the same thing

794
00:32:37,320 --> 00:32:40,650
okay number one number two if the client

795
00:32:40,650 --> 00:32:43,140
gives me an arrow so Java developers -

796
00:32:43,140 --> 00:32:48,390
we do nothing here I actually probably

797
00:32:48,390 --> 00:32:50,670
remove the observers from this stream so

798
00:32:50,670 --> 00:32:55,200
I do a response observer all right and

799
00:32:55,200 --> 00:32:57,780
I'm going to do the same I'm complete

800
00:32:57,780 --> 00:33:00,390
let's see that should be the server then

801
00:33:00,390 --> 00:33:01,920
you should make sure icon oh the means

802
00:33:01,920 --> 00:33:03,870
close all right

803
00:33:03,870 --> 00:33:05,940
that's not so hard despite the original

804
00:33:05,940 --> 00:33:08,250
trimming in a few lines of code mostly

805
00:33:08,250 --> 00:33:10,230
auto-generated for you by IntelliJ

806
00:33:10,230 --> 00:33:12,990
alright so let's see here so I'm going

807
00:33:12,990 --> 00:33:15,840
to wrong this server hopefully this will

808
00:33:15,840 --> 00:33:19,920
work as well okay very good

809
00:33:19,920 --> 00:33:22,230
server it's home just like before yeah

810
00:33:22,230 --> 00:33:23,760
okay that's a good sign

811
00:33:23,760 --> 00:33:27,840
given the history alright so let's go

812
00:33:27,840 --> 00:33:29,880
ahead and implement the the client okay

813
00:33:29,880 --> 00:33:33,960
so now I have a Java FX client so just

814
00:33:33,960 --> 00:33:37,320
so I don't have to deal with other front

815
00:33:37,320 --> 00:33:39,000
ends right so what this client looks

816
00:33:39,000 --> 00:33:43,530
like is if I - JavaFX wrong

817
00:33:43,530 --> 00:33:47,370
okay so basically you can whoa what just

818
00:33:47,370 --> 00:33:48,240
happened all right

819
00:33:48,240 --> 00:33:49,650
basically you can type in the name and

820
00:33:49,650 --> 00:33:51,930
you can say hello and hopefully when you

821
00:33:51,930 --> 00:33:53,460
click on that same button it's going to

822
00:33:53,460 --> 00:33:56,370
go say to be sent to the server and

823
00:33:56,370 --> 00:33:58,320
hopefully also you're going to see the

824
00:33:58,320 --> 00:34:00,180
message payload coming back okay so

825
00:34:00,180 --> 00:34:01,860
that's the thing we want to implement so

826
00:34:01,860 --> 00:34:04,650
here I already have establish the

827
00:34:04,650 --> 00:34:06,720
connection I'll open up the channel just

828
00:34:06,720 --> 00:34:09,480
like before I created the stop now this

829
00:34:09,480 --> 00:34:11,520
stuff is actually the async stop so what

830
00:34:11,520 --> 00:34:13,139
that means is you actually get the

831
00:34:13,139 --> 00:34:15,110
streamlet servers in both ways as well

832
00:34:15,110 --> 00:34:17,340
so let's make a call so let's see what

833
00:34:17,340 --> 00:34:17,790
that looks like

834
00:34:17,790 --> 00:34:21,989
so chat service dock creaking the chat

835
00:34:21,989 --> 00:34:24,510
sorry it's going to taking a stream of

836
00:34:24,510 --> 00:34:26,639
server and it's going to return you

837
00:34:26,639 --> 00:34:30,770
extra my server as well okay so Chad

838
00:34:30,770 --> 00:34:34,800
chat message stream observer okay so let

839
00:34:34,800 --> 00:34:37,649
me just make this a little bit more

840
00:34:37,649 --> 00:34:40,560
stands I'm gonna say chat messages to

841
00:34:40,560 --> 00:34:44,699
server okay so in this aisle next this

842
00:34:44,699 --> 00:34:47,909
uh next Kobach will be triggered every

843
00:34:47,909 --> 00:34:50,100
time the server sends the message to me

844
00:34:50,100 --> 00:34:53,639
okay so every time that the message the

845
00:34:53,639 --> 00:34:55,530
server sends message to me guess what I

846
00:34:55,530 --> 00:34:57,840
need to add the messages the message

847
00:34:57,840 --> 00:35:00,750
into the view so what I can do is say ah

848
00:35:00,750 --> 00:35:03,960
and here I can say well what do I need

849
00:35:03,960 --> 00:35:07,140
to add I'm gonna add the content of the

850
00:35:07,140 --> 00:35:09,300
whatever that's being sent to me so I

851
00:35:09,300 --> 00:35:11,520
have the front field okay I'm going to

852
00:35:11,520 --> 00:35:15,030
plus I'm going to add in the message

853
00:35:15,030 --> 00:35:19,080
field as well the actual text and I

854
00:35:19,080 --> 00:35:21,510
should be it now because I'm running

855
00:35:21,510 --> 00:35:23,370
Java packs I should be running a

856
00:35:23,370 --> 00:35:25,800
platform run later and what that means

857
00:35:25,800 --> 00:35:28,790
is because I need to execute this in the

858
00:35:28,790 --> 00:35:32,150
UI thread so that's what I'm going to do

859
00:35:32,150 --> 00:35:36,390
when I get the arrow from the server you

860
00:35:36,390 --> 00:35:39,560
guessed it let's not do anything for now

861
00:35:39,560 --> 00:35:42,690
when you're complete I'm not gonna do

862
00:35:42,690 --> 00:35:43,470
anything either

863
00:35:43,470 --> 00:35:47,100
okay now when somebody pressed on the

864
00:35:47,100 --> 00:35:49,470
button to say hey I got I want to send a

865
00:35:49,470 --> 00:35:51,450
new chat message what I do well let me

866
00:35:51,450 --> 00:35:53,370
make the call so I'm going to say the

867
00:35:53,370 --> 00:35:55,530
same but instead on action right and

868
00:35:55,530 --> 00:35:57,100
it's going to community vent

869
00:35:57,100 --> 00:36:00,340
and what I can do is here I can then

870
00:36:00,340 --> 00:36:02,050
make the call to send the data to the

871
00:36:02,050 --> 00:36:04,600
server how do I do that through the

872
00:36:04,600 --> 00:36:08,560
observer um next right and I can say a

873
00:36:08,560 --> 00:36:11,830
chat message new pewter copy ute and

874
00:36:11,830 --> 00:36:16,150
let's just make sure I cut this Oh cut

875
00:36:16,150 --> 00:36:18,970
it out so I can say the message from

876
00:36:18,970 --> 00:36:21,280
which is the name docket text so that's

877
00:36:21,280 --> 00:36:22,750
what people entering the name field and

878
00:36:22,750 --> 00:36:24,910
then I can't say the message and that's

879
00:36:24,910 --> 00:36:27,370
message you don't get a text okay who

880
00:36:27,370 --> 00:36:30,340
live coding all right I think that's it

881
00:36:30,340 --> 00:36:32,200
I think I really think this is it I

882
00:36:32,200 --> 00:36:34,870
think all right hum I'm gonna do another

883
00:36:34,870 --> 00:36:36,040
poll how many people think this will

884
00:36:36,040 --> 00:36:36,660
work

885
00:36:36,660 --> 00:36:39,490
Wow steel okay I'll get more hands all

886
00:36:39,490 --> 00:36:43,450
right all right let's try this nice

887
00:36:43,450 --> 00:36:45,040
right it's gonna have no idea all right

888
00:36:45,040 --> 00:36:47,230
so I'm glad you jump all the way that's

889
00:36:47,230 --> 00:36:50,920
not gonna work I need to if you I need

890
00:36:50,920 --> 00:36:52,600
to compile I need to compile for it so I

891
00:36:52,600 --> 00:36:56,819
can do either way let me do package in

892
00:36:57,800 --> 00:37:02,480
oh boy all right so just so you know the

893
00:37:02,480 --> 00:37:04,850
sorts call you if I open it up so I'm

894
00:37:04,850 --> 00:37:07,370
not cheating or I'm not like running

895
00:37:07,370 --> 00:37:11,330
this off on another server here logo is

896
00:37:11,330 --> 00:37:13,850
going to localhost 149 90 which is what

897
00:37:13,850 --> 00:37:16,310
I'm listening out all right so let's try

898
00:37:16,310 --> 00:37:21,070
this ray hello Boston huh

899
00:37:21,070 --> 00:37:23,420
first thing first thing that's very easy

900
00:37:23,420 --> 00:37:24,800
though that's the only one client I

901
00:37:24,800 --> 00:37:26,750
could easily have chillie so I'm going

902
00:37:26,750 --> 00:37:28,880
to do is that I'm going to start another

903
00:37:28,880 --> 00:37:31,210
one

904
00:37:32,350 --> 00:37:37,190
okay and I'm gonna zoom in a little bit

905
00:37:37,190 --> 00:37:39,350
do I see you often in your faces here no

906
00:37:39,350 --> 00:37:40,940
not yet so what I'm going to do I'm

907
00:37:40,940 --> 00:37:43,310
gonna be my manager gonna be a great

908
00:37:43,310 --> 00:37:45,590
that's my manager I'm gonna say good job

909
00:37:45,590 --> 00:37:59,270
right alright so that's how easy you can

910
00:37:59,270 --> 00:38:01,610
use GRP see hopefully you see the some

911
00:38:01,610 --> 00:38:04,280
other benefits you know again it works

912
00:38:04,280 --> 00:38:05,870
with multiple multiple different

913
00:38:05,870 --> 00:38:08,450
platforms now before I close up and see

914
00:38:08,450 --> 00:38:10,160
I got three minutes if you want to say

915
00:38:10,160 --> 00:38:11,840
there's a lot more than just simple

916
00:38:11,840 --> 00:38:14,090
request and response in streaming you

917
00:38:14,090 --> 00:38:17,150
know streaming is simple now you can

918
00:38:17,150 --> 00:38:19,130
also set deadlines so if you're making

919
00:38:19,130 --> 00:38:22,340
multiple services calls and just imagine

920
00:38:22,340 --> 00:38:23,630
you're doing that it should be the code

921
00:38:23,630 --> 00:38:25,460
to multiple multiple services and

922
00:38:25,460 --> 00:38:26,870
servers and one of them is really slow

923
00:38:26,870 --> 00:38:29,120
what some of them is really slow but you

924
00:38:29,120 --> 00:38:31,310
got return stuff to the client well what

925
00:38:31,310 --> 00:38:32,630
can you do is you can actually set the

926
00:38:32,630 --> 00:38:35,780
deadline for the top-level service call

927
00:38:35,780 --> 00:38:37,970
and it will be propagated to all the

928
00:38:37,970 --> 00:38:40,010
services beneath it so if the first code

929
00:38:40,010 --> 00:38:42,140
takes one second right and then the

930
00:38:42,140 --> 00:38:43,940
subsequent code takes like you know two

931
00:38:43,940 --> 00:38:45,830
seconds and your deadline is two seconds

932
00:38:45,830 --> 00:38:47,570
you know you're currently you have the

933
00:38:47,570 --> 00:38:48,950
total of three well guess what that

934
00:38:48,950 --> 00:38:51,650
entire stack will be cancelled and the

935
00:38:51,650 --> 00:38:53,270
the client so the server side will

936
00:38:53,270 --> 00:38:55,610
receive a cancellation notification as

937
00:38:55,610 --> 00:38:57,830
well so you can close up the transaction

938
00:38:57,830 --> 00:38:59,660
cleanly

939
00:38:59,660 --> 00:39:02,090
you can also propagate a metadata so you

940
00:39:02,090 --> 00:39:04,370
can do this via the HTTP two headers and

941
00:39:04,370 --> 00:39:06,770
you can also propagate a context so you

942
00:39:06,770 --> 00:39:08,240
can pass the same variables across

943
00:39:08,240 --> 00:39:11,150
multiple services within the same

944
00:39:11,150 --> 00:39:12,980
if you need to go across the boundary

945
00:39:12,980 --> 00:39:15,200
across Network boundary then you need to

946
00:39:15,200 --> 00:39:16,940
propagate the data via main idea and

947
00:39:16,940 --> 00:39:19,130
that is particularly great because then

948
00:39:19,130 --> 00:39:20,390
you can do something you can do

949
00:39:20,390 --> 00:39:21,920
interesting thing like hey putting a

950
00:39:21,920 --> 00:39:24,440
security token on the top right you can

951
00:39:24,440 --> 00:39:25,640
do the trippity tracing with

952
00:39:25,640 --> 00:39:27,529
interceptors you can passing the trace

953
00:39:27,529 --> 00:39:30,529
IDs across all of your services there

954
00:39:30,529 --> 00:39:31,460
are actually really really good

955
00:39:31,460 --> 00:39:33,769
ecosystems around gr PC at this moment

956
00:39:33,769 --> 00:39:35,960
you can do load balancing and service

957
00:39:35,960 --> 00:39:37,640
registries and you can do some kills

958
00:39:37,640 --> 00:39:40,309
tracking as well you can find a lot of

959
00:39:40,309 --> 00:39:42,529
this information on the gr PC website

960
00:39:42,529 --> 00:39:45,980
just go to gr PCI Oh we want to hear

961
00:39:45,980 --> 00:39:47,539
your feedback and we want to get your

962
00:39:47,539 --> 00:39:50,180
contributions as well it is fully open

963
00:39:50,180 --> 00:39:53,569
source they'll come to the IRC you know

964
00:39:53,569 --> 00:39:55,579
check out the Twitter and join the forum

965
00:39:55,579 --> 00:39:57,619
groups and a lot of these things are

966
00:39:57,619 --> 00:39:59,599
actually on like github so if you want

967
00:39:59,599 --> 00:40:01,460
to find some of these code just go to

968
00:40:01,460 --> 00:40:03,980
github.com slash Saturn is in and you're

969
00:40:03,980 --> 00:40:06,619
going to see some GRP C Java examples so

970
00:40:06,619 --> 00:40:09,849
thank you very much for your time

971
00:40:13,830 --> 00:40:16,680
we got time for questions wait we have

972
00:40:16,680 --> 00:40:19,800
five minutes for questions so questions

973
00:40:19,800 --> 00:40:22,260
question number was already at the hands

974
00:40:22,260 --> 00:40:22,920
over there first

975
00:40:22,920 --> 00:40:31,770
yeah I'm definitely having a really hard

976
00:40:31,770 --> 00:40:35,550
time to here sorry I can't hear because

977
00:40:35,550 --> 00:40:38,940
of the auditorium could you be up to

978
00:40:38,940 --> 00:40:39,390
speak

979
00:40:39,390 --> 00:40:44,600
you'll save later okay I'm so sorry oh

980
00:40:46,610 --> 00:40:49,980
yeah so so go to the to our PC website

981
00:40:49,980 --> 00:40:53,310
and repeat the question so it's a

982
00:40:53,310 --> 00:40:55,980
holiday featuring easy how do you check

983
00:40:55,980 --> 00:40:57,840
right if you go to your pc website

984
00:40:57,840 --> 00:41:00,720
there's actually a link to the ER PC

985
00:41:00,720 --> 00:41:02,970
performance testing suite so you can

986
00:41:02,970 --> 00:41:05,010
actually see the historical performance

987
00:41:05,010 --> 00:41:07,140
is that they do on the gr PC releases

988
00:41:07,140 --> 00:41:08,970
and that's all open you can actually

989
00:41:08,970 --> 00:41:13,200
just check the link and see it there

990
00:41:13,200 --> 00:41:19,380
were other questions here yes yep thank

991
00:41:19,380 --> 00:41:21,470
you

992
00:41:39,260 --> 00:41:43,130
[Laughter]

993
00:41:48,270 --> 00:41:50,470
right gotcha yeah so I think that

994
00:41:50,470 --> 00:41:53,890
there's a trade-off between something

995
00:41:53,890 --> 00:41:56,110
that's fully customized over you can

996
00:41:56,110 --> 00:41:58,390
even do more efficiency if you go over

997
00:41:58,390 --> 00:41:59,800
your own transport for example go

998
00:41:59,800 --> 00:42:01,810
straight to tcp/ip but I think there's a

999
00:42:01,810 --> 00:42:03,700
balance between the efficiencies that

1000
00:42:03,700 --> 00:42:05,560
you get the interoperability that you

1001
00:42:05,560 --> 00:42:07,390
get based on their some of the de facto

1002
00:42:07,390 --> 00:42:08,890
standards out there so yeah I absolutely

1003
00:42:08,890 --> 00:42:10,750
agree I mean you can always go more I

1004
00:42:10,750 --> 00:42:12,310
love to hear more of these to be

1005
00:42:12,310 --> 00:42:15,610
feedback afterwards as well yeah yes one

1006
00:42:15,610 --> 00:42:23,380
more question here is it faster with

1007
00:42:23,380 --> 00:42:25,240
multiple phones and d-bus well I don't

1008
00:42:25,240 --> 00:42:27,400
know if that's a good comparison to be

1009
00:42:27,400 --> 00:42:30,280
honest so no comment on that I don't I

1010
00:42:30,280 --> 00:42:31,240
don't think that's a good comparison

1011
00:42:31,240 --> 00:42:35,609
yeah nice yeah last question over there

1012
00:42:40,740 --> 00:42:43,150
does your PC have some of the best

1013
00:42:43,150 --> 00:42:46,270
practices more for API versioning so yes

1014
00:42:46,270 --> 00:42:48,790
actually one thing I didn't mention is

1015
00:42:48,790 --> 00:42:51,010
the message palos because it's based on

1016
00:42:51,010 --> 00:42:53,680
polar buffer you can actually it's

1017
00:42:53,680 --> 00:42:55,390
backwards compatible in most part unless

1018
00:42:55,390 --> 00:42:58,660
you delete one of the fields and if you

1019
00:42:58,660 --> 00:43:00,760
do delete some fields in the same

1020
00:43:00,760 --> 00:43:02,830
payload in case you do want to do it

1021
00:43:02,830 --> 00:43:05,590
what you want to do is for example you

1022
00:43:05,590 --> 00:43:08,410
don't want to reuse the tags right if

1023
00:43:08,410 --> 00:43:11,170
you use the tag that was deleted in a

1024
00:43:11,170 --> 00:43:13,450
new field then the kind of server is

1025
00:43:13,450 --> 00:43:15,040
gonna get really confused what you can

1026
00:43:15,040 --> 00:43:17,170
also do is to reserve some of these tags

1027
00:43:17,170 --> 00:43:19,360
so that they don't ever get ever used

1028
00:43:19,360 --> 00:43:24,190
again in the future right yeah so I

1029
00:43:24,190 --> 00:43:27,070
think that's all the time I have one

1030
00:43:27,070 --> 00:43:31,380
more all right I see over there yep

1031
00:43:35,580 --> 00:43:39,280
services right so the GRP see how do you

1032
00:43:39,280 --> 00:43:47,849
address that and also multiple services

1033
00:43:47,849 --> 00:43:56,530
right so how do you create loosely

1034
00:43:56,530 --> 00:43:58,599
coupled but strongly type system well I

1035
00:43:58,599 --> 00:44:00,640
I would actually want to think of them

1036
00:44:00,640 --> 00:44:02,290
as separate right I mean you can be

1037
00:44:02,290 --> 00:44:05,680
loosely coupled but still tight right

1038
00:44:05,680 --> 00:44:07,660
think about in the rest world where you

1039
00:44:07,660 --> 00:44:10,300
are loosely coupled but not so me type

1040
00:44:10,300 --> 00:44:12,430
what happened is potentially you will

1041
00:44:12,430 --> 00:44:14,470
send data or receive data that you never

1042
00:44:14,470 --> 00:44:16,720
expected and people are trying to you

1043
00:44:16,720 --> 00:44:18,580
know kind of make that slightly

1044
00:44:18,580 --> 00:44:20,320
different right by having a really good

1045
00:44:20,320 --> 00:44:38,410
definition language of swagger yeah so

1046
00:44:38,410 --> 00:44:40,690
what you want is to make sure that you

1047
00:44:40,690 --> 00:44:42,520
define the service contracts in the

1048
00:44:42,520 --> 00:44:44,980
payload cleanly in the Pullo file and

1049
00:44:44,980 --> 00:44:47,140
that would be the thing that defines the

1050
00:44:47,140 --> 00:44:48,520
contracts and that's the thing that you

1051
00:44:48,520 --> 00:44:50,080
pass it around to different services

1052
00:44:50,080 --> 00:44:51,790
that needs to consume the service right

1053
00:44:51,790 --> 00:44:53,680
I mean think about this it's not many

1054
00:44:53,680 --> 00:44:55,630
the IDL you can think about it's not

1055
00:44:55,630 --> 00:44:57,640
much different from say a swagger doctor

1056
00:44:57,640 --> 00:45:00,609
cleanly defines the rest service or I I

1057
00:45:00,609 --> 00:45:02,260
hate to say this but it's like a whiz

1058
00:45:02,260 --> 00:45:04,869
though but much much more complex right

1059
00:45:04,869 --> 00:45:08,230
okay we take one short question short

1060
00:45:08,230 --> 00:45:14,940
cut short question I'm sorry

1061
00:45:15,400 --> 00:45:20,799
oh I see it's mostly composition that's

1062
00:45:20,799 --> 00:45:21,279
disappointing

1063
00:45:21,279 --> 00:45:23,499
paratis it's mostly composition but in

1064
00:45:23,499 --> 00:45:26,140
short yes in a way but you can compose

1065
00:45:26,140 --> 00:45:28,390
the objects together you can also import

1066
00:45:28,390 --> 00:45:30,430
so one thing that I didn't get to show

1067
00:45:30,430 --> 00:45:33,549
is that you get you can elute that one

1068
00:45:33,549 --> 00:45:38,289
sorry for example you can import types

1069
00:45:38,289 --> 00:45:40,930
and types from another profile as well

1070
00:45:40,930 --> 00:45:43,259
and you can reference to that type

1071
00:45:43,259 --> 00:45:45,970
strongly we are strongly typing as well

1072
00:45:45,970 --> 00:45:48,840
okay yeah yeah thank you all right

1073
00:45:48,840 --> 00:45:54,919
[Applause]

