1
00:00:00,000 --> 00:00:02,750
hi

2
00:00:05,140 --> 00:00:08,170
welcome to my to this talk on diagnosing

3
00:00:08,170 --> 00:00:10,150
issues in job applications using

4
00:00:10,150 --> 00:00:11,230
thermostat and pikemen

5
00:00:11,230 --> 00:00:13,900
I'm stifling give off I'm a senior

6
00:00:13,900 --> 00:00:16,870
software engineer with red head I mostly

7
00:00:16,870 --> 00:00:19,390
work on serviceability tools and open

8
00:00:19,390 --> 00:00:22,779
JDK itself okay here's what we're going

9
00:00:22,779 --> 00:00:25,269
to cover today first we're going to

10
00:00:25,269 --> 00:00:27,429
introduce a dental of location because

11
00:00:27,429 --> 00:00:30,429
this will be a case study finding an

12
00:00:30,429 --> 00:00:33,400
issue in that application we're going to

13
00:00:33,400 --> 00:00:34,990
look at this demo application and

14
00:00:34,990 --> 00:00:39,930
thermostat and then do a brief excursion

15
00:00:39,930 --> 00:00:43,120
and then we look at the source code of

16
00:00:43,120 --> 00:00:45,579
that demo application to understand this

17
00:00:45,579 --> 00:00:48,809
this problem better when when we look at

18
00:00:48,809 --> 00:00:51,550
this application with the thermostat

19
00:00:51,550 --> 00:00:53,920
indictment together and finally we

20
00:00:53,920 --> 00:00:57,969
conclude with a demo ok so this is this

21
00:00:57,969 --> 00:01:03,879
is a demo application you're you're you

22
00:01:03,879 --> 00:01:06,160
can download it at that URL it's a

23
00:01:06,160 --> 00:01:08,110
simple swing application you can

24
00:01:08,110 --> 00:01:11,979
schedule fast and and slow tasks and

25
00:01:11,979 --> 00:01:14,740
we're going to figure out why there's

26
00:01:14,740 --> 00:01:18,100
there's a difference between those those

27
00:01:18,100 --> 00:01:21,899
two tasks ok

28
00:01:22,049 --> 00:01:29,079
sorry that this is cut off okay so the

29
00:01:29,079 --> 00:01:31,360
the problem here is the task execution

30
00:01:31,360 --> 00:01:34,060
times vary greatly there's we know

31
00:01:34,060 --> 00:01:37,240
there's fast and slow tasks but as we

32
00:01:37,240 --> 00:01:41,200
will see that in the end we when we do

33
00:01:41,200 --> 00:01:43,810
profile runs we only get aggregate

34
00:01:43,810 --> 00:01:47,710
results and we see that the computation

35
00:01:47,710 --> 00:01:49,170
is stuck in this in this black box

36
00:01:49,170 --> 00:01:51,549
method but we don't really know where

37
00:01:51,549 --> 00:01:53,619
the calls come from and this is where

38
00:01:53,619 --> 00:01:56,020
where we thought white men would help

39
00:01:56,020 --> 00:01:59,740
and that will give us more a better idea

40
00:01:59,740 --> 00:02:01,420
and better understanding and really

41
00:02:01,420 --> 00:02:03,340
figuring out why there's slow and fast

42
00:02:03,340 --> 00:02:07,860
tests this example is based on a real

43
00:02:07,860 --> 00:02:10,270
customer case it's of course the the

44
00:02:10,270 --> 00:02:14,680
it's it's simplified but it added or we

45
00:02:14,680 --> 00:02:17,690
did this an analysis within redhead

46
00:02:17,690 --> 00:02:21,860
so this this isn't something totally

47
00:02:21,860 --> 00:02:25,220
artificial so what if we look at the

48
00:02:25,220 --> 00:02:28,910
demo application with thermostat where

49
00:02:28,910 --> 00:02:31,730
well thermostat what what's thermostat

50
00:02:31,730 --> 00:02:33,920
maybe not everybody knows what

51
00:02:33,920 --> 00:02:35,780
thermostat is it's a it's a

52
00:02:35,780 --> 00:02:38,300
serviceability tool for openjdk and

53
00:02:38,300 --> 00:02:41,750
hotspot JVMs you can extract metrics

54
00:02:41,750 --> 00:02:44,840
from the JVM itself and visualize it in

55
00:02:44,840 --> 00:02:48,350
various ways you can run thermostat

56
00:02:48,350 --> 00:02:51,980
locally and remotely so what if we look

57
00:02:51,980 --> 00:02:54,380
at the demo application in thermostat so

58
00:02:54,380 --> 00:02:59,680
here we can see there's there's a

59
00:02:59,680 --> 00:03:02,060
service that allows you to see the host

60
00:03:02,060 --> 00:03:03,860
information and the jvm information if

61
00:03:03,860 --> 00:03:05,780
you if you look at the CPU graphs and

62
00:03:05,780 --> 00:03:07,670
run the the demo application already

63
00:03:07,670 --> 00:03:10,940
here we can see that we've scheduled too

64
00:03:10,940 --> 00:03:12,890
fast tasks in one slow task there's

65
00:03:12,890 --> 00:03:16,400
there's CPU consumption going on in the

66
00:03:16,400 --> 00:03:19,510
in the JVM and you see that that

67
00:03:19,510 --> 00:03:23,600
populating through to the host ok what

68
00:03:23,600 --> 00:03:28,520
if we look at GC off but what GC cycles

69
00:03:28,520 --> 00:03:30,230
are happening when we run that

70
00:03:30,230 --> 00:03:34,690
application so here we can see there's

71
00:03:34,690 --> 00:03:37,610
when the tasks run there's two fast

72
00:03:37,610 --> 00:03:39,860
tests running again and one one slow

73
00:03:39,860 --> 00:03:43,250
task when the tasks are running it it

74
00:03:43,250 --> 00:03:48,440
has a few GC cycles when there is a slow

75
00:03:48,440 --> 00:03:50,860
task running there's a few more but

76
00:03:50,860 --> 00:03:54,290
overall they don't seem to propagate

77
00:03:54,290 --> 00:03:55,850
those objects into into the old

78
00:03:55,850 --> 00:04:00,740
generation they seem to Diane okay what

79
00:04:00,740 --> 00:04:04,640
if we look at threads threads or a task

80
00:04:04,640 --> 00:04:06,320
that this time application has been

81
00:04:06,320 --> 00:04:10,550
later see is uses as a class task and a

82
00:04:10,550 --> 00:04:13,520
task is a thread and so each time we

83
00:04:13,520 --> 00:04:15,500
create a new task it creates a new

84
00:04:15,500 --> 00:04:17,690
thread we see that nicely visualized in

85
00:04:17,690 --> 00:04:20,390
the thread view of thermostat and and

86
00:04:20,390 --> 00:04:22,670
there you can already see okay we we

87
00:04:22,670 --> 00:04:24,560
knew already that there's slow and fast

88
00:04:24,560 --> 00:04:27,380
task but here we we got some evidence

89
00:04:27,380 --> 00:04:30,140
that this is really the case you seen

90
00:04:30,140 --> 00:04:31,040
yet nicely that the

91
00:04:31,040 --> 00:04:33,740
threat created once the task finished it

92
00:04:33,740 --> 00:04:38,990
got destroyed okay so let's try to find

93
00:04:38,990 --> 00:04:42,350
out if we can really see where the

94
00:04:42,350 --> 00:04:46,250
problem is yeah first first attempt is

95
00:04:46,250 --> 00:04:51,290
using thermostats profiler we do two

96
00:04:51,290 --> 00:04:54,320
profiling sessions to the left we see we

97
00:04:54,320 --> 00:04:56,330
see a profiling session of the fast task

98
00:04:56,330 --> 00:04:58,130
to the right we see a profiling session

99
00:04:58,130 --> 00:05:02,780
of the slow task but overall it really

100
00:05:02,780 --> 00:05:05,510
shows only that there's it spends time

101
00:05:05,510 --> 00:05:07,850
in those two methods but we don't really

102
00:05:07,850 --> 00:05:10,400
know why there's a difference between

103
00:05:10,400 --> 00:05:13,010
the fast and slow task the only

104
00:05:13,010 --> 00:05:14,600
difference is what we already know the

105
00:05:14,600 --> 00:05:19,400
absolute times differs okay so to

106
00:05:19,400 --> 00:05:22,480
conclude service that can can help

107
00:05:22,480 --> 00:05:26,210
thermostat alone can help for

108
00:05:26,210 --> 00:05:28,330
understanding the problem better and

109
00:05:28,330 --> 00:05:31,580
getting some some evidence narrowing

110
00:05:31,580 --> 00:05:34,100
down what what it might what might

111
00:05:34,100 --> 00:05:36,260
actually causing this problem here we

112
00:05:36,260 --> 00:05:41,000
seem to have a CPU bond problem and when

113
00:05:41,000 --> 00:05:43,490
we do the profiling we see ok there's no

114
00:05:43,490 --> 00:05:45,170
real difference between the fast and the

115
00:05:45,170 --> 00:05:50,090
slow task so what now and this is there

116
00:05:50,090 --> 00:05:52,640
there we thought that we might need a

117
00:05:52,640 --> 00:05:54,500
tool where we can drill down on a

118
00:05:54,500 --> 00:05:56,360
specific problem in this in this case

119
00:05:56,360 --> 00:05:59,360
drilling down on certain method calls so

120
00:05:59,360 --> 00:06:03,080
we we know already time spend in this in

121
00:06:03,080 --> 00:06:05,420
that class and this and that method but

122
00:06:05,420 --> 00:06:09,230
what we need more detail ok so we were

123
00:06:09,230 --> 00:06:14,420
thinking can bite man help yeah so what

124
00:06:14,420 --> 00:06:17,410
Speight men actually vitamin is a

125
00:06:17,410 --> 00:06:21,050
instrumentation tool it does bytecode

126
00:06:21,050 --> 00:06:23,780
transformations using implemented as a

127
00:06:23,780 --> 00:06:27,950
JVM ti agent a Java agent the rules

128
00:06:27,950 --> 00:06:29,870
files are specified in a domain-specific

129
00:06:29,870 --> 00:06:34,430
language you it tells the the agent

130
00:06:34,430 --> 00:06:37,190
which classes you can trance or it

131
00:06:37,190 --> 00:06:39,890
should transform and which methods so

132
00:06:39,890 --> 00:06:42,890
you can be fairly selective by using

133
00:06:42,890 --> 00:06:44,810
those rules files what

134
00:06:44,810 --> 00:06:49,340
is should be changed and how it's it's

135
00:06:49,340 --> 00:06:50,960
really nice that you can dynamically

136
00:06:50,960 --> 00:06:54,260
load and unload rules as as you might

137
00:06:54,260 --> 00:06:56,870
want to inspect into or dive into a

138
00:06:56,870 --> 00:07:00,139
specific problem and inject a certain

139
00:07:00,139 --> 00:07:02,300
role while your application is running

140
00:07:02,300 --> 00:07:04,190
you don't actually need to recompile

141
00:07:04,190 --> 00:07:06,560
your program or anything you just have

142
00:07:06,560 --> 00:07:09,020
to attach the agent and and load a rule

143
00:07:09,020 --> 00:07:11,840
file do your analysis and you can then

144
00:07:11,840 --> 00:07:14,600
later on unload the rule and and the

145
00:07:14,600 --> 00:07:17,479
bytecode get gets retransform back to

146
00:07:17,479 --> 00:07:20,990
the original version that's quite useful

147
00:07:20,990 --> 00:07:23,450
so what what does an actual use use

148
00:07:23,450 --> 00:07:26,450
usage of pikemen look like oh yeah you'd

149
00:07:26,450 --> 00:07:28,790
have to know that there's this Java

150
00:07:28,790 --> 00:07:31,880
agent switch and figure out the pipe and

151
00:07:31,880 --> 00:07:35,479
char and script and thread and probably

152
00:07:35,479 --> 00:07:37,300
you have to specify a bunch of

153
00:07:37,300 --> 00:07:39,770
properties in this case that transform

154
00:07:39,770 --> 00:07:42,880
all instructs pikemen to also transform

155
00:07:42,880 --> 00:07:47,900
jdk classes and if you want to run it on

156
00:07:47,900 --> 00:07:51,470
an already running JVM you have to know

157
00:07:51,470 --> 00:07:55,310
the pide used the script and use two

158
00:07:55,310 --> 00:07:57,289
invitations and that that sort of thing

159
00:07:57,289 --> 00:08:00,800
it's it's nice but it we were thinking

160
00:08:00,800 --> 00:08:04,460
could we do better because thermostat

161
00:08:04,460 --> 00:08:07,610
knows already the the pids of the of the

162
00:08:07,610 --> 00:08:11,630
gems and it can figure out the JVM the

163
00:08:11,630 --> 00:08:14,389
PID and load rules for for for pikemen

164
00:08:14,389 --> 00:08:17,840
so that it's actually easier to use so

165
00:08:17,840 --> 00:08:20,300
the thinking was yeah let's combine the

166
00:08:20,300 --> 00:08:24,919
tooth we were thinking that in specific

167
00:08:24,919 --> 00:08:27,680
cases as we've seen before the the

168
00:08:27,680 --> 00:08:29,539
profiling of that demo application

169
00:08:29,539 --> 00:08:31,970
didn't was inconclusive you you would

170
00:08:31,970 --> 00:08:33,950
need more information to really figure

171
00:08:33,950 --> 00:08:36,620
out what's causing the the slower the

172
00:08:36,620 --> 00:08:40,010
slowness of of the slow task and and why

173
00:08:40,010 --> 00:08:42,589
are the the faster the fast tasks

174
00:08:42,589 --> 00:08:46,220
running faster and yeah it thermostat is

175
00:08:46,220 --> 00:08:48,800
II can help there to drive pipe man you

176
00:08:48,800 --> 00:08:52,370
can just select the JVM as we will see

177
00:08:52,370 --> 00:08:54,860
you the demo later and then load the

178
00:08:54,860 --> 00:08:57,050
rules into that JVM you

179
00:08:57,050 --> 00:08:59,180
have to know the pids and so on and

180
00:08:59,180 --> 00:09:01,760
what's more you can do your analysis

181
00:09:01,760 --> 00:09:04,580
extract some metrics that you add

182
00:09:04,580 --> 00:09:07,820
Hockley extracted using rules pipeline

183
00:09:07,820 --> 00:09:10,670
rules files and then you can visualize

184
00:09:10,670 --> 00:09:14,870
that using thermostat means so we've

185
00:09:14,870 --> 00:09:17,269
implemented that as the therm is a

186
00:09:17,269 --> 00:09:20,990
plugin it's extensible so ok on to the

187
00:09:20,990 --> 00:09:23,899
demo but almost we need to look at the

188
00:09:23,899 --> 00:09:26,060
classes first because the rules files

189
00:09:26,060 --> 00:09:28,459
are tightly coupled to the source code

190
00:09:28,459 --> 00:09:29,870
of your application

191
00:09:29,870 --> 00:09:31,700
so we've already determined that the

192
00:09:31,700 --> 00:09:35,899
profiler where most of the time is being

193
00:09:35,899 --> 00:09:39,380
spent but we had we had this

194
00:09:39,380 --> 00:09:40,610
compute-intensive

195
00:09:40,610 --> 00:09:44,959
method and well let's let's look at

196
00:09:44,959 --> 00:09:48,320
class demo first it has this get fast

197
00:09:48,320 --> 00:09:50,450
house guest gets low task methods and

198
00:09:50,450 --> 00:09:52,670
the only difference there is is the

199
00:09:52,670 --> 00:09:55,459
input variables the spread is is for the

200
00:09:55,459 --> 00:09:59,660
fast task at an average of spread is at

201
00:09:59,660 --> 00:10:02,570
one and for the fast task the spread is

202
00:10:02,570 --> 00:10:05,930
at five and they both average at 40 if

203
00:10:05,930 --> 00:10:09,890
you look at the class task then yeah it

204
00:10:09,890 --> 00:10:11,930
has this black box compute intensive

205
00:10:11,930 --> 00:10:14,480
method and and do work basically it

206
00:10:14,480 --> 00:10:17,930
delegates to that but our suspicion is

207
00:10:17,930 --> 00:10:21,560
okay so we're calling compute intensive

208
00:10:21,560 --> 00:10:24,260
from this do work method is it actually

209
00:10:24,260 --> 00:10:27,230
that call that's causing the the this or

210
00:10:27,230 --> 00:10:29,709
that's call it's causing that that

211
00:10:29,709 --> 00:10:32,420
performance problem or is it some some

212
00:10:32,420 --> 00:10:35,000
call of computing send tens if somewhere

213
00:10:35,000 --> 00:10:38,860
else okay so we we decided to instrument

214
00:10:38,860 --> 00:10:42,670
class task and do work and and I await

215
00:10:42,670 --> 00:10:47,029
so we here with the class specifier we

216
00:10:47,029 --> 00:10:50,270
specify the class and the method to work

217
00:10:50,270 --> 00:10:53,480
and we do some stuff when when that

218
00:10:53,480 --> 00:10:57,649
method is entered we we extract a couple

219
00:10:57,649 --> 00:11:00,640
of rare or we set a couple of variables

220
00:11:00,640 --> 00:11:05,600
we generate an ID we capture the input

221
00:11:05,600 --> 00:11:09,720
variable using the dollar one sign

222
00:11:09,720 --> 00:11:13,620
and then when the actual heavy lifting

223
00:11:13,620 --> 00:11:15,990
is happening here where we send stuff to

224
00:11:15,990 --> 00:11:19,260
to thermostat that scent method is

225
00:11:19,260 --> 00:11:22,350
implemented by the thermostat helper so

226
00:11:22,350 --> 00:11:25,080
you can extend bite man to do some stuff

227
00:11:25,080 --> 00:11:27,030
and and and we've we've written this

228
00:11:27,030 --> 00:11:29,970
helper where you can send stuff to

229
00:11:29,970 --> 00:11:33,690
thermostat and and here we are sending a

230
00:11:33,690 --> 00:11:37,230
metric called work and it has a simple

231
00:11:37,230 --> 00:11:40,520
equality of transition we set it to call

232
00:11:40,520 --> 00:11:44,820
we we said this variable input to the

233
00:11:44,820 --> 00:11:48,990
actual captured input and give it an ID

234
00:11:48,990 --> 00:11:52,890
in order to know which call was actually

235
00:11:52,890 --> 00:11:54,720
done here because we have seen before

236
00:11:54,720 --> 00:11:57,840
there's three calls to a do work and I

237
00:11:57,840 --> 00:12:03,510
await the next role is similar but at

238
00:12:03,510 --> 00:12:06,720
exit so what we do some some things when

239
00:12:06,720 --> 00:12:12,150
do work exits yeah we extract the the

240
00:12:12,150 --> 00:12:14,940
the counter is is something I'm not

241
00:12:14,940 --> 00:12:17,040
going to need it's something built into

242
00:12:17,040 --> 00:12:20,820
bite moon itself but here we can we can

243
00:12:20,820 --> 00:12:22,740
get the elapsed time from a timer we've

244
00:12:22,740 --> 00:12:26,640
set up in a different rule and again

245
00:12:26,640 --> 00:12:29,130
we're sending some symmetric back to the

246
00:12:29,130 --> 00:12:32,400
thermostat using this mechanism of an

247
00:12:32,400 --> 00:12:35,190
object or AIDS it's really a hashmap

248
00:12:35,190 --> 00:12:39,480
there but yeah so we send a transition

249
00:12:39,480 --> 00:12:41,870
of return because we're returning and

250
00:12:41,870 --> 00:12:46,740
sending the elapsed time so at enter we

251
00:12:46,740 --> 00:12:49,260
we reset the timer for this invocation

252
00:12:49,260 --> 00:12:52,920
and at return we're gathering the the

253
00:12:52,920 --> 00:12:55,710
time where that elapsed when we

254
00:12:55,710 --> 00:13:00,360
returning okay and so let's let's move

255
00:13:00,360 --> 00:13:04,880
on to the to the demo then I've got it

256
00:13:04,880 --> 00:13:09,710
pre-recorded due to time and constraints

257
00:13:09,710 --> 00:13:12,710
okay

258
00:13:34,780 --> 00:13:37,780
okay

259
00:13:39,450 --> 00:13:43,050
sir about that

260
00:13:56,540 --> 00:14:00,660
okay so I start out where where I've

261
00:14:00,660 --> 00:14:02,940
well you can't really read can you

262
00:14:02,940 --> 00:14:14,460
okay okay okay

263
00:14:14,460 --> 00:14:17,790
I'm really sorry if you're if you're I

264
00:14:17,790 --> 00:14:20,970
have this screencast available online

265
00:14:20,970 --> 00:14:29,880
but this this isn't okay even though you

266
00:14:29,880 --> 00:14:31,800
can't really read it it should be it

267
00:14:31,800 --> 00:14:35,130
should be okay for for the for the chart

268
00:14:35,130 --> 00:14:40,200
demo so I've loaded the rules here you

269
00:14:40,200 --> 00:14:42,510
they're all available online and then

270
00:14:42,510 --> 00:14:45,690
and then I inject the rule by by

271
00:14:45,690 --> 00:14:47,580
clicking a button into but you have

272
00:14:47,580 --> 00:14:51,180
selected demo up there but there I don't

273
00:14:51,180 --> 00:14:54,090
see any metrics and then they once I

274
00:14:54,090 --> 00:14:55,920
execute the demo they come into

275
00:14:55,920 --> 00:14:58,080
thermostat and you see those metrics as

276
00:14:58,080 --> 00:15:01,470
we've seen there before there's weight

277
00:15:01,470 --> 00:15:04,860
metrics and work metrics that's that

278
00:15:04,860 --> 00:15:08,310
column I run the fast task once and the

279
00:15:08,310 --> 00:15:10,500
slow task point so that I get metrics

280
00:15:10,500 --> 00:15:14,340
for for both of them and once that

281
00:15:14,340 --> 00:15:18,690
finishes I I can select the metrics I'm

282
00:15:18,690 --> 00:15:20,820
interested in maybe I'm just interested

283
00:15:20,820 --> 00:15:23,370
in the ones that have an input field or

284
00:15:23,370 --> 00:15:27,540
an ID field and but what I'm really

285
00:15:27,540 --> 00:15:30,810
interested in is yeah how does the

286
00:15:30,810 --> 00:15:34,620
runtime look like for the fast task in

287
00:15:34,620 --> 00:15:37,980
this low task so if I if I switch to the

288
00:15:37,980 --> 00:15:41,640
to the graphs tab it I can I can

289
00:15:41,640 --> 00:15:44,130
visualize the metrics in a

290
00:15:44,130 --> 00:15:46,770
state-transition graph where you can see

291
00:15:46,770 --> 00:15:49,860
the the transitions from from call to

292
00:15:49,860 --> 00:15:54,930
return over a time so here I'm selecting

293
00:15:54,930 --> 00:15:57,120
I'm selecting a the time stamp as the

294
00:15:57,120 --> 00:16:02,640
x-axis and a and the transition value

295
00:16:02,640 --> 00:16:05,280
for as the y-axis and and filter by

296
00:16:05,280 --> 00:16:08,310
metrics that have marker work and then I

297
00:16:08,310 --> 00:16:09,420
see I see those

298
00:16:09,420 --> 00:16:12,240
nice transitions there for the fast task

299
00:16:12,240 --> 00:16:15,420
it almost looks linear but for the for

300
00:16:15,420 --> 00:16:17,940
the slow task I have the first call that

301
00:16:17,940 --> 00:16:21,090
that pretty much returns immediately the

302
00:16:21,090 --> 00:16:23,430
second call that takes longer but the

303
00:16:23,430 --> 00:16:25,770
third call takes pretty much the most

304
00:16:25,770 --> 00:16:29,640
most amount of time and we will we see

305
00:16:29,640 --> 00:16:32,610
that overall yeah the third call seems

306
00:16:32,610 --> 00:16:34,470
to be dominant and it and it indeed

307
00:16:34,470 --> 00:16:37,350
comes from from this call from from do

308
00:16:37,350 --> 00:16:41,370
work if we contrast that same chart for

309
00:16:41,370 --> 00:16:45,720
the I oh wait so we want to make sure

310
00:16:45,720 --> 00:16:48,690
that it's not the I oh wait calls that

311
00:16:48,690 --> 00:16:51,360
our inflation influence in the run time

312
00:16:51,360 --> 00:16:53,730
but here we can see that it's pretty

313
00:16:53,730 --> 00:16:55,980
much constant so we we have three

314
00:16:55,980 --> 00:16:58,290
locations there they're taking the

315
00:16:58,290 --> 00:17:00,330
constant amount of time for for the slow

316
00:17:00,330 --> 00:17:02,310
task or for the fast task there's no

317
00:17:02,310 --> 00:17:04,800
difference there so right here we have

318
00:17:04,800 --> 00:17:07,920
the the evidence we want it that it's

319
00:17:07,920 --> 00:17:08,400
not I

320
00:17:08,400 --> 00:17:11,250
oh wait we can that rule root that out

321
00:17:11,250 --> 00:17:14,849
and it's really the the input values

322
00:17:14,849 --> 00:17:17,760
that influence the run time here so if

323
00:17:17,760 --> 00:17:20,640
we visualize them for the slow task to

324
00:17:20,640 --> 00:17:23,730
the left and and the fastest to the

325
00:17:23,730 --> 00:17:28,099
right we see the input values of 41 to

326
00:17:28,099 --> 00:17:33,210
239 and 45 to 35 and if we contrast that

327
00:17:33,210 --> 00:17:35,280
to the root elapsed time we've captured

328
00:17:35,280 --> 00:17:37,680
with the rule then we see the

329
00:17:37,680 --> 00:17:40,250
interesting curve the algorithm of

330
00:17:40,250 --> 00:17:42,120
compute-intensive seems to be

331
00:17:42,120 --> 00:17:44,760
exponential here it's not as apparent

332
00:17:44,760 --> 00:17:47,340
for the fast task but it almost looks

333
00:17:47,340 --> 00:17:50,220
linear but for the slow task we we see

334
00:17:50,220 --> 00:17:54,330
that the the third call is is taking the

335
00:17:54,330 --> 00:17:56,490
most amount of time contrasting that

336
00:17:56,490 --> 00:17:59,910
again for the for the weight task we see

337
00:17:59,910 --> 00:18:03,810
all calls are pretty much every at 500

338
00:18:03,810 --> 00:18:06,420
milliseconds there I'm really sorry

339
00:18:06,420 --> 00:18:10,170
about the resolution there that's that's

340
00:18:10,170 --> 00:18:15,170
what I wanted to show any questions

341
00:18:31,000 --> 00:18:45,460
a couple of questions so the white man

342
00:18:45,460 --> 00:18:47,560
can it work without thermostat so can

343
00:18:47,560 --> 00:18:49,210
you actually generate orders reports on

344
00:18:49,210 --> 00:18:51,760
the command line that moment no thought

345
00:18:51,760 --> 00:18:54,910
you can't okay when you do send when you

346
00:18:54,910 --> 00:18:58,060
send those objects out to the thermostat

347
00:18:58,060 --> 00:19:00,280
whatever can you go over the network or

348
00:19:00,280 --> 00:19:04,470
has it to be have to be the same machine

349
00:19:04,470 --> 00:19:09,190
in our scenario the agent runs locally

350
00:19:09,190 --> 00:19:11,560
on the wherever of the JVM you're

351
00:19:11,560 --> 00:19:14,440
inspecting runs so you can you can

352
00:19:14,440 --> 00:19:17,740
actually do the remote injection but the

353
00:19:17,740 --> 00:19:20,650
extraction stuff happens locally so so

354
00:19:20,650 --> 00:19:23,440
you can't inspect a remote JDM running

355
00:19:23,440 --> 00:19:29,500
or you can you can okay and when you

356
00:19:29,500 --> 00:19:31,000
send it stuff is it done by

357
00:19:31,000 --> 00:19:33,610
serialization or some other format oh

358
00:19:33,610 --> 00:19:37,660
yeah we're using JSON to send the

359
00:19:37,660 --> 00:19:40,050
metrics to the thermostat agent and that

360
00:19:40,050 --> 00:19:42,850
carries the metrics off to the database

361
00:19:42,850 --> 00:19:44,770
you can you can do this after the fact

362
00:19:44,770 --> 00:19:47,950
as well so you can you can do your your

363
00:19:47,950 --> 00:19:52,030
run your vitamin script unload the the

364
00:19:52,030 --> 00:19:54,550
pipeline script so that your your JVM

365
00:19:54,550 --> 00:19:58,120
you that has a performance problem goes

366
00:19:58,120 --> 00:20:00,190
back to original state but you can do

367
00:20:00,190 --> 00:20:03,100
the analysis in thermistor even after

368
00:20:03,100 --> 00:20:06,250
after that that happens that's kind of

369
00:20:06,250 --> 00:20:09,570
nice okay thank you

370
00:20:10,880 --> 00:20:14,760
yeah one quick question so a couple

371
00:20:14,760 --> 00:20:16,429
years ago you had something like

372
00:20:16,429 --> 00:20:21,120
beiträge in India official forum is but

373
00:20:21,120 --> 00:20:23,130
I think the product is that that's alive

374
00:20:23,130 --> 00:20:30,809
anymore could I compare sorry yeah like

375
00:20:30,809 --> 00:20:34,440
a language you can use in a jfif am 2 or

376
00:20:34,440 --> 00:20:37,649
take us all to to the instruments could

377
00:20:37,649 --> 00:20:39,929
I compare bite them and something like

378
00:20:39,929 --> 00:20:44,039
that sand to fill that gap yes is purely

379
00:20:44,039 --> 00:20:47,039
Java bytecode mm-hm so and it's it's

380
00:20:47,039 --> 00:20:53,580
it's largely tied to Java code yeah so

381
00:20:53,580 --> 00:20:56,190
it's it's bytecode and and if you're if

382
00:20:56,190 --> 00:20:57,899
you're if I understand you correctly

383
00:20:57,899 --> 00:21:02,039
you're you mean system tap probes in the

384
00:21:02,039 --> 00:21:05,700
JVM itself yes that's more at a native

385
00:21:05,700 --> 00:21:07,559
level I'm not talking about details but

386
00:21:07,559 --> 00:21:10,440
be trash so okay I'm not familiar with

387
00:21:10,440 --> 00:21:15,630
okay there are few differences that make

388
00:21:15,630 --> 00:21:16,769
by man

389
00:21:16,769 --> 00:21:18,750
easier to use for for this kind

390
00:21:18,750 --> 00:21:22,679
especially for large project what you

391
00:21:22,679 --> 00:21:28,710
want to instrument many classes so a

392
00:21:28,710 --> 00:21:32,210
Badman was a little bit better choice

393
00:21:32,210 --> 00:21:35,399
but it's kind of similar there are

394
00:21:35,399 --> 00:21:38,610
differences obviously in the in the

395
00:21:38,610 --> 00:21:41,429
script and and so forth but the overall

396
00:21:41,429 --> 00:21:46,950
ideas maybe maybe the pikemen site has

397
00:21:46,950 --> 00:21:49,289
has some it has good documentation you

398
00:21:49,289 --> 00:21:51,600
it may even show up in the inner ethic

399
00:21:51,600 --> 00:21:55,289
hues if you're interested any more

400
00:21:55,289 --> 00:21:57,710
questions

401
00:21:58,400 --> 00:22:00,480
thanks everyone

402
00:22:00,480 --> 00:22:07,970
[Applause]

