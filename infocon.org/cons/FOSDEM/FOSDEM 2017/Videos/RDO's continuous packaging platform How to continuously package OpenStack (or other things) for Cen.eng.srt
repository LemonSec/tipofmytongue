1
00:00:05,860 --> 00:00:08,650
welcome to the possum 2017 distribution

2
00:00:08,650 --> 00:00:12,010
Deborah we have Matthew Queen - Kumar

3
00:00:12,010 --> 00:00:13,780
I'm here to talk to us about our Tio's

4
00:00:13,780 --> 00:00:19,679
continuous packaging platform microphone

5
00:00:19,679 --> 00:00:22,839
you're going to need sorry I forgot it's

6
00:00:22,839 --> 00:00:28,509
my fault you can yeah alright okay so

7
00:00:28,509 --> 00:00:30,910
I'm not sure yeah there's not much time

8
00:00:30,910 --> 00:00:33,460
so we'll go fast on some stuff for free

9
00:00:33,460 --> 00:00:35,320
there will be there will be time keep it

10
00:00:35,320 --> 00:00:35,740
like that

11
00:00:35,740 --> 00:00:37,870
we'll have time for a question later if

12
00:00:37,870 --> 00:00:39,640
not I think I'm the only guy with a red

13
00:00:39,640 --> 00:00:42,120
cap around here so you can find easily

14
00:00:42,120 --> 00:00:45,550
so let's get with basics first out of

15
00:00:45,550 --> 00:00:47,710
the way if you don't know what a do is

16
00:00:47,710 --> 00:00:49,629
it stands for the FBM distribution of

17
00:00:49,629 --> 00:00:50,829
OpenStack and if you don't know what

18
00:00:50,829 --> 00:00:52,719
OpenStack is it's a collection of

19
00:00:52,719 --> 00:00:55,289
software that lets you install and

20
00:00:55,289 --> 00:00:57,460
administrator cloud infrastructures on

21
00:00:57,460 --> 00:01:01,149
conventional oil do is also a big

22
00:01:01,149 --> 00:01:03,339
community of users of OpenStack of the

23
00:01:03,339 --> 00:01:04,900
package maintainer as well

24
00:01:04,900 --> 00:01:07,600
administrators and so on and their goal

25
00:01:07,600 --> 00:01:10,060
in life is to help you install your own

26
00:01:10,060 --> 00:01:13,690
OpenStack infrastructure the maintenance

27
00:01:13,690 --> 00:01:18,130
of packages maintain about 250 packages

28
00:01:18,130 --> 00:01:22,570
at the moment and it's growing so what

29
00:01:22,570 --> 00:01:25,270
do we need to build a package basically

30
00:01:25,270 --> 00:01:27,220
it's going to be a very high level first

31
00:01:27,220 --> 00:01:28,570
you need the source is obviously of a

32
00:01:28,570 --> 00:01:31,030
software that you want to package we

33
00:01:31,030 --> 00:01:32,770
will call that the upstream code in the

34
00:01:32,770 --> 00:01:33,760
rest in the remainder of the

35
00:01:33,760 --> 00:01:36,880
presentation and the next component of

36
00:01:36,880 --> 00:01:38,470
the package is called a spec file or

37
00:01:38,470 --> 00:01:41,400
spec files if you have more basically it

38
00:01:41,400 --> 00:01:44,680
contains the building steps of how to

39
00:01:44,680 --> 00:01:46,960
build the software from the sources how

40
00:01:46,960 --> 00:01:48,580
to install it how to remove it or the

41
00:01:48,580 --> 00:01:50,740
dependency that it needs to work on your

42
00:01:50,740 --> 00:01:52,810
system the patches eventually if you

43
00:01:52,810 --> 00:01:54,610
need to adapt it to your system and so

44
00:01:54,610 --> 00:01:57,790
on so from that we can infer that the

45
00:01:57,790 --> 00:01:59,560
job of a packager is pretty much the

46
00:01:59,560 --> 00:02:01,510
same as the job of a open swap developer

47
00:02:01,510 --> 00:02:05,410
a packager will need some form of action

48
00:02:05,410 --> 00:02:07,739
control in the fedora and send to s

49
00:02:07,739 --> 00:02:09,758
university called suspect file

50
00:02:09,758 --> 00:02:13,329
repository so this git repository it has

51
00:02:13,329 --> 00:02:14,680
to be on a public platform because it

52
00:02:14,680 --> 00:02:16,940
has to be open to the community

53
00:02:16,940 --> 00:02:20,240
to reviews as well you want also to make

54
00:02:20,240 --> 00:02:21,710
sure that the contributions that you get

55
00:02:21,710 --> 00:02:24,500
out of at masada t so you need to make

56
00:02:24,500 --> 00:02:26,810
the testing and validation so basically

57
00:02:26,810 --> 00:02:29,750
in continuous integration on it and your

58
00:02:29,750 --> 00:02:31,160
testing environment has to be controlled

59
00:02:31,160 --> 00:02:33,200
and so the tests our reports

60
00:02:33,200 --> 00:02:36,740
reproducible sorry and you can and you

61
00:02:36,740 --> 00:02:38,510
have a confidence in their results

62
00:02:38,510 --> 00:02:42,200
you also need a smart merging strategy

63
00:02:42,200 --> 00:02:43,910
if you have a lot of contributions that

64
00:02:43,910 --> 00:02:45,380
come at the same time you have to make

65
00:02:45,380 --> 00:02:47,030
sure that when you merge them you're not

66
00:02:47,030 --> 00:02:49,010
going to end up in a state of your

67
00:02:49,010 --> 00:02:50,750
master that you don't value that you

68
00:02:50,750 --> 00:02:53,870
don't really know but when you package

69
00:02:53,870 --> 00:02:57,170
are you also have a specific constraint

70
00:02:57,170 --> 00:02:58,640
which is upstream you have to follow

71
00:02:58,640 --> 00:03:00,890
what's going on on and on abstain you

72
00:03:00,890 --> 00:03:02,360
have to make sure that your spec files

73
00:03:02,360 --> 00:03:04,970
evolve if upstream evolve evolved and

74
00:03:04,970 --> 00:03:07,330
you want to release as early as possible

75
00:03:07,330 --> 00:03:09,910
after a change occurring upstream

76
00:03:09,910 --> 00:03:12,280
especially if the change is

77
00:03:12,280 --> 00:03:17,750
vulnerability fix or security fixes and

78
00:03:17,750 --> 00:03:19,460
when you package OpenStack it's even

79
00:03:19,460 --> 00:03:21,830
more complex due to the sheer size of

80
00:03:21,830 --> 00:03:25,010
the project OpenStack represents more

81
00:03:25,010 --> 00:03:26,950
than 600 projects for the last cycle

82
00:03:26,950 --> 00:03:29,180
every six months as a release the last

83
00:03:29,180 --> 00:03:31,310
cycle was called Newton so in the last

84
00:03:31,310 --> 00:03:33,800
six months there were six more than six

85
00:03:33,800 --> 00:03:37,910
Android projects about 240 commits a day

86
00:03:37,910 --> 00:03:40,940
which is humongous just for Nova alone

87
00:03:40,940 --> 00:03:43,820
which is a compute component we had more

88
00:03:43,820 --> 00:03:45,980
than one thousand and seven hundred

89
00:03:45,980 --> 00:03:47,800
commits which is about ten commits today

90
00:03:47,800 --> 00:03:51,620
and during the stabilization phase which

91
00:03:51,620 --> 00:03:53,320
is about one month before the release

92
00:03:53,320 --> 00:03:58,180
its ramped up to about 280 commit today

93
00:03:58,180 --> 00:04:00,500
so what does this mean for OpenStack

94
00:04:00,500 --> 00:04:02,720
packages in the audio community it means

95
00:04:02,720 --> 00:04:04,100
that you have to make sure that the

96
00:04:04,100 --> 00:04:06,590
respect file is validated after against

97
00:04:06,590 --> 00:04:08,000
exchange because if you wait for one

98
00:04:08,000 --> 00:04:09,500
thousand and seven hundred commits

99
00:04:09,500 --> 00:04:11,209
you're going to have to have a bad time

100
00:04:11,209 --> 00:04:13,930
so we can do that at the last minute

101
00:04:13,930 --> 00:04:16,459
also you need to be aware of the strong

102
00:04:16,459 --> 00:04:18,858
dependencies between the software's in

103
00:04:18,858 --> 00:04:21,620
the OpenStack suit because if Nova

104
00:04:21,620 --> 00:04:23,510
changes it's going to impact all the

105
00:04:23,510 --> 00:04:27,190
other projects so

106
00:04:27,190 --> 00:04:31,160
it's a compute component for for

107
00:04:31,160 --> 00:04:33,140
OpenStack so if you if you have a change

108
00:04:33,140 --> 00:04:34,670
on Nova it's going to affect everything

109
00:04:34,670 --> 00:04:36,290
so you have to test again all your other

110
00:04:36,290 --> 00:04:39,310
packages to make sure it's still working

111
00:04:39,310 --> 00:04:43,100
so be able to absorb huge spikes in

112
00:04:43,100 --> 00:04:46,700
activity so now that we know what the

113
00:04:46,700 --> 00:04:47,360
problems are

114
00:04:47,360 --> 00:04:49,000
let's look at the tools that we have

115
00:04:49,000 --> 00:04:51,650
attend to build an app en Factory

116
00:04:51,650 --> 00:04:53,840
so first let's look at what the ideal

117
00:04:53,840 --> 00:04:56,510
community came up with the main tool I'm

118
00:04:56,510 --> 00:04:58,310
going to talk about I'm going to be fast

119
00:04:58,310 --> 00:04:59,450
on this if you have questions just ask

120
00:04:59,450 --> 00:05:01,580
us after orientation the first one i

121
00:05:01,580 --> 00:05:03,050
want to talk about is called the lohan

122
00:05:03,050 --> 00:05:04,760
like the cow in Back to the Future

123
00:05:04,760 --> 00:05:07,010
because it basically builds packages

124
00:05:07,010 --> 00:05:07,730
from the future

125
00:05:07,730 --> 00:05:09,290
it looks at what's happening upstream

126
00:05:09,290 --> 00:05:11,930
and when there's a change it's going to

127
00:05:11,930 --> 00:05:15,230
try to build a package using the new

128
00:05:15,230 --> 00:05:19,040
changes in upstream it's also it also

129
00:05:19,040 --> 00:05:20,750
act as a master IPM repository because

130
00:05:20,750 --> 00:05:23,360
it uses the latest source code format

131
00:05:23,360 --> 00:05:24,830
from upstream and if you want to know

132
00:05:24,830 --> 00:05:26,570
more there's an article linked on the

133
00:05:26,570 --> 00:05:29,540
presentation we're also going to use a

134
00:05:29,540 --> 00:05:32,300
CLI command interface called a do pkg

135
00:05:32,300 --> 00:05:35,000
which will help with basic tasks needed

136
00:05:35,000 --> 00:05:37,040
for maintaining especially flattening

137
00:05:37,040 --> 00:05:38,630
patch chains that that have to be

138
00:05:38,630 --> 00:05:40,400
included in the spec file we'll talk

139
00:05:40,400 --> 00:05:42,200
about that more when we when a hiker or

140
00:05:42,200 --> 00:05:46,700
talks about the use cases next let's

141
00:05:46,700 --> 00:05:48,470
talk about community tools the

142
00:05:48,470 --> 00:05:51,950
centralized and federal community use a

143
00:05:51,950 --> 00:05:54,770
tool called the called Koji Koji is

144
00:05:54,770 --> 00:05:57,980
basically client and server architecture

145
00:05:57,980 --> 00:06:01,820
that lets you build and store a peon

146
00:06:01,820 --> 00:06:05,450
packages so you can use your own

147
00:06:05,450 --> 00:06:07,220
instance of Koji but you can also use

148
00:06:07,220 --> 00:06:10,370
the community build system which is an

149
00:06:10,370 --> 00:06:11,870
instance of Koji that has been set up as

150
00:06:11,870 --> 00:06:13,640
a centrist community and you can build

151
00:06:13,640 --> 00:06:15,460
if you want you have to set up

152
00:06:15,460 --> 00:06:17,300
communication with the central community

153
00:06:17,300 --> 00:06:19,820
first but you can use it to build your

154
00:06:19,820 --> 00:06:22,880
packages on it and test them and the

155
00:06:22,880 --> 00:06:24,290
last piece of software that we're going

156
00:06:24,290 --> 00:06:28,849
to use is called a factory so this is a

157
00:06:28,849 --> 00:06:32,099
basically for a software thought which

158
00:06:32,099 --> 00:06:34,770
includes CI CD platform and the

159
00:06:34,770 --> 00:06:36,030
specificity of it is that it's inspired

160
00:06:36,030 --> 00:06:38,069
but what OpenStack is doing for their

161
00:06:38,069 --> 00:06:40,500
own CI that we call in front so which is

162
00:06:40,500 --> 00:06:43,500
basically the same tools tools that you

163
00:06:43,500 --> 00:06:45,270
might know like Garrett Walker review

164
00:06:45,270 --> 00:06:49,110
and Jenkins for for testing for jobs

165
00:06:49,110 --> 00:06:52,500
automation but also some some tools that

166
00:06:52,500 --> 00:06:56,580
warrant not that known because they are

167
00:06:56,580 --> 00:06:57,720
developed by the OpenStack

168
00:06:57,720 --> 00:06:59,729
infrastructure like you're not pool

169
00:06:59,729 --> 00:07:03,630
which is a service that provides job

170
00:07:03,630 --> 00:07:07,229
node on demand and zu which is a kind of

171
00:07:07,229 --> 00:07:10,289
a release manager and also job

172
00:07:10,289 --> 00:07:12,389
orchestrate on so I'll go fast on the

173
00:07:12,389 --> 00:07:13,830
feature that sort of factory provides

174
00:07:13,830 --> 00:07:16,169
it's really cool for development not

175
00:07:16,169 --> 00:07:18,210
just packaging so you have code hosting

176
00:07:18,210 --> 00:07:20,330
and with you through garrett you have

177
00:07:20,330 --> 00:07:23,430
java castrations who drew a duel and

178
00:07:23,430 --> 00:07:26,610
jenkins as i said you have also dual as

179
00:07:26,610 --> 00:07:29,310
a nice feature which is a project

180
00:07:29,310 --> 00:07:31,080
dependencies management when you build a

181
00:07:31,080 --> 00:07:33,599
test environment it will build it taking

182
00:07:33,599 --> 00:07:36,780
care of those dependencies by itself so

183
00:07:36,780 --> 00:07:41,360
node 4 allows you to build to use jobs

184
00:07:41,360 --> 00:07:44,610
nodes and slaves on demand whenever you

185
00:07:44,610 --> 00:07:49,590
need them not getting as well so i'll go

186
00:07:49,590 --> 00:07:52,949
faster the config is managed as code so

187
00:07:52,949 --> 00:07:57,210
you can also use a CI workflow on it you

188
00:07:57,210 --> 00:07:58,469
have a flexible workflow so that's why

189
00:07:58,469 --> 00:08:01,620
we're going to use it for for I do so

190
00:08:01,620 --> 00:08:05,099
with so with all that so it there's not

191
00:08:05,099 --> 00:08:08,099
much time so we have to go fast so who

192
00:08:08,099 --> 00:08:09,719
is all that we manage to create a appear

193
00:08:09,719 --> 00:08:12,690
factory so basically upstream changes

194
00:08:12,690 --> 00:08:14,039
are going to be taken care of by the

195
00:08:14,039 --> 00:08:16,860
Orion and the tests are going to be

196
00:08:16,860 --> 00:08:18,870
taken care of by such a factory the

197
00:08:18,870 --> 00:08:20,280
workflow is going to be managed by sort

198
00:08:20,280 --> 00:08:22,830
of Factory and all the the building path

199
00:08:22,830 --> 00:08:24,810
is going to be taken care of by CBS by

200
00:08:24,810 --> 00:08:27,690
the community build system so this is a

201
00:08:27,690 --> 00:08:29,909
workflow of you I believe that the

202
00:08:29,909 --> 00:08:32,789
presentation has to include a very

203
00:08:32,789 --> 00:08:34,409
complex workflow diagram that we're not

204
00:08:34,409 --> 00:08:36,059
going to explain because it could it

205
00:08:36,059 --> 00:08:37,500
means that we're doing some service

206
00:08:37,500 --> 00:08:40,409
business but basically what I want to

207
00:08:40,409 --> 00:08:41,279
you

208
00:08:41,279 --> 00:08:42,779
to remember from that is that we're

209
00:08:42,779 --> 00:08:44,759
going to use three different kinds of

210
00:08:44,759 --> 00:08:45,930
represent or ease we're going to work

211
00:08:45,930 --> 00:08:48,870
with upstream with the idea digit which

212
00:08:48,870 --> 00:08:52,769
is a spec files repository and also a

213
00:08:52,769 --> 00:08:55,439
repository for patches that we're going

214
00:08:55,439 --> 00:08:58,170
to include in the introduce it and I

215
00:08:58,170 --> 00:09:00,629
will let a girl talk to you about the

216
00:09:00,629 --> 00:09:02,069
use cases that we cover with this

217
00:09:02,069 --> 00:09:06,680
architecture thanks Matthew

218
00:09:08,240 --> 00:09:12,149
okay just hold it like this okay I call

219
00:09:12,149 --> 00:09:14,160
on the word guys sitting here I'm here

220
00:09:14,160 --> 00:09:16,980
because they're do release Wrangler so

221
00:09:16,980 --> 00:09:19,259
I'm the first user so here to explain

222
00:09:19,259 --> 00:09:21,720
you the use cases so we have three main

223
00:09:21,720 --> 00:09:22,470
use cases

224
00:09:22,470 --> 00:09:24,959
the first one is packaging master branch

225
00:09:24,959 --> 00:09:28,410
as Matthew said so we take sources from

226
00:09:28,410 --> 00:09:31,199
upstream like for instance the Nova

227
00:09:31,199 --> 00:09:33,899
sources and then we take the packaging

228
00:09:33,899 --> 00:09:36,660
sources and then we use DeLorean take

229
00:09:36,660 --> 00:09:39,329
both repository and try to generate an

230
00:09:39,329 --> 00:09:41,339
archive of the sources and then generate

231
00:09:41,339 --> 00:09:44,399
the package using the spec file it has

232
00:09:44,399 --> 00:09:47,370
also some magic to the to do to generate

233
00:09:47,370 --> 00:09:49,319
proper versioning and stuff like that

234
00:09:49,319 --> 00:09:52,680
and after that we we have two

235
00:09:52,680 --> 00:09:56,790
possibilities the package box everything

236
00:09:56,790 --> 00:09:57,600
is fine

237
00:09:57,600 --> 00:10:01,800
well mostly because you could have I

238
00:10:01,800 --> 00:10:04,199
didn't change but or not kappa but but i

239
00:10:04,199 --> 00:10:07,230
obey or job from two packages to fix

240
00:10:07,230 --> 00:10:12,209
that it fails so what will it do so if

241
00:10:12,209 --> 00:10:14,279
it fails usually it's because sources

242
00:10:14,279 --> 00:10:17,579
have changes changed or we have missing

243
00:10:17,579 --> 00:10:20,610
dependencies or stuff like that so we we

244
00:10:20,610 --> 00:10:23,399
need human intervention here so we

245
00:10:23,399 --> 00:10:25,769
create a place order review in garrett

246
00:10:25,769 --> 00:10:29,040
as a way to say hey maintainer we need

247
00:10:29,040 --> 00:10:31,170
your intention to think that point you

248
00:10:31,170 --> 00:10:33,420
have the bullocks showing you what the

249
00:10:33,420 --> 00:10:36,350
problems please fix it and the thing is

250
00:10:36,350 --> 00:10:39,240
since we're using garrett it's public so

251
00:10:39,240 --> 00:10:42,499
anyone can see the filer and fix it and

252
00:10:42,499 --> 00:10:45,899
the maintainer will be able to review

253
00:10:45,899 --> 00:10:48,269
your patch and fix it for you and merge

254
00:10:48,269 --> 00:10:51,269
it so it also helps to lower the panda

255
00:10:51,269 --> 00:10:53,930
bar entry barrier to packaging

256
00:10:53,930 --> 00:10:58,680
so next step well also we're tracking

257
00:10:58,680 --> 00:11:01,770
stable branches so rather than waiting

258
00:11:01,770 --> 00:11:05,910
that upstream maker makes a release we

259
00:11:05,910 --> 00:11:07,530
just say hey let's strike stable

260
00:11:07,530 --> 00:11:10,230
branches do as we do with master branch

261
00:11:10,230 --> 00:11:13,050
and package every comet and see if

262
00:11:13,050 --> 00:11:14,010
anything changed

263
00:11:14,010 --> 00:11:16,680
usually it just works for several

264
00:11:16,680 --> 00:11:19,070
branches at least in up for OpenStack

265
00:11:19,070 --> 00:11:23,250
but the thing is we run CI and we can

266
00:11:23,250 --> 00:11:26,580
detect CI failures early and fix them

267
00:11:26,580 --> 00:11:30,570
usually it's mostly we have to change

268
00:11:30,570 --> 00:11:34,490
dependencies or we have a dependency but

269
00:11:34,490 --> 00:11:39,360
that was updated and broke things so

270
00:11:39,360 --> 00:11:43,340
what does it do two things

271
00:11:43,340 --> 00:11:45,870
since we are sharing branches between

272
00:11:45,870 --> 00:11:47,930
stable branch in striking and release

273
00:11:47,930 --> 00:11:51,270
and actual releases it detects if we

274
00:11:51,270 --> 00:11:54,450
change name and the version manually so

275
00:11:54,450 --> 00:11:57,000
it will do a scratch built on CentOS

276
00:11:57,000 --> 00:12:00,810
bail system so we see if it both and if

277
00:12:00,810 --> 00:12:03,210
it it succeed and the maintainer has

278
00:12:03,210 --> 00:12:05,460
approved the change it will do the V

279
00:12:05,460 --> 00:12:07,320
final before you and you will get

280
00:12:07,320 --> 00:12:11,820
exported to CentOS repositories well the

281
00:12:11,820 --> 00:12:14,280
thing is we get to control who has

282
00:12:14,280 --> 00:12:17,130
access to both system like this and we

283
00:12:17,130 --> 00:12:19,740
it still it helps lowering the entry

284
00:12:19,740 --> 00:12:21,450
barrier because you don't have to grant

285
00:12:21,450 --> 00:12:25,250
both system access to everyone so

286
00:12:25,250 --> 00:12:28,560
apparently for CentOS cloud sig we only

287
00:12:28,560 --> 00:12:31,080
have two or three people with access to

288
00:12:31,080 --> 00:12:33,480
the ball system but we have much more

289
00:12:33,480 --> 00:12:36,480
people doing the we built through

290
00:12:36,480 --> 00:12:39,020
garrett

291
00:12:39,760 --> 00:12:44,450
so this is the same thing so if it fells

292
00:12:44,450 --> 00:12:47,180
are used to need to have the maintainer

293
00:12:47,180 --> 00:12:51,020
come on and fix the patch but it doesn't

294
00:12:51,020 --> 00:12:53,870
get merged the third case is when we

295
00:12:53,870 --> 00:12:57,140
have these two changes for instance you

296
00:12:57,140 --> 00:13:01,160
have a user reporting a bag with system

297
00:13:01,160 --> 00:13:05,390
D services which are something but are

298
00:13:05,390 --> 00:13:08,300
not always tested so it's a distro

299
00:13:08,300 --> 00:13:10,550
specific change so you do the change and

300
00:13:10,550 --> 00:13:13,550
it has a previous use case it will get

301
00:13:13,550 --> 00:13:15,380
billed in the central small system and

302
00:13:15,380 --> 00:13:18,500
drivers you also have another category

303
00:13:18,500 --> 00:13:21,170
of patch which are changes in this so

304
00:13:21,170 --> 00:13:23,630
specific changes which are downstream

305
00:13:23,630 --> 00:13:27,380
patches we are in earlier cases use case

306
00:13:27,380 --> 00:13:29,240
we try to limit the number of downstream

307
00:13:29,240 --> 00:13:32,920
only patch so what we do is we have

308
00:13:32,920 --> 00:13:35,390
repository tracking upstream sources and

309
00:13:35,390 --> 00:13:38,540
we manage downstream patches as open

310
00:13:38,540 --> 00:13:40,660
reviewing Garrett so if you know Garrett

311
00:13:40,660 --> 00:13:43,820
usually when you attach it gets merged

312
00:13:43,820 --> 00:13:46,370
but in this specially specific case it

313
00:13:46,370 --> 00:13:48,170
doesn't get merged this allows us to

314
00:13:48,170 --> 00:13:51,920
track the downstream patches history

315
00:13:51,920 --> 00:13:55,900
across the releases because we keep

316
00:13:55,900 --> 00:14:01,520
updating the the tracking has upstream

317
00:14:01,520 --> 00:14:04,820
tracking repository and our patches are

318
00:14:04,820 --> 00:14:08,780
just a set of reviews and Garrett will

319
00:14:08,780 --> 00:14:10,850
detect if it even need to be rebate or

320
00:14:10,850 --> 00:14:15,800
if we have rebates issues so when when

321
00:14:15,800 --> 00:14:17,930
you can just realize it can do it for

322
00:14:17,930 --> 00:14:20,000
you automatically if you configure Gary

323
00:14:20,000 --> 00:14:23,120
to do automatic rebase if it if you

324
00:14:23,120 --> 00:14:25,880
don't and he or you have failure you

325
00:14:25,880 --> 00:14:27,890
just have you just have to retrieve the

326
00:14:27,890 --> 00:14:30,830
repository retrieve the review code so

327
00:14:30,830 --> 00:14:34,370
the audio package e2 tool will simplify

328
00:14:34,370 --> 00:14:37,280
that for you and then you just do your

329
00:14:37,280 --> 00:14:38,870
manual rebates and update the existing

330
00:14:38,870 --> 00:14:41,120
reviews so it's simplified

331
00:14:41,120 --> 00:14:43,640
maintaining downstream reviews as a

332
00:14:43,640 --> 00:14:46,670
packager for TE to distribution centers

333
00:14:46,670 --> 00:14:49,340
and Fedora I had experience with

334
00:14:49,340 --> 00:14:52,240
managing the stream in patches and

335
00:14:52,240 --> 00:14:54,490
the biggest issue is simplifying

336
00:14:54,490 --> 00:14:57,869
collaborative work across patches so

337
00:14:57,869 --> 00:15:00,100
different texture have used different

338
00:15:00,100 --> 00:15:02,230
tools and they work sometimes on the

339
00:15:02,230 --> 00:15:03,879
same page and here we have only one

340
00:15:03,879 --> 00:15:07,660
Garrett and get period so it makes it

341
00:15:07,660 --> 00:15:11,550
simpler okay

342
00:15:11,550 --> 00:15:16,480
so return on experience so for our deal

343
00:15:16,480 --> 00:15:18,550
we're in the okay at a cycle or guitar

344
00:15:18,550 --> 00:15:21,069
being the next open Stax release which

345
00:15:21,069 --> 00:15:25,269
will happen if around February 20 so we

346
00:15:25,269 --> 00:15:27,970
have numbers for the previous cycle in

347
00:15:27,970 --> 00:15:28,480
Newton

348
00:15:28,480 --> 00:15:33,879
we had about 800 comets from 70

349
00:15:33,879 --> 00:15:36,850
contributors so my team I try that is

350
00:15:36,850 --> 00:15:39,100
about seventh person and not all of them

351
00:15:39,100 --> 00:15:41,439
are doing packaging so that shows that

352
00:15:41,439 --> 00:15:44,079
we have multiple people outside the air

353
00:15:44,079 --> 00:15:48,300
do team helping on the packaging so

354
00:15:48,300 --> 00:15:52,149
mostly people outside reddit and fewer

355
00:15:52,149 --> 00:15:56,860
editors we also can't code through

356
00:15:56,860 --> 00:16:01,779
DeLorean in master branch about 230 Bal

357
00:16:01,779 --> 00:16:07,869
de Ville failure so it's about 1 in half

358
00:16:07,869 --> 00:16:11,199
both failure a day but it's not we don't

359
00:16:11,199 --> 00:16:13,299
have the failure every day it's mostly

360
00:16:13,299 --> 00:16:17,699
about in early in the cycle or during

361
00:16:17,699 --> 00:16:23,529
just before release candidates so we can

362
00:16:23,529 --> 00:16:27,009
get for two weeks noble failure and just

363
00:16:27,009 --> 00:16:28,839
before the release candidate who can get

364
00:16:28,839 --> 00:16:32,259
30 build failure at owns but it allows

365
00:16:32,259 --> 00:16:35,740
us to detect build issue early we when

366
00:16:35,740 --> 00:16:40,179
we get for instance and I'm coming here

367
00:16:40,179 --> 00:16:43,119
edu new tune packages were available in

368
00:16:43,119 --> 00:16:46,240
central suppository 10 hours after the

369
00:16:46,240 --> 00:16:49,899
upstream general announcement and why

370
00:16:49,899 --> 00:16:53,799
because when we the announcement was

371
00:16:53,799 --> 00:16:58,269
made all all our packaging was ready

372
00:16:58,269 --> 00:17:01,329
we had CI jobs that was already running

373
00:17:01,329 --> 00:17:04,029
against that code because it got frozen

374
00:17:04,029 --> 00:17:05,369
at some point

375
00:17:05,369 --> 00:17:08,940
or what that what we had to do was just

376
00:17:08,940 --> 00:17:12,420
pushing the final the final tags in the

377
00:17:12,420 --> 00:17:17,270
Beijing repo running CI jobs generating

378
00:17:17,270 --> 00:17:20,930
repositional repositories and also

379
00:17:20,930 --> 00:17:23,220
updating documentation or own

380
00:17:23,220 --> 00:17:25,829
announcement and that's all so that's

381
00:17:25,829 --> 00:17:29,010
quite fast because the usual process for

382
00:17:29,010 --> 00:17:30,870
distribution is wait for the

383
00:17:30,870 --> 00:17:34,050
announcement retrieve the double try to

384
00:17:34,050 --> 00:17:37,740
build the thing if it fails fix it so

385
00:17:37,740 --> 00:17:39,360
just imagine for OpenStack which is

386
00:17:39,360 --> 00:17:42,090
about 400 packages and I'm not even

387
00:17:42,090 --> 00:17:44,610
counting the dependencies so if you're

388
00:17:44,610 --> 00:17:46,950
trying to do that it takes like two

389
00:17:46,950 --> 00:17:50,430
weeks at least to do to roll a release

390
00:17:50,430 --> 00:17:56,160
and two weeks is very very narrow to do

391
00:17:56,160 --> 00:18:00,710
that so it would kind of successful to

392
00:18:00,710 --> 00:18:03,630
release faster and with higher quality

393
00:18:03,630 --> 00:18:10,200
thanks to CI jobs running behind so the

394
00:18:10,200 --> 00:18:12,810
return on experience was it would we

395
00:18:12,810 --> 00:18:15,150
have automated the distribution pipeline

396
00:18:15,150 --> 00:18:18,690
so it's like continuous delivery in

397
00:18:18,690 --> 00:18:21,690
practice so we're following the

398
00:18:21,690 --> 00:18:23,700
OpenStack pipeline integrating within

399
00:18:23,700 --> 00:18:28,320
the CentOS pipeline release pipeline we

400
00:18:28,320 --> 00:18:30,390
have still few ish you feel these few

401
00:18:30,390 --> 00:18:33,110
things to automate but it's mostly here

402
00:18:33,110 --> 00:18:39,720
sorry we leveraged the collaborative

403
00:18:39,720 --> 00:18:42,750
work through Gerrit know and reviewing

404
00:18:42,750 --> 00:18:45,510
so it has made much advantage on over

405
00:18:45,510 --> 00:18:48,330
github pull request but but I think the

406
00:18:48,330 --> 00:18:50,340
same article that Matthew was pointing

407
00:18:50,340 --> 00:18:53,900
out earlier I think another one okay

408
00:18:53,900 --> 00:18:56,900
okay

409
00:18:57,559 --> 00:19:01,230
okay one of the issue when we start a

410
00:19:01,230 --> 00:19:06,240
new rpm or any packaging distribution is

411
00:19:06,240 --> 00:19:07,470
like building a community of

412
00:19:07,470 --> 00:19:10,620
contributors okay let's let's be honest

413
00:19:10,620 --> 00:19:12,630
most open site developers don't care

414
00:19:12,630 --> 00:19:14,820
about packaging they don't want to learn

415
00:19:14,820 --> 00:19:16,320
about my dreams I don't want about to

416
00:19:16,320 --> 00:19:18,780
learn about new process so we are using

417
00:19:18,780 --> 00:19:21,090
a process that is much similar to the

418
00:19:21,090 --> 00:19:23,309
OpenStack one you see we they using

419
00:19:23,309 --> 00:19:26,070
Garrett we years and Garrett we have the

420
00:19:26,070 --> 00:19:31,110
same concepts and also anyone but he's

421
00:19:31,110 --> 00:19:32,820
not family we think Jing can start

422
00:19:32,820 --> 00:19:34,919
rolling up because they can see two

423
00:19:34,919 --> 00:19:38,100
reviews how people are working what we

424
00:19:38,100 --> 00:19:41,730
are changing inspect files and stuff so

425
00:19:41,730 --> 00:19:45,090
it's kinda self documenting process so

426
00:19:45,090 --> 00:19:47,790
it makes it simpler and you get Cod

427
00:19:47,790 --> 00:19:49,950
transparency and peer reviewing and so

428
00:19:49,950 --> 00:19:54,780
and so on faster and boarding so if you

429
00:19:54,780 --> 00:19:57,330
want to join us so if you want to

430
00:19:57,330 --> 00:19:59,309
implement that kind of process you can

431
00:19:59,309 --> 00:20:01,080
look at software from factory pro day

432
00:20:01,080 --> 00:20:05,280
dot IO which is the basis of the RPM

433
00:20:05,280 --> 00:20:10,110
factory project it is used by software

434
00:20:10,110 --> 00:20:13,380
factory itself distributed CGI which is

435
00:20:13,380 --> 00:20:17,780
a distributed CI for rpm distributions

436
00:20:17,780 --> 00:20:22,950
skydive which is a network analysis in

437
00:20:22,950 --> 00:20:29,610
giant yeah and also every if you want to

438
00:20:29,610 --> 00:20:32,370
see alive you also have review dot I do

439
00:20:32,370 --> 00:20:36,510
project or that was three project aired

440
00:20:36,510 --> 00:20:38,370
you from the cloud

441
00:20:38,370 --> 00:20:42,390
Santos classic DeLorean project and also

442
00:20:42,390 --> 00:20:44,720
op tools which is another Santos seek

443
00:20:44,720 --> 00:20:47,910
providing operational in operational

444
00:20:47,910 --> 00:20:51,780
tooling and maybe your project or maybe

445
00:20:51,780 --> 00:20:54,480
you won't want to build your instance so

446
00:20:54,480 --> 00:20:56,640
if you want to keep in touch well

447
00:20:56,640 --> 00:21:00,030
software the factory project dot IO or

448
00:21:00,030 --> 00:21:02,700
area also where you product on fee note

449
00:21:02,700 --> 00:21:05,280
you have you have the software factory

450
00:21:05,280 --> 00:21:08,000
channel if you want to roll your own

451
00:21:08,000 --> 00:21:12,380
if you want to have feedback or help or

452
00:21:12,380 --> 00:21:16,010
want to know about open Zak we have the

453
00:21:16,010 --> 00:21:19,970
audio channel and also the mailing list

454
00:21:19,970 --> 00:21:24,100
of both projects so feel free to ping us

455
00:21:24,100 --> 00:21:29,510
mature is a moving on are see I'm a I'm

456
00:21:29,510 --> 00:21:32,600
number eighty on freenode so feel free

457
00:21:32,600 --> 00:21:35,210
to ping us or catch us in the lobby so

458
00:21:35,210 --> 00:21:42,290
thank you for attending before we take

459
00:21:42,290 --> 00:21:44,000
any questions since we made it pretty

460
00:21:44,000 --> 00:21:46,550
fast actually so that's good I just want

461
00:21:46,550 --> 00:21:48,140
to add something that I didn't have time

462
00:21:48,140 --> 00:21:50,660
to mention before about the way the

463
00:21:50,660 --> 00:21:52,160
workflow is implemented we can look at

464
00:21:52,160 --> 00:21:57,530
the workflow diagram important thing

465
00:21:57,530 --> 00:21:59,900
that is added through sort of Factory is

466
00:21:59,900 --> 00:22:01,640
that all the tests for CI are done

467
00:22:01,640 --> 00:22:04,550
before any actual mattering so that's a

468
00:22:04,550 --> 00:22:05,990
very different approach to what usually

469
00:22:05,990 --> 00:22:09,080
CI does which because the CI tests are

470
00:22:09,080 --> 00:22:11,090
usually launched once some code is added

471
00:22:11,090 --> 00:22:13,850
to the code base and because we have we

472
00:22:13,850 --> 00:22:15,380
are an open source project and we might

473
00:22:15,380 --> 00:22:17,870
have a lot of contributions we want to

474
00:22:17,870 --> 00:22:19,100
make sure that the contributions are

475
00:22:19,100 --> 00:22:21,440
valid before we actually match them so

476
00:22:21,440 --> 00:22:23,060
not just a peer review but also

477
00:22:23,060 --> 00:22:26,060
automated validation so do you have any

478
00:22:26,060 --> 00:22:28,450
questions

479
00:22:28,960 --> 00:22:33,490
it's on the on the idea of documentation

480
00:22:34,930 --> 00:22:37,930
yes

481
00:22:42,410 --> 00:23:10,160
it's complicated now we have our own

482
00:23:10,160 --> 00:23:13,310
tuning to flatten the patch in the

483
00:23:13,310 --> 00:23:18,710
packaging discs it because desk it just

484
00:23:18,710 --> 00:23:22,250
store all the downstream patches in the

485
00:23:22,250 --> 00:23:25,910
repo so we don't need any of them inside

486
00:23:25,910 --> 00:23:27,920
a position we'll just need a tool to

487
00:23:27,920 --> 00:23:30,920
retrieve the flattened patches so all

488
00:23:30,920 --> 00:23:32,150
right you a package II will connect to

489
00:23:32,150 --> 00:23:34,400
Garrett oh it will see all the open

490
00:23:34,400 --> 00:23:38,120
reviews and it will check if she is

491
00:23:38,120 --> 00:23:40,160
passing it will check also the voting so

492
00:23:40,160 --> 00:23:42,980
you can have patches open a review open

493
00:23:42,980 --> 00:23:45,020
that if we don't get the right votes

494
00:23:45,020 --> 00:23:47,810
they are not included so you can even

495
00:23:47,810 --> 00:23:50,540
remove that very fast II and okay I will

496
00:23:50,540 --> 00:23:52,940
just change my vote here to remove it

497
00:23:52,940 --> 00:23:55,010
and it gets removed automatically for

498
00:23:55,010 --> 00:23:58,930
you okay another question

499
00:24:05,539 --> 00:24:11,570
oh we trying actually the thing is we

500
00:24:11,570 --> 00:24:13,970
don't have enough capacity to run that

501
00:24:13,970 --> 00:24:16,639
but it's we're retrieving changes from

502
00:24:16,639 --> 00:24:19,190
upstream every five minutes so that's

503
00:24:19,190 --> 00:24:22,129
pretty much close but sometimes we get

504
00:24:22,129 --> 00:24:24,879
three codes merge at the same time and

505
00:24:24,879 --> 00:24:27,820
we just test them all together but

506
00:24:27,820 --> 00:24:30,739
that's something we're working on but I

507
00:24:30,739 --> 00:24:34,489
don't think we ever had more than three

508
00:24:34,489 --> 00:24:38,239
commits tested an ounce in practice and

509
00:24:38,239 --> 00:24:40,759
by the way I'm seeing an airplane

510
00:24:40,759 --> 00:24:43,759
factory Pro contributors here sale so if

511
00:24:43,759 --> 00:24:46,690
you can oppose him

512
00:24:47,050 --> 00:24:50,200
[Applause]

513
00:24:52,390 --> 00:24:55,749
[Applause]

