1
00:00:04,680 --> 00:00:06,779
but we already talked like a lot about

2
00:00:06,779 --> 00:00:09,030
like graphs and like graph their bases

3
00:00:09,030 --> 00:00:12,360
themselves so I kind of want to follow

4
00:00:12,360 --> 00:00:14,070
that path directly but I want to talk

5
00:00:14,070 --> 00:00:15,839
about like how we can deploy them and

6
00:00:15,839 --> 00:00:18,360
maybe just question up front who has

7
00:00:18,360 --> 00:00:20,759
heard about measles or who has even used

8
00:00:20,759 --> 00:00:24,360
Mesa or DCOs before wow that's actually

9
00:00:24,360 --> 00:00:26,700
that's a lot of people who use near 4j

10
00:00:26,700 --> 00:00:31,110
on Mesa so DC is one hand I hope one

11
00:00:31,110 --> 00:00:34,020
hand yeah at least okay so that's what

12
00:00:34,020 --> 00:00:36,540
we're going to talk about here and to

13
00:00:36,540 --> 00:00:39,480
start out I'm York so I'm working at

14
00:00:39,480 --> 00:00:41,190
distributed systems engineer and

15
00:00:41,190 --> 00:00:44,070
developer advocate atmosphere so that

16
00:00:44,070 --> 00:00:46,379
means are mostly coding on here my shirt

17
00:00:46,379 --> 00:00:48,839
hacci missus or I'm like around King

18
00:00:48,839 --> 00:00:51,269
talks developing the most talking to you

19
00:00:51,269 --> 00:00:53,219
those guys as for example near for Jade

20
00:00:53,219 --> 00:00:55,140
get like more partners involved in this

21
00:00:55,140 --> 00:00:58,199
ecosystem and so this is actually also

22
00:00:58,199 --> 00:01:00,859
how we got to this idea for the star and

23
00:01:00,859 --> 00:01:03,210
first question we actually need a

24
00:01:03,210 --> 00:01:06,420
cluster so near 4j also runs kind of

25
00:01:06,420 --> 00:01:08,790
decent on like one box we'd already do

26
00:01:08,790 --> 00:01:10,740
quite a lot quite large graphs in like a

27
00:01:10,740 --> 00:01:14,040
single box and so the cool thing about

28
00:01:14,040 --> 00:01:17,910
near 4j is actually that we can cluster

29
00:01:17,910 --> 00:01:20,760
for most like high availability but also

30
00:01:20,760 --> 00:01:23,040
for like those replicas service where we

31
00:01:23,040 --> 00:01:26,520
read replicas for specific use cases so

32
00:01:26,520 --> 00:01:28,980
those of you who might not have seen

33
00:01:28,980 --> 00:01:32,330
that yet so neo4j it has like a core

34
00:01:32,330 --> 00:01:35,220
clusters core servers they're actually

35
00:01:35,220 --> 00:01:37,530
in the current versions if like synced

36
00:01:37,530 --> 00:01:40,890
rights so they're like also right here

37
00:01:40,890 --> 00:01:43,050
and they're gonna have one elected

38
00:01:43,050 --> 00:01:46,140
leader who is kind of like the observer

39
00:01:46,140 --> 00:01:48,720
in charge and then around we can

40
00:01:48,720 --> 00:01:50,820
actually we can create a bunch of read

41
00:01:50,820 --> 00:01:52,800
replicas which are only there to

42
00:01:52,800 --> 00:01:55,470
basically read data and the cool part

43
00:01:55,470 --> 00:01:58,140
about us I can have dedicated replicas

44
00:01:58,140 --> 00:02:01,350
for specific like purposes or topics so

45
00:02:01,350 --> 00:02:04,050
they'll be optimized for for example for

46
00:02:04,050 --> 00:02:07,380
reporting and another analytics I can

47
00:02:07,380 --> 00:02:09,780
have other read replicas targeted to

48
00:02:09,780 --> 00:02:13,349
specific curie types so i can actually

49
00:02:13,349 --> 00:02:15,780
by utilizing multiple cluster nodes i

50
00:02:15,780 --> 00:02:18,300
can really efficiently have

51
00:02:18,300 --> 00:02:21,930
and so like all / most of my crew astray

52
00:02:21,930 --> 00:02:25,950
off my cluster and so this is like one

53
00:02:25,950 --> 00:02:27,450
use case where we need a clutter and

54
00:02:27,450 --> 00:02:29,310
then of course a question how can we

55
00:02:29,310 --> 00:02:30,960
actually manage this kind of like

56
00:02:30,960 --> 00:02:35,310
large-scale bluster when we as Smith

57
00:02:35,310 --> 00:02:38,100
sphere when we look at clusters we often

58
00:02:38,100 --> 00:02:40,820
see is kind of like a static

59
00:02:40,820 --> 00:02:43,520
partitioning across different workloads

60
00:02:43,520 --> 00:02:46,770
imagine so what we would for example see

61
00:02:46,770 --> 00:02:49,170
we would see like a four servers being

62
00:02:49,170 --> 00:02:52,200
dedicated to neo4j and this does

63
00:02:52,200 --> 00:02:54,570
necessarily mean for physical search

64
00:02:54,570 --> 00:02:56,850
this can mean like all virtual servers

65
00:02:56,850 --> 00:02:59,400
or yeah for instances particularly

66
00:02:59,400 --> 00:03:02,220
reserved from your 4j then we have

67
00:03:02,220 --> 00:03:04,260
another stop part of our clutter which

68
00:03:04,260 --> 00:03:07,260
is dedicated to Kafka we have one sub

69
00:03:07,260 --> 00:03:08,820
part of our cluster which just may be

70
00:03:08,820 --> 00:03:11,100
dedicated to like a second mere 4j

71
00:03:11,100 --> 00:03:13,950
cluster so this mutt for example be easy

72
00:03:13,950 --> 00:03:17,400
test cluster which some other team is

73
00:03:17,400 --> 00:03:19,770
running might if a bunch of Micra

74
00:03:19,770 --> 00:03:21,660
services might have something as we

75
00:03:21,660 --> 00:03:24,120
heard about before we might Apache fling

76
00:03:24,120 --> 00:03:26,790
flings there so we actually what we end

77
00:03:26,790 --> 00:03:29,010
up doing is we end up sub partitioning

78
00:03:29,010 --> 00:03:31,800
our cluster into very a number of

79
00:03:31,800 --> 00:03:34,740
smaller sub clusters each dedicated to

80
00:03:34,740 --> 00:03:38,180
specific service or a specific framework

81
00:03:38,180 --> 00:03:40,760
and this actually has multiple

82
00:03:40,760 --> 00:03:43,290
disadvantages so the first one from an

83
00:03:43,290 --> 00:03:45,720
operational standpoint is that I

84
00:03:45,720 --> 00:03:47,670
actually as an operator I really have to

85
00:03:47,670 --> 00:03:50,010
take care a lot about like moving stuff

86
00:03:50,010 --> 00:03:52,530
so for example what happens if one of

87
00:03:52,530 --> 00:03:54,960
those near 4j nodes like my main year

88
00:03:54,960 --> 00:03:57,630
for a cluster is failing then I as an

89
00:03:57,630 --> 00:04:00,360
operator I would have to go in move over

90
00:04:00,360 --> 00:04:03,150
one node from for example from the fling

91
00:04:03,150 --> 00:04:06,150
cluster and so it would actually involve

92
00:04:06,150 --> 00:04:09,660
like a lot of manual work the second big

93
00:04:09,660 --> 00:04:11,940
disadvantage of this small is that we

94
00:04:11,940 --> 00:04:14,100
actually end up with very bad resource

95
00:04:14,100 --> 00:04:16,709
utilization so usually those clusters

96
00:04:16,709 --> 00:04:19,200
they end up at real soot utilization

97
00:04:19,200 --> 00:04:21,870
somewhere between 50 and 20% because

98
00:04:21,870 --> 00:04:24,750
each of the sub cluster so my near for

99
00:04:24,750 --> 00:04:27,060
J's plus term my flames of bluster I

100
00:04:27,060 --> 00:04:29,250
have to basically provide them for like

101
00:04:29,250 --> 00:04:31,320
the highest load around and so I'm

102
00:04:31,320 --> 00:04:31,980
actually

103
00:04:31,980 --> 00:04:34,560
normal operation I'm wasting a lot of

104
00:04:34,560 --> 00:04:39,150
resources so the tart image where we

105
00:04:39,150 --> 00:04:41,880
would actually like to go to is this

106
00:04:41,880 --> 00:04:44,790
year where we actually we kind of don't

107
00:04:44,790 --> 00:04:46,980
care about as much individual machines

108
00:04:46,980 --> 00:04:49,110
who basically retreat our datacenter is

109
00:04:49,110 --> 00:04:51,060
like one big block one big pool of

110
00:04:51,060 --> 00:04:53,790
resources and they're simply deploy all

111
00:04:53,790 --> 00:04:56,880
those services and as an operator I

112
00:04:56,880 --> 00:04:59,070
don't care too much on which particular

113
00:04:59,070 --> 00:05:01,800
node for example near J is running as

114
00:05:01,800 --> 00:05:03,900
long as my clusters up and running and

115
00:05:03,900 --> 00:05:06,510
he'll see the system should take care of

116
00:05:06,510 --> 00:05:09,900
this and this is this picture is exactly

117
00:05:09,900 --> 00:05:12,480
the reason why Apache mesas was

118
00:05:12,480 --> 00:05:15,390
originally developed we're going to see

119
00:05:15,390 --> 00:05:17,910
a bit about the history in just a second

120
00:05:17,910 --> 00:05:21,450
but basically this east of operation use

121
00:05:21,450 --> 00:05:23,310
so how can i deploy like my large

122
00:05:23,310 --> 00:05:27,300
compute cluster how can i deploy near

123
00:05:27,300 --> 00:05:30,180
multiple neutral j instances this was

124
00:05:30,180 --> 00:05:31,950
like one of the main reasons and second

125
00:05:31,950 --> 00:05:33,960
reason is basically increasing resource

126
00:05:33,960 --> 00:05:37,350
utilization throughout my cluster and we

127
00:05:37,350 --> 00:05:39,660
just briefly go back to this image like

128
00:05:39,660 --> 00:05:42,840
one of the main drivers in my opinion

129
00:05:42,840 --> 00:05:44,640
what we see is the increasing need for

130
00:05:44,640 --> 00:05:48,240
such kind of system as missus is that

131
00:05:48,240 --> 00:05:50,130
actually here's the number of frameworks

132
00:05:50,130 --> 00:05:53,280
or the number of systems which actually

133
00:05:53,280 --> 00:05:55,050
would like to own which would like to

134
00:05:55,050 --> 00:05:56,730
have their own SAP cluster it's

135
00:05:56,730 --> 00:05:58,470
increasing why nowadays we have

136
00:05:58,470 --> 00:06:02,400
sparkling near 4j so they're like a loft

137
00:06:02,400 --> 00:06:04,680
framework say a lot of sub-clusters I

138
00:06:04,680 --> 00:06:06,780
could potentially create and so it

139
00:06:06,780 --> 00:06:09,300
becomes very like unfeasible back in

140
00:06:09,300 --> 00:06:10,860
those days when we juiced it like who

141
00:06:10,860 --> 00:06:13,080
dupes their one system which wanted to

142
00:06:13,080 --> 00:06:14,760
own the entire clusters that we still

143
00:06:14,760 --> 00:06:17,790
like under okayish but now we have like

144
00:06:17,790 --> 00:06:19,560
a lot of different systems wanting to

145
00:06:19,560 --> 00:06:23,270
only cluster it not as okay in war and

146
00:06:23,270 --> 00:06:26,820
the way missus actually doing that spies

147
00:06:26,820 --> 00:06:28,710
this fancy term called two-level

148
00:06:28,710 --> 00:06:31,110
scheduling a two-level scheduling

149
00:06:31,110 --> 00:06:34,500
basically refers to that we have mesas

150
00:06:34,500 --> 00:06:36,450
the one hand basically just dealing with

151
00:06:36,450 --> 00:06:38,520
resource allocation and then for

152
00:06:38,520 --> 00:06:41,070
particular frameworks or basically for

153
00:06:41,070 --> 00:06:42,840
each those frameworks we saw the left

154
00:06:42,840 --> 00:06:45,630
side we have a scheduler so

155
00:06:45,630 --> 00:06:47,370
schedules basically like this component

156
00:06:47,370 --> 00:06:49,470
which is controlling which resources are

157
00:06:49,470 --> 00:06:52,470
used in the cluster how do I react to

158
00:06:52,470 --> 00:06:54,440
when one of those notes is failing and

159
00:06:54,440 --> 00:06:56,430
actually there's even a default

160
00:06:56,430 --> 00:06:58,320
scheduler so for example for the near

161
00:06:58,320 --> 00:07:00,870
four day example we will see in the sang

162
00:07:00,870 --> 00:07:03,060
we didn't have to ride scheduler but

163
00:07:03,060 --> 00:07:04,950
there's like a default gage Allah I can

164
00:07:04,950 --> 00:07:06,480
simply use which will take care that

165
00:07:06,480 --> 00:07:09,150
scheduling my stuff restarting stuff if

166
00:07:09,150 --> 00:07:12,540
it failed in the cluster and this is

167
00:07:12,540 --> 00:07:14,700
actually done and this is like

168
00:07:14,700 --> 00:07:17,460
symbolizing this new level video link as

169
00:07:17,460 --> 00:07:19,410
well because she ins and metal is this

170
00:07:19,410 --> 00:07:21,330
basically like the missus layers this is

171
00:07:21,330 --> 00:07:23,220
the missus abstraction layer which is

172
00:07:23,220 --> 00:07:25,440
obstructing the schedulers which here a

173
00:07:25,440 --> 00:07:28,260
half Lhasa marathon schedule marathon is

174
00:07:28,260 --> 00:07:29,970
the default schedule I was talking about

175
00:07:29,970 --> 00:07:32,250
and then this for example could be a

176
00:07:32,250 --> 00:07:34,200
dedicated neo4j scheduler

177
00:07:34,200 --> 00:07:37,080
this could be a SPOC scheduler and so

178
00:07:37,080 --> 00:07:38,820
they are basically separated by this

179
00:07:38,820 --> 00:07:41,550
layer of missus by the meatus masters

180
00:07:41,550 --> 00:07:43,590
from the underlying note from the

181
00:07:43,590 --> 00:07:46,290
underlying hardware so actually those

182
00:07:46,290 --> 00:07:48,660
schedulers here they see the entire

183
00:07:48,660 --> 00:07:50,670
infrastructure they basically only sees

184
00:07:50,670 --> 00:07:53,190
a subset which is provided by the missus

185
00:07:53,190 --> 00:07:56,640
matter and that makes it actually very

186
00:07:56,640 --> 00:08:00,260
flexible and impendent to failure so if

187
00:08:00,260 --> 00:08:03,210
one of the s-- nodes fails basically the

188
00:08:03,210 --> 00:08:05,160
scheduler and we started on another node

189
00:08:05,160 --> 00:08:08,390
and the application can continue running

190
00:08:08,390 --> 00:08:11,520
also just to have the complete picture

191
00:08:11,520 --> 00:08:15,210
also this master level the Mises master

192
00:08:15,210 --> 00:08:17,760
level is highly available they have a

193
00:08:17,760 --> 00:08:19,590
zookeeper form which basically always

194
00:08:19,590 --> 00:08:21,420
make sure that we always select like the

195
00:08:21,420 --> 00:08:25,380
leading mater similar to like this yes

196
00:08:25,380 --> 00:08:28,110
we have basically multiple stamp I know

197
00:08:28,110 --> 00:08:31,940
it's if one of the master should fail

198
00:08:31,940 --> 00:08:34,830
the history is actually it's also kind

199
00:08:34,830 --> 00:08:37,440
of interesting so it actually originated

200
00:08:37,440 --> 00:08:40,260
as a class project at UC Berkeley and

201
00:08:40,260 --> 00:08:42,479
that's actually the same lab where spark

202
00:08:42,479 --> 00:08:45,240
was initially invented or developed and

203
00:08:45,240 --> 00:08:47,460
spark was originally actually developed

204
00:08:47,460 --> 00:08:49,770
us like a demo framer to show how easy

205
00:08:49,770 --> 00:08:51,660
it is to write distributed systems

206
00:08:51,660 --> 00:08:54,300
together with missus and then what

207
00:08:54,300 --> 00:08:56,220
actually happens those students who were

208
00:08:56,220 --> 00:08:58,950
developing that at UC Berkeley ampler

209
00:08:58,950 --> 00:08:59,459
that

210
00:08:59,459 --> 00:09:01,619
a feedback talk at Twitter and Twitter

211
00:09:01,619 --> 00:09:03,360
if you remember had like all those

212
00:09:03,360 --> 00:09:05,579
issues like this fail mail whenever the

213
00:09:05,579 --> 00:09:07,410
infrastructure couldn't cope with all

214
00:09:07,410 --> 00:09:10,139
the users and so it's actually we're

215
00:09:10,139 --> 00:09:12,720
really happy about it and they which in

216
00:09:12,720 --> 00:09:14,249
my opinion was a really cool decision

217
00:09:14,249 --> 00:09:17,220
they also decided to actually make it an

218
00:09:17,220 --> 00:09:20,519
Apache open source project pre soon and

219
00:09:20,519 --> 00:09:23,819
so in 2010 it became an Apache Incubator

220
00:09:23,819 --> 00:09:26,459
project and live about nine months later

221
00:09:26,459 --> 00:09:28,529
it was like a full top-level Apache

222
00:09:28,529 --> 00:09:32,189
project and then the last step in this

223
00:09:32,189 --> 00:09:35,670
slide is basically DC u.s. DC us we're

224
00:09:35,670 --> 00:09:37,279
going to see is another open source

225
00:09:37,279 --> 00:09:40,319
distribution of missiles which basically

226
00:09:40,319 --> 00:09:42,600
brings like all the stuff around which

227
00:09:42,600 --> 00:09:44,939
makes it easy to apply and what makes it

228
00:09:44,939 --> 00:09:48,179
easy for like other frameworks as for

229
00:09:48,179 --> 00:09:53,999
example near 4j integrates there so I

230
00:09:53,999 --> 00:09:56,360
mentioned almost all of this maybe just

231
00:09:56,360 --> 00:09:59,939
those for reference like who actually

232
00:09:59,939 --> 00:10:02,100
all using that Twitter is definitely

233
00:10:02,100 --> 00:10:04,529
based on it Airbnb whoever booked his

234
00:10:04,529 --> 00:10:06,449
Airbnb while staying here in Brussels

235
00:10:06,449 --> 00:10:09,600
has seen that PayPal and the flakes and

236
00:10:09,600 --> 00:10:13,379
actually anyone ever used Apple Theory

237
00:10:13,379 --> 00:10:18,600
also has used missus underneath so when

238
00:10:18,600 --> 00:10:21,629
we're talking about databases of course

239
00:10:21,629 --> 00:10:23,720
we also have to talk about storage and

240
00:10:23,720 --> 00:10:27,600
their different kind of applications or

241
00:10:27,600 --> 00:10:29,879
different kind of data applications and

242
00:10:29,879 --> 00:10:32,339
all of them they have different needs

243
00:10:32,339 --> 00:10:35,850
for storage so the really the part this

244
00:10:35,850 --> 00:10:38,549
is particularly on the tops is rely goes

245
00:10:38,549 --> 00:10:40,799
front and or non persistent applications

246
00:10:40,799 --> 00:10:42,720
if I have my node.js application which

247
00:10:42,720 --> 00:10:45,269
does have any state and I have my nginx

248
00:10:45,269 --> 00:10:47,639
which doesn't really have a hold of

249
00:10:47,639 --> 00:10:49,499
state or Nam

250
00:10:49,499 --> 00:10:51,540
that I don't really care on which of

251
00:10:51,540 --> 00:10:54,179
those notice restarting imagine my nginx

252
00:10:54,179 --> 00:10:55,110
server is failing

253
00:10:55,110 --> 00:10:56,970
I don't care where it's restarting it

254
00:10:56,970 --> 00:10:58,860
can be any note as soon as it's coming

255
00:10:58,860 --> 00:11:02,490
back up quickly if I'm having a dear

256
00:11:02,490 --> 00:11:05,519
base as for example neo4j

257
00:11:05,519 --> 00:11:08,249
it's slightly different right because

258
00:11:08,249 --> 00:11:11,069
they're actually have date and they're

259
00:11:11,069 --> 00:11:13,100
actually end up with two

260
00:11:13,100 --> 00:11:15,800
different kinds of models so there are

261
00:11:15,800 --> 00:11:18,650
databases as near for James you're

262
00:11:18,650 --> 00:11:20,720
really written for this kind of flight

263
00:11:20,720 --> 00:11:23,120
distributed ecosystem already so what

264
00:11:23,120 --> 00:11:25,460
they have is what's all like on the same

265
00:11:25,460 --> 00:11:26,090
slide

266
00:11:26,090 --> 00:11:28,400
they have like inbuilt replication so

267
00:11:28,400 --> 00:11:30,170
they can actually survive forcing node

268
00:11:30,170 --> 00:11:32,510
failure or potentially multiple

269
00:11:32,510 --> 00:11:35,440
depending on how many replicas you have

270
00:11:35,440 --> 00:11:37,940
but they're all other databases so I

271
00:11:37,940 --> 00:11:41,480
take like a standard my sequel instance

272
00:11:41,480 --> 00:11:43,580
like a single my single instance this

273
00:11:43,580 --> 00:11:46,250
won't survive my single node failure but

274
00:11:46,250 --> 00:11:48,140
then basically all my data is going to

275
00:11:48,140 --> 00:11:53,000
be gone so for actually bozos models we

276
00:11:53,000 --> 00:11:55,180
have different storage opportunities

277
00:11:55,180 --> 00:11:59,060
inside missus so for the malls as for

278
00:11:59,060 --> 00:12:01,430
example neo4j which already have this

279
00:12:01,430 --> 00:12:04,190
inbuilt replica we have something called

280
00:12:04,190 --> 00:12:06,410
local persistent volume this means

281
00:12:06,410 --> 00:12:09,050
you're gonna get fast storage which is

282
00:12:09,050 --> 00:12:10,820
directly attached who's a node it's just

283
00:12:10,820 --> 00:12:13,370
going to be the hard disk flash drive as

284
00:12:13,370 --> 00:12:16,820
the inside node and I can really use

285
00:12:16,820 --> 00:12:20,000
that quickly and fast as I would use in

286
00:12:20,000 --> 00:12:23,300
normal not disk and the nice thing is

287
00:12:23,300 --> 00:12:25,190
whatever happens in the classroom when

288
00:12:25,190 --> 00:12:27,620
that node fails when neo4j is the

289
00:12:27,620 --> 00:12:29,180
instance is failing whenever it comes

290
00:12:29,180 --> 00:12:29,750
back up

291
00:12:29,750 --> 00:12:32,060
I still get all those resources back so

292
00:12:32,060 --> 00:12:34,220
I can keep up running on that particular

293
00:12:34,220 --> 00:12:37,010
note if I'm on the edge side and I'm

294
00:12:37,010 --> 00:12:38,030
running I'm seeing blacks is

295
00:12:38,030 --> 00:12:40,460
old-fashioned my sequel then it's

296
00:12:40,460 --> 00:12:42,650
slightly different Chris in that case I

297
00:12:42,650 --> 00:12:44,540
cannot devise a single node failure and

298
00:12:44,540 --> 00:12:50,270
I actually I want to mature that I can

299
00:12:50,270 --> 00:12:53,450
restart on a node in the cluster because

300
00:12:53,450 --> 00:12:55,190
if that node is fail I need to be able

301
00:12:55,190 --> 00:12:57,710
to repeat my nose and that's what we

302
00:12:57,710 --> 00:13:00,290
actually have external storage which

303
00:13:00,290 --> 00:13:02,630
helps us to be able to restart on any

304
00:13:02,630 --> 00:13:04,570
node and basically retrieves that

305
00:13:04,570 --> 00:13:07,490
distributed storage if I something like

306
00:13:07,490 --> 00:13:09,410
neo4j I don't want to use the

307
00:13:09,410 --> 00:13:11,540
distributed storage recurs in that case

308
00:13:11,540 --> 00:13:13,640
I would have distributed i/o on like two

309
00:13:13,640 --> 00:13:16,250
levels first inside neo4j is a database

310
00:13:16,250 --> 00:13:18,800
for each replica and then again unlike

311
00:13:18,800 --> 00:13:21,740
the storage layer so if I already have

312
00:13:21,740 --> 00:13:23,720
the layer in build I don't want to use

313
00:13:23,720 --> 00:13:25,400
it

314
00:13:25,400 --> 00:13:28,339
DCOs so as mentioned before ECS is

315
00:13:28,339 --> 00:13:30,589
basically distribution around me so so

316
00:13:30,589 --> 00:13:32,330
it basically comes with like all the

317
00:13:32,330 --> 00:13:33,860
features service discovery load

318
00:13:33,860 --> 00:13:36,380
balancing comes with an not UI which

319
00:13:36,380 --> 00:13:38,480
we're going to see so it actually it

320
00:13:38,480 --> 00:13:40,250
helps me to deploy it Chris I don't have

321
00:13:40,250 --> 00:13:41,660
to worry about like all those nifty

322
00:13:41,660 --> 00:13:43,940
details it basically it comes all out of

323
00:13:43,940 --> 00:13:46,640
the box I can install it on Pam's air

324
00:13:46,640 --> 00:13:48,800
package available I can install it with

325
00:13:48,800 --> 00:13:50,839
cloud templates so I can actually also

326
00:13:50,839 --> 00:13:54,290
choose where I want to run it this is UI

327
00:13:54,290 --> 00:13:56,320
which we're going to see in a second and

328
00:13:56,320 --> 00:13:58,670
maybe just more important as we're

329
00:13:58,670 --> 00:14:02,270
talking about different applications we

330
00:14:02,270 --> 00:14:04,610
have this cool thing called apps we have

331
00:14:04,610 --> 00:14:06,950
basically the Astra for your cluster so

332
00:14:06,950 --> 00:14:08,900
here you can go with like one click you

333
00:14:08,900 --> 00:14:12,260
can install spark kafka or actually also

334
00:14:12,260 --> 00:14:15,890
our different knee of JPAC edges and as

335
00:14:15,890 --> 00:14:18,770
I have some minutes left I would

336
00:14:18,770 --> 00:14:21,589
actually just like to go to my clutter

337
00:14:21,589 --> 00:14:25,700
and show that so here I have my cluster

338
00:14:25,700 --> 00:14:28,040
rank so that basically it's running on

339
00:14:28,040 --> 00:14:31,450
cluster and Amazon and as we can see

340
00:14:31,450 --> 00:14:33,709
components are healthy and what I

341
00:14:33,709 --> 00:14:36,170
actually did already cursor takes some

342
00:14:36,170 --> 00:14:39,709
time I installed the near forge a core

343
00:14:39,709 --> 00:14:42,740
service if we go to this universe app

344
00:14:42,740 --> 00:14:47,089
store we actually we have multiple

345
00:14:47,089 --> 00:14:51,050
packages available so neo4j

346
00:14:51,050 --> 00:14:54,830
unreadable is that with a beamer kind

347
00:14:54,830 --> 00:14:56,660
okay okay

348
00:14:56,660 --> 00:14:59,720
so actually in this app store we have

349
00:14:59,720 --> 00:15:02,209
three different packages available so

350
00:15:02,209 --> 00:15:05,150
the first one it's the core package and

351
00:15:05,150 --> 00:15:07,190
what that will do and what I already

352
00:15:07,190 --> 00:15:09,740
done it's basically gonna go and install

353
00:15:09,740 --> 00:15:10,490
neo4j

354
00:15:10,490 --> 00:15:13,670
inside my cluster so inside my cluster

355
00:15:13,670 --> 00:15:16,970
means at typical DC US cluster it has

356
00:15:16,970 --> 00:15:19,100
internal nuts which are not exposed to

357
00:15:19,100 --> 00:15:21,680
the outside for security reasons and

358
00:15:21,680 --> 00:15:25,610
then there are external nodes so as the

359
00:15:25,610 --> 00:15:27,650
typical pattern which we also going to

360
00:15:27,650 --> 00:15:29,990
do here basically all those publicly

361
00:15:29,990 --> 00:15:31,550
available nodes we're going to install a

362
00:15:31,550 --> 00:15:34,940
proxy a load balancer and that I'm

363
00:15:34,940 --> 00:15:37,160
basically going to proxy into my cluster

364
00:15:37,160 --> 00:15:39,170
to my particular application

365
00:15:39,170 --> 00:15:42,050
and let something which I can write now

366
00:15:42,050 --> 00:15:44,360
so I'll go here and install my ear forge

367
00:15:44,360 --> 00:15:49,310
a proxy cool it's been stalled if we go

368
00:15:49,310 --> 00:15:52,310
back to dashboard we actually sees here

369
00:15:52,310 --> 00:15:55,190
my CPU allocation is slightly increasing

370
00:15:55,190 --> 00:15:58,250
also slightly my memory allocation it

371
00:15:58,250 --> 00:16:00,290
doesn't take too much memory and I

372
00:16:00,290 --> 00:16:04,240
actually now also have for test rank so

373
00:16:04,240 --> 00:16:08,089
it's going up if I go in here I actually

374
00:16:08,089 --> 00:16:11,240
see I have now my core and my proxy

375
00:16:11,240 --> 00:16:13,760
running and let's hope that it's really

376
00:16:13,760 --> 00:16:15,110
running and available so this is a

377
00:16:15,110 --> 00:16:19,940
public node and yes here go let me just

378
00:16:19,940 --> 00:16:24,139
double check that I'm not using bolt yes

379
00:16:24,139 --> 00:16:27,620
Vickers we are dealing with Amazon and

380
00:16:27,620 --> 00:16:30,620
like internal eyepiece unfortunately

381
00:16:30,620 --> 00:16:34,519
cannot use bolt from the public from the

382
00:16:34,519 --> 00:16:40,089
proxy but that's all figured nicely and

383
00:16:40,089 --> 00:16:49,250
let's have a look at our cluster so what

384
00:16:49,250 --> 00:16:51,680
I can see here I now have three nuts

385
00:16:51,680 --> 00:16:53,329
available in my cluster so I have this

386
00:16:53,329 --> 00:16:56,000
one leave here and I have the followers

387
00:16:56,000 --> 00:16:58,370
and what we actually can also do in a

388
00:16:58,370 --> 00:17:00,140
second we can try to kill nurse them and

389
00:17:00,140 --> 00:17:03,170
just see that it stays up but what I

390
00:17:03,170 --> 00:17:05,419
want to do first I want to go back to

391
00:17:05,419 --> 00:17:07,819
the universe and install like the third

392
00:17:07,819 --> 00:17:12,380
package we solved for which is the read

393
00:17:12,380 --> 00:17:14,980
replica

394
00:17:16,880 --> 00:17:20,199
so we're installing those read replicas

395
00:17:20,199 --> 00:17:23,809
let's look again on that word yes this

396
00:17:23,809 --> 00:17:26,599
takes more CPU and memory so it's

397
00:17:26,599 --> 00:17:29,059
starting up and currently it's still

398
00:17:29,059 --> 00:17:32,360
unhealthy if we take a look here we can

399
00:17:32,360 --> 00:17:34,490
actually follow what's happening so

400
00:17:34,490 --> 00:17:36,350
they're actually running but they have

401
00:17:36,350 --> 00:17:38,330
health checks defined and those health

402
00:17:38,330 --> 00:17:40,280
checks they're like an important measure

403
00:17:40,280 --> 00:17:43,220
curse they actually they tell multiple

404
00:17:43,220 --> 00:17:46,610
components within system which parts can

405
00:17:46,610 --> 00:17:49,220
be used and which not so for example if

406
00:17:49,220 --> 00:17:52,730
one of them is unhealthy for a number of

407
00:17:52,730 --> 00:17:55,340
time this is a signal to the system

408
00:17:55,340 --> 00:17:57,799
maybe I should restart it because it

409
00:17:57,799 --> 00:18:00,380
didn't really work as expected so in

410
00:18:00,380 --> 00:18:02,750
that case the system would go and

411
00:18:02,750 --> 00:18:05,270
actually restart this one instance which

412
00:18:05,270 --> 00:18:08,510
is not healthy in this case also load

413
00:18:08,510 --> 00:18:10,280
balancers so for example if I have a

414
00:18:10,280 --> 00:18:13,130
load balancer up front it would and it's

415
00:18:13,130 --> 00:18:16,090
my smart balancer it would only use

416
00:18:16,090 --> 00:18:19,280
those instances of spec end which are

417
00:18:19,280 --> 00:18:21,950
currently healthy and a hands only go to

418
00:18:21,950 --> 00:18:27,440
the healthy ones so if we go here and we

419
00:18:27,440 --> 00:18:30,740
reload we actually now see here we have

420
00:18:30,740 --> 00:18:35,240
to rewrap liquors cool actually but now

421
00:18:35,240 --> 00:18:37,520
we need even more so now can actually

422
00:18:37,520 --> 00:18:40,490
just go here and let's scale them up so

423
00:18:40,490 --> 00:18:43,220
I can actually do all of this what I'm

424
00:18:43,220 --> 00:18:45,890
doing here the UI I can also do all of

425
00:18:45,890 --> 00:18:49,580
this wire API endpoints my REST API I

426
00:18:49,580 --> 00:18:52,000
can do all of this other from a CLI and

427
00:18:52,000 --> 00:18:54,610
now we're just just deploying like our

428
00:18:54,610 --> 00:18:57,820
sugreev replicas currently it's stating

429
00:18:57,820 --> 00:19:02,230
hope I have enough resource left

430
00:19:10,940 --> 00:19:14,429
yeah and now it's running and hopefully

431
00:19:14,429 --> 00:19:16,020
it's also gonna be healthy in just

432
00:19:16,020 --> 00:19:18,299
second this is what it's still waiting

433
00:19:18,299 --> 00:19:21,690
for and once that's done we also are

434
00:19:21,690 --> 00:19:28,370
going to see it in the near for JTAG ha

435
00:19:28,460 --> 00:19:31,260
let's load here yep

436
00:19:31,260 --> 00:19:35,910
there is our shirt read replica now

437
00:19:35,910 --> 00:19:38,340
let's actually go here and kill one of

438
00:19:38,340 --> 00:19:38,850
them

439
00:19:38,850 --> 00:19:42,299
so kills I could either be some error

440
00:19:42,299 --> 00:19:45,360
happened my application was killed

441
00:19:45,360 --> 00:19:47,309
because I was using too much memory it

442
00:19:47,309 --> 00:19:49,530
was there were just a program error

443
00:19:49,530 --> 00:19:53,880
inside and just crashing and so my one

444
00:19:53,880 --> 00:19:59,010
instance is gone kill at we actually

445
00:19:59,010 --> 00:20:02,070
didn't really that was so fast cousin so

446
00:20:02,070 --> 00:20:04,200
we didn't really see too much but what

447
00:20:04,200 --> 00:20:06,030
we can actually see here updated a

448
00:20:06,030 --> 00:20:08,309
second go so as soon as one of those

449
00:20:08,309 --> 00:20:10,890
instances Dyess the system is going to

450
00:20:10,890 --> 00:20:12,870
recognize and the system basically tries

451
00:20:12,870 --> 00:20:16,440
to keep this invariant there are always

452
00:20:16,440 --> 00:20:18,720
three instances running and so it's

453
00:20:18,720 --> 00:20:20,760
going to go there and actually restart

454
00:20:20,760 --> 00:20:26,880
one of them right yeah and there it's

455
00:20:26,880 --> 00:20:32,789
resorting cool but this kind of isn't

456
00:20:32,789 --> 00:20:35,520
too cool yet so what we actually we want

457
00:20:35,520 --> 00:20:38,669
to do is we want to run some stuff on it

458
00:20:38,669 --> 00:20:43,020
and I hope this is yea healthy good and

459
00:20:43,020 --> 00:20:45,090
so what what I prepared here I've

460
00:20:45,090 --> 00:20:48,870
mentioned before we have also CLI

461
00:20:48,870 --> 00:20:51,870
support and I just got show you assured

462
00:20:51,870 --> 00:20:54,870
a definitions its app definition it's

463
00:20:54,870 --> 00:20:57,030
basically how the system can be told to

464
00:20:57,030 --> 00:20:59,280
start something and so this is actually

465
00:20:59,280 --> 00:21:02,580
using Z near for DES Twitter loads so

466
00:21:02,580 --> 00:21:04,950
it's a load generator like artificially

467
00:21:04,950 --> 00:21:07,890
generating Twitter data and so I gonna

468
00:21:07,890 --> 00:21:09,690
pose that to the cluster in just a

469
00:21:09,690 --> 00:21:12,960
second just one nice bit I want as you

470
00:21:12,960 --> 00:21:15,419
point out it's actually how we can dress

471
00:21:15,419 --> 00:21:17,460
those servers within the cluster right

472
00:21:17,460 --> 00:21:19,799
if I'm writing such kind of a definition

473
00:21:19,799 --> 00:21:21,929
I don't know where it's running in the

474
00:21:21,929 --> 00:21:23,429
cluster and I don't want to hurt code

475
00:21:23,429 --> 00:21:24,210
that in my

476
00:21:24,210 --> 00:21:27,330
definition so what I actually do I can

477
00:21:27,330 --> 00:21:31,920
use a service discovery names so in this

478
00:21:31,920 --> 00:21:34,110
case it's actually it's a virtual IP

479
00:21:34,110 --> 00:21:37,230
named virtual IP and no matter where

480
00:21:37,230 --> 00:21:39,030
that's running in the cluster

481
00:21:39,030 --> 00:21:41,280
I can always reach it under this address

482
00:21:41,280 --> 00:21:44,280
so in case this is actually also a load

483
00:21:44,280 --> 00:21:46,260
balancer so if I have multiple backends

484
00:21:46,260 --> 00:21:49,380
this address is going to load tons to

485
00:21:49,380 --> 00:21:51,360
anywhere in my cluster and this is like

486
00:21:51,360 --> 00:21:53,430
what useful because I can just hard code

487
00:21:53,430 --> 00:21:56,340
that from within my application and I

488
00:21:56,340 --> 00:21:58,470
don't have to particularly care where

489
00:21:58,470 --> 00:22:00,000
the other application is ranked in the

490
00:22:00,000 --> 00:22:13,560
cluster so and I actually I could have

491
00:22:13,560 --> 00:22:15,960
done the same nail from from the UI I

492
00:22:15,960 --> 00:22:17,760
could have just copied it here I could

493
00:22:17,760 --> 00:22:20,520
have done the same posting it to an

494
00:22:20,520 --> 00:22:23,550
endpoint and now actually see it's all

495
00:22:23,550 --> 00:22:26,250
staging this usually means it's willings

496
00:22:26,250 --> 00:22:28,530
the docker container and for that use

497
00:22:28,530 --> 00:22:30,420
cases you would have liked all your

498
00:22:30,420 --> 00:22:32,610
docker images in a private registry

499
00:22:32,610 --> 00:22:34,950
within your cluster for demo purposes

500
00:22:34,950 --> 00:22:37,140
I'm using the normal docker hub so I

501
00:22:37,140 --> 00:22:38,790
actually the doctor Paul say took a

502
00:22:38,790 --> 00:22:45,240
while but seems to be deploying seems

503
00:22:45,240 --> 00:22:51,890
hopefully to be deploying staging

504
00:22:55,500 --> 00:23:04,700
ah demo gods are not nice to me yeah

505
00:23:06,260 --> 00:23:08,549
let's see what what's happening it's

506
00:23:08,549 --> 00:23:11,130
like new weather daters actually pushed

507
00:23:11,130 --> 00:23:20,330
in now I'm not seeing my notes yet hmm

508
00:23:20,330 --> 00:23:23,159
yeah yeah but it's it's failing

509
00:23:23,159 --> 00:23:26,280
containers so let's do live debugging

510
00:23:26,280 --> 00:23:30,720
and figure out what's wrong so I can now

511
00:23:30,720 --> 00:23:32,700
actually just go here and check see

512
00:23:32,700 --> 00:23:36,990
standard error no right operations are

513
00:23:36,990 --> 00:23:41,370
allowed their player on this database so

514
00:23:41,370 --> 00:24:05,340
he's not finding the leave for one see I

515
00:24:05,340 --> 00:24:08,629
see I see one leader

516
00:24:17,720 --> 00:24:21,370
okay so

517
00:24:21,639 --> 00:24:25,149
I I gonna do boxes after this talk but

518
00:24:25,149 --> 00:24:28,139
basically what we would see is basically

519
00:24:28,139 --> 00:24:30,879
this so it's a petition say a really

520
00:24:30,879 --> 00:24:32,200
really easy way to deploy applications

521
00:24:32,200 --> 00:24:35,079
talking to me for J if the word finds a

522
00:24:35,079 --> 00:24:37,929
leading matter right now which I'll just

523
00:24:37,929 --> 00:24:40,299
figure out after the sock what's long

524
00:24:40,299 --> 00:24:41,919
there why it's not deployed but this is

525
00:24:41,919 --> 00:24:44,139
why we actually see this keeps on

526
00:24:44,139 --> 00:24:46,269
restarting and failing curse it can't

527
00:24:46,269 --> 00:24:48,789
talk to the Mouser nice idea for we

528
00:24:48,789 --> 00:24:50,829
could see that it actually it's kind of

529
00:24:50,829 --> 00:24:52,749
easy to figure out Chris we have an easy

530
00:24:52,749 --> 00:24:55,029
way to get to the loss I don't have to

531
00:24:55,029 --> 00:24:57,579
figure out now here and we can actually

532
00:24:57,579 --> 00:25:01,239
see it's running different servers so I

533
00:25:01,239 --> 00:25:04,029
can actually don't have to worry about

534
00:25:04,029 --> 00:25:06,190
like on which servers instances running

535
00:25:06,190 --> 00:25:08,619
now I can simply give there and figure

536
00:25:08,619 --> 00:25:10,749
out what's wrong here why isn't that

537
00:25:10,749 --> 00:25:15,789
running okay that actually bring me back

538
00:25:15,789 --> 00:25:22,509
to almost my last flight and yes this

539
00:25:22,509 --> 00:25:24,459
would if wins a damn we would look like

540
00:25:24,459 --> 00:25:25,989
our today date here and actually see

541
00:25:25,989 --> 00:25:27,909
that it's running the cluster would be

542
00:25:27,909 --> 00:25:30,279
then can actually do we can create

543
00:25:30,279 --> 00:25:32,999
different read replicas for that and

544
00:25:32,999 --> 00:25:35,649
basically scale up and she'll download

545
00:25:35,649 --> 00:25:39,039
posture is as we did before yeah

546
00:25:39,039 --> 00:25:40,869
this actually brings me to my last slide

547
00:25:40,869 --> 00:25:43,059
whoever wants to try that out to codes

548
00:25:43,059 --> 00:25:45,309
available online feel free to play with

549
00:25:45,309 --> 00:25:47,589
that and the package is also available

550
00:25:47,589 --> 00:25:49,809
whenever you install this us anywhere so

551
00:25:49,809 --> 00:25:52,359
feel free to play with that and actually

552
00:25:52,359 --> 00:25:53,950
as its open-source he'll free to

553
00:25:53,950 --> 00:25:57,309
contribute and give this feedback but we

554
00:25:57,309 --> 00:26:00,029
can improve there

555
00:26:01,050 --> 00:26:08,540
[Applause]

556
00:26:18,950 --> 00:26:27,779
you mean one so we actually we have bows

557
00:26:27,779 --> 00:26:30,779
running so really cleared up this

558
00:26:30,779 --> 00:26:33,330
because just set up a portable duster

559
00:26:33,330 --> 00:26:35,730
over here our discovery of a customs

560
00:26:35,730 --> 00:26:37,950
laughter and SWAT rubbing and so on it's

561
00:26:37,950 --> 00:26:40,440
only inclusive classroom and going for

562
00:26:40,440 --> 00:26:46,429
each other for way oh okay okay

563
00:26:50,200 --> 00:27:08,830
oh it's basically you can move as you

564
00:27:08,830 --> 00:27:11,710
like why not

565
00:27:11,710 --> 00:27:13,870
corsets could have to roll at school

566
00:27:13,870 --> 00:27:16,990
service can be leader or follow decor

567
00:27:16,990 --> 00:27:21,790
the general area should be one one of

568
00:27:21,790 --> 00:27:23,110
them said you don't leave decor and the

569
00:27:23,110 --> 00:27:26,830
other oneself alone okay it's automatic

570
00:27:26,830 --> 00:27:29,890
selling you know they feel / - so leader

571
00:27:29,890 --> 00:27:34,980
will coordinate the giraffe here

572
00:27:40,110 --> 00:27:43,310
[Music]

573
00:27:48,730 --> 00:27:53,570
so you mean in particular of neo4j or in

574
00:27:53,570 --> 00:27:57,590
general of likes the overall system okay

575
00:27:57,590 --> 00:27:59,720
new for Jamie actually for two years

576
00:27:59,720 --> 00:28:00,380
that's okay

577
00:28:00,380 --> 00:28:04,820
and for DCIS we actually have metric

578
00:28:04,820 --> 00:28:07,160
endpoints so basically and this is also

579
00:28:07,160 --> 00:28:10,160
where something like the application

580
00:28:10,160 --> 00:28:13,070
would integrate said basically if you

581
00:28:13,070 --> 00:28:16,250
output your metrics on like these stats

582
00:28:16,250 --> 00:28:17,900
and point system is going to pick it up

583
00:28:17,900 --> 00:28:20,690
but basically aggregate that and you can

584
00:28:20,690 --> 00:28:23,120
actually see this is belonging to near

585
00:28:23,120 --> 00:28:26,120
for Jace's belonging to that particular

586
00:28:26,120 --> 00:28:30,200
cluster and so basically see all those

587
00:28:30,200 --> 00:28:33,710
perform statistics are together on like

588
00:28:33,710 --> 00:28:36,860
po system level so for example we saw

589
00:28:36,860 --> 00:28:38,690
there's like the allocation so I'm

590
00:28:38,690 --> 00:28:41,570
saying I want to give my new 4j reach

591
00:28:41,570 --> 00:28:43,670
replica should have most have like 2

592
00:28:43,670 --> 00:28:46,550
gigawatts of RAM and so one thing which

593
00:28:46,550 --> 00:28:48,440
you should always monitors like how much

594
00:28:48,440 --> 00:28:50,690
is it actually using it always using

595
00:28:50,690 --> 00:28:52,670
like wonderful nine-nine and you're

596
00:28:52,670 --> 00:28:54,710
really close to be killed or are you

597
00:28:54,710 --> 00:28:58,310
actually using much less your waste in

598
00:28:58,310 --> 00:29:15,080
your cluster you just have to put the

599
00:29:15,080 --> 00:29:17,889
connector right

600
00:29:21,180 --> 00:29:26,820
oh I don't not sure who was first but

601
00:29:26,820 --> 00:29:43,170
yeah so you mean if one of the core

602
00:29:43,170 --> 00:29:46,410
services type so one of those couriers

603
00:29:46,410 --> 00:29:48,840
is dying one of the others would take

604
00:29:48,840 --> 00:29:51,630
over and the system first keeps on

605
00:29:51,630 --> 00:29:53,370
running but you mean how is the data

606
00:29:53,370 --> 00:29:56,040
recovered all right so basically this

607
00:29:56,040 --> 00:29:58,010
one is gone what's going to happen so

608
00:29:58,010 --> 00:30:01,860
what's gonna happen the kind of depends

609
00:30:01,860 --> 00:30:03,780
on how you have different confirmation

610
00:30:03,780 --> 00:30:06,120
knobs by default what's going to happen

611
00:30:06,120 --> 00:30:08,070
is he will try to put it back on that

612
00:30:08,070 --> 00:30:10,680
server and then you can also specify

613
00:30:10,680 --> 00:30:14,090
like after well you should stop at and

614
00:30:14,090 --> 00:30:16,470
go somewhere else so basically you can

615
00:30:16,470 --> 00:30:19,320
define this behavior this failover

616
00:30:19,320 --> 00:30:22,440
behavior what should happen but in as

617
00:30:22,440 --> 00:30:25,400
we're talking about distributed systems

618
00:30:25,400 --> 00:30:28,140
often what's happening actually that you

619
00:30:28,140 --> 00:30:29,850
have like a short network partitioning

620
00:30:29,850 --> 00:30:31,950
between some servers right because

621
00:30:31,950 --> 00:30:35,550
network is so reliable and so usually

622
00:30:35,550 --> 00:30:37,680
you want to wait for ease of that server

623
00:30:37,680 --> 00:30:40,560
to rejoin completely or if it's just

624
00:30:40,560 --> 00:30:42,960
like at a feeler if just see a core

625
00:30:42,960 --> 00:30:44,970
server task has failed you want to wait

626
00:30:44,970 --> 00:30:47,670
until it's restarted which also see what

627
00:30:47,670 --> 00:30:49,560
would happen and in that case as being

628
00:30:49,560 --> 00:30:51,690
restarted on the same note that by

629
00:30:51,690 --> 00:30:53,370
default he's going to pick up his date

630
00:30:53,370 --> 00:30:55,210
again

631
00:30:55,210 --> 00:30:58,309
[Music]

632
00:31:00,580 --> 00:31:03,710
[Music]

633
00:31:16,880 --> 00:31:20,850
the so concerns a message you're using

634
00:31:20,850 --> 00:31:24,270
right so what we saw was a virtual

635
00:31:24,270 --> 00:31:28,940
eyepiece you can you can't confuse that

636
00:31:28,940 --> 00:31:31,770
if you know like certain end points it's

637
00:31:31,770 --> 00:31:34,140
quite hidden but you can select you mess

638
00:31:34,140 --> 00:31:36,659
it and for the other load balancing for

639
00:31:36,659 --> 00:31:38,760
which we call like external load

640
00:31:38,760 --> 00:31:40,409
balancing which basically is an H a

641
00:31:40,409 --> 00:31:44,250
proxy you can also configure H a proxy a

642
00:31:44,250 --> 00:31:47,179
load balancing method

643
00:31:52,670 --> 00:31:55,819
[Music]

644
00:32:01,850 --> 00:32:10,470
you mean with to read replicas so you

645
00:32:10,470 --> 00:32:13,470
can have but they're not you can't write

646
00:32:13,470 --> 00:32:16,500
to this so you can write to notes in the

647
00:32:16,500 --> 00:32:17,880
core but all you know if you have a

648
00:32:17,880 --> 00:32:20,159
right quorum otherwise you have buffer

649
00:32:20,159 --> 00:32:42,270
the input in any throw ways but doesn't

650
00:32:42,270 --> 00:32:44,780
have to be also

651
00:32:45,240 --> 00:32:47,920
what you replica absolutely have an

652
00:32:47,920 --> 00:32:49,420
identity or something like that and just

653
00:32:49,420 --> 00:32:51,760
a machine to class that it provides

654
00:32:51,760 --> 00:32:54,160
there are so you can't really say it

655
00:32:54,160 --> 00:32:57,340
won't just instead to be up it will just

656
00:32:57,340 --> 00:33:01,150
be start instance and what I would

657
00:33:01,150 --> 00:33:03,310
imagine what you could do is on a load

658
00:33:03,310 --> 00:33:05,860
balancer level if the server is now

659
00:33:05,860 --> 00:33:08,260
France partition split mode there's no

660
00:33:08,260 --> 00:33:10,660
bright majority that you Club for

661
00:33:10,660 --> 00:33:16,330
instance until the core has healed

662
00:33:16,330 --> 00:33:19,000
people and it will continue to write

663
00:33:19,000 --> 00:33:23,230
back that's a good point

664
00:33:23,230 --> 00:33:27,220
and so the Megan's to provide some black

665
00:33:27,220 --> 00:33:28,660
computation on how to send some

666
00:33:28,660 --> 00:33:30,760
something like that are so that you can

667
00:33:30,760 --> 00:33:32,470
have application sense meant to the

668
00:33:32,470 --> 00:33:34,870
cluster and then it can keep coming

669
00:33:34,870 --> 00:33:38,430
events after deportation has healed yeah

670
00:33:38,430 --> 00:33:42,160
that just in general that problem of any

671
00:33:42,160 --> 00:33:46,840
distributed system right yeah so cool

672
00:33:46,840 --> 00:33:49,220
thank you very much

673
00:33:49,220 --> 00:33:54,249
[Applause]

