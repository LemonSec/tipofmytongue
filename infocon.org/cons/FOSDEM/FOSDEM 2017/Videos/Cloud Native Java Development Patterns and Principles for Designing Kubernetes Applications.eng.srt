1
00:00:00,060 --> 00:00:03,380
in this talk I want to look at

2
00:00:04,680 --> 00:00:06,840
kubernetes from a developer point of

3
00:00:06,840 --> 00:00:08,940
view more from a Java developer point of

4
00:00:08,940 --> 00:00:11,219
view so I were correct hat as an

5
00:00:11,219 --> 00:00:13,650
architect I contribute to future

6
00:00:13,650 --> 00:00:16,950
projects and I have two camera related

7
00:00:16,950 --> 00:00:21,150
books so more and more businesses are

8
00:00:21,150 --> 00:00:24,029
moving to micro services and that has

9
00:00:24,029 --> 00:00:26,160
been further enforced by making

10
00:00:26,160 --> 00:00:28,140
containers accessible to developers to

11
00:00:28,140 --> 00:00:31,529
docker which in turn can enable DevOps

12
00:00:31,529 --> 00:00:35,790
practices and I am saying that all these

13
00:00:35,790 --> 00:00:38,309
horses to change the way we design

14
00:00:38,309 --> 00:00:41,220
implement and manage java applications

15
00:00:41,220 --> 00:00:43,140
and if you don't change the way you

16
00:00:43,140 --> 00:00:45,899
design the applications you won't be you

17
00:00:45,899 --> 00:00:50,430
won't succeed in micro services so what

18
00:00:50,430 --> 00:00:51,719
is the cloud native there are many

19
00:00:51,719 --> 00:00:53,879
definitions out there and I just added

20
00:00:53,879 --> 00:00:56,550
mine cloud native for me these are

21
00:00:56,550 --> 00:00:58,260
applications which are implemented

22
00:00:58,260 --> 00:01:01,320
following micro services principles they

23
00:01:01,320 --> 00:01:03,930
typically run on containers which are

24
00:01:03,930 --> 00:01:06,479
managed by platforms on some kind of

25
00:01:06,479 --> 00:01:08,970
cloud infrastructure by cloud I don't be

26
00:01:08,970 --> 00:01:10,830
necessarily Amazon but more

27
00:01:10,830 --> 00:01:12,929
infrastructure that can scale up and

28
00:01:12,929 --> 00:01:14,700
down that can come and go and if you

29
00:01:14,700 --> 00:01:17,100
don't design up your application to

30
00:01:17,100 --> 00:01:19,259
succeed on to survive in this kind of

31
00:01:19,259 --> 00:01:21,720
environment it you won't succeed with

32
00:01:21,720 --> 00:01:26,899
micro services that also means that any

33
00:01:26,899 --> 00:01:30,090
container Orchestrator is basically a

34
00:01:30,090 --> 00:01:32,039
cloud native platform and there are many

35
00:01:32,039 --> 00:01:34,619
of those as you can see on this diagram

36
00:01:34,619 --> 00:01:36,750
in this top will look at kubernetes more

37
00:01:36,750 --> 00:01:39,179
in depth but all of these container

38
00:01:39,179 --> 00:01:43,050
orchestrated engines are maturing at the

39
00:01:43,050 --> 00:01:45,770
moment and they promised provide similar

40
00:01:45,770 --> 00:01:48,660
capabilities and more or less they have

41
00:01:48,660 --> 00:01:53,099
a future parity at the moment and and I

42
00:01:53,099 --> 00:01:55,830
think your application will need to have

43
00:01:55,830 --> 00:01:58,080
this kind of cloud native design

44
00:01:58,080 --> 00:02:00,539
patterns if you wanna if you want to run

45
00:02:00,539 --> 00:02:02,160
your application in one of these

46
00:02:02,160 --> 00:02:04,890
environments the bottom two are slightly

47
00:02:04,890 --> 00:02:07,470
different they are actually the the one

48
00:02:07,470 --> 00:02:09,360
who coined the term cloud native from

49
00:02:09,360 --> 00:02:11,550
spring cloud and ethnic sources but they

50
00:02:11,550 --> 00:02:14,250
were started way before containers were

51
00:02:14,250 --> 00:02:15,950
popular so there are more based on

52
00:02:15,950 --> 00:02:18,150
Amazon images and

53
00:02:18,150 --> 00:02:20,640
a cloud native platform as a part of

54
00:02:20,640 --> 00:02:22,170
your java application rather than a

55
00:02:22,170 --> 00:02:24,319
separate thing

56
00:02:24,319 --> 00:02:28,739
now let's say we you decided to use

57
00:02:28,739 --> 00:02:31,439
kubernetes as a developer there are

58
00:02:31,439 --> 00:02:32,760
actually a number of ways to run

59
00:02:32,760 --> 00:02:35,099
kubernetes just by using your mouse

60
00:02:35,099 --> 00:02:37,829
without have to run any scripts so

61
00:02:37,829 --> 00:02:40,620
Google Cloud and Microsoft has a

62
00:02:40,620 --> 00:02:42,569
kubernetes cluster as a service

63
00:02:42,569 --> 00:02:44,730
Red Hat OpenShift online you can use it

64
00:02:44,730 --> 00:02:47,879
you can create an account and you use a

65
00:02:47,879 --> 00:02:49,409
multi tenant and environment so

66
00:02:49,409 --> 00:02:50,819
basically you share your cluster with

67
00:02:50,819 --> 00:02:53,040
other users but probably for developers

68
00:02:53,040 --> 00:02:55,560
the more interesting options are mini

69
00:02:55,560 --> 00:02:57,540
cube which is a lightweight PM where you

70
00:02:57,540 --> 00:02:59,670
can run it locally and have a kubernetes

71
00:02:59,670 --> 00:03:02,730
running or the fabric 8 maven plugin

72
00:03:02,730 --> 00:03:04,650
which relies on mini code but allows you

73
00:03:04,650 --> 00:03:05,930
to manage your kubernetes cluster

74
00:03:05,930 --> 00:03:08,760
straight from maven so as a developer

75
00:03:08,760 --> 00:03:10,769
you can start and stop

76
00:03:10,769 --> 00:03:12,720
frenetic cluster from maven you can

77
00:03:12,720 --> 00:03:15,090
deploy your application update et cetera

78
00:03:15,090 --> 00:03:16,079
et cetera

79
00:03:16,079 --> 00:03:18,209
if you worst about fabricate it's a

80
00:03:18,209 --> 00:03:21,389
project that enables developer to write

81
00:03:21,389 --> 00:03:23,430
micro services on kubernetes so if you

82
00:03:23,430 --> 00:03:25,019
are a Java developer and looking at

83
00:03:25,019 --> 00:03:27,540
kubernetes it's a little a good place to

84
00:03:27,540 --> 00:03:30,900
have a look and to start from now you

85
00:03:30,900 --> 00:03:32,819
have to learn few kubernetes primitives

86
00:03:32,819 --> 00:03:34,919
and concepts so inevitable there is some

87
00:03:34,919 --> 00:03:36,150
learning curve so you have to know

88
00:03:36,150 --> 00:03:38,810
containers post labels name spaces etc

89
00:03:38,810 --> 00:03:42,239
but once you started with kubernetes

90
00:03:42,239 --> 00:03:44,970
being the next step is you have to write

91
00:03:44,970 --> 00:03:47,579
your job application and package it here

92
00:03:47,579 --> 00:03:50,099
and we can see which one is the most

93
00:03:50,099 --> 00:03:52,079
popular framework at the moment that's

94
00:03:52,079 --> 00:03:54,449
the spring port but following the same

95
00:03:54,449 --> 00:03:56,310
trend other frameworks such as well

96
00:03:56,310 --> 00:03:59,269
while it's warm and carafe are also

97
00:03:59,269 --> 00:04:04,079
turning into this Boober jar format so

98
00:04:04,079 --> 00:04:06,569
it compiled time you kind of create your

99
00:04:06,569 --> 00:04:08,609
application as if you opera jar with all

100
00:04:08,609 --> 00:04:10,470
your dependencies which makes it easy to

101
00:04:10,470 --> 00:04:13,739
put in a docker container and all of

102
00:04:13,739 --> 00:04:15,389
these frameworks basically offer you

103
00:04:15,389 --> 00:04:18,269
things like HTTP server rest JSON health

104
00:04:18,269 --> 00:04:21,449
checks assessor etcetera etcetera once

105
00:04:21,449 --> 00:04:22,800
you have your application written in

106
00:04:22,800 --> 00:04:24,720
Java the next step is to put that in a

107
00:04:24,720 --> 00:04:26,370
docker container and there are a number

108
00:04:26,370 --> 00:04:27,660
of issues when you

109
00:04:27,660 --> 00:04:30,120
put Java in a docker container but you

110
00:04:30,120 --> 00:04:32,610
want to put the jdk or Jerry if you put

111
00:04:32,610 --> 00:04:34,980
the Oracle JDK in a docker container and

112
00:04:34,980 --> 00:04:37,530
push that docker container to docker hub

113
00:04:37,530 --> 00:04:40,020
you might be violating Oracle licenses

114
00:04:40,020 --> 00:04:42,860
so you might have to use Oracle open JDK

115
00:04:42,860 --> 00:04:45,960
other issues around CPU and memory for

116
00:04:45,960 --> 00:04:48,030
example Java at the moment doesn't see

117
00:04:48,030 --> 00:04:49,770
the memory and that's allocated your

118
00:04:49,770 --> 00:04:51,540
container but it is all the memory on

119
00:04:51,540 --> 00:04:52,200
the host

120
00:04:52,200 --> 00:04:55,020
similarly for CPU it sees all the cores

121
00:04:55,020 --> 00:04:57,590
on the host rather than just the course

122
00:04:57,590 --> 00:05:00,360
specified for your docker container I've

123
00:05:00,360 --> 00:05:02,400
put here a few examples and workarounds

124
00:05:02,400 --> 00:05:04,560
how you can get around those and the

125
00:05:04,560 --> 00:05:06,930
open JDK issue numbers which fix these

126
00:05:06,930 --> 00:05:09,330
issues so future versions of Java will

127
00:05:09,330 --> 00:05:10,890
be easier to run in docker but at the

128
00:05:10,890 --> 00:05:12,120
moment you have to do some kind of

129
00:05:12,120 --> 00:05:14,400
workaround and basically there are a lot

130
00:05:14,400 --> 00:05:16,500
of container best practices you have to

131
00:05:16,500 --> 00:05:18,380
learn before going to containers and

132
00:05:18,380 --> 00:05:22,380
kubernetes again there is a maven plugin

133
00:05:22,380 --> 00:05:24,630
from fabric which allows you to build a

134
00:05:24,630 --> 00:05:26,850
docker container from maven so at the

135
00:05:26,850 --> 00:05:29,640
end of your build process you know in

136
00:05:29,640 --> 00:05:31,530
addition to your regular maven build you

137
00:05:31,530 --> 00:05:33,540
get the docker container that's built

138
00:05:33,540 --> 00:05:35,490
from your project the good thing is it's

139
00:05:35,490 --> 00:05:38,430
based from your pong file so your palm

140
00:05:38,430 --> 00:05:40,710
and your docker image are in sync if you

141
00:05:40,710 --> 00:05:43,290
add a new dependency to your palm that

142
00:05:43,290 --> 00:05:47,070
gets into your docker image once we have

143
00:05:47,070 --> 00:05:48,540
our docker image the next step is

144
00:05:48,540 --> 00:05:50,250
talking to kubernetes basically telling

145
00:05:50,250 --> 00:05:52,680
it how to run our docker image and the

146
00:05:52,680 --> 00:05:54,780
way to do that is basically you have to

147
00:05:54,780 --> 00:05:55,350
write

148
00:05:55,350 --> 00:05:57,330
I call it application descriptor but

149
00:05:57,330 --> 00:06:00,510
that's either JSON or e ml and you have

150
00:06:00,510 --> 00:06:03,120
to tell it how many how much resources

151
00:06:03,120 --> 00:06:05,340
to give to your locker container what

152
00:06:05,340 --> 00:06:07,410
dependencies it has what port it needs

153
00:06:07,410 --> 00:06:11,070
etcetera etcetera with maven plug-in

154
00:06:11,070 --> 00:06:13,650
from fabric aid you can generate such a

155
00:06:13,650 --> 00:06:18,090
llamó file again directly from maven at

156
00:06:18,090 --> 00:06:20,730
the bottom I put an example a couple of

157
00:06:20,730 --> 00:06:22,620
maven commands so with the first one we

158
00:06:22,620 --> 00:06:24,330
can start kubernetes with the second one

159
00:06:24,330 --> 00:06:25,950
we can build a docker container and

160
00:06:25,950 --> 00:06:27,870
third one we deploy docker container

161
00:06:27,870 --> 00:06:29,010
into kubernetes

162
00:06:29,010 --> 00:06:31,710
this kind of makes kubernetes almost

163
00:06:31,710 --> 00:06:33,600
like your application server running

164
00:06:33,600 --> 00:06:35,310
locally where you can easily start

165
00:06:35,310 --> 00:06:36,210
deploy or

166
00:06:36,210 --> 00:06:38,340
docker containers update them shut it

167
00:06:38,340 --> 00:06:40,520
down

168
00:06:41,370 --> 00:06:45,310
now for your application to be cloud

169
00:06:45,310 --> 00:06:47,590
native or to run on kubernetes on

170
00:06:47,590 --> 00:06:51,270
similar environments it needs to kind of

171
00:06:51,270 --> 00:06:53,710
provide certain capabilities and the

172
00:06:53,710 --> 00:06:55,720
first one is it has to be observable

173
00:06:55,720 --> 00:06:58,360
what I mean by that is it needs to have

174
00:06:58,360 --> 00:07:01,479
end points where the managing platform

175
00:07:01,479 --> 00:07:04,120
can check its health status we can see

176
00:07:04,120 --> 00:07:06,370
that popular projects are just winged

177
00:07:06,370 --> 00:07:09,310
drop wizard wild fly they all have

178
00:07:09,310 --> 00:07:12,190
libraries which allows you to expose the

179
00:07:12,190 --> 00:07:14,889
health status of your application so

180
00:07:14,889 --> 00:07:16,840
your application needs to tell that it's

181
00:07:16,840 --> 00:07:19,979
healthy that it started etc et-cetera

182
00:07:19,979 --> 00:07:22,870
kubernetes by default will check that

183
00:07:22,870 --> 00:07:25,240
the docker process of your container is

184
00:07:25,240 --> 00:07:28,060
up but does that's usually not enough we

185
00:07:28,060 --> 00:07:30,370
have seen in the Java world many

186
00:07:30,370 --> 00:07:33,340
examples where the JVM throws out of

187
00:07:33,340 --> 00:07:35,440
memory exceptions or the JVM is still up

188
00:07:35,440 --> 00:07:37,120
but it's actually not functioning so to

189
00:07:37,120 --> 00:07:39,310
catch these kind of issues we have

190
00:07:39,310 --> 00:07:41,979
health checks and actually the concept

191
00:07:41,979 --> 00:07:43,930
of health checks is so important that

192
00:07:43,930 --> 00:07:46,240
it's actually it was added to Java EE

193
00:07:46,240 --> 00:07:48,340
proposal you can see at the bottom

194
00:07:48,340 --> 00:07:49,630
health checks and configuration

195
00:07:49,630 --> 00:07:51,699
management so at some point it will

196
00:07:51,699 --> 00:07:53,710
become part of the it will become part

197
00:07:53,710 --> 00:07:56,020
of Java but unfortunately I believe it

198
00:07:56,020 --> 00:07:58,150
was revised again and it has moved to

199
00:07:58,150 --> 00:08:00,759
Java 9 but you don't have to wait for

200
00:08:00,759 --> 00:08:02,349
Java 9 you can use any of the existing

201
00:08:02,349 --> 00:08:04,060
libraries and just add health checks to

202
00:08:04,060 --> 00:08:07,150
your application and the other important

203
00:08:07,150 --> 00:08:09,070
piece is your application needs to

204
00:08:09,070 --> 00:08:10,539
listen to the signals that are coming

205
00:08:10,539 --> 00:08:13,000
from kubernetes and similar platforms

206
00:08:13,000 --> 00:08:15,340
this to your application is to stop when

207
00:08:15,340 --> 00:08:17,349
it gets sick term otherwise it will get

208
00:08:17,349 --> 00:08:19,719
killed in 30 seconds similarly there are

209
00:08:19,719 --> 00:08:22,300
other events like pre stop post-op you

210
00:08:22,300 --> 00:08:24,940
have to listen and maybe you have to do

211
00:08:24,940 --> 00:08:26,560
something I mean in the future there

212
00:08:26,560 --> 00:08:30,310
might be signals for example - for your

213
00:08:30,310 --> 00:08:32,380
application to shrink and consume less

214
00:08:32,380 --> 00:08:34,919
resources or maybe to replicate itself

215
00:08:34,919 --> 00:08:39,190
etc etc and here is another example

216
00:08:39,190 --> 00:08:40,870
about service discovery and load

217
00:08:40,870 --> 00:08:43,570
balancing in the Java world what we used

218
00:08:43,570 --> 00:08:45,520
to do is when we write to produce a

219
00:08:45,520 --> 00:08:48,040
service and we scale that typically we

220
00:08:48,040 --> 00:08:49,490
have in the JVM

221
00:08:49,490 --> 00:08:52,310
kind of agent like a zookeeper agent or

222
00:08:52,310 --> 00:08:54,620
you Eureka agent that registers the

223
00:08:54,620 --> 00:08:56,450
server into some kind of registry and

224
00:08:56,450 --> 00:08:58,940
the service consumer also has a similar

225
00:08:58,940 --> 00:09:01,910
agent and looks up in the registry and

226
00:09:01,910 --> 00:09:04,100
this is how you find the service in the

227
00:09:04,100 --> 00:09:06,320
kubernetes world actually all that is

228
00:09:06,320 --> 00:09:09,620
handled by the platform well with

229
00:09:09,620 --> 00:09:11,149
kubernetes you don't need any more

230
00:09:11,149 --> 00:09:13,760
agents or actually you are also not tied

231
00:09:13,760 --> 00:09:16,070
to Java your services are directly

232
00:09:16,070 --> 00:09:20,360
registered by the platform and then also

233
00:09:20,360 --> 00:09:22,550
updated in the proxy so on the consumer

234
00:09:22,550 --> 00:09:24,410
side when you call the service you just

235
00:09:24,410 --> 00:09:26,920
call the proxy and the proxy finds a

236
00:09:26,920 --> 00:09:28,940
instance of the service and it does

237
00:09:28,940 --> 00:09:32,540
load-balancing etc etc so we can see

238
00:09:32,540 --> 00:09:35,089
this is just an example how some kind of

239
00:09:35,089 --> 00:09:37,490
non functional or cost functional

240
00:09:37,490 --> 00:09:39,290
requirements are moving away from the

241
00:09:39,290 --> 00:09:41,450
JVM to the platform so you don't have to

242
00:09:41,450 --> 00:09:43,790
care about all that in your java

243
00:09:43,790 --> 00:09:47,060
application once you have health checks

244
00:09:47,060 --> 00:09:49,730
and listen to events and service

245
00:09:49,730 --> 00:09:51,529
discovery basically this allows you to

246
00:09:51,529 --> 00:09:53,899
further adue - looks like rolling up or

247
00:09:53,899 --> 00:09:57,040
rolling deployments

