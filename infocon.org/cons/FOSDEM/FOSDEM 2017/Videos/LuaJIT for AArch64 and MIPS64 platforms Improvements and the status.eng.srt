1
00:00:38,430 --> 00:00:41,539
[Music]

2
00:01:09,920 --> 00:01:14,840
many of you are familiar with legit

3
00:01:19,880 --> 00:01:22,420
more

4
00:01:48,630 --> 00:01:54,220
so we started with the new 60/40 2/3

5
00:01:54,220 --> 00:02:00,130
that's the first thing that we continued

6
00:02:00,130 --> 00:02:05,039
with our 64 because I'm poor

7
00:02:15,530 --> 00:02:30,390
these changes are from two days ago we

8
00:02:30,390 --> 00:02:36,529
finished work on makes apologies

9
00:02:36,680 --> 00:02:40,190
actually changes

10
00:03:05,829 --> 00:03:09,069
which is

11
00:04:11,130 --> 00:04:17,130
so in a little bit about the differences

12
00:04:17,130 --> 00:04:20,130
cc-64

13
00:04:20,668 --> 00:04:26,340
before the c64 was introduced all the

14
00:04:26,340 --> 00:04:29,140
objects which were 64 bits long were

15
00:04:29,140 --> 00:04:32,740
represented with two bits for type

16
00:04:32,740 --> 00:04:38,660
engine repeats pointers by that you know

17
00:04:38,660 --> 00:04:41,660
language

18
00:05:22,230 --> 00:05:25,329
[Music]

19
00:05:26,470 --> 00:05:29,830
type of course there was example or life

20
00:05:29,830 --> 00:05:35,920
is a date balances or people are

21
00:05:35,920 --> 00:05:44,020
expendable and worse there's always a

22
00:05:44,020 --> 00:05:49,680
case where is a number 10

23
00:05:51,530 --> 00:05:55,250
once the new 64 mode introduced is that

24
00:05:55,250 --> 00:05:59,340
now all the pointers can tell for some

25
00:05:59,340 --> 00:06:05,360
bit long and all the other sampling

26
00:06:05,360 --> 00:06:08,699
people out of the other 17 bits there

27
00:06:08,699 --> 00:06:11,580
are four introduced for tagging for

28
00:06:11,580 --> 00:06:13,409
setting the type of the pointer which

29
00:06:13,409 --> 00:06:16,979
disappear now because what it uses up to

30
00:06:16,979 --> 00:06:20,669
16 different types of values and the

31
00:06:20,669 --> 00:06:24,000
other trick in means by 15 bits are all

32
00:06:24,000 --> 00:06:26,990
such one and

33
00:06:41,379 --> 00:06:44,020
with that

34
00:06:44,020 --> 00:06:51,569
and now we'll see what main changes were

35
00:06:51,569 --> 00:06:55,509
before mode so basically most part

36
00:06:55,509 --> 00:06:59,800
opposed you have the operations restart

37
00:06:59,800 --> 00:07:05,199
operations and the values you open it to

38
00:07:05,199 --> 00:07:36,930
either extract a pointer to pointer in

39
00:07:40,289 --> 00:07:47,050
value for entertaining this process

40
00:07:47,050 --> 00:07:52,030
we arrest we put in registered certain

41
00:07:52,030 --> 00:07:54,879
content state by state site and then

42
00:07:54,879 --> 00:07:59,580
using the next instruction for addition

43
00:07:59,580 --> 00:08:03,280
this arrestor is no operand which is of

44
00:08:03,280 --> 00:08:08,379
a famous battleship with should do a lot

45
00:08:08,379 --> 00:08:15,780
of work some places to place the proper

46
00:08:15,780 --> 00:08:19,509
proper location and keeping the reality

47
00:08:19,509 --> 00:08:21,819
for self of concern based on the

48
00:08:21,819 --> 00:08:24,449
original rest

49
00:08:25,750 --> 00:08:33,490
and for that only needs to worse

50
00:08:34,320 --> 00:08:38,698
if I select high of 17 beats and that's

51
00:08:38,698 --> 00:08:40,289
done by that she should write

52
00:08:40,289 --> 00:08:43,349
instruction and that compared with

53
00:08:43,349 --> 00:08:46,790
simple constants

54
00:08:47,020 --> 00:08:51,430
that's when to decide

55
00:08:52,300 --> 00:08:56,590
something similar for instructions

56
00:08:56,590 --> 00:09:00,190
these instructions are released to

57
00:09:00,190 --> 00:09:06,370
structures and because of what is

58
00:09:06,370 --> 00:09:08,940
operations

59
00:09:16,190 --> 00:09:20,089
Soviet expansion and a special needs

60
00:09:20,089 --> 00:09:22,850
construction of winter bangles they're

61
00:09:22,850 --> 00:09:23,509
special

62
00:09:23,509 --> 00:09:26,240
instant inspection and that Jack and

63
00:09:26,240 --> 00:09:30,459
gives more glasses not in the same way

64
00:09:35,620 --> 00:09:40,550
pointer and that compare so basically my

65
00:09:40,550 --> 00:09:44,660
someone someone tries to work for any

66
00:09:44,660 --> 00:09:50,199
new platforms basically he needs to just

67
00:09:50,199 --> 00:09:54,350
take care to implement these basic

68
00:09:54,350 --> 00:09:56,209
operations I would say the most

69
00:09:56,209 --> 00:09:58,869
efficient way

70
00:10:01,600 --> 00:10:04,860
as lesson precious

71
00:10:17,420 --> 00:10:20,570
okay so now I will go a little bit into

72
00:10:20,570 --> 00:10:24,220
source code and I would explain what

73
00:10:24,220 --> 00:10:27,110
someone like me to do if they wanted to

74
00:10:27,110 --> 00:10:30,050
work watch it what other architecture

75
00:10:30,050 --> 00:10:33,140
and this is always an assumption that

76
00:10:33,140 --> 00:10:36,500
there is already interpreter movement so

77
00:10:36,500 --> 00:10:38,750
if you have an interpreter and you want

78
00:10:38,750 --> 00:10:45,290
to implement you so the first thing one

79
00:10:45,290 --> 00:10:46,730
of the things that you need to do is

80
00:10:46,730 --> 00:10:50,170
implement its missing piece because

81
00:10:50,170 --> 00:10:53,090
while you there are some piece in the

82
00:10:53,090 --> 00:10:55,100
interpreter the truth that you want to

83
00:10:55,100 --> 00:10:57,350
use the way if you have genes those

84
00:10:57,350 --> 00:11:02,450
those things are like entrance and exit

85
00:11:02,450 --> 00:11:07,820
from recode detection of hot code it

86
00:11:07,820 --> 00:11:10,190
needs to be cheaper than something that

87
00:11:10,190 --> 00:11:13,190
you need to implement instructions for

88
00:11:13,190 --> 00:11:15,800
your architecture and we find most

89
00:11:15,800 --> 00:11:19,310
registered users and stuff like that you

90
00:11:19,310 --> 00:11:22,240
want two different emitters for

91
00:11:22,240 --> 00:11:24,470
instruction so there you can package

92
00:11:24,470 --> 00:11:27,560
types of instructions instruction that

93
00:11:27,560 --> 00:11:32,859
used three registers instructions

94
00:11:38,220 --> 00:12:19,360
so this is a function that handles exits

95
00:12:19,360 --> 00:12:24,130
from jet so when something in code so

96
00:12:24,130 --> 00:12:28,030
these finishes or tails you want to go

97
00:12:28,030 --> 00:12:32,470
back to interpreter and mostly every

98
00:12:32,470 --> 00:12:34,620
example that you are going to write it

99
00:12:34,620 --> 00:12:37,810
it's going to go to this function so we

100
00:12:37,810 --> 00:12:41,810
want to get it function properly

101
00:12:41,810 --> 00:12:46,470
the very beginning of one of the things

102
00:12:46,470 --> 00:12:50,460
that you want to do in this is first of

103
00:12:50,460 --> 00:12:52,500
all you want to save the state of the

104
00:12:52,500 --> 00:12:54,600
jet you want to save all the registers

105
00:12:54,600 --> 00:12:58,320
it to you and and put them on a stack so

106
00:12:58,320 --> 00:13:01,520
those three dots are actually some

107
00:13:01,520 --> 00:13:05,640
missing that code base we just store all

108
00:13:05,640 --> 00:13:07,470
the registers all of the general-purpose

109
00:13:07,470 --> 00:13:11,610
over all the registers to the step you

110
00:13:11,610 --> 00:13:16,740
also want to make sure that you extract

111
00:13:16,740 --> 00:13:19,410
exit numbering parent properly those are

112
00:13:19,410 --> 00:13:22,850
mostly different for every architecture

113
00:13:22,850 --> 00:13:26,430
so the target file that death is a file

114
00:13:26,430 --> 00:13:29,880
which defines and macros you want to

115
00:13:29,880 --> 00:13:32,670
define all of the instructions all those

116
00:13:32,670 --> 00:13:34,740
instructions that you're going to use so

117
00:13:34,740 --> 00:13:36,390
it's just an instruction with an

118
00:13:36,390 --> 00:13:39,590
encoding we control define that in

119
00:13:39,590 --> 00:13:43,280
reference architecture we want to

120
00:13:43,280 --> 00:13:49,140
improve instruction fields so you want

121
00:13:49,140 --> 00:13:51,990
different destination registers on one

122
00:13:51,990 --> 00:13:54,030
including sorceress with different

123
00:13:54,030 --> 00:13:56,380
coding so those are the instructions

124
00:13:56,380 --> 00:13:58,930
and clothing you also want to define

125
00:13:58,930 --> 00:14:00,640
registers how many registers your

126
00:14:00,640 --> 00:14:03,040
architecture has the teleporting point

127
00:14:03,040 --> 00:14:05,890
each unit common IRA's 20 point unit has

128
00:14:05,890 --> 00:14:08,230
how many registers types are used for

129
00:14:08,230 --> 00:14:14,950
function calls this is an instruction is

130
00:14:14,950 --> 00:14:18,040
entered so we can we have two functions

131
00:14:18,040 --> 00:14:22,990
here this is a simple one the first

132
00:14:22,990 --> 00:14:27,160
function is emits and it's an

133
00:14:27,160 --> 00:14:29,800
instruction with three register operands

134
00:14:29,800 --> 00:14:35,860
so DNN you can you pass another state

135
00:14:35,860 --> 00:14:38,500
when instruction and three registers to

136
00:14:38,500 --> 00:14:42,130
it and it just merges those all do all

137
00:14:42,130 --> 00:14:47,220
that information and puts it into the

138
00:14:47,220 --> 00:14:53,380
branch it's DC relative branch of this

139
00:14:53,380 --> 00:14:57,070
relative jump instruction it just needs

140
00:14:57,070 --> 00:15:00,820
to get the DC current PC are subtracted

141
00:15:00,820 --> 00:15:12,640
from the target pointer and this is a

142
00:15:12,640 --> 00:15:14,170
little bit more complex

143
00:15:14,170 --> 00:15:19,450
it emits a load from our store to a

144
00:15:19,450 --> 00:15:23,170
pointer so you pass it a pointer and a

145
00:15:23,170 --> 00:15:28,540
register and you want to you want the

146
00:15:28,540 --> 00:15:30,670
information in that register to see the

147
00:15:30,670 --> 00:15:31,560
information

148
00:15:31,560 --> 00:15:35,160
a 22-point to do so first you have to so

149
00:15:35,160 --> 00:15:39,360
this is for our 64 architecture and has

150
00:15:39,360 --> 00:15:41,880
some specific instructions so it has a

151
00:15:41,880 --> 00:15:44,600
PC relative low so you first want to try

152
00:15:44,600 --> 00:15:48,540
ask can I can I can I do a piece about

153
00:15:48,540 --> 00:15:50,670
the world if I can't bend up its

154
00:15:50,670 --> 00:15:54,150
relative low else else I want to try

155
00:15:54,150 --> 00:15:57,360
something different like GL relative the

156
00:15:57,360 --> 00:16:02,610
GL is global state if you can't if you

157
00:16:02,610 --> 00:16:05,040
can do that then you just help you to

158
00:16:05,040 --> 00:16:07,080
register the register for that pointer

159
00:16:07,080 --> 00:16:10,050
and load it slowly and then after that

160
00:16:10,050 --> 00:16:20,610
would be our assembler this this

161
00:16:20,610 --> 00:16:23,760
actually this virus template has a

162
00:16:23,760 --> 00:16:26,660
function for every ayya ayya ayya ayya

163
00:16:26,660 --> 00:16:30,029
entire instruction these the ones

164
00:16:30,029 --> 00:16:32,550
present here are mean minimum and

165
00:16:32,550 --> 00:16:36,690
maximum i/o instructions so they are

166
00:16:36,690 --> 00:16:40,589
implemented in one function and but they

167
00:16:40,589 --> 00:16:44,400
are defined in macros so when Rajat gets

168
00:16:44,400 --> 00:16:50,180
a minimum by our it's going to go I mean

169
00:16:50,180 --> 00:16:56,760
isn't main function and well there is a

170
00:16:56,760 --> 00:16:58,800
different path if you're if you're doing

171
00:16:58,800 --> 00:17:02,070
a floating point to the minimum maximum

172
00:17:02,070 --> 00:17:04,190
and if you didn't get driven right

173
00:17:04,190 --> 00:17:06,770
you want to be different things use

174
00:17:06,770 --> 00:17:14,150
different registers so well in future so

175
00:17:14,150 --> 00:17:16,160
what you want to do Amina Maxine is a

176
00:17:16,160 --> 00:17:18,500
three operand instruction so it has the

177
00:17:18,500 --> 00:17:21,560
result the one value and the other value

178
00:17:21,560 --> 00:17:24,589
the left and right and you want to know

179
00:17:24,589 --> 00:17:26,270
which one is mania

180
00:17:26,270 --> 00:17:29,930
so you allocate the register for your

181
00:17:29,930 --> 00:17:32,320
destination and all these functions that

182
00:17:32,320 --> 00:17:35,570
start with our AR register LV function

183
00:17:35,570 --> 00:17:38,660
so we want to allocate LT this nation

184
00:17:38,660 --> 00:17:41,210
register is flat yogi what right

185
00:17:41,210 --> 00:17:44,930
register and you commit and you meet the

186
00:17:44,930 --> 00:17:47,900
two two instructions compare and

187
00:17:47,900 --> 00:17:50,540
conditional select so you want to

188
00:17:50,540 --> 00:17:53,330
compare values first and then you want

189
00:17:53,330 --> 00:17:55,790
to conditionally / that one is higher

190
00:17:55,790 --> 00:17:58,580
than or the flat is higher than you so a

191
00:17:58,580 --> 00:18:02,580
flat and if it's a maximum and

192
00:18:02,580 --> 00:18:05,130
vice versa and as you can see here the

193
00:18:05,130 --> 00:18:07,200
conditional select is amazing first and

194
00:18:07,200 --> 00:18:29,730
then compare that's because logic is the

195
00:18:29,730 --> 00:18:31,890
only thing you want to pay attention to

196
00:18:31,890 --> 00:18:36,830
the optimizations there there are

197
00:18:36,830 --> 00:18:42,740
probably as an architecture specific

198
00:18:42,740 --> 00:18:47,100
organization or 64 these are some of the

199
00:18:47,100 --> 00:18:52,560
limitations so you can you when we money

200
00:18:52,560 --> 00:18:56,850
right right Tallulah a plus B times C

201
00:18:56,850 --> 00:19:00,480
you can actually get that to be just one

202
00:19:00,480 --> 00:19:03,900
instruction so and why is it that

203
00:19:03,900 --> 00:19:07,770
dynamically typed language with in to

204
00:19:07,770 --> 00:19:10,350
connect dynamically interpreted language

205
00:19:10,350 --> 00:19:13,770
and all that is just one instruction

206
00:19:13,770 --> 00:19:15,660
that is pretty impressive to me but

207
00:19:15,660 --> 00:19:18,330
usually interpreted languages to get a

208
00:19:18,330 --> 00:19:20,730
lot of instructions for something some

209
00:19:20,730 --> 00:19:23,180
expression like that also they are

210
00:19:23,180 --> 00:19:26,180
interesting

211
00:19:29,150 --> 00:19:32,550
and you probably want to want to look

212
00:19:32,550 --> 00:19:35,370
into popular from pilots like GCC and

213
00:19:35,370 --> 00:19:37,730
elegant to find ideas for these

214
00:19:37,730 --> 00:19:40,310
musicians

215
00:19:40,310 --> 00:19:43,359
[Music]

216
00:19:47,860 --> 00:19:51,640
so now for the changes them it's the

217
00:19:51,640 --> 00:19:56,380
part that already mentioned we did in

218
00:19:56,380 --> 00:19:58,480
third to the port and it worked as well

219
00:19:58,480 --> 00:20:04,809
as if some people thought it took

220
00:20:04,809 --> 00:20:07,899
support but just to mention that all the

221
00:20:07,899 --> 00:20:15,390
changes were related to early / tech

222
00:20:15,390 --> 00:20:19,450
Corrections and it sparked changes are

223
00:20:19,450 --> 00:20:23,529
pretty much similar changes on our

224
00:20:23,529 --> 00:20:26,860
support for think that we are going to

225
00:20:26,860 --> 00:20:31,179
do make 64 soft coat will leave little

226
00:20:31,179 --> 00:20:36,730
bit earlier support because in current

227
00:20:36,730 --> 00:20:40,990
state were done support annex of these

228
00:20:40,990 --> 00:20:44,760
four bits of architecture so

229
00:20:44,760 --> 00:20:47,010
to enable that we need to make little

230
00:20:47,010 --> 00:20:52,710
changes we pass precise disable

231
00:20:52,710 --> 00:20:54,300
splitting 64-bits

232
00:20:54,300 --> 00:21:00,710
I asked to be tires and after-death

233
00:21:09,140 --> 00:21:12,140
properly

234
00:21:13,370 --> 00:21:18,080
generate any instructions and call

235
00:21:18,080 --> 00:21:22,429
functions proper manner

236
00:21:27,270 --> 00:21:32,030
and here you can see benefits his work

237
00:21:32,030 --> 00:21:39,030
on despite our presented changes result

238
00:21:39,030 --> 00:21:43,890
that for platforms

239
00:21:43,890 --> 00:21:45,570
in bars

240
00:21:45,570 --> 00:21:51,200
red bar represents how many times

241
00:21:51,200 --> 00:21:55,210
inverse pastor

242
00:21:55,210 --> 00:22:00,429
it's best to go up to boy 155.52 third

243
00:22:00,429 --> 00:22:05,080
and who bazar just to show the

244
00:22:05,080 --> 00:22:07,960
difference between widgets interpreter

245
00:22:07,960 --> 00:22:10,320
and

246
00:22:10,909 --> 00:22:13,539
hi

247
00:22:18,030 --> 00:22:20,660
that's

248
00:22:21,530 --> 00:22:24,370
and then questions

249
00:22:35,950 --> 00:23:08,799
it's okay

250
00:23:10,060 --> 00:23:14,370
in fire

251
00:23:17,110 --> 00:23:19,070
well

252
00:23:19,070 --> 00:23:22,610
well there is their specifics in the

253
00:23:22,610 --> 00:23:25,340
interpreter and indeed there are few

254
00:23:25,340 --> 00:23:27,320
things you have to take care of but

255
00:23:27,320 --> 00:23:31,280
nothing special but the interpreter now

256
00:23:31,280 --> 00:23:33,770
there are also things with everything

257
00:23:33,770 --> 00:23:40,430
here because you have to implement :

258
00:23:40,430 --> 00:23:43,370
convention for that architecture how we

259
00:23:43,370 --> 00:23:45,980
do this you want to use how do you want

260
00:23:45,980 --> 00:23:50,930
to how to use tech repair services you

261
00:23:50,930 --> 00:23:53,830
can get

262
00:23:58,590 --> 00:24:00,679
I guess

263
00:24:00,679 --> 00:24:02,740
you

