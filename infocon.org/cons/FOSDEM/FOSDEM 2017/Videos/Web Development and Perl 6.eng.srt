1
00:00:00,000 --> 00:00:02,719
okay

2
00:00:05,590 --> 00:00:08,629
so the room seems to settle down quite

3
00:00:08,629 --> 00:00:14,059
nicely so we may as well start a couple

4
00:00:14,059 --> 00:00:17,650
months ago I think it was in October

5
00:00:17,890 --> 00:00:22,369
louder well I really did all my shouting

6
00:00:22,369 --> 00:00:26,180
on Friday in the beauty band so okay a

7
00:00:26,180 --> 00:00:28,130
couple of months ago I guess it was in

8
00:00:28,130 --> 00:00:32,058
October I stumbled across a blog post

9
00:00:32,058 --> 00:00:35,480
about web development with pro/5 and it

10
00:00:35,480 --> 00:00:38,720
started like this even though I'm in the

11
00:00:38,720 --> 00:00:41,930
thrills of Perl 6 I still do all my web

12
00:00:41,930 --> 00:00:45,140
development in pro 5 because the ecology

13
00:00:45,140 --> 00:00:48,500
of modules is so mature when I read this

14
00:00:48,500 --> 00:00:51,049
sentence it kinda rubbed me the wrong

15
00:00:51,049 --> 00:00:54,320
way here's someone who clearly likes

16
00:00:54,320 --> 00:00:57,949
Perl 6 yet cannot use it for what he

17
00:00:57,949 --> 00:01:01,010
needs to be doing and to me that's kind

18
00:01:01,010 --> 00:01:03,799
of unacceptable I just refuse to believe

19
00:01:03,799 --> 00:01:07,700
that after so many people poured so much

20
00:01:07,700 --> 00:01:11,450
time interpret 6 it should still not be

21
00:01:11,450 --> 00:01:13,850
ready for something as mundane as web

22
00:01:13,850 --> 00:01:17,600
development so set out on my quest to

23
00:01:17,600 --> 00:01:19,540
show that this site sentence is

24
00:01:19,540 --> 00:01:24,440
misguided or just plain obsolete so

25
00:01:24,440 --> 00:01:26,210
where do we begin

26
00:01:26,210 --> 00:01:28,790
how do we show that everything is not as

27
00:01:28,790 --> 00:01:32,150
bad as this bloggers beliefs well I did

28
00:01:32,150 --> 00:01:35,300
a little survey of modules Perl 6 dork

29
00:01:35,300 --> 00:01:37,940
and had a look at everything that at

30
00:01:37,940 --> 00:01:40,690
least sounded like a web framework to me

31
00:01:40,690 --> 00:01:44,570
these are the results as you can see

32
00:01:44,570 --> 00:01:47,810
here is a reasonably short list in

33
00:01:47,810 --> 00:01:52,090
itself does not that bad the list of

34
00:01:52,090 --> 00:01:54,860
actively developed web frameworks for

35
00:01:54,860 --> 00:01:57,520
Perl 5 is probably not that much longer

36
00:01:57,520 --> 00:02:01,490
of course there are lots and lots and

37
00:02:01,490 --> 00:02:04,909
lots of failed attempts or abandoned

38
00:02:04,909 --> 00:02:07,850
frameworks on cPanel this raises the

39
00:02:07,850 --> 00:02:10,848
second question - which category do this

40
00:02:10,848 --> 00:02:12,630
belong

41
00:02:12,630 --> 00:02:15,690
to answer this question I had to look at

42
00:02:15,690 --> 00:02:19,230
the date of the last commit to the

43
00:02:19,230 --> 00:02:21,930
repositories now keep in mind that the

44
00:02:21,930 --> 00:02:25,080
very first stable release of Perl 6 as a

45
00:02:25,080 --> 00:02:30,660
language was in December 2015 and in the

46
00:02:30,660 --> 00:02:33,660
couple of months before this release we

47
00:02:33,660 --> 00:02:36,570
really rushed in a lot of semantic

48
00:02:36,570 --> 00:02:39,060
changes that we knew we had to get in

49
00:02:39,060 --> 00:02:40,860
before we were ready to commit to a

50
00:02:40,860 --> 00:02:43,860
stable version of the language so

51
00:02:43,860 --> 00:02:46,590
everything that has not seen any commits

52
00:02:46,590 --> 00:02:51,720
in this month or afterwards is probably

53
00:02:51,720 --> 00:02:56,960
bit rotted or really incredibly lucky

54
00:02:57,930 --> 00:03:02,030
for example web app a web app ballet

55
00:03:02,030 --> 00:03:04,680
claims that it's gonna be merged with

56
00:03:04,680 --> 00:03:10,050
Bellator in the near future now got

57
00:03:10,050 --> 00:03:13,230
curious and had a look about when the

58
00:03:13,230 --> 00:03:15,690
sentence was added through the

59
00:03:15,690 --> 00:03:23,310
documentation any guesses it's not that

60
00:03:23,310 --> 00:03:24,000
bad you know

61
00:03:24,000 --> 00:03:30,000
it's March 2013 it hasn't happened yet

62
00:03:30,000 --> 00:03:32,550
I'm not sure if it will ever happen but

63
00:03:32,550 --> 00:03:34,440
with this filter applied we are left

64
00:03:34,440 --> 00:03:38,430
with three contenders so let's not jump

65
00:03:38,430 --> 00:03:40,740
to conclusions here Steve three can

66
00:03:40,740 --> 00:03:42,900
still be a very decent pool to choose

67
00:03:42,900 --> 00:03:45,620
from we'll just have a look

68
00:03:45,620 --> 00:03:49,560
the first one is crust crust is in short

69
00:03:49,560 --> 00:03:53,250
a PSG I implementation in Perl 6

70
00:03:53,250 --> 00:03:56,490
it's a glue between the web server and

71
00:03:56,490 --> 00:03:59,660
the web framework itself

72
00:03:59,660 --> 00:04:02,880
it lets us centralize code for

73
00:04:02,880 --> 00:04:04,770
supporting different ways of connecting

74
00:04:04,770 --> 00:04:07,130
our application to a web server like

75
00:04:07,130 --> 00:04:10,680
fast CGI or being run behind the front

76
00:04:10,680 --> 00:04:14,130
end proxy though certainly very useful

77
00:04:14,130 --> 00:04:16,260
it's probably not the very first thing

78
00:04:16,260 --> 00:04:19,079
that you'll be looking for but let's

79
00:04:19,079 --> 00:04:20,790
keep it in mind for now we'll come back

80
00:04:20,790 --> 00:04:23,090
to it later

81
00:04:24,030 --> 00:04:27,010
web can be considered one level above

82
00:04:27,010 --> 00:04:30,370
crust in the stack it gives you requests

83
00:04:30,370 --> 00:04:33,240
and response objects and the dispatcher

84
00:04:33,240 --> 00:04:36,940
not luxurious but sounds like at least a

85
00:04:36,940 --> 00:04:40,600
good start except for that it apparently

86
00:04:40,600 --> 00:04:44,200
does not even support fancy newfangled

87
00:04:44,200 --> 00:04:49,150
features like file uploads and there's

88
00:04:49,150 --> 00:04:51,250
another thing missing that I'd consider

89
00:04:51,250 --> 00:04:54,340
somewhat essential part and I will come

90
00:04:54,340 --> 00:04:55,390
back to this later

91
00:04:55,390 --> 00:04:57,820
for now let's move on to the first thing

92
00:04:57,820 --> 00:05:02,260
that you should have considered Beyla

93
00:05:02,260 --> 00:05:04,090
door is pretty much a very

94
00:05:04,090 --> 00:05:06,730
straightforward port of the answer to

95
00:05:06,730 --> 00:05:10,360
Perl 6 it is lightweight it is being

96
00:05:10,360 --> 00:05:13,000
actively developed though somewhat

97
00:05:13,000 --> 00:05:16,780
slowly and it brings much of what you

98
00:05:16,780 --> 00:05:19,990
would expect from a web framework it's a

99
00:05:19,990 --> 00:05:22,450
little thin on the documentation and on

100
00:05:22,450 --> 00:05:24,610
examples but since it's a very

101
00:05:24,610 --> 00:05:26,700
straightforward port of the answer I

102
00:05:26,700 --> 00:05:31,450
could just implement dancer tutorial

103
00:05:31,450 --> 00:05:34,900
example application in beta though just

104
00:05:34,900 --> 00:05:37,750
to see how how well it does the program

105
00:05:37,750 --> 00:05:39,490
I'm talking about is this kind of a

106
00:05:39,490 --> 00:05:42,940
minimalistic block you can lock in block

107
00:05:42,940 --> 00:05:46,420
something inside fall and it's this gets

108
00:05:46,420 --> 00:05:49,780
then displayed on the front page now

109
00:05:49,780 --> 00:05:52,180
Bailey dot does not come with any kind

110
00:05:52,180 --> 00:05:55,390
of built-in configuration system so

111
00:05:55,390 --> 00:05:57,310
first off I wrote an extremely

112
00:05:57,310 --> 00:05:59,550
sophisticated one which you can see here

113
00:05:59,550 --> 00:06:02,740
well at least it lets me stick very

114
00:06:02,740 --> 00:06:06,880
closely to the original example now

115
00:06:06,880 --> 00:06:09,490
here's a bit of database setup code it's

116
00:06:09,490 --> 00:06:10,810
nothing special

117
00:06:10,810 --> 00:06:12,730
do I have to mention that I very much

118
00:06:12,730 --> 00:06:15,880
like how DB is uses named parameters

119
00:06:15,880 --> 00:06:18,190
instead of parsing some obscure

120
00:06:18,190 --> 00:06:20,770
connection string though it's kind of

121
00:06:20,770 --> 00:06:23,740
odd that the SQLite driver doesn't cope

122
00:06:23,740 --> 00:06:26,230
too well with being given a proper IO

123
00:06:26,230 --> 00:06:29,050
path object so I have two stringify the

124
00:06:29,050 --> 00:06:32,820
path before giving it but okay

125
00:06:32,820 --> 00:06:35,460
now if you know a bit of the answer

126
00:06:35,460 --> 00:06:38,480
you're gonna feel right at home here

127
00:06:38,480 --> 00:06:41,460
this is pretty much the same as you

128
00:06:41,460 --> 00:06:43,980
would write in pro/5 we define a route

129
00:06:43,980 --> 00:06:47,490
for our get requests to the route and

130
00:06:47,490 --> 00:06:49,440
give Bailey though a code block to

131
00:06:49,440 --> 00:06:54,900
execute when the route matches again DB

132
00:06:54,900 --> 00:06:57,300
Irish interface looks quite a bit

133
00:06:57,300 --> 00:06:59,550
cleaner than good all the EBI to me

134
00:06:59,550 --> 00:07:01,920
that's the advantage of being able to

135
00:07:01,920 --> 00:07:05,630
start over with a fresh new code base

136
00:07:05,630 --> 00:07:09,420
the login handler seems to be a good

137
00:07:09,420 --> 00:07:11,580
example for how to access parameters

138
00:07:11,580 --> 00:07:13,890
sessions and redirects very

139
00:07:13,890 --> 00:07:16,350
straightforward easy to use very

140
00:07:16,350 --> 00:07:20,610
familiar from the answer so have I

141
00:07:20,610 --> 00:07:22,470
convinced you yet that pro six is

142
00:07:22,470 --> 00:07:25,790
absolutely ready for web development

143
00:07:25,790 --> 00:07:28,950
hope you noticed a little interesting

144
00:07:28,950 --> 00:07:33,420
bit in the last line here instead of

145
00:07:33,420 --> 00:07:35,160
just calling the template function as

146
00:07:35,160 --> 00:07:37,620
you were doing dancer I passed the

147
00:07:37,620 --> 00:07:40,140
result to a function called layout why

148
00:07:40,140 --> 00:07:42,320
is that

149
00:07:42,560 --> 00:07:45,530
well Bella though has simply hasn't seen

150
00:07:45,530 --> 00:07:47,630
as much development as the answer or

151
00:07:47,630 --> 00:07:52,220
mojolicious so again he said has no

152
00:07:52,220 --> 00:07:54,560
built-in support for layout templates or

153
00:07:54,560 --> 00:07:57,050
hooks so I had to write a little help up

154
00:07:57,050 --> 00:08:00,110
nothing bad really

155
00:08:00,110 --> 00:08:02,480
there's also no facility to construct

156
00:08:02,480 --> 00:08:05,930
your eyes yet so for now a little

157
00:08:05,930 --> 00:08:08,600
example application cannot be run with

158
00:08:08,600 --> 00:08:12,530
the path prefix and this is also a part

159
00:08:12,530 --> 00:08:14,720
that I consider very much with missing

160
00:08:14,720 --> 00:08:17,930
from web again probably not a

161
00:08:17,930 --> 00:08:20,030
deal-breaker it just shows that Bella

162
00:08:20,030 --> 00:08:23,419
door is not as mature a framework as

163
00:08:23,419 --> 00:08:29,080
dancer or mojolicious now wait a minute

164
00:08:29,590 --> 00:08:32,450
do you remember crust the PS GI

165
00:08:32,450 --> 00:08:35,150
framework for pill 6 well the cool thing

166
00:08:35,150 --> 00:08:37,820
about PSG is that it allows for sharing

167
00:08:37,820 --> 00:08:39,110
so-called middlewares

168
00:08:39,110 --> 00:08:41,390
between applications and frameworks

169
00:08:41,390 --> 00:08:44,030
there are tons of middlewares from

170
00:08:44,030 --> 00:08:46,190
support for running behind the front and

171
00:08:46,190 --> 00:08:50,210
proxy - awesome debug panels and I don't

172
00:08:50,210 --> 00:08:53,300
know what else so in theory you could

173
00:08:53,300 --> 00:08:55,360
have the same with crust

174
00:08:55,360 --> 00:08:59,950
what middlewares have yet to appear

175
00:08:59,950 --> 00:09:03,080
nevertheless crust is certainly a good

176
00:09:03,080 --> 00:09:07,330
base so we may as well give it a try the

177
00:09:07,330 --> 00:09:09,650
documentation makes this look much more

178
00:09:09,650 --> 00:09:11,390
complicated than it actually is

179
00:09:11,390 --> 00:09:14,270
this tiny PSG I file is all that's

180
00:09:14,270 --> 00:09:16,790
needed to bring crust and Bella door

181
00:09:16,790 --> 00:09:22,950
together so we could give it a try

182
00:09:22,950 --> 00:09:30,600
I have much extra time I can do a little

183
00:09:30,600 --> 00:09:35,070
life demo here okay it stops that's a

184
00:09:35,070 --> 00:09:40,590
good sign and the application is running

185
00:09:40,590 --> 00:09:46,310
nice so

186
00:09:47,180 --> 00:09:49,670
yeah that's it we can go for it be

187
00:09:49,670 --> 00:09:50,690
heroes right

188
00:09:50,690 --> 00:09:54,530
awesome middle verse but first off I'm

189
00:09:54,530 --> 00:09:58,990
going to show you the login thing

190
00:10:03,690 --> 00:10:06,690
so

191
00:10:09,589 --> 00:10:12,050
oh no it now it's in my super-secret

192
00:10:12,050 --> 00:10:12,800
password

193
00:10:12,800 --> 00:10:14,979
Oh

194
00:10:21,290 --> 00:10:22,860
you

195
00:10:22,860 --> 00:10:25,430
yeah

196
00:10:26,850 --> 00:10:30,760
well this is the error message and you

197
00:10:30,760 --> 00:10:32,860
know everyone has a point where she just

198
00:10:32,860 --> 00:10:36,250
gives up the question is only where

199
00:10:36,250 --> 00:10:39,220
exactly this point is and it will

200
00:10:39,220 --> 00:10:41,290
probably depend on if you're just

201
00:10:41,290 --> 00:10:43,600
playing around with this like I have or

202
00:10:43,600 --> 00:10:46,090
you need to earn some hard currency with

203
00:10:46,090 --> 00:10:51,430
this so it's there no hope are we really

204
00:10:51,430 --> 00:10:53,670
stuck with the choice between amateur

205
00:10:53,670 --> 00:10:57,220
ecology of modules and the devotion to a

206
00:10:57,220 --> 00:11:01,390
new laughs well screw it I won't to have

207
00:11:01,390 --> 00:11:04,030
both if the answer to is very

208
00:11:04,030 --> 00:11:06,340
development isn't the features are then

209
00:11:06,340 --> 00:11:13,870
the answer true I will use now this is

210
00:11:13,870 --> 00:11:15,940
kind of like the canonical hello world

211
00:11:15,940 --> 00:11:18,640
example in the answer to taken straight

212
00:11:18,640 --> 00:11:25,000
out of its tutorial okay it's probably

213
00:11:25,000 --> 00:11:27,850
updated by now but okay it's probably

214
00:11:27,850 --> 00:11:30,810
not looking about that much different

215
00:11:30,810 --> 00:11:34,510
okay but if I were to try this it would

216
00:11:34,510 --> 00:11:38,190
explode again and why is that

217
00:11:38,190 --> 00:11:40,780
well the documentation doesn't tell you

218
00:11:40,780 --> 00:11:43,510
this but that's the - actually passes

219
00:11:43,510 --> 00:11:45,580
the application object to your handler

220
00:11:45,580 --> 00:11:48,760
routine since Pro 6 does have proper

221
00:11:48,760 --> 00:11:51,250
subroutine signatures integrated in the

222
00:11:51,250 --> 00:11:54,460
language it expected to declare those

223
00:11:54,460 --> 00:11:56,670
parameters that are passed to your code

224
00:11:56,670 --> 00:11:59,740
so it would write fully complain that no

225
00:11:59,740 --> 00:12:03,550
parameters were declared but passed in

226
00:12:03,550 --> 00:12:06,610
anyway so what could we do to make Pro

227
00:12:06,610 --> 00:12:12,010
six happy we could do it like this we

228
00:12:12,010 --> 00:12:15,130
declare the parameter but this is

229
00:12:15,130 --> 00:12:17,440
undocumented and it will be tedious and

230
00:12:17,440 --> 00:12:20,170
look less pretty and we can't have that

231
00:12:20,170 --> 00:12:21,210
can we

232
00:12:21,210 --> 00:12:23,920
now luckily touch ik who first tried

233
00:12:23,920 --> 00:12:26,860
this found a really pretty rare round

234
00:12:26,860 --> 00:12:29,740
that in pro six code blocks are not just

235
00:12:29,740 --> 00:12:32,440
syntactic elements but first-class

236
00:12:32,440 --> 00:12:33,790
objects

237
00:12:33,790 --> 00:12:37,210
you can think of subroutines as code

238
00:12:37,210 --> 00:12:40,780
blocks with explicit signatures naked

239
00:12:40,780 --> 00:12:43,000
code block blocks have a default

240
00:12:43,000 --> 00:12:46,990
signature that is used to create the

241
00:12:46,990 --> 00:12:51,850
topic variable dollar underscore and one

242
00:12:51,850 --> 00:12:54,370
argument is exactly what we need to get

243
00:12:54,370 --> 00:12:58,750
around this now let's have a look at how

244
00:12:58,750 --> 00:13:01,600
well we do at the original doubt dancer

245
00:13:01,600 --> 00:13:04,630
example I party to bail adore and not

246
00:13:04,630 --> 00:13:07,000
gonna show you the full source code that

247
00:13:07,000 --> 00:13:09,070
were mostly just be boring code like

248
00:13:09,070 --> 00:13:12,420
this interesting bits maybe to point out

249
00:13:12,420 --> 00:13:15,160
that I do stick with the tutorial

250
00:13:15,160 --> 00:13:18,940
closely so I use pro 5sd bi and template

251
00:13:18,940 --> 00:13:23,260
toolkit also one of the little

252
00:13:23,260 --> 00:13:26,080
improvements of pro six that matter so

253
00:13:26,080 --> 00:13:28,000
much at least to me in my daily life as

254
00:13:28,000 --> 00:13:30,430
a programmer is that we have file specs

255
00:13:30,430 --> 00:13:32,440
functionality integrated into the

256
00:13:32,440 --> 00:13:35,350
language so you can just use the temp

257
00:13:35,350 --> 00:13:37,600
dia variable and it's convenient child

258
00:13:37,600 --> 00:13:40,110
method for platform-independent

259
00:13:40,110 --> 00:13:43,450
generation of the path to a go temp

260
00:13:43,450 --> 00:13:45,600
directory

261
00:13:46,730 --> 00:13:52,140
as I mentioned I just use TBI which all

262
00:13:52,140 --> 00:13:54,540
of you should know really so this will

263
00:13:54,540 --> 00:13:57,330
look very familiar to you but also a

264
00:13:57,330 --> 00:14:00,660
little strange first of all there's no

265
00:14:00,660 --> 00:14:03,620
undef anymore even undefined type

266
00:14:03,620 --> 00:14:08,480
undefined values are typed in plus 6 so

267
00:14:08,480 --> 00:14:12,330
the closest thing to a plane undef is an

268
00:14:12,330 --> 00:14:15,990
undefined any which is what I passed to

269
00:14:15,990 --> 00:14:21,540
the Kinect method here now what the hell

270
00:14:21,540 --> 00:14:28,370
is this dollar hash thingy any ideas

271
00:14:29,910 --> 00:14:33,690
no it's it's an itemized hash it's a

272
00:14:33,690 --> 00:14:35,700
hash that should be treated like a

273
00:14:35,700 --> 00:14:38,250
single item and that's the most

274
00:14:38,250 --> 00:14:41,310
important part not interpolated into the

275
00:14:41,310 --> 00:14:45,150
argument list of the method call it's a

276
00:14:45,150 --> 00:14:47,970
bit like taking a reference in pro/5

277
00:14:47,970 --> 00:14:49,620
except that we hope don't have

278
00:14:49,620 --> 00:14:52,980
references anymore or that everything is

279
00:14:52,980 --> 00:14:55,110
by reference depending on the way you

280
00:14:55,110 --> 00:14:59,310
look at it now lastly this show code

281
00:14:59,310 --> 00:15:02,280
shows how to access global profile

282
00:15:02,280 --> 00:15:07,080
variables improv 6 which is exactly like

283
00:15:07,080 --> 00:15:09,870
in pro 5 itself if you try this at home

284
00:15:09,870 --> 00:15:13,170
and it doesn't work that way you have a

285
00:15:13,170 --> 00:15:15,410
version of inline pro 5 installed that's

286
00:15:15,410 --> 00:15:18,030
been written before this weekend

287
00:15:18,030 --> 00:15:23,610
just like the old way was not as pretty

288
00:15:23,610 --> 00:15:27,000
and I just hate showing things that are

289
00:15:27,000 --> 00:15:29,130
not pretty in my slides so I had to fix

290
00:15:29,130 --> 00:15:33,750
it onto a more mundane piece of codes

291
00:15:33,750 --> 00:15:37,260
the before template render hook as you

292
00:15:37,260 --> 00:15:39,390
probably know better than me this is

293
00:15:39,390 --> 00:15:42,570
just a sub that gets passed a hash into

294
00:15:42,570 --> 00:15:46,440
which it can set some values now please

295
00:15:46,440 --> 00:15:48,690
a quick show of hands how many of you

296
00:15:48,690 --> 00:15:51,540
people have forgotten this semicolon

297
00:15:51,540 --> 00:15:56,449
after the closing curly encode like this

298
00:15:56,950 --> 00:16:01,060
it happens to me all their time in pro/5

299
00:16:01,060 --> 00:16:03,760
which is why I'm so glad that prod six

300
00:16:03,760 --> 00:16:06,250
has fixed this for us you don't need it

301
00:16:06,250 --> 00:16:08,350
anymore the compilers smart enough to

302
00:16:08,350 --> 00:16:11,110
guess what you actually meant which is

303
00:16:11,110 --> 00:16:16,360
the statement ends there now this is the

304
00:16:16,360 --> 00:16:18,550
heart of our program their code that

305
00:16:18,550 --> 00:16:22,269
actually delivers the page there's the

306
00:16:22,269 --> 00:16:27,630
one specialty here is this map thingy

307
00:16:27,630 --> 00:16:36,699
now what's that well when we pass a hash

308
00:16:36,699 --> 00:16:40,810
from pulse six to pro five what the

309
00:16:40,810 --> 00:16:43,600
thing in the background does is it ties

310
00:16:43,600 --> 00:16:46,540
a pro five hash so all the XS is

311
00:16:46,540 --> 00:16:49,540
redirected to the Pearl six hash now if

312
00:16:49,540 --> 00:16:55,360
this sounds slow you're spot-on it's

313
00:16:55,360 --> 00:16:57,070
also that it's very visible in

314
00:16:57,070 --> 00:17:00,370
benchmarks now a map is an immutable

315
00:17:00,370 --> 00:17:04,030
hash and since it's immutable since we

316
00:17:04,030 --> 00:17:06,429
know it cannot ever be changed anymore

317
00:17:06,429 --> 00:17:09,429
we get by with just copying it to a

318
00:17:09,429 --> 00:17:12,819
plane pro five hash so this is much

319
00:17:12,819 --> 00:17:15,819
faster and Lance the access is this hash

320
00:17:15,819 --> 00:17:21,010
a lot so this is a little way to really

321
00:17:21,010 --> 00:17:23,760
speed it up

322
00:17:23,980 --> 00:17:26,660
the final piece of the answer code I'm

323
00:17:26,660 --> 00:17:28,850
going to show is this bit there's

324
00:17:28,850 --> 00:17:31,730
nothing out of the ordinary here in fact

325
00:17:31,730 --> 00:17:34,280
it's actually a little bit closer to

326
00:17:34,280 --> 00:17:36,190
what the dancer documentation suggests

327
00:17:36,190 --> 00:17:40,400
then the tutorial itself I'm talking

328
00:17:40,400 --> 00:17:44,179
about using their body parameters I

329
00:17:44,179 --> 00:17:49,970
think you call it key words yeah other

330
00:17:49,970 --> 00:17:51,650
than this being the recommended way

331
00:17:51,650 --> 00:17:53,120
anyway there's a reason for this

332
00:17:53,120 --> 00:17:56,090
deviation and this reason is the param

333
00:17:56,090 --> 00:17:59,630
keyword is context-sensitive it behaves

334
00:17:59,630 --> 00:18:01,760
different in list contexts than in

335
00:18:01,760 --> 00:18:04,970
scalar context now this is a tricky bit

336
00:18:04,970 --> 00:18:07,309
of the language that Pro six doesn't

337
00:18:07,309 --> 00:18:08,870
have anymore there's no distinction

338
00:18:08,870 --> 00:18:12,710
between call contexts anymore so there's

339
00:18:12,710 --> 00:18:15,679
also no way to communicate through pro/5

340
00:18:15,679 --> 00:18:20,030
function in which context it is called

341
00:18:20,030 --> 00:18:22,669
so what we do is we call every function

342
00:18:22,669 --> 00:18:24,590
in list context because it's the most

343
00:18:24,590 --> 00:18:27,740
general one in almost every case it will

344
00:18:27,740 --> 00:18:33,470
just play and work no yeah let's said in

345
00:18:33,470 --> 00:18:35,750
Pro 6 the we don't have this distinction

346
00:18:35,750 --> 00:18:37,179
anymore

347
00:18:37,179 --> 00:18:40,460
now all the switching between pro 5 and

348
00:18:40,460 --> 00:18:43,159
plus 6 must surely cost a lot of

349
00:18:43,159 --> 00:18:46,159
performance but how much well the

350
00:18:46,159 --> 00:18:48,020
benchmark the little block application

351
00:18:48,020 --> 00:18:49,850
and found that it's actually doing quite

352
00:18:49,850 --> 00:18:53,809
fine 170 requests per second on my

353
00:18:53,809 --> 00:18:55,730
laptop is surely enough for many

354
00:18:55,730 --> 00:18:59,539
websites in fact I think most websites

355
00:18:59,539 --> 00:19:02,799
out there see far less traffic than that

356
00:19:02,799 --> 00:19:05,840
for comparison I tried the same with

357
00:19:05,840 --> 00:19:09,919
palador and was quite stunned I didn't

358
00:19:09,919 --> 00:19:13,450
exactly expect stellar performance but

359
00:19:13,450 --> 00:19:16,940
240 milliseconds for a simple websites

360
00:19:16,940 --> 00:19:18,770
like that for a single request that's

361
00:19:18,770 --> 00:19:23,030
that's kind of embarrassing really I was

362
00:19:23,030 --> 00:19:24,710
sure that I have made some mistakes so I

363
00:19:24,710 --> 00:19:27,470
dug a little into it and I found out

364
00:19:27,470 --> 00:19:31,179
that template mojo which valador uses

365
00:19:31,179 --> 00:19:34,250
uses April 6 grammar to parse the

366
00:19:34,250 --> 00:19:36,230
templates and projects grammars are not

367
00:19:36,230 --> 00:19:36,710
fast

368
00:19:36,710 --> 00:19:41,240
what is this then is it generates Perl 6

369
00:19:41,240 --> 00:19:46,909
code and then evolves this code now no

370
00:19:46,909 --> 00:19:50,679
one ever expected Perl 6 to compile fast

371
00:19:50,679 --> 00:19:54,289
it's it's a humongously complex language

372
00:19:54,289 --> 00:19:57,980
and we're working hard and getting it

373
00:19:57,980 --> 00:20:00,799
fast at runtime but compiled time is yes

374
00:20:00,799 --> 00:20:04,220
very much beyond that so doing this

375
00:20:04,220 --> 00:20:07,070
double parse for every single request is

376
00:20:07,070 --> 00:20:09,110
pretty much the slowest thing you could

377
00:20:09,110 --> 00:20:12,409
do the good news is that it's fixable

378
00:20:12,409 --> 00:20:14,299
and it's trivially flexibly I mean you

379
00:20:14,299 --> 00:20:16,220
just have to catch the generated

380
00:20:16,220 --> 00:20:20,720
subroutine and template mojo actually

381
00:20:20,720 --> 00:20:23,570
has such a cache but pay later uses it

382
00:20:23,570 --> 00:20:25,549
in a way that it cannot use it because

383
00:20:25,549 --> 00:20:29,029
it generates a new template object every

384
00:20:29,029 --> 00:20:32,450
request it's fixable it's quite simple

385
00:20:32,450 --> 00:20:35,809
it's it's just a symptom of pay later on

386
00:20:35,809 --> 00:20:39,610
Perl 6 being relatively new

387
00:20:40,290 --> 00:20:45,540
next I had a look at more delicious as

388
00:20:45,540 --> 00:20:47,460
much religious is quite similar to

389
00:20:47,460 --> 00:20:49,740
dancer the results were quite similar as

390
00:20:49,740 --> 00:20:52,710
well so instead of a boring introduction

391
00:20:52,710 --> 00:20:54,630
I will just focus on a couple of

392
00:20:54,630 --> 00:20:57,360
stumbling blocks I discovered when

393
00:20:57,360 --> 00:21:02,610
porting all the tutorial examples this

394
00:21:02,610 --> 00:21:04,590
hello world should be pretty much

395
00:21:04,590 --> 00:21:08,460
exactly what you expected as it happened

396
00:21:08,460 --> 00:21:13,460
to me just note this space before the

397
00:21:14,870 --> 00:21:17,640
after this happened before the opening

398
00:21:17,640 --> 00:21:20,100
parenthesis if you leave out the space

399
00:21:20,100 --> 00:21:21,660
in there and I should have used another

400
00:21:21,660 --> 00:21:25,650
phone to make it more clear Pro six will

401
00:21:25,650 --> 00:21:28,140
think that you will want to call ASAP

402
00:21:28,140 --> 00:21:31,920
called set and give you a very confusing

403
00:21:31,920 --> 00:21:33,870
error message about the lossy not being

404
00:21:33,870 --> 00:21:38,010
declared but I learned that if you do it

405
00:21:38,010 --> 00:21:40,880
correctly it's it just works like this

406
00:21:40,880 --> 00:21:44,010
now it would be really cool if this

407
00:21:44,010 --> 00:21:48,060
example worked as shown because much

408
00:21:48,060 --> 00:21:51,180
alicia's supports storing templates and

409
00:21:51,180 --> 00:21:55,080
static files in the data section of your

410
00:21:55,080 --> 00:22:01,100
program but brawl 6 doesn't have this

411
00:22:01,100 --> 00:22:07,050
data file handle instead this is

412
00:22:07,050 --> 00:22:09,090
integrated into pot so we have the

413
00:22:09,090 --> 00:22:11,670
finish part command which just tells it

414
00:22:11,670 --> 00:22:14,880
you are pro 6 stops here the rest is

415
00:22:14,880 --> 00:22:17,240
yeah data

416
00:22:17,240 --> 00:22:20,350
now as I have a little extra time I can

417
00:22:20,350 --> 00:22:22,880
do a little Side Story this does not

418
00:22:22,880 --> 00:22:28,159
work yet but just a question to the

419
00:22:28,159 --> 00:22:31,190
audience how would you implement this in

420
00:22:31,190 --> 00:22:34,010
pro 5 you have this magic data file

421
00:22:34,010 --> 00:22:38,690
handle and April 6 we have well apart

422
00:22:38,690 --> 00:22:46,909
command any ideas well my first thought

423
00:22:46,909 --> 00:22:50,350
would be yes ok we we probably have to

424
00:22:50,350 --> 00:22:53,600
create this file handle probably give it

425
00:22:53,600 --> 00:22:56,899
a memory buffer now the night and one of

426
00:22:56,899 --> 00:23:00,320
the nice things about Perl 6 is that we

427
00:23:00,320 --> 00:23:01,970
have lots and lots of introspection

428
00:23:01,970 --> 00:23:05,600
features so you can also actually very

429
00:23:05,600 --> 00:23:08,559
simply access all the parts in your

430
00:23:08,559 --> 00:23:11,870
program from within the program there

431
00:23:11,870 --> 00:23:16,940
are magic variables like dollar equals

432
00:23:16,940 --> 00:23:23,779
finish contains all this data we have to

433
00:23:23,779 --> 00:23:26,330
create a file handle backed by a string

434
00:23:26,330 --> 00:23:29,779
and we have a string so why I have not

435
00:23:29,779 --> 00:23:31,940
yet implemented this I hate showing

436
00:23:31,940 --> 00:23:34,340
things that don't work now it turns out

437
00:23:34,340 --> 00:23:37,659
the really tricky part is the timing

438
00:23:37,659 --> 00:23:42,380
because you have this usual use

439
00:23:42,380 --> 00:23:45,799
mojolicious light from 4/5 up there this

440
00:23:45,799 --> 00:23:49,279
is where motor alicia's is loaded from

441
00:23:49,279 --> 00:23:51,679
power five this is where all the the

442
00:23:51,679 --> 00:23:55,460
initialization code runs it's a big in

443
00:23:55,460 --> 00:23:58,279
time because uses a begin time construct

444
00:23:58,279 --> 00:24:02,210
the finish pod command has not even been

445
00:24:02,210 --> 00:24:07,279
parsed yet so I'm not sure where exactly

446
00:24:07,279 --> 00:24:10,580
to put it in the program flow if you

447
00:24:10,580 --> 00:24:12,789
have any of you have any idea about this

448
00:24:12,789 --> 00:24:16,299
I'd be glad

449
00:24:18,440 --> 00:24:22,110
so what'd you do to get around this is

450
00:24:22,110 --> 00:24:25,140
you put this in a proper template file

451
00:24:25,140 --> 00:24:27,330
which is what you should do anyway at

452
00:24:27,330 --> 00:24:29,190
least to get the proper syntax

453
00:24:29,190 --> 00:24:35,790
highlighting for his code when I

454
00:24:35,790 --> 00:24:38,130
prepared the example to show how to give

455
00:24:38,130 --> 00:24:40,890
a route a name I stumbled over another

456
00:24:40,890 --> 00:24:43,320
subtle difference between pro/5 and pro

457
00:24:43,320 --> 00:24:48,510
six in Perl 6 the fat comma operator I

458
00:24:48,510 --> 00:24:51,960
use up there it's it's not long it's no

459
00:24:51,960 --> 00:24:55,410
longer just a fancy way to spell a comma

460
00:24:55,410 --> 00:24:57,540
it's an operator that creates a pair

461
00:24:57,540 --> 00:25:00,900
object a pair is just a key in the value

462
00:25:00,900 --> 00:25:03,840
now if you change those fat commas you

463
00:25:03,840 --> 00:25:07,140
create a nested pair structure with a

464
00:25:07,140 --> 00:25:09,960
pair that has a another pair as a value

465
00:25:09,960 --> 00:25:12,930
and mojolicious gets quite confused if

466
00:25:12,930 --> 00:25:16,380
it sees that so instead of having

467
00:25:16,380 --> 00:25:19,980
another fat comma there just because it

468
00:25:19,980 --> 00:25:23,600
looks pretty just use the comma

469
00:25:25,320 --> 00:25:27,540
now this is the very first example that

470
00:25:27,540 --> 00:25:30,390
really really doesn't work because right

471
00:25:30,390 --> 00:25:32,580
now it's unfortunately impossible to

472
00:25:32,580 --> 00:25:36,420
pass a regular expression from Paul 6 to

473
00:25:36,420 --> 00:25:41,030
purl 5 I actually have a patch that

474
00:25:41,030 --> 00:25:44,160
implements the support just need to

475
00:25:44,160 --> 00:25:46,980
clean it up and finish it unfortunately

476
00:25:46,980 --> 00:25:49,620
it would still not be enough because

477
00:25:49,620 --> 00:25:51,900
what motor licious does is it takes this

478
00:25:51,900 --> 00:25:55,020
regular expression it stringify sit and

479
00:25:55,020 --> 00:25:57,660
then includes the string inside another

480
00:25:57,660 --> 00:25:59,990
regular expression for a dispatch and

481
00:25:59,990 --> 00:26:04,470
the way I implemented the support is to

482
00:26:04,470 --> 00:26:07,470
create a Perl 5 rag X that really just

483
00:26:07,470 --> 00:26:10,290
has a code block inside which can then

484
00:26:10,290 --> 00:26:12,660
delegate to repeal 6 records which tells

485
00:26:12,660 --> 00:26:15,570
it should you match or not and this code

486
00:26:15,570 --> 00:26:17,310
block of course does not stringify to

487
00:26:17,310 --> 00:26:21,930
anything sensible so I think there's way

488
00:26:21,930 --> 00:26:25,140
around it I've found ways around any of

489
00:26:25,140 --> 00:26:28,920
the problems I had so far but it's going

490
00:26:28,920 --> 00:26:31,550
to take some time

491
00:26:31,980 --> 00:26:34,200
what does work on the other hand is

492
00:26:34,200 --> 00:26:37,740
WebSockets and I just can't help but

493
00:26:37,740 --> 00:26:40,770
find this incredibly cool and if you

494
00:26:40,770 --> 00:26:42,900
look at this there's really nothing

495
00:26:42,900 --> 00:26:44,280
special you have to do it just works

496
00:26:44,280 --> 00:26:49,679
like this like documented now for

497
00:26:49,679 --> 00:26:51,510
something that looks a bit different

498
00:26:51,510 --> 00:26:54,270
than the last three frameworks catalyst

499
00:26:54,270 --> 00:26:56,580
is an interesting candidate catalyst

500
00:26:56,580 --> 00:26:59,460
puts a bit more pressure on you to stick

501
00:26:59,460 --> 00:27:02,490
to an MVC architecture it automatically

502
00:27:02,490 --> 00:27:05,610
loads your module view and controller

503
00:27:05,610 --> 00:27:08,640
modules and of course it expects us to

504
00:27:08,640 --> 00:27:12,240
be written in pro/5 it even goes a step

505
00:27:12,240 --> 00:27:14,549
further and generates the boilerplate

506
00:27:14,549 --> 00:27:18,540
code for you and this is code that we

507
00:27:18,540 --> 00:27:21,000
probably better leave just as it is so I

508
00:27:21,000 --> 00:27:24,000
won't miss waste much time on it the far

509
00:27:24,000 --> 00:27:26,220
more interesting question is how do we

510
00:27:26,220 --> 00:27:30,080
get our Perl 6 code into there

511
00:27:30,770 --> 00:27:33,740
the answers but clearing that the rest

512
00:27:33,740 --> 00:27:36,520
of the file is written in politics

513
00:27:36,520 --> 00:27:39,500
everything from the use v6 inland line

514
00:27:39,500 --> 00:27:43,100
up there is just plain old pearl six

515
00:27:43,100 --> 00:27:45,710
code we have an index method with

516
00:27:45,710 --> 00:27:48,740
appropriate catalyst attributes making

517
00:27:48,740 --> 00:27:51,740
the method a catalyst action of course

518
00:27:51,740 --> 00:27:54,470
we get past the context object and we

519
00:27:54,470 --> 00:28:00,559
can call methods on it and we can use

520
00:28:00,559 --> 00:28:02,920
the usual methods to get our job done

521
00:28:02,920 --> 00:28:06,400
this pretty much works out of the box

522
00:28:06,400 --> 00:28:09,110
except for the catalyst attributes and

523
00:28:09,110 --> 00:28:11,210
it was quite super surprised that

524
00:28:11,210 --> 00:28:13,760
Stephen little did not come up with this

525
00:28:13,760 --> 00:28:16,250
example for attribute because it's it's

526
00:28:16,250 --> 00:28:17,840
the place where I've seen it them used

527
00:28:17,840 --> 00:28:22,730
most but okay like you said in proud six

528
00:28:22,730 --> 00:28:25,670
we don't have subroutine attributes we

529
00:28:25,670 --> 00:28:30,380
have traits instead not traits can for

530
00:28:30,380 --> 00:28:33,350
example be a convenient way to add a

531
00:28:33,350 --> 00:28:36,620
role to a method object because even

532
00:28:36,620 --> 00:28:38,780
methods like code blocks and everything

533
00:28:38,780 --> 00:28:41,059
else are really proper objects in pro

534
00:28:41,059 --> 00:28:45,650
six for a catalyst action we want to mix

535
00:28:45,650 --> 00:28:49,790
in the Perl the inline pro five pro five

536
00:28:49,790 --> 00:28:53,260
attributes role because a socket naming

537
00:28:53,260 --> 00:28:55,610
because a socket naming this role

538
00:28:55,610 --> 00:28:59,179
provides and attributes attributes which

539
00:28:59,179 --> 00:29:02,870
is just a list of attributes to apply to

540
00:29:02,870 --> 00:29:06,470
the pro five wrapper that gets generated

541
00:29:06,470 --> 00:29:10,990
for England for six methods

542
00:29:11,290 --> 00:29:13,970
now this little helper method the

543
00:29:13,970 --> 00:29:16,250
catalyst Expo six component Pro five

544
00:29:16,250 --> 00:29:20,780
attributes contains two more trade mode

545
00:29:20,780 --> 00:29:23,480
functions for supporting the arcs and

546
00:29:23,480 --> 00:29:26,060
action class attributes but they look

547
00:29:26,060 --> 00:29:28,300
pretty much exactly like this curve so

548
00:29:28,300 --> 00:29:31,430
that's it and this is really all you

549
00:29:31,430 --> 00:29:34,220
should have to know and use to be able

550
00:29:34,220 --> 00:29:37,570
to use catalyst in April six project

551
00:29:37,570 --> 00:29:42,590
which is quite cool and now I know

552
00:29:42,590 --> 00:29:45,320
what's been bothering me about the

553
00:29:45,320 --> 00:29:48,440
sentence that haunted us so far it just

554
00:29:48,440 --> 00:29:52,520
takes two really tiny changes for me to

555
00:29:52,520 --> 00:29:56,110
be able to make peace with it because

556
00:29:56,110 --> 00:29:59,030
even though it's certainly fun building

557
00:29:59,030 --> 00:30:01,640
a new web framework I sometimes just

558
00:30:01,640 --> 00:30:04,820
need the reliable tools I know and I'm

559
00:30:04,820 --> 00:30:07,400
so familiar with and luckily they're

560
00:30:07,400 --> 00:30:11,060
still there for me now a question with

561
00:30:11,060 --> 00:30:14,930
which I haven't touched yet is why would

562
00:30:14,930 --> 00:30:18,410
I want to why would I want to leave the

563
00:30:18,410 --> 00:30:21,170
familiar territory and venture forth

564
00:30:21,170 --> 00:30:24,260
into the unknown well for some the

565
00:30:24,260 --> 00:30:27,260
answer would be exactly because that's

566
00:30:27,260 --> 00:30:31,420
what I want to do I want to explore well

567
00:30:31,420 --> 00:30:33,560
some will be attracted by the

568
00:30:33,560 --> 00:30:36,560
opportunity to to carve out a name for

569
00:30:36,560 --> 00:30:39,050
yourself to become the sebastian riddle

570
00:30:39,050 --> 00:30:43,280
for april six world others will simply

571
00:30:43,280 --> 00:30:45,580
feel that paul six as a language is

572
00:30:45,580 --> 00:30:49,400
incredibly well-suited for web tasks for

573
00:30:49,400 --> 00:30:52,280
example thanks to emoticons unicode is

574
00:30:52,280 --> 00:30:54,830
huge right now and paul six is at the

575
00:30:54,830 --> 00:30:58,190
forefront of unicode and of course

576
00:30:58,190 --> 00:31:00,550
having

577
00:31:01,640 --> 00:31:05,280
having the granule type support called

578
00:31:05,280 --> 00:31:09,660
six covers a sweet spot between type

579
00:31:09,660 --> 00:31:12,780
support that catches so many stupid

580
00:31:12,780 --> 00:31:17,850
errors we all make but not too much

581
00:31:17,850 --> 00:31:19,710
types of water it would get in a way

582
00:31:19,710 --> 00:31:21,990
like I experienced with Java and web

583
00:31:21,990 --> 00:31:25,440
development which sucks and of course

584
00:31:25,440 --> 00:31:26,400
having good

585
00:31:26,400 --> 00:31:28,830
parallelism and concurrency support in

586
00:31:28,830 --> 00:31:32,340
the language lets us finally move into

587
00:31:32,340 --> 00:31:34,710
this day and age regarding the use of

588
00:31:34,710 --> 00:31:38,250
our computing power so while the

589
00:31:38,250 --> 00:31:41,070
solutions I've shown you today will not

590
00:31:41,070 --> 00:31:43,590
get you there immediately there will be

591
00:31:43,590 --> 00:31:47,600
a good first step into that direction

592
00:31:47,600 --> 00:32:02,870
thank you any questions please

593
00:32:09,779 --> 00:32:12,250
there's at least one question that I'm

594
00:32:12,250 --> 00:32:16,559
extremely surprised that does not come

595
00:32:17,220 --> 00:32:21,220
France ah that the name rings a bell but

596
00:32:21,220 --> 00:32:24,539
it must be so old

597
00:32:27,809 --> 00:32:32,830
yeah I haven't seen him talk about it

598
00:32:32,830 --> 00:32:36,159
for quite a while so probably somewhere

599
00:32:36,159 --> 00:32:42,700
out there I just want to have to let

600
00:32:42,700 --> 00:32:46,899
maybe this one I want to know yeah

601
00:32:46,899 --> 00:32:49,289
that's great

602
00:32:51,200 --> 00:32:53,830
maybe maybe you could place the hole at

603
00:32:53,830 --> 00:32:57,320
yeah I can certainly do yeah

604
00:32:57,320 --> 00:32:59,150
the question I'm surprised that I've not

605
00:32:59,150 --> 00:33:01,670
heard is I've shown some performance

606
00:33:01,670 --> 00:33:09,770
statistics somewhere yeah we have

607
00:33:09,770 --> 00:33:14,480
density to via Perl 6 and Bella door but

608
00:33:14,480 --> 00:33:16,430
how does it compare to the original

609
00:33:16,430 --> 00:33:21,170
dancer Improv 5 the reason why I haven't

610
00:33:21,170 --> 00:33:23,000
put it up in the slide is that I don't

611
00:33:23,000 --> 00:33:25,220
have the exact numbers anymore somehow

612
00:33:25,220 --> 00:33:26,570
forgot to write them down

613
00:33:26,570 --> 00:33:31,040
but I seem to remember that the Perl 6

614
00:33:31,040 --> 00:33:34,760
ish version is about 4.7 times slower

615
00:33:34,760 --> 00:33:37,760
than the original pro 5 version which

616
00:33:37,760 --> 00:33:40,250
sounds like a lot but on the other hand

617
00:33:40,250 --> 00:33:43,160
1 or 2 milliseconds per page render is

618
00:33:43,160 --> 00:33:48,350
not that bad and the example is is very

619
00:33:48,350 --> 00:33:53,230
small and we're measuring probably

620
00:33:53,230 --> 00:33:57,320
almost only the overheads and in a

621
00:33:57,320 --> 00:33:59,120
normal web application you would do much

622
00:33:59,120 --> 00:34:01,280
more than just do a single database

623
00:34:01,280 --> 00:34:04,940
query with two results and render them

624
00:34:04,940 --> 00:34:09,620
in a trivial way so I guess four point

625
00:34:09,620 --> 00:34:12,320
seven times slowdown is is the upper

626
00:34:12,320 --> 00:34:14,960
boundary of what you would see but

627
00:34:14,960 --> 00:34:16,760
someone will have to write a larger

628
00:34:16,760 --> 00:34:20,679
application so we know it

629
00:34:22,179 --> 00:34:24,869
yes

630
00:34:25,790 --> 00:34:29,168
well that's a good question

631
00:34:29,980 --> 00:34:33,060
and yet a question

632
00:34:33,060 --> 00:34:37,130
and we may have a short break thank you

633
00:34:37,130 --> 00:34:45,559
[Applause]

