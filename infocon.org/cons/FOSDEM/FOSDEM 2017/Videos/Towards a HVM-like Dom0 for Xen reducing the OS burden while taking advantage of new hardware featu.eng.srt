1
00:00:00,030 --> 00:00:02,420
the way

2
00:00:04,490 --> 00:00:06,649
a session of the evening this will be a

3
00:00:06,649 --> 00:00:09,530
full 25 minute session so it's gonna go

4
00:00:09,530 --> 00:00:12,889
a little past 1900 hours

5
00:00:12,889 --> 00:00:16,669
I'm please introduce Roger Powell from

6
00:00:16,669 --> 00:00:20,810
Citrix we will be talking about things

7
00:00:20,810 --> 00:00:23,710
in the sub-project

8
00:00:23,710 --> 00:00:27,650
hi my name is Roger I work for Citrix

9
00:00:27,650 --> 00:00:29,960
and the open sources and project mostly

10
00:00:29,960 --> 00:00:33,199
I'm also FreeBSD developer and I also do

11
00:00:33,199 --> 00:00:34,879
a little bit of lean hogs and qmo work

12
00:00:34,879 --> 00:00:37,940
when needed but recently my main focus

13
00:00:37,940 --> 00:00:39,920
has been then and I've been working on

14
00:00:39,920 --> 00:00:43,430
something that we call pv8 which is a

15
00:00:43,430 --> 00:00:45,019
new birth or detection mode for them

16
00:00:45,019 --> 00:00:47,809
that we plan to use for both guest and

17
00:00:47,809 --> 00:00:50,629
host and I'm here today to introduce the

18
00:00:50,629 --> 00:00:54,140
differences between PB and PVH dom0 and

19
00:00:54,140 --> 00:00:56,659
how that is going to change the gennaker

20
00:00:56,659 --> 00:01:00,140
system I usually start with a brief

21
00:01:00,140 --> 00:01:06,380
description of typical Xen domain yeah

22
00:01:06,380 --> 00:01:10,159
what in any case here we have the

23
00:01:10,159 --> 00:01:11,899
hardware that contains the CPU the

24
00:01:11,899 --> 00:01:13,640
memory management you need all your PC

25
00:01:13,640 --> 00:01:17,149
devices everything it's right there then

26
00:01:17,149 --> 00:01:19,670
we have Xen on top of that hardware then

27
00:01:19,670 --> 00:01:21,770
basically that's control over the CPU

28
00:01:21,770 --> 00:01:24,859
the MMI you some timers the local air

29
00:01:24,859 --> 00:01:27,310
peaks and as mostly all it doesn't have

30
00:01:27,310 --> 00:01:30,140
drivers for PC devices it doesn't have

31
00:01:30,140 --> 00:01:32,149
drivers for anything else basically for

32
00:01:32,149 --> 00:01:34,429
your DS it doesn't have any of those

33
00:01:34,429 --> 00:01:36,469
drivers all those drivers are inside of

34
00:01:36,469 --> 00:01:38,539
what we call the control domain that the

35
00:01:38,539 --> 00:01:41,509
first case that's launched by Zen and it

36
00:01:41,509 --> 00:01:44,090
can either be Linux FreeBSD or net BSD

37
00:01:44,090 --> 00:01:48,079
basically and usually inside of that

38
00:01:48,079 --> 00:01:49,759
domain we have all the driver for the

39
00:01:49,759 --> 00:01:51,560
different devices on the system the PC

40
00:01:51,560 --> 00:01:54,219
devices the network cards the DS

41
00:01:54,219 --> 00:01:56,149
everything is usually inside of the

42
00:01:56,149 --> 00:01:58,310
control domain and then on top of the

43
00:01:58,310 --> 00:02:00,709
control domain I put some tasks that you

44
00:02:00,709 --> 00:02:02,539
usually have running on your control

45
00:02:02,539 --> 00:02:05,509
domain like syslog next term X or get

46
00:02:05,509 --> 00:02:08,690
whatever you want and here I find it to

47
00:02:08,690 --> 00:02:11,630
guest also as we can see in this picture

48
00:02:11,630 --> 00:02:14,660
the guest inside of Zen are on par with

49
00:02:14,660 --> 00:02:16,220
the control domain there's more

50
00:02:16,220 --> 00:02:18,830
share the same interface and even even

51
00:02:18,830 --> 00:02:20,720
the control domain exhaust a gas from

52
00:02:20,720 --> 00:02:24,620
the end point of view here on the other

53
00:02:24,620 --> 00:02:28,040
hand I have description of what would

54
00:02:28,040 --> 00:02:30,140
usually be a type 2 hypervisor that

55
00:02:30,140 --> 00:02:34,100
would be kbm b5 beautiful box all those

56
00:02:34,100 --> 00:02:35,900
type 2 hypervisors share more or less

57
00:02:35,900 --> 00:02:37,970
the same design which means that you

58
00:02:37,970 --> 00:02:40,280
have the hardware and then on top of the

59
00:02:40,280 --> 00:02:42,350
hardware you have your operating system

60
00:02:42,350 --> 00:02:45,050
either Linux or Windows or Mac OS or

61
00:02:45,050 --> 00:02:46,850
whatever and then there's a small model

62
00:02:46,850 --> 00:02:49,160
inside of your operating system that's

63
00:02:49,160 --> 00:02:50,600
the hypervisor that takes care of

64
00:02:50,600 --> 00:02:52,490
controlling the hypervisor functions on

65
00:02:52,490 --> 00:02:56,300
the CPU and here for example we can see

66
00:02:56,300 --> 00:02:59,210
that we have some tasks on you what

67
00:02:59,210 --> 00:03:01,010
would be your host your operating system

68
00:03:01,010 --> 00:03:02,660
we have where I place the same task

69
00:03:02,660 --> 00:03:04,660
basically and we also have some guest

70
00:03:04,660 --> 00:03:07,010
and I would like to notice the different

71
00:03:07,010 --> 00:03:08,840
from the picture before because here we

72
00:03:08,840 --> 00:03:13,700
can see that the guest share the same

73
00:03:13,700 --> 00:03:15,770
scheduler for example with the

74
00:03:15,770 --> 00:03:17,240
applications that are running on the

75
00:03:17,240 --> 00:03:18,710
host OS that's not something that

76
00:03:18,710 --> 00:03:21,140
happens with type 1 hypervisor because

77
00:03:21,140 --> 00:03:23,180
it's completely isolated and a scheduler

78
00:03:23,180 --> 00:03:25,550
it's only designed to run VMs not to run

79
00:03:25,550 --> 00:03:28,040
tasks and here we can see that the

80
00:03:28,040 --> 00:03:30,620
guests actually compete for resources

81
00:03:30,620 --> 00:03:32,989
with the tasks that you have running on

82
00:03:32,989 --> 00:03:37,760
your host so yeah now I would like to

83
00:03:37,760 --> 00:03:39,830
speak a little bit about the current on

84
00:03:39,830 --> 00:03:41,930
0 interface and the limitations that we

85
00:03:41,930 --> 00:03:43,700
have with that interface this interface

86
00:03:43,700 --> 00:03:45,920
was designed a very long time ago in the

87
00:03:45,920 --> 00:03:49,430
90s so it's well a little bit different

88
00:03:49,430 --> 00:03:51,550
from what we would do it now we've been

89
00:03:51,550 --> 00:03:54,920
using that interface for a long time but

90
00:03:54,920 --> 00:03:57,530
we reach the point where I think we need

91
00:03:57,530 --> 00:03:58,910
a change and we need to improve the

92
00:03:58,910 --> 00:04:00,440
interface that we provide to them zero

93
00:04:00,440 --> 00:04:05,840
in order to make it easier so one of the

94
00:04:05,840 --> 00:04:07,880
key difference of the Zen interface is

95
00:04:07,880 --> 00:04:10,790
that when then was designed there was no

96
00:04:10,790 --> 00:04:12,530
hard visualization extensions which

97
00:04:12,530 --> 00:04:14,209
means that you could not built arise the

98
00:04:14,209 --> 00:04:16,100
CPU you didn't have any support from the

99
00:04:16,100 --> 00:04:17,988
CPU in order to do virtualization that

100
00:04:17,988 --> 00:04:21,410
means that when Zen tree takes over the

101
00:04:21,410 --> 00:04:23,660
memory management unit we have to

102
00:04:23,660 --> 00:04:26,030
provide a different interface for oasis

103
00:04:26,030 --> 00:04:26,720
in order to

104
00:04:26,720 --> 00:04:29,690
with that memory management you need so

105
00:04:29,690 --> 00:04:31,460
that one thing that we Ferren on Jen and

106
00:04:31,460 --> 00:04:33,650
it's very intrusive because all the

107
00:04:33,650 --> 00:04:35,840
architectures have only one interface to

108
00:04:35,840 --> 00:04:37,970
the memory management unit and then was

109
00:04:37,970 --> 00:04:39,920
basically introducing another interface

110
00:04:39,920 --> 00:04:41,600
to the memory management unit or needs

111
00:04:41,600 --> 00:04:44,590
86 that's something that doesn't happen

112
00:04:44,590 --> 00:04:48,170
anywhere so it was very intrusive in in

113
00:04:48,170 --> 00:04:50,030
the terms of the modification that you

114
00:04:50,030 --> 00:04:52,070
need to perform to the operating system

115
00:04:52,070 --> 00:04:54,980
that want to run on top of sin the CPU

116
00:04:54,980 --> 00:04:56,840
handling is done also completely

117
00:04:56,840 --> 00:04:59,060
different the SID the setup and the

118
00:04:59,060 --> 00:05:00,620
divide and the delivery of interrupts

119
00:05:00,620 --> 00:05:02,720
it's also very very different from bare

120
00:05:02,720 --> 00:05:05,210
metal that's mainly because on PV guests

121
00:05:05,210 --> 00:05:07,340
on the corundum 0 interface we don't

122
00:05:07,340 --> 00:05:09,860
provide a local ethic to the dom 0 so

123
00:05:09,860 --> 00:05:11,510
basically we have to use another way to

124
00:05:11,510 --> 00:05:14,690
deliver interrupts and finally the ACPI

125
00:05:14,690 --> 00:05:18,680
tables are also quite different well not

126
00:05:18,680 --> 00:05:20,630
really different but the tables that we

127
00:05:20,630 --> 00:05:23,740
provide to them zero are not very good

128
00:05:23,740 --> 00:05:26,660
in regards of the actual description of

129
00:05:26,660 --> 00:05:28,520
the system I will go a little bit into

130
00:05:28,520 --> 00:05:33,080
this so yeah as I said before the MMI U

131
00:05:33,080 --> 00:05:36,140
is different on on PBS because basically

132
00:05:36,140 --> 00:05:37,820
we'd have to provide a set of hyper

133
00:05:37,820 --> 00:05:39,500
codes that the guests can use in order

134
00:05:39,500 --> 00:05:41,000
to interact with the memory management

135
00:05:41,000 --> 00:05:43,190
unit and that's different from what's

136
00:05:43,190 --> 00:05:44,930
done on bare metal that you just have

137
00:05:44,930 --> 00:05:47,090
certain instructions that are used in

138
00:05:47,090 --> 00:05:49,040
order to interact with the memory

139
00:05:49,040 --> 00:05:51,290
management unit this code as I said is

140
00:05:51,290 --> 00:05:53,210
very intrusive because you have to

141
00:05:53,210 --> 00:05:55,520
modify core parts of the OS in order to

142
00:05:55,520 --> 00:05:57,260
introduce all this sin

143
00:05:57,260 --> 00:06:00,440
specific code it's also limited to 4 KB

144
00:06:00,440 --> 00:06:02,510
basis only you cannot use 2 megabyte

145
00:06:02,510 --> 00:06:05,660
basis or gigabyte basis so that's quite

146
00:06:05,660 --> 00:06:07,490
a problem related to performance

147
00:06:07,490 --> 00:06:10,370
especially now that we have systems with

148
00:06:10,370 --> 00:06:13,490
a lot of memory and it involves using

149
00:06:13,490 --> 00:06:14,960
hyper curves in order to set up your

150
00:06:14,960 --> 00:06:16,730
page table so it means that every time

151
00:06:16,730 --> 00:06:19,190
you want to do a fork of a task or

152
00:06:19,190 --> 00:06:20,360
something like that you have to each

153
00:06:20,360 --> 00:06:22,010
raipur goes to the hypervisor and the

154
00:06:22,010 --> 00:06:23,930
hypervisor has to create the page tables

155
00:06:23,930 --> 00:06:27,140
for you and it's very intrusive and

156
00:06:27,140 --> 00:06:31,010
finally also PBS cannot use what's

157
00:06:31,010 --> 00:06:32,870
called privileged instructions so they

158
00:06:32,870 --> 00:06:34,820
have to resort to the hypervisor in

159
00:06:34,820 --> 00:06:35,200
order

160
00:06:35,200 --> 00:06:37,000
execute them on behalf of the guests

161
00:06:37,000 --> 00:06:39,960
it's all saying about using higher goals

162
00:06:39,960 --> 00:06:43,080
then related to CPU handling there are

163
00:06:43,080 --> 00:06:45,810
quite a lot of things that are different

164
00:06:45,810 --> 00:06:48,340
comparing Xen to bare metal on bare

165
00:06:48,340 --> 00:06:52,540
metal the boot time CPU discoveries Don

166
00:06:52,540 --> 00:06:55,120
using a table on a CPI that's called M

167
00:06:55,120 --> 00:06:58,330
ADT on P biggest it's done using hyper

168
00:06:58,330 --> 00:07:00,640
calls it means that you have to modify

169
00:07:00,640 --> 00:07:03,160
the boot coat of the very early coat of

170
00:07:03,160 --> 00:07:04,840
an OS in order to use Hyper codes

171
00:07:04,840 --> 00:07:07,180
instead of a CPI in order to discover

172
00:07:07,180 --> 00:07:08,950
the CPUs and again this is very

173
00:07:08,950 --> 00:07:11,530
intrusive also the bring up of the

174
00:07:11,530 --> 00:07:13,630
secondary CPUs or native it's done using

175
00:07:13,630 --> 00:07:16,540
the local epoch you have to send a set

176
00:07:16,540 --> 00:07:18,550
of ApS in order to wake up secondary

177
00:07:18,550 --> 00:07:21,160
CPUs and on P weeds Don using hyper

178
00:07:21,160 --> 00:07:26,140
calls and also the hot plug of CPUs on

179
00:07:26,140 --> 00:07:27,700
native it's done using what's called

180
00:07:27,700 --> 00:07:29,560
Zener and general-purpose

181
00:07:29,560 --> 00:07:31,870
urban block that's something that came

182
00:07:31,870 --> 00:07:34,900
from a CPI and something that's also

183
00:07:34,900 --> 00:07:36,670
part of a CPI that are the processor

184
00:07:36,670 --> 00:07:38,590
objects so you basically receive and

185
00:07:38,590 --> 00:07:41,110
even from a CPI and then you scan well

186
00:07:41,110 --> 00:07:44,590
you scan your processor objects and the

187
00:07:44,590 --> 00:07:47,830
tag done new objects are online again

188
00:07:47,830 --> 00:07:49,720
and then this is done completely

189
00:07:49,720 --> 00:07:51,070
different and we use something that's

190
00:07:51,070 --> 00:07:52,990
called Zen store which is like a

191
00:07:52,990 --> 00:07:54,790
database that share between the guest

192
00:07:54,790 --> 00:07:56,470
and Zen and it's used to pass

193
00:07:56,470 --> 00:07:58,210
information between the hypervisor and

194
00:07:58,210 --> 00:08:00,370
Zen and between different gas running on

195
00:08:00,370 --> 00:08:04,000
the same on the same system the setup

196
00:08:04,000 --> 00:08:05,500
and delivery of interrupts it's also

197
00:08:05,500 --> 00:08:08,800
quite different on native or native you

198
00:08:08,800 --> 00:08:10,720
basically receive all the interrupts

199
00:08:10,720 --> 00:08:12,610
from the local epoch and then the local

200
00:08:12,610 --> 00:08:14,560
IP context or interrupts into the CPU

201
00:08:14,560 --> 00:08:17,230
and are mainly two different kinds of

202
00:08:17,230 --> 00:08:20,050
interruption in 286 the ones are called

203
00:08:20,050 --> 00:08:22,720
legacy PCI interrupts those are

204
00:08:22,720 --> 00:08:25,030
implemented as sideband signals that go

205
00:08:25,030 --> 00:08:26,830
into the local I pig and then the local

206
00:08:26,830 --> 00:08:29,260
I pick inject them into the sorry going

207
00:08:29,260 --> 00:08:31,990
to die or a peak and a peak injects them

208
00:08:31,990 --> 00:08:34,299
into the local epoch and we also have a

209
00:08:34,299 --> 00:08:36,340
newer kind of interrupts that's called

210
00:08:36,340 --> 00:08:38,650
MSI or MSI X that are implemented using

211
00:08:38,650 --> 00:08:40,840
in band signals and are delivered

212
00:08:40,840 --> 00:08:43,059
directly to the local epoch this is what

213
00:08:43,059 --> 00:08:44,610
done by programming

214
00:08:44,610 --> 00:08:47,640
certain others at your on your pc device

215
00:08:47,640 --> 00:08:50,070
and the pc a device we will write to

216
00:08:50,070 --> 00:08:51,570
this address when it has to trigger an

217
00:08:51,570 --> 00:08:53,579
interrupt and this address is trapped by

218
00:08:53,579 --> 00:08:55,410
the local epic and it injects the inter

219
00:08:55,410 --> 00:08:58,500
up into the cpu the configuration of

220
00:08:58,500 --> 00:09:01,019
interrupts on it on PC systems it's also

221
00:09:01,019 --> 00:09:03,149
done from the PC configuration space

222
00:09:03,149 --> 00:09:05,850
which is a set of i/o ports that you use

223
00:09:05,850 --> 00:09:07,649
in order to interact with your devices

224
00:09:07,649 --> 00:09:10,649
or a memory area that you also use in

225
00:09:10,649 --> 00:09:13,850
order to interact with those devices and

226
00:09:13,850 --> 00:09:16,560
on P V this is quite different because

227
00:09:16,560 --> 00:09:18,779
as I said before P we don't have any

228
00:09:18,779 --> 00:09:21,660
kind of AP so basically we cannot inject

229
00:09:21,660 --> 00:09:24,959
interrupts using a peek at all and we

230
00:09:24,959 --> 00:09:27,149
have to inject interrupts into the gas

231
00:09:27,149 --> 00:09:29,459
using another mechanism that's called a

232
00:09:29,459 --> 00:09:31,380
vent channels the vent channels are

233
00:09:31,380 --> 00:09:33,180
something specific to then are called

234
00:09:33,180 --> 00:09:34,800
the paravirtualized interface that's

235
00:09:34,800 --> 00:09:37,050
used by then in order to inject event

236
00:09:37,050 --> 00:09:40,339
into the guest this again implies

237
00:09:40,339 --> 00:09:42,510
modifying quite a lot of the code in

238
00:09:42,510 --> 00:09:44,550
guest oasis in order to be able to

239
00:09:44,550 --> 00:09:48,420
implement this new interrupt interface

240
00:09:48,420 --> 00:09:51,120
that's only used by them and this also

241
00:09:51,120 --> 00:09:53,329
has the problem that it creates a lot of

242
00:09:53,329 --> 00:09:56,430
maintainer ship burden inside of Oasis

243
00:09:56,430 --> 00:09:57,870
because you have to introduce a lot of

244
00:09:57,870 --> 00:09:59,399
code and you also have to maintain this

245
00:09:59,399 --> 00:10:01,680
code and to be honest this code is quite

246
00:10:01,680 --> 00:10:03,420
critical I mean the interrupt paths are

247
00:10:03,420 --> 00:10:04,800
not something that you really want to be

248
00:10:04,800 --> 00:10:08,459
modifying in any ways and finally as we

249
00:10:08,459 --> 00:10:11,070
don't have any related PC configuration

250
00:10:11,070 --> 00:10:13,110
space on PV guys we also have to set up

251
00:10:13,110 --> 00:10:15,630
interrupts using hyper curves which

252
00:10:15,630 --> 00:10:17,519
means that well this whole interface

253
00:10:17,519 --> 00:10:19,380
it's very different from negative and

254
00:10:19,380 --> 00:10:22,980
it's not a trivial amount of code so

255
00:10:22,980 --> 00:10:24,660
here I have the picture of what would be

256
00:10:24,660 --> 00:10:27,600
an interrupt injection to a PV guess you

257
00:10:27,600 --> 00:10:30,480
have your physical device these injects

258
00:10:30,480 --> 00:10:32,610
interrupts into the epic that's the

259
00:10:32,610 --> 00:10:34,199
physical attic and that's controlled by

260
00:10:34,199 --> 00:10:37,050
then then received that this interrupts

261
00:10:37,050 --> 00:10:38,730
and injects the Interop into the gas

262
00:10:38,730 --> 00:10:41,519
using Devon channels and I guess finally

263
00:10:41,519 --> 00:10:44,630
receives the interrupts

264
00:10:45,940 --> 00:10:48,130
and finally one of the things that dudes

265
00:10:48,130 --> 00:10:49,750
also different on a pivot on zero

266
00:10:49,750 --> 00:10:51,460
compared to where metal is the ACPI

267
00:10:51,460 --> 00:10:53,800
tables i would like to speak a little

268
00:10:53,800 --> 00:10:55,810
bit before about the ACPI tables there

269
00:10:55,810 --> 00:10:57,520
are mainly two different kinds of ACPI

270
00:10:57,520 --> 00:10:59,380
tables one of them are called the static

271
00:10:59,380 --> 00:11:01,930
tables that are used on boot and are

272
00:11:01,930 --> 00:11:04,000
very simple tables the memory that can

273
00:11:04,000 --> 00:11:06,370
be mapped to a seer structure so they

274
00:11:06,370 --> 00:11:08,260
don't contain anything very complicated

275
00:11:08,260 --> 00:11:11,080
it's just a static information that you

276
00:11:11,080 --> 00:11:13,360
can use during boot they are very easy

277
00:11:13,360 --> 00:11:15,010
to parse they are very easy to modify

278
00:11:15,010 --> 00:11:16,930
they don't contain anything weird in

279
00:11:16,930 --> 00:11:19,510
general but these tables are only meant

280
00:11:19,510 --> 00:11:21,610
to be used for very early boot

281
00:11:21,610 --> 00:11:24,310
information and most of the real

282
00:11:24,310 --> 00:11:26,440
information on an ACPI system it's

283
00:11:26,440 --> 00:11:28,510
provided using what's called dynamic

284
00:11:28,510 --> 00:11:32,130
tables these tables are written in

285
00:11:32,130 --> 00:11:34,870
language that's called a CPI matching

286
00:11:34,870 --> 00:11:37,930
language this language requires you to

287
00:11:37,930 --> 00:11:39,760
have a parts that inside of the kernel

288
00:11:39,760 --> 00:11:41,830
in order to be able to discover these

289
00:11:41,830 --> 00:11:43,930
tables and on these tables you actually

290
00:11:43,930 --> 00:11:46,840
find also a static information about

291
00:11:46,840 --> 00:11:49,990
devices but they also contain methods

292
00:11:49,990 --> 00:11:52,090
that you can actually execute so there

293
00:11:52,090 --> 00:11:56,470
are a little bit more complex and this

294
00:11:56,470 --> 00:11:58,840
is where for example on this dynamic

295
00:11:58,840 --> 00:12:00,670
tables is where you find the information

296
00:12:00,670 --> 00:12:03,880
about all your PC devices so most of the

297
00:12:03,880 --> 00:12:05,560
information on the system actually came

298
00:12:05,560 --> 00:12:08,500
from these tables and one of the

299
00:12:08,500 --> 00:12:10,840
problems is that on a traditional TV

300
00:12:10,840 --> 00:12:13,990
dome giro all these tables are passed as

301
00:12:13,990 --> 00:12:16,720
is to the gas which means that the

302
00:12:16,720 --> 00:12:18,640
information received by them zero it's

303
00:12:18,640 --> 00:12:21,460
not the information that it should have

304
00:12:21,460 --> 00:12:23,080
received for example you can limit them

305
00:12:23,080 --> 00:12:26,200
0 to 2 CPUs but if it reads if it looks

306
00:12:26,200 --> 00:12:27,940
at the CPI tables and the hardware

307
00:12:27,940 --> 00:12:31,780
system has 16 CPUs people think that it

308
00:12:31,780 --> 00:12:34,390
has 16 CPUs because we simply don't fix

309
00:12:34,390 --> 00:12:37,030
that at all and we pass the tables as

310
00:12:37,030 --> 00:12:41,530
these to them 0 another of the problems

311
00:12:41,530 --> 00:12:43,540
with the ACPI tables is that then can

312
00:12:43,540 --> 00:12:45,400
only part information from the static

313
00:12:45,400 --> 00:12:47,620
ACPI tables because Enderson happening

314
00:12:47,620 --> 00:12:50,400
and AML parts are AML parsers are big or

315
00:12:50,400 --> 00:12:53,140
required quite a lot of code in general

316
00:12:53,140 --> 00:12:55,529
in order to implement so they never

317
00:12:55,529 --> 00:12:58,110
and but I don't know maybe that's going

318
00:12:58,110 --> 00:13:00,720
to change but at the moment it doesn't

319
00:13:00,720 --> 00:13:02,699
have an email parser so we can only

320
00:13:02,699 --> 00:13:04,290
fetch the information from the static

321
00:13:04,290 --> 00:13:06,689
tables but there's some information that

322
00:13:06,689 --> 00:13:09,240
requires by then in order to run that's

323
00:13:09,240 --> 00:13:12,329
inside of the dynamic table so the hot

324
00:13:12,329 --> 00:13:14,550
plug of physical CPUs the CPUC States

325
00:13:14,550 --> 00:13:16,740
and the sleeper states are inside of the

326
00:13:16,740 --> 00:13:18,629
dynamic tables and then needs that in

327
00:13:18,629 --> 00:13:20,759
order to work properly so there's an

328
00:13:20,759 --> 00:13:22,920
interface from dom0 in order to pass

329
00:13:22,920 --> 00:13:25,079
that information into them so basically

330
00:13:25,079 --> 00:13:26,879
the Miro has to parse the dynamic table

331
00:13:26,879 --> 00:13:29,249
to extract that information and tell

332
00:13:29,249 --> 00:13:31,620
that information to them this is also

333
00:13:31,620 --> 00:13:34,290
quite costly because it involves

334
00:13:34,290 --> 00:13:37,110
modifying native drivers in order to

335
00:13:37,110 --> 00:13:40,439
pass all this information to them and

336
00:13:40,439 --> 00:13:42,689
yeah as I said it will be possible for

337
00:13:42,689 --> 00:13:44,430
sent to fetch most of this information

338
00:13:44,430 --> 00:13:47,129
but that's one limitation on a CPI that

339
00:13:47,129 --> 00:13:49,680
only one operating system can execute

340
00:13:49,680 --> 00:13:54,059
method so we've then execute Jenny a CPI

341
00:13:54,059 --> 00:13:56,100
method it has to execute all of them and

342
00:13:56,100 --> 00:13:58,920
we don't really want to do that so it

343
00:13:58,920 --> 00:14:00,779
will be possible for anything to fit

344
00:14:00,779 --> 00:14:03,029
most of this information but it will

345
00:14:03,029 --> 00:14:04,920
still probably need some help from them

346
00:14:04,920 --> 00:14:10,199
zero in order to execute a CPI method so

347
00:14:10,199 --> 00:14:11,699
yeah this is more or less all the

348
00:14:11,699 --> 00:14:14,309
current limitations of PV dom0 or the

349
00:14:14,309 --> 00:14:15,899
more important ones and now would like

350
00:14:15,899 --> 00:14:18,360
to speak a little bit about how we are

351
00:14:18,360 --> 00:14:20,069
trying to move away from all this and

352
00:14:20,069 --> 00:14:23,279
provide a new interface to them zero the

353
00:14:23,279 --> 00:14:24,839
main points of these interfaces that we

354
00:14:24,839 --> 00:14:27,300
want it to be as close as possible to

355
00:14:27,300 --> 00:14:28,800
negative that's very important because

356
00:14:28,800 --> 00:14:30,329
it means that it's probably going to be

357
00:14:30,329 --> 00:14:35,610
faster and it's also it's also gonna

358
00:14:35,610 --> 00:14:37,410
reduce a lot of the code that we need to

359
00:14:37,410 --> 00:14:39,750
put inside of OSS in order to run on top

360
00:14:39,750 --> 00:14:42,029
of them if we have an interface that's

361
00:14:42,029 --> 00:14:43,439
very close to native it will mean that

362
00:14:43,439 --> 00:14:45,240
the code required in order to run on

363
00:14:45,240 --> 00:14:48,600
send it's gonna be much more laps we

364
00:14:48,600 --> 00:14:50,879
only want to use hyper calls when

365
00:14:50,879 --> 00:14:52,740
there's no other interface that we can

366
00:14:52,740 --> 00:14:54,660
use I mean I'm sure that we will have to

367
00:14:54,660 --> 00:14:56,009
use them from time to time it's not

368
00:14:56,009 --> 00:14:57,779
something that we can read it get rid of

369
00:14:57,779 --> 00:14:59,850
but we'll try to reduce

370
00:14:59,850 --> 00:15:01,529
much as possible the number of I per

371
00:15:01,529 --> 00:15:03,240
calls that we need that we need to use

372
00:15:03,240 --> 00:15:06,360
from them zero and finally we will also

373
00:15:06,360 --> 00:15:08,009
like to take advantage of all the new

374
00:15:08,009 --> 00:15:09,839
hardware virtualization extensions that

375
00:15:09,839 --> 00:15:13,079
came up on recent well not that mattress

376
00:15:13,079 --> 00:15:15,000
and Intel and AMD CPUs maybe they've

377
00:15:15,000 --> 00:15:19,310
been around for almost eight years now

378
00:15:19,310 --> 00:15:22,350
so yes so regarding the MMI you that's a

379
00:15:22,350 --> 00:15:24,029
very easy problem to solve because of

380
00:15:24,029 --> 00:15:27,420
newer CPUs you have what's called the

381
00:15:27,420 --> 00:15:28,980
hardware virtualization extensions on

382
00:15:28,980 --> 00:15:33,560
Intel that's BT X and Renee and the as

383
00:15:33,560 --> 00:15:35,699
sbmi thing or something like that and

384
00:15:35,699 --> 00:15:38,610
these utilization extensions basically

385
00:15:38,610 --> 00:15:40,110
allow you to create what's called a

386
00:15:40,110 --> 00:15:41,670
second stage translation which means

387
00:15:41,670 --> 00:15:43,319
that we can present a physical memory

388
00:15:43,319 --> 00:15:46,079
map to the guest that contains memory

389
00:15:46,079 --> 00:15:47,790
from different physical reasons we can

390
00:15:47,790 --> 00:15:50,279
create a page table and the gas would

391
00:15:50,279 --> 00:15:52,019
think that that page tables is their

392
00:15:52,019 --> 00:15:54,389
memory map so that makes it very easy

393
00:15:54,389 --> 00:15:57,149
for us to provide transparent

394
00:15:57,149 --> 00:16:01,560
integration also using these relation

395
00:16:01,560 --> 00:16:03,060
extensions we can also provide the

396
00:16:03,060 --> 00:16:05,490
guests with virtual memory management

397
00:16:05,490 --> 00:16:07,709
unit that's emulated by the hardware so

398
00:16:07,709 --> 00:16:10,069
we don't have to do anything there and

399
00:16:10,069 --> 00:16:13,470
this also allows us to use all the page

400
00:16:13,470 --> 00:16:15,209
tables that are supported by the harbor

401
00:16:15,209 --> 00:16:17,430
the different sizes like we can use one

402
00:16:17,430 --> 00:16:19,290
sick of eight pages with well if the gas

403
00:16:19,290 --> 00:16:21,240
wants to use one cigarette pages it can

404
00:16:21,240 --> 00:16:23,939
use them and basically we don't need to

405
00:16:23,939 --> 00:16:26,509
modify the guest in any way it's just

406
00:16:26,509 --> 00:16:28,860
transferring from the guest point of

407
00:16:28,860 --> 00:16:32,790
view interim management it's also quite

408
00:16:32,790 --> 00:16:35,100
important one of the things that we want

409
00:16:35,100 --> 00:16:36,870
to do with interim management is provide

410
00:16:36,870 --> 00:16:39,630
the gas dom0 with an emulated local IP

411
00:16:39,630 --> 00:16:42,000
can an emulated on a peak the local

412
00:16:42,000 --> 00:16:43,829
epics sometimes it's provided by harbor

413
00:16:43,829 --> 00:16:45,689
itself because there are newer hardware

414
00:16:45,689 --> 00:16:47,970
that's capable of emulating a local IP

415
00:16:47,970 --> 00:16:50,490
that something I don't remember the name

416
00:16:50,490 --> 00:16:52,019
I know there's inter hardware that has

417
00:16:52,019 --> 00:16:54,360
these and there's also AM the hardware

418
00:16:54,360 --> 00:16:56,370
that's going to came up later this year

419
00:16:56,370 --> 00:16:59,550
that will have this feature and you epic

420
00:16:59,550 --> 00:17:02,160
will be emulated inside of them and we

421
00:17:02,160 --> 00:17:03,630
will be using the same code that we

422
00:17:03,630 --> 00:17:05,689
already use for hvm gas so it's not

423
00:17:05,689 --> 00:17:07,519
reducing new code in two senators using

424
00:17:07,519 --> 00:17:09,638
the code that you have ready after and

425
00:17:09,638 --> 00:17:11,839
finally we would like the configuration

426
00:17:11,839 --> 00:17:13,638
of interrupts to be done using the PC

427
00:17:13,638 --> 00:17:15,439
configuration space so that means that

428
00:17:15,439 --> 00:17:17,179
we'll have to introduce some emulation

429
00:17:17,179 --> 00:17:20,299
code inside of then it's not gonna be a

430
00:17:20,299 --> 00:17:22,398
lot of code but we'll have to introduce

431
00:17:22,398 --> 00:17:24,679
something some traps for the PC

432
00:17:24,679 --> 00:17:26,509
configuration a space in order for scent

433
00:17:26,509 --> 00:17:28,189
detect that the guest is configuring

434
00:17:28,189 --> 00:17:32,450
interrupts and properly react to this so

435
00:17:32,450 --> 00:17:34,759
here we have another picture of what it

436
00:17:34,759 --> 00:17:37,250
will look like if we have a local epoch

437
00:17:37,250 --> 00:17:39,139
inside of then the interrupts from the

438
00:17:39,139 --> 00:17:41,179
physical devices would still usually be

439
00:17:41,179 --> 00:17:44,240
received by them on the physical IP and

440
00:17:44,240 --> 00:17:46,580
then then we'll inject them into the

441
00:17:46,580 --> 00:17:49,629
emulated local I pick on the guest or

442
00:17:49,629 --> 00:17:52,909
I've also added straight arrow from the

443
00:17:52,909 --> 00:17:54,529
device to the guest because it's dagger

444
00:17:54,529 --> 00:17:56,450
if the hardware support something that's

445
00:17:56,450 --> 00:17:58,820
called posted interrupts it's possible

446
00:17:58,820 --> 00:18:00,500
for a device to directly inject an

447
00:18:00,500 --> 00:18:02,750
interrupt into a VM that means that the

448
00:18:02,750 --> 00:18:04,610
latency would go down quite a lot

449
00:18:04,610 --> 00:18:06,230
because we don't have to go through send

450
00:18:06,230 --> 00:18:08,240
the interrupts will be injected directly

451
00:18:08,240 --> 00:18:13,129
into the VM and finally the problem with

452
00:18:13,129 --> 00:18:16,250
the ACPI tables it's well a little bit

453
00:18:16,250 --> 00:18:18,919
more tricky to work around but I think

454
00:18:18,919 --> 00:18:20,870
that we found a way in order to solve

455
00:18:20,870 --> 00:18:23,990
this first of all we will provide a new

456
00:18:23,990 --> 00:18:26,330
immediate e to the to Dom's ero that

457
00:18:26,330 --> 00:18:28,100
will actually reflect the topology of

458
00:18:28,100 --> 00:18:29,990
them zero that means that zero will see

459
00:18:29,990 --> 00:18:32,059
the number of CPUs that it can use it

460
00:18:32,059 --> 00:18:33,590
will not see the number of CPUs

461
00:18:33,590 --> 00:18:36,710
available and for Hardware then we will

462
00:18:36,710 --> 00:18:39,169
also provide an extra dynamic table for

463
00:18:39,169 --> 00:18:41,149
them zero that would contain processor

464
00:18:41,149 --> 00:18:43,070
objects for these CPUs

465
00:18:43,070 --> 00:18:45,289
this is needed in order to comply with

466
00:18:45,289 --> 00:18:47,840
the a CPI you expect because a CPI

467
00:18:47,840 --> 00:18:49,309
requires you to provide processor

468
00:18:49,309 --> 00:18:52,429
objects for the CPUs on the immediate e

469
00:18:52,429 --> 00:18:55,940
and finally we will hide the negative

470
00:18:55,940 --> 00:18:58,519
processor object from Tom zero using a

471
00:18:58,519 --> 00:18:59,539
table that's called

472
00:18:59,539 --> 00:19:03,289
style it means a status overwrite table

473
00:19:03,289 --> 00:19:05,269
and it can be used in order to hide

474
00:19:05,269 --> 00:19:08,179
devices on the a CPI namespace this

475
00:19:08,179 --> 00:19:10,100
table it's actually under same control

476
00:19:10,100 --> 00:19:12,500
so we can modify the version of this

477
00:19:12,500 --> 00:19:14,149
table and we can add new fields if we

478
00:19:14,149 --> 00:19:16,330
need to

479
00:19:17,010 --> 00:19:22,270
so yeah in yes a final note I think that

480
00:19:22,270 --> 00:19:25,390
we can manage to reduce a lot than a

481
00:19:25,390 --> 00:19:27,160
specific code inside of the several

482
00:19:27,160 --> 00:19:28,900
Oasis the special Linux has a lot of

483
00:19:28,900 --> 00:19:30,550
saying codes inside and we would like to

484
00:19:30,550 --> 00:19:33,250
get rid of that because it's a it quite

485
00:19:33,250 --> 00:19:35,260
hard to maintain it's very different

486
00:19:35,260 --> 00:19:39,070
from bare metal and it usually is well a

487
00:19:39,070 --> 00:19:41,650
cause of bugs in general because most of

488
00:19:41,650 --> 00:19:43,360
the 8086 maintainer don't really

489
00:19:43,360 --> 00:19:45,520
understand the same code they change any

490
00:19:45,520 --> 00:19:47,170
difficult and when they change the

491
00:19:47,170 --> 00:19:49,600
native code it breaks and so we would

492
00:19:49,600 --> 00:19:51,190
like to get rid of that it's easier for

493
00:19:51,190 --> 00:19:53,350
everyone will have less back to fix in

494
00:19:53,350 --> 00:19:54,850
Zen and it's going to be easier to

495
00:19:54,850 --> 00:19:56,260
maintain because we will get rid of all

496
00:19:56,260 --> 00:19:58,510
of this code will also be able to take

497
00:19:58,510 --> 00:19:59,770
advantage of all the hardware

498
00:19:59,770 --> 00:20:01,570
virtualization extensions on the market

499
00:20:01,570 --> 00:20:02,890
so that means that we can take advantage

500
00:20:02,890 --> 00:20:06,610
of all the newer hardware and also we

501
00:20:06,610 --> 00:20:08,800
will be able to simplify a lot than zero

502
00:20:08,800 --> 00:20:10,870
interface which means that we can expect

503
00:20:10,870 --> 00:20:13,390
maybe new Oasis to add support for

504
00:20:13,390 --> 00:20:15,190
running on top of them even as a dumb

505
00:20:15,190 --> 00:20:16,870
zero because the interface it's gonna be

506
00:20:16,870 --> 00:20:19,210
very very similar to bare metal so we

507
00:20:19,210 --> 00:20:21,220
expect that maybe someone is going to

508
00:20:21,220 --> 00:20:22,930
implement a new thumbs eros in the

509
00:20:22,930 --> 00:20:27,370
future yeah and that's all I would

510
00:20:27,370 --> 00:20:33,449
gladly take any questions now yeah

511
00:20:37,940 --> 00:20:40,889
we already have super forearm Oh

512
00:20:40,889 --> 00:20:43,859
the question was if there are plans for

513
00:20:43,859 --> 00:20:47,009
new architectures on zenab stream we

514
00:20:47,009 --> 00:20:49,710
already have super forearm 32 and 64

515
00:20:49,710 --> 00:20:56,789
bits oh well these new extensions are

516
00:20:56,789 --> 00:20:58,619
exactly six specific so they don't

517
00:20:58,619 --> 00:21:00,269
really apply to arm what I can tell you

518
00:21:00,269 --> 00:21:02,669
is the guys that is that arm already

519
00:21:02,669 --> 00:21:04,799
makes use of them because arm well the

520
00:21:04,799 --> 00:21:07,109
Xenon arm port was a started very late

521
00:21:07,109 --> 00:21:09,749
so it already makes use of all these new

522
00:21:09,749 --> 00:21:11,970
hardware extensions that are present on

523
00:21:11,970 --> 00:21:16,649
arm time regarding risk and other

524
00:21:16,649 --> 00:21:18,869
architectures are not aware of anyone

525
00:21:18,869 --> 00:21:22,859
working on that if somebody contributes

526
00:21:22,859 --> 00:21:24,539
the code time sure it will be very

527
00:21:24,539 --> 00:21:30,859
gladly received yeah

528
00:21:50,630 --> 00:21:53,929
the question is if you need a specific

529
00:21:53,929 --> 00:21:55,790
kernel for a beard or for a

530
00:21:55,790 --> 00:21:57,410
parameterised virtual machine the

531
00:21:57,410 --> 00:22:00,200
response is now starting from Linux 3.0

532
00:22:00,200 --> 00:22:02,090
while the same code is inside of Linux

533
00:22:02,090 --> 00:22:03,920
so you can just build a normal Linux

534
00:22:03,920 --> 00:22:05,780
kernel and it will have all the same

535
00:22:05,780 --> 00:22:09,380
support that was merged I think four

536
00:22:09,380 --> 00:22:19,070
years ago or five years ago so yeah so

537
00:22:19,070 --> 00:22:20,570
yeah I think that's all thank you very

538
00:22:20,570 --> 00:22:21,350
much

539
00:22:21,350 --> 00:22:26,560
[Applause]

