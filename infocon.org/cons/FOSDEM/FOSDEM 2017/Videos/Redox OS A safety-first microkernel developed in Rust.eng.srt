1
00:00:04,430 --> 00:00:08,660
as you know this is the microkernel and

2
00:00:08,660 --> 00:00:11,959
component-based architecture ich room so

3
00:00:11,959 --> 00:00:15,939
I'm going to talk about microkernel um

4
00:00:15,939 --> 00:00:18,320
can be expected I do not know everything

5
00:00:18,320 --> 00:00:20,570
about that microkernel so if you have

6
00:00:20,570 --> 00:00:23,270
questions feel free to ask them if I

7
00:00:23,270 --> 00:00:25,369
look stupid and and try to when I try to

8
00:00:25,369 --> 00:00:28,570
answer don't be surprised

9
00:00:28,570 --> 00:00:33,649
so what's redox redox it is a

10
00:00:33,649 --> 00:00:36,950
microkernel yeah big surprise it's

11
00:00:36,950 --> 00:00:39,860
rooted in rust and one of the leading

12
00:00:39,860 --> 00:00:43,370
objectives was to not compromise on

13
00:00:43,370 --> 00:00:51,260
safety so also an interesting thing

14
00:00:51,260 --> 00:00:55,430
about the design of redox is that we are

15
00:00:55,430 --> 00:00:57,590
trying to be UNIX most of the micro

16
00:00:57,590 --> 00:00:59,710
kernels I know of not all of them are

17
00:00:59,710 --> 00:01:02,329
trying to be not UNIX they are trying to

18
00:01:02,329 --> 00:01:04,188
be their own thing which is entirely

19
00:01:04,188 --> 00:01:06,770
fine we went in the direction of trying

20
00:01:06,770 --> 00:01:09,830
to be kind of UNIX not entirely UNIX but

21
00:01:09,830 --> 00:01:12,229
kind of UNIX what does this mean it

22
00:01:12,229 --> 00:01:13,580
means basically that everything in the

23
00:01:13,580 --> 00:01:16,100
file is a file not necessarily a file

24
00:01:16,100 --> 00:01:21,290
based on disk but it's a file in its

25
00:01:21,290 --> 00:01:22,310
current state

26
00:01:22,310 --> 00:01:25,820
it runs on existing Hardware I actually

27
00:01:25,820 --> 00:01:27,350
don't remember the list of architectures

28
00:01:27,350 --> 00:01:30,500
not many of them but at least x86 64 and

29
00:01:30,500 --> 00:01:35,509
arm and remembers version of arm it's a

30
00:01:35,509 --> 00:01:40,390
clean slate implementation as many

31
00:01:40,390 --> 00:01:42,020
projects around here

32
00:01:42,020 --> 00:01:44,420
it's young I don't remember exactly when

33
00:01:44,420 --> 00:01:46,430
it started but I pretty sure it's less

34
00:01:46,430 --> 00:01:51,259
than one year old so expect that more

35
00:01:51,259 --> 00:01:54,040
than one you're wrong ok fair enough

36
00:01:54,040 --> 00:01:57,420
so the repos are less than one year old

37
00:01:57,420 --> 00:02:00,550
so anyway expect that there are still

38
00:02:00,550 --> 00:02:04,480
holes in it as you can see from my lack

39
00:02:04,480 --> 00:02:05,980
of knowledge of the history of free

40
00:02:05,980 --> 00:02:06,400
docks

41
00:02:06,400 --> 00:02:08,020
I'm less than one year old in that

42
00:02:08,020 --> 00:02:13,960
project as I say it's young so things

43
00:02:13,960 --> 00:02:14,680
are missing

44
00:02:14,680 --> 00:02:17,200
it's full-featured enough that there is

45
00:02:17,200 --> 00:02:20,490
a bare-bones browser working on it in

46
00:02:20,490 --> 00:02:24,270
graphical mode but it's still pretty

47
00:02:24,270 --> 00:02:27,460
pretty bare-bones at the moment and it's

48
00:02:27,460 --> 00:02:31,210
MIT licensed I've gathered the list of

49
00:02:31,210 --> 00:02:33,340
about 40 contributors I'm probably

50
00:02:33,340 --> 00:02:36,880
missing a few but that's roughly the

51
00:02:36,880 --> 00:02:38,860
number of people who have contributed to

52
00:02:38,860 --> 00:02:44,800
the project so just yeah it exists it

53
00:02:44,800 --> 00:02:46,600
exists you can take screen captures of

54
00:02:46,600 --> 00:02:51,070
this the best demo being the web browser

55
00:02:51,070 --> 00:02:52,420
but I'm not going to give it today too

56
00:02:52,420 --> 00:02:56,070
many changes of me screwing things up

57
00:02:56,070 --> 00:03:00,640
okay so this is the microkernel rule I

58
00:03:00,640 --> 00:03:02,739
don't know whether people are here

59
00:03:02,739 --> 00:03:04,660
because they know about microkernels or

60
00:03:04,660 --> 00:03:05,709
because they want to know about

61
00:03:05,709 --> 00:03:08,950
Nocturnals so just in case I prepare a

62
00:03:08,950 --> 00:03:11,170
few slides but for people who want to

63
00:03:11,170 --> 00:03:11,739
know about

64
00:03:11,739 --> 00:03:13,750
microkernels I'm not going to say much

65
00:03:13,750 --> 00:03:16,480
about them but I'm going to explain to

66
00:03:16,480 --> 00:03:22,060
you why micro kernels are cool and in

67
00:03:22,060 --> 00:03:24,070
particular in the domain of IOT which

68
00:03:24,070 --> 00:03:26,590
interests me I mean that's why I have

69
00:03:26,590 --> 00:03:30,850
this t-shirt so the idea of a

70
00:03:30,850 --> 00:03:34,030
microkernel is to remove as many things

71
00:03:34,030 --> 00:03:37,000
as you can from the kernel and put it in

72
00:03:37,000 --> 00:03:37,570
userland

73
00:03:37,570 --> 00:03:40,989
so regular processes some micro kernels

74
00:03:40,989 --> 00:03:42,519
are extreme and managed to remove even

75
00:03:42,519 --> 00:03:44,320
memory and any kind of manual memory

76
00:03:44,320 --> 00:03:46,450
allocation from the kernel we're not

77
00:03:46,450 --> 00:03:49,870
that far we might reach that far

78
00:03:49,870 --> 00:03:52,620
someday possibly but we're not there yet

79
00:03:52,620 --> 00:03:56,110
in particle this means that file systems

80
00:03:56,110 --> 00:03:58,450
are not privileged they're just regular

81
00:03:58,450 --> 00:04:01,360
processes drivers are not privileged

82
00:04:01,360 --> 00:04:03,700
there are regular processes some parts

83
00:04:03,700 --> 00:04:05,350
of the notion the very notion of

84
00:04:05,350 --> 00:04:07,230
security can

85
00:04:07,230 --> 00:04:11,670
processes and microkernels are cool

86
00:04:11,670 --> 00:04:14,890
microkernels I mean there is of course

87
00:04:14,890 --> 00:04:16,060
the fact that micro criminals are

88
00:04:16,060 --> 00:04:17,350
obviously cool if you can remove

89
00:04:17,350 --> 00:04:18,850
something from a place where it's

90
00:04:18,850 --> 00:04:20,320
privileged and put it where it's not

91
00:04:20,320 --> 00:04:22,720
privileged of course it's good

92
00:04:22,720 --> 00:04:29,970
why well one of the reasons it's cool

93
00:04:29,970 --> 00:04:32,350
it's actually because you cannot upgrade

94
00:04:32,350 --> 00:04:35,050
your smartphone I mean most smartphones

95
00:04:35,050 --> 00:04:39,310
have it cannot be upgraded for you for

96
00:04:39,310 --> 00:04:41,760
more than a few months maybe two years

97
00:04:41,760 --> 00:04:47,680
why is that they are I think every

98
00:04:47,680 --> 00:04:52,810
single one of them based on a monolithic

99
00:04:52,810 --> 00:04:57,310
kernel which pretty much always needs to

100
00:04:57,310 --> 00:05:00,610
be patched I mean unless you're apple

101
00:05:00,610 --> 00:05:03,160
and you own the kernel you are running a

102
00:05:03,160 --> 00:05:06,550
custom curve because you probably need a

103
00:05:06,550 --> 00:05:09,010
patch from this version of Linux and one

104
00:05:09,010 --> 00:05:10,690
another one from that version of Linux

105
00:05:10,690 --> 00:05:13,690
they're not together for in the upstream

106
00:05:13,690 --> 00:05:17,280
version so you need to customize it also

107
00:05:17,280 --> 00:05:21,070
you have an extremely exclusive

108
00:05:21,070 --> 00:05:25,110
licensing agreement with where whichever

109
00:05:25,110 --> 00:05:27,160
manufacturer and you have some new

110
00:05:27,160 --> 00:05:28,960
camera or may mean it's not a new camera

111
00:05:28,960 --> 00:05:30,700
but just the camera was not supported

112
00:05:30,700 --> 00:05:35,110
and not supported by your kernel so you

113
00:05:35,110 --> 00:05:38,110
need a device driver that's somehow not

114
00:05:38,110 --> 00:05:40,930
in the kernel at this stage you have

115
00:05:40,930 --> 00:05:44,560
lost unless you are willing to hire

116
00:05:44,560 --> 00:05:48,040
people who can manage to get your code

117
00:05:48,040 --> 00:05:51,340
up strength and that's a pretty smaller

118
00:05:51,340 --> 00:05:53,590
community than people who can quick

119
00:05:53,590 --> 00:05:56,830
things together because typically you're

120
00:05:56,830 --> 00:05:59,200
going to write patches and they're going

121
00:05:59,200 --> 00:06:01,270
to stay in your custom version of the

122
00:06:01,270 --> 00:06:04,870
kernel which is kind of ok until the

123
00:06:04,870 --> 00:06:07,900
kernel evolves because sometimes you

124
00:06:07,900 --> 00:06:09,820
know kernels are patched by upstream

125
00:06:09,820 --> 00:06:14,260
that happens kind of often if you need

126
00:06:14,260 --> 00:06:15,940
to deal with your patches and the

127
00:06:15,940 --> 00:06:18,970
upstream patches ok you are have reached

128
00:06:18,970 --> 00:06:20,080
the stage where

129
00:06:20,080 --> 00:06:23,470
you need someone full-time just to deal

130
00:06:23,470 --> 00:06:27,849
with resolution of dispatches know the

131
00:06:27,849 --> 00:06:31,090
drivers evolve in ways that may or may

132
00:06:31,090 --> 00:06:35,139
not be compatible with these various

133
00:06:35,139 --> 00:06:38,020
evolutions of the kernel you have

134
00:06:38,020 --> 00:06:41,889
security issues of your own and pretty

135
00:06:41,889 --> 00:06:45,370
soon you need to be come a tournament in

136
00:06:45,370 --> 00:06:48,430
here you need to maintain a kernel

137
00:06:48,430 --> 00:06:51,699
maintainer for your device but true for

138
00:06:51,699 --> 00:06:54,129
smartphones that's going to be also true

139
00:06:54,129 --> 00:06:57,210
for smart fridges smart

140
00:06:57,210 --> 00:06:59,680
scary stuff that is looking at me when

141
00:06:59,680 --> 00:07:04,650
I'm taking my shower or smart whatever

142
00:07:06,389 --> 00:07:09,159
you have a problem I mean okay if you're

143
00:07:09,159 --> 00:07:11,500
a big company you can do it but if

144
00:07:11,500 --> 00:07:14,440
you're a small outfit if you're if your

145
00:07:14,440 --> 00:07:16,599
startup if you're doing this on your own

146
00:07:16,599 --> 00:07:19,479
if you want to provide support you have

147
00:07:19,479 --> 00:07:20,979
lost at some point you're good not going

148
00:07:20,979 --> 00:07:23,590
to be able to track upstream patches and

149
00:07:23,590 --> 00:07:26,080
combine them with your patches it's just

150
00:07:26,080 --> 00:07:32,469
too much effort so one of the reasons

151
00:07:32,469 --> 00:07:36,729
why micro kernels are great is that they

152
00:07:36,729 --> 00:07:38,259
make things these kind of things

153
00:07:38,259 --> 00:07:39,789
possible just the fact of tracking

154
00:07:39,789 --> 00:07:46,300
upstream fixes so in the world of IOT

155
00:07:46,300 --> 00:07:48,940
it's not necessarily just IOT but that

156
00:07:48,940 --> 00:07:52,779
is exacerbated in the case of IOT oh by

157
00:07:52,779 --> 00:07:54,969
the way just one quote a few months ago

158
00:07:54,969 --> 00:07:59,159
we had the presentation we have the

159
00:07:59,159 --> 00:08:03,669
Linux kernel recipes conference in our

160
00:08:03,669 --> 00:08:05,889
office in Paris and one of the things

161
00:08:05,889 --> 00:08:07,930
they said they are very aware of this

162
00:08:07,930 --> 00:08:10,750
problem and one of the things they said

163
00:08:10,750 --> 00:08:13,539
is the only reasons for which we do not

164
00:08:13,539 --> 00:08:17,560
have widespread attacks on smartphones

165
00:08:17,560 --> 00:08:19,479
at the moment or small devices at the

166
00:08:19,479 --> 00:08:21,219
moment is that people throw away their

167
00:08:21,219 --> 00:08:23,949
smart phone faster than people write

168
00:08:23,949 --> 00:08:26,400
viruses

169
00:08:26,580 --> 00:08:31,560
that's a pretty bad reason and that does

170
00:08:31,560 --> 00:08:34,080
not fail up two fridges because the

171
00:08:34,080 --> 00:08:36,659
light on your fridge is slightly higher

172
00:08:36,659 --> 00:08:43,320
than the lifetime of your smartphone so

173
00:08:43,320 --> 00:08:45,600
back to microkernels why are our core

174
00:08:45,600 --> 00:08:48,390
criminals great in that context because

175
00:08:48,390 --> 00:08:50,850
anything you have customized what ok

176
00:08:50,850 --> 00:08:52,920
maybe not anything but there are very

177
00:08:52,920 --> 00:08:54,960
good chances that the things that you

178
00:08:54,960 --> 00:08:57,300
have customized live out of the kernel

179
00:08:57,300 --> 00:08:59,460
they'll even user net and certainly

180
00:08:59,460 --> 00:09:02,700
things communicate using API is that do

181
00:09:02,700 --> 00:09:05,160
not need die knowing that do not break

182
00:09:05,160 --> 00:09:07,710
when you upgrade something so you can

183
00:09:07,710 --> 00:09:09,780
upgrade independently the kernel the

184
00:09:09,780 --> 00:09:14,100
drivers your code without friction this

185
00:09:14,100 --> 00:09:17,130
has effects on life patching too and

186
00:09:17,130 --> 00:09:18,990
also this has effects on safety and

187
00:09:18,990 --> 00:09:21,450
security and there is another reason

188
00:09:21,450 --> 00:09:24,660
which is actually cool too is that since

189
00:09:24,660 --> 00:09:26,790
your kernel is small since you can

190
00:09:26,790 --> 00:09:28,860
pretty much easily pick what you put in

191
00:09:28,860 --> 00:09:30,600
your distribution well you can probably

192
00:09:30,600 --> 00:09:32,610
trim your distribution to something

193
00:09:32,610 --> 00:09:35,970
small well I make no promise here but

194
00:09:35,970 --> 00:09:38,060
that sounds reasonable

195
00:09:38,060 --> 00:09:41,880
so other reason for which micro kernels

196
00:09:41,880 --> 00:09:43,920
are great in terms of safety and

197
00:09:43,920 --> 00:09:47,130
security micro kernel means that you

198
00:09:47,130 --> 00:09:49,080
have a much smaller trusting to trusted

199
00:09:49,080 --> 00:09:52,620
computing base the kernel is easier to

200
00:09:52,620 --> 00:09:55,710
read to audit to check to it's easier to

201
00:09:55,710 --> 00:09:59,280
run static or dynamic analysis on it and

202
00:09:59,280 --> 00:10:01,470
in many systems the worst that can

203
00:10:01,470 --> 00:10:03,600
happen to your security is your your

204
00:10:03,600 --> 00:10:04,710
kernel is compromised

205
00:10:04,710 --> 00:10:06,840
since you have moved many things away

206
00:10:06,840 --> 00:10:09,210
from your kernel a compromised in a

207
00:10:09,210 --> 00:10:10,950
driver is not the same thing anymore as

208
00:10:10,950 --> 00:10:13,950
a compromise in the kernel same thing

209
00:10:13,950 --> 00:10:16,110
for file systems even better than that

210
00:10:16,110 --> 00:10:18,480
compromised in a driver is not the same

211
00:10:18,480 --> 00:10:19,650
thing out there's a compromise in the

212
00:10:19,650 --> 00:10:22,950
file system and vice versa so you have

213
00:10:22,950 --> 00:10:25,170
isolated stuff which makes it much

214
00:10:25,170 --> 00:10:26,940
harder to attack to get to grab a

215
00:10:26,940 --> 00:10:31,430
foothold in your system for an allegory

216
00:10:31,460 --> 00:10:34,440
also having clear separation in

217
00:10:34,440 --> 00:10:37,290
processes means that if you invest in

218
00:10:37,290 --> 00:10:38,390
this

219
00:10:38,390 --> 00:10:41,540
as if you spend time freaking your

220
00:10:41,540 --> 00:10:43,279
operating system for that you can

221
00:10:43,279 --> 00:10:45,950
actually track more easily things like

222
00:10:45,950 --> 00:10:49,330
how did the attacker break to the system

223
00:10:49,330 --> 00:10:53,149
what did it compromise what do I need to

224
00:10:53,149 --> 00:10:56,720
shut down can I survive away with

225
00:10:56,720 --> 00:10:59,330
shutting down is part of the system with

226
00:10:59,330 --> 00:11:01,970
rebooting them can I track the taint of

227
00:11:01,970 --> 00:11:06,260
the attack ok that was all about

228
00:11:06,260 --> 00:11:09,560
microkernels let me tell you why ROC

229
00:11:09,560 --> 00:11:15,140
sorry white rest rocks I'm trying not to

230
00:11:15,140 --> 00:11:17,060
make too much propaganda so let me

231
00:11:17,060 --> 00:11:19,610
rephrase this let me tell you why rust

232
00:11:19,610 --> 00:11:23,060
is a good candidate for people who are

233
00:11:23,060 --> 00:11:26,720
interested in writing code at the level

234
00:11:26,720 --> 00:11:30,200
of a microkernel or January operating

235
00:11:30,200 --> 00:11:34,670
system development rust is a new

236
00:11:34,670 --> 00:11:36,730
programming language it has reached even

237
00:11:36,730 --> 00:11:41,180
1.15 I think this week it's designed to

238
00:11:41,180 --> 00:11:46,430
be both safe fast and high-level fast is

239
00:11:46,430 --> 00:11:48,440
one of the reasons for which it's fast

240
00:11:48,440 --> 00:11:50,779
it manages to have zero cost

241
00:11:50,779 --> 00:11:52,850
abstractions in most cases not all of

242
00:11:52,850 --> 00:11:54,680
them but most of them I'll show you an

243
00:11:54,680 --> 00:11:58,010
example soon zero cost safety in many

244
00:11:58,010 --> 00:12:00,140
cases so safety is enforced by the

245
00:12:00,140 --> 00:12:03,230
compiler by static analysis in really

246
00:12:03,230 --> 00:12:05,420
many cases which saves you from having

247
00:12:05,420 --> 00:12:09,170
to implement things in your code which

248
00:12:09,170 --> 00:12:11,089
also saves you from forgetting to check

249
00:12:11,089 --> 00:12:14,390
things the objective of the arrest team

250
00:12:14,390 --> 00:12:18,020
is to provide an alternative to C++ not

251
00:12:18,020 --> 00:12:21,140
necessary to see but to C++ for a broad

252
00:12:21,140 --> 00:12:23,990
range of programming applications again

253
00:12:23,990 --> 00:12:26,149
not all of them and one of the nice

254
00:12:26,149 --> 00:12:28,520
things is that the compiler it can be

255
00:12:28,520 --> 00:12:33,140
scripted to pretty high levels which

256
00:12:33,140 --> 00:12:35,000
means that for instance in theory I

257
00:12:35,000 --> 00:12:36,680
don't think that anyone has done it yet

258
00:12:36,680 --> 00:12:39,079
but you could even implement things like

259
00:12:39,079 --> 00:12:41,390
address space randomization and things

260
00:12:41,390 --> 00:12:44,270
like this in the compiler which is also

261
00:12:44,270 --> 00:12:46,510
good for security

262
00:12:46,510 --> 00:12:49,340
so here is a quick example of zero cat

263
00:12:49,340 --> 00:12:53,380
abstraction this a bit contrived example

264
00:12:53,380 --> 00:12:56,720
so we take the list of integers do I

265
00:12:56,720 --> 00:12:59,600
have some kind of pointer no this takes

266
00:12:59,600 --> 00:13:03,530
a list of integers from I'm going to

267
00:13:03,530 --> 00:13:10,000
succeed if the vintage is from 1 to 100

268
00:13:10,000 --> 00:13:15,800
keep only the ones not even once

269
00:13:15,800 --> 00:13:22,220
sorry fair enough 1 to 99 then divide by

270
00:13:22,220 --> 00:13:26,120
2 everything and then print them all so

271
00:13:26,120 --> 00:13:28,430
not a very interesting example in the

272
00:13:28,430 --> 00:13:31,520
per se but if you disassemble it you

273
00:13:31,520 --> 00:13:34,130
essentially realize that these lines

274
00:13:34,130 --> 00:13:38,420
take zero assembly instructions and this

275
00:13:38,420 --> 00:13:41,090
line is basically the entire loop that

276
00:13:41,090 --> 00:13:45,080
runs this and that which among other

277
00:13:45,080 --> 00:13:46,730
things means that there are no memory

278
00:13:46,730 --> 00:13:51,470
locations here no hidden costs and the

279
00:13:51,470 --> 00:13:56,900
for function calls are pretty much the

280
00:13:56,900 --> 00:14:00,110
printing stuff and converting a number

281
00:14:00,110 --> 00:14:02,480
to a string and then displaying stuff a

282
00:14:02,480 --> 00:14:05,270
string which is pretty good

283
00:14:05,270 --> 00:14:07,430
I mean you can of course get reach the

284
00:14:07,430 --> 00:14:10,190
same result in C but having obstructions

285
00:14:10,190 --> 00:14:11,990
when you're using them correctly is very

286
00:14:11,990 --> 00:14:14,830
useful

287
00:14:17,850 --> 00:14:22,260
very short example of safety it's pretty

288
00:14:22,260 --> 00:14:24,980
common to have to process IDs in kernels

289
00:14:24,980 --> 00:14:28,560
a process ID is typically an integer if

290
00:14:28,560 --> 00:14:31,680
you use integers everywhere you can

291
00:14:31,680 --> 00:14:34,650
screw this up by I don't know doing

292
00:14:34,650 --> 00:14:37,050
parts or aromatics by accident on

293
00:14:37,050 --> 00:14:39,090
process IDs or whatever I mean anything

294
00:14:39,090 --> 00:14:41,640
can happen so many programming languages

295
00:14:41,640 --> 00:14:43,140
I mean pretty much all programming

296
00:14:43,140 --> 00:14:45,570
languages process provide at least some

297
00:14:45,570 --> 00:14:51,420
way of encapsulating your PID sorry of

298
00:14:51,420 --> 00:14:55,100
not addressing this exactly as integers

299
00:14:55,100 --> 00:14:59,430
well this is how Russ does this so the

300
00:14:59,430 --> 00:15:01,920
interesting part being does this

301
00:15:01,920 --> 00:15:04,740
operation increment which actually looks

302
00:15:04,740 --> 00:15:07,370
like it's creating a data structure to

303
00:15:07,370 --> 00:15:11,280
get a new value of the integers etc it's

304
00:15:11,280 --> 00:15:12,840
actually compiled exactly the same way

305
00:15:12,840 --> 00:15:15,060
as a classical one would be compiled in

306
00:15:15,060 --> 00:15:19,140
C so the compiler will tell you if you

307
00:15:19,140 --> 00:15:21,600
mistake a PID for general integers and

308
00:15:21,600 --> 00:15:23,790
but it's actually going to generate the

309
00:15:23,790 --> 00:15:27,150
same code again you can do this in other

310
00:15:27,150 --> 00:15:30,510
languages ref is convenient it makes

311
00:15:30,510 --> 00:15:32,550
this easy but it's definitely not the

312
00:15:32,550 --> 00:15:34,710
only languages that really let you do

313
00:15:34,710 --> 00:15:40,920
that another example this is an example

314
00:15:40,920 --> 00:15:48,060
of allocating a pointer and so this box

315
00:15:48,060 --> 00:15:50,520
new allocates the simplest kind of

316
00:15:50,520 --> 00:15:53,580
pointer in rest we put here 40 to

317
00:15:53,580 --> 00:15:56,520
indicate in the in here and in some case

318
00:15:56,520 --> 00:16:00,540
with a locate the pointer the compiler

319
00:16:00,540 --> 00:16:03,480
will refuse to compile this because it's

320
00:16:03,480 --> 00:16:06,090
telling you that this value the pointer

321
00:16:06,090 --> 00:16:09,390
has actually been so the term in rest is

322
00:16:09,390 --> 00:16:12,630
moved so drop which has the allocated

323
00:16:12,630 --> 00:16:15,360
the pointer has actually eaten the

324
00:16:15,360 --> 00:16:17,070
pointer there is at least one path that

325
00:16:17,070 --> 00:16:20,430
has it on the pointer so this function

326
00:16:20,430 --> 00:16:22,710
call this expression makes no sense and

327
00:16:22,710 --> 00:16:25,110
the compiler is going to really reject

328
00:16:25,110 --> 00:16:27,490
that expression

329
00:16:27,490 --> 00:16:31,880
and the same kind of mechanisms work

330
00:16:31,880 --> 00:16:37,570
very well to discuss threat safety here

331
00:16:37,570 --> 00:16:40,090
you have located the same pointer and

332
00:16:40,090 --> 00:16:44,360
you are changing it in another thread so

333
00:16:44,360 --> 00:16:46,360
in this example because nobody's s

334
00:16:46,360 --> 00:16:49,220
exists in the world that might work but

335
00:16:49,220 --> 00:16:51,500
in general that's probably not good

336
00:16:51,500 --> 00:16:54,350
because who does this point you belong

337
00:16:54,350 --> 00:16:57,350
to does it belong to this thread or to

338
00:16:57,350 --> 00:17:04,339
that thread so you can specify that it

339
00:17:04,339 --> 00:17:07,520
belongs to the thread that you have just

340
00:17:07,520 --> 00:17:09,949
pwned in which case the compiler would

341
00:17:09,949 --> 00:17:12,109
let you safely use it so you have

342
00:17:12,109 --> 00:17:14,599
allocated it on one thread but then you

343
00:17:14,599 --> 00:17:16,339
only use it on the other thread that's

344
00:17:16,339 --> 00:17:19,880
okay you have a zero cost zero cost here

345
00:17:19,880 --> 00:17:22,400
you don't need a mutex or anything and

346
00:17:22,400 --> 00:17:27,079
it's going to let you run your code of

347
00:17:27,079 --> 00:17:29,390
course if you try to use it on the

348
00:17:29,390 --> 00:17:32,240
process on the thread that has allocated

349
00:17:32,240 --> 00:17:34,730
it it's going to tell you again oh sorry

350
00:17:34,730 --> 00:17:36,950
this has moved this has been eaten by

351
00:17:36,950 --> 00:17:41,120
the thread so please rewrite your code

352
00:17:41,120 --> 00:17:44,300
you could of course either also shared

353
00:17:44,300 --> 00:17:46,520
pointers etc but if you start having

354
00:17:46,520 --> 00:17:48,680
side effects to winning the mutex or an

355
00:17:48,680 --> 00:17:51,140
atomic value which is exactly what you

356
00:17:51,140 --> 00:17:57,940
expect okay back to redux

357
00:17:58,510 --> 00:18:02,990
as I mentioned so microkernel is all

358
00:18:02,990 --> 00:18:06,560
about moving things in user space this

359
00:18:06,560 --> 00:18:11,570
being UNIX family operating system well

360
00:18:11,570 --> 00:18:16,100
everything is most mostly a synonym of

361
00:18:16,100 --> 00:18:28,520
file systems and files so as in many

362
00:18:28,520 --> 00:18:32,480
modern unix's you can have several file

363
00:18:32,480 --> 00:18:38,420
systems coexisting in the same world on

364
00:18:38,420 --> 00:18:40,630
the same system

365
00:18:40,630 --> 00:18:43,460
redox supports this by plugging file

366
00:18:43,460 --> 00:18:47,750
systems so the difference between the

367
00:18:47,750 --> 00:18:49,970
main difference between this and say

368
00:18:49,970 --> 00:18:53,660
what happens in most unix's or Linux is

369
00:18:53,660 --> 00:18:57,410
that each file system is explicitly so

370
00:18:57,410 --> 00:19:00,350
each path is explicitly prefixed by a

371
00:19:00,350 --> 00:19:02,690
URL scheme that tells you which other

372
00:19:02,690 --> 00:19:07,250
file systems handles this path so maybe

373
00:19:07,250 --> 00:19:08,930
you're interested on the file in a file

374
00:19:08,930 --> 00:19:11,240
that's what people commonly call a file

375
00:19:11,240 --> 00:19:13,370
so something that's on your hard drive

376
00:19:13,370 --> 00:19:17,390
so it's the file scheme or maybe you

377
00:19:17,390 --> 00:19:19,070
want to pipe it's a different scheme or

378
00:19:19,070 --> 00:19:20,900
maybe you are looking for the random

379
00:19:20,900 --> 00:19:22,750
number generator it's a different scheme

380
00:19:22,750 --> 00:19:25,310
each of these schemes is implemented by

381
00:19:25,310 --> 00:19:26,690
a process I mean you could write a

382
00:19:26,690 --> 00:19:28,490
process that implements several of them

383
00:19:28,490 --> 00:19:32,450
but that probably doesn't that could

384
00:19:32,450 --> 00:19:38,420
happen so plug your processes in

385
00:19:38,420 --> 00:19:44,750
userspace the kernel itself tracks file

386
00:19:44,750 --> 00:19:47,330
descriptors so it guarantees that file

387
00:19:47,330 --> 00:19:50,720
descriptors cannot be forged it helps

388
00:19:50,720 --> 00:19:56,180
you with its issues fresh numbers for

389
00:19:56,180 --> 00:19:59,960
each process it knows what each number

390
00:19:59,960 --> 00:20:00,890
sorry

391
00:20:00,890 --> 00:20:03,860
if you closed if a producer and process

392
00:20:03,860 --> 00:20:06,980
closes a file with file descriptor 52:42

393
00:20:06,980 --> 00:20:10,820
it knows our 42 for this process

394
00:20:10,820 --> 00:20:12,950
is implemented by that process so it

395
00:20:12,950 --> 00:20:14,120
basically routes

396
00:20:14,120 --> 00:20:17,019
fiscals to the corresponding processes

397
00:20:17,019 --> 00:20:21,309
most of the Cisco's in redox are

398
00:20:21,309 --> 00:20:25,630
actually implemented by a simple route

399
00:20:25,630 --> 00:20:30,889
to the sorry a simple check of memory

400
00:20:30,889 --> 00:20:34,690
and then a route that are routed to the

401
00:20:34,690 --> 00:20:39,610
implementation of the file system so

402
00:20:39,610 --> 00:20:42,259
again the kernel only handles pretty

403
00:20:42,259 --> 00:20:44,360
much the Scriptures registration and

404
00:20:44,360 --> 00:20:46,399
dispatching everything else is

405
00:20:46,399 --> 00:20:48,710
implemented by each process so the

406
00:20:48,710 --> 00:20:50,899
actual notion of path can be widely

407
00:20:50,899 --> 00:20:52,220
different from one process to another

408
00:20:52,220 --> 00:20:53,620
one

409
00:20:53,620 --> 00:20:56,000
everything that's dealing with access

410
00:20:56,000 --> 00:20:58,629
control is implemented by the file

411
00:20:58,629 --> 00:21:01,279
proper by the schema sorry so by the

412
00:21:01,279 --> 00:21:03,230
implementation of the file system and

413
00:21:03,230 --> 00:21:10,460
that works nicely so if we look at

414
00:21:10,460 --> 00:21:14,049
drivers know so just as we have

415
00:21:14,049 --> 00:21:17,960
pluggable user space file systems we

416
00:21:17,960 --> 00:21:22,159
have pluggable user space drivers the

417
00:21:22,159 --> 00:21:24,379
kernel itself basically the only thing

418
00:21:24,379 --> 00:21:28,190
it does is address mapping so as in I

419
00:21:28,190 --> 00:21:33,070
want to use to map this physical address

420
00:21:33,070 --> 00:21:35,330
which corresponds to with this physical

421
00:21:35,330 --> 00:21:38,480
device and I want to be able to read and

422
00:21:38,480 --> 00:21:41,720
write it that's basically all that the

423
00:21:41,720 --> 00:21:44,840
kernel does for drivers and then there

424
00:21:44,840 --> 00:21:48,559
are interruptions but since everything

425
00:21:48,559 --> 00:21:50,350
in the everything is a file

426
00:21:50,350 --> 00:21:53,590
interruptions are just a file system

427
00:21:53,590 --> 00:21:57,980
drivers themselves everything is a file

428
00:21:57,980 --> 00:22:01,370
so a driver is a file system so if you

429
00:22:01,370 --> 00:22:03,590
want to access the graphics card you're

430
00:22:03,590 --> 00:22:06,279
going to use your currently your visa

431
00:22:06,279 --> 00:22:11,330
file system to send instructions to a

432
00:22:11,330 --> 00:22:13,440
graphics card

433
00:22:13,440 --> 00:22:15,500
having everything as file system

434
00:22:15,500 --> 00:22:18,390
simplifies the life in a number of cases

435
00:22:18,390 --> 00:22:20,310
such as not needing to introduce

436
00:22:20,310 --> 00:22:23,850
gazillions of new Siskel's we have

437
00:22:23,850 --> 00:22:25,380
simple tracking of who's using what

438
00:22:25,380 --> 00:22:29,340
again one abstraction having just one

439
00:22:29,340 --> 00:22:36,210
abstraction make things easier one of

440
00:22:36,210 --> 00:22:38,850
the things we are interested in and

441
00:22:38,850 --> 00:22:41,220
that's I'm working on this at the moment

442
00:22:41,220 --> 00:22:44,240
so it's very much not landed yet is

443
00:22:44,240 --> 00:22:48,450
capabilities so recover view of

444
00:22:48,450 --> 00:22:51,870
capabilities of sorry of capability

445
00:22:51,870 --> 00:22:55,290
based security so just for people who

446
00:22:55,290 --> 00:22:57,240
know about projects capabilities that's

447
00:22:57,240 --> 00:23:00,330
not the same thing at all just happen to

448
00:23:00,330 --> 00:23:03,270
use the same name the notion of

449
00:23:03,270 --> 00:23:04,770
capabilities is something that actually

450
00:23:04,770 --> 00:23:06,210
comes from programming languages

451
00:23:06,210 --> 00:23:09,570
initially so a security capability is

452
00:23:09,570 --> 00:23:13,070
the unforgeable right to do something

453
00:23:13,130 --> 00:23:17,790
typically in a programming language well

454
00:23:17,790 --> 00:23:19,290
in an object-oriented programming

455
00:23:19,290 --> 00:23:20,760
language you're going to have objects

456
00:23:20,760 --> 00:23:23,880
with private fields and the capability

457
00:23:23,880 --> 00:23:26,670
to access something is if you have a

458
00:23:26,670 --> 00:23:29,550
handle on one of these objects and there

459
00:23:29,550 --> 00:23:32,640
is a public method that lets you somehow

460
00:23:32,640 --> 00:23:36,030
affect the private data or you read the

461
00:23:36,030 --> 00:23:37,860
private data then you have the

462
00:23:37,860 --> 00:23:40,560
capability to read that private or to

463
00:23:40,560 --> 00:23:44,190
write that private data or if you're not

464
00:23:44,190 --> 00:23:46,080
do in a programming language with

465
00:23:46,080 --> 00:23:48,090
objects but one with closures exact

466
00:23:48,090 --> 00:23:51,270
exact same thing capabilities you can

467
00:23:51,270 --> 00:23:54,420
use them to do something you can it's

468
00:23:54,420 --> 00:23:56,760
quite important you can share them so as

469
00:23:56,760 --> 00:23:59,730
soon as you have the ability sorry to

470
00:23:59,730 --> 00:24:02,880
read that data well you can read the

471
00:24:02,880 --> 00:24:05,070
data on behalf of someone else and you

472
00:24:05,070 --> 00:24:07,320
can possibly give that ability to the

473
00:24:07,320 --> 00:24:11,040
other person you can use it you can

474
00:24:11,040 --> 00:24:13,230
share it you can of course stop having

475
00:24:13,230 --> 00:24:15,840
it and you can possibly weaken it maybe

476
00:24:15,840 --> 00:24:17,310
you have the ability to read and write

477
00:24:17,310 --> 00:24:19,890
that data and just you want to only keep

478
00:24:19,890 --> 00:24:23,220
the ability to read it that works too

479
00:24:23,220 --> 00:24:25,690
that's the kind of thing if you need to

480
00:24:25,690 --> 00:24:27,899
implement this in a program England in

481
00:24:27,899 --> 00:24:29,740
whichever is your favorite roaming

482
00:24:29,740 --> 00:24:32,830
programming language you'll manage if

483
00:24:32,830 --> 00:24:35,380
you want to use the to do this in your

484
00:24:35,380 --> 00:24:37,600
favorite operating system that's harder

485
00:24:37,600 --> 00:24:40,899
there are a number of operating systems

486
00:24:40,899 --> 00:24:42,760
that offer capabilities several them

487
00:24:42,760 --> 00:24:44,760
have been discussed today in this room

488
00:24:44,760 --> 00:24:48,850
that they're not that many of them in

489
00:24:48,850 --> 00:24:50,010
total

490
00:24:50,010 --> 00:24:53,799
oh sorry forgot what's the point of

491
00:24:53,799 --> 00:24:56,919
having capabilities the point of having

492
00:24:56,919 --> 00:25:00,460
capabilities if you look at it from a

493
00:25:00,460 --> 00:25:02,770
point of view of safety and security is

494
00:25:02,770 --> 00:25:04,960
that pretty much anything can serve as

495
00:25:04,960 --> 00:25:08,860
sandbox for anything if there is in

496
00:25:08,860 --> 00:25:10,539
other words in programming languages if

497
00:25:10,539 --> 00:25:12,909
there are no global variables but only

498
00:25:12,909 --> 00:25:17,500
local variables then your the function

499
00:25:17,500 --> 00:25:20,230
you're calling if it does not have

500
00:25:20,230 --> 00:25:22,419
access to any global variable there are

501
00:25:22,419 --> 00:25:25,360
limits to how bad it can behave it

502
00:25:25,360 --> 00:25:27,340
cannot have side effects in safe

503
00:25:27,340 --> 00:25:31,539
language that are not on the arguments

504
00:25:31,539 --> 00:25:34,090
you pass to it or you have some hope as

505
00:25:34,090 --> 00:25:37,179
to it it's critical if you want to

506
00:25:37,179 --> 00:25:41,289
analyze the behavior of your code both

507
00:25:41,289 --> 00:25:43,270
statically and globally sorry both

508
00:25:43,270 --> 00:25:46,840
statically and dynamically and again I

509
00:25:46,840 --> 00:25:50,080
mentioned that having a microkernel

510
00:25:50,080 --> 00:25:52,480
could help you with looking at changing

511
00:25:52,480 --> 00:25:57,039
of compromised processes well that's

512
00:25:57,039 --> 00:26:01,149
that's here also the same thing the more

513
00:26:01,149 --> 00:26:04,659
you make dependencies explicit the more

514
00:26:04,659 --> 00:26:09,070
you can analyze changing so in the UNIX

515
00:26:09,070 --> 00:26:12,250
world typical UNIX implementations do

516
00:26:12,250 --> 00:26:15,370
not have this kind of capabilities the

517
00:26:15,370 --> 00:26:16,659
closest thing you have is file

518
00:26:16,659 --> 00:26:20,500
descriptors but then any of my

519
00:26:20,500 --> 00:26:22,770
applications by default I mean on Linux

520
00:26:22,770 --> 00:26:27,370
can read any of my files so that's a

521
00:26:27,370 --> 00:26:29,830
very very broad capability restricting

522
00:26:29,830 --> 00:26:33,690
this is pretty hard so there are

523
00:26:33,690 --> 00:26:36,059
attempts to make things

524
00:26:36,059 --> 00:26:40,200
finer but the only implementation of

525
00:26:40,200 --> 00:26:41,399
capability is the only full

526
00:26:41,399 --> 00:26:44,609
implementation of capabilities for UNIX

527
00:26:44,609 --> 00:26:47,009
that I know of is capsicum and it's

528
00:26:47,009 --> 00:26:49,950
pretty sophisticated and it is all the

529
00:26:49,950 --> 00:26:52,019
entire network the inter Sri kernel of

530
00:26:52,019 --> 00:26:55,859
Linux or I think it's FreeBSD one of the

531
00:26:55,859 --> 00:27:00,599
BSD I'm not sure exactly which one so

532
00:27:00,599 --> 00:27:01,889
let's look at how we could implement

533
00:27:01,889 --> 00:27:04,639
them in redox I mean there are patches

534
00:27:04,639 --> 00:27:06,659
while they're having several prototypes

535
00:27:06,659 --> 00:27:10,679
but nothing landed so far so in the

536
00:27:10,679 --> 00:27:13,529
world of UNIX everything is a capability

537
00:27:13,529 --> 00:27:16,139
great sorry everything in finest crater

538
00:27:16,139 --> 00:27:18,539
great so a capability is a file

539
00:27:18,539 --> 00:27:19,639
descriptor

540
00:27:19,639 --> 00:27:23,789
the final scripture that opens readme

541
00:27:23,789 --> 00:27:26,969
dot text is the capability to read in

542
00:27:26,969 --> 00:27:28,950
that file descriptor or to write in that

543
00:27:28,950 --> 00:27:32,989
file descriptor but we can extend this

544
00:27:32,989 --> 00:27:38,519
since well since Redux has a pretty open

545
00:27:38,519 --> 00:27:41,729
to interpretation of what a file what a

546
00:27:41,729 --> 00:27:44,809
path is the idea here is to introduce

547
00:27:44,809 --> 00:27:48,710
path and file descriptors that represent

548
00:27:48,710 --> 00:27:52,499
the opera's ation to do something so for

549
00:27:52,499 --> 00:27:56,660
instance this path

550
00:27:56,660 --> 00:28:02,440
so file my directory store the text

551
00:28:02,440 --> 00:28:05,930
reader well it's a glob say that says I

552
00:28:05,930 --> 00:28:08,750
have the authorization to read all the

553
00:28:08,750 --> 00:28:15,290
text files in the directory that's

554
00:28:15,290 --> 00:28:16,760
something that would be interpreted by

555
00:28:16,760 --> 00:28:20,030
the file system so not part of the

556
00:28:20,030 --> 00:28:22,190
kernel so far we have not patched the

557
00:28:22,190 --> 00:28:24,380
current model what we actually have one

558
00:28:24,380 --> 00:28:27,380
patch one patch which tell which tells

559
00:28:27,380 --> 00:28:30,190
the kernel here I can open this file

560
00:28:30,190 --> 00:28:35,330
because I have that capability so this

561
00:28:35,330 --> 00:28:37,520
is using a capability of weakening

562
00:28:37,520 --> 00:28:43,389
capability into actually doing something

563
00:28:46,210 --> 00:28:49,760
the only patch in the kernel at the

564
00:28:49,760 --> 00:28:51,740
moment is just rooting that information

565
00:28:51,740 --> 00:28:53,090
and checking that the file descriptors

566
00:28:53,090 --> 00:28:59,420
match the file system is in charge of

567
00:28:59,420 --> 00:29:04,880
ensuring that this policy is a proof

568
00:29:04,880 --> 00:29:07,820
that you can do that again delegate as

569
00:29:07,820 --> 00:29:09,770
much as possible of security to user

570
00:29:09,770 --> 00:29:15,230
name then of course we have the problem

571
00:29:15,230 --> 00:29:18,230
of distributing these capabilities in

572
00:29:18,230 --> 00:29:22,040
the first place and for this we

573
00:29:22,040 --> 00:29:24,970
introduced essentially a variant of

574
00:29:24,970 --> 00:29:28,190
pipes which currently have the name

575
00:29:28,190 --> 00:29:32,840
cables and a cable is used to drag a

576
00:29:32,840 --> 00:29:36,320
file descriptor across processes so

577
00:29:36,320 --> 00:29:37,460
that's something that you can do in

578
00:29:37,460 --> 00:29:40,580
POSIX using sockets but this is more

579
00:29:40,580 --> 00:29:43,250
much more restricted version that also

580
00:29:43,250 --> 00:29:44,980
doesn't require your privileges

581
00:29:44,980 --> 00:29:48,230
trivially you can exchange file

582
00:29:48,230 --> 00:29:50,000
descriptors with your children if you

583
00:29:50,000 --> 00:29:53,090
have a cable established and well since

584
00:29:53,090 --> 00:29:55,309
everybody is the child of someone and

585
00:29:55,309 --> 00:29:57,470
ability is somehow the sibling or cousin

586
00:29:57,470 --> 00:30:00,620
etc of someone if you want to introduce

587
00:30:00,620 --> 00:30:04,159
a communication from point A to point B

588
00:30:04,159 --> 00:30:06,620
if everybody in the path agrees you can

589
00:30:06,620 --> 00:30:09,019
get one might take a few steps to

590
00:30:09,019 --> 00:30:10,070
establish the community initial

591
00:30:10,070 --> 00:30:11,899
communication but then after that you

592
00:30:11,899 --> 00:30:14,960
have a direct communication and this so

593
00:30:14,960 --> 00:30:17,029
I mentioned that we are there many

594
00:30:17,029 --> 00:30:18,740
things that are not implemented yet so

595
00:30:18,740 --> 00:30:21,970
we do not have a full IPC yet but this

596
00:30:21,970 --> 00:30:24,950
would probably be the first step of our

597
00:30:24,950 --> 00:30:30,129
IPC at least for establishing the IPC

598
00:30:31,240 --> 00:30:37,240
okay so I'm going to start wrapping up

599
00:30:37,539 --> 00:30:42,470
so redux it uses a microkernel to reduce

600
00:30:42,470 --> 00:30:45,230
the TCB because we want to be safe it

601
00:30:45,230 --> 00:30:47,090
uses rust to make the TC bit more

602
00:30:47,090 --> 00:30:49,809
trustworthy because we want to be safe

603
00:30:49,809 --> 00:30:52,490
there are many things to do left in if

604
00:30:52,490 --> 00:30:55,549
you want to help us yeah you can find us

605
00:30:55,549 --> 00:31:00,160
over there thank you for having listened

606
00:31:00,160 --> 00:31:03,279
[Applause]

607
00:31:08,950 --> 00:31:11,960
if you have any questions I'm all yours

608
00:31:11,960 --> 00:31:25,700
yes sir as far as I know it nobody has

609
00:31:25,700 --> 00:31:28,760
benchmark it yet I'm not optimistic but

610
00:31:28,760 --> 00:31:30,680
I know that some people are optimistic

611
00:31:30,680 --> 00:31:35,330
so you get you have all the information

612
00:31:35,330 --> 00:31:56,870
I have now yes so if your route it's

613
00:31:56,870 --> 00:32:01,040
easy you can do anything so there is an

614
00:32:01,040 --> 00:32:02,750
implementation I don't know how final it

615
00:32:02,750 --> 00:32:07,760
is in which any user can locally for the

616
00:32:07,760 --> 00:32:12,460
children of a specific process install

617
00:32:12,730 --> 00:32:16,430
an implementation of a file system so

618
00:32:16,430 --> 00:32:17,900
you have a local implementation of a

619
00:32:17,900 --> 00:32:27,340
file system sorry I didn't

620
00:32:34,860 --> 00:32:39,670
in what in which context I missed half

621
00:32:39,670 --> 00:32:51,910
of your question sir yes soulless so

622
00:32:51,910 --> 00:32:53,680
it's attached to your user instead of

623
00:32:53,680 --> 00:32:55,090
being attached to a process is that what

624
00:32:55,090 --> 00:33:01,139
you're saying yes what does it change

625
00:33:01,890 --> 00:33:04,690
but here we're not to be able to manage

626
00:33:04,690 --> 00:33:05,050
things

627
00:33:05,050 --> 00:33:12,310
that's what okay so that specific

628
00:33:12,310 --> 00:33:14,740
example is home but you could of course

629
00:33:14,740 --> 00:33:17,560
do something entirely different you

630
00:33:17,560 --> 00:33:19,960
could so are we still talking about

631
00:33:19,960 --> 00:33:22,210
installing file systems or are we

632
00:33:22,210 --> 00:33:31,660
talking about okay so for instance let's

633
00:33:31,660 --> 00:33:33,160
say I change my heart and return to

634
00:33:33,160 --> 00:33:36,430
being a Firefox developer Firefox has

635
00:33:36,430 --> 00:33:41,500
any basically kind of operating system

636
00:33:41,500 --> 00:33:44,680
running inside an operating system needs

637
00:33:44,680 --> 00:33:46,720
to be able to send box things in

638
00:33:46,720 --> 00:33:50,380
internally so the boundary is not the

639
00:33:50,380 --> 00:33:53,520
home file system or the home directory

640
00:33:53,520 --> 00:33:57,310
the boundary is things that can run on

641
00:33:57,310 --> 00:33:59,320
the web things that can run as add-ons

642
00:33:59,320 --> 00:34:01,810
think that can run as the browser and

643
00:34:01,810 --> 00:34:04,800
these are entirely different boundaries

644
00:34:04,800 --> 00:34:09,850
so you typically might want some of your

645
00:34:09,850 --> 00:34:12,460
web stuff to access the phone directory

646
00:34:12,460 --> 00:34:14,889
for instance for reading but possibly

647
00:34:14,889 --> 00:34:17,168
not all of the web stuff things like

648
00:34:17,168 --> 00:34:18,699
that so you want something it's pretty

649
00:34:18,699 --> 00:34:21,760
fine-grained so I think that word has

650
00:34:21,760 --> 00:34:27,580
something for that but I'm not sure okay

651
00:34:27,580 --> 00:34:31,230
you're doing your jail is that it yeah

652
00:34:31,230 --> 00:34:39,190
so that's yeah that's a higher it's a

653
00:34:39,190 --> 00:34:40,780
more heavy-handed approach in your case

654
00:34:40,780 --> 00:34:43,179
which again it works we're trying to do

655
00:34:43,179 --> 00:34:45,050
something more flexible

656
00:34:45,050 --> 00:34:50,840
oh that's quite possible actually I

657
00:34:50,840 --> 00:34:52,790
believe that we can implement jigs using

658
00:34:52,790 --> 00:34:55,850
that too so I'm not sure that maybe

659
00:34:55,850 --> 00:34:59,360
there are just equivalent to it we can

660
00:34:59,360 --> 00:35:17,570
discuss that so fine yes so yes so so

661
00:35:17,570 --> 00:35:21,380
rest has at least three no four moment

662
00:35:21,380 --> 00:35:22,910
too but there is a third one distributed

663
00:35:22,910 --> 00:35:27,860
layers of how much you can build in so

664
00:35:27,860 --> 00:35:31,340
you can either put the full kitchen sink

665
00:35:31,340 --> 00:35:34,640
I mean the full standard library or you

666
00:35:34,640 --> 00:35:37,460
can get only the core library which is

667
00:35:37,460 --> 00:35:40,220
designed for embedding which is what we

668
00:35:40,220 --> 00:35:43,100
are using and there is a proposal for

669
00:35:43,100 --> 00:35:44,840
something even smaller than the core

670
00:35:44,840 --> 00:35:54,290
library but oh nice I said we are

671
00:35:54,290 --> 00:35:56,330
proposal something smaller I don't think

672
00:35:56,330 --> 00:35:58,040
it's implemented yet I don't think they

673
00:35:58,040 --> 00:36:01,220
have a fixed list of what it is but the

674
00:36:01,220 --> 00:36:02,990
I mean I know people who actually do

675
00:36:02,990 --> 00:36:05,690
embedding with the embedding library it

676
00:36:05,690 --> 00:36:10,210
works I does it's answer your question

677
00:36:10,210 --> 00:36:12,380
because I could not give you the number

678
00:36:12,380 --> 00:36:14,710
of lines

679
00:36:17,370 --> 00:36:20,500
[Music]

680
00:36:21,980 --> 00:36:25,339
yes so that's basically the difference

681
00:36:25,339 --> 00:36:27,500
between the core library and the

682
00:36:27,500 --> 00:36:29,390
standard library but there is something

683
00:36:29,390 --> 00:36:31,790
even smaller than the core library and I

684
00:36:31,790 --> 00:36:32,960
don't know it don't remember exactly the

685
00:36:32,960 --> 00:36:35,630
difference maybe you want to provide

686
00:36:35,630 --> 00:36:57,349
your home your own we are from zero

687
00:36:57,349 --> 00:37:05,420
point zero point seven so far I mean

688
00:37:05,420 --> 00:37:09,200
there is the redox kernel you could put

689
00:37:09,200 --> 00:37:10,940
anything on top of it we have a number

690
00:37:10,940 --> 00:37:13,070
of utilities on top of it I don't think

691
00:37:13,070 --> 00:37:14,990
you have plants that go quite that far

692
00:37:14,990 --> 00:37:15,650
yet

693
00:37:15,650 --> 00:37:19,070
I think anything can be changed at that

694
00:37:19,070 --> 00:37:21,859
stage if you want to download an ISO

695
00:37:21,859 --> 00:37:23,359
it's going to come with a few standard

696
00:37:23,359 --> 00:37:26,270
stuff of course but that's the best

697
00:37:26,270 --> 00:37:27,380
answer I can give you at the moment

698
00:37:27,380 --> 00:37:35,210
sorry that was someone here that's a

699
00:37:35,210 --> 00:37:37,790
good question so actually have been out

700
00:37:37,790 --> 00:37:39,319
of touch for one month so it's quite

701
00:37:39,319 --> 00:37:40,760
possible that everything has changed in

702
00:37:40,760 --> 00:37:41,619
the meantime

703
00:37:41,619 --> 00:37:47,660
but things such as so going further into

704
00:37:47,660 --> 00:37:51,349
jail or our capabilities or things in

705
00:37:51,349 --> 00:37:54,079
that direction there are attempts to try

706
00:37:54,079 --> 00:37:58,130
to reduce the size of the kernel

707
00:37:58,130 --> 00:38:00,230
microkernel further and reduce number of

708
00:38:00,230 --> 00:38:03,829
Cisco's for instance there is some magic

709
00:38:03,829 --> 00:38:06,260
involved in pipe at the moment and we'd

710
00:38:06,260 --> 00:38:07,880
like to get rid of that magic things

711
00:38:07,880 --> 00:38:11,599
like that there was something else

712
00:38:11,599 --> 00:38:13,250
important in that direction I don't

713
00:38:13,250 --> 00:38:15,170
remember exactly what I tell you if I oh

714
00:38:15,170 --> 00:38:16,940
there are people who want to work on

715
00:38:16,940 --> 00:38:20,329
getting rid of memory memory allocations

716
00:38:20,329 --> 00:38:22,310
inside the kernel I don't know if there

717
00:38:22,310 --> 00:38:23,839
are actually going to work on this but

718
00:38:23,839 --> 00:38:26,869
they said they are interested that's one

719
00:38:26,869 --> 00:38:28,579
direction the other direction is we want

720
00:38:28,579 --> 00:38:32,810
to have a full-featured web server

721
00:38:32,810 --> 00:38:37,250
Redux and we are pretty close to this

722
00:38:37,250 --> 00:38:39,800
actually because we already have the all

723
00:38:39,800 --> 00:38:42,980
the IO layers maybe it has been finished

724
00:38:42,980 --> 00:38:44,840
in the last month I don't know I mean I

725
00:38:44,840 --> 00:38:47,120
think a person who wanted that told me

726
00:38:47,120 --> 00:38:49,340
and who's our benevolent dictator for

727
00:38:49,340 --> 00:38:52,970
life said he could have something done

728
00:38:52,970 --> 00:38:55,330
at the end of March

729
00:38:55,330 --> 00:38:59,210
maybe it's done already I don't know so

730
00:38:59,210 --> 00:39:09,530
these are the general ideas yes the all

731
00:39:09,530 --> 00:39:14,210
the platform stuff is well as related so

732
00:39:14,210 --> 00:39:15,980
I know that it's ported on several

733
00:39:15,980 --> 00:39:19,100
platforms already I have not even looked

734
00:39:19,100 --> 00:39:20,750
at these directories at all so I cannot

735
00:39:20,750 --> 00:39:24,080
tell you the actual difficulty I know it

736
00:39:24,080 --> 00:39:27,890
needs an MMU things like that I don't

737
00:39:27,890 --> 00:39:29,600
remember what nips has I think I don't

738
00:39:29,600 --> 00:39:32,110
have anything

739
00:39:33,820 --> 00:39:36,650
each other I think um I mean I haven't

740
00:39:36,650 --> 00:39:38,810
she was missing 10 years so but I'm sure

741
00:39:38,810 --> 00:39:40,040
I think nips has everything that's

742
00:39:40,040 --> 00:39:42,410
needed so I don't know it has a too many

743
00:39:42,410 --> 00:39:46,190
cooperations right so I think that's all

744
00:39:46,190 --> 00:39:50,420
that's reading medium - so you have my

745
00:39:50,420 --> 00:39:52,640
best guess there was a question over

746
00:39:52,640 --> 00:40:01,480
there yes

747
00:40:01,550 --> 00:40:10,010
oh that's very easy

748
00:40:10,010 --> 00:40:13,190
100% rests oh I mean okay sorry no there

749
00:40:13,190 --> 00:40:18,260
isn't the architecture part so it's like

750
00:40:18,260 --> 00:40:19,400
there are five files or something

751
00:40:19,400 --> 00:40:23,750
written in assembly no no see in between

752
00:40:23,750 --> 00:40:26,900
I mean rest basically produces C code so

753
00:40:26,900 --> 00:40:29,150
there is no reason to do see the worst

754
00:40:29,150 --> 00:40:31,160
case you can do if you won't really want

755
00:40:31,160 --> 00:40:33,470
to do rest is put everything annotate

756
00:40:33,470 --> 00:40:36,050
everything is unsafe and actually write

757
00:40:36,050 --> 00:40:40,510
C code with the rest centers

758
00:40:52,390 --> 00:40:55,509
[Music]

759
00:41:02,800 --> 00:41:05,090
so for the most part we're going our own

760
00:41:05,090 --> 00:41:07,130
way we sometimes do read papers from

761
00:41:07,130 --> 00:41:13,270
other stuff but it's mostly the idea

762
00:41:13,270 --> 00:41:16,970
mostly work let's not hide it this is an

763
00:41:16,970 --> 00:41:19,850
open source project we're having fun so

764
00:41:19,850 --> 00:41:22,070
the objective is not to do the same

765
00:41:22,070 --> 00:41:23,480
thing the exact same thing as someone

766
00:41:23,480 --> 00:41:27,710
else we can draw inspiration but that's

767
00:41:27,710 --> 00:41:35,510
we try not to do the same thing thank

768
00:41:35,510 --> 00:41:37,900
you very much

