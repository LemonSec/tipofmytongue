1
00:00:00,060 --> 00:00:03,170
speaker on

2
00:00:05,109 --> 00:00:08,540
is a member of other career Italy

3
00:00:08,540 --> 00:00:10,969
contribute to the Nevada compiler its

4
00:00:10,969 --> 00:00:12,800
twist window and you will speak above

5
00:00:12,800 --> 00:00:14,480
sixty four-bit bar with our programming

6
00:00:14,480 --> 00:00:20,119
let's upload him like oh yeah let's take

7
00:00:20,119 --> 00:00:24,439
care of the right anyone hello thank you

8
00:00:24,439 --> 00:00:27,170
for coming so it's a talk about the

9
00:00:27,170 --> 00:00:31,099
metal platform which is usually sings

10
00:00:31,099 --> 00:00:35,410
that comes without boxes like that and

11
00:00:35,410 --> 00:00:38,530
particularly with any operating system

12
00:00:38,530 --> 00:00:41,750
so when you program on that metal

13
00:00:41,750 --> 00:00:43,400
platform you don't use a new a parting

14
00:00:43,400 --> 00:00:48,260
system why you want to do that the main

15
00:00:48,260 --> 00:00:50,059
reason is because there is no enough

16
00:00:50,059 --> 00:00:51,949
resources to use an operating system for

17
00:00:51,949 --> 00:00:55,369
exam this is Arduino size - not enough

18
00:00:55,369 --> 00:00:58,940
memory travel operating system but there

19
00:00:58,940 --> 00:01:03,199
are other reasons it's fun but it's

20
00:01:03,199 --> 00:01:06,710
different from usual it's fun you can

21
00:01:06,710 --> 00:01:10,010
learn a lot of things low-level things

22
00:01:10,010 --> 00:01:11,630
as a lot of things to learn about when

23
00:01:11,630 --> 00:01:17,000
you do bare metal programming and I have

24
00:01:17,000 --> 00:01:21,500
chosen Raspberry Pi 3 why mainly because

25
00:01:21,500 --> 00:01:24,410
it's very very popular which means are a

26
00:01:24,410 --> 00:01:26,200
lot of forums

27
00:01:26,200 --> 00:01:31,180
yeah - towards about on the web about

28
00:01:31,180 --> 00:01:34,330
how to program directly on Raspberry Pi

29
00:01:34,330 --> 00:01:37,100
and also because it's a very safe

30
00:01:37,100 --> 00:01:40,100
platform you cannot break it it will

31
00:01:40,100 --> 00:01:46,280
always work however there are some

32
00:01:46,280 --> 00:01:50,210
drawbacks with raspberry pi 3 because

33
00:01:50,210 --> 00:01:52,610
it's berries it's based on the bottom

34
00:01:52,610 --> 00:01:55,510
system Oh chip there are a very few

35
00:01:55,510 --> 00:01:59,930
documentation about it here is a page

36
00:01:59,930 --> 00:02:02,710
about the raspberry pi 3 but for

37
00:02:02,710 --> 00:02:06,890
documentation which basically say ok

38
00:02:06,890 --> 00:02:11,900
it's a v8 CPU thank you it's also

39
00:02:11,900 --> 00:02:13,790
written in the marketing documentation

40
00:02:13,790 --> 00:02:16,850
and form of documentation crsp by su

41
00:02:16,850 --> 00:02:18,110
alright be alright

42
00:02:18,110 --> 00:02:20,960
very PI's one and end of the

43
00:02:20,960 --> 00:02:25,610
documentation not enough but we can deal

44
00:02:25,610 --> 00:02:28,280
with that so you know maybe you know

45
00:02:28,280 --> 00:02:30,860
about the raspberry pi family the first

46
00:02:30,860 --> 00:02:32,840
one was a PI one which R is based on

47
00:02:32,840 --> 00:02:38,090
very what was a old uncle the PI 2 was

48
00:02:38,090 --> 00:02:39,650
much more interesting because it's based

49
00:02:39,650 --> 00:02:43,209
on a new car and R for course so I

50
00:02:43,209 --> 00:02:46,220
wanted it and the last one is even

51
00:02:46,220 --> 00:02:50,840
better because it's for 64-bit cause so

52
00:02:50,840 --> 00:02:55,610
I want it and I want to use it the

53
00:02:55,610 --> 00:02:58,700
architecture of the Raspberry Pi is a

54
00:02:58,700 --> 00:03:01,840
little bit weird there are two words are

55
00:03:01,840 --> 00:03:08,930
for 64-bit CPUs that share level to cage

56
00:03:08,930 --> 00:03:13,570
and are also the video call GPU which

57
00:03:13,570 --> 00:03:16,489
contains the firmware word which use the

58
00:03:16,489 --> 00:03:22,340
family as a share as a memory the boot

59
00:03:22,340 --> 00:03:24,530
process of the platform is interesting

60
00:03:24,530 --> 00:03:26,720
because it's I would say unusual because

61
00:03:26,720 --> 00:03:30,130
it's the GPU that starts the first

62
00:03:30,130 --> 00:03:35,180
running its VMware and then loading from

63
00:03:35,180 --> 00:03:40,580
the SD card the application into the

64
00:03:40,580 --> 00:03:46,160
memory and then once the application is

65
00:03:46,160 --> 00:03:52,220
loaded its start all the CPUs so the

66
00:03:52,220 --> 00:03:54,230
nice things about this platform does the

67
00:03:54,230 --> 00:03:58,570
PI platform is that the CPUs boots start

68
00:03:58,570 --> 00:04:02,090
from your code not from family Akkad

69
00:04:02,090 --> 00:04:08,000
only the GPU use firmware there are a

70
00:04:08,000 --> 00:04:10,130
couple of files that after need to be

71
00:04:10,130 --> 00:04:15,769
present on the SD card some files that

72
00:04:15,769 --> 00:04:18,310
are used by the GPU to boot

73
00:04:18,310 --> 00:04:20,750
configuration file which is interesting

74
00:04:20,750 --> 00:04:27,830
and your image that will be loaded in in

75
00:04:27,830 --> 00:04:31,900
the ROM and will be executed by the arm

76
00:04:31,900 --> 00:04:35,770
cpu's if you want to be secured 64-bit

77
00:04:35,770 --> 00:04:41,230
cards you have to specify some command

78
00:04:41,230 --> 00:04:45,520
in the config dot txt file but it's a

79
00:04:45,520 --> 00:04:50,010
explained so let's start our first

80
00:04:50,010 --> 00:04:53,950
diameter problem usually we do things

81
00:04:53,950 --> 00:04:57,850
that eyes are blinking leds or writing a

82
00:04:57,850 --> 00:05:00,760
message on the Casal so I will use

83
00:05:00,760 --> 00:05:03,670
something we'll do something quite

84
00:05:03,670 --> 00:05:05,380
common which is a hello world on the

85
00:05:05,380 --> 00:05:10,810
console and for that you need a terminal

86
00:05:10,810 --> 00:05:15,820
emulator connect its who sail to USB

87
00:05:15,820 --> 00:05:20,260
converter this is the URL of the code I

88
00:05:20,260 --> 00:05:25,930
will show positive so this is USB to

89
00:05:25,930 --> 00:05:28,810
serial converter and you connect it

90
00:05:28,810 --> 00:05:33,700
directly on some pin in the editor of

91
00:05:33,700 --> 00:05:39,150
the Raspberry Pi 3 very bare metal

92
00:05:40,470 --> 00:05:43,750
quickly this is a make file so there are

93
00:05:43,750 --> 00:05:46,240
two main files the CRT go which is Assam

94
00:05:46,240 --> 00:05:47,980
which is that some big code that is

95
00:05:47,980 --> 00:05:55,030
executed and the main C code we don't

96
00:05:55,030 --> 00:05:59,290
use any C library we use linker script

97
00:05:59,290 --> 00:06:04,600
to tell of section are grouped and we

98
00:06:04,600 --> 00:06:07,300
create not an elf file in a fight but

99
00:06:07,300 --> 00:06:09,730
Venera file so at the end you have to

100
00:06:09,730 --> 00:06:16,870
copy this file on the unless decode the

101
00:06:16,870 --> 00:06:22,060
CR T 0 is the usual name for 0 and 1

102
00:06:22,060 --> 00:06:25,030
times 0 which means the satisfied to be

103
00:06:25,030 --> 00:06:27,760
executed by the in fact none present 0

104
00:06:27,760 --> 00:06:29,130
on time

105
00:06:29,130 --> 00:06:31,420
it is really written in decimal because

106
00:06:31,420 --> 00:06:34,030
you do so low-level things that it

107
00:06:34,030 --> 00:06:37,630
cannot be expressed by C code it has to

108
00:06:37,630 --> 00:06:39,550
initialize the car the board also card

109
00:06:39,550 --> 00:06:42,970
but in the on the raspberry pi it's very

110
00:06:42,970 --> 00:06:45,100
easy because the Jeep

111
00:06:45,100 --> 00:06:48,220
you does most of the initialization for

112
00:06:48,220 --> 00:06:53,110
example it does setups Zeron it does set

113
00:06:53,110 --> 00:06:57,280
up the video so everything is much

114
00:06:57,280 --> 00:07:01,240
easier on on this platform however you

115
00:07:01,240 --> 00:07:05,440
still have to create nebula mods small

116
00:07:05,440 --> 00:07:11,050
Nestle's right to execute the C code so

117
00:07:11,050 --> 00:07:14,830
this is the wall assembly code for the

118
00:07:14,830 --> 00:07:17,080
hello world this is the first

119
00:07:17,080 --> 00:07:20,770
instruction is acquitted there are 4

120
00:07:20,770 --> 00:07:24,340
CPUs and all the fuzzy P use are started

121
00:07:24,340 --> 00:07:28,540
together so you need to put into a busy

122
00:07:28,540 --> 00:07:31,120
the loop switch CPU and keep only one

123
00:07:31,120 --> 00:07:34,440
which is done by this code la vidas code

124
00:07:34,440 --> 00:07:37,720
and then you have to initialize the last

125
00:07:37,720 --> 00:07:39,940
zip the worldly first CPU the main CPU

126
00:07:39,940 --> 00:07:43,450
here you load the stack pointer here you

127
00:07:43,450 --> 00:07:46,090
clear the memory that has to be cleared

128
00:07:46,090 --> 00:07:48,910
for the sea environment because all the

129
00:07:48,910 --> 00:07:50,740
variables are initialized to zero this

130
00:07:50,740 --> 00:07:55,740
is done here and finally you call main

131
00:07:56,790 --> 00:08:00,970
so our C code C code right start with

132
00:08:00,970 --> 00:08:05,200
main like normal application and this is

133
00:08:05,200 --> 00:08:06,610
a code we have seen previously that's

134
00:08:06,610 --> 00:08:11,080
called main you can do whatever you want

135
00:08:11,080 --> 00:08:14,770
to do in C but there is no sis no sis

136
00:08:14,770 --> 00:08:17,380
course so and no silabowi so you have to

137
00:08:17,380 --> 00:08:22,020
write everything you want to execute

138
00:08:24,139 --> 00:08:28,430
this is the main card so that is next

139
00:08:28,430 --> 00:08:33,679
slide for our new art so the sale Kali

140
00:08:33,679 --> 00:08:37,669
is incised in size and we do just put in

141
00:08:37,669 --> 00:08:38,299
a word

142
00:08:38,299 --> 00:08:42,019
puts is here it's 20 every clock tears

143
00:08:42,019 --> 00:08:43,578
until they could every prime to

144
00:08:43,578 --> 00:08:46,450
printable character you did with

145
00:08:46,450 --> 00:08:49,459
extended backslash n to backslash n

146
00:08:49,459 --> 00:08:51,890
backslash yeah and this is how to print

147
00:08:51,890 --> 00:08:55,670
one character so we wait until the UART

148
00:08:55,670 --> 00:08:58,579
is ready and went is ready we write one

149
00:08:58,579 --> 00:09:02,000
byte at one specific location that will

150
00:09:02,000 --> 00:09:04,010
have a side effect and would be sent

151
00:09:04,010 --> 00:09:08,440
over the serial line this is how to

152
00:09:08,440 --> 00:09:14,540
initialize the UART so this is most of

153
00:09:14,540 --> 00:09:17,120
the code so this is very bare metal

154
00:09:17,120 --> 00:09:21,170
things we change some bits at some

155
00:09:21,170 --> 00:09:23,750
specific advice that are specified here

156
00:09:23,750 --> 00:09:26,660
and this as a side effect of initial

157
00:09:26,660 --> 00:09:31,070
design initializing he enabling the new

158
00:09:31,070 --> 00:09:33,290
art specifying number of bits that would

159
00:09:33,290 --> 00:09:36,160
be transmitted specifying the speed of

160
00:09:36,160 --> 00:09:38,990
the UART and here we have to specify

161
00:09:38,990 --> 00:09:43,190
that the pin in fact used for the world

162
00:09:43,190 --> 00:09:46,269
ok very what this is documented in the

163
00:09:46,269 --> 00:09:50,630
raspberry pi documentation and this is

164
00:09:50,630 --> 00:09:55,910
very very bad stuff to correctly gather

165
00:09:55,910 --> 00:10:01,519
all the things and specify address we

166
00:10:01,519 --> 00:10:04,720
use an eco script look at the scene very

167
00:10:04,720 --> 00:10:07,699
interesting and then you have your first

168
00:10:07,699 --> 00:10:11,630
hello world program so what what can you

169
00:10:11,630 --> 00:10:12,850
do next

170
00:10:12,850 --> 00:10:16,490
except things like hello world in

171
00:10:16,490 --> 00:10:19,760
different language you can write your

172
00:10:19,760 --> 00:10:22,579
own drivers well if you want to start

173
00:10:22,579 --> 00:10:24,230
you can start with GPIO because that's

174
00:10:24,230 --> 00:10:28,519
very easy just a way to send signal on

175
00:10:28,519 --> 00:10:33,199
the headers its quasi SPI

176
00:10:33,199 --> 00:10:35,329
as where to communicate using server

177
00:10:35,329 --> 00:10:36,640
protocol and

178
00:10:36,640 --> 00:10:41,590
very easy using SD card isn't very

179
00:10:41,590 --> 00:10:47,080
difficult to program but is a very small

180
00:10:47,080 --> 00:10:49,930
stack of things to do to communicate

181
00:10:49,930 --> 00:10:54,190
with a SD card video is very easy

182
00:10:54,190 --> 00:10:56,740
because most of the work if not all is

183
00:10:56,740 --> 00:10:59,080
done by the GPU firmware so you just

184
00:10:59,080 --> 00:11:01,750
have to say okay I want a frame buffer

185
00:11:01,750 --> 00:11:05,440
and you get a reply so just from buffer

186
00:11:05,440 --> 00:11:08,980
is at this advice with that weeds and

187
00:11:08,980 --> 00:11:12,490
that hate you can do drivers if you want

188
00:11:12,490 --> 00:11:15,820
for us be able to switch it on it except

189
00:11:15,820 --> 00:11:19,870
that's much difficult and documentation

190
00:11:19,870 --> 00:11:23,440
is not very very extensive and these

191
00:11:23,440 --> 00:11:30,010
topics if you want more performance you

192
00:11:30,010 --> 00:11:34,840
have to enable cash because without cash

193
00:11:34,840 --> 00:11:38,250
well the CPU start with cash disabled

194
00:11:38,250 --> 00:11:46,350
which create abysmal performance so you

195
00:11:46,350 --> 00:11:48,910
want really to enable cash for

196
00:11:48,910 --> 00:11:50,830
performance except that if you enable

197
00:11:50,830 --> 00:11:53,470
cash you have to specify that I origins

198
00:11:53,470 --> 00:11:56,050
are not catchable because I origin of

199
00:11:56,050 --> 00:11:57,930
side effects with images and must be

200
00:11:57,930 --> 00:12:02,050
stopped as we will just we must be good

201
00:12:02,050 --> 00:12:04,870
to the device and we must be calm to the

202
00:12:04,870 --> 00:12:08,410
from the device and if you want to

203
00:12:08,410 --> 00:12:10,030
specify that some regions are not

204
00:12:10,030 --> 00:12:12,250
possible you have to set up the MMU

205
00:12:12,250 --> 00:12:17,620
which is at a bit complex and when in

206
00:12:17,620 --> 00:12:19,210
the setup you specify that some regions

207
00:12:19,210 --> 00:12:23,070
are not catchable and the easiest way to

208
00:12:23,070 --> 00:12:29,200
set up the MU is to use 1:1 mapping so

209
00:12:29,200 --> 00:12:34,410
no translation just writes on regions

210
00:12:34,410 --> 00:12:39,990
you cannot so try to use the four calls

211
00:12:39,990 --> 00:12:42,730
so as we have seen all the process of

212
00:12:42,730 --> 00:12:45,960
start and we have put three on in

213
00:12:45,960 --> 00:12:50,110
in busy loop there is a specific

214
00:12:50,110 --> 00:12:52,960
register to get the call number so you

215
00:12:52,960 --> 00:12:56,320
get a number from 1 to 3 you have to

216
00:12:56,320 --> 00:12:59,200
specify a stack for each processor and

217
00:12:59,200 --> 00:13:02,230
to execute a specific routine start

218
00:13:02,230 --> 00:13:05,800
routine for each processor but that from

219
00:13:05,800 --> 00:13:10,330
get which lies ad where only ones if you

220
00:13:10,330 --> 00:13:14,140
want to go even further you will have to

221
00:13:14,140 --> 00:13:17,170
know that call start as the highest

222
00:13:17,170 --> 00:13:21,100
protection level yes we and you can

223
00:13:21,100 --> 00:13:23,470
switch to lower level is equal to is a

224
00:13:23,470 --> 00:13:26,440
good code to lower level to go to well

225
00:13:26,440 --> 00:13:30,490
from exception level 2 hypervisor level

226
00:13:30,490 --> 00:13:32,520
and then from a permissive level to

227
00:13:32,520 --> 00:13:35,530
canal level and if you want to can also

228
00:13:35,530 --> 00:13:40,750
go to user level there are code in the

229
00:13:40,750 --> 00:13:43,870
SMP directory that does exactly that

230
00:13:43,870 --> 00:13:50,700
so it setups it enabled cache it setups

231
00:13:50,700 --> 00:13:56,530
mmm ooh and under all start all the four

232
00:13:56,530 --> 00:14:02,650
calls what we have done with that we

233
00:14:02,650 --> 00:14:04,840
have done well one colleague is not

234
00:14:04,840 --> 00:14:05,290
misery

235
00:14:05,290 --> 00:14:08,820
what culling has done by casting

236
00:14:08,820 --> 00:14:13,750
demonstrate demo we choose a focus we

237
00:14:13,750 --> 00:14:18,150
choose DMS 2d from the GPU to speed up

238
00:14:18,150 --> 00:14:21,060
except that it doesn't use the GPU and

239
00:14:21,060 --> 00:14:25,960
we have reached 60 frame per second this

240
00:14:25,960 --> 00:14:29,490
is a screenshot well not a photo and

241
00:14:29,490 --> 00:14:33,550
this is if I can't play it this is a

242
00:14:33,550 --> 00:14:38,670
video from the sadaebu

243
00:14:39,740 --> 00:14:49,040
so damn it all that's it thanks for this

