1
00:00:04,540 --> 00:00:06,760
hi everyone thanks for thinking

2
00:00:06,760 --> 00:00:08,710
sometimes in your morning to attend this

3
00:00:08,710 --> 00:00:12,430
talk so I'm going to talk about maybe

4
00:00:12,430 --> 00:00:15,730
that way I read about to talk about the

5
00:00:15,730 --> 00:00:18,130
challenges and secrets so the real-time

6
00:00:18,130 --> 00:00:21,310
world like real-time applications will

7
00:00:21,310 --> 00:00:23,939
time infrastructure all the things that

8
00:00:23,939 --> 00:00:28,900
allow you to create real-time apps so I

9
00:00:28,900 --> 00:00:32,710
bought in LaGrange you I am software

10
00:00:32,710 --> 00:00:36,730
engineer work at Prevnar real-time that

11
00:00:36,730 --> 00:00:39,969
has some network you can find me I'm

12
00:00:39,969 --> 00:00:42,129
super tinu on Twitter I'm so good when

13
00:00:42,129 --> 00:00:46,989
we tell you on github this DM o this

14
00:00:46,989 --> 00:00:51,370
presentation is - yeah to be simple as

15
00:00:51,370 --> 00:00:54,789
possible I didn't want to go much into

16
00:00:54,789 --> 00:00:57,820
the details but we will tackle the main

17
00:00:57,820 --> 00:01:00,910
matrix so first of all we like to show

18
00:01:00,910 --> 00:01:02,949
you a short video that gives you a bit

19
00:01:02,949 --> 00:01:05,230
of context about what are the real-time

20
00:01:05,230 --> 00:01:08,950
apps so I just saw just examples of real

21
00:01:08,950 --> 00:01:12,270
Tara's periscope just ride sharing

22
00:01:12,270 --> 00:01:20,890
applications games IOT and remote

23
00:01:20,890 --> 00:01:22,930
control all this stuff are real-time

24
00:01:22,930 --> 00:01:27,040
applications and when you talk about

25
00:01:27,040 --> 00:01:28,420
real-time apps

26
00:01:28,420 --> 00:01:30,790
it means real-time data so if it's right

27
00:01:30,790 --> 00:01:33,010
cheering ad messaging app training as

28
00:01:33,010 --> 00:01:37,360
will be different kind of data and in

29
00:01:37,360 --> 00:01:41,950
order to to share this data and have

30
00:01:41,950 --> 00:01:44,080
this data come coming back and forth

31
00:01:44,080 --> 00:01:49,780
between the device or clients you need a

32
00:01:49,780 --> 00:01:55,090
protocol and for that you need real-time

33
00:01:55,090 --> 00:01:58,180
protocol and what is the real temporary

34
00:01:58,180 --> 00:02:02,110
goal actually real-time protocol is a

35
00:02:02,110 --> 00:02:05,290
protocol that allows you to have always

36
00:02:05,290 --> 00:02:08,199
own connection which is very directional

37
00:02:08,199 --> 00:02:10,720
fast and which is separate everywhere

38
00:02:10,720 --> 00:02:15,689
and that's all we need to do real-time

39
00:02:15,689 --> 00:02:18,819
applications so people will think

40
00:02:18,819 --> 00:02:22,329
well I will do some vegetable HTTP HTTP

41
00:02:22,329 --> 00:02:25,659
polling to some real-time feature in my

42
00:02:25,659 --> 00:02:30,400
app yeah we'll put my my server every

43
00:02:30,400 --> 00:02:33,069
one second it's gotta be right but yeah

44
00:02:33,069 --> 00:02:34,629
it's not gonna be a real time it's not

45
00:02:34,629 --> 00:02:36,700
going to be efficient they're gonna be

46
00:02:36,700 --> 00:02:43,209
on always own not scalable and so on so

47
00:02:43,209 --> 00:02:44,859
there are a lot of protocols out there I

48
00:02:44,859 --> 00:02:47,680
should be streaming WebSocket Kafka and

49
00:02:47,680 --> 00:02:50,469
qtt long boring servers and even so get

50
00:02:50,469 --> 00:02:56,310
the tayo WebSocket all this and what are

51
00:02:56,310 --> 00:03:00,730
what make them different and what's the

52
00:03:00,730 --> 00:03:01,319
best

53
00:03:01,319 --> 00:03:04,930
Kuroko it's kind of a hard question it's

54
00:03:04,930 --> 00:03:06,510
kind of tough question to answer it

55
00:03:06,510 --> 00:03:10,389
actually all the different main

56
00:03:10,389 --> 00:03:12,879
real-time apps like Facebook Messenger

57
00:03:12,879 --> 00:03:16,090
Facebook itself slack Huber what's up

58
00:03:16,090 --> 00:03:19,439
all this when you think about this main

59
00:03:19,439 --> 00:03:22,049
companies that are using real-time

60
00:03:22,049 --> 00:03:24,970
features intensively they are all using

61
00:03:24,970 --> 00:03:28,419
different protocol XMPP Kafka HTTP long

62
00:03:28,419 --> 00:03:32,799
polling WebSocket and so on and what

63
00:03:32,799 --> 00:03:34,290
makes them different

64
00:03:34,290 --> 00:03:37,389
so actually they all work on top of TCP

65
00:03:37,389 --> 00:03:42,040
and so you you maybe remember these OSI

66
00:03:42,040 --> 00:03:47,109
layers you have TCP no natural layer and

67
00:03:47,109 --> 00:03:48,400
the application layer with all the

68
00:03:48,400 --> 00:03:51,489
protocols which are all working on top

69
00:03:51,489 --> 00:03:55,720
of TCP and so they are all sending TCP

70
00:03:55,720 --> 00:03:59,470
packets at the end of the day we have to

71
00:03:59,470 --> 00:04:05,760
be sockets blood packets to be pockets

72
00:04:05,790 --> 00:04:10,410
so when you initiate we all time

73
00:04:10,410 --> 00:04:12,630
communication we have a server while

74
00:04:12,630 --> 00:04:15,060
other steps that are needed to be done

75
00:04:15,060 --> 00:04:17,250
so first of all you need to do a DNS

76
00:04:17,250 --> 00:04:20,519
lookup so I get the address of the

77
00:04:20,519 --> 00:04:23,070
server so you did you do the DNS lookup

78
00:04:23,070 --> 00:04:27,720
you view the idea the UDP protocol and

79
00:04:27,720 --> 00:04:29,850
you get an IP of a server and then the

80
00:04:29,850 --> 00:04:32,450
server you will reach the server

81
00:04:32,450 --> 00:04:35,610
initiate a sip TCP socket for a socket

82
00:04:35,610 --> 00:04:37,830
connection you will need to do a TCP

83
00:04:37,830 --> 00:04:40,290
handshake sign check and finally the

84
00:04:40,290 --> 00:04:46,050
request so exchange round-trip of TCP IP

85
00:04:46,050 --> 00:04:53,940
packets so what makes the what makes a

86
00:04:53,940 --> 00:04:58,440
speak connection real-time what makes it

87
00:04:58,440 --> 00:05:00,930
different than other protocols like HTTP

88
00:05:00,930 --> 00:05:04,500
or basic raw HTTP or pop3 or any other

89
00:05:04,500 --> 00:05:08,850
protocols is that this both the clients

90
00:05:08,850 --> 00:05:10,710
and both the servers will understand

91
00:05:10,710 --> 00:05:13,590
each other they need to keep this TCP

92
00:05:13,590 --> 00:05:17,070
socket open and that's for all different

93
00:05:17,070 --> 00:05:21,210
protocols that's the same thing is that

94
00:05:21,210 --> 00:05:24,870
the client and the server keeps the the

95
00:05:24,870 --> 00:05:29,610
socket open so that once the deceased

96
00:05:29,610 --> 00:05:32,340
organ is open then you they exchange TCP

97
00:05:32,340 --> 00:05:35,310
packets and most of the time the server

98
00:05:35,310 --> 00:05:40,740
will send just push some TC some data to

99
00:05:40,740 --> 00:05:44,820
the clients so I like to talk about HP

100
00:05:44,820 --> 00:05:46,830
long Pauling so Facebook uses it so it

101
00:05:46,830 --> 00:05:48,690
works well but it's kind of tricky

102
00:05:48,690 --> 00:05:52,200
because what happens with TCP sockets if

103
00:05:52,200 --> 00:05:55,440
you look at if you inspect your network

104
00:05:55,440 --> 00:05:59,610
calls from the Google developer tools is

105
00:05:59,610 --> 00:06:03,120
that you open the xhr tabs by the way if

106
00:06:03,120 --> 00:06:04,410
you just like the tips you want to

107
00:06:04,410 --> 00:06:06,990
inspect you can also use the WebSocket

108
00:06:06,990 --> 00:06:09,360
tabs and you can see you can see what

109
00:06:09,360 --> 00:06:12,330
what our technologies are used what

110
00:06:12,330 --> 00:06:14,120
technologies are used for real-time

111
00:06:14,120 --> 00:06:18,210
features so you for Facebook you will

112
00:06:18,210 --> 00:06:19,139
see a lot of different

113
00:06:19,139 --> 00:06:20,999
a request that I made again the server

114
00:06:20,999 --> 00:06:23,219
and a civilian polling how it works is

115
00:06:23,219 --> 00:06:25,860
that it opened the connection and then

116
00:06:25,860 --> 00:06:28,169
it keeps it open and then when the data

117
00:06:28,169 --> 00:06:31,520
is available from the server it will

118
00:06:31,520 --> 00:06:33,990
stop the connection and give you all the

119
00:06:33,990 --> 00:06:35,879
data available and then the clients

120
00:06:35,879 --> 00:06:38,639
needs to reconnect again and again to

121
00:06:38,639 --> 00:06:40,800
fetch the data so it's it could be

122
00:06:40,800 --> 00:06:43,560
cancer as Iraq but it works well so what

123
00:06:43,560 --> 00:06:44,999
is tricky is that you would think maybe

124
00:06:44,999 --> 00:06:47,759
so there is always like connection bet

125
00:06:47,759 --> 00:06:49,919
against the server so you would think

126
00:06:49,919 --> 00:06:53,449
okay so the TCP socket needs to be

127
00:06:53,449 --> 00:06:55,560
initiated all the time I need to did

128
00:06:55,560 --> 00:06:56,849
units look up its going to enter this

129
00:06:56,849 --> 00:07:00,300
valve latency and it's go you're going

130
00:07:00,300 --> 00:07:02,430
to need to do TP and shades yeah here

131
00:07:02,430 --> 00:07:04,710
let's NJ and all the stuff but actually

132
00:07:04,710 --> 00:07:09,029
since HTTP introduce the keepalive

133
00:07:09,029 --> 00:07:12,419
feature is the orgy is going to be used

134
00:07:12,419 --> 00:07:16,589
for the next connections and you will

135
00:07:16,589 --> 00:07:20,879
think that you have different requests

136
00:07:20,879 --> 00:07:22,710
and different episodes but it will be

137
00:07:22,710 --> 00:07:27,930
the same socket so there is one thing

138
00:07:27,930 --> 00:07:32,310
with HTTP long polling is that you

139
00:07:32,310 --> 00:07:35,069
choose HTTP so it introduced a lot a bit

140
00:07:35,069 --> 00:07:38,219
of overhead because you the riders are

141
00:07:38,219 --> 00:07:40,110
really heavy compared to other protocols

142
00:07:40,110 --> 00:07:45,210
which are more lightweight and one thing

143
00:07:45,210 --> 00:07:49,289
is if the connection drops you will need

144
00:07:49,289 --> 00:07:52,259
to reconnect again for all protocols are

145
00:07:52,259 --> 00:07:53,789
the same you need to do the same thing

146
00:07:53,789 --> 00:07:55,259
again and we need share the Tipsy bill

147
00:07:55,259 --> 00:07:57,930
circuit so like to I wanted to show you

148
00:07:57,930 --> 00:07:59,520
and they're kind of under the microscope

149
00:07:59,520 --> 00:08:01,919
what makes the pros different and we

150
00:08:01,919 --> 00:08:04,879
will we saw that it's not that different

151
00:08:04,879 --> 00:08:08,810
many depends on the the packets is

152
00:08:08,810 --> 00:08:11,610
exchanged when the request is the socket

153
00:08:11,610 --> 00:08:16,589
is initiated so people will think okay

154
00:08:16,589 --> 00:08:19,199
yeah you use WebSockets you sexy mix MVP

155
00:08:19,199 --> 00:08:22,080
but just the power goes is it no it's

156
00:08:22,080 --> 00:08:24,120
not sufficient enough you need a server

157
00:08:24,120 --> 00:08:26,129
infrastructure beyond behind the scenes

158
00:08:26,129 --> 00:08:29,900
to make all these things happen

159
00:08:29,900 --> 00:08:33,409
so how it works in a another it is all

160
00:08:33,409 --> 00:08:36,020
the clients is going to connect against

161
00:08:36,020 --> 00:08:39,200
the server gonna open connection and the

162
00:08:39,200 --> 00:08:43,960
server is going to work as a hub and yet

163
00:08:43,960 --> 00:08:46,610
distribute all the different messages to

164
00:08:46,610 --> 00:08:49,520
the to the different clients which are

165
00:08:49,520 --> 00:08:53,060
subscribing to to cancel channels or

166
00:08:53,060 --> 00:08:58,220
topic so how it works most of time you

167
00:08:58,220 --> 00:09:00,920
have like this top which a concept of

168
00:09:00,920 --> 00:09:03,200
channel or topics and you can subscribe

169
00:09:03,200 --> 00:09:07,910
to different channels and the server is

170
00:09:07,910 --> 00:09:11,510
going to register your or no clients so

171
00:09:11,510 --> 00:09:14,330
that when your client is subscribing to

172
00:09:14,330 --> 00:09:16,820
one channel if there is other clients

173
00:09:16,820 --> 00:09:20,420
publishing they gonna be going to push

174
00:09:20,420 --> 00:09:29,560
this data to to the open connections and

175
00:09:29,560 --> 00:09:32,030
scaling is a really really huge

176
00:09:32,030 --> 00:09:36,500
challenge for the real time the old time

177
00:09:36,500 --> 00:09:39,410
service so you need to select which

178
00:09:39,410 --> 00:09:41,060
house you're gonna send it to the

179
00:09:41,060 --> 00:09:44,480
connections to you need to to make sure

180
00:09:44,480 --> 00:09:47,660
that all the clients which is the data

181
00:09:47,660 --> 00:09:51,050
to one house will have the data will

182
00:09:51,050 --> 00:09:53,960
able to to the to the clients

183
00:09:53,960 --> 00:09:56,140
subscribing to a different URLs and

184
00:09:56,140 --> 00:09:59,030
amongst different servers and you need

185
00:09:59,030 --> 00:10:02,120
to scale originally among different CPUs

186
00:10:02,120 --> 00:10:04,160
and and they're vertically and

187
00:10:04,160 --> 00:10:06,260
horizontally and it's all it's a big

188
00:10:06,260 --> 00:10:06,910
challenge

189
00:10:06,910 --> 00:10:10,670
one other challenge is this feature

190
00:10:10,670 --> 00:10:12,830
called multiplexing because you want to

191
00:10:12,830 --> 00:10:15,890
avoid different TCP connection against a

192
00:10:15,890 --> 00:10:18,830
server when you want to fetch data from

193
00:10:18,830 --> 00:10:23,300
different channels in order to do that

194
00:10:23,300 --> 00:10:24,680
you need yet you need to have like a

195
00:10:24,680 --> 00:10:30,380
sort of a feature that allows you to to

196
00:10:30,380 --> 00:10:35,120
receive this data yeah you need to allow

197
00:10:35,120 --> 00:10:36,710
you to subscribe to different channels

198
00:10:36,710 --> 00:10:39,650
and yeah push data give you gives you a

199
00:10:39,650 --> 00:10:42,779
cue that is unique to

200
00:10:42,779 --> 00:10:47,070
your subscription so just here is an

201
00:10:47,070 --> 00:10:50,220
apple of one silent subscribe to

202
00:10:50,220 --> 00:10:52,110
channels and the server will forwards

203
00:10:52,110 --> 00:10:57,350
the messages there is another challenges

204
00:10:57,350 --> 00:11:00,450
when you loss internet connectivity so

205
00:11:00,450 --> 00:11:03,649
you may think yeah it's not an issue but

206
00:11:03,649 --> 00:11:05,880
it's more coming and you would think

207
00:11:05,880 --> 00:11:10,279
that to loss Internet connectivity and

208
00:11:11,060 --> 00:11:13,310
your app can be really sensitive to

209
00:11:13,310 --> 00:11:16,860
internet internet connectivity issues

210
00:11:16,860 --> 00:11:19,950
and so when your connection is lost then

211
00:11:19,950 --> 00:11:22,440
you need to you will miss the messages

212
00:11:22,440 --> 00:11:25,890
that are published between the time that

213
00:11:25,890 --> 00:11:28,320
you were not online and in order to

214
00:11:28,320 --> 00:11:30,540
prevent that you can have a kind of a

215
00:11:30,540 --> 00:11:34,110
catch a feature that is not out of the

216
00:11:34,110 --> 00:11:38,010
box for all the all the all the apps all

217
00:11:38,010 --> 00:11:40,560
the frameworks that will allow you to

218
00:11:40,560 --> 00:11:45,029
kind of reset scribe when your your your

219
00:11:45,029 --> 00:11:47,730
connection drops we've a 10 stamp or x

220
00:11:47,730 --> 00:11:51,810
time or a a sequence ID to to allow you

221
00:11:51,810 --> 00:11:54,540
to research scribe and get all the

222
00:11:54,540 --> 00:12:00,870
missed messages that you lost another

223
00:12:00,870 --> 00:12:03,500
challenge that you wouldn't think is

224
00:12:03,500 --> 00:12:06,870
what about if my users are everywhere in

225
00:12:06,870 --> 00:12:10,199
the world you maybe don't see that what

226
00:12:10,199 --> 00:12:13,110
is the challenge here is that if you

227
00:12:13,110 --> 00:12:16,680
have a client in Japanese you have a

228
00:12:16,680 --> 00:12:18,540
client in Brazil and if you have a

229
00:12:18,540 --> 00:12:22,769
client and the UK they let's say the the

230
00:12:22,769 --> 00:12:25,440
kind because the kind in the UK publish

231
00:12:25,440 --> 00:12:28,050
a message and subscribe message in to in

232
00:12:28,050 --> 00:12:33,000
the decimal in Ireland you need to you

233
00:12:33,000 --> 00:12:36,959
like the users in Japan and Brazil it is

234
00:12:36,959 --> 00:12:39,269
gonna be a long is grandtourist love

235
00:12:39,269 --> 00:12:41,970
Latins if you connect directly to the to

236
00:12:41,970 --> 00:12:44,730
the server in Ireland so you may are

237
00:12:44,730 --> 00:12:47,459
maybe familiar or not with the concept

238
00:12:47,459 --> 00:12:52,949
of CDN content delivery network so that

239
00:12:52,949 --> 00:12:55,350
what allows you CDN is

240
00:12:55,350 --> 00:12:57,870
to have the data cashed in different

241
00:12:57,870 --> 00:13:00,600
servers in the world so that depending

242
00:13:00,600 --> 00:13:03,180
on the location of the the user it will

243
00:13:03,180 --> 00:13:05,520
it will connect to the closest data

244
00:13:05,520 --> 00:13:08,910
center to to him and what is the

245
00:13:08,910 --> 00:13:11,460
challenge here is that it's different

246
00:13:11,460 --> 00:13:16,800
with real-time data is that you the data

247
00:13:16,800 --> 00:13:20,490
is always renewed and it's always is you

248
00:13:20,490 --> 00:13:22,110
can't cannot catch this data it's always

249
00:13:22,110 --> 00:13:25,050
new new data so what you can do instead

250
00:13:25,050 --> 00:13:28,080
it's which is more faster is to have

251
00:13:28,080 --> 00:13:30,480
when user publish a message and

252
00:13:30,480 --> 00:13:33,060
subscribe to a message you can have this

253
00:13:33,060 --> 00:13:35,430
data replicated to different servers in

254
00:13:35,430 --> 00:13:40,410
the world to allow you to all the users

255
00:13:40,410 --> 00:13:44,820
subscribing to their own servers which

256
00:13:44,820 --> 00:13:47,970
is closest to their location and it's

257
00:13:47,970 --> 00:13:50,100
it's it's you would think yeah it's it's

258
00:13:50,100 --> 00:13:53,700
it's you would you would be surprised

259
00:13:53,700 --> 00:13:55,440
but it's faster to placate his data

260
00:13:55,440 --> 00:13:59,120
amongst different eras on your servers

261
00:13:59,120 --> 00:14:01,800
and have this user connects to the

262
00:14:01,800 --> 00:14:04,170
closest data center so how it works it's

263
00:14:04,170 --> 00:14:06,990
works with the concept of geo DNS that

264
00:14:06,990 --> 00:14:11,940
will allows you to with the concept of

265
00:14:11,940 --> 00:14:15,600
DNS subnet information that the the

266
00:14:15,600 --> 00:14:19,790
client will provide when indeed the DNS

267
00:14:19,790 --> 00:14:24,810
lookup requests the DNS server will be

268
00:14:24,810 --> 00:14:30,120
able to get the location the public IP

269
00:14:30,120 --> 00:14:33,120
of the customer and knows where it

270
00:14:33,120 --> 00:14:36,830
should which IP which server it should

271
00:14:36,830 --> 00:14:40,410
give in back to the 2d DNS lookup

272
00:14:40,410 --> 00:14:43,380
request so that the the client request

273
00:14:43,380 --> 00:14:48,690
the client connect to the closest so as

274
00:14:48,690 --> 00:14:50,760
a summary I would say real-time is also

275
00:14:50,760 --> 00:14:53,310
the protocols are not that different and

276
00:14:53,310 --> 00:14:55,380
the protocol is not the only things that

277
00:14:55,380 --> 00:14:58,040
matters KB is a big challenge we

278
00:14:58,040 --> 00:15:01,509
getting real-time framework and servers

279
00:15:01,509 --> 00:15:04,670
multiplexing is something that you may

280
00:15:04,670 --> 00:15:06,980
need to have which is not out of the box

281
00:15:06,980 --> 00:15:10,070
and also have a policy for new recovery

282
00:15:10,070 --> 00:15:13,399
issues energy redundancy so you have a

283
00:15:13,399 --> 00:15:17,410
fool like you have your app which is

284
00:15:17,410 --> 00:15:21,350
really fast for different user in well

285
00:15:21,350 --> 00:15:25,250
and anyway thank you very much for your

286
00:15:25,250 --> 00:15:27,880
attention

287
00:15:32,139 --> 00:15:35,329
q thank you I have some gifts for you I

288
00:15:35,329 --> 00:15:39,019
printed out a cool it's called a zine

289
00:15:39,019 --> 00:15:41,569
from Julia events which is really cool

290
00:15:41,569 --> 00:15:43,819
about networking hacks so I have it with

291
00:15:43,819 --> 00:15:47,630
me I only hire like kind of 50 copies so

292
00:15:47,630 --> 00:15:51,829
if anybody wants so just feel free to

293
00:15:51,829 --> 00:15:56,899
together sweetie we meet yeah if you

294
00:15:56,899 --> 00:16:00,130
have any questions let me know

295
00:16:28,790 --> 00:16:32,730
yeah so the question is if the

296
00:16:32,730 --> 00:16:35,250
replication thing that I mentioned

297
00:16:35,250 --> 00:16:37,800
earlier to replicate different between

298
00:16:37,800 --> 00:16:41,190
different servers is there something

299
00:16:41,190 --> 00:16:45,480
that helps you out for this and there is

300
00:16:45,480 --> 00:16:47,490
no question savory or not and the

301
00:16:47,490 --> 00:16:58,440
question is as as far as I see so I yeah

302
00:16:58,440 --> 00:16:59,580
you can be all yourself

303
00:16:59,580 --> 00:17:02,580
but I I'm not aware of open source

304
00:17:02,580 --> 00:17:05,760
things or yeah that will or even like

305
00:17:05,760 --> 00:17:07,849
the document on the internet that will

306
00:17:07,849 --> 00:17:20,369
help you with that that's a good

307
00:17:20,369 --> 00:17:23,579
question so the question is if what what

308
00:17:23,579 --> 00:17:27,180
about HTTP 2 will you with Alps you with

309
00:17:27,180 --> 00:17:30,750
this so you can maybe think about h TB 2

310
00:17:30,750 --> 00:17:34,500
and long polling so h TB 2 introduced a

311
00:17:34,500 --> 00:17:35,280
feature called

312
00:17:35,280 --> 00:17:37,890
server push you would think it will help

313
00:17:37,890 --> 00:17:42,480
you on that but actually it's it's not a

314
00:17:42,480 --> 00:17:45,900
server push regarding data like

315
00:17:45,900 --> 00:17:49,380
WebSocket like a data coming to your

316
00:17:49,380 --> 00:17:52,650
brother it's more about assets so you

317
00:17:52,650 --> 00:17:55,470
can't get this data it's not something I

318
00:17:55,470 --> 00:17:58,710
just want to mention that it's not this

319
00:17:58,710 --> 00:18:00,510
feature called server push is not

320
00:18:00,510 --> 00:18:02,460
something that will suit with a what

321
00:18:02,460 --> 00:18:08,340
entry to introduce as well is to use so

322
00:18:08,340 --> 00:18:11,550
you can have different you can use one

323
00:18:11,550 --> 00:18:16,650
connection and different different

324
00:18:16,650 --> 00:18:20,220
requests in the same connection so

325
00:18:20,220 --> 00:18:24,210
yeah I I don't I don't know what to

326
00:18:24,210 --> 00:18:25,970
answer I was swinging in the same time

327
00:18:25,970 --> 00:18:30,270
but yeah I how that I don't think it

328
00:18:30,270 --> 00:18:30,809
would

329
00:18:30,809 --> 00:18:33,690
let's let's uh maybe more let's rid of

330
00:18:33,690 --> 00:18:59,990
about that what do you mean by my I

331
00:18:59,990 --> 00:19:03,059
would say it depends so there are pros

332
00:19:03,059 --> 00:19:04,169
are most suitable for that

333
00:19:04,169 --> 00:19:10,020
so WebSockets are definitely something

334
00:19:10,020 --> 00:19:14,090
that I mean other pros that have less

335
00:19:14,090 --> 00:19:17,070
over n in in the packets are exchanged

336
00:19:17,070 --> 00:19:19,289
between the the seven the clients are

337
00:19:19,289 --> 00:19:22,049
more suitable for that because yeah you

338
00:19:22,049 --> 00:19:26,809
want you want less information sent but

339
00:19:26,809 --> 00:19:33,539
yeah definitely will help you it will be

340
00:19:33,539 --> 00:19:36,320
suitable for that yeah

341
00:19:39,200 --> 00:19:46,140
[Applause]

