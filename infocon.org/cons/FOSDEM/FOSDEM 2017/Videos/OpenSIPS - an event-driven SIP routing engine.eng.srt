1
00:00:00,000 --> 00:00:03,020
[Music]

2
00:00:22,700 --> 00:00:26,990
good question here how many of you know

3
00:00:26,990 --> 00:00:28,670
about open sips have heard about it and

4
00:00:28,670 --> 00:00:32,598
know what it is at least cool so to

5
00:00:32,598 --> 00:00:33,260
everyone else

6
00:00:33,260 --> 00:00:36,890
open sips is a sip proxy and leaving all

7
00:00:36,890 --> 00:00:38,960
the cool features aside its main job

8
00:00:38,960 --> 00:00:41,660
after all these two route calls as many

9
00:00:41,660 --> 00:00:46,160
as possible so today I'm going to we're

10
00:00:46,160 --> 00:00:49,730
going to go through how the architecture

11
00:00:49,730 --> 00:00:54,649
has evolved in order to for for us to

12
00:00:54,649 --> 00:00:56,809
have the need for this event driven

13
00:00:56,809 --> 00:01:00,290
approach we're going to talk a bit about

14
00:01:00,290 --> 00:01:03,140
the events themselves and how they they

15
00:01:03,140 --> 00:01:05,780
will open up new possibilities for

16
00:01:05,780 --> 00:01:10,179
future development and scenarios in sip

17
00:01:10,179 --> 00:01:14,929
some concrete examples and maybe if

18
00:01:14,929 --> 00:01:16,789
there's some time left look into some

19
00:01:16,789 --> 00:01:22,159
open sip script so regarding the

20
00:01:22,159 --> 00:01:26,659
architecture this is this is a method

21
00:01:26,659 --> 00:01:29,259
but I'm going to explain it step by step

22
00:01:29,259 --> 00:01:34,729
so this is how the most of the platform

23
00:01:34,729 --> 00:01:36,709
is running on open city I mean not most

24
00:01:36,709 --> 00:01:39,560
but people who are still using the one

25
00:01:39,560 --> 00:01:43,069
dot X series are using this kind of

26
00:01:43,069 --> 00:01:49,009
linear architecture and where the

27
00:01:49,009 --> 00:01:51,649
horizontal lines are basically sip

28
00:01:51,649 --> 00:01:57,229
message processing that depending on how

29
00:01:57,229 --> 00:01:59,990
its scripted on various platforms and

30
00:01:59,990 --> 00:02:03,049
services may either do more CPU

31
00:02:03,049 --> 00:02:05,810
intensive loads or more blocking type of

32
00:02:05,810 --> 00:02:10,639
loads with red so and

33
00:02:10,639 --> 00:02:14,180
of course we'd ideally wanted less

34
00:02:14,180 --> 00:02:18,320
blocking as possible so we felt the need

35
00:02:18,320 --> 00:02:23,420
this was back in 2014 or something to

36
00:02:23,420 --> 00:02:25,880
take it a step further and sort of deal

37
00:02:25,880 --> 00:02:28,510
with all this blocking i/o which was

38
00:02:28,510 --> 00:02:32,720
eating up or reducing throughput so much

39
00:02:32,720 --> 00:02:35,060
on these platforms we're inevitably you

40
00:02:35,060 --> 00:02:37,040
have to run some sort of blocking

41
00:02:37,040 --> 00:02:38,210
queries I don't know

42
00:02:38,210 --> 00:02:44,060
database or HTTP and so forth so the two

43
00:02:44,060 --> 00:02:47,990
point X architecture we treated this

44
00:02:47,990 --> 00:02:51,400
problem and we introduced asynchronous

45
00:02:51,400 --> 00:02:55,670
operations for for the database level

46
00:02:55,670 --> 00:02:58,840
you can basically throw the query and

47
00:02:58,840 --> 00:03:02,360
resume at some point in the future and

48
00:03:02,360 --> 00:03:05,420
you know this time you can as you can

49
00:03:05,420 --> 00:03:09,470
see you can start doing more useful

50
00:03:09,470 --> 00:03:13,790
useful work so the the sip the message

51
00:03:13,790 --> 00:03:15,590
processing is entirely dominated or

52
00:03:15,590 --> 00:03:21,440
mostly dominated by green now so this is

53
00:03:21,440 --> 00:03:24,050
basically what's what the to the first

54
00:03:24,050 --> 00:03:26,360
releases in the two series that were all

55
00:03:26,360 --> 00:03:32,840
about and we eventually we felt that

56
00:03:32,840 --> 00:03:37,850
even this is somewhat it's not capable

57
00:03:37,850 --> 00:03:41,239
of solving all the all the issues with

58
00:03:41,239 --> 00:03:45,530
various scenarios for example the fact

59
00:03:45,530 --> 00:03:50,000
that one message may interact or may

60
00:03:50,000 --> 00:03:54,650
need to exchange data with some other

61
00:03:54,650 --> 00:03:58,730
message totally unrelated opens the need

62
00:03:58,730 --> 00:04:03,530
for for a new mechanism so with this in

63
00:04:03,530 --> 00:04:06,160
mind we have the push notifications

64
00:04:06,160 --> 00:04:08,420
scenario which I'm going to go through

65
00:04:08,420 --> 00:04:11,570
more in more detail in a shirt in the

66
00:04:11,570 --> 00:04:15,560
short time also some events from various

67
00:04:15,560 --> 00:04:17,600
external applications that open sips

68
00:04:17,600 --> 00:04:20,690
might interact with such as the events

69
00:04:20,690 --> 00:04:24,200
ocular of free switch or

70
00:04:24,200 --> 00:04:28,470
various voices I should say sip

71
00:04:28,470 --> 00:04:31,520
scenarios which also required this

72
00:04:31,520 --> 00:04:37,230
process to process communication so I'm

73
00:04:37,230 --> 00:04:39,660
going to try and keep things as generic

74
00:04:39,660 --> 00:04:41,730
as possible let's not go into too much

75
00:04:41,730 --> 00:04:48,000
sip so this is one way that this is the

76
00:04:48,000 --> 00:04:51,420
first type of scenario in this

77
00:04:51,420 --> 00:04:53,990
event-driven architecture which requires

78
00:04:53,990 --> 00:04:57,570
different processes to share data so

79
00:04:57,570 --> 00:04:59,880
let's assume we have a sip message that

80
00:04:59,880 --> 00:05:04,320
is being processed and at some point you

81
00:05:04,320 --> 00:05:06,870
have to block you have to wait for the

82
00:05:06,870 --> 00:05:09,960
receiver love some other one totally

83
00:05:09,960 --> 00:05:11,640
unrelated from what transaction point of

84
00:05:11,640 --> 00:05:14,760
view that will unblock you you you will

85
00:05:14,760 --> 00:05:17,010
be able to resume processing only after

86
00:05:17,010 --> 00:05:20,790
that one is received of course this is

87
00:05:20,790 --> 00:05:23,210
the happy scenario where you actually

88
00:05:23,210 --> 00:05:27,180
receive the event but you might also run

89
00:05:27,180 --> 00:05:28,230
into something like this

90
00:05:28,230 --> 00:05:31,500
so nothing nothing arrives so somehow a

91
00:05:31,500 --> 00:05:33,960
time-out must be generated so you can

92
00:05:33,960 --> 00:05:37,950
take the appropriate action I'm going to

93
00:05:37,950 --> 00:05:42,320
go back a bit and this is the exact

94
00:05:42,320 --> 00:05:46,170
scenario or way of information exchange

95
00:05:46,170 --> 00:05:51,930
that push notifications require so if we

96
00:05:51,930 --> 00:05:55,830
map this initial request to an invite we

97
00:05:55,830 --> 00:05:59,690
now have to wait for a register I will

98
00:05:59,690 --> 00:06:05,340
basically I will detailed it this some

99
00:06:05,340 --> 00:06:08,340
more when we get into the scenarios but

100
00:06:08,340 --> 00:06:11,070
as I said let's just try to see the big

101
00:06:11,070 --> 00:06:14,190
picture for now another mode of

102
00:06:14,190 --> 00:06:16,290
operation of this event-driven

103
00:06:16,290 --> 00:06:21,180
architecture would be when we have again

104
00:06:21,180 --> 00:06:24,030
we have a message as being processed but

105
00:06:24,030 --> 00:06:27,210
the processing can be asynchronously

106
00:06:27,210 --> 00:06:30,030
interrupted by the in the same manner so

107
00:06:30,030 --> 00:06:35,010
a message arrives that somehow affects

108
00:06:35,010 --> 00:06:38,420
this ongoing transaction

109
00:06:38,800 --> 00:06:42,560
so again the first process would have to

110
00:06:42,560 --> 00:06:45,289
register some handler that would run

111
00:06:45,289 --> 00:06:48,370
whenever the the event is triggered

112
00:06:48,370 --> 00:06:51,770
let's let's talk about some concrete

113
00:06:51,770 --> 00:06:56,150
examples again we may have in the so

114
00:06:56,150 --> 00:06:58,360
again in the push notification scenario

115
00:06:58,360 --> 00:07:03,439
we may have the need to fork so when the

116
00:07:03,439 --> 00:07:06,560
call is received we may four to the

117
00:07:06,560 --> 00:07:09,860
current desktop devices of a user that's

118
00:07:09,860 --> 00:07:12,349
good but we may also launch in the

119
00:07:12,349 --> 00:07:14,930
background these push notifications that

120
00:07:14,930 --> 00:07:19,639
may or may not add additional calls so

121
00:07:19,639 --> 00:07:22,370
as soon as his mobile devices start

122
00:07:22,370 --> 00:07:25,189
registering they all of a sudden they

123
00:07:25,189 --> 00:07:28,610
are receiving the calls of course this

124
00:07:28,610 --> 00:07:30,379
assume that he had he hasn't yet

125
00:07:30,379 --> 00:07:32,300
answered the DES phone right because

126
00:07:32,300 --> 00:07:37,120
that would just set up the call another

127
00:07:37,120 --> 00:07:40,580
scenario that is a that is possible with

128
00:07:40,580 --> 00:07:43,400
with this approach would be call pickups

129
00:07:43,400 --> 00:07:47,360
and this would be it's a very elegant

130
00:07:47,360 --> 00:07:52,580
solution to call pickup so the call

131
00:07:52,580 --> 00:07:56,500
pickup would work in the call again we

132
00:07:56,500 --> 00:08:00,909
we received the invite and

133
00:08:00,909 --> 00:08:05,979
asynchronously the pickup group would

134
00:08:05,979 --> 00:08:09,520
would or would not generate an invite

135
00:08:09,520 --> 00:08:16,819
that would take over the call so in this

136
00:08:16,819 --> 00:08:18,529
case we'd have one invite waiting for a

137
00:08:18,529 --> 00:08:22,939
separate invite so I'm going to now go

138
00:08:22,939 --> 00:08:27,379
into the event mechanism and look into

139
00:08:27,379 --> 00:08:30,439
let's look into a bit more detail on how

140
00:08:30,439 --> 00:08:34,698
they work and how we structure them so

141
00:08:34,698 --> 00:08:40,208
the events are triggered by some sort of

142
00:08:40,208 --> 00:08:42,559
let's not just call the messages that

143
00:08:42,559 --> 00:08:46,640
open city receives but rather some point

144
00:08:46,640 --> 00:08:51,110
in in execution such as when a

145
00:08:51,110 --> 00:08:55,160
user is saved in the location or any

146
00:08:55,160 --> 00:08:58,940
sort of action like this and they will

147
00:08:58,940 --> 00:09:01,940
basically hold enough information so sir

148
00:09:01,940 --> 00:09:03,920
like these key value attributes so we

149
00:09:03,920 --> 00:09:07,970
can properly match match them and block

150
00:09:07,970 --> 00:09:10,279
until the the exact event that we're

151
00:09:10,279 --> 00:09:15,560
looking for is received moving forward

152
00:09:15,560 --> 00:09:19,910
to the subscription mechanism there are

153
00:09:19,910 --> 00:09:22,250
interested processes the opposites

154
00:09:22,250 --> 00:09:25,190
workers may subscribe to these events

155
00:09:25,190 --> 00:09:30,110
and again they may use the attributes I

156
00:09:30,110 --> 00:09:33,709
mentioned earlier to filter to filter

157
00:09:33,709 --> 00:09:37,550
them so so they can so they can receive

158
00:09:37,550 --> 00:09:39,950
the appropriate response and the

159
00:09:39,950 --> 00:09:45,640
response are these notifications which

160
00:09:45,640 --> 00:09:50,990
will be dispatched to whatever to the

161
00:09:50,990 --> 00:09:53,630
match to the subscribers I mentioned

162
00:09:53,630 --> 00:09:57,380
earlier and it all works as a pub sub

163
00:09:57,380 --> 00:10:00,260
model it's it's pretty straightforward

164
00:10:00,260 --> 00:10:04,850
so now that the theory is away we can go

165
00:10:04,850 --> 00:10:07,730
into some concrete examples and the

166
00:10:07,730 --> 00:10:10,480
long-awaited push notifications

167
00:10:10,480 --> 00:10:14,930
discussion so for those of you who I'm

168
00:10:14,930 --> 00:10:16,880
sure most of you know what this is all

169
00:10:16,880 --> 00:10:19,279
about but for those of you who don't I'm

170
00:10:19,279 --> 00:10:20,660
going to quickly go through how these

171
00:10:20,660 --> 00:10:25,730
work and what limits okay so how what

172
00:10:25,730 --> 00:10:29,990
the purpose is so when a call is

173
00:10:29,990 --> 00:10:34,130
received if a user is not found a mobile

174
00:10:34,130 --> 00:10:37,790
device user we can throw this push

175
00:10:37,790 --> 00:10:41,050
notification to get it to register and

176
00:10:41,050 --> 00:10:45,350
ultimately receive the call and the main

177
00:10:45,350 --> 00:10:51,050
usefulness of this is to save some save

178
00:10:51,050 --> 00:10:52,699
battery on these mobile devices because

179
00:10:52,699 --> 00:10:54,920
you cannot have them constantly

180
00:10:54,920 --> 00:10:57,529
registering to the platform because they

181
00:10:57,529 --> 00:11:00,170
would be drained pretty much pretty

182
00:11:00,170 --> 00:11:03,110
pretty fast so sip is quite quite

183
00:11:03,110 --> 00:11:04,940
expensive from this point of view

184
00:11:04,940 --> 00:11:10,640
so with this in mind the funny thing is

185
00:11:10,640 --> 00:11:14,390
that you once we made the async and all

186
00:11:14,390 --> 00:11:17,540
the we turn as many blocking operations

187
00:11:17,540 --> 00:11:20,090
into their async counterparts as

188
00:11:20,090 --> 00:11:22,340
possible we actually made it possible to

189
00:11:22,340 --> 00:11:24,620
implement push notifications already in

190
00:11:24,620 --> 00:11:28,040
the 2.2 branch but this is a bit

191
00:11:28,040 --> 00:11:30,290
deceiving and I'm going to talk a bit

192
00:11:30,290 --> 00:11:32,720
about how they work now so this was one

193
00:11:32,720 --> 00:11:35,030
of those scenarios you don't even you

194
00:11:35,030 --> 00:11:37,550
don't consider right because you're here

195
00:11:37,550 --> 00:11:39,500
in time and it's you'd have to be a

196
00:11:39,500 --> 00:11:41,620
genius to just foresee everything so

197
00:11:41,620 --> 00:11:45,290
you'd do it like this call arrives we

198
00:11:45,290 --> 00:11:48,530
send a push notification and then we do

199
00:11:48,530 --> 00:11:51,880
this sort of feedback loop where we

200
00:11:51,880 --> 00:11:56,480
asynchronously sleep and just do this

201
00:11:56,480 --> 00:11:59,180
poll if he's registered sleeps if he's

202
00:11:59,180 --> 00:12:00,800
not either register get sleep some more

203
00:12:00,800 --> 00:12:05,530
so yeah this is sort of a you know

204
00:12:05,530 --> 00:12:08,210
packaged way to do it but it apparently

205
00:12:08,210 --> 00:12:10,250
works so what are the problems with this

206
00:12:10,250 --> 00:12:13,970
approach so first of all it's a

207
00:12:13,970 --> 00:12:17,120
performance killer because if we go back

208
00:12:17,120 --> 00:12:20,240
a bit we can it's a trade-off between

209
00:12:20,240 --> 00:12:26,960
user responsiveness and how how much we

210
00:12:26,960 --> 00:12:30,940
want to spend in terms of CPU so also

211
00:12:30,940 --> 00:12:34,060
it's inflexible it cannot handle

212
00:12:34,060 --> 00:12:38,060
scenarios where we want to successively

213
00:12:38,060 --> 00:12:41,360
ring multiple mobile devices of that

214
00:12:41,360 --> 00:12:46,190
user we can only do it once also the

215
00:12:46,190 --> 00:12:48,860
same idea applies to failover to

216
00:12:48,860 --> 00:12:52,670
multiple gateways we only are able to do

217
00:12:52,670 --> 00:12:56,180
it once so all of these issues are

218
00:12:56,180 --> 00:12:58,280
solved in the with the event-driven

219
00:12:58,280 --> 00:13:01,130
paradigm because now was the call

220
00:13:01,130 --> 00:13:03,650
arrives we simply subscribe for this

221
00:13:03,650 --> 00:13:06,470
event register event of course we

222
00:13:06,470 --> 00:13:09,830
parameterize it a bit with Bob AOR and

223
00:13:09,830 --> 00:13:14,180
we install this handler but also we can

224
00:13:14,180 --> 00:13:15,560
of course we launch the push

225
00:13:15,560 --> 00:13:18,140
notification and we fork

226
00:13:18,140 --> 00:13:20,810
the phone call to the devices that are

227
00:13:20,810 --> 00:13:24,470
currently registered and should should

228
00:13:24,470 --> 00:13:26,360
the push notification actually work we

229
00:13:26,360 --> 00:13:28,940
simply add some more branches at the

230
00:13:28,940 --> 00:13:30,950
appropriate branches and do it as many

231
00:13:30,950 --> 00:13:36,200
times as needed another possible

232
00:13:36,200 --> 00:13:39,350
application would be to would be that it

233
00:13:39,350 --> 00:13:42,880
opens the door to automatically detect

234
00:13:42,880 --> 00:13:46,730
robots on the other side so I mean fax

235
00:13:46,730 --> 00:13:50,360
machines for or voicemail so in this

236
00:13:50,360 --> 00:13:53,470
with this in mind we would subscribe to

237
00:13:53,470 --> 00:13:57,950
a DTMF event linked to a certain call ID

238
00:13:57,950 --> 00:14:05,630
and simply for the call if if the media

239
00:14:05,630 --> 00:14:08,000
server so when the media server starts

240
00:14:08,000 --> 00:14:09,890
sending the events we will take the

241
00:14:09,890 --> 00:14:12,709
appropriate actions we will invoke the

242
00:14:12,709 --> 00:14:16,970
handler and hang up if if it timed out

243
00:14:16,970 --> 00:14:19,519
or if he I don't know press the wrong

244
00:14:19,519 --> 00:14:24,190
digit I guess so

245
00:14:24,190 --> 00:14:30,339
also jumping into some opposite script

246
00:14:30,339 --> 00:14:35,959
things would kind of look like this we

247
00:14:35,959 --> 00:14:40,550
subscribe to the arrow are we we send I

248
00:14:40,550 --> 00:14:43,250
guess it's on the on this slide this is

249
00:14:43,250 --> 00:14:45,110
how the push notification code would

250
00:14:45,110 --> 00:14:51,440
look like and so let's go through it a

251
00:14:51,440 --> 00:14:53,810
bit we append some headers and make a

252
00:14:53,810 --> 00:14:57,440
post using the rest client module and

253
00:14:57,440 --> 00:15:01,579
then I went back and now we will fork to

254
00:15:01,579 --> 00:15:04,550
his existing branches and halt the

255
00:15:04,550 --> 00:15:09,620
execution I think yeah I've also added

256
00:15:09,620 --> 00:15:12,649
the handler once the event start

257
00:15:12,649 --> 00:15:18,470
arriving so the registrations we can do

258
00:15:18,470 --> 00:15:21,140
the appropriate checks based on because

259
00:15:21,140 --> 00:15:25,370
this is again another kind of worms the

260
00:15:25,370 --> 00:15:29,690
holdup detecting of unique contacts and

261
00:15:29,690 --> 00:15:31,540
so and so forth but

262
00:15:31,540 --> 00:15:34,870
we basically relay only when it's needed

263
00:15:34,870 --> 00:15:42,550
so to draw some conclusions this this

264
00:15:42,550 --> 00:15:45,970
new paradigm is is very powerful it's

265
00:15:45,970 --> 00:15:49,270
it's going to make script usage a lot

266
00:15:49,270 --> 00:15:53,530
easier because if we go back to the a

267
00:15:53,530 --> 00:15:56,560
bit of the async method that really kind

268
00:15:56,560 --> 00:16:00,820
of produces a lot of ugly code so that's

269
00:16:00,820 --> 00:16:05,410
going to be another boost and it opens

270
00:16:05,410 --> 00:16:07,270
the doors to all these complex scenarios

271
00:16:07,270 --> 00:16:09,340
that you solve within just a couple of

272
00:16:09,340 --> 00:16:12,130
lines of code and it's also going to

273
00:16:12,130 --> 00:16:14,560
it's quite extendable so we can define

274
00:16:14,560 --> 00:16:19,120
as many events as we want a couple of

275
00:16:19,120 --> 00:16:21,700
words about the whole release that's due

276
00:16:21,700 --> 00:16:26,770
to some sort of mid March this is just

277
00:16:26,770 --> 00:16:27,850
the tip of the iceberg

278
00:16:27,850 --> 00:16:30,790
the event-driven approach because the

279
00:16:30,790 --> 00:16:34,480
release is code named integration and it

280
00:16:34,480 --> 00:16:39,480
incorporates a lot of I mean

281
00:16:39,480 --> 00:16:42,040
integrations with various projects that

282
00:16:42,040 --> 00:16:46,080
are vital to any critical VoIP

283
00:16:46,080 --> 00:16:50,290
application or system such as capturing

284
00:16:50,290 --> 00:16:51,340
sip packets

285
00:16:51,340 --> 00:16:54,550
handling billing media server with the

286
00:16:54,550 --> 00:16:58,000
and maybe adding some some middleware

287
00:16:58,000 --> 00:17:02,650
RabbitMQ so as a takeaway message keep

288
00:17:02,650 --> 00:17:04,510
in mind that there is still room for

289
00:17:04,510 --> 00:17:06,790
some tweaking so please give us a shout

290
00:17:06,790 --> 00:17:11,920
out on the mailing lists or IRC and if

291
00:17:11,920 --> 00:17:13,420
you feel like you could improve on the

292
00:17:13,420 --> 00:17:15,780
design by the way all of these will be

293
00:17:15,780 --> 00:17:19,209
will be available shortly online so we

294
00:17:19,209 --> 00:17:21,310
can maintain this feedback loop on the

295
00:17:21,310 --> 00:17:25,900
event-driven approach so thank you do

296
00:17:25,900 --> 00:17:28,860
you have any questions

297
00:17:33,250 --> 00:18:06,080
you're definitely because it we're

298
00:18:06,080 --> 00:18:09,799
talking about mobile and Destin's may

299
00:18:09,799 --> 00:18:12,250
register as often as they want in fact

300
00:18:12,250 --> 00:18:15,350
the problem is that mobile devices need

301
00:18:15,350 --> 00:18:17,210
to register often right so they have

302
00:18:17,210 --> 00:18:19,669
these short registration times and this

303
00:18:19,669 --> 00:18:22,340
is why the push notifications and as you

304
00:18:22,340 --> 00:18:32,240
said yeah yes of course it's it's it's

305
00:18:32,240 --> 00:18:34,400
all about the app it has to handle these

306
00:18:34,400 --> 00:18:37,850
it needs to wake up write it push

307
00:18:37,850 --> 00:18:40,190
notification results in a wake up of the

308
00:18:40,190 --> 00:18:45,020
VoIP app so it registers and receives

309
00:18:45,020 --> 00:18:47,408
the call

310
00:18:48,410 --> 00:18:54,180
couple more minutes sure how many of

311
00:18:54,180 --> 00:19:03,090
these medicated cups I wouldn't I would

312
00:19:03,090 --> 00:19:06,290
only say that diaper yeah so basically

313
00:19:06,290 --> 00:19:09,750
yeah well I I guess the question we

314
00:19:09,750 --> 00:19:12,240
should turn it backwards is are there

315
00:19:12,240 --> 00:19:13,920
any apps that do not wake up and

316
00:19:13,920 --> 00:19:15,720
register right when they receive a push

317
00:19:15,720 --> 00:19:21,390
notification because yeah it's I don't

318
00:19:21,390 --> 00:19:24,060
think the whole thing is because iOS and

319
00:19:24,060 --> 00:19:25,770
Android will cut your connections

320
00:19:25,770 --> 00:19:28,050
especially iOS like there is no question

321
00:19:28,050 --> 00:19:29,610
about it rounded there used to be one

322
00:19:29,610 --> 00:19:32,640
not anymore so now if you want your VoIP

323
00:19:32,640 --> 00:19:36,510
app to basically be be responsive when

324
00:19:36,510 --> 00:19:38,700
it's in the background and when you're

325
00:19:38,700 --> 00:19:40,260
in the background it will cut your TCP

326
00:19:40,260 --> 00:19:42,180
connections so you're dead to kind of do

327
00:19:42,180 --> 00:19:45,960
anything you do have like three minutes

328
00:19:45,960 --> 00:19:47,820
of runtime I think the way you go to

329
00:19:47,820 --> 00:19:49,650
background to set up stuff so you're

330
00:19:49,650 --> 00:19:51,210
like okay let me know when I have to

331
00:19:51,210 --> 00:19:54,120
call and then you need to set out it's

332
00:19:54,120 --> 00:19:56,100
not like enabling push applications you

333
00:19:56,100 --> 00:19:58,140
need to have like your back-end

334
00:19:58,140 --> 00:19:59,850
needs to have to keep track of the

335
00:19:59,850 --> 00:20:01,530
device IDs and when you get the call

336
00:20:01,530 --> 00:20:03,990
send it to the right device so it's not

337
00:20:03,990 --> 00:20:06,230
like

