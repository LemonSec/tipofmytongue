1
00:00:00,000 --> 00:00:03,050
I don't have the money

2
00:00:04,590 --> 00:00:07,080
nevermind this man needs no introduction

3
00:00:07,080 --> 00:00:24,600
but because he has the majority of its

4
00:00:24,600 --> 00:00:25,890
Gustav Massey own you'll be talking

5
00:00:25,890 --> 00:00:33,329
about thank you Kevin maybe I should

6
00:00:33,329 --> 00:00:35,070
have changed my t-shirt because I'm not

7
00:00:35,070 --> 00:00:39,199
the devil person now but I'm the company

8
00:00:39,199 --> 00:00:41,760
person now but they told me not to do

9
00:00:41,760 --> 00:00:44,460
that in front of the camera so so it was

10
00:00:44,460 --> 00:00:48,420
too dangerous so a new talk about you

11
00:00:48,420 --> 00:00:51,260
pipe we already did one last year and

12
00:00:51,260 --> 00:00:54,899
year before but it will be on a

13
00:00:54,899 --> 00:00:57,120
different topic this time the first

14
00:00:57,120 --> 00:01:00,420
question for people where and the purity

15
00:01:00,420 --> 00:01:03,839
is what is you five so you pipe is a

16
00:01:03,839 --> 00:01:06,630
young multimedia framework written in C

17
00:01:06,630 --> 00:01:10,079
we started in 2012 so that mean we're

18
00:01:10,079 --> 00:01:12,119
quite young but not as young now but

19
00:01:12,119 --> 00:01:14,430
still quite young compared to similar

20
00:01:14,430 --> 00:01:17,640
projects were born in the 1990s that

21
00:01:17,640 --> 00:01:20,430
means we have of course a lot fewer more

22
00:01:20,430 --> 00:01:24,600
modules of your support but also we have

23
00:01:24,600 --> 00:01:26,460
been able to make some educated choice

24
00:01:26,460 --> 00:01:30,479
about the technologies of today so you

25
00:01:30,479 --> 00:01:33,119
pipe was initiated by my company open

26
00:01:33,119 --> 00:01:36,810
head end and so some of my employees but

27
00:01:36,810 --> 00:01:38,189
there are now three supporting companies

28
00:01:38,189 --> 00:01:40,350
including key ones as well we use it and

29
00:01:40,350 --> 00:01:42,979
last time I counted seven contributors

30
00:01:42,979 --> 00:01:45,570
the focus of you pipe is a bit different

31
00:01:45,570 --> 00:01:48,119
from what you can see with VLC or maybe

32
00:01:48,119 --> 00:01:50,820
de streamer we focus on reliability and

33
00:01:50,820 --> 00:01:54,780
decency and above all compliance so that

34
00:01:54,780 --> 00:01:57,810
means we don't aim at playing any kind

35
00:01:57,810 --> 00:02:00,630
of file that's on the Internet

36
00:02:00,630 --> 00:02:02,759
if it doesn't comply to the standard is

37
00:02:02,759 --> 00:02:07,190
supposed to comply to we will say may we

38
00:02:07,190 --> 00:02:09,690
also focus on broadcasting professional

39
00:02:09,690 --> 00:02:11,310
applications actually most of the use

40
00:02:11,310 --> 00:02:15,440
cases I have today are on the real world

41
00:02:15,440 --> 00:02:17,660
in the real broadcast world with real

42
00:02:17,660 --> 00:02:21,740
customers in the broadcast domain the

43
00:02:21,740 --> 00:02:24,260
license of you pipe is MIT and LGPL so

44
00:02:24,260 --> 00:02:27,260
it's not both some modules are MIT the

45
00:02:27,260 --> 00:02:31,370
core is a mighty the headers are MIT the

46
00:02:31,370 --> 00:02:34,880
main types are MIT that is what you need

47
00:02:34,880 --> 00:02:37,120
to build a pipeline basically you know

48
00:02:37,120 --> 00:02:40,100
duplication of source files who was

49
00:02:40,100 --> 00:02:42,770
facing UDP and so on all of that is MIT

50
00:02:42,770 --> 00:02:44,690
we have some modules that are

51
00:02:44,690 --> 00:02:49,700
LGPL that's mainly and the the code that

52
00:02:49,700 --> 00:02:52,760
deals with the codec format so what we

53
00:02:52,760 --> 00:02:55,640
call the framers you know in in our

54
00:02:55,640 --> 00:02:58,460
lingo and also some support libraries

55
00:02:58,460 --> 00:03:02,480
also a GPL like Liberty codec so the

56
00:03:02,480 --> 00:03:06,400
code and the binding code is also a DPL

57
00:03:06,400 --> 00:03:08,990
so those of you whether the previous

58
00:03:08,990 --> 00:03:13,510
years what's new the question is simple

59
00:03:13,510 --> 00:03:16,880
so too long don't read we've had a lot

60
00:03:16,880 --> 00:03:18,950
of work on the event loop API to make it

61
00:03:18,950 --> 00:03:21,020
more complete so now you don't need to

62
00:03:21,020 --> 00:03:23,270
call anymore the event loop directory

63
00:03:23,270 --> 00:03:25,900
from your program and it's also easy

64
00:03:25,900 --> 00:03:29,180
launching easy something P threads from

65
00:03:29,180 --> 00:03:32,570
pthread workers we have a nice utility

66
00:03:32,570 --> 00:03:36,040
to dump pipeline in graphics format so

67
00:03:36,040 --> 00:03:38,570
some of the slides we'll see later

68
00:03:38,570 --> 00:03:40,520
I've been automatically generated from

69
00:03:40,520 --> 00:03:43,640
you pipe using your groceries you see

70
00:03:43,640 --> 00:03:45,770
that's quite nice quite those that as

71
00:03:45,770 --> 00:03:49,040
well that's one the AGID bindings I

72
00:03:49,040 --> 00:03:50,780
talked about them last year but it's

73
00:03:50,780 --> 00:03:54,470
finally in the finally been merged in so

74
00:03:54,470 --> 00:03:59,840
we can now write you pipe client using

75
00:03:59,840 --> 00:04:02,150
you know just Lua and the UI is

76
00:04:02,150 --> 00:04:03,980
interesting for that because it

77
00:04:03,980 --> 00:04:05,300
abstracts

78
00:04:05,300 --> 00:04:07,610
all the ref counting of the structure or

79
00:04:07,610 --> 00:04:10,010
most of us factors as I've counted but

80
00:04:10,010 --> 00:04:12,500
no in you were to x-play off the wave

81
00:04:12,500 --> 00:04:14,150
comes and frees automatically the track

82
00:04:14,150 --> 00:04:15,920
so you don't use anymore in C you have

83
00:04:15,920 --> 00:04:18,790
to do it by hands so that's interesting

84
00:04:18,790 --> 00:04:22,820
in the feature side without people

85
00:04:22,820 --> 00:04:24,110
contributing a third company

86
00:04:24,110 --> 00:04:28,130
contributing and a chest client so well

87
00:04:28,130 --> 00:04:29,150
some other famous of

88
00:04:29,150 --> 00:04:32,030
a chess client but we now do have one

89
00:04:32,030 --> 00:04:33,620
well you could do the bandwidth or the

90
00:04:33,620 --> 00:04:36,680
variant you you want to have and you can

91
00:04:36,680 --> 00:04:39,800
we remotely Plex it repurpose it in a

92
00:04:39,800 --> 00:04:41,660
different format I will show later an

93
00:04:41,660 --> 00:04:44,330
example where we repurpose HLS to a

94
00:04:44,330 --> 00:04:46,280
transport stream UDP transport stream

95
00:04:46,280 --> 00:04:49,370
standard transfer stream we've got some

96
00:04:49,370 --> 00:04:51,440
work on x265 as well so we able to

97
00:04:51,440 --> 00:04:54,380
decode it and support it on thanks

98
00:04:54,380 --> 00:04:55,730
report into the SDI if you don't know

99
00:04:55,730 --> 00:04:59,540
what that means don't care if you do bad

100
00:04:59,540 --> 00:05:03,820
for you and what I wanted to release

101
00:05:03,820 --> 00:05:07,100
previous number five but the work is not

102
00:05:07,100 --> 00:05:09,230
finished yet but we probably do that in

103
00:05:09,230 --> 00:05:11,750
the next few weeks and after that one

104
00:05:11,750 --> 00:05:15,770
dot you we hope so and unlike previous

105
00:05:15,770 --> 00:05:18,170
here I'm not here to give you an

106
00:05:18,170 --> 00:05:20,660
extensive talk on the insides of your

107
00:05:20,660 --> 00:05:23,000
pipe and why it's a good pipeline but I

108
00:05:23,000 --> 00:05:24,410
will give you examples of what you can

109
00:05:24,410 --> 00:05:26,450
do with your pipe and I will start with

110
00:05:26,450 --> 00:05:29,630
an inventory of all the modules we have

111
00:05:29,630 --> 00:05:31,310
four inputs outputs filters and so on

112
00:05:31,310 --> 00:05:33,980
and then I talk about use cases typical

113
00:05:33,980 --> 00:05:35,980
use cases that are in production today

114
00:05:35,980 --> 00:05:39,380
so the inputs we have well some of them

115
00:05:39,380 --> 00:05:41,540
are quite standard of course in the

116
00:05:41,540 --> 00:05:44,390
broadcast world we still have specific

117
00:05:44,390 --> 00:05:47,450
connections like SDI and a size so we

118
00:05:47,450 --> 00:05:50,660
support two vendors for that natively

119
00:05:50,660 --> 00:05:53,000
inside you pipe we support of course to

120
00:05:53,000 --> 00:05:56,720
defy UDP HTTP and so on protocols we

121
00:05:56,720 --> 00:05:58,820
have a compliant ESD marks or compliant

122
00:05:58,820 --> 00:06:01,490
is important for us as I said we also

123
00:06:01,490 --> 00:06:04,730
have an RTP demarks to be able to read

124
00:06:04,730 --> 00:06:07,280
one or several RTP streams from the same

125
00:06:07,280 --> 00:06:10,040
program HS client I talked about it

126
00:06:10,040 --> 00:06:12,080
already I have hit multi cut directory

127
00:06:12,080 --> 00:06:14,000
it's a bit of a specific format that

128
00:06:14,000 --> 00:06:15,140
allows you to record

129
00:06:15,140 --> 00:06:18,800
24/7 a stream in chunks and expire all

130
00:06:18,800 --> 00:06:21,380
the chunks so we can also support that

131
00:06:21,380 --> 00:06:23,360
here with you pipe it comes from a

132
00:06:23,360 --> 00:06:25,070
program that code multi-cat was part of

133
00:06:25,070 --> 00:06:27,980
the design project externally we should

134
00:06:27,980 --> 00:06:30,950
possibly format for four sources it's

135
00:06:30,950 --> 00:06:32,840
actually working for where some of the

136
00:06:32,840 --> 00:06:35,030
some of the format's may not work at the

137
00:06:35,030 --> 00:06:36,140
moment because there are still

138
00:06:36,140 --> 00:06:41,600
adaptations to do as for the output well

139
00:06:41,600 --> 00:06:42,950
again we have

140
00:06:42,950 --> 00:06:46,820
out hardware outputs from SDI and a side

141
00:06:46,820 --> 00:06:48,200
that had not been murdered at the moment

142
00:06:48,200 --> 00:06:50,660
but they exist somewhere on github so if

143
00:06:50,660 --> 00:06:53,030
you look for it you can ask us and with

144
00:06:53,030 --> 00:06:55,910
you way it is natively we support as

145
00:06:55,910 --> 00:06:59,390
usual of five EVP RTP we also support a

146
00:06:59,390 --> 00:07:02,030
compliant yes marks so that's one of a

147
00:07:02,030 --> 00:07:05,660
kind that's I probably the things that

148
00:07:05,660 --> 00:07:07,130
differentiate us most from other

149
00:07:07,130 --> 00:07:09,980
projects in that we have a compliant yes

150
00:07:09,980 --> 00:07:11,990
marks that output stream that are

151
00:07:11,990 --> 00:07:15,140
analyzed by a professional analyzer and

152
00:07:15,140 --> 00:07:17,840
they say it's okay so that's quite a

153
00:07:17,840 --> 00:07:19,190
good thing but you can't actually again

154
00:07:19,190 --> 00:07:21,650
and we can use also external library so

155
00:07:21,650 --> 00:07:23,810
it may be format this sign it works so

156
00:07:23,810 --> 00:07:26,210
in production i have streams to rtmp ice

157
00:07:26,210 --> 00:07:29,780
cast and other in other formats using

158
00:07:29,780 --> 00:07:32,750
the big v format and GX

159
00:07:32,750 --> 00:07:35,630
al azhar and we were talking yesterday

160
00:07:35,630 --> 00:07:38,900
about Wayland if a man was talking about

161
00:07:38,900 --> 00:07:40,760
the weight and the output also that he's

162
00:07:40,760 --> 00:07:46,460
working on so as inputs and outputs are

163
00:07:46,460 --> 00:07:48,490
okay but what can you do in between

164
00:07:48,490 --> 00:07:51,500
so first the filters that we have so

165
00:07:51,500 --> 00:07:54,650
internally natively we support well the

166
00:07:54,650 --> 00:07:56,840
standard in today's bleating bleating

167
00:07:56,840 --> 00:07:59,210
means to take a picture and you bleach

168
00:07:59,210 --> 00:08:02,210
it on top of your video like a logo with

169
00:08:02,210 --> 00:08:04,970
with without transparency bleating also

170
00:08:04,970 --> 00:08:07,220
allows us to do mosaic I will show you

171
00:08:07,220 --> 00:08:12,320
later crop we also have v2 10-pack Ian

172
00:08:12,320 --> 00:08:15,920
pack assembly optimized functions if you

173
00:08:15,920 --> 00:08:19,310
don't know what it is good for you it's

174
00:08:19,310 --> 00:08:22,100
it's some kind of a form its output by

175
00:08:22,100 --> 00:08:25,970
some HDI card for 10-bit video and so

176
00:08:25,970 --> 00:08:28,310
it's more compact that the traditional

177
00:08:28,310 --> 00:08:31,550
reports on 16-bit but it's also much

178
00:08:31,550 --> 00:08:34,210
harder to read

179
00:08:34,299 --> 00:08:36,349
external libraries of course are very

180
00:08:36,349 --> 00:08:38,990
useful for filters of course CBD Kodak

181
00:08:38,990 --> 00:08:41,960
provides most of our decoders and

182
00:08:41,960 --> 00:08:44,840
encoders x264 is also an encoder brings

183
00:08:44,840 --> 00:08:48,020
a lot and the traditional service and

184
00:08:48,020 --> 00:08:50,360
software isn't old as well this speaks

185
00:08:50,360 --> 00:08:52,990
is a recent addition that allow us to do

186
00:08:52,990 --> 00:08:55,660
resampling without changing the

187
00:08:55,660 --> 00:08:58,870
the pits so it's actually much nicer for

188
00:08:58,870 --> 00:09:00,550
them in the broadcast world what you

189
00:09:00,550 --> 00:09:02,080
have to compensate for the rift

190
00:09:02,080 --> 00:09:04,620
well you don't have you don't hear it's

191
00:09:04,620 --> 00:09:07,900
thanks to live speaks and well we also

192
00:09:07,900 --> 00:09:09,970
have lined used to live EVP I but just

193
00:09:09,970 --> 00:09:15,670
for American subtitling system another

194
00:09:15,670 --> 00:09:18,700
important piece of our project is what

195
00:09:18,700 --> 00:09:21,730
we call the framers so the framers are

196
00:09:21,730 --> 00:09:24,430
analog to what Ivica that caused parsers

197
00:09:24,430 --> 00:09:26,890
so that's basically a place where you

198
00:09:26,890 --> 00:09:28,690
have the knowledge about the codecs

199
00:09:28,690 --> 00:09:32,020
so that's pieces of code that will pass

200
00:09:32,020 --> 00:09:34,150
the codecs tell you this is a frame or

201
00:09:34,150 --> 00:09:36,970
this is the head of a frame this is a 25

202
00:09:36,970 --> 00:09:40,840
FPS row stream and interpolates the pts

203
00:09:40,840 --> 00:09:44,020
from trying to frame and so on but in

204
00:09:44,020 --> 00:09:45,400
addition to that so it's not that the

205
00:09:45,400 --> 00:09:47,980
parser but it also acts as what ethical

206
00:09:47,980 --> 00:09:50,740
deck again because between filter that

207
00:09:50,740 --> 00:09:55,510
allows you to transform the format

208
00:09:55,510 --> 00:09:57,340
stream format into another for instance

209
00:09:57,340 --> 00:10:00,460
in x264 if you want to put a to the

210
00:10:00,460 --> 00:10:02,170
point which yes you have an annex called

211
00:10:02,170 --> 00:10:04,360
annex b that is input a start code in

212
00:10:04,360 --> 00:10:06,400
front of your structures if you want to

213
00:10:06,400 --> 00:10:08,350
put it to cease when mp4 it's a

214
00:10:08,350 --> 00:10:10,630
different format it's not start code in

215
00:10:10,630 --> 00:10:13,450
orbit it's based on size and so this

216
00:10:13,450 --> 00:10:17,950
transformation is dealt with by the

217
00:10:17,950 --> 00:10:20,350
framers in in our project we also have

218
00:10:20,350 --> 00:10:21,910
an interesting mechanism in which all of

219
00:10:21,910 --> 00:10:23,500
this is actually perform automatically

220
00:10:23,500 --> 00:10:26,230
without even you knowing it so basically

221
00:10:26,230 --> 00:10:28,420
the sings talks to the previous pipes

222
00:10:28,420 --> 00:10:30,910
and say I need an X B and so the framer

223
00:10:30,910 --> 00:10:33,400
will say I don't receive an exists I

224
00:10:33,400 --> 00:10:35,980
will convert automatically and we have

225
00:10:35,980 --> 00:10:38,530
support for while you video formats and

226
00:10:38,530 --> 00:10:40,450
pick to h.264 and no h.265 that's a

227
00:10:40,450 --> 00:10:42,390
recent addition a lot of audio formats

228
00:10:42,390 --> 00:10:45,550
and subtitling assistance or till tracks

229
00:10:45,550 --> 00:10:49,240
and subtitle and degree subtitles why

230
00:10:49,240 --> 00:10:51,160
would you use you pipe from broadcast

231
00:10:51,160 --> 00:10:53,770
world well we have several assets you

232
00:10:53,770 --> 00:10:55,150
know in addition to those I already

233
00:10:55,150 --> 00:10:58,150
mentioned our clock system is actually

234
00:10:58,150 --> 00:11:00,760
one of the major points as we said

235
00:11:00,760 --> 00:11:04,210
yesterday at mishap in you pipe we keep

236
00:11:04,210 --> 00:11:06,610
actually three clocks for each packets

237
00:11:06,610 --> 00:11:08,860
the original timestamp that was in the

238
00:11:08,860 --> 00:11:09,810
stream

239
00:11:09,810 --> 00:11:11,980
reconstructed timestamps that's always

240
00:11:11,980 --> 00:11:14,830
monotonously increasing so the d-max

241
00:11:14,830 --> 00:11:16,570
makes sure that it's already a modern a

242
00:11:16,570 --> 00:11:19,570
bit modern is increasing and that's what

243
00:11:19,570 --> 00:11:21,490
we could call the program timestamp so

244
00:11:21,490 --> 00:11:24,310
it's basically the clock of the encoder

245
00:11:24,310 --> 00:11:27,160
the guys that gives you the the stream

246
00:11:27,160 --> 00:11:29,200
and we have the system types tom so the

247
00:11:29,200 --> 00:11:31,570
system timestamp is based on the clock

248
00:11:31,570 --> 00:11:35,910
of you your hardware your your machine

249
00:11:35,910 --> 00:11:38,350
and so typically for display you would

250
00:11:38,350 --> 00:11:41,890
use the system timestamp most of the

251
00:11:41,890 --> 00:11:43,510
products on the system times form but

252
00:11:43,510 --> 00:11:44,920
that means that if you have a drift

253
00:11:44,920 --> 00:11:46,990
sometimes you have a shorter delay or

254
00:11:46,990 --> 00:11:49,390
longer delay and so you normally add 40

255
00:11:49,390 --> 00:11:51,070
milliseconds exactly between frames and

256
00:11:51,070 --> 00:11:54,910
that's a problem for some codecs so

257
00:11:54,910 --> 00:11:56,790
that's why we keep all of those clocks

258
00:11:56,790 --> 00:11:59,830
also the system timestamp I said it was

259
00:11:59,830 --> 00:12:02,140
the system time that's not completely if

260
00:12:02,140 --> 00:12:04,270
you usually to get time of day or get

261
00:12:04,270 --> 00:12:06,730
time but you there also use cases which

262
00:12:06,730 --> 00:12:09,130
is interesting to get the clock of

263
00:12:09,130 --> 00:12:11,620
hardware clock like on a safari or SDI

264
00:12:11,620 --> 00:12:13,810
card and that's the use case we have in

265
00:12:13,810 --> 00:12:15,910
reality so we can replace all of these

266
00:12:15,910 --> 00:12:19,110
by any other hardware clocks if you want

267
00:12:19,110 --> 00:12:21,459
in your pipe everything is nine amic

268
00:12:21,459 --> 00:12:25,510
that means the German the model of some

269
00:12:25,510 --> 00:12:28,630
of you pipe is to each transport stream

270
00:12:28,630 --> 00:12:31,120
so in 2003 you can add new elementary

271
00:12:31,120 --> 00:12:32,740
stream or you can be moving over to see

272
00:12:32,740 --> 00:12:34,690
me at any time so we kind of subtitling

273
00:12:34,690 --> 00:12:37,720
arriving all of a sudden so everything

274
00:12:37,720 --> 00:12:40,200
has been built in new pipe to allow for

275
00:12:40,200 --> 00:12:43,750
automatic for king of a new decoder and

276
00:12:43,750 --> 00:12:47,350
you passer and so on if needed if the

277
00:12:47,350 --> 00:12:49,600
interface if the user wants it of course

278
00:12:49,600 --> 00:12:54,670
but so the the framework allows that we

279
00:12:54,670 --> 00:12:56,589
also have efficient threading you decide

280
00:12:56,589 --> 00:12:58,300
where you put the threads not our

281
00:12:58,300 --> 00:13:01,180
framework so if you have a thread let's

282
00:13:01,180 --> 00:13:04,329
say a V codec usually you want to deport

283
00:13:04,329 --> 00:13:05,740
to another thread you thus create what

284
00:13:05,740 --> 00:13:07,690
we call worker and it will move to

285
00:13:07,690 --> 00:13:09,130
another thread if you don't want it for

286
00:13:09,130 --> 00:13:11,020
some reason because you find such a very

287
00:13:11,020 --> 00:13:13,120
low latency you can work with no threat

288
00:13:13,120 --> 00:13:15,730
at all the framework allows that as long

289
00:13:15,730 --> 00:13:18,279
as you core is enough of course to do

290
00:13:18,279 --> 00:13:22,340
all of that we also have said by first

291
00:13:22,340 --> 00:13:23,870
with copy-on-write and you will copy

292
00:13:23,870 --> 00:13:26,420
semantics so now you can see that more

293
00:13:26,420 --> 00:13:29,900
and more but without that in 2012 and we

294
00:13:29,900 --> 00:13:31,460
were bindings I already talked about

295
00:13:31,460 --> 00:13:35,960
earlier so that will that was for the

296
00:13:35,960 --> 00:13:38,660
assets and the inventory lets you a few

297
00:13:38,660 --> 00:13:43,580
real-world examples so the first example

298
00:13:43,580 --> 00:13:46,970
I'm not sure with properly but let's try

299
00:13:46,970 --> 00:13:49,490
the first real world example I have is

300
00:13:49,490 --> 00:13:51,110
some kind of suppliers so it can be

301
00:13:51,110 --> 00:13:53,630
apply on you on your PC but it can also

302
00:13:53,630 --> 00:13:57,230
be annihilated receive a decoder like in

303
00:13:57,230 --> 00:13:59,390
the professional world so these graphs

304
00:13:59,390 --> 00:14:01,640
have been made by the you pipe don't API

305
00:14:01,640 --> 00:14:03,620
that I talked about earlier so it's

306
00:14:03,620 --> 00:14:06,830
actually everything that is spawned when

307
00:14:06,830 --> 00:14:09,620
you start your pipe pipeline so on top

308
00:14:09,620 --> 00:14:11,420
of it you have the tools actually it's

309
00:14:11,420 --> 00:14:14,240
new worker the W worker source so it's

310
00:14:14,240 --> 00:14:15,560
any different in the different thread

311
00:14:15,560 --> 00:14:17,839
and for performance reasons and we read

312
00:14:17,839 --> 00:14:19,820
from well in that case from a file we

313
00:14:19,820 --> 00:14:24,560
can do so FIFO then is coming the GSD

314
00:14:24,560 --> 00:14:28,370
marks so Tmax d-max is the main thread

315
00:14:28,370 --> 00:14:32,420
here is the main is the main main pipe

316
00:14:32,420 --> 00:14:34,760
super pipe we call it that has a son

317
00:14:34,760 --> 00:14:38,030
that program and two other sons the

318
00:14:38,030 --> 00:14:39,830
program has two other sons that the the

319
00:14:39,830 --> 00:14:44,120
audio in that the video so inside the

320
00:14:44,120 --> 00:14:45,380
DMACC subside there are a lot of

321
00:14:45,380 --> 00:14:46,820
subtypes that do a lot of thing that

322
00:14:46,820 --> 00:14:50,810
geek apps PSD caps not framers and so on

323
00:14:50,810 --> 00:14:53,089
and on the output you have your frames

324
00:14:53,089 --> 00:14:56,120
and in two different workers for audio

325
00:14:56,120 --> 00:14:59,350
and video you decode it with AV codec

326
00:14:59,350 --> 00:15:02,060
here it's the part of the pipeline that

327
00:15:02,060 --> 00:15:03,170
is with subtitles

328
00:15:03,170 --> 00:15:05,060
bleating subtitles if you have some in

329
00:15:05,060 --> 00:15:07,670
our case we don't have FFN t is

330
00:15:07,670 --> 00:15:09,890
something that uses software scale and

331
00:15:09,890 --> 00:15:12,380
the interlace to the interrelation well

332
00:15:12,380 --> 00:15:16,370
put it in the correct format it's RGB in

333
00:15:16,370 --> 00:15:18,040
that case because we are using media

334
00:15:18,040 --> 00:15:21,140
x-direction and the trick p and play

335
00:15:21,140 --> 00:15:23,779
video and play on pipe are used for

336
00:15:23,779 --> 00:15:29,180
synchronization so it looks and the

337
00:15:29,180 --> 00:15:30,920
audio is also on its own thread so that

338
00:15:30,920 --> 00:15:32,780
way it's a worker and not so if you can

339
00:15:32,780 --> 00:15:34,590
see it properly on satan that this time

340
00:15:34,590 --> 00:15:40,110
but I hope so let's take a little bit

341
00:15:40,110 --> 00:15:42,080
more complicated example that the

342
00:15:42,080 --> 00:15:44,190
program that does that yes we

343
00:15:44,190 --> 00:15:47,550
multiplexing so we have a TS at the

344
00:15:47,550 --> 00:15:49,920
source so again in the our workers who's

345
00:15:49,920 --> 00:15:52,260
here we have a UDP source this time our

346
00:15:52,260 --> 00:15:55,220
TPD caps and we want to create another

347
00:15:55,220 --> 00:15:58,110
UDP and weary multiplex in the in

348
00:15:58,110 --> 00:16:00,480
between we could also transcode but that

349
00:16:00,480 --> 00:16:01,890
would add more complexity to the graph

350
00:16:01,890 --> 00:16:04,950
so the graph is already barely readable

351
00:16:04,950 --> 00:16:11,790
so let's try to keep it simpler so again

352
00:16:11,790 --> 00:16:18,390
after the source we enter the GSD max so

353
00:16:18,390 --> 00:16:20,840
again in that case we only have one

354
00:16:20,840 --> 00:16:23,340
elementary stream so I chose to have

355
00:16:23,340 --> 00:16:25,190
only one video because otherwise it

356
00:16:25,190 --> 00:16:29,190
complicates things a lot so the internal

357
00:16:29,190 --> 00:16:32,220
of the GSD max is the split pipe that

358
00:16:32,220 --> 00:16:36,090
allows to select which PA you want and

359
00:16:36,090 --> 00:16:38,820
we also have decoders for P 18 PMT which

360
00:16:38,820 --> 00:16:41,670
has internal structures of the GS and

361
00:16:41,670 --> 00:16:43,560
then you have the TS max which is quite

362
00:16:43,560 --> 00:16:46,260
symmetric compared to the GSD Marx Marx

363
00:16:46,260 --> 00:16:49,560
program and well input a limit or a

364
00:16:49,560 --> 00:16:52,290
stream at the output of the GSM accident

365
00:16:52,290 --> 00:16:54,870
and to also another worker thread that

366
00:16:54,870 --> 00:17:00,350
adds an RTP header and output it to UDP

367
00:17:00,350 --> 00:17:02,790
last use case because I'm running out of

368
00:17:02,790 --> 00:17:06,420
time is a quite nice application we use

369
00:17:06,420 --> 00:17:08,849
in my company for recording so I

370
00:17:08,849 --> 00:17:11,040
actually I simplify I simplified it a

371
00:17:11,040 --> 00:17:13,140
lot because otherwise would be too big

372
00:17:13,140 --> 00:17:15,480
to display on the screen but basically

373
00:17:15,480 --> 00:17:17,579
we have an application where we receive

374
00:17:17,579 --> 00:17:21,660
a stream from UDP again UDP RTP we

375
00:17:21,660 --> 00:17:26,400
record it immediately as TS but at the

376
00:17:26,400 --> 00:17:27,720
same time we decode it

377
00:17:27,720 --> 00:17:30,080
so the maxi decode it to get some

378
00:17:30,080 --> 00:17:32,760
friends of the key frames for thumbnails

379
00:17:32,760 --> 00:17:35,550
and we recreate JPEGs from the sundaes

380
00:17:35,550 --> 00:17:39,030
so here you see that pipe that one is

381
00:17:39,030 --> 00:17:41,490
directly written to the disk and the

382
00:17:41,490 --> 00:17:44,550
other is sent to the GSD marks again so

383
00:17:44,550 --> 00:17:47,300
now you used to it

384
00:17:47,300 --> 00:17:49,310
and at the output of the chairs remarks

385
00:17:49,310 --> 00:17:52,910
we have a bit more pipeline between the

386
00:17:52,910 --> 00:17:55,340
arrows you can see the types that it's a

387
00:17:55,340 --> 00:17:58,160
bit so easy codec the interface because

388
00:17:58,160 --> 00:18:00,940
of a JPEG you want it and in today's and

389
00:18:00,940 --> 00:18:05,150
this pipeline here is a dog great thumbs

390
00:18:05,150 --> 00:18:08,030
out of the frames

391
00:18:08,030 --> 00:18:11,780
we've selected and we record it with AD

392
00:18:11,780 --> 00:18:14,510
codec encoder this one for JPEG and

393
00:18:14,510 --> 00:18:20,390
write it with a file sync to a file okay

394
00:18:20,390 --> 00:18:21,770
that's use case but this time I won't

395
00:18:21,770 --> 00:18:23,210
show you a graph because it would be

396
00:18:23,210 --> 00:18:26,000
enormous in the mosaic so this is for

397
00:18:26,000 --> 00:18:28,580
instance mosaic we have at work so this

398
00:18:28,580 --> 00:18:31,640
is a real life example so basically all

399
00:18:31,640 --> 00:18:34,700
this is done with you pipe using a

400
00:18:34,700 --> 00:18:39,950
pipeline per input outputting to bleat

401
00:18:39,950 --> 00:18:43,340
functions to bleed pipes that we read

402
00:18:43,340 --> 00:18:46,790
each of the member to a single picture

403
00:18:46,790 --> 00:18:50,570
and so normally it's also life this is

404
00:18:50,570 --> 00:18:52,610
also photo yo so that's a nice

405
00:18:52,610 --> 00:18:56,540
contribution by OBS it moves with you or

406
00:18:56,540 --> 00:18:58,790
your level so all of this is done with a

407
00:18:58,790 --> 00:19:02,930
u pipeline other use cases that we have

408
00:19:02,930 --> 00:19:04,880
in production that I did not have time

409
00:19:04,880 --> 00:19:08,480
to be able to talk it out here so IR D

410
00:19:08,480 --> 00:19:10,880
of course we have a company using that

411
00:19:10,880 --> 00:19:13,370
from TS we could also imagine it from

412
00:19:13,370 --> 00:19:16,670
HLS live encoder live transcoder to TS

413
00:19:16,670 --> 00:19:19,310
or to rtmp ice cast anything that we

414
00:19:19,310 --> 00:19:22,250
format support basically five transcoder

415
00:19:22,250 --> 00:19:23,990
that's something like we have in our

416
00:19:23,990 --> 00:19:28,100
company as well we fund yes usually 24

417
00:19:28,100 --> 00:19:32,000
that's typical use case for us we also

418
00:19:32,000 --> 00:19:33,260
have an MP TS marks

419
00:19:33,260 --> 00:19:35,570
that's our products from my company as

420
00:19:35,570 --> 00:19:37,310
well based entirely based on you pipe

421
00:19:37,310 --> 00:19:39,740
and the GS max we've seen earlier it

422
00:19:39,740 --> 00:19:41,660
would be quite a large

423
00:19:41,660 --> 00:19:44,790
workflow - so but but it works with you

424
00:19:44,790 --> 00:19:47,310
part and also something we demonstrated

425
00:19:47,310 --> 00:19:49,230
actually at the IBC last year is a

426
00:19:49,230 --> 00:19:51,570
ploughed system with overlay so we've

427
00:19:51,570 --> 00:19:54,000
just played out files decoded files and

428
00:19:54,000 --> 00:19:57,150
added a logo that that moves and the

429
00:19:57,150 --> 00:20:00,810
banner and and a picture inside of the

430
00:20:00,810 --> 00:20:03,290
picture picture in picture and so on I

431
00:20:03,290 --> 00:20:05,760
think I'm right on time for some

432
00:20:05,760 --> 00:20:06,480
questions

433
00:20:06,480 --> 00:20:22,020
Kieran so you you said I talked about

434
00:20:22,020 --> 00:20:26,040
HTTP but is it compatible with HTTP at

435
00:20:26,040 --> 00:20:29,970
the moment I don't think so because the

436
00:20:29,970 --> 00:20:32,580
the companies provided it doesn't use it

437
00:20:32,580 --> 00:20:39,240
so yes it's a nameless network operator

438
00:20:39,240 --> 00:20:41,670
I'm not sure we can say which is who

439
00:20:41,670 --> 00:20:45,660
contributed that part to us and they did

440
00:20:45,660 --> 00:20:51,630
HTTP they did AES also unscrambling if

441
00:20:51,630 --> 00:20:56,670
the stream disk it scramble yes yes it

442
00:20:56,670 --> 00:20:59,130
so it's already merged in it also

443
00:20:59,130 --> 00:21:00,870
supports whether you have the audio

444
00:21:00,870 --> 00:21:03,300
inside you know mixed with the video or

445
00:21:03,300 --> 00:21:07,230
a separate final variant or non-public

446
00:21:07,230 --> 00:21:11,180
oh it's in the UN and 3:08

447
00:21:18,179 --> 00:21:21,659
so which impact yes standard do we

448
00:21:21,659 --> 00:21:25,139
comply to first the ISO and what I was

449
00:21:25,139 --> 00:21:26,940
actually referring to with that is the

450
00:21:26,940 --> 00:21:29,340
fact that we teach TDD compliance that

451
00:21:29,340 --> 00:21:31,320
means that at the timing of our packets

452
00:21:31,320 --> 00:21:32,990
has very strong constraint in the

453
00:21:32,990 --> 00:21:36,240
specification you can send the packet or

454
00:21:36,240 --> 00:21:37,889
you can send it too late either you

455
00:21:37,889 --> 00:21:39,899
can't burst and so on all of that is

456
00:21:39,899 --> 00:21:43,559
specified in the pacification and it's

457
00:21:43,559 --> 00:21:45,119
actually very difficult to understand it

458
00:21:45,119 --> 00:21:47,490
took me years so that's what what I was

459
00:21:47,490 --> 00:21:49,649
referring to we also comply to DVB and

460
00:21:49,649 --> 00:21:53,759
we have decoders for SBT in IT and so on

461
00:21:53,759 --> 00:21:57,389
well usual that's not specific to our

462
00:21:57,389 --> 00:22:11,610
project that yeah the use case useful so

463
00:22:11,610 --> 00:22:13,470
I've we published the codes of use cases

464
00:22:13,470 --> 00:22:18,269
some of them are online so the player

465
00:22:18,269 --> 00:22:22,080
basically is an example that we call you

466
00:22:22,080 --> 00:22:24,600
play that's in the example directory of

467
00:22:24,600 --> 00:22:27,179
the you pipe repository so if you want

468
00:22:27,179 --> 00:22:29,659
to see how code is on github

469
00:22:29,659 --> 00:22:33,389
so the player is the transcoder you know

470
00:22:33,389 --> 00:22:36,779
the g-string max is also you have an

471
00:22:36,779 --> 00:22:38,700
it's a test unit actually called you PI

472
00:22:38,700 --> 00:22:41,460
PS test that that we use to test that

473
00:22:41,460 --> 00:22:43,049
our gimmicks and marks don't send

474
00:22:43,049 --> 00:22:47,480
behavior from release to release the

475
00:22:47,480 --> 00:22:51,899
third one was recording is not it's

476
00:22:51,899 --> 00:22:54,779
actually not published yet probably at

477
00:22:54,779 --> 00:22:58,499
some point we will but not so far one

478
00:22:58,499 --> 00:23:00,059
was a very important thing if you wish

479
00:23:00,059 --> 00:23:03,869
to contact us so we have a website you

480
00:23:03,869 --> 00:23:05,909
PI dot all of course you can get our

481
00:23:05,909 --> 00:23:09,389
github and if you wish to talk to us the

482
00:23:09,389 --> 00:23:12,119
best is to come to our IRC you pipe on

483
00:23:12,119 --> 00:23:14,610
freenode we all saw the making list but

484
00:23:14,610 --> 00:23:18,258
usually when I say that he one laughs

485
00:23:23,020 --> 00:23:26,170
are you

486
00:23:33,830 --> 00:23:36,950
so what kind of what kind of subtitles

487
00:23:36,950 --> 00:23:38,900
or standard we support in a new pipe

488
00:23:38,900 --> 00:23:40,300
that's okay

489
00:23:40,300 --> 00:23:43,790
for Bank oh well thanks sorry video and

490
00:23:43,790 --> 00:23:45,290
series after those of you don't know

491
00:23:45,290 --> 00:23:47,690
that video and theory is a part of the

492
00:23:47,690 --> 00:23:50,960
picture on the SD iya interface a raw

493
00:23:50,960 --> 00:23:54,800
video that embeds some structure so

494
00:23:54,800 --> 00:23:58,900
basically oh p-47 so that means teletext

495
00:23:58,900 --> 00:24:01,700
basically so we take that and we turn it

496
00:24:01,700 --> 00:24:05,600
into a text packet and all the things

497
00:24:05,600 --> 00:24:18,410
that we do all the American SD and all

498
00:24:18,410 --> 00:24:22,150
the european SD and the pass-through of

499
00:24:22,150 --> 00:24:26,720
the US bank as well so captions and

500
00:24:26,720 --> 00:24:27,490
subtitles

501
00:24:27,490 --> 00:24:33,500
I'm also thanking some DIYs minus vbi I

502
00:24:33,500 --> 00:24:35,030
was specifically referring to thank

503
00:24:35,030 --> 00:24:36,740
because I worked on it a lot sooner and

504
00:24:36,740 --> 00:24:39,110
the other thing we support is Katya 104

505
00:24:39,110 --> 00:24:41,570
that not for subtitling but that's to to

506
00:24:41,570 --> 00:24:44,360
to determine the timing of the beginning

507
00:24:44,360 --> 00:24:47,030
of so the end of the show or splicing

508
00:24:47,030 --> 00:24:53,810
and so on so how about DVB sir the thing

509
00:24:53,810 --> 00:24:56,060
is DB server you won't find it in SDI

510
00:24:56,060 --> 00:24:58,070
because there is no i'll father I know

511
00:24:58,070 --> 00:25:03,680
there is no standard to embed from 80s

512
00:25:03,680 --> 00:25:07,130
to it yes we of course demultiplex it

513
00:25:07,130 --> 00:25:11,840
and we multiplex it I think I think you

514
00:25:11,840 --> 00:25:13,790
have code that allows you to put it on

515
00:25:13,790 --> 00:25:22,580
screen not just for the text it's never

516
00:25:22,580 --> 00:25:26,090
been tested but it will work if your

517
00:25:26,090 --> 00:25:29,330
question was or do we put transcoding to

518
00:25:29,330 --> 00:25:32,000
the text to DB so that the moment no but

519
00:25:32,000 --> 00:25:33,080
this is something we're seriously

520
00:25:33,080 --> 00:25:35,679
thinking about

521
00:25:37,980 --> 00:25:44,049
[Applause]

