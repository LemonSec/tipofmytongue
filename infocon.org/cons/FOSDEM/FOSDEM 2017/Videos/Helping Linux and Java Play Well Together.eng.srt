1
00:00:04,620 --> 00:00:09,719
I am up here again this talk is really

2
00:00:09,719 --> 00:00:11,910
not about my work but about other work

3
00:00:11,910 --> 00:00:16,980
that's going on at Red Hat so I'm gonna

4
00:00:16,980 --> 00:00:20,430
do my best this is a Gertrudis picture

5
00:00:20,430 --> 00:00:23,009
of my my dog in my husband playing fetch

6
00:00:23,009 --> 00:00:25,559
right there there does this talk is all

7
00:00:25,559 --> 00:00:27,720
about making it easier for Linux and

8
00:00:27,720 --> 00:00:30,680
Java to play well together

9
00:00:31,649 --> 00:00:34,050
the issue is mostly I've joined Red Hat

10
00:00:34,050 --> 00:00:36,120
a few years ago and a lot of the people

11
00:00:36,120 --> 00:00:38,820
I talked to look at Java it's just this

12
00:00:38,820 --> 00:00:41,100
black box right they've got their Java

13
00:00:41,100 --> 00:00:43,469
source code they run Java C they get

14
00:00:43,469 --> 00:00:44,820
something they don't know it's bytecode

15
00:00:44,820 --> 00:00:47,100
and then they they pass it to the Java

16
00:00:47,100 --> 00:00:49,859
command and stuff happens in there and

17
00:00:49,859 --> 00:00:52,199
they don't know what that is and they

18
00:00:52,199 --> 00:00:53,760
really want to be able to use the kind

19
00:00:53,760 --> 00:00:55,440
of tools they're used to like gdb and

20
00:00:55,440 --> 00:00:58,050
perf and all of those things to see

21
00:00:58,050 --> 00:01:00,839
inside the JVM to see what's going on so

22
00:01:00,839 --> 00:01:02,489
there are a couple of efforts that have

23
00:01:02,489 --> 00:01:04,860
been going on in the community to make

24
00:01:04,860 --> 00:01:09,150
that better so what I'm going to do is

25
00:01:09,150 --> 00:01:10,290
I'm going to show some motivating

26
00:01:10,290 --> 00:01:12,330
examples my why you might want to use

27
00:01:12,330 --> 00:01:15,480
the gdb unwinder or the perf Java tool

28
00:01:15,480 --> 00:01:17,820
and you know that's going to take me

29
00:01:17,820 --> 00:01:19,920
about five minutes and then well I'll

30
00:01:19,920 --> 00:01:21,750
show you the demos of how they work and

31
00:01:21,750 --> 00:01:24,450
you can see what's going on but this

32
00:01:24,450 --> 00:01:26,160
should be a pretty short talk so feel

33
00:01:26,160 --> 00:01:27,920
free to interrupt me and ask questions

34
00:01:27,920 --> 00:01:32,640
I'm happy to to take time all right so

35
00:01:32,640 --> 00:01:35,370
I'm gonna motivate the gdb unwinder with

36
00:01:35,370 --> 00:01:40,010
prime numbers I like math and so this is

37
00:01:40,010 --> 00:01:41,880
everybody knows what a prime number is

38
00:01:41,880 --> 00:01:46,470
and the if you use the sieve over a

39
00:01:46,470 --> 00:01:48,780
sneeze you can cross off all the

40
00:01:48,780 --> 00:01:50,490
multiples of two and cross off all the

41
00:01:50,490 --> 00:01:53,220
multiples of three three is no prime and

42
00:01:53,220 --> 00:01:55,410
then you can see that five is now prime

43
00:01:55,410 --> 00:01:56,850
and you cross off all the multiples of

44
00:01:56,850 --> 00:02:00,480
five so I wrote a job of streams program

45
00:02:00,480 --> 00:02:04,500
to do this right and all you do is you

46
00:02:04,500 --> 00:02:08,250
look you you generate a range and then

47
00:02:08,250 --> 00:02:09,840
you generate the range from two to the

48
00:02:09,840 --> 00:02:11,280
square root of the number that you have

49
00:02:11,280 --> 00:02:14,790
here and you see that if it's if there's

50
00:02:14,790 --> 00:02:17,490
a remainder when you divide it

51
00:02:17,490 --> 00:02:19,470
and so this will generate some nice

52
00:02:19,470 --> 00:02:23,460
pretty prime numbers and I'm gonna do a

53
00:02:23,460 --> 00:02:25,560
reduction on them at the end just

54
00:02:25,560 --> 00:02:26,970
because I don't want to be printing out

55
00:02:26,970 --> 00:02:28,710
streams and streams of stuff when I show

56
00:02:28,710 --> 00:02:30,990
the demo so the thing that's interesting

57
00:02:30,990 --> 00:02:33,420
here is if you play with Java streams at

58
00:02:33,420 --> 00:02:35,160
all you can just add an adopt aryl el

59
00:02:35,160 --> 00:02:37,530
there and all of a sudden your program

60
00:02:37,530 --> 00:02:39,600
that's generating prime numbers will use

61
00:02:39,600 --> 00:02:41,690
as many courses you have on the box so

62
00:02:41,690 --> 00:02:44,490
that's that's awesome right that's great

63
00:02:44,490 --> 00:02:46,380
this is this is the promise of fortress

64
00:02:46,380 --> 00:02:49,800
but put it back into Java but as a

65
00:02:49,800 --> 00:02:51,540
low-level programmer I want to know

66
00:02:51,540 --> 00:02:53,460
what's going on right what does that dot

67
00:02:53,460 --> 00:02:55,770
parallel really doing under the covers

68
00:02:55,770 --> 00:03:02,010
so if you go into gdb now and you try

69
00:03:02,010 --> 00:03:03,390
and do a back trace you get something

70
00:03:03,390 --> 00:03:06,330
that looks like this right I'm not how

71
00:03:06,330 --> 00:03:07,530
many people have ever looked at that

72
00:03:07,530 --> 00:03:09,330
when we were doing the read barriers and

73
00:03:09,330 --> 00:03:11,490
trying to debug them I ended up looking

74
00:03:11,490 --> 00:03:13,260
at you know addresses like that and

75
00:03:13,260 --> 00:03:14,880
trying to go in by hand translate them

76
00:03:14,880 --> 00:03:17,940
into methods the Linux programmers don't

77
00:03:17,940 --> 00:03:19,980
really want to do that they really want

78
00:03:19,980 --> 00:03:21,360
to what they want to see Java symbols

79
00:03:21,360 --> 00:03:26,040
there so Andrew Haley look at something

80
00:03:26,040 --> 00:03:28,950
called the gdb unwinder and rude in

81
00:03:28,950 --> 00:03:33,480
sorry and rude in and when you run that

82
00:03:33,480 --> 00:03:35,790
you can see that this is just an

83
00:03:35,790 --> 00:03:37,440
interpreted I halted it really quick and

84
00:03:37,440 --> 00:03:39,240
looked at it and you can see up here

85
00:03:39,240 --> 00:03:41,400
that it all calls down into Java util

86
00:03:41,400 --> 00:03:43,650
concurrent fork/join which is what you

87
00:03:43,650 --> 00:03:45,960
kind of expected if he knew about the

88
00:03:45,960 --> 00:03:47,550
stuff in a low-level but if you're

89
00:03:47,550 --> 00:03:49,320
coming at this and you're just starting

90
00:03:49,320 --> 00:03:51,030
and you want to know what's going on you

91
00:03:51,030 --> 00:03:53,160
can come and you can sort of see how

92
00:03:53,160 --> 00:03:55,220
this high-level streams program

93
00:03:55,220 --> 00:03:58,400
decomposes into actual java method calls

94
00:03:58,400 --> 00:04:05,340
in in a pleasant way all right this you

95
00:04:05,340 --> 00:04:07,410
can't read this but basically I showed

96
00:04:07,410 --> 00:04:08,880
you the interpreted frames but once they

97
00:04:08,880 --> 00:04:13,140
get compiled you can see that you know

98
00:04:13,140 --> 00:04:16,230
and in this case the the very low levels

99
00:04:16,230 --> 00:04:17,310
on the stack I'll show you in a minute

100
00:04:17,310 --> 00:04:19,170
are still interpreted the stuff is

101
00:04:19,170 --> 00:04:21,029
executed more often gets compiled like

102
00:04:21,029 --> 00:04:23,190
here and some of the stuff found here

103
00:04:23,190 --> 00:04:25,320
gets in line and the gdb unwinder can

104
00:04:25,320 --> 00:04:27,510
handle all that and show you what your

105
00:04:27,510 --> 00:04:30,440
Java program is doing

106
00:04:33,309 --> 00:04:34,809
in here you can see all the interpretive

107
00:04:34,809 --> 00:04:35,830
methods because these are only getting

108
00:04:35,830 --> 00:04:40,180
executed once and you can you can

109
00:04:40,180 --> 00:04:42,069
comment out the parallel and you can go

110
00:04:42,069 --> 00:04:43,930
and you can look at the GDP output and

111
00:04:43,930 --> 00:04:46,300
see that in fact you know you're up here

112
00:04:46,300 --> 00:04:48,490
to evaluate sequential and you never go

113
00:04:48,490 --> 00:04:53,949
to the fork/join stuff so yeah that's

114
00:04:53,949 --> 00:04:56,399
cool where can you get it

115
00:04:56,399 --> 00:04:58,180
Andrew dudes put it up there it's

116
00:04:58,180 --> 00:05:01,599
actually just a cute little script it's

117
00:05:01,599 --> 00:05:03,879
a Python script that knows about gdb and

118
00:05:03,879 --> 00:05:05,469
it knows about how Java stores its

119
00:05:05,469 --> 00:05:09,460
symbols and goes and matches them up you

120
00:05:09,460 --> 00:05:10,509
can read more about how it actually

121
00:05:10,509 --> 00:05:14,229
works in detail there and plans to try

122
00:05:14,229 --> 00:05:16,559
and get this up streamed in some way

123
00:05:16,559 --> 00:05:27,129
there again Andrew din wrote this so

124
00:05:27,129 --> 00:05:29,709
perf I don't know if you guys are Linux

125
00:05:29,709 --> 00:05:31,360
program or sir if you're Solaris or

126
00:05:31,360 --> 00:05:33,279
whatever but perf is a tool for

127
00:05:33,279 --> 00:05:37,089
measuring hardware counters and figuring

128
00:05:37,089 --> 00:05:38,979
out things like cache misses or TLB

129
00:05:38,979 --> 00:05:43,270
misses in your in your code but for a

130
00:05:43,270 --> 00:05:44,979
while it's been kind of tough to map

131
00:05:44,979 --> 00:05:48,039
that back to you know where in my java

132
00:05:48,039 --> 00:05:50,499
method am i doing something stupid with

133
00:05:50,499 --> 00:05:55,779
a global variable so I just wanted to

134
00:05:55,779 --> 00:05:59,979
take a fun program on random numbers if

135
00:05:59,979 --> 00:06:02,019
you want to try and debug your random

136
00:06:02,019 --> 00:06:03,399
number generator or figure out whether

137
00:06:03,399 --> 00:06:05,979
it's a good random number generator what

138
00:06:05,979 --> 00:06:08,680
you can do is you can take the remainder

139
00:06:08,680 --> 00:06:11,110
you know if I have three bins I can take

140
00:06:11,110 --> 00:06:14,050
the remainder what by three and see

141
00:06:14,050 --> 00:06:15,430
which benefits in and see if your bins

142
00:06:15,430 --> 00:06:20,110
are equally distributed so if I got

143
00:06:20,110 --> 00:06:21,699
ninety one as a random number it would

144
00:06:21,699 --> 00:06:25,719
be in bin one or 17 because 15 minus two

145
00:06:25,719 --> 00:06:28,870
would be in Vint too and so I wrote a

146
00:06:28,870 --> 00:06:33,629
program that does a really parallel

147
00:06:33,629 --> 00:06:36,430
random number test like this but bangs

148
00:06:36,430 --> 00:06:38,949
it all into one array because I wanted

149
00:06:38,949 --> 00:06:42,120
to be able to show you perf

150
00:06:42,350 --> 00:06:44,510
so here are just a sample examples so if

151
00:06:44,510 --> 00:06:47,270
I ran with four bins and ten threads for

152
00:06:47,270 --> 00:06:49,880
one second you can see that Java random

153
00:06:49,880 --> 00:06:51,170
really does do a pretty good job of

154
00:06:51,170 --> 00:06:52,970
getting number as equally distributed in

155
00:06:52,970 --> 00:06:59,840
the last bits okay get to the point I've

156
00:06:59,840 --> 00:07:01,910
gone off on a tangent but the idea is

157
00:07:01,910 --> 00:07:04,190
that by using many threads to write into

158
00:07:04,190 --> 00:07:06,680
this array of bins I can cause some cash

159
00:07:06,680 --> 00:07:08,240
problems and we should be able to see

160
00:07:08,240 --> 00:07:10,780
those with perf

161
00:07:10,910 --> 00:07:13,160
so without jittered symbols if you just

162
00:07:13,160 --> 00:07:16,190
want to run perf and look at one data

163
00:07:16,190 --> 00:07:17,990
cache misses you get something that

164
00:07:17,990 --> 00:07:20,420
looks like this and this is if this is

165
00:07:20,420 --> 00:07:22,070
bad for several reasons one of which is

166
00:07:22,070 --> 00:07:24,230
if you look over here these are actually

167
00:07:24,230 --> 00:07:27,830
in the same method but you don't know

168
00:07:27,830 --> 00:07:30,740
that and you've got addresses that don't

169
00:07:30,740 --> 00:07:34,880
really help if you use the perf tool

170
00:07:34,880 --> 00:07:38,330
that that I'm talking about you can tell

171
00:07:38,330 --> 00:07:41,330
that you know 98% of your l1 cache

172
00:07:41,330 --> 00:07:44,180
misses actually happened in in that code

173
00:07:44,180 --> 00:07:49,520
I was talking about so where can you get

174
00:07:49,520 --> 00:07:51,890
Java perf it's supposed to be available

175
00:07:51,890 --> 00:07:56,720
in well 74 and this was actually

176
00:07:56,720 --> 00:08:00,350
contributed by Google but the Lib / phys

177
00:08:00,350 --> 00:08:04,270
actually a part of the the Lib JVM Ti is

178
00:08:04,270 --> 00:08:06,680
going into the Linux kernel so that you

179
00:08:06,680 --> 00:08:08,630
should be able to do this from from

180
00:08:08,630 --> 00:08:14,090
Linux and the last one I'm showing is

181
00:08:14,090 --> 00:08:16,220
just Linux perf bar this has nothing to

182
00:08:16,220 --> 00:08:17,630
do with making Linux and Java play

183
00:08:17,630 --> 00:08:19,250
better but it actually makes the next

184
00:08:19,250 --> 00:08:22,520
demo section go better if any of you I

185
00:08:22,520 --> 00:08:24,980
was an old-time son person and I ran

186
00:08:24,980 --> 00:08:27,620
Solaris and my favorite tool is the perf

187
00:08:27,620 --> 00:08:29,570
bar because you can watch it you can

188
00:08:29,570 --> 00:08:30,860
watch your program running and you can

189
00:08:30,860 --> 00:08:33,260
see if there are any problems if you're

190
00:08:33,260 --> 00:08:34,610
not getting the scalability if for some

191
00:08:34,610 --> 00:08:38,210
reason you're blocking and so Doug Lee

192
00:08:38,210 --> 00:08:40,099
and then others have improved on it and

193
00:08:40,099 --> 00:08:41,539
have put a version of this out that you

194
00:08:41,539 --> 00:08:43,520
can play with and this is sort of an

195
00:08:43,520 --> 00:08:46,070
idea of what it looks like you can see

196
00:08:46,070 --> 00:08:47,570
the you know in this particular example

197
00:08:47,570 --> 00:08:51,140
I've got an idle thread some partially

198
00:08:51,140 --> 00:08:52,640
idle threads and some fully engaged

199
00:08:52,640 --> 00:08:54,970
threads

200
00:08:55,120 --> 00:08:57,710
it just gives you an idea it gives you a

201
00:08:57,710 --> 00:08:59,510
visual example that for me it's helpful

202
00:08:59,510 --> 00:09:03,290
to see how your program is running all

203
00:09:03,290 --> 00:09:06,699
right so let me actually show some stuff

204
00:09:11,950 --> 00:09:13,370
all right

205
00:09:13,370 --> 00:09:16,760
there's my birth bar I'm not doing

206
00:09:16,760 --> 00:09:19,180
anything right now

207
00:09:25,750 --> 00:09:30,520
there's the GDB without the cymbals

208
00:09:41,860 --> 00:09:45,699
and it's it's not useful

209
00:10:00,699 --> 00:10:04,939
if you run with the unwinder and the

210
00:10:04,939 --> 00:10:06,199
reason I have this is I can tell when

211
00:10:06,199 --> 00:10:09,549
it's actually fully running the stuff

212
00:10:14,170 --> 00:10:17,989
you can see that in fact it does work

213
00:10:17,989 --> 00:10:19,249
and you do have your Java symbols all

214
00:10:19,249 --> 00:10:25,610
available to you yes it's only for Linux

215
00:10:25,610 --> 00:10:43,850
I don't know Maya is perforate 64 this

216
00:10:43,850 --> 00:10:45,619
is the unwinder this is not the perf to

217
00:10:45,619 --> 00:10:51,110
Lyme sorry alright the question is will

218
00:10:51,110 --> 00:10:54,019
this run on a arch 64 the gdb unwinder

219
00:10:54,019 --> 00:10:56,809
it is a Python script that goes and

220
00:10:56,809 --> 00:11:00,139
walks into the JVM and knows about gdb

221
00:11:00,139 --> 00:11:04,489
so I I would I I don't know for sure but

222
00:11:04,489 --> 00:11:06,139
I would put my money down then it would

223
00:11:06,139 --> 00:11:09,339
work on a err 64

224
00:11:23,180 --> 00:11:27,150
and Rudin who wrote this also worked on

225
00:11:27,150 --> 00:11:32,010
the AR 64 port so I have to believe that

226
00:11:32,010 --> 00:11:34,410
if it's not there it could be there if

227
00:11:34,410 --> 00:11:36,060
people asked for it

228
00:11:36,060 --> 00:11:38,540
so if you need it and you don't have it

229
00:11:38,540 --> 00:11:41,940
CH f at Red Hat com tell me and I will I

230
00:11:41,940 --> 00:11:43,200
will see what needs to be done to make

231
00:11:43,200 --> 00:11:55,140
sure that it's there good right it shows

232
00:11:55,140 --> 00:11:56,790
it shows the data frames and the

233
00:11:56,790 --> 00:12:00,170
compiled frames and the interpretive

234
00:12:27,550 --> 00:12:29,620
that's true as well so what I'm trying

235
00:12:29,620 --> 00:12:32,230
to do is make this well I'm trying to

236
00:12:32,230 --> 00:12:33,820
demo these two tools that I was told to

237
00:12:33,820 --> 00:12:38,260
demo but what I'm also trying to say is

238
00:12:38,260 --> 00:12:40,120
that from a linux perspective these are

239
00:12:40,120 --> 00:12:41,470
giving you insight into what's going on

240
00:12:41,470 --> 00:12:43,750
in the JVM there are other tools that

241
00:12:43,750 --> 00:12:46,150
experts would use I'm sure there are

242
00:12:46,150 --> 00:12:47,440
other tours available but these are

243
00:12:47,440 --> 00:12:50,370
simple and easy to use

244
00:12:55,380 --> 00:13:07,390
well now you know what's there yes are

245
00:13:07,390 --> 00:13:31,360
the what yes all right so we're gonna

246
00:13:31,360 --> 00:13:41,890
run perf all right this is gonna take a

247
00:13:41,890 --> 00:13:43,030
while so I should've started this

248
00:13:43,030 --> 00:13:44,170
running while you guys were talking to

249
00:13:44,170 --> 00:13:46,750
me but this is basically doing the the

250
00:13:46,750 --> 00:13:51,460
random number testing into bins on my

251
00:13:51,460 --> 00:13:54,670
laptop and it's using all it's using 32

252
00:13:54,670 --> 00:13:56,860
threads so my a threaded laptop is all

253
00:13:56,860 --> 00:13:59,650
out working um if there any other

254
00:13:59,650 --> 00:14:01,570
questions on gdb now would be a great

255
00:14:01,570 --> 00:14:05,520
time or I could sing

256
00:14:11,500 --> 00:14:24,080
once our question you say this is the

257
00:14:24,080 --> 00:14:26,780
Lib JVM TI is going to be part of the

258
00:14:26,780 --> 00:14:31,100
Linux kernel and perf is available in

259
00:14:31,100 --> 00:14:35,780
Linux it is it's available you can do it

260
00:14:35,780 --> 00:14:38,150
in fedora everything's in fedora before

261
00:14:38,150 --> 00:14:38,720
it's in real

262
00:14:38,720 --> 00:14:43,460
I built the lib JVM TI myself and if you

263
00:14:43,460 --> 00:14:45,380
go to the website that I showed for more

264
00:14:45,380 --> 00:14:47,570
information they'll tell you how you can

265
00:14:47,570 --> 00:14:49,970
build your your own with JVM TI and

266
00:14:49,970 --> 00:14:58,190
install it okay it's in the main line

267
00:14:58,190 --> 00:15:03,250
but it's not enroll yet yes okay that's

268
00:15:05,790 --> 00:15:09,730
okay do we have any other questions

269
00:15:09,730 --> 00:15:12,610
anybody want to know you know what the

270
00:15:12,610 --> 00:15:23,379
weather is like in Massachusetts I'm

271
00:15:23,379 --> 00:15:23,829
sorry

272
00:15:23,829 --> 00:15:31,240
what is JVM T I do this is just this is

273
00:15:31,240 --> 00:15:33,839
just a way of finding the Java symbols

274
00:15:33,839 --> 00:15:37,899
of giving away for Linux tools to find

275
00:15:37,899 --> 00:15:43,420
the Java symbols in order to do this it

276
00:15:43,420 --> 00:15:46,149
needs to know how to map the addresses

277
00:15:46,149 --> 00:15:48,610
to the symbols you can actually say that

278
00:15:48,610 --> 00:15:50,110
there is the you can actually point

279
00:15:50,110 --> 00:15:52,899
Perth to the particular place saying

280
00:15:52,899 --> 00:15:55,959
this is the performer process it turns

281
00:15:55,959 --> 00:15:58,509
out that in Java there is a standard but

282
00:15:58,509 --> 00:16:00,430
yes standard way to figure this out

283
00:16:00,430 --> 00:16:03,220
gbmt I actually actually has the events

284
00:16:03,220 --> 00:16:06,550
that say we are about to install the

285
00:16:06,550 --> 00:16:08,740
compiled code these are the addresses of

286
00:16:08,740 --> 00:16:10,509
this code and this is the symbol number

287
00:16:10,509 --> 00:16:13,449
so this giti agent is like a hundred

288
00:16:13,449 --> 00:16:15,160
lines of code that actually just

289
00:16:15,160 --> 00:16:17,410
intercept these events and construct the

290
00:16:17,410 --> 00:16:19,449
perfect map and then earth takes over

291
00:16:19,449 --> 00:16:29,019
that's it no I don't think so

292
00:16:29,019 --> 00:16:33,209
I think perfectly does not support that

293
00:16:37,920 --> 00:16:41,440
all right so you have to to a second a

294
00:16:41,440 --> 00:16:44,709
separate step to actually inject the jib

295
00:16:44,709 --> 00:16:47,110
you have your perf data file the perf

296
00:16:47,110 --> 00:16:49,000
got that there's nothing about Java and

297
00:16:49,000 --> 00:16:52,440
then you inject a JIT data to get a

298
00:16:52,440 --> 00:16:56,639
perfect data with the JIT and symbols

299
00:17:02,610 --> 00:17:06,549
and then you can actually just show the

300
00:17:06,549 --> 00:17:08,910
output

301
00:17:13,569 --> 00:17:16,199
oops

302
00:17:24,339 --> 00:17:27,398
[Applause]

303
00:17:29,039 --> 00:17:31,299
all right and this is no surprise this

304
00:17:31,299 --> 00:17:32,830
is what I showed you before just that

305
00:17:32,830 --> 00:17:36,220
you can see that all of those l1 data

306
00:17:36,220 --> 00:17:38,350
cache misses happened in that one method

307
00:17:38,350 --> 00:17:42,970
what we expected them to and that's

308
00:17:42,970 --> 00:17:44,980
really it so this was a really short

309
00:17:44,980 --> 00:17:47,110
talk but I wanted to let you guys know

310
00:17:47,110 --> 00:17:48,820
that you know there's efforts going on

311
00:17:48,820 --> 00:17:54,270
to make Linux more aware of Java

312
00:17:56,160 --> 00:18:05,179
[Applause]

