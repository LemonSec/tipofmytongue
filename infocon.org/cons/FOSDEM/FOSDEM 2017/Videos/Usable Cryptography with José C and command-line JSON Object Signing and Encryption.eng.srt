1
00:00:00,000 --> 00:00:02,299
so

2
00:00:05,259 --> 00:00:09,440
usable cryptography with Jose so josy

3
00:00:09,440 --> 00:00:11,510
which is what many Americans call this

4
00:00:11,510 --> 00:00:13,850
word I think they're wrong but they call

5
00:00:13,850 --> 00:00:14,809
it this word anyway

6
00:00:14,809 --> 00:00:20,749
Josie is not Jose Josie is a set of rfcs

7
00:00:20,749 --> 00:00:24,730
that specify different encryption

8
00:00:24,730 --> 00:00:28,220
formats so you get a format for web

9
00:00:28,220 --> 00:00:31,369
signing for encryption for keys and for

10
00:00:31,369 --> 00:00:33,680
a variety of other things as well so

11
00:00:33,680 --> 00:00:35,030
this is what a key looks like a

12
00:00:35,030 --> 00:00:35,690
symmetric key

13
00:00:35,690 --> 00:00:39,260
it's a JSON object it says it's a octet

14
00:00:39,260 --> 00:00:41,629
string if there's the actual symmetric

15
00:00:41,629 --> 00:00:43,070
key and then that's the algorithm it's

16
00:00:43,070 --> 00:00:45,710
used for we're gonna go fast like I said

17
00:00:45,710 --> 00:00:48,590
here's an electic elliptic curve key the

18
00:00:48,590 --> 00:00:50,600
key type that's the curve group

19
00:00:50,600 --> 00:00:53,840
we're in so P 256 x and y-values there's

20
00:00:53,840 --> 00:00:56,300
your d private value this can be used

21
00:00:56,300 --> 00:00:58,010
for encryption and it has a k ID of one

22
00:00:58,010 --> 00:01:04,480
a key idea of one so here's an RSA key

23
00:01:04,480 --> 00:01:07,460
similar stuff you've got a key type RSA

24
00:01:07,460 --> 00:01:09,079
you've got all the public and private

25
00:01:09,079 --> 00:01:11,450
values you've got the algorithm that

26
00:01:11,450 --> 00:01:13,790
this key can be used with and the ID

27
00:01:13,790 --> 00:01:18,110
that uniquely identifies this key so

28
00:01:18,110 --> 00:01:21,409
this is all just the RFC stuff so we

29
00:01:21,409 --> 00:01:25,340
have a JJ WK set which is just a set of

30
00:01:25,340 --> 00:01:27,530
keys and it's an object with one

31
00:01:27,530 --> 00:01:28,880
attribute keys which is an array

32
00:01:28,880 --> 00:01:33,740
containing all of the keys all right

33
00:01:33,740 --> 00:01:34,880
here's where things start to get really

34
00:01:34,880 --> 00:01:37,070
interesting I've got to roll up my

35
00:01:37,070 --> 00:01:40,640
sleeves for this so we have here a

36
00:01:40,640 --> 00:01:44,119
signature object we have a payload which

37
00:01:44,119 --> 00:01:47,810
is base64 encoded base64 URL encoded I

38
00:01:47,810 --> 00:01:50,750
should say and then we have an array of

39
00:01:50,750 --> 00:01:53,630
signatures so in this case we have two

40
00:01:53,630 --> 00:01:57,110
different signatures each signature has

41
00:01:57,110 --> 00:01:59,899
a set of headers so in this case we have

42
00:01:59,899 --> 00:02:01,700
the protected header which if you

43
00:02:01,700 --> 00:02:03,409
attempt to modify it to the signature

44
00:02:03,409 --> 00:02:05,450
will fail then you have a regular header

45
00:02:05,450 --> 00:02:07,939
which is not protected and so if you

46
00:02:07,939 --> 00:02:09,949
modify this then the signature still

47
00:02:09,949 --> 00:02:12,200
validates and then we have the actual

48
00:02:12,200 --> 00:02:14,780
signature value itself the protected

49
00:02:14,780 --> 00:02:17,170
header is also a JSON object

50
00:02:17,170 --> 00:02:20,800
but because we have to be sure that you

51
00:02:20,800 --> 00:02:22,840
know if we're doing like rien Krypton or

52
00:02:22,840 --> 00:02:25,120
re-signing of anything if we don't

53
00:02:25,120 --> 00:02:26,650
change the contents of the header it has

54
00:02:26,650 --> 00:02:29,020
to be exactly the same so it specifies

55
00:02:29,020 --> 00:02:32,560
that what we do is we render the JSON

56
00:02:32,560 --> 00:02:36,550
string with sorted keys and then base64

57
00:02:36,550 --> 00:02:39,489
encode it and that way the if as long as

58
00:02:39,489 --> 00:02:40,930
the contents of the JSON object don't

59
00:02:40,930 --> 00:02:45,340
change the output never changes so again

60
00:02:45,340 --> 00:02:47,380
protected header unprotected header and

61
00:02:47,380 --> 00:02:49,810
signature and this is signed by two keys

62
00:02:49,810 --> 00:02:51,970
so if you were to validate you know this

63
00:02:51,970 --> 00:02:53,739
key then this payload would validate or

64
00:02:53,739 --> 00:02:56,080
this key that's about this with validate

65
00:02:56,080 --> 00:02:59,140
as well now there's also a flattened

66
00:02:59,140 --> 00:03:02,110
format and this should look very similar

67
00:03:02,110 --> 00:03:03,400
to what we were just looking at a moment

68
00:03:03,400 --> 00:03:06,130
ago you have a payload which is also

69
00:03:06,130 --> 00:03:08,709
based 64 encoded just like before then

70
00:03:08,709 --> 00:03:11,440
we have the signature data but since we

71
00:03:11,440 --> 00:03:13,540
only have one signature in this case we

72
00:03:13,540 --> 00:03:15,640
can use flatten format which just simply

73
00:03:15,640 --> 00:03:18,549
takes the same exact object as it would

74
00:03:18,549 --> 00:03:20,350
have been in the signature and flattens

75
00:03:20,350 --> 00:03:22,810
it upward in the structure so if we go

76
00:03:22,810 --> 00:03:25,209
back on slide you'll see protected

77
00:03:25,209 --> 00:03:28,780
header signature protected header

78
00:03:28,780 --> 00:03:31,900
signature same exact contents just moved

79
00:03:31,900 --> 00:03:35,799
upwards in the object now notice that in

80
00:03:35,799 --> 00:03:37,180
flatten format you can only ever have

81
00:03:37,180 --> 00:03:39,070
one signature right so you can't have

82
00:03:39,070 --> 00:03:40,870
multiple signatures this way and that

83
00:03:40,870 --> 00:03:41,980
allows us to actually do something

84
00:03:41,980 --> 00:03:44,530
called compact format the compact format

85
00:03:44,530 --> 00:03:46,030
is where we take the protected attribute

86
00:03:46,030 --> 00:03:47,980
the payload attribute and the signature

87
00:03:47,980 --> 00:03:50,049
attribute and just concatenate them all

88
00:03:50,049 --> 00:03:52,630
base64 encoded now the neat thing about

89
00:03:52,630 --> 00:03:54,370
this is that this structure can actually

90
00:03:54,370 --> 00:03:57,160
be used in the URL because it's all base

91
00:03:57,160 --> 00:04:01,090
64 URL safe so so you can actually pass

92
00:04:01,090 --> 00:04:03,730
this signature in a URL the server can

93
00:04:03,730 --> 00:04:05,980
take it and validate it right out of the

94
00:04:05,980 --> 00:04:09,459
URL we have something similar with

95
00:04:09,459 --> 00:04:11,109
encryption and you probably can't read

96
00:04:11,109 --> 00:04:13,840
it because it's pretty small but on the

97
00:04:13,840 --> 00:04:16,269
top we have similar similar idea of

98
00:04:16,269 --> 00:04:17,620
headers we have a protected header and

99
00:04:17,620 --> 00:04:19,329
an unprotected header now notice unlike

100
00:04:19,329 --> 00:04:21,519
the signature this is global so we don't

101
00:04:21,519 --> 00:04:25,960
have a per signature headers protected

102
00:04:25,960 --> 00:04:27,760
headers like we did in the signature so

103
00:04:27,760 --> 00:04:29,890
protected header also base64 encoded

104
00:04:29,890 --> 00:04:31,300
which is just that

105
00:04:31,300 --> 00:04:33,400
Jason object and then we have an

106
00:04:33,400 --> 00:04:36,430
unprotected header here and this

107
00:04:36,430 --> 00:04:39,819
specifies where to a URL to get the keys

108
00:04:39,819 --> 00:04:44,259
to decrypt this we have an IV a cipher

109
00:04:44,259 --> 00:04:46,360
text and a tag this is just your main

110
00:04:46,360 --> 00:04:48,280
encryption data for the data itself so

111
00:04:48,280 --> 00:04:49,990
the cipher text is the encrypted data

112
00:04:49,990 --> 00:04:53,349
the IV is the initialization vector for

113
00:04:53,349 --> 00:04:55,720
the cipher you're using and the tag is

114
00:04:55,720 --> 00:04:56,830
the way we do authenticated encryption

115
00:04:56,830 --> 00:04:59,020
so this is relating to the encryption

116
00:04:59,020 --> 00:05:01,560
itself but then like the signature

117
00:05:01,560 --> 00:05:04,509
structure we have multiple recipients so

118
00:05:04,509 --> 00:05:05,949
we can actually encrypt this to multiple

119
00:05:05,949 --> 00:05:07,990
people in the way that it works is we

120
00:05:07,990 --> 00:05:09,490
encrypt this bit with a symmetric key

121
00:05:09,490 --> 00:05:13,360
and then we encrypt the symmetric key to

122
00:05:13,360 --> 00:05:16,569
each of the recipients so this recipient

123
00:05:16,569 --> 00:05:19,810
can unpack its encrypted key and then

124
00:05:19,810 --> 00:05:22,509
use that key to decrypt this data so

125
00:05:22,509 --> 00:05:25,750
make sense nod your head at me all right

126
00:05:25,750 --> 00:05:29,710
I think everybody's asleep so so that we

127
00:05:29,710 --> 00:05:32,620
also have a per recipient header but

128
00:05:32,620 --> 00:05:34,240
this is not a protected header

129
00:05:34,240 --> 00:05:36,490
unlike up here if you change the

130
00:05:36,490 --> 00:05:38,259
contents of this protected header then

131
00:05:38,259 --> 00:05:40,810
decryption will fail on the other hand

132
00:05:40,810 --> 00:05:42,699
if you change the contents of this per

133
00:05:42,699 --> 00:05:44,979
recipient header it will not fail so it

134
00:05:44,979 --> 00:05:48,190
is not a protected header similar to the

135
00:05:48,190 --> 00:05:51,460
signing object we also have a flattened

136
00:05:51,460 --> 00:05:53,409
form of this so if it only has one

137
00:05:53,409 --> 00:05:56,680
recipient we just pull all of the

138
00:05:56,680 --> 00:05:58,630
objects from the recipient object upward

139
00:05:58,630 --> 00:06:00,699
into the parent and so we have encrypted

140
00:06:00,699 --> 00:06:03,840
key and header here just like we did

141
00:06:03,840 --> 00:06:07,479
encrypted key and header so we just

142
00:06:07,479 --> 00:06:10,659
pulled it up into the parent and then

143
00:06:10,659 --> 00:06:12,879
again if we have certain constraints for

144
00:06:12,879 --> 00:06:14,349
instance if we don't have an unprotected

145
00:06:14,349 --> 00:06:18,460
editor and we don't have this header

146
00:06:18,460 --> 00:06:21,819
either you can actually do this in

147
00:06:21,819 --> 00:06:24,460
compact format as well so protected

148
00:06:24,460 --> 00:06:27,099
header encrypted key IV ciphertext

149
00:06:27,099 --> 00:06:30,190
attack so notice that we went from the

150
00:06:30,190 --> 00:06:32,259
most general use case right where we can

151
00:06:32,259 --> 00:06:33,940
represent basically anything you want to

152
00:06:33,940 --> 00:06:36,699
and then we said for some very common

153
00:06:36,699 --> 00:06:38,169
use cases we can actually make the

154
00:06:38,169 --> 00:06:41,110
dataset smaller just like the JW s this

155
00:06:41,110 --> 00:06:44,830
can also be passed in a URL so a Webster

156
00:06:44,830 --> 00:06:49,590
can receive this encrypted data in a URL

157
00:06:50,070 --> 00:06:52,630
we also have something called a JSON web

158
00:06:52,630 --> 00:06:57,580
token JWT and so this contains the

159
00:06:57,580 --> 00:06:59,500
actual information on the inside if you

160
00:06:59,500 --> 00:07:01,000
wanted to make claims about a certain

161
00:07:01,000 --> 00:07:03,330
entity there's a standard way to do that

162
00:07:03,330 --> 00:07:05,920
so we have the issuer here I work for

163
00:07:05,920 --> 00:07:08,740
Red Hat so that's me there I'm the

164
00:07:08,740 --> 00:07:11,520
subject the audience is you at FOSDEM

165
00:07:11,520 --> 00:07:16,060
expiration time not before and issued at

166
00:07:16,060 --> 00:07:19,720
and then finally a an ID for the

167
00:07:19,720 --> 00:07:24,100
particular token I've know I've gone

168
00:07:24,100 --> 00:07:27,010
fast but I really want to spend our time

169
00:07:27,010 --> 00:07:30,250
here on Jose so Jose is actually

170
00:07:30,250 --> 00:07:33,490
implementation of the Josey specs so if

171
00:07:33,490 --> 00:07:34,690
you remember up what I've shown you up

172
00:07:34,690 --> 00:07:36,400
until this point was actually specified

173
00:07:36,400 --> 00:07:39,730
in RFC s it's well defined and there's

174
00:07:39,730 --> 00:07:41,290
lots of implementations of this out

175
00:07:41,290 --> 00:07:43,500
there and most all of them are terrible

176
00:07:43,500 --> 00:07:45,910
the reason most of them are terrible is

177
00:07:45,910 --> 00:07:47,830
because people basically implement only

178
00:07:47,830 --> 00:07:49,510
the thing that they care about the

179
00:07:49,510 --> 00:07:50,830
algorithms they care about or whatever

180
00:07:50,830 --> 00:07:53,590
they don't implement the full specs the

181
00:07:53,590 --> 00:07:56,980
other problem that I ran into when using

182
00:07:56,980 --> 00:07:58,990
lots of different versions was that

183
00:07:58,990 --> 00:08:00,100
there are lots of different

184
00:08:00,100 --> 00:08:01,660
implementations is that they expected

185
00:08:01,660 --> 00:08:03,730
you to essentially parse all of your

186
00:08:03,730 --> 00:08:08,380
jason into a language you know structure

187
00:08:08,380 --> 00:08:10,480
or of what some kind and then do all

188
00:08:10,480 --> 00:08:12,250
your operations and then push it back

189
00:08:12,250 --> 00:08:14,050
out again which of course if you have

190
00:08:14,050 --> 00:08:15,940
any extensible metadata in there that's

191
00:08:15,940 --> 00:08:18,340
all lost in that process or they had to

192
00:08:18,340 --> 00:08:19,810
go to great lengths in order to keep it

193
00:08:19,810 --> 00:08:23,620
so we did this as as a way to improve

194
00:08:23,620 --> 00:08:24,970
the state of the art and we think we

195
00:08:24,970 --> 00:08:26,950
have so that we have support for all the

196
00:08:26,950 --> 00:08:28,840
RFC to find algorithms which most

197
00:08:28,840 --> 00:08:31,420
implementations do not we do not have

198
00:08:31,420 --> 00:08:35,470
any native C data types so everything

199
00:08:35,470 --> 00:08:37,600
that you do with Jose is gonna be done

200
00:08:37,600 --> 00:08:41,049
in Jason we don't do any JSON parsing so

201
00:08:41,049 --> 00:08:43,479
we use the wonderful library Jensen

202
00:08:43,479 --> 00:08:44,890
which is a great upstream and very

203
00:08:44,890 --> 00:08:48,010
active and so basically you use Janson

204
00:08:48,010 --> 00:08:50,410
to parsh parse into a jason struct and

205
00:08:50,410 --> 00:08:53,500
then those jason's trucks will do all of

206
00:08:53,500 --> 00:08:55,750
the will do all the crypto with those

207
00:08:55,750 --> 00:08:57,220
one of the nice things about this

208
00:08:57,220 --> 00:08:58,540
approach is that Jam

209
00:08:58,540 --> 00:09:00,370
and actually provides really handy

210
00:09:00,370 --> 00:09:02,290
utilities for actually creating Jason

211
00:09:02,290 --> 00:09:03,190
objects and everything it's got

212
00:09:03,190 --> 00:09:04,750
everything you could ever need so it's

213
00:09:04,750 --> 00:09:06,790
really simple to use our API is joined

214
00:09:06,790 --> 00:09:09,490
by a template approach so basically what

215
00:09:09,490 --> 00:09:11,290
comes in is what it's going to look like

216
00:09:11,290 --> 00:09:13,690
when it comes out right so you you don't

217
00:09:13,690 --> 00:09:15,910
specify don't have options or parameters

218
00:09:15,910 --> 00:09:18,100
to specify like the algorithm you just

219
00:09:18,100 --> 00:09:20,350
say I want a jwe that looks like this

220
00:09:20,350 --> 00:09:23,530
right and so we introspect that and then

221
00:09:23,530 --> 00:09:26,380
we give you the output the missing

222
00:09:26,380 --> 00:09:27,700
parameter is anything you don't provide

223
00:09:27,700 --> 00:09:29,320
us is going to be inferred from the keys

224
00:09:29,320 --> 00:09:31,330
that you use or inferred from the

225
00:09:31,330 --> 00:09:33,760
headers that you've specified or if you

226
00:09:33,760 --> 00:09:34,810
haven't specified anything then we're

227
00:09:34,810 --> 00:09:35,890
gonna give you some simple secure

228
00:09:35,890 --> 00:09:38,290
defaults so the idea is that you should

229
00:09:38,290 --> 00:09:40,000
never be surprised by the output and

230
00:09:40,000 --> 00:09:41,500
everything should be sane and secure by

231
00:09:41,500 --> 00:09:45,760
default library design we have a core

232
00:09:45,760 --> 00:09:47,950
which implements the josè logic itself

233
00:09:47,950 --> 00:09:50,590
or the Jozy logic I should say and then

234
00:09:50,590 --> 00:09:53,500
we have hooks for the actual crypto

235
00:09:53,500 --> 00:09:56,410
algorithms themselves so for instance we

236
00:09:56,410 --> 00:09:59,380
can have a we currently have an open SSL

237
00:09:59,380 --> 00:10:01,180
implementation we would welcome other

238
00:10:01,180 --> 00:10:02,860
implementations as well

239
00:10:02,860 --> 00:10:04,390
you just basically need to plug in to

240
00:10:04,390 --> 00:10:06,820
this spot and and handle the algorithm

241
00:10:06,820 --> 00:10:10,450
properly so we also provide a CLI tool

242
00:10:10,450 --> 00:10:12,280
which provides a thin layer around the C

243
00:10:12,280 --> 00:10:14,380
API so anything you can do with the C

244
00:10:14,380 --> 00:10:17,080
API almost there's like one thing you

245
00:10:17,080 --> 00:10:18,820
can't do but you can do with this

246
00:10:18,820 --> 00:10:21,010
command-line utility as well so that's

247
00:10:21,010 --> 00:10:23,530
really really helpful for writing tests

248
00:10:23,530 --> 00:10:25,240
in shell script it's really helpful for

249
00:10:25,240 --> 00:10:26,830
you know just prototyping something

250
00:10:26,830 --> 00:10:28,060
making sure that it works before you

251
00:10:28,060 --> 00:10:30,670
actually write the code it's also fully

252
00:10:30,670 --> 00:10:32,650
tested against the very many RFC

253
00:10:32,650 --> 00:10:34,870
provided test vectors so if there's

254
00:10:34,870 --> 00:10:37,570
something wrong we probably have already

255
00:10:37,570 --> 00:10:40,300
caught it and if we haven't give us a

256
00:10:40,300 --> 00:10:41,920
test and will happily test for your case

257
00:10:41,920 --> 00:10:45,010
as well so the URL for the project is

258
00:10:45,010 --> 00:10:47,560
github calm slash latch set slash Jose

259
00:10:47,560 --> 00:10:50,650
and this is available in Fedora 24 and

260
00:10:50,650 --> 00:10:54,220
later just DNF install Jose so pretty

261
00:10:54,220 --> 00:10:56,920
much that simple so let's show a bit a

262
00:10:56,920 --> 00:10:58,620
little bit of how this works

263
00:10:58,620 --> 00:11:01,360
we have one function to generate a key

264
00:11:01,360 --> 00:11:04,600
it takes a Jason Johnson is Jason type

265
00:11:04,600 --> 00:11:07,690
as input and this is the thin wrapper in

266
00:11:07,690 --> 00:11:11,320
shell around this API so we say we want

267
00:11:11,320 --> 00:11:12,490
a key that looks like this

268
00:11:12,490 --> 00:11:16,600
it it's usable for ATS 128 GCM so we

269
00:11:16,600 --> 00:11:19,779
know what an aes 128 GCM key looks like

270
00:11:19,779 --> 00:11:22,059
so because we can infer it from your

271
00:11:22,059 --> 00:11:24,639
template we can just generate a key that

272
00:11:24,639 --> 00:11:25,360
works for you

273
00:11:25,360 --> 00:11:28,470
same thing for RSA for elliptic curves

274
00:11:28,470 --> 00:11:31,300
we can also you don't have to specify

275
00:11:31,300 --> 00:11:32,740
the algorithm though there's other ways

276
00:11:32,740 --> 00:11:34,569
we can refer it as well like you can

277
00:11:34,569 --> 00:11:36,850
just tell us you want an octet symmetric

278
00:11:36,850 --> 00:11:39,519
key and you want it to be 16 bytes and

279
00:11:39,519 --> 00:11:41,050
we'll just happen to generate that for

280
00:11:41,050 --> 00:11:41,709
you as well

281
00:11:41,709 --> 00:11:44,470
same thing with bits for RSA and you can

282
00:11:44,470 --> 00:11:45,790
also just tell us the group you want for

283
00:11:45,790 --> 00:11:47,410
an elliptic curve group and it will just

284
00:11:47,410 --> 00:11:51,009
be generated so one last thing is that

285
00:11:51,009 --> 00:11:52,809
you can actually specify multiple

286
00:11:52,809 --> 00:11:55,930
templates and the output will be a jwk

287
00:11:55,930 --> 00:11:58,529
set containing all of the outputted keys

288
00:11:58,529 --> 00:12:01,180
so with the exception of bits and bytes

289
00:12:01,180 --> 00:12:05,230
these two parameters here all input JSON

290
00:12:05,230 --> 00:12:07,540
attributes will be retained so and

291
00:12:07,540 --> 00:12:09,009
everything else is specified in the

292
00:12:09,009 --> 00:12:11,350
RFC's so basically again you give us

293
00:12:11,350 --> 00:12:13,059
something that looks like a jwk and if

294
00:12:13,059 --> 00:12:16,480
we can figure it out we will for signing

295
00:12:16,480 --> 00:12:18,160
a verification we have exactly the same

296
00:12:18,160 --> 00:12:21,999
sort of schema so to sign we pass in a

297
00:12:21,999 --> 00:12:23,709
jws object which again is something that

298
00:12:23,709 --> 00:12:25,990
looks like the jws object you want it to

299
00:12:25,990 --> 00:12:28,629
be and then you pass us a key and then

300
00:12:28,629 --> 00:12:30,490
optionally you can pass us that

301
00:12:30,490 --> 00:12:33,970
signature object that you saw in the end

302
00:12:33,970 --> 00:12:36,579
and we use that to infer so most often

303
00:12:36,579 --> 00:12:39,850
times the signature the sig option there

304
00:12:39,850 --> 00:12:42,189
it's actually just null because you just

305
00:12:42,189 --> 00:12:43,420
don't care about what the details are

306
00:12:43,420 --> 00:12:45,519
for a particular signature you just want

307
00:12:45,519 --> 00:12:47,019
to sign with a bunch of keys so

308
00:12:47,019 --> 00:12:48,490
basically two inputs for starting it

309
00:12:48,490 --> 00:12:51,100
can't really get any smaller jws verify

310
00:12:51,100 --> 00:12:53,679
is exactly the same thing then we have

311
00:12:53,679 --> 00:12:56,110
examples of using it here so we create a

312
00:12:56,110 --> 00:12:58,120
signature in this case we create two

313
00:12:58,120 --> 00:12:59,470
signatures one with an elliptic curve

314
00:12:59,470 --> 00:13:01,959
key one with an RSA key and we output it

315
00:13:01,959 --> 00:13:06,370
in MSG jws week at the file you see

316
00:13:06,370 --> 00:13:08,679
we've got our JSON data here well

317
00:13:08,679 --> 00:13:11,139
formatted and then we do the same thing

318
00:13:11,139 --> 00:13:13,540
here with other formats like the compact

319
00:13:13,540 --> 00:13:15,819
format and we can verify the signature

320
00:13:15,819 --> 00:13:17,889
and if it doesn't work it doesn't work

321
00:13:17,889 --> 00:13:19,839
yeah if your signature fails to validate

322
00:13:19,839 --> 00:13:22,750
we error encryption is similar the only

323
00:13:22,750 --> 00:13:24,189
thing here is that we have two steps in

324
00:13:24,189 --> 00:13:25,840
the C API

325
00:13:25,840 --> 00:13:28,690
because we need to have a CK here and

326
00:13:28,690 --> 00:13:31,300
you may want to do things like get an A

327
00:13:31,300 --> 00:13:34,210
get in JW e and then re-encrypt it to

328
00:13:34,210 --> 00:13:35,860
somebody else and the only way you can

329
00:13:35,860 --> 00:13:37,840
do that in CPI is to have two functions

330
00:13:37,840 --> 00:13:40,600
but those two are merged in the in the

331
00:13:40,600 --> 00:13:43,540
CLI so the wrapping can be performed

332
00:13:43,540 --> 00:13:45,100
multiple times but encryption incurs

333
00:13:45,100 --> 00:13:47,890
what occurs once the CK is generated on

334
00:13:47,890 --> 00:13:49,450
the first wrap if it's an empty JSON

335
00:13:49,450 --> 00:13:52,150
object that means that that inner key

336
00:13:52,150 --> 00:13:53,530
will just generate it for you if you

337
00:13:53,530 --> 00:13:55,240
don't care I'm left unless you want to

338
00:13:55,240 --> 00:13:56,820
specify one for some reason

339
00:13:56,820 --> 00:14:00,700
both the gwe and our CP r JW b or j

340
00:14:00,700 --> 00:14:02,020
dominion recipient templates

341
00:14:02,020 --> 00:14:04,930
respectively and they're the RCP

342
00:14:04,930 --> 00:14:08,380
parameter is often simply null the

343
00:14:08,380 --> 00:14:09,700
encryption is just the reverse of this

344
00:14:09,700 --> 00:14:12,100
you have to unwrap that sent that cek

345
00:14:12,100 --> 00:14:13,810
pass it back to decrypt and you get your

346
00:14:13,810 --> 00:14:15,640
data here's an example of using it for

347
00:14:15,640 --> 00:14:17,830
the command line we also can do

348
00:14:17,830 --> 00:14:19,210
passwords because there's password

349
00:14:19,210 --> 00:14:21,490
specified in the draft one of the only

350
00:14:21,490 --> 00:14:24,070
difference is here is that for wrapping

351
00:14:24,070 --> 00:14:25,450
and unwrapping if you want to use a

352
00:14:25,450 --> 00:14:27,700
password you don't pass the no jwk you

353
00:14:27,700 --> 00:14:31,030
pass in a JSON string that's how we

354
00:14:31,030 --> 00:14:33,280
infer from that type so there's a lot

355
00:14:33,280 --> 00:14:35,470
more stuff I've run out of time we have

356
00:14:35,470 --> 00:14:37,030
lots of future josé features we'd like

357
00:14:37,030 --> 00:14:39,220
to do like pkcs 11 support additional

358
00:14:39,220 --> 00:14:41,230
crypto library support we don't have any

359
00:14:41,230 --> 00:14:43,180
functions currently for JWT s but we'd

360
00:14:43,180 --> 00:14:45,850
like those we'd like some additional

361
00:14:45,850 --> 00:14:47,470
functions for converting x.509

362
00:14:47,470 --> 00:14:49,660
certificates and we'd like to implement

363
00:14:49,660 --> 00:14:51,430
some of the additional optional or FC

364
00:14:51,430 --> 00:14:54,640
features which which fairly few people

365
00:14:54,640 --> 00:14:56,890
use so we also want to finish Python

366
00:14:56,890 --> 00:14:58,050
bindings we're almost done with this one

367
00:14:58,050 --> 00:15:00,070
pull requests are welcome so please

368
00:15:00,070 --> 00:15:05,730
contribute any questions yes

369
00:15:06,060 --> 00:15:13,020
I think this is on I know that was a

370
00:15:13,020 --> 00:15:14,550
fire hose but I didn't have any way to

371
00:15:14,550 --> 00:15:17,839
get through the material self

372
00:15:44,650 --> 00:15:49,670
okay I first say that I have understand

373
00:15:49,670 --> 00:15:53,870
the Alpha of the things or none but this

374
00:15:53,870 --> 00:15:57,770
is the have to question this is the most

375
00:15:57,770 --> 00:16:00,860
practical and beautiful presentation of

376
00:16:00,860 --> 00:16:07,760
the FOSDEM in my opinion but why no one

377
00:16:07,760 --> 00:16:12,350
knows is for me is very helpful and very

378
00:16:12,350 --> 00:16:17,150
very useful not only as a library but as

379
00:16:17,150 --> 00:16:20,440
a concept to exchange information with

380
00:16:20,440 --> 00:16:24,940
JSON and why no one knows this is a

381
00:16:24,940 --> 00:16:28,880
refugee RFC see why no one knows one and

382
00:16:28,880 --> 00:16:33,070
whatever you really use cases of the dis

383
00:16:33,070 --> 00:16:37,670
so we we use Jose in the cleveson tank

384
00:16:37,670 --> 00:16:39,860
servers it's a client server side and we

385
00:16:39,860 --> 00:16:43,010
do the entire protocol is built on these

386
00:16:43,010 --> 00:16:46,970
objects so lots of people do know about

387
00:16:46,970 --> 00:16:49,760
it it's just not very popular outside of

388
00:16:49,760 --> 00:16:51,560
the web authentication community right

389
00:16:51,560 --> 00:16:54,890
now so it's all fairly new the RFC's I

390
00:16:54,890 --> 00:16:57,620
think the oldest one is like 2014 so

391
00:16:57,620 --> 00:17:00,920
it's it's very very new but I think it

392
00:17:00,920 --> 00:17:02,810
also provides a cryptosystem that's very

393
00:17:02,810 --> 00:17:05,480
usable because as long as you've

394
00:17:05,480 --> 00:17:07,910
basically looked at the IANA registry

395
00:17:07,910 --> 00:17:09,020
with the with the names of the

396
00:17:09,020 --> 00:17:10,430
algorithms you can figure out everything

397
00:17:10,430 --> 00:17:13,940
else pretty much directly and and just

398
00:17:13,940 --> 00:17:17,720
by experimentation so I like the system

399
00:17:17,720 --> 00:17:19,010
a lot I think it has a lot of uses

400
00:17:19,010 --> 00:17:20,660
outside of the web world but right now

401
00:17:20,660 --> 00:17:23,000
it's currently used for for a variety of

402
00:17:23,000 --> 00:17:26,540
web related protocols so that's why you

403
00:17:26,540 --> 00:17:27,890
get lots of implementations like in

404
00:17:27,890 --> 00:17:30,230
Python and Ruby but they only implement

405
00:17:30,230 --> 00:17:31,610
like the algorithms they actually care

406
00:17:31,610 --> 00:17:33,699
about

407
00:17:36,170 --> 00:17:39,480
yes absolutely absolutely that's what we

408
00:17:39,480 --> 00:17:45,780
use it for in cleveson tang yes so how

409
00:17:45,780 --> 00:17:48,050
would you go about like interfacing with

410
00:17:48,050 --> 00:17:51,960
pkcs 11 spec like what are the you know

411
00:17:51,960 --> 00:17:55,290
libraries or how to do that generally so

412
00:17:55,290 --> 00:17:56,910
this is this is actually something we

413
00:17:56,910 --> 00:17:59,790
are still trying to work out our

414
00:17:59,790 --> 00:18:01,650
moderator actually has written a lovely

415
00:18:01,650 --> 00:18:03,390
little piece of software called P 11 kit

416
00:18:03,390 --> 00:18:05,250
which allows you to like introspect ooh

417
00:18:05,250 --> 00:18:07,260
all the pkcs 11 modules and you can

418
00:18:07,260 --> 00:18:08,610
actually have a URI that refers

419
00:18:08,610 --> 00:18:11,040
specifically to the hardware token and a

420
00:18:11,040 --> 00:18:14,670
key as to exactly how we're gonna marry

421
00:18:14,670 --> 00:18:17,100
it into this we haven't done the design

422
00:18:17,100 --> 00:18:19,200
yet so I don't have a good answer for

423
00:18:19,200 --> 00:18:20,130
you

424
00:18:20,130 --> 00:18:22,760
long term also we are talking about

425
00:18:22,760 --> 00:18:26,820
creating a sort of system-wide pkcs 11

426
00:18:26,820 --> 00:18:29,220
policy daemon where each user can

427
00:18:29,220 --> 00:18:32,130
essentially get their own pkcs 11 slots

428
00:18:32,130 --> 00:18:34,500
and the user doesn't know whether those

429
00:18:34,500 --> 00:18:36,210
are hardware or software or what the

430
00:18:36,210 --> 00:18:37,710
administrator just configures and can

431
00:18:37,710 --> 00:18:40,620
route them different ways so we have

432
00:18:40,620 --> 00:18:41,940
sort of a lot of plans but we're still

433
00:18:41,940 --> 00:18:45,510
fleshing out the details yeah actually

434
00:18:45,510 --> 00:18:47,340
if you if you think that's cool talk

435
00:18:47,340 --> 00:18:49,980
with Daiki about his pkcs 11 remoting he

436
00:18:49,980 --> 00:18:52,350
did it like 3 talks before mine but it's

437
00:18:52,350 --> 00:18:54,830
kind of like the basis of this work so

438
00:18:54,830 --> 00:19:09,750
more questions we chose it because we

439
00:19:09,750 --> 00:19:12,360
knew it would match up well and we

440
00:19:12,360 --> 00:19:13,530
didn't want to spend a lot of time

441
00:19:13,530 --> 00:19:15,270
looking at other things so we had a good

442
00:19:15,270 --> 00:19:18,630
solution and we just developed it but we

443
00:19:18,630 --> 00:19:21,000
would be happy to have other backends as

444
00:19:21,000 --> 00:19:22,890
well or front ends there they're really

445
00:19:22,890 --> 00:19:25,860
front ends so we would be happy to have

446
00:19:25,860 --> 00:19:28,530
you know any other so if you want to you

447
00:19:28,530 --> 00:19:31,620
know code one for a new TLS or whatever

448
00:19:31,620 --> 00:19:34,830
we're happy to take it I have a question

449
00:19:34,830 --> 00:19:37,909
does it compile on Windows

450
00:19:37,990 --> 00:19:41,020
probably not it does on Mac but but I

451
00:19:41,020 --> 00:19:44,260
don't think it doesn't want us okay no

452
00:19:44,260 --> 00:19:54,850
questions no questions from you is it

453
00:19:54,850 --> 00:19:57,070
can you actually do like like detached

454
00:19:57,070 --> 00:19:58,570
signatures like like if you have

455
00:19:58,570 --> 00:20:00,010
something in some file and you actually

456
00:20:00,010 --> 00:20:01,600
don't want to recode it first into

457
00:20:01,600 --> 00:20:05,580
base64 and then throw it away again I

458
00:20:05,580 --> 00:20:10,419
the RFC does have support for that but I

459
00:20:10,419 --> 00:20:12,490
don't know if we implement it I don't

460
00:20:12,490 --> 00:20:15,220
remember if I implemented that or not if

461
00:20:15,220 --> 00:20:17,770
if we didn't I'm happy to implement it

462
00:20:17,770 --> 00:20:20,500
for you you're welcome

463
00:20:20,500 --> 00:20:22,090
I think it's just a it's just the

464
00:20:22,090 --> 00:20:23,620
convention whether the data is actually

465
00:20:23,620 --> 00:20:26,710
like in hashes date age depends on your

466
00:20:26,710 --> 00:20:30,130
occupation before much restricted in any

467
00:20:30,130 --> 00:20:38,799
way yeah I believe there is a detached

468
00:20:38,799 --> 00:20:41,200
signature mode I just don't remember if

469
00:20:41,200 --> 00:20:43,059
I implemented it I think I may have but

470
00:20:43,059 --> 00:20:44,710
if I haven't I will definitely implement

471
00:20:44,710 --> 00:20:46,830
it

472
00:20:49,350 --> 00:20:56,880
yes I agree GPG is very difficult to use

473
00:20:56,880 --> 00:20:59,320
okay thank you very much and even a

474
00:20:59,320 --> 00:21:03,000
possibility presenter

