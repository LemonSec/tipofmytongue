1
00:00:04,590 --> 00:00:07,529
so yeah I'm part Scarponi I open it's

2
00:00:07,529 --> 00:00:10,559
right yeah I'm one of the core

3
00:00:10,559 --> 00:00:12,750
committers of Apache plink you know it

4
00:00:12,750 --> 00:00:15,000
it's a very cool processing system I'm

5
00:00:15,000 --> 00:00:16,529
also a PC but I don't know if it doesn't

6
00:00:16,529 --> 00:00:19,669
if it matters in this audience

7
00:00:19,669 --> 00:00:23,060
so hopefully many of you know the system

8
00:00:23,060 --> 00:00:27,210
truth is I know this recently that

9
00:00:27,210 --> 00:00:28,980
there's a lot of confusion when it comes

10
00:00:28,980 --> 00:00:30,929
to processing guarantees and guarantees

11
00:00:30,929 --> 00:00:32,659
in general you see all sorts of

12
00:00:32,659 --> 00:00:35,640
opinionated posts in forums not

13
00:00:35,640 --> 00:00:37,830
necessarily fling forums or discussions

14
00:00:37,830 --> 00:00:39,900
more like general open source

15
00:00:39,900 --> 00:00:43,040
discussions and hacking news in general

16
00:00:43,040 --> 00:00:45,120
that is why I created this talk and

17
00:00:45,120 --> 00:00:48,030
basically I want to hopefully help some

18
00:00:48,030 --> 00:00:50,910
some of you folks to understand what is

19
00:00:50,910 --> 00:00:53,490
really going on there in case you end up

20
00:00:53,490 --> 00:00:56,070
in this dev room by mistake or you're

21
00:00:56,070 --> 00:00:59,820
you were just feeling adventurous it

22
00:00:59,820 --> 00:01:01,410
doesn't matter because I don't assume

23
00:01:01,410 --> 00:01:04,438
that you know much I will just generally

24
00:01:04,438 --> 00:01:07,439
explain the whole idea and hopefully

25
00:01:07,439 --> 00:01:09,179
give a good mmm

26
00:01:09,179 --> 00:01:12,479
alright so I have only one introductory

27
00:01:12,479 --> 00:01:13,619
slide

28
00:01:13,619 --> 00:01:15,630
what do data stream processors do

29
00:01:15,630 --> 00:01:18,570
basically they get a recipe of a data

30
00:01:18,570 --> 00:01:21,060
processing pipeline and they compile

31
00:01:21,060 --> 00:01:23,969
this down to an execution of that

32
00:01:23,969 --> 00:01:28,679
pipeline basically this usually ends up

33
00:01:28,679 --> 00:01:30,899
in a disability a flow that covers

34
00:01:30,899 --> 00:01:32,850
iran's continuously uncovers your

35
00:01:32,850 --> 00:01:38,789
general data processing needs so if you

36
00:01:38,789 --> 00:01:40,200
are considering starting with data

37
00:01:40,200 --> 00:01:42,090
stream processing now i think there is

38
00:01:42,090 --> 00:01:45,170
no better timing because at the moment

39
00:01:45,170 --> 00:01:48,149
stream processors can offer you

40
00:01:48,149 --> 00:01:50,009
subsequent latency processing and high

41
00:01:50,009 --> 00:01:51,810
throughput at the same time

42
00:01:51,810 --> 00:01:54,329
lates data which means when your data is

43
00:01:54,329 --> 00:01:56,240
not sorted across your your

44
00:01:56,240 --> 00:01:58,530
infrastructure doesn't matter because

45
00:01:58,530 --> 00:02:00,659
your system the system can actually sort

46
00:02:00,659 --> 00:02:02,880
the data in proceed at the right event

47
00:02:02,880 --> 00:02:05,429
time there's a nice google paper about

48
00:02:05,429 --> 00:02:08,940
this and by the way there are some

49
00:02:08,940 --> 00:02:13,019
pipelines run 365 24/7 consistently

50
00:02:13,019 --> 00:02:17,790
without any issues in general our if you

51
00:02:17,790 --> 00:02:20,099
can understand this it's it's crazy

52
00:02:20,099 --> 00:02:23,340
right so if you are DevOps

53
00:02:23,340 --> 00:02:25,860
you're working with DevOps you probably

54
00:02:25,860 --> 00:02:28,019
know the pain of dealing with

55
00:02:28,019 --> 00:02:29,840
application updates handling failures

56
00:02:29,840 --> 00:02:32,730
installing adding more or less removing

57
00:02:32,730 --> 00:02:35,099
workers reconfiguring the system in

58
00:02:35,099 --> 00:02:36,780
general is a pain because there's an

59
00:02:36,780 --> 00:02:38,190
application or making applications

60
00:02:38,190 --> 00:02:39,720
running in the background and you need

61
00:02:39,720 --> 00:02:41,849
to make sure that everything we run

62
00:02:41,849 --> 00:02:43,590
correctly and you won't lose any

63
00:02:43,590 --> 00:02:46,470
pressing or any data that's very very

64
00:02:46,470 --> 00:02:49,080
very annoying and if you do any mistake

65
00:02:49,080 --> 00:02:53,459
this can cause heavy impact of course in

66
00:02:53,459 --> 00:02:58,380
your in your company so failures can

67
00:02:58,380 --> 00:03:00,000
happen we cannot really eliminate

68
00:03:00,000 --> 00:03:05,010
entropy but in general we can use a fail

69
00:03:05,010 --> 00:03:08,870
recovery model to turn back time and run

70
00:03:08,870 --> 00:03:11,940
run our computation again

71
00:03:11,940 --> 00:03:15,810
basically we we need to save our work

72
00:03:15,810 --> 00:03:18,180
today so that someone tomorrow can

73
00:03:18,180 --> 00:03:20,010
continue our work because we don't know

74
00:03:20,010 --> 00:03:22,260
if you will leave tomorrow from then

75
00:03:22,260 --> 00:03:24,359
some if but something bad happens you

76
00:03:24,359 --> 00:03:27,900
know yeah so in system theory this

77
00:03:27,900 --> 00:03:29,760
called fail recovery mode and most

78
00:03:29,760 --> 00:03:31,650
system actually systems employ this

79
00:03:31,650 --> 00:03:34,440
model and they also offer some

80
00:03:34,440 --> 00:03:37,380
guarantees with that here's a map of

81
00:03:37,380 --> 00:03:39,269
some guarantees you can see several

82
00:03:39,269 --> 00:03:43,889
discussion forums yeah it's a bit

83
00:03:43,889 --> 00:03:47,430
annoying so I would say most of them on

84
00:03:47,430 --> 00:03:50,220
their own say nothing if you see someone

85
00:03:50,220 --> 00:03:52,350
saying exactly once or at least once it

86
00:03:52,350 --> 00:03:54,299
says nothing is it exactly once

87
00:03:54,299 --> 00:03:56,519
processing is exactly once output is

88
00:03:56,519 --> 00:03:58,620
exactly once end-to-end it doesn't

89
00:03:58,620 --> 00:04:01,920
really you know work on its own so I'll

90
00:04:01,920 --> 00:04:04,970
try to resolve this ambiguity right away

91
00:04:04,970 --> 00:04:07,709
so when we talk about guarantees first

92
00:04:07,709 --> 00:04:10,590
of all we have a system so a system is

93
00:04:10,590 --> 00:04:14,190
this box it's closed even though it

94
00:04:14,190 --> 00:04:17,010
seems distributed property civil systems

95
00:04:17,010 --> 00:04:19,470
gives you give you an epoch Chur of a

96
00:04:19,470 --> 00:04:22,860
single thing so this is a single thing

97
00:04:22,860 --> 00:04:24,539
it's a system and then you have the

98
00:04:24,539 --> 00:04:26,280
outside world this can be a database can

99
00:04:26,280 --> 00:04:27,300
be a law

100
00:04:27,300 --> 00:04:30,710
it can be for example a filesystem and

101
00:04:30,710 --> 00:04:33,000
may be talking about guarantees we have

102
00:04:33,000 --> 00:04:34,889
first of all processing guarantees so

103
00:04:34,889 --> 00:04:36,720
always remember processing guarantees

104
00:04:36,720 --> 00:04:40,770
have to do with the system so it's about

105
00:04:40,770 --> 00:04:44,220
what the internal state of the system we

106
00:04:44,220 --> 00:04:45,990
were talking about output delivery or

107
00:04:45,990 --> 00:04:48,030
end-to-end guarantees we usually talk

108
00:04:48,030 --> 00:04:50,550
about the outside world so the effects

109
00:04:50,550 --> 00:04:51,990
of the system the side effects of the

110
00:04:51,990 --> 00:04:53,550
processing of the system in the outside

111
00:04:53,550 --> 00:04:57,180
world so let start with a procedure on

112
00:04:57,180 --> 00:05:00,060
this so why are they need in the first

113
00:05:00,060 --> 00:05:03,479
place the idea is that processing

114
00:05:03,479 --> 00:05:05,370
creates side effects inside the system

115
00:05:05,370 --> 00:05:07,190
it's where your application is running

116
00:05:07,190 --> 00:05:10,320
let's say you do workout that's I know

117
00:05:10,320 --> 00:05:13,289
it's it's very boring but that's the

118
00:05:13,289 --> 00:05:14,250
first thing that comes in mind

119
00:05:14,250 --> 00:05:17,849
unfortunately if you work out your

120
00:05:17,849 --> 00:05:19,410
account might not be correct so it might

121
00:05:19,410 --> 00:05:21,000
not reflect the actual state of the

122
00:05:21,000 --> 00:05:23,849
outside world inside the system this is

123
00:05:23,849 --> 00:05:25,710
this is why it's important right if you

124
00:05:25,710 --> 00:05:27,660
work in transactions and money this can

125
00:05:27,660 --> 00:05:30,690
make a huge difference right if you

126
00:05:30,690 --> 00:05:33,180
don't get the numbers right so less or

127
00:05:33,180 --> 00:05:35,099
more processing sometimes means

128
00:05:35,099 --> 00:05:39,419
incorrect in all states and guarantees

129
00:05:39,419 --> 00:05:41,820
come in three flavors usually pro

130
00:05:41,820 --> 00:05:44,970
security sorry at most once means the

131
00:05:44,970 --> 00:05:46,979
system might process less at least once

132
00:05:46,979 --> 00:05:49,139
means the system might process more and

133
00:05:49,139 --> 00:05:50,699
exactly once means that the system

134
00:05:50,699 --> 00:05:53,940
behaves as if data are processed exactly

135
00:05:53,940 --> 00:05:55,880
once right there's no other side effect

136
00:05:55,880 --> 00:06:00,300
I will not talk about most months

137
00:06:00,300 --> 00:06:02,280
because it's a bit boring you can just

138
00:06:02,280 --> 00:06:03,870
discard records that's all

139
00:06:03,870 --> 00:06:07,169
I'll talk about at least ones first so

140
00:06:07,169 --> 00:06:09,710
this this is also very simple actually

141
00:06:09,710 --> 00:06:12,949
and now all we usually need to have is a

142
00:06:12,949 --> 00:06:17,310
cutter for example any queue or message

143
00:06:17,310 --> 00:06:19,860
log that's durable and lets you go back

144
00:06:19,860 --> 00:06:22,740
in time and replay some input you can

145
00:06:22,740 --> 00:06:24,300
also do manual logging if you remember

146
00:06:24,300 --> 00:06:27,599
storm like the first version they were

147
00:06:27,599 --> 00:06:31,949
doing some manual logging this doesn't

148
00:06:31,949 --> 00:06:33,750
reflect any system it's just an

149
00:06:33,750 --> 00:06:35,820
illustration of what at least once means

150
00:06:35,820 --> 00:06:38,610
so we have three records a green blue

151
00:06:38,610 --> 00:06:41,070
and red when the record goes inside this

152
00:06:41,070 --> 00:06:42,720
them it leaves some side effect in this

153
00:06:42,720 --> 00:06:45,030
case it leaves account right the count

154
00:06:45,030 --> 00:06:46,770
is 1 because we processed one record

155
00:06:46,770 --> 00:06:49,680
it's correct if something goes wrong and

156
00:06:49,680 --> 00:06:51,840
let's say we reconfigured the system

157
00:06:51,840 --> 00:06:55,130
we're able to replay this record right

158
00:06:55,130 --> 00:06:58,550
so if we replace this record we get

159
00:06:58,550 --> 00:07:02,160
count of 2 as well but there is at least

160
00:07:02,160 --> 00:07:06,180
a count of 1 thus at least one no pun

161
00:07:06,180 --> 00:07:10,730
intended so that's how it works

162
00:07:12,620 --> 00:07:14,730
now let's go to the mysterious stuff

163
00:07:14,730 --> 00:07:17,340
exactly once processing all right

164
00:07:17,340 --> 00:07:19,260
this is a bit trickier we need to make

165
00:07:19,260 --> 00:07:21,540
sure that data lives side effects only

166
00:07:21,540 --> 00:07:24,000
once and any underlying mechanism that

167
00:07:24,000 --> 00:07:26,790
does fail recovery should not impact the

168
00:07:26,790 --> 00:07:28,470
actual execution of the system or the

169
00:07:28,470 --> 00:07:32,280
application right if we go a bit

170
00:07:32,280 --> 00:07:33,870
aggressively and say ok I can solve it

171
00:07:33,870 --> 00:07:36,030
it's very simple I will just run the

172
00:07:36,030 --> 00:07:38,490
transaction for every record the system

173
00:07:38,490 --> 00:07:40,740
processes right I can write I can just

174
00:07:40,740 --> 00:07:45,390
write in a key value store all the all

175
00:07:45,390 --> 00:07:47,400
the mutations of the state and all

176
00:07:47,400 --> 00:07:49,410
associated with the records that caused

177
00:07:49,410 --> 00:07:52,620
these mutations and then I'm able to do

178
00:07:52,620 --> 00:07:55,050
anything I wanna consist go back in time

179
00:07:55,050 --> 00:07:59,370
fetch up any state in the history of the

180
00:07:59,370 --> 00:08:02,820
system and so forth this is what Mill

181
00:08:02,820 --> 00:08:05,520
will actually did and it worked pretty

182
00:08:05,520 --> 00:08:07,320
well for Google because they had a very

183
00:08:07,320 --> 00:08:11,570
good key value store but apparently what

184
00:08:11,570 --> 00:08:17,040
can I go back yeah but apparently this

185
00:08:17,040 --> 00:08:19,260
doesn't work everywhere usually people

186
00:08:19,260 --> 00:08:22,230
don't have fine-tuned key value stores

187
00:08:22,230 --> 00:08:24,720
and perfect stores with that can you

188
00:08:24,720 --> 00:08:27,210
know deal with high congestion and write

189
00:08:27,210 --> 00:08:29,220
and append congestion so it's not always

190
00:08:29,220 --> 00:08:30,780
the best case it's very aggressive out

191
00:08:30,780 --> 00:08:33,979
saying perhaps we we can do better

192
00:08:33,979 --> 00:08:36,809
so the problem should be simpler than

193
00:08:36,809 --> 00:08:37,770
that

194
00:08:37,770 --> 00:08:40,559
so actually so first as I said earlier

195
00:08:40,559 --> 00:08:43,039
input can be visually rolled back right

196
00:08:43,039 --> 00:08:45,720
in fact this way logs make sure you can

197
00:08:45,720 --> 00:08:48,570
always achieve this and the process

198
00:08:48,570 --> 00:08:50,550
looks similar to cassettes right if you

199
00:08:50,550 --> 00:08:51,870
remember cassettes if you are in my

200
00:08:51,870 --> 00:08:53,520
generation you probably remember how

201
00:08:53,520 --> 00:08:54,540
they work

202
00:08:54,540 --> 00:08:58,470
a cassette is durable log actually it

203
00:08:58,470 --> 00:09:01,740
stores an input stream let's say sound

204
00:09:01,740 --> 00:09:04,620
or video and let's keep plates and at

205
00:09:04,620 --> 00:09:05,670
some point

206
00:09:05,670 --> 00:09:09,470
roll back to a specific song for example

207
00:09:09,470 --> 00:09:13,470
or offset durable logs actually today

208
00:09:13,470 --> 00:09:16,260
like Kafka do this for motto cassettes

209
00:09:16,260 --> 00:09:20,010
so they can actually play a lot of

210
00:09:20,010 --> 00:09:22,200
dissipates streams and then roll back a

211
00:09:22,200 --> 00:09:25,560
specific set of offsets this is very

212
00:09:25,560 --> 00:09:28,230
cool that means that we can reverse

213
00:09:28,230 --> 00:09:30,120
multiple streams but some partitions

214
00:09:30,120 --> 00:09:32,190
back in parallel in a very consistent

215
00:09:32,190 --> 00:09:36,690
way how can we use that so since we

216
00:09:36,690 --> 00:09:39,180
can't be currently reverse streams then

217
00:09:39,180 --> 00:09:41,220
maybe we can't do the following let's

218
00:09:41,220 --> 00:09:44,720
say we split the stream into parts

219
00:09:44,720 --> 00:09:47,990
coarse grained parts that's why I called

220
00:09:47,990 --> 00:09:51,930
coarse grain photons and this is what

221
00:09:51,930 --> 00:09:53,820
most modern data stream processing

222
00:09:53,820 --> 00:09:55,410
systems do actually in different

223
00:09:55,410 --> 00:09:58,170
different flavors so you see that we

224
00:09:58,170 --> 00:10:01,620
split the stream in two parts right the

225
00:10:01,620 --> 00:10:03,480
only thing we need to do now is to

226
00:10:03,480 --> 00:10:07,020
process these parts and whenever

227
00:10:07,020 --> 00:10:09,690
something goes wrong we revert back to

228
00:10:09,690 --> 00:10:12,210
where the previous part ended for that

229
00:10:12,210 --> 00:10:14,280
we we need to be able to reverse the

230
00:10:14,280 --> 00:10:15,960
input that we can do we have the logs

231
00:10:15,960 --> 00:10:18,840
but we also need to be able to capture

232
00:10:18,840 --> 00:10:20,880
the global states of the system after

233
00:10:20,880 --> 00:10:23,160
processing all these records and all

234
00:10:23,160 --> 00:10:25,050
these records right so we can reverse

235
00:10:25,050 --> 00:10:29,100
everything back and we can do this in

236
00:10:29,100 --> 00:10:32,250
different ways this might seem familiar

237
00:10:32,250 --> 00:10:34,770
so spark people you might feel a bit

238
00:10:34,770 --> 00:10:38,760
bitter vu this is the micro but it does

239
00:10:38,760 --> 00:10:41,520
the same thing in a discrete way so

240
00:10:41,520 --> 00:10:44,610
there is a planner that prepares part

241
00:10:44,610 --> 00:10:48,390
one it sends the records and then the

242
00:10:48,390 --> 00:10:49,760
records are being flushed to the system

243
00:10:49,760 --> 00:10:52,230
they're being processed they create some

244
00:10:52,230 --> 00:10:54,330
side effects the side effects are being

245
00:10:54,330 --> 00:10:56,520
stored as a state of system in a system

246
00:10:56,520 --> 00:10:59,970
store stay store and then you know you

247
00:10:59,970 --> 00:11:01,800
can reschedule you can schedule part two

248
00:11:01,800 --> 00:11:03,690
and then retrieve the old states

249
00:11:03,690 --> 00:11:06,030
continue from there you can flush all

250
00:11:06,030 --> 00:11:08,100
the inputs of part two

251
00:11:08,100 --> 00:11:10,709
create side-effects of Part two so this

252
00:11:10,709 --> 00:11:12,930
happens the very transactional way this

253
00:11:12,930 --> 00:11:14,970
is like RDD processing and then you the

254
00:11:14,970 --> 00:11:17,190
new structure streaming that's something

255
00:11:17,190 --> 00:11:18,660
similar there's a state store actually

256
00:11:18,660 --> 00:11:22,769
it's called say sorry this is a nice way

257
00:11:22,769 --> 00:11:24,680
I don't say this is bad actually

258
00:11:24,680 --> 00:11:27,089
this is a fine example of discreetly

259
00:11:27,089 --> 00:11:29,459
emulating continuous processing as a

260
00:11:29,459 --> 00:11:32,329
series of transactions it's very safe

261
00:11:32,329 --> 00:11:35,250
it's simple to understand actually but

262
00:11:35,250 --> 00:11:37,860
there are some side effects when you

263
00:11:37,860 --> 00:11:39,540
when you create the system like this you

264
00:11:39,540 --> 00:11:43,050
need to make sure that the user writes

265
00:11:43,050 --> 00:11:45,630
code that works in you know subsequent

266
00:11:45,630 --> 00:11:49,079
batches and that affects the API another

267
00:11:49,079 --> 00:11:51,720
side effect is that there's a very high

268
00:11:51,720 --> 00:11:54,779
periodic scheduling latency actually I

269
00:11:54,779 --> 00:11:57,480
know if some of you know drizzle drizzle

270
00:11:57,480 --> 00:12:00,569
is a research project at Berkeley they

271
00:12:00,569 --> 00:12:03,569
they made a study that says okay we can

272
00:12:03,569 --> 00:12:05,339
actually reduce the processing latency

273
00:12:05,339 --> 00:12:07,829
the scheduled latency by pre scheduling

274
00:12:07,829 --> 00:12:09,839
many batches and that then we amortize

275
00:12:09,839 --> 00:12:13,290
the scheduling cause this is true but

276
00:12:13,290 --> 00:12:15,380
that happens the cost of higher

277
00:12:15,380 --> 00:12:18,000
reconfiguration latency so there's a

278
00:12:18,000 --> 00:12:21,689
trade of there I would go with something

279
00:12:21,689 --> 00:12:23,610
like long-running I like long-running

280
00:12:23,610 --> 00:12:26,610
systems because there's notes there's no

281
00:12:26,610 --> 00:12:28,709
need to reconfigure right you can just

282
00:12:28,709 --> 00:12:30,389
let the thing run you scheduled it you

283
00:12:30,389 --> 00:12:31,829
just let it run if you need to

284
00:12:31,829 --> 00:12:35,220
reconfigure you just reconfigure and

285
00:12:35,220 --> 00:12:37,829
that's what happens with a solution for

286
00:12:37,829 --> 00:12:40,860
example let's say we want to take a

287
00:12:40,860 --> 00:12:42,449
snapshot while it's part is being

288
00:12:42,449 --> 00:12:44,250
processed so when all the green records

289
00:12:44,250 --> 00:12:46,620
are going in we have the execution we

290
00:12:46,620 --> 00:12:48,899
say stop everything stopped tunnels

291
00:12:48,899 --> 00:12:51,380
stop the the processing take a snapshot

292
00:12:51,380 --> 00:12:53,850
in this case the snapshot contains the

293
00:12:53,850 --> 00:12:56,639
states plus some in transient events

294
00:12:56,639 --> 00:12:58,199
because this part of the system state

295
00:12:58,199 --> 00:13:00,600
it's inside the box right if we recover

296
00:13:00,600 --> 00:13:02,339
from there we need to replay those

297
00:13:02,339 --> 00:13:06,720
events right and this is one ok approach

298
00:13:06,720 --> 00:13:11,910
but it has a problem the problem is that

299
00:13:11,910 --> 00:13:13,649
we stop execution and that's not

300
00:13:13,649 --> 00:13:17,760
continuous processing so I would say we

301
00:13:17,760 --> 00:13:20,610
could do something better we need to do

302
00:13:20,610 --> 00:13:21,149
two things

303
00:13:21,149 --> 00:13:21,730
when

304
00:13:21,730 --> 00:13:25,000
to not enforce discrete processing the

305
00:13:25,000 --> 00:13:27,070
API and not disrupt the execution with

306
00:13:27,070 --> 00:13:31,149
any underlying mechanism right and also

307
00:13:31,149 --> 00:13:32,620
I don't like this in transit events but

308
00:13:32,620 --> 00:13:36,790
we can deal with them later some of you

309
00:13:36,790 --> 00:13:37,449
might know

310
00:13:37,449 --> 00:13:39,040
let's Lombard he's the father of the

311
00:13:39,040 --> 00:13:44,410
Siebel systems or arguably owner so the

312
00:13:44,410 --> 00:13:46,600
thing is that Leslie Lamport wrote about

313
00:13:46,600 --> 00:13:48,670
distributed snapshots in case classic

314
00:13:48,670 --> 00:13:51,730
paper and he said that the global state

315
00:13:51,730 --> 00:13:53,620
detection algorithms not being super it

316
00:13:53,620 --> 00:13:55,360
should so be superimposed in the other

317
00:13:55,360 --> 00:13:57,750
line commutation and not after the

318
00:13:57,750 --> 00:13:59,730
execution of it right

319
00:13:59,730 --> 00:14:03,760
this really inspired us to come up with

320
00:14:03,760 --> 00:14:06,850
this technique on fling which basically

321
00:14:06,850 --> 00:14:09,310
stops the states just in time

322
00:14:09,310 --> 00:14:11,500
while the execution is running and this

323
00:14:11,500 --> 00:14:14,610
is why I call long-running pipelines

324
00:14:14,610 --> 00:14:17,500
state management so the idea is very

325
00:14:17,500 --> 00:14:19,480
simple we insert some markers the

326
00:14:19,480 --> 00:14:21,820
marketer signify is a promise actually

327
00:14:21,820 --> 00:14:24,490
that whatever comes after the markers

328
00:14:24,490 --> 00:14:27,100
belongs to the next part so basically we

329
00:14:27,100 --> 00:14:28,420
need to take a snapshot whenever we

330
00:14:28,420 --> 00:14:31,029
reach this part right and this goes

331
00:14:31,029 --> 00:14:33,010
along with the pipeline the normal data

332
00:14:33,010 --> 00:14:36,069
pipeline so if we flush records along

333
00:14:36,069 --> 00:14:37,899
with markers what happens is that the

334
00:14:37,899 --> 00:14:40,930
markers stop in some operators inside

335
00:14:40,930 --> 00:14:42,819
the system then the operators can

336
00:14:42,819 --> 00:14:45,010
actually take their partial snapshot

337
00:14:45,010 --> 00:14:46,810
this is not a complete snapshot it's

338
00:14:46,810 --> 00:14:49,870
like a you know a part of the global

339
00:14:49,870 --> 00:14:55,180
snapshot and then what happens is that

340
00:14:55,180 --> 00:14:58,480
operators with model inputs have to make

341
00:14:58,480 --> 00:15:01,000
sure that they process all records of

342
00:15:01,000 --> 00:15:04,540
part one right in this case what we do

343
00:15:04,540 --> 00:15:07,000
is that we prioritize the channels where

344
00:15:07,000 --> 00:15:08,949
we haven't received any barriers

345
00:15:08,949 --> 00:15:11,199
markers right so we need to make sure

346
00:15:11,199 --> 00:15:12,459
that we process all the green records

347
00:15:12,459 --> 00:15:17,440
first and then we take a snapshot so

348
00:15:17,440 --> 00:15:19,170
then we broadcast the barriers and

349
00:15:19,170 --> 00:15:21,430
eventually we have a complete snapshot

350
00:15:21,430 --> 00:15:25,630
that is pipe lines along the data and as

351
00:15:25,630 --> 00:15:27,279
you see there's no records in transit

352
00:15:27,279 --> 00:15:28,240
that's pretty cool

353
00:15:28,240 --> 00:15:30,930
it's like magic

354
00:15:30,980 --> 00:15:34,279
so some facts so this algorithm

355
00:15:34,279 --> 00:15:36,019
basically pipelines naturally with

356
00:15:36,019 --> 00:15:38,269
dataflow it's pretty cool it respects

357
00:15:38,269 --> 00:15:41,029
back pressure and all these things we

358
00:15:41,029 --> 00:15:42,139
can actually get at least once

359
00:15:42,139 --> 00:15:44,750
processing guarantees by dropping the

360
00:15:44,750 --> 00:15:46,160
alignment you know where we actually

361
00:15:46,160 --> 00:15:49,040
prioritize and if you want you can try

362
00:15:49,040 --> 00:15:52,730
it on paper it's homework the algorithm

363
00:15:52,730 --> 00:15:55,250
basically tailors the original Shannon

364
00:15:55,250 --> 00:15:58,699
Lumpur algorithm to to create a minimal

365
00:15:58,699 --> 00:16:01,040
snapshot States so we don't need events

366
00:16:01,040 --> 00:16:03,589
in transit basically and you can also

367
00:16:03,589 --> 00:16:07,070
work with cycles so with cycles we do

368
00:16:07,070 --> 00:16:11,029
the following this is still in a pull

369
00:16:11,029 --> 00:16:12,230
request States for a year

370
00:16:12,230 --> 00:16:16,310
sorry about that but it's correct so the

371
00:16:16,310 --> 00:16:19,399
idea is that we we flushed so there are

372
00:16:19,399 --> 00:16:20,870
there are loop records inside the loop

373
00:16:20,870 --> 00:16:23,050
right there just going around infinitely

374
00:16:23,050 --> 00:16:25,100
that means that we run the same

375
00:16:25,100 --> 00:16:26,930
algorithm similar never ends it will

376
00:16:26,930 --> 00:16:28,910
never terminate so what we actually do

377
00:16:28,910 --> 00:16:32,019
is that we create an upstream blog here

378
00:16:32,019 --> 00:16:34,040
to actually store everything that's

379
00:16:34,040 --> 00:16:35,959
inside the loop so that's part of the

380
00:16:35,959 --> 00:16:37,670
snapshot we just replayed after we

381
00:16:37,670 --> 00:16:39,410
recover and then we have a global State

382
00:16:39,410 --> 00:16:42,189
that's correct

383
00:16:42,760 --> 00:16:47,990
okay output guarantees this is a topic

384
00:16:47,990 --> 00:16:53,899
of very high debate so try not to piss

385
00:16:53,899 --> 00:16:55,610
off anyone

386
00:16:55,610 --> 00:16:58,070
that's why I recommend you always

387
00:16:58,070 --> 00:17:00,589
answering very diplomatic question

388
00:17:00,589 --> 00:17:03,920
answer so so these are three possible

389
00:17:03,920 --> 00:17:05,530
answers to that question

390
00:17:05,530 --> 00:17:10,819
which one would you pick can we have

391
00:17:10,819 --> 00:17:12,109
output guarantees can we guarantee

392
00:17:12,109 --> 00:17:15,470
exactly one's output in general all

393
00:17:15,470 --> 00:17:19,900
right anyone

394
00:17:20,589 --> 00:17:31,659
so sorry I don't have time I know I know

395
00:17:31,659 --> 00:17:37,580
it does the same console right so yeah

396
00:17:37,580 --> 00:17:39,340
the right house is depends I think

397
00:17:39,340 --> 00:17:46,480
everybody can agree yeah alright so

398
00:17:46,480 --> 00:17:48,380
there are many ways to deal with this

399
00:17:48,380 --> 00:17:50,270
problem actually we're talking about the

400
00:17:50,270 --> 00:17:52,520
outside world and the outside world can

401
00:17:52,520 --> 00:17:54,230
be anything can be a database can be a

402
00:17:54,230 --> 00:17:57,230
database that has versioning support can

403
00:17:57,230 --> 00:17:58,970
be a file system that can roll back can

404
00:17:58,970 --> 00:18:00,679
be five system that cannot roll back

405
00:18:00,679 --> 00:18:03,140
I don't know I mean it depends right so

406
00:18:03,140 --> 00:18:05,510
in the system like link we have special

407
00:18:05,510 --> 00:18:08,570
things that give you exactly one output

408
00:18:08,570 --> 00:18:12,230
guarantees and probably you know the

409
00:18:12,230 --> 00:18:14,419
concept of a dependency that's also how

410
00:18:14,419 --> 00:18:16,880
spark structure streaming it provides

411
00:18:16,880 --> 00:18:19,070
exactly once out guarantees it's very

412
00:18:19,070 --> 00:18:20,570
trivial that means it's a processing

413
00:18:20,570 --> 00:18:24,440
property that guarantees you that no

414
00:18:24,440 --> 00:18:25,580
matter how many times you run something

415
00:18:25,580 --> 00:18:27,200
you'll get the same output basically so

416
00:18:27,200 --> 00:18:28,490
that means it will write the same thing

417
00:18:28,490 --> 00:18:32,620
in their database and we have a fling

418
00:18:32,620 --> 00:18:34,940
thing that does this and also another

419
00:18:34,940 --> 00:18:39,250
another sink that uses the HDFS rolling

420
00:18:39,250 --> 00:18:43,330
files and truncate to actually

421
00:18:43,330 --> 00:18:47,150
transactionally so basically it was a

422
00:18:47,150 --> 00:18:51,020
heads are head files buckets and this

423
00:18:51,020 --> 00:18:54,590
respect the snapshotting parts maneuvers

424
00:18:54,590 --> 00:18:56,659
snapshot is complete it marks this part

425
00:18:56,659 --> 00:18:58,900
as committed that means it can be read

426
00:18:58,900 --> 00:19:02,120
otherwise it rolls back it's very simple

427
00:19:02,120 --> 00:19:04,030
actually

428
00:19:04,030 --> 00:19:07,850
so okay no design flows right we have

429
00:19:07,850 --> 00:19:08,289
everything

430
00:19:08,289 --> 00:19:12,320
I guess remember that was the job

431
00:19:12,320 --> 00:19:15,260
monitor there that means you can fail

432
00:19:15,260 --> 00:19:19,159
probably well not really because we

433
00:19:19,159 --> 00:19:21,950
support have an ability and that means

434
00:19:21,950 --> 00:19:25,010
that we you can have multiple instances

435
00:19:25,010 --> 00:19:28,070
of the job answer running in passive son

436
00:19:28,070 --> 00:19:31,039
by mode and retrieve the the the active

437
00:19:31,039 --> 00:19:33,500
site of the let's say failed German

438
00:19:33,500 --> 00:19:36,260
whenever this happens and of course

439
00:19:36,260 --> 00:19:38,620
zookeeper provides leader election

440
00:19:38,620 --> 00:19:41,660
atomic rights and so on so all the

441
00:19:41,660 --> 00:19:44,690
metadata associated with the reactive

442
00:19:44,690 --> 00:19:46,160
jobs that are running in your pipeline

443
00:19:46,160 --> 00:19:51,950
are out there so that's more or less it

444
00:19:51,950 --> 00:19:54,740
actually if you start using plink today

445
00:19:54,740 --> 00:19:58,070
where we have a 1.2 release coming up

446
00:19:58,070 --> 00:20:01,220
and there's some cool features like key

447
00:20:01,220 --> 00:20:04,010
space partitioning job rescaling from

448
00:20:04,010 --> 00:20:06,560
snapshots a sink state snapshots in

449
00:20:06,560 --> 00:20:08,810
rocks B that means that you the operator

450
00:20:08,810 --> 00:20:10,580
doesn't need to wait until the snapshot

451
00:20:10,580 --> 00:20:12,740
complete can just say you know create a

452
00:20:12,740 --> 00:20:15,290
snapshot and then wait until the data

453
00:20:15,290 --> 00:20:20,320
the the rocks B says snapshot complete

454
00:20:21,430 --> 00:20:23,630
monitor state structures these are

455
00:20:23,630 --> 00:20:25,700
pretty cool this append only state that

456
00:20:25,700 --> 00:20:28,040
actually serialize this data and writes

457
00:20:28,040 --> 00:20:34,550
it ahead in rocks B that speeds up a lot

458
00:20:34,550 --> 00:20:37,280
checkpointing also if you have mutable

459
00:20:37,280 --> 00:20:38,720
state you would use value state or

460
00:20:38,720 --> 00:20:40,940
reducing state and there's also mob

461
00:20:40,940 --> 00:20:46,930
state coming up yeah then we have

462
00:20:46,930 --> 00:20:49,430
externalize checkpoints there are two

463
00:20:49,430 --> 00:20:50,840
ways to do checkpoints you can do at

464
00:20:50,840 --> 00:20:52,460
work checkpoints on fling you can say

465
00:20:52,460 --> 00:20:54,950
create a global state of the system now

466
00:20:54,950 --> 00:20:57,890
I want to use it sometime later there's

467
00:20:57,890 --> 00:20:59,950
another way saying do it periodically

468
00:20:59,950 --> 00:21:04,420
but also let me cherry pick which

469
00:21:04,420 --> 00:21:07,160
checkpoint to revert room and that's

470
00:21:07,160 --> 00:21:09,740
externalized checkpoints there are both

471
00:21:09,740 --> 00:21:11,360
very useful features actually and they

472
00:21:11,360 --> 00:21:14,210
can run concurrently at the same time

473
00:21:14,210 --> 00:21:17,420
it's very very cool coming up next we

474
00:21:17,420 --> 00:21:19,550
have our scaling incremental snapshots

475
00:21:19,550 --> 00:21:23,120
and iterative processing this is work

476
00:21:23,120 --> 00:21:26,060
that we're doing it's in research right

477
00:21:26,060 --> 00:21:29,330
now but it will be very cool if you want

478
00:21:29,330 --> 00:21:31,970
to structure iterations on on streams

479
00:21:31,970 --> 00:21:34,160
you will be able to do it Mars is one of

480
00:21:34,160 --> 00:21:39,230
my colleagues working on that yeah and

481
00:21:39,230 --> 00:21:42,200
some acknowledgments these are some core

482
00:21:42,200 --> 00:21:46,610
people that worked a lot spent a lot of

483
00:21:46,610 --> 00:21:47,169
time

484
00:21:47,169 --> 00:21:50,629
fixing everything and creating all these

485
00:21:50,629 --> 00:21:53,749
backends the cool API is and also all

486
00:21:53,749 --> 00:21:57,979
sorts of things and yeah if you have any

487
00:21:57,979 --> 00:22:18,159
questions lots the time workout

488
00:22:37,149 --> 00:22:41,469
is that for output or for for output on

489
00:22:41,469 --> 00:22:53,979
the input side what does this for

490
00:22:53,979 --> 00:22:55,809
example I mean the Kafka sources do that

491
00:22:55,809 --> 00:23:02,849
do that contract how that works

492
00:23:04,109 --> 00:23:07,509
okay so so the question is a how they

493
00:23:07,509 --> 00:23:19,960
the the input processing handshake is so

494
00:23:19,960 --> 00:23:22,629
there is 5 for guarantee if you use one

495
00:23:22,629 --> 00:23:25,570
of these durable durable sources logs

496
00:23:25,570 --> 00:23:27,879
there is a 5-4 Persinger and guarantee

497
00:23:27,879 --> 00:23:30,099
this is simply meant already by people

498
00:23:30,099 --> 00:23:33,339
at Kafka and so on now if you use like a

499
00:23:33,339 --> 00:23:35,080
socket and you're trying to the same

500
00:23:35,080 --> 00:23:36,369
thing yeah you will have this problem

501
00:23:36,369 --> 00:23:37,749
you have to implement your own protocol

502
00:23:37,749 --> 00:23:41,259
to transfer like five four channels

503
00:23:41,259 --> 00:23:45,429
let's say so it's a yeah it's something

504
00:23:45,429 --> 00:23:48,450
with the outside world

