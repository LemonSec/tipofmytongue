1
00:00:00,000 --> 00:00:02,060
you

2
00:00:04,630 --> 00:00:08,420
hello cool so hi everybody I'm Francis

3
00:00:08,420 --> 00:00:10,370
Campo I'm a developer advocate at Google

4
00:00:10,370 --> 00:00:12,590
and I work with gaudium and this is my

5
00:00:12,590 --> 00:00:14,719
fourth year in a row at FOSDEM and this

6
00:00:14,719 --> 00:00:17,090
room keeps on getting more and more

7
00:00:17,090 --> 00:00:19,820
crowded which is cool so if anyone

8
00:00:19,820 --> 00:00:21,650
formed organization is listening we want

9
00:00:21,650 --> 00:00:24,290
to pick a room thank you anyway

10
00:00:24,290 --> 00:00:26,480
I'm gonna be talking about the state of

11
00:00:26,480 --> 00:00:28,280
code is the time we give every single

12
00:00:28,280 --> 00:00:31,039
year and every single year we're about

13
00:00:31,039 --> 00:00:33,020
to release a new version these years go

14
00:00:33,020 --> 00:00:36,320
on the right so what go on load six is

15
00:00:36,320 --> 00:00:39,680
already one year old and it's a version

16
00:00:39,680 --> 00:00:42,020
that added things like context so you

17
00:00:42,020 --> 00:00:43,910
know it's like kind of a big thing of

18
00:00:43,910 --> 00:00:46,280
how we do stuff go on that seven is

19
00:00:46,280 --> 00:00:48,290
already six months old and go on than

20
00:00:48,290 --> 00:00:52,850
eight will be released soon with release

21
00:00:52,850 --> 00:00:56,000
release Candida 1 then 2 now 3 last week

22
00:00:56,000 --> 00:00:59,030
and probably next week we'll have either

23
00:00:59,030 --> 00:01:03,110
release candidate for or go 1.8 in any

24
00:01:03,110 --> 00:01:04,968
of those cases you should be testing

25
00:01:04,968 --> 00:01:07,549
them we need people to test it and make

26
00:01:07,549 --> 00:01:10,490
sure that there's no bugs because there

27
00:01:10,490 --> 00:01:14,240
might be bugs anyway the flights are

28
00:01:14,240 --> 00:01:17,569
online but if you go online it they

29
00:01:17,569 --> 00:01:19,429
might not work it is because they use

30
00:01:19,429 --> 00:01:22,520
the run the playground online and the

31
00:01:22,520 --> 00:01:24,709
playground still runs go 1.7 and what

32
00:01:24,709 --> 00:01:26,060
I'm talking about are the new things

33
00:01:26,060 --> 00:01:28,639
which fight before are new so they don't

34
00:01:28,639 --> 00:01:30,829
work so don't need to file issues about

35
00:01:30,829 --> 00:01:33,619
those we're gonna be talking about a

36
00:01:33,619 --> 00:01:36,229
bunch of things I have a lot of slides

37
00:01:36,229 --> 00:01:38,479
and not that much time so I will not get

38
00:01:38,479 --> 00:01:40,520
too much into detail of the things but

39
00:01:40,520 --> 00:01:42,139
just to give you an idea what are the

40
00:01:42,139 --> 00:01:44,329
cool things that are coming up we're

41
00:01:44,329 --> 00:01:45,950
gonna be talking about all the languages

42
00:01:45,950 --> 00:01:47,329
the language all the changes to the

43
00:01:47,329 --> 00:01:51,169
language this one then all the changes

44
00:01:51,169 --> 00:01:53,209
understand the library or the runtime

45
00:01:53,209 --> 00:01:54,649
there's a lot of cool things in the

46
00:01:54,649 --> 00:01:57,349
runtime going on the tooling and finally

47
00:01:57,349 --> 00:02:00,590
the community so change is the language

48
00:02:00,590 --> 00:02:02,889
there's only one but I really like it

49
00:02:02,889 --> 00:02:05,149
so I don't know how many of you have

50
00:02:05,149 --> 00:02:07,099
written code like this where you have

51
00:02:07,099 --> 00:02:09,530
maybe Thai person that has those refills

52
00:02:09,530 --> 00:02:12,920
named years and in Social Security

53
00:02:12,920 --> 00:02:16,400
number and you want to parse that from

54
00:02:16,400 --> 00:02:17,870
JSON object and the

55
00:02:17,870 --> 00:02:20,120
contains different fields so you define

56
00:02:20,120 --> 00:02:24,590
those struck struck tags that's what you

57
00:02:24,590 --> 00:02:27,290
call them and then you're like oh I want

58
00:02:27,290 --> 00:02:30,680
to return those values the ox but as a

59
00:02:30,680 --> 00:02:32,480
person I want to do a conversion there

60
00:02:32,480 --> 00:02:40,670
so you do this right and that is not my

61
00:02:40,670 --> 00:02:43,129
favorite piece of code code so now you

62
00:02:43,129 --> 00:02:47,510
can write this the big change is that we

63
00:02:47,510 --> 00:02:49,519
keep on checking that the fields are

64
00:02:49,519 --> 00:02:51,560
exactly the same they have the same

65
00:02:51,560 --> 00:02:53,329
types they have they are in the same

66
00:02:53,329 --> 00:02:55,700
order all those same things but we do

67
00:02:55,700 --> 00:02:59,079
ignore the struct tags so we moved from

68
00:02:59,079 --> 00:03:01,310
these from the specification of the

69
00:03:01,310 --> 00:03:03,650
language we move from here that says

70
00:03:03,650 --> 00:03:05,930
value can be converted to a type T it's

71
00:03:05,930 --> 00:03:09,079
either assignable or they're identical

72
00:03:09,079 --> 00:03:10,190
underlying types

73
00:03:10,190 --> 00:03:13,040
same thing with mob with with pointers

74
00:03:13,040 --> 00:03:16,670
what we added is ignoring struct tags

75
00:03:16,670 --> 00:03:19,129
that's it so that is the only thing we

76
00:03:19,129 --> 00:03:20,659
change in the language and it makes your

77
00:03:20,659 --> 00:03:22,099
code a little bit simpler which is

78
00:03:22,099 --> 00:03:25,310
always nice that's it no more change

79
00:03:25,310 --> 00:03:28,549
changes the language there's a bunch of

80
00:03:28,549 --> 00:03:31,880
ports different platforms and I'm sure

81
00:03:31,880 --> 00:03:34,329
that most of you know about these

82
00:03:34,329 --> 00:03:36,079
platforms better than me

83
00:03:36,079 --> 00:03:38,090
so I'm not gonna get too much into

84
00:03:38,090 --> 00:03:41,030
detail but now we support beginning

85
00:03:41,030 --> 00:03:44,959
ladonia and 32-bit mips Dave Chaney told

86
00:03:44,959 --> 00:03:46,669
me that I had to say that little-endian

87
00:03:46,669 --> 00:03:48,919
requires a floating floating point unit

88
00:03:48,919 --> 00:03:50,810
and if you do not have that you should

89
00:03:50,810 --> 00:03:55,910
enable hardware virtualization if you

90
00:03:55,910 --> 00:03:57,470
understand what that means you should do

91
00:03:57,470 --> 00:03:59,560
it

92
00:03:59,740 --> 00:04:01,960
and there's also plan nine is better and

93
00:04:01,960 --> 00:04:07,180
OpenBSD and dragon fly bsd require newer

94
00:04:07,180 --> 00:04:11,230
versions of the west also the important

95
00:04:11,230 --> 00:04:12,760
thing the important part that i think

96
00:04:12,760 --> 00:04:14,320
it's the part that impact the most

97
00:04:14,320 --> 00:04:16,660
people soon not today

98
00:04:16,660 --> 00:04:21,070
is that go on supports the OS X 10.8 but

99
00:04:21,070 --> 00:04:23,680
go wonder nine will not go on Don nine

100
00:04:23,680 --> 00:04:30,160
will require having ten OS X 10.9 which

101
00:04:30,160 --> 00:04:32,260
is important soon so if you're not able

102
00:04:32,260 --> 00:04:35,080
to migrate to a newer version of OS X

103
00:04:35,080 --> 00:04:36,670
you may have issues with next version

104
00:04:36,670 --> 00:04:40,240
for now you get similarly for armed

105
00:04:40,240 --> 00:04:43,900
we will stop supporting to see two CPUs

106
00:04:43,900 --> 00:04:48,460
two processors the on v5 e and r v on v6

107
00:04:48,460 --> 00:04:51,580
will not be supported in go 109 to know

108
00:04:51,580 --> 00:04:54,550
if what you're running will be supported

109
00:04:54,550 --> 00:04:56,830
or not there's actually a go to list

110
00:04:56,830 --> 00:04:59,740
with that flag check and if it complains

111
00:04:59,740 --> 00:05:03,450
then you have a problem if not you got

112
00:05:03,450 --> 00:05:07,180
cool let's talk about tools and there's

113
00:05:07,180 --> 00:05:10,090
a lot of really cool things in here

114
00:05:10,090 --> 00:05:12,790
there's go-to there's a new fix for go

115
00:05:12,790 --> 00:05:16,300
to so how many of you know there's a new

116
00:05:16,300 --> 00:05:19,180
recipe for go fix how many of you have

117
00:05:19,180 --> 00:05:24,160
used go fix ok mostly no one which is

118
00:05:24,160 --> 00:05:27,430
normal go fix it is we used to use it

119
00:05:27,430 --> 00:05:29,020
quite often when go was not stable yet

120
00:05:29,020 --> 00:05:30,820
and basically what it does is you can

121
00:05:30,820 --> 00:05:33,010
say change this thing into these other

122
00:05:33,010 --> 00:05:35,440
thing and the pattern matching that it

123
00:05:35,440 --> 00:05:37,690
does is actually pretty powerful so you

124
00:05:37,690 --> 00:05:39,460
can do like if you change your own API

125
00:05:39,460 --> 00:05:42,250
and you want everybody in your company

126
00:05:42,250 --> 00:05:43,660
to change automatically you could write

127
00:05:43,660 --> 00:05:46,990
something like that we did it so instead

128
00:05:46,990 --> 00:05:51,280
of import going or going the Lord /x

129
00:05:51,280 --> 00:05:53,590
last night slash context now if you run

130
00:05:53,590 --> 00:05:58,450
that it will say that now that is import

131
00:05:58,450 --> 00:06:01,270
context you could also do s CD if you

132
00:06:01,270 --> 00:06:02,440
know how to do it but you know it's like

133
00:06:02,440 --> 00:06:06,720
go fix will do that for you to go vet

134
00:06:06,720 --> 00:06:09,220
keeps on getting better go that is the

135
00:06:09,220 --> 00:06:11,860
tool that we use to have compiler

136
00:06:11,860 --> 00:06:12,990
warnings they're not

137
00:06:12,990 --> 00:06:14,460
compiler warnings because the compiler

138
00:06:14,460 --> 00:06:17,280
does not have come warnings but they

139
00:06:17,280 --> 00:06:18,690
will tell you about things that are

140
00:06:18,690 --> 00:06:21,780
slightly wrong does anyone recognize

141
00:06:21,780 --> 00:06:26,790
what's wrong in this code so we're

142
00:06:26,790 --> 00:06:29,400
deferring where's the body that closed

143
00:06:29,400 --> 00:06:31,110
before we check for the error so if the

144
00:06:31,110 --> 00:06:33,060
error is no nail rest will be nil and

145
00:06:33,060 --> 00:06:35,160
that will panic and they will panic only

146
00:06:35,160 --> 00:06:36,990
when it fails so everything will fail

147
00:06:36,990 --> 00:06:38,970
even worse so it's not a good thing to

148
00:06:38,970 --> 00:06:42,420
have if you run Go Go vet in that you

149
00:06:42,420 --> 00:06:44,520
will see that it says you're using rest

150
00:06:44,520 --> 00:06:46,500
before checking for errors which is

151
00:06:46,500 --> 00:06:48,720
pretty nice I wrote that piece of code

152
00:06:48,720 --> 00:06:50,820
not the one with bugs but the one that

153
00:06:50,820 --> 00:06:54,440
checks that so that's why this lies here

154
00:06:54,440 --> 00:06:57,540
also we have SSA everywhere and I'm now

155
00:06:57,540 --> 00:07:00,120
going to get into detail what SSA is a

156
00:07:00,120 --> 00:07:02,730
single static assignment it is just a

157
00:07:02,730 --> 00:07:05,520
way of writing code and we're using that

158
00:07:05,520 --> 00:07:09,570
form to generate go code now all our

159
00:07:09,570 --> 00:07:12,300
backends use SSA which means that our

160
00:07:12,300 --> 00:07:15,150
code is more compact it's faster and it

161
00:07:15,150 --> 00:07:16,650
is easier to implement a bunch of

162
00:07:16,650 --> 00:07:19,260
algorithms one of them is for instance

163
00:07:19,260 --> 00:07:21,390
that dead code elimination but there's

164
00:07:21,390 --> 00:07:23,100
also many others algorithms that are

165
00:07:23,100 --> 00:07:24,690
gonna make that the compiler is gonna

166
00:07:24,690 --> 00:07:25,440
get better

167
00:07:25,440 --> 00:07:27,450
quite fast now that we have is to say

168
00:07:27,450 --> 00:07:31,280
everywhere also if you were running on

169
00:07:31,280 --> 00:07:35,490
32-bit arm you were not using SSH until

170
00:07:35,490 --> 00:07:38,130
now now you will be using it and you

171
00:07:38,130 --> 00:07:40,320
will see speed ups to up to 30 percent

172
00:07:40,320 --> 00:07:43,170
which is really nice maybe you were

173
00:07:43,170 --> 00:07:45,630
using is to see already it's a little

174
00:07:45,630 --> 00:07:46,860
bit faster because it's go one the rate

175
00:07:46,860 --> 00:07:50,820
but the go compiler is also faster

176
00:07:50,820 --> 00:07:53,700
running go build on a bunch of really

177
00:07:53,700 --> 00:07:57,690
big project it is way faster they go

178
00:07:57,690 --> 00:07:59,850
under seven but not as fast they go on

179
00:07:59,850 --> 00:08:02,070
the four and we'd like to get there one

180
00:08:02,070 --> 00:08:04,320
day but we're working on it we know it's

181
00:08:04,320 --> 00:08:06,390
not like we keep on saying oh the go

182
00:08:06,390 --> 00:08:09,120
compiler is so fast and then we losing

183
00:08:09,120 --> 00:08:10,470
that a little bit so we're working on

184
00:08:10,470 --> 00:08:14,190
that joint then there's also before go

185
00:08:14,190 --> 00:08:16,710
path and the go path is something that

186
00:08:16,710 --> 00:08:19,350
once you start working doing go after a

187
00:08:19,350 --> 00:08:21,870
couple months you like that's obvious

188
00:08:21,870 --> 00:08:24,720
but the first day it's kind of hard so

189
00:08:24,720 --> 00:08:26,310
what we did is

190
00:08:26,310 --> 00:08:29,460
remove them at the friction of having to

191
00:08:29,460 --> 00:08:31,260
define that variable if the variable is

192
00:08:31,260 --> 00:08:33,210
not defined we would have a default

193
00:08:33,210 --> 00:08:35,669
about a default director for that that's

194
00:08:35,669 --> 00:08:42,360
it go bug it is very very simple

195
00:08:42,360 --> 00:08:44,550
you can run it and what it does it's it

196
00:08:44,550 --> 00:08:49,699
opens a bug depending on the Wi-Fi oh

197
00:08:51,650 --> 00:08:54,360
also you need to be logged in that's

198
00:08:54,360 --> 00:08:59,850
that but it further I'm logged in that's

199
00:08:59,850 --> 00:09:00,300
silly

200
00:09:00,300 --> 00:09:02,850
anyway if you were able to see that it

201
00:09:02,850 --> 00:09:05,220
generates a about but also especially at

202
00:09:05,220 --> 00:09:06,720
the end of the bug it includes all the

203
00:09:06,720 --> 00:09:08,100
information about what platform you're

204
00:09:08,100 --> 00:09:10,680
running what what is your environment

205
00:09:10,680 --> 00:09:12,660
variables related to go and stuff like

206
00:09:12,660 --> 00:09:15,090
that like go M not nothing private don't

207
00:09:15,090 --> 00:09:18,660
worry so it makes it much easier for the

208
00:09:18,660 --> 00:09:20,250
government owners to fix your bugs when

209
00:09:20,250 --> 00:09:21,780
we have all of that information so if

210
00:09:21,780 --> 00:09:25,400
you have bugs to file you just go back

211
00:09:25,400 --> 00:09:30,090
cool and going really fast but that's

212
00:09:30,090 --> 00:09:31,440
good because I have a lot of cool things

213
00:09:31,440 --> 00:09:34,680
to say so cool okay so we're gonna talk

214
00:09:34,680 --> 00:09:37,200
about run time now and run time there's

215
00:09:37,200 --> 00:09:40,170
a couple things you go under six we

216
00:09:40,170 --> 00:09:42,510
added the fact that we do data race

217
00:09:42,510 --> 00:09:44,850
detection even when you when you don't

218
00:09:44,850 --> 00:09:47,430
ask for it if you're accessing a map in

219
00:09:47,430 --> 00:09:50,040
an unsafe way like in here where there's

220
00:09:50,040 --> 00:09:51,360
a bunch of different go routines and

221
00:09:51,360 --> 00:09:54,090
they're all adding stuff to this map and

222
00:09:54,090 --> 00:09:55,890
there's no mutex or anything we're just

223
00:09:55,890 --> 00:09:57,900
doing that that is a bad thing that

224
00:09:57,900 --> 00:10:01,320
that's something that should fail and if

225
00:10:01,320 --> 00:10:05,340
you run it it fails and it says

226
00:10:05,340 --> 00:10:07,740
concurrent map rate and map right and it

227
00:10:07,740 --> 00:10:09,360
gives you basically the same output as

228
00:10:09,360 --> 00:10:11,990
when you use data the data race detector

229
00:10:11,990 --> 00:10:15,180
the changes that this now is better and

230
00:10:15,180 --> 00:10:17,850
it detects more cases which means that

231
00:10:17,850 --> 00:10:20,310
you might get more panics it is because

232
00:10:20,310 --> 00:10:24,390
your code is wrong and you should be

233
00:10:24,390 --> 00:10:25,770
running your tests with data race

234
00:10:25,770 --> 00:10:28,230
detection enabled basically ever every

235
00:10:28,230 --> 00:10:32,150
single time there's my piece of advice

236
00:10:32,380 --> 00:10:34,530
and then something really cool we have

237
00:10:34,530 --> 00:10:38,860
mutex can't mute text I fixed that mutex

238
00:10:38,860 --> 00:10:42,910
contention profiling so what when you do

239
00:10:42,910 --> 00:10:45,970
go test - bench to run your benchmarks

240
00:10:45,970 --> 00:10:49,990
you can add - meet mutex profile we had

241
00:10:49,990 --> 00:10:52,870
- CPU profile - main profile now you

242
00:10:52,870 --> 00:10:55,120
have - mutex profile that will generate

243
00:10:55,120 --> 00:10:58,780
a report of how often your go routines

244
00:10:58,780 --> 00:11:03,610
are locked in a mutex you also have all

245
00:11:03,610 --> 00:11:05,830
the ways to set this up but I think this

246
00:11:05,830 --> 00:11:07,450
is the best way with benchmark is very

247
00:11:07,450 --> 00:11:10,270
simple it works really well so for now

248
00:11:10,270 --> 00:11:12,460
it doesn't work with our with readwrite

249
00:11:12,460 --> 00:11:15,300
matrixes but it will at some point

250
00:11:15,300 --> 00:11:19,300
so let's write some code imagine that I

251
00:11:19,300 --> 00:11:21,160
tell you that I want you to find the

252
00:11:21,160 --> 00:11:23,200
factorizations from all the numbers - -

253
00:11:23,200 --> 00:11:25,840
from 2 to n and count how many times

254
00:11:25,840 --> 00:11:29,140
every factor appears so if you do from 2

255
00:11:29,140 --> 00:11:31,150
to 10 you can compute the factors and

256
00:11:31,150 --> 00:11:34,930
you go like well 5 appears here here so

257
00:11:34,930 --> 00:11:38,170
there's twice that thing so I wrote that

258
00:11:38,170 --> 00:11:41,830
code and there's a moment where you're

259
00:11:41,830 --> 00:11:44,560
like ok so when I want to access the map

260
00:11:44,560 --> 00:11:48,370
I have two options either I lock then I

261
00:11:48,370 --> 00:11:50,700
add all my factors and then I a lock or

262
00:11:50,700 --> 00:11:53,170
for every single one of the factors I

263
00:11:53,170 --> 00:11:57,490
lock and unlock right who thinks the one

264
00:11:57,490 --> 00:12:00,880
on top is faster who thinks the one on

265
00:12:00,880 --> 00:12:03,580
the bottom is faster I like it because

266
00:12:03,580 --> 00:12:05,500
it's like have a half the nobody's sure

267
00:12:05,500 --> 00:12:10,500
which that's why this is important so

268
00:12:10,500 --> 00:12:14,950
the one on top is incredibly slower wait

269
00:12:14,950 --> 00:12:17,260
wait wait it's lower and this because of

270
00:12:17,260 --> 00:12:18,670
the contention because you're actually

271
00:12:18,670 --> 00:12:20,680
calling the function lock and a lot less

272
00:12:20,680 --> 00:12:23,710
so technically you should be faster but

273
00:12:23,710 --> 00:12:25,450
you're actually looking and having

274
00:12:25,450 --> 00:12:28,060
contention wait longer than that so when

275
00:12:28,060 --> 00:12:30,010
you run go test that bench you can see

276
00:12:30,010 --> 00:12:31,810
that with go test

277
00:12:31,810 --> 00:12:34,300
- bench mutex profile equals mutex are

278
00:12:34,300 --> 00:12:36,280
out you will see that everything is a

279
00:12:36,280 --> 00:12:38,080
little bit slower that's normal that's

280
00:12:38,080 --> 00:12:39,880
why you should be using it just for

281
00:12:39,880 --> 00:12:42,070
profiling contention profiling all the

282
00:12:42,070 --> 00:12:44,920
things and you will have some

283
00:12:44,920 --> 00:12:46,070
information when you do

284
00:12:46,070 --> 00:12:47,870
p prof and you will see that here we

285
00:12:47,870 --> 00:12:52,160
have the the one where we lock for

286
00:12:52,160 --> 00:12:54,410
shorter time has five seconds of

287
00:12:54,410 --> 00:12:55,670
contention while the other one has

288
00:12:55,670 --> 00:12:57,440
almost seven seconds of contention and

289
00:12:57,440 --> 00:12:59,300
that feels like that maybe not be that

290
00:12:59,300 --> 00:13:00,860
much but is actually a huge amount of

291
00:13:00,860 --> 00:13:04,780
convention so there's so much contention

292
00:13:04,780 --> 00:13:08,720
why don't I use less go routines

293
00:13:08,720 --> 00:13:11,600
slightly I use less CPUs I should get

294
00:13:11,600 --> 00:13:13,400
less contention and there's less people

295
00:13:13,400 --> 00:13:16,460
fighting for the matrix so what I did is

296
00:13:16,460 --> 00:13:20,420
compare it to the sequential version to

297
00:13:20,420 --> 00:13:23,000
the yellow is sequential and when you

298
00:13:23,000 --> 00:13:25,730
have one CPU the sequential and the

299
00:13:25,730 --> 00:13:28,700
white are on the same other than that

300
00:13:28,700 --> 00:13:31,400
then the narrow is way faster the

301
00:13:31,400 --> 00:13:34,130
interesting thing is that sequential it

302
00:13:34,130 --> 00:13:36,620
is actually better than the white one

303
00:13:36,620 --> 00:13:38,330
where we're locking and then doing the

304
00:13:38,330 --> 00:13:40,120
follow-up and then unlocking so

305
00:13:40,120 --> 00:13:42,440
profiling is important sometimes you

306
00:13:42,440 --> 00:13:44,120
think the new code is good it's

307
00:13:44,120 --> 00:13:48,410
sometimes you're wrong the interesting

308
00:13:48,410 --> 00:13:51,080
thing about this is that you might say

309
00:13:51,080 --> 00:13:52,700
oh I'm gonna use narrow section for

310
00:13:52,700 --> 00:13:54,950
everything which would be wrong because

311
00:13:54,950 --> 00:13:57,530
up to 750 elements the other one is

312
00:13:57,530 --> 00:14:00,520
faster so do we use these kind of tools

313
00:14:00,520 --> 00:14:02,870
performance analysis and go is actually

314
00:14:02,870 --> 00:14:05,300
quite powerful right now for the

315
00:14:05,300 --> 00:14:06,470
graphics by the way is Google

316
00:14:06,470 --> 00:14:09,170
Spreadsheets if there's probably

317
00:14:09,170 --> 00:14:11,840
something better talking about

318
00:14:11,840 --> 00:14:13,100
performance let's continue on

319
00:14:13,100 --> 00:14:17,780
performance a little bit more so the

320
00:14:17,780 --> 00:14:19,430
garbage collector we talk about this

321
00:14:19,430 --> 00:14:20,990
every single version and every single

322
00:14:20,990 --> 00:14:24,350
version I have two sides I show all the

323
00:14:24,350 --> 00:14:28,790
official benchmarks and then what people

324
00:14:28,790 --> 00:14:29,780
say on the Internet

325
00:14:29,780 --> 00:14:31,790
I'm gonna drop the official things and

326
00:14:31,790 --> 00:14:33,290
just go to this guy that has been

327
00:14:33,290 --> 00:14:35,570
tweeting for every single goal version

328
00:14:35,570 --> 00:14:40,580
how his servers behave since I would go

329
00:14:40,580 --> 00:14:43,760
under five and the garbage collector

330
00:14:43,760 --> 00:14:45,800
take into account that these servers run

331
00:14:45,800 --> 00:14:48,320
around I think it's one gigabyte of RAM

332
00:14:48,320 --> 00:14:51,620
which is decent server the process went

333
00:14:51,620 --> 00:14:56,780
from around 300 milliseconds to 40 which

334
00:14:56,780 --> 00:14:59,300
is you know quite impressive

335
00:14:59,300 --> 00:15:02,660
then go on the tick's they went from 40

336
00:15:02,660 --> 00:15:08,750
milliseconds to run 4 then go under 7

337
00:15:08,750 --> 00:15:14,330
went from 4 milliseconds to run to go

338
00:15:14,330 --> 00:15:14,870
under 8

339
00:15:14,870 --> 00:15:18,680
cannot go over but it does so now yeah

340
00:15:18,680 --> 00:15:22,100
go under 8 is actually even faster the

341
00:15:22,100 --> 00:15:24,709
the expected pause for the garbage

342
00:15:24,709 --> 00:15:27,230
collector is around 100 milliseconds or

343
00:15:27,230 --> 00:15:31,209
microseconds which is really short so

344
00:15:31,209 --> 00:15:37,970
yeah that's nice and the CPU is spent

345
00:15:37,970 --> 00:15:40,190
for that change is actually not that

346
00:15:40,190 --> 00:15:43,730
much it's around 1 to 2 percent spending

347
00:15:43,730 --> 00:15:46,850
more CPU to get a way shorter garbage

348
00:15:46,850 --> 00:15:49,279
collection pass which also compensates

349
00:15:49,279 --> 00:15:50,570
by the fact that most of the other

350
00:15:50,570 --> 00:15:52,339
things are also faster so your program

351
00:15:52,339 --> 00:15:58,300
will still be faster the ferries faster

352
00:15:58,300 --> 00:16:00,950
that's the mean you should use the fair

353
00:16:00,950 --> 00:16:03,529
owner like the hot path of your program

354
00:16:03,529 --> 00:16:05,570
where you have like a crazy loop with a

355
00:16:05,570 --> 00:16:08,839
bunch of the first probably not before

356
00:16:08,839 --> 00:16:11,660
is faster but it's something that I

357
00:16:11,660 --> 00:16:14,240
would say it helps a lot your code but

358
00:16:14,240 --> 00:16:15,829
it's the first thing I would remove if

359
00:16:15,829 --> 00:16:17,810
you have a performance issue I will move

360
00:16:17,810 --> 00:16:20,510
it somewhere else but now it's faster

361
00:16:20,510 --> 00:16:22,670
it's depending on the cases in between

362
00:16:22,670 --> 00:16:25,640
11 and 34 percent faster than it was

363
00:16:25,640 --> 00:16:28,910
before which is nice but I was as I was

364
00:16:28,910 --> 00:16:31,610
saying defer is not the fastest thing

365
00:16:31,610 --> 00:16:34,490
you can do so we found a place where

366
00:16:34,490 --> 00:16:36,620
we're using defer all the time which

367
00:16:36,620 --> 00:16:39,020
turns out to be C go how many of you

368
00:16:39,020 --> 00:16:42,410
have used C go or any binding to be

369
00:16:42,410 --> 00:16:44,000
honest like if you've used a binding

370
00:16:44,000 --> 00:16:47,630
your VC go so if you're doing that then

371
00:16:47,630 --> 00:16:49,850
you will see that the function calls

372
00:16:49,850 --> 00:16:52,040
have a cost of said it to it because C

373
00:16:52,040 --> 00:16:53,420
go you know you're doing a system

374
00:16:53,420 --> 00:16:55,180
constant like that

375
00:16:55,180 --> 00:16:58,870
so we removed that defer and now it's

376
00:16:58,870 --> 00:17:02,420
half of the time so it's around 50% of

377
00:17:02,420 --> 00:17:04,280
the time it used to take so that is

378
00:17:04,280 --> 00:17:06,559
pretty good and if you look at the

379
00:17:06,559 --> 00:17:09,050
change it is literally moving at the

380
00:17:09,050 --> 00:17:11,240
first statement saying we're going to

381
00:17:11,240 --> 00:17:12,410
remove this the first statement I'm

382
00:17:12,410 --> 00:17:12,709
moving

383
00:17:12,709 --> 00:17:14,809
to all the places where it should be

384
00:17:14,809 --> 00:17:17,720
called so if you have the first in your

385
00:17:17,720 --> 00:17:20,929
code that you execute like millions of

386
00:17:20,929 --> 00:17:25,339
times per second think about that all of

387
00:17:25,339 --> 00:17:26,659
these by the way it comes from Dave

388
00:17:26,659 --> 00:17:29,120
Jenny who's awesome and wrote a very

389
00:17:29,120 --> 00:17:31,429
good blog post the link on the slides

390
00:17:31,429 --> 00:17:35,539
work cool change its understand the

391
00:17:35,539 --> 00:17:40,730
library now sorting how many of you

392
00:17:40,730 --> 00:17:44,960
found that sorting a slice was slightly

393
00:17:44,960 --> 00:17:49,279
painful yeah when you want to sort of

394
00:17:49,279 --> 00:17:51,559
slice imagine that I tell you have a

395
00:17:51,559 --> 00:17:53,419
slice of person the same time as before

396
00:17:53,419 --> 00:17:56,270
with name age and social security number

397
00:17:56,270 --> 00:17:58,760
and they tell you should sort it first

398
00:17:58,760 --> 00:18:00,799
by name then the social security number

399
00:18:00,799 --> 00:18:05,570
and then by by name by H and then you

400
00:18:05,570 --> 00:18:08,690
write that code so that sort by name and

401
00:18:08,690 --> 00:18:12,409
you like done almost you still need to

402
00:18:12,409 --> 00:18:16,130
write this right which is so your slice

403
00:18:16,130 --> 00:18:18,559
of types satisfies the sort interface

404
00:18:18,559 --> 00:18:19,909
that has three methods so you need to

405
00:18:19,909 --> 00:18:22,789
define those what we did is we define it

406
00:18:22,789 --> 00:18:25,340
a new method in the sort package

407
00:18:25,340 --> 00:18:27,860
it's called sword slice and you pass it

408
00:18:27,860 --> 00:18:29,690
a slice and a function which is the

409
00:18:29,690 --> 00:18:32,480
equivalent of the less function so

410
00:18:32,480 --> 00:18:34,970
basically how to compare stuff so now

411
00:18:34,970 --> 00:18:38,270
your code can be simply this so you're

412
00:18:38,270 --> 00:18:41,690
saying sorted by this I can make it a

413
00:18:41,690 --> 00:18:44,390
little bit bigger maybe because I think

414
00:18:44,390 --> 00:18:46,549
this is kind of cool so you can say

415
00:18:46,549 --> 00:18:49,580
sword slice that slice P and the

416
00:18:49,580 --> 00:18:52,130
function as then using compares name or

417
00:18:52,130 --> 00:18:54,140
compares age or compare social security

418
00:18:54,140 --> 00:18:58,909
number the first thing I saw is that is

419
00:18:58,909 --> 00:19:00,919
know what I wanted to do okay the first

420
00:19:00,919 --> 00:19:02,899
thing I saw this my first reaction was

421
00:19:02,899 --> 00:19:06,380
like yes but is this reflection how slow

422
00:19:06,380 --> 00:19:10,039
is this and I the benchmarks and then I

423
00:19:10,039 --> 00:19:12,740
use Google Cloud Google class I work for

424
00:19:12,740 --> 00:19:13,909
Google Club by the way but

425
00:19:13,909 --> 00:19:16,750
computer-related Google Spreadsheets and

426
00:19:16,750 --> 00:19:20,960
it is slower but if you do some

427
00:19:20,960 --> 00:19:22,370
mathematics to show it you know

428
00:19:22,370 --> 00:19:23,899
statistics you can show the data you

429
00:19:23,899 --> 00:19:25,799
want you will see that it is actually

430
00:19:25,799 --> 00:19:28,200
not that much slower there's a little

431
00:19:28,200 --> 00:19:30,450
bit of an overhead but it is not crazy

432
00:19:30,450 --> 00:19:33,210
so if you're writing code where again it

433
00:19:33,210 --> 00:19:34,769
is a place where the affair would

434
00:19:34,769 --> 00:19:36,059
totally go there because you know it's

435
00:19:36,059 --> 00:19:38,190
just code that it's not that important

436
00:19:38,190 --> 00:19:40,559
that runs so crazy fast I would use it

437
00:19:40,559 --> 00:19:43,559
but otherwise I will probably still

438
00:19:43,559 --> 00:19:45,809
define those types if you really are

439
00:19:45,809 --> 00:19:48,509
performance if the performance is

440
00:19:48,509 --> 00:19:50,610
actually needed for that specific

441
00:19:50,610 --> 00:19:54,749
sorting algorithm and then we have

442
00:19:54,749 --> 00:19:57,539
plugins and for plugins I'm actually

443
00:19:57,539 --> 00:19:59,220
gonna do a little demo because we have

444
00:19:59,220 --> 00:20:01,139
time we have lots of Sun that's cool

445
00:20:01,139 --> 00:20:05,039
okay so plugins that go basically what

446
00:20:05,039 --> 00:20:07,590
they allow you is you can define a

447
00:20:07,590 --> 00:20:09,809
package like this package main that

448
00:20:09,809 --> 00:20:15,080
defines to exported value exported

449
00:20:15,080 --> 00:20:18,629
identifiers V and F and then you can do

450
00:20:18,629 --> 00:20:21,840
go build - build mode equals plugin when

451
00:20:21,840 --> 00:20:23,549
you do this what it generates it's an

452
00:20:23,549 --> 00:20:26,629
dot sol shirt object that you can then

453
00:20:26,629 --> 00:20:30,509
load so that is one of the things build

454
00:20:30,509 --> 00:20:32,730
not equals plug-in is new and it only

455
00:20:32,730 --> 00:20:36,029
works for Linux so you cannot run it on

456
00:20:36,029 --> 00:20:39,090
Mac or Windows yet I will come becoming

457
00:20:39,090 --> 00:20:42,509
something soon once you have this we

458
00:20:42,509 --> 00:20:44,519
also added a new package in the standard

459
00:20:44,519 --> 00:20:48,749
library called plugin and what that

460
00:20:48,749 --> 00:20:52,559
allows you is to do plug-in that open

461
00:20:52,559 --> 00:20:55,919
given the path of an Oso file it loads

462
00:20:55,919 --> 00:20:59,039
it and then you can look up symbols look

463
00:20:59,039 --> 00:21:01,950
at identifiers and then if you do a cast

464
00:21:01,950 --> 00:21:04,950
to whatever you know it is then you

465
00:21:04,950 --> 00:21:08,580
should be able to call it so with this

466
00:21:08,580 --> 00:21:11,159
in mind I was like wouldn't it be

467
00:21:11,159 --> 00:21:13,049
awesome to implement something that

468
00:21:13,049 --> 00:21:18,299
would do how hard code swapping in go so

469
00:21:18,299 --> 00:21:20,190
basically I'm just have my code in

470
00:21:20,190 --> 00:21:23,090
production and then I save my file and

471
00:21:23,090 --> 00:21:26,279
production changes that is awful idea by

472
00:21:26,279 --> 00:21:29,759
the way that is not a good idea but I've

473
00:21:29,759 --> 00:21:31,799
tried to do it and I did it yesterday so

474
00:21:31,799 --> 00:21:36,619
I'm gonna show it real quick so

475
00:21:36,700 --> 00:21:39,820
the curve basically it does a bunch of

476
00:21:39,820 --> 00:21:41,890
things and these open source by the way

477
00:21:41,890 --> 00:21:47,500
so you can go see it on github camper

478
00:21:47,500 --> 00:21:49,179
government plugins so if you want to see

479
00:21:49,179 --> 00:21:53,799
the code is everything is there so if

480
00:21:53,799 --> 00:21:58,750
you do dock around of that thing and

481
00:21:58,750 --> 00:22:02,130
then go wrong me go what if this is

482
00:22:02,130 --> 00:22:05,230
there's this plug-in directory where I

483
00:22:05,230 --> 00:22:07,570
have a bunch of different go files it

484
00:22:07,570 --> 00:22:09,250
compels it that's why it's pretty slow

485
00:22:09,250 --> 00:22:11,260
compiling it's slow loading and

486
00:22:11,260 --> 00:22:13,660
executing is actually quite fast so it

487
00:22:13,660 --> 00:22:16,330
just goes every second it goes compile

488
00:22:16,330 --> 00:22:20,650
everything it calls it so I go to that

489
00:22:20,650 --> 00:22:23,710
plugins directory and I come here and

490
00:22:23,710 --> 00:22:32,230
I'm like whoop I'm gonna change this and

491
00:22:32,230 --> 00:22:38,650
change this to that's this one okay I'm

492
00:22:38,650 --> 00:22:41,020
gonna save and go remainder go is not

493
00:22:41,020 --> 00:22:42,610
doing anything magic this just

494
00:22:42,610 --> 00:22:45,970
recompiling and loading the plugging as

495
00:22:45,970 --> 00:22:53,020
new so I save come here and boom so now

496
00:22:53,020 --> 00:22:56,470
what you have is like code hot I never

497
00:22:56,470 --> 00:22:58,720
remember but it's the actual name cut

498
00:22:58,720 --> 00:23:01,179
swapping of go which is an awful idea

499
00:23:01,179 --> 00:23:03,250
for many things in production but if

500
00:23:03,250 --> 00:23:05,080
you're playing with things like video

501
00:23:05,080 --> 00:23:06,700
games or stuff like that where you need

502
00:23:06,700 --> 00:23:08,740
to load extra things this could be

503
00:23:08,740 --> 00:23:14,290
really cool so there you go thank you

504
00:23:14,290 --> 00:23:17,790
[Applause]

505
00:23:17,790 --> 00:23:23,820
oh so yeah there's a demo that you just

506
00:23:23,820 --> 00:23:26,820
saw and I tweeted about it and that is

507
00:23:26,820 --> 00:23:29,280
the repo if you want to go see it

508
00:23:29,280 --> 00:23:32,550
it is it is experimental the new things

509
00:23:32,550 --> 00:23:33,660
in production and send me an issue

510
00:23:33,660 --> 00:23:36,060
please actually don't do that that's off

511
00:23:36,060 --> 00:23:39,300
Olivia okay one more thing that we added

512
00:23:39,300 --> 00:23:43,650
is HTTP shutdown as you might all have

513
00:23:43,650 --> 00:23:46,560
used HTTP package you do HTTP listener

514
00:23:46,560 --> 00:23:48,990
serve and that starts a server and if

515
00:23:48,990 --> 00:23:50,010
you want to stop it

516
00:23:50,010 --> 00:23:53,900
it is hot it is doable but it's hard and

517
00:23:53,900 --> 00:23:56,040
what we want to do is we want to

518
00:23:56,040 --> 00:23:58,110
implement this thing called lame duck

519
00:23:58,110 --> 00:24:00,770
lame duck mode where a server stops

520
00:24:00,770 --> 00:24:03,030
receiving new requests so if you get a

521
00:24:03,030 --> 00:24:05,640
new request it will say sorry now but it

522
00:24:05,640 --> 00:24:07,830
will not just die and drop all the

523
00:24:07,830 --> 00:24:10,470
requests that were ongoing there's a new

524
00:24:10,470 --> 00:24:12,090
way of doing this which is actually much

525
00:24:12,090 --> 00:24:14,550
simpler so if this code here what I'm

526
00:24:14,550 --> 00:24:17,190
doing is I'm actually listening for a

527
00:24:17,190 --> 00:24:20,010
ctrl C so that's how you do that in go

528
00:24:20,010 --> 00:24:22,470
and as soon as I get a ctrl C I will

529
00:24:22,470 --> 00:24:25,830
call the shutdown method in the server

530
00:24:25,830 --> 00:24:27,870
that I define so listeners what will not

531
00:24:27,870 --> 00:24:29,400
work but you need to define a server

532
00:24:29,400 --> 00:24:32,310
value and then from there you go

533
00:24:32,310 --> 00:24:34,440
listen and serve and that will return

534
00:24:34,440 --> 00:24:36,150
something so the important thing is that

535
00:24:36,150 --> 00:24:38,400
server that shutdown in your personal

536
00:24:38,400 --> 00:24:40,830
context if you want to you can also pass

537
00:24:40,830 --> 00:24:45,020
background and then on the other side

538
00:24:45,020 --> 00:24:47,730
you do listener serve and now the thing

539
00:24:47,730 --> 00:24:50,460
that is near is that until now you were

540
00:24:50,460 --> 00:24:53,220
able to load fatal of that because if

541
00:24:53,220 --> 00:24:55,110
that listener serve returns something

542
00:24:55,110 --> 00:24:58,800
that it will be a bad error now that

543
00:24:58,800 --> 00:25:00,630
actually cannot change because it could

544
00:25:00,630 --> 00:25:03,570
be HTTP dot airserver closed which is

545
00:25:03,570 --> 00:25:05,370
what you get when the server stops

546
00:25:05,370 --> 00:25:07,860
because you told it to so that is a

547
00:25:07,860 --> 00:25:09,720
little bit of a difference but that is

548
00:25:09,720 --> 00:25:11,490
actually something pretty cool if you

549
00:25:11,490 --> 00:25:12,990
have something in production and you

550
00:25:12,990 --> 00:25:15,840
really care about your SL is loz this

551
00:25:15,840 --> 00:25:17,700
could be a good way to increase them a

552
00:25:17,700 --> 00:25:23,700
little bit then XE picture HCP tree we

553
00:25:23,700 --> 00:25:25,680
all talked about HT Picchu is amazing

554
00:25:25,680 --> 00:25:29,420
because let me show you the little demo

555
00:25:29,420 --> 00:25:31,049
HTTP

556
00:25:31,049 --> 00:25:37,600
to that going the Lord tells go for

557
00:25:37,600 --> 00:25:41,080
tiles so I know if you've seen this demo

558
00:25:41,080 --> 00:25:43,570
but the cool thing about this is that

559
00:25:43,570 --> 00:25:47,020
you can do so let's say that I'm gonna I

560
00:25:47,020 --> 00:25:49,419
don't know if I need to simulate latency

561
00:25:49,419 --> 00:25:52,660
being here but I'm gonna do it so this

562
00:25:52,660 --> 00:25:55,299
is with 200 milliseconds of latency in

563
00:25:55,299 --> 00:25:59,110
HTTP 1 I'm getting its request its image

564
00:25:59,110 --> 00:26:01,929
one after the other right with HTTP 2

565
00:26:01,929 --> 00:26:04,510
what you can do is you can just say give

566
00:26:04,510 --> 00:26:06,130
me all the things and you start

567
00:26:06,130 --> 00:26:09,040
receiving them directly like so the

568
00:26:09,040 --> 00:26:10,600
difference is that the same with the

569
00:26:10,600 --> 00:26:13,380
same latency HT Picchu looks like this

570
00:26:13,380 --> 00:26:16,030
so that's pretty good there's another

571
00:26:16,030 --> 00:26:18,040
thing that is really cool which is HTTP

572
00:26:18,040 --> 00:26:20,020
2 allows you to push stuff from the

573
00:26:20,020 --> 00:26:23,230
server which means that if you if I

574
00:26:23,230 --> 00:26:25,210
manage to the server now and you ask

575
00:26:25,210 --> 00:26:27,700
before home direct CML I'm gonna say

576
00:26:27,700 --> 00:26:30,820
this home the XML and have home dot CSS

577
00:26:30,820 --> 00:26:33,130
and scripts DOJ's because you're gonna

578
00:26:33,130 --> 00:26:35,200
need it later with the same idea that

579
00:26:35,200 --> 00:26:38,140
you will not need to wait to ask for it

580
00:26:38,140 --> 00:26:39,910
I know you're gonna need it so I'll give

581
00:26:39,910 --> 00:26:40,740
it to you

582
00:26:40,740 --> 00:26:45,179
so that is exactly what push does

583
00:26:45,179 --> 00:26:47,890
there's a new interface the pusher

584
00:26:47,890 --> 00:26:50,740
interface and what it does is when you

585
00:26:50,740 --> 00:26:53,770
call push and you pass a URL it will

586
00:26:53,770 --> 00:26:58,210
just fake an HTTP request there so if

587
00:26:58,210 --> 00:27:00,490
you have your server already serving the

588
00:27:00,490 --> 00:27:02,500
CSM and the JavaScript you don't need to

589
00:27:02,500 --> 00:27:04,960
add anything else it will just work the

590
00:27:04,960 --> 00:27:07,929
only thing you need to do is check here

591
00:27:07,929 --> 00:27:13,809
that is a type conversion knights it's a

592
00:27:13,809 --> 00:27:16,299
type certian so basically what you're

593
00:27:16,299 --> 00:27:19,090
saying is I want my response writer to

594
00:27:19,090 --> 00:27:21,549
add as a pusher and that could be the

595
00:27:21,549 --> 00:27:23,890
case or not if it's HTTP 1 it will not

596
00:27:23,890 --> 00:27:25,540
be the case for instance if you're using

597
00:27:25,540 --> 00:27:27,220
something slightly different it will not

598
00:27:27,220 --> 00:27:28,510
be the case but sometimes you will have

599
00:27:28,510 --> 00:27:31,030
an HTTP 2 which is a pusher and then you

600
00:27:31,030 --> 00:27:33,570
call push and that's it now you have it

601
00:27:33,570 --> 00:27:38,710
so I run HTTP 2 and HTTP one at the same

602
00:27:38,710 --> 00:27:40,750
time from the same server and let's see

603
00:27:40,750 --> 00:27:43,470
how that looks

604
00:27:44,340 --> 00:27:51,610
No oh wait I'm I've changed so many

605
00:27:51,610 --> 00:27:53,740
things that is sad

606
00:27:53,740 --> 00:27:59,110
let me fix that in a second so did every

607
00:27:59,110 --> 00:28:02,340
fresh this kind of fine package go like

608
00:28:02,340 --> 00:28:12,390
okay let me do something state of go

609
00:28:12,390 --> 00:28:23,470
today and HTTP to go wrong go bill and

610
00:28:23,470 --> 00:28:29,650
right here what okay and it's every

611
00:28:29,650 --> 00:28:31,179
single time I come to a conference I

612
00:28:31,179 --> 00:28:34,380
break something so that's not shocking

613
00:28:34,380 --> 00:28:37,600
okay I'm I shouldn't be doing this but

614
00:28:37,600 --> 00:28:41,909
whatever okay so that is the problem

615
00:28:41,909 --> 00:28:48,030
state of go HCP to absolutely

616
00:28:48,030 --> 00:28:55,659
let's try again yay it works okay so now

617
00:28:55,659 --> 00:28:57,250
I'm gonna come here refresh and run it

618
00:28:57,250 --> 00:29:01,679
and you didn't see anything cool okay so

619
00:29:01,679 --> 00:29:05,919
if i run localhost these I'm good look

620
00:29:05,919 --> 00:29:11,380
at my CSS skills the cool thing is that

621
00:29:11,380 --> 00:29:13,210
you can do the network and when you

622
00:29:13,210 --> 00:29:15,460
refresh you can see that there's a local

623
00:29:15,460 --> 00:29:17,890
host al CSS those are the two that we

624
00:29:17,890 --> 00:29:20,049
care about and you can see that the way

625
00:29:20,049 --> 00:29:24,070
it works is that here we first load

626
00:29:24,070 --> 00:29:26,020
local host which is the HTML then we

627
00:29:26,020 --> 00:29:27,909
parse it then we realize oh we need the

628
00:29:27,909 --> 00:29:30,789
CSS so then we send the request and then

629
00:29:30,789 --> 00:29:31,990
we get it okay

630
00:29:31,990 --> 00:29:35,890
which is how HDB one works the same

631
00:29:35,890 --> 00:29:41,530
thing with HTTP 2 it's actually quite

632
00:29:41,530 --> 00:29:45,130
different right let me refresh you can

633
00:29:45,130 --> 00:29:48,700
see here that push that is because the

634
00:29:48,700 --> 00:29:51,970
server told the browser to go get that

635
00:29:51,970 --> 00:29:54,399
already basically not go get that but

636
00:29:54,399 --> 00:29:55,789
like this is for you

637
00:29:55,789 --> 00:29:57,559
you're gonna need it later so these

638
00:29:57,559 --> 00:30:01,249
faster because we got we finished

639
00:30:01,249 --> 00:30:03,559
receiving the the event before we

640
00:30:03,559 --> 00:30:05,779
actually end up parsing the HTML which

641
00:30:05,779 --> 00:30:07,759
is faster if you have a bigger webpage

642
00:30:07,759 --> 00:30:09,619
this actually you will see the

643
00:30:09,619 --> 00:30:10,879
difference if you're importing something

644
00:30:10,879 --> 00:30:13,879
like angularjs and you have a lot of CSS

645
00:30:13,879 --> 00:30:15,739
stuff the fact that you're able to push

646
00:30:15,739 --> 00:30:17,989
it before will make your server much

647
00:30:17,989 --> 00:30:24,859
faster so that that was in case it

648
00:30:24,859 --> 00:30:28,159
didn't work which almost didn't so then

649
00:30:28,159 --> 00:30:29,720
we also have all the contact support

650
00:30:29,720 --> 00:30:35,210
context was added in go 1.6 in go 1.7 we

651
00:30:35,210 --> 00:30:38,239
added support for the net package and

652
00:30:38,239 --> 00:30:41,809
the HTTP package in OS X X and now we'd

653
00:30:41,809 --> 00:30:43,249
go on the rate we added to server

654
00:30:43,249 --> 00:30:45,590
shutdown so that's what we saw you can

655
00:30:45,590 --> 00:30:48,019
pass a context there but also to sequel

656
00:30:48,019 --> 00:30:50,349
package so you can do you can add

657
00:30:50,349 --> 00:30:53,299
context so you can cancel ongoing

658
00:30:53,299 --> 00:30:55,460
requests and stuff like that and also

659
00:30:55,460 --> 00:30:59,179
ternary solver there's a couple more

660
00:30:59,179 --> 00:31:02,149
changes soon this light there's actually

661
00:31:02,149 --> 00:31:04,220
if I did the whole thing there's three

662
00:31:04,220 --> 00:31:06,499
slides of something with these forms so

663
00:31:06,499 --> 00:31:08,690
there's a lot of different changes going

664
00:31:08,690 --> 00:31:13,519
on if you do something in go you should

665
00:31:13,519 --> 00:31:16,340
read this thing because maybe there is

666
00:31:16,340 --> 00:31:18,109
something that I consider not to be that

667
00:31:18,109 --> 00:31:19,879
important but that will make your life

668
00:31:19,879 --> 00:31:21,739
much easier so it's definitely worth

669
00:31:21,739 --> 00:31:23,720
going there just searching for whatever

670
00:31:23,720 --> 00:31:26,210
you do sequel whatever and just find it

671
00:31:26,210 --> 00:31:27,440
there and see if there's anything new

672
00:31:27,440 --> 00:31:31,609
that impacts you and finally we're gonna

673
00:31:31,609 --> 00:31:36,049
be talking about the community first one

674
00:31:36,049 --> 00:31:37,519
of my favorite organizations women who

675
00:31:37,519 --> 00:31:39,019
go keeps on growing all around the world

676
00:31:39,019 --> 00:31:42,859
which is awesome and now they have 16

677
00:31:42,859 --> 00:31:45,080
chapters and it is pretty awesome

678
00:31:45,080 --> 00:31:46,220
because they're like all around the

679
00:31:46,220 --> 00:31:49,669
world so if you're interested in that

680
00:31:49,669 --> 00:31:53,359
they're awesome and I don't know I was

681
00:31:53,359 --> 00:31:55,279
gonna say there's nothing there is not

682
00:31:55,279 --> 00:31:58,129
one in Brussels but there might be I

683
00:31:58,129 --> 00:32:00,859
don't know I can add them in there but

684
00:32:00,859 --> 00:32:03,619
if you were considering doing it there's

685
00:32:03,619 --> 00:32:05,929
a very good it is very easy to create a

686
00:32:05,929 --> 00:32:07,340
new chapter and you have a lot of

687
00:32:07,340 --> 00:32:09,140
support from old

688
00:32:09,140 --> 00:32:12,860
so think about it we also have go

689
00:32:12,860 --> 00:32:15,530
meetups go meetups these are webpage

690
00:32:15,530 --> 00:32:17,540
that I maintain myself and I added a map

691
00:32:17,540 --> 00:32:20,390
and I'm not good at HTML as you already

692
00:32:20,390 --> 00:32:20,900
saw

693
00:32:20,900 --> 00:32:23,480
so my first iteration was I had a little

694
00:32:23,480 --> 00:32:27,080
pin per go meet up and it was really

695
00:32:27,080 --> 00:32:29,630
ugly so you cannot see the world there's

696
00:32:29,630 --> 00:32:31,310
a lot of meetups everywhere around the

697
00:32:31,310 --> 00:32:33,050
world you can play with it he's going

698
00:32:33,050 --> 00:32:38,240
meetups that ask for calm Wow the Wi-Fi

699
00:32:38,240 --> 00:32:40,370
there you go so you can go click around

700
00:32:40,370 --> 00:32:45,670
and see that around here in Belgium

701
00:32:45,670 --> 00:32:49,520
there is nothing there's only Antwerp

702
00:32:49,520 --> 00:32:51,290
and no Brussels so if you're from

703
00:32:51,290 --> 00:32:52,790
Brussels you should create a go meet up

704
00:32:52,790 --> 00:32:55,210
there you go

705
00:32:56,350 --> 00:32:59,690
and finally all the conference's we keep

706
00:32:59,690 --> 00:33:01,400
on having a bunch of conferences so

707
00:33:01,400 --> 00:33:02,930
there's one which is Fossum you might

708
00:33:02,930 --> 00:33:04,690
have heard about it it's pretty good

709
00:33:04,690 --> 00:33:07,310
then after this we have go freak on

710
00:33:07,310 --> 00:33:09,020
India is there anyone that is going to

711
00:33:09,020 --> 00:33:11,930
go for con India you are going to go for

712
00:33:11,930 --> 00:33:13,730
your helping organizing it so there you

713
00:33:13,730 --> 00:33:18,320
go that is normal we also I will be

714
00:33:18,320 --> 00:33:20,390
there too we also have gopher come

715
00:33:20,390 --> 00:33:22,460
Denver anyone going to go freaking

716
00:33:22,460 --> 00:33:25,160
Denver cool one two people I'm also

717
00:33:25,160 --> 00:33:28,190
going there I hope my talk is accepted

718
00:33:28,190 --> 00:33:29,930
if not I still go but whatever

719
00:33:29,930 --> 00:33:32,300
go on UK which is closer it's just a

720
00:33:32,300 --> 00:33:34,760
train away and then Doug which is in

721
00:33:34,760 --> 00:33:36,890
Paris docker is a very cool conference

722
00:33:36,890 --> 00:33:38,480
they do something cool which is the

723
00:33:38,480 --> 00:33:40,610
talks are only 18 minutes so the

724
00:33:40,610 --> 00:33:44,570
speakers kind of Rumble like I do and

725
00:33:44,570 --> 00:33:48,200
finally we are celebrating go than one

726
00:33:48,200 --> 00:33:50,840
go 1.8 regardless of Li happens or not

727
00:33:50,840 --> 00:33:52,670
we're gonna celebrate it we decided on

728
00:33:52,670 --> 00:33:56,150
the dates so you can go see there's a

729
00:33:56,150 --> 00:33:57,590
release party and release parties

730
00:33:57,590 --> 00:33:59,630
happens all around the world I know that

731
00:33:59,630 --> 00:34:01,520
you have a slide later about it will

732
00:34:01,520 --> 00:34:02,930
show it in a minute with like the

733
00:34:02,930 --> 00:34:05,540
closest ones around here go see it and

734
00:34:05,540 --> 00:34:06,560
go have fun

735
00:34:06,560 --> 00:34:08,719
you will probably learn basically the

736
00:34:08,719 --> 00:34:10,520
same things you learn here but there's

737
00:34:10,520 --> 00:34:12,590
extra talks and lots of cool people so

738
00:34:12,590 --> 00:34:15,530
go see them and with that that's all

739
00:34:15,530 --> 00:34:17,418
thank you

740
00:34:17,418 --> 00:34:19,480
you

