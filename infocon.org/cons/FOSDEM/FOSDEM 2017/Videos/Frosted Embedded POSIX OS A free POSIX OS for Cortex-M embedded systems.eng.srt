1
00:00:00,030 --> 00:00:03,050
the way are some technique

2
00:00:04,650 --> 00:00:08,039
don't problems the talk today is about

3
00:00:08,039 --> 00:00:11,070
frost set which is an acronym for free

4
00:00:11,070 --> 00:00:12,810
operating system for tiny embedded

5
00:00:12,810 --> 00:00:18,330
devices we are making it fully GPL so

6
00:00:18,330 --> 00:00:20,010
the whole kernel is fully open source

7
00:00:20,010 --> 00:00:24,029
licensed our group is called insane

8
00:00:24,029 --> 00:00:26,190
having machines and we're trying to do

9
00:00:26,190 --> 00:00:28,619
nonprofit development and research into

10
00:00:28,619 --> 00:00:30,689
Internet of Things especially free

11
00:00:30,689 --> 00:00:34,260
software the management platform we

12
00:00:34,260 --> 00:00:36,660
chose to use is get up because it's

13
00:00:36,660 --> 00:00:39,989
quite obvious so the target is the main

14
00:00:39,989 --> 00:00:41,760
target at the moment is the cortex-m

15
00:00:41,760 --> 00:00:48,090
family they're not too big yet so it's

16
00:00:48,090 --> 00:00:52,350
still a challenge we had we go from

17
00:00:52,350 --> 00:00:55,140
cortex-m 0 to cortex-m 7 support at the

18
00:00:55,140 --> 00:00:57,469
moment

19
00:00:57,730 --> 00:01:01,000
so the cortex-m family is a 32-bit

20
00:01:01,000 --> 00:01:03,460
architecture it's a low-power devices

21
00:01:03,460 --> 00:01:06,250
with physical addressing so there's no

22
00:01:06,250 --> 00:01:08,380
memory management units they have

23
00:01:08,380 --> 00:01:11,680
integrated network and a whole bunch of

24
00:01:11,680 --> 00:01:15,910
buses the m4 m7 also do digital signal

25
00:01:15,910 --> 00:01:17,979
processing and they also have

26
00:01:17,979 --> 00:01:25,479
accelerated floating-point so yeah the

27
00:01:25,479 --> 00:01:30,540
thing is that we want a real-time OS and

28
00:01:30,540 --> 00:01:33,520
if you look at embedded Linux it's not

29
00:01:33,520 --> 00:01:35,860
really feasible because it's grown very

30
00:01:35,860 --> 00:01:40,450
big even the MMU variant like mike micro

31
00:01:40,450 --> 00:01:43,360
C Linux it's too big for the reason for

32
00:01:43,360 --> 00:01:47,320
the resources these boards have so goals

33
00:01:47,320 --> 00:01:50,800
are primarily to have a POSIX API to

34
00:01:50,800 --> 00:01:53,860
allow easy porting from Linux user lands

35
00:01:53,860 --> 00:01:58,869
to frosted it's very easy to port

36
00:01:58,869 --> 00:02:01,810
applications because at the moment if

37
00:02:01,810 --> 00:02:03,729
you pour something and there's something

38
00:02:03,729 --> 00:02:06,009
missing it's just a library call or a

39
00:02:06,009 --> 00:02:08,530
Cisco that needs to get added in frosted

40
00:02:08,530 --> 00:02:13,120
and then things work we have a hard

41
00:02:13,120 --> 00:02:15,160
kernel uses the space separation

42
00:02:15,160 --> 00:02:17,980
approach we can do physical memory

43
00:02:17,980 --> 00:02:20,590
segmentation using memory protection

44
00:02:20,590 --> 00:02:22,390
unit on this family of microcontrollers

45
00:02:22,390 --> 00:02:25,150
and that allows for the kernel to have

46
00:02:25,150 --> 00:02:27,040
its own memory segment and every process

47
00:02:27,040 --> 00:02:28,900
as well and they cannot access each

48
00:02:28,900 --> 00:02:33,640
other because yeah then sec fault we

49
00:02:33,640 --> 00:02:36,340
also want to be real-time so at the

50
00:02:36,340 --> 00:02:38,800
moment we already have real-time

51
00:02:38,800 --> 00:02:42,760
capabilities the ultra-low power is

52
00:02:42,760 --> 00:02:45,459
something we're still working on TCP

53
00:02:45,459 --> 00:02:48,099
connectivity is already there we have

54
00:02:48,099 --> 00:02:50,800
both normal Ethernet and USB Ethernet

55
00:02:50,800 --> 00:02:55,230
using Piko TCP as tcp/ip stack in kernel

56
00:02:55,230 --> 00:02:58,890
so yeah all the kernel code this is GPL

57
00:02:58,890 --> 00:03:02,319
but you can run any license in userland

58
00:03:02,319 --> 00:03:04,400
as you please

59
00:03:04,400 --> 00:03:08,569
so at the moment we're almost fully

60
00:03:08,569 --> 00:03:11,720
profile 54 posix-compliant it's

61
00:03:11,720 --> 00:03:14,480
real-time multi-pronged multi threat but

62
00:03:14,480 --> 00:03:15,980
the threading still needs a little bit

63
00:03:15,980 --> 00:03:20,930
of polishing so the components we have

64
00:03:20,930 --> 00:03:24,049
the application layer is in userland

65
00:03:24,049 --> 00:03:26,780
then we have a modified new Lipsy

66
00:03:26,780 --> 00:03:29,209
library that we compiled into our own

67
00:03:29,209 --> 00:03:32,690
cross compiler tool chain then in the

68
00:03:32,690 --> 00:03:35,120
core you have the the core itself the

69
00:03:35,120 --> 00:03:37,250
scheduler networking virtual file system

70
00:03:37,250 --> 00:03:40,489
file system memory manager then under

71
00:03:40,489 --> 00:03:43,579
that you have the device drivers and for

72
00:03:43,579 --> 00:03:46,160
the operating system to know which pins

73
00:03:46,160 --> 00:03:48,530
do what you also need some more specific

74
00:03:48,530 --> 00:03:49,099
whoops

75
00:03:49,099 --> 00:03:52,489
some more specific code to define which

76
00:03:52,489 --> 00:03:55,579
pins are aware and stuff like that so

77
00:03:55,579 --> 00:03:58,700
the record area size is fixed and base

78
00:03:58,700 --> 00:04:00,680
applications and shell scripts are

79
00:04:00,680 --> 00:04:04,220
compiled into a binary fat and then

80
00:04:04,220 --> 00:04:07,879
stored into a zip FS that's execution in

81
00:04:07,879 --> 00:04:13,609
place so for the application code in New

82
00:04:13,609 --> 00:04:17,000
Zealand the goal is that it's basically

83
00:04:17,000 --> 00:04:20,870
no work to port mix executables to frost

84
00:04:20,870 --> 00:04:24,889
it the reality is that some stuff is

85
00:04:24,889 --> 00:04:28,280
still missing in frosted and we don't

86
00:04:28,280 --> 00:04:32,210
have fork but we only have V fork so the

87
00:04:32,210 --> 00:04:34,130
applications are in binary flat format

88
00:04:34,130 --> 00:04:36,110
they're compiled with our own tool chain

89
00:04:36,110 --> 00:04:41,120
and with some flags here if you're

90
00:04:41,120 --> 00:04:43,430
interested we also have a frosted user

91
00:04:43,430 --> 00:04:45,560
land repository with some base user land

92
00:04:45,560 --> 00:04:50,750
utilities the context separation is such

93
00:04:50,750 --> 00:04:53,060
that the processes are really executed

94
00:04:53,060 --> 00:04:54,919
in their own context they cannot access

95
00:04:54,919 --> 00:04:57,020
supervisor code they cannot access

96
00:04:57,020 --> 00:04:59,300
kernel memory they cannot access each

97
00:04:59,300 --> 00:05:02,479
other stack and they have separate stack

98
00:05:02,479 --> 00:05:04,849
pointers and through the mpu we can

99
00:05:04,849 --> 00:05:09,169
enforce this this is a overview of the

100
00:05:09,169 --> 00:05:13,070
system interrupts so the power on state

101
00:05:13,070 --> 00:05:16,190
reset handler accessing memory are not

102
00:05:16,190 --> 00:05:18,469
supposed to mem fault handler and then

103
00:05:18,469 --> 00:05:22,039
the process gets killed of course system

104
00:05:22,039 --> 00:05:24,409
calls come in to the supervisor call

105
00:05:24,409 --> 00:05:29,419
handler which then executes Cisco and

106
00:05:29,419 --> 00:05:32,979
then we have GPS with with sistex

107
00:05:32,979 --> 00:05:36,139
basically the scheduler is a double

108
00:05:36,139 --> 00:05:39,050
lists we have processes even marked as

109
00:05:39,050 --> 00:05:41,180
idling or running it's a round-robin

110
00:05:41,180 --> 00:05:44,599
policy so every process usually gets

111
00:05:44,599 --> 00:05:46,310
scheduled the same amount of time and

112
00:05:46,310 --> 00:05:48,860
once everybody got this chance to do

113
00:05:48,860 --> 00:05:52,070
something just goes back but we also

114
00:05:52,070 --> 00:05:57,380
have a real-time priority option so in

115
00:05:57,380 --> 00:05:59,510
the real time if there's an interrupt

116
00:05:59,510 --> 00:06:01,010
coming in for a process marked as

117
00:06:01,010 --> 00:06:03,529
real-time immediately everything is

118
00:06:03,529 --> 00:06:06,020
preempted and this is scheduled for

119
00:06:06,020 --> 00:06:13,909
execution and the latency for the

120
00:06:13,909 --> 00:06:16,400
real-time processes it's predictable so

121
00:06:16,400 --> 00:06:18,279
that's really good

122
00:06:18,279 --> 00:06:22,539
this is just a nice graphic

123
00:06:23,870 --> 00:06:26,810
so they're repositories we have the main

124
00:06:26,810 --> 00:06:29,210
repository of the kernel which is the

125
00:06:29,210 --> 00:06:32,389
whole kernel we have a repository for

126
00:06:32,389 --> 00:06:36,080
our own tool chain which we build with

127
00:06:36,080 --> 00:06:38,090
cross tool ng and we also have

128
00:06:38,090 --> 00:06:40,820
repository for that but we also make

129
00:06:40,820 --> 00:06:45,100
periodic releases of the tool chain

130
00:06:45,100 --> 00:06:48,080
we have a special headers repository

131
00:06:48,080 --> 00:06:49,669
because we need to include some common

132
00:06:49,669 --> 00:06:52,699
headers both in user land in kernel and

133
00:06:52,699 --> 00:06:55,729
in the tool chain then we also have the

134
00:06:55,729 --> 00:06:59,870
frost at user land repository and as the

135
00:06:59,870 --> 00:07:02,630
hardware abstraction we use unicorn MX

136
00:07:02,630 --> 00:07:04,970
which is our own fork of lip open cm

137
00:07:04,970 --> 00:07:09,410
tree this is a nice graph of the

138
00:07:09,410 --> 00:07:11,240
dependencies and interconnections of the

139
00:07:11,240 --> 00:07:17,960
different repositories to change its I

140
00:07:17,960 --> 00:07:19,910
takes a while to build and that's why we

141
00:07:19,910 --> 00:07:22,820
make releases periodically why our own

142
00:07:22,820 --> 00:07:26,030
tool chain because we want to be able to

143
00:07:26,030 --> 00:07:28,280
compile our applications and be able to

144
00:07:28,280 --> 00:07:30,860
automatically resolve include parts and

145
00:07:30,860 --> 00:07:34,130
stuff like that and also to produce fat

146
00:07:34,130 --> 00:07:36,500
binaries the nice side effect is that

147
00:07:36,500 --> 00:07:38,539
the two chain can both compile the

148
00:07:38,539 --> 00:07:40,610
kernel and the user around application

149
00:07:40,610 --> 00:07:42,910
so

150
00:07:50,030 --> 00:07:52,810
number of difficult

151
00:07:52,810 --> 00:07:57,660
for a number of popular boards like the

152
00:07:57,660 --> 00:08:03,030
stm32f4 six disco disco here so we also

153
00:08:03,030 --> 00:08:07,240
borrowed the K config system from the

154
00:08:07,240 --> 00:08:09,940
Linux kernel because it's quite quite

155
00:08:09,940 --> 00:08:12,910
handy and applicable in this case the

156
00:08:12,910 --> 00:08:14,590
user land configuration is also done

157
00:08:14,590 --> 00:08:16,990
with da coffee the apps that are

158
00:08:16,990 --> 00:08:20,800
selected are archived in CFS and that's

159
00:08:20,800 --> 00:08:22,980
getting mounted to /bin not start up

160
00:08:22,980 --> 00:08:25,720
when the system starts sliding slash in

161
00:08:25,720 --> 00:08:28,810
it is executed and if slash in it that

162
00:08:28,810 --> 00:08:30,580
is a she is present it's going to be

163
00:08:30,580 --> 00:08:33,729
parsed using the default shell which

164
00:08:33,729 --> 00:08:41,110
which is called fresh for where does it

165
00:08:41,110 --> 00:08:52,480
come from the options are selected just

166
00:08:52,480 --> 00:08:54,760
make to build and then you end up with

167
00:08:54,760 --> 00:08:56,620
the image that bin file that you can

168
00:08:56,620 --> 00:09:02,020
flash there's a couple of binaries

169
00:09:02,020 --> 00:09:04,210
produced actually so there's a elf file

170
00:09:04,210 --> 00:09:05,950
of the kernel there's an image file of

171
00:09:05,950 --> 00:09:07,270
the kernel and there's an app store

172
00:09:07,270 --> 00:09:09,190
image and then at the end the kernel

173
00:09:09,190 --> 00:09:11,320
that emission app goes up that image

174
00:09:11,320 --> 00:09:13,960
gets concatenated together to image

175
00:09:13,960 --> 00:09:17,130
stored in and that's the one you flash

176
00:09:17,130 --> 00:09:21,550
we also have a report that has a

177
00:09:21,550 --> 00:09:24,310
modified entry target to have a bit more

178
00:09:24,310 --> 00:09:26,830
resources so you can also run frosted

179
00:09:26,830 --> 00:09:31,360
increment with networking and stuff all

180
00:09:31,360 --> 00:09:36,730
works really fine we also have CI using

181
00:09:36,730 --> 00:09:39,160
Jenkins so every commits Jenkins

182
00:09:39,160 --> 00:09:42,490
rebuilds stuff and harasses us on our

183
00:09:42,490 --> 00:09:44,800
see if it fails

184
00:09:44,800 --> 00:09:46,989
they're flashing to the target you can

185
00:09:46,989 --> 00:09:50,050
do either over the st-link because those

186
00:09:50,050 --> 00:09:53,230
birds have their own ISP on board or you

187
00:09:53,230 --> 00:09:56,829
can copy it over USB if it has embed

188
00:09:56,829 --> 00:09:59,920
bootloader or if it's supposed efu you

189
00:09:59,920 --> 00:10:13,839
can also do that okay that was it now

190
00:10:13,839 --> 00:10:17,249
we'll see if something wants to work

191
00:10:22,580 --> 00:10:24,320
if you want to show the shell and you

192
00:10:24,320 --> 00:10:32,029
should probably be here yeah yeah yes

193
00:10:32,029 --> 00:10:33,130
yes first flash

194
00:10:33,130 --> 00:10:36,200
[Music]

195
00:10:41,040 --> 00:10:43,579
yeah

196
00:10:47,140 --> 00:10:50,110
in the meanwhile if you have questions

197
00:10:50,110 --> 00:10:52,640
most most of the development team is in

198
00:10:52,640 --> 00:10:55,430
this room so I can be able to answer

199
00:10:55,430 --> 00:11:08,500
those get this question there okay

200
00:11:11,029 --> 00:11:13,970
the typical size okay depends

201
00:11:13,970 --> 00:11:17,269
yeah this the question was what is the

202
00:11:17,269 --> 00:11:19,850
yeah what is the typical size for

203
00:11:19,850 --> 00:11:24,160
installing crusted on the flesh and

204
00:11:25,120 --> 00:11:27,890
depends of course on how much features

205
00:11:27,890 --> 00:11:30,440
to enable in the kernel we were able to

206
00:11:30,440 --> 00:11:33,680
build the kernel as small as 25 30

207
00:11:33,680 --> 00:11:36,860
kilobytes but needs to be a power to the

208
00:11:36,860 --> 00:11:38,660
flash part where it starts to the kernel

209
00:11:38,660 --> 00:11:41,290
so I would say that the minimum of 32

210
00:11:41,290 --> 00:11:44,870
kilobytes of kernel size is needed and

211
00:11:44,870 --> 00:11:47,390
then of course on top of that there will

212
00:11:47,390 --> 00:11:48,920
be a partition on the flash that

213
00:11:48,920 --> 00:11:51,140
contains all the applications and that

214
00:11:51,140 --> 00:11:52,640
would be sized of course so based on the

215
00:11:52,640 --> 00:11:55,490
size of your of your applications well I

216
00:11:55,490 --> 00:12:00,050
would say that about with 64 2 1228

217
00:12:00,050 --> 00:12:03,110
kilobyte is able to run a minimal

218
00:12:03,110 --> 00:12:05,649
trusted

219
00:12:07,220 --> 00:12:17,730
yes question there is fasted really

220
00:12:17,730 --> 00:12:19,619
ready for production and we have real

221
00:12:19,619 --> 00:12:22,680
example of companies in that the answer

222
00:12:22,680 --> 00:12:25,589
is no but we are having a lot of fun

223
00:12:25,589 --> 00:12:27,420
with it and it's getting better and more

224
00:12:27,420 --> 00:12:30,959
stable by the step by the minutes and so

225
00:12:30,959 --> 00:12:34,850
we're looking for some money - that's

226
00:12:34,850 --> 00:12:38,970
daring - to use it in a production thing

227
00:12:38,970 --> 00:12:41,029
but it's for sure ready to show this

228
00:12:41,029 --> 00:12:50,639
like we supported the this historical id

229
00:12:50,639 --> 00:12:52,220
Software's duma

230
00:12:52,220 --> 00:12:56,279
game that's now running on the frame

231
00:12:56,279 --> 00:13:00,079
buffer that someone wrote driver for and

232
00:13:00,079 --> 00:13:03,420
yeah so it's it's quite stable as you

233
00:13:03,420 --> 00:13:06,089
can see and the nice part about it it's

234
00:13:06,089 --> 00:13:09,329
it's mostly POSIX so it's basically the

235
00:13:09,329 --> 00:13:11,339
really tiny tiny Unix

236
00:13:11,339 --> 00:13:13,980
where you can put your UNIX application

237
00:13:13,980 --> 00:13:16,470
Linux application - with with the most

238
00:13:16,470 --> 00:13:25,379
no effort yes yes the question is can we

239
00:13:25,379 --> 00:13:28,410
run gdb to debug I think about the

240
00:13:28,410 --> 00:13:30,990
kernel nerdy applications yes we can run

241
00:13:30,990 --> 00:13:33,540
gdb directly to the target to debug the

242
00:13:33,540 --> 00:13:37,910
kernel and we can run a gdb server from

243
00:13:37,910 --> 00:13:40,889
the user space to debug single

244
00:13:40,889 --> 00:13:44,100
applications so you can actually connect

245
00:13:44,100 --> 00:13:45,870
the gdb to a different ports if you want

246
00:13:45,870 --> 00:13:48,269
to debug your own application yes so our

247
00:13:48,269 --> 00:13:52,639
- chain contains a gdb binary as well

248
00:13:52,639 --> 00:13:53,759
maybe

249
00:13:53,759 --> 00:13:56,730
do we have time for another question No

250
00:13:56,730 --> 00:14:00,019
[Music]

251
00:14:03,960 --> 00:14:06,840
okay that was not an observation but

252
00:14:06,840 --> 00:14:10,060
zubaba made the abductor chain in case

253
00:14:10,060 --> 00:14:13,090
someone wants to try that on their own

254
00:14:13,090 --> 00:14:15,480
Laptop Per so you don't need to download

255
00:14:15,480 --> 00:14:18,220
every single component or clone

256
00:14:18,220 --> 00:14:20,890
recursively the github but you can

257
00:14:20,890 --> 00:14:25,000
don't let the docker image one more

258
00:14:25,000 --> 00:14:28,530
question no question maybe there

259
00:14:46,970 --> 00:14:49,770
okay so the question was what are the

260
00:14:49,770 --> 00:14:52,110
actual imitation harder limitation we

261
00:14:52,110 --> 00:14:54,870
met on the on the target the basic

262
00:14:54,870 --> 00:14:58,220
targets to be chosen is because exam

263
00:14:58,220 --> 00:15:02,400
yeah maybe one bigger impacting the

264
00:15:02,400 --> 00:15:04,830
first thing that comes to my mind is

265
00:15:04,830 --> 00:15:08,190
that the court exam as a limit of eight

266
00:15:08,190 --> 00:15:10,620
different memory areas for the memory

267
00:15:10,620 --> 00:15:13,140
protection unit so we're not able to

268
00:15:13,140 --> 00:15:15,060
protect different areas of the heap at

269
00:15:15,060 --> 00:15:17,400
this point so the hip is still shared

270
00:15:17,400 --> 00:15:20,490
but the stacks of the single processes

271
00:15:20,490 --> 00:15:24,510
are isolated with more flexibility in

272
00:15:24,510 --> 00:15:28,320
this area we would be able to have a

273
00:15:28,320 --> 00:15:31,080
better memory protection but arm is

274
00:15:31,080 --> 00:15:34,350
already worked there on the mv8 family

275
00:15:34,350 --> 00:15:37,680
and they already have a data sheet that

276
00:15:37,680 --> 00:15:40,440
explains that the number of MP you as

277
00:15:40,440 --> 00:15:43,110
lots as increased so we're looking

278
00:15:43,110 --> 00:15:46,260
forward to two-port thrusted as soon as

279
00:15:46,260 --> 00:15:49,890
possible to the cortex m23 what is

280
00:15:49,890 --> 00:15:53,340
called the new one just yeah the v8

281
00:15:53,340 --> 00:15:54,870
architecture that's that's coming up

282
00:15:54,870 --> 00:15:57,140
this year

283
00:16:00,170 --> 00:16:06,779
[Music]

284
00:16:06,970 --> 00:16:08,769
Oh architecture if you want to have a

285
00:16:08,769 --> 00:16:11,889
full POSIX system I know the either

286
00:16:11,889 --> 00:16:22,480
keeping a record exactly so that's

287
00:16:22,480 --> 00:16:24,160
that's a very interesting question and

288
00:16:24,160 --> 00:16:25,899
I'm really glad that someone asked this

289
00:16:25,899 --> 00:16:30,189
so why didn't you guys use a cortex a

290
00:16:30,189 --> 00:16:32,259
that already has a menu and a lot of

291
00:16:32,259 --> 00:16:36,029
resources to run a UNIX or you just

292
00:16:36,029 --> 00:16:39,189
stick to the cortex M which is limited

293
00:16:39,189 --> 00:16:41,040
in resources and just have a pure

294
00:16:41,040 --> 00:16:44,350
real-time operating system the answer is

295
00:16:44,350 --> 00:16:46,209
me luck something in the middle

296
00:16:46,209 --> 00:16:49,689
we like UNIX real time UNIX on a small

297
00:16:49,689 --> 00:16:53,709
chip embedded CPU that doesn't have to

298
00:16:53,709 --> 00:16:56,879
have an MMO to to to run smoothly and

299
00:16:56,879 --> 00:17:00,610
the approaches on the embedded world for

300
00:17:00,610 --> 00:17:04,390
what is for what embedded OS are

301
00:17:04,390 --> 00:17:10,839
nowadays are a bit too primitive if you

302
00:17:10,839 --> 00:17:13,359
can tell me this like three artists for

303
00:17:13,359 --> 00:17:15,789
instance it's not much of a mess it's

304
00:17:15,789 --> 00:17:19,419
just a bunch of a schedule with with a

305
00:17:19,419 --> 00:17:21,970
bunch of support for a finicky mechanism

306
00:17:21,970 --> 00:17:26,260
and a very basic heap but for the rest

307
00:17:26,260 --> 00:17:30,429
is still as a number of limitation

308
00:17:30,429 --> 00:17:32,559
especially on the readability of your

309
00:17:32,559 --> 00:17:35,140
API so you can't have the flexibility

310
00:17:35,140 --> 00:17:36,909
that you have if you're coming from the

311
00:17:36,909 --> 00:17:38,950
linux world on the other hand they've

312
00:17:38,950 --> 00:17:41,320
simple big data slides we did Linux

313
00:17:41,320 --> 00:17:44,530
kernel ramping up insides because nobody

314
00:17:44,530 --> 00:17:46,809
in the Linux Foundation right now cares

315
00:17:46,809 --> 00:17:49,840
about the embedded developers and that's

316
00:17:49,840 --> 00:17:51,940
that's a major problem I'm not saying

317
00:17:51,940 --> 00:17:54,700
that we a small group of independent

318
00:17:54,700 --> 00:17:56,530
developers are providing a solution to

319
00:17:56,530 --> 00:17:59,159
this but I hope that this at least gives

320
00:17:59,159 --> 00:18:03,640
some kind of point of to reflect upon

321
00:18:03,640 --> 00:18:07,240
that we really need something unix-like

322
00:18:07,240 --> 00:18:12,309
to to look at except when we crash on

323
00:18:12,309 --> 00:18:14,730
the pinging

324
00:18:17,390 --> 00:18:19,890
it's a network manager of some other

325
00:18:19,890 --> 00:18:28,800
operating system then yes basically what

326
00:18:28,800 --> 00:18:30,809
I did right now was boot up the board

327
00:18:30,809 --> 00:18:33,030
with the USB Ethernet configured and

328
00:18:33,030 --> 00:18:35,600
connected to a USB cable to the laptop

329
00:18:35,600 --> 00:18:38,340
assigned an IP address to the interface

330
00:18:38,340 --> 00:18:40,320
that we got and pinked the board over

331
00:18:40,320 --> 00:18:43,830
USB Ethernet and as you can see the

332
00:18:43,830 --> 00:18:46,050
board is replying so you have

333
00:18:46,050 --> 00:18:48,649
connectivity

334
00:18:49,100 --> 00:18:56,250
[Applause]

