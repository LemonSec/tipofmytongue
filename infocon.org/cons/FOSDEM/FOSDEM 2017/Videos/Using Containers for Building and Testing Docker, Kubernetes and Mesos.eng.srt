1
00:00:00,000 --> 00:00:02,269
so

2
00:00:04,930 --> 00:00:07,660
I'm gonna talk about using containers

3
00:00:07,660 --> 00:00:11,980
for building and testing and covering

4
00:00:11,980 --> 00:00:12,490
docker

5
00:00:12,490 --> 00:00:15,099
renée's and missus that's my turret

6
00:00:15,099 --> 00:00:16,840
handle if you want to tweet about it

7
00:00:16,840 --> 00:00:18,400
only good things please

8
00:00:18,400 --> 00:00:20,890
but things you can treat them to that

9
00:00:20,890 --> 00:00:24,279
guy over there and well a little bit

10
00:00:24,279 --> 00:00:28,119
about me I work at cloud base I working

11
00:00:28,119 --> 00:00:29,880
what it's called a private sedation team

12
00:00:29,880 --> 00:00:33,730
where we basically run Jenkins at the

13
00:00:33,730 --> 00:00:35,469
scale using operating and docker

14
00:00:35,469 --> 00:00:37,960
containers and I contribute to the

15
00:00:37,960 --> 00:00:40,360
junkies messes plugging I'm also the

16
00:00:40,360 --> 00:00:43,290
author of the kubernetes plugging so

17
00:00:43,290 --> 00:00:47,500
I'll try to tell you when I'm biased for

18
00:00:47,500 --> 00:00:50,500
something but that's that's where my

19
00:00:50,500 --> 00:00:53,079
experience comes from when I also the

20
00:00:53,079 --> 00:00:55,090
maintainer of or one of the maintenance

21
00:00:55,090 --> 00:00:56,680
of the official docker images for

22
00:00:56,680 --> 00:01:00,820
Jenkins and for maven a longtime maven

23
00:01:00,820 --> 00:01:03,460
contributor member of the posse

24
00:01:03,460 --> 00:01:06,820
foundation and helping with any other

25
00:01:06,820 --> 00:01:11,950
open source software that I've used and

26
00:01:11,950 --> 00:01:14,409
I'm a Google cloud platform expert that

27
00:01:14,409 --> 00:01:16,300
this comes from the kubernetes side of

28
00:01:16,300 --> 00:01:16,690
things

29
00:01:16,690 --> 00:01:20,260
whatever that means that title means ok

30
00:01:20,260 --> 00:01:22,950
so who is using docker raise your hands

31
00:01:22,950 --> 00:01:25,180
in one way or another

32
00:01:25,180 --> 00:01:31,360
ok which is not in production ok well

33
00:01:31,360 --> 00:01:35,110
more than usual I mean this the pace

34
00:01:35,110 --> 00:01:37,659
that docker adoption is being like

35
00:01:37,659 --> 00:01:43,869
through the roof so the I love this to

36
00:01:43,869 --> 00:01:45,909
it the solution darker the problem you

37
00:01:45,909 --> 00:01:49,360
tell me right and this is a lot of what

38
00:01:49,360 --> 00:01:50,920
a lot of people are doing with lucker

39
00:01:50,920 --> 00:01:54,549
basically just using for anything but

40
00:01:54,549 --> 00:01:57,930
it's for building and testing and

41
00:01:57,930 --> 00:02:00,850
deployment all these sort of things it's

42
00:02:00,850 --> 00:02:03,400
actually pretty good solution and it

43
00:02:03,400 --> 00:02:08,258
helps a lot dealing with like multiple

44
00:02:08,258 --> 00:02:13,049
architectures multiple operating well

45
00:02:13,049 --> 00:02:16,290
packaged versions tool versions

46
00:02:16,290 --> 00:02:20,069
combinations of different things

47
00:02:20,280 --> 00:02:23,110
but it's not trivial this is actually

48
00:02:23,110 --> 00:02:25,990
how they use the ship containers from

49
00:02:25,990 --> 00:02:28,240
boat into the harbor in some place in

50
00:02:28,240 --> 00:02:31,780
the Caribbean so using containers is not

51
00:02:31,780 --> 00:02:36,730
trivial there was recently a post I

52
00:02:36,730 --> 00:02:39,370
think it was folder saying sorry you're

53
00:02:39,370 --> 00:02:40,590
gonna be this tall to ride

54
00:02:40,590 --> 00:02:43,180
micro-services and all the things that

55
00:02:43,180 --> 00:02:47,320
you need to do to be able to like use it

56
00:02:47,320 --> 00:02:49,450
and it's not just oh yeah let's let's

57
00:02:49,450 --> 00:02:51,310
switch completely to microservices and

58
00:02:51,310 --> 00:02:52,690
docker containers and everything and

59
00:02:52,690 --> 00:02:57,910
everything is gonna be fine right so one

60
00:02:57,910 --> 00:03:00,040
of the things that you're gonna do when

61
00:03:00,040 --> 00:03:03,750
you're using docker containers at this

62
00:03:03,750 --> 00:03:07,930
scale or I mean pretty soon after you do

63
00:03:07,930 --> 00:03:10,810
the hello world it's gonna you're gonna

64
00:03:10,810 --> 00:03:15,610
need a cluster a scheduling system so

65
00:03:15,610 --> 00:03:18,070
something that is gonna create a cluster

66
00:03:18,070 --> 00:03:22,030
of host servers running docker or maybe

67
00:03:22,030 --> 00:03:24,490
now other types of container runtimes

68
00:03:24,490 --> 00:03:29,970
or in the future and you're gonna and

69
00:03:29,970 --> 00:03:32,709
especially this is what we built cloud

70
00:03:32,709 --> 00:03:35,170
is running in public cloud private cloud

71
00:03:35,170 --> 00:03:37,750
where Merrill and business or case or

72
00:03:37,750 --> 00:03:40,450
preferred clients and each a unfold

73
00:03:40,450 --> 00:03:43,470
torrent of course and with other support

74
00:03:43,470 --> 00:03:49,330
and there is three alternatives once you

75
00:03:49,330 --> 00:03:52,300
decide to go darker and more than one

76
00:03:52,300 --> 00:03:56,050
host so you have Apache Messrs you have

77
00:03:56,050 --> 00:03:58,810
dr. storm and you have to burn Ares so

78
00:03:58,810 --> 00:04:00,790
these are the three big cluster

79
00:04:00,790 --> 00:04:07,650
schedulers that exist so what is messes

80
00:04:07,650 --> 00:04:10,630
messes it's what they call a distributed

81
00:04:10,630 --> 00:04:13,270
systems kernel this is a way to say you

82
00:04:13,270 --> 00:04:15,340
can run a lot of things on top of

83
00:04:15,340 --> 00:04:18,700
missiles basically they obstruct misses

84
00:04:18,700 --> 00:04:21,750
abstracts like the operating system

85
00:04:21,750 --> 00:04:24,520
provides you some primitives to deal

86
00:04:24,520 --> 00:04:28,450
with multiple hosts from the application

87
00:04:28,450 --> 00:04:30,970
layer and you can run Hadoop you can run

88
00:04:30,970 --> 00:04:31,330
as

89
00:04:31,330 --> 00:04:37,509
Kafka all these other big frameworks a

90
00:04:37,509 --> 00:04:40,000
lot of big data work going on into

91
00:04:40,000 --> 00:04:43,840
messes and and that's what you can you

92
00:04:43,840 --> 00:04:46,659
can do there so it started before 2011

93
00:04:46,659 --> 00:04:51,879
sees their first of them and it can run

94
00:04:51,879 --> 00:04:53,830
any sort of fashion around the docker

95
00:04:53,830 --> 00:04:56,740
containers but also just pure binaries

96
00:04:56,740 --> 00:05:02,319
and rocket containers up see images now

97
00:05:02,319 --> 00:05:06,460
so the the container I mean this is the

98
00:05:06,460 --> 00:05:11,860
container format from the scroll the

99
00:05:11,860 --> 00:05:17,409
container foundation and then what you

100
00:05:17,409 --> 00:05:19,539
run so you have messes and messes just

101
00:05:19,539 --> 00:05:22,090
basically abstracts all this

102
00:05:22,090 --> 00:05:24,849
infrastructure for you and then you run

103
00:05:24,849 --> 00:05:27,009
frameworks on top of missiles there are

104
00:05:27,009 --> 00:05:31,229
the ones that actually do something so

105
00:05:31,229 --> 00:05:33,699
some of the things we saw Hadoop they

106
00:05:33,699 --> 00:05:35,620
have their frameworks and then you have

107
00:05:35,620 --> 00:05:38,560
Marathon mesosphere marathon for long

108
00:05:38,560 --> 00:05:41,469
running tasks running services so if you

109
00:05:41,469 --> 00:05:43,150
want a service that is always running

110
00:05:43,150 --> 00:05:45,870
and if for whatever reason it dies

111
00:05:45,870 --> 00:05:48,849
marathon will be started for you or if a

112
00:05:48,849 --> 00:05:51,099
host dies marathon will notice and we'll

113
00:05:51,099 --> 00:05:53,919
run it in another host and then you have

114
00:05:53,919 --> 00:05:56,589
Apache Aurora that is doing something

115
00:05:56,589 --> 00:06:03,400
similar and Aurora it's being so both of

116
00:06:03,400 --> 00:06:07,900
them are being used and missiles are

117
00:06:07,900 --> 00:06:09,129
using Twitter

118
00:06:09,129 --> 00:06:12,639
Airbnb eBay Apple you name it there's a

119
00:06:12,639 --> 00:06:14,620
lot of big companies behind this and

120
00:06:14,620 --> 00:06:16,719
also the traction we have over there all

121
00:06:16,719 --> 00:06:19,389
these years there's another frame where

122
00:06:19,389 --> 00:06:20,860
the risk runners that is like a

123
00:06:20,860 --> 00:06:24,219
distributed chrome like system and I'll

124
00:06:24,219 --> 00:06:26,169
talk later about the Jenkins framework

125
00:06:26,169 --> 00:06:32,560
that ransom message for dr. swarm this

126
00:06:32,560 --> 00:06:35,349
is something built by dr. Inc the

127
00:06:35,349 --> 00:06:38,469
company behind docker and the first

128
00:06:38,469 --> 00:06:40,360
version of the curse worm is the same

129
00:06:40,360 --> 00:06:44,190
dr. API so it would allow you to

130
00:06:44,190 --> 00:06:47,169
basically point your doctor client to a

131
00:06:47,169 --> 00:06:50,889
storm API and then that storm API would

132
00:06:50,889 --> 00:06:56,320
run whatever you asked us to run across

133
00:06:56,320 --> 00:06:58,449
the cluster so you wouldn't need to

134
00:06:58,449 --> 00:07:00,190
modify the system to Lin you have

135
00:07:00,190 --> 00:07:02,860
everything but wrong it would be the

136
00:07:02,860 --> 00:07:05,590
same command line the same options in

137
00:07:05,590 --> 00:07:09,039
the same docket light but I guess they

138
00:07:09,039 --> 00:07:12,000
realized that had some limitations in

139
00:07:12,000 --> 00:07:16,180
docker 112 they came up with this new

140
00:07:16,180 --> 00:07:19,840
docker swarm short mode in docker and

141
00:07:19,840 --> 00:07:22,090
it's included by default in in the

142
00:07:22,090 --> 00:07:24,970
docker demon so you don't need to

143
00:07:24,970 --> 00:07:27,789
install anything else and they I guess

144
00:07:27,789 --> 00:07:32,620
we play with this ability for them to do

145
00:07:32,620 --> 00:07:34,960
you know include these features in the

146
00:07:34,960 --> 00:07:37,690
dark demon and then everybody who's

147
00:07:37,690 --> 00:07:39,460
gonna get them for free as that they

148
00:07:39,460 --> 00:07:42,940
have like a first step on the door for

149
00:07:42,940 --> 00:07:49,030
for you to to use it and this with this

150
00:07:49,030 --> 00:07:51,280
new doctors were mode they change the

151
00:07:51,280 --> 00:07:54,660
API or they create a new API better

152
00:07:54,660 --> 00:07:57,970
where do you have a new object that is

153
00:07:57,970 --> 00:08:01,240
called the service and this object is

154
00:08:01,240 --> 00:08:03,729
what basically defines how something

155
00:08:03,729 --> 00:08:05,650
some conductor container runs across

156
00:08:05,650 --> 00:08:09,120
multiple hosts and everything same

157
00:08:09,120 --> 00:08:12,220
reasoning as a Messer's if it dies or

158
00:08:12,220 --> 00:08:16,270
hostile host dies then the the cluster

159
00:08:16,270 --> 00:08:19,840
will notice and will restart it if you

160
00:08:19,840 --> 00:08:22,120
configure it to serve and in another

161
00:08:22,120 --> 00:08:25,659
host with the big difference from the

162
00:08:25,659 --> 00:08:28,810
previous swarm that existing tool it

163
00:08:28,810 --> 00:08:31,030
needs to be changed because this using

164
00:08:31,030 --> 00:08:35,110
this is creating a new API a new new

165
00:08:35,110 --> 00:08:38,339
model a new model to deal with with the

166
00:08:38,339 --> 00:08:43,779
containers in the cluster the last of

167
00:08:43,779 --> 00:08:48,910
the three is kubernetes so it's

168
00:08:48,910 --> 00:08:51,220
something that came from Google based on

169
00:08:51,220 --> 00:08:53,079
what they were running on during on

170
00:08:53,079 --> 00:08:57,400
their Google systems and it can run

171
00:08:57,400 --> 00:09:01,960
local machine versatile cloud of course

172
00:09:01,960 --> 00:09:05,020
Google is making its the best place to

173
00:09:05,020 --> 00:09:08,500
run it is in Google Cloud and they offer

174
00:09:08,500 --> 00:09:10,870
a service called Google container engine

175
00:09:10,870 --> 00:09:14,800
DKA Dickey II where you basically go and

176
00:09:14,800 --> 00:09:16,810
say I wanna start a new kubernetes

177
00:09:16,810 --> 00:09:20,470
cluster and it will create for you but

178
00:09:20,470 --> 00:09:22,210
then you can install it anywhere under

179
00:09:22,210 --> 00:09:25,930
some there's a nice provider

180
00:09:25,930 --> 00:09:30,190
well like page stack point where you can

181
00:09:30,190 --> 00:09:32,020
create clusters in different cloud

182
00:09:32,020 --> 00:09:34,810
providers and then you have commercial

183
00:09:34,810 --> 00:09:37,150
software and some type of so like chorus

184
00:09:37,150 --> 00:09:39,510
tectonic and you can run in the Nasser

185
00:09:39,510 --> 00:09:43,900
in you can run it in your local machine

186
00:09:43,900 --> 00:09:46,810
and for the local machine

187
00:09:46,810 --> 00:09:49,960
actually it's mini cube it's it's a VM

188
00:09:49,960 --> 00:09:51,850
the husky burner is installed just with

189
00:09:51,850 --> 00:09:54,400
one no but it's great for testing and

190
00:09:54,400 --> 00:10:01,550
playing with it and with the api's so

191
00:10:01,550 --> 00:10:03,450
[Music]

192
00:10:03,450 --> 00:10:07,750
when we were building this scaling

193
00:10:07,750 --> 00:10:13,540
Jenkins gold that we have there's I mean

194
00:10:13,540 --> 00:10:16,350
who's using Jenkins here in the room

195
00:10:16,350 --> 00:10:18,880
okay that's I should ask who is not

196
00:10:18,880 --> 00:10:23,709
using it and who is using missus anybody

197
00:10:23,709 --> 00:10:29,050
using missus not one two persons dr.

198
00:10:29,050 --> 00:10:35,440
storm like two more and kubernetes like

199
00:10:35,440 --> 00:10:39,029
four or five okay

200
00:10:39,240 --> 00:10:43,499
all right so well if you are using

201
00:10:43,499 --> 00:10:44,160
Jenkins

202
00:10:44,160 --> 00:10:46,980
you know there's housing keys works

203
00:10:46,980 --> 00:10:51,509
there's two options we saw two a to

204
00:10:51,509 --> 00:10:54,569
scale it so you can have either more

205
00:10:54,569 --> 00:10:56,879
builds permit more build agents or

206
00:10:56,879 --> 00:11:02,490
slaves per master or more masters and if

207
00:11:02,490 --> 00:11:06,240
you have more build agents there's

208
00:11:06,240 --> 00:11:08,610
plenty of plugins that you can use to

209
00:11:08,610 --> 00:11:12,240
create new agents there's like the old

210
00:11:12,240 --> 00:11:14,790
Amazon ec2 ones to create virtual

211
00:11:14,790 --> 00:11:18,480
machines or a sewer machines or anything

212
00:11:18,480 --> 00:11:23,249
any cloud provider and dynamically like

213
00:11:23,249 --> 00:11:24,899
when you have all our jobs they get

214
00:11:24,899 --> 00:11:27,059
created automatically and I will talk

215
00:11:27,059 --> 00:11:29,069
about the ones that work with docker

216
00:11:29,069 --> 00:11:33,059
containers and the problems is that the

217
00:11:33,059 --> 00:11:34,470
master is still a single point of

218
00:11:34,470 --> 00:11:39,029
failure and if your master dies then you

219
00:11:39,029 --> 00:11:43,740
have a problem which is not I guess now

220
00:11:43,740 --> 00:11:46,259
nowadays you have resumable pipelines if

221
00:11:46,259 --> 00:11:47,519
you were in this room before

222
00:11:47,519 --> 00:11:49,139
there were some talks about pipelines

223
00:11:49,139 --> 00:11:51,809
and how there's there's ways where

224
00:11:51,809 --> 00:11:54,179
pipelines can reconnect to a master

225
00:11:54,179 --> 00:11:56,249
after the master gets restarted and the

226
00:11:56,249 --> 00:11:58,499
job continues running so if you restart

227
00:11:58,499 --> 00:12:01,439
the master your jobs continue running

228
00:12:01,439 --> 00:12:06,509
and they don't get killed and you you

229
00:12:06,509 --> 00:12:08,850
have a problem configuring multi having

230
00:12:08,850 --> 00:12:10,589
multiple configurations or plug-in

231
00:12:10,589 --> 00:12:13,139
versions of a restart of the master

232
00:12:13,139 --> 00:12:17,519
right basically you get downtime and

233
00:12:17,519 --> 00:12:20,189
there's also a limit although that limit

234
00:12:20,189 --> 00:12:22,079
could be pretty high there's a limit on

235
00:12:22,079 --> 00:12:23,879
how many buildings you can attach to one

236
00:12:23,879 --> 00:12:28,379
Jenkins master and then the other option

237
00:12:28,379 --> 00:12:33,660
is having more masters which are with

238
00:12:33,660 --> 00:12:35,040
with the benefit that you can have

239
00:12:35,040 --> 00:12:36,959
multiple organizations or multiple

240
00:12:36,959 --> 00:12:39,720
departments having their own master so

241
00:12:39,720 --> 00:12:41,579
it's basically more like a federation

242
00:12:41,579 --> 00:12:46,799
well it's not like shutting off of your

243
00:12:46,799 --> 00:12:49,110
bills you can have multiple masters with

244
00:12:49,110 --> 00:12:52,470
their liens in two different or

245
00:12:52,470 --> 00:12:55,560
musicians the problems you have is

246
00:12:55,560 --> 00:12:58,620
single sign-on I mean how you open

247
00:12:58,620 --> 00:13:02,100
connect to each other connect how did

248
00:13:02,100 --> 00:13:04,230
you login into all of them in the same

249
00:13:04,230 --> 00:13:06,840
way or how do you configure all of them

250
00:13:06,840 --> 00:13:10,290
from a centralized place but we have at

251
00:13:10,290 --> 00:13:13,500
plotviz we have this Jenkins Operations

252
00:13:13,500 --> 00:13:15,930
Center and then the Private sedation

253
00:13:15,930 --> 00:13:18,090
where I work or when I'm when I'm

254
00:13:18,090 --> 00:13:23,700
working now Kenda basically is doing the

255
00:13:23,700 --> 00:13:25,950
best of both worlds it allows you to

256
00:13:25,950 --> 00:13:28,050
have multiple masters running on docker

257
00:13:28,050 --> 00:13:30,720
containers and they all get configured

258
00:13:30,720 --> 00:13:34,080
from a single place with this operation

259
00:13:34,080 --> 00:13:37,860
center and then all these masters are

260
00:13:37,860 --> 00:13:40,230
creating docker containers you can spin

261
00:13:40,230 --> 00:13:43,620
new masters whenever you want and all

262
00:13:43,620 --> 00:13:46,380
these masters get configured to use the

263
00:13:46,380 --> 00:13:48,450
same cloud we are using missus right now

264
00:13:48,450 --> 00:13:51,990
and so all the masters are sharing this

265
00:13:51,990 --> 00:13:55,830
pool of of a plaster with docker hosts

266
00:13:55,830 --> 00:14:02,460
running then another great world is to

267
00:14:02,460 --> 00:14:04,530
make my error is human to propagate

268
00:14:04,530 --> 00:14:06,120
error to observe in an automatic way

269
00:14:06,120 --> 00:14:07,440
that's what's DevOps

270
00:14:07,440 --> 00:14:11,760
right and when you are automating a lot

271
00:14:11,760 --> 00:14:16,260
of things and there's there's chances

272
00:14:16,260 --> 00:14:17,820
that you what you are to meeting is

273
00:14:17,820 --> 00:14:21,900
going to break and I have a I cry I have

274
00:14:21,900 --> 00:14:23,910
a different version of this that

275
00:14:23,910 --> 00:14:26,670
basically conveys the message is if you

276
00:14:26,670 --> 00:14:28,020
haven't automatically destroyed

277
00:14:28,020 --> 00:14:29,550
something by mistake

278
00:14:29,550 --> 00:14:33,150
you're not automating enough and this

279
00:14:33,150 --> 00:14:36,450
happened to me several times with Alyssa

280
00:14:36,450 --> 00:14:41,250
couple nothing really bad like this guys

281
00:14:41,250 --> 00:14:48,390
from from the this week but but yeah if

282
00:14:48,390 --> 00:14:50,100
if you are not breaking something is

283
00:14:50,100 --> 00:14:51,720
that you're not trying hard enough right

284
00:14:51,720 --> 00:14:55,170
so that's that's my my idea so I always

285
00:14:55,170 --> 00:14:57,390
try to automate things sometimes you

286
00:14:57,390 --> 00:14:59,310
screw it up but as long as it's not too

287
00:14:59,310 --> 00:15:02,110
bad it's okay

288
00:15:02,110 --> 00:15:08,350
so how can you run Jenkins in docker

289
00:15:08,350 --> 00:15:16,050
we have several docker images available

290
00:15:16,050 --> 00:15:20,200
so you have the official docker image

291
00:15:20,200 --> 00:15:24,280
that is will by docker themselves but we

292
00:15:24,280 --> 00:15:26,740
provide like the docker file and all the

293
00:15:26,740 --> 00:15:29,230
new releases and this has the latest

294
00:15:29,230 --> 00:15:32,980
LTS well all the LTS versions if you go

295
00:15:32,980 --> 00:15:35,290
to just ganking stocker pool Jenkins or

296
00:15:35,290 --> 00:15:37,630
dr. Ron Jenkins this is what you get the

297
00:15:37,630 --> 00:15:43,750
latest LTS and then you also have the

298
00:15:43,750 --> 00:15:48,330
junkies community has this Jenkins CI

299
00:15:48,330 --> 00:15:52,060
group in in the docker hub so Jenkins

300
00:15:52,060 --> 00:15:55,630
CIA slash Jenkins have the weekly builds

301
00:15:55,630 --> 00:16:01,080
and we possibly will have more bill also

302
00:16:01,560 --> 00:16:06,400
more more than the weekly builds this

303
00:16:06,400 --> 00:16:10,720
week because so this is an automated

304
00:16:10,720 --> 00:16:13,690
build that we have and that is

305
00:16:13,690 --> 00:16:15,280
publishing continuously every new

306
00:16:15,280 --> 00:16:19,080
release I've written in weekly build and

307
00:16:19,080 --> 00:16:21,550
this is built by the junkies community

308
00:16:21,550 --> 00:16:24,850
and push to the docker hub so it's the

309
00:16:24,850 --> 00:16:29,230
same thing just this has the weekly bits

310
00:16:29,230 --> 00:16:34,510
the other one is LPS and then if you're

311
00:16:34,510 --> 00:16:38,620
gonna run slaves in docker then the one

312
00:16:38,620 --> 00:16:41,080
you need to be aware of is the Jenkins

313
00:16:41,080 --> 00:16:45,280
CI slash jnlp - slave so this is an

314
00:16:45,280 --> 00:16:48,510
image that has just the remote in bits

315
00:16:48,510 --> 00:16:52,210
so it's based on the Java docker image

316
00:16:52,210 --> 00:16:57,610
and has the dr. Jenkins life and when

317
00:16:57,610 --> 00:17:01,090
you start this basically here it says

318
00:17:01,090 --> 00:17:04,540
dr. Ron Jenkins CID and LP slave and you

319
00:17:04,540 --> 00:17:08,040
pass the URL and the secret and and

320
00:17:08,040 --> 00:17:11,230
things the slave name this will connect

321
00:17:11,230 --> 00:17:13,810
to the master and then that's it you

322
00:17:13,810 --> 00:17:16,020
have a new life running Indian

323
00:17:16,020 --> 00:17:18,069
obviously you probably want me to do

324
00:17:18,069 --> 00:17:19,480
this because there's plugins that will

325
00:17:19,480 --> 00:17:20,380
do this for you

326
00:17:20,380 --> 00:17:23,740
and I'll show you later and the other

327
00:17:23,740 --> 00:17:26,230
interesting part about this image is

328
00:17:26,230 --> 00:17:28,720
that you have two versions one is based

329
00:17:28,720 --> 00:17:31,540
on the official openjdk image which is

330
00:17:31,540 --> 00:17:35,640
Debian but there's also on the Alpine

331
00:17:35,640 --> 00:17:41,049
image that is really small I think it's

332
00:17:41,049 --> 00:17:45,250
like 40 or 50 megabytes it was it's a

333
00:17:45,250 --> 00:17:48,940
lot smaller than than the Debian based

334
00:17:48,940 --> 00:17:56,230
world if you wanted to manually create a

335
00:17:56,230 --> 00:18:00,490
hundred slaves in running in docker you

336
00:18:00,490 --> 00:18:03,669
could just run docker run all these this

337
00:18:03,669 --> 00:18:05,950
time some point into your Jenkins master

338
00:18:05,950 --> 00:18:12,910
and that you will have them so for

339
00:18:12,910 --> 00:18:15,730
cluster scheduling and Jenkins what what

340
00:18:15,730 --> 00:18:18,160
do you want what what do we want and

341
00:18:18,160 --> 00:18:21,309
when do we want it so you want to

342
00:18:21,309 --> 00:18:25,140
isolate it bill agents and jobs you want

343
00:18:25,140 --> 00:18:29,860
one job to not mess with the word space

344
00:18:29,860 --> 00:18:33,640
or something of another job and same

345
00:18:33,640 --> 00:18:35,710
thing for build agents you don't want

346
00:18:35,710 --> 00:18:37,780
that job using a build dating and then

347
00:18:37,780 --> 00:18:40,240
another job having any sort of conflict

348
00:18:40,240 --> 00:18:42,490
with that we wanted to use inductors

349
00:18:42,490 --> 00:18:46,120
that can start in like seconds and you

350
00:18:46,120 --> 00:18:49,990
can also we want also to be able to drop

351
00:18:49,990 --> 00:18:52,480
capabilities like this in the container

352
00:18:52,480 --> 00:18:56,230
world like be able to not run as root

353
00:18:56,230 --> 00:18:58,900
and Russert run as a different user

354
00:18:58,900 --> 00:19:01,960
maybe not have access to network or not

355
00:19:01,960 --> 00:19:07,900
have access to something or another I'm

356
00:19:07,900 --> 00:19:09,669
gonna go through the different features

357
00:19:09,669 --> 00:19:13,690
that the cluster traders have and I'll

358
00:19:13,690 --> 00:19:18,419
tell you which one of them have what

359
00:19:18,419 --> 00:19:23,429
feature number one container groups so

360
00:19:23,429 --> 00:19:27,190
in the Jenkins example imagine you can

361
00:19:27,190 --> 00:19:29,500
have a Jenkins agent

362
00:19:29,500 --> 00:19:33,250
container maven container and then

363
00:19:33,250 --> 00:19:35,260
Firefox container chrome container

364
00:19:35,260 --> 00:19:37,620
Safari container so you will have up

365
00:19:37,620 --> 00:19:40,030
what it's typically called a pot of

366
00:19:40,030 --> 00:19:43,600
containers and you can have five

367
00:19:43,600 --> 00:19:48,520
containers running for one job and if

368
00:19:48,520 --> 00:19:50,919
your cluster scheduler support grouping

369
00:19:50,919 --> 00:19:51,640
containers

370
00:19:51,640 --> 00:19:53,530
otherwise you have to build one

371
00:19:53,530 --> 00:19:56,380
container image the has all the tools

372
00:19:56,380 --> 00:20:02,080
that you need so this is something that

373
00:20:02,080 --> 00:20:06,700
is experimental in missus in 1 1 0 so

374
00:20:06,700 --> 00:20:10,450
you need a pretty recent one doctor firm

375
00:20:10,450 --> 00:20:13,299
supports grouping through docker compose

376
00:20:13,299 --> 00:20:16,510
and you can also first execution of all

377
00:20:16,510 --> 00:20:17,770
those containers in the group in the

378
00:20:17,770 --> 00:20:21,370
same host and kubernetes supports the

379
00:20:21,370 --> 00:20:23,650
concept of polska natively and it

380
00:20:23,650 --> 00:20:25,450
warranties at all of them running the

381
00:20:25,450 --> 00:20:32,710
same host and they can run they can all

382
00:20:32,710 --> 00:20:35,260
refer to the other containers by using

383
00:20:35,260 --> 00:20:39,070
localhost so it it came the idea comes

384
00:20:39,070 --> 00:20:41,740
mainly from kubernetes there was the one

385
00:20:41,740 --> 00:20:46,360
the first one implementing it is the

386
00:20:46,360 --> 00:20:50,740
first yes the first one implemented and

387
00:20:50,740 --> 00:20:53,559
that's the the power of it of being able

388
00:20:53,559 --> 00:20:56,049
to use multiple containers in just for

389
00:20:56,049 --> 00:21:00,549
one job because imagine that yeah you

390
00:21:00,549 --> 00:21:02,650
want to do a maven build and something

391
00:21:02,650 --> 00:21:06,190
else or selenium tests if you have to

392
00:21:06,190 --> 00:21:08,409
create your wrong image then you have

393
00:21:08,409 --> 00:21:11,500
extra work to do with all those tools

394
00:21:11,500 --> 00:21:15,010
this way you just reuse all the images

395
00:21:15,010 --> 00:21:18,549
that you have in available in docker hub

396
00:21:18,549 --> 00:21:20,559
you don't have to write any new docker

397
00:21:20,559 --> 00:21:27,100
image at all memory limits so the

398
00:21:27,100 --> 00:21:29,770
scheduler needs to provide a way for you

399
00:21:29,770 --> 00:21:32,350
to limit how much memory the jobs can

400
00:21:32,350 --> 00:21:37,600
use and and prevent from from this

401
00:21:37,600 --> 00:21:39,250
containers to go over the memory limits

402
00:21:39,250 --> 00:21:41,110
so imagine do you have all these

403
00:21:41,110 --> 00:21:42,850
resources in the cluster and you

404
00:21:42,850 --> 00:21:46,389
different jobs trying to fetch get these

405
00:21:46,389 --> 00:21:47,590
resources

406
00:21:47,590 --> 00:21:50,889
you don't wanna maybe you have a bill

407
00:21:50,889 --> 00:21:52,480
that is going wrong and is using more

408
00:21:52,480 --> 00:21:55,690
memory more CPU more something you don't

409
00:21:55,690 --> 00:21:59,429
want that to happen so all of them

410
00:21:59,429 --> 00:22:03,460
support memory limits in missus is

411
00:22:03,460 --> 00:22:05,880
actually required in swarm is optional

412
00:22:05,880 --> 00:22:09,399
and in kubernetes but they have some

413
00:22:09,399 --> 00:22:12,789
defaults the ones are optional when in

414
00:22:12,789 --> 00:22:15,580
kubernetes you can even do namespaces

415
00:22:15,580 --> 00:22:21,669
and so you can isolate containers into

416
00:22:21,669 --> 00:22:26,799
namespaces and having guru limits set up

417
00:22:26,799 --> 00:22:29,980
namespace level so you could say not by

418
00:22:29,980 --> 00:22:33,340
container or by yeah you know not just

419
00:22:33,340 --> 00:22:36,220
my container but saying whatever number

420
00:22:36,220 --> 00:22:39,490
of containers do run just make sure they

421
00:22:39,490 --> 00:22:43,269
don't go over this limit and this memory

422
00:22:43,269 --> 00:22:46,360
constraints translates to doctor - -

423
00:22:46,360 --> 00:22:51,639
memory parameter so I have some

424
00:22:51,639 --> 00:22:54,429
questions here for you now um I'm sorry

425
00:22:54,429 --> 00:22:56,139
sis I know it's late and you're all

426
00:22:56,139 --> 00:22:58,360
tired but I'm gonna make you work a

427
00:22:58,360 --> 00:23:00,039
little bit how do you think it happens

428
00:23:00,039 --> 00:23:02,169
when a container goes from over a memory

429
00:23:02,169 --> 00:23:07,809
Korra like you have a build that runs to

430
00:23:07,809 --> 00:23:11,019
JVM as a sample I have and you set

431
00:23:11,019 --> 00:23:14,610
memory limit in there for the container

432
00:23:14,610 --> 00:23:18,009
like what would what will happen any

433
00:23:18,009 --> 00:23:19,440
takers

434
00:23:19,440 --> 00:23:28,919
sorry sec fault okay any other options

435
00:23:31,640 --> 00:23:36,090
memories out of memory inception in Java

436
00:23:36,090 --> 00:23:43,159
okay anybody else sorry

437
00:23:43,159 --> 00:23:53,820
memory skew okay let me show you so I

438
00:23:53,820 --> 00:24:03,029
have this this is just maven application

439
00:24:03,029 --> 00:24:07,590
even built and in the tests I'm just

440
00:24:07,590 --> 00:24:10,350
using memory and you know well whatever

441
00:24:10,350 --> 00:24:12,659
the normal Java thing the garbage

442
00:24:12,659 --> 00:24:14,909
collection happens and it's using this

443
00:24:14,909 --> 00:24:16,230
memory without limits okay

444
00:24:16,230 --> 00:24:19,740
the container has no limits this keeps

445
00:24:19,740 --> 00:24:22,320
using memory and the JVM is doing this

446
00:24:22,320 --> 00:24:24,210
garbage collection thing and this would

447
00:24:24,210 --> 00:24:29,029
run forever so I want to kill it

448
00:24:32,660 --> 00:24:37,630
in this one I'm gonna set it to memory -

449
00:24:37,630 --> 00:24:42,680
em - 20 mix so basically I'm limiting

450
00:24:42,680 --> 00:24:46,040
how much memory the container has to -

451
00:24:46,040 --> 00:24:50,630
220 mix this is a random number this

452
00:24:50,630 --> 00:24:53,170
depends of the world you run this this

453
00:24:53,170 --> 00:24:58,370
but what you see is let me show you put

454
00:24:58,370 --> 00:25:00,980
it here at the top this is doing the

455
00:25:00,980 --> 00:25:02,600
same thing until it reaches a point

456
00:25:02,600 --> 00:25:06,590
where basically something happens and

457
00:25:06,590 --> 00:25:08,500
nothing happens because you let nothing

458
00:25:08,500 --> 00:25:14,480
this just stop running so what happened

459
00:25:14,480 --> 00:25:18,080
and the only way you can know what

460
00:25:18,080 --> 00:25:23,919
happened here is by looking at the

461
00:25:24,610 --> 00:25:33,590
inspecting the container SPECT when you

462
00:25:33,590 --> 00:25:35,810
do a doctor inspect there's an

463
00:25:35,810 --> 00:25:38,180
interesting line here that possibly

464
00:25:38,180 --> 00:25:40,460
calls your attention if you know where

465
00:25:40,460 --> 00:25:41,900
you're looking otherwise then you have

466
00:25:41,900 --> 00:25:45,440
elongation to breathe that basically

467
00:25:45,440 --> 00:25:48,710
tells you oh I am killed through this is

468
00:25:48,710 --> 00:25:50,810
telling you the kernel killed your

469
00:25:50,810 --> 00:25:53,240
container because it ran over the memory

470
00:25:53,240 --> 00:25:55,880
that was said for that container to run

471
00:25:55,880 --> 00:26:01,570
so whoever said that last one he wins

472
00:26:01,570 --> 00:26:07,400
now yeah people especially people coming

473
00:26:07,400 --> 00:26:08,660
from the Java world with the specter I

474
00:26:08,660 --> 00:26:11,300
got out of memory exception and things

475
00:26:11,300 --> 00:26:14,330
like that now the problem with Java is

476
00:26:14,330 --> 00:26:16,340
when you run java in a container

477
00:26:16,340 --> 00:26:19,280
environment Java is not aware of the

478
00:26:19,280 --> 00:26:23,270
limits of the container until the other

479
00:26:23,270 --> 00:26:26,240
one 9 some patch that was merged like

480
00:26:26,240 --> 00:26:30,980
last week that supposedly makes it be a

481
00:26:30,980 --> 00:26:35,720
container cgroups aware so until Gavin

482
00:26:35,720 --> 00:26:38,870
and you start using Java 9 properly in a

483
00:26:38,870 --> 00:26:42,110
month for now or years this is what's

484
00:26:42,110 --> 00:26:46,220
gonna happen so your container

485
00:26:46,220 --> 00:26:49,159
you're running Java in a container Java

486
00:26:49,159 --> 00:26:52,340
sees the hosts memory and because I'm

487
00:26:52,340 --> 00:26:54,590
running in this docker remark thing I

488
00:26:54,590 --> 00:26:58,190
think the host memories two gigs of the

489
00:26:58,190 --> 00:26:59,770
virtual machine where dr. runs and

490
00:26:59,770 --> 00:27:02,720
typically in like 97 percent of the

491
00:27:02,720 --> 00:27:05,899
cases depends on certain rules the JVM

492
00:27:05,899 --> 00:27:09,049
is going to take 1/4 of the total host

493
00:27:09,049 --> 00:27:14,299
memory as maximum heap size and this is

494
00:27:14,299 --> 00:27:18,320
what you see here the limit this is the

495
00:27:18,320 --> 00:27:22,070
max memory for for-4 and this is the

496
00:27:22,070 --> 00:27:24,020
same number that was at the beginning

497
00:27:24,020 --> 00:27:27,169
when I was not setting any limits so for

498
00:27:27,169 --> 00:27:29,809
the Java is the of it not aware the JVM

499
00:27:29,809 --> 00:27:37,220
of of the limit so that will happen so

500
00:27:37,220 --> 00:27:39,620
how can we fix this because especially

501
00:27:39,620 --> 00:27:41,779
think that this is running maybe you are

502
00:27:41,779 --> 00:27:43,730
running this in a cluster so you have

503
00:27:43,730 --> 00:27:45,919
multiple hosts now you're running maybe

504
00:27:45,919 --> 00:27:49,419
Jenkins jobs in containers and they just

505
00:27:49,419 --> 00:27:51,890
disappear get killed and you don't know

506
00:27:51,890 --> 00:27:53,710
what happened

507
00:27:53,710 --> 00:27:59,360
so there's another another what

508
00:27:59,360 --> 00:28:05,179
something we can do is something that is

509
00:28:05,179 --> 00:28:07,580
very specific of whatever you are

510
00:28:07,580 --> 00:28:12,350
running so for maven you can spaz JVM

511
00:28:12,350 --> 00:28:16,309
options as maven opted for ant it's I

512
00:28:16,309 --> 00:28:19,159
think it's ant ups or ant options and

513
00:28:19,159 --> 00:28:21,529
you have to know what you're doing and

514
00:28:21,529 --> 00:28:25,730
say ok just you pass this parameter to

515
00:28:25,730 --> 00:28:28,220
the JVM and I'm saying ok xmx is two

516
00:28:28,220 --> 00:28:32,470
hundred and ten megabytes because I know

517
00:28:32,470 --> 00:28:35,899
I'm giving it to the total containers

518
00:28:35,899 --> 00:28:40,190
220 megabytes so let's make sure Java is

519
00:28:40,190 --> 00:28:42,440
aware of how much memory is available

520
00:28:42,440 --> 00:28:48,890
and what happens here it's a little bit

521
00:28:48,890 --> 00:28:51,679
different in the sense that the max

522
00:28:51,679 --> 00:28:55,730
memory that Java sees is 187 ok so it's

523
00:28:55,730 --> 00:28:58,580
keeping it under the limits and this is

524
00:28:58,580 --> 00:28:59,539
gonna do more

525
00:28:59,539 --> 00:29:03,320
collection but is never gonna run out of

526
00:29:03,320 --> 00:29:06,320
memory I mean it's not never gonna get

527
00:29:06,320 --> 00:29:09,559
the container crash killed by the

528
00:29:09,559 --> 00:29:15,309
colonel now

529
00:29:18,010 --> 00:29:22,500
I was I was cheating a bit here because

530
00:29:22,500 --> 00:29:26,320
by default what happens when you run

531
00:29:26,320 --> 00:29:29,200
maven and you run tests on Miriam the

532
00:29:29,200 --> 00:29:32,830
default is moving Wilfork a new JVM to

533
00:29:32,830 --> 00:29:35,230
run the tests and I was cheating because

534
00:29:35,230 --> 00:29:37,720
I said it to do not for there's an

535
00:29:37,720 --> 00:29:39,580
option in maven in the pom file where

536
00:29:39,580 --> 00:29:41,820
you can say whether the fork or not for

537
00:29:41,820 --> 00:29:45,669
so in the surefire plugin exactly so I

538
00:29:45,669 --> 00:29:47,799
told my even not to fart so all these

539
00:29:47,799 --> 00:29:51,820
was running in one JVM now if I'd run it

540
00:29:51,820 --> 00:29:55,029
in the default mode even with the same

541
00:29:55,029 --> 00:29:58,539
parameters 220 megawatts memory limit X

542
00:29:58,539 --> 00:30:05,799
MX 210 something's gonna happen guess

543
00:30:05,799 --> 00:30:07,950
what

544
00:30:07,950 --> 00:30:11,260
so this is for this is called maven I'm

545
00:30:11,260 --> 00:30:14,139
making its create a new JVM for surefire

546
00:30:14,139 --> 00:30:19,210
and that the VM is running the tests so

547
00:30:19,210 --> 00:30:21,730
what's happening this is gonna you can

548
00:30:21,730 --> 00:30:24,549
take a little bit longer maybe the new

549
00:30:24,549 --> 00:30:29,110
JVM is seeing 444 so the new JVM is not

550
00:30:29,110 --> 00:30:32,019
a word of xmx that I pass to make and

551
00:30:32,019 --> 00:30:33,760
what I'm getting is failed to execute

552
00:30:33,760 --> 00:30:37,240
goal the fork VM terminated with same

553
00:30:37,240 --> 00:30:39,070
without saying properly goodbye VM

554
00:30:39,070 --> 00:30:41,350
crushed or 60 Mexican colt

555
00:30:41,350 --> 00:30:45,700
so the new JVM is not aware of the X MX

556
00:30:45,700 --> 00:30:48,010
memory limits because I said in a

557
00:30:48,010 --> 00:30:50,139
environment variable they said this is

558
00:30:50,139 --> 00:30:55,059
for maven now how can we fix this well

559
00:30:55,059 --> 00:30:57,490
you have an option which is in maven in

560
00:30:57,490 --> 00:30:59,049
the pound file again you can configure

561
00:30:59,049 --> 00:31:01,389
the server file plug-in to pass

562
00:31:01,389 --> 00:31:04,210
variables are environment variables to

563
00:31:04,210 --> 00:31:06,789
the new VM so you could go in there and

564
00:31:06,789 --> 00:31:12,070
set XM x equals whatever but you could

565
00:31:12,070 --> 00:31:14,260
keep doing this over and over and over

566
00:31:14,260 --> 00:31:16,630
again there's there's a slightly better

567
00:31:16,630 --> 00:31:23,880
option which is a somewhat obscure

568
00:31:23,880 --> 00:31:28,450
environment variable that is underscore

569
00:31:28,450 --> 00:31:30,879
Java underscore options and this will

570
00:31:30,879 --> 00:31:31,600
whirring up in

571
00:31:31,600 --> 00:31:37,030
and some DBMS at least and what this

572
00:31:37,030 --> 00:31:40,060
means is any new JVM that gets you

573
00:31:40,060 --> 00:31:46,030
started will use these parameters so

574
00:31:46,030 --> 00:31:48,700
whenever I installed you and maven is

575
00:31:48,700 --> 00:31:51,550
gonna use X MX to thing when making a

576
00:31:51,550 --> 00:31:55,240
start surfer is gonna use X MX to ten so

577
00:31:55,240 --> 00:31:57,370
now this is going to solve you a lot of

578
00:31:57,370 --> 00:32:00,790
problems I'm gonna just kill it this

579
00:32:00,790 --> 00:32:04,810
would continue working and this would

580
00:32:04,810 --> 00:32:08,140
solve you the problems unless you are

581
00:32:08,140 --> 00:32:10,840
running several JVMs and all of them are

582
00:32:10,840 --> 00:32:13,480
using the total X MX then you have to

583
00:32:13,480 --> 00:32:15,640
play with how much you give to each of

584
00:32:15,640 --> 00:32:18,880
it but if you're running one - I mean

585
00:32:18,880 --> 00:32:22,750
this will be honored by all of them you

586
00:32:22,750 --> 00:32:25,630
gotta be aware of what's happening when

587
00:32:25,630 --> 00:32:33,240
when you run out of memory okay

588
00:32:33,280 --> 00:32:45,560
oops what did I do alright so that's I

589
00:32:45,560 --> 00:32:50,990
did another key combination okay I

590
00:32:50,990 --> 00:32:52,130
talked about that

591
00:32:52,130 --> 00:32:55,670
then there's the CPU limits it is

592
00:32:55,670 --> 00:32:57,500
something like the like the memory

593
00:32:57,500 --> 00:33:01,820
limits and you can pass how many 4 meses

594
00:33:01,820 --> 00:33:03,710
wahrman kubernetes and these gets

595
00:33:03,710 --> 00:33:06,950
related into CPU shares and what do you

596
00:33:06,950 --> 00:33:08,540
think it happens when a container goes

597
00:33:08,540 --> 00:33:11,660
over its CPU shares but over the CPU

598
00:33:11,660 --> 00:33:18,190
limits that you said well nothing really

599
00:33:18,190 --> 00:33:21,560
what CPU shares what the memory limits

600
00:33:21,560 --> 00:33:23,810
mean in masters missus is memory limits

601
00:33:23,810 --> 00:33:26,510
in Dockery's CPU shares that makes it a

602
00:33:26,510 --> 00:33:30,050
little bit more clear is how much

603
00:33:30,050 --> 00:33:35,600
percentage of a CPU you can get so if if

604
00:33:35,600 --> 00:33:38,470
you say this is basically a weight and

605
00:33:38,470 --> 00:33:40,850
depending on how many containers are you

606
00:33:40,850 --> 00:33:43,790
running has how much CPU is gonna get

607
00:33:43,790 --> 00:33:46,910
see if you say CPU shares is 1 4 and you

608
00:33:46,910 --> 00:33:49,340
run one container it's gonna a hundred

609
00:33:49,340 --> 00:33:53,390
percent of the CPU if you say if you run

610
00:33:53,390 --> 00:33:56,210
two containers and both have CPU 1 they

611
00:33:56,210 --> 00:33:59,180
each get 50 percent of the CPU if you

612
00:33:59,180 --> 00:34:01,280
run them they only get 10 percent of the

613
00:34:01,280 --> 00:34:04,100
CPU each so it's just a weight across

614
00:34:04,100 --> 00:34:06,530
all the containers that you run it's all

615
00:34:06,530 --> 00:34:09,009
relative

616
00:34:10,600 --> 00:34:14,600
the other important thing to handle on a

617
00:34:14,600 --> 00:34:18,949
cluster is storage and how you can do

618
00:34:18,949 --> 00:34:23,000
distribute the storage so missus has in

619
00:34:23,000 --> 00:34:27,280
versions 1.0 plus dr. volume support

620
00:34:27,280 --> 00:34:31,820
swarm also has the dr. Wollan plugins so

621
00:34:31,820 --> 00:34:33,770
you can use whatever plugins you use for

622
00:34:33,770 --> 00:34:36,469
the normal docker and kubernetes from

623
00:34:36,469 --> 00:34:37,969
the very beginning you have the concept

624
00:34:37,969 --> 00:34:40,790
of persistent volumes and all of them

625
00:34:40,790 --> 00:34:43,760
pretty much I do the typical thing like

626
00:34:43,760 --> 00:34:45,770
EBS volumes in AWS

627
00:34:45,770 --> 00:34:49,280
Phares blasted I think it's supported in

628
00:34:49,280 --> 00:34:53,770
all it's just a matter how you use it

629
00:34:53,770 --> 00:34:59,750
and also some considerations you should

630
00:34:59,750 --> 00:35:02,510
not come that these schedulers allow you

631
00:35:02,510 --> 00:35:05,660
to do is run as a different user not

632
00:35:05,660 --> 00:35:07,640
this route but you have to be aware that

633
00:35:07,640 --> 00:35:09,800
the container user ID is not the host

634
00:35:09,800 --> 00:35:11,780
user I did we get a lot of questions in

635
00:35:11,780 --> 00:35:16,820
the in the docker image about the

636
00:35:16,820 --> 00:35:19,760
Jenkins because it's using its the

637
00:35:19,760 --> 00:35:21,230
Dinky's master is running as a Jenkins

638
00:35:21,230 --> 00:35:25,700
user which is always one thousand inside

639
00:35:25,700 --> 00:35:31,100
the container so if you run it in a host

640
00:35:31,100 --> 00:35:32,630
in an Ubuntu house these are one

641
00:35:32,630 --> 00:35:34,490
thousand you want to say if you are

642
00:35:34,490 --> 00:35:37,220
mounting host volumes into the container

643
00:35:37,220 --> 00:35:39,560
which is typically a bad idea because

644
00:35:39,560 --> 00:35:40,910
you have to deal with all these things

645
00:35:40,910 --> 00:35:45,740
and it's not very good it's not great to

646
00:35:45,740 --> 00:35:48,830
schedule it across a cluster but you

647
00:35:48,830 --> 00:35:51,950
gotta be aware or if you're using NFS

648
00:35:51,950 --> 00:35:57,140
then all these the names and the users

649
00:35:57,140 --> 00:35:58,970
not the names but the you IDS of the

650
00:35:58,970 --> 00:36:02,030
users have to match this how the

651
00:36:02,030 --> 00:36:05,660
container is trying to access the data

652
00:36:05,660 --> 00:36:09,110
and how the data is what are the

653
00:36:09,110 --> 00:36:14,050
permissions of the data itself yeah so

654
00:36:14,050 --> 00:36:20,930
NFS users for networking you need to

655
00:36:20,930 --> 00:36:23,540
open for the Jenkins case you need to

656
00:36:23,540 --> 00:36:26,330
open the HTTP port the general pit for

657
00:36:26,330 --> 00:36:30,800
connecting agents and also Jenkins has a

658
00:36:30,800 --> 00:36:34,040
sort of SSH server building that you

659
00:36:34,040 --> 00:36:37,550
could happen if you wanted to I'm gonna

660
00:36:37,550 --> 00:36:42,620
wanna enter into details and their

661
00:36:42,620 --> 00:36:44,660
support tool that allows you to get one

662
00:36:44,660 --> 00:36:49,820
IP per container in clusters MSS is more

663
00:36:49,820 --> 00:36:53,930
recent there's this you can run on with

664
00:36:53,930 --> 00:36:57,440
calico with weave and same thing Ranieri

665
00:36:57,440 --> 00:36:58,670
some swarm

666
00:36:58,670 --> 00:37:01,059
Shawn by default uses the doctor overlay

667
00:37:01,059 --> 00:37:04,519
but all these options it's just a matter

668
00:37:04,519 --> 00:37:06,319
of I mean in kubernetes is pretty

669
00:37:06,319 --> 00:37:09,019
straightforward if you run it in Google

670
00:37:09,019 --> 00:37:10,400
container engine because it gives you

671
00:37:10,400 --> 00:37:15,109
everything if you run me sauce or swarm

672
00:37:15,109 --> 00:37:17,480
then maybe you have to do a lot more

673
00:37:17,480 --> 00:37:21,440
setup and configuration to make it work

674
00:37:21,440 --> 00:37:30,339
in a virtual networking and just lastly

675
00:37:30,339 --> 00:37:32,599
Anna talked about the docker plugins

676
00:37:32,599 --> 00:37:35,630
that are available to take advantage of

677
00:37:35,630 --> 00:37:39,769
running in containers so there is

678
00:37:39,769 --> 00:37:43,400
several docker plugins there's one

679
00:37:43,400 --> 00:37:46,630
[Music]

680
00:37:46,630 --> 00:37:50,119
there's one there's I think as leaders -

681
00:37:50,119 --> 00:37:56,420
for dynamic agents running on docker so

682
00:37:56,420 --> 00:37:59,329
basically whenever you have a job they

683
00:37:59,329 --> 00:38:01,519
they will sping a new docker container

684
00:38:01,519 --> 00:38:03,410
and run the job in in the docker

685
00:38:03,410 --> 00:38:06,769
container and there's no support yet for

686
00:38:06,769 --> 00:38:09,619
the docker swarm mode because it uses a

687
00:38:09,619 --> 00:38:14,029
new API this is not yet supported the

688
00:38:14,029 --> 00:38:17,029
agent image needs to include Java and we

689
00:38:17,029 --> 00:38:19,309
will do love the jar the slaves are from

690
00:38:19,309 --> 00:38:20,809
the master so it needs to have

691
00:38:20,809 --> 00:38:23,589
connection to the master to the loaded

692
00:38:23,589 --> 00:38:26,420
and then you have multiple plugins for

693
00:38:26,420 --> 00:38:28,930
different tasks this is how it is today

694
00:38:28,930 --> 00:38:31,069
there's the docker build and publish

695
00:38:31,069 --> 00:38:34,640
plug-in to build docker images and then

696
00:38:34,640 --> 00:38:37,160
there's the havein registry notification

697
00:38:37,160 --> 00:38:41,269
to get like initiate jobs based on Wang

698
00:38:41,269 --> 00:38:43,519
and upstream image is updated and things

699
00:38:43,519 --> 00:38:45,829
like that and it has a great pipeline

700
00:38:45,829 --> 00:38:51,710
support I'm not gonna go through the

701
00:38:51,710 --> 00:38:53,960
configuration but I'll show you like a

702
00:38:53,960 --> 00:38:58,759
docker pipeline you can run docker with

703
00:38:58,759 --> 00:39:01,130
registry if you want to use your private

704
00:39:01,130 --> 00:39:05,269
doctor registry you can do doctor dot

705
00:39:05,269 --> 00:39:07,880
image and the name of the image to use

706
00:39:07,880 --> 00:39:10,759
it and then dot pull to download it from

707
00:39:10,759 --> 00:39:11,789
docker

708
00:39:11,789 --> 00:39:14,729
ha and then you can build docker images

709
00:39:14,729 --> 00:39:17,999
with dr. dot build and the interesting

710
00:39:17,999 --> 00:39:21,419
bits probably is this image dot inside

711
00:39:21,419 --> 00:39:24,630
and then whatever shell command you put

712
00:39:24,630 --> 00:39:26,639
in there run into inside the docker

713
00:39:26,639 --> 00:39:36,329
container itself there's also a plugin

714
00:39:36,329 --> 00:39:39,799
that is pretty recent that allows you to

715
00:39:39,799 --> 00:39:42,509
is called the doctorate slaves plugin

716
00:39:42,509 --> 00:39:46,469
there's a lot of mixed of mixed names

717
00:39:46,469 --> 00:39:50,309
here and allows you to use any docker

718
00:39:50,309 --> 00:39:53,639
image for for containers without the

719
00:39:53,639 --> 00:39:56,849
need to have Java and also so basically

720
00:39:56,849 --> 00:40:01,189
it's a lot easier to reuse images and

721
00:40:01,189 --> 00:40:04,679
allows you to define the slave in the

722
00:40:04,679 --> 00:40:06,419
pipeline and you can have site

723
00:40:06,419 --> 00:40:08,880
containers so this is called the Jenkins

724
00:40:08,880 --> 00:40:11,639
docker is life splatting not to confuse

725
00:40:11,639 --> 00:40:15,919
with any of the other $10 plugins there

726
00:40:17,530 --> 00:40:20,419
[Music]

727
00:40:20,419 --> 00:40:23,880
so you can do something a maven with

728
00:40:23,880 --> 00:40:26,399
doctor knows the name of the image the

729
00:40:26,399 --> 00:40:29,249
moving image and then shell and whatever

730
00:40:29,249 --> 00:40:32,749
you want to run inside the docker image

731
00:40:32,749 --> 00:40:36,029
the missus plug-in allows you also to

732
00:40:36,029 --> 00:40:39,569
have dynamic Jenkins agents both docker

733
00:40:39,569 --> 00:40:42,199
and isolated processes so any random

734
00:40:42,199 --> 00:40:44,369
problem that you want to run in missus

735
00:40:44,369 --> 00:40:48,779
and the image has to have Java because

736
00:40:48,779 --> 00:40:51,479
that's how it runs the slave jar to

737
00:40:51,479 --> 00:40:54,449
connect to the missus master and you

738
00:40:54,449 --> 00:40:57,239
could have docker you could run docker

739
00:40:57,239 --> 00:40:59,699
commands but it's basically outside of

740
00:40:59,699 --> 00:41:02,459
message you will figure in displaying it

741
00:41:02,459 --> 00:41:05,999
here okay

742
00:41:05,999 --> 00:41:08,339
so you can write use docker pylons with

743
00:41:08,339 --> 00:41:10,529
some tricks like you need the doctor

744
00:41:10,529 --> 00:41:12,449
client installed inside the docker image

745
00:41:12,449 --> 00:41:15,419
and share the docker sock the typical

746
00:41:15,419 --> 00:41:18,899
way to run docker side by side Dockers

747
00:41:18,899 --> 00:41:20,819
or docker contained of the container

748
00:41:20,819 --> 00:41:23,339
running darker against your host dr.

749
00:41:23,339 --> 00:41:26,969
daemon plus unit among the most were

750
00:41:26,969 --> 00:41:29,939
space in the host in the same directory

751
00:41:29,939 --> 00:41:32,759
as the container that is that is running

752
00:41:32,759 --> 00:41:36,929
with this we have an example yes with

753
00:41:36,929 --> 00:41:40,109
this you can run this between a node

754
00:41:40,109 --> 00:41:43,289
running a missus and I can run a goal an

755
00:41:43,289 --> 00:41:47,099
image in the host and then I can do a go

756
00:41:47,099 --> 00:41:50,130
build with with no problems

757
00:41:50,130 --> 00:41:53,339
reusing that growling image but the only

758
00:41:53,339 --> 00:41:55,409
caveat is that this runs outside of

759
00:41:55,409 --> 00:41:58,380
messes this is just running in the host

760
00:41:58,380 --> 00:42:02,099
docker demo so missus does not know

761
00:42:02,099 --> 00:42:03,929
anything about it doesn't know how much

762
00:42:03,929 --> 00:42:07,349
memory is used in how what ports is

763
00:42:07,349 --> 00:42:08,669
using or anything like that so you're

764
00:42:08,669 --> 00:42:09,899
basically running outside of the

765
00:42:09,899 --> 00:42:14,249
scheduler and then the Jake is

766
00:42:14,249 --> 00:42:17,669
kubernetes plugin same thing you can

767
00:42:17,669 --> 00:42:20,609
have dynamic Jenkins agents and they run

768
00:42:20,609 --> 00:42:24,209
our spots so a group of containers so

769
00:42:24,209 --> 00:42:26,039
you can have multiple containers just

770
00:42:26,039 --> 00:42:29,579
one of them just has to be the jnlp one

771
00:42:29,579 --> 00:42:32,009
the one that runs the message the dengue

772
00:42:32,009 --> 00:42:34,109
sees life to connect to the master and

773
00:42:34,109 --> 00:42:36,119
if you don't set it up it will create it

774
00:42:36,119 --> 00:42:40,259
by default it has pipeline support for

775
00:42:40,259 --> 00:42:42,959
both defining how this what the spots

776
00:42:42,959 --> 00:42:46,169
images are and do execute things inside

777
00:42:46,169 --> 00:42:49,769
these spots and in the next version that

778
00:42:49,769 --> 00:42:53,669
I can release hope to release soon it's

779
00:42:53,669 --> 00:42:55,649
also having persisting workspace so all

780
00:42:55,649 --> 00:43:00,869
your agents can mount the worst place

781
00:43:00,869 --> 00:43:03,479
for manifest or EBS or whatever this is

782
00:43:03,479 --> 00:43:05,399
this is using just what kubernetes

783
00:43:05,399 --> 00:43:08,639
provides so you can have one of the

784
00:43:08,639 --> 00:43:11,339
typical problems when we run things on

785
00:43:11,339 --> 00:43:13,109
docker is that you don't have the

786
00:43:13,109 --> 00:43:15,329
previous bills I mean you start from

787
00:43:15,329 --> 00:43:17,880
zero every time you do a build but with

788
00:43:17,880 --> 00:43:19,769
this you could have a volume with your

789
00:43:19,769 --> 00:43:23,429
workspace or NFS or Mon cher cher mount

790
00:43:23,429 --> 00:43:25,829
or anything that is supported in

791
00:43:25,829 --> 00:43:27,959
kubernetes and then you wouldn't need to

792
00:43:27,959 --> 00:43:32,639
start from scratch every time so this is

793
00:43:32,639 --> 00:43:35,880
where the pipeline looks like and saying

794
00:43:35,880 --> 00:43:37,680
this is a pod template

795
00:43:37,680 --> 00:43:40,020
I have a container moving I have a

796
00:43:40,020 --> 00:43:44,250
golden container and in this pot my

797
00:43:44,250 --> 00:43:47,940
fault what I'm saying is check out some

798
00:43:47,940 --> 00:43:50,490
get cold and inside the Maven container

799
00:43:50,490 --> 00:43:53,819
run a maven build and then inside the

800
00:43:53,819 --> 00:43:57,450
golden container run a goal build so I

801
00:43:57,450 --> 00:43:59,520
don't have to read I can reuse the the

802
00:43:59,520 --> 00:44:01,349
images from the docker hub I don't have

803
00:44:01,349 --> 00:44:03,119
to create my custom image or anything

804
00:44:03,119 --> 00:44:06,599
with both maven and go and I can run

805
00:44:06,599 --> 00:44:09,720
both things in these two containers just

806
00:44:09,720 --> 00:44:15,839
with one one agent yeah and just the

807
00:44:15,839 --> 00:44:19,260
recap these plugins allows you to then

808
00:44:19,260 --> 00:44:21,299
dynamically in creation they all use

809
00:44:21,299 --> 00:44:24,690
jnlp that's the protocol to connect to

810
00:44:24,690 --> 00:44:28,349
the master in some environments you can

811
00:44:28,349 --> 00:44:30,839
use tunnel to connect to the master

812
00:44:30,839 --> 00:44:34,289
depending on how you run this we don't

813
00:44:34,289 --> 00:44:36,180
have time to go into more detail and

814
00:44:36,180 --> 00:44:38,579
they use the cloud API which is not

815
00:44:38,579 --> 00:44:40,740
ideal for container loads right now

816
00:44:40,740 --> 00:44:43,829
because it can this is what the sign in

817
00:44:43,829 --> 00:44:47,099
Jenkins for like I'm a strong images and

818
00:44:47,099 --> 00:44:48,720
instances and things like that so it may

819
00:44:48,720 --> 00:44:50,279
take a little bit longer to start the

820
00:44:50,279 --> 00:44:53,400
containers but there's a jenkees

821
00:44:53,400 --> 00:44:56,640
one-shot executor plugin that we hope to

822
00:44:56,640 --> 00:44:59,309
include into at least the kubernetes

823
00:44:59,309 --> 00:45:01,109
plugin and possibly it's gonna be in the

824
00:45:01,109 --> 00:45:04,829
docker plug into and this basically is

825
00:45:04,829 --> 00:45:07,829
optimized for for containers so in

826
00:45:07,829 --> 00:45:10,039
speakers the previous the cloud API

827
00:45:10,039 --> 00:45:12,510
assumes like when you start an instance

828
00:45:12,510 --> 00:45:14,460
it takes longer so it keeps the

829
00:45:14,460 --> 00:45:17,400
instances around and doesn't start a lot

830
00:45:17,400 --> 00:45:19,020
of them at the same time because you

831
00:45:19,020 --> 00:45:22,049
know it takes it gets it has a cost

832
00:45:22,049 --> 00:45:25,140
associated but this one-shot executor

833
00:45:25,140 --> 00:45:30,750
it's gonna just create a container run

834
00:45:30,750 --> 00:45:32,849
your thing and then kill the container

835
00:45:32,849 --> 00:45:37,619
idea so that's me if you have any

836
00:45:37,619 --> 00:45:41,450
questions yes

837
00:45:44,770 --> 00:45:52,170
in a container in an image synchronize

838
00:45:52,170 --> 00:45:55,480
dependencies across the containers then

839
00:45:55,480 --> 00:45:57,940
you went on and said well in fact in the

840
00:45:57,940 --> 00:46:01,860
slaves you can run another container

841
00:46:11,520 --> 00:46:15,340
yeah okay so how do we manage versions

842
00:46:15,340 --> 00:46:16,810
and run containers instead of a

843
00:46:16,810 --> 00:46:18,790
container okay yeah so maybe everything

844
00:46:18,790 --> 00:46:21,190
is playing we are not running a

845
00:46:21,190 --> 00:46:24,040
container inside a container you can

846
00:46:24,040 --> 00:46:27,670
have so what a body is you can start

847
00:46:27,670 --> 00:46:31,660
multiple containers but they are all in

848
00:46:31,660 --> 00:46:33,700
the I mean they're not one inside

849
00:46:33,700 --> 00:46:41,020
another when the dink when Jenkins is

850
00:46:41,020 --> 00:46:43,690
building an image yes yes you never

851
00:46:43,690 --> 00:46:46,390
right now there's no good way to run

852
00:46:46,390 --> 00:46:49,990
docker inside docker so the only the

853
00:46:49,990 --> 00:46:52,540
recommendation is always running docker

854
00:46:52,540 --> 00:46:57,070
side side by side so what you do is you

855
00:46:57,070 --> 00:47:02,020
have a container running your slave or

856
00:47:02,020 --> 00:47:05,950
whatever this container has the has to

857
00:47:05,950 --> 00:47:08,650
have the docker client installed and you

858
00:47:08,650 --> 00:47:10,600
mount the docker socket inside the

859
00:47:10,600 --> 00:47:12,580
container so this container can run

860
00:47:12,580 --> 00:47:14,859
docker commands in the docker demo in

861
00:47:14,859 --> 00:47:18,160
the host so when this container tells

862
00:47:18,160 --> 00:47:20,130
the doctor Demond docker run something

863
00:47:20,130 --> 00:47:22,750
is the host that is running and is

864
00:47:22,750 --> 00:47:25,450
running out here so you are basically

865
00:47:25,450 --> 00:47:27,369
talking to the host and the host is

866
00:47:27,369 --> 00:47:29,470
creating another container so they're

867
00:47:29,470 --> 00:47:34,810
all side-by-side how do I keep track of

868
00:47:34,810 --> 00:47:49,670
all the dependencies all of my slaves

869
00:47:49,670 --> 00:47:52,020
how do I make sure that all my slaves

870
00:47:52,020 --> 00:47:54,420
have the right bathroom okay the reason

871
00:47:54,420 --> 00:47:56,850
is the way this is done you know these

872
00:47:56,850 --> 00:47:58,440
plugins is the slaves are suddenly

873
00:47:58,440 --> 00:48:00,990
there's lives ideally they'd run just

874
00:48:00,990 --> 00:48:06,090
one job and die so whenever you with the

875
00:48:06,090 --> 00:48:08,370
cloud API it may not be exactly all the

876
00:48:08,370 --> 00:48:11,940
time like that they may stick around for

877
00:48:11,940 --> 00:48:13,860
a little bit depending on there's some

878
00:48:13,860 --> 00:48:16,680
parameters to adjust but basically you

879
00:48:16,680 --> 00:48:18,870
are saying I want this job to run in

880
00:48:18,870 --> 00:48:22,770
maven 3 3 9 and then whenever that job

881
00:48:22,770 --> 00:48:25,740
runs it will download the Maven 3 3 9

882
00:48:25,740 --> 00:48:29,130
image and run your job and die and if

883
00:48:29,130 --> 00:48:31,320
you have another job that says I need to

884
00:48:31,320 --> 00:48:34,500
run this in maven 3 that one it will

885
00:48:34,500 --> 00:48:36,090
don't love them maybe in three days one

886
00:48:36,090 --> 00:48:39,480
image run that and die if you have this

887
00:48:39,480 --> 00:48:41,400
is the beauty of it like you have you

888
00:48:41,400 --> 00:48:44,150
can have all sorts of combinations and

889
00:48:44,150 --> 00:48:47,370
using all these hobby images so like the

890
00:48:47,370 --> 00:48:50,910
moving image has versions for Java 7 8 &

891
00:48:50,910 --> 00:48:54,210
9 there's three different images so you

892
00:48:54,210 --> 00:48:56,550
could run some bills in Java 7 some

893
00:48:56,550 --> 00:48:58,920
bills in divide or maybe the same bill

894
00:48:58,920 --> 00:49:02,460
in 7 in parallel with a and they are all

895
00:49:02,460 --> 00:49:09,320
in different containers yes

896
00:49:15,880 --> 00:49:18,500
okay if I were to choose one I would

897
00:49:18,500 --> 00:49:20,089
choose kubernetes but just because I'm

898
00:49:20,089 --> 00:49:24,619
biased as I said before it's gonna

899
00:49:24,619 --> 00:49:28,069
depend if you have it if your company

900
00:49:28,069 --> 00:49:30,559
has it if your operations people already

901
00:49:30,559 --> 00:49:33,680
have something running then it's more

902
00:49:33,680 --> 00:49:34,940
likely that you're going to choose that

903
00:49:34,940 --> 00:49:38,809
one missus has the advantage of being

904
00:49:38,809 --> 00:49:43,369
able to run any process sites and so

905
00:49:43,369 --> 00:49:45,589
it's interesting for maybe some more

906
00:49:45,589 --> 00:49:49,069
like high-performance things and it

907
00:49:49,069 --> 00:49:52,220
comes there's a lot of scientific things

908
00:49:52,220 --> 00:49:54,349
running on misses because of that racial

909
00:49:54,349 --> 00:49:56,660
did run did you could run it bare metal

910
00:49:56,660 --> 00:50:00,740
things dr. storm has the advantage of

911
00:50:00,740 --> 00:50:03,789
it's coming by default with rocker and

912
00:50:03,789 --> 00:50:07,490
the new but it doesn't have the support

913
00:50:07,490 --> 00:50:11,680
and kubernetes has a lot of open source

914
00:50:11,680 --> 00:50:14,240
community behind it multiple companies

915
00:50:14,240 --> 00:50:18,349
is Google is red-hot is Korres is all

916
00:50:18,349 --> 00:50:20,150
these people building on top of

917
00:50:20,150 --> 00:50:23,269
kubernetes if you aren't running a Mugen

918
00:50:23,269 --> 00:50:27,109
clothing it's like a no-brainer do they

919
00:50:27,109 --> 00:50:29,930
already give you that for free okay so

920
00:50:29,930 --> 00:50:33,069
I'm reading both

921
00:50:39,100 --> 00:50:42,370
next step before

