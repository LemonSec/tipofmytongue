1
00:00:00,030 --> 00:00:02,929
hello

2
00:00:04,720 --> 00:00:09,500
welcome back to the security dev room we

3
00:00:09,500 --> 00:00:12,500
are here to hear a talk by Holger about

4
00:00:12,500 --> 00:00:16,750
container security please welcome him

5
00:00:19,210 --> 00:00:22,820
hello everyone thanks for coming I'm

6
00:00:22,820 --> 00:00:25,220
going to use the next twenty twenty

7
00:00:25,220 --> 00:00:29,749
seven minutes gee sorry No yes showing

8
00:00:29,749 --> 00:00:31,519
me yeah okay that's good

9
00:00:31,519 --> 00:00:33,590
I'm going to use the next twenty 20

10
00:00:33,590 --> 00:00:35,840
something minutes to tell you something

11
00:00:35,840 --> 00:00:38,420
about container security how many people

12
00:00:38,420 --> 00:00:42,230
here are using any kind of technique or

13
00:00:42,230 --> 00:00:45,140
strategy to keep an eye on what are your

14
00:00:45,140 --> 00:00:47,120
containers doing from a security point

15
00:00:47,120 --> 00:00:51,500
of view hmm okay so hopefully you can

16
00:00:51,500 --> 00:00:54,590
bring something home who knows Cystic

17
00:00:54,590 --> 00:00:57,890
here hmm

18
00:00:57,890 --> 00:00:59,449
we are not in a cloud on monitoring

19
00:00:59,449 --> 00:01:02,469
track okay so cystic is an open source

20
00:01:02,469 --> 00:01:06,370
system troubleshooting tool with

21
00:01:06,370 --> 00:01:09,200
container support so you can think it's

22
00:01:09,200 --> 00:01:12,140
like a mix of multiple tools HTM start

23
00:01:12,140 --> 00:01:15,020
like all the tools you normally would

24
00:01:15,020 --> 00:01:16,970
use for troubleshooting

25
00:01:16,970 --> 00:01:19,220
but we've container support we also have

26
00:01:19,220 --> 00:01:20,659
a commercial tool bar I'm not going to

27
00:01:20,659 --> 00:01:25,280
talk about that micro services we love

28
00:01:25,280 --> 00:01:27,350
micro services because they are good for

29
00:01:27,350 --> 00:01:30,229
security lease privileges least surprise

30
00:01:30,229 --> 00:01:34,009
less access but there are in the same

31
00:01:34,009 --> 00:01:36,829
way that for bare metal servers or

32
00:01:36,829 --> 00:01:38,570
traditional servers there are many ways

33
00:01:38,570 --> 00:01:42,380
of implementing security measures for

34
00:01:42,380 --> 00:01:46,130
containers we got the same thing but I'm

35
00:01:46,130 --> 00:01:48,079
not going to talk about this today I

36
00:01:48,079 --> 00:01:52,250
want to focus on one specific technique

37
00:01:52,250 --> 00:01:53,450
there are multiple of them that you

38
00:01:53,450 --> 00:01:56,149
should be using multiple of them but we

39
00:01:56,149 --> 00:01:59,469
are going to talk about scanning the

40
00:01:59,469 --> 00:02:01,609
containers the year like black boxes

41
00:02:01,609 --> 00:02:04,969
they are great to deploy they keep the

42
00:02:04,969 --> 00:02:06,049
application

43
00:02:06,049 --> 00:02:08,600
they're inside less dependency is just

44
00:02:08,600 --> 00:02:11,090
one process hopefully heard from the

45
00:02:11,090 --> 00:02:14,450
outside when maybe we cannot see at

46
00:02:14,450 --> 00:02:16,280
least very comfortable what they are

47
00:02:16,280 --> 00:02:17,980
doing we have two techniques

48
00:02:17,980 --> 00:02:20,830
to scan what those containers are doing

49
00:02:20,830 --> 00:02:22,989
we can the static analysis

50
00:02:22,989 --> 00:02:25,870
which basically means scanning the

51
00:02:25,870 --> 00:02:28,299
docker container image before having in

52
00:02:28,299 --> 00:02:30,900
anything running and we can do dynamic

53
00:02:30,900 --> 00:02:33,040
scanning and this is again where we are

54
00:02:33,040 --> 00:02:36,459
going where I'm going to focus that is

55
00:02:36,459 --> 00:02:38,349
the static scanning why we should be

56
00:02:38,349 --> 00:02:39,940
doing this well probably have seen

57
00:02:39,940 --> 00:02:42,879
docker files like this where we download

58
00:02:42,879 --> 00:02:45,940
crap from the internet without any kind

59
00:02:45,940 --> 00:02:49,060
of HTTP we can without any kind of

60
00:02:49,060 --> 00:02:51,670
signature checking and then we compile

61
00:02:51,670 --> 00:02:54,040
things so we leave for hackers all the

62
00:02:54,040 --> 00:02:55,750
tools to compile there and stuff there

63
00:02:55,750 --> 00:02:58,660
and then developers they never update

64
00:02:58,660 --> 00:03:00,609
those images this is very dangerous so

65
00:03:00,609 --> 00:03:05,319
that's why we have static scanning we

66
00:03:05,319 --> 00:03:07,569
look at what the containers or how the

67
00:03:07,569 --> 00:03:10,690
images they are built we look for non

68
00:03:10,690 --> 00:03:12,849
were vulnerable ities and we trigger on

69
00:03:12,849 --> 00:03:14,290
those but is that enough

70
00:03:14,290 --> 00:03:17,230
well um explain here how it works but

71
00:03:17,230 --> 00:03:19,180
probably you know or you can find it on

72
00:03:19,180 --> 00:03:19,870
the Internet

73
00:03:19,870 --> 00:03:24,090
okay we scan the image no known or

74
00:03:24,090 --> 00:03:27,040
vulnerabilities is that enough is it our

75
00:03:27,040 --> 00:03:30,880
our container secure well even there is

76
00:03:30,880 --> 00:03:35,730
nothing known or no only reality known

77
00:03:35,730 --> 00:03:38,829
these are usually coming from CVE or any

78
00:03:38,829 --> 00:03:42,970
other vulnerability databases still when

79
00:03:42,970 --> 00:03:45,250
we see our own applications or things

80
00:03:45,250 --> 00:03:48,099
that could be misbehaving we need to

81
00:03:48,099 --> 00:03:50,190
look at how those containers they are

82
00:03:50,190 --> 00:03:54,099
executing and again we have two options

83
00:03:54,099 --> 00:03:57,459
sotiria strategies here we can enforce

84
00:03:57,459 --> 00:04:00,549
so it's more or less we will see this in

85
00:04:00,549 --> 00:04:02,590
a minute we can enforce on prevent

86
00:04:02,590 --> 00:04:03,760
things from happening

87
00:04:03,760 --> 00:04:07,239
similar to up are more or less a linux

88
00:04:07,239 --> 00:04:10,959
or we can just out it and keep an eye on

89
00:04:10,959 --> 00:04:14,109
how things are doing and if there is

90
00:04:14,109 --> 00:04:16,750
something not expected happening we will

91
00:04:16,750 --> 00:04:19,779
let the admins know pretty much like

92
00:04:19,779 --> 00:04:24,580
security web comes this is the these are

93
00:04:24,580 --> 00:04:27,450
the different tools we we got for

94
00:04:27,450 --> 00:04:31,449
dynamically scanning sicom weak

95
00:04:31,449 --> 00:04:35,169
with second BPF we can do more advanced

96
00:04:35,169 --> 00:04:37,449
profiles so we can define capabilities

97
00:04:37,449 --> 00:04:42,099
and define wireless Siskel's we allow

98
00:04:42,099 --> 00:04:44,469
the containers processes to execute we

99
00:04:44,469 --> 00:04:48,120
can use systems that we know ready like

100
00:04:48,120 --> 00:04:51,520
SELinux or app armour we can use and

101
00:04:51,520 --> 00:04:55,240
then we can also hold it with LD d which

102
00:04:55,240 --> 00:04:58,990
is the login diamond from SELinux but we

103
00:04:58,990 --> 00:05:00,849
have come up with something new using

104
00:05:00,849 --> 00:05:05,050
the Cystic technology Falco I'm doing -

105
00:05:05,050 --> 00:05:06,550
you can parallel read with the other

106
00:05:06,550 --> 00:05:08,050
system so I'll give you a little bit of

107
00:05:08,050 --> 00:05:11,830
context second basically it's Sun box in

108
00:05:11,830 --> 00:05:15,430
the container the process basically we

109
00:05:15,430 --> 00:05:17,319
do one transition one way transition

110
00:05:17,319 --> 00:05:20,139
into a process we're into a state where

111
00:05:20,139 --> 00:05:23,649
that process they cannot execute or can

112
00:05:23,649 --> 00:05:28,919
execute only some system Falls there is

113
00:05:28,919 --> 00:05:32,139
secure strict move that basically only

114
00:05:32,139 --> 00:05:34,930
allows the read writes exit and sick

115
00:05:34,930 --> 00:05:37,689
returned in in practice in real life

116
00:05:37,689 --> 00:05:40,029
they say is pretty much useless because

117
00:05:40,029 --> 00:05:41,499
you can oh you cannot open new

118
00:05:41,499 --> 00:05:45,189
connections or spawn new threads and

119
00:05:45,189 --> 00:05:48,759
when the process does any other system

120
00:05:48,759 --> 00:05:54,099
call it skill so with BPF we can create

121
00:05:54,099 --> 00:05:57,550
something more useful which is creating

122
00:05:57,550 --> 00:06:00,580
different profiles of Whitely system

123
00:06:00,580 --> 00:06:03,099
calls that that container or the process

124
00:06:03,099 --> 00:06:05,740
is running inside the container they can

125
00:06:05,740 --> 00:06:08,529
execute and then we kind define we can

126
00:06:08,529 --> 00:06:10,060
define different actions if we want to

127
00:06:10,060 --> 00:06:11,709
kill the process if we want to trigger

128
00:06:11,709 --> 00:06:15,399
an alert if we want to escape and ignore

129
00:06:15,399 --> 00:06:17,800
this is cool so it's more advanced this

130
00:06:17,800 --> 00:06:21,089
is actually available in doctor already

131
00:06:21,089 --> 00:06:24,099
you can drop capabilities things like

132
00:06:24,099 --> 00:06:27,159
that there are some system calls that

133
00:06:27,159 --> 00:06:29,979
they are obviously wrong if you're

134
00:06:29,979 --> 00:06:32,529
running those inside a container imagine

135
00:06:32,529 --> 00:06:35,050
that your container could review the

136
00:06:35,050 --> 00:06:38,409
whole host so it's obvious using this if

137
00:06:38,409 --> 00:06:40,599
we want to do some basic security but

138
00:06:40,599 --> 00:06:43,360
it's low SEC comm doesn't give you all

139
00:06:43,360 --> 00:06:45,130
the flexibility

140
00:06:45,130 --> 00:06:48,430
and all the features so that's why we

141
00:06:48,430 --> 00:06:51,100
got selinux on our partner I'm not going

142
00:06:51,100 --> 00:06:52,990
to compare them here I'm not an expert

143
00:06:52,990 --> 00:06:57,520
on this but these systems they come with

144
00:06:57,520 --> 00:06:59,110
more features are not the same time

145
00:06:59,110 --> 00:07:01,920
they're more complex to deploy they have

146
00:07:01,920 --> 00:07:05,080
concepts that they are above sea schools

147
00:07:05,080 --> 00:07:08,950
like processes files so you can define

148
00:07:08,950 --> 00:07:11,830
those higher-level objects when you are

149
00:07:11,830 --> 00:07:14,920
defining your policies but still it's

150
00:07:14,920 --> 00:07:18,850
complex its complex a difference also

151
00:07:18,850 --> 00:07:23,910
compared with with secum is that these

152
00:07:23,910 --> 00:07:27,160
systems are mandatory if you define that

153
00:07:27,160 --> 00:07:29,620
you're running in the kernel processes

154
00:07:29,620 --> 00:07:31,450
they cannot avoid them it's a comb it's

155
00:07:31,450 --> 00:07:33,730
something voluntary that the your

156
00:07:33,730 --> 00:07:36,910
process decides to achieve adopt another

157
00:07:36,910 --> 00:07:40,150
option for just watching a saw DT which

158
00:07:40,150 --> 00:07:43,680
is the login service from selinux

159
00:07:43,680 --> 00:07:48,400
defined in real it's it's more simple

160
00:07:48,400 --> 00:07:52,330
than SELinux so we can put here a couple

161
00:07:52,330 --> 00:07:55,120
of examples so there is like kind of a

162
00:07:55,120 --> 00:07:58,380
syntax but it's still it's missing

163
00:07:58,380 --> 00:08:01,270
higher-level concepts that we think they

164
00:08:01,270 --> 00:08:03,520
are quite convenient so that's why we

165
00:08:03,520 --> 00:08:05,710
created a cystic follicle since the

166
00:08:05,710 --> 00:08:08,170
falco is an anomaly detection system

167
00:08:08,170 --> 00:08:10,810
built on top of cystic engine since they

168
00:08:10,810 --> 00:08:13,600
can gene basically what we do is we low

169
00:08:13,600 --> 00:08:15,670
the kernel module very small one that

170
00:08:15,670 --> 00:08:17,980
allows us to capture all the system

171
00:08:17,980 --> 00:08:20,290
calls and we move those into a user

172
00:08:20,290 --> 00:08:22,900
space process where we decide were to

173
00:08:22,900 --> 00:08:26,290
with them we have an IV in the stream

174
00:08:26,290 --> 00:08:27,790
where we get all the system calls but

175
00:08:27,790 --> 00:08:29,050
I'm not going to get here into the

176
00:08:29,050 --> 00:08:32,710
details the benefit of this is that for

177
00:08:32,710 --> 00:08:35,380
every system call we offer every event

178
00:08:35,380 --> 00:08:38,830
we have all the context the users the IP

179
00:08:38,830 --> 00:08:41,919
addresses that we are related to that's

180
00:08:41,919 --> 00:08:44,740
the circle and everything so we came up

181
00:08:44,740 --> 00:08:49,360
with a piece of software that allows to

182
00:08:49,360 --> 00:08:52,630
define a very in a very easy way

183
00:08:52,630 --> 00:08:53,670
different rules

184
00:08:53,670 --> 00:08:56,470
we cannot block things we can just alert

185
00:08:56,470 --> 00:08:58,600
this is like a security welcome

186
00:08:58,600 --> 00:09:01,630
sort of thing and then because we are

187
00:09:01,630 --> 00:09:04,300
running in user space we can do things

188
00:09:04,300 --> 00:09:06,160
that you shouldn't do at the kernel

189
00:09:06,160 --> 00:09:08,889
space so I said before we work very well

190
00:09:08,889 --> 00:09:11,740
with containers so given that we are in

191
00:09:11,740 --> 00:09:13,690
the user space we are able to talk with

192
00:09:13,690 --> 00:09:16,899
the docker api with kubernetes api with

193
00:09:16,899 --> 00:09:18,970
different container orchestration api

194
00:09:18,970 --> 00:09:22,269
and apply those metadata those concepts

195
00:09:22,269 --> 00:09:25,269
in the security and in the rules that

196
00:09:25,269 --> 00:09:28,120
you define so I'm gonna give you a few

197
00:09:28,120 --> 00:09:32,529
examples so if someone runs a shell

198
00:09:32,529 --> 00:09:35,920
inside of a container defining rules

199
00:09:35,920 --> 00:09:38,860
similar to that container ID it's not

200
00:09:38,860 --> 00:09:40,660
the horse so we are not in the host and

201
00:09:40,660 --> 00:09:42,579
then the process name is bash if

202
00:09:42,579 --> 00:09:44,860
something like that happens trigger

203
00:09:44,860 --> 00:09:48,250
alert or if someone is right in a binary

204
00:09:48,250 --> 00:09:51,130
so we do have the directory and then an

205
00:09:51,130 --> 00:09:53,649
array of different protected directories

206
00:09:53,649 --> 00:09:56,259
and execute of Rights is cool we trigger

207
00:09:56,259 --> 00:09:59,019
an alert or changing a container

208
00:09:59,019 --> 00:10:04,389
namespace things like that so we use

209
00:10:04,389 --> 00:10:07,420
those conditions or those rules in yeah

210
00:10:07,420 --> 00:10:09,850
conditions to create rules like this so

211
00:10:09,850 --> 00:10:12,579
this is an example of a complete row so

212
00:10:12,579 --> 00:10:14,680
we have like a name a description the

213
00:10:14,680 --> 00:10:17,470
condition so if we are in our in

214
00:10:17,470 --> 00:10:19,930
directory that we know and there is an

215
00:10:19,930 --> 00:10:23,170
event that opens one file for writing

216
00:10:23,170 --> 00:10:25,750
and it's not one of the processes that

217
00:10:25,750 --> 00:10:27,339
we have on a list that we know that the

218
00:10:27,339 --> 00:10:30,970
our package management software it's

219
00:10:30,970 --> 00:10:34,389
probably something writing in a place

220
00:10:34,389 --> 00:10:37,209
that she's and be happening so let's

221
00:10:37,209 --> 00:10:39,910
create like a message and trigger it

222
00:10:39,910 --> 00:10:44,980
somewhere we can trigger alerts in two

223
00:10:44,980 --> 00:10:47,889
different places this log files execute

224
00:10:47,889 --> 00:10:50,259
shell scripts send it into your login

225
00:10:50,259 --> 00:10:52,779
system if this is completely up to you

226
00:10:52,779 --> 00:10:56,439
so now because I have a fear minutes

227
00:10:56,439 --> 00:10:59,350
left I'm going to show you a demo of how

228
00:10:59,350 --> 00:11:07,319
this works and I need both hands okay

229
00:11:11,790 --> 00:11:15,360
you can hear me like this yes

230
00:11:15,360 --> 00:11:19,350
okay so mmm

231
00:11:19,350 --> 00:11:24,430
now that's not going to work yes it's

232
00:11:24,430 --> 00:11:26,339
going to be just five minutes so

233
00:11:26,339 --> 00:11:30,279
basically I have here I have no yes

234
00:11:30,279 --> 00:11:33,639
service which I know it's vulnerable to

235
00:11:33,639 --> 00:11:36,670
some code injection because I created

236
00:11:36,670 --> 00:11:38,679
begin not because I'm a node gear

237
00:11:38,679 --> 00:11:41,949
security expert and I'm going to create

238
00:11:41,949 --> 00:11:47,429
or spawn this together with Falco

239
00:11:47,429 --> 00:11:56,920
so I have here some notes so if I let me

240
00:11:56,920 --> 00:12:02,559
remove this so when I access this web

241
00:12:02,559 --> 00:12:04,899
service it returns like just one number

242
00:12:04,899 --> 00:12:11,459
but I know that if I insert some code

243
00:12:11,459 --> 00:12:17,860
like this it's going to execute it on

244
00:12:17,860 --> 00:12:20,290
the server okay you can see here that

245
00:12:20,290 --> 00:12:23,679
when I insert into this endpoint any

246
00:12:23,679 --> 00:12:27,029
JavaScript code it executes this so I

247
00:12:27,029 --> 00:12:30,899
created a reverse shell

248
00:12:30,899 --> 00:12:34,649
let me foreign it here in my notes

249
00:12:34,649 --> 00:12:40,929
dad it's going to connect back to me so

250
00:12:40,929 --> 00:12:46,769
I open it cut and ID

251
00:12:51,230 --> 00:13:02,130
this is demo effect probably yes I'm in

252
00:13:02,130 --> 00:13:07,590
the wrong directory did it it didn't so

253
00:13:07,590 --> 00:13:12,420
hopefully if not the IP address is wrong

254
00:13:12,420 --> 00:13:15,150
so hopefully we'll get here a connection

255
00:13:15,150 --> 00:13:22,500
now we are not going the connection so

256
00:13:22,500 --> 00:13:25,020
let me find my IP address that probably

257
00:13:25,020 --> 00:13:37,950
has change this is probably it yes not

258
00:13:37,950 --> 00:13:50,460
very efficient but oh ice so now

259
00:13:50,460 --> 00:13:58,170
quickly connected at IP it was one seven

260
00:13:58,170 --> 00:14:09,120
I forget so I'm showing you how to you

261
00:14:09,120 --> 00:14:17,040
find out that your IP address and

262
00:14:17,040 --> 00:14:23,520
hopefully now this works no I can show

263
00:14:23,520 --> 00:14:25,650
you I can show you

264
00:14:25,650 --> 00:14:32,520
Falco output already okay so I got here

265
00:14:32,520 --> 00:14:35,210
the output

266
00:14:38,529 --> 00:14:43,760
hmmm this is the effect okay well I'm

267
00:14:43,760 --> 00:14:45,550
not going to lose more time with this

268
00:14:45,550 --> 00:14:47,350
hopefully you will have to believe me

269
00:14:47,350 --> 00:14:52,839
because what I want to show you is that

270
00:14:53,860 --> 00:14:59,930
this is how my Falco diamond not very

271
00:14:59,930 --> 00:15:01,910
convenient having all these terminals

272
00:15:01,910 --> 00:15:19,700
here so what I want to show you is that

273
00:15:19,700 --> 00:15:22,490
now I can hold this I'm not going to do

274
00:15:22,490 --> 00:15:25,010
a demo anymore so this is one complete

275
00:15:25,010 --> 00:15:30,290
example of a real run showing a

276
00:15:30,290 --> 00:15:32,899
container I created okay there is a new

277
00:15:32,899 --> 00:15:35,060
spawn process and it's a shell process

278
00:15:35,060 --> 00:15:38,570
and the program exists and it's not one

279
00:15:38,570 --> 00:15:40,610
of those binary stress the toneri's that

280
00:15:40,610 --> 00:15:45,079
I believe can do things some changes I

281
00:15:45,079 --> 00:15:46,550
wanted to share but we don't have time

282
00:15:46,550 --> 00:15:49,940
then trigger an alert and if we go back

283
00:15:49,940 --> 00:15:59,770
to my other console where I have Falco

284
00:16:00,399 --> 00:16:08,000
we can see that fall cost three green

285
00:16:08,000 --> 00:16:09,680
alerts like this is probably at the

286
00:16:09,680 --> 00:16:12,800
bottom but hopefully you can see it so

287
00:16:12,800 --> 00:16:16,040
these are the kind of outputs we can

288
00:16:16,040 --> 00:16:19,390
trigger now you can send this to your

289
00:16:19,390 --> 00:16:23,290
blk or any other logger login system or

290
00:16:23,290 --> 00:16:27,050
alerting system and just keep an eye on

291
00:16:27,050 --> 00:16:30,470
what your containers in doing this is

292
00:16:30,470 --> 00:16:32,990
everything I have for today well I have

293
00:16:32,990 --> 00:16:36,740
way more but I don't have more time so

294
00:16:36,740 --> 00:16:39,050
it's probably a good thing

295
00:16:39,050 --> 00:16:42,260
if you have a look at these links I left

296
00:16:42,260 --> 00:16:47,180
here more deep comparison of cystic

297
00:16:47,180 --> 00:16:50,320
Falco with other docker container

298
00:16:50,320 --> 00:16:53,199
solutions

299
00:16:53,199 --> 00:16:57,649
another example or an example of Falco

300
00:16:57,649 --> 00:17:00,680
for intercepting or preventing someone

301
00:17:00,680 --> 00:17:03,470
else intercepting when I download

302
00:17:03,470 --> 00:17:05,000
software from the internet and shell

303
00:17:05,000 --> 00:17:08,109
scripts and I run them as route so

304
00:17:08,109 --> 00:17:10,160
preventing someone in getting things

305
00:17:10,160 --> 00:17:13,119
there and Falco website and github and

306
00:17:13,119 --> 00:17:15,770
probably we have now like four three

307
00:17:15,770 --> 00:17:21,980
minutes for questions anyone thank you

308
00:17:21,980 --> 00:17:25,039
we have actually seven minutes for a

309
00:17:25,039 --> 00:17:28,010
question so raise your hand yeah there's

310
00:17:28,010 --> 00:17:30,260
one raise your hand so I can see it and

311
00:17:30,260 --> 00:17:34,240
I will come with a mic to you later

312
00:17:35,200 --> 00:17:38,570
so I'm not sure whether I understood the

313
00:17:38,570 --> 00:17:41,480
rule system correctly is is this about

314
00:17:41,480 --> 00:17:43,309
allowing containers to do certain things

315
00:17:43,309 --> 00:17:45,409
or disallowing is this black listing

316
00:17:45,409 --> 00:17:55,490
white listing can you do both so the

317
00:17:55,490 --> 00:17:59,870
question was if these system prevents

318
00:17:59,870 --> 00:18:02,710
containers from executing things or not

319
00:18:02,710 --> 00:18:07,059
we don't block them at all we just watch

320
00:18:07,059 --> 00:18:10,240
unlearned if you want to block

321
00:18:10,240 --> 00:18:12,950
containers from executing things they

322
00:18:12,950 --> 00:18:16,520
shouldn't be doing it's more complex so

323
00:18:16,520 --> 00:18:17,929
it's more difficult to bring it into

324
00:18:17,929 --> 00:18:21,280
production and you need to use sicom

325
00:18:21,280 --> 00:18:22,400
SELinux

326
00:18:22,400 --> 00:18:25,870
or apparmor there is no other way

327
00:18:25,870 --> 00:18:29,600
integrated with open source product so

328
00:18:29,600 --> 00:18:34,059
far our approach has been okay that's

329
00:18:34,059 --> 00:18:36,100
complicated

330
00:18:36,100 --> 00:18:38,210
probably you should be doing it as well

331
00:18:38,210 --> 00:18:41,919
but the first step is to keep an eye of

332
00:18:41,919 --> 00:18:47,409
misbehaving processes and alert or not

333
00:18:49,210 --> 00:18:53,200
any more questions yes

334
00:18:55,210 --> 00:19:00,309
do you have a standard rosette yes yes

335
00:19:00,309 --> 00:19:06,879
what I show you this fall Caroll's

336
00:19:06,879 --> 00:19:10,738
which I'm going to open in read mode

337
00:19:11,429 --> 00:19:16,239
it's a daddy full daddy for rule set

338
00:19:16,239 --> 00:19:19,830
that we keep improving and improving

339
00:19:19,830 --> 00:19:22,570
there we haven't started this is very

340
00:19:22,570 --> 00:19:26,320
recent project and it's still in heavy

341
00:19:26,320 --> 00:19:28,929
development POC more or less we have

342
00:19:28,929 --> 00:19:32,919
started to create our default rule sets

343
00:19:32,919 --> 00:19:36,669
for some of the most popular services so

344
00:19:36,669 --> 00:19:40,749
sub keeper Kafka memcache a few others

345
00:19:40,749 --> 00:19:44,200
so MongoDB said when you are running

346
00:19:44,200 --> 00:19:46,479
those you can come here and enable those

347
00:19:46,479 --> 00:19:51,940
rules directly question about the output

348
00:19:51,940 --> 00:19:54,249
of I know that you can enable the

349
00:19:54,249 --> 00:19:57,159
logging output or sending the output to

350
00:19:57,159 --> 00:19:59,139
a program but should be it's possible

351
00:19:59,139 --> 00:20:00,609
maybe it's possible and I don't know

352
00:20:00,609 --> 00:20:04,269
it's possible to enable like their shell

353
00:20:04,269 --> 00:20:07,570
a shell when you three are a rule 3 or a

354
00:20:07,570 --> 00:20:08,889
shell that does something in a specific

355
00:20:08,889 --> 00:20:11,469
rule not in all the rules because

356
00:20:11,469 --> 00:20:13,629
sometimes you you can of course send the

357
00:20:13,629 --> 00:20:14,859
output to a program and then you need to

358
00:20:14,859 --> 00:20:16,299
filter the bends like ok when this

359
00:20:16,299 --> 00:20:18,219
happens to do this I would like

360
00:20:18,219 --> 00:20:20,019
something like when this trigger is this

361
00:20:20,019 --> 00:20:22,659
rule is trigger please inform the output

362
00:20:22,659 --> 00:20:25,779
a system but also are all me to run a

363
00:20:25,779 --> 00:20:31,719
shot I don't think that's possible at

364
00:20:31,719 --> 00:20:33,399
the moment but rings me the ballots in

365
00:20:33,399 --> 00:20:37,570
the robot in worst case scenario you

366
00:20:37,570 --> 00:20:40,389
could be a second filter in face in your

367
00:20:40,389 --> 00:20:42,399
script but yeah make sense to have

368
00:20:42,399 --> 00:20:44,619
something like that yeah yeah makes

369
00:20:44,619 --> 00:20:49,320
sense Ollie over there

370
00:20:50,320 --> 00:20:54,020
that how can you start this minute

371
00:20:54,020 --> 00:20:56,330
orientation so in docker compose do you

372
00:20:56,330 --> 00:21:01,400
have additional container yes so for

373
00:21:01,400 --> 00:21:05,659
convenience we've run everything on a

374
00:21:05,659 --> 00:21:08,270
locker container and I expose my

375
00:21:08,270 --> 00:21:12,080
configuration file inside you can run it

376
00:21:12,080 --> 00:21:15,020
directly with poker run you can schedule

377
00:21:15,020 --> 00:21:19,070
it with your kubernetes or whatever the

378
00:21:19,070 --> 00:21:22,399
idea is we need to have one Falco

379
00:21:22,399 --> 00:21:25,870
instance in each of your physical hosts

380
00:21:25,870 --> 00:21:28,700
and from there we get visibility of all

381
00:21:28,700 --> 00:21:32,080
the containers running on a machine

382
00:21:33,580 --> 00:21:46,730
anyone else no okay now let's find color

383
00:21:46,730 --> 00:21:49,210
for the talk thank you thank you

384
00:21:49,210 --> 00:21:57,499
[Applause]

