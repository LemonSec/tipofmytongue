1
00:00:04,540 --> 00:00:09,320
hello hi unless I've been working a lot

2
00:00:09,320 --> 00:00:12,619
on there for six past years and I'm

3
00:00:12,619 --> 00:00:16,400
going to talk about making Pro six or

4
00:00:16,400 --> 00:00:21,080
camellia flying faster we've been

5
00:00:21,080 --> 00:00:23,540
talking about how slow things are and

6
00:00:23,540 --> 00:00:26,120
well I want to talk about how slow

7
00:00:26,120 --> 00:00:28,310
things were and how much faster they are

8
00:00:28,310 --> 00:00:32,570
now so actually we're talking about Roku

9
00:00:32,570 --> 00:00:34,579
dough pull six or more vm this is of

10
00:00:34,579 --> 00:00:36,620
course the the most advanced pull six

11
00:00:36,620 --> 00:00:39,770
implementation that we have and we have

12
00:00:39,770 --> 00:00:41,780
since Christmas we have had over eighty

13
00:00:41,780 --> 00:00:43,970
eight thousand eight hundred commits

14
00:00:43,970 --> 00:00:47,420
which is basically about thousand four

15
00:00:47,420 --> 00:00:50,180
more vm about 1300 for nqp about 3300

16
00:00:50,180 --> 00:00:51,590
for Rikku dough and put a documentation

17
00:00:51,590 --> 00:00:54,950
and also about 3200 so that's about

18
00:00:54,950 --> 00:00:57,050
twenty-two everyday single day since

19
00:00:57,050 --> 00:00:59,960
Christmas I think that's quite a lot of

20
00:00:59,960 --> 00:01:03,159
work so it's almost one that we our

21
00:01:03,159 --> 00:01:06,430
we're working for for the hour but yeah

22
00:01:06,430 --> 00:01:08,869
so get more people in there POSIX

23
00:01:08,869 --> 00:01:11,270
involves and write documentation if you

24
00:01:11,270 --> 00:01:13,819
find a problem with documentation it's a

25
00:01:13,819 --> 00:01:14,859
good way to start

26
00:01:14,859 --> 00:01:19,609
so recruiter pro six basically depends

27
00:01:19,609 --> 00:01:23,359
on a number of building blocks and the

28
00:01:23,359 --> 00:01:25,100
biggest one actually or the one at the

29
00:01:25,100 --> 00:01:26,840
bottom at the moment is basically more

30
00:01:26,840 --> 00:01:27,409
VM

31
00:01:27,409 --> 00:01:30,709
it's short for metamodel on a run time

32
00:01:30,709 --> 00:01:36,200
or as originally was call also was the

33
00:01:36,200 --> 00:01:40,099
mother of all runtimes but okay it's a

34
00:01:40,099 --> 00:01:41,810
dedicated virtual machine for running

35
00:01:41,810 --> 00:01:48,560
pro 6 so although apparently the

36
00:01:48,560 --> 00:01:51,229
original virtual machine for pro 6 was

37
00:01:51,229 --> 00:01:54,619
more intended to be a generic virtual

38
00:01:54,619 --> 00:01:58,279
machine more VM is dedicated to plus X

39
00:01:58,279 --> 00:02:02,209
having said that pro 6 is just a

40
00:02:02,209 --> 00:02:05,419
language implemented using more VM and n

41
00:02:05,419 --> 00:02:08,060
QP so if you feel like doing your own

42
00:02:08,060 --> 00:02:10,840
language on that level please go ahead

43
00:02:10,840 --> 00:02:14,870
if possible we will help you but you're

44
00:02:14,870 --> 00:02:17,270
mostly on your own but there you go

45
00:02:17,270 --> 00:02:19,970
you might want to do that it has a

46
00:02:19,970 --> 00:02:22,820
monthly release cycle and if you want to

47
00:02:22,820 --> 00:02:24,770
see about what it all does and all the

48
00:02:24,770 --> 00:02:27,650
releases that's where you need to go the

49
00:02:27,650 --> 00:02:29,660
next building block is sort of somewhat

50
00:02:29,660 --> 00:02:32,870
a pack it's called nqp it's not quite

51
00:02:32,870 --> 00:02:36,410
pearl and it's basically you could say

52
00:02:36,410 --> 00:02:41,180
the the assembly language of rikuo Perl

53
00:02:41,180 --> 00:02:45,470
6 it is written in nqp it's self-hosting

54
00:02:45,470 --> 00:02:48,190
which is I think quite a feat in itself

55
00:02:48,190 --> 00:02:50,870
and but the nice thing about it is that

56
00:02:50,870 --> 00:02:53,360
so more p.m. is like one back end for

57
00:02:53,360 --> 00:02:57,530
nqp so the only thing that you actually

58
00:02:57,530 --> 00:02:59,270
if you want to have another back end for

59
00:02:59,270 --> 00:03:02,270
recruiter Pro 6 is most of the work that

60
00:03:02,270 --> 00:03:04,100
you need to do is actually make it work

61
00:03:04,100 --> 00:03:09,020
with nqp right so we have the JVM as a

62
00:03:09,020 --> 00:03:11,720
back-end also at the moment and there's

63
00:03:11,720 --> 00:03:14,120
very extensive work done for to make

64
00:03:14,120 --> 00:03:16,820
JavaScript the backend for recruiter

65
00:03:16,820 --> 00:03:19,340
pill 6 and we actually can already say

66
00:03:19,340 --> 00:03:22,520
hello world in that it's a start but

67
00:03:22,520 --> 00:03:25,130
that all of the other materials like

68
00:03:25,130 --> 00:03:26,720
parsing grammars and everything that all

69
00:03:26,720 --> 00:03:31,430
works so you can use your write your

70
00:03:31,430 --> 00:03:32,660
programming language in this we've done

71
00:03:32,660 --> 00:03:34,700
this with Perl 6 it also has a month or

72
00:03:34,700 --> 00:03:36,950
release cycle it actually does not have

73
00:03:36,950 --> 00:03:39,800
a website of its own it's just something

74
00:03:39,800 --> 00:03:43,730
that lives in a repo but yeah there you

75
00:03:43,730 --> 00:03:45,790
go

76
00:03:46,109 --> 00:03:48,030
and it's basically the same for all

77
00:03:48,030 --> 00:03:50,099
backends so basically you need to target

78
00:03:50,099 --> 00:03:51,989
Thank You P if you want to write your

79
00:03:51,989 --> 00:03:54,450
own back-end some people are saying I

80
00:03:54,450 --> 00:03:56,609
want to add an LLVM back-end no please

81
00:03:56,609 --> 00:04:00,139
go ahead and target and QP there you go

82
00:04:00,139 --> 00:04:04,200
Roku Doe is actually written in an QP

83
00:04:04,200 --> 00:04:07,290
and fill six and that tiny bit of C but

84
00:04:07,290 --> 00:04:10,019
you don't really want to know about that

85
00:04:10,019 --> 00:04:12,540
it's very very for very hot code paths

86
00:04:12,540 --> 00:04:14,430
that we actually done that and it's

87
00:04:14,430 --> 00:04:16,320
basically I think about 20 lines of C

88
00:04:16,320 --> 00:04:20,430
code so it's not it's not a lot the

89
00:04:20,430 --> 00:04:24,389
bootstrap is written in n QP so until 6

90
00:04:24,389 --> 00:04:27,000
has all these high-level types like bull

91
00:04:27,000 --> 00:04:30,090
and attributes and parameter and

92
00:04:30,090 --> 00:04:32,849
subroutine and all that

93
00:04:32,849 --> 00:04:35,160
these need to be created and actually

94
00:04:35,160 --> 00:04:36,990
they need to be bootstrap it before you

95
00:04:36,990 --> 00:04:38,910
can actually write a grammar that

96
00:04:38,910 --> 00:04:41,430
actually process your real six code so

97
00:04:41,430 --> 00:04:43,650
and that part is written in n QP it's

98
00:04:43,650 --> 00:04:46,349
not nice because nothing really exists

99
00:04:46,349 --> 00:04:49,050
it is really a bootstrap but it works

100
00:04:49,050 --> 00:04:52,860
and on top of that we have the core

101
00:04:52,860 --> 00:04:55,560
settings which is basically giving you

102
00:04:55,560 --> 00:04:58,190
all of the even higher level stuff like

103
00:04:58,190 --> 00:05:04,080
sets and bags and all sorts of Handy

104
00:05:04,080 --> 00:05:07,349
super teens like map and grab and stuff

105
00:05:07,349 --> 00:05:09,300
like that they're all implemented in

106
00:05:09,300 --> 00:05:13,380
real 6 and as part of the settings and

107
00:05:13,380 --> 00:05:16,020
this also has a monthly release release

108
00:05:16,020 --> 00:05:19,229
cycle and of course this is all the same

109
00:05:19,229 --> 00:05:21,660
for all backends

110
00:05:21,660 --> 00:05:25,950
almost sometimes the JVM does things

111
00:05:25,950 --> 00:05:28,560
slightly differently so we have some

112
00:05:28,560 --> 00:05:31,080
conditional thrill six code somewhere in

113
00:05:31,080 --> 00:05:33,600
in the course settings so this is for

114
00:05:33,600 --> 00:05:35,460
the JVM and this is for everything else

115
00:05:35,460 --> 00:05:39,810
or vice-versa but there used to be a lot

116
00:05:39,810 --> 00:05:42,630
more of that and it used to be way worse

117
00:05:42,630 --> 00:05:44,130
when we also have parrot as a back-end

118
00:05:44,130 --> 00:05:46,590
so most of that is gone now so we don't

119
00:05:46,590 --> 00:05:48,110
have to worry about that so much anymore

120
00:05:48,110 --> 00:05:54,600
so what did we do in 2016 well we really

121
00:05:54,600 --> 00:05:57,840
worked on making six dot C which is the

122
00:05:57,840 --> 00:06:00,390
version of fill six that was released at

123
00:06:00,390 --> 00:06:01,260
Christmas

124
00:06:01,260 --> 00:06:06,600
hence the C make it faster and basically

125
00:06:06,600 --> 00:06:09,480
make it faster without any incompatible

126
00:06:09,480 --> 00:06:11,340
changes to the languages to the language

127
00:06:11,340 --> 00:06:14,460
and also make them more reliable and

128
00:06:14,460 --> 00:06:17,190
more stable but mostly make things

129
00:06:17,190 --> 00:06:24,480
faster yes so how we're going to make

130
00:06:24,480 --> 00:06:26,640
things faster I'll get back to that

131
00:06:26,640 --> 00:06:30,330
later what are we going to do in 2017

132
00:06:30,330 --> 00:06:32,610
we're actually going to work towards 6d

133
00:06:32,610 --> 00:06:37,410
and this is like get what a D sense what

134
00:06:37,410 --> 00:06:41,770
D follow something

135
00:06:41,770 --> 00:06:46,449
d it's some kind of fist Indian fest or

136
00:06:46,449 --> 00:06:50,169
something yeah okay Diwali okay there

137
00:06:50,169 --> 00:06:51,340
you go

138
00:06:51,340 --> 00:06:53,889
we're still going to be talking amongst

139
00:06:53,889 --> 00:06:55,960
mostly about making things faster they

140
00:06:55,960 --> 00:06:57,610
actually going to add new features that

141
00:06:57,610 --> 00:06:59,620
you actually have to opt-in by saying

142
00:06:59,620 --> 00:07:03,190
use fee 6d and before we have a fee 6d

143
00:07:03,190 --> 00:07:07,720
we actually have a fee 60 preview but

144
00:07:07,720 --> 00:07:11,169
you actually can mix pre compiled files

145
00:07:11,169 --> 00:07:13,539
from 6 C and 60 without any problem

146
00:07:13,539 --> 00:07:15,220
because each compilation unit has its

147
00:07:15,220 --> 00:07:19,270
own level and you can actually call

148
00:07:19,270 --> 00:07:23,800
codes from different levels so the the

149
00:07:23,800 --> 00:07:25,870
version of the language is basically

150
00:07:25,870 --> 00:07:28,479
depending on the compilation unit and

151
00:07:28,479 --> 00:07:31,030
the pre-cum doesn't depend on that so

152
00:07:31,030 --> 00:07:33,070
what are the strategies that we have for

153
00:07:33,070 --> 00:07:35,169
making things faster we actually have

154
00:07:35,169 --> 00:07:38,860
seven strategies not six we have static

155
00:07:38,860 --> 00:07:42,880
optimizations we have pre compilation we

156
00:07:42,880 --> 00:07:47,830
have specialization this is not a

157
00:07:47,830 --> 00:07:54,720
spelling error we have cheating we have

158
00:07:54,720 --> 00:07:58,630
doing less for the same result we have

159
00:07:58,630 --> 00:08:01,270
better algorithms and we have manual

160
00:08:01,270 --> 00:08:03,930
optimizations

161
00:08:06,140 --> 00:08:10,100
I try to make sense of a lot of the

162
00:08:10,100 --> 00:08:13,700
stuff that that goes on but keeping

163
00:08:13,700 --> 00:08:15,170
track of all of the developments in all

164
00:08:15,170 --> 00:08:17,150
of the system and all of the repos is

165
00:08:17,150 --> 00:08:21,710
pretty hard especially if this it's like

166
00:08:21,710 --> 00:08:24,560
very about jetting and and stuff like

167
00:08:24,560 --> 00:08:26,750
that it's it's in the HP Nouveau fax a

168
00:08:26,750 --> 00:08:30,910
category this is above my pay rate I I

169
00:08:30,910 --> 00:08:34,100
sort of like like I how I understand

170
00:08:34,100 --> 00:08:37,039
cars I know there's a either an

171
00:08:37,039 --> 00:08:38,600
electrical or an internal combustion

172
00:08:38,600 --> 00:08:43,580
engine in it and the stuff and okay and

173
00:08:43,580 --> 00:08:45,560
so all errors and misinformation are

174
00:08:45,560 --> 00:08:48,680
completely my fault but if you really

175
00:08:48,680 --> 00:08:50,840
have questions in that area you should

176
00:08:50,840 --> 00:08:53,930
basically go on the IRC channel on

177
00:08:53,930 --> 00:08:56,450
freenode the six channel or the more vm

178
00:08:56,450 --> 00:08:57,950
channel if you're really into the more

179
00:08:57,950 --> 00:09:00,160
vm stuff and ask a question there

180
00:09:00,160 --> 00:09:02,420
there'll be people that can answer you

181
00:09:02,420 --> 00:09:04,430
so and if you're one of those people

182
00:09:04,430 --> 00:09:06,530
here and you see the I'm doing something

183
00:09:06,530 --> 00:09:08,030
wrong please tell me so I can actually

184
00:09:08,030 --> 00:09:09,590
fix this lights for the next time I give

185
00:09:09,590 --> 00:09:13,610
this presentation so static

186
00:09:13,610 --> 00:09:17,260
optimizations what it basically does is

187
00:09:17,260 --> 00:09:21,710
after the your program has been parsed

188
00:09:21,710 --> 00:09:23,720
and it has created an internal

189
00:09:23,720 --> 00:09:25,520
representation called an abstract syntax

190
00:09:25,520 --> 00:09:28,610
tree it actually goes over the abstracts

191
00:09:28,610 --> 00:09:30,560
industry and basically find stuff that

192
00:09:30,560 --> 00:09:34,910
it can do and deceptor synthesis is a

193
00:09:34,910 --> 00:09:36,770
result of both the the grammar and the

194
00:09:36,770 --> 00:09:39,189
actions

195
00:09:41,290 --> 00:09:42,880
somebody gave him talk about it this

196
00:09:42,880 --> 00:09:44,140
morning about grandmas and actions

197
00:09:44,140 --> 00:09:46,600
anyway I am must have not paid attention

198
00:09:46,600 --> 00:09:50,230
too much sorry but this is basically the

199
00:09:50,230 --> 00:09:52,000
oldest type of optimization that we've

200
00:09:52,000 --> 00:09:54,420
done in ruku no this is basically from

201
00:09:54,420 --> 00:09:57,250
way in the beginning making making

202
00:09:57,250 --> 00:10:01,060
things faster by looking at the the ASDs

203
00:10:01,060 --> 00:10:04,600
of course this is very hard work because

204
00:10:04,600 --> 00:10:08,470
it's ASDs it's not something you

205
00:10:08,470 --> 00:10:10,840
recognize it immediately anymore so it's

206
00:10:10,840 --> 00:10:13,990
basically a lot of stuff and it's if you

207
00:10:13,990 --> 00:10:16,120
talk about right only optimizations this

208
00:10:16,120 --> 00:10:18,190
is this is one of those areas there's

209
00:10:18,190 --> 00:10:20,230
only very few people now that actually

210
00:10:20,230 --> 00:10:21,700
know what's going on there and if

211
00:10:21,700 --> 00:10:25,330
something breaks there we're we have a

212
00:10:25,330 --> 00:10:28,750
problem so we actually tried to take

213
00:10:28,750 --> 00:10:30,340
things out of the static optimization

214
00:10:30,340 --> 00:10:33,090
basically take it into the newer stuff

215
00:10:33,090 --> 00:10:35,860
so it's actually not really in active

216
00:10:35,860 --> 00:10:38,110
development anymore but to give you an

217
00:10:38,110 --> 00:10:43,300
example of this this is an example of

218
00:10:43,300 --> 00:10:45,160
doing something a thousand times in pro

219
00:10:45,160 --> 00:10:48,550
six what it does it basically removes

220
00:10:48,550 --> 00:10:53,710
the range object it actually binds the

221
00:10:53,710 --> 00:10:57,340
dollar underscore to a native int with

222
00:10:57,340 --> 00:11:00,600
the value of minus one

223
00:11:00,820 --> 00:11:03,370
and then it turns to four into a while

224
00:11:03,370 --> 00:11:06,340
loop while pre-incrementing dollar and

225
00:11:06,340 --> 00:11:11,980
the score until it hits a thousand so we

226
00:11:11,980 --> 00:11:14,170
have no iterator overhead we have no

227
00:11:14,170 --> 00:11:15,970
unnecessary objects this is basic really

228
00:11:15,970 --> 00:11:19,660
fast and this actually this also jits

229
00:11:19,660 --> 00:11:23,020
very well into machine code and this the

230
00:11:23,020 --> 00:11:25,390
anti loop example of this is actually

231
00:11:25,390 --> 00:11:28,870
faster than pro/5 it's not very useful

232
00:11:28,870 --> 00:11:34,030
but they got another example of static

233
00:11:34,030 --> 00:11:35,890
optimizations and that is still very

234
00:11:35,890 --> 00:11:37,990
useful and project we have something

235
00:11:37,990 --> 00:11:41,860
called multis so we have an asset

236
00:11:41,860 --> 00:11:45,220
routine called foo we have a prototype

237
00:11:45,220 --> 00:11:46,080
for it

238
00:11:46,080 --> 00:11:49,810
proto which is actually a dispatcher now

239
00:11:49,810 --> 00:11:51,850
normally you don't have to do actually

240
00:11:51,850 --> 00:11:53,860
specify that I'm just specifying it here

241
00:11:53,860 --> 00:11:55,390
so you can actually see that there is

242
00:11:55,390 --> 00:11:58,050
such a thing

