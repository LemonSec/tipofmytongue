1
00:00:15,779 --> 00:00:18,430
hello everyone thank you for joining me

2
00:00:18,430 --> 00:00:22,869
today my name is Michael Jackson and I'd

3
00:00:22,869 --> 00:00:26,050
like to talk about detecting media file

4
00:00:26,050 --> 00:00:30,730
formats today with the tool entitled

5
00:00:30,730 --> 00:00:35,309
fraud so what's the idea

6
00:00:35,309 --> 00:00:39,670
media file formats raw complex and more

7
00:00:39,670 --> 00:00:41,710
complex everyday media software

8
00:00:41,710 --> 00:00:43,269
developers had to deal with the

9
00:00:43,269 --> 00:00:46,120
multitude of different media file

10
00:00:46,120 --> 00:00:49,440
formats some of them are well documented

11
00:00:49,440 --> 00:00:54,129
but still pretty complex to process some

12
00:00:54,129 --> 00:00:57,280
of them are proprietary and undocumented

13
00:00:57,280 --> 00:01:00,249
and need to be reverse engineered it's

14
00:01:00,249 --> 00:01:03,960
even more complicated task and requires

15
00:01:03,960 --> 00:01:08,140
quite a few harder to jump for example

16
00:01:08,140 --> 00:01:11,500
one need to do the proper blackbox

17
00:01:11,500 --> 00:01:13,630
reverse engineer to be included into

18
00:01:13,630 --> 00:01:16,150
free and open-source project without

19
00:01:16,150 --> 00:01:20,800
major legal problems one need to do lots

20
00:01:20,800 --> 00:01:25,420
of testing making some hypothesis or

21
00:01:25,420 --> 00:01:28,090
proving them right or wrong and doing

22
00:01:28,090 --> 00:01:32,350
some decisions making some proprietary

23
00:01:32,350 --> 00:01:35,920
format step by step exploring it and

24
00:01:35,920 --> 00:01:40,060
doing some kind of description of

25
00:01:40,060 --> 00:01:44,830
specification of such problem basically

26
00:01:44,830 --> 00:01:49,180
the nation that such a developer must or

27
00:01:49,180 --> 00:01:54,190
take is gone from white representation

28
00:01:54,190 --> 00:01:57,430
of file format in a string loading into

29
00:01:57,430 --> 00:02:00,460
memory and sometimes going back from

30
00:02:00,460 --> 00:02:04,090
memory to string that is we have some

31
00:02:04,090 --> 00:02:07,000
kind of a stream that needs to be

32
00:02:07,000 --> 00:02:10,568
decided until some objects laid out in

33
00:02:10,568 --> 00:02:12,100
memory usually in some

34
00:02:12,100 --> 00:02:18,540
of tree or a graph of holsters typical

35
00:02:18,540 --> 00:02:21,330
development workflow for such a process

36
00:02:21,330 --> 00:02:24,940
involves writing some parsing code with

37
00:02:24,940 --> 00:02:28,390
certain programming language then you

38
00:02:28,390 --> 00:02:31,590
write some expert debugging code to

39
00:02:31,590 --> 00:02:35,280
ensure that it actually works because

40
00:02:35,280 --> 00:02:38,260
you need to somehow prove that it works

41
00:02:38,260 --> 00:02:40,900
you are the dump it to the screen check

42
00:02:40,900 --> 00:02:43,810
some assertions run with it with a

43
00:02:43,810 --> 00:02:46,960
debugger or something like that then you

44
00:02:46,960 --> 00:02:49,450
just basically debug it till you drop

45
00:02:49,450 --> 00:02:55,780
because parsing binary formats is well

46
00:02:55,780 --> 00:02:58,540
not exactly Trillo tests there were

47
00:02:58,540 --> 00:02:59,860
quite a few pitfalls

48
00:02:59,860 --> 00:03:04,450
turtlecom like going over some boundary

49
00:03:04,450 --> 00:03:07,840
inside some soft structure dealing with

50
00:03:07,840 --> 00:03:10,120
the engine is dealing with byte

51
00:03:10,120 --> 00:03:14,590
alignment dealing with a few other

52
00:03:14,590 --> 00:03:18,250
things like assertions checks very

53
00:03:18,250 --> 00:03:21,280
specific formats some special cases

54
00:03:21,280 --> 00:03:24,840
conditional reading for writing etc etc

55
00:03:24,840 --> 00:03:30,220
as soon as you finish such a big task

56
00:03:30,220 --> 00:03:33,100
you get some sort of parsing library

57
00:03:33,100 --> 00:03:35,770
that lots of objects from stream into

58
00:03:35,770 --> 00:03:40,240
memory but what then if you want to

59
00:03:40,240 --> 00:03:42,000
support some other programming language

60
00:03:42,000 --> 00:03:44,950
you just basically need to redo the

61
00:03:44,950 --> 00:03:48,340
whole whole process from the start doing

62
00:03:48,340 --> 00:03:50,710
basically the same code in some other

63
00:03:50,710 --> 00:03:54,330
programming language comparatively

64
00:03:54,660 --> 00:03:57,040
actually almost every media form of

65
00:03:57,040 --> 00:03:59,890
library Arvind comfort has these dumping

66
00:03:59,890 --> 00:04:03,910
tools on this slide I've listed some of

67
00:04:03,910 --> 00:04:10,590
them then there they're not just for

68
00:04:10,980 --> 00:04:13,840
random reason they're there for reason

69
00:04:13,840 --> 00:04:16,180
they are needed by developers of these

70
00:04:16,180 --> 00:04:19,810
two libraries two debugger there too so

71
00:04:19,810 --> 00:04:24,210
to see if they're real work

72
00:04:26,789 --> 00:04:29,650
needless to say that Herson file format

73
00:04:29,650 --> 00:04:31,720
libraries can be really devastating like

74
00:04:31,720 --> 00:04:36,240
dangerous almost every such an error

75
00:04:36,240 --> 00:04:40,300
such as buffer overflow such as reading

76
00:04:40,300 --> 00:04:43,080
beyond some part of structure

77
00:04:43,080 --> 00:04:45,909
interpreting something wrongly because

78
00:04:45,909 --> 00:04:49,060
of human errors in writing the code etc

79
00:04:49,060 --> 00:04:53,139
etc I always almost always remotely

80
00:04:53,139 --> 00:04:55,330
exploitable their frequently provide

81
00:04:55,330 --> 00:04:57,969
arbitrary code execution especially if

82
00:04:57,969 --> 00:05:00,789
we are talking about buffer overflows in

83
00:05:00,789 --> 00:05:04,319
libraries written in languages such as C

84
00:05:04,319 --> 00:05:08,020
they leak information they usually can

85
00:05:08,020 --> 00:05:11,440
lead to denial service errors for

86
00:05:11,440 --> 00:05:15,909
example in belief in Jesus in 2010 there

87
00:05:15,909 --> 00:05:19,719
were 22 vulnerabilities and quite a few

88
00:05:19,719 --> 00:05:24,340
of them are very dangerous in a lib tag

89
00:05:24,340 --> 00:05:28,020
for example there are 4 lunar abilities

90
00:05:28,020 --> 00:05:33,340
but there's too dangerous as well.if

91
00:05:33,340 --> 00:05:36,990
will revert to the start and see what

92
00:05:36,990 --> 00:05:40,509
format file format specifications exist

93
00:05:40,509 --> 00:05:42,909
we'll discover that there is no single

94
00:05:42,909 --> 00:05:47,800
Universal exit statement actually it

95
00:05:47,800 --> 00:05:50,379
will take a look at the documents

96
00:05:50,379 --> 00:05:54,779
provided provided by file format authors

97
00:05:54,779 --> 00:05:58,029
there are quite a few things invented to

98
00:05:58,029 --> 00:06:00,699
describe a file format such as for

99
00:06:00,699 --> 00:06:02,979
example C structures as we see here with

100
00:06:02,979 --> 00:06:08,620
elf headers such as interactive tables

101
00:06:08,620 --> 00:06:12,129
as we see here with Network tables

102
00:06:12,129 --> 00:06:15,879
protocols such as even more intricate

103
00:06:15,879 --> 00:06:20,080
tables as we see here with some random

104
00:06:20,080 --> 00:06:23,229
page describing Microsoft Word document

105
00:06:23,229 --> 00:06:27,669
format that Knapp some bytes dates and

106
00:06:27,669 --> 00:06:31,198
try to explain values

107
00:06:31,960 --> 00:06:35,289
network protocol engineers have

108
00:06:35,289 --> 00:06:38,199
something better to rescue they've got

109
00:06:38,199 --> 00:06:41,320
Wireshark that is the universal accepted

110
00:06:41,320 --> 00:06:46,660
to be the tool of trade that allows to

111
00:06:46,660 --> 00:06:49,150
detect the packets and see what's inside

112
00:06:49,150 --> 00:06:53,289
in some kind of tree format basically

113
00:06:53,289 --> 00:06:56,889
have the dump you can point at any byte

114
00:06:56,889 --> 00:07:00,039
on the dump and see what well is in

115
00:07:00,039 --> 00:07:03,460
protocol in the packets it's corresponds

116
00:07:03,460 --> 00:07:08,470
to and vice versa but what about the

117
00:07:08,470 --> 00:07:13,660
same stuff for media files it's a bit

118
00:07:13,660 --> 00:07:17,789
complicated there are quite a few

119
00:07:17,789 --> 00:07:19,919
proprietary tools available such as

120
00:07:19,919 --> 00:07:23,680
wonder one editor or hex inator Sinha

121
00:07:23,680 --> 00:07:26,590
lies it as some of you may be familiar

122
00:07:26,590 --> 00:07:32,609
with but generally there is no

123
00:07:33,509 --> 00:07:39,820
universally accepted or at least a tool

124
00:07:39,820 --> 00:07:43,050
that supports enough popular formats to

125
00:07:43,050 --> 00:07:49,090
dissect and to build upon well so

126
00:07:49,090 --> 00:07:52,720
basically we've tried to fulfill this

127
00:07:52,720 --> 00:07:57,099
hole and go actually one step ahead of

128
00:07:57,099 --> 00:08:00,699
it so I'd like to present a chi touch

129
00:08:00,699 --> 00:08:04,419
drug project which is declarative file

130
00:08:04,419 --> 00:08:08,650
format specification language all the

131
00:08:08,650 --> 00:08:10,300
words in this phrase are actually

132
00:08:10,300 --> 00:08:12,940
meaningful the emphasis is on the

133
00:08:12,940 --> 00:08:15,970
declarative it means that we do not

134
00:08:15,970 --> 00:08:19,570
actually specify how to read the format

135
00:08:19,570 --> 00:08:22,539
but we specify what is inside the format

136
00:08:22,539 --> 00:08:27,729
and it's harder to implement in some

137
00:08:27,729 --> 00:08:30,159
cases but it gives us quite a few

138
00:08:30,159 --> 00:08:33,909
advantages I'd like to show a bit

139
00:08:33,909 --> 00:08:37,779
further in the presentation we can

140
00:08:37,779 --> 00:08:42,458
compile our case why file that we've set

141
00:08:42,458 --> 00:08:43,270
up for

142
00:08:43,270 --> 00:08:45,970
with the file format specification into

143
00:08:45,970 --> 00:08:49,839
rhythm 8 Persis libraries in quite a few

144
00:08:49,839 --> 00:08:51,700
target programming languages that I'll

145
00:08:51,700 --> 00:08:56,890
demonstrate further and quite as well we

146
00:08:56,890 --> 00:09:00,370
can visualize down from debauch over

147
00:09:00,370 --> 00:09:03,180
this file format specifications using

148
00:09:03,180 --> 00:09:05,980
several tools that were built around the

149
00:09:05,980 --> 00:09:08,640
kite - frog project such as

150
00:09:08,640 --> 00:09:12,910
visualization tools such as web ID the

151
00:09:12,910 --> 00:09:16,450
Tao demonstrate further as well case why

152
00:09:16,450 --> 00:09:19,270
format is yama based and that's actually

153
00:09:19,270 --> 00:09:21,610
a good thing because it's very easy to

154
00:09:21,610 --> 00:09:24,209
you write your own tools for example

155
00:09:24,209 --> 00:09:27,910
it's quite a snap to write a tool that

156
00:09:27,910 --> 00:09:31,690
would embed one case why file into

157
00:09:31,690 --> 00:09:33,839
another case why file it's generally a

158
00:09:33,839 --> 00:09:37,180
matter of writing a script in five or

159
00:09:37,180 --> 00:09:41,440
ten reliance and it's quite easy it's

160
00:09:41,440 --> 00:09:43,779
black but not least it's freely and

161
00:09:43,779 --> 00:09:48,579
Liber we use gplv3 for cut the compiler

162
00:09:48,579 --> 00:09:53,440
and actually generated code uses some

163
00:09:53,440 --> 00:09:55,720
runtime libraries that we supply as well

164
00:09:55,720 --> 00:10:00,190
and they are MIT or a pashtun licensed

165
00:10:00,190 --> 00:10:06,100
so even if the compilers GPL it's

166
00:10:06,100 --> 00:10:09,010
possible to use the Proceedings of the

167
00:10:09,010 --> 00:10:12,220
compiler ring proprietary products as

168
00:10:12,220 --> 00:10:16,480
well we support eight target languages

169
00:10:16,480 --> 00:10:19,000
right now it's it was bloody shop Java

170
00:10:19,000 --> 00:10:22,829
JavaScript from PHP Python and Ruby as a

171
00:10:22,829 --> 00:10:27,040
bonus we support output to brettly's our

172
00:10:27,040 --> 00:10:29,320
demonstrated further it's quite

173
00:10:29,320 --> 00:10:32,459
interesting site project as well as

174
00:10:32,459 --> 00:10:35,980
experimental features right now we are

175
00:10:35,980 --> 00:10:38,790
building swiss support we're developing

176
00:10:38,790 --> 00:10:42,370
support for exporting case white passes

177
00:10:42,370 --> 00:10:45,520
were shardis setters to be able to load

178
00:10:45,520 --> 00:10:49,709
the same declare formats into the web

179
00:10:49,709 --> 00:10:54,490
interface and see there and some quite a

180
00:10:54,490 --> 00:10:56,100
few other

181
00:10:56,100 --> 00:10:59,310
probably interesting target performance

182
00:10:59,310 --> 00:11:04,870
so how does it look the natural API

183
00:11:04,870 --> 00:11:06,970
generated by kite a struct looks

184
00:11:06,970 --> 00:11:08,560
something like that

185
00:11:08,560 --> 00:11:12,250
here we have demonstration of gif file

186
00:11:12,250 --> 00:11:19,180
give file although that generally the

187
00:11:19,180 --> 00:11:21,640
kite a struct file declares the tree of

188
00:11:21,640 --> 00:11:24,670
objects here for example we have the

189
00:11:24,670 --> 00:11:27,460
header the logical screen descriptor the

190
00:11:27,460 --> 00:11:33,160
global color table etc etc and generally

191
00:11:33,160 --> 00:11:36,180
it goes down to traversing this tree of

192
00:11:36,180 --> 00:11:42,160
projects from some start that for

193
00:11:42,160 --> 00:11:45,160
example this code in Java starts with

194
00:11:45,160 --> 00:11:52,810
gif dot from file that loads some that

195
00:11:52,810 --> 00:11:55,720
purse some gif data from the file and

196
00:11:55,720 --> 00:11:59,620
then you just do this file dot something

197
00:11:59,620 --> 00:12:01,600
dot something do something and extract

198
00:12:01,600 --> 00:12:04,420
the data right away for example this is

199
00:12:04,420 --> 00:12:09,610
one liner that shows the screen width

200
00:12:09,610 --> 00:12:13,030
and height this which is actually their

201
00:12:13,030 --> 00:12:16,420
dimensions with visible fragment of gif

202
00:12:16,420 --> 00:12:21,660
image right away in one line of code

203
00:12:21,780 --> 00:12:27,100
this is our web ID probably it's much

204
00:12:27,100 --> 00:12:30,270
better to just demonstrate it right away

205
00:12:30,270 --> 00:12:34,870
this is probably now the main working

206
00:12:34,870 --> 00:12:40,330
place of a developer that wants to get

207
00:12:40,330 --> 00:12:44,860
it has his or her hands dirty with kyta

208
00:12:44,860 --> 00:12:48,070
struct here we have simultaneously an

209
00:12:48,070 --> 00:12:55,360
editor to see and edit the case why file

210
00:12:55,360 --> 00:12:59,080
its own upper left corner in upper right

211
00:12:59,080 --> 00:13:02,950
corner there is a hex dump over some

212
00:13:02,950 --> 00:13:06,310
loaded file here we have a Microsoft avi

213
00:13:06,310 --> 00:13:09,580
file and it's corresponding from

214
00:13:09,580 --> 00:13:14,320
description in as you may have seen in

215
00:13:14,320 --> 00:13:18,250
such editors like 101 editor or hexan 8

216
00:13:18,250 --> 00:13:20,830
or other proprietor editors is possible

217
00:13:20,830 --> 00:13:25,030
to select any bike in the stream and go

218
00:13:25,030 --> 00:13:27,850
exactly to some value in their object

219
00:13:27,850 --> 00:13:33,460
tree in lower bottom corner to see what

220
00:13:33,460 --> 00:13:36,100
this byte corresponds to and as well one

221
00:13:36,100 --> 00:13:39,880
can traverse open and close or before

222
00:13:39,880 --> 00:13:43,290
objects in the object tree as well and

223
00:13:43,290 --> 00:13:47,890
see how it looks like it's further

224
00:13:47,890 --> 00:13:53,020
interactive changing a single symbol in

225
00:13:53,020 --> 00:13:57,330
the case white code recompile everything

226
00:13:57,330 --> 00:14:02,430
conservatively and tries to rare

227
00:14:02,430 --> 00:14:08,020
implement rate rate reports the file in

228
00:14:08,020 --> 00:14:10,870
any way that you've just specified so

229
00:14:10,870 --> 00:14:13,360
for example if you add some lines of

230
00:14:13,360 --> 00:14:17,560
code that add a percent of some new

231
00:14:17,560 --> 00:14:20,050
field it would just appear right away

232
00:14:20,050 --> 00:14:24,220
you don't need to basically just doing

233
00:14:24,220 --> 00:14:30,840
anything for those who want some more

234
00:14:30,840 --> 00:14:36,010
console hardcore style parsing to the

235
00:14:36,010 --> 00:14:38,770
result so a console visualizer here we

236
00:14:38,770 --> 00:14:45,850
have the GPX file loaded into it it

237
00:14:45,850 --> 00:14:49,240
doesn't look just as flash as the web

238
00:14:49,240 --> 00:14:52,270
one but it works just as well

239
00:14:52,270 --> 00:14:55,390
it doesn't feature any separate editor

240
00:14:55,390 --> 00:14:58,000
of course you're expected to have your

241
00:14:58,000 --> 00:15:00,400
own editor on console or whatever you

242
00:15:00,400 --> 00:15:03,280
want to using some other window so it

243
00:15:03,280 --> 00:15:08,260
focuses just on visualization you have

244
00:15:08,260 --> 00:15:10,150
the same tree you have the same binary

245
00:15:10,150 --> 00:15:13,840
jump you can't reverse it and see if the

246
00:15:13,840 --> 00:15:15,960
file specification you've just answered

247
00:15:15,960 --> 00:15:20,430
matches what you expect to see or not

248
00:15:20,540 --> 00:15:25,910
this is how our case why files look like

249
00:15:25,910 --> 00:15:34,710
basically it's llamo it allows us to set

250
00:15:34,710 --> 00:15:40,140
up some fields some field types and that

251
00:15:40,140 --> 00:15:42,570
is important because it's declarative

252
00:15:42,570 --> 00:15:45,470
and not imperative on the Left we see

253
00:15:45,470 --> 00:15:48,750
declarative specification on the right

254
00:15:48,750 --> 00:15:53,339
we see what it compiles usually to into

255
00:15:53,339 --> 00:15:56,339
some kind of four imperative code note

256
00:15:56,339 --> 00:16:00,210
that we do not have things like while

257
00:16:00,210 --> 00:16:03,029
loops we do not have things like direct

258
00:16:03,029 --> 00:16:09,420
ifs any conditional controls any jumps

259
00:16:09,420 --> 00:16:13,250
any basically any code flow that is

260
00:16:13,250 --> 00:16:15,930
imminent in imperative implementations

261
00:16:15,930 --> 00:16:19,920
we just use we just described the file

262
00:16:19,920 --> 00:16:22,230
structures if there is some repetitions

263
00:16:22,230 --> 00:16:24,540
we enter it with repetitions if there

264
00:16:24,540 --> 00:16:26,760
are some conditional parsing to enter is

265
00:16:26,760 --> 00:16:31,440
conditional parsing and it brings up

266
00:16:31,440 --> 00:16:34,740
quite a few possibilities interesting

267
00:16:34,740 --> 00:16:36,480
interesting possibilities that are

268
00:16:36,480 --> 00:16:41,670
possible we have quite a few built-in

269
00:16:41,670 --> 00:16:44,370
data types such as integers floats on a

270
00:16:44,370 --> 00:16:46,350
line between digital's and big fields

271
00:16:46,350 --> 00:16:49,709
strings robot arrays announced and of

272
00:16:49,709 --> 00:16:52,440
course we allow to define user-defined

273
00:16:52,440 --> 00:16:57,240
data types we have sequential parsing

274
00:16:57,240 --> 00:17:00,600
parsing those one by one in sequence we

275
00:17:00,600 --> 00:17:02,580
have out of order parsing something

276
00:17:02,580 --> 00:17:06,540
called instances so you can seek in a

277
00:17:06,540 --> 00:17:13,160
file actually to do some parsing of

278
00:17:13,160 --> 00:17:16,439
other parts of fire by some index or

279
00:17:16,439 --> 00:17:19,619
offset we have calculated attributes to

280
00:17:19,619 --> 00:17:24,959
ease representation of something that

281
00:17:24,959 --> 00:17:27,980
we've got from the file in some more

282
00:17:27,980 --> 00:17:30,910
popular form

283
00:17:30,910 --> 00:17:33,250
we got checking for magic signatures

284
00:17:33,250 --> 00:17:35,620
such fixing content account or for

285
00:17:35,620 --> 00:17:38,230
example headers have conditional parsing

286
00:17:38,230 --> 00:17:41,050
we have type switching on a condition

287
00:17:41,050 --> 00:17:44,320
something like switch we have

288
00:17:44,320 --> 00:17:46,330
repetitions until the end of stream

289
00:17:46,330 --> 00:17:48,490
repetitions and predefined number of

290
00:17:48,490 --> 00:17:51,160
iterations or until some conditions in

291
00:17:51,160 --> 00:17:54,910
that we have powerful expression

292
00:17:54,910 --> 00:17:56,320
language that could be used almost

293
00:17:56,320 --> 00:18:00,250
everywhere and that's a good thing

294
00:18:00,250 --> 00:18:07,320
because it actually compiles into direct

295
00:18:07,320 --> 00:18:10,890
expression code in some other languages

296
00:18:10,890 --> 00:18:15,970
for example this one shows how there we

297
00:18:15,970 --> 00:18:19,900
can parse the attribute named foo lam

298
00:18:19,900 --> 00:18:25,000
that allows us to specify unsigned

299
00:18:25,000 --> 00:18:29,110
integer for bytes long in the first

300
00:18:29,110 --> 00:18:31,809
place and then we parts as many elements

301
00:18:31,809 --> 00:18:35,650
as we need calculating the number of

302
00:18:35,650 --> 00:18:38,650
elements as full n minus four divided by

303
00:18:38,650 --> 00:18:45,940
six so it is how it compounds J C++ this

304
00:18:45,940 --> 00:18:48,429
is how it compares to Python you can see

305
00:18:48,429 --> 00:18:52,240
that the cord is quite different and see

306
00:18:52,240 --> 00:18:54,520
it's count compares to JavaScript

307
00:18:54,520 --> 00:18:58,330
another difference is that for example

308
00:18:58,330 --> 00:19:00,750
JavaScript doesn't have the integer

309
00:19:00,750 --> 00:19:04,360
division so we invent it with mustard

310
00:19:04,360 --> 00:19:07,480
for and that's another one that I'd

311
00:19:07,480 --> 00:19:10,240
wanted to demonstrate interesting stuff

312
00:19:10,240 --> 00:19:13,050
about the graph is visualization

313
00:19:13,050 --> 00:19:16,240
basically we compile stuff to breathless

314
00:19:16,240 --> 00:19:20,890
and this is what we've got

315
00:19:20,890 --> 00:19:23,980
it's a human readable diagram that one

316
00:19:23,980 --> 00:19:27,010
can pass to this colleagues one can pass

317
00:19:27,010 --> 00:19:31,630
to other people to just take a look at

318
00:19:31,630 --> 00:19:33,730
the format and implement it for example

319
00:19:33,730 --> 00:19:37,510
in some other programs we've got ground

320
00:19:37,510 --> 00:19:40,660
repository of formats including tones of

321
00:19:40,660 --> 00:19:43,779
formats for light now

322
00:19:43,779 --> 00:19:47,200
it's quite interesting you can find it

323
00:19:47,200 --> 00:19:50,440
at our github page and see for yourself

324
00:19:50,440 --> 00:19:54,399
if anything interested feel there are

325
00:19:54,399 --> 00:19:57,789
quite a few image file formats video

326
00:19:57,789 --> 00:20:00,700
file formats audio file formats archives

327
00:20:00,700 --> 00:20:03,070
documents executables file systems etc

328
00:20:03,070 --> 00:20:06,870
so thanks for your attention

329
00:20:06,870 --> 00:20:41,889
like to see if any questions arises the

330
00:20:41,889 --> 00:20:45,970
question was about handling incorrect

331
00:20:45,970 --> 00:20:50,610
values in complex expression language

332
00:20:50,610 --> 00:20:54,039
expressions so basically there is no

333
00:20:54,039 --> 00:20:56,799
internal checking in construct it just

334
00:20:56,799 --> 00:21:00,610
can pass the expression as I show you

335
00:21:00,610 --> 00:21:04,029
and in runtime it will probably arise

336
00:21:04,029 --> 00:21:07,509
some sort of exception or error and this

337
00:21:07,509 --> 00:21:09,580
would be specific to a particular target

338
00:21:09,580 --> 00:21:14,730
language that you compile this code to

339
00:21:15,450 --> 00:21:18,450
please

340
00:21:21,340 --> 00:21:24,399
[Music]

341
00:21:46,540 --> 00:21:51,140
yes since yeah sorry the question was

342
00:21:51,140 --> 00:21:53,450
about parsing bitstreams with more

343
00:21:53,450 --> 00:22:00,350
complex context like - codes etc so yeah

344
00:22:00,350 --> 00:22:05,600
since working no one Oh about six we

345
00:22:05,600 --> 00:22:09,800
have support for reading bit strings

346
00:22:09,800 --> 00:22:13,400
it's slowly growing probably it's not

347
00:22:13,400 --> 00:22:16,670
where optimal two parts difference per

348
00:22:16,670 --> 00:22:21,620
se to fulfill simple operations like

349
00:22:21,620 --> 00:22:25,610
unpacking something or on compressing

350
00:22:25,610 --> 00:22:28,940
something probably it's more efficient

351
00:22:28,940 --> 00:22:31,730
to use some special some special

352
00:22:31,730 --> 00:22:36,500
processing onto the whole byte string

353
00:22:36,500 --> 00:22:41,090
here but it also can be done dancing any

354
00:22:41,090 --> 00:22:44,860
major problems here

355
00:22:57,290 --> 00:23:22,260
could you repeat it a bit aloud right

356
00:23:22,260 --> 00:23:28,100
now the idea repeating a question yeah

357
00:23:28,610 --> 00:23:33,270
the question was about reading something

358
00:23:33,270 --> 00:23:35,910
from a stream not from the whole file

359
00:23:35,910 --> 00:23:41,790
from the disk right now the API allows

360
00:23:41,790 --> 00:23:45,810
to basically do reading parsing from two

361
00:23:45,810 --> 00:23:48,180
sources from a file on disk or from

362
00:23:48,180 --> 00:23:50,700
arbitrary arraign memory if you can

363
00:23:50,700 --> 00:23:53,010
organize the person in some way that

364
00:23:53,010 --> 00:23:57,330
would be for example chunked based that

365
00:23:57,330 --> 00:24:02,550
would parse one chunk and then stop it's

366
00:24:02,550 --> 00:24:07,350
no problem to go with this child a

367
00:24:07,350 --> 00:24:10,740
string that you would somehow buffer

368
00:24:10,740 --> 00:24:13,950
memory and add to this buffer again and

369
00:24:13,950 --> 00:24:17,100
again and recall the parts so I guess

370
00:24:17,100 --> 00:24:20,149
that would be

371
00:24:27,440 --> 00:24:30,440
okay

372
00:24:38,409 --> 00:24:42,049
there are several possible question was

373
00:24:42,049 --> 00:24:44,959
about adding connotations to Yahoo file

374
00:24:44,959 --> 00:24:47,419
to have more human readable

375
00:24:47,419 --> 00:24:49,969
representation of whatever's going on

376
00:24:49,969 --> 00:24:51,499
there there are quite a few

377
00:24:51,499 --> 00:24:54,019
possibilities to do so we are allowed to

378
00:24:54,019 --> 00:24:58,729
add some annotations to Phil's to be

379
00:24:58,729 --> 00:25:01,879
parsed as offerings into the target code

380
00:25:01,879 --> 00:25:04,580
so for example if you load it into IDE

381
00:25:04,580 --> 00:25:09,529
you just see whatever they come in for

382
00:25:09,529 --> 00:25:14,869
the field are we allow in web ID there

383
00:25:14,869 --> 00:25:17,570
are several syntaxes that allows you to

384
00:25:17,570 --> 00:25:20,179
mark up some formatting for the

385
00:25:20,179 --> 00:25:22,249
representation for example choosing the

386
00:25:22,249 --> 00:25:25,039
hex representation by no representation

387
00:25:25,039 --> 00:25:27,529
of decimal representation that says four

388
00:25:27,529 --> 00:25:31,459
etc and last but not least you can do

389
00:25:31,459 --> 00:25:34,519
calculated values that allow you to

390
00:25:34,519 --> 00:25:37,549
represent something in more human

391
00:25:37,549 --> 00:25:43,669
readable way as well thanks the big

392
00:25:43,669 --> 00:25:45,950
flags are parsed using the big person

393
00:25:45,950 --> 00:25:49,309
incentives usually and you usually get

394
00:25:49,309 --> 00:25:52,999
them as separate fields that you can

395
00:25:52,999 --> 00:25:56,059
basically touch in everywhere you won't

396
00:25:56,059 --> 00:25:58,389
want

