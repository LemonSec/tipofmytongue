1
00:00:05,700 --> 00:00:10,000
okay well thanks for showing up my name

2
00:00:10,000 --> 00:00:13,719
is Julio ensign and about a year ago I I

3
00:00:13,719 --> 00:00:15,820
sent an email to the new geeks

4
00:00:15,820 --> 00:00:18,190
development mailing list asking for what

5
00:00:18,190 --> 00:00:20,470
are somebody new a way for me to do an

6
00:00:20,470 --> 00:00:23,800
internship that was related to the geeks

7
00:00:23,800 --> 00:00:26,890
org new girl and I was lucky enough that

8
00:00:26,890 --> 00:00:32,320
pura Prince replied to me and I found a

9
00:00:32,320 --> 00:00:34,780
really interesting place at the UMC

10
00:00:34,780 --> 00:00:39,129
Utrecht and one of the things I worked

11
00:00:39,129 --> 00:00:41,589
on during my internship in the last

12
00:00:41,589 --> 00:00:43,510
week's of it was something called

13
00:00:43,510 --> 00:00:45,879
workflow management and to understand

14
00:00:45,879 --> 00:00:48,399
the concepts of workflow management that

15
00:00:48,399 --> 00:00:49,899
I'm going to try to address

16
00:00:49,899 --> 00:00:54,010
oh I yeah somebody signed me that I

17
00:00:54,010 --> 00:00:58,299
should talk louder so I'll try that yeah

18
00:00:58,299 --> 00:01:01,179
so what I'm gonna show is I've

19
00:01:01,179 --> 00:01:01,989
implemented

20
00:01:01,989 --> 00:01:06,370
a couple of record types on top of the

21
00:01:06,370 --> 00:01:08,649
new geek C's infrastructure for package

22
00:01:08,649 --> 00:01:13,670
management and hosting works

23
00:01:13,670 --> 00:01:18,680
ah and to understand what I'm trying to

24
00:01:18,680 --> 00:01:22,070
achieve is that I'm not working at an

25
00:01:22,070 --> 00:01:24,710
institute where we are doing a data

26
00:01:24,710 --> 00:01:28,549
analysis and so we have some some

27
00:01:28,549 --> 00:01:31,580
initial data set with the yellow node

28
00:01:31,580 --> 00:01:34,640
here and then through running programs

29
00:01:34,640 --> 00:01:36,799
on it we try to extract information from

30
00:01:36,799 --> 00:01:39,320
it filter the information or try to get

31
00:01:39,320 --> 00:01:43,369
useful research results from it and

32
00:01:43,369 --> 00:01:45,259
eventually we want some undeniable proof

33
00:01:45,259 --> 00:01:49,700
for our theorem or for whatever and if

34
00:01:49,700 --> 00:01:52,700
you look closer into the nodes labeled a

35
00:01:52,700 --> 00:01:56,060
to n we can see that these processes are

36
00:01:56,060 --> 00:01:58,789
can be really simple like a grep for

37
00:01:58,789 --> 00:02:02,330
some information out of the file or a

38
00:02:02,330 --> 00:02:05,539
little bit more advanced running in our

39
00:02:05,539 --> 00:02:08,149
scripts or some other foreign language -

40
00:02:08,149 --> 00:02:13,730
guile I know I know so what we're trying

41
00:02:13,730 --> 00:02:17,090
to do here is we're trying to make an

42
00:02:17,090 --> 00:02:21,019
easy way to to run these things either

43
00:02:21,019 --> 00:02:25,940
thoroughly or in parallel and what I'm

44
00:02:25,940 --> 00:02:28,430
trying to capture is a workflow which is

45
00:02:28,430 --> 00:02:31,489
for me it's just a set of processes that

46
00:02:31,489 --> 00:02:34,280
we should run to get from an initial

47
00:02:34,280 --> 00:02:37,220
data set to the undeniable proof and I

48
00:02:37,220 --> 00:02:42,680
am not including the data into the into

49
00:02:42,680 --> 00:02:44,840
the whole process but that's just

50
00:02:44,840 --> 00:02:48,470
something you put in and get up and

51
00:02:48,470 --> 00:02:52,760
actually you can if you look at real

52
00:02:52,760 --> 00:02:55,070
world situations it's more common that

53
00:02:55,070 --> 00:02:57,799
you don't get a serial process going

54
00:02:57,799 --> 00:03:02,000
from a to n all simple steps but more

55
00:03:02,000 --> 00:03:04,040
likely you can run a couple of things in

56
00:03:04,040 --> 00:03:09,579
parallel like you see from the node a -

57
00:03:09,579 --> 00:03:12,859
we can run three processes at the same

58
00:03:12,859 --> 00:03:16,310
time and at some other occasions you

59
00:03:16,310 --> 00:03:19,280
need to some process needs to wait for

60
00:03:19,280 --> 00:03:22,440
input from various other processes

61
00:03:22,440 --> 00:03:25,800
and at that point if you would do this

62
00:03:25,800 --> 00:03:29,040
with a shell script it could become

63
00:03:29,040 --> 00:03:33,150
pretty complex and it gets really

64
00:03:33,150 --> 00:03:35,640
interesting if if you can run things in

65
00:03:35,640 --> 00:03:37,530
parallel on multiple computers there's

66
00:03:37,530 --> 00:03:39,750
also something hard to do with with

67
00:03:39,750 --> 00:03:44,250
shell scripts I guess so what we have

68
00:03:44,250 --> 00:03:47,040
had at UMC Utrecht is we have multiple

69
00:03:47,040 --> 00:03:49,440
computers all connected to a single

70
00:03:49,440 --> 00:03:52,920
storage and this this storage is

71
00:03:52,920 --> 00:03:57,900
actually quite expensive so it's it's a

72
00:03:57,900 --> 00:04:00,390
two-step thing so we have storage that

73
00:04:00,390 --> 00:04:02,700
we can actively use that's connected to

74
00:04:02,700 --> 00:04:05,040
these compute nodes but we also have

75
00:04:05,040 --> 00:04:06,840
storage that's used for archival

76
00:04:06,840 --> 00:04:11,340
purposes and backups so that when when

77
00:04:11,340 --> 00:04:13,590
hard disk crashes or when more hard

78
00:04:13,590 --> 00:04:16,589
disks crashes then this data gets lost

79
00:04:16,589 --> 00:04:21,060
but some more valuable data I won't get

80
00:04:21,060 --> 00:04:24,600
lost that's important to note for if we

81
00:04:24,600 --> 00:04:26,280
want to run processes we should store

82
00:04:26,280 --> 00:04:28,200
this data and not inside the new store

83
00:04:28,200 --> 00:04:30,870
in the gig store but outside of it so we

84
00:04:30,870 --> 00:04:35,970
can archive it so to run things on

85
00:04:35,970 --> 00:04:37,590
multiple computers we have this

86
00:04:37,590 --> 00:04:40,560
infrastructure a skull a job control

87
00:04:40,560 --> 00:04:43,980
system and you basically pass it a shell

88
00:04:43,980 --> 00:04:45,930
script with some additional syntax it's

89
00:04:45,930 --> 00:04:47,640
like how much memory do you want to

90
00:04:47,640 --> 00:04:49,290
allocate and how much time do you need

91
00:04:49,290 --> 00:04:52,620
it and then it'll run the commands in

92
00:04:52,620 --> 00:04:54,810
that bash script yeah really

93
00:04:54,810 --> 00:04:58,860
bash nutshell just bash so that's a bit

94
00:04:58,860 --> 00:05:02,510
unfortunate for for Google users right

95
00:05:02,510 --> 00:05:06,810
but we'll get to that and then the job

96
00:05:06,810 --> 00:05:09,450
control system can conclude these on

97
00:05:09,450 --> 00:05:11,460
these compute nodes or run them all

98
00:05:11,460 --> 00:05:17,340
together so what I've created are two

99
00:05:17,340 --> 00:05:20,370
record types and this is the first one

100
00:05:20,370 --> 00:05:23,250
it defines the process which is the the

101
00:05:23,250 --> 00:05:26,970
a to n nodes and it looks kind of

102
00:05:26,970 --> 00:05:29,040
similar to a package but only a little

103
00:05:29,040 --> 00:05:31,770
bit more simple so it has a name and a

104
00:05:31,770 --> 00:05:33,979
version and a description and schnapps

105
00:05:33,979 --> 00:05:36,000
description fell off the page

106
00:05:36,000 --> 00:05:39,840
too bad but what's more interesting here

107
00:05:39,840 --> 00:05:42,600
is that a process can have a package

108
00:05:42,600 --> 00:05:47,490
input which are geeks packages so that

109
00:05:47,490 --> 00:05:50,850
should look familiar but also it can

110
00:05:50,850 --> 00:05:54,450
have data inputs which can be anything

111
00:05:54,450 --> 00:05:56,610
you like you can create a simple list of

112
00:05:56,610 --> 00:05:58,980
samples or just a string or a number or

113
00:05:58,980 --> 00:06:01,350
you can make some more advanced things

114
00:06:01,350 --> 00:06:05,190
like an associate list with with

115
00:06:05,190 --> 00:06:08,940
multiple items which you will will later

116
00:06:08,940 --> 00:06:12,540
use in a procedure and it has some

117
00:06:12,540 --> 00:06:15,630
runtime complexity specification in both

118
00:06:15,630 --> 00:06:19,560
space and time we with this information

119
00:06:19,560 --> 00:06:22,200
we can say something about how long the

120
00:06:22,200 --> 00:06:25,140
process will run and as you can see this

121
00:06:25,140 --> 00:06:28,370
is just scheme code so you could include

122
00:06:28,370 --> 00:06:31,680
the size of the file and then say okay

123
00:06:31,680 --> 00:06:35,910
it needs twice the the the amount of RAM

124
00:06:35,910 --> 00:06:41,970
to of this file size to to compute so

125
00:06:41,970 --> 00:06:44,820
something you can test out and try and

126
00:06:44,820 --> 00:06:47,310
then with with this information this is

127
00:06:47,310 --> 00:06:50,160
all pretty basic but then there is this

128
00:06:50,160 --> 00:06:52,430
procedure that actually execute the

129
00:06:52,430 --> 00:06:55,590
commands in a shell script and this

130
00:06:55,590 --> 00:06:58,110
procedure is and I hope this looks a bit

131
00:06:58,110 --> 00:07:00,750
familiar because it's been addressed in

132
00:07:00,750 --> 00:07:04,110
a couple of talks before me it's a G

133
00:07:04,110 --> 00:07:06,810
expression and it's basically the the

134
00:07:06,810 --> 00:07:09,270
quasi coding but then in a geek specific

135
00:07:09,270 --> 00:07:17,220
way and this G expression you can you

136
00:07:17,220 --> 00:07:20,790
can directly input packages from geeks

137
00:07:20,790 --> 00:07:23,100
and then the nice thing about this is

138
00:07:23,100 --> 00:07:24,840
that when you try to run the procedure

139
00:07:24,840 --> 00:07:27,360
when you turn it into a derivation and

140
00:07:27,360 --> 00:07:31,020
then later output the the actual script

141
00:07:31,020 --> 00:07:33,780
that rolls out of this it automatically

142
00:07:33,780 --> 00:07:35,970
builds the packages for you that you are

143
00:07:35,970 --> 00:07:39,080
actually using so that's really useful

144
00:07:39,080 --> 00:07:42,319
and then now I want to get to the second

145
00:07:42,319 --> 00:07:43,490
type so now we have these these

146
00:07:43,490 --> 00:07:45,949
processes but how are we going to

147
00:07:45,949 --> 00:07:48,229
connect them all now we need a different

148
00:07:48,229 --> 00:07:52,009
type for that that simply again it looks

149
00:07:52,009 --> 00:07:54,949
quite familiar I hope there are two

150
00:07:54,949 --> 00:07:56,780
things here that are interesting there

151
00:07:56,780 --> 00:07:58,310
are restrictions and the processes so

152
00:07:58,310 --> 00:08:01,460
process is just a list of all the nodes

153
00:08:01,460 --> 00:08:05,960
that you want to use in this workflow so

154
00:08:05,960 --> 00:08:09,349
these are just the processes you defined

155
00:08:09,349 --> 00:08:12,710
earlier and the restrictions should be

156
00:08:12,710 --> 00:08:15,970
read in a way that you say the first

157
00:08:15,970 --> 00:08:20,710
depends on the completion of the second

158
00:08:20,710 --> 00:08:23,180
and that's a really nice way so from

159
00:08:23,180 --> 00:08:24,889
from these restrictions you can

160
00:08:24,889 --> 00:08:29,889
determine its dependency graph basically

161
00:08:30,580 --> 00:08:33,320
and that's all to it because with this

162
00:08:33,320 --> 00:08:37,360
information we can now construct a

163
00:08:37,360 --> 00:08:40,039
dependency graph of processes that we've

164
00:08:40,039 --> 00:08:45,350
defined using G expressions so how that

165
00:08:45,350 --> 00:08:46,880
works is that you have this process

166
00:08:46,880 --> 00:08:50,209
definition and then you turn it into a

167
00:08:50,209 --> 00:08:56,120
derivation which will end up in the geek

168
00:08:56,120 --> 00:09:00,170
store all right and when you build that

169
00:09:00,170 --> 00:09:02,839
derivation it will build the dependent

170
00:09:02,839 --> 00:09:07,070
programs for you and it will return a

171
00:09:07,070 --> 00:09:10,220
job script for you and that job script

172
00:09:10,220 --> 00:09:11,870
is something you can pass through the

173
00:09:11,870 --> 00:09:14,649
job control system that then will

174
00:09:14,649 --> 00:09:17,510
distribute it to one of the compute

175
00:09:17,510 --> 00:09:20,529
nodes in your cluster

176
00:09:22,090 --> 00:09:29,930
that's basically the entire idea so the

177
00:09:29,930 --> 00:09:32,450
job script of course that uses the

178
00:09:32,450 --> 00:09:35,390
programs that you've you've built

179
00:09:35,390 --> 00:09:37,280
earlier the derivation do that for you

180
00:09:37,280 --> 00:09:40,840
so there's one thing to note here that

181
00:09:40,840 --> 00:09:43,520
for in order for the job script to

182
00:09:43,520 --> 00:09:45,800
actually work on a different computer it

183
00:09:45,800 --> 00:09:49,480
needs to have access to the programs so

184
00:09:49,480 --> 00:09:53,090
it kind of depends on a shared storage

185
00:09:53,090 --> 00:09:57,200
for all your compute nodes yeah maybe we

186
00:09:57,200 --> 00:09:58,640
should address that I don't know for us

187
00:09:58,640 --> 00:10:00,950
it works but maybe for others it doesn't

188
00:10:00,950 --> 00:10:09,470
I don't know so I I probably needed to

189
00:10:09,470 --> 00:10:11,630
write some tutorial or something because

190
00:10:11,630 --> 00:10:15,050
I think the easiest way to get down to

191
00:10:15,050 --> 00:10:17,000
how this works is to just try it out

192
00:10:17,000 --> 00:10:21,200
and I did that so you can find it on

193
00:10:21,200 --> 00:10:24,410
this webpage you can download source

194
00:10:24,410 --> 00:10:28,490
code for my project I actually a fork

195
00:10:28,490 --> 00:10:32,360
geeks for this but I want to include it

196
00:10:32,360 --> 00:10:34,850
into the upstream distribution and I

197
00:10:34,850 --> 00:10:38,900
hope when it's stable enough that one of

198
00:10:38,900 --> 00:10:40,760
the geeks maintainer will allow me to

199
00:10:40,760 --> 00:10:43,250
introduce that workflow management bits

200
00:10:43,250 --> 00:10:48,380
into geeks upstream yeah and if you have

201
00:10:48,380 --> 00:10:50,210
questions after this talk or when you're

202
00:10:50,210 --> 00:10:51,980
at home when you want to ask a question

203
00:10:51,980 --> 00:10:55,090
you can always email me

204
00:10:56,510 --> 00:10:59,120
yeah so I'd like to acknowledge a few

205
00:10:59,120 --> 00:11:02,270
people floral prints first for letting

206
00:11:02,270 --> 00:11:04,490
me do this internship

207
00:11:04,490 --> 00:11:08,240
you've to lift with he he was also

208
00:11:08,240 --> 00:11:10,760
involved in my internship and Ricardo

209
00:11:10,760 --> 00:11:14,560
worms and Ludovic Cortez for helping me

210
00:11:14,560 --> 00:11:16,730
with hardly gave me some very useful

211
00:11:16,730 --> 00:11:19,820
feedback on on what the rector types

212
00:11:19,820 --> 00:11:23,540
should look like and the cortege yeah

213
00:11:23,540 --> 00:11:25,100
you're just a great inspiration right

214
00:11:25,100 --> 00:11:29,270
for almost anything so yeah and you

215
00:11:29,270 --> 00:11:31,970
probably see me around in the the geeks

216
00:11:31,970 --> 00:11:34,280
development mailing list and IRC chats

217
00:11:34,280 --> 00:11:36,100
so thanks for all the help

218
00:11:36,100 --> 00:11:42,080
for those who who helped me so so are

219
00:11:42,080 --> 00:11:44,530
there any questions

220
00:11:45,890 --> 00:11:54,559
[Applause]

221
00:11:56,439 --> 00:11:59,199
I mean is this workflow I did is very

222
00:11:59,199 --> 00:12:00,519
interesting that it brings in this

223
00:12:00,519 --> 00:12:02,790
concept of using external data pass

224
00:12:02,790 --> 00:12:06,999
right but you know it wouldn't be some

225
00:12:06,999 --> 00:12:09,160
way of integrating this with the geeks

226
00:12:09,160 --> 00:12:10,420
tax management system where we actually

227
00:12:10,420 --> 00:12:13,629
can execute jobs or something yeah I

228
00:12:13,629 --> 00:12:16,569
thought about that but I I even tried

229
00:12:16,569 --> 00:12:18,939
that but the problem so the question is

230
00:12:18,939 --> 00:12:22,689
can we can we integrate the the the data

231
00:12:22,689 --> 00:12:24,819
with with the geeks package management

232
00:12:24,819 --> 00:12:28,329
system so I suspected what you want is

233
00:12:28,329 --> 00:12:31,059
to execute two jobs immediately and then

234
00:12:31,059 --> 00:12:33,429
put the results into the geek store

235
00:12:33,429 --> 00:12:37,239
right I thought about that and my first

236
00:12:37,239 --> 00:12:39,759
version did that but we ran out of space

237
00:12:39,759 --> 00:12:42,610
critic pretty quickly on the the geek

238
00:12:42,610 --> 00:12:44,730
store and then we had this problem like

239
00:12:44,730 --> 00:12:47,259
these are really huge data sets that

240
00:12:47,259 --> 00:12:50,379
were processing we're talking hundreds

241
00:12:50,379 --> 00:12:54,519
of gigabytes here per data set and if

242
00:12:54,519 --> 00:12:56,499
you all put that in the store then you

243
00:12:56,499 --> 00:12:59,679
probably end up saying in my new store

244
00:12:59,679 --> 00:13:01,769
is pretty big that's garbage collected

245
00:13:01,769 --> 00:13:04,600
and at that point you could lose the

246
00:13:04,600 --> 00:13:06,639
results of your research and you don't

247
00:13:06,639 --> 00:13:10,389
want that so we're looking into letting

248
00:13:10,389 --> 00:13:12,610
some other system manage the data and

249
00:13:12,610 --> 00:13:14,920
archive it for us actually there's

250
00:13:14,920 --> 00:13:18,790
already such a system available so why

251
00:13:18,790 --> 00:13:20,799
not let that system handle the data

252
00:13:20,799 --> 00:13:24,600
management part and let geeks handle the

253
00:13:24,600 --> 00:13:30,399
package deployment and handled the

254
00:13:30,399 --> 00:13:33,490
generation of the scripts so that it can

255
00:13:33,490 --> 00:13:38,139
be executed err easily with existing job

256
00:13:38,139 --> 00:13:41,410
control systems so yeah it's trade-off

257
00:13:41,410 --> 00:13:43,360
and I don't know what's the best way to

258
00:13:43,360 --> 00:13:46,569
go here but this is actually the only

259
00:13:46,569 --> 00:13:49,649
way it works for us so

260
00:14:39,250 --> 00:14:42,200
yeah so if I can repeat the question in

261
00:14:42,200 --> 00:14:46,149
a bit more shallow way would you like to

262
00:14:46,149 --> 00:14:49,790
run or push a container with all the

263
00:14:49,790 --> 00:14:53,630
deployed software to some other machine

264
00:14:53,630 --> 00:14:57,080
then run your data analysis there and

265
00:14:57,080 --> 00:14:58,850
then get the results back

266
00:14:58,850 --> 00:15:00,860
it's basically what you're trying to do

267
00:15:00,860 --> 00:15:03,440
I guess to avoid their shared store

268
00:15:03,440 --> 00:15:06,500
system I think we can do that because we

269
00:15:06,500 --> 00:15:09,459
can spawn containers with geeks we can

270
00:15:09,459 --> 00:15:12,400
pack everything into a container right

271
00:15:12,400 --> 00:15:15,950
but I also seem to remember that that's

272
00:15:15,950 --> 00:15:18,170
not really the way we want things to go

273
00:15:18,170 --> 00:15:20,209
right because then we're kind of giving

274
00:15:20,209 --> 00:15:22,370
up on on the idea that we can

275
00:15:22,370 --> 00:15:25,940
efficiently distribute software and use

276
00:15:25,940 --> 00:15:31,430
it and so maybe it's easier to I don't

277
00:15:31,430 --> 00:15:34,790
know fix your shared storage system

278
00:15:34,790 --> 00:15:35,270
because

279
00:15:35,270 --> 00:15:38,460
[Laughter]

280
00:15:38,460 --> 00:15:41,279
I know but we can but we can definitely

281
00:15:41,279 --> 00:15:44,790
look into it and I would like to look

282
00:15:44,790 --> 00:15:48,720
into making there like an app bundle

283
00:15:48,720 --> 00:15:52,470
yeah I know it's not a great but kind of

284
00:15:52,470 --> 00:15:55,260
like a container of course we do that

285
00:15:55,260 --> 00:15:57,000
with geeks not with docker or something

286
00:15:57,000 --> 00:16:00,240
and then we yeah we can distribute that

287
00:16:00,240 --> 00:16:03,920
to a computer and run it there

288
00:16:20,360 --> 00:16:23,319
that's why

289
00:16:24,630 --> 00:16:27,620
or either of them

290
00:16:29,290 --> 00:16:35,320
sure yeah I'd like I'd like to welcome

291
00:16:35,320 --> 00:16:37,420
you to write it I don't know how it

292
00:16:37,420 --> 00:16:42,340
would look exactly but yeah maybe could

293
00:16:42,340 --> 00:16:44,520
try that

294
00:16:55,310 --> 00:16:58,140
okay so the existing tool we have is

295
00:16:58,140 --> 00:17:07,920
pearl so we're looking into workflow

296
00:17:07,920 --> 00:17:09,690
management systems and we try to the

297
00:17:09,690 --> 00:17:14,190
common worker language and I was the

298
00:17:14,190 --> 00:17:16,140
first to try it and then I tried to

299
00:17:16,140 --> 00:17:19,349
hello world and I'm thought hmm I really

300
00:17:19,349 --> 00:17:21,030
need a programming language for my

301
00:17:21,030 --> 00:17:22,709
workflow of definitions to be flexible

302
00:17:22,709 --> 00:17:26,220
enough to address every case and that's

303
00:17:26,220 --> 00:17:27,750
exactly what the common workflow

304
00:17:27,750 --> 00:17:30,030
management language is developing into

305
00:17:30,030 --> 00:17:34,040
they included JavaScript into their

306
00:17:34,040 --> 00:17:36,870
declarative types and so yeah they're

307
00:17:36,870 --> 00:17:38,970
including a language into there and I

308
00:17:38,970 --> 00:17:40,680
think that the best language to do this

309
00:17:40,680 --> 00:17:44,580
heat oil sorry with some geeks package

310
00:17:44,580 --> 00:17:52,440
management very important for us so the

311
00:17:52,440 --> 00:17:55,460
reception is that nobody's writing

312
00:17:55,460 --> 00:17:59,010
workflows as of yet at our Institute

313
00:17:59,010 --> 00:18:01,020
because the writing Perl code and it

314
00:18:01,020 --> 00:18:04,620
works we have these huge files of Perl

315
00:18:04,620 --> 00:18:06,870
code seven hundred lines of code it's

316
00:18:06,870 --> 00:18:09,060
like the basics and then comes the error

317
00:18:09,060 --> 00:18:13,800
handling and suffering on it but we're

318
00:18:13,800 --> 00:18:16,260
trying to get started on writing

319
00:18:16,260 --> 00:18:20,400
workflows in in this way or some other

320
00:18:20,400 --> 00:18:25,350
work from language but then you know

321
00:18:25,350 --> 00:18:27,000
first you need to solve the the

322
00:18:27,000 --> 00:18:30,600
deployment problem of software and geeks

323
00:18:30,600 --> 00:18:32,250
is the only thing doing it right I

324
00:18:32,250 --> 00:18:35,880
believe so that leaves this workflow

325
00:18:35,880 --> 00:18:37,380
language as the only language that

326
00:18:37,380 --> 00:18:41,520
addresses the fool thing right so I'm

327
00:18:41,520 --> 00:18:43,290
pretty confident we're we're going to

328
00:18:43,290 --> 00:18:45,590
use it

329
00:18:49,520 --> 00:18:52,780
any more questions

330
00:18:54,810 --> 00:18:58,710
then I would like to thank you

331
00:18:58,860 --> 00:19:06,459
[Applause]

