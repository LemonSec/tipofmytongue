1
00:00:05,220 --> 00:00:10,869
yes hi everyone my name is jose luis

2
00:00:10,869 --> 00:00:13,539
million I'm coming here today to talk

3
00:00:13,539 --> 00:00:17,439
you about PSE the Superstock library

4
00:00:17,439 --> 00:00:20,190
well I'm currently based in Berlin I'm

5
00:00:20,190 --> 00:00:23,400
working for a company called propose

6
00:00:23,400 --> 00:00:27,070
where we build cheap and media server

7
00:00:27,070 --> 00:00:30,039
which is actually in SBC and it also has

8
00:00:30,039 --> 00:00:39,519
web RTC capabilities yes it is CP stack

9
00:00:39,519 --> 00:00:43,420
it's also an odious library even though

10
00:00:43,420 --> 00:00:46,420
you can also find Debian packages and

11
00:00:46,420 --> 00:00:49,389
bubble packages as well I have seen

12
00:00:49,389 --> 00:00:52,149
before the Debian package maintainer

13
00:00:52,149 --> 00:00:57,999
here david Pocock and one huge feature

14
00:00:57,999 --> 00:01:00,429
for me is that it's a few lead fully

15
00:01:00,429 --> 00:01:02,260
documented you can find the

16
00:01:02,260 --> 00:01:06,250
documentation in the web site yes sure

17
00:01:06,250 --> 00:01:10,570
okay so what's the motivation behind the

18
00:01:10,570 --> 00:01:15,460
Ieyasu there was a trigger in time which

19
00:01:15,460 --> 00:01:17,230
was the WebSocket transport when

20
00:01:17,230 --> 00:01:20,140
WebSocket Transport came to play into

21
00:01:20,140 --> 00:01:23,050
the playground we saw a huge opportunity

22
00:01:23,050 --> 00:01:28,480
to make browsers sip devices in such a

23
00:01:28,480 --> 00:01:35,170
way that that the this these devices

24
00:01:35,170 --> 00:01:38,620
should be as not not only a soft phones

25
00:01:38,620 --> 00:01:44,070
like not Howard would be needed but it's

26
00:01:44,070 --> 00:01:49,890
so simple to use and to upgrade as

27
00:01:49,890 --> 00:01:54,210
reload in a website so by making a

28
00:01:54,210 --> 00:01:57,010
JavaScript library not only you can have

29
00:01:57,010 --> 00:02:00,729
a sip stack and make a new sip in you in

30
00:02:00,729 --> 00:02:03,430
your browser but you can upgrade to the

31
00:02:03,430 --> 00:02:06,130
new version bus but by just upgrading

32
00:02:06,130 --> 00:02:09,429
your the website you download again the

33
00:02:09,429 --> 00:02:11,110
javascript file and you've got a new

34
00:02:11,110 --> 00:02:15,489
version of of the a sip so it was also a

35
00:02:15,489 --> 00:02:18,110
nice excuse to learn C and JavaScript

36
00:02:18,110 --> 00:02:20,480
more deeply and I really think we were

37
00:02:20,480 --> 00:02:22,310
in the right moment at the right at the

38
00:02:22,310 --> 00:02:26,530
right place when WebSocket was starting

39
00:02:26,530 --> 00:02:32,060
becoming an standard looking back we

40
00:02:32,060 --> 00:02:35,330
started in 2011 that's where the

41
00:02:35,330 --> 00:02:37,910
development started and in that that

42
00:02:37,910 --> 00:02:40,820
year we could already be able to make a

43
00:02:40,820 --> 00:02:43,970
sip call from from browser to browser or

44
00:02:43,970 --> 00:02:48,459
from browser to a to a legacy UDP or TCP

45
00:02:48,459 --> 00:02:51,590
simple device of course not with media

46
00:02:51,590 --> 00:02:55,820
because whoever TC was not yet already

47
00:02:55,820 --> 00:03:00,260
so we started also writing a draft to

48
00:03:00,260 --> 00:03:03,110
make a WebSocket standard transport for

49
00:03:03,110 --> 00:03:07,160
sale in that same year WebSocket became

50
00:03:07,160 --> 00:03:10,130
a standard tank so everything was clear

51
00:03:10,130 --> 00:03:13,520
I mean once we were able to have

52
00:03:13,520 --> 00:03:16,370
WebSocket as a standard transport for

53
00:03:16,370 --> 00:03:20,300
sip then it was it was the the the image

54
00:03:20,300 --> 00:03:23,299
was was perfectly we could perfectly see

55
00:03:23,299 --> 00:03:26,989
see that it was it would be easier once

56
00:03:26,989 --> 00:03:28,370
the being the standard the WebSocket

57
00:03:28,370 --> 00:03:31,580
protocol then current voice over IP

58
00:03:31,580 --> 00:03:34,280
servers could adapt and create a new

59
00:03:34,280 --> 00:03:36,980
transport in order to be able to

60
00:03:36,980 --> 00:03:39,410
communicate these two words the web and

61
00:03:39,410 --> 00:03:44,180
the sick world then 2011 the first sip

62
00:03:44,180 --> 00:03:48,370
call with media thanks to web RTC and in

63
00:03:48,370 --> 00:03:51,739
2014 the C / WebSocket became in the

64
00:03:51,739 --> 00:03:54,080
standard so there was no excuse anymore

65
00:03:54,080 --> 00:03:58,549
for sip server vendors to implement the

66
00:03:58,549 --> 00:04:02,750
transport there's a list of implemented

67
00:04:02,750 --> 00:04:06,530
RFC's there are many many more in the in

68
00:04:06,530 --> 00:04:09,410
the sip ground but I think these are no

69
00:04:09,410 --> 00:04:11,600
more nor less yes those that we needed

70
00:04:11,600 --> 00:04:17,120
at that time and indeed right now the

71
00:04:17,120 --> 00:04:22,669
API well there were several points that

72
00:04:22,669 --> 00:04:25,640
were quite clear we wanted to provide an

73
00:04:25,640 --> 00:04:28,669
API easy to use that could abstract the

74
00:04:28,669 --> 00:04:31,190
user from sip internals we didn't we

75
00:04:31,190 --> 00:04:31,999
were

76
00:04:31,999 --> 00:04:36,860
really aware about the fact that users

77
00:04:36,860 --> 00:04:40,659
making sip applications with jessep

78
00:04:40,659 --> 00:04:44,689
didn't need to be experts so we wanted

79
00:04:44,689 --> 00:04:46,999
to abstract them from the SIP protocol

80
00:04:46,999 --> 00:04:49,969
internals that's why it wasn't masked

81
00:04:49,969 --> 00:04:53,269
that the API should be as simple as as

82
00:04:53,269 --> 00:04:55,639
possible so it's quite expressive as you

83
00:04:55,639 --> 00:04:58,159
can see we can create a sip user ient by

84
00:04:58,159 --> 00:05:00,769
passing a basic configuration which

85
00:05:00,769 --> 00:05:04,579
which only mandatory options are the

86
00:05:04,579 --> 00:05:09,259
same URI and a socket a server socket to

87
00:05:09,259 --> 00:05:11,719
connect to then we can start the the

88
00:05:11,719 --> 00:05:14,389
user agent register and register how can

89
00:05:14,389 --> 00:05:16,489
we call okay just call call

90
00:05:16,489 --> 00:05:18,919
how can we send a message just call send

91
00:05:18,919 --> 00:05:24,979
a message okay also it is called driven

92
00:05:24,979 --> 00:05:27,919
a API meaning that the communication

93
00:05:27,919 --> 00:05:31,639
between the a sip objects and the and

94
00:05:31,639 --> 00:05:33,469
the user are the callbacks so you define

95
00:05:33,469 --> 00:05:37,969
your callback functions in order to set

96
00:05:37,969 --> 00:05:41,419
yogic when a new RTC session comes then

97
00:05:41,419 --> 00:05:43,519
you set a new RTC session callback

98
00:05:43,519 --> 00:05:46,129
function you can then in the in the

99
00:05:46,129 --> 00:05:49,789
callback object in inspect who is

100
00:05:49,789 --> 00:05:53,269
usually the direction is just is quite a

101
00:05:53,269 --> 00:05:56,959
common attribute of the leadership and

102
00:05:56,959 --> 00:05:59,869
callback object with which tells you who

103
00:05:59,869 --> 00:06:02,749
is doing this action is this this local

104
00:06:02,749 --> 00:06:05,449
this new RTC session being locally

105
00:06:05,449 --> 00:06:07,429
generated is it an alcohol is it

106
00:06:07,429 --> 00:06:10,129
remotely generated is it is it any would

107
00:06:10,129 --> 00:06:14,539
call then answer check it draw react to

108
00:06:14,539 --> 00:06:19,309
whatever you need so at a glance this is

109
00:06:19,309 --> 00:06:24,799
the Dec market sector I think yeah it's

110
00:06:24,799 --> 00:06:29,389
quite well represents the decor we've

111
00:06:29,389 --> 00:06:32,029
got everything all of these points are

112
00:06:32,029 --> 00:06:35,119
stand over the user agent who holds the

113
00:06:35,119 --> 00:06:38,919
transport that holds many circuits also

114
00:06:38,919 --> 00:06:44,119
dialogues who on top of which RTC

115
00:06:44,119 --> 00:06:45,689
sessions are created you can

116
00:06:45,689 --> 00:06:48,899
also do I am miss achieve message we

117
00:06:48,899 --> 00:06:51,209
have a race traitor attached to the user

118
00:06:51,209 --> 00:06:53,039
Alliant so the user island can't

119
00:06:53,039 --> 00:06:58,649
register and register and this basically

120
00:06:58,649 --> 00:07:02,669
is so as you can see it looks like a

121
00:07:02,669 --> 00:07:05,039
modular design it was also a must

122
00:07:05,039 --> 00:07:07,709
since the beginning we wanted its

123
00:07:07,709 --> 00:07:10,139
element to take care of its things and

124
00:07:10,139 --> 00:07:12,679
abstract the others from its internals

125
00:07:12,679 --> 00:07:16,289
as an example we've got the transport as

126
00:07:16,289 --> 00:07:18,839
we can see in the previous slide we see

127
00:07:18,839 --> 00:07:22,169
a transport and multiple circuits okay

128
00:07:22,169 --> 00:07:24,989
then why don't we see WebSockets because

129
00:07:24,989 --> 00:07:27,719
actually you don't need to use WebSocket

130
00:07:27,719 --> 00:07:32,729
to use the asset we provide socket

131
00:07:32,729 --> 00:07:35,899
interface which which is really simple

132
00:07:35,899 --> 00:07:38,369
which needs to implement three me dots

133
00:07:38,369 --> 00:07:40,709
connect disconnect and send which will

134
00:07:40,709 --> 00:07:42,239
be called by the alias avoid when

135
00:07:42,239 --> 00:07:44,909
necessary also three callbacks on

136
00:07:44,909 --> 00:07:47,099
connect on this connect on data so yes

137
00:07:47,099 --> 00:07:50,699
it is aware of whether it is able to

138
00:07:50,699 --> 00:07:52,679
send data to this transport or not and

139
00:07:52,679 --> 00:07:55,199
it's it's got some mandatory attributes

140
00:07:55,199 --> 00:07:57,929
well which go got their default of

141
00:07:57,929 --> 00:08:01,229
values which are via transport URL zip

142
00:08:01,229 --> 00:08:08,550
URI who helps for some - helps create in

143
00:08:08,550 --> 00:08:12,589
the sip messages and setting certain

144
00:08:12,589 --> 00:08:15,839
non-standard values that some cells

145
00:08:15,839 --> 00:08:22,019
observer vendors require this way you

146
00:08:22,019 --> 00:08:25,439
can I mean you are not attached to to

147
00:08:25,439 --> 00:08:27,479
use WebSocket of course we provide a

148
00:08:27,479 --> 00:08:32,129
WebSocket built-in implementation we

149
00:08:32,129 --> 00:08:37,139
also have WebSocket node module so you

150
00:08:37,139 --> 00:08:40,318
can use leadership in node of course we

151
00:08:40,318 --> 00:08:42,019
are talking about signaling not media

152
00:08:42,019 --> 00:08:49,290
and yeah that's all so you could send

153
00:08:49,290 --> 00:08:52,529
your CV messages over HTTP or over some

154
00:08:52,529 --> 00:08:55,649
application over HTTP or over any other

155
00:08:55,649 --> 00:08:58,170
kind of transport that respects this and

156
00:08:58,170 --> 00:09:00,769
implements the interface

157
00:09:01,400 --> 00:09:04,710
another example of the this is the

158
00:09:04,710 --> 00:09:06,870
communication internal communication of

159
00:09:06,870 --> 00:09:10,260
the object we can see here this onion

160
00:09:10,260 --> 00:09:13,680
architecture where we abstract objects

161
00:09:13,680 --> 00:09:16,320
from others implementation so a

162
00:09:16,320 --> 00:09:21,330
requester could be I am a message sender

163
00:09:21,330 --> 00:09:25,590
or a dialogue or a registrar who wants

164
00:09:25,590 --> 00:09:29,580
to send in this case a sip message so it

165
00:09:29,580 --> 00:09:31,560
delegates to the request sender who

166
00:09:31,560 --> 00:09:34,830
creates a sick transaction and delegates

167
00:09:34,830 --> 00:09:39,690
the sending of the of the packet to the

168
00:09:39,690 --> 00:09:42,620
transport who uses the socket and

169
00:09:42,620 --> 00:09:45,780
everyone does its thing so there for

170
00:09:45,780 --> 00:09:47,370
example the request sender in case there

171
00:09:47,370 --> 00:09:49,260
is a need to make a digest

172
00:09:49,260 --> 00:09:51,750
authentication we don't deliver it to

173
00:09:51,750 --> 00:09:55,520
the original requester but we absorb and

174
00:09:55,520 --> 00:09:59,250
consume it on the request sender making

175
00:09:59,250 --> 00:10:04,940
this this more modular and even cleaner

176
00:10:05,420 --> 00:10:08,730
another important part is the RTC

177
00:10:08,730 --> 00:10:11,100
session why's this important when we are

178
00:10:11,100 --> 00:10:15,630
talking about media we need to look at

179
00:10:15,630 --> 00:10:17,700
this class this is the one that deals

180
00:10:17,700 --> 00:10:22,110
with WebRTC API the one that adds and

181
00:10:22,110 --> 00:10:25,950
removes streams to the web RTC engine

182
00:10:25,950 --> 00:10:29,880
the one that requests the SDP so we can

183
00:10:29,880 --> 00:10:32,130
later send the SDP through a simple

184
00:10:32,130 --> 00:10:36,090
message and as well once we civilian SDP

185
00:10:36,090 --> 00:10:40,230
it fits the the WebRTC engine with this

186
00:10:40,230 --> 00:10:42,330
information so we can magically thanks

187
00:10:42,330 --> 00:10:45,830
to WebRTC establish a media connection

188
00:10:45,830 --> 00:10:50,880
apart from those actions this is a these

189
00:10:50,880 --> 00:10:53,070
are the typical sip actions that we

190
00:10:53,070 --> 00:10:54,930
could expect from a session that are

191
00:10:54,930 --> 00:10:57,870
hold and hold muta mu transpose D TM ACB

192
00:10:57,870 --> 00:11:03,290
info we can we also offer some callbacks

193
00:11:03,290 --> 00:11:06,930
so you can modify your sleepy before

194
00:11:06,930 --> 00:11:09,330
when you receive it from the network

195
00:11:09,330 --> 00:11:12,180
before you feel it to the WebRTC core or

196
00:11:12,180 --> 00:11:13,279
after

197
00:11:13,279 --> 00:11:17,930
you are sending dsdp to you to your sip

198
00:11:17,930 --> 00:11:20,689
server so you can adapt it to some

199
00:11:20,689 --> 00:11:22,550
circumstances or for example at data

200
00:11:22,550 --> 00:11:28,699
channel information whatever you need in

201
00:11:28,699 --> 00:11:31,189
order to communicate with the WebRTC

202
00:11:31,189 --> 00:11:34,970
engine we use WebRTC adapter which

203
00:11:34,970 --> 00:11:39,370
solves the incompatibility between

204
00:11:39,370 --> 00:11:43,220
naming mostly of API is offered by

205
00:11:43,220 --> 00:11:45,920
different browser vendors this way we

206
00:11:45,920 --> 00:11:50,620
just abstract we just use the standard

207
00:11:50,620 --> 00:11:53,660
naming and we don't care which browser

208
00:11:53,660 --> 00:11:55,819
we are talking to this library solves

209
00:11:55,819 --> 00:12:00,889
this issue for us okay go for a demo

210
00:12:00,889 --> 00:12:04,279
okay this is this demo you say double

211
00:12:04,279 --> 00:12:10,759
them the aim of the first part is soand

212
00:12:10,759 --> 00:12:14,600
that we can we can build a node

213
00:12:14,600 --> 00:12:18,920
application in order to use data sip for

214
00:12:18,920 --> 00:12:22,100
signaling and the other one will make a

215
00:12:22,100 --> 00:12:27,100
media demonstration

216
00:12:27,100 --> 00:12:29,540
[Music]

217
00:12:29,540 --> 00:12:31,569
Oh

218
00:12:34,970 --> 00:12:43,009
so this pollution stop heat up and I'd

219
00:12:43,009 --> 00:12:47,680
know a little monitor

220
00:12:57,070 --> 00:13:01,560
blue screen of death

221
00:13:04,680 --> 00:13:07,000
show me reactions where are the new

222
00:13:07,000 --> 00:13:09,510
Renault shoes

223
00:13:32,740 --> 00:13:35,820
[Music]

224
00:13:36,410 --> 00:13:50,449
well okay

225
00:13:55,589 --> 00:14:01,170
I kind of this bleep so I cannot split

226
00:14:01,170 --> 00:14:09,589
the I need you to split well okay okay

227
00:14:14,569 --> 00:14:27,089
so I will go for the second part then

228
00:14:27,089 --> 00:14:32,759
gross acting to me

229
00:14:32,759 --> 00:14:37,649
yes yes what's the command yeah they

230
00:14:37,649 --> 00:14:39,149
didn't show there I don't know where the

231
00:14:39,149 --> 00:14:41,819
 they are they're merely specks tell

232
00:14:41,819 --> 00:14:48,349
you okay sorry for the inconveniences

233
00:14:51,630 --> 00:14:54,470
okay I will need to do it in a single

234
00:14:54,470 --> 00:14:56,490
[Music]

235
00:14:56,490 --> 00:14:59,890
okay I wanted to have a split displayed

236
00:14:59,890 --> 00:15:02,440
so we could see the the execution of the

237
00:15:02,440 --> 00:15:04,839
app in one less side and decoding the

238
00:15:04,839 --> 00:15:08,019
other side but I will it would have made

239
00:15:08,019 --> 00:15:10,269
things a lot easier so please if you are

240
00:15:10,269 --> 00:15:12,790
interested pay attention because they

241
00:15:12,790 --> 00:15:15,610
will not happen at the same time so you

242
00:15:15,610 --> 00:15:18,430
can see that my cursor we are required

243
00:15:18,430 --> 00:15:21,700
in a asleep as well as the note the

244
00:15:21,700 --> 00:15:24,120
asleep WebSocket because we are creating

245
00:15:24,120 --> 00:15:27,160
the abuser agent using the node

246
00:15:27,160 --> 00:15:31,089
WebSocket transport so mainly this is

247
00:15:31,089 --> 00:15:34,120
the in order to show how easy can we use

248
00:15:34,120 --> 00:15:40,180
it this is the main function we just

249
00:15:40,180 --> 00:15:45,250
create water kept node WebSocket creates

250
00:15:45,250 --> 00:15:47,529
a user I end with this whoops WebSocket

251
00:15:47,529 --> 00:15:51,070
and starts the user agent there are two

252
00:15:51,070 --> 00:15:53,230
callbacks predefined with just the back

253
00:15:53,230 --> 00:15:56,770
some information the application allows

254
00:15:56,770 --> 00:16:03,100
us to be inside this this script so we

255
00:16:03,100 --> 00:16:05,350
will be able to control the user agent

256
00:16:05,350 --> 00:16:12,329
by executing commands okay first of all

257
00:16:40,949 --> 00:16:44,350
okay so I have enabled the C blogging

258
00:16:44,350 --> 00:16:45,399
because I thought this was interesting

259
00:16:45,399 --> 00:16:47,529
for the first time okay

260
00:16:47,529 --> 00:16:49,600
we can see here that the DAC piece is 13

261
00:16:49,600 --> 00:16:52,420
we can see the configuration and its

262
00:16:52,420 --> 00:16:53,649
outer registering because by default

263
00:16:53,649 --> 00:16:56,589
it's out register we are registering in

264
00:16:56,589 --> 00:16:58,750
a testing service that we have and

265
00:16:58,750 --> 00:17:01,149
tragedy a signet okay now I will go out

266
00:17:01,149 --> 00:17:05,079
I will disable DHCP I just wanted to

267
00:17:05,079 --> 00:17:07,329
show you the SIP traffic here okay now

268
00:17:07,329 --> 00:17:09,400
we are in application I made a very

269
00:17:09,400 --> 00:17:12,669
simple CLI where you can kind of control

270
00:17:12,669 --> 00:17:14,859
this user ID and distance we have

271
00:17:14,859 --> 00:17:19,079
already seen and well we can see the

272
00:17:19,079 --> 00:17:22,240
status we are using this version we are

273
00:17:22,240 --> 00:17:24,699
connected registered and I will

274
00:17:24,699 --> 00:17:32,549
establish a remote peer okay

275
00:17:32,549 --> 00:17:37,049
here I will connect to my colleague

276
00:17:37,049 --> 00:17:40,270
Nikki I will try to establish a shot

277
00:17:40,270 --> 00:17:41,910
here

278
00:17:41,910 --> 00:17:45,120
hi there

279
00:17:46,300 --> 00:17:52,010
hi okay so yep

280
00:17:52,010 --> 00:18:06,950
okay oh I'm sorry okay let's go yep hi

281
00:18:06,950 --> 00:18:10,420
there hi how are you doing

282
00:18:10,420 --> 00:18:18,620
okay Nicki's Esther Thanks yep okay so

283
00:18:18,620 --> 00:18:21,320
let me just tell you what just happened

284
00:18:21,320 --> 00:18:29,060
here we did we did we did a kind of

285
00:18:29,060 --> 00:18:39,680
trick here so we were the chat is based

286
00:18:39,680 --> 00:18:42,260
on Cygnus it's request from one to

287
00:18:42,260 --> 00:18:47,770
another and there was a cookie phrase

288
00:18:47,770 --> 00:18:52,340
which is invite plus something where we

289
00:18:52,340 --> 00:18:58,700
send in a key link URL URL to add to the

290
00:18:58,700 --> 00:19:02,060
job ask tragedy a zip demo web

291
00:19:02,060 --> 00:19:04,460
application which actually runs on top

292
00:19:04,460 --> 00:19:07,250
of the browser so sending this

293
00:19:07,250 --> 00:19:10,450
invitation through a sieve message and

294
00:19:10,450 --> 00:19:16,610
he received this message and opened his

295
00:19:16,610 --> 00:19:18,710
browser with that with the with the

296
00:19:18,710 --> 00:19:21,230
given link at the same time I opened as

297
00:19:21,230 --> 00:19:23,630
well the browser so we could make the

298
00:19:23,630 --> 00:19:27,250
the media communication

299
00:19:33,800 --> 00:19:36,800
and

300
00:19:37,970 --> 00:19:41,190
that is it I'm sorry for the committee

301
00:19:41,190 --> 00:19:43,010
inconveniences on the demo I hope

302
00:19:43,010 --> 00:19:48,510
everyone and I'm willing to answer any

303
00:19:48,510 --> 00:20:19,440
question you may have well since they're

304
00:20:19,440 --> 00:20:22,260
in WebRTC there are mandatory codecs if

305
00:20:22,260 --> 00:20:24,360
you are talking with WebRTC endpoints

306
00:20:24,360 --> 00:20:25,200
you don't need to bother about

307
00:20:25,200 --> 00:20:28,710
transcoding because they should share at

308
00:20:28,710 --> 00:20:31,740
least the common codec otherwise if you

309
00:20:31,740 --> 00:20:33,240
are trying to communicate with the

310
00:20:33,240 --> 00:20:35,429
legacy voice over IP network then you

311
00:20:35,429 --> 00:20:37,020
should take care of Adam and transcode

312
00:20:37,020 --> 00:20:44,059
accordingly yes so it was it

313
00:20:44,080 --> 00:20:52,480
[Applause]

