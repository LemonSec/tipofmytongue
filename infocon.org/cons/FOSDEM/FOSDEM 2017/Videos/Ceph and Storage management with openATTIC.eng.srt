1
00:00:13,830 --> 00:00:16,680
hi thank you very much

2
00:00:16,680 --> 00:00:19,600
first of all even though I have a mic I

3
00:00:19,600 --> 00:00:21,670
don't think it's really amplified well I

4
00:00:21,670 --> 00:00:23,349
have a very weak voice if I need to

5
00:00:23,349 --> 00:00:26,560
speak up just wave to me and already

6
00:00:26,560 --> 00:00:30,269
okay boy that'll be challenged

7
00:00:30,269 --> 00:00:32,920
can you hear me so there's no

8
00:00:32,920 --> 00:00:34,600
amplification through mic I hope at

9
00:00:34,600 --> 00:00:37,690
least the video stream can hear me yes

10
00:00:37,690 --> 00:00:39,219
hi there I'd like to give a small talk

11
00:00:39,219 --> 00:00:41,620
about a smaller project I'm involved in

12
00:00:41,620 --> 00:00:46,059
since July 2015 called open attic let me

13
00:00:46,059 --> 00:00:48,190
dive right in I have probably way too

14
00:00:48,190 --> 00:00:50,350
much slides for the time I have let's

15
00:00:50,350 --> 00:00:54,960
see how far we can come so basically

16
00:00:54,960 --> 00:00:57,670
what does open attic do what was the

17
00:00:57,670 --> 00:01:01,030
vision behind it it started about six

18
00:01:01,030 --> 00:01:04,780
years ago by now on it started as so

19
00:01:04,780 --> 00:01:07,890
many other open-source project with

20
00:01:07,890 --> 00:01:10,330
somebody had to scratch his own itch

21
00:01:10,330 --> 00:01:11,890
because there was a problem that they

22
00:01:11,890 --> 00:01:13,659
need a solution for so they thought well

23
00:01:13,659 --> 00:01:15,070
we can do this by ourselves they're

24
00:01:15,070 --> 00:01:17,740
going with it in this case the situation

25
00:01:17,740 --> 00:01:20,380
was that the the company IT Nobel where

26
00:01:20,380 --> 00:01:23,710
were all kinetic evolves from they were

27
00:01:23,710 --> 00:01:25,659
as a spin-off of another company we're

28
00:01:25,659 --> 00:01:27,460
doing data center operations for them

29
00:01:27,460 --> 00:01:32,140
and they needed storage so as you

30
00:01:32,140 --> 00:01:33,790
probably are aware nowadays storage

31
00:01:33,790 --> 00:01:35,799
exceeds the boundaries of hardware and

32
00:01:35,799 --> 00:01:37,119
much faster than people can share

33
00:01:37,119 --> 00:01:41,110
hardest in data growth everywhere so and

34
00:01:41,110 --> 00:01:43,450
they need to replace a number of

35
00:01:43,450 --> 00:01:45,130
proprietary storage systems and were

36
00:01:45,130 --> 00:01:46,899
quite surprised by the price techs that

37
00:01:46,899 --> 00:01:48,880
they were the quotes that they received

38
00:01:48,880 --> 00:01:51,600
so they thought why can't we do this

39
00:01:51,600 --> 00:01:54,189
differently and if you look at it a

40
00:01:54,189 --> 00:01:56,649
Linux distribution nowadays gives you

41
00:01:56,649 --> 00:01:58,119
everything you need to set up a fully

42
00:01:58,119 --> 00:02:00,030
fledged storage system you just buy

43
00:02:00,030 --> 00:02:02,770
cheap commodity hardware shop and lots

44
00:02:02,770 --> 00:02:04,299
of hard disks and you have a server that

45
00:02:04,299 --> 00:02:07,960
fulfils most of the common needs so the

46
00:02:07,960 --> 00:02:10,180
idea was okay Linux by itself is good it

47
00:02:10,180 --> 00:02:11,680
has everything but you need something on

48
00:02:11,680 --> 00:02:14,350
top that makes a bit more approachable

49
00:02:14,350 --> 00:02:17,110
easier to manage and unify it because in

50
00:02:17,110 --> 00:02:18,209
many

51
00:02:18,209 --> 00:02:20,129
in many cases you have administrators

52
00:02:20,129 --> 00:02:22,109
that might be familiar with using a UI

53
00:02:22,109 --> 00:02:23,760
but they are not that familiar in the

54
00:02:23,760 --> 00:02:26,250
command line so open ethics vision

55
00:02:26,250 --> 00:02:29,010
really was to give a a more friendly

56
00:02:29,010 --> 00:02:30,810
user interface and a unified experience

57
00:02:30,810 --> 00:02:34,469
to managing all kinds of storage storage

58
00:02:34,469 --> 00:02:38,159
here meaning both what is usually called

59
00:02:38,159 --> 00:02:40,980
Nass starts a fire based like some bar

60
00:02:40,980 --> 00:02:43,439
or NFS but also block-based storage

61
00:02:43,439 --> 00:02:46,019
protocols particularly I scuzzy would be

62
00:02:46,019 --> 00:02:51,989
an example here and later on during the

63
00:02:51,989 --> 00:02:54,030
lifecycle of open attic they also

64
00:02:54,030 --> 00:02:56,760
realize that single server instances or

65
00:02:56,760 --> 00:02:58,799
even multi nodes configurations can't

66
00:02:58,799 --> 00:03:00,739
keep up with the storage requirements

67
00:03:00,739 --> 00:03:03,780
and the developers looked around and

68
00:03:03,780 --> 00:03:05,340
figured out that safe might be quite a

69
00:03:05,340 --> 00:03:06,689
nice alternative here which is a

70
00:03:06,689 --> 00:03:09,629
distributed storage system in which you

71
00:03:09,629 --> 00:03:11,669
not just have a single server body add

72
00:03:11,669 --> 00:03:13,379
more disk but you simply throw in more

73
00:03:13,379 --> 00:03:15,510
servers or even complete racks if you

74
00:03:15,510 --> 00:03:17,669
need more storage and said pretty much

75
00:03:17,669 --> 00:03:19,739
organizes itself to make use of the

76
00:03:19,739 --> 00:03:21,510
storage tree and ensure the redundancy

77
00:03:21,510 --> 00:03:24,930
and make sure yeah it scales along with

78
00:03:24,930 --> 00:03:27,620
the hardware that you give it to him

79
00:03:27,620 --> 00:03:30,299
so it started as an in-house project and

80
00:03:30,299 --> 00:03:32,879
later became an open-source product I

81
00:03:32,879 --> 00:03:35,549
would call it the idea behind it was

82
00:03:35,549 --> 00:03:38,040
that there was an enterprise version in

83
00:03:38,040 --> 00:03:39,959
the community version and that the

84
00:03:39,959 --> 00:03:41,760
company would then sell licenses with

85
00:03:41,760 --> 00:03:44,370
added support and other value on top to

86
00:03:44,370 --> 00:03:49,470
monetize on the software interestingly

87
00:03:49,470 --> 00:03:53,099
that didn't really work out so when I

88
00:03:53,099 --> 00:03:56,280
joined the company in June July 2015 we

89
00:03:56,280 --> 00:03:58,709
made a number of drastic changes to how

90
00:03:58,709 --> 00:04:00,569
often addict was governed and managed

91
00:04:00,569 --> 00:04:04,199
and yeah run as a project before that

92
00:04:04,199 --> 00:04:06,840
basically the developers all work

93
00:04:06,840 --> 00:04:09,030
in-house at the company and the

94
00:04:09,030 --> 00:04:11,549
development took place like with many

95
00:04:11,549 --> 00:04:13,979
proprietary products very internally

96
00:04:13,979 --> 00:04:16,289
faced and every once in a while they

97
00:04:16,289 --> 00:04:18,209
released the community version but there

98
00:04:18,209 --> 00:04:19,889
wasn't really a community around so

99
00:04:19,889 --> 00:04:22,220
there wasn't an infrastructure that was

100
00:04:22,220 --> 00:04:25,110
inviting for users to come and work with

101
00:04:25,110 --> 00:04:27,750
the project so that's something that

102
00:04:27,750 --> 00:04:31,650
we've changed drastically also we

103
00:04:31,650 --> 00:04:33,540
got rid of the dual licensing that was

104
00:04:33,540 --> 00:04:37,169
in place back then the the Enterprise

105
00:04:37,169 --> 00:04:39,330
Edition had a few additional bits on top

106
00:04:39,330 --> 00:04:41,310
that you would have to pay for all of

107
00:04:41,310 --> 00:04:43,229
this was folded into a single code we

108
00:04:43,229 --> 00:04:45,800
released under the GPL and went ahead

109
00:04:45,800 --> 00:04:47,789
since then there's no distinction

110
00:04:47,789 --> 00:04:49,620
between enterprises and communities just

111
00:04:49,620 --> 00:04:53,100
open attic going forward we also got rid

112
00:04:53,100 --> 00:04:54,780
of the requirement for contributors

113
00:04:54,780 --> 00:04:56,250
signing a contributor License Agreement

114
00:04:56,250 --> 00:04:59,400
so similar to self basically if you

115
00:04:59,400 --> 00:05:01,289
contribute to open attic all we require

116
00:05:01,289 --> 00:05:03,990
is that you add a sign of line to your

117
00:05:03,990 --> 00:05:05,729
commit message similar to how the Linux

118
00:05:05,729 --> 00:05:07,530
kernel and many other open source sauce

119
00:05:07,530 --> 00:05:12,090
projects do it nowadays so the the bar

120
00:05:12,090 --> 00:05:14,699
for contributing code is much lower than

121
00:05:14,699 --> 00:05:16,919
nowadays and that was really noticeable

122
00:05:16,919 --> 00:05:19,710
by the yeah just the amount and the

123
00:05:19,710 --> 00:05:21,210
growth of the community that we've seen

124
00:05:21,210 --> 00:05:25,680
since then we also opened up a lot of

125
00:05:25,680 --> 00:05:27,330
other things that used to be internal

126
00:05:27,330 --> 00:05:29,099
most popular of course is the back

127
00:05:29,099 --> 00:05:31,400
tracker we are based on Atlassian JIRA

128
00:05:31,400 --> 00:05:34,259
and we now have a publicly hosted JIRA

129
00:05:34,259 --> 00:05:36,599
incident that's fully open so you can

130
00:05:36,599 --> 00:05:39,930
really see all the issues or roadmap

131
00:05:39,930 --> 00:05:41,280
planning everything is transferred

132
00:05:41,280 --> 00:05:42,870
openly you can leave comments you can

133
00:05:42,870 --> 00:05:44,940
vote on it you can submit back reports

134
00:05:44,940 --> 00:05:46,260
like you would expect from any other

135
00:05:46,260 --> 00:05:50,070
open source project we also changed the

136
00:05:50,070 --> 00:05:53,190
way of how we work on the code we now

137
00:05:53,190 --> 00:05:54,870
make much more use of different code

138
00:05:54,870 --> 00:05:56,580
branches we have established a process

139
00:05:56,580 --> 00:05:59,039
for performing pull requests and doing

140
00:05:59,039 --> 00:06:02,130
commenting on them these were all things

141
00:06:02,130 --> 00:06:04,139
that were quite new to the open attic

142
00:06:04,139 --> 00:06:06,120
developers so we learned as we go along

143
00:06:06,120 --> 00:06:08,870
and it's a process that now basically

144
00:06:08,870 --> 00:06:11,820
there's no difference if you are paid

145
00:06:11,820 --> 00:06:13,440
for working on phonetic or if you're a

146
00:06:13,440 --> 00:06:15,330
community contributor it's all going

147
00:06:15,330 --> 00:06:16,650
through the same procedures same

148
00:06:16,650 --> 00:06:21,659
requirements and same expectations we

149
00:06:21,659 --> 00:06:23,610
also switch the list model nowadays we

150
00:06:23,610 --> 00:06:25,229
try to come up with in new open

151
00:06:25,229 --> 00:06:26,520
ethically at least once per month

152
00:06:26,520 --> 00:06:29,039
roughly every four five six four to five

153
00:06:29,039 --> 00:06:32,639
weeks and we have nightly builds if

154
00:06:32,639 --> 00:06:34,500
you're curious so if you are looking for

155
00:06:34,500 --> 00:06:36,030
testing and new feature that has just

156
00:06:36,030 --> 00:06:37,320
been committed and you don't want to

157
00:06:37,320 --> 00:06:40,080
wait for the next release just take a

158
00:06:40,080 --> 00:06:41,860
nightly build

159
00:06:41,860 --> 00:06:44,890
yeah with regards to future developments

160
00:06:44,890 --> 00:06:47,590
we have kind of like a train models

161
00:06:47,590 --> 00:06:50,110
basically people work in parallel on

162
00:06:50,110 --> 00:06:52,240
features and once they are ready and

163
00:06:52,240 --> 00:06:53,500
they've passed the review and have

164
00:06:53,500 --> 00:06:55,090
passed all the tests then they will be

165
00:06:55,090 --> 00:06:57,160
merge into the the development branch

166
00:06:57,160 --> 00:06:59,620
that will eventually become the next

167
00:06:59,620 --> 00:07:02,290
release but if a developer doesn't make

168
00:07:02,290 --> 00:07:03,730
it in time since we are on a monthly

169
00:07:03,730 --> 00:07:05,650
cycle there's not just a really long

170
00:07:05,650 --> 00:07:07,630
period before he has another opportunity

171
00:07:07,630 --> 00:07:10,090
to get a stuff merged in so that really

172
00:07:10,090 --> 00:07:11,320
helped accelerating the whole

173
00:07:11,320 --> 00:07:13,720
development process and making changes

174
00:07:13,720 --> 00:07:17,650
to the project also in the beginning

175
00:07:17,650 --> 00:07:21,310
many different components were managed

176
00:07:21,310 --> 00:07:23,260
in separate code repositories so like

177
00:07:23,260 --> 00:07:25,690
the documentation was in one repo tests

178
00:07:25,690 --> 00:07:28,360
were in another one and integrating them

179
00:07:28,360 --> 00:07:29,860
and getting them aligned was always a

180
00:07:29,860 --> 00:07:31,570
bit of a challenge so we simply lumped

181
00:07:31,570 --> 00:07:33,670
all of these repos together into one

182
00:07:33,670 --> 00:07:36,370
single repo which now means that you

183
00:07:36,370 --> 00:07:38,410
could basically no can work on a feature

184
00:07:38,410 --> 00:07:41,290
write the documentation create the tests

185
00:07:41,290 --> 00:07:42,880
and have them all in a single branch and

186
00:07:42,880 --> 00:07:44,470
commit and merge them at the same time

187
00:07:44,470 --> 00:07:46,480
so it's it's much more easy to keep

188
00:07:46,480 --> 00:07:49,920
tracking and keep the stuff synchronized

189
00:07:49,920 --> 00:07:53,680
a few key aspects of how phonetic we are

190
00:07:53,680 --> 00:07:54,880
well aware that we're not alone

191
00:07:54,880 --> 00:07:56,500
especially when it comes to storage

192
00:07:56,500 --> 00:07:58,210
management there are quite a number of

193
00:07:58,210 --> 00:07:59,950
projects out there that do similar

194
00:07:59,950 --> 00:08:03,310
things that we do so we try to come up

195
00:08:03,310 --> 00:08:06,190
with a few yeah cornerstones of what we

196
00:08:06,190 --> 00:08:09,280
would like to focus on primarily the

197
00:08:09,280 --> 00:08:11,590
goal is storage management and storage

198
00:08:11,590 --> 00:08:13,840
management only you see many projects

199
00:08:13,840 --> 00:08:15,730
that start also doing things like

200
00:08:15,730 --> 00:08:19,360
managing containers or plugins so their

201
00:08:19,360 --> 00:08:21,550
mom sometimes more aimed at home users

202
00:08:21,550 --> 00:08:23,680
that want to have an appliance somewhere

203
00:08:23,680 --> 00:08:25,360
in the corner that isn't just a file

204
00:08:25,360 --> 00:08:27,100
server but maybe also an own cloud

205
00:08:27,100 --> 00:08:29,020
instance or provides a BitTorrent server

206
00:08:29,020 --> 00:08:32,289
or what have not this is currently fully

207
00:08:32,289 --> 00:08:34,289
out of scope so we really focus just on

208
00:08:34,289 --> 00:08:36,880
managing your storage and exposing it

209
00:08:36,880 --> 00:08:40,020
through various protocols and embedded

210
00:08:40,020 --> 00:08:42,250
yeah safe support is something that

211
00:08:42,250 --> 00:08:44,020
we've added recently that's quite

212
00:08:44,020 --> 00:08:47,860
noticeable of course we have fully GPL

213
00:08:47,860 --> 00:08:51,340
v2 no arbitrary functional restrictions

214
00:08:51,340 --> 00:08:53,920
so there are a lot of free storage

215
00:08:53,920 --> 00:08:55,550
management systems that you can

216
00:08:55,550 --> 00:08:57,680
and use but they apply some form of

217
00:08:57,680 --> 00:09:00,110
limitation on you for example for the

218
00:09:00,110 --> 00:09:01,700
amount of data that you can store in it

219
00:09:01,700 --> 00:09:03,470
or the amount of concurrent use what

220
00:09:03,470 --> 00:09:05,240
have not and if you reach that limit

221
00:09:05,240 --> 00:09:06,740
here all the sudden need to buy a

222
00:09:06,740 --> 00:09:10,040
license or pay for for getting over that

223
00:09:10,040 --> 00:09:11,390
barrier that's not the case with the

224
00:09:11,390 --> 00:09:13,250
open attic you are free to do with it

225
00:09:13,250 --> 00:09:15,500
whatever you want in what sizes you want

226
00:09:15,500 --> 00:09:19,700
to use it we're based on standard Linux

227
00:09:19,700 --> 00:09:21,470
tools as I said most distributions

228
00:09:21,470 --> 00:09:24,320
provide all the frameworks and tools

229
00:09:24,320 --> 00:09:26,240
that you need to set up such a system by

230
00:09:26,240 --> 00:09:28,010
default it's just a matter of

231
00:09:28,010 --> 00:09:29,990
orchestrating them and making them more

232
00:09:29,990 --> 00:09:32,060
accessible to the user and that's the

233
00:09:32,060 --> 00:09:35,480
part that we're taking on we try hard to

234
00:09:35,480 --> 00:09:38,709
support multiple Linux distributions

235
00:09:38,709 --> 00:09:41,450
originally open etic came from the

236
00:09:41,450 --> 00:09:43,610
Debian corner so we started with there

237
00:09:43,610 --> 00:09:47,600
been added to bundle later on since two

238
00:09:47,600 --> 00:09:49,880
years ago we started adding rpms for

239
00:09:49,880 --> 00:09:53,630
CentOS and Enterprise Linux and it's

240
00:09:53,630 --> 00:09:58,130
souza as well and this gives us an

241
00:09:58,130 --> 00:09:59,930
opportunity compared to some other

242
00:09:59,930 --> 00:10:01,310
storage management systems that

243
00:10:01,310 --> 00:10:03,829
sometimes are based on non Linux

244
00:10:03,829 --> 00:10:08,149
operating systems one key concern that

245
00:10:08,149 --> 00:10:10,220
sometimes comes up here is this hardware

246
00:10:10,220 --> 00:10:13,070
support that most vendors have pretty

247
00:10:13,070 --> 00:10:14,959
solid support when it comes to providing

248
00:10:14,959 --> 00:10:17,360
Linux drivers in the server space but if

249
00:10:17,360 --> 00:10:19,850
you're getting into non Linux but UNIX

250
00:10:19,850 --> 00:10:21,290
the operating systems the driver

251
00:10:21,290 --> 00:10:22,880
situation can sometimes be a bit more

252
00:10:22,880 --> 00:10:26,029
challenging so that that usually helps

253
00:10:26,029 --> 00:10:28,970
us to get adoption we don't enforce a

254
00:10:28,970 --> 00:10:31,310
choice of Linux distribution on you you

255
00:10:31,310 --> 00:10:33,560
can basically use what you feel familiar

256
00:10:33,560 --> 00:10:35,329
with as the base platform and can put

257
00:10:35,329 --> 00:10:41,449
open adding on top okay what can we do

258
00:10:41,449 --> 00:10:43,850
so far what's the functionality of

259
00:10:43,850 --> 00:10:47,480
automatic like so basically the

260
00:10:47,480 --> 00:10:49,220
technology consists of two separate

261
00:10:49,220 --> 00:10:51,050
components the the most noticeable one

262
00:10:51,050 --> 00:10:53,949
is the the web GUI that is what you see

263
00:10:53,949 --> 00:10:56,329
with open attic version to all that

264
00:10:56,329 --> 00:10:57,800
started about two and a half years ago

265
00:10:57,800 --> 00:11:01,160
we switched from an XJS based to an

266
00:11:01,160 --> 00:11:04,220
angularjs based from web front-end so we

267
00:11:04,220 --> 00:11:07,279
use JavaScript libraries to make the UI

268
00:11:07,279 --> 00:11:09,529
yeah visually appealing

269
00:11:09,529 --> 00:11:13,730
and easy to use the back end is the

270
00:11:13,730 --> 00:11:15,769
other component which has a RESTful API

271
00:11:15,769 --> 00:11:18,199
it's also a new addition in version 2

272
00:11:18,199 --> 00:11:21,019
that we're working on the former version

273
00:11:21,019 --> 00:11:23,680
one at X was using XML RPC

274
00:11:23,680 --> 00:11:26,449
so the RESTful API makes it a bit more

275
00:11:26,449 --> 00:11:29,569
easier to talk to with the backend and

276
00:11:29,569 --> 00:11:31,459
the web and front end only uses the REST

277
00:11:31,459 --> 00:11:32,839
API so everything that you can

278
00:11:32,839 --> 00:11:35,720
accomplish by by the web interface can

279
00:11:35,720 --> 00:11:37,910
also be accomplished by calling REST API

280
00:11:37,910 --> 00:11:42,230
calls yeah and with regards to storage

281
00:11:42,230 --> 00:11:45,529
we provide the usual suspects in its

282
00:11:45,529 --> 00:11:47,209
simplest form and and and we're open

283
00:11:47,209 --> 00:11:51,309
ethic comes from that you have

284
00:11:52,970 --> 00:11:55,160
group please hard disk with the logical

285
00:11:55,160 --> 00:11:57,440
volume manager LVM into a at the storage

286
00:11:57,440 --> 00:12:00,230
pool and we also support the ZFS

287
00:12:00,230 --> 00:12:01,700
filesystem of the budget as far as

288
00:12:01,700 --> 00:12:05,290
system if you prefer so we you have a

289
00:12:05,290 --> 00:12:07,730
basic storage unit which is the storage

290
00:12:07,730 --> 00:12:10,090
pool and open data can then be used to

291
00:12:10,090 --> 00:12:13,220
carve out volumes out of that pool based

292
00:12:13,220 --> 00:12:18,290
on your requirements we will support a

293
00:12:18,290 --> 00:12:21,590
number of file systems as I said ZFS is

294
00:12:21,590 --> 00:12:24,170
one of the first we support butterface

295
00:12:24,170 --> 00:12:26,180
for other use cases so you can really

296
00:12:26,180 --> 00:12:28,700
choose how to configure storage for the

297
00:12:28,700 --> 00:12:31,840
workload at hand that you want to serve

298
00:12:31,840 --> 00:12:34,970
we have the process of adding support

299
00:12:34,970 --> 00:12:38,360
for MDR VD the distributed replicated

300
00:12:38,360 --> 00:12:40,940
block device so in a multi node setup

301
00:12:40,940 --> 00:12:43,040
where you have let's say two automatic

302
00:12:43,040 --> 00:12:46,100
instances you can configure that a

303
00:12:46,100 --> 00:12:47,780
volume that you create on the one node

304
00:12:47,780 --> 00:12:49,850
will be replicated synchronously to the

305
00:12:49,850 --> 00:12:52,880
second or for redundancy purposes the

306
00:12:52,880 --> 00:12:54,320
backend support has been in place for

307
00:12:54,320 --> 00:12:57,860
quite a while already and we know in the

308
00:12:57,860 --> 00:13:00,050
finest which are finishing the UI part

309
00:13:00,050 --> 00:13:02,360
of that as well so that's a pull request

310
00:13:02,360 --> 00:13:05,230
it's really getting close to review now

311
00:13:05,230 --> 00:13:08,300
we also do starch monitoring in the

312
00:13:08,300 --> 00:13:11,660
backend so one of the things if you of

313
00:13:11,660 --> 00:13:14,060
course as I said you can just use Linux

314
00:13:14,060 --> 00:13:16,430
and set up a share and create a small

315
00:13:16,430 --> 00:13:19,070
file server by yourself but something

316
00:13:19,070 --> 00:13:21,110
something that usually gets forgotten

317
00:13:21,110 --> 00:13:22,730
during that process is making sure that

318
00:13:22,730 --> 00:13:24,710
the storage is properly monitored and

319
00:13:24,710 --> 00:13:26,810
then your users become your monitoring

320
00:13:26,810 --> 00:13:28,400
system because they will screen once

321
00:13:28,400 --> 00:13:31,430
their disk currents for automatic

322
00:13:31,430 --> 00:13:33,410
basically automates this process so each

323
00:13:33,410 --> 00:13:35,510
time you create a new volume will also

324
00:13:35,510 --> 00:13:37,730
reconfigure the monitoring framework in

325
00:13:37,730 --> 00:13:39,200
the background to make sure that it's

326
00:13:39,200 --> 00:13:40,880
being tracked and you see the

327
00:13:40,880 --> 00:13:45,590
utilization and then as I said local

328
00:13:45,590 --> 00:13:47,030
storage is way open and it comes from

329
00:13:47,030 --> 00:13:49,010
with the addition of Ceph we are now

330
00:13:49,010 --> 00:13:54,140
starting to make yeah we want to add

331
00:13:54,140 --> 00:13:56,000
functionality that makes it easy to

332
00:13:56,000 --> 00:13:58,610
manage the self cluster to create new

333
00:13:58,610 --> 00:14:01,580
storage objects like block devices or

334
00:14:01,580 --> 00:14:03,800
new safe pools also start doing

335
00:14:03,800 --> 00:14:05,810
monitoring so you get an insight of how

336
00:14:05,810 --> 00:14:06,769
yourself coolest

337
00:14:06,769 --> 00:14:08,360
doing this is the functionality that we

338
00:14:08,360 --> 00:14:11,720
know most actively working on at the

339
00:14:11,720 --> 00:14:17,149
moment and this combined with the the

340
00:14:17,149 --> 00:14:18,860
the recent changes that I've just talked

341
00:14:18,860 --> 00:14:20,569
about with opening the project was

342
00:14:20,569 --> 00:14:23,509
something that Sousa got curious and we

343
00:14:23,509 --> 00:14:25,309
had a development partnership with Sousa

344
00:14:25,309 --> 00:14:28,879
for the entire last year basically we

345
00:14:28,879 --> 00:14:30,649
worked together with Sousa developers on

346
00:14:30,649 --> 00:14:33,649
advancing the set functionality and in

347
00:14:33,649 --> 00:14:36,799
November Sousa agreed on acquiring the

348
00:14:36,799 --> 00:14:38,959
team and the project from IT November

349
00:14:38,959 --> 00:14:41,899
now part of since then but this doesn't

350
00:14:41,899 --> 00:14:43,339
really mean that we will now ditch

351
00:14:43,339 --> 00:14:45,049
support for the other distributions

352
00:14:45,049 --> 00:14:46,489
there are no intentions to change how

353
00:14:46,489 --> 00:14:50,360
the project is being run and gathered so

354
00:14:50,360 --> 00:14:52,850
components this is it we have on the one

355
00:14:52,850 --> 00:14:56,329
hand back-end as you can see we are

356
00:14:56,329 --> 00:14:58,339
using pretty boring technology here

357
00:14:58,339 --> 00:15:00,290
bread-and-butter stuff this is by

358
00:15:00,290 --> 00:15:02,239
intention because since we need to

359
00:15:02,239 --> 00:15:04,189
support multiple distributions we need

360
00:15:04,189 --> 00:15:06,350
to figure out ok what's the common tool

361
00:15:06,350 --> 00:15:08,869
set that we can use if you start making

362
00:15:08,869 --> 00:15:11,329
choices that are not available in all on

363
00:15:11,329 --> 00:15:13,309
any of the distributions it would be

364
00:15:13,309 --> 00:15:16,309
difficult to support it over there so

365
00:15:16,309 --> 00:15:18,139
the the automatic back end is written in

366
00:15:18,139 --> 00:15:21,170
Jungle it's a Python application usually

367
00:15:21,170 --> 00:15:23,509
prepare jungle is used as an application

368
00:15:23,509 --> 00:15:25,910
server for yeah let's say web shops or

369
00:15:25,910 --> 00:15:27,740
something like that but it turns out

370
00:15:27,740 --> 00:15:31,999
that the whole way how jungle organizes

371
00:15:31,999 --> 00:15:33,649
data and how its structured with jungle

372
00:15:33,649 --> 00:15:35,470
models makes it a very suitable

373
00:15:35,470 --> 00:15:37,549
framework for something like a storage

374
00:15:37,549 --> 00:15:41,619
management system as well and basically

375
00:15:41,619 --> 00:15:43,879
Django is the abstraction layer and

376
00:15:43,879 --> 00:15:45,589
underneath we are calling the regular

377
00:15:45,589 --> 00:15:48,679
Linux tools that an administrator will

378
00:15:48,679 --> 00:15:50,389
all see you so for example if you create

379
00:15:50,389 --> 00:15:53,959
a new volume we are calling BG create or

380
00:15:53,959 --> 00:15:57,290
L we create mkfs all the steps that you

381
00:15:57,290 --> 00:15:59,389
as an administrator would have to

382
00:15:59,389 --> 00:16:01,279
perform step by step to come to the same

383
00:16:01,279 --> 00:16:05,869
goal MRR automated by or fanatic for the

384
00:16:05,869 --> 00:16:07,549
monitoring we currently are based on

385
00:16:07,549 --> 00:16:09,919
Argus or a singer and using P and P for

386
00:16:09,919 --> 00:16:12,829
nagas for the graphs which we are

387
00:16:12,829 --> 00:16:14,290
storing in our default they have a

388
00:16:14,290 --> 00:16:18,780
picture about that when it comes to safe

389
00:16:18,780 --> 00:16:20,730
the the current functionality is using

390
00:16:20,730 --> 00:16:22,890
liberators so basically they've become

391
00:16:22,890 --> 00:16:24,750
an API that is used to talk to the safe

392
00:16:24,750 --> 00:16:27,090
cluster to obtain information or to to

393
00:16:27,090 --> 00:16:31,710
issue administrative commands and we're

394
00:16:31,710 --> 00:16:33,840
now in the process of doing more than

395
00:16:33,840 --> 00:16:35,580
just talking to an existing self-test

396
00:16:35,580 --> 00:16:36,960
that we would like to be able to also

397
00:16:36,960 --> 00:16:38,760
set up and configure and manage a

398
00:16:38,760 --> 00:16:41,430
cluster and this is where salt comes

399
00:16:41,430 --> 00:16:45,150
into place soldiers and deployment and

400
00:16:45,150 --> 00:16:48,390
automation framework and Sue's is also

401
00:16:48,390 --> 00:16:51,030
working on a safe specific management

402
00:16:51,030 --> 00:16:52,860
functionality based on salt that's a

403
00:16:52,860 --> 00:16:55,710
project called deep sea and there's a

404
00:16:55,710 --> 00:16:58,350
talk by Yann later on in this room at 3

405
00:16:58,350 --> 00:17:01,920
p.m. she want to learn more about it yep

406
00:17:01,920 --> 00:17:04,650
the web front-end as I said angularjs

407
00:17:04,650 --> 00:17:07,770
bootstrap also pretty well in web

408
00:17:07,770 --> 00:17:09,689
developer terms pretty boring stuff by

409
00:17:09,689 --> 00:17:13,260
now but it gets the job done and yeah we

410
00:17:13,260 --> 00:17:15,720
are working on improving the

411
00:17:15,720 --> 00:17:17,939
functionality and adding more every day

412
00:17:17,939 --> 00:17:21,720
basically we also put a strong emphasis

413
00:17:21,720 --> 00:17:24,720
on testing so each commit or each new

414
00:17:24,720 --> 00:17:26,699
functionality is supposed to be

415
00:17:26,699 --> 00:17:28,800
accompanied by a number of tests we

416
00:17:28,800 --> 00:17:31,470
tests on three different layers

417
00:17:31,470 --> 00:17:33,770
basically we have Python unit tests

418
00:17:33,770 --> 00:17:36,870
where we use the the jungle unit rest

419
00:17:36,870 --> 00:17:40,700
framework the entire application is

420
00:17:40,700 --> 00:17:43,620
tested through a test suit that is named

421
00:17:43,620 --> 00:17:45,990
Gatling that we developed ourselves in

422
00:17:45,990 --> 00:17:48,720
which it calls the REST API directly and

423
00:17:48,720 --> 00:17:51,330
automates the testing on that level and

424
00:17:51,330 --> 00:17:54,270
we also have automated tests for the

425
00:17:54,270 --> 00:17:56,730
full web UI based on protractor Jasmine

426
00:17:56,730 --> 00:17:58,770
where you basically are remote

427
00:17:58,770 --> 00:18:01,140
controlling a web browser to simulate

428
00:18:01,140 --> 00:18:03,210
clicks on the UI and you check if the

429
00:18:03,210 --> 00:18:06,770
web UI gives you the expected results

430
00:18:06,770 --> 00:18:10,800
that's the architecture from in a visual

431
00:18:10,800 --> 00:18:12,240
point of view so you have the Django

432
00:18:12,240 --> 00:18:15,840
application in the middle some data is

433
00:18:15,840 --> 00:18:19,320
persisted in the Postgres database if

434
00:18:19,320 --> 00:18:21,060
you want to set up a multi node an

435
00:18:21,060 --> 00:18:23,580
automatic system the only thing that it

436
00:18:23,580 --> 00:18:25,080
needs to be shared is the Postgres

437
00:18:25,080 --> 00:18:26,820
database so if you have a second node

438
00:18:26,820 --> 00:18:28,679
you connect them both to the same

439
00:18:28,679 --> 00:18:31,410
postcodes databases then you can use one

440
00:18:31,410 --> 00:18:32,130
web

441
00:18:32,130 --> 00:18:34,080
you IFO kinetic to manage your two notes

442
00:18:34,080 --> 00:18:39,210
together since the Jenga application

443
00:18:39,210 --> 00:18:41,420
doesn't have root privileges we have a

444
00:18:41,420 --> 00:18:44,580
separate process which is called the

445
00:18:44,580 --> 00:18:47,430
open attic system D which can should not

446
00:18:47,430 --> 00:18:48,840
be confused with Leonard pattering

447
00:18:48,840 --> 00:18:51,930
system D that's a coincidence but this

448
00:18:51,930 --> 00:18:53,910
is a root process that communicates with

449
00:18:53,910 --> 00:18:55,500
the jungle applications through D bus

450
00:18:55,500 --> 00:18:58,260
and performs the actual shell commands

451
00:18:58,260 --> 00:19:00,360
that will get you to the required

452
00:19:00,360 --> 00:19:02,790
results like creating a volume creating

453
00:19:02,790 --> 00:19:04,700
a file system setting up and share and

454
00:19:04,700 --> 00:19:07,020
you can basically take a look at the

455
00:19:07,020 --> 00:19:08,700
command log of system leaders to say

456
00:19:08,700 --> 00:19:10,050
check all the commands that we are

457
00:19:10,050 --> 00:19:13,530
issuing to get the job done with regards

458
00:19:13,530 --> 00:19:15,780
to communicating with a safe cluster as

459
00:19:15,780 --> 00:19:17,610
a set currently this is mostly based on

460
00:19:17,610 --> 00:19:20,970
liberal or slippery D this is a quick

461
00:19:20,970 --> 00:19:23,280
overview of how the monitoring takes

462
00:19:23,280 --> 00:19:27,300
place again the system being doesn't

463
00:19:27,300 --> 00:19:30,480
only configure the storage itself but it

464
00:19:30,480 --> 00:19:34,980
also uses ginger and creates Maggie's

465
00:19:34,980 --> 00:19:36,720
configuration files based on templates

466
00:19:36,720 --> 00:19:39,090
and then then restarts Nagios to make

467
00:19:39,090 --> 00:19:42,630
sure that the new starch objects are

468
00:19:42,630 --> 00:19:46,080
being properly monitored PP for Nagas

469
00:19:46,080 --> 00:19:47,790
does this information in round-robin

470
00:19:47,790 --> 00:19:50,430
databases and then we use the back end

471
00:19:50,430 --> 00:19:52,710
to take out that information to

472
00:19:52,710 --> 00:19:57,390
visualize it right now this is used with

473
00:19:57,390 --> 00:20:00,870
our D tool which creates PNG graphs and

474
00:20:00,870 --> 00:20:03,990
force F we are also using our ID tool to

475
00:20:03,990 --> 00:20:06,720
export JSON data and the rendering takes

476
00:20:06,720 --> 00:20:08,760
place on the web UI instead of just

477
00:20:08,760 --> 00:20:11,790
displaying static pngs this is how it

478
00:20:11,790 --> 00:20:13,560
looks like force F it's a bit more

479
00:20:13,560 --> 00:20:17,100
complicated here since we are using the

480
00:20:17,100 --> 00:20:18,990
Django application to talk to the safe

481
00:20:18,990 --> 00:20:21,060
cluster and we have an Argus plug in

482
00:20:21,060 --> 00:20:23,040
that sense it's check where is through

483
00:20:23,040 --> 00:20:26,010
the the nagas the jungle application but

484
00:20:26,010 --> 00:20:28,170
then again it writes the data to our D

485
00:20:28,170 --> 00:20:30,330
we use the JSON export for the

486
00:20:30,330 --> 00:20:34,320
visualization so what are we working on

487
00:20:34,320 --> 00:20:36,240
at the moment what's going what's

488
00:20:36,240 --> 00:20:40,050
cooking particular as I said the dr BD

489
00:20:40,050 --> 00:20:41,910
stuff needs to get finished this is

490
00:20:41,910 --> 00:20:43,080
something that we've been working for

491
00:20:43,080 --> 00:20:44,850
quite a while

492
00:20:44,850 --> 00:20:47,549
and one of the things we're currently

493
00:20:47,549 --> 00:20:50,820
missing is that we depend on the storage

494
00:20:50,820 --> 00:20:52,769
boots that we manage to be existing

495
00:20:52,769 --> 00:20:55,889
before so if you want to use ZFS you

496
00:20:55,889 --> 00:20:58,139
have to manually create the zpool on the

497
00:20:58,139 --> 00:20:59,759
command line first before we can make

498
00:20:59,759 --> 00:21:03,360
use of it similar for LVM once you have

499
00:21:03,360 --> 00:21:05,429
that starch who configured you can tell

500
00:21:05,429 --> 00:21:06,929
open data to register it and then

501
00:21:06,929 --> 00:21:09,299
creating the actual volumes on top of it

502
00:21:09,299 --> 00:21:11,759
can be done through the UI but that's

503
00:21:11,759 --> 00:21:12,960
something of course that we would like

504
00:21:12,960 --> 00:21:17,539
to change so that's work in progress I

505
00:21:17,539 --> 00:21:20,399
scuzzy fiber channel functionality needs

506
00:21:20,399 --> 00:21:22,470
to be expanded there's quite a lot of

507
00:21:22,470 --> 00:21:26,580
things that we haven't looked at yet we

508
00:21:26,580 --> 00:21:28,019
track all the things that are still open

509
00:21:28,019 --> 00:21:29,940
in the JIRA so we're not just tracking

510
00:21:29,940 --> 00:21:31,740
bugs there but all the ideas that we

511
00:21:31,740 --> 00:21:35,000
have and we try to group them into

512
00:21:35,000 --> 00:21:39,690
bigger stories - - yes to have useful

513
00:21:39,690 --> 00:21:41,909
chunks of work that somebody can take a

514
00:21:41,909 --> 00:21:48,149
look at when it comes to safely we just

515
00:21:48,149 --> 00:21:51,149
defined a few goals beforehand we want

516
00:21:51,149 --> 00:21:53,100
to be able to both manage and monitor a

517
00:21:53,100 --> 00:21:56,070
safe cluster through the UI and give it

518
00:21:56,070 --> 00:21:58,350
to that you as a seven administrate

519
00:21:58,350 --> 00:22:01,259
actually want to use right now there are

520
00:22:01,259 --> 00:22:03,179
a few tools out there that give you

521
00:22:03,179 --> 00:22:04,950
sometimes a little bit of monitoring

522
00:22:04,950 --> 00:22:07,950
sometimes a bit of management but we try

523
00:22:07,950 --> 00:22:10,200
to come up with a solution that gives

524
00:22:10,200 --> 00:22:13,850
you more rounded experience here

525
00:22:13,850 --> 00:22:16,409
especially considering that asset class

526
00:22:16,409 --> 00:22:18,720
that can become quite large with lots of

527
00:22:18,720 --> 00:22:23,490
objects and we make it or that we

528
00:22:23,490 --> 00:22:25,049
visualize it in a way that you're not

529
00:22:25,049 --> 00:22:26,700
getting overwhelmed did you only see the

530
00:22:26,700 --> 00:22:28,200
information that's really relevant for

531
00:22:28,200 --> 00:22:30,179
you at this point in time because well

532
00:22:30,179 --> 00:22:32,940
ideally Ceph is supposed to be kind of

533
00:22:32,940 --> 00:22:35,039
managing and itself and healing itself

534
00:22:35,039 --> 00:22:36,600
but you still maybe want to know about

535
00:22:36,600 --> 00:22:39,950
what's going on in the background

536
00:22:39,950 --> 00:22:43,529
and very importantly you should still be

537
00:22:43,529 --> 00:22:45,450
able to use the command line tools to

538
00:22:45,450 --> 00:22:47,549
make changes to your cluster without

539
00:22:47,549 --> 00:22:49,350
OpenNet getting confused by it that's

540
00:22:49,350 --> 00:22:51,269
one of the the big challenges that we

541
00:22:51,269 --> 00:22:54,690
had to face for the local storage

542
00:22:54,690 --> 00:22:57,629
systems that we manage we basically

543
00:22:57,629 --> 00:22:58,350
assume

544
00:22:58,350 --> 00:23:00,299
that open ethic is in charge of the

545
00:23:00,299 --> 00:23:03,030
configuration and once you started using

546
00:23:03,030 --> 00:23:05,299
open attic for the storage management

547
00:23:05,299 --> 00:23:07,710
well you can make changes manually but

548
00:23:07,710 --> 00:23:09,210
open attic will simply overwrite them

549
00:23:09,210 --> 00:23:11,010
the next time if you haven't made sure

550
00:23:11,010 --> 00:23:13,020
that automatic is aware of them and

551
00:23:13,020 --> 00:23:16,500
force F we are trying harder to make

552
00:23:16,500 --> 00:23:18,120
sure that this is possible so if you're

553
00:23:18,120 --> 00:23:19,770
using the safe command-line tools to

554
00:23:19,770 --> 00:23:22,140
create let's say another safe pool or an

555
00:23:22,140 --> 00:23:24,330
RVD of a netting needs to be aware of

556
00:23:24,330 --> 00:23:26,870
that and that was a bit of a challenge

557
00:23:26,870 --> 00:23:30,059
by the way of how django works and how

558
00:23:30,059 --> 00:23:33,570
it persists data and information I wish

559
00:23:33,570 --> 00:23:35,070
I had more time to talk about that but

560
00:23:35,070 --> 00:23:37,500
if we have time in the end maybe if

561
00:23:37,500 --> 00:23:39,690
you're interested I can share some of

562
00:23:39,690 --> 00:23:42,210
their ideas that we have there so what

563
00:23:42,210 --> 00:23:44,179
works when it comes to self we have a

564
00:23:44,179 --> 00:23:46,799
cluster status dashboard so you

565
00:23:46,799 --> 00:23:49,350
basically can see the overall cluster

566
00:23:49,350 --> 00:23:51,659
health some of the performance

567
00:23:51,659 --> 00:23:53,510
indicators with graphs and everything

568
00:23:53,510 --> 00:23:57,600
you can manage safe pools you can

569
00:23:57,600 --> 00:24:00,419
monitor them including Oratia coded

570
00:24:00,419 --> 00:24:03,299
profiles for the pools you are able to

571
00:24:03,299 --> 00:24:05,610
create Radice block devices through the

572
00:24:05,610 --> 00:24:08,250
web UI you can delete them again they

573
00:24:08,250 --> 00:24:12,539
are monitored we also start looking into

574
00:24:12,539 --> 00:24:15,409
the infrastructure so you have the be

575
00:24:15,409 --> 00:24:18,480
OSD manage well it's not management it

576
00:24:18,480 --> 00:24:20,190
but you can at least see all the OSD

577
00:24:20,190 --> 00:24:21,900
that are in your cluster in what state

578
00:24:21,900 --> 00:24:26,400
they are in when you're using deep sea

579
00:24:26,400 --> 00:24:28,470
as the backend to configure safe cluster

580
00:24:28,470 --> 00:24:30,419
you also get an inventory list of all

581
00:24:30,419 --> 00:24:32,039
the nodes that you cast the consists of

582
00:24:32,039 --> 00:24:35,190
in which role they have you can take a

583
00:24:35,190 --> 00:24:37,169
look at the the safe crash map which is

584
00:24:37,169 --> 00:24:39,659
the basically the algorithm that

585
00:24:39,659 --> 00:24:42,090
determines of how data is distributed in

586
00:24:42,090 --> 00:24:43,620
your cluster what kind of redundancy you

587
00:24:43,620 --> 00:24:45,690
have configured and how how the data

588
00:24:45,690 --> 00:24:48,740
should be distributed among the various

589
00:24:48,740 --> 00:24:52,980
availability levels so to say and we

590
00:24:52,980 --> 00:24:55,650
also want to make it possible that you

591
00:24:55,650 --> 00:24:57,480
can manage multiple safe clusters within

592
00:24:57,480 --> 00:24:59,820
one open attic instance so let's say you

593
00:24:59,820 --> 00:25:02,820
have a production safe cluster and the

594
00:25:02,820 --> 00:25:05,039
staging or a testing safe caster you can

595
00:25:05,039 --> 00:25:08,550
use one to to manage them both

596
00:25:08,550 --> 00:25:11,460
roadmap well that's just a small glimpse

597
00:25:11,460 --> 00:25:13,710
we have quite a long long there is only

598
00:25:13,710 --> 00:25:15,780
laundry list of stuff that we still want

599
00:25:15,780 --> 00:25:18,810
to accomplish the dashboard needs some

600
00:25:18,810 --> 00:25:20,970
more love and we would like to make much

601
00:25:20,970 --> 00:25:22,830
more information about the surplus the

602
00:25:22,830 --> 00:25:27,060
visible from the dashboard we also

603
00:25:27,060 --> 00:25:30,180
noticed that based on on the over the

604
00:25:30,180 --> 00:25:33,150
nature of self that some tasks take some

605
00:25:33,150 --> 00:25:36,180
time so you you a command to to lip to

606
00:25:36,180 --> 00:25:38,040
trigger an action in the surf cluster

607
00:25:38,040 --> 00:25:41,430
and it works and it may take some time

608
00:25:41,430 --> 00:25:46,590
and you have no way of knowing how much

609
00:25:46,590 --> 00:25:48,390
time it takes but as a web application

610
00:25:48,390 --> 00:25:50,310
your browser can't just stand still and

611
00:25:50,310 --> 00:25:51,840
wait because you would run into a

612
00:25:51,840 --> 00:25:55,920
timeout so one of the things that we had

613
00:25:55,920 --> 00:25:58,160
to come up with is a queuing mechanism

614
00:25:58,160 --> 00:26:01,530
where you can simply thank you see these

615
00:26:01,530 --> 00:26:03,330
jobs that take longer and then make sure

616
00:26:03,330 --> 00:26:05,640
that you get notified once it's finished

617
00:26:05,640 --> 00:26:08,160
so web application doesn't hang or you

618
00:26:08,160 --> 00:26:10,010
run into timeouts

619
00:26:10,010 --> 00:26:13,110
yeah the whole part about deploying and

620
00:26:13,110 --> 00:26:16,020
in remote configuration of notes with

621
00:26:16,020 --> 00:26:17,640
with salt is something that we are very

622
00:26:17,640 --> 00:26:19,320
closely working on with the deep-sea

623
00:26:19,320 --> 00:26:23,160
developers so at the next step you

624
00:26:23,160 --> 00:26:25,170
should not only be able to see all the

625
00:26:25,170 --> 00:26:26,820
existing notes but we would like to make

626
00:26:26,820 --> 00:26:30,000
possible for you to simply boot up a new

627
00:26:30,000 --> 00:26:31,860
note that registers with thought and he

628
00:26:31,860 --> 00:26:34,580
will see that a new note has joined and

629
00:26:34,580 --> 00:26:38,100
used salt minyan basically and you could

630
00:26:38,100 --> 00:26:40,440
then use open etic to assign role to

631
00:26:40,440 --> 00:26:42,420
that note let's say this is going to be

632
00:26:42,420 --> 00:26:45,120
a new OSD click and then deep sea will

633
00:26:45,120 --> 00:26:47,520
BES its job to configure or not and

634
00:26:47,520 --> 00:26:53,610
accordingly more monitoring I scuzzy

635
00:26:53,610 --> 00:26:55,200
tired management is also something that

636
00:26:55,200 --> 00:26:57,930
we are looking into so basically you

637
00:26:57,930 --> 00:27:00,300
define one node in your cluster as an

638
00:27:00,300 --> 00:27:02,880
icicle the target host in which are BD

639
00:27:02,880 --> 00:27:04,830
images from the circus will be made

640
00:27:04,830 --> 00:27:08,940
available as ice Casas targets of netic

641
00:27:08,940 --> 00:27:10,830
already supports that but only on the

642
00:27:10,830 --> 00:27:12,210
local node where open the attic is

643
00:27:12,210 --> 00:27:15,570
running on so usually if you consider

644
00:27:15,570 --> 00:27:17,460
the open attic node as a management not

645
00:27:17,460 --> 00:27:19,500
it's usually not having the performance

646
00:27:19,500 --> 00:27:20,280
crime

647
00:27:20,280 --> 00:27:23,370
parameters that you would need for a

648
00:27:23,370 --> 00:27:25,350
full-fledged ice Kazi target server

649
00:27:25,350 --> 00:27:27,390
usually that should be a bit more

650
00:27:27,390 --> 00:27:30,210
powerful machine and and to avoid having

651
00:27:30,210 --> 00:27:32,190
to install open ethic on that note as

652
00:27:32,190 --> 00:27:33,680
well we're now looking into using

653
00:27:33,680 --> 00:27:38,240
deep-sea and software for that instead

654
00:27:38,240 --> 00:27:40,440
rather Skateway is another big

655
00:27:40,440 --> 00:27:43,650
construction site the thing is that

656
00:27:43,650 --> 00:27:46,820
except us consists of several components

657
00:27:46,820 --> 00:27:50,490
and they they have their own way of how

658
00:27:50,490 --> 00:27:51,780
they are being managed they have their

659
00:27:51,780 --> 00:27:53,780
own API of how you need to talk to them

660
00:27:53,780 --> 00:27:56,100
in the case of Rather's gateway for

661
00:27:56,100 --> 00:27:58,050
example there's a rather Skateway admin

662
00:27:58,050 --> 00:28:00,540
ops api which you need to use to talk

663
00:28:00,540 --> 00:28:02,790
with the gateway for creating and

664
00:28:02,790 --> 00:28:05,760
managing the users and the buckets and

665
00:28:05,760 --> 00:28:08,520
so on so we need to develop the the

666
00:28:08,520 --> 00:28:10,560
interface on our and to establish that

667
00:28:10,560 --> 00:28:14,220
communication path and the existing

668
00:28:14,220 --> 00:28:18,000
functionality in like the RBD management

669
00:28:18,000 --> 00:28:20,010
or the pool management still needs a lot

670
00:28:20,010 --> 00:28:21,800
of more features that we're working on

671
00:28:21,800 --> 00:28:25,710
and also monitoring is one of the things

672
00:28:25,710 --> 00:28:29,310
that we need to expand right now the

673
00:28:29,310 --> 00:28:31,620
expectation is that open attic and the

674
00:28:31,620 --> 00:28:34,500
nagas instance runs on that note in a

675
00:28:34,500 --> 00:28:36,360
distributed cluster except this is not

676
00:28:36,360 --> 00:28:38,220
going to scale so we are looking for a

677
00:28:38,220 --> 00:28:41,100
more lightweight approach the current

678
00:28:41,100 --> 00:28:43,140
plan is that we were using connect D for

679
00:28:43,140 --> 00:28:46,200
that so each set node also a runs

680
00:28:46,200 --> 00:28:48,600
connect D configured in a way that it

681
00:28:48,600 --> 00:28:51,570
just forwards the monitoring data to a

682
00:28:51,570 --> 00:28:54,300
central collecti instance so you have a

683
00:28:54,300 --> 00:28:56,190
way to consolidate the monitoring data

684
00:28:56,190 --> 00:28:57,990
on one node which will make it much

685
00:28:57,990 --> 00:29:01,800
easier to ya monitor and visualize the

686
00:29:01,800 --> 00:29:04,320
whole cast of status in its individual

687
00:29:04,320 --> 00:29:08,040
nodes all right I didn't dare

688
00:29:08,040 --> 00:29:09,870
challenging the demo gods that forced

689
00:29:09,870 --> 00:29:11,160
them because network is usually

690
00:29:11,160 --> 00:29:13,800
something that you can't rely on you

691
00:29:13,800 --> 00:29:15,390
have to live with a few screenshots but

692
00:29:15,390 --> 00:29:17,160
we have a live demo that you can toy

693
00:29:17,160 --> 00:29:19,620
around with if you like the links will

694
00:29:19,620 --> 00:29:23,930
be later the stage this is our

695
00:29:23,930 --> 00:29:26,610
traditional storage management dashboard

696
00:29:26,610 --> 00:29:28,260
so to say those so this is what you see

697
00:29:28,260 --> 00:29:30,650
when you're using automatic for managing

698
00:29:30,650 --> 00:29:32,210
traditional storage like

699
00:29:32,210 --> 00:29:36,980
somewhere NFS and so on you can create

700
00:29:36,980 --> 00:29:38,990
and define the volumes they are listed

701
00:29:38,990 --> 00:29:40,850
over here and for each volume we also

702
00:29:40,850 --> 00:29:44,840
create monitoring data and performance

703
00:29:44,840 --> 00:29:48,380
data that you could take a look at it's

704
00:29:48,380 --> 00:29:51,050
a bit hard to see if you if you click on

705
00:29:51,050 --> 00:29:52,670
the demo you you can tie your own

706
00:29:52,670 --> 00:29:55,880
process and see it in more details one

707
00:29:55,880 --> 00:29:58,670
of the things that is quite interesting

708
00:29:58,670 --> 00:30:01,970
int it's pretty unique I haven't seen it

709
00:30:01,970 --> 00:30:04,220
in any other applications first what we

710
00:30:04,220 --> 00:30:06,950
call our API recorder so as I said

711
00:30:06,950 --> 00:30:10,240
though the web UI uses the REST API

712
00:30:10,240 --> 00:30:13,310
exclusively the web UI uses the REST API

713
00:30:13,310 --> 00:30:15,590
exclusively to talk with the automatic

714
00:30:15,590 --> 00:30:18,800
back-end and sometimes you don't want to

715
00:30:18,800 --> 00:30:20,420
use the UI but you want to automate

716
00:30:20,420 --> 00:30:22,840
certain tasks in a script or something

717
00:30:22,840 --> 00:30:25,730
through the open attic REST API so

718
00:30:25,730 --> 00:30:27,710
instead of having to look up the

719
00:30:27,710 --> 00:30:30,680
documentation for the API you basically

720
00:30:30,680 --> 00:30:33,740
enable the the API recorder in the UI

721
00:30:33,740 --> 00:30:36,140
and you click through the task that you

722
00:30:36,140 --> 00:30:37,550
want to accomplish once and then you

723
00:30:37,550 --> 00:30:39,920
stop the API recorder and it will

724
00:30:39,920 --> 00:30:42,530
automatically create a small Python

725
00:30:42,530 --> 00:30:44,690
script snippet that basically includes

726
00:30:44,690 --> 00:30:46,850
all the REST API calls that you have

727
00:30:46,850 --> 00:30:48,710
performed so you can use these as a

728
00:30:48,710 --> 00:30:50,810
snippet or template to embed in your

729
00:30:50,810 --> 00:30:53,360
application to get the same or to repeat

730
00:30:53,360 --> 00:30:57,410
this particular task this is the Ceph

731
00:30:57,410 --> 00:31:00,050
cluster dashboard as you can see we're

732
00:31:00,050 --> 00:31:02,380
using a different graphing engine here

733
00:31:02,380 --> 00:31:06,470
this way we are we are extracting the

734
00:31:06,470 --> 00:31:08,180
data from the round robin database

735
00:31:08,180 --> 00:31:10,910
through JSON and then use JavaScript

736
00:31:10,910 --> 00:31:12,770
libraries to visualize it which makes it

737
00:31:12,770 --> 00:31:15,140
much easier and much more dynamic to

738
00:31:15,140 --> 00:31:18,320
work with the data on the UI the

739
00:31:18,320 --> 00:31:19,970
dashboard is fully configurable so you

740
00:31:19,970 --> 00:31:22,010
can resize and rearrange those widgets

741
00:31:22,010 --> 00:31:25,040
you can have multiple dashboards and

742
00:31:25,040 --> 00:31:27,560
they are stored with your user profiles

743
00:31:27,560 --> 00:31:29,480
if another administrator logs in he can

744
00:31:29,480 --> 00:31:32,450
set up a dashboard by his means and and

745
00:31:32,450 --> 00:31:35,000
doesn't have to take over what you have

746
00:31:35,000 --> 00:31:38,260
configured basically

747
00:31:38,490 --> 00:31:42,120
you can also mix UI elements from both

748
00:31:42,120 --> 00:31:44,640
the traditional side or the SEF cluster

749
00:31:44,640 --> 00:31:47,190
side or if you have multiple SEF

750
00:31:47,190 --> 00:31:48,960
Buster's you have could create one

751
00:31:48,960 --> 00:31:50,460
dashboard that shows you the overall

752
00:31:50,460 --> 00:31:53,520
view for both clusters in one page so

753
00:31:53,520 --> 00:31:57,260
you can really tweak it to your liking

754
00:31:57,260 --> 00:32:00,870
safe pool lists as you see we are always

755
00:32:00,870 --> 00:32:05,280
using the same UI elements with a data

756
00:32:05,280 --> 00:32:06,720
table on top and then the grass

757
00:32:06,720 --> 00:32:09,930
underneath one things that I have on my

758
00:32:09,930 --> 00:32:11,550
wish list is that I would like to make

759
00:32:11,550 --> 00:32:14,160
it possible that these graphs that are

760
00:32:14,160 --> 00:32:15,900
currently belong to a certain set who

761
00:32:15,900 --> 00:32:18,120
could also be taken and pinned onto the

762
00:32:18,120 --> 00:32:20,670
front dashboard so you if you have a

763
00:32:20,670 --> 00:32:22,020
certain pool that you want to monitor

764
00:32:22,020 --> 00:32:24,180
more closely it should be possible to

765
00:32:24,180 --> 00:32:26,130
drag it on the on the front dashboard

766
00:32:26,130 --> 00:32:29,580
and make it visible name yeah set

767
00:32:29,580 --> 00:32:31,740
procreation some of the features that we

768
00:32:31,740 --> 00:32:35,070
support here boring let's keep all that

769
00:32:35,070 --> 00:32:37,290
our BD if these are the block device

770
00:32:37,290 --> 00:32:42,480
lists now I think the pull request is

771
00:32:42,480 --> 00:32:44,100
almost done that you will also see the

772
00:32:44,100 --> 00:32:49,980
utilization of the RB DS here Oh see

773
00:32:49,980 --> 00:32:53,550
it's repeating as I said screenshots are

774
00:32:53,550 --> 00:32:56,520
not as exciting as a live demo but my

775
00:32:56,520 --> 00:32:58,530
past experiences at first then was that

776
00:32:58,530 --> 00:33:00,090
the network usually works by the time

777
00:33:00,090 --> 00:33:03,840
you're about to head home so oh that's

778
00:33:03,840 --> 00:33:05,640
the crash map editor as I said basically

779
00:33:05,640 --> 00:33:08,910
you see a visualization of the topology

780
00:33:08,910 --> 00:33:11,580
and you are able to drag notes around it

781
00:33:11,580 --> 00:33:13,230
you can add new nodes change the

782
00:33:13,230 --> 00:33:16,260
properties here and with that I'm

783
00:33:16,260 --> 00:33:18,540
already at my link list these are some

784
00:33:18,540 --> 00:33:20,190
of the resources that you can take a

785
00:33:20,190 --> 00:33:23,910
look on we have a Google group for

786
00:33:23,910 --> 00:33:26,490
discussion that serves our mailing list

787
00:33:26,490 --> 00:33:29,160
/ forum if you want to get in touch we

788
00:33:29,160 --> 00:33:31,440
are on hash open attic on free nodes as

789
00:33:31,440 --> 00:33:33,600
well so come over there if you have

790
00:33:33,600 --> 00:33:35,810
questions with suggestions

791
00:33:35,810 --> 00:33:38,670
most of the discussion really happens on

792
00:33:38,670 --> 00:33:41,130
bitbucket and in the form of the pull

793
00:33:41,130 --> 00:33:42,840
requests there's a lot of communication

794
00:33:42,840 --> 00:33:44,610
between the developers working on the

795
00:33:44,610 --> 00:33:47,370
code and then of course on our bug

796
00:33:47,370 --> 00:33:49,639
tracker

797
00:33:50,320 --> 00:33:54,070
so yeah these are the key resources to

798
00:33:54,070 --> 00:33:55,570
get in touch with us first

799
00:33:55,570 --> 00:33:58,690
and with that I'm a bit ahead of my time

800
00:33:58,690 --> 00:34:01,990
amazing so if you have questions we

801
00:34:01,990 --> 00:34:07,600
still have time for that I know it's

802
00:34:07,600 --> 00:34:14,819
after lunch okay here's the question

803
00:34:16,168 --> 00:34:19,600
when is software ever ready when it's

804
00:34:19,600 --> 00:34:22,418
software ever ready no ethic 200 is out

805
00:34:22,418 --> 00:34:27,159
and based on all the testing that we do

806
00:34:27,159 --> 00:34:28,570
we are pretty confident that each

807
00:34:28,570 --> 00:34:30,310
release that we publish is safe to use

808
00:34:30,310 --> 00:34:32,139
the good thing about our phonetic

809
00:34:32,139 --> 00:34:34,600
especially if you use it for traditional

810
00:34:34,600 --> 00:34:36,429
storage management even though if

811
00:34:36,429 --> 00:34:39,429
automatic crashes that the actual

812
00:34:39,429 --> 00:34:41,650
serving of data is performed by other

813
00:34:41,650 --> 00:34:43,630
subsystems of the operating system like

814
00:34:43,630 --> 00:34:46,630
the Samba server like kernel NFS we are

815
00:34:46,630 --> 00:34:49,000
not really in the path of serving the

816
00:34:49,000 --> 00:34:51,429
data to prove the users even if

817
00:34:51,429 --> 00:34:54,250
automatic has a problem and crashes

818
00:34:54,250 --> 00:34:57,150
which doesn't really happen that often

819
00:34:57,150 --> 00:34:59,170
we are not messing with your data

820
00:34:59,170 --> 00:35:01,180
directly unless you really accidentally

821
00:35:01,180 --> 00:35:04,600
delete in something like that or so but

822
00:35:04,600 --> 00:35:06,760
we are still of course in the process of

823
00:35:06,760 --> 00:35:08,380
adding more functionality with each

824
00:35:08,380 --> 00:35:10,120
release as I said we have the Train

825
00:35:10,120 --> 00:35:12,190
model so what we have out right now is

826
00:35:12,190 --> 00:35:14,760
it's ready to use and can be used with

827
00:35:14,760 --> 00:35:18,190
with confidence but as I said it we

828
00:35:18,190 --> 00:35:20,110
still have a lot of gaps to fill and of

829
00:35:20,110 --> 00:35:21,940
course we would like you to encourage to

830
00:35:21,940 --> 00:35:26,650
to give it a try and help us gathering

831
00:35:26,650 --> 00:35:28,870
guidance of where we should focus on

832
00:35:28,870 --> 00:35:32,350
next so we think that we have now come

833
00:35:32,350 --> 00:35:36,100
to a point where we provide a good set

834
00:35:36,100 --> 00:35:38,260
of useful functionality we are where we

835
00:35:38,260 --> 00:35:39,580
are not fully there yet compared to

836
00:35:39,580 --> 00:35:41,650
other projects but we would like to get

837
00:35:41,650 --> 00:35:43,870
your feedback on what your use cases are

838
00:35:43,870 --> 00:35:45,910
and what person and what you're looking

839
00:35:45,910 --> 00:35:47,950
for what we should be focusing on

840
00:35:47,950 --> 00:35:49,930
basically there was another question

841
00:35:49,930 --> 00:35:52,740
here

842
00:35:53,550 --> 00:35:55,990
so the question was if we have any plans

843
00:35:55,990 --> 00:35:59,880
to support Kerberos for authentication

844
00:35:59,880 --> 00:36:02,590
the thing is are you talking about using

845
00:36:02,590 --> 00:36:04,810
it for authenticating users to the web

846
00:36:04,810 --> 00:36:07,210
front-end and the answers that should

847
00:36:07,210 --> 00:36:09,010
work I haven't tested it personally but

848
00:36:09,010 --> 00:36:12,930
since we're using django django is

849
00:36:12,930 --> 00:36:15,700
capable of using external identification

850
00:36:15,700 --> 00:36:18,880
mechanisms so it's pretty pluggable as

851
00:36:18,880 --> 00:36:21,570
far as I know you can for example II use

852
00:36:21,570 --> 00:36:25,150
Pam the pluggable authentication modules

853
00:36:25,150 --> 00:36:27,220
that the Linux operating system supports

854
00:36:27,220 --> 00:36:29,320
so if you configure general to use Pam

855
00:36:29,320 --> 00:36:30,970
for your users or phonetic will honor

856
00:36:30,970 --> 00:36:34,230
that and what should work with it

857
00:36:34,230 --> 00:36:39,820
there's a question of how do we do

858
00:36:39,820 --> 00:36:41,710
different set versions currently we

859
00:36:41,710 --> 00:36:46,800
don't we say you need to use Jewel sorry

860
00:36:50,850 --> 00:36:52,870
no further questions

861
00:36:52,870 --> 00:36:56,620
last chance okay thank you very much for

862
00:36:56,620 --> 00:36:57,310
your attention

863
00:36:57,310 --> 00:37:04,469
[Applause]

