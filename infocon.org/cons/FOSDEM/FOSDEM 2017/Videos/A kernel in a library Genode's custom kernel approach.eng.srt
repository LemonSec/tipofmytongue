1
00:00:00,000 --> 00:00:02,690
and welcome from

2
00:00:04,540 --> 00:00:06,759
do you not laughs and I'd like to talk

3
00:00:06,759 --> 00:00:13,830
about our custom kernel approach and the

4
00:00:13,830 --> 00:00:16,390
talk is structured the following way and

5
00:00:16,390 --> 00:00:19,180
first chapter I'd like to talk about how

6
00:00:19,180 --> 00:00:23,160
what motivated us to create all O'Connor

7
00:00:23,160 --> 00:00:27,189
and the second chapter I give a little

8
00:00:27,189 --> 00:00:31,390
overview about general qualities of this

9
00:00:31,390 --> 00:00:34,690
corner and how it works in general

10
00:00:34,690 --> 00:00:37,150
and in Chapter three four and five I

11
00:00:37,150 --> 00:00:39,580
will go into detail about some features

12
00:00:39,580 --> 00:00:43,780
of the corner yeah let's start with the

13
00:00:43,780 --> 00:00:47,980
motivation one big advantage of G note

14
00:00:47,980 --> 00:00:51,540
is that you can run it of various

15
00:00:51,540 --> 00:00:55,930
corners like Nova like if you're a four

16
00:00:55,930 --> 00:00:59,260
corners like I said for Linux and so on

17
00:00:59,260 --> 00:01:04,229
and that gives you great flexibility in

18
00:01:04,229 --> 00:01:08,049
development and application of G note so

19
00:01:08,049 --> 00:01:10,899
you can for instance some kernels have a

20
00:01:10,899 --> 00:01:14,469
cool debugger built in and some kernels

21
00:01:14,469 --> 00:01:18,100
are specialized on security like there's

22
00:01:18,100 --> 00:01:22,200
a four corner and so you can choose

23
00:01:22,200 --> 00:01:24,750
in the application and the user

24
00:01:24,750 --> 00:01:26,610
applications it doesn't matter which

25
00:01:26,610 --> 00:01:30,150
color you use for for the basic for the

26
00:01:30,150 --> 00:01:34,140
basic features and the second big

27
00:01:34,140 --> 00:01:37,560
advantage of supporting many colors is

28
00:01:37,560 --> 00:01:41,729
that you have a lot of different ways of

29
00:01:41,729 --> 00:01:44,430
testing the system on top of it so you

30
00:01:44,430 --> 00:01:46,320
have different timing you have different

31
00:01:46,320 --> 00:01:49,740
scheduling you have in general a

32
00:01:49,740 --> 00:01:53,430
different behavior at the base and so

33
00:01:53,430 --> 00:01:57,509
you can get much harder testing for your

34
00:01:57,509 --> 00:02:04,049
for your system on top yeah so when you

35
00:02:04,049 --> 00:02:06,030
look at this combination G note in the

36
00:02:06,030 --> 00:02:08,100
corner it's normally the way that you

37
00:02:08,100 --> 00:02:11,190
have a microkernel that is developed on

38
00:02:11,190 --> 00:02:14,400
its own and aims for comprehensive

39
00:02:14,400 --> 00:02:17,250
security concepts so it likes to be

40
00:02:17,250 --> 00:02:20,220
self-contained and mistrusts all that is

41
00:02:20,220 --> 00:02:23,880
on top of it of course this brings a

42
00:02:23,880 --> 00:02:25,880
little bit of problems with it because

43
00:02:25,880 --> 00:02:28,590
you then have the core G notes core

44
00:02:28,590 --> 00:02:34,140
component that has to pray these this

45
00:02:34,140 --> 00:02:37,560
paranoid corner perspective in line with

46
00:02:37,560 --> 00:02:41,609
the G note API on top of it and the

47
00:02:41,609 --> 00:02:44,130
misery here is that the core component

48
00:02:44,130 --> 00:02:45,930
of G know it must be trusted anyway by

49
00:02:45,930 --> 00:02:50,549
all the components on top so you don't

50
00:02:50,549 --> 00:02:56,340
it yeah you you don't have much

51
00:02:56,340 --> 00:02:59,310
advantage from this extra effort you

52
00:02:59,310 --> 00:03:05,010
spend so of course there are some

53
00:03:05,010 --> 00:03:07,489
drawbacks that come from this aspect

54
00:03:07,489 --> 00:03:10,850
first you have to shape some concepts

55
00:03:10,850 --> 00:03:15,750
the way you like it to be for example on

56
00:03:15,750 --> 00:03:17,040
some corners for asynchronous

57
00:03:17,040 --> 00:03:20,220
communication you have

58
00:03:20,220 --> 00:03:23,030
you have semaphores for instance and

59
00:03:23,030 --> 00:03:26,130
these semaphores must be abandoned shape

60
00:03:26,130 --> 00:03:28,020
to support the asynchronous

61
00:03:28,020 --> 00:03:30,300
communication API that we used on G node

62
00:03:30,300 --> 00:03:35,690
so the signals in in this instance so

63
00:03:35,690 --> 00:03:38,910
the other thing is that often work is

64
00:03:38,910 --> 00:03:42,780
done right and done T so the memory

65
00:03:42,780 --> 00:03:46,110
management for example must be done

66
00:03:46,110 --> 00:03:48,930
redundant ly in the core because the G

67
00:03:48,930 --> 00:03:52,080
note API differs a lot from that memory

68
00:03:52,080 --> 00:03:54,450
management API that cannot support

69
00:03:54,450 --> 00:03:59,100
normally and at some points there are

70
00:03:59,100 --> 00:04:02,310
even deficiency that you can't source so

71
00:04:02,310 --> 00:04:04,740
you have to work around it

72
00:04:04,740 --> 00:04:07,560
for instance capability delegation on

73
00:04:07,560 --> 00:04:09,720
some corners you have the problem that

74
00:04:09,720 --> 00:04:11,820
you have to remember capabilities at

75
00:04:11,820 --> 00:04:13,380
certain places where you normally

76
00:04:13,380 --> 00:04:17,430
wouldn't have to use in the genotype III

77
00:04:17,430 --> 00:04:19,620
but you have to because the kernel

78
00:04:19,620 --> 00:04:26,930
otherwise revoke the capability so yeah

79
00:04:26,930 --> 00:04:31,520
well we came up with the idea of

80
00:04:31,520 --> 00:04:34,260
creating our own corner this corner

81
00:04:34,260 --> 00:04:38,400
should trust core because it's rusted

82
00:04:38,400 --> 00:04:41,240
anyway as I said and should be

83
00:04:41,240 --> 00:04:44,130
completely tailored to serve the needs

84
00:04:44,130 --> 00:04:46,610
of course

85
00:04:53,560 --> 00:04:57,310
and in that it can be reduced to a

86
00:04:57,310 --> 00:04:59,260
minimalistic library that is linked to

87
00:04:59,260 --> 00:05:02,350
core and simply unable to run directly

88
00:05:02,350 --> 00:05:07,210
on the hardware and having the G note

89
00:05:07,210 --> 00:05:11,260
the kernel API you can also run the most

90
00:05:11,260 --> 00:05:14,710
critical parts of the system and simply

91
00:05:14,710 --> 00:05:19,420
in a more simple manner than link or for

92
00:05:19,420 --> 00:05:22,260
instance cause the multi-threaded

93
00:05:22,260 --> 00:05:27,310
application you and some things are much

94
00:05:27,310 --> 00:05:29,440
easier if you are not multi-threaded for

95
00:05:29,440 --> 00:05:35,170
for example so let's talk about a little

96
00:05:35,170 --> 00:05:40,110
bit a little bit about the kernel itself

97
00:05:40,110 --> 00:05:45,070
the tasks behind the color API are at

98
00:05:45,070 --> 00:05:51,250
first the exception actors setting up

99
00:05:51,250 --> 00:05:54,340
the exception vectors and catching

100
00:05:54,340 --> 00:05:58,950
exceptions as a main task of the corner

101
00:05:59,520 --> 00:06:03,910
doing the scheduling of course for the

102
00:06:03,910 --> 00:06:07,630
my project components on top then the

103
00:06:07,630 --> 00:06:09,669
coder controls the interrupts of course

104
00:06:09,669 --> 00:06:11,410
because there's the exception vectors

105
00:06:11,410 --> 00:06:16,720
and it provides communication in our

106
00:06:16,720 --> 00:06:19,750
case it's only two communication

107
00:06:19,750 --> 00:06:21,370
channels you have IPC and you have

108
00:06:21,370 --> 00:06:22,780
signals for synchronous and asynchronous

109
00:06:22,780 --> 00:06:27,010
communication the engine supports

110
00:06:27,010 --> 00:06:31,240
capabilities so you have trusted

111
00:06:31,240 --> 00:06:33,040
capabilities on top and you have local

112
00:06:33,040 --> 00:06:36,460
names and HP protection domain that

113
00:06:36,460 --> 00:06:39,840
can't be misused

114
00:06:40,510 --> 00:06:44,290
and it does cash and he'll be

115
00:06:44,290 --> 00:06:46,660
maintenance because on most

116
00:06:46,660 --> 00:06:49,090
architectures these are privileged

117
00:06:49,090 --> 00:06:53,890
operations and last but not least it

118
00:06:53,890 --> 00:06:57,160
does virtualization for the same reason

119
00:06:57,160 --> 00:06:59,950
as for cache and TLB maintenance and

120
00:06:59,950 --> 00:07:01,840
because that has the accept you back

121
00:07:01,840 --> 00:07:07,680
toes so the API does that rises from

122
00:07:07,680 --> 00:07:13,150
these tasks pretty simple you can see in

123
00:07:13,150 --> 00:07:17,920
the top row these are all sis calls that

124
00:07:17,920 --> 00:07:21,160
are caught only so only the core

125
00:07:21,160 --> 00:07:22,930
component of GNote is allowed to do

126
00:07:22,930 --> 00:07:27,220
these holes at all and in the bottom row

127
00:07:27,220 --> 00:07:30,520
you see the the public api of the corona

128
00:07:30,520 --> 00:07:33,010
so these source codes can be done by

129
00:07:33,010 --> 00:07:38,380
each user and you see these are not not

130
00:07:38,380 --> 00:07:42,820
many circles it's 14 counted right and

131
00:07:42,820 --> 00:07:47,310
it's mostly about yeah fred's signals

132
00:07:47,310 --> 00:07:52,720
messaging and some capability sense

133
00:07:52,720 --> 00:07:54,790
calls to manage the capabilities in the

134
00:07:54,790 --> 00:07:59,140
local PD and all all the memory

135
00:07:59,140 --> 00:08:02,350
management you can see is the memory

136
00:08:02,350 --> 00:08:04,630
management for for the corner you did

137
00:08:04,630 --> 00:08:07,750
the new and delete sis calls are all in

138
00:08:07,750 --> 00:08:14,770
the core only searching so yeah this

139
00:08:14,770 --> 00:08:16,960
brings me to the first quality of the

140
00:08:16,960 --> 00:08:20,740
corner that all dynamic memory is

141
00:08:20,740 --> 00:08:24,850
accounted because for each kernel object

142
00:08:24,850 --> 00:08:29,560
that is created in on runtime you have

143
00:08:29,560 --> 00:08:32,950
to put in some memory from outside so

144
00:08:32,950 --> 00:08:35,289
from core

145
00:08:35,289 --> 00:08:38,198
and in core we have a good memory

146
00:08:38,198 --> 00:08:41,019
management and so these memory

147
00:08:41,019 --> 00:08:43,870
management reflects the cost for the

148
00:08:43,870 --> 00:08:46,959
kernel objects to the session quota on

149
00:08:46,959 --> 00:08:51,519
top of the G note API so in general for

150
00:08:51,519 --> 00:08:54,220
each kernel object you create you have

151
00:08:54,220 --> 00:08:57,940
to pay as user and this brings with it

152
00:08:57,940 --> 00:09:01,209
the kernel can't be can't run out of

153
00:09:01,209 --> 00:09:04,720
memory and yeah that's that's a big

154
00:09:04,720 --> 00:09:10,449
advantage of this corner and the other

155
00:09:10,449 --> 00:09:15,550
thing is that this way the whole corner

156
00:09:15,550 --> 00:09:16,660
is a mirror

157
00:09:16,660 --> 00:09:20,139
state machine so you can keep it signify

158
00:09:20,139 --> 00:09:24,569
that you you don't have any dynamic

159
00:09:24,569 --> 00:09:29,110
stuff that is created and this makes the

160
00:09:29,110 --> 00:09:32,949
corner pretty small it's really low

161
00:09:32,949 --> 00:09:36,670
complex and all you do in the code every

162
00:09:36,670 --> 00:09:38,470
time you in the corner you're the only

163
00:09:38,470 --> 00:09:41,079
one that is in the corner so you are

164
00:09:41,079 --> 00:09:44,199
really fast you don't block you are not

165
00:09:44,199 --> 00:09:47,860
interrupted and kernel passes got really

166
00:09:47,860 --> 00:09:54,190
fast in general so speaking about low

167
00:09:54,190 --> 00:09:56,610
complex I have a little picture you're

168
00:09:56,610 --> 00:10:03,100
normally a few on GNote and you have one

169
00:10:03,100 --> 00:10:08,139
of the party kernels you have in in the

170
00:10:08,139 --> 00:10:11,709
basic set of say called the corner and

171
00:10:11,709 --> 00:10:13,959
the inner component and some bootstrap

172
00:10:13,959 --> 00:10:17,110
comp tools on some corners you have at

173
00:10:17,110 --> 00:10:19,779
least 30,000 lines of code that you have

174
00:10:19,779 --> 00:10:23,199
to trust from every component on top of

175
00:10:23,199 --> 00:10:29,529
it and this is already pretty small but

176
00:10:29,529 --> 00:10:33,490
with the Toscana library approach we can

177
00:10:33,490 --> 00:10:37,449
reduce it to about 22,000 lines of code

178
00:10:37,449 --> 00:10:40,349
yeah

179
00:10:41,330 --> 00:10:43,670
about a hot war support of the colony

180
00:10:43,670 --> 00:10:48,290
initially Turkana was developed on arm7

181
00:10:48,290 --> 00:10:51,980
and so the most features it provides on

182
00:10:51,980 --> 00:10:56,440
this architecture of course it provides

183
00:10:56,440 --> 00:10:59,510
several boards you can see in here like

184
00:10:59,510 --> 00:11:05,300
pre skateboards or Exynos and yeah the

185
00:11:05,300 --> 00:11:08,630
omote 4 for example and you have various

186
00:11:08,630 --> 00:11:10,970
features that are supported like the arm

187
00:11:10,970 --> 00:11:14,920
trust own features multiprocessing

188
00:11:14,920 --> 00:11:19,130
virtualization or FPU or something like

189
00:11:19,130 --> 00:11:25,510
that and of course we also support our

190
00:11:32,890 --> 00:11:35,890
six

191
00:11:45,170 --> 00:11:48,349
[Music]

192
00:11:54,220 --> 00:12:01,470
[Music]

193
00:12:31,060 --> 00:12:33,420
[Music]

194
00:12:33,420 --> 00:12:52,210
priority and having only priority like a

195
00:12:52,210 --> 00:12:53,970
quality

196
00:12:53,970 --> 00:12:56,550
you is not enough we have to have

197
00:12:56,550 --> 00:13:01,860
another one is like a point value or the

198
00:13:01,860 --> 00:13:05,149
seeking resources and we haver the

199
00:13:05,149 --> 00:13:11,129
Dakota city Porter CBO is like the time

200
00:13:11,129 --> 00:13:13,500
size you have a super figure of a

201
00:13:13,500 --> 00:13:17,069
hundred percent currently it is to 1

202
00:13:17,069 --> 00:13:24,510
second is one second

203
00:13:24,510 --> 00:13:33,690
tonight it's nice to components then

204
00:13:33,690 --> 00:13:37,620
that's the principle a component has

205
00:13:37,620 --> 00:13:40,589
only a priority if it also has quote on

206
00:13:40,589 --> 00:13:52,459
so if you are and as long as there is a

207
00:13:52,459 --> 00:14:07,529
priority from before we have again or

208
00:14:07,529 --> 00:14:09,959
USB that goes met at some point and you

209
00:14:09,959 --> 00:14:14,339
can see that in the super period exceeds

210
00:14:14,339 --> 00:14:19,790
its own photo by going mad and then it's

211
00:14:20,590 --> 00:14:23,769
[Music]

212
00:14:31,840 --> 00:14:36,920
in this in this so at the end of the

213
00:14:36,920 --> 00:14:39,140
super period all the clutter gets reset

214
00:14:39,140 --> 00:14:43,130
and there are again priorities and then

215
00:14:43,130 --> 00:14:45,020
you start again with the USB because it

216
00:14:45,020 --> 00:14:51,010
has gone mad and then it exceeds the way

217
00:14:51,010 --> 00:14:55,160
so this is a nice way of keeping the

218
00:14:55,160 --> 00:14:57,260
system life even if you have a high

219
00:14:57,260 --> 00:15:04,160
priority but what your net yeah okay

220
00:15:04,160 --> 00:15:07,490
another nice thing about the CPU

221
00:15:07,490 --> 00:15:10,280
resources is that they can be

222
00:15:10,280 --> 00:15:13,700
distributed in a way that resources are

223
00:15:13,700 --> 00:15:17,660
normally distributed and GNote so you

224
00:15:17,660 --> 00:15:21,260
have the parent of of a component tree

225
00:15:21,260 --> 00:15:26,300
that has a specific amount of quota of

226
00:15:26,300 --> 00:15:31,310
cpu quota and to fill its children with

227
00:15:31,310 --> 00:15:35,600
life it can just some of its photon and

228
00:15:35,600 --> 00:15:39,770
easterland can again like CL i gives

229
00:15:39,770 --> 00:15:41,720
VirtualBox again a little bit of its

230
00:15:41,720 --> 00:15:43,310
photo and so on and so on

231
00:15:43,310 --> 00:15:46,760
yeah so it's in the hands of the parents

232
00:15:46,760 --> 00:15:50,200
how much quota their children get and

233
00:15:50,200 --> 00:15:53,450
the same is with the priorities you have

234
00:15:53,450 --> 00:15:58,160
at the root of the tree the Internet has

235
00:15:58,160 --> 00:16:02,420
all priorities 1 to 8 and then can give

236
00:16:02,420 --> 00:16:06,170
a sub range of new priorities to a

237
00:16:06,170 --> 00:16:12,380
children and so on and so ok let's talk

238
00:16:12,380 --> 00:16:15,790
about the capabilities are a bit that's

239
00:16:15,790 --> 00:16:18,650
one one cool thing about capabilities on

240
00:16:18,650 --> 00:16:22,090
the basic W kernel is that the

241
00:16:22,090 --> 00:16:24,650
capabilities get or automatically

242
00:16:24,650 --> 00:16:29,360
created and translated so normally when

243
00:16:29,360 --> 00:16:32,630
you normally you get capabilities into

244
00:16:32,630 --> 00:16:36,320
your protection domain by receiving IP C

245
00:16:36,320 --> 00:16:39,260
and then this RPC message are

246
00:16:39,260 --> 00:16:42,260
local names of the other component that

247
00:16:42,260 --> 00:16:47,990
sent me this IP this IPC but I cannot

248
00:16:47,990 --> 00:16:49,640
use these local names of the other

249
00:16:49,640 --> 00:16:53,560
components or the kernel goes ahead and

250
00:16:53,560 --> 00:16:56,450
tries to translate these local names of

251
00:16:56,450 --> 00:16:58,640
the other protection domain to my own

252
00:16:58,640 --> 00:17:01,760
protection domain so I can directly use

253
00:17:01,760 --> 00:17:04,150
them without looking up any object or

254
00:17:04,150 --> 00:17:08,119
something like that and so when I

255
00:17:08,119 --> 00:17:11,180
received the message the the local names

256
00:17:11,180 --> 00:17:13,400
that I have in this IP symmetric message

257
00:17:13,400 --> 00:17:16,369
are already fine for me I can directly

258
00:17:16,369 --> 00:17:22,040
invoke them and it also if the kana now

259
00:17:22,040 --> 00:17:25,430
realizes all there's there's a local

260
00:17:25,430 --> 00:17:27,740
name of the the sender of the IP scene

261
00:17:27,740 --> 00:17:32,020
that is not present in there there is no

262
00:17:32,020 --> 00:17:37,880
no counter local name in the protection

263
00:17:37,880 --> 00:17:40,430
domain so the kernel goes ahead and

264
00:17:40,430 --> 00:17:45,110
creates automatically one for me so yeah

265
00:17:45,110 --> 00:17:47,630
I have no invalid local names when I

266
00:17:47,630 --> 00:17:55,000
received the message yeah and this

267
00:18:21,570 --> 00:18:27,559
[Music]

268
00:18:32,020 --> 00:18:35,020
so

269
00:18:58,970 --> 00:19:02,079
[Music]

270
00:19:19,670 --> 00:19:27,859
[Music]

271
00:20:13,590 --> 00:20:16,780
[Music]

272
00:20:25,110 --> 00:20:55,990
there's a because but between these two

273
00:20:55,990 --> 00:20:59,920
points as well the local name object was

274
00:20:59,920 --> 00:21:06,760
already created now

275
00:21:06,760 --> 00:21:16,300
one thread in my application thread also

276
00:21:16,300 --> 00:21:22,740
receives it and during this aquifer

277
00:21:22,740 --> 00:21:26,280
mangles the capability from the UTC be

278
00:21:26,280 --> 00:21:30,700
the first fried starts with elated it

279
00:21:30,700 --> 00:21:33,780
would be paid to

280
00:21:50,600 --> 00:21:53,879
so the userland has to acknowledge when

281
00:21:53,879 --> 00:21:59,330
it has received the capability and as

282
00:22:19,340 --> 00:22:22,790
and I have to

283
00:22:35,660 --> 00:22:38,739
[Music]

284
00:22:43,540 --> 00:22:48,650
okay talking about communication this is

285
00:22:48,650 --> 00:22:53,840
a short topic first about IPC queer

286
00:22:53,840 --> 00:22:56,210
thing about IPC is on the basic trouble

287
00:22:56,210 --> 00:22:58,660
O'Connor that implicitly delegates

288
00:22:58,660 --> 00:23:03,110
resources so if you imagine you have

289
00:23:03,110 --> 00:23:17,570
these four components components and you

290
00:23:17,570 --> 00:23:20,720
have multiplexer for determination and

291
00:23:20,720 --> 00:23:22,880
you are where you can print these

292
00:23:22,880 --> 00:23:25,460
characters that you put in the terminal

293
00:23:25,460 --> 00:23:29,810
session so these two terminal clients

294
00:23:29,810 --> 00:23:34,100
Yerba start an RPC to their terminal a

295
00:23:34,100 --> 00:23:37,630
multiplexer there if they are IPC

296
00:23:37,630 --> 00:23:40,070
resources to determine and multiplexer

297
00:23:40,070 --> 00:23:43,480
so the terminal light up like so as all

298
00:23:43,480 --> 00:23:46,780
its own

299
00:23:49,820 --> 00:23:52,960
[Music]

300
00:23:59,380 --> 00:24:02,740
all these

301
00:24:10,940 --> 00:24:14,099
[Music]

302
00:24:30,690 --> 00:24:34,750
about signals the the a synchronous

303
00:24:34,750 --> 00:24:37,960
communication in China again the kernel

304
00:24:37,960 --> 00:24:40,630
helps you with the lifetime management

305
00:24:40,630 --> 00:24:58,920
and here the problem is this user may

306
00:24:58,920 --> 00:25:04,380
userland object as the signal contacts

307
00:25:13,530 --> 00:25:17,650
know if the signal arrives what type of

308
00:25:17,650 --> 00:25:23,190
signal is that so in general you have

309
00:25:23,340 --> 00:25:27,760
again a phase a sequence where where the

310
00:25:27,760 --> 00:25:31,210
the signal arrived it's in my duty to be

311
00:25:31,210 --> 00:25:35,290
again and I have to update the signal

312
00:25:35,290 --> 00:25:39,280
context so the the userland life time

313
00:25:39,280 --> 00:25:42,750
management is up to date but during this

314
00:25:42,750 --> 00:25:45,640
during this time slice it would be

315
00:25:45,640 --> 00:25:49,480
better if another thread goes on and

316
00:25:49,480 --> 00:25:52,030
likes to kill likes to destroy the

317
00:25:52,030 --> 00:25:58,180
signal context because then the the

318
00:25:58,180 --> 00:26:00,820
pointer that I got with the signal would

319
00:26:00,820 --> 00:26:06,160
be invalid and yeah and this is why the

320
00:26:06,160 --> 00:26:10,570
corner has this signal context versus

321
00:26:10,570 --> 00:26:13,630
call and if another fret now comes and

322
00:26:13,630 --> 00:26:15,400
wants to delay the signal context it

323
00:26:15,400 --> 00:26:19,840
does disk LTSs call and the kernel now

324
00:26:19,840 --> 00:26:23,070
knows okay the signal like

325
00:26:23,070 --> 00:26:30,330
skilled but it's already it is there's

326
00:26:30,330 --> 00:26:33,090
also an acknowledgement pending so I

327
00:26:33,090 --> 00:26:37,139
have to wait but I don't accept anymore

328
00:26:37,139 --> 00:26:40,440
submits for the signal so the signal is

329
00:26:40,440 --> 00:26:45,299
dead but it's already there it's it's

330
00:26:45,299 --> 00:26:48,210
still there and as soon as the

331
00:26:48,210 --> 00:26:51,649
acknowledgement of the receiver arrives

332
00:26:51,649 --> 00:26:55,080
there's the skills is called of the of

333
00:26:55,080 --> 00:27:35,279
the main thread gets unblocked and you

334
00:27:35,279 --> 00:27:37,820
won't have to

335
00:27:39,170 --> 00:27:42,329
[Music]

336
00:27:46,229 --> 00:28:42,479
okay and all you ultimately

337
00:28:50,250 --> 00:28:53,180
and

338
00:29:25,520 --> 00:29:29,090
so I have my

339
00:29:43,810 --> 00:29:46,440
and

340
00:30:45,760 --> 00:30:49,950
you can you can set this variable also

341
00:30:49,950 --> 00:30:54,340
temporarily yeah if you make later you

342
00:30:54,340 --> 00:30:56,799
can also set it only for this one make

343
00:30:56,799 --> 00:30:58,390
all thank you that he also said the

344
00:30:58,390 --> 00:31:04,980
video HW instead of

345
00:31:12,000 --> 00:31:15,130
[Music]

346
00:31:16,170 --> 00:31:20,470
and see here that builds the the kernel

347
00:31:20,470 --> 00:31:23,290
dependent library for the HW : here we

348
00:31:23,290 --> 00:31:26,140
have some content libraries that are

349
00:31:26,140 --> 00:31:28,240
linked against the generic binaries so

350
00:31:28,240 --> 00:31:31,210
the binary stay independent from the

351
00:31:31,210 --> 00:31:39,040
from the corner oh yeah I forgot I can

352
00:31:39,040 --> 00:31:48,270
also set I I enable multi processing

353
00:31:49,030 --> 00:31:52,319
[Music]

354
00:31:52,410 --> 00:31:55,410
yeah

355
00:31:56,510 --> 00:32:03,070
here at compiled secona and the core

356
00:32:03,340 --> 00:32:06,340
accident

357
00:32:09,929 --> 00:32:17,879
dares to comb the library I know it's

358
00:32:17,879 --> 00:32:20,149
thoughts

359
00:32:46,690 --> 00:32:52,909
yeah I thought about so many different

360
00:32:52,909 --> 00:33:21,549
names and then I think it's not

361
00:33:27,389 --> 00:33:31,619
is that much important yeah it's it's

362
00:33:31,619 --> 00:33:33,869
it's different for other companies that

363
00:33:33,869 --> 00:33:38,899
are used without any other system

364
00:33:55,740 --> 00:34:09,520
okay yes yes okay okay this is the super

365
00:34:09,520 --> 00:34:14,469
press enter and now you have at the

366
00:34:14,469 --> 00:34:17,168
beginning lots of processes that have a

367
00:34:17,168 --> 00:34:20,860
priority and quota and I use their quota

368
00:34:20,860 --> 00:34:24,580
like here and for example for a foul

369
00:34:24,580 --> 00:34:27,010
play at this point the quota for a foul

370
00:34:27,010 --> 00:34:30,668
play is exceeded and it has no more

371
00:34:30,668 --> 00:34:36,840
quota left for this super period yeah so

372
00:34:36,840 --> 00:34:39,899
[Music]

373
00:34:40,649 --> 00:34:43,690
no no i yeah it's a little bit

374
00:34:43,690 --> 00:34:46,869
complicated because at this point you

375
00:34:46,869 --> 00:34:49,059
are already in the next super period yes

376
00:34:49,059 --> 00:34:50,409
okay

377
00:34:50,409 --> 00:34:53,409
this shows the quota for the next super

378
00:34:53,409 --> 00:34:55,359
period yes

379
00:34:55,359 --> 00:34:58,119
but for the last super period at this

380
00:34:58,119 --> 00:35:01,119
point assume that the quota is exceeded

381
00:35:01,119 --> 00:35:05,859
for FLE yeah and at this point for audio

382
00:35:05,859 --> 00:35:09,130
the decoder has exceeded and so on so at

383
00:35:09,130 --> 00:35:12,249
this point all components except the

384
00:35:12,249 --> 00:35:32,890
timer have no more quota of course you

385
00:35:32,890 --> 00:35:35,049
can only consume your quota

386
00:35:35,049 --> 00:35:38,170
when you're when you're awake yeah so

387
00:35:38,170 --> 00:35:40,869
this is why the timer still has pota

388
00:35:40,869 --> 00:35:52,769
left at the end of the super period yeah

389
00:35:52,769 --> 00:35:56,410
that's a good question III said that the

390
00:35:56,410 --> 00:35:58,299
chrono would wait but that's actually

391
00:35:58,299 --> 00:36:01,839
not true because the corner only sets

392
00:36:01,839 --> 00:36:06,489
the thread to wait so if I do this this

393
00:36:06,489 --> 00:36:16,480
delete this it's not like that actually

394
00:36:16,480 --> 00:36:18,999
it's like it's it's when you do the

395
00:36:18,999 --> 00:36:23,980
delete syscall and and ya know it's bad

396
00:36:23,980 --> 00:36:26,829
example because at this point the nobody

397
00:36:26,829 --> 00:36:30,400
waits the delete is like a hint for the

398
00:36:30,400 --> 00:36:35,579
chrono only and directly returns but

399
00:36:35,579 --> 00:36:39,089
four four four four signals it's true

400
00:36:39,089 --> 00:36:43,539
for signals the kill Sisko now when you

401
00:36:43,539 --> 00:36:46,059
when you say I want to delete the signal

402
00:36:46,059 --> 00:36:48,989
to signal context and the chrono

403
00:36:48,989 --> 00:36:51,519
realizes or cares in the acknowledgment

404
00:36:51,519 --> 00:36:58,029
pending it blocks the fret so and at

405
00:36:58,029 --> 00:37:00,539
this point

406
00:37:12,770 --> 00:37:16,050
[Music]

407
00:37:38,550 --> 00:37:41,619
[Music]

408
00:37:49,270 --> 00:37:55,110
[Music]

409
00:37:57,570 --> 00:38:39,780
so it's

410
00:39:11,770 --> 00:39:14,180
and in case of the capabilities that

411
00:39:14,180 --> 00:39:20,390
that you have okay so each protection of

412
00:39:20,390 --> 00:39:22,460
men has to pay for its own capabilities

413
00:39:22,460 --> 00:39:26,180
so if I'm a server and I provide a

414
00:39:26,180 --> 00:39:30,230
session for clients and over the setting

415
00:39:30,230 --> 00:39:32,930
I receive capabilities from the clients

416
00:39:32,930 --> 00:39:36,920
I have to pay a server photos I am

417
00:39:36,920 --> 00:39:40,220
willing to spend some of my quota to

418
00:39:40,220 --> 00:39:42,410
fulfill the service I provide for the

419
00:39:42,410 --> 00:39:45,800
clients in this case okay so I have to

420
00:39:45,800 --> 00:39:49,940
spend some quota beforehand but before I

421
00:39:49,940 --> 00:39:52,849
say okay now I'm ready to receive IPC

422
00:39:52,849 --> 00:39:56,089
messages and if I don't and I get

423
00:39:56,089 --> 00:39:58,549
capabilities and the kernel throws an

424
00:39:58,549 --> 00:40:02,270
exception then I can also then I can

425
00:40:02,270 --> 00:40:05,000
still decide whether I want to spend

426
00:40:05,000 --> 00:40:08,470
more quota for the client

427
00:40:17,770 --> 00:40:21,890
reception from the client sends a

428
00:40:21,890 --> 00:40:24,290
message where capability is limited I

429
00:40:24,290 --> 00:40:28,010
don't know and the owner tries to create

430
00:40:28,010 --> 00:40:35,320
a local it's not enough

431
00:40:42,930 --> 00:40:46,560
or I say

432
00:40:51,789 --> 00:42:08,390
no it has to be I don't know and to

433
00:42:08,390 --> 00:42:11,288
something

434
00:42:30,810 --> 00:42:33,940
[Music]

435
00:42:52,619 --> 00:43:00,480
okay no more pressing questions

