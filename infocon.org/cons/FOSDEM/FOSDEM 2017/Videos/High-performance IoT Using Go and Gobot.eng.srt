1
00:00:34,340 --> 00:00:36,400
you

2
00:00:59,220 --> 00:01:03,070
okay we are ready for our next talk

3
00:01:03,070 --> 00:01:05,050
which is about a very interesting

4
00:01:05,050 --> 00:01:08,920
project called a GoBot which combines go

5
00:01:08,920 --> 00:01:12,759
with the world of IOT i've already seen

6
00:01:12,759 --> 00:01:14,740
on the internet haven't righted myself

7
00:01:14,740 --> 00:01:16,810
some very interesting projects like a

8
00:01:16,810 --> 00:01:22,030
gold powered barbecue and it's it's such

9
00:01:22,030 --> 00:01:24,220
a product you can all probably imagine

10
00:01:24,220 --> 00:01:26,020
something that you can do with this

11
00:01:26,020 --> 00:01:28,390
rolling events the floor is yours thank

12
00:01:28,390 --> 00:01:35,740
you so whenever I go home and see my

13
00:01:35,740 --> 00:01:37,979
family

14
00:01:41,409 --> 00:01:43,299
Weston that always comes up at these

15
00:01:43,299 --> 00:01:46,570
important meals is are the robots going

16
00:01:46,570 --> 00:01:50,680
to take our jobs and so I try to explain

17
00:01:50,680 --> 00:01:52,900
to them the real state of robotics this

18
00:01:52,900 --> 00:01:54,820
is a video from last year's DARPA

19
00:01:54,820 --> 00:01:57,820
challenge and she'll explain to them

20
00:01:57,820 --> 00:01:59,560
that general-purpose robotics has a long

21
00:01:59,560 --> 00:02:01,780
way to go and there you know specialized

22
00:02:01,780 --> 00:02:03,490
things may be able to do very specific

23
00:02:03,490 --> 00:02:05,799
purpose applications but just in general

24
00:02:05,799 --> 00:02:08,080
there's nothing to be afraid of and this

25
00:02:08,080 --> 00:02:09,340
is all they hear the whole time I'm

26
00:02:09,340 --> 00:02:14,200
talking but that's all they hear so Roy

27
00:02:14,200 --> 00:02:17,620
amara the former head of the Institute

28
00:02:17,620 --> 00:02:19,120
for the future at Stanford University

29
00:02:19,120 --> 00:02:20,890
said that we have the tendency to

30
00:02:20,890 --> 00:02:23,500
overestimate the effects of a technology

31
00:02:23,500 --> 00:02:26,500
in the short term and underestimate the

32
00:02:26,500 --> 00:02:28,650
effect over the long term

33
00:02:28,650 --> 00:02:32,260
good morning when don't see us Bon dia

34
00:02:32,260 --> 00:02:38,140
guten tag Bolger so i'm ron evans known

35
00:02:38,140 --> 00:02:39,819
as dead program on the internet's all

36
00:02:39,819 --> 00:02:41,799
the important places github twitter etc

37
00:02:41,799 --> 00:02:44,459
I'm the ringleader of the hybrid group

38
00:02:44,459 --> 00:02:47,680
we're a software consultancy based in

39
00:02:47,680 --> 00:02:50,440
Los Angeles and in Spain some of our

40
00:02:50,440 --> 00:02:52,900
clients include Intel thank you very

41
00:02:52,900 --> 00:02:54,269
much for sponsoring my trip by the way

42
00:02:54,269 --> 00:02:56,500
sphere R we did a lot of work on this

43
00:02:56,500 --> 00:02:58,870
little robot with two letters of a

44
00:02:58,870 --> 00:03:01,120
number used in this movie about Wars and

45
00:03:01,120 --> 00:03:02,709
the Stars that's all I'm allowed to say

46
00:03:02,709 --> 00:03:05,829
and we don't have open source projects

47
00:03:05,829 --> 00:03:07,720
including this little project called

48
00:03:07,720 --> 00:03:11,590
GoBot so why you should use golang for

49
00:03:11,590 --> 00:03:13,900
programming hardware well there's three

50
00:03:13,900 --> 00:03:15,640
main reasons there's lots more but you

51
00:03:15,640 --> 00:03:17,410
know rule of threes so the first one is

52
00:03:17,410 --> 00:03:20,140
concurrency it's really really easy to

53
00:03:20,140 --> 00:03:23,560
write concurrent code in golang and when

54
00:03:23,560 --> 00:03:24,549
you're dealing with different hardware

55
00:03:24,549 --> 00:03:26,109
devices that can do whatever they're

56
00:03:26,109 --> 00:03:27,670
going to do whenever they end up doing

57
00:03:27,670 --> 00:03:29,019
it concurrency is really really

58
00:03:29,019 --> 00:03:32,079
important another its portability when

59
00:03:32,079 --> 00:03:33,549
you're trying to develop software that

60
00:03:33,549 --> 00:03:35,140
needs to be deployed to different kinds

61
00:03:35,140 --> 00:03:36,430
of devices may be entirely different

62
00:03:36,430 --> 00:03:38,500
platforms different flavors of operating

63
00:03:38,500 --> 00:03:41,290
system the cross compilation and the

64
00:03:41,290 --> 00:03:44,319
static linking go is really the best

65
00:03:44,319 --> 00:03:47,549
thing out there and then performance so

66
00:03:47,549 --> 00:03:49,870
go is well known for being extremely

67
00:03:49,870 --> 00:03:54,489
performance the new go 1.8 which is just

68
00:03:54,489 --> 00:03:54,910
about

69
00:03:54,910 --> 00:03:58,300
in about two weeks they as who here

70
00:03:58,300 --> 00:04:02,290
actually uses go sweet the rest of you

71
00:04:02,290 --> 00:04:05,920
just you should be doing it right now

72
00:04:05,920 --> 00:04:10,390
so go 1.8 ads to the garbage collector

73
00:04:10,390 --> 00:04:14,230
inside of go the slowest possible stop

74
00:04:14,230 --> 00:04:16,410
the world garbage collection is 100

75
00:04:16,410 --> 00:04:19,170
microseconds not in milliseconds

76
00:04:19,170 --> 00:04:21,790
microseconds so why do you program and

77
00:04:21,790 --> 00:04:24,430
C++ to do real-time applications anymore

78
00:04:24,430 --> 00:04:27,130
well the answer is you shouldn't so

79
00:04:27,130 --> 00:04:30,850
we've all heard about the C 10k having

80
00:04:30,850 --> 00:04:33,040
concurrent 10,000 connections well we're

81
00:04:33,040 --> 00:04:34,780
moving towards what I like to call 10

82
00:04:34,780 --> 00:04:37,360
mio T which is 10 million IOT devices

83
00:04:37,360 --> 00:04:39,910
simultaneously pumping data and these

84
00:04:39,910 --> 00:04:41,500
are not like over the world this is the

85
00:04:41,500 --> 00:04:43,300
ones that are reporting to your company

86
00:04:43,300 --> 00:04:46,960
that you have to monitor so GoBot is a

87
00:04:46,960 --> 00:04:52,030
framework I've obviously the closet we

88
00:04:52,030 --> 00:04:54,460
are a framework I know some people think

89
00:04:54,460 --> 00:04:56,950
frameworks are bad some people think bad

90
00:04:56,950 --> 00:04:58,570
frameworks are bad and good ones are

91
00:04:58,570 --> 00:05:02,170
good so we like to think of it that's a

92
00:05:02,170 --> 00:05:04,330
software factory for doing Hardware

93
00:05:04,330 --> 00:05:06,460
oriented development or full stack

94
00:05:06,460 --> 00:05:08,170
robotics but that's kind of long if you

95
00:05:08,170 --> 00:05:10,780
want to talk about that more later so we

96
00:05:10,780 --> 00:05:12,610
have three ways that you can use go bot

97
00:05:12,610 --> 00:05:15,100
now one of them is what we call classic

98
00:05:15,100 --> 00:05:16,960
go bot and it's when you're having just

99
00:05:16,960 --> 00:05:18,610
a single device that you want to control

100
00:05:18,610 --> 00:05:20,680
here's just a quick little diagram the

101
00:05:20,680 --> 00:05:23,200
main concept is the robot robots have

102
00:05:23,200 --> 00:05:26,050
both adapters and drivers adapters

103
00:05:26,050 --> 00:05:27,520
actually talked to the hardware and then

104
00:05:27,520 --> 00:05:30,130
the adapters provide the interfaces that

105
00:05:30,130 --> 00:05:32,950
drivers can then talk to so adapters let

106
00:05:32,950 --> 00:05:34,419
you talk to things like Arduino is

107
00:05:34,419 --> 00:05:36,610
beagle and blacks Intel Edison's

108
00:05:36,610 --> 00:05:39,220
drivers let you control things like LEDs

109
00:05:39,220 --> 00:05:42,310
buttons digital accelerometers this way

110
00:05:42,310 --> 00:05:45,010
you can have the same LED that knows how

111
00:05:45,010 --> 00:05:46,630
the blink regardless of what kind of

112
00:05:46,630 --> 00:05:48,669
hardware it's connected to the last

113
00:05:48,669 --> 00:05:50,080
thing that's important is when we have

114
00:05:50,080 --> 00:05:52,720
events we have an event channel that is

115
00:05:52,720 --> 00:05:54,520
created for each one of the drivers and

116
00:05:54,520 --> 00:05:56,169
then the robot can subscribe to those

117
00:05:56,169 --> 00:05:57,790
events and that way we can get all of

118
00:05:57,790 --> 00:06:00,850
those wonderful concurrency you can also

119
00:06:00,850 --> 00:06:03,789
use master go bot master go bot ads if

120
00:06:03,789 --> 00:06:05,950
you want to control multiple robots at

121
00:06:05,950 --> 00:06:07,320
the same time you have the math

122
00:06:07,320 --> 00:06:10,710
we sometimes call it the mCP if you're a

123
00:06:10,710 --> 00:06:12,410
Tron fan you thought that was funny

124
00:06:12,410 --> 00:06:16,110
that's how we expose Gobots own API its

125
00:06:16,110 --> 00:06:19,230
external facing API so it consumes api's

126
00:06:19,230 --> 00:06:21,360
and then it produces them and we have

127
00:06:21,360 --> 00:06:23,070
one that's already built in for a REST

128
00:06:23,070 --> 00:06:26,940
API and then metal GoBot middle go

129
00:06:26,940 --> 00:06:28,410
bothers if you want to just call the

130
00:06:28,410 --> 00:06:30,450
packages for the adapters and the

131
00:06:30,450 --> 00:06:32,190
drivers directly yourself you can do

132
00:06:32,190 --> 00:06:35,100
that now starting with GoBot 1.0 so if

133
00:06:35,100 --> 00:06:36,960
you really want to go hardcore metal we

134
00:06:36,960 --> 00:06:39,090
got you alright so let's get right to

135
00:06:39,090 --> 00:06:42,480
the demos because time is short so the

136
00:06:42,480 --> 00:06:46,760
hollow world of things is a blinking LED

137
00:06:46,760 --> 00:06:50,370
so I'm gonna start with an Arduino 101

138
00:06:50,370 --> 00:06:53,010
which is your basic arguing oh who here

139
00:06:53,010 --> 00:06:55,980
actually has an Arduino yeah exactly

140
00:06:55,980 --> 00:06:57,180
who here has no again we know in a

141
00:06:57,180 --> 00:06:58,620
drawer that's covered over by a bunch of

142
00:06:58,620 --> 00:07:02,730
other electronics alright so we're just

143
00:07:02,730 --> 00:07:05,270
going to do a very simple little blink

144
00:07:05,270 --> 00:07:07,980
so here's the code

145
00:07:07,980 --> 00:07:10,350
so we have our packaged main we import

146
00:07:10,350 --> 00:07:13,140
the GoBot packages go bot itself the

147
00:07:13,140 --> 00:07:15,270
GPIO drivers which is how we control

148
00:07:15,270 --> 00:07:17,340
LEDs and buttons and things and then the

149
00:07:17,340 --> 00:07:18,930
Fermata platform which is how we're

150
00:07:18,930 --> 00:07:20,370
going to communicate with the

151
00:07:20,370 --> 00:07:22,200
microcontroller the microcontroller is

152
00:07:22,200 --> 00:07:23,940
not running though can't run go in

153
00:07:23,940 --> 00:07:26,730
microcontrollers yet but we can run a

154
00:07:26,730 --> 00:07:28,590
program on there called firmata

155
00:07:28,590 --> 00:07:30,630
which allows us to use micro controllers

156
00:07:30,630 --> 00:07:32,730
as peripherals that can then communicate

157
00:07:32,730 --> 00:07:34,560
with different low-level hardware

158
00:07:34,560 --> 00:07:36,540
devices i mean who says that the brain

159
00:07:36,540 --> 00:07:37,890
and the body have to be in the same

160
00:07:37,890 --> 00:07:41,100
chassis that's a human problem right all

161
00:07:41,100 --> 00:07:43,020
right so our main function

162
00:07:43,020 --> 00:07:45,210
we have our adaptor so we call the

163
00:07:45,210 --> 00:07:47,010
Fermata package new adaptor and we pass

164
00:07:47,010 --> 00:07:49,290
in the port which is how we're going to

165
00:07:49,290 --> 00:07:51,870
communicate with it our LED with our new

166
00:07:51,870 --> 00:07:55,350
LED driver on pin 13 to use that adaptor

167
00:07:55,350 --> 00:07:57,060
and then the work that we're going to do

168
00:07:57,060 --> 00:08:01,680
the work is every one second LED doggles

169
00:08:01,680 --> 00:08:03,990
so it's off turn it on if it's on turn

170
00:08:03,990 --> 00:08:07,230
it off then we construct our robot we

171
00:08:07,230 --> 00:08:09,750
say our new robot named blink bot and it

172
00:08:09,750 --> 00:08:12,390
has one connection which is the adapter

173
00:08:12,390 --> 00:08:16,080
one driver which is the LED and then the

174
00:08:16,080 --> 00:08:17,460
work that we're going to have it do and

175
00:08:17,460 --> 00:08:19,680
then start it off we do this so that we

176
00:08:19,680 --> 00:08:20,449
can make sure

177
00:08:20,449 --> 00:08:22,279
the time your work get started that all

178
00:08:22,279 --> 00:08:23,539
of your connections have already

179
00:08:23,539 --> 00:08:25,430
connected and all of your devices have

180
00:08:25,430 --> 00:08:26,990
already started that way when your work

181
00:08:26,990 --> 00:08:28,249
that you're supposed to be performing

182
00:08:28,249 --> 00:08:30,559
because again we're trying to take the

183
00:08:30,559 --> 00:08:31,789
patterns that you're going to need

184
00:08:31,789 --> 00:08:33,799
consistently when developing physical

185
00:08:33,799 --> 00:08:36,469
applications and then utilize them

186
00:08:36,469 --> 00:08:39,349
easily all right so let's see if the

187
00:08:39,349 --> 00:08:50,360
demo gods favor me today let's see in

188
00:08:50,360 --> 00:08:52,660
the right directory Oh demo that's right

189
00:08:52,660 --> 00:09:00,430
let's talk you know it's real all right

190
00:09:00,430 --> 00:09:04,540
so we're running the code and our

191
00:09:04,540 --> 00:09:12,560
blinking LED thank you good night all

192
00:09:12,560 --> 00:09:15,589
right so now let's get into some basic

193
00:09:15,589 --> 00:09:17,870
i/o all right we said hello world but we

194
00:09:17,870 --> 00:09:19,370
need kind of a ping of things we need to

195
00:09:19,370 --> 00:09:21,230
know that both in output and output

196
00:09:21,230 --> 00:09:23,570
they're working so we're gonna use that

197
00:09:23,570 --> 00:09:29,089
same device but we're going to plug a

198
00:09:29,089 --> 00:09:32,209
few things on to it here so I'm going to

199
00:09:32,209 --> 00:09:33,740
take this and I'm going to connect to it

200
00:09:33,740 --> 00:09:36,410
a grove shield which lets me plug things

201
00:09:36,410 --> 00:09:38,060
in without it actually worrying about

202
00:09:38,060 --> 00:09:39,560
where everything's set and the

203
00:09:39,560 --> 00:09:41,000
breadboard because you know who has time

204
00:09:41,000 --> 00:09:44,810
for that when you do man talk so then

205
00:09:44,810 --> 00:09:48,170
let's look at the program that we're

206
00:09:48,170 --> 00:09:50,300
going to run here so it's almost it's

207
00:09:50,300 --> 00:09:51,829
very very similar okay you're still

208
00:09:51,829 --> 00:09:53,810
using the GPIO package still using the

209
00:09:53,810 --> 00:09:55,970
Fermanagh package we still initialize

210
00:09:55,970 --> 00:09:57,649
the Fermata adapter to talk to the

211
00:09:57,649 --> 00:10:00,350
arduino but now we have two devices we

212
00:10:00,350 --> 00:10:03,199
have the LED this time in pin digital

213
00:10:03,199 --> 00:10:06,050
two and we have a button which is in pin

214
00:10:06,050 --> 00:10:08,180
digital three and the work that we're

215
00:10:08,180 --> 00:10:10,670
going to do is we're going to say button

216
00:10:10,670 --> 00:10:14,870
dot on GPIO dot button push and then we

217
00:10:14,870 --> 00:10:17,209
have a function a go function so when

218
00:10:17,209 --> 00:10:20,569
that gets called go LED toggle so what

219
00:10:20,569 --> 00:10:22,790
this is actually doing is a really

220
00:10:22,790 --> 00:10:25,790
really major improvement to go about 1.0

221
00:10:25,790 --> 00:10:28,399
this is actually creating an event

222
00:10:28,399 --> 00:10:30,860
channel subscribing to it off of the

223
00:10:30,860 --> 00:10:33,230
button making sure that the events come

224
00:10:33,230 --> 00:10:34,790
you are selected only for the button

225
00:10:34,790 --> 00:10:37,190
push and then calls your Lambo with the

226
00:10:37,190 --> 00:10:38,840
data that's been passed into it only

227
00:10:38,840 --> 00:10:40,790
when it's appropriate and then it takes

228
00:10:40,790 --> 00:10:43,370
that go routine and puts it to sleep so

229
00:10:43,370 --> 00:10:44,690
basically you get all of this

230
00:10:44,690 --> 00:10:46,250
concurrency that you're going to need

231
00:10:46,250 --> 00:10:47,510
because this pattern you're going to use

232
00:10:47,510 --> 00:10:49,490
over and over and over again every

233
00:10:49,490 --> 00:10:51,380
single team type of hardware device you

234
00:10:51,380 --> 00:10:53,750
want to connect you and then same

235
00:10:53,750 --> 00:10:55,850
initialization of the robot the only

236
00:10:55,850 --> 00:10:57,050
difference is now we have two devices

237
00:10:57,050 --> 00:10:59,660
the LED on the button and then so let's

238
00:10:59,660 --> 00:11:06,370
plug in let's see it was the LED and two

239
00:11:06,910 --> 00:11:16,660
and then the button in three all right

240
00:11:16,660 --> 00:11:26,860
so let's see all right

241
00:11:26,860 --> 00:11:30,380
so if we go here when we push the button

242
00:11:30,380 --> 00:11:32,810
the LED lights up and when I push it

243
00:11:32,810 --> 00:11:34,100
again it turns off because remember we

244
00:11:34,100 --> 00:11:37,790
use toggle toggle toggle yes input and

245
00:11:37,790 --> 00:11:44,680
output all right what time does this end

246
00:11:44,680 --> 00:11:49,190
11:10 and I just wanted to see if I have

247
00:11:49,190 --> 00:11:51,410
time for that beautiful all right so

248
00:11:51,410 --> 00:11:54,680
let's show a complete app so we actually

249
00:11:54,680 --> 00:11:55,670
do this for a living

250
00:11:55,670 --> 00:11:58,010
we're really really lucky human beings

251
00:11:58,010 --> 00:11:59,900
that we write software for hardware

252
00:11:59,900 --> 00:12:02,390
companies for a living and so but we

253
00:12:02,390 --> 00:12:04,040
often can't talk about it and I can't

254
00:12:04,040 --> 00:12:06,320
talk about it today however I have

255
00:12:06,320 --> 00:12:07,970
through the miracles of modern

256
00:12:07,970 --> 00:12:10,490
open-source technology simulated the key

257
00:12:10,490 --> 00:12:11,960
features of an application that we've

258
00:12:11,960 --> 00:12:13,370
been working on for an energy company

259
00:12:13,370 --> 00:12:16,130
it's called mini Luminato which is

260
00:12:16,130 --> 00:12:18,140
Spanish for you know a little lit up and

261
00:12:18,140 --> 00:12:21,680
it's a solar power monitoring system so

262
00:12:21,680 --> 00:12:24,830
it has sensor stations it has a base

263
00:12:24,830 --> 00:12:28,640
station and it has a repair system for

264
00:12:28,640 --> 00:12:30,920
when the solar production energy systems

265
00:12:30,920 --> 00:12:34,880
are not working as expected so here's a

266
00:12:34,880 --> 00:12:37,760
little diagram so for the solar

267
00:12:37,760 --> 00:12:39,260
monitoring we're going to use an Intel

268
00:12:39,260 --> 00:12:41,510
Edison for the base station we're going

269
00:12:41,510 --> 00:12:44,529
to use an Arduino 101 and

270
00:12:44,529 --> 00:12:46,240
for the repair system or gonna fly a

271
00:12:46,240 --> 00:12:48,670
repair drone from parent all right and

272
00:12:48,670 --> 00:12:52,420
then we're going to use mqtt which is a

273
00:12:52,420 --> 00:12:54,819
machine the machine messaging protocol

274
00:12:54,819 --> 00:12:57,339
standard originally created by IBM but

275
00:12:57,339 --> 00:12:58,720
currently maintained by the Eclipse

276
00:12:58,720 --> 00:13:00,819
Foundation and so we're gonna be using

277
00:13:00,819 --> 00:13:03,129
mqtt to handle all of the machine the

278
00:13:03,129 --> 00:13:04,809
machine communication taking place

279
00:13:04,809 --> 00:13:06,370
between these three different running

280
00:13:06,370 --> 00:13:06,910
programs

281
00:13:06,910 --> 00:13:09,730
all right sensor station so we got the

282
00:13:09,730 --> 00:13:13,329
Intel Edison the sensors and MQTT all

283
00:13:13,329 --> 00:13:22,959
right so all right so let's unplug this

284
00:13:22,959 --> 00:13:25,839
so here's my Intel Edison actually this

285
00:13:25,839 --> 00:13:27,069
is the others in here it's just this

286
00:13:27,069 --> 00:13:28,149
little tiny board

287
00:13:28,149 --> 00:13:30,370
this isn't Arduino compatible breakout

288
00:13:30,370 --> 00:13:32,829
board and this is the battery because

289
00:13:32,829 --> 00:13:34,540
I'm running this off the battery right

290
00:13:34,540 --> 00:13:37,930
now it is connected to my gateway I have

291
00:13:37,930 --> 00:13:42,009
here a Intel nook which is a little

292
00:13:42,009 --> 00:13:45,160
network utility computer it's running a

293
00:13:45,160 --> 00:13:47,230
Wind River Linux which is a carrier

294
00:13:47,230 --> 00:13:49,809
grade Linux so I know this looks like a

295
00:13:49,809 --> 00:13:51,519
bunch of toys but it's really serious

296
00:13:51,519 --> 00:13:55,240
stuff so this is running the MPPT server

297
00:13:55,240 --> 00:13:58,540
as well I'm sorry what was my closing

298
00:13:58,540 --> 00:14:02,529
engine time 11:10 okay beautiful all

299
00:14:02,529 --> 00:14:06,220
right so let's plug in well let's see

300
00:14:06,220 --> 00:14:08,139
what are we showing first oh we're going

301
00:14:08,139 --> 00:14:10,000
right into it all right so I'm going to

302
00:14:10,000 --> 00:14:14,860
take my shield from before and I'm going

303
00:14:14,860 --> 00:14:17,949
to plug it in here wait if I plug it in

304
00:14:17,949 --> 00:14:25,089
the right way the other left looks good

305
00:14:25,089 --> 00:14:28,870
and so we need here is we need our

306
00:14:28,870 --> 00:14:32,170
sensor which is a well let's look at the

307
00:14:32,170 --> 00:14:34,809
code real quick here so we're going to

308
00:14:34,809 --> 00:14:37,059
go over this kind of fast so we have a

309
00:14:37,059 --> 00:14:39,670
bunch of packages go Bob again this time

310
00:14:39,670 --> 00:14:42,040
we're using the a i/o drivers which is

311
00:14:42,040 --> 00:14:44,319
for analog input and output we're using

312
00:14:44,319 --> 00:14:47,769
the i2c or I Square C is the serious you

313
00:14:47,769 --> 00:14:49,480
know Greybeards call it gray hairs

314
00:14:49,480 --> 00:14:53,439
beards and hairs so that's a I square Cu

315
00:14:53,439 --> 00:14:55,300
is a communication protocol used for

316
00:14:55,300 --> 00:14:56,949
inter inter chip communication right on

317
00:14:56,949 --> 00:14:58,240
the board itself

318
00:14:58,240 --> 00:15:00,160
so then we have the Intel Edison

319
00:15:00,160 --> 00:15:01,720
platform that's how we're going to

320
00:15:01,720 --> 00:15:03,220
provide the interface to the low-level

321
00:15:03,220 --> 00:15:06,819
i/o and then the MQTT platform so all of

322
00:15:06,819 --> 00:15:08,920
these things together so let's look at

323
00:15:08,920 --> 00:15:12,009
the code we initialize our Edison

324
00:15:12,009 --> 00:15:15,189
adapter we turn on our light sensor and

325
00:15:15,189 --> 00:15:17,709
our screen then we have our second

326
00:15:17,709 --> 00:15:20,740
adapter which is the server which is

327
00:15:20,740 --> 00:15:23,619
communicating with our MQTT server and

328
00:15:23,619 --> 00:15:25,990
then the work that we're going to do so

329
00:15:25,990 --> 00:15:27,970
the first thing is when our light sensor

330
00:15:27,970 --> 00:15:30,550
has data we're going to set our variable

331
00:15:30,550 --> 00:15:33,100
equal to that data that way most of the

332
00:15:33,100 --> 00:15:35,230
time sensors provide data a lot faster

333
00:15:35,230 --> 00:15:37,540
than physical things can respond circles

334
00:15:37,540 --> 00:15:38,949
can't move as quickly as you can read

335
00:15:38,949 --> 00:15:41,139
data so we want to separate those things

336
00:15:41,139 --> 00:15:43,149
another area where it goes concurrency

337
00:15:43,149 --> 00:15:45,459
is quite helpful so then every 500

338
00:15:45,459 --> 00:15:48,009
milliseconds we're going to send the

339
00:15:48,009 --> 00:15:50,230
data for that the current light meeting

340
00:15:50,230 --> 00:15:53,889
reading to our PTT server we're going to

341
00:15:53,889 --> 00:15:56,860
server dot publish to this topic MQTT

342
00:15:56,860 --> 00:15:58,569
topics are a little bit like URLs and

343
00:15:58,569 --> 00:16:01,839
then we're gonna send the data and then

344
00:16:01,839 --> 00:16:04,839
every 250 milliseconds we're going to

345
00:16:04,839 --> 00:16:08,619
clear the screen write the data on to

346
00:16:08,619 --> 00:16:10,299
the screen and then based on that day

347
00:16:10,299 --> 00:16:11,769
that changed the color of the backlit

348
00:16:11,769 --> 00:16:15,100
LCD and then the work that we're going

349
00:16:15,100 --> 00:16:18,790
to do is simply very sorry the robot

350
00:16:18,790 --> 00:16:20,799
itself is simply add the two connections

351
00:16:20,799 --> 00:16:24,249
add the device and start all right so

352
00:16:24,249 --> 00:16:25,779
let's see if I have a connection to my

353
00:16:25,779 --> 00:16:30,779
Edison yes and let's plug in our sensors

354
00:16:30,779 --> 00:16:33,600
so let's see the light sensor was in

355
00:16:33,600 --> 00:16:43,689
zero as I recall the display is an I

356
00:16:43,689 --> 00:16:45,699
Square C peripheral so we plug it in

357
00:16:45,699 --> 00:16:53,069
here alright so far so good alright so

358
00:16:53,069 --> 00:16:55,360
here we have our light sensor and then

359
00:16:55,360 --> 00:16:58,360
when I cover it over you see oh sorry

360
00:16:58,360 --> 00:17:00,220
here I have my light sensor and when I

361
00:17:00,220 --> 00:17:02,019
cover it over you can see the screen is

362
00:17:02,019 --> 00:17:05,470
changing all right so this is wireless

363
00:17:05,470 --> 00:17:08,138
it's not super well connected so but I'm

364
00:17:08,138 --> 00:17:09,250
gonna pass it around so you guys can

365
00:17:09,250 --> 00:17:10,420
check it out

366
00:17:10,420 --> 00:17:12,819
and please don't drop it we need this

367
00:17:12,819 --> 00:17:14,440
for the rest of the demo too if you want

368
00:17:14,440 --> 00:17:18,420
to see it work just cover over the

369
00:17:18,990 --> 00:17:20,560
phototransistor

370
00:17:20,560 --> 00:17:23,589
for the resistor excuse me all right so

371
00:17:23,589 --> 00:17:25,540
while you pass out the round pass keep

372
00:17:25,540 --> 00:17:27,730
passing quick pass it man

373
00:17:27,730 --> 00:17:31,270
all right the base station all right so

374
00:17:31,270 --> 00:17:32,350
the base station we're going to use an

375
00:17:32,350 --> 00:17:35,200
Arduino 101 we're going to use LEDs and

376
00:17:35,200 --> 00:17:38,710
we're going to use the MQTT server all

377
00:17:38,710 --> 00:17:40,750
right so it's the second part of our

378
00:17:40,750 --> 00:17:45,130
little system so I'm going to use my or

379
00:17:45,130 --> 00:17:47,350
do we don't want to want them again and

380
00:17:47,350 --> 00:17:49,570
this time I'm gonna plug it into the

381
00:17:49,570 --> 00:17:52,780
Gateway is it's gonna be easier for me

382
00:17:52,780 --> 00:17:57,690
with all of these cables to do that

383
00:17:57,690 --> 00:18:03,130
supposedly easier and so I'm gonna use a

384
00:18:03,130 --> 00:18:05,020
different shield this is a shield that I

385
00:18:05,020 --> 00:18:08,490
made it's in order to control the RGB

386
00:18:08,490 --> 00:18:12,160
LEDs of this strip it's a 12 volt device

387
00:18:12,160 --> 00:18:14,260
and since microcontrollers are usually

388
00:18:14,260 --> 00:18:16,720
five or 3.3 volts we need some way to

389
00:18:16,720 --> 00:18:19,030
control it so I built this little board

390
00:18:19,030 --> 00:18:21,280
that's got three tp1 20s that you

391
00:18:21,280 --> 00:18:22,720
shouldn't use these by the way according

392
00:18:22,720 --> 00:18:27,280
to the Internet's yes anyway as I was

393
00:18:27,280 --> 00:18:33,670
saying so let's plug this in all right

394
00:18:33,670 --> 00:18:36,730
so far so good and then I'm going to

395
00:18:36,730 --> 00:18:40,300
plug in two more things the first one is

396
00:18:40,300 --> 00:18:45,960
I'm going to plug in the actual strip

397
00:18:45,960 --> 00:18:51,250
hopefully and I'll Bend a pin okay so

398
00:18:51,250 --> 00:18:55,120
far so good and then the power we need

399
00:18:55,120 --> 00:18:57,419
power

400
00:19:00,060 --> 00:19:02,950
all right since we need power to control

401
00:19:02,950 --> 00:19:08,400
the LEDs all right

402
00:19:08,520 --> 00:19:11,200
and so here's the code for the base

403
00:19:11,200 --> 00:19:13,810
station so we're using the Fermanagh

404
00:19:13,810 --> 00:19:16,390
platform again we're using GPIO again

405
00:19:16,390 --> 00:19:19,540
and we're using MQTT again this time

406
00:19:19,540 --> 00:19:22,540
we're actually declaring our board and

407
00:19:22,540 --> 00:19:24,460
our different adapters and devices

408
00:19:24,460 --> 00:19:26,020
separately as pointers because we're

409
00:19:26,020 --> 00:19:27,610
going to write some functions later

410
00:19:27,610 --> 00:19:28,780
though they're gonna use those that way

411
00:19:28,780 --> 00:19:29,950
we don't have to put everything into

412
00:19:29,950 --> 00:19:31,990
this giant work routine right we can

413
00:19:31,990 --> 00:19:33,850
have some better encapsulation proper

414
00:19:33,850 --> 00:19:37,380
architecture of modern software yes so

415
00:19:37,380 --> 00:19:40,390
so our main function here we're going to

416
00:19:40,390 --> 00:19:42,760
use the GoBot API just to see it we're

417
00:19:42,760 --> 00:19:44,050
going to literally look at it for one

418
00:19:44,050 --> 00:19:44,590
second

419
00:19:44,590 --> 00:19:46,780
the board is connected as it was before

420
00:19:46,780 --> 00:19:49,420
we have the RGB LED driver for this

421
00:19:49,420 --> 00:19:51,850
strip we have our base station which is

422
00:19:51,850 --> 00:19:53,500
going to get data from the light and

423
00:19:53,500 --> 00:19:55,600
from the drone oh woops that's the third

424
00:19:55,600 --> 00:19:57,730
part and then the work that we're gonna

425
00:19:57,730 --> 00:20:00,940
do when we get light data we're going to

426
00:20:00,940 --> 00:20:03,820
translate that light data and then based

427
00:20:03,820 --> 00:20:05,230
on it we're going to display the light

428
00:20:05,230 --> 00:20:07,000
level this is an information radiator

429
00:20:07,000 --> 00:20:08,260
you ever built

430
00:20:08,260 --> 00:20:10,780
Travis build modifier that shows a red

431
00:20:10,780 --> 00:20:13,330
light if you haven't you should you put

432
00:20:13,330 --> 00:20:15,450
it up in the office giant red light

433
00:20:15,450 --> 00:20:19,870
works great so when the drone data is

434
00:20:19,870 --> 00:20:22,030
sent depending on the flight status if

435
00:20:22,030 --> 00:20:23,650
it's flying or not if it's flying we're

436
00:20:23,650 --> 00:20:25,420
gonna blink the LEDs otherwise we're

437
00:20:25,420 --> 00:20:28,720
gonna stop and then we have a couple of

438
00:20:28,720 --> 00:20:30,460
those functions when we display the

439
00:20:30,460 --> 00:20:32,140
light level we look at the light level

440
00:20:32,140 --> 00:20:35,200
and depending on how bright it is we

441
00:20:35,200 --> 00:20:36,640
either display green the system is

442
00:20:36,640 --> 00:20:39,340
working correctly blue not so good or

443
00:20:39,340 --> 00:20:41,440
red kind of the same color you see on

444
00:20:41,440 --> 00:20:43,750
the system which may make it back to the

445
00:20:43,750 --> 00:20:46,270
back by the end of the talk you can't

446
00:20:46,270 --> 00:20:49,920
blame them it's really fun all right so

447
00:20:49,920 --> 00:20:54,310
let's go and run the code hopefully on

448
00:20:54,310 --> 00:20:57,000
the Gateway

449
00:20:58,440 --> 00:21:06,330
I don't see any light why no light there

450
00:21:06,330 --> 00:21:07,370
we go

451
00:21:07,370 --> 00:21:10,139
helps to put things in all right so

452
00:21:10,139 --> 00:21:12,750
we're actually seeing the colors only

453
00:21:12,750 --> 00:21:14,070
the person who's playing where they can

454
00:21:14,070 --> 00:21:15,629
see but you are the people next to them

455
00:21:15,629 --> 00:21:17,309
so if you cover over the little

456
00:21:17,309 --> 00:21:27,870
photoresistor no hands all right we

457
00:21:27,870 --> 00:21:30,149
haven't even gotten to the good part all

458
00:21:30,149 --> 00:21:31,200
right so we're gonna just kind of keep

459
00:21:31,200 --> 00:21:36,269
that running all right robos so we

460
00:21:36,269 --> 00:21:38,220
actually have this API built-in I don't

461
00:21:38,220 --> 00:21:39,419
have time to show you everything about

462
00:21:39,419 --> 00:21:41,970
it but it's built in the react and you

463
00:21:41,970 --> 00:21:44,190
can actually through the magic to binary

464
00:21:44,190 --> 00:21:46,529
compilation you can actually create all

465
00:21:46,529 --> 00:21:48,240
of your static assets and packaging them

466
00:21:48,240 --> 00:21:50,370
all up right into your go application so

467
00:21:50,370 --> 00:21:51,870
that you have a single file that you

468
00:21:51,870 --> 00:21:53,909
deploy the production did you get that

469
00:21:53,909 --> 00:21:59,370
oh man so let's take a look at it and so

470
00:21:59,370 --> 00:22:01,019
this is Robo and it's running on the

471
00:22:01,019 --> 00:22:02,970
Gateway and it shows we have a single

472
00:22:02,970 --> 00:22:05,220
device running a robot which is our base

473
00:22:05,220 --> 00:22:07,500
station and we see that we have four

474
00:22:07,500 --> 00:22:10,649
mama and the two n PTT connections for

475
00:22:10,649 --> 00:22:12,779
our virtual devices literally that's all

476
00:22:12,779 --> 00:22:14,100
I have time to show you but it's in

477
00:22:14,100 --> 00:22:16,279
there so you can check it out robo io

478
00:22:16,279 --> 00:22:20,399
sono how do I get rid of this Oh wrong

479
00:22:20,399 --> 00:22:22,289
one oh wait no right one oh sure

480
00:22:22,289 --> 00:22:24,990
all right so we saw that cool all right

481
00:22:24,990 --> 00:22:27,570
the repair system how we doing

482
00:22:27,570 --> 00:22:31,500
Oh plenty of time the repair system uses

483
00:22:31,500 --> 00:22:35,460
our parrot mini-drone ps3 controller

484
00:22:35,460 --> 00:22:37,830
just I'm kind of an Xbox gamer but I

485
00:22:37,830 --> 00:22:40,080
like PlayStation controllers for flight

486
00:22:40,080 --> 00:22:41,639
it's weird

487
00:22:41,639 --> 00:22:45,480
and then mqtt which is gonna coordinate

488
00:22:45,480 --> 00:22:47,039
this all so I'm gonna run this program

489
00:22:47,039 --> 00:22:48,779
so remember right now we have two

490
00:22:48,779 --> 00:22:50,909
programs running one on the other s'en

491
00:22:50,909 --> 00:22:53,279
one on the gateway and now I'm going to

492
00:22:53,279 --> 00:22:54,720
run the third one on my computer because

493
00:22:54,720 --> 00:22:57,860
I don't have time to setup any more gear

494
00:22:57,860 --> 00:23:01,049
alright and so this is the final phase

495
00:23:01,049 --> 00:23:03,600
of the mini Luminato system it's the

496
00:23:03,600 --> 00:23:05,279
repair system so when things go wrong

497
00:23:05,279 --> 00:23:07,259
out in the field well naturally this is

498
00:23:07,259 --> 00:23:08,909
the modern era you said to repair drone

499
00:23:08,909 --> 00:23:11,789
with the replacement part of course

500
00:23:11,789 --> 00:23:15,419
so to fill in for a more serious drone

501
00:23:15,419 --> 00:23:16,919
since I know some people are kind of

502
00:23:16,919 --> 00:23:18,239
scared of drones because there's very

503
00:23:18,239 --> 00:23:20,220
bad drones so I'm going to use this

504
00:23:20,220 --> 00:23:23,330
parrot mini-drone which is a toy drone

505
00:23:23,330 --> 00:23:27,210
I've got my little worker here on the

506
00:23:27,210 --> 00:23:32,029
front that's that's Kelsey I tolerate

507
00:23:33,739 --> 00:23:36,059
these helped us make go fly more than

508
00:23:36,059 --> 00:23:36,359
once

509
00:23:36,359 --> 00:23:39,960
alright so this is actually a complete

510
00:23:39,960 --> 00:23:42,029
Linux machine believe it or not that's

511
00:23:42,029 --> 00:23:43,590
got an ARM processor and it's running a

512
00:23:43,590 --> 00:23:45,539
busybox distro and we're going to call

513
00:23:45,539 --> 00:23:47,849
it's got a Bluetooth low-energy wireless

514
00:23:47,849 --> 00:23:48,840
interface and that's how we're going to

515
00:23:48,840 --> 00:23:50,460
control it we're not running go on it

516
00:23:50,460 --> 00:23:55,679
yet give me a few more weeks all right

517
00:23:55,679 --> 00:23:59,039
so let's turn it on put it here in the

518
00:23:59,039 --> 00:24:10,379
headquarters my cables work this is my I

519
00:24:10,379 --> 00:24:13,369
don't even use a name-brand

520
00:24:13,399 --> 00:24:17,330
that's why the open-source brings us to

521
00:24:17,330 --> 00:24:22,409
if Intel only made controllers alright

522
00:24:22,409 --> 00:24:24,059
and then let's take a look at the code

523
00:24:24,059 --> 00:24:27,479
real fast so we're using the GoBot ble

524
00:24:27,479 --> 00:24:29,700
adapter Bluetooth Low Energy adapter

525
00:24:29,700 --> 00:24:31,970
which is still in a relatively new state

526
00:24:31,970 --> 00:24:35,789
the joystick platform MQTT and then the

527
00:24:35,789 --> 00:24:39,059
mini drone itself so we've got takeoff

528
00:24:39,059 --> 00:24:41,580
and landing commands so the main work

529
00:24:41,580 --> 00:24:43,950
we're gonna do here is we're going to

530
00:24:43,950 --> 00:24:45,179
first we're going to load up the

531
00:24:45,179 --> 00:24:50,999
joystick whoops well past it we're going

532
00:24:50,999 --> 00:24:52,769
to load the joystick configuration that

533
00:24:52,769 --> 00:24:54,899
way we know which kind we all we support

534
00:24:54,899 --> 00:24:58,259
PlayStation 3 4 and Xbox 360

535
00:24:58,259 --> 00:25:00,509
you're a pull request awaits the next

536
00:25:00,509 --> 00:25:03,659
one that's just what I have so then we

537
00:25:03,659 --> 00:25:06,899
initialize our drone based on the a ble

538
00:25:06,899 --> 00:25:09,659
adapter ok which we're passing in the

539
00:25:09,659 --> 00:25:12,179
name of the device and our MQTT server

540
00:25:12,179 --> 00:25:13,909
so we actually have three different

541
00:25:13,909 --> 00:25:16,289
simultaneous types of platforms were

542
00:25:16,289 --> 00:25:18,299
communicating with in one program so

543
00:25:18,299 --> 00:25:21,049
then the work we're gonna do let's see

544
00:25:21,049 --> 00:25:23,340
the important parts when I press

545
00:25:23,340 --> 00:25:25,290
triangle we're going to take off

546
00:25:25,290 --> 00:25:26,370
and then we're going to send a message

547
00:25:26,370 --> 00:25:29,490
that says we're taking off okay so far

548
00:25:29,490 --> 00:25:32,550
so good and then when I press X were

549
00:25:32,550 --> 00:25:36,210
land so let's see triangle takeoff X

550
00:25:36,210 --> 00:25:37,950
land that's the only that's all that

551
00:25:37,950 --> 00:25:38,490
matters

552
00:25:38,490 --> 00:25:41,340
then I got a bunch of commands to you

553
00:25:41,340 --> 00:25:44,160
know handle the joysticks and then if

554
00:25:44,160 --> 00:25:46,920
you recall physical things can't respond

555
00:25:46,920 --> 00:25:48,720
as quickly you can move the joystick a

556
00:25:48,720 --> 00:25:50,880
lot faster than your drone can respond

557
00:25:50,880 --> 00:25:54,540
which will mean it will crash so we have

558
00:25:54,540 --> 00:25:57,120
this go routine which every 10

559
00:25:57,120 --> 00:25:59,130
milliseconds is going to send commands

560
00:25:59,130 --> 00:26:01,740
to the drone that way we don't or I

561
00:26:01,740 --> 00:26:04,290
don't accidentally crash it into one of

562
00:26:04,290 --> 00:26:07,740
you find people and then same thing that

563
00:26:07,740 --> 00:26:10,440
we see before we initialize our robot

564
00:26:10,440 --> 00:26:12,840
this time we have three connections we

565
00:26:12,840 --> 00:26:17,570
have two devices and let's make it work

566
00:26:17,570 --> 00:26:22,920
hopefully somewhere in here the wait

567
00:26:22,920 --> 00:26:26,100
that looks like it alright let's make

568
00:26:26,100 --> 00:26:30,900
sure my drone is still on button pushed

569
00:26:30,900 --> 00:26:34,170
I have to run this under C though

570
00:26:34,170 --> 00:26:36,900
because be able to communicate with the

571
00:26:36,900 --> 00:26:38,550
ble interface requires being in user

572
00:26:38,550 --> 00:26:42,169
space alright Colonel space

573
00:26:45,870 --> 00:26:49,439
let's see here

574
00:26:54,660 --> 00:26:57,250
that's what I was mentioning the okay

575
00:26:57,250 --> 00:27:02,220
good all right so now if all goes well

576
00:27:02,850 --> 00:27:06,160
you notice how it's now flashing because

577
00:27:06,160 --> 00:27:08,200
remember we sent a message that when

578
00:27:08,200 --> 00:27:10,540
it's in flight so I'm going to prove

579
00:27:10,540 --> 00:27:13,560
that that works by coming for landing

580
00:27:13,560 --> 00:27:16,720
all right so now we go off and so where

581
00:27:16,720 --> 00:27:20,380
is the where is the station that's bad

582
00:27:20,380 --> 00:27:22,090
we need a little more altitude to get

583
00:27:22,090 --> 00:27:28,060
all the way back there huh so we go over

584
00:27:28,060 --> 00:27:34,180
to where the problem is and then we we

585
00:27:34,180 --> 00:27:39,250
simulate the repair by doing a flip and

586
00:27:39,250 --> 00:27:43,990
then we got way too close and you guys

587
00:27:43,990 --> 00:27:45,850
didn't you know you guys in the back you

588
00:27:45,850 --> 00:27:47,830
really got gypped you got ripped off

589
00:27:47,830 --> 00:27:50,590
because you didn't even get to see the

590
00:27:50,590 --> 00:27:57,449
cool parts well maybe lower lower lower

591
00:28:00,300 --> 00:28:03,680
all right that's enough of this

592
00:28:03,680 --> 00:28:09,830
back to headquarters for a beer and

593
00:28:09,830 --> 00:28:12,580
we've come back to headquarters

594
00:28:14,490 --> 00:28:18,140
[Music]

595
00:28:18,140 --> 00:28:26,380
we've been drinking at lunch voilá

596
00:28:32,559 --> 00:28:39,279
all right so what's that fun it's also

597
00:28:39,279 --> 00:28:42,559
really exciting era we invite you to

598
00:28:42,559 --> 00:28:45,230
join the robot evolution jessica's

599
00:28:45,230 --> 00:28:47,149
revolutions have really bad downsides

600
00:28:47,149 --> 00:28:51,289
but evolution is constant this is all

601
00:28:51,289 --> 00:28:54,049
free open source Apache 2.0 so you can

602
00:28:54,049 --> 00:28:55,970
use it to build your little Empire or

603
00:28:55,970 --> 00:28:58,279
big empire or just do fun stuff on your

604
00:28:58,279 --> 00:29:00,379
own you know we're not prejudiced we're

605
00:29:00,379 --> 00:29:01,879
not going to judge you from the size of

606
00:29:01,879 --> 00:29:04,460
your project go bot dot IO is where we

607
00:29:04,460 --> 00:29:07,100
have all of our source available we have

608
00:29:07,100 --> 00:29:08,809
a really good documentation site all of

609
00:29:08,809 --> 00:29:10,850
the platforms and stuff and packages

610
00:29:10,850 --> 00:29:13,250
that you've seen some of these are part

611
00:29:13,250 --> 00:29:15,950
of the upcoming go about 1.2 release

612
00:29:15,950 --> 00:29:17,809
which is going to be out in two weeks

613
00:29:17,809 --> 00:29:19,820
concurrent with the release of go lion

614
00:29:19,820 --> 00:29:23,360
1.8 you can follow us on twitter at go

615
00:29:23,360 --> 00:29:28,449
bot io and i thank

616
00:29:33,610 --> 00:29:35,919
questions anybody who still have time

617
00:29:35,919 --> 00:29:37,840
for some questions we have time for

618
00:29:37,840 --> 00:29:39,369
questions as long as I kind of ignore

619
00:29:39,369 --> 00:29:40,480
you while I move everything out of the

620
00:29:40,480 --> 00:29:43,090
way for the next speaker we have ten

621
00:29:43,090 --> 00:29:45,039
minutes before I officially supposed to

622
00:29:45,039 --> 00:29:46,840
stop in five minutes before they're

623
00:29:46,840 --> 00:29:49,600
supposed to start so so anyway yes

624
00:29:49,600 --> 00:29:56,259
please yes how many actuators and

625
00:29:56,259 --> 00:29:58,720
sensors do you actually support like a

626
00:29:58,720 --> 00:30:01,450
lot or do you make to make money do you

627
00:30:01,450 --> 00:30:05,350
need to need to make them custom so the

628
00:30:05,350 --> 00:30:07,720
question was how many different kinds of

629
00:30:07,720 --> 00:30:09,850
sensors do you support and then the

630
00:30:09,850 --> 00:30:11,619
second half was and can you make custom

631
00:30:11,619 --> 00:30:14,169
sensor implementations so the first one

632
00:30:14,169 --> 00:30:16,960
is right now I think we have about we

633
00:30:16,960 --> 00:30:20,109
have 25 platforms I think we have 20 or

634
00:30:20,109 --> 00:30:23,559
so different GPIO devices and I think 14

635
00:30:23,559 --> 00:30:27,879
or 15 I Square C devices we've had a lot

636
00:30:27,879 --> 00:30:30,249
of contributions lately from people who

637
00:30:30,249 --> 00:30:31,720
are working on drones and other devices

638
00:30:31,720 --> 00:30:32,799
I could tell because they have

639
00:30:32,799 --> 00:30:35,259
accelerometers and barometers you know

640
00:30:35,259 --> 00:30:36,519
barometers are used for altitude

641
00:30:36,519 --> 00:30:39,730
calculations usually when flying unless

642
00:30:39,730 --> 00:30:41,379
you're really close to the ground it's

643
00:30:41,379 --> 00:30:43,119
very easy to add new ones which is why

644
00:30:43,119 --> 00:30:46,059
we've been getting all of these so your

645
00:30:46,059 --> 00:30:47,409
pull request would be greatly

646
00:30:47,409 --> 00:30:53,320
appreciated more oh wait important thing

647
00:30:53,320 --> 00:30:55,419
I almost forgot I have a bunch of go bot

648
00:30:55,419 --> 00:30:57,929
stickers

649
00:30:59,620 --> 00:31:04,490
the important parts so feel free to mob

650
00:31:04,490 --> 00:31:07,820
the stage makes me feel nice but

651
00:31:07,820 --> 00:31:09,740
otherwise just spot I'll be around I'm

652
00:31:09,740 --> 00:31:13,760
not going anywhere fast and the other

653
00:31:13,760 --> 00:31:20,290
questions no thank you very much thanks

654
00:39:25,610 --> 00:39:31,700
look those work hello

655
00:39:47,430 --> 00:39:51,089
okay please be seated

656
00:39:51,089 --> 00:39:56,940
our next talk is about gogit which is

657
00:39:56,940 --> 00:40:03,380
get implementation made in goal by

658
00:40:03,380 --> 00:40:06,380
Santiago

