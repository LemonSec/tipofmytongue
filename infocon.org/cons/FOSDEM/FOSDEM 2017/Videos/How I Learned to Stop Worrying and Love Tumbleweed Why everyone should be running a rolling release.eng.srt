1
00:00:00,030 --> 00:00:02,480
thank you

2
00:00:04,680 --> 00:00:08,650
but thank you very much so yeah I'm

3
00:00:08,650 --> 00:00:11,680
basically here to convince you all that

4
00:00:11,680 --> 00:00:16,090
my there we go that my belief for the

5
00:00:16,090 --> 00:00:17,410
rolling releases of the future of the

6
00:00:17,410 --> 00:00:18,720
mister bution

7
00:00:18,720 --> 00:00:21,910
you know I the more I look at this the

8
00:00:21,910 --> 00:00:23,860
more I've been working in this so my

9
00:00:23,860 --> 00:00:25,720
history is I've been an open suitor

10
00:00:25,720 --> 00:00:28,450
contributor now for eleven years since

11
00:00:28,450 --> 00:00:30,789
the project started in the last three

12
00:00:30,789 --> 00:00:31,930
years I've actually started working for

13
00:00:31,930 --> 00:00:33,879
Souza testing the enterprise

14
00:00:33,879 --> 00:00:35,739
distribution to the regular stuff so you

15
00:00:35,739 --> 00:00:37,269
know I've been a regular distribution

16
00:00:37,269 --> 00:00:40,149
guy for a really long time but because

17
00:00:40,149 --> 00:00:42,219
of tumbleweed what we've been doing in

18
00:00:42,219 --> 00:00:45,670
tumbleweed for years now I I see this as

19
00:00:45,670 --> 00:00:48,219
the trend of all distributions where

20
00:00:48,219 --> 00:00:50,530
things are going and of course that

21
00:00:50,530 --> 00:00:51,819
comes with certain issues and certain

22
00:00:51,819 --> 00:00:53,170
problems and you know that's what I'm

23
00:00:53,170 --> 00:00:55,839
gonna talk about today so really need to

24
00:00:55,839 --> 00:00:57,519
start in the beginning with all of this

25
00:00:57,519 --> 00:01:01,659
stuff of you know how how this began and

26
00:01:01,659 --> 00:01:03,549
and you know what the heck is a Linux

27
00:01:03,549 --> 00:01:06,159
distribution anyway so you know we're in

28
00:01:06,159 --> 00:01:07,600
the destroyed everyone most of us know

29
00:01:07,600 --> 00:01:10,659
what a regular releases you know most

30
00:01:10,659 --> 00:01:12,219
Linux distributions are a regular

31
00:01:12,219 --> 00:01:14,710
release releasing every X months or X

32
00:01:14,710 --> 00:01:18,390
years on some kind of regular cadence

33
00:01:18,390 --> 00:01:20,619
generally speaking once it's released

34
00:01:20,619 --> 00:01:22,659
you're freezing the versions or if you

35
00:01:22,659 --> 00:01:24,159
are upgrading your somewhat reluctantly

36
00:01:24,159 --> 00:01:25,810
upgrading those versions you know we're

37
00:01:25,810 --> 00:01:27,219
trying to keep a nice stable

38
00:01:27,219 --> 00:01:28,960
distribution for our users we don't want

39
00:01:28,960 --> 00:01:30,280
to constantly be breaking everything all

40
00:01:30,280 --> 00:01:32,799
of the time and then if we do have to

41
00:01:32,799 --> 00:01:34,090
fix something but generally talking

42
00:01:34,090 --> 00:01:36,429
about backporting individual fixes and

43
00:01:36,429 --> 00:01:38,350
narrowly fixing the distribution not

44
00:01:38,350 --> 00:01:41,020
wholesale changing package versions you

45
00:01:41,020 --> 00:01:42,789
know generally speaking this is you know

46
00:01:42,789 --> 00:01:45,060
the fedora the the debian the

47
00:01:45,060 --> 00:01:47,229
traditional openSUSE model and of course

48
00:01:47,229 --> 00:01:50,439
the country model one of the problems

49
00:01:50,439 --> 00:01:52,359
with regular releases okay how do you

50
00:01:52,359 --> 00:01:54,640
then actually do a big step change how

51
00:01:54,640 --> 00:01:56,049
do you develop that how do you be now

52
00:01:56,049 --> 00:01:58,270
get ready for the next version so all

53
00:01:58,270 --> 00:01:59,619
these distributions pretty much have

54
00:01:59,619 --> 00:02:02,109
some kind of death branch you know

55
00:02:02,109 --> 00:02:04,359
tumbleweed it's like openSUSE we used to

56
00:02:04,359 --> 00:02:06,729
call that Factory in Fedora met in

57
00:02:06,729 --> 00:02:08,818
fedora they call it rawhide Debian CID

58
00:02:08,818 --> 00:02:11,050
you know a development branch where

59
00:02:11,050 --> 00:02:12,910
developers can just check in their stuff

60
00:02:12,910 --> 00:02:15,280
build you know packages get built

61
00:02:15,280 --> 00:02:17,170
maybe ideally I toes or something gets

62
00:02:17,170 --> 00:02:18,130
spun out

63
00:02:18,130 --> 00:02:20,290
and you have the you know the next base

64
00:02:20,290 --> 00:02:21,790
for the next major release of your

65
00:02:21,790 --> 00:02:23,440
distribution you know so it's always

66
00:02:23,440 --> 00:02:25,840
released in you know nothing frozen

67
00:02:25,840 --> 00:02:28,120
nothing backported just pure code going

68
00:02:28,120 --> 00:02:31,120
in making packages and without fail

69
00:02:31,120 --> 00:02:33,190
it's normally broken you know it you

70
00:02:33,190 --> 00:02:35,200
know you're lucky if it gets working in

71
00:02:35,200 --> 00:02:36,790
the last couple of weeks before you

72
00:02:36,790 --> 00:02:39,120
release even there it's normally broken

73
00:02:39,120 --> 00:02:41,860
but that's what US District guys have to

74
00:02:41,860 --> 00:02:42,910
live with you know we're dealing with

75
00:02:42,910 --> 00:02:44,800
this lovely broken dead branches all the

76
00:02:44,800 --> 00:02:49,060
damn time but that's kind of a big

77
00:02:49,060 --> 00:02:51,460
problem for not just distro developers

78
00:02:51,460 --> 00:02:53,170
but any general developer looking to

79
00:02:53,170 --> 00:02:54,790
target your platform I mean you know

80
00:02:54,790 --> 00:02:56,410
they need to be close to you know your

81
00:02:56,410 --> 00:02:58,150
latest and greatest your latest upstream

82
00:02:58,150 --> 00:03:01,300
and all of the latest versions of all

83
00:03:01,300 --> 00:03:02,740
those upstream packages you have in your

84
00:03:02,740 --> 00:03:05,620
dev branch but it's completely unstable

85
00:03:05,620 --> 00:03:07,840
and unusable and you know we've got work

86
00:03:07,840 --> 00:03:10,060
to do but it's always breaking so you

87
00:03:10,060 --> 00:03:11,500
end up with people coming up with

88
00:03:11,500 --> 00:03:13,990
wonderful hacky clutches of you know

89
00:03:13,990 --> 00:03:15,580
maybe taking the stable base and running

90
00:03:15,580 --> 00:03:18,870
some PPA or OBS repo on top of it but

91
00:03:18,870 --> 00:03:21,160
you know then they have to be base all

92
00:03:21,160 --> 00:03:22,480
of that it's always a mess so you know

93
00:03:22,480 --> 00:03:25,270
it's a nightmare to develop on it's a

94
00:03:25,270 --> 00:03:27,400
nightmare to develop for for

95
00:03:27,400 --> 00:03:29,530
distributions in particular this becomes

96
00:03:29,530 --> 00:03:32,350
a big community and societal problem I

97
00:03:32,350 --> 00:03:33,910
mean if your debt if your dev branch is

98
00:03:33,910 --> 00:03:36,640
not stable how are you gonna get new

99
00:03:36,640 --> 00:03:39,130
contributors to your next release well

100
00:03:39,130 --> 00:03:40,810
you're not they're gonna go away and

101
00:03:40,810 --> 00:03:42,520
play with something else

102
00:03:42,520 --> 00:03:45,040
you know you get less bugs being fouled

103
00:03:45,040 --> 00:03:46,870
you get less polish on your distribution

104
00:03:46,870 --> 00:03:49,330
and then in even with your regular

105
00:03:49,330 --> 00:03:51,850
release cadence you have a hard time

106
00:03:51,850 --> 00:03:52,930
actually getting that release out the

107
00:03:52,930 --> 00:03:55,600
door and I think most distributions that

108
00:03:55,600 --> 00:03:57,070
have been around for the last years have

109
00:03:57,070 --> 00:03:58,900
had these terrible problems openSUSE

110
00:03:58,900 --> 00:04:01,690
definitely has of chugging along with a

111
00:04:01,690 --> 00:04:03,610
plan trying to get a six or an eight

112
00:04:03,610 --> 00:04:05,620
months release you know release out and

113
00:04:05,620 --> 00:04:07,330
then you're you know in the last month

114
00:04:07,330 --> 00:04:09,790
or so and you realize our dev branch is

115
00:04:09,790 --> 00:04:11,770
totally messed up we're gonna have to

116
00:04:11,770 --> 00:04:13,150
delay for two months three months four

117
00:04:13,150 --> 00:04:15,850
months and you know and you know we've

118
00:04:15,850 --> 00:04:17,529
done that Fedora has problems like that

119
00:04:17,529 --> 00:04:19,690
as well a bunt you have it always

120
00:04:19,690 --> 00:04:21,730
happens and big part of this is the

121
00:04:21,730 --> 00:04:23,350
technical debt that comes with that

122
00:04:23,350 --> 00:04:24,760
you know because you haven't got people

123
00:04:24,760 --> 00:04:26,560
using that all the time all these cloud

124
00:04:26,560 --> 00:04:27,910
you little hacks get in there you've

125
00:04:27,910 --> 00:04:30,520
gonna have to fix it sooner or later but

126
00:04:30,520 --> 00:04:31,840
you're def branch is a complete

127
00:04:31,840 --> 00:04:34,610
I'm from a project point if you that

128
00:04:34,610 --> 00:04:36,349
generally ends up being a bit of a

129
00:04:36,349 --> 00:04:38,419
decline for that distribution you know

130
00:04:38,419 --> 00:04:40,219
less people are using you you're not

131
00:04:40,219 --> 00:04:41,449
moving that fast you're not that

132
00:04:41,449 --> 00:04:43,610
interesting for anybody your project

133
00:04:43,610 --> 00:04:45,050
start stagnating everything starts going

134
00:04:45,050 --> 00:04:49,039
downhill it's also a problem for up

135
00:04:49,039 --> 00:04:50,719
streams you know they want their

136
00:04:50,719 --> 00:04:52,939
software in the hands of users no that's

137
00:04:52,939 --> 00:04:55,180
the point and having a regular release

138
00:04:55,180 --> 00:04:58,789
with all that freezing is way too slow

139
00:04:58,789 --> 00:05:00,770
for them they're you know they're not

140
00:05:00,770 --> 00:05:01,699
going to be able to deliver their

141
00:05:01,699 --> 00:05:03,530
software to eight months or a year later

142
00:05:03,530 --> 00:05:07,340
or two years later don't do that at all

143
00:05:07,340 --> 00:05:09,349
and regular release is not at all it's a

144
00:05:09,349 --> 00:05:10,879
complete mess there's no way of

145
00:05:10,879 --> 00:05:12,909
targeting for upstream developers

146
00:05:12,909 --> 00:05:15,409
everybody talked about flat back and

147
00:05:15,409 --> 00:05:18,110
snappy and containerized apps and you

148
00:05:18,110 --> 00:05:19,550
know promise that it's absolutely

149
00:05:19,550 --> 00:05:21,039
wonderful and going to solve everything

150
00:05:21,039 --> 00:05:23,779
itself some of the problems and I'll be

151
00:05:23,779 --> 00:05:25,490
talking about that more in Johnson at

152
00:05:25,490 --> 00:05:29,990
one o'clock today and then last but by

153
00:05:29,990 --> 00:05:34,210
no means least of course you know users

154
00:05:34,210 --> 00:05:36,440
there are enthusiasts they're here

155
00:05:36,440 --> 00:05:38,750
they're the ones who want to run

156
00:05:38,750 --> 00:05:41,949
everything see what we're doing

157
00:05:45,830 --> 00:05:47,660
they don't want to wait they want to get

158
00:05:47,660 --> 00:05:49,670
their latest software as soon as that

159
00:05:49,670 --> 00:05:50,990
upstream published it you know new

160
00:05:50,990 --> 00:05:52,550
version of gnome or KDE they want to be

161
00:05:52,550 --> 00:05:56,660
running it right away but they also want

162
00:05:56,660 --> 00:05:58,430
a consistent experience they don't just

163
00:05:58,430 --> 00:06:00,770
want some hack together little bundle

164
00:06:00,770 --> 00:06:02,240
running on top of whatever distro

165
00:06:02,240 --> 00:06:04,580
they've chosen they want that polish

166
00:06:04,580 --> 00:06:06,140
they want it integrated with the entire

167
00:06:06,140 --> 00:06:07,730
experience they want it easy to install

168
00:06:07,730 --> 00:06:09,440
and maintain they want it well patched

169
00:06:09,440 --> 00:06:12,850
and when you start talking to a lot of

170
00:06:12,850 --> 00:06:14,840
especially long-term Linux users that

171
00:06:14,840 --> 00:06:16,730
the you know asking why they picked

172
00:06:16,730 --> 00:06:19,670
their distribution that kind of you know

173
00:06:19,670 --> 00:06:22,040
I'm somewhat intangible quality of oh it

174
00:06:22,040 --> 00:06:24,290
just felt right it was put together

175
00:06:24,290 --> 00:06:26,750
properly so that's why I'm still using

176
00:06:26,750 --> 00:06:29,240
it is the reason why we end up keeping

177
00:06:29,240 --> 00:06:30,710
those users and might be driving more

178
00:06:30,710 --> 00:06:32,420
people into into into our distributions

179
00:06:32,420 --> 00:06:34,220
is because we've got those things right

180
00:06:34,220 --> 00:06:37,010
that no news of experience but more than

181
00:06:37,010 --> 00:06:38,240
that of just building it properly

182
00:06:38,240 --> 00:06:39,950
building it consistently and convincing

183
00:06:39,950 --> 00:06:41,450
people that we know we're doing this the

184
00:06:41,450 --> 00:06:43,040
right way for the right reasons with the

185
00:06:43,040 --> 00:06:45,860
right things and they're the ones who

186
00:06:45,860 --> 00:06:48,020
are going to be the the contributors of

187
00:06:48,020 --> 00:06:50,030
tomorrow but they can't use our dev

188
00:06:50,030 --> 00:06:51,860
branches and our regular releases are

189
00:06:51,860 --> 00:06:56,930
too slow so income running releases now

190
00:06:56,930 --> 00:06:58,910
everybody hopefully knows what a rolling

191
00:06:58,910 --> 00:07:01,430
release is but generally speaking a

192
00:07:01,430 --> 00:07:03,850
rolling release has no release schedule

193
00:07:03,850 --> 00:07:06,860
most if not all packages are frequently

194
00:07:06,860 --> 00:07:08,780
updated some distributions like to be

195
00:07:08,780 --> 00:07:10,250
partially rolling so you know have a

196
00:07:10,250 --> 00:07:11,780
frozen bit but I'll be talking about

197
00:07:11,780 --> 00:07:14,900
more on that later and updated delivered

198
00:07:14,900 --> 00:07:17,060
when they're ready and of course when

199
00:07:17,060 --> 00:07:18,470
they're ready is a nice quirky

200
00:07:18,470 --> 00:07:20,690
definition so you know when is something

201
00:07:20,690 --> 00:07:23,840
ever ready and the main examples that I

202
00:07:23,840 --> 00:07:24,830
can think of for this are you know

203
00:07:24,830 --> 00:07:26,660
obviously arch linux you know then

204
00:07:26,660 --> 00:07:28,340
Gentoo kind of popularized the whole

205
00:07:28,340 --> 00:07:29,780
thing and I'm here to talk about

206
00:07:29,780 --> 00:07:32,289
tumbleweed

207
00:07:32,340 --> 00:07:34,530
quite often the feedback I hear about

208
00:07:34,530 --> 00:07:38,970
rolling releases so is its unstable you

209
00:07:38,970 --> 00:07:40,830
know it changes too much I can't trust

210
00:07:40,830 --> 00:07:43,320
it even if I do try it it's unreliable

211
00:07:43,320 --> 00:07:46,530
it breaks too often or it's just hard to

212
00:07:46,530 --> 00:07:48,120
live with there's too much extra work I

213
00:07:48,120 --> 00:07:49,800
have to do to keep up with this rolling

214
00:07:49,800 --> 00:07:52,950
thing and when it comes to this sort of

215
00:07:52,950 --> 00:07:54,630
the the stability side of things in this

216
00:07:54,630 --> 00:07:56,340
case I'm really talking about stability

217
00:07:56,340 --> 00:08:01,169
in how fast is something moving the you

218
00:08:01,169 --> 00:08:02,700
know I'm talking about me

219
00:08:02,700 --> 00:08:04,830
something always changing you know

220
00:08:04,830 --> 00:08:06,240
that's the point of a rolling release

221
00:08:06,240 --> 00:08:07,350
you know you want to get that new

222
00:08:07,350 --> 00:08:08,820
software the hands of users you need to

223
00:08:08,820 --> 00:08:10,410
be moving at that pace these up streams

224
00:08:10,410 --> 00:08:12,390
are moving faster and faster we need to

225
00:08:12,390 --> 00:08:14,820
be keeping up with them or some cases

226
00:08:14,820 --> 00:08:17,060
maybe even going faster than they are

227
00:08:17,060 --> 00:08:18,810
that's the point

228
00:08:18,810 --> 00:08:20,610
but then you've got to deliver it to

229
00:08:20,610 --> 00:08:22,140
your users and your developers who need

230
00:08:22,140 --> 00:08:24,210
to use the damn thing so it has to be

231
00:08:24,210 --> 00:08:26,760
built and tested and then integrated

232
00:08:26,760 --> 00:08:29,490
together in a consistent way and this is

233
00:08:29,490 --> 00:08:30,840
a problem that I don't think many

234
00:08:30,840 --> 00:08:33,659
rolling distributions really get a

235
00:08:33,659 --> 00:08:35,130
complete handle on you know there's a

236
00:08:35,130 --> 00:08:37,169
Tabet in distribution sites to think of

237
00:08:37,169 --> 00:08:39,539
a we're just putting together a bunch of

238
00:08:39,539 --> 00:08:41,789
packages and then it's a collection you

239
00:08:41,789 --> 00:08:43,140
know you know we're shipping an

240
00:08:43,140 --> 00:08:44,880
operating system that contains a bunch

241
00:08:44,880 --> 00:08:46,560
of packages but we have to get all of

242
00:08:46,560 --> 00:08:48,510
that integration right and that's more

243
00:08:48,510 --> 00:08:49,560
true with a rolling release than

244
00:08:49,560 --> 00:08:53,280
anything else and also that also means

245
00:08:53,280 --> 00:08:56,460
finding a way to shield those users not

246
00:08:56,460 --> 00:08:58,320
from breakage I'll talk about that next

247
00:08:58,320 --> 00:09:00,720
but from those behavioral changes you

248
00:09:00,720 --> 00:09:02,250
know upstream has made some crazy

249
00:09:02,250 --> 00:09:03,690
decision to change something in their

250
00:09:03,690 --> 00:09:06,510
application what if the user who's got

251
00:09:06,510 --> 00:09:08,460
this project to do tomorrow doesn't know

252
00:09:08,460 --> 00:09:09,960
how to do that yet you know doesn't know

253
00:09:09,960 --> 00:09:11,970
how to use that new feature or you know

254
00:09:11,970 --> 00:09:13,980
deal with those new defaults so there

255
00:09:13,980 --> 00:09:15,330
has to be some way of shielding those

256
00:09:15,330 --> 00:09:17,640
users from the unexpected behavioral

257
00:09:17,640 --> 00:09:20,040
changes just so they can get on with the

258
00:09:20,040 --> 00:09:21,690
work they've got to get on and then and

259
00:09:21,690 --> 00:09:23,430
learn the new feature when they have the

260
00:09:23,430 --> 00:09:27,060
time to sit down and learn it on the

261
00:09:27,060 --> 00:09:29,580
reliability side of things rolling

262
00:09:29,580 --> 00:09:31,950
releases have the typically get accused

263
00:09:31,950 --> 00:09:34,410
of always breaking know it's got

264
00:09:34,410 --> 00:09:36,630
thousands moving parts from thousands of

265
00:09:36,630 --> 00:09:38,970
different upstream projects getting all

266
00:09:38,970 --> 00:09:40,560
that working together especially when

267
00:09:40,560 --> 00:09:41,880
you know those upstream projects have

268
00:09:41,880 --> 00:09:43,560
dependencies on you know somewhere in

269
00:09:43,560 --> 00:09:44,850
between and they were moving at

270
00:09:44,850 --> 00:09:45,970
different paces is

271
00:09:45,970 --> 00:09:48,910
to challenge just like I said when when

272
00:09:48,910 --> 00:09:51,910
it comes to the stability side of things

273
00:09:51,910 --> 00:09:54,430
you know we have to build this together

274
00:09:54,430 --> 00:09:56,470
we have to test it together and we have

275
00:09:56,470 --> 00:09:58,240
to integrate it as one consistent

276
00:09:58,240 --> 00:09:59,980
distribution this is not a piece of

277
00:09:59,980 --> 00:10:01,689
parts it has the rolling release has to

278
00:10:01,689 --> 00:10:03,610
be everything done as a consistent

279
00:10:03,610 --> 00:10:07,259
district in practical terms that means

280
00:10:07,259 --> 00:10:10,120
testing at the submission so each

281
00:10:10,120 --> 00:10:11,860
submission being tested to make sure

282
00:10:11,860 --> 00:10:13,209
that isn't going to break everything and

283
00:10:13,209 --> 00:10:15,879
then also not forgetting about testing

284
00:10:15,879 --> 00:10:17,560
as a whole doesn't matter if that one

285
00:10:17,560 --> 00:10:19,180
package is fine if when you put that in

286
00:10:19,180 --> 00:10:21,759
it breaks twenty other things so testing

287
00:10:21,759 --> 00:10:23,980
the entire distribution including all of

288
00:10:23,980 --> 00:10:27,459
those changes in one go and obviously

289
00:10:27,459 --> 00:10:29,170
users shouldn't be shipped something it

290
00:10:29,170 --> 00:10:30,699
doesn't work you know this isn't a dev

291
00:10:30,699 --> 00:10:32,110
branch we're talking about here and

292
00:10:32,110 --> 00:10:33,579
really differentiates a break on that

293
00:10:33,579 --> 00:10:34,329
useful anyway

294
00:10:34,329 --> 00:10:37,180
the thing has to at least work in some

295
00:10:37,180 --> 00:10:42,519
basic functional sense and then I looked

296
00:10:42,519 --> 00:10:44,740
at how other distributions deal with

297
00:10:44,740 --> 00:10:46,240
testing most of us deal with this thing

298
00:10:46,240 --> 00:10:48,399
we used to deal with it this way the

299
00:10:48,399 --> 00:10:50,230
concept of sort of passive testing you

300
00:10:50,230 --> 00:10:51,819
know we put it in some testing branch

301
00:10:51,819 --> 00:10:55,829
Debian testing you know whatever and

302
00:10:55,829 --> 00:10:57,850
just leave it there for a couple of

303
00:10:57,850 --> 00:11:00,009
weeks and trust that the community would

304
00:11:00,009 --> 00:11:01,420
go away and test it and then if they

305
00:11:01,420 --> 00:11:02,529
haven't found any bugs that's good

306
00:11:02,529 --> 00:11:05,949
enough we ship it it's madness but we

307
00:11:05,949 --> 00:11:09,040
all do it but it's absolute madness and

308
00:11:09,040 --> 00:11:11,649
it works better or worse depending on

309
00:11:11,649 --> 00:11:15,220
how big your community is but it's still

310
00:11:15,220 --> 00:11:16,839
playing Russian roulette you know okay

311
00:11:16,839 --> 00:11:19,329
you've got a huge pile of testers okay

312
00:11:19,329 --> 00:11:20,649
you've got more chambers in the ganya

313
00:11:20,649 --> 00:11:21,910
slightly less likely get your set head

314
00:11:21,910 --> 00:11:22,990
shut off but if you've got lots of

315
00:11:22,990 --> 00:11:24,309
developers you've got more bullets in

316
00:11:24,309 --> 00:11:25,809
the gun eventually someone's going to

317
00:11:25,809 --> 00:11:29,769
get shot so for a rolling release you

318
00:11:29,769 --> 00:11:32,500
need to actively confirm this thing will

319
00:11:32,500 --> 00:11:36,160
work does it work in isolation does it

320
00:11:36,160 --> 00:11:38,070
work in the border context

321
00:11:38,070 --> 00:11:40,650
and does the behavior change in the user

322
00:11:40,650 --> 00:11:42,600
you know the way a user expects you know

323
00:11:42,600 --> 00:11:44,400
you've won it you need to shield the

324
00:11:44,400 --> 00:11:45,720
users from that you need to at least be

325
00:11:45,720 --> 00:11:46,620
able to warn them

326
00:11:46,620 --> 00:11:48,180
okay this package is gonna completely

327
00:11:48,180 --> 00:11:50,880
change how these commands work this UI

328
00:11:50,880 --> 00:11:52,440
elements gonna change you know you need

329
00:11:52,440 --> 00:11:54,210
to be aware that this stuff is you know

330
00:11:54,210 --> 00:11:56,160
gonna start hitting your users before it

331
00:11:56,160 --> 00:11:57,960
hits them but you need to have all those

332
00:11:57,960 --> 00:12:00,870
answers ideally before upstream even

333
00:12:00,870 --> 00:12:03,780
finish their release at least as fast as

334
00:12:03,780 --> 00:12:05,580
you can afterwards because you need to

335
00:12:05,580 --> 00:12:07,080
be shipping this stuff as fast as you

336
00:12:07,080 --> 00:12:09,180
can after the upstream projects have

337
00:12:09,180 --> 00:12:12,000
finished what they're doing and this is

338
00:12:12,000 --> 00:12:13,500
really the ultimate challenge of the

339
00:12:13,500 --> 00:12:16,740
whole thing and well yeah the solutions

340
00:12:16,740 --> 00:12:21,050
are hopefully quite interesting and then

341
00:12:21,050 --> 00:12:23,520
talking about things how to live with

342
00:12:23,520 --> 00:12:25,320
you know when you look at rolling

343
00:12:25,320 --> 00:12:26,670
releases you know arch have a great

344
00:12:26,670 --> 00:12:28,170
philosophy that I really agree with you

345
00:12:28,170 --> 00:12:30,450
know do-it-yourself it's a learning

346
00:12:30,450 --> 00:12:32,670
exercise for the arch for arch it works

347
00:12:32,670 --> 00:12:33,650
really really well

348
00:12:33,650 --> 00:12:36,090
the gentle way they don't have a nice

349
00:12:36,090 --> 00:12:38,160
definition but that's kind of my variant

350
00:12:38,160 --> 00:12:41,250
of it you know do it yourself and then

351
00:12:41,250 --> 00:12:42,690
you've got time to read the arch wiki to

352
00:12:42,690 --> 00:12:44,190
figure out what's going on while the

353
00:12:44,190 --> 00:12:47,850
whole thing is compiling and with both

354
00:12:47,850 --> 00:12:49,170
of these distributions and a lot of

355
00:12:49,170 --> 00:12:50,880
others you know if something goes wrong

356
00:12:50,880 --> 00:12:52,590
that's it you're on your own

357
00:12:52,590 --> 00:12:57,300
good luck get get out VM or Emacs yeah

358
00:12:57,300 --> 00:12:59,830
you might get lucky to fix it

359
00:12:59,830 --> 00:13:01,900
but who said rolling releases had to be

360
00:13:01,900 --> 00:13:04,900
difficult you know those fit for their

361
00:13:04,900 --> 00:13:07,510
users fine but the problems are much

362
00:13:07,510 --> 00:13:09,760
broader than that and I think the

363
00:13:09,760 --> 00:13:11,890
solution is actually much much broader

364
00:13:11,890 --> 00:13:15,100
than that and this is this is where

365
00:13:15,100 --> 00:13:18,340
tumbleweed came in now I'd love to be to

366
00:13:18,340 --> 00:13:19,330
take credit and say it was all my idea

367
00:13:19,330 --> 00:13:22,390
but it wasn't tumbleweed and it

368
00:13:22,390 --> 00:13:23,890
initially started in the openSUSE

369
00:13:23,890 --> 00:13:26,200
community by Greg Hartmann he was

370
00:13:26,200 --> 00:13:28,630
working at Sousa at the time and what

371
00:13:28,630 --> 00:13:30,730
Sousa was doing without and openSUSE was

372
00:13:30,730 --> 00:13:32,770
doing with our traditional releases was

373
00:13:32,770 --> 00:13:34,210
way too boring for him you know

374
00:13:34,210 --> 00:13:36,010
upstream kernel hackers you know he

375
00:13:36,010 --> 00:13:37,870
needs something completely different and

376
00:13:37,870 --> 00:13:43,300
it originally started as effectively an

377
00:13:43,300 --> 00:13:44,770
add-on to the original openSUSE

378
00:13:44,770 --> 00:13:46,450
distribution so we started with the base

379
00:13:46,450 --> 00:13:51,030
system and did rolling stuff on top now

380
00:13:51,030 --> 00:13:53,170
over the last couple of years it's

381
00:13:53,170 --> 00:13:55,270
totally transformed from that model to

382
00:13:55,270 --> 00:13:56,820
what I'm going to talk about in a minute

383
00:13:56,820 --> 00:13:59,290
where it's now moving at the pace of

384
00:13:59,290 --> 00:14:01,690
contribution the entire code base will

385
00:14:01,690 --> 00:14:03,460
move as fast as our contributors can get

386
00:14:03,460 --> 00:14:04,750
those stuff packaged and we have a

387
00:14:04,750 --> 00:14:06,370
process and the tools and the technology

388
00:14:06,370 --> 00:14:09,250
to move that incredibly quickly with the

389
00:14:09,250 --> 00:14:11,260
yeah with those upstream projects as

390
00:14:11,260 --> 00:14:12,550
long as we have the contributors to do

391
00:14:12,550 --> 00:14:15,910
it it's continuously tested and when it

392
00:14:15,910 --> 00:14:17,260
comes to you know who we're expecting to

393
00:14:17,260 --> 00:14:19,360
use it well basically anybody who comes

394
00:14:19,360 --> 00:14:21,280
to foster I mean you know be well the

395
00:14:21,280 --> 00:14:24,510
target audience for tumbleweed perfectly

396
00:14:24,510 --> 00:14:26,410
as I mentioned with the original

397
00:14:26,410 --> 00:14:30,070
tumbleweed so this is before 2014 it was

398
00:14:30,070 --> 00:14:32,140
a rolling update repository that we

399
00:14:32,140 --> 00:14:33,940
added to an existing the existing

400
00:14:33,940 --> 00:14:36,550
openSUSE distribution so you started

401
00:14:36,550 --> 00:14:38,320
with the base system we released that

402
00:14:38,320 --> 00:14:39,820
every six months or eight months or a

403
00:14:39,820 --> 00:14:41,380
year depending on how things were going

404
00:14:41,380 --> 00:14:44,350
and then you'd you know we had a role on

405
00:14:44,350 --> 00:14:45,940
top of that the focus obviously with

406
00:14:45,940 --> 00:14:48,280
Greg he was interested in the kernel his

407
00:14:48,280 --> 00:14:50,620
desktop environment of choice and you

408
00:14:50,620 --> 00:14:51,850
know the community added other things as

409
00:14:51,850 --> 00:14:53,320
well so it's basically sort of a bit of

410
00:14:53,320 --> 00:14:55,180
user space in a bit of kernel space and

411
00:14:55,180 --> 00:14:56,770
most of the stuff in between we just

412
00:14:56,770 --> 00:14:58,420
relied on the stability of this thing

413
00:14:58,420 --> 00:15:01,600
the stable base to work fine and if it

414
00:15:01,600 --> 00:15:03,730
didn't work fine then tumbleweed would

415
00:15:03,730 --> 00:15:05,050
quite often just overwrite those

416
00:15:05,050 --> 00:15:07,240
packages with whatever it needed in that

417
00:15:07,240 --> 00:15:09,220
in that rolling bit so you know it was a

418
00:15:09,220 --> 00:15:10,190
Franken Susan

419
00:15:10,190 --> 00:15:13,160
it really really was you know it was

420
00:15:13,160 --> 00:15:15,290
built that way by design partly cuz it's

421
00:15:15,290 --> 00:15:17,750
easy to maintain that way and then of

422
00:15:17,750 --> 00:15:19,820
course every every night eight months we

423
00:15:19,820 --> 00:15:21,680
do another openSUSE release and then

424
00:15:21,680 --> 00:15:23,060
have to reset the whole thing to zero

425
00:15:23,060 --> 00:15:26,180
again and start from scratch which was a

426
00:15:26,180 --> 00:15:29,570
huge problem so the partially rolling

427
00:15:29,570 --> 00:15:32,210
the the Franklin Sousa approach it just

428
00:15:32,210 --> 00:15:34,250
did not work we tried it for several

429
00:15:34,250 --> 00:15:37,880
years the main problems we had were

430
00:15:37,880 --> 00:15:39,950
packages breaking sort of over that

431
00:15:39,950 --> 00:15:42,110
chasm between the the stable base and

432
00:15:42,110 --> 00:15:43,820
and the rolling part you know some

433
00:15:43,820 --> 00:15:45,680
dependency requirements or whatever you

434
00:15:45,680 --> 00:15:47,390
know just weird behavior issues

435
00:15:47,390 --> 00:15:48,440
appearing out of nowhere

436
00:15:48,440 --> 00:15:51,560
weird dependency issues seg faults you

437
00:15:51,560 --> 00:15:54,440
couldn't believe and of course you can

438
00:15:54,440 --> 00:15:56,210
deal with those issues one by one and

439
00:15:56,210 --> 00:15:58,190
then you ad hoc replace those broken

440
00:15:58,190 --> 00:16:00,470
parts so the tumbleweed bowling stack on

441
00:16:00,470 --> 00:16:01,820
top gets a little bit bigger than the

442
00:16:01,820 --> 00:16:03,920
places more from your base system but

443
00:16:03,920 --> 00:16:05,390
then your stable base is no longer

444
00:16:05,390 --> 00:16:08,870
stable so you've defeated the point of

445
00:16:08,870 --> 00:16:11,330
trying to be partially rolling and then

446
00:16:11,330 --> 00:16:14,510
this reset to zero meant you'd be

447
00:16:14,510 --> 00:16:16,100
happily rolling along and then we do a

448
00:16:16,100 --> 00:16:17,510
new major release and you're back to

449
00:16:17,510 --> 00:16:20,540
square one and starting again which yeah

450
00:16:20,540 --> 00:16:22,220
it was just painfully disruptive for

451
00:16:22,220 --> 00:16:24,410
users you know so often we avoided

452
00:16:24,410 --> 00:16:27,500
rolling back package versions but it was

453
00:16:27,500 --> 00:16:29,870
still a complete you know a complete

454
00:16:29,870 --> 00:16:30,770
script because he really had two

455
00:16:30,770 --> 00:16:32,240
different communities working on it the

456
00:16:32,240 --> 00:16:34,100
the stable guys working on the stable

457
00:16:34,100 --> 00:16:35,870
district and the tumbleweed guys

458
00:16:35,870 --> 00:16:37,130
packaging things slightly differently

459
00:16:37,130 --> 00:16:38,840
and you know targeting their audience

460
00:16:38,840 --> 00:16:42,970
slightly differently and looking at this

461
00:16:42,970 --> 00:16:46,370
the the openSUSE team at Sousa spent a

462
00:16:46,370 --> 00:16:49,490
really long time analyzing how to how to

463
00:16:49,490 --> 00:16:51,920
actually fix sort of both all of these

464
00:16:51,920 --> 00:16:53,420
problems properly I mean they started

465
00:16:53,420 --> 00:16:55,010
first looking at our dev branch and

466
00:16:55,010 --> 00:16:57,140
looking at how do we get that more

467
00:16:57,140 --> 00:16:59,780
stable I kind of started looking at it

468
00:16:59,780 --> 00:17:00,770
from the other side of okay how do we

469
00:17:00,770 --> 00:17:03,050
get tumbleweed more stable and we kind

470
00:17:03,050 --> 00:17:05,829
of ended a meeting in the middle and I

471
00:17:05,829 --> 00:17:08,510
found what I really think is a universal

472
00:17:08,510 --> 00:17:10,579
truth that when you're building a

473
00:17:10,579 --> 00:17:12,050
distribution with me know several

474
00:17:12,050 --> 00:17:15,349
thousand moving parts if you're gonna if

475
00:17:15,349 --> 00:17:17,780
you need to move if you'd be ready to

476
00:17:17,780 --> 00:17:19,339
move any part of that you know any

477
00:17:19,339 --> 00:17:21,740
package anywhere you've got to be

478
00:17:21,740 --> 00:17:22,959
prepared to move

479
00:17:22,959 --> 00:17:25,659
everything you've got to have the tools

480
00:17:25,659 --> 00:17:28,118
the techniques the processes that okay

481
00:17:28,118 --> 00:17:30,460
that new dependency from upstream is

482
00:17:30,460 --> 00:17:31,779
going to you know require you to yes

483
00:17:31,779 --> 00:17:33,789
change you in it system and your kernel

484
00:17:33,789 --> 00:17:36,220
and God knows what else and you have to

485
00:17:36,220 --> 00:17:37,929
be able to be prepared to do that at a

486
00:17:37,929 --> 00:17:40,389
moment's notice and if you're not if

487
00:17:40,389 --> 00:17:42,039
you're not able to do that you're not

488
00:17:42,039 --> 00:17:43,470
able to do a rolling release

489
00:17:43,470 --> 00:17:45,429
consistently you might be to start for a

490
00:17:45,429 --> 00:17:47,860
short period of time sooner or later you

491
00:17:47,860 --> 00:17:49,240
will hit a brick wall and stop and have

492
00:17:49,240 --> 00:17:52,240
real pain so to get this off properly

493
00:17:52,240 --> 00:17:54,070
you need to always be ready to change

494
00:17:54,070 --> 00:17:57,179
everything in a moment's notice

495
00:17:57,179 --> 00:18:00,999
thankfully in openSUSE we had two races

496
00:18:00,999 --> 00:18:04,080
of us leave the openSUSE built service

497
00:18:04,080 --> 00:18:06,190
which is what we've been using for years

498
00:18:06,190 --> 00:18:08,320
for building all of our distributions

499
00:18:08,320 --> 00:18:11,980
and it really has always embraced and

500
00:18:11,980 --> 00:18:15,309
tackled this idea of distribution is a

501
00:18:15,309 --> 00:18:17,320
cohesive product you know it we build

502
00:18:17,320 --> 00:18:19,929
all our packages there but the node

503
00:18:19,929 --> 00:18:21,159
service is aware of all those

504
00:18:21,159 --> 00:18:23,440
dependencies if it needs to start if it

505
00:18:23,440 --> 00:18:25,179
needs to rebuild a just rebuild part of

506
00:18:25,179 --> 00:18:26,950
those packages it does so it can be put

507
00:18:26,950 --> 00:18:28,119
part of the dependency tree its

508
00:18:28,119 --> 00:18:30,909
dependency aware it's what's openSUSE

509
00:18:30,909 --> 00:18:32,110
and Sue's that have been using for years

510
00:18:32,110 --> 00:18:33,850
for building our distributions it's also

511
00:18:33,850 --> 00:18:35,499
across distribution support which we

512
00:18:35,499 --> 00:18:36,940
know that kind of challenge of being

513
00:18:36,940 --> 00:18:38,289
able to build district for other distros

514
00:18:38,289 --> 00:18:40,600
as well really taught us a heck of a lot

515
00:18:40,600 --> 00:18:42,129
of how to handle dependency trees

516
00:18:42,129 --> 00:18:43,570
because you know debian does it way

517
00:18:43,570 --> 00:18:44,350
different from our beer

518
00:18:44,350 --> 00:18:46,960
rpm and you know notch and we even had

519
00:18:46,960 --> 00:18:48,940
one guy who passed in gen to support for

520
00:18:48,940 --> 00:18:50,080
the build service which was just

521
00:18:50,080 --> 00:18:55,840
pointless but beautiful yeah it's used

522
00:18:55,840 --> 00:18:58,059
by not used by us you know uncle our

523
00:18:58,059 --> 00:19:00,220
clinic foundation use it for Tizen PLC

524
00:19:00,220 --> 00:19:03,789
plenty of other people use it too so we

525
00:19:03,789 --> 00:19:06,100
had the tools for building and you know

526
00:19:06,100 --> 00:19:07,480
really kind of helped with that rolling

527
00:19:07,480 --> 00:19:09,639
stuff already but you've got a tester

528
00:19:09,639 --> 00:19:13,059
thing as well and yeah my other job when

529
00:19:13,059 --> 00:19:14,440
I'm not doing openSUSE stuff is working

530
00:19:14,440 --> 00:19:20,830
in QA and open QA is really nice testing

531
00:19:20,830 --> 00:19:22,090
tool for this and we have a boost

532
00:19:22,090 --> 00:19:24,610
downstairs this weekend

533
00:19:24,610 --> 00:19:26,600
unlike every other testing tool I've

534
00:19:26,600 --> 00:19:29,540
ever found this tests from a user's

535
00:19:29,540 --> 00:19:31,550
perspective you know we're not

536
00:19:31,550 --> 00:19:33,320
necessarily caring about the code it's

537
00:19:33,320 --> 00:19:35,540
api newt we'd have to teach it what the

538
00:19:35,540 --> 00:19:39,080
api needs to do you tell open QA what is

539
00:19:39,080 --> 00:19:40,580
the use of expected to do with this

540
00:19:40,580 --> 00:19:42,890
software what commands are they going to

541
00:19:42,890 --> 00:19:44,690
type what buttons are they going to

542
00:19:44,690 --> 00:19:47,000
click because open QA is also

543
00:19:47,000 --> 00:19:48,440
graphically aware so we can actually

544
00:19:48,440 --> 00:19:50,210
look at the screen we have OpenCV

545
00:19:50,210 --> 00:19:51,950
running on there it can even actually do

546
00:19:51,950 --> 00:19:53,600
screenshot analysis or partial

547
00:19:53,600 --> 00:19:55,070
screenshot analysis so is this UI

548
00:19:55,070 --> 00:19:58,460
element on the screen whatever or where

549
00:19:58,460 --> 00:20:02,060
it needs to be and yeah therefore you

550
00:20:02,060 --> 00:20:03,020
can test the entire distribution

551
00:20:03,020 --> 00:20:05,090
end-to-end from the way the users are

552
00:20:05,090 --> 00:20:07,580
going to use the damn thing without this

553
00:20:07,580 --> 00:20:09,680
we couldn't do tumbleweed the way we're

554
00:20:09,680 --> 00:20:12,410
doing today and in fact it's maybe it

555
00:20:12,410 --> 00:20:14,630
doc it's adoption in a serious sense

556
00:20:14,630 --> 00:20:16,940
really began with tumbleweed and since

557
00:20:16,940 --> 00:20:18,980
then we've now started actually using it

558
00:20:18,980 --> 00:20:20,960
for the more stable distribution of

559
00:20:20,960 --> 00:20:23,750
openSUSE leap and for the enterprise

560
00:20:23,750 --> 00:20:26,240
products at Sousa which are all testing

561
00:20:26,240 --> 00:20:29,150
using the same framework in terms of

562
00:20:29,150 --> 00:20:31,160
what it can test is pretty much anything

563
00:20:31,160 --> 00:20:33,070
you have the nice dashboard with

564
00:20:33,070 --> 00:20:35,270
hundreds of hundreds of scenarios I mean

565
00:20:35,270 --> 00:20:38,660
I got to a tui here on one example and

566
00:20:38,660 --> 00:20:40,880
in fact it's a really bad screenshot

567
00:20:40,880 --> 00:20:42,380
because I've missed out for other

568
00:20:42,380 --> 00:20:43,520
columns but it's also got support

569
00:20:43,520 --> 00:20:44,660
multiple architectures

570
00:20:44,660 --> 00:20:46,550
so here we're testing Intel but we can

571
00:20:46,550 --> 00:20:51,320
also test arm every 90 power 32-bit

572
00:20:51,320 --> 00:20:54,410
Intel if you interested mostly based on

573
00:20:54,410 --> 00:20:56,060
mostly based on VM so that we have

574
00:20:56,060 --> 00:20:57,620
support now for testing on bare metal as

575
00:20:57,620 --> 00:21:00,230
well so what it normally does we're to

576
00:21:00,230 --> 00:21:02,570
start up with the distribution fire it

577
00:21:02,570 --> 00:21:05,300
up in a VM start testing it the way

578
00:21:05,300 --> 00:21:07,090
users gonna do it start the installation

579
00:21:07,090 --> 00:21:10,400
won't do the install installs finish to

580
00:21:10,400 --> 00:21:12,770
startup the applications if you want to

581
00:21:12,770 --> 00:21:14,150
feed it a disk image already of an

582
00:21:14,150 --> 00:21:15,710
existing installation then you can do

583
00:21:15,710 --> 00:21:17,300
nice fancy stuff like doing upgrade

584
00:21:17,300 --> 00:21:19,490
testing and migrations and all that kind

585
00:21:19,490 --> 00:21:21,530
of stuff has support for multiple

586
00:21:21,530 --> 00:21:23,450
machines so you can do like cluster

587
00:21:23,450 --> 00:21:25,040
tests and other weird and wonderful

588
00:21:25,040 --> 00:21:28,040
stuff with that said it's graphically

589
00:21:28,040 --> 00:21:30,800
aware so when something goes horribly

590
00:21:30,800 --> 00:21:34,460
wrong you can actually see okay my I was

591
00:21:34,460 --> 00:21:36,800
expecting a tumbleweed you know a nice

592
00:21:36,800 --> 00:21:37,920
dark blue screen on the

593
00:21:37,920 --> 00:21:40,650
there but in fact the system running you

594
00:21:40,650 --> 00:21:42,210
know came up with the wrong graphic so

595
00:21:42,210 --> 00:21:44,430
even those tiny little behavioral

596
00:21:44,430 --> 00:21:46,080
changes which you know they're not bugs

597
00:21:46,080 --> 00:21:47,460
it's just something that's changed

598
00:21:47,460 --> 00:21:51,180
upstream get caught by open QA if

599
00:21:51,180 --> 00:21:52,440
everything else have stayed the same way

600
00:21:52,440 --> 00:21:54,750
if the UI is still working in the same

601
00:21:54,750 --> 00:21:56,790
way open tryouts heck no it's fine but

602
00:21:56,790 --> 00:21:58,500
if you know something's practically

603
00:21:58,500 --> 00:22:00,660
changed the buttons move the commands

604
00:22:00,660 --> 00:22:02,700
changed its function open QA will always

605
00:22:02,700 --> 00:22:07,080
find it so with those tools we've

606
00:22:07,080 --> 00:22:10,440
developed this process for effectively

607
00:22:10,440 --> 00:22:12,600
continuous integration for an entire

608
00:22:12,600 --> 00:22:15,690
distribution when you're submitting

609
00:22:15,690 --> 00:22:18,750
something to openSUSE tumbleweed you're

610
00:22:18,750 --> 00:22:20,250
submitting it to an OBS project called

611
00:22:20,250 --> 00:22:23,400
factory that then goes into an automatic

612
00:22:23,400 --> 00:22:25,530
review queue the usual kind of RPM lint

613
00:22:25,530 --> 00:22:27,720
stuff of you know checking basic sanity

614
00:22:27,720 --> 00:22:29,880
checks and unit testing like that kind

615
00:22:29,880 --> 00:22:32,790
of stuff nothing too fancy but any

616
00:22:32,790 --> 00:22:35,160
package that has a potential system-wide

617
00:22:35,160 --> 00:22:36,720
braking impact which is pretty much of

618
00:22:36,720 --> 00:22:38,790
your package we have a process called

619
00:22:38,790 --> 00:22:42,660
staging we're open QA wall let's say OBS

620
00:22:42,660 --> 00:22:48,660
will spin up a variant of factory buried

621
00:22:48,660 --> 00:22:52,140
a tumbleweed with everything that was

622
00:22:52,140 --> 00:22:54,960
working in the last release plus these

623
00:22:54,960 --> 00:22:56,760
changes and nothing else so basically a

624
00:22:56,760 --> 00:22:58,590
what-if distribution what if we merge

625
00:22:58,590 --> 00:23:01,170
this and we run a bunch of sanity tests

626
00:23:01,170 --> 00:23:03,420
in open QA to actual proper smoke test

627
00:23:03,420 --> 00:23:04,950
booting this thing up and installing it

628
00:23:04,950 --> 00:23:06,780
to make sure the distribution still

629
00:23:06,780 --> 00:23:09,330
works and that takes about 20 minutes

630
00:23:09,330 --> 00:23:11,100
it's not not a not a long complicated

631
00:23:11,100 --> 00:23:13,740
process so something gets checked in but

632
00:23:13,740 --> 00:23:15,450
this is before any human being has

633
00:23:15,450 --> 00:23:17,220
really actually looked at the code no

634
00:23:17,220 --> 00:23:18,780
one's actually reviewed anything here no

635
00:23:18,780 --> 00:23:20,220
one's seen it just does it does it work

636
00:23:20,220 --> 00:23:22,530
is it really worth looking at if it

637
00:23:22,530 --> 00:23:24,780
doesn't it gets rejected dev has to go

638
00:23:24,780 --> 00:23:27,420
away and start again if it passes though

639
00:23:27,420 --> 00:23:30,410
nope then it ends up in the review queue

640
00:23:30,410 --> 00:23:32,910
then you know your usual kind of code

641
00:23:32,910 --> 00:23:34,740
reviews spec for all of you checking

642
00:23:34,740 --> 00:23:36,330
everything works

643
00:23:36,330 --> 00:23:39,630
then it ends up in in factory where all

644
00:23:39,630 --> 00:23:41,250
of this stuff is then put in a single

645
00:23:41,250 --> 00:23:43,320
repository if we have lots of check-ins

646
00:23:43,320 --> 00:23:44,580
at the same time you end up with you

647
00:23:44,580 --> 00:23:47,159
know a big pile of changes and then we

648
00:23:47,159 --> 00:23:48,990
test the entire distribution end-to-end

649
00:23:48,990 --> 00:23:51,929
in a few hundred different combinations

650
00:23:51,929 --> 00:23:53,519
on every architecture that were

651
00:23:53,519 --> 00:23:56,970
interested in that takes about where

652
00:23:56,970 --> 00:23:58,350
depending on the hardware six to seven

653
00:23:58,350 --> 00:24:00,210
hours now and you know we've got more

654
00:24:00,210 --> 00:24:01,289
hardware maybe shorter

655
00:24:01,289 --> 00:24:02,940
it's all very highly powered

656
00:24:02,940 --> 00:24:05,549
parallelized and that will then do all

657
00:24:05,549 --> 00:24:09,690
those tests the QA is therefore totally

658
00:24:09,690 --> 00:24:12,630
automatic we actually tell open QA what

659
00:24:12,630 --> 00:24:14,970
the last acceptable failures were you

660
00:24:14,970 --> 00:24:16,230
know nothing's perfect so there are

661
00:24:16,230 --> 00:24:17,549
sometimes acceptable failures in there

662
00:24:17,549 --> 00:24:21,419
and if that new build doesn't have any

663
00:24:21,419 --> 00:24:23,940
new failures it ships it becomes

664
00:24:23,940 --> 00:24:25,980
tumbleweed 4:00 in the morning whenever

665
00:24:25,980 --> 00:24:28,110
it doesn't matter so that whole process

666
00:24:28,110 --> 00:24:29,700
is completely pipelined and

667
00:24:29,700 --> 00:24:33,570
automatically done so writing these

668
00:24:33,570 --> 00:24:36,510
automated tests for open QA totally gate

669
00:24:36,510 --> 00:24:38,490
the quality of our distributions so it's

670
00:24:38,490 --> 00:24:39,960
great good if a user's reports a bug now

671
00:24:39,960 --> 00:24:42,990
saying so-and-so broke and I was doing

672
00:24:42,990 --> 00:24:46,889
this well just take that translate it to

673
00:24:46,889 --> 00:24:49,080
the open QA descriptive language you've

674
00:24:49,080 --> 00:24:52,080
never going to break that again so every

675
00:24:52,080 --> 00:24:53,730
bug report becomes a nice easy test case

676
00:24:53,730 --> 00:24:55,230
in theory and you can shield yourself

677
00:24:55,230 --> 00:24:57,799
from ever making the same mistake twice

678
00:24:57,799 --> 00:25:00,510
at relatively light cost because you're

679
00:25:00,510 --> 00:25:02,159
already booting up the VM so it doesn't

680
00:25:02,159 --> 00:25:04,019
really take that long to pop in do what

681
00:25:04,019 --> 00:25:06,840
the users doing and so functionality

682
00:25:06,840 --> 00:25:08,429
checks all that kind of stuff totally

683
00:25:08,429 --> 00:25:10,760
able to be shielded with this

684
00:25:10,760 --> 00:25:13,160
but that also means if you know you do

685
00:25:13,160 --> 00:25:14,809
listen to my talk now and you know do

686
00:25:14,809 --> 00:25:15,860
download tumbleweed and find something

687
00:25:15,860 --> 00:25:18,230
you don't like contributing to open QA

688
00:25:18,230 --> 00:25:19,720
is the easiest way of fixing them

689
00:25:19,720 --> 00:25:21,980
because as soon as you put a test in to

690
00:25:21,980 --> 00:25:25,610
open QA it's never gonna happen again so

691
00:25:25,610 --> 00:25:27,740
the main website for open QA is open da

692
00:25:27,740 --> 00:25:30,320
key way documentation is there and we

693
00:25:30,320 --> 00:25:31,429
have a nice little bug tracker feature

694
00:25:31,429 --> 00:25:34,250
tracker for that and if you want to know

695
00:25:34,250 --> 00:25:35,780
more about the whole sort of pipelining

696
00:25:35,780 --> 00:25:38,480
and using OBS and open QA for continuous

697
00:25:38,480 --> 00:25:41,690
integration at 1:30 today which of

698
00:25:41,690 --> 00:25:42,799
course clashes with my other talking

699
00:25:42,799 --> 00:25:44,600
Janson but you know you can pick which

700
00:25:44,600 --> 00:25:47,299
one you like more my colleague my

701
00:25:47,299 --> 00:25:48,620
colleague Christians talking in here

702
00:25:48,620 --> 00:25:50,870
about how how you can use this approach

703
00:25:50,870 --> 00:25:52,850
in your project so not necessarily on a

704
00:25:52,850 --> 00:25:54,530
if you want to on a full distro level

705
00:25:54,530 --> 00:25:57,440
but even on just a smaller upstream

706
00:25:57,440 --> 00:25:59,660
project kind of thing you can use these

707
00:25:59,660 --> 00:26:01,970
tools to you know build your package in

708
00:26:01,970 --> 00:26:04,820
OBS test it in open QA for followed the

709
00:26:04,820 --> 00:26:08,210
same kind of pipeline talk to people

710
00:26:08,210 --> 00:26:10,100
about this though they say oh that's

711
00:26:10,100 --> 00:26:11,540
really fancy but I don't want to wait

712
00:26:11,540 --> 00:26:15,980
for all that testing you know I just

713
00:26:15,980 --> 00:26:18,140
want it now it's too long you know and

714
00:26:18,140 --> 00:26:20,179
in fact there is one guy working a Sousa

715
00:26:20,179 --> 00:26:22,730
who does like rebuild all a factory just

716
00:26:22,730 --> 00:26:26,900
so we can avoid open QA he is crazy but

717
00:26:26,900 --> 00:26:31,850
he does do it in reality though let's

718
00:26:31,850 --> 00:26:33,200
say working with upstream projects you

719
00:26:33,200 --> 00:26:34,520
know especially these really demanding

720
00:26:34,520 --> 00:26:37,760
ones like gnome and KDE the process

721
00:26:37,760 --> 00:26:41,179
keeps pace with them releases their tar

722
00:26:41,179 --> 00:26:42,919
balls and within 48 hours

723
00:26:42,919 --> 00:26:47,020
upstream gnome is in openSUSE tumbleweed

724
00:26:47,020 --> 00:26:49,190
faster than gentle even I mean most

725
00:26:49,190 --> 00:26:51,350
people get it compiled that quickly so

726
00:26:51,350 --> 00:26:54,860
yeah it the process works even with

727
00:26:54,860 --> 00:26:56,570
these big upstream projects with

728
00:26:56,570 --> 00:26:58,190
thousands with hundreds of moving parts

729
00:26:58,190 --> 00:27:01,220
in the case of KDE plasma 49 which came

730
00:27:01,220 --> 00:27:02,809
out last week we actually shipped it on

731
00:27:02,809 --> 00:27:04,850
the same day that sounds really

732
00:27:04,850 --> 00:27:06,919
impressive in reality KDE kind of cheap

733
00:27:06,919 --> 00:27:08,330
because they give the tar balls out five

734
00:27:08,330 --> 00:27:13,309
days before yeah we shipped on release

735
00:27:13,309 --> 00:27:15,919
day it's kind of cool and we've we've

736
00:27:15,919 --> 00:27:17,510
sort of taken that process and of course

737
00:27:17,510 --> 00:27:19,130
we've got the build service so we can do

738
00:27:19,130 --> 00:27:20,960
all this fancy stuff and we actually

739
00:27:20,960 --> 00:27:22,700
have derivatives of tumbleweed

740
00:27:22,700 --> 00:27:23,550
you know the

741
00:27:23,550 --> 00:27:25,590
make that constant what if all the damn

742
00:27:25,590 --> 00:27:28,470
time because of OBS get aware so we can

743
00:27:28,470 --> 00:27:31,560
actually attach it to known git projects

744
00:27:31,560 --> 00:27:34,770
or KDE get and then build that they know

745
00:27:34,770 --> 00:27:37,590
next or openSUSE Krypton which are

746
00:27:37,590 --> 00:27:39,060
constantly building those packages as

747
00:27:39,060 --> 00:27:40,520
soon as something gets checked in and

748
00:27:40,520 --> 00:27:42,540
constantly testing those packages as

749
00:27:42,540 --> 00:27:43,800
soon as something gets checked in and

750
00:27:43,800 --> 00:27:45,330
then testing the entire distribution so

751
00:27:45,330 --> 00:27:47,340
we get to file all these upstream bugs

752
00:27:47,340 --> 00:27:48,900
before anyone else does because we're

753
00:27:48,900 --> 00:27:50,850
seeing it in the context of an actual

754
00:27:50,850 --> 00:27:56,790
distribution all of the damn time we

755
00:27:56,790 --> 00:28:00,150
decide every week now our tumbleweed

756
00:28:00,150 --> 00:28:01,680
release manager Dominic writes of

757
00:28:01,680 --> 00:28:03,960
reporters you know what what's changed

758
00:28:03,960 --> 00:28:06,060
this week so the the bots that do all

759
00:28:06,060 --> 00:28:08,400
the magic of the pipelining

760
00:28:08,400 --> 00:28:10,140
automatically pump out release reports

761
00:28:10,140 --> 00:28:11,220
and change logs of everything that

762
00:28:11,220 --> 00:28:13,470
changed but that's just ridiculously

763
00:28:13,470 --> 00:28:15,180
long so you know he tries to summarize

764
00:28:15,180 --> 00:28:17,460
it to something humans can do and he

765
00:28:17,460 --> 00:28:18,600
made the mistake last year of saying

766
00:28:18,600 --> 00:28:21,740
it's been a really quiet week this week

767
00:28:21,740 --> 00:28:25,800
figured out what does quiet mean this

768
00:28:25,800 --> 00:28:28,230
was last year we did three snapshots

769
00:28:28,230 --> 00:28:30,270
snapshots are basically tumbleweed

770
00:28:30,270 --> 00:28:32,340
releases so that whole pipelining and to

771
00:28:32,340 --> 00:28:35,460
end a new build three times so three new

772
00:28:35,460 --> 00:28:36,840
certify those three new repository

773
00:28:36,840 --> 00:28:39,690
versions all in there those versions

774
00:28:39,690 --> 00:28:43,050
altogether contain 146 updates we're

775
00:28:43,050 --> 00:28:44,940
still shipping DVDs or ISOs at least so

776
00:28:44,940 --> 00:28:46,410
you know bit of shuffling around of

777
00:28:46,410 --> 00:28:48,240
packages 50 new packages on there

778
00:28:48,240 --> 00:28:50,130
thirty-eight packages out to make room

779
00:28:50,130 --> 00:28:50,610
for it

780
00:28:50,610 --> 00:28:53,550
and one new tunnel he that's that's

781
00:28:53,550 --> 00:28:56,030
quiet

782
00:28:56,740 --> 00:29:02,470
that was a year ago six months ago this

783
00:29:02,470 --> 00:29:05,410
was it five snapshots every single

784
00:29:05,410 --> 00:29:07,650
workday we shipped another snapshot

785
00:29:07,650 --> 00:29:10,660
twice as many packages twice as many

786
00:29:10,660 --> 00:29:12,280
packages on the DVD twice as many wait

787
00:29:12,280 --> 00:29:14,010
to take out and twice as many kernels

788
00:29:14,010 --> 00:29:16,750
it's now six months later the last the

789
00:29:16,750 --> 00:29:18,790
last decent run drew we had we had one

790
00:29:18,790 --> 00:29:21,010
one one do fifteen days of non-stop

791
00:29:21,010 --> 00:29:24,250
tumbleweed releases you know every day a

792
00:29:24,250 --> 00:29:25,360
new snapshot

793
00:29:25,360 --> 00:29:27,460
I didn't bother doing a slide for that

794
00:29:27,460 --> 00:29:28,720
because I can't be bothered to read that

795
00:29:28,720 --> 00:29:31,330
many logs I mean it's just crazy the

796
00:29:31,330 --> 00:29:33,130
process really really works and you can

797
00:29:33,130 --> 00:29:35,500
do a rolling distribution across the

798
00:29:35,500 --> 00:29:38,740
entire code base without any problems

799
00:29:38,740 --> 00:29:42,130
it just works from the user side of

800
00:29:42,130 --> 00:29:43,540
things though that can then be

801
00:29:43,540 --> 00:29:45,220
terrifying because I like okay all this

802
00:29:45,220 --> 00:29:48,130
stuff is changing how did they deal with

803
00:29:48,130 --> 00:29:49,990
that and okay open QA is testing it for

804
00:29:49,990 --> 00:29:51,429
a practical point of view you know it

805
00:29:51,429 --> 00:29:54,670
works but it's still changing I mean you

806
00:29:54,670 --> 00:29:55,840
know the behavior is still going to

807
00:29:55,840 --> 00:29:59,830
change luckily with openSUSE we've got

808
00:29:59,830 --> 00:30:02,790
secret source we use btrfs by default

809
00:30:02,790 --> 00:30:06,280
and we have it by default with a tool

810
00:30:06,280 --> 00:30:10,210
called snapper setup so by on a standard

811
00:30:10,210 --> 00:30:11,650
tumbleweed machine you know of course

812
00:30:11,650 --> 00:30:13,000
you can disable it use whatever file

813
00:30:13,000 --> 00:30:15,910
system you want but in our normal

814
00:30:15,910 --> 00:30:18,280
configuration every single time you

815
00:30:18,280 --> 00:30:20,020
install a package on a tumbleweed

816
00:30:20,020 --> 00:30:22,630
machine you have a snapshot before and

817
00:30:22,630 --> 00:30:26,590
after so if that package changes

818
00:30:26,590 --> 00:30:28,900
something you don't like just go back to

819
00:30:28,900 --> 00:30:31,000
the snapshot before keep on working you

820
00:30:31,000 --> 00:30:32,500
know go back and learn it how it works

821
00:30:32,500 --> 00:30:33,960
you know whenever you have some time

822
00:30:33,960 --> 00:30:36,520
you're completely immunized from those

823
00:30:36,520 --> 00:30:38,860
from those behavioral changes you also

824
00:30:38,860 --> 00:30:40,420
completely immunize from us screwing up

825
00:30:40,420 --> 00:30:42,070
your package accidentally - you know you

826
00:30:42,070 --> 00:30:43,270
can always go back to how it works yes

827
00:30:43,270 --> 00:30:46,000
today and even if we completely balls

828
00:30:46,000 --> 00:30:47,890
everything up and open QA completely

829
00:30:47,890 --> 00:30:49,300
screws up and your machine doesn't boot

830
00:30:49,300 --> 00:30:51,100
anymore you can still boot to that

831
00:30:51,100 --> 00:30:55,929
snapshot from grub so there's no risk as

832
00:30:55,929 --> 00:30:59,590
long as you're using btrfs and there's

833
00:30:59,590 --> 00:31:01,300
very little risk of us with that because

834
00:31:01,300 --> 00:31:02,860
we're using it so much it just doesn't

835
00:31:02,860 --> 00:31:05,559
break on our systems so often we'll be

836
00:31:05,559 --> 00:31:08,220
talking about this more this afternoon

837
00:31:08,220 --> 00:31:10,330
actually more talking about sort of the

838
00:31:10,330 --> 00:31:13,269
next generation of this idea of not just

839
00:31:13,269 --> 00:31:16,480
using snapshots as a safety net but

840
00:31:16,480 --> 00:31:18,340
actually you know more than atomic what

841
00:31:18,340 --> 00:31:20,529
you're delivering updates so actually

842
00:31:20,529 --> 00:31:22,870
doing transaction web data so this

843
00:31:22,870 --> 00:31:26,260
concept plus plus but still using rpms

844
00:31:26,260 --> 00:31:31,210
so that's tumbleweed what about the diff

845
00:31:31,210 --> 00:31:31,600
tranche

846
00:31:31,600 --> 00:31:33,159
what about openSUSE factory you know

847
00:31:33,159 --> 00:31:35,380
i've mentioned it's got a put apart in

848
00:31:35,380 --> 00:31:38,950
the process but in reality once we

849
00:31:38,950 --> 00:31:40,360
started doing this in delivering

850
00:31:40,360 --> 00:31:43,179
tumbleweed to users we realized we don't

851
00:31:43,179 --> 00:31:44,730
need a dev branch anymore

852
00:31:44,730 --> 00:31:47,679
factory no longer can be used by a human

853
00:31:47,679 --> 00:31:48,070
being

854
00:31:48,070 --> 00:31:51,010
it exists in OBS tucked away and we

855
00:31:51,010 --> 00:31:53,320
never publish it we don't have a

856
00:31:53,320 --> 00:31:55,600
traditional def ranch anymore it might

857
00:31:55,600 --> 00:31:58,269
be broken open QA hotel as if it is we

858
00:31:58,269 --> 00:31:59,860
won't make it tumbleweed if it worked

859
00:31:59,860 --> 00:32:03,970
its tumbleweed so the the old greg

860
00:32:03,970 --> 00:32:06,970
tumbleweed we basically took the name

861
00:32:06,970 --> 00:32:09,730
the old factory we put added testing and

862
00:32:09,730 --> 00:32:11,470
then we call this a new time per week so

863
00:32:11,470 --> 00:32:13,710
it's a bit of a new distribution rule

864
00:32:13,710 --> 00:32:16,690
and yeah no more no more def branches

865
00:32:16,690 --> 00:32:19,210
we're rolling on for that and it serves

866
00:32:19,210 --> 00:32:21,070
that same purpose while also serving all

867
00:32:21,070 --> 00:32:22,600
those other purposes of rolling release

868
00:32:22,600 --> 00:32:24,580
does of you know hitting a bigger user

869
00:32:24,580 --> 00:32:26,980
base being more useful dealing with

870
00:32:26,980 --> 00:32:32,080
upstream projects etc I mean you know

871
00:32:32,080 --> 00:32:33,940
that's still a use case for that maybe

872
00:32:33,940 --> 00:32:36,279
not for the typical FOSDEM audience but

873
00:32:36,279 --> 00:32:37,809
you know other people you know don't

874
00:32:37,809 --> 00:32:39,070
want to necessarily have everything

875
00:32:39,070 --> 00:32:40,409
changing all the time

876
00:32:40,409 --> 00:32:42,940
well in openSUSE we kind of killed that

877
00:32:42,940 --> 00:32:47,669
idea off as well partly because of

878
00:32:47,669 --> 00:32:50,710
declining interest in the concept but

879
00:32:50,710 --> 00:32:52,240
also because of an alternative concept

880
00:32:52,240 --> 00:32:55,659
it's way more interesting we now have a

881
00:32:55,659 --> 00:32:59,320
distribution called leap which starts

882
00:32:59,320 --> 00:33:00,970
with the susan Lilith's enterprise code

883
00:33:00,970 --> 00:33:04,899
base which is now totally in OBS so we

884
00:33:04,899 --> 00:33:07,059
build that you know kind of like CentOS

885
00:33:07,059 --> 00:33:10,210
I guess but we don't limit it to be a

886
00:33:10,210 --> 00:33:12,789
one-to-one match the community then

887
00:33:12,789 --> 00:33:14,139
contributes to that code base as well

888
00:33:14,139 --> 00:33:15,970
and adds whatever not packages they want

889
00:33:15,970 --> 00:33:17,679
in addition to so you end up with a

890
00:33:17,679 --> 00:33:20,409
full-blown community distribution all

891
00:33:20,409 --> 00:33:22,910
fully tested all fully integrated

892
00:33:22,910 --> 00:33:25,760
but with that nice enterprise codebase

893
00:33:25,760 --> 00:33:27,710
underneath it so it's rock rock rock

894
00:33:27,710 --> 00:33:29,660
solid and stable and much more

895
00:33:29,660 --> 00:33:32,360
conservative with its pace of change so

896
00:33:32,360 --> 00:33:34,070
in the past you know everybody knew us

897
00:33:34,070 --> 00:33:36,200
as openSUSE the one distribution this

898
00:33:36,200 --> 00:33:40,070
project we now have to tumbleweed

899
00:33:40,070 --> 00:33:43,130
rolling ahead continuously updated

900
00:33:43,130 --> 00:33:44,870
continually tested like you think

901
00:33:44,870 --> 00:33:46,460
perfect for the first time audience and

902
00:33:46,460 --> 00:33:48,650
then leave with the shared crawl

903
00:33:48,650 --> 00:33:52,030
underneath it sharing it with sleep and

904
00:33:52,030 --> 00:33:55,160
you know much more conservative users

905
00:33:55,160 --> 00:33:56,420
say anybody who doesn't like things

906
00:33:56,420 --> 00:33:57,830
changing often you know who wants to

907
00:33:57,830 --> 00:34:00,650
update once a year you know perfect for

908
00:34:00,650 --> 00:34:03,110
them sis admins your your little server

909
00:34:03,110 --> 00:34:04,340
in the corner that you don't want to

910
00:34:04,340 --> 00:34:06,890
touch that often for patching I mean you

911
00:34:06,890 --> 00:34:08,210
can run a rolling release on the server

912
00:34:08,210 --> 00:34:10,280
nothing's wrong with that but you know

913
00:34:10,280 --> 00:34:11,449
you're gonna have to find some nice way

914
00:34:11,449 --> 00:34:13,429
of automating those updates you don't

915
00:34:13,429 --> 00:34:17,330
have to worry about that with leap like

916
00:34:17,330 --> 00:34:20,149
I said it's kind of a combination of the

917
00:34:20,149 --> 00:34:21,649
openSUSE project and the suzer

918
00:34:21,649 --> 00:34:26,120
enterprise side of things and this is

919
00:34:26,120 --> 00:34:28,668
roughly kind of I guess he split it half

920
00:34:28,668 --> 00:34:31,190
way roughly how the whole thing looks so

921
00:34:31,190 --> 00:34:33,110
you know there is a shared core of a

922
00:34:33,110 --> 00:34:34,940
nice stable base system which is also

923
00:34:34,940 --> 00:34:36,489
what the enterprise site is using

924
00:34:36,489 --> 00:34:39,080
there's a small amount of enterprise

925
00:34:39,080 --> 00:34:41,540
packages which just don't make any sense

926
00:34:41,540 --> 00:34:43,760
in a community sense or you know covered

927
00:34:43,760 --> 00:34:45,830
by licenses we don't want to ship or you

928
00:34:45,830 --> 00:34:47,810
know whatever just you know doesn't make

929
00:34:47,810 --> 00:34:52,239
sense there and then openSUSE has

930
00:34:52,239 --> 00:34:54,320
thousands of community packages sitting

931
00:34:54,320 --> 00:34:56,960
on top of that shared base and most of

932
00:34:56,960 --> 00:34:58,400
those community packages if not all of

933
00:34:58,400 --> 00:35:00,380
them actually originate in some form

934
00:35:00,380 --> 00:35:03,470
another from tumbleweed where you know

935
00:35:03,470 --> 00:35:05,510
it's a pure community distribution all

936
00:35:05,510 --> 00:35:07,010
those packages always moving always

937
00:35:07,010 --> 00:35:09,550
rolling on

938
00:35:09,960 --> 00:35:12,160
the interesting question I get normally

939
00:35:12,160 --> 00:35:14,650
get asked at this point is well what

940
00:35:14,650 --> 00:35:17,200
about sleep cuz you know everyone knows

941
00:35:17,200 --> 00:35:18,550
this model it's like you know for

942
00:35:18,550 --> 00:35:20,170
doorways right now you know you do a

943
00:35:20,170 --> 00:35:21,610
fedora release and then there's a Red

944
00:35:21,610 --> 00:35:22,930
Hat Enterprise release based on it

945
00:35:22,930 --> 00:35:25,780
sometime after you're not doing an open

946
00:35:25,780 --> 00:35:28,150
SUSE release anymore you can't really

947
00:35:28,150 --> 00:35:30,640
basely on something based on Slee that

948
00:35:30,640 --> 00:35:33,250
all gets a little bit circular you know

949
00:35:33,250 --> 00:35:35,080
what is Susie gonna do for their next

950
00:35:35,080 --> 00:35:37,740
release of the enterprise product well

951
00:35:37,740 --> 00:35:41,350
they're gonna base it on tumbleweed not

952
00:35:41,350 --> 00:35:42,310
in the sense of they're gonna do a

953
00:35:42,310 --> 00:35:45,490
rolling release but the tumbleweed based

954
00:35:45,490 --> 00:35:47,230
system that's constantly rolling is

955
00:35:47,230 --> 00:35:49,480
stable enough and usable enough that

956
00:35:49,480 --> 00:35:53,020
Susan Linux will be basing sleep 3/13 on

957
00:35:53,020 --> 00:35:55,420
tumbleweed forking from it at some point

958
00:35:55,420 --> 00:35:57,240
for their next release to sleep I think

959
00:35:57,240 --> 00:36:00,400
so not only does the process work for

960
00:36:00,400 --> 00:36:02,020
you know other guys the first time even

961
00:36:02,020 --> 00:36:03,400
enterprises are looking at this and like

962
00:36:03,400 --> 00:36:05,140
ok that's that's the best way of us

963
00:36:05,140 --> 00:36:07,570
developing our next major releases we

964
00:36:07,570 --> 00:36:09,370
don't need this old model of a regular

965
00:36:09,370 --> 00:36:11,200
release in between and all those hassles

966
00:36:11,200 --> 00:36:12,670
with the come with that all the work

967
00:36:12,670 --> 00:36:16,180
that comes with that and when you then

968
00:36:16,180 --> 00:36:18,660
also tie it with the leap side of things

969
00:36:18,660 --> 00:36:21,520
where leap of course is based on the

970
00:36:21,520 --> 00:36:24,220
enterprise service packs and that stuff

971
00:36:24,220 --> 00:36:27,340
as well but with Mickey stuff on top you

972
00:36:27,340 --> 00:36:29,110
end up with this weird nice complicated

973
00:36:29,110 --> 00:36:32,740
sort of infinity loop of openSUSE is

974
00:36:32,740 --> 00:36:34,390
simultaneously downstream and upstream

975
00:36:34,390 --> 00:36:38,320
of Slee and you know something that the

976
00:36:38,320 --> 00:36:40,690
community does in the last leap version

977
00:36:40,690 --> 00:36:43,330
is a candidate for the next service pack

978
00:36:43,330 --> 00:36:45,520
and you know it makes things actually

979
00:36:45,520 --> 00:36:47,530
way more interesting with that whole

980
00:36:47,530 --> 00:36:49,300
working with a corporate partner side of

981
00:36:49,300 --> 00:36:51,430
things because they have a lot more

982
00:36:51,430 --> 00:36:53,830
options on the table and you know less

983
00:36:53,830 --> 00:36:55,090
things get less stagnant which also

984
00:36:55,090 --> 00:36:56,170
means you end up with more enterprise

985
00:36:56,170 --> 00:36:57,430
developers working on your code base

986
00:36:57,430 --> 00:36:59,170
which is you know good for polishing

987
00:36:59,170 --> 00:37:02,100
everything working nice

988
00:37:02,390 --> 00:37:06,930
so in with you if you're developer and

989
00:37:06,930 --> 00:37:08,280
you want to deal with you know if you're

990
00:37:08,280 --> 00:37:10,040
dealing with any upstream project

991
00:37:10,040 --> 00:37:12,840
tumbleweed is a perfect option for you

992
00:37:12,840 --> 00:37:14,610
it's gonna keep up with those upstream

993
00:37:14,610 --> 00:37:16,320
projects more perfume projects and

994
00:37:16,320 --> 00:37:17,580
you're interested in you're gonna get

995
00:37:17,580 --> 00:37:19,920
the latest and greatest of everything it

996
00:37:19,920 --> 00:37:21,750
just works and if it doesn't work

997
00:37:21,750 --> 00:37:23,910
exactly the way you want it to it's

998
00:37:23,910 --> 00:37:25,500
really easy to contribute to you know

999
00:37:25,500 --> 00:37:27,120
we've got OBS and we've got open QA so

1000
00:37:27,120 --> 00:37:28,500
you can make sure we don't break it the

1001
00:37:28,500 --> 00:37:31,170
same way so yeah and of course you got

1002
00:37:31,170 --> 00:37:32,520
snapper so you can just get back on with

1003
00:37:32,520 --> 00:37:33,720
your work in the meantime when you

1004
00:37:33,720 --> 00:37:35,420
haven't got the time to do with that so

1005
00:37:35,420 --> 00:37:37,860
it's a perfect platform to work on and

1006
00:37:37,860 --> 00:37:41,100
work with us on especially if you're an

1007
00:37:41,100 --> 00:37:44,790
upstream developer as well tumbleweed

1008
00:37:44,790 --> 00:37:46,650
seems like a natural choice more for

1009
00:37:46,650 --> 00:37:48,660
quite a few projects you know it's a

1010
00:37:48,660 --> 00:37:49,980
distribution there we have all these

1011
00:37:49,980 --> 00:37:52,380
tools you can do stuff with odds first

1012
00:37:52,380 --> 00:37:54,060
at a nice pace get everything checked

1013
00:37:54,060 --> 00:37:56,460
with the latest kernel and the latest

1014
00:37:56,460 --> 00:37:58,200
systemd and the latest python or

1015
00:37:58,200 --> 00:38:01,740
whatever and then worry about how those

1016
00:38:01,740 --> 00:38:03,840
other slower distributions are going to

1017
00:38:03,840 --> 00:38:05,400
have to deal with it and if you want to

1018
00:38:05,400 --> 00:38:07,530
then use our tools like OBS to actually

1019
00:38:07,530 --> 00:38:09,420
do that building it's perfect because

1020
00:38:09,420 --> 00:38:11,640
you can actually build originally for

1021
00:38:11,640 --> 00:38:13,170
openSUSE and then flick a few switches

1022
00:38:13,170 --> 00:38:14,220
and build for a different rpm

1023
00:38:14,220 --> 00:38:17,190
distribution and then you know add a

1024
00:38:17,190 --> 00:38:18,870
debian file and flip a few files and

1025
00:38:18,870 --> 00:38:20,790
you're building for Debian I mean it the

1026
00:38:20,790 --> 00:38:22,140
build service takes care of all of that

1027
00:38:22,140 --> 00:38:25,160
so it's a perfect platform for that

1028
00:38:25,160 --> 00:38:26,720
and like I say containerized

1029
00:38:26,720 --> 00:38:28,279
applications are cool for those other

1030
00:38:28,279 --> 00:38:31,490
distributions but they're actually more

1031
00:38:31,490 --> 00:38:32,660
work for you in the long run that's what

1032
00:38:32,660 --> 00:38:35,359
I'm talking about later this is actually

1033
00:38:35,359 --> 00:38:37,069
less work where you know the community

1034
00:38:37,069 --> 00:38:39,799
takes care of a good chunk of this you

1035
00:38:39,799 --> 00:38:40,970
just have to worry about your little pot

1036
00:38:40,970 --> 00:38:46,190
on top and if you're a user you manage

1037
00:38:46,190 --> 00:38:47,210
to get the latest and greatest of

1038
00:38:47,210 --> 00:38:50,259
everything it just works if it doesn't

1039
00:38:50,259 --> 00:38:53,049
snappers there to take care of it and

1040
00:38:53,049 --> 00:38:55,099
it's a perfect place to start

1041
00:38:55,099 --> 00:38:56,450
contributing because that barrier

1042
00:38:56,450 --> 00:38:57,950
venturi solo it's easy to just throw

1043
00:38:57,950 --> 00:38:59,480
something at the build service and say

1044
00:38:59,480 --> 00:39:01,369
hey I'm will just a bit this if it

1045
00:39:01,369 --> 00:39:02,900
doesn't work out be open QA will kick it

1046
00:39:02,900 --> 00:39:05,000
out right away it's easy to get your

1047
00:39:05,000 --> 00:39:06,470
feet wet easy to start contributing with

1048
00:39:06,470 --> 00:39:08,089
us so it's a perfect platform to start

1049
00:39:08,089 --> 00:39:10,759
with that um you don't just have to take

1050
00:39:10,759 --> 00:39:13,099
my word for it because I've actually

1051
00:39:13,099 --> 00:39:14,180
we've actually been looking at the

1052
00:39:14,180 --> 00:39:15,500
statistics of how many people are using

1053
00:39:15,500 --> 00:39:17,829
tumbleweed since this transition from

1054
00:39:17,829 --> 00:39:22,250
partially rolling and the dev base of

1055
00:39:22,250 --> 00:39:25,250
the dev branch to just having a pure

1056
00:39:25,250 --> 00:39:27,859
rolling release and no dev branch and I

1057
00:39:27,859 --> 00:39:30,190
use the numbers are looking quite good

1058
00:39:30,190 --> 00:39:33,019
you know we from a if you look only from

1059
00:39:33,019 --> 00:39:34,640
a dev branch perspective you know our

1060
00:39:34,640 --> 00:39:36,559
dev branch now has ten times more users

1061
00:39:36,559 --> 00:39:39,019
than we ever had if you factor in the

1062
00:39:39,019 --> 00:39:41,000
partially rolling distribution it's

1063
00:39:41,000 --> 00:39:45,529
growing at 67% a year and wait really

1064
00:39:45,529 --> 00:39:47,240
Wiggly those weird little Peaks around

1065
00:39:47,240 --> 00:39:49,430
April seem to match up with a bunch of

1066
00:39:49,430 --> 00:39:51,470
releases and I'm not entirely sure what

1067
00:39:51,470 --> 00:39:59,240
that means yeah kind of fun so um yeah

1068
00:39:59,240 --> 00:40:01,369
that's it for me I have a bit of time I

1069
00:40:01,369 --> 00:40:03,410
think so yet ten minutes so ten minutes

1070
00:40:03,410 --> 00:40:07,240
for questions yes

1071
00:40:11,220 --> 00:40:14,000
give you so you are the same codebase

1072
00:40:14,000 --> 00:40:18,180
reproduce but I'm trying to the if very

1073
00:40:18,180 --> 00:40:20,099
rarely does a problem actually live in

1074
00:40:20,099 --> 00:40:23,700
just stamp but if it happens because we

1075
00:40:23,700 --> 00:40:25,319
have this snapshot models effectively

1076
00:40:25,319 --> 00:40:28,020
every single tumbleweed version you're

1077
00:40:28,020 --> 00:40:30,750
using is a entirely cohesive distro you

1078
00:40:30,750 --> 00:40:31,890
actually have a version number for your

1079
00:40:31,890 --> 00:40:34,440
district in et cos release its ISO date

1080
00:40:34,440 --> 00:40:36,569
for the day of the snapshot so you can

1081
00:40:36,569 --> 00:40:39,060
mention that there we can then fish it

1082
00:40:39,060 --> 00:40:43,349
out of OBS and does this happen on the

1083
00:40:43,349 --> 00:41:44,190
latest it really easy to generally

1084
00:41:44,190 --> 00:41:48,079
speaking most devout projects should

1085
00:41:48,079 --> 00:41:51,150
most shouldn't need to enable it because

1086
00:41:51,150 --> 00:41:52,349
they should be submitting everything

1087
00:41:52,349 --> 00:41:55,319
into tumbleweed already so this they

1088
00:41:55,319 --> 00:41:57,810
shouldn't really be an issue in the

1089
00:41:57,810 --> 00:41:59,790
sense of you know you know opioids we in

1090
00:41:59,790 --> 00:42:06,089
the build service field you want to

1091
00:42:06,089 --> 00:42:07,440
forget the testing and you just you just

1092
00:42:07,440 --> 00:42:24,770
want it now factory with with with that

1093
00:42:24,770 --> 00:42:28,349
potential day yeah yeah in that case

1094
00:42:28,349 --> 00:42:30,750
persuade them if they get stuck call the

1095
00:42:30,750 --> 00:42:32,579
board I mean we can we can help out with

1096
00:42:32,579 --> 00:42:35,040
that it's you know there's no problem on

1097
00:42:35,040 --> 00:42:38,930
build for a build side of things yes

1098
00:42:42,470 --> 00:42:45,470
yes

1099
00:42:51,130 --> 00:42:53,130
business what

1100
00:42:53,130 --> 00:42:57,069
well yeah the the question was you know

1101
00:42:57,069 --> 00:42:58,569
we were passively testing in the past

1102
00:42:58,569 --> 00:43:00,579
we're now actively testing who's writing

1103
00:43:00,579 --> 00:43:01,839
those tests you know is it

1104
00:43:01,839 --> 00:43:04,079
suza or the community or whatever

1105
00:43:04,079 --> 00:43:06,339
because open keyways adoption really

1106
00:43:06,339 --> 00:43:09,099
started in the community most of the

1107
00:43:09,099 --> 00:43:12,430
tests were openSUSE tests first and it's

1108
00:43:12,430 --> 00:43:13,930
only in the last year or two where souza

1109
00:43:13,930 --> 00:43:15,280
has actually been sort of actively

1110
00:43:15,280 --> 00:43:17,950
contributing to local QA so it's a open

1111
00:43:17,950 --> 00:43:20,260
it's a community project first which now

1112
00:43:20,260 --> 00:43:22,829
has enterprise guys worth money too so

1113
00:43:22,829 --> 00:43:26,109
most of the tests come but most it has

1114
00:43:26,109 --> 00:43:27,940
kind of come from that kind of original

1115
00:43:27,940 --> 00:43:30,460
group of original contributors and now

1116
00:43:30,460 --> 00:43:32,200
the end of work third if then the

1117
00:43:32,200 --> 00:43:34,000
process is totally open all the tests

1118
00:43:34,000 --> 00:43:36,730
are in github so even for the enterprise

1119
00:43:36,730 --> 00:43:38,859
stuff actually we've left that all open

1120
00:43:38,859 --> 00:43:41,410
as well so relatively easy to write the

1121
00:43:41,410 --> 00:43:44,400
tests submitted in generally speaking

1122
00:43:44,400 --> 00:43:47,260
but I think there's no objection to this

1123
00:43:47,260 --> 00:43:49,000
but generally speaking we don't get that

1124
00:43:49,000 --> 00:43:51,000
many contributions from individuals

1125
00:43:51,000 --> 00:43:54,030
outside kind of I guess the kind of

1126
00:43:54,030 --> 00:43:56,650
tumbleweed release management we like

1127
00:43:56,650 --> 00:43:58,210
people who are actively sitting there

1128
00:43:58,210 --> 00:43:59,530
working on the factory process

1129
00:43:59,530 --> 00:44:01,599
contributing a lot maybe the release

1130
00:44:01,599 --> 00:44:03,819
manager for tumbleweed they're the ones

1131
00:44:03,819 --> 00:44:05,380
you see the things break initially

1132
00:44:05,380 --> 00:44:07,180
before anyone's actually got it because

1133
00:44:07,180 --> 00:44:08,619
we know we haven't shipped it yet

1134
00:44:08,619 --> 00:44:10,569
and they'll just throw together a test

1135
00:44:10,569 --> 00:44:13,240
and patch it in so I'd like to get that

1136
00:44:13,240 --> 00:44:15,280
a bit more broad so that's kind of one

1137
00:44:15,280 --> 00:44:16,480
of the reasons I'm here is if there's

1138
00:44:16,480 --> 00:44:17,950
stuff in tumbleweed you download it you

1139
00:44:17,950 --> 00:44:19,450
try it and you just don't like it and

1140
00:44:19,450 --> 00:44:20,670
it's missed in the current process

1141
00:44:20,670 --> 00:44:22,720
that's why I've got those links in the

1142
00:44:22,720 --> 00:44:25,780
slide so you can you know broaden that

1143
00:44:25,780 --> 00:44:28,000
out a little bit because you know we

1144
00:44:28,000 --> 00:44:33,510
don't scale but the process does yes

1145
00:44:55,100 --> 00:44:58,210
[Music]

1146
00:45:12,250 --> 00:45:14,660
it's a challenge but then when you also

1147
00:45:14,660 --> 00:45:17,330
look at the trend of you know even

1148
00:45:17,330 --> 00:45:18,860
Enterprise distributions playing around

1149
00:45:18,860 --> 00:45:20,900
with the idea of things like modules and

1150
00:45:20,900 --> 00:45:22,790
you know what Evers have been a certain

1151
00:45:22,790 --> 00:45:24,110
parts of enterprise distributions moving

1152
00:45:24,110 --> 00:45:25,880
faster than others it's a problem that

1153
00:45:25,880 --> 00:45:27,170
everybody's gonna have to deal with at

1154
00:45:27,170 --> 00:45:29,780
some point you know the reality is you

1155
00:45:29,780 --> 00:45:32,360
know we can't the really the regular

1156
00:45:32,360 --> 00:45:34,520
model doesn't quite work what I actually

1157
00:45:34,520 --> 00:45:37,190
think the solution might be is taking

1158
00:45:37,190 --> 00:45:39,500
this process and finding some way of

1159
00:45:39,500 --> 00:45:41,330
defining a more moderate cadence you

1160
00:45:41,330 --> 00:45:42,800
know tumbleweed runs as fast as we can

1161
00:45:42,800 --> 00:45:44,480
contribute you know maybe there's a

1162
00:45:44,480 --> 00:45:47,450
rolling release model that fits that

1163
00:45:47,450 --> 00:45:49,340
problem nice of something that kind of

1164
00:45:49,340 --> 00:45:51,740
you know runs a little bit slower to fit

1165
00:45:51,740 --> 00:45:53,780
you know but everybody else can keep up

1166
00:45:53,780 --> 00:45:57,190
with yes

1167
00:46:07,309 --> 00:46:28,710
yep the gap is large and it basically

1168
00:46:28,710 --> 00:46:31,739
does get larger the you know it gets

1169
00:46:31,739 --> 00:46:33,210
larger the more of these service packs

1170
00:46:33,210 --> 00:46:35,279
are you know it's a fact of life that

1171
00:46:35,279 --> 00:46:36,960
staple base isn't gonna move you know

1172
00:46:36,960 --> 00:46:40,289
that fast however if you look at him for

1173
00:46:40,289 --> 00:46:41,819
example how Souza has done sleet well

1174
00:46:41,819 --> 00:46:44,940
confettis Li 11 the amount of change in

1175
00:46:44,940 --> 00:46:47,119
each enterprise service pack has been

1176
00:46:47,119 --> 00:46:50,279
significantly more and faster than in

1177
00:46:50,279 --> 00:46:52,079
the traditional sort of slea Levin's

1178
00:46:52,079 --> 00:46:54,539
lieutenant earlier ever part of the

1179
00:46:54,539 --> 00:46:56,190
reason Souza has been able to do that is

1180
00:46:56,190 --> 00:46:58,019
because openSUSE is doing what we're

1181
00:46:58,019 --> 00:47:00,420
doing with leap and tumbleweed so you

1182
00:47:00,420 --> 00:47:02,099
know things like jumping in-you kernel

1183
00:47:02,099 --> 00:47:04,410
version in service pack 2 isn't quite so

1184
00:47:04,410 --> 00:47:06,119
terrifying when tumbleweed already was

1185
00:47:06,119 --> 00:47:10,200
running it for a year so yeah it's so

1186
00:47:10,200 --> 00:47:11,940
you see this kind of balance of

1187
00:47:11,940 --> 00:47:13,650
enterprise destroyers catching up

1188
00:47:13,650 --> 00:47:14,940
because the rolling release is going

1189
00:47:14,940 --> 00:47:20,869
really fast so yes

1190
00:47:22,300 --> 00:47:35,210
yes that's a really good question okay

1191
00:47:35,210 --> 00:47:36,350
the one thing the one thing I would

1192
00:47:36,350 --> 00:47:39,860
improve right now is actually have a

1193
00:47:39,860 --> 00:47:44,180
delay between building and and building

1194
00:47:44,180 --> 00:47:46,370
and actually publishing right right now

1195
00:47:46,370 --> 00:47:48,020
we as soon as it's built and tested and

1196
00:47:48,020 --> 00:47:50,030
everything's fine we're publishing it we

1197
00:47:50,030 --> 00:47:52,610
need to put a delay in there because now

1198
00:47:52,610 --> 00:47:54,230
we have all that crazy number of users

1199
00:47:54,230 --> 00:47:56,120
are never infrastructure can't keep up

1200
00:47:56,120 --> 00:47:59,420
so if you if you're one of those poor

1201
00:47:59,420 --> 00:48:01,280
guys who hits that new snapshot first

1202
00:48:01,280 --> 00:48:02,710
thing before our mirrors have synced

1203
00:48:02,710 --> 00:48:06,350
yeah it's gonna be slow so we've really

1204
00:48:06,350 --> 00:48:09,020
got to find a way of kind of teaching

1205
00:48:09,020 --> 00:48:11,210
the build service okay it's ready push

1206
00:48:11,210 --> 00:48:13,340
it out to all the mirrors and then flag

1207
00:48:13,340 --> 00:48:15,470
it up for everybody to use and that's

1208
00:48:15,470 --> 00:48:19,330
yeah that that's on a list of the moment

1209
00:48:29,170 --> 00:48:32,380
[Music]

1210
00:48:41,349 --> 00:48:51,250
we actually have yeah yeah yeah

1211
00:49:04,200 --> 00:49:07,250
[Music]

1212
00:49:11,170 --> 00:49:33,140
sometimes confused from that confusion

1213
00:49:33,140 --> 00:49:35,510
this is all relatively new concept when

1214
00:49:35,510 --> 00:49:38,299
we first started leap we purposefully

1215
00:49:38,299 --> 00:49:40,099
didn't define where this line was

1216
00:49:40,099 --> 00:49:41,630
between the shared corn the community

1217
00:49:41,630 --> 00:49:43,339
stuff because we want the community to

1218
00:49:43,339 --> 00:49:49,040
help define that so yeah we for T that

1219
00:49:49,040 --> 00:49:50,630
that's the safe bet push the factory

1220
00:49:50,630 --> 00:49:52,369
pushing tumbleweed it'll always work and

1221
00:49:52,369 --> 00:49:53,859
it'll always get to where it needs to go

1222
00:49:53,859 --> 00:49:59,630
but the in the case of 42.1 yeah we were

1223
00:49:59,630 --> 00:50:01,190
purposefully leaving it very open to

1224
00:50:01,190 --> 00:50:03,559
divide that line around 40 feet up - we

1225
00:50:03,559 --> 00:50:06,190
made it Wayne

