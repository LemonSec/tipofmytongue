1
00:00:00,140 --> 00:00:04,319
[Applause]

2
00:00:06,260 --> 00:00:08,870
thanks everyone

3
00:00:08,870 --> 00:00:11,430
given the sparsity of the room I'm

4
00:00:11,430 --> 00:00:12,690
guessing that this question is relevant

5
00:00:12,690 --> 00:00:16,980
so how does ruby plus Alomar so we'll

6
00:00:16,980 --> 00:00:20,060
start by talking about OMR a little bit

7
00:00:20,060 --> 00:00:23,250
OMR is an open-source toolkit for

8
00:00:23,250 --> 00:00:26,700
language runtimes it consists of a bunch

9
00:00:26,700 --> 00:00:28,350
of components that you can then glue

10
00:00:28,350 --> 00:00:30,450
together to your existing language

11
00:00:30,450 --> 00:00:32,610
runtime things like garbage collection a

12
00:00:32,610 --> 00:00:36,450
monitoring system a JIT compiler the

13
00:00:36,450 --> 00:00:39,140
goal of Omar is one of compatibility so

14
00:00:39,140 --> 00:00:41,399
in contrast to other projects like

15
00:00:41,399 --> 00:00:43,559
truffle and girl we don't want to

16
00:00:43,559 --> 00:00:45,809
rewrite a new runtime we want to step in

17
00:00:45,809 --> 00:00:48,120
and help your existing runtime get

18
00:00:48,120 --> 00:00:51,120
better faster and stronger the goal here

19
00:00:51,120 --> 00:00:52,920
is really it's about integration rather

20
00:00:52,920 --> 00:00:56,429
than replacement so the ruby plus all of

21
00:00:56,429 --> 00:01:00,179
our preview is a vehicle by which we've

22
00:01:00,179 --> 00:01:01,589
been experimenting with a llamar

23
00:01:01,589 --> 00:01:05,850
technology in the Ruby language now a

24
00:01:05,850 --> 00:01:09,479
true because 2015 I talked about this

25
00:01:09,479 --> 00:01:11,280
language or I talked about this project

26
00:01:11,280 --> 00:01:13,740
and as did some of my colleagues talking

27
00:01:13,740 --> 00:01:15,960
about the carriage collector and despite

28
00:01:15,960 --> 00:01:17,759
the fact that that was Ruby kaigu 2015

29
00:01:17,759 --> 00:01:20,189
that was only thirteen months ago it

30
00:01:20,189 --> 00:01:24,930
sounds longer because it's 2017 now so

31
00:01:24,930 --> 00:01:26,759
what have we been doing for the last 13

32
00:01:26,759 --> 00:01:30,450
months the answers a lot of things so a

33
00:01:30,450 --> 00:01:34,020
true beacon we had tried really hard to

34
00:01:34,020 --> 00:01:36,149
get our code open source before Ruby key

35
00:01:36,149 --> 00:01:39,329
and we super didn't make it there's

36
00:01:39,329 --> 00:01:42,539
still more things to do and in fact our

37
00:01:42,539 --> 00:01:45,119
initial contribution got merged finally

38
00:01:45,119 --> 00:01:50,000
March 7th by Cheerilee right there

39
00:01:50,000 --> 00:01:56,429
shortly afterwards we released the code

40
00:01:56,429 --> 00:01:59,969
that we modified in Ruby however this

41
00:01:59,969 --> 00:02:01,350
didn't have the JIT compiler technology

42
00:02:01,350 --> 00:02:03,600
because when we did the first drop of

43
00:02:03,600 --> 00:02:06,030
Olimar we didn't put up the JIT compiler

44
00:02:06,030 --> 00:02:07,380
because it still was gonna take some

45
00:02:07,380 --> 00:02:10,860
time in fact that's what I spent most of

46
00:02:10,860 --> 00:02:12,830
last year on was trying to get to

47
00:02:12,830 --> 00:02:15,420
September where we finally actually did

48
00:02:15,420 --> 00:02:18,780
release the JIT compiler technology so

49
00:02:18,780 --> 00:02:20,610
after the JIT compiler technology went

50
00:02:20,610 --> 00:02:23,640
open-source we released the JIT

51
00:02:23,640 --> 00:02:26,790
technology for Ruby and then I've spent

52
00:02:26,790 --> 00:02:28,080
a little bit of time taking the JIT

53
00:02:28,080 --> 00:02:29,879
technology and moving it up to Ruby to

54
00:02:29,879 --> 00:02:33,750
four so I've been working on getting up

55
00:02:33,750 --> 00:02:35,519
to date so that we can actually build

56
00:02:35,519 --> 00:02:39,090
again certainty for so today if you

57
00:02:39,090 --> 00:02:41,909
visit our github project you'll see that

58
00:02:41,909 --> 00:02:44,760
Ruby to 400 Mars the current default

59
00:02:44,760 --> 00:02:46,950
branch and this is based right off of

60
00:02:46,950 --> 00:02:50,159
the Ruby to four tag the JIT compilers

61
00:02:50,159 --> 00:02:53,519
hooked up and running Travis CI tests we

62
00:02:53,519 --> 00:02:58,530
only run a small set of the MRI tests

63
00:02:58,530 --> 00:03:02,120
because we fail make tests alright now

64
00:03:02,120 --> 00:03:06,180
working on that I've spent a bunch of

65
00:03:06,180 --> 00:03:08,730
time populating our issue tracker trying

66
00:03:08,730 --> 00:03:10,080
to make sure that it's clear the state

67
00:03:10,080 --> 00:03:11,790
of the project what we're working on

68
00:03:11,790 --> 00:03:17,280
what needs to be worked on just a heads

69
00:03:17,280 --> 00:03:19,409
up for any of you who go and benchmark

70
00:03:19,409 --> 00:03:21,870
this right now we're slower than we were

71
00:03:21,870 --> 00:03:24,209
in our preview this is because I've

72
00:03:24,209 --> 00:03:25,260
actually turned off some of the

73
00:03:25,260 --> 00:03:26,970
optimizations that were hard to justify

74
00:03:26,970 --> 00:03:28,739
because they were a little too specific

75
00:03:28,739 --> 00:03:32,879
to math and math type things that show

76
00:03:32,879 --> 00:03:35,010
up in benchmarks which isn't a real

77
00:03:35,010 --> 00:03:36,930
workload we're aiming for something

78
00:03:36,930 --> 00:03:38,489
that's actually going to be much better

79
00:03:38,489 --> 00:03:42,569
in the software engineering layer so for

80
00:03:42,569 --> 00:03:43,980
the JIT the goal has really been

81
00:03:43,980 --> 00:03:45,599
functional correctness right now we want

82
00:03:45,599 --> 00:03:48,180
to pass the whole test suite and all of

83
00:03:48,180 --> 00:03:49,709
the optimization levels were exploring

84
00:03:49,709 --> 00:03:52,980
and as I said the goal here is

85
00:03:52,980 --> 00:03:56,670
integration not replacement so we don't

86
00:03:56,670 --> 00:03:59,730
put any restrictions on native code

87
00:03:59,730 --> 00:04:01,590
since the preview we've added some

88
00:04:01,590 --> 00:04:03,390
optimizations and reworked a couple of

89
00:04:03,390 --> 00:04:05,819
others so I have reworked the way that

90
00:04:05,819 --> 00:04:09,690
our inliner works a little bit taking

91
00:04:09,690 --> 00:04:11,190
advantage of the new call caches that

92
00:04:11,190 --> 00:04:16,620
got added for Ruby to four it's got a

93
00:04:16,620 --> 00:04:18,930
very simple compilation control today it

94
00:04:18,930 --> 00:04:21,060
just counts how many times the methods

95
00:04:21,060 --> 00:04:23,820
invoked before it compiles the method

96
00:04:23,820 --> 00:04:26,580
and so really what I've built is the

97
00:04:26,580 --> 00:04:29,490
foundation this is the state of the

98
00:04:29,490 --> 00:04:32,970
project today is we are we've laid the

99
00:04:32,970 --> 00:04:35,400
foundation and now we have to build the

100
00:04:35,400 --> 00:04:38,610
house on top so what's our goal with the

101
00:04:38,610 --> 00:04:41,490
Ruby plus all of our preview well our

102
00:04:41,490 --> 00:04:43,970
goal is to make Matz change his lights

103
00:04:43,970 --> 00:04:46,320
specifically the slide where he called

104
00:04:46,320 --> 00:04:50,040
out IBM j9 at the time we hadn't named

105
00:04:50,040 --> 00:04:55,380
the project as a potential contributor

106
00:04:55,380 --> 00:04:58,110
to Ruby 3x3 so we want to turn this it

107
00:04:58,110 --> 00:05:00,870
from a maybe into a yes indeed we

108
00:05:00,870 --> 00:05:05,580
actually did help contribute you know

109
00:05:05,580 --> 00:05:08,430
Ruby 3x3 is really going to be about

110
00:05:08,430 --> 00:05:13,290
trying to take the performance forward

111
00:05:13,290 --> 00:05:15,960
in big steps and that's going to

112
00:05:15,960 --> 00:05:18,750
probably involve gently we have a lot of

113
00:05:18,750 --> 00:05:21,540
pre-built technology from Olimar and we

114
00:05:21,540 --> 00:05:24,479
think that Amara will be able to exploit

115
00:05:24,479 --> 00:05:26,790
that and what's in it for us

116
00:05:26,790 --> 00:05:30,419
is a validation of the OMR approach we

117
00:05:30,419 --> 00:05:32,160
believe that we can take these

118
00:05:32,160 --> 00:05:35,100
pre-existing components and turn them

119
00:05:35,100 --> 00:05:38,280
into a recyclable toolkit for building

120
00:05:38,280 --> 00:05:39,380
language runtimes

121
00:05:39,380 --> 00:05:42,990
and if ruby is using it that's proof

122
00:05:42,990 --> 00:05:47,789
that we did the other thing and this is

123
00:05:47,789 --> 00:05:50,840
the other half of the OMR theory is that

124
00:05:50,840 --> 00:05:53,729
you know community improvement will be

125
00:05:53,729 --> 00:05:57,270
shared by everyone so today we already

126
00:05:57,270 --> 00:06:02,400
build our IBM jdk on top of omar our

127
00:06:02,400 --> 00:06:04,229
build process internally consists of

128
00:06:04,229 --> 00:06:06,660
cloning omar and then building the jdk

129
00:06:06,660 --> 00:06:10,940
on top of it so benefits and

130
00:06:10,940 --> 00:06:13,650
improvements that happen in omar

131
00:06:13,650 --> 00:06:16,650
already being shared by ruby and that

132
00:06:16,650 --> 00:06:22,850
can continue now December Christian

133
00:06:22,850 --> 00:06:25,460
posted a tweet

134
00:06:25,460 --> 00:06:29,350
I know of two people working on secret

135
00:06:29,350 --> 00:06:34,669
Ruby Jets for MRI I don't find this

136
00:06:34,669 --> 00:06:36,800
scary III think that this is actually an

137
00:06:36,800 --> 00:06:41,780
opportunity here so as I go through my

138
00:06:41,780 --> 00:06:43,520
talk what you're gonna notice is that

139
00:06:43,520 --> 00:06:45,919
I'm not actually talking that much about

140
00:06:45,919 --> 00:06:48,949
just-in-time compiler stuff because the

141
00:06:48,949 --> 00:06:51,199
compiler technology we've already got it

142
00:06:51,199 --> 00:06:53,599
it's already there what really has to

143
00:06:53,599 --> 00:06:57,080
happen are changes in MRI to enable the

144
00:06:57,080 --> 00:06:58,759
JIT compiler to get better and do a

145
00:06:58,759 --> 00:07:03,400
better job and so this is the area where

146
00:07:03,400 --> 00:07:05,810
multiple jets can collaborate on

147
00:07:05,810 --> 00:07:09,410
providing an interface to information to

148
00:07:09,410 --> 00:07:11,599
make things better but having some

149
00:07:11,599 --> 00:07:13,490
competitions nice too because it means

150
00:07:13,490 --> 00:07:15,430
that we can actually push each other and

151
00:07:15,430 --> 00:07:17,810
the end result of this is a better

152
00:07:17,810 --> 00:07:20,570
result for Ruby as a community not just

153
00:07:20,570 --> 00:07:24,550
for us at Omar

154
00:07:27,250 --> 00:07:29,800
so one of the things that Chris mentions

155
00:07:29,800 --> 00:07:34,360
though is that you know in order to get

156
00:07:34,360 --> 00:07:37,750
anything when you're compiling Ruby it

157
00:07:37,750 --> 00:07:41,130
takes a lot of sophistication and I

158
00:07:41,130 --> 00:07:43,840
really agree with that because in my

159
00:07:43,840 --> 00:07:46,930
mental model of where I am in doing Ruby

160
00:07:46,930 --> 00:07:50,170
jet work it kind of looks like this you

161
00:07:50,170 --> 00:07:52,510
know we've got a curve that we can start

162
00:07:52,510 --> 00:07:54,850
pushing up pretty heavily but we spent a

163
00:07:54,850 --> 00:07:58,240
lot of time just laying the foundation

164
00:07:58,240 --> 00:08:01,570
again all right so the title of this

165
00:08:01,570 --> 00:08:04,540
talk was communal as challenges highly

166
00:08:04,540 --> 00:08:07,750
surmountable challenges so the first set

167
00:08:07,750 --> 00:08:08,980
of challenges that I want to talk about

168
00:08:08,980 --> 00:08:11,620
our challenges that we have in the

169
00:08:11,620 --> 00:08:15,850
community so Aaron Patterson has this

170
00:08:15,850 --> 00:08:18,040
great tweet that I have now used in two

171
00:08:18,040 --> 00:08:19,900
talks and we'll probably use in many

172
00:08:19,900 --> 00:08:23,650
more because I really like it and there

173
00:08:23,650 --> 00:08:26,800
is no best of anything and so for us

174
00:08:26,800 --> 00:08:30,310
there is no best Ruby JIT there is no

175
00:08:30,310 --> 00:08:31,780
best Ruby interpreter

176
00:08:31,780 --> 00:08:34,059
there's just what works for your use

177
00:08:34,059 --> 00:08:37,210
case so for your use case that might be

178
00:08:37,210 --> 00:08:39,729
truffle Ruby that might be JRuby that

179
00:08:39,729 --> 00:08:41,500
might be rubinius that might be Ruby

180
00:08:41,500 --> 00:08:47,070
plus a hallmark that might be MV but as

181
00:08:47,070 --> 00:08:51,520
we try to mutate and work in the VM we

182
00:08:51,520 --> 00:08:52,900
need to make the right trade-offs you

183
00:08:52,900 --> 00:08:56,650
know JIT compilation is by definition a

184
00:08:56,650 --> 00:08:57,100
trade-off

185
00:08:57,100 --> 00:08:59,620
you are trading off some of the

186
00:08:59,620 --> 00:09:01,480
computation that could be used for your

187
00:09:01,480 --> 00:09:05,650
you know users tasks and spending it to

188
00:09:05,650 --> 00:09:07,060
create native code that will hopefully

189
00:09:07,060 --> 00:09:09,940
make things better but this cost memory

190
00:09:09,940 --> 00:09:12,430
and this is going to cost time before

191
00:09:12,430 --> 00:09:15,810
your VM hits peak performance

192
00:09:15,810 --> 00:09:18,269
and you know we need to prioritize

193
00:09:18,269 --> 00:09:21,230
because you know we can focus

194
00:09:21,230 --> 00:09:23,699
extensively on peak performance at the

195
00:09:23,699 --> 00:09:27,060
cost of footprint and at the cost of

196
00:09:27,060 --> 00:09:28,319
warm-up or

197
00:09:28,319 --> 00:09:31,759
we can focus a little bit on both

198
00:09:31,759 --> 00:09:34,110
there's a whole bunch of metrics that we

199
00:09:34,110 --> 00:09:38,189
could be talking about and really what

200
00:09:38,189 --> 00:09:39,749
needs to happen is that the Ruby

201
00:09:39,749 --> 00:09:42,300
community and this will happen naturally

202
00:09:42,300 --> 00:09:45,329
as people just adopt things but it can

203
00:09:45,329 --> 00:09:49,050
be a deliberative effort as well help

204
00:09:49,050 --> 00:09:51,540
provide benchmarks so opt karat by the

205
00:09:51,540 --> 00:09:55,019
way is the is a great first start up

206
00:09:55,019 --> 00:09:57,540
carat though he's kind of weird it's not

207
00:09:57,540 --> 00:10:01,370
what most Ruby looks like it's very very

208
00:10:01,370 --> 00:10:07,139
CPU intensive and you know that's not

209
00:10:07,139 --> 00:10:09,809
what rails looks like and so it may

210
00:10:09,809 --> 00:10:11,100
drive optimization in the wrong

211
00:10:11,100 --> 00:10:13,829
direction now I gave a big talk at Ruby

212
00:10:13,829 --> 00:10:16,079
cagey about this so you can go talk you

213
00:10:16,079 --> 00:10:19,769
can go watch that talk me I think we

214
00:10:19,769 --> 00:10:22,410
have to have a variety of metrics op

215
00:10:22,410 --> 00:10:23,939
care it's a great start for a CPU

216
00:10:23,939 --> 00:10:26,370
intensive benchmark but I also think we

217
00:10:26,370 --> 00:10:29,430
need some memory intensive benchmarks we

218
00:10:29,430 --> 00:10:31,790
probably need a start up benchmark and

219
00:10:31,790 --> 00:10:34,230
we're gonna need some web application

220
00:10:34,230 --> 00:10:36,839
framework benchmarking and as I admitted

221
00:10:36,839 --> 00:10:39,000
at my Ruby Kay you talk I've no idea how

222
00:10:39,000 --> 00:10:40,529
to benchmark a web application framework

223
00:10:40,529 --> 00:10:43,769
that's way outside of my skill set the

224
00:10:43,769 --> 00:10:45,149
good news is I managed to actually

225
00:10:45,149 --> 00:10:47,370
inspire Noah Gibbs to go and start

226
00:10:47,370 --> 00:10:49,649
trying to do this and so for those of

227
00:10:49,649 --> 00:10:51,059
you who are interested in rails

228
00:10:51,059 --> 00:10:53,069
performance don't take a look at his

229
00:10:53,069 --> 00:10:55,759
repo leave some comments on his approach

230
00:10:55,759 --> 00:10:58,980
he's made choices with a lot of thought

231
00:10:58,980 --> 00:11:02,129
into why he made those choices and it's

232
00:11:02,129 --> 00:11:03,959
worth engaging with him to see if you

233
00:11:03,959 --> 00:11:05,579
can give him a hand

234
00:11:05,579 --> 00:11:08,350
make it better

235
00:11:08,350 --> 00:11:10,810
now give the challenge we're gonna face

236
00:11:10,810 --> 00:11:13,150
in doing a compilation with review plus

237
00:11:13,150 --> 00:11:17,290
orlimar is information challenges and so

238
00:11:17,290 --> 00:11:19,690
when you look at a diagram of what the

239
00:11:19,690 --> 00:11:22,810
MRI what MRI looks like when you've

240
00:11:22,810 --> 00:11:25,780
added in the JIT compiler what's really

241
00:11:25,780 --> 00:11:27,850
important here are gonna be these white

242
00:11:27,850 --> 00:11:31,990
arrows here which are the JIT and VM

243
00:11:31,990 --> 00:11:36,370
interface because jits are symbiotic

244
00:11:36,370 --> 00:11:39,340
with their host VMs you know a JIT

245
00:11:39,340 --> 00:11:41,650
provides performance but the VM has to

246
00:11:41,650 --> 00:11:43,710
tell the JIT a bunch of information and

247
00:11:43,710 --> 00:11:49,600
so this kind of information can then

248
00:11:49,600 --> 00:11:51,790
drive even higher performance then

249
00:11:51,790 --> 00:11:56,470
you've got the symbiosis so one of the

250
00:11:56,470 --> 00:11:58,750
kinds of information that we really like

251
00:11:58,750 --> 00:12:03,040
to see MRI export is the notion of

252
00:12:03,040 --> 00:12:05,950
infrequent event notification so there's

253
00:12:05,950 --> 00:12:07,180
a whole bunch of things that in your

254
00:12:07,180 --> 00:12:09,820
typical application might never happen

255
00:12:09,820 --> 00:12:12,250
might happen only at the beginning of

256
00:12:12,250 --> 00:12:14,320
your application these are things like

257
00:12:14,320 --> 00:12:16,900
redefining basic operations so if you're

258
00:12:16,900 --> 00:12:19,840
gonna redefine fix number us or fix

259
00:12:19,840 --> 00:12:23,320
numpad this is a weird thing to do and

260
00:12:23,320 --> 00:12:25,960
probably won't happen very often but if

261
00:12:25,960 --> 00:12:28,210
it does happen I would like the VM

262
00:12:28,210 --> 00:12:31,060
texture tell us similar things about

263
00:12:31,060 --> 00:12:34,840
like modifying constants changing the

264
00:12:34,840 --> 00:12:38,620
class hierarchy these unlock new kinds

265
00:12:38,620 --> 00:12:41,320
of optimization we can be more

266
00:12:41,320 --> 00:12:43,540
aggressive in our specialization we can

267
00:12:43,540 --> 00:12:45,250
actually start optimizing our calls

268
00:12:45,250 --> 00:12:46,720
based on assumptions about what the

269
00:12:46,720 --> 00:12:49,030
class hierarchy looks like if the VM

270
00:12:49,030 --> 00:12:50,500
tells us when it changes we can then

271
00:12:50,500 --> 00:12:55,030
adapt essentially the the goal here is

272
00:12:55,030 --> 00:12:56,830
don't create code for things that

273
00:12:56,830 --> 00:12:57,730
haven't happened yet

274
00:12:57,730 --> 00:13:00,580
so I don't want to have to generate code

275
00:13:00,580 --> 00:13:02,290
to check whether or not you've redefined

276
00:13:02,290 --> 00:13:06,540
Plus unless you've redefined gloss

277
00:13:07,470 --> 00:13:10,570
another challenge that we face in MRI is

278
00:13:10,570 --> 00:13:13,440
the way that it does exceptions and

279
00:13:13,440 --> 00:13:16,060
ideally this would be change late as

280
00:13:16,060 --> 00:13:18,670
exceptions but that would be hard for

281
00:13:18,670 --> 00:13:22,180
almost anyone but in the meantime what

282
00:13:22,180 --> 00:13:23,710
we might be able to do is actually just

283
00:13:23,710 --> 00:13:28,810
ask the that's the VM to tell us

284
00:13:28,810 --> 00:13:31,030
whenever a stack frame could be modified

285
00:13:31,030 --> 00:13:36,250
and so today when you throw an exception

286
00:13:36,250 --> 00:13:39,340
in Ruby what happens is your C stack

287
00:13:39,340 --> 00:13:42,430
gets unwound using long jump and then

288
00:13:42,430 --> 00:13:45,400
you'll iterate down the call frames to

289
00:13:45,400 --> 00:13:48,940
the bottom executing any finally box

290
00:13:48,940 --> 00:13:52,090
that you act that you encounter now the

291
00:13:52,090 --> 00:13:53,590
way that we've implemented the Ruby plus

292
00:13:53,590 --> 00:13:58,000
OMR jet on that c call stack are your

293
00:13:58,000 --> 00:14:01,780
jittered frames and so when an exception

294
00:14:01,780 --> 00:14:03,790
fires we lose any information in there

295
00:14:03,790 --> 00:14:06,760
and so we deal with this today by just

296
00:14:06,760 --> 00:14:08,560
actually restoring all of the

297
00:14:08,560 --> 00:14:10,420
interpreter state every time we leave

298
00:14:10,420 --> 00:14:15,190
jaded code and this is costly it costs

299
00:14:15,190 --> 00:14:18,820
us time and memory and code cache to do

300
00:14:18,820 --> 00:14:21,280
all of this extra work what would be

301
00:14:21,280 --> 00:14:25,510
nice is if we didn't do that and we only

302
00:14:25,510 --> 00:14:28,930
let and we only wrote the code back to

303
00:14:28,930 --> 00:14:32,890
the stack when it was needed and so this

304
00:14:32,890 --> 00:14:35,710
is where we need on stack replacement

305
00:14:35,710 --> 00:14:38,230
the ability to transition from an

306
00:14:38,230 --> 00:14:41,320
existing chitta body back into the

307
00:14:41,320 --> 00:14:44,620
interpreter restoring any state that the

308
00:14:44,620 --> 00:14:46,210
JIT has hidden away and things like

309
00:14:46,210 --> 00:14:48,220
virtual machine read things like actual

310
00:14:48,220 --> 00:14:52,800
physical machine registers and the same

311
00:14:52,800 --> 00:14:55,630
principle applies to things like

312
00:14:55,630 --> 00:14:57,760
debuggers that are actually going and

313
00:14:57,760 --> 00:14:58,840
iterating through the call stack

314
00:14:58,840 --> 00:15:02,640
themselves any of those need to tell us

315
00:15:02,640 --> 00:15:05,290
really we don't want to be executing

316
00:15:05,290 --> 00:15:09,310
code for things that might happen we

317
00:15:09,310 --> 00:15:10,660
want to only execute code for things

318
00:15:10,660 --> 00:15:12,560
that have happened

319
00:15:12,560 --> 00:15:18,680
and you know in the case of the Jets

320
00:15:18,680 --> 00:15:20,660
typically get their best performance by

321
00:15:20,660 --> 00:15:21,949
lying to you about what they're doing

322
00:15:21,949 --> 00:15:24,980
they hide as much as they can until you

323
00:15:24,980 --> 00:15:26,240
actually ask for it

324
00:15:26,240 --> 00:15:28,759
we will only actually materialize things

325
00:15:28,759 --> 00:15:32,149
when they're needed so another piece of

326
00:15:32,149 --> 00:15:33,379
information that would be nice to get

327
00:15:33,379 --> 00:15:37,759
out of the VM is profiling information

328
00:15:37,759 --> 00:15:41,120
so personally I would love it if I could

329
00:15:41,120 --> 00:15:43,120
get the frequencies of basic blocks

330
00:15:43,120 --> 00:15:46,870
which would tell me for a contiguous

331
00:15:46,870 --> 00:15:50,149
sequence of Ruby byte codes how often

332
00:15:50,149 --> 00:15:52,339
has that actually been hit or maybe how

333
00:15:52,339 --> 00:15:54,079
often has that been hit proportionally

334
00:15:54,079 --> 00:15:56,769
to how often the methods that invoked or

335
00:15:56,769 --> 00:16:00,920
maybe we do that in a sampling fashion

336
00:16:00,920 --> 00:16:02,930
so we only update it probabilistic aliy

337
00:16:02,930 --> 00:16:05,360
these kinds of information though are

338
00:16:05,360 --> 00:16:07,180
really valuable because they let us

339
00:16:07,180 --> 00:16:09,860
direct the optimization inside of the

340
00:16:09,860 --> 00:16:13,449
JIT we don't have to spend time then

341
00:16:13,449 --> 00:16:16,069
working on optimizing and compiling code

342
00:16:16,069 --> 00:16:18,379
that only gets executed one in a million

343
00:16:18,379 --> 00:16:21,279
requests

344
00:16:26,389 --> 00:16:29,399
so another thing that would be nice to

345
00:16:29,399 --> 00:16:34,410
get as some type information so if you

346
00:16:34,410 --> 00:16:37,619
have a ruby method that only ever gets

347
00:16:37,619 --> 00:16:40,169
called the fixnum arguments we can

348
00:16:40,169 --> 00:16:42,389
generate that our code if we know that

349
00:16:42,389 --> 00:16:46,259
that's what's happening and so we would

350
00:16:46,259 --> 00:16:48,720
like to be able to speculate on types

351
00:16:48,720 --> 00:16:51,569
but we can't black speculate blindly we

352
00:16:51,569 --> 00:16:54,029
need to have some reasonable expectation

353
00:16:54,029 --> 00:16:55,919
we're going to succeed here and the way

354
00:16:55,919 --> 00:17:00,509
to do that is take profile so there's

355
00:17:00,509 --> 00:17:04,880
this problem that we face inside of MRI

356
00:17:04,880 --> 00:17:08,730
which is called the horizon problem or

357
00:17:08,730 --> 00:17:11,398
this is what it was called when Evan

358
00:17:11,398 --> 00:17:13,049
Phoenix was talking about a ruby Caillou

359
00:17:13,049 --> 00:17:17,069
2015 you know the thing is a compiler

360
00:17:17,069 --> 00:17:18,689
typically will only look at one method

361
00:17:18,689 --> 00:17:20,459
at a time

362
00:17:20,459 --> 00:17:23,339
and so it needs to be able to see a

363
00:17:23,339 --> 00:17:26,579
broad horizon or bring optimization

364
00:17:26,579 --> 00:17:30,990
opportunities so increasing that horizon

365
00:17:30,990 --> 00:17:34,590
will really help things but much of

366
00:17:34,590 --> 00:17:36,240
Ruby's core functionality is actually

367
00:17:36,240 --> 00:17:38,250
written in C code which is a problem for

368
00:17:38,250 --> 00:17:42,450
the optimization horizon so you know the

369
00:17:42,450 --> 00:17:44,309
one of the original conceptions of

370
00:17:44,309 --> 00:17:47,100
rubinius was this idea of well we'll

371
00:17:47,100 --> 00:17:48,929
write as much of the ruby core library

372
00:17:48,929 --> 00:17:53,460
in ruby and that has been successful for

373
00:17:53,460 --> 00:17:56,070
Rubinius at times but was never really

374
00:17:56,070 --> 00:17:58,860
been adopted by the MRI core they're not

375
00:17:58,860 --> 00:18:00,600
they've not been super interested in the

376
00:18:00,600 --> 00:18:02,290
idea

377
00:18:02,290 --> 00:18:05,020
in order to address that Evan Phoenix

378
00:18:05,020 --> 00:18:07,440
came up with this wild and crazy idea of

379
00:18:07,440 --> 00:18:10,600
what he called lifting the core and the

380
00:18:10,600 --> 00:18:13,360
notion here was well LLVM has jet

381
00:18:13,360 --> 00:18:17,590
framework has a JIT framework LLVM also

382
00:18:17,590 --> 00:18:18,700
compiled C code

383
00:18:18,700 --> 00:18:22,000
so let's ship the MRI interpreter with

384
00:18:22,000 --> 00:18:25,720
all of its MRI intermediate language and

385
00:18:25,720 --> 00:18:31,450
let the JIT portion of LLVM look at the

386
00:18:31,450 --> 00:18:35,080
actual LLVM compiled portions and do

387
00:18:35,080 --> 00:18:37,540
inlining and things across the sea

388
00:18:37,540 --> 00:18:42,010
boundary so I have my own skepticisms

389
00:18:42,010 --> 00:18:44,830
about this idea but if any of you try it

390
00:18:44,830 --> 00:18:48,160
and I want someone to try it please tell

391
00:18:48,160 --> 00:18:52,360
me how it works out okay so rewriting

392
00:18:52,360 --> 00:18:54,640
all of core not going to work lifting

393
00:18:54,640 --> 00:18:57,580
the core I would love to see it happen

394
00:18:57,580 --> 00:19:00,250
but maybe not gonna work so what do we

395
00:19:00,250 --> 00:19:02,380
have for a solution so my current

396
00:19:02,380 --> 00:19:04,450
thinking on this is that we could try

397
00:19:04,450 --> 00:19:06,340
something like this which is incremental

398
00:19:06,340 --> 00:19:09,880
rubia fication of the core so this turns

399
00:19:09,880 --> 00:19:11,290
out to be really easy to do in Ruby

400
00:19:11,290 --> 00:19:13,179
because we have what's called the

401
00:19:13,179 --> 00:19:15,400
prelude which is a set of Ruby code

402
00:19:15,400 --> 00:19:17,280
that's always going to get injected

403
00:19:17,280 --> 00:19:19,570
before the interpreter even starts up

404
00:19:19,570 --> 00:19:21,910
this actually gets compiled right into C

405
00:19:21,910 --> 00:19:27,010
code that gets loaded directly so what

406
00:19:27,010 --> 00:19:30,510
we could do is take prelude RB today and

407
00:19:30,510 --> 00:19:33,070
move it convert it to being a directory

408
00:19:33,070 --> 00:19:34,710
just so that it's easy to reason about

409
00:19:34,710 --> 00:19:38,640
and then put a whole bunch

410
00:19:38,640 --> 00:19:42,010
implementations in Ruby of methods that

411
00:19:42,010 --> 00:19:44,020
are actually interesting and causing

412
00:19:44,020 --> 00:19:47,320
problems for us that we use maybe only

413
00:19:47,320 --> 00:19:50,049
when the Jets turned on maybe you only

414
00:19:50,049 --> 00:19:56,440
use it when maybe you only use it from

415
00:19:56,440 --> 00:19:57,730
the perspective of the JIT you don't

416
00:19:57,730 --> 00:20:00,940
actually run that code there's a couple

417
00:20:00,940 --> 00:20:02,250
of ideas

418
00:20:02,250 --> 00:20:04,750
this spring startup concerns but I think

419
00:20:04,750 --> 00:20:06,900
they can be mitigated mitigated by using

420
00:20:06,900 --> 00:20:08,880
GUI G Suns

421
00:20:08,880 --> 00:20:11,190
iseek serialization stuff and

422
00:20:11,190 --> 00:20:14,260
longer-term you know maybe we can do an

423
00:20:14,260 --> 00:20:14,759
ahead of

424
00:20:14,759 --> 00:20:17,699
I'm solution I've had some interest in

425
00:20:17,699 --> 00:20:22,229
doing that so now we talk a little bit

426
00:20:22,229 --> 00:20:25,289
about optimizations and here's where I

427
00:20:25,289 --> 00:20:28,949
admit when it comes to optimization

428
00:20:28,949 --> 00:20:31,919
optimizing Ruby we who work on Ruby on

429
00:20:31,919 --> 00:20:36,449
om are our babies literal babies we've

430
00:20:36,449 --> 00:20:37,259
got a lot to learn

431
00:20:37,259 --> 00:20:38,849
we've got a lot of things to learn from

432
00:20:38,849 --> 00:20:42,389
other projects before we can graduate to

433
00:20:42,389 --> 00:20:45,749
doing our own thing we've got things to

434
00:20:45,749 --> 00:20:49,399
learn from Rubinius JRuby trouble Ruby

435
00:20:49,399 --> 00:20:51,959
other people have done really optimized

436
00:20:51,959 --> 00:20:54,449
rubies let's pay attention and listen to

437
00:20:54,449 --> 00:21:00,149
the lessons and wisdom they have there's

438
00:21:00,149 --> 00:21:02,269
some challenges in testing a JIT and

439
00:21:02,269 --> 00:21:05,669
this is the big one

440
00:21:05,669 --> 00:21:07,799
this slide next slide is dense because

441
00:21:07,799 --> 00:21:09,899
this is a thing I have feelings about

442
00:21:09,899 --> 00:21:16,199
but it's I'll keep it short so testing

443
00:21:16,199 --> 00:21:19,259
is hard you know the thing is when you

444
00:21:19,259 --> 00:21:22,979
are testing your normal ruby program and

445
00:21:22,979 --> 00:21:24,899
you write your tests there's a lot of

446
00:21:24,899 --> 00:21:26,729
value and enjoyment that you get from

447
00:21:26,729 --> 00:21:29,459
having a fast running test suite and you

448
00:21:29,459 --> 00:21:31,409
know having coverage that you know you

449
00:21:31,409 --> 00:21:33,179
get a hundred percent code coverage with

450
00:21:33,179 --> 00:21:35,190
almost no repetition every single line

451
00:21:35,190 --> 00:21:36,929
of your test suite is perfectly nice and

452
00:21:36,929 --> 00:21:39,389
valid you can reason about your test

453
00:21:39,389 --> 00:21:41,579
suite very locally you don't have to do

454
00:21:41,579 --> 00:21:43,349
anything special on the command line you

455
00:21:43,349 --> 00:21:49,169
just run rate test or whatever compiler

456
00:21:49,169 --> 00:21:50,879
test you know like that unfortunately

457
00:21:50,879 --> 00:21:54,539
they're often you have to run the code

458
00:21:54,539 --> 00:21:56,639
multiple times this is because the

459
00:21:56,639 --> 00:21:58,679
compiler will not choose to compile

460
00:21:58,679 --> 00:22:02,039
things until it's necessary which means

461
00:22:02,039 --> 00:22:04,919
that you have to iterate around to make

462
00:22:04,919 --> 00:22:06,329
sure that the compiler will actually try

463
00:22:06,329 --> 00:22:08,459
to compile something or you have to have

464
00:22:08,459 --> 00:22:10,139
special funky command lines to get it to

465
00:22:10,139 --> 00:22:13,289
do things compiler tests often require

466
00:22:13,289 --> 00:22:16,109
global reasoning so once you have this

467
00:22:16,109 --> 00:22:18,329
idea of infrequent event notification or

468
00:22:18,329 --> 00:22:20,929
you do optimization based on speculation

469
00:22:20,929 --> 00:22:23,069
then you have to be able to reason about

470
00:22:23,069 --> 00:22:26,490
when does that speculation fail

471
00:22:26,490 --> 00:22:29,559
what is the impact on that you're gonna

472
00:22:29,559 --> 00:22:31,450
have to run many VM instances under

473
00:22:31,450 --> 00:22:35,259
different options and all of these

474
00:22:35,259 --> 00:22:37,809
problems end up being the same when

475
00:22:37,809 --> 00:22:40,720
we're gonna test your gem underneath a

476
00:22:40,720 --> 00:22:44,980
jet it's kind of awkward but there are

477
00:22:44,980 --> 00:22:48,009
some good news in this world I actually

478
00:22:48,009 --> 00:22:51,450
recently had my own personal hero moment

479
00:22:51,450 --> 00:22:56,009
where Ben Waddell O's came along and he

480
00:22:56,009 --> 00:22:58,090
fixed a bug that I had opened against

481
00:22:58,090 --> 00:22:59,350
true respect to allow it to do

482
00:22:59,350 --> 00:23:02,649
repetition and he fixed it fast like way

483
00:23:02,649 --> 00:23:05,350
faster than I thought he did or would

484
00:23:05,350 --> 00:23:08,889
and this is a great win for jet testing

485
00:23:08,889 --> 00:23:10,450
because it means that we can at least

486
00:23:10,450 --> 00:23:13,600
run Ruby's Beck under repetition

487
00:23:13,600 --> 00:23:18,100
distress the jet better we've got some

488
00:23:18,100 --> 00:23:21,340
engineering challenges too so you know

489
00:23:21,340 --> 00:23:25,149
one of the big ones this 309 commits

490
00:23:25,149 --> 00:23:27,720
gets bigger every day

491
00:23:27,720 --> 00:23:30,870
causes me increasing levels of anxiety

492
00:23:30,870 --> 00:23:33,970
you know how are we gonna keep up with

493
00:23:33,970 --> 00:23:37,330
Ruby core you know so some of this can

494
00:23:37,330 --> 00:23:39,129
be addressed by just good software

495
00:23:39,129 --> 00:23:42,340
engineering so a long time ago I spent

496
00:23:42,340 --> 00:23:44,379
the time and I built a system that

497
00:23:44,379 --> 00:23:48,309
parses instructions def in order to

498
00:23:48,309 --> 00:23:50,679
generate callback code for the jet

499
00:23:50,679 --> 00:23:53,019
automatically so if somebody changed as

500
00:23:53,019 --> 00:23:55,389
instructions def the callbacks get

501
00:23:55,389 --> 00:23:57,429
updated automatically saves a lot of

502
00:23:57,429 --> 00:24:01,149
pain and agony but there's still a lot

503
00:24:01,149 --> 00:24:03,039
more that's needed and I don't have

504
00:24:03,039 --> 00:24:04,480
great answers to some of these ones

505
00:24:04,480 --> 00:24:07,649
because some of this is just gonna be

506
00:24:07,649 --> 00:24:09,220
collaboration that's gonna have to

507
00:24:09,220 --> 00:24:12,580
happen with the corner there's also just

508
00:24:12,580 --> 00:24:16,179
clean up that has to happen you know the

509
00:24:16,179 --> 00:24:17,679
callback generator code that I wrote in

510
00:24:17,679 --> 00:24:19,120
Ruby is not very good

511
00:24:19,120 --> 00:24:21,879
it's not a do Matic it's strange weird

512
00:24:21,879 --> 00:24:24,519
Ruby written by me who I spend all of my

513
00:24:24,519 --> 00:24:28,570
day writing C++ the make files in the

514
00:24:28,570 --> 00:24:30,850
project also needs some love and I've

515
00:24:30,850 --> 00:24:32,900
got links to issues there

516
00:24:32,900 --> 00:24:34,760
there's also some challenges that we

517
00:24:34,760 --> 00:24:40,520
have with Omar so all of Omar more

518
00:24:40,520 --> 00:24:42,230
specifically in the JIT compiler portion

519
00:24:42,230 --> 00:24:44,300
has only been open source for four and a

520
00:24:44,300 --> 00:24:46,880
half months so we're still working on

521
00:24:46,880 --> 00:24:49,100
things like improving our interfaces our

522
00:24:49,100 --> 00:24:51,800
integration story we're building a

523
00:24:51,800 --> 00:24:54,520
community slowly but surely

524
00:24:54,520 --> 00:24:57,140
so here's where I say the one thing that

525
00:24:57,140 --> 00:25:02,090
you know helps bring this to my point

526
00:25:02,090 --> 00:25:06,500
which is mentorship I want to help you

527
00:25:06,500 --> 00:25:10,040
guys help Ruby + om are so if anybody's

528
00:25:10,040 --> 00:25:11,809
interested in trying to tackle some of

529
00:25:11,809 --> 00:25:14,630
the issues here get in touch you know I

530
00:25:14,630 --> 00:25:16,880
will write documentation for things that

531
00:25:16,880 --> 00:25:18,890
are some things that are unclear I'll

532
00:25:18,890 --> 00:25:21,230
help you guide the implementation I'll

533
00:25:21,230 --> 00:25:24,500
answer you mail I'll be on slack I'll

534
00:25:24,500 --> 00:25:26,240
schedule a video chat with you like I

535
00:25:26,240 --> 00:25:28,040
really do want to help try to spread

536
00:25:28,040 --> 00:25:30,230
this technology and help get people up

537
00:25:30,230 --> 00:25:32,210
and running and so I'm willing to spend

538
00:25:32,210 --> 00:25:33,770
some time because the thing is at the

539
00:25:33,770 --> 00:25:36,050
end of the day Ruby + Omar needs

540
00:25:36,050 --> 00:25:37,880
community and Trust to survive you know

541
00:25:37,880 --> 00:25:40,220
we haven't really put any in we haven't

542
00:25:40,220 --> 00:25:41,870
put really any effort into community

543
00:25:41,870 --> 00:25:45,940
building up until now but going forward

544
00:25:45,940 --> 00:25:49,070
we're gonna have to and we're gonna need

545
00:25:49,070 --> 00:25:51,760
to get some interest from the community

546
00:25:51,760 --> 00:25:55,220
so my to-do list for the next little

547
00:25:55,220 --> 00:25:58,040
while is to start publicizing my

548
00:25:58,040 --> 00:26:00,440
mentorship commitment a lot more I need

549
00:26:00,440 --> 00:26:02,620
to start talking more with the Ruby core

550
00:26:02,620 --> 00:26:05,090
I'm that guy in the corner listening

551
00:26:05,090 --> 00:26:07,250
right now but now it's time for me to

552
00:26:07,250 --> 00:26:11,090
start actually talking and I need to

553
00:26:11,090 --> 00:26:12,470
start writing some of these changes down

554
00:26:12,470 --> 00:26:14,150
that we need to make in the and the VM

555
00:26:14,150 --> 00:26:16,250
or in experimenting and prototyping

556
00:26:16,250 --> 00:26:20,280
getting feedback from core developers

557
00:26:20,280 --> 00:26:25,200
your to-do list is to give it a try and

558
00:26:25,200 --> 00:26:27,390
when something breaks and it'll break

559
00:26:27,390 --> 00:26:29,190
believe me

560
00:26:29,190 --> 00:26:32,760
open an issue because that'll help and

561
00:26:32,760 --> 00:26:35,190
ask me how to help you know little

562
00:26:35,190 --> 00:26:37,860
things are perfectly appreciated even if

563
00:26:37,860 --> 00:26:40,410
I've got a typo in a make file that's

564
00:26:40,410 --> 00:26:40,860
great

565
00:26:40,860 --> 00:26:44,310
send me a polar horse so for hitting

566
00:26:44,310 --> 00:26:47,730
Ruby three by three you know the work

567
00:26:47,730 --> 00:26:49,440
ahead kind of looks like this in my mind

568
00:26:49,440 --> 00:26:51,990
you know yeah we do have some work that

569
00:26:51,990 --> 00:26:54,540
has to happen in the jet compiler but a

570
00:26:54,540 --> 00:26:58,170
lot of it's going to be VM work and to

571
00:26:58,170 --> 00:26:59,940
reiterate the point I made earlier the

572
00:26:59,940 --> 00:27:01,650
VM work can be shared among competition

573
00:27:01,650 --> 00:27:04,950
so any of this work that you do or i do

574
00:27:04,950 --> 00:27:08,640
on the Ruby VM probably can be used

575
00:27:08,640 --> 00:27:11,040
again by another jet implementation for

576
00:27:11,040 --> 00:27:25,800
MRI thank you very much for having me oh

577
00:27:25,800 --> 00:27:28,430
good

578
00:27:37,809 --> 00:27:45,519
so I saw like so thank you if you're

579
00:27:45,519 --> 00:27:48,669
running to be if you can to sit out of

580
00:27:48,669 --> 00:27:53,919
this out yet right or you yeah so we

581
00:27:53,919 --> 00:27:56,950
have a branch for two - oh sorry to

582
00:27:56,950 --> 00:27:58,330
repeat the question for those who are

583
00:27:58,330 --> 00:28:00,429
interested in trying this out but are

584
00:28:00,429 --> 00:28:03,099
currently running two three or a lower

585
00:28:03,099 --> 00:28:05,619
version yeah you'll have to start using

586
00:28:05,619 --> 00:28:09,099
Ruby two for for the newest work we do

587
00:28:09,099 --> 00:28:12,070
have a branch that has an earlier

588
00:28:12,070 --> 00:28:14,769
version of this stuff all built for Ruby

589
00:28:14,769 --> 00:28:18,369
- - so that can be a start and things

590
00:28:18,369 --> 00:28:20,769
that break in Ruby - - may be fixable

591
00:28:20,769 --> 00:28:24,190
you know for Ruby - for we kind of don't

592
00:28:24,190 --> 00:28:26,469
have the resources to maintain multiple

593
00:28:26,469 --> 00:28:29,889
version branches and backport especially

594
00:28:29,889 --> 00:28:32,259
given the amount of change that happened

595
00:28:32,259 --> 00:28:33,849
between two two and two four

596
00:28:33,849 --> 00:28:37,330
so all developments happening on to four

597
00:28:37,330 --> 00:28:39,190
because my goal at the end of this is

598
00:28:39,190 --> 00:28:41,080
stop stream it which means that my goal

599
00:28:41,080 --> 00:28:46,199
ultimately is to chase head or trunk

600
00:28:56,840 --> 00:29:00,110
if I tested it right now would it be any

601
00:29:00,110 --> 00:29:04,700
faster or about the same as MRI or it

602
00:29:04,700 --> 00:29:07,279
depends a lot on what you run and how

603
00:29:07,279 --> 00:29:14,440
you run it so fairly simple benchmarks

604
00:29:14,440 --> 00:29:18,260
we definitely beat MRI sometimes by an

605
00:29:18,260 --> 00:29:21,940
appreciable fraction you know 50 percent

606
00:29:21,940 --> 00:29:26,419
in other cases you will see degradation

607
00:29:26,419 --> 00:29:29,419
this gets into the Wibbly bits about how

608
00:29:29,419 --> 00:29:32,000
to benchmark which was my Ruby ke talk

609
00:29:32,000 --> 00:29:33,559
so if you want to watch that I talked a

610
00:29:33,559 --> 00:29:37,700
lot about this but there's a lot of

611
00:29:37,700 --> 00:29:41,750
rough edges here so I can tell you opt

612
00:29:41,750 --> 00:29:44,049
karat it's pretty much a wash today

613
00:29:44,049 --> 00:29:45,799
we're working on it

614
00:29:45,799 --> 00:30:10,669
but it's not there yet so the question

615
00:30:10,669 --> 00:30:12,380
or comment here is you know to make it

616
00:30:12,380 --> 00:30:14,960
easier to test we should add this to our

617
00:30:14,960 --> 00:30:20,140
VM or our BN for Ruby install Ruby build

618
00:30:20,140 --> 00:30:22,490
so if I don't have a public issue about

619
00:30:22,490 --> 00:30:24,710
this already I definitely have an issue

620
00:30:24,710 --> 00:30:27,320
here about getting that done but I've

621
00:30:27,320 --> 00:30:29,210
kind of mentally been holding off on

622
00:30:29,210 --> 00:30:30,919
doing that until I at least pass make

623
00:30:30,919 --> 00:30:33,710
test all that's kind of my barb in four

624
00:30:33,710 --> 00:30:35,870
before before I do too much in the way

625
00:30:35,870 --> 00:30:39,320
of like hey RB end you add me as a

626
00:30:39,320 --> 00:30:41,750
buildable formula I wanted to at least

627
00:30:41,750 --> 00:30:44,529
pass all the tests

628
00:30:46,810 --> 00:30:49,220
questions which occurs to me now that

629
00:30:49,220 --> 00:30:50,780
actually about that's probably too high

630
00:30:50,780 --> 00:30:53,030
a bar because I do pass all the tests

631
00:30:53,030 --> 00:30:54,500
and interpreter mode and the jits not

632
00:30:54,500 --> 00:30:58,490
turned on until you asked for it so I I

633
00:30:58,490 --> 00:31:01,390
need to think about this a little bit I

634
00:31:01,390 --> 00:31:05,060
saw a question over there no okay

635
00:31:05,060 --> 00:31:13,640
I'm hallucinating so we have a darker

636
00:31:13,640 --> 00:31:15,260
container for the two to branch I

637
00:31:15,260 --> 00:31:17,780
haven't pushed anything from the two for

638
00:31:17,780 --> 00:31:18,860
branch

639
00:31:18,860 --> 00:31:21,340
it is something we've tried before I

640
00:31:21,340 --> 00:31:23,510
people have sort of mixed opinions on

641
00:31:23,510 --> 00:31:26,380
doing testing and docker containers I

642
00:31:26,380 --> 00:31:31,520
believe we did have someone try it out

643
00:31:31,520 --> 00:31:35,480
and build a docker container for us or

644
00:31:35,480 --> 00:31:38,990
no sir he built a build container so I

645
00:31:38,990 --> 00:31:43,070
can point you at that it just has all

646
00:31:43,070 --> 00:31:45,909
the prereqs installed

647
00:31:49,740 --> 00:31:54,630
so this is all based on the you know

648
00:31:54,630 --> 00:31:56,920
IBM's sort of planned for the next

649
00:31:56,920 --> 00:31:58,240
little while and runtimes

650
00:31:58,240 --> 00:32:01,990
is omr it's about how we are going to

651
00:32:01,990 --> 00:32:03,790
invest in language runtime technologies

652
00:32:03,790 --> 00:32:08,440
and so om our needs proof points and

653
00:32:08,440 --> 00:32:10,690
Ruby was a great proof point we have

654
00:32:10,690 --> 00:32:12,820
many others actually so we have proof

655
00:32:12,820 --> 00:32:16,870
points in Lua proof points in a research

656
00:32:16,870 --> 00:32:18,760
small talk interpreter called some plus

657
00:32:18,760 --> 00:32:23,500
plus there are more and I'm just totally

658
00:32:23,500 --> 00:32:28,390
blanking there's one on call okay open

659
00:32:28,390 --> 00:32:30,810
source ones

660
00:32:31,190 --> 00:32:34,250
know that but the Jets not done yet

661
00:32:34,250 --> 00:32:40,010
open is it ok nevermind so this tells

662
00:32:40,010 --> 00:32:41,360
you how much I know about all of these

663
00:32:41,360 --> 00:32:43,220
various other reports because I miss

664
00:32:43,220 --> 00:33:09,020
them because they're happening can you

665
00:33:09,020 --> 00:33:12,380
are there any plans to make it bit more

666
00:33:12,380 --> 00:33:14,840
available because I think you need the

667
00:33:14,840 --> 00:33:16,760
license of something like that for the

668
00:33:16,760 --> 00:33:25,970
to link or yeah so far so most people

669
00:33:25,970 --> 00:33:27,760
are getting health center to like be

670
00:33:27,760 --> 00:33:30,440
whenever tooling in the way we used to

671
00:33:30,440 --> 00:33:31,880
get it but Hall Center is actually just

672
00:33:31,880 --> 00:33:33,500
an eclipse project get it from eclipse

673
00:33:33,500 --> 00:33:35,510
marketplace now so most of those tools

674
00:33:35,510 --> 00:33:36,710
are all there just will eclipse to

675
00:33:36,710 --> 00:33:48,110
download because very good selling point

676
00:33:48,110 --> 00:33:52,280
that you can be its what also makes you

677
00:33:52,280 --> 00:33:55,120
different is that

678
00:34:07,510 --> 00:34:11,060
the questions I have one you were

679
00:34:11,060 --> 00:34:13,730
mentioning about providing that you need

680
00:34:13,730 --> 00:34:17,590
to follow duties in MRI to have that

681
00:34:22,060 --> 00:34:25,280
maybe so this is this is where it gets

682
00:34:25,280 --> 00:34:28,960
into the questions of implementation so

683
00:34:28,960 --> 00:34:32,360
we could add sort of a private trace

684
00:34:32,360 --> 00:34:37,370
point and use that one of the the flaws

685
00:34:37,370 --> 00:34:39,980
of the trace point they're not flaws

686
00:34:39,980 --> 00:34:42,110
let's turn the trace points can be

687
00:34:42,110 --> 00:34:43,820
fairly high overhead is really the big

688
00:34:43,820 --> 00:34:48,199
thing here and it is possible if you're

689
00:34:48,199 --> 00:34:51,168
asking very very precise questions to

690
00:34:51,168 --> 00:34:52,760
handle something that's going to be much

691
00:34:52,760 --> 00:34:56,389
more efficient but there's it's gonna

692
00:34:56,389 --> 00:34:58,040
take more time to do that so maybe it's

693
00:34:58,040 --> 00:35:00,940
better to just go through trace points

694
00:35:00,940 --> 00:35:05,800
which is a long way of saying maybe

695
00:35:10,150 --> 00:35:12,840
any other questions

696
00:35:12,840 --> 00:35:14,800
let you thank you very much

697
00:35:14,800 --> 00:35:22,669
[Applause]

