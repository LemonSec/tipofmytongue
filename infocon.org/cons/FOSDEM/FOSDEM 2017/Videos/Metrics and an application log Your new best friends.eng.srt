1
00:00:00,000 --> 00:00:02,240
I'm

2
00:00:04,470 --> 00:00:07,019
keep making it to the last session of

3
00:00:07,019 --> 00:00:09,420
the day right I know the the only thing

4
00:00:09,420 --> 00:00:11,549
between you and beer now is me so I'm

5
00:00:11,549 --> 00:00:14,309
gonna get to it quite quickly hopefully

6
00:00:14,309 --> 00:00:16,680
you are in the vibe room both yeah

7
00:00:16,680 --> 00:00:18,300
exactly why didn't everyone knows

8
00:00:18,300 --> 00:00:21,869
happier setting a fine example and

9
00:00:21,869 --> 00:00:23,490
hopefully you are in the man room

10
00:00:23,490 --> 00:00:25,320
you here to learn about metrics and

11
00:00:25,320 --> 00:00:27,300
application logging cool how it can help

12
00:00:27,300 --> 00:00:32,279
you and this is me I'm Michael I'm Emma

13
00:00:32,279 --> 00:00:33,960
keep on Twitter if you want to say nice

14
00:00:33,960 --> 00:00:35,910
things about the table if you want to

15
00:00:35,910 --> 00:00:37,410
say about things don't put that on the

16
00:00:37,410 --> 00:00:41,089
internet just come talk to me afterwards

17
00:00:41,690 --> 00:00:44,010
obviously PHP for the developer for

18
00:00:44,010 --> 00:00:46,950
about 10 years and then recently moved

19
00:00:46,950 --> 00:00:49,590
into operations lands were monitoring

20
00:00:49,590 --> 00:00:52,880
the metrics there's a lot more important

21
00:00:52,880 --> 00:00:55,410
and that's why I come to give this talk

22
00:00:55,410 --> 00:00:58,680
to developers say I was one of you once

23
00:00:58,680 --> 00:01:01,020
I didn't be able to get it books now

24
00:01:01,020 --> 00:01:02,970
that I'm on the receiving end it helps

25
00:01:02,970 --> 00:01:07,229
so much now we've got quite a lot to get

26
00:01:07,229 --> 00:01:10,290
through so dive straight into it if I

27
00:01:10,290 --> 00:01:12,720
wanted to give you a quick rundown of

28
00:01:12,720 --> 00:01:16,800
what we're gonna cover today we're gonna

29
00:01:16,800 --> 00:01:19,470
cover a few different things I'm gonna

30
00:01:19,470 --> 00:01:21,360
start by thinking about why we need to

31
00:01:21,360 --> 00:01:24,210
log more logs we can use things to

32
00:01:24,210 --> 00:01:25,470
consider when putting the logs together

33
00:01:25,470 --> 00:01:28,950
ourselves how to get started

34
00:01:28,950 --> 00:01:31,530
what's a log were to log to how to add

35
00:01:31,530 --> 00:01:35,070
into your application will cover the ELQ

36
00:01:35,070 --> 00:01:38,100
stack which is the velocity search logs

37
00:01:38,100 --> 00:01:41,790
- Ricky barber is the de facto standards

38
00:01:41,790 --> 00:01:44,670
for application logging I'll take a look

39
00:01:44,670 --> 00:01:47,100
at what each component of that does and

40
00:01:47,100 --> 00:01:50,820
how it's useful to you logs and

41
00:01:50,820 --> 00:01:52,250
dashboards go hand-in-hand

42
00:01:52,250 --> 00:01:54,869
sometimes you don't have hours to me

43
00:01:54,869 --> 00:01:57,090
10,000 log messages you just want to see

44
00:01:57,090 --> 00:01:58,860
a nice graph that shows you what's

45
00:01:58,860 --> 00:02:03,270
happening there are a few pitfalls when

46
00:02:03,270 --> 00:02:05,159
it comes to log management but don't

47
00:02:05,159 --> 00:02:07,229
worry we'll run through a couple of the

48
00:02:07,229 --> 00:02:09,449
most common ones and I made those

49
00:02:09,449 --> 00:02:12,390
mistakes so you don't have to

50
00:02:12,390 --> 00:02:16,570
and finally almost family we're going to

51
00:02:16,570 --> 00:02:18,220
take a look at some supporting tools

52
00:02:18,220 --> 00:02:23,590
things like beads spared you do - if

53
00:02:23,590 --> 00:02:25,770
we're ending it off with a conclusion

54
00:02:25,770 --> 00:02:27,900
sound good

55
00:02:27,900 --> 00:02:35,410
cool so mugging why do we log all the

56
00:02:35,410 --> 00:02:36,580
way through this feel free to share Joe

57
00:02:36,580 --> 00:02:41,459
why do we lock debugging what went wrong

58
00:02:41,459 --> 00:02:44,590
always the first one that comes out why

59
00:02:44,590 --> 00:02:50,230
else do we log metrics you visited us

60
00:02:50,230 --> 00:02:55,360
how many people visited us anymore

61
00:02:55,360 --> 00:03:03,040
I heard accountability audit logs who

62
00:03:03,040 --> 00:03:04,660
gave Michael access to production

63
00:03:04,660 --> 00:03:08,320
because one then he failing but if you

64
00:03:08,320 --> 00:03:09,400
don't have an audit log you don't know

65
00:03:09,400 --> 00:03:12,989
why decisions maybe why things happen

66
00:03:13,590 --> 00:03:16,330
now I like to think of it as Montaigne

67
00:03:16,330 --> 00:03:18,670
documentation your application log tells

68
00:03:18,670 --> 00:03:20,290
you what your applications doing right

69
00:03:20,290 --> 00:03:25,030
now without it you have no idea what

70
00:03:25,030 --> 00:03:25,600
your apps doing

71
00:03:25,600 --> 00:03:26,739
once you've shifted to production

72
00:03:26,739 --> 00:03:30,970
there's just like a big black box being

73
00:03:30,970 --> 00:03:32,769
able to log into a server rather than

74
00:03:32,769 --> 00:03:34,840
tell - F and just read what your

75
00:03:34,840 --> 00:03:36,190
application is doing what queries it's

76
00:03:36,190 --> 00:03:37,989
running what pages being here things

77
00:03:37,989 --> 00:03:40,870
like that is so useful imagine if

78
00:03:40,870 --> 00:03:43,480
someone said hey it's not working but I

79
00:03:43,480 --> 00:03:44,769
don't have anything to give you like

80
00:03:44,769 --> 00:03:45,690
where would you start

81
00:03:45,690 --> 00:03:48,220
that's why an application log is so

82
00:03:48,220 --> 00:03:53,400
important so exceeding you guys like

83
00:03:53,400 --> 00:03:55,959
we're done you've all sold you can go in

84
00:03:55,959 --> 00:03:58,120
towards mother no you couldn't hear

85
00:03:58,120 --> 00:03:59,560
tomorrow you couldn't go into work on

86
00:03:59,560 --> 00:04:01,360
Monday and start building an application

87
00:04:01,360 --> 00:04:06,760
log you sold but I know what your next

88
00:04:06,760 --> 00:04:08,500
question is as well it's always the next

89
00:04:08,500 --> 00:04:12,430
question can I have it for free can I

90
00:04:12,430 --> 00:04:15,489
have it without doing any work and

91
00:04:15,489 --> 00:04:18,510
actually yes you can for a lot of it

92
00:04:18,510 --> 00:04:22,710
I mean you use Apache use my sequel use

93
00:04:22,710 --> 00:04:26,360
PHP may use chef of necessary

94
00:04:26,360 --> 00:04:30,750
all of these libraries all of these

95
00:04:30,750 --> 00:04:34,680
tools have a application logs they might

96
00:04:34,680 --> 00:04:36,120
oh what they're doing to disk and you

97
00:04:36,120 --> 00:04:37,950
can just go and you can read it to find

98
00:04:37,950 --> 00:04:40,340
out what these applications are doing

99
00:04:40,340 --> 00:04:43,860
you want to enable the slow query log in

100
00:04:43,860 --> 00:04:45,570
my sequel to find out what we was taking

101
00:04:45,570 --> 00:04:47,610
the most time you don't have to change

102
00:04:47,610 --> 00:04:50,790
your application that's all it's

103
00:04:50,790 --> 00:04:55,290
basically free but that doesn't help my

104
00:04:55,290 --> 00:04:58,010
application

105
00:04:58,790 --> 00:05:00,510
unfortunately you wouldn't have to do a

106
00:05:00,510 --> 00:05:02,760
little bit of work here there's no easy

107
00:05:02,760 --> 00:05:03,770
fix

108
00:05:03,770 --> 00:05:07,080
well imagine an application log just

109
00:05:07,080 --> 00:05:09,150
magically appears for you you have to

110
00:05:09,150 --> 00:05:11,760
put in the work but we're gonna do it

111
00:05:11,760 --> 00:05:13,410
together we're gonna go through all the

112
00:05:13,410 --> 00:05:16,530
different things you might need and

113
00:05:16,530 --> 00:05:20,310
before we get started I want to make

114
00:05:20,310 --> 00:05:21,420
sure that we know that there are two

115
00:05:21,420 --> 00:05:22,830
different types of logs both very

116
00:05:22,830 --> 00:05:27,660
important we're both very different the

117
00:05:27,660 --> 00:05:31,080
first is the log for humans an ideally

118
00:05:31,080 --> 00:05:33,660
this should be silent this is really for

119
00:05:33,660 --> 00:05:37,440
the database isn't there or I mean it's

120
00:05:37,440 --> 00:05:39,690
run out of space on disk we could have

121
00:05:39,690 --> 00:05:42,230
made the image it's things like that

122
00:05:42,230 --> 00:05:45,210
this is your ever log these are things

123
00:05:45,210 --> 00:05:47,910
that you you really care about and you

124
00:05:47,910 --> 00:05:49,140
don't want it mixed in with tons of

125
00:05:49,140 --> 00:05:52,620
other debug information the other kind

126
00:05:52,620 --> 00:05:54,870
is machine readable and this is probably

127
00:05:54,870 --> 00:05:56,580
going to be J certain it has a defined

128
00:05:56,580 --> 00:06:02,100
schema and you live versions and this is

129
00:06:02,100 --> 00:06:03,900
for things like a media object has been

130
00:06:03,900 --> 00:06:05,940
played I'm gonna log that that's been

131
00:06:05,940 --> 00:06:07,740
played you can use that for accounting

132
00:06:07,740 --> 00:06:12,270
purposes later whatever you want now I

133
00:06:12,270 --> 00:06:14,279
used to think this was true

134
00:06:14,279 --> 00:06:16,889
but since I moved from development to

135
00:06:16,889 --> 00:06:19,019
operations I realized that there's not

136
00:06:19,019 --> 00:06:21,179
really two types of blog there's two

137
00:06:21,179 --> 00:06:23,579
different purposes once for humans to

138
00:06:23,579 --> 00:06:24,959
consume and work out when things go

139
00:06:24,959 --> 00:06:26,879
wrong I'm off the machines consume like

140
00:06:26,879 --> 00:06:29,549
when it media objects blade but in that

141
00:06:29,549 --> 00:06:32,459
it's actually just one type of log and

142
00:06:32,459 --> 00:06:33,629
they should be machine and human

143
00:06:33,629 --> 00:06:36,539
readable I mean I'm sure everyone here

144
00:06:36,539 --> 00:06:39,329
is sat down taking a piece of Jason the

145
00:06:39,329 --> 00:06:42,149
sense well it's a little bit messy but I

146
00:06:42,149 --> 00:06:46,259
know what it's doing and by using tools

147
00:06:46,259 --> 00:06:48,389
like Jason or there's also vlog format

148
00:06:48,389 --> 00:06:52,349
is gaining popularity at the minute you

149
00:06:52,349 --> 00:06:54,839
can medes the machine logs you might not

150
00:06:54,839 --> 00:06:57,119
be able to do it as easily you might not

151
00:06:57,119 --> 00:06:59,729
be able to do a glance but with all

152
00:06:59,729 --> 00:07:01,919
grammars we can make tools that consume

153
00:07:01,919 --> 00:07:03,689
Jason and I put human readable

154
00:07:03,689 --> 00:07:06,809
information it's much easier to go for

155
00:07:06,809 --> 00:07:08,549
machine readable to human than it is

156
00:07:08,549 --> 00:07:12,089
from humans machine readable so my

157
00:07:12,089 --> 00:07:14,029
advice would be to always make sure that

158
00:07:14,029 --> 00:07:16,919
every log that you emits is machine

159
00:07:16,919 --> 00:07:22,139
readable so what's an application log

160
00:07:22,139 --> 00:07:26,039
what should they tell us it tells us

161
00:07:26,039 --> 00:07:27,860
what's going on inside our application

162
00:07:27,860 --> 00:07:30,659
it gives us information to debug an

163
00:07:30,659 --> 00:07:33,689
issue it gives us knowledge of

164
00:07:33,689 --> 00:07:35,879
information cost to methods

165
00:07:35,879 --> 00:07:39,269
eventually goes it tells us when the

166
00:07:39,269 --> 00:07:40,979
user sends the upgrade header and

167
00:07:40,979 --> 00:07:43,079
changes from an HTTP to a WebSocket

168
00:07:43,079 --> 00:07:47,429
connection he tells you what's going on

169
00:07:47,429 --> 00:07:50,299
with your cards

170
00:07:51,020 --> 00:07:52,980
we've got business events

171
00:07:52,980 --> 00:07:57,060
I said media object the employed you can

172
00:07:57,060 --> 00:07:57,860
build on that

173
00:07:57,860 --> 00:08:00,330
every time someone plays a media objects

174
00:08:00,330 --> 00:08:03,090
you get ten cents or a tenth of a cent

175
00:08:03,090 --> 00:08:06,120
it doesn't matter what if you you build

176
00:08:06,120 --> 00:08:08,670
per log in every time someone logs in

177
00:08:08,670 --> 00:08:13,680
you want paying all of these events come

178
00:08:13,680 --> 00:08:18,090
down through your logging system but

179
00:08:18,090 --> 00:08:19,320
what about when it's not just for

180
00:08:19,320 --> 00:08:22,830
accounting what if you are so log how

181
00:08:22,830 --> 00:08:24,840
many people successfully complete to

182
00:08:24,840 --> 00:08:28,710
check out on your e-commerce website and

183
00:08:28,710 --> 00:08:32,010
the average is around fifty to sixty a

184
00:08:32,010 --> 00:08:34,229
second that's not bad

185
00:08:34,229 --> 00:08:36,539
and then you deploy and suddenly it

186
00:08:36,539 --> 00:08:39,690
drops to zero or it drops to five per

187
00:08:39,690 --> 00:08:42,929
second of three per second wouldn't you

188
00:08:42,929 --> 00:08:44,850
want that information that historical

189
00:08:44,850 --> 00:08:46,470
data to say we have a vid about fifty to

190
00:08:46,470 --> 00:08:47,940
sixty and be able to see that

191
00:08:47,940 --> 00:08:51,570
immediately drop like that will show up

192
00:08:51,570 --> 00:08:54,060
on the graph instantly nothing for a

193
00:08:54,060 --> 00:08:56,760
customer to report hey on the one of my

194
00:08:56,760 --> 00:08:58,620
cards worked when I tried three and you

195
00:08:58,620 --> 00:08:59,850
have to try and work out what's going on

196
00:08:59,850 --> 00:09:02,250
seeing on the graph instantly there's

197
00:09:02,250 --> 00:09:04,890
something because has changed is

198
00:09:04,890 --> 00:09:07,670
invaluable

199
00:09:09,240 --> 00:09:14,160
a lights think of an application log as

200
00:09:14,160 --> 00:09:17,430
a story a story the same post every

201
00:09:17,430 --> 00:09:20,580
twist and turn for your core best

202
00:09:20,580 --> 00:09:24,060
through your application when I started

203
00:09:24,060 --> 00:09:26,339
at my last job it was a fairly complex

204
00:09:26,339 --> 00:09:29,300
system and I have no idea what start

205
00:09:29,300 --> 00:09:31,649
fortunately it had a great application

206
00:09:31,649 --> 00:09:35,550
log so what I did was I booted up the

207
00:09:35,550 --> 00:09:38,670
service I made a couple of requests and

208
00:09:38,670 --> 00:09:40,709
I read the log and not just oh when I

209
00:09:40,709 --> 00:09:41,820
got to this end point

210
00:09:41,820 --> 00:09:44,160
this happens when I got to this end

211
00:09:44,160 --> 00:09:46,800
point this happens and I very quickly

212
00:09:46,800 --> 00:09:49,980
worked out that if I wanted to do a

213
00:09:49,980 --> 00:09:51,570
specific thing I had to look in a

214
00:09:51,570 --> 00:09:53,970
certain area of the card big second

215
00:09:53,970 --> 00:09:56,790
search for log messages they helped me

216
00:09:56,790 --> 00:10:00,720
really zero in for what god is zero in

217
00:10:00,720 --> 00:10:07,860
on what God is actually running so that

218
00:10:07,860 --> 00:10:09,209
was a quick introduction to why we need

219
00:10:09,209 --> 00:10:11,700
logging how I should do it but really we

220
00:10:11,700 --> 00:10:13,200
want to get started we want to go back

221
00:10:13,200 --> 00:10:15,000
to work on Monday and build ourselves

222
00:10:15,000 --> 00:10:18,990
and application logs always start with

223
00:10:18,990 --> 00:10:24,800
the four w's when did it happen

224
00:10:24,800 --> 00:10:28,059
who did it happen to

225
00:10:30,700 --> 00:10:33,340
we're messing in this information - it

226
00:10:33,340 --> 00:10:36,010
could be a log file on disk it could be

227
00:10:36,010 --> 00:10:38,860
an email to your CEO if you're in

228
00:10:38,860 --> 00:10:40,900
another safe startup and someone

229
00:10:40,900 --> 00:10:43,690
deactivates their accounts the log

230
00:10:43,690 --> 00:10:44,950
message probably wants to get sent to

231
00:10:44,950 --> 00:10:46,360
your CEO of light they won't see that

232
00:10:46,360 --> 00:10:50,740
information if database goes away but

233
00:10:50,740 --> 00:10:52,390
there's never you probably want to get

234
00:10:52,390 --> 00:10:54,700
notified somehow as well you don't just

235
00:10:54,700 --> 00:10:58,080
want to go into a log file on disk

236
00:10:58,800 --> 00:11:01,390
perhaps most importantly why did it

237
00:11:01,390 --> 00:11:04,420
happen and make sure it's a lot of the

238
00:11:04,420 --> 00:11:07,060
reason why it happened not just involve

239
00:11:07,060 --> 00:11:10,750
data when your log said that something's

240
00:11:10,750 --> 00:11:13,210
happened it's really useful to be able

241
00:11:13,210 --> 00:11:15,580
to say it happens because the user did

242
00:11:15,580 --> 00:11:19,150
this or the user did that one of my

243
00:11:19,150 --> 00:11:21,100
favorite stories to tell here is we were

244
00:11:21,100 --> 00:11:24,460
trying to debug an issue there something

245
00:11:24,460 --> 00:11:27,550
worked sometimes but not others well

246
00:11:27,550 --> 00:11:29,080
it's working sometimes so the code must

247
00:11:29,080 --> 00:11:30,760
be doing it must be a race condition or

248
00:11:30,760 --> 00:11:34,630
something like that and what it actually

249
00:11:34,630 --> 00:11:38,140
ended up being is the court wasn't

250
00:11:38,140 --> 00:11:39,940
sending the message that we expected at

251
00:11:39,940 --> 00:11:43,780
all we had incompatible bindings and the

252
00:11:43,780 --> 00:11:45,940
message just wasn't being sent but the

253
00:11:45,940 --> 00:11:48,400
reason it works sometimes is because

254
00:11:48,400 --> 00:11:49,690
unbeknownst to us

255
00:11:49,690 --> 00:11:51,610
there was a cron job somewhere that run

256
00:11:51,610 --> 00:11:54,280
every minute that holds all the

257
00:11:54,280 --> 00:11:56,400
information just to synchronize there

258
00:11:56,400 --> 00:11:58,960
and when we saw it working it was actual

259
00:11:58,960 --> 00:12:00,370
that we tried to send the message ten

260
00:12:00,370 --> 00:12:05,290
seconds before the minute ticked so we

261
00:12:05,290 --> 00:12:07,870
when we added a reason and regenerating

262
00:12:07,870 --> 00:12:09,490
the user information because I received

263
00:12:09,490 --> 00:12:11,200
a message and regenerating the user

264
00:12:11,200 --> 00:12:14,290
information because the cron job like

265
00:12:14,290 --> 00:12:17,470
that problem went away but honestly we

266
00:12:17,470 --> 00:12:19,570
spent hours and hours and I was on this

267
00:12:19,570 --> 00:12:22,150
when just logging the reason why it

268
00:12:22,150 --> 00:12:25,660
happened would have made it really clear

269
00:12:25,660 --> 00:12:28,050
to us

270
00:12:29,280 --> 00:12:32,160
so getting started real easy to get

271
00:12:32,160 --> 00:12:39,420
started who knows this function yeah all

272
00:12:39,420 --> 00:12:42,450
you need to do take your code this is

273
00:12:42,450 --> 00:12:44,610
Michael's it comes the number of

274
00:12:44,610 --> 00:12:49,050
consonants in a word I dropped in this

275
00:12:49,050 --> 00:12:53,960
ever log function he writes simple lines

276
00:12:53,960 --> 00:12:57,180
to whatever it needs to go baby for

277
00:12:57,180 --> 00:12:59,900
twice as a standard oh no which is fine

278
00:12:59,900 --> 00:13:04,970
for CLI ups Spencer the user neck off

279
00:13:05,190 --> 00:13:08,160
but for webpages this is better because

280
00:13:08,160 --> 00:13:13,590
it will log to the Apache log if you

281
00:13:13,590 --> 00:13:15,540
don't want to score there you can change

282
00:13:15,540 --> 00:13:20,760
it you can serve this a nice setting you

283
00:13:20,760 --> 00:13:23,160
say it right - boy log my app dot log

284
00:13:23,160 --> 00:13:26,400
and every time you call ever underscore

285
00:13:26,400 --> 00:13:34,050
log you get a line in there there's not

286
00:13:34,050 --> 00:13:35,490
many flows for this approach its

287
00:13:35,490 --> 00:13:41,490
built-in but there's plenty of cons is

288
00:13:41,490 --> 00:13:45,030
it really semantically correct my

289
00:13:45,030 --> 00:13:48,390
message was more informational than it

290
00:13:48,390 --> 00:13:51,390
wasn't ever or voters are getting mixed

291
00:13:51,390 --> 00:13:53,490
in with informational messages here it's

292
00:13:53,490 --> 00:13:56,210
just not as powerful as we'd like but

293
00:13:56,210 --> 00:13:58,850
it's still a lot better than the think

294
00:13:58,850 --> 00:14:01,950
so if you can go away and do this start

295
00:14:01,950 --> 00:14:04,220
with this

296
00:14:06,870 --> 00:14:09,150
another option is to use logging for

297
00:14:09,150 --> 00:14:12,750
their work and this next slide used to

298
00:14:12,750 --> 00:14:16,050
be a slide that has K loggers enter log

299
00:14:16,050 --> 00:14:21,140
all of those on there just use mom log

300
00:14:21,140 --> 00:14:23,970
like I used to talk about all the

301
00:14:23,970 --> 00:14:25,230
different ones but it's real and they're

302
00:14:25,230 --> 00:14:26,840
worth it

303
00:14:26,840 --> 00:14:31,800
just use my log it's the best over you

304
00:14:31,800 --> 00:14:36,120
trust composer well joy did not log same

305
00:14:36,120 --> 00:14:39,720
guy and it takes a little bit more work

306
00:14:39,720 --> 00:14:44,160
to get the link first we need to

307
00:14:44,160 --> 00:14:46,110
instantiate a monologue instance and

308
00:14:46,110 --> 00:14:48,990
give it a name then we need to add a

309
00:14:48,990 --> 00:14:52,290
handler handle is what tells monologue

310
00:14:52,290 --> 00:14:55,770
were to send the messages in this case

311
00:14:55,770 --> 00:14:59,880
we're sending it off to a foul in our

312
00:14:59,880 --> 00:15:02,840
temp folder and we want to buy anything

313
00:15:02,840 --> 00:15:06,480
at the debug level of above and we'll

314
00:15:06,480 --> 00:15:08,250
cover the logging levels in a little

315
00:15:08,250 --> 00:15:13,080
while we make a call to log dot info

316
00:15:13,080 --> 00:15:15,890
which adds a log line at the info level

317
00:15:15,890 --> 00:15:22,680
in for his Haven debug so it gets logged

318
00:15:22,680 --> 00:15:24,450
and it looks like that

319
00:15:24,450 --> 00:15:27,180
it's got tanks down it's got your app

320
00:15:27,180 --> 00:15:30,360
identifier it's got the level and your

321
00:15:30,360 --> 00:15:32,850
message and those brackets at the end

322
00:15:32,850 --> 00:15:35,010
are for additional metadata which we

323
00:15:35,010 --> 00:15:37,580
didn't actually use

324
00:15:39,130 --> 00:15:45,820
job done we're now using monologue once

325
00:15:45,820 --> 00:15:46,930
you've done the bootstrapping that

326
00:15:46,930 --> 00:15:51,340
single-core was all it takes but I'd

327
00:15:51,340 --> 00:15:53,470
hate to talk about long vlog I'm missing

328
00:15:53,470 --> 00:15:56,200
one of my favorite parts of it which is

329
00:15:56,200 --> 00:15:59,250
the fingers crossed handler

330
00:15:59,250 --> 00:16:03,460
what is this is in wraps another handler

331
00:16:03,460 --> 00:16:06,460
and it's in control of when the messages

332
00:16:06,460 --> 00:16:09,070
get flushed so the first one so it's a

333
00:16:09,070 --> 00:16:11,620
little bit hard to explain but we'll go

334
00:16:11,620 --> 00:16:14,590
through an example here we create stream

335
00:16:14,590 --> 00:16:17,560
handler that says I want debug and above

336
00:16:17,560 --> 00:16:19,870
so I want everything and I want to write

337
00:16:19,870 --> 00:16:22,300
it to a foul and then you've got this

338
00:16:22,300 --> 00:16:24,510
fingers crossed handle as it says

339
00:16:24,510 --> 00:16:27,640
Ashland wouldn't take control of that by

340
00:16:27,640 --> 00:16:31,270
stream handle you've got but I only want

341
00:16:31,270 --> 00:16:32,710
to log things that ever

342
00:16:32,710 --> 00:16:35,560
oh but I don't want any debug or notice

343
00:16:35,560 --> 00:16:38,130
or anything like that

344
00:16:39,270 --> 00:16:41,920
we've before everything up including

345
00:16:41,920 --> 00:16:44,730
debug messages but we only logged them

346
00:16:44,730 --> 00:16:49,660
if another level is triggered I'm like I

347
00:16:49,660 --> 00:16:51,820
said it gets confusing so let's just

348
00:16:51,820 --> 00:16:54,400
work through an example in this

349
00:16:54,400 --> 00:16:58,330
situation we say we won't ever under

350
00:16:58,330 --> 00:17:03,070
both what we have an info and I log file

351
00:17:03,070 --> 00:17:05,980
looks something like this because it

352
00:17:05,980 --> 00:17:09,460
wasn't high enough to trigger but wife

353
00:17:09,460 --> 00:17:10,329
we trigger

354
00:17:10,329 --> 00:17:12,880
I never so something bad happens

355
00:17:12,880 --> 00:17:16,329
immediately after the info if we were

356
00:17:16,329 --> 00:17:18,520
just using the stream handler we could

357
00:17:18,520 --> 00:17:21,369
say okay I want everyone to both you

358
00:17:21,369 --> 00:17:22,660
don't need even need to worry about

359
00:17:22,660 --> 00:17:24,339
fingers crossed because you will want to

360
00:17:24,339 --> 00:17:27,640
get Evers and above but what the fingers

361
00:17:27,640 --> 00:17:30,250
crossed handler will do is say okay I'm

362
00:17:30,250 --> 00:17:33,580
set to ever there has been never and it

363
00:17:33,580 --> 00:17:36,390
will log everything up until that point

364
00:17:36,390 --> 00:17:38,830
that's why score fingers crossed because

365
00:17:38,830 --> 00:17:40,390
you're hoping that nothing's going wrong

366
00:17:40,390 --> 00:17:43,020
and if nothing does your logs are empty

367
00:17:43,020 --> 00:17:45,220
but the instant that something goes

368
00:17:45,220 --> 00:17:46,450
wrong you have all of that debug

369
00:17:46,450 --> 00:17:47,920
information you have all of that info

370
00:17:47,920 --> 00:17:50,000
level

371
00:17:50,000 --> 00:17:52,070
and it helps like context for what's

372
00:17:52,070 --> 00:17:57,740
actually gone on monologue house

373
00:17:57,740 --> 00:18:01,070
slightly mud floors that ever log it's

374
00:18:01,070 --> 00:18:03,230
an object so we can inject it into

375
00:18:03,230 --> 00:18:06,680
icord if we want to dissapoint small

376
00:18:06,680 --> 00:18:08,690
tapu log writers so I showed you writing

377
00:18:08,690 --> 00:18:13,010
- foul extent - a HTTP endpoint emitted

378
00:18:13,010 --> 00:18:16,310
- syslog send an email do whatever you

379
00:18:16,310 --> 00:18:20,720
want and it has log level support so you

380
00:18:20,720 --> 00:18:23,800
say this is information or visitor never

381
00:18:23,800 --> 00:18:27,070
again we'll get to that in just a second

382
00:18:27,070 --> 00:18:30,740
the only con for me is the instantiating

383
00:18:30,740 --> 00:18:32,840
an instance can be quite complicated

384
00:18:32,840 --> 00:18:35,240
passing it in to all of your cards can

385
00:18:35,240 --> 00:18:37,760
be quite complicated so if you've got a

386
00:18:37,760 --> 00:18:40,850
huge legacy project and it'll be real

387
00:18:40,850 --> 00:18:43,190
difficult to use this you might be

388
00:18:43,190 --> 00:18:45,590
better off with ever log for everyone

389
00:18:45,590 --> 00:18:51,920
else just use monologue and I mentioned

390
00:18:51,920 --> 00:18:53,630
the other levels and you can use

391
00:18:53,630 --> 00:18:58,220
whatever you want any PHP flash

392
00:18:58,220 --> 00:19:03,790
JavaScript developers here not so many

393
00:19:03,790 --> 00:19:09,410
use NPM NPM has its own set of logging

394
00:19:09,410 --> 00:19:11,600
levels completely different to anything

395
00:19:11,600 --> 00:19:14,480
else in the actual has one lower than

396
00:19:14,480 --> 00:19:19,370
debug called silly and almost the people

397
00:19:19,370 --> 00:19:21,410
use it so much and he just spams and

398
00:19:21,410 --> 00:19:23,960
spawns and spammers if you do C++ you

399
00:19:23,960 --> 00:19:26,030
may be used to the trace level logging

400
00:19:26,030 --> 00:19:30,980
things like that everyone picks and

401
00:19:30,980 --> 00:19:33,320
chooses their world but they shouldn't

402
00:19:33,320 --> 00:19:37,060
because there is no mercy for it

403
00:19:38,299 --> 00:19:42,200
we should just use syslog there were the

404
00:19:42,200 --> 00:19:45,469
flavors here to express your intent with

405
00:19:45,469 --> 00:19:48,320
reasonable value levity starting all the

406
00:19:48,320 --> 00:19:50,979
way at the bottom and debug info notice

407
00:19:50,979 --> 00:19:55,539
warning ever I'm doing this from memory

408
00:19:55,749 --> 00:20:04,399
ever critical alert and emergency yeah

409
00:20:04,399 --> 00:20:06,889
that wasn't bad and most of yours will

410
00:20:06,889 --> 00:20:09,259
be someone in the middle somewhere

411
00:20:09,259 --> 00:20:13,159
between informational and notice up to

412
00:20:13,159 --> 00:20:16,369
ever and critical you can imagine you

413
00:20:16,369 --> 00:20:17,690
can't connect to your database that's

414
00:20:17,690 --> 00:20:21,409
critical ever use the signs up that

415
00:20:21,409 --> 00:20:26,119
might be a notice alerts and emergency

416
00:20:26,119 --> 00:20:28,190
or really reserved for the server

417
00:20:28,190 --> 00:20:31,070
administrators for example emergency is

418
00:20:31,070 --> 00:20:35,329
the server is physically on fire so when

419
00:20:35,329 --> 00:20:36,559
you say well why can't I use the

420
00:20:36,559 --> 00:20:37,909
emergency my applications it's an

421
00:20:37,909 --> 00:20:40,159
emergency I can't get some database it's

422
00:20:40,159 --> 00:20:42,440
not that's a critical Fault in these

423
00:20:42,440 --> 00:20:44,269
fixing it might even be in the lower if

424
00:20:44,269 --> 00:20:46,459
you can push it but it's definitely not

425
00:20:46,459 --> 00:20:52,759
an emergency and monologue supports the

426
00:20:52,759 --> 00:20:56,389
syslog levels and coming up on two years

427
00:20:56,389 --> 00:21:00,049
ago now I think this was actually a

428
00:21:00,049 --> 00:21:02,539
topic of discussion for the PHP Fink and

429
00:21:02,539 --> 00:21:07,549
they've ratified this as psi 3 so if you

430
00:21:07,549 --> 00:21:09,409
like fallen peer sighs this is in the

431
00:21:09,409 --> 00:21:11,779
that provides a logging interface for

432
00:21:11,779 --> 00:21:14,419
you to work to and it contains all of

433
00:21:14,419 --> 00:21:16,749
these levels

434
00:21:18,340 --> 00:21:20,500
all you need to do is go through your

435
00:21:20,500 --> 00:21:22,390
application and decide what level each

436
00:21:22,390 --> 00:21:24,460
log message should be at because you

437
00:21:24,460 --> 00:21:26,260
don't want too many in the so you'll

438
00:21:26,260 --> 00:21:29,740
just never read them but think about it

439
00:21:29,740 --> 00:21:32,470
is it's this informational is it

440
00:21:32,470 --> 00:21:34,480
something good that should be work off

441
00:21:34,480 --> 00:21:38,710
the cenotes is it a warning if I don't

442
00:21:38,710 --> 00:21:40,419
do something about this is it going to

443
00:21:40,419 --> 00:21:43,659
transition into an error or is it

444
00:21:43,659 --> 00:21:47,130
critical can I not talk to my database

445
00:21:54,130 --> 00:21:56,320
so we've been for I call BS we've added

446
00:21:56,320 --> 00:21:58,270
what's on the vlogging we need someone

447
00:21:58,270 --> 00:22:00,130
to send it it's writing to a file on

448
00:22:00,130 --> 00:22:03,460
disk is good but no one ever reads it

449
00:22:03,460 --> 00:22:06,190
I mean you ship it to production you

450
00:22:06,190 --> 00:22:07,480
might even have access to the server to

451
00:22:07,480 --> 00:22:11,740
see it and this for me is the business

452
00:22:11,740 --> 00:22:15,400
amazing imagine this everything is on

453
00:22:15,400 --> 00:22:16,000
fire

454
00:22:16,000 --> 00:22:20,020
servers buildings everything would you

455
00:22:20,020 --> 00:22:22,410
want to go into the office

456
00:22:22,410 --> 00:22:25,540
log into each server one by one of them

457
00:22:25,540 --> 00:22:28,630
tell - f on each log file ombré just

458
00:22:28,630 --> 00:22:30,010
trying to guess which server you need to

459
00:22:30,010 --> 00:22:32,650
look out which application wouldn't it

460
00:22:32,650 --> 00:22:34,120
be great if there was just one place

461
00:22:34,120 --> 00:22:37,260
that you had to log into and look out

462
00:22:37,260 --> 00:22:40,650
and that's what the Oaks that gives us

463
00:22:40,650 --> 00:22:43,870
ELQ stands for elasticsearch logs -

464
00:22:43,870 --> 00:22:47,980
monkey barber but really if we think

465
00:22:47,980 --> 00:22:50,440
about the Audrey in which they run it's

466
00:22:50,440 --> 00:22:52,900
like the leg stack but that doesn't have

467
00:22:52,900 --> 00:22:54,550
the same ring to it I'd see why they

468
00:22:54,550 --> 00:22:56,400
went for elk

469
00:22:56,400 --> 00:23:01,330
he starts with logs - logs - sits at the

470
00:23:01,330 --> 00:23:04,210
beginning and we can think of it as a

471
00:23:04,210 --> 00:23:07,660
date bus it has a range of inputs some

472
00:23:07,660 --> 00:23:12,160
middle Worth and some outputs when I say

473
00:23:12,160 --> 00:23:14,500
it has some inputs it has a lot of

474
00:23:14,500 --> 00:23:19,870
inputs it can be a path to a file it can

475
00:23:19,870 --> 00:23:22,000
listen on those specific ports it can

476
00:23:22,000 --> 00:23:23,080
pull dates for the next three if you

477
00:23:23,080 --> 00:23:27,100
want there were about 50 inputs some

478
00:23:27,100 --> 00:23:31,510
more popular than others but they're all

479
00:23:31,510 --> 00:23:34,450
available for you to use personally I

480
00:23:34,450 --> 00:23:39,400
tend to use foul the most I also tend to

481
00:23:39,400 --> 00:23:42,970
use standard in because who doesn't like

482
00:23:42,970 --> 00:23:48,430
typing data into a process and also s3

483
00:23:48,430 --> 00:23:51,070
actually because we archive a lot of our

484
00:23:51,070 --> 00:23:53,140
log data because we don't want to see it

485
00:23:53,140 --> 00:23:55,600
all the time but sometimes it is useful

486
00:23:55,600 --> 00:23:59,440
to be employed that try and work out why

487
00:23:59,440 --> 00:24:00,490
something happened with a little bit

488
00:24:00,490 --> 00:24:02,820
more information

489
00:24:03,140 --> 00:24:06,230
so this is this is just the inputs this

490
00:24:06,230 --> 00:24:09,470
is how you get your log data into the

491
00:24:09,470 --> 00:24:14,150
log stash once it's in there you really

492
00:24:14,150 --> 00:24:16,010
into the coil of log stash which is its

493
00:24:16,010 --> 00:24:19,970
filter system if you don't need this you

494
00:24:19,970 --> 00:24:21,910
can use a more lightweight option

495
00:24:21,910 --> 00:24:24,500
because locks - is pretty heavy press

496
00:24:24,500 --> 00:24:26,510
recently Java needs a lot of love to

497
00:24:26,510 --> 00:24:27,230
keep going

498
00:24:27,230 --> 00:24:29,450
and through our lights of options such

499
00:24:29,450 --> 00:24:32,530
as beats but they don't have any of this

500
00:24:32,530 --> 00:24:35,210
filter logic at least not to the same

501
00:24:35,210 --> 00:24:39,470
extent and the filter looks something

502
00:24:39,470 --> 00:24:40,160
like this

503
00:24:40,160 --> 00:24:42,020
and this is the easiest one this is the

504
00:24:42,020 --> 00:24:45,380
JSON filter it expects to receive a

505
00:24:45,380 --> 00:24:48,290
valid JSON document it extracts each of

506
00:24:48,290 --> 00:24:50,059
you from it and you can add or remove

507
00:24:50,059 --> 00:24:51,970
fields as you want

508
00:24:51,970 --> 00:24:54,580
you said new log sensitive information

509
00:24:54,580 --> 00:24:56,929
but actually that shouldn't end up

510
00:24:56,929 --> 00:24:59,929
somewhere searchable by everyone use log

511
00:24:59,929 --> 00:25:01,340
stash to remove that field before he

512
00:25:01,340 --> 00:25:04,520
even gets to a lasting search and this

513
00:25:04,520 --> 00:25:05,929
is great if your application is already

514
00:25:05,929 --> 00:25:09,620
outputting JSON formatted messages model

515
00:25:09,620 --> 00:25:11,450
log can do this it's got a JSON port

516
00:25:11,450 --> 00:25:19,340
matter you can use key value logs which

517
00:25:19,340 --> 00:25:24,200
is a log format format they're supported

518
00:25:24,200 --> 00:25:26,390
and you can manipulate all the fields

519
00:25:26,390 --> 00:25:28,400
and do things like set defaults here as

520
00:25:28,400 --> 00:25:34,100
well but really the power of log slashes

521
00:25:34,100 --> 00:25:39,530
filters comes here it's called the block

522
00:25:39,530 --> 00:25:42,830
filter and this is a line from a OpenSSH

523
00:25:42,830 --> 00:25:45,919
someone's logged into a machine and the

524
00:25:45,919 --> 00:25:47,720
Glock filter laces tokenize arbitrary

525
00:25:47,720 --> 00:25:51,950
text an extract meaning from it here I'm

526
00:25:51,950 --> 00:25:54,470
interested that a public key was used to

527
00:25:54,470 --> 00:25:58,160
log in as root from an IV from this

528
00:25:58,160 --> 00:26:02,090
specific IP address and sshd was running

529
00:26:02,090 --> 00:26:04,340
on port 22

530
00:26:04,340 --> 00:26:06,860
to post this and get it in something

531
00:26:06,860 --> 00:26:09,200
that's machine readable you use

532
00:26:09,200 --> 00:26:12,260
something like this and it can look this

533
00:26:12,260 --> 00:26:14,510
discourage start with but it's really

534
00:26:14,510 --> 00:26:17,169
not that bad because half of it is

535
00:26:17,169 --> 00:26:20,539
literal text sort of things like except

536
00:26:20,539 --> 00:26:23,960
it will match I accept it literally and

537
00:26:23,960 --> 00:26:25,850
then we say we want to match the words

538
00:26:25,850 --> 00:26:28,279
and I'm going to capture that as off on

539
00:26:28,279 --> 00:26:30,590
the squad methods we want to match a

540
00:26:30,590 --> 00:26:33,320
user you want to match an IP and once

541
00:26:33,320 --> 00:26:35,809
matched an integer and then the other

542
00:26:35,809 --> 00:26:37,039
end this will pump out a JSON document

543
00:26:37,039 --> 00:26:39,980
that has off methods username source IP

544
00:26:39,980 --> 00:26:43,610
and source points and these are just

545
00:26:43,610 --> 00:26:46,370
ninja reg X's it comes with a ton of

546
00:26:46,370 --> 00:26:47,870
them built-in you can make your own if

547
00:26:47,870 --> 00:26:52,159
you want but uses words user IP an

548
00:26:52,159 --> 00:26:56,240
integer they're relatively simple making

549
00:26:56,240 --> 00:27:01,070
based versions there's a fantastic tool

550
00:27:01,070 --> 00:27:02,750
called drop debug to help you put these

551
00:27:02,750 --> 00:27:06,890
together you put in your structured text

552
00:27:06,890 --> 00:27:09,200
you put in your Glock filter and it

553
00:27:09,200 --> 00:27:10,460
highlights in real time as you make

554
00:27:10,460 --> 00:27:13,669
changes it's wonderful if anyone wants

555
00:27:13,669 --> 00:27:15,440
to try writing these I wouldn't try and

556
00:27:15,440 --> 00:27:18,770
do it without this and once we've got

557
00:27:18,770 --> 00:27:21,830
that there - we've manipulated as we

558
00:27:21,830 --> 00:27:23,480
want we've got it in a structure for

559
00:27:23,480 --> 00:27:26,620
that we need to send it somewhat and

560
00:27:26,620 --> 00:27:30,740
again there's dozens of options but most

561
00:27:30,740 --> 00:27:34,429
people don't use well any but one velar

562
00:27:34,429 --> 00:27:38,620
most people send it to a vast exert

563
00:27:39,399 --> 00:27:42,830
every filter applies to every input and

564
00:27:42,830 --> 00:27:45,649
he sent to every output we can do some

565
00:27:45,649 --> 00:27:47,840
clever things with tagging but if you

566
00:27:47,840 --> 00:27:49,549
want different combinations of filters

567
00:27:49,549 --> 00:27:52,580
now puts the easiest way to do is just

568
00:27:52,580 --> 00:27:55,870
to them set with logstash instance

569
00:27:58,029 --> 00:28:02,870
logstash can be pretty slow right well

570
00:28:02,870 --> 00:28:05,600
sorry it's actually really fast but when

571
00:28:05,600 --> 00:28:06,950
you're throwing thousands and thousands

572
00:28:06,950 --> 00:28:09,110
and thousands of blog likes a second at

573
00:28:09,110 --> 00:28:10,820
it and it's having to organize them and

574
00:28:10,820 --> 00:28:14,330
generation of data you can have a hard

575
00:28:14,330 --> 00:28:18,260
time users few clogged filters as you

576
00:28:18,260 --> 00:28:20,179
can make sure that your applications

577
00:28:20,179 --> 00:28:25,010
image structured logs just minimize the

578
00:28:25,010 --> 00:28:28,389
amount of work the log has to do

579
00:28:32,630 --> 00:28:34,610
I said extend it anyway there's dozens

580
00:28:34,610 --> 00:28:36,860
of options but everyone who's is elastic

581
00:28:36,860 --> 00:28:40,220
search and elastic search is a document

582
00:28:40,220 --> 00:28:41,750
based search engine it's got great

583
00:28:41,750 --> 00:28:44,720
full-text search capabilities so ideal

584
00:28:44,720 --> 00:28:47,780
for log messages it's greater

585
00:28:47,780 --> 00:28:49,970
aggregations as well you must do things

586
00:28:49,970 --> 00:28:53,690
like build histograms and there's not

587
00:28:53,690 --> 00:28:55,190
actually much more to say about it other

588
00:28:55,190 --> 00:28:57,100
than you have to install it and run it

589
00:28:57,100 --> 00:28:59,570
there's a few performance tweaks you can

590
00:28:59,570 --> 00:29:02,300
make if you hit issues but most people

591
00:29:02,300 --> 00:29:03,770
don't hit those issues at least not

592
00:29:03,770 --> 00:29:06,710
initially and we'll cover those at the

593
00:29:06,710 --> 00:29:09,200
end where when we discuss the common

594
00:29:09,200 --> 00:29:12,770
pitfalls it's not much more to say about

595
00:29:12,770 --> 00:29:14,570
the lasting search its doors documents

596
00:29:14,570 --> 00:29:18,140
for you to search later the family

597
00:29:18,140 --> 00:29:21,650
Kabbalah Kabalah is your search

598
00:29:21,650 --> 00:29:24,470
interface it's a quick way to query

599
00:29:24,470 --> 00:29:27,790
lasting search to build dashboards

600
00:29:27,790 --> 00:29:31,340
visualizations it's actually kind of

601
00:29:31,340 --> 00:29:34,130
hard to explain so I figured the easiest

602
00:29:34,130 --> 00:29:36,730
way to explain it's just sure you kibana

603
00:29:36,730 --> 00:29:38,900
this is where everything crashes and

604
00:29:38,900 --> 00:29:41,320
burns challah

605
00:29:54,480 --> 00:30:01,090
look see that this is compartment all of

606
00:30:01,090 --> 00:30:05,529
this is fake there - that I imported you

607
00:30:05,529 --> 00:30:07,000
can click into it and you can see that

608
00:30:07,000 --> 00:30:11,710
the Jason's being tokenized I got many

609
00:30:11,710 --> 00:30:13,900
requests to billing what we can't see

610
00:30:13,900 --> 00:30:17,220
vaginally let's make that bigger

611
00:30:20,590 --> 00:30:23,590
I made a request to billing came from

612
00:30:23,590 --> 00:30:25,840
the IP address it was a two hundred this

613
00:30:25,840 --> 00:30:32,980
was the original message and we can do

614
00:30:32,980 --> 00:30:34,240
all kinds of things in here

615
00:30:34,240 --> 00:30:38,200
oh so that's HTTP logs I also have a lot

616
00:30:38,200 --> 00:30:42,340
of logs for business events so I also

617
00:30:42,340 --> 00:30:43,990
imported a set of bank accounts into

618
00:30:43,990 --> 00:30:47,860
here so I want to see the bank accounts

619
00:30:47,860 --> 00:30:54,639
for or mails never turned it and I see

620
00:30:54,639 --> 00:30:57,039
their balance their address by once to

621
00:30:57,039 --> 00:31:01,690
do more I won't say Shore mails their

622
00:31:01,690 --> 00:31:05,529
balance is written 20 thousands and

623
00:31:05,529 --> 00:31:11,330
their balance is less than 35,000

624
00:31:11,330 --> 00:31:12,830
and these are questions you can ask

625
00:31:12,830 --> 00:31:15,499
after the fact you don't have to think

626
00:31:15,499 --> 00:31:17,029
about these in advance and specifically

627
00:31:17,029 --> 00:31:18,980
log this information just throw all your

628
00:31:18,980 --> 00:31:21,470
dad's are into a rustic search in Caban

629
00:31:21,470 --> 00:31:26,720
will let you search and see it so here

630
00:31:26,720 --> 00:31:33,340
we are good to see the mr. folks urns

631
00:31:33,340 --> 00:31:36,470
where's it gone twenty one thousand one

632
00:31:36,470 --> 00:31:38,090
hundred and fifty three which is between

633
00:31:38,090 --> 00:31:40,249
our search criteria of twenty thousand

634
00:31:40,249 --> 00:31:46,700
and thirty five now imagine this for SSH

635
00:31:46,700 --> 00:31:49,369
logins you won't see when people looked

636
00:31:49,369 --> 00:31:52,009
in this room when Michael logged in when

637
00:31:52,009 --> 00:31:53,690
when logged in when people logged in

638
00:31:53,690 --> 00:31:56,869
using password all of that is no your

639
00:31:56,869 --> 00:32:00,249
fingertips you can search and find that

640
00:32:00,249 --> 00:32:02,419
but like I said sometimes you don't want

641
00:32:02,419 --> 00:32:03,889
to mean ten thousand log messages you

642
00:32:03,889 --> 00:32:09,769
just want to see a graph DePalma how is

643
00:32:09,769 --> 00:32:12,169
excellent visualization tools as well so

644
00:32:12,169 --> 00:32:17,090
going back to our so I'm going back to

645
00:32:17,090 --> 00:32:19,879
our HTTP requests I'm gonna build a pie

646
00:32:19,879 --> 00:32:28,309
chart and I'm going to say I want to

647
00:32:28,309 --> 00:32:31,509
search by endpoint

648
00:32:33,590 --> 00:32:37,050
and there it is we can see at a glance

649
00:32:37,050 --> 00:32:41,250
how many when to use a times actually

650
00:32:41,250 --> 00:32:42,660
thus not enough for me I want to add

651
00:32:42,660 --> 00:32:48,240
another dimension to it so I want to do

652
00:32:48,240 --> 00:32:57,510
it by this HTTP code and now for each

653
00:32:57,510 --> 00:33:00,960
end point we can see how many to

654
00:33:00,960 --> 00:33:03,870
hundreds how many five hundreds how many

655
00:33:03,870 --> 00:33:06,439
four hundreds

656
00:33:08,450 --> 00:33:10,970
but thus useful a light seen by HTTP

657
00:33:10,970 --> 00:33:12,649
Cod's but actually I don't like the

658
00:33:12,649 --> 00:33:16,460
format is show them so instead I want

659
00:33:16,460 --> 00:33:21,950
want pie charts PO ven points on split

660
00:33:21,950 --> 00:33:26,509
the charts you can ignore do every

661
00:33:26,509 --> 00:33:31,970
message and this is by endpoints and

662
00:33:31,970 --> 00:33:35,289
they will just drag up top

663
00:33:36,820 --> 00:33:41,920
and get another one and now I get five

664
00:33:41,920 --> 00:33:45,850
choice or broken down by HTTP code so

665
00:33:45,850 --> 00:33:48,250
this one's billing right and look how

666
00:33:48,250 --> 00:33:55,030
easy that was that was 30 seconds we can

667
00:33:55,030 --> 00:34:00,700
do by choice we can said I exit our

668
00:34:00,700 --> 00:34:05,230
y-axis is the average balance of an

669
00:34:05,230 --> 00:34:10,600
account and our x-axis is the states

670
00:34:10,600 --> 00:34:16,090
that the person lives in and by default

671
00:34:16,090 --> 00:34:19,600
there were five and that's 51 so we get

672
00:34:19,600 --> 00:34:24,460
all of them there we are we can see that

673
00:34:24,460 --> 00:34:26,260
seal Colorado

674
00:34:26,260 --> 00:34:29,080
it's that has the highest average

675
00:34:29,080 --> 00:34:32,230
balance these insights that I'm pulling

676
00:34:32,230 --> 00:34:33,668
out just from today so they were

677
00:34:33,668 --> 00:34:36,520
emitting from our application logs and

678
00:34:36,520 --> 00:34:41,610
it's not just for application logs if I

679
00:34:41,610 --> 00:34:45,750
change this change index Shakespeare I

680
00:34:45,750 --> 00:34:49,030
actually ingested the entire contents of

681
00:34:49,030 --> 00:34:54,550
Henry the fourth every line spoken and I

682
00:34:54,550 --> 00:34:57,540
can search for

683
00:35:02,110 --> 00:35:05,050
every line the Gloucester says just like

684
00:35:05,050 --> 00:35:06,570
that

685
00:35:06,570 --> 00:35:09,580
and sandwich with visualizations we want

686
00:35:09,580 --> 00:35:13,140
to build a attack load

687
00:35:21,590 --> 00:35:24,050
what's Dube speaker let's find out who

688
00:35:24,050 --> 00:35:27,650
has the most lines thinking Henry the

689
00:35:27,650 --> 00:35:33,680
fourth no it's Gloucester Hamlet has a

690
00:35:33,680 --> 00:35:37,550
lot Kevin the fifth has a few Othello

691
00:35:37,550 --> 00:35:40,670
has a few imagine importing commit

692
00:35:40,670 --> 00:35:43,400
histories and things into this tool you

693
00:35:43,400 --> 00:35:47,810
can do all kinds of things and you can

694
00:35:47,810 --> 00:35:50,660
save these visualizations and build up

695
00:35:50,660 --> 00:35:55,730
dashboards you can have 3 4 5 15 20

696
00:35:55,730 --> 00:35:59,150
graphs the poor match up they're all

697
00:35:59,150 --> 00:36:01,910
showing the information and at the top

698
00:36:01,910 --> 00:36:04,670
you can't see it at the MINIX I made it

699
00:36:04,670 --> 00:36:10,070
too big and to the right

700
00:36:10,070 --> 00:36:13,430
actually fine no to the right it gives

701
00:36:13,430 --> 00:36:15,950
you a time for him you can say last 24

702
00:36:15,950 --> 00:36:18,710
hours got 15 minutes there's time shifts

703
00:36:18,710 --> 00:36:21,770
your graphs will up there so you can

704
00:36:21,770 --> 00:36:23,980
just leave them on the screen and

705
00:36:23,980 --> 00:36:27,140
monitor if you expect something to be 0

706
00:36:27,140 --> 00:36:28,490
all the time and some of the changes to

707
00:36:28,490 --> 00:36:30,470
what something's happened do you want to

708
00:36:30,470 --> 00:36:32,709
know about

709
00:36:44,550 --> 00:36:46,750
these are my screenshots in case it

710
00:36:46,750 --> 00:36:54,430
didn't work after the optimist about 15

711
00:36:54,430 --> 00:36:59,040
minutes yes

712
00:37:03,210 --> 00:37:07,240
well you can put your bonnet on any

713
00:37:07,240 --> 00:37:09,130
screen you want people do have to be

714
00:37:09,130 --> 00:37:13,569
able to get to it all of the data is

715
00:37:13,569 --> 00:37:14,950
stored in elasticsearch and that has an

716
00:37:14,950 --> 00:37:17,470
API so you can use other tools like the

717
00:37:17,470 --> 00:37:21,040
father as well with it Kabam is just the

718
00:37:21,040 --> 00:37:25,390
graph of engineer points and subsection

719
00:37:25,390 --> 00:37:30,069
5 blog management some of you may have

720
00:37:30,069 --> 00:37:34,420
heard of Asimov's laws of robotics the

721
00:37:34,420 --> 00:37:38,559
robot may not injure a human being flu

722
00:37:38,559 --> 00:37:40,839
no sorry may not injure a human being or

723
00:37:40,839 --> 00:37:43,390
through inaction allow a human being to

724
00:37:43,390 --> 00:37:49,599
come to harm I have a similar one for

725
00:37:49,599 --> 00:37:53,109
application logs an application log may

726
00:37:53,109 --> 00:37:54,460
not injure in applications performance

727
00:37:54,460 --> 00:37:58,690
or readability logs are supposed to help

728
00:37:58,690 --> 00:38:00,490
us not make it difficult to work on the

729
00:38:00,490 --> 00:38:03,369
core base I remember once I was working

730
00:38:03,369 --> 00:38:05,940
on the project when we started seeing

731
00:38:05,940 --> 00:38:08,920
things using MongoDB actually I mean we

732
00:38:08,920 --> 00:38:09,910
weren't getting the performance we

733
00:38:09,910 --> 00:38:13,210
wanted so we started to log the time it

734
00:38:13,210 --> 00:38:16,630
took each query to execute and we logged

735
00:38:16,630 --> 00:38:19,900
that to a my sequel database and it

736
00:38:19,900 --> 00:38:21,730
started out great for such as make

737
00:38:21,730 --> 00:38:23,589
optimizations but then all the time

738
00:38:23,589 --> 00:38:25,900
page responses started to get slower and

739
00:38:25,900 --> 00:38:30,280
slower and slower it turns out there was

740
00:38:30,280 --> 00:38:32,680
taking boy time to log the time taken

741
00:38:32,680 --> 00:38:34,900
for the query to my sequel then he

742
00:38:34,900 --> 00:38:38,619
watched him from the initial query that

743
00:38:38,619 --> 00:38:42,460
was a fun one and every I'm working on

744
00:38:42,460 --> 00:38:44,380
the project warfare every line of code

745
00:38:44,380 --> 00:38:46,540
there were two or three D log messages

746
00:38:46,540 --> 00:38:48,490
and they just made it a nightmare to

747
00:38:48,490 --> 00:38:51,430
work out what was actually going on logs

748
00:38:51,430 --> 00:38:55,869
are supposed to help not hinder so they

749
00:38:55,869 --> 00:38:57,579
can't enjoy an applications performance

750
00:38:57,579 --> 00:38:59,859
or readability those are the only two

751
00:38:59,859 --> 00:39:02,130
rules

752
00:39:02,720 --> 00:39:05,370
as your application grows so does the

753
00:39:05,370 --> 00:39:08,400
amount of data it's easy to get started

754
00:39:08,400 --> 00:39:11,310
it's hard it's scale that but you need

755
00:39:11,310 --> 00:39:12,570
to make sure you can handle bursts of

756
00:39:12,570 --> 00:39:15,690
data because when do you get the most

757
00:39:15,690 --> 00:39:21,270
data when something goes wrong and when

758
00:39:21,270 --> 00:39:25,020
it logs the most useful when something

759
00:39:25,020 --> 00:39:27,480
goes wrong so if something goes wrong in

760
00:39:27,480 --> 00:39:29,070
your logging system blows open you don't

761
00:39:29,070 --> 00:39:31,710
have any logs what use is that you don't

762
00:39:31,710 --> 00:39:32,820
care about the logs when everything's

763
00:39:32,820 --> 00:39:40,650
working disk space this is a seems like

764
00:39:40,650 --> 00:39:43,260
simple one but it's the number one cause

765
00:39:43,260 --> 00:39:47,400
of application failure you log in to

766
00:39:47,400 --> 00:39:54,510
disk even out of dispersed alluded to

767
00:39:54,510 --> 00:39:57,110
this one earlier with the elastic search

768
00:39:57,110 --> 00:39:59,520
elastic social saw his date with what's

769
00:39:59,520 --> 00:40:01,650
called an index mr. norman where he dead

770
00:40:01,650 --> 00:40:05,430
showed it but imagine that you've got

771
00:40:05,430 --> 00:40:08,190
one application that sense of ton of

772
00:40:08,190 --> 00:40:10,590
data that isn't being very important on

773
00:40:10,590 --> 00:40:12,060
an application that doesn't mean the

774
00:40:12,060 --> 00:40:13,260
same image but when it does he really

775
00:40:13,260 --> 00:40:16,440
have to listen because if I sing search

776
00:40:16,440 --> 00:40:20,490
is a circularbuffer to start and as you

777
00:40:20,490 --> 00:40:22,500
get more data the oldest debt is erased

778
00:40:22,500 --> 00:40:27,270
it's often written actually I'd often

779
00:40:27,270 --> 00:40:28,530
asked by default I think that's

780
00:40:28,530 --> 00:40:31,640
something that we always just configured

781
00:40:31,640 --> 00:40:33,810
but if you do have a high volume feed

782
00:40:33,810 --> 00:40:35,640
tagged it with something send it to a

783
00:40:35,640 --> 00:40:37,290
different index or I tagged your

784
00:40:37,290 --> 00:40:39,630
important ones you can set custom

785
00:40:39,630 --> 00:40:41,940
retention policies you can say this

786
00:40:41,940 --> 00:40:43,680
high-volume feed I actually want to keep

787
00:40:43,680 --> 00:40:45,690
three days worth of that but this really

788
00:40:45,690 --> 00:40:47,280
important one I want to keep twelve

789
00:40:47,280 --> 00:40:51,600
months by working out what logs are

790
00:40:51,600 --> 00:40:53,570
important to you in taking the research

791
00:40:53,570 --> 00:40:55,650
you can make sure that you keep the

792
00:40:55,650 --> 00:40:58,490
information that you need

793
00:41:00,130 --> 00:41:02,499
she was relevant at least once then to

794
00:41:02,499 --> 00:41:05,499
you if your log stash nodes have

795
00:41:05,499 --> 00:41:09,640
overworked don't send it debug logs this

796
00:41:09,640 --> 00:41:11,289
might involve writing two set of logs to

797
00:41:11,289 --> 00:41:13,479
this one for debug and one for ever so

798
00:41:13,479 --> 00:41:15,249
you can always go back and look on disk

799
00:41:15,249 --> 00:41:18,759
if you need to but if disk space is a

800
00:41:18,759 --> 00:41:21,699
premium ship them then let log stash

801
00:41:21,699 --> 00:41:24,880
trim them out it's a trade-off that only

802
00:41:24,880 --> 00:41:30,969
you can decide on every feature the cost

803
00:41:30,969 --> 00:41:33,339
of production must have a set of grog

804
00:41:33,339 --> 00:41:35,140
patterns if necessary

805
00:41:35,140 --> 00:41:36,729
ideally were just limiting Jason

806
00:41:36,729 --> 00:41:39,489
anywhere it's got to have a dashboard

807
00:41:39,489 --> 00:41:41,829
that we can look at work out whether

808
00:41:41,829 --> 00:41:44,739
it's behaving as intended it's got to

809
00:41:44,739 --> 00:41:49,059
have a set of alerts when devs are

810
00:41:49,059 --> 00:41:51,069
involved in thinking about how something

811
00:41:51,069 --> 00:41:53,039
will be monitored at development time

812
00:41:53,039 --> 00:41:55,660
the instrumentation ends up being way

813
00:41:55,660 --> 00:41:58,660
better if before you start writing any

814
00:41:58,660 --> 00:42:01,059
code you think how do I know if this is

815
00:42:01,059 --> 00:42:02,739
working what's going to happen when it's

816
00:42:02,739 --> 00:42:05,140
not how will I know that you can

817
00:42:05,140 --> 00:42:08,279
instrument your cards for that

818
00:42:10,410 --> 00:42:12,840
measure of each request has a unique ID

819
00:42:12,840 --> 00:42:16,780
so the you can trace that request

820
00:42:16,780 --> 00:42:21,250
through your entire system you might

821
00:42:21,250 --> 00:42:23,290
generate this yourself your inch point

822
00:42:23,290 --> 00:42:24,940
at your API if you make calls to

823
00:42:24,940 --> 00:42:27,730
internal api's pass it along you want to

824
00:42:27,730 --> 00:42:30,190
call away all of those log events to a

825
00:42:30,190 --> 00:42:33,369
single request if you don't want to

826
00:42:33,369 --> 00:42:35,830
generate it yourself use something my

827
00:42:35,830 --> 00:42:38,740
adviser she is an D header it doesn't

828
00:42:38,740 --> 00:42:40,510
matter where it comes from so long as

829
00:42:40,510 --> 00:42:45,610
you have one finally normalized time

830
00:42:45,610 --> 00:42:48,550
zones to UTC I use time stamps I don't

831
00:42:48,550 --> 00:42:52,810
care which this needs the second slide

832
00:42:52,810 --> 00:42:55,030
just because people say yeah yeah I've

833
00:42:55,030 --> 00:42:56,950
got that but they're dumb and then they

834
00:42:56,950 --> 00:42:58,450
come to use their logs and they think

835
00:42:58,450 --> 00:43:00,280
mom why did this happen they says it did

836
00:43:00,280 --> 00:43:02,320
that but that happened before it buddy

837
00:43:02,320 --> 00:43:03,880
can't because that told that to do that

838
00:43:03,880 --> 00:43:05,590
and turns out they're just in different

839
00:43:05,590 --> 00:43:08,740
time zones ones running on the east

840
00:43:08,740 --> 00:43:10,119
coast of the US ones but not the west

841
00:43:10,119 --> 00:43:13,180
coast stick to UTC otherwise you're in

842
00:43:13,180 --> 00:43:17,950
for a world of pain almost there almost

843
00:43:17,950 --> 00:43:19,810
time for beer I'm gonna quickly run

844
00:43:19,810 --> 00:43:21,690
through a couple of supporting tools I

845
00:43:21,690 --> 00:43:25,140
mentioned foul beat earlier and it's a

846
00:43:25,140 --> 00:43:28,090
lightweight alternative to log stash by

847
00:43:28,090 --> 00:43:29,920
the same company this one's written in

848
00:43:29,920 --> 00:43:33,670
go valve of the Java as a version 5 it

849
00:43:33,670 --> 00:43:35,530
has some data manipulation manipulation

850
00:43:35,530 --> 00:43:37,630
tools but they're nothing compared to

851
00:43:37,630 --> 00:43:42,119
lot of stashes so you can use this to

852
00:43:42,119 --> 00:43:46,090
ship logs off your nods to a central log

853
00:43:46,090 --> 00:43:47,650
stash instance which then thought tested

854
00:43:47,650 --> 00:43:50,020
them a sense the mom if you don't even

855
00:43:50,020 --> 00:43:51,460
need to do that you can use file beats

856
00:43:51,460 --> 00:43:56,410
send directly to elasticsearch this

857
00:43:56,410 --> 00:43:59,010
should be run on every node it should be

858
00:43:59,010 --> 00:44:01,390
looking at log files shipping them off

859
00:44:01,390 --> 00:44:04,900
to either log stash or lost in search

860
00:44:04,900 --> 00:44:07,569
we have graphite which is a time series

861
00:44:07,569 --> 00:44:12,220
database for recording events I would

862
00:44:12,220 --> 00:44:13,779
like to change this and say used for me

863
00:44:13,779 --> 00:44:17,589
theists instead but graph face time

864
00:44:17,589 --> 00:44:20,890
let's get started with and this is for

865
00:44:20,890 --> 00:44:22,569
things that don't need much context like

866
00:44:22,569 --> 00:44:24,099
we saw the log messages they have a ton

867
00:44:24,099 --> 00:44:27,009
of metadata this is where you just need

868
00:44:27,009 --> 00:44:30,789
to know it happened you can send this to

869
00:44:30,789 --> 00:44:32,410
it from your application or you can use

870
00:44:32,410 --> 00:44:34,809
log status' graphite output but what you

871
00:44:34,809 --> 00:44:36,910
end up with is something that looks like

872
00:44:36,910 --> 00:44:38,980
this and it's great for spotting

873
00:44:38,980 --> 00:44:42,819
patterns this graph and you've only have

874
00:44:42,819 --> 00:44:44,440
no idea what it is I know what it does

875
00:44:44,440 --> 00:44:47,499
it tracks data inputs versus data output

876
00:44:47,499 --> 00:44:50,170
from Colossus we expect every item that

877
00:44:50,170 --> 00:44:52,089
comes in we do a little bit of

878
00:44:52,089 --> 00:44:54,279
processing and augmentation then we want

879
00:44:54,279 --> 00:44:56,829
to send it out again so we expect the

880
00:44:56,829 --> 00:44:58,690
blue and the yellow lines to match up by

881
00:44:58,690 --> 00:45:01,680
exactly but close enough

882
00:45:01,680 --> 00:45:04,180
let's see they're pretty much there if

883
00:45:04,180 --> 00:45:06,430
the yellow line dropped dramatically I

884
00:45:06,430 --> 00:45:09,328
don't know something was wrong

885
00:45:10,150 --> 00:45:12,950
this one's a graph of system Lords per

886
00:45:12,950 --> 00:45:15,890
minute if once service bakes you could

887
00:45:15,890 --> 00:45:20,630
not sit like this is it's useless right

888
00:45:20,630 --> 00:45:24,020
now like you don't care but it's between

889
00:45:24,020 --> 00:45:26,660
no point 1 or not point for it that's

890
00:45:26,660 --> 00:45:28,070
fine if something shoots to 10

891
00:45:28,070 --> 00:45:29,900
everything else is going to shrink down

892
00:45:29,900 --> 00:45:32,270
you can see in one big spike it's about

893
00:45:32,270 --> 00:45:34,280
the shape of the data not necessarily

894
00:45:34,280 --> 00:45:37,880
the values that's in that shape and

895
00:45:37,880 --> 00:45:43,310
makes you more important you can use

896
00:45:43,310 --> 00:45:45,770
performance talk to graphite graphite

897
00:45:45,770 --> 00:45:47,390
and data source you can use performance

898
00:45:47,390 --> 00:45:49,730
to talk to elasticsearch robin think

899
00:45:49,730 --> 00:45:53,390
Ebola is just a graphing tool and as you

900
00:45:53,390 --> 00:45:57,700
can see it can draw much pity of laughs

901
00:45:59,440 --> 00:46:02,870
page shooter and this is important this

902
00:46:02,870 --> 00:46:04,400
is what tells you might something isn't

903
00:46:04,400 --> 00:46:05,470
quite right

904
00:46:05,470 --> 00:46:08,360
you can trigger alerts based on Desmond

905
00:46:08,360 --> 00:46:08,870
kvarner

906
00:46:08,870 --> 00:46:11,330
and graphite if a systems Lord average

907
00:46:11,330 --> 00:46:13,160
spikes above 10 you want to know about

908
00:46:13,160 --> 00:46:17,420
it but you need to trigger that alert

909
00:46:17,420 --> 00:46:20,720
somehow and for me the best one I found

910
00:46:20,720 --> 00:46:22,970
is a tool called for one one from ETSU

911
00:46:22,970 --> 00:46:26,290
and you can sell the rules that say

912
00:46:26,290 --> 00:46:29,210
aloud to me when there are eggs events

913
00:46:29,210 --> 00:46:32,450
in Y time and that can be a lonely when

914
00:46:32,450 --> 00:46:34,790
there is one event ever or ellonija when

915
00:46:34,790 --> 00:46:37,820
i I see ten could have connected

916
00:46:37,820 --> 00:46:41,180
databases in three minutes you can set

917
00:46:41,180 --> 00:46:44,710
those thresholds yourself you can say

918
00:46:44,710 --> 00:46:48,520
alerts me when or requests per second

919
00:46:48,520 --> 00:46:50,990
because outside of one standard

920
00:46:50,990 --> 00:46:53,360
deviation or when it drops by more than

921
00:46:53,360 --> 00:46:57,710
10% you can trigger a lot of lighting

922
00:46:57,710 --> 00:47:00,890
systems such as email slack and of

923
00:47:00,890 --> 00:47:04,060
course page shooter

924
00:47:04,430 --> 00:47:08,240
finally my conclusion almost there and

925
00:47:08,240 --> 00:47:11,169
though it's been a long day

926
00:47:11,589 --> 00:47:17,510
logging is required it's not optional we

927
00:47:17,510 --> 00:47:18,529
need to know what's happening inside our

928
00:47:18,529 --> 00:47:21,770
applications like we have to it's not a

929
00:47:21,770 --> 00:47:24,289
question of should we it's a question of

930
00:47:24,289 --> 00:47:28,430
how we and the key to this is the

931
00:47:28,430 --> 00:47:30,619
developers are empowered you should be

932
00:47:30,619 --> 00:47:33,289
the ones doing this work shouldn't be

933
00:47:33,289 --> 00:47:35,779
you operations team they're the ones

934
00:47:35,779 --> 00:47:38,150
that developers are the ones that know

935
00:47:38,150 --> 00:47:40,190
how an application should work

936
00:47:40,190 --> 00:47:42,109
the dorsum need to expose the relevant

937
00:47:42,109 --> 00:47:44,809
information or the operations team

938
00:47:44,809 --> 00:47:46,609
should be doing is setting the allotted

939
00:47:46,609 --> 00:47:49,069
production based on the values that the

940
00:47:49,069 --> 00:47:54,770
developers give them and we do need to

941
00:47:54,770 --> 00:47:56,690
be whether logging does have a

942
00:47:56,690 --> 00:47:58,819
performance impact it's called the

943
00:47:58,819 --> 00:48:01,630
scottsville after all

944
00:48:02,580 --> 00:48:05,820
for example we compile debug statements

945
00:48:05,820 --> 00:48:08,300
out of some of our core C++ systems

946
00:48:08,300 --> 00:48:10,680
because even just doing the chat session

947
00:48:10,680 --> 00:48:13,380
dialogue no slowed it down too much

948
00:48:13,380 --> 00:48:16,490
we actually had to compile my car though

949
00:48:16,490 --> 00:48:19,320
but if you stick to informing above

950
00:48:19,320 --> 00:48:20,850
though generally gives you enough

951
00:48:20,850 --> 00:48:22,290
information to work out what's going on

952
00:48:22,290 --> 00:48:24,390
when you need it without having too much

953
00:48:24,390 --> 00:48:27,470
of an impact on your production systems

954
00:48:27,470 --> 00:48:30,000
in the end is don't you decide how much

955
00:48:30,000 --> 00:48:32,670
logging your needs everyone's got a

956
00:48:32,670 --> 00:48:34,230
different situation different set of

957
00:48:34,230 --> 00:48:36,240
circumstances you've got to do what's

958
00:48:36,240 --> 00:48:41,910
right for you well think about it like I

959
00:48:41,910 --> 00:48:44,460
flew here I live just outside of London

960
00:48:44,460 --> 00:48:47,250
UK I'm sure that some of you flew here

961
00:48:47,250 --> 00:48:48,030
to get here too

962
00:48:48,030 --> 00:48:50,610
and imagine if you as you were getting

963
00:48:50,610 --> 00:48:54,210
on the plane strewed I said to you right

964
00:48:54,210 --> 00:48:56,430
we've got got a choice for you we're

965
00:48:56,430 --> 00:48:59,340
gonna get you there but we're going to

966
00:48:59,340 --> 00:49:02,330
add a fly slowly or we can fly blind

967
00:49:02,330 --> 00:49:04,320
like we'll get there much faster for

968
00:49:04,320 --> 00:49:07,020
blind for the pilot but which would you

969
00:49:07,020 --> 00:49:08,750
choose

970
00:49:08,750 --> 00:49:13,260
yeah sure you words and sin same is true

971
00:49:13,260 --> 00:49:18,150
for logging without visibility without

972
00:49:18,150 --> 00:49:20,100
visibility into what our application is

973
00:49:20,100 --> 00:49:24,359
doing we are flying blind and with that

974
00:49:24,359 --> 00:49:27,510
window and I've been Michael you've been

975
00:49:27,510 --> 00:49:29,910
awesome like the audience participation

976
00:49:29,910 --> 00:49:34,560
and always lit I will do questions now

977
00:49:34,560 --> 00:49:37,350
but just come and find me afterwards I'm

978
00:49:37,350 --> 00:49:38,970
sure everyone wants to go get a drink

979
00:49:38,970 --> 00:49:41,030
thank you very much

980
00:49:41,030 --> 00:49:46,670
[Applause]

