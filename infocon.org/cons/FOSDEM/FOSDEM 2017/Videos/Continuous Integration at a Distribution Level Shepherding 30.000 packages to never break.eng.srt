1
00:00:00,000 --> 00:00:02,029
ah

2
00:00:04,520 --> 00:00:06,500
I imagine most of you are calling on

3
00:00:06,500 --> 00:00:09,910
Twitter so feel free to take photos and

4
00:00:09,910 --> 00:00:13,280
post on Twitter use hash tag Boston

5
00:00:13,280 --> 00:00:18,050
therefore SDM let's get trend another

6
00:00:18,050 --> 00:00:22,279
feature because there is no actual

7
00:00:22,279 --> 00:00:24,199
official registration first language

8
00:00:24,199 --> 00:00:28,009
doesn't really have good extortion but

9
00:00:28,009 --> 00:00:31,339
in lanyard on websites like that we

10
00:00:31,339 --> 00:00:33,830
should make it like a trend okay so this

11
00:00:33,830 --> 00:00:35,750
talk is about continuous integration and

12
00:00:35,750 --> 00:00:38,870
distribution and here we are with Marty

13
00:00:38,870 --> 00:00:47,180
did Martin page worst ago one - yes he

14
00:00:47,180 --> 00:00:50,330
was a Linux from upstream and Debian

15
00:00:50,330 --> 00:00:54,519
Ubuntu system D and stuff like that and

16
00:00:54,519 --> 00:00:57,920
have created and me ended be so that CI

17
00:00:57,920 --> 00:01:01,900
in a bunch of please welcome Marty

18
00:01:06,270 --> 00:01:10,840
so welcome anyone pleasure to speak in

19
00:01:10,840 --> 00:01:12,310
front of so many people I'm overwhelmed

20
00:01:12,310 --> 00:01:14,650
and of course lots of things to the

21
00:01:14,650 --> 00:01:16,810
possum organizers and volunteers it's a

22
00:01:16,810 --> 00:01:18,070
great conference

23
00:01:18,070 --> 00:01:21,970
thanks a lot so yeah I've been good to

24
00:01:21,970 --> 00:01:24,190
developers is pretty much inception in

25
00:01:24,190 --> 00:01:27,310
2004 and in every developer even longer

26
00:01:27,310 --> 00:01:31,000
long time and it would - we have

27
00:01:31,000 --> 00:01:33,330
practiced continuous integration at the

28
00:01:33,330 --> 00:01:36,340
distribution level that is we do test

29
00:01:36,340 --> 00:01:39,220
space dating for like the 30,000 pages

30
00:01:39,220 --> 00:01:42,310
that we should and as far as I know we

31
00:01:42,310 --> 00:01:44,350
are still today the only major district

32
00:01:44,350 --> 00:01:46,300
which doesn't that really like test

33
00:01:46,300 --> 00:01:50,229
based gating and development of the

34
00:01:50,229 --> 00:01:54,130
fully distributed and so I want to share

35
00:01:54,130 --> 00:01:55,930
some thoughts and experiences and maybe

36
00:01:55,930 --> 00:01:58,420
convince you that it's a good idea so

37
00:01:58,420 --> 00:02:01,200
[Music]

38
00:02:01,200 --> 00:02:04,270
what I'm going to do at first why did we

39
00:02:04,270 --> 00:02:07,750
do this and and then how how do our

40
00:02:07,750 --> 00:02:10,060
tests look like these days how do we use

41
00:02:10,060 --> 00:02:12,520
them dating and then I want to lose a

42
00:02:12,520 --> 00:02:13,900
couple of words about the infrastructure

43
00:02:13,900 --> 00:02:15,850
everyone all this because of this scale

44
00:02:15,850 --> 00:02:19,870
you imagine is exactly and then how did

45
00:02:19,870 --> 00:02:22,030
it change our life doing all this and

46
00:02:22,030 --> 00:02:23,830
then we should have about ten minutes of

47
00:02:23,830 --> 00:02:28,420
Q&A so when did he come from in the

48
00:02:28,420 --> 00:02:30,580
first few years of winter we had this

49
00:02:30,580 --> 00:02:32,410
six-month development cycle and in the

50
00:02:32,410 --> 00:02:34,780
first four months this was basically

51
00:02:34,780 --> 00:02:37,600
anything goes tops everything over the

52
00:02:37,600 --> 00:02:40,269
fence features feature development and

53
00:02:40,269 --> 00:02:42,040
then we hit feature freeze and in the

54
00:02:42,040 --> 00:02:43,450
remaining one and a half two months

55
00:02:43,450 --> 00:02:45,640
which might face about half of the

56
00:02:45,640 --> 00:02:47,050
regressions that we introduced in the

57
00:02:47,050 --> 00:02:51,310
first war and during that time and we

58
00:02:51,310 --> 00:02:52,630
managed the developer running the

59
00:02:52,630 --> 00:02:55,120
development release it became kind of a

60
00:02:55,120 --> 00:02:58,390
daily morning exercise to fix your

61
00:02:58,390 --> 00:03:01,840
boo-boo the fixer from export try to

62
00:03:01,840 --> 00:03:04,709
restore the packages that your upgrades

63
00:03:04,709 --> 00:03:05,990
removed

64
00:03:05,990 --> 00:03:08,840
you because if I'm paying attention so I

65
00:03:08,840 --> 00:03:10,880
don't know the lot about how all the

66
00:03:10,880 --> 00:03:12,680
sister work that were certainly not a

67
00:03:12,680 --> 00:03:15,860
very enjoyable experience for developers

68
00:03:15,860 --> 00:03:18,590
and as a result we did not have him up

69
00:03:18,590 --> 00:03:20,690
among developers using the development

70
00:03:20,690 --> 00:03:23,540
of the lease and as a result of that we

71
00:03:23,540 --> 00:03:25,820
were losing a lot of potential feedback

72
00:03:25,820 --> 00:03:28,970
for our development serious work in real

73
00:03:28,970 --> 00:03:31,400
life scenarios you didn't get more

74
00:03:31,400 --> 00:03:33,260
critical back reports and as a result a

75
00:03:33,260 --> 00:03:35,150
lot of regret expectancy the stable

76
00:03:35,150 --> 00:03:40,610
releases and another problem was that in

77
00:03:40,610 --> 00:03:42,620
the distribution you are facing a lot of

78
00:03:42,620 --> 00:03:45,080
archive wide changes things like library

79
00:03:45,080 --> 00:03:47,480
transitions or in traditional new cute

80
00:03:47,480 --> 00:03:49,120
or major Python good

81
00:03:49,120 --> 00:03:52,160
so but then these things are often not

82
00:03:52,160 --> 00:03:52,730
finished

83
00:03:52,730 --> 00:03:55,280
people basically tossed them all depends

84
00:03:55,280 --> 00:03:57,910
have done saying oh my god I have this

85
00:03:57,910 --> 00:04:00,230
deadline to make or their feature piece

86
00:04:00,230 --> 00:04:00,950
next week

87
00:04:00,950 --> 00:04:02,960
so let's dump it all in and sort of that

88
00:04:02,960 --> 00:04:05,630
later and then the Bandit became someone

89
00:04:05,630 --> 00:04:08,030
else's problem and usually the NP

90
00:04:08,030 --> 00:04:10,100
released he had to clean up all the

91
00:04:10,100 --> 00:04:12,500
spits and kick out packages and that's

92
00:04:12,500 --> 00:04:13,970
roughly with building packages against

93
00:04:13,970 --> 00:04:18,079
EDI and it was just a horrible mess so

94
00:04:18,079 --> 00:04:20,540
once a Whitley became popular enough and

95
00:04:20,540 --> 00:04:22,670
most being used in mission critical

96
00:04:22,670 --> 00:04:24,740
mission critical deployments and

97
00:04:24,740 --> 00:04:27,110
commercial products this was simply not

98
00:04:27,110 --> 00:04:31,070
good enough anymore so we sat down like

99
00:04:31,070 --> 00:04:33,680
a straight gold the development serious

100
00:04:33,680 --> 00:04:36,620
must disable and usable and safe to be

101
00:04:36,620 --> 00:04:40,790
used at all times nobody is able to know

102
00:04:40,790 --> 00:04:44,090
fully break it anymore and so by using

103
00:04:44,090 --> 00:04:46,850
this kind of continuous integration we

104
00:04:46,850 --> 00:04:48,230
basically want to register towards

105
00:04:48,230 --> 00:04:50,600
perfection we never ever wanted to have

106
00:04:50,600 --> 00:04:52,450
a package we can automatically detect

107
00:04:52,450 --> 00:04:57,500
and development release and yet another

108
00:04:57,500 --> 00:04:59,000
problem was that the many up streets

109
00:04:59,000 --> 00:05:01,340
already had test Suites it's just that

110
00:05:01,340 --> 00:05:04,040
like every project Susteren differently

111
00:05:04,040 --> 00:05:06,590
so there is no uniform and thus what a

112
00:05:06,590 --> 00:05:08,690
merry way to actually run the minutes

113
00:05:08,690 --> 00:05:11,540
at the time when you need so that was

114
00:05:11,540 --> 00:05:13,810
the situation

115
00:05:15,280 --> 00:05:19,730
so initially like everyone else we

116
00:05:19,730 --> 00:05:20,960
started with some rather naive

117
00:05:20,960 --> 00:05:24,080
approaches so we set up a QA team and

118
00:05:24,080 --> 00:05:26,600
traded several iterations of stand-alone

119
00:05:26,600 --> 00:05:29,210
test Suites like Ubuntu desktop test

120
00:05:29,210 --> 00:05:32,240
server tests and whatnot toss them into

121
00:05:32,240 --> 00:05:34,820
Jenkins and London would be day and then

122
00:05:34,820 --> 00:05:36,470
basically pestering people about you

123
00:05:36,470 --> 00:05:38,780
bring the tests and please face it and

124
00:05:38,780 --> 00:05:41,570
of course none of that really work

125
00:05:41,570 --> 00:05:44,390
because it's too late I mean at the

126
00:05:44,390 --> 00:05:46,010
moment that Detective is the damage was

127
00:05:46,010 --> 00:05:46,970
already done

128
00:05:46,970 --> 00:05:50,450
also it's never-ending pain gaming like

129
00:05:50,450 --> 00:05:52,820
developers for duty QA but it's your

130
00:05:52,820 --> 00:05:55,880
test on a broken and you very point the

131
00:05:55,880 --> 00:05:57,320
developers you know just suffer that

132
00:05:57,320 --> 00:05:59,360
throat also know that was really not

133
00:05:59,360 --> 00:06:06,110
reducible and so the conclusion from

134
00:06:06,110 --> 00:06:08,810
that was the only people who are able to

135
00:06:08,810 --> 00:06:11,210
be responsible for the test in the

136
00:06:11,210 --> 00:06:12,980
meaningful way are the developers of the

137
00:06:12,980 --> 00:06:15,710
very software so developers are

138
00:06:15,710 --> 00:06:16,760
responsible for testing

139
00:06:16,760 --> 00:06:19,160
they're responsible for gating and the

140
00:06:19,160 --> 00:06:22,070
key 18 basically only does the

141
00:06:22,070 --> 00:06:24,440
infrastructure and making sure that the

142
00:06:24,440 --> 00:06:26,419
test results actually arrive and provide

143
00:06:26,419 --> 00:06:28,370
some kind of consulting to people like

144
00:06:28,370 --> 00:06:30,320
if someone has requests to how do I

145
00:06:30,320 --> 00:06:33,110
simulate I don't know Wi-Fi card or X so

146
00:06:33,110 --> 00:06:36,470
not an occasion could help you there but

147
00:06:36,470 --> 00:06:38,060
it must be possible for every developer

148
00:06:38,060 --> 00:06:39,530
to reproduce tests easily without

149
00:06:39,530 --> 00:06:43,060
reading lots of manual pages

150
00:06:43,060 --> 00:06:45,650
Surya Dumas and southern highly

151
00:06:45,650 --> 00:06:48,140
centralized test we would put the actual

152
00:06:48,140 --> 00:06:50,270
test for a host package in the source

153
00:06:50,270 --> 00:06:53,419
package itself where developers can

154
00:06:53,419 --> 00:06:55,580
develop them by themselves and they

155
00:06:55,580 --> 00:06:56,380
don't need to go

156
00:06:56,380 --> 00:07:00,580
QA process and these tests would then be

157
00:07:00,580 --> 00:07:02,560
triggered when the either the software

158
00:07:02,560 --> 00:07:04,930
itself or any of its dependencies would

159
00:07:04,930 --> 00:07:08,140
get up and we of course would use these

160
00:07:08,140 --> 00:07:09,880
tests for actually dating so once this

161
00:07:09,880 --> 00:07:12,130
has sprayed the package doesn't let

162
00:07:12,130 --> 00:07:15,330
theory and this was named package test

163
00:07:15,330 --> 00:07:18,670
this is post the name of like this whole

164
00:07:18,670 --> 00:07:20,860
kind of test and it's also the name of

165
00:07:20,860 --> 00:07:23,760
the tool that you actually run in to

166
00:07:23,760 --> 00:07:26,860
execute the test and back then it was

167
00:07:26,860 --> 00:07:28,960
submitted as David enhancements proposal

168
00:07:28,960 --> 00:07:31,780
of one week which is why you can still a

169
00:07:31,780 --> 00:07:32,860
you know a lot of people are calling

170
00:07:32,860 --> 00:07:36,780
them dead a test so don't be confused

171
00:07:37,320 --> 00:07:40,330
how do these look like so this is see

172
00:07:40,330 --> 00:07:43,060
one of the simplest and oldest tests

173
00:07:43,060 --> 00:07:45,220
that we still have in the archive so

174
00:07:45,220 --> 00:07:47,260
it's the kind of toy example very very

175
00:07:47,260 --> 00:07:50,890
beginning so every source package which

176
00:07:50,890 --> 00:07:52,690
the test leads to have the dead in test

177
00:07:52,690 --> 00:07:54,910
control which gives the test method a

178
00:07:54,910 --> 00:07:57,070
basically it enumerates all the tests

179
00:07:57,070 --> 00:07:59,260
that we have and it says like in order

180
00:07:59,260 --> 00:08:01,900
to run the simple gzip test we need to

181
00:08:01,900 --> 00:08:03,540
have these in these packages installed

182
00:08:03,540 --> 00:08:07,030
and you can also give other properties

183
00:08:07,030 --> 00:08:09,490
but I'm going to this later

184
00:08:09,490 --> 00:08:11,590
this one doesn't need anything and so

185
00:08:11,590 --> 00:08:13,120
for every test if you enumerate there's

186
00:08:13,120 --> 00:08:14,890
some pieces you need to have an

187
00:08:14,890 --> 00:08:18,970
accompanying debian tests test me and if

188
00:08:18,970 --> 00:08:20,590
you see here this can be very simple its

189
00:08:20,590 --> 00:08:22,780
basic its load tested G zip and unzip

190
00:08:22,780 --> 00:08:26,590
path whether it be expected to do and so

191
00:08:26,590 --> 00:08:29,710
the contract is and if the test that you

192
00:08:29,710 --> 00:08:32,860
run X except zero then it's passed and

193
00:08:32,860 --> 00:08:34,780
otherwise is family so you can write the

194
00:08:34,780 --> 00:08:36,760
test in any language is powered if you

195
00:08:36,760 --> 00:08:39,460
wish and so that keeps you pretty

196
00:08:39,460 --> 00:08:43,809
flexible of the developer so once you

197
00:08:43,809 --> 00:08:46,000
have the test how do you run them so

198
00:08:46,000 --> 00:08:46,990
this is the other package to this

199
00:08:46,990 --> 00:08:49,480
program this is the thing responsible

200
00:08:49,480 --> 00:08:51,760
for trading a temporary test at copy the

201
00:08:51,760 --> 00:08:54,610
tests inside there's run it make sure

202
00:08:54,610 --> 00:08:56,110
that all the walking is why you get the

203
00:08:56,110 --> 00:08:57,400
results back and

204
00:08:57,400 --> 00:08:59,950
kind of architects back and you can

205
00:08:59,950 --> 00:09:02,200
influence the final behavior over tests

206
00:09:02,200 --> 00:09:05,500
that details are good and those two

207
00:09:05,500 --> 00:09:08,740
supports various and that gets there

208
00:09:08,740 --> 00:09:10,840
which you can run the test in so one of

209
00:09:10,840 --> 00:09:13,360
the oldest ones that we have is like

210
00:09:13,360 --> 00:09:15,070
they're too rude did you see like in the

211
00:09:15,070 --> 00:09:18,340
second row like chroot is basically dead

212
00:09:18,340 --> 00:09:20,680
in school to manage the bill to manage a

213
00:09:20,680 --> 00:09:24,910
couple of shoe routes so very simple but

214
00:09:24,910 --> 00:09:27,250
of course this kind of limits the thing

215
00:09:27,250 --> 00:09:29,110
you can do three accounts of surfaces

216
00:09:29,110 --> 00:09:30,520
you can interact with the caramel

217
00:09:30,520 --> 00:09:32,940
custard doesn't work in two routes so

218
00:09:32,940 --> 00:09:35,350
after we created all packaged test is

219
00:09:35,350 --> 00:09:37,780
new energy technologies came along QE

220
00:09:37,780 --> 00:09:41,440
blue containers whatnot so these days we

221
00:09:41,440 --> 00:09:44,920
have backends for annex e LX e QE new

222
00:09:44,920 --> 00:09:48,510
arbitrary SSH posts or cloud instances

223
00:09:48,510 --> 00:09:51,220
ATP you want to run something on android

224
00:09:51,220 --> 00:09:54,190
and these days production we actually

225
00:09:54,190 --> 00:09:58,630
using chemo by way of using OpenStack

226
00:09:58,630 --> 00:10:00,850
instances so you have a full virtual

227
00:10:00,850 --> 00:10:04,240
machine to mess around with and when you

228
00:10:04,240 --> 00:10:07,270
set for x86 s and the power a and for

229
00:10:07,270 --> 00:10:09,040
the other two architectures arm and

230
00:10:09,040 --> 00:10:11,320
s/390 which we support we run them and

231
00:10:11,320 --> 00:10:13,360
tell exceed because we don't have

232
00:10:13,360 --> 00:10:19,210
hosting integration yet so it's slightly

233
00:10:19,210 --> 00:10:21,970
more useful example is the schema that

234
00:10:21,970 --> 00:10:25,690
we use into a lot of libraries so we

235
00:10:25,690 --> 00:10:27,760
basically do is simple compiling run

236
00:10:27,760 --> 00:10:29,410
cycle to make sure that the labelling

237
00:10:29,410 --> 00:10:34,120
that your ship or update so what should

238
00:10:34,120 --> 00:10:39,220
pay for what I hope and this is what the

239
00:10:39,220 --> 00:10:41,410
testers basically it creates a simple

240
00:10:41,410 --> 00:10:44,080
seed power which like in this case and

241
00:10:44,080 --> 00:10:46,120
interfaces the system these log indeed

242
00:10:46,120 --> 00:10:48,460
so we essentially the long any monitory

243
00:10:48,460 --> 00:10:51,040
called and basically make sure that the

244
00:10:51,040 --> 00:10:52,960
smoke test is right that we call just

245
00:10:52,960 --> 00:10:56,260
see on it and run the program and like

246
00:10:56,260 --> 00:11:00,190
if it succeeds the test is good very

247
00:11:00,190 --> 00:11:03,580
simple but on second there's actually

248
00:11:03,580 --> 00:11:05,220
lots of things that you can do

249
00:11:05,220 --> 00:11:08,370
so for example the update the program to

250
00:11:08,370 --> 00:11:11,070
the last reversion and our development

251
00:11:11,070 --> 00:11:12,990
package is missing to specify in your

252
00:11:12,990 --> 00:11:15,900
dependency so it's trying to use a head

253
00:11:15,900 --> 00:11:18,600
of house just up there or actually

254
00:11:18,600 --> 00:11:20,630
forgets to install new head of house or

255
00:11:20,630 --> 00:11:23,370
like I could conflict follows wrong and

256
00:11:23,370 --> 00:11:24,960
we did have a few afternoon very mystery

257
00:11:24,960 --> 00:11:26,460
ship with the problem I could come pick

258
00:11:26,460 --> 00:11:32,450
like all that happens so as a fantasy

259
00:11:37,040 --> 00:11:42,600
and a more like intricate example it's

260
00:11:42,600 --> 00:11:46,170
the Pokemon phone system you package of

261
00:11:46,170 --> 00:11:49,590
everyone another stream this so she

262
00:11:49,590 --> 00:11:51,270
should cetera such net for the tests of

263
00:11:51,270 --> 00:11:56,220
client which exercises Network D and as

264
00:11:56,220 --> 00:11:57,810
I said normally the test is to live in

265
00:11:57,810 --> 00:11:59,520
that in such tests but with the test

266
00:11:59,520 --> 00:12:01,380
directory Clause we can say that the

267
00:12:01,380 --> 00:12:03,240
test is to be looked at in a different

268
00:12:03,240 --> 00:12:07,800
directory so in this high and this is a

269
00:12:07,800 --> 00:12:09,930
way now we can interface and run

270
00:12:09,930 --> 00:12:11,730
upstream tests by saying basically just

271
00:12:11,730 --> 00:12:13,470
hitting the metadata for the tests and

272
00:12:13,470 --> 00:12:14,730
that's it

273
00:12:14,730 --> 00:12:16,950
and if you also see the new restriction

274
00:12:16,950 --> 00:12:19,800
stolen here so this is where you can say

275
00:12:19,800 --> 00:12:22,350
like how well isolated does my test that

276
00:12:22,350 --> 00:12:24,660
needs to be so in this case that route

277
00:12:24,660 --> 00:12:27,480
and we also need to run it at least in

278
00:12:27,480 --> 00:12:29,820
the container because that 4d need to

279
00:12:29,820 --> 00:12:33,870
set it up we and stop services and for

280
00:12:33,870 --> 00:12:35,850
example this wouldn't be safe to one

281
00:12:35,850 --> 00:12:40,710
another to rule and there was one like a

282
00:12:40,710 --> 00:12:43,140
solar burden that would be isolation

283
00:12:43,140 --> 00:12:45,390
machine which support sample uses the

284
00:12:45,390 --> 00:12:47,850
network manager test and then no to comb

285
00:12:47,850 --> 00:12:50,370
all of you like make data to it and it's

286
00:12:50,370 --> 00:12:52,350
doubly assumed which simulates Wi-Fi

287
00:12:52,350 --> 00:12:54,540
devices and this is the kind of stuff

288
00:12:54,540 --> 00:12:56,580
that doesn't work in the container also

289
00:12:56,580 --> 00:12:59,250
on kernel tests they do really nasty

290
00:12:59,250 --> 00:13:01,380
things to the test weapon beat them to a

291
00:13:01,380 --> 00:13:04,350
pulp and so you really want to make

292
00:13:04,350 --> 00:13:06,570
at the end just for the safe in a

293
00:13:06,570 --> 00:13:09,960
container but I don't need to go too

294
00:13:09,960 --> 00:13:12,180
much into the details of that I just

295
00:13:12,180 --> 00:13:13,800
want to give a broad overview of what's

296
00:13:13,800 --> 00:13:16,410
possible there for example insistently

297
00:13:16,410 --> 00:13:18,840
we have tests which simulates is suspend

298
00:13:18,840 --> 00:13:21,600
for seeing how many marks are closing

299
00:13:21,600 --> 00:13:24,690
and opening up the day or we face but

300
00:13:24,690 --> 00:13:26,790
this felony mark a very loose partition

301
00:13:26,790 --> 00:13:28,170
and make sure that system the interface

302
00:13:28,170 --> 00:13:32,040
is properly or we installed a couple of

303
00:13:32,040 --> 00:13:34,170
percent mission-critical packages like

304
00:13:34,170 --> 00:13:37,170
keep our network manager or XOR and like

305
00:13:37,170 --> 00:13:39,330
p.m. and make sure that if that being

306
00:13:39,330 --> 00:13:40,620
your system the upgrade everything

307
00:13:40,620 --> 00:13:42,330
starts and there were no failed services

308
00:13:42,330 --> 00:13:44,160
and that you can reboot the test at

309
00:13:44,160 --> 00:13:51,060
twenty times without parents so that's

310
00:13:51,060 --> 00:13:54,660
it when we started this in my 2012 also

311
00:13:54,660 --> 00:13:58,190
we still had a very few tests to see and

312
00:13:58,190 --> 00:14:01,440
we started to introduce this today since

313
00:14:01,440 --> 00:14:02,670
2014

314
00:14:02,670 --> 00:14:04,650
I got happy that David also runs these

315
00:14:04,650 --> 00:14:07,380
tests except that it doesn't stand for

316
00:14:07,380 --> 00:14:09,390
gating it and you see the adoption curve

317
00:14:09,390 --> 00:14:12,780
is really nice these days we have more

318
00:14:12,780 --> 00:14:15,240
than 60,000 tickets which offer package

319
00:14:15,240 --> 00:14:17,160
tests and considering that you also

320
00:14:17,160 --> 00:14:19,890
cover their dependencies implicitly and

321
00:14:19,890 --> 00:14:21,930
that's quite a nice coverage already I

322
00:14:21,930 --> 00:14:23,910
mean it's still far away from the 30,000

323
00:14:23,910 --> 00:14:26,120
but it points us in the right direction

324
00:14:26,120 --> 00:14:28,770
by the way to the big leap that you see

325
00:14:28,770 --> 00:14:31,680
here was kind of full of cheating so we

326
00:14:31,680 --> 00:14:34,950
figured out a generic way to test hole

327
00:14:34,950 --> 00:14:37,980
and Ruby and DMS modules because they

328
00:14:37,980 --> 00:14:39,720
all look very similar so we have central

329
00:14:39,720 --> 00:14:44,720
way to run and so that explains myself

330
00:14:45,920 --> 00:14:48,660
so now that we have the best how do we

331
00:14:48,660 --> 00:14:51,510
use them okay initially there's a

332
00:14:51,510 --> 00:14:53,520
developer from has a new package updates

333
00:14:53,520 --> 00:14:56,100
a chicane and

334
00:14:56,100 --> 00:14:57,750
opposites the distribution that happens

335
00:14:57,750 --> 00:15:00,690
with people that's just an Athenian to

336
00:15:00,690 --> 00:15:04,140
to upload a package but this does not

337
00:15:04,140 --> 00:15:05,790
land directly and people do when to

338
00:15:05,790 --> 00:15:08,250
develop serious but instead it goes into

339
00:15:08,250 --> 00:15:10,380
something which we call the proposed

340
00:15:10,380 --> 00:15:13,170
project and this is a kind of a overlay

341
00:15:13,170 --> 00:15:15,840
on top of developing serious where only

342
00:15:15,840 --> 00:15:18,000
you status being employed and in fact is

343
00:15:18,000 --> 00:15:22,080
staging area for basically CI and this

344
00:15:22,080 --> 00:15:24,330
one has no human users because by

345
00:15:24,330 --> 00:15:26,790
definition that's the data is broken and

346
00:15:26,790 --> 00:15:29,580
then we have a thing called a post

347
00:15:29,580 --> 00:15:31,950
migration set of scripts if you are from

348
00:15:31,950 --> 00:15:33,840
a debian background you might also know

349
00:15:33,840 --> 00:15:38,580
it as Britney and this then does all the

350
00:15:38,580 --> 00:15:40,230
necessary checks on it so it tests that

351
00:15:40,230 --> 00:15:41,730
the new GT cave builds all the

352
00:15:41,730 --> 00:15:44,010
architectures from you expected that it

353
00:15:44,010 --> 00:15:46,260
is insoluble everywhere but it doesn't

354
00:15:46,260 --> 00:15:48,180
break it's all ability of other packages

355
00:15:48,180 --> 00:15:50,700
so we do this for all the 30,000 egg

356
00:15:50,700 --> 00:15:53,340
addition that ensures like library

357
00:15:53,340 --> 00:15:55,350
transitions cannot only be complete and

358
00:15:55,350 --> 00:15:57,870
you don't know knowing the introduced

359
00:15:57,870 --> 00:16:00,450
under stability and for the purpose of

360
00:16:00,450 --> 00:16:03,150
this point it also triggers sets both of

361
00:16:03,150 --> 00:16:05,640
cdk itself and everything that uses you

362
00:16:05,640 --> 00:16:07,830
became like all the reverse dependencies

363
00:16:07,830 --> 00:16:11,570
and only once all of that is good

364
00:16:11,570 --> 00:16:14,970
promise migrations and lands either GDK

365
00:16:14,970 --> 00:16:17,040
itself or the group of packages that are

366
00:16:17,040 --> 00:16:18,990
kind of belong together into the

367
00:16:18,990 --> 00:16:21,810
development series and the long event B

368
00:16:21,810 --> 00:16:24,270
ensure that vectors to develop they

369
00:16:24,270 --> 00:16:25,980
never regret an architectural support

370
00:16:25,980 --> 00:16:29,370
they're always a solvable and in fearing

371
00:16:29,370 --> 00:16:32,340
at least the tests level regress well

372
00:16:32,340 --> 00:16:35,460
that's a theory but for the most part of

373
00:16:35,460 --> 00:16:39,300
route and so forth in this case if GDK

374
00:16:39,300 --> 00:16:40,680
breaks something the developer then

375
00:16:40,680 --> 00:16:43,040
might need to do further uploads to

376
00:16:43,040 --> 00:16:47,270
adjust GDK users to

377
00:16:50,019 --> 00:16:53,269
so and this is a page which beautiful

378
00:16:53,269 --> 00:16:54,709
medica generally that developers can

379
00:16:54,709 --> 00:16:56,990
check the status of their packages so

380
00:16:56,990 --> 00:16:59,589
instead in this example the CD cake

381
00:16:59,589 --> 00:17:02,779
every for example see here that like it

382
00:17:02,779 --> 00:17:05,480
didn't know them whole point yet and on

383
00:17:05,480 --> 00:17:07,220
my afraid it's a to this a nun

384
00:17:07,220 --> 00:17:11,000
installable binary package and that like

385
00:17:11,000 --> 00:17:13,160
one reverse dependencies unity just fail

386
00:17:13,160 --> 00:17:16,280
the test so this is just very simply

387
00:17:16,280 --> 00:17:18,650
find out input so normally we test them

388
00:17:18,650 --> 00:17:20,089
five different architectures and not

389
00:17:20,089 --> 00:17:22,849
just one and also we wouldn't actually

390
00:17:22,849 --> 00:17:24,799
stop the test before we know that the

391
00:17:24,799 --> 00:17:26,869
package builds an installable because

392
00:17:26,869 --> 00:17:29,179
otherwise it's pointless that's like it

393
00:17:29,179 --> 00:17:32,960
should illustrate the point and this is

394
00:17:32,960 --> 00:17:34,309
actually still a very simple case

395
00:17:34,309 --> 00:17:39,230
consider updates or TVC Python Perl more

396
00:17:39,230 --> 00:17:41,720
apt and they literally trigger thousands

397
00:17:41,720 --> 00:17:43,070
of the tests like every time we upload

398
00:17:43,070 --> 00:17:45,559
q-tip see the trigger 5,000 test times

399
00:17:45,559 --> 00:17:48,380
five architectures so I want which

400
00:17:48,380 --> 00:17:49,970
really tastes like about two days to

401
00:17:49,970 --> 00:17:52,250
trying for that but the nice thing is

402
00:17:52,250 --> 00:17:53,990
after these two days you can actually

403
00:17:53,990 --> 00:17:56,360
then to stuff with confidence instead of

404
00:17:56,360 --> 00:17:58,309
just saying yeah I hope that it breaks

405
00:17:58,309 --> 00:18:02,000
nothing because it always does and of

406
00:18:02,000 --> 00:18:03,980
course the exact same thing applies to

407
00:18:03,980 --> 00:18:06,559
update so stable releases as well so

408
00:18:06,559 --> 00:18:08,419
it's the exact same thing people upload

409
00:18:08,419 --> 00:18:10,820
to say general proposed general about

410
00:18:10,820 --> 00:18:12,740
what kind of yes and then it goes to

411
00:18:12,740 --> 00:18:14,960
wall is cleaner II and only this green

412
00:18:14,960 --> 00:18:20,929
we can actually publish it so that's

413
00:18:20,929 --> 00:18:23,270
extraction of the test I want to explain

414
00:18:23,270 --> 00:18:24,679
a little bit the infrastructure and

415
00:18:24,679 --> 00:18:27,710
where we run this both because I haven't

416
00:18:27,710 --> 00:18:29,390
really seen this kind of structure

417
00:18:29,390 --> 00:18:31,820
anywhere else and also to be completely

418
00:18:31,820 --> 00:18:35,409
honest I'm a little bit proud of it so

419
00:18:35,740 --> 00:18:38,210
like many other people reinforced

420
00:18:38,210 --> 00:18:40,880
started with the changes and that was

421
00:18:40,880 --> 00:18:43,250
okay when we had like twenty tests in

422
00:18:43,250 --> 00:18:45,950
the beginning but already then it was

423
00:18:45,950 --> 00:18:48,440
quite the tool when every update of

424
00:18:48,440 --> 00:18:49,370
Jenkins then you

425
00:18:49,370 --> 00:18:52,340
three spoonfuls of Java exceptions and

426
00:18:52,340 --> 00:18:54,620
it's pretty hard to maintain and it's

427
00:18:54,620 --> 00:18:56,390
really not easy to replicate locally if

428
00:18:56,390 --> 00:18:58,310
you want to develop the infrastructure

429
00:18:58,310 --> 00:19:02,030
and become a lot of losing test requests

430
00:19:02,030 --> 00:19:04,370
and it's a single point of failure and

431
00:19:04,370 --> 00:19:06,470
at a scale of 30,000 is that just

432
00:19:06,470 --> 00:19:07,880
doesn't work so we needed something

433
00:19:07,880 --> 00:19:11,240
better so I sit down the other day and

434
00:19:11,240 --> 00:19:13,670
design something micro the service

435
00:19:13,670 --> 00:19:16,310
architecture which should use standard

436
00:19:16,310 --> 00:19:19,210
technology as far as far as possible and

437
00:19:19,210 --> 00:19:21,710
I wanted to have small and loosely

438
00:19:21,710 --> 00:19:24,980
connected components so where it's

439
00:19:24,980 --> 00:19:27,140
sardars what we could call a policy

440
00:19:27,140 --> 00:19:29,420
entity so this is the thing which one's

441
00:19:29,420 --> 00:19:31,340
to trigger tests and there wait for the

442
00:19:31,340 --> 00:19:33,140
result and then making decisions on the

443
00:19:33,140 --> 00:19:35,660
based on these test results this can be

444
00:19:35,660 --> 00:19:37,370
proposed migration that I was just

445
00:19:37,370 --> 00:19:39,410
explaining for the distro but it could

446
00:19:39,410 --> 00:19:41,990
also be in half for example where you

447
00:19:41,990 --> 00:19:43,490
want to use it for taking home address

448
00:19:43,490 --> 00:19:45,440
and there's a couple of other consumers

449
00:19:45,440 --> 00:19:46,100
about that

450
00:19:46,100 --> 00:19:50,570
therefore well and the only thing that

451
00:19:50,570 --> 00:19:52,580
this policy entity does is it puts

452
00:19:52,580 --> 00:19:55,430
tested person to an entity Q so we use

453
00:19:55,430 --> 00:19:57,440
relative format which is basically

454
00:19:57,440 --> 00:20:00,830
standard on 20 for those who don't know

455
00:20:00,830 --> 00:20:04,430
entity like very simply it is a job

456
00:20:04,430 --> 00:20:05,990
distribution system so you have a couple

457
00:20:05,990 --> 00:20:08,120
of qubits where you can put in requests

458
00:20:08,120 --> 00:20:10,310
and then consumers can take out the

459
00:20:10,310 --> 00:20:13,640
requests and Coupee infers that all of

460
00:20:13,640 --> 00:20:16,760
this is very robust it is atomic you can

461
00:20:16,760 --> 00:20:19,040
arbitrarily paralyze it and then this is

462
00:20:19,040 --> 00:20:22,580
very simple API so they see a consumer

463
00:20:22,580 --> 00:20:25,010
on that if you want to retest requests

464
00:20:25,010 --> 00:20:26,420
and do your thing and then acknowledge

465
00:20:26,420 --> 00:20:29,330
the result and it's basically five lines

466
00:20:29,330 --> 00:20:30,650
of piping where you can do it in a

467
00:20:30,650 --> 00:20:34,670
single item of shell and like a TP

468
00:20:34,670 --> 00:20:37,340
system insures atomic Felicity or

469
00:20:37,340 --> 00:20:40,370
anything breaks and the request doesn't

470
00:20:40,370 --> 00:20:42,350
get fully processed it gets counted back

471
00:20:42,350 --> 00:20:45,290
to the cue the next consumer base T we

472
00:20:45,290 --> 00:20:48,950
intensive so what it does in our case

473
00:20:48,950 --> 00:20:51,080
we're having a bunch of workers up there

474
00:20:51,080 --> 00:20:55,250
and they basically take requests from

475
00:20:55,250 --> 00:20:57,560
the queues to take a service so we have

476
00:20:57,560 --> 00:20:59,590
workers for x86 for

477
00:20:59,590 --> 00:21:02,139
and then separate set of rotors for for

478
00:21:02,139 --> 00:21:04,090
PowerPC because these tests one of the

479
00:21:04,090 --> 00:21:05,830
different cloud so you can figure the

480
00:21:05,830 --> 00:21:07,059
workers a little differently depending

481
00:21:07,059 --> 00:21:09,370
on like what kind of service they can

482
00:21:09,370 --> 00:21:13,029
support so they take the request then

483
00:21:13,029 --> 00:21:15,129
the total package Testim online run the

484
00:21:15,129 --> 00:21:17,200
tests in the cloud hope we make the

485
00:21:17,200 --> 00:21:19,600
results and saw them in a permanent

486
00:21:19,600 --> 00:21:21,999
thing which is within this case and then

487
00:21:21,999 --> 00:21:23,769
at the end acknowledge to the question

488
00:21:23,769 --> 00:21:25,840
if anything goes wrong in the middle it

489
00:21:25,840 --> 00:21:27,370
goes back to Riku and you'll never lose

490
00:21:27,370 --> 00:21:30,940
best success and like at the moment we

491
00:21:30,940 --> 00:21:32,679
have many dozens of these parallel forms

492
00:21:32,679 --> 00:21:35,769
so that it can scale will be the size of

493
00:21:35,769 --> 00:21:36,999
the infrastructure and it's quite

494
00:21:36,999 --> 00:21:41,169
painless to setup and for those who

495
00:21:41,169 --> 00:21:43,119
don't know Swift this is basically open

496
00:21:43,119 --> 00:21:46,330
these decks standard like Oh perspective

497
00:21:46,330 --> 00:21:48,279
levels forgive the simplification but

498
00:21:48,279 --> 00:21:49,779
it's basically a distributed network

499
00:21:49,779 --> 00:21:51,610
file system there's a simple REST API

500
00:21:51,610 --> 00:21:53,679
for powering and uploading and

501
00:21:53,679 --> 00:21:55,509
downloading this basically you give

502
00:21:55,509 --> 00:21:57,330
someone an URL and you can watch it it

503
00:21:57,330 --> 00:22:02,679
your your Outlook or anything so it's

504
00:22:02,679 --> 00:22:04,210
and it's pretty simple to use because

505
00:22:04,210 --> 00:22:05,860
it's a standard component of the cloud I

506
00:22:05,860 --> 00:22:07,990
as a consumer because I don't need to

507
00:22:07,990 --> 00:22:09,730
worry about it and it's separate from

508
00:22:09,730 --> 00:22:12,820
all the instances you you you set up so

509
00:22:12,820 --> 00:22:17,529
it's basically the data are safe and

510
00:22:17,529 --> 00:22:19,899
finally once the once the marginal

511
00:22:19,899 --> 00:22:21,820
architects aren't Swift then the

512
00:22:21,820 --> 00:22:23,740
original requester can poll for the

513
00:22:23,740 --> 00:22:25,809
results and wait for the test results to

514
00:22:25,809 --> 00:22:27,940
right and then do its decision and the

515
00:22:27,940 --> 00:22:31,809
new and finally there's also a web

516
00:22:31,809 --> 00:22:33,970
divide this results browser which

517
00:22:33,970 --> 00:22:37,419
developers can use and it presents the

518
00:22:37,419 --> 00:22:39,009
test results and you have links to the

519
00:22:39,009 --> 00:22:42,129
artifacts involved although my sister II

520
00:22:42,129 --> 00:22:44,590
so it's mostly developer tool but it's

521
00:22:44,590 --> 00:22:46,779
completely independent of the workers

522
00:22:46,779 --> 00:22:51,879
and yeah and the policy entity so it's

523
00:22:51,879 --> 00:22:56,169
possible and it's not critical and the

524
00:22:56,169 --> 00:22:59,289
whole infrastructure has due to chance

525
00:22:59,289 --> 00:23:00,990
so that's

526
00:23:00,990 --> 00:23:04,110
when you start deployment management so

527
00:23:04,110 --> 00:23:06,660
it's very simple to deploy all this into

528
00:23:06,660 --> 00:23:09,929
three local Lexi containers and with the

529
00:23:09,929 --> 00:23:11,760
exact same one command line you can also

530
00:23:11,760 --> 00:23:13,080
deploy them to production

531
00:23:13,080 --> 00:23:16,350
say OpenStack and I can redeploy the

532
00:23:16,350 --> 00:23:17,640
entire infrastructure within minutes

533
00:23:17,640 --> 00:23:21,450
without losing any data and yeah the

534
00:23:21,450 --> 00:23:23,130
whole thing is maybe two or three online

535
00:23:23,130 --> 00:23:25,590
on two or three hundred lines of code so

536
00:23:25,590 --> 00:23:27,720
which is by the same size as a single

537
00:23:27,720 --> 00:23:34,740
XML shown for Jenkins to see so now we

538
00:23:34,740 --> 00:23:38,150
have in this how did it change our body

539
00:23:38,150 --> 00:23:40,860
it perfect it provides an effective

540
00:23:40,860 --> 00:23:43,740
counter space for developer the

541
00:23:43,740 --> 00:23:45,929
characters of course as a developer the

542
00:23:45,929 --> 00:23:48,390
better you make your tests the harder it

543
00:23:48,390 --> 00:23:49,770
is for other people to break the

544
00:23:49,770 --> 00:23:52,080
software because of this reverse

545
00:23:52,080 --> 00:23:55,200
dependency triggering for example new

546
00:23:55,200 --> 00:23:57,090
Carlos has a tendency to break let's see

547
00:23:57,090 --> 00:24:01,350
or at my world or your ex libraries or

548
00:24:01,350 --> 00:24:03,840
servers opportunity to break cute and in

549
00:24:03,840 --> 00:24:05,940
turn your voices are cute and to break a

550
00:24:05,940 --> 00:24:09,120
knee and inevitably do we have tons of

551
00:24:09,120 --> 00:24:11,309
KDE tests over cute maintainer always

552
00:24:11,309 --> 00:24:13,500
there's a hard time to land new cute

553
00:24:13,500 --> 00:24:16,080
versions and I guess they're swearing on

554
00:24:16,080 --> 00:24:18,750
this whole time but as I said once you

555
00:24:18,750 --> 00:24:20,160
actually get into green when you

556
00:24:20,160 --> 00:24:22,970
contended with confidence that's nice

557
00:24:22,970 --> 00:24:25,559
the other effect is these cost package

558
00:24:25,559 --> 00:24:27,420
changes I mentioned library transitions

559
00:24:27,420 --> 00:24:30,179
and so on fiber man completely or not at

560
00:24:30,179 --> 00:24:32,190
all and before ever second foot-post if

561
00:24:32,190 --> 00:24:35,100
you don't finish it all the way through

562
00:24:35,100 --> 00:24:38,790
and this both insurance that you always

563
00:24:38,790 --> 00:24:41,880
have with development series and it also

564
00:24:41,880 --> 00:24:43,920
makes the release seem like much more

565
00:24:43,920 --> 00:24:47,250
easy and of course as developer you can

566
00:24:47,250 --> 00:24:48,320
why

567
00:24:48,320 --> 00:24:49,880
think all the time you want against the

568
00:24:49,880 --> 00:24:52,250
machine but uh this deadline I need to

569
00:24:52,250 --> 00:24:55,010
meet feature freeze and whatnot machine

570
00:24:55,010 --> 00:24:57,140
is very patient and it won't give you

571
00:24:57,140 --> 00:24:59,120
anything so you need to do your job

572
00:24:59,120 --> 00:25:03,260
properly but of course like there is no

573
00:25:03,260 --> 00:25:05,900
free lunch it comes with a cost as a

574
00:25:05,900 --> 00:25:08,240
developer you have a large amount of

575
00:25:08,240 --> 00:25:10,790
tests then you need to keep the tests

576
00:25:10,790 --> 00:25:13,130
actually running and for the most part

577
00:25:13,130 --> 00:25:15,050
that's of course they can break the

578
00:25:15,050 --> 00:25:17,720
costumers it will change the code but

579
00:25:17,720 --> 00:25:19,460
sometimes they also break for entirely

580
00:25:19,460 --> 00:25:22,100
unrelated reasons like sometimes it's

581
00:25:22,100 --> 00:25:24,650
valid configuration changes and its own

582
00:25:24,650 --> 00:25:26,240
website that you are talking to in the

583
00:25:26,240 --> 00:25:29,180
past changes almost out in which cases

584
00:25:29,180 --> 00:25:30,740
already natural regressions in your own

585
00:25:30,740 --> 00:25:33,620
software but still I mean people are

586
00:25:33,620 --> 00:25:36,680
chasing test equations which are not

587
00:25:36,680 --> 00:25:40,130
entirely obvious at first and of course

588
00:25:40,130 --> 00:25:41,900
also having test infrastructure which is

589
00:25:41,900 --> 00:25:43,970
able to process tests at this scale is a

590
00:25:43,970 --> 00:25:46,520
lot of pilot week so we are basically

591
00:25:46,520 --> 00:25:48,590
building the reliable CI service and

592
00:25:48,590 --> 00:25:52,790
talk often like naturally unreliable

593
00:25:52,790 --> 00:25:55,430
pool of hardware and status so you need

594
00:25:55,430 --> 00:25:56,870
to invest a little bit on keeping that

595
00:25:56,870 --> 00:25:59,240
running I mean this fine gentleman over

596
00:25:59,240 --> 00:26:00,890
there took over the maintenance of that

597
00:26:00,890 --> 00:26:03,080
before it is how your lord of the gory

598
00:26:03,080 --> 00:26:05,900
details of tracking down come losses and

599
00:26:05,900 --> 00:26:11,990
whatnot and our another big problem that

600
00:26:11,990 --> 00:26:13,720
we face in the bunch of is downstream is

601
00:26:13,720 --> 00:26:16,430
the important mall of broken tests and

602
00:26:16,430 --> 00:26:18,950
then as I said we have so many tests no

603
00:26:18,950 --> 00:26:20,990
and Muslim comes straight from Devon but

604
00:26:20,990 --> 00:26:24,080
Devon doesn't get yet so eventually the

605
00:26:24,080 --> 00:26:25,580
failures then don't ask for support

606
00:26:25,580 --> 00:26:27,320
every new ruby version that we import

607
00:26:27,320 --> 00:26:29,450
tends to break two or three modules and

608
00:26:29,450 --> 00:26:31,370
in the winter we just don't have the

609
00:26:31,370 --> 00:26:33,350
manpower or quite honestly the interest

610
00:26:33,350 --> 00:26:35,660
of tracking them down so we just tend to

611
00:26:35,660 --> 00:26:40,100
ignore us but by not after a few months

612
00:26:40,100 --> 00:26:42,260
of using this people can use sir it and

613
00:26:42,260 --> 00:26:45,320
nobody will discuss it anymore I mean

614
00:26:45,320 --> 00:26:47,420
people do see the value and so the thing

615
00:26:47,420 --> 00:26:49,670
that we do discuss about is tweaking the

616
00:26:49,670 --> 00:26:51,970
policy and make

617
00:26:51,970 --> 00:26:53,740
the infrastructure or may be discussing

618
00:26:53,740 --> 00:26:55,360
how to add in your architecture to it

619
00:26:55,360 --> 00:26:58,090
and so on so in general working people a

620
00:26:58,090 --> 00:27:04,900
little more safe that way so and that

621
00:27:04,900 --> 00:27:06,370
was really great for software which is

622
00:27:06,370 --> 00:27:07,750
native to the point to where we are the

623
00:27:07,750 --> 00:27:12,630
artistry say install juju or unity or

624
00:27:12,630 --> 00:27:16,480
snappy but as I said it doesn't work so

625
00:27:16,480 --> 00:27:19,120
well when we are just a balance tree

626
00:27:19,120 --> 00:27:21,580
so of course these test finds box and

627
00:27:21,580 --> 00:27:23,650
keep them formatting in development

628
00:27:23,650 --> 00:27:25,870
series all the time but we don't need to

629
00:27:25,870 --> 00:27:27,970
deal with them and fall backs upstream

630
00:27:27,970 --> 00:27:29,800
and local taxes and so on and we're

631
00:27:29,800 --> 00:27:32,650
doing this but it points out that

632
00:27:32,650 --> 00:27:34,900
running them individual only is too late

633
00:27:34,900 --> 00:27:36,670
for most of the base because in the

634
00:27:36,670 --> 00:27:38,080
winter most of the code in the winter

635
00:27:38,080 --> 00:27:43,210
just basically happens to accidents so

636
00:27:43,210 --> 00:27:45,340
what I really need to do is to put all

637
00:27:45,340 --> 00:27:47,770
of this upstream so tests already

638
00:27:47,770 --> 00:27:51,250
running in Debian and we see here kwin

639
00:27:51,250 --> 00:27:53,710
failed like sometimes like half a year

640
00:27:53,710 --> 00:27:56,410
ago and nobody notices because nobody

641
00:27:56,410 --> 00:27:58,480
gets the element but that's work

642
00:27:58,480 --> 00:28:00,610
underway to actually enable dating and

643
00:28:00,610 --> 00:28:07,120
Debian as well and my stuff but the

644
00:28:07,120 --> 00:28:08,440
wheel place where I want to hook this

645
00:28:08,440 --> 00:28:11,350
engine is upstream I'm Emily involved in

646
00:28:11,350 --> 00:28:13,660
the system the community is a developer

647
00:28:13,660 --> 00:28:16,720
both upstream and downstream and back

648
00:28:16,720 --> 00:28:18,070
then when we had to do an upstream

649
00:28:18,070 --> 00:28:20,350
release of system B it took me like a

650
00:28:20,350 --> 00:28:22,900
week of to to figure out all the tests

651
00:28:22,900 --> 00:28:24,460
regressions that it cost one side

652
00:28:24,460 --> 00:28:26,740
package to the opportunities and it's

653
00:28:26,740 --> 00:28:29,530
big pain point so one of these days I

654
00:28:29,530 --> 00:28:32,380
tweaked our package to be able to to

655
00:28:32,380 --> 00:28:35,140
build an unmodified upstream source

656
00:28:35,140 --> 00:28:37,420
directive on a pull request without any

657
00:28:37,420 --> 00:28:39,700
patches and then adjust the tests so

658
00:28:39,700 --> 00:28:41,860
that they would drop some there in a bit

659
00:28:41,860 --> 00:28:44,320
of specific expectancies and so that we

660
00:28:44,320 --> 00:28:46,240
are basically able to run our those

661
00:28:46,240 --> 00:28:47,560
streams to the test

662
00:28:47,560 --> 00:28:50,110
straighten up to source and then

663
00:28:50,110 --> 00:28:51,490
integrated all of this is get up and

664
00:28:51,490 --> 00:28:53,560
give up this wonderful red books in the

665
00:28:53,560 --> 00:28:54,000
face

666
00:28:54,000 --> 00:28:57,570
makes it quite easy to interface with so

667
00:28:57,570 --> 00:29:00,120
that nowadays every poor word fest needs

668
00:29:00,120 --> 00:29:02,160
to that needs to pass exactly these

669
00:29:02,160 --> 00:29:04,320
tests so this is an example of trappings

670
00:29:04,320 --> 00:29:07,440
belong and this is no development

671
00:29:07,440 --> 00:29:10,620
standard because when this happens the

672
00:29:10,620 --> 00:29:12,270
change is still fresh in the developers

673
00:29:12,270 --> 00:29:14,610
mind it won't land the telephone face

674
00:29:14,610 --> 00:29:17,210
and as a result of that every commit and

675
00:29:17,210 --> 00:29:19,410
extension every release assistant need

676
00:29:19,410 --> 00:29:21,900
is buildable everywhere it passes the

677
00:29:21,900 --> 00:29:25,440
tests and it has we had a good releases

678
00:29:25,440 --> 00:29:27,600
finally and so that easily better

679
00:29:27,600 --> 00:29:30,480
enables things like ATP pH so basically

680
00:29:30,480 --> 00:29:32,880
average takes cover master by student in

681
00:29:32,880 --> 00:29:35,220
Texas runs the test upload to this to be

682
00:29:35,220 --> 00:29:39,390
anything if everything is great and so

683
00:29:39,390 --> 00:29:41,310
it's fairly safe to use these ten bills

684
00:29:41,310 --> 00:29:42,840
because we know it's not going to break

685
00:29:42,840 --> 00:29:46,620
the computer and basically packaging any

686
00:29:46,620 --> 00:29:49,080
opportunities now becomes an exercise in

687
00:29:49,080 --> 00:29:51,030
vitamin to exchange norm which is really

688
00:29:51,030 --> 00:29:53,910
the thing that you want to be in and the

689
00:29:53,910 --> 00:29:56,040
system we limited to system D so this is

690
00:29:56,040 --> 00:29:59,100
generic facility and we can interface

691
00:29:59,100 --> 00:30:01,440
with other projects and github of course

692
00:30:01,440 --> 00:30:03,330
it's always pass city issue and you need

693
00:30:03,330 --> 00:30:05,150
to negotiate exchange of some

694
00:30:05,150 --> 00:30:08,340
credentials but by and large this is

695
00:30:08,340 --> 00:30:13,410
possible okay well thanks for your

696
00:30:13,410 --> 00:30:17,100
attention so we still have a couple

697
00:30:17,100 --> 00:30:19,410
minutes death purposes and if we don't

698
00:30:19,410 --> 00:30:21,090
manage to do it here got me in the

699
00:30:21,090 --> 00:30:23,490
hallway or writing an email final now I

700
00:30:23,490 --> 00:30:27,800
see I have to talk about this stuff

701
00:30:34,760 --> 00:30:38,920
[Applause]

702
00:30:43,800 --> 00:30:46,970
[Music]

703
00:31:03,950 --> 00:31:08,580
yeah yeah so the question was how do you

704
00:31:08,580 --> 00:31:10,830
handle groups of packages which need

705
00:31:10,830 --> 00:31:12,450
some and together and this is somebody

706
00:31:12,450 --> 00:31:14,640
the proposed migrations it's so

707
00:31:14,640 --> 00:31:16,950
basically for example you upload the new

708
00:31:16,950 --> 00:31:19,440
gtk which breaks the old unity and then

709
00:31:19,440 --> 00:31:21,660
upload the new unity which depends on

710
00:31:21,660 --> 00:31:24,270
the new TDK then and this British

711
00:31:24,270 --> 00:31:27,240
purpose is to figure out like two

712
00:31:27,240 --> 00:31:29,640
decades under so unity Sunnis horrible

713
00:31:29,640 --> 00:31:31,440
with both together are insoluble and

714
00:31:31,440 --> 00:31:33,780
both together if I run the tests of the

715
00:31:33,780 --> 00:31:35,490
new unity against the tests of the new

716
00:31:35,490 --> 00:31:38,220
TDK then it's free and then it then says

717
00:31:38,220 --> 00:31:40,350
both as a group so basically if you do a

718
00:31:40,350 --> 00:31:44,250
library transition - 2.5 2.6 you're

719
00:31:44,250 --> 00:31:45,990
going to add like a thousand uploads and

720
00:31:45,990 --> 00:31:47,670
the station for powers and wants to face

721
00:31:47,670 --> 00:31:49,230
the last forum and all then this is the

722
00:31:49,230 --> 00:31:52,200
giant time and this is the real point so

723
00:31:52,200 --> 00:31:54,990
to get these cross package updates done

724
00:31:54,990 --> 00:31:57,450
in an atomic and safe way and this

725
00:31:57,450 --> 00:31:59,100
involves a lot of reasoning about

726
00:31:59,100 --> 00:32:00,930
dependency trees and it's all a bit of

727
00:32:00,930 --> 00:32:02,850
black magic I didn't fight this so this

728
00:32:02,850 --> 00:32:05,510
is the work of them in mostly for meals

729
00:32:05,510 --> 00:32:07,710
I'm very happy that we could just reuse

730
00:32:07,710 --> 00:32:10,560
this so they mean us lose that all so

731
00:32:10,560 --> 00:32:12,360
stuff that migrates all my steps in

732
00:32:12,360 --> 00:32:15,560
testing and also

733
00:32:58,540 --> 00:33:01,490
but the only thing we know the packet

734
00:33:01,490 --> 00:33:04,340
tests is the actual binaries that are in

735
00:33:04,340 --> 00:33:06,200
your kite so we offered some things to

736
00:33:06,200 --> 00:33:07,850
develop the house and that gets a couple

737
00:33:07,850 --> 00:33:09,830
of deaths and they get installed into an

738
00:33:09,830 --> 00:33:11,360
actual system and you only run those

739
00:33:11,360 --> 00:33:17,050
yeah installation yes

740
00:33:26,230 --> 00:33:56,290
oh yeah because so the question is when

741
00:33:56,290 --> 00:33:57,910
you fight among a screen test which are

742
00:33:57,910 --> 00:33:59,919
designed to run against the training

743
00:33:59,919 --> 00:34:02,380
instead of the sister are they do this

744
00:34:02,380 --> 00:34:04,390
and this is indeed like one of the

745
00:34:04,390 --> 00:34:06,760
challenges so if you have told like if

746
00:34:06,760 --> 00:34:08,800
you have the only thing here this will

747
00:34:08,800 --> 00:34:11,050
test this system install package this is

748
00:34:11,050 --> 00:34:12,940
not against the source tree but if you

749
00:34:12,940 --> 00:34:14,830
have pages upstream which are only one

750
00:34:14,830 --> 00:34:17,590
in my check and of style you have to

751
00:34:17,590 --> 00:34:20,020
modify them to use the binary install of

752
00:34:20,020 --> 00:34:22,210
the system because otherwise testing the

753
00:34:22,210 --> 00:34:24,010
pro 3 is not testing enough you might

754
00:34:24,010 --> 00:34:25,750
have a perfectly well running throw 3

755
00:34:25,750 --> 00:34:28,210
for the mess up the packaging so for

756
00:34:28,210 --> 00:34:29,590
example you forget to actually install a

757
00:34:29,590 --> 00:34:32,260
power so the tests need to run what's in

758
00:34:32,260 --> 00:34:38,649
the system sure I mean for some absolute

759
00:34:38,649 --> 00:34:41,050
essence it's easy to do like you know

760
00:34:41,050 --> 00:34:44,739
introduce like Rio or maybe a - install

761
00:34:44,739 --> 00:34:46,929
tests or something you can automate as

762
00:34:46,929 --> 00:34:49,480
an a install check interface but not a

763
00:34:49,480 --> 00:34:51,520
lot of options of values is there so

764
00:34:51,520 --> 00:34:54,190
it's easy to change the upstream test

765
00:34:54,190 --> 00:34:55,719
rate to run against the system then of

766
00:34:55,719 --> 00:34:57,280
course always preferable to use that

767
00:34:57,280 --> 00:35:00,520
sometimes it's hard and I would say then

768
00:35:00,520 --> 00:35:03,609
just by the smoke test so the point of

769
00:35:03,609 --> 00:35:05,740
that is not ready to exercise the little

770
00:35:05,740 --> 00:35:07,840
gory details of your API that's what

771
00:35:07,840 --> 00:35:09,369
unit tests are for and this is fine

772
00:35:09,369 --> 00:35:11,230
someone and they check the point of that

773
00:35:11,230 --> 00:35:13,690
is test integration the packaging so

774
00:35:13,690 --> 00:35:16,030
that you can write your own it's a small

775
00:35:16,030 --> 00:35:17,619
test which only makes sure that the

776
00:35:17,619 --> 00:35:19,600
package by and large works let's say for

777
00:35:19,600 --> 00:35:22,050
pachi to install the package and

778
00:35:22,050 --> 00:35:25,380
it's like a ball WWWE they say HML and

779
00:35:25,380 --> 00:35:26,670
you do that with your get and make sure

780
00:35:26,670 --> 00:35:28,860
that you get back the following expect

781
00:35:28,860 --> 00:35:32,220
and this is actually in this case maybe

782
00:35:32,220 --> 00:35:34,380
easier problem but I hope that since

783
00:35:34,380 --> 00:35:36,570
more people are doing this up streams

784
00:35:36,570 --> 00:35:39,930
are more and like willing to take

785
00:35:39,930 --> 00:35:42,060
patches which make your test suite run

786
00:35:42,060 --> 00:35:43,890
against these forces too as well first

787
00:35:43,890 --> 00:35:45,660
up with no mattress for well for the

788
00:35:45,660 --> 00:35:48,000
insult person for example the DVD

789
00:35:48,000 --> 00:35:49,800
package that he has a binary which says

790
00:35:49,800 --> 00:35:51,930
she live in flow test that you can just

791
00:35:51,930 --> 00:35:54,090
install and run because they were doing

792
00:35:54,090 --> 00:35:56,580
the same thing and rs3 for example so it

793
00:35:56,580 --> 00:36:00,620
becomes a problem but it is it is

794
00:36:14,810 --> 00:36:17,810
yes

795
00:36:27,530 --> 00:36:31,620
let's say even if you test it against

796
00:36:31,620 --> 00:36:33,570
adultery that's still better than doing

797
00:36:33,570 --> 00:36:35,670
nothing at all because it still gives

798
00:36:35,670 --> 00:36:37,440
you the thing that you feel the

799
00:36:37,440 --> 00:36:39,390
dependency changes and then your bill

800
00:36:39,390 --> 00:36:41,250
doesn't work anymore because for example

801
00:36:41,250 --> 00:36:44,310
key changes API ok wait then it doesn't

802
00:36:44,310 --> 00:36:46,350
build anymore it's still points that out

803
00:36:46,350 --> 00:36:48,270
and introspective you soon until your

804
00:36:48,270 --> 00:36:50,760
face came in so it's useful it's just

805
00:36:50,760 --> 00:36:53,580
not that say using the full extent of

806
00:36:53,580 --> 00:36:55,230
what it's supposed to do but these

807
00:36:55,230 --> 00:36:56,880
ripple tests are definitely useful by

808
00:36:56,880 --> 00:36:59,070
themselves and in fact that's what KDHE

809
00:36:59,070 --> 00:37:11,550
do so they only so lately more and more

810
00:37:11,550 --> 00:37:14,190
program are using vertical and the test

811
00:37:14,190 --> 00:37:17,130
suite in some cases going to generate

812
00:37:17,130 --> 00:37:19,290
some intermittent issue so how do you

813
00:37:19,290 --> 00:37:23,280
manage those intermediate intermittent

814
00:37:23,280 --> 00:37:25,680
issues like in the test phase for some

815
00:37:25,680 --> 00:37:27,270
time is going to work sometimes it won't

816
00:37:27,270 --> 00:37:31,200
I know that it's a bit so these are

817
00:37:31,200 --> 00:37:35,130
always our favorites of course and so I

818
00:37:35,130 --> 00:37:37,830
mean like everyone else if it fails like

819
00:37:37,830 --> 00:37:39,840
one of the ten cases but banking you

820
00:37:39,840 --> 00:37:43,410
push the retry button and see like in

821
00:37:43,410 --> 00:37:48,030
reality this actually has a little

822
00:37:48,030 --> 00:37:50,310
recycle icons few nice progressions so I

823
00:37:50,310 --> 00:37:51,870
develop the fenders which by their own

824
00:37:51,870 --> 00:37:54,210
test if it happens like one out of ten

825
00:37:54,210 --> 00:37:56,730
it's okay ish if it happens more than

826
00:37:56,730 --> 00:37:57,870
someone should actually sits out a

827
00:37:57,870 --> 00:38:01,680
debugger sorry and as I said I mean the

828
00:38:01,680 --> 00:38:03,780
point of this needs to be really easy to

829
00:38:03,780 --> 00:38:06,030
reproduce it as locally so basically

830
00:38:06,030 --> 00:38:09,300
with these over packaged test 41.78 when

831
00:38:09,300 --> 00:38:14,670
I showed these and there is tools which

832
00:38:14,670 --> 00:38:16,590
fill the and images for you some of the

833
00:38:16,590 --> 00:38:18,750
images and images are basically almost

834
00:38:18,750 --> 00:38:21,480
the same than without images or we have

835
00:38:21,480 --> 00:38:21,810
to

836
00:38:21,810 --> 00:38:24,090
these standard containers and there's

837
00:38:24,090 --> 00:38:25,910
existing tools to filter routes and

838
00:38:25,910 --> 00:38:28,590
there's not really a lot of steps to

839
00:38:28,590 --> 00:38:30,030
walk for producing them yourself and

840
00:38:30,030 --> 00:38:32,580
this is switches for example detect

841
00:38:32,580 --> 00:38:35,190
shell when the test fails then you get a

842
00:38:35,190 --> 00:38:37,170
new Knesset into the test set and then

843
00:38:37,170 --> 00:38:40,650
debug the test and cycle faster and this

844
00:38:40,650 --> 00:38:43,320
is basically the daily quarry builder

845
00:38:43,320 --> 00:38:44,880
what the developer needs to do the taste

846
00:38:44,880 --> 00:38:48,830
test because spoken test

847
00:39:01,290 --> 00:39:05,390
can you tell me about lying computo

848
00:39:05,390 --> 00:39:20,610
sorry so we run off of this so x86 and

849
00:39:20,610 --> 00:39:25,140
PowerPC v1 on okay the question was can

850
00:39:25,140 --> 00:39:27,120
I tell a little bit about the bill

851
00:39:27,120 --> 00:39:30,000
condon t so we are currently three

852
00:39:30,000 --> 00:39:31,410
OpenStack installations in canonical

853
00:39:31,410 --> 00:39:33,420
where basically whenever we have

854
00:39:33,420 --> 00:39:37,110
hardware bits hosted in there and so we

855
00:39:37,110 --> 00:39:41,820
come here I think 17 years of power

856
00:39:41,820 --> 00:39:44,550
works for x86 so they conserve I feel

857
00:39:44,550 --> 00:39:48,000
the 16 is 64 and about 28 power workers

858
00:39:48,000 --> 00:39:51,560
for policy and as I said for arm and

859
00:39:51,560 --> 00:39:55,260
again these areas we can't run in the

860
00:39:55,260 --> 00:39:57,480
end set so we use a lexical telephone or

861
00:39:57,480 --> 00:39:59,760
send basically need to scale and to the

862
00:39:59,760 --> 00:40:04,410
degree the maximum possible Q line is

863
00:40:04,410 --> 00:40:06,870
still power so of course this is a this

864
00:40:06,870 --> 00:40:08,640
basically determines the delay that

865
00:40:08,640 --> 00:40:10,410
you're gonna face when you try to land

866
00:40:10,410 --> 00:40:12,690
big updates like you see so and

867
00:40:12,690 --> 00:40:14,850
obviously if you design it so that you

868
00:40:14,850 --> 00:40:17,190
can manage energy in half a day and most

869
00:40:17,190 --> 00:40:18,690
of the time your infrastructure going to

870
00:40:18,690 --> 00:40:21,240
be there doing nothing so this is the

871
00:40:21,240 --> 00:40:24,090
capacity issue and as first one this

872
00:40:24,090 --> 00:40:26,850
protest also one test for PTAs and we

873
00:40:26,850 --> 00:40:28,590
also run test our streams and they all

874
00:40:28,590 --> 00:40:29,359
need to

875
00:40:29,359 --> 00:40:32,250
think so this is indeed a bottleneck for

876
00:40:32,250 --> 00:40:34,170
polishing the basis we never have enough

877
00:40:34,170 --> 00:40:36,450
so as a developer I need to be a little

878
00:40:36,450 --> 00:40:39,119
patient sometimes that means these

879
00:40:39,119 --> 00:40:41,130
packages find and then go through and I

880
00:40:41,130 --> 00:40:44,010
can now walk but fertility so there is

881
00:40:44,010 --> 00:40:47,099
no path subjectivity but I mean in

882
00:40:47,099 --> 00:40:49,319
return like the protesters figure the

883
00:40:49,319 --> 00:40:51,630
more important your packages and the

884
00:40:51,630 --> 00:40:54,119
more the gaining confidence expect

885
00:40:54,119 --> 00:40:56,430
pickups because if you have virginity it

886
00:40:56,430 --> 00:40:58,170
breaks free packages which nobody looks

887
00:40:58,170 --> 00:41:01,049
at you're gonna discover this and so you

888
00:41:01,049 --> 00:41:04,530
believe and so it's worth doing this I'm

889
00:41:04,530 --> 00:41:06,119
not sure whether this was your question

890
00:41:06,119 --> 00:41:09,809
or your specific so the point is you

891
00:41:09,809 --> 00:41:11,700
want an open sex so that maintaining the

892
00:41:11,700 --> 00:41:13,740
infrastructure is someone else forward I

893
00:41:13,740 --> 00:41:15,450
don't want to maintain the data center

894
00:41:15,450 --> 00:41:17,640
this is I have to stop and they do this

895
00:41:17,640 --> 00:41:20,579
fantastically and my largest consumer I

896
00:41:20,579 --> 00:41:23,039
do know like we know our boots and

897
00:41:23,039 --> 00:41:24,960
nobody need and I have to get money yet

898
00:41:24,960 --> 00:41:33,140
and it just met what a question here

899
00:41:43,130 --> 00:41:46,760
in your control file it had isolates

900
00:41:46,760 --> 00:41:51,380
container oscillation - Taylor that's

901
00:41:53,060 --> 00:41:57,750
fun yes exactly so is it like a keyboard

902
00:41:57,750 --> 00:41:59,700
or you have to find another controller

903
00:41:59,700 --> 00:42:01,500
to find the container

904
00:42:01,500 --> 00:42:03,990
I know these are fixed keyboards so

905
00:42:03,990 --> 00:42:06,000
these are defying capabilities and yoga

906
00:42:06,000 --> 00:42:09,030
pipes test project so all of these new

907
00:42:09,030 --> 00:42:10,800
true and isolation continue and there's

908
00:42:10,800 --> 00:42:13,020
a couple of others to have me I mean

909
00:42:13,020 --> 00:42:17,850
sometimes we need new ones but yeah so

910
00:42:17,850 --> 00:42:19,650
they basically say it write them on this

911
00:42:19,650 --> 00:42:21,150
test and it sure would suppose a

912
00:42:21,150 --> 00:42:22,980
statement say so in your test that

913
00:42:22,980 --> 00:42:23,700
doesn't happen

914
00:42:23,700 --> 00:42:25,740
I know isolation and likewise if you're

915
00:42:25,740 --> 00:42:27,210
trying to run the network ready to test

916
00:42:27,210 --> 00:42:29,700
on and exceed it will say sorry it's not

917
00:42:29,700 --> 00:42:31,710
a full machine so it gets chipped so

918
00:42:31,710 --> 00:42:34,860
this base is safe and the other if you

919
00:42:34,860 --> 00:42:36,510
do try to run it on your own machine and

920
00:42:36,510 --> 00:42:40,680
it will do bad things so yeah so if you

921
00:42:40,680 --> 00:42:42,390
want that you want then you need to talk

922
00:42:42,390 --> 00:42:45,240
to like yoga pants disguise like me and

923
00:42:45,240 --> 00:42:55,549
then we find anyone any other question

924
00:43:01,850 --> 00:43:04,509
hello

925
00:43:16,110 --> 00:43:19,199
[Music]

926
00:43:49,130 --> 00:43:52,260
[Music]

927
00:44:01,540 --> 00:44:04,639
[Music]

928
00:44:09,460 --> 00:44:14,090
we execute so original you only had a

929
00:44:14,090 --> 00:44:15,740
clouded six available so that sort of

930
00:44:15,740 --> 00:44:17,930
stuff available in particular there's no

931
00:44:17,930 --> 00:44:19,460
X or it's nobody home

932
00:44:19,460 --> 00:44:21,440
but the test can do whatever it wants to

933
00:44:21,440 --> 00:44:23,350
the end so we do have transport

934
00:44:23,350 --> 00:44:25,930
install on unity which basically install

935
00:44:25,930 --> 00:44:28,900
the desktop bits and then configure the

936
00:44:28,900 --> 00:44:31,210
dummy export pilot so that you can start

937
00:44:31,210 --> 00:44:33,370
lightly and we can start unity and then

938
00:44:33,370 --> 00:44:35,740
maybe get the screen up and make sure

939
00:44:35,740 --> 00:44:38,580
that it works and we do have tests for

940
00:44:38,580 --> 00:44:42,130
testing to decay and selenium producing

941
00:44:42,130 --> 00:44:44,680
are the testable so that actually what

942
00:44:44,680 --> 00:44:47,380
swallow my sleep and we do this but of

943
00:44:47,380 --> 00:44:49,150
course it's limited to what you can you

944
00:44:49,150 --> 00:44:52,960
need to do with like the dumb advisor so

945
00:44:52,960 --> 00:44:54,580
you can't rely on an extra graphics out

946
00:44:54,580 --> 00:44:56,800
there so in order to do that I mean we

947
00:44:56,800 --> 00:44:58,600
do have use cases reports helper would

948
00:44:58,600 --> 00:45:01,480
like to run contest or expose test an

949
00:45:01,480 --> 00:45:03,760
extra media machine extra ATI a machine

950
00:45:03,760 --> 00:45:06,160
and we did talk about this and a

951
00:45:06,160 --> 00:45:08,710
principle so we even have a plan how to

952
00:45:08,710 --> 00:45:10,570
implement this so the tests can be clear

953
00:45:10,570 --> 00:45:13,510
I need to run the next round but we

954
00:45:13,510 --> 00:45:15,610
didn't implement this yet so this would

955
00:45:15,610 --> 00:45:18,130
require sending out via my in machines

956
00:45:18,130 --> 00:45:20,740
by Clifford Mars or the retinal

957
00:45:20,740 --> 00:45:22,660
satellite so basically that you can

958
00:45:22,660 --> 00:45:24,190
automatically interact with rely on

959
00:45:24,190 --> 00:45:25,990
these machines at the contest there we

960
00:45:25,990 --> 00:45:29,230
have just don't care and capability but

961
00:45:29,230 --> 00:45:33,480
we'd like the structure with the lower

962
00:45:42,740 --> 00:45:48,810
but the key one direction yeah so this

963
00:45:48,810 --> 00:45:50,550
is like anything which uses human

964
00:45:50,550 --> 00:45:52,260
interaction like a test which is to the

965
00:45:52,260 --> 00:45:53,790
direction this is obviously not the

966
00:45:53,790 --> 00:45:56,100
target would be I mean this is not

967
00:45:56,100 --> 00:45:58,200
solving every kind of test case in my

968
00:45:58,200 --> 00:46:00,570
head but for the majority of fits you

969
00:46:00,570 --> 00:46:01,950
should actually try to run the test

970
00:46:01,950 --> 00:46:03,690
three so that it runs automatically so

971
00:46:03,690 --> 00:46:05,910
there is for example autopilot which can

972
00:46:05,910 --> 00:46:08,670
test that's the replication not a

973
00:46:08,670 --> 00:46:10,740
directive grade because humans don't

974
00:46:10,740 --> 00:46:12,990
scale but then we don't always be these

975
00:46:12,990 --> 00:46:15,618
times and

976
00:46:27,550 --> 00:46:31,129
[Applause]

977
00:46:31,600 --> 00:46:34,659
[Music]

