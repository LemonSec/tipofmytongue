1
00:00:00,000 --> 00:00:02,060
you

2
00:00:19,080 --> 00:00:22,620
okay hello everyone let me start because

3
00:00:22,620 --> 00:00:27,170
we are slightly behind schedule

4
00:00:27,530 --> 00:00:33,270
so welcome my name is Josh Tina and I

5
00:00:33,270 --> 00:00:36,660
work for Cola Bora and Cola Bora is the

6
00:00:36,660 --> 00:00:39,000
architect and driving force behind

7
00:00:39,000 --> 00:00:41,370
putting Libra office in the cloud so

8
00:00:41,370 --> 00:00:44,070
this talk will be about debugging

9
00:00:44,070 --> 00:00:47,580
liberal his own line so Libra office

10
00:00:47,580 --> 00:00:51,150
itself is a very complicated but if we

11
00:00:51,150 --> 00:00:54,660
put the clouds into the equation it will

12
00:00:54,660 --> 00:00:58,680
be even more complicated so we will

13
00:00:58,680 --> 00:01:05,280
discuss several methods to debug this

14
00:01:05,280 --> 00:01:09,479
liberal fizz online application so the

15
00:01:09,479 --> 00:01:12,630
first topic is about the rendering so

16
00:01:12,630 --> 00:01:15,810
behind the scenes that is the concept

17
00:01:15,810 --> 00:01:20,630
so-called tired rendering for the online

18
00:01:20,630 --> 00:01:24,509
libre office we render the document into

19
00:01:24,509 --> 00:01:34,200
bitmaps into 268 by 268 PNG tiles and at

20
00:01:34,200 --> 00:01:36,750
the client side we put those tiles

21
00:01:36,750 --> 00:01:39,959
together and render the image but we

22
00:01:39,959 --> 00:01:43,380
also have an application the gtk tied

23
00:01:43,380 --> 00:01:46,880
viewer which can be used for debugging

24
00:01:46,880 --> 00:01:49,229
rendering issues so you don't have to

25
00:01:49,229 --> 00:01:53,429
set up the complete online environment

26
00:01:53,429 --> 00:01:58,380
in order to debug rendering problems so

27
00:01:58,380 --> 00:02:00,420
this gtk tied us part of the river of

28
00:02:00,420 --> 00:02:02,880
source code if you build the LibreOffice

29
00:02:02,880 --> 00:02:05,610
source tree you will have it and you can

30
00:02:05,610 --> 00:02:11,400
run it with this bin run tool is a shell

31
00:02:11,400 --> 00:02:15,810
script and it will present you the say

32
00:02:15,810 --> 00:02:19,770
the same thing as you would see in in

33
00:02:19,770 --> 00:02:23,069
the browser but sometimes there are

34
00:02:23,069 --> 00:02:25,500
differences between the the rendering of

35
00:02:25,500 --> 00:02:27,420
the actual desktop version and the

36
00:02:27,420 --> 00:02:30,000
tagging ring and this gtk tired viewer

37
00:02:30,000 --> 00:02:31,890
is a useful tool

38
00:02:31,890 --> 00:02:36,970
to debug those issues the next big topic

39
00:02:36,970 --> 00:02:41,260
is the is the connectivity problems so I

40
00:02:41,260 --> 00:02:48,420
present here a very simple set up where

41
00:02:48,420 --> 00:02:53,950
we have the browser the user the browser

42
00:02:53,950 --> 00:02:57,670
logs in to a file sharing solution where

43
00:02:57,670 --> 00:03:02,500
the files are in the cloud this file

44
00:03:02,500 --> 00:03:05,920
sharing solution will embed LibreOffice

45
00:03:05,920 --> 00:03:11,709
online into an iframe and the collab or

46
00:03:11,709 --> 00:03:13,959
online server will download the file

47
00:03:13,959 --> 00:03:17,410
from the file sharing solution and when

48
00:03:17,410 --> 00:03:19,810
we then we save the file it will upload

49
00:03:19,810 --> 00:03:25,180
it to there and we communicate with the

50
00:03:25,180 --> 00:03:29,290
collab or online server itself from the

51
00:03:29,290 --> 00:03:34,540
iframe the user browser so it is obvious

52
00:03:34,540 --> 00:03:38,500
that the communication must be

53
00:03:38,500 --> 00:03:43,870
bi-directional in all possible

54
00:03:43,870 --> 00:03:47,910
directions and it poses some problems

55
00:03:47,910 --> 00:03:53,380
then for example koala per online server

56
00:03:53,380 --> 00:03:58,269
is operating on the port 99 80 which is

57
00:03:58,269 --> 00:04:02,190
sometimes it's blocked by firewalls or

58
00:04:04,169 --> 00:04:06,639
you can have the collaborative online

59
00:04:06,639 --> 00:04:10,930
server behind load balancer or you can

60
00:04:10,930 --> 00:04:15,450
use a cell and the SSL Certificates must

61
00:04:15,450 --> 00:04:20,798
work across all all possible direction

62
00:04:20,798 --> 00:04:24,460
so we can have problems in self-signed

63
00:04:24,460 --> 00:04:26,289
certificates when collaborative online

64
00:04:26,289 --> 00:04:28,120
service certificate is not accepted by

65
00:04:28,120 --> 00:04:31,900
the file sharing solution or by the

66
00:04:31,900 --> 00:04:36,880
browser even you can do SSL offloading

67
00:04:36,880 --> 00:04:41,080
at the lower load balancer or you can

68
00:04:41,080 --> 00:04:44,460
use a reverse proxy to put

69
00:04:44,460 --> 00:04:49,349
to use the standard ports instead of the

70
00:04:49,349 --> 00:04:51,940
default port of call a brahmana's server

71
00:04:51,940 --> 00:04:58,240
so it's a it we have a few working and

72
00:04:58,240 --> 00:05:01,539
tested solution that we propose but

73
00:05:01,539 --> 00:05:06,190
users sometimes choose different setups

74
00:05:06,190 --> 00:05:10,870
and sometimes it's very hard to detect

75
00:05:10,870 --> 00:05:13,240
where the problems are so our helps here

76
00:05:13,240 --> 00:05:16,330
is there is the the built in that

77
00:05:16,330 --> 00:05:19,030
developer tool in the browser or we can

78
00:05:19,030 --> 00:05:21,430
read the logs of the rest server at the

79
00:05:21,430 --> 00:05:24,250
load balancer we should set the logging

80
00:05:24,250 --> 00:05:30,819
level to the to debug or at worst we can

81
00:05:30,819 --> 00:05:34,389
analyze the network traffic with via

82
00:05:34,389 --> 00:05:38,800
shark of course we can rely on the lower

83
00:05:38,800 --> 00:05:41,099
W as the the collaborative online

84
00:05:41,099 --> 00:05:46,449
WebSocket the daemon logs because it has

85
00:05:46,449 --> 00:05:50,500
a very very detailed logging capability

86
00:05:50,500 --> 00:05:52,810
so we have eight eight log levels but

87
00:05:52,810 --> 00:05:54,729
our critical error warning notice

88
00:05:54,729 --> 00:05:57,340
information debug and trace and you can

89
00:05:57,340 --> 00:05:59,229
set set this log level in the

90
00:05:59,229 --> 00:06:01,960
configuration file start server and it

91
00:06:01,960 --> 00:06:04,360
locks into the system journal or a

92
00:06:04,360 --> 00:06:08,349
separate log file or even on the console

93
00:06:08,349 --> 00:06:13,529
so whichever is the most convenient

94
00:06:17,090 --> 00:06:20,450
so for for the developers maybe is the

95
00:06:20,450 --> 00:06:26,800
easiest to run the thing locally I

96
00:06:27,280 --> 00:06:33,080
collected the information what is on

97
00:06:33,080 --> 00:06:39,310
this slide so when you configure the

98
00:06:39,310 --> 00:06:42,110
online component you enabled the

99
00:06:42,110 --> 00:06:45,950
debugging and you give the local libre

100
00:06:45,950 --> 00:06:49,700
office pass to run against probably we

101
00:06:49,700 --> 00:06:53,120
want to disable the SSL to make things a

102
00:06:53,120 --> 00:06:57,890
little bit less complicated and you have

103
00:06:57,890 --> 00:07:01,280
to create the cache directory and just

104
00:07:01,280 --> 00:07:05,410
then just issue the command make run and

105
00:07:05,410 --> 00:07:08,300
click on the link that is presented on

106
00:07:08,300 --> 00:07:12,010
on the console and that's all so you can

107
00:07:12,010 --> 00:07:16,010
read more about this in the in the

108
00:07:16,010 --> 00:07:23,330
readme in the in the source code so when

109
00:07:23,330 --> 00:07:27,890
you debug the the server part with gdb

110
00:07:27,890 --> 00:07:39,050
you want to add the non respond switch

111
00:07:39,050 --> 00:07:42,830
and set it to 1 so it will spawn only

112
00:07:42,830 --> 00:07:46,400
one instance which would limit the

113
00:07:46,400 --> 00:07:48,440
amount of concrete you running processes

114
00:07:48,440 --> 00:07:55,490
so also you can export this slip or

115
00:07:55,490 --> 00:07:58,070
debugger environment variable so the

116
00:07:58,070 --> 00:08:02,060
process will wait until you can attach

117
00:08:02,060 --> 00:08:05,320
the debugger

118
00:08:06,160 --> 00:08:12,040
and we you must note that the binaries

119
00:08:12,040 --> 00:08:15,310
use capabilities so you have to run GDB

120
00:08:15,310 --> 00:08:19,360
as route and it also learning in a

121
00:08:19,360 --> 00:08:23,380
chroot environment that you don't see

122
00:08:23,380 --> 00:08:30,250
your libera office installation so you

123
00:08:30,250 --> 00:08:32,289
must symlink your libre office directory

124
00:08:32,289 --> 00:08:37,360
into the root so the gdb can can see the

125
00:08:37,360 --> 00:08:44,710
LibreOffice another interesting

126
00:08:44,710 --> 00:08:50,560
debugging feature in online so basically

127
00:08:50,560 --> 00:08:55,210
we are implementing a protocol which

128
00:08:55,210 --> 00:08:58,380
sends commands such as keystrokes mouse

129
00:08:58,380 --> 00:09:01,690
movements you know comments and so on to

130
00:09:01,690 --> 00:09:04,600
live off score and it sends back ties

131
00:09:04,600 --> 00:09:07,060
and and Status Messages

132
00:09:07,060 --> 00:09:12,430
and we can record this traffic and we

133
00:09:12,430 --> 00:09:15,550
save it in in a trace file so you can

134
00:09:15,550 --> 00:09:17,170
set it in also in the in the

135
00:09:17,170 --> 00:09:20,530
configuration and later you can replay

136
00:09:20,530 --> 00:09:23,230
this trace file with the lowest rest

137
00:09:23,230 --> 00:09:27,210
tool so it's extremely useful to reduce

138
00:09:27,210 --> 00:09:32,620
the steps and even for creating unit

139
00:09:32,620 --> 00:09:35,040
tests

140
00:09:36,630 --> 00:09:43,339
and last but not least we have a very

141
00:09:43,339 --> 00:09:49,519
sophisticated debug mode in the browser

142
00:09:50,329 --> 00:09:54,529
which can be invoked with ctrl shift alt

143
00:09:54,529 --> 00:10:04,220
+ D so let me show you its features

144
00:10:34,370 --> 00:10:40,589
okay so here I shoot the command make

145
00:10:40,589 --> 00:10:43,259
run and click on the on the link that

146
00:10:43,259 --> 00:10:47,819
was presented and here I have this hello

147
00:10:47,819 --> 00:10:53,519
world document and now I'm pressing ctrl

148
00:10:53,519 --> 00:11:01,949
alt shift D and I have this debugger in

149
00:11:01,949 --> 00:11:05,160
in the browser so you can see the ties

150
00:11:05,160 --> 00:11:12,720
and if I start typing you can see the

151
00:11:12,720 --> 00:11:18,019
tires that are requested or invalidated

152
00:11:21,050 --> 00:11:25,800
also in the bottom left corner of the

153
00:11:25,800 --> 00:11:28,620
ties you can see how much time the tile

154
00:11:28,620 --> 00:11:32,670
was requested how much time how many

155
00:11:32,670 --> 00:11:35,970
times it was received and some

156
00:11:35,970 --> 00:11:39,899
statistics about the round-trip so the

157
00:11:39,899 --> 00:11:47,089
best average inverse update time

158
00:11:51,119 --> 00:11:57,589
also we can switch on and off these

159
00:11:57,589 --> 00:12:03,359
overlays even the tile overlays and we

160
00:12:03,359 --> 00:12:06,749
can for example simulate typing which is

161
00:12:06,749 --> 00:12:12,329
a very interesting and very useful then

162
00:12:12,329 --> 00:12:14,759
we have a multiple browser windows and

163
00:12:14,759 --> 00:12:17,519
we can simulate concurrent editing of

164
00:12:17,519 --> 00:12:21,809
the same document and watch what's

165
00:12:21,809 --> 00:12:31,589
happening so we can optimize better so

166
00:12:31,589 --> 00:12:36,529
you can see that dice are updated and

167
00:12:36,529 --> 00:12:41,869
only those that are actually changed

168
00:12:47,960 --> 00:12:53,630
and even in this debugging mode if I

169
00:12:53,630 --> 00:12:59,950
invoke this web developer dude

170
00:13:04,519 --> 00:13:08,420
we can see the outgoing and incoming

171
00:13:08,420 --> 00:13:12,750
protocol messages from the client to the

172
00:13:12,750 --> 00:13:14,570
server and from the server to the client

173
00:13:14,570 --> 00:13:18,390
in the JavaScript log so this is yet

174
00:13:18,390 --> 00:13:24,570
another level of debugging possibility

175
00:13:24,570 --> 00:13:30,480
it is there if you build with the enable

176
00:13:30,480 --> 00:13:33,950
debug switch

177
00:13:41,000 --> 00:13:46,470
so I think that's that that's it from me

178
00:13:46,470 --> 00:13:53,540
and if you have questions please ask

179
00:13:54,660 --> 00:14:03,630
[Applause]

