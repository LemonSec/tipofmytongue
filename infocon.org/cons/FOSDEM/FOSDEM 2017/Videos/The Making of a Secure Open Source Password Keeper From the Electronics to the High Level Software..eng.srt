1
00:00:00,000 --> 00:00:03,530
thanks for coming here

2
00:00:04,609 --> 00:00:07,379
thanks for being interested in fast food

3
00:00:07,379 --> 00:00:09,809
management solutions I know that most of

4
00:00:09,809 --> 00:00:11,670
us have poor ones trying to remember

5
00:00:11,670 --> 00:00:14,760
passwords that are secure enough or easy

6
00:00:14,760 --> 00:00:17,490
to remember so this talk is going to be

7
00:00:17,490 --> 00:00:20,460
about that so first I'm going to present

8
00:00:20,460 --> 00:00:24,779
myself my name is Mathieu Stefan I'm an

9
00:00:24,779 --> 00:00:27,390
embedded systems engineer I'm a former

10
00:00:27,390 --> 00:00:29,909
writer for hacker.com for pretty sure

11
00:00:29,909 --> 00:00:32,310
than most of you know what hacker.com is

12
00:00:32,310 --> 00:00:34,770
it's a electronics content gathering

13
00:00:34,770 --> 00:00:37,830
websites so basically so website that

14
00:00:37,830 --> 00:00:39,300
explains the different projects of

15
00:00:39,300 --> 00:00:41,970
different open-source enthusiasts I also

16
00:00:41,970 --> 00:00:44,820
have my website and I'm the founder of

17
00:00:44,820 --> 00:00:47,550
the multipass open-source projects so

18
00:00:47,550 --> 00:00:50,250
quick show of hands who here knows about

19
00:00:50,250 --> 00:00:54,390
the multipass it's not too bad ok cool

20
00:00:54,390 --> 00:00:56,610
so hopefully at the end of this talk you

21
00:00:56,610 --> 00:00:59,100
will know a bit more about it so what is

22
00:00:59,100 --> 00:01:02,940
the multi pass so multi pass is an are

23
00:01:02,940 --> 00:01:05,250
way approach of storing logins and

24
00:01:05,250 --> 00:01:06,900
passwords so it's a dedicated device

25
00:01:06,900 --> 00:01:09,450
that we store for you all your

26
00:01:09,450 --> 00:01:11,520
credentials and also some small files

27
00:01:11,520 --> 00:01:15,659
it's it is natively supported by Chrome

28
00:01:15,659 --> 00:01:17,850
and Firefox we developed some extension

29
00:01:17,850 --> 00:01:20,190
I will detail on this point later

30
00:01:20,190 --> 00:01:23,760
and what is great is it is recognized as

31
00:01:23,760 --> 00:01:25,320
a keyboard so basically it is going to

32
00:01:25,320 --> 00:01:26,909
type your logins and passwords for you

33
00:01:26,909 --> 00:01:28,920
so it will be compatible with any

34
00:01:28,920 --> 00:01:31,500
application on any operating system and

35
00:01:31,500 --> 00:01:35,310
even on smartphones it is made of an

36
00:01:35,310 --> 00:01:37,650
aluminum case it allows multiple users

37
00:01:37,650 --> 00:01:39,900
and of course it's open software and

38
00:01:39,900 --> 00:01:48,869
open hardware and I'm French you know so

39
00:01:48,869 --> 00:01:51,090
internally I will detail on this point

40
00:01:51,090 --> 00:01:53,340
later it's basically a small box with a

41
00:01:53,340 --> 00:01:55,380
microcontroller some flash memory to

42
00:01:55,380 --> 00:01:57,630
store your logins and passwords which

43
00:01:57,630 --> 00:02:00,450
are encrypted of course some LED screen

44
00:02:00,450 --> 00:02:01,920
and a clickable wheel for user

45
00:02:01,920 --> 00:02:04,680
interaction the increment key encryption

46
00:02:04,680 --> 00:02:07,409
key that is used to encrypt your logins

47
00:02:07,409 --> 00:02:09,090
and password is taught on a dedicated

48
00:02:09,090 --> 00:02:11,849
smart card so basically every user is

49
00:02:11,849 --> 00:02:16,240
uniquely identified using this smart car

50
00:02:16,240 --> 00:02:18,520
so it's cool I know so what does it look

51
00:02:18,520 --> 00:02:19,930
like actually so you will have this

52
00:02:19,930 --> 00:02:21,940
small device every time you need to

53
00:02:21,940 --> 00:02:24,580
login on the on the on the website it's

54
00:02:24,580 --> 00:02:27,310
going to light up asks you do you want

55
00:02:27,310 --> 00:02:29,620
to login on that website here we have

56
00:02:29,620 --> 00:02:31,780
implemented some NOC detection but you

57
00:02:31,780 --> 00:02:34,150
can also improve on the wheel itself so

58
00:02:34,150 --> 00:02:36,340
this is native browser integration on

59
00:02:36,340 --> 00:02:39,880
Chrome or Firefox but we also have an

60
00:02:39,880 --> 00:02:42,100
active way of entering logins and

61
00:02:42,100 --> 00:02:43,810
passwords so basically you use your

62
00:02:43,810 --> 00:02:45,760
multi pass you say I want to login on

63
00:02:45,760 --> 00:02:48,280
that website here you can see it is

64
00:02:48,280 --> 00:02:51,280
connected to my phone using an USB

65
00:02:51,280 --> 00:02:53,680
on-the-go cable so just browse to the

66
00:02:53,680 --> 00:02:56,250
login and password you want to enter and

67
00:02:56,250 --> 00:02:58,690
you can improve the prompts on the

68
00:02:58,690 --> 00:03:03,310
device itself so wipe this talks on this

69
00:03:03,310 --> 00:03:05,560
complete project has been made from a

70
00:03:05,560 --> 00:03:07,720
communica mmunity located all over the

71
00:03:07,720 --> 00:03:10,030
globe so the goal of this talk is to

72
00:03:10,030 --> 00:03:12,820
describe how we started from nothing how

73
00:03:12,820 --> 00:03:15,760
we created a project from scratch how 20

74
00:03:15,760 --> 00:03:18,100
people collaborated together how we

75
00:03:18,100 --> 00:03:19,660
could communicate even though we were

76
00:03:19,660 --> 00:03:21,720
literally on the other side of the globe

77
00:03:21,720 --> 00:03:24,700
how we created two devices from the

78
00:03:24,700 --> 00:03:27,430
ground up and how we also created the

79
00:03:27,430 --> 00:03:29,410
different applications the different

80
00:03:29,410 --> 00:03:31,180
software running on the computer itself

81
00:03:31,180 --> 00:03:34,210
and also how we raised around 300 K

82
00:03:34,210 --> 00:03:37,750
using IndieGoGo or Kickstarter so I'm

83
00:03:37,750 --> 00:03:40,470
going to start by the beginning how we

84
00:03:40,470 --> 00:03:43,480
managed to get a lot of contributors how

85
00:03:43,480 --> 00:03:47,890
we set up the project infrastructure as

86
00:03:47,890 --> 00:03:50,230
I mentioned at the time I was a writer

87
00:03:50,230 --> 00:03:52,330
for hacker.com so I figured okay let's

88
00:03:52,330 --> 00:03:54,790
try to create a device that everyone can

89
00:03:54,790 --> 00:03:56,890
work on we wanted it to be everyone from

90
00:03:56,890 --> 00:03:57,700
all over the globe

91
00:03:57,700 --> 00:04:00,400
so I created I made a quick article

92
00:04:00,400 --> 00:04:02,380
which is only 150 words something like

93
00:04:02,380 --> 00:04:04,060
that saying ok I want to create this

94
00:04:04,060 --> 00:04:05,980
device is there anyone else that wants

95
00:04:05,980 --> 00:04:07,450
to work on it

96
00:04:07,450 --> 00:04:09,790
luckily enough Hockaday was kind enough

97
00:04:09,790 --> 00:04:13,600
to allow me to use the hackaday name not

98
00:04:13,600 --> 00:04:15,430
exactly saying it is made by hackaday

99
00:04:15,430 --> 00:04:17,410
but it is developed developed on

100
00:04:17,410 --> 00:04:19,540
hackaday so had a few papers to sign

101
00:04:19,540 --> 00:04:23,860
also so we made a call for contributors

102
00:04:23,860 --> 00:04:28,759
we receive I think 30 40 applications

103
00:04:28,759 --> 00:04:30,800
and of course because we wanted to get

104
00:04:30,800 --> 00:04:33,169
the applicants interested in what they

105
00:04:33,169 --> 00:04:35,360
would be doing the tasks were assigned

106
00:04:35,360 --> 00:04:37,279
of what they wanted to do

107
00:04:37,279 --> 00:04:39,559
how much spare time they had and there

108
00:04:39,559 --> 00:04:45,319
we are of expertise in that order so as

109
00:04:45,319 --> 00:04:47,150
I mentioned the contributors are located

110
00:04:47,150 --> 00:04:48,589
all over the globe so this is a quick

111
00:04:48,589 --> 00:04:52,039
map of where they are of course me I'm

112
00:04:52,039 --> 00:04:54,979
located in Switzerland hardest guy to

113
00:04:54,979 --> 00:04:56,629
work with was located in New Zealand

114
00:04:56,629 --> 00:05:00,319
which is 12 hours so we had to go to bed

115
00:05:00,319 --> 00:05:04,279
quite late at this time anyway so first

116
00:05:04,279 --> 00:05:06,649
first step first you have 30

117
00:05:06,649 --> 00:05:08,719
contributors how do you try to work

118
00:05:08,719 --> 00:05:11,870
together so it took us I think one month

119
00:05:11,870 --> 00:05:14,389
and a half to lead up to agree on some

120
00:05:14,389 --> 00:05:16,490
ground rules as you may know everyone

121
00:05:16,490 --> 00:05:19,490
has their own way of creating code tabs

122
00:05:19,490 --> 00:05:22,639
versus spaces or if do I want to put my

123
00:05:22,639 --> 00:05:25,009
bracket on the dedicated line these are

124
00:05:25,009 --> 00:05:27,770
points that seem quite trivial but when

125
00:05:27,770 --> 00:05:29,539
you have 30 contributors from all over

126
00:05:29,539 --> 00:05:31,699
the globe that have their own and unique

127
00:05:31,699 --> 00:05:35,449
way of doing stuff it can get messy so

128
00:05:35,449 --> 00:05:39,709
we used some emails who try to find a

129
00:05:39,709 --> 00:05:41,149
consensus to find the rules that

130
00:05:41,149 --> 00:05:42,879
everyone could agree on

131
00:05:42,879 --> 00:05:45,409
we used get up for code version in

132
00:05:45,409 --> 00:05:47,839
control one of the calls was to document

133
00:05:47,839 --> 00:05:49,580
all source code

134
00:05:49,580 --> 00:05:51,620
mainly because if someone was to leave

135
00:05:51,620 --> 00:05:53,029
the project we want to have some

136
00:05:53,029 --> 00:05:55,520
documentation of what he has done so the

137
00:05:55,520 --> 00:05:58,099
guy that would pick up on his work would

138
00:05:58,099 --> 00:05:59,779
be able to continue working without

139
00:05:59,779 --> 00:06:00,860
spending I don't know how many days

140
00:06:00,860 --> 00:06:02,770
trying to understand what he has done

141
00:06:02,770 --> 00:06:05,029
everyone is working on the DK did on a

142
00:06:05,029 --> 00:06:06,979
dedicated file of order so we don't

143
00:06:06,979 --> 00:06:09,379
spend hours or days trying to merge

144
00:06:09,379 --> 00:06:11,779
files together depending on how the code

145
00:06:11,779 --> 00:06:13,819
is made of course and as I mentioned the

146
00:06:13,819 --> 00:06:15,080
colleague convention was quite a

147
00:06:15,080 --> 00:06:17,860
friction point between the contributors

148
00:06:17,860 --> 00:06:22,490
so how to talk with each other we all

149
00:06:22,490 --> 00:06:24,709
have different availabilities people are

150
00:06:24,709 --> 00:06:26,990
not paid and not paid by this project so

151
00:06:26,990 --> 00:06:29,779
basically it all depends on our wives

152
00:06:29,779 --> 00:06:32,059
children's to others allowance on the

153
00:06:32,059 --> 00:06:35,689
project we want so some contributors

154
00:06:35,689 --> 00:06:38,149
will not be able to work on the code for

155
00:06:38,149 --> 00:06:41,120
not for a week two weeks so how do we

156
00:06:41,120 --> 00:06:44,330
Keifer trace of what has been done so we

157
00:06:44,330 --> 00:06:47,150
chose to use Google Groups mainly

158
00:06:47,150 --> 00:06:49,820
because it was easy all the traces

159
00:06:49,820 --> 00:06:52,550
related all the discussions related to

160
00:06:52,550 --> 00:06:55,010
the development can be found there we

161
00:06:55,010 --> 00:06:58,760
didn't want to use Skype or any direct

162
00:06:58,760 --> 00:07:00,440
conversion conversation bin

163
00:07:00,440 --> 00:07:02,060
mainly because it would not leave a

164
00:07:02,060 --> 00:07:04,550
trace and it would lead to developers

165
00:07:04,550 --> 00:07:06,440
being out of the loop so as much as

166
00:07:06,440 --> 00:07:08,900
possible use mailing lists or sometimes

167
00:07:08,900 --> 00:07:12,410
IRC the main challenge as you can guess

168
00:07:12,410 --> 00:07:14,300
is to keep the momentum going if you

169
00:07:14,300 --> 00:07:16,550
have a project people are working on

170
00:07:16,550 --> 00:07:18,860
their own time in different places so

171
00:07:18,860 --> 00:07:21,320
you never realize what you have done so

172
00:07:21,320 --> 00:07:23,630
far but to where the project is at you

173
00:07:23,630 --> 00:07:25,280
don't know okay where are we now what

174
00:07:25,280 --> 00:07:27,320
are we going to do and you might lose

175
00:07:27,320 --> 00:07:30,470
motivation so every time every I think

176
00:07:30,470 --> 00:07:32,780
one or two weeks we said okay this guy

177
00:07:32,780 --> 00:07:35,090
has done that the project is close to

178
00:07:35,090 --> 00:07:36,380
the end we are close to having a

179
00:07:36,380 --> 00:07:40,600
password manager that is working well so

180
00:07:40,870 --> 00:07:43,850
as I mentioned keeping keeping everyone

181
00:07:43,850 --> 00:07:46,310
involved this project is open source and

182
00:07:46,310 --> 00:07:48,680
the name itself has not been chosen by

183
00:07:48,680 --> 00:07:51,560
me we kept the hackaday community

184
00:07:51,560 --> 00:07:54,229
involved at at all times so every month

185
00:07:54,229 --> 00:07:57,349
or so we were saying okay for example we

186
00:07:57,349 --> 00:07:59,500
have done we have done the hardware case

187
00:07:59,500 --> 00:08:02,330
there what do you think of it we still

188
00:08:02,330 --> 00:08:04,250
don't have a name for the project itself

189
00:08:04,250 --> 00:08:06,830
so several readers suggested some names

190
00:08:06,830 --> 00:08:09,169
you can see spark base key multipaths

191
00:08:09,169 --> 00:08:12,349
and seems a multipass was a good success

192
00:08:12,349 --> 00:08:15,620
we had 33 percents in a vote we

193
00:08:15,620 --> 00:08:18,889
organized on Hockaday itself so this way

194
00:08:18,889 --> 00:08:20,900
we could keep the readers involved and

195
00:08:20,900 --> 00:08:24,110
more importantly get their opinions on

196
00:08:24,110 --> 00:08:26,510
what the project was at and what we

197
00:08:26,510 --> 00:08:30,889
should do and what we shouldn't do I was

198
00:08:30,889 --> 00:08:32,059
saying it's hard to know where the

199
00:08:32,059 --> 00:08:36,020
project is at so we used Trello before

200
00:08:36,020 --> 00:08:38,380
it was bought by Atlassian information

201
00:08:38,380 --> 00:08:40,969
so we use Trello to keep a nice view of

202
00:08:40,969 --> 00:08:42,650
who is doing what and what is the

203
00:08:42,650 --> 00:08:44,330
current state so it's a very nice way to

204
00:08:44,330 --> 00:08:50,570
see if this task is is is done if we if

205
00:08:50,570 --> 00:08:52,730
you are behind on some for example the

206
00:08:52,730 --> 00:08:54,829
graphics and all that so you can see if

207
00:08:54,829 --> 00:08:54,980
I

208
00:08:54,980 --> 00:08:56,329
and what he different tasks that were

209
00:08:56,329 --> 00:08:58,880
assigned to different people and who

210
00:08:58,880 --> 00:09:00,980
what are the tasks that needs to be done

211
00:09:00,980 --> 00:09:03,199
which ones are done it's a nice way to

212
00:09:03,199 --> 00:09:05,630
see where the project is at in a quick

213
00:09:05,630 --> 00:09:10,300
glance so everyone is working for free

214
00:09:10,300 --> 00:09:14,779
how do you try to have some products

215
00:09:14,779 --> 00:09:16,970
commercialized and ready to go to

216
00:09:16,970 --> 00:09:19,850
IndieGoGo or Kickstarter you whether you

217
00:09:19,850 --> 00:09:21,620
want it or not you have deadlines you

218
00:09:21,620 --> 00:09:23,420
want you have an objective which is for

219
00:09:23,420 --> 00:09:24,800
example to go on Kickstarter in two

220
00:09:24,800 --> 00:09:26,750
months or three month and of course if

221
00:09:26,750 --> 00:09:28,279
there is one part of the firmware that

222
00:09:28,279 --> 00:09:30,980
is late you want to talk with that guy

223
00:09:30,980 --> 00:09:33,620
see what he needs what can be done so

224
00:09:33,620 --> 00:09:36,230
you can arrive at the final at the

225
00:09:36,230 --> 00:09:38,540
firmware version one as soon as possible

226
00:09:38,540 --> 00:09:41,959
so we encouraged the develop the

227
00:09:41,959 --> 00:09:44,149
different developers to try to find

228
00:09:44,149 --> 00:09:46,310
solutions by themselves we encourage

229
00:09:46,310 --> 00:09:48,740
innovation as I said in the beginning

230
00:09:48,740 --> 00:09:51,199
the tasks were assigned on what they

231
00:09:51,199 --> 00:09:53,420
wanted to do so motivation usually was

232
00:09:53,420 --> 00:09:55,610
not a problem but in some cases life

233
00:09:55,610 --> 00:09:57,980
gets in a way I don't know someone had

234
00:09:57,980 --> 00:10:01,399
babies we had to replace that guy so

235
00:10:01,399 --> 00:10:05,319
anyway we we try to motivate people by

236
00:10:05,319 --> 00:10:08,949
showing their work to the community

237
00:10:08,949 --> 00:10:11,480
estimated time of arrival for tasks

238
00:10:11,480 --> 00:10:13,940
always a tricky subject you want to try

239
00:10:13,940 --> 00:10:16,910
to see with the contributor what what's

240
00:10:16,910 --> 00:10:19,940
his what he needs what what needs to be

241
00:10:19,940 --> 00:10:22,519
done and how you can help and sometimes

242
00:10:22,519 --> 00:10:24,500
all the contributors will go play and

243
00:10:24,500 --> 00:10:26,360
we'll try to help them as well so it can

244
00:10:26,360 --> 00:10:27,399
be spontaneous

245
00:10:27,399 --> 00:10:29,899
so now we've talked about the community

246
00:10:29,899 --> 00:10:31,459
I'm going to dig into the hardware I

247
00:10:31,459 --> 00:10:33,199
will stuff from the hardware firmware

248
00:10:33,199 --> 00:10:34,940
and software so at the very low level

249
00:10:34,940 --> 00:10:37,399
this is what the multi path looks like

250
00:10:37,399 --> 00:10:39,529
this was the very first photo prototype

251
00:10:39,529 --> 00:10:42,410
hand-assembled actually soldered I think

252
00:10:42,410 --> 00:10:44,690
10 or 15 prototypes myself that were

253
00:10:44,690 --> 00:10:46,190
directly shipped to the contributors it

254
00:10:46,190 --> 00:10:48,589
does not look pretty but at least you

255
00:10:48,589 --> 00:10:53,019
can start coding on it cases I mentioned

256
00:10:53,019 --> 00:10:55,850
every major decision was made by the

257
00:10:55,850 --> 00:10:59,569
hackaday leadership so we hashed for for

258
00:10:59,569 --> 00:11:01,339
design ideas we had these different

259
00:11:01,339 --> 00:11:05,480
designs and we organized a new vote for

260
00:11:05,480 --> 00:11:08,029
the new vote it was this final

261
00:11:08,029 --> 00:11:11,889
look that was chosen it was in December

262
00:11:11,889 --> 00:11:16,099
2014 we went on IndieGoGo

263
00:11:16,099 --> 00:11:22,069
we raised I think 130k in December then

264
00:11:22,069 --> 00:11:24,979
because the multipass project started to

265
00:11:24,979 --> 00:11:28,009
have some success people was starting to

266
00:11:28,009 --> 00:11:29,599
warm up to the idea of having a

267
00:11:29,599 --> 00:11:31,909
dedicated device for sewing their logins

268
00:11:31,909 --> 00:11:34,729
and passwords also many because LastPass

269
00:11:34,729 --> 00:11:37,939
was compromised or there are always news

270
00:11:37,939 --> 00:11:40,639
that try to promote all way of storing

271
00:11:40,639 --> 00:11:43,189
logins and passwords so after the

272
00:11:43,189 --> 00:11:44,720
multipass standard put in cheapest

273
00:11:44,720 --> 00:11:47,029
original we chose to continue on a

274
00:11:47,029 --> 00:11:48,739
smaller version of the multi pass which

275
00:11:48,739 --> 00:11:50,539
could be easily carried inside your

276
00:11:50,539 --> 00:11:52,999
pocket something that is easier to carry

277
00:11:52,999 --> 00:11:55,639
around which is cheaper sturdier the

278
00:11:55,639 --> 00:11:58,129
first version was also and assembled by

279
00:11:58,129 --> 00:11:59,869
myself I think I've sold it 20

280
00:11:59,869 --> 00:12:02,029
prototypes shipped two testers

281
00:12:02,029 --> 00:12:05,689
contributors we received some feedback

282
00:12:05,689 --> 00:12:08,389
and finally we went from an aluminum

283
00:12:08,389 --> 00:12:11,509
case which is the final look and why

284
00:12:11,509 --> 00:12:13,459
aluminium so we could make sure that it

285
00:12:13,459 --> 00:12:15,229
would be tamper evident so this is me

286
00:12:15,229 --> 00:12:18,289
trying to to test the robustness of the

287
00:12:18,289 --> 00:12:21,829
adhesive that keeps the case together so

288
00:12:21,829 --> 00:12:23,659
VG's me standing up on the case trying

289
00:12:23,659 --> 00:12:27,529
to tear it apart I didn't succeed so

290
00:12:27,529 --> 00:12:29,239
just to make sure that our device is

291
00:12:29,239 --> 00:12:31,369
robust enough so someone opening the

292
00:12:31,369 --> 00:12:33,259
device implementing a sniffer whatever

293
00:12:33,259 --> 00:12:36,499
would be evident of course I've done it

294
00:12:36,499 --> 00:12:39,049
myself but other people wanted to make

295
00:12:39,049 --> 00:12:40,429
sure for themself so this is a

296
00:12:40,429 --> 00:12:44,209
disassembly test my someone friends of

297
00:12:44,209 --> 00:12:46,879
someone who is in the audience I want to

298
00:12:46,879 --> 00:12:48,829
make sure that actually his device could

299
00:12:48,829 --> 00:12:50,869
not be opened without him noticing as

300
00:12:50,869 --> 00:12:54,589
you can imagine it's quite evident that

301
00:12:54,589 --> 00:12:59,749
it has been opened then yeah I'm going

302
00:12:59,749 --> 00:13:04,579
to put a few few slides about organizing

303
00:13:04,579 --> 00:13:06,679
the mass production so you have a

304
00:13:06,679 --> 00:13:09,470
hardware how are you going to to produce

305
00:13:09,470 --> 00:13:13,699
1000 of the n4 4000 of them so I went to

306
00:13:13,699 --> 00:13:16,009
China just to meet the different guys I

307
00:13:16,009 --> 00:13:18,150
met on the internet too

308
00:13:18,150 --> 00:13:19,380
reduce the multipath finding a

309
00:13:19,380 --> 00:13:21,990
manufacturer can be quite tricky

310
00:13:21,990 --> 00:13:24,570
this particular manufacturer it's a

311
00:13:24,570 --> 00:13:26,070
funny story basically I ordered some

312
00:13:26,070 --> 00:13:28,380
power supply on the internet plugged it

313
00:13:28,380 --> 00:13:30,930
plugged it into my my power socket and

314
00:13:30,930 --> 00:13:32,610
the complete fuse of the building blew

315
00:13:32,610 --> 00:13:35,400
up I contacted the guy and then I

316
00:13:35,400 --> 00:13:37,050
learned that actually offered

317
00:13:37,050 --> 00:13:39,120
manufacturing services and this is the

318
00:13:39,120 --> 00:13:40,560
guy and actually the multipass of

319
00:13:40,560 --> 00:13:42,090
working well so it was just the

320
00:13:42,090 --> 00:13:43,890
exception that's one way of getting in

321
00:13:43,890 --> 00:13:48,930
touch with us numbers the case

322
00:13:48,930 --> 00:13:51,330
manufacturers or cnc shops so i

323
00:13:51,330 --> 00:13:53,490
mentioned we have an iminium casing so

324
00:13:53,490 --> 00:13:55,770
you want to have it manufactures this

325
00:13:55,770 --> 00:13:59,730
was an even stupider choice I look on

326
00:13:59,730 --> 00:14:03,390
Alibaba for cnc shops we see several

327
00:14:03,390 --> 00:14:05,550
quotes and I took the cheaper one like

328
00:14:05,550 --> 00:14:07,500
we need the cheapest I figured okay it'd

329
00:14:07,500 --> 00:14:09,150
be at least I will have some prototypes

330
00:14:09,150 --> 00:14:11,610
and let's see if they are reliable turns

331
00:14:11,610 --> 00:14:15,090
out it's the he he is extremely reliable

332
00:14:15,090 --> 00:14:17,730
is one of the guys in China next to

333
00:14:17,730 --> 00:14:19,470
Shenzhen that basic I can stand the

334
00:14:19,470 --> 00:14:21,080
design I can trust him to have it done

335
00:14:21,080 --> 00:14:23,330
communication is always a tricky subject

336
00:14:23,330 --> 00:14:26,520
I speak a little Chinese but not too

337
00:14:26,520 --> 00:14:28,680
much so I kind of cheated haha the

338
00:14:28,680 --> 00:14:30,360
Chinese wife that was doing the

339
00:14:30,360 --> 00:14:35,610
translation job so communication how are

340
00:14:35,610 --> 00:14:37,380
you going to teach your manufacturer how

341
00:14:37,380 --> 00:14:39,690
to assemble the multipass the is a

342
00:14:39,690 --> 00:14:41,490
security device so this can be quite

343
00:14:41,490 --> 00:14:43,440
tricky we have tight tolerances for the

344
00:14:43,440 --> 00:14:45,990
case you're a functional test so it

345
00:14:45,990 --> 00:14:48,810
turns out for me the most easy way to

346
00:14:48,810 --> 00:14:50,640
get him to do stuff is to make a youtube

347
00:14:50,640 --> 00:14:52,350
video as stupid as it sounds

348
00:14:52,350 --> 00:14:54,630
basically I have a camera on top of me

349
00:14:54,630 --> 00:14:57,090
filming what I'm doing so for example

350
00:14:57,090 --> 00:14:58,410
here so functional testing on the

351
00:14:58,410 --> 00:15:00,260
multipath say okay connect the multipath

352
00:15:00,260 --> 00:15:01,710
renderscript

353
00:15:01,710 --> 00:15:03,030
then you will have a label which is

354
00:15:03,030 --> 00:15:04,740
printed out it means that the device is

355
00:15:04,740 --> 00:15:07,740
ready to be assembled the good the

356
00:15:07,740 --> 00:15:09,750
advantage of that is that the assembler

357
00:15:09,750 --> 00:15:12,000
can look at the video I don't know four

358
00:15:12,000 --> 00:15:13,620
or five times trying to see what he

359
00:15:13,620 --> 00:15:16,170
didn't understand and then my wife would

360
00:15:16,170 --> 00:15:21,210
call him to make sure he understood so

361
00:15:21,210 --> 00:15:22,590
of course Panetta control is always

362
00:15:22,590 --> 00:15:23,790
tricky

363
00:15:23,790 --> 00:15:27,350
so you want to make a prototype run of

364
00:15:27,350 --> 00:15:30,300
51 of the units and so you can make sure

365
00:15:30,300 --> 00:15:31,980
that the assembler can do his job

366
00:15:31,980 --> 00:15:33,900
properly as you can see there is a few

367
00:15:33,900 --> 00:15:36,450
marks of additives there so this is

368
00:15:36,450 --> 00:15:39,450
actually not a bigfoot of his basically

369
00:15:39,450 --> 00:15:41,520
forgot to let the glue dry for 24 hours

370
00:15:41,520 --> 00:15:45,180
so as the more prototype prints you make

371
00:15:45,180 --> 00:15:47,220
the more data you will have on what

372
00:15:47,220 --> 00:15:48,870
mistakes can be done things you never

373
00:15:48,870 --> 00:15:50,730
thought would be possible because you

374
00:15:50,730 --> 00:15:52,800
can't see everything going anyway so at

375
00:15:52,800 --> 00:15:56,370
least make 1020 put a top strand send it

376
00:15:56,370 --> 00:15:59,040
to distribute to testers send it to

377
00:15:59,040 --> 00:16:00,990
multipath enthusiasts so you can get

378
00:16:00,990 --> 00:16:02,700
feedback as much as quickly as possible

379
00:16:02,700 --> 00:16:06,120
so you can add some features for example

380
00:16:06,120 --> 00:16:08,550
on the multi pass itself I guess 30 or

381
00:16:08,550 --> 00:16:10,080
40 percent of the features were

382
00:16:10,080 --> 00:16:12,330
suggested by the tester themself you're

383
00:16:12,330 --> 00:16:14,760
I'm a geek I can't think of everything I

384
00:16:14,760 --> 00:16:16,260
can't think of what is really needed by

385
00:16:16,260 --> 00:16:18,510
most people so actually a big prototype

386
00:16:18,510 --> 00:16:20,250
strands send it out there and then I get

387
00:16:20,250 --> 00:16:25,140
ideas so firmware

388
00:16:25,140 --> 00:16:27,360
let's start with the tricky part it's a

389
00:16:27,360 --> 00:16:29,340
security device all the passwords I

390
00:16:29,340 --> 00:16:33,090
encrypted using AES so even if you are

391
00:16:33,090 --> 00:16:34,980
creating a security device we don't we

392
00:16:34,980 --> 00:16:36,180
want to create all the source code

393
00:16:36,180 --> 00:16:38,430
ourselves but it is one exception which

394
00:16:38,430 --> 00:16:41,780
is the the encryption would be routines

395
00:16:41,780 --> 00:16:45,570
so for that we chose to some library

396
00:16:45,570 --> 00:16:47,880
which is called AVR crypto Lib but we

397
00:16:47,880 --> 00:16:50,130
checked it we checked it against Nessa

398
00:16:50,130 --> 00:16:52,560
vector sets so basically we use the code

399
00:16:52,560 --> 00:16:55,470
implemented a few securities so we don't

400
00:16:55,470 --> 00:16:58,650
have side channel attacks and we use it

401
00:16:58,650 --> 00:17:01,410
you checked it against some vector sets

402
00:17:01,410 --> 00:17:02,790
to make sure that the encryption which

403
00:17:02,790 --> 00:17:05,369
is lead to the good output so this is

404
00:17:05,369 --> 00:17:07,530
the only part of the code we did not

405
00:17:07,530 --> 00:17:09,660
create ourselves but at least we checked

406
00:17:09,660 --> 00:17:12,000
it as I mentioned we have encrypted

407
00:17:12,000 --> 00:17:14,280
storage inside the multi pass you have a

408
00:17:14,280 --> 00:17:16,140
flash that will store your logins

409
00:17:16,140 --> 00:17:19,140
passwords small files we have two types

410
00:17:19,140 --> 00:17:20,339
of the attacker in our souls

411
00:17:20,339 --> 00:17:22,829
encrypted blobs so if you have a quick

412
00:17:22,829 --> 00:17:24,750
text file you want to store also SSH

413
00:17:24,750 --> 00:17:27,410
keys also this is possible on our new

414
00:17:27,410 --> 00:17:31,740
application we have a some sorted linked

415
00:17:31,740 --> 00:17:34,380
linked list data structure so basically

416
00:17:34,380 --> 00:17:36,150
when you scroll through your financials

417
00:17:36,150 --> 00:17:37,650
there are alphabetically so

418
00:17:37,650 --> 00:17:40,049
which makes sense and the equipment P

419
00:17:40,049 --> 00:17:42,960
for all your credentials are stored int

420
00:17:42,960 --> 00:17:45,870
into a dedicated smart card talking

421
00:17:45,870 --> 00:17:47,940
about smart cards how do you find a

422
00:17:47,940 --> 00:17:51,270
smart card er a smart card is extremely

423
00:17:51,270 --> 00:17:52,919
hard to find a smart card and can do

424
00:17:52,919 --> 00:17:55,740
what you want because manufacturers they

425
00:17:55,740 --> 00:17:57,780
are not interested in sending one

426
00:17:57,780 --> 00:18:00,900
hundred thousand or ten thousand smart

427
00:18:00,900 --> 00:18:03,179
cards to some people they don't know

428
00:18:03,179 --> 00:18:07,890
especially open-source enthusiasts so it

429
00:18:07,890 --> 00:18:09,360
took me I think one month or two months

430
00:18:09,360 --> 00:18:11,159
trying to find a smart car that could

431
00:18:11,159 --> 00:18:13,080
fit the beer so basically what we need

432
00:18:13,080 --> 00:18:15,330
is just a read protected memory that

433
00:18:15,330 --> 00:18:18,030
could store your encryption key so we

434
00:18:18,030 --> 00:18:20,580
found some smart card on the internet it

435
00:18:20,580 --> 00:18:22,679
is an atmel one I think it is already

436
00:18:22,679 --> 00:18:24,929
ten years old something like that but at

437
00:18:24,929 --> 00:18:29,130
least it will it uses sixteen bits in

438
00:18:29,130 --> 00:18:32,610
code so from 0 to FFF we chose to offer

439
00:18:32,610 --> 00:18:34,350
the possibility to enter a tunnel some

440
00:18:34,350 --> 00:18:38,130
da d pin code so you can go crazy on for

441
00:18:38,130 --> 00:18:40,049
your for your pin code is permitted

442
00:18:40,049 --> 00:18:42,539
permanently clocked after four incorrect

443
00:18:42,539 --> 00:18:44,880
pins so at least if someone gets a hold

444
00:18:44,880 --> 00:18:47,610
of your multi pass device or smart card

445
00:18:47,610 --> 00:18:50,190
you can try four times so good luck

446
00:18:50,190 --> 00:18:53,190
and more importantly is very cheap less

447
00:18:53,190 --> 00:18:55,140
than a dollar I think less than the 50

448
00:18:55,140 --> 00:18:57,480
cent now so quite easy to source and to

449
00:18:57,480 --> 00:19:01,289
offer to different customers random

450
00:19:01,289 --> 00:19:02,789
number generation so you have an

451
00:19:02,789 --> 00:19:04,350
encryption key you want this encryption

452
00:19:04,350 --> 00:19:05,610
key to be completely random

453
00:19:05,610 --> 00:19:08,370
of course the resources when you store a

454
00:19:08,370 --> 00:19:10,260
password you want to add some padding to

455
00:19:10,260 --> 00:19:12,059
make sure that you are not in creating

456
00:19:12,059 --> 00:19:15,330
the same encryption function does not

457
00:19:15,330 --> 00:19:17,370
lead to the same result even if we are

458
00:19:17,370 --> 00:19:20,700
using CTR mode inside the AES routine so

459
00:19:20,700 --> 00:19:22,140
what we are using for wonder number

460
00:19:22,140 --> 00:19:24,000
generation also use for password

461
00:19:24,000 --> 00:19:26,549
generation it is the jitter is based on

462
00:19:26,549 --> 00:19:28,049
the jitter between the watchdog timer

463
00:19:28,049 --> 00:19:30,600
which is basically an RC oscillator and

464
00:19:30,600 --> 00:19:34,590
the crystal so this only generates 8

465
00:19:34,590 --> 00:19:36,809
bytes per second it's not great it's

466
00:19:36,809 --> 00:19:38,039
actually perfect for what we need

467
00:19:38,039 --> 00:19:40,110
because we are just you are going to

468
00:19:40,110 --> 00:19:42,270
generate a password once every 10

469
00:19:42,270 --> 00:19:42,600
minutes

470
00:19:42,600 --> 00:19:44,760
so it's actually quite nice for what we

471
00:19:44,760 --> 00:19:48,809
need it bites the second USB as I said

472
00:19:48,809 --> 00:19:50,860
we often ID native

473
00:19:50,860 --> 00:19:52,750
aggression in the browser itself you go

474
00:19:52,750 --> 00:19:54,730
to a website the multipath lights up and

475
00:19:54,730 --> 00:19:56,380
you approve the request this is done

476
00:19:56,380 --> 00:19:59,559
through a hid proprietary channel which

477
00:19:59,559 --> 00:20:01,270
is just a fancy way of saying that I'm

478
00:20:01,270 --> 00:20:03,580
sending 64 bytes every millisecond and

479
00:20:03,580 --> 00:20:05,980
you also have manual pass what we call

480
00:20:05,980 --> 00:20:08,410
when you go on the device itself go to I

481
00:20:08,410 --> 00:20:10,960
don't know the login github.com then you

482
00:20:10,960 --> 00:20:14,140
press and login and password is their

483
00:20:14,140 --> 00:20:16,090
weekly press for you so basically the

484
00:20:16,090 --> 00:20:19,840
multi pass simulates key prices so this

485
00:20:19,840 --> 00:20:22,809
is dance with the hid keyboard channel

486
00:20:22,809 --> 00:20:25,990
so it's a composite device so keyboards

487
00:20:25,990 --> 00:20:29,020
are supported by all computers

488
00:20:29,020 --> 00:20:31,690
smartphones tablets out there but the

489
00:20:31,690 --> 00:20:32,980
problem is that I don't know if you know

490
00:20:32,980 --> 00:20:35,740
if you have a keyboard you press the ABC

491
00:20:35,740 --> 00:20:38,559
key the keyboard is not saying is not

492
00:20:38,559 --> 00:20:41,200
sending a to a computer it is saying to

493
00:20:41,200 --> 00:20:44,860
the to the computer and the user has

494
00:20:44,860 --> 00:20:48,070
pressed a key whose unique code is 52

495
00:20:48,070 --> 00:20:50,380
then your computer is going to match

496
00:20:50,380 --> 00:20:54,100
this number to a or B depending on your

497
00:20:54,100 --> 00:20:57,130
local so which locale I think is the

498
00:20:57,130 --> 00:20:59,290
correct word so this means that you need

499
00:20:59,290 --> 00:21:01,570
to generate a lookup table for every

500
00:21:01,570 --> 00:21:03,760
keyboard out there these took quite a

501
00:21:03,760 --> 00:21:05,950
while we have a few Python scripts on

502
00:21:05,950 --> 00:21:07,450
our repository and one of them is

503
00:21:07,450 --> 00:21:09,850
actually to do a brute force on all the

504
00:21:09,850 --> 00:21:12,460
key codes to see which key code maps to

505
00:21:12,460 --> 00:21:15,490
which ASCII character this was a painful

506
00:21:15,490 --> 00:21:20,559
process but it worked at least graphics

507
00:21:20,559 --> 00:21:23,380
library we didn't use any library out

508
00:21:23,380 --> 00:21:26,380
there because we wanted some very quick

509
00:21:26,380 --> 00:21:29,350
refresh time on the display itself for

510
00:21:29,350 --> 00:21:31,330
the multi pass original we use run

511
00:21:31,330 --> 00:21:33,400
length encoding compressions to make

512
00:21:33,400 --> 00:21:35,799
sure that the memory dedicated to the

513
00:21:35,799 --> 00:21:38,679
graphics is as small and used in an

514
00:21:38,679 --> 00:21:41,440
optimal manner we have many different

515
00:21:41,440 --> 00:21:45,210
scripts to convert bitmaps fonts into

516
00:21:45,210 --> 00:21:47,799
binary blobs that are stored inside the

517
00:21:47,799 --> 00:21:50,190
external flash of the multi pass and

518
00:21:50,190 --> 00:21:53,140
this particular flash and your former

519
00:21:53,140 --> 00:21:56,559
can be updated securely so this means we

520
00:21:56,559 --> 00:21:59,140
had to this is the part I created

521
00:21:59,140 --> 00:22:01,300
actually we have a bootloader that

522
00:22:01,300 --> 00:22:02,050
allows

523
00:22:02,050 --> 00:22:03,850
signed formal dates

524
00:22:03,850 --> 00:22:07,990
we are using AES to do some to generate

525
00:22:07,990 --> 00:22:11,350
the hashes so for every multi pass

526
00:22:11,350 --> 00:22:13,720
device out there there is a there are

527
00:22:13,720 --> 00:22:16,180
several unique an immense joy inside

528
00:22:16,180 --> 00:22:19,000
their memory we have a unique IES key

529
00:22:19,000 --> 00:22:21,340
which is used to sign the firmware

530
00:22:21,340 --> 00:22:23,770
updates there is a unique IES key for

531
00:22:23,770 --> 00:22:25,200
harsh innovations so basically you

532
00:22:25,200 --> 00:22:27,250
connect your Muji pass you insert your

533
00:22:27,250 --> 00:22:29,260
card is going to display a hash so if

534
00:22:29,260 --> 00:22:30,790
the hash is the same as you have seen

535
00:22:30,790 --> 00:22:32,290
before you know that your device has not

536
00:22:32,290 --> 00:22:35,500
been compromised we also have some read

537
00:22:35,500 --> 00:22:38,800
product we protected Universal indentify

538
00:22:38,800 --> 00:22:40,810
this is used to make sure that your

539
00:22:40,810 --> 00:22:43,600
device has not been tampered with during

540
00:22:43,600 --> 00:22:45,100
shipping so if you want more details

541
00:22:45,100 --> 00:22:47,050
about that I can answer during the Q&A

542
00:22:47,050 --> 00:22:50,860
so unique signing keys for every multi

543
00:22:50,860 --> 00:22:53,110
pass out there means genuine generating

544
00:22:53,110 --> 00:22:56,110
a unique firmware to be flashed into the

545
00:22:56,110 --> 00:22:58,990
device for the mass production so you

546
00:22:58,990 --> 00:23:00,850
never trust your assembler so what we

547
00:23:00,850 --> 00:23:02,950
have what we have done is create created

548
00:23:02,950 --> 00:23:05,440
our own mass programming week it looks a

549
00:23:05,440 --> 00:23:07,450
bit crude but it works perfectly so will

550
00:23:07,450 --> 00:23:09,670
you have nine different sockets on which

551
00:23:09,670 --> 00:23:12,010
you put your microcontroller we have

552
00:23:12,010 --> 00:23:14,650
also a complete set of scripts that we

553
00:23:14,650 --> 00:23:17,410
generate a unique X file to be flashed

554
00:23:17,410 --> 00:23:19,990
on the microcontroller and program a

555
00:23:19,990 --> 00:23:21,760
unique serial number so all the

556
00:23:21,760 --> 00:23:23,650
programming of the microcontrollers is

557
00:23:23,650 --> 00:23:25,780
done by ourselves we didn't want to

558
00:23:25,780 --> 00:23:28,180
trust the August humbler even if you

559
00:23:28,180 --> 00:23:29,500
have been working with in for a couple

560
00:23:29,500 --> 00:23:32,080
of years so we want to make sure that

561
00:23:32,080 --> 00:23:35,050
the critical parts are programmed by us

562
00:23:35,050 --> 00:23:37,690
so this is why we this cute programming

563
00:23:37,690 --> 00:23:42,670
rig was was made now to the to the multi

564
00:23:42,670 --> 00:23:45,160
path software so I've started very low

565
00:23:45,160 --> 00:23:48,460
I'm going to talk about what is running

566
00:23:48,460 --> 00:23:50,200
on the computer for example to implement

567
00:23:50,200 --> 00:23:56,070
a native browser integration so first we

568
00:23:56,070 --> 00:24:00,340
developed Chrome App and extension why

569
00:24:00,340 --> 00:24:01,810
we chose to go this Way's that is

570
00:24:01,810 --> 00:24:04,450
already cross-platform compatible the

571
00:24:04,450 --> 00:24:06,370
installation process is really as simple

572
00:24:06,370 --> 00:24:09,490
as two clicks so you if you use from if

573
00:24:09,490 --> 00:24:11,740
we also support Firefox I will talk

574
00:24:11,740 --> 00:24:13,600
about that later if you use Chrome you

575
00:24:13,600 --> 00:24:15,760
basically go to our web web page click

576
00:24:15,760 --> 00:24:16,029
on

577
00:24:16,029 --> 00:24:17,739
- links it will install an extension

578
00:24:17,739 --> 00:24:19,899
that is used to detect whenever you need

579
00:24:19,899 --> 00:24:21,789
to log in so basically on the webpage

580
00:24:21,789 --> 00:24:24,129
you visit and if you'll also install an

581
00:24:24,129 --> 00:24:26,229
application the application is may is

582
00:24:26,229 --> 00:24:28,210
here to make the interface between the

583
00:24:28,210 --> 00:24:30,609
extension and the multipass hardware so

584
00:24:30,609 --> 00:24:33,429
every time the extension the text login

585
00:24:33,429 --> 00:24:35,559
form it will ask the app to create a

586
00:24:35,559 --> 00:24:38,289
multipass for the login for this given

587
00:24:38,289 --> 00:24:42,249
website so why through apps the natively

588
00:24:42,249 --> 00:24:44,019
support will be hid

589
00:24:44,019 --> 00:24:46,029
so you don't need to install a program

590
00:24:46,029 --> 00:24:48,909
you don't need to add support drivers is

591
00:24:48,909 --> 00:24:51,159
as simple as connect the multi pass

592
00:24:51,159 --> 00:24:54,129
click twice and it works of course for

593
00:24:54,129 --> 00:24:56,229
linux users you mean either you Dev rule

594
00:24:56,229 --> 00:24:57,849
but there is nothing we can do about

595
00:24:57,849 --> 00:24:59,429
that

596
00:24:59,429 --> 00:25:01,509
so this is the management interface

597
00:25:01,509 --> 00:25:04,479
multi pass multi pass app as I mentioned

598
00:25:04,479 --> 00:25:06,609
you want to see when your multiple your

599
00:25:06,609 --> 00:25:09,909
your credentials where last used what

600
00:25:09,909 --> 00:25:11,619
you have now what you want to what is

601
00:25:11,619 --> 00:25:13,479
the password thought is given website if

602
00:25:13,479 --> 00:25:14,349
you want to change it

603
00:25:14,349 --> 00:25:16,359
so this is some nice management

604
00:25:16,359 --> 00:25:19,659
interface interestingly enough this is

605
00:25:19,659 --> 00:25:22,599
the only bit of the multipath ecosystem

606
00:25:22,599 --> 00:25:24,479
that was not made by your contributor

607
00:25:24,479 --> 00:25:26,440
apparently it's very hard to find

608
00:25:26,440 --> 00:25:28,929
JavaScript developers that want to do

609
00:25:28,929 --> 00:25:32,320
that for free anyway so if you're

610
00:25:32,320 --> 00:25:33,580
jealous with developer and want to work

611
00:25:33,580 --> 00:25:37,529
on it contact me but yes we found civil

612
00:25:37,529 --> 00:25:40,210
through freelancers working with

613
00:25:40,210 --> 00:25:42,759
finances is always interesting you

614
00:25:42,759 --> 00:25:45,249
should never know what motivates him so

615
00:25:45,249 --> 00:25:47,129
it's a bit is harder to to manage

616
00:25:47,129 --> 00:25:49,659
financier than the contributor but

617
00:25:49,659 --> 00:25:51,070
anyway at the end we have a nice

618
00:25:51,070 --> 00:25:53,879
application that is working like we want

619
00:25:53,879 --> 00:25:56,859
we also have a Python tool so in case

620
00:25:56,859 --> 00:25:58,529
you're not into Chrome apps or

621
00:25:58,529 --> 00:26:01,269
extensions you can recall your logins

622
00:26:01,269 --> 00:26:02,559
and passwords directly using a

623
00:26:02,559 --> 00:26:05,739
command-line tool based on Python you

624
00:26:05,739 --> 00:26:08,999
can also use small file storage we call

625
00:26:08,999 --> 00:26:11,649
do a crystal on the device itself what

626
00:26:11,649 --> 00:26:13,330
is nice is that it can interface with

627
00:26:13,330 --> 00:26:15,580
multiple application one application can

628
00:26:15,580 --> 00:26:19,119
call this utility to we call your login

629
00:26:19,119 --> 00:26:21,009
and password so quite convenient if you

630
00:26:21,009 --> 00:26:22,809
are developing your own app and want to

631
00:26:22,809 --> 00:26:24,249
create your credentials on the multipass

632
00:26:24,249 --> 00:26:25,550
itself

633
00:26:25,550 --> 00:26:30,500
and also we are currently working on a

634
00:26:30,500 --> 00:26:32,780
cross-platform tool so the main reason

635
00:26:32,780 --> 00:26:36,550
for that is that chrome announced in

636
00:26:36,550 --> 00:26:39,679
2018 that it is going to grow to drop

637
00:26:39,679 --> 00:26:41,470
the chrome apps so we are currently

638
00:26:41,470 --> 00:26:46,670
actively working on C++ and Qt troll

639
00:26:46,670 --> 00:26:49,040
which is named multi cute his Creator is

640
00:26:49,040 --> 00:26:53,150
here first time I meet him by the way so

641
00:26:53,150 --> 00:26:56,330
basically it's here to do the job of the

642
00:26:56,330 --> 00:26:58,820
Chrome App interface between the multi

643
00:26:58,820 --> 00:27:02,330
pass Hardware Chrome Safari Firefox for

644
00:27:02,330 --> 00:27:03,890
example I'm using it with Firefox right

645
00:27:03,890 --> 00:27:07,550
now we also also created using go and

646
00:27:07,550 --> 00:27:11,450
SSH agent so every time you need to log

647
00:27:11,450 --> 00:27:14,000
into a server using your SSH key you

648
00:27:14,000 --> 00:27:16,400
basically have this SSH SSH agent

649
00:27:16,400 --> 00:27:18,530
running that will create your SSH key

650
00:27:18,530 --> 00:27:21,830
from the multipass and as the Chrome App

651
00:27:21,830 --> 00:27:25,309
we have a management interface that we

652
00:27:25,309 --> 00:27:27,260
also working on to provide smart

653
00:27:27,260 --> 00:27:29,840
database synchronizations across your

654
00:27:29,840 --> 00:27:32,600
multi pass units and also a command line

655
00:27:32,600 --> 00:27:35,380
interface because we are geeks after all

656
00:27:35,380 --> 00:27:40,280
and so what's next as I mentioned we

657
00:27:40,280 --> 00:27:42,920
only started working I think six months

658
00:27:42,920 --> 00:27:45,740
ago and this new tool if your C++ QT

659
00:27:45,740 --> 00:27:47,620
developer and want to work on something

660
00:27:47,620 --> 00:27:50,000
security related contact me I've

661
00:27:50,000 --> 00:27:52,010
actually seven units right now to give

662
00:27:52,010 --> 00:27:54,110
up for free if you want to have fun at

663
00:27:54,110 --> 00:27:57,970
our ecosystem the file storage

664
00:27:57,970 --> 00:28:00,850
functionality is not yet present its

665
00:28:00,850 --> 00:28:04,010
present command line based on multi cute

666
00:28:04,010 --> 00:28:05,800
but we would like to have a nice

667
00:28:05,800 --> 00:28:08,600
graphical user interface to store your

668
00:28:08,600 --> 00:28:11,510
files and we call them and we also want

669
00:28:11,510 --> 00:28:14,210
to create two factor only firmware for

670
00:28:14,210 --> 00:28:16,250
the multi pass so as I mention multi

671
00:28:16,250 --> 00:28:18,410
pass is only made to store your logins

672
00:28:18,410 --> 00:28:21,080
and passwords but we will not implement

673
00:28:21,080 --> 00:28:23,330
second factor attic authentication on

674
00:28:23,330 --> 00:28:26,179
the mainframe at the main reason is that

675
00:28:26,179 --> 00:28:28,010
you would have one device for logins

676
00:28:28,010 --> 00:28:29,960
passwords and two-factor authentication

677
00:28:29,960 --> 00:28:32,150
related functionalities which doesn't

678
00:28:32,150 --> 00:28:33,559
really make sense but so we are

679
00:28:33,559 --> 00:28:35,660
currently working we would like to work

680
00:28:35,660 --> 00:28:37,640
on a second factor authentication

681
00:28:37,640 --> 00:28:40,360
firmware

682
00:28:40,389 --> 00:28:42,710
and if you have questions please go on

683
00:28:42,710 --> 00:28:46,149
I will ice up in a bit fast

684
00:28:46,960 --> 00:28:58,339
[Applause]

685
00:29:05,360 --> 00:29:12,080
so just a question on the AAS keys are

686
00:29:12,080 --> 00:29:15,350
you as if I buy a device am I entitled

687
00:29:15,350 --> 00:29:18,110
to flash my it's closer to the

688
00:29:18,110 --> 00:29:20,120
microphone online sorry I'm allowed to

689
00:29:20,120 --> 00:29:23,960
update my own is keys on the device if

690
00:29:23,960 --> 00:29:27,920
you buy one how do you manage the PAS

691
00:29:27,920 --> 00:29:31,880
security chain for getting new updates

692
00:29:31,880 --> 00:29:34,340
for firmware on my device okay so you're

693
00:29:34,340 --> 00:29:36,650
asking how the how the firmware is a

694
00:29:36,650 --> 00:29:39,110
daisy using data using the boot order

695
00:29:39,110 --> 00:29:42,410
are you asking about oh right so I can

696
00:29:42,410 --> 00:29:44,120
go into details about that so to update

697
00:29:44,120 --> 00:29:46,610
the firmware is quite simple on our

698
00:29:46,610 --> 00:29:48,080
application it's as simple as selecting

699
00:29:48,080 --> 00:29:50,630
a file that will be temporarily stored

700
00:29:50,630 --> 00:29:53,390
into our external flash then the device

701
00:29:53,390 --> 00:29:56,050
will reboot it will look at the flash

702
00:29:56,050 --> 00:29:59,120
computer hash a given hash on this

703
00:29:59,120 --> 00:30:01,580
complete file if the hash is correct and

704
00:30:01,580 --> 00:30:03,380
it is going to update the firmware self

705
00:30:03,380 --> 00:30:06,560
so it is in a to pass process first the

706
00:30:06,560 --> 00:30:08,660
first pass is going to check the the

707
00:30:08,660 --> 00:30:11,270
checksum then it is going to do a second

708
00:30:11,270 --> 00:30:13,430
pass basically is going to see each

709
00:30:13,430 --> 00:30:16,220
block flash it to the firmware but still

710
00:30:16,220 --> 00:30:17,930
set a given boolean that will prevent

711
00:30:17,930 --> 00:30:19,610
the device from booting so we are

712
00:30:19,610 --> 00:30:22,460
deliberately breaking the device until

713
00:30:22,460 --> 00:30:24,950
it is completely flashed and the check

714
00:30:24,950 --> 00:30:29,050
has been the hash has been checked again

715
00:30:29,050 --> 00:30:32,440
thank you very much

716
00:30:34,279 --> 00:30:37,549
hi thanks for a great talk I was

717
00:30:37,549 --> 00:30:39,590
wondering what have you done to stop the

718
00:30:39,590 --> 00:30:41,330
hardware manufacturers putting backdoors

719
00:30:41,330 --> 00:30:43,909
into your devices so you've got all

720
00:30:43,909 --> 00:30:45,499
these random people involved in your

721
00:30:45,499 --> 00:30:47,419
manufacturing chain how how can you make

722
00:30:47,419 --> 00:30:50,119
sure that the device is it's secure if

723
00:30:50,119 --> 00:30:51,499
I'm gonna store all my passwords on this

724
00:30:51,499 --> 00:30:55,119
it has to be absolutely right secure so

725
00:30:55,119 --> 00:30:58,129
the security of our device relies on its

726
00:30:58,129 --> 00:31:01,309
physical integrity right so we know for

727
00:31:01,309 --> 00:31:02,749
sure because of the firm right we have

728
00:31:02,749 --> 00:31:04,460
flashed that the firm has not been

729
00:31:04,460 --> 00:31:06,200
tampered with this is a guarantee we

730
00:31:06,200 --> 00:31:09,109
provide so the only way the only attack

731
00:31:09,109 --> 00:31:10,759
where that could be done during the

732
00:31:10,759 --> 00:31:12,440
manufacturing process is to implement a

733
00:31:12,440 --> 00:31:14,929
sniffer in the Indo hardware itself but

734
00:31:14,929 --> 00:31:18,049
this basically because most of the units

735
00:31:18,049 --> 00:31:19,759
we go through Switzerland where I live

736
00:31:19,759 --> 00:31:21,409
and I will just add some more some of

737
00:31:21,409 --> 00:31:22,669
them so actually this could be easily

738
00:31:22,669 --> 00:31:26,450
detected and even if there was a sniffer

739
00:31:26,450 --> 00:31:28,969
the case is made of an anemic aluminium

740
00:31:28,969 --> 00:31:31,339
so it might be a bit tricky too it's not

741
00:31:31,339 --> 00:31:33,200
a perfect Faraday cage of course but at

742
00:31:33,200 --> 00:31:35,119
least is something and the tolerances

743
00:31:35,119 --> 00:31:36,889
are quite tight so the sniffer you would

744
00:31:36,889 --> 00:31:39,559
have to put there would be happy would

745
00:31:39,559 --> 00:31:42,039
be quite small

746
00:31:45,650 --> 00:31:47,630
great work can you tell us a bit about

747
00:31:47,630 --> 00:31:49,700
certification and notice various marks

748
00:31:49,700 --> 00:31:51,590
from the back indicating that has passed

749
00:31:51,590 --> 00:31:55,940
some certification like C sorry can you

750
00:31:55,940 --> 00:31:57,830
tell us a bit about the certification of

751
00:31:57,830 --> 00:31:59,630
the device I noticed there was a CE mark

752
00:31:59,630 --> 00:32:03,640
and so on getting C FCC certification

753
00:32:03,640 --> 00:32:06,080
contrary to most Kickstarter campaigns

754
00:32:06,080 --> 00:32:07,520
out there we have done it before the

755
00:32:07,520 --> 00:32:10,930
Kickstarter once we were sure that the

756
00:32:10,930 --> 00:32:13,940
the hardware was final I know a couple

757
00:32:13,940 --> 00:32:15,950
of certification centers in Shenzhen

758
00:32:15,950 --> 00:32:18,200
directly you think that Chinese

759
00:32:18,200 --> 00:32:20,270
certification centers are not reliable

760
00:32:20,270 --> 00:32:22,100
and actually they're not joking at all

761
00:32:22,100 --> 00:32:24,430
so basically you send all your your

762
00:32:24,430 --> 00:32:26,990
schematics lay out a quick description

763
00:32:26,990 --> 00:32:29,560
of the project a quick getting started

764
00:32:29,560 --> 00:32:30,890
guide

765
00:32:30,890 --> 00:32:34,040
so the manufacturing the certification

766
00:32:34,040 --> 00:32:37,970
center can try make sure that the device

767
00:32:37,970 --> 00:32:39,770
is working and it will characterize the

768
00:32:39,770 --> 00:32:43,310
RF emissions interestingly enough they

769
00:32:43,310 --> 00:32:44,870
need to take pictures of the device and

770
00:32:44,870 --> 00:32:46,670
they need to take pictures of inside the

771
00:32:46,670 --> 00:32:48,650
device so this means that they had to

772
00:32:48,650 --> 00:32:50,990
tear open the case I didn't include the

773
00:32:50,990 --> 00:32:52,340
picture in the presentation that they

774
00:32:52,340 --> 00:32:53,930
also try to open the case and it was not

775
00:32:53,930 --> 00:32:54,620
ready at all

776
00:32:54,620 --> 00:33:02,030
yeah have you considered making a

777
00:33:02,030 --> 00:33:05,450
Bluetooth version in what are security

778
00:33:05,450 --> 00:33:08,300
implications of that yeah so this is a

779
00:33:08,300 --> 00:33:10,570
bit of a tricky subject so we want this

780
00:33:10,570 --> 00:33:13,910
device to is a hardware device to store

781
00:33:13,910 --> 00:33:14,510
passwords

782
00:33:14,510 --> 00:33:16,900
the problem with Bluetooth and any

783
00:33:16,900 --> 00:33:18,950
protocol is that you will need to move

784
00:33:18,950 --> 00:33:22,070
in certain litem ion battery and then

785
00:33:22,070 --> 00:33:23,450
you will have to add the transceivers

786
00:33:23,450 --> 00:33:25,280
you have additional certifications you

787
00:33:25,280 --> 00:33:29,000
need to fast shipping products with

788
00:33:29,000 --> 00:33:31,220
lithium batteries it's not easy it's a

789
00:33:31,220 --> 00:33:34,040
bit of a pain so we preferred designing

790
00:33:34,040 --> 00:33:36,410
a device which is as simple as possible

791
00:33:36,410 --> 00:33:39,590
to reduce the cost and but we are

792
00:33:39,590 --> 00:33:42,020
actually thinking of making a graded

793
00:33:42,020 --> 00:33:44,410
version of the multipath with different

794
00:33:44,410 --> 00:33:47,600
protocols but then Bluetooth security

795
00:33:47,600 --> 00:33:49,880
and all that and we start to have you

796
00:33:49,880 --> 00:33:51,170
would like to implement some secure

797
00:33:51,170 --> 00:33:53,720
layer on top of Bluetooth depending on

798
00:33:53,720 --> 00:33:55,490
if you trust that first action so it's a

799
00:33:55,490 --> 00:33:57,110
bit of a tricky subject at least with

800
00:33:57,110 --> 00:33:58,870
USB you make sure that

801
00:33:58,870 --> 00:34:02,590
in the wire and using the air yes

802
00:34:02,590 --> 00:34:07,840
depends on people hello

803
00:34:07,840 --> 00:34:10,330
yes thank you that's a very interesting

804
00:34:10,330 --> 00:34:12,610
product I really like the idea question

805
00:34:12,610 --> 00:34:15,820
is what steps have you taken to protect

806
00:34:15,820 --> 00:34:18,820
it from attacks by the host attack by

807
00:34:18,820 --> 00:34:27,820
what the host so the device itself has a

808
00:34:27,820 --> 00:34:30,790
universal identifier this indeed

809
00:34:30,790 --> 00:34:34,629
identifier can only be requested by

810
00:34:34,629 --> 00:34:36,730
entering a password on our app so

811
00:34:36,730 --> 00:34:39,610
basically say okay give me the unique

812
00:34:39,610 --> 00:34:41,020
and need to fire at each is the password

813
00:34:41,020 --> 00:34:43,629
so you can make sure that the indeed to

814
00:34:43,629 --> 00:34:45,580
fire is a correct one because what I

815
00:34:45,580 --> 00:34:46,810
didn't mention I should have mentioned

816
00:34:46,810 --> 00:34:48,580
is that any tampering with a firmware

817
00:34:48,580 --> 00:34:50,560
will lead to a completely erased device

818
00:34:50,560 --> 00:34:52,690
this isn't protection mechanism but the

819
00:34:52,690 --> 00:34:55,510
microcontroller itself so if someone was

820
00:34:55,510 --> 00:34:57,670
to tamper with the firmware all your

821
00:34:57,670 --> 00:35:00,010
identifiers would be erased so this is

822
00:35:00,010 --> 00:35:01,720
often I was the reason why we need to

823
00:35:01,720 --> 00:35:04,660
know who purchased what so when you

824
00:35:04,660 --> 00:35:06,670
receive your device you contact me

825
00:35:06,670 --> 00:35:08,500
directly I can make sure I can identify

826
00:35:08,500 --> 00:35:11,710
you using I guess your your postal

827
00:35:11,710 --> 00:35:14,140
address or some some elements that could

828
00:35:14,140 --> 00:35:16,120
not be be traced so I can make sure that

829
00:35:16,120 --> 00:35:17,830
I'm sending you the correct password

830
00:35:17,830 --> 00:35:19,900
then you can tell me okay this is the

831
00:35:19,900 --> 00:35:21,610
indy to fire that i have is it the

832
00:35:21,610 --> 00:35:23,350
correct one so i can tell you yes so you

833
00:35:23,350 --> 00:35:24,730
can make sure the firmware itself has

834
00:35:24,730 --> 00:35:27,640
not been tampered with yes but what

835
00:35:27,640 --> 00:35:31,000
about seems like buffer overflows power

836
00:35:31,000 --> 00:35:33,370
attacks things like that this is the

837
00:35:33,370 --> 00:35:34,300
perfect thing actually

838
00:35:34,300 --> 00:35:35,860
so buffer overflows so i didn't mention

839
00:35:35,860 --> 00:35:37,270
the name of the microcontroller the

840
00:35:37,270 --> 00:35:39,520
microcontroller we are using is a simple

841
00:35:39,520 --> 00:35:43,030
8 bit 16 megahertz microcontroller from

842
00:35:43,030 --> 00:35:45,820
Atmel and it has an harvard architecture

843
00:35:45,820 --> 00:35:48,400
so buffer overflows and all that are not

844
00:35:48,400 --> 00:35:54,780
going to lead to executed code thank you

845
00:35:55,780 --> 00:35:58,480
thanks for a great day you said like

846
00:35:58,480 --> 00:36:00,760
you're having a smart car please

847
00:36:00,760 --> 00:36:03,580
record accurate memory so then you're

848
00:36:03,580 --> 00:36:05,830
use encryption and decryption on the

849
00:36:05,830 --> 00:36:08,560
smart card or are you extracting the key

850
00:36:08,560 --> 00:36:14,530
when correct penises present extracting

851
00:36:14,530 --> 00:36:16,600
the encryption key once the card is

852
00:36:16,600 --> 00:36:21,670
unlocked so if you're saying that

853
00:36:21,670 --> 00:36:24,790
someone that could decap recap the the

854
00:36:24,790 --> 00:36:26,560
smart card and with the microscope look

855
00:36:26,560 --> 00:36:28,630
at the bits yes you would be able to get

856
00:36:28,630 --> 00:36:31,300
your encryption key but not if one

857
00:36:31,300 --> 00:36:33,430
hasn't know how much money to to decap

858
00:36:33,430 --> 00:36:37,410
smart cards make sense thank you

859
00:36:37,410 --> 00:36:39,880
what kind of yield do you get in

860
00:36:39,880 --> 00:36:42,930
manufacturing and have you had any

861
00:36:42,930 --> 00:36:46,150
defects or chips replaced without your

862
00:36:46,150 --> 00:36:49,060
knowledge so this is why I mentioned

863
00:36:49,060 --> 00:36:51,010
that you need to have as many prototypes

864
00:36:51,010 --> 00:36:53,020
run as possible to make sure that all

865
00:36:53,020 --> 00:36:55,600
the potential mistakes from the mass

866
00:36:55,600 --> 00:36:59,800
production run can be anticipated so for

867
00:36:59,800 --> 00:37:01,450
example we are the mass production one

868
00:37:01,450 --> 00:37:04,450
of the multipass minis ongoing but we

869
00:37:04,450 --> 00:37:07,240
think right now if you just take the

870
00:37:07,240 --> 00:37:09,360
mistakes from the assembler we are at

871
00:37:09,360 --> 00:37:14,260
94% but there is an additional 15%

872
00:37:14,260 --> 00:37:17,440
because of small error that means you

873
00:37:17,440 --> 00:37:19,420
have seen the programming rig so I'm

874
00:37:19,420 --> 00:37:21,520
making some checks to make sure that the

875
00:37:21,520 --> 00:37:23,110
firmware is correctly flashed but

876
00:37:23,110 --> 00:37:24,850
apparently there are some silent errors

877
00:37:24,850 --> 00:37:27,070
we are using AVR dude to program the

878
00:37:27,070 --> 00:37:30,400
micro microcontrollers so on 10 units of

879
00:37:30,400 --> 00:37:32,710
the one of the unit's we receive I think

880
00:37:32,710 --> 00:37:35,890
a bit mode for up units the the EEPROM

881
00:37:35,890 --> 00:37:37,870
was not programmed so it's quite

882
00:37:37,870 --> 00:37:39,700
interesting quite interesting because

883
00:37:39,700 --> 00:37:41,980
during the functional test the assembly

884
00:37:41,980 --> 00:37:44,200
is going to do all the tests the the

885
00:37:44,200 --> 00:37:45,970
screen lights up the label is printed

886
00:37:45,970 --> 00:37:47,800
everything is alright but when you when

887
00:37:47,800 --> 00:37:49,600
we receive the device we connected the

888
00:37:49,600 --> 00:37:51,040
device and nothing was lighting up

889
00:37:51,040 --> 00:37:53,680
nothing was happening you know I spent I

890
00:37:53,680 --> 00:37:55,150
think three days trying to see what was

891
00:37:55,150 --> 00:37:56,890
the problem and it was an a problem so

892
00:37:56,890 --> 00:37:59,290
they will be still unknowns that will

893
00:37:59,290 --> 00:38:01,060
happen so unfortunately this happened

894
00:38:01,060 --> 00:38:02,680
because it will change the process from

895
00:38:02,680 --> 00:38:04,720
programming the microcontrollers but

896
00:38:04,720 --> 00:38:08,110
from once you have made another 2 or 3

897
00:38:08,110 --> 00:38:09,170
prototype rounds

898
00:38:09,170 --> 00:38:11,059
it will be alright because your quality

899
00:38:11,059 --> 00:38:14,240
control document will be as low thorough

900
00:38:14,240 --> 00:38:17,510
thorough as possible and it should be

901
00:38:17,510 --> 00:38:19,910
all right yeah we had any components

902
00:38:19,910 --> 00:38:21,710
replaced without you knowledge like for

903
00:38:21,710 --> 00:38:25,339
cheaper components so you are asking if

904
00:38:25,339 --> 00:38:26,990
it's possible to find cheaper components

905
00:38:26,990 --> 00:38:29,710
if you manufacture replace components

906
00:38:29,710 --> 00:38:32,180
during the manufacturing process for

907
00:38:32,180 --> 00:38:33,740
once the data and cheaper for example

908
00:38:33,740 --> 00:38:36,349
it's it's possible for the assembler to

909
00:38:36,349 --> 00:38:39,020
replace some 40 components for example

910
00:38:39,020 --> 00:38:42,200
in the 10-12 percents 12 units I

911
00:38:42,200 --> 00:38:44,839
mentioned this reprogramming will

912
00:38:44,839 --> 00:38:46,640
consist in removing two components

913
00:38:46,640 --> 00:38:47,900
putting on a mass programming link

914
00:38:47,900 --> 00:38:50,450
custom-made to some additional rig we

915
00:38:50,450 --> 00:38:52,099
need to make but at least we don't need

916
00:38:52,099 --> 00:38:54,260
to disorder and we saw everything the

917
00:38:54,260 --> 00:38:56,089
manufacturer can do that on prototype

918
00:38:56,089 --> 00:38:58,160
friends it will not be a problem if you

919
00:38:58,160 --> 00:39:00,230
see a mistake in the layout something in

920
00:39:00,230 --> 00:39:02,059
the last minute he will be able to do

921
00:39:02,059 --> 00:39:03,740
that you be not be super happy but you

922
00:39:03,740 --> 00:39:04,730
can do it

923
00:39:04,730 --> 00:39:06,319
mass production forget about it's just

924
00:39:06,319 --> 00:39:08,390
not possible you will not do that on say

925
00:39:08,390 --> 00:39:10,640
1,000 components especially because the

926
00:39:10,640 --> 00:39:12,410
manufacturing manufacturing process is

927
00:39:12,410 --> 00:39:18,559
completely different thank you hi did

928
00:39:18,559 --> 00:39:21,410
you run any security audit from an

929
00:39:21,410 --> 00:39:26,359
independent security expert so asking if

930
00:39:26,359 --> 00:39:28,869
it was our code source was checked by

931
00:39:28,869 --> 00:39:32,690
external parties yes it has been checked

932
00:39:32,690 --> 00:39:36,950
by 3 or 4 different organisms all the

933
00:39:36,950 --> 00:39:39,680
times static analysis so we have the

934
00:39:39,680 --> 00:39:41,210
reports online if you're interested to

935
00:39:41,210 --> 00:39:44,480
see what the output is we passed all

936
00:39:44,480 --> 00:39:47,329
three checks you might have seen that

937
00:39:47,329 --> 00:39:49,130
some people working in some national

938
00:39:49,130 --> 00:39:51,020
agencies are working using the multi

939
00:39:51,020 --> 00:39:53,299
pass they they were the first one to

940
00:39:53,299 --> 00:39:55,579
make sure that the code was not we

941
00:39:55,579 --> 00:39:58,280
didn't hide any easter easter instead

942
00:39:58,280 --> 00:40:01,220
bags but anyway but I think they

943
00:40:01,220 --> 00:40:03,829
appreciate quite well is that no one is

944
00:40:03,829 --> 00:40:06,710
paid we do this for fun we don't have

945
00:40:06,710 --> 00:40:09,200
any ulterior motive we just do this to

946
00:40:09,200 --> 00:40:11,720
try to promote a nice way to store all

947
00:40:11,720 --> 00:40:13,609
login and password we are we don't have

948
00:40:13,609 --> 00:40:16,369
the best way but it's not the perfect

949
00:40:16,369 --> 00:40:18,319
way of storing logins and passwords but

950
00:40:18,319 --> 00:40:19,730
is still better than software based

951
00:40:19,730 --> 00:40:21,180
password keepers we will have your

952
00:40:21,180 --> 00:40:23,220
main password and your database inside

953
00:40:23,220 --> 00:40:26,940
your computer memory and at the hardware

954
00:40:26,940 --> 00:40:34,260
level did someone there is a risk talk

955
00:40:34,260 --> 00:40:36,960
the open source processor talk I think

956
00:40:36,960 --> 00:40:38,160
in two hours that would be quite

957
00:40:38,160 --> 00:40:40,349
interested firstly we are forced to

958
00:40:40,349 --> 00:40:41,930
trust the microcontroller Mac

959
00:40:41,930 --> 00:40:47,579
manufacturer we accept the risk risk 5

960
00:40:47,579 --> 00:40:51,329
with the processor thirdly you have to

961
00:40:51,329 --> 00:40:53,609
trust the silicon this is there's no way

962
00:40:53,609 --> 00:40:54,079
around that

963
00:40:54,079 --> 00:41:01,770
ok thank you how do you under backup

964
00:41:01,770 --> 00:41:04,530
memory stores ok yes should have

965
00:41:04,530 --> 00:41:06,000
mentioned it as well so it is possible

966
00:41:06,000 --> 00:41:07,920
the smart card that stores your

967
00:41:07,920 --> 00:41:09,690
encryption key can be cloned under these

968
00:41:09,690 --> 00:41:12,839
device itself so you have your device

969
00:41:12,839 --> 00:41:14,460
you're going to the settings menu say ok

970
00:41:14,460 --> 00:41:16,260
I want to clone my smart card and set

971
00:41:16,260 --> 00:41:17,910
your smart card we move it put a blank

972
00:41:17,910 --> 00:41:19,440
one it would be clone so this is a way

973
00:41:19,440 --> 00:41:21,780
to making clones of your smart card the

974
00:41:21,780 --> 00:41:23,670
database itself can be exported to the

975
00:41:23,670 --> 00:41:25,380
computer anyway the database is

976
00:41:25,380 --> 00:41:27,960
encrypted so we don't care if it gets

977
00:41:27,960 --> 00:41:29,819
exported anywhere you can do what you

978
00:41:29,819 --> 00:41:31,890
can try to encrypt it if we not work so

979
00:41:31,890 --> 00:41:34,619
you if you use your card luckily we have

980
00:41:34,619 --> 00:41:36,390
made you will have made a clone before

981
00:41:36,390 --> 00:41:39,780
and if you lose your device either you

982
00:41:39,780 --> 00:41:41,369
make a new one from the different files

983
00:41:41,369 --> 00:41:43,559
we haven't github or you purchase a new

984
00:41:43,559 --> 00:41:45,450
one from us and you restore your

985
00:41:45,450 --> 00:41:50,808
database thank you all right

986
00:41:52,590 --> 00:41:55,860
seems to be good

987
00:41:58,250 --> 00:41:59,930
I think thank you very much

988
00:41:59,930 --> 00:42:06,169
[Applause]

