1
00:00:00,890 --> 00:00:04,290
[Music]

2
00:00:04,790 --> 00:00:06,740
so you mentioned I want to talk about if

3
00:00:06,740 --> 00:00:10,340
you have XTP than it is and whenever

4
00:00:10,340 --> 00:00:12,049
some recent developments in linux kernel

5
00:00:12,049 --> 00:00:15,799
a community to start off what is PPF

6
00:00:15,799 --> 00:00:19,220
probably everybody of us use TCP dump in

7
00:00:19,220 --> 00:00:21,619
one way or another if you enter some

8
00:00:21,619 --> 00:00:23,869
filter and TCP lamp that filter gets

9
00:00:23,869 --> 00:00:26,779
compiled down into some pipe code just

10
00:00:26,779 --> 00:00:28,820
by code is called PPF this done by in

11
00:00:28,820 --> 00:00:30,439
the pcap and then pushed into the kernel

12
00:00:30,439 --> 00:00:35,420
and if i could and that is already

13
00:00:35,420 --> 00:00:38,320
existent for a very long time and

14
00:00:38,320 --> 00:00:41,990
nowadays we call this classic BPF 4c p

15
00:00:41,990 --> 00:00:44,290
PF and this quad extended heavily

16
00:00:44,290 --> 00:00:46,700
probably is like one on three years ago

17
00:00:46,700 --> 00:00:48,860
in the car into something that is called

18
00:00:48,860 --> 00:00:54,710
ebps and IPPF is an efficient generic in

19
00:00:54,710 --> 00:00:58,160
kernel white code engine it is used in

20
00:00:58,160 --> 00:01:00,649
many different subsystems in the economy

21
00:01:00,649 --> 00:01:02,120
right now they're probably like creative

22
00:01:02,120 --> 00:01:06,049
team major areas which is networking

23
00:01:06,049 --> 00:01:10,389
tracing and also sandboxing or security

24
00:01:10,389 --> 00:01:14,659
regarding tracing and sandboxing so

25
00:01:14,659 --> 00:01:16,819
tracing for example you have like perf

26
00:01:16,819 --> 00:01:21,619
we can attach EPF programs to trace

27
00:01:21,619 --> 00:01:24,399
point scapes things like that and then

28
00:01:24,399 --> 00:01:28,069
every time an event triggers maybe PPF

29
00:01:28,069 --> 00:01:31,060
program runs and then you can analyze

30
00:01:31,060 --> 00:01:33,590
different things in the kernel can

31
00:01:33,590 --> 00:01:35,920
recall memory and so on and so forth for

32
00:01:35,920 --> 00:01:39,200
sandboxing probably the most popular the

33
00:01:39,200 --> 00:01:41,420
most prominent user is the chrome web

34
00:01:41,420 --> 00:01:45,069
browser where it uses second PPF to

35
00:01:45,069 --> 00:01:46,950
photo

36
00:01:46,950 --> 00:01:51,530
system calls to whitelist system calls

37
00:01:51,530 --> 00:01:54,990
and so on so this is quite flexible that

38
00:01:54,990 --> 00:02:00,390
second people have it's not yet

39
00:02:00,390 --> 00:02:05,570
it's CBP F so still this classic PPF

40
00:02:05,570 --> 00:02:08,389
that is pushed down to the kind of a

41
00:02:08,389 --> 00:02:10,830
networking which is what we want to talk

42
00:02:10,830 --> 00:02:14,220
about here there are various things for

43
00:02:14,220 --> 00:02:16,410
example in sockets you have socket

44
00:02:16,410 --> 00:02:19,140
filters with a packet what I already

45
00:02:19,140 --> 00:02:20,970
mentioned then you have various dimacs

46
00:02:20,970 --> 00:02:24,240
facilities for example SOE use part when

47
00:02:24,240 --> 00:02:25,530
you have multiple circuits that are in a

48
00:02:25,530 --> 00:02:29,610
group that can reuse a specific part

49
00:02:29,610 --> 00:02:31,920
then you can have an EP PF program that

50
00:02:31,920 --> 00:02:34,620
makes the decision to what what that

51
00:02:34,620 --> 00:02:38,520
connection is going to be you also fi if

52
00:02:38,520 --> 00:02:41,940
I could for example fan out we have F

53
00:02:41,940 --> 00:02:44,760
packet circuits and then the traffic can

54
00:02:44,760 --> 00:02:46,830
get load balanced like that to one of

55
00:02:46,830 --> 00:02:48,420
those sockets participating in that

56
00:02:48,420 --> 00:02:52,310
group and then you have X T P and T C so

57
00:02:52,310 --> 00:02:56,880
I will start with the facility that we

58
00:02:56,880 --> 00:02:59,880
haven't TC this is called Co sppf for p

59
00:02:59,880 --> 00:03:01,860
PF classifier it's called like this I

60
00:03:01,860 --> 00:03:04,470
mean classifier for striking reasons but

61
00:03:04,470 --> 00:03:06,239
they can do way more than just

62
00:03:06,239 --> 00:03:08,610
classification so it's it's a flexible

63
00:03:08,610 --> 00:03:12,060
programmable microprocessor and DTC

64
00:03:12,060 --> 00:03:15,860
subsystem you can attach that you can

65
00:03:15,860 --> 00:03:19,110
attach an EP PF program there on the

66
00:03:19,110 --> 00:03:22,489
ingress or equals path of the data path

67
00:03:22,489 --> 00:03:26,930
of networking device and yeah and then

68
00:03:26,930 --> 00:03:30,120
XT P which had recently introduced into

69
00:03:30,120 --> 00:03:32,220
the kernel this is also programmable but

70
00:03:32,220 --> 00:03:35,670
high performance in kernel packet purses

71
00:03:35,670 --> 00:03:37,790
or

72
00:03:39,650 --> 00:03:43,170
that is attachable two drivers that

73
00:03:43,170 --> 00:03:45,780
support it and on the English side of

74
00:03:45,780 --> 00:03:47,489
the driver I will talk about more about

75
00:03:47,489 --> 00:03:50,549
that later I think both things they're

76
00:03:50,549 --> 00:03:52,530
complementary to each other in the sense

77
00:03:52,530 --> 00:03:55,829
that Co sppf can be attached to all

78
00:03:55,829 --> 00:03:58,260
networking devices also retro ones like

79
00:03:58,260 --> 00:04:02,340
we've devices for different four key

80
00:04:02,340 --> 00:04:04,169
names places and it can be attached

81
00:04:04,169 --> 00:04:07,709
ingress and egress and XTP is currently

82
00:04:07,709 --> 00:04:13,739
on ingress and for sppf you have socket

83
00:04:13,739 --> 00:04:14,939
buffer which is the networking

84
00:04:14,939 --> 00:04:17,160
representation at the current

85
00:04:17,160 --> 00:04:20,279
representation of a network packet as

86
00:04:20,279 --> 00:04:22,410
you have that as an input into the PPF

87
00:04:22,410 --> 00:04:25,020
program where it works with that data

88
00:04:25,020 --> 00:04:30,810
and you have which are contacts with

89
00:04:30,810 --> 00:04:33,449
that but both are complementary to each

90
00:04:33,449 --> 00:04:37,139
other and quite flexible so first before

91
00:04:37,139 --> 00:04:41,210
I dive into the details of subsystems

92
00:04:41,210 --> 00:04:43,830
present shortly about the PPF

93
00:04:43,830 --> 00:04:49,139
architecture it consists of 11 64-bit

94
00:04:49,139 --> 00:04:51,810
registers you also have separate users

95
00:04:51,810 --> 00:04:53,849
there you have a stack that is limited

96
00:04:53,849 --> 00:04:57,300
it's currently 512 bytes on the current

97
00:04:57,300 --> 00:04:59,639
stack inclusively premium County of

98
00:04:59,639 --> 00:05:02,250
course the instructions there are fixed

99
00:05:02,250 --> 00:05:05,699
size 64 64 bit wide and you can have

100
00:05:05,699 --> 00:05:09,409
maximum of 4069 instructions per program

101
00:05:09,409 --> 00:05:12,270
which doesn't seem much but you can do

102
00:05:12,270 --> 00:05:15,180
you can still do quite a lot and quite

103
00:05:15,180 --> 00:05:18,870
also complex things with it compared to

104
00:05:18,870 --> 00:05:21,509
the CPF that we know from tcpdump like

105
00:05:21,509 --> 00:05:23,610
what I mentioned earlier there are

106
00:05:23,610 --> 00:05:26,039
various new instructions of course you

107
00:05:26,039 --> 00:05:28,169
have the whole 64 bit range of

108
00:05:28,169 --> 00:05:30,330
instructions for other operations for

109
00:05:30,330 --> 00:05:33,479
example because the CPP efforts only 32

110
00:05:33,479 --> 00:05:37,940
bit and you have things like

111
00:05:39,210 --> 00:05:42,010
you have a call instructions where I can

112
00:05:42,010 --> 00:05:45,850
call into a hyperfunction

113
00:05:45,850 --> 00:05:50,050
what I call explain that later so as

114
00:05:50,050 --> 00:05:54,310
various new instructions and if the core

115
00:05:54,310 --> 00:05:56,230
components after architectures that you

116
00:05:56,230 --> 00:06:00,460
have readwrite access to the input

117
00:06:00,460 --> 00:06:03,280
context the input context as I mentioned

118
00:06:03,280 --> 00:06:06,600
for example in TC is a socket buffer in

119
00:06:06,600 --> 00:06:11,200
XTP it's like a small representation

120
00:06:11,200 --> 00:06:15,370
where you can access the deemed like tip

121
00:06:15,370 --> 00:06:19,419
network packet for the exterior

122
00:06:19,419 --> 00:06:21,820
presentation then you have a helper

123
00:06:21,820 --> 00:06:23,530
function concept which means that the

124
00:06:23,530 --> 00:06:27,430
chrono exposes a fixed fine set of

125
00:06:27,430 --> 00:06:30,520
wipers or like functions that BPF

126
00:06:30,520 --> 00:06:32,800
program can call into so i cannot call

127
00:06:32,800 --> 00:06:37,570
arbitrary kernel memory that just fixed

128
00:06:37,570 --> 00:06:43,840
that then the maps maps efficient key

129
00:06:43,840 --> 00:06:47,340
value the data structures that can be

130
00:06:47,340 --> 00:06:50,320
shared arbitrarily which means one or

131
00:06:50,320 --> 00:06:53,290
multiple EPF programs can access that

132
00:06:53,290 --> 00:06:57,940
map or new space can can access and read

133
00:06:57,940 --> 00:07:02,200
or update data from it at the same time

134
00:07:02,200 --> 00:07:05,350
so then there are tail call stair calls

135
00:07:05,350 --> 00:07:14,229
the concept so you don't have this fixed

136
00:07:14,229 --> 00:07:16,320
limitation or 4069

137
00:07:16,320 --> 00:07:18,700
instruction program but you can also go

138
00:07:18,700 --> 00:07:22,470
beyond that and this is quite useful

139
00:07:22,470 --> 00:07:25,419
uses the same stack frame so it's also

140
00:07:25,419 --> 00:07:29,560
quite fast then there's a concept of

141
00:07:29,560 --> 00:07:35,710
object pinning which means that from

142
00:07:35,710 --> 00:07:37,990
users based perspective programs and

143
00:07:37,990 --> 00:07:39,639
maps their access through file

144
00:07:39,639 --> 00:07:43,090
descriptors and once you load a program

145
00:07:43,090 --> 00:07:46,210
into the corner for example by RTC then

146
00:07:46,210 --> 00:07:49,000
this file descriptor contour just your

147
00:07:49,000 --> 00:07:51,310
file descriptor is basically unavailable

148
00:07:51,310 --> 00:07:57,040
for other programs to use and to share

149
00:07:57,040 --> 00:08:00,880
maps with also other applications you

150
00:08:00,880 --> 00:08:02,979
can you can pin them in a pseudo file

151
00:08:02,979 --> 00:08:06,250
system as a node there and then there's

152
00:08:06,250 --> 00:08:08,410
other programs that can retrieve it and

153
00:08:08,410 --> 00:08:10,750
also work on this map to update or

154
00:08:10,750 --> 00:08:14,110
retail down then in the Conner

155
00:08:14,110 --> 00:08:16,300
there's see people have to be AF

156
00:08:16,300 --> 00:08:19,000
translator which means that whenever you

157
00:08:19,000 --> 00:08:22,810
load your classic TCP one filter in the

158
00:08:22,810 --> 00:08:24,389
corner that gets transparently

159
00:08:24,389 --> 00:08:28,419
translated to EPF and only ones on EBP F

160
00:08:28,419 --> 00:08:32,349
and the nice thing about PPP efforts

161
00:08:32,349 --> 00:08:35,530
that from users beside em has an API

162
00:08:35,530 --> 00:08:38,110
back-end which means that you can write

163
00:08:38,110 --> 00:08:42,760
as C like program and VM translates that

164
00:08:42,760 --> 00:08:45,610
into an object file which has EBP F

165
00:08:45,610 --> 00:08:48,520
instructions that can then be loaded

166
00:08:48,520 --> 00:08:53,770
into the kernel interpreter and the

167
00:08:53,770 --> 00:08:55,690
colonel had also a just-in-time compiler

168
00:08:55,690 --> 00:08:58,780
so whenever you load program and the

169
00:08:58,780 --> 00:09:00,310
just-in-time compiler is enabled and

170
00:09:00,310 --> 00:09:02,530
this gets mapped directly to native up

171
00:09:02,530 --> 00:09:04,000
code so we can run with native

172
00:09:04,000 --> 00:09:07,000
performance all of that is managed

173
00:09:07,000 --> 00:09:10,720
through the PPF system core so it's like

174
00:09:10,720 --> 00:09:13,060
a stable API and also your programs when

175
00:09:13,060 --> 00:09:15,490
they when you implement them they are

176
00:09:15,490 --> 00:09:17,620
basically stable so once your current

177
00:09:17,620 --> 00:09:20,650
supports that it's like guarantee that

178
00:09:20,650 --> 00:09:23,080
your comments will also support that in

179
00:09:23,080 --> 00:09:25,360
future unlike for example current module

180
00:09:25,360 --> 00:09:30,040
where internals can always change so to

181
00:09:30,040 --> 00:09:31,060
give you some

182
00:09:31,060 --> 00:09:35,530
more details regarding TC TC you can

183
00:09:35,530 --> 00:09:40,990
basically attach this your sppf to Q

184
00:09:40,990 --> 00:09:44,200
risk and just like the cutest creatures

185
00:09:44,200 --> 00:09:46,990
called chat Co as act which is just

186
00:09:46,990 --> 00:09:48,520
super cute is similar to the English

187
00:09:48,520 --> 00:09:51,010
cutest in the camera and this is only

188
00:09:51,010 --> 00:09:53,790
there for the purpose of attaching

189
00:09:53,790 --> 00:09:57,240
classifiers and actions if your family

190
00:09:57,240 --> 00:10:02,620
TTC and in that case we want to attach

191
00:10:02,620 --> 00:10:06,490
us of course Co sppf there are two

192
00:10:06,490 --> 00:10:09,760
central hooks whereas Chettiar as act

193
00:10:09,760 --> 00:10:12,010
Cooter's can attach to which is the

194
00:10:12,010 --> 00:10:14,020
ingress and egress code so they are

195
00:10:14,020 --> 00:10:16,120
basically like really central places

196
00:10:16,120 --> 00:10:18,310
where any packet has to go through from

197
00:10:18,310 --> 00:10:24,250
Rx and TX ID yes historically it also

198
00:10:24,250 --> 00:10:29,080
supports CBP F support flavors and you

199
00:10:29,080 --> 00:10:30,790
can atomically update your programs

200
00:10:30,790 --> 00:10:35,760
during one time which is really the

201
00:10:35,760 --> 00:10:38,860
program that is attached to this USB PF

202
00:10:38,860 --> 00:10:43,150
densifier itself those tail calls when

203
00:10:43,150 --> 00:10:44,920
program calls into another they can also

204
00:10:44,920 --> 00:10:49,079
automatically get updated during runtime

205
00:10:49,110 --> 00:10:51,310
networking interface things like that

206
00:10:51,310 --> 00:10:57,130
and see sppf has a fast path which means

207
00:10:57,130 --> 00:11:01,150
that historically TC has classifiers in

208
00:11:01,150 --> 00:11:04,000
actions where I mentioned and classifier

209
00:11:04,000 --> 00:11:06,010
once that's done classifying can then

210
00:11:06,010 --> 00:11:08,170
call into a chain of actions and all of

211
00:11:08,170 --> 00:11:11,080
that is pretty inefficient and can do

212
00:11:11,080 --> 00:11:14,020
everything contained in itself anyway so

213
00:11:14,020 --> 00:11:17,440
therefore this sppf has a so-called

214
00:11:17,440 --> 00:11:20,500
direct action mode where

215
00:11:20,500 --> 00:11:23,870
laughs can classify a mango perform

216
00:11:23,870 --> 00:11:26,870
various actions on the skp on the socket

217
00:11:26,870 --> 00:11:29,180
buffer this is an input and then just

218
00:11:29,180 --> 00:11:30,770
return a verdict and then be done with

219
00:11:30,770 --> 00:11:33,320
it so it doesn't call into chain of

220
00:11:33,320 --> 00:11:35,780
actions or whatever everything is done

221
00:11:35,780 --> 00:11:38,540
in the PPF program itself and there's

222
00:11:38,540 --> 00:11:42,920
also an interface for example the

223
00:11:42,920 --> 00:11:45,560
metronome and P driver if you have such

224
00:11:45,560 --> 00:11:49,640
an acronym smart neck can offload IPPF

225
00:11:49,640 --> 00:11:51,770
programs which means that whenever you

226
00:11:51,770 --> 00:11:55,550
load your program to zero sppf and have

227
00:11:55,550 --> 00:11:58,430
such a cart and it gets translated into

228
00:11:58,430 --> 00:12:02,870
the into native code that supported for

229
00:12:02,870 --> 00:12:05,540
the instruction set on the NFP driver

230
00:12:05,540 --> 00:12:08,360
so a typical workflow would be you add

231
00:12:08,360 --> 00:12:11,540
your C program you compile gets

232
00:12:11,540 --> 00:12:15,080
translated into into F instructions so

233
00:12:15,080 --> 00:12:16,970
into F instructions they are contained

234
00:12:16,970 --> 00:12:19,420
in an elf object form

235
00:12:19,420 --> 00:12:23,450
TC and in that case can read that object

236
00:12:23,450 --> 00:12:25,040
file and note those instructions to the

237
00:12:25,040 --> 00:12:27,110
kernel in the Kannada gateway fight

238
00:12:27,110 --> 00:12:29,570
which means that glow file make sure

239
00:12:29,570 --> 00:12:32,540
that the instructions cannot crash the

240
00:12:32,540 --> 00:12:34,490
car no it cannot create infinite loops

241
00:12:34,490 --> 00:12:35,390
things like that

242
00:12:35,390 --> 00:12:38,530
then it gets just-in-time compiler then

243
00:12:38,530 --> 00:12:42,370
this is pushed down into cos PDF

244
00:12:42,370 --> 00:12:45,770
classifier and then eventually gets

245
00:12:45,770 --> 00:12:49,790
offloaded so that's like typical

246
00:12:49,790 --> 00:12:53,210
workflow for that and xtp on the other

247
00:12:53,210 --> 00:12:57,020
hand this was introduced probably one

248
00:12:57,020 --> 00:13:00,470
year ago on to the car the objectives

249
00:13:00,470 --> 00:13:02,740
there is that it's really

250
00:13:02,740 --> 00:13:07,080
for high-performance packet processing

251
00:13:07,200 --> 00:13:11,260
so what it does is it runs an EB PF

252
00:13:11,260 --> 00:13:14,770
program the very values point in the

253
00:13:14,770 --> 00:13:20,520
driver so this is it so even before you

254
00:13:20,520 --> 00:13:23,500
and an skp made a data structure

255
00:13:23,500 --> 00:13:27,180
this is one of the overheads to kind of

256
00:13:27,180 --> 00:13:30,580
have for doing high-performance packet

257
00:13:30,580 --> 00:13:33,279
processing with small packets in

258
00:13:33,279 --> 00:13:35,680
particular and the nice thing is that

259
00:13:35,680 --> 00:13:39,220
this kind of framework works in concert

260
00:13:39,220 --> 00:13:41,380
with the kernel which means it uses the

261
00:13:41,380 --> 00:13:45,209
same security module you don't have your

262
00:13:45,209 --> 00:13:48,220
NIC representation or your driver in

263
00:13:48,220 --> 00:13:52,180
userspace and have it it exposed there

264
00:13:52,180 --> 00:13:54,910
but it still stays in the kernel there's

265
00:13:54,910 --> 00:13:57,120
no out of tree module needed for

266
00:13:57,120 --> 00:14:01,660
accessing that and the packet itself it

267
00:14:01,660 --> 00:14:04,180
also stays in the kernel which means you

268
00:14:04,180 --> 00:14:05,920
don't have to cross boundaries when you

269
00:14:05,920 --> 00:14:08,200
want to get it out or when you want to

270
00:14:08,200 --> 00:14:09,910
push it back into the kernel which is

271
00:14:09,910 --> 00:14:11,350
for example nice if you want to record

272
00:14:11,350 --> 00:14:14,890
containers for example and when if the

273
00:14:14,890 --> 00:14:17,110
use cases could be that you're

274
00:14:17,110 --> 00:14:19,480
implementing a firewalling application

275
00:14:19,480 --> 00:14:23,670
and I can already filter packets all the

276
00:14:23,670 --> 00:14:26,950
possible point on your NIC and then from

277
00:14:26,950 --> 00:14:27,850
there

278
00:14:27,850 --> 00:14:30,640
part of those packets that can get

279
00:14:30,640 --> 00:14:32,860
further passed to the kernel stack and

280
00:14:32,860 --> 00:14:35,980
then into some of the containers other

281
00:14:35,980 --> 00:14:38,680
use cases includes load balancing for

282
00:14:38,680 --> 00:14:41,290
example there's a return load balancing

283
00:14:41,290 --> 00:14:44,670
is currently possible with that and

284
00:14:44,670 --> 00:14:49,360
mangling and forwarding or anti denial

285
00:14:49,360 --> 00:14:51,310
of service measures

286
00:14:51,310 --> 00:14:53,380
monitoring is also possible so there's

287
00:14:53,380 --> 00:14:55,420
currently an interface where you can

288
00:14:55,420 --> 00:14:57,940
push packets to use the space for

289
00:14:57,940 --> 00:15:01,610
sampling and monitoring from XDP side

290
00:15:01,610 --> 00:15:05,590
yeah and yellow is ready similar to TC

291
00:15:05,590 --> 00:15:09,320
which means either you can drop packets

292
00:15:09,320 --> 00:15:11,210
past and further onto the kernel stack

293
00:15:11,210 --> 00:15:15,260
or transmit them out again and they're

294
00:15:15,260 --> 00:15:16,310
currently a number of drivers that

295
00:15:16,310 --> 00:15:20,810
support that some for example many Maps

296
00:15:20,810 --> 00:15:23,570
drivers ml X 4 and X 5 then we have the

297
00:15:23,570 --> 00:15:26,890
metronome driver again and to logic

298
00:15:26,890 --> 00:15:30,160
there's using the weather net support

299
00:15:30,160 --> 00:15:35,440
that has been merged and Intel for the

300
00:15:35,440 --> 00:15:40,220
posted to the net list so it would be

301
00:15:40,220 --> 00:15:47,050
merged swing and as well be NXT the

302
00:15:47,050 --> 00:15:50,360
drivers some of them currently depending

303
00:15:50,360 --> 00:15:51,950
on implementation but that will change

304
00:15:51,950 --> 00:15:54,290
the future that all of them will support

305
00:15:54,290 --> 00:15:58,280
that most likely allow also for atomic

306
00:15:58,280 --> 00:16:01,040
updates so once you have your actually P

307
00:16:01,040 --> 00:16:03,800
program loaded and you want it with a

308
00:16:03,800 --> 00:16:08,110
new version this can happen without

309
00:16:08,110 --> 00:16:12,620
disruption of any traffic and also xtp

310
00:16:12,620 --> 00:16:15,860
has an offloading interface and again

311
00:16:15,860 --> 00:16:18,740
also an eternal has support for that so

312
00:16:18,740 --> 00:16:22,450
once you load your HTTP program natural

313
00:16:22,450 --> 00:16:24,560
can offload that with a couple of

314
00:16:24,560 --> 00:16:29,300
limitations currently but it's already

315
00:16:29,300 --> 00:16:31,880
good way forward in the web from here

316
00:16:31,880 --> 00:16:34,250
similar to what I mentioned earlier you

317
00:16:34,250 --> 00:16:36,560
have your C program

318
00:16:36,560 --> 00:16:41,060
and this time IP so I linked command can

319
00:16:41,060 --> 00:16:45,430
be used as a loader for pushing the

320
00:16:45,430 --> 00:16:48,470
secret the PPF sequence down to the

321
00:16:48,470 --> 00:16:55,329
kernel and yeah some of those features I

322
00:16:55,329 --> 00:16:57,649
mentioned they're maps which fish the

323
00:16:57,649 --> 00:17:01,189
key value stores you can from an DPF

324
00:17:01,189 --> 00:17:03,699
program lookup update or delete elements

325
00:17:03,699 --> 00:17:06,530
created a couple of flavors which are

326
00:17:06,530 --> 00:17:09,770
our Maps hash tables least recently used

327
00:17:09,770 --> 00:17:12,679
maps and longest prefix match which has

328
00:17:12,679 --> 00:17:23,990
been merged for both types and you also

329
00:17:23,990 --> 00:17:29,179
have variants and there's also

330
00:17:29,179 --> 00:17:31,970
possibility to pre-allocate the whole

331
00:17:31,970 --> 00:17:36,409
memories you have a pool and you can you

332
00:17:36,409 --> 00:17:37,789
don't have to allocate your elements

333
00:17:37,789 --> 00:17:41,110
through the normal education facilities

334
00:17:41,110 --> 00:17:43,390
then there are also specialized maps

335
00:17:43,390 --> 00:17:45,950
which means they can not be used like

336
00:17:45,950 --> 00:17:47,750
those generic maps that they are used

337
00:17:47,750 --> 00:17:52,450
with people have helpers for example the

338
00:17:52,450 --> 00:17:58,399
program map which is used for tail calls

339
00:17:58,399 --> 00:18:01,100
where it can push files to place into

340
00:18:01,100 --> 00:18:06,049
this specific map and then you can jump

341
00:18:06,049 --> 00:18:11,419
into that through that there's direct

342
00:18:11,419 --> 00:18:15,320
packet access which means another

343
00:18:15,320 --> 00:18:18,350
support in both cases you sppf and xtp

344
00:18:18,350 --> 00:18:21,890
direct packet with right means that in

345
00:18:21,890 --> 00:18:24,770
the past cos people have had to use

346
00:18:24,770 --> 00:18:26,559
helper functions where you pass

347
00:18:26,559 --> 00:18:28,779
in a stack buffer and gets filled for

348
00:18:28,779 --> 00:18:30,639
the offset the number of parts you want

349
00:18:30,639 --> 00:18:31,509
to redirect

350
00:18:31,509 --> 00:18:34,090
it means you can for example just cross

351
00:18:34,090 --> 00:18:37,480
your header directly without having to

352
00:18:37,480 --> 00:18:39,730
go through help so it's performance

353
00:18:39,730 --> 00:18:45,549
optimization there for example in the

354
00:18:45,549 --> 00:18:48,779
socket buffer case on sppf you can use

355
00:18:48,779 --> 00:18:52,480
skb mark for example there are various

356
00:18:52,480 --> 00:18:55,840
other things there but so it can work

357
00:18:55,840 --> 00:18:57,429
with other facilities from the kernel as

358
00:18:57,429 --> 00:19:04,389
well we got a packet forwarding SPF as I

359
00:19:04,389 --> 00:19:08,799
mentioned can forward so it can forward

360
00:19:08,799 --> 00:19:11,710
packets to any networking device

361
00:19:11,710 --> 00:19:14,200
including virtual ones so when you push

362
00:19:14,200 --> 00:19:17,100
that into container over we for example

363
00:19:17,100 --> 00:19:19,749
you can put it all to the same port or

364
00:19:19,749 --> 00:19:23,470
can loop it back to the path for XDP

365
00:19:23,470 --> 00:19:25,899
it's currently still limited

366
00:19:25,899 --> 00:19:28,779
so in xtp case you can only push it out

367
00:19:28,779 --> 00:19:33,100
to the same port came in in progress to

368
00:19:33,100 --> 00:19:39,100
also support multi port 2 X 2 X through

369
00:19:39,100 --> 00:19:41,259
a different net device that also

370
00:19:41,259 --> 00:19:45,490
supports xep future but currently to the

371
00:19:45,490 --> 00:19:47,950
same part it's - because for example

372
00:19:47,950 --> 00:19:49,419
when you have to let the lens you use

373
00:19:49,419 --> 00:19:53,230
case with directory turn your note that

374
00:19:53,230 --> 00:19:54,940
once or your local answer that would

375
00:19:54,940 --> 00:19:55,299
once

376
00:19:55,299 --> 00:19:58,010
xtp gets the packet

377
00:19:58,010 --> 00:20:01,010
and rewrites various parts and push it

378
00:20:01,010 --> 00:20:03,860
out again but the reply packets since

379
00:20:03,860 --> 00:20:05,360
its director Witcher and go different

380
00:20:05,360 --> 00:20:08,960
paths so it's still very useful to do

381
00:20:08,960 --> 00:20:10,040
that

382
00:20:10,040 --> 00:20:12,590
that's a miscellaneous things you can do

383
00:20:12,590 --> 00:20:13,610
encapsulation

384
00:20:13,610 --> 00:20:16,940
so there's the excellent genève to IP IP

385
00:20:16,940 --> 00:20:20,870
encapsulation available for CSP PF x to

386
00:20:20,870 --> 00:20:23,960
be way more flexible actually you can do

387
00:20:23,960 --> 00:20:25,549
any kind of encapsulation you want

388
00:20:25,549 --> 00:20:27,500
because at that point at that early

389
00:20:27,500 --> 00:20:29,840
point in time the colonel doesn't know

390
00:20:29,840 --> 00:20:31,730
anything about the packet that is coming

391
00:20:31,730 --> 00:20:37,690
in yet and so you're not limited by the

392
00:20:38,280 --> 00:20:39,610
[Music]

393
00:20:39,610 --> 00:20:50,030
from the itself because you can have

394
00:20:50,030 --> 00:20:56,090
custom own custom structs and and then

395
00:20:56,090 --> 00:20:58,370
pushed out to a high-performance per cpu

396
00:20:58,370 --> 00:21:01,870
memory mapped we afford to use a space

397
00:21:01,870 --> 00:21:07,720
that can be some specific data and

398
00:21:07,720 --> 00:21:15,230
packet itself up to a full packet so

399
00:21:15,230 --> 00:21:16,309
that is useful if you have some

400
00:21:16,309 --> 00:21:17,929
management demons that then listen on

401
00:21:17,929 --> 00:21:23,980
certain events and updates later on

402
00:21:23,980 --> 00:21:27,470
programs for tail calls and so on you

403
00:21:27,470 --> 00:21:29,630
have checks and angling you have to

404
00:21:29,630 --> 00:21:33,590
group supports inverse other things I

405
00:21:33,590 --> 00:21:36,620
think to as the letter I already

406
00:21:36,620 --> 00:21:39,830
mentioned that it has it can push down

407
00:21:39,830 --> 00:21:45,169
the PPF code into the kernel just to

408
00:21:45,169 --> 00:21:47,240
give you an example how it works so for

409
00:21:47,240 --> 00:21:48,830
example MTC case you said that the

410
00:21:48,830 --> 00:21:50,720
cutest first and you can set up the

411
00:21:50,720 --> 00:21:52,340
filter and then you need to find whether

412
00:21:52,340 --> 00:21:54,870
an ingress or egress ID you want to

413
00:21:54,870 --> 00:21:57,930
hope that people have program to and

414
00:21:57,930 --> 00:22:00,210
then you define the object itself and

415
00:22:00,210 --> 00:22:02,820
then the object can have various

416
00:22:02,820 --> 00:22:05,309
sections which contain the program code

417
00:22:05,309 --> 00:22:08,370
to actual program code and XTP workflow

418
00:22:08,370 --> 00:22:12,210
it's currently where I can say I want to

419
00:22:12,210 --> 00:22:15,420
learn to program by an IP link and then

420
00:22:15,420 --> 00:22:18,510
as well as specify the object and then

421
00:22:18,510 --> 00:22:20,760
it gets pushed down and they have common

422
00:22:20,760 --> 00:22:23,030
chat

423
00:22:23,180 --> 00:22:25,580
estimated the back end so it doesn't

424
00:22:25,580 --> 00:22:27,960
necessarily have to be able to you can

425
00:22:27,960 --> 00:22:30,059
also have other letters if you program

426
00:22:30,059 --> 00:22:33,030
them yourself the libraries that support

427
00:22:33,030 --> 00:22:36,179
it so it's just one flavor where you can

428
00:22:36,179 --> 00:22:38,940
do that democratic just-in-time

429
00:22:38,940 --> 00:22:43,740
compilers there's x86 support arm 64

430
00:22:43,740 --> 00:22:49,050
PowerPC and 390x so they all have EPF

431
00:22:49,050 --> 00:22:53,670
afloat yeah and PowerPC quite recently

432
00:22:53,670 --> 00:22:57,450
March which is nice and the same for the

433
00:22:57,450 --> 00:23:00,360
NFP driver which also implements a

434
00:23:00,360 --> 00:23:02,610
just-in-time compiler for the NFP

435
00:23:02,610 --> 00:23:04,230
specific instruction set for the

436
00:23:04,230 --> 00:23:08,850
networking offload is measures against

437
00:23:08,850 --> 00:23:15,330
for those two programs I'm not going to

438
00:23:15,330 --> 00:23:18,059
mention the detail here and the other

439
00:23:18,059 --> 00:23:20,060
recent improvements for example IBM

440
00:23:20,060 --> 00:23:22,340
[Music]

441
00:23:22,340 --> 00:23:26,340
support which means you can annotate

442
00:23:26,340 --> 00:23:31,260
your generated object code with actual

443
00:23:31,260 --> 00:23:34,460
source code that you have and for it's

444
00:23:34,460 --> 00:23:36,510
definitely an improvement for the foot

445
00:23:36,510 --> 00:23:39,990
bagging there were four improvements

446
00:23:39,990 --> 00:23:43,679
that can recognize the better in the

447
00:23:43,679 --> 00:23:45,660
kernel so it accepts those programs as

448
00:23:45,660 --> 00:23:51,570
well and trace points have recently been

449
00:23:51,570 --> 00:23:53,660
merged and

450
00:23:53,660 --> 00:23:57,050
so on so that we have next steps so

451
00:23:57,050 --> 00:23:59,300
definitely they still have to be an

452
00:23:59,300 --> 00:24:01,280
improvement from the verification side

453
00:24:01,280 --> 00:24:06,520
in terms of logging or provide more

454
00:24:07,540 --> 00:24:10,580
helpful user messages for example then

455
00:24:10,580 --> 00:24:12,650
in terms of search pruning the little

456
00:24:12,650 --> 00:24:19,790
verifier can aggressively to verify

457
00:24:19,790 --> 00:24:21,470
doesn't have to do too much web to

458
00:24:21,470 --> 00:24:24,080
verify each possible path of the program

459
00:24:24,080 --> 00:24:26,570
and then there has to be better XTP

460
00:24:26,570 --> 00:24:29,210
driver support in future but that will

461
00:24:29,210 --> 00:24:33,500
come over time and yeah so those are

462
00:24:33,500 --> 00:24:35,660
some some examples of next steps through

463
00:24:35,660 --> 00:24:39,500
adding code if you want to look at some

464
00:24:39,500 --> 00:24:45,380
code and we can recommend you to go to

465
00:24:45,380 --> 00:24:48,440
github.com slash syrian which is a

466
00:24:48,440 --> 00:24:52,370
project which implements basically BP -

467
00:24:52,370 --> 00:24:54,920
XTP for containers there will be talk

468
00:24:54,920 --> 00:24:57,680
afterwards for that and everything else

469
00:24:57,680 --> 00:24:59,630
on the colonel and i period two ciders

470
00:24:59,630 --> 00:25:03,560
merged upstream and for further

471
00:25:03,560 --> 00:25:06,260
information you can also look at the net

472
00:25:06,260 --> 00:25:09,440
deaf conference papers that are there or

473
00:25:09,440 --> 00:25:12,710
the kernel documentation and so on are

474
00:25:12,710 --> 00:25:15,040
there any questions

475
00:25:15,040 --> 00:25:19,990
but there's a symmetry there between the

476
00:25:19,990 --> 00:25:24,240
features or fit between CSS

477
00:25:24,240 --> 00:25:36,750
I don't expect to convert all of that

478
00:25:36,750 --> 00:25:38,190
because I mean those are like two

479
00:25:38,190 --> 00:25:42,750
different layers of the stack and for

480
00:25:42,750 --> 00:25:45,030
some situations use cases one thing much

481
00:25:45,030 --> 00:25:47,100
better than then than the other so it's

482
00:25:47,100 --> 00:25:50,220
it's it's not like it exactly the same

483
00:25:50,220 --> 00:25:52,800
or something right so as I mentioned

484
00:25:52,800 --> 00:25:54,720
earlier they're complementary to each

485
00:25:54,720 --> 00:26:00,350
other so yeah all right

486
00:26:07,600 --> 00:26:10,820
so you definitely can okay I should

487
00:26:10,820 --> 00:26:12,500
repeat the question is it possible to

488
00:26:12,500 --> 00:26:14,630
modify packets based on state for

489
00:26:14,630 --> 00:26:17,659
example for nothing and yeah so it's

490
00:26:17,659 --> 00:26:19,280
definitely possible so state you can

491
00:26:19,280 --> 00:26:22,130
hold basically in vpf maps that's where

492
00:26:22,130 --> 00:26:25,190
they are therefore and you can modify so

493
00:26:25,190 --> 00:26:26,780
as I mentioned Esther agreed Eric right

494
00:26:26,780 --> 00:26:30,500
possibilities so yeah suing for example

495
00:26:30,500 --> 00:26:39,049
does that so I'm not quite well what

496
00:26:39,049 --> 00:26:41,510
features metronomes support but I think

497
00:26:41,510 --> 00:26:44,600
they should be able to write as well

498
00:26:44,600 --> 00:26:48,620
okay the limitation for the neutron is

499
00:26:48,620 --> 00:26:51,289
that they do not yet support EPF Maps

500
00:26:51,289 --> 00:26:53,809
well that will come in future so there's

501
00:26:53,809 --> 00:26:56,409
work in progress from that website I

502
00:26:56,409 --> 00:26:59,179
don't work for them but just to tell you

503
00:26:59,179 --> 00:27:11,090
what I know I think the most difficult

504
00:27:11,090 --> 00:27:18,650
task so one of the challenges an X

505
00:27:18,650 --> 00:27:20,210
appears that you follow this to a

506
00:27:20,210 --> 00:27:22,309
different part and what is the most

507
00:27:22,309 --> 00:27:25,039
difficult task there right is that you

508
00:27:25,039 --> 00:27:32,059
have that you need to have the so

509
00:27:32,059 --> 00:27:36,200
there's currently work regarding having

510
00:27:36,200 --> 00:27:41,240
a page a locator which means that if you

511
00:27:41,240 --> 00:27:44,299
want to format that to a different NIC

512
00:27:44,299 --> 00:27:46,130
even they have to have some common

513
00:27:46,130 --> 00:27:48,409
understanding on how to transfer the

514
00:27:48,409 --> 00:27:49,909
packet from the site to another right

515
00:27:49,909 --> 00:27:52,970
without copying for example so you need

516
00:27:52,970 --> 00:27:56,020
to have like a common shared page pool

517
00:27:56,020 --> 00:27:58,600
the Constructors you can trust transfer

518
00:27:58,600 --> 00:28:01,570
those Patriots to the other one so that

519
00:28:01,570 --> 00:28:07,600
they can try TX that yeah so just still

520
00:28:07,600 --> 00:28:12,010
I think quite some work there to get

521
00:28:12,010 --> 00:28:36,760
that supported from apps so selecting

522
00:28:36,760 --> 00:28:40,150
logic from maps and yeah so for example

523
00:28:40,150 --> 00:28:43,320
array maps on maps

524
00:28:43,320 --> 00:28:45,880
whether you have a perceive you or

525
00:28:45,880 --> 00:28:48,370
numbers not per CPU you're basically on

526
00:28:48,370 --> 00:28:53,560
your own which means that the program

527
00:28:53,560 --> 00:28:56,880
has to be written in a way that it

528
00:28:56,880 --> 00:28:59,650
doesn't have race conditions so it's so

529
00:28:59,650 --> 00:29:03,570
you have some instructions for example

530
00:29:03,570 --> 00:29:06,310
atomic add we can use to increment

531
00:29:06,310 --> 00:29:08,920
counters on that side for the hash

532
00:29:08,920 --> 00:29:13,750
tables you have basically the update

533
00:29:13,750 --> 00:29:16,960
helper car which atomically replaces one

534
00:29:16,960 --> 00:29:20,070
hash table map element with another and

535
00:29:20,070 --> 00:29:25,000
so yeah so there are various it is

536
00:29:25,000 --> 00:29:29,740
dependent on the map certainly and there

537
00:29:29,740 --> 00:29:31,150
is performance improvements to be done

538
00:29:31,150 --> 00:29:33,330
still

539
00:29:36,150 --> 00:29:39,930
all right if you can also grab them in

540
00:29:39,930 --> 00:29:41,070
the hallway if there are further

541
00:29:41,070 --> 00:29:43,160
questions so

542
00:29:43,160 --> 00:29:51,160
[Applause]

