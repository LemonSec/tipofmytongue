1
00:00:00,000 --> 00:00:02,450
okay

2
00:00:04,820 --> 00:00:08,010
okay hello everybody I would like to

3
00:00:08,010 --> 00:00:10,920
introduce you fiddling pokorny from

4
00:00:10,920 --> 00:00:13,290
America who will present about Linux

5
00:00:13,290 --> 00:00:24,060
kernel TLS module let's welcome so thank

6
00:00:24,060 --> 00:00:26,070
you hello everyone welcome to my

7
00:00:26,070 --> 00:00:28,440
presentation about afk TLS address

8
00:00:28,440 --> 00:00:29,730
familiar kernel transport layer security

9
00:00:29,730 --> 00:00:33,870
and I will introduce you a Linux kernel

10
00:00:33,870 --> 00:00:36,660
that does TLS and DTLS to be more

11
00:00:36,660 --> 00:00:39,690
precise parts of TLS and DTLS right

12
00:00:39,690 --> 00:00:42,270
inside the Linux kernel so before we

13
00:00:42,270 --> 00:00:45,360
start let's look at TLS and DTLS in a

14
00:00:45,360 --> 00:00:48,570
nutshell so TLS stands for transport

15
00:00:48,570 --> 00:00:51,480
layer security whereas DTLS stands for

16
00:00:51,480 --> 00:00:53,910
data gram transport layer security we

17
00:00:53,910 --> 00:00:55,770
are probably familiar with the

18
00:00:55,770 --> 00:00:58,710
abbreviation SSL that is some kind of

19
00:00:58,710 --> 00:01:00,870
historical I mean now the proper naming

20
00:01:00,870 --> 00:01:04,470
is TLS and the current version that is

21
00:01:04,470 --> 00:01:08,850
used is version 1.2 we have a draft that

22
00:01:08,850 --> 00:01:11,520
describes version 1.3 and introduces a

23
00:01:11,520 --> 00:01:12,990
lot of cool stuff such as zero

24
00:01:12,990 --> 00:01:16,770
round-trip times so you basically send

25
00:01:16,770 --> 00:01:21,330
your data within negotiation and it also

26
00:01:21,330 --> 00:01:24,090
restricts some ciphers and so on it's

27
00:01:24,090 --> 00:01:27,690
still a draft so it's not used you can

28
00:01:27,690 --> 00:01:30,390
find the new TLS and open SSL these are

29
00:01:30,390 --> 00:01:33,090
the most widely used implementations you

30
00:01:33,090 --> 00:01:36,300
can find for example libre SSL but or

31
00:01:36,300 --> 00:01:39,179
other other libraries as well but all of

32
00:01:39,179 --> 00:01:41,940
these are mostly forked from open SSL to

33
00:01:41,940 --> 00:01:45,569
have some vulnerabilities so if you look

34
00:01:45,569 --> 00:01:48,209
at the TL as an e TLS protocol we can

35
00:01:48,209 --> 00:01:50,610
distinguish two layers one is the

36
00:01:50,610 --> 00:01:53,550
control layer that basically does all

37
00:01:53,550 --> 00:01:56,759
the overhead that is needed for TLS and

38
00:01:56,759 --> 00:01:59,789
ETLs so you can find messages like I

39
00:01:59,789 --> 00:02:03,630
want to negotiate keys or I want to shut

40
00:02:03,630 --> 00:02:06,060
down the communication or I want to do

41
00:02:06,060 --> 00:02:09,229
rekeying because I think my my

42
00:02:09,229 --> 00:02:12,180
connection got compromised on the other

43
00:02:12,180 --> 00:02:14,280
hand the record layer is used for

44
00:02:14,280 --> 00:02:17,370
sending data encrypted data so if you

45
00:02:17,370 --> 00:02:18,480
are sending some day

46
00:02:18,480 --> 00:02:21,810
using TLS or DTLS they are sent in the

47
00:02:21,810 --> 00:02:24,000
record layer the main difference between

48
00:02:24,000 --> 00:02:28,019
TLS and the TLS is the TLS requires the

49
00:02:28,019 --> 00:02:31,250
underlying protocol to be secure or

50
00:02:31,250 --> 00:02:34,430
reliable so you have to use it with

51
00:02:34,430 --> 00:02:37,620
protocols such as TCP on the other hand

52
00:02:37,620 --> 00:02:40,050
the TLS does not have such requirements

53
00:02:40,050 --> 00:02:43,110
so you can use it with UDP but this also

54
00:02:43,110 --> 00:02:45,810
means that implementing the TLS is not

55
00:02:45,810 --> 00:02:48,660
that straightforward or it's harder in

56
00:02:48,660 --> 00:02:50,640
some way because you have to keep some

57
00:02:50,640 --> 00:02:52,590
additional information this information

58
00:02:52,590 --> 00:02:55,860
is basically sequence number and you

59
00:02:55,860 --> 00:02:58,489
construct some window in your in your

60
00:02:58,489 --> 00:03:02,280
implementation you can find many usages

61
00:03:02,280 --> 00:03:05,190
of TLS and DTLS for example HTTPS that

62
00:03:05,190 --> 00:03:09,750
is protocol HTTP secured so no one sees

63
00:03:09,750 --> 00:03:12,900
your communication it's also used in the

64
00:03:12,900 --> 00:03:16,860
email probably less known usages are for

65
00:03:16,860 --> 00:03:19,290
example H a proxy that is high

66
00:03:19,290 --> 00:03:21,599
availability proxy that is a load

67
00:03:21,599 --> 00:03:27,000
balancer for HTTP s communications you

68
00:03:27,000 --> 00:03:30,030
can also find usages in SSL based VPNs

69
00:03:30,030 --> 00:03:35,400
the term SSL based VPNs is quite used

70
00:03:35,400 --> 00:03:37,799
because of historical naming you can

71
00:03:37,799 --> 00:03:42,510
also say TLS based VPNs and such VPNs

72
00:03:42,510 --> 00:03:45,170
are open connect or cisco anyconnect

73
00:03:45,170 --> 00:03:47,700
cisco anyconnect it's a closed source

74
00:03:47,700 --> 00:03:51,750
implementation but you can use open

75
00:03:51,750 --> 00:03:54,930
connect that is that is compatible with

76
00:03:54,930 --> 00:03:58,109
cisco anyconnect and let's focus some on

77
00:03:58,109 --> 00:04:00,750
some scenarios with open connect so

78
00:04:00,750 --> 00:04:03,180
let's say we have a client that

79
00:04:03,180 --> 00:04:06,329
communicates with some device that is

80
00:04:06,329 --> 00:04:08,459
located on local mail or local area

81
00:04:08,459 --> 00:04:12,690
network and let's say that the

82
00:04:12,690 --> 00:04:15,169
communication is already established so

83
00:04:15,169 --> 00:04:18,389
there is no handshake we are just

84
00:04:18,389 --> 00:04:21,089
sending data what needs to be done on

85
00:04:21,089 --> 00:04:24,210
the client client site a client needs to

86
00:04:24,210 --> 00:04:27,330
first encrypt data that needs to resend

87
00:04:27,330 --> 00:04:31,080
it so it issues encrypt it also adds

88
00:04:31,080 --> 00:04:32,190
information that

89
00:04:32,190 --> 00:04:35,010
related to TLS protocol itself so

90
00:04:35,010 --> 00:04:38,610
there's edit header and tag for

91
00:04:38,610 --> 00:04:41,490
integrating and once we have the TLS

92
00:04:41,490 --> 00:04:45,510
record or the TLS record we write this

93
00:04:45,510 --> 00:04:47,250
steel as a recording to the colonel and

94
00:04:47,250 --> 00:04:51,410
colonel then transparently sends this

95
00:04:51,410 --> 00:04:57,260
record to a remote server and uses media

96
00:04:57,260 --> 00:05:00,480
media that that is used for every

97
00:05:00,480 --> 00:05:03,590
communication on the server-side server

98
00:05:03,590 --> 00:05:07,170
in the kernel kernel receives the record

99
00:05:07,170 --> 00:05:11,310
and once the record is ready there's an

100
00:05:11,310 --> 00:05:13,950
open connect server that listens on some

101
00:05:13,950 --> 00:05:18,120
particular port and has socket and once

102
00:05:18,120 --> 00:05:21,180
there's already the TLS or D TLS record

103
00:05:21,180 --> 00:05:24,450
it reads it from the kernel it decrypts

104
00:05:24,450 --> 00:05:26,430
it basically it does the reverse

105
00:05:26,430 --> 00:05:31,250
operation of them the client once the

106
00:05:31,250 --> 00:05:35,660
record is decrypted it removes removes

107
00:05:35,660 --> 00:05:39,300
TLS or Vic TLS specific information from

108
00:05:39,300 --> 00:05:42,419
the record so it removes header and tag

109
00:05:42,419 --> 00:05:45,320
it also checks the integrity so no one

110
00:05:45,320 --> 00:05:48,300
changed something on the wire when we

111
00:05:48,300 --> 00:05:52,260
was when we were sending TLS record one

112
00:05:52,260 --> 00:05:56,070
this once this is done then we the open

113
00:05:56,070 --> 00:05:59,370
connect server writes raw data into the

114
00:05:59,370 --> 00:06:02,970
kernel and route it to desired device if

115
00:06:02,970 --> 00:06:04,890
you see if you if we look at this

116
00:06:04,890 --> 00:06:07,440
particular silla scenario we can see

117
00:06:07,440 --> 00:06:09,360
that the decryption is done in user

118
00:06:09,360 --> 00:06:12,300
space if we move decryption to the

119
00:06:12,300 --> 00:06:15,510
kernel we could optimize its some way

120
00:06:15,510 --> 00:06:18,480
what is the optimization basically we

121
00:06:18,480 --> 00:06:21,180
saved to context which is because we are

122
00:06:21,180 --> 00:06:23,330
no longer required to do write and read

123
00:06:23,330 --> 00:06:26,640
operation sis calls just to read data

124
00:06:26,640 --> 00:06:30,270
from the kernel and write just to send

125
00:06:30,270 --> 00:06:34,500
data and we also saved two copies we are

126
00:06:34,500 --> 00:06:36,870
no longer required to copy data from the

127
00:06:36,870 --> 00:06:40,320
kernel to user space and from user space

128
00:06:40,320 --> 00:06:42,150
to memory that is allocated in the

129
00:06:42,150 --> 00:06:45,750
kernel for the socket so this was how

130
00:06:45,750 --> 00:06:49,380
FK TLS was born afk TLS is a kernel

131
00:06:49,380 --> 00:06:52,320
module so it sits in the kernel and it

132
00:06:52,320 --> 00:06:56,340
does TLS and ETLs communication for you

133
00:06:56,340 --> 00:06:59,220
it introduces new socket type it's

134
00:06:59,220 --> 00:07:01,920
called afk TLS address familiy kernel

135
00:07:01,920 --> 00:07:04,140
transport layer security and in it

136
00:07:04,140 --> 00:07:07,920
implements the record ray layer of TLS

137
00:07:07,920 --> 00:07:10,950
and v TLS protocols that means when you

138
00:07:10,950 --> 00:07:15,030
want to use afk TLS you use your open

139
00:07:15,030 --> 00:07:18,330
SSL or new TLS library for for instance

140
00:07:18,330 --> 00:07:20,610
changing the connection so you do a

141
00:07:20,610 --> 00:07:23,220
handshake with the remote and once you

142
00:07:23,220 --> 00:07:26,310
have proper session you pass all the key

143
00:07:26,310 --> 00:07:29,250
material into the kernel and afk TLS

144
00:07:29,250 --> 00:07:32,370
does everything for you so you use FK

145
00:07:32,370 --> 00:07:35,700
TLS socket to write raw data and read

146
00:07:35,700 --> 00:07:39,480
from a rod raw data it currently

147
00:07:39,480 --> 00:07:42,030
supports only s JCM but it could be

148
00:07:42,030 --> 00:07:44,850
extended using for example cha-cha poly

149
00:07:44,850 --> 00:07:49,020
and it implements most of the socket

150
00:07:49,020 --> 00:07:51,479
operations such as socket for instant

151
00:07:51,479 --> 00:07:54,450
ending the socket binds and receive

152
00:07:54,450 --> 00:07:59,000
right and such you can also do advanced

153
00:07:59,000 --> 00:08:03,120
Cisco's like send file or splice the

154
00:08:03,120 --> 00:08:05,700
only cisco that is not implemented is

155
00:08:05,700 --> 00:08:08,700
connect when I was designing API it

156
00:08:08,700 --> 00:08:10,740
didn't make much sense to implement such

157
00:08:10,740 --> 00:08:13,740
such cisco if we look at the

158
00:08:13,740 --> 00:08:16,110
optimization we want it to save to

159
00:08:16,110 --> 00:08:17,700
context which is but this is not

160
00:08:17,700 --> 00:08:20,430
possible because there is no there is no

161
00:08:20,430 --> 00:08:22,890
cisco in a linux kernel that would say

162
00:08:22,890 --> 00:08:25,020
hey everything that is received from

163
00:08:25,020 --> 00:08:28,860
this socket source socket send to add

164
00:08:28,860 --> 00:08:32,190
destination socket we can simulate

165
00:08:32,190 --> 00:08:34,200
something like this using send file

166
00:08:34,200 --> 00:08:36,120
which basically operates on two file

167
00:08:36,120 --> 00:08:38,700
descriptors so if you want to save send

168
00:08:38,700 --> 00:08:43,260
file using FK TLS you can do it or any

169
00:08:43,260 --> 00:08:45,300
static content that sits on your on your

170
00:08:45,300 --> 00:08:47,820
disk if we look at the implementation of

171
00:08:47,820 --> 00:08:50,760
send file it is implemented on top of

172
00:08:50,760 --> 00:08:52,740
splice that is another cisco that

173
00:08:52,740 --> 00:08:55,830
operates on a file descriptor or socket

174
00:08:55,830 --> 00:08:58,870
and uses some intermediate structure

175
00:08:58,870 --> 00:09:02,200
that carries basically information about

176
00:09:02,200 --> 00:09:04,720
memory that is allocated inside the

177
00:09:04,720 --> 00:09:07,300
kernel so in the kernel space by the

178
00:09:07,300 --> 00:09:09,790
point to this memory from user space

179
00:09:09,790 --> 00:09:14,080
such structure is called pipe on the

180
00:09:14,080 --> 00:09:17,050
other hand we we didn't save to context

181
00:09:17,050 --> 00:09:18,700
which is but on the other hand we saved

182
00:09:18,700 --> 00:09:20,980
two copies so we are no longer required

183
00:09:20,980 --> 00:09:24,010
to copy data from user space to kernel

184
00:09:24,010 --> 00:09:26,170
space and with a versa

185
00:09:26,170 --> 00:09:29,950
just to do decryption when I was

186
00:09:29,950 --> 00:09:32,440
implementing afk TLS there were issues

187
00:09:32,440 --> 00:09:35,680
with padding for example that also

188
00:09:35,680 --> 00:09:38,140
effects the optimization if we look at

189
00:09:38,140 --> 00:09:40,450
the TLS record you can see that there

190
00:09:40,450 --> 00:09:42,280
are some header and then there are three

191
00:09:42,280 --> 00:09:44,620
bytes that are not used so everything

192
00:09:44,620 --> 00:09:47,710
that follows is is basically shifted by

193
00:09:47,710 --> 00:09:52,030
three bytes this has negative impact

194
00:09:52,030 --> 00:09:55,420
because you don't you cannot access to

195
00:09:55,420 --> 00:09:59,590
two aligned memory in the kernel if we

196
00:09:59,590 --> 00:10:02,820
compare it to for example IPSec IP 6 has

197
00:10:02,820 --> 00:10:06,730
8 bytes and then there follow 8 bytes

198
00:10:06,730 --> 00:10:10,450
just for reserved they are just reserved

199
00:10:10,450 --> 00:10:13,300
if we look at the DTLS record you can

200
00:10:13,300 --> 00:10:15,820
see that the sequence number is carried

201
00:10:15,820 --> 00:10:18,760
within the DTLS record but we still have

202
00:10:18,760 --> 00:10:22,030
3 bytes if we look at the optimization

203
00:10:22,030 --> 00:10:26,380
results we have benchmarks of user sign

204
00:10:26,380 --> 00:10:28,840
that means you use the new TLS send or

205
00:10:28,840 --> 00:10:31,510
open SSL send so you do encryption in

206
00:10:31,510 --> 00:10:33,310
the user space and you pass the

207
00:10:33,310 --> 00:10:37,090
encrypted records to the kernel in this

208
00:10:37,090 --> 00:10:39,490
particular scenario the send file

209
00:10:39,490 --> 00:10:43,290
operation was faster by 10% in average

210
00:10:43,290 --> 00:10:46,930
we also benchmark it using M map so we

211
00:10:46,930 --> 00:10:50,530
mapped wall file into the memory in user

212
00:10:50,530 --> 00:10:53,620
space we encrypted it and send it using

213
00:10:53,620 --> 00:10:58,960
using user sent if we look at the the

214
00:10:58,960 --> 00:11:02,110
afk TLS usages there are various one is

215
00:11:02,110 --> 00:11:04,750
open Connect as discussed in this

216
00:11:04,750 --> 00:11:07,840
presentation the main disadvantage why

217
00:11:07,840 --> 00:11:10,000
this implementation was not used is

218
00:11:10,000 --> 00:11:11,329
because the tool tab

219
00:11:11,329 --> 00:11:14,449
you guys is that is used by open connect

220
00:11:14,449 --> 00:11:17,360
does not support splice operation you

221
00:11:17,360 --> 00:11:20,149
can use afk TLS with case KCM that is

222
00:11:20,149 --> 00:11:24,529
the kernel multiplexer FK TLS has also

223
00:11:24,529 --> 00:11:26,899
advantages because you can access raw

224
00:11:26,899 --> 00:11:30,709
data right inside your kernel you can do

225
00:11:30,709 --> 00:11:32,959
for example in Linux socket filtering or

226
00:11:32,959 --> 00:11:34,910
Berkeley socket filtering if you want

227
00:11:34,910 --> 00:11:38,949
you can also use for example eb PF and

228
00:11:38,949 --> 00:11:41,899
another cool feature is for example BCC

229
00:11:41,899 --> 00:11:44,110
implementation where you can plug your

230
00:11:44,110 --> 00:11:47,509
function right behind some function that

231
00:11:47,509 --> 00:11:50,660
is called in the kernel or after it and

232
00:11:50,660 --> 00:11:53,600
you write basically Python code then the

233
00:11:53,600 --> 00:11:57,379
e BPF checker checks your code and the

234
00:11:57,379 --> 00:12:02,179
code is then the code is is executed in

235
00:12:02,179 --> 00:12:07,100
the kernel another very nice usage is

236
00:12:07,100 --> 00:12:09,980
basically CPU offloading where you don't

237
00:12:09,980 --> 00:12:12,980
do the encryption and decryption in on

238
00:12:12,980 --> 00:12:15,290
your CPU but you have specialized

239
00:12:15,290 --> 00:12:18,439
hardware that deals with this and there

240
00:12:18,439 --> 00:12:21,019
are possible improvements in this area

241
00:12:21,019 --> 00:12:24,079
so you for example pass multiple dealers

242
00:12:24,079 --> 00:12:27,589
records and multiple IV vectors and you

243
00:12:27,589 --> 00:12:30,999
do do the decryption like in burst mode

244
00:12:30,999 --> 00:12:34,639
currently the crypto is not does not

245
00:12:34,639 --> 00:12:37,220
support such but there's an opportunity

246
00:12:37,220 --> 00:12:41,499
to do that and to use afk TLS with such

247
00:12:41,499 --> 00:12:45,290
news cases TLS in the kernel is not

248
00:12:45,290 --> 00:12:47,839
novel there are implementations for

249
00:12:47,839 --> 00:12:51,439
example Solaris has its key K TLS it's

250
00:12:51,439 --> 00:12:54,499
not only the record layer but it also

251
00:12:54,499 --> 00:12:57,980
carries the implementation of the

252
00:12:57,980 --> 00:13:01,939
control layer so it implements wall TLS

253
00:13:01,939 --> 00:13:05,059
and DTLS right inside the kernel this

254
00:13:05,059 --> 00:13:07,689
implementation was not successful

255
00:13:07,689 --> 00:13:10,480
because you have to maintain more than

256
00:13:10,480 --> 00:13:14,480
just IP IP address and port you have to

257
00:13:14,480 --> 00:13:19,399
deal with certificates and such and it

258
00:13:19,399 --> 00:13:21,889
works like a proxy between two ports so

259
00:13:21,889 --> 00:13:24,610
for example you can send

260
00:13:24,610 --> 00:13:26,500
encrypted communication tool for for

261
00:13:26,500 --> 00:13:29,079
three ports and read it from eighty port

262
00:13:29,079 --> 00:13:33,339
in raw for example Netflix experimented

263
00:13:33,339 --> 00:13:36,730
with something similar as afk TLS the

264
00:13:36,730 --> 00:13:39,100
implementation is not publicly available

265
00:13:39,100 --> 00:13:43,180
they modified be a bsd kernel and they

266
00:13:43,180 --> 00:13:47,019
adopted ssl to use the server file

267
00:13:47,019 --> 00:13:49,690
operation and they use it according to

268
00:13:49,690 --> 00:13:52,269
articles that they published they use it

269
00:13:52,269 --> 00:13:55,720
for serving static content we at the Red

270
00:13:55,720 --> 00:13:58,380
Hat we experimented with afk TLS

271
00:13:58,380 --> 00:14:01,510
Facebook join us they they send us cool

272
00:14:01,510 --> 00:14:04,990
patches and they are experimenting with

273
00:14:04,990 --> 00:14:08,500
it as well you can find afk TLS on

274
00:14:08,500 --> 00:14:12,220
github and feel free to use it it's open

275
00:14:12,220 --> 00:14:15,940
you can plug it to your kernel you have

276
00:14:15,940 --> 00:14:18,730
to you have to recompile your criminal

277
00:14:18,730 --> 00:14:23,500
and patch the s JCM implementation to to

278
00:14:23,500 --> 00:14:26,620
be used with afk TLS and you have to

279
00:14:26,620 --> 00:14:30,010
also add the socket type because you

280
00:14:30,010 --> 00:14:35,949
cannot just plug a plug a new socket or

281
00:14:35,949 --> 00:14:37,720
module that implements new socket type

282
00:14:37,720 --> 00:14:39,279
into the kernel so you have to manually

283
00:14:39,279 --> 00:14:42,339
add to the list of supported supported

284
00:14:42,339 --> 00:14:45,430
sockets to your kernel module so thank

285
00:14:45,430 --> 00:14:47,769
you and if you have any questions feel

286
00:14:47,769 --> 00:14:50,310
free to ask

287
00:14:55,610 --> 00:14:59,870
any questions we have plenty of time

288
00:15:01,610 --> 00:15:05,640
thank you for the presentation do you

289
00:15:05,640 --> 00:15:08,370
have any idea of when this will be

290
00:15:08,370 --> 00:15:11,250
included in normal Linux kernel obvious

291
00:15:11,250 --> 00:15:14,460
question maybe we have still open issues

292
00:15:14,460 --> 00:15:17,730
like for example DTLS window has some

293
00:15:17,730 --> 00:15:21,480
box right now and we haven't proposed

294
00:15:21,480 --> 00:15:25,500
the merger request yet but hopefully we

295
00:15:25,500 --> 00:15:27,990
get it someday

296
00:15:27,990 --> 00:15:31,290
there are also Facebook is experimenting

297
00:15:31,290 --> 00:15:34,170
with having only one socket so you don't

298
00:15:34,170 --> 00:15:37,740
need to have the socket for TCP and afk

299
00:15:37,740 --> 00:15:40,320
TLS but they want to merge it in some

300
00:15:40,320 --> 00:15:47,310
way and hopefully one day um I guess

301
00:15:47,310 --> 00:15:49,260
your client software which does the

302
00:15:49,260 --> 00:15:52,100
handshake also has to be patched right

303
00:15:52,100 --> 00:15:56,460
no there's there's available API so if

304
00:15:56,460 --> 00:15:58,680
you are using for example new TLS you

305
00:15:58,680 --> 00:16:01,770
just ask after the handshake for all the

306
00:16:01,770 --> 00:16:06,390
key material so you pass basically keys

307
00:16:06,390 --> 00:16:10,260
and IV vector to the kernel for sending

308
00:16:10,260 --> 00:16:12,420
and receiving and that's it and how does

309
00:16:12,420 --> 00:16:15,060
this communication work between user

310
00:16:15,060 --> 00:16:17,160
space and kernel you have to maintain

311
00:16:17,160 --> 00:16:20,250
these in your in your code by your own

312
00:16:20,250 --> 00:16:22,920
there's no support of afk TLS in the new

313
00:16:22,920 --> 00:16:25,080
TLS so you when you are using for

314
00:16:25,080 --> 00:16:27,660
example new TLS you do the negotiation

315
00:16:27,660 --> 00:16:29,430
and then you ask for for the key

316
00:16:29,430 --> 00:16:32,370
material you instant e8 afk TLS and you

317
00:16:32,370 --> 00:16:35,730
pass all the key material to to afk TLS

318
00:16:35,730 --> 00:16:37,920
and it transparently does everything for

319
00:16:37,920 --> 00:16:40,910
you text

320
00:16:42,340 --> 00:16:45,340
but there's a lot of hard questions that

321
00:16:45,340 --> 00:16:48,430
TLS clients have to sort of answer when

322
00:16:48,430 --> 00:16:51,190
they want to establish a connection so I

323
00:16:51,190 --> 00:16:53,320
suppose there needs to be some way of

324
00:16:53,320 --> 00:16:56,110
communicating with the the colonel's TLS

325
00:16:56,110 --> 00:16:58,120
implementation so what's the sort of

326
00:16:58,120 --> 00:17:01,360
strategy there do use yakult's to accept

327
00:17:01,360 --> 00:17:04,959
sort of requests or to to sort of leak

328
00:17:04,959 --> 00:17:06,640
information to the user space back so

329
00:17:06,640 --> 00:17:09,689
that the user space can make decisions

330
00:17:09,689 --> 00:17:12,490
I'm not sure if I follow the question

331
00:17:12,490 --> 00:17:15,069
like can you can you rephrase it so when

332
00:17:15,069 --> 00:17:17,530
you establish a TLS connections you may

333
00:17:17,530 --> 00:17:22,859
want as a client you may want to react

334
00:17:22,859 --> 00:17:26,230
upon the behavior of the server right

335
00:17:26,230 --> 00:17:28,480
you you may want to be informed of

336
00:17:28,480 --> 00:17:31,090
certain sort of there's certain things

337
00:17:31,090 --> 00:17:35,170
that they serve it does and you in that

338
00:17:35,170 --> 00:17:37,690
case you need to well pass some

339
00:17:37,690 --> 00:17:39,880
information to the TLS library which in

340
00:17:39,880 --> 00:17:41,740
this case seems to be the in the kernel

341
00:17:41,740 --> 00:17:43,630
so you need to have some some way to

342
00:17:43,630 --> 00:17:45,910
communicate about the company about the

343
00:17:45,910 --> 00:17:49,360
channel with the connection establishing

344
00:17:49,360 --> 00:17:52,320
user space so what's the strategy there

345
00:17:52,320 --> 00:17:55,420
once you instant it properly the session

346
00:17:55,420 --> 00:17:57,429
you have all the key and you pass the

347
00:17:57,429 --> 00:18:00,670
key material to FK TLS you can use the

348
00:18:00,670 --> 00:18:04,060
record layer just to send and receive

349
00:18:04,060 --> 00:18:08,679
road to send and receive data and you

350
00:18:08,679 --> 00:18:12,520
get unencrypted data in user space the

351
00:18:12,520 --> 00:18:16,000
only issue here is when you want to for

352
00:18:16,000 --> 00:18:18,310
example when your opponent wants to

353
00:18:18,310 --> 00:18:21,280
negotiate new keys then the kernel has

354
00:18:21,280 --> 00:18:24,640
to has to know some some way how to tell

355
00:18:24,640 --> 00:18:27,730
hey user space I have to I have to

356
00:18:27,730 --> 00:18:30,730
negotiate new keys so we return some

357
00:18:30,730 --> 00:18:33,940
kind of value that is the error state

358
00:18:33,940 --> 00:18:37,300
and then you have to ask kernel for for

359
00:18:37,300 --> 00:18:39,940
the key material in order to to proceed

360
00:18:39,940 --> 00:18:42,280
with for example negotiation of new keys

361
00:18:42,280 --> 00:18:45,610
and then again you have to use open SSL

362
00:18:45,610 --> 00:18:48,940
or TLS for that and if you want to use

363
00:18:48,940 --> 00:18:52,600
FK TLS again then you have to ask ask

364
00:18:52,600 --> 00:18:55,830
the information from FK t from Guk

365
00:18:55,830 --> 00:19:00,200
OpenSSL okay how would I for example

366
00:19:00,200 --> 00:19:03,659
validate the x.509 certificate of any

367
00:19:03,659 --> 00:19:06,510
was set I mean because that is probably

368
00:19:06,510 --> 00:19:08,039
I want to do that user space nonetheless

369
00:19:08,039 --> 00:19:10,049
right because the application once have

370
00:19:10,049 --> 00:19:11,909
tight control over where it's connecting

371
00:19:11,909 --> 00:19:14,240
to so in that case you probably need to

372
00:19:14,240 --> 00:19:17,340
switch back you need to inform me as the

373
00:19:17,340 --> 00:19:20,480
client sort of as the user space about

374
00:19:20,480 --> 00:19:22,950
in in this case the extra five or nine

375
00:19:22,950 --> 00:19:25,440
identity and then I need to tell the

376
00:19:25,440 --> 00:19:27,870
colonel back whether I want to continue

377
00:19:27,870 --> 00:19:28,980
with the with the connection or not

378
00:19:28,980 --> 00:19:29,429
uh-huh

379
00:19:29,429 --> 00:19:33,929
so x.509 is done in user space so

380
00:19:33,929 --> 00:19:36,929
writing space handles this and once you

381
00:19:36,929 --> 00:19:39,480
you you instantiate the connection

382
00:19:39,480 --> 00:19:42,000
everything you already know that the

383
00:19:42,000 --> 00:19:45,179
opener is is correct in this way so we

384
00:19:45,179 --> 00:19:47,279
do only symmetric encryption in the

385
00:19:47,279 --> 00:19:53,429
kernel afk tillis okay right so so the

386
00:19:53,429 --> 00:19:56,039
handshaking is not done by sorry I'm

387
00:19:56,039 --> 00:20:01,730
good any other questions

388
00:20:08,660 --> 00:20:12,000
okay so my question is you said you have

389
00:20:12,000 --> 00:20:15,870
roughly 10% performance benefit right

390
00:20:15,870 --> 00:20:17,670
did you look into what is the major

391
00:20:17,670 --> 00:20:20,250
issue why it's not more than that

392
00:20:20,250 --> 00:20:21,900
because the encryption itself takes so

393
00:20:21,900 --> 00:20:25,230
much resources already I mean it's like

394
00:20:25,230 --> 00:20:27,900
a trade-off regarding income complexity

395
00:20:27,900 --> 00:20:34,470
right basically FK Tillis was my master

396
00:20:34,470 --> 00:20:37,320
thesis you can find some benchmarks here

397
00:20:37,320 --> 00:20:42,120
and we we benchmark it on on Intel

398
00:20:42,120 --> 00:20:45,660
Architecture and we the first idea was

399
00:20:45,660 --> 00:20:48,480
okay maybe the context which is is quite

400
00:20:48,480 --> 00:20:50,580
expensive but we found out that the

401
00:20:50,580 --> 00:20:52,140
context each switch is not that

402
00:20:52,140 --> 00:20:56,400
expensive and the most time is spent on

403
00:20:56,400 --> 00:21:00,150
encryption and decryption itself so you

404
00:21:00,150 --> 00:21:02,220
would probably want to use for example

405
00:21:02,220 --> 00:21:04,140
CPU offloading so you have dedicated

406
00:21:04,140 --> 00:21:06,450
device just for encryption and

407
00:21:06,450 --> 00:21:11,250
decryption and you have free CPU okay I

408
00:21:11,250 --> 00:21:14,010
had a question or just curious when you

409
00:21:14,010 --> 00:21:16,680
use memory mapped I mean don't you still

410
00:21:16,680 --> 00:21:18,600
have to copy inside the kind of the data

411
00:21:18,600 --> 00:21:20,910
to some other buffer because otherwise

412
00:21:20,910 --> 00:21:22,500
you can still all right into it from

413
00:21:22,500 --> 00:21:26,190
user space wild kind of works on it with

414
00:21:26,190 --> 00:21:29,580
a map you do you do copying so that was

415
00:21:29,580 --> 00:21:32,760
basically some kind of way how we could

416
00:21:32,760 --> 00:21:36,810
optimize or compare it with with send

417
00:21:36,810 --> 00:21:41,580
file it seems that the objective is to

418
00:21:41,580 --> 00:21:44,730
reduce the kind of context switch and

419
00:21:44,730 --> 00:21:48,270
copy it it seems to be variable only in

420
00:21:48,270 --> 00:21:53,270
certain use case like front end that is

421
00:21:53,270 --> 00:21:58,800
forwarding it's it's packets to other

422
00:21:58,800 --> 00:22:05,160
servers and in this case how is managing

423
00:22:05,160 --> 00:22:09,650
the forwarding to be included and

424
00:22:09,650 --> 00:22:13,320
staying into the camera without copy it

425
00:22:13,320 --> 00:22:16,570
is it part of

426
00:22:16,570 --> 00:22:21,399
this module or is it some other mechanic

427
00:22:21,399 --> 00:22:25,450
that I don't know if you do if you do

428
00:22:25,450 --> 00:22:27,159
something like forwarding between

429
00:22:27,159 --> 00:22:30,220
between two sockets you can do this

430
00:22:30,220 --> 00:22:33,759
splice splice optimization when you for

431
00:22:33,759 --> 00:22:35,590
example receive encrypted communication

432
00:22:35,590 --> 00:22:38,139
on once ok and you don't copy the

433
00:22:38,139 --> 00:22:41,620
content to user space but you issue to

434
00:22:41,620 --> 00:22:45,610
splice calls and you don't have raw data

435
00:22:45,610 --> 00:22:49,629
in user space so that that was the main

436
00:22:49,629 --> 00:22:52,240
optimization over for for open connect

437
00:22:52,240 --> 00:22:55,919
and it's also applicable for 4h a proxy

438
00:22:55,919 --> 00:23:00,659
so you have to the logic of basically

439
00:23:00,659 --> 00:23:03,220
forwarding you have to keep it in your

440
00:23:03,220 --> 00:23:05,850
application

441
00:23:05,850 --> 00:23:09,270
ok let's thank three Deline again

442
00:23:09,270 --> 00:23:15,730
[Applause]

