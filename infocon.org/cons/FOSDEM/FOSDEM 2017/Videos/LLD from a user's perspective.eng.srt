1
00:00:00,030 --> 00:00:02,840
so after all of that

2
00:00:04,590 --> 00:00:07,410
- nervous fiddling I'll be right to the

3
00:00:07,410 --> 00:00:08,850
place to present her present you all

4
00:00:08,850 --> 00:00:11,760
about an L LD from a user perspective so

5
00:00:11,760 --> 00:00:14,039
this is a sort of high-level description

6
00:00:14,039 --> 00:00:17,340
of what you would do to use L LD and

7
00:00:17,340 --> 00:00:18,869
I'll explain what it isn't a few minutes

8
00:00:18,869 --> 00:00:20,609
for those who are unfamiliar so this

9
00:00:20,609 --> 00:00:23,429
isn't a deep dive into what L LD is and

10
00:00:23,429 --> 00:00:25,439
what it does this is more like how would

11
00:00:25,439 --> 00:00:27,480
I actually go about using it on the

12
00:00:27,480 --> 00:00:29,039
assumption that most of you may have

13
00:00:29,039 --> 00:00:31,380
heard of L LD but probably haven't tried

14
00:00:31,380 --> 00:00:34,110
it out or know what it statuses that

15
00:00:34,110 --> 00:00:38,340
sort of thing okay so what we're going

16
00:00:38,340 --> 00:00:41,190
to cover today and basically what is L

17
00:00:41,190 --> 00:00:44,730
LD how might I use it how do I actually

18
00:00:44,730 --> 00:00:47,790
build it because as of today there isn't

19
00:00:47,790 --> 00:00:49,950
a package that you can download with L

20
00:00:49,950 --> 00:00:53,400
LD in it then maybe on BSD systems I

21
00:00:53,400 --> 00:00:56,430
think but certainly not on and not on it

22
00:00:56,430 --> 00:00:58,050
I think I need standard Linux

23
00:00:58,050 --> 00:01:03,090
distribution has has taken it three

24
00:01:03,090 --> 00:01:04,619
weeks okay yeah and I just noticed

25
00:01:04,619 --> 00:01:07,530
something I think almost a it might even

26
00:01:07,530 --> 00:01:08,999
been this morning that it might actually

27
00:01:08,999 --> 00:01:13,200
get into the LLVM 4.0 release so so it's

28
00:01:13,200 --> 00:01:13,950
looking like it's going to become

29
00:01:13,950 --> 00:01:16,469
slightly more easy to get holed up in

30
00:01:16,469 --> 00:01:17,460
there but it's actually not too

31
00:01:17,460 --> 00:01:18,719
difficult to build from source if you

32
00:01:18,719 --> 00:01:21,359
wants to fiddle around with it next bit

33
00:01:21,359 --> 00:01:23,130
is what can I expect if I actually try

34
00:01:23,130 --> 00:01:26,429
and use this thing and and then just a

35
00:01:26,429 --> 00:01:28,170
little bit at the end of you know if

36
00:01:28,170 --> 00:01:30,090
you're interested and want to give it a

37
00:01:30,090 --> 00:01:32,520
go how can I contribute to an L LD and

38
00:01:32,520 --> 00:01:34,649
so what I'm going to be covering is the

39
00:01:34,649 --> 00:01:36,569
cough for the Mac o versions as I'll

40
00:01:36,569 --> 00:01:39,270
come to in a couple of slides time L LD

41
00:01:39,270 --> 00:01:41,130
is kind of like three linkers in one

42
00:01:41,130 --> 00:01:43,619
from the same set of code bases I'm only

43
00:01:43,619 --> 00:01:45,659
really familiar with the elf version and

44
00:01:45,659 --> 00:01:47,850
I'm assuming that for stem most of you

45
00:01:47,850 --> 00:01:49,619
are going to be using the elf version

46
00:01:49,619 --> 00:01:51,600
rather than the Microsoft version or the

47
00:01:51,600 --> 00:01:55,799
Apple version I'm basically working on

48
00:01:55,799 --> 00:02:00,630
the arm port for L LD so unless the

49
00:02:00,630 --> 00:02:02,939
background is in sort of ARM based tool

50
00:02:02,939 --> 00:02:08,038
chains okay so this is a very very basic

51
00:02:08,038 --> 00:02:09,840
slide for people who may not be familiar

52
00:02:09,840 --> 00:02:12,480
with what linkers do they're usually the

53
00:02:12,480 --> 00:02:14,099
sort of program that solve hides behind

54
00:02:14,099 --> 00:02:15,900
the compiler and used to call your

55
00:02:15,900 --> 00:02:17,370
objects and libraries and it does its

56
00:02:17,370 --> 00:02:18,330
job

57
00:02:18,330 --> 00:02:21,150
so apologies if you're already well

58
00:02:21,150 --> 00:02:22,950
familiar with the sort of linkers job is

59
00:02:22,950 --> 00:02:24,960
I won't spend too much on this slide

60
00:02:24,960 --> 00:02:29,130
that in effect lld takes the place over

61
00:02:29,130 --> 00:02:32,010
here so compiler compiles source codes

62
00:02:32,010 --> 00:02:34,710
to objects those objects have basically

63
00:02:34,710 --> 00:02:36,960
got symbolic references between each

64
00:02:36,960 --> 00:02:39,480
other so they'll say like I reference

65
00:02:39,480 --> 00:02:42,300
some symbol called printf or you know

66
00:02:42,300 --> 00:02:44,670
underscore start or something like that

67
00:02:44,670 --> 00:02:47,550
and quite often the lick what the link

68
00:02:47,550 --> 00:02:49,170
has been linked as first task is is to

69
00:02:49,170 --> 00:02:51,060
say taking all of these references

70
00:02:51,060 --> 00:02:53,910
saying that the objects say I need X I

71
00:02:53,910 --> 00:02:56,040
need Y and then it's got to go search to

72
00:02:56,040 --> 00:02:57,450
all the libraries that you've put on the

73
00:02:57,450 --> 00:03:00,959
command line and then basically say okay

74
00:03:00,959 --> 00:03:04,170
I see definitions of function X function

75
00:03:04,170 --> 00:03:06,150
Y and these functions need zared and

76
00:03:06,150 --> 00:03:08,190
whatever and then basically just load

77
00:03:08,190 --> 00:03:10,530
everything all into one bit and then

78
00:03:10,530 --> 00:03:12,240
once you've got everything all loaded

79
00:03:12,240 --> 00:03:13,920
you've then got to resolve all those

80
00:03:13,920 --> 00:03:16,530
symbolic references so that the

81
00:03:16,530 --> 00:03:18,780
reference to printf gets connected with

82
00:03:18,780 --> 00:03:21,240
the definition of printf so that in a

83
00:03:21,240 --> 00:03:23,790
nutshell is what a linker does it scoped

84
00:03:23,790 --> 00:03:25,350
there's various other bits that you can

85
00:03:25,350 --> 00:03:27,180
do to sort of control where bits go so

86
00:03:27,180 --> 00:03:29,280
people doing embedded development will

87
00:03:29,280 --> 00:03:31,170
often use a linker control special

88
00:03:31,170 --> 00:03:33,030
linker control script they'll say hey I

89
00:03:33,030 --> 00:03:36,180
want all of my vectors to go address 0

90
00:03:36,180 --> 00:03:38,010
where you know on certain embedded

91
00:03:38,010 --> 00:03:40,410
systems and the like at the end of it

92
00:03:40,410 --> 00:03:41,940
you're left with a single file that you

93
00:03:41,940 --> 00:03:44,370
can then and use the shared library and

94
00:03:44,370 --> 00:03:46,820
executive all of you know some sort of

95
00:03:46,820 --> 00:03:50,280
slightly more concrete form than what

96
00:03:50,280 --> 00:03:52,320
came in it came in at the front so

97
00:03:52,320 --> 00:03:54,480
that's what lld is trying to be it's

98
00:03:54,480 --> 00:03:56,700
trying to be a sort of system linker

99
00:03:56,700 --> 00:03:58,890
it's not really in the state to be a

100
00:03:58,890 --> 00:04:02,010
library at the moment and I think there

101
00:04:02,010 --> 00:04:03,420
has been some arguments on the list

102
00:04:03,420 --> 00:04:05,730
about you know is that the right design

103
00:04:05,730 --> 00:04:08,570
for lld to be a program or a library

104
00:04:08,570 --> 00:04:12,150
there are arguments both ways typically

105
00:04:12,150 --> 00:04:14,310
as a sort of a person who's developed

106
00:04:14,310 --> 00:04:16,769
linkers over the years typically linking

107
00:04:16,769 --> 00:04:18,750
is an all-or-nothing job you tend not to

108
00:04:18,750 --> 00:04:20,850
want a bit of a linker you tend to want

109
00:04:20,850 --> 00:04:24,360
all of it or none of it so I think using

110
00:04:24,360 --> 00:04:26,010
as a library I don't know whether

111
00:04:26,010 --> 00:04:27,150
anyone's come up with a really

112
00:04:27,150 --> 00:04:29,130
compelling use case to do it yet it

113
00:04:29,130 --> 00:04:31,290
sounds nice in theory but I

114
00:04:31,290 --> 00:04:34,440
I don't know yet whether anyone's worked

115
00:04:34,440 --> 00:04:36,360
out well well actually come up with a

116
00:04:36,360 --> 00:04:41,340
compelling enough reason to do it so LD

117
00:04:41,340 --> 00:04:44,550
is a project kind of I guess has existed

118
00:04:44,550 --> 00:04:47,730
for quite some years but it only really

119
00:04:47,730 --> 00:04:50,010
development of it kick started in about

120
00:04:50,010 --> 00:04:53,520
and 2015 prior to that there was a

121
00:04:53,520 --> 00:04:55,530
single codebase and it was based on a

122
00:04:55,530 --> 00:04:58,080
sort of Macko concept of an atom where

123
00:04:58,080 --> 00:05:00,450
an atom roughly maps to one function

124
00:05:00,450 --> 00:05:02,880
which and you could then move these

125
00:05:02,880 --> 00:05:05,610
atoms about and that works quite well in

126
00:05:05,610 --> 00:05:08,760
Macko but in l think off where you can

127
00:05:08,760 --> 00:05:10,590
have a concept of a section that can

128
00:05:10,590 --> 00:05:13,230
have multiple functions in the ealth and

129
00:05:13,230 --> 00:05:14,760
cough linkers basically had to keep

130
00:05:14,760 --> 00:05:17,460
translating to him from or the atom

131
00:05:17,460 --> 00:05:19,680
based model putting constraints in and

132
00:05:19,680 --> 00:05:22,080
it was slowing up development quite

133
00:05:22,080 --> 00:05:25,890
considerably so at about time to 2015

134
00:05:25,890 --> 00:05:28,920
the COFF codebase forked off and Bessie

135
00:05:28,920 --> 00:05:31,440
said no wait it's not-- there's not a

136
00:05:31,440 --> 00:05:35,190
lot of point in maintaining this atom

137
00:05:35,190 --> 00:05:38,520
model for the cough linker I can you

138
00:05:38,520 --> 00:05:40,380
know streamline the development much

139
00:05:40,380 --> 00:05:43,170
easier so I ended up with a much faster

140
00:05:43,170 --> 00:05:45,090
simpler to maintain code base out of

141
00:05:45,090 --> 00:05:48,270
that and then of probably a few weeks to

142
00:05:48,270 --> 00:05:51,600
a month later the elf back-end was sort

143
00:05:51,600 --> 00:05:53,220
of stripped out under the same Sunda

144
00:05:53,220 --> 00:05:56,430
principles so we've effectively got elf

145
00:05:56,430 --> 00:05:59,040
and cough which are kind of streamlined

146
00:05:59,040 --> 00:06:01,710
platform linkers and you have the mac o

147
00:06:01,710 --> 00:06:04,380
based at and model which is kind of like

148
00:06:04,380 --> 00:06:06,590
a linker toolkit versatile building

149
00:06:06,590 --> 00:06:08,060
linkers

150
00:06:08,060 --> 00:06:11,670
so these think these two then linkers

151
00:06:11,670 --> 00:06:14,400
don't really share code they do share

152
00:06:14,400 --> 00:06:16,770
algorithms and they do share sort of

153
00:06:16,770 --> 00:06:19,890
concepts and a similar sort of style but

154
00:06:19,890 --> 00:06:22,130
the design decision was made that it was

155
00:06:22,130 --> 00:06:25,260
bet it would that the amount of work

156
00:06:25,260 --> 00:06:28,020
that you did to transform elf and cough

157
00:06:28,020 --> 00:06:30,240
into the common data structures and back

158
00:06:30,240 --> 00:06:32,610
again wasn't worth the effort and it was

159
00:06:32,610 --> 00:06:34,080
better to share at this sort of

160
00:06:34,080 --> 00:06:37,110
algorithm and concept level so that's

161
00:06:37,110 --> 00:06:39,060
one of the one of the big design

162
00:06:39,060 --> 00:06:40,710
decision difference that you would have

163
00:06:40,710 --> 00:06:44,449
from say LD BFD where you've got BFD

164
00:06:44,449 --> 00:06:48,050
is the sort of the translate all object

165
00:06:48,050 --> 00:06:50,689
formats to BFD work on BFD translate

166
00:06:50,689 --> 00:06:52,789
back which means you can share code in

167
00:06:52,789 --> 00:06:54,139
the center of the linker but you've then

168
00:06:54,139 --> 00:06:56,509
you've got sort of quite a all the back

169
00:06:56,509 --> 00:06:58,240
ends and front ends have to sort of

170
00:06:58,240 --> 00:07:00,529
translate themselves to that BFD

171
00:07:00,529 --> 00:07:03,229
representation okay and it has been

172
00:07:03,229 --> 00:07:04,659
written with an emphasis on performance

173
00:07:04,659 --> 00:07:09,520
so I think that's probably as users it's

174
00:07:09,520 --> 00:07:12,229
it's probably the one reason why you Mon

175
00:07:12,229 --> 00:07:15,009
and want would want to give lld a try

176
00:07:15,009 --> 00:07:18,199
unless you were bothered about licensing

177
00:07:18,199 --> 00:07:23,629
or and other sort of source code so this

178
00:07:23,629 --> 00:07:25,909
is and I'm going to put a huge

179
00:07:25,909 --> 00:07:28,520
disclaimer on these numbers here so this

180
00:07:28,520 --> 00:07:31,400
is a machine that I've only recently got

181
00:07:31,400 --> 00:07:33,620
from my company's IT department with a

182
00:07:33,620 --> 00:07:38,659
PCI with a PCIe SSD lots of memory and a

183
00:07:38,659 --> 00:07:41,120
fast processor I certainly on my older

184
00:07:41,120 --> 00:07:43,879
machines didn't see anywhere near like

185
00:07:43,879 --> 00:07:46,129
the performance differential on this so

186
00:07:46,129 --> 00:07:47,539
I think this is very much going to be a

187
00:07:47,539 --> 00:07:50,689
case of them when when there's a huge

188
00:07:50,689 --> 00:07:52,339
amount of disk bandwidth which is in

189
00:07:52,339 --> 00:07:53,990
effect what the link is doing is it's

190
00:07:53,990 --> 00:07:56,060
basically a slightly clever form of cat

191
00:07:56,060 --> 00:07:58,310
well it's concatenating everything lots

192
00:07:58,310 --> 00:08:00,199
and lots of binary data together so

193
00:08:00,199 --> 00:08:02,360
you're mainly limited by how fast you

194
00:08:02,360 --> 00:08:04,219
can copy gigabytes of data to one place

195
00:08:04,219 --> 00:08:06,439
to the other so you could say if you've

196
00:08:06,439 --> 00:08:08,629
got a slow hard disk system that's going

197
00:08:08,629 --> 00:08:10,430
to swamp all the computation that you

198
00:08:10,430 --> 00:08:13,370
might do so if you've got a nice SSD

199
00:08:13,370 --> 00:08:15,649
that will emphasize the differences so

200
00:08:15,649 --> 00:08:18,319
these programs also are huge so I

201
00:08:18,319 --> 00:08:19,939
deliberately set out to say what can I

202
00:08:19,939 --> 00:08:21,620
find that's going to be horribly nasty

203
00:08:21,620 --> 00:08:25,129
so clang linked fully statically with

204
00:08:25,129 --> 00:08:29,060
full debug information zero produces an

205
00:08:29,060 --> 00:08:31,399
exact well I'm not on my machine it was

206
00:08:31,399 --> 00:08:34,880
roughly 1.5 gigabytes in size the output

207
00:08:34,880 --> 00:08:37,760
file so that's that's huge

208
00:08:37,760 --> 00:08:40,068
but lld tuned through that in about six

209
00:08:40,068 --> 00:08:43,399
seconds and BFD took about a minute so

210
00:08:43,399 --> 00:08:45,860
if you're working on a gigantic codebase

211
00:08:45,860 --> 00:08:50,350
I would say it's worth giving lld a look

212
00:08:50,350 --> 00:08:52,370
because you might find that your

213
00:08:52,370 --> 00:08:55,579
compiled link execute step could go down

214
00:08:55,579 --> 00:08:58,279
from a painful weight

215
00:08:58,279 --> 00:09:00,050
to something fairly quickly so if you

216
00:09:00,050 --> 00:09:02,180
say you've just changed one file one one

217
00:09:02,180 --> 00:09:03,680
string in a printf or something and have

218
00:09:03,680 --> 00:09:06,740
to relink then that could actually you

219
00:09:06,740 --> 00:09:08,600
know give you quite a bit of benefit not

220
00:09:08,600 --> 00:09:10,339
not so much for say an overnight build

221
00:09:10,339 --> 00:09:11,870
or anything like that because that'll be

222
00:09:11,870 --> 00:09:14,540
swamped by the time all the compilations

223
00:09:14,540 --> 00:09:16,459
that you have to do but that's where I

224
00:09:16,459 --> 00:09:19,490
would say the the primary reason to use

225
00:09:19,490 --> 00:09:22,160
L LD at the moment because they wait the

226
00:09:22,160 --> 00:09:23,749
way they've been designed well our LD is

227
00:09:23,749 --> 00:09:25,910
being designed is that the elf version

228
00:09:25,910 --> 00:09:27,470
tries to mimic the same interface that

229
00:09:27,470 --> 00:09:29,990
gold and LD do so it just can be a

230
00:09:29,990 --> 00:09:32,480
drop-in replacement but one of the one

231
00:09:32,480 --> 00:09:33,829
of the other bits of that is that well

232
00:09:33,829 --> 00:09:36,769
okay it's not doing anything else so

233
00:09:36,769 --> 00:09:38,509
this isn't the there's only really a

234
00:09:38,509 --> 00:09:41,540
used to use it as a substitute so why

235
00:09:41,540 --> 00:09:44,779
might I not want to use L LD I've given

236
00:09:44,779 --> 00:09:45,860
you the good side which is the

237
00:09:45,860 --> 00:09:47,569
performance so well what what's the

238
00:09:47,569 --> 00:09:51,499
drawbacks to that so I'd say the LOD

239
00:09:51,499 --> 00:09:53,389
doesn't implement all of gold or LG's

240
00:09:53,389 --> 00:09:55,790
features yet certainly and say the

241
00:09:55,790 --> 00:09:57,319
linker control script area there's

242
00:09:57,319 --> 00:09:59,240
that's that work is in sort of active

243
00:09:59,240 --> 00:10:01,279
development right now whether it ever

244
00:10:01,279 --> 00:10:05,899
gets all of the nice features of Afghan

245
00:10:05,899 --> 00:10:09,259
oh L D I don't know I don't know of

246
00:10:09,259 --> 00:10:11,329
anyone using this heavily in an embedded

247
00:10:11,329 --> 00:10:13,790
context right now at the moment it's

248
00:10:13,790 --> 00:10:16,579
very heavily tuned towards sort of Linux

249
00:10:16,579 --> 00:10:19,639
BSD style you know operating system

250
00:10:19,639 --> 00:10:22,579
platform linkers embedded systems tend

251
00:10:22,579 --> 00:10:24,230
to be horrible to linkers they you know

252
00:10:24,230 --> 00:10:26,000
with things like him yeah multiple

253
00:10:26,000 --> 00:10:27,529
address spaces with different memories

254
00:10:27,529 --> 00:10:29,809
and different constraints and all of

255
00:10:29,809 --> 00:10:31,399
that type of thing where you've got you

256
00:10:31,399 --> 00:10:33,199
got to have quite stringent placement

257
00:10:33,199 --> 00:10:36,110
requirements so I think to take if you

258
00:10:36,110 --> 00:10:37,600
were using an embedded system I would

259
00:10:37,600 --> 00:10:40,189
probably say your your you will be one

260
00:10:40,189 --> 00:10:41,509
of the Trailblazers if you start

261
00:10:41,509 --> 00:10:43,730
adopting L LD but if you do please do

262
00:10:43,730 --> 00:10:46,279
and report bugs and we can start working

263
00:10:46,279 --> 00:10:49,850
on that and it's got a limited amount of

264
00:10:49,850 --> 00:10:53,139
users compared to gold and and and BFD

265
00:10:53,139 --> 00:10:56,540
the bsd community are adopting l LD

266
00:10:56,540 --> 00:10:58,429
probably more aggressively than anyone

267
00:10:58,429 --> 00:11:00,439
else and they're doing some great work

268
00:11:00,439 --> 00:11:04,309
in in improving it so hopefully that's

269
00:11:04,309 --> 00:11:06,259
one thing that quinn use to drive

270
00:11:06,259 --> 00:11:08,089
forward the adoption of l LD is to have

271
00:11:08,089 --> 00:11:10,639
a big user base full of people all using

272
00:11:10,639 --> 00:11:12,830
it and finding out where the problem

273
00:11:12,830 --> 00:11:16,010
I guess limited support the number of

274
00:11:16,010 --> 00:11:18,440
targets I could say the main target at

275
00:11:18,440 --> 00:11:24,440
the moment is is x86 64 or AMD 64 that's

276
00:11:24,440 --> 00:11:26,090
the one where the predominant number of

277
00:11:26,090 --> 00:11:29,300
users are on there there is a good port

278
00:11:29,300 --> 00:11:33,260
for route 64 I think that's now you know

279
00:11:33,260 --> 00:11:37,610
running a bill but it's got tests it's

280
00:11:37,610 --> 00:11:42,610
self hosting arm needs range extensions

281
00:11:42,610 --> 00:11:45,170
at the moment so it can't handle big

282
00:11:45,170 --> 00:11:48,530
links at the moment but in a sort of

283
00:11:48,530 --> 00:11:52,070
small station it's getting there I think

284
00:11:52,070 --> 00:11:54,130
the mips port is well maintained and

285
00:11:54,130 --> 00:11:58,400
there is a port for power AMD GPU and

286
00:11:58,400 --> 00:12:01,700
x86 32 but they tend not to see too many

287
00:12:01,700 --> 00:12:03,830
commits so i don't know too much about

288
00:12:03,830 --> 00:12:05,990
about there and of course if you're

289
00:12:05,990 --> 00:12:06,950
happy with the performance of your

290
00:12:06,950 --> 00:12:08,540
linker at the moment there's probably

291
00:12:08,540 --> 00:12:13,010
not a good reason to change okay so how

292
00:12:13,010 --> 00:12:15,230
might I go about using lld tomorrow

293
00:12:15,230 --> 00:12:17,090
given that hopefully it will be in the

294
00:12:17,090 --> 00:12:20,660
lod 4.0 release so very very simple if

295
00:12:20,660 --> 00:12:22,610
anyone has been used to building LLVM

296
00:12:22,610 --> 00:12:26,270
you basically put lld in the tools

297
00:12:26,270 --> 00:12:28,480
directory like you will put clang and

298
00:12:28,480 --> 00:12:32,450
then just do the standard c make ninja

299
00:12:32,450 --> 00:12:38,750
and and an install and you'll get a ll d

300
00:12:38,750 --> 00:12:41,810
in your standard build /bin directory

301
00:12:41,810 --> 00:12:45,310
along with all the other and LLVM tools

302
00:12:45,310 --> 00:12:48,350
so what do you actually get out of the

303
00:12:48,350 --> 00:12:51,950
end of it is a you'll get a a tool

304
00:12:51,950 --> 00:12:55,130
called L LD and you'll get a sim link to

305
00:12:55,130 --> 00:12:58,220
it called LD L LD now that's very

306
00:12:58,220 --> 00:13:00,350
similar to what you would get with say

307
00:13:00,350 --> 00:13:03,440
on a I'm just thinking of an abundant

308
00:13:03,440 --> 00:13:04,910
sort of system where if you look in

309
00:13:04,910 --> 00:13:06,530
slash user slash bin

310
00:13:06,530 --> 00:13:11,270
you'll get LD BFD LD gold and you then

311
00:13:11,270 --> 00:13:12,170
set a symlink

312
00:13:12,170 --> 00:13:15,050
for LD to either a gold or BFD depending

313
00:13:15,050 --> 00:13:19,130
on what you want so so typically the

314
00:13:19,130 --> 00:13:21,500
generic L LD is like can

315
00:13:21,500 --> 00:13:23,450
basically by setting a flag called

316
00:13:23,450 --> 00:13:25,790
flavour you can say act as if you're the

317
00:13:25,790 --> 00:13:27,650
microsoft lync acts as if you're the

318
00:13:27,650 --> 00:13:31,280
canoe linker if you use LD de l LD or LD

319
00:13:31,280 --> 00:13:33,740
a sibling with LD it'll infer that you

320
00:13:33,740 --> 00:13:37,310
want to try and mimic good and good new

321
00:13:37,310 --> 00:13:41,690
LD so the attention that generally I

322
00:13:41,690 --> 00:13:43,130
think these types of linkers that you'd

323
00:13:43,130 --> 00:13:44,930
only tend not to call the linker

324
00:13:44,930 --> 00:13:46,940
directly it's usually the compiler

325
00:13:46,940 --> 00:13:49,010
driver that will feed it feed you with

326
00:13:49,010 --> 00:13:51,380
all of the various objects if you anyone

327
00:13:51,380 --> 00:13:53,210
went to Brookes Davis's talk on hello

328
00:13:53,210 --> 00:13:54,710
world yesterday you'll be familiar with

329
00:13:54,710 --> 00:13:58,070
all of the extra objects like CRT 1c RTI

330
00:13:58,070 --> 00:14:00,860
that the compiler driver will feed to

331
00:14:00,860 --> 00:14:03,110
the linker to make everything work it's

332
00:14:03,110 --> 00:14:05,480
generally not just your hello world dot

333
00:14:05,480 --> 00:14:08,660
o and what and live see that and that

334
00:14:08,660 --> 00:14:11,630
get involved in there so yeah intention

335
00:14:11,630 --> 00:14:16,040
is it just a drop-in replacement so what

336
00:14:16,040 --> 00:14:17,840
I found the most reliable way if you

337
00:14:17,840 --> 00:14:21,170
want to use out L LD is to symlink your

338
00:14:21,170 --> 00:14:26,630
slash user slash bin LD to LD L LD on

339
00:14:26,630 --> 00:14:28,700
you know as I mentioned earlier it's

340
00:14:28,700 --> 00:14:30,589
book that's pretty much how you select

341
00:14:30,589 --> 00:14:33,170
between the canoe linker which I'll call

342
00:14:33,170 --> 00:14:37,640
LD PFD or got the canoe gold which is LD

343
00:14:37,640 --> 00:14:41,690
gold and I say there beware of build

344
00:14:41,690 --> 00:14:43,790
systems to include their own tools so

345
00:14:43,790 --> 00:14:45,470
for example when I built Chrome and

346
00:14:45,470 --> 00:14:47,570
Firefox and started trying to say well

347
00:14:47,570 --> 00:14:50,120
okay well if I use L ll D and I found

348
00:14:50,120 --> 00:14:51,560
out that they that the build system had

349
00:14:51,560 --> 00:14:55,190
created a whole new directory just for

350
00:14:55,190 --> 00:14:56,810
their own bin utils and they copied

351
00:14:56,810 --> 00:14:59,570
their own versions and and and directed

352
00:14:59,570 --> 00:15:01,460
the linker directly at that so you know

353
00:15:01,460 --> 00:15:03,020
sometimes find on these big projects

354
00:15:03,020 --> 00:15:04,790
that they've that the build systems will

355
00:15:04,790 --> 00:15:06,140
try and defeat you and you have to

356
00:15:06,140 --> 00:15:09,140
fiddle around a little bit at that point

357
00:15:09,140 --> 00:15:12,320
now if you're using clang you there is a

358
00:15:12,320 --> 00:15:15,140
flag called - effuse - LD that does

359
00:15:15,140 --> 00:15:18,110
exist on GCC as well that GCC won't

360
00:15:18,110 --> 00:15:20,870
accept LD L LD at the moment it will

361
00:15:20,870 --> 00:15:23,810
only accept BFD in gold but if you're

362
00:15:23,810 --> 00:15:28,850
using and clang you can use f use LD -

363
00:15:28,850 --> 00:15:31,280
equals L LD so that what that means is

364
00:15:31,280 --> 00:15:32,780
that when the compiler invokes the

365
00:15:32,780 --> 00:15:35,130
linker it'll say I'll look on the

366
00:15:35,130 --> 00:15:37,770
for LD L LD so that would be a way of

367
00:15:37,770 --> 00:15:41,970
say installing LD L LD in your slash

368
00:15:41,970 --> 00:15:44,160
user slash bin directory and then not

369
00:15:44,160 --> 00:15:45,570
have to fiddle around with symlinks or

370
00:15:45,570 --> 00:15:47,040
change things he would just control that

371
00:15:47,040 --> 00:15:48,450
with them with that particular flag

372
00:15:48,450 --> 00:15:52,860
there so what are the differences

373
00:15:52,860 --> 00:15:57,360
between LD L LD so I think main

374
00:15:57,360 --> 00:15:59,880
difference is now you would you that you

375
00:15:59,880 --> 00:16:01,740
actually have to try pretty hard to make

376
00:16:01,740 --> 00:16:04,890
this make a difference but the the way

377
00:16:04,890 --> 00:16:07,140
that the linker search for libraries is

378
00:16:07,140 --> 00:16:11,070
subtly different in that and basically

379
00:16:11,070 --> 00:16:13,860
the new linkers they search the command

380
00:16:13,860 --> 00:16:15,390
line from left to right and they only

381
00:16:15,390 --> 00:16:18,360
search each library once so if you have

382
00:16:18,360 --> 00:16:20,580
things like trans circulated circular

383
00:16:20,580 --> 00:16:22,770
dependencies between libraries where you

384
00:16:22,770 --> 00:16:25,530
kind of have an object well a member a

385
00:16:25,530 --> 00:16:27,330
in one library member B and they each

386
00:16:27,330 --> 00:16:29,280
call each other you sometimes have to

387
00:16:29,280 --> 00:16:31,170
break that cycle by either using

388
00:16:31,170 --> 00:16:33,060
something called a start group end group

389
00:16:33,060 --> 00:16:35,280
or you add the libraries in multiple

390
00:16:35,280 --> 00:16:37,860
times on the command line L LD doesn't

391
00:16:37,860 --> 00:16:39,590
do that it basically sort of then

392
00:16:39,590 --> 00:16:42,510
searches the symbol table each each time

393
00:16:42,510 --> 00:16:45,690
it sees the the archive and then it just

394
00:16:45,690 --> 00:16:47,280
will automatically go back into that

395
00:16:47,280 --> 00:16:49,440
search table it doesn't sort of require

396
00:16:49,440 --> 00:16:51,060
you to put light and libraries on the

397
00:16:51,060 --> 00:16:53,130
command line multiple times again there

398
00:16:53,130 --> 00:16:56,940
there are there are contrived examples

399
00:16:56,940 --> 00:16:59,310
where this makes a difference but you do

400
00:16:59,310 --> 00:17:00,900
have to try harder to actually run into

401
00:17:00,900 --> 00:17:03,630
them now there's no default linker

402
00:17:03,630 --> 00:17:06,329
script for an L LD so if you're ever

403
00:17:06,329 --> 00:17:09,390
using normal LD you can type in LD - -

404
00:17:09,390 --> 00:17:11,130
verbose and it'll tell you the linker

405
00:17:11,130 --> 00:17:12,990
script that it's using so if you do this

406
00:17:12,990 --> 00:17:14,609
for say a standard Linux link you'll get

407
00:17:14,609 --> 00:17:16,319
a linker script about two pages long

408
00:17:16,319 --> 00:17:21,329
full of a full of stuff and so what LD L

409
00:17:21,329 --> 00:17:23,189
LD does in this particular case it's got

410
00:17:23,189 --> 00:17:26,040
a it has a completely separate code path

411
00:17:26,040 --> 00:17:29,610
to handle that case so you that again

412
00:17:29,610 --> 00:17:32,430
can cause slight differences and there's

413
00:17:32,430 --> 00:17:36,510
been there's not any attempt to exactly

414
00:17:36,510 --> 00:17:38,720
match the behavior of the new LD for

415
00:17:38,720 --> 00:17:42,210
linker scripts I think the idea is to

416
00:17:42,210 --> 00:17:45,000
come close to or to use you know to

417
00:17:45,000 --> 00:17:46,500
basically match where the behavior

418
00:17:46,500 --> 00:17:47,720
matters

419
00:17:47,720 --> 00:17:50,059
but the sort of the linker control

420
00:17:50,059 --> 00:17:52,780
scripts are somewhat loosely specified

421
00:17:52,780 --> 00:17:57,890
and they're often only specify a part of

422
00:17:57,890 --> 00:18:00,169
what's needed so for example you can

423
00:18:00,169 --> 00:18:02,210
write a linker script that specifies

424
00:18:02,210 --> 00:18:04,429
just one portion of your image and then

425
00:18:04,429 --> 00:18:05,929
you leave the rest of it to the linker

426
00:18:05,929 --> 00:18:10,100
and so LD and ll d might make different

427
00:18:10,100 --> 00:18:12,890
decisions in that particular area and

428
00:18:12,890 --> 00:18:14,539
also some some options are just not

429
00:18:14,539 --> 00:18:18,289
implemented and quite often there some

430
00:18:18,289 --> 00:18:20,450
command-line options that are just you

431
00:18:20,450 --> 00:18:22,610
know they'll be accepted because they're

432
00:18:22,610 --> 00:18:25,120
passed by GCC every time you do a link

433
00:18:25,120 --> 00:18:28,190
but they not actually needed so I'll DLL

434
00:18:28,190 --> 00:18:32,030
D just ignores them okay so here's a

435
00:18:32,030 --> 00:18:33,770
very very quickly I won't go to too much

436
00:18:33,770 --> 00:18:36,110
detail about this this is just showing

437
00:18:36,110 --> 00:18:37,490
an example of some of the design

438
00:18:37,490 --> 00:18:39,320
decisions that lld has taken that's

439
00:18:39,320 --> 00:18:39,770
different

440
00:18:39,770 --> 00:18:43,309
well D so on your left you can see two

441
00:18:43,309 --> 00:18:46,970
program headers an R row and an RW and

442
00:18:46,970 --> 00:18:49,909
you'll also see that and the green bits

443
00:18:49,909 --> 00:18:51,980
are the sort of executive ball code and

444
00:18:51,980 --> 00:18:56,929
the sort of cyan bits are the sort of

445
00:18:56,929 --> 00:18:59,870
our row data you'll see that lld groups

446
00:18:59,870 --> 00:19:02,090
it's our row data first before the

447
00:19:02,090 --> 00:19:05,000
executive all bits and has a set a three

448
00:19:05,000 --> 00:19:07,309
program header layout and you can find

449
00:19:07,309 --> 00:19:10,520
that some tools that assume the two can

450
00:19:10,520 --> 00:19:12,470
sort of program header tables can get

451
00:19:12,470 --> 00:19:14,720
confused by that so that's again

452
00:19:14,720 --> 00:19:16,820
something just to be talk to watch out

453
00:19:16,820 --> 00:19:18,799
for generally this sort of thing doesn't

454
00:19:18,799 --> 00:19:21,380
matter okay

455
00:19:21,380 --> 00:19:23,270
so as I said to Vern start wrapping up

456
00:19:23,270 --> 00:19:25,909
and I started going through this and

457
00:19:25,909 --> 00:19:28,190
earlier on then realized I had a slide

458
00:19:28,190 --> 00:19:30,710
later on and but I think the general

459
00:19:30,710 --> 00:19:33,950
state said say I'd say the amd64 one is

460
00:19:33,950 --> 00:19:35,720
looking pretty good lot of works been

461
00:19:35,720 --> 00:19:38,289
done over the past few months to get the

462
00:19:38,289 --> 00:19:41,720
linker scripts working and there's

463
00:19:41,720 --> 00:19:43,640
several bill bots that involve that

464
00:19:43,640 --> 00:19:46,909
basically goes through clan lld and you

465
00:19:46,909 --> 00:19:48,620
know to stage bill BOTS that check

466
00:19:48,620 --> 00:19:52,190
everything works and I think as of the

467
00:19:52,190 --> 00:19:54,350
January 2017 I saw a message post list

468
00:19:54,350 --> 00:19:57,230
at the FreeBSD based system kernel plus

469
00:19:57,230 --> 00:20:01,049
user space has been linking and running

470
00:20:01,049 --> 00:20:04,169
with with lld and I think there's also

471
00:20:04,169 --> 00:20:06,029
some progress going through the ports

472
00:20:06,029 --> 00:20:10,019
and I think you know as you can see

473
00:20:10,019 --> 00:20:13,049
there are 20,000 out of 26,000 are

474
00:20:13,049 --> 00:20:15,090
linking properly and I think we reckon

475
00:20:15,090 --> 00:20:17,039
that some of the ones that aren't are

476
00:20:17,039 --> 00:20:19,679
not there's not 6,000 individual

477
00:20:19,679 --> 00:20:20,999
problems there there's probably a

478
00:20:20,999 --> 00:20:22,429
handful of problems that are causing

479
00:20:22,429 --> 00:20:25,739
causing those and there's a sort of

480
00:20:25,739 --> 00:20:29,100
upstream tracking bug too so that if

481
00:20:29,100 --> 00:20:30,840
you're interested in sort of keeping

482
00:20:30,840 --> 00:20:34,049
that progress so air at 64 we've got

483
00:20:34,049 --> 00:20:36,210
little endian support only but we have

484
00:20:36,210 --> 00:20:38,669
got a bill bot running to make sure that

485
00:20:38,669 --> 00:20:40,460
it doesn't you know it keeps at least

486
00:20:40,460 --> 00:20:44,929
self-hosting and linking clang and

487
00:20:44,929 --> 00:20:47,789
what's that so and the tests wait right

488
00:20:47,789 --> 00:20:51,269
okay and we've got little endian support

489
00:20:51,269 --> 00:20:53,789
only when missing range extension thunks

490
00:20:53,789 --> 00:20:56,489
so we can't link clang yet because

491
00:20:56,489 --> 00:20:59,190
that's a rather too large for a an armed

492
00:20:59,190 --> 00:21:02,070
p7 system and that's what my personal

493
00:21:02,070 --> 00:21:03,840
project is at the moment adds range

494
00:21:03,840 --> 00:21:06,179
extension thunks so once that's done

495
00:21:06,179 --> 00:21:07,529
there we should have enough to get a

496
00:21:07,529 --> 00:21:09,509
bill buck together and that will sort of

497
00:21:09,509 --> 00:21:11,519
bring arm up to the same level of

498
00:21:11,519 --> 00:21:16,830
supporters and a out 64 ok nips now I

499
00:21:16,830 --> 00:21:18,359
don't have muscular I don't know too

500
00:21:18,359 --> 00:21:21,629
much about MIPS as a system myself it's

501
00:21:21,629 --> 00:21:25,590
actively maintained and so I'm going to

502
00:21:25,590 --> 00:21:27,809
make the assumption that based on the

503
00:21:27,809 --> 00:21:30,690
last data's update that it was good it

504
00:21:30,690 --> 00:21:32,129
passes all the single and multi source

505
00:21:32,129 --> 00:21:34,200
tests and the LLVM test suite still

506
00:21:34,200 --> 00:21:38,669
holds and I think it's probably my guess

507
00:21:38,669 --> 00:21:39,929
is that it will be in the same sort of

508
00:21:39,929 --> 00:21:42,600
status the x64 ports

509
00:21:42,600 --> 00:21:44,279
probably not quite as heavily used as

510
00:21:44,279 --> 00:21:48,059
the as the amd64 one but certainly if

511
00:21:48,059 --> 00:21:49,350
you're in a mixer key tech chure it will

512
00:21:49,350 --> 00:21:53,429
be worth taking a look x86 32-bit I

513
00:21:53,429 --> 00:21:55,889
think it's complete but as far as I know

514
00:21:55,889 --> 00:21:58,289
I've not seen this being actively tested

515
00:21:58,289 --> 00:22:01,379
and the last time I tried trying some

516
00:22:01,379 --> 00:22:02,700
things out when I was making some

517
00:22:02,700 --> 00:22:04,769
modifications took a new eye funk I've

518
00:22:04,769 --> 00:22:07,080
found some problems so I think I don't

519
00:22:07,080 --> 00:22:09,629
know again have too many people are

520
00:22:09,629 --> 00:22:11,920
actually using this one right now

521
00:22:11,920 --> 00:22:13,990
but it's certainly I think if there were

522
00:22:13,990 --> 00:22:15,610
any bugs reported on it they could get

523
00:22:15,610 --> 00:22:18,300
fixed fairly straight straightforwardly

524
00:22:18,300 --> 00:22:21,670
there is a port to PowerPC and to AMD

525
00:22:21,670 --> 00:22:25,030
GPU but I've not seen any traffic on

526
00:22:25,030 --> 00:22:27,430
those for quite some time I'm not sure

527
00:22:27,430 --> 00:22:29,980
of the status of them but just based on

528
00:22:29,980 --> 00:22:34,870
lack of traffic I don't know that it's

529
00:22:34,870 --> 00:22:37,570
probably best I just say status unknown

530
00:22:37,570 --> 00:22:39,520
if you've got one might be worth trying

531
00:22:39,520 --> 00:22:41,170
but I don't know whether anyone's

532
00:22:41,170 --> 00:22:44,020
actively maintaining it right now okay

533
00:22:44,020 --> 00:22:46,480
so what can you do to contribute to LMD

534
00:22:46,480 --> 00:22:48,160
so one of the things that I think any

535
00:22:48,160 --> 00:22:49,810
you know as any of the sort of LOD

536
00:22:49,810 --> 00:22:51,640
maintainers would say what we really

537
00:22:51,640 --> 00:22:53,680
need right now is people to you know go

538
00:22:53,680 --> 00:22:56,020
out and use it in report bugs and find

539
00:22:56,020 --> 00:22:57,760
out what's not working that type of

540
00:22:57,760 --> 00:23:00,460
thing because we're thinking it's

541
00:23:00,460 --> 00:23:02,710
getting to the stage where you know you

542
00:23:02,710 --> 00:23:04,480
can actually genuinely give it a go and

543
00:23:04,480 --> 00:23:07,450
expect that the program should work not

544
00:23:07,450 --> 00:23:08,860
well you can give it a go and hope that

545
00:23:08,860 --> 00:23:11,230
it might work and I think that that's

546
00:23:11,230 --> 00:23:13,030
certainly something that we would

547
00:23:13,030 --> 00:23:15,640
appreciate if you want to contribute

548
00:23:15,640 --> 00:23:19,050
patches of course lld is covered by the

549
00:23:19,050 --> 00:23:21,820
the developer policy you can find the

550
00:23:21,820 --> 00:23:24,880
owners on the various and the various

551
00:23:24,880 --> 00:23:28,540
places and read these there and there

552
00:23:28,540 --> 00:23:31,270
isn't an awful lot of stuff on LLD out

553
00:23:31,270 --> 00:23:32,830
there in terms of sort of full

554
00:23:32,830 --> 00:23:35,650
documentation there is a sort of LLD

555
00:23:35,650 --> 00:23:37,780
site to the documentation but it

556
00:23:37,780 --> 00:23:39,160
probably doesn't tell you an awful lot

557
00:23:39,160 --> 00:23:41,170
about how to go about and developing it

558
00:23:41,170 --> 00:23:44,470
I did a presentation at the lob on

559
00:23:44,470 --> 00:23:46,840
cauldron last year on sort of lld

560
00:23:46,840 --> 00:23:48,670
structure and I think most of that still

561
00:23:48,670 --> 00:23:52,540
holds and really the main author of the

562
00:23:52,540 --> 00:23:56,680
cough port and did a did a presentation

563
00:23:56,680 --> 00:24:00,760
in 2016 on these sort of them but they

564
00:24:00,760 --> 00:24:04,600
the dev meeting about lld so those are

565
00:24:04,600 --> 00:24:06,220
the two main video sources that I can

566
00:24:06,220 --> 00:24:09,220
point you to and any links to content

567
00:24:09,220 --> 00:24:11,020
before 2015 will be about the a

568
00:24:11,020 --> 00:24:13,420
turn-based linker so unless you're going

569
00:24:13,420 --> 00:24:15,610
to be working on the mac o @ and base

570
00:24:15,610 --> 00:24:18,490
stuff I will probably ignore anything

571
00:24:18,490 --> 00:24:20,860
that came back from 2015 unless you're

572
00:24:20,860 --> 00:24:22,360
still interested in tracking through the

573
00:24:22,360 --> 00:24:23,890
history

574
00:24:23,890 --> 00:24:26,810
okay thanks very much everyone and I

575
00:24:26,810 --> 00:24:27,920
don't how many times have I've got any

576
00:24:27,920 --> 00:24:30,260
time okay right okay so I've come a

577
00:24:30,260 --> 00:24:31,850
little bit short on that's better

578
00:24:31,850 --> 00:24:33,170
so we've got plenty time for questions

579
00:24:33,170 --> 00:24:34,670
or if you want to go get your lunch uh

580
00:24:34,670 --> 00:24:37,220
probably really if you want to run out

581
00:24:37,220 --> 00:24:38,690
of here as quickly as possible I will do

582
00:24:38,690 --> 00:24:45,590
it yes so right okay oh that's good news

583
00:24:45,590 --> 00:25:08,480
right okay okay so just to repeat that

584
00:25:08,480 --> 00:25:10,610
just for anyone it didn't catch that on

585
00:25:10,610 --> 00:25:13,970
the thing so when an update on the BSD

586
00:25:13,970 --> 00:25:16,460
side so that Andy's and hangout 64

587
00:25:16,460 --> 00:25:19,010
should be and mips64 should be fairly

588
00:25:19,010 --> 00:25:21,290
close to amd64 in terms of their

589
00:25:21,290 --> 00:25:25,370
coverage mips64 mips may be missing some

590
00:25:25,370 --> 00:25:29,690
support for large programs the BSD sort

591
00:25:29,690 --> 00:25:32,290
of base system tends to be small UNIX

592
00:25:32,290 --> 00:25:34,400
programs rather than sort of giant

593
00:25:34,400 --> 00:25:36,560
programs so yes sir but but work is

594
00:25:36,560 --> 00:25:38,420
definitely actively ongoing in in that

595
00:25:38,420 --> 00:25:40,910
area and we hope to be better soon okay

596
00:25:40,910 --> 00:25:51,140
any more questions here yeah I mean I

597
00:25:51,140 --> 00:25:54,110
think partly it's because it's trying to

598
00:25:54,110 --> 00:25:58,160
do it it probably does less it's

599
00:25:58,160 --> 00:25:59,720
probably the shortest thing which is the

600
00:25:59,720 --> 00:26:01,100
same event as any fast program it's

601
00:26:01,100 --> 00:26:02,870
obviously doing less at less at that

602
00:26:02,870 --> 00:26:06,950
point but what what lld does is it tries

603
00:26:06,950 --> 00:26:10,280
to read through everything only once so

604
00:26:10,280 --> 00:26:12,020
it's kind of I guess almost like you

605
00:26:12,020 --> 00:26:13,760
call a back patching assembler so I

606
00:26:13,760 --> 00:26:15,470
suppose is like a to pass assembler you

607
00:26:15,470 --> 00:26:17,960
read everything once then work out what

608
00:26:17,960 --> 00:26:19,490
you need to do on the first pass where

609
00:26:19,490 --> 00:26:20,960
all the sizes are then you do another

610
00:26:20,960 --> 00:26:23,600
pass and do all the content another way

611
00:26:23,600 --> 00:26:25,040
of doing is like a back patch where you

612
00:26:25,040 --> 00:26:27,080
basically go through once working out

613
00:26:27,080 --> 00:26:28,610
where you need to patch all the things

614
00:26:28,610 --> 00:26:31,070
and then sort of them and do the sort of

615
00:26:31,070 --> 00:26:32,930
copy and then sort of figure out the

616
00:26:32,930 --> 00:26:35,690
patches which tends to be it tends to

617
00:26:35,690 --> 00:26:37,130
make it harder - harder

618
00:26:37,130 --> 00:26:38,900
to write the program in the first place

619
00:26:38,900 --> 00:26:40,790
but it does mean that you generally

620
00:26:40,790 --> 00:26:43,130
passing through you passing through the

621
00:26:43,130 --> 00:26:45,470
content generally once so I think it's

622
00:26:45,470 --> 00:26:47,120
generally it started off with an

623
00:26:47,120 --> 00:26:49,250
emphasis on performance and it's been

624
00:26:49,250 --> 00:26:53,750
actively tracked and almost every patch

625
00:26:53,750 --> 00:26:55,280
that goes in is sort of assessed for

626
00:26:55,280 --> 00:26:56,930
performance so I think partly it's just

627
00:26:56,930 --> 00:26:59,270
it's probably not had enough time to

628
00:26:59,270 --> 00:27:01,370
deep that because I think gold started

629
00:27:01,370 --> 00:27:03,830
with this same goal but whether over you

630
00:27:03,830 --> 00:27:05,900
know five to ten years more stuff's been

631
00:27:05,900 --> 00:27:07,100
anything more features have been added

632
00:27:07,100 --> 00:27:09,740
in its probably may have slowed down

633
00:27:09,740 --> 00:27:14,090
over time so it may be that LD is

634
00:27:14,090 --> 00:27:15,560
skipping some steps that the other

635
00:27:15,560 --> 00:27:17,960
linkers are doing that sort of thing and

636
00:27:17,960 --> 00:27:19,370
it might be that as it gains more

637
00:27:19,370 --> 00:27:21,430
features it might end up slowing down

638
00:27:21,430 --> 00:27:24,260
over time but I think at the moment

639
00:27:24,260 --> 00:27:26,120
there's a sort of an aggressive sort of

640
00:27:26,120 --> 00:27:29,090
burn it you know emphasis on performance

641
00:27:29,090 --> 00:27:32,150
in reviews so I think that that it will

642
00:27:32,150 --> 00:27:43,520
hopefully maintain that over time right

643
00:27:43,520 --> 00:27:45,030
okay

644
00:27:45,030 --> 00:27:51,220
I certainly does it's got incremental

645
00:27:51,220 --> 00:27:53,290
code folding and it's certainly got

646
00:27:53,290 --> 00:27:56,940
support for the health SSA shf merge

647
00:27:56,940 --> 00:28:01,809
strings but so it does deduplicate

648
00:28:01,809 --> 00:28:03,280
strings I don't think it does

649
00:28:03,280 --> 00:28:05,950
duplication duplication of debug strings

650
00:28:05,950 --> 00:28:08,830
I don't think a moment I think debug is

651
00:28:08,830 --> 00:28:11,650
very much a black box at the moment it's

652
00:28:11,650 --> 00:28:13,570
got some simplified relocation handling

653
00:28:13,570 --> 00:28:16,030
for it but it's not trying very hard to

654
00:28:16,030 --> 00:28:18,580
compress debug information at the moment

655
00:28:18,580 --> 00:28:20,470
that that's my understanding I haven't

656
00:28:20,470 --> 00:28:22,510
looked too much into that but yeah I can

657
00:28:22,510 --> 00:28:23,890
imagine if you do some special handling

658
00:28:23,890 --> 00:28:25,690
of deep I mean for those of you who

659
00:28:25,690 --> 00:28:30,190
don't know if you've the amount of debug

660
00:28:30,190 --> 00:28:33,100
information totally swamps non debug

661
00:28:33,100 --> 00:28:34,900
information so when I mentioned that one

662
00:28:34,900 --> 00:28:38,500
half gigabytes clang executive all that

663
00:28:38,500 --> 00:28:40,900
comes down to about 30 without debug

664
00:28:40,900 --> 00:28:43,030
information but so you know if you

665
00:28:43,030 --> 00:28:45,100
compile with gigabytes you're really

666
00:28:45,100 --> 00:28:46,960
hurting your linker at this particular

667
00:28:46,960 --> 00:28:48,640
point and so if you start actually

668
00:28:48,640 --> 00:28:50,500
peering into debug information and debug

669
00:28:50,500 --> 00:28:53,950
information is normally encoded in

670
00:28:53,950 --> 00:28:55,360
things like something called youlab

671
00:28:55,360 --> 00:28:57,429
encoding so you can't just jump into the

672
00:28:57,429 --> 00:29:00,010
middle of it and do things so if you if

673
00:29:00,010 --> 00:29:01,330
you're going to process gigabytes worth

674
00:29:01,330 --> 00:29:02,590
of debug information you're going to

675
00:29:02,590 --> 00:29:04,030
slow your linker right down but you

676
00:29:04,030 --> 00:29:06,160
might get a much smaller output which

677
00:29:06,160 --> 00:29:07,900
will then help your debugger start up

678
00:29:07,900 --> 00:29:10,299
quickly so bit of a trade-off there but

679
00:29:10,299 --> 00:29:11,470
yeah as far as I know it doesn't do an

680
00:29:11,470 --> 00:29:15,150
awful lot yeah yeah

681
00:29:17,940 --> 00:29:54,040
yeah yes yes certainly it's one of the

682
00:29:54,040 --> 00:29:55,890
things I would definitely post those

683
00:29:55,890 --> 00:29:58,420
take those performance numbers with a

684
00:29:58,420 --> 00:30:01,210
severe pinch of souls other thing lld

685
00:30:01,210 --> 00:30:03,550
and gold are multi-threaded BFD is not

686
00:30:03,550 --> 00:30:05,740
it's quite difficult to get an actual

687
00:30:05,740 --> 00:30:08,050
are these linkers you know anyone who's

688
00:30:08,050 --> 00:30:09,340
done any compiler to compile a

689
00:30:09,340 --> 00:30:11,740
benchmarking will tell you how difficult

690
00:30:11,740 --> 00:30:13,990
it is to actually match up so you've got

691
00:30:13,990 --> 00:30:15,640
a roughly fair comparison of what

692
00:30:15,640 --> 00:30:17,020
compiler is actually doing at what

693
00:30:17,020 --> 00:30:19,780
optimization level so I would take that

694
00:30:19,780 --> 00:30:21,610
as just a you might want to give it a

695
00:30:21,610 --> 00:30:23,800
try please measure your own code at that

696
00:30:23,800 --> 00:30:30,670
particular point but yeah and no I

697
00:30:30,670 --> 00:30:32,950
didn't I just well put them for the most

698
00:30:32,950 --> 00:30:35,650
part I just chose the last link step so

699
00:30:35,650 --> 00:30:37,870
there may be a case of we're getting it

700
00:30:37,870 --> 00:30:40,810
all of the intermediate parts so what I

701
00:30:40,810 --> 00:30:43,390
did I cheated I basically said I'm going

702
00:30:43,390 --> 00:30:46,600
to go in to the directory that they the

703
00:30:46,600 --> 00:30:48,790
bin utils directory they created and I

704
00:30:48,790 --> 00:30:50,740
created the sim link in that one so I

705
00:30:50,740 --> 00:30:51,880
just copied it from there

706
00:30:51,880 --> 00:30:55,300
so that that's not very nice at that

707
00:30:55,300 --> 00:30:59,860
particular point and yes and I don't

708
00:30:59,860 --> 00:31:01,510
know if I went all from the start

709
00:31:01,510 --> 00:31:03,480
whether they would have started and

710
00:31:03,480 --> 00:31:06,580
certainly more work to be to be done at

711
00:31:06,580 --> 00:31:08,950
that point certainly I think there's

712
00:31:08,950 --> 00:31:12,010
been I'd certainly say it would be a

713
00:31:12,010 --> 00:31:14,200
good chance for chromium because I think

714
00:31:14,200 --> 00:31:16,180
I think some Google internal people have

715
00:31:16,180 --> 00:31:17,740
you I think that's I think they may even

716
00:31:17,740 --> 00:31:22,840
use ll deef on x86 and said of the

717
00:31:22,840 --> 00:31:24,080
Microsoft link with

718
00:31:24,080 --> 00:31:29,870
so yeah okay so LTO the actual think

719
00:31:29,870 --> 00:31:32,150
this the Lincoln actually doesn't play

720
00:31:32,150 --> 00:31:35,180
much for part in LTO so it's a no it's

721
00:31:35,180 --> 00:31:36,860
called link time optimization but it's

722
00:31:36,860 --> 00:31:39,020
really only link time optimization the

723
00:31:39,020 --> 00:31:40,940
link is all the linkers responsibility

724
00:31:40,940 --> 00:31:42,530
that is to collect the bit code files

725
00:31:42,530 --> 00:31:44,270
together and spit them back at the

726
00:31:44,270 --> 00:31:49,310
unplug the decode gen so and so yes LTO

727
00:31:49,310 --> 00:31:51,590
is supported in lld but it doesn't

728
00:31:51,590 --> 00:31:53,300
actually do much more than just saying i

729
00:31:53,300 --> 00:31:55,460
see this file this bit code spit it back

730
00:31:55,460 --> 00:32:03,760
at the LTO code generator yeah okay yes

731
00:32:06,100 --> 00:32:10,930
so well okay so it's under quite heavy

732
00:32:10,930 --> 00:32:14,090
development so it's often yeah okay so

733
00:32:14,090 --> 00:32:16,070
I've got okay sorry I've got to repeat

734
00:32:16,070 --> 00:32:17,360
the question what is that what what is

735
00:32:17,360 --> 00:32:21,950
in LD like to develop on so um so it's

736
00:32:21,950 --> 00:32:24,830
quite a dense codebase there's not

737
00:32:24,830 --> 00:32:27,020
actually that many lines of code but

738
00:32:27,020 --> 00:32:32,930
it's quite heavy C++ 11 and it's quite

739
00:32:32,930 --> 00:32:35,270
you know that almost everything every

740
00:32:35,270 --> 00:32:37,760
sort of bit of code does something it's

741
00:32:37,760 --> 00:32:40,790
so it's quite quite quite it does take a

742
00:32:40,790 --> 00:32:43,310
while to get your head around what the

743
00:32:43,310 --> 00:32:45,140
various dependencies are so you know

744
00:32:45,140 --> 00:32:46,640
what I mentioned about everything being

745
00:32:46,640 --> 00:32:48,830
read once one of the difficulties about

746
00:32:48,830 --> 00:32:50,780
that is that you you can well one of the

747
00:32:50,780 --> 00:32:51,890
most difficult bits about linker

748
00:32:51,890 --> 00:32:54,500
development is knowing what assumptions

749
00:32:54,500 --> 00:32:56,300
that you can make at each point in the

750
00:32:56,300 --> 00:32:58,220
link because at every point you're going

751
00:32:58,220 --> 00:33:00,470
from an abstract representation to a

752
00:33:00,470 --> 00:33:03,740
concrete one and you might find that

753
00:33:03,740 --> 00:33:05,330
you've broken the assumptions that

754
00:33:05,330 --> 00:33:08,350
something's made later on or before so

755
00:33:08,350 --> 00:33:13,130
so I think from based on on my sort of

756
00:33:13,130 --> 00:33:14,240
experience with other linkers it's

757
00:33:14,240 --> 00:33:18,170
slightly harder to get started with just

758
00:33:18,170 --> 00:33:21,170
because it's it's quite dense but once

759
00:33:21,170 --> 00:33:23,180
you kind of crack that I'll get your

760
00:33:23,180 --> 00:33:25,070
mind around the model that it's using

761
00:33:25,070 --> 00:33:27,200
it's fairly fast because it's not that

762
00:33:27,200 --> 00:33:28,820
much of a lines of code you can search

763
00:33:28,820 --> 00:33:30,290
around it very quickly that type of

764
00:33:30,290 --> 00:33:34,520
thing and and it's quite it's very

765
00:33:34,520 --> 00:33:36,380
actively refactored so

766
00:33:36,380 --> 00:33:38,419
it's probably going to be quite

767
00:33:38,419 --> 00:33:41,240
difficult to maintain downstream patches

768
00:33:41,240 --> 00:33:43,730
other than if it's quite easy to

769
00:33:43,730 --> 00:33:46,850
maintain downstream features so for

770
00:33:46,850 --> 00:33:47,960
example if you wanted to downstream

771
00:33:47,960 --> 00:33:49,880
feature where you kind of said call out

772
00:33:49,880 --> 00:33:51,710
to a function implements my downstream

773
00:33:51,710 --> 00:33:53,539
feature and don't touch any of the

774
00:33:53,539 --> 00:33:55,250
generic bits of the code you'll probably

775
00:33:55,250 --> 00:33:57,980
be fine but if you start saying oh I've

776
00:33:57,980 --> 00:34:00,169
got to add a bit to a data structure you

777
00:34:00,169 --> 00:34:01,760
might find that a week's time someone's

778
00:34:01,760 --> 00:34:04,820
completely changed that so yes it is it

779
00:34:04,820 --> 00:34:08,690
isn't not great for code stability up

780
00:34:08,690 --> 00:34:10,969
right right now I think but but that's

781
00:34:10,969 --> 00:34:12,800
got a good and about thinks it means it

782
00:34:12,800 --> 00:34:18,800
does move forward quite fast yeah okay

783
00:34:18,800 --> 00:34:21,440
and so from what I know that but olicity

784
00:34:21,440 --> 00:34:24,889
question was who's investing in lld so

785
00:34:24,889 --> 00:34:30,469
when in terms of companies I as as far

786
00:34:30,469 --> 00:34:31,820
as I know that's that's public

787
00:34:31,820 --> 00:34:36,260
information that is that the main

788
00:34:36,260 --> 00:34:41,300
maintainer that is at Google and I think

789
00:34:41,300 --> 00:34:43,129
there's some work from Sony Computer

790
00:34:43,129 --> 00:34:45,800
Entertainment a guest I think that's

791
00:34:45,800 --> 00:34:49,399
also sort of done from the BSD base at

792
00:34:49,399 --> 00:34:50,810
the absolutely and there's quite a lot

793
00:34:50,810 --> 00:34:53,060
of people coming from the BSD community

794
00:34:53,060 --> 00:34:55,040
so I would say largely from companies

795
00:34:55,040 --> 00:34:56,750
there's people from processing

796
00:34:56,750 --> 00:34:59,930
manufacturers so Lennar oh arm layout 64

797
00:34:59,930 --> 00:35:02,060
type thing I think the main MIPS

798
00:35:02,060 --> 00:35:04,460
maintained I think I I don't know

799
00:35:04,460 --> 00:35:06,859
whether he works for MIPS but I it's

800
00:35:06,859 --> 00:35:10,700
very possible that he does so besides

801
00:35:10,700 --> 00:35:12,800
the process and manufacturers wanting

802
00:35:12,800 --> 00:35:14,210
support for their own architecture so

803
00:35:14,210 --> 00:35:17,270
I'd say the usual sort of suspects of

804
00:35:17,270 --> 00:35:19,090
the large companies that sort of thing

805
00:35:19,090 --> 00:35:21,710
but yeah that other than that look at

806
00:35:21,710 --> 00:35:22,790
the maintain is look at their email

807
00:35:22,790 --> 00:35:26,890
addresses is more II would say okay

808
00:35:32,589 --> 00:35:53,089
yeah well all say so you you're you're

809
00:35:53,089 --> 00:35:56,089
at a higher risk it in theory it's all

810
00:35:56,089 --> 00:36:00,650
there and it's working but you you

811
00:36:00,650 --> 00:36:03,319
basically have if you have LD PFD you've

812
00:36:03,319 --> 00:36:05,180
got everyone in this matter

813
00:36:05,180 --> 00:36:06,829
every man and his dog linking Linux

814
00:36:06,829 --> 00:36:08,900
applications every day with it so you've

815
00:36:08,900 --> 00:36:11,630
got a huge test space full of people so

816
00:36:11,630 --> 00:36:13,309
it's just at the moment your risk is

817
00:36:13,309 --> 00:36:14,660
higher because the user base is lower

818
00:36:14,660 --> 00:36:19,339
and so it's a it quite quantifying how

819
00:36:19,339 --> 00:36:22,130
high that risk is I I don't know

820
00:36:22,130 --> 00:36:24,259
certainly with the amount of BSD things

821
00:36:24,259 --> 00:36:26,029
that are being linked right now I would

822
00:36:26,029 --> 00:36:28,970
say certainly on amd64 out 64 if your

823
00:36:28,970 --> 00:36:30,289
applications not trying to do anything

824
00:36:30,289 --> 00:36:32,779
too clever and bits that gives Linkous

825
00:36:32,779 --> 00:36:34,910
trouble or often complicated linker

826
00:36:34,910 --> 00:36:37,640
scripts large amounts of thread local

827
00:36:37,640 --> 00:36:40,369
storage or weird uses of local storage

828
00:36:40,369 --> 00:36:44,749
or trying to directly place things with

829
00:36:44,749 --> 00:36:47,180
you know so if you if you're doing a

830
00:36:47,180 --> 00:36:49,009
pretty much vanilla Linux application or

831
00:36:49,009 --> 00:36:50,660
shared library you shouldn't have any

832
00:36:50,660 --> 00:36:52,609
problems it's when you're using special

833
00:36:52,609 --> 00:36:54,920
linker features is probably where you'll

834
00:36:54,920 --> 00:36:56,089
find that you'll start getting problems

835
00:36:56,089 --> 00:36:58,970
is why I would say okay so I think Oh

836
00:36:58,970 --> 00:37:02,230
got one more happen

837
00:37:12,859 --> 00:37:15,630
and so the question is can you mix

838
00:37:15,630 --> 00:37:18,150
linked developments a link a Linux shape

839
00:37:18,150 --> 00:37:21,809
library with one linker and end date and

840
00:37:21,809 --> 00:37:23,460
then say your downstream user uses a

841
00:37:23,460 --> 00:37:24,960
different linker to actually use it and

842
00:37:24,960 --> 00:37:28,710
so yes I have tested that at least in

843
00:37:28,710 --> 00:37:30,869
interactively generally that should work

844
00:37:30,869 --> 00:37:35,160
because and it's at most point your your

845
00:37:35,160 --> 00:37:37,950
and when you actually link against the

846
00:37:37,950 --> 00:37:40,020
dynamic library pretty much all that the

847
00:37:40,020 --> 00:37:42,030
downstream linker I'll call it the one

848
00:37:42,030 --> 00:37:44,369
that the user uses is just reading the

849
00:37:44,369 --> 00:37:47,400
symbol table and as long as lld has

850
00:37:47,400 --> 00:37:49,140
created the symbol table correctly in

851
00:37:49,140 --> 00:37:51,569
the versions correctly then all of the

852
00:37:51,569 --> 00:37:53,460
real work of generating all of the code

853
00:37:53,460 --> 00:37:54,990
to interface with that library is done

854
00:37:54,990 --> 00:37:58,410
by the user's linker so it's fairly low

855
00:37:58,410 --> 00:38:01,440
risk that that's the case so yeah that

856
00:38:01,440 --> 00:38:03,540
should be it should be fine okay I

857
00:38:03,540 --> 00:38:04,950
probably best stop that now go and

858
00:38:04,950 --> 00:38:06,119
change over the next one but thank you

859
00:38:06,119 --> 00:38:07,310
very much listening

860
00:38:07,310 --> 00:38:12,590
[Applause]

