1
00:00:05,309 --> 00:00:09,610
okay okay so my name is Luka I work at

2
00:00:09,610 --> 00:00:12,250
Korres in Berlin and actually the leader

3
00:00:12,250 --> 00:00:14,320
of the containers team and today we are

4
00:00:14,320 --> 00:00:16,289
going to talk about something which is

5
00:00:16,289 --> 00:00:19,000
the topic in here containers and

6
00:00:19,000 --> 00:00:21,070
especially like you have a cluster who

7
00:00:21,070 --> 00:00:22,720
at this cluster you have your containers

8
00:00:22,720 --> 00:00:23,800
and what you want to do with that

9
00:00:23,800 --> 00:00:25,810
running it fine

10
00:00:25,810 --> 00:00:27,250
we're going to touch into the details

11
00:00:27,250 --> 00:00:29,650
the internal stuff so our kubernetes is

12
00:00:29,650 --> 00:00:33,250
actually running your containers so

13
00:00:33,250 --> 00:00:35,980
first things a step back in kubernetes

14
00:00:35,980 --> 00:00:37,420
you are not actually running rollo

15
00:00:37,420 --> 00:00:39,819
containers you are running pods pods are

16
00:00:39,819 --> 00:00:42,729
the basic eunuch of execution and they

17
00:00:42,729 --> 00:00:44,949
tie together multiple containers in a

18
00:00:44,949 --> 00:00:47,859
single service then kubernetes tastes

19
00:00:47,859 --> 00:00:49,659
curve basically scheduling them and

20
00:00:49,659 --> 00:00:52,479
doing some other tasks around like how

21
00:00:52,479 --> 00:00:54,280
to recover from failure and how to scale

22
00:00:54,280 --> 00:00:57,219
your containers your pods in your

23
00:00:57,219 --> 00:01:01,479
cluster cool how does this work there

24
00:01:01,479 --> 00:01:03,760
are basically three main entities here

25
00:01:03,760 --> 00:01:06,490
first you have a cluster of course and

26
00:01:06,490 --> 00:01:08,049
there is a schedule in this cluster

27
00:01:08,049 --> 00:01:11,260
which is the source of trot trot which

28
00:01:11,260 --> 00:01:13,360
is taking care of scheduling your poles

29
00:01:13,360 --> 00:01:16,480
around then you have workers and on each

30
00:01:16,480 --> 00:01:18,400
of these workers there is one entity

31
00:01:18,400 --> 00:01:19,900
called the cubelet which is a

32
00:01:19,900 --> 00:01:21,700
long-running game on a service which is

33
00:01:21,700 --> 00:01:24,040
there and it takes care of receiving

34
00:01:24,040 --> 00:01:26,260
order from the scheduler and then there

35
00:01:26,260 --> 00:01:27,490
is another entities which is the

36
00:01:27,490 --> 00:01:29,050
container runtime which is kind of a

37
00:01:29,050 --> 00:01:31,180
dumb stock concept which is the one that

38
00:01:31,180 --> 00:01:33,640
is really running things so whenever you

39
00:01:33,640 --> 00:01:36,160
say kubernetes i want to run this pod

40
00:01:36,160 --> 00:01:39,010
kubernetes goes the scheduler takes on

41
00:01:39,010 --> 00:01:40,960
decision and then delegates to the

42
00:01:40,960 --> 00:01:43,450
cubelet the cubelet is running on some

43
00:01:43,450 --> 00:01:45,880
specific node and then cubelet goes and

44
00:01:45,880 --> 00:01:48,250
say look container run time which is

45
00:01:48,250 --> 00:01:50,260
typically docker I want to run this

46
00:01:50,260 --> 00:01:52,300
container all together and then docker

47
00:01:52,300 --> 00:01:54,190
goes and it trans actually your

48
00:01:54,190 --> 00:02:00,400
containers so it's pretty pretty easy to

49
00:02:00,400 --> 00:02:02,260
visualize it a bit better it works in

50
00:02:02,260 --> 00:02:04,510
this way there is always some

51
00:02:04,510 --> 00:02:05,950
distributed key-value store which

52
00:02:05,950 --> 00:02:08,830
typically it's a CD and that's where the

53
00:02:08,830 --> 00:02:12,340
logic were the scheduling part is

54
00:02:12,340 --> 00:02:13,540
happening then there are components

55
00:02:13,540 --> 00:02:15,579
which take care of forwarding and

56
00:02:15,579 --> 00:02:16,900
propagating this information to other

57
00:02:16,900 --> 00:02:17,670
company

58
00:02:17,670 --> 00:02:19,830
in this case there are the scheduler in

59
00:02:19,830 --> 00:02:21,630
the API service and then you have

60
00:02:21,630 --> 00:02:23,670
multiple workers with these cubelets

61
00:02:23,670 --> 00:02:25,260
which receive this kind of order and

62
00:02:25,260 --> 00:02:29,220
just execute the container in the pod we

63
00:02:29,220 --> 00:02:32,569
did not start the timer but it's okay

64
00:02:32,660 --> 00:02:36,530
saying seeing it as a hierarchy actually

65
00:02:36,530 --> 00:02:38,819
cubelet on whatever node let's say

66
00:02:38,819 --> 00:02:42,720
another one and then you actually are

67
00:02:42,720 --> 00:02:45,239
this container runtime running for

68
00:02:45,239 --> 00:02:47,099
example docker and then your pod get

69
00:02:47,099 --> 00:02:49,110
executed with all the resources inside

70
00:02:49,110 --> 00:02:51,239
of it so in this case let's say that you

71
00:02:51,239 --> 00:02:53,190
have your service in there which

72
00:02:53,190 --> 00:02:55,019
contains two application application one

73
00:02:55,019 --> 00:02:57,110
which is the main application and some

74
00:02:57,110 --> 00:03:01,019
sidecar fine I think it's pretty clear

75
00:03:01,019 --> 00:03:04,590
up to here from here on we go more into

76
00:03:04,590 --> 00:03:07,739
the technical part a reality when you

77
00:03:07,739 --> 00:03:10,170
are running your kubernetes node you

78
00:03:10,170 --> 00:03:12,150
have all these entities which are in

79
00:03:12,150 --> 00:03:14,910
there typically you run it with docker

80
00:03:14,910 --> 00:03:16,620
which means that you have a cubelet

81
00:03:16,620 --> 00:03:18,680
which is receiving some order and then

82
00:03:18,680 --> 00:03:21,120
forwarding disorder to the docker Damali

83
00:03:21,120 --> 00:03:23,190
docker engine which then in turn has

84
00:03:23,190 --> 00:03:25,109
some internal components for example

85
00:03:25,109 --> 00:03:26,670
container D which take care of some

86
00:03:26,670 --> 00:03:28,440
other part of the execution and then

87
00:03:28,440 --> 00:03:30,540
internally delegate something else for

88
00:03:30,540 --> 00:03:32,489
example to Rossi in order to run

89
00:03:32,489 --> 00:03:34,950
containers and then there is some magic

90
00:03:34,950 --> 00:03:37,500
going around it in order to group this

91
00:03:37,500 --> 00:03:40,500
container together this is let's say

92
00:03:40,500 --> 00:03:42,170
historically kubernetes

93
00:03:42,170 --> 00:03:45,299
dannaker OS we had some kind of troubles

94
00:03:45,299 --> 00:03:47,250
let's say and we all said some kind of

95
00:03:47,250 --> 00:03:50,850
opinions those opinions were there are

96
00:03:50,850 --> 00:03:53,220
too many components in here some of them

97
00:03:53,220 --> 00:03:55,769
until recently were not supporting auto

98
00:03:55,769 --> 00:03:57,720
blades checkpointing or restoring and

99
00:03:57,720 --> 00:03:59,730
most of those are like long-running

100
00:03:59,730 --> 00:04:01,260
services and they are tied to the

101
00:04:01,260 --> 00:04:03,450
lifetime of your container of your pods

102
00:04:03,450 --> 00:04:05,579
so we come up with an alternative which

103
00:04:05,579 --> 00:04:07,440
is like okay let's write a different

104
00:04:07,440 --> 00:04:09,510
container runtime so we keep everything

105
00:04:09,510 --> 00:04:11,340
the schedule and the cubelet as it is

106
00:04:11,340 --> 00:04:14,190
and we just swap the bottom layer of it

107
00:04:14,190 --> 00:04:17,130
and that's where we are rocket we

108
00:04:17,130 --> 00:04:18,418
implemented rocket and then we

109
00:04:18,418 --> 00:04:21,660
integrated it with kubernetes how we did

110
00:04:21,660 --> 00:04:23,970
it is basically with a single run time a

111
00:04:23,970 --> 00:04:26,130
single process instead of long-running

112
00:04:26,130 --> 00:04:29,580
daemon and we also found out another

113
00:04:29,580 --> 00:04:30,380
Internet

114
00:04:30,380 --> 00:04:32,750
ting point which is what do you have

115
00:04:32,750 --> 00:04:34,970
arrayed in your system system D maybe

116
00:04:34,970 --> 00:04:36,590
you don't like it maybe you like it is

117
00:04:36,590 --> 00:04:38,900
there it has interesting feature so

118
00:04:38,900 --> 00:04:40,930
let's use it instead of implementing and

119
00:04:40,930 --> 00:04:44,170
demons so this is the usual

120
00:04:44,170 --> 00:04:46,790
configuration of a kubernetes cluster on

121
00:04:46,790 --> 00:04:49,100
you it rocket and then at that point we

122
00:04:49,100 --> 00:04:50,810
had some problem like ok but there are

123
00:04:50,810 --> 00:04:52,370
some tools that really wants to talk to

124
00:04:52,370 --> 00:04:53,900
some kind of demon and we don't have

125
00:04:53,900 --> 00:04:55,310
anymore a demon to provide this

126
00:04:55,310 --> 00:04:57,940
information so we also have some kind of

127
00:04:57,940 --> 00:05:00,710
lateral components we just provide this

128
00:05:00,710 --> 00:05:02,690
kind of redundant information if you

129
00:05:02,690 --> 00:05:05,000
want to query into that which is fine

130
00:05:05,000 --> 00:05:07,820
and then at that point we'd like okay

131
00:05:07,820 --> 00:05:10,880
already to implementation is getting the

132
00:05:10,880 --> 00:05:13,070
code is getting a bit dirty and messy to

133
00:05:13,070 --> 00:05:14,720
follow because there are different logic

134
00:05:14,720 --> 00:05:17,630
and different code path fine let's sit

135
00:05:17,630 --> 00:05:19,040
down and have a discussion and the

136
00:05:19,040 --> 00:05:21,530
discussion resulting in CRI which is the

137
00:05:21,530 --> 00:05:23,450
new container runtime interface which is

138
00:05:23,450 --> 00:05:25,280
being developed right now in kubernetes

139
00:05:25,280 --> 00:05:28,250
the idea is the cubelet really wants

140
00:05:28,250 --> 00:05:30,440
some kind of fine-grain control on what

141
00:05:30,440 --> 00:05:32,600
is going to be executed on every single

142
00:05:32,600 --> 00:05:35,270
node and we want to move away more or

143
00:05:35,270 --> 00:05:37,730
less to the previous part of it where

144
00:05:37,730 --> 00:05:41,150
the world just this big sink pod logic

145
00:05:41,150 --> 00:05:43,100
routine into something which is more

146
00:05:43,100 --> 00:05:45,440
granular like cubelet tell me which

147
00:05:45,440 --> 00:05:47,480
image you want to fetch from where and

148
00:05:47,480 --> 00:05:50,000
which container you want to schedule to

149
00:05:50,000 --> 00:05:52,910
run in which in which pod which which

150
00:05:52,910 --> 00:05:54,560
resources you want in it and that's it

151
00:05:54,560 --> 00:05:56,840
and then we already have like some kind

152
00:05:56,840 --> 00:05:58,970
of protocol a standard standard

153
00:05:58,970 --> 00:06:00,380
specification in order to that this

154
00:06:00,380 --> 00:06:02,720
component talks together which is a RPC

155
00:06:02,720 --> 00:06:05,030
which is an RPC mechanism based on

156
00:06:05,030 --> 00:06:09,830
protocol and this is au CRI came to life

157
00:06:09,830 --> 00:06:12,020
it is currently experimental so not run

158
00:06:12,020 --> 00:06:14,060
it in production right now it is

159
00:06:14,060 --> 00:06:16,250
targeted for some kind of alpha beta

160
00:06:16,250 --> 00:06:19,250
feature in 1.6 1.6 and it it will

161
00:06:19,250 --> 00:06:21,010
definitely happen probably this year

162
00:06:21,010 --> 00:06:26,600
definitely probably again trying to

163
00:06:26,600 --> 00:06:28,520
visualize it a bit better the idea now

164
00:06:28,520 --> 00:06:30,260
is we don't have any more or the

165
00:06:30,260 --> 00:06:31,880
services talking together we don't have

166
00:06:31,880 --> 00:06:33,680
a different code path there is a single

167
00:06:33,680 --> 00:06:37,130
way of talking from the cubelet to the

168
00:06:37,130 --> 00:06:39,020
runtime service and actually there are

169
00:06:39,020 --> 00:06:41,060
another part which is splitting up the

170
00:06:41,060 --> 00:06:43,180
image fashion from the con

171
00:06:43,180 --> 00:06:45,310
running part all of this is going

172
00:06:45,310 --> 00:06:47,919
through gr PC you just have to implement

173
00:06:47,919 --> 00:06:50,530
end points and being able to speak this

174
00:06:50,530 --> 00:06:52,900
job PC protocol and then something in

175
00:06:52,900 --> 00:06:54,820
this case the run tech service will take

176
00:06:54,820 --> 00:06:57,280
care of scheduling your pods this comes

177
00:06:57,280 --> 00:07:01,000
with some other benefits which is if you

178
00:07:01,000 --> 00:07:02,800
really don't like Doppler or if you

179
00:07:02,800 --> 00:07:05,590
don't like rocket that's fine just build

180
00:07:05,590 --> 00:07:07,600
your own implement your own there are

181
00:07:07,600 --> 00:07:09,370
already several implementation for that

182
00:07:09,370 --> 00:07:12,639
and they cover different specific topic

183
00:07:12,639 --> 00:07:15,430
let's say so for example with rocket

184
00:07:15,430 --> 00:07:16,930
that was our design that was our

185
00:07:16,930 --> 00:07:18,970
approach but then you have like upper

186
00:07:18,970 --> 00:07:20,949
hyper which is taking care of I want to

187
00:07:20,949 --> 00:07:23,229
really schedule pods which are built on

188
00:07:23,229 --> 00:07:28,240
machine and that's it how do you how do

189
00:07:28,240 --> 00:07:30,340
you find more about what I just told you

190
00:07:30,340 --> 00:07:32,050
well you go online and you join the

191
00:07:32,050 --> 00:07:33,910
kubernetes community that we are part of

192
00:07:33,910 --> 00:07:37,240
or you grab me outside so just go on get

193
00:07:37,240 --> 00:07:39,160
up check the kubernetes code this is

194
00:07:39,160 --> 00:07:41,500
done as part of signal which is the

195
00:07:41,500 --> 00:07:43,150
special interest group inside the

196
00:07:43,150 --> 00:07:44,860
kubernetes community taking care of all

197
00:07:44,860 --> 00:07:48,250
these low-level details we have mailing

198
00:07:48,250 --> 00:07:50,289
list we have slack channel we are video

199
00:07:50,289 --> 00:07:53,260
calls and that's it and chorus is also

200
00:07:53,260 --> 00:07:54,580
hiring in early in new york san

201
00:07:54,580 --> 00:07:58,020
francisco so grab us

