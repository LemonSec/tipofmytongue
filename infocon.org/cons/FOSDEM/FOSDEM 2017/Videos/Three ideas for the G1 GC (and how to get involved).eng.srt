1
00:00:04,750 --> 00:00:08,320
all right hi everyone I'm Eric thanks

2
00:00:08,320 --> 00:00:10,930
well for coming today I want to talk

3
00:00:10,930 --> 00:00:13,510
about free ideas for the g1 you see so

4
00:00:13,510 --> 00:00:14,830
the garbage collection theme will

5
00:00:14,830 --> 00:00:16,960
continue for another half an hour it's

6
00:00:16,960 --> 00:00:18,220
great to see more garbage collection

7
00:00:18,220 --> 00:00:21,099
talks here and I work at the Oracle as a

8
00:00:21,099 --> 00:00:23,039
member of the hotspot GC team

9
00:00:23,039 --> 00:00:25,659
so first the oracle mandatory side I

10
00:00:25,659 --> 00:00:27,070
have to show you this and I will leave

11
00:00:27,070 --> 00:00:28,539
it hanging up there for a few or four

12
00:00:28,539 --> 00:00:34,840
seconds and then we can move on so I go

13
00:00:34,840 --> 00:00:36,520
rather quickly for this and if you have

14
00:00:36,520 --> 00:00:38,140
questions please ask I'd rather have

15
00:00:38,140 --> 00:00:40,450
ESPN sort of interactive session than me

16
00:00:40,450 --> 00:00:42,070
just blasting through the slides and no

17
00:00:42,070 --> 00:00:44,380
one following alone but we are quick

18
00:00:44,380 --> 00:00:48,160
into the g1 in 2017 we look at the free

19
00:00:48,160 --> 00:00:50,370
ideas throughput remember sets

20
00:00:50,370 --> 00:00:52,540
rebuilding remembers has come currently

21
00:00:52,540 --> 00:00:54,730
and also Perl full collection I will

22
00:00:54,730 --> 00:00:56,290
finish off about how you guys can

23
00:00:56,290 --> 00:00:58,080
contribute and get involved

24
00:00:58,080 --> 00:01:00,820
so first Who am I I did my master's

25
00:01:00,820 --> 00:01:02,560
thesis on load balancing during garbage

26
00:01:02,560 --> 00:01:03,820
collection in over a decade

27
00:01:03,820 --> 00:01:06,189
I worked in the Oracle GC team for four

28
00:01:06,189 --> 00:01:09,280
years on g1 primarily the last two years

29
00:01:09,280 --> 00:01:12,900
and one also review we're an open it ok

30
00:01:12,900 --> 00:01:15,880
so let's start off with a quick intro to

31
00:01:15,880 --> 00:01:20,140
g1 in 2017 so d1 is actually rather old

32
00:01:20,140 --> 00:01:21,790
by now the pub the paper was published

33
00:01:21,790 --> 00:01:25,000
in 2004 we got experimental support in

34
00:01:25,000 --> 00:01:28,210
year k-6 update 14 official support in

35
00:01:28,210 --> 00:01:31,870
the ADK up 7 up to 4 it has all the

36
00:01:31,870 --> 00:01:36,100
latest pieces in year decay you 121 and

37
00:01:36,100 --> 00:01:37,990
it is about to become the default in

38
00:01:37,990 --> 00:01:40,870
here it came 9 so with this please be

39
00:01:40,870 --> 00:01:42,909
very if you read all blog posts all

40
00:01:42,909 --> 00:01:45,400
documentation sold explanations it has

41
00:01:45,400 --> 00:01:46,600
changed quite a lot over the years

42
00:01:46,600 --> 00:01:48,940
actually and it continues to change as

43
00:01:48,940 --> 00:01:52,330
we will see so G 1 divides the Java heap

44
00:01:52,330 --> 00:01:54,790
into regions will be seen our examples

45
00:01:54,790 --> 00:01:56,409
from San Dovan from the bada

46
00:01:56,409 --> 00:01:59,380
GC from IBM so there multiple regions

47
00:01:59,380 --> 00:02:01,270
and objects will start out to be

48
00:02:01,270 --> 00:02:04,689
allocated in the Eden regions when the

49
00:02:04,689 --> 00:02:06,159
ingredients are full

50
00:02:06,159 --> 00:02:08,530
John collection will occur and live

51
00:02:08,530 --> 00:02:10,299
objects will be moved to a survivor area

52
00:02:10,299 --> 00:02:12,610
and this will free up the inner regions

53
00:02:12,610 --> 00:02:16,010
so obvious can be allocated there again

54
00:02:16,010 --> 00:02:19,950
as more and more survival regions gets

55
00:02:19,950 --> 00:02:22,379
full those who also have to become

56
00:02:22,379 --> 00:02:24,510
evacuated and the objects will move on

57
00:02:24,510 --> 00:02:28,890
to the orange old regions this is called

58
00:02:28,890 --> 00:02:31,019
a mixed collection I'm sorry this is a

59
00:02:31,019 --> 00:02:33,359
junk relation still done after a while

60
00:02:33,359 --> 00:02:35,129
the heap will start to fill up with more

61
00:02:35,129 --> 00:02:38,040
and more old regions so if g1 doesn't do

62
00:02:38,040 --> 00:02:39,569
anything the heap will become full

63
00:02:39,569 --> 00:02:42,120
eventually now fortunately we do you

64
00:02:42,120 --> 00:02:44,069
wanna sir concurrent more phase so we

65
00:02:44,069 --> 00:02:45,629
start to look through all the live

66
00:02:45,629 --> 00:02:48,109
objects on the heap and marked mass live

67
00:02:48,109 --> 00:02:51,060
when the concurrent mark is finished g1

68
00:02:51,060 --> 00:02:53,700
can now collect old regions as well as

69
00:02:53,700 --> 00:02:56,250
survive region in regions and free up

70
00:02:56,250 --> 00:03:02,370
even more space and after a couple of

71
00:03:02,370 --> 00:03:05,040
mix collections the heap will consist of

72
00:03:05,040 --> 00:03:07,079
a few old regions and quite a lot of

73
00:03:07,079 --> 00:03:11,879
free space so these are the free sort of

74
00:03:11,879 --> 00:03:14,970
phases for the one that the g1 moves

75
00:03:14,970 --> 00:03:17,189
around is the state diagram you will

76
00:03:17,189 --> 00:03:19,319
start out by with young collections and

77
00:03:19,319 --> 00:03:21,120
then you'll see an initial more

78
00:03:21,120 --> 00:03:22,949
collection which will start junk

79
00:03:22,949 --> 00:03:24,780
collections along with a concurrent

80
00:03:24,780 --> 00:03:26,220
marking cycle that will keep on running

81
00:03:26,220 --> 00:03:28,379
concurrently with your program once the

82
00:03:28,379 --> 00:03:30,510
concurrent marking cycle is finished you

83
00:03:30,510 --> 00:03:32,609
will have a mixed collection that will

84
00:03:32,609 --> 00:03:34,470
run a couple of mixed collections not

85
00:03:34,470 --> 00:03:37,409
just one and once enough heap has been

86
00:03:37,409 --> 00:03:39,930
freed up it will return to once again to

87
00:03:39,930 --> 00:03:45,000
junk collections so with that let's dive

88
00:03:45,000 --> 00:03:47,849
deeper into some barriers and the very

89
00:03:47,849 --> 00:03:51,389
hardcore Giza code so given is divided

90
00:03:51,389 --> 00:03:53,370
into regions and they can definitely be

91
00:03:53,370 --> 00:03:55,019
pointers between objects in different

92
00:03:55,019 --> 00:03:57,299
regions so in this example we have

93
00:03:57,299 --> 00:03:59,069
region a in region B and there are

94
00:03:59,069 --> 00:04:00,540
definitely objects referring to each

95
00:04:00,540 --> 00:04:02,120
others in different regions

96
00:04:02,120 --> 00:04:07,079
now if G one needs to evacuate not into

97
00:04:07,079 --> 00:04:10,169
another region like this little one over

98
00:04:10,169 --> 00:04:12,479
here well it's law ever wants to be

99
00:04:12,479 --> 00:04:14,879
evacuated over here there is a slight

100
00:04:14,879 --> 00:04:18,358
issue if you do this because this object

101
00:04:18,358 --> 00:04:21,149
over here is still pointing to the old

102
00:04:21,149 --> 00:04:24,540
object if you don't update this object

103
00:04:24,540 --> 00:04:27,870
point to the recently evacuated object

104
00:04:27,870 --> 00:04:31,440
well the program will crush won't reach

105
00:04:31,440 --> 00:04:34,410
this memory so we need to solve this

106
00:04:34,410 --> 00:04:38,400
somehow and the way this is done in v1

107
00:04:38,400 --> 00:04:42,090
is we are remembered such so for region

108
00:04:42,090 --> 00:04:46,350
B we will keep track of incoming

109
00:04:46,350 --> 00:04:48,870
pointers to that region so you will say

110
00:04:48,870 --> 00:04:51,090
that for this region there is one point

111
00:04:51,090 --> 00:04:53,460
or incoming from region a you will find

112
00:04:53,460 --> 00:04:55,170
it if you follow the first entry in this

113
00:04:55,170 --> 00:05:00,450
list that point says object when we run

114
00:05:00,450 --> 00:05:03,510
evacuate the object we can first move

115
00:05:03,510 --> 00:05:07,770
the live object over to region C then we

116
00:05:07,770 --> 00:05:10,320
can check maybe there's some pointers to

117
00:05:10,320 --> 00:05:12,930
this object we can follow the point from

118
00:05:12,930 --> 00:05:15,060
remember set after it

119
00:05:15,060 --> 00:05:16,800
so now points correctly to the recently

120
00:05:16,800 --> 00:05:23,430
moved object now this is all good but

121
00:05:23,430 --> 00:05:26,250
this abstraction or feature comes with a

122
00:05:26,250 --> 00:05:26,640
cost

123
00:05:26,640 --> 00:05:30,390
as it always in DC so if you in your

124
00:05:30,390 --> 00:05:32,220
yarmulke will have a simple right you

125
00:05:32,220 --> 00:05:35,130
have o dot x equals y we're always an

126
00:05:35,130 --> 00:05:38,130
object X is a feel that object and Y is

127
00:05:38,130 --> 00:05:41,130
another object it could look like this

128
00:05:41,130 --> 00:05:44,700
for example this is the object oh here's

129
00:05:44,700 --> 00:05:51,480
2 X field and here's the object Y so now

130
00:05:51,480 --> 00:05:53,220
something interesting happens this will

131
00:05:53,220 --> 00:05:58,290
create the edge from the object oh dude

132
00:05:58,290 --> 00:06:00,240
okay why because we're writing an

133
00:06:00,240 --> 00:06:03,570
address for the orbit Y into the field X

134
00:06:03,570 --> 00:06:05,730
in topic oh that means there is now an

135
00:06:05,730 --> 00:06:09,240
incoming pointer to region B so if you

136
00:06:09,240 --> 00:06:15,690
would ever move this object then the

137
00:06:15,690 --> 00:06:18,930
field Oh dot X over here must be updated

138
00:06:18,930 --> 00:06:23,640
as well so this again is sold using the

139
00:06:23,640 --> 00:06:25,770
remember set which will keep an pointer

140
00:06:25,770 --> 00:06:30,990
to the incoming object and then we can

141
00:06:30,990 --> 00:06:33,180
safely move that object if you want to

142
00:06:33,180 --> 00:06:35,940
but the magic of course is how does that

143
00:06:35,940 --> 00:06:38,050
work

144
00:06:38,050 --> 00:06:41,200
so there are more that goes on than what

145
00:06:41,200 --> 00:06:42,520
you see it's not what you get when you

146
00:06:42,520 --> 00:06:44,950
do a riot in Java you're thinking of

147
00:06:44,950 --> 00:06:46,750
you're thinking of it as a symbol writer

148
00:06:46,750 --> 00:06:48,460
field an object but there's a lot more

149
00:06:48,460 --> 00:06:51,400
going on behind the scenes so for g1 and

150
00:06:51,400 --> 00:06:53,170
this is different per collector usually

151
00:06:53,170 --> 00:06:54,280
all the different collectors have their

152
00:06:54,280 --> 00:06:56,440
own mechanism for whatever they want to

153
00:06:56,440 --> 00:06:58,450
do and obit figure gets written to in an

154
00:06:58,450 --> 00:07:00,160
object but we give one there is

155
00:07:00,160 --> 00:07:01,380
something called the pre write barrier

156
00:07:01,380 --> 00:07:03,730
that has to do with marking and then

157
00:07:03,730 --> 00:07:05,920
this the post write barrier that has to

158
00:07:05,920 --> 00:07:10,360
do with with keeping the remember sets

159
00:07:10,360 --> 00:07:13,300
in place so as you can see we will not

160
00:07:13,300 --> 00:07:16,050
focus on this right now and not today

161
00:07:16,050 --> 00:07:18,250
there's another interesting talk in

162
00:07:18,250 --> 00:07:19,600
discussion but we will look at me to the

163
00:07:19,600 --> 00:07:21,910
post right barrier so just looking at

164
00:07:21,910 --> 00:07:24,880
this we quickly realize that this is

165
00:07:24,880 --> 00:07:28,630
quite a lot this with not just a little

166
00:07:28,630 --> 00:07:31,420
going on behind the scenes but pretty

167
00:07:31,420 --> 00:07:35,020
much so we want to make this smaller why

168
00:07:35,020 --> 00:07:37,540
we want to do this well if you are

169
00:07:37,540 --> 00:07:39,940
running g1 as alex is just show you if

170
00:07:39,940 --> 00:07:42,040
your timeless and christine's and hromas

171
00:07:42,040 --> 00:07:45,220
talked a few minutes ago this will

172
00:07:45,220 --> 00:07:46,690
impact your throughput there are more

173
00:07:46,690 --> 00:07:49,060
these are quite a few instructions this

174
00:07:49,060 --> 00:07:50,670
is just a store but then you have

175
00:07:50,670 --> 00:07:52,420
plentiful more instructions to execute

176
00:07:52,420 --> 00:07:56,380
that will hurt your fruit put quite a

177
00:07:56,380 --> 00:07:59,980
bit so one idea that is proposed on the

178
00:07:59,980 --> 00:08:02,380
mailing list is to replace this don't

179
00:08:02,380 --> 00:08:05,470
don't do this we can move it down to a

180
00:08:05,470 --> 00:08:07,540
barrier of this size with a post vampire

181
00:08:07,540 --> 00:08:10,480
this is much much smaller or we can just

182
00:08:10,480 --> 00:08:13,690
move to this and keep it at that

183
00:08:13,690 --> 00:08:16,420
now if it were this simple that we could

184
00:08:16,420 --> 00:08:18,940
just change the barrier don't want not

185
00:08:18,940 --> 00:08:21,550
just do it what everything in GC has a

186
00:08:21,550 --> 00:08:24,910
price every feature you will pay for in

187
00:08:24,910 --> 00:08:27,850
some way somehow so the problem with

188
00:08:27,850 --> 00:08:30,460
this is that even though your throughput

189
00:08:30,460 --> 00:08:33,490
will greatly improve as we have seen in

190
00:08:33,490 --> 00:08:36,610
some prototypes you will have to do some

191
00:08:36,610 --> 00:08:39,100
more work during the process and this is

192
00:08:39,100 --> 00:08:42,580
a trade-off I do you want the shorter

193
00:08:42,580 --> 00:08:45,760
pauses and it's like lower throughput or

194
00:08:45,760 --> 00:08:47,500
you want the higher throughput and a

195
00:08:47,500 --> 00:08:50,330
potentially longer pause

196
00:08:50,330 --> 00:08:53,120
personally I do think this is the way to

197
00:08:53,120 --> 00:08:56,600
go I think the the frupa the impact will

198
00:08:56,600 --> 00:08:59,209
outweigh a slight decrease in force time

199
00:08:59,209 --> 00:09:01,220
a slight increase in forced time and I'm

200
00:09:01,220 --> 00:09:03,620
not even sure that the post time will

201
00:09:03,620 --> 00:09:05,450
increase that much so this is an idea

202
00:09:05,450 --> 00:09:07,760
that's out people are contributing to

203
00:09:07,760 --> 00:09:09,110
this idea and starting to experiment

204
00:09:09,110 --> 00:09:12,620
with it and look into it and we will now

205
00:09:12,620 --> 00:09:15,019
move on to the next idea which is about

206
00:09:15,019 --> 00:09:16,130
rebuilding their memberships

207
00:09:16,130 --> 00:09:19,610
concurrently so we talked a bit about

208
00:09:19,610 --> 00:09:21,950
this data structure they remember set

209
00:09:21,950 --> 00:09:24,019
that keeps track of incoming pointers to

210
00:09:24,019 --> 00:09:28,459
a region now the problem with I remember

211
00:09:28,459 --> 00:09:29,839
set is that if you have a lot of

212
00:09:29,839 --> 00:09:31,940
incoming pointers to a region while the

213
00:09:31,940 --> 00:09:33,980
remember set will start to grow and grow

214
00:09:33,980 --> 00:09:38,350
and grow and grow and this will take up

215
00:09:38,350 --> 00:09:41,600
memory and increase your footprint of

216
00:09:41,600 --> 00:09:45,649
your process and the if you think about

217
00:09:45,649 --> 00:09:47,839
this some more if there is a lot of

218
00:09:47,839 --> 00:09:51,260
incoming pointers to a region like this

219
00:09:51,260 --> 00:09:53,000
there are point you know this is ever

220
00:09:53,000 --> 00:09:55,339
objects in this video seems to be very

221
00:09:55,339 --> 00:09:56,600
popular they are pointing to student

222
00:09:56,600 --> 00:09:59,920
from everywhere well

223
00:10:22,120 --> 00:10:27,279
okay sorry guys

224
00:10:29,019 --> 00:10:33,770
there's no VGA on my laptop any longer

225
00:10:33,770 --> 00:10:37,180
[Laughter]

226
00:10:37,180 --> 00:10:40,069
so for this object in video we're

227
00:10:40,069 --> 00:10:41,569
looking at it seems to be pretty popular

228
00:10:41,569 --> 00:10:42,829
because there's a lots of income

229
00:10:42,829 --> 00:10:44,839
pointers from the rest of the hippies

230
00:10:44,839 --> 00:10:48,139
region well what first probably means

231
00:10:48,139 --> 00:10:49,970
they're the most of objects here on LY

232
00:10:49,970 --> 00:10:51,500
they're probably being kept alive by

233
00:10:51,500 --> 00:10:53,600
other obvious on the heap so looking at

234
00:10:53,600 --> 00:10:56,629
this region remember we had to remember

235
00:10:56,629 --> 00:10:58,639
that we needed that if we were to

236
00:10:58,639 --> 00:11:01,339
evacuate objects in this region now if

237
00:11:01,339 --> 00:11:03,860
most of these orbits are live we don't

238
00:11:03,860 --> 00:11:05,750
will not gain much by evacuate in this

239
00:11:05,750 --> 00:11:07,730
region see the only free space we have

240
00:11:07,730 --> 00:11:09,949
is here which isn't that much so

241
00:11:09,949 --> 00:11:11,540
evacuating this would be costly we're

242
00:11:11,540 --> 00:11:13,879
just moving live objects around there's

243
00:11:13,879 --> 00:11:14,839
no point in that

244
00:11:14,839 --> 00:11:16,459
when we evacuate the region we want to

245
00:11:16,459 --> 00:11:18,019
free up memory so you can allocate in it

246
00:11:18,019 --> 00:11:20,120
and we don't we don't really free up a

247
00:11:20,120 --> 00:11:24,019
lot by a vacuum israelian so what we

248
00:11:24,019 --> 00:11:25,790
want to do instead is just drop the

249
00:11:25,790 --> 00:11:27,709
remember steps we only need them if

250
00:11:27,709 --> 00:11:28,939
you're gonna move this video and there's

251
00:11:28,939 --> 00:11:30,860
no point in keeping them around if

252
00:11:30,860 --> 00:11:32,959
you're not going to move what we solve

253
00:11:32,959 --> 00:11:36,529
this region so then they concurrent

254
00:11:36,529 --> 00:11:38,839
market cycles to store to run and they

255
00:11:38,839 --> 00:11:41,089
will run and run and time will pass and

256
00:11:41,089 --> 00:11:43,100
objects will change pointers will change

257
00:11:43,100 --> 00:11:46,670
and suddenly well now this region looks

258
00:11:46,670 --> 00:11:50,089
kind of suitable for evacuation but now

259
00:11:50,089 --> 00:11:51,529
there's a problem again we just drop to

260
00:11:51,529 --> 00:11:53,839
remember sets so we can't move the

261
00:11:53,839 --> 00:11:55,970
objects now with they're only a few what

262
00:11:55,970 --> 00:11:57,709
once they're alive and we can't

263
00:11:57,709 --> 00:11:59,329
unfortunately move them because they

264
00:11:59,329 --> 00:12:01,220
don't have any remember sets but now we

265
00:12:01,220 --> 00:12:04,370
want to move them again so we can solve

266
00:12:04,370 --> 00:12:07,490
that by doing another card marks article

267
00:12:07,490 --> 00:12:09,230
and just wait a bit longer until we

268
00:12:09,230 --> 00:12:10,730
start to move objects in this region and

269
00:12:10,730 --> 00:12:13,339
during that card mark cycle we will

270
00:12:13,339 --> 00:12:15,559
traverse all the logs on the heap which

271
00:12:15,559 --> 00:12:17,149
means we will traverse all the pointers

272
00:12:17,149 --> 00:12:19,699
going into this region which means we

273
00:12:19,699 --> 00:12:21,529
now have the information for rebuilding

274
00:12:21,529 --> 00:12:25,009
and remember set the concurrent mark

275
00:12:25,009 --> 00:12:27,079
cycle will follow all these pointers and

276
00:12:27,079 --> 00:12:28,459
then they can add them as entries into

277
00:12:28,459 --> 00:12:30,649
the remembered set and once this

278
00:12:30,649 --> 00:12:32,180
concurrent mark cycle is complete

279
00:12:32,180 --> 00:12:34,310
well we now have a region we can

280
00:12:34,310 --> 00:12:36,400
evacuate with remember that once again

281
00:12:36,400 --> 00:12:40,010
yeah so this is the second idea that is

282
00:12:40,010 --> 00:12:41,090
out on the mailing lists

283
00:12:41,090 --> 00:12:43,490
no one has picked it up yet so if you're

284
00:12:43,490 --> 00:12:46,340
eager to do some GC hacking feel free to

285
00:12:46,340 --> 00:12:50,660
get in touch I think this can have quite

286
00:12:50,660 --> 00:12:54,280
a great impact on the footprint of g1

287
00:12:54,280 --> 00:12:59,810
and then look quickly at the maybe

288
00:12:59,810 --> 00:13:01,430
slightly bit more straightforward idea

289
00:13:01,430 --> 00:13:03,740
which is the last one so parallel full

290
00:13:03,740 --> 00:13:06,860
collection so g1 can't fall back to a

291
00:13:06,860 --> 00:13:09,190
food you see when the heuristics fail a

292
00:13:09,190 --> 00:13:12,620
food you see is in g1 considered a

293
00:13:12,620 --> 00:13:14,840
failure mode we don't want a full GC to

294
00:13:14,840 --> 00:13:16,880
happen it shouldn't have to happen if

295
00:13:16,880 --> 00:13:18,350
the heuristics are working correctly but

296
00:13:18,350 --> 00:13:21,050
can happen it is currently a single

297
00:13:21,050 --> 00:13:24,080
forum and that is of course really bad

298
00:13:24,080 --> 00:13:27,470
for performance so we just want to

299
00:13:27,470 --> 00:13:29,780
rewrite it in parallel and have it be

300
00:13:29,780 --> 00:13:32,570
faster one when the eristic still fail

301
00:13:32,570 --> 00:13:36,110
and work is underway on this by stuff is

302
00:13:36,110 --> 00:13:38,780
in the Oracle DC team but if you want to

303
00:13:38,780 --> 00:13:40,940
help out and contribute and do please

304
00:13:40,940 --> 00:13:46,460
get in touch with either me or Stefan so

305
00:13:46,460 --> 00:13:48,560
how to contribute to this development in

306
00:13:48,560 --> 00:13:51,830
general and get involved well working on

307
00:13:51,830 --> 00:13:53,600
the garbage collector inside the VM in

308
00:13:53,600 --> 00:13:56,120
hotspot is quite daunting if you haven't

309
00:13:56,120 --> 00:13:58,880
been into virtual machine development

310
00:13:58,880 --> 00:14:00,500
before it takes a little bit of time to

311
00:14:00,500 --> 00:14:02,180
ramp up and over the thousands of lines

312
00:14:02,180 --> 00:14:04,310
of code and how they all interact and

313
00:14:04,310 --> 00:14:08,360
how it's all working so you can if you

314
00:14:08,360 --> 00:14:09,800
have this kind of experience or if you

315
00:14:09,800 --> 00:14:11,870
want to learn feel free to get the code

316
00:14:11,870 --> 00:14:13,580
from open DK start hang out on the

317
00:14:13,580 --> 00:14:15,350
hospital to see their mailing lists and

318
00:14:15,350 --> 00:14:17,660
you can definitely help out one of these

319
00:14:17,660 --> 00:14:21,050
ideas but maybe a bit more realistic way

320
00:14:21,050 --> 00:14:24,350
to get to help out is to essentially

321
00:14:24,350 --> 00:14:25,880
test your applications with early access

322
00:14:25,880 --> 00:14:28,250
build we put a lot of improvements in

323
00:14:28,250 --> 00:14:31,370
the year k9 so if you can provide us

324
00:14:31,370 --> 00:14:33,650
feedback like oh you wrote the heuristic

325
00:14:33,650 --> 00:14:35,620
this way or the policies change this way

326
00:14:35,620 --> 00:14:38,120
if you tell us it's working great my

327
00:14:38,120 --> 00:14:39,650
application well that's great thank you

328
00:14:39,650 --> 00:14:41,960
we love the personal feedback as well

329
00:14:41,960 --> 00:14:43,940
but more commonly you become on the main

330
00:14:43,940 --> 00:14:44,380
Lisa said

331
00:14:44,380 --> 00:14:46,420
no it doesn't work here the heuristics

332
00:14:46,420 --> 00:14:48,970
failed so and that we also want to know

333
00:14:48,970 --> 00:14:50,440
because then we can change it and make

334
00:14:50,440 --> 00:14:52,420
sure it's good to go when we make a

335
00:14:52,420 --> 00:14:56,050
general release you can also help out by

336
00:14:56,050 --> 00:14:58,420
helping other users on hotspot does DC

337
00:14:58,420 --> 00:15:00,520
just use a toe communicated toe up net I

338
00:15:00,520 --> 00:15:03,010
know there are a lot of experienced DC

339
00:15:03,010 --> 00:15:04,450
tuning guys in the community

340
00:15:04,450 --> 00:15:07,210
I know some of you run really large

341
00:15:07,210 --> 00:15:09,460
heaps you have been all down the

342
00:15:09,460 --> 00:15:12,010
different pitfalls and dangers before so

343
00:15:12,010 --> 00:15:15,250
you can please help out other newcomers

344
00:15:15,250 --> 00:15:16,780
to the community if they ask for

345
00:15:16,780 --> 00:15:19,480
performance advice or if they need help

346
00:15:19,480 --> 00:15:22,360
with how to run a particular GC what do

347
00:15:22,360 --> 00:15:23,050
they mean

348
00:15:23,050 --> 00:15:27,070
etc and finally if you want to feel like

349
00:15:27,070 --> 00:15:29,470
writing some java code you can

350
00:15:29,470 --> 00:15:31,030
definitely contribute tests or

351
00:15:31,030 --> 00:15:32,560
benchmarks these are usually written in

352
00:15:32,560 --> 00:15:35,290
Java we have a little too cold Gator egg

353
00:15:35,290 --> 00:15:37,510
which helps you write your tests and if

354
00:15:37,510 --> 00:15:39,970
you have a particular small application

355
00:15:39,970 --> 00:15:43,480
that exercise may be particularly havior

356
00:15:43,480 --> 00:15:45,580
of the GC then please consider

357
00:15:45,580 --> 00:15:47,920
contributing that as a benchmark if it

358
00:15:47,920 --> 00:15:50,590
can show some strange behavior or a

359
00:15:50,590 --> 00:15:55,440
corner case or something and with that

360
00:15:55,440 --> 00:15:57,860
thank you very much

361
00:15:57,860 --> 00:16:05,150
[Applause]

362
00:16:05,150 --> 00:16:11,610
yes this is the so questions please ask

363
00:16:11,610 --> 00:16:21,840
questions if you have hello my name is

364
00:16:21,840 --> 00:16:23,220
Vulcan thanks so much for the

365
00:16:23,220 --> 00:16:27,120
presentation while the Shannon dog guys

366
00:16:27,120 --> 00:16:30,600
and girls were talking about their GC

367
00:16:30,600 --> 00:16:32,940
algorithm they were strictly having a

368
00:16:32,940 --> 00:16:35,760
target audience like they mentioned

369
00:16:35,760 --> 00:16:37,440
about like these are the existing

370
00:16:37,440 --> 00:16:39,030
solutions and reason that we are doing

371
00:16:39,030 --> 00:16:42,360
such a new approach is because we were

372
00:16:42,360 --> 00:16:45,090
particularly targeting such a user case

373
00:16:45,090 --> 00:16:45,900
due yet

374
00:16:45,900 --> 00:16:47,670
do you also really have something in

375
00:16:47,670 --> 00:16:49,320
your mind or do you want to be as

376
00:16:49,320 --> 00:16:50,670
general as possible

377
00:16:50,670 --> 00:16:54,780
so for Jiwon we do look at there's a

378
00:16:54,780 --> 00:16:57,600
post time goal which you can set and it

379
00:16:57,600 --> 00:16:59,730
will try to adjust as good as possible

380
00:16:59,730 --> 00:17:01,050
to meet a post on goal there are no

381
00:17:01,050 --> 00:17:02,850
guarantees it's not a hard real time

382
00:17:02,850 --> 00:17:05,640
collector but it will try but it has

383
00:17:05,640 --> 00:17:08,430
been we have put it through some pretty

384
00:17:08,430 --> 00:17:10,079
big tests it has been running on one

385
00:17:10,079 --> 00:17:12,480
terabyte heaps hey that's been run on

386
00:17:12,480 --> 00:17:14,400
some rather small heaps around 4

387
00:17:14,400 --> 00:17:16,800
megabyte as well obviously there will be

388
00:17:16,800 --> 00:17:21,150
trade-offs as with any collector but we

389
00:17:21,150 --> 00:17:24,119
do try to make it as automatic as

390
00:17:24,119 --> 00:17:26,040
possible you can just specify the post

391
00:17:26,040 --> 00:17:28,319
time and it will run with as good as few

392
00:17:28,319 --> 00:17:29,760
put as possible

393
00:17:29,760 --> 00:17:31,650
that might be true for your application

394
00:17:31,650 --> 00:17:33,270
you might need some tuning or we might

395
00:17:33,270 --> 00:17:35,820
need to update or heuristics but that is

396
00:17:35,820 --> 00:17:37,560
the goal so it tries to be pretty

397
00:17:37,560 --> 00:17:40,530
general and try to get the maximum

398
00:17:40,530 --> 00:17:42,300
throughput were still keeping the post

399
00:17:42,300 --> 00:17:45,830
time as good as possible

400
00:17:47,120 --> 00:17:50,179
I requested you can feel free to ask

401
00:17:50,179 --> 00:17:51,799
about the other collectors as well if

402
00:17:51,799 --> 00:17:53,750
you want to or anything else in the open

403
00:17:53,750 --> 00:17:59,059
yet okay our last is exactly the same

404
00:17:59,059 --> 00:18:01,690
question I wanted to ask gender guys but

405
00:18:01,690 --> 00:18:04,279
so the question is what's the story now

406
00:18:04,279 --> 00:18:08,000
with the with the API for pluggable GCS

407
00:18:08,000 --> 00:18:10,400
so I know there is I think there's a

408
00:18:10,400 --> 00:18:12,440
proposal with from Roman and somebody

409
00:18:12,440 --> 00:18:21,020
else right now GC is pretty hardwired to

410
00:18:21,020 --> 00:18:23,929
the rest of the of the VM and he pretty

411
00:18:23,929 --> 00:18:25,820
much you want her to plug it in and you

412
00:18:25,820 --> 00:18:28,010
see pretty much need to glue it in many

413
00:18:28,010 --> 00:18:30,049
parts and I think the goal was to made a

414
00:18:30,049 --> 00:18:33,169
transparent API to make pluggable can

415
00:18:33,169 --> 00:18:34,640
you well you are from Oracle you are the

416
00:18:34,640 --> 00:18:36,919
author of the of the chap maybe you guys

417
00:18:36,919 --> 00:18:40,750
can comment on what's the story they're

418
00:18:42,640 --> 00:18:45,320
trying to separate out and this is all

419
00:18:45,320 --> 00:18:47,630
internally in the VM so if you work on a

420
00:18:47,630 --> 00:18:49,940
core protection algorithm inside the JV

421
00:18:49,940 --> 00:18:53,059
I mean the C++ code I mean how can you

422
00:18:53,059 --> 00:18:56,539
main maintain them as Kristine shop

423
00:18:56,539 --> 00:18:58,250
there we have quite a few collectors so

424
00:18:58,250 --> 00:19:01,580
it's quite a maintenance burden for to

425
00:19:01,580 --> 00:19:03,020
take care of all the lines of code and

426
00:19:03,020 --> 00:19:05,510
so we want to start it maybe tear them

427
00:19:05,510 --> 00:19:07,010
apart a bit more so they don't get

428
00:19:07,010 --> 00:19:09,200
intermixed and Roman made a great

429
00:19:09,200 --> 00:19:12,559
proposal on a start and we have a small

430
00:19:12,559 --> 00:19:14,750
API today they collect the deep API but

431
00:19:14,750 --> 00:19:16,760
that doesn't capture all of it so this

432
00:19:16,760 --> 00:19:18,679
is rather internal for the VM

433
00:19:18,679 --> 00:19:21,380
development but yeah I think Rama's

434
00:19:21,380 --> 00:19:22,520
thought is great we have Eric in the

435
00:19:22,520 --> 00:19:24,980
team is doing is template magic right

436
00:19:24,980 --> 00:19:30,169
now and is almost there with with

437
00:19:30,169 --> 00:19:33,289
templating up lots of the API so it will

438
00:19:33,289 --> 00:19:35,330
it will hopefully become a lot easier to

439
00:19:35,330 --> 00:19:41,299
maintain multiple Jesus in the JVM it's

440
00:19:41,299 --> 00:19:42,890
not much that I can add so I'd fight

441
00:19:42,890 --> 00:19:44,990
this jab I'm basically waiting now for

442
00:19:44,990 --> 00:19:47,720
dedicate time to to fully open up so

443
00:19:47,720 --> 00:19:49,370
that it I can start working out I do

444
00:19:49,370 --> 00:19:52,429
have a prototype that covers like half

445
00:19:52,429 --> 00:19:53,990
of the stuff that I want to abstract

446
00:19:53,990 --> 00:19:58,220
into an API yeah that's what it in jdk

447
00:19:58,220 --> 00:20:01,480
10 comes I'm studying

448
00:20:04,360 --> 00:20:07,360
thank you guys

449
00:20:07,360 --> 00:20:09,520
okay well I will be around for the rest

450
00:20:09,520 --> 00:20:11,080
of the day and also tomorrow so yes come

451
00:20:11,080 --> 00:20:12,550
up and talk to me if any more questions

452
00:20:12,550 --> 00:20:13,480
thank you

453
00:20:13,480 --> 00:20:20,680
[Applause]

