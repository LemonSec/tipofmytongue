1
00:02:15,760 --> 00:02:23,049
shut out anyone reasonably fast can you

2
00:02:23,049 --> 00:02:26,980
hear me now okay fine

3
00:02:26,980 --> 00:02:33,430
okay so I'm going to show you for gaming

4
00:02:33,430 --> 00:02:34,660
and I'm going to show you how to do a

5
00:02:34,660 --> 00:02:36,400
rate program in this language that I

6
00:02:36,400 --> 00:02:37,989
developed with along with other people

7
00:02:37,989 --> 00:02:39,819
called foo talk I'm going to show you

8
00:02:39,819 --> 00:02:41,950
how we cow new language cannot all be

9
00:02:41,950 --> 00:02:43,569
useful by showing how it easily

10
00:02:43,569 --> 00:02:46,120
interoperate with Python and I'm going

11
00:02:46,120 --> 00:02:47,920
to talk a little about how the performs

12
00:02:47,920 --> 00:02:49,239
of this language is compared hand

13
00:02:49,239 --> 00:02:53,140
written GPU code okay first thing that's

14
00:02:53,140 --> 00:02:54,549
two kinds of parallelism the one that

15
00:02:54,549 --> 00:02:55,840
most people think about when they say

16
00:02:55,840 --> 00:02:58,329
parallelism is tough parallelism may you

17
00:02:58,329 --> 00:03:00,069
spawn a threat of the thread can go and

18
00:03:00,069 --> 00:03:01,780
do whatever on some data and you can

19
00:03:01,780 --> 00:03:03,129
spawn another threat we can go and do

20
00:03:03,129 --> 00:03:05,019
something entirely all sums on some may

21
00:03:05,019 --> 00:03:05,980
be the same day that may be something

22
00:03:05,980 --> 00:03:07,540
else but the two threads are clearly

23
00:03:07,540 --> 00:03:09,700
independent of each other their

24
00:03:09,700 --> 00:03:11,410
parallelism is where I take the same

25
00:03:11,410 --> 00:03:13,540
function or do the same operation on

26
00:03:13,540 --> 00:03:16,900
multiple elements of some date set so

27
00:03:16,900 --> 00:03:19,209
the simplest examples is what we in

28
00:03:19,209 --> 00:03:21,340
function program hold the map which

29
00:03:21,340 --> 00:03:23,590
takes two arguments a function and an

30
00:03:23,590 --> 00:03:25,389
array and just you back a new array

31
00:03:25,389 --> 00:03:26,829
where that function has been applied

32
00:03:26,829 --> 00:03:28,569
each element of the array so I'm going

33
00:03:28,569 --> 00:03:31,060
to use in infotrac with us notation for

34
00:03:31,060 --> 00:03:32,560
add function applications without

35
00:03:32,560 --> 00:03:34,299
parentheses so this says apply the

36
00:03:34,299 --> 00:03:37,569
function map to F and this array all

37
00:03:37,569 --> 00:03:39,730
right no nothing magical going on here

38
00:03:39,730 --> 00:03:41,650
array programming is an instance of

39
00:03:41,650 --> 00:03:43,599
parallelism and you've probably already

40
00:03:43,599 --> 00:03:45,940
done do because numpad for Python and

41
00:03:45,940 --> 00:03:48,609
similar Lari to other languages is an

42
00:03:48,609 --> 00:03:51,819
instance of array programming what we do

43
00:03:51,819 --> 00:03:53,620
Bach operations so we just say we want

44
00:03:53,620 --> 00:03:55,720
an array of 10 elements each of those

45
00:03:55,720 --> 00:03:57,930
elements we want to multiply by 2 and

46
00:03:57,930 --> 00:04:00,160
keeps giving us back a new array and

47
00:04:00,160 --> 00:04:01,720
then we can multiply these two arrays

48
00:04:01,720 --> 00:04:03,459
point-wise and then some of the results

49
00:04:03,459 --> 00:04:05,919
as a dot product doing here but this

50
00:04:05,919 --> 00:04:08,400
idea of doing bulk operations on

51
00:04:08,400 --> 00:04:10,599
untraced which can be very large is a

52
00:04:10,599 --> 00:04:12,310
very good way of to heroism in a way

53
00:04:12,310 --> 00:04:13,780
that's easy for humans to think about

54
00:04:13,780 --> 00:04:15,849
and very efficient on massively parallel

55
00:04:15,849 --> 00:04:19,298
hardware like GPUs array programming is

56
00:04:19,298 --> 00:04:20,529
act a pretty old model

57
00:04:20,529 --> 00:04:24,099
it's was seen first APL which was not

58
00:04:24,099 --> 00:04:26,590
popular for some reason he wasn't

59
00:04:26,590 --> 00:04:28,380
especially portable so

60
00:04:28,380 --> 00:04:32,070
let's uh let's do anymore I feel this is

61
00:04:32,070 --> 00:04:33,510
retire which you can type with ordinary

62
00:04:33,510 --> 00:04:36,930
keyboard is it's a very small language

63
00:04:36,930 --> 00:04:38,760
it's kind of a it looks a little bit

64
00:04:38,760 --> 00:04:40,920
like standard email or Haskell or some

65
00:04:40,920 --> 00:04:44,280
other generic function language if

66
00:04:44,280 --> 00:04:46,440
you've seen ot for we can define a

67
00:04:46,440 --> 00:04:48,390
function that takes this input an array

68
00:04:48,390 --> 00:04:50,970
of length in and give suspect and the

69
00:04:50,970 --> 00:04:53,670
array of length in and just as to

70
00:04:53,670 --> 00:04:56,370
trailer element of that array or we can

71
00:04:56,370 --> 00:04:58,800
find a function that sums an array using

72
00:04:58,800 --> 00:05:02,130
reduce which is a function language

73
00:05:02,130 --> 00:05:06,180
lingo for uses function to turn this

74
00:05:06,180 --> 00:05:08,430
array of values integers on one value

75
00:05:08,430 --> 00:05:11,190
concept it just puts this function if

76
00:05:11,190 --> 00:05:13,050
it's this operate between each of the

77
00:05:13,050 --> 00:05:14,520
elements on the race so that's that's um

78
00:05:14,520 --> 00:05:16,940
sorry and this function can be any

79
00:05:16,940 --> 00:05:19,200
binary function it has to be associative

80
00:05:19,200 --> 00:05:20,730
to be parallel but let's not worry about

81
00:05:20,730 --> 00:05:23,520
that that's a little esoteric the nice

82
00:05:23,520 --> 00:05:25,710
thing of like I said is very freedom so

83
00:05:25,710 --> 00:05:27,360
when you find a function that it has

84
00:05:27,360 --> 00:05:29,190
some parallelism inside you can still

85
00:05:29,190 --> 00:05:31,290
use it inside of another peril context

86
00:05:31,290 --> 00:05:33,270
so you can do map while we use the sum

87
00:05:33,270 --> 00:05:34,890
function that we define up here so now

88
00:05:34,890 --> 00:05:36,300
we have two layers of parallelism you

89
00:05:36,300 --> 00:05:38,250
are map on the outside and refuge on the

90
00:05:38,250 --> 00:05:40,050
inside that's called nested parallelism

91
00:05:40,050 --> 00:05:41,850
and its comparative rare because it's

92
00:05:41,850 --> 00:05:44,340
triggered compile and one thing that the

93
00:05:44,340 --> 00:05:46,050
from a compiler will do is turn this

94
00:05:46,050 --> 00:05:47,820
little parallelism which is neither

95
00:05:47,820 --> 00:05:50,370
humans and nice and composable in flat

96
00:05:50,370 --> 00:05:51,930
parallelism which is only kind of

97
00:05:51,930 --> 00:05:53,430
hardware can be handle so you have your

98
00:05:53,430 --> 00:05:55,650
own level of parallelism that's tricky

99
00:05:55,650 --> 00:05:58,080
and it won't finis an explanation of how

100
00:05:58,080 --> 00:05:59,670
to do that or fortunately you can fit in

101
00:05:59,670 --> 00:06:02,160
at twenty minutes or so I won't show

102
00:06:02,160 --> 00:06:05,180
that much of about that futon also has

103
00:06:05,180 --> 00:06:07,830
sequela loops it's a few language so

104
00:06:07,830 --> 00:06:09,390
there's no destructive update so you can

105
00:06:09,390 --> 00:06:12,060
kind of fake them by saying okay start

106
00:06:12,060 --> 00:06:15,120
with a with the value X equal to one

107
00:06:15,120 --> 00:06:18,420
then run this number of iterations and

108
00:06:18,420 --> 00:06:20,850
for iteration computer new value X with

109
00:06:20,850 --> 00:06:23,580
this equation so multiply X with I plus

110
00:06:23,580 --> 00:06:26,340
one and then run the loop again until I

111
00:06:26,340 --> 00:06:31,710
hits n and then X is is returned so it's

112
00:06:31,710 --> 00:06:33,360
also just a sitting sugar for chain

113
00:06:33,360 --> 00:06:34,530
recursive function if you use the

114
00:06:34,530 --> 00:06:35,660
function programming

115
00:06:35,660 --> 00:06:38,460
arrays can be constructed in rhythm

116
00:06:38,460 --> 00:06:42,060
building constructs iota which gives us

117
00:06:42,060 --> 00:06:42,420
back

118
00:06:42,420 --> 00:06:43,980
and it's us just like range in pylons

119
00:06:43,980 --> 00:06:45,600
Egyptians began there in range of a

120
00:06:45,600 --> 00:06:47,970
figures of integers or replicas which

121
00:06:47,970 --> 00:06:49,920
copies some of you and the Irish

122
00:06:49,920 --> 00:06:51,390
replicate can also be released but we

123
00:06:51,390 --> 00:06:55,530
won't i won't be using that so aren't an

124
00:06:55,530 --> 00:06:57,420
example this is a man brought sit or

125
00:06:57,420 --> 00:06:59,940
this is a actualization of part

126
00:06:59,940 --> 00:07:03,120
Mandelbrot said the way to create these

127
00:07:03,120 --> 00:07:04,890
nice graphics is just to applaud this a

128
00:07:04,890 --> 00:07:07,530
simple function written in Python to a

129
00:07:07,530 --> 00:07:09,090
bunch of comic numbers and you can turn

130
00:07:09,090 --> 00:07:11,700
this function busts sees how many times

131
00:07:11,700 --> 00:07:13,950
this comic number can go through this

132
00:07:13,950 --> 00:07:15,630
loop without this condition becoming

133
00:07:15,630 --> 00:07:17,820
true and with this part of point zero

134
00:07:17,820 --> 00:07:20,820
neither forever and you just return how

135
00:07:20,820 --> 00:07:22,110
many times you went through the loop and

136
00:07:22,110 --> 00:07:23,670
you can use that number to turned into a

137
00:07:23,670 --> 00:07:25,650
pretty car and then you can get a nice

138
00:07:25,650 --> 00:07:27,000
visualization but it's basically just

139
00:07:27,000 --> 00:07:28,440
boy starts running this pretty simple

140
00:07:28,440 --> 00:07:30,690
solution and but since you run the same

141
00:07:30,690 --> 00:07:32,550
phone on a whole bunch of comics numbers

142
00:07:32,550 --> 00:07:35,460
at once you can do that in parallel in

143
00:07:35,460 --> 00:07:37,920
pi it would look like this where we have

144
00:07:37,920 --> 00:07:40,980
an array of complex numbers and then we

145
00:07:40,980 --> 00:07:43,980
do some some weird operations with for

146
00:07:43,980 --> 00:07:45,780
each of these some complex numbers we

147
00:07:45,780 --> 00:07:48,570
compare them to this is the stop

148
00:07:48,570 --> 00:07:51,450
condition and then we figure out which

149
00:07:51,450 --> 00:07:54,360
ones did not stop yet and then we for

150
00:07:54,360 --> 00:07:56,430
those that didn't have didn't stop yet

151
00:07:56,430 --> 00:07:59,370
we set the escape count to the loop

152
00:07:59,370 --> 00:08:00,720
counter and it's very complicated and

153
00:08:00,720 --> 00:08:03,240
the original simple controller we had

154
00:08:03,240 --> 00:08:05,370
before in our mathematical definition is

155
00:08:05,370 --> 00:08:07,800
kind of gone and obscured but invoice

156
00:08:07,800 --> 00:08:09,870
now not only is it unreadable is also so

157
00:08:09,870 --> 00:08:11,060
and that's what I care the most about

158
00:08:11,060 --> 00:08:12,990
because every iteration of this loop

159
00:08:12,990 --> 00:08:15,000
which is usually on the order of maybe

160
00:08:15,000 --> 00:08:17,400
200 200 could cut whatever you want but

161
00:08:17,400 --> 00:08:19,920
it's usually very large we write three

162
00:08:19,920 --> 00:08:22,530
arrays so that means we have found a

163
00:08:22,530 --> 00:08:24,450
memory speed we can't see writes these

164
00:08:24,450 --> 00:08:27,170
arrays that might be very large memory

165
00:08:27,170 --> 00:08:29,460
with a problem because memory is very

166
00:08:29,460 --> 00:08:33,600
very slow and also just how slow in a

167
00:08:33,600 --> 00:08:36,390
moment in foods that looks like this we

168
00:08:36,390 --> 00:08:38,729
have our sequential function I showed

169
00:08:38,729 --> 00:08:42,780
you before which will be in Python

170
00:08:42,780 --> 00:08:44,130
before it just is right to written food

171
00:08:44,130 --> 00:08:46,860
truck that's the same thing let me just

172
00:08:46,860 --> 00:08:48,810
map that not two-dimensional array of

173
00:08:48,810 --> 00:08:50,700
complex numbers and it's two dimensional

174
00:08:50,700 --> 00:08:52,260
but you really use this normal

175
00:08:52,260 --> 00:08:54,570
visualization of the complex plane it

176
00:08:54,570 --> 00:08:56,279
could be one-dimensional if you

177
00:08:56,279 --> 00:09:00,569
the interests so the interesting thing

178
00:09:00,569 --> 00:09:02,339
here is that so really that's only a one

179
00:09:02,339 --> 00:09:04,829
every written because we just overall

180
00:09:04,829 --> 00:09:06,839
complex numbers on this simple scalar

181
00:09:06,839 --> 00:09:09,300
function which don't use any array so we

182
00:09:09,300 --> 00:09:10,620
can skip it all in registers

183
00:09:10,620 --> 00:09:12,180
that's a compiler to here but that's

184
00:09:12,180 --> 00:09:15,319
something that the program can rely on

185
00:09:15,319 --> 00:09:17,339
the primitive values are kept in

186
00:09:17,339 --> 00:09:19,040
registers and at the end a

187
00:09:19,040 --> 00:09:20,670
two-dimensional array is written to

188
00:09:20,670 --> 00:09:25,410
memory so the moments difference between

189
00:09:25,410 --> 00:09:27,839
the two styles is something like this I

190
00:09:27,839 --> 00:09:30,050
mean they both scale right it will as a

191
00:09:30,050 --> 00:09:32,879
number of complex number working on

192
00:09:32,879 --> 00:09:35,970
increases don't do why they talk about I

193
00:09:35,970 --> 00:09:37,319
mean this is an umpire's I whether you

194
00:09:37,319 --> 00:09:41,009
write a lot of arrays it's hot at 12

195
00:09:41,009 --> 00:09:42,749
times faster than sequential code that's

196
00:09:42,749 --> 00:09:44,639
all this is not this is not Python code

197
00:09:44,639 --> 00:09:48,149
this is cstp code written in a non pie

198
00:09:48,149 --> 00:09:51,120
style but it's not Python code

199
00:09:51,120 --> 00:09:52,980
we're in futhark style where we don't

200
00:09:52,980 --> 00:09:54,240
have all these memory accesses it

201
00:09:54,240 --> 00:09:56,879
becomes 350 times faster and sequential

202
00:09:56,879 --> 00:10:00,209
code sequential C code there's a

203
00:10:00,209 --> 00:10:01,230
significant difference and that's

204
00:10:01,230 --> 00:10:03,360
entirely down to this what's the circle

205
00:10:03,360 --> 00:10:05,730
memory wall that modern computation is

206
00:10:05,730 --> 00:10:08,279
so so much faster than than modern

207
00:10:08,279 --> 00:10:10,559
memory bank said that you really the old

208
00:10:10,559 --> 00:10:12,990
I mean touching memory is just a killer

209
00:10:12,990 --> 00:10:15,449
if you write real life from memory your

210
00:10:15,449 --> 00:10:17,519
programs could be slow that's it

211
00:10:17,519 --> 00:10:19,050
so we do it because we kind of have to

212
00:10:19,050 --> 00:10:21,509
sometimes unfortunately we the user

213
00:10:21,509 --> 00:10:22,920
can't see the value of registers of

214
00:10:22,920 --> 00:10:24,449
sometimes we do have to write memory or

215
00:10:24,449 --> 00:10:26,100
even worse to disk of the screen or what

216
00:10:26,100 --> 00:10:27,959
have you well you want to avoid it it's

217
00:10:27,959 --> 00:10:29,339
a very very bad idea if you want our

218
00:10:29,339 --> 00:10:36,779
coaching fast so foots a little bit

219
00:10:36,779 --> 00:10:38,850
tricky because it's a pure language so

220
00:10:38,850 --> 00:10:40,439
one thing is you can you have mutable

221
00:10:40,439 --> 00:10:42,600
variables you also don't have the

222
00:10:42,600 --> 00:10:44,370
ability to write to the screen or to a

223
00:10:44,370 --> 00:10:46,559
file or anywhere so running it is a

224
00:10:46,559 --> 00:10:48,120
little bit exotic you have to can

225
00:10:48,120 --> 00:10:51,149
compile a food-truck program and that's

226
00:10:51,149 --> 00:10:52,709
start by writing a main function that

227
00:10:52,709 --> 00:10:55,939
takes some input and produce some output

228
00:10:55,939 --> 00:10:58,439
in this case I just make up some numbers

229
00:10:58,439 --> 00:10:59,699
I haven't shown you this one doesn't

230
00:10:59,699 --> 00:11:01,079
matter it just makes play an array of

231
00:11:01,079 --> 00:11:03,209
complex nervous runs function I showed

232
00:11:03,209 --> 00:11:05,429
you before it's some small up to reduce

233
00:11:05,429 --> 00:11:07,319
one incision so that sums all of the

234
00:11:07,319 --> 00:11:09,389
escape values of all these complex

235
00:11:09,389 --> 00:11:10,170
numbers doesn't

236
00:11:10,170 --> 00:11:13,079
doesn't cover anything meaningful we're

237
00:11:13,079 --> 00:11:15,209
going to run this program where Patil

238
00:11:15,209 --> 00:11:17,310
food are okay run this function with

239
00:11:17,310 --> 00:11:19,790
these are guns and leave me the result

240
00:11:19,790 --> 00:11:22,410
and do that by just compiling it using

241
00:11:22,410 --> 00:11:25,260
the compiler and then you pass this

242
00:11:25,260 --> 00:11:26,820
input internal input and you get back

243
00:11:26,820 --> 00:11:29,190
output and standard output which is

244
00:11:29,190 --> 00:11:33,290
weird thing but UNIX people like this

245
00:11:33,290 --> 00:11:36,170
in this case I've all asked the Pico

246
00:11:36,170 --> 00:11:38,279
when compiling a food-truck program

247
00:11:38,279 --> 00:11:39,420
standalone program it's not for

248
00:11:39,420 --> 00:11:41,220
production uses for tp3 bugging and

249
00:11:41,220 --> 00:11:43,440
benchmark so it has some some useful

250
00:11:43,440 --> 00:11:46,769
flags one I use is - T which asks it to

251
00:11:46,769 --> 00:11:48,930
benchmark itself so in this case ok I

252
00:11:48,930 --> 00:11:51,000
can this is a result and this is a

253
00:11:51,000 --> 00:11:53,399
runtime in microseconds so six hundred

254
00:11:53,399 --> 00:11:57,269
and eleven thousand microseconds this is

255
00:11:57,269 --> 00:11:58,740
using the foot pack C compiler which

256
00:11:58,740 --> 00:12:01,079
generates security code that is in

257
00:12:01,079 --> 00:12:04,170
combat with GCC with also the photo

258
00:12:04,170 --> 00:12:06,510
album shield Pilar which generates GPU

259
00:12:06,510 --> 00:12:09,000
code and it runs just seven and 1/2

260
00:12:09,000 --> 00:12:10,980
milliseconds so eight it seems faster

261
00:12:10,980 --> 00:12:12,389
without any changes to the program

262
00:12:12,389 --> 00:12:14,370
itself and the perks of doesn't really

263
00:12:14,370 --> 00:12:16,410
talk about GPUs at all it just uses

264
00:12:16,410 --> 00:12:20,070
these the parallel Opera Berets map in

265
00:12:20,070 --> 00:12:22,380
this case and it geometrically runs

266
00:12:22,380 --> 00:12:24,209
faster when I when run with the in

267
00:12:24,209 --> 00:12:29,240
compile with the OpenGL compiler but

268
00:12:29,240 --> 00:12:31,410
this is not the way you want to use

269
00:12:31,410 --> 00:12:33,120
future you have a nice command line

270
00:12:33,120 --> 00:12:35,940
program for some you are handle brush

271
00:12:35,940 --> 00:12:37,860
sets but that's not really what anyone

272
00:12:37,860 --> 00:12:41,250
needs in practice so the trick is how

273
00:12:41,250 --> 00:12:42,990
open shield works which is the library

274
00:12:42,990 --> 00:12:44,430
it used to me there's two libraries for

275
00:12:44,430 --> 00:12:45,839
communicating with GPUs one is cool

276
00:12:45,839 --> 00:12:48,390
invidious prize everything and OpenCL

277
00:12:48,390 --> 00:12:49,920
will use an open standard but this much

278
00:12:49,920 --> 00:12:51,390
masters you should use for manual

279
00:12:51,390 --> 00:12:53,100
program it's not as a compiler socket

280
00:12:53,100 --> 00:12:55,110
though so the way it works is actually

281
00:12:55,110 --> 00:12:56,730
have two programs you have a program

282
00:12:56,730 --> 00:12:59,880
running on GPU called the host which

283
00:12:59,880 --> 00:13:02,370
offers code and data to the GPU which is

284
00:13:02,370 --> 00:13:03,660
for as iconic as later they just

285
00:13:03,660 --> 00:13:07,980
sentence and the command and data to so

286
00:13:07,980 --> 00:13:09,300
the interesting thing is that the CPU

287
00:13:09,300 --> 00:13:11,430
code doesn't actually compute that much

288
00:13:11,430 --> 00:13:13,470
in a well-written organ whether by the

289
00:13:13,470 --> 00:13:15,480
peril seams are large it just

290
00:13:15,480 --> 00:13:16,290
bookkeeping

291
00:13:16,290 --> 00:13:18,319
it doesn't have to be fast in particular

292
00:13:18,319 --> 00:13:21,180
you can have the spew code be in some

293
00:13:21,180 --> 00:13:22,740
high-level language and easy to

294
00:13:22,740 --> 00:13:23,640
integrate with

295
00:13:23,640 --> 00:13:26,480
but but and just talks with you for you

296
00:13:26,480 --> 00:13:30,960
so the way we don this is that we have

297
00:13:30,960 --> 00:13:32,910
added a code generator where the host

298
00:13:32,910 --> 00:13:34,500
level code you know the CPU level code

299
00:13:34,500 --> 00:13:36,780
the code that you see is written in

300
00:13:36,780 --> 00:13:39,840
Python so this compiler generates Python

301
00:13:39,840 --> 00:13:41,670
that internally makes holsters ohms you

302
00:13:41,670 --> 00:13:44,870
live it's you upload code and aces GPU

303
00:13:44,870 --> 00:13:47,550
so it just use a different pilar called

304
00:13:47,550 --> 00:13:49,350
pi open shell and you ask it to create a

305
00:13:49,350 --> 00:13:51,810
library and then you produces a python

306
00:13:51,810 --> 00:13:54,090
module Bantle brought that pi which from

307
00:13:54,090 --> 00:13:55,380
the outside looks like any ordinary

308
00:13:55,380 --> 00:13:58,320
python module to even start a Python you

309
00:13:58,320 --> 00:14:00,030
can import it and then it's kind of as a

310
00:14:00,030 --> 00:14:01,350
kind of strange thing about how you have

311
00:14:01,350 --> 00:14:04,140
used it it defines a class that you

312
00:14:04,140 --> 00:14:06,600
instantiate some GPU States and then

313
00:14:06,600 --> 00:14:09,180
that class or that object defines a

314
00:14:09,180 --> 00:14:11,010
method for every entry point original

315
00:14:11,010 --> 00:14:12,420
food-truck program in this case there's

316
00:14:12,420 --> 00:14:14,100
only the main function and just pass

317
00:14:14,100 --> 00:14:16,290
that ordinary Python values and you get

318
00:14:16,290 --> 00:14:18,060
back ordinary Python values as result

319
00:14:18,060 --> 00:14:21,120
and behind the scenes it has compulsive

320
00:14:21,120 --> 00:14:23,100
GPU code and is asking is if you take

321
00:14:23,100 --> 00:14:24,390
through this function for this argument

322
00:14:24,390 --> 00:14:25,890
and you can call it again and it'll give

323
00:14:25,890 --> 00:14:28,710
a parity for assault and for passing

324
00:14:28,710 --> 00:14:31,050
erase and get back erase from the cheap

325
00:14:31,050 --> 00:14:33,960
you it uses an up hi mary so you can

326
00:14:33,960 --> 00:14:36,630
pretty easily integrate it with with the

327
00:14:36,630 --> 00:14:37,920
existing pattern libraries all those

328
00:14:37,920 --> 00:14:40,200
numpy array is going to be on the cpu so

329
00:14:40,200 --> 00:14:43,170
to be some cost of copying pat fault so

330
00:14:43,170 --> 00:14:44,460
you can use that if you really want to

331
00:14:44,460 --> 00:14:48,780
sum up Mandelbrot sets or we could

332
00:14:48,780 --> 00:14:50,100
modify that from a little bit and

333
00:14:50,100 --> 00:14:51,690
instead of just arming up those escapes

334
00:14:51,690 --> 00:14:54,210
if you compute and turn them into a IP

335
00:14:54,210 --> 00:14:56,040
pixel values and give us back an array

336
00:14:56,040 --> 00:14:57,780
it's really a pixel values and we can

337
00:14:57,780 --> 00:14:59,940
use something like PI game to just lead

338
00:14:59,940 --> 00:15:02,010
it to the screen and then we would

339
00:15:02,010 --> 00:15:04,350
something like this and incisive

340
00:15:04,350 --> 00:15:06,270
Mandelbrot viewer with a Python

341
00:15:06,270 --> 00:15:09,900
front-end for meddling all the keyboard

342
00:15:09,900 --> 00:15:12,030
commands and all that stuff but with all

343
00:15:12,030 --> 00:15:14,100
the completion happening and my insult

344
00:15:14,100 --> 00:15:17,100
GPU in real time much much faster than

345
00:15:17,100 --> 00:15:20,790
the CPU could ever hope to this so

346
00:15:20,790 --> 00:15:22,350
pretty nice division of work between a

347
00:15:22,350 --> 00:15:24,360
restricted high-performance language and

348
00:15:24,360 --> 00:15:26,370
a very flexible dynamic and little

349
00:15:26,370 --> 00:15:32,280
Python language okay so the old reason

350
00:15:32,280 --> 00:15:33,870
you would ever want use a restricted

351
00:15:33,870 --> 00:15:35,370
high-performance language is to get high

352
00:15:35,370 --> 00:15:37,020
performance because it's

353
00:15:37,020 --> 00:15:38,940
it's not a terrible language I don't

354
00:15:38,940 --> 00:15:40,200
think after all this time maybe that's

355
00:15:40,200 --> 00:15:42,570
my Stockholm Syndrome Auggie but it's

356
00:15:42,570 --> 00:15:43,920
not as nice as you didn't have to use it

357
00:15:43,920 --> 00:15:46,860
so is it fast it's worth it well it

358
00:15:46,860 --> 00:15:48,690
depends because I can easily just show

359
00:15:48,690 --> 00:15:50,070
you some Finnish markka show that is

360
00:15:50,070 --> 00:15:52,260
mattress and everything else but you

361
00:15:52,260 --> 00:15:53,399
should we trust that because it's very

362
00:15:53,399 --> 00:15:54,870
very hard to quantify whether life is

363
00:15:54,870 --> 00:15:57,300
fast the only way I found that I just

364
00:15:57,300 --> 00:15:59,610
trust the this least amount is take

365
00:15:59,610 --> 00:16:01,830
existing programs that I'm that are set

366
00:16:01,830 --> 00:16:04,320
to be written in good a decent way and

367
00:16:04,320 --> 00:16:05,670
then pour them to my language and say

368
00:16:05,670 --> 00:16:08,610
well this is how fast it is now almost

369
00:16:08,610 --> 00:16:10,680
benchmarks not mean are not really

370
00:16:10,680 --> 00:16:12,540
really don't really implement algorithms

371
00:16:12,540 --> 00:16:14,190
that are designed to be parallel so it's

372
00:16:14,190 --> 00:16:15,600
kind of I can't use the line normal

373
00:16:15,600 --> 00:16:17,730
language benchmarks you doubt game then

374
00:16:17,730 --> 00:16:19,950
when the TV on has however because

375
00:16:19,950 --> 00:16:21,480
they're mutually sequential programs and

376
00:16:21,480 --> 00:16:22,770
many of them require side effects in

377
00:16:22,770 --> 00:16:24,330
writing to file screen and whatever and

378
00:16:24,330 --> 00:16:26,029
I mean language can't really do that

379
00:16:26,029 --> 00:16:28,620
there is a benchmark suite called Enya

380
00:16:28,620 --> 00:16:30,209
which I don't like anyone to know unless

381
00:16:30,209 --> 00:16:35,190
I've done HP in academia yeah

382
00:16:35,190 --> 00:16:37,709
it's Henry no OpenCL code so hidden GPU

383
00:16:37,709 --> 00:16:42,600
code of very varying quality much of

384
00:16:42,600 --> 00:16:45,209
industry by doctors who did released it

385
00:16:45,209 --> 00:16:48,450
to human parties or write code or by

386
00:16:48,450 --> 00:16:50,310
physicists which is we are needed but at

387
00:16:50,310 --> 00:16:52,010
least fast so we Paul

388
00:16:52,010 --> 00:16:55,500
so we've so we've folded some of these

389
00:16:55,500 --> 00:16:57,810
Virginia paint marks the photog and we

390
00:16:57,810 --> 00:17:00,240
run them on put on in immediate review

391
00:17:00,240 --> 00:17:03,329
and an AMD GPU and this is the speed of

392
00:17:03,329 --> 00:17:04,740
speed compared to original code I don't

393
00:17:04,740 --> 00:17:05,939
know if anyone if you can see these

394
00:17:05,939 --> 00:17:08,760
small numbers but for this one the food

395
00:17:08,760 --> 00:17:10,439
truck versus four times faster than

396
00:17:10,439 --> 00:17:12,000
written version on an immediate review

397
00:17:12,000 --> 00:17:14,569
and on an MD cheap use two times faster

398
00:17:14,569 --> 00:17:17,189
of course this you misjudge this most

399
00:17:17,189 --> 00:17:19,439
means that original program is ad that's

400
00:17:19,439 --> 00:17:21,390
the way a compilers will generate code

401
00:17:21,390 --> 00:17:22,709
that is significantly better than

402
00:17:22,709 --> 00:17:25,470
something didn't by an expert who put

403
00:17:25,470 --> 00:17:27,809
who put enough time to it to write good

404
00:17:27,809 --> 00:17:30,000
code so you so not these benchmarks are

405
00:17:30,000 --> 00:17:32,160
not sufficient are not very good except

406
00:17:32,160 --> 00:17:33,780
some of them where we don't any speed

407
00:17:33,780 --> 00:17:35,940
handle code but we get clips and of

408
00:17:35,940 --> 00:17:37,290
course the food track code is vastly

409
00:17:37,290 --> 00:17:39,540
easier to modify and understand and

410
00:17:39,540 --> 00:17:41,160
extend that that's what we're going for

411
00:17:41,160 --> 00:17:44,130
not really trying to beat handwritten

412
00:17:44,130 --> 00:17:46,040
code with experts we're just trying to

413
00:17:46,040 --> 00:17:48,929
get closed loop era and providing a much

414
00:17:48,929 --> 00:17:50,100
better programming experience along the

415
00:17:50,100 --> 00:17:50,790
way

416
00:17:50,790 --> 00:17:51,930
this times we have seven teams time

417
00:17:51,930 --> 00:17:53,220
faster because they were something was

418
00:17:53,220 --> 00:17:56,070
parallel and really isn't time so it's

419
00:17:56,070 --> 00:17:57,450
not true that your language is good when

420
00:17:57,450 --> 00:18:01,770
everyone writes so slow code so and

421
00:18:01,770 --> 00:18:03,810
sorry it's a small language is very

422
00:18:03,810 --> 00:18:05,580
simple to learn it's high level so it's

423
00:18:05,580 --> 00:18:06,780
not actually cheap you are in we could

424
00:18:06,780 --> 00:18:08,370
generate multi-course view code as well

425
00:18:08,370 --> 00:18:10,590
it's purely functional just weird what

426
00:18:10,590 --> 00:18:12,870
fits this hard I'm pretty well it's data

427
00:18:12,870 --> 00:18:15,180
parallel so there's inbuilt the operator

428
00:18:15,180 --> 00:18:16,650
sort of pelham meaning and the compiler

429
00:18:16,650 --> 00:18:19,080
understands I can optimize them and we

430
00:18:19,080 --> 00:18:20,940
encourage Aaron curry imapilot generates

431
00:18:20,940 --> 00:18:22,500
good GPU code and the future it will

432
00:18:22,500 --> 00:18:23,820
also be able to generate good secure

433
00:18:23,820 --> 00:18:25,530
code and may even cluster code we

434
00:18:25,530 --> 00:18:27,930
haven't gone there yet we haven't a good

435
00:18:27,930 --> 00:18:29,490
idea how we can integrate that with the

436
00:18:29,490 --> 00:18:31,230
language and applications not just Pilon

437
00:18:31,230 --> 00:18:32,430
that's what we right now but we could

438
00:18:32,430 --> 00:18:34,980
easily create an Lang a ruby or C sharp

439
00:18:34,980 --> 00:18:37,410
or whatever front Java doesn't matter

440
00:18:37,410 --> 00:18:38,790
this is the host code is variable and

441
00:18:38,790 --> 00:18:41,640
the moments is is okay we've also tried

442
00:18:41,640 --> 00:18:43,230
them on more challenging benchmark where

443
00:18:43,230 --> 00:18:45,510
we don't eat them quite as much but do

444
00:18:45,510 --> 00:18:47,130
pretty respectively and of course the

445
00:18:47,130 --> 00:18:48,420
foods are called much easier to

446
00:18:48,420 --> 00:18:50,910
understand and it's all available online

447
00:18:50,910 --> 00:18:54,030
and August and online is license and all

448
00:18:54,030 --> 00:18:58,160
and all that off right that's it

449
00:19:03,740 --> 00:19:08,659
thank very much true questions

450
00:19:15,470 --> 00:19:18,100
yes

451
00:19:22,320 --> 00:19:27,429
yes it's a I got a question we have a

452
00:19:27,429 --> 00:19:30,309
pattern interface and I was out of all

453
00:19:30,309 --> 00:19:32,080
time a C interface do is not quite as

454
00:19:32,080 --> 00:19:34,059
mature because C doesn't have I will

455
00:19:34,059 --> 00:19:35,679
define step for the multi dimension or

456
00:19:35,679 --> 00:19:37,090
it should look like for example I think

457
00:19:37,090 --> 00:19:39,010
we could just use numpy pensions but it

458
00:19:39,010 --> 00:19:41,559
should very easy and we do generate city

459
00:19:41,559 --> 00:19:42,760
code that works fine as a standalone

460
00:19:42,760 --> 00:19:44,320
executable and you pieces to make that

461
00:19:44,320 --> 00:19:55,330
alive with you yes yeah that's what

462
00:19:55,330 --> 00:19:58,900
that's what the so I was also that we

463
00:19:58,900 --> 00:20:00,730
have a compiler use the C wrap instead

464
00:20:00,730 --> 00:20:03,460
of those Python that's what this with us

465
00:20:03,460 --> 00:20:06,490
AJ doesn't have the - library option so

466
00:20:06,490 --> 00:20:08,679
we don't integrate fully reusable code

467
00:20:08,679 --> 00:20:10,210
just iterate the fight the nice rare

468
00:20:10,210 --> 00:20:13,240
code but that's just because I can see

469
00:20:13,240 --> 00:20:15,730
doesn't have a table enough numpy that

470
00:20:15,730 --> 00:20:17,110
we know some convention so we can just

471
00:20:17,110 --> 00:20:18,850
adopt so it looks a little bit more for

472
00:20:18,850 --> 00:20:25,170
about how we create an API furs yeah

473
00:20:25,170 --> 00:20:29,820
yeah sure yes if you wouldn't manually

474
00:20:34,940 --> 00:20:37,629
sorry

475
00:20:40,119 --> 00:20:43,039
so hey it wasn't by much because in

476
00:20:43,039 --> 00:20:44,840
video don't bother support so I'm asked

477
00:20:44,840 --> 00:20:47,389
about which watched what I was bored is

478
00:20:47,389 --> 00:20:49,070
necessary now okay so that's two answers

479
00:20:49,070 --> 00:20:50,840
that the first is I have often

480
00:20:50,840 --> 00:20:52,639
questioned this time of doing a PhD that

481
00:20:52,639 --> 00:20:54,409
requires working graphics drivers and

482
00:20:54,409 --> 00:20:57,979
Linux you can't get your window you all

483
00:20:57,979 --> 00:21:00,349
know the problem the second is open

484
00:21:00,349 --> 00:21:02,210
shell self NVIDIA doesn't open shell

485
00:21:02,210 --> 00:21:03,710
much they support it but the support of

486
00:21:03,710 --> 00:21:05,749
value version and since vidya hardware

487
00:21:05,749 --> 00:21:07,789
so popular we can't use features that

488
00:21:07,789 --> 00:21:10,009
are newer than from OpenGL will - I

489
00:21:10,009 --> 00:21:11,179
think that's the newest video support

490
00:21:11,179 --> 00:21:13,849
that's all we need

491
00:21:13,849 --> 00:21:16,639
it works on all CPUs I've seen in via

492
00:21:16,639 --> 00:21:18,679
empty and in cell and also a name do you

493
00:21:18,679 --> 00:21:20,690
want I think an r1 at some point I think

494
00:21:20,690 --> 00:21:24,169
try it out so we don't we don't use any

495
00:21:24,169 --> 00:21:26,679
fancy features

496
00:21:36,099 --> 00:21:39,830
yes that's right on the C and Phi it

497
00:21:39,830 --> 00:21:40,700
doesn't run very fast

498
00:21:40,700 --> 00:21:41,869
once correctly it's supported

499
00:21:41,869 --> 00:21:43,879
oakenshield code but the compiler has

500
00:21:43,879 --> 00:21:45,919
some assumptions about how memory should

501
00:21:45,919 --> 00:21:48,679
be accessed to fast that is valid on on

502
00:21:48,679 --> 00:21:50,570
all modern GPUs but it's not well and

503
00:21:50,570 --> 00:21:52,009
they don't see and Phi's as far as I can

504
00:21:52,009 --> 00:21:53,889
see so there's a significant slowdown

505
00:21:53,889 --> 00:21:56,029
but there could be fixed that's just

506
00:21:56,029 --> 00:21:57,440
about tweaking the collation pipeline

507
00:21:57,440 --> 00:21:59,450
for CFI so I think but I don't know that

508
00:21:59,450 --> 00:22:00,859
much that's what knowles here and fire

509
00:22:00,859 --> 00:22:02,090
they made a new one i haven't tried that

510
00:22:02,090 --> 00:22:04,509
one you

511
00:22:08,350 --> 00:22:15,939
[Applause]

512
00:22:32,500 --> 00:22:35,599
[Music]

513
00:23:12,410 --> 00:23:14,440
Oh

514
00:23:37,820 --> 00:23:44,179
[Music]

515
00:24:20,650 --> 00:24:24,530
yes yeah so we loaded on this laptop

516
00:24:24,530 --> 00:24:27,220
right and the song is you don't really

517
00:24:27,220 --> 00:24:29,510
specific that you need us to like the

518
00:24:29,510 --> 00:24:50,840
memory using before okay it's being here

519
00:24:50,840 --> 00:24:54,399
already the last speaker for lighting

