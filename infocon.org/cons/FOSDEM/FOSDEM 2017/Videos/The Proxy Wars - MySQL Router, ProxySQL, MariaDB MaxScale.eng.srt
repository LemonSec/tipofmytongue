1
00:00:00,000 --> 00:00:03,290
hello good afternoon

2
00:00:04,560 --> 00:00:09,780
oonh everybody thank you for coming in

3
00:00:09,780 --> 00:00:13,740
this rainy afternoon to hear about the

4
00:00:13,740 --> 00:00:16,800
various MySQL proxies before we start

5
00:00:16,800 --> 00:00:18,510
I'm curious to know how many here use

6
00:00:18,510 --> 00:00:21,630
MySQL router or I've tried to use it at

7
00:00:21,630 --> 00:00:23,089
least

8
00:00:23,089 --> 00:00:28,710
okay what about proxy SQL oh wow

9
00:00:28,710 --> 00:00:32,369
and what about Maria DB Mac scale okay

10
00:00:32,369 --> 00:00:38,340
excellent so good so we can start in 20

11
00:00:38,340 --> 00:00:40,890
minutes so I am I'm Collin I work at

12
00:00:40,890 --> 00:00:43,230
Percona Inc and before that I was at

13
00:00:43,230 --> 00:00:46,170
Maria DB as well doing stuff on Maria DB

14
00:00:46,170 --> 00:00:50,250
server so you know quick question is

15
00:00:50,250 --> 00:00:55,080
what is a proxy basically it's a very

16
00:00:55,080 --> 00:00:57,030
lightweight application between the

17
00:00:57,030 --> 00:00:58,470
clients and the server it has to be

18
00:00:58,470 --> 00:01:00,210
lightweight because otherwise you

19
00:01:00,210 --> 00:01:02,940
introduce latency for not much gains and

20
00:01:02,940 --> 00:01:05,519
there have been benchmarks done by

21
00:01:05,519 --> 00:01:07,590
multiple people so you can see

22
00:01:07,590 --> 00:01:09,630
benchmarks against other proxies to see

23
00:01:09,630 --> 00:01:11,729
you know how lightweight it is and

24
00:01:11,729 --> 00:01:13,469
typically some proxies will use things

25
00:01:13,469 --> 00:01:16,049
like a poll or and so forth and the

26
00:01:16,049 --> 00:01:18,630
threading will change as well it is

27
00:01:18,630 --> 00:01:21,479
largely a man-in-the-middle you yourself

28
00:01:21,479 --> 00:01:23,579
installed between client and server and

29
00:01:23,579 --> 00:01:26,789
of course it can communicate with one

30
00:01:26,789 --> 00:01:28,740
many clients as well as many server

31
00:01:28,740 --> 00:01:32,999
backends and this idea of proxies not

32
00:01:32,999 --> 00:01:35,850
very new so this is a image taken from

33
00:01:35,850 --> 00:01:41,249
giuseppe magia from 2007 and he couldn't

34
00:01:41,249 --> 00:01:44,429
join us this he had false tab but this

35
00:01:44,429 --> 00:01:46,229
is an image giving you an idea of what a

36
00:01:46,229 --> 00:01:48,810
proxy does and leading you on to the

37
00:01:48,810 --> 00:01:50,569
fact that there is this thing called

38
00:01:50,569 --> 00:01:55,200
MySQL proxy my scale proxy was around

39
00:01:55,200 --> 00:01:58,649
ten years ago it was probably the first

40
00:01:58,649 --> 00:02:00,749
ever MySQL proxy out that it had an

41
00:02:00,749 --> 00:02:03,749
embedded Lua interpreter generally you

42
00:02:03,749 --> 00:02:05,700
could define what it could do with query

43
00:02:05,700 --> 00:02:08,190
passing through it and the Lua

44
00:02:08,190 --> 00:02:10,258
interpreter was handy because back then

45
00:02:10,258 --> 00:02:12,810
a lot of people would play this game

46
00:02:12,810 --> 00:02:15,360
called the world of warcraft and a lot

47
00:02:15,360 --> 00:02:17,280
of people could know how to script in

48
00:02:17,280 --> 00:02:18,000
Lua so

49
00:02:18,000 --> 00:02:20,070
you could write really short Lua scripts

50
00:02:20,070 --> 00:02:24,510
for MySQL proxy and today other other

51
00:02:24,510 --> 00:02:27,030
databases with embedded Lua interpreter

52
00:02:27,030 --> 00:02:30,150
include things like Tarun tool it is

53
00:02:30,150 --> 00:02:33,240
still used in MySQL Enterprise Monitor

54
00:02:33,240 --> 00:02:38,280
from what I gather and the Lua was

55
00:02:38,280 --> 00:02:40,200
extremely flexible you could rewrite

56
00:02:40,200 --> 00:02:42,450
queries you could add statements you

57
00:02:42,450 --> 00:02:44,310
could filter and you could just write

58
00:02:44,310 --> 00:02:46,830
these short chunks of newer code Lua was

59
00:02:46,830 --> 00:02:50,400
very easy to pick up and very easy to

60
00:02:50,400 --> 00:02:53,340
write for it is unfortunate that this

61
00:02:53,340 --> 00:02:56,270
product is sought sort of archived now

62
00:02:56,270 --> 00:02:58,950
but you know not never fear because

63
00:02:58,950 --> 00:03:01,140
there are now multiple other products

64
00:03:01,140 --> 00:03:05,640
for you to to use so we'll start with

65
00:03:05,640 --> 00:03:09,090
Maria DB max scale because I think this

66
00:03:09,090 --> 00:03:13,860
was by and large the first GA ready

67
00:03:13,860 --> 00:03:15,290
proxy out there

68
00:03:15,290 --> 00:03:19,080
it became G ain't January of 2015 and

69
00:03:19,080 --> 00:03:21,690
the idea was percolating for a lot

70
00:03:21,690 --> 00:03:23,070
longer before that and there were

71
00:03:23,070 --> 00:03:26,820
multiple alpha and beta releases before

72
00:03:26,820 --> 00:03:29,820
that it is a level seven proxy router it

73
00:03:29,820 --> 00:03:32,190
understands the MySQL protocol it has a

74
00:03:32,190 --> 00:03:35,760
fully pluggable architecture so what max

75
00:03:35,760 --> 00:03:38,190
scale does is it monitors the state of

76
00:03:38,190 --> 00:03:41,100
all database nodes constantly and you

77
00:03:41,100 --> 00:03:43,320
can also react to monitoring based

78
00:03:43,320 --> 00:03:46,200
information or hints of even from

79
00:03:46,200 --> 00:03:53,040
filters so you know max scale largely

80
00:03:53,040 --> 00:03:55,170
became sort of this Swiss Army knife

81
00:03:55,170 --> 00:03:59,850
right it was extremely pluggable you

82
00:03:59,850 --> 00:04:01,980
could also do things like logging you

83
00:04:01,980 --> 00:04:03,660
could write to other backends besides

84
00:04:03,660 --> 00:04:05,579
MySQL the idea of max scale was such

85
00:04:05,579 --> 00:04:07,410
that it should be able for you to

86
00:04:07,410 --> 00:04:10,410
translate even to other non MySQL

87
00:04:10,410 --> 00:04:14,370
backends if if need be it also has a DB

88
00:04:14,370 --> 00:04:16,560
firewall filter which you can use

89
00:04:16,560 --> 00:04:19,858
because you can't parse SQL through

90
00:04:19,858 --> 00:04:21,478
regular expressions you actually need to

91
00:04:21,478 --> 00:04:24,720
use a pass tree you can feed it reg X

92
00:04:24,720 --> 00:04:27,419
but the past really needs to exist

93
00:04:27,419 --> 00:04:29,460
you can also route via hints you could

94
00:04:29,460 --> 00:04:31,920
rewrite queries and all this is

95
00:04:31,920 --> 00:04:34,080
possible and the query level analysis

96
00:04:34,080 --> 00:04:36,390
you could also filter logs you can also

97
00:04:36,390 --> 00:04:38,370
call external tools with max scale

98
00:04:38,370 --> 00:04:41,370
things like Maury DB replication manager

99
00:04:41,370 --> 00:04:45,240
or even MHA via via scripting it also

100
00:04:45,240 --> 00:04:50,610
provided schema based sharding one of

101
00:04:50,610 --> 00:04:53,370
the most popular use cases for max scale

102
00:04:53,370 --> 00:04:57,240
that became rather famous was the binary

103
00:04:57,240 --> 00:05:00,060
log server popularized by booking.com so

104
00:05:00,060 --> 00:05:02,850
a couple talks ago jean-francois he's

105
00:05:02,850 --> 00:05:05,190
got excellent talks about using the bin

106
00:05:05,190 --> 00:05:07,500
log server and the idea there was to not

107
00:05:07,500 --> 00:05:09,600
use intermediate masters so you would

108
00:05:09,600 --> 00:05:12,630
have masters served by max scale and

109
00:05:12,630 --> 00:05:14,820
then get all the slaves to read off max

110
00:05:14,820 --> 00:05:18,450
scale and this this has been obviously

111
00:05:18,450 --> 00:05:21,890
used in production and other database

112
00:05:21,890 --> 00:05:24,450
heavy users of databases have also got

113
00:05:24,450 --> 00:05:26,070
their own versions of bin log servers

114
00:05:26,070 --> 00:05:30,330
that are maybe not open source yet and

115
00:05:30,330 --> 00:05:33,240
one of the most popular use cases is

116
00:05:33,240 --> 00:05:35,130
just put it sitting in front of a three

117
00:05:35,130 --> 00:05:36,720
node gallery cluster three node being

118
00:05:36,720 --> 00:05:38,730
the minimum to start a gallery cluster

119
00:05:38,730 --> 00:05:44,280
and the max skills from 1.0 right up to

120
00:05:44,280 --> 00:05:47,790
1.4 is linked against MySQL client

121
00:05:47,790 --> 00:05:49,830
library so either live MySQL client or

122
00:05:49,830 --> 00:05:51,870
live Mary DB client because you do need

123
00:05:51,870 --> 00:05:55,710
to have access to the parser and for

124
00:05:55,710 --> 00:05:57,390
what it is worth it is still getting

125
00:05:57,390 --> 00:06:00,480
development the the 1.4 branch is still

126
00:06:00,480 --> 00:06:02,610
getting development if you pay attention

127
00:06:02,610 --> 00:06:04,380
to the github tree you'll realize that

128
00:06:04,380 --> 00:06:06,120
there should have been a release on the

129
00:06:06,120 --> 00:06:11,280
first of February to fix the blocking of

130
00:06:11,280 --> 00:06:13,530
prepared statements but that release

131
00:06:13,530 --> 00:06:16,890
hasn't been out yet max scale also

132
00:06:16,890 --> 00:06:18,660
managed to create some kind of a

133
00:06:18,660 --> 00:06:20,760
ecosystem around it

134
00:06:20,760 --> 00:06:23,640
the first known plugin was a Kafka back

135
00:06:23,640 --> 00:06:28,050
and written by Yves Trudeau if you look

136
00:06:28,050 --> 00:06:30,120
at github blogs it started probably

137
00:06:30,120 --> 00:06:32,940
around February of 2015 so shortly about

138
00:06:32,940 --> 00:06:35,040
a month after it became GA and was

139
00:06:35,040 --> 00:06:38,310
announced around middle of that year and

140
00:06:38,310 --> 00:06:41,010
the context obviously was to have you

141
00:06:41,010 --> 00:06:43,560
know real time change data capture that

142
00:06:43,560 --> 00:06:46,450
would come in via

143
00:06:46,450 --> 00:06:49,960
Mack your max scale client to a Kafka

144
00:06:49,960 --> 00:06:52,690
back-end and you'd see this only appear

145
00:06:52,690 --> 00:06:53,980
in max scale 2.0

146
00:06:53,980 --> 00:06:56,350
which was something that got released in

147
00:06:56,350 --> 00:07:00,180
like August and September of 2016 and

148
00:07:00,180 --> 00:07:02,560
that was also the first known credible

149
00:07:02,560 --> 00:07:08,080
fork called Airbnb max scale I say

150
00:07:08,080 --> 00:07:10,540
credible because you may have read news

151
00:07:10,540 --> 00:07:13,120
articles about another for called GPL

152
00:07:13,120 --> 00:07:16,030
scale and that that was just you know

153
00:07:16,030 --> 00:07:17,980
for count of anga I think it was not a

154
00:07:17,980 --> 00:07:22,270
real fork that you could use and Airbnb

155
00:07:22,270 --> 00:07:25,030
max scale the idea was to have a

156
00:07:25,030 --> 00:07:27,220
database proxy focusing on connection

157
00:07:27,220 --> 00:07:28,990
pooling reduced the number of direct

158
00:07:28,990 --> 00:07:31,540
connections to the our MySQL database

159
00:07:31,540 --> 00:07:34,600
they deployed Airbnb max scale on all of

160
00:07:34,600 --> 00:07:38,050
Airbnb from early 2016 and it's pretty

161
00:07:38,050 --> 00:07:39,880
much powering all my scale that touches

162
00:07:39,880 --> 00:07:43,150
it there and some of the features I've

163
00:07:43,150 --> 00:07:45,850
listed up there and generally speaking

164
00:07:45,850 --> 00:07:48,370
if a client completes a successful

165
00:07:48,370 --> 00:07:50,530
authentication with a back-end MySQL

166
00:07:50,530 --> 00:07:52,480
server Airbnb max scale will then serve

167
00:07:52,480 --> 00:07:55,660
the link between the backend connections

168
00:07:55,660 --> 00:07:57,970
and the client connections and pocket in

169
00:07:57,970 --> 00:08:01,090
a connection pool itself of the back-end

170
00:08:01,090 --> 00:08:05,380
server now denialist query rejection as

171
00:08:05,380 --> 00:08:07,270
an addition for them was quite important

172
00:08:07,270 --> 00:08:10,840
because sometimes they use Ruby and the

173
00:08:10,840 --> 00:08:13,870
Ruby VM will trash and when he trashes

174
00:08:13,870 --> 00:08:18,250
they've also seen bad queries go to do

175
00:08:18,250 --> 00:08:22,390
delete where zero equals zero and Mexico

176
00:08:22,390 --> 00:08:24,040
would actually stop stop that from

177
00:08:24,040 --> 00:08:26,170
happening this is obviously no fault of

178
00:08:26,170 --> 00:08:28,420
of MySQL it was it was fault of you know

179
00:08:28,420 --> 00:08:30,070
their Ruby VM crashing and it's not a

180
00:08:30,070 --> 00:08:32,470
problem that only a B&B faced other

181
00:08:32,470 --> 00:08:36,039
people have faced it to so having a B&B

182
00:08:36,039 --> 00:08:40,500
max scale is quite quite useful

183
00:08:40,740 --> 00:08:44,219
so we are at FOSDEM and this is a free

184
00:08:44,219 --> 00:08:45,779
and open source conference so I have to

185
00:08:45,779 --> 00:08:47,430
apologize that I spoke about max scale

186
00:08:47,430 --> 00:08:50,100
for phalanx but the abstract did say I

187
00:08:50,100 --> 00:08:52,860
was going to speak about max scale so I

188
00:08:52,860 --> 00:08:57,209
would be cheating you if I didn't so max

189
00:08:57,209 --> 00:09:01,320
scale 2.0 came out August or September

190
00:09:01,320 --> 00:09:02,670
of 2016

191
00:09:02,670 --> 00:09:05,940
same github repository it is not linked

192
00:09:05,940 --> 00:09:07,080
against the mice who are client

193
00:09:07,080 --> 00:09:08,910
libraries any longer it's replaced with

194
00:09:08,910 --> 00:09:10,740
sequel Lite and sequel Lite is now known

195
00:09:10,740 --> 00:09:14,370
to part parts MySQL you can also do

196
00:09:14,370 --> 00:09:16,649
change data capture to Kafka you can

197
00:09:16,649 --> 00:09:18,620
also push your binary log events to

198
00:09:18,620 --> 00:09:21,420
average Ehsan but the most important

199
00:09:21,420 --> 00:09:23,040
thing was that the license had changed

200
00:09:23,040 --> 00:09:25,050
it went from gplv2

201
00:09:25,050 --> 00:09:26,790
to this thing known as the business

202
00:09:26,790 --> 00:09:28,620
source license how many of you are

203
00:09:28,620 --> 00:09:29,730
familiar with the business source

204
00:09:29,730 --> 00:09:34,370
license well that's quite a lot of you

205
00:09:34,370 --> 00:09:38,399
mm-hmm it was in the news yeah hard to

206
00:09:38,399 --> 00:09:40,589
avoid yes okay so the business source

207
00:09:40,589 --> 00:09:42,720
license is time-delayed open-source it

208
00:09:42,720 --> 00:09:44,430
is not the first time this has been

209
00:09:44,430 --> 00:09:46,410
tried go script and the Aladdin license

210
00:09:46,410 --> 00:09:48,390
did this as well it was GPL after a year

211
00:09:48,390 --> 00:09:50,550
during the go script days in this case

212
00:09:50,550 --> 00:09:52,860
they tell you you are not allowed to use

213
00:09:52,860 --> 00:09:55,440
max scale in production if you have well

214
00:09:55,440 --> 00:09:58,560
more than three database of instances in

215
00:09:58,560 --> 00:10:00,510
a free fashion I don't know how that is

216
00:10:00,510 --> 00:10:02,190
enforced except through this use

217
00:10:02,190 --> 00:10:05,640
limitation and after three years it

218
00:10:05,640 --> 00:10:10,050
becomes GPL and Richard Stallman himself

219
00:10:10,050 --> 00:10:12,360
back in the day during the go strip

220
00:10:12,360 --> 00:10:14,490
Aladdin license debacle he said he you

221
00:10:14,490 --> 00:10:17,300
know he considered it a problem Matic Co

222
00:10:17,300 --> 00:10:19,589
compromise because it gave us free

223
00:10:19,589 --> 00:10:21,930
software after yeah but thankfully that

224
00:10:21,930 --> 00:10:23,670
was back in the go script Aladdin days

225
00:10:23,670 --> 00:10:24,779
I'm guessing many of you don't even

226
00:10:24,779 --> 00:10:27,420
remember go script or Aladdin because

227
00:10:27,420 --> 00:10:30,930
that was in the mid-90s when free

228
00:10:30,930 --> 00:10:33,360
software was sort of just sort of

229
00:10:33,360 --> 00:10:36,990
becoming a bit more famous so you know

230
00:10:36,990 --> 00:10:40,160
thankfully we have choice now

231
00:10:41,020 --> 00:10:44,440
my SQL router fully gplv2

232
00:10:44,440 --> 00:10:48,610
so thank you Oracle it became GA in

233
00:10:48,610 --> 00:10:51,790
October of 2015 and they made a labs

234
00:10:51,790 --> 00:10:54,370
release in about a month before that and

235
00:10:54,370 --> 00:10:56,290
I guess they had if you look at the

236
00:10:56,290 --> 00:10:57,970
release notes you also see that they had

237
00:10:57,970 --> 00:10:59,260
internal releases so they were playing

238
00:10:59,260 --> 00:11:02,740
with this for a while the idea there is

239
00:11:02,740 --> 00:11:04,480
obviously to do transparent routing

240
00:11:04,480 --> 00:11:06,370
between all applications and back-end

241
00:11:06,370 --> 00:11:09,550
MySQL servers they also have a plug-in

242
00:11:09,550 --> 00:11:14,320
interface via a harness that you can use

243
00:11:14,320 --> 00:11:16,660
so the harness provides dependency

244
00:11:16,660 --> 00:11:18,580
tracking loading and unloading of

245
00:11:18,580 --> 00:11:20,920
plugins configuration logging framework

246
00:11:20,920 --> 00:11:24,010
and so forth it can do failover it can

247
00:11:24,010 --> 00:11:27,540
do load balancing it can also distribute

248
00:11:27,540 --> 00:11:29,560
application connections in a round robin

249
00:11:29,560 --> 00:11:32,529
fashion so it'll forward my SQL packets

250
00:11:32,529 --> 00:11:35,290
to a back-end server without ever

251
00:11:35,290 --> 00:11:37,209
inspecting or modifying them so you get

252
00:11:37,209 --> 00:11:40,839
maximum throughput and I think one of

253
00:11:40,839 --> 00:11:42,970
the coolest things is that this is one

254
00:11:42,970 --> 00:11:45,310
of the key features that you need if you

255
00:11:45,310 --> 00:11:46,570
wanted to start playing around with

256
00:11:46,570 --> 00:11:49,930
MySQL you know DB cluster and your host

257
00:11:49,930 --> 00:11:52,450
Frederick has actually got a less than

258
00:11:52,450 --> 00:11:54,430
five minute video on YouTube that you

259
00:11:54,430 --> 00:11:56,649
could watch in your own time so just

260
00:11:56,649 --> 00:11:58,240
search for MySQL in a DB cluster on

261
00:11:58,240 --> 00:12:00,310
YouTube and you will be able to see it

262
00:12:00,310 --> 00:12:02,770
it's a very good video about how you can

263
00:12:02,770 --> 00:12:06,490
use MySQL with router and group

264
00:12:06,490 --> 00:12:09,130
replication and the new shell which

265
00:12:09,130 --> 00:12:11,230
guessing they were talks about or will

266
00:12:11,230 --> 00:12:14,860
be talks about and then there's proxy

267
00:12:14,860 --> 00:12:18,970
SQL the main author Rene is actually in

268
00:12:18,970 --> 00:12:21,579
the audience now it is been stable since

269
00:12:21,579 --> 00:12:22,839
December 2015

270
00:12:22,839 --> 00:12:24,910
there has been many times at many

271
00:12:24,910 --> 00:12:26,680
conferences that people did talk about

272
00:12:26,680 --> 00:12:30,130
proxy SQL I would say 2015 was the year

273
00:12:30,130 --> 00:12:32,050
we went full circle on proxies right

274
00:12:32,050 --> 00:12:34,870
because we had three proxies become GA

275
00:12:34,870 --> 00:12:37,570
in one year and the selling point for

276
00:12:37,570 --> 00:12:40,959
this is it's by DBAs for DBAs and at

277
00:12:40,959 --> 00:12:41,529
Percona

278
00:12:41,529 --> 00:12:45,220
we obviously like proxy SQL a lot so

279
00:12:45,220 --> 00:12:47,290
we've included it inside of Percona HTTP

280
00:12:47,290 --> 00:12:49,449
cluster five seven we've also got a

281
00:12:49,449 --> 00:12:53,220
proxy SQL admin tool that you can use to

282
00:12:53,220 --> 00:12:54,850
for configuring

283
00:12:54,850 --> 00:12:57,009
your px is to have proxy SQL in front of

284
00:12:57,009 --> 00:12:59,350
it and the idea behind this is of course

285
00:12:59,350 --> 00:13:01,149
is to you know improve your data based

286
00:13:01,149 --> 00:13:04,690
operations have-have h8 apologies and

287
00:13:04,690 --> 00:13:06,310
and so forth it also does things like

288
00:13:06,310 --> 00:13:09,310
connection pooling read/write splitting

289
00:13:09,310 --> 00:13:13,089
things you'd expect from a proxy I think

290
00:13:13,089 --> 00:13:15,040
the very important things for me as

291
00:13:15,040 --> 00:13:16,480
opposed to just going through this

292
00:13:16,480 --> 00:13:17,980
entire list is that it's runtime

293
00:13:17,980 --> 00:13:20,009
reconfigurable so you don't have to

294
00:13:20,009 --> 00:13:23,230
restart your proxy SQL this is extremely

295
00:13:23,230 --> 00:13:27,370
friendly for users our DBA s and the

296
00:13:27,370 --> 00:13:29,019
monitoring built in is also extremely

297
00:13:29,019 --> 00:13:31,779
useful this monitoring can also then be

298
00:13:31,779 --> 00:13:33,459
you know pushed out to things like

299
00:13:33,459 --> 00:13:35,500
percona monitoring and management and so

300
00:13:35,500 --> 00:13:37,740
forth i or consumed by other things and

301
00:13:37,740 --> 00:13:40,269
yeah it does you know query rewriting

302
00:13:40,269 --> 00:13:44,290
and they've been multiple blog posts and

303
00:13:44,290 --> 00:13:46,720
performance tests done on this and i

304
00:13:46,720 --> 00:13:48,490
think one of the best things about proxy

305
00:13:48,490 --> 00:13:50,459
SQL is that Renea spent some time

306
00:13:50,459 --> 00:13:54,459
comparing proxy SQL to other proxies out

307
00:13:54,459 --> 00:13:56,709
there including a che proxy and gen-x

308
00:13:56,709 --> 00:13:59,680
and he released this sometime in january

309
00:13:59,680 --> 00:14:03,040
of this year so well worth taking a look

310
00:14:03,040 --> 00:14:06,610
at this comparison because hey if you

311
00:14:06,610 --> 00:14:08,410
find a problem with said comparison

312
00:14:08,410 --> 00:14:09,790
you're always more than welcome to

313
00:14:09,790 --> 00:14:12,189
actually report a bug on the mailing

314
00:14:12,189 --> 00:14:13,110
list

315
00:14:13,110 --> 00:14:15,730
proxy SQL of course has a few missing

316
00:14:15,730 --> 00:14:17,139
features you want to compare to max

317
00:14:17,139 --> 00:14:19,689
scale one of them is front end SSL

318
00:14:19,689 --> 00:14:21,939
encryption so that's going from client

319
00:14:21,939 --> 00:14:23,829
SL encryption to the proxy to the

320
00:14:23,829 --> 00:14:25,959
application it does support back-end SSL

321
00:14:25,959 --> 00:14:27,519
encryption and that is an open issue

322
00:14:27,519 --> 00:14:30,279
issue 891 this is kind of important for

323
00:14:30,279 --> 00:14:33,009
like HIPAA environments and and so forth

324
00:14:33,009 --> 00:14:36,130
and I believe it is on the roadmap it

325
00:14:36,130 --> 00:14:38,050
will get fixed in time so if you if you

326
00:14:38,050 --> 00:14:40,389
care you can track this on github it

327
00:14:40,389 --> 00:14:43,269
there is no bin log router and from what

328
00:14:43,269 --> 00:14:45,939
I understand you know they're very large

329
00:14:45,939 --> 00:14:48,670
internet sites may may open up their bin

330
00:14:48,670 --> 00:14:51,519
log routers so for you to end up using

331
00:14:51,519 --> 00:14:54,069
if you want to stream binary logs to

332
00:14:54,069 --> 00:14:56,079
Kafka there's this wonderful thing

333
00:14:56,079 --> 00:14:57,699
called Maxwell's demon that you can also

334
00:14:57,699 --> 00:15:01,120
use so it's an it's another tool that is

335
00:15:01,120 --> 00:15:03,279
actually used in production and BIM logs

336
00:15:03,279 --> 00:15:06,189
to ever how many here use Avro out of

337
00:15:06,189 --> 00:15:07,870
curiosity

338
00:15:07,870 --> 00:15:11,500
that's what I thought

339
00:15:14,800 --> 00:15:16,959
and I think the cool thing about proxy

340
00:15:16,959 --> 00:15:19,480
SQL is it has lots of great resources

341
00:15:19,480 --> 00:15:21,489
it's great when other people talk about

342
00:15:21,489 --> 00:15:23,829
your project not just you talking about

343
00:15:23,829 --> 00:15:25,929
your project and you know we see things

344
00:15:25,929 --> 00:15:28,660
we see mark Marco - so I have extensive

345
00:15:28,660 --> 00:15:30,819
blog several lines cluster control also

346
00:15:30,819 --> 00:15:33,339
works at Prague with proxy SQL and they

347
00:15:33,339 --> 00:15:34,899
talk a lot about it and how you can use

348
00:15:34,899 --> 00:15:37,119
cluster control patreon talks about it

349
00:15:37,119 --> 00:15:38,799
Percona obviously talks a lot about it

350
00:15:38,799 --> 00:15:41,170
so you can you know get a lot of

351
00:15:41,170 --> 00:15:44,709
resources and you know since we are at

352
00:15:44,709 --> 00:15:47,049
FOSDEM it's also worth talking about you

353
00:15:47,049 --> 00:15:49,799
know the health of these projects so

354
00:15:49,799 --> 00:15:54,519
they're all at github and you know max

355
00:15:54,519 --> 00:15:56,139
skill has been around probably the

356
00:15:56,139 --> 00:16:00,100
longest router like every other MySQL

357
00:16:00,100 --> 00:16:02,499
software is is not really developed in

358
00:16:02,499 --> 00:16:04,720
the open so it is sort of dumped onto

359
00:16:04,720 --> 00:16:07,389
github from time to time I guess which

360
00:16:07,389 --> 00:16:10,299
is why you may see less contributors and

361
00:16:10,299 --> 00:16:13,089
so forth but that's that's in no way you

362
00:16:13,089 --> 00:16:15,489
know integration of how the software is

363
00:16:15,489 --> 00:16:17,619
being developed it's just a different

364
00:16:17,619 --> 00:16:21,549
process and the proxy SQL also has a

365
00:16:21,549 --> 00:16:23,980
bunch of you know many stars multiple

366
00:16:23,980 --> 00:16:25,959
Forks the other thing is to see you know

367
00:16:25,959 --> 00:16:27,249
pull requests there are a lot of pull

368
00:16:27,249 --> 00:16:32,949
requests and proxy SQL as well so do

369
00:16:32,949 --> 00:16:35,019
these statistics tell you that the

370
00:16:35,019 --> 00:16:37,720
project is healthy kind of if you see

371
00:16:37,720 --> 00:16:40,629
regular commits issues being closed it

372
00:16:40,629 --> 00:16:44,769
shows that people care the github has

373
00:16:44,769 --> 00:16:46,689
this other very interesting thing called

374
00:16:46,689 --> 00:16:50,170
punch card and I thought this was kind

375
00:16:50,170 --> 00:16:51,670
of appropriate for FOSDEM as well

376
00:16:51,670 --> 00:16:54,009
because this is the punch card for max

377
00:16:54,009 --> 00:16:55,689
scale which you see lots and lots of

378
00:16:55,689 --> 00:16:58,119
activity from Monday to Friday during

379
00:16:58,119 --> 00:17:01,990
working hours seems fair this is the

380
00:17:01,990 --> 00:17:04,839
punch card for proxy SQL where you see

381
00:17:04,839 --> 00:17:09,939
activity all the time not because Renee

382
00:17:09,939 --> 00:17:12,459
is madly typing away there are many

383
00:17:12,459 --> 00:17:14,439
other contributors to to this but I

384
00:17:14,439 --> 00:17:16,869
think this is so the spirit of open

385
00:17:16,869 --> 00:17:20,648
source is you also work not when you're

386
00:17:20,648 --> 00:17:22,599
paid to work on it you we work on it

387
00:17:22,599 --> 00:17:24,760
because you love working on it and you

388
00:17:24,760 --> 00:17:27,579
improve it and that shows in the product

389
00:17:27,579 --> 00:17:31,270
and a metric that I don't think is a

390
00:17:31,270 --> 00:17:34,450
metric but if you care about Google

391
00:17:34,450 --> 00:17:36,400
Trends this is a joke of course you know

392
00:17:36,400 --> 00:17:38,850
you this is insert insert time - laughs

393
00:17:38,850 --> 00:17:42,570
is this Google trending and the red is

394
00:17:42,570 --> 00:17:46,780
proxy SQL and it starts spiking a lot in

395
00:17:46,780 --> 00:17:49,090
August of 2016 and I'm guessing you all

396
00:17:49,090 --> 00:17:54,490
read the news and know why so what do

397
00:17:54,490 --> 00:17:58,780
you use as we come to wrap this up I

398
00:17:58,780 --> 00:18:01,390
think MySQL router is going to be very

399
00:18:01,390 --> 00:18:04,840
interesting going forward so it is

400
00:18:04,840 --> 00:18:06,370
something to definitely watch

401
00:18:06,370 --> 00:18:10,150
I think proxy SQL is great for you to

402
00:18:10,150 --> 00:18:13,510
use today because it's got a lot of

403
00:18:13,510 --> 00:18:16,300
support it's well integrated it works

404
00:18:16,300 --> 00:18:18,580
with other additional tools like pmm and

405
00:18:18,580 --> 00:18:21,460
so forth and if you need the binary log

406
00:18:21,460 --> 00:18:24,220
router today before someone else makes a

407
00:18:24,220 --> 00:18:26,530
binary log router open source there is

408
00:18:26,530 --> 00:18:30,250
GPL Mac scale that you can use that that

409
00:18:30,250 --> 00:18:33,370
works and I highly recommend you if you

410
00:18:33,370 --> 00:18:35,580
if you need a bin log writer to use that

411
00:18:35,580 --> 00:18:38,080
but there's also one other consideration

412
00:18:38,080 --> 00:18:40,660
to think about is that what server are

413
00:18:40,660 --> 00:18:43,590
you using if you are using MySQL and

414
00:18:43,590 --> 00:18:46,870
Percona server you can use all these

415
00:18:46,870 --> 00:18:49,750
tools and it wouldn't be a problem if

416
00:18:49,750 --> 00:18:50,320
you're using

417
00:18:50,320 --> 00:18:53,530
Mariya DB server it is pretty obvious

418
00:18:53,530 --> 00:18:56,440
MySQL router will not work for you so

419
00:18:56,440 --> 00:19:00,460
you so one choice is now gone and I will

420
00:19:00,460 --> 00:19:02,620
only leave you the option of proxy SQL

421
00:19:02,620 --> 00:19:03,850
and and max scale

422
00:19:03,850 --> 00:19:07,300
so again server choices also play a role

423
00:19:07,300 --> 00:19:10,000
and you know I would be remiss not to

424
00:19:10,000 --> 00:19:13,480
mention Vitesse I didn't put that in the

425
00:19:13,480 --> 00:19:15,220
abstract but Vitesse doesn't sell itself

426
00:19:15,220 --> 00:19:18,160
as a proxy either it is a database

427
00:19:18,160 --> 00:19:20,470
clustering solution for horizontally

428
00:19:20,470 --> 00:19:22,660
you know scaling MySQL and it powers

429
00:19:22,660 --> 00:19:25,420
YouTube that alone should you know make

430
00:19:25,420 --> 00:19:27,850
you sort of open your eyes so if you go

431
00:19:27,850 --> 00:19:30,370
to the test at i/o you will actually be

432
00:19:30,370 --> 00:19:32,110
able to try this out with you know

433
00:19:32,110 --> 00:19:34,270
something like kubernetes you don't have

434
00:19:34,270 --> 00:19:35,950
to run it in the cloud you can run it

435
00:19:35,950 --> 00:19:38,530
yourself and if you run it yourself you

436
00:19:38,530 --> 00:19:40,300
know you install something like at CD or

437
00:19:40,300 --> 00:19:41,230
zookeeper so you

438
00:19:41,230 --> 00:19:42,520
also ensure your cluster view is always

439
00:19:42,520 --> 00:19:45,850
up-to-date Vitesse is definitely

440
00:19:45,850 --> 00:19:49,780
interesting because it doesn't it makes

441
00:19:49,780 --> 00:19:52,150
connections using very lightweight

442
00:19:52,150 --> 00:19:54,700
beasts on that each connection only uses

443
00:19:54,700 --> 00:19:56,890
32 kilobytes of RAM this is very unlike

444
00:19:56,890 --> 00:19:59,080
regular MySQL connections where they

445
00:19:59,080 --> 00:20:00,640
could be anywhere between 1250 6

446
00:20:00,640 --> 00:20:03,640
kilobytes of RAM to even three Meg's it

447
00:20:03,640 --> 00:20:05,830
also does the whole rewriting of queries

448
00:20:05,830 --> 00:20:08,200
so you can you know no limit clause no

449
00:20:08,200 --> 00:20:10,630
problem you can make sure that you get

450
00:20:10,630 --> 00:20:12,070
the query you don't see a limit you at

451
00:20:12,070 --> 00:20:15,640
you add automatically so and we test of

452
00:20:15,640 --> 00:20:19,179
course works with MySQL and MariaDB as

453
00:20:19,179 --> 00:20:22,830
well so they are a bunch of resources

454
00:20:22,830 --> 00:20:26,950
that I was taking a look at the proxy

455
00:20:26,950 --> 00:20:30,820
SQL google group is extremely active the

456
00:20:30,820 --> 00:20:32,950
marina v-max Cal Google group is also

457
00:20:32,950 --> 00:20:36,220
quite active my skill roster doesn't

458
00:20:36,220 --> 00:20:37,510
have a mailing list but it has this

459
00:20:37,510 --> 00:20:39,610
forum which you need to log into to use

460
00:20:39,610 --> 00:20:43,929
I'm not a huge fan of forums but it's it

461
00:20:43,929 --> 00:20:46,870
is a discussion place and the Vitesse

462
00:20:46,870 --> 00:20:48,760
forum is extremely active as well and

463
00:20:48,760 --> 00:20:50,740
they have a slack group as well so you

464
00:20:50,740 --> 00:20:53,429
could join your slack group and and chat

465
00:20:53,429 --> 00:20:55,809
guessing not many people here like to

466
00:20:55,809 --> 00:20:58,780
use slack okay we are we are at Foster

467
00:20:58,780 --> 00:21:05,100
yes okay so before I before I wrap it up

468
00:21:05,100 --> 00:21:09,520
insert add Percona live if you're

469
00:21:09,520 --> 00:21:11,770
interested in you know MySQL you should

470
00:21:11,770 --> 00:21:15,160
probably be there and you get your 30%

471
00:21:15,160 --> 00:21:22,090
discount if you use that code 20 minutes

472
00:21:22,090 --> 00:21:25,110
and 43 seconds thank you

473
00:21:25,110 --> 00:21:28,949
I'm open for questions

474
00:21:30,960 --> 00:21:34,240
I'm open for questions if you have any

475
00:21:34,240 --> 00:21:39,150
or if you plan to shuffle yes

476
00:21:43,850 --> 00:21:46,879
can the proxy rewrite a sub select to

477
00:21:46,879 --> 00:21:49,850
adjoin for example why do you want to

478
00:21:49,850 --> 00:21:51,679
rewrite sub selects now if you use MySQL

479
00:21:51,679 --> 00:21:55,909
five six or more ADP ten they can

480
00:21:55,909 --> 00:22:01,129
process up selects join is more

481
00:22:01,129 --> 00:22:04,759
performant hmm that's that that is a

482
00:22:04,759 --> 00:22:06,619
good question I have not had to do this

483
00:22:06,619 --> 00:22:09,379
recently because I I trust the optimizer

484
00:22:09,379 --> 00:22:14,299
but this is possible maybe renee if you

485
00:22:14,299 --> 00:22:15,649
use regular expressions you could

486
00:22:15,649 --> 00:22:19,340
probably get get it going but yeah I

487
00:22:19,340 --> 00:22:21,499
don't think you need to now because it

488
00:22:21,499 --> 00:22:23,599
kind of just works in the optimizer

489
00:22:23,599 --> 00:22:29,889
trust the optimizer any other questions

490
00:22:29,889 --> 00:22:31,700
here oh sorry

491
00:22:31,700 --> 00:22:34,479
I couldn't see

492
00:22:41,560 --> 00:22:43,870
yeah so the question is what if you want

493
00:22:43,870 --> 00:22:46,090
to do sharding and yeah so they do like

494
00:22:46,090 --> 00:22:48,550
range very sharding so you can get some

495
00:22:48,550 --> 00:22:51,130
some level of sharding it's not a proper

496
00:22:51,130 --> 00:22:54,370
charting solution but you can get some

497
00:22:54,370 --> 00:23:00,700
level of sharding and - yes they they do

498
00:23:00,700 --> 00:23:06,220
well this router kind not not yet but

499
00:23:06,220 --> 00:23:10,510
it's in the roadmap yeah so yeah the

500
00:23:10,510 --> 00:23:13,810
other to do and Vitesse obviously does

501
00:23:13,810 --> 00:23:19,240
shouting - but much harder to set up my

502
00:23:19,240 --> 00:23:21,790
schema yes so it's they have their own

503
00:23:21,790 --> 00:23:24,690
limitations in terms of sharding

504
00:23:24,690 --> 00:23:27,690
question

505
00:23:40,520 --> 00:23:42,559
so the question is where would you put

506
00:23:42,559 --> 00:23:45,650
the proxy on the application servers or

507
00:23:45,650 --> 00:23:47,900
dedicated servers or and the advantages

508
00:23:47,900 --> 00:23:51,410
and disadvantages you if you're going to

509
00:23:51,410 --> 00:23:53,860
use it for like you know load balancing

510
00:23:53,860 --> 00:23:56,330
maybe you want to keep it on a dedicated

511
00:23:56,330 --> 00:23:58,070
server I would say dedicate it would

512
00:23:58,070 --> 00:24:01,429
make more sense in case your application

513
00:24:01,429 --> 00:24:04,280
server goes down or Reno runs out of

514
00:24:04,280 --> 00:24:06,710
memory and kills your proxy so I just

515
00:24:06,710 --> 00:24:08,809
keep it on dedicated machines though

516
00:24:08,809 --> 00:24:11,210
from what it's worth it was from an

517
00:24:11,210 --> 00:24:13,520
alkene and Renee a while back they made

518
00:24:13,520 --> 00:24:15,760
a presentation about how proxy SQL has

519
00:24:15,760 --> 00:24:18,170
won proxy SQL instance has you know

520
00:24:18,170 --> 00:24:20,480
hundreds of servers sitting below it as

521
00:24:20,480 --> 00:24:23,920
well and and it works in production so I

522
00:24:23,920 --> 00:24:26,500
would just use a dedicated machine

523
00:24:26,500 --> 00:24:35,190
overall okay thank you

524
00:24:35,190 --> 00:24:42,279
[Applause]

