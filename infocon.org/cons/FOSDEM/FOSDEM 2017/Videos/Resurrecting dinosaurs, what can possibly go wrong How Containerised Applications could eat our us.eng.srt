1
00:00:00,740 --> 00:00:03,740
hello

2
00:00:04,650 --> 00:00:12,210
everyone so next up we have Richard

3
00:00:12,210 --> 00:00:14,910
Roehm and she's going to resurrect some

4
00:00:14,910 --> 00:00:17,520
dinosaurs for us and let's see what can

5
00:00:17,520 --> 00:00:18,510
go wrong with that

6
00:00:18,510 --> 00:00:27,330
thank you Thank You Emma yeah so I'm

7
00:00:27,330 --> 00:00:30,060
here from the openSUSE project to talk

8
00:00:30,060 --> 00:00:33,450
about our containerized applications or

9
00:00:33,450 --> 00:00:36,750
things like snappy flap back etc like

10
00:00:36,750 --> 00:00:38,820
resurrecting dinosaurs Jurassic Park

11
00:00:38,820 --> 00:00:40,770
eating our users how it's all going to

12
00:00:40,770 --> 00:00:44,280
be terrible so yeah those who can't

13
00:00:44,280 --> 00:00:45,660
remember the past are doomed to repeat

14
00:00:45,660 --> 00:00:47,160
it so before I get into the history

15
00:00:47,160 --> 00:00:48,480
lesson we're gonna talk a little bit

16
00:00:48,480 --> 00:00:51,390
about my history I've been working in in

17
00:00:51,390 --> 00:00:54,420
Linux now for oh let's say 12 years

18
00:00:54,420 --> 00:00:55,680
maybe even a little bit longer

19
00:00:55,680 --> 00:00:57,630
mostly contributing to the openSUSE

20
00:00:57,630 --> 00:01:01,470
project QA distribution building package

21
00:01:01,470 --> 00:01:03,930
building so I'm a you know a real distro

22
00:01:03,930 --> 00:01:05,339
guy you know a really interested in

23
00:01:05,339 --> 00:01:07,140
dealing with all of these upstream

24
00:01:07,140 --> 00:01:09,990
projects how those how to then package

25
00:01:09,990 --> 00:01:11,760
that software and then redistribute it

26
00:01:11,760 --> 00:01:13,470
to users you know traditionally in the

27
00:01:13,470 --> 00:01:15,120
form of a distribution you know consumer

28
00:01:15,120 --> 00:01:17,550
and so and so I have kind of been

29
00:01:17,550 --> 00:01:18,900
looking at this problem from from very

30
00:01:18,900 --> 00:01:21,720
much that perspective before that so you

31
00:01:21,720 --> 00:01:23,490
know alongside that I have also been you

32
00:01:23,490 --> 00:01:24,540
know working as a system administrator

33
00:01:24,540 --> 00:01:27,600
so I've been actually dealing on the you

34
00:01:27,600 --> 00:01:29,640
know how hard end of things with users

35
00:01:29,640 --> 00:01:31,950
in the real world dealing with software

36
00:01:31,950 --> 00:01:34,830
and dealing with operating systems other

37
00:01:34,830 --> 00:01:36,120
than the wonderful ones that work in

38
00:01:36,120 --> 00:01:38,790
open source so starting at the very

39
00:01:38,790 --> 00:01:40,530
beginning I never thought I'd be

40
00:01:40,530 --> 00:01:41,970
presenting at FOSDEM and having an

41
00:01:41,970 --> 00:01:43,830
opening slide of a Windows 95

42
00:01:43,830 --> 00:01:47,700
architecture diagram but this is a place

43
00:01:47,700 --> 00:01:50,159
to start with really back in Windows 95

44
00:01:50,159 --> 00:01:54,810
windows Windows 3.1 the traditional

45
00:01:54,810 --> 00:01:56,610
dependency problem is best exemplified

46
00:01:56,610 --> 00:02:01,260
by DLL hell you know Windows $19.00

47
00:02:01,260 --> 00:02:03,270
trying to you know so all these

48
00:02:03,270 --> 00:02:04,590
wonderful dependency problems and their

49
00:02:04,590 --> 00:02:06,299
solution was pretty much okay let's have

50
00:02:06,299 --> 00:02:07,799
these things called dll's

51
00:02:07,799 --> 00:02:09,720
and let's shove all these libraries and

52
00:02:09,720 --> 00:02:11,730
dump them in see windows or see windows

53
00:02:11,730 --> 00:02:14,279
system and every application will just

54
00:02:14,279 --> 00:02:16,319
consume them from there and everything

55
00:02:16,319 --> 00:02:17,340
will be wonderful

56
00:02:17,340 --> 00:02:19,230
but of course it's windows so it wasn't

57
00:02:19,230 --> 00:02:23,060
you know it's even even down to

58
00:02:23,060 --> 00:02:25,860
absolutely nobody not even Microsoft

59
00:02:25,860 --> 00:02:27,720
taking care of any kind of ABI

60
00:02:27,720 --> 00:02:29,760
backwards-compatibility every single

61
00:02:29,760 --> 00:02:31,650
update either from an application or

62
00:02:31,650 --> 00:02:33,989
from the system goes into our Cheetos

63
00:02:33,989 --> 00:02:36,780
dll's and then every application that

64
00:02:36,780 --> 00:02:38,280
work ID on it all end up magically

65
00:02:38,280 --> 00:02:41,310
breaking even if you had people who took

66
00:02:41,310 --> 00:02:42,810
care of that and dealt with that and

67
00:02:42,810 --> 00:02:45,480
actually had certain runtimes and

68
00:02:45,480 --> 00:02:47,730
libraries you know taken me up well

69
00:02:47,730 --> 00:02:49,769
maintained and patched carefully and

70
00:02:49,769 --> 00:02:52,950
reservedly you still had nonsense like

71
00:02:52,950 --> 00:02:56,040
the global klom come class IDs so you

72
00:02:56,040 --> 00:02:58,440
know a single application ends up

73
00:02:58,440 --> 00:03:01,230
stealing the resources from another if

74
00:03:01,230 --> 00:03:02,549
any program we wanted to create an

75
00:03:02,549 --> 00:03:04,290
instance of that class it just always

76
00:03:04,290 --> 00:03:07,129
broke it was a mess it was a nightmare

77
00:03:07,129 --> 00:03:11,970
and as a developer working with that

78
00:03:11,970 --> 00:03:15,510
stuff in real terms it was a nightmare

79
00:03:15,510 --> 00:03:17,519
to work with you know every single

80
00:03:17,519 --> 00:03:20,579
application had to be developed with

81
00:03:20,579 --> 00:03:22,829
every single combination of every single

82
00:03:22,829 --> 00:03:24,780
set of libraries that every user might

83
00:03:24,780 --> 00:03:26,730
have and whichever version combination

84
00:03:26,730 --> 00:03:29,700
they might have and then dev that way

85
00:03:29,700 --> 00:03:31,859
and tested that way and then of course

86
00:03:31,859 --> 00:03:33,120
you need to do an upgrade to your

87
00:03:33,120 --> 00:03:34,950
application so your patch you have to

88
00:03:34,950 --> 00:03:37,170
then retest everything and then of

89
00:03:37,170 --> 00:03:39,359
course your various upstream and other

90
00:03:39,359 --> 00:03:41,459
projects are changing their D allows and

91
00:03:41,459 --> 00:03:42,930
there haven't you every patch all of

92
00:03:42,930 --> 00:03:44,250
that and then even if you did everything

93
00:03:44,250 --> 00:03:45,989
perfectly you still end up crying

94
00:03:45,989 --> 00:03:48,299
because it's still ended up breaking and

95
00:03:48,299 --> 00:03:51,260
then Windows 2000 came along and

96
00:03:51,260 --> 00:03:54,419
Microsoft claimed they fixed it and in

97
00:03:54,419 --> 00:03:57,690
many ways they did it came along and

98
00:03:57,690 --> 00:03:59,940
they said ok we realized this is a mess

99
00:03:59,940 --> 00:04:01,950
we're gonna stop putting all of our

100
00:04:01,950 --> 00:04:03,989
shared libraries in one big dumping

101
00:04:03,989 --> 00:04:05,790
ground in the system in the you know the

102
00:04:05,790 --> 00:04:08,459
root filesystem in C windows or C Window

103
00:04:08,459 --> 00:04:10,410
System and we've got this wonderful

104
00:04:10,410 --> 00:04:13,620
thing called side by side assembly which

105
00:04:13,620 --> 00:04:16,620
is basically containerization I mean

106
00:04:16,620 --> 00:04:19,070
obviously the lack of Sam boxing but

107
00:04:19,070 --> 00:04:22,260
generally speaking it completely changed

108
00:04:22,260 --> 00:04:24,030
how you practically delivered

109
00:04:24,030 --> 00:04:25,800
applications on a Windows fast on a

110
00:04:25,800 --> 00:04:28,229
weight on a Windows system then all the

111
00:04:28,229 --> 00:04:30,210
develop had to do was take

112
00:04:30,210 --> 00:04:32,759
Exe and the DLLs that they cared about

113
00:04:32,759 --> 00:04:35,130
and they deliver them in an earth

114
00:04:35,130 --> 00:04:37,590
application folder on the user system

115
00:04:37,590 --> 00:04:39,930
and windows would give it a nice

116
00:04:39,930 --> 00:04:41,699
separate memory space load up those

117
00:04:41,699 --> 00:04:44,069
tlo's only in that memory space private

118
00:04:44,069 --> 00:04:46,319
to that application so you didn't have

119
00:04:46,319 --> 00:04:47,819
to worry about what the system dll's

120
00:04:47,819 --> 00:04:48,930
were going to do a mess around with that

121
00:04:48,930 --> 00:04:51,720
if you were relying on the system D

122
00:04:51,720 --> 00:04:53,580
allows you could be way more certain

123
00:04:53,580 --> 00:04:55,590
that no third party was going to go

124
00:04:55,590 --> 00:04:57,330
messing around and breaking them on your

125
00:04:57,330 --> 00:04:59,550
users machines because Windows was now

126
00:04:59,550 --> 00:05:02,849
protecting every single system diello

127
00:05:02,849 --> 00:05:08,550
with their WS f feet o WF P and for

128
00:05:08,550 --> 00:05:10,020
those handling the whole transition

129
00:05:10,020 --> 00:05:13,289
between 95 and 2000 they even had this

130
00:05:13,289 --> 00:05:16,320
wonderful tool ducts so you could take a

131
00:05:16,320 --> 00:05:18,240
nasty old school application with

132
00:05:18,240 --> 00:05:19,680
everything scattered all over the place

133
00:05:19,680 --> 00:05:22,590
and run ups against it it'll figure out

134
00:05:22,590 --> 00:05:24,270
where all those dll's hooks are and then

135
00:05:24,270 --> 00:05:26,250
you could just bundle all of that into

136
00:05:26,250 --> 00:05:28,979
your application folder mmm migrate

137
00:05:28,979 --> 00:05:30,330
everything along and everything was

138
00:05:30,330 --> 00:05:32,310
happy and everything was wonderful and

139
00:05:32,310 --> 00:05:34,080
you didn't even have to do it

140
00:05:34,080 --> 00:05:36,750
necessarily whether a Windows 32

141
00:05:36,750 --> 00:05:39,870
application had run time is in there for

142
00:05:39,870 --> 00:05:42,900
POSIX runtimes in there for os/2 I don't

143
00:05:42,900 --> 00:05:44,280
know anyone who ever really used him in

144
00:05:44,280 --> 00:05:46,020
anger but you know they were there this

145
00:05:46,020 --> 00:05:49,139
is the Windows 2000 diagram so the

146
00:05:49,139 --> 00:05:51,659
problem is solved right nonsense this is

147
00:05:51,659 --> 00:05:55,320
Microsoft we're talking about it was and

148
00:05:55,320 --> 00:05:57,539
is and remains an absolute security

149
00:05:57,539 --> 00:06:00,750
nightmare from meet you know how many

150
00:06:00,750 --> 00:06:02,669
exploits are out there that are some

151
00:06:02,669 --> 00:06:05,909
random security DLL sitting in some

152
00:06:05,909 --> 00:06:08,280
random application folder that security

153
00:06:08,280 --> 00:06:10,229
relevant that everybody is having a

154
00:06:10,229 --> 00:06:11,699
wonderful time exploiting because

155
00:06:11,699 --> 00:06:14,340
so-and-so hasn't updated that dll in

156
00:06:14,340 --> 00:06:17,159
their application it's constantly

157
00:06:17,159 --> 00:06:19,199
constantly happening and it's happening

158
00:06:19,199 --> 00:06:21,900
because also there is no centralized way

159
00:06:21,900 --> 00:06:24,960
of updating these applications so every

160
00:06:24,960 --> 00:06:26,460
single Windows application developer

161
00:06:26,460 --> 00:06:28,169
then has to worry about okay how are we

162
00:06:28,169 --> 00:06:29,520
good we've got it okay we've got the

163
00:06:29,520 --> 00:06:31,560
security issue we fix this DLL

164
00:06:31,560 --> 00:06:34,020
we fix our own application how do we

165
00:06:34,020 --> 00:06:36,509
then deliver that to our users Oh fine

166
00:06:36,509 --> 00:06:37,889
we'll just make an update him and then

167
00:06:37,889 --> 00:06:39,870
you end up with the Adobe updater and

168
00:06:39,870 --> 00:06:41,199
steam and

169
00:06:41,199 --> 00:06:44,949
and one issue that doesn't get talked

170
00:06:44,949 --> 00:06:47,139
about a lot but especially in the open

171
00:06:47,139 --> 00:06:50,349
source side of things I think gets ya at

172
00:06:50,349 --> 00:06:52,150
least far more lights depend on it as

173
00:06:52,150 --> 00:06:53,889
well is when you're bundling these

174
00:06:53,889 --> 00:06:57,159
libraries do the licenses actually

175
00:06:57,159 --> 00:07:01,419
permit that use we how many how many how

176
00:07:01,419 --> 00:07:03,900
many GPL cases do we have if some

177
00:07:03,900 --> 00:07:06,279
license just bundled in with application

178
00:07:06,279 --> 00:07:08,439
but nobody realized actually that can't

179
00:07:08,439 --> 00:07:11,080
be thrown away in there and this is

180
00:07:11,080 --> 00:07:13,270
something happened more more often in

181
00:07:13,270 --> 00:07:15,699
the windows world of course it wasn't

182
00:07:15,699 --> 00:07:18,189
terrible storage vendors love it because

183
00:07:18,189 --> 00:07:20,499
this ended up needing to be used more

184
00:07:20,499 --> 00:07:21,849
and more and more because you're putting

185
00:07:21,849 --> 00:07:24,509
on a whole bunch of TLS on the system

186
00:07:24,509 --> 00:07:26,740
but you know they're the only people who

187
00:07:26,740 --> 00:07:28,810
are happy and you know I guess people

188
00:07:28,810 --> 00:07:32,249
like spending money on more hard disks

189
00:07:32,249 --> 00:07:35,020
meanwhile at the same time in Linux land

190
00:07:35,020 --> 00:07:39,879
we were looking on smugly because we

191
00:07:39,879 --> 00:07:42,550
thought we'd already fix this kind of

192
00:07:42,550 --> 00:07:45,069
and we'd fixed it because we delivered

193
00:07:45,069 --> 00:07:47,439
our software in distributions and I

194
00:07:47,439 --> 00:07:48,789
could talk about all the technical

195
00:07:48,789 --> 00:07:50,289
details of which distributions better

196
00:07:50,289 --> 00:07:53,259
and bla bla bla but purely from sort of

197
00:07:53,259 --> 00:07:55,000
a philosophical and organizational

198
00:07:55,000 --> 00:07:58,149
perspective every distribution dealt

199
00:07:58,149 --> 00:08:00,819
with these issues and actually resolved

200
00:08:00,819 --> 00:08:02,770
them just by doing the work they were

201
00:08:02,770 --> 00:08:04,629
doing regardless of the technical

202
00:08:04,629 --> 00:08:06,310
choices of package manager and build

203
00:08:06,310 --> 00:08:11,080
tool and other such things because any

204
00:08:11,080 --> 00:08:13,569
responsible distribution at least had a

205
00:08:13,569 --> 00:08:15,819
care about the security of the software

206
00:08:15,819 --> 00:08:17,439
they were delivering to their users they

207
00:08:17,439 --> 00:08:19,539
have security teams they're auditing the

208
00:08:19,539 --> 00:08:21,069
packages they're putting in their

209
00:08:21,069 --> 00:08:23,919
distribution they're monitoring CVEs for

210
00:08:23,919 --> 00:08:25,180
the packages they're putting in their

211
00:08:25,180 --> 00:08:26,710
distribution they're rolling out

212
00:08:26,710 --> 00:08:28,870
security updates when it goes wrong in

213
00:08:28,870 --> 00:08:31,240
the case of enterprise or commercially

214
00:08:31,240 --> 00:08:32,679
linked distributions you know you're

215
00:08:32,679 --> 00:08:33,940
also likely to have them on the

216
00:08:33,940 --> 00:08:35,529
embargoed security list and therefore

217
00:08:35,529 --> 00:08:38,349
getting information about those CVEs

218
00:08:38,349 --> 00:08:40,360
before they end up being public so

219
00:08:40,360 --> 00:08:42,130
you've got a chance of at least getting

220
00:08:42,130 --> 00:08:43,719
an update out on the day of the

221
00:08:43,719 --> 00:08:45,510
announcement

222
00:08:45,510 --> 00:08:47,770
broader than that just not worrying

223
00:08:47,770 --> 00:08:49,360
about the security side of things

224
00:08:49,360 --> 00:08:51,910
you've got package maintainer who were

225
00:08:51,910 --> 00:08:53,380
you know they're out in the community

226
00:08:53,380 --> 00:08:55,590
wanting to package their software

227
00:08:55,590 --> 00:08:58,000
keeping it updated putting it in the

228
00:08:58,000 --> 00:09:00,580
distribution so the whole how do we

229
00:09:00,580 --> 00:09:03,520
maintain this stuff is partly handled by

230
00:09:03,520 --> 00:09:05,050
these maintainer x' doing it just

231
00:09:05,050 --> 00:09:06,400
because they want to run their software

232
00:09:06,400 --> 00:09:10,330
on their distribution of choice and of

233
00:09:10,330 --> 00:09:11,650
course like I said any responsible

234
00:09:11,650 --> 00:09:13,660
distribution as well also has a legal

235
00:09:13,660 --> 00:09:15,820
team looking at their packages making

236
00:09:15,820 --> 00:09:17,980
sure that the license the licenses of

237
00:09:17,980 --> 00:09:20,290
the software that they're delivering are

238
00:09:20,290 --> 00:09:21,730
compatible with each other

239
00:09:21,730 --> 00:09:22,870
so you're not delivering it in a way

240
00:09:22,870 --> 00:09:25,060
that is invalid with the require the

241
00:09:25,060 --> 00:09:27,250
desires of the requirements of the

242
00:09:27,250 --> 00:09:29,560
developer in question and just you know

243
00:09:29,560 --> 00:09:31,330
generally compliant you're not out you

244
00:09:31,330 --> 00:09:34,030
know awfully breaking laws by bundling

245
00:09:34,030 --> 00:09:38,170
stuff in the breaks licenses so even

246
00:09:38,170 --> 00:09:40,210
though we're kind of doing the Windows

247
00:09:40,210 --> 00:09:42,100
3.1 dumping everything in one shared

248
00:09:42,100 --> 00:09:43,750
bundle and generally live machette like

249
00:09:43,750 --> 00:09:47,440
these things aren't too bad and when

250
00:09:47,440 --> 00:09:49,800
we're talking about containerization and

251
00:09:49,800 --> 00:09:52,090
yeah container waster tools like flat

252
00:09:52,090 --> 00:09:54,010
back and snappy you know everyone so

253
00:09:54,010 --> 00:09:55,510
let's kill off shared libraries that's

254
00:09:55,510 --> 00:09:57,190
just you know it's a it's a mess

255
00:09:57,190 --> 00:09:59,110
you know this space doesn't matter now

256
00:09:59,110 --> 00:10:02,260
anyway everyone's got bigger discs but

257
00:10:02,260 --> 00:10:03,640
when you start looking at the real work

258
00:10:03,640 --> 00:10:06,550
of maintaining everything shared

259
00:10:06,550 --> 00:10:08,140
libraries have another benefit you know

260
00:10:08,140 --> 00:10:09,690
it's not just about the disk space

261
00:10:09,690 --> 00:10:11,620
distributing fewer libraries means

262
00:10:11,620 --> 00:10:13,750
you've got less work worrying about that

263
00:10:13,750 --> 00:10:15,340
security the security implications

264
00:10:15,340 --> 00:10:16,960
you've got one set of libraries to worry

265
00:10:16,960 --> 00:10:18,610
about auditing one sort of lobbies to

266
00:10:18,610 --> 00:10:20,770
worry about patching less manpower to

267
00:10:20,770 --> 00:10:22,990
maintain it and it's easy to view that

268
00:10:22,990 --> 00:10:25,720
legal compliance especially when despite

269
00:10:25,720 --> 00:10:27,130
everybody's best efforts you know

270
00:10:27,130 --> 00:10:29,440
projects love changing their licenses

271
00:10:29,440 --> 00:10:32,290
and there is nothing worse than one

272
00:10:32,290 --> 00:10:34,540
version of a product being project of on

273
00:10:34,540 --> 00:10:36,130
being on one license and then changing

274
00:10:36,130 --> 00:10:37,870
to another and figuring out okay can we

275
00:10:37,870 --> 00:10:40,660
can we ship both are they compatible you

276
00:10:40,660 --> 00:10:42,400
know we've we've seen that before where

277
00:10:42,400 --> 00:10:43,780
project ended up actually you know we

278
00:10:43,780 --> 00:10:45,520
have to move because their license isn't

279
00:10:45,520 --> 00:10:46,810
actually compatible with their old one

280
00:10:46,810 --> 00:10:51,130
it's it's yeah so shared libraries do

281
00:10:51,130 --> 00:10:52,780
solve a lot of those issues by at least

282
00:10:52,780 --> 00:10:55,060
giving you one contain you know one

283
00:10:55,060 --> 00:10:56,920
integrated base once you've done the

284
00:10:56,920 --> 00:10:57,570
work to actually

285
00:10:57,570 --> 00:11:00,660
that base together so mission

286
00:11:00,660 --> 00:11:02,520
accomplished well no you know the

287
00:11:02,520 --> 00:11:04,380
traditional distribution model also has

288
00:11:04,380 --> 00:11:06,570
its flaws and these are the flaws which

289
00:11:06,570 --> 00:11:09,390
containerized apps really sell promises

290
00:11:09,390 --> 00:11:11,430
trying to fix you know improving the

291
00:11:11,430 --> 00:11:13,050
compatibility so developers don't have

292
00:11:13,050 --> 00:11:14,430
to rewrite their application for all

293
00:11:14,430 --> 00:11:16,620
these different shows and bases of the

294
00:11:16,620 --> 00:11:17,600
distribution

295
00:11:17,600 --> 00:11:19,950
obviously portability also so you can

296
00:11:19,950 --> 00:11:21,780
just do it once and then have it work

297
00:11:21,780 --> 00:11:26,100
everywhere and distributions typically

298
00:11:26,100 --> 00:11:27,660
like to do that work at a certain

299
00:11:27,660 --> 00:11:30,810
cadence and that cadence is unlikely to

300
00:11:30,810 --> 00:11:32,160
actually match the application

301
00:11:32,160 --> 00:11:34,860
developers cadence so therefore the

302
00:11:34,860 --> 00:11:36,510
issue of pace of change comes up of you

303
00:11:36,510 --> 00:11:38,640
know a new upstream release has happened

304
00:11:38,640 --> 00:11:41,340
and no distribution is shipping that new

305
00:11:41,340 --> 00:11:42,720
version because you know they've

306
00:11:42,720 --> 00:11:44,520
released a tool says they'll do it in 8

307
00:11:44,520 --> 00:11:47,190
months or whatever but the reason they

308
00:11:47,190 --> 00:11:48,570
do that is because it doesn't yeah they

309
00:11:48,570 --> 00:11:51,690
want to make sure it works so there we

310
00:11:51,690 --> 00:11:54,870
are like I said a little bit like the

311
00:11:54,870 --> 00:11:58,250
Windows 3.1 situation

312
00:12:00,360 --> 00:12:02,939
the compatibility problem the

313
00:12:02,939 --> 00:12:04,230
containerized apps are trying to solve

314
00:12:04,230 --> 00:12:06,389
really both down to these simple points

315
00:12:06,389 --> 00:12:08,129
you know we we have lots of

316
00:12:08,129 --> 00:12:08,910
distributions

317
00:12:08,910 --> 00:12:12,360
you know maybe too many of them with

318
00:12:12,360 --> 00:12:13,829
many different libraries different apps

319
00:12:13,829 --> 00:12:16,889
and different modifications in their the

320
00:12:16,889 --> 00:12:18,149
applications themselves require

321
00:12:18,149 --> 00:12:20,819
different libraries and application

322
00:12:20,819 --> 00:12:23,369
developers don't care and they don't

323
00:12:23,369 --> 00:12:24,959
want to care and they're never going to

324
00:12:24,959 --> 00:12:26,759
want the care they just want to build

325
00:12:26,759 --> 00:12:28,319
something that works and push it out

326
00:12:28,319 --> 00:12:35,100
there which is fine but most people but

327
00:12:35,100 --> 00:12:36,989
we've solved this problem in the in the

328
00:12:36,989 --> 00:12:39,029
distribution world already we have

329
00:12:39,029 --> 00:12:40,379
maintained errs who deal with all that

330
00:12:40,379 --> 00:12:42,660
work it's not upstream packages putting

331
00:12:42,660 --> 00:12:43,999
stuff in distribution first at the time

332
00:12:43,999 --> 00:12:46,799
its distribution packages figuring out

333
00:12:46,799 --> 00:12:48,540
what crazy stuff upstream have done and

334
00:12:48,540 --> 00:12:50,040
then distributing it in the distribution

335
00:12:50,040 --> 00:12:53,459
and it works wonderfully when it comes

336
00:12:53,459 --> 00:12:55,199
to free and open source license

337
00:12:55,199 --> 00:12:58,709
applications obviously proprietary

338
00:12:58,709 --> 00:13:02,399
applications whole different story on

339
00:13:02,399 --> 00:13:04,589
the portability side of things much the

340
00:13:04,589 --> 00:13:06,449
same story much the same problem you

341
00:13:06,449 --> 00:13:07,980
know if you're doing all of this work to

342
00:13:07,980 --> 00:13:09,629
get the thing working you only want to

343
00:13:09,629 --> 00:13:11,129
do it once you don't want to have to

344
00:13:11,129 --> 00:13:12,869
repeat this three times four times five

345
00:13:12,869 --> 00:13:15,079
times and with a very diverse

346
00:13:15,079 --> 00:13:18,389
distribution ecosystem having a nice

347
00:13:18,389 --> 00:13:20,910
application that open and built ones and

348
00:13:20,910 --> 00:13:22,860
runs everywhere definitely has a certain

349
00:13:22,860 --> 00:13:28,919
appeal but again does it really matter

350
00:13:28,919 --> 00:13:32,569
if somebody's rebuilding it anyway

351
00:13:35,870 --> 00:13:39,140
and then the pace of change problem like

352
00:13:39,140 --> 00:13:40,970
I say distributions generally have fixed

353
00:13:40,970 --> 00:13:44,360
release schedules and those release

354
00:13:44,360 --> 00:13:45,830
schedules generally mean the package

355
00:13:45,830 --> 00:13:48,020
versions are frozen in there any changes

356
00:13:48,020 --> 00:13:49,580
are very reluctant if they are going to

357
00:13:49,580 --> 00:13:52,070
be in there so that holds back the new

358
00:13:52,070 --> 00:13:53,710
versions new innovations new things

359
00:13:53,710 --> 00:13:56,630
project is released from users that's a

360
00:13:56,630 --> 00:14:01,130
bad thing rolling distributions are

361
00:14:01,130 --> 00:14:03,529
becoming more and more of a trend in my

362
00:14:03,529 --> 00:14:05,180
in the case of openSUSE we're now

363
00:14:05,180 --> 00:14:06,080
running you know we're now doing

364
00:14:06,080 --> 00:14:07,490
tumbleweed as one of our main

365
00:14:07,490 --> 00:14:10,970
distributions and this totally solves

366
00:14:10,970 --> 00:14:12,770
that problem in fact in many cases we're

367
00:14:12,770 --> 00:14:14,750
now not only keeping pace with upstream

368
00:14:14,750 --> 00:14:16,730
projects in some cases we sometimes

369
00:14:16,730 --> 00:14:18,290
outpace it and then have to actually

370
00:14:18,290 --> 00:14:19,670
slow things down so we're not shipping

371
00:14:19,670 --> 00:14:21,670
their next release before they are

372
00:14:21,670 --> 00:14:25,010
because it's all and get so we just tell

373
00:14:25,010 --> 00:14:26,839
plug build service and to get and

374
00:14:26,839 --> 00:14:31,480
everything's fine and wonderful kind of

375
00:14:31,480 --> 00:14:35,110
but that's the distro side of things

376
00:14:35,110 --> 00:14:37,750
containerized applications want to solve

377
00:14:37,750 --> 00:14:40,000
the same problems and when I'm talking

378
00:14:40,000 --> 00:14:41,890
about this I'm talking really about app

379
00:14:41,890 --> 00:14:44,560
image flat-pack and snapping of course

380
00:14:44,560 --> 00:14:48,220
app image started in 2003 flat-pack 2013

381
00:14:48,220 --> 00:14:50,860
and snappy so yeah flat-pack has been

382
00:14:50,860 --> 00:14:52,810
doing this for a very happy much have

383
00:14:52,810 --> 00:14:56,680
been doing this for a very long time I'm

384
00:14:56,680 --> 00:14:58,240
not going to go into the ins and outs of

385
00:14:58,240 --> 00:15:00,550
you know how they all individually work

386
00:15:00,550 --> 00:15:02,800
or compare them talking in general terms

387
00:15:02,800 --> 00:15:04,690
because these issues are shared across

388
00:15:04,690 --> 00:15:06,130
all of them so you know generally

389
00:15:06,130 --> 00:15:09,160
speaking their bunt they produce a

390
00:15:09,160 --> 00:15:12,040
bundle be at a tarball or some other way

391
00:15:12,040 --> 00:15:14,410
of packaging things up containing an

392
00:15:14,410 --> 00:15:16,149
application and all the dependencies or

393
00:15:16,149 --> 00:15:18,579
the likely to dip requires and then they

394
00:15:18,579 --> 00:15:20,589
run it in some kind of container or

395
00:15:20,589 --> 00:15:25,209
chroot or sandbox and they make huge

396
00:15:25,209 --> 00:15:27,040
promises these are all ripped straight

397
00:15:27,040 --> 00:15:28,720
from their web sites straight from their

398
00:15:28,720 --> 00:15:30,220
documentation you know all the

399
00:15:30,220 --> 00:15:31,779
compatibility problems are solved she

400
00:15:31,779 --> 00:15:32,829
just put everything in there

401
00:15:32,829 --> 00:15:34,779
everything's going to work fine

402
00:15:34,779 --> 00:15:36,579
you know the portability problems

403
00:15:36,579 --> 00:15:37,779
herself you just put everything there

404
00:15:37,779 --> 00:15:39,190
you can run out on every distribution

405
00:15:39,190 --> 00:15:40,720
everything is absolutely fine and

406
00:15:40,720 --> 00:15:43,480
wonderful pace of change Bob you're the

407
00:15:43,480 --> 00:15:44,950
one doing it you're doing the the

408
00:15:44,950 --> 00:15:47,110
upstream source you then can do your app

409
00:15:47,110 --> 00:15:49,060
image your flat back everything's fine

410
00:15:49,060 --> 00:15:50,410
and it's just gonna work everything's

411
00:15:50,410 --> 00:15:55,329
perfect and then you get architecture

412
00:15:55,329 --> 00:15:58,540
diagrams like this or like this one from

413
00:15:58,540 --> 00:16:00,630
flat back

414
00:16:00,630 --> 00:16:04,200
and it's a bit too fuzzy so I'll stick

415
00:16:04,200 --> 00:16:08,690
with this one what you end up with these

416
00:16:08,690 --> 00:16:12,030
tool sets actually doing is taking the

417
00:16:12,030 --> 00:16:13,830
application the set of dependencies

418
00:16:13,830 --> 00:16:16,380
which in the case of snappy and flat

419
00:16:16,380 --> 00:16:19,260
pack actually include frameworks or run

420
00:16:19,260 --> 00:16:23,160
times where there's effectively pre pre

421
00:16:23,160 --> 00:16:24,870
pre curated bundles of these

422
00:16:24,870 --> 00:16:27,030
applications or sitting there and then

423
00:16:27,030 --> 00:16:28,350
below that there's just the operating

424
00:16:28,350 --> 00:16:29,940
system and you don't have to worry about

425
00:16:29,940 --> 00:16:31,380
that you know the case of snappy it's

426
00:16:31,380 --> 00:16:32,640
you know they're always going to say a

427
00:16:32,640 --> 00:16:34,500
bun - I quite like flat pack because

428
00:16:34,500 --> 00:16:36,390
they just say an operating system which

429
00:16:36,390 --> 00:16:37,980
is if you're going to do this that's how

430
00:16:37,980 --> 00:16:42,960
it should be the problem is you're

431
00:16:42,960 --> 00:16:44,460
making assumptions about what is

432
00:16:44,460 --> 00:16:48,120
actually below that line soon you know

433
00:16:48,120 --> 00:16:49,860
you've taken the dependency problem of

434
00:16:49,860 --> 00:16:51,690
okay my application needed this library

435
00:16:51,690 --> 00:16:54,240
and now it's my application and all of

436
00:16:54,240 --> 00:16:56,910
its dependencies need this version of G

437
00:16:56,910 --> 00:17:01,860
Lipsy or this kernel or whatever and no

438
00:17:01,860 --> 00:17:03,330
one's quite defined where that line is

439
00:17:03,330 --> 00:17:08,939
yet and there's no common base every

440
00:17:08,939 --> 00:17:11,939
distribution is different even debian

441
00:17:11,939 --> 00:17:13,439
distributions in that family are

442
00:17:13,439 --> 00:17:14,910
different rpm distributions in that

443
00:17:14,910 --> 00:17:16,439
family are different we package things

444
00:17:16,439 --> 00:17:17,880
in different ways because we've solved

445
00:17:17,880 --> 00:17:19,079
these problems differently in our in

446
00:17:19,079 --> 00:17:22,020
environments over the years so sooner or

447
00:17:22,020 --> 00:17:23,459
later as you start crossing that line

448
00:17:23,459 --> 00:17:26,010
between the containerized application

449
00:17:26,010 --> 00:17:29,160
and it's run times and whatever it's

450
00:17:29,160 --> 00:17:31,890
getting from the base system it's gonna

451
00:17:31,890 --> 00:17:34,530
start breaking and like I said app image

452
00:17:34,530 --> 00:17:37,260
have been doing this since 2003 and they

453
00:17:37,260 --> 00:17:38,850
know this problem they don't lie about

454
00:17:38,850 --> 00:17:40,430
this they don't do graphs like this

455
00:17:40,430 --> 00:17:43,500
instead in their documentation they

456
00:17:43,500 --> 00:17:46,110
outright say that the only way you can

457
00:17:46,110 --> 00:17:47,910
build a portable image with that image

458
00:17:47,910 --> 00:17:50,280
is decide which distributions you're

459
00:17:50,280 --> 00:17:53,070
targeting and then look at every

460
00:17:53,070 --> 00:17:55,290
dependency you need that not in any of

461
00:17:55,290 --> 00:17:59,790
those and put them all in there it'll

462
00:17:59,790 --> 00:18:03,040
work but that's a huge amount of work

463
00:18:03,040 --> 00:18:05,200
but that's what you have to do to

464
00:18:05,200 --> 00:18:07,720
actually avoid this issue we're seeing

465
00:18:07,720 --> 00:18:09,700
this in openSUSE who is like steam which

466
00:18:09,700 --> 00:18:11,410
is doesn't quite fit into this model but

467
00:18:11,410 --> 00:18:13,600
you know steam is effectively delivered

468
00:18:13,600 --> 00:18:15,790
on on Linux as a bun to one time with

469
00:18:15,790 --> 00:18:17,380
steam running on top so I mean kind of

470
00:18:17,380 --> 00:18:19,930
following this same model again that

471
00:18:19,930 --> 00:18:21,640
runtime makes assumptions as soon as we

472
00:18:21,640 --> 00:18:23,020
change something in our base system that

473
00:18:23,020 --> 00:18:24,580
is incompatible with what they're

474
00:18:24,580 --> 00:18:25,930
expecting from a you know they're

475
00:18:25,930 --> 00:18:28,980
bunching 1 times expecting it all breaks

476
00:18:28,980 --> 00:18:31,660
you need to worry about the dependencies

477
00:18:31,660 --> 00:18:33,010
you've just shifted the problem from

478
00:18:33,010 --> 00:18:34,330
higher up the stack to lower down the

479
00:18:34,330 --> 00:18:40,300
stack so if you really want to make a

480
00:18:40,300 --> 00:18:42,130
portable application you have to put in

481
00:18:42,130 --> 00:18:44,490
every single dependency you might need

482
00:18:44,490 --> 00:18:47,980
if not expect trashes your users will

483
00:18:47,980 --> 00:18:51,790
not be able to use your application so

484
00:18:51,790 --> 00:18:53,430
what's the point

485
00:18:53,430 --> 00:18:56,020
well like I said in the case of flat

486
00:18:56,020 --> 00:18:58,150
pack and snappy they're trying to

487
00:18:58,150 --> 00:19:00,580
mitigate this problem by doing one time

488
00:19:00,580 --> 00:19:03,130
so at least you say with flat pack you

489
00:19:03,130 --> 00:19:04,870
have like the G together known runtime

490
00:19:04,870 --> 00:19:06,580
in there you effectively have all of the

491
00:19:06,580 --> 00:19:08,230
libraries all of the dependencies to do

492
00:19:08,230 --> 00:19:10,360
a gnome application sitting in that one

493
00:19:10,360 --> 00:19:12,370
time so as a developer you can at least

494
00:19:12,370 --> 00:19:14,830
target that runtime know that's going to

495
00:19:14,830 --> 00:19:17,410
be there generally hope that everything

496
00:19:17,410 --> 00:19:19,390
further down the stack is sane and ok

497
00:19:19,390 --> 00:19:22,570
and just get on and do the work and it

498
00:19:22,570 --> 00:19:24,850
does mitigate the problem but at the

499
00:19:24,850 --> 00:19:26,830
same time even you've generated a whole

500
00:19:26,830 --> 00:19:28,030
nother one which I'll talk about in a

501
00:19:28,030 --> 00:19:31,270
minute and the responsibility of that

502
00:19:31,270 --> 00:19:34,480
kind of middle distro becomes you know

503
00:19:34,480 --> 00:19:36,070
really hard to do their job right they

504
00:19:36,070 --> 00:19:37,840
have to then make sure that runtime is

505
00:19:37,840 --> 00:19:39,310
keeping up-to-date with everything that

506
00:19:39,310 --> 00:19:41,440
that one time is secure at runtime is

507
00:19:41,440 --> 00:19:44,440
all patched and those answers are

508
00:19:44,440 --> 00:19:45,310
something which is still in a very

509
00:19:45,310 --> 00:19:49,270
jessica state at the moment I'm not sure

510
00:19:49,270 --> 00:19:52,360
about the real solution but looking at

511
00:19:52,360 --> 00:19:53,770
it from a district perspective you know

512
00:19:53,770 --> 00:19:55,510
way back when we had this concept of a

513
00:19:55,510 --> 00:19:57,430
Linux tended base of you know a common

514
00:19:57,430 --> 00:19:59,710
Linux that every developer could just

515
00:19:59,710 --> 00:20:02,590
assume is underneath there of course

516
00:20:02,590 --> 00:20:04,570
that was a pretty hard and pretty

517
00:20:04,570 --> 00:20:07,210
impossible agreement to make but now

518
00:20:07,210 --> 00:20:08,590
with these applications with

519
00:20:08,590 --> 00:20:10,390
containerization becoming more maybe

520
00:20:10,390 --> 00:20:12,220
it's time to revisit that idea because

521
00:20:12,220 --> 00:20:13,750
like I say the dependency problem gets

522
00:20:13,750 --> 00:20:15,360
shifted around by these technologies

523
00:20:15,360 --> 00:20:17,080
maybe collect

524
00:20:17,080 --> 00:20:18,670
the distributions should be to get

525
00:20:18,670 --> 00:20:20,110
around the table and find out okay

526
00:20:20,110 --> 00:20:22,570
you know here's the new line is where

527
00:20:22,570 --> 00:20:24,790
we're gonna tell every contain a

528
00:20:24,790 --> 00:20:26,470
developer you know we'll worry about

529
00:20:26,470 --> 00:20:28,360
this and we'll do this in a roughly

530
00:20:28,360 --> 00:20:31,210
standard kind of way and then work on

531
00:20:31,210 --> 00:20:32,860
from there so you know maybe we need a

532
00:20:32,860 --> 00:20:37,870
new LSB that actually works so the

533
00:20:37,870 --> 00:20:39,310
reality of the big promises of

534
00:20:39,310 --> 00:20:41,200
containerized applications is well

535
00:20:41,200 --> 00:20:43,240
they're not going to be compatible you

536
00:20:43,240 --> 00:20:44,890
do you know unless you're going to worry

537
00:20:44,890 --> 00:20:47,020
about every single dependency it's not

538
00:20:47,020 --> 00:20:49,270
going to necessarily work they're not

539
00:20:49,270 --> 00:20:50,710
going to be portable unless you do every

540
00:20:50,710 --> 00:20:52,360
dependencies every district which you

541
00:20:52,360 --> 00:20:53,770
might possibly want to have a user

542
00:20:53,770 --> 00:20:56,020
running it on the pace of change thing

543
00:20:56,020 --> 00:20:58,150
that's solved it does solve that real

544
00:20:58,150 --> 00:21:00,730
problem but you can't say it's just

545
00:21:00,730 --> 00:21:02,950
going to work now you can maybe say it's

546
00:21:02,950 --> 00:21:04,480
going to work on certain distributions

547
00:21:04,480 --> 00:21:06,250
like app image suggests you should be

548
00:21:06,250 --> 00:21:08,620
saying but you can't guarantee it's

549
00:21:08,620 --> 00:21:11,250
going to work everywhere

550
00:21:14,250 --> 00:21:17,370
and this is just like we had in Windows

551
00:21:17,370 --> 00:21:22,610
2000 we're repeating history with this

552
00:21:22,610 --> 00:21:25,410
because even if you say this is still

553
00:21:25,410 --> 00:21:26,990
worth it and still worth going ahead

554
00:21:26,990 --> 00:21:29,340
with these technologies and still doing

555
00:21:29,340 --> 00:21:32,400
that way we're going to end up with

556
00:21:32,400 --> 00:21:34,710
security relevant libraries in all of

557
00:21:34,710 --> 00:21:35,670
these containers you know you're

558
00:21:35,670 --> 00:21:36,900
bundling all those dependencies in there

559
00:21:36,900 --> 00:21:40,020
to make this work who's gonna be making

560
00:21:40,020 --> 00:21:41,310
sure they're valid who's gonna be making

561
00:21:41,310 --> 00:21:42,390
sure they're secure who's gonna be

562
00:21:42,390 --> 00:21:46,500
patching them when they're in there how

563
00:21:46,500 --> 00:21:48,660
are you gonna patch them you know okay

564
00:21:48,660 --> 00:21:51,060
most you know snappy does have the

565
00:21:51,060 --> 00:21:52,890
concept of app stores but how do you

566
00:21:52,890 --> 00:21:54,690
guarantee then that everybody with your

567
00:21:54,690 --> 00:21:56,430
snap from every app store gets the right

568
00:21:56,430 --> 00:21:58,020
version at the right time I mean that's

569
00:21:58,020 --> 00:22:01,260
gonna be a bit of a mess you know how do

570
00:22:01,260 --> 00:22:02,430
you how do you handle the package

571
00:22:02,430 --> 00:22:03,720
management for a flat pack with app

572
00:22:03,720 --> 00:22:06,030
image they don't even have a rough

573
00:22:06,030 --> 00:22:07,590
answer for that now as far as I can tell

574
00:22:07,590 --> 00:22:09,390
it's you know just download a new bundle

575
00:22:09,390 --> 00:22:12,030
from the website it's you know they're

576
00:22:12,030 --> 00:22:13,140
gonna have to have people creating

577
00:22:13,140 --> 00:22:16,080
updated apps for this thing who's doing

578
00:22:16,080 --> 00:22:17,790
the legal review for all of these but

579
00:22:17,790 --> 00:22:20,640
all these these dependencies in these

580
00:22:20,640 --> 00:22:23,340
bundles who's making sure that they all

581
00:22:23,340 --> 00:22:25,050
can be distribute at the same time

582
00:22:25,050 --> 00:22:26,700
especially when you look at certain

583
00:22:26,700 --> 00:22:30,300
licenses where the the runtime aspect of

584
00:22:30,300 --> 00:22:31,800
the license is final you know we can

585
00:22:31,800 --> 00:22:33,690
plug into anything and everything's fine

586
00:22:33,690 --> 00:22:36,720
but we care about how you distribute or

587
00:22:36,720 --> 00:22:39,330
redistribute the software that's where

588
00:22:39,330 --> 00:22:42,210
our lawyers inside openSUSE really spend

589
00:22:42,210 --> 00:22:43,200
a lot of time and effort paying

590
00:22:43,200 --> 00:22:44,400
attention to of you know making sure

591
00:22:44,400 --> 00:22:46,350
that we can legally redistribute this

592
00:22:46,350 --> 00:22:48,270
software who's going to be doing that

593
00:22:48,270 --> 00:22:50,520
for your application develop it for

594
00:22:50,520 --> 00:22:52,650
these containerized applications you

595
00:22:52,650 --> 00:22:53,910
know if you've got thousands of people

596
00:22:53,910 --> 00:22:55,710
using these tools to build all these

597
00:22:55,710 --> 00:22:57,960
applications do you need thousands more

598
00:22:57,960 --> 00:23:00,840
lawyers but of course it's not all bad

599
00:23:00,840 --> 00:23:02,340
storage vendors they're going to be even

600
00:23:02,340 --> 00:23:03,450
happier because you're gonna be buying

601
00:23:03,450 --> 00:23:08,250
even bigger discs these tools are really

602
00:23:08,250 --> 00:23:12,600
powerful they are really cool but with

603
00:23:12,600 --> 00:23:14,720
great power comes great responsibilities

604
00:23:14,720 --> 00:23:17,790
and I think with with these athletes

605
00:23:17,790 --> 00:23:19,260
with these tools like slits snapback and

606
00:23:19,260 --> 00:23:20,920
floppy

607
00:23:20,920 --> 00:23:25,760
flat-pack and snappy the the only real

608
00:23:25,760 --> 00:23:29,690
solution if you're using them is to

609
00:23:29,690 --> 00:23:31,550
start thinking like a distribution

610
00:23:31,550 --> 00:23:34,070
developer and maintainer

611
00:23:34,070 --> 00:23:35,990
you're gonna have to deal with the same

612
00:23:35,990 --> 00:23:37,670
responsibilities that we deal with in

613
00:23:37,670 --> 00:23:40,700
the distribution world you're gonna have

614
00:23:40,700 --> 00:23:43,940
to consider how you bundle this how you

615
00:23:43,940 --> 00:23:45,920
maintain it what is your update cadence

616
00:23:45,920 --> 00:23:47,360
how can you how do you deal with the

617
00:23:47,360 --> 00:23:49,510
update cadence of all your dependencies

618
00:23:49,510 --> 00:23:52,340
do you therefore end up doing regular

619
00:23:52,340 --> 00:23:55,010
releases every few months are you you

620
00:23:55,010 --> 00:23:57,340
you bundle them into your application

621
00:23:57,340 --> 00:23:59,930
you know where do you bundle them where

622
00:23:59,930 --> 00:24:01,370
do you draw that line which of course is

623
00:24:01,370 --> 00:24:04,010
something like I say the the new base

624
00:24:04,010 --> 00:24:07,490
might be an answer for you're still

625
00:24:07,490 --> 00:24:09,320
gonna have to develop and test

626
00:24:09,320 --> 00:24:11,230
everything on every possible distro

627
00:24:11,230 --> 00:24:13,730
unless you bundle every dependency that

628
00:24:13,730 --> 00:24:15,500
you need for anywhere you're still going

629
00:24:15,500 --> 00:24:16,910
to have this problem of making sure that

630
00:24:16,910 --> 00:24:18,910
does your bundle work on these districts

631
00:24:18,910 --> 00:24:21,020
you're still gonna have to if you if

632
00:24:21,020 --> 00:24:23,450
you're doing some kind of regular update

633
00:24:23,450 --> 00:24:24,470
cadence you're gonna have to worry about

634
00:24:24,470 --> 00:24:25,880
all your patches and making sure they

635
00:24:25,880 --> 00:24:27,980
all work again and I suspect you're

636
00:24:27,980 --> 00:24:29,390
gonna end up crying because it's all

637
00:24:29,390 --> 00:24:33,530
kind of break anyway and you're gonna

638
00:24:33,530 --> 00:24:35,030
have to worry about the security side of

639
00:24:35,030 --> 00:24:37,540
things you're gonna have to worry about

640
00:24:37,540 --> 00:24:40,790
auditing all not just your code but all

641
00:24:40,790 --> 00:24:42,290
of the code of every dependency you've

642
00:24:42,290 --> 00:24:44,510
chosen to put in your bundle and you're

643
00:24:44,510 --> 00:24:45,560
gonna be mother to have to monitor the

644
00:24:45,560 --> 00:24:47,480
CVEs for those bundles you're gonna have

645
00:24:47,480 --> 00:24:50,810
to audit those libraries and as you

646
00:24:50,810 --> 00:24:53,270
heard in the previous talk you can't

647
00:24:53,270 --> 00:24:55,130
necessarily assume sandboxing is going

648
00:24:55,130 --> 00:24:57,350
to be enough you know Sam boxing is a

649
00:24:57,350 --> 00:24:58,730
great safety net with some of these

650
00:24:58,730 --> 00:25:01,550
tools do you recommend and do use but it

651
00:25:01,550 --> 00:25:03,080
should be thought of as a safety net not

652
00:25:03,080 --> 00:25:05,660
as a solution to these problems security

653
00:25:05,660 --> 00:25:06,650
is something that should be integrated

654
00:25:06,650 --> 00:25:09,380
by design and then you have a safety net

655
00:25:09,380 --> 00:25:12,310
to cover your ass when it screws up

656
00:25:12,310 --> 00:25:14,510
you're gonna have to have a nice fast

657
00:25:14,510 --> 00:25:16,310
way of getting that update through and

658
00:25:16,310 --> 00:25:18,860
out to users very very quickly and in a

659
00:25:18,860 --> 00:25:20,570
relatively efficient way and of course

660
00:25:20,570 --> 00:25:21,920
that gets tricky if you've got all these

661
00:25:21,920 --> 00:25:23,750
big bundles full of all of these big

662
00:25:23,750 --> 00:25:26,570
libraries many many times over and you

663
00:25:26,570 --> 00:25:27,860
know let's just imagine you know

664
00:25:27,860 --> 00:25:29,840
everybody's got a copy of OpenSSL inside

665
00:25:29,840 --> 00:25:30,769
there

666
00:25:30,769 --> 00:25:34,529
inside their container how many times

667
00:25:34,529 --> 00:25:35,880
you're gonna have to download a whole

668
00:25:35,880 --> 00:25:37,350
new bundle you know on on the same

669
00:25:37,350 --> 00:25:38,730
machine does a user really want to

670
00:25:38,730 --> 00:25:41,039
download 40 gig just because you know we

671
00:25:41,039 --> 00:25:42,750
fixed one issue in one Lib but it has

672
00:25:42,750 --> 00:25:43,799
happened to be in 40 different

673
00:25:43,799 --> 00:25:48,049
applications it's gonna be painful and

674
00:25:48,049 --> 00:25:51,539
yeah legal side of things we're gonna

675
00:25:51,539 --> 00:25:53,009
have to you know get anyone using these

676
00:25:53,009 --> 00:25:54,299
tools is gonna have to review the

677
00:25:54,299 --> 00:25:55,679
license is gonna have to make sure that

678
00:25:55,679 --> 00:25:57,899
what they're doing is aboveboard is work

679
00:25:57,899 --> 00:26:00,389
is compatible and it's compliant with

680
00:26:00,389 --> 00:26:03,090
the licenses that not just the original

681
00:26:03,090 --> 00:26:04,740
software is included but all of the

682
00:26:04,740 --> 00:26:08,179
penalties and like we saw involved I

683
00:26:08,389 --> 00:26:10,679
think distributions can and should be

684
00:26:10,679 --> 00:26:13,259
part of this solution you know I've been

685
00:26:13,259 --> 00:26:15,059
up here now I've been ranting about why

686
00:26:15,059 --> 00:26:16,799
all this technology is bad I actually

687
00:26:16,799 --> 00:26:19,019
like this idea I like the idea of

688
00:26:19,019 --> 00:26:20,879
containerized applications because from

689
00:26:20,879 --> 00:26:22,500
a distribution point of view I'm gonna

690
00:26:22,500 --> 00:26:25,529
have less work you know if application

691
00:26:25,529 --> 00:26:26,820
developers are doing all of this stuff

692
00:26:26,820 --> 00:26:28,139
and worrying about all of this stuff and

693
00:26:28,139 --> 00:26:30,029
distributing it I have less packages to

694
00:26:30,029 --> 00:26:31,950
worry about in my distribution I have

695
00:26:31,950 --> 00:26:34,399
less responsibility for those packages I

696
00:26:34,399 --> 00:26:36,720
actually want to encourage this idea

697
00:26:36,720 --> 00:26:39,210
because I think it is if done moderately

698
00:26:39,210 --> 00:26:42,029
and sensibly a more sustainable model

699
00:26:42,029 --> 00:26:43,590
than everything being centralized in a

700
00:26:43,590 --> 00:26:46,169
distribution but I just want to make

701
00:26:46,169 --> 00:26:48,000
sure my users don't get eaten by broken

702
00:26:48,000 --> 00:26:51,870
dangerous apps in the process so like I

703
00:26:51,870 --> 00:26:53,929
said I think distribution should be

704
00:26:53,929 --> 00:26:57,059
coming together thinking about a common

705
00:26:57,059 --> 00:27:00,440
base for where that line is between the

706
00:27:00,440 --> 00:27:02,580
underlying distribution side of things

707
00:27:02,580 --> 00:27:04,610
and all of the libraries on top

708
00:27:04,610 --> 00:27:07,350
otherwise the portability promise is

709
00:27:07,350 --> 00:27:08,610
never going to be achievable

710
00:27:08,610 --> 00:27:11,220
unless that exists I don't really see

711
00:27:11,220 --> 00:27:12,929
everybody bundling everything in every

712
00:27:12,929 --> 00:27:16,649
application that will just be crazy and

713
00:27:16,649 --> 00:27:19,049
I also think this you know with some of

714
00:27:19,049 --> 00:27:21,720
these tools there's kind of a tendency

715
00:27:21,720 --> 00:27:23,220
to kind of paint the distributions azure

716
00:27:23,220 --> 00:27:25,110
width this is the evil that the tool is

717
00:27:25,110 --> 00:27:26,519
expecting I try to get rid of oh you

718
00:27:26,519 --> 00:27:28,019
don't have to worry about sending your

719
00:27:28,019 --> 00:27:29,820
package submission anymore you don't

720
00:27:29,820 --> 00:27:31,679
have to worry about this crazy verb you

721
00:27:31,679 --> 00:27:34,279
don't have to worry about that

722
00:27:34,279 --> 00:27:36,720
distributions have these tools and these

723
00:27:36,720 --> 00:27:38,519
processes and these techniques because

724
00:27:38,519 --> 00:27:39,720
we've been dealing with these problems

725
00:27:39,720 --> 00:27:41,750
in the real world for years

726
00:27:41,750 --> 00:27:44,270
so actually looking at our tools looking

727
00:27:44,270 --> 00:27:45,710
at how for example the openSUSE build

728
00:27:45,710 --> 00:27:47,450
service works looking at how open QA

729
00:27:47,450 --> 00:27:50,810
works has a surprising relevance to

730
00:27:50,810 --> 00:27:53,240
these technologies and you don't have to

731
00:27:53,240 --> 00:27:55,520
necessarily reinvent every will the

732
00:27:55,520 --> 00:27:57,130
solution might be a simple case of

733
00:27:57,130 --> 00:27:59,630
patching in a new package format into

734
00:27:59,630 --> 00:28:11,590
those tools to then handle yeah one last

735
00:28:11,590 --> 00:28:16,400
final thing for this I'm not sure

736
00:28:16,400 --> 00:28:18,710
despite me liking the idea and thinking

737
00:28:18,710 --> 00:28:20,410
you know I like the idea of less work

738
00:28:20,410 --> 00:28:23,330
I'm not necessarily sure it's actually

739
00:28:23,330 --> 00:28:26,620
is that a sensible way of going along

740
00:28:26,620 --> 00:28:28,760
because it comes from this concept of

741
00:28:28,760 --> 00:28:30,350
like a same traditional distributions

742
00:28:30,350 --> 00:28:34,520
are too slow but they're not if it's a

743
00:28:34,520 --> 00:28:37,640
rolling release and in the case of

744
00:28:37,640 --> 00:28:39,170
openSUSE with tumbleweed we have a

745
00:28:39,170 --> 00:28:42,050
rolling release now that isn't just some

746
00:28:42,050 --> 00:28:43,970
nice fancy dev branch with anybody can

747
00:28:43,970 --> 00:28:45,710
go on and play but is actually usable

748
00:28:45,710 --> 00:28:48,020
for real work it gets tested and only

749
00:28:48,020 --> 00:28:49,670
gets updated when the thing has been

750
00:28:49,670 --> 00:28:52,070
tested and not just tested from a crazy

751
00:28:52,070 --> 00:28:54,830
code perspective but actually automation

752
00:28:54,830 --> 00:28:57,380
tools firing up VMs and on real hardware

753
00:28:57,380 --> 00:28:59,000
and running the thing like a real user

754
00:28:59,000 --> 00:29:00,620
will use it so you know it installs

755
00:29:00,620 --> 00:29:02,120
right and you know the applications work

756
00:29:02,120 --> 00:29:05,000
right and we do all of that at a pace

757
00:29:05,000 --> 00:29:06,740
where we can still deliver the upstream

758
00:29:06,740 --> 00:29:08,870
projects on top at the same pace as

759
00:29:08,870 --> 00:29:11,390
upstream projects work KDE plasma on the

760
00:29:11,390 --> 00:29:13,880
same day as release no 48 hours that

761
00:29:13,880 --> 00:29:17,630
kind of thing maybe that's the better

762
00:29:17,630 --> 00:29:19,930
model to actually fix this app delivery

763
00:29:19,930 --> 00:29:22,460
maybe rolling releases are the way to

764
00:29:22,460 --> 00:29:23,990
actually go with all of this and just

765
00:29:23,990 --> 00:29:26,360
you know reuse that knowledge we already

766
00:29:26,360 --> 00:29:28,370
have we use the tools we already have we

767
00:29:28,370 --> 00:29:30,080
use the infrastructure we already have

768
00:29:30,080 --> 00:29:31,730
in these communities in these

769
00:29:31,730 --> 00:29:34,880
distributions and just angle them way

770
00:29:34,880 --> 00:29:38,420
faster and yeah way more mate way we're

771
00:29:38,420 --> 00:29:40,040
an awful lot faster than we've ever been

772
00:29:40,040 --> 00:29:43,550
in the past and with that I have time

773
00:29:43,550 --> 00:29:45,909
for questions

774
00:29:48,980 --> 00:29:52,910
there there's one guy here

775
00:29:57,160 --> 00:29:59,190
Oh

776
00:30:04,710 --> 00:30:06,700
Vega

777
00:30:06,700 --> 00:30:08,519
No

778
00:30:08,519 --> 00:30:13,440
but they're keeping the base of a

779
00:30:13,440 --> 00:30:18,359
distribution static and keeping the

780
00:30:18,359 --> 00:30:21,419
applications updated only might be good

781
00:30:21,419 --> 00:30:24,629
middle ground for example let's imagine

782
00:30:24,629 --> 00:30:28,739
using Ubuntu with a bunch of PPS to

783
00:30:28,739 --> 00:30:30,719
update just the applications and keeping

784
00:30:30,719 --> 00:30:34,139
a stable core so that we avoid big

785
00:30:34,139 --> 00:30:36,779
differences and big changes break the

786
00:30:36,779 --> 00:30:37,889
users experience

787
00:30:37,889 --> 00:30:39,809
I really wish you've been in my earlier

788
00:30:39,809 --> 00:30:41,009
talk in the district dev room this

789
00:30:41,009 --> 00:30:43,619
morning because yeah I basically

790
00:30:43,619 --> 00:30:46,259
discussed that the problem I see with

791
00:30:46,259 --> 00:30:49,950
that idea is you end up with that same

792
00:30:49,950 --> 00:30:54,149
problem with the you know that line you

793
00:30:54,149 --> 00:30:55,859
know the line between the fast-moving

794
00:30:55,859 --> 00:30:58,079
containerized thing just becomes a line

795
00:30:58,079 --> 00:31:00,539
between the fast-moving applications and

796
00:31:00,539 --> 00:31:03,029
a static distro below and you end up

797
00:31:03,029 --> 00:31:04,499
with compatibility and reliability

798
00:31:04,499 --> 00:31:07,469
problems with that line in reality if

799
00:31:07,469 --> 00:31:08,429
you want to do a rolling release

800
00:31:08,429 --> 00:31:10,889
properly you have to be prepared to move

801
00:31:10,889 --> 00:31:13,529
everything your application is going to

802
00:31:13,529 --> 00:31:15,089
want to change dependencies right down

803
00:31:15,089 --> 00:31:17,159
the stack have the tools to change

804
00:31:17,159 --> 00:31:19,979
everything right down the stack and yeah

805
00:31:19,979 --> 00:31:21,419
you have to find some way of preserving

806
00:31:21,419 --> 00:31:25,079
its stability but you can do that so on

807
00:31:25,079 --> 00:31:27,299
when we're talking about moving the line

808
00:31:27,299 --> 00:31:28,799
why don't you just move the line down

809
00:31:28,799 --> 00:31:32,729
and include the distribution with the

810
00:31:32,729 --> 00:31:34,889
whole container so actually is really a

811
00:31:34,889 --> 00:31:38,999
virtual machine yep then you end up with

812
00:31:38,999 --> 00:31:40,889
the issues of you know nice big

813
00:31:40,889 --> 00:31:43,559
applications lots of patching I mean you

814
00:31:43,559 --> 00:31:46,229
can but it's not exactly a very

815
00:31:46,229 --> 00:31:51,389
efficient way of doing things yeah yeah

816
00:31:51,389 --> 00:31:56,969
Irish so in the past we've had several

817
00:31:56,969 --> 00:31:58,799
libraries and things like that but and

818
00:31:58,799 --> 00:32:02,519
with the binary couple mostly wire

819
00:32:02,519 --> 00:32:07,469
related issues especially with one

820
00:32:07,469 --> 00:32:09,629
application using one version not being

821
00:32:09,629 --> 00:32:11,459
able to load files or talk over the

822
00:32:11,459 --> 00:32:13,879
sockets within the other application

823
00:32:13,879 --> 00:32:16,469
this is not something that containers as

824
00:32:16,469 --> 00:32:19,289
always just making it worse

825
00:32:19,289 --> 00:32:23,429
is it something we can fix I'm not

826
00:32:23,429 --> 00:32:25,079
asking for the fix I'm asking if we

827
00:32:25,079 --> 00:32:27,389
actually can fix it I don't think it's

828
00:32:27,389 --> 00:32:28,409
something we can fix

829
00:32:28,409 --> 00:32:31,349
and I mean basically that example you

830
00:32:31,349 --> 00:32:34,169
just gave and the example of non

831
00:32:34,169 --> 00:32:36,719
open-source software are two examples

832
00:32:36,719 --> 00:32:38,820
where I think this technology is awesome

833
00:32:38,820 --> 00:32:40,739
and should be used to full stop no

834
00:32:40,739 --> 00:32:42,869
caveats you know as long as somebody

835
00:32:42,869 --> 00:32:44,219
takes care of all the responsibilities

836
00:32:44,219 --> 00:32:46,079
you know that that's where these

837
00:32:46,079 --> 00:32:49,259
actually solve a real problem but using

838
00:32:49,259 --> 00:32:50,940
saying this is a universal packaging

839
00:32:50,940 --> 00:32:55,309
tool for everything I am not convinced

840
00:32:55,309 --> 00:33:00,130
here but the question I don't see where

841
00:33:00,130 --> 00:33:05,049
the rolling release model how the really

842
00:33:05,049 --> 00:33:10,150
rolling release model could fix the test

843
00:33:10,150 --> 00:33:12,370
matrix problem this is one of the

844
00:33:12,370 --> 00:33:14,679
problems we have in distributions is

845
00:33:14,679 --> 00:33:18,429
that an application may rely on several

846
00:33:18,429 --> 00:33:20,289
libraries with different versions and

847
00:33:20,289 --> 00:33:21,610
another one

848
00:33:21,610 --> 00:33:24,220
another application would rely on other

849
00:33:24,220 --> 00:33:26,380
versions you can test everything

850
00:33:26,380 --> 00:33:29,799
it increases complexity and that's why

851
00:33:29,799 --> 00:33:32,710
this is all put in containers because

852
00:33:32,710 --> 00:33:34,539
you have the control as an application

853
00:33:34,539 --> 00:33:37,620
developer on which versions I are used

854
00:33:37,620 --> 00:33:41,580
so I don't see how the rolling release

855
00:33:41,580 --> 00:33:46,390
solves the problem is it supposed to

856
00:33:46,390 --> 00:33:52,090
solve that problem I don't know some way

857
00:33:52,090 --> 00:33:55,539
to solve that problem because they so

858
00:33:55,539 --> 00:33:57,340
assuming assuming you're rolling release

859
00:33:57,340 --> 00:34:00,669
isn't just a collection of packages but

860
00:34:00,669 --> 00:34:03,520
is a distribution that it's like built

861
00:34:03,520 --> 00:34:07,210
with for example you know dependency

862
00:34:07,210 --> 00:34:08,889
consistency and you know you make sure

863
00:34:08,889 --> 00:34:10,980
to actually work so like with openSUSE

864
00:34:10,980 --> 00:34:13,270
OBS make sure all the dependencies

865
00:34:13,270 --> 00:34:14,379
actually work together and the

866
00:34:14,379 --> 00:34:16,359
distribution you know is cohesive and

867
00:34:16,359 --> 00:34:18,460
works but not just random packages all

868
00:34:18,460 --> 00:34:20,679
over the place yeah so so in that case

869
00:34:20,679 --> 00:34:23,260
your build processes found will find out

870
00:34:23,260 --> 00:34:24,730
where you have these you know multiple

871
00:34:24,730 --> 00:34:26,940
applications fighting for different libs

872
00:34:26,940 --> 00:34:30,129
and then it's a case of either packaging

873
00:34:30,129 --> 00:34:32,409
or dealing with those upstream it's okay

874
00:34:32,409 --> 00:34:33,699
this might hope this was tender the

875
00:34:33,699 --> 00:34:35,590
example he gave there you know there are

876
00:34:35,590 --> 00:34:37,300
there are cases where these tools helped

877
00:34:37,300 --> 00:34:39,760
but I don't think they Universal yeah

878
00:34:39,760 --> 00:34:42,250
but for example in the non project we

879
00:34:42,250 --> 00:34:46,040
had some problems with changes the end

880
00:34:46,040 --> 00:34:50,920
CSS management and different gtk free

881
00:34:50,920 --> 00:34:56,030
versions and so several versions of gta3

882
00:34:56,030 --> 00:34:59,810
are not come to be installed in parallel

883
00:34:59,810 --> 00:35:02,840
so one application may rely on an older

884
00:35:02,840 --> 00:35:05,390
version and their more recent and

885
00:35:05,390 --> 00:35:08,480
another version of JDK and you have to

886
00:35:08,480 --> 00:35:11,320
choose which version you will install so

887
00:35:11,320 --> 00:35:14,450
if you rely on a distribution model you

888
00:35:14,450 --> 00:35:16,910
only have one of those versions

889
00:35:16,910 --> 00:35:19,790
installed and I don't see how it can

890
00:35:19,790 --> 00:35:24,650
solve without containers I don't I think

891
00:35:24,650 --> 00:35:26,750
the problem needs to be library

892
00:35:26,750 --> 00:35:28,370
maintainer x' need to stop actively

893
00:35:28,370 --> 00:35:30,410
supporting multiple versions that can't

894
00:35:30,410 --> 00:35:38,390
be installed in powerlifting the blames

895
00:35:38,390 --> 00:35:41,650
slightly I know hello

896
00:35:41,650 --> 00:35:46,370
so on the first slide I think the first

897
00:35:46,370 --> 00:35:48,800
valid point you wrote was that with

898
00:35:48,800 --> 00:35:52,250
Windows 3.1 and the shared library model

899
00:35:52,250 --> 00:35:54,530
system or libraries thumb sushi Window

900
00:35:54,530 --> 00:35:57,350
System one of the major problems with it

901
00:35:57,350 --> 00:36:01,100
was and it really was in fact one of the

902
00:36:01,100 --> 00:36:03,800
major problems the missing backward

903
00:36:03,800 --> 00:36:07,970
compatibility of the api's but the idea

904
00:36:07,970 --> 00:36:11,750
of that concept even back then was that

905
00:36:11,750 --> 00:36:14,570
you have backward compatibility as long

906
00:36:14,570 --> 00:36:17,870
as the DLL name stays the same so if you

907
00:36:17,870 --> 00:36:20,540
just use the newest DLL with the same

908
00:36:20,540 --> 00:36:24,020
name or in Linux uses newest share

909
00:36:24,020 --> 00:36:26,840
object the same as Oh name it should be

910
00:36:26,840 --> 00:36:32,230
a bi compatible yep so and as you said

911
00:36:32,230 --> 00:36:35,090
things break and we use this container

912
00:36:35,090 --> 00:36:40,780
stuff because we have a bi breakages

913
00:36:40,780 --> 00:36:43,840
although there should be none

914
00:36:43,840 --> 00:36:48,010
so how but how is defining a new

915
00:36:48,010 --> 00:36:51,950
standard base helping against nor in my

916
00:36:51,950 --> 00:36:52,940
opinion

917
00:36:52,940 --> 00:36:56,170
cause of the problem that we have

918
00:36:56,170 --> 00:36:59,630
applications relying on properties of

919
00:36:59,630 --> 00:37:02,030
the API that are not guaranteed and

920
00:37:02,030 --> 00:37:04,810
specified or live or rewrite us

921
00:37:04,810 --> 00:37:09,010
unintentionally breaking their api's

922
00:37:09,010 --> 00:37:12,440
well the idea my idea for the standard

923
00:37:12,440 --> 00:37:14,540
base would be when you had those ABI

924
00:37:14,540 --> 00:37:16,220
breaking changes you know that would

925
00:37:16,220 --> 00:37:18,770
require a new standard base version so

926
00:37:18,770 --> 00:37:19,970
at least you're tracking when those

927
00:37:19,970 --> 00:37:21,560
changes are you know around

928
00:37:21,560 --> 00:37:23,569
it's another dependency problem I admit

929
00:37:23,569 --> 00:37:26,450
it but you know we we need to spend a

930
00:37:26,450 --> 00:37:28,940
bit of time thinking about this and you

931
00:37:28,940 --> 00:37:30,770
know oh

932
00:37:30,770 --> 00:37:32,210
the alternative is every single

933
00:37:32,210 --> 00:37:34,069
application developer using these tools

934
00:37:34,069 --> 00:37:37,339
has a lot more work to do and I'm not

935
00:37:37,339 --> 00:37:39,859
sure either solution is wonderful but I

936
00:37:39,859 --> 00:37:41,810
don't think people really realized how

937
00:37:41,810 --> 00:37:43,490
much extra work they're putting on their

938
00:37:43,490 --> 00:37:45,290
shoulders just throwing everything into

939
00:37:45,290 --> 00:37:49,819
these tools so do you have already a

940
00:37:49,819 --> 00:37:51,740
plan to go forward like we shove the

941
00:37:51,740 --> 00:37:54,170
suggestions that you propose you think

942
00:37:54,170 --> 00:37:57,140
is the best way forward like is openSUSE

943
00:37:57,140 --> 00:37:58,730
is like trying to propose a new

944
00:37:58,730 --> 00:38:01,640
universal standard base well this is the

945
00:38:01,640 --> 00:38:03,170
first I've said about it so every

946
00:38:03,170 --> 00:38:04,819
distribution that starts talking to me

947
00:38:04,819 --> 00:38:07,550
now they've seen this presentation I'm

948
00:38:07,550 --> 00:38:09,560
not fussy I mean you know it needs as

949
00:38:09,560 --> 00:38:12,020
many from as many places I wanted to

950
00:38:12,020 --> 00:38:15,130
start the conversation here first

951
00:38:16,510 --> 00:38:22,089
guys no more questions thank you thank

952
00:38:22,089 --> 00:38:23,250
you thank you very much

953
00:38:23,250 --> 00:38:31,699
[Applause]

