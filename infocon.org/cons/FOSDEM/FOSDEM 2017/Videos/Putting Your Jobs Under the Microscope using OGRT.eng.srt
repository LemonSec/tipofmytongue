1
00:00:00,000 --> 00:00:03,260
Erica's gonna talk about

2
00:00:04,550 --> 00:00:08,148
Oh GRT how you can keep an eye on what

3
00:00:08,148 --> 00:00:09,920
your users are doing on your last day

4
00:00:09,920 --> 00:00:13,150
exactly so I'm gonna give more of the

5
00:00:13,150 --> 00:00:16,700
system administration side so am i I'm

6
00:00:16,700 --> 00:00:18,920
Gareth I'm a systems engineer currently

7
00:00:18,920 --> 00:00:20,390
doing freelancing so I'm the guy

8
00:00:20,390 --> 00:00:22,279
installing centers five on your machine

9
00:00:22,279 --> 00:00:26,450
and ruining your modules so I want to

10
00:00:26,450 --> 00:00:27,980
start at the beginning like what is a

11
00:00:27,980 --> 00:00:30,020
job from the administrative side it's a

12
00:00:30,020 --> 00:00:32,090
user gives a script to your scheduler

13
00:00:32,090 --> 00:00:34,640
whatever is inside the script kit it's

14
00:00:34,640 --> 00:00:37,579
executed you get basically start time

15
00:00:37,579 --> 00:00:40,910
and time resource usage so for me that

16
00:00:40,910 --> 00:00:43,640
was not enough so what else is happening

17
00:00:43,640 --> 00:00:45,739
if programs executions the program's

18
00:00:45,739 --> 00:00:48,260
load shared libraries depending on the

19
00:00:48,260 --> 00:00:49,940
environment environment variables that

20
00:00:49,940 --> 00:00:52,100
are set and depending on the load of

21
00:00:52,100 --> 00:00:54,440
modules which is basically the same as

22
00:00:54,440 --> 00:00:58,249
the environment so the question is why

23
00:00:58,249 --> 00:00:59,719
would you want to know what's going on

24
00:00:59,719 --> 00:01:01,640
inside your job because you're basically

25
00:01:01,640 --> 00:01:05,349
just an infrastructure provider or not

26
00:01:05,349 --> 00:01:07,730
one of the question is what software do

27
00:01:07,730 --> 00:01:09,500
my users run because you just heard it

28
00:01:09,500 --> 00:01:10,580
it's like a Wild West out there

29
00:01:10,580 --> 00:01:11,990
everybody's installing their own

30
00:01:11,990 --> 00:01:15,290
software so I would like to have a way

31
00:01:15,290 --> 00:01:17,740
to figure out what the users are doing

32
00:01:17,740 --> 00:01:21,290
why because maybe your users are using I

33
00:01:21,290 --> 00:01:22,910
don't know a none optimized Python

34
00:01:22,910 --> 00:01:24,470
version from their home directory that

35
00:01:24,470 --> 00:01:27,800
they got from a colleague or a binary

36
00:01:27,800 --> 00:01:29,660
build of a software that you would have

37
00:01:29,660 --> 00:01:32,540
optimized maybe InfiniBand support on

38
00:01:32,540 --> 00:01:34,970
your machine maybe some lost library had

39
00:01:34,970 --> 00:01:37,790
a bug that happens so maybe rounding was

40
00:01:37,790 --> 00:01:40,160
problematic and you need to inform your

41
00:01:40,160 --> 00:01:42,770
users that there was a problem and

42
00:01:42,770 --> 00:01:44,810
optimally you would like to supply them

43
00:01:44,810 --> 00:01:46,940
which of their jobs had a problem and

44
00:01:46,940 --> 00:01:51,430
what they need to do to fix those and

45
00:01:51,430 --> 00:01:53,300
from more of an administrative

46
00:01:53,300 --> 00:01:55,550
standpoint it's interesting if you build

47
00:01:55,550 --> 00:01:59,090
software for your users can you reduce

48
00:01:59,090 --> 00:02:00,950
the profile so if you have software that

49
00:02:00,950 --> 00:02:03,320
does not get used you can basically

50
00:02:03,320 --> 00:02:05,600
throw it away and don't rebuild it when

51
00:02:05,600 --> 00:02:10,128
you build a new machine and to help the

52
00:02:10,128 --> 00:02:12,110
users basically figure out if their

53
00:02:12,110 --> 00:02:13,610
environment is same so if you run a

54
00:02:13,610 --> 00:02:14,780
program and

55
00:02:14,780 --> 00:02:16,610
library perfect said wrong where you

56
00:02:16,610 --> 00:02:18,319
build the program and in the environment

57
00:02:18,319 --> 00:02:21,980
is not same then your users gonna run

58
00:02:21,980 --> 00:02:24,740
into problems so how would you do this

59
00:02:24,740 --> 00:02:28,370
how would you I mean how would you

60
00:02:28,370 --> 00:02:31,670
approach this problem and we tried

61
00:02:31,670 --> 00:02:33,500
several steps like the first thing is

62
00:02:33,500 --> 00:02:34,580
you ask your users

63
00:02:34,580 --> 00:02:37,010
that's simple to do you go to user ask

64
00:02:37,010 --> 00:02:39,230
ok what do you do in the cluster how can

65
00:02:39,230 --> 00:02:41,989
we help you and then you won't like the

66
00:02:41,989 --> 00:02:44,270
answer because it's usually we use this

67
00:02:44,270 --> 00:02:45,739
pipeline and they got it from somebody

68
00:02:45,739 --> 00:02:47,989
and you could check everything that's

69
00:02:47,989 --> 00:02:49,640
going on there which is very hard

70
00:02:49,640 --> 00:02:51,640
repeat this for every user which

71
00:02:51,640 --> 00:02:54,610
obviously does not scale then there are

72
00:02:54,610 --> 00:02:58,930
if you're using a module system which I

73
00:02:58,930 --> 00:03:01,610
how many people here do know what a

74
00:03:01,610 --> 00:03:05,209
module system does alright so I'm gonna

75
00:03:05,209 --> 00:03:07,670
explain this briefly if you do a module

76
00:03:07,670 --> 00:03:09,470
system is a way to load and unload

77
00:03:09,470 --> 00:03:11,840
software in different versions so module

78
00:03:11,840 --> 00:03:14,750
load in this case am boss for example

79
00:03:14,750 --> 00:03:16,280
loads ambles in the most current version

80
00:03:16,280 --> 00:03:17,810
if you would do an unload you would

81
00:03:17,810 --> 00:03:19,760
under it it does that by setting

82
00:03:19,760 --> 00:03:23,390
environment variables so what you just

83
00:03:23,390 --> 00:03:28,790
like to do is in your profile you a load

84
00:03:28,790 --> 00:03:32,090
all the software that you use often so

85
00:03:32,090 --> 00:03:33,590
now you have a problem that a module

86
00:03:33,590 --> 00:03:36,320
load if you track that it's not actually

87
00:03:36,320 --> 00:03:38,000
the software that the users use it's

88
00:03:38,000 --> 00:03:39,829
just what gets loaded and if they that's

89
00:03:39,829 --> 00:03:46,130
in your profile well that's not exact so

90
00:03:46,130 --> 00:03:49,519
what does OGT do it tracks every program

91
00:03:49,519 --> 00:03:51,739
execution in a job it tracks which

92
00:03:51,739 --> 00:03:54,079
shared objects a program loaded so you

93
00:03:54,079 --> 00:03:58,370
get a a very exact representation of

94
00:03:58,370 --> 00:04:00,290
what happened at the time the program

95
00:04:00,290 --> 00:04:03,680
was run it embeds a signature into

96
00:04:03,680 --> 00:04:05,630
programs in shared objects which happens

97
00:04:05,630 --> 00:04:07,489
at compile time and little star there

98
00:04:07,489 --> 00:04:09,470
that's completely optional so you don't

99
00:04:09,470 --> 00:04:12,019
need to embed signatures in your

100
00:04:12,019 --> 00:04:14,299
programs if you don't want to and it

101
00:04:14,299 --> 00:04:16,250
outputs that data currently into

102
00:04:16,250 --> 00:04:18,829
elasticsearch or Splunk but it's pretty

103
00:04:18,829 --> 00:04:20,959
open so you could use any back-end you'd

104
00:04:20,959 --> 00:04:22,789
like I just recommend something where

105
00:04:22,789 --> 00:04:26,980
you can do analytics in so

106
00:04:26,980 --> 00:04:29,350
what's unique about this this works with

107
00:04:29,350 --> 00:04:31,030
all the launcher so you don't need a

108
00:04:31,030 --> 00:04:32,590
wrapper around the programs you don't

109
00:04:32,590 --> 00:04:34,810
need to do anything you just set them an

110
00:04:34,810 --> 00:04:36,010
environment variable and you track

111
00:04:36,010 --> 00:04:37,960
everything that's happening inside of a

112
00:04:37,960 --> 00:04:41,230
job it's very lightweight everything

113
00:04:41,230 --> 00:04:44,140
like reading the signatures it happens

114
00:04:44,140 --> 00:04:45,850
in memory so it doesn't hit the disk so

115
00:04:45,850 --> 00:04:49,270
it's very fast it's transparent which in

116
00:04:49,270 --> 00:04:51,450
this case means if anything fails

117
00:04:51,450 --> 00:04:54,280
executing that like because it gets

118
00:04:54,280 --> 00:04:56,080
executed with every program execution

119
00:04:56,080 --> 00:04:57,370
nothing happens

120
00:04:57,370 --> 00:05:00,190
your user will never see and the

121
00:05:00,190 --> 00:05:03,040
programs keep on running it's resistant

122
00:05:03,040 --> 00:05:07,150
to outside influence which means the

123
00:05:07,150 --> 00:05:10,030
environment has no impact on the on the

124
00:05:10,030 --> 00:05:12,250
functioning of or duty so it has no

125
00:05:12,250 --> 00:05:14,830
runtime dependencies there is very

126
00:05:14,830 --> 00:05:16,840
little that can happen to influence it

127
00:05:16,840 --> 00:05:19,150
and it's and that's more for the system

128
00:05:19,150 --> 00:05:22,020
administrators it's very easy to deploy

129
00:05:22,020 --> 00:05:23,920
so how does it work

130
00:05:23,920 --> 00:05:25,750
which is the interesting question I'm

131
00:05:25,750 --> 00:05:30,330
gonna go a bit in depth here for

132
00:05:30,330 --> 00:05:32,980
executing OTT with every program that

133
00:05:32,980 --> 00:05:35,620
gets loaded there is the loader has an

134
00:05:35,620 --> 00:05:37,270
environment variable that's called LD

135
00:05:37,270 --> 00:05:39,400
preload which forces your program to

136
00:05:39,400 --> 00:05:45,400
load a shared object GCC and and Julie

137
00:05:45,400 --> 00:05:48,310
PC has a constructor which gets called

138
00:05:48,310 --> 00:05:50,650
every time you load a shared object so

139
00:05:50,650 --> 00:05:53,320
that basically makes it that your GT

140
00:05:53,320 --> 00:05:55,780
runs inside the address space of every

141
00:05:55,780 --> 00:05:57,310
program that you execute so you get

142
00:05:57,310 --> 00:05:59,590
every execution not only the stuff then

143
00:05:59,590 --> 00:06:01,030
you beat this the system administrator

144
00:06:01,030 --> 00:06:03,280
that gets loaded as a module but also

145
00:06:03,280 --> 00:06:05,110
the stuff that your users build in their

146
00:06:05,110 --> 00:06:07,060
home directory so you get everything

147
00:06:07,060 --> 00:06:10,420
except there's a tiny exception there

148
00:06:10,420 --> 00:06:13,360
programs that don't use the loader which

149
00:06:13,360 --> 00:06:14,890
could be statically linked programs

150
00:06:14,890 --> 00:06:16,660
there are ways around that so you could

151
00:06:16,660 --> 00:06:20,620
compile it in but I currently don't do

152
00:06:20,620 --> 00:06:24,340
that so we talked a bit about this what

153
00:06:24,340 --> 00:06:26,620
what are marking what it does exactly is

154
00:06:26,620 --> 00:06:29,290
you have an ill F file that gets

155
00:06:29,290 --> 00:06:33,520
executed and it embeds a UID into a

156
00:06:33,520 --> 00:06:37,660
section of the LF that is done by GCC as

157
00:06:37,660 --> 00:06:39,960
well and by

158
00:06:39,960 --> 00:06:42,479
the binutils and what's interesting

159
00:06:42,479 --> 00:06:44,279
about this if you embed this section

160
00:06:44,279 --> 00:06:47,909
into the LF it gets loaded on execution

161
00:06:47,909 --> 00:06:50,879
so it's in memory don't you don't need

162
00:06:50,879 --> 00:06:55,349
to go to disk also an interesting

163
00:06:55,349 --> 00:06:57,569
question is why would you have such a

164
00:06:57,569 --> 00:06:59,879
signature it's the same path can have a

165
00:06:59,879 --> 00:07:01,740
different executable your user could

166
00:07:01,740 --> 00:07:04,830
copy for whatever reason a program to

167
00:07:04,830 --> 00:07:07,289
its home directory stuff like this so

168
00:07:07,289 --> 00:07:09,259
you you can identify the software

169
00:07:09,259 --> 00:07:10,409
exactly

170
00:07:10,409 --> 00:07:12,839
not only by path because that's not the

171
00:07:12,839 --> 00:07:14,969
unique identifier you can discern user

172
00:07:14,969 --> 00:07:17,210
generated programs so if the user

173
00:07:17,210 --> 00:07:19,680
recompile the program if you're wrapping

174
00:07:19,680 --> 00:07:21,389
the linker you you get the drift

175
00:07:21,389 --> 00:07:23,759
compiled and it's just a unique

176
00:07:23,759 --> 00:07:25,979
identifier so that would be an example

177
00:07:25,979 --> 00:07:28,349
of a signature you can do it with read

178
00:07:28,349 --> 00:07:30,839
elf so in the first the first output

179
00:07:30,839 --> 00:07:33,240
here is order T which for be need for

180
00:07:33,240 --> 00:07:35,460
read elf is an unknown type and then you

181
00:07:35,460 --> 00:07:38,819
have the ABI compatibility and the build

182
00:07:38,819 --> 00:07:41,699
ID that's done by GCC so that's a

183
00:07:41,699 --> 00:07:44,069
mechanism that's pretty well known and

184
00:07:44,069 --> 00:07:47,399
it works very well and down here if you

185
00:07:47,399 --> 00:07:49,589
use out your T to look into the

186
00:07:49,589 --> 00:07:52,169
signature of in this case are you see

187
00:07:52,169 --> 00:07:54,569
that you have a unique ID allocatable

188
00:07:54,569 --> 00:07:57,360
means it gets loaded into memory when

189
00:07:57,360 --> 00:08:01,529
it's run and the version number so the

190
00:08:01,529 --> 00:08:05,310
functioning of our duty is like this the

191
00:08:05,310 --> 00:08:07,139
black box on the outside would be the

192
00:08:07,139 --> 00:08:08,849
address space of a program in this case

193
00:08:08,849 --> 00:08:10,439
because we're in a big data therefrom

194
00:08:10,439 --> 00:08:14,279
it's our libertadores o gets loaded into

195
00:08:14,279 --> 00:08:20,729
this executable and it executes the code

196
00:08:20,729 --> 00:08:23,009
which goes to all of the stuff that the

197
00:08:23,009 --> 00:08:24,659
link reloaded and checks if it finds the

198
00:08:24,659 --> 00:08:26,819
signature of or duty if it doesn't find

199
00:08:26,819 --> 00:08:29,879
one it's okay just notes the path the

200
00:08:29,879 --> 00:08:33,299
rest of the stuff it wraps this up into

201
00:08:33,299 --> 00:08:39,000
a package and including other stuff for

202
00:08:39,000 --> 00:08:42,000
example it does the environment or duty

203
00:08:42,000 --> 00:08:43,440
is very configurable so at compile time

204
00:08:43,440 --> 00:08:45,870
your c7 decides what he wants to monitor

205
00:08:45,870 --> 00:08:48,600
you can send certain environment

206
00:08:48,600 --> 00:08:49,800
variables very note that there are

207
00:08:49,800 --> 00:08:51,779
problems you can do all environment

208
00:08:51,779 --> 00:08:53,160
variables you can send the

209
00:08:53,160 --> 00:08:56,100
the modules you can decide to blacklist

210
00:08:56,100 --> 00:08:59,250
some stuff for example user pin because

211
00:08:59,250 --> 00:09:04,230
you don't want to track Alice so there

212
00:09:04,230 --> 00:09:06,240
can be done and now it's the question

213
00:09:06,240 --> 00:09:09,300
that's a lot of data how do you persist

214
00:09:09,300 --> 00:09:11,460
that how do you make sure that get

215
00:09:11,460 --> 00:09:15,270
somewhere where you can use it so there

216
00:09:15,270 --> 00:09:17,220
is a transport which is the server so

217
00:09:17,220 --> 00:09:19,110
you have Liberty torso which runs into

218
00:09:19,110 --> 00:09:21,690
your program it packages up all the data

219
00:09:21,690 --> 00:09:25,380
like environment shared objects etc etc

220
00:09:25,380 --> 00:09:27,750
in a UDP packet that sends it to the

221
00:09:27,750 --> 00:09:30,570
server and the server then sends it to

222
00:09:30,570 --> 00:09:32,550
configurable outputs at the moment the

223
00:09:32,550 --> 00:09:34,050
data stores implemented our elastic

224
00:09:34,050 --> 00:09:37,770
surgeons blank file is also there but

225
00:09:37,770 --> 00:09:40,440
that's for debugging only so don't use

226
00:09:40,440 --> 00:09:43,760
this in production the server itself is

227
00:09:43,760 --> 00:09:47,580
written in go it just takes the UDP

228
00:09:47,580 --> 00:09:50,640
packet opens it up defaults it it's

229
00:09:50,640 --> 00:09:53,820
internally it's a proto buff so if you

230
00:09:53,820 --> 00:09:56,250
would like to write your own ogt would

231
00:09:56,250 --> 00:09:59,100
be compatible with the console beta and

232
00:09:59,100 --> 00:10:01,800
forwards it to the outputs because of

233
00:10:01,800 --> 00:10:03,690
the nature of the random of programs

234
00:10:03,690 --> 00:10:06,720
because you could execute I don't know

235
00:10:06,720 --> 00:10:08,550
if you have ten compiles running at the

236
00:10:08,550 --> 00:10:10,050
same time that's a whole lot of volume

237
00:10:10,050 --> 00:10:12,630
of data the server buffers the data so

238
00:10:12,630 --> 00:10:14,040
it takes the data puts it into a buffer

239
00:10:14,040 --> 00:10:16,560
and then if the backend is too slow it

240
00:10:16,560 --> 00:10:20,450
just smooths over these spikes it is a

241
00:10:20,450 --> 00:10:25,110
tiny embedded web server which displays

242
00:10:25,110 --> 00:10:28,380
metrics so in this case at the moment

243
00:10:28,380 --> 00:10:30,570
there's only one input so you see the

244
00:10:30,570 --> 00:10:32,970
how many packets it processed what was

245
00:10:32,970 --> 00:10:34,530
the rate per second of the packets how

246
00:10:34,530 --> 00:10:37,110
long did you take mmm important to

247
00:10:37,110 --> 00:10:38,970
notice that the input because it only

248
00:10:38,970 --> 00:10:41,490
copies data to a buffer is very quick

249
00:10:41,490 --> 00:10:44,130
very fast and here you have an elastic

250
00:10:44,130 --> 00:10:45,990
search output configured in the bottom

251
00:10:45,990 --> 00:10:49,770
and you see the stats there so in this

252
00:10:49,770 --> 00:10:54,360
case the input has 270,000 packets so

253
00:10:54,360 --> 00:10:56,430
the the backend is a bit slow which in

254
00:10:56,430 --> 00:10:58,590
this case it ran on my laptop so that

255
00:10:58,590 --> 00:11:01,370
might be a reason

256
00:11:02,350 --> 00:11:07,090
I implemented very very basic lookup

257
00:11:07,090 --> 00:11:09,630
functions into this web interface so

258
00:11:09,630 --> 00:11:13,660
what you see here I there is a blast

259
00:11:13,660 --> 00:11:17,760
library there is a blast library that

260
00:11:17,760 --> 00:11:20,500
was broken I say I know the signature of

261
00:11:20,500 --> 00:11:22,870
the library because I built it then I

262
00:11:22,870 --> 00:11:24,700
pressed look up and it displays me the

263
00:11:24,700 --> 00:11:27,340
effect jobs so if I use these jobs with

264
00:11:27,340 --> 00:11:29,260
my accounting database I can inform the

265
00:11:29,260 --> 00:11:33,370
users of certain that this library was

266
00:11:33,370 --> 00:11:35,650
broken and they should do some steps to

267
00:11:35,650 --> 00:11:37,800
fix that

268
00:11:37,800 --> 00:11:40,780
having said that because this uses an

269
00:11:40,780 --> 00:11:45,490
elastic search back and it I recommend

270
00:11:45,490 --> 00:11:47,110
using elastic structure any other

271
00:11:47,110 --> 00:11:49,230
analytics platform of your choice

272
00:11:49,230 --> 00:11:51,700
because you could in the case of elastic

273
00:11:51,700 --> 00:11:53,320
search you get access to a whole

274
00:11:53,320 --> 00:11:55,180
ecosystem you can use Kabana

275
00:11:55,180 --> 00:11:58,240
to do interactive analysis of the of the

276
00:11:58,240 --> 00:12:01,570
data an interesting use case is if you

277
00:12:01,570 --> 00:12:06,100
have your resource utilization of the

278
00:12:06,100 --> 00:12:08,470
job in a graph on a dashboard you can

279
00:12:08,470 --> 00:12:10,360
say give me the data from elastic search

280
00:12:10,360 --> 00:12:12,810
and overlaid so you would see the usage

281
00:12:12,810 --> 00:12:15,730
let's say memory usage of the job and

282
00:12:15,730 --> 00:12:19,090
overlaid with the program executions so

283
00:12:19,090 --> 00:12:21,730
I don't know you start the memory hog

284
00:12:21,730 --> 00:12:23,950
and then you see the disk cost the

285
00:12:23,950 --> 00:12:27,610
memory usage to go higher plus stability

286
00:12:27,610 --> 00:12:29,680
and performance is quite good using

287
00:12:29,680 --> 00:12:33,520
elastic search that's a slight more for

288
00:12:33,520 --> 00:12:36,790
the administrators here it's very easy

289
00:12:36,790 --> 00:12:40,240
to deploy because the the server is go

290
00:12:40,240 --> 00:12:42,220
so it's a static binary you drop it

291
00:12:42,220 --> 00:12:44,290
somewhere look into the configuration if

292
00:12:44,290 --> 00:12:48,550
you want to that's it the client is

293
00:12:48,550 --> 00:12:50,650
basically configure make and there is a

294
00:12:50,650 --> 00:12:52,150
vendor I script so if you want to try

295
00:12:52,150 --> 00:12:53,950
this out it downloads the dependencies

296
00:12:53,950 --> 00:12:55,870
automatically compiles them with the

297
00:12:55,870 --> 00:12:59,410
flags that are necessary for that you

298
00:12:59,410 --> 00:13:01,840
type Meg installed then down here you

299
00:13:01,840 --> 00:13:05,350
preload Liberty set it to active if you

300
00:13:05,350 --> 00:13:06,640
don't set it to active it doesn't do

301
00:13:06,640 --> 00:13:09,700
anything and you need to turn it silent

302
00:13:09,700 --> 00:13:11,710
so there is no accidentally running in

303
00:13:11,710 --> 00:13:14,920
the background and if you open this bash

304
00:13:14,920 --> 00:13:15,699
here everything

305
00:13:15,699 --> 00:13:17,799
you do in there get sent to the server

306
00:13:17,799 --> 00:13:24,689
and processed so in conclusion OTT is a

307
00:13:24,689 --> 00:13:27,519
more of a sensor that gives you deep

308
00:13:27,519 --> 00:13:29,949
inside what's running on a machine like

309
00:13:29,949 --> 00:13:31,869
on a cluster inside a job it's a

310
00:13:31,869 --> 00:13:35,230
versatile tool it's very configurable to

311
00:13:35,230 --> 00:13:37,480
your needs so if this is too much data

312
00:13:37,480 --> 00:13:39,730
and you want to likely something or

313
00:13:39,730 --> 00:13:41,079
filter something that's very possible

314
00:13:41,079 --> 00:13:43,959
it's very easy to deploy I mean I might

315
00:13:43,959 --> 00:13:46,749
be biased it doesn't take more than 10

316
00:13:46,749 --> 00:13:50,259
minutes and it's what you can do with it

317
00:13:50,259 --> 00:13:54,759
with the data that it gathers you can

318
00:13:54,759 --> 00:13:56,679
provide a census of the software of your

319
00:13:56,679 --> 00:13:59,410
users to use which includes what they

320
00:13:59,410 --> 00:14:01,779
build themselves

321
00:14:01,779 --> 00:14:03,699
you can troubleshoot problems so if you

322
00:14:03,699 --> 00:14:07,629
see that a job failed you without

323
00:14:07,629 --> 00:14:10,449
talking to the user not that you don't

324
00:14:10,449 --> 00:14:12,009
want to talk to the users but it saves

325
00:14:12,009 --> 00:14:15,069
the road trip you can check preemptively

326
00:14:15,069 --> 00:14:17,439
if there is anything obviously wrong and

327
00:14:17,439 --> 00:14:19,419
ready when you love something you can

328
00:14:19,419 --> 00:14:21,279
retro actively inform him about buggy

329
00:14:21,279 --> 00:14:25,419
libraries and reproducibility seems to

330
00:14:25,419 --> 00:14:27,549
be a big thing so if you know how a

331
00:14:27,549 --> 00:14:29,679
program was run including all the

332
00:14:29,679 --> 00:14:32,769
environment it was running it I would

333
00:14:32,769 --> 00:14:36,660
say that contributes to reproducibility

334
00:14:36,959 --> 00:14:39,369
what I want to do in the future for

335
00:14:39,369 --> 00:14:43,139
duties some of the queries that are

336
00:14:43,139 --> 00:14:45,129
interesting building into the web

337
00:14:45,129 --> 00:14:48,309
interface like very tiny stuff then

338
00:14:48,309 --> 00:14:50,859
maybe take another transport because

339
00:14:50,859 --> 00:14:52,449
usually infrastructures like these have

340
00:14:52,449 --> 00:14:55,209
syslog so could be interesting too

341
00:14:55,209 --> 00:14:57,879
instead of the server put it into syslog

342
00:14:57,879 --> 00:15:01,359
if you want to question about the format

343
00:15:01,359 --> 00:15:04,419
there is another thing which would be

344
00:15:04,419 --> 00:15:05,769
very interesting there is a kernel

345
00:15:05,769 --> 00:15:08,379
facility called EBP F where you could

346
00:15:08,379 --> 00:15:10,389
basically do the same that orchard it

347
00:15:10,389 --> 00:15:11,709
does in kernel which would make it

348
00:15:11,709 --> 00:15:15,639
faster be an interesting evaluation

349
00:15:15,639 --> 00:15:18,220
there and what you can do with the

350
00:15:18,220 --> 00:15:20,559
linker you could track not only which

351
00:15:20,559 --> 00:15:22,869
shared objects your program loaded but

352
00:15:22,869 --> 00:15:25,539
also if it uses them because the linker

353
00:15:25,539 --> 00:15:27,610
provides some hooks that make this stuff

354
00:15:27,610 --> 00:15:28,710
possible

355
00:15:28,710 --> 00:15:33,830
so with that I'm gonna go to questions

356
00:15:33,860 --> 00:15:52,320
if there are any well you would need to

357
00:15:52,320 --> 00:15:56,490
attach it the question was would this

358
00:15:56,490 --> 00:15:58,350
clash if with anything else to doose's

359
00:15:58,350 --> 00:16:00,570
nd preload mm-hmm

360
00:16:00,570 --> 00:16:01,920
as far as I'm aware you can preload

361
00:16:01,920 --> 00:16:07,080
multiple things not it as far as in my

362
00:16:07,080 --> 00:16:09,029
were and it's been running in production

363
00:16:09,029 --> 00:16:11,190
other side it does not clash with

364
00:16:11,190 --> 00:16:13,860
anything it does not modify the binary

365
00:16:13,860 --> 00:16:17,540
in any way so it's very self-contained

366
00:16:27,910 --> 00:16:30,589
so the question was is there an

367
00:16:30,589 --> 00:16:33,829
alternative method instead of using le

368
00:16:33,829 --> 00:16:37,490
pré lo yes you could compile it into the

369
00:16:37,490 --> 00:16:40,790
program itself as an object file I use

370
00:16:40,790 --> 00:16:42,380
daily preload because it's very easy to

371
00:16:42,380 --> 00:16:45,860
do you could also in order T but they

372
00:16:45,860 --> 00:16:47,329
did not want to do that you could

373
00:16:47,329 --> 00:16:50,000
enforce that preload is always set to a

374
00:16:50,000 --> 00:16:53,810
value that you want it to be set to

375
00:16:53,810 --> 00:16:57,500
because basically if you're inside the

376
00:16:57,500 --> 00:17:00,019
program you can overload x''k and hook X

377
00:17:00,019 --> 00:17:02,930
I can't make sure that it gets loaded

378
00:17:02,930 --> 00:17:07,658
but so you could do it like this

379
00:17:17,569 --> 00:17:20,240
usually do it in a module file will do

380
00:17:20,240 --> 00:17:22,789
modulo duty it sets LD preload and then

381
00:17:22,789 --> 00:17:54,649
from that I'm going to repeat the

382
00:17:54,649 --> 00:17:57,950
question the question was can you use

383
00:17:57,950 --> 00:17:59,659
this to track if software hasn't been

384
00:17:59,659 --> 00:18:02,570
used and the answer is yes you can we

385
00:18:02,570 --> 00:18:04,870
will do

386
00:18:17,660 --> 00:18:21,810
well it's the question was what did you

387
00:18:21,810 --> 00:18:25,560
find out what did users do wrong

388
00:18:25,560 --> 00:18:28,530
I would say it's more of a reactive

389
00:18:28,530 --> 00:18:29,790
thing so if you know that there is a

390
00:18:29,790 --> 00:18:32,660
problem you start using this data to I

391
00:18:32,660 --> 00:18:34,590
mean it would be interesting if you

392
00:18:34,590 --> 00:18:37,110
could use this data with some kind of

393
00:18:37,110 --> 00:18:39,720
method to automatically decide if

394
00:18:39,720 --> 00:18:42,180
something is going wrong but it would

395
00:18:42,180 --> 00:18:45,210
involve some machine learning probably I

396
00:18:45,210 --> 00:18:50,010
don't know it's not my yes machine

397
00:18:50,010 --> 00:18:58,200
learning or aw okay ah yes you get we we

398
00:18:58,200 --> 00:19:00,570
found out that the most valuable

399
00:19:00,570 --> 00:19:04,380
bioinformatics tool is a wk apparently

400
00:19:04,380 --> 00:19:08,640
yes it gets used a lot and then if you

401
00:19:08,640 --> 00:19:10,440
know this for example if you know K a wk

402
00:19:10,440 --> 00:19:13,470
gets used a lot which may sound stupid

403
00:19:13,470 --> 00:19:14,610
but then you can say ok there are

404
00:19:14,610 --> 00:19:17,220
optimized versions of a wk so be using

405
00:19:17,220 --> 00:19:18,690
an optimized version of that you could

406
00:19:18,690 --> 00:19:25,640
bring your uses of speed up for example

407
00:19:39,080 --> 00:19:42,660
like in volume it's quite small I would

408
00:19:42,660 --> 00:19:44,970
be kilobyte like a packet to the program

409
00:19:44,970 --> 00:19:46,160
since it's one and a half kilobytes

410
00:19:46,160 --> 00:19:49,260
including everything when it's addressed

411
00:19:49,260 --> 00:19:52,140
in elasticsearch I don't know how much

412
00:19:52,140 --> 00:19:56,970
that takes but I mean of course it's big

413
00:19:56,970 --> 00:19:59,840
data it's gigabytes

414
00:20:02,470 --> 00:20:05,110
thank you very much

415
00:20:05,110 --> 00:20:08,619
[Applause]

