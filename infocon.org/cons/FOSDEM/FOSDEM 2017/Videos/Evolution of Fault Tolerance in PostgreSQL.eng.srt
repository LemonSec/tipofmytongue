1
00:00:00,030 --> 00:00:02,630
so

2
00:00:04,540 --> 00:00:07,990
welcome to change alderman for the next

3
00:00:07,990 --> 00:00:09,820
talk in the post Costco session for

4
00:00:09,820 --> 00:00:12,429
today and it's about the evolution of

5
00:00:12,429 --> 00:00:20,109
fault tolerance in PostgreSQL hello

6
00:00:20,109 --> 00:00:21,990
welcome

7
00:00:21,990 --> 00:00:24,369
firstly I want to say sorry because I'm

8
00:00:24,369 --> 00:00:26,619
a bit sick and my throat is a bit

9
00:00:26,619 --> 00:00:28,660
hurting hopefully you will hear me do

10
00:00:28,660 --> 00:00:32,859
you hear me now okay thank you and it's

11
00:00:32,859 --> 00:00:34,989
great stuff I mentioned I will talk

12
00:00:34,989 --> 00:00:36,909
about evolution of Polaris in Postgres

13
00:00:36,909 --> 00:00:40,359
car I want to picture how we evolved in

14
00:00:40,359 --> 00:00:41,890
terms of dependability and fault

15
00:00:41,890 --> 00:00:44,260
tolerance by describing the features

16
00:00:44,260 --> 00:00:47,559
with the mechanisms and all the features

17
00:00:47,559 --> 00:00:50,729
that is supporting and closely tightly

18
00:00:50,729 --> 00:00:54,760
connected with fault tolerance so who am

19
00:00:54,760 --> 00:00:57,699
i working for second quadrants on

20
00:00:57,699 --> 00:01:00,760
post-crisis and automation and I also

21
00:01:00,760 --> 00:01:03,609
help for organizing post phase events

22
00:01:03,609 --> 00:01:07,060
and do some talks and also I'm doing my

23
00:01:07,060 --> 00:01:09,100
Master's hopefully I will start writing

24
00:01:09,100 --> 00:01:11,620
my thesis soon and that's it you can

25
00:01:11,620 --> 00:01:13,780
find me from github and twitter and you

26
00:01:13,780 --> 00:01:18,070
can add me from skype agender that is

27
00:01:18,070 --> 00:01:20,530
first we will talk about PostgreSQL

28
00:01:20,530 --> 00:01:23,410
database in general but just a few I

29
00:01:23,410 --> 00:01:26,680
mean and then main mechanism for photo

30
00:01:26,680 --> 00:01:30,850
lenses wall then we will try to describe

31
00:01:30,850 --> 00:01:33,010
what is transaction what is commit and

32
00:01:33,010 --> 00:01:36,100
what is checkpoint and what do we have

33
00:01:36,100 --> 00:01:38,560
for replication in hospice Kyle and what

34
00:01:38,560 --> 00:01:40,390
do we expect in Postgres time as well

35
00:01:40,390 --> 00:01:43,390
and how the replication evolved from

36
00:01:43,390 --> 00:01:46,120
physical to synchronous come synchronous

37
00:01:46,120 --> 00:01:50,409
replication and then logical and in the

38
00:01:50,409 --> 00:01:52,570
meantime we will also cover timeline

39
00:01:52,570 --> 00:01:55,720
issues by failover switchover and Peter

40
00:01:55,720 --> 00:02:01,180
one two so first things our first post

41
00:02:01,180 --> 00:02:03,820
crisis is robust and by its old nature

42
00:02:03,820 --> 00:02:06,430
it is already having acid compliant and

43
00:02:06,430 --> 00:02:08,258
we literally follow

44
00:02:08,258 --> 00:02:13,060
SQL compliant for SQL 2011 I guess we

45
00:02:13,060 --> 00:02:15,069
try to keep the standards as standard so

46
00:02:15,069 --> 00:02:16,580
you don't want to change them so much

47
00:02:16,580 --> 00:02:19,910
and also transactions are the basic

48
00:02:19,910 --> 00:02:21,860
basic for all the relational databases

49
00:02:21,860 --> 00:02:23,540
because it is important for post press

50
00:02:23,540 --> 00:02:26,390
so even even if you don't run in

51
00:02:26,390 --> 00:02:28,400
transactions for skwisgaar still treats

52
00:02:28,400 --> 00:02:31,280
every statement as transactions and the

53
00:02:31,280 --> 00:02:33,050
thing that these transaction lock which

54
00:02:33,050 --> 00:02:34,730
we will talk about a lot in the talk is

55
00:02:34,730 --> 00:02:38,270
well we save all turn all the statements

56
00:02:38,270 --> 00:02:41,240
in recording of all files and then use

57
00:02:41,240 --> 00:02:44,120
them for application for archiving for

58
00:02:44,120 --> 00:02:47,120
all kind of reasons and we have for

59
00:02:47,120 --> 00:02:49,310
detecting hardware defaults you can use

60
00:02:49,310 --> 00:02:50,660
that block checksums

61
00:02:50,660 --> 00:02:52,610
and there are variety of diagnosed

62
00:02:52,610 --> 00:02:54,440
diagnostic tools and lots of backup

63
00:02:54,440 --> 00:02:56,780
solutions so you can be sure that if you

64
00:02:56,780 --> 00:02:58,340
configure your postcode scale properly

65
00:02:58,340 --> 00:03:01,100
and used all the environmental tools you

66
00:03:01,100 --> 00:03:04,370
will be you won't be facing with

67
00:03:04,370 --> 00:03:06,550
disastrous things in post race car and

68
00:03:06,550 --> 00:03:09,350
this is very important the last point it

69
00:03:09,350 --> 00:03:11,990
has greater than five not greater than

70
00:03:11,990 --> 00:03:14,600
five nice and which means in poor

71
00:03:14,600 --> 00:03:16,520
tolerance is almost not achievable in

72
00:03:16,520 --> 00:03:20,030
almost all systems so this is quite good

73
00:03:20,030 --> 00:03:22,130
number for synchronous replication which

74
00:03:22,130 --> 00:03:23,840
we will talk if you configure and turn

75
00:03:23,840 --> 00:03:26,090
properly there are variety of levels of

76
00:03:26,090 --> 00:03:27,980
synchronization as well we will talk in

77
00:03:27,980 --> 00:03:33,050
in the talk so what is wall the wall

78
00:03:33,050 --> 00:03:35,360
consists of series of binary log files

79
00:03:35,360 --> 00:03:38,720
and these are all under that data

80
00:03:38,720 --> 00:03:41,930
directory or PostgreSQL it's in PGX box

81
00:03:41,930 --> 00:03:44,510
subdirectory so all the changes that you

82
00:03:44,510 --> 00:03:47,390
do you run some statements like insert

83
00:03:47,390 --> 00:03:50,209
well there were some comment there are

84
00:03:50,209 --> 00:03:52,250
all recorded in these data directories

85
00:03:52,250 --> 00:03:56,959
enter the file story and just not only

86
00:03:56,959 --> 00:03:59,180
this one's also indexes or when you run

87
00:03:59,180 --> 00:04:01,160
a vacuum so all your changes are

88
00:04:01,160 --> 00:04:04,040
recorded in this transaction log which

89
00:04:04,040 --> 00:04:07,310
is very important because when you want

90
00:04:07,310 --> 00:04:11,230
to recover from eric from a crash or

91
00:04:11,230 --> 00:04:13,550
want to do a point in time recovery you

92
00:04:13,550 --> 00:04:15,560
will need these logs to to know what

93
00:04:15,560 --> 00:04:17,600
happened in what changed so this is your

94
00:04:17,600 --> 00:04:21,880
kind of diary diary of hospice and

95
00:04:22,100 --> 00:04:24,380
the safe is the thing that you should

96
00:04:24,380 --> 00:04:26,630
know when a transaction is committed it

97
00:04:26,630 --> 00:04:28,640
is not directly to written to disk so

98
00:04:28,640 --> 00:04:31,370
you should know that is you can lose

99
00:04:31,370 --> 00:04:33,080
some data because there are some

100
00:04:33,080 --> 00:04:36,350
sometime between the committee and this

101
00:04:36,350 --> 00:04:38,420
committee goes to the disk so we will

102
00:04:38,420 --> 00:04:44,180
talk about this as well so when we say

103
00:04:44,180 --> 00:04:47,420
transaction what we understand there are

104
00:04:47,420 --> 00:04:49,580
there is this big in uncommitted we all

105
00:04:49,580 --> 00:04:52,340
know it is bundled there are

106
00:04:52,340 --> 00:04:54,050
intermediate steps that you run your

107
00:04:54,050 --> 00:04:56,750
queries and when you commit it it is

108
00:04:56,750 --> 00:05:00,100
like it is like we call this transaction

109
00:05:00,100 --> 00:05:03,530
so like I said as I said before in

110
00:05:03,530 --> 00:05:06,440
Postgres everything is like everything

111
00:05:06,440 --> 00:05:08,120
is considered as transaction even if you

112
00:05:08,120 --> 00:05:09,800
don't write transaction let's begin

113
00:05:09,800 --> 00:05:12,220
uncomment it is still is there are

114
00:05:12,220 --> 00:05:16,340
isolations levels four of them from SQL

115
00:05:16,340 --> 00:05:18,680
standard is coming the important thing

116
00:05:18,680 --> 00:05:20,360
is here that we should know that

117
00:05:20,360 --> 00:05:22,370
Postgres car doesn't support their trees

118
00:05:22,370 --> 00:05:24,530
what is there to read when I said that

119
00:05:24,530 --> 00:05:26,510
there are this begin and commit and

120
00:05:26,510 --> 00:05:28,550
there are intermediate steps off that we

121
00:05:28,550 --> 00:05:31,340
don't in PostgreSQL the other concurrent

122
00:05:31,340 --> 00:05:33,440
transaction doesn't see this steps

123
00:05:33,440 --> 00:05:35,780
between so let's say I updated something

124
00:05:35,780 --> 00:05:37,940
in the between but other transactions

125
00:05:37,940 --> 00:05:39,440
doing something with that table they are

126
00:05:39,440 --> 00:05:41,180
not affected by these changes because if

127
00:05:41,180 --> 00:05:43,280
there is some failure it won't affect I

128
00:05:43,280 --> 00:05:45,500
mean we will drawl back and this changes

129
00:05:45,500 --> 00:05:47,330
not affect other concurrent transactions

130
00:05:47,330 --> 00:05:49,460
but there are some systems that dirty

131
00:05:49,460 --> 00:05:51,290
reads that reading these intermediate

132
00:05:51,290 --> 00:05:54,770
steps and it is not very good for for

133
00:05:54,770 --> 00:05:56,150
you and for your applications so

134
00:05:56,150 --> 00:05:57,800
Postgres card doesn't support third

135
00:05:57,800 --> 00:06:03,590
treat and the most heavy one is say they

136
00:06:03,590 --> 00:06:05,840
are serializable which is very hard to

137
00:06:05,840 --> 00:06:09,410
achieve actually so these are the

138
00:06:09,410 --> 00:06:11,600
transaction isolation levels in poster

139
00:06:11,600 --> 00:06:15,850
screen okay

140
00:06:15,879 --> 00:06:18,939
so what is checkpoint we said that run a

141
00:06:18,939 --> 00:06:21,550
critical when there's a crash we recover

142
00:06:21,550 --> 00:06:23,740
by replaying the walls that the logs

143
00:06:23,740 --> 00:06:25,629
that we righted we wrote before

144
00:06:25,629 --> 00:06:28,839
so while how do we understand which at

145
00:06:28,839 --> 00:06:30,969
pitch point we should reply these locks

146
00:06:30,969 --> 00:06:32,740
there should be a point that safe point

147
00:06:32,740 --> 00:06:34,869
that we know that before that point it

148
00:06:34,869 --> 00:06:37,089
is everything is written to disk because

149
00:06:37,089 --> 00:06:38,800
as i said when you to commit a

150
00:06:38,800 --> 00:06:41,080
transaction it is not immediately flash

151
00:06:41,080 --> 00:06:44,199
disk there is a time so for checkpoint

152
00:06:44,199 --> 00:06:46,360
in terms of checkpoint that is the point

153
00:06:46,360 --> 00:06:48,939
that we can be sure let's say you have

154
00:06:48,939 --> 00:06:51,490
you had an issue we have a failure in

155
00:06:51,490 --> 00:06:53,529
fact like then there is one checkpoint

156
00:06:53,529 --> 00:06:55,749
you can be sure that before that point

157
00:06:55,749 --> 00:06:57,699
everything is flush to the disk so

158
00:06:57,699 --> 00:07:00,279
checkpoints is very important for that

159
00:07:00,279 --> 00:07:02,889
reason you should tune your checkpoint

160
00:07:02,889 --> 00:07:06,219
settings there are lots of variables in

161
00:07:06,219 --> 00:07:09,399
Postgres Falcone's it shouldn't be like

162
00:07:09,399 --> 00:07:12,550
to frequent or the time is important

163
00:07:12,550 --> 00:07:14,529
because if you have a failure and you

164
00:07:14,529 --> 00:07:16,839
put a checkpoint like some some very

165
00:07:16,839 --> 00:07:19,479
long time ago then you need to replay

166
00:07:19,479 --> 00:07:21,069
all the between that all the changes

167
00:07:21,069 --> 00:07:23,169
between that's written into walls so it

168
00:07:23,169 --> 00:07:25,059
should be i mean depending on your

169
00:07:25,059 --> 00:07:27,309
system your load your changes and so

170
00:07:27,309 --> 00:07:28,899
that you should be sure that it will be

171
00:07:28,899 --> 00:07:34,089
like i mean average they look normal it

172
00:07:34,089 --> 00:07:36,339
can be an immediate or Saddles said old

173
00:07:36,339 --> 00:07:38,439
checkpoints immediate means that you can

174
00:07:38,439 --> 00:07:40,149
write your comment for example like

175
00:07:40,149 --> 00:07:42,639
checkpoint to comment and then you can

176
00:07:42,639 --> 00:07:44,740
immediately run this checkpoint or it

177
00:07:44,740 --> 00:07:46,539
can be shadowed which means that like

178
00:07:46,539 --> 00:07:48,999
you can also tune your post course code

179
00:07:48,999 --> 00:07:51,129
and it is shadowed in some time or like

180
00:07:51,129 --> 00:07:58,839
how how do you configure it so we talked

181
00:07:58,839 --> 00:08:02,860
about wall it is that was the files that

182
00:08:02,860 --> 00:08:05,559
we write in binary form the changes are

183
00:08:05,559 --> 00:08:09,179
written to do that files in replication

184
00:08:09,179 --> 00:08:12,279
what what we do is there is one like in

185
00:08:12,279 --> 00:08:14,379
classic replication there is one master

186
00:08:14,379 --> 00:08:16,839
and one standby and there are changes

187
00:08:16,839 --> 00:08:18,789
captured on master and then sent to

188
00:08:18,789 --> 00:08:22,539
stand by over - over - over network so

189
00:08:22,539 --> 00:08:24,129
here and what are we doing

190
00:08:24,129 --> 00:08:25,689
there's master keeping the changes and

191
00:08:25,689 --> 00:08:27,409
writing to all files and nonsense

192
00:08:27,409 --> 00:08:29,869
to the standby and it is a plate and

193
00:08:29,869 --> 00:08:32,659
then now we have an maintainable copy of

194
00:08:32,659 --> 00:08:34,849
our system this is basically the

195
00:08:34,849 --> 00:08:37,009
application how it works a copy of your

196
00:08:37,009 --> 00:08:39,529
system with your master system and you

197
00:08:39,529 --> 00:08:43,339
have a copy on a remote server this is

198
00:08:43,339 --> 00:08:45,290
generally post post post post card

199
00:08:45,290 --> 00:08:47,240
application we will go in details but

200
00:08:47,240 --> 00:08:52,310
replication is this and also in modern

201
00:08:52,310 --> 00:08:54,769
systems reliability is important and for

202
00:08:54,769 --> 00:08:57,259
redundancies horizont redundancy reasons

203
00:08:57,259 --> 00:09:04,639
we need to have replicas right so for an

204
00:09:04,639 --> 00:09:06,769
overview we need to understand how we

205
00:09:06,769 --> 00:09:08,839
started like things are not like this

206
00:09:08,839 --> 00:09:10,970
all the time right there was in history

207
00:09:10,970 --> 00:09:12,439
and loss of work behind it lots of

208
00:09:12,439 --> 00:09:14,600
commuters and lots of people like

209
00:09:14,600 --> 00:09:16,819
contributing to this but in the very

210
00:09:16,819 --> 00:09:19,129
beginning I mean like around PostgreSQL

211
00:09:19,129 --> 00:09:23,420
7 2000 and 2005 there was a philosophy

212
00:09:23,420 --> 00:09:25,579
in the in Postgres care community that

213
00:09:25,579 --> 00:09:27,350
it shouldn't be repetition shouldn't be

214
00:09:27,350 --> 00:09:30,470
part of Postgres and for that reason

215
00:09:30,470 --> 00:09:32,420
there was long distance learning

216
00:09:32,420 --> 00:09:35,569
trigger based solutions because if you

217
00:09:35,569 --> 00:09:37,189
don't plan to do it in court

218
00:09:37,189 --> 00:09:38,899
there will be some tools all that around

219
00:09:38,899 --> 00:09:40,880
but they were doing we will talk about

220
00:09:40,880 --> 00:09:42,680
trigger based application but we can

221
00:09:42,680 --> 00:09:44,389
consider them as logical because they

222
00:09:44,389 --> 00:09:47,000
were not sending changes physically but

223
00:09:47,000 --> 00:09:50,000
there are triggers on tables we will

224
00:09:50,000 --> 00:09:52,370
talk so it is considered as like based

225
00:09:52,370 --> 00:09:54,860
on logical replication trigger based

226
00:09:54,860 --> 00:09:56,899
replication and then at some point I

227
00:09:56,899 --> 00:09:58,579
mean at the beginning we all were lucky

228
00:09:58,579 --> 00:10:01,430
folks post fiscal PostgreSQL was

229
00:10:01,430 --> 00:10:04,160
focusing on single single nodes fault

230
00:10:04,160 --> 00:10:06,560
tolerance so if something happens we can

231
00:10:06,560 --> 00:10:08,509
replace your hole and turn to a point

232
00:10:08,509 --> 00:10:11,120
that is safe for you that was the

233
00:10:11,120 --> 00:10:12,199
initial

234
00:10:12,199 --> 00:10:14,930
fault tolerance in Postgres and then by

235
00:10:14,930 --> 00:10:16,939
time by the time we get the replication

236
00:10:16,939 --> 00:10:19,009
it was considered that for you if you

237
00:10:19,009 --> 00:10:20,630
have a cluster for with more than one

238
00:10:20,630 --> 00:10:23,089
node then replication is best for you

239
00:10:23,089 --> 00:10:26,899
but then how we saw the replication I

240
00:10:26,899 --> 00:10:28,670
mean how do we started to doing

241
00:10:28,670 --> 00:10:31,220
replication as I said before we took the

242
00:10:31,220 --> 00:10:33,680
fall and send over Network and we have

243
00:10:33,680 --> 00:10:36,459
postcard application

244
00:10:38,329 --> 00:10:41,029
point four which is relatively new we

245
00:10:41,029 --> 00:10:43,100
have logical decoding which allows us to

246
00:10:43,100 --> 00:10:46,429
do logical replication and in Postgres

247
00:10:46,429 --> 00:10:50,089
time it will be coming in this year we

248
00:10:50,089 --> 00:10:51,220
will have logical streaming replication

249
00:10:51,220 --> 00:10:53,809
and we will talk about the details a bit

250
00:10:53,809 --> 00:10:58,339
more so this is the general view how we

251
00:10:58,339 --> 00:11:01,670
how we were doing it how state of the

252
00:11:01,670 --> 00:11:04,149
artist it is still streaming replication

253
00:11:04,149 --> 00:11:07,639
but now we will have logical streaming

254
00:11:07,639 --> 00:11:09,499
application and also we have logical

255
00:11:09,499 --> 00:11:12,619
decoding so that we can use this as well

256
00:11:12,619 --> 00:11:14,869
I will I will show how do we use logical

257
00:11:14,869 --> 00:11:16,699
decoding so we are not restricted only

258
00:11:16,699 --> 00:11:26,509
for streaming replication the picture is

259
00:11:26,509 --> 00:11:29,809
showing what I am talking so here we

260
00:11:29,809 --> 00:11:33,259
have mustard and client runs two queries

261
00:11:33,259 --> 00:11:35,149
here and then it is written to world and

262
00:11:35,149 --> 00:11:37,429
the mode is sent over network to the

263
00:11:37,429 --> 00:11:40,249
standby and the recovery process on

264
00:11:40,249 --> 00:11:42,470
standby is replayed the world and we

265
00:11:42,470 --> 00:11:45,499
have stand by and let me say physical

266
00:11:45,499 --> 00:11:47,089
replication we should thought that we

267
00:11:47,089 --> 00:11:48,860
are sending these files in some profits

268
00:11:48,860 --> 00:11:51,559
using some protocol execute copy TS TCP

269
00:11:51,559 --> 00:11:53,869
arcing and when we say streaming via

270
00:11:53,869 --> 00:11:56,480
streaming here but we mean that we have

271
00:11:56,480 --> 00:11:58,579
internal protocols for sending and

272
00:11:58,579 --> 00:12:01,369
receiving this files which are likes and

273
00:12:01,369 --> 00:12:03,919
releasable processes and internal

274
00:12:03,919 --> 00:12:05,470
protocol

275
00:12:05,470 --> 00:12:10,850
okay when we considered that there is an

276
00:12:10,850 --> 00:12:13,040
reputation we assume that there is a way

277
00:12:13,040 --> 00:12:16,309
of doing standbys and not everyone is

278
00:12:16,309 --> 00:12:19,369
needing to use hot standby so there is

279
00:12:19,369 --> 00:12:20,809
in post critical we can have warm

280
00:12:20,809 --> 00:12:23,509
standbys and hot standbys so what is the

281
00:12:23,509 --> 00:12:28,639
difference between warm and hot consider

282
00:12:28,639 --> 00:12:30,439
that we have a base pickup that we have

283
00:12:30,439 --> 00:12:32,889
master and base pickup and we are

284
00:12:32,889 --> 00:12:36,439
feeding this base backup it volt files

285
00:12:36,439 --> 00:12:39,439
all the time then you have a picker it

286
00:12:39,439 --> 00:12:42,230
is warm if it's not active yeah I mean

287
00:12:42,230 --> 00:12:44,389
it is ready but it will be activated if

288
00:12:44,389 --> 00:12:46,549
it's needed this is warm but if it's

289
00:12:46,549 --> 00:12:48,110
already in the system and you are using

290
00:12:48,110 --> 00:12:50,390
it for read-only queries and

291
00:12:50,390 --> 00:12:53,029
it is allowing to you query read-only

292
00:12:53,029 --> 00:12:55,519
while it is in archive recovery mode and

293
00:12:55,519 --> 00:12:56,990
file archiving mode

294
00:12:56,990 --> 00:13:00,470
this is hot standby the important thing

295
00:13:00,470 --> 00:13:04,070
is here it we can promote it without

296
00:13:04,070 --> 00:13:05,600
interruptions or your queries will

297
00:13:05,600 --> 00:13:08,660
continue to work and and here you don't

298
00:13:08,660 --> 00:13:10,040
have this just because you need to wait

299
00:13:10,040 --> 00:13:15,279
for it to be activated I think this is

300
00:13:15,880 --> 00:13:19,519
why I was thinking about the are should

301
00:13:19,519 --> 00:13:21,589
there is a big relation with wall and

302
00:13:21,589 --> 00:13:23,510
the replication I realize that there is

303
00:13:23,510 --> 00:13:25,760
one parameter it shows it really you can

304
00:13:25,760 --> 00:13:28,240
sum up really easily that is wall level

305
00:13:28,240 --> 00:13:31,250
one level is the parameter that it

306
00:13:31,250 --> 00:13:33,709
determines how much information you will

307
00:13:33,709 --> 00:13:36,470
store for having for using your standbys

308
00:13:36,470 --> 00:13:39,320
for which reasons how we want to use

309
00:13:39,320 --> 00:13:40,910
your replication what is your main

310
00:13:40,910 --> 00:13:43,630
purpose to do for doing replication the

311
00:13:43,630 --> 00:13:47,720
default and minimum one of obviously is

312
00:13:47,720 --> 00:13:50,720
minimal this is only for that in case of

313
00:13:50,720 --> 00:13:53,930
crash you can recover with this level of

314
00:13:53,930 --> 00:13:58,370
information in your world here replica

315
00:13:58,370 --> 00:14:00,320
this is lightest for nine point six

316
00:14:00,320 --> 00:14:03,470
before in releases prior to 9.6 it was

317
00:14:03,470 --> 00:14:05,540
hot standby an archive but they are

318
00:14:05,540 --> 00:14:07,220
mapped replicas now but you can still

319
00:14:07,220 --> 00:14:09,920
use them but what does it does is you

320
00:14:09,920 --> 00:14:12,320
can do file based archiving you can run

321
00:14:12,320 --> 00:14:13,970
your attorney queries so that you have

322
00:14:13,970 --> 00:14:15,890
enough information about having this

323
00:14:15,890 --> 00:14:18,769
kind of replication but then recently as

324
00:14:18,769 --> 00:14:21,260
we talk that there is logical decoding

325
00:14:21,260 --> 00:14:24,260
now so that if you specify logical then

326
00:14:24,260 --> 00:14:26,570
you are allowing to use logical decoding

327
00:14:26,570 --> 00:14:28,579
and then all the features comes with

328
00:14:28,579 --> 00:14:31,459
that so it allows to it continues to

329
00:14:31,459 --> 00:14:33,079
look more so I have logically

330
00:14:33,079 --> 00:14:35,269
replication in this table and all the

331
00:14:35,269 --> 00:14:39,220
levels and all the levels also has this

332
00:14:39,220 --> 00:14:42,620
previous levels information so if you

333
00:14:42,620 --> 00:14:45,890
are logical in your world level then you

334
00:14:45,890 --> 00:14:47,000
have this and this and if you are

335
00:14:47,000 --> 00:14:49,760
replica you have minimal and so on so

336
00:14:49,760 --> 00:14:51,320
this is I think very important and you

337
00:14:51,320 --> 00:14:53,690
can just see easily what they do and

338
00:14:53,690 --> 00:14:56,949
what is suitable for

339
00:14:58,130 --> 00:15:00,330
let's talk about fade over and switch

340
00:15:00,330 --> 00:15:04,709
over a bit as you can see in switch over

341
00:15:04,709 --> 00:15:07,350
you have the control hello world sadly

342
00:15:07,350 --> 00:15:11,160
you don't have when your master dies and

343
00:15:11,160 --> 00:15:13,260
you need to recover it so that you can

344
00:15:13,260 --> 00:15:16,560
accept the rights otherwise you can't if

345
00:15:16,560 --> 00:15:18,420
you do it control by control you

346
00:15:18,420 --> 00:15:20,339
basically stop your master and I promote

347
00:15:20,339 --> 00:15:21,209
the standby

348
00:15:21,209 --> 00:15:23,970
this is switch over and this you need to

349
00:15:23,970 --> 00:15:26,339
do something more you need to do base

350
00:15:26,339 --> 00:15:29,100
backup or copying the files and I will

351
00:15:29,100 --> 00:15:31,260
show that how we will fix paid over

352
00:15:31,260 --> 00:15:33,360
station better in a better way with PG

353
00:15:33,360 --> 00:15:36,029
rewind so this picture you should

354
00:15:36,029 --> 00:15:37,529
remember if you want to know the

355
00:15:37,529 --> 00:15:39,120
difference between the terms switch over

356
00:15:39,120 --> 00:15:40,890
you have the control failure where you

357
00:15:40,890 --> 00:15:46,140
don't fine lines I think timelines in

358
00:15:46,140 --> 00:15:48,450
PostgreSQL is really important term to

359
00:15:48,450 --> 00:15:50,940
understand to understand what is

360
00:15:50,940 --> 00:15:52,649
happening actually why do we why do we

361
00:15:52,649 --> 00:15:57,690
need this term and why do we use it in

362
00:15:57,690 --> 00:16:00,810
every recovery process after every

363
00:16:00,810 --> 00:16:02,880
recovery process PostgreSQL issues a

364
00:16:02,880 --> 00:16:05,880
time new timeline so that you can know

365
00:16:05,880 --> 00:16:08,610
that the new timeline is not like

366
00:16:08,610 --> 00:16:10,320
overwriting the world files that is

367
00:16:10,320 --> 00:16:13,440
written by the initial previous timeline

368
00:16:13,440 --> 00:16:16,079
so so that you can you need to diverge

369
00:16:16,079 --> 00:16:18,329
these timelines to overcome like switch

370
00:16:18,329 --> 00:16:21,480
over like failover crashes point on

371
00:16:21,480 --> 00:16:23,459
point in time recovery so you need to be

372
00:16:23,459 --> 00:16:24,990
aware that we need different timelines

373
00:16:24,990 --> 00:16:28,470
to control this and we will see in

374
00:16:28,470 --> 00:16:34,170
details so in as you can see in case of

375
00:16:34,170 --> 00:16:36,690
failover this is our masters timeline

376
00:16:36,690 --> 00:16:39,480
the first initial timeline and there is

377
00:16:39,480 --> 00:16:41,970
that this timeline is increases here so

378
00:16:41,970 --> 00:16:43,829
I assume that this failover is happening

379
00:16:43,829 --> 00:16:46,980
around here and your master these

380
00:16:46,980 --> 00:16:49,010
changes are not flash to disk yet so

381
00:16:49,010 --> 00:16:50,430
this

382
00:16:50,430 --> 00:16:52,170
standby supposed to be new master

383
00:16:52,170 --> 00:16:55,140
doesn't have these changes so in this

384
00:16:55,140 --> 00:16:57,450
scenario you will lose all these changes

385
00:16:57,450 --> 00:17:00,150
you can't easily old master can't follow

386
00:17:00,150 --> 00:17:02,810
the new master because there's no way to

387
00:17:02,810 --> 00:17:06,630
send this to this so when you what you

388
00:17:06,630 --> 00:17:08,849
need to do is like you promote and then

389
00:17:08,849 --> 00:17:10,530
the base back up and then continue

390
00:17:10,530 --> 00:17:12,900
because there are also any changes in

391
00:17:12,900 --> 00:17:14,880
the world and this timeline change is

392
00:17:14,880 --> 00:17:16,380
showing that there is something missing

393
00:17:16,380 --> 00:17:19,079
there is a failure so it can't be

394
00:17:19,079 --> 00:17:21,390
replaced but in case of switchover as

395
00:17:21,390 --> 00:17:22,920
you remember here is the case that we

396
00:17:22,920 --> 00:17:23,970
don't have the control

397
00:17:23,970 --> 00:17:26,010
but in switch over we have the control

398
00:17:26,010 --> 00:17:28,369
so there are no outstanding changes

399
00:17:28,369 --> 00:17:30,690
basically we stop this and then we

400
00:17:30,690 --> 00:17:34,020
promote standby but like I say there's a

401
00:17:34,020 --> 00:17:39,120
new timeline issued here and easily the

402
00:17:39,120 --> 00:17:43,290
old master can become a new master I'm

403
00:17:43,290 --> 00:17:46,070
sorry the old master can become standby

404
00:17:46,070 --> 00:17:48,450
to follow the new master which is the

405
00:17:48,450 --> 00:17:51,210
standby a usual promotion without any

406
00:17:51,210 --> 00:17:56,760
loss and what does peih-gee want is here

407
00:17:56,760 --> 00:18:02,010
we are kind of this tool is helping us

408
00:18:02,010 --> 00:18:07,410
after 9.5 there are still outstanding

409
00:18:07,410 --> 00:18:10,140
changes it is more useful in the case of

410
00:18:10,140 --> 00:18:13,500
failure for example what does it to it

411
00:18:13,500 --> 00:18:15,930
for it first check the wall files in the

412
00:18:15,930 --> 00:18:20,190
old master and the advantage of using PG

413
00:18:20,190 --> 00:18:22,020
rhint and comparing to PG based backup

414
00:18:22,020 --> 00:18:24,390
or some other copying Methodist in in

415
00:18:24,390 --> 00:18:25,440
the usual way you need to copy

416
00:18:25,440 --> 00:18:27,810
everything even if they are not even if

417
00:18:27,810 --> 00:18:30,750
they they didn't change so PG divine

418
00:18:30,750 --> 00:18:33,330
only looks for the change ones so they

419
00:18:33,330 --> 00:18:35,550
say you have a very big database and you

420
00:18:35,550 --> 00:18:38,070
have like small proportionally small

421
00:18:38,070 --> 00:18:39,990
changes so you don't need to go through

422
00:18:39,990 --> 00:18:42,930
all down changed files but you just dis

423
00:18:42,930 --> 00:18:45,110
just checks and finds the change twice

424
00:18:45,110 --> 00:18:48,510
so then you will have time you will

425
00:18:48,510 --> 00:18:50,310
still lose this data I will explain why

426
00:18:50,310 --> 00:18:52,590
you still this lose this part but at

427
00:18:52,590 --> 00:18:54,900
least your old master can follow the new

428
00:18:54,900 --> 00:18:57,510
master so that you can do it in online

429
00:18:57,510 --> 00:19:00,000
you don't have you don't have these

430
00:19:00,000 --> 00:19:00,990
faders

431
00:19:00,990 --> 00:19:03,410
station now

432
00:19:03,410 --> 00:19:06,260
so what was it doing it was checking the

433
00:19:06,260 --> 00:19:09,530
wall files in the old and then it was

434
00:19:09,530 --> 00:19:12,230
checking from the new new standby I mean

435
00:19:12,230 --> 00:19:14,450
the old standby about the new master it

436
00:19:14,450 --> 00:19:15,980
is checking to go into a check point

437
00:19:15,980 --> 00:19:18,350
which I want to remind you it was

438
00:19:18,350 --> 00:19:21,080
checkpoint was safe point so like let's

439
00:19:21,080 --> 00:19:23,000
say there is this problem happens here

440
00:19:23,000 --> 00:19:25,040
but you have a checkpoint you turned

441
00:19:25,040 --> 00:19:27,320
from this you come to this checkpoint by

442
00:19:27,320 --> 00:19:30,470
just looking to this this one supposed

443
00:19:30,470 --> 00:19:32,150
to be new master and now it's stand by

444
00:19:32,150 --> 00:19:35,480
you find this point and send copy all

445
00:19:35,480 --> 00:19:38,540
the files from this one to this one so

446
00:19:38,540 --> 00:19:39,650
that you kind of rewind

447
00:19:39,650 --> 00:19:42,470
tinks and copy all the C log files

448
00:19:42,470 --> 00:19:44,510
configuration files but not relation

449
00:19:44,510 --> 00:19:48,230
files and then these poles are already

450
00:19:48,230 --> 00:19:50,540
played by this master which is not

451
00:19:50,540 --> 00:19:53,000
really detail replayed but let's not go

452
00:19:53,000 --> 00:19:55,310
there so that the important point is you

453
00:19:55,310 --> 00:19:59,110
can just continue PG want his help so

454
00:19:59,110 --> 00:20:01,730
this is another improvement I mean

455
00:20:01,730 --> 00:20:03,680
before there was not this opportunity

456
00:20:03,680 --> 00:20:07,600
now we figure out a way to overcome that

457
00:20:09,250 --> 00:20:11,900
synchronous replication let's talk about

458
00:20:11,900 --> 00:20:14,450
this a bit that this one was greater

459
00:20:14,450 --> 00:20:17,660
than five nines available 10 fault

460
00:20:17,660 --> 00:20:21,320
tolerance that I was talking by default

461
00:20:21,320 --> 00:20:23,510
Postgres do a synchronous replication

462
00:20:23,510 --> 00:20:26,150
which means that we replicates whenever

463
00:20:26,150 --> 00:20:29,210
the sandbar is available how do we need

464
00:20:29,210 --> 00:20:30,260
configure and so on

465
00:20:30,260 --> 00:20:33,110
but we can force PostgreSQL do

466
00:20:33,110 --> 00:20:34,910
synchronous replication as well by

467
00:20:34,910 --> 00:20:36,500
configuring the synchronous commit

468
00:20:36,500 --> 00:20:40,790
parameter here as you can see that it

469
00:20:40,790 --> 00:20:45,110
you can force that at least your your

470
00:20:45,110 --> 00:20:46,640
data is it into at least two nodes

471
00:20:46,640 --> 00:20:49,820
before you sense that it's okay is

472
00:20:49,820 --> 00:20:52,250
committed message to your application or

473
00:20:52,250 --> 00:20:54,260
your client so you can be sure that this

474
00:20:54,260 --> 00:20:57,860
safer but when I say that what what we

475
00:20:57,860 --> 00:20:59,660
lose here we can lose a bit apart from

476
00:20:59,660 --> 00:21:02,300
us because I don't accept anything

477
00:21:02,300 --> 00:21:04,910
before I got the message that yes it is

478
00:21:04,910 --> 00:21:07,220
safe it is the place that where you want

479
00:21:07,220 --> 00:21:09,650
it to be so then you need to a bit late

480
00:21:09,650 --> 00:21:10,280
for that

481
00:21:10,280 --> 00:21:12,440
and another thing that maybe we can say

482
00:21:12,440 --> 00:21:13,800
that

483
00:21:13,800 --> 00:21:15,660
when you said synchronous replication it

484
00:21:15,660 --> 00:21:17,250
doesn't mean that you only need to use

485
00:21:17,250 --> 00:21:19,650
synchronous replication but it is for

486
00:21:19,650 --> 00:21:21,810
transaction based so you can set some

487
00:21:21,810 --> 00:21:23,700
transitions for synchronous some of them

488
00:21:23,700 --> 00:21:25,830
are synchronous so it is up to you so

489
00:21:25,830 --> 00:21:27,780
that for some certain things you want to

490
00:21:27,780 --> 00:21:29,820
keep them very well and secure so that

491
00:21:29,820 --> 00:21:31,890
you can set for the transactions there's

492
00:21:31,890 --> 00:21:34,020
like synchronous but some of them it can

493
00:21:34,020 --> 00:21:36,300
be still a synchronous you can just you

494
00:21:36,300 --> 00:21:37,650
can decide yourself so that this

495
00:21:37,650 --> 00:21:39,120
trade-off between performance and

496
00:21:39,120 --> 00:21:42,139
durability is up to you

497
00:21:48,120 --> 00:21:51,919
so what which parameter is deciding this

498
00:21:51,919 --> 00:21:53,760
asynchronous commit

499
00:21:53,760 --> 00:21:55,860
we will come to there but before we go

500
00:21:55,860 --> 00:21:57,630
to synchronous commit and how it applies

501
00:21:57,630 --> 00:22:00,150
Synchron synchronization in PostgreSQL i

502
00:22:00,150 --> 00:22:02,970
want to remind you the how through

503
00:22:02,970 --> 00:22:05,520
committees processed in replication in

504
00:22:05,520 --> 00:22:08,490
general in postcard we talked about it

505
00:22:08,490 --> 00:22:11,610
but this picture is helpful that and I

506
00:22:11,610 --> 00:22:13,529
will use this template to explain

507
00:22:13,529 --> 00:22:16,740
synchronous commit as well so here this

508
00:22:16,740 --> 00:22:21,179
is our like master let's say and standby

509
00:22:21,179 --> 00:22:22,710
we can think as a upstream downstream

510
00:22:22,710 --> 00:22:23,899
doesn't matter

511
00:22:23,899 --> 00:22:28,130
so here when a client runs one client

512
00:22:28,130 --> 00:22:31,950
executes a commit and this is written to

513
00:22:31,950 --> 00:22:34,230
wall both files and then both

514
00:22:34,230 --> 00:22:36,929
understanding these two over network to

515
00:22:36,929 --> 00:22:39,360
and this wall receiver takes it and it

516
00:22:39,360 --> 00:22:41,039
still turn to standby school and it's

517
00:22:41,039 --> 00:22:44,460
replayed and then your committees

518
00:22:44,460 --> 00:22:50,190
following this paid basic okay I think

519
00:22:50,190 --> 00:22:52,710
this template is helpful for basic idea

520
00:22:52,710 --> 00:22:56,370
and let's talk about the synchronous

521
00:22:56,370 --> 00:22:58,729
commit

522
00:23:00,870 --> 00:23:03,450
so here this parameter is deciding if

523
00:23:03,450 --> 00:23:05,580
you will have a synchronous commenter

524
00:23:05,580 --> 00:23:07,890
synchronous replication or not as you

525
00:23:07,890 --> 00:23:11,580
see if it is off we don't wait for we

526
00:23:11,580 --> 00:23:13,620
don't pay for the transaction record to

527
00:23:13,620 --> 00:23:20,640
be flushed to disk it's often and the

528
00:23:20,640 --> 00:23:22,890
second is a bit higher this will be go

529
00:23:22,890 --> 00:23:24,960
to higher level of synchron synchronous

530
00:23:24,960 --> 00:23:27,059
replication so the minimum was off it

531
00:23:27,059 --> 00:23:30,150
was close and now it is local what does

532
00:23:30,150 --> 00:23:33,029
it mean that we can be sure that it is

533
00:23:33,029 --> 00:23:36,960
in local disk of the machine so it's

534
00:23:36,960 --> 00:23:40,409
written here but this level is stopping

535
00:23:40,409 --> 00:23:42,710
here

536
00:23:45,340 --> 00:23:48,580
when I say when I say remote right that

537
00:23:48,580 --> 00:23:52,210
I can be I can be sure that I send this

538
00:23:52,210 --> 00:23:56,230
to the remote node which is standby but

539
00:23:56,230 --> 00:23:58,110
it is not velocities it is in memory

540
00:23:58,110 --> 00:24:01,450
operations here it is not here but at

541
00:24:01,450 --> 00:24:03,340
least it is better than I mean the level

542
00:24:03,340 --> 00:24:05,860
of off and the level of local it's gone

543
00:24:05,860 --> 00:24:08,620
that and I said it okay it sent a

544
00:24:08,620 --> 00:24:12,909
message that let's see here so this is

545
00:24:12,909 --> 00:24:13,690
remote right

546
00:24:13,690 --> 00:24:15,549
the naming is a bit different because

547
00:24:15,549 --> 00:24:17,470
when I heard remote right I was thinking

548
00:24:17,470 --> 00:24:21,970
it's written to this but it's not on is

549
00:24:21,970 --> 00:24:23,169
the basic idea

550
00:24:23,169 --> 00:24:25,179
synchronous commit is all which means

551
00:24:25,179 --> 00:24:27,970
that we do the synchronization by miss

552
00:24:27,970 --> 00:24:30,789
and the changes now from this level and

553
00:24:30,789 --> 00:24:34,809
flashed to disk here we are now and the

554
00:24:34,809 --> 00:24:37,059
extreme level I mean the top level is

555
00:24:37,059 --> 00:24:40,509
top level is they would apply that I I

556
00:24:40,509 --> 00:24:43,690
push these changes that I recorded these

557
00:24:43,690 --> 00:24:45,369
changes are visible on the database now

558
00:24:45,369 --> 00:24:48,399
so it is replayed so basically the

559
00:24:48,399 --> 00:24:51,009
transaction is waiting for this happens

560
00:24:51,009 --> 00:24:53,919
this event happens so you can be very

561
00:24:53,919 --> 00:24:55,899
sure that is even visible this change is

562
00:24:55,899 --> 00:24:58,509
visible before that is turning to say

563
00:24:58,509 --> 00:25:02,440
message that it's okay I did it okay so

564
00:25:02,440 --> 00:25:05,080
this part that I I think it's really

565
00:25:05,080 --> 00:25:06,759
important that's why I was playing I

566
00:25:06,759 --> 00:25:08,769
want to show that it is in graphical way

567
00:25:08,769 --> 00:25:10,629
so that we can be following the

568
00:25:10,629 --> 00:25:15,250
community easily okay

569
00:25:15,250 --> 00:25:18,070
so now we can talk abou talk but we we

570
00:25:18,070 --> 00:25:19,870
talk first we started with volt

571
00:25:19,870 --> 00:25:22,690
mechanism and then we say that how it is

572
00:25:22,690 --> 00:25:25,030
like how it's used in replication

573
00:25:25,030 --> 00:25:27,250
physical application in physical

574
00:25:27,250 --> 00:25:28,809
application you should think that it is

575
00:25:28,809 --> 00:25:32,350
raw and bla bla bla quite level so all

576
00:25:32,350 --> 00:25:34,090
the changes needs to be replayed from

577
00:25:34,090 --> 00:25:36,100
the other side so it is like a bit

578
00:25:36,100 --> 00:25:37,419
strict you need to replace everything

579
00:25:37,419 --> 00:25:39,010
you can't have differences between

580
00:25:39,010 --> 00:25:41,230
master and standby but when they say

581
00:25:41,230 --> 00:25:43,270
logical replication you can you can just

582
00:25:43,270 --> 00:25:45,010
put this keyword in your mind it is more

583
00:25:45,010 --> 00:25:47,110
flexible you can apply this to more

584
00:25:47,110 --> 00:25:49,360
complex topologies you don't need to

585
00:25:49,360 --> 00:25:52,270
have the same major versions and this is

586
00:25:52,270 --> 00:25:54,580
also an advantage that you can do you

587
00:25:54,580 --> 00:25:56,470
can by using logical application you can

588
00:25:56,470 --> 00:25:58,059
help create between major releases and

589
00:25:58,059 --> 00:26:00,250
so on so logical replication is that I

590
00:26:00,250 --> 00:26:02,590
think is the future of for tolerancing

591
00:26:02,590 --> 00:26:05,020
undependable team process but for some

592
00:26:05,020 --> 00:26:07,900
cases not for all of course streaming

593
00:26:07,900 --> 00:26:08,980
replication physical streaming

594
00:26:08,980 --> 00:26:11,380
application is still important and it

595
00:26:11,380 --> 00:26:13,710
should be used for lots of cases as well

596
00:26:13,710 --> 00:26:16,360
so that was the general intro for

597
00:26:16,360 --> 00:26:22,150
logical replication why I there is two

598
00:26:22,150 --> 00:26:24,789
major approaches for logical replication

599
00:26:24,789 --> 00:26:27,429
the one that we talked a bit in the

600
00:26:27,429 --> 00:26:29,230
history the trigger based replication

601
00:26:29,230 --> 00:26:32,169
and then we will talk about logical

602
00:26:32,169 --> 00:26:34,780
encoding and it is known as changed set

603
00:26:34,780 --> 00:26:39,429
extraction in some other systems so what

604
00:26:39,429 --> 00:26:41,590
do we do in - what do we do in 3d based

605
00:26:41,590 --> 00:26:46,299
application here all the tables are it

606
00:26:46,299 --> 00:26:48,340
is controlled by triggers so all the

607
00:26:48,340 --> 00:26:50,350
changes are written to tables you

608
00:26:50,350 --> 00:26:53,020
amplify the writes so you write double

609
00:26:53,020 --> 00:26:54,970
times the changes are written double

610
00:26:54,970 --> 00:26:57,789
times and then also it amplifies the

611
00:26:57,789 --> 00:26:59,110
wall of course because then you have

612
00:26:59,110 --> 00:27:01,150
double amount of rice and double amount

613
00:27:01,150 --> 00:27:04,000
of wall that is the K rot in this

614
00:27:04,000 --> 00:27:06,880
trigger based applications and but it is

615
00:27:06,880 --> 00:27:09,010
of course predating the now logical

616
00:27:09,010 --> 00:27:10,330
replication even the physical

617
00:27:10,330 --> 00:27:14,530
application but this is the K but that

618
00:27:14,530 --> 00:27:16,030
you need to remember it is like ether

619
00:27:16,030 --> 00:27:18,039
okay it is working it only stands Tony

620
00:27:18,039 --> 00:27:21,070
is doing this for years but it has some

621
00:27:21,070 --> 00:27:23,649
disadvantages increasing the amount of

622
00:27:23,649 --> 00:27:25,299
work needed to be done and

623
00:27:25,299 --> 00:27:26,769
increasing the amount of the size of

624
00:27:26,769 --> 00:27:32,110
fall and so on here that's the this is

625
00:27:32,110 --> 00:27:34,629
the main part that I want to show and it

626
00:27:34,629 --> 00:27:37,090
will be in a post question as well the

627
00:27:37,090 --> 00:27:40,450
talk will continue logical decoding

628
00:27:40,450 --> 00:27:43,869
which is since 9.4 what does it to

629
00:27:43,869 --> 00:27:46,299
remember that there was a table that we

630
00:27:46,299 --> 00:27:48,730
had both levels and there was logical

631
00:27:48,730 --> 00:27:51,549
level so when you when you use this

632
00:27:51,549 --> 00:27:54,009
information but do you do you extract

633
00:27:54,009 --> 00:27:55,720
the information from wall that you can

634
00:27:55,720 --> 00:27:59,139
use this information for into logical

635
00:27:59,139 --> 00:28:01,299
changes now you don't think about that

636
00:28:01,299 --> 00:28:03,519
it's like black and white level but you

637
00:28:03,519 --> 00:28:05,769
have logical changes in you now and you

638
00:28:05,769 --> 00:28:07,600
can use it more for selective

639
00:28:07,600 --> 00:28:10,629
replication you can just use it for some

640
00:28:10,629 --> 00:28:13,059
other topologies and there is no right

641
00:28:13,059 --> 00:28:14,980
on the implication this is referring to

642
00:28:14,980 --> 00:28:16,389
what to trigger based replication

643
00:28:16,389 --> 00:28:18,309
because then you need to have everything

644
00:28:18,309 --> 00:28:20,230
couple types you need to write about

645
00:28:20,230 --> 00:28:22,929
facts so here this is the advantage of

646
00:28:22,929 --> 00:28:24,639
logical decoding there is no right

647
00:28:24,639 --> 00:28:27,960
implication and there is another thing

648
00:28:27,960 --> 00:28:30,519
when you use trigger based replications

649
00:28:30,519 --> 00:28:32,799
they are like using triggers as in the

650
00:28:32,799 --> 00:28:35,499
name but the ordering is also another

651
00:28:35,499 --> 00:28:37,899
issue you need to order the things that

652
00:28:37,899 --> 00:28:40,539
you copied I mean you write but here

653
00:28:40,539 --> 00:28:43,149
since we are using world protocol for

654
00:28:43,149 --> 00:28:45,580
protocols there is already ordered so

655
00:28:45,580 --> 00:28:49,059
your changes are in order so you don't

656
00:28:49,059 --> 00:28:51,309
need to think about it in orderly it is

657
00:28:51,309 --> 00:28:53,529
very low so let's say you write an

658
00:28:53,529 --> 00:28:55,960
update for a hundred rows there will be

659
00:28:55,960 --> 00:29:00,009
hundreds changes and it doesn't decode

660
00:29:00,009 --> 00:29:02,470
the idea and there is an SQL interface

661
00:29:02,470 --> 00:29:05,200
which means you have functions and it is

662
00:29:05,200 --> 00:29:09,519
using wall centers assuming interface it

663
00:29:09,519 --> 00:29:11,710
also cares committed transactions which

664
00:29:11,710 --> 00:29:13,690
means if you abort your transaction it

665
00:29:13,690 --> 00:29:17,179
is not considered in logical application

666
00:29:17,179 --> 00:29:20,130
so based on logical decoding this is

667
00:29:20,130 --> 00:29:21,630
very important because whatever I say

668
00:29:21,630 --> 00:29:23,820
here it will be applied to logical

669
00:29:23,820 --> 00:29:25,919
application and the extensions based on

670
00:29:25,919 --> 00:29:29,330
logical decoding that I will show you

671
00:29:35,190 --> 00:29:40,950
okay here what I can say that is here is

672
00:29:40,950 --> 00:29:43,020
you can see in the physical similar

673
00:29:43,020 --> 00:29:44,730
application we were against using this

674
00:29:44,730 --> 00:29:47,370
wall sander and wall apply processes we

675
00:29:47,370 --> 00:29:49,530
still use the same protocol but we do

676
00:29:49,530 --> 00:29:52,440
logical application now and it is

677
00:29:52,440 --> 00:29:55,610
currently available with next tensions

678
00:29:55,610 --> 00:29:58,200
physiological and post-race vidyard we

679
00:29:58,200 --> 00:29:59,670
will have a small talk about them as

680
00:29:59,670 --> 00:30:01,860
well and obviously it is better

681
00:30:01,860 --> 00:30:03,780
performance than trigger based

682
00:30:03,780 --> 00:30:06,030
applications which is the reason that I

683
00:30:06,030 --> 00:30:08,880
listed before and it is built on top of

684
00:30:08,880 --> 00:30:13,470
logical decoding so this is the view and

685
00:30:13,470 --> 00:30:15,690
it is also a little allowing synchronous

686
00:30:15,690 --> 00:30:17,850
commit why because we still have this

687
00:30:17,850 --> 00:30:21,510
same protocol for ball and stuff so you

688
00:30:21,510 --> 00:30:27,240
can still do synchronous replication so

689
00:30:27,240 --> 00:30:29,730
what is PG logical since we have the

690
00:30:29,730 --> 00:30:32,610
logical decoding in Postgres now we can

691
00:30:32,610 --> 00:30:34,770
have extensions and can do logical

692
00:30:34,770 --> 00:30:36,990
replication this is an extension for

693
00:30:36,990 --> 00:30:38,910
logical streaming replication and it is

694
00:30:38,910 --> 00:30:40,560
available after logical decoding

695
00:30:40,560 --> 00:30:42,840
basically 9.4 and it is optional

696
00:30:42,840 --> 00:30:45,330
synchronous why because logical decoding

697
00:30:45,330 --> 00:30:47,100
is allowing us in the previous slightly

698
00:30:47,100 --> 00:30:49,740
so it reconfigurable it via functions

699
00:30:49,740 --> 00:30:52,980
and that is you can do row filtering and

700
00:30:52,980 --> 00:30:55,020
column filtering that is the thing you

701
00:30:55,020 --> 00:30:56,970
can do selective replication now your

702
00:30:56,970 --> 00:30:59,640
limitations are less its you are more

703
00:30:59,640 --> 00:31:02,040
flexible than the physical application

704
00:31:02,040 --> 00:31:04,860
and it is you can use it for many

705
00:31:04,860 --> 00:31:06,960
reasons for your be eyes and you can

706
00:31:06,960 --> 00:31:08,610
have different data sets in different

707
00:31:08,610 --> 00:31:11,220
platforms and everything so it is better

708
00:31:11,220 --> 00:31:13,440
in this in that terms in this use cases

709
00:31:13,440 --> 00:31:16,970
and the thing is that you can do a major

710
00:31:16,970 --> 00:31:20,220
release upgrades because you done in the

711
00:31:20,220 --> 00:31:22,110
physical application we are limited to

712
00:31:22,110 --> 00:31:24,360
use same version but here we are not

713
00:31:24,360 --> 00:31:26,880
limited to that we can use from nine

714
00:31:26,880 --> 00:31:28,680
point four to nine point six for example

715
00:31:28,680 --> 00:31:30,650
for upgrades

716
00:31:30,650 --> 00:31:35,910
so this physical physiological hmm this

717
00:31:35,910 --> 00:31:36,720
is the good news

718
00:31:36,720 --> 00:31:40,680
good slide Postgres cotton in Postgres

719
00:31:40,680 --> 00:31:42,720
cotton we will have basic built-in

720
00:31:42,720 --> 00:31:45,060
logical application in core natively and

721
00:31:45,060 --> 00:31:47,880
of course it is built on logical

722
00:31:47,880 --> 00:31:50,670
decoding again you see the same same

723
00:31:50,670 --> 00:31:52,710
sentence which is optionally synchronous

724
00:31:52,710 --> 00:31:55,080
because what we have this now it can do

725
00:31:55,080 --> 00:31:57,360
optional in synchronous and the

726
00:31:57,360 --> 00:31:58,980
difference is from physiological and

727
00:31:58,980 --> 00:32:00,780
post rest and empirical we have

728
00:32:00,780 --> 00:32:03,060
functions to configure the periodical

729
00:32:03,060 --> 00:32:06,360
analogical replication but here you you

730
00:32:06,360 --> 00:32:09,180
are not it sink or you can use DD alt

731
00:32:09,180 --> 00:32:11,310
you so you will create publication and

732
00:32:11,310 --> 00:32:14,070
subscription there will be publisher and

733
00:32:14,070 --> 00:32:17,580
subscriber notes and it is based on

734
00:32:17,580 --> 00:32:19,230
physiological so it implements some

735
00:32:19,230 --> 00:32:20,940
features of physiological but it will

736
00:32:20,940 --> 00:32:22,650
improve by time because there are like

737
00:32:22,650 --> 00:32:25,800
lots of actually stuff that we waited to

738
00:32:25,800 --> 00:32:29,430
be in core and different implementations

739
00:32:29,430 --> 00:32:33,390
of course but same logic applies so

740
00:32:33,390 --> 00:32:35,720
phosphorus cotton

741
00:32:35,720 --> 00:32:39,379
and Postgres PDR this project was useful

742
00:32:39,379 --> 00:32:42,080
he still is used for feeding logical

743
00:32:42,080 --> 00:32:43,730
repetition development in post Crisco

744
00:32:43,730 --> 00:32:46,909
and this is multi-master when we talk

745
00:32:46,909 --> 00:32:49,850
about replication there's also a there's

746
00:32:49,850 --> 00:32:51,980
also difference between like multi

747
00:32:51,980 --> 00:32:53,779
master if you have more than one master

748
00:32:53,779 --> 00:32:55,700
it's of this multi master system and

749
00:32:55,700 --> 00:32:59,269
then the traditional replication is like

750
00:32:59,269 --> 00:33:02,179
masters standby so BDR allows you to

751
00:33:02,179 --> 00:33:06,200
have multi master and a synchronous that

752
00:33:06,200 --> 00:33:10,850
is important and the main aim was for BD

753
00:33:10,850 --> 00:33:12,799
are projected you can have globally

754
00:33:12,799 --> 00:33:16,000
distributed cluster so you can actually

755
00:33:16,000 --> 00:33:19,190
distribute your load in your local

756
00:33:19,190 --> 00:33:21,950
systems let's say your heavens to server

757
00:33:21,950 --> 00:33:24,409
in America to server in some other

758
00:33:24,409 --> 00:33:26,960
country to server in Ireland let's say

759
00:33:26,960 --> 00:33:29,509
if you distribute the load in the

760
00:33:29,509 --> 00:33:31,789
masters because it's a synchronous so

761
00:33:31,789 --> 00:33:33,649
you don't need to wait for writing you

762
00:33:33,649 --> 00:33:35,899
write and then you divide the boss for

763
00:33:35,899 --> 00:33:38,750
locally and then they will sing get

764
00:33:38,750 --> 00:33:41,059
synchronous eventually so it is

765
00:33:41,059 --> 00:33:44,299
eventually consistent cluster voice so

766
00:33:44,299 --> 00:33:45,409
that you can have globally distributed

767
00:33:45,409 --> 00:33:48,289
clusters this is all thanks to the

768
00:33:48,289 --> 00:33:50,389
logical decoding and the projects behind

769
00:33:50,389 --> 00:33:55,309
and how you can think that I mean if I

770
00:33:55,309 --> 00:33:57,919
write the same time same table if some

771
00:33:57,919 --> 00:34:00,139
other people write the same table what

772
00:34:00,139 --> 00:34:02,539
will happen in all cases of master multi

773
00:34:02,539 --> 00:34:05,120
master solutions conflict so everywhere

774
00:34:05,120 --> 00:34:06,860
there are lots of way of handling these

775
00:34:06,860 --> 00:34:10,819
conflicts and in case of media it is

776
00:34:10,819 --> 00:34:13,429
optimistic this mean that after commit

777
00:34:13,429 --> 00:34:15,859
it will be settled this conflict

778
00:34:15,859 --> 00:34:18,379
detection and then automatically this

779
00:34:18,379 --> 00:34:20,359
conflict resolution will happen I think

780
00:34:20,359 --> 00:34:22,429
it for be there it is last one last

781
00:34:22,429 --> 00:34:25,940
committed one means so this is the

782
00:34:25,940 --> 00:34:27,739
important when we say a synchronous

783
00:34:27,739 --> 00:34:30,050
doesn't prevent concurrent rice that was

784
00:34:30,050 --> 00:34:31,609
the reason actually if we prevent the

785
00:34:31,609 --> 00:34:33,109
concurrent rice we can't have this

786
00:34:33,109 --> 00:34:35,750
locally distributed latency right we we

787
00:34:35,750 --> 00:34:40,339
are trying to solve right right locally

788
00:34:40,339 --> 00:34:41,899
so that we don't need to wait for it

789
00:34:41,899 --> 00:34:43,819
usually when we do traditional

790
00:34:43,819 --> 00:34:46,219
replication what do we do mostly we are

791
00:34:46,219 --> 00:34:47,130
scaling the rate

792
00:34:47,130 --> 00:34:49,380
but for scaling the rice and

793
00:34:49,380 --> 00:34:51,150
distributing the load we need multi

794
00:34:51,150 --> 00:34:53,280
masters in if it's your cases like

795
00:34:53,280 --> 00:34:56,210
available for this kind of architecture

796
00:34:56,210 --> 00:34:59,880
so this is PDR is again on logical

797
00:34:59,880 --> 00:35:03,300
decoding and that features that this

798
00:35:03,300 --> 00:35:08,580
alone for us for conclusion what can we

799
00:35:08,580 --> 00:35:11,340
say that because this is a long long

800
00:35:11,340 --> 00:35:13,530
long long way that we came and we will

801
00:35:13,530 --> 00:35:15,570
still go loss of loss of weight and

802
00:35:15,570 --> 00:35:18,000
there is either out of box solutions

803
00:35:18,000 --> 00:35:21,000
Lovett is that but I mean we hold this

804
00:35:21,000 --> 00:35:24,090
have a wall mechanism which is like we

805
00:35:24,090 --> 00:35:26,190
use used for all the replication that we

806
00:35:26,190 --> 00:35:27,990
talk all the decoding logical decoding

807
00:35:27,990 --> 00:35:30,390
so we have all we have replication

808
00:35:30,390 --> 00:35:32,490
different types of replication now it is

809
00:35:32,490 --> 00:35:35,010
getting better and like more like

810
00:35:35,010 --> 00:35:38,550
variety and then also post chrisquared

811
00:35:38,550 --> 00:35:42,210
allows us to use extensions so that you

812
00:35:42,210 --> 00:35:44,700
can rewrite your own plugins and you can

813
00:35:44,700 --> 00:35:46,920
use it actually logical decoding has

814
00:35:46,920 --> 00:35:49,470
this C output plug-in so that you can

815
00:35:49,470 --> 00:35:50,910
write your plugins

816
00:35:50,910 --> 00:35:52,470
it's sort of a P I so that you can write

817
00:35:52,470 --> 00:35:54,750
your plugins for like cache validation

818
00:35:54,750 --> 00:35:56,280
for example or like integrating with

819
00:35:56,280 --> 00:35:59,070
Kafka or some other tool so you you have

820
00:35:59,070 --> 00:36:01,380
the control which means that fault

821
00:36:01,380 --> 00:36:02,820
tolerance and dependability is getting

822
00:36:02,820 --> 00:36:05,520
better and better and as I wanted to

823
00:36:05,520 --> 00:36:07,950
show that we come a very long way and

824
00:36:07,950 --> 00:36:10,590
it's going better for me and as a last

825
00:36:10,590 --> 00:36:12,780
point it's that I focused vertical

826
00:36:12,780 --> 00:36:15,960
application core will be the better and

827
00:36:15,960 --> 00:36:20,310
next leap of in terms of focus and

828
00:36:20,310 --> 00:36:24,330
dependability no stress so I guess

829
00:36:24,330 --> 00:36:26,420
that's it

830
00:36:26,420 --> 00:36:38,799
thank you oh says we'll look Jack coming

831
00:36:41,100 --> 00:36:47,380
[Applause]

832
00:36:47,380 --> 00:36:49,490
okay we have plenty of time for

833
00:36:49,490 --> 00:36:54,349
questions so please wait for a

834
00:36:54,349 --> 00:37:13,190
microphone so questions yeah hello over

835
00:37:13,190 --> 00:37:16,160
here yeah so um I just want to check

836
00:37:16,160 --> 00:37:18,769
with me yeah I misunderstood but um it

837
00:37:18,769 --> 00:37:20,359
seems to me that when you're talking

838
00:37:20,359 --> 00:37:21,710
about logical decoding what you're

839
00:37:21,710 --> 00:37:23,299
replicating is just the statements

840
00:37:23,299 --> 00:37:25,779
instead of the changes to the data files

841
00:37:25,779 --> 00:37:32,210
okay so not statement face but not that

842
00:37:32,210 --> 00:37:35,029
the file says I'm beg your pardon I mean

843
00:37:35,029 --> 00:37:36,829
it is not binary changes that we write

844
00:37:36,829 --> 00:37:42,170
and we it is raw raw waste yes raw based

845
00:37:42,170 --> 00:37:44,269
so it is not statement based but always

846
00:37:44,269 --> 00:37:45,829
for example when you write an update

847
00:37:45,829 --> 00:37:47,930
which is affecting like hundred throws

848
00:37:47,930 --> 00:37:50,240
if there will be hunger change its raw

849
00:37:50,240 --> 00:37:52,220
based but not directly statements okay

850
00:37:52,220 --> 00:37:56,799
but um what will happen if you have like

851
00:37:56,799 --> 00:38:00,019
some information that will be different

852
00:38:00,019 --> 00:38:03,049
depending on which server like if you

853
00:38:03,049 --> 00:38:07,400
send an insert that has a timestamp okay

854
00:38:07,400 --> 00:38:09,500
and maybe the time on the two servers

855
00:38:09,500 --> 00:38:13,039
will be different will still work will

856
00:38:13,039 --> 00:38:15,289
just take that time that was inserted on

857
00:38:15,289 --> 00:38:19,730
the master and use that same time on the

858
00:38:19,730 --> 00:38:23,960
on the replicas I don't know the details

859
00:38:23,960 --> 00:38:25,730
actually and this is the author of

860
00:38:25,730 --> 00:38:28,130
logical replication unique and maybe I

861
00:38:28,130 --> 00:38:30,470
don't know release I don't know I think

862
00:38:30,470 --> 00:38:32,630
it will replicate any race it doesn't

863
00:38:32,630 --> 00:38:35,710
mind this times

864
00:38:38,400 --> 00:38:41,430
so it actually replicates or decodes the

865
00:38:41,430 --> 00:38:44,060
changes that happened to the data so if

866
00:38:44,060 --> 00:38:46,470
you insert timestamp or random or

867
00:38:46,470 --> 00:38:47,970
something like that it evaluates it

868
00:38:47,970 --> 00:38:50,910
writes to the table or n 12 and then

869
00:38:50,910 --> 00:38:53,550
what was written is decoded to the

870
00:38:53,550 --> 00:39:01,020
stream so it does the changes that you

871
00:39:01,020 --> 00:39:17,310
write to data okay cool

872
00:39:17,310 --> 00:39:20,910
so you mentioned that the the logical

873
00:39:20,910 --> 00:39:22,800
replication also supports synchronous

874
00:39:22,800 --> 00:39:26,160
commit to one of the secondaries does

875
00:39:26,160 --> 00:39:28,290
that mean that there is some sort of

876
00:39:28,290 --> 00:39:29,849
shared part of the protocol between the

877
00:39:29,849 --> 00:39:33,570
old-school disk-based replication and

878
00:39:33,570 --> 00:39:35,790
the logical stuff or does the logical

879
00:39:35,790 --> 00:39:37,950
decoder provide some way of blocking

880
00:39:37,950 --> 00:39:42,599
commit on the primary in order to so

881
00:39:42,599 --> 00:39:43,800
that you don't acknowledge to a client

882
00:39:43,800 --> 00:39:45,690
until it's on to notes I think from my

883
00:39:45,690 --> 00:39:46,950
understanding it is using traditional

884
00:39:46,950 --> 00:39:49,290
way too because we have this ball and we

885
00:39:49,290 --> 00:39:50,640
are using these facilities is coming

886
00:39:50,640 --> 00:39:51,930
from this ball process

887
00:39:51,930 --> 00:39:54,690
so that's what I understand if I'm

888
00:39:54,690 --> 00:39:57,270
incorrect I mean it doesn't have the

889
00:39:57,270 --> 00:39:59,670
extra thing depending on logic of

890
00:39:59,670 --> 00:40:01,410
replication but it is using the same

891
00:40:01,410 --> 00:40:05,480
traditional way okay

892
00:40:05,780 --> 00:40:10,700
here so uh you mentioned that the

893
00:40:10,700 --> 00:40:14,090
logical is like another level to wall

894
00:40:14,090 --> 00:40:17,270
writing like low right ahead look level

895
00:40:17,270 --> 00:40:20,810
so but there is also logical extraction

896
00:40:20,810 --> 00:40:23,510
so do you actually like try to decode

897
00:40:23,510 --> 00:40:26,870
whatever was written like in right ahead

898
00:40:26,870 --> 00:40:31,450
or you actually write another type of

899
00:40:33,160 --> 00:40:36,200
okay so what what's the extraction then

900
00:40:36,200 --> 00:40:38,600
stands for like what does it extract or

901
00:40:38,600 --> 00:40:43,340
just it's just a weed I guess I can

902
00:40:43,340 --> 00:40:49,010
answer this better with so it it

903
00:40:49,010 --> 00:40:52,550
actually decodes the data that you would

904
00:40:52,550 --> 00:40:55,220
write normally the logical level just

905
00:40:55,220 --> 00:40:57,440
add some additional information that you

906
00:40:57,440 --> 00:41:01,400
need for example if you do update it

907
00:41:01,400 --> 00:41:05,240
stores the data about the previous row

908
00:41:05,240 --> 00:41:07,460
so because you need to actually somehow

909
00:41:07,460 --> 00:41:09,500
identify the previous are also it puts

910
00:41:09,500 --> 00:41:11,030
it there with normal update you would

911
00:41:11,030 --> 00:41:13,760
only get data for the new row but with

912
00:41:13,760 --> 00:41:15,950
logical you need to the old one but the

913
00:41:15,950 --> 00:41:17,780
decoding then decodes to binary data

914
00:41:17,780 --> 00:41:20,660
from the wall to actual changes for the

915
00:41:20,660 --> 00:41:31,940
API thank you um so going back my

916
00:41:31,940 --> 00:41:33,500
question someone's already asked half of

917
00:41:33,500 --> 00:41:36,200
it so the rep logical replication as you

918
00:41:36,200 --> 00:41:38,120
said if you've got like a million row

919
00:41:38,120 --> 00:41:40,400
update it will it will break down into a

920
00:41:40,400 --> 00:41:44,000
million one-line update statements I've

921
00:41:44,000 --> 00:41:45,800
seen that with other products of the

922
00:41:45,800 --> 00:41:47,770
database engines and it can cause before

923
00:41:47,770 --> 00:41:52,100
the replicas to lag quite horribly is

924
00:41:52,100 --> 00:41:54,290
there any sort of clever logic for

925
00:41:54,290 --> 00:41:55,850
handling those scenarios with logical

926
00:41:55,850 --> 00:41:57,410
replications it was quite a while back

927
00:41:57,410 --> 00:41:59,570
when I saw that problem I'm starting to

928
00:41:59,570 --> 00:42:01,090
use Postgres more and more

929
00:42:01,090 --> 00:42:03,040
and I'm just worried I'm gonna see that

930
00:42:03,040 --> 00:42:05,080
again from you know that problem I saw

931
00:42:05,080 --> 00:42:07,210
five years ago all the time with her it

932
00:42:07,210 --> 00:42:09,220
was it wasn't a post aggressors but it

933
00:42:09,220 --> 00:42:10,810
was a logical replication and it was

934
00:42:10,810 --> 00:42:12,670
exactly that scenario and the you know

935
00:42:12,670 --> 00:42:14,650
update gets broken down into a million

936
00:42:14,650 --> 00:42:16,600
one light million single update

937
00:42:16,600 --> 00:42:18,550
statements which is takes a long time to

938
00:42:18,550 --> 00:42:22,510
process and I'm not logical the

939
00:42:22,510 --> 00:42:24,700
replication developer but what I know is

940
00:42:24,700 --> 00:42:27,520
this lake is almost all the time the

941
00:42:27,520 --> 00:42:29,860
problem for any kind of scenario so I

942
00:42:29,860 --> 00:42:32,200
don't know how they handle it in like

943
00:42:32,200 --> 00:42:35,410
four in production use cases but but I

944
00:42:35,410 --> 00:42:37,210
know is it is for example better apart

945
00:42:37,210 --> 00:42:40,600
from there is the performance reports

946
00:42:40,600 --> 00:42:42,730
actually from my colleague Tomas and he

947
00:42:42,730 --> 00:42:45,610
wrote in our blog for company blog that

948
00:42:45,610 --> 00:42:49,030
he kind of compared with replication in

949
00:42:49,030 --> 00:42:52,120
9.4 replication 9.6 physical replication

950
00:42:52,120 --> 00:42:54,700
and logical replication in use so it

951
00:42:54,700 --> 00:42:56,770
benchmarks and so on so it doesn't have

952
00:42:56,770 --> 00:42:58,960
this huge gap of performance that I see

953
00:42:58,960 --> 00:43:01,390
from the graphics so I don't know how

954
00:43:01,390 --> 00:43:03,580
they handle it how they manage doing it

955
00:43:03,580 --> 00:43:05,830
better but there is a yeah they're

956
00:43:05,830 --> 00:43:07,750
working alright and it's the obvious

957
00:43:07,750 --> 00:43:09,730
thing that from the theory that we can

958
00:43:09,730 --> 00:43:11,470
see at least that is in the

959
00:43:11,470 --> 00:43:13,630
presentations compared to trigger based

960
00:43:13,630 --> 00:43:15,430
ones they are really good performance

961
00:43:15,430 --> 00:43:17,350
but they don't have this huge gap of

962
00:43:17,350 --> 00:43:19,750
performance is coming from physical or

963
00:43:19,750 --> 00:43:23,020
logical so it is yeah it's news and it's

964
00:43:23,020 --> 00:43:26,920
used because since 9.4 it is like loss

965
00:43:26,920 --> 00:43:29,650
of time for people to try and use it but

966
00:43:29,650 --> 00:43:31,690
in court that we don't know it I mean we

967
00:43:31,690 --> 00:43:33,040
know that it will be in part of course

968
00:43:33,040 --> 00:43:34,810
West End but we will see how it will

969
00:43:34,810 --> 00:43:36,880
work in I don't have performance this

970
00:43:36,880 --> 00:43:39,110
button

971
00:43:39,110 --> 00:43:42,970
I have a question about the wall here

972
00:43:42,970 --> 00:43:47,120
how for how long is data stored in the

973
00:43:47,120 --> 00:43:49,850
wall let's say you have a table with a

974
00:43:49,850 --> 00:43:52,340
limited number of rows but with very

975
00:43:52,340 --> 00:43:54,470
regular updates which will grow

976
00:43:54,470 --> 00:43:56,870
indefinitely based on those updates or

977
00:43:56,870 --> 00:43:59,600
it's all data discarded at some point in

978
00:43:59,600 --> 00:44:02,060
time you need to decide how long do you

979
00:44:02,060 --> 00:44:05,750
want to keep your keep your walls so it

980
00:44:05,750 --> 00:44:07,100
is depending on your configuration

981
00:44:07,100 --> 00:44:09,470
basically you can keep it like unlimited

982
00:44:09,470 --> 00:44:11,660
time then you will run out of disk space

983
00:44:11,660 --> 00:44:14,330
but you need to be sure about your

984
00:44:14,330 --> 00:44:16,850
dynamics how much do you do checkpoints

985
00:44:16,850 --> 00:44:19,130
how do you replicate and so you need to

986
00:44:19,130 --> 00:44:21,530
compute it okay if I understand

987
00:44:21,530 --> 00:44:25,090
correctly yes and it's the data also

988
00:44:25,090 --> 00:44:26,900
released back to the operating system

989
00:44:26,900 --> 00:44:30,220
when it's when it's been discarded or

990
00:44:30,220 --> 00:44:34,190
does it keep the the old records

991
00:44:34,190 --> 00:44:39,530
allocated but empty for future use it is

992
00:44:39,530 --> 00:44:42,110
beyond my explanation I guess I don't

993
00:44:42,110 --> 00:44:43,990
know how it works ready

994
00:44:43,990 --> 00:44:48,819
does anyone explain this better

995
00:44:57,440 --> 00:45:01,080
okay yeah so I mean the wall is gonna

996
00:45:01,080 --> 00:45:02,940
stay around for as long as you have it

997
00:45:02,940 --> 00:45:04,230
set up - there's some different commands

998
00:45:04,230 --> 00:45:06,630
that can be used to do kind of archive

999
00:45:06,630 --> 00:45:09,600
cleanup and also archiving when you do

1000
00:45:09,600 --> 00:45:11,820
archive wall through with Postgres it's

1001
00:45:11,820 --> 00:45:14,310
going to release that once it's done but

1002
00:45:14,310 --> 00:45:15,660
if you're doing a logical decoding with

1003
00:45:15,660 --> 00:45:17,310
it then you need that wall stream for as

1004
00:45:17,310 --> 00:45:20,190
long as you have a ongoing transaction

1005
00:45:20,190 --> 00:45:21,750
or throughout a given check point at

1006
00:45:21,750 --> 00:45:23,070
least anyway you're gonna need that

1007
00:45:23,070 --> 00:45:23,460
anyway

1008
00:45:23,460 --> 00:45:26,070
so it's not really kept around

1009
00:45:26,070 --> 00:45:29,310
eventually it does get recycled

1010
00:45:29,310 --> 00:45:32,310
so even inside of both scrubs as long as

1011
00:45:32,310 --> 00:45:33,630
your archive command is working properly

1012
00:45:33,630 --> 00:45:35,160
assuming you're using an archive command

1013
00:45:35,160 --> 00:45:36,690
if you're not then it shouldn't actually

1014
00:45:36,690 --> 00:45:38,400
need to keep it around for longer than a

1015
00:45:38,400 --> 00:45:40,730
given transaction as my understanding

1016
00:45:40,730 --> 00:45:49,530
okay I just get a question as far as I

1017
00:45:49,530 --> 00:45:52,650
understood the data fair fights between

1018
00:45:52,650 --> 00:45:54,960
minor versions of Postgres are

1019
00:45:54,960 --> 00:45:59,660
compatible where is the benefit of

1020
00:45:59,660 --> 00:46:02,010
logical replication between minor

1021
00:46:02,010 --> 00:46:08,490
versions easy to do updates this one I

1022
00:46:08,490 --> 00:46:10,740
emphasize major versions because

1023
00:46:10,740 --> 00:46:12,540
recently it is harder there are

1024
00:46:12,540 --> 00:46:14,550
solutions to do this PG up create and

1025
00:46:14,550 --> 00:46:16,770
you can still do it but it is better

1026
00:46:16,770 --> 00:46:18,960
because you don't need to use the same

1027
00:46:18,960 --> 00:46:21,240
major version that was I'm meaning so

1028
00:46:21,240 --> 00:46:22,770
for minor version you can use it of

1029
00:46:22,770 --> 00:46:27,440
course but it's not needed okay thanks

1030
00:46:30,230 --> 00:46:35,530
oh hello with streaming replication

1031
00:46:35,530 --> 00:46:40,369
replication and replication thoughts we

1032
00:46:40,369 --> 00:46:43,130
have a new flavor mode which we

1033
00:46:43,130 --> 00:46:47,450
encourage sometimes when you have slave

1034
00:46:47,450 --> 00:46:51,790
which for some reason becomes

1035
00:46:51,790 --> 00:47:00,790
unresponsive your petition is cute and

1036
00:47:00,790 --> 00:47:03,640
after some time your master is also

1037
00:47:03,640 --> 00:47:08,359
going down do you have some solutions

1038
00:47:08,359 --> 00:47:11,300
besides manatorian for dealing with such

1039
00:47:11,300 --> 00:47:14,869
situations you need the basic thing

1040
00:47:14,869 --> 00:47:17,300
maybe I can say that you need to monitor

1041
00:47:17,300 --> 00:47:19,640
your replication lag so you need to be

1042
00:47:19,640 --> 00:47:22,250
aware of before it got unconscionable so

1043
00:47:22,250 --> 00:47:24,650
you need to know that what is acceptable

1044
00:47:24,650 --> 00:47:26,630
for you in terms of like I mean in vice

1045
00:47:26,630 --> 00:47:29,599
or in time so then you don't need to be

1046
00:47:29,599 --> 00:47:31,670
like okay it's like everything it's

1047
00:47:31,670 --> 00:47:33,650
filled and it's like not catching it all

1048
00:47:33,650 --> 00:47:36,200
ends like it is like too much leg so you

1049
00:47:36,200 --> 00:47:38,000
don't need you need to do base pickup or

1050
00:47:38,000 --> 00:47:40,130
something start over so before this move

1051
00:47:40,130 --> 00:47:42,470
from there are like lots of monitoring

1052
00:47:42,470 --> 00:47:43,520
tools that I don't know actually

1053
00:47:43,520 --> 00:47:45,770
externally but you can find it if you

1054
00:47:45,770 --> 00:47:47,599
are a leader of planet PostgreSQL all

1055
00:47:47,599 --> 00:47:49,520
the company blocks are going that so you

1056
00:47:49,520 --> 00:47:50,960
can find the air tools also there are

1057
00:47:50,960 --> 00:47:52,250
there is check post crest which is

1058
00:47:52,250 --> 00:47:54,500
mostly used I guess with the scripts so

1059
00:47:54,500 --> 00:47:56,060
that you can just check and implement in

1060
00:47:56,060 --> 00:47:58,099
your monitoring application like you

1061
00:47:58,099 --> 00:48:01,880
should definitely check ok there is one

1062
00:48:01,880 --> 00:48:04,119
question

1063
00:48:10,910 --> 00:48:13,770
what is the difference between streaming

1064
00:48:13,770 --> 00:48:15,320
and non streaming unifications

1065
00:48:15,320 --> 00:48:17,550
replication from the point of

1066
00:48:17,550 --> 00:48:20,250
implementation why streaming okay

1067
00:48:20,250 --> 00:48:23,160
replication is more efficient and why

1068
00:48:23,160 --> 00:48:25,680
progress protocol internal protocol is

1069
00:48:25,680 --> 00:48:28,590
better than for example our sink or

1070
00:48:28,590 --> 00:48:30,530
something like that

1071
00:48:30,530 --> 00:48:32,790
I don't know actually have the

1072
00:48:32,790 --> 00:48:34,350
implementation in the code because I'm

1073
00:48:34,350 --> 00:48:37,380
not but what I know is it that you can

1074
00:48:37,380 --> 00:48:39,930
use this if you want to send your files

1075
00:48:39,930 --> 00:48:43,080
you can send it can you send your files

1076
00:48:43,080 --> 00:48:45,420
with any kind of protocol but if you use

1077
00:48:45,420 --> 00:48:48,000
your our internal wall sender and

1078
00:48:48,000 --> 00:48:50,280
receiver protocols it's possible has

1079
00:48:50,280 --> 00:48:51,960
more optimization it is more like you

1080
00:48:51,960 --> 00:48:53,850
don't need to control it over so it is

1081
00:48:53,850 --> 00:48:55,830
streaming all the time you don't need to

1082
00:48:55,830 --> 00:48:57,720
ship your files that is what I

1083
00:48:57,720 --> 00:48:59,370
understand and Stephen wants to say

1084
00:48:59,370 --> 00:49:02,340
something more but why is better if

1085
00:49:02,340 --> 00:49:04,530
you're sending files at send in 6 to 16

1086
00:49:04,530 --> 00:49:06,300
megabytes chunks so you're always laying

1087
00:49:06,300 --> 00:49:09,060
16 mega high megabytes behind and if

1088
00:49:09,060 --> 00:49:10,500
you're streaming you're getting the data

1089
00:49:10,500 --> 00:49:13,290
in real time so instead of like shipping

1090
00:49:13,290 --> 00:49:16,759
them like vice

1091
00:49:20,109 --> 00:49:23,219
also this

1092
00:49:28,150 --> 00:49:39,589
thank you no problem if I choose logical

1093
00:49:39,589 --> 00:49:46,000
implication does it mean that I have

1094
00:49:46,000 --> 00:49:52,960
twice all the information so I will get

1095
00:49:53,260 --> 00:49:58,130
the size of the world will be more it

1096
00:49:58,130 --> 00:50:00,470
will be more but I don't I asked this

1097
00:50:00,470 --> 00:50:02,060
question before it won't be double there

1098
00:50:02,060 --> 00:50:05,450
is not that huge difference it is there

1099
00:50:05,450 --> 00:50:06,950
is something I mean not all the

1100
00:50:06,950 --> 00:50:08,690
information is in the world because it

1101
00:50:08,690 --> 00:50:10,430
has also other stuff it's done inside

1102
00:50:10,430 --> 00:50:13,040
but your ball is not going going double

1103
00:50:13,040 --> 00:50:14,990
okay it is double thing maybe you

1104
00:50:14,990 --> 00:50:16,790
remember from the trigger-based ones

1105
00:50:16,790 --> 00:50:19,700
because it they were writing up a double

1106
00:50:19,700 --> 00:50:21,650
time so double rice is coming from there

1107
00:50:21,650 --> 00:50:23,750
but nothing logical replication

1108
00:50:23,750 --> 00:50:27,400
scientist okay thank you

1109
00:50:31,900 --> 00:50:35,690
question for you you say it all is

1110
00:50:35,690 --> 00:50:38,530
single treated

1111
00:50:38,530 --> 00:50:43,130
okay so they still say the vol a single

1112
00:50:43,130 --> 00:50:47,080
traded instrument and the multi traded

1113
00:50:49,840 --> 00:50:52,609
so no no I didn't mean to imply that it

1114
00:50:52,609 --> 00:50:54,349
what we have today is multi-threaded I

1115
00:50:54,349 --> 00:50:55,460
was just pointing out that's one of the

1116
00:50:55,460 --> 00:50:56,599
issues with our saying it is something

1117
00:50:56,599 --> 00:50:58,790
that we're looking at doing in terms of

1118
00:50:58,790 --> 00:51:01,099
being able to support parallel archiving

1119
00:51:01,099 --> 00:51:03,800
of wall it's not there yet but I've had

1120
00:51:03,800 --> 00:51:05,599
a discussion with Magnus about it that I

1121
00:51:05,599 --> 00:51:08,390
think is looking promising so in the

1122
00:51:08,390 --> 00:51:10,369
future the ideas that we'll be able to

1123
00:51:10,369 --> 00:51:12,710
do parallel archiving it's just not know

1124
00:51:12,710 --> 00:51:16,130
so right now no but you know we can't

1125
00:51:16,130 --> 00:51:20,510
with our st. get also okay maybe one

1126
00:51:20,510 --> 00:51:28,310
last question so the question is on if

1127
00:51:28,310 --> 00:51:30,020
you have application and long

1128
00:51:30,020 --> 00:51:34,880
transactions do do you log these before

1129
00:51:34,880 --> 00:51:36,740
you commit so we actually constrain

1130
00:51:36,740 --> 00:51:39,290
things while they are transaction you

1131
00:51:39,290 --> 00:51:41,359
replicate what the transaction is

1132
00:51:41,359 --> 00:51:44,570
running or is thing just going into the

1133
00:51:44,570 --> 00:51:49,369
log when the transaction is okay so if

1134
00:51:49,369 --> 00:51:51,740
you do like a large or that's the full

1135
00:51:51,740 --> 00:51:53,630
of question with all the table type of

1136
00:51:53,630 --> 00:51:56,359
commands will I have to complete on the

1137
00:51:56,359 --> 00:51:58,730
master before it actually starts on the

1138
00:51:58,730 --> 00:52:03,010
slave or how do okay

1139
00:52:05,000 --> 00:52:09,600
okay we have a few minutes left but I

1140
00:52:09,600 --> 00:52:12,890
think we had plenty of questions

1141
00:52:20,579 --> 00:52:23,789
on the changeset extraction they said

1142
00:52:23,789 --> 00:52:26,640
that DDL wasn't supported are there any

1143
00:52:26,640 --> 00:52:29,549
implications with respect to schema

1144
00:52:29,549 --> 00:52:36,109
changes sorry I didn't quite get it

1145
00:52:36,109 --> 00:52:43,410
those yeah so on your slide with the

1146
00:52:43,410 --> 00:52:46,259
change set extraction is said that

1147
00:52:46,259 --> 00:52:50,069
DDL statements weren't supported in the

1148
00:52:50,069 --> 00:52:52,920
extraction so does they have any

1149
00:52:52,920 --> 00:52:55,499
implication in terms of your master and

1150
00:52:55,499 --> 00:52:59,059
slave when you're doing scheme changes

1151
00:52:59,059 --> 00:53:05,309
what kind of implications well the short

1152
00:53:05,309 --> 00:53:06,539
answer is that things are getting

1153
00:53:06,539 --> 00:53:08,329
complicated

1154
00:53:08,329 --> 00:53:12,299
yeah he's asking like yeah you need to

1155
00:53:12,299 --> 00:53:14,819
sync everything and then do the changes

1156
00:53:14,819 --> 00:53:16,140
into all places at once

1157
00:53:16,140 --> 00:53:18,989
and I think the ideas that the post cost

1158
00:53:18,989 --> 00:53:21,449
ten will get the TDL replication as well

1159
00:53:21,449 --> 00:53:24,390
but it's not there yet geological Isis

1160
00:53:24,390 --> 00:53:27,359
is far ahead than what's in post course

1161
00:53:27,359 --> 00:53:31,469
core but it's yeah it's not in in there

1162
00:53:31,469 --> 00:53:36,929
yet when it's running errands in quarry

1163
00:53:36,929 --> 00:53:40,069
- what we problem

1164
00:53:40,340 --> 00:53:43,790
okay so thank you thank you again thank

1165
00:53:43,790 --> 00:53:53,150
you okay and the next talk will be

1166
00:53:53,150 --> 00:53:54,830
starting in ten minutes

1167
00:53:54,830 --> 00:53:56,100
at three o'clock

1168
00:53:56,100 --> 00:53:59,199
[Music]

