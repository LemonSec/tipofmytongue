1
00:00:09,080 --> 00:00:13,080
okay hello everyone I'm Robert Cossack

2
00:00:13,080 --> 00:00:15,719
I'm student from Slovakia and today I

3
00:00:15,719 --> 00:00:18,390
will talk about next generation of works

4
00:00:18,390 --> 00:00:20,689
that suit

5
00:00:20,689 --> 00:00:23,990
the main idea of this project was

6
00:00:23,990 --> 00:00:27,660
introduced by my mentor Hisham he is

7
00:00:27,660 --> 00:00:30,000
well known person in WA community and

8
00:00:30,000 --> 00:00:34,949
Warhawks community and this new tesu it

9
00:00:34,949 --> 00:00:37,670
was developed on google Summer of Code

10
00:00:37,670 --> 00:00:41,790
intership I only can recommend this

11
00:00:41,790 --> 00:00:45,030
organization of work with our community

12
00:00:45,030 --> 00:00:49,140
and Google was was really exciting I

13
00:00:49,140 --> 00:00:54,530
learned a lot of new stuff so to project

14
00:00:54,530 --> 00:00:58,430
all tests so it was implemented like

15
00:00:58,430 --> 00:01:04,259
like a really long bash script it was

16
00:01:04,259 --> 00:01:10,080
executed on Travis and the main idea of

17
00:01:10,080 --> 00:01:13,830
this bash script was test this works on

18
00:01:13,830 --> 00:01:22,770
black box level this was achieved by by

19
00:01:22,770 --> 00:01:26,400
built of new environment which built

20
00:01:26,400 --> 00:01:30,890
over ox version on your computer as

21
00:01:30,890 --> 00:01:33,240
isolated from your kolcaba

22
00:01:33,240 --> 00:01:37,170
who are rocks after this successful

23
00:01:37,170 --> 00:01:41,670
build of the script continued into tests

24
00:01:41,670 --> 00:01:46,140
but you can check the output of tests

25
00:01:46,140 --> 00:01:49,860
you if you get some error during the

26
00:01:49,860 --> 00:01:53,850
execution the script will stop and you

27
00:01:53,850 --> 00:01:57,630
can continue to other tests there are so

28
00:01:57,630 --> 00:02:01,799
many issues but the is a relation of

29
00:02:01,799 --> 00:02:04,680
test reza testing environment after each

30
00:02:04,680 --> 00:02:09,350
test was was a really good idea and

31
00:02:09,350 --> 00:02:13,220
Hisham wanted to make it multi-platform

32
00:02:13,220 --> 00:02:17,580
which was created like a small batch

33
00:02:17,580 --> 00:02:21,510
script for Windows and it does just

34
00:02:21,510 --> 00:02:26,500
built of some small module this was

35
00:02:26,500 --> 00:02:33,550
executed on a purveyor and the result of

36
00:02:33,550 --> 00:02:37,480
this test was just on a very it that

37
00:02:37,480 --> 00:02:40,230
there was no merger you can't check

38
00:02:40,230 --> 00:02:43,690
other tests on Windows so we will have

39
00:02:43,690 --> 00:02:51,760
just this only built module does someone

40
00:02:51,760 --> 00:02:53,890
has idea what we are missing here what

41
00:02:53,890 --> 00:02:57,000
can we do better

42
00:02:58,650 --> 00:03:03,280
no one everything is great we don't need

43
00:03:03,280 --> 00:03:08,890
any new tests or just reminder the

44
00:03:08,890 --> 00:03:10,629
continuous integration started on

45
00:03:10,629 --> 00:03:15,329
Treviso which we get results for github

46
00:03:15,329 --> 00:03:20,819
also it helped on multiple requests but

47
00:03:20,819 --> 00:03:23,019
but it was the information from

48
00:03:23,019 --> 00:03:25,630
everywhere and the best script as I said

49
00:03:25,630 --> 00:03:31,650
has so many troubles and coverage boss

50
00:03:32,549 --> 00:03:39,880
was on coveralls system or service our

51
00:03:39,880 --> 00:03:44,920
new test ideas was not just do blackbox

52
00:03:44,920 --> 00:03:47,200
testing but allow the white box texting

53
00:03:47,200 --> 00:03:50,010
this is so important for programmers

54
00:03:50,010 --> 00:03:53,109
it's faster like building for

55
00:03:53,109 --> 00:03:57,630
environment before testing and you can

56
00:03:57,630 --> 00:04:03,090
you can test it on that white box liar

57
00:04:03,959 --> 00:04:07,480
idea for black box testing was the same

58
00:04:07,480 --> 00:04:11,560
in new rocks test suite and we're an

59
00:04:11,560 --> 00:04:15,579
environment stay same oh there is one

60
00:04:15,579 --> 00:04:20,889
mini more which has just basic modules

61
00:04:20,889 --> 00:04:23,380
for Warhawks and full environment got

62
00:04:23,380 --> 00:04:26,380
something like a wall socket Wasik and

63
00:04:26,380 --> 00:04:31,150
others we wanted upgrade multi-platform

64
00:04:31,150 --> 00:04:33,940
not not just to make some

65
00:04:33,940 --> 00:04:38,050
two trivial tests on up where we wanted

66
00:04:38,050 --> 00:04:41,980
to run all tests on Windows not all but

67
00:04:41,980 --> 00:04:45,300
mostly which can be executed on Windows

68
00:04:45,300 --> 00:04:48,880
first time I was like why do we need to

69
00:04:48,880 --> 00:04:51,640
make this because I don't think

70
00:04:51,640 --> 00:04:56,170
command-line users are executing it on

71
00:04:56,170 --> 00:05:02,080
Windows but do during the summer I I saw

72
00:05:02,080 --> 00:05:05,320
every week some issues on Windows

73
00:05:05,320 --> 00:05:09,270
command line so it's it's really it's

74
00:05:09,510 --> 00:05:12,940
really working and people are using it

75
00:05:12,940 --> 00:05:22,090
on command line windows to the best the

76
00:05:22,090 --> 00:05:24,580
best framework for making this happen

77
00:05:24,580 --> 00:05:29,800
was busted it's I think most no no unit

78
00:05:29,800 --> 00:05:32,950
testing framework in wha-oh

79
00:05:32,950 --> 00:05:37,060
it's a multi-platform based on describe

80
00:05:37,060 --> 00:05:40,480
and it blocks I think every language has

81
00:05:40,480 --> 00:05:45,100
a similar framework you can do asserts

82
00:05:45,100 --> 00:05:48,970
mocks a synchronous test output handling

83
00:05:48,970 --> 00:05:51,370
which is it's a it's a really good you

84
00:05:51,370 --> 00:05:53,470
can implement your own library for that

85
00:05:53,470 --> 00:05:57,940
and for us was the the best

86
00:05:57,940 --> 00:06:00,040
functionality script execution before

87
00:06:00,040 --> 00:06:04,710
tests because we we built the

88
00:06:04,710 --> 00:06:10,330
environment before the tests we wanted

89
00:06:10,330 --> 00:06:15,340
all implemented in wah ooh busted work

90
00:06:15,340 --> 00:06:18,790
with more script tool and the output

91
00:06:18,790 --> 00:06:24,160
languages you can change structure of

92
00:06:24,160 --> 00:06:26,919
new tests to this is really simple the

93
00:06:26,919 --> 00:06:30,900
first folder is test where there is a

94
00:06:30,900 --> 00:06:34,930
script for built environment or there is

95
00:06:34,930 --> 00:06:39,360
some small script to build mock server

96
00:06:39,360 --> 00:06:43,960
which I sell which I say later but it

97
00:06:43,960 --> 00:06:46,180
was used for the black boss black box

98
00:06:46,180 --> 00:06:46,800
tar

99
00:06:46,800 --> 00:06:51,770
part of this project and to test upload

100
00:06:51,770 --> 00:06:57,090
functionality or other subfolder is test

101
00:06:57,090 --> 00:07:01,620
files you can add their some summer rock

102
00:07:01,620 --> 00:07:04,139
specs for your project for your unit

103
00:07:04,139 --> 00:07:07,979
test next folder is spec or disease-like

104
00:07:07,979 --> 00:07:11,690
from documentation of Bastet framework

105
00:07:11,690 --> 00:07:15,240
for each module you have a spec file

106
00:07:15,240 --> 00:07:20,220
with your unit tests you can use text on

107
00:07:20,220 --> 00:07:23,659
your human tests for example views to

108
00:07:23,659 --> 00:07:27,389
the some tests for window some tests for

109
00:07:27,389 --> 00:07:33,780
unique so some special cases has a hash

110
00:07:33,780 --> 00:07:37,470
tag with the the number of pull or a

111
00:07:37,470 --> 00:07:42,000
request so if you are now developing

112
00:07:42,000 --> 00:07:44,819
some bigger part of Warhawks and you

113
00:07:44,819 --> 00:07:48,150
want to pull your merge layer a request

114
00:07:48,150 --> 00:07:54,919
oh it's good to make a unit test for it

115
00:07:55,880 --> 00:07:59,819
the tester for first view eats it it

116
00:07:59,819 --> 00:08:04,409
looks like quite hacky but in in the

117
00:08:04,409 --> 00:08:06,750
main describe block you just write what

118
00:08:06,750 --> 00:08:09,659
you are going to test as we can see we

119
00:08:09,659 --> 00:08:11,940
are testing the install part of war

120
00:08:11,940 --> 00:08:16,139
hawks and the first test is just install

121
00:08:16,139 --> 00:08:18,599
elastic module with skipping dependency

122
00:08:18,599 --> 00:08:23,849
checks this is a black box test so you

123
00:08:23,849 --> 00:08:26,580
can imagine you type it on your command

124
00:08:26,580 --> 00:08:29,310
line in your terminal or something like

125
00:08:29,310 --> 00:08:32,279
Warhawks install a sec you add your

126
00:08:32,279 --> 00:08:38,360
libraries add your flex and the DS you

127
00:08:38,360 --> 00:08:44,850
assert in a busted framework for example

128
00:08:44,850 --> 00:08:47,010
we can see if the environment is just

129
00:08:47,010 --> 00:08:50,160
minimal of we are not a stink built of

130
00:08:50,160 --> 00:08:54,839
WA socket so we test it like execute

131
00:08:54,839 --> 00:08:57,870
shot once ok this should return false

132
00:08:57,870 --> 00:09:00,300
because 1 second is not in that

133
00:09:00,300 --> 00:09:06,270
environment and for better check V we

134
00:09:06,270 --> 00:09:08,520
check the library if if there is

135
00:09:08,520 --> 00:09:15,330
something with rocket the next test as I

136
00:09:15,330 --> 00:09:21,120
mentioned was to sample request 6 3 1 2

137
00:09:21,120 --> 00:09:25,680
or and we can see that there is if

138
00:09:25,680 --> 00:09:29,010
condition for example if there is a

139
00:09:29,010 --> 00:09:33,360
Windows operating system so it's really

140
00:09:33,360 --> 00:09:37,130
easy you can just open some tests

141
00:09:37,130 --> 00:09:40,560
ready read it for 5 minutes and you get

142
00:09:40,560 --> 00:09:46,640
into it the Mach of Larocque server was

143
00:09:46,640 --> 00:09:49,950
based on Lua rocks upload command

144
00:09:49,950 --> 00:09:53,580
because it's possible to test the void

145
00:09:53,580 --> 00:09:57,270
box but we want to stick the the first

146
00:09:57,270 --> 00:10:00,660
idea test to Eric's on like box level

147
00:10:00,660 --> 00:10:04,680
and this is how we created some mock-up

148
00:10:04,680 --> 00:10:09,150
server of works it'll it's using rest

149
00:10:09,150 --> 00:10:12,870
server as module and has some basic get

150
00:10:12,870 --> 00:10:17,490
methods with with the responses for your

151
00:10:17,490 --> 00:10:21,720
unique test so if you want this Apple

152
00:10:21,720 --> 00:10:25,050
command or on black box level unit

153
00:10:25,050 --> 00:10:28,320
creates some some responses into this

154
00:10:28,320 --> 00:10:32,760
file so it ran in background during the

155
00:10:32,760 --> 00:10:34,700
execution

156
00:10:34,700 --> 00:10:40,910
it could be execute executable on Travis

157
00:10:40,910 --> 00:10:48,450
but it's not for Windows users the

158
00:10:48,450 --> 00:10:51,090
biggest step for this test - it was make

159
00:10:51,090 --> 00:10:55,200
it multi-platform or no OS X we don't

160
00:10:55,200 --> 00:10:58,710
have any big issues there were some new

161
00:10:58,710 --> 00:11:01,500
if conditions I think mostly for a

162
00:11:01,500 --> 00:11:06,960
socket module and the bigger problem was

163
00:11:06,960 --> 00:11:10,560
on Windows platform or you need to

164
00:11:10,560 --> 00:11:13,529
change clothes some commands

165
00:11:13,529 --> 00:11:18,089
rules in their command line for example

166
00:11:18,089 --> 00:11:21,209
temporary directory it's not same and

167
00:11:21,209 --> 00:11:27,660
other problems oh now you can use it on

168
00:11:27,660 --> 00:11:30,600
a bear or on your local Windows command

169
00:11:30,600 --> 00:11:37,800
line you you run mostly the the main

170
00:11:37,800 --> 00:11:43,339
tests on Windows - and get good coverage

171
00:11:43,399 --> 00:11:46,769
but new issue was merging of these

172
00:11:46,769 --> 00:11:50,370
results you get coverage from Travis and

173
00:11:50,370 --> 00:11:53,899
you get coverage from everywhere but

174
00:11:53,899 --> 00:11:57,509
there is not no easy way out I don't

175
00:11:57,509 --> 00:11:59,910
know for sure but last summer there was

176
00:11:59,910 --> 00:12:03,499
no way to how to match the these results

177
00:12:03,499 --> 00:12:07,230
on coveralls so we changed the service

178
00:12:07,230 --> 00:12:11,100
to cohhd cohhd cohhd cohhd is merging

179
00:12:11,100 --> 00:12:15,720
these results it has some visual models

180
00:12:15,720 --> 00:12:20,759
to represent their coverage so now if

181
00:12:20,759 --> 00:12:23,360
you send some pool requests Warhawks

182
00:12:23,360 --> 00:12:29,670
it's going to code code execution on

183
00:12:29,670 --> 00:12:32,180
Travis is on OSX

184
00:12:32,180 --> 00:12:37,769
unique so I think there are versions of

185
00:12:37,769 --> 00:12:42,779
whoa-ah and logit and on up where it's

186
00:12:42,779 --> 00:12:45,000
quite the same but some tests are

187
00:12:45,000 --> 00:12:52,110
skipped funeral issues like I mentioned

188
00:12:52,110 --> 00:12:55,889
before the the rest of tester can be

189
00:12:55,889 --> 00:12:59,459
executed in those platform we get into

190
00:12:59,459 --> 00:13:02,579
problem without bath on Windows you get

191
00:13:02,579 --> 00:13:07,559
it you don't see the consequence you you

192
00:13:07,559 --> 00:13:12,149
see the output random and on up where is

193
00:13:12,149 --> 00:13:16,949
the same we increase the coverage of

194
00:13:16,949 --> 00:13:21,089
Warhawk so before it was less than 80

195
00:13:21,089 --> 00:13:26,009
percent now it's 88 percent of coverage

196
00:13:26,009 --> 00:13:27,360
who

197
00:13:27,360 --> 00:13:36,119
I think this is everything and if you

198
00:13:36,119 --> 00:13:40,949
have any questions yes if you have any

199
00:13:40,949 --> 00:13:59,670
questions please ask and thank you we

200
00:13:59,670 --> 00:14:02,459
didn't a question was was what was the

201
00:14:02,459 --> 00:14:07,410
target coverage we we have we had goal

202
00:14:07,410 --> 00:14:10,410
to increase this coverage but that there

203
00:14:10,410 --> 00:14:14,759
wasn't some some point you know we need

204
00:14:14,759 --> 00:14:20,459
to get higher like 80 or something or we

205
00:14:20,459 --> 00:14:24,360
we spent a lot of time on that Windows

206
00:14:24,360 --> 00:14:28,170
platform so on the coverage I don't have

207
00:14:28,170 --> 00:14:30,239
so much time because we we really

208
00:14:30,239 --> 00:14:32,999
created the new test for wargs just at

209
00:14:32,999 --> 00:14:41,069
the end phase of development to the main

210
00:14:41,069 --> 00:14:43,829
functionality is covered by the blackbox

211
00:14:43,829 --> 00:14:59,699
test on in to environment next to be

212
00:14:59,699 --> 00:15:05,910
done so will increase coverage if you

213
00:15:05,910 --> 00:15:08,759
make some pull request usual to make

214
00:15:08,759 --> 00:15:11,699
some unit tests for it to increase

215
00:15:11,699 --> 00:15:15,600
coverage to have to have more stable who

216
00:15:15,600 --> 00:15:20,730
are rocks built who I don't know maybe

217
00:15:20,730 --> 00:15:25,709
fix some that Windows issues but I'm or

218
00:15:25,709 --> 00:15:29,179
UNIX oriented so I

219
00:15:31,060 --> 00:15:33,670
I just do the basic on bindles really

220
00:15:33,670 --> 00:15:43,590
it's it wasn't so easy yes of course the

221
00:15:43,590 --> 00:15:47,140
the destitute is easy is really you

222
00:15:47,140 --> 00:15:49,840
think so if you are who are Hawks

223
00:15:49,840 --> 00:15:56,640
developers someone please make it better

224
00:16:16,410 --> 00:16:21,690
this is just basic HTTP server a

225
00:16:21,690 --> 00:16:29,320
question or question was sorry what is

226
00:16:29,320 --> 00:16:32,350
the red server module oh this is just

227
00:16:32,350 --> 00:16:37,510
the basic HTTP server which which is

228
00:16:37,510 --> 00:16:42,970
some kind of mock or some some basic

229
00:16:42,970 --> 00:16:45,970
Rock server because of when you upload

230
00:16:45,970 --> 00:16:49,210
your modules to wargs you need get to

231
00:16:49,210 --> 00:16:53,170
some response you you can mock it easy

232
00:16:53,170 --> 00:16:55,960
wit busted on white box level but if you

233
00:16:55,960 --> 00:16:58,180
are going to make it like black box test

234
00:16:58,180 --> 00:17:01,860
you need to have some HTTP server

235
00:17:01,860 --> 00:17:09,160
running behind yes it's it's it's

236
00:17:09,160 --> 00:17:12,339
another dependency it's a before this

237
00:17:12,339 --> 00:17:15,040
test this is this is some special test

238
00:17:15,040 --> 00:17:17,939
before this test we built that server

239
00:17:17,939 --> 00:17:22,839
running in background and tests are

240
00:17:22,839 --> 00:17:27,160
executed then we stopped it and that's

241
00:17:27,160 --> 00:17:32,380
the short description how it works it's

242
00:17:32,380 --> 00:17:35,590
like you are sending something on who

243
00:17:35,590 --> 00:17:40,570
are Oaks API one with some status of

244
00:17:40,570 --> 00:17:45,450
your modules and upload of your new rock

245
00:17:52,539 --> 00:17:59,010
okay any questions thank you very much

246
00:17:59,010 --> 00:18:04,559
[Applause]

