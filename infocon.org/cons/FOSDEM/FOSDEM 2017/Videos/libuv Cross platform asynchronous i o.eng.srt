1
00:00:00,000 --> 00:00:02,630
hello everyone

2
00:00:04,730 --> 00:00:09,090
welcome Sol is giving the next talk

3
00:00:09,090 --> 00:00:11,570
about Li both live please welcome him

4
00:00:11,570 --> 00:00:20,460
thank you thanks so I'm Sol or saku

5
00:00:20,460 --> 00:00:22,320
everywhere else on the Internet

6
00:00:22,320 --> 00:00:24,390
and one of the League of ecore genders

7
00:00:24,390 --> 00:00:26,820
and can I get a quick show hands who

8
00:00:26,820 --> 00:00:31,650
knows about Livia me all right so you

9
00:00:31,650 --> 00:00:34,320
may learn something hopefully for those

10
00:00:34,320 --> 00:00:35,070
who don't

11
00:00:35,070 --> 00:00:37,410
it's a cross-platform asynchronous IO

12
00:00:37,410 --> 00:00:40,590
library with which does a little bit

13
00:00:40,590 --> 00:00:43,559
more so we try to do networking stuff

14
00:00:43,559 --> 00:00:46,680
but also other cross-platform stuff that

15
00:00:46,680 --> 00:00:50,040
we need it's relatively small that is 30

16
00:00:50,040 --> 00:00:52,550
thousand lines of code without tests

17
00:00:52,550 --> 00:00:55,200
which is not a lot for a C library that

18
00:00:55,200 --> 00:00:58,020
tries to do anything and everything we

19
00:00:58,020 --> 00:00:59,789
have an extensive test suite which so I

20
00:00:59,789 --> 00:01:01,680
waited and counted for this but we try

21
00:01:01,680 --> 00:01:05,039
to test everything and we have a vast CI

22
00:01:05,039 --> 00:01:07,020
infrastructure kind of donated by the

23
00:01:07,020 --> 00:01:11,429
nodejs project which makes it robust but

24
00:01:11,429 --> 00:01:13,709
of course I would say that right it's

25
00:01:13,709 --> 00:01:15,899
designed for C programs that means the

26
00:01:15,899 --> 00:01:18,179
joy of callback held in JavaScript I

27
00:01:18,179 --> 00:01:20,009
guess and it's used by many many

28
00:01:20,009 --> 00:01:22,470
projects these days if it started off as

29
00:01:22,470 --> 00:01:25,470
a way to bring Windows support to no js'

30
00:01:25,470 --> 00:01:28,709
like in a good way so Windows is a

31
00:01:28,709 --> 00:01:30,330
first-class citizen here in case you

32
00:01:30,330 --> 00:01:32,970
want to support UNIX and windows with a

33
00:01:32,970 --> 00:01:36,690
consistent API and we have a wiki link

34
00:01:36,690 --> 00:01:38,369
there with all the projects that use it

35
00:01:38,369 --> 00:01:40,619
if you want to use it from programming

36
00:01:40,619 --> 00:01:42,810
language X is very possible that

37
00:01:42,810 --> 00:01:44,729
somebody wrote bindings for it because

38
00:01:44,729 --> 00:01:46,800
there are many bindings out there

39
00:01:46,800 --> 00:01:48,709
I personally wrote the ones for Python

40
00:01:48,709 --> 00:01:51,450
and that's how I got starting into all

41
00:01:51,450 --> 00:01:54,989
these things so what is it we do it live

42
00:01:54,989 --> 00:01:57,840
UV it's an event loop so it's a single

43
00:01:57,840 --> 00:02:01,050
threaded event loop follows this model

44
00:02:01,050 --> 00:02:03,360
and everything that that surrounds this

45
00:02:03,360 --> 00:02:05,280
is life it's actually tied into this

46
00:02:05,280 --> 00:02:08,250
event so we can do timers signal

47
00:02:08,250 --> 00:02:10,258
handling so there is no problem with

48
00:02:10,258 --> 00:02:11,670
where the hell the signals get

49
00:02:11,670 --> 00:02:13,650
dispatched we go child process

50
00:02:13,650 --> 00:02:17,690
management TT is TCP UDP name pipes

51
00:02:17,690 --> 00:02:20,120
file system operations this is for

52
00:02:20,120 --> 00:02:21,650
example a thing that you don't typically

53
00:02:21,650 --> 00:02:23,810
find on a networking library but if you

54
00:02:23,810 --> 00:02:26,660
want to do a cross-platform application

55
00:02:26,660 --> 00:02:28,820
you will need to access your file system

56
00:02:28,820 --> 00:02:30,950
and Windows is a mess and nobody knows

57
00:02:30,950 --> 00:02:32,750
how it works so we take care of that for

58
00:02:32,750 --> 00:02:35,630
you and you just have to use it we have

59
00:02:35,630 --> 00:02:37,460
some trading utilities and the coolest

60
00:02:37,460 --> 00:02:41,480
logo in the open-source community as for

61
00:02:41,480 --> 00:02:43,670
if you approach leave UV I think that

62
00:02:43,670 --> 00:02:45,590
the best way to approach it is from the

63
00:02:45,590 --> 00:02:48,350
outside to the inside so in a nutshell

64
00:02:48,350 --> 00:02:51,380
we have three constructs the biggest is

65
00:02:51,380 --> 00:02:55,100
the loop so everything pretty much runs

66
00:02:55,100 --> 00:02:57,320
in the context of loops all operations

67
00:02:57,320 --> 00:03:00,380
are related to a loop and it's where all

68
00:03:00,380 --> 00:03:03,410
the magic happens if you will and then

69
00:03:03,410 --> 00:03:05,960
we have handles and requests so a handle

70
00:03:05,960 --> 00:03:08,840
represents a resource something that is

71
00:03:08,840 --> 00:03:11,000
there to do some job let's say a TCP

72
00:03:11,000 --> 00:03:13,100
connection so this is our representation

73
00:03:13,100 --> 00:03:16,280
of something it's a handle and a request

74
00:03:16,280 --> 00:03:18,380
represents an operation and has an

75
00:03:18,380 --> 00:03:20,480
starting and ending so for example

76
00:03:20,480 --> 00:03:23,720
writing on a TCP connection is a request

77
00:03:23,720 --> 00:03:30,200
we use a request for it and this way so

78
00:03:30,200 --> 00:03:33,110
when we do it this way we can know when

79
00:03:33,110 --> 00:03:34,670
an operation ends and if it finishes

80
00:03:34,670 --> 00:03:36,530
successfully or not so we have these

81
00:03:36,530 --> 00:03:38,780
these differentiation and requests

82
00:03:38,780 --> 00:03:41,630
always operate on some handle and then

83
00:03:41,630 --> 00:03:43,910
we also have an vast array of other

84
00:03:43,910 --> 00:03:46,070
utility functions for example a way to

85
00:03:46,070 --> 00:03:48,830
get high-resolution time which you can

86
00:03:48,830 --> 00:03:51,740
use for benchmarks and the like let's

87
00:03:51,740 --> 00:03:53,360
look a little bit at like a block

88
00:03:53,360 --> 00:03:56,600
diagram here so we do a bunch of stuff

89
00:03:56,600 --> 00:03:59,000
as I said so network i/o related things

90
00:03:59,000 --> 00:04:02,300
file system IR related stuff other stuff

91
00:04:02,300 --> 00:04:05,300
and then other always independent stuff

92
00:04:05,300 --> 00:04:07,040
because in some cases we have

93
00:04:07,040 --> 00:04:09,500
implemented it in such a way that is not

94
00:04:09,500 --> 00:04:12,650
tied to the operating system necessarily

95
00:04:12,650 --> 00:04:15,020
and then we can reuse it so for example

96
00:04:15,020 --> 00:04:17,120
when it comes to the networking io part

97
00:04:17,120 --> 00:04:20,988
we have TCP pipes and TTI's which we

98
00:04:20,988 --> 00:04:23,660
have struck them as streams so they have

99
00:04:23,660 --> 00:04:25,790
a certain API and they behave like

100
00:04:25,790 --> 00:04:28,070
strings so they get the read callbacks

101
00:04:28,070 --> 00:04:29,830
called you can write to them

102
00:04:29,830 --> 00:04:32,409
send file descriptors over them and so

103
00:04:32,409 --> 00:04:36,159
on UDP and pull handles are also dealing

104
00:04:36,159 --> 00:04:38,590
with Network IO or sockets but they are

105
00:04:38,590 --> 00:04:41,530
not strings and they are all backed by

106
00:04:41,530 --> 00:04:44,259
these internal kind of thingy which is

107
00:04:44,259 --> 00:04:47,680
what abstractors from IO polling in

108
00:04:47,680 --> 00:04:49,900
different operating systems on the UNIX

109
00:04:49,900 --> 00:04:52,330
side on Windows we don't have this

110
00:04:52,330 --> 00:04:54,520
because Windows works different but on

111
00:04:54,520 --> 00:04:57,099
UNIX we have this layer and then every

112
00:04:57,099 --> 00:04:59,379
different unique system sits on top of

113
00:04:59,379 --> 00:05:04,300
it and we can implement them easily for

114
00:05:04,300 --> 00:05:08,050
file IO or related utilities we have

115
00:05:08,050 --> 00:05:10,810
file system requests work requests which

116
00:05:10,810 --> 00:05:13,300
allow us to get a get a piece of work

117
00:05:13,300 --> 00:05:16,870
spawn it to a thread do the work there

118
00:05:16,870 --> 00:05:19,270
and then come back and we have name

119
00:05:19,270 --> 00:05:21,849
resolution functionality as well so get

120
00:05:21,849 --> 00:05:24,370
a DDR Infoblox but we run it on a thread

121
00:05:24,370 --> 00:05:28,030
and give the result back to you just a

122
00:05:28,030 --> 00:05:31,000
quick Morden threads we use threads just

123
00:05:31,000 --> 00:05:33,610
for file system IO not for Network IO

124
00:05:33,610 --> 00:05:36,159
the reason why we do it is very nicely

125
00:05:36,159 --> 00:05:38,020
summarized in this blog post by the

126
00:05:38,020 --> 00:05:40,539
BitTorrent guys there is no way to a

127
00:05:40,539 --> 00:05:43,120
synchronous file IO cross-platform in a

128
00:05:43,120 --> 00:05:43,840
reliable way

129
00:05:43,840 --> 00:05:46,599
our default thread pool size is four and

130
00:05:46,599 --> 00:05:49,419
let me say it one more time we don't use

131
00:05:49,419 --> 00:05:51,580
it for Network IO the Internet is

132
00:05:51,580 --> 00:05:53,919
usually wrong often times and I've seen

133
00:05:53,919 --> 00:05:55,810
many diagrams of people trying to

134
00:05:55,810 --> 00:05:57,819
explain what livia V is with incorrect

135
00:05:57,819 --> 00:06:00,849
diagrams looking at queues and thread

136
00:06:00,849 --> 00:06:02,379
pools and I don't know what the hell we

137
00:06:02,379 --> 00:06:04,419
don't do that we only use threads for

138
00:06:04,419 --> 00:06:07,960
file operations so it's single threaded

139
00:06:07,960 --> 00:06:10,000
there is a thread pool but that's for

140
00:06:10,000 --> 00:06:12,909
file operations and we get the results

141
00:06:12,909 --> 00:06:15,759
in the loop thread anyway so to the eyes

142
00:06:15,759 --> 00:06:16,750
of the user

143
00:06:16,750 --> 00:06:19,330
there is no thread pool we have other

144
00:06:19,330 --> 00:06:22,509
stuff that you can use as well so we got

145
00:06:22,509 --> 00:06:26,259
timers some other types of handles that

146
00:06:26,259 --> 00:06:28,029
operate in the loop at different points

147
00:06:28,029 --> 00:06:30,550
of the event loop execution and then

148
00:06:30,550 --> 00:06:32,259
well signals and processes that are

149
00:06:32,259 --> 00:06:34,479
operating system dependent for instance

150
00:06:34,479 --> 00:06:38,380
so how does our event loop run well so

151
00:06:38,380 --> 00:06:41,139
we start by by thinking do we have to do

152
00:06:41,139 --> 00:06:42,070
anything

153
00:06:42,070 --> 00:06:43,660
because if we don't then we're done and

154
00:06:43,660 --> 00:06:46,300
then we run the do timers so timers that

155
00:06:46,300 --> 00:06:48,040
are you right now because we schedule

156
00:06:48,040 --> 00:06:50,050
them in 20 milliseconds and they hit so

157
00:06:50,050 --> 00:06:51,970
it's time to run their callbacks and

158
00:06:51,970 --> 00:06:54,220
some pending callbacks we also ran them

159
00:06:54,220 --> 00:06:56,770
at the top that is for example callbacks

160
00:06:56,770 --> 00:06:58,900
that have happened as a result of a

161
00:06:58,900 --> 00:07:00,910
write operation we report the result

162
00:07:00,910 --> 00:07:04,210
there then we run other types of handles

163
00:07:04,210 --> 00:07:06,250
that are loop Watchers these things that

164
00:07:06,250 --> 00:07:08,680
run right before polling and right after

165
00:07:08,680 --> 00:07:11,410
polling when we paul for i/o all the

166
00:07:11,410 --> 00:07:14,530
read and write operations run and at the

167
00:07:14,530 --> 00:07:18,010
end we run close callbacks so when you

168
00:07:18,010 --> 00:07:19,210
close the handle when you want to

169
00:07:19,210 --> 00:07:20,980
dispose of it not use it anymore

170
00:07:20,980 --> 00:07:23,800
this operation is asynchronous so you

171
00:07:23,800 --> 00:07:25,930
call UV close and then when the callback

172
00:07:25,930 --> 00:07:28,330
hits you can free the memory this is

173
00:07:28,330 --> 00:07:31,210
because we need to do some work in the

174
00:07:31,210 --> 00:07:34,720
background sometimes now I mentioned

175
00:07:34,720 --> 00:07:36,730
that levy we came in because no one

176
00:07:36,730 --> 00:07:38,800
wanted to use it so let's have a quick

177
00:07:38,800 --> 00:07:41,410
look at how leave you be used with in

178
00:07:41,410 --> 00:07:44,890
node so the node event loop in a

179
00:07:44,890 --> 00:07:47,890
simplified way basically runs timers now

180
00:07:47,890 --> 00:07:50,230
the thing is no changes for performance

181
00:07:50,230 --> 00:07:53,140
reasons doesn't use one live UV timer

182
00:07:53,140 --> 00:07:55,510
equals one no the timer they coalesce

183
00:07:55,510 --> 00:07:57,400
them so they have like one live yuri

184
00:07:57,400 --> 00:07:59,530
timer backing potentially multiple node

185
00:07:59,530 --> 00:08:03,540
timers if they are scheduled at the same

186
00:08:03,540 --> 00:08:05,620
millisecond so they have different sort

187
00:08:05,620 --> 00:08:09,010
of buckets there then ran some pending

188
00:08:09,010 --> 00:08:12,610
callbacks the polling happens so all the

189
00:08:12,610 --> 00:08:16,170
data received callbacks are also fired

190
00:08:16,170 --> 00:08:18,910
and so on in connection callbacks as

191
00:08:18,910 --> 00:08:21,040
well and then there is two weird things

192
00:08:21,040 --> 00:08:23,620
happening the first one is set immediate

193
00:08:23,620 --> 00:08:27,070
so set immediate runs on a check handle

194
00:08:27,070 --> 00:08:30,220
which is after polling for i/o so it's

195
00:08:30,220 --> 00:08:31,930
called set immediate but it doesn't run

196
00:08:31,930 --> 00:08:36,220
immediately yeah and then there is a

197
00:08:36,220 --> 00:08:39,610
process dot next tick which you probably

198
00:08:39,610 --> 00:08:43,690
know which is supposed to run a function

199
00:08:43,690 --> 00:08:45,670
on the next tick but what the tick is

200
00:08:45,670 --> 00:08:48,340
nobody knows and in a nutshell it

201
00:08:48,340 --> 00:08:50,890
doesn't it actually runs those callbacks

202
00:08:50,890 --> 00:08:53,920
run every single time

203
00:08:53,920 --> 00:08:57,460
we call into JavaScript from the C++

204
00:08:57,460 --> 00:08:59,200
code there is a helper function called

205
00:08:59,200 --> 00:09:02,680
node make callback and it drains a

206
00:09:02,680 --> 00:09:04,780
little bit of the callback you from

207
00:09:04,780 --> 00:09:07,750
process dot next tick is a little bit

208
00:09:07,750 --> 00:09:11,050
counterintuitive and you should never

209
00:09:11,050 --> 00:09:13,630
program or architect your application

210
00:09:13,630 --> 00:09:15,550
with any of these in mind it should be

211
00:09:15,550 --> 00:09:17,170
transparent to this not like oh I'm

212
00:09:17,170 --> 00:09:18,850
gonna schedule this and then because the

213
00:09:18,850 --> 00:09:20,560
umbrella ms gonna do that I'm going to

214
00:09:20,560 --> 00:09:23,140
not don't do that because hopefully one

215
00:09:23,140 --> 00:09:25,570
day we will get this sorted out and then

216
00:09:25,570 --> 00:09:27,460
your application will break so we're not

217
00:09:27,460 --> 00:09:31,390
a good thing to do so if we look at it

218
00:09:31,390 --> 00:09:33,820
from notes perspective we follow an

219
00:09:33,820 --> 00:09:36,370
onion architecture so we got your net

220
00:09:36,370 --> 00:09:39,100
sockets wrapping a TCP wrap in C++

221
00:09:39,100 --> 00:09:42,280
wrapping a UV handle in C wrapping file

222
00:09:42,280 --> 00:09:45,160
descriptor on UNIX or a handle on

223
00:09:45,160 --> 00:09:48,220
Windows and the idea being that you can

224
00:09:48,220 --> 00:09:50,470
happily live at any of these layers as

225
00:09:50,470 --> 00:09:52,600
long as it's above this one the

226
00:09:52,600 --> 00:09:55,930
abstraction levels should be high level

227
00:09:55,930 --> 00:09:58,000
enough so that you don't have any

228
00:09:58,000 --> 00:09:59,830
problem there or you don't need to take

229
00:09:59,830 --> 00:10:01,750
into account that solaris that's i don't

230
00:10:01,750 --> 00:10:04,330
know what and that mac OS behaves as

231
00:10:04,330 --> 00:10:08,760
some other way of course a good way to

232
00:10:08,760 --> 00:10:11,280
learn all this is to write your chat

233
00:10:11,280 --> 00:10:14,200
application of course why not so I wrote

234
00:10:14,200 --> 00:10:17,800
down I wrote one it's a nice repository

235
00:10:17,800 --> 00:10:20,260
I wrote it to show different usage

236
00:10:20,260 --> 00:10:23,740
patterns in using live UV so it's a TCP

237
00:10:23,740 --> 00:10:25,540
server you it accepts multiple

238
00:10:25,540 --> 00:10:28,450
connections to each user that joins the

239
00:10:28,450 --> 00:10:31,770
room gets a Pokemon name assigned and

240
00:10:31,770 --> 00:10:34,900
the idea is that you can see how the

241
00:10:34,900 --> 00:10:36,940
different moving parts work together and

242
00:10:36,940 --> 00:10:39,010
different patterns on how to Bill for

243
00:10:39,010 --> 00:10:42,550
example with memory allocations because

244
00:10:42,550 --> 00:10:44,589
we got a little time I'm not planning on

245
00:10:44,589 --> 00:10:46,930
showing it to you here so the idea is

246
00:10:46,930 --> 00:10:50,680
you go and look at yourself and let us

247
00:10:50,680 --> 00:10:53,500
know if you run into any issues or

248
00:10:53,500 --> 00:10:56,740
whatever only yesterday I learned about

249
00:10:56,740 --> 00:10:58,839
two other applications using live you

250
00:10:58,839 --> 00:11:00,580
read while I was in a different Devon so

251
00:11:00,580 --> 00:11:01,750
what do you know if you're already using

252
00:11:01,750 --> 00:11:04,220
it please do come talk to me

253
00:11:04,220 --> 00:11:06,920
and let me know I mean sometimes some

254
00:11:06,920 --> 00:11:08,600
problems may happen in your van loop so

255
00:11:08,600 --> 00:11:10,100
I want to give a shout out to everyone

256
00:11:10,100 --> 00:11:13,280
in the in the core contributors team

257
00:11:13,280 --> 00:11:16,370
it's seven of us at the moment five of

258
00:11:16,370 --> 00:11:21,100
us are active and we work on it the

259
00:11:21,100 --> 00:11:24,110
release currencies when we feel like

260
00:11:24,110 --> 00:11:25,700
it's a good moment to do a release and

261
00:11:25,700 --> 00:11:28,130
sometimes when nodejs us just hey can

262
00:11:28,130 --> 00:11:30,080
you please do a release because we want

263
00:11:30,080 --> 00:11:33,320
these features in it's basically do you

264
00:11:33,320 --> 00:11:34,820
want something done driven development

265
00:11:34,820 --> 00:11:37,430
so if you want something don't you do it

266
00:11:37,430 --> 00:11:40,190
and otherwise well things would stay but

267
00:11:40,190 --> 00:11:42,560
we're actively working on it and hoping

268
00:11:42,560 --> 00:11:45,500
that maybe this year we can get 2.0

269
00:11:45,500 --> 00:11:49,160
release with clearing up some craft like

270
00:11:49,160 --> 00:11:51,980
Windows XP support which was like 2,000

271
00:11:51,980 --> 00:11:53,900
lines or something that was very nice to

272
00:11:53,900 --> 00:11:57,730
delete and if you wanna reach out our

273
00:11:57,730 --> 00:12:00,920
website is just a quick way to arrive at

274
00:12:00,920 --> 00:12:04,010
the others so our API documentation says

275
00:12:04,010 --> 00:12:06,530
dogs WB org there's an IRC channel

276
00:12:06,530 --> 00:12:11,390
literally also google group and also we

277
00:12:11,390 --> 00:12:14,270
are in Stack Overflow and I believe if I

278
00:12:14,270 --> 00:12:16,580
have time for maybe one or two questions

279
00:12:16,580 --> 00:12:24,470
if there should be any I have a question

280
00:12:24,470 --> 00:12:28,490
about comparative boost SEO because its

281
00:12:28,490 --> 00:12:31,490
use similar model what is difference

282
00:12:31,490 --> 00:12:34,700
from boost library right well so live UV

283
00:12:34,700 --> 00:12:36,980
is very small very self-contained it

284
00:12:36,980 --> 00:12:40,910
doesn't depend on any so boost my I

285
00:12:40,910 --> 00:12:42,710
haven't used boost myself other than in

286
00:12:42,710 --> 00:12:45,890
other projects so my perception of it is

287
00:12:45,890 --> 00:12:48,170
that is a big library with different

288
00:12:48,170 --> 00:12:50,990
components live UV was initially from

289
00:12:50,990 --> 00:12:52,580
the beginning it was designed to be a

290
00:12:52,580 --> 00:12:54,380
small thing that you could use in any

291
00:12:54,380 --> 00:12:56,810
project I mean would abstract you as

292
00:12:56,810 --> 00:12:59,150
much as it can but it's not the kitchen

293
00:12:59,150 --> 00:13:01,250
sink solution we're actually thinking

294
00:13:01,250 --> 00:13:04,310
about creating a work we're going to

295
00:13:04,310 --> 00:13:05,839
create a new project called leave you be

296
00:13:05,839 --> 00:13:07,580
extras where we're going to add some

297
00:13:07,580 --> 00:13:09,589
more stuff that doesn't belong in core

298
00:13:09,589 --> 00:13:12,020
but can be useful for some people this

299
00:13:12,020 --> 00:13:14,310
one is also written in C

300
00:13:14,310 --> 00:13:17,130
so there's also a bad difference but in

301
00:13:17,130 --> 00:13:19,230
a way they solve the same problem so you

302
00:13:19,230 --> 00:13:21,080
want to do some cross-platform

303
00:13:21,080 --> 00:13:25,740
networking operations and and also sis

304
00:13:25,740 --> 00:13:28,410
file system utilities and different all

305
00:13:28,410 --> 00:13:30,810
abstracting all this is our job as well

306
00:13:30,810 --> 00:13:34,380
so I would of course say LaBrie is

307
00:13:34,380 --> 00:13:38,750
easier to use but that's what I know and

308
00:13:38,750 --> 00:13:40,980
yeah so that's pretty much the answer

309
00:13:40,980 --> 00:13:42,630
they solved the same problem but they

310
00:13:42,630 --> 00:13:56,430
are different yes would you recommend

311
00:13:56,430 --> 00:13:58,890
libuv for a very multi-threaded

312
00:13:58,890 --> 00:14:03,779
application well so as I said the event

313
00:14:03,779 --> 00:14:07,020
loop is single threaded but the event

314
00:14:07,020 --> 00:14:08,880
loop is the context so you can

315
00:14:08,880 --> 00:14:10,950
essentially run multiple threads with

316
00:14:10,950 --> 00:14:13,140
multiple loops on each of them as long

317
00:14:13,140 --> 00:14:14,580
as you don't do cross calling because

318
00:14:14,580 --> 00:14:18,150
our API is not thread safe that's fine

319
00:14:18,150 --> 00:14:21,540
so many projects do this so for example

320
00:14:21,540 --> 00:14:23,400
if you want to do a similar model to

321
00:14:23,400 --> 00:14:25,850
what nginx does for example so multiple

322
00:14:25,850 --> 00:14:28,470
multiple processes and then some event

323
00:14:28,470 --> 00:14:30,000
loops as well you could do multiple

324
00:14:30,000 --> 00:14:31,950
develops on multiple threads and that's

325
00:14:31,950 --> 00:14:39,300
perfectly fine so I think that's all

326
00:14:39,300 --> 00:14:43,650
very quickly very look wants to know it

327
00:14:43,650 --> 00:14:45,030
they don't wind the clock to blow up

328
00:14:45,030 --> 00:14:49,170
right since we all like schwag here I'm

329
00:14:49,170 --> 00:14:51,150
gonna drop some things on the table

330
00:14:51,150 --> 00:14:53,640
right outside fYI after a leaf

331
00:14:53,640 --> 00:14:55,650
in case you're interested hello just I

332
00:14:55,650 --> 00:14:58,500
would like to ask for lip Yui xx whether

333
00:14:58,500 --> 00:15:03,150
it's official xx there's a cheap as

334
00:15:03,150 --> 00:15:06,660
possible per oh so no basically Livio B

335
00:15:06,660 --> 00:15:08,100
is written in C and that's their one and

336
00:15:08,100 --> 00:15:10,459
only official anything there is to do

337
00:15:10,459 --> 00:15:13,410
however all the projects there that wrap

338
00:15:13,410 --> 00:15:16,170
it or not wrap it some of them like

339
00:15:16,170 --> 00:15:18,839
we're close cousins let's say so for

340
00:15:18,839 --> 00:15:21,810
example Aiko maintained library and I

341
00:15:21,810 --> 00:15:24,390
also write the python binding but it's

342
00:15:24,390 --> 00:15:25,950
not official let's say we don't bless

343
00:15:25,950 --> 00:15:27,029
anybody

344
00:15:27,029 --> 00:15:30,250
he goes that's all guys touch thanks a

345
00:15:30,250 --> 00:15:31,460
lot so for the top

346
00:15:31,460 --> 00:15:37,210
[Applause]

