1
00:00:00,060 --> 00:00:02,750
so

2
00:00:06,100 --> 00:00:08,830
today I would like to present law of it

3
00:00:08,830 --> 00:00:11,440
C which is a bandage for a C++ web

4
00:00:11,440 --> 00:00:14,850
toolkit library and let's track with a

5
00:00:14,850 --> 00:00:19,660
talk starts itself so there are three

6
00:00:19,660 --> 00:00:22,840
main parts at first patch I would like

7
00:00:22,840 --> 00:00:26,020
to talk about we see itself so about its

8
00:00:26,020 --> 00:00:29,770
key features and what's new in VC for

9
00:00:29,770 --> 00:00:31,240
web development Aloha

10
00:00:31,240 --> 00:00:35,260
so it's like a maturation patch why do

11
00:00:35,260 --> 00:00:38,230
we actually need to bind it to Lua and

12
00:00:38,230 --> 00:00:40,929
the next section I'll talk a bit about a

13
00:00:40,929 --> 00:00:43,960
lo of it see its current state we'll go

14
00:00:43,960 --> 00:00:47,339
through some examples and maybe some

15
00:00:47,339 --> 00:00:50,229
implementation details and finally I

16
00:00:50,229 --> 00:00:52,359
would like to talk about the future so

17
00:00:52,359 --> 00:00:55,149
about the first development and maybe

18
00:00:55,149 --> 00:00:57,839
some instructions how to contribute and

19
00:00:57,839 --> 00:00:59,850
what are the main goals

20
00:00:59,850 --> 00:01:05,650
so now let's jump to the first pad it's

21
00:01:05,650 --> 00:01:10,180
about with C C++ reaction kit library so

22
00:01:10,180 --> 00:01:15,430
it's C+ C++ framework for developing web

23
00:01:15,430 --> 00:01:19,390
applications and site and its provides a

24
00:01:19,390 --> 00:01:21,369
visual centric application programming

25
00:01:21,369 --> 00:01:25,450
interface so think of it as an

26
00:01:25,450 --> 00:01:28,869
abstraction visual element of user

27
00:01:28,869 --> 00:01:31,780
interface which actually helps us to

28
00:01:31,780 --> 00:01:35,109
abstract from technology such as HTML or

29
00:01:35,109 --> 00:01:41,590
CSS also we see reports it's a little

30
00:01:41,590 --> 00:01:43,899
similar to QT in some cases well-known

31
00:01:43,899 --> 00:01:46,240
and widely used library I think for

32
00:01:46,240 --> 00:01:48,630
graphical user interface development and

33
00:01:48,630 --> 00:01:51,280
for example it provides a similar

34
00:01:51,280 --> 00:01:54,249
approach to even handling and in other

35
00:01:54,249 --> 00:01:56,619
things and actually the code in which he

36
00:01:56,619 --> 00:01:59,590
looks similar to their coach as a zip

37
00:01:59,590 --> 00:02:01,329
code of graphical user interface

38
00:02:01,329 --> 00:02:03,909
application not a technical or web

39
00:02:03,909 --> 00:02:09,490
application so also it provides a really

40
00:02:09,490 --> 00:02:13,060
high performance so it's good for energy

41
00:02:13,060 --> 00:02:15,310
saving or estate space-saving systems

42
00:02:15,310 --> 00:02:17,550
and

43
00:02:17,950 --> 00:02:19,810
for sure its sharpest all the major

44
00:02:19,810 --> 00:02:23,320
browsers like Firefox Chrome and others

45
00:02:23,320 --> 00:02:25,900
but at the same time playing HTML

46
00:02:25,900 --> 00:02:28,480
browsers and which is important web

47
00:02:28,480 --> 00:02:32,410
crawlers because it provides equal

48
00:02:32,410 --> 00:02:35,530
behavior with support of JavaScript and

49
00:02:35,530 --> 00:02:37,660
without support of JavaScript it

50
00:02:37,660 --> 00:02:41,080
provides equal plain HTML version which

51
00:02:41,080 --> 00:02:43,150
is useful for internet bots and web

52
00:02:43,150 --> 00:02:46,690
crawlers okay so and there is just a

53
00:02:46,690 --> 00:02:48,640
demonstration is from the list of

54
00:02:48,640 --> 00:02:52,180
official wiki examples it's a well-known

55
00:02:52,180 --> 00:02:56,380
game I think and it demonstrates the

56
00:02:56,380 --> 00:02:59,400
power of a widget usage and of

57
00:02:59,400 --> 00:03:04,989
input/output in wiki so now let's move

58
00:03:04,989 --> 00:03:06,730
to the next part

59
00:03:06,730 --> 00:03:11,670
it's about current state of law of EC

60
00:03:11,670 --> 00:03:16,360
well outside the first the current state

61
00:03:16,360 --> 00:03:19,440
is their first release so it's not

62
00:03:19,440 --> 00:03:22,630
outside ready for a limited practical

63
00:03:22,630 --> 00:03:27,870
usage so regarding two numbers right

64
00:03:27,870 --> 00:03:32,130
about 70 widgets are ready for usage and

65
00:03:32,130 --> 00:03:37,060
near to thousands methods are bound to

66
00:03:37,060 --> 00:03:40,810
Lua and about which he versions because

67
00:03:40,810 --> 00:03:43,720
we chief usher has a very good progress

68
00:03:43,720 --> 00:03:45,610
and development so there are some

69
00:03:45,610 --> 00:03:47,350
changes so there is an issue of

70
00:03:47,350 --> 00:03:49,870
compatibility with a writer inch of Vita

71
00:03:49,870 --> 00:03:53,080
versions and for this I would say it's

72
00:03:53,080 --> 00:03:55,209
rapid reactions from three three zero

73
00:03:55,209 --> 00:03:59,019
and greater and later I'll tell how it's

74
00:03:59,019 --> 00:04:04,000
implemented okay so now let's talk a bit

75
00:04:04,000 --> 00:04:06,880
about the installation nothing special

76
00:04:06,880 --> 00:04:09,970
there just two main ways there is a

77
00:04:09,970 --> 00:04:12,370
installation using lower docks so just

78
00:04:12,370 --> 00:04:15,010
rotox installed or VG or there is a

79
00:04:15,010 --> 00:04:18,310
manual installation which which can be

80
00:04:18,310 --> 00:04:20,168
done used by clone in the report from

81
00:04:20,168 --> 00:04:22,540
the github and then just build it using

82
00:04:22,540 --> 00:04:27,280
logs make so for sure it depends on VC

83
00:04:27,280 --> 00:04:29,320
so you need to install the tea jar

84
00:04:29,320 --> 00:04:31,630
instruction in their official our web

85
00:04:31,630 --> 00:04:34,660
get site which is a virtual WebSocket

86
00:04:34,660 --> 00:04:38,890
dot yo the link will be later and for

87
00:04:38,890 --> 00:04:41,410
sure it depends the lure with version 5

88
00:04:41,410 --> 00:04:44,940
1 and greater ok

89
00:04:44,940 --> 00:04:50,560
so now a bit about the usage there is a

90
00:04:50,560 --> 00:04:55,750
simple example of usage we just there is

91
00:04:55,750 --> 00:04:59,350
a logical quote their logical culture of

92
00:04:59,350 --> 00:05:01,450
a web application which is called ins

93
00:05:01,450 --> 00:05:03,430
your construction of your application

94
00:05:03,430 --> 00:05:06,250
and we pass it through a sera in the

95
00:05:06,250 --> 00:05:10,870
form of string so it's not so important

96
00:05:10,870 --> 00:05:13,720
patch but you could see some interesting

97
00:05:13,720 --> 00:05:17,110
stuff inside the logical code which is

98
00:05:17,110 --> 00:05:19,660
in the form of string for example we

99
00:05:19,660 --> 00:05:22,420
create a widget there and we set up a

100
00:05:22,420 --> 00:05:27,010
signal handler and let's look at these

101
00:05:27,010 --> 00:05:28,620
parts in more details

102
00:05:28,620 --> 00:05:33,790
so widgets widgets which has visual

103
00:05:33,790 --> 00:05:37,830
visual and elements of user interface

104
00:05:37,830 --> 00:05:41,770
provides abstraction of HTML and CSS so

105
00:05:41,770 --> 00:05:43,660
it's really simple example we just

106
00:05:43,660 --> 00:05:47,950
create lower objects and each widget is

107
00:05:47,950 --> 00:05:49,900
represented to the lowest or meta table

108
00:05:49,900 --> 00:05:55,840
so nothing special there and about even

109
00:05:55,840 --> 00:06:00,670
handle it provides a classical signal

110
00:06:00,670 --> 00:06:05,470
slot mechanism so we could just in this

111
00:06:05,470 --> 00:06:08,320
example we have a signal called clicked

112
00:06:08,320 --> 00:06:11,530
and we could simply connect it to a slot

113
00:06:11,530 --> 00:06:13,420
function which is a lambda function our

114
00:06:13,420 --> 00:06:16,630
case so we adjust passages and arguments

115
00:06:16,630 --> 00:06:18,610
and or we make sure that it will be

116
00:06:18,610 --> 00:06:22,080
called every time the signal is emitted

117
00:06:22,080 --> 00:06:26,909
so the usage is very simple and flexible

118
00:06:27,570 --> 00:06:30,610
for sure there are some style issues

119
00:06:30,610 --> 00:06:34,420
because the widget gallery is a huge but

120
00:06:34,420 --> 00:06:36,720
there are always some specific

121
00:06:36,720 --> 00:06:38,920
situations when you need to use

122
00:06:38,920 --> 00:06:42,160
something more like at CSS and HTML for

123
00:06:42,160 --> 00:06:45,280
development so it provides

124
00:06:45,280 --> 00:06:48,330
really a simple interface so we can just

125
00:06:48,330 --> 00:06:53,230
set up a CSS or file and then just use a

126
00:06:53,230 --> 00:07:00,450
style classes from there like this okay

127
00:07:00,610 --> 00:07:03,130
there is a huge example it's not so

128
00:07:03,130 --> 00:07:06,190
important to look it carefully so it

129
00:07:06,190 --> 00:07:08,680
just uses concepts are already told

130
00:07:08,680 --> 00:07:12,580
about so we create widgets we set up a

131
00:07:12,580 --> 00:07:17,290
lower signal handler actually it's a web

132
00:07:17,290 --> 00:07:20,620
interface for a lower check and it's

133
00:07:20,620 --> 00:07:23,740
really simple so it looks like this okay

134
00:07:23,740 --> 00:07:27,150
and also there are some more examples

135
00:07:27,150 --> 00:07:32,140
which is not so important okay and there

136
00:07:32,140 --> 00:07:34,720
is an issue about testing because for

137
00:07:34,720 --> 00:07:37,230
sure for a good testing you need to

138
00:07:37,230 --> 00:07:41,680
support browser or a browser simulation

139
00:07:41,680 --> 00:07:47,380
and low VT itself provides a module

140
00:07:47,380 --> 00:07:50,410
called law called V test environment

141
00:07:50,410 --> 00:07:53,290
which is used to create an application

142
00:07:53,290 --> 00:07:55,480
without actually a browser or browser

143
00:07:55,480 --> 00:07:58,930
simulation so we could do it simply like

144
00:07:58,930 --> 00:08:01,720
this we create an application and then

145
00:08:01,720 --> 00:08:04,120
we just use it as a normal application

146
00:08:04,120 --> 00:08:11,560
so it's very useful for testing okay and

147
00:08:11,560 --> 00:08:15,400
the bit about implementation so we used

148
00:08:15,400 --> 00:08:18,820
plain HD player lossy application

149
00:08:18,820 --> 00:08:21,070
programming interface a nothing special

150
00:08:21,070 --> 00:08:25,300
like the bind or swig just plain lossy

151
00:08:25,300 --> 00:08:32,289
appeal and we have a number of solution

152
00:08:32,289 --> 00:08:36,700
actually which used to simplify internal

153
00:08:36,700 --> 00:08:41,349
development of nor VG actually we have a

154
00:08:41,349 --> 00:08:45,660
script called automated bindings dot pi

155
00:08:45,660 --> 00:08:48,790
don't be scared out this contraction

156
00:08:48,790 --> 00:08:51,040
it's has nothing in common with a be

157
00:08:51,040 --> 00:08:53,860
tests it just from automated binding dot

158
00:08:53,860 --> 00:08:54,150
pry

159
00:08:54,150 --> 00:08:58,089
actually it's Python scripts which has a

160
00:08:58,089 --> 00:08:59,080
lot of

161
00:08:59,080 --> 00:09:02,440
functions it uses a technology called

162
00:09:02,440 --> 00:09:05,680
GCC XML which is where a parser for a

163
00:09:05,680 --> 00:09:10,270
C++ code so it takes input which you had

164
00:09:10,270 --> 00:09:13,060
us in our case and it producer bindings

165
00:09:13,060 --> 00:09:15,580
for them so it's just a specific code

166
00:09:15,580 --> 00:09:17,860
generator which is used actually to

167
00:09:17,860 --> 00:09:22,990
generate most of the code and we have an

168
00:09:22,990 --> 00:09:27,460
acetal which is again Doc's dot law it

169
00:09:27,460 --> 00:09:30,280
we use it to generate documentation and

170
00:09:30,280 --> 00:09:33,070
well it's it's not actually at the

171
00:09:33,070 --> 00:09:36,100
documentation because now it's just a

172
00:09:36,100 --> 00:09:40,530
list of which the class is bound to Lua

173
00:09:40,530 --> 00:09:43,450
enter and methods and also it provides a

174
00:09:43,450 --> 00:09:45,130
link store original which he

175
00:09:45,130 --> 00:09:48,490
documentation but it's not a good it's

176
00:09:48,490 --> 00:09:53,610
not really a good documentation so and

177
00:09:53,610 --> 00:09:56,980
yeah compatibility is different with new

178
00:09:56,980 --> 00:10:00,930
versions a serologist set it provides

179
00:10:00,930 --> 00:10:03,520
compatibility with version of three

180
00:10:03,520 --> 00:10:06,600
three zero and greater and we just

181
00:10:06,600 --> 00:10:09,910
generate a list of members for the

182
00:10:09,910 --> 00:10:12,760
illustration which is in our case three

183
00:10:12,760 --> 00:10:15,520
three zero and for the latest which is a

184
00:10:15,520 --> 00:10:18,100
three through six and then we generate a

185
00:10:18,100 --> 00:10:20,380
blacklist from this store list of

186
00:10:20,380 --> 00:10:24,250
methods and then we pass it to our

187
00:10:24,250 --> 00:10:26,770
script in order to just do not bind

188
00:10:26,770 --> 00:10:30,220
methods which changed since last six

189
00:10:30,220 --> 00:10:37,000
versions and for sure now let's talk a

190
00:10:37,000 --> 00:10:39,690
bit about their first development so

191
00:10:39,690 --> 00:10:45,100
there are some issues for sure first we

192
00:10:45,100 --> 00:10:48,100
need a good test because actually now

193
00:10:48,100 --> 00:10:52,480
the test coverage is very low it's like

194
00:10:52,480 --> 00:10:56,520
such percent according to coveralls but

195
00:10:56,520 --> 00:10:59,740
it has some glitches but actually it's

196
00:10:59,740 --> 00:11:03,130
really very low so we need to provide a

197
00:11:03,130 --> 00:11:05,560
good test and in this case the problem

198
00:11:05,560 --> 00:11:08,110
is that which itself doesn't have a

199
00:11:08,110 --> 00:11:12,160
straw percent coverage test 100% our

200
00:11:12,160 --> 00:11:13,930
characters because

201
00:11:13,930 --> 00:11:17,240
and so we have no base to generate equal

202
00:11:17,240 --> 00:11:20,300
Lua test for the given C++ test so we

203
00:11:20,300 --> 00:11:22,730
have to write it manually and that's a

204
00:11:22,730 --> 00:11:25,340
problem because other code is generated

205
00:11:25,340 --> 00:11:30,680
so it's a huge piece of rock and as I

206
00:11:30,680 --> 00:11:32,210
already mentioned it's an issue of

207
00:11:32,210 --> 00:11:35,270
documentation because now just a list of

208
00:11:35,270 --> 00:11:39,830
classes bound to Lua and also for sure

209
00:11:39,830 --> 00:11:43,820
we need to bind or more widgets because

210
00:11:43,820 --> 00:11:46,100
now it's it not it doesn't provide all

211
00:11:46,100 --> 00:11:49,100
the functionality of VT it's only a

212
00:11:49,100 --> 00:11:53,690
partial and for sure ah stress and

213
00:11:53,690 --> 00:11:56,480
glitches and bugs there I listed in the

214
00:11:56,480 --> 00:12:02,450
issues in this link and for example and

215
00:12:02,450 --> 00:12:04,100
we have a lot of things to do which are

216
00:12:04,100 --> 00:12:07,610
really easy to implement for example in

217
00:12:07,610 --> 00:12:11,330
rooms see gnomes just treated as numbers

218
00:12:11,330 --> 00:12:14,780
in law which could be simply fixed by

219
00:12:14,780 --> 00:12:17,900
using lower l check option function so

220
00:12:17,900 --> 00:12:23,030
and so we could think about a gesture of

221
00:12:23,030 --> 00:12:30,730
string in law not just number okay

222
00:12:31,450 --> 00:12:34,940
finally there are links to the main

223
00:12:34,940 --> 00:12:38,300
repository on github and to my github

224
00:12:38,300 --> 00:12:42,890
profile and I think I'm not hanging out

225
00:12:42,890 --> 00:12:45,650
of time so does anybody have any

226
00:12:45,650 --> 00:12:52,150
questions yeah

227
00:13:00,410 --> 00:13:06,249
well I chose a patron because there is

228
00:13:06,249 --> 00:13:10,189
there is a very great sink called by GCC

229
00:13:10,189 --> 00:13:13,129
XML which is a special Python pasture

230
00:13:13,129 --> 00:13:17,779
which is used which I used to pass C++

231
00:13:17,779 --> 00:13:20,360
code so because there is a flexible and

232
00:13:20,360 --> 00:13:24,350
good solution in Python actually I'm not

233
00:13:24,350 --> 00:13:26,929
sure it was the best choice but yeah it

234
00:13:26,929 --> 00:13:37,119
works and so that's it okay thank you

235
00:13:37,470 --> 00:13:43,489
[Applause]

