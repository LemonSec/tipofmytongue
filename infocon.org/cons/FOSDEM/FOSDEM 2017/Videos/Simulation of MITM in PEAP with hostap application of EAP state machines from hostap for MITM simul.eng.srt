1
00:00:00,110 --> 00:00:03,110
presentation

2
00:00:04,620 --> 00:00:06,840
that's a bit personal for me because for

3
00:00:06,840 --> 00:00:09,450
15 years ago I actually worked on

4
00:00:09,450 --> 00:00:11,730
standardizing this people protocol so

5
00:00:11,730 --> 00:00:14,430
I'm very happy to see that it's it has

6
00:00:14,430 --> 00:00:16,320
been completely broken and this will be

7
00:00:16,320 --> 00:00:20,820
a nice nice demonstration of how so

8
00:00:20,820 --> 00:00:23,869
welcome Sarge eh

9
00:00:28,789 --> 00:00:32,009
hello my name is Jorge I'm from Dallas

10
00:00:32,009 --> 00:00:34,200
I'm computer science student the 4th

11
00:00:34,200 --> 00:00:37,020
year student today I'd like to present

12
00:00:37,020 --> 00:00:41,280
you in a major work just as an

13
00:00:41,280 --> 00:00:43,620
open-source hacker I've been interested

14
00:00:43,620 --> 00:00:51,350
in wireless security and in this paper I

15
00:00:51,350 --> 00:00:54,420
was studying the way how man in the

16
00:00:54,420 --> 00:00:58,050
middle attack it can be implemented in

17
00:00:58,050 --> 00:01:02,730
this the top of WPA enterprise standard

18
00:01:02,730 --> 00:01:05,820
when we use people with MS chap with to

19
00:01:05,820 --> 00:01:12,090
protocol the initial goal was like I

20
00:01:12,090 --> 00:01:14,579
have this color that I'm using and

21
00:01:14,579 --> 00:01:18,329
secure not secure setup of wireless

22
00:01:18,329 --> 00:01:20,869
communication because at my university

23
00:01:20,869 --> 00:01:26,729
they they stimulate you to skip

24
00:01:26,729 --> 00:01:29,549
certificate verification just to enter

25
00:01:29,549 --> 00:01:33,869
your user and password and that's it so

26
00:01:33,869 --> 00:01:40,740
it's not secure because the history

27
00:01:40,740 --> 00:01:41,429
behind

28
00:01:41,429 --> 00:01:46,889
peep-peep it is a protected extensible

29
00:01:46,889 --> 00:01:50,069
authentication protocol it is based on

30
00:01:50,069 --> 00:01:54,179
EEP framework it is a general conception

31
00:01:54,179 --> 00:01:58,170
of various authentication protocols they

32
00:01:58,170 --> 00:02:00,779
are they all operate in the way of if

33
00:02:00,779 --> 00:02:03,240
state machines just like graph with

34
00:02:03,240 --> 00:02:05,850
vertices and edges and each time the

35
00:02:05,850 --> 00:02:11,550
machine stays in some state and getting

36
00:02:11,550 --> 00:02:14,480
a new message it processes it and then

37
00:02:14,480 --> 00:02:18,030
goes into another state taking some

38
00:02:18,030 --> 00:02:20,110
action

39
00:02:20,110 --> 00:02:23,650
if we will look at peep state machines

40
00:02:23,650 --> 00:02:32,280
the RFC is 4137 in the draft they

41
00:02:32,280 --> 00:02:40,030
proposed a conceptual implementation of

42
00:02:40,030 --> 00:02:42,670
state machine for client and the server

43
00:02:42,670 --> 00:02:46,450
and there is a whole step project you

44
00:02:46,450 --> 00:02:49,570
usually should be familiar with WPA

45
00:02:49,570 --> 00:02:52,930
supplicant and host app D applications

46
00:02:52,930 --> 00:02:57,280
one of them is used for client-side and

47
00:02:57,280 --> 00:03:00,250
the other one can work as a server-side

48
00:03:00,250 --> 00:03:04,590
application both of them share the same

49
00:03:04,590 --> 00:03:12,040
core but they differ in the way who uses

50
00:03:12,040 --> 00:03:19,560
them why did I choose host app because

51
00:03:19,560 --> 00:03:24,220
they had an example it is called if

52
00:03:24,220 --> 00:03:28,890
example and in there they configured

53
00:03:28,890 --> 00:03:33,510
daemons a demo communication between the

54
00:03:33,510 --> 00:03:37,900
peer and server-side state machines

55
00:03:37,900 --> 00:03:41,950
without any hardware so we can just play

56
00:03:41,950 --> 00:03:45,540
around with it without having setting up

57
00:03:45,540 --> 00:03:49,270
rogue access point putting additional

58
00:03:49,270 --> 00:03:52,470
man-in-the-middle node

59
00:03:52,650 --> 00:03:55,830
[Applause]

60
00:03:58,599 --> 00:04:05,360
so that example it has the exact stop

61
00:04:05,360 --> 00:04:11,290
peep with mschap v2 without radios just

62
00:04:11,290 --> 00:04:15,980
credentials were built in and I wanted

63
00:04:15,980 --> 00:04:19,220
to simulate man-in-the-middle attack as

64
00:04:19,220 --> 00:04:27,889
it was written in the paper man and the

65
00:04:27,889 --> 00:04:34,990
middle man in the middle attack in sorry

66
00:04:34,990 --> 00:04:38,060
the name of the paper is mine at the

67
00:04:38,060 --> 00:04:40,160
middle in tunnelled authentication

68
00:04:40,160 --> 00:04:45,199
protocols it is dated to 2002 it has

69
00:04:45,199 --> 00:04:49,840
been available at Sprint publication in

70
00:04:49,840 --> 00:04:54,770
2005 and on Wikipedia you can you are

71
00:04:54,770 --> 00:05:00,440
able to access it since 2015 and in

72
00:05:00,440 --> 00:05:03,470
previous year I have started to read it

73
00:05:03,470 --> 00:05:06,680
at first time and it was a bit difficult

74
00:05:06,680 --> 00:05:09,530
to understand how to implement this man

75
00:05:09,530 --> 00:05:13,280
in the middle attack because it usually

76
00:05:13,280 --> 00:05:18,260
looks like these these are mostly it is

77
00:05:18,260 --> 00:05:19,789
written mostly the same way in that

78
00:05:19,789 --> 00:05:23,750
paper just like mine in the middle ok

79
00:05:23,750 --> 00:05:28,160
waits for legitimate device to enter an

80
00:05:28,160 --> 00:05:31,699
internal leadership remote education

81
00:05:31,699 --> 00:05:34,220
protocol and it captures the initial

82
00:05:34,220 --> 00:05:36,440
message if you are operating in wireless

83
00:05:36,440 --> 00:05:41,300
networks the proceed the previous step

84
00:05:41,300 --> 00:05:44,000
is to capture the attention of the

85
00:05:44,000 --> 00:05:47,120
client this code Association usually

86
00:05:47,120 --> 00:05:50,060
what can we use we can create a rogue

87
00:05:50,060 --> 00:05:53,630
access point we can make it to look like

88
00:05:53,630 --> 00:05:56,720
the same way as their legitimate server

89
00:05:56,720 --> 00:05:59,180
that is we usually configure the same

90
00:05:59,180 --> 00:06:04,580
SSID and of course the inner protocol

91
00:06:04,580 --> 00:06:06,979
should be the same it shouldn't be WPA

92
00:06:06,979 --> 00:06:10,760
PSK it should be WPA enterprise

93
00:06:10,760 --> 00:06:17,930
and the second point you need to get the

94
00:06:17,930 --> 00:06:20,660
client connect to you if he is talking

95
00:06:20,660 --> 00:06:23,870
to legitimate server we can send the

96
00:06:23,870 --> 00:06:26,510
authentication packet to broke the

97
00:06:26,510 --> 00:06:29,950
session and ask the client to reconnect

98
00:06:29,950 --> 00:06:34,130
also very useful technique is to come

99
00:06:34,130 --> 00:06:37,790
closer to the victim this way our rogue

100
00:06:37,790 --> 00:06:40,600
access point has the highest signal and

101
00:06:40,600 --> 00:06:46,100
usually they prefer hotspots with a with

102
00:06:46,100 --> 00:06:50,390
a better signal but it's not always in

103
00:06:50,390 --> 00:06:53,450
general it works so we captured the

104
00:06:53,450 --> 00:06:56,630
attention of the client it associated to

105
00:06:56,630 --> 00:06:58,670
our rogue access point and at the moment

106
00:06:58,670 --> 00:07:11,570
we begin if authentication so I have

107
00:07:11,570 --> 00:07:15,200
decided to call the server Alice the

108
00:07:15,200 --> 00:07:18,370
client Bob usually they call if the drop

109
00:07:18,370 --> 00:07:22,190
milleri but I have called it if it

110
00:07:22,190 --> 00:07:23,630
doesn't matter at all

111
00:07:23,630 --> 00:07:29,030
so in my simulation the man in the

112
00:07:29,030 --> 00:07:34,820
middle node it it consists of two if

113
00:07:34,820 --> 00:07:38,200
state machines the if pure and if server

114
00:07:38,200 --> 00:07:40,970
so if pure communicate with the

115
00:07:40,970 --> 00:07:44,720
legitimate server and if server these

116
00:07:44,720 --> 00:07:48,220
are this is our rogue access point that

117
00:07:48,220 --> 00:07:52,160
captured the attention of Bob so

118
00:07:52,160 --> 00:07:55,960
actually I think that they usually even

119
00:07:55,960 --> 00:07:58,490
make it another way with the names of

120
00:07:58,490 --> 00:08:00,740
Alice and Bob usually Bob is the

121
00:08:00,740 --> 00:08:02,960
legitimate server and Alice is the

122
00:08:02,960 --> 00:08:09,490
client it differs here so peep it is a

123
00:08:09,490 --> 00:08:14,480
wrap over EEP protocol usually all those

124
00:08:14,480 --> 00:08:16,910
with Ledisi protocols like emissary -

125
00:08:16,910 --> 00:08:22,880
they send credentials with various

126
00:08:22,880 --> 00:08:23,930
problems it

127
00:08:23,930 --> 00:08:27,139
the weak password problem like hash can

128
00:08:27,139 --> 00:08:30,800
be cracked in 2012 there have been a

129
00:08:30,800 --> 00:08:33,589
talk about cracking I messed up with two

130
00:08:33,589 --> 00:08:37,000
credentials in less than 24 hours the

131
00:08:37,000 --> 00:08:42,289
platform is called cloud cracker fine if

132
00:08:42,289 --> 00:08:48,050
I'm correct and it utilizes fpj notes in

133
00:08:48,050 --> 00:08:51,529
this simulation I was interested in proc

134
00:08:51,529 --> 00:08:55,700
seein that mschap credentials from Bob

135
00:08:55,700 --> 00:09:01,370
pure to Alice server and backward in

136
00:09:01,370 --> 00:09:04,520
January around January 15 I have

137
00:09:04,520 --> 00:09:07,459
discovered that there was really cool

138
00:09:07,459 --> 00:09:12,020
paper in 2014 about know this trivial

139
00:09:12,020 --> 00:09:16,400
attack but about really cool attack it

140
00:09:16,400 --> 00:09:19,029
is called

141
00:09:19,390 --> 00:09:20,660
okay

142
00:09:20,660 --> 00:09:25,910
it's about BB pay Enterprise exploiting

143
00:09:25,910 --> 00:09:30,850
and they call proc seen of messages like

144
00:09:30,850 --> 00:09:36,620
let's let use mschap you want Oracle's

145
00:09:36,620 --> 00:09:40,160
because I must repeat to protocol it is

146
00:09:40,160 --> 00:09:44,200
the inner protocol in peep and there is

147
00:09:44,200 --> 00:09:50,800
leap protocol that uses em except v1 and

148
00:09:51,160 --> 00:09:55,910
ios7 had a problem like you connect to

149
00:09:55,910 --> 00:09:58,250
the hidden room access point for example

150
00:09:58,250 --> 00:10:02,420
you provide your credentials but if I

151
00:10:02,420 --> 00:10:04,670
will create a rogue access point with

152
00:10:04,670 --> 00:10:07,550
leap protocol your iPhone will leak

153
00:10:07,550 --> 00:10:10,970
credentials and even more that protocol

154
00:10:10,970 --> 00:10:17,089
even does not use TLS tunnel so if there

155
00:10:17,089 --> 00:10:20,740
is somebody interested in more deep

156
00:10:20,740 --> 00:10:23,870
study of the problem you can refer to

157
00:10:23,870 --> 00:10:26,180
that paper the link is provided at for

158
00:10:26,180 --> 00:10:30,529
them page so in peep at first bodies

159
00:10:30,529 --> 00:10:32,589
established TLS handshake

160
00:10:32,589 --> 00:10:36,589
the usual way server provides the

161
00:10:36,589 --> 00:10:37,200
certificate

162
00:10:37,200 --> 00:10:39,960
the client client is to provide the

163
00:10:39,960 --> 00:10:42,360
fantasy of the certificate

164
00:10:42,360 --> 00:10:45,140
there is no certificate authority

165
00:10:45,140 --> 00:10:48,810
usually because it's not good it should

166
00:10:48,810 --> 00:10:52,380
be another trusted storage the easiest

167
00:10:52,380 --> 00:10:54,770
ways to provide self signed certificate

168
00:10:54,770 --> 00:10:59,240
into a client and usually Android phones

169
00:10:59,240 --> 00:11:02,280
allows you to unspecified this

170
00:11:02,280 --> 00:11:04,920
certificate this way you connect to the

171
00:11:04,920 --> 00:11:06,960
server without verifying his

172
00:11:06,960 --> 00:11:10,470
authenticity and so man-in-the-middle as

173
00:11:10,470 --> 00:11:18,470
possible so we have established till s

174
00:11:18,470 --> 00:11:21,900
we have finished the lesson shake it is

175
00:11:21,900 --> 00:11:24,150
a part of Telus protocol and now we

176
00:11:24,150 --> 00:11:30,540
begin to last communication both parties

177
00:11:30,540 --> 00:11:34,620
Alice over and if pure and the same is

178
00:11:34,620 --> 00:11:37,110
true for if server and Bob pure they

179
00:11:37,110 --> 00:11:43,800
come up with a shared master key that is

180
00:11:43,800 --> 00:11:47,220
the basis for future encryption so since

181
00:11:47,220 --> 00:11:52,710
we performed man in the middle if parent

182
00:11:52,710 --> 00:11:55,410
if server they possess they are in

183
00:11:55,410 --> 00:11:58,290
possession of both secret keys for

184
00:11:58,290 --> 00:12:01,200
tunnels between Alice or and if pure and

185
00:12:01,200 --> 00:12:04,350
for the tunnel between if server and Bob

186
00:12:04,350 --> 00:12:07,650
Pierre and now we are actually working

187
00:12:07,650 --> 00:12:13,140
with a with a pure mschap with two

188
00:12:13,140 --> 00:12:17,660
protocol here I presented the actual

189
00:12:17,660 --> 00:12:22,470
implementation of proxy of the inner

190
00:12:22,470 --> 00:12:26,460
protocol because it's not that easy to

191
00:12:26,460 --> 00:12:30,390
proxies the protocol there are some

192
00:12:30,390 --> 00:12:34,920
things that differs so I've decided to

193
00:12:34,920 --> 00:12:39,420
went into the code of host app and at

194
00:12:39,420 --> 00:12:43,170
first there are was only two machines I

195
00:12:43,170 --> 00:12:47,300
have created four machines then I added

196
00:12:47,300 --> 00:12:49,830
communication and pass this to

197
00:12:49,830 --> 00:12:50,970
communicate between

198
00:12:50,970 --> 00:12:53,300
cells and those two between themselves

199
00:12:53,300 --> 00:12:59,069
then I started to configure the set up

200
00:12:59,069 --> 00:13:03,870
like I would I disabled the verification

201
00:13:03,870 --> 00:13:06,829
of the certificate in Bob pure machine

202
00:13:06,829 --> 00:13:16,350
then I made the following problem we can

203
00:13:16,350 --> 00:13:20,040
skip the certificate verification but we

204
00:13:20,040 --> 00:13:22,439
can be still sure that we were

205
00:13:22,439 --> 00:13:26,750
communicating to legitimate server this

206
00:13:26,750 --> 00:13:29,699
functionality Scott is called crypto

207
00:13:29,699 --> 00:13:34,319
Bingen there is the following we

208
00:13:34,319 --> 00:13:38,670
generate special integrity value with

209
00:13:38,670 --> 00:13:41,480
the help of hash function that takes as

210
00:13:41,480 --> 00:13:45,540
arguments both secret materials the

211
00:13:45,540 --> 00:13:48,769
master key from chilliest tunnel and

212
00:13:48,769 --> 00:13:51,889
special secret key generated on the

213
00:13:51,889 --> 00:13:54,839
basis of emissary to credentials and

214
00:13:54,839 --> 00:13:59,309
then we exchange these values and both

215
00:13:59,309 --> 00:14:04,079
parties can be sure that the other end

216
00:14:04,079 --> 00:14:09,170
was in possession of both materials and

217
00:14:09,170 --> 00:14:15,720
I was really trying to disable this

218
00:14:15,720 --> 00:14:18,600
functionality because with it you can

219
00:14:18,600 --> 00:14:23,490
the from simulation crypto bending they

220
00:14:23,490 --> 00:14:31,079
have been created in 2004 by Cisco I'm

221
00:14:31,079 --> 00:14:34,500
not sure at least in Cisco they had this

222
00:14:34,500 --> 00:14:37,920
functionality since 2004 and it's

223
00:14:37,920 --> 00:14:43,649
usually only for okay it's usually only

224
00:14:43,649 --> 00:14:47,160
for people with zero because in people

225
00:14:47,160 --> 00:14:49,319
one they don't even have this crypto

226
00:14:49,319 --> 00:14:51,420
bending so in my simulation I have

227
00:14:51,420 --> 00:14:56,089
configured people one protocol but just

228
00:14:56,089 --> 00:14:59,089
to make my life easier

229
00:14:59,089 --> 00:15:02,850
so the

230
00:15:02,850 --> 00:15:08,249
I started to add communication between

231
00:15:08,249 --> 00:15:10,589
these two men and the middle state

232
00:15:10,589 --> 00:15:15,589
machines like Alice server sends a

233
00:15:15,589 --> 00:15:21,629
challenge request to Yves Pierre Pierre

234
00:15:21,629 --> 00:15:25,649
if pur does not have a password even the

235
00:15:25,649 --> 00:15:29,359
hash of this password then if pure

236
00:15:29,359 --> 00:15:34,829
starts a pending state is just specific

237
00:15:34,829 --> 00:15:36,899
functionality of the implementation host

238
00:15:36,899 --> 00:15:41,220
app and sends the data to each server if

239
00:15:41,220 --> 00:15:45,869
server waits to the initial message from

240
00:15:45,869 --> 00:15:49,649
if pure and sends a change request just

241
00:15:49,649 --> 00:15:52,319
putting inside the same data that was

242
00:15:52,319 --> 00:15:55,470
sent from Alice over to Yves Pierre Bob

243
00:15:55,470 --> 00:16:01,350
pure computes required response if so

244
00:16:01,350 --> 00:16:06,869
obtains it enters enters pending state

245
00:16:06,869 --> 00:16:10,699
and sends the data to if pure if Pierre

246
00:16:10,699 --> 00:16:15,299
successfully builds a forged mschap we

247
00:16:15,299 --> 00:16:18,480
to challenge response at the server we

248
00:16:18,480 --> 00:16:22,199
revise it everything is OK and sends

249
00:16:22,199 --> 00:16:30,569
success request if Pierre have to verify

250
00:16:30,569 --> 00:16:34,139
this request because it is a part of

251
00:16:34,139 --> 00:16:39,509
protocol but since it is an attacker she

252
00:16:39,509 --> 00:16:44,549
skips it and sends the request to if

253
00:16:44,549 --> 00:16:49,499
server because Bob Pierre won't skip

254
00:16:49,499 --> 00:16:52,529
this verification so we need to deliver

255
00:16:52,529 --> 00:16:56,879
the success request to the end so after

256
00:16:56,879 --> 00:17:02,869
that the authentication is completed

257
00:17:02,869 --> 00:17:06,359
everybody thinks it's ok I mean those

258
00:17:06,359 --> 00:17:11,240
and and we are as attackers in

259
00:17:11,240 --> 00:17:14,279
possession of required secret materials

260
00:17:14,279 --> 00:17:15,119
and

261
00:17:15,119 --> 00:17:19,260
we are permitted to access network

262
00:17:19,260 --> 00:17:22,169
resources that were protected with WPA

263
00:17:22,169 --> 00:17:25,380
enterprise authentication and as well we

264
00:17:25,380 --> 00:17:31,169
can proxy application layer messages

265
00:17:31,169 --> 00:17:33,029
from Bob Pierre to our server and

266
00:17:33,029 --> 00:17:38,429
analyze this traffic it's very true

267
00:17:38,429 --> 00:17:40,500
attack you can protect from these with

268
00:17:40,500 --> 00:17:44,900
the help of VPN HTTPS it works still

269
00:17:44,900 --> 00:17:48,149
it's more about network resources like

270
00:17:48,149 --> 00:17:52,799
some kind of university email or like

271
00:17:52,799 --> 00:17:58,500
like that so that's it thank you for

272
00:17:58,500 --> 00:18:00,480
attention

273
00:18:00,480 --> 00:18:09,569
[Applause]

274
00:18:11,390 --> 00:18:16,470
Thank You Sergey questions we have time

275
00:18:16,470 --> 00:18:17,250
for questions

276
00:18:17,250 --> 00:18:29,250
raise your hand yes how this visa ticket

277
00:18:29,250 --> 00:18:31,620
normally checked against the host so I

278
00:18:31,620 --> 00:18:35,190
thought about sometimes you get the CA

279
00:18:35,190 --> 00:18:37,049
from your university or something like

280
00:18:37,049 --> 00:18:40,309
this when does it trust them all

281
00:18:40,309 --> 00:18:43,409
certificates which signed by the CEOs

282
00:18:43,409 --> 00:18:46,080
are also binding between the common name

283
00:18:46,080 --> 00:18:49,289
of the CA and the name of the radio

284
00:18:49,289 --> 00:18:52,409
server or something like this so our

285
00:18:52,409 --> 00:18:57,020
next step okay

286
00:18:57,020 --> 00:19:03,630
usually you have uke you have to provide

287
00:19:03,630 --> 00:19:06,390
some kind of verification chain like an

288
00:19:06,390 --> 00:19:07,880
usual

289
00:19:07,880 --> 00:19:12,240
trusted storage in HTTPS in Windows they

290
00:19:12,240 --> 00:19:14,640
usually mix these certificate

291
00:19:14,640 --> 00:19:17,580
authorities and Linux actually in host

292
00:19:17,580 --> 00:19:20,279
app you can provide separate

293
00:19:20,279 --> 00:19:22,649
certificates specifically for this

294
00:19:22,649 --> 00:19:26,620
network the

295
00:19:26,620 --> 00:19:30,100
actual way how to

