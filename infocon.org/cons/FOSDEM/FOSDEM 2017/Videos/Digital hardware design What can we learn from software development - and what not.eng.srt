1
00:00:00,030 --> 00:00:02,598
so

2
00:00:04,520 --> 00:00:09,320
we're ready to go I'm talking about

3
00:00:09,320 --> 00:00:11,120
digital hardware design and for those of

4
00:00:11,120 --> 00:00:13,639
you that have been staying here for the

5
00:00:13,639 --> 00:00:16,400
previous talk you have not a perfect

6
00:00:16,400 --> 00:00:18,619
introduction that kind of leads up to

7
00:00:18,619 --> 00:00:25,520
this talk so I'm by when I started at

8
00:00:25,520 --> 00:00:27,290
computers I started at software and I've

9
00:00:27,290 --> 00:00:28,579
been doing software for a very long time

10
00:00:28,579 --> 00:00:31,880
and then just at the end of my studies

11
00:00:31,880 --> 00:00:34,190
at university I came to hardware and

12
00:00:34,190 --> 00:00:37,190
then when you first have a look at at

13
00:00:37,190 --> 00:00:39,949
hardware design you obviously do a kind

14
00:00:39,949 --> 00:00:42,199
of a VHDL a very long course at

15
00:00:42,199 --> 00:00:44,179
university and they show you something

16
00:00:44,179 --> 00:00:47,239
like that and that's how hardware design

17
00:00:47,239 --> 00:00:50,120
kind of looks at at first thing so you

18
00:00:50,120 --> 00:00:52,910
have this very strict models or this

19
00:00:52,910 --> 00:00:56,420
waterfall floam fall model so you do

20
00:00:56,420 --> 00:00:57,890
your requirements specs you have a

21
00:00:57,890 --> 00:00:59,690
couple of hundred pages you live in Word

22
00:00:59,690 --> 00:01:02,390
or Excel or something like that and then

23
00:01:02,390 --> 00:01:04,250
you do your design you have your

24
00:01:04,250 --> 00:01:06,260
architects there then you have a couple

25
00:01:06,260 --> 00:01:07,850
people there to implementation and

26
00:01:07,850 --> 00:01:10,460
that's actually outsourced many times to

27
00:01:10,460 --> 00:01:12,530
some cheaper countries because if we

28
00:01:12,530 --> 00:01:14,060
seen before kind of writing Verilog and

29
00:01:14,060 --> 00:01:17,180
VHDL can be extremely boring and then we

30
00:01:17,180 --> 00:01:18,680
have verification so you make sure

31
00:01:18,680 --> 00:01:20,960
everything actually works and in the end

32
00:01:20,960 --> 00:01:23,570
you have maintenance that's kind of your

33
00:01:23,570 --> 00:01:25,549
problem stick with you forever and ever

34
00:01:25,549 --> 00:01:30,979
and so this is kind of the very simple

35
00:01:30,979 --> 00:01:33,200
version if you're kind of more than one

36
00:01:33,200 --> 00:01:35,329
person you usually split that up so you

37
00:01:35,329 --> 00:01:38,119
have kind of one part here and then one

38
00:01:38,119 --> 00:01:41,119
v like other part where you do this

39
00:01:41,119 --> 00:01:44,270
verification engineering kind of in

40
00:01:44,270 --> 00:01:46,850
parallel to your regular software

41
00:01:46,850 --> 00:01:48,560
development so you start off with a lot

42
00:01:48,560 --> 00:01:51,649
of PDFs or Word documents and then you

43
00:01:51,649 --> 00:01:53,329
work your way through to the

44
00:01:53,329 --> 00:01:55,729
implementation process and this is kind

45
00:01:55,729 --> 00:01:57,820
of really done in parallel usually

46
00:01:57,820 --> 00:02:03,039
because yeah why we'll see that in a bit

47
00:02:03,039 --> 00:02:06,649
so now coming from the from the hardware

48
00:02:06,649 --> 00:02:08,960
of software world kind of that's how the

49
00:02:08,960 --> 00:02:10,880
fleshies software development processes

50
00:02:10,880 --> 00:02:13,730
look these days you have all those agile

51
00:02:13,730 --> 00:02:16,640
methods you have a very short sprints

52
00:02:16,640 --> 00:02:18,379
you have very

53
00:02:18,379 --> 00:02:20,150
kind of dynamic process that you do know

54
00:02:20,150 --> 00:02:22,819
you don't start with a 200 or 500 page

55
00:02:22,819 --> 00:02:24,859
PDF and then you don't see each other

56
00:02:24,859 --> 00:02:26,659
again for the next couple months and

57
00:02:26,659 --> 00:02:28,609
then you meet again to do the final

58
00:02:28,609 --> 00:02:33,680
integration so the things looks

59
00:02:33,680 --> 00:02:35,769
different actually it is different and

60
00:02:35,769 --> 00:02:38,269
also kind of to note in the end we had

61
00:02:38,269 --> 00:02:40,879
kind of maintenance at the last point if

62
00:02:40,879 --> 00:02:42,319
you look at that and that's just a real

63
00:02:42,319 --> 00:02:43,849
random picture I found an Internet

64
00:02:43,849 --> 00:02:46,790
there's party at the end so if that's

65
00:02:46,790 --> 00:02:49,310
not a good reason to have a look at why

66
00:02:49,310 --> 00:02:51,500
those processes are different and what

67
00:02:51,500 --> 00:02:53,930
we possibly can take from one of each

68
00:02:53,930 --> 00:03:02,019
other so why have been or our hardware

69
00:03:02,019 --> 00:03:05,989
development process is the way they are

70
00:03:05,989 --> 00:03:10,069
and they are the way they are and that's

71
00:03:10,069 --> 00:03:12,680
what we've seen before making a six is

72
00:03:12,680 --> 00:03:14,930
expensive it's really expensive and you

73
00:03:14,930 --> 00:03:18,109
want to be first time right so if you do

74
00:03:18,109 --> 00:03:19,760
a tape out you want to make sure that it

75
00:03:19,760 --> 00:03:24,859
actually works and that actually seems

76
00:03:24,859 --> 00:03:33,139
to be funny okay silence that first time

77
00:03:33,139 --> 00:03:35,120
right doesn't seem to go together

78
00:03:35,120 --> 00:03:38,209
let's see No so the thing is if you're

79
00:03:38,209 --> 00:03:40,040
doing a six like stuff that cost you

80
00:03:40,040 --> 00:03:42,560
real huge amounts of money to get

81
00:03:42,560 --> 00:03:44,930
produced at fabricators there you want

82
00:03:44,930 --> 00:03:46,430
to make sure that you're actually your

83
00:03:46,430 --> 00:03:48,109
first table is correct because otherwise

84
00:03:48,109 --> 00:03:49,970
you have just spent a lot of time and

85
00:03:49,970 --> 00:03:52,190
actually even more money on that so

86
00:03:52,190 --> 00:03:55,579
that's why we have this this very strict

87
00:03:55,579 --> 00:04:00,109
flow thing is we're in a world of FPGAs

88
00:04:00,109 --> 00:04:02,870
now more and more and they're coming

89
00:04:02,870 --> 00:04:05,239
closer to you when you look at Intel

90
00:04:05,239 --> 00:04:06,979
putting them closer to your own process

91
00:04:06,979 --> 00:04:08,959
or putting them in data centers for now

92
00:04:08,959 --> 00:04:11,150
you don't even have to buy a huge FPGA

93
00:04:11,150 --> 00:04:12,859
volt anymore you can just rent them by

94
00:04:12,859 --> 00:04:16,909
the hour at Amazon or Microsoft so this

95
00:04:16,909 --> 00:04:18,978
makes kind of this kind of hardware

96
00:04:18,978 --> 00:04:20,449
developed and much more accessible and

97
00:04:20,449 --> 00:04:24,949
so the question I'll have a look at here

98
00:04:24,949 --> 00:04:28,729
is can we treat hardware development

99
00:04:28,729 --> 00:04:30,200
that actually targets a six or

100
00:04:30,200 --> 00:04:31,969
reprogrammable software

101
00:04:31,969 --> 00:04:36,949
a bit more like software design so we

102
00:04:36,949 --> 00:04:39,439
have a look at three things and the

103
00:04:39,439 --> 00:04:41,749
probably formulated a bit to upset

104
00:04:41,749 --> 00:04:45,289
people so first thing is be less

105
00:04:45,289 --> 00:04:48,229
confident in the quality you get second

106
00:04:48,229 --> 00:04:51,169
is iterate iterate and iterate again and

107
00:04:51,169 --> 00:04:53,089
third is we should have a look at where

108
00:04:53,089 --> 00:04:55,279
we can actually make a difference in the

109
00:04:55,279 --> 00:05:00,679
things we do first of all yeah don't

110
00:05:00,679 --> 00:05:05,329
worry be happy if you look at this very

111
00:05:05,329 --> 00:05:10,129
gut feeling graph which is showing up

112
00:05:10,129 --> 00:05:14,569
here but not there yeah so this is

113
00:05:14,569 --> 00:05:16,489
source gut feeling but it's actually

114
00:05:16,489 --> 00:05:20,239
more or less right from experience so if

115
00:05:20,239 --> 00:05:22,519
you do a bit of testing you say okay

116
00:05:22,519 --> 00:05:25,129
yeah it's compiles it's probably gonna

117
00:05:25,129 --> 00:05:27,709
work then you do a bit of testing and at

118
00:05:27,709 --> 00:05:29,599
some point in time you're pretty

119
00:05:29,599 --> 00:05:32,869
confident that things work out the thing

120
00:05:32,869 --> 00:05:36,319
is if you have a software you just run

121
00:05:36,319 --> 00:05:39,529
it and if it reasonably performs

122
00:05:39,529 --> 00:05:41,269
reasonably well you say okay let's ship

123
00:05:41,269 --> 00:05:44,089
that to our future customers or the

124
00:05:44,089 --> 00:05:45,649
paying customers who cares they're just

125
00:05:45,649 --> 00:05:47,599
gonna come back to us but the thing is

126
00:05:47,599 --> 00:05:50,449
if you want to produce an ASIC that cost

127
00:05:50,449 --> 00:05:51,829
you a couple million you want to be

128
00:05:51,829 --> 00:05:54,829
really really sure that you're actually

129
00:05:54,829 --> 00:05:58,129
delivering a good quality product so if

130
00:05:58,129 --> 00:06:00,610
you're doing software development you're

131
00:06:00,610 --> 00:06:04,579
you you can't be okay with less

132
00:06:04,579 --> 00:06:07,129
confidence in your quality don't meaning

133
00:06:07,129 --> 00:06:09,619
you intentionally ship crap you just are

134
00:06:09,619 --> 00:06:13,149
not sure that you're not shipping crap

135
00:06:13,419 --> 00:06:15,259
so why can't we do that

136
00:06:15,259 --> 00:06:17,989
cut FPGAs speaking in a kind of a sea

137
00:06:17,989 --> 00:06:19,969
terms enables you cheap Rhys pins you

138
00:06:19,969 --> 00:06:22,939
can't just reprogram reflash your FPGA

139
00:06:22,939 --> 00:06:25,939
and that's about all you need to invest

140
00:06:25,939 --> 00:06:28,579
there so you don't need to be first-time

141
00:06:28,579 --> 00:06:31,129
right you can't go with this 80/20

142
00:06:31,129 --> 00:06:37,189
approach so okay the question that comes

143
00:06:37,189 --> 00:06:40,069
up and that kind of makes this approach

144
00:06:40,069 --> 00:06:44,749
still a bit harder or big yep more

145
00:06:44,749 --> 00:06:46,550
difficult to execute at the

146
00:06:46,550 --> 00:06:49,820
what does a testing approach for an pur

147
00:06:49,820 --> 00:06:53,990
FPGA targeting system look like so if

148
00:06:53,990 --> 00:06:58,520
you google around and if you have a look

149
00:06:58,520 --> 00:07:00,200
at the standard tutorials either they

150
00:07:00,200 --> 00:07:02,390
leave our testing completely just as

151
00:07:02,390 --> 00:07:04,730
we've been seeing before and that's

152
00:07:04,730 --> 00:07:07,730
actually not just here it's also at

153
00:07:07,730 --> 00:07:09,290
university courses we talk a lot about

154
00:07:09,290 --> 00:07:11,420
design but not that much about testing

155
00:07:11,420 --> 00:07:14,300
and verification so how do you do

156
00:07:14,300 --> 00:07:16,340
actually verification and testing for an

157
00:07:16,340 --> 00:07:18,800
FPGA targeting things so there is not

158
00:07:18,800 --> 00:07:21,230
that much information out there yet

159
00:07:21,230 --> 00:07:23,960
so this is a place where we need to get

160
00:07:23,960 --> 00:07:26,300
a bit more active where we kind of also

161
00:07:26,300 --> 00:07:28,850
publish our best practices because I'm

162
00:07:28,850 --> 00:07:30,980
sure in this room there is many people

163
00:07:30,980 --> 00:07:32,750
that actually have experience doing that

164
00:07:32,750 --> 00:07:35,240
and there's actually some software tools

165
00:07:35,240 --> 00:07:37,640
that help with that but there is not

166
00:07:37,640 --> 00:07:39,470
that much knowledge about that so this

167
00:07:39,470 --> 00:07:42,740
is something we should change just to

168
00:07:42,740 --> 00:07:45,020
mention one simple example there's for

169
00:07:45,020 --> 00:07:49,280
example cocoa TB which is a test bench

170
00:07:49,280 --> 00:07:51,590
kind of generating framework written in

171
00:07:51,590 --> 00:07:54,920
Python which is more actually targeted

172
00:07:54,920 --> 00:07:56,600
at FPGA designs gives you a very nice

173
00:07:56,600 --> 00:08:00,140
productivity that's one example that

174
00:08:00,140 --> 00:08:03,770
people should know more about so but

175
00:08:03,770 --> 00:08:05,870
this 80/20 approach kind of is the

176
00:08:05,870 --> 00:08:08,810
prerequisite require thing that you need

177
00:08:08,810 --> 00:08:10,970
to have if you want to go more to a

178
00:08:10,970 --> 00:08:14,540
software like development flow and if

179
00:08:14,540 --> 00:08:16,520
you look at software development flows

180
00:08:16,520 --> 00:08:19,190
they work and they have been kind of

181
00:08:19,190 --> 00:08:21,020
moving in this direction this agile

182
00:08:21,020 --> 00:08:22,730
direction because you want to iterate

183
00:08:22,730 --> 00:08:26,870
you want to be very fast in your 12 sand

184
00:08:26,870 --> 00:08:28,640
arrows you don't want to start with one

185
00:08:28,640 --> 00:08:30,620
specification but you want to go in

186
00:08:30,620 --> 00:08:33,260
small steps and actually if you look at

187
00:08:33,260 --> 00:08:35,590
kind of learning and how learning works

188
00:08:35,590 --> 00:08:38,299
you're much more productive if you get

189
00:08:38,299 --> 00:08:41,419
very fast feedback imagine if you at

190
00:08:41,419 --> 00:08:44,300
university or been at school somewhere

191
00:08:44,300 --> 00:08:46,280
if you have been writing a test and just

192
00:08:46,280 --> 00:08:48,620
get the results back after three months

193
00:08:48,620 --> 00:08:50,210
you're not going to learn that much

194
00:08:50,210 --> 00:08:52,520
about it from it as if you're kind of

195
00:08:52,520 --> 00:08:54,260
one-to-one with instructure and you get

196
00:08:54,260 --> 00:08:56,390
immediate feedback so the sooner you get

197
00:08:56,390 --> 00:08:58,550
feedback the more value you have and the

198
00:08:58,550 --> 00:08:59,570
more you learn

199
00:08:59,570 --> 00:09:01,130
that's why care of software development

200
00:09:01,130 --> 00:09:04,040
is more fun for people usually because

201
00:09:04,040 --> 00:09:09,800
you see quicker results yeah

202
00:09:09,800 --> 00:09:11,630
then having a look at hardware and we

203
00:09:11,630 --> 00:09:13,660
say ok let's go with this very nice

204
00:09:13,660 --> 00:09:16,340
iterative flow and actually I've seen

205
00:09:16,340 --> 00:09:20,870
that in Brussels on Friday everybody who

206
00:09:20,870 --> 00:09:24,740
has been using a synthesis tool Flo

207
00:09:24,740 --> 00:09:28,190
knows kind of the main time you spend

208
00:09:28,190 --> 00:09:29,600
actually design is waiting for the

209
00:09:29,600 --> 00:09:31,880
synthesis to finish it's kind of not

210
00:09:31,880 --> 00:09:34,190
uncommon at all for have a centers for

211
00:09:34,190 --> 00:09:36,350
larger fpga to take an hour two or three

212
00:09:36,350 --> 00:09:39,680
and if you get a feedback that you did

213
00:09:39,680 --> 00:09:41,570
actually a syntax error just after an

214
00:09:41,570 --> 00:09:44,530
hour it's just annoying as hell

215
00:09:44,530 --> 00:09:50,390
so FPGAs give us cheap iterations but

216
00:09:50,390 --> 00:09:54,770
don't yet give us fast iterations and as

217
00:09:54,770 --> 00:09:56,240
we said that's what we want for

218
00:09:56,240 --> 00:10:00,350
productivity so I've seen a couple

219
00:10:00,350 --> 00:10:03,890
cigars you guys around there they are I

220
00:10:03,890 --> 00:10:06,500
think they're heading in this direction

221
00:10:06,500 --> 00:10:08,960
so intelligence idea is so we want to

222
00:10:08,960 --> 00:10:11,540
get feedback as soon as we can

223
00:10:11,540 --> 00:10:13,520
meaning if you type you want to get

224
00:10:13,520 --> 00:10:17,690
feedback if you want to do if you do a

225
00:10:17,690 --> 00:10:20,930
bit more static analysis linting that's

226
00:10:20,930 --> 00:10:23,900
all stuff that can be done at much

227
00:10:23,900 --> 00:10:26,480
earlier stages you don't need a full

228
00:10:26,480 --> 00:10:28,220
place in route and synthesis for that in

229
00:10:28,220 --> 00:10:32,330
most cases and IGI des that we can get

230
00:10:32,330 --> 00:10:35,270
today most of them are still stuck in

231
00:10:35,270 --> 00:10:41,720
the 80s I think and they don't usually

232
00:10:41,720 --> 00:10:43,820
give us feedback they just have some

233
00:10:43,820 --> 00:10:45,830
syntax highlighting and actually are

234
00:10:45,830 --> 00:10:48,620
able to call with one button some some

235
00:10:48,620 --> 00:10:52,250
IDE some synthesis tool and we also need

236
00:10:52,250 --> 00:10:55,670
more automation and every large company

237
00:10:55,670 --> 00:10:58,160
also in hardware design of course uses

238
00:10:58,160 --> 00:10:59,120
continuous integration continuous

239
00:10:59,120 --> 00:11:02,030
delivery is I think for them pretty far

240
00:11:02,030 --> 00:11:05,750
off but anyways the nice thing about

241
00:11:05,750 --> 00:11:07,760
continuous integration and I'll give you

242
00:11:07,760 --> 00:11:10,610
a hint oh that looks a bit in the future

243
00:11:10,610 --> 00:11:13,400
a nice side effect you also get reduced

244
00:11:13,400 --> 00:11:16,240
results and that's always a good thing

245
00:11:16,240 --> 00:11:19,310
talking about IDs I just installed the

246
00:11:19,310 --> 00:11:23,210
2016 dot one version of an IDE from

247
00:11:23,210 --> 00:11:25,640
Mentor Graphics it's called HDL editor

248
00:11:25,640 --> 00:11:29,330
or HDL designer and well your user

249
00:11:29,330 --> 00:11:30,650
interface usually always looks like

250
00:11:30,650 --> 00:11:32,030
tickle and crap but you're just gonna

251
00:11:32,030 --> 00:11:33,530
get over that if you do hardware design

252
00:11:33,530 --> 00:11:35,690
which is fine as you as long as it's

253
00:11:35,690 --> 00:11:37,790
usable and then it asked me this very

254
00:11:37,790 --> 00:11:39,320
nice questions do you want to setup

255
00:11:39,320 --> 00:11:41,090
version control and said yes that's what

256
00:11:41,090 --> 00:11:43,670
I want and they gave me kind of those

257
00:11:43,670 --> 00:11:49,640
options as I said this is the 2016 dot

258
00:11:49,640 --> 00:11:51,740
one version of this product it's kind of

259
00:11:51,740 --> 00:11:56,690
not yeah the user interface does look

260
00:11:56,690 --> 00:11:59,810
like it the software is like that so

261
00:11:59,810 --> 00:12:01,730
there is much more effort needed in this

262
00:12:01,730 --> 00:12:09,230
regard last point differentiate where it

263
00:12:09,230 --> 00:12:13,760
matters most if we look at software we

264
00:12:13,760 --> 00:12:15,200
see a lot of standardization

265
00:12:15,200 --> 00:12:18,620
we see build tools being standardized

266
00:12:18,620 --> 00:12:20,810
how many different compilers are using

267
00:12:20,810 --> 00:12:24,680
these days you probably use either GCC

268
00:12:24,680 --> 00:12:26,960
LLVM or if you're targeting Windows you

269
00:12:26,960 --> 00:12:30,110
may be using Microsoft Visual Studio but

270
00:12:30,110 --> 00:12:31,730
that's about it for compilers that we

271
00:12:31,730 --> 00:12:35,020
usually care about if you look at

272
00:12:35,020 --> 00:12:36,590
hardware designs

273
00:12:36,590 --> 00:12:38,930
how many synthesis tools do you know of

274
00:12:38,930 --> 00:12:41,060
how many different front ends that just

275
00:12:41,060 --> 00:12:43,490
parse your language in different subtly

276
00:12:43,490 --> 00:12:47,090
different ways so the question is can we

277
00:12:47,090 --> 00:12:50,540
actually find common ground somewhere

278
00:12:50,540 --> 00:12:53,600
and actually differentiate where we can

279
00:12:53,600 --> 00:12:56,090
make a difference and I found this very

280
00:12:56,090 --> 00:12:59,660
nice picture of a keyboard that was kind

281
00:12:59,660 --> 00:13:03,320
of modified to I think a CNC drilling

282
00:13:03,320 --> 00:13:07,340
machine but it's still standing keyboard

283
00:13:07,340 --> 00:13:10,250
anyways good so question is what does

284
00:13:10,250 --> 00:13:13,640
make your HDL project better is it

285
00:13:13,640 --> 00:13:17,030
really the build system is it the way

286
00:13:17,030 --> 00:13:19,910
you include your dependencies or if you

287
00:13:19,910 --> 00:13:21,800
get dependencies from from the web

288
00:13:21,800 --> 00:13:24,220
somewhere the way how you include those

289
00:13:24,220 --> 00:13:27,350
is it really that much

290
00:13:27,350 --> 00:13:29,270
your programming language especially if

291
00:13:29,270 --> 00:13:31,030
you want to have people contribute to it

292
00:13:31,030 --> 00:13:34,070
is it your coding style does it make

293
00:13:34,070 --> 00:13:35,600
that much of a difference if you indent

294
00:13:35,600 --> 00:13:41,720
by three or four or five spaces oh yes I

295
00:13:41,720 --> 00:13:43,900
see

296
00:13:45,620 --> 00:13:48,170
is it your faithful implementation that

297
00:13:48,170 --> 00:13:49,480
makes a difference in your whole project

298
00:13:49,480 --> 00:13:52,430
maybe it is there is some cases where

299
00:13:52,430 --> 00:13:55,250
all that makes a huge difference but the

300
00:13:55,250 --> 00:13:58,670
point is in many projects it just gets

301
00:13:58,670 --> 00:14:00,530
in your way you want to do some coding

302
00:14:00,530 --> 00:14:02,330
you want to build your stuff and you

303
00:14:02,330 --> 00:14:03,680
want to do it in a language which is

304
00:14:03,680 --> 00:14:09,770
reasonably saying to use so this is all

305
00:14:09,770 --> 00:14:12,260
questions that I obviously don't have an

306
00:14:12,260 --> 00:14:14,170
easy answer with and it's kind of always

307
00:14:14,170 --> 00:14:17,660
hard to get over personal kind of

308
00:14:17,660 --> 00:14:19,940
preferences which I have very strong

309
00:14:19,940 --> 00:14:23,330
ones about many things but what you see

310
00:14:23,330 --> 00:14:25,580
if we work together it's not that

311
00:14:25,580 --> 00:14:27,320
important anymore if you end up by three

312
00:14:27,320 --> 00:14:28,970
or four spaces just make it consistent

313
00:14:28,970 --> 00:14:31,400
in some way and that's actually what we

314
00:14:31,400 --> 00:14:34,070
see with a lot of newer programming

315
00:14:34,070 --> 00:14:36,040
languages if you look at for example

316
00:14:36,040 --> 00:14:40,220
rusts or Python or very modern PHP or so

317
00:14:40,220 --> 00:14:42,620
they have kind of a standard coding

318
00:14:42,620 --> 00:14:44,900
style by now which you're obviously not

319
00:14:44,900 --> 00:14:46,910
required to follow but as I kind of just

320
00:14:46,910 --> 00:14:49,070
take that one and you gotta be

321
00:14:49,070 --> 00:14:52,450
reasonably fine or for build systems and

322
00:14:52,450 --> 00:14:55,400
just use auto make or C make and you

323
00:14:55,400 --> 00:14:58,640
gonna be reasonably well off it's

324
00:14:58,640 --> 00:14:59,870
probably not gonna be the perfect

325
00:14:59,870 --> 00:15:01,370
solution that's gonna be the solution

326
00:15:01,370 --> 00:15:03,530
that makes you entirely happy but it

327
00:15:03,530 --> 00:15:05,000
gets the job done and gets the job done

328
00:15:05,000 --> 00:15:05,860
quickly

329
00:15:05,860 --> 00:15:10,100
so for HDL there is no such build system

330
00:15:10,100 --> 00:15:11,840
out there at the moment which is kind of

331
00:15:11,840 --> 00:15:15,800
established over a wide range of people

332
00:15:15,800 --> 00:15:18,470
the stack or make or C make are there

333
00:15:18,470 --> 00:15:20,660
are a couple of temps in this direction

334
00:15:20,660 --> 00:15:24,440
one I am personally a tiny bit involved

335
00:15:24,440 --> 00:15:28,460
one is slides that don't move okay is a

336
00:15:28,460 --> 00:15:31,640
few stock which is project by all of

337
00:15:31,640 --> 00:15:35,720
Kent grant and this is actually kind of

338
00:15:35,720 --> 00:15:38,360
a build system so you specify some some

339
00:15:38,360 --> 00:15:41,470
any like files so this is the

340
00:15:41,470 --> 00:15:43,610
VHDL or Verilog files I need for this

341
00:15:43,610 --> 00:15:45,530
component that's the dependencies that

342
00:15:45,530 --> 00:15:48,200
has and essentially packages all up

343
00:15:48,200 --> 00:15:51,580
together builds the dependency tree and

344
00:15:51,580 --> 00:15:54,710
puts that out into project files that we

345
00:15:54,710 --> 00:15:57,200
borrow or simplify or other tools can

346
00:15:57,200 --> 00:15:59,750
actually make use of nice thing about

347
00:15:59,750 --> 00:16:03,170
that now you want to drop in your other

348
00:16:03,170 --> 00:16:05,480
five full implementation you just say

349
00:16:05,480 --> 00:16:08,300
okay take this core put it in there and

350
00:16:08,300 --> 00:16:10,280
it already knows how to build it

351
00:16:10,280 --> 00:16:12,520
actually because what you do today is

352
00:16:12,520 --> 00:16:15,200
you go to for example open course

353
00:16:15,200 --> 00:16:17,330
download some very log file put them in

354
00:16:17,330 --> 00:16:21,620
there manually put them in your Vivaro

355
00:16:21,620 --> 00:16:25,790
or other kind of project files and make

356
00:16:25,790 --> 00:16:29,180
sharing very hard speak a common

357
00:16:29,180 --> 00:16:34,030
language is probably more yeah tricky

358
00:16:34,030 --> 00:16:36,320
system very lock in VHDL are here

359
00:16:36,320 --> 00:16:38,480
they're probably here to stay there will

360
00:16:38,480 --> 00:16:40,550
be amended by some other tools but I

361
00:16:40,550 --> 00:16:42,890
don't think they will go away so and

362
00:16:42,890 --> 00:16:45,350
that's I think it usually compare it a

363
00:16:45,350 --> 00:16:47,630
bit to like see in the programming world

364
00:16:47,630 --> 00:16:49,490
it's not a nice language it has a lot of

365
00:16:49,490 --> 00:16:51,830
flaws but it will stay and we'll stay

366
00:16:51,830 --> 00:16:54,050
for foreseeable future and actually the

367
00:16:54,050 --> 00:16:55,970
huge benefit those standard languages

368
00:16:55,970 --> 00:16:58,820
have is you have a lot of common ground

369
00:16:58,820 --> 00:17:00,650
with others it makes it easy for others

370
00:17:00,650 --> 00:17:03,560
to get started because you don't need to

371
00:17:03,560 --> 00:17:05,630
learn something new a complete new

372
00:17:05,630 --> 00:17:07,280
programming language to get started on a

373
00:17:07,280 --> 00:17:11,420
project so kind of the the trade-off you

374
00:17:11,420 --> 00:17:13,220
have to make is how many people do I

375
00:17:13,220 --> 00:17:15,829
want to get involved versus is it really

376
00:17:15,829 --> 00:17:17,959
making me that more productive to use

377
00:17:17,959 --> 00:17:21,050
another language and something I've been

378
00:17:21,050 --> 00:17:24,560
coming across writing JavaScript is they

379
00:17:24,560 --> 00:17:26,480
have this very nice feature also have

380
00:17:26,480 --> 00:17:28,430
this arcane JavaScript language which

381
00:17:28,430 --> 00:17:30,590
everybody says is full of bugs and flaws

382
00:17:30,590 --> 00:17:32,810
and weird things but they still are able

383
00:17:32,810 --> 00:17:34,940
to evolve it they not replacing it

384
00:17:34,940 --> 00:17:35,420
iterally

385
00:17:35,420 --> 00:17:37,820
and they evolved it in a way that is

386
00:17:37,820 --> 00:17:39,560
kind of backward compatible so they do

387
00:17:39,560 --> 00:17:41,030
is actually a source to source

388
00:17:41,030 --> 00:17:43,390
compilation of the newer features and

389
00:17:43,390 --> 00:17:45,320
get them down through all the features

390
00:17:45,320 --> 00:17:47,930
that's what I call polyfills and that's

391
00:17:47,930 --> 00:17:50,810
for HTML as well so is there something

392
00:17:50,810 --> 00:17:52,610
that we can do so for example sister

393
00:17:52,610 --> 00:17:54,470
Verilog has nice features

394
00:17:54,470 --> 00:17:57,230
but if you look at at the tool support

395
00:17:57,230 --> 00:17:59,720
it's just not there because every tool

396
00:17:59,720 --> 00:18:01,880
has a lot of different parses for system

397
00:18:01,880 --> 00:18:03,799
error look just like Vivaro has two

398
00:18:03,799 --> 00:18:05,360
different parses that parse this to very

399
00:18:05,360 --> 00:18:07,730
look so you can use one construct that

400
00:18:07,730 --> 00:18:09,380
works in simulation but not in synthesis

401
00:18:09,380 --> 00:18:12,140
that's just annoying and this won't get

402
00:18:12,140 --> 00:18:13,309
any better any time soon

403
00:18:13,309 --> 00:18:15,169
so can we have a kind of

404
00:18:15,169 --> 00:18:17,150
source-to-source compiler that says we

405
00:18:17,150 --> 00:18:19,549
go to the common denominator and go from

406
00:18:19,549 --> 00:18:21,730
there

407
00:18:21,760 --> 00:18:25,309
yeah that's where the kind of the

408
00:18:25,309 --> 00:18:29,659
advertisement part starts right now and

409
00:18:29,659 --> 00:18:32,030
I mentioned it a bit before you get your

410
00:18:32,030 --> 00:18:34,039
course usually from places like open

411
00:18:34,039 --> 00:18:36,830
course and open course is there because

412
00:18:36,830 --> 00:18:39,130
it helps you collaborate it helps you

413
00:18:39,130 --> 00:18:41,780
find other projects that integrate them

414
00:18:41,780 --> 00:18:43,880
in your own to make a difference where

415
00:18:43,880 --> 00:18:48,190
you can make the most of your time so

416
00:18:48,190 --> 00:18:51,530
open course unfortunately is kind of in

417
00:18:51,530 --> 00:18:53,419
hibernation mode and there is actually

418
00:18:53,419 --> 00:18:54,830
no signs that this will change

419
00:18:54,830 --> 00:18:55,789
unfortunately

420
00:18:55,789 --> 00:18:58,370
so a group of people that were rather

421
00:18:58,370 --> 00:19:01,309
active with open course and around the

422
00:19:01,309 --> 00:19:03,789
open risk community that published their

423
00:19:03,789 --> 00:19:07,190
open risk a CPU there got together and

424
00:19:07,190 --> 00:19:08,419
said this is something we need to change

425
00:19:08,419 --> 00:19:11,270
and we need to change this and we can't

426
00:19:11,270 --> 00:19:13,130
unfortunately change open course itself

427
00:19:13,130 --> 00:19:15,890
so we launched Liberty course which is a

428
00:19:15,890 --> 00:19:18,799
site with just a similar target so

429
00:19:18,799 --> 00:19:21,350
giving you access to very nice

430
00:19:21,350 --> 00:19:23,929
IP course making you aware of the

431
00:19:23,929 --> 00:19:25,970
quality they are and teaching you a bit

432
00:19:25,970 --> 00:19:31,039
how to do coding and how to get started

433
00:19:31,039 --> 00:19:34,880
in this ecosystem and it's online now it

434
00:19:34,880 --> 00:19:38,450
works it's still in its early stages so

435
00:19:38,450 --> 00:19:40,610
there is a couple things that we want to

436
00:19:40,610 --> 00:19:43,850
improve it a future so what we always

437
00:19:43,850 --> 00:19:46,340
get is I have noticed this project

438
00:19:46,340 --> 00:19:48,200
listing of ten five posts which one

439
00:19:48,200 --> 00:19:49,690
should I use which one is high quality

440
00:19:49,690 --> 00:19:52,309
which one do others tell me is actually

441
00:19:52,309 --> 00:19:55,820
useful so we're looking at improving or

442
00:19:55,820 --> 00:19:58,190
adding more quality metrics to the site

443
00:19:58,190 --> 00:20:00,919
and those can be machine generated of

444
00:20:00,919 --> 00:20:03,260
course but they also can be used at any

445
00:20:03,260 --> 00:20:04,760
rate that would be like reviews and

446
00:20:04,760 --> 00:20:06,770
things like that and one side I think

447
00:20:06,770 --> 00:20:08,090
that got that pretty

448
00:20:08,090 --> 00:20:11,570
right is a other repository site from a

449
00:20:11,570 --> 00:20:13,340
totally different area it's puppet Forge

450
00:20:13,340 --> 00:20:16,760
and what they have is make it easy for

451
00:20:16,760 --> 00:20:18,260
you to say okay I used this stuff in

452
00:20:18,260 --> 00:20:20,630
production and other things like that to

453
00:20:20,630 --> 00:20:23,270
get very useful but kind of quick

454
00:20:23,270 --> 00:20:26,059
feedback from users so that's what we're

455
00:20:26,059 --> 00:20:27,950
trying to integrate and the other thing

456
00:20:27,950 --> 00:20:29,809
is if you ever have worked with nodejs

457
00:20:29,809 --> 00:20:33,740
or modern PHP with a composer or other

458
00:20:33,740 --> 00:20:35,510
things like that it's very easy to

459
00:20:35,510 --> 00:20:37,070
install dependencies you don't need to

460
00:20:37,070 --> 00:20:38,929
go some site copy a zip file and move

461
00:20:38,929 --> 00:20:41,330
them somewhere you just type one command

462
00:20:41,330 --> 00:20:42,890
line at one thing to your configuration

463
00:20:42,890 --> 00:20:45,740
file and be done so we're looking if we

464
00:20:45,740 --> 00:20:47,990
can have a look at using this repository

465
00:20:47,990 --> 00:20:50,120
site and integrate them into build

466
00:20:50,120 --> 00:20:54,770
systems like fuse suck and there's one

467
00:20:54,770 --> 00:20:56,450
thing I just briefly mentioned that I

468
00:20:56,450 --> 00:20:58,520
won't go into much detail there is also

469
00:20:58,520 --> 00:21:01,730
a continuous integration set up much

470
00:21:01,730 --> 00:21:05,419
like Travis's so we currently kind of be

471
00:21:05,419 --> 00:21:08,630
trying out things in this regard if you

472
00:21:08,630 --> 00:21:09,799
don't want to know more there is

473
00:21:09,799 --> 00:21:12,350
actually a site here and there's also

474
00:21:12,350 --> 00:21:14,600
presentation linked from one of the

475
00:21:14,600 --> 00:21:16,220
Jenkins core developers that got

476
00:21:16,220 --> 00:21:19,220
involved in that and kind of is helping

477
00:21:19,220 --> 00:21:23,440
us out there to make testing and

478
00:21:23,440 --> 00:21:26,120
compiling hardware designs in the cloud

479
00:21:26,120 --> 00:21:31,520
or on your own PC much more easy so what

480
00:21:31,520 --> 00:21:32,779
things to do for now

481
00:21:32,779 --> 00:21:35,570
add your project to liberal course

482
00:21:35,570 --> 00:21:37,730
itself you can do it right now if you

483
00:21:37,730 --> 00:21:39,770
have one

484
00:21:39,770 --> 00:21:42,169
there is planet Libre course which is a

485
00:21:42,169 --> 00:21:44,299
block planet gives you already very nice

486
00:21:44,299 --> 00:21:46,610
overview of some hardware projects that

487
00:21:46,610 --> 00:21:48,350
are out there so if you have your own

488
00:21:48,350 --> 00:21:49,610
block that you want to be listed there

489
00:21:49,610 --> 00:21:53,510
let me know and finally the last one

490
00:21:53,510 --> 00:21:56,000
there is documentation how to get

491
00:21:56,000 --> 00:21:57,559
started working on the liberal core site

492
00:21:57,559 --> 00:21:59,750
itself it's open source it's hosted a

493
00:21:59,750 --> 00:22:02,840
get up and we're always welcome for new

494
00:22:02,840 --> 00:22:07,880
contributors last announcement this fall

495
00:22:07,880 --> 00:22:09,590
stem is usually kind of settled software

496
00:22:09,590 --> 00:22:11,929
and we see the hardware interest grows

497
00:22:11,929 --> 00:22:16,250
just by how packed this room is there is

498
00:22:16,250 --> 00:22:18,860
work call of 2017 this was a rather

499
00:22:18,860 --> 00:22:20,690
small conference that we have been

500
00:22:20,690 --> 00:22:22,010
growing now - alright

501
00:22:22,010 --> 00:22:24,169
over a hundred people now the next

502
00:22:24,169 --> 00:22:27,080
edition will be at hapten bridge in the

503
00:22:27,080 --> 00:22:28,880
UK somewhere in the middle where have

504
00:22:28,880 --> 00:22:32,149
never been September 8 to 10 or

505
00:22:32,149 --> 00:22:34,760
confident or kits especially about

506
00:22:34,760 --> 00:22:37,700
digital hardware design and it's a very

507
00:22:37,700 --> 00:22:40,970
good place to get talk to people and get

508
00:22:40,970 --> 00:22:43,429
very helpful insights on what the

509
00:22:43,429 --> 00:22:44,510
hardware community is doing at the

510
00:22:44,510 --> 00:22:47,600
moment thanks for your turns and type of

511
00:22:47,600 --> 00:23:11,840
questions at least a bit so do I have an

512
00:23:11,840 --> 00:23:13,639
answer for the licensing question and a

513
00:23:13,639 --> 00:23:17,690
licensing question essentially is we

514
00:23:17,690 --> 00:23:20,450
know that permissive licenses work so

515
00:23:20,450 --> 00:23:22,909
that's why we have a lot of MIT usually

516
00:23:22,909 --> 00:23:26,450
licensed cores around we also know that

517
00:23:26,450 --> 00:23:30,139
copyleft licenses are still written in a

518
00:23:30,139 --> 00:23:32,149
way that is not entirely clear what they

519
00:23:32,149 --> 00:23:35,269
mean to hardware designs I don't have an

520
00:23:35,269 --> 00:23:37,370
answer to that I've been talking to many

521
00:23:37,370 --> 00:23:41,299
people and we add at 44 - that actually

522
00:23:41,299 --> 00:23:44,899
runs Libra cores have been in contact

523
00:23:44,899 --> 00:23:48,019
with many people and we're trying to

524
00:23:48,019 --> 00:23:49,639
figure this out so if you already have

525
00:23:49,639 --> 00:23:51,980
an idea in this direction come talk to

526
00:23:51,980 --> 00:23:52,330
me

527
00:23:52,330 --> 00:23:55,279
essentially what things are looking like

528
00:23:55,279 --> 00:23:58,130
so gplv3 was written with hardware kind

529
00:23:58,130 --> 00:24:00,799
of in their mind it's not clear of that

530
00:24:00,799 --> 00:24:03,649
actually what they intended it to be is

531
00:24:03,649 --> 00:24:07,370
actually working out so let's see so but

532
00:24:07,370 --> 00:24:09,919
we definitely see a need for a copyleft

533
00:24:09,919 --> 00:24:12,769
license but the problem is how do you

534
00:24:12,769 --> 00:24:15,500
find boundaries of a copyleft license in

535
00:24:15,500 --> 00:24:17,090
a hardware design and until that's

536
00:24:17,090 --> 00:24:20,210
figured out I think the safest way stay

537
00:24:20,210 --> 00:24:22,250
permissive if you want to people to make

538
00:24:22,250 --> 00:24:23,510
sure that they're able to use it

539
00:24:23,510 --> 00:24:26,330
everything else you need to probably

540
00:24:26,330 --> 00:24:28,639
amend the license or make explicitly

541
00:24:28,639 --> 00:24:31,879
clear in your licensing what you mean

542
00:24:31,879 --> 00:24:34,580
where your copyleft should have a

543
00:24:34,580 --> 00:24:35,490
boundary

544
00:24:35,490 --> 00:24:40,919
okay yes there is the CERN open hardware

545
00:24:40,919 --> 00:24:44,039
license the thing is digital hardware

546
00:24:44,039 --> 00:24:46,049
designs and I think we might have a

547
00:24:46,049 --> 00:24:49,049
couple more additions to that chip

548
00:24:49,049 --> 00:24:51,299
designs are a bit special because there

549
00:24:51,299 --> 00:24:53,700
are kind of special from the legal

550
00:24:53,700 --> 00:24:55,799
framework that you can use which is

551
00:24:55,799 --> 00:24:58,110
different from PCB designs or 3d prints

552
00:24:58,110 --> 00:24:59,909
and things like that so there is some

553
00:24:59,909 --> 00:25:01,529
overlap in this certain open hardware

554
00:25:01,529 --> 00:25:04,200
license with unlicensed that would work

555
00:25:04,200 --> 00:25:05,760
perfectly fine for digital hardware

556
00:25:05,760 --> 00:25:08,159
designs it's not a perfect fit yet so

557
00:25:08,159 --> 00:25:10,950
we're looking how to kind of get this

558
00:25:10,950 --> 00:25:13,309
figured out

559
00:25:18,110 --> 00:25:23,080
[Applause]

