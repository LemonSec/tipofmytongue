1
00:00:04,560 --> 00:00:08,400
I represent to you today ops II ops is a

2
00:00:08,400 --> 00:00:11,549
tool to manage client in heterogeneous

3
00:00:11,549 --> 00:00:15,000
environment in modernity it's very

4
00:00:15,000 --> 00:00:16,379
common that you do not have just one

5
00:00:16,379 --> 00:00:17,490
operating system that does everything

6
00:00:17,490 --> 00:00:19,560
that you have a multitude of operating

7
00:00:19,560 --> 00:00:21,020
systems it all need to be managed and

8
00:00:21,020 --> 00:00:23,400
depth should be managing and a very

9
00:00:23,400 --> 00:00:25,680
efficient way and Ops is the tool to do

10
00:00:25,680 --> 00:00:30,240
exactly dad first who's this guy

11
00:00:30,240 --> 00:00:31,920
speaking to you my name is Nico

12
00:00:31,920 --> 00:00:35,040
veslovsky I'm from Germany I would

13
00:00:35,040 --> 00:00:37,440
consider myself a very patient at Python

14
00:00:37,440 --> 00:00:40,710
developer and I'm think I'm lucky enough

15
00:00:40,710 --> 00:00:42,930
to say that I'm doing this also as my

16
00:00:42,930 --> 00:00:47,180
main job and not just as a hobby I have

17
00:00:47,180 --> 00:00:49,410
six years as a professional Python

18
00:00:49,410 --> 00:00:53,280
developer for now and my company is the

19
00:00:53,280 --> 00:00:56,969
company behind the - ops II we're based

20
00:00:56,969 --> 00:01:01,590
in Mainz my job there is maintaining and

21
00:01:01,590 --> 00:01:04,080
developing up to you I'm very focused on

22
00:01:04,080 --> 00:01:05,759
the next side we also have colleagues

23
00:01:05,759 --> 00:01:07,020
that are more focused on the window side

24
00:01:07,020 --> 00:01:09,180
but I'm mostly the next guy and

25
00:01:09,180 --> 00:01:10,320
responsible for the server side

26
00:01:10,320 --> 00:01:12,630
implementation and also managing the

27
00:01:12,630 --> 00:01:16,290
Linux client agent and also my job

28
00:01:16,290 --> 00:01:17,520
involves a lot of customizing for

29
00:01:17,520 --> 00:01:20,610
customers to adjust it ops you to their

30
00:01:20,610 --> 00:01:25,680
needs when I'm talking about ops II I

31
00:01:25,680 --> 00:01:26,610
first want to give you a small

32
00:01:26,610 --> 00:01:28,080
introduction to the two because I think

33
00:01:28,080 --> 00:01:30,390
many people don't don't know ops the end

34
00:01:30,390 --> 00:01:31,590
that's why I'm talking here because I

35
00:01:31,590 --> 00:01:32,880
think it's a very cool tool and you

36
00:01:32,880 --> 00:01:39,030
should take it into your tool belt ops

37
00:01:39,030 --> 00:01:42,390
II has roots ranging back way back into

38
00:01:42,390 --> 00:01:44,369
the 90s when there was windows for

39
00:01:44,369 --> 00:01:48,380
workgroups I never worked with it but I

40
00:01:48,380 --> 00:01:53,880
have I have colleagues who did and when

41
00:01:53,880 --> 00:01:56,610
you be started

42
00:01:56,610 --> 00:01:59,040
they were like a small software shop we

43
00:01:59,040 --> 00:02:01,920
focus on geo information systems and

44
00:02:01,920 --> 00:02:05,100
system administration and one of the

45
00:02:05,100 --> 00:02:07,829
customers wanted to deploy windows for

46
00:02:07,829 --> 00:02:11,239
workgroups in a large environment and

47
00:02:11,239 --> 00:02:14,540
Despero ops ii started back then

48
00:02:14,540 --> 00:02:17,850
these machines were already installed in

49
00:02:17,850 --> 00:02:21,210
an effort via bootp some of you might

50
00:02:21,210 --> 00:02:23,100
know bootp for others that don't know

51
00:02:23,100 --> 00:02:25,890
whoopee it's kind of a princess or for

52
00:02:25,890 --> 00:02:30,870
PXE booting and the installation was

53
00:02:30,870 --> 00:02:34,530
quite simple all you had to do was copy

54
00:02:34,530 --> 00:02:37,530
fire to the new machine and maybe

55
00:02:37,530 --> 00:02:40,200
instruct him and you're done you could

56
00:02:40,200 --> 00:02:42,270
put your system pretty easy compared to

57
00:02:42,270 --> 00:02:45,990
nowadays the server the server side back

58
00:02:45,990 --> 00:02:51,780
in the days was Solaris and that's wrong

59
00:02:51,780 --> 00:02:55,160
with samba already as Samba was used to

60
00:02:55,160 --> 00:02:57,420
give to the clients access to the files

61
00:02:57,420 --> 00:03:02,640
they need for installation so it's been

62
00:03:02,640 --> 00:03:05,940
quite a while since then and obviously

63
00:03:05,940 --> 00:03:08,940
moved around quite a bit it gained more

64
00:03:08,940 --> 00:03:10,860
features for software deployment just

65
00:03:10,860 --> 00:03:13,200
copying and extracting files isn't

66
00:03:13,200 --> 00:03:15,720
nearly enough nowadays to manage the

67
00:03:15,720 --> 00:03:21,390
system the system grew and get more

68
00:03:21,390 --> 00:03:23,640
features to to do in centralized

69
00:03:23,640 --> 00:03:29,270
management of clients we're back from

70
00:03:29,270 --> 00:03:32,130
having some people running around and

71
00:03:32,130 --> 00:03:34,410
booting the clients we now want to do is

72
00:03:34,410 --> 00:03:36,150
all remote be at one point we connect to

73
00:03:36,150 --> 00:03:39,720
and then say ok I deploy the first

74
00:03:39,720 --> 00:03:42,420
management interface we had they confer

75
00:03:42,420 --> 00:03:44,310
they edited config files directly on the

76
00:03:44,310 --> 00:03:46,650
servers that's something nobody would

77
00:03:46,650 --> 00:03:48,900
think about today but you know that's

78
00:03:48,900 --> 00:03:52,380
that's how it was back then and the

79
00:03:52,380 --> 00:03:55,110
server side moved from Solaris to Debian

80
00:03:55,110 --> 00:03:59,850
first and in 2004 ops II saw its first

81
00:03:59,850 --> 00:04:03,420
public release obviously was open source

82
00:04:03,420 --> 00:04:05,580
from the beginning so if he knew that

83
00:04:05,580 --> 00:04:07,980
there was the company providing shut the

84
00:04:07,980 --> 00:04:10,950
zaption system you could just ask him

85
00:04:10,950 --> 00:04:12,570
and every send you a CD with the source

86
00:04:12,570 --> 00:04:14,930
code on it

87
00:04:16,570 --> 00:04:18,890
when we are looking at obscene now

88
00:04:18,890 --> 00:04:23,180
things are a little bit more modern the

89
00:04:23,180 --> 00:04:24,620
servers running Linux

90
00:04:24,620 --> 00:04:27,410
we don't just support Debian we support

91
00:04:27,410 --> 00:04:31,310
a whole range of systems one server runs

92
00:04:31,310 --> 00:04:35,060
a web service that is accessed by all

93
00:04:35,060 --> 00:04:38,120
the clients to communicate and for

94
00:04:38,120 --> 00:04:39,620
example to see if there is any

95
00:04:39,620 --> 00:04:41,210
installation that needs to be done or if

96
00:04:41,210 --> 00:04:42,800
you're an administrator you can check

97
00:04:42,800 --> 00:04:45,740
the service to see what software is

98
00:04:45,740 --> 00:04:47,360
installed or you can set something to

99
00:04:47,360 --> 00:04:49,130
install on a specific client or

100
00:04:49,130 --> 00:04:52,240
something like that we still use Samba

101
00:04:52,240 --> 00:04:57,470
samba reliable project for us and some

102
00:04:57,470 --> 00:04:59,810
reserved install files just like back in

103
00:04:59,810 --> 00:05:02,600
the days the management afraid interface

104
00:05:02,600 --> 00:05:05,660
nowadays is Java if you want a graphical

105
00:05:05,660 --> 00:05:08,180
interface if you don't there are various

106
00:05:08,180 --> 00:05:12,440
other options like Maya and access not a

107
00:05:12,440 --> 00:05:15,620
snitch not to focus today and also the

108
00:05:15,620 --> 00:05:18,560
clients we also had one version of

109
00:05:18,560 --> 00:05:20,900
Windows we supported initially nowadays

110
00:05:20,900 --> 00:05:22,160
we support a whole range of Windows

111
00:05:22,160 --> 00:05:25,250
versions and of course since few years

112
00:05:25,250 --> 00:05:27,590
we also have Linux support was something

113
00:05:27,590 --> 00:05:30,560
I really enjoy and something I'm kind of

114
00:05:30,560 --> 00:05:32,540
a bit proud of because the system it was

115
00:05:32,540 --> 00:05:34,010
initially developed to just manage

116
00:05:34,010 --> 00:05:36,470
Windows clients and it was quite a road

117
00:05:36,470 --> 00:05:38,229
to get there to have the same codebase

118
00:05:38,229 --> 00:05:42,010
to be ready to also manage the next side

119
00:05:42,010 --> 00:05:45,710
so if you want to make photos to show

120
00:05:45,710 --> 00:05:47,090
and show them to your manager or

121
00:05:47,090 --> 00:05:48,020
something like that

122
00:05:48,020 --> 00:05:51,650
now here the buzzwords to give you over

123
00:05:51,650 --> 00:05:53,630
you what Ops II does we still do

124
00:05:53,630 --> 00:05:56,630
operating system deployments we still

125
00:05:56,630 --> 00:06:00,200
rely on unattended installation I said

126
00:06:00,200 --> 00:06:01,940
before we don't just support windows we

127
00:06:01,940 --> 00:06:05,270
also support Lee notes and you can

128
00:06:05,270 --> 00:06:08,030
nowadays also deploy complete images of

129
00:06:08,030 --> 00:06:11,419
your systems if this is what you fancy

130
00:06:11,419 --> 00:06:13,040
because an unattended installation may

131
00:06:13,040 --> 00:06:15,770
take you too long or it's not working

132
00:06:15,770 --> 00:06:17,360
good enough for what you are wanting to

133
00:06:17,360 --> 00:06:19,370
do because maybe some software is hard

134
00:06:19,370 --> 00:06:23,800
to install in there unattended way

135
00:06:24,099 --> 00:06:25,849
software deployment

136
00:06:25,849 --> 00:06:28,550
yeah that's it surfing because just an

137
00:06:28,550 --> 00:06:29,780
operating system usually isn't

138
00:06:29,780 --> 00:06:31,460
enough if you have wanted something

139
00:06:31,460 --> 00:06:33,590
working with your system you also need

140
00:06:33,590 --> 00:06:35,450
software on that machine there's

141
00:06:35,450 --> 00:06:40,010
something a topsy also does and if they

142
00:06:40,010 --> 00:06:41,540
are software yeah we want to configure

143
00:06:41,540 --> 00:06:43,820
it so obviously also can be used for a

144
00:06:43,820 --> 00:06:48,020
configuration management aspect to make

145
00:06:48,020 --> 00:06:50,630
everything complete we also have inhabit

146
00:06:50,630 --> 00:06:52,550
software inventory so that we know what

147
00:06:52,550 --> 00:06:54,560
has installed on our clients and what

148
00:06:54,560 --> 00:06:56,570
software is installed the hopper is

149
00:06:56,570 --> 00:06:58,840
important mostly for the window side

150
00:06:58,840 --> 00:07:01,760
because if you want to deploy an

151
00:07:01,760 --> 00:07:04,040
operating system you usually need

152
00:07:04,040 --> 00:07:07,550
drivers for systems and the easiest way

153
00:07:07,550 --> 00:07:11,360
to deploy the right drivers is to know

154
00:07:11,360 --> 00:07:16,900
what happens inside your computer

155
00:07:20,230 --> 00:07:24,170
how does opsi architecture look like can

156
00:07:24,170 --> 00:07:25,130
everyone read the slides

157
00:07:25,130 --> 00:07:28,610
I hope so if not there I uploaded them

158
00:07:28,610 --> 00:07:32,000
to the first M page yesterday so you can

159
00:07:32,000 --> 00:07:37,130
look along there on the upper side we

160
00:07:37,130 --> 00:07:39,470
have some various clients that connect

161
00:07:39,470 --> 00:07:41,600
to the web service shown below

162
00:07:41,600 --> 00:07:44,030
yes of course management interface we

163
00:07:44,030 --> 00:07:46,820
have an agent so op C is in system that

164
00:07:46,820 --> 00:07:48,980
relies on an agent to work there's not

165
00:07:48,980 --> 00:07:52,100
an agentless system and the upper right

166
00:07:52,100 --> 00:07:55,280
side you will see the boot image the

167
00:07:55,280 --> 00:07:56,930
boot image is what we use to prepare a

168
00:07:56,930 --> 00:07:58,880
client for the installation of a writing

169
00:07:58,880 --> 00:08:01,370
system so client will boot over PXE and

170
00:08:01,370 --> 00:08:02,930
to that boot image the boot image will

171
00:08:02,930 --> 00:08:06,260
prepare for example the hard drive maybe

172
00:08:06,260 --> 00:08:08,980
create partitions or something like that

173
00:08:08,980 --> 00:08:11,380
and then we'll have the insulation over

174
00:08:11,380 --> 00:08:14,570
to nana-chan installer this could be

175
00:08:14,570 --> 00:08:17,090
like what you will find when you're

176
00:08:17,090 --> 00:08:20,060
setting up it burn to a freewheel and

177
00:08:20,060 --> 00:08:24,410
USB stick or something like that on the

178
00:08:24,410 --> 00:08:29,530
server side that's civil popular we have

179
00:08:29,530 --> 00:08:32,390
some back-end such stored data you can

180
00:08:32,390 --> 00:08:35,330
rely on a file or MySQL whatever is your

181
00:08:35,330 --> 00:08:42,049
liking and most of the things we have on

182
00:08:42,049 --> 00:08:43,820
the server side is written in Python and

183
00:08:43,820 --> 00:08:46,430
yeah that's where I come into play as I

184
00:08:46,430 --> 00:08:48,380
said before I'm very patient Python

185
00:08:48,380 --> 00:08:51,800
developers so I had my fingers and most

186
00:08:51,800 --> 00:08:53,810
of the components we have on the server

187
00:08:53,810 --> 00:08:55,959
side

188
00:08:58,080 --> 00:09:01,120
to take more specific look on the server

189
00:09:01,120 --> 00:09:05,560
I said before we have a web service that

190
00:09:05,560 --> 00:09:08,640
speaks JSON RPC will I rely heavily on

191
00:09:08,640 --> 00:09:11,230
standards to make exchange with

192
00:09:11,230 --> 00:09:14,050
different systems easy so if you know

193
00:09:14,050 --> 00:09:16,390
how to connect your interface via JSON

194
00:09:16,390 --> 00:09:20,560
RPC it's it's easy to get access to the

195
00:09:20,560 --> 00:09:26,590
observer we still rely on Zomba I said

196
00:09:26,590 --> 00:09:28,630
before summer provides the the

197
00:09:28,630 --> 00:09:30,310
installation files that the clients then

198
00:09:30,310 --> 00:09:33,660
we'll access during an installation and

199
00:09:33,660 --> 00:09:36,520
if you want to use Ops II to deploy

200
00:09:36,520 --> 00:09:40,060
brain systems we usually have a DHCP and

201
00:09:40,060 --> 00:09:42,730
TFTP D on a server along with a special

202
00:09:42,730 --> 00:09:44,860
component that we call the op CPX econ

203
00:09:44,860 --> 00:09:49,420
50 debt is used to write named files

204
00:09:49,420 --> 00:09:50,440
named pipes

205
00:09:50,440 --> 00:09:55,270
excuse me please these name pipes will

206
00:09:55,270 --> 00:09:56,770
then be accessed by a client that looks

207
00:09:56,770 --> 00:09:59,310
for a bootable media over a pig's ear

208
00:09:59,310 --> 00:10:03,340
and the OP CPX econ 50 writes the pipe

209
00:10:03,340 --> 00:10:06,190
only when it's wrapped so we have the

210
00:10:06,190 --> 00:10:09,220
situation that the client will boot with

211
00:10:09,220 --> 00:10:11,140
depth configuration that is given only

212
00:10:11,140 --> 00:10:13,990
once so if you you can let your client

213
00:10:13,990 --> 00:10:16,330
to just boot order Network and if

214
00:10:16,330 --> 00:10:18,430
there's nothing to do he will just

215
00:10:18,430 --> 00:10:21,490
continue boot usually starting the boot

216
00:10:21,490 --> 00:10:22,570
from the first hard drive or something

217
00:10:22,570 --> 00:10:24,670
like that but if you want to set

218
00:10:24,670 --> 00:10:27,130
something specific the opposite Peaks II

219
00:10:27,130 --> 00:10:29,320
kind of company takes care of that and I

220
00:10:29,320 --> 00:10:31,030
tell the client for example to load a

221
00:10:31,030 --> 00:10:34,420
specific boot image which then execute

222
00:10:34,420 --> 00:10:38,069
whatever the Pooh dementia does

223
00:10:39,430 --> 00:10:42,379
on a client side we have a multitude of

224
00:10:42,379 --> 00:10:45,350
clients we have a graphical management

225
00:10:45,350 --> 00:10:47,089
interface written in Java called you

226
00:10:47,089 --> 00:10:51,560
can't forget this will run on the client

227
00:10:51,560 --> 00:10:52,790
side we have the boot image I managed

228
00:10:52,790 --> 00:10:56,750
before and yeah we have that client that

229
00:10:56,750 --> 00:10:59,959
we are running on the system's the

230
00:10:59,959 --> 00:11:03,350
opposite client agent is usually

231
00:11:03,350 --> 00:11:04,699
registered as a service on that client

232
00:11:04,699 --> 00:11:06,500
and takes care of the communication

233
00:11:06,500 --> 00:11:09,680
between the server and the client it

234
00:11:09,680 --> 00:11:11,420
usually checks if work needs to be done

235
00:11:11,420 --> 00:11:15,829
you can configure in various ways when

236
00:11:15,829 --> 00:11:17,720
it should do these checks for example

237
00:11:17,720 --> 00:11:20,180
you want to do it as a startup to make

238
00:11:20,180 --> 00:11:23,269
sure when the venous system starts you

239
00:11:23,269 --> 00:11:25,610
would get a new software installed or

240
00:11:25,610 --> 00:11:27,110
there can be things like timers that

241
00:11:27,110 --> 00:11:31,550
trigger in a regular interval if the

242
00:11:31,550 --> 00:11:36,040
server has anything to say to the client

243
00:11:36,040 --> 00:11:38,240
because we are running as a service we

244
00:11:38,240 --> 00:11:40,879
can also use this to trigger events from

245
00:11:40,879 --> 00:11:43,130
the server side if you want to say ok I

246
00:11:43,130 --> 00:11:47,990
just found a security update and I need

247
00:11:47,990 --> 00:11:49,220
to deploy this patch to all my machines

248
00:11:49,220 --> 00:11:51,889
I can trigger from a server that the

249
00:11:51,889 --> 00:11:54,470
deployment will be done and no there's

250
00:11:54,470 --> 00:11:58,310
no need for me to wait until the client

251
00:11:58,310 --> 00:11:59,839
checks again at the server if there's

252
00:11:59,839 --> 00:12:02,829
something to be done

253
00:12:03,350 --> 00:12:07,310
to make all this work we have to called

254
00:12:07,310 --> 00:12:09,440
up the script that will take care of the

255
00:12:09,440 --> 00:12:18,530
installation the opposite script reads

256
00:12:18,530 --> 00:12:21,560
the script describing what should be

257
00:12:21,560 --> 00:12:24,500
done from this amber share I mentioned

258
00:12:24,500 --> 00:12:27,470
earlier and then we'll execute the steps

259
00:12:27,470 --> 00:12:33,650
you defined to play something on our

260
00:12:33,650 --> 00:12:37,040
Samba share we need to pick an op C

261
00:12:37,040 --> 00:12:40,910
package this is a package that usually

262
00:12:40,910 --> 00:12:42,560
contains the files you want to deploy

263
00:12:42,560 --> 00:12:45,620
along with the script that I mentioned

264
00:12:45,620 --> 00:12:48,470
earlier that will do the processing

265
00:12:48,470 --> 00:12:49,820
where the steps are defined what should

266
00:12:49,820 --> 00:12:53,090
be done this could be as easy as just

267
00:12:53,090 --> 00:12:57,500
okay run a binary or it could be more

268
00:12:57,500 --> 00:12:59,540
complex things like okay patch these

269
00:12:59,540 --> 00:13:03,320
files yeah enter my configuration videos

270
00:13:03,320 --> 00:13:06,830
something like that if you don't want to

271
00:13:06,830 --> 00:13:08,300
deploy any files oh that's sure that's

272
00:13:08,300 --> 00:13:11,300
fine all these parts are then later

273
00:13:11,300 --> 00:13:12,890
compressed into a single archive that

274
00:13:12,890 --> 00:13:14,450
makes it easy to dispute between

275
00:13:14,450 --> 00:13:17,140
different servers and you can also have

276
00:13:17,140 --> 00:13:19,790
easy access to various versions of your

277
00:13:19,790 --> 00:13:23,390
script lying around the archive itself

278
00:13:23,390 --> 00:13:25,880
it's the compressed tar files or still

279
00:13:25,880 --> 00:13:29,480
we are relying on open established tools

280
00:13:29,480 --> 00:13:31,370
to do the things there's no need to

281
00:13:31,370 --> 00:13:35,420
reinvent the wheel here the idea with

282
00:13:35,420 --> 00:13:38,570
these packages has bought a lot from the

283
00:13:38,570 --> 00:13:41,390
Debian project you can define

284
00:13:41,390 --> 00:13:43,220
dependencies and some dependencies and

285
00:13:43,220 --> 00:13:45,710
things like that because before this

286
00:13:45,710 --> 00:13:48,080
this is a very good good two mechanism

287
00:13:48,080 --> 00:13:50,900
that is established there and we want to

288
00:13:50,900 --> 00:13:55,400
use it for our tools these packages you

289
00:13:55,400 --> 00:13:56,990
get will then be extracted onto your

290
00:13:56,990 --> 00:13:59,030
servers so the clients can access the

291
00:13:59,030 --> 00:14:03,590
files on the SMP share so in usually

292
00:14:03,590 --> 00:14:06,110
your setup consists of the place where

293
00:14:06,110 --> 00:14:07,760
you build your packages you write your

294
00:14:07,760 --> 00:14:10,010
scripts and so on and then can deploy it

295
00:14:10,010 --> 00:14:11,810
to production and just by compete by

296
00:14:11,810 --> 00:14:13,160
copying the file and then they okay

297
00:14:13,160 --> 00:14:15,410
install it there I'm pretty

298
00:14:15,410 --> 00:14:18,040
straightforward

299
00:14:18,459 --> 00:14:24,029
as I mention before there's oxy script

300
00:14:24,029 --> 00:14:27,399
option script is a language developed

301
00:14:27,399 --> 00:14:31,750
for the absurd project depth focus on

302
00:14:31,750 --> 00:14:34,629
the tasks that an administrator may may

303
00:14:34,629 --> 00:14:37,720
face when he is deploying things to

304
00:14:37,720 --> 00:14:40,000
client and it could be stuff like for

305
00:14:40,000 --> 00:14:41,560
example on Windows you want to edit edit

306
00:14:41,560 --> 00:14:44,019
the registry as a private developer I

307
00:14:44,019 --> 00:14:46,750
would know what I should do with Python

308
00:14:46,750 --> 00:14:49,720
but I have to admit that it's not a most

309
00:14:49,720 --> 00:14:51,220
straightforward way usually they do

310
00:14:51,220 --> 00:14:54,670
things and I'm glad there's there's

311
00:14:54,670 --> 00:14:57,970
obvious script for tasks like that off

312
00:14:57,970 --> 00:15:01,720
the script that's the syntax tailor to

313
00:15:01,720 --> 00:15:04,120
the tasks that should be done for

314
00:15:04,120 --> 00:15:06,550
example the registry but it's also open

315
00:15:06,550 --> 00:15:10,420
to Rio reuse existing solutions so if

316
00:15:10,420 --> 00:15:12,490
you have for example a a batch script

317
00:15:12,490 --> 00:15:14,079
written that does the task you want to

318
00:15:14,079 --> 00:15:15,670
do and you just want to deploy it on

319
00:15:15,670 --> 00:15:16,959
your service

320
00:15:16,959 --> 00:15:19,240
yeah sure use op C and just call the

321
00:15:19,240 --> 00:15:21,720
external script

322
00:15:23,260 --> 00:15:25,510
offices script is also the name of the

323
00:15:25,510 --> 00:15:29,200
interpreter when opsi started the Finca

324
00:15:29,200 --> 00:15:32,140
was called op c winced which which dot

325
00:15:32,140 --> 00:15:34,209
for op c windows installer and there's

326
00:15:34,209 --> 00:15:37,029
the the windows heritage there but since

327
00:15:37,029 --> 00:15:38,920
we also managing Linux client with it we

328
00:15:38,920 --> 00:15:40,720
felt that we should rename it to op C

329
00:15:40,720 --> 00:15:42,490
script because it's a more general

330
00:15:42,490 --> 00:15:49,180
approach so there's a talk descriptions

331
00:15:49,180 --> 00:15:52,660
there I want to look at how can handling

332
00:15:52,660 --> 00:15:54,279
Windows and Linux be done as though

333
00:15:54,279 --> 00:15:56,380
you've learned about a system now and I

334
00:15:56,380 --> 00:15:59,200
want to focus a little bit more on the

335
00:15:59,200 --> 00:16:02,649
tasks that may may are at hand the first

336
00:16:02,649 --> 00:16:04,110
thing is is it a good idea that we have

337
00:16:04,110 --> 00:16:08,200
one script in both worlds okay I can

338
00:16:08,200 --> 00:16:10,540
give not given gives you a good answer

339
00:16:10,540 --> 00:16:12,640
the depth I think it depends on the task

340
00:16:12,640 --> 00:16:14,800
they lay at hand on the things that you

341
00:16:14,800 --> 00:16:18,310
need to do my experience once the

342
00:16:18,310 --> 00:16:20,230
package gets made sure and you're not

343
00:16:20,230 --> 00:16:22,480
changing it that much it's easier to

344
00:16:22,480 --> 00:16:24,640
integrate both the links in the Windows

345
00:16:24,640 --> 00:16:27,070
version into one package and then enjoy

346
00:16:27,070 --> 00:16:29,740
that in for example your dependencies

347
00:16:29,740 --> 00:16:32,410
you just depend on one package and it's

348
00:16:32,410 --> 00:16:34,120
you don't have to think about this is

349
00:16:34,120 --> 00:16:36,640
deploying on the Windows or Linux box it

350
00:16:36,640 --> 00:16:39,060
just works

351
00:16:41,360 --> 00:16:47,100
it of course can be done and when you're

352
00:16:47,100 --> 00:16:49,260
facing a program like for example I took

353
00:16:49,260 --> 00:16:52,440
your thunderbird that you want to

354
00:16:52,440 --> 00:16:54,270
distribute in your whole environment you

355
00:16:54,270 --> 00:16:57,450
may face some challenges for windows an

356
00:16:57,450 --> 00:16:59,130
installation is usually quite simple if

357
00:16:59,130 --> 00:17:01,470
the Thunderbird if you have an installer

358
00:17:01,470 --> 00:17:03,270
for you that you can run unattended and

359
00:17:03,270 --> 00:17:05,579
this works from Windows XP to recurrent

360
00:17:05,579 --> 00:17:08,819
Windows 10 and everything works for us

361
00:17:08,819 --> 00:17:12,930
on Windows this easy on Linux things

362
00:17:12,930 --> 00:17:14,430
might get more and more complicated

363
00:17:14,430 --> 00:17:17,670
because as you might know Linux is not

364
00:17:17,670 --> 00:17:20,730
Linux the Debian behaves different from

365
00:17:20,730 --> 00:17:26,069
for example a Susan Susan yeah so we may

366
00:17:26,069 --> 00:17:28,910
may have to the software we want in the

367
00:17:28,910 --> 00:17:31,200
repositories of the distribution so we

368
00:17:31,200 --> 00:17:33,300
can just rely on for example app capture

369
00:17:33,300 --> 00:17:36,420
or super to install it everything's fine

370
00:17:36,420 --> 00:17:37,980
but then again we have to think about

371
00:17:37,980 --> 00:17:40,350
okay the version we want to deploy is

372
00:17:40,350 --> 00:17:42,390
their diversion we require we may have

373
00:17:42,390 --> 00:17:44,610
some third-party plugins that require a

374
00:17:44,610 --> 00:17:46,170
very specific version of that software

375
00:17:46,170 --> 00:17:49,700
and the API may break in future versions

376
00:17:49,700 --> 00:17:53,070
so we may want to deploy our own work

377
00:17:53,070 --> 00:17:58,410
and yeah plugins are also a thing we can

378
00:17:58,410 --> 00:18:00,390
deploy the software sure the last thing

379
00:18:00,390 --> 00:18:03,120
we have to do and usually the part that

380
00:18:03,120 --> 00:18:05,670
takes the most time is we want to

381
00:18:05,670 --> 00:18:10,770
configure our system so by along Linux

382
00:18:10,770 --> 00:18:12,840
most things are written into files on

383
00:18:12,840 --> 00:18:15,870
Windows we often have registry entries

384
00:18:15,870 --> 00:18:17,610
that also will change to behavior of

385
00:18:17,610 --> 00:18:19,350
your application and may be configured

386
00:18:19,350 --> 00:18:22,410
in advance so that a user just needs to

387
00:18:22,410 --> 00:18:24,480
start a fire from the bird and then we

388
00:18:24,480 --> 00:18:25,950
have this mail account automatically

389
00:18:25,950 --> 00:18:29,270
connect to the T Network

390
00:18:36,030 --> 00:18:40,570
so - chief that we can deploy for

391
00:18:40,570 --> 00:18:45,910
example the funny bird very systems we

392
00:18:45,910 --> 00:18:50,140
should we should check something's and

393
00:18:50,140 --> 00:18:51,940
this is something an some examples I

394
00:18:51,940 --> 00:18:55,300
want to show you how things are looking

395
00:18:55,300 --> 00:18:57,580
with opposite script this is actual part

396
00:18:57,580 --> 00:19:00,520
of an op C script to check the

397
00:19:00,520 --> 00:19:03,900
architecture because it may be that I

398
00:19:03,900 --> 00:19:06,190
face an architecture that I do not need

399
00:19:06,190 --> 00:19:09,670
to need to support or something like

400
00:19:09,670 --> 00:19:12,190
that or did I don't that I can't support

401
00:19:12,190 --> 00:19:14,290
because the program I want to deploy

402
00:19:14,290 --> 00:19:16,540
doesn't support it maybe I have compiled

403
00:19:16,540 --> 00:19:18,040
it it's just the binary and it only

404
00:19:18,040 --> 00:19:23,920
works on a 64-bit system the boat

405
00:19:23,920 --> 00:19:25,690
powered on the upper right that's the

406
00:19:25,690 --> 00:19:27,640
function get system type it will either

407
00:19:27,640 --> 00:19:31,210
return me that is in X 68 system or this

408
00:19:31,210 --> 00:19:34,870
64-bit system so checks to write are

409
00:19:34,870 --> 00:19:37,180
very easy if you are working with people

410
00:19:37,180 --> 00:19:41,560
who are not programmers or do not have a

411
00:19:41,560 --> 00:19:43,930
deep understanding of how program works

412
00:19:43,930 --> 00:19:46,390
for them it's very easy to work with

413
00:19:46,390 --> 00:19:49,870
these parts also check on what system

414
00:19:49,870 --> 00:19:56,230
type you are running in the same fashion

415
00:19:56,230 --> 00:19:58,900
we can do we can then detect our

416
00:19:58,900 --> 00:20:01,030
operating system that's important if you

417
00:20:01,030 --> 00:20:02,530
want to make sure that the appropriate

418
00:20:02,530 --> 00:20:08,470
calls are made there's a function

419
00:20:08,470 --> 00:20:08,890
ghetto-ass

420
00:20:08,890 --> 00:20:11,440
that will either return I'm running on

421
00:20:11,440 --> 00:20:14,130
Linux or I'm running on Windows and team

422
00:20:14,130 --> 00:20:18,700
but as I said earlier Linux is not Linux

423
00:20:18,700 --> 00:20:21,220
and the same goes for Windows

424
00:20:21,220 --> 00:20:23,920
we have various versions of Windows

425
00:20:23,920 --> 00:20:25,450
nowadays running around the latest being

426
00:20:25,450 --> 00:20:29,680
Windows 10 and so we may want to detect

427
00:20:29,680 --> 00:20:33,330
what Windows release we are running on

428
00:20:35,040 --> 00:20:37,390
as you might guess there's also a

429
00:20:37,390 --> 00:20:41,470
function for that the gate Emma's

430
00:20:41,470 --> 00:20:46,450
version intro will return us the AP that

431
00:20:46,450 --> 00:20:49,720
the windows reports back there's

432
00:20:49,720 --> 00:20:54,460
something like six free for current

433
00:20:54,460 --> 00:20:58,750
Windows 8 the six usually the the MT 6

434
00:20:58,750 --> 00:21:01,660
is the windows underlying kernel type

435
00:21:01,660 --> 00:21:05,320
and one thing we faced when Windows 10

436
00:21:05,320 --> 00:21:06,910
was introduced was there at first

437
00:21:06,910 --> 00:21:11,940
reported back from the API as 6.4 but

438
00:21:11,940 --> 00:21:15,250
then the Microsoft and changed it to

439
00:21:15,250 --> 00:21:18,700
just report back ATM and most checks

440
00:21:18,700 --> 00:21:22,180
that were made what ap version a my own

441
00:21:22,180 --> 00:21:24,490
just checked the first first part in

442
00:21:24,490 --> 00:21:27,220
sorry for ok windows API version 1 and a

443
00:21:27,220 --> 00:21:30,730
lot of things broke for us so if you

444
00:21:30,730 --> 00:21:32,020
want to correctly handle this there's

445
00:21:32,020 --> 00:21:34,090
something like compare dots and braided

446
00:21:34,090 --> 00:21:37,330
numbers we are can see if you're running

447
00:21:37,330 --> 00:21:39,700
incorrectly on Windows 10 version or if

448
00:21:39,700 --> 00:21:41,200
you're lying and running on lower

449
00:21:41,200 --> 00:21:44,590
version windows 10 also has new

450
00:21:44,590 --> 00:21:45,580
challenges for us

451
00:21:45,580 --> 00:21:48,880
Microsoft this it's one system and you

452
00:21:48,880 --> 00:21:51,730
you don't see any any differences

453
00:21:51,730 --> 00:21:53,350
it just works it will be it will be

454
00:21:53,350 --> 00:21:54,910
really the last windows ever released

455
00:21:54,910 --> 00:21:58,210
but internally they have different

456
00:21:58,210 --> 00:22:00,190
releases and you can also check for this

457
00:22:00,190 --> 00:22:02,680
for this release ID with the function

458
00:22:02,680 --> 00:22:05,920
mentioned below because of course they

459
00:22:05,920 --> 00:22:09,700
change the underlying api's between

460
00:22:09,700 --> 00:22:11,440
these versions and you will only channel

461
00:22:11,440 --> 00:22:13,590
there

462
00:22:14,820 --> 00:22:18,269
what we have for the window sides of

463
00:22:18,269 --> 00:22:23,399
course they are also for dinner side we

464
00:22:23,399 --> 00:22:24,899
can check what we're me running for

465
00:22:24,899 --> 00:22:27,450
running on what what distribution are we

466
00:22:27,450 --> 00:22:29,309
are running on so that we can call the

467
00:22:29,309 --> 00:22:33,240
appropriate use tools if we need to I

468
00:22:33,240 --> 00:22:35,070
think it's also very straight for to

469
00:22:35,070 --> 00:22:38,580
understand we have a switch case and in

470
00:22:38,580 --> 00:22:41,340
this case and we just check do we have

471
00:22:41,340 --> 00:22:44,100
Debian Rachael azuz and then work

472
00:22:44,100 --> 00:22:45,440
accordingly to Det

473
00:22:45,440 --> 00:22:49,860
he went most specific information they

474
00:22:49,860 --> 00:22:51,740
are also a function for that of course

475
00:22:51,740 --> 00:22:54,629
that's similar to the one from the

476
00:22:54,629 --> 00:22:58,519
window side so that you don't have to

477
00:22:58,519 --> 00:23:04,409
learn everything from a new when we are

478
00:23:04,409 --> 00:23:06,600
working with Linux and we are relying on

479
00:23:06,600 --> 00:23:07,919
the package manager it is something I

480
00:23:07,919 --> 00:23:12,539
usually do when using obscene something

481
00:23:12,539 --> 00:23:14,820
I stumble stumble upon in the beginning

482
00:23:14,820 --> 00:23:17,370
quite often was that there might be a

483
00:23:17,370 --> 00:23:19,200
package lock involved if you try to

484
00:23:19,200 --> 00:23:23,909
install your packages so the package

485
00:23:23,909 --> 00:23:24,389
manager

486
00:23:24,389 --> 00:23:26,490
locked the resources so no other process

487
00:23:26,490 --> 00:23:29,899
can install during that time and yeah

488
00:23:29,899 --> 00:23:32,960
obviously also has ways to handle that

489
00:23:32,960 --> 00:23:36,470
this function also has the nice

490
00:23:36,470 --> 00:23:38,519
possibility to kill the package manager

491
00:23:38,519 --> 00:23:41,820
if the things take too long if are they

492
00:23:41,820 --> 00:23:43,980
okay I need to have this deployment done

493
00:23:43,980 --> 00:23:48,960
in like 10 minutes so I can spend five

494
00:23:48,960 --> 00:23:50,669
minutes of depth waiting for a package

495
00:23:50,669 --> 00:23:53,159
log and if then nothing happens I can

496
00:23:53,159 --> 00:23:55,139
just kill the package manager it's not

497
00:23:55,139 --> 00:23:57,659
very nice but you sometimes have to

498
00:23:57,659 --> 00:24:00,470
resort to things like that

499
00:24:01,920 --> 00:24:05,000
as you have now seen what is possible I

500
00:24:05,000 --> 00:24:08,430
want to give you some best practice that

501
00:24:08,430 --> 00:24:11,910
we usually ploy when writing scripts

502
00:24:11,910 --> 00:24:14,280
that should be running on different

503
00:24:14,280 --> 00:24:18,870
platforms first we first use the op C

504
00:24:18,870 --> 00:24:23,640
script constants like the script path to

505
00:24:23,640 --> 00:24:25,350
watch hard coding paths or something

506
00:24:25,350 --> 00:24:29,280
like where did I install that media put

507
00:24:29,280 --> 00:24:31,650
into variable and change it accordingly

508
00:24:31,650 --> 00:24:34,470
hard coding paths even if you just think

509
00:24:34,470 --> 00:24:36,860
okay I'm just writing this for Linux now

510
00:24:36,860 --> 00:24:39,210
there may be the day when you need to

511
00:24:39,210 --> 00:24:40,350
change audio scripts because you're

512
00:24:40,350 --> 00:24:42,660
hard-coded paths and you nowadays want

513
00:24:42,660 --> 00:24:46,650
to run this on Windows it happens to

514
00:24:46,650 --> 00:24:48,270
make things easier here adoptive script

515
00:24:48,270 --> 00:24:50,160
will do an auto conversion of this

516
00:24:50,160 --> 00:24:51,780
letters in the path so you don't have to

517
00:24:51,780 --> 00:24:53,550
worry about this is a forward slash or

518
00:24:53,550 --> 00:24:56,400
is it a backward slash because lopsy

519
00:24:56,400 --> 00:24:59,100
will handle it for you when the downside

520
00:24:59,100 --> 00:25:01,200
one thing you can't do it with this is

521
00:25:01,200 --> 00:25:04,680
you can't put slashes in filenames if

522
00:25:04,680 --> 00:25:09,090
you want to okay I'm fine with that if

523
00:25:09,090 --> 00:25:10,170
you're using opportunity to mention

524
00:25:10,170 --> 00:25:13,890
systems it's very good idea to use the

525
00:25:13,890 --> 00:25:15,990
functions of super writes because they

526
00:25:15,990 --> 00:25:17,520
usually are cross-platform you don't

527
00:25:17,520 --> 00:25:19,470
have to think about what its system in

528
00:25:19,470 --> 00:25:21,920
Arango running on and they just work

529
00:25:21,920 --> 00:25:24,720
there are some special things like to

530
00:25:24,720 --> 00:25:26,760
read the registry access I mentioned

531
00:25:26,760 --> 00:25:29,070
earlier this of course that nas does not

532
00:25:29,070 --> 00:25:34,160
work on Linux but nobody expected to

533
00:25:34,160 --> 00:25:38,910
also it's a good thing to share your

534
00:25:38,910 --> 00:25:43,080
libraries and talk with others I learned

535
00:25:43,080 --> 00:25:46,140
very very much with just talking to

536
00:25:46,140 --> 00:25:47,550
people and seeing how they are handling

537
00:25:47,550 --> 00:25:51,150
scripts and this is something I think

538
00:25:51,150 --> 00:25:55,460
everyone should do to extend a notch

539
00:25:55,880 --> 00:25:58,160
so if you're not already convinced why

540
00:25:58,160 --> 00:26:03,049
you should maybe use obscene ops works

541
00:26:03,049 --> 00:26:04,820
great in different environments also

542
00:26:04,820 --> 00:26:07,160
environments that may not be up to

543
00:26:07,160 --> 00:26:10,850
today's standards you you may face the

544
00:26:10,850 --> 00:26:13,090
system where you don't have any ns

545
00:26:13,090 --> 00:26:16,490
you can run op C in multiple locations

546
00:26:16,490 --> 00:26:19,160
with just one management management

547
00:26:19,160 --> 00:26:22,490
server that's that's great if you're for

548
00:26:22,490 --> 00:26:23,990
example having a university like this

549
00:26:23,990 --> 00:26:27,460
and you want to have each billing

550
00:26:27,490 --> 00:26:29,390
treatment treat me as a whole ucation

551
00:26:29,390 --> 00:26:32,150
because maybe the science lab for maths

552
00:26:32,150 --> 00:26:34,190
requires something else like the one the

553
00:26:34,190 --> 00:26:36,230
by a lot biologists requires I'm pretty

554
00:26:36,230 --> 00:26:39,860
active you can use op C as a really huge

555
00:26:39,860 --> 00:26:42,919
solution that's okay

556
00:26:42,919 --> 00:26:46,370
op C is very well the trial we use of

557
00:26:46,370 --> 00:26:48,200
see a lot at work we for example

558
00:26:48,200 --> 00:26:52,039
Meredith Jenkins to do automated testing

559
00:26:52,039 --> 00:26:55,400
and part of why that's possibility of

560
00:26:55,400 --> 00:26:58,549
maybe I and you can also extend the API

561
00:26:58,549 --> 00:27:00,530
with your own custom functions if you

562
00:27:00,530 --> 00:27:06,850
know a little bit of patent so what now

563
00:27:06,850 --> 00:27:09,890
if you need to up C and you thought this

564
00:27:09,890 --> 00:27:12,230
wasn't so uninteresting but you here

565
00:27:12,230 --> 00:27:14,330
today I said just try it

566
00:27:14,330 --> 00:27:17,020
have a look share experiences we have

567
00:27:17,020 --> 00:27:22,760
great community of ops users talk to

568
00:27:22,760 --> 00:27:25,159
them talk to us I'm very interested in

569
00:27:25,159 --> 00:27:28,490
feedback and if you're already using op

570
00:27:28,490 --> 00:27:31,820
C why not people try to automate op C a

571
00:27:31,820 --> 00:27:33,500
little bit more and to integrated into

572
00:27:33,500 --> 00:27:35,120
systems this all works because of yeah

573
00:27:35,120 --> 00:27:39,740
the open API we've dead let I want to

574
00:27:39,740 --> 00:27:43,640
give a small small roadmap and what

575
00:27:43,640 --> 00:27:44,620
we're up to

576
00:27:44,620 --> 00:27:47,210
we are wanting to improve the Linux

577
00:27:47,210 --> 00:27:51,799
support even further the administration

578
00:27:51,799 --> 00:27:54,980
tools and do some cleanup and

579
00:27:54,980 --> 00:27:55,700
refactorings

580
00:27:55,700 --> 00:28:00,110
and my personal roadmap lasts lots of

581
00:28:00,110 --> 00:28:02,720
our I want to move more things to get we

582
00:28:02,720 --> 00:28:05,929
started as an company using SVM and I

583
00:28:05,929 --> 00:28:08,179
nowadays when to go to gift and I want

584
00:28:08,179 --> 00:28:09,850
to improve the work of the community

585
00:28:09,850 --> 00:28:11,140
and maybe a provider community

586
00:28:11,140 --> 00:28:13,630
contribute to the License Agreement and

587
00:28:13,630 --> 00:28:15,100
as my times up

588
00:28:15,100 --> 00:28:22,930
yeah yeah I'm still around here if there

589
00:28:22,930 --> 00:28:26,730
are any questions I can't answer now yep

590
00:28:28,060 --> 00:28:31,120
photos is actually not being a sported

591
00:28:31,120 --> 00:28:32,920
much but we just recently had someone

592
00:28:32,920 --> 00:28:36,010
asking for it so I'm looking to it for

593
00:28:36,010 --> 00:28:37,300
the client side I think or for the

594
00:28:37,300 --> 00:28:42,340
server side okay

595
00:28:42,340 --> 00:28:47,350
yeah more questions then

596
00:28:47,350 --> 00:28:56,760
thanks for time thank you

