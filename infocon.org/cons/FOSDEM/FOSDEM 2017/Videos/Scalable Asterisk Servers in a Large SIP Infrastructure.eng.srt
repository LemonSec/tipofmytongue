1
00:00:00,000 --> 00:00:02,840
all right shop next

2
00:00:04,690 --> 00:00:19,360
we have my Jordan senior agent ward okay

3
00:00:19,360 --> 00:00:23,890
all right so are we yeah all right cool

4
00:00:23,890 --> 00:00:26,360
so as I was mentioning when I prepared

5
00:00:26,360 --> 00:00:28,760
whoa when I proposed this Hawk for

6
00:00:28,760 --> 00:00:31,430
FOSDEM I thought I'm it would take I

7
00:00:31,430 --> 00:00:33,260
could probably fit it into like a 30 45

8
00:00:33,260 --> 00:00:35,000
minute sort of talk and then I saw at 20

9
00:00:35,000 --> 00:00:37,190
minutes so for the most part I'm going

10
00:00:37,190 --> 00:00:38,329
to be trying to give you an impression

11
00:00:38,329 --> 00:00:41,240
of techniques today to build a large syp

12
00:00:41,240 --> 00:00:42,860
infrastructure using asterisk in a

13
00:00:42,860 --> 00:00:45,320
horizontally scalable fashion also with

14
00:00:45,320 --> 00:00:47,900
other useful tools like Kamali oh and

15
00:00:47,900 --> 00:00:50,930
the way I approach things is this is a

16
00:00:50,930 --> 00:00:52,280
much longer version of the talk name

17
00:00:52,280 --> 00:00:54,110
which is that I would like to build a

18
00:00:54,110 --> 00:00:55,940
large sip infrastructure using open

19
00:00:55,940 --> 00:00:57,590
source tools but I'm going to emphasize

20
00:00:57,590 --> 00:00:59,750
the ability to go hire people who can

21
00:00:59,750 --> 00:01:02,000
build services around these tools and so

22
00:01:02,000 --> 00:01:03,380
a large number of things we're going to

23
00:01:03,380 --> 00:01:05,319
be doing is trying to try to simplify

24
00:01:05,319 --> 00:01:07,549
asterisk komali oh and sort of the

25
00:01:07,549 --> 00:01:09,320
monolithic open source projects in this

26
00:01:09,320 --> 00:01:11,030
infrastructure so that I can have other

27
00:01:11,030 --> 00:01:12,530
developers come in and build services

28
00:01:12,530 --> 00:01:14,210
around them to come help them out and

29
00:01:14,210 --> 00:01:16,850
orchestrate them and in particular I'm

30
00:01:16,850 --> 00:01:18,020
going to try to hire not just C

31
00:01:18,020 --> 00:01:20,000
developers despite the fact that

32
00:01:20,000 --> 00:01:22,190
asterisk is written in C so a couple of

33
00:01:22,190 --> 00:01:24,229
sort of overarching philosophy goals

34
00:01:24,229 --> 00:01:26,270
that I have when I'm trying to build a

35
00:01:26,270 --> 00:01:27,890
sipper infrastructure I want to be able

36
00:01:27,890 --> 00:01:29,869
to scale out first and then worry about

37
00:01:29,869 --> 00:01:32,090
scaling up there's a lot of

38
00:01:32,090 --> 00:01:33,770
optimizations that you can do later on

39
00:01:33,770 --> 00:01:35,420
in order to improve the performance of

40
00:01:35,420 --> 00:01:37,850
individual components but in particular

41
00:01:37,850 --> 00:01:40,189
I want to allow my I want to be able to

42
00:01:40,189 --> 00:01:42,070
wanna be able to spin up new servers

43
00:01:42,070 --> 00:01:44,270
because that's just going to allow me to

44
00:01:44,270 --> 00:01:46,610
scale faster or easier I want to have

45
00:01:46,610 --> 00:01:48,500
reasonable redundancy as much as humanly

46
00:01:48,500 --> 00:01:50,780
possible I'm not going to stress about

47
00:01:50,780 --> 00:01:52,759
being redundant where it's Rick's

48
00:01:52,759 --> 00:01:54,380
tremely challenging we can always come

49
00:01:54,380 --> 00:01:56,000
in and improve redundancy in places but

50
00:01:56,000 --> 00:01:57,320
in general I want to be able to have

51
00:01:57,320 --> 00:01:59,509
backups for everything I want to treat

52
00:01:59,509 --> 00:02:01,100
my applications like their cattle not

53
00:02:01,100 --> 00:02:01,549
pets

54
00:02:01,549 --> 00:02:03,229
if nobody's ever heard this phrase

55
00:02:03,229 --> 00:02:05,119
before when your server dies it should

56
00:02:05,119 --> 00:02:06,950
be like you treat it like your cow died

57
00:02:06,950 --> 00:02:08,360
you have hamburgers so you don't treat

58
00:02:08,360 --> 00:02:09,949
it like your pet died and you have a

59
00:02:09,949 --> 00:02:13,700
service for it or more or funeral in

60
00:02:13,700 --> 00:02:14,870
particular I want to actually minimize

61
00:02:14,870 --> 00:02:17,150
the necessity of requiring specialized

62
00:02:17,150 --> 00:02:17,930
monolith

63
00:02:17,930 --> 00:02:20,480
knowledge this may come as a shock to

64
00:02:20,480 --> 00:02:22,040
everybody in the room but the world is

65
00:02:22,040 --> 00:02:23,359
not overflowing with real-time

66
00:02:23,359 --> 00:02:26,030
communication developers we're kind of a

67
00:02:26,030 --> 00:02:28,340
rare breed there's not that many people

68
00:02:28,340 --> 00:02:30,439
who know the inner workings of kamale oh

69
00:02:30,439 --> 00:02:32,420
and asterisk and while you can teach

70
00:02:32,420 --> 00:02:34,579
people these things it's much easier to

71
00:02:34,579 --> 00:02:36,859
find JavaScript or Python or Perl

72
00:02:36,859 --> 00:02:38,959
developers and teach them the basics of

73
00:02:38,959 --> 00:02:40,969
real-time communication rather than just

74
00:02:40,969 --> 00:02:42,560
requiring right off the bat that you are

75
00:02:42,560 --> 00:02:45,909
only going to hire developers like this

76
00:02:45,909 --> 00:02:51,459
good try so this is sort of how I view

77
00:02:51,459 --> 00:02:53,720
the strengths and weaknesses of the

78
00:02:53,720 --> 00:02:55,370
various players that I'm going to build

79
00:02:55,370 --> 00:02:57,379
my infrastructure out of and apologies

80
00:02:57,379 --> 00:02:58,909
to all of the komali oh and asters

81
00:02:58,909 --> 00:03:00,290
people including myself in the room

82
00:03:00,290 --> 00:03:03,109
because I give us some some marks in

83
00:03:03,109 --> 00:03:03,889
some places

84
00:03:03,889 --> 00:03:07,040
kamalii Oh scalability fantastic right

85
00:03:07,040 --> 00:03:11,510
scales wonderfully it's API it's ok but

86
00:03:11,510 --> 00:03:13,579
you know it's kind of a solid math in

87
00:03:13,579 --> 00:03:15,680
some places on that and it requires a

88
00:03:15,680 --> 00:03:17,930
lot of specialized knowledge asterisk

89
00:03:17,930 --> 00:03:20,450
scalability kind of a solid man you know

90
00:03:20,450 --> 00:03:22,489
scales okay but not that great and

91
00:03:22,489 --> 00:03:24,040
pretty quickly you need a lot of them

92
00:03:24,040 --> 00:03:26,389
API we've done a lot of work over the

93
00:03:26,389 --> 00:03:27,889
past couple of years to give ourselves a

94
00:03:27,889 --> 00:03:29,599
better API for building communications

95
00:03:29,599 --> 00:03:31,280
applications is one of the biggest areas

96
00:03:31,280 --> 00:03:33,500
that we focus on development in required

97
00:03:33,500 --> 00:03:35,299
knowledge though need a lot of required

98
00:03:35,299 --> 00:03:36,650
knowledge in order to be able to build

99
00:03:36,650 --> 00:03:38,329
asterisk applications or to be able to

100
00:03:38,329 --> 00:03:40,579
run an asterisk on the other hand if I'm

101
00:03:40,579 --> 00:03:42,620
building my own services I'm putting all

102
00:03:42,620 --> 00:03:44,239
the burden on to my developers they

103
00:03:44,239 --> 00:03:46,220
scale as well as my developers are able

104
00:03:46,220 --> 00:03:48,739
to build things if they have API is it's

105
00:03:48,739 --> 00:03:52,159
however good I'm in at writing api's and

106
00:03:52,159 --> 00:03:53,959
generally I can find people out there

107
00:03:53,959 --> 00:03:56,299
who can go build these things so from a

108
00:03:56,299 --> 00:03:58,099
very high level I want to build an

109
00:03:58,099 --> 00:03:59,389
architecture or a system that looks

110
00:03:59,389 --> 00:04:01,819
something like this I have a pool of

111
00:04:01,819 --> 00:04:04,699
kamale O's that are performing my

112
00:04:04,699 --> 00:04:06,650
registration directing is my registrar

113
00:04:06,650 --> 00:04:08,359
and they're doing the routing to my

114
00:04:08,359 --> 00:04:10,370
Astra servers that are acting as my

115
00:04:10,370 --> 00:04:13,310
media application servers I may have

116
00:04:13,310 --> 00:04:15,049
another pull of Kamali's that are acting

117
00:04:15,049 --> 00:04:17,289
as my proxies to go out to my providers

118
00:04:17,289 --> 00:04:19,970
I have another pool of servers that I'm

119
00:04:19,970 --> 00:04:21,470
writing that my developers are writing

120
00:04:21,470 --> 00:04:23,090
that are doing that are handling all of

121
00:04:23,090 --> 00:04:24,560
the application logic and that is

122
00:04:24,560 --> 00:04:27,169
sitting outside of my asterisk instances

123
00:04:27,169 --> 00:04:29,029
so I'm gonna actually not want to keep

124
00:04:29,029 --> 00:04:31,250
my Astra instances as simple as humanly

125
00:04:31,250 --> 00:04:31,820
possible

126
00:04:31,820 --> 00:04:33,410
should have a very simple bio plan and

127
00:04:33,410 --> 00:04:35,390
I'm gonna push most of the burden of

128
00:04:35,390 --> 00:04:37,430
what happens in the call-off to the

129
00:04:37,430 --> 00:04:39,680
application servers so we're gonna refer

130
00:04:39,680 --> 00:04:41,150
back to this a couple times as we go

131
00:04:41,150 --> 00:04:44,780
along alright so the first there's sort

132
00:04:44,780 --> 00:04:46,550
of four problems we're gonna kind of

133
00:04:46,550 --> 00:04:49,070
talk about and the thing I want to

134
00:04:49,070 --> 00:04:50,420
remind everybody is that there's no

135
00:04:50,420 --> 00:04:51,890
right answer when you solve these

136
00:04:51,890 --> 00:04:54,050
problems there are absolutely wrong

137
00:04:54,050 --> 00:04:56,410
answers right you can make bad decisions

138
00:04:56,410 --> 00:04:58,790
but when you make a decision you're

139
00:04:58,790 --> 00:05:00,950
usually just choosing a path that's

140
00:05:00,950 --> 00:05:02,150
going to force you to make some

141
00:05:02,150 --> 00:05:03,890
trade-offs elsewhere so we're just gonna

142
00:05:03,890 --> 00:05:05,420
kind of do some pros and cons on

143
00:05:05,420 --> 00:05:06,800
different options in terms of solving

144
00:05:06,800 --> 00:05:09,320
these things so how do phones find each

145
00:05:09,320 --> 00:05:10,520
other how do I handle the SIP

146
00:05:10,520 --> 00:05:13,040
registrations my first goal I want to

147
00:05:13,040 --> 00:05:15,230
use komali Oh for this it scales better

148
00:05:15,230 --> 00:05:18,370
it handles sharing registration between

149
00:05:18,370 --> 00:05:20,780
komali Oh instances in a cluster really

150
00:05:20,780 --> 00:05:22,910
well and asterisk doesn't do either one

151
00:05:22,910 --> 00:05:25,580
of those jobs well at all so I'm gonna I

152
00:05:25,580 --> 00:05:27,920
want to get my komali Oasis instances to

153
00:05:27,920 --> 00:05:29,840
act as the registrar the other thing I

154
00:05:29,840 --> 00:05:32,300
don't want to do I don't want to send

155
00:05:32,300 --> 00:05:34,100
sip registrations to the asterisk

156
00:05:34,100 --> 00:05:35,750
instances because I'm either gonna start

157
00:05:35,750 --> 00:05:37,730
storing phone location on specific

158
00:05:37,730 --> 00:05:39,860
asterisk instances which is really bad

159
00:05:39,860 --> 00:05:42,140
because then they die and then I have to

160
00:05:42,140 --> 00:05:43,430
have a funeral for it because it was a

161
00:05:43,430 --> 00:05:45,650
pet and I stored phone location on it I

162
00:05:45,650 --> 00:05:47,420
don't want to do that I don't want to

163
00:05:47,420 --> 00:05:49,010
send all sip registrations to all

164
00:05:49,010 --> 00:05:50,690
asterisk instances because that doesn't

165
00:05:50,690 --> 00:05:52,610
scale well and when I'm at 500,000

166
00:05:52,610 --> 00:05:54,650
subscribers I don't want to have 500,000

167
00:05:54,650 --> 00:05:56,240
registrations on every single asterisk

168
00:05:56,240 --> 00:06:00,230
instance it's not a good idea so how

169
00:06:00,230 --> 00:06:01,760
might I go about doing this well within

170
00:06:01,760 --> 00:06:03,470
komali oh this is a very easy problem

171
00:06:03,470 --> 00:06:06,950
this is a very well known problem to go

172
00:06:06,950 --> 00:06:09,590
solve use the location module if I have

173
00:06:09,590 --> 00:06:11,510
a couple instances of kamale Oh in my

174
00:06:11,510 --> 00:06:13,610
cluster I can fork the register request

175
00:06:13,610 --> 00:06:15,080
the other komali new instances and they

176
00:06:15,080 --> 00:06:16,550
can be smart enough to go oh I'm just

177
00:06:16,550 --> 00:06:18,440
updating my in-memory information and so

178
00:06:18,440 --> 00:06:19,520
they're keeping track of all the

179
00:06:19,520 --> 00:06:22,460
registrations an asterisk I've kind of

180
00:06:22,460 --> 00:06:23,810
got two different approaches that I

181
00:06:23,810 --> 00:06:25,670
could do one is that I could create a

182
00:06:25,670 --> 00:06:27,620
view on the Camellia database and look

183
00:06:27,620 --> 00:06:29,210
up the location information by the

184
00:06:29,210 --> 00:06:31,610
address of record which is in wrote in

185
00:06:31,610 --> 00:06:33,650
the PJ sip stack we call it dialing by

186
00:06:33,650 --> 00:06:36,710
AOR the second option is I can build

187
00:06:36,710 --> 00:06:38,690
what we like to call sidecar services

188
00:06:38,690 --> 00:06:40,910
these are little tiny micro services

189
00:06:40,910 --> 00:06:42,860
that you stand up that expose some

190
00:06:42,860 --> 00:06:45,080
information in komali off to asterisks

191
00:06:45,080 --> 00:06:46,669
in a way that it can more easily consume

192
00:06:46,669 --> 00:06:48,710
in which case I'm going to be dialing by

193
00:06:48,710 --> 00:06:51,620
you or I so if I did with the database

194
00:06:51,620 --> 00:06:55,129
route I would create a view on the

195
00:06:55,129 --> 00:06:58,370
Kamali au database that expose the parts

196
00:06:58,370 --> 00:06:59,990
of the location table using the same

197
00:06:59,990 --> 00:07:01,879
schema that asterisk needs to consume

198
00:07:01,879 --> 00:07:04,430
for its AOR object and then the rest of

199
00:07:04,430 --> 00:07:05,780
the asterisk instances would be looking

200
00:07:05,780 --> 00:07:07,280
at their own Astra's database for the

201
00:07:07,280 --> 00:07:10,370
rest of the objects generally an

202
00:07:10,370 --> 00:07:12,020
asterisk all you're doing for doing that

203
00:07:12,020 --> 00:07:13,810
is you're going to take the PSA of ours

204
00:07:13,810 --> 00:07:16,039
object map it off to the Kamali au

205
00:07:16,039 --> 00:07:17,960
database such that it actually looks at

206
00:07:17,960 --> 00:07:19,430
the PSA ORS view that you've constructed

207
00:07:19,430 --> 00:07:21,979
there and then as far as dialing is

208
00:07:21,979 --> 00:07:23,240
concerned you just dial like you

209
00:07:23,240 --> 00:07:25,129
normally dial and when you do that

210
00:07:25,129 --> 00:07:26,509
asterisk is going to go off to the

211
00:07:26,509 --> 00:07:28,310
Kamali au database and look up the

212
00:07:28,310 --> 00:07:30,199
registered URI that's actually been

213
00:07:30,199 --> 00:07:32,270
stored in that view so I can dial just

214
00:07:32,270 --> 00:07:33,740
like I've always been doing it but I can

215
00:07:33,740 --> 00:07:35,270
use komali au as the registrar and get

216
00:07:35,270 --> 00:07:38,000
the location information from it the

217
00:07:38,000 --> 00:07:39,830
downside of this is this is kind of

218
00:07:39,830 --> 00:07:41,449
non-intuitive when you're maintaining a

219
00:07:41,449 --> 00:07:43,939
system because now my asterisk instances

220
00:07:43,939 --> 00:07:46,370
have a database connection off to a

221
00:07:46,370 --> 00:07:48,650
database that there's not really their

222
00:07:48,650 --> 00:07:50,300
database and I had to create a view on

223
00:07:50,300 --> 00:07:52,159
it and I had to understand the schema

224
00:07:52,159 --> 00:07:53,750
mappings and things and that that can

225
00:07:53,750 --> 00:07:55,699
cause some cognitive overload on people

226
00:07:55,699 --> 00:07:56,979
when you're trying to maintain things

227
00:07:56,979 --> 00:07:59,330
another option is we create the sidecar

228
00:07:59,330 --> 00:08:00,860
we create a little tiny micro service

229
00:08:00,860 --> 00:08:02,509
that just exposes the location

230
00:08:02,509 --> 00:08:04,729
information and then I go ahead and use

231
00:08:04,729 --> 00:08:06,620
that and in order to actually get the

232
00:08:06,620 --> 00:08:10,370
contact when I go do my dialing this

233
00:08:10,370 --> 00:08:11,690
works great when you're actually doing

234
00:08:11,690 --> 00:08:13,639
all the dialing not in the dial plan and

235
00:08:13,639 --> 00:08:15,770
you're doing inside of applications that

236
00:08:15,770 --> 00:08:17,659
are written on top of asterisk and you

237
00:08:17,659 --> 00:08:19,699
just dialed by URI where you create a

238
00:08:19,699 --> 00:08:22,370
dial string that's pj sip slash the name

239
00:08:22,370 --> 00:08:24,050
of the endpoint slash and then the URI

240
00:08:24,050 --> 00:08:26,270
that's their location and that will

241
00:08:26,270 --> 00:08:27,830
actually go ahead and dial to that URI

242
00:08:27,830 --> 00:08:29,690
and if you set up the outbound proxy

243
00:08:29,690 --> 00:08:30,919
it'll funnel it out through your kamalu

244
00:08:30,919 --> 00:08:33,860
proxies the downside of doing this in

245
00:08:33,860 --> 00:08:35,089
particular case though is that it's a

246
00:08:35,089 --> 00:08:36,229
little bit tricky to do this from the

247
00:08:36,229 --> 00:08:37,640
dial plan because you have to go

248
00:08:37,640 --> 00:08:39,799
probably use the curl module in order to

249
00:08:39,799 --> 00:08:41,958
go get that location so wouldn't really

250
00:08:41,958 --> 00:08:43,250
recommended if you're doing in the dial

251
00:08:43,250 --> 00:08:44,870
plan but we're not anyways we want to

252
00:08:44,870 --> 00:08:46,699
build our applications outside in the

253
00:08:46,699 --> 00:08:48,649
services that are actually built on top

254
00:08:48,649 --> 00:08:51,610
of asterisk in that original diagram

255
00:08:51,610 --> 00:08:55,790
okay so very high of registration so

256
00:08:55,790 --> 00:08:57,230
let's talk about routing and

257
00:08:57,230 --> 00:08:58,970
distribution how do we get the

258
00:08:58,970 --> 00:09:00,920
sip invite requests to the right media

259
00:09:00,920 --> 00:09:05,329
application server initially you might

260
00:09:05,329 --> 00:09:07,189
think of well word let's just tie a

261
00:09:07,189 --> 00:09:09,500
customer domain to an asterisk instance

262
00:09:09,500 --> 00:09:11,899
right we're gonna say this Astra since

263
00:09:11,899 --> 00:09:14,269
this is for this customer on the pro

264
00:09:14,269 --> 00:09:16,189
side that's pretty easy do put a little

265
00:09:16,189 --> 00:09:17,509
bit of routing information in your

266
00:09:17,509 --> 00:09:19,370
Kamali O's and suddenly you're getting

267
00:09:19,370 --> 00:09:21,470
calls on top of specific asterisk

268
00:09:21,470 --> 00:09:23,540
instances the downside is that doesn't

269
00:09:23,540 --> 00:09:25,490
scale and it's very inefficient so let's

270
00:09:25,490 --> 00:09:28,370
not do that instead let's just go ahead

271
00:09:28,370 --> 00:09:29,750
and round-robin use the Kamali

272
00:09:29,750 --> 00:09:31,910
dispatcher and we'll just start sending

273
00:09:31,910 --> 00:09:34,100
all calls to all asterisk instances

274
00:09:34,100 --> 00:09:36,319
that's great it's very efficient makes

275
00:09:36,319 --> 00:09:38,089
use of resources it's tolerant to

276
00:09:38,089 --> 00:09:40,040
failure on the downside we're to push

277
00:09:40,040 --> 00:09:42,319
all the burden on to asterisk and our

278
00:09:42,319 --> 00:09:44,810
application media servers in order to

279
00:09:44,810 --> 00:09:47,060
figure out what to do with the calls so

280
00:09:47,060 --> 00:09:48,860
we're gonna make our application people

281
00:09:48,860 --> 00:09:50,449
work a lot harder but that's actually

282
00:09:50,449 --> 00:09:51,649
probably the right thing to do if we're

283
00:09:51,649 --> 00:09:54,889
gonna go be horizontally scalable so

284
00:09:54,889 --> 00:09:57,800
let's go into the hard problem then how

285
00:09:57,800 --> 00:09:59,750
do we build applications on top of this

286
00:09:59,750 --> 00:10:02,029
kind of infrastructure because we now

287
00:10:02,029 --> 00:10:03,709
have calls that are just showing up to

288
00:10:03,709 --> 00:10:05,629
any random asterisk instance and we have

289
00:10:05,629 --> 00:10:07,819
to go ahead and figure out what to do

290
00:10:07,819 --> 00:10:09,589
with those calls and at the same time I

291
00:10:09,589 --> 00:10:10,850
want to be able to have as many

292
00:10:10,850 --> 00:10:13,009
developers as possible building

293
00:10:13,009 --> 00:10:14,660
communications applications so that I

294
00:10:14,660 --> 00:10:16,309
can get more features to my customers

295
00:10:16,309 --> 00:10:20,089
faster okay so it's a couple different

296
00:10:20,089 --> 00:10:23,029
things we have to figure out we can't

297
00:10:23,029 --> 00:10:25,459
let any customer information live or be

298
00:10:25,459 --> 00:10:27,559
owned by asterisk that's the first step

299
00:10:27,559 --> 00:10:30,319
okay so there's usually roughly three

300
00:10:30,319 --> 00:10:32,449
things that means we have to not store

301
00:10:32,449 --> 00:10:34,339
on the asterisk instance we can't store

302
00:10:34,339 --> 00:10:37,850
endpoints or any specific information on

303
00:10:37,850 --> 00:10:40,339
those particular instances we can't

304
00:10:40,339 --> 00:10:42,500
store props on the asterisk instances

305
00:10:42,500 --> 00:10:43,970
because I can't put every single

306
00:10:43,970 --> 00:10:45,709
customer prompt on every single asterisk

307
00:10:45,709 --> 00:10:48,079
instance I can't store my recordings on

308
00:10:48,079 --> 00:10:50,000
the asterisk instance they can record it

309
00:10:50,000 --> 00:10:51,050
there but then I've got to get that

310
00:10:51,050 --> 00:10:52,790
recording off there as fast as possible

311
00:10:52,790 --> 00:10:54,470
because the next person who wants to

312
00:10:54,470 --> 00:10:55,910
playback that recording may be on a

313
00:10:55,910 --> 00:10:58,279
completely different asterisk instance I

314
00:10:58,279 --> 00:11:00,889
may also need to be able to move

315
00:11:00,889 --> 00:11:03,050
channels around to other asterisk

316
00:11:03,050 --> 00:11:06,980
instances when I realize that I have a

317
00:11:06,980 --> 00:11:08,360
call that has ended up in the wrong

318
00:11:08,360 --> 00:11:09,019
place

319
00:11:09,019 --> 00:11:10,429
so there are times for example if I'm

320
00:11:10,429 --> 00:11:12,230
building a conferencing server and

321
00:11:12,230 --> 00:11:14,540
kamalii is round-robin dispatching calls

322
00:11:14,540 --> 00:11:16,730
out to all the asterisk instances I may

323
00:11:16,730 --> 00:11:18,530
have to shuffle those channels around to

324
00:11:18,530 --> 00:11:20,390
get them all on to the exact same Astra

325
00:11:20,390 --> 00:11:22,480
server for that particular application

326
00:11:22,480 --> 00:11:24,560
the only way you can do this

327
00:11:24,560 --> 00:11:27,020
keep the dial playing simple do not put

328
00:11:27,020 --> 00:11:28,490
a bunch of custom stuff in your dial

329
00:11:28,490 --> 00:11:30,500
plan your dial plan needs to be as small

330
00:11:30,500 --> 00:11:31,790
as humanly possible

331
00:11:31,790 --> 00:11:33,920
you're not going to scale a complex

332
00:11:33,920 --> 00:11:36,740
style plan if you because you can't keep

333
00:11:36,740 --> 00:11:38,330
editing it every time you add a new

334
00:11:38,330 --> 00:11:40,160
customer and what's more you're gonna

335
00:11:40,160 --> 00:11:41,870
find the cognitive overload of trying to

336
00:11:41,870 --> 00:11:43,340
maintain a complex style plan will

337
00:11:43,340 --> 00:11:45,560
quickly overwhelm you in one of the

338
00:11:45,560 --> 00:11:46,820
systems that we've built like this our

339
00:11:46,820 --> 00:11:50,060
dial plan is six lines total two

340
00:11:50,060 --> 00:11:53,180
contexts three two one two catch hauls

341
00:11:53,180 --> 00:11:54,110
in each one we have two different

342
00:11:54,110 --> 00:11:56,060
contexts depending on which pool of

343
00:11:56,060 --> 00:11:58,010
Camellia proxies they come from and then

344
00:11:58,010 --> 00:11:59,540
we immediately just shove it out to our

345
00:11:59,540 --> 00:12:03,320
application servers at that point okay

346
00:12:03,320 --> 00:12:08,030
so I need to actually get how do I

347
00:12:08,030 --> 00:12:11,540
connect my asterisk instances off to my

348
00:12:11,540 --> 00:12:14,660
application servers the first phase that

349
00:12:14,660 --> 00:12:17,810
we went with we decided to just use AGI

350
00:12:17,810 --> 00:12:19,880
as a dispatcher there's a lot of nice

351
00:12:19,880 --> 00:12:21,020
things about this because it's

352
00:12:21,020 --> 00:12:23,300
relatively simple to get going with it

353
00:12:23,300 --> 00:12:27,500
you can use the H AGI protocol which

354
00:12:27,500 --> 00:12:29,930
actually will then go ahead and do a DNS

355
00:12:29,930 --> 00:12:32,690
lookup for a specific type of DNS entry

356
00:12:32,690 --> 00:12:35,660
and will then round-robin your AGI

357
00:12:35,660 --> 00:12:37,240
connections across your application

358
00:12:37,240 --> 00:12:40,370
servers so it's really easy to get going

359
00:12:40,370 --> 00:12:42,110
we can just use AGI to get the calls off

360
00:12:42,110 --> 00:12:44,840
into our application servers and then

361
00:12:44,840 --> 00:12:46,910
our application servers can start doing

362
00:12:46,910 --> 00:12:48,860
fancy things with AR I selectively as

363
00:12:48,860 --> 00:12:51,530
this as they need to the downside of

364
00:12:51,530 --> 00:12:53,090
this is that you need special DNS

365
00:12:53,090 --> 00:12:54,470
entries in order to really make this

366
00:12:54,470 --> 00:12:56,510
work and when you're trying to bring up

367
00:12:56,510 --> 00:12:57,950
ask for servers quickly that means

368
00:12:57,950 --> 00:12:59,660
you've got to go update DNS and do some

369
00:12:59,660 --> 00:13:03,230
other annoying things but it works

370
00:13:03,230 --> 00:13:05,990
fairly well a second phase which is one

371
00:13:05,990 --> 00:13:07,130
that we've been thinking about moving to

372
00:13:07,130 --> 00:13:08,690
in which a number of other people in the

373
00:13:08,690 --> 00:13:10,100
Astra's community have actually already

374
00:13:10,100 --> 00:13:12,140
done some interesting work on is to go

375
00:13:12,140 --> 00:13:15,590
full in with AR i use the airai protocol

376
00:13:15,590 --> 00:13:17,290
for the whole thing and you build

377
00:13:17,290 --> 00:13:20,090
essentially a fat proxy middleware layer

378
00:13:20,090 --> 00:13:24,080
that actually handles the decoupling of

379
00:13:24,080 --> 00:13:26,060
asterisk instances from the applet

380
00:13:26,060 --> 00:13:30,000
servers themselves the great thing is

381
00:13:30,000 --> 00:13:31,950
that when you pull this off you're fully

382
00:13:31,950 --> 00:13:33,839
decoupled at which point you can scale

383
00:13:33,839 --> 00:13:35,399
your Astra servers however much you need

384
00:13:35,399 --> 00:13:36,529
to and you can scale your application

385
00:13:36,529 --> 00:13:38,519
servers however much need to and

386
00:13:38,519 --> 00:13:40,050
whatever the load demands on each you

387
00:13:40,050 --> 00:13:41,970
can keep spinning them up as you need to

388
00:13:41,970 --> 00:13:44,490
do the downside of that is as you are in

389
00:13:44,490 --> 00:13:46,079
for some decent amount of custom

390
00:13:46,079 --> 00:13:47,850
development work if you're interested in

391
00:13:47,850 --> 00:13:48,959
that there's actually something called

392
00:13:48,959 --> 00:13:51,510
the go a RI proxy that a number of

393
00:13:51,510 --> 00:13:53,040
people in the community actually have

394
00:13:53,040 --> 00:13:55,529
worked on that is working along this

395
00:13:55,529 --> 00:13:58,800
path and it's up on github when you do

396
00:13:58,800 --> 00:14:00,839
that assume you go in whole hog you

397
00:14:00,839 --> 00:14:02,399
decide I want to completely be couple

398
00:14:02,399 --> 00:14:04,310
these things rather than actually having

399
00:14:04,310 --> 00:14:06,600
AGI connections going off to the

400
00:14:06,600 --> 00:14:08,100
application servers being round-robin

401
00:14:08,100 --> 00:14:10,200
you essentially build out of your own

402
00:14:10,200 --> 00:14:12,420
message bus and queue and your

403
00:14:12,420 --> 00:14:15,240
terminating the asterisk events coming

404
00:14:15,240 --> 00:14:17,130
off the WebSockets and you push them off

405
00:14:17,130 --> 00:14:18,990
onto the message bus and queue and then

406
00:14:18,990 --> 00:14:20,640
that message bus queue is responsible

407
00:14:20,640 --> 00:14:21,839
for dispatching them off to the

408
00:14:21,839 --> 00:14:24,360
particular application server one of the

409
00:14:24,360 --> 00:14:25,589
things that's interesting about this

410
00:14:25,589 --> 00:14:27,899
unlike sort of just a generic RabbitMQ

411
00:14:27,899 --> 00:14:30,000
you have to build some sort of concept

412
00:14:30,000 --> 00:14:32,339
of the application servers achieving

413
00:14:32,339 --> 00:14:34,050
ownership of the channel so that once an

414
00:14:34,050 --> 00:14:36,390
application server says hey I actually

415
00:14:36,390 --> 00:14:39,209
am servicing this channel it owns that

416
00:14:39,209 --> 00:14:40,410
and all the rest of the events start

417
00:14:40,410 --> 00:14:41,519
getting dispatched off to that

418
00:14:41,519 --> 00:14:45,480
particular application server alright so

419
00:14:45,480 --> 00:14:46,350
one of the other things we've got to

420
00:14:46,350 --> 00:14:48,209
deal with we have to not put endpoints

421
00:14:48,209 --> 00:14:50,190
or specific customer endpoints on

422
00:14:50,190 --> 00:14:53,130
specific asterisk instances the easiest

423
00:14:53,130 --> 00:14:54,750
way to deal with that is just simply to

424
00:14:54,750 --> 00:14:57,660
use real time you map the PJ sip objects

425
00:14:57,660 --> 00:15:00,000
to a real time back-end please for the

426
00:15:00,000 --> 00:15:01,800
love of God do use a cache if you do

427
00:15:01,800 --> 00:15:03,600
this so that you don't try to pull down

428
00:15:03,600 --> 00:15:06,000
500,000 subscribers when asterisk you

429
00:15:06,000 --> 00:15:07,769
know naively tries to find out how many

430
00:15:07,769 --> 00:15:09,990
different endpoints are out there and

431
00:15:09,990 --> 00:15:11,370
the cache we actually have just added

432
00:15:11,370 --> 00:15:12,959
recently a number of commands to even

433
00:15:12,959 --> 00:15:14,820
let you go ahead and prune and clean up

434
00:15:14,820 --> 00:15:16,380
the cache manually if you ever decide

435
00:15:16,380 --> 00:15:17,730
you need to go to that level of

436
00:15:17,730 --> 00:15:21,269
granularity prompts how do you handle

437
00:15:21,269 --> 00:15:24,720
prompts have your developers create a

438
00:15:24,720 --> 00:15:27,449
small rest service that exposes custom

439
00:15:27,449 --> 00:15:29,850
sound files for customers and store the

440
00:15:29,850 --> 00:15:32,550
media in s3 or some other blob object

441
00:15:32,550 --> 00:15:34,819
storage front ended by the REST API

442
00:15:34,819 --> 00:15:37,410
asterisk and Astra's 14 has the ability

443
00:15:37,410 --> 00:15:39,560
to do remote your I playback to playback

444
00:15:39,560 --> 00:15:41,660
Media and so if you issue a playback

445
00:15:41,660 --> 00:15:43,310
command using any of the dial plan

446
00:15:43,310 --> 00:15:45,740
applications or a GI or through a or I

447
00:15:45,740 --> 00:15:47,810
it will actually pull that media down

448
00:15:47,810 --> 00:15:50,300
locally cache it for some period of time

449
00:15:50,300 --> 00:15:52,249
and then play that back for the customer

450
00:15:52,249 --> 00:15:53,509
so that you don't actually have to keep

451
00:15:53,509 --> 00:15:55,310
pushing specific customer prompts on two

452
00:15:55,310 --> 00:15:58,339
specific asterisk instances how do you

453
00:15:58,339 --> 00:16:01,850
handle recordings use a RI whenever

454
00:16:01,850 --> 00:16:03,579
possible to manipulate the recordings

455
00:16:03,579 --> 00:16:05,720
what AR I gives you when it's done

456
00:16:05,720 --> 00:16:08,059
recording is a stored recording object

457
00:16:08,059 --> 00:16:10,129
and that stored recording object exposes

458
00:16:10,129 --> 00:16:11,629
rest routes to allow you to pull the

459
00:16:11,629 --> 00:16:13,670
binary in for other the binary stream of

460
00:16:13,670 --> 00:16:15,529
media off directly from the asterisk

461
00:16:15,529 --> 00:16:17,480
instance that means you don't have to

462
00:16:17,480 --> 00:16:19,490
set up little weird FTP servers or other

463
00:16:19,490 --> 00:16:21,170
kinds of hacky things on the asterisk

464
00:16:21,170 --> 00:16:22,759
instances in order to get at the media

465
00:16:22,759 --> 00:16:24,889
when you when you're done with the

466
00:16:24,889 --> 00:16:26,870
recording pull that media off stored in

467
00:16:26,870 --> 00:16:28,670
another service so that if asterisk

468
00:16:28,670 --> 00:16:30,050
needs it again later it can do a remote

469
00:16:30,050 --> 00:16:31,639
your I playback of the media that was

470
00:16:31,639 --> 00:16:32,990
previously recorded on some other

471
00:16:32,990 --> 00:16:36,050
asterisk instance last but not least

472
00:16:36,050 --> 00:16:37,670
sometimes you end up in these weird

473
00:16:37,670 --> 00:16:39,350
situations in which you've got to move

474
00:16:39,350 --> 00:16:41,749
calls around and get them co-located on

475
00:16:41,749 --> 00:16:43,459
asterisk instances this typically

476
00:16:43,459 --> 00:16:46,189
happens in multi party conferences call

477
00:16:46,189 --> 00:16:47,660
queues or other really complex

478
00:16:47,660 --> 00:16:50,509
applications rather than trying to

479
00:16:50,509 --> 00:16:52,579
complicate komali oh by shoving

480
00:16:52,579 --> 00:16:54,439
application logic into the komali or

481
00:16:54,439 --> 00:16:57,110
dial plan we found we just like to just

482
00:16:57,110 --> 00:16:59,480
move the channel and so if it ends up in

483
00:16:59,480 --> 00:17:00,860
the wrong state and the application goes

484
00:17:00,860 --> 00:17:02,269
oh crap you're supposed to be in this

485
00:17:02,269 --> 00:17:04,250
conference we just do a redirect which

486
00:17:04,250 --> 00:17:06,020
is either going to issue a 302 or refer

487
00:17:06,020 --> 00:17:07,970
and shove it over to the correct

488
00:17:07,970 --> 00:17:09,890
asterisk instance the trick there is

489
00:17:09,890 --> 00:17:12,020
when you do that the only information

490
00:17:12,020 --> 00:17:13,819
the asterisk instance is going to have

491
00:17:13,819 --> 00:17:17,030
is the request URI that says I've got

492
00:17:17,030 --> 00:17:18,799
this channel where was it supposed to go

493
00:17:18,799 --> 00:17:20,839
and so we typically embed a little

494
00:17:20,839 --> 00:17:22,250
stateful token in the front of the

495
00:17:22,250 --> 00:17:24,380
request URI that says hey this guy is

496
00:17:24,380 --> 00:17:25,640
supposed to be in this conference over

497
00:17:25,640 --> 00:17:27,709
here so when he shows up don't don't do

498
00:17:27,709 --> 00:17:29,780
the normal hit what's this new channel

499
00:17:29,780 --> 00:17:31,130
that showed up just go ahead and shove

500
00:17:31,130 --> 00:17:33,920
him directly into the conference

501
00:17:33,920 --> 00:17:36,740
all right last general problem we're

502
00:17:36,740 --> 00:17:38,360
going to tackle today subscriptions how

503
00:17:38,360 --> 00:17:42,350
do we make blinky lights flash again

504
00:17:42,350 --> 00:17:44,570
please don't show of all the subscribes

505
00:17:44,570 --> 00:17:46,250
across all asterisk instances you're

506
00:17:46,250 --> 00:17:48,320
going to probably overload it use komali

507
00:17:48,320 --> 00:17:49,880
oh it's really great as a subscription

508
00:17:49,880 --> 00:17:51,830
server do this for the exact same reason

509
00:17:51,830 --> 00:17:53,680
that you use komali oh as a registrar

510
00:17:53,680 --> 00:17:56,210
one of the nice things in asters 14 is

511
00:17:56,210 --> 00:17:57,950
we now have the ability to generate

512
00:17:57,950 --> 00:17:59,780
state notifications and publish them

513
00:17:59,780 --> 00:18:01,430
directly to the komali oh cool

514
00:18:01,430 --> 00:18:03,470
kamalii Oh will then send your notify

515
00:18:03,470 --> 00:18:05,000
requests off to the subscribed user

516
00:18:05,000 --> 00:18:08,510
agents again handling this in komali oh

517
00:18:08,510 --> 00:18:10,820
is dead simple as one of these standard

518
00:18:10,820 --> 00:18:12,380
things that Kamala does which is great

519
00:18:12,380 --> 00:18:14,360
not a whole lot of work

520
00:18:14,360 --> 00:18:17,810
an asterisk land we use a concept called

521
00:18:17,810 --> 00:18:20,420
Auto hints and Auto hints will

522
00:18:20,420 --> 00:18:22,460
automatically generate the extension

523
00:18:22,460 --> 00:18:24,620
state hints intelligently whenever a

524
00:18:24,620 --> 00:18:26,660
device state changes so rather than

525
00:18:26,660 --> 00:18:28,670
having to actually code in all my device

526
00:18:28,670 --> 00:18:30,680
state hints into the Astra style plan it

527
00:18:30,680 --> 00:18:32,240
will just automatically generate them

528
00:18:32,240 --> 00:18:34,850
for you and then you can configure

529
00:18:34,850 --> 00:18:36,950
asterisk to go ahead and publish every

530
00:18:36,950 --> 00:18:38,720
time an extension state change happens

531
00:18:38,720 --> 00:18:41,570
directly to the komali Oh cluster so I

532
00:18:41,570 --> 00:18:43,940
don't if I have Alice acting on one

533
00:18:43,940 --> 00:18:46,250
Astra server as soon as Alice picks up

534
00:18:46,250 --> 00:18:47,900
the phone and starts dialing somebody a

535
00:18:47,900 --> 00:18:49,460
hint will automatically be generated for

536
00:18:49,460 --> 00:18:51,080
Alice on that astra server when that

537
00:18:51,080 --> 00:18:52,850
channel is there it will publish it to

538
00:18:52,850 --> 00:18:53,990
the commodity cluster and everybody

539
00:18:53,990 --> 00:18:55,490
who's subscribed for Alice's state will

540
00:18:55,490 --> 00:18:57,200
just automatically get it and I don't

541
00:18:57,200 --> 00:18:58,670
have to do a whole lot of specific

542
00:18:58,670 --> 00:19:03,590
special custom hint work okay that was

543
00:19:03,590 --> 00:19:05,000
lightning fast and a whole lot of

544
00:19:05,000 --> 00:19:07,370
information and I apologize so by the

545
00:19:07,370 --> 00:19:09,020
way the slides are actually already up

546
00:19:09,020 --> 00:19:10,610
on the FOSDEM site I already uploaded

547
00:19:10,610 --> 00:19:13,280
them to Penta barf and I put a whole

548
00:19:13,280 --> 00:19:15,020
bunch of links on to where the

549
00:19:15,020 --> 00:19:16,430
documentation is for a lot of the

550
00:19:16,430 --> 00:19:18,050
features that I just rambled off here

551
00:19:18,050 --> 00:19:20,570
today so by all means go check out the

552
00:19:20,570 --> 00:19:22,970
slides and all of the features that I

553
00:19:22,970 --> 00:19:24,950
talked about should be documented on the

554
00:19:24,950 --> 00:19:26,300
wiki because I actually had to go refer

555
00:19:26,300 --> 00:19:27,680
to it as well to remember how to do some

556
00:19:27,680 --> 00:19:29,920
of these things

557
00:19:32,640 --> 00:19:35,740
so I have a question about the Agia ri

558
00:19:35,740 --> 00:19:38,620
interface where you set the a RI layer

559
00:19:38,620 --> 00:19:41,080
you can build a fast proxy in between

560
00:19:41,080 --> 00:19:43,030
the constructs and application layer

561
00:19:43,030 --> 00:19:45,250
yep you consider using service discovery

562
00:19:45,250 --> 00:19:47,860
that also exposes like a console that

563
00:19:47,860 --> 00:19:51,190
exposes DNS and HTTP and not have to

564
00:19:51,190 --> 00:19:53,860
build that intermediate doing layer so

565
00:19:53,860 --> 00:19:55,900
actually what we've actually looked at

566
00:19:55,900 --> 00:19:57,520
console for a number of other things as

567
00:19:57,520 --> 00:19:59,080
well I think they're one of the one of

568
00:19:59,080 --> 00:20:01,480
the problems I glossed over and didn't

569
00:20:01,480 --> 00:20:03,490
really talk about at all either is how

570
00:20:03,490 --> 00:20:05,170
when you're bringing up a new asterisk

571
00:20:05,170 --> 00:20:07,180
instance how does komali o know and

572
00:20:07,180 --> 00:20:09,580
trust that this thing actually is

573
00:20:09,580 --> 00:20:11,380
supposed to be in my private network so

574
00:20:11,380 --> 00:20:12,940
console is actually a really interesting

575
00:20:12,940 --> 00:20:14,980
application because I think it can play

576
00:20:14,980 --> 00:20:17,070
a large role and a whole lot of that

577
00:20:17,070 --> 00:20:19,540
service discovery authentication

578
00:20:19,540 --> 00:20:20,950
authorization what are you're allowed to

579
00:20:20,950 --> 00:20:24,490
do when we when we looked at it I don't

580
00:20:24,490 --> 00:20:26,770
think the go Eri proxies using it and we

581
00:20:26,770 --> 00:20:28,510
aren't using it today for that purpose

582
00:20:28,510 --> 00:20:31,900
but it absolutely would fit so there's

583
00:20:31,900 --> 00:20:33,820
certainly certainly a good idea to look

584
00:20:33,820 --> 00:20:36,210
into that

585
00:20:40,010 --> 00:20:47,299
[Applause]

