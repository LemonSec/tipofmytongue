1
00:00:00,000 --> 00:00:02,269
sorry

2
00:00:04,610 --> 00:00:06,890
do you uh please introduce Raphael

3
00:00:06,890 --> 00:00:10,130
Martens for bread hat thank you hi

4
00:00:10,130 --> 00:00:13,160
everyone first of all thanks for coming

5
00:00:13,160 --> 00:00:15,590
I'm Rafa Martin's and from Red Hat I

6
00:00:15,590 --> 00:00:18,730
work on the integration team for overt

7
00:00:18,730 --> 00:00:23,329
where we basically do other releases we

8
00:00:23,329 --> 00:00:25,099
maintain out all the installation

9
00:00:25,099 --> 00:00:29,570
scripts for overt and I am also gentle

10
00:00:29,570 --> 00:00:31,669
developer for more than six years so

11
00:00:31,669 --> 00:00:34,399
most of my background is on distributing

12
00:00:34,399 --> 00:00:37,940
software and packaging software and did

13
00:00:37,940 --> 00:00:41,780
this talk is to show you how we use some

14
00:00:41,780 --> 00:00:43,850
tools in orbit to improve the way we

15
00:00:43,850 --> 00:00:53,350
test software and we release software so

16
00:00:53,829 --> 00:00:57,649
so let's start by describing what's the

17
00:00:57,649 --> 00:01:00,140
problem we are trying to we are actually

18
00:01:00,140 --> 00:01:04,069
trying to solve basically virtualization

19
00:01:04,069 --> 00:01:08,150
products are complex they're compact in

20
00:01:08,150 --> 00:01:10,610
the sense that they always have lots of

21
00:01:10,610 --> 00:01:13,100
integrations for example we need to

22
00:01:13,100 --> 00:01:16,910
integrate with storage with network and

23
00:01:16,910 --> 00:01:20,210
when you get some bug some new feature

24
00:01:20,210 --> 00:01:23,170
that you need to implement that we

25
00:01:23,170 --> 00:01:25,790
require you to review the environment to

26
00:01:25,790 --> 00:01:27,260
test you need to reproduce the

27
00:01:27,260 --> 00:01:29,960
environment and sometimes you can take a

28
00:01:29,960 --> 00:01:32,480
really long time building this

29
00:01:32,480 --> 00:01:33,730
environment

30
00:01:33,730 --> 00:01:37,010
personally I already spent more than one

31
00:01:37,010 --> 00:01:38,810
day trying to reproduce an environment

32
00:01:38,810 --> 00:01:43,250
to to fix a bug so most of my research

33
00:01:43,250 --> 00:01:47,360
on this topic and the tools are plugging

34
00:01:47,360 --> 00:01:49,790
I wrote for LA go where because I was

35
00:01:49,790 --> 00:01:52,910
really tired of spending so much too

36
00:01:52,910 --> 00:01:57,020
much time on reproducing bugs and not

37
00:01:57,020 --> 00:01:59,650
wanted something automated so the

38
00:01:59,650 --> 00:02:02,060
objective of this talk is to show you

39
00:02:02,060 --> 00:02:05,840
how you can do the same for your project

40
00:02:05,840 --> 00:02:10,250
if you want to and if you fight fight

41
00:02:10,250 --> 00:02:12,530
find it but be able for your prod for

42
00:02:12,530 --> 00:02:13,850
your project

43
00:02:13,850 --> 00:02:22,690
and showing how we do it for a bit so

44
00:02:23,650 --> 00:02:26,900
use of it as an use case for the talk

45
00:02:26,900 --> 00:02:28,910
how many people here in the room already

46
00:02:28,910 --> 00:02:31,130
use it over it or at or at least know

47
00:02:31,130 --> 00:02:37,580
how what it is okay so of it basically

48
00:02:37,580 --> 00:02:41,060
is a visualization management system we

49
00:02:41,060 --> 00:02:43,040
have a web application that we cover

50
00:02:43,040 --> 00:02:45,410
over the engine where you can create

51
00:02:45,410 --> 00:02:48,170
data centers clusters new Twitter

52
00:02:48,170 --> 00:02:53,810
machines and so on stuff and it can

53
00:02:53,810 --> 00:02:58,940
manage the VMS for you it's based on

54
00:02:58,940 --> 00:03:01,220
ktml evert that are technologies that

55
00:03:01,220 --> 00:03:04,370
are well-known in the opened open source

56
00:03:04,370 --> 00:03:10,220
and Linux community and this is what the

57
00:03:10,220 --> 00:03:12,260
orbit engine looks like but those that

58
00:03:12,260 --> 00:03:15,320
don't know it this is a screenshot from

59
00:03:15,320 --> 00:03:17,870
one of our internal instance that Red

60
00:03:17,870 --> 00:03:20,510
Hat that we use for testing it is not

61
00:03:20,510 --> 00:03:23,210
the biggest deployment we know but it's

62
00:03:23,210 --> 00:03:25,160
a quite large deployment with three data

63
00:03:25,160 --> 00:03:28,970
centers and this is the main dashboard

64
00:03:28,970 --> 00:03:32,120
do we have options and screens to change

65
00:03:32,120 --> 00:03:38,750
about everything on the machines now we

66
00:03:38,750 --> 00:03:41,300
talked about the solution we found to

67
00:03:41,300 --> 00:03:46,070
make testing and deployment and refined

68
00:03:46,070 --> 00:03:48,770
off patches easier that is like a lager

69
00:03:48,770 --> 00:03:51,530
project it is basically are not an ad

70
00:03:51,530 --> 00:03:54,140
hoc framework for visualization that can

71
00:03:54,140 --> 00:03:57,920
build environments for you using libvirt

72
00:03:57,920 --> 00:04:01,640
and KVM so you can vote by environments

73
00:04:01,640 --> 00:04:03,920
with how many machines you want and this

74
00:04:03,920 --> 00:04:06,560
will allow you to integrate those

75
00:04:06,560 --> 00:04:09,030
machines and do the

76
00:04:09,030 --> 00:04:13,430
the tests needed back by using plugins

77
00:04:13,430 --> 00:04:17,940
writing Python it's it's totally

78
00:04:17,940 --> 00:04:21,420
extensible almost all of the layers of

79
00:04:21,420 --> 00:04:23,520
Longo areas accessible by plugins in

80
00:04:23,520 --> 00:04:26,070
Python and the core itself just carries

81
00:04:26,070 --> 00:04:28,800
the very basic functionality that is

82
00:04:28,800 --> 00:04:33,150
needed to work now we talked about how

83
00:04:33,150 --> 00:04:38,190
is it how you use lago in orbit all the

84
00:04:38,190 --> 00:04:42,030
tasks that are the code that connects to

85
00:04:42,030 --> 00:04:45,720
overt and do a bit related stuff is on a

86
00:04:45,720 --> 00:04:48,210
splitted plane that is kind of it lago

87
00:04:48,210 --> 00:04:51,480
and language self does not carry any

88
00:04:51,480 --> 00:04:54,810
code that talks to ovis so in the same

89
00:04:54,810 --> 00:04:57,270
way that we have of it lago for lago you

90
00:04:57,270 --> 00:05:00,210
can have a specific plugin for another

91
00:05:00,210 --> 00:05:03,810
product and another project and use it

92
00:05:03,810 --> 00:05:06,900
with large language just responsible by

93
00:05:06,900 --> 00:05:09,240
orchestrating the machines and calling

94
00:05:09,240 --> 00:05:19,140
the plugins to do the job we do to solve

95
00:05:19,140 --> 00:05:22,620
the problem of automated test because as

96
00:05:22,620 --> 00:05:25,140
release managers we need to be able to

97
00:05:25,140 --> 00:05:28,169
trust the software we are releasing we

98
00:05:28,169 --> 00:05:30,600
need some frequent tests to make sure

99
00:05:30,600 --> 00:05:35,520
that anything big is broken one of the

100
00:05:35,520 --> 00:05:37,200
solution for that was a business and

101
00:05:37,200 --> 00:05:39,300
tasks that is an automated test suite

102
00:05:39,300 --> 00:05:41,520
with that we have it is run by Jenkins

103
00:05:41,520 --> 00:05:45,450
frequently and with this we can make

104
00:05:45,450 --> 00:05:47,400
sure that the code is ready to release

105
00:05:47,400 --> 00:05:49,320
and that the main flows we support are

106
00:05:49,320 --> 00:05:54,180
not broken for for example we have Lago

107
00:05:54,180 --> 00:05:58,590
and one engine and two hosts this is

108
00:05:58,590 --> 00:06:02,160
orbital revitalized by lago by using the

109
00:06:02,160 --> 00:06:04,860
lab they orbit lava plugging and lago

110
00:06:04,860 --> 00:06:07,800
outside just managing the VMS and there

111
00:06:07,800 --> 00:06:09,540
is lava plugin creating everything

112
00:06:09,540 --> 00:06:12,110
that's needed

113
00:06:15,280 --> 00:06:17,599
this is automated

114
00:06:17,599 --> 00:06:21,530
we have scripts and repository

115
00:06:21,530 --> 00:06:24,860
descriptions to catch the rep the RPM

116
00:06:24,860 --> 00:06:29,569
files lab you can can create a local

117
00:06:29,569 --> 00:06:33,020
repository that that is used to install

118
00:06:33,020 --> 00:06:35,150
packages quickly without downloading

119
00:06:35,150 --> 00:06:38,330
from internet every time so with this we

120
00:06:38,330 --> 00:06:41,360
can like run into an tasks in like 25

121
00:06:41,360 --> 00:06:45,110
minutes 20 minutes depending on what we

122
00:06:45,110 --> 00:06:47,419
are doing for of it with a big really

123
00:06:47,419 --> 00:06:54,500
big - with the good things about system

124
00:06:54,500 --> 00:06:56,690
tests are about having automated tests

125
00:06:56,690 --> 00:06:59,990
for you is that you can see quickly see

126
00:06:59,990 --> 00:07:03,169
big breakages on big issues on your on

127
00:07:03,169 --> 00:07:05,630
your project like if you get if you have

128
00:07:05,630 --> 00:07:07,639
a patch that's that is really breaking

129
00:07:07,639 --> 00:07:10,220
the basic flaws and it's not really bad

130
00:07:10,220 --> 00:07:12,919
it may still pass unit tests but it

131
00:07:12,919 --> 00:07:15,710
won't past past season test because it

132
00:07:15,710 --> 00:07:18,259
is actually creating the machines it's

133
00:07:18,259 --> 00:07:20,570
actually creating the VMS actually

134
00:07:20,570 --> 00:07:23,740
trying to add hosts try to add storage

135
00:07:23,740 --> 00:07:29,270
so it won't pass and it's very well

136
00:07:29,270 --> 00:07:31,610
maintained it we have lot of people like

137
00:07:31,610 --> 00:07:34,159
write and test for it and keep an eye on

138
00:07:34,159 --> 00:07:36,219
it to see if it's really working and

139
00:07:36,219 --> 00:07:41,150
make sure that everything is fine and at

140
00:07:41,150 --> 00:07:42,740
last point that is important too

141
00:07:42,740 --> 00:07:45,800
important to what out arrow after it's

142
00:07:45,800 --> 00:07:47,659
that the virtual machines are left to be

143
00:07:47,659 --> 00:07:50,630
used after the tests are running so you

144
00:07:50,630 --> 00:07:53,000
can still after running the test with it

145
00:07:53,000 --> 00:07:55,099
you can still logging the machines and

146
00:07:55,099 --> 00:07:57,440
do something else like run some common

147
00:07:57,440 --> 00:08:01,310
rate with some logs or do something else

148
00:08:01,310 --> 00:08:02,870
with the machine that you want to verify

149
00:08:02,870 --> 00:08:08,930
your patch this is a screenshot of our

150
00:08:08,930 --> 00:08:11,780
Jenkins instance we have lots of jobs

151
00:08:11,780 --> 00:08:16,750
for other good supported versions we can

152
00:08:16,750 --> 00:08:19,460
look at it and quickly see that for

153
00:08:19,460 --> 00:08:19,980
example

154
00:08:19,980 --> 00:08:21,690
in this day we had some issue on three

155
00:08:21,690 --> 00:08:24,210
six that was breaking most of the buttes

156
00:08:24,210 --> 00:08:29,160
and we can look at look at the logs and

157
00:08:29,160 --> 00:08:33,480
and see what's wrong and talk with the

158
00:08:33,480 --> 00:08:35,789
person that sent the patch and fix it

159
00:08:35,789 --> 00:08:41,100
that is more important now that I'll

160
00:08:41,100 --> 00:08:44,370
talk about the real point of this talk

161
00:08:44,370 --> 00:08:48,050
that is doing manual testing because

162
00:08:48,050 --> 00:08:51,680
automated tests are good are needed but

163
00:08:51,680 --> 00:08:55,650
we also need nano tests to improve our

164
00:08:55,650 --> 00:08:59,400
flour workflow when doesn't that testing

165
00:08:59,400 --> 00:09:03,990
patches we have several jobs on Jenkins

166
00:09:03,990 --> 00:09:07,590
that can build custom rpms from a

167
00:09:07,590 --> 00:09:11,810
Jarrett patch we use Jared on of it and

168
00:09:11,810 --> 00:09:15,540
you can easily build some rpms from any

169
00:09:15,540 --> 00:09:18,900
Jared patch and use those rpms on a

170
00:09:18,900 --> 00:09:21,390
witticism test to to create an

171
00:09:21,390 --> 00:09:23,700
environment with the new functionality

172
00:09:23,700 --> 00:09:28,050
you implemented or with the fix you are

173
00:09:28,050 --> 00:09:32,640
doing an important point is that the

174
00:09:32,640 --> 00:09:34,830
developer can do it on it's all laptop

175
00:09:34,830 --> 00:09:39,450
so the processes are a bit member hungry

176
00:09:39,450 --> 00:09:41,610
because we are running some hand stuff

177
00:09:41,610 --> 00:09:44,160
but it's definitely possible to run it

178
00:09:44,160 --> 00:09:49,740
on laptop and do build your rpms and

179
00:09:49,740 --> 00:09:54,210
just test them and most of the time a

180
00:09:54,210 --> 00:09:57,170
lot of access more simple patches would

181
00:09:57,170 --> 00:10:00,090
don't even need some manual intervention

182
00:10:00,090 --> 00:10:03,630
to be tested the automated test may just

183
00:10:03,630 --> 00:10:06,420
be very fine out the flow that you are

184
00:10:06,420 --> 00:10:09,780
affecting with your patch and sometimes

185
00:10:09,780 --> 00:10:13,020
you won't even need to to do any mono

186
00:10:13,020 --> 00:10:19,680
task to test it but like an anything in

187
00:10:19,680 --> 00:10:21,390
software basically we had some

188
00:10:21,390 --> 00:10:25,500
trade-offs to have our automated tests

189
00:10:25,500 --> 00:10:28,410
or quizzes and tests we had to do some

190
00:10:28,410 --> 00:10:30,570
choices that sometimes

191
00:10:30,570 --> 00:10:35,910
really what can i how can I say they

192
00:10:35,910 --> 00:10:38,660
make the mono testing a bit harder than

193
00:10:38,660 --> 00:10:43,410
developers wanted for example when we

194
00:10:43,410 --> 00:10:46,620
are running when are using overseas and

195
00:10:46,620 --> 00:10:49,560
test two that's a custom patch you need

196
00:10:49,560 --> 00:10:52,380
to always run the full test suite it

197
00:10:52,380 --> 00:10:54,780
means that if you test is correct it's

198
00:10:54,780 --> 00:10:57,630
fine you just run what when it wants and

199
00:10:57,630 --> 00:11:00,720
be done with it but if it does have some

200
00:11:00,720 --> 00:11:03,420
issue you need to iterate anytime you

201
00:11:03,420 --> 00:11:06,810
change the patch you need to rerun the

202
00:11:06,810 --> 00:11:09,170
full test it to get it to get it work

203
00:11:09,170 --> 00:11:16,050
and if the patch changed the behavior of

204
00:11:16,050 --> 00:11:18,900
the test like if you change it either

205
00:11:18,900 --> 00:11:22,260
the new option to ins installer or you

206
00:11:22,260 --> 00:11:25,530
have some changes the behavior of some

207
00:11:25,530 --> 00:11:28,040
part of the system if you break the test

208
00:11:28,040 --> 00:11:31,920
and to be able to use a business and

209
00:11:31,920 --> 00:11:34,410
test to test it you need to fix the test

210
00:11:34,410 --> 00:11:37,890
this is not a bad thing because this

211
00:11:37,890 --> 00:11:39,420
means that the and tests will

212
00:11:39,420 --> 00:11:42,900
keep working because the developer will

213
00:11:42,900 --> 00:11:45,360
need to fix the test and it's a good

214
00:11:45,360 --> 00:11:47,130
thing because of the developer will use

215
00:11:47,130 --> 00:11:51,120
it to write in tests so this is not

216
00:11:51,120 --> 00:11:54,240
really a downside but it will spend time

217
00:11:54,240 --> 00:11:56,760
because it instead of just fixing your

218
00:11:56,760 --> 00:11:59,250
patch you still need to fix the test

219
00:11:59,250 --> 00:12:00,840
tool but this is a good thing for the

220
00:12:00,840 --> 00:12:03,720
project and sometimes the environment

221
00:12:03,720 --> 00:12:06,060
that is deployed deployed by the

222
00:12:06,060 --> 00:12:08,610
automated test is not enough for your

223
00:12:08,610 --> 00:12:11,730
tests for example you may need more

224
00:12:11,730 --> 00:12:14,790
hosts or you may need more engines and

225
00:12:14,790 --> 00:12:19,260
in this case the in this case the

226
00:12:19,260 --> 00:12:21,150
environments not is not really what you

227
00:12:21,150 --> 00:12:27,780
wanted to test to try to solve part of

228
00:12:27,780 --> 00:12:29,760
this problem problems I created a llama

229
00:12:29,760 --> 00:12:31,860
plugin that's kind of it part will file

230
00:12:31,860 --> 00:12:33,810
and

231
00:12:33,810 --> 00:12:37,570
it is very simple if you just create

232
00:12:37,570 --> 00:12:38,589
vm's for you

233
00:12:38,589 --> 00:12:40,930
basically on what you define on common

234
00:12:40,930 --> 00:12:46,000
line like you have a decorative way to

235
00:12:46,000 --> 00:12:48,610
say how you want your machines to be

236
00:12:48,610 --> 00:12:51,519
created or did you just create them link

237
00:12:51,519 --> 00:12:56,170
them and get them ready for usage the

238
00:12:56,170 --> 00:12:57,670
good things about it is that you don't

239
00:12:57,670 --> 00:12:59,709
need to run the full test fit and you

240
00:12:59,709 --> 00:13:04,290
can have how many machines you want but

241
00:13:04,290 --> 00:13:07,990
sometimes it may have like or with

242
00:13:07,990 --> 00:13:10,060
system tests it may it may also have

243
00:13:10,060 --> 00:13:12,570
some downsides or some trade-offs that

244
00:13:12,570 --> 00:13:17,110
that you have to accept so it's your

245
00:13:17,110 --> 00:13:20,350
it's your job to find what of the tools

246
00:13:20,350 --> 00:13:23,079
is better for you or extend of it or

247
00:13:23,079 --> 00:13:27,880
extend largo to create around and fix

248
00:13:27,880 --> 00:13:35,070
your yardage so this desire some

249
00:13:35,070 --> 00:13:38,440
comments exempt examples the first one

250
00:13:38,440 --> 00:13:41,860
is is the deployed self we are like

251
00:13:41,860 --> 00:13:44,230
creating one engine machine with 8

252
00:13:44,230 --> 00:13:48,069
gigabytes of RAM and two hosts and we

253
00:13:48,069 --> 00:13:52,240
are using a custom patch from Jerry and

254
00:13:52,240 --> 00:13:55,959
from Jenkins this common blue Krait

255
00:13:55,959 --> 00:13:59,170
create trillions one for orbit engine

256
00:13:59,170 --> 00:14:04,029
and to orbit hosts using the rpms from

257
00:14:04,029 --> 00:14:11,079
the beaut onion channel so after that I

258
00:14:11,079 --> 00:14:13,209
will have to run the common to deploy

259
00:14:13,209 --> 00:14:16,240
the engine itself this comment will runs

260
00:14:16,240 --> 00:14:18,519
the agent setup common that is the

261
00:14:18,519 --> 00:14:21,579
script that my team untains that will

262
00:14:21,579 --> 00:14:24,490
actually deploy the engine and install

263
00:14:24,490 --> 00:14:27,160
the RPMs and and make sure that

264
00:14:27,160 --> 00:14:32,560
everything is is running or if the

265
00:14:32,560 --> 00:14:34,510
automated setup is not good for you for

266
00:14:34,510 --> 00:14:36,850
example if you add a new option to the

267
00:14:36,850 --> 00:14:39,889
install script you can still run the

268
00:14:39,889 --> 00:14:45,679
welcome to the Michelle and agency

269
00:14:45,679 --> 00:14:48,499
attack manually using whatever options

270
00:14:48,499 --> 00:14:50,600
you want whatever options you need and

271
00:14:50,600 --> 00:14:53,269
doing any other manual testing you want

272
00:14:53,269 --> 00:15:00,649
to I prepared a small demo for you

273
00:15:00,649 --> 00:15:06,230
it is like showing this process I was

274
00:15:06,230 --> 00:15:11,269
demonstrating I should say that the vid

275
00:15:11,269 --> 00:15:14,929
is not fou here I got some parts of it

276
00:15:14,929 --> 00:15:20,319
to make it more quick to explain here

277
00:15:20,319 --> 00:15:23,569
but I will focus on the time that it

278
00:15:23,569 --> 00:15:30,488
took to do the tasks let me just open it

279
00:16:03,600 --> 00:16:07,569
okay so this is the common that will be

280
00:16:07,569 --> 00:16:11,649
run this comment will create trillions

281
00:16:11,649 --> 00:16:15,610
one is the engine one is over the engine

282
00:16:15,610 --> 00:16:18,999
and YouTube in a mid-engine - and there

283
00:16:18,999 --> 00:16:21,879
are the two ones are two hoods one with

284
00:16:21,879 --> 00:16:24,309
one gigabyte of RAM and the other with

285
00:16:24,309 --> 00:16:26,649
one gigabyte of RAM this is just an

286
00:16:26,649 --> 00:16:29,259
example but nobody would create an inch

287
00:16:29,259 --> 00:16:31,329
host with one gigabyte of RAM because it

288
00:16:31,329 --> 00:16:36,759
would be like crazy but this is the

289
00:16:36,759 --> 00:16:39,069
environment we are creating to test for

290
00:16:39,069 --> 00:16:42,339
example if you just see if the host is

291
00:16:42,339 --> 00:16:44,350
correctly attaching to the engine you

292
00:16:44,350 --> 00:16:45,790
don't need to read to create a big

293
00:16:45,790 --> 00:16:48,160
engine just to see a big host just to

294
00:16:48,160 --> 00:16:55,269
see that this is more than enough so

295
00:16:55,269 --> 00:16:57,670
it's creating Network creating

296
00:16:57,670 --> 00:17:00,730
bootstrapping the VMS and we start the

297
00:17:00,730 --> 00:17:06,490
plane so those types are all based on

298
00:17:06,490 --> 00:17:10,209
scripts our code apart Python code from

299
00:17:10,209 --> 00:17:12,490
the lava plugin or that the Vltava

300
00:17:12,490 --> 00:17:16,929
plugin or Del Amo code itself all the

301
00:17:16,929 --> 00:17:19,390
parts that are market like doing

302
00:17:19,390 --> 00:17:22,359
something related to of it are from the

303
00:17:22,359 --> 00:17:28,079
overt blogger plugin not for long itself

304
00:17:28,079 --> 00:17:31,090
so now it's actually deploy it is

305
00:17:31,090 --> 00:17:33,149
running some shell scripts that are

306
00:17:33,149 --> 00:17:36,340
stalling rpms importing stuff from the

307
00:17:36,340 --> 00:17:41,230
repository etc and this is one of the

308
00:17:41,230 --> 00:17:43,330
steps that takes more time because it's

309
00:17:43,330 --> 00:17:46,080
download a lot of stuff from internet

310
00:17:46,080 --> 00:17:52,210
because they did lago do with much

311
00:17:52,210 --> 00:17:55,990
petrol fire plugging it's not it's one

312
00:17:55,990 --> 00:17:58,299
of the trade-offs that it have is that

313
00:17:58,299 --> 00:18:00,340
it's not really optimized for

314
00:18:00,340 --> 00:18:03,340
downloading we can't maintain a list of

315
00:18:03,340 --> 00:18:05,710
RPM packages that are needed for the

316
00:18:05,710 --> 00:18:09,850
testing because it changes a lot so it

317
00:18:09,850 --> 00:18:11,889
usually does lots of stuff that's not

318
00:18:11,889 --> 00:18:14,110
needed but it's the price you pay for

319
00:18:14,110 --> 00:18:15,380
being automated

320
00:18:15,380 --> 00:18:18,320
so the deployment took almost five

321
00:18:18,320 --> 00:18:23,690
minutes and now I will actually run the

322
00:18:23,690 --> 00:18:26,150
engine setups the step it doesn't take

323
00:18:26,150 --> 00:18:28,460
some time because it will actually

324
00:18:28,460 --> 00:18:31,299
install the RPM

325
00:18:37,410 --> 00:18:43,160
and this commonly will use a prayer

326
00:18:43,160 --> 00:18:46,860
recreated answer file that works fine

327
00:18:46,860 --> 00:18:50,670
for most of the cases but sometimes it

328
00:18:50,670 --> 00:18:53,040
may not work so if you have a custom

329
00:18:53,040 --> 00:18:55,470
answer file that is the configuration

330
00:18:55,470 --> 00:18:58,530
file for engine setup you can pass it

331
00:18:58,530 --> 00:19:00,090
for this common and it will be used

332
00:19:00,090 --> 00:19:04,530
instead of the default one so if it run

333
00:19:04,530 --> 00:19:06,660
agent setup it took three minutes three

334
00:19:06,660 --> 00:19:09,090
and thirty eight and now it is adding

335
00:19:09,090 --> 00:19:11,580
the host to the engine automatically for

336
00:19:11,580 --> 00:19:13,699
you

337
00:19:21,510 --> 00:19:24,000
it's important to say that everything is

338
00:19:24,000 --> 00:19:28,050
based on template in this case as I run

339
00:19:28,050 --> 00:19:30,810
the default comments it uses er7

340
00:19:30,810 --> 00:19:33,420
templates that are is sent to seven in

341
00:19:33,420 --> 00:19:36,570
four Lago but we have templates for

342
00:19:36,570 --> 00:19:40,710
fedora and it won't work with over it

343
00:19:40,710 --> 00:19:43,350
but if you have some other other project

344
00:19:43,350 --> 00:19:45,300
and you have some temple and you create

345
00:19:45,300 --> 00:19:47,010
a template for some other distribution

346
00:19:47,010 --> 00:19:50,280
it would work too but but you're

347
00:19:50,280 --> 00:19:51,930
plugging would need to be able to

348
00:19:51,930 --> 00:19:54,320
install packages for that distribution

349
00:19:54,320 --> 00:19:57,600
now I am running the the interface to

350
00:19:57,600 --> 00:20:02,959
show that it works authenticating

351
00:20:13,990 --> 00:20:17,409
and the engine is running the two horses

352
00:20:17,409 --> 00:20:20,940
are created are there and they are

353
00:20:20,940 --> 00:20:24,520
currently installing the hosts as

354
00:20:24,520 --> 00:20:27,250
expected I have two here but I could

355
00:20:27,250 --> 00:20:29,799
have as many as as I want the dot

356
00:20:29,799 --> 00:20:34,029
initial doing this manually to test a

357
00:20:34,029 --> 00:20:36,340
patch it takes a lot of time it's

358
00:20:36,340 --> 00:20:37,929
something that's really saved a lot of

359
00:20:37,929 --> 00:20:43,720
time for us I've got like from zero to

360
00:20:43,720 --> 00:20:46,210
the system running in less than 10

361
00:20:46,210 --> 00:20:48,820
minutes it's really good it's really

362
00:20:48,820 --> 00:20:51,720
good progress

363
00:21:06,200 --> 00:21:10,340
mmm yeah as everything in software would

364
00:21:10,340 --> 00:21:13,490
have already started commenting about it

365
00:21:13,490 --> 00:21:17,900
before but having it fully automated

366
00:21:17,900 --> 00:21:22,310
makes it hard to cash and the script

367
00:21:22,310 --> 00:21:24,080
can't install more than one engine

368
00:21:24,080 --> 00:21:27,020
simultaneously the agents attack script

369
00:21:27,020 --> 00:21:29,840
from the plug-in but if you want to

370
00:21:29,840 --> 00:21:31,790
create more than one engine from the

371
00:21:31,790 --> 00:21:33,950
comment line and do the set of manually

372
00:21:33,950 --> 00:21:36,230
running engines attack on both engines

373
00:21:36,230 --> 00:21:39,440
it is possible it will work but just the

374
00:21:39,440 --> 00:21:41,090
bonus you have from having automatic

375
00:21:41,090 --> 00:21:43,700
configuration of hosts who want to work

376
00:21:43,700 --> 00:21:46,310
with more than one engine but you can

377
00:21:46,310 --> 00:21:53,900
still do it one important point of this

378
00:21:53,900 --> 00:21:58,130
test of this talk is to show that this

379
00:21:58,130 --> 00:22:01,490
is not just part of it we want to have

380
00:22:01,490 --> 00:22:04,340
this used by other people

381
00:22:04,340 --> 00:22:06,550
[Music]

382
00:22:06,550 --> 00:22:09,970
the tool was created with being as

383
00:22:09,970 --> 00:22:12,290
agnostic as possible from the start

384
00:22:12,290 --> 00:22:14,600
this is why we don't have van of it

385
00:22:14,600 --> 00:22:17,120
called a new bit relate coded in court

386
00:22:17,120 --> 00:22:20,120
and the power flag so it can be used for

387
00:22:20,120 --> 00:22:22,310
several purposes like testing order

388
00:22:22,310 --> 00:22:24,500
utilization manages doing some up

389
00:22:24,500 --> 00:22:27,170
testing some applies that doing some

390
00:22:27,170 --> 00:22:29,660
end-to-end testing on some software that

391
00:22:29,660 --> 00:22:32,030
is run as a realtor machine this is all

392
00:22:32,030 --> 00:22:34,910
possible to do to do it Lago by writing

393
00:22:34,910 --> 00:22:42,740
plugins and another topic is we

394
00:22:42,740 --> 00:22:44,870
frequently get some questions questions

395
00:22:44,870 --> 00:22:47,330
on why should I lose will use language

396
00:22:47,330 --> 00:22:51,110
stead of use some other product project

397
00:22:51,110 --> 00:22:54,770
that is already is already popular in

398
00:22:54,770 --> 00:22:57,860
the community the most common question

399
00:22:57,860 --> 00:23:01,070
we get is about Vega when we started

400
00:23:01,070 --> 00:23:03,620
Lago we don't have violent wasn't in the

401
00:23:03,620 --> 00:23:07,730
best state of yet like it like it is now

402
00:23:07,730 --> 00:23:11,300
so it was not really unofficial at that

403
00:23:11,300 --> 00:23:14,270
at that point but personally I still

404
00:23:14,270 --> 00:23:16,400
achieve a lot more as

405
00:23:16,400 --> 00:23:19,670
- for developed cold instead of a - to

406
00:23:19,670 --> 00:23:22,160
test school like if I have a website and

407
00:23:22,160 --> 00:23:25,280
I need posters and MongoDB and something

408
00:23:25,280 --> 00:23:28,790
like that I have a vagrant file that

409
00:23:28,790 --> 00:23:31,030
built that environment for me to run my

410
00:23:31,030 --> 00:23:34,480
website without configuring stuff I

411
00:23:34,480 --> 00:23:37,309
personally don't see that it really has

412
00:23:37,309 --> 00:23:39,620
a tool to build utilize it environments

413
00:23:39,620 --> 00:23:41,300
with lots of machines and integrating

414
00:23:41,300 --> 00:23:45,080
their but it's possible to do the other

415
00:23:45,080 --> 00:23:47,300
two we frequently get asked is about

416
00:23:47,300 --> 00:23:51,950
avocado but avocado is more targeted at

417
00:23:51,950 --> 00:23:54,830
testing the hypervisor for example it is

418
00:23:54,830 --> 00:23:57,679
at a different level that Lago it is

419
00:23:57,679 --> 00:23:58,700
more easy to test

420
00:23:58,700 --> 00:24:02,630
KVM and Camus and violent and Largo is

421
00:24:02,630 --> 00:24:04,880
more to test the full environment but

422
00:24:04,880 --> 00:24:09,050
still if you want you can write a lot of

423
00:24:09,050 --> 00:24:10,730
plug-in to use of a car as a test run

424
00:24:10,730 --> 00:24:14,840
instead of the default test run and use

425
00:24:14,840 --> 00:24:17,570
of a car to run your tests the same is

426
00:24:17,570 --> 00:24:20,179
true for is true for rocket it is

427
00:24:20,179 --> 00:24:22,850
possible to write a lago plugin that we

428
00:24:22,850 --> 00:24:26,330
will use vagrant to provide on the VMS

429
00:24:26,330 --> 00:24:31,370
instead of libvirt and so if you really

430
00:24:31,370 --> 00:24:33,260
want to use background if you really

431
00:24:33,260 --> 00:24:35,000
want to the Vacarro it's possible to

432
00:24:35,000 --> 00:24:37,340
integrate and benefit from from the best

433
00:24:37,340 --> 00:24:42,230
side of both words another option is

434
00:24:42,230 --> 00:24:42,940
lava

435
00:24:42,940 --> 00:24:46,640
it's the Lonardo of leonardo validation

436
00:24:46,640 --> 00:24:51,200
- it is very similar to lago but it is

437
00:24:51,200 --> 00:24:55,670
targeted on testing up real hard like

438
00:24:55,670 --> 00:24:58,910
i'm devices and Intel devices if you run

439
00:24:58,910 --> 00:25:00,620
the tests on the real the real device

440
00:25:00,620 --> 00:25:04,309
not in vitro machines as far as I know

441
00:25:04,309 --> 00:25:06,470
it's possible to use Britta machines of

442
00:25:06,470 --> 00:25:09,950
the the target device for land for lava

443
00:25:09,950 --> 00:25:12,020
but this is not really popular in the

444
00:25:12,020 --> 00:25:14,260
community

445
00:25:17,120 --> 00:25:20,360
that's it before I finish the talk I'll

446
00:25:20,360 --> 00:25:25,370
have few comments if you of all those

447
00:25:25,370 --> 00:25:28,880
people that say that that don't know

448
00:25:28,880 --> 00:25:31,070
agua don't know of it

449
00:25:31,070 --> 00:25:33,790
sorry whichever stand here in the

450
00:25:33,790 --> 00:25:37,010
conference with some demos and stuff you

451
00:25:37,010 --> 00:25:42,770
can bring some some gadgets also I was

452
00:25:42,770 --> 00:25:44,630
talking with some developers some of the

453
00:25:44,630 --> 00:25:48,140
audience in gentle you also have a stand

454
00:25:48,140 --> 00:25:50,450
here you can compile a round bottom if

455
00:25:50,450 --> 00:25:53,600
you want you can visit both if you want

456
00:25:53,600 --> 00:25:55,040
to talk with me like that I should be

457
00:25:55,040 --> 00:25:58,850
around one of those stands mmm also

458
00:25:58,850 --> 00:26:01,880
these lines you are in the website of

459
00:26:01,880 --> 00:26:05,300
the conference and that's it if you have

460
00:26:05,300 --> 00:26:08,500
some questions feel free to ask

461
00:26:13,590 --> 00:26:19,340
[Applause]

