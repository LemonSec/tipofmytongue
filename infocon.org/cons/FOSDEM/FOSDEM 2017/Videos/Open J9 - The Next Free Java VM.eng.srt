1
00:00:04,550 --> 00:00:08,719
so I'm not probably as recognizable as

2
00:00:08,719 --> 00:00:10,549
mark with most of the people here so

3
00:00:10,549 --> 00:00:14,119
I'll actually introduce myself my name

4
00:00:14,119 --> 00:00:17,210
is Charlie Gracie I'm Project Lead at

5
00:00:17,210 --> 00:00:19,789
the clip so um our project and I'm also

6
00:00:19,789 --> 00:00:23,990
software developer for IBM on the j9

7
00:00:23,990 --> 00:00:28,580
java virtual machine I've been working

8
00:00:28,580 --> 00:00:31,490
on the Java VM for IBM for about

9
00:00:31,490 --> 00:00:40,400
thirteen or fourteen years now alright

10
00:00:40,400 --> 00:00:43,880
so the same as the Oracle presentations

11
00:00:43,880 --> 00:00:46,280
I work for IBM a large company you're

12
00:00:46,280 --> 00:00:49,690
not allowed to believe anything I say

13
00:00:50,920 --> 00:00:54,200
alright so my talk today I'm going to be

14
00:00:54,200 --> 00:00:58,520
talking about open j9 it's a project

15
00:00:58,520 --> 00:01:00,469
that we're starting to get underway to

16
00:01:00,469 --> 00:01:03,320
actually open source the entirety of the

17
00:01:03,320 --> 00:01:06,320
j9 virtual machine so today I'm gonna

18
00:01:06,320 --> 00:01:08,840
just give a quick overview of j9 itself

19
00:01:08,840 --> 00:01:11,030
some of the technologies that are there

20
00:01:11,030 --> 00:01:13,429
for people who aren't aware that IBM has

21
00:01:13,429 --> 00:01:17,240
a java virtual machine go quickly and

22
00:01:17,240 --> 00:01:19,639
cover the Eclipse OMA Mart project

23
00:01:19,639 --> 00:01:21,409
because that's sort of a basis for the

24
00:01:21,409 --> 00:01:24,560
open j9 project and I'll get into open

25
00:01:24,560 --> 00:01:27,170
j9 itself and then hopefully we have a

26
00:01:27,170 --> 00:01:29,479
few minutes left to for answer some

27
00:01:29,479 --> 00:01:33,439
questions I apologize for my voice I'm a

28
00:01:33,439 --> 00:01:39,319
little bit sick today alright so the

29
00:01:39,319 --> 00:01:41,749
real first question is is why does IBM

30
00:01:41,749 --> 00:01:43,249
actually have their own java virtual

31
00:01:43,249 --> 00:01:47,840
machine IBM is a hardware vendor itself

32
00:01:47,840 --> 00:01:50,090
they have their own hardware P and Z

33
00:01:50,090 --> 00:01:53,659
series they provide the OSS for those

34
00:01:53,659 --> 00:01:55,789
they actually have a large middleware

35
00:01:55,789 --> 00:01:57,799
stack and they have a lot of

36
00:01:57,799 --> 00:01:59,509
applications that they provide as well

37
00:01:59,509 --> 00:02:01,579
so it kind of made sense to actually

38
00:02:01,579 --> 00:02:03,889
have the middle piece of the JVM

39
00:02:03,889 --> 00:02:06,259
actually there as well so that we could

40
00:02:06,259 --> 00:02:07,789
be sure that we have the whole stack

41
00:02:07,789 --> 00:02:10,758
covered this allows us to have a high

42
00:02:10,758 --> 00:02:14,690
performance high reliability and strong

43
00:02:14,690 --> 00:02:18,530
serviceability for our entire stack

44
00:02:18,530 --> 00:02:21,350
the j9 VM itself is an independent

45
00:02:21,350 --> 00:02:23,990
implementation a little bit later I'll

46
00:02:23,990 --> 00:02:26,420
talk a bit more but we use a lot of the

47
00:02:26,420 --> 00:02:28,550
oracle class libraries but the vm itself

48
00:02:28,550 --> 00:02:31,100
is completely developed independently at

49
00:02:31,100 --> 00:02:39,080
IBM so a quick little history lesson on

50
00:02:39,080 --> 00:02:42,500
j9 j9 was originally implemented as a

51
00:02:42,500 --> 00:02:47,090
Java ME VM so the first few releases of

52
00:02:47,090 --> 00:02:49,550
j9 were all on different types of cell

53
00:02:49,550 --> 00:02:52,640
phones you name the embedded board and

54
00:02:52,640 --> 00:02:55,690
at one point or another we supported it

55
00:02:55,690 --> 00:02:59,360
but as of Java 5 we actually became the

56
00:02:59,360 --> 00:03:03,710
IBM java SE VM as well so at that point

57
00:03:03,710 --> 00:03:07,670
in about 2004 our code base was actually

58
00:03:07,670 --> 00:03:09,680
shipping on the embedded platforms and

59
00:03:09,680 --> 00:03:13,070
all the way up to running on the z3 90s

60
00:03:13,070 --> 00:03:17,360
mainframes the further platforms to

61
00:03:17,360 --> 00:03:22,520
support x86 PowerPC z/os are big and

62
00:03:22,520 --> 00:03:24,410
little endian of whatever flavors of

63
00:03:24,410 --> 00:03:30,500
those hardware there exists and even at

64
00:03:30,500 --> 00:03:32,840
one point our VM was running on this

65
00:03:32,840 --> 00:03:38,000
oscilloscope okay

66
00:03:38,000 --> 00:03:42,020
so quickly cover the architecture it's a

67
00:03:42,020 --> 00:03:44,180
very busy slide I apologize but it was

68
00:03:44,180 --> 00:03:45,410
just trying to get a bunch of the

69
00:03:45,410 --> 00:03:48,980
details up here so this is kind of the

70
00:03:48,980 --> 00:03:51,860
architectural layout of j9 and it even

71
00:03:51,860 --> 00:03:53,870
includes things you'll notice up in the

72
00:03:53,870 --> 00:03:58,760
in the the thing under Java calls those

73
00:03:58,760 --> 00:04:00,290
are a bunch of the different ME class

74
00:04:00,290 --> 00:04:01,760
libraries that we used to support as

75
00:04:01,760 --> 00:04:05,540
well so this is more of just of a quick

76
00:04:05,540 --> 00:04:08,180
overview to have everyone have an idea

77
00:04:08,180 --> 00:04:11,420
of what j9 looks like from an

78
00:04:11,420 --> 00:04:14,079
architecture level

79
00:04:17,649 --> 00:04:19,820
so now I'll talk a bit more about some

80
00:04:19,820 --> 00:04:21,230
of the pieces of technology

81
00:04:21,230 --> 00:04:24,770
so the actual interpreter the core

82
00:04:24,770 --> 00:04:27,380
interpreter itself was rewritten in the

83
00:04:27,380 --> 00:04:28,970
last few years to actually be written in

84
00:04:28,970 --> 00:04:33,770
C++ it used to be years ago generated

85
00:04:33,770 --> 00:04:36,470
from was generated assembly from small

86
00:04:36,470 --> 00:04:40,880
talk we're we're all small talkers on

87
00:04:40,880 --> 00:04:42,940
the team originally back in the day so

88
00:04:42,940 --> 00:04:45,740
when it came to having to generate some

89
00:04:45,740 --> 00:04:48,320
assembly we wrote something in small

90
00:04:48,320 --> 00:04:52,280
talk so we've replaced that it was very

91
00:04:52,280 --> 00:04:54,710
difficult to on board new people to

92
00:04:54,710 --> 00:04:56,419
actually understand to have them work on

93
00:04:56,419 --> 00:04:58,940
this code so it was part of wanting to

94
00:04:58,940 --> 00:05:01,639
open things up and be more available to

95
00:05:01,639 --> 00:05:03,380
everybody over the last few years and

96
00:05:03,380 --> 00:05:04,970
then even hiring new employees for

97
00:05:04,970 --> 00:05:07,070
ourselves we decided we should have

98
00:05:07,070 --> 00:05:10,039
something that's more readable so well

99
00:05:10,039 --> 00:05:11,870
as a readable C++ code is going to be

100
00:05:11,870 --> 00:05:17,570
for it so it's basically a large switch

101
00:05:17,570 --> 00:05:20,120
statement or computer go-to if anyone's

102
00:05:20,120 --> 00:05:22,100
seen an interpreter loop for any VM it

103
00:05:22,100 --> 00:05:24,770
looks pretty similar you look on the

104
00:05:24,770 --> 00:05:27,889
right you can see some of the byte codes

105
00:05:27,889 --> 00:05:28,310
there

106
00:05:28,310 --> 00:05:33,229
as expected completely we did however

107
00:05:33,229 --> 00:05:36,020
lose some performance by switching from

108
00:05:36,020 --> 00:05:38,570
the assembly generated one to having an

109
00:05:38,570 --> 00:05:41,840
interpreter in C++ but in the end there

110
00:05:41,840 --> 00:05:44,090
was the trade-offs we felt to actually

111
00:05:44,090 --> 00:05:45,620
have something that we could have people

112
00:05:45,620 --> 00:05:48,010
develop and work on was worth the small

113
00:05:48,010 --> 00:05:51,800
start-up time of losses and in the end

114
00:05:51,800 --> 00:05:54,830
we were able to find other areas that we

115
00:05:54,830 --> 00:05:56,419
could actually improve performance so in

116
00:05:56,419 --> 00:05:58,340
the end we clawed it all back through

117
00:05:58,340 --> 00:06:04,460
other ways as of the last Java 8 release

118
00:06:04,460 --> 00:06:06,889
there were still small parts of code

119
00:06:06,889 --> 00:06:09,530
being generated from builder I'm happy

120
00:06:09,530 --> 00:06:11,300
to say as of when we shipped Java 9

121
00:06:11,300 --> 00:06:13,760
there will be no more of this

122
00:06:13,760 --> 00:06:19,039
auto-generated Smalltalk code maybe here

123
00:06:19,039 --> 00:06:21,620
some size or sadness in the back from

124
00:06:21,620 --> 00:06:24,910
some of the guys that love it

125
00:06:26,450 --> 00:06:29,660
so the next thing I'll just go quickly

126
00:06:29,660 --> 00:06:31,460
into the garbage collecting technology

127
00:06:31,460 --> 00:06:35,690
that we provide in the IBM JDK so we

128
00:06:35,690 --> 00:06:37,690
have really

129
00:06:37,690 --> 00:06:42,440
five-ish collection policies if I had

130
00:06:42,440 --> 00:06:43,760
have taken a few minutes I could have

131
00:06:43,760 --> 00:06:46,780
actually put this is the similar openjdk

132
00:06:46,780 --> 00:06:50,510
technology of I didn't have time I

133
00:06:50,510 --> 00:06:53,230
didn't want to get it wrong on stage so

134
00:06:53,230 --> 00:06:56,660
they kind of go from simplest to more

135
00:06:56,660 --> 00:07:00,020
complex as we go down vanilla aisle

136
00:07:00,020 --> 00:07:02,180
throughput which is basically just marks

137
00:07:02,180 --> 00:07:04,460
we've compact does all of this work in

138
00:07:04,460 --> 00:07:06,590
parallel as you would expect from

139
00:07:06,590 --> 00:07:08,690
something that's running se VMs but

140
00:07:08,690 --> 00:07:11,840
simple straightforward mark-sweep op

141
00:07:11,840 --> 00:07:14,210
average pause has some concurrent

142
00:07:14,210 --> 00:07:16,370
collections for the Global's so a lot of

143
00:07:16,370 --> 00:07:17,840
the marketing and sweeping can actually

144
00:07:17,840 --> 00:07:18,980
happen concurrently with your

145
00:07:18,980 --> 00:07:22,760
application the generation of collector

146
00:07:22,760 --> 00:07:25,790
gen con the con part is actually the

147
00:07:25,790 --> 00:07:27,890
concurrent collector from average pause

148
00:07:27,890 --> 00:07:30,980
but then it does generational collect

149
00:07:30,980 --> 00:07:34,250
for the new area and then the one I'm

150
00:07:34,250 --> 00:07:35,540
going to talk a bit more about in a

151
00:07:35,540 --> 00:07:38,300
second is balanced so this was new as of

152
00:07:38,300 --> 00:07:44,000
Java 7 and it's very similar type to g1

153
00:07:44,000 --> 00:07:46,040
so it's our large heap region base

154
00:07:46,040 --> 00:07:49,580
collector provides a bunch of different

155
00:07:49,580 --> 00:07:51,260
capabilities that we can take advantage

156
00:07:51,260 --> 00:07:53,330
of and I think we're sort of just

157
00:07:53,330 --> 00:07:56,030
getting to the starting to really take

158
00:07:56,030 --> 00:07:57,800
advantage of this as we see different

159
00:07:57,800 --> 00:07:59,780
large workloads and as new types of

160
00:07:59,780 --> 00:08:01,990
hardware kind of come online

161
00:08:01,990 --> 00:08:05,870
the last one is soft real-time GC call

162
00:08:05,870 --> 00:08:10,400
metronome so this GC actually you have a

163
00:08:10,400 --> 00:08:13,030
pause time goal and then the sort of

164
00:08:13,030 --> 00:08:14,630
utilization that you want your

165
00:08:14,630 --> 00:08:16,250
application to get so when you set those

166
00:08:16,250 --> 00:08:18,020
the GC will if you're given enough

167
00:08:18,020 --> 00:08:21,530
memory will try to meet those goals so

168
00:08:21,530 --> 00:08:23,870
by default it has three millisecond

169
00:08:23,870 --> 00:08:26,600
pauses and we'll give you our

170
00:08:26,600 --> 00:08:29,870
application 70 percent utilization you

171
00:08:29,870 --> 00:08:31,280
can tweak those numbers in whichever

172
00:08:31,280 --> 00:08:33,740
direction you want if you go really

173
00:08:33,740 --> 00:08:36,799
small and really high utilization you

174
00:08:36,799 --> 00:08:38,299
probably need a lot more heat than your

175
00:08:38,299 --> 00:08:39,539
regular VM but

176
00:08:39,539 --> 00:08:42,720
and for the trade-off of having no large

177
00:08:42,720 --> 00:08:44,640
pauses that's in some workloads a good

178
00:08:44,640 --> 00:08:50,400
thing so quickly just give a bit more

179
00:08:50,400 --> 00:08:53,430
details about balanced and this is

180
00:08:53,430 --> 00:08:55,200
useful to people too because it's

181
00:08:55,200 --> 00:08:59,700
somewhat similar to g1 so the heap

182
00:08:59,700 --> 00:09:01,590
imbalanced is divided into a bunch of

183
00:09:01,590 --> 00:09:06,720
regions these regions can allow you to

184
00:09:06,720 --> 00:09:07,950
do a bunch of different things they can

185
00:09:07,950 --> 00:09:10,620
allow you to do things like gather

186
00:09:10,620 --> 00:09:12,450
objects with common properties into

187
00:09:12,450 --> 00:09:15,270
particular regions so instead of just

188
00:09:15,270 --> 00:09:17,460
the normal GC behavior improvements you

189
00:09:17,460 --> 00:09:19,050
can actually get lots of application

190
00:09:19,050 --> 00:09:20,790
type improvements as well and throughput

191
00:09:20,790 --> 00:09:23,670
by putting these objects closer together

192
00:09:23,670 --> 00:09:25,800
if your objects that reference one

193
00:09:25,800 --> 00:09:27,570
another happen to always be moved around

194
00:09:27,570 --> 00:09:30,930
together you'll have better locality so

195
00:09:30,930 --> 00:09:32,430
you when you're referencing from one to

196
00:09:32,430 --> 00:09:36,810
the other it should be quicker because

197
00:09:36,810 --> 00:09:40,860
we have this region based heap we can

198
00:09:40,860 --> 00:09:43,110
actually very much target the areas that

199
00:09:43,110 --> 00:09:44,790
we believe are going to have a very high

200
00:09:44,790 --> 00:09:47,790
return on investment so if objects are

201
00:09:47,790 --> 00:09:49,470
recently allocated they're probably very

202
00:09:49,470 --> 00:09:51,540
good that's the whole reason there's

203
00:09:51,540 --> 00:09:54,390
generational collectors but there's also

204
00:09:54,390 --> 00:09:56,070
other things where we can recognize that

205
00:09:56,070 --> 00:09:58,110
we don't even want to touch large

206
00:09:58,110 --> 00:09:59,730
portions of this heap because they're

207
00:09:59,730 --> 00:10:01,170
never being used we'll just assume

208
00:10:01,170 --> 00:10:02,910
they're alive until we actually ever

209
00:10:02,910 --> 00:10:07,980
need that memory again and then you can

210
00:10:07,980 --> 00:10:10,050
do lots of other optimizations based on

211
00:10:10,050 --> 00:10:12,090
the actual hardware that you're running

212
00:10:12,090 --> 00:10:14,700
on so you can take advantage of Numa you

213
00:10:14,700 --> 00:10:16,770
can use SSDs to offload parts of your

214
00:10:16,770 --> 00:10:18,420
heap that aren't actually going to be

215
00:10:18,420 --> 00:10:22,050
used or reference very often now so this

216
00:10:22,050 --> 00:10:24,000
technology gives us that advances

217
00:10:24,000 --> 00:10:26,310
advantages and these are a lot of the

218
00:10:26,310 --> 00:10:27,930
things we're looking forward to as we

219
00:10:27,930 --> 00:10:33,090
keep improving the technology another

220
00:10:33,090 --> 00:10:35,700
sort of busy slide but this is a quick

221
00:10:35,700 --> 00:10:38,910
slide on our just-in-time compilation um

222
00:10:38,910 --> 00:10:42,210
so as in open JDK we have a very

223
00:10:42,210 --> 00:10:44,910
sophisticated jipped that goes through

224
00:10:44,910 --> 00:10:46,410
this as kind of the different phases and

225
00:10:46,410 --> 00:10:49,880
passes that argit would have

226
00:10:51,200 --> 00:10:54,380
and then so the main part about our JIT

227
00:10:54,380 --> 00:10:58,190
is it will continue to dynamically

228
00:10:58,190 --> 00:11:00,470
recompile your code as it recognizes

229
00:11:00,470 --> 00:11:03,430
that things need to be optimized further

230
00:11:03,430 --> 00:11:06,200
so this is kind of the regular passes

231
00:11:06,200 --> 00:11:09,019
that it goes through usually it doesn't

232
00:11:09,019 --> 00:11:11,000
skip any passes but it can in certain

233
00:11:11,000 --> 00:11:14,029
scenarios so you start off with cold

234
00:11:14,029 --> 00:11:18,380
warm hot and go to scorching there is a

235
00:11:18,380 --> 00:11:19,790
profiling phase in the middle so that

236
00:11:19,790 --> 00:11:21,920
one will actually just be generated to

237
00:11:21,920 --> 00:11:23,810
gather more data to be able to go do the

238
00:11:23,810 --> 00:11:26,600
very heavy weights scorching pass one

239
00:11:26,600 --> 00:11:28,850
two once a map that reaches scorching it

240
00:11:28,850 --> 00:11:31,430
won't be recompiled again that's as much

241
00:11:31,430 --> 00:11:33,589
as we believe we can do for it so that's

242
00:11:33,589 --> 00:11:35,889
the end of where it'll be compiled

243
00:11:35,889 --> 00:11:45,800
yeah quickly so there is a profiling

244
00:11:45,800 --> 00:11:47,779
thread but when they generate the

245
00:11:47,779 --> 00:11:49,160
profiled method they'll actually

246
00:11:49,160 --> 00:11:51,920
generate some counters and things within

247
00:11:51,920 --> 00:11:55,449
the method to actually gather data

248
00:11:58,000 --> 00:12:00,380
another sort of unique feature to the

249
00:12:00,380 --> 00:12:04,640
IBM JDK is our shared classes cache so

250
00:12:04,640 --> 00:12:07,510
coming originally from our ME days we

251
00:12:07,510 --> 00:12:09,769
used to run on lots of systems that had

252
00:12:09,769 --> 00:12:13,519
lots of RAM ROM but very little ram so

253
00:12:13,519 --> 00:12:15,680
to be able to run things efficiently we

254
00:12:15,680 --> 00:12:17,510
started dividing our classes into what

255
00:12:17,510 --> 00:12:19,269
we call the rom class and a ram class

256
00:12:19,269 --> 00:12:21,769
the wrong class portions were always

257
00:12:21,769 --> 00:12:24,500
being burned into rom on the phones so

258
00:12:24,500 --> 00:12:27,410
when we came around to SC we decided we

259
00:12:27,410 --> 00:12:29,089
could keep those that distinction there

260
00:12:29,089 --> 00:12:31,010
and then you could actually share this

261
00:12:31,010 --> 00:12:33,170
of these wrong classes across if you're

262
00:12:33,170 --> 00:12:35,269
running multiple VMs or you could

263
00:12:35,269 --> 00:12:36,800
actually have a cache that so you can

264
00:12:36,800 --> 00:12:38,420
load quicker on startup using shared

265
00:12:38,420 --> 00:12:41,810
memory once we had this cache and we're

266
00:12:41,810 --> 00:12:44,209
able to share we realized well you do

267
00:12:44,209 --> 00:12:46,880
lots of JIT code as well so for things

268
00:12:46,880 --> 00:12:48,860
like startup when you're going you can

269
00:12:48,860 --> 00:12:51,139
actually go and store some of our äôt

270
00:12:51,139 --> 00:12:53,660
code in the shared classes cache so that

271
00:12:53,660 --> 00:12:55,130
when you start up you'll actually get

272
00:12:55,130 --> 00:12:56,930
some pretty noticeable startup

273
00:12:56,930 --> 00:12:59,120
improvements and here the memory

274
00:12:59,120 --> 00:13:01,339
footprint on a lot is by about 20

275
00:13:01,339 --> 00:13:03,649
percent and usually can get about 10 to

276
00:13:03,649 --> 00:13:05,030
30 percent in startups

277
00:13:05,030 --> 00:13:08,120
feed by storing your äôt code and rom

278
00:13:08,120 --> 00:13:12,620
classes in the share classes cache an

279
00:13:12,620 --> 00:13:17,090
obligatory performance chart this is

280
00:13:17,090 --> 00:13:18,530
just sort of some performance numbers

281
00:13:18,530 --> 00:13:21,290
over the different Java releases showing

282
00:13:21,290 --> 00:13:23,360
that iBM has really focused on the

283
00:13:23,360 --> 00:13:25,100
performance of this and that's going to

284
00:13:25,100 --> 00:13:28,940
be a continued thing for us as we move

285
00:13:28,940 --> 00:13:34,550
forward so quickly on to eclipse om R so

286
00:13:34,550 --> 00:13:36,440
I'm here to talk about US open sourcing

287
00:13:36,440 --> 00:13:40,160
our java vm the first step to this was

288
00:13:40,160 --> 00:13:42,560
actually we started last May we open

289
00:13:42,560 --> 00:13:45,050
sourced a large portion of our VM

290
00:13:45,050 --> 00:13:46,730
technology already so you can go look at

291
00:13:46,730 --> 00:13:48,820
it on github right now there's

292
00:13:48,820 --> 00:13:50,750
approximately eight hundred thousand

293
00:13:50,750 --> 00:13:53,210
lines of code there this part is

294
00:13:53,210 --> 00:13:57,590
actually the language agnostic parts of

295
00:13:57,590 --> 00:14:00,920
our G of our VM so if you look at a

296
00:14:00,920 --> 00:14:04,700
garbage collector how you walk you have

297
00:14:04,700 --> 00:14:06,320
to know what routes and what the shape

298
00:14:06,320 --> 00:14:09,020
of your objects are but marking and

299
00:14:09,020 --> 00:14:10,700
continuing to go find everything

300
00:14:10,700 --> 00:14:12,440
recursively those parts sweeping your

301
00:14:12,440 --> 00:14:14,150
memory giving it reclaiming that stuff

302
00:14:14,150 --> 00:14:17,030
that's very common there's no language

303
00:14:17,030 --> 00:14:20,120
specific parts to that so as we were

304
00:14:20,120 --> 00:14:22,340
looking at this over the last few years

305
00:14:22,340 --> 00:14:24,380
we decided well let's take all of these

306
00:14:24,380 --> 00:14:25,760
parts out and we can make them available

307
00:14:25,760 --> 00:14:30,470
as a toolkit for other runtimes so part

308
00:14:30,470 --> 00:14:32,180
of our open j9 will actually be

309
00:14:32,180 --> 00:14:34,250
consuming om R because that's what we're

310
00:14:34,250 --> 00:14:36,170
actually doing internally now every

311
00:14:36,170 --> 00:14:38,030
change that happens on github shows up

312
00:14:38,030 --> 00:14:41,150
in the IBM JDK builds usually the same

313
00:14:41,150 --> 00:14:46,040
night happening internally so right now

314
00:14:46,040 --> 00:14:47,420
this is sort of the quick components

315
00:14:47,420 --> 00:14:49,100
that are out there in the eclipse

316
00:14:49,100 --> 00:14:49,700
project

317
00:14:49,700 --> 00:14:52,540
it's our porting threading libraries I

318
00:14:52,540 --> 00:14:56,570
call it VM but it's just sort of pieces

319
00:14:56,570 --> 00:14:57,800
of data you'd have to know about like

320
00:14:57,800 --> 00:15:00,860
some thread information or the actual VM

321
00:15:00,860 --> 00:15:02,240
structure so things that we need global

322
00:15:02,240 --> 00:15:04,070
data to be able to talk and communicate

323
00:15:04,070 --> 00:15:06,950
between the components our GC the

324
00:15:06,950 --> 00:15:10,490
compiler JIT builder which is another

325
00:15:10,490 --> 00:15:12,440
project that we're doing to make using a

326
00:15:12,440 --> 00:15:15,290
JIT for your language easier and then

327
00:15:15,290 --> 00:15:19,010
trace efi tests and just a few others

328
00:15:19,010 --> 00:15:20,420
but like I said it's approximately like

329
00:15:20,420 --> 00:15:21,980
800 thousand lines of code out there

330
00:15:21,980 --> 00:15:30,160
already so to kind of move on to open j9

331
00:15:30,160 --> 00:15:34,130
this is like quote from our CEO at the

332
00:15:34,130 --> 00:15:40,700
time maybe still is that IBM is really

333
00:15:40,700 --> 00:15:44,540
focused on growing partnerships and the

334
00:15:44,540 --> 00:15:45,710
open source communities that were

335
00:15:45,710 --> 00:15:47,570
involved in and we're actively trying to

336
00:15:47,570 --> 00:15:49,970
be involved in more communities it's

337
00:15:49,970 --> 00:15:54,980
very key to how she believes how IBM and

338
00:15:54,980 --> 00:15:56,750
I actually myself believe that's kind of

339
00:15:56,750 --> 00:15:58,220
the key way that we're gonna move

340
00:15:58,220 --> 00:16:00,020
forward with a lot of our technologies a

341
00:16:00,020 --> 00:16:01,790
lot of the open source projects out

342
00:16:01,790 --> 00:16:03,590
there are really driving the innovation

343
00:16:03,590 --> 00:16:06,740
in a lot of areas so we want to be out

344
00:16:06,740 --> 00:16:08,750
be apart and hopefully helping drive

345
00:16:08,750 --> 00:16:12,470
some of that innovation through these

346
00:16:12,470 --> 00:16:16,790
different projects so why really are we

347
00:16:16,790 --> 00:16:19,970
doing open j9 I just said it's good I

348
00:16:19,970 --> 00:16:22,340
think it's a reasonable thing but the

349
00:16:22,340 --> 00:16:25,100
biggest one for us is collaboration so

350
00:16:25,100 --> 00:16:26,570
anytime we want to work with a partner

351
00:16:26,570 --> 00:16:29,630
work with universities work with the

352
00:16:29,630 --> 00:16:32,810
actual rest of the Java community we're

353
00:16:32,810 --> 00:16:34,430
behind a closed door like there's

354
00:16:34,430 --> 00:16:35,960
basically a wall in front of us that

355
00:16:35,960 --> 00:16:38,510
we're shouting over top maybe hearing

356
00:16:38,510 --> 00:16:40,970
some of the details coming back so this

357
00:16:40,970 --> 00:16:42,950
really will allow us to be out there and

358
00:16:42,950 --> 00:16:44,590
actually collaborate with everybody

359
00:16:44,590 --> 00:16:46,640
including the rest of the open JDK

360
00:16:46,640 --> 00:16:51,530
community on a really high level we're

361
00:16:51,530 --> 00:16:54,110
hoping that it also will help with rapid

362
00:16:54,110 --> 00:16:58,760
innovation if you look at early 2000s to

363
00:16:58,760 --> 00:17:01,160
mid 2000s when the Java benchmark Wars

364
00:17:01,160 --> 00:17:02,930
were going on having multiple

365
00:17:02,930 --> 00:17:05,540
independent VMS all competing to show

366
00:17:05,540 --> 00:17:07,910
the best performance you saw Java make

367
00:17:07,910 --> 00:17:09,920
huge strides in performance over those

368
00:17:09,920 --> 00:17:12,349
years so we're hoping that by having

369
00:17:12,349 --> 00:17:14,690
multiple VMs on the open now it can

370
00:17:14,690 --> 00:17:17,089
actually help with the collaboration and

371
00:17:17,089 --> 00:17:19,819
innovation at that level by about having

372
00:17:19,819 --> 00:17:24,040
both of them or multiple VMs out there

373
00:17:28,089 --> 00:17:33,980
so the wear of open j9 so I just said we

374
00:17:33,980 --> 00:17:35,360
really want to collaborate with the

375
00:17:35,360 --> 00:17:37,580
community we're hoping that there's that

376
00:17:37,580 --> 00:17:39,860
we can actually have the open j9 project

377
00:17:39,860 --> 00:17:42,649
become a part of the open JDK project or

378
00:17:42,649 --> 00:17:48,169
be a project project on open JDK so

379
00:17:48,169 --> 00:17:50,809
right now we always take a bunch of the

380
00:17:50,809 --> 00:17:53,870
open JDK class libraries mix in our VM

381
00:17:53,870 --> 00:17:55,940
and that's currently how the IBM product

382
00:17:55,940 --> 00:17:58,070
happens what we'd actually like to do is

383
00:17:58,070 --> 00:18:02,809
consume open JDK and then just turn that

384
00:18:02,809 --> 00:18:05,179
into our product which in the end but if

385
00:18:05,179 --> 00:18:07,850
we were using open j9 as part of it that

386
00:18:07,850 --> 00:18:09,500
would also be consuming in our Alomar

387
00:18:09,500 --> 00:18:12,830
clearly but this is kind of where we

388
00:18:12,830 --> 00:18:18,649
would like to be in the end so if we

389
00:18:18,649 --> 00:18:20,690
were there the how of what how would you

390
00:18:20,690 --> 00:18:23,330
actually do something this isn't a for

391
00:18:23,330 --> 00:18:24,919
sure this is kind of just our of

392
00:18:24,919 --> 00:18:27,139
thinking along the lines right now or my

393
00:18:27,139 --> 00:18:28,370
thinking at this point when I put the

394
00:18:28,370 --> 00:18:30,740
slides together is if you actually

395
00:18:30,740 --> 00:18:35,539
cloned the open JDK repo there's this

396
00:18:35,539 --> 00:18:37,490
get sources script there already that

397
00:18:37,490 --> 00:18:39,289
will go and get you with the whole rest

398
00:18:39,289 --> 00:18:42,649
of the forest so that you can go and

399
00:18:42,649 --> 00:18:46,909
compile the JDK product itself we would

400
00:18:46,909 --> 00:18:48,080
actually like to just be able to plug

401
00:18:48,080 --> 00:18:50,059
into that so you can get the j9 sources

402
00:18:50,059 --> 00:18:51,980
as part of that if we were on the

403
00:18:51,980 --> 00:18:55,429
project at that point then you could

404
00:18:55,429 --> 00:18:58,880
just configure maybe a simple option

405
00:18:58,880 --> 00:19:01,100
like this like with open j9 and then

406
00:19:01,100 --> 00:19:03,019
when you did your regular compile you

407
00:19:03,019 --> 00:19:04,880
would actually just be fully compiled

408
00:19:04,880 --> 00:19:07,970
and running j9 a simple make clean and a

409
00:19:07,970 --> 00:19:10,279
configure with hotspot or without this

410
00:19:10,279 --> 00:19:13,460
and you could be using the other VM so

411
00:19:13,460 --> 00:19:15,200
this is kind of where we would like to

412
00:19:15,200 --> 00:19:19,990
end up ourselves for the open j9 project

413
00:19:19,990 --> 00:19:23,990
when we're doing all of this development

414
00:19:23,990 --> 00:19:26,570
work alongside of our Java 9 development

415
00:19:26,570 --> 00:19:28,039
work so it's just actually our

416
00:19:28,039 --> 00:19:29,690
developers trying to make progress on

417
00:19:29,690 --> 00:19:33,760
getting the code ready going through

418
00:19:33,760 --> 00:19:35,779
cleaning everything up so that we could

419
00:19:35,779 --> 00:19:39,500
open source it so that is but

420
00:19:39,500 --> 00:19:41,149
also having the developers ooh that's

421
00:19:41,149 --> 00:19:42,799
kind of keeping us honest anything we do

422
00:19:42,799 --> 00:19:46,519
to get ready to go out is also being

423
00:19:46,519 --> 00:19:48,350
consumed right back into our products so

424
00:19:48,350 --> 00:19:49,820
it's kind of making sure that whenever

425
00:19:49,820 --> 00:19:51,679
we do deliver something to open j9 it

426
00:19:51,679 --> 00:19:53,690
will be working it will be the exact

427
00:19:53,690 --> 00:19:55,370
code that we're shipping and our Javon

428
00:19:55,370 --> 00:19:57,860
I'm project and so we're hoping to have

429
00:19:57,860 --> 00:19:59,779
the initial release around the time of

430
00:19:59,779 --> 00:20:06,649
Java 9ga so kind of in closing so for

431
00:20:06,649 --> 00:20:09,889
open source as a team and organization

432
00:20:09,889 --> 00:20:11,960
at IBM runtimes we really want to be

433
00:20:11,960 --> 00:20:15,049
doing most of our work in the open we've

434
00:20:15,049 --> 00:20:16,399
already started with the Eclipse alum

435
00:20:16,399 --> 00:20:18,559
our project and hopefully this year we

436
00:20:18,559 --> 00:20:23,960
also have the open j9 project coming any

437
00:20:23,960 --> 00:20:26,440
questions

438
00:20:27,320 --> 00:20:30,428
first go

439
00:20:38,790 --> 00:20:41,260
so that was the slide where us talking

440
00:20:41,260 --> 00:20:43,870
about the when we supported Emmy if I go

441
00:20:43,870 --> 00:20:46,870
back you only have one hot spot oh do

442
00:20:46,870 --> 00:20:49,330
you only have one one one voter machine

443
00:20:49,330 --> 00:20:51,520
serving all the duty case and I wonder

444
00:20:51,520 --> 00:20:53,110
what is all this correctly yes correct

445
00:20:53,110 --> 00:20:56,500
yes how is this working for you so some

446
00:20:56,500 --> 00:20:59,470
of it is compiled time decisions so it's

447
00:20:59,470 --> 00:21:02,679
it's one code base so some of the

448
00:21:02,679 --> 00:21:05,380
decisions and we have some of the core

449
00:21:05,380 --> 00:21:08,100
classes ourselves that we provide so

450
00:21:08,100 --> 00:21:10,660
yeah it's basically compiled time with a

451
00:21:10,660 --> 00:21:15,910
few runtime decisions based as well here

452
00:21:15,910 --> 00:21:18,610
so what about license issues you'd have

453
00:21:18,610 --> 00:21:20,230
young you're afraid of combining the

454
00:21:20,230 --> 00:21:23,110
Apache code this gplv2 in class pass in

455
00:21:23,110 --> 00:21:27,010
the class library I don't actually have

456
00:21:27,010 --> 00:21:29,160
much details on that I'm not a lawyer

457
00:21:29,160 --> 00:21:32,350
I'm going forward with this is where we

458
00:21:32,350 --> 00:21:34,210
would like to be this is kind of what we

459
00:21:34,210 --> 00:21:37,540
want I'm hoping other people can make

460
00:21:37,540 --> 00:21:39,340
that sort of decision or figure out how

461
00:21:39,340 --> 00:21:43,990
to make that work for us okay sorry

462
00:21:43,990 --> 00:21:54,429
there that's j9 super GPU of a flute yes

463
00:21:54,429 --> 00:21:59,520
yeah yeah eyes of Java 8 we have GPU

464
00:22:01,919 --> 00:22:04,299
what platforms are you planning to

465
00:22:04,299 --> 00:22:08,260
support initially so the first version

466
00:22:08,260 --> 00:22:10,840
that we get out there will support the

467
00:22:10,840 --> 00:22:12,730
three linda sees that we support so

468
00:22:12,730 --> 00:22:16,900
linux x86 Linux PowerPC and Linux 390

469
00:22:16,900 --> 00:22:19,390
that'll be these starting just to get

470
00:22:19,390 --> 00:22:21,700
something out going and then we'll fill

471
00:22:21,700 --> 00:22:23,140
in the rest of the platforms as we go

472
00:22:23,140 --> 00:22:25,410
forward

473
00:22:28,000 --> 00:22:34,450
I just wondered you could just start off

474
00:22:34,450 --> 00:22:37,480
by OpenJDK and and then like you

475
00:22:37,480 --> 00:22:39,610
 off open GK with with an additional

476
00:22:39,610 --> 00:22:41,860
built option or would that be an option

477
00:22:41,860 --> 00:22:46,150
to set your way you are going I don't

478
00:22:46,150 --> 00:22:47,320
think we're quite at that point of

479
00:22:47,320 --> 00:22:48,700
deciding if we would for can do

480
00:22:48,700 --> 00:22:51,670
something there I suppose that could be

481
00:22:51,670 --> 00:22:55,840
an option but I guess there's just more

482
00:22:55,840 --> 00:22:57,160
talking and we'll figure out where we're

483
00:22:57,160 --> 00:23:12,250
gonna really land what do you call a j9

484
00:23:12,250 --> 00:23:17,290
when the Java 10 comes out and more

485
00:23:17,290 --> 00:23:18,970
importantly if you strip the version

486
00:23:18,970 --> 00:23:20,530
numbers you just have J is that not a

487
00:23:20,530 --> 00:23:24,630
little bit confusing with open J OpenJDK

488
00:23:24,630 --> 00:23:28,510
yeah the j 9 comes from a long time

489
00:23:28,510 --> 00:23:31,660
histories for the code name we're

490
00:23:31,660 --> 00:23:35,050
calling it open j 9 right now it could

491
00:23:35,050 --> 00:23:36,940
change to something that isn't quite as

492
00:23:36,940 --> 00:23:38,980
confusing for especially around you have

493
00:23:38,980 --> 00:23:48,670
a nine-time is the goal to have

494
00:23:48,670 --> 00:23:50,140
everything open source or there going to

495
00:23:50,140 --> 00:23:51,730
be like commercial features stuff like

496
00:23:51,730 --> 00:23:54,310
this which are separate currently right

497
00:23:54,310 --> 00:23:57,670
now as far as I understand is not to be

498
00:23:57,670 --> 00:24:00,310
any extra we're gonna open source

499
00:24:00,310 --> 00:24:02,800
everything that we ship right now if

500
00:24:02,800 --> 00:24:05,350
there is extra applications or other

501
00:24:05,350 --> 00:24:07,510
things that ship as part of our

502
00:24:07,510 --> 00:24:10,960
dedicated they may be separate but as

503
00:24:10,960 --> 00:24:12,430
far as I know most of the code we'll all

504
00:24:12,430 --> 00:24:16,420
just go out is the open source ok I

505
00:24:16,420 --> 00:24:19,330
think I'm actually over so I will stop

506
00:24:19,330 --> 00:24:21,090
here guys

507
00:24:21,090 --> 00:24:25,560
[Applause]

