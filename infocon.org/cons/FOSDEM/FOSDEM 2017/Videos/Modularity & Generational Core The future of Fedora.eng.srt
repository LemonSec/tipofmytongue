1
00:00:04,730 --> 00:00:07,530
so everyone this is Peter my name is

2
00:00:07,530 --> 00:00:09,570
Adam we're from Red Hat and we are

3
00:00:09,570 --> 00:00:11,340
working on a project called Fedora

4
00:00:11,340 --> 00:00:13,770
modularity by the way we have stickers

5
00:00:13,770 --> 00:00:15,930
for you so if you come here after the

6
00:00:15,930 --> 00:00:20,820
talk you can get one or two yeah

7
00:00:20,820 --> 00:00:23,220
only 25 but that's fine so I'm not sure

8
00:00:23,220 --> 00:00:26,910
who of you was on language talk last

9
00:00:26,910 --> 00:00:28,920
year here enforce them he was talking

10
00:00:28,920 --> 00:00:31,710
about how distributions are great but

11
00:00:31,710 --> 00:00:34,260
not really and how many might need to

12
00:00:34,260 --> 00:00:38,879
change them to to be ready for the

13
00:00:38,879 --> 00:00:41,550
future so let's start with why I they

14
00:00:41,550 --> 00:00:43,649
are great because I think that's still

15
00:00:43,649 --> 00:00:46,350
true they should package software which

16
00:00:46,350 --> 00:00:48,989
means it's pretty easy to install they

17
00:00:48,989 --> 00:00:51,659
also ship dependencies and everything

18
00:00:51,659 --> 00:00:54,149
else with it so it just works the

19
00:00:54,149 --> 00:00:57,149
integrated untested so nothing breaks

20
00:00:57,149 --> 00:01:02,100
really and some important thing it's

21
00:01:02,100 --> 00:01:03,690
also paste for security vulnerabilities

22
00:01:03,690 --> 00:01:06,000
because brings up if you are a developer

23
00:01:06,000 --> 00:01:07,440
and you're developing your application

24
00:01:07,440 --> 00:01:09,090
which is included in the distribution

25
00:01:09,090 --> 00:01:11,880
you might not have pretty much time to

26
00:01:11,880 --> 00:01:14,600
patch for some security holes so

27
00:01:14,600 --> 00:01:16,409
distributions can do it for you

28
00:01:16,409 --> 00:01:19,890
and this does have a life span which

29
00:01:19,890 --> 00:01:21,810
basically means they're released at some

30
00:01:21,810 --> 00:01:24,240
point die at some point this is for

31
00:01:24,240 --> 00:01:26,700
example Fedora and if we have if you

32
00:01:26,700 --> 00:01:29,250
have a look at bit more detail we can

33
00:01:29,250 --> 00:01:31,320
see that I for example distribution

34
00:01:31,320 --> 00:01:33,930
version one it includes some libraries

35
00:01:33,930 --> 00:01:38,250
and software which is pretty much frozen

36
00:01:38,250 --> 00:01:40,020
for the whole lifetime and then I have

37
00:01:40,020 --> 00:01:42,149
another distribution another version and

38
00:01:42,149 --> 00:01:45,450
the same story there this is fine but

39
00:01:45,450 --> 00:01:47,579
there are some problems because for

40
00:01:47,579 --> 00:01:50,729
example applications are released at

41
00:01:50,729 --> 00:01:52,380
their own pace independent of

42
00:01:52,380 --> 00:01:56,549
distributions and they can also come in

43
00:01:56,549 --> 00:02:00,299
multiple versions which means conflicts

44
00:02:00,299 --> 00:02:03,719
right distributions often include only

45
00:02:03,719 --> 00:02:05,460
one version of every application because

46
00:02:05,460 --> 00:02:06,899
they go dependencies they can configure

47
00:02:06,899 --> 00:02:08,220
to each other and it would be impossible

48
00:02:08,220 --> 00:02:11,610
to install so we need to choose a

49
00:02:11,610 --> 00:02:14,360
version but how to choose the right one

50
00:02:14,360 --> 00:02:17,530
that's a tricky question

51
00:02:17,530 --> 00:02:19,630
because for example if you are developer

52
00:02:19,630 --> 00:02:22,750
you might prefer this one fast and

53
00:02:22,750 --> 00:02:25,090
latest because that's what developers

54
00:02:25,090 --> 00:02:27,130
want but if your assist admin for

55
00:02:27,130 --> 00:02:29,010
example you're running an application

56
00:02:29,010 --> 00:02:32,980
you don't want it to change so much

57
00:02:32,980 --> 00:02:37,600
right so you might prefer the other

58
00:02:37,600 --> 00:02:42,459
scenario so I guess the right answer we

59
00:02:42,459 --> 00:02:43,690
need all of them we can't just choose

60
00:02:43,690 --> 00:02:47,110
one but how to do it well there are

61
00:02:47,110 --> 00:02:50,530
several several solutions to this so for

62
00:02:50,530 --> 00:02:54,430
example we can have distribution on a

63
00:02:54,430 --> 00:02:57,340
fast track and another one which is bit

64
00:02:57,340 --> 00:02:59,530
slower so for example this can be fedora

65
00:02:59,530 --> 00:03:02,380
this can be sent to us or we're going to

66
00:03:02,380 --> 00:03:03,580
go to LTS

67
00:03:03,580 --> 00:03:06,850
if I'm a bit more crazy maybe I can have

68
00:03:06,850 --> 00:03:11,440
continuous upgrades but this still

69
00:03:11,440 --> 00:03:12,760
doesn't allow me to mix and match

70
00:03:12,760 --> 00:03:16,720
versions as I want so the solutions are

71
00:03:16,720 --> 00:03:18,070
software collections how many of you

72
00:03:18,070 --> 00:03:20,739
heard about software collections all

73
00:03:20,739 --> 00:03:23,350
right so that's like half so software

74
00:03:23,350 --> 00:03:26,680
collections are kind of special packages

75
00:03:26,680 --> 00:03:29,280
which enter software in a separate space

76
00:03:29,280 --> 00:03:32,920
so I can install like more versions of

77
00:03:32,920 --> 00:03:35,799
the software on the system but it's

78
00:03:35,799 --> 00:03:39,450
pretty hacky he doesn't work always so

79
00:03:39,450 --> 00:03:43,360
that's a solution but not ideal another

80
00:03:43,360 --> 00:03:46,480
thing would be Linux containers who of

81
00:03:46,480 --> 00:03:49,840
you know Linux containers almost

82
00:03:49,840 --> 00:03:50,350
everyone

83
00:03:50,350 --> 00:03:52,390
that's great so yeah you know it's an

84
00:03:52,390 --> 00:03:55,299
isolated space which looks like system

85
00:03:55,299 --> 00:04:00,310
and it's for single application and I

86
00:04:00,310 --> 00:04:01,840
can run multiple containers on system

87
00:04:01,840 --> 00:04:05,980
but sometimes if I put stuff in the

88
00:04:05,980 --> 00:04:08,950
container I need to look after for it I

89
00:04:08,950 --> 00:04:11,040
might have problems with updates and

90
00:04:11,040 --> 00:04:13,720
still I'm building containers out of a

91
00:04:13,720 --> 00:04:16,720
single distribution so if I install some

92
00:04:16,720 --> 00:04:19,298
different version of something this can

93
00:04:19,298 --> 00:04:24,010
be conflicted as well so that's we

94
00:04:24,010 --> 00:04:26,050
that's why we are working on modularity

95
00:04:26,050 --> 00:04:27,820
which kind of combines everything

96
00:04:27,820 --> 00:04:29,380
together

97
00:04:29,380 --> 00:04:32,650
and now I have like one minute animation

98
00:04:32,650 --> 00:04:35,410
with subtitles so I won't be talking so

99
00:04:35,410 --> 00:04:38,160
if you could preserve it

100
00:04:44,820 --> 00:04:50,130
or you can just read this away so this

101
00:04:50,130 --> 00:04:51,510
is a talk I'm not supposed to be talking

102
00:04:51,510 --> 00:04:53,930
here

103
00:05:08,599 --> 00:05:11,089
all right so that's basically it so it

104
00:05:11,089 --> 00:05:12,199
will look like this we will have

105
00:05:12,199 --> 00:05:15,830
something some something called base run

106
00:05:15,830 --> 00:05:17,659
time it's just a neat system with a

107
00:05:17,659 --> 00:05:20,899
pretty long life cycle and another

108
00:05:20,899 --> 00:05:27,169
software and this will be like how do

109
00:05:27,169 --> 00:05:28,719
you call it in English

110
00:05:28,719 --> 00:05:30,949
independence sorry independent of the

111
00:05:30,949 --> 00:05:34,219
distribution right so as I said based on

112
00:05:34,219 --> 00:05:35,990
time this is what Peters going to talk

113
00:05:35,990 --> 00:05:39,349
about which is a small system containing

114
00:05:39,349 --> 00:05:41,990
software with proven API stability like

115
00:05:41,990 --> 00:05:44,779
kernel and GFC and some kind some basic

116
00:05:44,779 --> 00:05:49,069
tools to make it boot and the software

117
00:05:49,069 --> 00:05:52,599
you run as a module and module is

118
00:05:52,599 --> 00:05:55,039
similar concept to Android applications

119
00:05:55,039 --> 00:05:56,990
or iPhone applications so it's pretty

120
00:05:56,990 --> 00:05:59,119
independent on the system and it

121
00:05:59,119 --> 00:06:00,999
includes all the dependencies in itself

122
00:06:00,999 --> 00:06:05,719
and as I said modules are like

123
00:06:05,719 --> 00:06:07,999
applications so it can be database it

124
00:06:07,999 --> 00:06:09,860
can be Firefox but it can be also lamb

125
00:06:09,860 --> 00:06:12,289
stack or basically any group of packages

126
00:06:12,289 --> 00:06:16,249
and it will looks like this so I will

127
00:06:16,249 --> 00:06:19,159
have packages and some metadata and I

128
00:06:19,159 --> 00:06:23,059
can also have packages as an API and as

129
00:06:23,059 --> 00:06:26,059
a dependencies which the difference is

130
00:06:26,059 --> 00:06:27,800
that if I for example have a Firefox

131
00:06:27,800 --> 00:06:30,349
module the Firefox package will be API

132
00:06:30,349 --> 00:06:32,329
this is the only package I care for but

133
00:06:32,329 --> 00:06:34,509
I can have dependencies libraries etc

134
00:06:34,509 --> 00:06:37,759
which are not guaranteed to be stable

135
00:06:37,759 --> 00:06:40,159
but uses one care about this users care

136
00:06:40,159 --> 00:06:43,209
only about the API

137
00:06:43,740 --> 00:06:48,030
and modules are defined as a by module

138
00:06:48,030 --> 00:06:51,479
MD file and it basically defines

139
00:06:51,479 --> 00:06:53,400
everything we shall show you right now

140
00:06:53,400 --> 00:06:56,940
so this dimaggio md it's kind of cut off

141
00:06:56,940 --> 00:06:58,860
on the top but there's nothing important

142
00:06:58,860 --> 00:07:01,530
the important is that we have some name

143
00:07:01,530 --> 00:07:03,840
string version which is an ID of the of

144
00:07:03,840 --> 00:07:09,449
the module description licensing some

145
00:07:09,449 --> 00:07:11,100
references where the project lives

146
00:07:11,100 --> 00:07:15,020
backtracking so optional metadata and

147
00:07:15,020 --> 00:07:18,840
here is the important part so I have

148
00:07:18,840 --> 00:07:21,300
dependencies there is the base runtime

149
00:07:21,300 --> 00:07:26,009
and to build it up build requires which

150
00:07:26,009 --> 00:07:27,570
is based on time and be some time built

151
00:07:27,570 --> 00:07:29,160
I guess Peter will tell you more about

152
00:07:29,160 --> 00:07:33,289
it and this our list of the components

153
00:07:33,289 --> 00:07:36,000
so I can include packages in my module

154
00:07:36,000 --> 00:07:38,520
and I can include another modules in my

155
00:07:38,520 --> 00:07:41,849
module which might be useful for example

156
00:07:41,849 --> 00:07:43,020
if I have an application requiring

157
00:07:43,020 --> 00:07:45,180
Python I don't have to list all the

158
00:07:45,180 --> 00:07:47,430
Python packages I just placed the Python

159
00:07:47,430 --> 00:07:53,880
module and in the RPM world if I have a

160
00:07:53,880 --> 00:07:55,919
source package I can build multiple

161
00:07:55,919 --> 00:08:00,198
binary packages of it but

162
00:08:01,170 --> 00:08:04,030
I'm sorry so in the appian world

163
00:08:04,030 --> 00:08:06,070
I have source RPM packages which are

164
00:08:06,070 --> 00:08:07,540
packages containing the source code and

165
00:08:07,540 --> 00:08:09,100
if I build it I can build multiple

166
00:08:09,100 --> 00:08:12,700
binaries and I don't want to probably

167
00:08:12,700 --> 00:08:14,230
include all the binaries they can be

168
00:08:14,230 --> 00:08:16,480
develop acquisition and stuff so I can

169
00:08:16,480 --> 00:08:19,960
filter them thanks to this filter here I

170
00:08:19,960 --> 00:08:24,790
can specify the RPMs API and in the

171
00:08:24,790 --> 00:08:26,800
future there will be more types of IP I

172
00:08:26,800 --> 00:08:30,400
just then notice rpms and also something

173
00:08:30,400 --> 00:08:31,870
called install profile which is

174
00:08:31,870 --> 00:08:34,750
interesting it basically explains how to

175
00:08:34,750 --> 00:08:36,760
install the module and I can have more

176
00:08:36,760 --> 00:08:39,760
ways to installing so for example if I

177
00:08:39,760 --> 00:08:42,039
have web server I can install it as a

178
00:08:42,039 --> 00:08:48,580
production or as a developer with bit

179
00:08:48,580 --> 00:08:51,760
different configuration so that was

180
00:08:51,760 --> 00:08:56,440
module MD and module on D is modules are

181
00:08:56,440 --> 00:08:59,220
built in something called factory 2.0 I

182
00:08:59,220 --> 00:09:02,080
don't have time to talk about Factory

183
00:09:02,080 --> 00:09:04,150
2.0 but if you can google for example or

184
00:09:04,150 --> 00:09:07,000
find chalk recordings from Def Con which

185
00:09:07,000 --> 00:09:10,210
was like last week last week you can

186
00:09:10,210 --> 00:09:12,000
find some interesting stuff about that

187
00:09:12,000 --> 00:09:15,000
and

188
00:09:15,450 --> 00:09:18,480
yeah and we build and modules are

189
00:09:18,480 --> 00:09:21,120
delivered as multiple artifacts which

190
00:09:21,120 --> 00:09:22,950
can be rpm Reaper willingness container

191
00:09:22,950 --> 00:09:26,910
flat packs or s3 I saw whatever and the

192
00:09:26,910 --> 00:09:28,560
distribution when we put it back

193
00:09:28,560 --> 00:09:30,090
together will look similar to this

194
00:09:30,090 --> 00:09:33,570
picture so I have based on time the

195
00:09:33,570 --> 00:09:35,160
minimal system which we'll be talking

196
00:09:35,160 --> 00:09:38,340
about and I have the modules running on

197
00:09:38,340 --> 00:09:42,900
the system in this example I have RPM

198
00:09:42,900 --> 00:09:46,140
packages here and container images here

199
00:09:46,140 --> 00:09:51,960
and as we can see as I say the module

200
00:09:51,960 --> 00:09:53,670
contains packages and all the

201
00:09:53,670 --> 00:10:00,120
dependencies right so there are some

202
00:10:00,120 --> 00:10:02,460
challenges how to deal with for example

203
00:10:02,460 --> 00:10:04,650
conflicting packages in these two

204
00:10:04,650 --> 00:10:08,460
scenarios so that's why we use

205
00:10:08,460 --> 00:10:09,960
technology similar software collections

206
00:10:09,960 --> 00:10:12,980
to avoid that or we can use containers

207
00:10:12,980 --> 00:10:15,980
and

208
00:10:17,260 --> 00:10:19,510
what you guys use rpms or containers

209
00:10:19,510 --> 00:10:21,760
well I don't really care because the

210
00:10:21,760 --> 00:10:24,250
reckful can be pretty similar so for

211
00:10:24,250 --> 00:10:27,730
example this is pretty bad I will just

212
00:10:27,730 --> 00:10:30,040
make the window yeah

213
00:10:30,040 --> 00:10:33,580
so in Fedora we use DNF to install

214
00:10:33,580 --> 00:10:35,650
software so I can type the NF installed

215
00:10:35,650 --> 00:10:39,660
httpd which is a web server I can

216
00:10:39,660 --> 00:10:42,250
configure it by editing the

217
00:10:42,250 --> 00:10:46,260
configuration file I can add my

218
00:10:46,260 --> 00:10:49,810
index.html and I can be a system control

219
00:10:49,810 --> 00:10:52,450
style httpd so that's the workflow in

220
00:10:52,450 --> 00:10:54,250
current fedora this can be the workflow

221
00:10:54,250 --> 00:10:59,650
in the module fedora and I can say if

222
00:10:59,650 --> 00:11:01,690
it's container or RPM packages it's

223
00:11:01,690 --> 00:11:04,300
really pretty same for both and maybe

224
00:11:04,300 --> 00:11:06,640
even few days later I can the end of

225
00:11:06,640 --> 00:11:09,310
updates so the workflow will stay the

226
00:11:09,310 --> 00:11:12,580
same even with modules which is I guess

227
00:11:12,580 --> 00:11:19,020
importance so how all of this works

228
00:11:20,970 --> 00:11:24,120
so we focus on the package instead of on

229
00:11:24,120 --> 00:11:26,850
the register version so for example in

230
00:11:26,850 --> 00:11:29,430
Fedora East we store all the packages in

231
00:11:29,430 --> 00:11:33,410
this gate which is distribution gate and

232
00:11:33,410 --> 00:11:36,390
each package has similar has several

233
00:11:36,390 --> 00:11:39,090
branches so for example F 24 F 25 which

234
00:11:39,090 --> 00:11:43,680
is like Fedora 24 or 25 or 26 and we

235
00:11:43,680 --> 00:11:46,770
want to change that to reflect the

236
00:11:46,770 --> 00:11:47,940
package so for example I can have

237
00:11:47,940 --> 00:11:50,280
package and have branches according to

238
00:11:50,280 --> 00:11:54,950
the versions so instead of building

239
00:11:54,950 --> 00:11:57,450
distribution versions from the list

240
00:11:57,450 --> 00:12:00,630
gates so taking like all the branches of

241
00:12:00,630 --> 00:12:04,370
24 to build 4.25 and talking all the

242
00:12:04,370 --> 00:12:06,750
f-35 branches to build fill about 20

243
00:12:06,750 --> 00:12:12,030
sorry 585 I can use modules to build

244
00:12:12,030 --> 00:12:17,850
modules yeah so I can in the module MD I

245
00:12:17,850 --> 00:12:20,580
can specify packages I want to include

246
00:12:20,580 --> 00:12:22,500
in a module and I can just mix and match

247
00:12:22,500 --> 00:12:25,620
whatever I want and then I can install

248
00:12:25,620 --> 00:12:28,320
it on base runtime we call it module

249
00:12:28,320 --> 00:12:35,540
streams and that that's like very end of

250
00:12:35,540 --> 00:12:38,430
the module we don't call it versions

251
00:12:38,430 --> 00:12:42,030
because in some cases it will be true

252
00:12:42,030 --> 00:12:45,150
but if I for example I'm stack I can't

253
00:12:45,150 --> 00:12:46,830
say what this version of lamps like

254
00:12:46,830 --> 00:12:48,090
because I have version of database a

255
00:12:48,090 --> 00:12:50,730
version of PHP so that's why we call it

256
00:12:50,730 --> 00:12:52,560
streams and these are basically just

257
00:12:52,560 --> 00:12:56,760
variants of the modules and before you

258
00:12:56,760 --> 00:12:59,910
install you will be able to choose the

259
00:12:59,910 --> 00:13:03,030
right version or you can just download

260
00:13:03,030 --> 00:13:05,940
ISO with the versions pre-selected so

261
00:13:05,940 --> 00:13:07,680
there's experienceable kind of same like

262
00:13:07,680 --> 00:13:10,620
with federal today

263
00:13:10,620 --> 00:13:14,610
and you can use DNF DNF update will work

264
00:13:14,610 --> 00:13:18,480
it will keep your system up-to-date so

265
00:13:18,480 --> 00:13:21,660
that's basically it about the module

266
00:13:21,660 --> 00:13:23,280
destroy and now but I will tell you

267
00:13:23,280 --> 00:13:24,900
something about the base one time which

268
00:13:24,900 --> 00:13:27,740
is the minimal system

269
00:13:32,230 --> 00:13:34,450
you give me a microphone I can give you

270
00:13:34,450 --> 00:13:36,899
a microphone

271
00:13:55,910 --> 00:14:03,170
I guess I'll just hold it okay so a

272
00:14:03,170 --> 00:14:06,560
sudden mentioned the bass runtime is a

273
00:14:06,560 --> 00:14:08,510
module that sits below all the other

274
00:14:08,510 --> 00:14:11,140
modules all the other specs that we have

275
00:14:11,140 --> 00:14:13,760
this part is main generational core

276
00:14:13,760 --> 00:14:15,650
though so I will provide some background

277
00:14:15,650 --> 00:14:17,450
on what generational quarry is but base

278
00:14:17,450 --> 00:14:18,950
one time really is and the difference

279
00:14:18,950 --> 00:14:22,700
between them based runtime was

280
00:14:22,700 --> 00:14:24,950
originally meant to be only the the

281
00:14:24,950 --> 00:14:27,230
lower layer of the abyss diagram

282
00:14:27,230 --> 00:14:28,820
it was meant to provide hardware

283
00:14:28,820 --> 00:14:30,950
abstraction layer with system tools

284
00:14:30,950 --> 00:14:33,410
utilities and shirt libraries to be

285
00:14:33,410 --> 00:14:35,390
provided by other modules included in a

286
00:14:35,390 --> 00:14:36,620
stack that we wanted to call the

287
00:14:36,620 --> 00:14:40,340
generational core this initiative is

288
00:14:40,340 --> 00:14:43,070
temporarily on hold however because of

289
00:14:43,070 --> 00:14:46,010
the complexity and the introduction

290
00:14:46,010 --> 00:14:48,830
introduction of modularity to fedora we

291
00:14:48,830 --> 00:14:50,240
don't have all the resources and the

292
00:14:50,240 --> 00:14:53,150
plants and the and the clear idea how to

293
00:14:53,150 --> 00:14:54,440
actually separate it what what

294
00:14:54,440 --> 00:14:56,180
components go into which module and so

295
00:14:56,180 --> 00:15:00,110
on also because the name is quite quite

296
00:15:00,110 --> 00:15:01,910
long and nobody could pronounce it

297
00:15:01,910 --> 00:15:03,080
nobody really understood what

298
00:15:03,080 --> 00:15:06,500
generational meant in this context we

299
00:15:06,500 --> 00:15:09,680
decided to just broaden the definition

300
00:15:09,680 --> 00:15:12,080
based on time itself include some of the

301
00:15:12,080 --> 00:15:14,380
system tools and libraries

302
00:15:14,380 --> 00:15:16,370
naughty-naughty shared libraries layer I

303
00:15:16,370 --> 00:15:20,180
will get to that but basically when we

304
00:15:20,180 --> 00:15:22,760
talk about the base in February 6 we

305
00:15:22,760 --> 00:15:24,890
mean based on time no generation core we

306
00:15:24,890 --> 00:15:27,200
must be may still revisit the idea of

307
00:15:27,200 --> 00:15:30,700
the generation core in the future

308
00:15:32,070 --> 00:15:35,310
so the implementation don't don't worry

309
00:15:35,310 --> 00:15:36,899
about the picture isn't really important

310
00:15:36,899 --> 00:15:39,259
if you can't read it

311
00:15:39,259 --> 00:15:42,329
yeah it's a module like any other it's

312
00:15:42,329 --> 00:15:44,430
defined in a module and e-file it lists

313
00:15:44,430 --> 00:15:45,899
all the components that we want to build

314
00:15:45,899 --> 00:15:48,569
as part of the base one time module it

315
00:15:48,569 --> 00:15:50,610
provides stable and minimal bootable

316
00:15:50,610 --> 00:15:52,680
system on bare metal machines and

317
00:15:52,680 --> 00:15:56,329
virtual machines it also defines the

318
00:15:56,329 --> 00:15:59,069
container based image for both system

319
00:15:59,069 --> 00:16:01,829
system the N spawn and dr. files just

320
00:16:01,829 --> 00:16:05,850
okay the components that we include were

321
00:16:05,850 --> 00:16:08,310
inspired by the LSB curse at POSIX

322
00:16:08,310 --> 00:16:11,670
userland and the atomic host currently

323
00:16:11,670 --> 00:16:14,819
we include 700 binary rpms defined by

324
00:16:14,819 --> 00:16:19,110
roughly 170 source rpms when installed

325
00:16:19,110 --> 00:16:20,610
is a container base image for docker

326
00:16:20,610 --> 00:16:24,810
it's 82 packages and takes roughly 88

327
00:16:24,810 --> 00:16:32,130
member maximum of all this space how we

328
00:16:32,130 --> 00:16:33,930
actually implement it is that we have

329
00:16:33,930 --> 00:16:36,959
this the module I just described which

330
00:16:36,959 --> 00:16:38,550
is something something we want to ship

331
00:16:38,550 --> 00:16:41,010
but we also have to build it somehow so

332
00:16:41,010 --> 00:16:43,050
we have another module called temporary

333
00:16:43,050 --> 00:16:44,670
base one time built environment which

334
00:16:44,670 --> 00:16:46,440
includes all the bill dependencies of

335
00:16:46,440 --> 00:16:48,779
the components in base one time it also

336
00:16:48,779 --> 00:16:50,490
includes all the bill dependencies of

337
00:16:50,490 --> 00:16:52,740
those bill dependencies and all the the

338
00:16:52,740 --> 00:16:54,480
entire records if the bill dependency

339
00:16:54,480 --> 00:16:59,690
chain currently it's roughly 2008 800

340
00:16:59,690 --> 00:17:03,240
packages which one build is roughly six

341
00:17:03,240 --> 00:17:07,349
six thousands binary rpms although we

342
00:17:07,349 --> 00:17:09,240
will ship the base base runtime built

343
00:17:09,240 --> 00:17:11,159
environment we won't be supporting it in

344
00:17:11,159 --> 00:17:13,309
any way and in the future we hope that

345
00:17:13,309 --> 00:17:15,359
parts of the built environment will be

346
00:17:15,359 --> 00:17:17,069
split into into the applications

347
00:17:17,069 --> 00:17:19,380
themselves and based on time we'll build

348
00:17:19,380 --> 00:17:21,179
depend only on itself and the

349
00:17:21,179 --> 00:17:23,130
applications that provide the components

350
00:17:23,130 --> 00:17:25,790
needed to build it

351
00:17:27,049 --> 00:17:33,419
so okay yeah yeah I will I will try yeah

352
00:17:33,419 --> 00:17:37,799
I know I'm just quite speaker so the

353
00:17:37,799 --> 00:17:39,570
challenges that we face when developing

354
00:17:39,570 --> 00:17:43,379
based on time is that there's more than

355
00:17:43,379 --> 00:17:44,970
one way one way to do it actually

356
00:17:44,970 --> 00:17:48,149
so choosing the right content is the

357
00:17:48,149 --> 00:17:50,159
biggest challenge we decided to to go

358
00:17:50,159 --> 00:17:53,639
with the yeah we did that was because

359
00:17:53,639 --> 00:17:57,989
that and yeah timing how certain and the

360
00:17:57,989 --> 00:17:59,669
POSIX user and cert I mentioned in

361
00:17:59,669 --> 00:18:02,279
previously but it's definitely not if

362
00:18:02,279 --> 00:18:05,549
not the finalist we may or may exclude

363
00:18:05,549 --> 00:18:07,710
some of those components or or add

364
00:18:07,710 --> 00:18:13,259
something else to do to it keeping it as

365
00:18:13,259 --> 00:18:14,700
small as possible is important because

366
00:18:14,700 --> 00:18:17,899
we minimize both team memory this space

367
00:18:17,899 --> 00:18:20,580
displays footprint as well as the attack

368
00:18:20,580 --> 00:18:23,460
surface and of course smaller set means

369
00:18:23,460 --> 00:18:26,159
that we can rebuild it more much more

370
00:18:26,159 --> 00:18:30,859
faster and we can also test it faster

371
00:18:31,190 --> 00:18:34,200
another problem is building the whole

372
00:18:34,200 --> 00:18:34,619
set

373
00:18:34,619 --> 00:18:37,379
we started with Fedora beta federal 25

374
00:18:37,379 --> 00:18:40,409
beta and just hope that selected those

375
00:18:40,409 --> 00:18:42,239
3,000 packages we needed for the for the

376
00:18:42,239 --> 00:18:43,590
basement iron-based runtime built

377
00:18:43,590 --> 00:18:45,359
environment and hope that they would

378
00:18:45,359 --> 00:18:47,369
magically rebuild themselves and it

379
00:18:47,369 --> 00:18:50,249
would just work that don't work is

380
00:18:50,249 --> 00:18:52,440
expected we get like 400 failed to build

381
00:18:52,440 --> 00:18:54,809
from source issues in the bin the first

382
00:18:54,809 --> 00:18:57,480
run that was mostly because parallel was

383
00:18:57,480 --> 00:18:59,580
removed just before federal 25 beta was

384
00:18:59,580 --> 00:19:02,759
branch many packages build required

385
00:19:02,759 --> 00:19:05,159
peril but don't explicitly state a bill

386
00:19:05,159 --> 00:19:07,080
dependencies so they were failing and it

387
00:19:07,080 --> 00:19:09,119
was mostly caused by auto tools and auto

388
00:19:09,119 --> 00:19:11,150
comfort

389
00:19:11,150 --> 00:19:13,760
so we fix some of the issues and then

390
00:19:13,760 --> 00:19:16,520
rebased our sets to use federal route 25

391
00:19:16,520 --> 00:19:19,070
for his candidate 3 which and the bill

392
00:19:19,070 --> 00:19:21,950
dependency favors the bill favors drop

393
00:19:21,950 --> 00:19:26,960
to 180 back then so we created a new

394
00:19:26,960 --> 00:19:29,030
tracker back and we vary reporting all

395
00:19:29,030 --> 00:19:30,010
the FFTs

396
00:19:30,010 --> 00:19:34,760
issues due to the package maintainers it

397
00:19:34,760 --> 00:19:37,550
was mostly in being under missing well

398
00:19:37,550 --> 00:19:39,830
dependencies but it was also in a more

399
00:19:39,830 --> 00:19:42,410
poor packaging practices for example and

400
00:19:42,410 --> 00:19:46,390
the lack of CI n fedorov wasn't helping

401
00:19:47,559 --> 00:19:51,590
another issue was the unresponsive

402
00:19:51,590 --> 00:19:53,510
maintainer z' for example when we

403
00:19:53,510 --> 00:19:57,050
reported those ft BF s issues we gave

404
00:19:57,050 --> 00:19:58,520
all the maintainer s-- two weeks to

405
00:19:58,520 --> 00:20:00,140
respond otherwise we would just fix it

406
00:20:00,140 --> 00:20:02,809
for them in most cases we had to wait

407
00:20:02,809 --> 00:20:04,550
the whole two weeks because there was no

408
00:20:04,550 --> 00:20:09,800
response whatsoever in other cases the

409
00:20:09,800 --> 00:20:11,240
package maintainer had a different

410
00:20:11,240 --> 00:20:12,650
opinion how to fix the issue which is

411
00:20:12,650 --> 00:20:14,630
not always a problem but it it just

412
00:20:14,630 --> 00:20:17,120
slows down the progress of course the

413
00:20:17,120 --> 00:20:19,700
discussion helps if it's if it has

414
00:20:19,700 --> 00:20:24,980
potential another issue is that we are

415
00:20:24,980 --> 00:20:26,420
developing based on time and all the

416
00:20:26,420 --> 00:20:28,160
modules in parallel with the traditional

417
00:20:28,160 --> 00:20:32,300
release we since we are trying to build

418
00:20:32,300 --> 00:20:34,870
it we haven't actually got past that yet

419
00:20:34,870 --> 00:20:37,100
we are working with the frozen packaged

420
00:20:37,100 --> 00:20:40,670
set and Federer is still introducing new

421
00:20:40,670 --> 00:20:43,250
changes in rawhide that includes GCC

422
00:20:43,250 --> 00:20:46,030
seven package conf

423
00:20:46,030 --> 00:20:49,100
basically anything also when a

424
00:20:49,100 --> 00:20:50,660
maintainer fixes an issue for example

425
00:20:50,660 --> 00:20:53,510
when with the building the package they

426
00:20:53,510 --> 00:20:55,460
often a rebase the package which means

427
00:20:55,460 --> 00:20:57,380
new dependencies and new build failures

428
00:20:57,380 --> 00:21:00,230
caused by the battery base that's not

429
00:21:00,230 --> 00:21:02,500
always

430
00:21:04,770 --> 00:21:09,640
this is a picture with with the bill

431
00:21:09,640 --> 00:21:11,320
dependency graph of the current base

432
00:21:11,320 --> 00:21:13,000
one-time self-hosting prototype it

433
00:21:13,000 --> 00:21:16,180
includes those 3000 packages and the

434
00:21:16,180 --> 00:21:18,910
bill dependencies between them as you

435
00:21:18,910 --> 00:21:21,670
can see when trying to minimize the bill

436
00:21:21,670 --> 00:21:23,680
dependency chain both for runtime or the

437
00:21:23,680 --> 00:21:25,120
service team prototype because it just

438
00:21:25,120 --> 00:21:26,860
takes forever to rebuild and with all

439
00:21:26,860 --> 00:21:30,180
those issues it's it's just a nightmare

440
00:21:30,180 --> 00:21:32,710
many of those dependencies are obsolete

441
00:21:32,710 --> 00:21:35,470
and could be removed because they were

442
00:21:35,470 --> 00:21:37,180
added like years ago and nobody really

443
00:21:37,180 --> 00:21:39,670
cares anymore but finding them that's

444
00:21:39,670 --> 00:21:40,840
that's the problem

445
00:21:40,840 --> 00:21:48,820
I can provide SVG picture later so what

446
00:21:48,820 --> 00:21:53,200
we plan to deliver in ferret 26 the

447
00:21:53,200 --> 00:21:55,620
proof of concept based runtime module

448
00:21:55,620 --> 00:21:58,440
with the first version of the API

449
00:21:58,440 --> 00:22:01,210
hopefully all the packages in the API

450
00:22:01,210 --> 00:22:03,340
will also ship with the devil's uh

451
00:22:03,340 --> 00:22:04,960
packages so people can actually use our

452
00:22:04,960 --> 00:22:07,240
API that's not as easy as it sounds

453
00:22:07,240 --> 00:22:09,070
because the Devils Devils are packages

454
00:22:09,070 --> 00:22:11,380
often does require stuff like Perl and

455
00:22:11,380 --> 00:22:12,940
we don't want perylene based on time of

456
00:22:12,940 --> 00:22:17,770
course we will also ship development a

457
00:22:17,770 --> 00:22:18,940
built environment module

458
00:22:18,940 --> 00:22:22,270
although unsupported we will ship

459
00:22:22,270 --> 00:22:26,160
several a vo ship system and container

460
00:22:26,160 --> 00:22:29,110
management modules such as DN F which is

461
00:22:29,110 --> 00:22:30,610
not part of based on time because it

462
00:22:30,610 --> 00:22:33,370
moves at a different pace the same for

463
00:22:33,370 --> 00:22:39,320
docker for example we will also ship

464
00:22:39,320 --> 00:22:42,420
you know like a proof-of-concept of the

465
00:22:42,420 --> 00:22:45,090
selection of the dynamic dynamic

466
00:22:45,090 --> 00:22:47,510
languages modules mostly for Python

467
00:22:47,510 --> 00:22:49,950
again the same situation as with peril

468
00:22:49,950 --> 00:22:51,510
we don't want Python in the in the base

469
00:22:51,510 --> 00:22:53,550
one time but many of our tools including

470
00:22:53,550 --> 00:22:54,530
rpm build

471
00:22:54,530 --> 00:22:58,500
unfortunately required in the long term

472
00:22:58,500 --> 00:23:00,690
we would either ship like a small set of

473
00:23:00,690 --> 00:23:04,290
Python standard library including a like

474
00:23:04,290 --> 00:23:07,680
small small Python interpreter similar

475
00:23:07,680 --> 00:23:10,170
to system Python we have now but

476
00:23:10,170 --> 00:23:11,730
completely disconnected from the Python

477
00:23:11,730 --> 00:23:17,160
3 fellowships today we will also ship

478
00:23:17,160 --> 00:23:19,410
project Voltron which is a funny name

479
00:23:19,410 --> 00:23:22,980
for further 20:26 server composed

480
00:23:22,980 --> 00:23:29,940
entirely out of modules unfortunately

481
00:23:29,940 --> 00:23:33,060
for 26 won't have any updates since the

482
00:23:33,060 --> 00:23:35,100
reason is big that body cannot handle

483
00:23:35,100 --> 00:23:37,380
any artifice besides our PM's we are

484
00:23:37,380 --> 00:23:40,560
working on fixing that though and it

485
00:23:40,560 --> 00:23:42,510
will be made entirely by the majority

486
00:23:42,510 --> 00:23:44,190
working group members the reason is

487
00:23:44,190 --> 00:23:47,450
again that we have no infrastructure for

488
00:23:47,450 --> 00:23:51,900
end processes to do process like this

489
00:23:51,900 --> 00:23:54,330
for example module submission requests

490
00:23:54,330 --> 00:23:58,639
and changes in the package database

491
00:23:59,100 --> 00:24:01,659
4:27 beam hoped that base one time will

492
00:24:01,659 --> 00:24:04,390
be much more stable all the API will be

493
00:24:04,390 --> 00:24:07,600
usable the packages that are not meant

494
00:24:07,600 --> 00:24:09,850
to be a part of API will be repackaged

495
00:24:09,850 --> 00:24:12,130
and shipped differently so that couldn't

496
00:24:12,130 --> 00:24:14,620
be accessed by anybody who is not meant

497
00:24:14,620 --> 00:24:17,409
to be using them the same for the

498
00:24:17,409 --> 00:24:20,260
dynamic languages runtimes we hope to

499
00:24:20,260 --> 00:24:22,179
finish this system pattern and pattern

500
00:24:22,179 --> 00:24:25,900
tree split for instance we will support

501
00:24:25,900 --> 00:24:27,940
automated builds and rebuilds so

502
00:24:27,940 --> 00:24:30,280
whenever you push the diskette you will

503
00:24:30,280 --> 00:24:33,309
you will both build the component and

504
00:24:33,309 --> 00:24:34,990
the whole module and all the modules

505
00:24:34,990 --> 00:24:39,150
that depend on it we will ship updates

506
00:24:39,150 --> 00:24:45,400
the update for bodies is in plan the

507
00:24:45,400 --> 00:24:47,080
modularity infrastructure will be open

508
00:24:47,080 --> 00:24:48,850
to public so anybody will be able to

509
00:24:48,850 --> 00:24:52,270
submit a module and build it there will

510
00:24:52,270 --> 00:24:54,010
be a new new release of failure server

511
00:24:54,010 --> 00:24:56,530
and more content it doesn't have a name

512
00:24:56,530 --> 00:25:01,840
doing everything and be on federal cloud

513
00:25:01,840 --> 00:25:03,880
federal workstation hopefully that

514
00:25:03,880 --> 00:25:05,980
building good modules like norm for it

515
00:25:05,980 --> 00:25:08,789
for example

516
00:25:12,850 --> 00:25:15,309
yeah we hope that module releases will

517
00:25:15,309 --> 00:25:17,799
become our primary deliverable and the

518
00:25:17,799 --> 00:25:19,330
traditional release will be still

519
00:25:19,330 --> 00:25:22,210
available but will be composed out of

520
00:25:22,210 --> 00:25:24,429
modules so we will pre select several

521
00:25:24,429 --> 00:25:25,990
modules for the users and flatten them

522
00:25:25,990 --> 00:25:31,960
out into a traditional release and it

523
00:25:31,960 --> 00:25:36,669
will be awesome yeah so that's the end

524
00:25:36,669 --> 00:25:38,289
we have plenty of time for questions

525
00:25:38,289 --> 00:25:39,990
darling

526
00:25:39,990 --> 00:25:43,049
[Music]

527
00:25:45,720 --> 00:25:48,779
[Music]

528
00:26:00,790 --> 00:26:05,170
you told Benson open an adult

529
00:26:12,970 --> 00:26:17,330
right so yeah the question was if I for

530
00:26:17,330 --> 00:26:19,370
example have an application that depends

531
00:26:19,370 --> 00:26:23,000
on the library so how do i how do I make

532
00:26:23,000 --> 00:26:25,220
it not conflicting with other libraries

533
00:26:25,220 --> 00:26:31,700
right so as I said I can maybe switch

534
00:26:31,700 --> 00:26:36,350
back to my slides so you can use

535
00:26:36,350 --> 00:26:38,780
container so the module can be installed

536
00:26:38,780 --> 00:26:41,030
as a container and the container will be

537
00:26:41,030 --> 00:26:43,670
we have solved that already or if you

538
00:26:43,670 --> 00:26:46,220
want to install it as an RPM we might

539
00:26:46,220 --> 00:26:48,800
need to repackage the libraries or the

540
00:26:48,800 --> 00:26:50,480
dependencies in a way that will be

541
00:26:50,480 --> 00:26:59,050
installed in a separate path yes yeah

542
00:27:00,670 --> 00:27:03,140
not in containers containers are meant

543
00:27:03,140 --> 00:27:07,060
to contain everything in themselves so

544
00:27:08,200 --> 00:27:11,270
base room time we'll have some libraries

545
00:27:11,270 --> 00:27:14,660
that are shared amongst other things but

546
00:27:14,660 --> 00:27:16,250
at the beginning it's probably going to

547
00:27:16,250 --> 00:27:19,130
be more stuff than we would like so

548
00:27:19,130 --> 00:27:21,320
ultimately we would like that shared set

549
00:27:21,320 --> 00:27:23,950
to be smaller

550
00:27:44,500 --> 00:27:49,159
right yeah Doug yeah they only need to

551
00:27:49,159 --> 00:27:52,010
be optimizations but yeah but that's I

552
00:27:52,010 --> 00:27:54,080
guess more for the future in the RPM

553
00:27:54,080 --> 00:27:57,200
world yeah if we have one library of a

554
00:27:57,200 --> 00:27:59,120
certain version I think it will be just

555
00:27:59,120 --> 00:28:01,429
once on the system still but yeah in the

556
00:28:01,429 --> 00:28:03,440
containers that's no choice basically

557
00:28:03,440 --> 00:28:06,620
but we can still use layering so for

558
00:28:06,620 --> 00:28:07,940
example I can have the base on time

559
00:28:07,940 --> 00:28:10,340
layer then I can have some libraries

560
00:28:10,340 --> 00:28:12,260
layer etc and if they're the same for

561
00:28:12,260 --> 00:28:14,179
the same container they will share both

562
00:28:14,179 --> 00:28:35,149
storage and runtime resources yeah

563
00:28:35,149 --> 00:28:37,700
another problem is that we want oh not a

564
00:28:37,700 --> 00:28:38,179
problem

565
00:28:38,179 --> 00:28:41,960
we want to offer applications not

566
00:28:41,960 --> 00:28:43,909
packages and we want them to offer them

567
00:28:43,909 --> 00:28:46,100
an upstream driven life cycles not the

568
00:28:46,100 --> 00:28:48,230
distribution driven life cycles so we

569
00:28:48,230 --> 00:28:51,080
will we will ship the RPM repository or

570
00:28:51,080 --> 00:28:54,620
container depending as the as upstream

571
00:28:54,620 --> 00:28:56,390
releases new versions not as we just

572
00:28:56,390 --> 00:28:58,690
decide

573
00:29:15,909 --> 00:29:19,610
the question is about is basically the

574
00:29:19,610 --> 00:29:21,890
same the same packaging is basically the

575
00:29:21,890 --> 00:29:23,630
same version but built against different

576
00:29:23,630 --> 00:29:27,169
different versions of dependencies we

577
00:29:27,169 --> 00:29:28,789
will build all the variations against

578
00:29:28,789 --> 00:29:30,380
all the all the dependencies in a chain

579
00:29:30,380 --> 00:29:32,450
so yeah there will be a lot of artifacts

580
00:29:32,450 --> 00:29:34,490
and available in the repositories on the

581
00:29:34,490 --> 00:29:37,520
service and mirrors but the build the

582
00:29:37,520 --> 00:29:39,649
install the system management tools

583
00:29:39,649 --> 00:29:42,140
should choose correctly which module

584
00:29:42,140 --> 00:29:49,100
variants to install for you well there

585
00:29:49,100 --> 00:29:51,380
is because we track how we build it so

586
00:29:51,380 --> 00:29:53,649
we know

587
00:30:01,880 --> 00:30:05,120
so yeah maybe I'll try to answer

588
00:30:05,120 --> 00:30:08,120
differently each module will contain all

589
00:30:08,120 --> 00:30:11,840
the dependencies but also the build

590
00:30:11,840 --> 00:30:15,440
recipe so it will be always built at the

591
00:30:15,440 --> 00:30:18,500
same time so for example it will

592
00:30:18,500 --> 00:30:20,419
reference particular version of the base

593
00:30:20,419 --> 00:30:22,940
runtime it will reference or write

594
00:30:22,940 --> 00:30:24,559
basically if there are more versions of

595
00:30:24,559 --> 00:30:26,900
race entirely built against both against

596
00:30:26,900 --> 00:30:31,039
all of them but in a module I can

597
00:30:31,039 --> 00:30:32,929
specify all the packages by branches for

598
00:30:32,929 --> 00:30:35,929
example but when I build them the Bata

599
00:30:35,929 --> 00:30:37,460
stem will save the exact Commission

600
00:30:37,460 --> 00:30:39,679
cheese so it will be reproducible at all

601
00:30:39,679 --> 00:30:45,679
times and yeah the module defines all

602
00:30:45,679 --> 00:31:01,850
the software it needs this isn't really

603
00:31:01,850 --> 00:31:04,600
meant to be exposed to end users per se

604
00:31:04,600 --> 00:31:06,740
except that you may have multiple

605
00:31:06,740 --> 00:31:08,450
versions of something available to

606
00:31:08,450 --> 00:31:09,230
choose from

607
00:31:09,230 --> 00:31:12,169
so but that doesn't mean that you can

608
00:31:12,169 --> 00:31:15,080
arbitrarily create your own modules me

609
00:31:15,080 --> 00:31:17,900
as a developer you could but that's not

610
00:31:17,900 --> 00:31:19,520
the concept here the concept here is

611
00:31:19,520 --> 00:31:20,929
that these things are still all the find

612
00:31:20,929 --> 00:31:22,610
on the server side much like our cams

613
00:31:22,610 --> 00:31:27,169
are today but the units of measure are

614
00:31:27,169 --> 00:31:29,059
quite a bit bigger for the most parts of

615
00:31:29,059 --> 00:31:31,580
it the individual things can have

616
00:31:31,580 --> 00:31:33,770
individual life cycles that doesn't mean

617
00:31:33,770 --> 00:31:35,539
that you can't go in there and Twitter

618
00:31:35,539 --> 00:31:40,309
with the packages but I mean the reason

619
00:31:40,309 --> 00:31:42,799
why I'm asking those questions

620
00:31:42,799 --> 00:31:44,330
and this very problem there's been a lot

621
00:31:44,330 --> 00:31:46,490
of interested in the last two or three

622
00:31:46,490 --> 00:31:52,250
years and most people have tended

623
00:31:52,250 --> 00:31:56,360
towards the punctual declarative

624
00:31:56,360 --> 00:32:01,120
approach that's used by system centers

625
00:32:01,120 --> 00:32:05,270
but you're still adhering to the variant

626
00:32:05,270 --> 00:32:08,460
approach so obviously you

627
00:32:08,460 --> 00:32:11,970
you don't agree with the other that's a

628
00:32:11,970 --> 00:32:16,410
big move so that's a that maybe even

629
00:32:16,410 --> 00:32:18,240
long-term right answer but that's a

630
00:32:18,240 --> 00:32:22,080
that's a gut rewrite and no way to

631
00:32:22,080 --> 00:32:25,620
distribute the existing distribution so

632
00:32:25,620 --> 00:32:27,690
you know even even if we were a hundred

633
00:32:27,690 --> 00:32:29,370
percent sure the next answer was the

634
00:32:29,370 --> 00:32:29,880
right answer

635
00:32:29,880 --> 00:32:34,350
we can't just turn it on so you know I I

636
00:32:34,350 --> 00:32:36,510
think we're kind of walking towards that

637
00:32:36,510 --> 00:32:38,750
direction

638
00:32:39,920 --> 00:32:43,350
interim mega well mean going to the

639
00:32:43,350 --> 00:32:45,810
supreme perfection good one since think

640
00:32:45,810 --> 00:32:48,750
we want those we're trying yeah so let's

641
00:32:48,750 --> 00:32:50,520
let's put it together it's not it's

642
00:32:50,520 --> 00:32:53,370
disruptive but it's not trainwreck right

643
00:32:53,370 --> 00:32:56,310
and see how it works and then you know

644
00:32:56,310 --> 00:32:58,020
and then iterate rather than to make the

645
00:32:58,020 --> 00:33:06,590
Big Ben oh you know questions

646
00:33:06,759 --> 00:33:09,449
just

647
00:33:11,460 --> 00:33:14,499
[Music]

648
00:33:26,160 --> 00:33:29,790
yeah okay so question was how do you run

649
00:33:29,790 --> 00:33:31,320
containers do we run them on docker do

650
00:33:31,320 --> 00:33:33,330
we run them on system Lian spawn and the

651
00:33:33,330 --> 00:33:35,370
answer is we will be using OCI

652
00:33:35,370 --> 00:33:38,760
containers which will be able to run on

653
00:33:38,760 --> 00:33:43,830
docker run on run C and for example if

654
00:33:43,830 --> 00:33:44,250
ever

655
00:33:44,250 --> 00:33:48,390
no CI image you can imagine I had pretty

656
00:33:48,390 --> 00:33:50,370
nice example for example you can imagine

657
00:33:50,370 --> 00:33:53,280
PDF which could be built by different

658
00:33:53,280 --> 00:33:55,380
tools but you can open it in a browser

659
00:33:55,380 --> 00:33:57,090
you can operate in this reader on your

660
00:33:57,090 --> 00:33:59,400
phone so the OCI image will run on

661
00:33:59,400 --> 00:34:03,690
multiple container engines but I'm not

662
00:34:03,690 --> 00:34:07,200
sure which which would be the default we

663
00:34:07,200 --> 00:34:13,199
can do both we can do both here yeah but

664
00:34:13,199 --> 00:34:15,888
I have to find it

665
00:34:20,469 --> 00:34:23,079
oh there isn't all right so what's the

666
00:34:23,079 --> 00:34:29,889
carbon footprint well as you can see

667
00:34:29,889 --> 00:34:32,859
it'll be a lot of building because yeah

668
00:34:32,859 --> 00:34:34,899
I'm building a module made to build all

669
00:34:34,899 --> 00:34:37,030
the packages but I hope there will be

670
00:34:37,030 --> 00:34:41,109
some optimization some nice filters to

671
00:34:41,109 --> 00:34:44,020
not have the calf with painlessly as

672
00:34:44,020 --> 00:34:49,329
bigger than this picture yeah comments

673
00:34:49,329 --> 00:34:51,339
pouring container runtimes the

674
00:34:51,339 --> 00:34:54,179
continuous base is still a warfare zone

675
00:34:54,179 --> 00:34:58,720
so if we were declarative about any

676
00:34:58,720 --> 00:35:00,609
particular tech there we were wrong

677
00:35:00,609 --> 00:35:04,300
right so the objective here I think is

678
00:35:04,300 --> 00:35:06,400
that we want to do kind of the OCI model

679
00:35:06,400 --> 00:35:09,609
which is the open standard and then use

680
00:35:09,609 --> 00:35:11,230
different technologies to run them

681
00:35:11,230 --> 00:35:12,970
depending on scenario like you know

682
00:35:12,970 --> 00:35:14,349
there's some of the reasons for the

683
00:35:14,349 --> 00:35:16,690
system lead container stuff is because

684
00:35:16,690 --> 00:35:17,859
you sometimes want to run a container

685
00:35:17,859 --> 00:35:19,810
before something like a docker demon

686
00:35:19,810 --> 00:35:22,780
comes up so you need to know just like

687
00:35:22,780 --> 00:35:23,829
everything else meant to be kind of

688
00:35:23,829 --> 00:35:26,380
flexible about the container of runtimes

689
00:35:26,380 --> 00:35:28,150
that we want to use because we're going

690
00:35:28,150 --> 00:35:28,960
to need different ones for different

691
00:35:28,960 --> 00:35:31,829
kinds of containers

692
00:35:32,610 --> 00:35:35,240
yeah

693
00:35:40,120 --> 00:35:43,770
so do we have any more questions

694
00:35:44,800 --> 00:35:47,430
all right so I guess we can wrap up

695
00:35:47,430 --> 00:35:50,020
thanks for coming

696
00:35:50,020 --> 00:35:55,259
[Applause]

