1
00:00:20,220 --> 00:00:24,810
the backend maybe be an NGO and now also

2
00:00:24,810 --> 00:00:27,660
your clients your team could be all only

3
00:00:27,660 --> 00:00:31,470
go developers you don't need to hire a

4
00:00:31,470 --> 00:00:37,620
Java or iOS developers how is this

5
00:00:37,620 --> 00:00:40,260
possible well this is a very interesting

6
00:00:40,260 --> 00:00:44,489
topic I will not spend much time here

7
00:00:44,489 --> 00:00:47,820
but a java application which are android

8
00:00:47,820 --> 00:00:52,710
could run C code the Java native

9
00:00:52,710 --> 00:00:55,440
interface and goal could communicate

10
00:00:55,440 --> 00:00:58,890
with C code also with a single this

11
00:00:58,890 --> 00:01:02,640
similar to whatever is there in for iOS

12
00:01:02,640 --> 00:01:12,869
devices mobile app we have two ways to

13
00:01:12,869 --> 00:01:15,860
do it with gamma while we have the

14
00:01:15,860 --> 00:01:21,080
comodo mobile bill common common which

15
00:01:21,080 --> 00:01:26,069
will write all the native which is its

16
00:01:26,069 --> 00:01:30,229
own legal code applications

17
00:01:30,229 --> 00:01:32,550
it's also called a native application

18
00:01:32,550 --> 00:01:36,990
usually and it's that work and based on

19
00:01:36,990 --> 00:01:43,679
OpenGL bindings there is another way

20
00:01:43,679 --> 00:01:48,479
which is gamma while vine which is also

21
00:01:48,479 --> 00:01:52,319
called SDK application which what you do

22
00:01:52,319 --> 00:01:56,789
is you write go code go mobile generate

23
00:01:56,789 --> 00:02:02,910
so go bindings and jewel law it's a

24
00:02:02,910 --> 00:02:08,160
library in your in your android

25
00:02:08,160 --> 00:02:12,720
application in the first case go bill

26
00:02:12,720 --> 00:02:17,300
will generate the Epica APK file and

27
00:02:17,300 --> 00:02:22,170
then the second you have an a a our file

28
00:02:22,170 --> 00:02:26,280
which is you need to be imported it's a

29
00:02:26,280 --> 00:02:32,400
recently injured injure and Roy

30
00:02:32,400 --> 00:02:39,070
so native application ensure there until

31
00:02:39,070 --> 00:02:41,170
early writing in go you don't need

32
00:02:41,170 --> 00:02:46,990
anything extra the they work on Android

33
00:02:46,990 --> 00:02:51,550
iOS on also on desktop you are using

34
00:02:51,550 --> 00:02:55,750
OpenGL binding which means that if you

35
00:02:55,750 --> 00:02:57,880
are already doing a mobile application

36
00:02:57,880 --> 00:03:01,660
with OpenGL and C code this should be

37
00:03:01,660 --> 00:03:07,090
like very similar there is experimental

38
00:03:07,090 --> 00:03:11,940
super for audio sprite font because

39
00:03:11,940 --> 00:03:14,040
everything you have to be done in

40
00:03:14,040 --> 00:03:19,260
English from from drawing the screen to

41
00:03:19,260 --> 00:03:22,930
take in the input of the keyboards or

42
00:03:22,930 --> 00:03:28,270
whatever but there is a big problem not

43
00:03:28,270 --> 00:03:30,940
so big but they are not ready to be

44
00:03:30,940 --> 00:03:34,540
published on the Play Store as I said

45
00:03:34,540 --> 00:03:40,870
before the echo mobile bill common it

46
00:03:40,870 --> 00:03:44,080
will generate the apk but you need to

47
00:03:44,080 --> 00:03:47,950
open that file a change the icon simple

48
00:03:47,950 --> 00:03:50,770
in the content and also sync with George

49
00:03:50,770 --> 00:03:54,010
certificate to be able to tweak publish

50
00:03:54,010 --> 00:03:58,450
on the Play Store the apk works as a if

51
00:03:58,450 --> 00:04:01,570
you install it directly on your device

52
00:04:01,570 --> 00:04:04,660
but to me polish you need to do a few

53
00:04:04,660 --> 00:04:10,720
esta strap as steps also check out a

54
00:04:10,720 --> 00:04:15,340
Android go which is a similar project to

55
00:04:15,340 --> 00:04:21,310
go mobile but a bit different and and I

56
00:04:21,310 --> 00:04:25,150
hope that go mobile in the future let

57
00:04:25,150 --> 00:04:28,900
you make an apk file ready to be

58
00:04:28,900 --> 00:04:33,490
published to will to make a project with

59
00:04:33,490 --> 00:04:38,650
go bill just go mobile bill just specify

60
00:04:38,650 --> 00:04:41,260
the target which is Android or iOS see

61
00:04:41,260 --> 00:04:44,560
the path to your project and your your

62
00:04:44,560 --> 00:04:45,580
file will be

63
00:04:45,580 --> 00:04:51,550
the SDK application or what this talk is

64
00:04:51,550 --> 00:04:54,370
really about is what I have experience

65
00:04:54,370 --> 00:04:58,930
with I seen it's easier to develop SDK

66
00:04:58,930 --> 00:05:02,800
application a better than a native

67
00:05:02,800 --> 00:05:07,840
application because with a SDK you what

68
00:05:07,840 --> 00:05:09,760
are doing is you take your java

69
00:05:09,760 --> 00:05:12,730
application and use just your go code as

70
00:05:12,730 --> 00:05:15,250
a library so some part of your

71
00:05:15,250 --> 00:05:17,560
application is in go and some parties in

72
00:05:17,560 --> 00:05:23,230
Java or Objective C it's easier to start

73
00:05:23,230 --> 00:05:27,040
with if you are going to star in in the

74
00:05:27,040 --> 00:05:30,400
mobile projects but this is what I

75
00:05:30,400 --> 00:05:34,360
recommend advantage doing this is that

76
00:05:34,360 --> 00:05:37,180
you could reuse your go code as I said

77
00:05:37,180 --> 00:05:42,150
before and it's a cross-platform code

78
00:05:42,150 --> 00:05:48,220
your Go Go mobile will translate and

79
00:05:48,220 --> 00:05:51,510
generate bindings for both Android and

80
00:05:51,510 --> 00:05:59,080
iOS devices is the same the disadvantage

81
00:05:59,080 --> 00:06:03,220
is that only a small subset of go type

82
00:06:03,220 --> 00:06:05,470
are supported for example known on same

83
00:06:05,470 --> 00:06:11,010
interior language mainly have a small

84
00:06:11,010 --> 00:06:15,690
overhead and there aren't some APA

85
00:06:15,690 --> 00:06:19,000
limitation for example a function could

86
00:06:19,000 --> 00:06:22,690
return none one or two results in case

87
00:06:22,690 --> 00:06:25,890
it return to the second one has to be an

88
00:06:25,890 --> 00:06:34,570
an error and some code like the user

89
00:06:34,570 --> 00:06:37,890
interface need to be plat for a specific

90
00:06:37,890 --> 00:06:40,660
because what you are doing is java

91
00:06:40,660 --> 00:06:46,000
application or an iOS app and using sona

92
00:06:46,000 --> 00:06:49,890
go as a your library

93
00:06:55,130 --> 00:07:02,850
before we start we need go 1.5 to

94
00:07:02,850 --> 00:07:06,000
install this go get golang.org X mobile

95
00:07:06,000 --> 00:07:09,510
come and go go my wife and I go mobile

96
00:07:09,510 --> 00:07:13,050
in it it will download a few things and

97
00:07:13,050 --> 00:07:14,550
it will be ready

98
00:07:14,550 --> 00:07:17,640
you also need the Android SDK and an

99
00:07:17,640 --> 00:07:21,360
emulator the the foul emulator is ok but

100
00:07:21,360 --> 00:07:23,310
I recommend genymotion

101
00:07:23,310 --> 00:07:25,950
which is a commercial paid one but it's

102
00:07:25,950 --> 00:07:30,600
way faster and more it's better than the

103
00:07:30,600 --> 00:07:33,330
default one also Android studio is not

104
00:07:33,330 --> 00:07:36,210
needed but a strongly recommended it

105
00:07:36,210 --> 00:07:42,390
will simplify a lot the things bending

106
00:07:42,390 --> 00:07:45,630
as I said the SDK application will

107
00:07:45,630 --> 00:07:48,690
generate some buildings this is what you

108
00:07:48,690 --> 00:07:53,130
have in Ingo and this is what it will be

109
00:07:53,130 --> 00:07:57,450
transferring Jolla you could see that

110
00:07:57,450 --> 00:07:59,880
the example here later if you really

111
00:07:59,880 --> 00:08:03,930
want to take a look at what what is

112
00:08:03,930 --> 00:08:09,770
actually generated and since I will

113
00:08:09,770 --> 00:08:13,380
point is like exported variables or

114
00:08:13,380 --> 00:08:15,930
struck fields they get a getter and

115
00:08:15,930 --> 00:08:20,490
setter and the error in go they they

116
00:08:20,490 --> 00:08:27,420
they will be an exception in Java so

117
00:08:27,420 --> 00:08:30,780
let's see Sun Sun example code your go

118
00:08:30,780 --> 00:08:33,510
code is quite simple here you yes

119
00:08:33,510 --> 00:08:36,330
package name my go library with a

120
00:08:36,330 --> 00:08:39,650
function name hello

121
00:08:39,650 --> 00:08:44,220
that will receive some parameters the D

122
00:08:44,220 --> 00:08:48,680
generate Java bindings is a well a class

123
00:08:48,680 --> 00:08:52,260
my goal re which we said before the

124
00:08:52,260 --> 00:08:57,380
package will be transfer into class and

125
00:08:58,060 --> 00:09:01,900
hello the hello function is no I static

126
00:09:01,900 --> 00:09:05,380
method of the michael library class once

127
00:09:05,380 --> 00:09:10,240
into point here is like in angle we have

128
00:09:10,240 --> 00:09:16,680
the the u / k h but in java is lowercase

129
00:09:18,330 --> 00:09:21,550
more more examples you here have a

130
00:09:21,550 --> 00:09:31,810
struck with a few function and this is

131
00:09:31,810 --> 00:09:40,090
what it will be generated depending one

132
00:09:40,090 --> 00:09:42,790
one thing to point out is gamma val is

133
00:09:42,790 --> 00:09:43,450
not a

134
00:09:43,450 --> 00:09:47,020
transpiling your goal code inside making

135
00:09:47,020 --> 00:09:54,160
a solid object library and generate some

136
00:09:54,160 --> 00:09:56,800
buildings and package everything on a a

137
00:09:56,800 --> 00:10:05,880
our file example using this is well or

138
00:10:05,880 --> 00:10:11,680
go code as before and in java it could

139
00:10:11,680 --> 00:10:13,570
be the main activity or whatever in your

140
00:10:13,570 --> 00:10:16,540
code you need to import the library a

141
00:10:16,540 --> 00:10:20,200
later use it it's very simple and it

142
00:10:20,200 --> 00:10:27,430
will good this is an example of the same

143
00:10:27,430 --> 00:10:30,600
but this time as we said we are

144
00:10:30,600 --> 00:10:33,850
returning to result the second one has

145
00:10:33,850 --> 00:10:37,390
to be an error and in java is an

146
00:10:37,390 --> 00:10:40,930
exception we need to catch if we don't

147
00:10:40,930 --> 00:10:47,020
catch it well it it will complain i mean

148
00:10:47,020 --> 00:10:53,310
it it doesn't compile so-called that is

149
00:10:53,310 --> 00:10:57,550
that's how we call a from Java to or go

150
00:10:57,550 --> 00:11:00,640
code event make a call but let's see the

151
00:11:00,640 --> 00:11:04,840
other way like front or go code may make

152
00:11:04,840 --> 00:11:08,980
a call to Java well this is a may be a

153
00:11:08,980 --> 00:11:11,680
bit complicated at first it's not that

154
00:11:11,680 --> 00:11:12,180
in

155
00:11:12,180 --> 00:11:15,360
yes the other thing but I find it very

156
00:11:15,360 --> 00:11:20,339
useful for example if you need to update

157
00:11:20,339 --> 00:11:22,910
the user interface because the

158
00:11:22,910 --> 00:11:25,500
processing go is taking too much or you

159
00:11:25,500 --> 00:11:27,390
know are don't live in a file or

160
00:11:27,390 --> 00:11:29,850
something you need to do this so first

161
00:11:29,850 --> 00:11:34,490
we are going to create an interface with

162
00:11:34,490 --> 00:11:40,980
some method in go and also function

163
00:11:40,980 --> 00:11:47,120
register callback to save to save the

164
00:11:47,120 --> 00:11:51,959
reference to your java code later we

165
00:11:51,959 --> 00:11:56,029
need to implement our interface in Java

166
00:11:56,029 --> 00:11:59,160
which is the same as before like

167
00:11:59,160 --> 00:12:01,890
implements Java code which is this one

168
00:12:01,890 --> 00:12:05,160
and with the two method we need to do

169
00:12:05,160 --> 00:12:10,279
that and finally in our go and your Java

170
00:12:10,279 --> 00:12:14,070
we just well we import all package and

171
00:12:14,070 --> 00:12:16,950
everything and then we create a cold

172
00:12:16,950 --> 00:12:21,810
call back and then register the car back

173
00:12:21,810 --> 00:12:25,320
so it's the reference is safe in go and

174
00:12:25,320 --> 00:12:29,240
we could call later in go we could call

175
00:12:29,240 --> 00:12:36,510
to Sun of our Java method how to build

176
00:12:36,510 --> 00:12:40,200
this well is gamma bulk bin just specify

177
00:12:40,200 --> 00:12:44,610
the target which is iOS or Android the

178
00:12:44,610 --> 00:12:47,640
output library which is in our file and

179
00:12:47,640 --> 00:12:53,640
everything the V is for were both so if

180
00:12:53,640 --> 00:12:57,750
something is wrong or not and then later

181
00:12:57,750 --> 00:13:01,740
in our go project we need to modify or

182
00:13:01,740 --> 00:13:04,890
create a few files it's it's a bit

183
00:13:04,890 --> 00:13:07,200
complicated maybe it was like

184
00:13:07,200 --> 00:13:09,839
complicated but if you are using Android

185
00:13:09,839 --> 00:13:13,649
studio it's just such as sample of file

186
00:13:13,649 --> 00:13:16,589
new new model import and then select

187
00:13:16,589 --> 00:13:20,370
your AAA our package that's why I

188
00:13:20,370 --> 00:13:22,890
recommend under a studio but if you

189
00:13:22,890 --> 00:13:25,750
don't want to use it

190
00:13:25,750 --> 00:13:29,110
you could just modify the gradall files

191
00:13:29,110 --> 00:13:33,310
with including your library there you

192
00:13:33,310 --> 00:13:35,830
just tell the dependency you need to

193
00:13:35,830 --> 00:13:39,790
compile that and where work to locate

194
00:13:39,790 --> 00:13:44,770
the file there is one problem I waited

195
00:13:44,770 --> 00:13:49,680
so I mean I spent some time figuring out

196
00:13:49,680 --> 00:13:53,170
because I know I don't have much

197
00:13:53,170 --> 00:13:56,530
experience with a mobile project on

198
00:13:56,530 --> 00:13:59,290
Android so the problem was like I was

199
00:13:59,290 --> 00:14:02,200
developing my go code at the same time

200
00:14:02,200 --> 00:14:06,940
as the Android application and when you

201
00:14:06,940 --> 00:14:09,040
modified your go code and recompile and

202
00:14:09,040 --> 00:14:13,090
you create a new aar file the Android

203
00:14:13,090 --> 00:14:20,760
project didn't take those changes so you

204
00:14:20,760 --> 00:14:24,970
need to modified yeah you need to add a

205
00:14:24,970 --> 00:14:28,360
new file but a modified another one

206
00:14:28,360 --> 00:14:34,210
you just select at a repository so II

207
00:14:34,210 --> 00:14:38,740
under you make the project compile

208
00:14:38,740 --> 00:14:43,390
everything and take every time the new

209
00:14:43,390 --> 00:14:48,839
changes so that's that's the theory

210
00:14:48,839 --> 00:14:52,420
thus does it work well yes it's work

211
00:14:52,420 --> 00:14:56,650
this is our success story we create a

212
00:14:56,650 --> 00:14:59,190
password manager for tracer tracer is

213
00:14:59,190 --> 00:15:01,360
this small device

214
00:15:01,360 --> 00:15:06,600
it's a crypto currency Hardware wallet

215
00:15:06,870 --> 00:15:09,640
that you connect to your phone the

216
00:15:09,640 --> 00:15:12,160
interface for the application is react

217
00:15:12,160 --> 00:15:18,210
native we already we were using all

218
00:15:18,210 --> 00:15:20,200
existing gold package

219
00:15:20,200 --> 00:15:23,710
Tesoro and we use some color like very

220
00:15:23,710 --> 00:15:25,839
very little hobbit to put everything

221
00:15:25,839 --> 00:15:30,190
together it's available at the Apple

222
00:15:30,190 --> 00:15:33,820
Store they are at the Play Store this is

223
00:15:33,820 --> 00:15:37,839
how it like looks the application and

224
00:15:37,839 --> 00:15:39,600
this is a

225
00:15:39,600 --> 00:15:44,080
this show it's bill or structure the

226
00:15:44,080 --> 00:15:47,800
application all our user interface is

227
00:15:47,800 --> 00:15:52,150
react native the program logic is shared

228
00:15:52,150 --> 00:15:54,460
because the the main logic code is

229
00:15:54,460 --> 00:15:55,240
saying go

230
00:15:55,240 --> 00:15:59,910
but we need Java for a few things like

231
00:15:59,910 --> 00:16:03,100
for example we use it as mostly as a

232
00:16:03,100 --> 00:16:03,670
project

233
00:16:03,670 --> 00:16:08,500
proceed between react and go but there

234
00:16:08,500 --> 00:16:13,210
are a few things like since it's a small

235
00:16:13,210 --> 00:16:14,860
device that you connect to your phone we

236
00:16:14,860 --> 00:16:18,790
need to access the USB and for that you

237
00:16:18,790 --> 00:16:22,810
need a unit first to ask permission in

238
00:16:22,810 --> 00:16:26,050
Java and open the connection to the usb

239
00:16:26,050 --> 00:16:29,080
and then pass the file descriptor to go

240
00:16:29,080 --> 00:16:31,180
and then in god you are ready to eat to

241
00:16:31,180 --> 00:16:34,270
use so or communication with the device

242
00:16:34,270 --> 00:16:37,180
is single but at first when the

243
00:16:37,180 --> 00:16:39,940
application boot up we need to list the

244
00:16:39,940 --> 00:16:42,490
devices connected to the phone and ask

245
00:16:42,490 --> 00:16:46,690
permission for dropbox synchronization

246
00:16:46,690 --> 00:16:50,160
also the authorization is in in Java

247
00:16:50,160 --> 00:16:53,110
because you need to open a web view and

248
00:16:53,110 --> 00:16:55,959
take a token but once we have the token

249
00:16:55,959 --> 00:16:59,110
we pass it to go and the upload in or

250
00:16:59,110 --> 00:17:01,540
done downloading files are darling

251
00:17:01,540 --> 00:17:07,329
in go everything there are other success

252
00:17:07,329 --> 00:17:10,150
story maybe the most famous is Ivy from

253
00:17:10,150 --> 00:17:13,480
Rob Pike which is a interpreter for APL

254
00:17:13,480 --> 00:17:17,319
language cocoa which is a judoka solver

255
00:17:17,319 --> 00:17:22,599
from Miguel Espinosa which he is also

256
00:17:22,599 --> 00:17:25,559
using react native at the user interface

257
00:17:25,559 --> 00:17:30,870
some tips by CERN are in our experience

258
00:17:30,870 --> 00:17:35,470
goal code may take some time if you are

259
00:17:35,470 --> 00:17:38,110
doing some big calculation or something

260
00:17:38,110 --> 00:17:41,679
in our case in is was communication with

261
00:17:41,679 --> 00:17:44,530
the device it could take some time to

262
00:17:44,530 --> 00:17:50,800
get a response and jaw will complain so

263
00:17:50,800 --> 00:17:52,780
to avoid that

264
00:17:52,780 --> 00:17:57,190
you could use a goroutine so on

265
00:17:57,190 --> 00:18:00,940
you called your java as you go code you

266
00:18:00,940 --> 00:18:03,520
just call our routine so this function

267
00:18:03,520 --> 00:18:05,800
written directly to Java and you don't

268
00:18:05,800 --> 00:18:07,870
get another complaint or use an a sync

269
00:18:07,870 --> 00:18:11,380
class in Java for for that if you are

270
00:18:11,380 --> 00:18:13,330
communicating or maybe downloading files

271
00:18:13,330 --> 00:18:19,150
or uploading files as I said before for

272
00:18:19,150 --> 00:18:21,850
accessing Hardware or other feature you

273
00:18:21,850 --> 00:18:24,730
need to ask permission in Java and then

274
00:18:24,730 --> 00:18:27,940
pass the the file descriptor the pointer

275
00:18:27,940 --> 00:18:33,010
or the reference to walk I've been told

276
00:18:33,010 --> 00:18:34,930
there is a little trick like you could

277
00:18:34,930 --> 00:18:41,170
target older SDK version in in Java that

278
00:18:41,170 --> 00:18:43,030
doesn't include that feature so you

279
00:18:43,030 --> 00:18:47,790
maybe are able to directly use the USB

280
00:18:47,790 --> 00:18:52,180
from go but it was a very very little

281
00:18:52,180 --> 00:18:55,420
Java code needed so we don't have any

282
00:18:55,420 --> 00:18:58,360
problem at internal writing or reading

283
00:18:58,360 --> 00:19:03,700
fries at the internal storage but for

284
00:19:03,700 --> 00:19:08,200
external storage you also need to to ask

285
00:19:08,200 --> 00:19:11,770
permission and also since the up cycle

286
00:19:11,770 --> 00:19:16,660
of the Java is a bit strained make sure

287
00:19:16,660 --> 00:19:20,020
you remove or create listener if you are

288
00:19:20,020 --> 00:19:23,280
using one so not as I said before like

289
00:19:23,280 --> 00:19:26,680
Java is experimental in maybe the last

290
00:19:26,680 --> 00:19:30,460
five six months this is what it was

291
00:19:30,460 --> 00:19:33,100
before and this is later this one small

292
00:19:33,100 --> 00:19:35,020
change it but they break your code so

293
00:19:35,020 --> 00:19:37,300
that's that's what you should expect

294
00:19:37,300 --> 00:19:40,810
it's but the gamma while it still is

295
00:19:40,810 --> 00:19:45,190
very very stable it's experimental with

296
00:19:45,190 --> 00:19:48,520
Machane there's a little support for

297
00:19:48,520 --> 00:19:50,500
hardware and sensor for the moment like

298
00:19:50,500 --> 00:19:52,870
the access the camera or USB or maybe

299
00:19:52,870 --> 00:19:55,000
the gyroscope

300
00:19:55,000 --> 00:19:58,720
don't forget is a language device with

301
00:19:58,720 --> 00:20:00,070
some restriction for example to

302
00:20:00,070 --> 00:20:03,310
communicate with the usb we use a Linux

303
00:20:03,310 --> 00:20:06,820
driver by the Inca and

304
00:20:06,820 --> 00:20:09,490
also androidmanifest did you need to put

305
00:20:09,490 --> 00:20:12,370
there some information here is some

306
00:20:12,370 --> 00:20:16,809
links I find useful like a small demo

307
00:20:16,809 --> 00:20:18,910
application I made an example of the

308
00:20:18,910 --> 00:20:21,750
bindings and some more information and

309
00:20:21,750 --> 00:20:24,420
that's all

310
00:20:24,420 --> 00:20:30,719
[Applause]

