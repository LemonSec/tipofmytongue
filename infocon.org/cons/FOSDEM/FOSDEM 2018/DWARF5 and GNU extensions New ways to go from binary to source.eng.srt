1
00:00:05,050 --> 00:00:14,219
<font color="#E5E5E5">have a bit of a culture I'm hoping my my</font>

2
00:00:08,500 --> 00:00:14,219
my voice keeps up but<font color="#CCCCCC"> okay</font>

3
00:00:14,740 --> 00:00:18,330
well hi<font color="#E5E5E5"> mark</font>

4
00:00:18,820 --> 00:00:26,800
<font color="#CCCCCC">reddit</font><font color="#E5E5E5"> is my employer</font><font color="#CCCCCC"> I work in the</font>

5
00:00:23,770 --> 00:00:31,410
<font color="#CCCCCC">birth tools group with Scott</font>

6
00:00:26,800 --> 00:00:36,340
I hope still with sometimes change names

7
00:00:31,410 --> 00:00:46,570
and I mostly work on fragrant<font color="#CCCCCC"> elf</font><font color="#E5E5E5"> fuel</font>

8
00:00:36,340 --> 00:00:50,440
system<font color="#E5E5E5"> tab</font><font color="#CCCCCC"> well in debug stuff so when I</font>

9
00:00:46,570 --> 00:00:58,350
wrote the<font color="#CCCCCC"> title going</font><font color="#E5E5E5"> from binary to</font>

10
00:00:50,440 --> 00:01:01,209
source<font color="#CCCCCC"> that's just part of what dwarf is</font>

11
00:00:58,350 --> 00:01:04,180
because if that was all there<font color="#CCCCCC"> is then</font>

12
00:01:01,210 --> 00:01:06,219
<font color="#CCCCCC">you just need</font><font color="#E5E5E5"> the debug line mapping you</font>

13
00:01:04,180 --> 00:01:10,389
take an address<font color="#CCCCCC"> out that's the source</font>

14
00:01:06,219 --> 00:01:17,530
and wine but dwarf does well<font color="#E5E5E5"> so much</font>

15
00:01:10,389 --> 00:01:22,090
more you want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> know which functions</font>

16
00:01:17,530 --> 00:01:25,869
there<font color="#CCCCCC"> are what</font><font color="#E5E5E5"> parameters</font><font color="#CCCCCC"> are in the</font>

17
00:01:22,090 --> 00:01:29,229
function either variables<font color="#CCCCCC"> what is the</font>

18
00:01:25,869 --> 00:01:35,020
scope of<font color="#E5E5E5"> the variables what are the</font>

19
00:01:29,229 --> 00:01:39,520
types of the various<font color="#E5E5E5"> things</font><font color="#CCCCCC"> so you</font><font color="#E5E5E5"> have</font>

20
00:01:35,020 --> 00:01:43,719
that and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> given those variables you</font>

21
00:01:39,520 --> 00:01:46,929
want<font color="#E5E5E5"> our values</font><font color="#CCCCCC"> the location descriptors</font>

22
00:01:43,719 --> 00:01:57,339
which I thought works pretty well but

23
00:01:46,929 --> 00:02:01,689
<font color="#E5E5E5">then well you saw the Lost Ark</font><font color="#CCCCCC"> you want</font>

24
00:01:57,340 --> 00:02:07,389
to know ranges of things so you've debug

25
00:02:01,689 --> 00:02:10,419
ranges<font color="#E5E5E5"> you want to know how you got in a</font>

26
00:02:07,389 --> 00:02:14,890
function so<font color="#CCCCCC"> dwarf</font><font color="#E5E5E5"> provides you unwind</font>

27
00:02:10,419 --> 00:02:17,319
information<font color="#CCCCCC"> not</font><font color="#E5E5E5"> just to know where you</font>

28
00:02:14,890 --> 00:02:24,720
came from but also

29
00:02:17,319 --> 00:02:27,339
<font color="#E5E5E5">- to get</font><font color="#CCCCCC"> back at the</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> coloring work</font>

30
00:02:24,720 --> 00:02:29,950
the flow use of the registers when a

31
00:02:27,340 --> 00:02:37,959
<font color="#E5E5E5">function was called you can inspect the</font>

32
00:02:29,950 --> 00:02:41,440
values at the previous frame<font color="#CCCCCC"> it even</font>

33
00:02:37,959 --> 00:02:46,569
provides<font color="#CCCCCC"> although most most compilers</font>

34
00:02:41,440 --> 00:02:50,680
don't emitted directly<font color="#CCCCCC"> macro so that if</font>

35
00:02:46,569 --> 00:02:55,209
you<font color="#E5E5E5"> ever you</font><font color="#CCCCCC"> know the source you want</font><font color="#E5E5E5"> to</font>

36
00:02:50,680 --> 00:03:02,970
<font color="#CCCCCC">copy/paste it you can use the macro</font><font color="#E5E5E5"> to</font>

37
00:02:55,209 --> 00:03:09,640
expand all the defines in your code<font color="#E5E5E5"> okay</font>

38
00:03:02,970 --> 00:03:14,890
that's a lot<font color="#CCCCCC"> of things and dwarf has a</font>

39
00:03:09,640 --> 00:03:18,279
lot<font color="#CCCCCC"> of design goals</font><font color="#E5E5E5"> probably a bit too</font>

40
00:03:14,890 --> 00:03:23,668
<font color="#E5E5E5">many because they conflict with each</font>

41
00:03:18,280 --> 00:03:28,510
<font color="#E5E5E5">other of</font><font color="#CCCCCC"> course it's kind of interesting</font>

42
00:03:23,669 --> 00:03:31,989
<font color="#E5E5E5">that the</font><font color="#CCCCCC"> loss talk was a lot about well</font>

43
00:03:28,510 --> 00:03:35,048
that's defined by<font color="#CCCCCC"> the ABI</font><font color="#E5E5E5"> because one of</font>

44
00:03:31,989 --> 00:03:37,590
<font color="#E5E5E5">the design goals is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> its</font>

45
00:03:35,049 --> 00:03:41,739
implementation<font color="#CCCCCC"> independent</font>

46
00:03:37,590 --> 00:03:47,099
so in principle for example unwinding

47
00:03:41,739 --> 00:03:49,329
<font color="#CCCCCC">you can do almost</font><font color="#E5E5E5"> without any ABI</font>

48
00:03:47,099 --> 00:03:52,950
knowledge the and the only<font color="#E5E5E5"> thing you</font>

49
00:03:49,329 --> 00:03:56,650
need<font color="#CCCCCC"> to know is which</font><font color="#E5E5E5"> registered number</font>

50
00:03:52,950 --> 00:03:59,709
corresponds to<font color="#E5E5E5"> its actual register on</font>

51
00:03:56,650 --> 00:04:03,030
that architecture<font color="#E5E5E5"> so it's kind of</font>

52
00:03:59,709 --> 00:04:09,129
<font color="#E5E5E5">interesting to</font><font color="#CCCCCC"> see that</font><font color="#E5E5E5"> it's not always</font>

53
00:04:03,030 --> 00:04:12,750
done<font color="#E5E5E5"> but what is</font><font color="#CCCCCC"> really nice at least I</font>

54
00:04:09,129 --> 00:04:17,440
think so<font color="#E5E5E5"> now I talked to</font><font color="#CCCCCC"> Tom man Tom</font>

55
00:04:12,750 --> 00:04:24,270
that's<font color="#E5E5E5"> the worst part that's not not</font>

56
00:04:17,440 --> 00:04:28,719
<font color="#E5E5E5">really true but various places dwarf</font>

57
00:04:24,270 --> 00:04:30,820
defines vendor extensions<font color="#E5E5E5"> so to reserve</font>

58
00:04:28,719 --> 00:04:35,440
<font color="#E5E5E5">the space of constants</font>

59
00:04:30,820 --> 00:04:43,140
<font color="#E5E5E5">you'll use that then go ahead and add</font>

60
00:04:35,440 --> 00:04:46,170
<font color="#CCCCCC">some extra operators or forms</font><font color="#E5E5E5"> and I</font>

61
00:04:43,140 --> 00:04:50,890
actually think that<font color="#E5E5E5"> works out quite</font>

62
00:04:46,170 --> 00:04:55,480
nicely<font color="#E5E5E5"> because a lot of new</font><font color="#CCCCCC"> vendor</font>

63
00:04:50,890 --> 00:04:58,990
extensions<font color="#E5E5E5"> that then get standardized</font>

64
00:04:55,480 --> 00:05:04,540
<font color="#E5E5E5">later on of course the problem</font><font color="#CCCCCC"> with the</font>

65
00:04:58,990 --> 00:05:06,760
<font color="#CCCCCC">vendor intensities you have to implement</font>

66
00:05:04,540 --> 00:05:10,620
them in all the producers<font color="#E5E5E5"> and all the</font>

67
00:05:06,760 --> 00:05:16,659
<font color="#CCCCCC">the consumers</font><font color="#E5E5E5"> for them to actually work</font>

68
00:05:10,620 --> 00:05:18,940
and<font color="#E5E5E5"> I think Tom's issue is</font><font color="#CCCCCC"> that then</font>

69
00:05:16,660 --> 00:05:22,720
when<font color="#E5E5E5"> they get standardized you get to</font>

70
00:05:18,940 --> 00:05:34,450
implement them all again<font color="#CCCCCC"> but but I think</font>

71
00:05:22,720 --> 00:05:37,840
<font color="#CCCCCC">it works</font><font color="#E5E5E5"> quite well this is</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> of the</font>

72
00:05:34,450 --> 00:05:40,440
design goals that<font color="#E5E5E5"> I picked out</font><font color="#CCCCCC"> because I</font>

73
00:05:37,840 --> 00:05:45,690
had to pick something<font color="#CCCCCC"> to talk about and</font>

74
00:05:40,440 --> 00:05:48,660
when I started to list everything that

75
00:05:45,690 --> 00:05:53,740
dwarf I've got from the various new

76
00:05:48,660 --> 00:05:59,950
extensions it was way too many<font color="#CCCCCC"> so it's</font>

77
00:05:53,740 --> 00:06:09,790
it's<font color="#E5E5E5"> it's I like this this design goal</font>

78
00:05:59,950 --> 00:06:14,289
that you you<font color="#E5E5E5"> tools that have to process</font>

79
00:06:09,790 --> 00:06:23,130
<font color="#E5E5E5">dwarf</font><font color="#CCCCCC"> don't have to know about Wharf and</font>

80
00:06:14,290 --> 00:06:28,270
I<font color="#E5E5E5"> think that really helped dwarf become</font>

81
00:06:23,130 --> 00:06:32,050
quickly usable because<font color="#E5E5E5"> it means you</font><font color="#CCCCCC"> can</font>

82
00:06:28,270 --> 00:06:36,190
easily compose pieces of code with dwarf

83
00:06:32,050 --> 00:06:43,189
<font color="#E5E5E5">and combine them</font>

84
00:06:36,190 --> 00:06:48,919
of course<font color="#CCCCCC"> this bites</font>

85
00:06:43,189 --> 00:06:51,229
some of the other design goals<font color="#CCCCCC"> but I</font>

86
00:06:48,919 --> 00:06:56,859
thought there were<font color="#CCCCCC"> some so clever</font>

87
00:06:51,229 --> 00:07:03,498
extensions<font color="#E5E5E5"> integrated into</font><font color="#CCCCCC"> y5 that</font>

88
00:06:56,860 --> 00:07:08,300
counter some<font color="#CCCCCC"> of these limitations</font><font color="#E5E5E5"> yeah</font>

89
00:07:03,499 --> 00:07:12,409
go look there for<font color="#E5E5E5"> the whole standard and</font>

90
00:07:08,300 --> 00:07:28,159
then we we just<font color="#E5E5E5"> discuss a</font><font color="#CCCCCC"> couple</font><font color="#E5E5E5"> of new</font>

91
00:07:12,409 --> 00:07:32,469
data representations so to compose<font color="#CCCCCC"> to</font>

92
00:07:28,159 --> 00:07:40,248
<font color="#CCCCCC">are from two objects which contain dwarf</font>

93
00:07:32,469 --> 00:07:41,659
<font color="#CCCCCC">you you don't need that much so this you</font>

94
00:07:40,249 --> 00:07:48,079
<font color="#E5E5E5">have an assembler where you can</font>

95
00:07:41,659 --> 00:07:53,509
reference labels in the data section<font color="#CCCCCC"> you</font>

96
00:07:48,079 --> 00:07:58,789
want<font color="#E5E5E5"> a way to reference between sections</font>

97
00:07:53,509 --> 00:08:02,300
so for example you<font color="#E5E5E5"> have the info tree</font>

98
00:07:58,789 --> 00:08:06,019
which describes a variable and<font color="#CCCCCC"> attached</font>

99
00:08:02,300 --> 00:08:13,669
<font color="#E5E5E5">to reference</font><font color="#CCCCCC"> where the location the</font>

100
00:08:06,019 --> 00:08:18,319
scripture is in<font color="#CCCCCC"> another data section you</font>

101
00:08:13,669 --> 00:08:20,799
actually have addresses of symbols which

102
00:08:18,319 --> 00:08:26,929
you don't know yet where they will be<font color="#E5E5E5"> so</font>

103
00:08:20,800 --> 00:08:31,129
you<font color="#E5E5E5"> you need some way for tools</font><font color="#CCCCCC"> to do</font>

104
00:08:26,929 --> 00:08:35,539
the relocation<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it would be nice if</font>

105
00:08:31,129 --> 00:08:37,938
<font color="#CCCCCC">there</font><font color="#E5E5E5"> someone knows how to to create lab</font>

106
00:08:35,539 --> 00:08:40,968
<font color="#CCCCCC">one to</font><font color="#E5E5E5"> eight</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't know how you</font>

107
00:08:37,938 --> 00:08:46,670
pronounce<font color="#E5E5E5"> it but a a company compact</font>

108
00:08:40,969 --> 00:08:48,920
form<font color="#E5E5E5"> of writing</font><font color="#CCCCCC"> are constants because</font>

109
00:08:46,670 --> 00:08:53,839
otherwise you have<font color="#CCCCCC"> to do that and</font><font color="#E5E5E5"> it's a</font>

110
00:08:48,920 --> 00:08:56,010
pain<font color="#E5E5E5"> but but that's that's it with with</font>

111
00:08:53,839 --> 00:09:01,560
just<font color="#CCCCCC"> that</font><font color="#E5E5E5"> which is basic</font>

112
00:08:56,010 --> 00:09:08,970
the generic assembler linker<font color="#E5E5E5"> you you can</font>

113
00:09:01,560 --> 00:09:12,839
combine<font color="#E5E5E5"> dwarf</font><font color="#CCCCCC"> one of the nice things</font>

114
00:09:08,970 --> 00:09:17,760
about<font color="#E5E5E5"> that is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can combine</font>

115
00:09:12,840 --> 00:09:21,750
<font color="#CCCCCC">different</font><font color="#E5E5E5"> dwarf producers if your first</font>

116
00:09:17,760 --> 00:09:24,450
<font color="#CCCCCC">c4</font><font color="#E5E5E5"> assembler file you get</font><font color="#CCCCCC"> two object</font>

117
00:09:21,750 --> 00:09:28,980
files and they get combined<font color="#E5E5E5"> even though</font>

118
00:09:24,450 --> 00:09:30,480
they produce<font color="#CCCCCC"> they have different dwarf</font>

119
00:09:28,980 --> 00:09:33,570
producers you don't have to know

120
00:09:30,480 --> 00:09:43,140
anything about the dwarf<font color="#E5E5E5"> they get</font>

121
00:09:33,570 --> 00:09:44,600
combined so to do this show of course

122
00:09:43,140 --> 00:09:47,780
<font color="#E5E5E5">not</font>

123
00:09:44,600 --> 00:09:47,780
you know

124
00:09:50,280 --> 00:09:59,120
now it's a tool it's<font color="#E5E5E5"> somewhat readable</font>

125
00:10:01,520 --> 00:10:13,710
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> I wanted to have an example where</font>

126
00:10:06,350 --> 00:10:17,090
it was a completely<font color="#E5E5E5"> trivial but even</font>

127
00:10:13,710 --> 00:10:22,410
<font color="#E5E5E5">this actually produces too much to</font><font color="#CCCCCC"> us</font>

128
00:10:17,090 --> 00:10:25,440
<font color="#CCCCCC">and</font><font color="#E5E5E5"> sadly it also doesn't show size</font>

129
00:10:22,410 --> 00:10:28,189
reduction because on the other<font color="#E5E5E5"> end it's</font>

130
00:10:25,440 --> 00:10:36,570
way too small<font color="#E5E5E5"> so the overheads just</font>

131
00:10:28,190 --> 00:10:40,520
<font color="#CCCCCC">dwarfs it</font><font color="#E5E5E5"> so all the</font><font color="#CCCCCC"> files are almost</font>

132
00:10:36,570 --> 00:10:44,040
the<font color="#CCCCCC"> same size</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> though I want to show</font>

133
00:10:40,520 --> 00:10:47,520
reduction<font color="#CCCCCC"> inside anyway what we what we</font>

134
00:10:44,040 --> 00:10:51,959
<font color="#CCCCCC">have is a header file with a simple</font>

135
00:10:47,520 --> 00:10:56,010
struct and<font color="#E5E5E5"> defines a function that takes</font>

136
00:10:51,960 --> 00:11:01,290
a pointer to<font color="#CCCCCC"> search the struct and we</font>

137
00:10:56,010 --> 00:11:08,939
have two files<font color="#CCCCCC"> yeah this will most</font>

138
00:11:01,290 --> 00:11:14,160
likely crash and burn<font color="#CCCCCC"> so this defines</font>

139
00:11:08,940 --> 00:11:23,990
<font color="#E5E5E5">the function and you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> an main that</font>

140
00:11:14,160 --> 00:11:23,990
cost function and the nice thing<font color="#CCCCCC"> is that</font>

141
00:11:24,860 --> 00:11:35,730
you<font color="#CCCCCC"> just create 200</font><font color="#E5E5E5"> files and you</font>

142
00:11:30,360 --> 00:11:39,810
<font color="#CCCCCC">combine</font><font color="#E5E5E5"> them together and the linker</font>

143
00:11:35,730 --> 00:11:45,830
doesn't need to<font color="#CCCCCC"> know about the different</font>

144
00:11:39,810 --> 00:11:49,829
dwarf<font color="#CCCCCC"> what the dwarf data precisely</font>

145
00:11:45,830 --> 00:11:56,130
<font color="#E5E5E5">represents so we just looked at the</font>

146
00:11:49,830 --> 00:11:58,680
debug info for this<font color="#CCCCCC"> so you have the</font>

147
00:11:56,130 --> 00:12:01,220
first<font color="#E5E5E5"> compiled</font><font color="#CCCCCC"> unit which comes from</font><font color="#E5E5E5"> F</font>

148
00:11:58,680 --> 00:12:01,219
dot C

149
00:12:02,070 --> 00:12:11,430
the flop function<font color="#E5E5E5"> errors name was</font>

150
00:12:04,710 --> 00:12:15,780
resolved<font color="#E5E5E5"> and the statement the statement</font>

151
00:12:11,430 --> 00:12:24,810
<font color="#E5E5E5">list is the line table to use for this</font>

152
00:12:15,780 --> 00:12:27,660
<font color="#CCCCCC">and</font><font color="#E5E5E5"> that's at offset zero and that's in</font>

153
00:12:24,810 --> 00:12:32,609
principle all the relocation<font color="#CCCCCC"> you need in</font>

154
00:12:27,660 --> 00:12:36,089
in<font color="#E5E5E5"> this case the matching debug line was</font>

155
00:12:32,610 --> 00:12:39,930
placed at the<font color="#CCCCCC"> start</font><font color="#E5E5E5"> because the first</font>

156
00:12:36,090 --> 00:12:46,110
object file that you will see for the

157
00:12:39,930 --> 00:12:55,109
<font color="#E5E5E5">word for the second one that the</font>

158
00:12:46,110 --> 00:12:58,860
statement list is at the next of offset

159
00:12:55,110 --> 00:13:08,300
and all the link has<font color="#CCCCCC"> to do is place the</font>

160
00:12:58,860 --> 00:13:08,300
debug line pieces after each other<font color="#E5E5E5"> so in</font>

161
00:13:09,500 --> 00:13:20,370
the thing<font color="#E5E5E5"> you see immediately</font>

162
00:13:12,360 --> 00:13:23,940
immediately here is in this in both<font color="#CCCCCC"> the</font>

163
00:13:20,370 --> 00:13:30,530
<font color="#E5E5E5">first and the second compile unit we</font>

164
00:13:23,940 --> 00:13:34,200
<font color="#CCCCCC">just redefine that that that</font><font color="#E5E5E5"> such a type</font>

165
00:13:30,530 --> 00:13:36,439
which is a bit wasteful<font color="#E5E5E5"> especially given</font>

166
00:13:34,200 --> 00:13:39,870
that<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of the jungles of the</font><font color="#E5E5E5"> earth was</font>

167
00:13:36,440 --> 00:13:45,960
<font color="#CCCCCC">that doesn't shouldn't repeat itself too</font>

168
00:13:39,870 --> 00:13:53,040
much but of course this<font color="#CCCCCC"> comes from</font><font color="#E5E5E5"> we</font>

169
00:13:45,960 --> 00:14:00,540
want as<font color="#E5E5E5"> simple as possible tools to</font>

170
00:13:53,040 --> 00:14:06,630
combine dwarf<font color="#CCCCCC"> and object files yeah</font>

171
00:14:00,540 --> 00:14:08,819
<font color="#E5E5E5">let's go back</font><font color="#CCCCCC"> precisely</font>

172
00:14:06,630 --> 00:14:13,500
that's the conclusion<font color="#E5E5E5"> yes</font>

173
00:14:08,820 --> 00:14:17,460
so it's a simple concatenation well what

174
00:14:13,500 --> 00:14:36,750
happens if you<font color="#E5E5E5"> combine the option showed</font>

175
00:14:17,460 --> 00:14:39,060
up to the linkage<font color="#CCCCCC"> it sits in that's a</font>

176
00:14:36,750 --> 00:14:42,870
nice question because the dwarf isn't

177
00:14:39,060 --> 00:14:46,890
touched so if the dwarf<font color="#E5E5E5"> in the original</font>

178
00:14:42,870 --> 00:14:53,180
object files<font color="#E5E5E5"> describes the function</font><font color="#CCCCCC"> that</font>

179
00:14:46,890 --> 00:14:53,180
you then<font color="#CCCCCC"> Leeman eliminate later its</font>

180
00:15:12,250 --> 00:15:21,740
and then get it<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

181
00:15:14,870 --> 00:15:34,330
yeah so<font color="#E5E5E5"> and indeed one of the questions</font>

182
00:15:21,740 --> 00:15:41,390
is if this design goal is but so what if

183
00:15:34,330 --> 00:15:44,210
<font color="#E5E5E5">we put all the all those types in the</font>

184
00:15:41,390 --> 00:15:48,850
their<font color="#E5E5E5"> own section</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> what if we add</font>

185
00:15:44,210 --> 00:15:54,710
tools that had a link once section or

186
00:15:48,850 --> 00:15:57,200
section<font color="#E5E5E5"> group which is a good question</font>

187
00:15:54,710 --> 00:16:00,040
<font color="#CCCCCC">to ask</font><font color="#E5E5E5"> because that's how come that</font>

188
00:15:57,200 --> 00:16:08,720
sections and<font color="#CCCCCC"> link are supported so</font>

189
00:16:00,040 --> 00:16:11,060
that's a nice thing<font color="#E5E5E5"> then if we would</font>

190
00:16:08,720 --> 00:16:16,250
calculate some hairs or<font color="#E5E5E5"> checksum over</font>

191
00:16:11,060 --> 00:16:18,829
the type that we put in in a special

192
00:16:16,250 --> 00:16:25,060
section that we could reference those

193
00:16:18,830 --> 00:16:25,060
sections with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> net with the has name</font>

194
00:16:26,770 --> 00:16:38,720
well that's basically what<font color="#CCCCCC"> deeper</font><font color="#E5E5E5"> types</font>

195
00:16:31,700 --> 00:16:47,540
do<font color="#E5E5E5"> it was actually an extension for</font>

196
00:16:38,720 --> 00:16:51,050
dwarf<font color="#CCCCCC"> tree</font><font color="#E5E5E5"> interpreters in 12 for the</font>

197
00:16:47,540 --> 00:16:57,020
only<font color="#CCCCCC"> thing you then need is a way to</font>

198
00:16:51,050 --> 00:17:03,620
reference<font color="#E5E5E5"> a a type with with a signature</font>

199
00:16:57,020 --> 00:17:08,420
or<font color="#CCCCCC"> here so the the problem is</font><font color="#E5E5E5"> that it</font>

200
00:17:03,620 --> 00:17:18,170
does need a new<font color="#E5E5E5"> 12 unit header so you</font>

201
00:17:08,420 --> 00:17:22,970
couldn't<font color="#CCCCCC"> easily combine them and for</font>

202
00:17:18,170 --> 00:17:26,290
<font color="#CCCCCC">that reason</font><font color="#E5E5E5"> in others they were</font><font color="#CCCCCC"> put in a</font>

203
00:17:22,970 --> 00:17:26,290
<font color="#E5E5E5">different section</font>

204
00:17:26,680 --> 00:17:45,800
so well<font color="#E5E5E5"> no first example no - yeah yes</font>

205
00:17:34,150 --> 00:17:51,460
so not so far so<font color="#CCCCCC"> DC implements this with</font>

206
00:17:45,800 --> 00:17:51,460
<font color="#E5E5E5">Deva type sections we compile it again</font>

207
00:17:51,820 --> 00:18:15,070
and this time we see the same debug info

208
00:18:03,470 --> 00:18:15,070
<font color="#E5E5E5">let's see if I can find flop and flop</font><font color="#CCCCCC"> C</font>

209
00:18:15,610 --> 00:18:28,090
F F is defined as a type<font color="#CCCCCC"> 2</font><font color="#E5E5E5"> D where okay</font>

210
00:18:25,090 --> 00:18:28,090
<font color="#CCCCCC">bears</font>

211
00:18:31,179 --> 00:18:45,890
which is no well<font color="#E5E5E5"> I have</font><font color="#CCCCCC"> to one time</font><font color="#E5E5E5"> I</font>

212
00:18:38,740 --> 00:18:53,440
knew I made my example to be sorry<font color="#CCCCCC"> now</font>

213
00:18:45,890 --> 00:19:01,340
I've<font color="#CCCCCC"> run not so ok the argument F is</font>

214
00:18:53,440 --> 00:19:09,860
<font color="#E5E5E5">type 92 it's a pointer type and pointer</font>

215
00:19:01,340 --> 00:19:13,610
<font color="#CCCCCC">to oh wow that one and the nice thing is</font>

216
00:19:09,860 --> 00:19:17,229
<font color="#CCCCCC">that in the other</font><font color="#E5E5E5"> compiled units we</font>

217
00:19:13,610 --> 00:19:25,219
should have the<font color="#E5E5E5"> same when we posit yes</font>

218
00:19:17,230 --> 00:19:29,030
<font color="#CCCCCC">we when we create</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> variable</font><font color="#E5E5E5"> it has the</font>

219
00:19:25,220 --> 00:19:31,270
same signature<font color="#CCCCCC"> I'm sure that's the</font><font color="#E5E5E5"> same</font>

220
00:19:29,030 --> 00:19:31,270
one

221
00:19:31,360 --> 00:19:42,740
and now we have a debug type<font color="#E5E5E5"> section</font>

222
00:19:35,150 --> 00:19:51,440
which at with<font color="#E5E5E5"> that same signature and</font>

223
00:19:42,740 --> 00:19:53,169
there is only one of them<font color="#E5E5E5"> there is yeah</font>

224
00:19:51,440 --> 00:20:00,529
there's

225
00:19:53,169 --> 00:20:07,059
so that that's<font color="#CCCCCC"> really nice because we</font>

226
00:20:00,529 --> 00:20:10,579
need another linker mechanism but now we

227
00:20:07,059 --> 00:20:16,189
<font color="#E5E5E5">duplicate some information for free</font>

228
00:20:10,579 --> 00:20:19,999
<font color="#E5E5E5">Oh though that's my example</font><font color="#CCCCCC"> I was trying</font>

229
00:20:16,189 --> 00:20:22,249
<font color="#E5E5E5">to show that it</font><font color="#CCCCCC"> really saves</font><font color="#E5E5E5"> memory and</font>

230
00:20:19,999 --> 00:20:25,029
actually<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> object files are</font>

231
00:20:22,249 --> 00:20:30,549
slightly bigger<font color="#E5E5E5"> because this one</font>

232
00:20:25,029 --> 00:20:37,959
structure is too small<font color="#E5E5E5"> for the header so</font>

233
00:20:30,549 --> 00:20:41,119
<font color="#CCCCCC">doesn't really</font><font color="#E5E5E5"> help there but you most</font>

234
00:20:37,959 --> 00:20:44,959
programs includes<font color="#CCCCCC"> watcher here there's</font>

235
00:20:41,119 --> 00:20:49,279
more types<font color="#E5E5E5"> lots of types so it actually</font>

236
00:20:44,959 --> 00:20:56,119
really helps<font color="#CCCCCC"> there the problem with it</font>

237
00:20:49,279 --> 00:21:01,489
<font color="#E5E5E5">is that it makes things more complicated</font>

238
00:20:56,119 --> 00:21:05,329
<font color="#CCCCCC">so now to tie data sections it's not</font>

239
00:21:01,489 --> 00:21:07,429
<font color="#E5E5E5">enabled by default and you see even</font>

240
00:21:05,329 --> 00:21:14,829
though I believe<font color="#E5E5E5"> don't try to make it</font>

241
00:21:07,429 --> 00:21:17,569
the default<font color="#E5E5E5"> sorry</font><font color="#CCCCCC"> well one</font><font color="#E5E5E5"> of the</font>

242
00:21:14,829 --> 00:21:23,029
problems was that<font color="#E5E5E5"> everybody was kind of</font>

243
00:21:17,569 --> 00:21:26,269
lazy so most consumers have offsets<font color="#E5E5E5"> into</font>

244
00:21:23,029 --> 00:21:28,159
the data section and they just keep an

245
00:21:26,269 --> 00:21:31,389
offset and<font color="#CCCCCC"> now they have to keep an</font>

246
00:21:28,159 --> 00:21:41,179
offset and<font color="#CCCCCC"> oh it could be one of those</font>

247
00:21:31,389 --> 00:21:45,198
sections<font color="#CCCCCC"> I</font><font color="#E5E5E5"> must say</font><font color="#CCCCCC"> I'm I'm I'm showing</font>

248
00:21:41,179 --> 00:21:52,669
the new extensions but in the<font color="#CCCCCC"> par 5 what</font>

249
00:21:45,199 --> 00:21:56,089
they did<font color="#E5E5E5"> was extend the die</font><font color="#CCCCCC"> compile unit</font>

250
00:21:52,669 --> 00:22:01,429
headers so you can now combine<font color="#CCCCCC"> five</font>

251
00:21:56,089 --> 00:22:04,489
units<font color="#CCCCCC"> in all kinds of different units</font><font color="#E5E5E5"> in</font>

252
00:22:01,429 --> 00:22:07,749
the same debug info section so that's

253
00:22:04,489 --> 00:22:07,749
actually<font color="#E5E5E5"> simpler</font>

254
00:22:08,620 --> 00:22:22,909
<font color="#E5E5E5">but they also added more complexity</font><font color="#CCCCCC"> that</font>

255
00:22:15,550 --> 00:22:28,040
yeah so it's it's it's still very large

256
00:22:22,910 --> 00:22:31,820
<font color="#E5E5E5">and</font><font color="#CCCCCC"> it's if you look in the example you</font>

257
00:22:28,040 --> 00:22:37,460
<font color="#E5E5E5">see lots of relocations references to</font>

258
00:22:31,820 --> 00:22:39,800
other data sections and the linker

259
00:22:37,460 --> 00:22:43,120
actually has to deal<font color="#CCCCCC"> with</font><font color="#E5E5E5"> all that so</font>

260
00:22:39,800 --> 00:22:47,090
what what could we

261
00:22:43,120 --> 00:22:50,659
we need them really forced<font color="#E5E5E5"> for</font><font color="#CCCCCC"> Strings</font>

262
00:22:47,090 --> 00:22:54,310
it's really nice if the tools know how

263
00:22:50,660 --> 00:22:59,080
to merge strings<font color="#E5E5E5"> because a lot of</font>

264
00:22:54,310 --> 00:23:02,300
<font color="#E5E5E5">strings</font><font color="#CCCCCC"> and you really want those to be</font>

265
00:22:59,080 --> 00:23:06,939
merged<font color="#CCCCCC"> and of course for the</font><font color="#E5E5E5"> other</font>

266
00:23:02,300 --> 00:23:09,220
symbols you need<font color="#E5E5E5"> relocations and</font><font color="#CCCCCC"> you use</font>

267
00:23:06,940 --> 00:23:19,100
relocations for the intersection

268
00:23:09,220 --> 00:23:23,630
<font color="#E5E5E5">references and what if we could do</font>

269
00:23:19,100 --> 00:23:26,860
<font color="#E5E5E5">something about that and as always the</font>

270
00:23:23,630 --> 00:23:33,110
answer<font color="#CCCCCC"> is you add a layer of indirection</font>

271
00:23:26,860 --> 00:23:37,780
<font color="#E5E5E5">of course</font><font color="#CCCCCC"> so what we do is we put all</font>

272
00:23:33,110 --> 00:23:42,379
the addresses<font color="#E5E5E5"> in their own section</font><font color="#CCCCCC"> and</font>

273
00:23:37,780 --> 00:23:48,020
<font color="#CCCCCC">that's basically just</font><font color="#E5E5E5"> an index and then</font>

274
00:23:42,380 --> 00:23:52,430
you can use an index into the<font color="#E5E5E5"> errors</font><font color="#CCCCCC"> and</font>

275
00:23:48,020 --> 00:23:57,770
debug address section and the same we do

276
00:23:52,430 --> 00:24:04,190
with strings<font color="#CCCCCC"> we add a new assets section</font>

277
00:23:57,770 --> 00:24:06,710
<font color="#E5E5E5">so you have instead of</font><font color="#CCCCCC"> having</font><font color="#E5E5E5"> to point</font>

278
00:24:04,190 --> 00:24:10,280
directly<font color="#E5E5E5"> to a string and asking the</font>

279
00:24:06,710 --> 00:24:14,530
<font color="#E5E5E5">linker fix this up if you put the string</font>

280
00:24:10,280 --> 00:24:17,060
<font color="#E5E5E5">somewhere else you have a new</font><font color="#CCCCCC"> oops</font>

281
00:24:14,530 --> 00:24:19,290
an indirection so you can just

282
00:24:17,060 --> 00:24:25,860
<font color="#CCCCCC">I want string one</font>

283
00:24:19,290 --> 00:24:30,379
<font color="#CCCCCC">and just relocate the addresses of</font>

284
00:24:25,860 --> 00:24:35,370
<font color="#CCCCCC">things in</font><font color="#E5E5E5"> that section</font><font color="#CCCCCC"> and then finally</font>

285
00:24:30,380 --> 00:24:40,700
instead of for example<font color="#E5E5E5"> the location the</font>

286
00:24:35,370 --> 00:24:40,699
scripture<font color="#E5E5E5"> descriptions saying okay</font><font color="#CCCCCC"> my</font>

287
00:24:40,850 --> 00:24:55,860
workshop<font color="#CCCCCC"> instead of saying my</font><font color="#E5E5E5"> location</font>

288
00:24:45,180 --> 00:24:58,800
<font color="#E5E5E5">the scripts is</font><font color="#CCCCCC"> at that offset in the</font>

289
00:24:55,860 --> 00:25:05,340
debug log<font color="#E5E5E5"> section or the range you want</font>

290
00:24:58,800 --> 00:25:15,389
<font color="#CCCCCC">to</font><font color="#E5E5E5"> range</font><font color="#CCCCCC"> what we do is we add a an index</font>

291
00:25:05,340 --> 00:25:18,240
at<font color="#E5E5E5"> the start of the section and we</font><font color="#CCCCCC"> at</font>

292
00:25:15,390 --> 00:25:26,160
the<font color="#E5E5E5"> start of the compile unit we</font><font color="#CCCCCC"> just</font>

293
00:25:18,240 --> 00:25:31,860
say I'm using the debug log section that

294
00:25:26,160 --> 00:25:38,240
one and from there you<font color="#CCCCCC"> just again use</font>

295
00:25:31,860 --> 00:25:42,840
indexes to where your<font color="#E5E5E5"> real ranges or</font>

296
00:25:38,240 --> 00:25:48,780
what they start<font color="#E5E5E5"> one of the nice things</font>

297
00:25:42,840 --> 00:25:52,530
<font color="#CCCCCC">is that</font><font color="#E5E5E5"> true about</font><font color="#CCCCCC"> if we use all those</font>

298
00:25:48,780 --> 00:25:56,430
in<font color="#E5E5E5"> directions we can move most of it out</font>

299
00:25:52,530 --> 00:26:03,389
<font color="#E5E5E5">of the objects valves so we don't need a</font>

300
00:25:56,430 --> 00:26:10,760
linker to even see the most of the dwarf

301
00:26:03,390 --> 00:26:10,760
data it still has<font color="#E5E5E5"> to see the addresses</font>

302
00:26:11,960 --> 00:26:27,140
<font color="#CCCCCC">but even the strings can be moved away</font>

303
00:26:20,220 --> 00:26:31,809
and this<font color="#E5E5E5"> is kind of interesting because</font>

304
00:26:27,140 --> 00:26:41,169
so<font color="#E5E5E5"> I first show how see yeah that's</font>

305
00:26:31,809 --> 00:26:47,019
so what we do here<font color="#CCCCCC"> is this is actually</font>

306
00:26:41,169 --> 00:26:55,330
<font color="#E5E5E5">the war for new extension that kind of</font>

307
00:26:47,019 --> 00:27:02,859
the<font color="#E5E5E5"> same and I should have shown that it</font>

308
00:26:55,330 --> 00:27:06,359
now creates about an an alpha and a<font color="#CCCCCC"> DW l</font>

309
00:27:02,859 --> 00:27:13,478
to our<font color="#E5E5E5"> object</font><font color="#CCCCCC"> for twelve objects I'll</font>

310
00:27:06,359 --> 00:27:17,460
and a drop objects<font color="#E5E5E5"> all is well what you</font>

311
00:27:13,479 --> 00:27:21,429
see is in the object file<font color="#E5E5E5"> you you</font>

312
00:27:17,460 --> 00:27:24,759
instead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> a real compiled unit your</font>

313
00:27:21,429 --> 00:27:28,839
skeleton and<font color="#CCCCCC"> well there are some</font>

314
00:27:24,759 --> 00:27:33,039
<font color="#E5E5E5">addresses</font><font color="#CCCCCC"> there and it's there are some</font>

315
00:27:28,839 --> 00:27:38,799
section offsets<font color="#CCCCCC"> it has the bay at</font><font color="#E5E5E5"> the</font>

316
00:27:33,039 --> 00:27:44,940
base address to index into the<font color="#E5E5E5"> the</font>

317
00:27:38,799 --> 00:27:54,039
address list and<font color="#E5E5E5"> at</font><font color="#CCCCCC"> F</font><font color="#E5E5E5"> say hey another</font>

318
00:27:44,940 --> 00:27:54,549
signature and a a name and well that's

319
00:27:54,039 --> 00:27:59,408
<font color="#E5E5E5">it</font>

320
00:27:54,549 --> 00:28:03,969
and for the other<font color="#CCCCCC"> compile unit</font><font color="#E5E5E5"> it's the</font>

321
00:27:59,409 --> 00:28:08,769
same well different ideas different<font color="#CCCCCC"> DWR</font>

322
00:28:03,969 --> 00:28:10,539
files<font color="#CCCCCC"> and this is really nice</font>

323
00:28:08,769 --> 00:28:16,509
except if you want to look at the debug

324
00:28:10,539 --> 00:28:19,450
info because now the the linker doesn't

325
00:28:16,509 --> 00:28:27,159
have to deal with<font color="#E5E5E5"> most of the</font><font color="#CCCCCC"> dwarfs</font>

326
00:28:19,450 --> 00:28:38,320
data<font color="#E5E5E5"> so for for</font><font color="#CCCCCC"> l few tools</font><font color="#E5E5E5"> we Delphi I</font>

327
00:28:27,159 --> 00:28:44,019
implemented<font color="#CCCCCC"> info Plus which picks the</font>

328
00:28:38,320 --> 00:28:44,710
the after the skeleton it shows it's too

329
00:28:44,019 --> 00:28:45,580
technical

330
00:28:44,710 --> 00:28:48,010
I<font color="#E5E5E5"> thought I'd</font>

331
00:28:45,580 --> 00:28:55,389
that's<font color="#CCCCCC"> in should actually show from</font>

332
00:28:48,010 --> 00:29:03,190
which how it<font color="#E5E5E5"> cut now it doesn't and you</font>

333
00:28:55,390 --> 00:29:13,770
<font color="#E5E5E5">you see in the dwrl</font><font color="#CCCCCC"> it it it it</font><font color="#E5E5E5"> uses</font>

334
00:29:03,190 --> 00:29:13,770
<font color="#CCCCCC">indirect string references and let's see</font>

335
00:29:15,630 --> 00:29:25,920
what okay well in that<font color="#E5E5E5"> can</font><font color="#CCCCCC"> hmm</font>

336
00:29:21,070 --> 00:29:32,560
this wasn't<font color="#E5E5E5"> supposed to happen this</font>

337
00:29:25,920 --> 00:29:39,490
<font color="#CCCCCC">address comes from from matching</font><font color="#E5E5E5"> up with</font>

338
00:29:32,560 --> 00:29:43,540
the the the<font color="#CCCCCC"> skeleton seeing where the</font>

339
00:29:39,490 --> 00:29:49,590
<font color="#CCCCCC">divot</font><font color="#E5E5E5"> errors is and then using an index</font>

340
00:29:43,540 --> 00:29:49,590
<font color="#E5E5E5">into that which doesn't work why not</font>

341
00:29:53,830 --> 00:30:02,710
it does it every time too bad<font color="#E5E5E5"> sorry at</font>

342
00:29:59,740 --> 00:30:07,480
least<font color="#CCCCCC"> it's consistent yeah</font><font color="#E5E5E5"> so and it is</font>

343
00:30:02,710 --> 00:30:11,170
also<font color="#E5E5E5"> a small difference with</font><font color="#CCCCCC"> one five</font>

344
00:30:07,480 --> 00:30:18,490
year it it still says it use<font color="#E5E5E5"> the section</font>

345
00:30:11,170 --> 00:30:22,990
<font color="#E5E5E5">of that it doesn't</font><font color="#CCCCCC"> really it should use</font>

346
00:30:18,490 --> 00:30:30,360
a<font color="#E5E5E5"> different</font><font color="#CCCCCC"> form in into</font><font color="#E5E5E5"> r5 but the idea</font>

347
00:30:22,990 --> 00:30:35,920
<font color="#CCCCCC">is it uses</font><font color="#E5E5E5"> the section offset from this</font>

348
00:30:30,360 --> 00:30:41,679
<font color="#CCCCCC">dwl file ten minutes okay</font>

349
00:30:35,920 --> 00:30:44,020
oh man that's<font color="#CCCCCC"> yet so the same for for</font>

350
00:30:41,680 --> 00:30:50,820
the other skeleton and you look up

351
00:30:44,020 --> 00:30:50,820
<font color="#E5E5E5">almost most of the the info in the DW of</font>

352
00:30:51,780 --> 00:31:01,970
there so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> nice for your</font>

353
00:30:57,490 --> 00:31:07,040
that<font color="#E5E5E5"> compile debug cycle because your</font>

354
00:31:01,970 --> 00:31:10,490
linker<font color="#E5E5E5"> the compiler has to put the debug</font>

355
00:31:07,040 --> 00:31:13,420
info site for most of it<font color="#E5E5E5"> but the linker</font>

356
00:31:10,490 --> 00:31:19,490
doesn't need to to see it that need to

357
00:31:13,420 --> 00:31:24,260
copy<font color="#E5E5E5"> it</font><font color="#CCCCCC"> we do have lots</font><font color="#E5E5E5"> of duplications</font>

358
00:31:19,490 --> 00:31:27,410
again even<font color="#CCCCCC"> for the strings now</font><font color="#E5E5E5"> but those</font>

359
00:31:24,260 --> 00:31:32,330
were already<font color="#E5E5E5"> original into the</font><font color="#CCCCCC"> other</font>

360
00:31:27,410 --> 00:31:36,730
files<font color="#E5E5E5"> so</font><font color="#CCCCCC"> 12 consumers need to be a bit</font>

361
00:31:32,330 --> 00:31:40,030
smarter<font color="#CCCCCC"> they have to do some</font><font color="#E5E5E5"> of the</font>

362
00:31:36,730 --> 00:31:45,070
<font color="#E5E5E5">deduplication that the linker would do</font>

363
00:31:40,030 --> 00:31:48,860
<font color="#E5E5E5">it's awful for</font><font color="#CCCCCC"> this solution</font><font color="#E5E5E5"> because</font>

364
00:31:45,070 --> 00:31:51,500
some programs are links of thousands of

365
00:31:48,860 --> 00:31:58,310
our files and you really<font color="#E5E5E5"> don't want</font><font color="#CCCCCC"> to</font>

366
00:31:51,500 --> 00:32:01,610
ship thousands of<font color="#CCCCCC"> DWR of us I am also</font>

367
00:31:58,310 --> 00:32:05,720
not<font color="#CCCCCC"> sure people</font><font color="#E5E5E5"> have used this in anger</font>

368
00:32:01,610 --> 00:32:10,510
yet really<font color="#E5E5E5"> with thousands of</font><font color="#CCCCCC"> the wfl's</font>

369
00:32:05,720 --> 00:32:17,840
because<font color="#E5E5E5"> for few tools</font><font color="#CCCCCC"> I try</font><font color="#E5E5E5"> to be smart</font>

370
00:32:10,510 --> 00:32:20,450
<font color="#CCCCCC">and it's all very lazy so we just open</font>

371
00:32:17,840 --> 00:32:25,090
the<font color="#CCCCCC"> dwrl file so now you read them when</font>

372
00:32:20,450 --> 00:32:30,070
we need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> and after a couple thousand</font>

373
00:32:25,090 --> 00:32:36,470
<font color="#E5E5E5">you don't get more</font><font color="#CCCCCC"> fun descriptors oh</font>

374
00:32:30,070 --> 00:32:49,370
that's not nice I assume gdb does

375
00:32:36,470 --> 00:32:52,420
something<font color="#E5E5E5"> smarter</font><font color="#CCCCCC"> so because that</font><font color="#E5E5E5"> is the</font>

376
00:32:49,370 --> 00:32:57,790
kind<font color="#E5E5E5"> of concern if you're not in your</font>

377
00:32:52,420 --> 00:33:02,860
edit debug cycle being<font color="#CCCCCC"> yuto's comes with</font>

378
00:32:57,790 --> 00:33:07,770
the dwarf<font color="#E5E5E5"> tickets</font><font color="#CCCCCC"> Wow picture that</font>

379
00:33:02,860 --> 00:33:09,070
<font color="#CCCCCC">twelve big picture I don't know</font>

380
00:33:07,770 --> 00:33:13,480
[Applause]

381
00:33:09,070 --> 00:33:18,629
and it<font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> does</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> you expect to</font>

382
00:33:13,480 --> 00:33:22,330
do it it reads the<font color="#CCCCCC"> dwarfs data it sees</font>

383
00:33:18,630 --> 00:33:27,220
all<font color="#CCCCCC"> the references to the dwl files and</font>

384
00:33:22,330 --> 00:33:30,429
adds them together<font color="#E5E5E5"> it acts as a kind of</font>

385
00:33:27,220 --> 00:33:32,860
mini linker because<font color="#E5E5E5"> strange</font><font color="#CCCCCC"> actions</font><font color="#E5E5E5"> make</font>

386
00:33:30,430 --> 00:33:38,260
up so<font color="#CCCCCC"> much</font><font color="#E5E5E5"> that you really do want to</font>

387
00:33:32,860 --> 00:33:41,320
merge<font color="#CCCCCC"> although all the strings</font><font color="#E5E5E5"> but it's</font>

388
00:33:38,260 --> 00:33:47,290
nice<font color="#CCCCCC"> because you only have to update the</font>

389
00:33:41,320 --> 00:33:51,970
<font color="#CCCCCC">offset table and because you concatenate</font>

390
00:33:47,290 --> 00:33:58,260
<font color="#CCCCCC">the data sections</font><font color="#E5E5E5"> luckily you</font><font color="#CCCCCC"> only have</font>

391
00:33:51,970 --> 00:34:05,860
that one<font color="#CCCCCC"> relocation against it</font>

392
00:33:58,260 --> 00:34:13,210
what it<font color="#CCCCCC"> does is it it creates a index</font>

393
00:34:05,860 --> 00:34:16,569
section<font color="#E5E5E5"> therefore every</font><font color="#CCCCCC"> DWO it says</font><font color="#E5E5E5"> for</font>

394
00:34:13,210 --> 00:34:19,990
the info part and<font color="#CCCCCC"> ever Parton</font><font color="#E5E5E5"> well all</font>

395
00:34:16,570 --> 00:34:23,440
the debug sections where it starts and

396
00:34:19,989 --> 00:34:27,609
<font color="#E5E5E5">ends and in principle that's all you</font>

397
00:34:23,440 --> 00:34:38,200
<font color="#E5E5E5">need because you have all those indexes</font>

398
00:34:27,610 --> 00:34:45,030
that<font color="#CCCCCC"> you now know start at</font><font color="#E5E5E5"> zero or</font><font color="#CCCCCC"> dead</font>

399
00:34:38,199 --> 00:34:46,710
offset in the concatenated<font color="#CCCCCC"> twelve stuff</font>

400
00:34:45,030 --> 00:34:49,710
[Music]

401
00:34:46,710 --> 00:34:49,710
so

402
00:34:51,310 --> 00:35:05,779
of course<font color="#E5E5E5"> the next kind of logical step</font>

403
00:34:55,580 --> 00:35:09,170
is we're getting<font color="#E5E5E5"> to a point where the</font>

404
00:35:05,780 --> 00:35:14,110
tools<font color="#E5E5E5"> aren't simple anymore so why not</font>

405
00:35:09,170 --> 00:35:17,480
<font color="#E5E5E5">write a tool that understands dwarf</font><font color="#CCCCCC"> and</font>

406
00:35:14,110 --> 00:35:24,140
does a lot<font color="#CCCCCC"> more and that's basically</font>

407
00:35:17,480 --> 00:35:30,280
what<font color="#E5E5E5"> DW said does it the nice thing</font>

408
00:35:24,140 --> 00:35:31,790
about if you know about<font color="#E5E5E5"> dwarf and you</font>

409
00:35:30,280 --> 00:35:35,030
don't mind

410
00:35:31,790 --> 00:35:39,440
one extra<font color="#E5E5E5"> extension which is</font><font color="#CCCCCC"> actually</font>

411
00:35:35,030 --> 00:35:45,860
also<font color="#E5E5E5"> into</font><font color="#CCCCCC"> r5 now</font><font color="#E5E5E5"> is that you can</font>

412
00:35:39,440 --> 00:35:50,960
<font color="#E5E5E5">deduplicate between the work files you</font>

413
00:35:45,860 --> 00:35:53,360
need new<font color="#E5E5E5"> forms again to to follow string</font>

414
00:35:50,960 --> 00:35:57,110
pointers or references but now you can

415
00:35:53,360 --> 00:35:58,670
say oh<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> for all those debug files</font>

416
00:35:57,110 --> 00:36:05,500
just<font color="#E5E5E5"> look there</font>

417
00:35:58,670 --> 00:36:13,330
I've made<font color="#CCCCCC"> one large string section or</font>

418
00:36:05,500 --> 00:36:17,330
info section<font color="#CCCCCC"> pipes</font><font color="#E5E5E5"> so five</font><font color="#CCCCCC"> minutes I</font>

419
00:36:13,330 --> 00:36:24,610
wanted<font color="#CCCCCC"> to go in more detail but the</font>

420
00:36:17,330 --> 00:36:31,090
number<font color="#CCCCCC"> of references between the various</font>

421
00:36:24,610 --> 00:36:34,430
dwarf<font color="#CCCCCC"> data sections is kind of daunting</font>

422
00:36:31,090 --> 00:36:38,570
especially if you then combine<font color="#CCCCCC"> it with</font>

423
00:36:34,430 --> 00:36:42,049
split<font color="#CCCCCC"> worth and I thought it was kind of</font>

424
00:36:38,570 --> 00:36:45,110
funny<font color="#CCCCCC"> about these come from the the</font>

425
00:36:42,050 --> 00:36:48,440
dwarf spec that<font color="#CCCCCC"> they didn't</font><font color="#E5E5E5"> even try</font><font color="#CCCCCC"> to</font>

426
00:36:45,110 --> 00:36:50,470
have split dwarf<font color="#CCCCCC"> plus supplemental files</font>

427
00:36:48,440 --> 00:36:53,380
<font color="#E5E5E5">because</font>

428
00:36:50,470 --> 00:36:59,140
I thought I don't<font color="#E5E5E5"> think anybody does</font>

429
00:36:53,380 --> 00:37:04,170
that<font color="#CCCCCC"> yet</font><font color="#E5E5E5"> but it is all specified as you</font>

430
00:36:59,140 --> 00:37:07,089
<font color="#CCCCCC">should be able to have split types a</font>

431
00:37:04,170 --> 00:37:16,359
split wire and supplemental files

432
00:37:07,089 --> 00:37:20,040
together<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right yeah</font><font color="#E5E5E5"> so I just</font><font color="#CCCCCC"> showed</font>

433
00:37:16,359 --> 00:37:24,940
<font color="#CCCCCC">that there are still blacks</font><font color="#E5E5E5"> but I</font>

434
00:37:20,040 --> 00:37:29,290
implemented<font color="#E5E5E5"> most of this at least the</font>

435
00:37:24,940 --> 00:37:34,170
new extensions<font color="#E5E5E5"> with an eye on how they</font>

436
00:37:29,290 --> 00:37:42,640
are<font color="#E5E5E5"> also done done slightly differently</font>

437
00:37:34,170 --> 00:37:45,900
in<font color="#CCCCCC"> into r5</font><font color="#E5E5E5"> so if you are writing a 12</font>

438
00:37:42,640 --> 00:37:53,910
<font color="#E5E5E5">consumer right maybe you want to try</font><font color="#CCCCCC"> out</font>

439
00:37:45,900 --> 00:37:53,910
<font color="#CCCCCC">lip TW and</font><font color="#E5E5E5"> write documentation for</font><font color="#CCCCCC"> it</font>

440
00:37:56,400 --> 00:38:03,099
<font color="#CCCCCC">it's really</font><font color="#E5E5E5"> nice library</font><font color="#CCCCCC"> and every time</font>

441
00:38:00,310 --> 00:38:04,420
I say could<font color="#E5E5E5"> you do you want to use it</font>

442
00:38:03,099 --> 00:38:11,800
people<font color="#E5E5E5"> say okay where's the</font>

443
00:38:04,420 --> 00:38:15,970
documentation<font color="#CCCCCC"> ya know but it's it's a</font>

444
00:38:11,800 --> 00:38:20,700
nice library<font color="#CCCCCC"> I'm kind of proud that we</font>

445
00:38:15,970 --> 00:38:24,939
keep a<font color="#CCCCCC"> B</font><font color="#E5E5E5"> ABI compatibility even while we</font>

446
00:38:20,700 --> 00:38:29,740
support newer versions of<font color="#E5E5E5"> dwarf of</font>

447
00:38:24,940 --> 00:38:34,030
course the value<font color="#E5E5E5"> is kind of you often</font>

448
00:38:29,740 --> 00:38:37,209
need to<font color="#CCCCCC"> use new functions to really get</font>

449
00:38:34,030 --> 00:38:41,800
at some stuff<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example with</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> split</font>

450
00:38:37,210 --> 00:38:45,400
dwarf<font color="#E5E5E5"> everything works except that both</font>

451
00:38:41,800 --> 00:38:52,859
programs not using the newer functions

452
00:38:45,400 --> 00:38:52,859
only see the skeletons it's it's nice

453
00:38:52,980 --> 00:39:28,260
yes<font color="#E5E5E5"> did I do it okay yeah</font><font color="#CCCCCC"> yes does need</font>

454
00:39:25,380 --> 00:39:33,540
to<font color="#E5E5E5"> and it's actually another extension</font>

455
00:39:28,260 --> 00:39:37,940
<font color="#E5E5E5">but that's an</font><font color="#CCCCCC"> extension to elf the L</font>

456
00:39:33,540 --> 00:39:41,640
file format where<font color="#E5E5E5"> the compiler</font>

457
00:39:37,940 --> 00:39:44,940
compresses all the the dwarf Dayton and

458
00:39:41,640 --> 00:39:48,390
the<font color="#E5E5E5"> linker</font><font color="#CCCCCC"> expense concatenates and</font>

459
00:39:44,940 --> 00:40:04,589
compresses<font color="#CCCCCC"> it again there are</font><font color="#E5E5E5"> people</font>

460
00:39:48,390 --> 00:40:07,859
will say that's useful you can also do

461
00:40:04,589 --> 00:40:11,040
that yes and you you can also use a few

462
00:40:07,859 --> 00:40:17,869
<font color="#CCCCCC">tails</font><font color="#E5E5E5"> a few tails compress which</font>

463
00:40:11,040 --> 00:40:17,869
actually does<font color="#CCCCCC"> that for you look</font>

464
00:40:19,640 --> 00:40:30,000
it's nothing stops our elf confess<font color="#CCCCCC"> sorry</font>

465
00:40:24,270 --> 00:40:40,829
<font color="#CCCCCC">I</font><font color="#E5E5E5"> don't even know my own tools sorry</font>

466
00:40:30,000 --> 00:40:43,760
yeah stupid small screen<font color="#CCCCCC"> so by</font><font color="#E5E5E5"> default</font>

467
00:40:40,829 --> 00:41:23,880
it compresses all the data sections

468
00:40:43,760 --> 00:41:28,790
<font color="#E5E5E5">that's what you want</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the debug</font>

469
00:41:23,880 --> 00:41:28,790
<font color="#CCCCCC">circle</font><font color="#E5E5E5"> I would recommend</font><font color="#CCCCCC"> splittorf</font><font color="#E5E5E5"> but</font>

470
00:41:30,799 --> 00:41:41,609
<font color="#E5E5E5">gdb supported and articles now support</font>

471
00:41:35,549 --> 00:41:43,619
it and certainly tools using<font color="#E5E5E5"> their</font>

472
00:41:41,609 --> 00:41:47,339
<font color="#CCCCCC">photos libraries need to be updated to</font>

473
00:41:43,619 --> 00:41:55,589
<font color="#CCCCCC">support</font><font color="#E5E5E5"> it but it's really</font><font color="#CCCCCC"> easy super</font>

474
00:41:47,339 --> 00:41:57,509
easy<font color="#E5E5E5"> API so gdb I would but I'm not</font>

475
00:41:55,589 --> 00:42:01,819
completely sure people have used it in

476
00:41:57,510 --> 00:42:05,040
anger and there are some questions<font color="#CCCCCC"> okay</font>

477
00:42:01,819 --> 00:42:07,170
<font color="#E5E5E5">in instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the linker spending a lot</font>

478
00:42:05,040 --> 00:42:10,970
of time<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know FTD be opening a</font>

479
00:42:07,170 --> 00:42:10,970
thousand files but

480
00:42:14,050 --> 00:42:17,820
out of time<font color="#CCCCCC"> okay</font>

481
00:42:18,100 --> 00:42:26,900
[Applause]

