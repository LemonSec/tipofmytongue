1
00:00:04,900 --> 00:00:12,420
hello<font color="#CCCCCC"> its talk of</font><font color="#E5E5E5"> search grilled he's</font>

2
00:00:10,090 --> 00:00:15,219
<font color="#CCCCCC">developing on Python</font><font color="#E5E5E5"> and the talk is</font>

3
00:00:12,420 --> 00:00:18,790
surviving in an<font color="#CCCCCC"> open-source niche the</font>

4
00:00:15,219 --> 00:00:22,149
patron case<font color="#CCCCCC"> thanks</font>

5
00:00:18,790 --> 00:00:26,520
so we are back<font color="#E5E5E5"> to a more intimate area</font>

6
00:00:22,149 --> 00:00:29,800
<font color="#E5E5E5">human-scale not like the one before so</font>

7
00:00:26,520 --> 00:00:32,519
I'm going<font color="#CCCCCC"> to spend</font><font color="#E5E5E5"> the next 50 minutes</font>

8
00:00:29,800 --> 00:00:35,890
<font color="#E5E5E5">speaking about a project I developed</font>

9
00:00:32,520 --> 00:00:39,039
<font color="#CCCCCC">it's nothing as a scale of</font><font color="#E5E5E5"> Python 3 or</font>

10
00:00:35,890 --> 00:00:40,629
<font color="#CCCCCC">whatever there may be less users of this</font>

11
00:00:39,039 --> 00:00:42,280
<font color="#CCCCCC">project</font><font color="#E5E5E5"> and the number of people in this</font>

12
00:00:40,629 --> 00:00:45,940
<font color="#E5E5E5">room but</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> that may change in the</font>

13
00:00:42,280 --> 00:00:48,339
future<font color="#E5E5E5"> and anyway I think that the idea</font>

14
00:00:45,940 --> 00:00:52,989
<font color="#CCCCCC">I</font><font color="#E5E5E5"> want to share</font><font color="#CCCCCC"> our benefical even if</font>

15
00:00:48,339 --> 00:00:55,239
you don't use the<font color="#E5E5E5"> software so a few</font>

16
00:00:52,989 --> 00:00:57,159
words<font color="#E5E5E5"> about me so I'm basically</font><font color="#CCCCCC"> a</font>

17
00:00:55,239 --> 00:00:59,530
<font color="#E5E5E5">research engineer in a security firm</font>

18
00:00:57,159 --> 00:01:02,859
where I do a<font color="#E5E5E5"> computation stuff</font>

19
00:00:59,530 --> 00:01:05,860
I'm also<font color="#E5E5E5"> research associate researcher</font>

20
00:01:02,859 --> 00:01:07,659
in a French<font color="#CCCCCC"> University</font><font color="#E5E5E5"> a developer of</font>

21
00:01:05,860 --> 00:01:12,700
<font color="#CCCCCC">the project I'm going to present to you</font>

22
00:01:07,659 --> 00:01:15,250
<font color="#E5E5E5">an algorithm</font><font color="#CCCCCC"> commuter so what is patron</font>

23
00:01:12,700 --> 00:01:17,350
patron is a compiler<font color="#E5E5E5"> a static compiler</font>

24
00:01:15,250 --> 00:01:20,290
<font color="#E5E5E5">no just-in-time compilation basic</font>

25
00:01:17,350 --> 00:01:24,520
compiler just like you would use GCC for

26
00:01:20,290 --> 00:01:27,190
<font color="#E5E5E5">C or C++</font><font color="#CCCCCC"> you can use</font><font color="#E5E5E5"> Python for Python</font>

27
00:01:24,520 --> 00:01:30,369
code but not<font color="#CCCCCC"> for any Python</font><font color="#E5E5E5"> code it's</font>

28
00:01:27,190 --> 00:01:33,580
for scientific kernels<font color="#CCCCCC"> okay so only</font><font color="#E5E5E5"> for</font>

29
00:01:30,370 --> 00:01:36,700
the<font color="#E5E5E5"> scientific world and the input is</font>

30
00:01:33,580 --> 00:01:38,679
not playing -<font color="#E5E5E5"> well it is but it's a</font>

31
00:01:36,700 --> 00:01:42,700
<font color="#E5E5E5">subset a strict subset so there is no</font>

32
00:01:38,680 --> 00:01:45,370
extension<font color="#E5E5E5"> or whatever every</font><font color="#CCCCCC"> code that</font>

33
00:01:42,700 --> 00:01:49,210
<font color="#E5E5E5">complies with Python is also valid valid</font>

34
00:01:45,370 --> 00:01:51,610
Python code but<font color="#E5E5E5"> not in the other way so</font>

35
00:01:49,210 --> 00:01:54,759
<font color="#E5E5E5">basically you write your scientific</font>

36
00:01:51,610 --> 00:01:56,170
kernels<font color="#E5E5E5"> you</font><font color="#CCCCCC"> had a few comments</font><font color="#E5E5E5"> who has</font>

37
00:01:54,760 --> 00:01:58,300
<font color="#E5E5E5">your</font><font color="#CCCCCC"> comment they</font><font color="#E5E5E5"> can be ignored or</font>

38
00:01:56,170 --> 00:02:00,670
whatever and the Python code still runs

39
00:01:58,300 --> 00:02:03,190
but<font color="#CCCCCC"> the Python compiler understands</font>

40
00:02:00,670 --> 00:02:06,580
these<font color="#E5E5E5"> commands and use them to</font><font color="#CCCCCC"> generate</font>

41
00:02:03,190 --> 00:02:08,709
<font color="#E5E5E5">native code the comments are not meant</font>

42
00:02:06,580 --> 00:02:10,478
to be intrusive<font color="#E5E5E5"> there is only a few</font>

43
00:02:08,709 --> 00:02:12,400
comments<font color="#E5E5E5"> for a function declaration</font>

44
00:02:10,479 --> 00:02:14,920
<font color="#E5E5E5">nothing at the variable declaration</font>

45
00:02:12,400 --> 00:02:17,350
level or no extension or whatever just

46
00:02:14,920 --> 00:02:20,410
state which function you<font color="#E5E5E5"> want to export</font>

47
00:02:17,350 --> 00:02:22,799
and it will be consists muddle will be

48
00:02:20,410 --> 00:02:25,240
<font color="#CCCCCC">combined compiled as a native model and</font>

49
00:02:22,800 --> 00:02:27,010
only this function will<font color="#E5E5E5"> be available in</font>

50
00:02:25,240 --> 00:02:30,670
<font color="#E5E5E5">this model for this particular signature</font>

51
00:02:27,010 --> 00:02:33,670
<font color="#E5E5E5">so here I have a Rosen Brock function I</font>

52
00:02:30,670 --> 00:02:36,480
do not<font color="#E5E5E5"> know what is it</font><font color="#CCCCCC"> but I can write</font>

53
00:02:33,670 --> 00:02:39,579
<font color="#E5E5E5">it in your file and I</font><font color="#CCCCCC"> can export it</font>

54
00:02:36,480 --> 00:02:42,760
<font color="#E5E5E5">stating that it accepts</font><font color="#CCCCCC"> an array of</font>

55
00:02:39,580 --> 00:02:49,420
<font color="#E5E5E5">integer or an array of</font><font color="#CCCCCC"> double precision</font>

56
00:02:42,760 --> 00:02:51,880
floating<font color="#CCCCCC"> points so why is it</font><font color="#E5E5E5"> an ish it's</font>

57
00:02:49,420 --> 00:02:56,799
an edge because<font color="#E5E5E5"> scientific computing is</font>

58
00:02:51,880 --> 00:03:00,070
an ish<font color="#E5E5E5"> well there is quite big community</font>

59
00:02:56,800 --> 00:03:02,860
<font color="#E5E5E5">in scientific computing</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> Python</font><font color="#CCCCCC"> main</font>

60
00:03:00,070 --> 00:03:06,430
<font color="#E5E5E5">mostly due</font><font color="#CCCCCC"> to the Nimbus I</font><font color="#E5E5E5"> by Jupiter</font>

61
00:03:02,860 --> 00:03:09,490
<font color="#CCCCCC">and matplotlib stack</font><font color="#E5E5E5"> and when the</font><font color="#CCCCCC"> Python</font>

62
00:03:06,430 --> 00:03:12,160
performance are<font color="#E5E5E5"> not enough there is also</font>

63
00:03:09,490 --> 00:03:14,590
a wide range of choice<font color="#E5E5E5"> to</font><font color="#CCCCCC"> optimize your</font>

64
00:03:12,160 --> 00:03:17,380
code<font color="#E5E5E5"> ranging some from siphons that will</font>

65
00:03:14,590 --> 00:03:21,550
be presented<font color="#CCCCCC"> in the next talk to numerix</font>

66
00:03:17,380 --> 00:03:24,160
<font color="#CCCCCC">pro name bar and a few others</font><font color="#E5E5E5"> and there</font>

67
00:03:21,550 --> 00:03:26,890
is also a lot of<font color="#E5E5E5"> things</font><font color="#CCCCCC"> happening all</font>

68
00:03:24,160 --> 00:03:29,490
that have that<font color="#E5E5E5"> are trying to happen in</font>

69
00:03:26,890 --> 00:03:31,959
the<font color="#E5E5E5"> world of computation and</font><font color="#CCCCCC"> python</font>

70
00:03:29,490 --> 00:03:35,230
there are some very<font color="#E5E5E5"> long</font><font color="#CCCCCC"> term project</font>

71
00:03:31,960 --> 00:03:38,200
like pi<font color="#CCCCCC"> pi</font><font color="#E5E5E5"> siphon or</font><font color="#CCCCCC"> gphin and some</font>

72
00:03:35,230 --> 00:03:39,850
<font color="#E5E5E5">recent projects like Numa or hope and a</font>

73
00:03:38,200 --> 00:03:43,500
lot of that<font color="#E5E5E5"> project which is an int</font>

74
00:03:39,850 --> 00:03:46,390
about the difficulty<font color="#E5E5E5"> of the task</font>

75
00:03:43,500 --> 00:03:49,650
<font color="#CCCCCC">Copperhead</font><font color="#E5E5E5"> for to generate GPU code by</font>

76
00:03:46,390 --> 00:03:52,000
piston<font color="#E5E5E5"> from Dropbox</font><font color="#CCCCCC"> in Athens rule</font>

77
00:03:49,650 --> 00:03:55,000
<font color="#E5E5E5">parakeets and all those project are now</font>

78
00:03:52,000 --> 00:04:00,040
dead but<font color="#E5E5E5"> they tried some ideas to</font>

79
00:03:55,000 --> 00:04:02,200
compile<font color="#E5E5E5"> some kind of Python code the</font>

80
00:04:00,040 --> 00:04:04,900
ideas<font color="#E5E5E5"> in the air when you want to</font>

81
00:04:02,200 --> 00:04:07,390
compile Python codes<font color="#E5E5E5"> say okay well it's</font>

82
00:04:04,900 --> 00:04:09,790
easy I just<font color="#CCCCCC"> add types to every function</font>

83
00:04:07,390 --> 00:04:12,760
declaration so I don't have any lazy

84
00:04:09,790 --> 00:04:14,470
binding or dynamic dispatch everything

85
00:04:12,760 --> 00:04:17,769
will be static<font color="#E5E5E5"> and then I translate</font><font color="#CCCCCC"> that</font>

86
00:04:14,470 --> 00:04:19,779
<font color="#CCCCCC">to C C++</font><font color="#E5E5E5"> choose your poison it doesn't</font>

87
00:04:17,769 --> 00:04:23,409
matter as long as<font color="#E5E5E5"> it's statically</font>

88
00:04:19,779 --> 00:04:25,210
compiled language and I make a lot<font color="#CCCCCC"> of</font>

89
00:04:23,410 --> 00:04:26,350
assumption about the<font color="#CCCCCC"> imported</font><font color="#E5E5E5"> model I</font>

90
00:04:25,210 --> 00:04:28,729
<font color="#E5E5E5">don't care about Oh</font>

91
00:04:26,350 --> 00:04:31,069
- actually<font color="#E5E5E5"> imports model I</font>

92
00:04:28,729 --> 00:04:35,779
use import just<font color="#E5E5E5"> like I would use it just</font>

93
00:04:31,069 --> 00:04:38,270
<font color="#E5E5E5">included or thing like</font><font color="#CCCCCC"> that and I stick</font>

94
00:04:35,779 --> 00:04:41,749
<font color="#E5E5E5">to</font><font color="#CCCCCC"> a subset</font><font color="#E5E5E5"> of the language which is</font>

95
00:04:38,270 --> 00:04:46,430
easy<font color="#E5E5E5"> to compile and it's relatively</font><font color="#CCCCCC"> easy</font>

96
00:04:41,749 --> 00:04:48,650
<font color="#E5E5E5">to make</font><font color="#CCCCCC"> that work but you</font><font color="#E5E5E5"> can also do</font>

97
00:04:46,430 --> 00:04:50,300
some more advanced stuff<font color="#E5E5E5"> so that's just</font>

98
00:04:48,650 --> 00:04:52,638
translation translation is not

99
00:04:50,300 --> 00:04:55,580
compilation translation is what<font color="#CCCCCC"> cat does</font>

100
00:04:52,639 --> 00:04:59,689
or said this<font color="#E5E5E5"> compilation transforms the</font>

101
00:04:55,580 --> 00:05:02,779
code so<font color="#CCCCCC"> you can take all the</font><font color="#E5E5E5"> compiler</font>

102
00:04:59,689 --> 00:05:05,330
knowledge that exists since the 50s<font color="#CCCCCC"> and</font>

103
00:05:02,779 --> 00:05:06,919
put it into compiling Python<font color="#E5E5E5"> there are</font>

104
00:05:05,330 --> 00:05:09,800
some specificities in the language that

105
00:05:06,919 --> 00:05:11,508
<font color="#E5E5E5">make it's an interesting</font><font color="#CCCCCC"> target you can</font>

106
00:05:09,800 --> 00:05:13,580
use just-in-time compilation instead of

107
00:05:11,509 --> 00:05:15,979
ahead<font color="#E5E5E5"> of time</font><font color="#CCCCCC"> computation and</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font>

108
00:05:13,580 --> 00:05:18,050
try to support<font color="#E5E5E5"> a larger subsets of the</font>

109
00:05:15,979 --> 00:05:22,248
language support generator or support

110
00:05:18,050 --> 00:05:25,759
class metaclass or what you want<font color="#E5E5E5"> and if</font>

111
00:05:22,249 --> 00:05:28,159
you're already<font color="#CCCCCC"> very bold</font><font color="#E5E5E5"> you can try to</font>

112
00:05:25,759 --> 00:05:32,389
be ready to be compatible with whatever

113
00:05:28,159 --> 00:05:34,819
Python code exists only by code but any

114
00:05:32,389 --> 00:05:37,039
<font color="#CCCCCC">bytecode that</font><font color="#E5E5E5"> includes supporting the</font>

115
00:05:34,819 --> 00:05:39,110
import mechanism lazy binding on this

116
00:05:37,039 --> 00:05:42,649
kind<font color="#E5E5E5"> of stuff that's what</font><font color="#CCCCCC"> pi PI is</font><font color="#E5E5E5"> doing</font>

117
00:05:39,110 --> 00:05:44,389
and you can also<font color="#E5E5E5"> try to be</font><font color="#CCCCCC"> compatible or</font>

118
00:05:42,649 --> 00:05:48,319
to optimize native extensions and

119
00:05:44,389 --> 00:05:50,659
optimizing native extension is the big

120
00:05:48,319 --> 00:05:52,669
deal<font color="#CCCCCC"> it's very important especially in</font>

121
00:05:50,659 --> 00:05:54,589
the scientific world<font color="#E5E5E5"> because people</font><font color="#CCCCCC"> tend</font>

122
00:05:52,669 --> 00:05:56,688
<font color="#E5E5E5">to use Python as a glue and to write</font>

123
00:05:54,589 --> 00:05:59,770
<font color="#CCCCCC">kernels in native code</font><font color="#E5E5E5"> and then they</font>

124
00:05:56,689 --> 00:06:03,439
want<font color="#E5E5E5"> to optimize cross native codes</font>

125
00:05:59,770 --> 00:06:06,469
patron is somewhere in the advanced area

126
00:06:03,439 --> 00:06:08,629
it's<font color="#CCCCCC"> definitely not in the expert area</font>

127
00:06:06,469 --> 00:06:10,839
and most<font color="#E5E5E5"> of the basic stuff has been</font>

128
00:06:08,629 --> 00:06:10,839
<font color="#E5E5E5">done</font>

129
00:06:11,650 --> 00:06:17,320
so it's an open<font color="#E5E5E5"> source software BSD</font>

130
00:06:14,050 --> 00:06:20,229
started six years ago<font color="#CCCCCC"> you can find</font><font color="#E5E5E5"> it on</font>

131
00:06:17,320 --> 00:06:23,710
<font color="#CCCCCC">YP</font><font color="#E5E5E5"> on the cheese shop on</font><font color="#CCCCCC"> Kunda or on get</font>

132
00:06:20,229 --> 00:06:26,830
<font color="#CCCCCC">up depending on your way you want to use</font>

133
00:06:23,710 --> 00:06:29,710
it<font color="#CCCCCC"> there are some Python dependencies</font>

134
00:06:26,830 --> 00:06:32,650
<font color="#CCCCCC">Network</font><font color="#E5E5E5"> kicks to do some graph compiler</font>

135
00:06:29,710 --> 00:06:36,000
algorithm in<font color="#E5E5E5"> PI for all the scientific</font>

136
00:06:32,650 --> 00:06:38,859
<font color="#E5E5E5">stuff</font><font color="#CCCCCC"> PLI which is Lex yakking Python</font>

137
00:06:36,000 --> 00:06:42,250
<font color="#E5E5E5">for sub language we use in</font><font color="#CCCCCC"> the export</font>

138
00:06:38,860 --> 00:06:47,410
<font color="#E5E5E5">line and ghasts I'm going to speak about</font>

139
00:06:42,250 --> 00:06:49,780
<font color="#E5E5E5">about that it was told us that moving</font>

140
00:06:47,410 --> 00:06:54,699
from<font color="#E5E5E5"> Python who - to Python 3 is matter</font>

141
00:06:49,780 --> 00:06:57,130
of syntax<font color="#CCCCCC"> but when your inputs is -</font>

142
00:06:54,699 --> 00:07:00,010
moving from<font color="#CCCCCC"> Python - to Python 3 means</font>

143
00:06:57,130 --> 00:07:02,110
changing<font color="#E5E5E5"> the inputs of</font><font color="#CCCCCC"> your program like</font>

144
00:07:00,010 --> 00:07:04,210
changing<font color="#CCCCCC"> the SQL schema or</font><font color="#E5E5E5"> things like</font>

145
00:07:02,110 --> 00:07:06,220
<font color="#CCCCCC">that</font><font color="#E5E5E5"> so it was actually a very difficult</font>

146
00:07:04,210 --> 00:07:08,289
<font color="#E5E5E5">thing for us</font><font color="#CCCCCC"> to move</font><font color="#E5E5E5"> from Python to</font>

147
00:07:06,220 --> 00:07:10,810
Python 3 it was not<font color="#E5E5E5"> just adding</font>

148
00:07:08,289 --> 00:07:13,419
parentheses around prints<font color="#E5E5E5"> it was</font>

149
00:07:10,810 --> 00:07:16,169
changing the<font color="#E5E5E5"> inputs and when you meet</font>

150
00:07:13,419 --> 00:07:20,200
the<font color="#CCCCCC"> range</font>

151
00:07:16,169 --> 00:07:24,370
<font color="#CCCCCC">built-in as an input</font><font color="#E5E5E5"> it creates a list</font>

152
00:07:20,200 --> 00:07:26,950
or it creates<font color="#CCCCCC"> a generator so it's</font>

153
00:07:24,370 --> 00:07:28,539
different<font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> so anyway you need to</font>

154
00:07:26,950 --> 00:07:31,960
compile them differently<font color="#E5E5E5"> because that</font>

155
00:07:28,539 --> 00:07:33,909
was a<font color="#CCCCCC"> difficult step and we introduced a</font>

156
00:07:31,960 --> 00:07:38,310
thin layer to<font color="#CCCCCC"> abstract</font>

157
00:07:33,910 --> 00:07:41,349
- HT in that<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> generica</font><font color="#E5E5E5"> HT and</font>

158
00:07:38,310 --> 00:07:44,250
you also need and that used to<font color="#E5E5E5"> be a very</font>

159
00:07:41,349 --> 00:07:50,440
difficult<font color="#E5E5E5"> step we need a C++ companions</font>

160
00:07:44,250 --> 00:07:52,389
C++ 11 compiler and back in the day<font color="#E5E5E5"> it</font>

161
00:07:50,440 --> 00:07:57,190
was<font color="#CCCCCC"> not the case it's</font><font color="#E5E5E5"> actually still</font>

162
00:07:52,389 --> 00:08:01,150
difficult<font color="#E5E5E5"> to find compilers that endures</font>

163
00:07:57,190 --> 00:08:04,090
every C++<font color="#CCCCCC"> 11 constructs even on</font><font color="#E5E5E5"> Linux</font>

164
00:08:01,150 --> 00:08:07,820
with<font color="#E5E5E5"> Kenya or GCC</font><font color="#CCCCCC"> there are still some</font>

165
00:08:04,090 --> 00:08:10,070
<font color="#CCCCCC">stuffs that</font><font color="#E5E5E5"> are not well handled I</font>

166
00:08:07,820 --> 00:08:12,500
when you start to switch to Windows then

167
00:08:10,070 --> 00:08:15,710
things start to<font color="#E5E5E5"> be very difficult to</font>

168
00:08:12,500 --> 00:08:18,350
<font color="#CCCCCC">support but it's getting better</font><font color="#E5E5E5"> because</font>

169
00:08:15,710 --> 00:08:22,340
<font color="#E5E5E5">you've been to now shapes decent version</font>

170
00:08:18,350 --> 00:08:25,400
of GB of<font color="#E5E5E5"> GCC so most</font><font color="#CCCCCC"> people have a</font>

171
00:08:22,340 --> 00:08:29,270
decent compiler and well that's no

172
00:08:25,400 --> 00:08:33,110
longer<font color="#E5E5E5"> a source of issues and data the</font>

173
00:08:29,270 --> 00:08:37,309
community is quite<font color="#E5E5E5"> small so the best</font>

174
00:08:33,110 --> 00:08:39,560
factor is<font color="#CCCCCC"> of one me</font><font color="#E5E5E5"> but I do receive a</font>

175
00:08:37,309 --> 00:08:41,900
few contribution sometimes from students

176
00:08:39,559 --> 00:08:45,829
of mine so it's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> really a choice but</font>

177
00:08:41,900 --> 00:08:47,630
<font color="#E5E5E5">they do enjoy the contribution and</font>

178
00:08:45,830 --> 00:08:49,100
sometimes from foreigners<font color="#CCCCCC"> so that's</font>

179
00:08:47,630 --> 00:08:52,490
<font color="#E5E5E5">something I</font><font color="#CCCCCC"> really appreciate because</font>

180
00:08:49,100 --> 00:08:55,430
I'm not<font color="#E5E5E5"> trying to grab a lot of</font>

181
00:08:52,490 --> 00:08:57,770
<font color="#E5E5E5">attention more than having fun</font>

182
00:08:55,430 --> 00:09:00,469
technically and provide<font color="#E5E5E5"> things that can</font>

183
00:08:57,770 --> 00:09:02,270
be interesting<font color="#CCCCCC"> for</font><font color="#E5E5E5"> people as users but</font>

184
00:09:00,470 --> 00:09:05,060
sometimes<font color="#CCCCCC"> users</font><font color="#E5E5E5"> do submit a pull request</font>

185
00:09:02,270 --> 00:09:06,829
<font color="#CCCCCC">sometime is</font><font color="#E5E5E5"> just to fix a typo in there</font>

186
00:09:05,060 --> 00:09:11,219
with me and sometimes<font color="#E5E5E5"> they do implement</font>

187
00:09:06,830 --> 00:09:13,450
<font color="#E5E5E5">stuff that's still great</font>

188
00:09:11,220 --> 00:09:15,880
behind this<font color="#E5E5E5"> compiler there are</font><font color="#CCCCCC"> three</font>

189
00:09:13,450 --> 00:09:18,970
<font color="#CCCCCC">ideas that make it quite</font><font color="#E5E5E5"> different from</font>

190
00:09:15,880 --> 00:09:21,430
<font color="#E5E5E5">other Python compilers the first idea is</font>

191
00:09:18,970 --> 00:09:24,850
<font color="#E5E5E5">that there is no mixing mode where a</font>

192
00:09:21,430 --> 00:09:29,500
Python code column<font color="#E5E5E5"> or C code calling the</font>

193
00:09:24,850 --> 00:09:32,260
Python C API<font color="#E5E5E5"> lives with ins pure C code</font>

194
00:09:29,500 --> 00:09:34,480
<font color="#CCCCCC">and</font><font color="#E5E5E5"> everything works together that the</font>

195
00:09:32,260 --> 00:09:36,760
syphon approach and our approach is

196
00:09:34,480 --> 00:09:38,800
<font color="#E5E5E5">either you can compile to pure native</font>

197
00:09:36,760 --> 00:09:42,459
<font color="#E5E5E5">code and there is no call</font><font color="#CCCCCC"> to the Python</font>

198
00:09:38,800 --> 00:09:46,060
<font color="#CCCCCC">C API</font><font color="#E5E5E5"> apart from the the frontier or you</font>

199
00:09:42,459 --> 00:09:49,329
<font color="#E5E5E5">can't compile so that may looks like</font>

200
00:09:46,060 --> 00:09:51,910
you're a very<font color="#CCCCCC"> harsh choice but there's a</font>

201
00:09:49,330 --> 00:09:54,610
lot<font color="#E5E5E5"> of nice</font><font color="#CCCCCC"> things first as there</font><font color="#E5E5E5"> is no</font>

202
00:09:51,910 --> 00:09:57,969
longer any<font color="#CCCCCC"> pythons the</font><font color="#E5E5E5"> API call you can</font>

203
00:09:54,610 --> 00:10:01,060
reduce<font color="#E5E5E5"> a Gil so you can make UT threaded</font>

204
00:09:57,970 --> 00:10:03,399
<font color="#E5E5E5">calls to the Python</font><font color="#CCCCCC"> to fight when</font>

205
00:10:01,060 --> 00:10:07,239
<font color="#E5E5E5">generating modules and really the Gil</font>

206
00:10:03,399 --> 00:10:09,910
and that works<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that's a nice point</font>

207
00:10:07,240 --> 00:10:13,029
the other point<font color="#E5E5E5"> is that as you generates</font>

208
00:10:09,910 --> 00:10:14,740
Python free code you could generate<font color="#E5E5E5"> a</font>

209
00:10:13,029 --> 00:10:16,600
module<font color="#CCCCCC"> and native modules that can be</font>

210
00:10:14,740 --> 00:10:18,160
imported from Julia or from rest

211
00:10:16,600 --> 00:10:19,990
that's not implemented but that's

212
00:10:18,160 --> 00:10:23,319
something<font color="#E5E5E5"> that would</font><font color="#CCCCCC"> work you could</font>

213
00:10:19,990 --> 00:10:26,680
prototype your code in Python and then

214
00:10:23,320 --> 00:10:29,850
then import it from Julia or<font color="#CCCCCC"> si that's</font>

215
00:10:26,680 --> 00:10:29,849
<font color="#E5E5E5">something I want to try this year</font>

216
00:10:31,390 --> 00:10:37,300
the other point<font color="#E5E5E5"> is typing writing a good</font>

217
00:10:34,810 --> 00:10:38,619
type inference algorithm is difficult<font color="#E5E5E5"> so</font>

218
00:10:37,300 --> 00:10:41,260
either you have<font color="#E5E5E5"> to read a lot of</font>

219
00:10:38,620 --> 00:10:43,779
<font color="#CCCCCC">bibliography</font><font color="#E5E5E5"> which is itself a difficult</font>

220
00:10:41,260 --> 00:10:46,930
<font color="#E5E5E5">or you have to try to revamp reinvent</font>

221
00:10:43,779 --> 00:10:48,550
the wheel<font color="#E5E5E5"> which and then realize that</font>

222
00:10:46,930 --> 00:10:51,819
there is<font color="#E5E5E5"> a lot of</font><font color="#CCCCCC"> literature but that's</font>

223
00:10:48,550 --> 00:10:54,609
not<font color="#E5E5E5"> for nothing or you say okay that</font>

224
00:10:51,820 --> 00:10:58,149
type duck typing it's really similar<font color="#CCCCCC"> to</font>

225
00:10:54,610 --> 00:11:01,870
templates<font color="#E5E5E5"> C++ template instantiation</font><font color="#CCCCCC"> in</font>

226
00:10:58,149 --> 00:11:04,390
fact C++ templates use static

227
00:11:01,870 --> 00:11:07,089
<font color="#E5E5E5">polymorphism and duck typing provides</font>

228
00:11:04,390 --> 00:11:07,540
dynamic polymorphism<font color="#E5E5E5"> but in a static</font>

229
00:11:07,089 --> 00:11:09,730
world

230
00:11:07,540 --> 00:11:13,750
it's an observer is a match between<font color="#CCCCCC"> the</font>

231
00:11:09,730 --> 00:11:16,779
<font color="#CCCCCC">two so basically we generate C++ and it</font>

232
00:11:13,750 --> 00:11:18,670
happens to be<font color="#E5E5E5"> correctly typed we don't</font>

233
00:11:16,779 --> 00:11:22,209
try to infer<font color="#CCCCCC"> the type of we just</font>

234
00:11:18,670 --> 00:11:25,180
<font color="#E5E5E5">generate meta programs C++ meta programs</font>

235
00:11:22,209 --> 00:11:28,719
and we instantiate them for<font color="#E5E5E5"> several</font>

236
00:11:25,180 --> 00:11:30,729
<font color="#E5E5E5">types and native code gets</font><font color="#CCCCCC"> generated</font>

237
00:11:28,720 --> 00:11:36,279
<font color="#E5E5E5">that sounds magic but it actually</font><font color="#CCCCCC"> works</font>

238
00:11:30,730 --> 00:11:38,170
<font color="#E5E5E5">so the typing</font><font color="#CCCCCC"> con</font><font color="#E5E5E5"> the patron is not</font>

239
00:11:36,279 --> 00:11:42,300
brain damaging and that's cool<font color="#CCCCCC"> for me</font>

240
00:11:38,170 --> 00:11:42,300
<font color="#E5E5E5">because that's not my expertise area</font>

241
00:11:44,329 --> 00:11:49,459
and the next idea is we<font color="#E5E5E5"> don't generate</font>

242
00:11:47,119 --> 00:11:52,309
<font color="#CCCCCC">low-level code if there is no loop in</font>

243
00:11:49,459 --> 00:11:55,040
the original code<font color="#CCCCCC"> we don't try</font><font color="#E5E5E5"> to</font>

244
00:11:52,309 --> 00:11:58,339
generate<font color="#CCCCCC"> loop</font><font color="#E5E5E5"> in the final called we</font>

245
00:11:55,040 --> 00:12:02,389
basically<font color="#E5E5E5"> row rewrote the Python</font>

246
00:11:58,339 --> 00:12:06,319
built-ins<font color="#CCCCCC"> part of nimpah random module</font>

247
00:12:02,389 --> 00:12:08,779
<font color="#CCCCCC">ETL tools in C++ in a full complete and</font>

248
00:12:06,319 --> 00:12:12,378
generic way<font color="#E5E5E5"> and we generate code to this</font>

249
00:12:08,779 --> 00:12:15,499
<font color="#E5E5E5">high</font><font color="#CCCCCC"> level C++ library the good thing</font><font color="#E5E5E5"> is</font>

250
00:12:12,379 --> 00:12:17,119
<font color="#CCCCCC">that if you want</font><font color="#E5E5E5"> to increase the library</font>

251
00:12:15,499 --> 00:12:20,420
support you<font color="#CCCCCC"> just have to write a bunch</font>

252
00:12:17,119 --> 00:12:23,389
of decent<font color="#E5E5E5"> C++ code well for some</font>

253
00:12:20,420 --> 00:12:26,929
definition<font color="#CCCCCC"> of descent</font><font color="#E5E5E5"> but cell it's</font>

254
00:12:23,389 --> 00:12:29,509
feasible<font color="#CCCCCC"> another good thing</font><font color="#E5E5E5"> is that as</font>

255
00:12:26,929 --> 00:12:32,449
we<font color="#E5E5E5"> keep</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> source to source translation</font>

256
00:12:29,509 --> 00:12:34,660
at<font color="#CCCCCC"> the high</font><font color="#E5E5E5"> level if you put we had</font><font color="#CCCCCC"> it</font>

257
00:12:32,449 --> 00:12:38,988
<font color="#E5E5E5">this feature if you put</font><font color="#CCCCCC"> openmp</font>

258
00:12:34,660 --> 00:12:43,639
annotations on your Python code<font color="#E5E5E5"> then</font>

259
00:12:38,989 --> 00:12:46,579
they can be<font color="#CCCCCC"> translated to C++ and they</font>

260
00:12:43,639 --> 00:12:48,649
still have the<font color="#E5E5E5"> correct meaning the</font>

261
00:12:46,579 --> 00:12:51,949
<font color="#CCCCCC">semetic</font><font color="#E5E5E5"> is respected and</font><font color="#CCCCCC"> really actually</font>

262
00:12:48,649 --> 00:12:56,299
is<font color="#E5E5E5"> reported to full open most of</font><font color="#CCCCCC"> open</font>

263
00:12:51,949 --> 00:13:00,618
<font color="#CCCCCC">mp3 language from</font><font color="#E5E5E5"> Python and you have</font>

264
00:12:56,299 --> 00:13:03,279
your multi-threaded code that runs on

265
00:13:00,619 --> 00:13:03,279
<font color="#CCCCCC">multiple cores</font>

266
00:13:03,740 --> 00:13:10,550
so that sounds like<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> stuff but</font>

267
00:13:07,190 --> 00:13:14,660
there's not<font color="#CCCCCC"> that much code so some</font>

268
00:13:10,550 --> 00:13:23,020
<font color="#E5E5E5">commits obviously pythonic is a</font><font color="#CCCCCC"> C++</font>

269
00:13:14,660 --> 00:13:27,079
<font color="#E5E5E5">layer so it's less</font><font color="#CCCCCC"> than half thousand</font><font color="#E5E5E5"> no</font>

270
00:13:23,020 --> 00:13:28,340
<font color="#CCCCCC">4450 thousand lines of code of C++</font><font color="#E5E5E5"> code</font>

271
00:13:27,080 --> 00:13:30,500
and that's<font color="#E5E5E5"> most of it</font>

272
00:13:28,340 --> 00:13:35,600
of the code<font color="#E5E5E5"> there's a lot of tests ooh</font>

273
00:13:30,500 --> 00:13:38,120
<font color="#E5E5E5">because that's a hobby</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> I don't want</font>

274
00:13:35,600 --> 00:13:40,250
to spend time debugging<font color="#CCCCCC"> because I have</font>

275
00:13:38,120 --> 00:13:45,130
better thing to<font color="#E5E5E5"> do so if I have a lot of</font>

276
00:13:40,250 --> 00:13:47,720
tests<font color="#E5E5E5"> then I can just write my code</font>

277
00:13:45,130 --> 00:13:51,200
<font color="#CCCCCC">announce the</font><font color="#E5E5E5"> test suit and it takes on</font>

278
00:13:47,720 --> 00:13:54,020
github<font color="#CCCCCC"> three hours on Travis three hours</font>

279
00:13:51,200 --> 00:13:55,700
to<font color="#E5E5E5"> run every all</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> tests suit but then</font>

280
00:13:54,020 --> 00:13:58,250
I can just go cooking chopping wood or

281
00:13:55,700 --> 00:14:00,080
<font color="#CCCCCC">whatever and then I go back and</font><font color="#E5E5E5"> okay it</font>

282
00:13:58,250 --> 00:14:02,690
works and I can<font color="#CCCCCC"> move to the</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> tasks</font>

283
00:14:00,080 --> 00:14:04,430
<font color="#E5E5E5">so that's what my work it's a hobby so</font>

284
00:14:02,690 --> 00:14:07,040
having a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> tests is a good way to</font>

285
00:14:04,430 --> 00:14:11,479
have<font color="#CCCCCC"> hobbies that can still be useful</font>

286
00:14:07,040 --> 00:14:14,630
<font color="#E5E5E5">and the Python code is</font><font color="#CCCCCC"> actually very low</font>

287
00:14:11,480 --> 00:14:17,660
there is less than<font color="#E5E5E5"> 20,000 lines of</font>

288
00:14:14,630 --> 00:14:20,600
Python code to write this compiler<font color="#E5E5E5"> so</font>

289
00:14:17,660 --> 00:14:23,000
maybe because<font color="#E5E5E5"> lots of the part of the</font>

290
00:14:20,600 --> 00:14:25,610
job<font color="#CCCCCC"> is moved to the C++ stuff but also</font>

291
00:14:23,000 --> 00:14:28,940
because<font color="#CCCCCC"> Python is a high-level language</font>

292
00:14:25,610 --> 00:14:32,630
so writing compiler<font color="#CCCCCC"> in</font><font color="#E5E5E5"> Python does not</font>

293
00:14:28,940 --> 00:14:35,690
prove<font color="#CCCCCC"> to be that difficult</font><font color="#E5E5E5"> so how does</font>

294
00:14:32,630 --> 00:14:37,460
<font color="#CCCCCC">it work</font><font color="#E5E5E5"> you write your</font><font color="#CCCCCC"> Python code as</font>

295
00:14:35,690 --> 00:14:40,820
<font color="#E5E5E5">you would do you had</font><font color="#CCCCCC"> these Python</font>

296
00:14:37,460 --> 00:14:45,260
exports lines you learn the syntax of

297
00:14:40,820 --> 00:14:48,410
<font color="#E5E5E5">this single line then you call - it's in</font>

298
00:14:45,260 --> 00:14:52,010
self generates a C++ code that can be

299
00:14:48,410 --> 00:14:55,850
compiled with any decent C++ compiler

300
00:14:52,010 --> 00:14:58,370
<font color="#CCCCCC">and it generates</font><font color="#E5E5E5"> a native libraries that</font>

301
00:14:55,850 --> 00:15:00,710
<font color="#E5E5E5">can be imported - just like regular</font>

302
00:14:58,370 --> 00:15:04,250
model that's part<font color="#E5E5E5"> of the Python module</font>

303
00:15:00,710 --> 00:15:06,740
<font color="#E5E5E5">import mechanism but wait it's not a</font>

304
00:15:04,250 --> 00:15:09,980
translator<font color="#E5E5E5"> that looks like a translator</font>

305
00:15:06,740 --> 00:15:11,660
<font color="#E5E5E5">from Python to</font><font color="#CCCCCC"> C++ to native code</font><font color="#E5E5E5"> but</font>

306
00:15:09,980 --> 00:15:14,480
there's<font color="#E5E5E5"> nuts because</font>

307
00:15:11,660 --> 00:15:15,500
<font color="#CCCCCC">recall super space is just a convenient</font>

308
00:15:14,480 --> 00:15:17,210
<font color="#E5E5E5">back end it's a very convenient</font>

309
00:15:15,500 --> 00:15:21,230
convenient back end but it's just the

310
00:15:17,210 --> 00:15:23,480
back end<font color="#CCCCCC"> Python is a compiler</font><font color="#E5E5E5"> so you can</font>

311
00:15:21,230 --> 00:15:27,290
view<font color="#E5E5E5"> it as a</font><font color="#CCCCCC"> sutra source tool box</font>

312
00:15:23,480 --> 00:15:30,770
you take<font color="#E5E5E5"> your Python code move to the</font>

313
00:15:27,290 --> 00:15:33,589
<font color="#E5E5E5">abstract syntax tree refine the syntax</font>

314
00:15:30,770 --> 00:15:38,090
tree to optimize it for<font color="#E5E5E5"> scientific</font>

315
00:15:33,590 --> 00:15:41,300
<font color="#CCCCCC">computing and then the result</font><font color="#E5E5E5"> either as</font>

316
00:15:38,090 --> 00:15:45,160
<font color="#E5E5E5">Python code which makes the begin his</font>

317
00:15:41,300 --> 00:15:48,229
year or as C++<font color="#E5E5E5"> code so there are three</font>

318
00:15:45,160 --> 00:15:50,150
important pieces in<font color="#CCCCCC"> patron</font><font color="#E5E5E5"> analyzes</font>

319
00:15:48,230 --> 00:15:52,610
which try to gather information about

320
00:15:50,150 --> 00:15:55,490
<font color="#CCCCCC">the syntax</font><font color="#E5E5E5"> tree transformation and</font>

321
00:15:52,610 --> 00:15:58,670
optimization that both<font color="#CCCCCC"> transform the</font>

322
00:15:55,490 --> 00:16:04,730
code either<font color="#E5E5E5"> to make it easier to</font><font color="#CCCCCC"> analyze</font>

323
00:15:58,670 --> 00:16:07,490
or to generate<font color="#E5E5E5"> more optimized code so</font>

324
00:16:04,730 --> 00:16:10,730
that's<font color="#E5E5E5"> just a bunch of</font><font color="#CCCCCC"> key words</font><font color="#E5E5E5"> about</font>

325
00:16:07,490 --> 00:16:13,250
the kind of compiler analyzes we do use

326
00:16:10,730 --> 00:16:15,140
<font color="#CCCCCC">they change computing the memory</font><font color="#E5E5E5"> the</font>

327
00:16:13,250 --> 00:16:17,570
effects of an function on memory on

328
00:16:15,140 --> 00:16:19,310
<font color="#E5E5E5">arguments on global memory when you call</font>

329
00:16:17,570 --> 00:16:23,390
a<font color="#E5E5E5"> random function there is</font><font color="#CCCCCC"> a side effect</font>

330
00:16:19,310 --> 00:16:25,160
<font color="#E5E5E5">on on the state so your function is not</font>

331
00:16:23,390 --> 00:16:26,390
pure<font color="#CCCCCC"> so there are things that you can do</font>

332
00:16:25,160 --> 00:16:28,699
with your function things you<font color="#E5E5E5"> that you</font>

333
00:16:26,390 --> 00:16:31,370
can do and sometimes<font color="#CCCCCC"> you need to do</font>

334
00:16:28,700 --> 00:16:34,460
regular<font color="#E5E5E5"> expression on the</font><font color="#CCCCCC"> ast to replace</font>

335
00:16:31,370 --> 00:16:37,670
an expression by a simpler<font color="#E5E5E5"> one constant</font>

336
00:16:34,460 --> 00:16:42,020
expression which is basically equivalent

337
00:16:37,670 --> 00:16:44,079
to the<font color="#E5E5E5"> context keyword in C++ but down</font>

338
00:16:42,020 --> 00:16:47,810
without<font color="#CCCCCC"> an e keyword at Python level</font>

339
00:16:44,080 --> 00:16:49,400
<font color="#E5E5E5">laziness analysis computing that list</font>

340
00:16:47,810 --> 00:16:51,290
comprehension could be transformed<font color="#E5E5E5"> into</font>

341
00:16:49,400 --> 00:16:54,709
a generator expression<font color="#E5E5E5"> which avoids</font>

342
00:16:51,290 --> 00:16:56,420
generating the world list<font color="#E5E5E5"> computing</font>

343
00:16:54,710 --> 00:16:58,280
<font color="#E5E5E5">whether an expression is pure does it</font>

344
00:16:56,420 --> 00:17:00,560
have side effect or<font color="#CCCCCC"> not</font><font color="#E5E5E5"> if it doesn't</font>

345
00:16:58,280 --> 00:17:02,110
have side effects<font color="#CCCCCC"> then we can move it</font>

346
00:17:00,560 --> 00:17:04,869
around we can<font color="#E5E5E5"> if</font>

347
00:17:02,110 --> 00:17:06,579
it has no<font color="#E5E5E5"> I know</font><font color="#CCCCCC"> side-effects and</font><font color="#E5E5E5"> only</font>

348
00:17:04,869 --> 00:17:08,589
constant parameters and we can fold it

349
00:17:06,579 --> 00:17:13,030
at compile time<font color="#CCCCCC"> so you can write</font>

350
00:17:08,589 --> 00:17:14,708
<font color="#E5E5E5">Fibonacci of 20 and Python will realize</font>

351
00:17:13,030 --> 00:17:16,959
that Fibonacci is<font color="#E5E5E5"> a pure function and</font>

352
00:17:14,709 --> 00:17:20,890
just compute<font color="#E5E5E5"> that at compile time and</font>

353
00:17:16,959 --> 00:17:23,680
<font color="#E5E5E5">replace result by</font><font color="#CCCCCC"> the variation of this</font>

354
00:17:20,890 --> 00:17:25,540
function you can compute ranch for some

355
00:17:23,680 --> 00:17:28,270
values stating that this<font color="#E5E5E5"> variable is</font>

356
00:17:25,540 --> 00:17:30,100
going to<font color="#E5E5E5"> be between</font><font color="#CCCCCC"> 0 and</font><font color="#E5E5E5"> 20 and then</font>

357
00:17:28,270 --> 00:17:33,160
maybe perform some optimization based on

358
00:17:30,100 --> 00:17:35,590
<font color="#E5E5E5">that this kind of optimization we do is</font>

359
00:17:33,160 --> 00:17:36,760
a generalization of loop<font color="#E5E5E5"> unrolling</font><font color="#CCCCCC"> but</font>

360
00:17:35,590 --> 00:17:40,570
for<font color="#E5E5E5"> any iterator</font>

361
00:17:36,760 --> 00:17:42,810
so you can<font color="#E5E5E5"> enroll a loop on a set on the</font>

362
00:17:40,570 --> 00:17:45,129
list<font color="#CCCCCC"> on a tuple and that would work</font>

363
00:17:42,810 --> 00:17:48,270
constant folding but<font color="#CCCCCC"> interprocedural</font>

364
00:17:45,130 --> 00:17:52,390
<font color="#CCCCCC">thanks to</font><font color="#E5E5E5"> Z of</font><font color="#CCCCCC"> T</font><font color="#E5E5E5"> thanks to the analysis</font>

365
00:17:48,270 --> 00:17:54,670
<font color="#CCCCCC">iPods remove some material pension which</font>

366
00:17:52,390 --> 00:17:57,100
proved to<font color="#CCCCCC"> be a very costly operation</font><font color="#E5E5E5"> at</font>

367
00:17:54,670 --> 00:17:59,320
<font color="#CCCCCC">the assembly level when it's done an</font>

368
00:17:57,100 --> 00:18:00,969
indication<font color="#CCCCCC"> on</font><font color="#E5E5E5"> induction variable</font><font color="#CCCCCC"> that's</font>

369
00:17:59,320 --> 00:18:03,669
<font color="#E5E5E5">something people tend to do when doing</font>

370
00:18:00,970 --> 00:18:05,560
image processing<font color="#E5E5E5"> forward substitution to</font>

371
00:18:03,670 --> 00:18:11,410
avoid temporaries instruction<font color="#CCCCCC"> combined</font>

372
00:18:05,560 --> 00:18:13,270
to make<font color="#CCCCCC"> some patterns appear simplify</font>

373
00:18:11,410 --> 00:18:15,130
<font color="#E5E5E5">the code based on the range analyzes</font>

374
00:18:13,270 --> 00:18:17,080
<font color="#E5E5E5">remove that code all this kind of</font><font color="#CCCCCC"> steal</font>

375
00:18:15,130 --> 00:18:19,150
stuff can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> done at the Python level</font>

376
00:18:17,080 --> 00:18:22,750
then you say<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> is basically</font>

377
00:18:19,150 --> 00:18:25,510
representing<font color="#E5E5E5"> GCC but</font><font color="#CCCCCC"> either Python level</font>

378
00:18:22,750 --> 00:18:27,970
what<font color="#E5E5E5"> they use but GCC does not</font>

379
00:18:25,510 --> 00:18:31,090
understand the semantics of a<font color="#E5E5E5"> Python</font>

380
00:18:27,970 --> 00:18:36,100
call it doesn't know that<font color="#E5E5E5"> numpy dot ones</font>

381
00:18:31,090 --> 00:18:38,439
has no side effects so doing this kind

382
00:18:36,100 --> 00:18:42,459
of stuff at<font color="#E5E5E5"> the Python level it's just</font>

383
00:18:38,440 --> 00:18:44,080
<font color="#E5E5E5">because once you</font><font color="#CCCCCC"> RG say LLVM level at</font>

384
00:18:42,460 --> 00:18:46,420
the bytecode level<font color="#E5E5E5"> you don't have this</font>

385
00:18:44,080 --> 00:18:49,990
information<font color="#E5E5E5"> anymore so it's the right</font>

386
00:18:46,420 --> 00:18:51,820
step that's several laser<font color="#E5E5E5"> several layer</font>

387
00:18:49,990 --> 00:18:54,010
of abstraction and at the pay at the

388
00:18:51,820 --> 00:18:55,929
<font color="#E5E5E5">Python level layer you can do some</font>

389
00:18:54,010 --> 00:18:57,370
optimization and I<font color="#CCCCCC"> don't do reduce the</font>

390
00:18:55,930 --> 00:19:00,330
allocation at that level because<font color="#E5E5E5"> that's</font>

391
00:18:57,370 --> 00:19:00,330
<font color="#E5E5E5">not my job</font>

392
00:19:00,370 --> 00:19:07,100
but<font color="#E5E5E5"> wait there are other compilers</font><font color="#CCCCCC"> and</font>

393
00:19:04,360 --> 00:19:09,379
number for example<font color="#CCCCCC"> expect</font><font color="#E5E5E5"> your code</font><font color="#CCCCCC"> to</font>

394
00:19:07,100 --> 00:19:11,360
look<font color="#E5E5E5"> like that</font><font color="#CCCCCC"> if it</font><font color="#E5E5E5"> looks</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> that</font>

395
00:19:09,380 --> 00:19:13,880
there<font color="#CCCCCC"> is loop variable declaration and</font>

396
00:19:11,360 --> 00:19:18,559
then you can compile that<font color="#E5E5E5"> to efficient</font>

397
00:19:13,880 --> 00:19:22,160
code but you can also write Fortran code

398
00:19:18,559 --> 00:19:25,010
that<font color="#E5E5E5"> looks like that we are in the 21</font>

399
00:19:22,160 --> 00:19:27,380
<font color="#CCCCCC">century you can expect to write</font><font color="#E5E5E5"> higher</font>

400
00:19:25,010 --> 00:19:29,900
level code<font color="#E5E5E5"> that's still perform the same</font>

401
00:19:27,380 --> 00:19:33,200
operation<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> this code can be</font>

402
00:19:29,900 --> 00:19:35,540
rewritten in Empire using SAP and that's

403
00:19:33,200 --> 00:19:37,280
<font color="#E5E5E5">higher level there is some temporaries</font>

404
00:19:35,540 --> 00:19:40,820
that are generated because of<font color="#E5E5E5"> the code</font>

405
00:19:37,280 --> 00:19:43,190
to<font color="#E5E5E5"> Sam or because of the array</font>

406
00:19:40,820 --> 00:19:46,760
expression at<font color="#CCCCCC"> the end but that's easier</font>

407
00:19:43,190 --> 00:19:49,400
to<font color="#E5E5E5"> maintain and scientific people tend</font>

408
00:19:46,760 --> 00:19:52,460
<font color="#CCCCCC">to write</font><font color="#E5E5E5"> this kind of code and then they</font>

409
00:19:49,400 --> 00:19:53,000
say okay<font color="#CCCCCC"> I want performance and so</font><font color="#E5E5E5"> oh I</font>

410
00:19:52,460 --> 00:19:55,160
remember

411
00:19:53,000 --> 00:19:59,179
I<font color="#E5E5E5"> used to write C and they go back</font><font color="#CCCCCC"> to</font>

412
00:19:55,160 --> 00:20:01,429
this implementation<font color="#E5E5E5"> even in Fortran you</font>

413
00:19:59,179 --> 00:20:03,220
can write this kind of code<font color="#CCCCCC"> so there is</font>

414
00:20:01,429 --> 00:20:05,809
no<font color="#E5E5E5"> reason why</font><font color="#CCCCCC"> you should stick</font><font color="#E5E5E5"> to that</font>

415
00:20:03,220 --> 00:20:08,840
so<font color="#E5E5E5"> Python tries to compile this kind of</font>

416
00:20:05,809 --> 00:20:10,970
code which proves to be more difficult

417
00:20:08,840 --> 00:20:14,870
<font color="#E5E5E5">in a way</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> that's why you need a</font>

418
00:20:10,970 --> 00:20:17,450
compiler<font color="#E5E5E5"> now one of them was challenging</font>

419
00:20:14,870 --> 00:20:20,168
<font color="#E5E5E5">kernel I had to handle was this one it</font>

420
00:20:17,450 --> 00:20:23,120
was<font color="#E5E5E5"> on Stack Overflow and the guy just</font>

421
00:20:20,169 --> 00:20:25,940
push his coat<font color="#E5E5E5"> and</font><font color="#CCCCCC"> said okay this is so</font>

422
00:20:23,120 --> 00:20:28,668
how can<font color="#E5E5E5"> I make it faster and basically</font>

423
00:20:25,940 --> 00:20:32,090
<font color="#CCCCCC">the answer</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> okay that's high level</font>

424
00:20:28,669 --> 00:20:36,020
called<font color="#CCCCCC"> writes it at a lower level make</font>

425
00:20:32,090 --> 00:20:38,178
<font color="#E5E5E5">all the looped explicit just still</font>

426
00:20:36,020 --> 00:20:40,549
plenty<font color="#E5E5E5"> of loops and then you can call</font>

427
00:20:38,179 --> 00:20:42,590
<font color="#CCCCCC">siphon on Nimba and it will get faster</font>

428
00:20:40,549 --> 00:20:44,960
but that's true it gets faster<font color="#E5E5E5"> and</font>

429
00:20:42,590 --> 00:20:48,709
<font color="#E5E5E5">that's very pragmatic</font><font color="#CCCCCC"> I'm not stating</font>

430
00:20:44,960 --> 00:20:50,630
<font color="#E5E5E5">that siphon or</font><font color="#CCCCCC"> ninja are bad compilers</font>

431
00:20:48,710 --> 00:20:53,049
or whatever they<font color="#E5E5E5"> are very pragmatic and</font>

432
00:20:50,630 --> 00:20:56,059
the work which<font color="#E5E5E5"> is something very useful</font>

433
00:20:53,049 --> 00:20:58,300
<font color="#E5E5E5">but still we can dream a bit and when</font>

434
00:20:56,059 --> 00:21:00,760
it's not<font color="#CCCCCC"> you work</font><font color="#E5E5E5"> your</font>

435
00:20:58,300 --> 00:21:02,320
so patron tries to optimize<font color="#E5E5E5"> this kind of</font>

436
00:21:00,760 --> 00:21:04,629
code and we<font color="#CCCCCC"> can reach performance</font>

437
00:21:02,320 --> 00:21:10,080
<font color="#E5E5E5">similar to number siphon on this code</font>

438
00:21:04,630 --> 00:21:10,080
while not writing all the<font color="#CCCCCC"> loops</font><font color="#E5E5E5"> so</font>

439
00:21:11,880 --> 00:21:17,950
<font color="#CCCCCC">that's why we try to do but I'm</font>

440
00:21:15,000 --> 00:21:21,040
relatively alone<font color="#CCCCCC"> as</font><font color="#E5E5E5"> are a few power</font>

441
00:21:17,950 --> 00:21:23,140
users so some<font color="#E5E5E5"> people did use by trying</font>

442
00:21:21,040 --> 00:21:28,000
<font color="#E5E5E5">to compile code that went into a small</font>

443
00:21:23,140 --> 00:21:31,480
robots in the ocean in the<font color="#E5E5E5"> Baltic Sea so</font>

444
00:21:28,000 --> 00:21:34,840
there is Python code<font color="#E5E5E5"> that's work that</font>

445
00:21:31,480 --> 00:21:37,120
runs under the<font color="#E5E5E5"> sea which is very cool</font>

446
00:21:34,840 --> 00:21:40,090
there<font color="#CCCCCC"> is a firm in France in Grenoble</font>

447
00:21:37,120 --> 00:21:42,040
<font color="#E5E5E5">that use patron for the daily tasks some</font>

448
00:21:40,090 --> 00:21:45,490
academic work has been published<font color="#CCCCCC"> using</font>

449
00:21:42,040 --> 00:21:48,820
<font color="#CCCCCC">Python</font><font color="#E5E5E5"> as an engine not just as a</font>

450
00:21:45,490 --> 00:21:51,100
subject of interest and<font color="#E5E5E5"> Marcin did</font>

451
00:21:48,820 --> 00:21:54,909
introduce some way to use by<font color="#CCCCCC"> train</font><font color="#E5E5E5"> in</font>

452
00:21:51,100 --> 00:21:56,860
bags<font color="#E5E5E5"> and there is also there is not a</font>

453
00:21:54,910 --> 00:22:00,070
lot<font color="#CCCCCC"> of developers there is a lot</font><font color="#E5E5E5"> of bug</font>

454
00:21:56,860 --> 00:22:02,560
reporter which is cool<font color="#E5E5E5"> because when your</font>

455
00:22:00,070 --> 00:22:04,659
work is useful to someone<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> happy</font>

456
00:22:02,560 --> 00:22:06,399
and you're more<font color="#CCCCCC"> motivated to</font><font color="#E5E5E5"> spend a few</font>

457
00:22:04,660 --> 00:22:09,970
more hours<font color="#CCCCCC"> entering the night will</font>

458
00:22:06,400 --> 00:22:12,310
improve yourself<font color="#CCCCCC"> and some users respect</font>

459
00:22:09,970 --> 00:22:15,310
<font color="#CCCCCC">our very nice and as it's a small</font>

460
00:22:12,310 --> 00:22:17,470
community<font color="#CCCCCC"> you</font><font color="#E5E5E5"> tend to learn people to</font>

461
00:22:15,310 --> 00:22:20,110
exchange not about only<font color="#E5E5E5"> code but about</font>

462
00:22:17,470 --> 00:22:24,790
any subjects<font color="#E5E5E5"> and I do appreciate that</font>

463
00:22:20,110 --> 00:22:27,879
spots of the<font color="#CCCCCC"> open source life</font>

464
00:22:24,790 --> 00:22:30,220
but the longer the road is very<font color="#CCCCCC"> long</font>

465
00:22:27,880 --> 00:22:32,290
<font color="#E5E5E5">supporting Mumbai is a tremendous task</font>

466
00:22:30,220 --> 00:22:36,000
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> not supporting the world</font><font color="#CCCCCC"> Empire</font>

467
00:22:32,290 --> 00:22:39,580
<font color="#E5E5E5">API even</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> we try to improve them that</font>

468
00:22:36,000 --> 00:22:42,790
moving from supporting only Python who

469
00:22:39,580 --> 00:22:46,629
to potty<font color="#E5E5E5"> to supporting -</font><font color="#CCCCCC"> to and Python</font><font color="#E5E5E5"> 3</font>

470
00:22:42,790 --> 00:22:50,500
was very difficult<font color="#CCCCCC"> supporting all six</font>

471
00:22:46,630 --> 00:22:54,429
was<font color="#CCCCCC"> ok spotting with Windows is getting</font>

472
00:22:50,500 --> 00:22:56,860
ok since next week<font color="#CCCCCC"> no last week</font><font color="#E5E5E5"> but it's</font>

473
00:22:54,429 --> 00:23:00,160
still<font color="#E5E5E5"> difficult and it's only for Python</font>

474
00:22:56,860 --> 00:23:05,439
3 because<font color="#CCCCCC"> Visual Studio</font><font color="#E5E5E5"> for Python 2 is</font>

475
00:23:00,160 --> 00:23:09,549
<font color="#CCCCCC">tagged two visuals you 8008</font><font color="#E5E5E5"> and it does</font>

476
00:23:05,440 --> 00:23:12,760
not support splitters 11 at all<font color="#CCCCCC"> and so</font>

477
00:23:09,549 --> 00:23:15,790
where would I find the motivation<font color="#CCCCCC"> to go</font>

478
00:23:12,760 --> 00:23:19,929
on that way because<font color="#E5E5E5"> it's not an easy way</font>

479
00:23:15,790 --> 00:23:23,620
so<font color="#E5E5E5"> my</font><font color="#CCCCCC"> opinion</font><font color="#E5E5E5"> when it's</font><font color="#CCCCCC"> not you not</font><font color="#E5E5E5"> your</font>

480
00:23:19,929 --> 00:23:26,500
job<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> to find an interest</font><font color="#E5E5E5"> so</font>

481
00:23:23,620 --> 00:23:29,590
either it's for fame<font color="#E5E5E5"> but that's not</font>

482
00:23:26,500 --> 00:23:33,090
<font color="#E5E5E5">exactly the case</font><font color="#CCCCCC"> or because it's</font>

483
00:23:29,590 --> 00:23:36,699
interesting as technical challenge and

484
00:23:33,090 --> 00:23:39,820
one thing that deserves<font color="#E5E5E5"> Python in a way</font>

485
00:23:36,700 --> 00:23:43,210
but<font color="#CCCCCC"> also I find</font><font color="#E5E5E5"> it fun is you have to</font>

486
00:23:39,820 --> 00:23:44,889
work to be good in optimization<font color="#CCCCCC"> low</font>

487
00:23:43,210 --> 00:23:48,010
<font color="#CCCCCC">level optimization understand</font><font color="#E5E5E5"> assembly</font>

488
00:23:44,890 --> 00:23:50,530
when you try<font color="#E5E5E5"> to debug vector SSE</font>

489
00:23:48,010 --> 00:23:51,640
instruction<font color="#CCCCCC"> you'll learn</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> about the</font>

490
00:23:50,530 --> 00:23:53,500
Python language because you're

491
00:23:51,640 --> 00:23:55,870
manipulating<font color="#E5E5E5"> the HT so you know stuff</font>

492
00:23:53,500 --> 00:23:57,730
<font color="#E5E5E5">that exists in the syntax and then oh I</font>

493
00:23:55,870 --> 00:23:59,709
didn't know about<font color="#E5E5E5"> that and I knew you</font>

494
00:23:57,730 --> 00:24:03,669
dive into the language and<font color="#CCCCCC"> you write a</font>

495
00:23:59,710 --> 00:24:06,880
lot<font color="#E5E5E5"> of modern C++ or C++</font><font color="#CCCCCC"> that tries to</font>

496
00:24:03,669 --> 00:24:10,240
be modern and<font color="#E5E5E5"> there's a lot of stuff to</font>

497
00:24:06,880 --> 00:24:11,710
learn that so<font color="#CCCCCC"> just for me it's</font>

498
00:24:10,240 --> 00:24:15,280
interesting<font color="#E5E5E5"> to write this code because I</font>

499
00:24:11,710 --> 00:24:19,200
<font color="#E5E5E5">learn a lot</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's also</font><font color="#CCCCCC"> interesting</font>

500
00:24:15,280 --> 00:24:21,629
because I tend<font color="#E5E5E5"> to meet other people and</font>

501
00:24:19,200 --> 00:24:24,149
scientific community in<font color="#CCCCCC"> Python is very</font>

502
00:24:21,630 --> 00:24:28,529
<font color="#CCCCCC">finally the first</font><font color="#E5E5E5"> time I went to Syfy it</font>

503
00:24:24,149 --> 00:24:33,209
was<font color="#CCCCCC"> really I used to go to academic</font>

504
00:24:28,529 --> 00:24:35,490
conference and it's not saying nothing

505
00:24:33,210 --> 00:24:37,610
that people in academic conference<font color="#CCCCCC"> are</font>

506
00:24:35,490 --> 00:24:40,500
less<font color="#CCCCCC"> 500 and people in Syfy</font>

507
00:24:37,610 --> 00:24:43,139
it's just not the same<font color="#E5E5E5"> kind of people so</font>

508
00:24:40,500 --> 00:24:45,450
I<font color="#E5E5E5"> really love speaking with</font><font color="#CCCCCC"> this kind</font><font color="#E5E5E5"> of</font>

509
00:24:43,139 --> 00:24:47,428
<font color="#CCCCCC">people sharing ideas and then you learn</font>

510
00:24:45,450 --> 00:24:50,940
tricks on optimization<font color="#E5E5E5"> on benchmarking</font>

511
00:24:47,429 --> 00:24:52,500
<font color="#E5E5E5">and you just grow in knowledge and</font>

512
00:24:50,940 --> 00:24:54,000
friendship with<font color="#CCCCCC"> people that you would</font>

513
00:24:52,500 --> 00:24:56,639
<font color="#E5E5E5">never have met otherwise</font>

514
00:24:54,000 --> 00:24:58,350
even if your projects is in a niche

515
00:24:56,639 --> 00:25:02,908
<font color="#E5E5E5">there are still interesting people to</font>

516
00:24:58,350 --> 00:25:04,408
<font color="#E5E5E5">meet and that's very cool the kind of</font>

517
00:25:02,909 --> 00:25:07,679
thing you discover<font color="#CCCCCC"> is OK</font>

518
00:25:04,409 --> 00:25:10,639
Jupiter exists<font color="#E5E5E5"> five years ago I didn't</font>

519
00:25:07,679 --> 00:25:14,100
know<font color="#E5E5E5"> about not books and then I saw this</font>

520
00:25:10,639 --> 00:25:17,479
conference and I<font color="#E5E5E5"> try</font><font color="#CCCCCC"> ok siphon does it</font>

521
00:25:14,100 --> 00:25:20,879
so we<font color="#CCCCCC"> should be</font><font color="#E5E5E5"> able to to have this</font>

522
00:25:17,480 --> 00:25:22,500
<font color="#CCCCCC">Jupiter magic and now there is a</font><font color="#E5E5E5"> Python</font>

523
00:25:20,880 --> 00:25:25,350
magic you write your code<font color="#E5E5E5"> you call</font>

524
00:25:22,500 --> 00:25:28,350
Python with your compiler flag<font color="#E5E5E5"> just the</font>

525
00:25:25,350 --> 00:25:30,600
same<font color="#E5E5E5"> as GCC flags and it generates a</font>

526
00:25:28,350 --> 00:25:33,928
native modules imported into the canals

527
00:25:30,600 --> 00:25:36,658
and<font color="#E5E5E5"> you can go on you known about</font>

528
00:25:33,929 --> 00:25:39,450
capsule a Python capsule is<font color="#CCCCCC"> an opaque</font>

529
00:25:36,659 --> 00:25:43,220
<font color="#E5E5E5">object around a native function or a</font>

530
00:25:39,450 --> 00:25:46,860
native data and just<font color="#E5E5E5"> provide a minimal</font>

531
00:25:43,220 --> 00:25:50,760
interface for embedding a<font color="#E5E5E5"> string and a</font>

532
00:25:46,860 --> 00:25:53,580
<font color="#CCCCCC">bending pointer and it is used to</font><font color="#E5E5E5"> pass</font>

533
00:25:50,760 --> 00:25:57,690
data from native<font color="#CCCCCC"> word to Python</font><font color="#E5E5E5"> world</font>

534
00:25:53,580 --> 00:26:00,689
<font color="#E5E5E5">back to the native world and Python can</font>

535
00:25:57,690 --> 00:26:04,799
generate functions<font color="#E5E5E5"> like here's a full</font>

536
00:26:00,690 --> 00:26:07,919
function will accept a pointer and<font color="#E5E5E5"> now a</font>

537
00:26:04,799 --> 00:26:09,720
pointer to<font color="#CCCCCC"> a matrix and it generates not</font>

538
00:26:07,919 --> 00:26:11,399
a<font color="#E5E5E5"> Python function that can be called at</font>

539
00:26:09,720 --> 00:26:18,289
the<font color="#E5E5E5"> Python level</font><font color="#CCCCCC"> butter capsules that</font>

540
00:26:11,399 --> 00:26:21,268
embeds the<font color="#E5E5E5"> native C++ functions</font><font color="#CCCCCC"> even</font>

541
00:26:18,289 --> 00:26:23,700
<font color="#E5E5E5">generated by Python and then you can</font>

542
00:26:21,269 --> 00:26:26,070
pass this to scifi as an optimization

543
00:26:23,700 --> 00:26:29,460
routine<font color="#E5E5E5"> and it works</font><font color="#CCCCCC"> so there is no</font>

544
00:26:26,070 --> 00:26:30,070
<font color="#E5E5E5">Python glue anywhere and</font><font color="#CCCCCC"> scifi native</font>

545
00:26:29,460 --> 00:26:32,620
code

546
00:26:30,070 --> 00:26:36,460
calls by<font color="#CCCCCC"> turn generated native coal</font>

547
00:26:32,620 --> 00:26:38,409
native code without<font color="#E5E5E5"> any overhead and I</font>

548
00:26:36,460 --> 00:26:40,030
didn't know about<font color="#E5E5E5"> that</font><font color="#CCCCCC"> but Martin told</font>

549
00:26:38,410 --> 00:26:42,190
me about<font color="#CCCCCC"> that and say oh that would be</font>

550
00:26:40,030 --> 00:26:44,370
<font color="#E5E5E5">cool and because we generate pure native</font>

551
00:26:42,190 --> 00:26:47,710
<font color="#E5E5E5">code that's easy to do in patron</font>

552
00:26:44,370 --> 00:26:51,340
<font color="#E5E5E5">implementing that took me to two days</font>

553
00:26:47,710 --> 00:26:52,840
because<font color="#CCCCCC"> of the original</font><font color="#E5E5E5"> design and what</font>

554
00:26:51,340 --> 00:26:57,459
was<font color="#CCCCCC"> that</font><font color="#E5E5E5"> just things I didn't know about</font>

555
00:26:52,840 --> 00:27:00,189
in Python<font color="#CCCCCC"> you also discover</font><font color="#E5E5E5"> that there</font>

556
00:26:57,460 --> 00:27:03,400
is a standard<font color="#E5E5E5"> to represent</font><font color="#CCCCCC"> 14</font><font color="#E5E5E5"> point</font>

557
00:27:00,190 --> 00:27:07,030
number normalized<font color="#E5E5E5"> but</font><font color="#CCCCCC"> noon PI doesn't</font>

558
00:27:03,400 --> 00:27:10,420
<font color="#CCCCCC">care about it</font><font color="#E5E5E5"> which means that when you</font>

559
00:27:07,030 --> 00:27:12,730
<font color="#CCCCCC">do complex numbers operation and the</font>

560
00:27:10,420 --> 00:27:15,540
imaginary<font color="#CCCCCC"> parts is</font><font color="#E5E5E5"> not a number and you</font>

561
00:27:12,730 --> 00:27:17,080
multiply this by infinity what happens

562
00:27:15,540 --> 00:27:20,560
<font color="#E5E5E5">who cares</font>

563
00:27:17,080 --> 00:27:22,780
I don't but<font color="#E5E5E5"> cistern Dada's and new PI</font>

564
00:27:20,560 --> 00:27:25,149
people don't care either<font color="#E5E5E5"> and it</font>

565
00:27:22,780 --> 00:27:28,060
discovered that<font color="#CCCCCC"> because my code</font><font color="#E5E5E5"> my</font>

566
00:27:25,150 --> 00:27:31,090
native code was running slower than<font color="#E5E5E5"> my</font>

567
00:27:28,060 --> 00:27:32,649
code<font color="#CCCCCC"> I couldn't understand I looked at</font>

568
00:27:31,090 --> 00:27:36,159
the<font color="#E5E5E5"> code okay that's complex</font>

569
00:27:32,650 --> 00:27:40,720
<font color="#E5E5E5">multiplication and then I looked at the</font>

570
00:27:36,160 --> 00:27:43,990
binary from<font color="#CCCCCC"> new PI because most</font><font color="#E5E5E5"> of</font>

571
00:27:40,720 --> 00:27:46,540
empire is written in C<font color="#E5E5E5"> and say</font><font color="#CCCCCC"> ok that's</font>

572
00:27:43,990 --> 00:27:49,480
not<font color="#E5E5E5"> the same complex operation and then</font>

573
00:27:46,540 --> 00:27:52,720
you discover<font color="#E5E5E5"> things because</font><font color="#CCCCCC"> Python can</font>

574
00:27:49,480 --> 00:27:54,910
generate vectorized code not<font color="#CCCCCC"> vectorized</font>

575
00:27:52,720 --> 00:27:58,390
like vectorized<font color="#E5E5E5"> our operation but</font>

576
00:27:54,910 --> 00:28:00,700
<font color="#CCCCCC">vectorize like using AVX or SSDs that</font>

577
00:27:58,390 --> 00:28:03,010
are available<font color="#CCCCCC"> in modern processor i</font>

578
00:28:00,700 --> 00:28:06,070
developed some more skills on that

579
00:28:03,010 --> 00:28:08,379
<font color="#E5E5E5">mostly based on boost a CMD but also you</font>

580
00:28:06,070 --> 00:28:11,100
know learn to debug<font color="#CCCCCC"> that so that's just</font>

581
00:28:08,380 --> 00:28:12,970
technical skills<font color="#CCCCCC"> that happens to be a</font>

582
00:28:11,100 --> 00:28:16,600
funny

583
00:28:12,970 --> 00:28:20,890
<font color="#E5E5E5">but wait</font><font color="#CCCCCC"> I also have a family</font><font color="#E5E5E5"> I'm the</font>

584
00:28:16,600 --> 00:28:22,629
<font color="#E5E5E5">proud father</font><font color="#CCCCCC"> of two</font><font color="#E5E5E5"> lovely girls</font><font color="#CCCCCC"> so and</font>

585
00:28:20,890 --> 00:28:24,400
I want<font color="#E5E5E5"> to spend time with them so</font>

586
00:28:22,630 --> 00:28:26,770
there's two option either<font color="#CCCCCC"> I learned I</font>

587
00:28:24,400 --> 00:28:29,500
teach them Python and I try<font color="#CCCCCC"> that but</font>

588
00:28:26,770 --> 00:28:32,410
that was not<font color="#CCCCCC"> a success or I</font><font color="#E5E5E5"> don't spend</font>

589
00:28:29,500 --> 00:28:34,840
that<font color="#E5E5E5"> much</font><font color="#CCCCCC"> time on my laptop and spend</font>

590
00:28:32,410 --> 00:28:37,000
<font color="#E5E5E5">time</font><font color="#CCCCCC"> with my children so how do you find</font>

591
00:28:34,840 --> 00:28:39,129
<font color="#E5E5E5">the</font><font color="#CCCCCC"> balance between</font><font color="#E5E5E5"> your regular work</font>

592
00:28:37,000 --> 00:28:42,340
<font color="#E5E5E5">which has nothing to do with</font><font color="#CCCCCC"> python or</font>

593
00:28:39,130 --> 00:28:44,320
<font color="#E5E5E5">optimization</font><font color="#CCCCCC"> your family your health</font><font color="#E5E5E5"> if</font>

594
00:28:42,340 --> 00:28:48,429
<font color="#E5E5E5">you want to do sport or whatever</font><font color="#CCCCCC"> and</font>

595
00:28:44,320 --> 00:28:52,990
<font color="#E5E5E5">open source either you sacrifice an</font>

596
00:28:48,430 --> 00:28:56,020
element which is<font color="#E5E5E5"> a possibility but</font><font color="#CCCCCC"> from</font>

597
00:28:52,990 --> 00:28:58,230
my side<font color="#CCCCCC"> I try</font><font color="#E5E5E5"> to make sure that</font><font color="#CCCCCC"> when I</font>

598
00:28:56,020 --> 00:29:02,560
do open<font color="#E5E5E5"> source</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a benefits</font><font color="#CCCCCC"> also</font>

599
00:28:58,230 --> 00:29:04,900
<font color="#E5E5E5">for other items when you gather more</font>

600
00:29:02,560 --> 00:29:09,040
technical knowledge then you're better

601
00:29:04,900 --> 00:29:10,990
<font color="#E5E5E5">at work and for instance tomorrow I will</font>

602
00:29:09,040 --> 00:29:13,389
present something<font color="#CCCCCC"> that was them</font><font color="#E5E5E5"> related</font>

603
00:29:10,990 --> 00:29:15,850
to my work<font color="#E5E5E5"> but as a side effect is</font><font color="#CCCCCC"> they</font>

604
00:29:13,390 --> 00:29:17,950
pay for<font color="#CCCCCC"> my travel</font><font color="#E5E5E5"> to come today so</font>

605
00:29:15,850 --> 00:29:20,889
<font color="#CCCCCC">that's cool</font>

606
00:29:17,950 --> 00:29:23,860
you can try to meet friends or<font color="#E5E5E5"> family I</font>

607
00:29:20,890 --> 00:29:26,400
have sisters that lives in<font color="#E5E5E5"> Brazil</font><font color="#CCCCCC"> I'm</font>

608
00:29:23,860 --> 00:29:30,100
going to meet her tonight<font color="#E5E5E5"> that's cool</font>

609
00:29:26,400 --> 00:29:33,130
you can try to raise money<font color="#CCCCCC"> because when</font>

610
00:29:30,100 --> 00:29:35,709
your wife is<font color="#E5E5E5"> playing piano if you</font>

611
00:29:33,130 --> 00:29:37,780
develop she's not very<font color="#E5E5E5"> happy</font><font color="#CCCCCC"> but if</font><font color="#E5E5E5"> you</font>

612
00:29:35,710 --> 00:29:41,680
develop and you get money then she's

613
00:29:37,780 --> 00:29:44,260
happy<font color="#CCCCCC"> so if you try if</font><font color="#E5E5E5"> you're if you</font>

614
00:29:41,680 --> 00:29:46,540
find a way<font color="#E5E5E5"> to find your work then it's</font>

615
00:29:44,260 --> 00:29:51,790
more legitimate<font color="#E5E5E5"> to spend your time on</font>

616
00:29:46,540 --> 00:29:54,310
<font color="#E5E5E5">your laptop you</font><font color="#CCCCCC"> may be a</font><font color="#E5E5E5"> media list and</font>

617
00:29:51,790 --> 00:29:56,830
<font color="#CCCCCC">think</font><font color="#E5E5E5"> that sharing knowledge is a good</font>

618
00:29:54,310 --> 00:29:59,889
thing and then<font color="#CCCCCC"> just</font><font color="#E5E5E5"> speaking in front of</font>

619
00:29:56,830 --> 00:30:02,379
<font color="#CCCCCC">people or teaching</font><font color="#E5E5E5"> scientific Python to</font>

620
00:29:59,890 --> 00:30:04,930
<font color="#E5E5E5">researcher in France something you want</font>

621
00:30:02,380 --> 00:30:07,720
<font color="#CCCCCC">ready to do and then you can</font><font color="#E5E5E5"> do that so</font>

622
00:30:04,930 --> 00:30:09,180
I'm trying<font color="#CCCCCC"> to</font><font color="#E5E5E5"> mix everything</font><font color="#CCCCCC"> so right</font>

623
00:30:07,720 --> 00:30:12,750
when it<font color="#E5E5E5"> just</font>

624
00:30:09,180 --> 00:30:18,059
still<font color="#CCCCCC"> maybe the keystone of</font><font color="#E5E5E5"> that but it</font>

625
00:30:12,750 --> 00:30:22,050
enables a<font color="#E5E5E5"> lot of thing and my mind</font><font color="#CCCCCC"> it's</font>

626
00:30:18,059 --> 00:30:24,149
a pet project<font color="#CCCCCC"> so it's not work so at one</font>

627
00:30:22,050 --> 00:30:28,800
time I was<font color="#E5E5E5"> working with one of my</font><font color="#CCCCCC"> former</font>

628
00:30:24,150 --> 00:30:31,590
students<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> wanted</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be very good</font>

629
00:30:28,800 --> 00:30:35,790
engineers so there was a very harsh

630
00:30:31,590 --> 00:30:38,520
review that was ongoing<font color="#E5E5E5"> for every pull</font>

631
00:30:35,790 --> 00:30:41,220
request<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> tried to write the best</font>

632
00:30:38,520 --> 00:30:43,290
<font color="#E5E5E5">code ever and after six months</font><font color="#CCCCCC"> the</font>

633
00:30:41,220 --> 00:30:46,350
motivation was gone<font color="#E5E5E5"> because</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> you</font>

634
00:30:43,290 --> 00:30:48,090
when you wait three weeks<font color="#E5E5E5"> and refactor</font>

635
00:30:46,350 --> 00:30:50,490
your code and refactor your code<font color="#E5E5E5"> and in</font>

636
00:30:48,090 --> 00:30:53,490
the end it<font color="#E5E5E5"> gets in but it's one month</font>

637
00:30:50,490 --> 00:30:56,940
<font color="#E5E5E5">later it's not fun at all you do that</font><font color="#CCCCCC"> at</font>

638
00:30:53,490 --> 00:30:59,280
work<font color="#CCCCCC"> and you paid for that</font><font color="#E5E5E5"> but there is</font>

639
00:30:56,940 --> 00:31:03,059
a<font color="#CCCCCC"> balance between</font><font color="#E5E5E5"> I want to produce</font><font color="#CCCCCC"> Fame</font>

640
00:30:59,280 --> 00:31:05,340
and I want it to be correct<font color="#CCCCCC"> but not too</font>

641
00:31:03,059 --> 00:31:07,320
much correct it doesn't<font color="#E5E5E5"> care I</font><font color="#CCCCCC"> don't</font>

642
00:31:05,340 --> 00:31:09,720
<font color="#E5E5E5">care if I'm not</font><font color="#CCCCCC"> supporting this sub</font>

643
00:31:07,320 --> 00:31:12,030
feature because maybe<font color="#CCCCCC"> someone will</font>

644
00:31:09,720 --> 00:31:14,010
notice<font color="#E5E5E5"> that there is an issue and raise</font>

645
00:31:12,030 --> 00:31:16,649
an<font color="#E5E5E5"> issue and then I will redevelop that</font>

646
00:31:14,010 --> 00:31:20,070
<font color="#CCCCCC">way it's okay to do</font><font color="#E5E5E5"> that because it's</font>

647
00:31:16,650 --> 00:31:24,230
<font color="#E5E5E5">your free time and we switched from this</font>

648
00:31:20,070 --> 00:31:29,059
very harsh review to still review but

649
00:31:24,230 --> 00:31:33,480
<font color="#CCCCCC">later</font><font color="#E5E5E5"> review and now it's healthier</font><font color="#CCCCCC"> and</font>

650
00:31:29,059 --> 00:31:34,320
I don't have a Twitter<font color="#CCCCCC"> account</font><font color="#E5E5E5"> or trying</font>

651
00:31:33,480 --> 00:31:37,740
to<font color="#CCCCCC"> advertise a lot</font>

652
00:31:34,320 --> 00:31:41,010
<font color="#E5E5E5">just doing my pace doing it at my pace</font>

653
00:31:37,740 --> 00:31:46,230
and some people tend to<font color="#CCCCCC"> use it even</font><font color="#E5E5E5"> if</font>

654
00:31:41,010 --> 00:31:48,629
I'm not advertising<font color="#CCCCCC"> that much so as I'm</font>

655
00:31:46,230 --> 00:31:53,210
<font color="#E5E5E5">not making a living on</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's okay</font>

656
00:31:48,630 --> 00:31:53,210
<font color="#E5E5E5">and I'm probably happier like that</font>

657
00:31:54,040 --> 00:32:01,629
happier but I still want more<font color="#CCCCCC"> I have a</font>

658
00:31:57,670 --> 00:32:05,440
funding to have patron being a piece of

659
00:32:01,630 --> 00:32:08,410
<font color="#E5E5E5">Sai</font><font color="#CCCCCC"> pie</font><font color="#E5E5E5"> or a piece of sage which is a</font>

660
00:32:05,440 --> 00:32:13,150
good thing<font color="#CCCCCC"> for the project</font><font color="#E5E5E5"> because it's</font>

661
00:32:08,410 --> 00:32:16,720
bigger<font color="#CCCCCC"> canals so it meets the limits of</font>

662
00:32:13,150 --> 00:32:19,060
patron<font color="#E5E5E5"> and I also get</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> bits a new</font>

663
00:32:16,720 --> 00:32:21,040
community and the<font color="#E5E5E5"> site by community was</font>

664
00:32:19,060 --> 00:32:25,450
<font color="#E5E5E5">very welcoming and I really appreciated</font>

665
00:32:21,040 --> 00:32:27,100
<font color="#CCCCCC">that but they</font><font color="#E5E5E5"> were also they also had a</font>

666
00:32:25,450 --> 00:32:31,480
lot of<font color="#CCCCCC"> requirements they say</font><font color="#E5E5E5"> okay</font>

667
00:32:27,100 --> 00:32:33,310
why<font color="#E5E5E5"> not - probably not but</font><font color="#CCCCCC"> why not but</font>

668
00:32:31,480 --> 00:32:36,790
first you<font color="#E5E5E5"> have to</font><font color="#CCCCCC"> support</font><font color="#E5E5E5"> our six</font>

669
00:32:33,310 --> 00:32:38,649
<font color="#CCCCCC">Windows and Linux okay and then what is</font>

670
00:32:36,790 --> 00:32:40,629
the size<font color="#E5E5E5"> of the binaries</font><font color="#CCCCCC"> you will</font>

671
00:32:38,650 --> 00:32:44,650
generate<font color="#E5E5E5"> because we have</font><font color="#CCCCCC"> requirements</font><font color="#E5E5E5"> on</font>

672
00:32:40,630 --> 00:32:48,700
that<font color="#CCCCCC"> ok C++ know the size is</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

673
00:32:44,650 --> 00:32:51,610
huge<font color="#E5E5E5"> and are there are lots of</font>

674
00:32:48,700 --> 00:32:55,060
contributor<font color="#CCCCCC"> ok no</font><font color="#E5E5E5"> that's not the case</font>

675
00:32:51,610 --> 00:32:57,159
<font color="#E5E5E5">but till now the binary generated by</font>

676
00:32:55,060 --> 00:33:00,730
patron are very slim<font color="#CCCCCC"> because there is</font>

677
00:32:57,160 --> 00:33:03,520
when<font color="#CCCCCC"> you don't focus on on the</font><font color="#E5E5E5"> field and</font>

678
00:33:00,730 --> 00:33:05,770
then<font color="#CCCCCC"> you people</font><font color="#E5E5E5"> tell you</font>

679
00:33:03,520 --> 00:33:08,639
please optimize<font color="#E5E5E5"> that there is a lot of</font>

680
00:33:05,770 --> 00:33:10,840
<font color="#CCCCCC">low-hanging fruit</font><font color="#E5E5E5"> so I have a blog post</font>

681
00:33:08,640 --> 00:33:15,310
<font color="#E5E5E5">later on you could click on</font><font color="#CCCCCC"> that and</font>

682
00:33:10,840 --> 00:33:18,669
that<font color="#CCCCCC"> explains how I made my binaries ten</font>

683
00:33:15,310 --> 00:33:21,010
times<font color="#CCCCCC"> - 20 times smaller</font><font color="#E5E5E5"> just by using</font>

684
00:33:18,670 --> 00:33:24,790
the compiler<font color="#E5E5E5"> the right way using C++ the</font>

685
00:33:21,010 --> 00:33:27,460
right way<font color="#CCCCCC"> windows support</font><font color="#E5E5E5"> as long as you</font>

686
00:33:24,790 --> 00:33:30,639
stick to Python 3<font color="#E5E5E5"> it's not that</font>

687
00:33:27,460 --> 00:33:33,570
difficult project maturity is going to

688
00:33:30,640 --> 00:33:33,570
be difficult<font color="#CCCCCC"> but</font>

689
00:33:38,109 --> 00:33:47,928
<font color="#E5E5E5">just to showcase or to express my my</font>

690
00:33:42,950 --> 00:33:50,200
feelings<font color="#CCCCCC"> six years</font><font color="#E5E5E5"> ago I was hired at</font>

691
00:33:47,929 --> 00:33:53,299
<font color="#CCCCCC">the company and they wanted to start</font>

692
00:33:50,200 --> 00:33:55,759
compiling Python<font color="#E5E5E5"> projects but then I was</font>

693
00:33:53,299 --> 00:33:59,440
living<font color="#E5E5E5"> it and they told</font><font color="#CCCCCC"> ok you're living</font>

694
00:33:55,759 --> 00:34:02,570
well instead<font color="#E5E5E5"> of doing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> on our</font><font color="#CCCCCC"> own</font>

695
00:33:59,440 --> 00:34:04,669
<font color="#E5E5E5">you can do that on as an</font><font color="#CCCCCC"> open-source</font>

696
00:34:02,570 --> 00:34:07,849
<font color="#CCCCCC">software and we will pay you</font><font color="#E5E5E5"> for that</font>

697
00:34:04,669 --> 00:34:09,679
<font color="#CCCCCC">because we already have a grant and the</font>

698
00:34:07,849 --> 00:34:11,538
job<font color="#E5E5E5"> will be</font><font color="#CCCCCC"> done</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> ok that was</font>

699
00:34:09,679 --> 00:34:14,599
a very<font color="#CCCCCC"> good idea very</font><font color="#E5E5E5"> nice from them and</font>

700
00:34:11,539 --> 00:34:17,109
then there is an<font color="#CCCCCC"> European grant from</font>

701
00:34:14,599 --> 00:34:22,579
open<font color="#CCCCCC"> gym kids for improving patron</font>

702
00:34:17,109 --> 00:34:26,418
improving it's used to I regularly<font color="#E5E5E5"> give</font>

703
00:34:22,579 --> 00:34:30,579
teaching lessons about<font color="#E5E5E5"> numeric Python</font>

704
00:34:26,418 --> 00:34:34,308
<font color="#E5E5E5">into</font><font color="#CCCCCC"> gob calculon contents and I</font>

705
00:34:30,579 --> 00:34:36,589
appreciate<font color="#CCCCCC"> their help and I try to be</font>

706
00:34:34,309 --> 00:34:37,490
<font color="#CCCCCC">active in</font><font color="#E5E5E5"> the French community on Linux</font>

707
00:34:36,589 --> 00:34:40,069
affair

708
00:34:37,489 --> 00:34:44,299
they are very<font color="#E5E5E5"> friendly and well that I</font>

709
00:34:40,069 --> 00:34:48,319
just<font color="#CCCCCC"> enjoy writing it helped me</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> my</font>

710
00:34:44,299 --> 00:34:51,460
mind<font color="#E5E5E5"> more clear and if also some people</font>

711
00:34:48,319 --> 00:34:54,109
tends to enjoy reading it<font color="#E5E5E5"> so it's</font><font color="#CCCCCC"> ok and</font>

712
00:34:51,460 --> 00:34:57,230
sometimes very<font color="#E5E5E5"> strange</font><font color="#CCCCCC"> things but very</font>

713
00:34:54,109 --> 00:35:01,730
happened<font color="#CCCCCC"> I</font><font color="#E5E5E5"> received this is that</font><font color="#CCCCCC"> may so</font>

714
00:34:57,230 --> 00:35:02,720
<font color="#E5E5E5">that was 2 years</font><font color="#CCCCCC"> ago</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> ok hi</font>

715
00:35:01,730 --> 00:35:06,440
you don't<font color="#E5E5E5"> know me</font>

716
00:35:02,720 --> 00:35:08,808
<font color="#CCCCCC">I read your</font><font color="#E5E5E5"> PhD thesis when someone told</font>

717
00:35:06,440 --> 00:35:13,520
you I read your<font color="#E5E5E5"> page it ages that</font>

718
00:35:08,809 --> 00:35:15,740
strange very strange<font color="#E5E5E5"> but they</font>

719
00:35:13,520 --> 00:35:17,690
investigated my work and they say the

720
00:35:15,740 --> 00:35:20,629
thing you've been<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> Python it's</font>

721
00:35:17,690 --> 00:35:23,539
nice I think<font color="#CCCCCC"> you have ideas that can</font><font color="#E5E5E5"> be</font>

722
00:35:20,630 --> 00:35:27,319
helpful helpful to us and then<font color="#CCCCCC"> we</font><font color="#E5E5E5"> work</font>

723
00:35:23,539 --> 00:35:30,880
together for one year that's<font color="#E5E5E5"> the cool I</font>

724
00:35:27,319 --> 00:35:34,910
mean that was<font color="#E5E5E5"> completely unexpected</font><font color="#CCCCCC"> but</font>

725
00:35:30,880 --> 00:35:37,579
<font color="#CCCCCC">just saying thank you</font><font color="#E5E5E5"> was nice but do</font>

726
00:35:34,910 --> 00:35:40,190
going<font color="#E5E5E5"> that way was very</font><font color="#CCCCCC"> nice</font><font color="#E5E5E5"> and last</font>

727
00:35:37,579 --> 00:35:42,680
<font color="#CCCCCC">December</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> someone from Google</font>

728
00:35:40,190 --> 00:35:45,049
<font color="#E5E5E5">brain so just send me an email saying</font>

729
00:35:42,680 --> 00:35:46,859
<font color="#E5E5E5">okay we are using</font><font color="#CCCCCC"> guests your</font><font color="#E5E5E5"> Python to</font>

730
00:35:45,049 --> 00:35:50,009
Python 3 layer

731
00:35:46,860 --> 00:35:54,570
<font color="#E5E5E5">it works it</font><font color="#CCCCCC"> just works we're</font><font color="#E5E5E5"> happy thank</font>

732
00:35:50,010 --> 00:35:57,450
you and well that's<font color="#E5E5E5"> great</font><font color="#CCCCCC"> already</font><font color="#E5E5E5"> that's</font>

733
00:35:54,570 --> 00:36:00,810
<font color="#CCCCCC">the</font><font color="#E5E5E5"> best thing you can expect so that's</font>

734
00:35:57,450 --> 00:36:02,520
my<font color="#CCCCCC"> little story use patron if you like</font>

735
00:36:00,810 --> 00:36:05,400
to contribute to open source because

736
00:36:02,520 --> 00:36:08,509
<font color="#CCCCCC">it's fun and if you have any question we</font>

737
00:36:05,400 --> 00:36:08,510
have<font color="#CCCCCC"> 10</font><font color="#E5E5E5"> minutes or so</font>

738
00:36:12,110 --> 00:36:17,140
[Applause]

739
00:36:30,060 --> 00:36:36,240
<font color="#E5E5E5">okay a very</font><font color="#CCCCCC"> nice talk by the</font><font color="#E5E5E5"> way</font>

740
00:36:33,030 --> 00:36:41,400
I really<font color="#E5E5E5"> enjoy it</font><font color="#CCCCCC"> I would like</font><font color="#E5E5E5"> to know</font>

741
00:36:36,240 --> 00:36:44,399
since you are using<font color="#CCCCCC"> a lump I do you rely</font>

742
00:36:41,400 --> 00:36:47,790
<font color="#CCCCCC">on blah so lapack implementation no is</font>

743
00:36:44,400 --> 00:36:52,650
it pure<font color="#E5E5E5"> C++ implementation</font><font color="#CCCCCC"> no we are not</font>

744
00:36:47,790 --> 00:36:55,410
<font color="#E5E5E5">that mad for all the dots operation we</font>

745
00:36:52,650 --> 00:36:59,910
are<font color="#E5E5E5"> falling back to the</font><font color="#CCCCCC"> blasts what we</font>

746
00:36:55,410 --> 00:37:03,029
can do that<font color="#CCCCCC"> nope I can't do is the</font><font color="#E5E5E5"> blast</font>

747
00:36:59,910 --> 00:37:05,700
<font color="#E5E5E5">API is not only about matrix multiply so</font>

748
00:37:03,030 --> 00:37:08,640
<font color="#E5E5E5">we match patterns and we say</font><font color="#CCCCCC"> ok these</font>

749
00:37:05,700 --> 00:37:14,480
patterns is implemented in Blas<font color="#E5E5E5"> so we</font>

750
00:37:08,640 --> 00:37:17,879
generate the<font color="#E5E5E5"> right call so and we just</font>

751
00:37:14,480 --> 00:37:20,970
we can use blasts or open blasts as<font color="#CCCCCC"> a</font>

752
00:37:17,880 --> 00:37:26,660
<font color="#CCCCCC">back-end</font><font color="#E5E5E5"> I never tried with</font><font color="#CCCCCC"> mkl but that</font>

753
00:37:20,970 --> 00:37:26,660
I<font color="#CCCCCC"> am a</font><font color="#E5E5E5"> question</font><font color="#CCCCCC"> ok thank you</font>

754
00:37:37,490 --> 00:37:42,589
<font color="#E5E5E5">hey thanks</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the great talk I was</font>

755
00:37:40,640 --> 00:37:44,270
wondering how does Python compared to

756
00:37:42,590 --> 00:37:48,350
number<font color="#CCCCCC"> insight in</font><font color="#E5E5E5"> in terms of</font>

757
00:37:44,270 --> 00:37:49,850
performance<font color="#CCCCCC"> so the question was what</font>

758
00:37:48,350 --> 00:37:53,330
about<font color="#CCCCCC"> performance</font><font color="#E5E5E5"> I didn't show any</font>

759
00:37:49,850 --> 00:37:57,200
benchmarks here<font color="#E5E5E5"> because I want to make</font>

760
00:37:53,330 --> 00:38:01,460
friends<font color="#CCCCCC"> hopeless basically it depends so</font>

761
00:37:57,200 --> 00:38:04,220
<font color="#CCCCCC">for first new message it so there is a</font>

762
00:38:01,460 --> 00:38:06,920
JIT computation time<font color="#E5E5E5"> it's cached but it</font>

763
00:38:04,220 --> 00:38:12,709
depends on the<font color="#E5E5E5"> usage so I will speak</font>

764
00:38:06,920 --> 00:38:14,360
about<font color="#E5E5E5"> Python</font><font color="#CCCCCC"> - limba</font><font color="#E5E5E5"> and patron</font><font color="#CCCCCC"> there</font>

765
00:38:12,710 --> 00:38:16,940
are a lot of<font color="#E5E5E5"> channels</font><font color="#CCCCCC"> that patrons</font>

766
00:38:14,360 --> 00:38:19,040
reports that are not<font color="#E5E5E5"> supported as is by</font>

767
00:38:16,940 --> 00:38:23,570
<font color="#E5E5E5">name bar or - because you have to expand</font>

768
00:38:19,040 --> 00:38:27,710
<font color="#E5E5E5">the loop and in that case we generally</font>

769
00:38:23,570 --> 00:38:31,130
match the nimble performance<font color="#CCCCCC"> syphon is</font>

770
00:38:27,710 --> 00:38:35,210
generally a goal<font color="#E5E5E5"> so we try to be as fast</font>

771
00:38:31,130 --> 00:38:39,380
as<font color="#CCCCCC"> syphon generated code while keeping a</font>

772
00:38:35,210 --> 00:38:43,210
<font color="#CCCCCC">higher level input language for input</font>

773
00:38:39,380 --> 00:38:46,460
and<font color="#CCCCCC"> without any annotations sometimes</font>

774
00:38:43,210 --> 00:38:49,250
<font color="#E5E5E5">Nimba is faster</font><font color="#CCCCCC"> sometimes a siphon is</font>

775
00:38:46,460 --> 00:38:52,190
faster<font color="#CCCCCC"> some time Python is faster</font><font color="#E5E5E5"> one</font>

776
00:38:49,250 --> 00:38:54,830
place where we<font color="#CCCCCC"> shine is when you have</font>

777
00:38:52,190 --> 00:38:58,160
<font color="#CCCCCC">font instance</font><font color="#E5E5E5"> it was at the beginning I</font>

778
00:38:54,830 --> 00:39:00,650
can<font color="#E5E5E5"> go back to</font><font color="#CCCCCC"> that this function the</font>

779
00:38:58,160 --> 00:39:03,020
Rosen Brock function we are<font color="#E5E5E5"> especially</font>

780
00:39:00,650 --> 00:39:05,630
<font color="#E5E5E5">fast and</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> because we know how to</font>

781
00:39:03,020 --> 00:39:11,330
generate<font color="#CCCCCC"> a DX</font><font color="#E5E5E5"> instruction for this</font>

782
00:39:05,630 --> 00:39:14,240
channel and<font color="#E5E5E5"> siphon relies on</font><font color="#CCCCCC"> GCC or</font>

783
00:39:11,330 --> 00:39:17,000
clang to generate these instructions but

784
00:39:14,240 --> 00:39:21,729
it's too late because of<font color="#E5E5E5"> aliasing or so</font>

785
00:39:17,000 --> 00:39:24,470
it's not as efficient<font color="#E5E5E5"> as manually</font>

786
00:39:21,730 --> 00:39:26,150
generated patterns because<font color="#E5E5E5"> it's form a</font>

787
00:39:24,470 --> 00:39:28,490
compiler point of view it's a difficult

788
00:39:26,150 --> 00:39:30,950
<font color="#E5E5E5">task that's difficult now but still</font>

789
00:39:28,490 --> 00:39:31,879
difficult<font color="#E5E5E5"> to generate good</font><font color="#CCCCCC"> vectorized</font>

790
00:39:30,950 --> 00:39:36,759
code

791
00:39:31,880 --> 00:39:40,720
I am<font color="#E5E5E5"> no but not for</font><font color="#CCCCCC"> sure that</font><font color="#E5E5E5"> Nimba as</font>

792
00:39:36,760 --> 00:39:43,300
<font color="#CCCCCC">a decorator</font><font color="#E5E5E5"> to annotate you funks I'm</font>

793
00:39:40,720 --> 00:39:44,950
<font color="#E5E5E5">pretty sure that they don't match</font><font color="#CCCCCC"> by</font>

794
00:39:43,300 --> 00:39:51,820
<font color="#CCCCCC">drum performance</font><font color="#E5E5E5"> for that kind of of</font>

795
00:39:44,950 --> 00:39:55,410
kennels then on some situation for

796
00:39:51,820 --> 00:39:55,410
instance<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> gray</font><font color="#E5E5E5"> Scott</font>

797
00:40:00,130 --> 00:40:06,280
for<font color="#E5E5E5"> this</font><font color="#CCCCCC"> canal siphon is still slightly</font>

798
00:40:03,160 --> 00:40:09,819
faster<font color="#E5E5E5"> than patron but there is a lot</font><font color="#CCCCCC"> of</font>

799
00:40:06,280 --> 00:40:12,630
work<font color="#E5E5E5"> to to match the lower level</font>

800
00:40:09,820 --> 00:40:15,910
interface<font color="#E5E5E5"> with</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> interface</font>

801
00:40:12,630 --> 00:40:18,250
Nimbus<font color="#CCCCCC"> reports classes the iPhone does</font>

802
00:40:15,910 --> 00:40:19,839
<font color="#CCCCCC">support classes</font><font color="#E5E5E5"> by John does not because</font>

803
00:40:18,250 --> 00:40:21,340
in<font color="#CCCCCC"> Fortran there is join like Fortran</font>

804
00:40:19,840 --> 00:40:26,590
<font color="#E5E5E5">and there is no class in Fortran so</font>

805
00:40:21,340 --> 00:40:28,510
that's that's okay<font color="#CCCCCC"> and it's not a big</font>

806
00:40:26,590 --> 00:40:30,250
deal<font color="#E5E5E5"> but some some</font><font color="#CCCCCC"> canals I can't</font>

807
00:40:28,510 --> 00:40:33,220
compare to<font color="#E5E5E5"> them because we</font><font color="#CCCCCC"> don't support</font>

808
00:40:30,250 --> 00:40:37,990
the same input basically<font color="#CCCCCC"> that's the idea</font>

809
00:40:33,220 --> 00:40:39,759
<font color="#E5E5E5">we</font><font color="#CCCCCC"> all go the same way the</font><font color="#E5E5E5"> better GE the</font>

810
00:40:37,990 --> 00:40:43,359
single thing<font color="#E5E5E5"> Python has that the</font><font color="#CCCCCC"> other</font>

811
00:40:39,760 --> 00:40:46,690
don't<font color="#E5E5E5"> have is a native vector</font>

812
00:40:43,360 --> 00:40:50,320
instruction support<font color="#E5E5E5"> and in some</font>

813
00:40:46,690 --> 00:40:52,960
situation compiler optimization I didn't

814
00:40:50,320 --> 00:40:57,100
speak<font color="#E5E5E5"> about that</font><font color="#CCCCCC"> too</font><font color="#E5E5E5"> much</font><font color="#CCCCCC"> that much but</font>

815
00:40:52,960 --> 00:41:00,310
I have a blog post<font color="#CCCCCC"> on that the modulo</font>

816
00:40:57,100 --> 00:41:03,310
operation is not optimized by GCC<font color="#CCCCCC"> or</font>

817
00:41:00,310 --> 00:41:05,860
crying or and if it's not optimized by

818
00:41:03,310 --> 00:41:12,279
<font color="#CCCCCC">clang it's</font><font color="#E5E5E5"> not optimized by</font><font color="#CCCCCC"> LLVM in fact</font>

819
00:41:05,860 --> 00:41:14,440
<font color="#E5E5E5">and so no neither</font><font color="#CCCCCC"> syphon nor</font><font color="#E5E5E5"> Nimba took</font>

820
00:41:12,280 --> 00:41:16,990
advantage of the optimization we

821
00:41:14,440 --> 00:41:19,660
developed in<font color="#CCCCCC"> python</font><font color="#E5E5E5"> so in that specific</font>

822
00:41:16,990 --> 00:41:25,169
<font color="#E5E5E5">case we are faster</font><font color="#CCCCCC"> because we</font><font color="#E5E5E5"> have</font>

823
00:41:19,660 --> 00:41:25,170
<font color="#CCCCCC">Python</font><font color="#E5E5E5"> specific optimization thank you</font>

824
00:41:34,220 --> 00:41:40,669
I have a question<font color="#CCCCCC"> about dependencies in</font>

825
00:41:36,590 --> 00:41:43,280
<font color="#CCCCCC">a generated C++ code what does</font><font color="#E5E5E5"> VCC or</font>

826
00:41:40,670 --> 00:41:45,920
<font color="#E5E5E5">clonk compiler depend on you mentioned</font>

827
00:41:43,280 --> 00:41:48,500
<font color="#E5E5E5">some algebra library</font><font color="#CCCCCC"> blasts</font><font color="#E5E5E5"> I suppose</font>

828
00:41:45,920 --> 00:41:50,360
and probably standard library is there

829
00:41:48,500 --> 00:41:54,850
something else<font color="#E5E5E5"> you need to</font><font color="#CCCCCC"> have to able</font>

830
00:41:50,360 --> 00:41:58,100
<font color="#CCCCCC">to</font><font color="#E5E5E5"> compile currently we depend on the</font>

831
00:41:54,850 --> 00:41:59,839
standard library for<font color="#E5E5E5"> all the random</font>

832
00:41:58,100 --> 00:42:01,970
<font color="#CCCCCC">stuff for instance</font><font color="#E5E5E5"> for a vector</font>

833
00:41:59,840 --> 00:42:06,080
<font color="#E5E5E5">implementation we did not</font><font color="#CCCCCC"> really man</font>

834
00:42:01,970 --> 00:42:10,100
that we depend<font color="#CCCCCC"> on</font><font color="#E5E5E5"> on blasts for the</font>

835
00:42:06,080 --> 00:42:12,860
<font color="#E5E5E5">linear</font><font color="#CCCCCC"> algebra</font><font color="#E5E5E5"> and that's all and we</font>

836
00:42:10,100 --> 00:42:15,860
depend on<font color="#CCCCCC"> guste</font><font color="#E5E5E5"> CMD for an abstraction</font>

837
00:42:12,860 --> 00:42:17,600
layer<font color="#CCCCCC"> for vector instruction</font><font color="#E5E5E5"> but it's</font>

838
00:42:15,860 --> 00:42:20,470
shipped with<font color="#E5E5E5"> patrons so you don't need</font>

839
00:42:17,600 --> 00:42:22,819
to<font color="#E5E5E5"> install it if you're concerned about</font>

840
00:42:20,470 --> 00:42:24,200
dependency when I install my<font color="#CCCCCC"> code</font><font color="#E5E5E5"> then</font>

841
00:42:22,820 --> 00:42:26,360
<font color="#CCCCCC">you just need modern</font>

842
00:42:24,200 --> 00:42:27,830
<font color="#CCCCCC">zipless boost infrastructure and that's</font>

843
00:42:26,360 --> 00:42:30,130
<font color="#CCCCCC">okay plus the blast</font><font color="#E5E5E5"> but you have them</font>

844
00:42:27,830 --> 00:42:39,049
<font color="#E5E5E5">because you have to</font><font color="#CCCCCC"> Mumbai installed</font>

845
00:42:30,130 --> 00:42:41,880
<font color="#E5E5E5">probably not 100% sure and that's it</font>

846
00:42:39,050 --> 00:42:45,870
I'd like to ask<font color="#E5E5E5"> about</font>

847
00:42:41,880 --> 00:42:49,020
do<font color="#CCCCCC"> use as</font><font color="#E5E5E5"> imd instructions inside C++</font>

848
00:42:45,870 --> 00:42:51,600
code<font color="#CCCCCC"> do use intrinsics compiler increase</font>

849
00:42:49,020 --> 00:42:55,230
in not entry<font color="#E5E5E5"> 6 because of</font><font color="#CCCCCC"> boosted SMD</font>

850
00:42:51,600 --> 00:42:58,319
which provides an<font color="#CCCCCC"> targets independent</font>

851
00:42:55,230 --> 00:43:01,590
abstraction layer<font color="#E5E5E5"> you manipulate vector</font>

852
00:42:58,320 --> 00:43:06,120
data and it just generates the right

853
00:43:01,590 --> 00:43:12,780
<font color="#E5E5E5">entry 6d pending on current platform not</font>

854
00:43:06,120 --> 00:43:16,560
for all platforms but x86 is<font color="#CCCCCC"> okay arm is</font>

855
00:43:12,780 --> 00:43:21,710
probably ok<font color="#CCCCCC"> but not latest instructions</font>

856
00:43:16,560 --> 00:43:21,710
<font color="#E5E5E5">I'm not 100% sure thank you</font>

857
00:43:25,210 --> 00:43:31,270
<font color="#CCCCCC">Thanks very interesting I have a</font>

858
00:43:29,200 --> 00:43:33,839
question about<font color="#E5E5E5"> array operations and an</font>

859
00:43:31,270 --> 00:43:36,700
umpire<font color="#E5E5E5"> so one of the performance killers</font>

860
00:43:33,839 --> 00:43:40,480
<font color="#CCCCCC">when it comes to our operations</font><font color="#E5E5E5"> is out</font>

861
00:43:36,700 --> 00:43:43,390
the creation of temporaries just<font color="#CCCCCC"> right</font>

862
00:43:40,480 --> 00:43:45,010
<font color="#E5E5E5">arithmetic</font><font color="#CCCCCC"> sonar eyes</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> you know if I</font>

863
00:43:43,390 --> 00:43:47,290
understand<font color="#E5E5E5"> correctly the question is</font>

864
00:43:45,010 --> 00:43:49,660
when<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> kind of expression</font>

865
00:43:47,290 --> 00:43:52,808
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> a big array</font><font color="#CCCCCC"> expression the last</font>

866
00:43:49,660 --> 00:43:54,940
one the last<font color="#E5E5E5"> assignment</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> Mumbai when</font>

867
00:43:52,809 --> 00:43:59,680
you do<font color="#E5E5E5"> that there is a temporary</font><font color="#CCCCCC"> array</font>

868
00:43:54,940 --> 00:44:02,680
<font color="#E5E5E5">that is created for each node</font><font color="#CCCCCC"> in the</font>

869
00:43:59,680 --> 00:44:05,890
expression<font color="#E5E5E5"> and that's a doubled source</font>

870
00:44:02,680 --> 00:44:08,649
of so down the first source is<font color="#E5E5E5"> from</font>

871
00:44:05,890 --> 00:44:10,359
memory locality perspective<font color="#E5E5E5"> it's not</font>

872
00:44:08,650 --> 00:44:12,640
good because you're allocating new

873
00:44:10,359 --> 00:44:14,290
<font color="#E5E5E5">memory and writing to it so it that are</font>

874
00:44:12,640 --> 00:44:17,440
not<font color="#CCCCCC"> in the cache</font><font color="#E5E5E5"> because they are</font>

875
00:44:14,290 --> 00:44:24,550
created<font color="#CCCCCC"> to</font><font color="#E5E5E5"> hold</font><font color="#CCCCCC"> a new</font><font color="#E5E5E5"> value and it's</font>

876
00:44:17,440 --> 00:44:26,500
also bad from Lu pressure point of view

877
00:44:24,550 --> 00:44:28,089
because<font color="#E5E5E5"> there is a loop for that</font>

878
00:44:26,500 --> 00:44:31,510
operation<font color="#CCCCCC"> and a loop for</font><font color="#E5E5E5"> this one and</font><font color="#CCCCCC"> a</font>

879
00:44:28,089 --> 00:44:33,970
loop for this one<font color="#E5E5E5"> so there is a lot</font><font color="#CCCCCC"> of</font>

880
00:44:31,510 --> 00:44:38,650
loops<font color="#E5E5E5"> and not good memory locality and</font>

881
00:44:33,970 --> 00:44:41,709
the<font color="#CCCCCC"> usual way to to catch this pattern</font>

882
00:44:38,650 --> 00:44:44,829
in C++<font color="#CCCCCC"> is to use expression templates so</font>

883
00:44:41,710 --> 00:44:47,410
that<font color="#E5E5E5"> basically you delay the variation</font>

884
00:44:44,829 --> 00:44:50,790
of the<font color="#E5E5E5"> expression until its assignment</font>

885
00:44:47,410 --> 00:44:55,529
<font color="#E5E5E5">and that's what we do so</font><font color="#CCCCCC"> we have</font>

886
00:44:50,790 --> 00:44:57,579
expression templates<font color="#E5E5E5"> and we also but</font><font color="#CCCCCC"> I</font>

887
00:44:55,530 --> 00:45:01,210
<font color="#E5E5E5">think this kind of</font><font color="#CCCCCC"> expression is</font>

888
00:44:57,579 --> 00:45:04,270
relatively easy the<font color="#CCCCCC"> Rosen one would be</font>

889
00:45:01,210 --> 00:45:07,299
<font color="#E5E5E5">more tricky what the Rosen example would</font>

890
00:45:04,270 --> 00:45:12,190
<font color="#CCCCCC">be more</font><font color="#E5E5E5"> try the Rosen was relatively</font>

891
00:45:07,299 --> 00:45:14,859
<font color="#E5E5E5">okay this one is</font><font color="#CCCCCC"> difficult because you</font>

892
00:45:12,190 --> 00:45:18,270
and a capital u and<font color="#E5E5E5"> capital V are views</font>

893
00:45:14,859 --> 00:45:18,270
on other array

894
00:45:18,860 --> 00:45:27,950
here<font color="#E5E5E5"> no lowercase</font><font color="#CCCCCC"> u and V are view on</font>

895
00:45:24,970 --> 00:45:29,419
upper case U and V so<font color="#CCCCCC"> you have an</font>

896
00:45:27,950 --> 00:45:32,240
<font color="#E5E5E5">expression that</font><font color="#CCCCCC"> creates the view and</font>

897
00:45:29,420 --> 00:45:36,470
then<font color="#CCCCCC"> you use this view</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> just here</font>

898
00:45:32,240 --> 00:45:40,810
and you<font color="#E5E5E5"> update the contents of capital u</font>

899
00:45:36,470 --> 00:45:43,970
through the view of smaller case u and

900
00:45:40,810 --> 00:45:48,380
doing that<font color="#E5E5E5"> using expression templates is</font>

901
00:45:43,970 --> 00:45:50,419
tricky<font color="#E5E5E5"> but it's also a big way to learn</font>

902
00:45:48,380 --> 00:45:54,350
that you have move semantics also for

903
00:45:50,420 --> 00:45:55,940
member functions in c++<font color="#CCCCCC"> there</font><font color="#E5E5E5"> is a lot</font>

904
00:45:54,350 --> 00:45:58,580
<font color="#E5E5E5">of things to learn when you want to</font>

905
00:45:55,940 --> 00:46:02,060
<font color="#E5E5E5">optimize this</font><font color="#CCCCCC"> I'm not</font><font color="#E5E5E5"> saying</font><font color="#CCCCCC"> that the</font>

906
00:45:58,580 --> 00:46:04,640
beautifulest code<font color="#CCCCCC"> I ever wrote but it</font>

907
00:46:02,060 --> 00:46:09,650
turns<font color="#E5E5E5"> out to work</font><font color="#CCCCCC"> is already</font><font color="#E5E5E5"> a good</font>

908
00:46:04,640 --> 00:46:12,370
thing that's that's<font color="#E5E5E5"> a difficult</font><font color="#CCCCCC"> part</font>

909
00:46:09,650 --> 00:46:12,370
<font color="#CCCCCC">Thanks</font>

910
00:46:27,240 --> 00:46:31,729
okay<font color="#CCCCCC"> no question so let me thank you</font>

911
00:46:29,369 --> 00:46:37,139
<font color="#CCCCCC">again and have a nice weekend</font>

912
00:46:31,730 --> 00:46:37,139
[Applause]

