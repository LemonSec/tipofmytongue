1
00:00:07,140 --> 00:00:13,510
thanks Francesca<font color="#E5E5E5"> um so hi my name</font><font color="#CCCCCC"> is</font>

2
00:00:10,330 --> 00:00:15,610
<font color="#E5E5E5">Matt Bostick</font><font color="#CCCCCC"> I am a</font><font color="#E5E5E5"> platform engineer</font>

3
00:00:13,510 --> 00:00:17,020
working for cloud<font color="#E5E5E5"> fair in London I'm</font>

4
00:00:15,610 --> 00:00:19,930
<font color="#E5E5E5">interested in distributed systems</font><font color="#CCCCCC"> in</font>

5
00:00:17,020 --> 00:00:21,460
performance<font color="#E5E5E5"> and until September I was</font>

6
00:00:19,930 --> 00:00:23,369
studying a master's in computer science

7
00:00:21,460 --> 00:00:26,349
<font color="#E5E5E5">at night school for the</font><font color="#CCCCCC"> last two years</font>

8
00:00:23,369 --> 00:00:27,790
<font color="#CCCCCC">which was hard but super interesting so</font>

9
00:00:26,349 --> 00:00:29,169
today I want to<font color="#E5E5E5"> talk to you about</font>

10
00:00:27,790 --> 00:00:31,270
<font color="#E5E5E5">building and designing a distributed</font>

11
00:00:29,169 --> 00:00:36,310
datastore which I did as part<font color="#E5E5E5"> of my</font>

12
00:00:31,270 --> 00:00:38,170
<font color="#CCCCCC">Master's final project so this</font><font color="#E5E5E5"> won't be</font>

13
00:00:36,310 --> 00:00:39,940
a talk about stuff I'm<font color="#CCCCCC"> working on at</font>

14
00:00:38,170 --> 00:00:42,179
work it's<font color="#CCCCCC"> really a personal project I'm</font>

15
00:00:39,940 --> 00:00:44,079
the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> project is called timbala</font>

16
00:00:42,179 --> 00:00:46,090
<font color="#E5E5E5">that's the logo</font><font color="#CCCCCC"> that's actually the</font>

17
00:00:44,079 --> 00:00:49,179
second logo because logos are important

18
00:00:46,090 --> 00:00:50,649
and it<font color="#E5E5E5"> was original Athens</font><font color="#CCCCCC"> TV so if you</font>

19
00:00:49,179 --> 00:00:53,350
see references to<font color="#E5E5E5"> Athens</font><font color="#CCCCCC"> dB</font>

20
00:00:50,649 --> 00:00:56,769
that's why and so<font color="#E5E5E5"> Tim</font><font color="#CCCCCC"> Bala</font><font color="#E5E5E5"> is a</font>

21
00:00:53,350 --> 00:00:59,410
distributed<font color="#E5E5E5"> time series database or will</font>

22
00:00:56,769 --> 00:01:01,960
would be<font color="#CCCCCC"> if it was finished did</font><font color="#E5E5E5"> she beat</font>

23
00:00:59,410 --> 00:01:03,459
the<font color="#CCCCCC"> system</font><font color="#E5E5E5"> is a huge</font><font color="#CCCCCC"> topic I won't be</font>

24
00:01:01,960 --> 00:01:04,570
able<font color="#E5E5E5"> to explain everything during this</font>

25
00:01:03,460 --> 00:01:05,340
talk but hopefully you'll be<font color="#E5E5E5"> able to</font>

26
00:01:04,569 --> 00:01:08,949
take something<font color="#E5E5E5"> away</font>

27
00:01:05,340 --> 00:01:10,390
<font color="#CCCCCC">subscribe to broad torque and I'm gonna</font>

28
00:01:08,950 --> 00:01:14,710
talk really<font color="#E5E5E5"> about how I approach the</font>

29
00:01:10,390 --> 00:01:17,050
problem so it's more about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> design of</font>

30
00:01:14,710 --> 00:01:19,679
building a system<font color="#E5E5E5"> like this and doing</font>

31
00:01:17,050 --> 00:01:23,830
that<font color="#CCCCCC"> and go rather</font><font color="#E5E5E5"> than going into like</font>

32
00:01:19,680 --> 00:01:25,480
very deep<font color="#E5E5E5"> technical details so just a</font>

33
00:01:23,830 --> 00:01:26,080
disclaimer<font color="#CCCCCC"> Tim bar is</font><font color="#E5E5E5"> not</font>

34
00:01:25,480 --> 00:01:27,520
<font color="#CCCCCC">production-ready</font>

35
00:01:26,080 --> 00:01:30,910
<font color="#E5E5E5">so please please don't use it for</font>

36
00:01:27,520 --> 00:01:32,410
<font color="#CCCCCC">anything you care about in production so</font>

37
00:01:30,910 --> 00:01:34,210
what is<font color="#CCCCCC"> distributor why am I talking</font>

38
00:01:32,410 --> 00:01:36,850
about distributed systems well<font color="#CCCCCC"> a</font>

39
00:01:34,210 --> 00:01:38,589
distributed system is a<font color="#E5E5E5"> system where</font><font color="#CCCCCC"> you</font>

40
00:01:36,850 --> 00:01:41,649
<font color="#E5E5E5">essentially have coordination between</font>

41
00:01:38,590 --> 00:01:43,630
<font color="#CCCCCC">networked computers and this is how our</font>

42
00:01:41,650 --> 00:01:45,580
Wikipedia defines it<font color="#E5E5E5"> and I</font><font color="#CCCCCC"> think the</font>

43
00:01:43,630 --> 00:01:48,000
coordination part is is<font color="#E5E5E5"> really important</font>

44
00:01:45,580 --> 00:01:50,980
<font color="#CCCCCC">and it's really</font><font color="#E5E5E5"> hard as we'll find</font><font color="#CCCCCC"> out</font>

45
00:01:48,000 --> 00:01:52,990
<font color="#E5E5E5">so why why distributed why why do we</font>

46
00:01:50,980 --> 00:01:54,460
<font color="#E5E5E5">need a distributed system well first of</font>

47
00:01:52,990 --> 00:01:58,419
<font color="#E5E5E5">all we want to survive the failure of</font>

48
00:01:54,460 --> 00:02:00,190
<font color="#E5E5E5">individual servers so if an individual</font>

49
00:01:58,420 --> 00:02:02,080
server dies we want the<font color="#E5E5E5"> system to keep</font>

50
00:02:00,190 --> 00:02:04,630
working<font color="#E5E5E5"> and we also want</font><font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to</font>

51
00:02:02,080 --> 00:02:07,660
add more<font color="#CCCCCC"> servers to meet demand so</font><font color="#E5E5E5"> we</font>

52
00:02:04,630 --> 00:02:09,639
have this<font color="#CCCCCC"> it's a</font><font color="#E5E5E5"> distributed</font><font color="#CCCCCC"> time-series</font>

53
00:02:07,660 --> 00:02:10,989
<font color="#E5E5E5">database</font><font color="#CCCCCC"> if we have lots of</font><font color="#E5E5E5"> users</font>

54
00:02:09,639 --> 00:02:12,849
sending metrics we want to be<font color="#CCCCCC"> able to</font>

55
00:02:10,989 --> 00:02:13,660
scale up<font color="#CCCCCC"> the number of servers to cope</font>

56
00:02:12,849 --> 00:02:15,280
with<font color="#E5E5E5"> that demand</font>

57
00:02:13,660 --> 00:02:16,930
so although otherwise known as

58
00:02:15,280 --> 00:02:19,329
horizontal scaling

59
00:02:16,930 --> 00:02:20,560
so there's a great list of fallacies

60
00:02:19,329 --> 00:02:23,349
<font color="#CCCCCC">edition' be computing</font><font color="#E5E5E5"> that came out of</font>

61
00:02:20,560 --> 00:02:25,000
<font color="#CCCCCC">sun microsystems I think it's got some</font>

62
00:02:23,349 --> 00:02:26,828
<font color="#E5E5E5">great things</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> here like the network is</font>

63
00:02:25,000 --> 00:02:28,569
reliable if you're running a distributed

64
00:02:26,829 --> 00:02:30,040
system that<font color="#E5E5E5"> tells you that</font><font color="#CCCCCC"> the network</font>

65
00:02:28,569 --> 00:02:34,988
must be<font color="#E5E5E5"> reliable for the system to</font><font color="#CCCCCC"> work</font>

66
00:02:30,040 --> 00:02:36,730
<font color="#CCCCCC">be be</font><font color="#E5E5E5"> very distrustful of it</font><font color="#CCCCCC"> so this</font>

67
00:02:34,989 --> 00:02:40,209
kind of thing makes building distributed

68
00:02:36,730 --> 00:02:41,048
systems interesting and so the use<font color="#CCCCCC"> case</font>

69
00:02:40,209 --> 00:02:44,049
for<font color="#CCCCCC"> timbala</font>

70
00:02:41,049 --> 00:02:48,069
was to create a<font color="#E5E5E5"> durable on long term</font>

71
00:02:44,049 --> 00:02:50,260
<font color="#E5E5E5">storage system</font><font color="#CCCCCC"> for metrics</font><font color="#E5E5E5"> and so I've</font>

72
00:02:48,069 --> 00:02:52,208
worked<font color="#E5E5E5"> a lot with Prometheus and really</font>

73
00:02:50,260 --> 00:02:55,120
what I wanted was a place<font color="#CCCCCC"> to store my</font>

74
00:02:52,209 --> 00:02:58,959
<font color="#E5E5E5">Prometheus metrics over a long period of</font>

75
00:02:55,120 --> 00:03:00,849
<font color="#E5E5E5">time say five to ten years and it was</font>

76
00:02:58,959 --> 00:03:03,480
important that<font color="#CCCCCC"> it this system could</font>

77
00:03:00,849 --> 00:03:08,319
store<font color="#CCCCCC"> multidimensional</font><font color="#E5E5E5"> metrics so</font>

78
00:03:03,480 --> 00:03:11,018
<font color="#E5E5E5">metrics defined using labels or tags and</font>

79
00:03:08,319 --> 00:03:12,849
it also must<font color="#E5E5E5"> be also</font><font color="#CCCCCC"> capable</font><font color="#E5E5E5"> of storing</font>

80
00:03:11,019 --> 00:03:17,230
more metrics than could be<font color="#E5E5E5"> accommodated</font>

81
00:03:12,849 --> 00:03:18,518
<font color="#CCCCCC">by a single commodity server so why not</font>

82
00:03:17,230 --> 00:03:19,869
<font color="#E5E5E5">just use the cloud right everyone's</font>

83
00:03:18,519 --> 00:03:22,599
using<font color="#E5E5E5"> the cloud you know you could</font><font color="#CCCCCC"> just</font>

84
00:03:19,870 --> 00:03:23,889
use like s3 put your<font color="#E5E5E5"> data in there well</font>

85
00:03:22,599 --> 00:03:26,768
<font color="#E5E5E5">first of all it wouldn't make for a very</font>

86
00:03:23,889 --> 00:03:29,500
<font color="#CCCCCC">good</font><font color="#E5E5E5"> masters project so that was what</font>

87
00:03:26,769 --> 00:03:31,409
the first thing<font color="#E5E5E5"> but also sometimes you</font>

88
00:03:29,500 --> 00:03:33,220
want<font color="#E5E5E5"> to run stuff</font><font color="#CCCCCC"> on-premise maybe</font><font color="#E5E5E5"> for</font>

89
00:03:31,409 --> 00:03:34,540
because you don't want to run your<font color="#E5E5E5"> data</font>

90
00:03:33,220 --> 00:03:37,659
you don't<font color="#E5E5E5"> want to put your data in the</font>

91
00:03:34,540 --> 00:03:40,659
<font color="#CCCCCC">cloud and</font><font color="#E5E5E5"> you have an off data that you</font>

92
00:03:37,659 --> 00:03:42,730
need<font color="#CCCCCC"> a</font><font color="#E5E5E5"> system that can handle a lot a</font>

93
00:03:40,659 --> 00:03:44,290
reasonable amount<font color="#E5E5E5"> of data but maybe</font><font color="#CCCCCC"> it's</font>

94
00:03:42,730 --> 00:03:47,260
<font color="#E5E5E5">not so much data that you want</font><font color="#CCCCCC"> to run a</font>

95
00:03:44,290 --> 00:03:51,190
<font color="#CCCCCC">system like say Hadoop</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> safe which are</font>

96
00:03:47,260 --> 00:03:54,310
big complex systems<font color="#CCCCCC"> and can be can be</font>

97
00:03:51,190 --> 00:03:56,590
<font color="#E5E5E5">difficult to</font><font color="#CCCCCC"> operate so the other</font><font color="#E5E5E5"> the</font>

98
00:03:54,310 --> 00:03:58,900
<font color="#E5E5E5">other use case I had in mind was I</font>

99
00:03:56,590 --> 00:04:00,909
<font color="#E5E5E5">needed</font><font color="#CCCCCC"> this system needed</font><font color="#E5E5E5"> to be highly</font>

100
00:03:58,900 --> 00:04:03,239
<font color="#E5E5E5">performance so it needs to be able to</font>

101
00:04:00,909 --> 00:04:05,409
ingest a lot<font color="#CCCCCC"> of metrics very quickly</font><font color="#E5E5E5"> and</font>

102
00:04:03,239 --> 00:04:07,030
I also wanted to be<font color="#E5E5E5"> really</font><font color="#CCCCCC"> easy to</font>

103
00:04:05,409 --> 00:04:08,560
<font color="#E5E5E5">operate</font><font color="#CCCCCC"> I think this is really</font><font color="#E5E5E5"> important</font>

104
00:04:07,030 --> 00:04:10,930
with distributed systems that you<font color="#E5E5E5"> have</font>

105
00:04:08,560 --> 00:04:14,040
to bear<font color="#E5E5E5"> in mind how they're going to be</font>

106
00:04:10,930 --> 00:04:16,269
operated in production<font color="#E5E5E5"> so being able to</font>

107
00:04:14,040 --> 00:04:17,680
see what is<font color="#CCCCCC"> happening in the system at</font>

108
00:04:16,269 --> 00:04:21,699
any<font color="#E5E5E5"> point in</font><font color="#CCCCCC"> time was</font><font color="#E5E5E5"> really important</font>

109
00:04:17,680 --> 00:04:22,780
<font color="#E5E5E5">so</font><font color="#CCCCCC"> what are the</font><font color="#E5E5E5"> requirements so well</font>

110
00:04:21,699 --> 00:04:24,849
first<font color="#CCCCCC"> of all the system needs to</font><font color="#E5E5E5"> be able</font>

111
00:04:22,780 --> 00:04:26,320
to shard the data<font color="#E5E5E5"> so it needs to be able</font>

112
00:04:24,849 --> 00:04:28,240
to<font color="#E5E5E5"> store</font><font color="#CCCCCC"> more data</font><font color="#E5E5E5"> than can fit</font><font color="#CCCCCC"> in a</font>

113
00:04:26,320 --> 00:04:29,590
<font color="#CCCCCC">single</font><font color="#E5E5E5"> node and by shorting I mean</font>

114
00:04:28,240 --> 00:04:30,340
essentially spreading data across

115
00:04:29,590 --> 00:04:33,489
<font color="#E5E5E5">multiple sir</font>

116
00:04:30,340 --> 00:04:35,590
by splitting<font color="#E5E5E5"> it up into</font><font color="#CCCCCC"> chunks</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> also</font>

117
00:04:33,490 --> 00:04:38,410
the system<font color="#CCCCCC"> also needed to replicate data</font>

118
00:04:35,590 --> 00:04:40,810
so we wanted to<font color="#E5E5E5"> make copies</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> data in</font>

119
00:04:38,410 --> 00:04:44,169
case<font color="#E5E5E5"> a single node dies</font><font color="#CCCCCC"> we would still</font>

120
00:04:40,810 --> 00:04:48,669
have<font color="#E5E5E5"> a copy of the data on on one of the</font>

121
00:04:44,169 --> 00:04:50,320
<font color="#CCCCCC">other servers I mentioned throughput so</font>

122
00:04:48,669 --> 00:04:53,349
the system needs to be highly available

123
00:04:50,320 --> 00:04:55,510
<font color="#E5E5E5">for data ingestion specifically so I</font>

124
00:04:53,350 --> 00:04:58,900
focused<font color="#E5E5E5"> on</font><font color="#CCCCCC"> high availability for the</font>

125
00:04:55,510 --> 00:05:00,430
right path<font color="#E5E5E5"> because when you're reading</font>

126
00:04:58,900 --> 00:05:01,989
data when you're querying the<font color="#E5E5E5"> system a</font>

127
00:05:00,430 --> 00:05:04,270
human can always retire you want to

128
00:05:01,990 --> 00:05:06,370
avoid that if<font color="#CCCCCC"> at all possible</font>

129
00:05:04,270 --> 00:05:09,219
but if worst comes to worst they<font color="#CCCCCC"> can do</font>

130
00:05:06,370 --> 00:05:12,280
that if<font color="#CCCCCC"> you're ingestion if</font><font color="#E5E5E5"> you're</font><font color="#CCCCCC"> your</font>

131
00:05:09,220 --> 00:05:14,710
right path is not available then<font color="#CCCCCC"> your</font>

132
00:05:12,280 --> 00:05:16,840
<font color="#CCCCCC">your the data that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> need to ingest</font><font color="#E5E5E5"> is</font>

133
00:05:14,710 --> 00:05:19,750
going to start backing up you're gonna

134
00:05:16,840 --> 00:05:21,400
have<font color="#CCCCCC"> back pressure</font><font color="#E5E5E5"> and then when you try</font>

135
00:05:19,750 --> 00:05:23,860
to catch up you<font color="#E5E5E5"> need to ingest</font><font color="#CCCCCC"> your</font>

136
00:05:21,400 --> 00:05:26,469
normal your normal traffic<font color="#E5E5E5"> plus the</font>

137
00:05:23,860 --> 00:05:28,150
traffic that is backlogged<font color="#E5E5E5"> as well so we</font>

138
00:05:26,470 --> 00:05:29,770
want<font color="#E5E5E5"> to try and avoid</font><font color="#CCCCCC"> that and</font><font color="#E5E5E5"> really</font>

139
00:05:28,150 --> 00:05:34,770
make<font color="#CCCCCC"> sure that they're the right</font><font color="#E5E5E5"> path is</font>

140
00:05:29,770 --> 00:05:36,969
is as available as<font color="#CCCCCC"> possible and</font>

141
00:05:34,770 --> 00:05:40,060
operational simplicity so it needs to<font color="#CCCCCC"> be</font>

142
00:05:36,970 --> 00:05:41,770
<font color="#E5E5E5">simple to operate</font><font color="#CCCCCC"> maintain I wanted to</font>

143
00:05:40,060 --> 00:05:44,350
keep the<font color="#E5E5E5"> number of configuration open</font>

144
00:05:41,770 --> 00:05:47,049
options to a minimum so less less things

145
00:05:44,350 --> 00:05:49,840
to<font color="#E5E5E5"> tune which hopefully would translate</font>

146
00:05:47,050 --> 00:05:51,970
<font color="#CCCCCC">to less things to get wrong and also add</font>

147
00:05:49,840 --> 00:05:55,210
good<font color="#E5E5E5"> instrumentation so logging metrics</font>

148
00:05:51,970 --> 00:05:58,300
<font color="#E5E5E5">and tracing so that you can see if a</font>

149
00:05:55,210 --> 00:06:00,010
certain client<font color="#E5E5E5"> hit</font><font color="#CCCCCC"> a given server</font><font color="#E5E5E5"> which</font>

150
00:05:58,300 --> 00:06:01,660
other servers that<font color="#CCCCCC"> requests had to</font>

151
00:06:00,010 --> 00:06:05,020
<font color="#CCCCCC">traverse through to be</font><font color="#E5E5E5"> able to serve a</font>

152
00:06:01,660 --> 00:06:07,390
request and the other requirement I had

153
00:06:05,020 --> 00:06:09,010
was interoperability with<font color="#E5E5E5"> Prometheus so</font>

154
00:06:07,390 --> 00:06:11,409
I<font color="#E5E5E5"> mentioned</font><font color="#CCCCCC"> the original use case I had</font>

155
00:06:09,010 --> 00:06:13,419
<font color="#E5E5E5">in mind for</font><font color="#CCCCCC"> this was</font><font color="#E5E5E5"> to store Prometheus</font>

156
00:06:11,410 --> 00:06:15,400
data<font color="#CCCCCC"> long-term so I</font><font color="#E5E5E5"> wanted to reuse</font>

157
00:06:13,419 --> 00:06:17,830
<font color="#E5E5E5">Prometheus best the best features which</font>

158
00:06:15,400 --> 00:06:20,590
is<font color="#E5E5E5"> the query</font><font color="#CCCCCC"> language</font><font color="#E5E5E5"> and its data model</font>

159
00:06:17,830 --> 00:06:22,330
and<font color="#E5E5E5"> also it has API is already defined</font>

160
00:06:20,590 --> 00:06:24,909
<font color="#E5E5E5">so I didn't want to have to redesign</font>

161
00:06:22,330 --> 00:06:27,880
those api's when when I could reuse

162
00:06:24,910 --> 00:06:29,860
those so that<font color="#CCCCCC"> helps me to focus</font><font color="#E5E5E5"> the</font>

163
00:06:27,880 --> 00:06:31,570
project and it allowed<font color="#CCCCCC"> me to</font><font color="#E5E5E5"> focus</font>

164
00:06:29,860 --> 00:06:34,000
really on the distributed part of the

165
00:06:31,570 --> 00:06:36,849
<font color="#E5E5E5">system which was the part</font><font color="#CCCCCC"> that was most</font>

166
00:06:34,000 --> 00:06:39,130
interesting<font color="#CCCCCC"> for</font><font color="#E5E5E5"> this project so it's</font>

167
00:06:36,850 --> 00:06:40,630
easy<font color="#E5E5E5"> to think about distributed systems</font>

168
00:06:39,130 --> 00:06:42,159
if you<font color="#CCCCCC"> have a really small</font><font color="#E5E5E5"> amount of</font>

169
00:06:40,630 --> 00:06:43,419
data<font color="#CCCCCC"> because</font><font color="#E5E5E5"> you know you could</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> put</font>

170
00:06:42,159 --> 00:06:44,860
it<font color="#CCCCCC"> on</font>

171
00:06:43,419 --> 00:06:47,349
and it's not really distributed system

172
00:06:44,860 --> 00:06:49,449
so I think<font color="#E5E5E5"> it helps to kind of at least</font>

173
00:06:47,349 --> 00:06:51,460
<font color="#CCCCCC">have a target to work with in</font><font color="#E5E5E5"> terms of</font>

174
00:06:49,449 --> 00:06:53,620
numbers so I just looked at<font color="#E5E5E5"> CloudFlare</font>

175
00:06:51,460 --> 00:06:55,150
is open<font color="#CCCCCC"> T STP</font><font color="#E5E5E5"> insulation this</font><font color="#CCCCCC"> is where</font>

176
00:06:53,620 --> 00:06:57,520
we keep metrics for long-term<font color="#E5E5E5"> storage</font>

177
00:06:55,150 --> 00:07:00,179
currently and every 2017 we're storing

178
00:06:57,520 --> 00:07:03,430
<font color="#E5E5E5">700,000 data points per second so</font>

179
00:07:00,180 --> 00:07:05,499
700,000 metrics observations ingested

180
00:07:03,430 --> 00:07:07,569
per second and 70 million unique time

181
00:07:05,499 --> 00:07:11,039
series and those are multi-dimensional

182
00:07:07,569 --> 00:07:14,409
metrics so 70 million uni unique metrics

183
00:07:11,039 --> 00:07:15,430
<font color="#CCCCCC">so this kind of gave me a goal</font>

184
00:07:14,409 --> 00:07:17,620
<font color="#CCCCCC">I knew I wasn't going</font><font color="#E5E5E5"> to achieve this</font>

185
00:07:15,430 --> 00:07:18,969
for my<font color="#E5E5E5"> Master's project but at least</font>

186
00:07:17,620 --> 00:07:20,349
helped me to<font color="#CCCCCC"> think about</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> the</font>

187
00:07:18,969 --> 00:07:24,699
<font color="#E5E5E5">constraints of the system</font><font color="#CCCCCC"> would be and</font>

188
00:07:20,349 --> 00:07:26,889
how I need<font color="#CCCCCC"> to design it</font><font color="#E5E5E5"> so how do you</font>

189
00:07:24,699 --> 00:07:28,719
<font color="#E5E5E5">build a distributed</font><font color="#CCCCCC"> system like where do</font>

190
00:07:26,889 --> 00:07:30,490
<font color="#CCCCCC">you</font><font color="#E5E5E5"> start you</font><font color="#CCCCCC"> have all these</font><font color="#E5E5E5"> servers</font>

191
00:07:28,719 --> 00:07:33,099
talking to each<font color="#E5E5E5"> other like</font><font color="#CCCCCC"> it seems like</font>

192
00:07:30,490 --> 00:07:35,560
<font color="#CCCCCC">really</font><font color="#E5E5E5"> complex and difficult so I had a</font>

193
00:07:33,099 --> 00:07:36,729
hard time<font color="#E5E5E5"> coming up with an MB MVP and I</font>

194
00:07:35,560 --> 00:07:39,849
didn't<font color="#E5E5E5"> have a lot</font><font color="#CCCCCC"> of time to</font><font color="#E5E5E5"> build this</font>

195
00:07:36,729 --> 00:07:43,089
<font color="#CCCCCC">cuz I need to do it</font><font color="#E5E5E5"> on evenings so I</font>

196
00:07:39,849 --> 00:07:44,650
started<font color="#CCCCCC"> thinking about ingestion versus</font>

197
00:07:43,089 --> 00:07:45,909
querying so the<font color="#CCCCCC"> read in the right path</font>

198
00:07:44,650 --> 00:07:47,650
<font color="#CCCCCC">so it was one of</font><font color="#E5E5E5"> the first places I</font>

199
00:07:45,909 --> 00:07:49,210
started and then<font color="#CCCCCC"> I thought well how can</font>

200
00:07:47,650 --> 00:07:51,400
<font color="#E5E5E5">I also reduce</font><font color="#CCCCCC"> the scope of what</font><font color="#E5E5E5"> I need</font>

201
00:07:49,210 --> 00:07:52,960
to<font color="#E5E5E5"> do well we're using</font><font color="#CCCCCC"> third-party</font><font color="#E5E5E5"> code</font>

202
00:07:51,400 --> 00:07:55,810
wherever<font color="#E5E5E5"> possible so reason those</font>

203
00:07:52,960 --> 00:07:58,388
Prometheus libraries<font color="#CCCCCC"> was one</font><font color="#E5E5E5"> of the most</font>

204
00:07:55,810 --> 00:08:01,479
<font color="#CCCCCC">beneficial decisions in the project</font><font color="#E5E5E5"> and</font>

205
00:07:58,389 --> 00:08:03,279
so I reused the<font color="#CCCCCC"> poem</font><font color="#E5E5E5"> QL query library so</font>

206
00:08:01,479 --> 00:08:06,039
I didn't<font color="#E5E5E5"> need to reinvent my own query</font>

207
00:08:03,279 --> 00:08:08,620
engine<font color="#E5E5E5"> and I reused the</font><font color="#CCCCCC"> IPA code as</font><font color="#E5E5E5"> well</font>

208
00:08:06,039 --> 00:08:10,389
so the so<font color="#CCCCCC"> the system would be API</font>

209
00:08:08,620 --> 00:08:12,039
compatible with<font color="#E5E5E5"> Prometheus so any</font>

210
00:08:10,389 --> 00:08:14,830
existing integrations would would work

211
00:08:12,039 --> 00:08:16,930
with<font color="#CCCCCC"> it so I came</font><font color="#E5E5E5"> up some milestones the</font>

212
00:08:14,830 --> 00:08:18,520
first one was to just get the system

213
00:08:16,930 --> 00:08:19,870
<font color="#CCCCCC">working on a single node so no</font>

214
00:08:18,520 --> 00:08:22,210
coordination no communication between

215
00:08:19,870 --> 00:08:23,919
<font color="#E5E5E5">servers but just be able</font><font color="#CCCCCC"> to store</font><font color="#E5E5E5"> data</font>

216
00:08:22,210 --> 00:08:25,960
on<font color="#E5E5E5"> a single server and then query it</font>

217
00:08:23,919 --> 00:08:27,310
back out afterwards<font color="#E5E5E5"> and then the next</font>

218
00:08:25,960 --> 00:08:29,049
<font color="#CCCCCC">milestone was to actually</font><font color="#E5E5E5"> get the</font>

219
00:08:27,310 --> 00:08:30,479
service<font color="#CCCCCC"> talking to each</font><font color="#E5E5E5"> other start</font>

220
00:08:29,050 --> 00:08:32,289
sorting the<font color="#CCCCCC"> data across</font><font color="#E5E5E5"> the nodes</font>

221
00:08:30,479 --> 00:08:34,539
<font color="#E5E5E5">replicating the data so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we have</font>

222
00:08:32,289 --> 00:08:36,689
enough copies to survive<font color="#CCCCCC"> single node</font>

223
00:08:34,539 --> 00:08:40,360
failures and then also<font color="#E5E5E5"> look at</font>

224
00:08:36,690 --> 00:08:44,320
rebalancing data between between servers

225
00:08:40,360 --> 00:08:47,140
so that<font color="#CCCCCC"> we can recover from from server</font>

226
00:08:44,320 --> 00:08:49,209
loss so and then there<font color="#E5E5E5"> are other things</font>

227
00:08:47,140 --> 00:08:51,910
<font color="#E5E5E5">I want to</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> if I could take this beyond</font>

228
00:08:49,209 --> 00:08:53,410
a<font color="#CCCCCC"> minimum viable product</font><font color="#E5E5E5"> so one of those</font>

229
00:08:51,910 --> 00:08:56,500
<font color="#E5E5E5">things</font><font color="#CCCCCC"> was read repairs so that's the</font>

230
00:08:53,410 --> 00:08:59,770
ability<font color="#CCCCCC"> to</font><font color="#E5E5E5"> as you're reading data</font>

231
00:08:56,500 --> 00:09:01,510
you can see if a<font color="#E5E5E5"> given server is missing</font>

232
00:08:59,770 --> 00:09:02,890
some data<font color="#CCCCCC"> I basically tell it hey you're</font>

233
00:09:01,510 --> 00:09:04,720
<font color="#CCCCCC">missing</font><font color="#E5E5E5"> data you should you</font><font color="#CCCCCC"> should have</font>

234
00:09:02,890 --> 00:09:07,480
a copy<font color="#E5E5E5"> of this so</font><font color="#CCCCCC"> that was one</font><font color="#E5E5E5"> thing</font>

235
00:09:04,720 --> 00:09:09,490
hinted handoff is the<font color="#CCCCCC"> ability to</font><font color="#E5E5E5"> store</font>

236
00:09:07,480 --> 00:09:12,130
data<font color="#CCCCCC"> on behalf</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> another node in the</font>

237
00:09:09,490 --> 00:09:14,020
system so<font color="#CCCCCC"> that if that nodes down you</font>

238
00:09:12,130 --> 00:09:15,310
can<font color="#CCCCCC"> basically hold</font><font color="#E5E5E5"> on to its data until</font>

239
00:09:14,020 --> 00:09:17,110
<font color="#CCCCCC">it</font><font color="#E5E5E5"> comes back up</font><font color="#CCCCCC"> and then send that data</font>

240
00:09:15,310 --> 00:09:19,869
<font color="#CCCCCC">across to it and then the</font><font color="#E5E5E5"> other thing I</font>

241
00:09:17,110 --> 00:09:21,600
wanted<font color="#E5E5E5"> to look at was an activity</font>

242
00:09:19,870 --> 00:09:23,890
entropy which<font color="#CCCCCC"> is a fancy way of saying</font>

243
00:09:21,600 --> 00:09:27,790
<font color="#E5E5E5">having a background process that runs</font>

244
00:09:23,890 --> 00:09:29,530
<font color="#E5E5E5">and tries</font><font color="#CCCCCC"> to detect</font><font color="#E5E5E5"> missing data in data</font>

245
00:09:27,790 --> 00:09:32,050
<font color="#E5E5E5">that you might not read</font><font color="#CCCCCC"> very frequently</font>

246
00:09:29,530 --> 00:09:33,490
so<font color="#E5E5E5"> with</font><font color="#CCCCCC"> repair</font><font color="#E5E5E5"> read repair only works</font>

247
00:09:32,050 --> 00:09:35,020
for data<font color="#E5E5E5"> that you're</font><font color="#CCCCCC"> reading and with</font>

248
00:09:33,490 --> 00:09:37,750
metrics you're<font color="#E5E5E5"> often reading just very</font>

249
00:09:35,020 --> 00:09:39,819
recent<font color="#E5E5E5"> data so active and active anti</font>

250
00:09:37,750 --> 00:09:42,640
entropy<font color="#E5E5E5"> would allow you to repair data</font>

251
00:09:39,820 --> 00:09:43,690
that is<font color="#CCCCCC"> maybe further back in time</font><font color="#E5E5E5"> but I</font>

252
00:09:42,640 --> 00:09:46,180
was<font color="#E5E5E5"> pretty sure I wouldn't be able to</font>

253
00:09:43,690 --> 00:09:47,530
<font color="#E5E5E5">finish</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> for this project</font><font color="#CCCCCC"> so I was</font>

254
00:09:46,180 --> 00:09:49,150
like<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> this is cool this</font><font color="#CCCCCC"> is really</font>

255
00:09:47,530 --> 00:09:51,939
exciting I'm gonna<font color="#E5E5E5"> like start reading</font>

256
00:09:49,150 --> 00:09:53,350
like research and<font color="#E5E5E5"> papers</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> was</font>

257
00:09:51,940 --> 00:09:54,700
<font color="#E5E5E5">really cool like</font><font color="#CCCCCC"> I've read all these</font>

258
00:09:53,350 --> 00:09:57,070
things about Numa and<font color="#CCCCCC"> writes</font>

259
00:09:54,700 --> 00:09:59,500
<font color="#E5E5E5">amplification and how to work with SSDs</font>

260
00:09:57,070 --> 00:09:59,800
<font color="#E5E5E5">and em up and hashing all this kind of</font>

261
00:09:59,500 --> 00:10:03,190
<font color="#E5E5E5">stuff</font>

262
00:09:59,800 --> 00:10:04,750
<font color="#E5E5E5">and it was super</font><font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> but like</font>

263
00:10:03,190 --> 00:10:06,070
yeah this there's so<font color="#E5E5E5"> much to work with</font>

264
00:10:04,750 --> 00:10:08,470
<font color="#CCCCCC">here and I</font><font color="#E5E5E5"> needed to start small and</font>

265
00:10:06,070 --> 00:10:10,930
<font color="#CCCCCC">needs to</font><font color="#E5E5E5"> get something working</font><font color="#CCCCCC"> so like</font>

266
00:10:08,470 --> 00:10:12,160
let's ignore that<font color="#E5E5E5"> for</font><font color="#CCCCCC"> now so back to the</font>

267
00:10:10,930 --> 00:10:14,020
essentials<font color="#CCCCCC"> so what did I</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to think</font>

268
00:10:12,160 --> 00:10:15,219
<font color="#E5E5E5">about for the system</font><font color="#CCCCCC"> to work well the</font>

269
00:10:14,020 --> 00:10:17,920
service<font color="#CCCCCC"> needs to be able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> talk to</font><font color="#E5E5E5"> each</font>

270
00:10:15,220 --> 00:10:20,350
other<font color="#E5E5E5"> need to to to coordinate Peter</font>

271
00:10:17,920 --> 00:10:22,150
<font color="#CCCCCC">Bergen wrote a blog post about his</font>

272
00:10:20,350 --> 00:10:24,130
system for<font color="#E5E5E5"> ingesting logs called</font><font color="#CCCCCC"> ok log</font>

273
00:10:22,150 --> 00:10:26,530
and that was really influential to me in

274
00:10:24,130 --> 00:10:28,830
terms of framing<font color="#CCCCCC"> the problem in terms of</font>

275
00:10:26,530 --> 00:10:31,060
coordination<font color="#E5E5E5"> between servers and then</font>

276
00:10:28,830 --> 00:10:33,580
indexing how do you know where your data

277
00:10:31,060 --> 00:10:35,949
is<font color="#E5E5E5"> stored in the system how do you store</font>

278
00:10:33,580 --> 00:10:38,860
the data on disk<font color="#CCCCCC"> how do you know which</font>

279
00:10:35,950 --> 00:10:40,030
<font color="#CCCCCC">nodes</font><font color="#E5E5E5"> should be in the</font><font color="#CCCCCC"> cluster</font><font color="#E5E5E5"> and when</font>

280
00:10:38,860 --> 00:10:41,320
you know which<font color="#CCCCCC"> nodes should</font><font color="#E5E5E5"> be in the</font>

281
00:10:40,030 --> 00:10:43,240
cluster how do you decide where to<font color="#E5E5E5"> send</font>

282
00:10:41,320 --> 00:10:45,400
<font color="#E5E5E5">the data between</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> and then finally</font>

283
00:10:43,240 --> 00:10:48,160
how will<font color="#CCCCCC"> the system</font><font color="#E5E5E5"> fail because</font><font color="#CCCCCC"> it will</font>

284
00:10:45,400 --> 00:10:49,750
fail at some point so<font color="#E5E5E5"> to try to</font>

285
00:10:48,160 --> 00:10:50,920
understand the problem<font color="#E5E5E5"> more let's let's</font>

286
00:10:49,750 --> 00:10:52,570
consider some<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> traits or</font>

287
00:10:50,920 --> 00:10:55,240
assumptions we can<font color="#CCCCCC"> make about time</font>

288
00:10:52,570 --> 00:10:57,700
series<font color="#E5E5E5"> data so the first one I</font><font color="#CCCCCC"> made was</font>

289
00:10:55,240 --> 00:10:59,980
the<font color="#E5E5E5"> data once ingested will be</font><font color="#CCCCCC"> immutable</font>

290
00:10:57,700 --> 00:11:02,290
so basically<font color="#CCCCCC"> their data would be</font><font color="#E5E5E5"> append</font>

291
00:10:59,980 --> 00:11:04,060
<font color="#CCCCCC">only so there would be no worry - no</font>

292
00:11:02,290 --> 00:11:06,079
need to<font color="#E5E5E5"> worry about updates to the data</font>

293
00:11:04,060 --> 00:11:08,209
so<font color="#CCCCCC"> we don't</font><font color="#E5E5E5"> have to worry about</font>

294
00:11:06,080 --> 00:11:10,610
like updating<font color="#CCCCCC"> a row essentially in a</font>

295
00:11:08,209 --> 00:11:12,018
relational database<font color="#CCCCCC"> or the</font><font color="#E5E5E5"> date having</font>

296
00:11:10,610 --> 00:11:16,519
to<font color="#E5E5E5"> manage multiple versions of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> same</font>

297
00:11:12,019 --> 00:11:19,130
data<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> helps</font><font color="#E5E5E5"> relax some</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

298
00:11:16,519 --> 00:11:20,930
requirements because it makes it we

299
00:11:19,130 --> 00:11:23,480
don't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to worry about managing all</font>

300
00:11:20,930 --> 00:11:26,269
those versions<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so the other</font><font color="#E5E5E5"> thing</font>

301
00:11:23,480 --> 00:11:28,640
<font color="#CCCCCC">about metrics</font><font color="#E5E5E5"> is the data types can be</font>

302
00:11:26,269 --> 00:11:30,410
really<font color="#E5E5E5"> simple so time series can include</font>

303
00:11:28,640 --> 00:11:33,800
events<font color="#CCCCCC"> but in this</font><font color="#E5E5E5"> case I was</font><font color="#CCCCCC"> just focus</font>

304
00:11:30,410 --> 00:11:36,230
on numbers and numbers can compress

305
00:11:33,800 --> 00:11:38,479
really well<font color="#CCCCCC"> prometheus</font>

306
00:11:36,230 --> 00:11:41,209
<font color="#E5E5E5">to two point two point oh and a bar F</font>

307
00:11:38,480 --> 00:11:42,829
uses a variant<font color="#CCCCCC"> of the gorilla</font>

308
00:11:41,209 --> 00:11:44,930
<font color="#E5E5E5">compression algorithm from Facebook and</font>

309
00:11:42,829 --> 00:11:47,719
this<font color="#CCCCCC"> uses double Delta compression for</font>

310
00:11:44,930 --> 00:11:49,370
64-bit floats<font color="#CCCCCC"> so it takes</font><font color="#E5E5E5"> the difference</font>

311
00:11:47,720 --> 00:11:50,300
between<font color="#E5E5E5"> the two</font><font color="#CCCCCC"> numbers and then it</font>

312
00:11:49,370 --> 00:11:52,640
takes<font color="#E5E5E5"> the difference between that</font>

313
00:11:50,300 --> 00:11:54,949
difference<font color="#E5E5E5"> and it</font><font color="#CCCCCC"> uses that to compress</font>

314
00:11:52,640 --> 00:11:57,560
the data<font color="#E5E5E5"> and if you're interested the</font>

315
00:11:54,950 --> 00:11:59,260
the gorilla paper explains how<font color="#CCCCCC"> that</font>

316
00:11:57,560 --> 00:12:02,229
works

317
00:11:59,260 --> 00:12:05,269
so the other thing<font color="#E5E5E5"> to bear in</font><font color="#CCCCCC"> mind with</font>

318
00:12:02,230 --> 00:12:06,560
time series data<font color="#CCCCCC"> bay time series data is</font>

319
00:12:05,269 --> 00:12:08,029
the tension<font color="#E5E5E5"> between the rate</font><font color="#CCCCCC"> reading the</font>

320
00:12:06,560 --> 00:12:09,018
right patterns<font color="#E5E5E5"> and this is really</font>

321
00:12:08,029 --> 00:12:10,850
important when<font color="#E5E5E5"> thinking about how</font><font color="#CCCCCC"> to</font>

322
00:12:09,019 --> 00:12:12,800
design<font color="#E5E5E5"> the system so you essentially</font>

323
00:12:10,850 --> 00:12:14,480
have continuous<font color="#E5E5E5"> writes across the</font>

324
00:12:12,800 --> 00:12:16,880
<font color="#CCCCCC">majority of</font><font color="#E5E5E5"> your individual time series</font>

325
00:12:14,480 --> 00:12:19,640
so in the case<font color="#E5E5E5"> of CloudFlare for example</font>

326
00:12:16,880 --> 00:12:21,680
we had 70 million unique time series we

327
00:12:19,640 --> 00:12:23,510
might have maybe<font color="#E5E5E5"> 40 million of those</font>

328
00:12:21,680 --> 00:12:26,120
<font color="#E5E5E5">time series being rich written to within</font>

329
00:12:23,510 --> 00:12:28,130
<font color="#E5E5E5">the last five minutes</font><font color="#CCCCCC"> so you have a lot</font>

330
00:12:26,120 --> 00:12:30,079
of<font color="#E5E5E5"> updates</font><font color="#CCCCCC"> across a</font><font color="#E5E5E5"> broad range of data</font>

331
00:12:28,130 --> 00:12:32,300
<font color="#E5E5E5">but then when you're reading back from</font>

332
00:12:30,079 --> 00:12:34,430
the system<font color="#E5E5E5"> you're often reading for a</font>

333
00:12:32,300 --> 00:12:36,620
<font color="#E5E5E5">given time range of data so you have</font>

334
00:12:34,430 --> 00:12:38,420
this tension between the right path

335
00:12:36,620 --> 00:12:40,550
which<font color="#CCCCCC"> is touching</font><font color="#E5E5E5"> many different time</font>

336
00:12:38,420 --> 00:12:42,589
series and the read<font color="#E5E5E5"> path where you're</font>

337
00:12:40,550 --> 00:12:45,649
going<font color="#CCCCCC"> across time so that</font><font color="#E5E5E5"> was something</font>

338
00:12:42,589 --> 00:12:47,510
<font color="#CCCCCC">that was difficult</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> one of the</font>

339
00:12:45,649 --> 00:12:50,089
most interesting properties<font color="#E5E5E5"> of storing</font>

340
00:12:47,510 --> 00:12:51,589
time series<font color="#E5E5E5"> data and now if fabián from</font>

341
00:12:50,089 --> 00:12:54,920
the Prometheus project goes into this in

342
00:12:51,589 --> 00:12:57,110
more detail<font color="#E5E5E5"> in his blog post so</font><font color="#CCCCCC"> I looked</font>

343
00:12:54,920 --> 00:12:59,209
<font color="#CCCCCC">up I was like</font><font color="#E5E5E5"> okay what exists currently</font>

344
00:12:57,110 --> 00:13:01,279
<font color="#E5E5E5">I won't go into that into detail</font><font color="#CCCCCC"> now but</font>

345
00:12:59,209 --> 00:13:03,439
<font color="#E5E5E5">the main thing I drew from these</font>

346
00:13:01,279 --> 00:13:05,180
<font color="#E5E5E5">existing systems was the idea of storing</font>

347
00:13:03,440 --> 00:13:08,630
<font color="#CCCCCC">data</font><font color="#E5E5E5"> in columns so column the data</font>

348
00:13:05,180 --> 00:13:11,390
stores and from<font color="#E5E5E5"> Amazon's dynamo paper</font>

349
00:13:08,630 --> 00:13:13,399
the<font color="#CCCCCC"> idea of using consistent</font><font color="#E5E5E5"> hashing</font><font color="#CCCCCC"> to</font>

350
00:13:11,390 --> 00:13:13,970
determine where<font color="#CCCCCC"> to place they turn</font><font color="#E5E5E5"> in</font>

351
00:13:13,399 --> 00:13:17,690
the system

352
00:13:13,970 --> 00:13:19,490
so I mentioned coordination and

353
00:13:17,690 --> 00:13:20,780
coordination<font color="#CCCCCC"> being able to</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> about</font>

354
00:13:19,490 --> 00:13:23,000
<font color="#E5E5E5">the system</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> terms of coordination was</font>

355
00:13:20,780 --> 00:13:25,010
<font color="#E5E5E5">really helpful</font><font color="#CCCCCC"> and the thing I realized</font>

356
00:13:23,000 --> 00:13:27,140
was<font color="#CCCCCC"> if I wanted</font><font color="#E5E5E5"> to support a high</font>

357
00:13:25,010 --> 00:13:28,610
throughput on ingestion<font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to keep</font>

358
00:13:27,140 --> 00:13:30,260
coordination to an absolute<font color="#E5E5E5"> minimum</font>

359
00:13:28,610 --> 00:13:34,190
<font color="#E5E5E5">because that would help reduce the</font>

360
00:13:30,260 --> 00:13:36,230
<font color="#CCCCCC">complexity of the</font><font color="#E5E5E5"> system and and all as</font>

361
00:13:34,190 --> 00:13:38,150
a result make<font color="#E5E5E5"> it more reliable</font><font color="#CCCCCC"> and also</font>

362
00:13:36,230 --> 00:13:40,640
<font color="#E5E5E5">avoid coordination bottlenecks because</font>

363
00:13:38,150 --> 00:13:42,470
those<font color="#E5E5E5"> bottlenecks could be couldn't be a</font>

364
00:13:40,640 --> 00:13:47,720
bottleneck<font color="#CCCCCC"> for the for the ingestion</font>

365
00:13:42,470 --> 00:13:50,660
throughput so the other thing was to

366
00:13:47,720 --> 00:13:52,730
know which which<font color="#E5E5E5"> servers were part</font><font color="#CCCCCC"> of</font>

367
00:13:50,660 --> 00:13:53,959
the cluster at any given time<font color="#CCCCCC"> so I could</font>

368
00:13:52,730 --> 00:13:55,550
just<font color="#E5E5E5"> do this statically I could just</font>

369
00:13:53,960 --> 00:13:57,530
tell<font color="#CCCCCC"> each server what other services it</font>

370
00:13:55,550 --> 00:13:58,910
exists<font color="#E5E5E5"> but that's gonna</font><font color="#CCCCCC"> be kind of</font>

371
00:13:57,530 --> 00:14:01,760
<font color="#CCCCCC">painful especially</font><font color="#E5E5E5"> if you had a lot</font><font color="#CCCCCC"> of</font>

372
00:13:58,910 --> 00:14:05,959
nodes<font color="#CCCCCC"> and also I needed</font><font color="#E5E5E5"> to know if a</font>

373
00:14:01,760 --> 00:14:08,870
node<font color="#CCCCCC"> when a node fails so being able to</font>

374
00:14:05,960 --> 00:14:11,570
detect a node failure<font color="#E5E5E5"> so for that is the</font>

375
00:14:08,870 --> 00:14:15,560
member list library<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is used by</font>

376
00:14:11,570 --> 00:14:17,540
<font color="#CCCCCC">Hoshi Corp Cerf and also</font><font color="#E5E5E5"> console it's a</font>

377
00:14:15,560 --> 00:14:19,430
if the goal it's a goal I<font color="#CCCCCC"> brie</font><font color="#E5E5E5"> eases the</font>

378
00:14:17,540 --> 00:14:21,170
swim<font color="#E5E5E5"> gossip protocol and by gossip</font>

379
00:14:19,430 --> 00:14:23,689
protocol I mean that the service<font color="#CCCCCC"> talked</font>

380
00:14:21,170 --> 00:14:25,189
to each<font color="#E5E5E5"> other using UDP and they</font>

381
00:14:23,690 --> 00:14:27,140
synchronize their<font color="#E5E5E5"> state with each other</font>

382
00:14:25,190 --> 00:14:30,290
using UDP<font color="#CCCCCC"> and then occasionally they</font>

383
00:14:27,140 --> 00:14:32,240
have a TCP mechanism for reliably

384
00:14:30,290 --> 00:14:33,800
synchronizing their state<font color="#E5E5E5"> and they talk</font>

385
00:14:32,240 --> 00:14:36,440
<font color="#E5E5E5">to each other and basically tell each</font>

386
00:14:33,800 --> 00:14:38,180
other they<font color="#E5E5E5"> they still exist</font><font color="#CCCCCC"> and so even</font>

387
00:14:36,440 --> 00:14:40,520
has some really<font color="#E5E5E5"> nice properties</font><font color="#CCCCCC"> one of</font>

388
00:14:38,180 --> 00:14:42,829
them is that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can detect if a node is</font>

389
00:14:40,520 --> 00:14:45,079
still alive even<font color="#CCCCCC"> if you can't access it</font>

390
00:14:42,830 --> 00:14:47,780
directly<font color="#E5E5E5"> so the nodes can snitch on each</font>

391
00:14:45,080 --> 00:14:50,000
other on each other and<font color="#E5E5E5"> you can</font>

392
00:14:47,780 --> 00:14:52,400
<font color="#E5E5E5">indirectly detect if a server is still</font>

393
00:14:50,000 --> 00:14:53,840
alive<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> worked</font><font color="#E5E5E5"> really well the</font>

394
00:14:52,400 --> 00:14:55,959
membership library was member list

395
00:14:53,840 --> 00:14:58,130
<font color="#E5E5E5">library was really easy to integrate</font>

396
00:14:55,960 --> 00:15:00,740
<font color="#E5E5E5">Peter Berger and also uses</font><font color="#CCCCCC"> this in okay</font>

397
00:14:58,130 --> 00:15:02,089
<font color="#E5E5E5">log and it was a lot easier than</font><font color="#CCCCCC"> I</font>

398
00:15:00,740 --> 00:15:04,880
<font color="#CCCCCC">thought to get</font><font color="#E5E5E5"> this up and running so</font>

399
00:15:02,089 --> 00:15:06,470
that<font color="#CCCCCC"> was really really good</font><font color="#E5E5E5"> to use</font>

400
00:15:04,880 --> 00:15:08,089
so indexing how do you find the data

401
00:15:06,470 --> 00:15:09,170
<font color="#E5E5E5">quickly like you have all these nodes in</font>

402
00:15:08,089 --> 00:15:11,570
the cluster<font color="#CCCCCC"> where</font><font color="#E5E5E5"> do you know where your</font>

403
00:15:09,170 --> 00:15:14,209
data is so I could use a centralized

404
00:15:11,570 --> 00:15:17,210
index<font color="#E5E5E5"> and I've worked with the</font><font color="#CCCCCC"> raft</font>

405
00:15:14,210 --> 00:15:18,800
protocol before<font color="#CCCCCC"> I anew bit</font><font color="#E5E5E5"> about</font>

406
00:15:17,210 --> 00:15:20,839
consensus and<font color="#CCCCCC"> I started thinking like</font>

407
00:15:18,800 --> 00:15:22,189
I'm sure I need consensus for the system

408
00:15:20,839 --> 00:15:24,890
and then I thought about<font color="#E5E5E5"> it I thought</font>

409
00:15:22,190 --> 00:15:26,600
<font color="#CCCCCC">well actually</font><font color="#E5E5E5"> probably only need</font>

410
00:15:24,890 --> 00:15:28,819
consensus if I have a centralized<font color="#CCCCCC"> index</font>

411
00:15:26,600 --> 00:15:29,840
and using a centralized<font color="#CCCCCC"> index you have a</font>

412
00:15:28,820 --> 00:15:31,970
consistent view of

413
00:15:29,840 --> 00:15:35,750
<font color="#E5E5E5">what should exist in the system at any</font>

414
00:15:31,970 --> 00:15:37,610
one time<font color="#CCCCCC"> but</font><font color="#E5E5E5"> to do that you need to be</font>

415
00:15:35,750 --> 00:15:40,190
able<font color="#E5E5E5"> to coordinate</font><font color="#CCCCCC"> between servers so</font>

416
00:15:37,610 --> 00:15:41,960
that<font color="#CCCCCC"> you can decide what that</font>

417
00:15:40,190 --> 00:15:43,760
centralized index<font color="#E5E5E5"> should be and that's</font>

418
00:15:41,960 --> 00:15:46,340
<font color="#CCCCCC">likely to become</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> bottleneck high</font>

419
00:15:43,760 --> 00:15:48,740
<font color="#CCCCCC">ingestion</font><font color="#E5E5E5"> volumes so I wanted to try and</font>

420
00:15:46,340 --> 00:15:49,820
avoid<font color="#CCCCCC"> that if possible so the other</font>

421
00:15:48,740 --> 00:15:52,280
thing you<font color="#CCCCCC"> could do is just use a local</font>

422
00:15:49,820 --> 00:15:54,650
<font color="#E5E5E5">index in have each server know about</font>

423
00:15:52,280 --> 00:15:56,930
what it stores itself<font color="#E5E5E5"> the big</font>

424
00:15:54,650 --> 00:15:59,120
<font color="#E5E5E5">disadvantage to this is that if you</font><font color="#CCCCCC"> lose</font>

425
00:15:56,930 --> 00:16:00,949
data you<font color="#E5E5E5"> don't really know exactly what</font>

426
00:15:59,120 --> 00:16:02,660
you've lost<font color="#E5E5E5"> because if you've lost the</font>

427
00:16:00,950 --> 00:16:04,820
index along with your data then you

428
00:16:02,660 --> 00:16:06,199
don't know<font color="#E5E5E5"> what you've lost</font><font color="#CCCCCC"> but maybe</font>

429
00:16:04,820 --> 00:16:08,500
<font color="#E5E5E5">maybe we could work with this maybe we</font>

430
00:16:06,200 --> 00:16:10,910
could do<font color="#E5E5E5"> something so like dynamo</font>

431
00:16:08,500 --> 00:16:13,330
<font color="#CCCCCC">cassandra</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> react they all use this</font>

432
00:16:10,910 --> 00:16:15,920
idea<font color="#E5E5E5"> of constant consistent hashing to</font>

433
00:16:13,330 --> 00:16:18,050
determine where<font color="#E5E5E5"> data should go so I</font>

434
00:16:15,920 --> 00:16:19,910
started<font color="#CCCCCC"> looking at that</font><font color="#E5E5E5"> and so I was</font>

435
00:16:18,050 --> 00:16:21,829
<font color="#CCCCCC">looking at data placement and how we how</font>

436
00:16:19,910 --> 00:16:24,620
we place dates are on the different

437
00:16:21,830 --> 00:16:27,560
servers<font color="#E5E5E5"> so consistent hashing is</font>

438
00:16:24,620 --> 00:16:29,780
essentially a way of<font color="#E5E5E5"> placing</font><font color="#CCCCCC"> items into</font>

439
00:16:27,560 --> 00:16:31,640
buckets<font color="#CCCCCC"> and hashing is just a way of</font>

440
00:16:29,780 --> 00:16:33,770
<font color="#E5E5E5">using maths to put</font><font color="#CCCCCC"> items into pockets</font>

441
00:16:31,640 --> 00:16:35,689
<font color="#E5E5E5">and consistent hashing aims to keep the</font>

442
00:16:33,770 --> 00:16:37,550
disruption<font color="#E5E5E5"> to a minimum when the number</font>

443
00:16:35,690 --> 00:16:40,550
<font color="#E5E5E5">of buckets changes and so in our system</font>

444
00:16:37,550 --> 00:16:42,650
<font color="#CCCCCC">that translates to when the number of</font>

445
00:16:40,550 --> 00:16:44,599
<font color="#E5E5E5">nodes in</font><font color="#CCCCCC"> the cluster changes then</font><font color="#E5E5E5"> we</font>

446
00:16:42,650 --> 00:16:46,340
want to<font color="#E5E5E5"> keep the the disruption to</font><font color="#CCCCCC"> a</font>

447
00:16:44,600 --> 00:16:48,170
minimum and<font color="#CCCCCC"> we want the amount</font><font color="#E5E5E5"> of data</font>

448
00:16:46,340 --> 00:16:51,040
<font color="#CCCCCC">that is displaced</font><font color="#E5E5E5"> when all the servers</font>

449
00:16:48,170 --> 00:16:53,479
<font color="#CCCCCC">to keep to stay to a minimum as well</font><font color="#E5E5E5"> so</font>

450
00:16:51,040 --> 00:16:55,819
in this example if we have<font color="#E5E5E5"> five nodes in</font>

451
00:16:53,480 --> 00:16:57,590
a cluster<font color="#CCCCCC"> and one node fails we should</font>

452
00:16:55,820 --> 00:16:59,840
only only<font color="#E5E5E5"> a fifth of the data should</font>

453
00:16:57,590 --> 00:17:01,750
<font color="#E5E5E5">have to move to another</font><font color="#CCCCCC"> node assuming</font>

454
00:16:59,840 --> 00:17:04,640
that we're not<font color="#E5E5E5"> able to replace that node</font>

455
00:17:01,750 --> 00:17:06,500
immediately so I looked into consistent

456
00:17:04,640 --> 00:17:08,690
hashing algorithms<font color="#E5E5E5"> there's a decision</font>

457
00:17:06,500 --> 00:17:10,940
<font color="#E5E5E5">record on the github repository for this</font>

458
00:17:08,690 --> 00:17:13,390
<font color="#E5E5E5">project</font><font color="#CCCCCC"> that goes into</font><font color="#E5E5E5"> more detail and</font>

459
00:17:10,940 --> 00:17:15,560
<font color="#E5E5E5">I'll</font><font color="#CCCCCC"> show</font><font color="#E5E5E5"> these slides afterwards</font>

460
00:17:13,390 --> 00:17:18,830
<font color="#CCCCCC">basically the first</font><font color="#E5E5E5"> one I looked at was</font>

461
00:17:15,560 --> 00:17:20,780
the<font color="#CCCCCC"> Karger algorithm and then and then</font><font color="#E5E5E5"> I</font>

462
00:17:18,829 --> 00:17:23,300
kept<font color="#E5E5E5"> iterating</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> and worked on looked</font>

463
00:17:20,780 --> 00:17:25,579
at jump<font color="#CCCCCC"> ash I'd</font><font color="#E5E5E5"> encourage you</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> look at</font>

464
00:17:23,300 --> 00:17:26,869
the of link to the papers here<font color="#CCCCCC"> I won't</font>

465
00:17:25,579 --> 00:17:30,080
explain<font color="#E5E5E5"> them in detail right</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> cuz I</font>

466
00:17:26,869 --> 00:17:31,820
<font color="#E5E5E5">don't have the time but I'll just show</font>

467
00:17:30,080 --> 00:17:34,550
<font color="#CCCCCC">you the the</font><font color="#E5E5E5"> jump past implementation</font>

468
00:17:31,820 --> 00:17:36,320
which i think is super elegant<font color="#E5E5E5"> jump ash</font>

469
00:17:34,550 --> 00:17:38,530
is an improvement over<font color="#E5E5E5"> the column</font>

470
00:17:36,320 --> 00:17:41,300
algorithm<font color="#E5E5E5"> because it uses less memory</font>

471
00:17:38,530 --> 00:17:42,120
<font color="#CCCCCC">and it's a lot faster another thing I</font>

472
00:17:41,300 --> 00:17:45,990
really<font color="#CCCCCC"> like about</font>

473
00:17:42,120 --> 00:17:48,149
is it that stood out<font color="#E5E5E5"> to</font><font color="#CCCCCC"> me was that</font><font color="#E5E5E5"> it</font>

474
00:17:45,990 --> 00:17:51,059
<font color="#E5E5E5">uses this magic constant which is a</font>

475
00:17:48,150 --> 00:17:53,850
64-bit<font color="#CCCCCC"> congruence or random number</font>

476
00:17:51,059 --> 00:17:56,180
generator<font color="#CCCCCC"> and it uses</font><font color="#E5E5E5"> this magic</font>

477
00:17:53,850 --> 00:17:58,679
constant<font color="#E5E5E5"> to to make this faster so</font>

478
00:17:56,180 --> 00:18:00,450
<font color="#CCCCCC">daemon risky has an</font><font color="#E5E5E5"> implementation of</font>

479
00:17:58,680 --> 00:18:04,110
<font color="#E5E5E5">this and like this is</font><font color="#CCCCCC"> the this</font><font color="#E5E5E5"> is the</font>

480
00:18:00,450 --> 00:18:06,420
<font color="#E5E5E5">whole jump hash algorithm so the</font><font color="#CCCCCC"> other</font>

481
00:18:04,110 --> 00:18:09,659
thing I<font color="#E5E5E5"> needed to figure out was well</font>

482
00:18:06,420 --> 00:18:11,640
the hash function<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> that I using</font>

483
00:18:09,660 --> 00:18:13,890
consistent<font color="#E5E5E5"> hashing needs a partition key</font>

484
00:18:11,640 --> 00:18:16,410
so I need<font color="#CCCCCC"> just figure out</font><font color="#E5E5E5"> what that</font>

485
00:18:13,890 --> 00:18:18,660
partition<font color="#E5E5E5"> key could</font><font color="#CCCCCC"> be and the choice of</font>

486
00:18:16,410 --> 00:18:20,880
partition key<font color="#E5E5E5"> could have a big impact on</font>

487
00:18:18,660 --> 00:18:23,550
<font color="#E5E5E5">how</font><font color="#CCCCCC"> many nodes you have to query when</font>

488
00:18:20,880 --> 00:18:25,020
you're querying data and<font color="#E5E5E5"> also how</font><font color="#CCCCCC"> many</font>

489
00:18:23,550 --> 00:18:28,770
nodes are<font color="#E5E5E5"> ingesting</font><font color="#CCCCCC"> data at any</font><font color="#E5E5E5"> one</font>

490
00:18:25,020 --> 00:18:29,940
point in time<font color="#E5E5E5"> so again I went into a lot</font>

491
00:18:28,770 --> 00:18:33,300
I've gone into<font color="#CCCCCC"> detail on</font><font color="#E5E5E5"> the github</font>

492
00:18:29,940 --> 00:18:34,620
repository for how to choose this<font color="#E5E5E5"> but</font>

493
00:18:33,300 --> 00:18:37,470
what to<font color="#CCCCCC"> include in this was a</font><font color="#E5E5E5"> critical</font>

494
00:18:34,620 --> 00:18:40,080
decision<font color="#E5E5E5"> in the system and we need to</font>

495
00:18:37,470 --> 00:18:42,530
store<font color="#E5E5E5"> three copies</font><font color="#CCCCCC"> of each shard of</font><font color="#E5E5E5"> each</font>

496
00:18:40,080 --> 00:18:44,820
copy of data<font color="#E5E5E5"> so I achieved this</font><font color="#CCCCCC"> by</font>

497
00:18:42,530 --> 00:18:48,360
prepending the<font color="#E5E5E5"> replica number</font><font color="#CCCCCC"> two the</font>

498
00:18:44,820 --> 00:18:50,639
partition key so then I<font color="#E5E5E5"> was like okay</font>

499
00:18:48,360 --> 00:18:52,490
well<font color="#E5E5E5"> I know like where to put the data</font>

500
00:18:50,640 --> 00:18:54,990
and how to<font color="#E5E5E5"> index it but like how do i</font>

501
00:18:52,490 --> 00:18:56,460
how do I store it on disk<font color="#E5E5E5"> and I started</font>

502
00:18:54,990 --> 00:18:58,920
<font color="#E5E5E5">looking</font><font color="#CCCCCC"> at different kind of structures</font>

503
00:18:56,460 --> 00:19:03,570
different libraries<font color="#CCCCCC"> I'd like</font><font color="#E5E5E5"> to started</font>

504
00:18:58,920 --> 00:19:05,220
working with<font color="#E5E5E5"> Roxie B and really I mean</font>

505
00:19:03,570 --> 00:19:07,080
storage is<font color="#E5E5E5"> really hard and I</font><font color="#CCCCCC"> could have</font>

506
00:19:05,220 --> 00:19:07,980
spent<font color="#E5E5E5"> I mean this could</font><font color="#CCCCCC"> have been</font><font color="#E5E5E5"> a</font>

507
00:19:07,080 --> 00:19:10,590
project<font color="#CCCCCC"> in itself</font>

508
00:19:07,980 --> 00:19:12,660
and luckily around the same time<font color="#CCCCCC"> Fabian</font>

509
00:19:10,590 --> 00:19:15,030
and the<font color="#E5E5E5"> Prometheus team were</font><font color="#CCCCCC"> working on</font>

510
00:19:12,660 --> 00:19:16,800
<font color="#E5E5E5">this TST B library and I thought well</font>

511
00:19:15,030 --> 00:19:18,720
I'm already integrating with<font color="#E5E5E5"> heavily</font>

512
00:19:16,800 --> 00:19:23,070
with Prometheus so why not<font color="#E5E5E5"> just use this</font>

513
00:19:18,720 --> 00:19:25,500
<font color="#CCCCCC">library so the the interfaces for this</font>

514
00:19:23,070 --> 00:19:27,000
<font color="#CCCCCC">library were really clean to use and the</font>

515
00:19:25,500 --> 00:19:30,110
conclusion I got from this was a good

516
00:19:27,000 --> 00:19:32,940
program<font color="#E5E5E5"> programmers</font><font color="#CCCCCC"> or lazy programmers</font>

517
00:19:30,110 --> 00:19:34,350
constructively so because if you can

518
00:19:32,940 --> 00:19:37,740
reuse<font color="#E5E5E5"> something then why build it</font>

519
00:19:34,350 --> 00:19:40,590
yourself<font color="#E5E5E5"> so I solved the on disk storage</font>

520
00:19:37,740 --> 00:19:42,030
problem<font color="#E5E5E5"> by using</font><font color="#CCCCCC"> an existing</font><font color="#E5E5E5"> library so</font>

521
00:19:40,590 --> 00:19:45,209
this is the<font color="#CCCCCC"> architecture that I came up</font>

522
00:19:42,030 --> 00:19:47,220
<font color="#CCCCCC">with so no centralized index to keep the</font>

523
00:19:45,210 --> 00:19:49,860
ingestion throughput high so the only

524
00:19:47,220 --> 00:19:51,960
shared state is a node metadata<font color="#E5E5E5"> each</font>

525
00:19:49,860 --> 00:19:54,570
node in the system has its has the same

526
00:19:51,960 --> 00:19:58,350
role<font color="#E5E5E5"> and any</font>

527
00:19:54,570 --> 00:20:02,220
<font color="#CCCCCC">no oneno</font><font color="#E5E5E5"> can receive data and any node</font>

528
00:19:58,350 --> 00:20:05,250
can<font color="#CCCCCC"> be queried as well so what about</font>

529
00:20:02,220 --> 00:20:06,840
testing well<font color="#CCCCCC"> I found</font><font color="#E5E5E5"> that integration</font>

530
00:20:05,250 --> 00:20:08,429
tests were the most useful because<font color="#E5E5E5"> I</font>

531
00:20:06,840 --> 00:20:09,629
could quickly<font color="#E5E5E5"> iterate on the system</font>

532
00:20:08,429 --> 00:20:12,059
<font color="#CCCCCC">without having to worry about</font><font color="#E5E5E5"> breaking</font>

533
00:20:09,630 --> 00:20:13,799
<font color="#E5E5E5">my unit tests and so integration</font><font color="#CCCCCC"> tests</font>

534
00:20:12,059 --> 00:20:16,408
I had unit<font color="#E5E5E5"> tests as well but integration</font>

535
00:20:13,799 --> 00:20:23,250
<font color="#CCCCCC">tests</font><font color="#E5E5E5"> really gave me the most</font><font color="#CCCCCC"> the most</font>

536
00:20:16,409 --> 00:20:26,909
value<font color="#CCCCCC"> so for the unit tests one thing I</font>

537
00:20:23,250 --> 00:20:28,500
looked at is how is how<font color="#CCCCCC"> even is the data</font>

538
00:20:26,909 --> 00:20:30,899
<font color="#E5E5E5">distribution across the nodes in the</font>

539
00:20:28,500 --> 00:20:32,909
<font color="#CCCCCC">cluster so</font><font color="#E5E5E5"> I wanted to make sure that no</font>

540
00:20:30,899 --> 00:20:36,178
single<font color="#E5E5E5"> node we're storing more data than</font>

541
00:20:32,909 --> 00:20:37,620
the others<font color="#E5E5E5"> and also are all replicas of</font>

542
00:20:36,179 --> 00:20:40,679
<font color="#E5E5E5">the data stored on separate nodes so if</font>

543
00:20:37,620 --> 00:20:41,879
I store<font color="#E5E5E5"> three copies of the data I want</font>

544
00:20:40,679 --> 00:20:43,740
to make<font color="#CCCCCC"> sure they don't</font><font color="#E5E5E5"> all end</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> on</font>

545
00:20:41,879 --> 00:20:46,949
the<font color="#E5E5E5"> same node so I wrote unit tests to</font>

546
00:20:43,740 --> 00:20:50,039
do this<font color="#E5E5E5"> and with little histograms</font><font color="#CCCCCC"> and</font>

547
00:20:46,950 --> 00:20:53,610
you can build<font color="#E5E5E5"> histones like this using</font>

548
00:20:50,039 --> 00:20:56,399
the in using the<font color="#CCCCCC"> go</font><font color="#E5E5E5"> testing library</font>

549
00:20:53,610 --> 00:20:59,658
<font color="#E5E5E5">really simply just repeating a character</font>

550
00:20:56,399 --> 00:21:02,820
<font color="#E5E5E5">and I used the</font><font color="#CCCCCC"> standard deviation to</font>

551
00:20:59,659 --> 00:21:05,220
<font color="#E5E5E5">measure what the what the distribution</font>

552
00:21:02,820 --> 00:21:10,830
<font color="#E5E5E5">was between nodes and I used the the go</font>

553
00:21:05,220 --> 00:21:12,600
<font color="#E5E5E5">sub tests to test to test this against</font>

554
00:21:10,830 --> 00:21:14,070
<font color="#E5E5E5">different numbers</font><font color="#CCCCCC"> of replicas and</font>

555
00:21:12,600 --> 00:21:16,408
different numbers<font color="#CCCCCC"> of</font><font color="#E5E5E5"> nodes in the</font>

556
00:21:14,070 --> 00:21:19,080
<font color="#CCCCCC">cluster and this was</font><font color="#E5E5E5"> really helpful</font>

557
00:21:16,409 --> 00:21:20,669
<font color="#CCCCCC">because</font><font color="#E5E5E5"> when I changed when I changed</font>

558
00:21:19,080 --> 00:21:22,230
the consistent hashing algorithm I could

559
00:21:20,669 --> 00:21:23,610
actually see the<font color="#E5E5E5"> difference and see the</font>

560
00:21:22,230 --> 00:21:26,580
improvement in balance when<font color="#CCCCCC"> I</font><font color="#E5E5E5"> switch to</font>

561
00:21:23,610 --> 00:21:28,258
<font color="#E5E5E5">jump ash so the other thing I looked at</font>

562
00:21:26,580 --> 00:21:30,509
<font color="#CCCCCC">was data</font><font color="#E5E5E5"> displacement so if I remove a</font>

563
00:21:28,259 --> 00:21:32,190
node how much data<font color="#E5E5E5"> has</font><font color="#CCCCCC"> to move and</font><font color="#E5E5E5"> this</font>

564
00:21:30,509 --> 00:21:36,029
helped<font color="#CCCCCC"> me find a book</font><font color="#E5E5E5"> about because I</font>

565
00:21:32,190 --> 00:21:37,559
was<font color="#E5E5E5"> I was sorting the list of nodes</font>

566
00:21:36,029 --> 00:21:38,879
alphabetically<font color="#CCCCCC"> cuz I figured</font><font color="#E5E5E5"> that would</font>

567
00:21:37,559 --> 00:21:41,279
make it more<font color="#E5E5E5"> deterministic and</font>

568
00:21:38,879 --> 00:21:42,899
determinism<font color="#E5E5E5"> is a good thing but in this</font>

569
00:21:41,279 --> 00:21:44,399
case<font color="#E5E5E5"> it didn't actually help because it</font>

570
00:21:42,899 --> 00:21:46,439
worked against<font color="#E5E5E5"> the jump hash the way</font>

571
00:21:44,399 --> 00:21:47,699
that jump hash works<font color="#CCCCCC"> and in</font><font color="#E5E5E5"> the in the</font>

572
00:21:46,440 --> 00:21:49,259
jump hash paper it says that the main

573
00:21:47,700 --> 00:21:51,929
limitation is<font color="#E5E5E5"> the buckets must be</font>

574
00:21:49,259 --> 00:21:54,840
numbered sequentially<font color="#CCCCCC"> and I was treating</font>

575
00:21:51,929 --> 00:21:57,450
I was treating them as names<font color="#E5E5E5"> of servers</font>

576
00:21:54,840 --> 00:21:59,399
<font color="#E5E5E5">rather than just numbers of pockets so</font>

577
00:21:57,450 --> 00:22:01,710
my conclusion was that<font color="#E5E5E5"> each node in the</font>

578
00:21:59,399 --> 00:22:05,539
cluster<font color="#E5E5E5"> needed to remember which in</font>

579
00:22:01,710 --> 00:22:05,539
which order it joined the cluster

580
00:22:06,050 --> 00:22:09,200
the other kind of sensor<font color="#E5E5E5"> wrote</font><font color="#CCCCCC"> war</font>

581
00:22:07,490 --> 00:22:12,050
acceptance tests<font color="#E5E5E5"> and I did these by</font>

582
00:22:09,200 --> 00:22:14,510
executing<font color="#E5E5E5"> the the binary itself and that</font>

583
00:22:12,050 --> 00:22:15,770
allowed<font color="#CCCCCC"> me to do things</font><font color="#E5E5E5"> like test if my</font>

584
00:22:14,510 --> 00:22:19,220
command<font color="#E5E5E5"> line flags were still working</font>

585
00:22:15,770 --> 00:22:21,110
<font color="#CCCCCC">and I also did</font><font color="#E5E5E5"> things like test if I</font>

586
00:22:19,220 --> 00:22:23,140
look for certain canary metrics to make

587
00:22:21,110 --> 00:22:25,729
sure I hadn't forgot to register metrics

588
00:22:23,140 --> 00:22:28,280
but also other<font color="#CCCCCC"> things</font><font color="#E5E5E5"> like can</font><font color="#CCCCCC"> I query</font>

589
00:22:25,730 --> 00:22:30,850
can I can I find the result of<font color="#CCCCCC"> 1+1</font><font color="#E5E5E5"> and</font>

590
00:22:28,280 --> 00:22:32,930
can<font color="#E5E5E5"> I query data out of the system</font><font color="#CCCCCC"> I</font>

591
00:22:30,850 --> 00:22:35,000
mentioned the integration<font color="#E5E5E5"> test is being</font>

592
00:22:32,930 --> 00:22:35,960
the most effective<font color="#CCCCCC"> there</font><font color="#E5E5E5"> wasn't</font>

593
00:22:35,000 --> 00:22:38,990
crossover between<font color="#E5E5E5"> these in the</font>

594
00:22:35,960 --> 00:22:42,140
acceptance tests<font color="#E5E5E5"> but they they were by</font>

595
00:22:38,990 --> 00:22:44,150
far but the the integration<font color="#E5E5E5"> test focused</font>

596
00:22:42,140 --> 00:22:47,420
more on the integration<font color="#CCCCCC"> with other</font>

597
00:22:44,150 --> 00:22:48,860
services such as<font color="#CCCCCC"> Prometheus and I</font>

598
00:22:47,420 --> 00:22:51,200
actually had<font color="#CCCCCC"> Prometheus writing data</font>

599
00:22:48,860 --> 00:22:52,699
into the system<font color="#E5E5E5"> and then I was able to</font>

600
00:22:51,200 --> 00:22:54,800
query back out again<font color="#CCCCCC"> to make</font><font color="#E5E5E5"> sure that</font>

601
00:22:52,700 --> 00:22:57,110
that worked and I when I queried<font color="#E5E5E5"> it back</font>

602
00:22:54,800 --> 00:22:58,250
out I<font color="#E5E5E5"> would use the official Prometheus</font>

603
00:22:57,110 --> 00:22:59,750
client library so I could be<font color="#CCCCCC"> sure that</font>

604
00:22:58,250 --> 00:23:01,070
<font color="#CCCCCC">my system worked with both</font><font color="#E5E5E5"> the</font>

605
00:22:59,750 --> 00:23:02,690
Prometheus server and the official

606
00:23:01,070 --> 00:23:04,490
client<font color="#E5E5E5"> libraries and I use docker</font>

607
00:23:02,690 --> 00:23:06,620
compose for<font color="#E5E5E5"> this for portability</font><font color="#CCCCCC"> it was</font>

608
00:23:04,490 --> 00:23:08,510
<font color="#E5E5E5">really easy to get set</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> and I had the</font>

609
00:23:06,620 --> 00:23:11,030
docker compose integration test running

610
00:23:08,510 --> 00:23:13,490
<font color="#E5E5E5">in Travis CI for every every pull</font>

611
00:23:11,030 --> 00:23:17,930
request<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> actually worked really</font>

612
00:23:13,490 --> 00:23:20,120
<font color="#E5E5E5">well so I'd highly</font><font color="#CCCCCC"> recommend this I also</font>

613
00:23:17,930 --> 00:23:22,910
set up a benchmarking framework so I

614
00:23:20,120 --> 00:23:24,830
could see how the system<font color="#E5E5E5"> is working as</font>

615
00:23:22,910 --> 00:23:28,820
it's running<font color="#CCCCCC"> and not</font><font color="#E5E5E5"> allowed me to do</font>

616
00:23:24,830 --> 00:23:32,120
things<font color="#E5E5E5"> like graph my throughput and also</font>

617
00:23:28,820 --> 00:23:35,620
CPU usage usage and memory and again I

618
00:23:32,120 --> 00:23:40,340
used the benchmarking<font color="#E5E5E5"> framework was was</font>

619
00:23:35,620 --> 00:23:43,790
harness was in using docker compose<font color="#E5E5E5"> I'll</font>

620
00:23:40,340 --> 00:23:44,990
just go<font color="#E5E5E5"> through these I use PDF to help</font>

621
00:23:43,790 --> 00:23:46,730
<font color="#E5E5E5">determine where I could speed things up</font>

622
00:23:44,990 --> 00:23:48,590
<font color="#CCCCCC">I</font><font color="#E5E5E5"> think that's been covered</font><font color="#CCCCCC"> and like</font><font color="#E5E5E5"> to</font>

623
00:23:46,730 --> 00:23:52,460
talk in<font color="#CCCCCC"> more detail</font><font color="#E5E5E5"> so I was just skip</font>

624
00:23:48,590 --> 00:23:55,820
<font color="#E5E5E5">through</font><font color="#CCCCCC"> that and the last thing I want</font>

625
00:23:52,460 --> 00:23:57,440
to<font color="#E5E5E5"> say is that I what I think a chance</font>

626
00:23:55,820 --> 00:24:00,350
to do this but I<font color="#CCCCCC"> really</font><font color="#E5E5E5"> wanted to do it</font>

627
00:23:57,440 --> 00:24:02,090
<font color="#CCCCCC">is in failure injection in in with</font>

628
00:24:00,350 --> 00:24:04,100
docker compose you can use failure

629
00:24:02,090 --> 00:24:06,139
injection to test how<font color="#CCCCCC"> your how you</font>

630
00:24:04,100 --> 00:24:08,870
distributed system<font color="#CCCCCC"> manages</font><font color="#E5E5E5"> with failure</font>

631
00:24:06,140 --> 00:24:10,660
so you can have a privileged container

632
00:24:08,870 --> 00:24:13,850
that can stop nodes in the cluster

633
00:24:10,660 --> 00:24:15,230
<font color="#E5E5E5">inject packet loss latency and that</font>

634
00:24:13,850 --> 00:24:16,870
allows you to<font color="#E5E5E5"> see how well the gossip</font>

635
00:24:15,230 --> 00:24:18,670
protocol works

636
00:24:16,870 --> 00:24:21,610
and how well the system<font color="#E5E5E5"> copes with</font>

637
00:24:18,670 --> 00:24:23,080
failure so our conclusions<font color="#CCCCCC"> I think the</font>

638
00:24:21,610 --> 00:24:26,320
greatest<font color="#E5E5E5"> challenge in this writing</font>

639
00:24:23,080 --> 00:24:27,790
distributed systems<font color="#E5E5E5"> is anticipating how</font>

640
00:24:26,320 --> 00:24:29,800
that will fail and<font color="#E5E5E5"> how they lose data</font>

641
00:24:27,790 --> 00:24:31,060
<font color="#E5E5E5">the implementation is already hardened</font>

642
00:24:29,800 --> 00:24:33,040
itself but it's<font color="#CCCCCC"> even harder to figure</font>

643
00:24:31,060 --> 00:24:34,300
<font color="#E5E5E5">out how they're</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> fail and the</font>

644
00:24:33,040 --> 00:24:35,680
other conclusion<font color="#E5E5E5"> I took away</font><font color="#CCCCCC"> is make</font>

645
00:24:34,300 --> 00:24:37,540
sure<font color="#E5E5E5"> you understand the trade-offs that</font>

646
00:24:35,680 --> 00:24:39,220
<font color="#CCCCCC">your production systems are making</font>

647
00:24:37,540 --> 00:24:42,970
<font color="#CCCCCC">because they are they are making</font>

648
00:24:39,220 --> 00:24:44,710
trade-offs<font color="#E5E5E5"> and finally</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> get used app</font>

649
00:24:42,970 --> 00:24:47,470
it's awesome so thank you<font color="#CCCCCC"> so</font><font color="#E5E5E5"> much to Sam</font>

650
00:24:44,710 --> 00:24:50,020
and<font color="#E5E5E5"> the other contributors to DEP and</font><font color="#CCCCCC"> if</font>

651
00:24:47,470 --> 00:24:52,180
you're<font color="#E5E5E5"> interested in reading more all</font>

652
00:24:50,020 --> 00:24:54,790
the all the links are up<font color="#E5E5E5"> here and I'll</font>

653
00:24:52,180 --> 00:25:01,300
share the slides on on the<font color="#E5E5E5"> FOSDEM site</font>

654
00:24:54,790 --> 00:25:04,300
afterwards<font color="#E5E5E5"> thank you before</font><font color="#CCCCCC"> we do the QA</font>

655
00:25:01,300 --> 00:25:05,980
<font color="#CCCCCC">before we do the QA</font><font color="#E5E5E5"> I want those two</font>

656
00:25:04,300 --> 00:25:09,270
<font color="#E5E5E5">people that</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> taking care</font><font color="#CCCCCC"> of the doors</font>

657
00:25:05,980 --> 00:25:13,150
<font color="#E5E5E5">to go to the doors so do not leave yet</font>

658
00:25:09,270 --> 00:25:15,870
<font color="#E5E5E5">just let you go to that door</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> Marcelo</font>

659
00:25:13,150 --> 00:25:18,700
can you go to<font color="#E5E5E5"> that door Oh perfect okay</font>

660
00:25:15,870 --> 00:25:20,169
<font color="#E5E5E5">because otherwise gonna</font><font color="#CCCCCC"> be a chaos in a</font>

661
00:25:18,700 --> 00:25:23,470
minute<font color="#E5E5E5"> because there's a huge amount of</font>

662
00:25:20,170 --> 00:25:25,660
people<font color="#E5E5E5"> outside already now you're gonna</font>

663
00:25:23,470 --> 00:25:29,640
start<font color="#E5E5E5"> repairing and in the meanwhile we</font>

664
00:25:25,660 --> 00:25:32,640
have the<font color="#CCCCCC"> QA thank you any questions oh</font>

665
00:25:29,640 --> 00:25:32,640
yeah

666
00:25:35,090 --> 00:25:39,899
so the question<font color="#E5E5E5"> was what tools that I</font>

667
00:25:37,620 --> 00:25:41,129
used to benchmark the system so I wrote

668
00:25:39,900 --> 00:25:44,400
a little tool that<font color="#CCCCCC"> would generate load</font>

669
00:25:41,130 --> 00:25:46,260
it<font color="#E5E5E5"> generated random metrics using a seed</font>

670
00:25:44,400 --> 00:25:49,200
<font color="#CCCCCC">so that</font><font color="#E5E5E5"> they would be generated</font>

671
00:25:46,260 --> 00:25:51,720
deterministically<font color="#E5E5E5"> and the benchmarks run</font>

672
00:25:49,200 --> 00:25:54,090
in<font color="#CCCCCC"> doc campos so i'd i'd</font><font color="#E5E5E5"> spend up</font><font color="#CCCCCC"> three</font>

673
00:25:51,720 --> 00:25:56,790
nodes of the cluster<font color="#E5E5E5"> generate metrics</font>

674
00:25:54,090 --> 00:26:01,850
<font color="#E5E5E5">ingest those and then</font><font color="#CCCCCC"> i'd see how they</font>

675
00:25:56,790 --> 00:26:01,850
performed<font color="#E5E5E5"> in prometheus yes</font>

676
00:26:15,570 --> 00:26:20,590
so I'm not<font color="#CCCCCC"> sure I fully understood the</font>

677
00:26:18,429 --> 00:26:22,570
<font color="#E5E5E5">question but I</font><font color="#CCCCCC"> think it was Kaji did the</font>

678
00:26:20,590 --> 00:26:29,080
system provide one interface to query

679
00:26:22,570 --> 00:26:30,520
all<font color="#CCCCCC"> of the metrics no so this</font><font color="#E5E5E5"> I mean</font>

680
00:26:29,080 --> 00:26:32,470
<font color="#E5E5E5">this</font><font color="#CCCCCC"> system is designed to</font><font color="#E5E5E5"> stand alone</font>

681
00:26:30,520 --> 00:26:34,270
so it's it integrates with<font color="#E5E5E5"> Prometheus</font>

682
00:26:32,470 --> 00:26:36,250
<font color="#E5E5E5">but you could use it without</font><font color="#CCCCCC"> Prometheus</font>

683
00:26:34,270 --> 00:26:43,179
it just<font color="#E5E5E5"> it implements all the Prometheus</font>

684
00:26:36,250 --> 00:26:48,840
API is essentially<font color="#CCCCCC"> the</font><font color="#E5E5E5"> majority any</font>

685
00:26:43,179 --> 00:26:54,799
other questions thank<font color="#E5E5E5"> you</font>

686
00:26:48,840 --> 00:26:54,799
[Applause]

