1
00:00:05,359 --> 00:00:09,230
<font color="#CCCCCC">bringing up see ya round</font><font color="#E5E5E5"> about me thank</font>

2
00:00:09,030 --> 00:00:14,969
you

3
00:00:09,230 --> 00:00:14,970
[Applause]

4
00:00:15,179 --> 00:00:25,890
so I'm here today to testify<font color="#E5E5E5"> writing</font>

5
00:00:21,710 --> 00:00:30,089
<font color="#CCCCCC">Shelly</font><font color="#E5E5E5"> parser is nothing different from</font>

6
00:00:25,890 --> 00:00:34,800
a trip to<font color="#E5E5E5"> hell okay</font><font color="#CCCCCC"> and we also try to</font>

7
00:00:30,089 --> 00:00:37,920
<font color="#CCCCCC">show you how a strategy to survive to</font>

8
00:00:34,800 --> 00:00:40,410
try to survive to this but<font color="#E5E5E5"> before that I</font>

9
00:00:37,920 --> 00:00:44,430
just<font color="#E5E5E5"> want to give you some context so</font>

10
00:00:40,410 --> 00:00:47,550
much<font color="#E5E5E5"> tannin is the back of the room</font>

11
00:00:44,430 --> 00:00:52,739
<font color="#CCCCCC">we simply</font><font color="#E5E5E5"> launched a research project as</font>

12
00:00:47,550 --> 00:00:55,349
purpose is to verify the<font color="#CCCCCC"> package</font><font color="#E5E5E5"> script</font>

13
00:00:52,739 --> 00:00:57,930
of<font color="#CCCCCC"> debian</font><font color="#E5E5E5"> and that's very important</font>

14
00:00:55,350 --> 00:01:00,989
<font color="#E5E5E5">because as</font><font color="#CCCCCC"> you know these scripts are</font>

15
00:00:57,930 --> 00:01:03,120
critical pieces of software<font color="#CCCCCC"> okay they</font>

16
00:01:00,989 --> 00:01:05,789
build our software so they must<font color="#E5E5E5"> be</font>

17
00:01:03,120 --> 00:01:08,130
verified we really need strong

18
00:01:05,789 --> 00:01:11,880
guarantees that they will not they<font color="#CCCCCC"> will</font>

19
00:01:08,130 --> 00:01:14,339
not<font color="#E5E5E5"> break our systems okay so we want to</font>

20
00:01:11,880 --> 00:01:17,100
implement a static analyzer for for

21
00:01:14,340 --> 00:01:18,690
<font color="#E5E5E5">these scripts so problem is they are</font>

22
00:01:17,100 --> 00:01:21,208
written in POSIX<font color="#CCCCCC"> charge so the very</font>

23
00:01:18,690 --> 00:01:24,119
first<font color="#E5E5E5"> thing that you</font><font color="#CCCCCC"> have to</font><font color="#E5E5E5"> do is to</font>

24
00:01:21,209 --> 00:01:26,610
write a parser<font color="#E5E5E5"> for</font><font color="#CCCCCC"> prediction and this</font>

25
00:01:24,119 --> 00:01:31,349
is when the nightmare begins

26
00:01:26,610 --> 00:01:34,200
<font color="#CCCCCC">okay actually</font><font color="#E5E5E5"> we are interesting not</font>

27
00:01:31,349 --> 00:01:36,360
<font color="#CCCCCC">only</font><font color="#E5E5E5"> to write a politics shell pasta but</font>

28
00:01:34,200 --> 00:01:38,130
also to write<font color="#E5E5E5"> a parser that</font><font color="#CCCCCC"> you can</font>

29
00:01:36,360 --> 00:01:41,640
trust<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we want to</font><font color="#E5E5E5"> use it in a</font>

30
00:01:38,130 --> 00:01:44,160
<font color="#CCCCCC">verification tool</font><font color="#E5E5E5"> okay so if you want to</font>

31
00:01:41,640 --> 00:01:47,880
<font color="#E5E5E5">do things</font><font color="#CCCCCC"> right you have to</font><font color="#E5E5E5"> open a book</font>

32
00:01:44,160 --> 00:01:51,319
and<font color="#CCCCCC"> to listen to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> hold wisdom of</font>

33
00:01:47,880 --> 00:01:54,958
young sisters and they said<font color="#CCCCCC"> to us that</font>

34
00:01:51,319 --> 00:01:58,920
<font color="#E5E5E5">passing is a difficult programming test</font>

35
00:01:54,959 --> 00:02:02,310
<font color="#E5E5E5">okay so you really have</font><font color="#CCCCCC"> to decompose it</font>

36
00:01:58,920 --> 00:02:05,399
into simpler programming tasks<font color="#E5E5E5"> and they</font>

37
00:02:02,310 --> 00:02:08,429
gave us this beautiful architecture they

38
00:02:05,399 --> 00:02:10,500
said hey first implement a lexical

39
00:02:08,429 --> 00:02:12,330
analyzer analyzer<font color="#E5E5E5"> that</font><font color="#CCCCCC"> will turn your</font>

40
00:02:10,500 --> 00:02:16,319
characters into a stream of tokens<font color="#E5E5E5"> and</font>

41
00:02:12,330 --> 00:02:19,920
then implement a parser that<font color="#E5E5E5"> we will</font>

42
00:02:16,319 --> 00:02:21,599
recognize<font color="#E5E5E5"> this stream of tokens if it</font>

43
00:02:19,920 --> 00:02:23,159
complies with<font color="#E5E5E5"> the grammar of your</font>

44
00:02:21,599 --> 00:02:26,189
language and it will give you a

45
00:02:23,159 --> 00:02:27,239
beautiful<font color="#CCCCCC"> path</font><font color="#E5E5E5"> tree</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> and they worked</font>

46
00:02:26,189 --> 00:02:31,170
a lot

47
00:02:27,240 --> 00:02:34,260
for that so much<font color="#CCCCCC"> so good that they</font>

48
00:02:31,170 --> 00:02:39,230
designed very nice decorative language

49
00:02:34,260 --> 00:02:42,780
to build these boxes<font color="#CCCCCC"> legs and yard</font><font color="#E5E5E5"> specs</font>

50
00:02:39,230 --> 00:02:44,549
<font color="#E5E5E5">specifications are very decorative</font><font color="#CCCCCC"> they</font>

51
00:02:42,780 --> 00:02:47,220
are<font color="#E5E5E5"> very close to the specification you</font>

52
00:02:44,550 --> 00:02:50,550
can trust them and<font color="#E5E5E5"> moreover you can use</font>

53
00:02:47,220 --> 00:02:53,400
code generator<font color="#E5E5E5"> to get code that will</font>

54
00:02:50,550 --> 00:02:55,200
respect<font color="#E5E5E5"> that we will be correct with</font>

55
00:02:53,400 --> 00:02:57,420
respect<font color="#E5E5E5"> to these</font><font color="#CCCCCC"> specifications so</font>

56
00:02:55,200 --> 00:03:02,429
that's a very beautiful architecture

57
00:02:57,420 --> 00:03:04,890
that we will never<font color="#E5E5E5"> forget so you open</font>

58
00:03:02,430 --> 00:03:08,640
the specification of the<font color="#E5E5E5"> shell language</font>

59
00:03:04,890 --> 00:03:12,899
and at first<font color="#E5E5E5"> sight</font><font color="#CCCCCC"> you are happy because</font>

60
00:03:08,640 --> 00:03:16,440
<font color="#E5E5E5">you find in the Yaak</font><font color="#CCCCCC"> gramma</font><font color="#E5E5E5"> away</font><font color="#CCCCCC"> I will</font>

61
00:03:12,900 --> 00:03:20,640
be<font color="#CCCCCC"> able to implement easily</font><font color="#E5E5E5"> a parser but</font>

62
00:03:16,440 --> 00:03:23,910
<font color="#E5E5E5">actually that not really a</font><font color="#CCCCCC"> yagura it is</font>

63
00:03:20,640 --> 00:03:25,950
annotated<font color="#E5E5E5"> by very weird sight conditions</font>

64
00:03:23,910 --> 00:03:29,910
that are out<font color="#CCCCCC"> of which of the</font>

65
00:03:25,950 --> 00:03:31,769
expressiveness<font color="#E5E5E5"> of LR parsers and</font><font color="#CCCCCC"> you go</font>

66
00:03:29,910 --> 00:03:34,710
further<font color="#E5E5E5"> and</font><font color="#CCCCCC"> start the</font><font color="#E5E5E5"> specification then</font>

67
00:03:31,770 --> 00:03:38,250
you understand<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> uu it is low</font>

68
00:03:34,710 --> 00:03:40,410
<font color="#E5E5E5">level it is unconventional</font><font color="#CCCCCC"> informal but</font>

69
00:03:38,250 --> 00:03:43,140
<font color="#E5E5E5">you can't blame these people of this</font>

70
00:03:40,410 --> 00:03:45,720
group<font color="#CCCCCC"> ok because the real</font><font color="#E5E5E5"> problems the</font>

71
00:03:43,140 --> 00:03:48,899
actual truth is that the shell language

72
00:03:45,720 --> 00:03:52,020
<font color="#E5E5E5">it's know something terrible</font>

73
00:03:48,900 --> 00:03:53,940
<font color="#E5E5E5">ok if you don't</font><font color="#CCCCCC"> the trail</font><font color="#E5E5E5"> if you start</font>

74
00:03:52,020 --> 00:03:56,780
to understand this language<font color="#CCCCCC"> you</font><font color="#E5E5E5"> really</font>

75
00:03:53,940 --> 00:04:02,100
understand<font color="#E5E5E5"> that lexical analysis parsing</font>

76
00:03:56,780 --> 00:04:05,550
<font color="#CCCCCC">independent shell nesting dependent that</font>

77
00:04:02,100 --> 00:04:08,250
actually the<font color="#E5E5E5"> whole syntactic</font><font color="#CCCCCC"> energies</font>

78
00:04:05,550 --> 00:04:12,510
problem is undecidable<font color="#E5E5E5"> and ambiguous and</font>

79
00:04:08,250 --> 00:04:17,250
<font color="#CCCCCC">in this in addition to</font><font color="#E5E5E5"> that you have</font><font color="#CCCCCC"> a</font>

80
00:04:12,510 --> 00:04:20,279
lot of<font color="#E5E5E5"> irregularities in</font><font color="#CCCCCC"> the language</font><font color="#E5E5E5"> ok</font>

81
00:04:17,250 --> 00:04:22,890
<font color="#E5E5E5">I will try to convince you</font><font color="#CCCCCC"> that what</font>

82
00:04:20,279 --> 00:04:27,270
I've just said<font color="#CCCCCC"> is true using some</font>

83
00:04:22,890 --> 00:04:31,229
examples first<font color="#E5E5E5"> so first when you you you</font>

84
00:04:27,270 --> 00:04:34,799
read<font color="#E5E5E5"> usual lexical conventions tokens</font>

85
00:04:31,230 --> 00:04:38,010
<font color="#CCCCCC">there are specified positively using</font>

86
00:04:34,800 --> 00:04:39,880
regular expressions<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have a bunch of</font>

87
00:04:38,010 --> 00:04:44,080
<font color="#E5E5E5">regular expressions and you use</font><font color="#CCCCCC"> that you</font>

88
00:04:39,880 --> 00:04:47,920
your<font color="#CCCCCC"> youngest</font><font color="#E5E5E5"> must much strategy to to</font>

89
00:04:44,080 --> 00:04:52,359
recognize<font color="#E5E5E5"> tokens in your in your input</font>

90
00:04:47,920 --> 00:04:55,090
<font color="#E5E5E5">in this specification</font><font color="#CCCCCC"> what is specified</font>

91
00:04:52,360 --> 00:04:57,240
<font color="#E5E5E5">is not the tokens but what is between</font>

92
00:04:55,090 --> 00:05:02,289
<font color="#CCCCCC">the tokens</font><font color="#E5E5E5"> out that they are delimited</font>

93
00:04:57,240 --> 00:05:04,450
<font color="#E5E5E5">okay fine we'll see if that's a</font><font color="#CCCCCC"> problem</font>

94
00:05:02,290 --> 00:05:07,240
and then it's<font color="#E5E5E5"> actually not really</font>

95
00:05:04,450 --> 00:05:09,460
<font color="#CCCCCC">talking recognition it's more</font><font color="#E5E5E5"> pre tokens</font>

96
00:05:07,240 --> 00:05:12,070
recognition it's some form of tokens

97
00:05:09,460 --> 00:05:14,229
that<font color="#E5E5E5"> is not the tokens that the grammar</font>

98
00:05:12,070 --> 00:05:16,420
is using so you will have to turn<font color="#E5E5E5"> them</font>

99
00:05:14,230 --> 00:05:19,170
into we were talking at some point which

100
00:05:16,420 --> 00:05:24,040
is an additional<font color="#E5E5E5"> source of complexity</font>

101
00:05:19,170 --> 00:05:24,520
<font color="#E5E5E5">and if you look look at the usual easy</font>

102
00:05:24,040 --> 00:05:27,280
part

103
00:05:24,520 --> 00:05:30,159
<font color="#E5E5E5">you'll incur new</font><font color="#CCCCCC"> line characters they</font>

104
00:05:27,280 --> 00:05:32,469
<font color="#E5E5E5">are actually very difficult to</font><font color="#CCCCCC"> under</font>

105
00:05:30,160 --> 00:05:35,740
<font color="#CCCCCC">because their interpretation depends on</font>

106
00:05:32,470 --> 00:05:39,030
the passing<font color="#E5E5E5"> context</font><font color="#CCCCCC"> too and</font><font color="#E5E5E5"> maybe the</font>

107
00:05:35,740 --> 00:05:42,280
one very difficult monsters here is

108
00:05:39,030 --> 00:05:45,400
escaping sequences<font color="#E5E5E5"> because there really</font>

109
00:05:42,280 --> 00:05:47,409
depends on very complex nesting of sub

110
00:05:45,400 --> 00:05:50,049
<font color="#E5E5E5">Sheldon double quotes so let me show you</font>

111
00:05:47,410 --> 00:05:54,670
<font color="#E5E5E5">an example for first</font><font color="#CCCCCC"> about token</font>

112
00:05:50,050 --> 00:05:59,500
ignition in any<font color="#CCCCCC"> sane</font><font color="#E5E5E5"> language the first</font>

113
00:05:54,670 --> 00:06:02,920
<font color="#E5E5E5">line will be recognized as I don't know</font>

114
00:05:59,500 --> 00:06:06,460
maybe<font color="#E5E5E5"> five different tokens right but in</font>

115
00:06:02,920 --> 00:06:11,170
<font color="#E5E5E5">shirt that's just one token</font><font color="#CCCCCC"> okay fine on</font>

116
00:06:06,460 --> 00:06:13,989
the southern<font color="#CCCCCC"> line</font><font color="#E5E5E5"> there are</font><font color="#CCCCCC"> chilly four</font>

117
00:06:11,170 --> 00:06:18,880
<font color="#E5E5E5">words and one</font><font color="#CCCCCC"> Operator because you have</font>

118
00:06:13,990 --> 00:06:20,860
spaces<font color="#E5E5E5"> here there</font><font color="#CCCCCC"> oh no not that one</font>

119
00:06:18,880 --> 00:06:24,190
<font color="#E5E5E5">because it is between codes okay okay</font><font color="#CCCCCC"> oh</font>

120
00:06:20,860 --> 00:06:27,430
not<font color="#E5E5E5"> that one because it's between</font>

121
00:06:24,190 --> 00:06:30,820
<font color="#CCCCCC">parities it's okay okay and</font><font color="#E5E5E5"> two other</font>

122
00:06:27,430 --> 00:06:34,900
<font color="#CCCCCC">spaces here so</font><font color="#E5E5E5"> they</font><font color="#CCCCCC"> delimit input but</font>

123
00:06:30,820 --> 00:06:36,940
<font color="#CCCCCC">okay I'm not</font><font color="#E5E5E5"> afraid of that because</font><font color="#CCCCCC"> all</font>

124
00:06:34,900 --> 00:06:40,000
these good news is that<font color="#CCCCCC"> this stuff can</font>

125
00:06:36,940 --> 00:06:41,980
be<font color="#E5E5E5"> expressed using Lex specification not</font>

126
00:06:40,000 --> 00:06:44,760
in the usual style but<font color="#CCCCCC"> still</font><font color="#E5E5E5"> it's</font>

127
00:06:41,980 --> 00:06:47,740
feasible so<font color="#CCCCCC"> Kay I'm not afraid</font><font color="#E5E5E5"> for now</font>

128
00:06:44,760 --> 00:06:51,210
let's talk<font color="#CCCCCC"> about new line now actually</font>

129
00:06:47,740 --> 00:06:53,110
new lines<font color="#E5E5E5"> are four of four different</font>

130
00:06:51,210 --> 00:06:55,450
interpretation in

131
00:06:53,110 --> 00:06:56,610
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> different in the partition on</font>

132
00:06:55,450 --> 00:07:00,250
line<font color="#E5E5E5"> one</font>

133
00:06:56,610 --> 00:07:02,560
new line<font color="#E5E5E5"> is actually</font><font color="#CCCCCC"> your token it's</font>

134
00:07:00,250 --> 00:07:04,720
equivalent<font color="#CCCCCC"> of semicolon it's the one</font>

135
00:07:02,560 --> 00:07:08,380
that<font color="#E5E5E5"> Tamil</font><font color="#CCCCCC"> it's the sequence</font><font color="#E5E5E5"> on which</font>

136
00:07:04,720 --> 00:07:11,470
you are in iterating on this<font color="#E5E5E5"> on the</font>

137
00:07:08,380 --> 00:07:14,650
seven line<font color="#E5E5E5"> the new line is part of the</font>

138
00:07:11,470 --> 00:07:16,570
<font color="#E5E5E5">comment so it is ignored okay on the</font>

139
00:07:14,650 --> 00:07:20,580
third<font color="#E5E5E5"> line it is preceded by a backslash</font>

140
00:07:16,570 --> 00:07:24,880
so it's a line continuation okay and

141
00:07:20,580 --> 00:07:29,200
finally on<font color="#E5E5E5"> the line five</font><font color="#CCCCCC"> it's the end of</font>

142
00:07:24,880 --> 00:07:31,810
phrase marker so<font color="#E5E5E5"> you have five no four</font>

143
00:07:29,200 --> 00:07:33,849
sorry<font color="#CCCCCC"> different meanings for new line</font>

144
00:07:31,810 --> 00:07:36,340
and when you are designing your<font color="#E5E5E5"> lexicon</font>

145
00:07:33,850 --> 00:07:38,410
<font color="#CCCCCC">that is you have to have</font><font color="#E5E5E5"> a very smart</font>

146
00:07:36,340 --> 00:07:40,359
logic to understand which<font color="#CCCCCC"> newline</font>

147
00:07:38,410 --> 00:07:43,480
characters must be ignored and which one

148
00:07:40,360 --> 00:07:47,560
should<font color="#CCCCCC"> be transmitted to the parser okay</font>

149
00:07:43,480 --> 00:07:53,169
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> it's a bit complicated maybe</font><font color="#E5E5E5"> you</font>

150
00:07:47,560 --> 00:07:57,190
want<font color="#CCCCCC"> to escape but before</font><font color="#E5E5E5"> that I have</font><font color="#CCCCCC"> a</font>

151
00:07:53,169 --> 00:07:59,969
quiz for<font color="#E5E5E5"> you</font><font color="#CCCCCC"> who</font><font color="#E5E5E5"> knows which of</font><font color="#CCCCCC"> these</font>

152
00:07:57,190 --> 00:08:03,880
comments will output two backslashes

153
00:07:59,970 --> 00:08:07,560
<font color="#E5E5E5">okay raise raise your hand if you think</font>

154
00:08:03,880 --> 00:08:08,740
<font color="#E5E5E5">it's the first one okay so second</font><font color="#CCCCCC"> one</font>

155
00:08:07,560 --> 00:08:12,930
okay

156
00:08:08,740 --> 00:08:17,830
the third one okay<font color="#CCCCCC"> you you are an expert</font>

157
00:08:12,930 --> 00:08:20,890
<font color="#E5E5E5">it's the third</font><font color="#CCCCCC"> one what six backslashes</font>

158
00:08:17,830 --> 00:08:24,580
I don't understand why<font color="#E5E5E5"> I can explain you</font>

159
00:08:20,890 --> 00:08:27,909
why this is<font color="#E5E5E5"> a reason</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> I need</font><font color="#CCCCCC"> one hour</font>

160
00:08:24,580 --> 00:08:30,659
<font color="#E5E5E5">to explain that so I won't do</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> but</font>

161
00:08:27,910 --> 00:08:35,440
<font color="#E5E5E5">now take</font><font color="#CCCCCC"> this escape sequence and put it</font>

162
00:08:30,660 --> 00:08:37,960
between<font color="#E5E5E5"> back slashes</font><font color="#CCCCCC"> backwards sorry</font>

163
00:08:35,440 --> 00:08:41,710
that shouldn't change<font color="#E5E5E5"> the semantics of</font>

164
00:08:37,960 --> 00:08:45,910
this escape sequence of course<font color="#CCCCCC"> oh no</font>

165
00:08:41,710 --> 00:08:48,070
that does so<font color="#CCCCCC"> that's what I meant</font><font color="#E5E5E5"> by the</font>

166
00:08:45,910 --> 00:08:50,670
fact that escaping depends on the

167
00:08:48,070 --> 00:08:55,360
nesting of<font color="#E5E5E5"> sub shells and double quotes</font>

168
00:08:50,670 --> 00:08:58,150
<font color="#E5E5E5">okay now let's talk</font><font color="#CCCCCC"> about this promotion</font>

169
00:08:55,360 --> 00:09:01,030
<font color="#E5E5E5">from pre token to tokens at some points</font>

170
00:08:58,150 --> 00:09:03,730
<font color="#CCCCCC">you have a word and you want to turn</font><font color="#E5E5E5"> it</font>

171
00:09:01,030 --> 00:09:06,160
into a reserved<font color="#E5E5E5"> word okay</font>

172
00:09:03,730 --> 00:09:09,279
and actually this promotion

173
00:09:06,160 --> 00:09:12,969
on the<font color="#E5E5E5"> past in context what</font><font color="#CCCCCC"> oh yes</font>

174
00:09:09,279 --> 00:09:16,029
<font color="#E5E5E5">you're you're right when you write the</font>

175
00:09:12,970 --> 00:09:18,339
<font color="#CCCCCC">first line</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> for is at a position</font>

176
00:09:16,029 --> 00:09:21,790
where<font color="#CCCCCC"> all</font><font color="#E5E5E5"> four is expected to start a</font>

177
00:09:18,339 --> 00:09:24,670
loop<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> but of</font><font color="#E5E5E5"> course when four is</font>

178
00:09:21,790 --> 00:09:27,939
<font color="#E5E5E5">just after a</font><font color="#CCCCCC"> lest</font><font color="#E5E5E5"> an argument you can</font>

179
00:09:24,670 --> 00:09:32,199
have a<font color="#E5E5E5"> filename for okay so it means</font>

180
00:09:27,940 --> 00:09:34,949
that<font color="#E5E5E5"> a world</font><font color="#CCCCCC"> will be we</font><font color="#E5E5E5"> will be promoted</font>

181
00:09:32,199 --> 00:09:41,019
to<font color="#CCCCCC"> a</font><font color="#E5E5E5"> reserved world if the passer</font>

182
00:09:34,949 --> 00:09:42,008
<font color="#E5E5E5">expects this reserved word here okay</font>

183
00:09:41,019 --> 00:09:44,350
fine

184
00:09:42,009 --> 00:09:47,769
but<font color="#CCCCCC"> actually it's a bit more complicated</font>

185
00:09:44,350 --> 00:09:50,050
than<font color="#CCCCCC"> that</font><font color="#E5E5E5"> because sometimes if you have</font>

186
00:09:47,769 --> 00:09:53,680
a reserved world where it is not

187
00:09:50,050 --> 00:09:56,910
expected<font color="#E5E5E5"> you don't get a word it is</font>

188
00:09:53,680 --> 00:09:59,529
<font color="#CCCCCC">forbidden</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> you have a lot of</font>

189
00:09:56,910 --> 00:10:02,589
irregularities<font color="#CCCCCC"> like that constraints the</font>

190
00:09:59,529 --> 00:10:03,699
parser with a<font color="#CCCCCC"> dog</font><font color="#E5E5E5"> side conditions</font><font color="#CCCCCC"> okay</font>

191
00:10:02,589 --> 00:10:05,699
fine

192
00:10:03,699 --> 00:10:10,180
but I have some things<font color="#CCCCCC"> that</font><font color="#E5E5E5"> would just</font>

193
00:10:05,699 --> 00:10:14,680
<font color="#E5E5E5">kill you</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> syntactic analysis is</font>

194
00:10:10,180 --> 00:10:19,089
undecidable<font color="#E5E5E5"> because of areas so areas is</font>

195
00:10:14,680 --> 00:10:21,969
a command that works like<font color="#E5E5E5"> preprocessor</font>

196
00:10:19,089 --> 00:10:24,310
if you want it's a macro<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> that is</font>

197
00:10:21,970 --> 00:10:26,980
expanded just<font color="#E5E5E5"> before syntactic analysis</font>

198
00:10:24,310 --> 00:10:29,138
<font color="#E5E5E5">so it means that if you write a text</font>

199
00:10:26,980 --> 00:10:34,769
<font color="#E5E5E5">test like this depending on the</font>

200
00:10:29,139 --> 00:10:37,750
execution<font color="#E5E5E5"> of foo then mystery will</font><font color="#CCCCCC"> be</font>

201
00:10:34,769 --> 00:10:42,089
defined or not and your program will be

202
00:10:37,750 --> 00:10:44,519
syntactically<font color="#CCCCCC"> correct or not</font><font color="#E5E5E5"> that's not</font>

203
00:10:42,089 --> 00:10:48,910
<font color="#CCCCCC">your choice</font>

204
00:10:44,519 --> 00:10:51,339
so yes<font color="#CCCCCC"> I'm writing</font><font color="#E5E5E5"> I've hidden that from</font>

205
00:10:48,910 --> 00:10:53,800
<font color="#E5E5E5">the</font><font color="#CCCCCC"> moment but actually passing depends</font>

206
00:10:51,339 --> 00:10:57,970
on evaluation<font color="#E5E5E5"> okay because this language</font>

207
00:10:53,800 --> 00:11:00,399
is designed<font color="#E5E5E5"> to be in to be used in a way</font>

208
00:10:57,970 --> 00:11:03,120
you pass you<font color="#E5E5E5"> evaluate and you pass again</font>

209
00:11:00,399 --> 00:11:07,000
and so<font color="#CCCCCC"> on but when you have to pass a</font>

210
00:11:03,120 --> 00:11:11,079
<font color="#CCCCCC">script file you can't evaluate you your</font>

211
00:11:07,000 --> 00:11:14,500
your<font color="#E5E5E5"> scripts okay okay so at this</font><font color="#CCCCCC"> point</font>

212
00:11:11,079 --> 00:11:18,339
you may wonder if it's if it is even

213
00:11:14,500 --> 00:11:19,690
possible to<font color="#E5E5E5"> write a shell</font><font color="#CCCCCC"> passer and of</font>

214
00:11:18,339 --> 00:11:24,010
course it is

215
00:11:19,690 --> 00:11:28,300
there<font color="#CCCCCC"> exists in the world</font><font color="#E5E5E5"> programmers</font>

216
00:11:24,010 --> 00:11:29,620
with large<font color="#CCCCCC"> skulls okay</font><font color="#E5E5E5"> and this guy are</font>

217
00:11:28,300 --> 00:11:31,359
able<font color="#CCCCCC"> to deal with that kind of</font>

218
00:11:29,620 --> 00:11:36,580
complexity<font color="#CCCCCC"> for instance if you opened</font>

219
00:11:31,360 --> 00:11:39,400
the source code of - you will find<font color="#CCCCCC"> 160</font>

220
00:11:36,580 --> 00:11:43,480
<font color="#CCCCCC">and</font><font color="#E5E5E5"> six hundred one thousand six hundred</font>

221
00:11:39,400 --> 00:11:45,370
lines of encrypted<font color="#CCCCCC"> say okay so do</font><font color="#E5E5E5"> the</font>

222
00:11:43,480 --> 00:11:48,400
passing with their bare hands

223
00:11:45,370 --> 00:11:51,340
<font color="#E5E5E5">okay so don't you use code generators or</font>

224
00:11:48,400 --> 00:11:54,430
anything like the architecture you<font color="#E5E5E5"> find</font>

225
00:11:51,340 --> 00:11:56,710
in<font color="#E5E5E5"> a book and if you look at bash</font><font color="#CCCCCC"> its</font>

226
00:11:54,430 --> 00:11:58,300
it's based on<font color="#E5E5E5"> a yeah grammar which is</font>

227
00:11:56,710 --> 00:12:00,640
totally different<font color="#E5E5E5"> from the one that you</font>

228
00:11:58,300 --> 00:12:05,979
<font color="#CCCCCC">can</font><font color="#E5E5E5"> find in the stoner but it is also</font>

229
00:12:00,640 --> 00:12:10,390
<font color="#E5E5E5">extended with</font><font color="#CCCCCC"> 5,000 lines of C</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and</font>

230
00:12:05,980 --> 00:12:12,190
you get<font color="#E5E5E5"> something</font><font color="#CCCCCC"> like that I don't want</font>

231
00:12:10,390 --> 00:12:14,830
you<font color="#CCCCCC"> to read</font><font color="#E5E5E5"> that but that's</font><font color="#CCCCCC"> just a</font>

232
00:12:12,190 --> 00:12:17,800
special case<font color="#E5E5E5"> to under for in the in the</font>

233
00:12:14,830 --> 00:12:20,530
code<font color="#E5E5E5"> of - okay you have this very</font>

234
00:12:17,800 --> 00:12:24,329
complex control flow global variables

235
00:12:20,530 --> 00:12:28,800
<font color="#CCCCCC">bit mask</font><font color="#E5E5E5"> and no backtracking but</font>

236
00:12:24,330 --> 00:12:32,920
sometimes something<font color="#CCCCCC"> like looks at it I I</font>

237
00:12:28,800 --> 00:12:34,839
<font color="#E5E5E5">did I I don't have a</font><font color="#CCCCCC"> skull</font><font color="#E5E5E5"> large enough</font>

238
00:12:32,920 --> 00:12:40,120
to<font color="#E5E5E5"> be able to</font><font color="#CCCCCC"> maintain that kind of code</font>

239
00:12:34,840 --> 00:12:45,610
<font color="#E5E5E5">and to trust it</font><font color="#CCCCCC"> okay so that's not</font><font color="#E5E5E5"> the</font>

240
00:12:40,120 --> 00:12:48,610
way<font color="#CCCCCC"> we followed we tried to to</font><font color="#E5E5E5"> continue</font>

241
00:12:45,610 --> 00:12:51,600
with the traditional<font color="#CCCCCC"> architecture and to</font>

242
00:12:48,610 --> 00:12:54,400
just<font color="#E5E5E5"> make a variation</font><font color="#CCCCCC"> on top of it</font>

243
00:12:51,600 --> 00:12:57,880
because we really<font color="#CCCCCC"> want our parser to be</font>

244
00:12:54,400 --> 00:13:00,510
modular<font color="#CCCCCC"> and to use as much as possible</font>

245
00:12:57,880 --> 00:13:03,100
<font color="#E5E5E5">code generators</font><font color="#CCCCCC"> okay so we have</font>

246
00:13:00,510 --> 00:13:04,750
<font color="#E5E5E5">something a</font><font color="#CCCCCC"> bit different in which you</font>

247
00:13:03,100 --> 00:13:08,530
have a prelector<font color="#CCCCCC"> that is implemented</font>

248
00:13:04,750 --> 00:13:11,770
using<font color="#CCCCCC"> legs</font><font color="#E5E5E5"> something like legs and the</font>

249
00:13:08,530 --> 00:13:14,410
parser which is generated<font color="#CCCCCC"> by also</font><font color="#E5E5E5"> code</font>

250
00:13:11,770 --> 00:13:18,790
<font color="#CCCCCC">generated</font><font color="#E5E5E5"> password generator convenient</font>

251
00:13:14,410 --> 00:13:21,130
<font color="#E5E5E5">and we implemented the path the engine</font>

252
00:13:18,790 --> 00:13:25,209
as an interaction<font color="#CCCCCC"> between the lexer and</font>

253
00:13:21,130 --> 00:13:27,010
<font color="#E5E5E5">the parser so now the</font><font color="#CCCCCC"> lecture</font><font color="#E5E5E5"> transmit</font>

254
00:13:25,210 --> 00:13:29,950
tokens to the<font color="#CCCCCC"> passive at the</font><font color="#E5E5E5"> process</font>

255
00:13:27,010 --> 00:13:32,170
also able<font color="#CCCCCC"> to transmit it</font><font color="#E5E5E5"> states to the</font>

256
00:13:29,950 --> 00:13:34,600
<font color="#E5E5E5">Alexa</font><font color="#CCCCCC"> okay</font>

257
00:13:32,170 --> 00:13:37,060
what does that mean<font color="#E5E5E5"> well first we have</font>

258
00:13:34,600 --> 00:13:40,180
we<font color="#CCCCCC"> are very proud of</font><font color="#E5E5E5"> something we were</font>

259
00:13:37,060 --> 00:13:42,219
able<font color="#CCCCCC"> to take to the yeah gram of</font><font color="#E5E5E5"> the</font>

260
00:13:40,180 --> 00:13:45,250
standard<font color="#E5E5E5"> and cut it and</font><font color="#CCCCCC"> paste it in our</font>

261
00:13:42,220 --> 00:13:48,190
development<font color="#E5E5E5"> and buy and build how</font><font color="#CCCCCC"> code</font>

262
00:13:45,250 --> 00:13:51,220
<font color="#E5E5E5">around it so we are</font><font color="#CCCCCC"> very confident that</font>

263
00:13:48,190 --> 00:13:53,500
we<font color="#CCCCCC"> are capturing</font><font color="#E5E5E5"> what the people that</font>

264
00:13:51,220 --> 00:13:57,700
wrote the specification are are trying

265
00:13:53,500 --> 00:14:00,339
to convey in this<font color="#CCCCCC"> specification as I</font>

266
00:13:57,700 --> 00:14:03,519
said how<font color="#CCCCCC"> prelector is generated by an</font>

267
00:14:00,339 --> 00:14:08,079
<font color="#CCCCCC">Stoddard akamalik specification but</font><font color="#E5E5E5"> the</font>

268
00:14:03,519 --> 00:14:12,399
key ingredients<font color="#CCCCCC"> that make our</font><font color="#E5E5E5"> path of</font>

269
00:14:08,079 --> 00:14:14,829
<font color="#E5E5E5">modular is in fact a feature of mania</font>

270
00:14:12,399 --> 00:14:18,089
which provides us<font color="#E5E5E5"> purely functional</font>

271
00:14:14,829 --> 00:14:22,000
functional and incremental process<font color="#CCCCCC"> and</font>

272
00:14:18,089 --> 00:14:25,660
thanks to that<font color="#E5E5E5"> feature of mania we are</font>

273
00:14:22,000 --> 00:14:30,310
able to<font color="#E5E5E5"> implement very key parsing</font>

274
00:14:25,660 --> 00:14:34,750
techniques in our parser the first one

275
00:14:30,310 --> 00:14:36,250
and the second one we get them thanks to

276
00:14:34,750 --> 00:14:39,279
<font color="#CCCCCC">the fact that we are purely</font><font color="#E5E5E5"> functional</font>

277
00:14:36,250 --> 00:14:43,720
so speculative passing is the<font color="#E5E5E5"> ideas that</font>

278
00:14:39,279 --> 00:14:47,140
you you create a parser<font color="#CCCCCC"> that will go in</font>

279
00:14:43,720 --> 00:14:50,260
the<font color="#CCCCCC"> future in the in the</font><font color="#E5E5E5"> remainder of</font>

280
00:14:47,140 --> 00:14:52,810
<font color="#CCCCCC">your input and maybe crash but you don't</font>

281
00:14:50,260 --> 00:14:54,579
care<font color="#CCCCCC"> I will die</font><font color="#E5E5E5"> but just</font><font color="#CCCCCC"> before it dies</font>

282
00:14:52,810 --> 00:14:57,518
it<font color="#CCCCCC"> will give you some information about</font>

283
00:14:54,579 --> 00:14:59,859
the<font color="#CCCCCC"> future</font><font color="#E5E5E5"> so that your real parser will</font>

284
00:14:57,519 --> 00:15:02,529
be able<font color="#E5E5E5"> to exploit this information and</font>

285
00:14:59,860 --> 00:15:07,000
longest prefix parsing is<font color="#CCCCCC"> does</font><font color="#E5E5E5"> see it's</font>

286
00:15:02,529 --> 00:15:10,149
the other way<font color="#CCCCCC"> around</font><font color="#E5E5E5"> when you have you</font>

287
00:15:07,000 --> 00:15:13,120
have at some<font color="#E5E5E5"> point to narrow you are</font>

288
00:15:10,149 --> 00:15:16,390
<font color="#CCCCCC">able to</font><font color="#E5E5E5"> roll back to a</font><font color="#CCCCCC"> pass or</font><font color="#E5E5E5"> of the</font>

289
00:15:13,120 --> 00:15:19,120
past<font color="#E5E5E5"> to backtrack on your choice</font><font color="#CCCCCC"> and all</font>

290
00:15:16,390 --> 00:15:23,199
this is feasible<font color="#E5E5E5"> because the paths are</font>

291
00:15:19,120 --> 00:15:26,260
purely functional<font color="#E5E5E5"> also our paths are</font>

292
00:15:23,199 --> 00:15:29,079
incremental which means that we can<font color="#E5E5E5"> call</font>

293
00:15:26,260 --> 00:15:32,350
them and they will<font color="#E5E5E5"> just do one step of</font>

294
00:15:29,079 --> 00:15:37,380
passing analysis and give the hand to

295
00:15:32,350 --> 00:15:37,380
the code so that we can for instance

296
00:15:37,529 --> 00:15:42,819
<font color="#E5E5E5">implement lectures which are functions</font>

297
00:15:40,690 --> 00:15:44,350
which<font color="#E5E5E5"> are paralyzed by</font><font color="#CCCCCC"> the state of</font><font color="#E5E5E5"> the</font>

298
00:15:42,819 --> 00:15:48,339
of the parser

299
00:15:44,350 --> 00:15:51,280
and<font color="#E5E5E5"> also at every state of the passenger</font>

300
00:15:48,340 --> 00:15:54,040
analysis<font color="#E5E5E5"> we can insert some</font>

301
00:15:51,280 --> 00:15:56,860
<font color="#E5E5E5">introspection of the</font><font color="#CCCCCC"> passing path of</font>

302
00:15:54,040 --> 00:16:00,250
<font color="#CCCCCC">states in order</font><font color="#E5E5E5"> to deal</font><font color="#CCCCCC"> with the site</font>

303
00:15:56,860 --> 00:16:02,890
<font color="#E5E5E5">conditions that</font><font color="#CCCCCC"> I've talking</font><font color="#E5E5E5"> about in a</font>

304
00:16:00,250 --> 00:16:06,580
modular<font color="#E5E5E5"> way</font><font color="#CCCCCC"> without polluting</font><font color="#E5E5E5"> the rest</font>

305
00:16:02,890 --> 00:16:09,939
of the specification<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so I don't</font>

306
00:16:06,580 --> 00:16:12,130
<font color="#CCCCCC">have enough time</font><font color="#E5E5E5"> to show</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> the code</font>

307
00:16:09,940 --> 00:16:16,060
<font color="#CCCCCC">for these</font><font color="#E5E5E5"> passing techniques but what I</font>

308
00:16:12,130 --> 00:16:19,330
can<font color="#E5E5E5"> show you now is the shape of the</font>

309
00:16:16,060 --> 00:16:22,930
<font color="#E5E5E5">interfaces of the parcels that are</font>

310
00:16:19,330 --> 00:16:25,540
<font color="#E5E5E5">generated</font><font color="#CCCCCC"> by menya</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> usually if you use</font>

311
00:16:22,930 --> 00:16:27,660
I<font color="#CCCCCC"> don't know any password generator like</font>

312
00:16:25,540 --> 00:16:30,459
bison for instance you will get a

313
00:16:27,660 --> 00:16:32,589
passing function like this you it takes

314
00:16:30,460 --> 00:16:34,600
<font color="#E5E5E5">a lecture or</font><font color="#CCCCCC"> something like a</font><font color="#E5E5E5"> lexer and</font>

315
00:16:32,590 --> 00:16:37,450
when you<font color="#E5E5E5"> code you invoke this function</font>

316
00:16:34,600 --> 00:16:40,750
it will take the hand and go through the

317
00:16:37,450 --> 00:16:43,390
passing analysis in one shot until it<font color="#E5E5E5"> is</font>

318
00:16:40,750 --> 00:16:46,060
about to go to the end of<font color="#E5E5E5"> the input and</font>

319
00:16:43,390 --> 00:16:50,470
<font color="#E5E5E5">produce an abstract syntax tree so you</font>

320
00:16:46,060 --> 00:16:53,680
<font color="#E5E5E5">can't you can't interrupt it in the new</font>

321
00:16:50,470 --> 00:16:57,130
what you get when you<font color="#CCCCCC"> use this this</font>

322
00:16:53,680 --> 00:16:59,620
interfaces is actually a checkpoint

323
00:16:57,130 --> 00:17:02,850
<font color="#E5E5E5">which encapsulate the state of the</font>

324
00:16:59,620 --> 00:17:06,190
parser<font color="#CCCCCC"> okay and this</font><font color="#E5E5E5"> state is actually</font>

325
00:17:02,850 --> 00:17:09,099
an algebraic data types<font color="#E5E5E5"> so you have many</font>

326
00:17:06,190 --> 00:17:11,740
<font color="#E5E5E5">cases</font><font color="#CCCCCC"> that describe that classify</font><font color="#E5E5E5"> is the</font>

327
00:17:09,099 --> 00:17:13,869
shape of<font color="#E5E5E5"> the state and you also have an</font>

328
00:17:11,740 --> 00:17:16,270
environment<font color="#E5E5E5"> that contains everything</font>

329
00:17:13,869 --> 00:17:22,389
<font color="#E5E5E5">that is needed</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the parser to execute</font>

330
00:17:16,270 --> 00:17:25,290
<font color="#CCCCCC">okay so thanks to</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can interact</font>

331
00:17:22,390 --> 00:17:28,240
<font color="#CCCCCC">with a</font><font color="#E5E5E5"> passer</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> only two functions</font>

332
00:17:25,290 --> 00:17:31,899
<font color="#CCCCCC">the first one is the author function</font>

333
00:17:28,240 --> 00:17:35,410
that takes a<font color="#E5E5E5"> passer token and produce</font>

334
00:17:31,900 --> 00:17:37,960
your<font color="#E5E5E5"> new parser that takes this token</font>

335
00:17:35,410 --> 00:17:39,760
into<font color="#E5E5E5"> account without distracting the</font>

336
00:17:37,960 --> 00:17:42,640
previous one that's the whole point of

337
00:17:39,760 --> 00:17:45,340
purely functional programming<font color="#CCCCCC"> and the</font>

338
00:17:42,640 --> 00:17:47,560
theory<font color="#E5E5E5"> of this other function with</font><font color="#CCCCCC"> Yuma</font>

339
00:17:45,340 --> 00:17:49,929
that<font color="#CCCCCC"> just said to the pastor oh</font><font color="#E5E5E5"> um okay</font>

340
00:17:47,560 --> 00:17:51,490
just<font color="#E5E5E5"> could you</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> step further</font><font color="#CCCCCC"> okay and</font>

341
00:17:49,930 --> 00:17:54,190
that's the<font color="#E5E5E5"> only two functions</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

342
00:17:51,490 --> 00:17:56,360
have to to learn to<font color="#E5E5E5"> use a system which</font>

343
00:17:54,190 --> 00:17:58,850
<font color="#CCCCCC">is quite</font><font color="#E5E5E5"> simple</font>

344
00:17:56,360 --> 00:18:01,250
<font color="#CCCCCC">okay so it's easy to implement</font>

345
00:17:58,850 --> 00:18:04,129
backtracking<font color="#CCCCCC"> uses</font><font color="#E5E5E5"> a system because you</font>

346
00:18:01,250 --> 00:18:08,720
can keep as many copy of your<font color="#CCCCCC"> path of</font>

347
00:18:04,130 --> 00:18:12,130
<font color="#CCCCCC">states that you as you want okay so to</font>

348
00:18:08,720 --> 00:18:14,840
conclude<font color="#E5E5E5"> so we implemented this</font>

349
00:18:12,130 --> 00:18:17,929
standalone program called mob again

350
00:18:14,840 --> 00:18:20,299
<font color="#E5E5E5">which turn your shell script into syntax</font>

351
00:18:17,929 --> 00:18:24,830
tree represented in<font color="#CCCCCC"> J then we are able</font>

352
00:18:20,299 --> 00:18:26,720
<font color="#CCCCCC">to pass all the scripts</font><font color="#E5E5E5"> of our corpus</font>

353
00:18:24,830 --> 00:18:27,760
which is nice and this<font color="#E5E5E5"> is pretty</font>

354
00:18:26,720 --> 00:18:31,760
efficient<font color="#CCCCCC"> too</font>

355
00:18:27,760 --> 00:18:35,179
so you may ask do<font color="#CCCCCC"> we trust</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> Pig yet</font>

356
00:18:31,760 --> 00:18:39,260
<font color="#E5E5E5">of course</font><font color="#CCCCCC"> no I'm pretty</font><font color="#E5E5E5"> sure that there</font>

357
00:18:35,179 --> 00:18:44,330
are a lot<font color="#CCCCCC"> of bugs inside</font><font color="#E5E5E5"> okay and what</font>

358
00:18:39,260 --> 00:18:46,809
we want is to be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to to refactor the</font>

359
00:18:44,330 --> 00:18:49,789
code and<font color="#E5E5E5"> to write it in such a way that</font>

360
00:18:46,809 --> 00:18:52,908
the mapping<font color="#CCCCCC"> between</font><font color="#E5E5E5"> the specification</font>

361
00:18:49,789 --> 00:18:55,309
<font color="#E5E5E5">and the code</font><font color="#CCCCCC"> is as clear as possible</font>

362
00:18:52,909 --> 00:18:59,630
so<font color="#E5E5E5"> that all the expert can read the code</font>

363
00:18:55,309 --> 00:19:01,580
<font color="#CCCCCC">and assess</font><font color="#E5E5E5"> that we are doing the real we</font>

364
00:18:59,630 --> 00:19:07,399
<font color="#CCCCCC">are using the right</font><font color="#E5E5E5"> interpretation of</font>

365
00:19:01,580 --> 00:19:09,678
this<font color="#E5E5E5"> specification so so thank you for</font>

366
00:19:07,399 --> 00:19:13,090
<font color="#E5E5E5">your attention</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> hope you will not have</font>

367
00:19:09,679 --> 00:19:16,600
too many nightmares<font color="#CCCCCC"> to this night and we</font>

368
00:19:13,090 --> 00:19:20,389
<font color="#CCCCCC">really need bug reports so please use</font>

369
00:19:16,600 --> 00:19:22,270
<font color="#E5E5E5">this Depot</font><font color="#CCCCCC"> and give us something</font>

370
00:19:20,389 --> 00:19:33,389
<font color="#CCCCCC">feedback thank you</font>

371
00:19:22,270 --> 00:19:55,810
[Applause]

372
00:19:33,390 --> 00:19:58,380
one<font color="#E5E5E5"> question yes so the question is yeah</font>

373
00:19:55,810 --> 00:20:09,490
I understand your question<font color="#CCCCCC"> I I know the</font>

374
00:19:58,380 --> 00:20:11,530
yeah yeah yeah yeah<font color="#E5E5E5"> I really have me to</font>

375
00:20:09,490 --> 00:20:15,900
repeat<font color="#CCCCCC"> the</font><font color="#E5E5E5"> question that's my</font><font color="#CCCCCC"> obligation</font>

376
00:20:11,530 --> 00:20:18,399
okay<font color="#E5E5E5"> so the question</font><font color="#CCCCCC"> is why do we</font><font color="#E5E5E5"> use</font>

377
00:20:15,900 --> 00:20:21,040
separate legs around<font color="#CCCCCC"> Parsa and not a</font>

378
00:20:18,400 --> 00:20:24,370
<font color="#CCCCCC">scaler less approach in which</font><font color="#E5E5E5"> you you</font>

379
00:20:21,040 --> 00:20:28,270
have this<font color="#E5E5E5"> lexical analysis inside your</font>

380
00:20:24,370 --> 00:20:30,729
your grammar specification<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the</font>

381
00:20:28,270 --> 00:20:32,980
case for a self<font color="#E5E5E5"> SDF for instance I</font><font color="#CCCCCC"> know</font>

382
00:20:30,730 --> 00:20:35,710
this<font color="#E5E5E5"> framework</font><font color="#CCCCCC"> which you use</font><font color="#E5E5E5"> that kind</font>

383
00:20:32,980 --> 00:20:38,050
<font color="#CCCCCC">of specification</font><font color="#E5E5E5"> actually we</font><font color="#CCCCCC"> really want</font>

384
00:20:35,710 --> 00:20:40,330
to<font color="#E5E5E5"> use</font><font color="#CCCCCC"> a yak specification because</font>

385
00:20:38,050 --> 00:20:43,060
that's the formalism<font color="#E5E5E5"> in which the</font>

386
00:20:40,330 --> 00:20:45,070
specification is written<font color="#CCCCCC"> I mean the</font>

387
00:20:43,060 --> 00:20:49,440
<font color="#CCCCCC">official specification</font><font color="#E5E5E5"> that's one</font><font color="#CCCCCC"> point</font>

388
00:20:45,070 --> 00:20:49,439
and also<font color="#E5E5E5"> I</font><font color="#CCCCCC"> really like</font><font color="#E5E5E5"> my tools</font>

389
00:20:53,250 --> 00:21:01,240
[Applause]

