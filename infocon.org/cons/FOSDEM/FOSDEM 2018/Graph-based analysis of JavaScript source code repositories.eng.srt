1
00:01:11,790 --> 00:01:16,420
<font color="#E5E5E5">okay so welcome everyone and thanks for</font>

2
00:01:14,380 --> 00:01:18,699
<font color="#E5E5E5">the kind introduction Michael my name is</font>

3
00:01:16,420 --> 00:01:21,670
Gabbar Suresh<font color="#E5E5E5"> and I'm a final year PhD</font>

4
00:01:18,700 --> 00:01:24,040
<font color="#CCCCCC">student from</font><font color="#E5E5E5"> Budapest Hungary and in</font>

5
00:01:21,670 --> 00:01:28,090
this<font color="#E5E5E5"> short talk I will talk about how to</font>

6
00:01:24,040 --> 00:01:31,600
make<font color="#E5E5E5"> better software with graphs so as</font>

7
00:01:28,090 --> 00:01:34,180
Michael said<font color="#CCCCCC"> javascript has</font><font color="#E5E5E5"> some sort of</font>

8
00:01:31,600 --> 00:01:36,070
<font color="#E5E5E5">bad name to it but it's difficult to</font>

9
00:01:34,180 --> 00:01:38,470
dispute<font color="#E5E5E5"> that it's very popular so if you</font>

10
00:01:36,070 --> 00:01:41,320
go on Stack Overflow<font color="#E5E5E5"> is consistently</font>

11
00:01:38,470 --> 00:01:43,690
ranked among<font color="#CCCCCC"> the top languages with</font>

12
00:01:41,320 --> 00:01:47,559
respect to the<font color="#CCCCCC"> number of questions asked</font>

13
00:01:43,690 --> 00:01:49,720
and it's<font color="#E5E5E5"> getting standardized so there</font>

14
00:01:47,560 --> 00:01:51,790
is a standards body that releases a<font color="#E5E5E5"> new</font>

15
00:01:49,720 --> 00:01:55,929
version of the standard each year called

16
00:01:51,790 --> 00:01:58,479
ECMAScript<font color="#CCCCCC"> and essentially things are</font>

17
00:01:55,930 --> 00:01:59,979
getting better<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> JavaScript</font>

18
00:01:58,479 --> 00:02:01,720
<font color="#E5E5E5">community is getting</font><font color="#CCCCCC"> a better language</font>

19
00:01:59,979 --> 00:02:04,090
<font color="#E5E5E5">I'm not</font><font color="#CCCCCC"> going to say that it's the best</font>

20
00:02:01,720 --> 00:02:06,009
<font color="#E5E5E5">language or it's like the top most</font>

21
00:02:04,090 --> 00:02:09,640
popular language but it's widely<font color="#CCCCCC"> used</font>

22
00:02:06,009 --> 00:02:11,740
from IOT devices to the browser<font color="#E5E5E5"> so it's</font>

23
00:02:09,639 --> 00:02:13,929
important that we make good JavaScript

24
00:02:11,740 --> 00:02:15,910
code<font color="#E5E5E5"> and one of the</font><font color="#CCCCCC"> techniques</font><font color="#E5E5E5"> to</font>

25
00:02:13,930 --> 00:02:18,580
guarantee good source code is called

26
00:02:15,910 --> 00:02:21,190
<font color="#CCCCCC">static analysis</font><font color="#E5E5E5"> the full name is static</font>

27
00:02:18,580 --> 00:02:23,890
<font color="#E5E5E5">source code analysis which means that we</font>

28
00:02:21,190 --> 00:02:27,090
test software<font color="#E5E5E5"> without compiling and</font>

29
00:02:23,890 --> 00:02:30,339
executing it<font color="#E5E5E5"> so we take the source code</font>

30
00:02:27,090 --> 00:02:34,810
<font color="#CCCCCC">do some</font><font color="#E5E5E5"> analytics on the</font><font color="#CCCCCC"> source code</font>

31
00:02:30,340 --> 00:02:37,269
<font color="#E5E5E5">itself and then try to check rules and</font>

32
00:02:34,810 --> 00:02:40,060
check violations of these rules<font color="#E5E5E5"> on the</font>

33
00:02:37,269 --> 00:02:42,570
source code<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a</font><font color="#CCCCCC"> complimentary</font>

34
00:02:40,060 --> 00:02:45,480
thing to the traditional testing so

35
00:02:42,570 --> 00:02:48,720
basically in most continuous<font color="#E5E5E5"> integration</font>

36
00:02:45,480 --> 00:02:52,420
systems<font color="#CCCCCC"> nowadays</font><font color="#E5E5E5"> you have your</font>

37
00:02:48,720 --> 00:02:54,850
<font color="#E5E5E5">development</font><font color="#CCCCCC"> environment</font><font color="#E5E5E5"> you push code to</font>

38
00:02:52,420 --> 00:02:57,760
the source code repository it then gets

39
00:02:54,850 --> 00:02:59,350
compiled by<font color="#E5E5E5"> the CI server</font><font color="#CCCCCC"> and it gets</font>

40
00:02:57,760 --> 00:03:03,280
tested<font color="#E5E5E5"> by unit tests and</font><font color="#CCCCCC"> integration</font>

41
00:02:59,350 --> 00:03:05,590
tests<font color="#E5E5E5"> and static analysis</font><font color="#CCCCCC"> is sort</font><font color="#E5E5E5"> of</font>

42
00:03:03,280 --> 00:03:07,720
<font color="#E5E5E5">complimentary</font><font color="#CCCCCC"> to all that it's a</font>

43
00:03:05,590 --> 00:03:10,540
different step<font color="#E5E5E5"> because it just reads the</font>

44
00:03:07,720 --> 00:03:12,790
<font color="#E5E5E5">source code does some analytics and then</font>

45
00:03:10,540 --> 00:03:15,370
as a separate feedback loop it returns

46
00:03:12,790 --> 00:03:17,560
the results to the<font color="#E5E5E5"> developer this is</font>

47
00:03:15,370 --> 00:03:21,040
quite<font color="#CCCCCC"> popular so I'm sure most of you</font>

48
00:03:17,560 --> 00:03:23,830
<font color="#CCCCCC">have</font><font color="#E5E5E5"> seen</font><font color="#CCCCCC"> some of the cloud services</font>

49
00:03:21,040 --> 00:03:25,810
like<font color="#E5E5E5"> coda C code climate and so on</font>

50
00:03:23,830 --> 00:03:27,760
<font color="#E5E5E5">but the problem with this is is that</font>

51
00:03:25,810 --> 00:03:29,500
<font color="#E5E5E5">this is an offline feedback loop so</font><font color="#CCCCCC"> you</font>

52
00:03:27,760 --> 00:03:32,350
commit to your code<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> you receive</font>

53
00:03:29,500 --> 00:03:37,060
an email<font color="#CCCCCC"> 15</font><font color="#E5E5E5"> minutes later that your code</font>

54
00:03:32,350 --> 00:03:40,030
is violating this and that rules<font color="#E5E5E5"> another</font>

55
00:03:37,060 --> 00:03:44,080
<font color="#E5E5E5">approach is</font><font color="#CCCCCC"> to use command</font><font color="#E5E5E5"> line tools</font>

56
00:03:40,030 --> 00:03:46,030
and<font color="#E5E5E5"> ID integrated tools if you have done</font>

57
00:03:44,080 --> 00:03:49,210
some C<font color="#E5E5E5"> programming there is an old UNIX</font>

58
00:03:46,030 --> 00:03:51,280
tool called lint<font color="#E5E5E5"> this is such a defining</font>

59
00:03:49,210 --> 00:03:53,920
tool that actually<font color="#CCCCCC"> it gave its name to</font>

60
00:03:51,280 --> 00:03:56,080
the<font color="#E5E5E5"> family of source code analytics</font>

61
00:03:53,920 --> 00:03:57,820
tools called linters<font color="#E5E5E5"> and if you're a</font>

62
00:03:56,080 --> 00:04:01,060
<font color="#E5E5E5">Java</font><font color="#CCCCCC"> developer you're probably aware</font><font color="#E5E5E5"> of</font>

63
00:03:57,820 --> 00:04:03,190
fine box or PMD and<font color="#E5E5E5"> obviously there are</font>

64
00:04:01,060 --> 00:04:05,800
tools<font color="#CCCCCC"> for</font><font color="#E5E5E5"> JavaScript there is</font><font color="#CCCCCC"> es lint</font>

65
00:04:03,190 --> 00:04:10,120
<font color="#CCCCCC">Facebook's flow engine the turn trail</font>

66
00:04:05,800 --> 00:04:12,940
system and so<font color="#E5E5E5"> on so essentially</font><font color="#CCCCCC"> these</font>

67
00:04:10,120 --> 00:04:16,298
give pretty good<font color="#E5E5E5"> coverage but all of</font>

68
00:04:12,940 --> 00:04:18,880
them have some drawbacks<font color="#CCCCCC"> we</font><font color="#E5E5E5"> tried to do</font>

69
00:04:16,298 --> 00:04:21,039
analytics over<font color="#E5E5E5"> JavaScript in the past</font>

70
00:04:18,880 --> 00:04:23,710
and we found that there isn't a<font color="#E5E5E5"> single</font>

71
00:04:21,040 --> 00:04:26,110
system<font color="#CCCCCC"> that</font><font color="#E5E5E5"> allows users to define</font>

72
00:04:23,710 --> 00:04:29,650
global<font color="#E5E5E5"> rules evaluate those rules</font>

73
00:04:26,110 --> 00:04:31,960
efficiently<font color="#E5E5E5"> and can be extended by</font>

74
00:04:29,650 --> 00:04:36,010
custom rules<font color="#CCCCCC"> so these are pretty</font>

75
00:04:31,960 --> 00:04:38,140
difficult<font color="#E5E5E5"> satisfied advanced obviously</font>

76
00:04:36,010 --> 00:04:41,280
others have thought of this problem as

77
00:04:38,140 --> 00:04:43,240
well<font color="#CCCCCC"> so checking global rules is</font>

78
00:04:41,280 --> 00:04:45,719
computationally very<font color="#CCCCCC"> expensive operation</font>

79
00:04:43,240 --> 00:04:48,370
<font color="#CCCCCC">in</font><font color="#E5E5E5"> a large source code repository and</font>

80
00:04:45,720 --> 00:04:51,250
this is actually so slow that<font color="#E5E5E5"> it's</font>

81
00:04:48,370 --> 00:04:54,190
<font color="#E5E5E5">sometimes even difficult to integrate to</font>

82
00:04:51,250 --> 00:04:55,570
<font color="#CCCCCC">the CI workload so obviously</font><font color="#E5E5E5"> there are a</font>

83
00:04:54,190 --> 00:04:58,150
couple of workarounds the first

84
00:04:55,570 --> 00:05:00,849
workaround is just don't<font color="#E5E5E5"> bother with</font>

85
00:04:58,150 --> 00:05:04,419
global rules<font color="#CCCCCC"> write</font><font color="#E5E5E5"> your code in a very</font>

86
00:05:00,850 --> 00:05:07,840
<font color="#E5E5E5">modular very separated way and then use</font>

87
00:05:04,419 --> 00:05:11,200
file level static analysis<font color="#CCCCCC"> be eslint</font><font color="#E5E5E5"> for</font>

88
00:05:07,840 --> 00:05:13,869
one does that<font color="#E5E5E5"> another workaround is</font><font color="#CCCCCC"> to</font>

89
00:05:11,200 --> 00:05:17,590
do some battering on your CI<font color="#E5E5E5"> analytics</font>

90
00:05:13,870 --> 00:05:20,919
so<font color="#E5E5E5"> you run</font><font color="#CCCCCC"> your build</font><font color="#E5E5E5"> and tests</font><font color="#CCCCCC"> on each</font>

91
00:05:17,590 --> 00:05:24,580
commit but you only do a single analysis

92
00:05:20,919 --> 00:05:26,590
<font color="#E5E5E5">a day and</font><font color="#CCCCCC"> also you can do some custom</font>

93
00:05:24,580 --> 00:05:29,440
<font color="#CCCCCC">algorithms so if you make your</font><font color="#E5E5E5"> algorithm</font>

94
00:05:26,590 --> 00:05:31,109
smart enough it is going to be fast but

95
00:05:29,440 --> 00:05:35,950
<font color="#E5E5E5">then it's going to be very difficult to</font>

96
00:05:31,110 --> 00:05:37,200
<font color="#E5E5E5">extend with new rules so in short we</font>

97
00:05:35,950 --> 00:05:39,539
made

98
00:05:37,200 --> 00:05:42,180
important design considerations for the

99
00:05:39,540 --> 00:05:46,170
product<font color="#CCCCCC"> we wanted to</font><font color="#E5E5E5"> create a static</font>

100
00:05:42,180 --> 00:05:49,110
analysis<font color="#CCCCCC"> - for JavaScript</font><font color="#E5E5E5"> that allows</font>

101
00:05:46,170 --> 00:05:52,560
users<font color="#CCCCCC"> to define custom analysis rules be</font>

102
00:05:49,110 --> 00:05:53,820
those global or local and it should

103
00:05:52,560 --> 00:05:56,730
<font color="#E5E5E5">provide high performance</font>

104
00:05:53,820 --> 00:05:59,460
ideally close to real-time evaluation<font color="#CCCCCC"> so</font>

105
00:05:56,730 --> 00:06:01,500
if the user<font color="#E5E5E5"> is editing the</font><font color="#CCCCCC"> code in the</font>

106
00:05:59,460 --> 00:06:03,719
development<font color="#CCCCCC"> environment the user should</font>

107
00:06:01,500 --> 00:06:08,040
be<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> receive timely feedback on</font>

108
00:06:03,720 --> 00:06:10,350
the changes that they made<font color="#E5E5E5"> so one</font><font color="#CCCCCC"> of the</font>

109
00:06:08,040 --> 00:06:12,480
cornerstones of<font color="#E5E5E5"> our approach is the</font>

110
00:06:10,350 --> 00:06:14,640
architecture<font color="#E5E5E5"> and the workflow</font><font color="#CCCCCC"> it's all</font>

111
00:06:12,480 --> 00:06:19,500
built around<font color="#E5E5E5"> incrementality</font><font color="#CCCCCC"> which means</font>

112
00:06:14,640 --> 00:06:22,289
that we<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to do some</font><font color="#E5E5E5"> changes we</font><font color="#CCCCCC"> want</font>

113
00:06:19,500 --> 00:06:24,390
<font color="#E5E5E5">to do the analytics</font><font color="#CCCCCC"> in a way that it</font>

114
00:06:22,290 --> 00:06:29,250
incorporates<font color="#CCCCCC"> the changes made in the</font>

115
00:06:24,390 --> 00:06:31,830
<font color="#E5E5E5">code so essentially first it analyzes</font>

116
00:06:29,250 --> 00:06:34,950
<font color="#E5E5E5">the source code on the whole and then</font>

117
00:06:31,830 --> 00:06:37,050
for each<font color="#E5E5E5"> change it uses incremental</font>

118
00:06:34,950 --> 00:06:38,820
processing so if only a single file is

119
00:06:37,050 --> 00:06:41,310
<font color="#E5E5E5">changed in a fifteen thousand five a</font>

120
00:06:38,820 --> 00:06:44,040
positive<font color="#E5E5E5"> it tracks the changes to that</font>

121
00:06:41,310 --> 00:06:46,140
file<font color="#CCCCCC"> and second we want to use a</font>

122
00:06:44,040 --> 00:06:47,520
declarative query language<font color="#E5E5E5"> now if you're</font>

123
00:06:46,140 --> 00:06:49,530
in the<font color="#CCCCCC"> graph dev room you can probably</font>

124
00:06:47,520 --> 00:06:52,260
guess which<font color="#CCCCCC"> declarative graphical</font>

125
00:06:49,530 --> 00:06:56,520
language that is we<font color="#E5E5E5"> will get back to</font>

126
00:06:52,260 --> 00:06:59,700
<font color="#CCCCCC">that in</font><font color="#E5E5E5"> a moment so this is the high</font>

127
00:06:56,520 --> 00:07:01,200
<font color="#CCCCCC">level architecture of our system it</font>

128
00:06:59,700 --> 00:07:03,120
starts off with<font color="#E5E5E5"> the version</font><font color="#CCCCCC"> control</font>

129
00:07:01,200 --> 00:07:06,150
system all your code is committed to the

130
00:07:03,120 --> 00:07:08,190
<font color="#CCCCCC">version control system</font><font color="#E5E5E5"> it's then loaded</font>

131
00:07:06,150 --> 00:07:10,429
to<font color="#CCCCCC"> the workspace of the analyzer</font><font color="#E5E5E5"> where</font>

132
00:07:08,190 --> 00:07:14,040
<font color="#E5E5E5">it gets transformed to a syntax</font><font color="#CCCCCC"> tree and</font>

133
00:07:10,430 --> 00:07:16,770
it gasps transforms to a semantic graphs

134
00:07:14,040 --> 00:07:20,970
we then load this to the graph database

135
00:07:16,770 --> 00:07:22,950
and we get a set<font color="#E5E5E5"> of analysis rules that</font>

136
00:07:20,970 --> 00:07:26,370
we want to<font color="#E5E5E5"> check and then</font><font color="#CCCCCC"> we perform</font>

137
00:07:22,950 --> 00:07:30,840
continuous checks on the server<font color="#E5E5E5"> and give</font>

138
00:07:26,370 --> 00:07:33,650
feedback<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the client continuously so</font>

139
00:07:30,840 --> 00:07:36,119
what are these steps<font color="#E5E5E5"> if you have ever</font>

140
00:07:33,650 --> 00:07:38,250
<font color="#E5E5E5">played around with a compiler those</font>

141
00:07:36,120 --> 00:07:40,590
should be<font color="#E5E5E5"> very familiar because</font>

142
00:07:38,250 --> 00:07:43,410
basically<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> how most</font><font color="#E5E5E5"> of the</font>

143
00:07:40,590 --> 00:07:45,450
compilers work essentially<font color="#E5E5E5"> they start</font>

144
00:07:43,410 --> 00:07:47,910
off<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the source code which is</font>

145
00:07:45,450 --> 00:07:51,030
<font color="#CCCCCC">sequence of</font><font color="#E5E5E5"> statements for</font><font color="#CCCCCC"> example this</font>

146
00:07:47,910 --> 00:07:53,130
is a<font color="#E5E5E5"> very simple source code which</font><font color="#CCCCCC"> says</font>

147
00:07:51,030 --> 00:07:56,669
we declare<font color="#CCCCCC"> a</font><font color="#E5E5E5"> variable foo which is equal</font>

148
00:07:53,130 --> 00:07:58,860
<font color="#E5E5E5">to one divided</font><font color="#CCCCCC"> by zero</font><font color="#E5E5E5"> it uses a</font>

149
00:07:56,670 --> 00:08:02,130
component<font color="#E5E5E5"> called</font><font color="#CCCCCC"> the tokenizer to split</font>

150
00:07:58,860 --> 00:08:05,010
this into<font color="#E5E5E5"> token into tokens tokens are</font>

151
00:08:02,130 --> 00:08:08,250
the shortest meaningful<font color="#E5E5E5"> character</font>

152
00:08:05,010 --> 00:08:14,450
sequences<font color="#E5E5E5"> in the source code</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> for this</font>

153
00:08:08,250 --> 00:08:17,520
<font color="#E5E5E5">where foo equals 1</font><font color="#CCCCCC"> / 0 we get</font><font color="#E5E5E5"> 6 tokens</font>

154
00:08:14,450 --> 00:08:20,460
the tokens<font color="#E5E5E5"> then go through the parser</font>

155
00:08:17,520 --> 00:08:22,370
which builds the<font color="#CCCCCC"> so-called syntax tree</font>

156
00:08:20,460 --> 00:08:25,320
according<font color="#CCCCCC"> to the grammar specification</font>

157
00:08:22,370 --> 00:08:29,610
for the source code line that we've seen

158
00:08:25,320 --> 00:08:32,970
<font color="#E5E5E5">we get this syntax tree and this is</font>

159
00:08:29,610 --> 00:08:34,740
<font color="#E5E5E5">already quite close to what we</font><font color="#CCCCCC"> want to</font>

160
00:08:32,970 --> 00:08:38,490
<font color="#CCCCCC">use but this is still missing</font><font color="#E5E5E5"> some</font>

161
00:08:34,740 --> 00:08:40,440
semantic<font color="#CCCCCC"> information it's missing on the</font>

162
00:08:38,490 --> 00:08:43,470
<font color="#E5E5E5">scopes which will be added</font><font color="#CCCCCC"> by the scope</font>

163
00:08:40,440 --> 00:08:46,910
<font color="#E5E5E5">analyzer and this missing on information</font>

164
00:08:43,470 --> 00:08:49,470
on<font color="#E5E5E5"> various accessibility features so</font>

165
00:08:46,910 --> 00:08:51,780
essentially the abstract semantic graph

166
00:08:49,470 --> 00:08:54,810
<font color="#CCCCCC">enriches the abstract syntax tree by</font>

167
00:08:51,780 --> 00:08:59,250
adding some scope information so we take

168
00:08:54,810 --> 00:09:02,219
this<font color="#E5E5E5"> and add some</font><font color="#CCCCCC"> more edges actually</font>

169
00:08:59,250 --> 00:09:04,020
<font color="#E5E5E5">once we have already added</font><font color="#CCCCCC"> these edges</font>

170
00:09:02,220 --> 00:09:07,020
it's no longer a tree<font color="#E5E5E5"> because it has</font>

171
00:09:04,020 --> 00:09:10,439
some<font color="#E5E5E5"> cross edges all the scopes are</font>

172
00:09:07,020 --> 00:09:14,340
defined and also<font color="#CCCCCC"> the accessibility</font><font color="#E5E5E5"> kind</font>

173
00:09:10,440 --> 00:09:19,620
and other<font color="#E5E5E5"> meta information</font><font color="#CCCCCC"> are added to</font>

174
00:09:14,340 --> 00:09:21,830
the specific nodes so this is like

175
00:09:19,620 --> 00:09:24,420
compiler construction<font color="#CCCCCC"> in a nutshell and</font>

176
00:09:21,830 --> 00:09:27,510
you can see that<font color="#CCCCCC"> even</font><font color="#E5E5E5"> though we started</font>

177
00:09:24,420 --> 00:09:30,240
<font color="#E5E5E5">off with a very</font><font color="#CCCCCC"> simple experiment</font><font color="#E5E5E5"> like 6</font>

178
00:09:27,510 --> 00:09:32,730
tokens<font color="#E5E5E5"> a single line of code we get more</font>

179
00:09:30,240 --> 00:09:36,750
<font color="#E5E5E5">than 20</font><font color="#CCCCCC"> nodes</font><font color="#E5E5E5"> and this can be a lot</font><font color="#CCCCCC"> more</font>

180
00:09:32,730 --> 00:09:39,480
<font color="#CCCCCC">so for a very sophisticated line of code</font>

181
00:09:36,750 --> 00:09:45,060
we<font color="#E5E5E5"> can get 50 to 100 nodes</font><font color="#CCCCCC"> easily so</font>

182
00:09:39,480 --> 00:09:47,220
these<font color="#E5E5E5"> guys are pretty large</font><font color="#CCCCCC"> graphs we</font>

183
00:09:45,060 --> 00:09:48,839
can<font color="#CCCCCC"> do all sorts of pattern matching</font><font color="#E5E5E5"> I</font>

184
00:09:47,220 --> 00:09:50,790
said that we<font color="#E5E5E5"> are going to use a</font>

185
00:09:48,840 --> 00:09:53,670
declarative graph pattern language<font color="#E5E5E5"> and</font>

186
00:09:50,790 --> 00:09:57,030
this<font color="#E5E5E5"> is cipher so if you have a graph</font>

187
00:09:53,670 --> 00:09:59,339
like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> and you</font><font color="#E5E5E5"> know a bit of</font><font color="#CCCCCC"> cipher</font>

188
00:09:57,030 --> 00:10:01,439
<font color="#E5E5E5">you can actually specify validation</font>

189
00:09:59,340 --> 00:10:04,140
<font color="#CCCCCC">routes for</font><font color="#E5E5E5"> example you don't want your</font>

190
00:10:01,440 --> 00:10:06,540
<font color="#E5E5E5">code to do divisions by</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> so</font>

191
00:10:04,140 --> 00:10:09,300
you create this<font color="#E5E5E5"> rule which matches the</font>

192
00:10:06,540 --> 00:10:12,030
binding identifiers<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are in a binary</font>

193
00:10:09,300 --> 00:10:14,579
expression<font color="#CCCCCC"> then do a filtering</font><font color="#E5E5E5"> where the</font>

194
00:10:12,030 --> 00:10:16,949
<font color="#E5E5E5">expression is a division and the right</font>

195
00:10:14,580 --> 00:10:20,640
value is a zero and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> projection</font>

196
00:10:16,950 --> 00:10:22,290
<font color="#E5E5E5">operation</font><font color="#CCCCCC"> to return</font><font color="#E5E5E5"> the binding and this</font>

197
00:10:20,640 --> 00:10:24,689
is very<font color="#E5E5E5"> useful</font><font color="#CCCCCC"> for the developer because</font>

198
00:10:22,290 --> 00:10:27,120
<font color="#E5E5E5">the developer can fix that instantly</font>

199
00:10:24,690 --> 00:10:29,160
it's<font color="#E5E5E5"> a</font><font color="#CCCCCC"> Van Daan truth that</font><font color="#E5E5E5"> the sooner</font>

200
00:10:27,120 --> 00:10:32,190
the developer<font color="#CCCCCC"> gets feedback on the</font>

201
00:10:29,160 --> 00:10:35,490
errors that<font color="#E5E5E5"> they made the cheaper is to</font>

202
00:10:32,190 --> 00:10:39,180
fix these errors<font color="#CCCCCC"> so ideally we should</font>

203
00:10:35,490 --> 00:10:42,690
<font color="#E5E5E5">give the developers timely feedback on</font>

204
00:10:39,180 --> 00:10:45,329
the mistakes they<font color="#CCCCCC"> made in the code so</font>

205
00:10:42,690 --> 00:10:47,670
workflow wise<font color="#E5E5E5"> it starts with the</font>

206
00:10:45,330 --> 00:10:49,680
<font color="#E5E5E5">developers ID and the version control</font>

207
00:10:47,670 --> 00:10:51,599
<font color="#E5E5E5">system</font><font color="#CCCCCC"> as a first step</font>

208
00:10:49,680 --> 00:10:56,550
code is<font color="#CCCCCC"> loaded from the</font><font color="#E5E5E5"> version control</font>

209
00:10:51,600 --> 00:11:00,390
<font color="#E5E5E5">system and transformed to tokens ASD and</font>

210
00:10:56,550 --> 00:11:04,020
<font color="#E5E5E5">ASG step by step then it's transformed</font>

211
00:11:00,390 --> 00:11:05,910
by a set of cipher queries and Java code

212
00:11:04,020 --> 00:11:10,500
<font color="#E5E5E5">and is loaded</font><font color="#CCCCCC"> to the graph database and</font>

213
00:11:05,910 --> 00:11:12,719
once we have this<font color="#CCCCCC"> we trace the core</font>

214
00:11:10,500 --> 00:11:15,660
issues of<font color="#CCCCCC"> the errors back to the source</font>

215
00:11:12,720 --> 00:11:18,600
code<font color="#E5E5E5"> and display the errors in</font><font color="#CCCCCC"> the</font>

216
00:11:15,660 --> 00:11:21,620
<font color="#E5E5E5">developers ID so once we have a workflow</font>

217
00:11:18,600 --> 00:11:21,620
that<font color="#CCCCCC"> like this running</font>

218
00:11:24,360 --> 00:11:29,670
actually it allows<font color="#CCCCCC"> us</font><font color="#E5E5E5"> to do very cool</font>

219
00:11:27,029 --> 00:11:32,220
things one of<font color="#CCCCCC"> my favorite ones is type</font>

220
00:11:29,670 --> 00:11:34,170
inferencing<font color="#E5E5E5"> because as you know</font>

221
00:11:32,220 --> 00:11:38,190
<font color="#CCCCCC">javascript is a dynamic</font><font color="#E5E5E5"> language and</font>

222
00:11:34,170 --> 00:11:39,779
it's very<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> to write code that throws</font>

223
00:11:38,190 --> 00:11:42,209
runtime errors because of type

224
00:11:39,779 --> 00:11:43,920
violations<font color="#CCCCCC"> obviously there are some</font>

225
00:11:42,209 --> 00:11:46,739
workarounds<font color="#CCCCCC"> for</font><font color="#E5E5E5"> this you can use</font>

226
00:11:43,920 --> 00:11:49,620
typescript or other typed flavors of

227
00:11:46,740 --> 00:11:52,260
<font color="#E5E5E5">JavaScript but you have a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> legacy</font>

228
00:11:49,620 --> 00:11:54,810
<font color="#CCCCCC">JavaScript code</font><font color="#E5E5E5"> that's written in plain</font>

229
00:11:52,260 --> 00:11:58,560
<font color="#E5E5E5">JavaScript and type inferencing is key</font>

230
00:11:54,810 --> 00:12:02,760
to use those<font color="#E5E5E5"> in a way that will</font><font color="#CCCCCC"> not</font>

231
00:11:58,560 --> 00:12:08,160
return errors while while running the

232
00:12:02,760 --> 00:12:10,860
<font color="#E5E5E5">the code so another use case is global</font>

233
00:12:08,160 --> 00:12:14,010
<font color="#E5E5E5">analytics because we have this graph we</font>

234
00:12:10,860 --> 00:12:16,709
can do a lot of<font color="#E5E5E5"> cool reachability style</font>

235
00:12:14,010 --> 00:12:20,399
queries we can do<font color="#E5E5E5"> that code detection we</font>

236
00:12:16,709 --> 00:12:23,310
can do a<font color="#E5E5E5"> detection of async awaits where</font>

237
00:12:20,399 --> 00:12:25,260
you run<font color="#E5E5E5"> an async and it's dangling</font>

238
00:12:23,310 --> 00:12:28,319
<font color="#E5E5E5">somewhere in the code but you'd never do</font>

239
00:12:25,260 --> 00:12:30,839
any weight on<font color="#E5E5E5"> that piece of asynchronous</font>

240
00:12:28,320 --> 00:12:34,430
<font color="#CCCCCC">code and you</font><font color="#E5E5E5"> can do potential division</font>

241
00:12:30,839 --> 00:12:36,870
<font color="#CCCCCC">by</font><font color="#E5E5E5"> zero detection by propagating these</font>

242
00:12:34,430 --> 00:12:40,589
issues to<font color="#E5E5E5"> the code so you can</font><font color="#CCCCCC"> check</font>

243
00:12:36,870 --> 00:12:44,640
whether value can be<font color="#CCCCCC"> zero at the point</font>

244
00:12:40,589 --> 00:12:46,980
<font color="#CCCCCC">of the time that it's evaluated some tag</font>

245
00:12:44,640 --> 00:12:50,490
details<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> will be</font><font color="#E5E5E5"> very interested</font>

246
00:12:46,980 --> 00:12:52,470
<font color="#E5E5E5">interesting for this audience</font><font color="#CCCCCC"> one of the</font>

247
00:12:50,490 --> 00:12:54,959
key issues<font color="#CCCCCC"> in</font><font color="#E5E5E5"> implementing gold is is</font>

248
00:12:52,470 --> 00:12:58,680
that imports and exports are just crazy

249
00:12:54,959 --> 00:13:02,250
<font color="#CCCCCC">in ECMAScript</font><font color="#E5E5E5"> you have a dozen ways to</font>

250
00:12:58,680 --> 00:13:04,829
import and even more to export so we

251
00:13:02,250 --> 00:13:07,769
have drawn this nice matrix of

252
00:13:04,829 --> 00:13:10,170
<font color="#E5E5E5">compatibility and just to give you an</font>

253
00:13:07,769 --> 00:13:13,410
<font color="#CCCCCC">idea of</font><font color="#E5E5E5"> how long it takes to</font><font color="#CCCCCC"> implement</font>

254
00:13:10,170 --> 00:13:17,699
all<font color="#E5E5E5"> this single black dot which says</font>

255
00:13:13,410 --> 00:13:20,279
<font color="#CCCCCC">that that's compatible needs like</font><font color="#E5E5E5"> 15</font>

256
00:13:17,699 --> 00:13:24,689
lines of quite complex cipher code<font color="#E5E5E5"> to</font>

257
00:13:20,279 --> 00:13:29,519
<font color="#CCCCCC">work</font><font color="#E5E5E5"> with so it's a lot</font><font color="#CCCCCC"> of work to cover</font>

258
00:13:24,690 --> 00:13:31,199
all these and obviously<font color="#E5E5E5"> once</font><font color="#CCCCCC"> we have</font>

259
00:13:29,519 --> 00:13:33,300
this<font color="#CCCCCC"> we have to implement the algorithms</font>

260
00:13:31,199 --> 00:13:34,800
now as I said<font color="#CCCCCC"> we have some</font><font color="#E5E5E5"> propagation</font>

261
00:13:33,300 --> 00:13:37,130
algorithms where we want to propagate

262
00:13:34,800 --> 00:13:40,430
some property along the graph

263
00:13:37,130 --> 00:13:43,850
be that<font color="#E5E5E5"> typing formation or the fact</font>

264
00:13:40,430 --> 00:13:46,459
<font color="#CCCCCC">that this value can</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> zero or not this</font>

265
00:13:43,850 --> 00:13:49,280
<font color="#E5E5E5">is actually something that's called run</font>

266
00:13:46,460 --> 00:13:51,410
to completion scheduling so we give a

267
00:13:49,280 --> 00:13:53,750
set of transformation rules<font color="#E5E5E5"> to the</font>

268
00:13:51,410 --> 00:13:56,540
system and then ask the system to

269
00:13:53,750 --> 00:14:00,140
<font color="#E5E5E5">execute it until there are no more</font>

270
00:13:56,540 --> 00:14:02,780
<font color="#E5E5E5">changes to execute</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is actually</font>

271
00:14:00,140 --> 00:14:04,850
<font color="#E5E5E5">quite difficult to do in plain sight</font>

272
00:14:02,780 --> 00:14:07,640
<font color="#E5E5E5">first so we use a mix of Java code</font><font color="#CCCCCC"> and</font>

273
00:14:04,850 --> 00:14:12,590
<font color="#E5E5E5">cipher code and the Java code does the</font>

274
00:14:07,640 --> 00:14:14,810
propagations<font color="#E5E5E5"> while it can another thing</font>

275
00:14:12,590 --> 00:14:17,630
<font color="#E5E5E5">that we struggle with</font><font color="#CCCCCC"> is efficient</font>

276
00:14:14,810 --> 00:14:19,819
<font color="#E5E5E5">initialization of the database</font><font color="#CCCCCC"> state so</font>

277
00:14:17,630 --> 00:14:23,120
in the first implementations the initial

278
00:14:19,820 --> 00:14:25,340
build of the graph<font color="#E5E5E5"> happened with cipher</font>

279
00:14:23,120 --> 00:14:28,610
statements so<font color="#CCCCCC"> we build</font><font color="#E5E5E5"> the graph</font><font color="#CCCCCC"> pretty</font>

280
00:14:25,340 --> 00:14:30,680
<font color="#E5E5E5">much node by node with separate cipher</font>

281
00:14:28,610 --> 00:14:34,310
statements and this<font color="#E5E5E5"> obviously</font><font color="#CCCCCC"> was quite</font>

282
00:14:30,680 --> 00:14:38,839
slow<font color="#CCCCCC"> so we started to think around</font><font color="#E5E5E5"> this</font>

283
00:14:34,310 --> 00:14:40,760
with a bit and used CSVs<font color="#E5E5E5"> to generate the</font>

284
00:14:38,840 --> 00:14:43,880
<font color="#E5E5E5">graph so in the</font><font color="#CCCCCC"> for as</font><font color="#E5E5E5"> the first step we</font>

285
00:14:40,760 --> 00:14:46,370
generated just<font color="#E5E5E5"> two CSV files one for the</font>

286
00:14:43,880 --> 00:14:49,010
nodes and one for relationships<font color="#E5E5E5"> and then</font>

287
00:14:46,370 --> 00:14:50,960
used the<font color="#E5E5E5"> neo4j import</font><font color="#CCCCCC"> tool</font><font color="#E5E5E5"> to load it to</font>

288
00:14:49,010 --> 00:14:53,090
<font color="#E5E5E5">the</font><font color="#CCCCCC"> database this</font><font color="#E5E5E5"> is not a very</font>

289
00:14:50,960 --> 00:14:55,910
<font color="#E5E5E5">sophisticated approach you could do</font>

290
00:14:53,090 --> 00:14:59,390
multiple CSVs or<font color="#CCCCCC"> binaries or other</font>

291
00:14:55,910 --> 00:15:02,180
things<font color="#E5E5E5"> but already this gave us a 10x</font>

292
00:14:59,390 --> 00:15:05,030
speed<font color="#E5E5E5"> up so it's actually like</font><font color="#CCCCCC"> one days</font>

293
00:15:02,180 --> 00:15:09,709
of work and the initial load went down

294
00:15:05,030 --> 00:15:12,439
<font color="#E5E5E5">from an hour</font><font color="#CCCCCC"> to a couple</font><font color="#E5E5E5"> of minutes we</font>

295
00:15:09,710 --> 00:15:15,320
<font color="#E5E5E5">also stumbled upon regular path queries</font>

296
00:15:12,440 --> 00:15:17,960
quite regularly<font color="#CCCCCC"> because there are a</font><font color="#E5E5E5"> lot</font>

297
00:15:15,320 --> 00:15:21,260
of cases when<font color="#E5E5E5"> we need transitive closure</font>

298
00:15:17,960 --> 00:15:24,370
<font color="#E5E5E5">on certain combinations so for example</font>

299
00:15:21,260 --> 00:15:26,569
you can have<font color="#E5E5E5"> a situation when</font><font color="#CCCCCC"> you have</font>

300
00:15:24,370 --> 00:15:28,460
<font color="#CCCCCC">function</font><font color="#E5E5E5"> that's assigned to</font><font color="#CCCCCC"> a variable</font>

301
00:15:26,570 --> 00:15:30,290
<font color="#E5E5E5">that's in</font><font color="#CCCCCC"> another function</font><font color="#E5E5E5"> that's</font>

302
00:15:28,460 --> 00:15:33,650
assigned to<font color="#E5E5E5"> another variable and so on</font>

303
00:15:30,290 --> 00:15:36,020
transitively<font color="#E5E5E5"> and essentially we would</font>

304
00:15:33,650 --> 00:15:38,540
want<font color="#E5E5E5"> to do a transitive closure style</font>

305
00:15:36,020 --> 00:15:40,760
operation on those relationship types

306
00:15:38,540 --> 00:15:45,050
<font color="#E5E5E5">the problem is that it's not</font><font color="#CCCCCC"> supported</font>

307
00:15:40,760 --> 00:15:46,819
by cipher yet<font color="#E5E5E5"> so we created</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> workaround</font>

308
00:15:45,050 --> 00:15:50,510
the workaround is let's<font color="#E5E5E5"> start the</font>

309
00:15:46,820 --> 00:15:51,890
transaction<font color="#E5E5E5"> add some proxy relationships</font>

310
00:15:50,510 --> 00:15:56,230
<font color="#CCCCCC">there</font>

311
00:15:51,890 --> 00:15:59,180
sort of go over those relationships do a

312
00:15:56,230 --> 00:16:02,420
<font color="#E5E5E5">calculation for transitive closure on</font>

313
00:15:59,180 --> 00:16:05,170
those<font color="#E5E5E5"> proxy relationships and then roll</font>

314
00:16:02,420 --> 00:16:08,329
the transaction back and essentially

315
00:16:05,170 --> 00:16:12,170
deleting those edges from the graph this

316
00:16:08,330 --> 00:16:14,060
is I think a proper workaround<font color="#E5E5E5"> but it's</font>

317
00:16:12,170 --> 00:16:17,300
not the nicest<font color="#E5E5E5"> way to express</font><font color="#CCCCCC"> it and</font>

318
00:16:14,060 --> 00:16:19,339
<font color="#CCCCCC">obviously the cipher team is</font><font color="#E5E5E5"> very well</font>

319
00:16:17,300 --> 00:16:22,279
aware<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this so for the next open</font>

320
00:16:19,339 --> 00:16:24,140
cipher<font color="#CCCCCC"> there is a proposal for creating</font>

321
00:16:22,279 --> 00:16:27,459
path patterns this allows users<font color="#CCCCCC"> to</font>

322
00:16:24,140 --> 00:16:31,279
create<font color="#E5E5E5"> an expression</font><font color="#CCCCCC"> where there are</font>

323
00:16:27,459 --> 00:16:33,229
several relationships type<font color="#CCCCCC"> next to each</font>

324
00:16:31,279 --> 00:16:37,520
<font color="#E5E5E5">other and then do a transitive closure</font>

325
00:16:33,230 --> 00:16:40,790
style operation on that<font color="#CCCCCC"> ok so I</font><font color="#E5E5E5"> said</font>

326
00:16:37,520 --> 00:16:43,880
that incrementality<font color="#CCCCCC"> is very important in</font>

327
00:16:40,790 --> 00:16:45,920
this work and actually<font color="#CCCCCC"> this was my</font>

328
00:16:43,880 --> 00:16:50,200
motivation<font color="#CCCCCC"> to start working on this</font>

329
00:16:45,920 --> 00:16:53,120
<font color="#E5E5E5">topic so as I said we built our system</font>

330
00:16:50,200 --> 00:16:54,830
around<font color="#E5E5E5"> cipher queries as you probably</font>

331
00:16:53,120 --> 00:16:57,230
know there is now an initiative<font color="#E5E5E5"> called</font>

332
00:16:54,830 --> 00:16:59,480
<font color="#CCCCCC">open cipher which aims</font><font color="#E5E5E5"> to deliver a</font>

333
00:16:57,230 --> 00:17:02,060
standard specification<font color="#E5E5E5"> of the cipher</font>

334
00:16:59,480 --> 00:17:05,059
<font color="#E5E5E5">query language it was released about</font><font color="#CCCCCC"> two</font>

335
00:17:02,060 --> 00:17:08,720
years<font color="#CCCCCC"> ago and it's been actually</font><font color="#E5E5E5"> adapted</font>

336
00:17:05,059 --> 00:17:11,059
by industrial vendors that<font color="#CCCCCC"> are listed on</font>

337
00:17:08,720 --> 00:17:13,339
the logos and there are also a<font color="#CCCCCC"> couple of</font>

338
00:17:11,059 --> 00:17:15,530
<font color="#E5E5E5">research prototypes most notably there</font>

339
00:17:13,339 --> 00:17:17,720
is graph flow which<font color="#CCCCCC"> is developed by</font><font color="#E5E5E5"> the</font>

340
00:17:15,530 --> 00:17:20,119
University of Waterloo<font color="#CCCCCC"> and there is</font>

341
00:17:17,720 --> 00:17:22,370
<font color="#CCCCCC">ingre which</font><font color="#E5E5E5"> is my PhD project</font><font color="#CCCCCC"> and</font>

342
00:17:20,119 --> 00:17:24,469
interestingly enough both<font color="#CCCCCC"> of these</font>

343
00:17:22,369 --> 00:17:28,369
target the same goal it's the

344
00:17:24,470 --> 00:17:30,500
incremental processing of cipher queries

345
00:17:28,369 --> 00:17:32,709
so you have a sort of<font color="#E5E5E5"> cipher queries and</font>

346
00:17:30,500 --> 00:17:35,929
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> evaluate them</font><font color="#CCCCCC"> incrementally</font>

347
00:17:32,710 --> 00:17:37,520
continuously<font color="#E5E5E5"> in your system if you're</font>

348
00:17:35,929 --> 00:17:39,410
interested in some of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> details</font>

349
00:17:37,520 --> 00:17:41,960
<font color="#E5E5E5">last year I was here in the same room</font>

350
00:17:39,410 --> 00:17:46,150
giving<font color="#CCCCCC"> a talk about this system in graph</font>

351
00:17:41,960 --> 00:17:49,630
and here are a couple<font color="#CCCCCC"> of my slides so</font>

352
00:17:46,150 --> 00:17:51,950
<font color="#E5E5E5">the way in graph works is to first</font>

353
00:17:49,630 --> 00:17:54,260
compile the open<font color="#E5E5E5"> psyshock various</font>

354
00:17:51,950 --> 00:17:56,030
relational algebra<font color="#E5E5E5"> and then transform</font>

355
00:17:54,260 --> 00:17:58,010
<font color="#E5E5E5">that relational algebra to a</font>

356
00:17:56,030 --> 00:18:00,980
representation<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> incremental</font>

357
00:17:58,010 --> 00:18:03,020
<font color="#E5E5E5">maintainable and then use an incremental</font>

358
00:18:00,980 --> 00:18:04,520
relational engine to calculate the

359
00:18:03,020 --> 00:18:08,690
result of those<font color="#CCCCCC"> queries</font>

360
00:18:04,520 --> 00:18:11,060
in the last year we expanded in graph<font color="#E5E5E5"> by</font>

361
00:18:08,690 --> 00:18:13,070
a lot<font color="#E5E5E5"> of new features it now covers</font><font color="#CCCCCC"> the</font>

362
00:18:11,060 --> 00:18:16,280
substantial fragment of the open<font color="#CCCCCC"> cypher</font>

363
00:18:13,070 --> 00:18:18,740
language including<font color="#CCCCCC"> sub-queries functions</font>

364
00:18:16,280 --> 00:18:20,780
aggregations<font color="#CCCCCC"> some of the data</font>

365
00:18:18,740 --> 00:18:22,850
manipulation operations<font color="#CCCCCC"> like create or</font>

366
00:18:20,780 --> 00:18:25,550
delete and there are some features

367
00:18:22,850 --> 00:18:29,090
<font color="#E5E5E5">missing on the roadmap</font><font color="#CCCCCC"> like merge remove</font>

368
00:18:25,550 --> 00:18:31,250
and more sophisticated<font color="#E5E5E5"> expressions like</font>

369
00:18:29,090 --> 00:18:33,909
list comprehensions<font color="#CCCCCC"> but it's</font><font color="#E5E5E5"> getting</font>

370
00:18:31,250 --> 00:18:39,230
nice<font color="#CCCCCC"> together</font><font color="#E5E5E5"> and the state of in graph</font>

371
00:18:33,910 --> 00:18:41,990
almost allows us to<font color="#E5E5E5"> evaluate the most</font>

372
00:18:39,230 --> 00:18:44,990
important<font color="#CCCCCC"> javascript</font><font color="#E5E5E5"> static analysis</font>

373
00:18:41,990 --> 00:18:48,610
queries so it's<font color="#E5E5E5"> possible in</font><font color="#CCCCCC"> theory we</font>

374
00:18:44,990 --> 00:18:50,870
<font color="#CCCCCC">have two papers on that one is</font><font color="#E5E5E5"> about the</font>

375
00:18:48,610 --> 00:18:52,750
compilation of<font color="#CCCCCC"> Scythia</font><font color="#E5E5E5"> queries to</font>

376
00:18:50,870 --> 00:18:55,189
algebra and the other is on the

377
00:18:52,750 --> 00:18:58,700
<font color="#E5E5E5">incremental maintenance of those</font>

378
00:18:55,190 --> 00:19:01,220
relational algebra expressions<font color="#CCCCCC"> so this</font>

379
00:18:58,700 --> 00:19:06,680
is I<font color="#E5E5E5"> think a very</font><font color="#CCCCCC"> cool use case for</font><font color="#E5E5E5"> in</font>

380
00:19:01,220 --> 00:19:09,950
graph so as Michael said his pet peeve

381
00:19:06,680 --> 00:19:12,980
is<font color="#E5E5E5"> software analytics and I think this</font>

382
00:19:09,950 --> 00:19:15,110
is an area<font color="#CCCCCC"> that's very</font><font color="#E5E5E5"> important we as a</font>

383
00:19:12,980 --> 00:19:17,840
developers<font color="#E5E5E5"> we should strive</font><font color="#CCCCCC"> to make</font>

384
00:19:15,110 --> 00:19:20,600
better software<font color="#E5E5E5"> and others have realized</font>

385
00:19:17,840 --> 00:19:24,290
the need for this and<font color="#E5E5E5"> the usefulness of</font>

386
00:19:20,600 --> 00:19:26,149
graphs<font color="#E5E5E5"> for understanding code and</font>

387
00:19:24,290 --> 00:19:30,080
analyzing code<font color="#E5E5E5"> so there is a tool called</font>

388
00:19:26,150 --> 00:19:33,110
<font color="#E5E5E5">JQ assistant it's basically a code</font>

389
00:19:30,080 --> 00:19:35,899
comprehension<font color="#E5E5E5"> - that scans the software</font>

390
00:19:33,110 --> 00:19:38,270
turns<font color="#E5E5E5"> into a graph and then you can use</font>

391
00:19:35,900 --> 00:19:40,730
arbitrary cipher queries to understand

392
00:19:38,270 --> 00:19:42,230
the code<font color="#CCCCCC"> and you can</font><font color="#E5E5E5"> reduce the a set of</font>

393
00:19:40,730 --> 00:19:44,690
validation queries that you want to

394
00:19:42,230 --> 00:19:49,430
check on each build there is a blog post

395
00:19:44,690 --> 00:19:52,520
<font color="#E5E5E5">on this on the neo4j blog there's also</font>

396
00:19:49,430 --> 00:19:54,050
slicer<font color="#E5E5E5"> which is closely tied to JQ</font><font color="#CCCCCC"> a</font>

397
00:19:52,520 --> 00:19:57,830
system this is actually an interactive

398
00:19:54,050 --> 00:20:00,169
<font color="#E5E5E5">front-end on top of JQ assistant and the</font>

399
00:19:57,830 --> 00:20:03,470
idea is the same<font color="#E5E5E5"> you take a bunch of jar</font>

400
00:20:00,170 --> 00:20:05,870
files<font color="#E5E5E5"> Java files and so on</font><font color="#CCCCCC"> throw it at</font>

401
00:20:03,470 --> 00:20:07,940
the system<font color="#E5E5E5"> it scans it loads it to the</font>

402
00:20:05,870 --> 00:20:11,120
database<font color="#CCCCCC"> and then you</font><font color="#E5E5E5"> can use this</font>

403
00:20:07,940 --> 00:20:15,050
interactive cipher editor to<font color="#E5E5E5"> visualize</font>

404
00:20:11,120 --> 00:20:17,158
and discover your system it actually<font color="#CCCCCC"> has</font>

405
00:20:15,050 --> 00:20:20,158
an<font color="#E5E5E5"> eclipse based IDE</font>

406
00:20:17,159 --> 00:20:23,970
and as part of that<font color="#CCCCCC"> idea</font><font color="#E5E5E5"> it has a</font>

407
00:20:20,159 --> 00:20:26,700
grammar to provide an editor and funnily

408
00:20:23,970 --> 00:20:30,539
enough as part of the<font color="#CCCCCC"> ingre project we</font>

409
00:20:26,700 --> 00:20:32,940
managed to<font color="#E5E5E5"> extend that grammar by some</font>

410
00:20:30,539 --> 00:20:34,499
new features we actually added<font color="#E5E5E5"> some</font>

411
00:20:32,940 --> 00:20:37,200
<font color="#E5E5E5">features that were introduced in</font><font color="#CCCCCC"> the</font>

412
00:20:34,499 --> 00:20:40,259
opus<font color="#E5E5E5"> cipher language recently we added a</font>

413
00:20:37,200 --> 00:20:42,869
scope analyzer<font color="#E5E5E5"> and you know you might</font>

414
00:20:40,259 --> 00:20:44,820
<font color="#CCCCCC">think that you're not using Eclipse so</font>

415
00:20:42,869 --> 00:20:47,369
this is not<font color="#CCCCCC"> very relevant</font><font color="#E5E5E5"> but actually</font><font color="#CCCCCC"> X</font>

416
00:20:44,820 --> 00:20:50,158
text is quite independent from<font color="#CCCCCC"> eclipse</font>

417
00:20:47,369 --> 00:20:51,509
so you can run<font color="#E5E5E5"> it in the web</font><font color="#CCCCCC"> UI so this</font>

418
00:20:50,159 --> 00:20:54,720
is an editor which allows<font color="#CCCCCC"> you to</font>

419
00:20:51,509 --> 00:20:56,849
<font color="#CCCCCC">refactor cycle</font><font color="#E5E5E5"> queries correctly if you</font>

420
00:20:54,720 --> 00:21:00,450
do refactoring operation<font color="#E5E5E5"> you can</font>

421
00:20:56,849 --> 00:21:02,399
actually change the<font color="#E5E5E5"> value of a variable</font>

422
00:21:00,450 --> 00:21:07,679
<font color="#E5E5E5">and then it will trace</font><font color="#CCCCCC"> it back through</font>

423
00:21:02,399 --> 00:21:10,109
<font color="#CCCCCC">the query okay to wrap up if you</font><font color="#E5E5E5"> found</font>

424
00:21:07,679 --> 00:21:14,460
all this<font color="#CCCCCC"> interesting we have to this</font>

425
00:21:10,109 --> 00:21:16,678
<font color="#CCCCCC">works on days from 2016 and 2017 these</font>

426
00:21:14,460 --> 00:21:18,629
are very<font color="#CCCCCC"> well-written</font><font color="#E5E5E5"> and nice few</font>

427
00:21:16,679 --> 00:21:22,379
<font color="#E5E5E5">Illustrated works and I think they are</font>

428
00:21:18,629 --> 00:21:25,228
<font color="#E5E5E5">quite pleasant</font><font color="#CCCCCC"> rates so all these are</font>

429
00:21:22,379 --> 00:21:28,590
<font color="#E5E5E5">clickable if you're interested and as a</font>

430
00:21:25,229 --> 00:21:31,200
<font color="#E5E5E5">conclusion I</font><font color="#CCCCCC"> think it's fair to say</font><font color="#E5E5E5"> that</font>

431
00:21:28,590 --> 00:21:33,539
interesting analysis rules<font color="#E5E5E5"> at least some</font>

432
00:21:31,200 --> 00:21:35,729
of<font color="#E5E5E5"> them require a global view</font><font color="#CCCCCC"> of the</font>

433
00:21:33,539 --> 00:21:39,179
code<font color="#E5E5E5"> so it's not enough to just scan a</font>

434
00:21:35,729 --> 00:21:42,450
file and do a standard linter style

435
00:21:39,179 --> 00:21:44,759
analysis instead you should<font color="#E5E5E5"> use</font><font color="#CCCCCC"> some</font>

436
00:21:42,450 --> 00:21:48,239
graph representation for your source

437
00:21:44,759 --> 00:21:50,609
code<font color="#E5E5E5"> and property graph databases are</font>

438
00:21:48,239 --> 00:21:52,470
definitely a good<font color="#CCCCCC"> fit for</font><font color="#E5E5E5"> this they are</font>

439
00:21:50,609 --> 00:21:54,509
very<font color="#E5E5E5"> expressive and the</font><font color="#CCCCCC"> cypher clear</font>

440
00:21:52,470 --> 00:21:58,289
language<font color="#E5E5E5"> is quite easy to</font><font color="#CCCCCC"> use and easy</font>

441
00:21:54,509 --> 00:22:00,570
<font color="#E5E5E5">to understand and in particular these</font>

442
00:21:58,289 --> 00:22:03,599
are very good use cases for incremental

443
00:22:00,570 --> 00:22:06,359
<font color="#E5E5E5">graph queries so if you make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that</font>

444
00:22:03,599 --> 00:22:08,849
your system<font color="#E5E5E5"> incorporates incrementality</font>

445
00:22:06,359 --> 00:22:10,820
<font color="#E5E5E5">multiple levels you can end up with a</font>

446
00:22:08,849 --> 00:22:13,769
<font color="#E5E5E5">system</font><font color="#CCCCCC"> that's fast enough for</font><font color="#E5E5E5"> real-time</font>

447
00:22:10,820 --> 00:22:16,408
<font color="#E5E5E5">answers these</font><font color="#CCCCCC"> are the</font><font color="#E5E5E5"> related</font><font color="#CCCCCC"> resources</font>

448
00:22:13,769 --> 00:22:18,090
that you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> find on github bear in</font><font color="#E5E5E5"> mind</font>

449
00:22:16,409 --> 00:22:20,340
that these<font color="#CCCCCC"> are all academic prototypes</font>

450
00:22:18,090 --> 00:22:21,928
so they work some of<font color="#E5E5E5"> the time</font><font color="#CCCCCC"> on some</font>

451
00:22:20,340 --> 00:22:26,399
use<font color="#CCCCCC"> cases they are more like</font>

452
00:22:21,929 --> 00:22:28,649
<font color="#CCCCCC">proof-of-concept softwares and</font><font color="#E5E5E5"> I would</font>

453
00:22:26,399 --> 00:22:31,179
like<font color="#E5E5E5"> to thank the</font><font color="#CCCCCC"> whole team</font><font color="#E5E5E5"> that worked</font>

454
00:22:28,649 --> 00:22:34,300
<font color="#E5E5E5">on</font><font color="#CCCCCC"> these students my colleagues</font>

455
00:22:31,180 --> 00:22:36,100
and Adam<font color="#E5E5E5"> actually Adam</font><font color="#CCCCCC"> Lipe is my old</font>

456
00:22:34,300 --> 00:22:38,050
friend<font color="#CCCCCC"> and he's</font><font color="#E5E5E5"> giving the talk in the</font>

457
00:22:36,100 --> 00:22:40,689
<font color="#CCCCCC">source</font><font color="#E5E5E5"> code analysis</font><font color="#CCCCCC"> dev room</font><font color="#E5E5E5"> tomorrow</font>

458
00:22:38,050 --> 00:22:43,120
<font color="#E5E5E5">so if you came here just for the</font>

459
00:22:40,690 --> 00:22:45,940
JavaScript<font color="#E5E5E5"> part and you were left</font>

460
00:22:43,120 --> 00:22:50,770
<font color="#E5E5E5">unsatisfied</font><font color="#CCCCCC"> you can go there tomorrow at</font>

461
00:22:45,940 --> 00:22:53,370
4:30<font color="#CCCCCC"> 4:20</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> tantus talk</font><font color="#E5E5E5"> thank you for</font>

462
00:22:50,770 --> 00:22:53,370
your attention

463
00:22:56,730 --> 00:23:19,720
<font color="#CCCCCC">ok questions yeah we can talk we can</font>

464
00:23:05,950 --> 00:23:24,760
<font color="#CCCCCC">talk here or fine absolutely feel free</font>

465
00:23:19,720 --> 00:23:38,080
<font color="#CCCCCC">to</font><font color="#E5E5E5"> come along after but any other</font>

466
00:23:24,760 --> 00:23:39,220
questions<font color="#CCCCCC"> Hey ok ok so let me repeat the</font>

467
00:23:38,080 --> 00:23:41,800
<font color="#CCCCCC">question</font>

468
00:23:39,220 --> 00:23:48,010
the gentleman is from Firefox<font color="#CCCCCC"> I</font>

469
00:23:41,800 --> 00:23:50,680
understand<font color="#E5E5E5"> so yeah</font><font color="#CCCCCC"> ok so the question</font><font color="#E5E5E5"> is</font>

470
00:23:48,010 --> 00:23:52,840
what code repositories we have tried our

471
00:23:50,680 --> 00:23:55,420
<font color="#CCCCCC">code on so you're probably</font><font color="#E5E5E5"> concerned</font>

472
00:23:52,840 --> 00:23:58,870
about scalability<font color="#E5E5E5"> obviously we went on</font>

473
00:23:55,420 --> 00:24:01,600
github and grabbed a couple<font color="#E5E5E5"> of the</font>

474
00:23:58,870 --> 00:24:04,959
source code repositories most notably

475
00:24:01,600 --> 00:24:07,330
there is treasure<font color="#E5E5E5"> 8 which is a cloud</font>

476
00:24:04,960 --> 00:24:09,100
storage system so it's like Dropbox but

477
00:24:07,330 --> 00:24:12,960
it's more<font color="#CCCCCC"> focused</font><font color="#E5E5E5"> on encryption</font><font color="#CCCCCC"> and</font>

478
00:24:09,100 --> 00:24:17,889
security<font color="#E5E5E5"> and their</font><font color="#CCCCCC"> front-end library is</font>

479
00:24:12,960 --> 00:24:21,640
approximately 70,000 yeah 70,000 lines

480
00:24:17,890 --> 00:24:23,920
of JavaScript code<font color="#CCCCCC"> and that was the one</font>

481
00:24:21,640 --> 00:24:25,510
<font color="#E5E5E5">that took us like an hour to load and</font>

482
00:24:23,920 --> 00:24:28,870
then<font color="#E5E5E5"> we</font><font color="#CCCCCC"> optimized it</font><font color="#E5E5E5"> and it went down</font>

483
00:24:25,510 --> 00:24:31,240
<font color="#CCCCCC">like</font><font color="#E5E5E5"> to like five six minutes so that</font>

484
00:24:28,870 --> 00:24:36,669
<font color="#E5E5E5">was the</font><font color="#CCCCCC"> largest</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> that we have used</font>

485
00:24:31,240 --> 00:24:39,400
and we had a lot of struggle to<font color="#E5E5E5"> get a</font>

486
00:24:36,670 --> 00:24:41,260
parser that<font color="#E5E5E5"> works well because we tried</font>

487
00:24:39,400 --> 00:24:43,660
the<font color="#E5E5E5"> Bible parser and</font><font color="#CCCCCC"> the problem with</font>

488
00:24:41,260 --> 00:24:45,010
that<font color="#CCCCCC"> was that it</font><font color="#E5E5E5"> doesn't really provide</font>

489
00:24:43,660 --> 00:24:47,560
<font color="#E5E5E5">scope information so</font>

490
00:24:45,010 --> 00:24:50,680
just<font color="#E5E5E5"> DSD</font><font color="#CCCCCC"> and it's very difficult to work</font>

491
00:24:47,560 --> 00:24:55,260
with but this logo<font color="#CCCCCC"> here is the logo of</font>

492
00:24:50,680 --> 00:25:00,010
<font color="#E5E5E5">shape security the</font><font color="#CCCCCC"> S on the figure and</font>

493
00:24:55,260 --> 00:25:04,000
they have very well written<font color="#CCCCCC"> library</font>

494
00:25:00,010 --> 00:25:05,770
called shift<font color="#E5E5E5"> - Java that's an ASD</font>

495
00:25:04,000 --> 00:25:08,500
builder but that has a lot of scoping

496
00:25:05,770 --> 00:25:10,030
information<font color="#CCCCCC"> that's a very nicely written</font>

497
00:25:08,500 --> 00:25:12,370
piece of software actually<font color="#E5E5E5"> it's</font>

498
00:25:10,030 --> 00:25:14,950
beautiful Java code the problem with<font color="#CCCCCC"> it</font>

499
00:25:12,370 --> 00:25:17,379
<font color="#E5E5E5">is it's not really maintained so it's</font><font color="#CCCCCC"> a</font>

500
00:25:14,950 --> 00:25:21,100
<font color="#E5E5E5">well written and we have to maintain it</font>

501
00:25:17,380 --> 00:25:23,400
<font color="#E5E5E5">now because it's it seems abandoned and</font>

502
00:25:21,100 --> 00:25:26,770
we actually<font color="#E5E5E5"> started</font><font color="#CCCCCC"> to add the</font>

503
00:25:23,400 --> 00:25:30,220
ECMAScript 2017 features like async and

504
00:25:26,770 --> 00:25:34,389
<font color="#E5E5E5">await - to the parser which is a work in</font>

505
00:25:30,220 --> 00:25:50,410
<font color="#E5E5E5">progress now</font><font color="#CCCCCC"> okay any</font><font color="#E5E5E5"> other questions</font>

506
00:25:34,390 --> 00:25:55,800
<font color="#CCCCCC">yes okay so the question was what do i</font>

507
00:25:50,410 --> 00:25:59,200
quantify as<font color="#E5E5E5"> real-time well essentially</font>

508
00:25:55,800 --> 00:26:01,930
it should be quick<font color="#E5E5E5"> enough for developers</font>

509
00:25:59,200 --> 00:26:04,030
<font color="#E5E5E5">to appear while they are working on the</font>

510
00:26:01,930 --> 00:26:07,030
same<font color="#E5E5E5"> file so you're writing</font><font color="#CCCCCC"> your file</font>

511
00:26:04,030 --> 00:26:11,160
<font color="#E5E5E5">make some changes you press you know</font>

512
00:26:07,030 --> 00:26:14,800
<font color="#E5E5E5">ctrl s command</font><font color="#CCCCCC"> S and it should pop up</font>

513
00:26:11,160 --> 00:26:18,690
<font color="#E5E5E5">next to the other errors so it should be</font>

514
00:26:14,800 --> 00:26:18,690
<font color="#CCCCCC">sub-second ideally</font>

515
00:26:23,650 --> 00:26:32,830
yes yeah<font color="#E5E5E5"> so the follow-up question</font><font color="#CCCCCC"> was</font>

516
00:26:30,150 --> 00:26:35,650
<font color="#E5E5E5">different size of code repositories will</font>

517
00:26:32,830 --> 00:26:38,500
mean<font color="#E5E5E5"> different different execution times</font>

518
00:26:35,650 --> 00:26:43,390
and whether there<font color="#E5E5E5"> is like an average</font>

519
00:26:38,500 --> 00:26:45,100
<font color="#CCCCCC">dick should take well for this actually</font>

520
00:26:43,390 --> 00:26:47,110
we<font color="#E5E5E5"> planned to use the in graph engine</font>

521
00:26:45,100 --> 00:26:49,750
more extensively the whole idea of<font color="#E5E5E5"> in</font>

522
00:26:47,110 --> 00:26:53,620
<font color="#E5E5E5">graph is is to build a huge gash on your</font>

523
00:26:49,750 --> 00:26:57,010
<font color="#E5E5E5">code on on your queries and once you</font>

524
00:26:53,620 --> 00:27:00,370
have that<font color="#E5E5E5"> cash</font><font color="#CCCCCC"> you can do</font><font color="#E5E5E5"> I won't say</font>

525
00:26:57,010 --> 00:27:02,980
<font color="#E5E5E5">constant time but very very quick clear</font>

526
00:27:00,370 --> 00:27:06,580
evaluations<font color="#E5E5E5"> because you have all the</font>

527
00:27:02,980 --> 00:27:08,890
interim results of your queries<font color="#E5E5E5"> cached</font>

528
00:27:06,580 --> 00:27:11,889
<font color="#E5E5E5">so essentially if you just want to</font>

529
00:27:08,890 --> 00:27:14,740
introduce<font color="#E5E5E5"> a</font><font color="#CCCCCC"> small change which</font><font color="#E5E5E5"> you</font>

530
00:27:11,890 --> 00:27:45,220
usually do<font color="#CCCCCC"> while</font><font color="#E5E5E5"> developing it should be</font>

531
00:27:14,740 --> 00:27:47,590
very<font color="#E5E5E5"> quick and it should stay within but</font>

532
00:27:45,220 --> 00:27:49,600
I I'm you know I'm not an experienced

533
00:27:47,590 --> 00:27:51,879
JavaScript developer but I believe there

534
00:27:49,600 --> 00:27:54,399
is<font color="#E5E5E5"> also a need for queries that are</font>

535
00:27:51,880 --> 00:27:56,830
global<font color="#CCCCCC"> like reachability stuff is this</font>

536
00:27:54,400 --> 00:28:00,310
<font color="#CCCCCC">Coast it</font><font color="#E5E5E5"> is this piece of</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> still</font>

537
00:27:56,830 --> 00:28:03,159
reachable<font color="#E5E5E5"> is this still correct from</font>

538
00:28:00,310 --> 00:28:20,710
typing perspective and so on so<font color="#E5E5E5"> you can</font>

539
00:28:03,160 --> 00:28:23,230
think<font color="#E5E5E5"> of of global no but just like more</font>

540
00:28:20,710 --> 00:28:25,840
motif detection so the question was

541
00:28:23,230 --> 00:28:29,770
whether we<font color="#E5E5E5"> try to identify patterns in</font>

542
00:28:25,840 --> 00:28:31,570
the graph<font color="#E5E5E5"> and no but that's a very</font>

543
00:28:29,770 --> 00:28:33,850
interesting like a mixture of<font color="#E5E5E5"> network</font>

544
00:28:31,570 --> 00:28:36,790
science<font color="#E5E5E5"> and and source code on ethics so</font>

545
00:28:33,850 --> 00:28:48,730
that's a suggestion<font color="#E5E5E5"> Thanks</font>

546
00:28:36,790 --> 00:28:54,610
<font color="#E5E5E5">okay one</font><font color="#CCCCCC"> last question</font><font color="#E5E5E5"> I think yeah yes</font>

547
00:28:48,730 --> 00:28:58,540
so<font color="#E5E5E5"> Facebook flow actually uses custom</font>

548
00:28:54,610 --> 00:29:03,610
algorithms to make<font color="#E5E5E5"> the evaluation very</font>

549
00:28:58,540 --> 00:29:05,649
efficient<font color="#E5E5E5"> so I so from what I understand</font>

550
00:29:03,610 --> 00:29:07,330
it does<font color="#CCCCCC"> a few things and does those very</font>

551
00:29:05,650 --> 00:29:08,920
<font color="#E5E5E5">well and very quickly but it's very</font>

552
00:29:07,330 --> 00:29:11,230
difficult<font color="#CCCCCC"> to extend flow with your</font>

553
00:29:08,920 --> 00:29:13,470
custom rules<font color="#E5E5E5"> so if you say</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> my</font>

554
00:29:11,230 --> 00:29:16,240
company policy<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> you cannot do</font>

555
00:29:13,470 --> 00:30:15,250
<font color="#E5E5E5">this and that in the code and I want to</font>

556
00:29:16,240 --> 00:30:17,830
enforce this with my that's you know and

557
00:30:15,250 --> 00:30:30,730
Jake your system does that for Java code

558
00:30:17,830 --> 00:30:35,050
already<font color="#E5E5E5"> so that's yeah yeah we could</font><font color="#CCCCCC"> use</font>

559
00:30:30,730 --> 00:30:36,730
some help sir<font color="#E5E5E5"> absolutely okay thank you</font>

560
00:30:35,050 --> 00:30:41,960
again

561
00:30:36,730 --> 00:30:47,090
[Applause]

562
00:30:41,960 --> 00:30:54,980
<font color="#E5E5E5">okay the last talk will have a general</font>

563
00:30:47,090 --> 00:30:54,980
<font color="#E5E5E5">tip of</font><font color="#CCCCCC"> grass medical records and</font>

564
00:31:04,880 --> 00:32:13,050
like you<font color="#CCCCCC"> just because</font><font color="#E5E5E5"> you know we are</font>

565
00:32:10,860 --> 00:32:15,929
<font color="#CCCCCC">supposed</font><font color="#E5E5E5"> to put them online like half an</font>

566
00:32:13,050 --> 00:32:18,320
hour before<font color="#CCCCCC"> the tow</font><font color="#E5E5E5"> I did that so I hope</font>

567
00:32:15,930 --> 00:32:18,320
<font color="#E5E5E5">it works</font>

568
00:32:27,230 --> 00:32:32,150
no no<font color="#CCCCCC"> we I think</font><font color="#E5E5E5"> we took</font>

569
00:32:35,880 --> 00:32:51,150
[Music]

570
00:32:37,320 --> 00:32:54,389
what start<font color="#CCCCCC"> Hey yes sir</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> asked</font><font color="#E5E5E5"> you a few</font>

571
00:32:51,150 --> 00:32:56,430
<font color="#CCCCCC">questions okay</font><font color="#E5E5E5"> okay yeah absolutely</font><font color="#CCCCCC"> but</font>

572
00:32:54,390 --> 00:32:59,420
<font color="#E5E5E5">I think there's a dog here so maybe</font><font color="#CCCCCC"> yeah</font>

573
00:32:56,430 --> 00:32:59,420
<font color="#E5E5E5">start soon</font>

574
00:33:04,470 --> 00:33:10,830
I think we can talk<font color="#E5E5E5"> let me</font><font color="#CCCCCC"> talk I'm just</font>

575
00:33:08,190 --> 00:33:12,990
<font color="#CCCCCC">gonna shut this</font><font color="#E5E5E5"> down so no internet</font>

576
00:33:10,830 --> 00:33:20,810
connection<font color="#E5E5E5"> absolutely actually</font><font color="#CCCCCC"> my phone</font>

577
00:33:12,990 --> 00:33:23,580
<font color="#CCCCCC">is I am but it never works on my Linux</font>

578
00:33:20,810 --> 00:33:25,530
<font color="#E5E5E5">because of your right to thank you yeah</font>

579
00:33:23,580 --> 00:33:36,659
but it just<font color="#E5E5E5"> never works for</font><font color="#CCCCCC"> me</font>

580
00:33:25,530 --> 00:33:40,710
<font color="#CCCCCC">I should</font><font color="#E5E5E5"> be besides</font><font color="#CCCCCC"> out here yeah here</font>

581
00:33:36,660 --> 00:33:47,370
they<font color="#E5E5E5"> are so so you should should be</font><font color="#CCCCCC"> able</font>

582
00:33:40,710 --> 00:33:53,760
to see yeah yeah absolutely<font color="#E5E5E5"> and I will</font>

583
00:33:47,370 --> 00:33:55,939
<font color="#E5E5E5">give the microphone to</font><font color="#CCCCCC"> know so you'll</font>

584
00:33:53,760 --> 00:33:55,940
have

585
00:35:05,020 --> 00:35:07,080
you

