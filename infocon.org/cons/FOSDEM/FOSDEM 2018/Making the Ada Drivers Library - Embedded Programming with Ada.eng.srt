1
00:00:04,580 --> 00:00:08,360
<font color="#CCCCCC">I don't want to spend too much time</font>

2
00:00:06,290 --> 00:00:12,320
introducing people<font color="#E5E5E5"> so feel free to just</font>

3
00:00:08,360 --> 00:00:13,129
say who you<font color="#E5E5E5"> are okay</font><font color="#CCCCCC"> to trying so good</font>

4
00:00:12,320 --> 00:00:15,980
<font color="#E5E5E5">morning everybody</font>

5
00:00:13,130 --> 00:00:18,650
I'm<font color="#CCCCCC"> Fabian Sciuto software engineer at a</font>

6
00:00:15,980 --> 00:00:21,380
decor<font color="#E5E5E5"> so it requires the company that</font>

7
00:00:18,650 --> 00:00:23,750
maintains and developed the open source

8
00:00:21,380 --> 00:00:26,390
compiler<font color="#E5E5E5"> for ADA</font><font color="#CCCCCC"> which is called Gannett</font>

9
00:00:23,750 --> 00:00:28,939
<font color="#E5E5E5">ins based on the on GCC we developed a</font>

10
00:00:26,390 --> 00:00:31,880
<font color="#E5E5E5">lot of other tools for software</font>

11
00:00:28,939 --> 00:00:35,870
development<font color="#E5E5E5"> as well</font><font color="#CCCCCC"> and today I want to</font>

12
00:00:31,880 --> 00:00:38,269
<font color="#E5E5E5">talk about how to use ADA in embedded</font>

13
00:00:35,870 --> 00:00:40,190
programming<font color="#CCCCCC"> in particular with a small</font>

14
00:00:38,269 --> 00:00:44,530
microcontroller<font color="#E5E5E5"> like you can find on</font>

15
00:00:40,190 --> 00:00:44,530
this kind<font color="#E5E5E5"> of of small box</font>

16
00:00:45,370 --> 00:00:52,669
so before I start<font color="#CCCCCC"> my presentation there</font>

17
00:00:49,280 --> 00:00:54,589
will<font color="#CCCCCC"> be a live demo I will try so please</font>

18
00:00:52,670 --> 00:00:59,659
everybody if you can pray the<font color="#E5E5E5"> god of</font>

19
00:00:54,589 --> 00:01:01,970
<font color="#CCCCCC">life demo thank you</font><font color="#E5E5E5"> very much so to</font>

20
00:00:59,659 --> 00:01:04,158
begin<font color="#E5E5E5"> with I will give you my like my</font>

21
00:01:01,970 --> 00:01:07,729
view on the ADA philosophy or the<font color="#CCCCCC"> ADA</font>

22
00:01:04,159 --> 00:01:10,130
way of doing things<font color="#E5E5E5"> which is in my</font>

23
00:01:07,729 --> 00:01:13,789
<font color="#CCCCCC">opinion that programming is</font><font color="#E5E5E5"> all about</font>

24
00:01:10,130 --> 00:01:15,649
communication<font color="#E5E5E5"> you have an application</font><font color="#CCCCCC"> an</font>

25
00:01:13,790 --> 00:01:18,380
ID a program in<font color="#E5E5E5"> your head and you want</font>

26
00:01:15,650 --> 00:01:19,940
<font color="#E5E5E5">to communicate it you want to</font>

27
00:01:18,380 --> 00:01:21,920
communicate with<font color="#E5E5E5"> your tools like the</font>

28
00:01:19,940 --> 00:01:25,220
compiler<font color="#E5E5E5"> because that's what is going</font><font color="#CCCCCC"> to</font>

29
00:01:21,920 --> 00:01:27,620
make your executable at the end you<font color="#E5E5E5"> want</font>

30
00:01:25,220 --> 00:01:31,970
<font color="#E5E5E5">to communicate with</font><font color="#CCCCCC"> further</font><font color="#E5E5E5"> tools like</font>

31
00:01:27,620 --> 00:01:34,220
static analysis<font color="#CCCCCC"> ie</font><font color="#E5E5E5"> stuff like that you</font>

32
00:01:31,970 --> 00:01:37,070
want<font color="#E5E5E5"> to communicate with users</font><font color="#CCCCCC"> of your</font>

33
00:01:34,220 --> 00:01:40,210
API<font color="#CCCCCC"> if you writing a library</font><font color="#E5E5E5"> you want</font>

34
00:01:37,070 --> 00:01:42,500
people<font color="#E5E5E5"> to know how to use the library</font>

35
00:01:40,210 --> 00:01:45,100
with<font color="#E5E5E5"> your colleagues of course because</font>

36
00:01:42,500 --> 00:01:47,750
they will read your code debug it etc

37
00:01:45,100 --> 00:01:49,850
and you even<font color="#E5E5E5"> want to talk with</font>

38
00:01:47,750 --> 00:01:53,060
communicate with that<font color="#E5E5E5"> idiot</font><font color="#CCCCCC"> that's what</font>

39
00:01:49,850 --> 00:01:54,869
this really<font color="#CCCCCC"> stupid piece of code but</font>

40
00:01:53,060 --> 00:02:00,240
<font color="#CCCCCC">away</font>

41
00:01:54,870 --> 00:02:03,060
it was me two months<font color="#E5E5E5"> ago so</font><font color="#CCCCCC"> that's</font>

42
00:02:00,240 --> 00:02:06,830
something and jean-pierre talked about

43
00:02:03,060 --> 00:02:09,900
it<font color="#E5E5E5"> but one of the main design goal of</font>

44
00:02:06,830 --> 00:02:13,710
<font color="#CCCCCC">Veda is really based on</font><font color="#E5E5E5"> the on the fact</font>

45
00:02:09,900 --> 00:02:15,240
that we read code and we debug it<font color="#E5E5E5"> more</font>

46
00:02:13,710 --> 00:02:16,800
<font color="#E5E5E5">than we program actually and it's</font>

47
00:02:15,240 --> 00:02:18,810
<font color="#E5E5E5">probably</font><font color="#CCCCCC"> not something</font><font color="#E5E5E5"> that we want</font><font color="#CCCCCC"> to</font>

48
00:02:16,800 --> 00:02:20,310
hear a<font color="#E5E5E5"> lot because we would like to see</font>

49
00:02:18,810 --> 00:02:23,220
ourselves as you know programmers

50
00:02:20,310 --> 00:02:24,600
developers<font color="#CCCCCC"> we create stuff but</font><font color="#E5E5E5"> actually</font>

51
00:02:23,220 --> 00:02:30,660
the reality<font color="#CCCCCC"> is that we spend a lot of</font>

52
00:02:24,600 --> 00:02:33,420
time reading code<font color="#E5E5E5"> so to put that into</font>

53
00:02:30,660 --> 00:02:35,190
the context of embedded programming what

54
00:02:33,420 --> 00:02:36,920
is different for embedded programming

55
00:02:35,190 --> 00:02:39,710
<font color="#CCCCCC">it'sit's a bit difficult to explain</font>

56
00:02:36,920 --> 00:02:42,299
<font color="#CCCCCC">there's a lot of things that</font><font color="#E5E5E5"> are similar</font>

57
00:02:39,710 --> 00:02:43,920
<font color="#CCCCCC">usually you will have</font><font color="#E5E5E5"> the obvious which</font>

58
00:02:42,300 --> 00:02:48,480
<font color="#CCCCCC">is you</font><font color="#E5E5E5"> have a different tool chain you</font>

59
00:02:43,920 --> 00:02:50,670
have<font color="#E5E5E5"> a different processor etc but</font>

60
00:02:48,480 --> 00:02:54,149
really what it comes down<font color="#CCCCCC"> to in my</font>

61
00:02:50,670 --> 00:02:56,579
opinion<font color="#CCCCCC"> is that every bags cost you a</font>

62
00:02:54,150 --> 00:02:59,430
<font color="#E5E5E5">lot more a lot</font><font color="#CCCCCC"> more time to investigate</font>

63
00:02:56,580 --> 00:03:01,290
<font color="#CCCCCC">because you have different tools you</font>

64
00:02:59,430 --> 00:03:03,180
<font color="#E5E5E5">don't have for instance as much</font>

65
00:03:01,290 --> 00:03:05,549
<font color="#CCCCCC">breakpoints as</font><font color="#E5E5E5"> you want in your debugger</font>

66
00:03:03,180 --> 00:03:07,890
<font color="#E5E5E5">not time to try a fix</font><font color="#CCCCCC"> because you have</font>

67
00:03:05,550 --> 00:03:11,060
to reprogram your embedded<font color="#E5E5E5"> targets you</font>

68
00:03:07,890 --> 00:03:13,920
maybe have some<font color="#E5E5E5"> hardware to reconfigure</font>

69
00:03:11,060 --> 00:03:15,810
if you make a mistake<font color="#E5E5E5"> if there's a bag</font>

70
00:03:13,920 --> 00:03:17,549
you can potentially destroy your

71
00:03:15,810 --> 00:03:20,310
hardware<font color="#E5E5E5"> and that's an</font><font color="#CCCCCC"> example that I</font>

72
00:03:17,550 --> 00:03:23,640
<font color="#E5E5E5">will take later or even</font><font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> mention</font>

73
00:03:20,310 --> 00:03:26,580
it here<font color="#CCCCCC"> but you can also</font><font color="#E5E5E5"> an injured</font>

74
00:03:23,640 --> 00:03:30,149
people or<font color="#CCCCCC"> kill people in the</font><font color="#E5E5E5"> example of</font>

75
00:03:26,580 --> 00:03:33,300
<font color="#CCCCCC">aircrafts or trains stuff like that and</font>

76
00:03:30,150 --> 00:03:34,830
updates are usually<font color="#CCCCCC"> also very difficult</font>

77
00:03:33,300 --> 00:03:37,590
<font color="#E5E5E5">to propagate if you if you have a</font>

78
00:03:34,830 --> 00:03:39,209
<font color="#E5E5E5">project on</font><font color="#CCCCCC"> on a board</font><font color="#E5E5E5"> like this one it's</font>

79
00:03:37,590 --> 00:03:43,500
very<font color="#E5E5E5"> difficult</font><font color="#CCCCCC"> to propagate an update</font>

80
00:03:39,209 --> 00:03:46,350
once<font color="#E5E5E5"> you have a bug in it and the other</font>

81
00:03:43,500 --> 00:03:46,950
point that I will cover is the<font color="#E5E5E5"> need</font><font color="#CCCCCC"> of</font>

82
00:03:46,350 --> 00:03:51,150
control

83
00:03:46,950 --> 00:03:53,369
so I guess my presentation is a good<font color="#E5E5E5"> is</font>

84
00:03:51,150 --> 00:03:55,709
<font color="#E5E5E5">a good follow-up to what</font><font color="#CCCCCC"> jean-pierre</font>

85
00:03:53,370 --> 00:03:57,690
said because I will<font color="#CCCCCC"> also show the</font><font color="#E5E5E5"> high</font>

86
00:03:55,709 --> 00:04:00,330
<font color="#E5E5E5">level</font><font color="#CCCCCC"> representation in Ada and</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> you</font>

87
00:03:57,690 --> 00:04:04,470
can control the hardware<font color="#E5E5E5"> representation</font>

88
00:04:00,330 --> 00:04:07,440
so that's one<font color="#CCCCCC"> point and the real-time</font>

89
00:04:04,470 --> 00:04:08,170
<font color="#CCCCCC">constraints I will also quickly talk</font>

90
00:04:07,440 --> 00:04:15,040
<font color="#CCCCCC">about</font>

91
00:04:08,170 --> 00:04:18,310
<font color="#E5E5E5">tasking in real time in</font><font color="#CCCCCC"> annada so let's</font>

92
00:04:15,040 --> 00:04:21,700
get started<font color="#E5E5E5"> to talk about programming in</font>

93
00:04:18,310 --> 00:04:24,820
<font color="#E5E5E5">AD</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> will take the</font><font color="#CCCCCC"> example of a sample</font>

94
00:04:21,700 --> 00:04:28,000
<font color="#CCCCCC">matter</font><font color="#E5E5E5"> so it's a little motor like</font><font color="#CCCCCC"> this</font>

95
00:04:24,820 --> 00:04:31,360
you can set an angle it's controlled via

96
00:04:28,000 --> 00:04:34,450
a electric signal with some pulses<font color="#E5E5E5"> if</font>

97
00:04:31,360 --> 00:04:38,470
you put a<font color="#CCCCCC"> 1 millisecond pulses it will</font>

98
00:04:34,450 --> 00:04:41,200
go<font color="#E5E5E5"> 90 degrees to</font><font color="#CCCCCC"> the left one</font><font color="#E5E5E5"> point five</font>

99
00:04:38,470 --> 00:04:44,080
millisecond is the natural position<font color="#E5E5E5"> and</font>

100
00:04:41,200 --> 00:04:47,800
two point five is<font color="#CCCCCC"> ninety degrees to the</font>

101
00:04:44,080 --> 00:04:50,469
right<font color="#E5E5E5"> now what happens if you</font><font color="#CCCCCC"> don't</font>

102
00:04:47,800 --> 00:04:52,360
respect<font color="#E5E5E5"> this constraint well here you</font>

103
00:04:50,470 --> 00:04:54,460
<font color="#CCCCCC">are in the real world and there are</font><font color="#E5E5E5"> real</font>

104
00:04:52,360 --> 00:04:57,550
consequences<font color="#E5E5E5"> to your</font><font color="#CCCCCC"> Berg's</font>

105
00:04:54,460 --> 00:04:59,799
<font color="#E5E5E5">which means you will destroy your server</font>

106
00:04:57,550 --> 00:05:02,710
<font color="#CCCCCC">mode oh and of course that's</font><font color="#E5E5E5"> that that's</font>

107
00:04:59,800 --> 00:05:06,160
<font color="#E5E5E5">not something you want</font><font color="#CCCCCC"> it cost money you</font>

108
00:05:02,710 --> 00:05:09,280
will lose a<font color="#E5E5E5"> lot of time so you want to</font>

109
00:05:06,160 --> 00:05:10,930
<font color="#E5E5E5">avoid that</font><font color="#CCCCCC"> so let's see how a des will</font>

110
00:05:09,280 --> 00:05:12,549
help you to communicate<font color="#E5E5E5"> the constraint</font>

111
00:05:10,930 --> 00:05:16,690
<font color="#E5E5E5">of your system to avoid this kind of</font>

112
00:05:12,550 --> 00:05:18,940
situation<font color="#CCCCCC"> so if we take an</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> from</font>

113
00:05:16,690 --> 00:05:20,560
any other language<font color="#E5E5E5"> your</font><font color="#CCCCCC"> interface is to</font>

114
00:05:18,940 --> 00:05:23,020
<font color="#E5E5E5">control the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> servo motor will</font>

115
00:05:20,560 --> 00:05:25,630
probably look something<font color="#CCCCCC"> like this so you</font>

116
00:05:23,020 --> 00:05:30,070
a procedure<font color="#CCCCCC"> Eneida is a function that</font>

117
00:05:25,630 --> 00:05:32,229
doesn't return anything you say<font color="#E5E5E5"> ok let</font>

118
00:05:30,070 --> 00:05:35,770
the user set the angle<font color="#E5E5E5"> the desired angle</font>

119
00:05:32,229 --> 00:05:37,270
of the of the of the servo<font color="#CCCCCC"> motor now if</font>

120
00:05:35,770 --> 00:05:40,240
you are a really really<font color="#CCCCCC"> good programmer</font>

121
00:05:37,270 --> 00:05:44,109
you will do something<font color="#E5E5E5"> like this you add</font>

122
00:05:40,240 --> 00:05:45,610
comments<font color="#E5E5E5"> right so as you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see you</font><font color="#CCCCCC"> had</font>

123
00:05:44,110 --> 00:05:49,060
some very<font color="#E5E5E5"> very important information</font>

124
00:05:45,610 --> 00:05:52,330
<font color="#CCCCCC">over here because otherwise you will</font>

125
00:05:49,060 --> 00:05:57,220
have a failure<font color="#E5E5E5"> and you will break your</font>

126
00:05:52,330 --> 00:06:00,909
hardware<font color="#CCCCCC"> so that's what you would</font><font color="#E5E5E5"> do in</font>

127
00:05:57,220 --> 00:06:02,620
most programming languages and as you

128
00:06:00,910 --> 00:06:04,810
can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> this is not</font><font color="#E5E5E5"> very practical</font>

129
00:06:02,620 --> 00:06:06,430
so first the compiler and<font color="#E5E5E5"> the other</font>

130
00:06:04,810 --> 00:06:08,380
tools don't know<font color="#CCCCCC"> about this constraint</font>

131
00:06:06,430 --> 00:06:11,770
<font color="#E5E5E5">right because it's only in the comments</font>

132
00:06:08,380 --> 00:06:13,360
and then if<font color="#E5E5E5"> somebody decides to change</font>

133
00:06:11,770 --> 00:06:17,080
the<font color="#CCCCCC"> implementation and say ok I don't</font>

134
00:06:13,360 --> 00:06:19,090
want<font color="#CCCCCC"> to go from the</font><font color="#E5E5E5"> 90 degrees to</font><font color="#CCCCCC"> minus</font>

135
00:06:17,080 --> 00:06:20,380
90 I want to do a<font color="#E5E5E5"> percentage I want to</font>

136
00:06:19,090 --> 00:06:24,669
go<font color="#E5E5E5"> from</font><font color="#CCCCCC"> 0 to 100</font>

137
00:06:20,380 --> 00:06:27,400
well maybe the developer will forget to

138
00:06:24,670 --> 00:06:30,360
update<font color="#E5E5E5"> the comment and</font><font color="#CCCCCC"> users of the API</font>

139
00:06:27,400 --> 00:06:34,330
we don't be will not<font color="#CCCCCC"> be notified by this</font>

140
00:06:30,360 --> 00:06:38,100
so in<font color="#CCCCCC"> ada</font><font color="#E5E5E5"> you really express what you</font>

141
00:06:34,330 --> 00:06:42,219
want and you will define your own type

142
00:06:38,100 --> 00:06:43,420
<font color="#E5E5E5">and this is again in the in the</font>

143
00:06:42,220 --> 00:06:46,090
<font color="#E5E5E5">perspective of what you were just saying</font>

144
00:06:43,420 --> 00:06:48,550
<font color="#CCCCCC">that</font><font color="#E5E5E5"> there's a lot of languages that</font>

145
00:06:46,090 --> 00:06:50,530
<font color="#E5E5E5">claim strong typing but really strong</font>

146
00:06:48,550 --> 00:06:53,140
typing is not that useful if you cannot

147
00:06:50,530 --> 00:06:57,090
create your own type and<font color="#E5E5E5"> ADA gives you</font>

148
00:06:53,140 --> 00:07:00,370
all the power to create your own<font color="#E5E5E5"> types</font>

149
00:06:57,090 --> 00:07:02,739
so now in practice what does it mean

150
00:07:00,370 --> 00:07:06,370
once you've said that well as we said

151
00:07:02,740 --> 00:07:08,560
there are the compilers the tools<font color="#CCCCCC"> the</font>

152
00:07:06,370 --> 00:07:12,430
users<font color="#E5E5E5"> of the API everybody knows about</font>

153
00:07:08,560 --> 00:07:17,040
this<font color="#CCCCCC"> in practice what does it mean well</font>

154
00:07:12,430 --> 00:07:20,170
let's have a look<font color="#E5E5E5"> with with the compiler</font>

155
00:07:17,040 --> 00:07:21,910
so in the use<font color="#E5E5E5"> case really simple like</font>

156
00:07:20,170 --> 00:07:23,940
this<font color="#E5E5E5"> the compiler will be</font><font color="#CCCCCC"> able to tell</font>

157
00:07:21,910 --> 00:07:28,510
you<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> this is really</font><font color="#E5E5E5"> done</font><font color="#CCCCCC"> you're just</font>

158
00:07:23,940 --> 00:07:31,240
<font color="#E5E5E5">giving a wrong value so it will give you</font>

159
00:07:28,510 --> 00:07:35,440
<font color="#E5E5E5">warning so that's a first mistake</font>

160
00:07:31,240 --> 00:07:37,600
<font color="#CCCCCC">avoiding great</font><font color="#E5E5E5"> then if we go to a more</font>

161
00:07:35,440 --> 00:07:39,880
<font color="#E5E5E5">difficult example here we multiply</font>

162
00:07:37,600 --> 00:07:42,010
<font color="#E5E5E5">jingle by</font><font color="#CCCCCC"> two so it's more difficult to</font>

163
00:07:39,880 --> 00:07:45,640
analyze<font color="#E5E5E5"> in that case you will need to go</font>

164
00:07:42,010 --> 00:07:48,159
to a static analyzer<font color="#E5E5E5"> like code</font><font color="#CCCCCC"> Pia</font><font color="#E5E5E5"> and</font>

165
00:07:45,640 --> 00:07:49,830
again the tool because<font color="#CCCCCC"> it has more</font>

166
00:07:48,160 --> 00:07:54,700
information<font color="#CCCCCC"> will be able to give you</font>

167
00:07:49,830 --> 00:07:58,659
more precise and more<font color="#CCCCCC"> useful analysis so</font>

168
00:07:54,700 --> 00:08:01,150
again the here the static analysis<font color="#CCCCCC"> tool</font>

169
00:07:58,660 --> 00:08:05,200
will tell you there's a high probability

170
00:08:01,150 --> 00:08:08,320
of any whore here<font color="#E5E5E5"> the next tool is</font>

171
00:08:05,200 --> 00:08:10,539
formal proof<font color="#CCCCCC"> we spark</font><font color="#E5E5E5"> so there will be a</font>

172
00:08:08,320 --> 00:08:14,590
<font color="#E5E5E5">presentation this afternoon about about</font>

173
00:08:10,540 --> 00:08:16,840
spark<font color="#CCCCCC"> what what this gives you is</font><font color="#E5E5E5"> a</font>

174
00:08:14,590 --> 00:08:19,719
<font color="#E5E5E5">mathematical proof that there</font><font color="#CCCCCC"> is no</font>

175
00:08:16,840 --> 00:08:23,049
error<font color="#E5E5E5"> in your program so in that case</font>

176
00:08:19,720 --> 00:08:28,180
there<font color="#CCCCCC"> is</font><font color="#E5E5E5"> an error</font><font color="#CCCCCC"> so the tools will tell</font>

177
00:08:23,050 --> 00:08:29,919
you<font color="#CCCCCC"> so at this point you should catch</font>

178
00:08:28,180 --> 00:08:31,479
most<font color="#E5E5E5"> of your error but sometimes you</font>

179
00:08:29,919 --> 00:08:33,199
<font color="#E5E5E5">don't have access</font><font color="#CCCCCC"> to these</font><font color="#E5E5E5"> tools so</font>

180
00:08:31,479 --> 00:08:37,338
<font color="#E5E5E5">maybe</font><font color="#CCCCCC"> someday</font>

181
00:08:33,200 --> 00:08:41,269
we'll go<font color="#E5E5E5"> through so the next step is to</font>

182
00:08:37,339 --> 00:08:43,159
actually run<font color="#E5E5E5"> your application and you</font>

183
00:08:41,269 --> 00:08:47,269
will do<font color="#E5E5E5"> that during the development</font>

184
00:08:43,159 --> 00:08:49,790
usually<font color="#E5E5E5"> use</font><font color="#CCCCCC"> erewan and our debugger and</font>

185
00:08:47,269 --> 00:08:52,370
<font color="#CCCCCC">as Jean Pierre already explained when</font>

186
00:08:49,790 --> 00:08:54,439
there is such an error detected in an

187
00:08:52,370 --> 00:09:00,260
<font color="#E5E5E5">ADA program there will</font><font color="#CCCCCC"> be an exception</font>

188
00:08:54,440 --> 00:09:03,019
<font color="#CCCCCC">that is rate and once when you are</font>

189
00:09:00,260 --> 00:09:06,439
running<font color="#CCCCCC"> inside the debugger the</font>

190
00:09:03,019 --> 00:09:08,180
exception<font color="#E5E5E5"> will be</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> and so you stop</font>

191
00:09:06,440 --> 00:09:10,880
before<font color="#CCCCCC"> you are and you protect your</font>

192
00:09:08,180 --> 00:09:14,839
hardware<font color="#E5E5E5"> and then you can fix</font><font color="#CCCCCC"> so you</font>

193
00:09:10,880 --> 00:09:18,670
again<font color="#E5E5E5"> you catch the bug very early so</font>

194
00:09:14,839 --> 00:09:22,370
the next step is to actually catch the

195
00:09:18,670 --> 00:09:25,399
error inside the code itself so you you

196
00:09:22,370 --> 00:09:27,709
know it's just<font color="#E5E5E5"> an exception</font><font color="#CCCCCC"> stand out</font>

197
00:09:25,399 --> 00:09:31,399
<font color="#E5E5E5">ADA exception so you can catch</font><font color="#CCCCCC"> it like</font>

198
00:09:27,709 --> 00:09:33,170
<font color="#E5E5E5">this and you again stop before doing</font>

199
00:09:31,399 --> 00:09:34,940
<font color="#E5E5E5">something bad so you protect your</font>

200
00:09:33,170 --> 00:09:40,279
hardware<font color="#E5E5E5"> and you save money</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> save</font>

201
00:09:34,940 --> 00:09:43,070
time etc etc the<font color="#E5E5E5"> last chance is this</font>

202
00:09:40,279 --> 00:09:46,250
procedure<font color="#E5E5E5"> when an</font><font color="#CCCCCC"> exception is not</font>

203
00:09:43,070 --> 00:09:48,320
<font color="#E5E5E5">handled in a jar</font><font color="#CCCCCC"> yeah this procedure</font>

204
00:09:46,250 --> 00:09:50,390
will be called it's a very good name the

205
00:09:48,320 --> 00:09:51,920
last Chancellor<font color="#E5E5E5"> and that's your last</font>

206
00:09:50,390 --> 00:09:52,550
chance to do<font color="#E5E5E5"> something about the</font>

207
00:09:51,920 --> 00:09:55,579
situation

208
00:09:52,550 --> 00:09:57,319
usually when you when you when<font color="#E5E5E5"> you go to</font>

209
00:09:55,579 --> 00:09:59,120
this<font color="#CCCCCC"> you're in really really bad</font>

210
00:09:57,320 --> 00:10:01,760
situation<font color="#E5E5E5"> so you probably want</font><font color="#CCCCCC"> to shut</font>

211
00:09:59,120 --> 00:10:04,269
<font color="#CCCCCC">down everything reset the board or maybe</font>

212
00:10:01,760 --> 00:10:08,720
wait for you so input<font color="#E5E5E5"> something either</font>

213
00:10:04,269 --> 00:10:13,630
<font color="#CCCCCC">and so that's your last results</font><font color="#E5E5E5"> after</font>

214
00:10:08,720 --> 00:10:17,630
that<font color="#E5E5E5"> there</font><font color="#CCCCCC"> is no more protection</font><font color="#E5E5E5"> so</font>

215
00:10:13,630 --> 00:10:19,760
those checks that you<font color="#E5E5E5"> the constraint</font>

216
00:10:17,630 --> 00:10:21,850
<font color="#E5E5E5">that you put on the type and the checks</font>

217
00:10:19,760 --> 00:10:23,930
that<font color="#E5E5E5"> come with them they have some</font>

218
00:10:21,850 --> 00:10:26,750
<font color="#E5E5E5">performance impact of course because</font>

219
00:10:23,930 --> 00:10:29,180
there will be more code added to your

220
00:10:26,750 --> 00:10:33,050
binary<font color="#E5E5E5"> there will be some comparison</font>

221
00:10:29,180 --> 00:10:34,910
<font color="#E5E5E5">stuff like that it's</font><font color="#CCCCCC"> very useful when</font>

222
00:10:33,050 --> 00:10:36,439
you are<font color="#E5E5E5"> in development in</font><font color="#CCCCCC"> they begin</font>

223
00:10:34,910 --> 00:10:38,209
<font color="#CCCCCC">because you want to</font><font color="#E5E5E5"> catch the bug as</font>

224
00:10:36,440 --> 00:10:40,639
early as possible<font color="#E5E5E5"> and you can want to</font>

225
00:10:38,209 --> 00:10:41,959
catch all<font color="#E5E5E5"> of them but once you</font><font color="#CCCCCC"> are in</font>

226
00:10:40,639 --> 00:10:43,490
production<font color="#E5E5E5"> maybe you want all the</font>

227
00:10:41,959 --> 00:10:44,900
performances and<font color="#E5E5E5"> you can remove</font>

228
00:10:43,490 --> 00:10:48,580
<font color="#E5E5E5">everything</font>

229
00:10:44,900 --> 00:10:52,010
and in that case it's up to you if you

230
00:10:48,580 --> 00:11:00,650
<font color="#E5E5E5">really want to</font><font color="#CCCCCC"> dare running your</font>

231
00:10:52,010 --> 00:11:04,360
<font color="#CCCCCC">application without</font><font color="#E5E5E5"> any checks so</font>

232
00:11:00,650 --> 00:11:09,020
another example<font color="#E5E5E5"> of</font><font color="#CCCCCC"> how you can express</font>

233
00:11:04,360 --> 00:11:10,520
what you mean in<font color="#E5E5E5"> an idea is contracts so</font>

234
00:11:09,020 --> 00:11:13,970
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> also a presentation</font><font color="#CCCCCC"> about</font>

235
00:11:10,520 --> 00:11:15,740
contracts later<font color="#E5E5E5"> on</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> just a quick</font>

236
00:11:13,970 --> 00:11:18,230
<font color="#CCCCCC">example</font><font color="#E5E5E5"> I like this example</font><font color="#CCCCCC"> because it's</font>

237
00:11:15,740 --> 00:11:21,650
<font color="#CCCCCC">very</font><font color="#E5E5E5"> simple and this actually saves me a</font>

238
00:11:18,230 --> 00:11:28,370
couple of times so we have a driver for

239
00:11:21,650 --> 00:11:30,290
<font color="#E5E5E5">the server</font><font color="#CCCCCC"> alright and usually there are</font>

240
00:11:28,370 --> 00:11:32,750
<font color="#CCCCCC">some</font><font color="#E5E5E5"> hardware to initialize before you</font>

241
00:11:30,290 --> 00:11:34,610
can actually control<font color="#E5E5E5"> the</font><font color="#CCCCCC"> the server</font>

242
00:11:32,750 --> 00:11:37,160
matter so this is exactly what we

243
00:11:34,610 --> 00:11:40,940
described here<font color="#E5E5E5"> we say to the user of our</font>

244
00:11:37,160 --> 00:11:42,709
API<font color="#CCCCCC"> that yet so</font><font color="#E5E5E5"> it's a precondition</font><font color="#CCCCCC"> of</font>

245
00:11:40,940 --> 00:11:44,240
the of the procedure set angle<font color="#CCCCCC"> it's</font>

246
00:11:42,710 --> 00:11:48,680
something<font color="#E5E5E5"> that must be true</font><font color="#CCCCCC"> before you</font>

247
00:11:44,240 --> 00:11:52,220
call<font color="#E5E5E5"> the procedure and we say that the</font>

248
00:11:48,680 --> 00:11:55,609
servo has<font color="#E5E5E5"> been initialized when the</font>

249
00:11:52,220 --> 00:11:58,610
condition is not<font color="#E5E5E5"> true</font><font color="#CCCCCC"> well it's the</font><font color="#E5E5E5"> same</font>

250
00:11:55,610 --> 00:12:01,010
story<font color="#CCCCCC"> you have so the tools</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> be able</font>

251
00:11:58,610 --> 00:12:03,800
to tell you<font color="#E5E5E5"> it from this</font><font color="#CCCCCC"> information and</font>

252
00:12:01,010 --> 00:12:05,960
then the debugger will<font color="#CCCCCC"> we'll be able</font><font color="#E5E5E5"> to</font>

253
00:12:03,800 --> 00:12:07,490
catch the exception<font color="#CCCCCC"> you can catch it</font><font color="#E5E5E5"> in</font>

254
00:12:05,960 --> 00:12:14,540
the code as<font color="#E5E5E5"> well and the last</font><font color="#CCCCCC"> rinse</font>

255
00:12:07,490 --> 00:12:18,050
<font color="#E5E5E5">under etc another a quick example that</font><font color="#CCCCCC"> I</font>

256
00:12:14,540 --> 00:12:20,810
really<font color="#CCCCCC"> like about ADA</font><font color="#E5E5E5"> because many</font>

257
00:12:18,050 --> 00:12:23,689
people<font color="#CCCCCC"> can</font><font color="#E5E5E5"> relate</font><font color="#CCCCCC"> to this</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> you use</font><font color="#E5E5E5"> C</font>

258
00:12:20,810 --> 00:12:28,069
or<font color="#E5E5E5"> C++ for instance you will often see a</font>

259
00:12:23,690 --> 00:12:32,600
<font color="#E5E5E5">set in C</font><font color="#CCCCCC"> or C++ code for functions</font><font color="#E5E5E5"> that</font>

260
00:12:28,070 --> 00:12:34,670
take<font color="#E5E5E5"> pointers as parameter say okay</font><font color="#CCCCCC"> to</font>

261
00:12:32,600 --> 00:12:37,250
check<font color="#E5E5E5"> that a pointer is actually not new</font>

262
00:12:34,670 --> 00:12:41,479
you need add that's one of the<font color="#E5E5E5"> examples</font>

263
00:12:37,250 --> 00:12:43,430
<font color="#E5E5E5">how you can express that you take a</font>

264
00:12:41,480 --> 00:12:45,770
pointer<font color="#CCCCCC"> okay but it should not be new</font>

265
00:12:43,430 --> 00:12:49,479
and<font color="#E5E5E5"> that's part of actually</font><font color="#CCCCCC"> your your</font>

266
00:12:45,770 --> 00:12:49,480
your interface in your API

267
00:12:50,490 --> 00:12:57,000
so now let's talk a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> about</font>

268
00:12:53,130 --> 00:12:59,470
<font color="#E5E5E5">hardware mapping so that's one of the</font>

269
00:12:57,000 --> 00:13:02,710
things we need<font color="#E5E5E5"> when</font><font color="#CCCCCC"> we do embedded</font>

270
00:12:59,470 --> 00:13:04,930
development<font color="#E5E5E5"> we need usually a good</font>

271
00:13:02,710 --> 00:13:09,100
control<font color="#E5E5E5"> of the hardware representation</font>

272
00:13:04,930 --> 00:13:11,229
<font color="#CCCCCC">about type and so as rompilla said in</font>

273
00:13:09,100 --> 00:13:13,570
<font color="#CCCCCC">ada</font><font color="#E5E5E5"> you always have the</font><font color="#CCCCCC"> high-level view</font>

274
00:13:11,230 --> 00:13:15,580
of<font color="#E5E5E5"> your type and then you can control</font>

275
00:13:13,570 --> 00:13:18,580
<font color="#E5E5E5">its representation so for instance here</font>

276
00:13:15,580 --> 00:13:22,120
<font color="#E5E5E5">I say that</font><font color="#CCCCCC"> my type servo angle should</font><font color="#E5E5E5"> be</font>

277
00:13:18,580 --> 00:13:25,810
represented in in the<font color="#E5E5E5"> byte and I want 16</font>

278
00:13:22,120 --> 00:13:27,250
alignment<font color="#E5E5E5"> if I use a small smaller value</font>

279
00:13:25,810 --> 00:13:30,040
here are two small value the compiler

280
00:13:27,250 --> 00:13:33,220
will<font color="#E5E5E5"> tell me okay it's not possible</font><font color="#CCCCCC"> same</font>

281
00:13:30,040 --> 00:13:35,920
thing if<font color="#E5E5E5"> I somebody tries to increase</font>

282
00:13:33,220 --> 00:13:37,840
the range and it doesn't fit in the<font color="#E5E5E5"> in</font>

283
00:13:35,920 --> 00:13:42,120
the in the<font color="#E5E5E5"> size anymore</font><font color="#CCCCCC"> there will be a</font>

284
00:13:37,840 --> 00:13:44,620
compiler here<font color="#E5E5E5"> so this is useful when</font>

285
00:13:42,120 --> 00:13:48,460
addressing<font color="#CCCCCC"> hardware it's also</font><font color="#E5E5E5"> very</font>

286
00:13:44,620 --> 00:13:59,590
<font color="#E5E5E5">useful in network communication to form</font>

287
00:13:48,460 --> 00:14:02,830
packets<font color="#E5E5E5"> the next really common practice</font>

288
00:13:59,590 --> 00:14:05,050
in in<font color="#E5E5E5"> embedded programming usually with</font>

289
00:14:02,830 --> 00:14:06,820
small my controller microcontroller

290
00:14:05,050 --> 00:14:09,449
sorry like like you<font color="#CCCCCC"> having in</font><font color="#E5E5E5"> this kind</font>

291
00:14:06,820 --> 00:14:13,960
of boards<font color="#CCCCCC"> it's the memory mapped</font>

292
00:14:09,450 --> 00:14:15,460
register so I don't know if you familiar

293
00:14:13,960 --> 00:14:18,700
with this with this notion I will try<font color="#CCCCCC"> to</font>

294
00:14:15,460 --> 00:14:20,650
describe it<font color="#E5E5E5"> really</font><font color="#CCCCCC"> quickly so this is a</font>

295
00:14:18,700 --> 00:14:22,750
representation of<font color="#E5E5E5"> your address space so</font>

296
00:14:20,650 --> 00:14:24,699
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> all the memory I will</font><font color="#CCCCCC"> do</font>

297
00:14:22,750 --> 00:14:28,930
<font color="#CCCCCC">addresses that</font><font color="#E5E5E5"> your that your CPU can</font>

298
00:14:24,700 --> 00:14:32,500
can can read and write<font color="#CCCCCC"> of</font><font color="#E5E5E5"> course on</font>

299
00:14:28,930 --> 00:14:35,530
small<font color="#E5E5E5"> embedded processors like that you</font>

300
00:14:32,500 --> 00:14:38,890
don't<font color="#E5E5E5"> have the full memory or you never</font>

301
00:14:35,530 --> 00:14:40,360
have the<font color="#E5E5E5"> full memory used so you you</font>

302
00:14:38,890 --> 00:14:41,920
will<font color="#E5E5E5"> have some areas where</font><font color="#CCCCCC"> you have</font>

303
00:14:40,360 --> 00:14:44,470
<font color="#CCCCCC">viewed the flash</font><font color="#E5E5E5"> it's the read-only</font>

304
00:14:41,920 --> 00:14:47,439
memory that<font color="#CCCCCC"> holds your your your program</font>

305
00:14:44,470 --> 00:14:50,500
you have some<font color="#E5E5E5"> areas where</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> the</font>

306
00:14:47,440 --> 00:14:56,860
<font color="#E5E5E5">RAM other areas will be allocated to</font>

307
00:14:50,500 --> 00:14:59,650
<font color="#E5E5E5">peripherals</font><font color="#CCCCCC"> what this means is that when</font>

308
00:14:56,860 --> 00:15:01,040
the compilers<font color="#CCCCCC"> when the CPU</font><font color="#E5E5E5"> sorry reads</font>

309
00:14:59,650 --> 00:15:03,740
or writes<font color="#E5E5E5"> that</font>

310
00:15:01,040 --> 00:15:07,579
from those addresses<font color="#E5E5E5"> it will be exactly</font>

311
00:15:03,740 --> 00:15:10,790
like talking to the peripheral so when

312
00:15:07,579 --> 00:15:12,800
you read a data from<font color="#E5E5E5"> this</font><font color="#CCCCCC"> address you</font>

313
00:15:10,790 --> 00:15:16,360
<font color="#CCCCCC">receive data from</font><font color="#E5E5E5"> the peripheral when</font>

314
00:15:12,800 --> 00:15:16,359
you write you send data to a peripheral

315
00:15:17,319 --> 00:15:22,099
<font color="#E5E5E5">and so this is the kind of description</font>

316
00:15:20,810 --> 00:15:25,130
that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> will find in</font><font color="#CCCCCC"> your hardware</font>

317
00:15:22,100 --> 00:15:27,829
<font color="#E5E5E5">documentation</font><font color="#CCCCCC"> so this is a virtual</font>

318
00:15:25,130 --> 00:15:29,990
<font color="#E5E5E5">example it's not actually representing</font>

319
00:15:27,829 --> 00:15:31,750
something<font color="#E5E5E5"> real but it's really exactly</font>

320
00:15:29,990 --> 00:15:35,329
<font color="#E5E5E5">like you would find in the documentation</font>

321
00:15:31,750 --> 00:15:40,899
<font color="#CCCCCC">so here we have what what is</font><font color="#E5E5E5"> called the</font>

322
00:15:35,329 --> 00:15:43,130
memory<font color="#E5E5E5"> mapped register so it's</font><font color="#CCCCCC"> 8 bits</font>

323
00:15:40,899 --> 00:15:45,110
<font color="#E5E5E5">and we can see</font><font color="#CCCCCC"> that there are</font><font color="#E5E5E5"> some</font>

324
00:15:43,130 --> 00:15:47,420
fields inside those edits<font color="#CCCCCC"> that are</font>

325
00:15:45,110 --> 00:15:50,600
defined<font color="#E5E5E5"> so</font><font color="#CCCCCC"> the first</font><font color="#E5E5E5"> four bits are</font>

326
00:15:47,420 --> 00:15:53,269
reserved they are not used the fourth

327
00:15:50,600 --> 00:15:55,370
and fifth are used<font color="#E5E5E5"> for the sense field</font>

328
00:15:53,269 --> 00:15:58,819
<font color="#E5E5E5">and</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> six and</font><font color="#CCCCCC"> seven are not used as</font>

329
00:15:55,370 --> 00:16:00,860
well<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> documentation will give</font>

330
00:15:58,819 --> 00:16:02,660
will tell us what<font color="#E5E5E5"> are the possible</font>

331
00:16:00,860 --> 00:16:07,850
values<font color="#E5E5E5"> and the meaning of those values</font>

332
00:16:02,660 --> 00:16:10,189
for for the sense field in C<font color="#E5E5E5"> usually you</font>

333
00:16:07,850 --> 00:16:13,250
will<font color="#CCCCCC"> have</font><font color="#E5E5E5"> a drivers written with</font>

334
00:16:10,190 --> 00:16:18,440
something like<font color="#E5E5E5"> that so you will</font><font color="#CCCCCC"> make</font>

335
00:16:13,250 --> 00:16:23,660
more or less<font color="#CCCCCC"> macros and beat-beat</font><font color="#E5E5E5"> shifts</font>

336
00:16:18,440 --> 00:16:26,029
and<font color="#E5E5E5"> masks like you see here so as you</font>

337
00:16:23,660 --> 00:16:28,730
can see<font color="#E5E5E5"> and you can probably guess</font><font color="#CCCCCC"> that</font>

338
00:16:26,029 --> 00:16:30,920
this is<font color="#CCCCCC"> not really safe to</font><font color="#E5E5E5"> do for</font>

339
00:16:28,730 --> 00:16:32,839
instance<font color="#E5E5E5"> if you want to put the value</font><font color="#CCCCCC"> 1</font>

340
00:16:30,920 --> 00:16:35,569
which is a wrong value for this<font color="#E5E5E5"> for this</font>

341
00:16:32,839 --> 00:16:38,209
field you will don't know<font color="#E5E5E5"> about it the</font>

342
00:16:35,569 --> 00:16:40,519
compiler will not know also<font color="#CCCCCC"> this is not</font>

343
00:16:38,209 --> 00:16:43,489
very<font color="#E5E5E5"> practical to write like you you</font>

344
00:16:40,519 --> 00:16:46,069
have<font color="#E5E5E5"> you</font><font color="#CCCCCC"> need a special a</font><font color="#E5E5E5"> special</font>

345
00:16:43,490 --> 00:16:54,970
instruction<font color="#E5E5E5"> to clear the field first and</font>

346
00:16:46,069 --> 00:16:58,069
then set its value etc etc so<font color="#CCCCCC"> now</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> Ada</font>

347
00:16:54,970 --> 00:17:00,050
<font color="#CCCCCC">again what we will do is have the</font><font color="#E5E5E5"> high</font>

348
00:16:58,069 --> 00:17:02,449
<font color="#E5E5E5">level view and the low</font><font color="#CCCCCC"> level</font>

349
00:17:00,050 --> 00:17:04,668
representation<font color="#CCCCCC"> of the time</font><font color="#E5E5E5"> so first</font><font color="#CCCCCC"> we</font>

350
00:17:02,449 --> 00:17:07,099
<font color="#CCCCCC">declare an animation type</font><font color="#E5E5E5"> so that's the</font>

351
00:17:04,669 --> 00:17:10,130
the pin<font color="#E5E5E5"> sense field that we saw before</font>

352
00:17:07,099 --> 00:17:11,929
we declare<font color="#E5E5E5"> its high level view which is</font>

353
00:17:10,130 --> 00:17:14,839
there's<font color="#E5E5E5"> three values</font>

354
00:17:11,930 --> 00:17:16,730
disabled high and low<font color="#E5E5E5"> we specified</font><font color="#CCCCCC"> the</font>

355
00:17:14,839 --> 00:17:19,429
hardware representation so the size will

356
00:17:16,730 --> 00:17:22,750
be true<font color="#E5E5E5"> and the also the</font><font color="#CCCCCC"> hardware</font>

357
00:17:19,430 --> 00:17:27,110
representation of the different<font color="#E5E5E5"> values</font>

358
00:17:22,750 --> 00:17:28,610
next we go to the<font color="#E5E5E5"> register itself</font><font color="#CCCCCC"> again</font>

359
00:17:27,109 --> 00:17:30,679
same<font color="#CCCCCC"> thing we have the</font><font color="#E5E5E5"> high level view</font>

360
00:17:28,610 --> 00:17:34,459
and the low<font color="#CCCCCC"> level view so we have the</font>

361
00:17:30,680 --> 00:17:38,450
first reserved a field of the register

362
00:17:34,460 --> 00:17:43,070
<font color="#E5E5E5">we then define our sense field and</font><font color="#CCCCCC"> the</font>

363
00:17:38,450 --> 00:17:44,780
second result and as<font color="#E5E5E5"> rompilla showed as</font>

364
00:17:43,070 --> 00:17:47,230
well in<font color="#E5E5E5"> this presentation here you</font>

365
00:17:44,780 --> 00:17:50,510
define the hardware representation<font color="#E5E5E5"> and</font>

366
00:17:47,230 --> 00:17:53,240
so you define the exact position<font color="#E5E5E5"> of each</font>

367
00:17:50,510 --> 00:17:55,280
field and as<font color="#E5E5E5"> you can see</font><font color="#CCCCCC"> this is really</font>

368
00:17:53,240 --> 00:18:02,230
<font color="#E5E5E5">exactly what is what</font><font color="#CCCCCC"> is in the</font>

369
00:17:55,280 --> 00:18:08,270
<font color="#E5E5E5">documentation</font><font color="#CCCCCC"> to use this type well you</font>

370
00:18:02,230 --> 00:18:10,910
declare and<font color="#CCCCCC"> yo register</font><font color="#E5E5E5"> and with this</font>

371
00:18:08,270 --> 00:18:13,220
<font color="#CCCCCC">constrict here you say with address you</font>

372
00:18:10,910 --> 00:18:15,350
tell the compiler that<font color="#E5E5E5"> this variable</font>

373
00:18:13,220 --> 00:18:17,390
<font color="#E5E5E5">should not be allocated on the stack or</font>

374
00:18:15,350 --> 00:18:19,790
should not<font color="#E5E5E5"> be allocated on the</font><font color="#CCCCCC"> heap</font><font color="#E5E5E5"> you</font>

375
00:18:17,390 --> 00:18:21,800
<font color="#E5E5E5">specify yourself I know that there</font><font color="#CCCCCC"> is an</font>

376
00:18:19,790 --> 00:18:25,190
<font color="#E5E5E5">i/o registers</font><font color="#CCCCCC"> address and that's</font><font color="#E5E5E5"> how you</font>

377
00:18:21,800 --> 00:18:29,080
specify it<font color="#E5E5E5"> in Ada and then it's just you</font>

378
00:18:25,190 --> 00:18:31,850
<font color="#E5E5E5">just assign the value of</font><font color="#CCCCCC"> an enumeration</font>

379
00:18:29,080 --> 00:18:34,270
<font color="#CCCCCC">and so you have all</font><font color="#E5E5E5"> the checks that we</font>

380
00:18:31,850 --> 00:18:34,270
mentioned before

381
00:18:34,300 --> 00:18:40,220
so this kind<font color="#CCCCCC"> of representation can be a</font>

382
00:18:38,690 --> 00:18:46,420
little<font color="#CCCCCC"> bit difficult to write a bit</font>

383
00:18:40,220 --> 00:18:50,960
<font color="#E5E5E5">little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> tedious so fortunately the</font>

384
00:18:46,420 --> 00:18:54,980
<font color="#E5E5E5">you know I am the creator of the the</font>

385
00:18:50,960 --> 00:18:58,850
<font color="#CCCCCC">cortex-m</font><font color="#E5E5E5"> microcontroller they developed</font>

386
00:18:54,980 --> 00:19:01,340
a format<font color="#E5E5E5"> called SVD which is a hardware</font>

387
00:18:58,850 --> 00:19:03,110
<font color="#E5E5E5">description format</font><font color="#CCCCCC"> so as</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see</font>

388
00:19:01,340 --> 00:19:05,720
here it's a description of the different

389
00:19:03,110 --> 00:19:10,370
<font color="#E5E5E5">registers</font><font color="#CCCCCC"> gives you</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> address gives</font>

390
00:19:05,720 --> 00:19:12,580
you the<font color="#E5E5E5"> different values etc etc and we</font>

391
00:19:10,370 --> 00:19:15,080
developed so my<font color="#E5E5E5"> colleague</font><font color="#CCCCCC"> z1</font><font color="#E5E5E5"> developed a</font>

392
00:19:12,580 --> 00:19:18,980
tool that will take this format and

393
00:19:15,080 --> 00:19:21,320
<font color="#CCCCCC">produce the the ADA representation that</font>

394
00:19:18,980 --> 00:19:23,510
we saw here this will be generated from

395
00:19:21,320 --> 00:19:25,909
<font color="#CCCCCC">the description so this is</font><font color="#E5E5E5"> really a</font>

396
00:19:23,510 --> 00:19:28,610
great<font color="#E5E5E5"> great way a great tool</font><font color="#CCCCCC"> to start</font>

397
00:19:25,910 --> 00:19:30,740
programming<font color="#CCCCCC"> on</font><font color="#E5E5E5"> microcontroller in EDA</font>

398
00:19:28,610 --> 00:19:32,800
because most<font color="#E5E5E5"> of the hardware</font>

399
00:19:30,740 --> 00:19:42,800
representation will<font color="#CCCCCC"> be automatically</font>

400
00:19:32,800 --> 00:19:45,320
<font color="#CCCCCC">generated another</font><font color="#E5E5E5"> example of EDA</font>

401
00:19:42,800 --> 00:19:47,960
features that are really<font color="#CCCCCC"> useful in the</font>

402
00:19:45,320 --> 00:19:50,300
<font color="#CCCCCC">indie embedded area</font>

403
00:19:47,960 --> 00:19:51,830
it's the tasking embedded inside the

404
00:19:50,300 --> 00:19:55,610
language so jean-pierre you already

405
00:19:51,830 --> 00:19:58,070
talked a little bit about this<font color="#CCCCCC"> I have a</font>

406
00:19:55,610 --> 00:20:00,169
blog post<font color="#E5E5E5"> right</font><font color="#CCCCCC"> here if you want more</font>

407
00:19:58,070 --> 00:20:02,060
info on<font color="#CCCCCC"> this I will just describe</font>

408
00:20:00,170 --> 00:20:04,550
<font color="#E5E5E5">quickly a few stuff but there's more</font>

409
00:20:02,060 --> 00:20:07,520
info over there<font color="#E5E5E5"> so</font><font color="#CCCCCC"> in EDA</font>

410
00:20:04,550 --> 00:20:11,419
tasks or threads are a really native

411
00:20:07,520 --> 00:20:16,040
feature of the language<font color="#CCCCCC"> and for the</font>

412
00:20:11,420 --> 00:20:20,500
embedded market or the embedded projects

413
00:20:16,040 --> 00:20:23,780
<font color="#E5E5E5">there is actually a specific tasking</font>

414
00:20:20,500 --> 00:20:26,330
profile which is<font color="#CCCCCC"> a restriction about the</font>

415
00:20:23,780 --> 00:20:29,149
big the big tasking features of<font color="#CCCCCC"> Ada and</font>

416
00:20:26,330 --> 00:20:30,710
<font color="#CCCCCC">it's called Ravens cow and this</font><font color="#E5E5E5"> is</font>

417
00:20:29,150 --> 00:20:32,240
really<font color="#CCCCCC"> meant for</font><font color="#E5E5E5"> real-time operating</font>

418
00:20:30,710 --> 00:20:35,600
system and to give you real-time

419
00:20:32,240 --> 00:20:38,000
<font color="#CCCCCC">properties</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> Ada some of the features</font>

420
00:20:35,600 --> 00:20:40,310
that are<font color="#E5E5E5"> available you have a clock that</font>

421
00:20:38,000 --> 00:20:42,710
<font color="#E5E5E5">will give you the system tick you can do</font>

422
00:20:40,310 --> 00:20:46,610
<font color="#E5E5E5">delay so put a task in suspend the</font><font color="#CCCCCC"> task</font>

423
00:20:42,710 --> 00:20:48,350
for a given amount<font color="#CCCCCC"> of time you</font><font color="#E5E5E5"> have</font>

424
00:20:46,610 --> 00:20:52,459
<font color="#E5E5E5">protected objects which are really</font>

425
00:20:48,350 --> 00:20:54,320
something quite<font color="#E5E5E5"> unique I think it's it's</font>

426
00:20:52,460 --> 00:20:58,550
it's difficult<font color="#E5E5E5"> to explain quickly but</font>

427
00:20:54,320 --> 00:21:00,320
it's a mix of<font color="#CCCCCC"> mutexes and semaphore and</font>

428
00:20:58,550 --> 00:21:02,659
<font color="#CCCCCC">you can also do</font><font color="#E5E5E5"> interrupts on laying</font>

429
00:21:00,320 --> 00:21:05,418
with this you will see in the blog<font color="#CCCCCC"> post</font>

430
00:21:02,660 --> 00:21:08,650
<font color="#CCCCCC">I have an</font><font color="#E5E5E5"> example how you you can really</font>

431
00:21:05,419 --> 00:21:11,540
<font color="#E5E5E5">create an elegant</font><font color="#CCCCCC"> interrupt handler</font><font color="#E5E5E5"> and</font>

432
00:21:08,650 --> 00:21:15,950
<font color="#CCCCCC">a driver for instance for</font><font color="#E5E5E5"> our soil box</font>

433
00:21:11,540 --> 00:21:18,800
using the<font color="#E5E5E5"> protected object</font><font color="#CCCCCC"> so gives you</font>

434
00:21:15,950 --> 00:21:20,840
multiple things but mutual exclusion<font color="#E5E5E5"> you</font>

435
00:21:18,800 --> 00:21:23,389
can do synchronization between tasks so

436
00:21:20,840 --> 00:21:24,350
for instance if you have a task<font color="#CCCCCC"> that</font>

437
00:21:23,390 --> 00:21:26,990
produces<font color="#CCCCCC"> data</font>

438
00:21:24,350 --> 00:21:30,260
attack that consumes data you can have

439
00:21:26,990 --> 00:21:32,600
the task the consumer waits in a

440
00:21:30,260 --> 00:21:35,510
suspended<font color="#E5E5E5"> state</font><font color="#CCCCCC"> for the</font><font color="#E5E5E5"> producer to</font>

441
00:21:32,600 --> 00:21:36,709
actually give it data and

442
00:21:35,510 --> 00:21:39,140
all of this is<font color="#E5E5E5"> really part of the</font>

443
00:21:36,710 --> 00:21:41,060
language<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> really safe to use because</font>

444
00:21:39,140 --> 00:21:46,340
<font color="#CCCCCC">there are a lot of control over what</font><font color="#E5E5E5"> you</font>

445
00:21:41,060 --> 00:21:48,169
<font color="#CCCCCC">can do like you what you cannot the last</font>

446
00:21:46,340 --> 00:21:52,790
point is as I said<font color="#E5E5E5"> the interrupt on link</font>

447
00:21:48,170 --> 00:21:55,910
so there's also as part<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> ADA a</font>

448
00:21:52,790 --> 00:21:59,290
<font color="#E5E5E5">language the constrict you to handle</font>

449
00:21:55,910 --> 00:22:05,690
<font color="#E5E5E5">interrupts which is very very useful</font><font color="#CCCCCC"> for</font>

450
00:21:59,290 --> 00:22:09,139
embedded in microcontrollers so this is

451
00:22:05,690 --> 00:22:11,300
<font color="#E5E5E5">just a quick example of a task in</font><font color="#CCCCCC"> ADA so</font>

452
00:22:09,140 --> 00:22:13,100
you can see<font color="#CCCCCC"> tasks it's a keyword of</font><font color="#E5E5E5"> the</font>

453
00:22:11,300 --> 00:22:15,590
<font color="#CCCCCC">language so here we declare the the body</font>

454
00:22:13,100 --> 00:22:18,199
of the<font color="#E5E5E5"> of the task and it's just</font>

455
00:22:15,590 --> 00:22:21,730
<font color="#E5E5E5">basically a loop we do a delay so we</font>

456
00:22:18,200 --> 00:22:24,230
suspend the task<font color="#E5E5E5"> every time and we add</font>

457
00:22:21,730 --> 00:22:24,620
100 milliseconds so this will be<font color="#CCCCCC"> at 10</font>

458
00:22:24,230 --> 00:22:26,990
Hertz

459
00:22:24,620 --> 00:22:32,199
it's a typical code that you<font color="#E5E5E5"> would use</font>

460
00:22:26,990 --> 00:22:32,200
to<font color="#E5E5E5"> make a periodic task in it</font>

461
00:22:36,440 --> 00:22:42,480
so now<font color="#E5E5E5"> I will talk about the</font><font color="#CCCCCC"> odorous</font>

462
00:22:40,110 --> 00:22:49,560
library project this<font color="#E5E5E5"> project we started</font>

463
00:22:42,480 --> 00:22:51,540
<font color="#E5E5E5">in 2015</font><font color="#CCCCCC"> I think and so show you a few</font>

464
00:22:49,560 --> 00:22:54,929
points it's a<font color="#E5E5E5"> few</font><font color="#CCCCCC"> more library so it's a</font>

465
00:22:51,540 --> 00:22:57,600
library<font color="#E5E5E5"> that will give you tools</font><font color="#CCCCCC"> to</font>

466
00:22:54,930 --> 00:23:01,230
support<font color="#E5E5E5"> and to implement programs on</font>

467
00:22:57,600 --> 00:23:05,189
microcontrollers like this one<font color="#CCCCCC"> it's</font>

468
00:23:01,230 --> 00:23:07,200
<font color="#CCCCCC">hardware inventory</font><font color="#E5E5E5"> dependent so this is</font>

469
00:23:05,190 --> 00:23:08,820
both a bad thing because<font color="#CCCCCC"> it means we</font>

470
00:23:07,200 --> 00:23:10,800
<font color="#CCCCCC">have to write stuff ourselves it's</font><font color="#E5E5E5"> not</font>

471
00:23:08,820 --> 00:23:13,260
provided<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the vendors but on the other</font>

472
00:23:10,800 --> 00:23:15,899
<font color="#CCCCCC">hand we can work on</font><font color="#E5E5E5"> really focus on</font>

473
00:23:13,260 --> 00:23:20,670
<font color="#E5E5E5">really having the most clean interfaces</font>

474
00:23:15,900 --> 00:23:23,520
and<font color="#E5E5E5"> and reusable code it's 100 percent</font>

475
00:23:20,670 --> 00:23:27,540
<font color="#CCCCCC">written in</font><font color="#E5E5E5"> Ada and hosted on github you</font>

476
00:23:23,520 --> 00:23:30,540
can<font color="#E5E5E5"> you can have a look so why we</font>

477
00:23:27,540 --> 00:23:33,120
started this library<font color="#E5E5E5"> well the first</font>

478
00:23:30,540 --> 00:23:35,820
thing<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> ADA as has a good</font>

479
00:23:33,120 --> 00:23:39,000
properties to bind<font color="#E5E5E5"> with other languages</font>

480
00:23:35,820 --> 00:23:42,720
<font color="#CCCCCC">like C for instance</font><font color="#E5E5E5"> but this usually</font>

481
00:23:39,000 --> 00:23:45,270
<font color="#E5E5E5">does not apply very well to drivers</font>

482
00:23:42,720 --> 00:23:47,850
provided by the vendors by the hardware

483
00:23:45,270 --> 00:23:49,530
vendors because<font color="#E5E5E5"> they use as I</font><font color="#CCCCCC"> said as I</font>

484
00:23:47,850 --> 00:23:51,060
showed before they use a lot of macros

485
00:23:49,530 --> 00:23:54,149
and<font color="#CCCCCC"> bit shift and stuff like that</font>

486
00:23:51,060 --> 00:23:57,780
<font color="#CCCCCC">doesn't really apply</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> well to</font><font color="#E5E5E5"> to to</font>

487
00:23:54,150 --> 00:24:00,120
do a binding in Ada and<font color="#E5E5E5"> the next point</font>

488
00:23:57,780 --> 00:24:03,840
<font color="#E5E5E5">was also</font><font color="#CCCCCC"> a way for us</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually use</font>

489
00:24:00,120 --> 00:24:05,489
our tools<font color="#E5E5E5"> and to show to have demos for</font>

490
00:24:03,840 --> 00:24:07,500
people to show what what you can do with

491
00:24:05,490 --> 00:24:09,960
data<font color="#E5E5E5"> and the last point</font><font color="#CCCCCC"> of course it's</font>

492
00:24:07,500 --> 00:24:16,890
it's<font color="#CCCCCC"> really fun to do so that's</font><font color="#E5E5E5"> a good</font>

493
00:24:09,960 --> 00:24:20,550
way<font color="#CCCCCC"> so quickly some some architecture</font>

494
00:24:16,890 --> 00:24:22,730
aspect of the of the library<font color="#E5E5E5"> in the</font>

495
00:24:20,550 --> 00:24:25,610
<font color="#E5E5E5">library we have what we call components</font>

496
00:24:22,730 --> 00:24:28,140
so what we define<font color="#CCCCCC"> by component is a</font>

497
00:24:25,610 --> 00:24:30,149
separate piece<font color="#CCCCCC"> of hardware that is</font>

498
00:24:28,140 --> 00:24:34,800
connected to<font color="#E5E5E5"> your microcontroller</font><font color="#CCCCCC"> using</font>

499
00:24:30,150 --> 00:24:39,960
a standard protocol<font color="#E5E5E5"> like I</font><font color="#CCCCCC"> Square C spi</font>

500
00:24:34,800 --> 00:24:42,360
uart<font color="#CCCCCC"> extra this is special so that</font><font color="#E5E5E5"> the</font>

501
00:24:39,960 --> 00:24:44,880
drivers<font color="#CCCCCC"> are for a piece that</font><font color="#E5E5E5"> is external</font>

502
00:24:42,360 --> 00:24:47,280
<font color="#E5E5E5">and most importantly it's it's working</font>

503
00:24:44,880 --> 00:24:48,390
using<font color="#E5E5E5"> standard protocol so the idea is</font>

504
00:24:47,280 --> 00:24:51,200
that here you<font color="#CCCCCC"> can</font>

505
00:24:48,390 --> 00:24:54,300
change microcontroller<font color="#E5E5E5"> you can go from</font>

506
00:24:51,200 --> 00:24:56,400
<font color="#CCCCCC">cortex to an AVR or to whatever brands</font>

507
00:24:54,300 --> 00:24:59,220
you want the driver will still be the

508
00:24:56,400 --> 00:25:02,340
<font color="#E5E5E5">same so for the components we want to</font>

509
00:24:59,220 --> 00:25:06,780
have a very reusable<font color="#E5E5E5"> code and portable</font>

510
00:25:02,340 --> 00:25:09,179
code<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the quickly the list of</font>

511
00:25:06,780 --> 00:25:12,330
what we<font color="#CCCCCC"> support right now so we</font><font color="#E5E5E5"> have</font>

512
00:25:09,180 --> 00:25:14,780
some audio<font color="#CCCCCC"> DAC some camera some what we</font>

513
00:25:12,330 --> 00:25:22,070
<font color="#CCCCCC">call motion is a gyroscope accelerometer</font>

514
00:25:14,780 --> 00:25:22,070
<font color="#E5E5E5">etc etc</font><font color="#CCCCCC"> touch panels and stuff like that</font>

515
00:25:22,740 --> 00:25:29,070
the next layer that<font color="#CCCCCC"> I want to talk about</font>

516
00:25:26,250 --> 00:25:30,480
is the middleware<font color="#E5E5E5"> so we don't have a lot</font>

517
00:25:29,070 --> 00:25:31,320
<font color="#E5E5E5">here but I think</font><font color="#CCCCCC"> we have some</font>

518
00:25:30,480 --> 00:25:34,200
interesting<font color="#CCCCCC"> things</font>

519
00:25:31,320 --> 00:25:36,899
bitmap drawings so to use on<font color="#E5E5E5"> the LCD</font>

520
00:25:34,200 --> 00:25:39,750
screens<font color="#CCCCCC"> you know if you know the</font>

521
00:25:36,900 --> 00:25:45,660
adafruit gfx library it's pretty similar

522
00:25:39,750 --> 00:25:47,550
<font color="#E5E5E5">very simple drawing features we</font><font color="#CCCCCC"> also</font>

523
00:25:45,660 --> 00:25:51,960
<font color="#E5E5E5">have some file system support so we</font>

524
00:25:47,550 --> 00:25:54,540
support<font color="#E5E5E5"> the the fat format and also some</font>

525
00:25:51,960 --> 00:25:58,650
kind of virtual<font color="#E5E5E5"> fact system about the</font>

526
00:25:54,540 --> 00:26:00,690
<font color="#E5E5E5">arm semi hosting feature and a small dog</font>

527
00:25:58,650 --> 00:26:05,130
agility to filter<font color="#E5E5E5"> on the logs debug this</font>

528
00:26:00,690 --> 00:26:07,020
so this<font color="#E5E5E5"> is more or less what</font><font color="#CCCCCC"> it looks</font>

529
00:26:05,130 --> 00:26:11,370
like so you've probably seen this kind

530
00:26:07,020 --> 00:26:13,920
of diagrams tons of time<font color="#CCCCCC"> what's</font>

531
00:26:11,370 --> 00:26:16,500
important<font color="#E5E5E5"> to see here is that this part</font>

532
00:26:13,920 --> 00:26:19,170
<font color="#CCCCCC">geez VD binding is generated by a tool</font>

533
00:26:16,500 --> 00:26:20,700
this part<font color="#CCCCCC"> over</font><font color="#E5E5E5"> here the other</font><font color="#CCCCCC"> way</font>

534
00:26:19,170 --> 00:26:23,730
abstraction layer the components the

535
00:26:20,700 --> 00:26:26,580
middleware are all possible so really if

536
00:26:23,730 --> 00:26:28,170
you want to benefit<font color="#E5E5E5"> from the idea</font>

537
00:26:26,580 --> 00:26:30,149
<font color="#E5E5E5">drivers library and if you want to start</font>

538
00:26:28,170 --> 00:26:32,310
<font color="#E5E5E5">programming your microcontroller in EDA</font>

539
00:26:30,150 --> 00:26:35,730
<font color="#E5E5E5">you will have to</font><font color="#CCCCCC"> focus only on this</font>

540
00:26:32,310 --> 00:26:37,860
<font color="#CCCCCC">low-level driver parts if</font><font color="#E5E5E5"> you are using</font>

541
00:26:35,730 --> 00:26:40,700
a<font color="#E5E5E5"> microcontroller that we don't already</font>

542
00:26:37,860 --> 00:26:40,699
support of<font color="#E5E5E5"> course</font>

543
00:26:43,159 --> 00:26:48,360
speaking of supports<font color="#E5E5E5"> this is the</font><font color="#CCCCCC"> two</font>

544
00:26:46,139 --> 00:26:53,699
platform that we support so far so with

545
00:26:48,360 --> 00:26:56,299
we have the the cortex-m<font color="#E5E5E5"> architecture</font>

546
00:26:53,700 --> 00:26:59,700
which is<font color="#E5E5E5"> our version for</font>

547
00:26:56,299 --> 00:27:02,720
microcontrollers and<font color="#E5E5E5"> since last year we</font>

548
00:26:59,700 --> 00:27:09,210
also started<font color="#E5E5E5"> to</font><font color="#CCCCCC"> support the</font><font color="#E5E5E5"> first risk 5</font>

549
00:27:02,720 --> 00:27:10,880
microcontroller so I have<font color="#E5E5E5"> here the list</font>

550
00:27:09,210 --> 00:27:14,460
of<font color="#CCCCCC"> boards that we support I</font><font color="#E5E5E5"> will just</font>

551
00:27:10,880 --> 00:27:16,590
spend<font color="#E5E5E5"> a</font><font color="#CCCCCC"> few seconds</font><font color="#E5E5E5"> on them this</font><font color="#CCCCCC"> is a</font>

552
00:27:14,460 --> 00:27:18,720
really good<font color="#CCCCCC"> option to</font><font color="#E5E5E5"> start it's one of</font>

553
00:27:16,590 --> 00:27:23,908
the bolts that we support the most

554
00:27:18,720 --> 00:27:25,950
so in stm32f4 5<font color="#CCCCCC"> this one is really</font><font color="#E5E5E5"> cheap</font>

555
00:27:23,909 --> 00:27:27,330
<font color="#CCCCCC">like 15 euros or something like that but</font>

556
00:27:25,950 --> 00:27:29,880
<font color="#E5E5E5">you have everything you need there's a</font>

557
00:27:27,330 --> 00:27:31,860
debugger and integrated<font color="#E5E5E5"> a really</font>

558
00:27:29,880 --> 00:27:33,840
powerful<font color="#E5E5E5"> microcontrollers and and as I</font>

559
00:27:31,860 --> 00:27:37,199
<font color="#CCCCCC">said that's one of the the bolts that we</font>

560
00:27:33,840 --> 00:27:38,970
support the best you didn't have this

561
00:27:37,200 --> 00:27:42,510
<font color="#E5E5E5">one which</font><font color="#CCCCCC"> is more or</font><font color="#E5E5E5"> less the same</font><font color="#CCCCCC"> but</font>

562
00:27:38,970 --> 00:27:44,909
with an LCD screen<font color="#CCCCCC"> and and touchscreen</font>

563
00:27:42,510 --> 00:27:48,840
as well<font color="#CCCCCC"> which is nice and then you have</font>

564
00:27:44,909 --> 00:27:51,539
all the discovery family<font color="#E5E5E5"> which adds new</font>

565
00:27:48,840 --> 00:27:55,408
<font color="#CCCCCC">features</font><font color="#E5E5E5"> this one is an SD</font><font color="#CCCCCC"> card and an</font>

566
00:27:51,539 --> 00:27:59,158
audio output<font color="#E5E5E5"> this one is in the cortex</font>

567
00:27:55,409 --> 00:28:01,679
<font color="#E5E5E5">m7 family so it's the new generation of</font>

568
00:27:59,159 --> 00:28:05,190
of cortex-m microcontrollers more

569
00:28:01,679 --> 00:28:12,950
powerful<font color="#CCCCCC"> there's an</font><font color="#E5E5E5"> Ethernet port</font><font color="#CCCCCC"> on</font>

570
00:28:05,190 --> 00:28:12,950
here as well<font color="#E5E5E5"> and again</font><font color="#CCCCCC"> another codex m7</font>

571
00:28:13,080 --> 00:28:18,360
this is the open<font color="#CCCCCC"> MV</font><font color="#E5E5E5"> it's the</font><font color="#CCCCCC"> bomb that</font><font color="#E5E5E5"> I</font>

572
00:28:15,720 --> 00:28:20,700
<font color="#CCCCCC">have right</font><font color="#E5E5E5"> here it's an open</font><font color="#CCCCCC"> source</font><font color="#E5E5E5"> open</font>

573
00:28:18,360 --> 00:28:24,510
hardware camera it's more<font color="#E5E5E5"> or less like</font>

574
00:28:20,700 --> 00:28:26,070
the Arduino of computer vision<font color="#E5E5E5"> so it's a</font>

575
00:28:24,510 --> 00:28:30,960
small microcontroller with just a<font color="#E5E5E5"> camera</font>

576
00:28:26,070 --> 00:28:33,600
around it<font color="#CCCCCC"> we support</font><font color="#E5E5E5"> that as well this</font>

577
00:28:30,960 --> 00:28:37,429
is the crazy fly 2.0 it's really really

578
00:28:33,600 --> 00:28:40,070
small<font color="#CCCCCC"> like</font><font color="#E5E5E5"> it's the size of my hand</font>

579
00:28:37,429 --> 00:28:41,899
<font color="#E5E5E5">quadrotor</font>

580
00:28:40,070 --> 00:28:43,970
and again there's a small

581
00:28:41,899 --> 00:28:47,449
microcontroller on it I will<font color="#E5E5E5"> I will</font><font color="#CCCCCC"> show</font>

582
00:28:43,970 --> 00:28:50,779
it a bit later as well<font color="#CCCCCC"> this is the</font><font color="#E5E5E5"> BBC</font>

583
00:28:47,450 --> 00:28:54,940
<font color="#E5E5E5">micro beads will achieve as well like 15</font>

584
00:28:50,779 --> 00:28:57,619
<font color="#CCCCCC">of 13 euros</font><font color="#E5E5E5"> there's a cortex</font><font color="#CCCCCC"> m0</font>

585
00:28:54,940 --> 00:29:01,249
processor on it<font color="#CCCCCC"> with Bluetooth</font><font color="#E5E5E5"> Low</font>

586
00:28:57,619 --> 00:29:03,830
<font color="#E5E5E5">Energy support so so far we have</font>

587
00:29:01,249 --> 00:29:06,440
somewhat limited support for<font color="#E5E5E5"> this but in</font>

588
00:29:03,830 --> 00:29:08,749
the future<font color="#E5E5E5"> we will probably focus on</font>

589
00:29:06,440 --> 00:29:11,869
using this particular<font color="#E5E5E5"> board as the</font>

590
00:29:08,749 --> 00:29:15,830
reference platform<font color="#E5E5E5"> to learn embedded</font>

591
00:29:11,869 --> 00:29:17,709
programming in<font color="#E5E5E5"> EDA and</font><font color="#CCCCCC"> as I mentioned</font>

592
00:29:15,830 --> 00:29:21,049
<font color="#E5E5E5">earlier we started to support</font><font color="#CCCCCC"> the first</font>

593
00:29:17,710 --> 00:29:24,259
risk<font color="#E5E5E5"> 5 microcontroller so this is the</font>

594
00:29:21,049 --> 00:29:30,710
high<font color="#CCCCCC"> 5</font><font color="#E5E5E5"> one bought from Sky 5 the</font>

595
00:29:24,259 --> 00:29:34,519
<font color="#CCCCCC">companies</font><font color="#E5E5E5"> effect so what's next for the</font>

596
00:29:30,710 --> 00:29:37,159
beta drag of library<font color="#CCCCCC"> so first we want to</font>

597
00:29:34,519 --> 00:29:39,950
focus on the<font color="#CCCCCC"> the configuration and build</font>

598
00:29:37,159 --> 00:29:42,379
system<font color="#E5E5E5"> so I will show you quick list of</font>

599
00:29:39,950 --> 00:29:45,109
what we have so far<font color="#E5E5E5"> but it's a little</font>

600
00:29:42,379 --> 00:29:48,259
<font color="#CCCCCC">bit</font><font color="#E5E5E5"> complicated we use ugr key of</font>

601
00:29:45,109 --> 00:29:50,899
project which is not very practical for

602
00:29:48,259 --> 00:29:54,940
beginners<font color="#CCCCCC"> no documentation</font><font color="#E5E5E5"> of course</font>

603
00:29:50,899 --> 00:29:58,459
there is not never enough documentation

604
00:29:54,940 --> 00:30:01,429
<font color="#E5E5E5">we also have a plan to bring a really</font>

605
00:29:58,460 --> 00:30:04,519
<font color="#E5E5E5">basic support</font><font color="#CCCCCC"> out-of-the-box support for</font>

606
00:30:01,429 --> 00:30:09,529
every possible cortex-m devices on the

607
00:30:04,519 --> 00:30:12,470
market<font color="#E5E5E5"> so that's that's</font><font color="#CCCCCC"> kinda</font><font color="#E5E5E5"> nice Linux</font>

608
00:30:09,529 --> 00:30:15,289
GPIO so I mentioned<font color="#CCCCCC"> microcontroller so</font>

609
00:30:12,470 --> 00:30:18,379
far but actually the components<font color="#CCCCCC"> driver</font>

610
00:30:15,289 --> 00:30:20,450
can also<font color="#E5E5E5"> be used in</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the Raspberry Pi</font>

611
00:30:18,379 --> 00:30:23,899
for instance because<font color="#E5E5E5"> you have I squared</font>

612
00:30:20,450 --> 00:30:27,289
<font color="#E5E5E5">C protocols supported UART excetera so</font>

613
00:30:23,899 --> 00:30:29,719
we want<font color="#E5E5E5"> to have some kind</font><font color="#CCCCCC"> of binding for</font>

614
00:30:27,289 --> 00:30:32,090
being able to<font color="#CCCCCC"> reuse the</font><font color="#E5E5E5"> components</font>

615
00:30:29,720 --> 00:30:35,200
driver in<font color="#E5E5E5"> an idea</font><font color="#CCCCCC"> rather sorry</font><font color="#E5E5E5"> be able</font>

616
00:30:32,090 --> 00:30:35,199
to use them on the Raspberry Pi

617
00:30:35,390 --> 00:30:42,800
the<font color="#CCCCCC"> Avia platform so this is maybe not</font>

618
00:30:38,390 --> 00:30:44,150
<font color="#E5E5E5">the</font><font color="#CCCCCC"> most trendy platform at the moment</font>

619
00:30:42,800 --> 00:30:46,040
but<font color="#E5E5E5"> I think it would be really cool to</font>

620
00:30:44,150 --> 00:30:50,240
<font color="#CCCCCC">have</font><font color="#E5E5E5"> some support of</font><font color="#CCCCCC"> a VR and</font><font color="#E5E5E5"> the other</font>

621
00:30:46,040 --> 00:30:51,889
<font color="#CCCCCC">ADA driver</font><font color="#E5E5E5"> sir Barry</font><font color="#CCCCCC"> Moore component of</font>

622
00:30:50,240 --> 00:30:54,080
course there was never never enough

623
00:30:51,890 --> 00:30:59,960
there<font color="#CCCCCC"> are so many components in the</font>

624
00:30:54,080 --> 00:31:02,060
market<font color="#CCCCCC"> USB stack</font><font color="#E5E5E5"> so I mentioned that</font><font color="#CCCCCC"> we</font>

625
00:30:59,960 --> 00:31:06,110
support<font color="#E5E5E5"> we have a lot</font><font color="#CCCCCC"> of support for</font>

626
00:31:02,060 --> 00:31:08,560
<font color="#E5E5E5">this team</font><font color="#CCCCCC"> 52 the main</font><font color="#E5E5E5"> block that we are</font>

627
00:31:06,110 --> 00:31:11,929
<font color="#E5E5E5">missing right</font><font color="#CCCCCC"> now we support for the USB</font>

628
00:31:08,560 --> 00:31:14,149
<font color="#E5E5E5">so that's something I really would like</font>

629
00:31:11,930 --> 00:31:17,180
<font color="#CCCCCC">to work on and to support in in a</font>

630
00:31:14,150 --> 00:31:18,880
database<font color="#E5E5E5"> library and there's on</font><font color="#CCCCCC"> the BBC</font>

631
00:31:17,180 --> 00:31:21,500
micro<font color="#E5E5E5"> bit there's a Bluetooth low-energy</font>

632
00:31:18,880 --> 00:31:24,860
<font color="#CCCCCC">microcontroller so it would be also</font><font color="#E5E5E5"> nice</font>

633
00:31:21,500 --> 00:31:30,050
to<font color="#E5E5E5"> have some kind of Bluetooth stack on</font>

634
00:31:24,860 --> 00:31:34,370
<font color="#E5E5E5">on this platform as well so now it's</font>

635
00:31:30,050 --> 00:31:37,070
<font color="#CCCCCC">time</font><font color="#E5E5E5"> for the demo</font><font color="#CCCCCC"> so I will I already</font>

636
00:31:34,370 --> 00:31:40,189
prepared a few things so if<font color="#E5E5E5"> you want to</font>

637
00:31:37,070 --> 00:31:42,379
<font color="#E5E5E5">start programming embedded programming</font>

638
00:31:40,190 --> 00:31:45,140
in<font color="#CCCCCC"> ada you you can get one of</font><font color="#E5E5E5"> the bolts</font>

639
00:31:42,380 --> 00:31:49,730
<font color="#E5E5E5">that was listed</font><font color="#CCCCCC"> before so</font><font color="#E5E5E5"> for this demo</font>

640
00:31:45,140 --> 00:31:54,260
<font color="#E5E5E5">I use the stm32f4</font><font color="#CCCCCC"> six nine just right</font>

641
00:31:49,730 --> 00:31:57,740
here so<font color="#CCCCCC"> beforehand</font><font color="#E5E5E5"> I downloaded the tool</font>

642
00:31:54,260 --> 00:31:59,210
chain so you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> go to edit code come /</font>

643
00:31:57,740 --> 00:32:02,180
community you will see<font color="#E5E5E5"> that the</font>

644
00:31:59,210 --> 00:32:05,000
community release of our tool chain<font color="#E5E5E5"> so</font>

645
00:32:02,180 --> 00:32:07,300
<font color="#CCCCCC">we want the arm</font><font color="#E5E5E5"> elf version of the true</font>

646
00:32:05,000 --> 00:32:10,190
chain that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> download here</font>

647
00:32:07,300 --> 00:32:13,790
download it install the tools<font color="#E5E5E5"> then you</font>

648
00:32:10,190 --> 00:32:16,790
can download the<font color="#CCCCCC"> ada travels</font><font color="#E5E5E5"> library</font>

649
00:32:13,790 --> 00:32:20,389
code<font color="#CCCCCC"> so either you clone the project</font><font color="#E5E5E5"> or</font>

650
00:32:16,790 --> 00:32:21,220
you<font color="#E5E5E5"> don't know the zip and</font><font color="#CCCCCC"> there there</font>

651
00:32:20,390 --> 00:32:26,260
we go

652
00:32:21,220 --> 00:32:30,440
so the demonstration<font color="#CCCCCC"> is working</font><font color="#E5E5E5"> okay</font>

653
00:32:26,260 --> 00:32:33,080
so this is not programming studio<font color="#CCCCCC"> I will</font>

654
00:32:30,440 --> 00:32:37,100
start it here it's our<font color="#CCCCCC"> IDE</font>

655
00:32:33,080 --> 00:32:41,300
it's supporting<font color="#CCCCCC"> ADA</font><font color="#E5E5E5"> C C++ and Python I</font>

656
00:32:37,100 --> 00:32:45,649
think<font color="#E5E5E5"> so when you start GPS you can open</font>

657
00:32:41,300 --> 00:32:49,280
a project<font color="#E5E5E5"> project file so let's say this</font>

658
00:32:45,650 --> 00:32:53,150
<font color="#E5E5E5">is</font><font color="#CCCCCC"> the ADA</font><font color="#E5E5E5"> type</font><font color="#CCCCCC"> of library sources</font><font color="#E5E5E5"> you</font>

659
00:32:49,280 --> 00:32:55,790
go to the<font color="#E5E5E5"> example directory and then you</font>

660
00:32:53,150 --> 00:32:59,090
will<font color="#E5E5E5"> have one sub directory for each of</font>

661
00:32:55,790 --> 00:33:01,610
the<font color="#CCCCCC"> bots that</font><font color="#E5E5E5"> we support so for me it's</font>

662
00:32:59,090 --> 00:33:04,669
the<font color="#CCCCCC"> four six nine so I go into this</font>

663
00:33:01,610 --> 00:33:06,800
directory<font color="#E5E5E5"> and</font><font color="#CCCCCC"> here we have the different</font>

664
00:33:04,670 --> 00:33:14,540
<font color="#E5E5E5">examples that are supported on this</font>

665
00:33:06,800 --> 00:33:19,399
board<font color="#CCCCCC"> so we take the draw</font><font color="#E5E5E5"> example okay</font>

666
00:33:14,540 --> 00:33:21,170
<font color="#E5E5E5">so this is as I said GPS our IDE so as</font>

667
00:33:19,400 --> 00:33:26,360
you can<font color="#E5E5E5"> see over there</font><font color="#CCCCCC"> you have your</font>

668
00:33:21,170 --> 00:33:29,480
sources this<font color="#CCCCCC"> is what it looks</font><font color="#E5E5E5"> like you</font>

669
00:33:26,360 --> 00:33:34,729
have support for code<font color="#E5E5E5"> navigation so for</font>

670
00:33:29,480 --> 00:33:36,830
<font color="#E5E5E5">instance if I want to if I</font><font color="#CCCCCC"> want to see</font>

671
00:33:34,730 --> 00:33:40,700
the<font color="#CCCCCC"> definition of</font><font color="#E5E5E5"> this color over</font><font color="#CCCCCC"> here</font>

672
00:33:36,830 --> 00:33:42,230
you can jump in in<font color="#E5E5E5"> the code you have cut</font>

673
00:33:40,700 --> 00:33:48,080
completion so if you want to change

674
00:33:42,230 --> 00:33:53,809
something<font color="#CCCCCC"> to green things</font><font color="#E5E5E5"> like that so</font>

675
00:33:48,080 --> 00:33:59,240
like really modern ID<font color="#E5E5E5"> features you can</font>

676
00:33:53,809 --> 00:34:02,240
<font color="#E5E5E5">then compile your embedded projects so</font>

677
00:33:59,240 --> 00:34:03,920
this<font color="#E5E5E5"> is compiling all the the</font><font color="#CCCCCC"> ada</font>

678
00:34:02,240 --> 00:34:07,419
<font color="#CCCCCC">drivers library so you can see the</font>

679
00:34:03,920 --> 00:34:11,418
<font color="#E5E5E5">components this is the</font><font color="#CCCCCC"> cpu support</font>

680
00:34:07,419 --> 00:34:13,540
hardware<font color="#CCCCCC"> abstraction layer</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> theme 32</font>

681
00:34:11,418 --> 00:34:13,540
drivers

682
00:34:14,420 --> 00:34:19,780
I don't think<font color="#CCCCCC"> I've enabled the parallel</font>

683
00:34:16,780 --> 00:34:19,780
computation

684
00:34:21,750 --> 00:34:24,409
<font color="#E5E5E5">okay</font>

685
00:34:24,940 --> 00:34:34,179
there we go<font color="#CCCCCC"> one</font><font color="#E5E5E5"> really nice</font><font color="#CCCCCC"> feature of</font>

686
00:34:29,489 --> 00:34:36,368
<font color="#E5E5E5">GPS as</font><font color="#CCCCCC"> well is this view</font><font color="#E5E5E5"> over</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> which</font>

687
00:34:34,179 --> 00:34:40,240
gives you how<font color="#CCCCCC"> much memory</font><font color="#E5E5E5"> you are using</font>

688
00:34:36,369 --> 00:34:42,789
a new application<font color="#CCCCCC"> so we can see the we</font>

689
00:34:40,239 --> 00:34:45,939
<font color="#E5E5E5">can see the the</font><font color="#CCCCCC"> RAM</font><font color="#E5E5E5"> for instance and you</font>

690
00:34:42,789 --> 00:34:48,339
can have some<font color="#CCCCCC"> details and see where what</font>

691
00:34:45,940 --> 00:34:55,569
part<font color="#E5E5E5"> of the other of the program uses</font>

692
00:34:48,339 --> 00:34:57,400
most memory<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you might</font><font color="#CCCCCC"> think it's it's</font>

693
00:34:55,569 --> 00:34:59,259
it's<font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of memory that we use</font><font color="#E5E5E5"> over</font>

694
00:34:57,400 --> 00:35:02,950
<font color="#CCCCCC">here but please keep in mind</font><font color="#E5E5E5"> that we</font>

695
00:34:59,259 --> 00:35:05,829
have<font color="#E5E5E5"> the tasking environment and</font>

696
00:35:02,950 --> 00:35:07,390
embedded so we have the the<font color="#CCCCCC"> the stacks</font>

697
00:35:05,829 --> 00:35:11,619
<font color="#E5E5E5">we have the kernel</font>

698
00:35:07,390 --> 00:35:16,180
everything is embedded<font color="#CCCCCC"> here so now that</font>

699
00:35:11,619 --> 00:35:23,130
we<font color="#CCCCCC"> have our program</font><font color="#E5E5E5"> compiled I will just</font>

700
00:35:16,180 --> 00:35:23,129
plug the USB ports of this<font color="#E5E5E5"> bond let's go</font>

701
00:35:23,260 --> 00:35:30,280
<font color="#CCCCCC">Tec</font><font color="#E5E5E5"> I don't need this and I will have</font>

702
00:35:28,359 --> 00:35:34,540
<font color="#E5E5E5">hope</font><font color="#CCCCCC"> that there you</font><font color="#E5E5E5"> can see them we have</font>

703
00:35:30,280 --> 00:35:37,330
different shortcuts<font color="#E5E5E5"> and this one is</font>

704
00:35:34,540 --> 00:35:40,540
flash tube also<font color="#E5E5E5"> this will make sure the</font>

705
00:35:37,330 --> 00:35:42,609
<font color="#E5E5E5">the program is at the latest version so</font>

706
00:35:40,540 --> 00:35:48,490
we compile it<font color="#E5E5E5"> and then send the</font>

707
00:35:42,609 --> 00:35:54,369
application<font color="#E5E5E5"> to the to the Bob so that's</font>

708
00:35:48,490 --> 00:35:57,100
why developing<font color="#E5E5E5"> an embedded is slow and I</font>

709
00:35:54,369 --> 00:36:01,140
have to reset it<font color="#E5E5E5"> and this should</font><font color="#CCCCCC"> work so</font>

710
00:35:57,100 --> 00:36:05,290
<font color="#E5E5E5">it's drawing it's just a simple drawing</font>

711
00:36:01,140 --> 00:36:07,990
example now if<font color="#E5E5E5"> I want to debug my</font>

712
00:36:05,290 --> 00:36:11,310
<font color="#E5E5E5">application</font><font color="#CCCCCC"> I can use this pattern</font><font color="#E5E5E5"> over</font>

713
00:36:07,990 --> 00:36:16,709
here<font color="#CCCCCC"> dip back on</font><font color="#E5E5E5"> board and this will</font>

714
00:36:11,310 --> 00:36:16,710
open at the beginning session<font color="#CCCCCC"> yes</font>

715
00:36:16,859 --> 00:36:21,850
this will<font color="#CCCCCC"> open at the beginning session</font>

716
00:36:19,119 --> 00:36:24,130
flash the application start gdb etc etc

717
00:36:21,850 --> 00:36:26,589
so<font color="#CCCCCC"> I don't know if I mentioned it but</font>

718
00:36:24,130 --> 00:36:28,930
<font color="#E5E5E5">the the</font><font color="#CCCCCC"> Gounod compiler</font><font color="#E5E5E5"> the natural</font>

719
00:36:26,590 --> 00:36:33,910
chain is based on GCC and our debugger

720
00:36:28,930 --> 00:36:38,109
is based on gdb we contribute the idea

721
00:36:33,910 --> 00:36:44,279
support<font color="#E5E5E5"> to gdb</font><font color="#CCCCCC"> and then well it's again</font>

722
00:36:38,109 --> 00:36:49,330
very common<font color="#E5E5E5"> debugging session let me put</font>

723
00:36:44,280 --> 00:36:51,750
wise<font color="#E5E5E5"> it's I can put a breakpoint over</font>

724
00:36:49,330 --> 00:36:51,750
here for instance

725
00:36:53,210 --> 00:36:56,210
<font color="#CCCCCC">continue</font>

726
00:36:58,430 --> 00:37:00,970
<font color="#E5E5E5">Hey</font>

727
00:37:02,480 --> 00:37:07,480
<font color="#E5E5E5">ah looks like you didn't pray enough</font>

728
00:37:07,660 --> 00:37:23,859
I don't know maybe I'm<font color="#CCCCCC"> not reaching this</font>

729
00:37:10,010 --> 00:37:26,450
code<font color="#CCCCCC"> want my drawing</font><font color="#E5E5E5"> restart well okay</font>

730
00:37:23,859 --> 00:37:27,009
<font color="#E5E5E5">so do you</font><font color="#CCCCCC"> effect this should work</font><font color="#E5E5E5"> it</font>

731
00:37:26,450 --> 00:37:29,540
<font color="#E5E5E5">doesn't</font>

732
00:37:27,010 --> 00:37:36,020
and then from from<font color="#CCCCCC"> from</font><font color="#E5E5E5"> this interface</font>

733
00:37:29,540 --> 00:37:40,270
<font color="#CCCCCC">you have all the usual gdb features so</font>

734
00:37:36,020 --> 00:37:43,490
<font color="#E5E5E5">you have the call stack up over here so</font>

735
00:37:40,270 --> 00:37:46,670
<font color="#CCCCCC">we can</font><font color="#E5E5E5"> see that it's waiting</font><font color="#CCCCCC"> for some I</font>

736
00:37:43,490 --> 00:37:48,368
squared C communication so maybe there's

737
00:37:46,670 --> 00:37:51,200
something<font color="#CCCCCC"> wrong here</font>

738
00:37:48,369 --> 00:37:55,580
<font color="#CCCCCC">we have the</font><font color="#E5E5E5"> memory view you can</font>

739
00:37:51,200 --> 00:38:03,109
<font color="#CCCCCC">watch.watch variables and all the really</font>

740
00:37:55,580 --> 00:38:08,359
neat and usual debugging features so

741
00:38:03,109 --> 00:38:16,369
that's it for the demo was more<font color="#E5E5E5"> or less</font>

742
00:38:08,359 --> 00:38:18,350
<font color="#CCCCCC">okay right next part I</font><font color="#E5E5E5"> want to talk</font>

743
00:38:16,369 --> 00:38:21,050
about some of<font color="#E5E5E5"> the projects that were</font>

744
00:38:18,350 --> 00:38:23,118
developed<font color="#E5E5E5"> so either by me or my</font>

745
00:38:21,050 --> 00:38:26,780
<font color="#CCCCCC">colleagues at a decor and also some</font>

746
00:38:23,119 --> 00:38:29,710
<font color="#E5E5E5">people from</font><font color="#CCCCCC"> the community so the first</font>

747
00:38:26,780 --> 00:38:32,150
one I already<font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> talked about</font><font color="#E5E5E5"> it</font>

748
00:38:29,710 --> 00:38:34,790
<font color="#CCCCCC">this</font><font color="#E5E5E5"> was done by</font><font color="#CCCCCC"> Anthony</font>

749
00:38:32,150 --> 00:38:38,510
he was intern at<font color="#CCCCCC"> a Toccoa at the time</font>

750
00:38:34,790 --> 00:38:41,090
and he wrote he rewrote the full flight

751
00:38:38,510 --> 00:38:41,800
controller for this drone using a<font color="#CCCCCC"> DES</font>

752
00:38:41,090 --> 00:38:45,710
inspark

753
00:38:41,800 --> 00:38:50,060
<font color="#E5E5E5">proving some properties using using</font>

754
00:38:45,710 --> 00:38:52,910
<font color="#E5E5E5">spark and formal proof this is a project</font>

755
00:38:50,060 --> 00:38:55,580
<font color="#E5E5E5">that I made it's so since I controller a</font>

756
00:38:52,910 --> 00:39:00,290
computer-controlled machine made with

757
00:38:55,580 --> 00:39:03,230
<font color="#E5E5E5">all the DVD players and floppy</font><font color="#CCCCCC"> discs</font><font color="#E5E5E5"> and</font>

758
00:39:00,290 --> 00:39:05,420
this kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> stuff for all the</font><font color="#CCCCCC"> project I</font>

759
00:39:03,230 --> 00:39:08,590
give you a link if you<font color="#E5E5E5"> want to have a</font>

760
00:39:05,420 --> 00:39:08,590
look<font color="#E5E5E5"> and have more information</font>

761
00:39:09,859 --> 00:39:17,490
this was made by University in Spain<font color="#E5E5E5"> I</font>

762
00:39:13,470 --> 00:39:19,859
think so this<font color="#E5E5E5"> is a LED pendulum so using</font>

763
00:39:17,490 --> 00:39:26,069
the persistence rate in a<font color="#CCCCCC"> persistence</font>

764
00:39:19,859 --> 00:39:29,690
<font color="#E5E5E5">defect to draw text on on on the air so</font>

765
00:39:26,070 --> 00:39:32,190
as you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> this is the the small</font>

766
00:39:29,690 --> 00:39:36,930
<font color="#CCCCCC">contact same board that</font><font color="#E5E5E5"> I talked about</font>

767
00:39:32,190 --> 00:39:39,990
earlier<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is another project by me so</font>

768
00:39:36,930 --> 00:39:43,140
I<font color="#E5E5E5"> used the open MV camera and I plugged</font>

769
00:39:39,990 --> 00:39:45,990
it to a thermal<font color="#E5E5E5"> printer so thermal</font>

770
00:39:43,140 --> 00:39:47,910
<font color="#E5E5E5">printer is things</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you will see in a</font>

771
00:39:45,990 --> 00:39:50,069
supermarket<font color="#E5E5E5"> or restaurants to print</font>

772
00:39:47,910 --> 00:39:50,368
tickets<font color="#CCCCCC"> credit card tickets or stuff</font>

773
00:39:50,070 --> 00:39:53,250
like<font color="#CCCCCC"> that</font>

774
00:39:50,369 --> 00:39:55,230
and I<font color="#CCCCCC"> used this to make an instant</font>

775
00:39:53,250 --> 00:39:59,070
camera so you<font color="#E5E5E5"> take a picture</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we'll</font>

776
00:39:55,230 --> 00:40:05,210
print<font color="#E5E5E5"> grayscale not very not</font><font color="#CCCCCC"> very</font>

777
00:39:59,070 --> 00:40:05,210
beautiful<font color="#E5E5E5"> but well it's fun at least</font>

778
00:40:05,450 --> 00:40:12,118
<font color="#CCCCCC">next one is from</font><font color="#E5E5E5"> my colleague Jerome he</font>

779
00:40:08,850 --> 00:40:16,259
implemented<font color="#E5E5E5"> the version of the version</font>

780
00:40:12,119 --> 00:40:19,830
<font color="#CCCCCC">stein 3d engine in Ada so it's</font><font color="#E5E5E5"> running</font>

781
00:40:16,260 --> 00:40:22,050
on this one is the Coptics m7<font color="#E5E5E5"> but it's</font>

782
00:40:19,830 --> 00:40:24,119
also running<font color="#E5E5E5"> on Raspberry Pi</font><font color="#CCCCCC"> a</font>

783
00:40:22,050 --> 00:40:26,330
<font color="#CCCCCC">bare-metal</font><font color="#E5E5E5"> it's running</font><font color="#CCCCCC"> on different</font>

784
00:40:24,119 --> 00:40:30,150
<font color="#E5E5E5">version of the Bob</font>

785
00:40:26,330 --> 00:40:32,549
so here yes it's the Coptics m7

786
00:40:30,150 --> 00:40:37,250
as you can see it's customized<font color="#E5E5E5"> really</font>

787
00:40:32,550 --> 00:40:37,250
really nice<font color="#E5E5E5"> ADA advocacy over there</font>

788
00:40:37,850 --> 00:40:43,500
this one<font color="#E5E5E5"> again project by myself</font>

789
00:40:41,190 --> 00:40:49,010
<font color="#CCCCCC">this one is a custom hardware actually I</font>

790
00:40:43,500 --> 00:40:51,119
developed the ball as<font color="#E5E5E5"> well and this is a</font>

791
00:40:49,010 --> 00:40:54,210
sampler<font color="#E5E5E5"> and sequencer so you can</font>

792
00:40:51,119 --> 00:40:58,310
actually play<font color="#E5E5E5"> there's an SD card on the</font>

793
00:40:54,210 --> 00:41:00,450
<font color="#CCCCCC">backside you can</font><font color="#E5E5E5"> play samples of music</font>

794
00:40:58,310 --> 00:41:02,279
according<font color="#E5E5E5"> to</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> pattern that you enter</font>

795
00:41:00,450 --> 00:41:05,990
again<font color="#E5E5E5"> if you follow the link you will</font>

796
00:41:02,280 --> 00:41:05,990
<font color="#E5E5E5">probably find videos about this</font>

797
00:41:06,510 --> 00:41:13,230
and the<font color="#E5E5E5"> last thing I want to talk about</font>

798
00:41:08,880 --> 00:41:15,360
is the microdata competition so for the

799
00:41:13,230 --> 00:41:17,460
<font color="#CCCCCC">last two years</font><font color="#E5E5E5"> we organized a</font>

800
00:41:15,360 --> 00:41:21,720
programming competition so a deca

801
00:41:17,460 --> 00:41:23,520
<font color="#CCCCCC">organised this competition so far it was</font>

802
00:41:21,720 --> 00:41:27,089
focused<font color="#E5E5E5"> on embedded software projects</font>

803
00:41:23,520 --> 00:41:29,820
for the next<font color="#E5E5E5"> edition we will maybe open</font>

804
00:41:27,090 --> 00:41:31,890
it<font color="#E5E5E5"> a</font><font color="#CCCCCC"> little bit but it's not</font><font color="#E5E5E5"> sure right</font>

805
00:41:29,820 --> 00:41:35,490
now<font color="#E5E5E5"> it's otherwise open to everyone</font>

806
00:41:31,890 --> 00:41:38,430
<font color="#E5E5E5">there's about 8,000 euros in prize and</font>

807
00:41:35,490 --> 00:41:40,169
so as I said<font color="#CCCCCC"> we</font><font color="#E5E5E5"> did not announce the the</font>

808
00:41:38,430 --> 00:41:43,410
next competition<font color="#E5E5E5"> yet but if you follow</font>

809
00:41:40,170 --> 00:41:46,470
<font color="#E5E5E5">if you follow us on Twitter we will make</font>

810
00:41:43,410 --> 00:41:49,440
the announcement over<font color="#E5E5E5"> there and so my</font>

811
00:41:46,470 --> 00:41:54,720
last slides are<font color="#E5E5E5"> two example of projects</font>

812
00:41:49,440 --> 00:42:02,490
<font color="#E5E5E5">so the winner from 2016 is Stephan Kyle</font>

813
00:41:54,720 --> 00:42:04,649
with over here<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> he made so this is</font>

814
00:42:02,490 --> 00:42:08,759
again the same<font color="#CCCCCC"> bob as</font><font color="#E5E5E5"> sure home use for</font>

815
00:42:04,650 --> 00:42:11,300
the<font color="#CCCCCC"> Vulcan Stein it's an STM</font><font color="#E5E5E5"> 52 f7</font><font color="#CCCCCC"> and</font>

816
00:42:08,760 --> 00:42:14,730
<font color="#E5E5E5">there's an Ethernet spot on it so he</font>

817
00:42:11,300 --> 00:42:18,900
managed to program a network<font color="#CCCCCC"> analyzer</font>

818
00:42:14,730 --> 00:42:21,000
with this so you used<font color="#E5E5E5"> the drivers</font>

819
00:42:18,900 --> 00:42:26,910
library in part and then<font color="#E5E5E5"> you made your</font>

820
00:42:21,000 --> 00:42:30,380
own<font color="#E5E5E5"> Ethernet driver and IP stack and</font>

821
00:42:26,910 --> 00:42:30,379
this<font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> okay</font>

822
00:43:05,330 --> 00:43:10,440
<font color="#E5E5E5">okay and so you displayed</font><font color="#CCCCCC"> the graphic</font>

823
00:43:07,950 --> 00:43:14,250
and<font color="#CCCCCC"> all the other statistics of the</font>

824
00:43:10,440 --> 00:43:17,120
other<font color="#E5E5E5"> Network and for 2017</font><font color="#CCCCCC"> we know I</font>

825
00:43:14,250 --> 00:43:22,410
don't think<font color="#CCCCCC"> he's</font><font color="#E5E5E5"> over here</font><font color="#CCCCCC"> I was</font><font color="#E5E5E5"> Jonas</font>

826
00:43:17,120 --> 00:43:24,330
<font color="#CCCCCC">and he made a brushless motor controller</font>

827
00:43:22,410 --> 00:43:28,740
so the brushless motors are the ones

828
00:43:24,330 --> 00:43:30,840
used in in drones<font color="#CCCCCC"> typically and</font><font color="#E5E5E5"> so this</font>

829
00:43:28,740 --> 00:43:33,000
is also custom hardware so<font color="#CCCCCC"> Joan has</font>

830
00:43:30,840 --> 00:43:36,570
designed this board and<font color="#E5E5E5"> I wrote the</font>

831
00:43:33,000 --> 00:43:40,550
driver for<font color="#E5E5E5"> it using Ada and</font><font color="#CCCCCC"> idea</font><font color="#E5E5E5"> drivers</font>

832
00:43:36,570 --> 00:43:44,250
library so that's it for<font color="#E5E5E5"> my presentation</font>

833
00:43:40,550 --> 00:43:46,560
<font color="#CCCCCC">I will take any question if you if you</font>

834
00:43:44,250 --> 00:43:48,510
have<font color="#E5E5E5"> one but what I would like really to</font>

835
00:43:46,560 --> 00:43:50,690
know is what are<font color="#E5E5E5"> you going to make with</font>

836
00:43:48,510 --> 00:43:50,690
data

837
00:43:53,570 --> 00:44:00,409
[Applause]

838
00:44:26,240 --> 00:44:31,410
<font color="#E5E5E5">okay so the quiz</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> we'll try to</font>

839
00:44:30,060 --> 00:44:34,560
repeat<font color="#E5E5E5"> the question the question</font><font color="#CCCCCC"> is</font>

840
00:44:31,410 --> 00:44:37,529
about the new change that we will do in

841
00:44:34,560 --> 00:44:39,900
the build<font color="#CCCCCC"> system and about</font><font color="#E5E5E5"> configuration</font>

842
00:44:37,530 --> 00:44:44,550
of the library<font color="#E5E5E5"> for</font><font color="#CCCCCC"> your custom hardware</font>

843
00:44:39,900 --> 00:44:45,869
right so so there's actually two<font color="#E5E5E5"> parts</font>

844
00:44:44,550 --> 00:44:48,089
<font color="#E5E5E5">that's something that we mentioned in</font>

845
00:44:45,869 --> 00:44:51,119
<font color="#E5E5E5">the documentation and I I really just</font>

846
00:44:48,089 --> 00:44:53,549
went<font color="#E5E5E5"> really quickly over this in</font><font color="#CCCCCC"> Ada you</font>

847
00:44:51,119 --> 00:44:56,130
<font color="#E5E5E5">have the</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> dirty</font><font color="#CCCCCC"> arrivals library and</font>

848
00:44:53,550 --> 00:44:58,980
there's the<font color="#E5E5E5"> runtime</font><font color="#CCCCCC"> it is the the</font>

849
00:44:56,130 --> 00:45:01,260
<font color="#E5E5E5">library that supports the tasking and</font>

850
00:44:58,980 --> 00:45:04,200
these kind of things<font color="#CCCCCC"> and</font><font color="#E5E5E5"> usually that's</font>

851
00:45:01,260 --> 00:45:06,569
where you will have most of the hardware

852
00:45:04,200 --> 00:45:10,740
<font color="#E5E5E5">dependent code so I don't know if it's</font>

853
00:45:06,569 --> 00:45:13,230
the case for you<font color="#CCCCCC"> what we</font><font color="#E5E5E5"> will do with</font>

854
00:45:10,740 --> 00:45:17,549
the<font color="#CCCCCC"> next build system is we will try to</font>

855
00:45:13,230 --> 00:45:20,250
as I said support all the<font color="#CCCCCC"> all the codecs</font>

856
00:45:17,550 --> 00:45:23,069
<font color="#CCCCCC">same peripherals</font><font color="#E5E5E5"> sorry microcontrollers</font>

857
00:45:20,250 --> 00:45:26,160
<font color="#E5E5E5">and</font><font color="#CCCCCC"> we will also</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> some ways of</font>

858
00:45:23,069 --> 00:45:29,310
configuring<font color="#CCCCCC"> a few points</font><font color="#E5E5E5"> in the in the</font>

859
00:45:26,160 --> 00:45:31,290
in<font color="#E5E5E5"> the in</font><font color="#CCCCCC"> the drivers library so for</font>

860
00:45:29,310 --> 00:45:33,720
<font color="#E5E5E5">instance what you will do is you say I</font>

861
00:45:31,290 --> 00:45:36,450
want to<font color="#E5E5E5"> start</font><font color="#CCCCCC"> a new a database library</font>

862
00:45:33,720 --> 00:45:38,759
<font color="#E5E5E5">project and you will specify which</font><font color="#CCCCCC"> meet</font>

863
00:45:36,450 --> 00:45:40,109
microcontroller you use and so you will

864
00:45:38,760 --> 00:45:43,349
<font color="#E5E5E5">have the linker script for</font><font color="#CCCCCC"> this</font>

865
00:45:40,109 --> 00:45:45,960
microcontroller<font color="#CCCCCC"> you will have the vector</font>

866
00:45:43,349 --> 00:45:48,240
<font color="#CCCCCC">files and stuff</font><font color="#E5E5E5"> like that and</font><font color="#CCCCCC"> you will</font>

867
00:45:45,960 --> 00:45:51,660
also be<font color="#CCCCCC"> able to configure</font><font color="#E5E5E5"> for instance</font>

868
00:45:48,240 --> 00:45:53,180
what is the external clock external

869
00:45:51,660 --> 00:45:55,680
<font color="#CCCCCC">oscillators and</font><font color="#E5E5E5"> this kind of stuff</font>

870
00:45:53,180 --> 00:45:57,049
<font color="#E5E5E5">inside the the</font><font color="#CCCCCC"> wizard</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font>

871
00:45:55,680 --> 00:45:59,640
configuration<font color="#CCCCCC"> that's what we have</font>

872
00:45:57,050 --> 00:46:01,600
planned<font color="#CCCCCC"> I don't know if that's what you</font>

873
00:45:59,640 --> 00:46:05,129
<font color="#CCCCCC">are thinking about or</font>

874
00:46:01,600 --> 00:46:05,130
<font color="#E5E5E5">okay good</font>

875
00:46:06,910 --> 00:46:12,049
the<font color="#CCCCCC"> exile</font>

876
00:46:09,380 --> 00:46:15,489
I didn't see before I<font color="#E5E5E5"> haven't looked at</font>

877
00:46:12,049 --> 00:46:18,910
<font color="#CCCCCC">it how</font><font color="#E5E5E5"> to change the clock to</font>

878
00:46:15,489 --> 00:46:21,750
<font color="#CCCCCC">perspective</font><font color="#E5E5E5"> microcontroller</font>

879
00:46:18,910 --> 00:46:21,750
it seems it's

880
00:46:23,250 --> 00:46:29,950
<font color="#E5E5E5">okay so the question is about</font>

881
00:46:26,579 --> 00:46:32,019
configuration<font color="#CCCCCC"> of the system clerk</font><font color="#E5E5E5"> and if</font>

882
00:46:29,950 --> 00:46:38,609
you can turn<font color="#E5E5E5"> it turn</font><font color="#CCCCCC"> it off or change</font>

883
00:46:32,019 --> 00:46:40,720
<font color="#E5E5E5">the frequency right</font><font color="#CCCCCC"> so given the actual</font>

884
00:46:38,609 --> 00:46:42,940
<font color="#E5E5E5">implementation of</font><font color="#CCCCCC"> the Hovind</font><font color="#E5E5E5"> scale</font>

885
00:46:40,720 --> 00:46:46,209
<font color="#CCCCCC">runtime</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> runtime I was mentioning</font><font color="#E5E5E5"> we</font>

886
00:46:42,940 --> 00:46:47,950
do not support system what called<font color="#CCCCCC"> CPU</font>

887
00:46:46,210 --> 00:46:50,589
throttling so you can change<font color="#CCCCCC"> the</font>

888
00:46:47,950 --> 00:46:55,029
frequency of your CPU<font color="#CCCCCC"> we do not support</font>

889
00:46:50,589 --> 00:46:56,920
<font color="#E5E5E5">this right now mostly</font><font color="#CCCCCC"> because your your</font>

890
00:46:55,029 --> 00:46:58,900
time variables or your your clock

891
00:46:56,920 --> 00:47:01,420
variables will be you<font color="#E5E5E5"> will</font><font color="#CCCCCC"> have no sense</font>

892
00:46:58,900 --> 00:47:02,710
if you<font color="#E5E5E5"> change the frequency the speed of</font>

893
00:47:01,420 --> 00:47:05,799
the<font color="#E5E5E5"> clock so that's not something</font><font color="#CCCCCC"> we</font>

894
00:47:02,710 --> 00:47:09,760
support what you can do if you<font color="#CCCCCC"> want to</font>

895
00:47:05,799 --> 00:47:12,599
save energy<font color="#E5E5E5"> is well first in the in the</font>

896
00:47:09,760 --> 00:47:15,940
kernel so that implements the<font color="#CCCCCC"> task</font>

897
00:47:12,599 --> 00:47:18,970
inside the<font color="#E5E5E5"> runtime when</font><font color="#CCCCCC"> there is no task</font>

898
00:47:15,940 --> 00:47:20,890
<font color="#E5E5E5">to run we put the CPU in weight mode so</font>

899
00:47:18,970 --> 00:47:24,220
wait for<font color="#E5E5E5"> interrupts that's so it's</font>

900
00:47:20,890 --> 00:47:27,490
somewhat lower power mode and the next

901
00:47:24,220 --> 00:47:30,308
<font color="#CCCCCC">solution is to really shut down so if</font>

902
00:47:27,490 --> 00:47:34,689
you have a stm32f4 you will have to<font color="#E5E5E5"> shut</font>

903
00:47:30,309 --> 00:47:38,279
down<font color="#E5E5E5"> the CPU to save energy</font><font color="#CCCCCC"> that's</font>

904
00:47:34,690 --> 00:47:38,279
that's all we have so<font color="#CCCCCC"> far</font>

905
00:47:40,640 --> 00:48:03,480
<font color="#CCCCCC">okay yes a little bit</font><font color="#E5E5E5"> so it's it's so</font>

906
00:47:59,130 --> 00:48:06,090
the<font color="#CCCCCC"> question is about the</font><font color="#E5E5E5"> question is</font>

907
00:48:03,480 --> 00:48:08,670
about the support of the bigger<font color="#CCCCCC"> bigger</font>

908
00:48:06,090 --> 00:48:09,660
<font color="#CCCCCC">bun blue right which which</font><font color="#E5E5E5"> CPU is the</font>

909
00:48:08,670 --> 00:48:23,550
<font color="#CCCCCC">running on this</font>

910
00:48:09,660 --> 00:48:28,259
I guess it's made for Linux or<font color="#E5E5E5"> okay I</font>

911
00:48:23,550 --> 00:48:31,590
didn't know this so looks<font color="#CCCCCC"> like there's</font>

912
00:48:28,260 --> 00:48:33,900
an<font color="#CCCCCC"> cortex a core and the cortex M so for</font>

913
00:48:31,590 --> 00:48:35,730
the cortex a I would<font color="#CCCCCC"> say you know it's</font>

914
00:48:33,900 --> 00:48:37,560
really<font color="#E5E5E5"> meant to run Linux so you should</font>

915
00:48:35,730 --> 00:48:39,540
run Linux and that's what I was

916
00:48:37,560 --> 00:48:42,240
mentioning in the improvements that<font color="#E5E5E5"> we</font>

917
00:48:39,540 --> 00:48:45,150
want<font color="#CCCCCC"> to do to support some of the Linux</font>

918
00:48:42,240 --> 00:48:47,640
driver for I<font color="#CCCCCC"> squared C and SPI etcetera</font>

919
00:48:45,150 --> 00:48:49,350
for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cortex-m part I don't know I</font>

920
00:48:47,640 --> 00:48:52,670
<font color="#E5E5E5">don't know this device</font><font color="#CCCCCC"> in particular but</font>

921
00:48:49,350 --> 00:48:55,380
<font color="#E5E5E5">you should be able to to support it with</font>

922
00:48:52,670 --> 00:48:59,040
with with the<font color="#E5E5E5"> odorous library there will</font>

923
00:48:55,380 --> 00:49:01,440
probably be some adaptations to<font color="#E5E5E5"> be to</font>

924
00:48:59,040 --> 00:49:08,060
this specific hardware but yeah that

925
00:49:01,440 --> 00:49:08,060
should be<font color="#E5E5E5"> doable okay</font>

926
00:49:08,910 --> 00:49:18,249
so thank<font color="#E5E5E5"> you thank you</font>

927
00:49:11,690 --> 00:49:18,249
[Applause]

