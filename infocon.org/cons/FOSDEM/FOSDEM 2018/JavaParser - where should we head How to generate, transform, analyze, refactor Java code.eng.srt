1
00:00:08,010 --> 00:00:14,200
so thank you<font color="#E5E5E5"> to be here</font>

2
00:00:11,250 --> 00:00:16,810
<font color="#CCCCCC">Federico Thomas safety</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Bill the</font>

3
00:00:14,200 --> 00:00:20,259
parser and<font color="#E5E5E5"> languages for a living and</font>

4
00:00:16,810 --> 00:00:20,709
today I'm going to talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> Java part</font>

5
00:00:20,259 --> 00:00:23,230
sir

6
00:00:20,710 --> 00:00:25,660
you can use to generate analyze and

7
00:00:23,230 --> 00:00:28,509
<font color="#E5E5E5">refractor</font><font color="#CCCCCC"> Java code and we also have the</font>

8
00:00:25,660 --> 00:00:32,250
maintainer<font color="#E5E5E5"> on the first line so if you</font>

9
00:00:28,509 --> 00:00:32,250
have very<font color="#CCCCCC"> difficult questions ask</font><font color="#E5E5E5"> him</font>

10
00:00:32,460 --> 00:00:39,550
and what did is that Java<font color="#CCCCCC"> parser</font><font color="#E5E5E5"> is a</font>

11
00:00:36,520 --> 00:00:41,920
set of libraries<font color="#CCCCCC"> that you can</font><font color="#E5E5E5"> use for</font>

12
00:00:39,550 --> 00:00:43,839
all<font color="#CCCCCC"> sorts of</font><font color="#E5E5E5"> things related</font><font color="#CCCCCC"> to code</font><font color="#E5E5E5"> so</font>

13
00:00:41,920 --> 00:00:46,180
you<font color="#E5E5E5"> can use it</font><font color="#CCCCCC"> to for code generation</font>

14
00:00:43,840 --> 00:00:50,829
<font color="#E5E5E5">code analysis and also code refactoring</font>

15
00:00:46,180 --> 00:00:53,079
<font color="#E5E5E5">and</font><font color="#CCCCCC"> we have a growing</font><font color="#E5E5E5"> user base</font><font color="#CCCCCC"> but we</font>

16
00:00:50,829 --> 00:00:55,930
have problems<font color="#CCCCCC"> getting</font><font color="#E5E5E5"> feedback from</font><font color="#CCCCCC"> our</font>

17
00:00:53,079 --> 00:00:58,300
<font color="#CCCCCC">users to understand</font><font color="#E5E5E5"> on which kind of</font>

18
00:00:55,930 --> 00:01:00,850
usages we should focus on so the ideas

19
00:00:58,300 --> 00:01:03,459
that we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> trying to talk</font><font color="#CCCCCC"> with the</font>

20
00:01:00,850 --> 00:01:06,939
<font color="#CCCCCC">community and get feedback so if you</font>

21
00:01:03,460 --> 00:01:10,920
have ideas if you suggestion<font color="#E5E5E5"> please talk</font>

22
00:01:06,939 --> 00:01:10,919
to<font color="#CCCCCC"> us</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> get up</font>

23
00:01:15,420 --> 00:01:21,929
okay so what<font color="#CCCCCC"> java parcel does so</font>

24
00:01:18,939 --> 00:01:25,600
<font color="#E5E5E5">surprise surprise</font><font color="#CCCCCC"> java parser is</font><font color="#E5E5E5"> apart</font>

25
00:01:21,929 --> 00:01:27,789
<font color="#E5E5E5">so it means that you can try I eat some</font>

26
00:01:25,600 --> 00:01:30,219
code<font color="#E5E5E5"> like in a file in a string whatever</font>

27
00:01:27,789 --> 00:01:33,700
<font color="#E5E5E5">and give you back an</font><font color="#CCCCCC"> absolute industry</font>

28
00:01:30,219 --> 00:01:36,189
so probably no one is surprised<font color="#E5E5E5"> but</font><font color="#CCCCCC"> you</font>

29
00:01:33,700 --> 00:01:38,560
<font color="#E5E5E5">can also do the opposite so</font><font color="#CCCCCC"> you can give</font>

30
00:01:36,189 --> 00:01:41,079
<font color="#E5E5E5">it</font><font color="#CCCCCC"> some abstract syntax tree and it</font>

31
00:01:38,560 --> 00:01:43,509
gives you back<font color="#E5E5E5"> code now if you combine</font>

32
00:01:41,079 --> 00:01:45,369
these<font color="#CCCCCC"> two different features it means</font>

33
00:01:43,509 --> 00:01:47,709
that you can start with some code<font color="#E5E5E5"> get</font>

34
00:01:45,369 --> 00:01:50,409
the<font color="#E5E5E5"> abstract syntax tree work on it like</font>

35
00:01:47,709 --> 00:01:54,929
changing it and then go<font color="#CCCCCC"> back to</font><font color="#E5E5E5"> code so</font>

36
00:01:50,409 --> 00:01:58,840
you can do refactoring<font color="#E5E5E5"> of existing code</font>

37
00:01:54,929 --> 00:02:01,539
<font color="#E5E5E5">now</font><font color="#CCCCCC"> a parser is not enough to solve</font>

38
00:01:58,840 --> 00:02:06,130
<font color="#E5E5E5">complex</font><font color="#CCCCCC"> problem and this</font><font color="#E5E5E5"> is why we have</font>

39
00:02:01,539 --> 00:02:08,679
<font color="#CCCCCC">also a symbol solver and here there are</font>

40
00:02:06,130 --> 00:02:10,840
<font color="#E5E5E5">some examples</font><font color="#CCCCCC"> of why you need this kind</font>

41
00:02:08,679 --> 00:02:13,900
of things now if you look at<font color="#E5E5E5"> these two</font>

42
00:02:10,840 --> 00:02:15,670
<font color="#CCCCCC">statements</font><font color="#E5E5E5"> the abstract syntax tree for</font>

43
00:02:13,900 --> 00:02:17,170
these two statements<font color="#CCCCCC"> looks as</font><font color="#E5E5E5"> actually</font>

44
00:02:15,670 --> 00:02:20,500
the<font color="#E5E5E5"> same because basically you are</font>

45
00:02:17,170 --> 00:02:21,319
assigning the value<font color="#CCCCCC"> 1 to something that</font>

46
00:02:20,500 --> 00:02:23,659
is called<font color="#E5E5E5"> foo</font>

47
00:02:21,319 --> 00:02:26,060
but the<font color="#CCCCCC"> abscess industry</font><font color="#E5E5E5"> doesn't know</font>

48
00:02:23,659 --> 00:02:30,048
what<font color="#CCCCCC"> food is</font><font color="#E5E5E5"> they have no idea that in</font>

49
00:02:26,060 --> 00:02:31,879
this case this<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> parameter and this</font>

50
00:02:30,049 --> 00:02:33,530
case this<font color="#E5E5E5"> is a field so they are two</font>

51
00:02:31,879 --> 00:02:37,518
different<font color="#E5E5E5"> food and these two statements</font>

52
00:02:33,530 --> 00:02:39,769
<font color="#E5E5E5">do different things all for example if</font>

53
00:02:37,519 --> 00:02:42,500
you have two separate method call that

54
00:02:39,769 --> 00:02:44,510
<font color="#CCCCCC">call</font><font color="#E5E5E5"> two different methods</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> methods</font>

55
00:02:42,500 --> 00:02:47,629
<font color="#E5E5E5">that time to add the same name</font><font color="#CCCCCC"> but they</font>

56
00:02:44,510 --> 00:02:50,450
<font color="#E5E5E5">are different in the abscess industry</font>

57
00:02:47,629 --> 00:02:52,939
looks exactly the<font color="#E5E5E5"> same so you need some</font>

58
00:02:50,450 --> 00:02:56,030
<font color="#CCCCCC">additional logic or symbol resolution</font><font color="#E5E5E5"> to</font>

59
00:02:52,939 --> 00:02:57,500
distinguish these two<font color="#E5E5E5"> cases</font><font color="#CCCCCC"> or finally</font>

60
00:02:56,030 --> 00:02:59,450
you<font color="#CCCCCC"> could have the same problems with</font>

61
00:02:57,500 --> 00:03:01,760
<font color="#E5E5E5">types here and instance it in two</font>

62
00:02:59,450 --> 00:03:04,159
different<font color="#E5E5E5"> classes</font><font color="#CCCCCC"> and in terminal class</font>

63
00:03:01,760 --> 00:03:06,349
or a<font color="#E5E5E5"> local class but the statement per</font>

64
00:03:04,159 --> 00:03:10,310
se and the corresponding abscess

65
00:03:06,349 --> 00:03:13,159
industry is exactly the same so what<font color="#E5E5E5"> the</font>

66
00:03:10,310 --> 00:03:14,690
symbol solver does well<font color="#E5E5E5"> you parse a</font>

67
00:03:13,159 --> 00:03:17,929
piece of code you get the abscess

68
00:03:14,690 --> 00:03:19,250
industry and is<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> find to</font>

69
00:03:17,930 --> 00:03:21,560
associate the reference with the

70
00:03:19,250 --> 00:03:23,989
corresponding<font color="#E5E5E5"> decoration like here I'm</font>

71
00:03:21,560 --> 00:03:27,290
<font color="#CCCCCC">referring to type</font><font color="#E5E5E5"> D the symbol server</font>

72
00:03:23,989 --> 00:03:30,049
<font color="#E5E5E5">will</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to examine this reference</font>

73
00:03:27,290 --> 00:03:32,239
and figure out the disre<font color="#E5E5E5"> fer to the</font>

74
00:03:30,049 --> 00:03:37,239
<font color="#E5E5E5">Class D in the same package somewhere</font>

75
00:03:32,239 --> 00:03:40,250
else in another file the way they are

76
00:03:37,239 --> 00:03:44,239
the integration<font color="#CCCCCC"> without the type solver</font>

77
00:03:40,250 --> 00:03:46,669
with<font color="#E5E5E5"> Java parser works in this way</font><font color="#CCCCCC"> you</font>

78
00:03:44,239 --> 00:03:48,949
basically take notes of the<font color="#E5E5E5"> abscess</font>

79
00:03:46,669 --> 00:03:50,720
industry<font color="#E5E5E5"> and you have some methods that</font>

80
00:03:48,949 --> 00:03:53,090
require symbol resolution<font color="#CCCCCC"> and some</font>

81
00:03:50,720 --> 00:03:56,840
<font color="#E5E5E5">methods</font><font color="#CCCCCC"> that work all the time</font><font color="#E5E5E5"> for</font>

82
00:03:53,090 --> 00:03:59,569
<font color="#E5E5E5">example if I have a node</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> observes</font>

83
00:03:56,840 --> 00:04:01,639
<font color="#CCCCCC">industry that</font><font color="#E5E5E5"> is representing a method</font>

84
00:03:59,569 --> 00:04:05,629
called<font color="#CCCCCC"> I can always get</font><font color="#E5E5E5"> the name because</font>

85
00:04:01,639 --> 00:04:07,459
the name<font color="#E5E5E5"> is in the code itself</font><font color="#CCCCCC"> so I add</font>

86
00:04:05,629 --> 00:04:09,828
this<font color="#CCCCCC"> information directly</font><font color="#E5E5E5"> in the</font>

87
00:04:07,459 --> 00:04:13,069
<font color="#CCCCCC">observes industry so this world</font>

88
00:04:09,829 --> 00:04:17,900
also if the<font color="#E5E5E5"> Java symbol solver is not</font>

89
00:04:13,069 --> 00:04:23,300
enabled<font color="#E5E5E5"> well if you want</font><font color="#CCCCCC"> stay closer</font><font color="#E5E5E5"> to</font>

90
00:04:17,899 --> 00:04:25,310
your laptop<font color="#CCCCCC"> okay why if you</font><font color="#E5E5E5"> want to do</font>

91
00:04:23,300 --> 00:04:27,409
<font color="#E5E5E5">something more advanced like calculate</font>

92
00:04:25,310 --> 00:04:30,560
the result type resulting of<font color="#E5E5E5"> the</font>

93
00:04:27,409 --> 00:04:33,409
expression now<font color="#E5E5E5"> you need to use the Java</font>

94
00:04:30,560 --> 00:04:35,090
<font color="#E5E5E5">symbol solver</font><font color="#CCCCCC"> because to understand the</font>

95
00:04:33,409 --> 00:04:37,370
resulting type of the method

96
00:04:35,090 --> 00:04:39,710
you need to find the definition<font color="#CCCCCC"> of the</font>

97
00:04:37,370 --> 00:04:44,030
method<font color="#CCCCCC"> that you are calling</font><font color="#E5E5E5"> and looking</font>

98
00:04:39,710 --> 00:04:45,760
at the<font color="#E5E5E5"> returning type over there if you</font>

99
00:04:44,030 --> 00:04:48,260
want to<font color="#E5E5E5"> use a symbol resolution</font>

100
00:04:45,760 --> 00:04:50,389
<font color="#CCCCCC">basically you need to give</font><font color="#E5E5E5"> it one</font>

101
00:04:48,260 --> 00:04:55,400
<font color="#E5E5E5">information that is where to</font><font color="#CCCCCC"> look</font><font color="#E5E5E5"> for</font>

102
00:04:50,389 --> 00:04:57,860
classes<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you can say to it you can say</font>

103
00:04:55,400 --> 00:05:01,669
to it to use<font color="#E5E5E5"> to look into some source</font>

104
00:04:57,860 --> 00:05:03,710
directories on some jar files or for

105
00:05:01,669 --> 00:05:08,810
classes from the<font color="#E5E5E5"> standard library</font><font color="#CCCCCC"> you</font>

106
00:05:03,710 --> 00:05:11,630
may want to<font color="#E5E5E5"> use the reflection now this</font>

107
00:05:08,810 --> 00:05:15,229
is briefest courses of the main<font color="#E5E5E5"> features</font>

108
00:05:11,630 --> 00:05:17,180
now let's look at some<font color="#E5E5E5"> use cases the</font>

109
00:05:15,229 --> 00:05:20,750
first use<font color="#CCCCCC"> case is supporting</font><font color="#E5E5E5"> code</font>

110
00:05:17,180 --> 00:05:23,090
<font color="#E5E5E5">generation people</font><font color="#CCCCCC"> may want</font><font color="#E5E5E5"> to generate</font>

111
00:05:20,750 --> 00:05:25,340
code because they have to write a lot<font color="#E5E5E5"> of</font>

112
00:05:23,090 --> 00:05:27,229
boilerplate<font color="#E5E5E5"> code let's imagine you have</font>

113
00:05:25,340 --> 00:05:30,289
to write one class for<font color="#CCCCCC"> each of your</font>

114
00:05:27,229 --> 00:05:32,900
<font color="#E5E5E5">database table</font><font color="#CCCCCC"> something pretty below</font><font color="#E5E5E5"> or</font>

115
00:05:30,289 --> 00:05:35,990
maybe you want to<font color="#E5E5E5"> buy to build some</font>

116
00:05:32,900 --> 00:05:39,169
transpiler for example I build DSL for a

117
00:05:35,990 --> 00:05:41,419
living so I build<font color="#CCCCCC"> desire level languages</font>

118
00:05:39,169 --> 00:05:45,919
and then translate to Java<font color="#CCCCCC"> I could use</font>

119
00:05:41,419 --> 00:05:49,490
the<font color="#E5E5E5"> Java parser to generate the code the</font>

120
00:05:45,919 --> 00:05:52,609
<font color="#CCCCCC">Java code the</font><font color="#E5E5E5"> way you can use Java</font>

121
00:05:49,490 --> 00:05:54,200
parser<font color="#CCCCCC"> for this goal it's pretty simple</font>

122
00:05:52,610 --> 00:05:56,780
<font color="#E5E5E5">you create a compilation unit to</font>

123
00:05:54,200 --> 00:05:59,690
<font color="#E5E5E5">represent an entire file you set the</font>

124
00:05:56,780 --> 00:06:02,419
package declaration<font color="#E5E5E5"> then for example you</font>

125
00:05:59,690 --> 00:06:06,229
create<font color="#CCCCCC"> a class inside this file</font><font color="#E5E5E5"> you had</font>

126
00:06:02,419 --> 00:06:08,090
a couple<font color="#E5E5E5"> of fields</font><font color="#CCCCCC"> to this class then if</font>

127
00:06:06,229 --> 00:06:10,430
you want<font color="#E5E5E5"> to other constructors to</font>

128
00:06:08,090 --> 00:06:12,619
specify its public takes a couple<font color="#CCCCCC"> of</font>

129
00:06:10,430 --> 00:06:15,229
parameters<font color="#CCCCCC"> and then basically assign</font>

130
00:06:12,620 --> 00:06:18,979
these parameters<font color="#E5E5E5"> to the corresponding</font>

131
00:06:15,229 --> 00:06:21,620
fields so it's pretty easy<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> a bit</font>

132
00:06:18,979 --> 00:06:23,389
<font color="#E5E5E5">long</font><font color="#CCCCCC"> to write but pretty</font><font color="#E5E5E5"> easy and</font><font color="#CCCCCC"> then</font>

133
00:06:21,620 --> 00:06:26,810
maybe you<font color="#CCCCCC"> are the</font><font color="#E5E5E5"> couple of characters</font>

134
00:06:23,389 --> 00:06:30,349
so<font color="#E5E5E5"> again you create a method for example</font>

135
00:06:26,810 --> 00:06:32,960
<font color="#CCCCCC">name get title and this</font><font color="#E5E5E5"> method</font><font color="#CCCCCC"> will</font>

136
00:06:30,349 --> 00:06:35,680
contain just one return statement<font color="#E5E5E5"> so we</font>

137
00:06:32,960 --> 00:06:39,409
will<font color="#E5E5E5"> just return the value of the field</font>

138
00:06:35,680 --> 00:06:42,110
<font color="#E5E5E5">then in the end you</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> to string on the</font>

139
00:06:39,410 --> 00:06:45,110
world compilation unit and you get your

140
00:06:42,110 --> 00:06:47,300
source code so this use<font color="#CCCCCC"> case is very</font>

141
00:06:45,110 --> 00:06:48,699
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> you just</font><font color="#E5E5E5"> use the API to build</font>

142
00:06:47,300 --> 00:06:51,289
another single

143
00:06:48,699 --> 00:06:54,759
<font color="#CCCCCC">called to</font><font color="#E5E5E5"> string and you get the</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> so</font>

144
00:06:51,289 --> 00:06:57,949
there is not<font color="#E5E5E5"> much to say about this</font>

145
00:06:54,759 --> 00:07:01,129
<font color="#E5E5E5">there are more advanced usages like for</font>

146
00:06:57,949 --> 00:07:02,899
example code analysis you may want to do

147
00:07:01,129 --> 00:07:05,569
this because you<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to calculate</font><font color="#E5E5E5"> some</font>

148
00:07:02,899 --> 00:07:07,669
matrix<font color="#E5E5E5"> on your code or you want to</font>

149
00:07:05,569 --> 00:07:11,209
ensure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> some quality standards are</font>

150
00:07:07,669 --> 00:07:14,179
met<font color="#CCCCCC"> or maybe you want to</font><font color="#E5E5E5"> do some simple</font>

151
00:07:11,209 --> 00:07:19,219
<font color="#CCCCCC">one of queries maybe to familiarize</font><font color="#E5E5E5"> with</font>

152
00:07:14,179 --> 00:07:24,109
your code base<font color="#CCCCCC"> I have a few example on</font>

153
00:07:19,219 --> 00:07:26,119
<font color="#E5E5E5">this suppose that you want to</font><font color="#CCCCCC"> to figure</font>

154
00:07:24,110 --> 00:07:28,639
<font color="#CCCCCC">out how many methods</font><font color="#E5E5E5"> take more than</font>

155
00:07:26,119 --> 00:07:31,579
three parameters in<font color="#CCCCCC"> your</font><font color="#E5E5E5"> libraries so I</font>

156
00:07:28,639 --> 00:07:33,529
part so the source code<font color="#E5E5E5"> so I have a</font>

157
00:07:31,579 --> 00:07:36,679
bunch of<font color="#E5E5E5"> compilation units there are</font>

158
00:07:33,529 --> 00:07:39,229
containing<font color="#CCCCCC"> all see use this</font><font color="#E5E5E5"> this list</font>

159
00:07:36,679 --> 00:07:42,049
<font color="#CCCCCC">and then I'm using these helper methods</font>

160
00:07:39,229 --> 00:07:45,050
to find among all this compilation<font color="#E5E5E5"> unit</font>

161
00:07:42,050 --> 00:07:47,149
all<font color="#E5E5E5"> the method declaration once I have</font>

162
00:07:45,050 --> 00:07:50,389
this list of method declaration I just

163
00:07:47,149 --> 00:07:52,909
<font color="#E5E5E5">work start a stream filter them by the</font>

164
00:07:50,389 --> 00:07:56,119
<font color="#E5E5E5">number</font><font color="#CCCCCC"> of parameters and then print</font>

165
00:07:52,909 --> 00:07:58,369
result<font color="#E5E5E5"> I've run these queries on a</font>

166
00:07:56,119 --> 00:08:01,069
simple project<font color="#E5E5E5"> called amcrest and in</font>

167
00:07:58,369 --> 00:08:03,409
this<font color="#E5E5E5"> case I can figure out that in</font><font color="#CCCCCC"> arm</font>

168
00:08:01,069 --> 00:08:05,959
<font color="#CCCCCC">cress there are 11 methods taking more</font>

169
00:08:03,409 --> 00:08:09,759
<font color="#CCCCCC">than three parameters so maybe I want to</font>

170
00:08:05,959 --> 00:08:09,759
take a<font color="#E5E5E5"> look at them and refactor them</font>

171
00:08:09,819 --> 00:08:14,449
<font color="#E5E5E5">another query there is a bit more</font>

172
00:08:12,529 --> 00:08:16,579
complex maybe<font color="#E5E5E5"> I want to figure out with</font>

173
00:08:14,449 --> 00:08:19,729
our the<font color="#CCCCCC"> treetop classes with most</font>

174
00:08:16,579 --> 00:08:22,610
<font color="#CCCCCC">methods so again I take all the class or</font>

175
00:08:19,729 --> 00:08:25,219
interface<font color="#E5E5E5"> declaration now in Java part</font>

176
00:08:22,610 --> 00:08:27,529
<font color="#E5E5E5">say we are once type of note the cool</font>

177
00:08:25,219 --> 00:08:30,469
represent classes or interface and we

178
00:08:27,529 --> 00:08:32,568
distinguish it by looking<font color="#CCCCCC"> at</font><font color="#E5E5E5"> flag</font><font color="#CCCCCC"> so in</font>

179
00:08:30,469 --> 00:08:34,938
this case we take all the nodes<font color="#E5E5E5"> of this</font>

180
00:08:32,568 --> 00:08:37,669
<font color="#CCCCCC">type we throw away</font><font color="#E5E5E5"> the interfaces so we</font>

181
00:08:34,938 --> 00:08:40,098
have just the classes and we look at the

182
00:08:37,669 --> 00:08:41,958
number of<font color="#CCCCCC"> methods we sort them in</font>

183
00:08:40,099 --> 00:08:45,589
descending order<font color="#CCCCCC"> and we take the</font><font color="#E5E5E5"> first</font>

184
00:08:41,958 --> 00:08:48,229
<font color="#E5E5E5">three and and so in this case we figure</font>

185
00:08:45,589 --> 00:08:51,379
out<font color="#E5E5E5"> that</font><font color="#CCCCCC"> core main shells at 35 meters</font>

186
00:08:48,230 --> 00:08:54,920
by description<font color="#E5E5E5"> as 13</font><font color="#CCCCCC"> and is equal</font><font color="#E5E5E5"> s 9</font>

187
00:08:51,379 --> 00:08:57,860
<font color="#E5E5E5">now in this case we didn't use symbol</font>

188
00:08:54,920 --> 00:09:00,500
resolution<font color="#CCCCCC"> so these get methods means</font>

189
00:08:57,860 --> 00:09:01,880
only<font color="#E5E5E5"> the methods that are declared</font><font color="#CCCCCC"> on</font>

190
00:09:00,500 --> 00:09:04,010
<font color="#CCCCCC">the class itself</font><font color="#E5E5E5"> we</font>

191
00:09:01,880 --> 00:09:06,080
not considering<font color="#E5E5E5"> the methods that were</font>

192
00:09:04,010 --> 00:09:09,880
<font color="#CCCCCC">inherit because to do</font><font color="#E5E5E5"> that we will need</font>

193
00:09:06,080 --> 00:09:11,960
to<font color="#E5E5E5"> jump to the parent jump to the</font>

194
00:09:09,880 --> 00:09:17,780
implemented interface and look over

195
00:09:11,960 --> 00:09:20,360
<font color="#E5E5E5">there so we do we use instead symbol</font>

196
00:09:17,780 --> 00:09:22,400
resolution<font color="#CCCCCC"> in this example in this case</font>

197
00:09:20,360 --> 00:09:26,030
<font color="#CCCCCC">we are asking</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> is the class with</font>

198
00:09:22,400 --> 00:09:27,980
most<font color="#CCCCCC"> ancestors so most</font><font color="#E5E5E5"> super classes at</font>

199
00:09:26,030 --> 00:09:31,699
the<font color="#E5E5E5"> interfaces</font><font color="#CCCCCC"> that were</font><font color="#E5E5E5"> extended or</font>

200
00:09:27,980 --> 00:09:34,370
implemented recursively<font color="#E5E5E5"> so in this case</font>

201
00:09:31,700 --> 00:09:37,730
I<font color="#E5E5E5"> take again all the classes then</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> call</font>

202
00:09:34,370 --> 00:09:39,800
result<font color="#E5E5E5"> to get the</font><font color="#CCCCCC"> version of the class</font>

203
00:09:37,730 --> 00:09:42,380
declaration<font color="#CCCCCC"> we told this information</font>

204
00:09:39,800 --> 00:09:44,060
<font color="#CCCCCC">result</font><font color="#E5E5E5"> so with the reference to the</font>

205
00:09:42,380 --> 00:09:47,660
<font color="#E5E5E5">parent so</font><font color="#CCCCCC"> that I can jump in the</font>

206
00:09:44,060 --> 00:09:50,449
<font color="#E5E5E5">Declaration</font><font color="#CCCCCC"> examining in this case I</font>

207
00:09:47,660 --> 00:09:55,850
sort by the number of<font color="#E5E5E5"> all ancestor again</font>

208
00:09:50,450 --> 00:09:57,800
<font color="#CCCCCC">in a descending</font><font color="#E5E5E5"> order</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> I</font>

209
00:09:55,850 --> 00:09:59,720
can figure<font color="#E5E5E5"> out the string contains is</font>

210
00:09:57,800 --> 00:10:01,819
the one with more ancestor<font color="#CCCCCC"> because it's</font>

211
00:09:59,720 --> 00:10:05,300
a stand or implements a bunch<font color="#E5E5E5"> of classes</font>

212
00:10:01,820 --> 00:10:10,330
<font color="#E5E5E5">so</font><font color="#CCCCCC"> this is just</font><font color="#E5E5E5"> to give you a rough idea</font>

213
00:10:05,300 --> 00:10:12,530
<font color="#E5E5E5">of the kind of queries you</font><font color="#CCCCCC"> can write now</font>

214
00:10:10,330 --> 00:10:15,650
<font color="#CCCCCC">another use case that I'm very</font>

215
00:10:12,530 --> 00:10:18,459
interested<font color="#E5E5E5"> into is code refactoring</font><font color="#CCCCCC"> it</font>

216
00:10:15,650 --> 00:10:21,350
is that<font color="#E5E5E5"> you could</font><font color="#CCCCCC"> have to</font><font color="#E5E5E5"> modernize a</font>

217
00:10:18,460 --> 00:10:24,710
large code base like you inherit a

218
00:10:21,350 --> 00:10:26,540
project written<font color="#E5E5E5"> with Java 1.4 and you</font>

219
00:10:24,710 --> 00:10:31,100
want to start<font color="#E5E5E5"> taking advantage of</font>

220
00:10:26,540 --> 00:10:33,650
streams or maybe just for each loop or

221
00:10:31,100 --> 00:10:35,780
stuff like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> or maybe you want</font><font color="#CCCCCC"> to</font>

222
00:10:33,650 --> 00:10:37,880
update some dependencies so<font color="#E5E5E5"> the</font><font color="#CCCCCC"> API of</font>

223
00:10:35,780 --> 00:10:39,560
<font color="#CCCCCC">the library you</font><font color="#E5E5E5"> are using</font><font color="#CCCCCC"> are change you</font>

224
00:10:37,880 --> 00:10:42,080
want to<font color="#E5E5E5"> refer to this automatically</font>

225
00:10:39,560 --> 00:10:45,349
because maybe you're using it in<font color="#CCCCCC"> pond</font>

226
00:10:42,080 --> 00:10:47,750
gazillions<font color="#CCCCCC"> of places in your</font><font color="#E5E5E5"> code</font><font color="#CCCCCC"> or</font>

227
00:10:45,350 --> 00:10:50,540
<font color="#CCCCCC">perhaps you want to change some usage</font>

228
00:10:47,750 --> 00:10:52,670
patterns<font color="#CCCCCC"> maybe you're</font><font color="#E5E5E5"> using the</font>

229
00:10:50,540 --> 00:10:57,290
singleton<font color="#CCCCCC"> pattern somewhere and you want</font>

230
00:10:52,670 --> 00:11:00,260
to initialize all<font color="#CCCCCC"> the all these</font><font color="#E5E5E5"> fields</font>

231
00:10:57,290 --> 00:11:04,760
in a lazy way<font color="#E5E5E5"> you can do this</font>

232
00:11:00,260 --> 00:11:05,480
refactoring automatically so just to

233
00:11:04,760 --> 00:11:08,030
give<font color="#CCCCCC"> you an idea</font>

234
00:11:05,480 --> 00:11:10,400
<font color="#CCCCCC">I consider this very simple example it</font>

235
00:11:08,030 --> 00:11:12,860
is that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> are using a library with a</font>

236
00:11:10,400 --> 00:11:14,569
method that<font color="#CCCCCC"> it</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> called old method so</font>

237
00:11:12,860 --> 00:11:17,300
it's a very<font color="#E5E5E5"> suspicion</font>

238
00:11:14,570 --> 00:11:18,950
suspicious name for<font color="#E5E5E5"> a method collapse</font>

239
00:11:17,300 --> 00:11:20,930
the new version of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> library all</font>

240
00:11:18,950 --> 00:11:24,080
method is gone<font color="#CCCCCC"> and now you should use</font>

241
00:11:20,930 --> 00:11:26,780
new method it's<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and the new method</font>

242
00:11:24,080 --> 00:11:31,340
state three<font color="#E5E5E5"> parameters</font><font color="#CCCCCC"> while</font><font color="#E5E5E5"> automated</font>

243
00:11:26,780 --> 00:11:33,650
<font color="#CCCCCC">you stay true and</font><font color="#E5E5E5"> this new method the</font>

244
00:11:31,340 --> 00:11:36,110
first<font color="#CCCCCC"> parameters are the same I</font><font color="#E5E5E5"> used to</font>

245
00:11:33,650 --> 00:11:38,990
take<font color="#E5E5E5"> with all methods we just need to</font>

246
00:11:36,110 --> 00:11:41,540
invert them and then I need<font color="#E5E5E5"> to part to</font>

247
00:11:38,990 --> 00:11:44,870
pass a boolean as after<font color="#CCCCCC"> the parameters</font>

248
00:11:41,540 --> 00:11:46,640
that should be true if I want to get the

249
00:11:44,870 --> 00:11:49,640
same behavior<font color="#E5E5E5"> I used to get with</font>

250
00:11:46,640 --> 00:11:53,510
augmented<font color="#E5E5E5"> so I will implement this stuff</font>

251
00:11:49,640 --> 00:11:55,939
<font color="#CCCCCC">well</font><font color="#E5E5E5"> I find all the method calls then I</font>

252
00:11:53,510 --> 00:11:59,000
resolved invoke method so I figure out

253
00:11:55,940 --> 00:12:00,650
which method<font color="#CCCCCC"> is actually</font><font color="#E5E5E5"> called I look</font>

254
00:11:59,000 --> 00:12:02,720
at the signature and<font color="#CCCCCC"> I see that</font><font color="#E5E5E5"> it</font>

255
00:12:00,650 --> 00:12:05,840
matched the signature I'm interested in

256
00:12:02,720 --> 00:12:08,750
<font color="#CCCCCC">- this is important because maybe I add</font>

257
00:12:05,840 --> 00:12:11,270
calls to an author<font color="#E5E5E5"> whole method that is</font>

258
00:12:08,750 --> 00:12:14,930
not the one this change and I want to be

259
00:12:11,270 --> 00:12:16,840
<font color="#E5E5E5">sure</font><font color="#CCCCCC"> to just change</font><font color="#E5E5E5"> the call ring the</font>

260
00:12:14,930 --> 00:12:20,930
correct old method

261
00:12:16,840 --> 00:12:24,740
so I find all these method calls<font color="#E5E5E5"> and for</font>

262
00:12:20,930 --> 00:12:27,319
each<font color="#CCCCCC"> of them I replace the call with a</font>

263
00:12:24,740 --> 00:12:31,010
new method<font color="#CCCCCC"> called</font><font color="#E5E5E5"> that I will show in</font>

264
00:12:27,320 --> 00:12:33,320
the<font color="#CCCCCC"> next slide and this is how I build a</font>

265
00:12:31,010 --> 00:12:36,560
new method<font color="#E5E5E5"> code</font><font color="#CCCCCC"> I just</font><font color="#E5E5E5"> create a new</font>

266
00:12:33,320 --> 00:12:38,750
<font color="#CCCCCC">method</font><font color="#E5E5E5"> called expression node</font><font color="#CCCCCC"> I reuse</font>

267
00:12:36,560 --> 00:12:41,420
the old scope the scope is<font color="#CCCCCC"> the stuff</font>

268
00:12:38,750 --> 00:12:43,940
<font color="#CCCCCC">that comes before</font><font color="#E5E5E5"> the dot so if before</font><font color="#CCCCCC"> I</font>

269
00:12:41,420 --> 00:12:48,290
was calling foo<font color="#E5E5E5"> daughter method now I</font>

270
00:12:43,940 --> 00:12:50,570
want<font color="#E5E5E5"> to call foo dot new method</font><font color="#CCCCCC"> once</font>

271
00:12:48,290 --> 00:12:53,120
I've<font color="#E5E5E5"> done that well of course I said the</font>

272
00:12:50,570 --> 00:12:55,520
<font color="#E5E5E5">correct name for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> method call then I</font>

273
00:12:53,120 --> 00:12:57,830
had the<font color="#CCCCCC"> third shoe parameters there are</font>

274
00:12:55,520 --> 00:13:00,439
same parameters I had before<font color="#E5E5E5"> but</font>

275
00:12:57,830 --> 00:13:03,350
inverted and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> I pass a</font><font color="#E5E5E5"> boolean</font>

276
00:13:00,440 --> 00:13:05,810
literal with very true<font color="#CCCCCC"> and I'm done</font><font color="#E5E5E5"> so</font>

277
00:13:03,350 --> 00:13:09,500
with these few<font color="#E5E5E5"> lines I will be able to</font>

278
00:13:05,810 --> 00:13:12,800
refactor this call to use the new method

279
00:13:09,500 --> 00:13:15,950
and you can<font color="#CCCCCC"> imagine</font><font color="#E5E5E5"> that if I add a ton</font>

280
00:13:12,800 --> 00:13:17,449
of calls to the<font color="#CCCCCC"> old method</font><font color="#E5E5E5"> I would save</font>

281
00:13:15,950 --> 00:13:20,270
a<font color="#CCCCCC"> lot of time and I</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> be sure to</font>

282
00:13:17,450 --> 00:13:22,490
<font color="#CCCCCC">avoid</font><font color="#E5E5E5"> any</font><font color="#CCCCCC"> airflow because with</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> kind</font>

283
00:13:20,270 --> 00:13:25,569
of boring a repetitive<font color="#E5E5E5"> task</font><font color="#CCCCCC"> it's very</font>

284
00:13:22,490 --> 00:13:29,509
easy to<font color="#CCCCCC"> get things wrong</font>

285
00:13:25,569 --> 00:13:31,610
so very quickly some other features we

286
00:13:29,509 --> 00:13:34,459
have in<font color="#CCCCCC"> Java</font><font color="#E5E5E5"> parts that we think are</font>

287
00:13:31,610 --> 00:13:38,839
interesting<font color="#E5E5E5"> is comment attribution so we</font>

288
00:13:34,459 --> 00:13:41,119
are able<font color="#CCCCCC"> to understand to which piece of</font>

289
00:13:38,839 --> 00:13:44,149
code the comments refer to and this<font color="#E5E5E5"> is</font>

290
00:13:41,120 --> 00:13:46,970
important because<font color="#E5E5E5"> sometimes you</font><font color="#CCCCCC"> want to</font>

291
00:13:44,149 --> 00:13:49,189
delete statements probably you<font color="#E5E5E5"> want to</font>

292
00:13:46,970 --> 00:13:52,639
delete the<font color="#CCCCCC"> Associated comment</font><font color="#E5E5E5"> or if you</font>

293
00:13:49,189 --> 00:13:57,560
<font color="#E5E5E5">take a statement and want to connect to</font>

294
00:13:52,639 --> 00:13:59,930
<font color="#E5E5E5">box</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is very important</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> I will</font>

295
00:13:57,560 --> 00:14:01,459
do<font color="#CCCCCC"> that</font><font color="#E5E5E5"> later</font><font color="#CCCCCC"> okay if you want</font><font color="#E5E5E5"> to move</font>

296
00:13:59,930 --> 00:14:03,859
the statement you want<font color="#E5E5E5"> to move</font><font color="#CCCCCC"> the</font>

297
00:14:01,459 --> 00:14:06,709
<font color="#CCCCCC">Associated comment with it so this</font><font color="#E5E5E5"> kind</font>

298
00:14:03,860 --> 00:14:09,350
of things are useful<font color="#E5E5E5"> another feature</font>

299
00:14:06,709 --> 00:14:13,008
that<font color="#E5E5E5"> has some bite its lexical</font>

300
00:14:09,350 --> 00:14:14,660
preservation so if you start parsing a

301
00:14:13,009 --> 00:14:19,670
piece of code<font color="#E5E5E5"> and you change the</font>

302
00:14:14,660 --> 00:14:21,529
abstracts industry<font color="#E5E5E5"> when you want if you</font>

303
00:14:19,670 --> 00:14:24,110
<font color="#CCCCCC">when you get the code back you would</font>

304
00:14:21,529 --> 00:14:26,389
like to get the<font color="#CCCCCC"> original code with some</font>

305
00:14:24,110 --> 00:14:30,579
adjustment preserving<font color="#E5E5E5"> the original</font>

306
00:14:26,389 --> 00:14:32,750
<font color="#E5E5E5">layout</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> imagine that you</font><font color="#CCCCCC"> have</font>

307
00:14:30,579 --> 00:14:35,599
<font color="#CCCCCC">declaration of three</font><font color="#E5E5E5"> variables on one</font>

308
00:14:32,750 --> 00:14:38,029
line and you<font color="#E5E5E5"> parts it you get the</font><font color="#CCCCCC"> App</font>

309
00:14:35,600 --> 00:14:41,660
<font color="#CCCCCC">Store's industry you navigate and you</font>

310
00:14:38,029 --> 00:14:45,079
remove<font color="#CCCCCC"> B now</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> need to adapt the code</font>

311
00:14:41,660 --> 00:14:47,380
by removing<font color="#E5E5E5"> B but also one of the commas</font>

312
00:14:45,079 --> 00:14:52,399
<font color="#E5E5E5">otherwise the code doesn't make sense</font><font color="#CCCCCC"> or</font>

313
00:14:47,380 --> 00:14:54,319
if you<font color="#E5E5E5"> are parsing</font><font color="#CCCCCC"> a method that for</font>

314
00:14:52,399 --> 00:14:57,439
some reason<font color="#CCCCCC"> as a very weird indentation</font>

315
00:14:54,319 --> 00:14:59,209
<font color="#CCCCCC">and you are the new statements in this</font>

316
00:14:57,439 --> 00:15:01,130
method you<font color="#E5E5E5"> want to preserve the same</font>

317
00:14:59,209 --> 00:15:03,619
style and so add the new may the new

318
00:15:01,130 --> 00:15:07,279
statement<font color="#CCCCCC"> with the same indentation</font><font color="#E5E5E5"> as</font>

319
00:15:03,620 --> 00:15:09,500
the method as the<font color="#E5E5E5"> statement above so</font>

320
00:15:07,279 --> 00:15:12,019
there are a<font color="#CCCCCC"> lot of things to consider</font><font color="#E5E5E5"> to</font>

321
00:15:09,500 --> 00:15:15,079
<font color="#E5E5E5">get classical preservation right and so</font>

322
00:15:12,019 --> 00:15:17,689
we<font color="#E5E5E5"> we are thinking it's</font><font color="#CCCCCC"> a it's an</font>

323
00:15:15,079 --> 00:15:21,199
important feature<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have and not easy</font>

324
00:15:17,689 --> 00:15:23,240
to replicate<font color="#CCCCCC"> for our competitors</font><font color="#E5E5E5"> now</font>

325
00:15:21,199 --> 00:15:26,029
there are other<font color="#E5E5E5"> things that</font><font color="#CCCCCC"> we are</font>

326
00:15:23,240 --> 00:15:27,680
planning<font color="#CCCCCC"> for the future</font><font color="#E5E5E5"> and probably you</font>

327
00:15:26,029 --> 00:15:30,709
are not<font color="#E5E5E5"> going to read this but it</font>

328
00:15:27,680 --> 00:15:34,130
doesn't matter<font color="#E5E5E5"> because this is just to</font>

329
00:15:30,709 --> 00:15:37,699
show<font color="#CCCCCC"> an example of</font><font color="#E5E5E5"> our major library we</font>

330
00:15:34,130 --> 00:15:38,840
are experimenting<font color="#CCCCCC"> with</font><font color="#E5E5E5"> and this piece of</font>

331
00:15:37,699 --> 00:15:42,620
<font color="#CCCCCC">code is</font>

332
00:15:38,840 --> 00:15:45,710
able to to<font color="#CCCCCC"> identify properties</font><font color="#E5E5E5"> in a</font><font color="#CCCCCC"> java</font>

333
00:15:42,620 --> 00:15:47,720
beam so<font color="#E5E5E5"> it is</font><font color="#CCCCCC"> able to find the</font><font color="#E5E5E5"> three</font>

334
00:15:45,710 --> 00:15:50,690
plates<font color="#E5E5E5"> of a field declaration a getter</font>

335
00:15:47,720 --> 00:15:53,780
and a setter<font color="#E5E5E5"> and return you all the</font>

336
00:15:50,690 --> 00:15:56,930
matches<font color="#CCCCCC"> giving you the name of the</font>

337
00:15:53,780 --> 00:15:59,209
property<font color="#CCCCCC"> and the type of</font><font color="#E5E5E5"> the property so</font>

338
00:15:56,930 --> 00:16:04,280
this kind of library could<font color="#E5E5E5"> be very</font>

339
00:15:59,210 --> 00:16:05,900
useful<font color="#CCCCCC"> to recognize</font><font color="#E5E5E5"> patterns in code</font><font color="#CCCCCC"> not</font>

340
00:16:04,280 --> 00:16:08,510
<font color="#E5E5E5">of things that we are considering</font>

341
00:16:05,900 --> 00:16:10,790
working<font color="#CCCCCC"> on in east java templates</font><font color="#E5E5E5"> so the</font>

342
00:16:08,510 --> 00:16:13,670
idea is that you could define a piece of

343
00:16:10,790 --> 00:16:16,040
java code with some<font color="#CCCCCC"> placeholder and we</font>

344
00:16:13,670 --> 00:16:19,040
could be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to validate syntactically</font>

345
00:16:16,040 --> 00:16:20,930
<font color="#E5E5E5">these these templates for example the</font>

346
00:16:19,040 --> 00:16:22,550
<font color="#E5E5E5">first design the first example</font><font color="#CCCCCC"> is</font>

347
00:16:20,930 --> 00:16:24,079
correct while the second<font color="#E5E5E5"> is wrong</font>

348
00:16:22,550 --> 00:16:27,530
<font color="#CCCCCC">because you cannot</font><font color="#E5E5E5"> use an expression</font>

349
00:16:24,080 --> 00:16:32,180
there so the idea is<font color="#CCCCCC"> that this way</font><font color="#E5E5E5"> you</font>

350
00:16:27,530 --> 00:16:35,930
can<font color="#E5E5E5"> build what you can</font><font color="#CCCCCC"> add</font><font color="#E5E5E5"> templates</font>

351
00:16:32,180 --> 00:16:40,579
that you can<font color="#E5E5E5"> validate seen before using</font>

352
00:16:35,930 --> 00:16:42,620
them the final use case that<font color="#CCCCCC"> we will</font>

353
00:16:40,580 --> 00:16:45,530
love<font color="#E5E5E5"> to</font><font color="#CCCCCC"> support</font><font color="#E5E5E5"> is making Java</font>

354
00:16:42,620 --> 00:16:47,630
extensible<font color="#E5E5E5"> this is because of some</font>

355
00:16:45,530 --> 00:16:50,420
discussion<font color="#E5E5E5"> we</font><font color="#CCCCCC"> as with some researcher</font>

356
00:16:47,630 --> 00:16:53,330
<font color="#E5E5E5">and with a very large company involved</font>

357
00:16:50,420 --> 00:16:55,910
with open<font color="#E5E5E5"> source and what they need to</font>

358
00:16:53,330 --> 00:16:59,390
do is take in<font color="#E5E5E5"> Java and dad a new</font>

359
00:16:55,910 --> 00:17:01,430
statements to it<font color="#E5E5E5"> and the problem is</font><font color="#CCCCCC"> that</font>

360
00:16:59,390 --> 00:17:04,250
currently<font color="#E5E5E5"> the only way they</font><font color="#CCCCCC"> can do that</font>

361
00:17:01,430 --> 00:17:06,050
<font color="#E5E5E5">is taking an original compiler or a tool</font>

362
00:17:04,250 --> 00:17:10,160
<font color="#E5E5E5">like Java</font><font color="#CCCCCC"> parse</font><font color="#E5E5E5"> and fork it because</font>

363
00:17:06,050 --> 00:17:13,280
there is<font color="#CCCCCC"> no way to allow for extension</font>

364
00:17:10,160 --> 00:17:16,760
of<font color="#E5E5E5"> the grammar itself</font><font color="#CCCCCC"> so we are</font><font color="#E5E5E5"> looking</font>

365
00:17:13,280 --> 00:17:19,069
for better ideas and<font color="#E5E5E5"> suggestion and if</font>

366
00:17:16,760 --> 00:17:23,379
you have ideas<font color="#E5E5E5"> feel</font><font color="#CCCCCC"> free to to</font><font color="#E5E5E5"> share</font>

367
00:17:19,069 --> 00:17:26,869
them with us<font color="#E5E5E5"> and this is the last slide</font>

368
00:17:23,380 --> 00:17:29,750
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> I wanted just to</font><font color="#CCCCCC"> share this book we</font>

369
00:17:26,869 --> 00:17:32,149
have been<font color="#E5E5E5"> writing</font><font color="#CCCCCC"> that is available for</font>

370
00:17:29,750 --> 00:17:33,950
free<font color="#E5E5E5"> I mean it's possible to do a</font>

371
00:17:32,150 --> 00:17:37,580
donation<font color="#E5E5E5"> but it's possible to take it</font>

372
00:17:33,950 --> 00:17:43,070
for free<font color="#E5E5E5"> and we had</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> 1,000 readers</font>

373
00:17:37,580 --> 00:17:44,480
of this book and so<font color="#CCCCCC"> I</font><font color="#E5E5E5"> saw sauce signal</font>

374
00:17:43,070 --> 00:17:47,990
that there is some<font color="#E5E5E5"> interest in the</font>

375
00:17:44,480 --> 00:17:49,880
project<font color="#CCCCCC"> and I encourage you to</font><font color="#E5E5E5"> look</font><font color="#CCCCCC"> for</font>

376
00:17:47,990 --> 00:17:51,950
the<font color="#E5E5E5"> project on github and</font>

377
00:17:49,880 --> 00:17:54,440
open an issue<font color="#E5E5E5"> if there is something</font><font color="#CCCCCC"> that</font>

378
00:17:51,950 --> 00:17:55,640
you would<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to improve</font><font color="#E5E5E5"> so thank you</font>

379
00:17:54,440 --> 00:18:05,289
for<font color="#E5E5E5"> your attention</font>

380
00:17:55,640 --> 00:18:05,289
[Applause]

381
00:18:15,850 --> 00:18:26,120
look at comments<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> sure repeat the</font>

382
00:18:23,270 --> 00:18:27,950
question<font color="#E5E5E5"> okay it's possible</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> parts</font>

383
00:18:26,120 --> 00:18:29,780
<font color="#CCCCCC">choose source files and</font><font color="#E5E5E5"> calculate the</font>

384
00:18:27,950 --> 00:18:32,030
difference automatically the answer is

385
00:18:29,780 --> 00:18:35,420
<font color="#E5E5E5">no I can</font><font color="#CCCCCC"> parse them</font><font color="#E5E5E5"> get qu abscess</font>

386
00:18:32,030 --> 00:18:38,270
industry but we don't have<font color="#E5E5E5"> any mechanism</font>

387
00:18:35,420 --> 00:18:47,810
to<font color="#E5E5E5"> do</font><font color="#CCCCCC"> that if automatically</font><font color="#E5E5E5"> but it will</font>

388
00:18:38,270 --> 00:18:52,250
be an interesting<font color="#E5E5E5"> use case</font><font color="#CCCCCC"> but we</font><font color="#E5E5E5"> have</font>

389
00:18:47,810 --> 00:18:56,750
some error tolerance<font color="#CCCCCC"> II</font><font color="#E5E5E5"> we support</font>

390
00:18:52,250 --> 00:18:58,400
parsing<font color="#CCCCCC"> sim single pieces of the code</font><font color="#E5E5E5"> so</font>

391
00:18:56,750 --> 00:19:01,280
you can parse a single statement a

392
00:18:58,400 --> 00:19:04,250
single expression<font color="#CCCCCC"> this is done we</font><font color="#E5E5E5"> have</font>

393
00:19:01,280 --> 00:19:06,440
some error tolerance so it does<font color="#E5E5E5"> you know</font>

394
00:19:04,250 --> 00:19:09,620
the first synthetic a library shouldn't

395
00:19:06,440 --> 00:19:22,390
just explode but it's something<font color="#E5E5E5"> that</font>

396
00:19:09,620 --> 00:19:28,340
<font color="#CCCCCC">could be improved we okay do we end all</font>

397
00:19:22,390 --> 00:19:31,790
generics lambdas and then any calls<font color="#CCCCCC"> at</font>

398
00:19:28,340 --> 00:19:35,629
<font color="#CCCCCC">the parsing level</font><font color="#E5E5E5"> yes</font><font color="#CCCCCC"> 100%</font>

399
00:19:31,790 --> 00:19:39,860
and the symbol resolution<font color="#CCCCCC"> level</font><font color="#E5E5E5"> we kind</font>

400
00:19:35,630 --> 00:19:42,110
of support it<font color="#E5E5E5"> okay you are not scared by</font>

401
00:19:39,860 --> 00:19:48,830
a few bugs<font color="#E5E5E5"> here and there right if you</font>

402
00:19:42,110 --> 00:19:52,840
are not scared<font color="#CCCCCC"> then we support it yes we</font>

403
00:19:48,830 --> 00:19:55,399
yeah we parse it that's easy<font color="#CCCCCC"> Poppa</font>

404
00:19:52,840 --> 00:19:58,550
doable parts in<font color="#CCCCCC"> that symbol resolution</font>

405
00:19:55,400 --> 00:20:00,700
<font color="#E5E5E5">is</font><font color="#CCCCCC"> math very complex with lambdas and</font>

406
00:19:58,550 --> 00:20:06,960
generics

407
00:20:00,700 --> 00:20:06,960
yeah okay<font color="#CCCCCC"> times</font><font color="#E5E5E5"> up</font>

408
00:20:07,270 --> 00:20:15,230
[Applause]

