1
00:00:08,540 --> 00:00:14,219
<font color="#E5E5E5">all right so good</font><font color="#CCCCCC"> morning everyone can</font>

2
00:00:11,309 --> 00:00:15,660
start right<font color="#CCCCCC"> away to keep</font><font color="#E5E5E5"> in time</font><font color="#CCCCCC"> so this</font>

3
00:00:14,220 --> 00:00:16,710
is actually work that was done<font color="#E5E5E5"> by one of</font>

4
00:00:15,660 --> 00:00:18,300
<font color="#E5E5E5">my student</font><font color="#CCCCCC"> pagado</font>

5
00:00:16,710 --> 00:00:19,500
who did a<font color="#E5E5E5"> very great job</font><font color="#CCCCCC"> in the</font>

6
00:00:18,300 --> 00:00:22,320
<font color="#E5E5E5">implementation I really want to</font>

7
00:00:19,500 --> 00:00:24,060
advertise<font color="#E5E5E5"> this because it uses a lot</font><font color="#CCCCCC"> of</font>

8
00:00:22,320 --> 00:00:25,650
<font color="#E5E5E5">things that's been around on software</font>

9
00:00:24,060 --> 00:00:27,779
different<font color="#E5E5E5"> radios for a long time but</font>

10
00:00:25,650 --> 00:00:32,850
it's<font color="#E5E5E5"> heavily under use for the moment</font>

11
00:00:27,779 --> 00:00:34,260
which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the FPGA part of the radio</font><font color="#CCCCCC"> and</font>

12
00:00:32,850 --> 00:00:36,989
so what we're actually<font color="#E5E5E5"> going to do</font><font color="#CCCCCC"> today</font>

13
00:00:34,260 --> 00:00:40,260
is make a spectrum scanner on the

14
00:00:36,989 --> 00:00:42,899
<font color="#E5E5E5">software-defined radio platform so why</font>

15
00:00:40,260 --> 00:00:44,699
did we need to do this well it was

16
00:00:42,899 --> 00:00:46,890
<font color="#E5E5E5">originally a demand from the belgian</font>

17
00:00:44,700 --> 00:00:49,440
regulator so every<font color="#CCCCCC"> country has its</font>

18
00:00:46,890 --> 00:00:52,680
regulator which one<font color="#CCCCCC"> of its mission is</font>

19
00:00:49,440 --> 00:00:53,968
make<font color="#CCCCCC"> sure that no one</font><font color="#E5E5E5"> is transmitting on</font>

20
00:00:52,680 --> 00:00:59,430
frequency bands they're not allowed to

21
00:00:53,969 --> 00:01:01,020
<font color="#E5E5E5">all right and in our country that's in</font>

22
00:00:59,430 --> 00:01:02,940
<font color="#E5E5E5">Belgium that's a</font><font color="#CCCCCC"> bi PT who is in charge</font>

23
00:01:01,020 --> 00:01:04,410
<font color="#CCCCCC">of making sure that</font><font color="#E5E5E5"> whoever uses</font>

24
00:01:02,940 --> 00:01:08,429
spectrum has seen it paid<font color="#CCCCCC"> for it</font>

25
00:01:04,410 --> 00:01:10,080
otherwise<font color="#E5E5E5"> you get a fine so what</font><font color="#CCCCCC"> did I</font>

26
00:01:08,430 --> 00:01:11,880
<font color="#E5E5E5">want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do well they want to they have a</font>

27
00:01:10,080 --> 00:01:14,429
bunch<font color="#E5E5E5"> of technicians driving all around</font>

28
00:01:11,880 --> 00:01:16,310
Belgium on all kind of missions you<font color="#E5E5E5"> know</font>

29
00:01:14,429 --> 00:01:18,539
going in<font color="#CCCCCC"> cell antennas check antennas</font>

30
00:01:16,310 --> 00:01:20,280
<font color="#E5E5E5">whatever and they want to have something</font>

31
00:01:18,539 --> 00:01:21,450
in the<font color="#CCCCCC"> back of the van of these</font>

32
00:01:20,280 --> 00:01:23,880
technicians that's gonna run

33
00:01:21,450 --> 00:01:25,619
continuously<font color="#E5E5E5"> and do opportunistic</font>

34
00:01:23,880 --> 00:01:28,500
spectrum scanning so whenever this guy

35
00:01:25,619 --> 00:01:29,789
is driving<font color="#E5E5E5"> around there is setup running</font>

36
00:01:28,500 --> 00:01:31,740
in the back of his van that's going to

37
00:01:29,789 --> 00:01:34,830
detect all the<font color="#E5E5E5"> signals that</font><font color="#CCCCCC"> are around</font>

38
00:01:31,740 --> 00:01:36,149
<font color="#E5E5E5">and if any of</font><font color="#CCCCCC"> these signals</font><font color="#E5E5E5"> is not</font>

39
00:01:34,830 --> 00:01:40,220
supposed to be<font color="#E5E5E5"> there then it's</font><font color="#CCCCCC"> gonna</font>

40
00:01:36,149 --> 00:01:43,500
<font color="#E5E5E5">send an alert</font><font color="#CCCCCC"> to the bi</font><font color="#E5E5E5"> PT headquarters</font>

41
00:01:40,220 --> 00:01:45,360
so what are the constraints that these

42
00:01:43,500 --> 00:01:48,149
guys imposed on us well first<font color="#E5E5E5"> of all</font>

43
00:01:45,360 --> 00:01:49,950
they<font color="#E5E5E5"> want to use us RPS and</font><font color="#CCCCCC"> two-tenths</font>

44
00:01:48,149 --> 00:01:51,690
which is not the most<font color="#E5E5E5"> recent model but</font>

45
00:01:49,950 --> 00:01:54,119
they have a bunch of them lying<font color="#E5E5E5"> around</font>

46
00:01:51,690 --> 00:01:55,380
in their offices and they don't know

47
00:01:54,119 --> 00:01:59,369
what<font color="#E5E5E5"> to do with it so</font><font color="#CCCCCC"> I want to use</font>

48
00:01:55,380 --> 00:02:01,289
these ones<font color="#E5E5E5"> they want to have the host</font>

49
00:01:59,369 --> 00:02:03,450
controller to<font color="#E5E5E5"> be a single board computer</font>

50
00:02:01,289 --> 00:02:06,989
something with a<font color="#E5E5E5"> form factor of a</font>

51
00:02:03,450 --> 00:02:08,759
Raspberry Pi<font color="#CCCCCC"> so that's</font><font color="#E5E5E5"> actually posing</font>

52
00:02:06,989 --> 00:02:10,830
some constraints in terms<font color="#E5E5E5"> of computation</font>

53
00:02:08,758 --> 00:02:12,750
power if you<font color="#E5E5E5"> want to start doing a 50th</font>

54
00:02:10,830 --> 00:02:14,129
and stuff on the Raspberry Pi<font color="#E5E5E5"> you're</font>

55
00:02:12,750 --> 00:02:17,530
going to get<font color="#E5E5E5"> the dreaded overflow all</font>

56
00:02:14,129 --> 00:02:20,560
the time<font color="#E5E5E5"> so you need to somehow offloads</font>

57
00:02:17,530 --> 00:02:22,330
saying from the host controller<font color="#CCCCCC"> and they</font>

58
00:02:20,560 --> 00:02:23,740
want<font color="#E5E5E5"> to have no user intervention</font><font color="#CCCCCC"> the</font>

59
00:02:22,330 --> 00:02:25,569
guy who is<font color="#E5E5E5"> driving in the van should be</font>

60
00:02:23,740 --> 00:02:27,640
solely focused on driving<font color="#CCCCCC"> the van</font><font color="#E5E5E5"> and</font>

61
00:02:25,569 --> 00:02:32,230
not on tinkering<font color="#E5E5E5"> on the radio on the</font>

62
00:02:27,640 --> 00:02:33,880
site<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so when it comes to</font>

63
00:02:32,230 --> 00:02:35,829
spectrum scanning<font color="#E5E5E5"> this is not exactly</font>

64
00:02:33,880 --> 00:02:38,290
new there's been a lot<font color="#CCCCCC"> of code rounds</font>

65
00:02:35,830 --> 00:02:40,900
<font color="#CCCCCC">just listed a few I could see here</font>

66
00:02:38,290 --> 00:02:43,150
that's what is<font color="#E5E5E5"> the main</font><font color="#CCCCCC"> mutations with</font>

67
00:02:40,900 --> 00:02:44,590
all of these codes or at least all the

68
00:02:43,150 --> 00:02:46,510
one I know of

69
00:02:44,590 --> 00:02:48,130
well first one is<font color="#E5E5E5"> very off on the</font>

70
00:02:46,510 --> 00:02:50,410
scanning bandwidth is<font color="#CCCCCC"> limited to the</font>

71
00:02:48,130 --> 00:02:53,109
bandwidth of the<font color="#CCCCCC"> USR p4n to ten that's</font>

72
00:02:50,410 --> 00:02:54,700
ten megahertz<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so we are</font>

73
00:02:53,110 --> 00:02:57,850
<font color="#CCCCCC">talking about scanning hundreds of</font>

74
00:02:54,700 --> 00:02:59,350
megahertz maybe even<font color="#CCCCCC"> gigahertz</font><font color="#E5E5E5"> the</font>

75
00:02:57,850 --> 00:03:01,540
second problem is<font color="#CCCCCC"> that most</font><font color="#E5E5E5"> of these</font>

76
00:02:59,350 --> 00:03:04,720
<font color="#CCCCCC">solutions for all of them are software</font>

77
00:03:01,540 --> 00:03:07,090
based<font color="#E5E5E5"> all right and if you want to do</font>

78
00:03:04,720 --> 00:03:09,760
<font color="#E5E5E5">something that</font><font color="#CCCCCC"> sort of</font><font color="#E5E5E5"> real-time on</font>

79
00:03:07,090 --> 00:03:11,410
something like a<font color="#CCCCCC"> raspberry pi then it's</font>

80
00:03:09,760 --> 00:03:12,670
gonna run very slowly<font color="#CCCCCC"> all right you're</font>

81
00:03:11,410 --> 00:03:14,980
<font color="#E5E5E5">not gonna be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be the fully in</font>

82
00:03:12,670 --> 00:03:16,600
software<font color="#E5E5E5"> and that's why we go</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

83
00:03:14,980 --> 00:03:18,700
FPGA<font color="#E5E5E5"> part all right</font>

84
00:03:16,600 --> 00:03:21,910
there's been some effort<font color="#E5E5E5"> on the FPGA</font>

85
00:03:18,700 --> 00:03:24,190
front<font color="#E5E5E5"> especially with new radio</font><font color="#CCCCCC"> ARF</font>

86
00:03:21,910 --> 00:03:26,769
knock well one of the problems<font color="#CCCCCC"> is with</font>

87
00:03:24,190 --> 00:03:28,570
<font color="#E5E5E5">this model of us our PE RF knock is not</font>

88
00:03:26,769 --> 00:03:30,519
backwards<font color="#CCCCCC"> compatible so you</font><font color="#E5E5E5"> have to kind</font>

89
00:03:28,570 --> 00:03:34,150
of dig in the<font color="#CCCCCC"> fpga code which</font>

90
00:03:30,519 --> 00:03:39,100
fortunately is available online<font color="#E5E5E5"> and do</font>

91
00:03:34,150 --> 00:03:41,709
the<font color="#E5E5E5"> tinkering yourself</font><font color="#CCCCCC"> all right so</font><font color="#E5E5E5"> talk</font>

92
00:03:39,100 --> 00:03:43,120
<font color="#E5E5E5">is gonna be structures as</font><font color="#CCCCCC"> fellow</font><font color="#E5E5E5"> first</font>

93
00:03:41,709 --> 00:03:45,940
<font color="#E5E5E5">general introduction about what</font><font color="#CCCCCC"> the</font>

94
00:03:43,120 --> 00:03:48,100
<font color="#E5E5E5">system looks like from the outside</font><font color="#CCCCCC"> a bit</font>

95
00:03:45,940 --> 00:03:50,170
of details about<font color="#CCCCCC"> FPGA a bit of details</font>

96
00:03:48,100 --> 00:03:51,820
about<font color="#E5E5E5"> software and then if everything</font>

97
00:03:50,170 --> 00:03:56,980
<font color="#E5E5E5">works</font><font color="#CCCCCC"> well hopefully</font><font color="#E5E5E5"> a demonstration</font>

98
00:03:51,820 --> 00:04:01,209
show how well it works all right<font color="#CCCCCC"> so who</font>

99
00:03:56,980 --> 00:04:03,010
here is a bit<font color="#CCCCCC"> familiar</font><font color="#E5E5E5"> with FPGAs right</font>

100
00:04:01,209 --> 00:04:06,160
that's roughly<font color="#E5E5E5"> half of the room so I'm</font>

101
00:04:03,010 --> 00:04:08,048
gonna go one<font color="#CCCCCC"> slide version of what an</font>

102
00:04:06,160 --> 00:04:10,030
FPGA is and how it's different<font color="#E5E5E5"> from</font><font color="#CCCCCC"> my</font>

103
00:04:08,049 --> 00:04:12,010
controller right if you have a

104
00:04:10,030 --> 00:04:13,989
<font color="#CCCCCC">microcontroller you remember</font><font color="#E5E5E5"> for from</font>

105
00:04:12,010 --> 00:04:16,120
computer<font color="#CCCCCC"> engineering 101</font><font color="#E5E5E5"> that you have</font>

106
00:04:13,989 --> 00:04:19,829
<font color="#E5E5E5">something like this you</font><font color="#CCCCCC"> have a CPU which</font>

107
00:04:16,120 --> 00:04:22,240
can do typically about<font color="#E5E5E5"> few dozens of</font>

108
00:04:19,829 --> 00:04:23,530
elementary operations<font color="#CCCCCC"> all right so</font>

109
00:04:22,240 --> 00:04:26,560
<font color="#CCCCCC">whenever you write your high-level</font>

110
00:04:23,530 --> 00:04:28,239
language<font color="#E5E5E5"> source code you compile it</font><font color="#CCCCCC"> it's</font>

111
00:04:26,560 --> 00:04:30,070
<font color="#CCCCCC">going to make a long list</font><font color="#E5E5E5"> of micro</font>

112
00:04:28,240 --> 00:04:31,420
instructions which gonna mean yeah it's

113
00:04:30,070 --> 00:04:34,510
acute it one by one

114
00:04:31,420 --> 00:04:36,640
by your<font color="#E5E5E5"> CPU</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right the crux being</font>

115
00:04:34,510 --> 00:04:38,320
that if<font color="#E5E5E5"> you have codes that need to do a</font>

116
00:04:36,640 --> 00:04:41,710
lot of operation it's just going to<font color="#E5E5E5"> take</font>

117
00:04:38,320 --> 00:04:46,300
a longer<font color="#CCCCCC"> time to execute so</font><font color="#E5E5E5"> nephew</font><font color="#CCCCCC"> G</font><font color="#E5E5E5"> is</font>

118
00:04:41,710 --> 00:04:48,400
different<font color="#E5E5E5"> how well an FPGA is made of a</font>

119
00:04:46,300 --> 00:04:51,340
whole<font color="#CCCCCC"> bunch of small</font><font color="#E5E5E5"> elementary blocks</font>

120
00:04:48,400 --> 00:04:53,229
<font color="#E5E5E5">right</font><font color="#CCCCCC"> and each</font><font color="#E5E5E5"> of these blocks can</font>

121
00:04:51,340 --> 00:04:56,349
<font color="#E5E5E5">implement just handful of logic</font>

122
00:04:53,230 --> 00:04:58,780
functions and FPGA<font color="#E5E5E5"> programming is</font>

123
00:04:56,350 --> 00:05:00,760
essentially connecting deciding how you

124
00:04:58,780 --> 00:05:02,919
want<font color="#E5E5E5"> to connect</font><font color="#CCCCCC"> those blocks to be able</font>

125
00:05:00,760 --> 00:05:06,670
<font color="#CCCCCC">to do</font><font color="#E5E5E5"> more complex</font><font color="#CCCCCC"> operations to</font><font color="#E5E5E5"> be able</font>

126
00:05:02,920 --> 00:05:11,740
<font color="#CCCCCC">to do more complex computations or yeah</font>

127
00:05:06,670 --> 00:05:13,600
<font color="#E5E5E5">more complex processing all right so you</font>

128
00:05:11,740 --> 00:05:15,040
basically decide<font color="#E5E5E5"> which blocks are</font>

129
00:05:13,600 --> 00:05:19,300
connected<font color="#CCCCCC"> to which other blocks and how</font>

130
00:05:15,040 --> 00:05:20,920
these are<font color="#CCCCCC"> connected now when you write</font>

131
00:05:19,300 --> 00:05:23,170
when<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to work with the feejee</font>

132
00:05:20,920 --> 00:05:25,290
you typically<font color="#CCCCCC"> write I'm gonna say</font><font color="#E5E5E5"> high</font>

133
00:05:23,170 --> 00:05:27,430
<font color="#E5E5E5">level language which is VHDL or</font><font color="#CCCCCC"> Verilog</font>

134
00:05:25,290 --> 00:05:29,020
<font color="#CCCCCC">these are really</font><font color="#E5E5E5"> hardware description</font>

135
00:05:27,430 --> 00:05:31,180
languages and there are actually much

136
00:05:29,020 --> 00:05:34,479
lower level and<font color="#CCCCCC"> C so it's you know</font>

137
00:05:31,180 --> 00:05:38,170
really still step below<font color="#E5E5E5"> C programming</font>

138
00:05:34,480 --> 00:05:41,380
<font color="#E5E5E5">and the big limitation</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you have in</font>

139
00:05:38,170 --> 00:05:43,360
FPGA<font color="#E5E5E5"> is the size of your FPGA if you</font>

140
00:05:41,380 --> 00:05:45,490
want to do a lot of operations<font color="#CCCCCC"> you need</font>

141
00:05:43,360 --> 00:05:46,870
<font color="#E5E5E5">to have a lot of logic functions and</font>

142
00:05:45,490 --> 00:05:49,360
eventually you're going to run<font color="#CCCCCC"> out of</font>

143
00:05:46,870 --> 00:05:51,670
<font color="#E5E5E5">these logic blocks</font><font color="#CCCCCC"> it's so that's the</font>

144
00:05:49,360 --> 00:05:53,530
main limitation of your<font color="#E5E5E5"> FPGA if you want</font>

145
00:05:51,670 --> 00:05:58,420
to do a lot of operation and you run<font color="#E5E5E5"> out</font>

146
00:05:53,530 --> 00:06:01,150
of<font color="#E5E5E5"> space</font><font color="#CCCCCC"> you need a bigger</font><font color="#E5E5E5"> FPGA all</font>

147
00:05:58,420 --> 00:06:03,910
right so what's what about the PGA's on

148
00:06:01,150 --> 00:06:07,690
the USRP well there is an<font color="#E5E5E5"> FPGA on the</font><font color="#CCCCCC"> n2</font>

149
00:06:03,910 --> 00:06:09,970
<font color="#CCCCCC">10 it does a bunch of elementary things</font>

150
00:06:07,690 --> 00:06:12,610
that are required<font color="#CCCCCC"> for</font><font color="#E5E5E5"> receiving and</font>

151
00:06:09,970 --> 00:06:14,620
transmitting signals<font color="#CCCCCC"> but if you look at</font>

152
00:06:12,610 --> 00:06:16,570
the hardware<font color="#E5E5E5"> resources</font><font color="#CCCCCC"> so this is all</font>

153
00:06:14,620 --> 00:06:18,490
<font color="#E5E5E5">the hardware resources</font><font color="#CCCCCC"> of the FPGA you</font>

154
00:06:16,570 --> 00:06:20,830
can see that they're still quite some

155
00:06:18,490 --> 00:06:22,510
space available we're using<font color="#E5E5E5"> anywhere</font>

156
00:06:20,830 --> 00:06:24,580
between 20 and 80<font color="#CCCCCC"> percent of some</font>

157
00:06:22,510 --> 00:06:26,200
resources but<font color="#CCCCCC"> the lis that means there</font>

158
00:06:24,580 --> 00:06:32,380
<font color="#E5E5E5">is still some space left</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> add your</font>

159
00:06:26,200 --> 00:06:34,450
custom blocks in between so going<font color="#E5E5E5"> back</font>

160
00:06:32,380 --> 00:06:38,590
<font color="#E5E5E5">to spectrum scanning what do we want to</font>

161
00:06:34,450 --> 00:06:41,080
do on the in our system well this is

162
00:06:38,590 --> 00:06:42,960
basically<font color="#CCCCCC"> your us our PE you get your RF</font>

163
00:06:41,080 --> 00:06:45,539
signal you don't convert it

164
00:06:42,960 --> 00:06:47,849
to the ADC and then we want to<font color="#E5E5E5"> do in</font><font color="#CCCCCC"> 15</font>

165
00:06:45,539 --> 00:06:50,340
<font color="#E5E5E5">take the square magnitude</font><font color="#CCCCCC"> of a 50 and</font>

166
00:06:47,850 --> 00:06:52,229
<font color="#E5E5E5">then for each frequency bin see whether</font>

167
00:06:50,340 --> 00:06:54,119
it's higher or<font color="#E5E5E5"> lower</font><font color="#CCCCCC"> than a given</font>

168
00:06:52,229 --> 00:06:55,650
<font color="#E5E5E5">threshold</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right if it's higher there</font>

169
00:06:54,120 --> 00:06:58,500
is<font color="#CCCCCC"> a signal if it's lower there is no</font>

170
00:06:55,650 --> 00:07:00,750
signal we sent the result of the host

171
00:06:58,500 --> 00:07:02,789
controller and the host controller is

172
00:07:00,750 --> 00:07:04,860
then gonna check with<font color="#E5E5E5"> database or just</font>

173
00:07:02,789 --> 00:07:07,680
<font color="#CCCCCC">post</font><font color="#E5E5E5"> process it or store it for offline</font>

174
00:07:04,860 --> 00:07:09,180
processing the second<font color="#E5E5E5"> task of the host</font>

175
00:07:07,680 --> 00:07:11,520
controller is also<font color="#CCCCCC"> to retune the</font>

176
00:07:09,180 --> 00:07:13,710
<font color="#CCCCCC">front-end all</font><font color="#E5E5E5"> right we want to scan our</font>

177
00:07:11,520 --> 00:07:20,099
newsmaker so you need to retune<font color="#E5E5E5"> the</font>

178
00:07:13,710 --> 00:07:23,400
carrier frequency<font color="#CCCCCC"> every so often alright</font>

179
00:07:20,099 --> 00:07:26,759
<font color="#E5E5E5">so going into a bit of detail</font><font color="#CCCCCC"> so by the</font>

180
00:07:23,400 --> 00:07:29,039
way all the very<font color="#CCCCCC"> low-level</font><font color="#E5E5E5"> details</font>

181
00:07:26,759 --> 00:07:30,780
already regardless<font color="#E5E5E5"> thesis which I put on</font>

182
00:07:29,039 --> 00:07:33,180
<font color="#CCCCCC">a false time webpage so if you're really</font>

183
00:07:30,780 --> 00:07:34,739
if you're interested<font color="#E5E5E5"> in going to really</font>

184
00:07:33,180 --> 00:07:37,020
fine details<font color="#CCCCCC"> already modifying the code</font>

185
00:07:34,740 --> 00:07:39,330
I suggest you take his thesis<font color="#CCCCCC"> it's very</font>

186
00:07:37,020 --> 00:07:42,630
complete and<font color="#E5E5E5"> he</font><font color="#CCCCCC"> explained every single</font>

187
00:07:39,330 --> 00:07:46,318
wire that's that's been implemented<font color="#E5E5E5"> in</font>

188
00:07:42,630 --> 00:07:48,870
the FPGA design so if you<font color="#CCCCCC"> GI design is</font>

189
00:07:46,319 --> 00:07:50,970
<font color="#E5E5E5">basically composed of four blocks the</font>

190
00:07:48,870 --> 00:07:53,370
first<font color="#E5E5E5"> one a 50 second one taking square</font>

191
00:07:50,970 --> 00:07:54,960
<font color="#CCCCCC">magnitude then the energy detection and</font>

192
00:07:53,370 --> 00:07:58,680
then<font color="#E5E5E5"> a data</font><font color="#CCCCCC"> sink model which I will come</font>

193
00:07:54,960 --> 00:08:00,210
<font color="#E5E5E5">back to so the key point of FPGA is is</font>

194
00:07:58,680 --> 00:08:01,500
that all<font color="#E5E5E5"> these</font><font color="#CCCCCC"> things are working</font><font color="#E5E5E5"> in</font>

195
00:08:00,210 --> 00:08:03,180
<font color="#E5E5E5">parallel</font><font color="#CCCCCC"> right</font>

196
00:08:01,500 --> 00:08:05,039
unlike a microcontroller<font color="#E5E5E5"> which is first</font>

197
00:08:03,180 --> 00:08:07,110
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to do the FFT</font><font color="#E5E5E5"> then do this then do</font>

198
00:08:05,039 --> 00:08:09,240
this then do this in an FPGA<font color="#E5E5E5"> all these</font>

199
00:08:07,110 --> 00:08:10,380
things happen in parallel<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so</font>

200
00:08:09,240 --> 00:08:14,270
that's<font color="#E5E5E5"> where you get the big speed</font>

201
00:08:10,380 --> 00:08:17,820
improvement so each input<font color="#E5E5E5"> and output has</font>

202
00:08:14,270 --> 00:08:19,349
well each module has two inputs and<font color="#E5E5E5"> two</font>

203
00:08:17,820 --> 00:08:21,389
outputs one for the actual<font color="#CCCCCC"> data</font>

204
00:08:19,349 --> 00:08:23,400
streaming<font color="#CCCCCC"> true and one</font><font color="#E5E5E5"> that's just a</font>

205
00:08:21,389 --> 00:08:24,810
control<font color="#E5E5E5"> signal that indicates the next</font>

206
00:08:23,400 --> 00:08:27,810
block whether<font color="#CCCCCC"> a data is</font><font color="#E5E5E5"> valid or not</font>

207
00:08:24,810 --> 00:08:30,690
<font color="#CCCCCC">alright so this is fairly standard in</font>

208
00:08:27,810 --> 00:08:33,120
FPGA<font color="#E5E5E5"> design and we have two versions</font><font color="#CCCCCC"> of</font>

209
00:08:30,690 --> 00:08:36,510
this energy detection block which I will

210
00:08:33,120 --> 00:08:37,979
come back to a bit later so I'm not

211
00:08:36,510 --> 00:08:39,450
going<font color="#E5E5E5"> to go to the internals of each</font>

212
00:08:37,979 --> 00:08:41,099
block because you know it takes way too

213
00:08:39,450 --> 00:08:42,899
much time<font color="#CCCCCC"> and the screen resolution is</font>

214
00:08:41,099 --> 00:08:44,700
just<font color="#E5E5E5"> not fine enough</font><font color="#CCCCCC"> to show every wire</font>

215
00:08:42,899 --> 00:08:45,990
<font color="#E5E5E5">that you have in there so I'm just going</font>

216
00:08:44,700 --> 00:08:48,779
<font color="#E5E5E5">to give a few of the key elements that</font>

217
00:08:45,990 --> 00:08:51,089
we use in each block<font color="#E5E5E5"> so the first one</font><font color="#CCCCCC"> is</font>

218
00:08:48,779 --> 00:08:54,779
the FFT so that's probably most critical

219
00:08:51,089 --> 00:08:56,250
one<font color="#CCCCCC"> give a T block thus 2024 point 50</font>

220
00:08:54,779 --> 00:08:57,040
and that's fixed<font color="#E5E5E5"> that's not something</font>

221
00:08:56,250 --> 00:08:58,389
you can<font color="#E5E5E5"> chain</font>

222
00:08:57,040 --> 00:09:00,160
so if you want<font color="#E5E5E5"> to change the resolution</font>

223
00:08:58,389 --> 00:09:02,079
you<font color="#E5E5E5"> have in frequency you have to change</font>

224
00:09:00,160 --> 00:09:04,600
the USRP sample rate<font color="#CCCCCC"> all right</font>

225
00:09:02,079 --> 00:09:08,589
the size of the<font color="#E5E5E5"> GP is fixed for</font>

226
00:09:04,600 --> 00:09:09,910
<font color="#E5E5E5">practical reasons in this case</font><font color="#CCCCCC"> the</font>

227
00:09:08,589 --> 00:09:11,949
second<font color="#E5E5E5"> block is</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> taking square</font>

228
00:09:09,910 --> 00:09:14,709
magnitude<font color="#E5E5E5"> of each frequency bin very</font>

229
00:09:11,949 --> 00:09:16,389
easy to<font color="#CCCCCC"> multiplication one addition</font><font color="#E5E5E5"> in</font>

230
00:09:14,709 --> 00:09:18,160
FPGA you can do this in hardware<font color="#CCCCCC"> and it</font>

231
00:09:16,389 --> 00:09:19,480
takes three clock<font color="#CCCCCC"> cycles in</font>

232
00:09:18,160 --> 00:09:22,899
microcontroller this would typically

233
00:09:19,480 --> 00:09:28,119
take several<font color="#E5E5E5"> dozens of clock cycles</font><font color="#CCCCCC"> in</font>

234
00:09:22,899 --> 00:09:30,429
the<font color="#CCCCCC"> best</font><font color="#E5E5E5"> case all right so the</font><font color="#CCCCCC"> next big</font>

235
00:09:28,119 --> 00:09:32,079
block is the energy detection<font color="#CCCCCC"> modules so</font>

236
00:09:30,429 --> 00:09:33,488
basically this block implements<font color="#E5E5E5"> the</font>

237
00:09:32,079 --> 00:09:36,040
following equation you're going<font color="#CCCCCC"> to take</font>

238
00:09:33,489 --> 00:09:37,809
the<font color="#CCCCCC"> energy of a certain</font><font color="#E5E5E5"> amount of</font>

239
00:09:36,040 --> 00:09:39,579
frequency bins<font color="#E5E5E5"> and you're going to</font>

240
00:09:37,809 --> 00:09:40,988
compare<font color="#E5E5E5"> it</font><font color="#CCCCCC"> with a threshold all</font><font color="#E5E5E5"> right so</font>

241
00:09:39,579 --> 00:09:42,670
if<font color="#E5E5E5"> you have an</font><font color="#CCCCCC"> endpoint</font><font color="#E5E5E5"> of 50 you're</font>

242
00:09:40,989 --> 00:09:44,529
going to<font color="#E5E5E5"> look at the size M sub window</font>

243
00:09:42,670 --> 00:09:48,389
and you can change this<font color="#CCCCCC"> M from the</font>

244
00:09:44,529 --> 00:09:50,439
software<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so this allows you to</font>

245
00:09:48,389 --> 00:09:52,119
consider<font color="#E5E5E5"> a different type of signal</font>

246
00:09:50,439 --> 00:09:53,349
whether<font color="#E5E5E5"> you're considering CDMA signals</font>

247
00:09:52,119 --> 00:09:55,779
<font color="#E5E5E5">that might have five megahertz of</font>

248
00:09:53,350 --> 00:09:58,420
bandwidth or FM signals<font color="#CCCCCC"> does have much</font>

249
00:09:55,779 --> 00:10:01,230
<font color="#E5E5E5">lower bandwidth and we have two versions</font>

250
00:09:58,420 --> 00:10:04,149
<font color="#CCCCCC">of</font><font color="#E5E5E5"> this block and you know two</font><font color="#CCCCCC"> different</font>

251
00:10:01,230 --> 00:10:05,799
<font color="#E5E5E5">FPGA images one where you have a fixed</font>

252
00:10:04,149 --> 00:10:07,749
<font color="#E5E5E5">threshold where you just set this lambda</font>

253
00:10:05,799 --> 00:10:10,839
manually and one where you have a

254
00:10:07,749 --> 00:10:12,730
<font color="#CCCCCC">semi-automated threshold which takes</font>

255
00:10:10,839 --> 00:10:14,559
into<font color="#E5E5E5"> account the overall energy in the</font>

256
00:10:12,730 --> 00:10:16,660
band so I'm not going<font color="#CCCCCC"> into the details</font>

257
00:10:14,559 --> 00:10:18,639
of this equation but the key point is

258
00:10:16,660 --> 00:10:20,290
that<font color="#E5E5E5"> it makes it much more robust to</font>

259
00:10:18,639 --> 00:10:21,790
noise spikes<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right if you have big</font>

260
00:10:20,290 --> 00:10:27,009
noise spike<font color="#E5E5E5"> it's not going to be</font>

261
00:10:21,790 --> 00:10:28,689
detected as a signal<font color="#E5E5E5"> all right</font>

262
00:10:27,009 --> 00:10:32,740
and the<font color="#E5E5E5"> last block that we have in the</font>

263
00:10:28,689 --> 00:10:34,299
<font color="#E5E5E5">FPGAs data synchronizer module</font><font color="#CCCCCC"> so the</font>

264
00:10:32,740 --> 00:10:35,860
key idea<font color="#E5E5E5"> is that in these</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> blocks</font>

265
00:10:34,299 --> 00:10:38,350
we mess up<font color="#E5E5E5"> the signals and the timing of</font>

266
00:10:35,860 --> 00:10:39,610
<font color="#E5E5E5">its sales</font><font color="#CCCCCC"> bit and this</font><font color="#E5E5E5"> block is</font>

267
00:10:38,350 --> 00:10:41,169
basically going to readapt

268
00:10:39,610 --> 00:10:42,819
the signals and<font color="#CCCCCC"> especially in time</font>

269
00:10:41,169 --> 00:10:45,399
inverse signals<font color="#E5E5E5"> to what we had at the</font>

270
00:10:42,819 --> 00:10:47,498
input and the big advantage of<font color="#E5E5E5"> this is</font>

271
00:10:45,399 --> 00:10:50,439
<font color="#E5E5E5">that we don't need to</font><font color="#CCCCCC"> rewrite all the</font>

272
00:10:47,499 --> 00:10:52,299
drivers<font color="#E5E5E5"> of the USRP all right we're</font>

273
00:10:50,439 --> 00:10:55,089
<font color="#CCCCCC">mostly electronic</font><font color="#E5E5E5"> engineers in my lab</font>

274
00:10:52,299 --> 00:10:58,299
we're not that much<font color="#CCCCCC"> software</font><font color="#E5E5E5"> wizards so</font>

275
00:10:55,089 --> 00:11:00,790
we don't want to mess too much with with

276
00:10:58,299 --> 00:11:04,590
<font color="#E5E5E5">the drivers</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> and this block allows</font>

277
00:11:00,790 --> 00:11:06,569
us to just<font color="#E5E5E5"> leave everything standards</font>

278
00:11:04,590 --> 00:11:09,750
the<font color="#E5E5E5"> only constraints that we have</font>

279
00:11:06,570 --> 00:11:12,180
because<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that is that the</font><font color="#CCCCCC"> ratio</font>

280
00:11:09,750 --> 00:11:14,430
between<font color="#E5E5E5"> the</font><font color="#CCCCCC"> USRP sample rates and the</font>

281
00:11:12,180 --> 00:11:16,859
clock rate of the<font color="#E5E5E5"> FPGA which is fixed to</font>

282
00:11:14,430 --> 00:11:20,189
<font color="#CCCCCC">100 megahertz should be integer value</font>

283
00:11:16,860 --> 00:11:22,170
<font color="#CCCCCC">all right you can you can set 1</font><font color="#E5E5E5"> 2 5</font><font color="#CCCCCC"> 10</font>

284
00:11:20,190 --> 00:11:26,610
measures we can<font color="#E5E5E5"> not set three point two</font>

285
00:11:22,170 --> 00:11:28,380
<font color="#E5E5E5">megahertz for example all right so let's</font>

286
00:11:26,610 --> 00:11:30,870
take<font color="#E5E5E5"> a bit at let's look a bit</font><font color="#CCCCCC"> at</font>

287
00:11:28,380 --> 00:11:33,120
resource usage<font color="#E5E5E5"> so this was the default</font>

288
00:11:30,870 --> 00:11:35,339
<font color="#CCCCCC">FPGA image you could see what we had in</font>

289
00:11:33,120 --> 00:11:37,350
<font color="#E5E5E5">terms of hardware resources and you can</font>

290
00:11:35,339 --> 00:11:39,900
see that the two versions of<font color="#E5E5E5"> our image</font>

291
00:11:37,350 --> 00:11:41,460
<font color="#E5E5E5">just add a handful of percents to each</font>

292
00:11:39,900 --> 00:11:45,630
of these resources<font color="#CCCCCC"> so we still have</font>

293
00:11:41,460 --> 00:11:47,490
<font color="#E5E5E5">we've been quite quite economical</font><font color="#CCCCCC"> on the</font>

294
00:11:45,630 --> 00:11:49,740
resource usage we can still add a bunch

295
00:11:47,490 --> 00:11:52,050
of things<font color="#E5E5E5"> so typically in real spectrum</font>

296
00:11:49,740 --> 00:11:53,910
scanner you<font color="#CCCCCC"> also have I have filters</font>

297
00:11:52,050 --> 00:11:55,529
that<font color="#E5E5E5"> you put at the front so we still</font>

298
00:11:53,910 --> 00:12:00,600
have<font color="#E5E5E5"> some space to add those blocks in</font>

299
00:11:55,529 --> 00:12:02,460
here<font color="#CCCCCC"> alright so</font><font color="#E5E5E5"> moving on</font><font color="#CCCCCC"> to the</font>

300
00:12:00,600 --> 00:12:05,250
software<font color="#E5E5E5"> some the software is actually</font>

301
00:12:02,460 --> 00:12:07,200
<font color="#E5E5E5">very very</font><font color="#CCCCCC"> simple right</font><font color="#E5E5E5"> it's very</font>

302
00:12:05,250 --> 00:12:09,810
<font color="#CCCCCC">lightweight</font><font color="#E5E5E5"> because it needs to run on a</font>

303
00:12:07,200 --> 00:12:11,580
single<font color="#CCCCCC"> board computer and it does very</font>

304
00:12:09,810 --> 00:12:12,719
little<font color="#E5E5E5"> things but it needs to do those</font>

305
00:12:11,580 --> 00:12:16,890
<font color="#CCCCCC">things very well so I'm just</font><font color="#E5E5E5"> going to</font>

306
00:12:12,720 --> 00:12:18,360
give a few<font color="#E5E5E5"> a few examples of</font><font color="#CCCCCC"> low-level</font>

307
00:12:16,890 --> 00:12:21,630
commands that we have<font color="#E5E5E5"> used that are</font>

308
00:12:18,360 --> 00:12:24,780
maybe not not so well known<font color="#E5E5E5"> in the</font>

309
00:12:21,630 --> 00:12:27,450
community<font color="#E5E5E5"> so the first one</font><font color="#CCCCCC"> is how to set</font>

310
00:12:24,780 --> 00:12:29,370
an FPGA registers<font color="#E5E5E5"> from the software side</font>

311
00:12:27,450 --> 00:12:31,770
so<font color="#CCCCCC"> there is actually</font><font color="#E5E5E5"> commands in the</font><font color="#CCCCCC"> UHD</font>

312
00:12:29,370 --> 00:12:34,410
drivers allow you to do that<font color="#E5E5E5"> very simple</font>

313
00:12:31,770 --> 00:12:36,800
<font color="#E5E5E5">very easy to</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> the second command</font>

314
00:12:34,410 --> 00:12:39,180
we're going to use quite<font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot is</font>

315
00:12:36,800 --> 00:12:41,609
setting the command time<font color="#E5E5E5"> so you can</font>

316
00:12:39,180 --> 00:12:43,800
specify<font color="#E5E5E5"> at which time in the future</font><font color="#CCCCCC"> a</font>

317
00:12:41,610 --> 00:12:45,150
certain<font color="#E5E5E5"> command should take</font><font color="#CCCCCC"> place for</font>

318
00:12:43,800 --> 00:12:47,310
<font color="#CCCCCC">example if you want to</font><font color="#E5E5E5"> set</font><font color="#CCCCCC"> carrier</font>

319
00:12:45,150 --> 00:12:49,410
<font color="#CCCCCC">frequency you want to change it exactly</font>

320
00:12:47,310 --> 00:12:51,839
<font color="#CCCCCC">one</font><font color="#E5E5E5"> millisecond from now you can use</font>

321
00:12:49,410 --> 00:12:54,569
this set command time to do that<font color="#CCCCCC"> all</font>

322
00:12:51,839 --> 00:12:56,640
<font color="#E5E5E5">right</font><font color="#CCCCCC"> so this allows you</font><font color="#E5E5E5"> to change the</font>

323
00:12:54,570 --> 00:13:02,390
carrier frequency in a very very regular

324
00:12:56,640 --> 00:13:05,250
<font color="#E5E5E5">intervals</font><font color="#CCCCCC"> alright so this is basically</font>

325
00:13:02,390 --> 00:13:06,330
what<font color="#CCCCCC"> the software does alright as you</font>

326
00:13:05,250 --> 00:13:08,100
<font color="#CCCCCC">can</font><font color="#E5E5E5"> see it's very simple</font>

327
00:13:06,330 --> 00:13:10,290
<font color="#CCCCCC">you're infinite loop it here you're</font>

328
00:13:08,100 --> 00:13:11,880
<font color="#CCCCCC">basically going</font><font color="#E5E5E5"> to receive sample reset</font>

329
00:13:10,290 --> 00:13:14,250
the carrier frequency<font color="#E5E5E5"> if you're sweeping</font>

330
00:13:11,880 --> 00:13:17,490
<font color="#E5E5E5">over a wider bandwidth and I receive</font>

331
00:13:14,250 --> 00:13:20,470
sample again<font color="#E5E5E5"> and so on the only</font>

332
00:13:17,490 --> 00:13:22,390
smart thing that we do here<font color="#E5E5E5"> exactly</font>

333
00:13:20,470 --> 00:13:25,150
sending a bunch<font color="#E5E5E5"> of commands in advance</font>

334
00:13:22,390 --> 00:13:28,180
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> USRP so if for some reason your</font>

335
00:13:25,150 --> 00:13:30,400
host lags a bit<font color="#CCCCCC"> the</font><font color="#E5E5E5"> USRP knows what to</font>

336
00:13:28,180 --> 00:13:32,500
do for the next<font color="#E5E5E5"> immediate few</font>

337
00:13:30,400 --> 00:13:36,370
milliseconds<font color="#CCCCCC"> alright so that allows</font><font color="#E5E5E5"> your</font>

338
00:13:32,500 --> 00:13:38,650
host to catch up a bit<font color="#E5E5E5"> and when we're</font>

339
00:13:36,370 --> 00:13:41,530
<font color="#CCCCCC">running it with a standard laptop so</font>

340
00:13:38,650 --> 00:13:43,689
this is you know<font color="#CCCCCC"> four four gig of ram</font>

341
00:13:41,530 --> 00:13:46,480
<font color="#E5E5E5">stuff</font><font color="#CCCCCC"> like that so nothing too fancy</font>

342
00:13:43,690 --> 00:13:48,250
<font color="#CCCCCC">we're able to scan 1 gigahertz in 250</font>

343
00:13:46,480 --> 00:13:50,200
milliseconds<font color="#E5E5E5"> without running into any</font>

344
00:13:48,250 --> 00:13:51,550
overflow problems right and this is

345
00:13:50,200 --> 00:13:54,640
continuously so we can leave it on for

346
00:13:51,550 --> 00:13:58,449
half an hour<font color="#E5E5E5"> and no problems on</font><font color="#CCCCCC"> that</font>

347
00:13:54,640 --> 00:14:03,819
front<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so I'm running a bits</font>

348
00:13:58,450 --> 00:14:06,820
<font color="#E5E5E5">heads that's good so we also have small</font>

349
00:14:03,820 --> 00:14:08,620
GUI it's<font color="#E5E5E5"> just for field testing you want</font>

350
00:14:06,820 --> 00:14:10,390
to first verify<font color="#E5E5E5"> that all your settings</font>

351
00:14:08,620 --> 00:14:12,640
<font color="#E5E5E5">are done</font><font color="#CCCCCC"> well that your antenna is</font>

352
00:14:10,390 --> 00:14:15,220
connected<font color="#CCCCCC"> properly</font><font color="#E5E5E5"> things like that so</font>

353
00:14:12,640 --> 00:14:16,630
there is a very<font color="#E5E5E5"> lightweight UI it looks</font>

354
00:14:15,220 --> 00:14:17,950
like this we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> see it later in</font>

355
00:14:16,630 --> 00:14:19,090
<font color="#E5E5E5">the</font><font color="#CCCCCC"> demo you</font><font color="#E5E5E5"> have your frequency</font>

356
00:14:17,950 --> 00:14:20,920
spectrum and<font color="#E5E5E5"> then here you have</font><font color="#CCCCCC"> a</font>

357
00:14:19,090 --> 00:14:23,470
<font color="#E5E5E5">detection result a</font><font color="#CCCCCC"> zero there is</font><font color="#E5E5E5"> no</font>

358
00:14:20,920 --> 00:14:26,110
<font color="#E5E5E5">signal</font><font color="#CCCCCC"> 1 if your</font><font color="#E5E5E5"> signal and both</font><font color="#CCCCCC"> of</font>

359
00:14:23,470 --> 00:14:28,420
these<font color="#E5E5E5"> both of these results are written</font>

360
00:14:26,110 --> 00:14:31,330
to<font color="#E5E5E5"> identify so currently</font><font color="#CCCCCC"> it data file</font><font color="#E5E5E5"> is</font>

361
00:14:28,420 --> 00:14:33,040
overwritten<font color="#CCCCCC"> at every sweep</font><font color="#E5E5E5"> this depends</font>

362
00:14:31,330 --> 00:14:33,400
a bit on<font color="#E5E5E5"> what</font><font color="#CCCCCC"> you need</font><font color="#E5E5E5"> to do exactly</font><font color="#CCCCCC"> all</font>

363
00:14:33,040 --> 00:14:35,560
<font color="#E5E5E5">right</font>

364
00:14:33,400 --> 00:14:37,750
you can have you<font color="#E5E5E5"> can store</font><font color="#CCCCCC"> data for</font><font color="#E5E5E5"> a</font>

365
00:14:35,560 --> 00:14:39,069
bit longer but<font color="#E5E5E5"> of course eventually your</font>

366
00:14:37,750 --> 00:14:41,320
data files<font color="#E5E5E5"> are</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to grow quite</font>

367
00:14:39,070 --> 00:14:44,920
rapidly so you want to manage that<font color="#CCCCCC"> a</font>

368
00:14:41,320 --> 00:14:46,990
little bit<font color="#E5E5E5"> all right</font>

369
00:14:44,920 --> 00:14:48,790
so just some few<font color="#E5E5E5"> results from the lab</font>

370
00:14:46,990 --> 00:14:50,950
before<font color="#E5E5E5"> I do the actual demo so this is</font>

371
00:14:48,790 --> 00:14:53,410
when<font color="#E5E5E5"> we generate signal with a signal</font>

372
00:14:50,950 --> 00:14:55,300
generator this<font color="#E5E5E5"> is roughly over a 100</font>

373
00:14:53,410 --> 00:14:56,890
megahertz band<font color="#CCCCCC"> we have a Bluetooth</font>

374
00:14:55,300 --> 00:14:59,709
<font color="#E5E5E5">signal here and</font><font color="#CCCCCC"> then a</font><font color="#E5E5E5"> multi-carrier</font>

375
00:14:56,890 --> 00:15:01,270
signal with 20 carriers<font color="#E5E5E5"> and you can see</font>

376
00:14:59,710 --> 00:15:03,130
it's all of these signals<font color="#CCCCCC"> or I take</font><font color="#E5E5E5"> it</font>

377
00:15:01,270 --> 00:15:04,630
appropriately if you if you would<font color="#E5E5E5"> zoom</font>

378
00:15:03,130 --> 00:15:05,860
in here<font color="#E5E5E5"> you would see</font><font color="#CCCCCC"> that the bandwidth</font>

379
00:15:04,630 --> 00:15:08,439
<font color="#E5E5E5">of</font><font color="#CCCCCC"> your muted signal is roughly</font>

380
00:15:05,860 --> 00:15:10,510
compatible with<font color="#CCCCCC"> demand which</font><font color="#E5E5E5"> we set at</font>

381
00:15:08,440 --> 00:15:12,100
<font color="#E5E5E5">the transmitter side so this is with a</font>

382
00:15:10,510 --> 00:15:13,540
<font color="#E5E5E5">cable between the</font><font color="#CCCCCC"> USR penis signal</font>

383
00:15:12,100 --> 00:15:15,700
generator<font color="#CCCCCC"> you're not allowed to transmit</font>

384
00:15:13,540 --> 00:15:20,439
<font color="#E5E5E5">whatever you want especially</font><font color="#CCCCCC"> at these</font>

385
00:15:15,700 --> 00:15:23,410
frequencies<font color="#CCCCCC"> this is just detecting FM</font>

386
00:15:20,440 --> 00:15:25,390
radio stations so<font color="#CCCCCC"> well you can see that</font>

387
00:15:23,410 --> 00:15:28,030
you detect<font color="#E5E5E5"> a bunch of stuff</font><font color="#CCCCCC"> between this</font>

388
00:15:25,390 --> 00:15:29,900
or 20 megahertz band<font color="#E5E5E5"> and I gather was</font>

389
00:15:28,030 --> 00:15:31,790
very<font color="#E5E5E5"> patient and able to match</font>

390
00:15:29,900 --> 00:15:33,319
detection result with one of the actual

391
00:15:31,790 --> 00:15:35,630
<font color="#CCCCCC">FEM broadcast stations</font><font color="#E5E5E5"> that we have</font>

392
00:15:33,320 --> 00:15:38,270
around<font color="#E5E5E5"> here</font><font color="#CCCCCC"> Brussels and match them to</font>

393
00:15:35,630 --> 00:15:40,400
<font color="#CCCCCC">the</font><font color="#E5E5E5"> different transmit towers so we are</font>

394
00:15:38,270 --> 00:15:42,680
here to<font color="#CCCCCC"> university and a</font><font color="#E5E5E5"> bunch of</font>

395
00:15:40,400 --> 00:15:45,470
transmitters all around Brussels<font color="#CCCCCC"> we</font><font color="#E5E5E5"> were</font>

396
00:15:42,680 --> 00:15:47,930
able to detect well all<font color="#E5E5E5"> of them up</font><font color="#CCCCCC"> to we</font>

397
00:15:45,470 --> 00:15:52,220
could see<font color="#CCCCCC"> up to</font><font color="#E5E5E5"> 12 kilometer kilometers</font>

398
00:15:47,930 --> 00:15:55,040
of range<font color="#E5E5E5"> so before I move to</font><font color="#CCCCCC"> the actual</font>

399
00:15:52,220 --> 00:15:56,510
demo<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the code</font><font color="#E5E5E5"> that we did is</font>

400
00:15:55,040 --> 00:15:58,550
available on github

401
00:15:56,510 --> 00:16:01,970
so what do you have<font color="#CCCCCC"> in the guitar folder</font>

402
00:15:58,550 --> 00:16:04,280
you have<font color="#E5E5E5"> the</font><font color="#CCCCCC"> FPGA source codes</font><font color="#E5E5E5"> so</font>

403
00:16:01,970 --> 00:16:05,780
unfortunately to turn it to<font color="#CCCCCC"> something</font>

404
00:16:04,280 --> 00:16:07,310
that<font color="#E5E5E5"> you can put in the USRP you will</font>

405
00:16:05,780 --> 00:16:11,420
need silence<font color="#CCCCCC"> right so this is</font>

406
00:16:07,310 --> 00:16:13,819
proprietary<font color="#E5E5E5"> software it's not cheap but</font>

407
00:16:11,420 --> 00:16:16,040
if you work in<font color="#E5E5E5"> a university most of the</font>

408
00:16:13,820 --> 00:16:19,040
time people<font color="#E5E5E5"> have it and you</font><font color="#CCCCCC"> can use it</font>

409
00:16:16,040 --> 00:16:21,319
<font color="#CCCCCC">so we also have the FPGA images which</font>

410
00:16:19,040 --> 00:16:25,160
<font color="#CCCCCC">can flash straight on the FPGA</font><font color="#E5E5E5"> right on</font>

411
00:16:21,320 --> 00:16:28,340
<font color="#E5E5E5">the USRP and of course all the hosts C++</font>

412
00:16:25,160 --> 00:16:32,750
code and<font color="#CCCCCC"> teammates</font><font color="#E5E5E5"> and some junk we used</font>

413
00:16:28,340 --> 00:16:37,910
while making<font color="#E5E5E5"> the software</font><font color="#CCCCCC"> alright so</font>

414
00:16:32,750 --> 00:16:39,620
let's move<font color="#CCCCCC"> on to the demo alright so</font>

415
00:16:37,910 --> 00:16:43,699
this<font color="#CCCCCC"> is basically the command that</font><font color="#E5E5E5"> you</font>

416
00:16:39,620 --> 00:16:45,860
<font color="#E5E5E5">need to execute to call</font><font color="#CCCCCC"> for - - to start</font>

417
00:16:43,700 --> 00:16:48,260
the<font color="#CCCCCC"> function</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can see some</font>

418
00:16:45,860 --> 00:16:51,590
<font color="#E5E5E5">classical stuff like USRP sample rate</font>

419
00:16:48,260 --> 00:16:53,540
<font color="#E5E5E5">the carrier frequency the gain and then</font>

420
00:16:51,590 --> 00:16:56,210
you have a bunch of more precise

421
00:16:53,540 --> 00:16:59,060
parameters so threshold is the<font color="#CCCCCC"> level of</font>

422
00:16:56,210 --> 00:17:00,740
<font color="#CCCCCC">your threshold window size is the</font><font color="#E5E5E5"> size</font>

423
00:16:59,060 --> 00:17:03,800
of the<font color="#CCCCCC"> Sun window that you're</font>

424
00:17:00,740 --> 00:17:07,010
accumulating energy over and this<font color="#CCCCCC"> end</font>

425
00:17:03,800 --> 00:17:08,869
parameter is<font color="#CCCCCC"> just a number of</font><font color="#E5E5E5"> 10</font>

426
00:17:07,010 --> 00:17:11,240
megahertz<font color="#E5E5E5"> windows that you</font><font color="#CCCCCC"> want to</font>

427
00:17:08,869 --> 00:17:12,708
accumulate over<font color="#E5E5E5"> so in this case we're</font>

428
00:17:11,240 --> 00:17:20,620
going<font color="#E5E5E5"> to look at</font><font color="#CCCCCC"> two times</font><font color="#E5E5E5"> 10 megahertz</font>

429
00:17:12,709 --> 00:17:20,620
or 20 megahertz bandwidth<font color="#CCCCCC"> alright so</font>

430
00:17:22,949 --> 00:17:28,270
so we first<font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> start by looking</font><font color="#E5E5E5"> a bit</font>

431
00:17:25,329 --> 00:17:30,970
at what we have<font color="#CCCCCC"> energy gsm bands which</font>

432
00:17:28,270 --> 00:17:32,950
<font color="#E5E5E5">was</font><font color="#CCCCCC"> pre-loaded the commands</font><font color="#E5E5E5"> so these are</font>

433
00:17:30,970 --> 00:17:34,660
basically the different<font color="#CCCCCC"> GSM signals</font><font color="#E5E5E5"> that</font>

434
00:17:32,950 --> 00:17:36,340
you see and the different signals that

435
00:17:34,660 --> 00:17:38,170
are detected so you can see a few<font color="#E5E5E5"> things</font>

436
00:17:36,340 --> 00:17:39,850
here<font color="#CCCCCC"> so you can see some of</font><font color="#E5E5E5"> these are</font>

437
00:17:38,170 --> 00:17:41,920
<font color="#CCCCCC">always present these are G's and</font>

438
00:17:39,850 --> 00:17:43,449
broadcast channels<font color="#CCCCCC"> alright so those</font><font color="#E5E5E5"> are</font>

439
00:17:41,920 --> 00:17:44,980
signals<font color="#E5E5E5"> that are always present that's</font>

440
00:17:43,450 --> 00:17:48,220
your cell phone used<font color="#E5E5E5"> to lock themselves</font>

441
00:17:44,980 --> 00:17:52,120
<font color="#CCCCCC">onto and some</font><font color="#E5E5E5"> of these signals pop in</font>

442
00:17:48,220 --> 00:17:53,710
and out so GSM is<font color="#CCCCCC"> TDMA</font><font color="#E5E5E5"> time-based so</font>

443
00:17:52,120 --> 00:17:57,250
signals are there for a short<font color="#E5E5E5"> span of</font>

444
00:17:53,710 --> 00:17:59,140
time and then disappear<font color="#CCCCCC"> alright so here</font>

445
00:17:57,250 --> 00:18:00,940
the refresh rate<font color="#CCCCCC"> is</font><font color="#E5E5E5"> very low because we</font>

446
00:17:59,140 --> 00:18:03,340
don't want<font color="#E5E5E5"> to overload the processor</font>

447
00:18:00,940 --> 00:18:06,070
it's<font color="#E5E5E5"> 1 Hertz</font><font color="#CCCCCC"> but the system is actually</font>

448
00:18:03,340 --> 00:18:09,840
<font color="#E5E5E5">running you know it's get doing full</font>

449
00:18:06,070 --> 00:18:09,840
scanning<font color="#CCCCCC"> 5 milliseconds behind here</font>

450
00:18:10,770 --> 00:18:18,070
<font color="#E5E5E5">alright</font><font color="#CCCCCC"> so well GSM is bit 90s let's try</font>

451
00:18:15,520 --> 00:18:21,100
something a bit<font color="#E5E5E5"> more recent so this is</font>

452
00:18:18,070 --> 00:18:24,280
looking<font color="#E5E5E5"> at 3G signals so I'll set the</font>

453
00:18:21,100 --> 00:18:25,899
<font color="#E5E5E5">center frequencies to one of the one of</font>

454
00:18:24,280 --> 00:18:27,730
<font color="#E5E5E5">the 15 megahertz of bandwidth that's</font>

455
00:18:25,900 --> 00:18:30,520
<font color="#E5E5E5">allocated to</font><font color="#CCCCCC"> one of the operators I</font>

456
00:18:27,730 --> 00:18:32,530
think<font color="#E5E5E5"> it's base in this case and you can</font>

457
00:18:30,520 --> 00:18:34,960
<font color="#CCCCCC">see they have 15 megahertz to use for 3G</font>

458
00:18:32,530 --> 00:18:36,010
signals and well it's not<font color="#CCCCCC"> always so</font>

459
00:18:34,960 --> 00:18:38,020
clear<font color="#E5E5E5"> but what they did is</font><font color="#CCCCCC"> they</font>

460
00:18:36,010 --> 00:18:40,420
<font color="#E5E5E5">basically split</font><font color="#CCCCCC"> their fifteen megahertz</font>

461
00:18:38,020 --> 00:18:42,580
into three<font color="#CCCCCC"> bands</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> five megahertz</font><font color="#E5E5E5"> right</font>

462
00:18:40,420 --> 00:18:44,800
so you can<font color="#E5E5E5"> more or less</font><font color="#CCCCCC"> CDs</font><font color="#E5E5E5"> represented</font>

463
00:18:42,580 --> 00:18:47,020
here where you have chunks of<font color="#CCCCCC"> five</font>

464
00:18:44,800 --> 00:18:49,540
megahertz being detected

465
00:18:47,020 --> 00:18:55,559
yeah so sometimes<font color="#E5E5E5"> the full signal is not</font>

466
00:18:49,540 --> 00:18:55,559
<font color="#E5E5E5">visible</font><font color="#CCCCCC"> so yeah that's basically the</font><font color="#E5E5E5"> IE</font>

467
00:18:57,059 --> 00:19:03,428
<font color="#E5E5E5">alright so that's about it</font><font color="#CCCCCC"> for my talk</font>

468
00:19:00,760 --> 00:19:05,730
<font color="#E5E5E5">so</font><font color="#CCCCCC"> I will be happy to answer any</font>

469
00:19:03,429 --> 00:19:07,809
question<font color="#E5E5E5"> I</font><font color="#CCCCCC"> just would like to also</font>

470
00:19:05,730 --> 00:19:09,460
shamelessly take the opportunity to say

471
00:19:07,809 --> 00:19:11,770
that we<font color="#CCCCCC"> are hiring some people to work</font>

472
00:19:09,460 --> 00:19:13,559
on<font color="#E5E5E5"> this kind of stuff</font><font color="#CCCCCC"> so if you guys</font>

473
00:19:11,770 --> 00:19:16,690
know someone who would<font color="#CCCCCC"> be interested</font>

474
00:19:13,559 --> 00:19:18,090
<font color="#CCCCCC">well please get in touch with</font><font color="#E5E5E5"> me thank</font>

475
00:19:16,690 --> 00:19:26,520
you

476
00:19:18,090 --> 00:19:26,520
[Applause]

477
00:19:46,450 --> 00:19:53,090
yes so the the question<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the remark is</font>

478
00:19:49,340 --> 00:19:55,490
whether we could do<font color="#CCCCCC"> the carrier sweep by</font>

479
00:19:53,090 --> 00:19:58,120
<font color="#E5E5E5">using hardware</font><font color="#CCCCCC"> solutions instead</font><font color="#E5E5E5"> of</font>

480
00:19:55,490 --> 00:20:00,200
doing software<font color="#E5E5E5"> so</font><font color="#CCCCCC"> is one possibility now</font>

481
00:19:58,120 --> 00:20:02,209
<font color="#E5E5E5">the main idea of this is to have</font>

482
00:20:00,200 --> 00:20:03,650
something<font color="#CCCCCC"> very</font><font color="#E5E5E5"> quite low weight that we</font>

483
00:20:02,210 --> 00:20:07,190
can put in the back<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the van</font><font color="#CCCCCC"> so you</font>

484
00:20:03,650 --> 00:20:09,080
know extensive<font color="#CCCCCC"> hardware every piece of</font>

485
00:20:07,190 --> 00:20:10,880
<font color="#E5E5E5">hardware you add in my experience is a</font>

486
00:20:09,080 --> 00:20:13,760
potential cause<font color="#CCCCCC"> of problems</font><font color="#E5E5E5"> that you add</font>

487
00:20:10,880 --> 00:20:16,280
<font color="#E5E5E5">into the loop</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right and it would be</font>

488
00:20:13,760 --> 00:20:17,810
a<font color="#E5E5E5"> solution to even speed up more</font><font color="#CCCCCC"> the</font>

489
00:20:16,280 --> 00:20:20,360
<font color="#E5E5E5">scanning that we currently have so that</font>

490
00:20:17,810 --> 00:20:23,270
would work<font color="#E5E5E5"> indeed I don't</font><font color="#CCCCCC"> think it would</font>

491
00:20:20,360 --> 00:20:25,340
make the overall<font color="#E5E5E5"> system much simpler and</font>

492
00:20:23,270 --> 00:20:28,250
<font color="#E5E5E5">actually most of the</font><font color="#CCCCCC"> issues that we have</font>

493
00:20:25,340 --> 00:20:30,500
or more more in<font color="#E5E5E5"> terms of SNR in terms of</font>

494
00:20:28,250 --> 00:20:33,230
scanning speeds so that's a bit of<font color="#CCCCCC"> the</font>

495
00:20:30,500 --> 00:20:34,580
limiting factor here<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> 15 is a</font>

496
00:20:33,230 --> 00:20:35,960
fixed point<font color="#CCCCCC"> multiplication that's</font>

497
00:20:34,580 --> 00:20:37,970
something that we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> improve on in</font>

498
00:20:35,960 --> 00:20:40,190
the future<font color="#CCCCCC"> so you lose quite a lot of</font>

499
00:20:37,970 --> 00:21:03,160
resolution<font color="#E5E5E5"> in in the lower bits and your</font>

500
00:20:40,190 --> 00:21:03,160
feet unless you<font color="#E5E5E5"> there is a purchase</font>

501
00:21:20,430 --> 00:21:29,080
we can yeah<font color="#E5E5E5"> yeah</font>

502
00:21:24,490 --> 00:21:30,940
in terms of signal-to-noise are you ever

503
00:21:29,080 --> 00:21:34,659
itching over each<font color="#CCCCCC"> frequency channel</font>

504
00:21:30,940 --> 00:21:36,700
before you<font color="#CCCCCC"> going to no</font><font color="#E5E5E5"> we don't do so oh</font>

505
00:21:34,660 --> 00:21:39,160
yeah sorry<font color="#E5E5E5"> are we doing any averaging</font>

506
00:21:36,700 --> 00:21:41,080
<font color="#E5E5E5">before we do any processing behind so</font>

507
00:21:39,160 --> 00:21:43,210
currently not<font color="#CCCCCC"> know</font><font color="#E5E5E5"> so that's something</font>

508
00:21:41,080 --> 00:21:44,980
<font color="#E5E5E5">that we also want to add in here so we</font>

509
00:21:43,210 --> 00:21:46,420
still have a lot of space<font color="#CCCCCC"> left whether</font>

510
00:21:44,980 --> 00:21:49,600
it's on the FPGA<font color="#E5E5E5"> we can also do it on</font>

511
00:21:46,420 --> 00:21:51,790
<font color="#E5E5E5">the software</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> I think the first</font>

512
00:21:49,600 --> 00:21:54,490
<font color="#CCCCCC">priority</font><font color="#E5E5E5"> is increasing the resolution of</font>

513
00:21:51,790 --> 00:21:56,830
<font color="#CCCCCC">the 50</font><font color="#E5E5E5"> and then going</font><font color="#CCCCCC"> to add additional</font>

514
00:21:54,490 --> 00:21:59,140
functions such as averaging or max hold

515
00:21:56,830 --> 00:22:00,790
or anything that<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> that would</font>

516
00:21:59,140 --> 00:22:22,480
kind of<font color="#E5E5E5"> make the whole system</font><font color="#CCCCCC"> more</font>

517
00:22:00,790 --> 00:22:24,070
robust yes this is generated with a

518
00:22:22,480 --> 00:22:27,309
<font color="#E5E5E5">signal generator so we set the carrier</font>

519
00:22:24,070 --> 00:22:44,409
frequency yourself yeah it's it's random

520
00:22:27,309 --> 00:22:46,360
<font color="#CCCCCC">it's run yep so the question is whether</font>

521
00:22:44,410 --> 00:22:49,330
we tested this on frequency helping

522
00:22:46,360 --> 00:22:52,479
transmitters so currently not<font color="#E5E5E5"> now so we</font>

523
00:22:49,330 --> 00:22:53,980
always track signals<font color="#CCCCCC"> or static frequency</font>

524
00:22:52,480 --> 00:22:57,250
hopping is<font color="#E5E5E5"> certainly something that</font>

525
00:22:53,980 --> 00:22:58,990
would be interesting<font color="#CCCCCC"> it roughly depends</font>

526
00:22:57,250 --> 00:23:00,910
on how<font color="#E5E5E5"> long</font><font color="#CCCCCC"> it takes to scan</font><font color="#E5E5E5"> so that's</font>

527
00:22:58,990 --> 00:23:06,820
one of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> reason</font><font color="#CCCCCC"> that we want free this</font>

528
00:23:00,910 --> 00:23:08,980
reasonably fast scan times sorry well

529
00:23:06,820 --> 00:23:11,340
not the one we generate with<font color="#E5E5E5"> signal</font>

530
00:23:08,980 --> 00:23:11,340
<font color="#E5E5E5">generator</font>

531
00:23:18,590 --> 00:23:22,139
[Applause]

