1
00:00:05,370 --> 00:00:15,070
let's welcome<font color="#E5E5E5"> all right good afternoon</font>

2
00:00:14,410 --> 00:00:18,070
everybody

3
00:00:15,070 --> 00:00:20,170
yeah and welcome to my talk<font color="#CCCCCC"> on using or</font>

4
00:00:18,070 --> 00:00:22,990
developing applications using OpenStack

5
00:00:20,170 --> 00:00:26,080
Swift as a storage back-end<font color="#CCCCCC"> my name is</font>

6
00:00:22,990 --> 00:00:28,839
<font color="#E5E5E5">Christian</font><font color="#CCCCCC"> Vita I'm a software engineer</font>

7
00:00:26,080 --> 00:00:31,119
working<font color="#E5E5E5"> in reddit</font><font color="#CCCCCC"> also working on</font>

8
00:00:28,840 --> 00:00:31,960
OpenStack Swift<font color="#CCCCCC"> I just had a</font><font color="#E5E5E5"> look before</font>

9
00:00:31,119 --> 00:00:33,550
<font color="#CCCCCC">this targets</font>

10
00:00:31,960 --> 00:00:36,219
nearly<font color="#CCCCCC"> five years ago that I started</font>

11
00:00:33,550 --> 00:00:39,489
<font color="#CCCCCC">contributing to</font><font color="#E5E5E5"> Swift so for quite some</font>

12
00:00:36,219 --> 00:00:42,190
<font color="#CCCCCC">time already and yeah</font><font color="#E5E5E5"> I want to give you</font>

13
00:00:39,489 --> 00:00:44,050
a short<font color="#E5E5E5"> introduction on how to use Swift</font>

14
00:00:42,190 --> 00:00:47,829
for application development

15
00:00:44,050 --> 00:00:49,568
<font color="#E5E5E5">so before we start or before I start</font>

16
00:00:47,829 --> 00:00:52,780
<font color="#CCCCCC">talking</font><font color="#E5E5E5"> about the REST API is that</font>

17
00:00:49,569 --> 00:00:55,059
<font color="#E5E5E5">actually is used to interact with</font>

18
00:00:52,780 --> 00:00:57,579
OpenStack Swift<font color="#CCCCCC"> I want to give you a</font>

19
00:00:55,059 --> 00:01:01,149
very<font color="#E5E5E5"> short brief summary about</font><font color="#CCCCCC"> what is</font>

20
00:00:57,579 --> 00:01:03,159
OpenStack Swift<font color="#E5E5E5"> not as much as detailed</font>

21
00:01:01,149 --> 00:01:06,490
as the earlier talks from today from

22
00:01:03,159 --> 00:01:08,710
<font color="#CCCCCC">Thiago an editor but if you're</font>

23
00:01:06,490 --> 00:01:11,949
interested<font color="#E5E5E5"> in</font><font color="#CCCCCC"> that one</font><font color="#E5E5E5"> video should</font><font color="#CCCCCC"> be</font>

24
00:01:08,710 --> 00:01:15,100
available probably<font color="#E5E5E5"> soon we on room H</font>

25
00:01:11,950 --> 00:01:16,810
<font color="#CCCCCC">2021 three so please have a look at</font>

26
00:01:15,100 --> 00:01:19,509
<font color="#E5E5E5">these talks if you want to have a few</font>

27
00:01:16,810 --> 00:01:23,109
more<font color="#E5E5E5"> details about see how Swift works</font>

28
00:01:19,509 --> 00:01:24,549
internally<font color="#E5E5E5"> so Swift itself um it's an</font>

29
00:01:23,109 --> 00:01:27,070
object<font color="#E5E5E5"> storage system</font><font color="#CCCCCC"> that actually</font>

30
00:01:24,549 --> 00:01:30,250
<font color="#E5E5E5">means I don't mind amount of</font><font color="#CCCCCC"> filesystem</font>

31
00:01:27,070 --> 00:01:33,089
I don't mount a block<font color="#CCCCCC"> device I just have</font>

32
00:01:30,250 --> 00:01:36,070
well<font color="#CCCCCC"> basically an URL</font><font color="#E5E5E5"> that actually</font>

33
00:01:33,090 --> 00:01:39,009
gives or returns for example my object

34
00:01:36,070 --> 00:01:42,548
<font color="#E5E5E5">that I start early on uses a very flat</font>

35
00:01:39,009 --> 00:01:45,189
<font color="#E5E5E5">name space</font><font color="#CCCCCC"> I have a personal</font><font color="#E5E5E5"> account</font>

36
00:01:42,549 --> 00:01:48,039
<font color="#E5E5E5">within</font><font color="#CCCCCC"> my Swift cluster and this account</font>

37
00:01:45,189 --> 00:01:51,719
contains containers and containers<font color="#CCCCCC"> are</font>

38
00:01:48,039 --> 00:01:56,049
<font color="#E5E5E5">just a collection of objects</font><font color="#CCCCCC"> actually</font>

39
00:01:51,719 --> 00:01:57,908
and because<font color="#CCCCCC"> of this flat name space</font><font color="#E5E5E5"> it's</font>

40
00:01:56,049 --> 00:02:00,340
mostly suited actually for<font color="#E5E5E5"> unstructured</font>

41
00:01:57,909 --> 00:02:02,859
<font color="#E5E5E5">data</font><font color="#CCCCCC"> so you would never well you</font>

42
00:02:00,340 --> 00:02:05,979
shouldn't have actually<font color="#CCCCCC"> try to do it</font><font color="#E5E5E5"> to</font>

43
00:02:02,859 --> 00:02:07,990
do for<font color="#E5E5E5"> example mounting and Swift object</font>

44
00:02:05,979 --> 00:02:09,869
<font color="#E5E5E5">even if it's possible and install your</font>

45
00:02:07,990 --> 00:02:13,299
database server<font color="#E5E5E5"> files on it</font><font color="#CCCCCC"> or whatever</font>

46
00:02:09,869 --> 00:02:16,450
<font color="#E5E5E5">it's really more suited for for</font><font color="#CCCCCC"> example</font>

47
00:02:13,300 --> 00:02:17,910
videos images<font color="#E5E5E5"> other large binary data</font>

48
00:02:16,450 --> 00:02:20,739
sets

49
00:02:17,910 --> 00:02:22,690
and especially videos and images<font color="#E5E5E5"> along</font>

50
00:02:20,740 --> 00:02:24,940
multimedia<font color="#E5E5E5"> files</font><font color="#CCCCCC"> um it's nice that you</font>

51
00:02:22,690 --> 00:02:27,820
<font color="#CCCCCC">have actually URL where you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> access</font>

52
00:02:24,940 --> 00:02:31,359
<font color="#CCCCCC">these</font><font color="#E5E5E5"> objects because you can then just</font>

53
00:02:27,820 --> 00:02:34,120
use it within your browser<font color="#CCCCCC"> Swift itself</font>

54
00:02:31,360 --> 00:02:38,890
is a<font color="#E5E5E5"> very scalable system very durable</font>

55
00:02:34,120 --> 00:02:40,510
<font color="#E5E5E5">system the default or but most people</font>

56
00:02:38,890 --> 00:02:42,489
are actually using<font color="#CCCCCC"> it with three</font>

57
00:02:40,510 --> 00:02:44,260
replicas meaning that you<font color="#E5E5E5"> have in the</font>

58
00:02:42,490 --> 00:02:47,020
back<font color="#CCCCCC"> and three</font><font color="#E5E5E5"> copies of every object</font>

59
00:02:44,260 --> 00:02:50,649
<font color="#E5E5E5">located</font><font color="#CCCCCC"> on your</font><font color="#E5E5E5"> storage service and</font>

60
00:02:47,020 --> 00:02:52,870
<font color="#E5E5E5">Swift is taking care of the replicate</font>

61
00:02:50,650 --> 00:02:55,930
<font color="#E5E5E5">that each object</font><font color="#CCCCCC"> is actually</font><font color="#E5E5E5"> replicated</font>

62
00:02:52,870 --> 00:03:02,550
and even after years<font color="#E5E5E5"> of time arm just as</font>

63
00:02:55,930 --> 00:03:02,550
for<font color="#CCCCCC"> example no bit rot what's too quick</font>

64
00:03:03,480 --> 00:03:07,019
in a second

65
00:03:11,980 --> 00:03:18,078
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> sorry for that</font><font color="#CCCCCC"> it hasn't</font><font color="#E5E5E5"> been</font>

66
00:03:15,590 --> 00:03:19,519
that it<font color="#CCCCCC"> has been in production for</font><font color="#E5E5E5"> well</font>

67
00:03:18,079 --> 00:03:21,439
<font color="#E5E5E5">more</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> eight</font><font color="#CCCCCC"> years now actually it's</font>

68
00:03:19,519 --> 00:03:24,590
one of the founding projects with an

69
00:03:21,439 --> 00:03:26,989
<font color="#E5E5E5">open stack itself has been invented by</font>

70
00:03:24,590 --> 00:03:30,260
or<font color="#E5E5E5"> the</font><font color="#CCCCCC"> urchin or developers we're on a</font>

71
00:03:26,989 --> 00:03:32,209
<font color="#CCCCCC">track space and that's the</font><font color="#E5E5E5"> same amount</font>

72
00:03:30,260 --> 00:03:35,030
of<font color="#CCCCCC"> times it actually</font><font color="#E5E5E5"> sums with classes</font>

73
00:03:32,209 --> 00:03:37,819
or are you running<font color="#CCCCCC"> and we have well they</font>

74
00:03:35,030 --> 00:03:40,310
are known<font color="#E5E5E5"> Swift clusters with more than</font>

75
00:03:37,819 --> 00:03:45,170
like<font color="#CCCCCC"> 75</font><font color="#E5E5E5"> petabytes of storage actually</font>

76
00:03:40,310 --> 00:03:47,720
within<font color="#E5E5E5"> a single cluster so as an</font>

77
00:03:45,170 --> 00:03:49,939
<font color="#E5E5E5">application developer using an object</font>

78
00:03:47,720 --> 00:03:53,030
storage is actually<font color="#E5E5E5"> really nice</font><font color="#CCCCCC"> because</font>

79
00:03:49,939 --> 00:03:55,970
it<font color="#E5E5E5"> really separates the application</font>

80
00:03:53,030 --> 00:03:58,400
logic from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> data pass logic</font><font color="#E5E5E5"> so when</font>

81
00:03:55,970 --> 00:03:59,780
you<font color="#CCCCCC"> created</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> application or write an</font>

82
00:03:58,400 --> 00:04:01,599
application<font color="#CCCCCC"> and you</font><font color="#E5E5E5"> want to store some</font>

83
00:03:59,780 --> 00:04:03,829
big data files for example video files

84
00:04:01,599 --> 00:04:06,439
<font color="#CCCCCC">you don't</font><font color="#E5E5E5"> need really</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to care about</font>

85
00:04:03,829 --> 00:04:09,489
<font color="#E5E5E5">the data</font><font color="#CCCCCC"> path</font><font color="#E5E5E5"> that you actually upload</font>

86
00:04:06,439 --> 00:04:11,870
data through your application server<font color="#E5E5E5"> but</font>

87
00:04:09,489 --> 00:04:14,449
you can upload<font color="#E5E5E5"> the data to the</font><font color="#CCCCCC"> Swift</font>

88
00:04:11,870 --> 00:04:16,220
cluster and<font color="#CCCCCC"> you only</font><font color="#E5E5E5"> store metadata</font>

89
00:04:14,449 --> 00:04:19,280
within<font color="#E5E5E5"> your application for example</font>

90
00:04:16,220 --> 00:04:21,169
<font color="#E5E5E5">using a database</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> you're</font><font color="#CCCCCC"> just storing</font>

91
00:04:19,279 --> 00:04:24,320
references for example with an elastic

92
00:04:21,168 --> 00:04:29,990
search and<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> Swift itself handle</font>

93
00:04:24,320 --> 00:04:32,389
large data sets when you when you're

94
00:04:29,990 --> 00:04:35,449
accessing a swift cluster use you using

95
00:04:32,389 --> 00:04:39,740
a simple REST API<font color="#CCCCCC"> these are basically</font>

96
00:04:35,449 --> 00:04:41,720
HTTP requests based on get put at delete

97
00:04:39,740 --> 00:04:46,070
<font color="#E5E5E5">should be as they are</font><font color="#CCCCCC"> - and post</font>

98
00:04:41,720 --> 00:04:47,690
requests and as the end user<font color="#CCCCCC"> or</font>

99
00:04:46,070 --> 00:04:49,789
application developer you're always

100
00:04:47,690 --> 00:04:51,199
talking<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> Swift proxy basically and</font>

101
00:04:49,789 --> 00:04:53,539
the proxies then and the background

102
00:04:51,199 --> 00:04:55,550
<font color="#E5E5E5">talks to your storage service and for</font>

103
00:04:53,539 --> 00:04:57,560
<font color="#CCCCCC">example in this</font><font color="#E5E5E5"> case make sure</font><font color="#CCCCCC"> that</font>

104
00:04:55,550 --> 00:04:59,750
every<font color="#CCCCCC"> object is replicated three times</font>

105
00:04:57,560 --> 00:05:03,440
or what<font color="#CCCCCC"> it's sent three times to</font><font color="#E5E5E5"> the</font>

106
00:04:59,750 --> 00:05:05,720
storage<font color="#E5E5E5"> nodes and start endurable way so</font>

107
00:05:03,440 --> 00:05:07,610
when I talk about<font color="#CCCCCC"> the Swift cluster in</font>

108
00:05:05,720 --> 00:05:09,800
<font color="#CCCCCC">the following</font><font color="#E5E5E5"> slides I'm basically</font>

109
00:05:07,610 --> 00:05:11,630
talking<font color="#CCCCCC"> about interacting with a swift</font>

110
00:05:09,800 --> 00:05:16,090
proxy because<font color="#E5E5E5"> that's actually the</font>

111
00:05:11,630 --> 00:05:16,090
<font color="#E5E5E5">endpoint for the application</font>

112
00:05:17,100 --> 00:05:25,320
so a simple<font color="#CCCCCC"> REST API request</font><font color="#E5E5E5"> actually</font>

113
00:05:21,000 --> 00:05:28,770
even a simple get request<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> is a</font>

114
00:05:25,320 --> 00:05:31,020
simple REST API request so when you have

115
00:05:28,770 --> 00:05:34,380
a<font color="#E5E5E5"> endpoint that looks something like</font>

116
00:05:31,020 --> 00:05:37,229
this<font color="#CCCCCC"> and you have these parts there</font><font color="#E5E5E5"> are</font>

117
00:05:34,380 --> 00:05:39,750
<font color="#E5E5E5">tests for example that's</font><font color="#CCCCCC"> your account</font>

118
00:05:37,230 --> 00:05:42,150
name<font color="#E5E5E5"> and public in the first example</font>

119
00:05:39,750 --> 00:05:44,190
would be<font color="#E5E5E5"> your container name and by</font>

120
00:05:42,150 --> 00:05:47,969
doing so<font color="#E5E5E5"> you get actually a list of</font>

121
00:05:44,190 --> 00:05:51,030
objects back at least if that's if this

122
00:05:47,970 --> 00:05:53,040
is a public readable container<font color="#CCCCCC"> it</font><font color="#E5E5E5"> is if</font>

123
00:05:51,030 --> 00:05:56,309
this container<font color="#E5E5E5"> has public reader</font><font color="#CCCCCC"> bullion</font>

124
00:05:53,040 --> 00:05:57,900
you can also download<font color="#E5E5E5"> the</font><font color="#CCCCCC"> objects</font><font color="#E5E5E5"> by</font>

125
00:05:56,310 --> 00:06:00,510
just appending the object<font color="#E5E5E5"> name at the</font>

126
00:05:57,900 --> 00:06:02,250
end<font color="#CCCCCC"> of the URL and of course you can</font>

127
00:06:00,510 --> 00:06:04,860
also upload objects but for uploading

128
00:06:02,250 --> 00:06:07,110
objects you need<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> some kind</font><font color="#CCCCCC"> of</font>

129
00:06:04,860 --> 00:06:10,200
authorization<font color="#CCCCCC"> in this case in the</font><font color="#E5E5E5"> lower</font>

130
00:06:07,110 --> 00:06:13,380
<font color="#E5E5E5">case we have excels tokens that are</font>

131
00:06:10,200 --> 00:06:15,719
stand along the requests and<font color="#E5E5E5"> this token</font>

132
00:06:13,380 --> 00:06:17,370
actually<font color="#CCCCCC"> authenticates</font><font color="#E5E5E5"> yourself to the</font>

133
00:06:15,720 --> 00:06:21,060
Swift tester making sure that you're

134
00:06:17,370 --> 00:06:22,680
actually<font color="#E5E5E5"> allowed to write data there's a</font>

135
00:06:21,060 --> 00:06:28,890
<font color="#E5E5E5">little bit more</font><font color="#CCCCCC"> information in the</font>

136
00:06:22,680 --> 00:06:31,470
reference<font color="#CCCCCC"> a link down below before I</font>

137
00:06:28,890 --> 00:06:34,770
continue<font color="#E5E5E5"> with the remaining part just a</font>

138
00:06:31,470 --> 00:06:39,660
few information in general<font color="#CCCCCC"> how to use</font>

139
00:06:34,770 --> 00:06:41,760
<font color="#E5E5E5">Swift when you send heaters there's a</font>

140
00:06:39,660 --> 00:06:43,740
differentiation<font color="#E5E5E5"> between</font><font color="#CCCCCC"> object where</font>

141
00:06:41,760 --> 00:06:46,680
<font color="#E5E5E5">between customer metadata and system</font>

142
00:06:43,740 --> 00:06:49,710
metadata<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> have here I</font>

143
00:06:46,680 --> 00:06:52,410
have Santa tude<font color="#CCCCCC"> two</font><font color="#E5E5E5"> different heaters</font>

144
00:06:49,710 --> 00:06:54,780
along with a request<font color="#E5E5E5"> the first one is</font>

145
00:06:52,410 --> 00:06:57,480
actually a<font color="#E5E5E5"> system metadata</font><font color="#CCCCCC"> externally</font>

146
00:06:54,780 --> 00:07:00,390
<font color="#E5E5E5">after which</font><font color="#CCCCCC"> we come to in a few minutes</font>

147
00:06:57,480 --> 00:07:02,820
again<font color="#E5E5E5"> and I have a custom metadata in</font>

148
00:07:00,390 --> 00:07:05,070
custom metadata always at the object

149
00:07:02,820 --> 00:07:08,880
level<font color="#E5E5E5"> start with</font><font color="#CCCCCC"> X object meta</font><font color="#E5E5E5"> and then</font>

150
00:07:05,070 --> 00:07:10,890
some key and a value so you can store

151
00:07:08,880 --> 00:07:13,950
custom metadata<font color="#CCCCCC"> alongside with your</font>

152
00:07:10,890 --> 00:07:16,080
objects for<font color="#CCCCCC"> example that might be some</font>

153
00:07:13,950 --> 00:07:18,450
reference<font color="#CCCCCC"> to another object or some</font>

154
00:07:16,080 --> 00:07:20,310
<font color="#CCCCCC">information about the</font><font color="#E5E5E5"> video files some</font>

155
00:07:18,450 --> 00:07:23,550
some<font color="#E5E5E5"> captions and also as titles</font>

156
00:07:20,310 --> 00:07:25,560
whatever there are different ways how to

157
00:07:23,550 --> 00:07:28,470
<font color="#E5E5E5">easily start interacting with</font><font color="#CCCCCC"> a swift</font>

158
00:07:25,560 --> 00:07:30,420
raster<font color="#E5E5E5"> I think that probably one of the</font>

159
00:07:28,470 --> 00:07:34,830
simplest one is<font color="#CCCCCC"> to</font><font color="#E5E5E5"> actually use</font>

160
00:07:30,420 --> 00:07:37,290
<font color="#E5E5E5">Pisan</font><font color="#CCCCCC"> swift client</font><font color="#E5E5E5"> this one and there's</font>

161
00:07:34,830 --> 00:07:42,719
a<font color="#E5E5E5"> very useful option on dash dash debug</font>

162
00:07:37,290 --> 00:07:45,390
<font color="#E5E5E5">which actually includes examples how to</font>

163
00:07:42,720 --> 00:07:47,880
do the same request using<font color="#CCCCCC"> color</font><font color="#E5E5E5"> so when</font>

164
00:07:45,390 --> 00:07:50,760
you do a list container<font color="#E5E5E5"> somewhere</font><font color="#CCCCCC"> in the</font>

165
00:07:47,880 --> 00:07:53,969
out<font color="#CCCCCC"> Swift debug list container</font><font color="#E5E5E5"> somewhere</font>

166
00:07:50,760 --> 00:07:56,670
<font color="#CCCCCC">in the output you will</font><font color="#E5E5E5"> see well a very</font>

167
00:07:53,970 --> 00:07:58,590
<font color="#E5E5E5">similar command actually that you can</font>

168
00:07:56,670 --> 00:08:00,210
use directly and it gives you some idea

169
00:07:58,590 --> 00:08:03,090
how to start interacting<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> rest</font>

170
00:08:00,210 --> 00:08:07,200
<font color="#CCCCCC">API directly and not using</font><font color="#E5E5E5"> the Swift arm</font>

171
00:08:03,090 --> 00:08:09,510
<font color="#CCCCCC">commander interface there are two</font>

172
00:08:07,200 --> 00:08:10,950
different ways how to send metadata<font color="#CCCCCC"> with</font>

173
00:08:09,510 --> 00:08:14,670
a swift commander interface the first

174
00:08:10,950 --> 00:08:17,190
<font color="#CCCCCC">one is in</font><font color="#E5E5E5"> dash H or</font><font color="#CCCCCC"> uppercase H which</font>

175
00:08:14,670 --> 00:08:21,120
actually natively just sends a heater

176
00:08:17,190 --> 00:08:22,800
<font color="#CCCCCC">and there's a lowercase</font><font color="#E5E5E5"> ma</font><font color="#CCCCCC"> dash M where</font>

177
00:08:21,120 --> 00:08:25,350
you can just set some object data

178
00:08:22,800 --> 00:08:30,060
directly<font color="#E5E5E5"> I'm using this with command</font>

179
00:08:25,350 --> 00:08:32,670
line<font color="#E5E5E5"> interface</font><font color="#CCCCCC"> all right</font><font color="#E5E5E5"> so let's set I</font>

180
00:08:30,060 --> 00:08:34,559
just<font color="#E5E5E5"> mentioned</font><font color="#CCCCCC"> earlier on that we</font><font color="#E5E5E5"> need</font>

181
00:08:32,669 --> 00:08:36,179
some authentication<font color="#E5E5E5"> and in many cases or</font>

182
00:08:34,559 --> 00:08:38,959
<font color="#E5E5E5">in most cases actually depending on your</font>

183
00:08:36,179 --> 00:08:42,209
application<font color="#E5E5E5"> for storing new data</font>

184
00:08:38,960 --> 00:08:45,710
<font color="#E5E5E5">sometimes for reading data back and so</font>

185
00:08:42,210 --> 00:08:45,710
let's talk a lot a<font color="#E5E5E5"> little bit about this</font>

186
00:08:46,400 --> 00:08:52,199
when you start<font color="#CCCCCC"> developing applications</font>

187
00:08:49,380 --> 00:08:55,200
with Swift<font color="#E5E5E5"> you might actually want</font><font color="#CCCCCC"> to</font>

188
00:08:52,200 --> 00:08:57,930
run Swift<font color="#CCCCCC"> only so you don't need a full</font>

189
00:08:55,200 --> 00:09:01,170
OpenStack<font color="#E5E5E5"> environment with Keystone</font>

190
00:08:57,930 --> 00:09:03,870
<font color="#CCCCCC">database and whatnot</font><font color="#E5E5E5"> to actually start</font>

191
00:09:01,170 --> 00:09:06,260
and testing Swift<font color="#E5E5E5"> and we have a</font><font color="#CCCCCC"> built in</font>

192
00:09:03,870 --> 00:09:09,660
or included middleware called<font color="#CCCCCC"> tempest</font>

193
00:09:06,260 --> 00:09:12,470
<font color="#E5E5E5">it's actually we're actually using it</font>

194
00:09:09,660 --> 00:09:15,689
<font color="#E5E5E5">post for development purposes as well</font><font color="#CCCCCC"> as</font>

195
00:09:12,470 --> 00:09:17,820
demoing and showcasing stuff so it's

196
00:09:15,690 --> 00:09:20,010
<font color="#CCCCCC">really</font><font color="#E5E5E5"> meant to be as a showcasing stuff</font>

197
00:09:17,820 --> 00:09:21,510
<font color="#E5E5E5">and</font><font color="#CCCCCC"> our testing stuff don't use it in</font>

198
00:09:20,010 --> 00:09:23,340
production<font color="#E5E5E5"> because</font><font color="#CCCCCC"> the credentials that</font>

199
00:09:21,510 --> 00:09:24,120
<font color="#CCCCCC">you're using</font><font color="#E5E5E5"> here are actually stored in</font>

200
00:09:23,340 --> 00:09:26,250
plain text

201
00:09:24,120 --> 00:09:29,460
<font color="#E5E5E5">in the proxy server configuration file</font>

202
00:09:26,250 --> 00:09:33,300
<font color="#CCCCCC">so shouldn't</font><font color="#E5E5E5"> be done in production of</font>

203
00:09:29,460 --> 00:09:36,330
course however using<font color="#E5E5E5"> this one it makes</font>

204
00:09:33,300 --> 00:09:38,640
it or it shows very<font color="#E5E5E5"> syriza</font><font color="#CCCCCC"> Lee how to</font>

205
00:09:36,330 --> 00:09:40,890
use it<font color="#CCCCCC"> actually use</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> sending to</font>

206
00:09:38,640 --> 00:09:42,750
<font color="#E5E5E5">heaters in this case exhaust user and</font>

207
00:09:40,890 --> 00:09:45,269
exhaust key

208
00:09:42,750 --> 00:09:46,980
which is in<font color="#E5E5E5"> this case it's an account</font>

209
00:09:45,269 --> 00:09:50,910
<font color="#E5E5E5">name and</font><font color="#CCCCCC"> the username in within</font><font color="#E5E5E5"> that</font>

210
00:09:46,980 --> 00:09:55,050
tenant or account and<font color="#E5E5E5"> your key and</font><font color="#CCCCCC"> swift</font>

211
00:09:50,910 --> 00:09:57,660
returns<font color="#E5E5E5"> a storage URL and authentication</font>

212
00:09:55,050 --> 00:10:00,209
<font color="#E5E5E5">token and you use this storage URL later</font>

213
00:09:57,660 --> 00:10:02,040
on with the authentication token<font color="#E5E5E5"> and if</font>

214
00:10:00,209 --> 00:10:05,189
you're the owner of that account and<font color="#E5E5E5"> you</font>

215
00:10:02,040 --> 00:10:11,969
can<font color="#CCCCCC"> upload as much data</font><font color="#E5E5E5"> as until your</font>

216
00:10:05,189 --> 00:10:14,129
clusters<font color="#CCCCCC"> full</font><font color="#E5E5E5"> alright so when you want</font>

217
00:10:11,970 --> 00:10:15,990
to<font color="#E5E5E5"> go into</font><font color="#CCCCCC"> a production</font><font color="#E5E5E5"> or more</font>

218
00:10:14,129 --> 00:10:17,730
production like<font color="#CCCCCC"> environments and you in</font>

219
00:10:15,990 --> 00:10:20,610
many<font color="#E5E5E5"> cases you're using Keystone which</font>

220
00:10:17,730 --> 00:10:23,279
is the<font color="#CCCCCC"> OpenStack identity project it</font>

221
00:10:20,610 --> 00:10:26,040
goes<font color="#E5E5E5"> very similar but</font><font color="#CCCCCC"> instead of sending</font>

222
00:10:23,279 --> 00:10:28,019
heaters you're just sending<font color="#E5E5E5"> a JSON blob</font>

223
00:10:26,040 --> 00:10:31,079
<font color="#E5E5E5">but</font><font color="#CCCCCC"> you can see there as a password</font><font color="#E5E5E5"> in</font>

224
00:10:28,019 --> 00:10:33,930
it<font color="#CCCCCC"> there's a user in it and you send</font><font color="#E5E5E5"> it</font>

225
00:10:31,079 --> 00:10:36,388
to to Keystone server itself<font color="#E5E5E5"> Keystone</font>

226
00:10:33,930 --> 00:10:39,689
will return the token for you it will

227
00:10:36,389 --> 00:10:42,240
also return and you alpha you and you

228
00:10:39,689 --> 00:10:44,339
need<font color="#E5E5E5"> to do a second</font><font color="#CCCCCC"> query then and to</font>

229
00:10:42,240 --> 00:10:46,889
get the actual<font color="#E5E5E5"> end point for Swift</font>

230
00:10:44,339 --> 00:10:48,600
because with Keystone you typically have

231
00:10:46,889 --> 00:10:51,180
like<font color="#E5E5E5"> multiple endpoints for multiple</font>

232
00:10:48,600 --> 00:10:52,860
services<font color="#CCCCCC"> for example</font><font color="#E5E5E5"> you run OpenStack</font>

233
00:10:51,180 --> 00:10:54,899
<font color="#E5E5E5">Nova OpenStack Swift send a glance</font>

234
00:10:52,860 --> 00:10:58,649
<font color="#CCCCCC">whatnot and each</font><font color="#E5E5E5"> of these services</font><font color="#CCCCCC"> has</font>

235
00:10:54,899 --> 00:11:02,220
its own actually<font color="#E5E5E5"> endpoint that</font><font color="#CCCCCC"> you need</font>

236
00:10:58,649 --> 00:11:03,870
to query from<font color="#E5E5E5"> Keystone</font><font color="#CCCCCC"> alright so you</font>

237
00:11:02,220 --> 00:11:05,220
have<font color="#CCCCCC"> a token</font><font color="#E5E5E5"> and you have a heater</font><font color="#CCCCCC"> that</font>

238
00:11:03,870 --> 00:11:07,199
you can well you<font color="#CCCCCC"> have a tokens that</font>

239
00:11:05,220 --> 00:11:08,459
<font color="#E5E5E5">you're sending as a heater turn some URL</font>

240
00:11:07,199 --> 00:11:11,189
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> nice</font>

241
00:11:08,459 --> 00:11:14,069
<font color="#E5E5E5">um if you do so using for example</font>

242
00:11:11,189 --> 00:11:16,319
<font color="#CCCCCC">command-line</font><font color="#E5E5E5"> interface or curl but if</font>

243
00:11:14,069 --> 00:11:17,849
you want to<font color="#CCCCCC"> upload data let's say with</font>

244
00:11:16,319 --> 00:11:20,430
your browser<font color="#E5E5E5"> your browser typically</font>

245
00:11:17,850 --> 00:11:23,910
doesn't<font color="#E5E5E5"> send what custom heaters along</font>

246
00:11:20,430 --> 00:11:27,809
with a request<font color="#E5E5E5"> right so we need somehow</font>

247
00:11:23,910 --> 00:11:30,449
a<font color="#E5E5E5"> way to send our CENTAC ated data for</font>

248
00:11:27,809 --> 00:11:33,870
example<font color="#CCCCCC"> using a browser</font><font color="#E5E5E5"> and there are</font>

249
00:11:30,449 --> 00:11:36,479
<font color="#CCCCCC">too many</font><font color="#E5E5E5"> ways that work very similar to</font>

250
00:11:33,870 --> 00:11:39,990
<font color="#E5E5E5">each other the first</font><font color="#CCCCCC"> one that I want</font><font color="#E5E5E5"> to</font>

251
00:11:36,480 --> 00:11:44,629
<font color="#E5E5E5">introduce you</font><font color="#CCCCCC"> to is temp URL it actually</font>

252
00:11:39,990 --> 00:11:47,759
uses<font color="#CCCCCC"> pre-computed you assigned</font><font color="#E5E5E5"> URLs and</font>

253
00:11:44,629 --> 00:11:51,360
these<font color="#E5E5E5"> side yards are only valid</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> a</font>

254
00:11:47,759 --> 00:11:52,320
very<font color="#E5E5E5"> specific action and a short amount</font>

255
00:11:51,360 --> 00:11:56,550
of time

256
00:11:52,320 --> 00:11:58,529
so to use this you<font color="#CCCCCC"> need a key</font><font color="#E5E5E5"> that is</font>

257
00:11:56,550 --> 00:12:01,439
later on used to sign this<font color="#E5E5E5"> request and</font>

258
00:11:58,529 --> 00:12:03,899
you<font color="#E5E5E5"> Starsky as a metadata within</font><font color="#CCCCCC"> swift</font>

259
00:12:01,440 --> 00:12:06,089
itself<font color="#E5E5E5"> either on the account name in</font>

260
00:12:03,899 --> 00:12:08,279
<font color="#CCCCCC">that case it's valid for</font><font color="#E5E5E5"> all the</font>

261
00:12:06,089 --> 00:12:12,120
containers<font color="#E5E5E5"> reasons that account or on</font>

262
00:12:08,279 --> 00:12:15,180
the container name and the example in

263
00:12:12,120 --> 00:12:18,750
the first<font color="#E5E5E5"> line there is a way how to set</font>

264
00:12:15,180 --> 00:12:22,620
<font color="#E5E5E5">it so when you have this key you can</font>

265
00:12:18,750 --> 00:12:25,980
actually<font color="#E5E5E5"> compute</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> URLs and it's</font>

266
00:12:22,620 --> 00:12:27,509
it's<font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> easy</font><font color="#E5E5E5"> you just need to define</font>

267
00:12:25,980 --> 00:12:29,100
the message<font color="#E5E5E5"> that you want to use for</font>

268
00:12:27,509 --> 00:12:32,459
<font color="#CCCCCC">example</font><font color="#E5E5E5"> for a get request or a put</font>

269
00:12:29,100 --> 00:12:34,920
request<font color="#CCCCCC"> you need to define how long it</font>

270
00:12:32,459 --> 00:12:38,180
should<font color="#CCCCCC"> be used and then the</font><font color="#E5E5E5"> full pass</font>

271
00:12:34,920 --> 00:12:41,759
for example to the object<font color="#CCCCCC"> that should be</font>

272
00:12:38,180 --> 00:12:45,540
valid for<font color="#E5E5E5"> this request and then you do</font>

273
00:12:41,759 --> 00:12:48,690
some H make stuff<font color="#CCCCCC"> was in pison and</font><font color="#E5E5E5"> you</font>

274
00:12:45,540 --> 00:12:50,430
get back some signature and you would

275
00:12:48,690 --> 00:12:53,490
have<font color="#E5E5E5"> parents a signature to</font><font color="#CCCCCC"> the full URL</font>

276
00:12:50,430 --> 00:12:56,008
<font color="#E5E5E5">that you can see below you might wonder</font>

277
00:12:53,490 --> 00:12:59,490
actually<font color="#E5E5E5"> why we're using sha-1 checksums</font>

278
00:12:56,009 --> 00:13:01,949
here and there are some<font color="#E5E5E5"> good</font><font color="#CCCCCC"> news just</font>

279
00:12:59,490 --> 00:13:04,709
<font color="#CCCCCC">of this week we</font><font color="#E5E5E5"> merge the patch that</font>

280
00:13:01,949 --> 00:13:07,529
<font color="#E5E5E5">actually allows you</font><font color="#CCCCCC"> to use sha-256 and</font>

281
00:13:04,709 --> 00:13:10,410
512<font color="#E5E5E5"> checksum to as well so you don't</font>

282
00:13:07,529 --> 00:13:14,670
<font color="#E5E5E5">need to use sha-1 checksums anymore when</font>

283
00:13:10,410 --> 00:13:17,819
you run the latest versions all right so

284
00:13:14,670 --> 00:13:20,099
these are<font color="#E5E5E5"> temporary you arts we have a</font>

285
00:13:17,819 --> 00:13:23,069
very similar working<font color="#E5E5E5"> the middle</font><font color="#CCCCCC"> record</font>

286
00:13:20,100 --> 00:13:25,980
form<font color="#E5E5E5"> host and as a name a</font><font color="#CCCCCC"> little bit</font>

287
00:13:23,069 --> 00:13:28,860
implies it's actually for HTML forms<font color="#E5E5E5"> so</font>

288
00:13:25,980 --> 00:13:30,540
an HTML form might have some<font color="#E5E5E5"> hidden</font>

289
00:13:28,860 --> 00:13:33,569
input fields and in this<font color="#E5E5E5"> case we make</font>

290
00:13:30,540 --> 00:13:35,730
use of that<font color="#E5E5E5"> this hidden in what one of</font>

291
00:13:33,569 --> 00:13:38,639
<font color="#E5E5E5">the hidden input</font><font color="#CCCCCC"> files</font><font color="#E5E5E5"> actually gets a</font>

292
00:13:35,730 --> 00:13:40,019
signature<font color="#E5E5E5"> and there are a few</font><font color="#CCCCCC"> more</font>

293
00:13:38,639 --> 00:13:42,360
fields<font color="#CCCCCC"> that you can use here</font>

294
00:13:40,019 --> 00:13:44,399
they also field for redirecting the

295
00:13:42,360 --> 00:13:46,829
<font color="#CCCCCC">requests so when your browser</font><font color="#E5E5E5"> finished</font>

296
00:13:44,399 --> 00:13:48,959
the upload<font color="#E5E5E5"> swift actually returns a</font>

297
00:13:46,829 --> 00:13:53,008
redirect and your browser will hopefully

298
00:13:48,959 --> 00:13:55,410
<font color="#E5E5E5">follow this redirect you can also limit</font>

299
00:13:53,009 --> 00:13:58,620
<font color="#E5E5E5">of maximum file size and the number of</font>

300
00:13:55,410 --> 00:14:02,550
input fields<font color="#E5E5E5"> for this HTML form and only</font>

301
00:13:58,620 --> 00:14:05,540
if all of these parameters<font color="#CCCCCC"> are met and</font>

302
00:14:02,550 --> 00:14:11,630
only only<font color="#CCCCCC"> in that account</font>

303
00:14:05,540 --> 00:14:14,300
this is a valid<font color="#E5E5E5"> request I should mention</font>

304
00:14:11,630 --> 00:14:16,460
mention something<font color="#CCCCCC"> here so when you</font><font color="#E5E5E5"> do an</font>

305
00:14:14,300 --> 00:14:18,890
upload<font color="#E5E5E5"> using an HTML form you somehow</font>

306
00:14:16,460 --> 00:14:21,200
<font color="#E5E5E5">need the file</font><font color="#CCCCCC"> names it's the browser</font>

307
00:14:18,890 --> 00:14:25,930
<font color="#CCCCCC">send actually what you do is typically</font>

308
00:14:21,200 --> 00:14:28,790
you upload<font color="#CCCCCC"> to a container</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then use</font>

309
00:14:25,930 --> 00:14:32,239
custom prefixed for example a random

310
00:14:28,790 --> 00:14:34,400
<font color="#CCCCCC">UUID and the browser</font><font color="#E5E5E5"> will append say we</font>

311
00:14:32,240 --> 00:14:38,030
fire them to the end of the<font color="#E5E5E5"> URLs</font><font color="#CCCCCC"> that</font>

312
00:14:34,400 --> 00:14:41,689
<font color="#CCCCCC">you</font><font color="#E5E5E5"> just used</font><font color="#CCCCCC"> for signing</font><font color="#E5E5E5"> the request as</font>

313
00:14:38,030 --> 00:14:43,819
a<font color="#E5E5E5"> past name so your application needs to</font>

314
00:14:41,690 --> 00:14:47,210
take care<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit of that so after</font>

315
00:14:43,820 --> 00:14:51,500
your uploaded<font color="#CCCCCC"> Z is a request</font><font color="#E5E5E5"> and it's in</font>

316
00:14:47,210 --> 00:14:55,250
many<font color="#E5E5E5"> cases useful to have well some kind</font>

317
00:14:51,500 --> 00:14:57,380
<font color="#CCCCCC">of action</font><font color="#E5E5E5"> it's a redirect URL that</font>

318
00:14:55,250 --> 00:15:00,320
actually updates for example some some

319
00:14:57,380 --> 00:15:06,260
internal location for your<font color="#E5E5E5"> swift object</font>

320
00:15:00,320 --> 00:15:08,270
and your application itself<font color="#CCCCCC"> I mentioned</font>

321
00:15:06,260 --> 00:15:11,030
<font color="#E5E5E5">earlier on that</font><font color="#CCCCCC"> it's also possible to</font>

322
00:15:08,270 --> 00:15:15,590
<font color="#E5E5E5">have public readable containers again</font>

323
00:15:11,030 --> 00:15:18,350
<font color="#CCCCCC">these are simply metadata settings on in</font>

324
00:15:15,590 --> 00:15:21,020
container for<font color="#CCCCCC"> example in this case we're</font>

325
00:15:18,350 --> 00:15:24,230
<font color="#CCCCCC">making a container public readable which</font>

326
00:15:21,020 --> 00:15:27,310
is given by<font color="#CCCCCC"> this historic asterisk</font><font color="#E5E5E5"> and</font>

327
00:15:24,230 --> 00:15:29,810
<font color="#CCCCCC">our listings is responsible for</font><font color="#E5E5E5"> actually</font>

328
00:15:27,310 --> 00:15:33,319
<font color="#E5E5E5">enabling listings for public readable</font>

329
00:15:29,810 --> 00:15:35,479
containers when you have an account<font color="#CCCCCC"> with</font>

330
00:15:33,320 --> 00:15:37,010
an<font color="#CCCCCC"> open sticky stone for example and you</font>

331
00:15:35,480 --> 00:15:39,170
<font color="#E5E5E5">have a tenant and within the tenant</font>

332
00:15:37,010 --> 00:15:42,260
different users you can<font color="#E5E5E5"> also</font>

333
00:15:39,170 --> 00:15:44,420
differentiate between these users on a

334
00:15:42,260 --> 00:15:48,560
container<font color="#E5E5E5"> base so for example you could</font>

335
00:15:44,420 --> 00:15:50,510
<font color="#E5E5E5">have a one container per user</font><font color="#CCCCCC"> and each</font>

336
00:15:48,560 --> 00:15:53,930
user is only allowed<font color="#E5E5E5"> to write into his</font>

337
00:15:50,510 --> 00:15:57,319
own container within that account and if

338
00:15:53,930 --> 00:15:59,689
<font color="#E5E5E5">you want to have a look at the current</font>

339
00:15:57,320 --> 00:16:02,000
<font color="#E5E5E5">ACS that are set you can for example use</font>

340
00:15:59,690 --> 00:16:04,490
<font color="#E5E5E5">this with stat our command using the</font>

341
00:16:02,000 --> 00:16:09,470
container name<font color="#E5E5E5"> as a suffix and then you</font>

342
00:16:04,490 --> 00:16:13,490
get back<font color="#CCCCCC"> see</font><font color="#E5E5E5"> read and</font><font color="#CCCCCC"> write AC ads</font><font color="#E5E5E5"> all</font>

343
00:16:09,470 --> 00:16:16,070
<font color="#E5E5E5">right um I should mention that some of</font>

344
00:16:13,490 --> 00:16:18,440
<font color="#E5E5E5">these actions are</font><font color="#CCCCCC"> only applied to the</font>

345
00:16:16,070 --> 00:16:19,250
<font color="#CCCCCC">object</font><font color="#E5E5E5"> level that's especially true for</font>

346
00:16:18,440 --> 00:16:21,590
temp you are

347
00:16:19,250 --> 00:16:23,990
<font color="#CCCCCC">phone</font><font color="#E5E5E5"> post requests both of them only</font>

348
00:16:21,590 --> 00:16:27,500
applied to<font color="#CCCCCC"> the object level</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> to</font>

349
00:16:23,990 --> 00:16:29,660
only<font color="#E5E5E5"> well upload and download data</font><font color="#CCCCCC"> and</font>

350
00:16:27,500 --> 00:16:31,250
<font color="#E5E5E5">the numerous requests are valid as</font><font color="#CCCCCC"> long</font>

351
00:16:29,660 --> 00:16:34,730
as you have a<font color="#E5E5E5"> public readable container</font>

352
00:16:31,250 --> 00:16:37,430
<font color="#E5E5E5">and our sent</font><font color="#CCCCCC"> occasion tokens are in most</font>

353
00:16:34,730 --> 00:16:39,920
<font color="#E5E5E5">cases because you're the owner of the</font>

354
00:16:37,430 --> 00:16:43,370
account<font color="#E5E5E5"> valid on the account container</font>

355
00:16:39,920 --> 00:16:44,660
and object<font color="#CCCCCC"> lever</font><font color="#E5E5E5"> and you should take</font>

356
00:16:43,370 --> 00:16:46,820
this into<font color="#CCCCCC"> account when</font><font color="#E5E5E5"> you write</font>

357
00:16:44,660 --> 00:16:49,459
applications that<font color="#CCCCCC"> actually use Swift as</font>

358
00:16:46,820 --> 00:16:52,160
a storage back-end<font color="#E5E5E5"> let's assume you</font><font color="#CCCCCC"> have</font>

359
00:16:49,460 --> 00:16:55,400
some references within<font color="#E5E5E5"> a database for</font>

360
00:16:52,160 --> 00:16:57,469
Swift objects and you give out in our

361
00:16:55,400 --> 00:16:59,030
syndication token as an app to<font color="#E5E5E5"> the</font>

362
00:16:57,470 --> 00:17:01,910
application that<font color="#CCCCCC"> is running on</font><font color="#E5E5E5"> the</font>

363
00:16:59,030 --> 00:17:03,740
<font color="#CCCCCC">client side for example</font><font color="#E5E5E5"> if the client</font>

364
00:17:01,910 --> 00:17:05,859
<font color="#CCCCCC">actually has a authentication token you</font>

365
00:17:03,740 --> 00:17:08,930
might be able or you might actually

366
00:17:05,859 --> 00:17:11,329
modifies with data inside<font color="#E5E5E5"> Swift without</font>

367
00:17:08,930 --> 00:17:14,780
updating<font color="#E5E5E5"> your application it's all the</font>

368
00:17:11,329 --> 00:17:17,180
entries<font color="#CCCCCC"> in your application so when you</font>

369
00:17:14,780 --> 00:17:18,920
have references to<font color="#E5E5E5"> Swift objects in many</font>

370
00:17:17,180 --> 00:17:20,930
cases it makes a lot<font color="#CCCCCC"> of sense to only</font>

371
00:17:18,920 --> 00:17:23,390
<font color="#E5E5E5">use</font><font color="#CCCCCC"> template or</font><font color="#E5E5E5"> form post requests</font>

372
00:17:20,930 --> 00:17:28,459
<font color="#E5E5E5">because a client can't do any</font><font color="#CCCCCC"> harm to</font>

373
00:17:23,390 --> 00:17:34,910
<font color="#E5E5E5">any other objects in all right let's</font>

374
00:17:28,459 --> 00:17:38,270
have a<font color="#E5E5E5"> look at a few API API features we</font>

375
00:17:34,910 --> 00:17:41,390
<font color="#CCCCCC">have some modifiers for listings that</font>

376
00:17:38,270 --> 00:17:43,760
<font color="#CCCCCC">Bowes applies to most of them both apply</font>

377
00:17:41,390 --> 00:17:46,640
to the container listing as well as a

378
00:17:43,760 --> 00:17:48,740
account listing I'm focusing

379
00:17:46,640 --> 00:17:51,080
here on<font color="#E5E5E5"> the container listings so when</font>

380
00:17:48,740 --> 00:17:53,780
you simply apply<font color="#E5E5E5"> a query string for</font>

381
00:17:51,080 --> 00:17:57,800
example<font color="#CCCCCC"> using</font><font color="#E5E5E5"> the limit equals to</font>

382
00:17:53,780 --> 00:18:01,070
parameter you<font color="#CCCCCC"> can actually well limit</font>

383
00:17:57,800 --> 00:18:02,330
<font color="#E5E5E5">the amount of</font><font color="#CCCCCC"> returned entries</font><font color="#E5E5E5"> so in</font>

384
00:18:01,070 --> 00:18:05,389
this<font color="#E5E5E5"> case it would give you only the</font>

385
00:18:02,330 --> 00:18:09,409
first two entries<font color="#E5E5E5"> to object names that</font>

386
00:18:05,390 --> 00:18:11,600
are returned<font color="#CCCCCC"> these features or well this</font>

387
00:18:09,410 --> 00:18:15,140
modifiers are especially<font color="#E5E5E5"> useful if you</font>

388
00:18:11,600 --> 00:18:16,909
paginate over a container with a lot<font color="#E5E5E5"> of</font>

389
00:18:15,140 --> 00:18:18,170
objects<font color="#E5E5E5"> let's assume you have in a</font>

390
00:18:16,910 --> 00:18:20,240
container<font color="#E5E5E5"> with a hundred thousand</font>

391
00:18:18,170 --> 00:18:22,160
objects in it<font color="#E5E5E5"> you probably don't want</font><font color="#CCCCCC"> to</font>

392
00:18:20,240 --> 00:18:24,530
show<font color="#CCCCCC"> that to</font><font color="#E5E5E5"> the user on a single page</font>

393
00:18:22,160 --> 00:18:27,530
you want to iterate<font color="#CCCCCC"> over</font><font color="#E5E5E5"> that using</font>

394
00:18:24,530 --> 00:18:29,070
<font color="#CCCCCC">multiple pages</font><font color="#E5E5E5"> and you do so by using</font>

395
00:18:27,530 --> 00:18:31,620
markers<font color="#E5E5E5"> and markers</font>

396
00:18:29,070 --> 00:18:33,710
limits by just like saying okay<font color="#CCCCCC"> I'm</font>

397
00:18:31,620 --> 00:18:36,120
starting here<font color="#E5E5E5"> at entry number 1000 and</font>

398
00:18:33,710 --> 00:18:40,309
continuing on the next<font color="#E5E5E5"> page was an</font>

399
00:18:36,120 --> 00:18:44,309
genomic<font color="#CCCCCC"> mm</font><font color="#E5E5E5"> for example I can also use</font>

400
00:18:40,309 --> 00:18:46,678
some modifier to only list a specific

401
00:18:44,309 --> 00:18:50,759
subset of objects for example using this

402
00:18:46,679 --> 00:18:53,279
prefix<font color="#E5E5E5"> let's assume you store</font><font color="#CCCCCC"> something</font>

403
00:18:50,759 --> 00:18:55,409
<font color="#CCCCCC">it's and high-resolution pictures of the</font>

404
00:18:53,279 --> 00:18:57,090
same container<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I only want to</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> a</font>

405
00:18:55,409 --> 00:18:59,460
list<font color="#E5E5E5"> of something else was in my request</font>

406
00:18:57,090 --> 00:19:02,759
<font color="#CCCCCC">then I could use a prefix</font><font color="#E5E5E5"> to actually</font>

407
00:18:59,460 --> 00:19:04,980
filter these objects for objects<font color="#CCCCCC"> that</font>

408
00:19:02,759 --> 00:19:09,899
are just<font color="#CCCCCC"> starting with</font><font color="#E5E5E5"> in this case stop</font>

409
00:19:04,980 --> 00:19:14,220
for example<font color="#E5E5E5"> and as a developer</font><font color="#CCCCCC"> I need</font>

410
00:19:09,899 --> 00:19:16,860
some possible data so what I can<font color="#E5E5E5"> do is</font>

411
00:19:14,220 --> 00:19:19,110
or what typically<font color="#E5E5E5"> is done the</font><font color="#CCCCCC"> Swift</font>

412
00:19:16,860 --> 00:19:22,500
<font color="#E5E5E5">itself will return the object listing</font>

413
00:19:19,110 --> 00:19:25,289
<font color="#CCCCCC">just one entry per line but you can also</font>

414
00:19:22,500 --> 00:19:27,480
say<font color="#CCCCCC"> well</font><font color="#E5E5E5"> I need some JSON object or</font>

415
00:19:25,289 --> 00:19:32,789
<font color="#E5E5E5">something some other object and you can</font>

416
00:19:27,480 --> 00:19:35,970
<font color="#CCCCCC">do so two expiring objects is another</font>

417
00:19:32,789 --> 00:19:38,429
useful feature<font color="#CCCCCC"> that actually</font><font color="#E5E5E5"> so when you</font>

418
00:19:35,970 --> 00:19:41,759
upload an object you can<font color="#E5E5E5"> specify a time</font>

419
00:19:38,429 --> 00:19:43,679
after the object<font color="#CCCCCC"> becomes unavailable and</font>

420
00:19:41,759 --> 00:19:48,059
that might<font color="#CCCCCC"> be eyes are seconds from now</font>

421
00:19:43,679 --> 00:19:49,320
<font color="#E5E5E5">or a unix of off timestamp and what what</font>

422
00:19:48,059 --> 00:19:51,269
goes on in the background

423
00:19:49,320 --> 00:19:53,279
inside<font color="#CCCCCC"> swift's with immediately stopped</font>

424
00:19:51,269 --> 00:19:55,860
returning the object after<font color="#E5E5E5"> the time</font>

425
00:19:53,279 --> 00:19:57,480
expired<font color="#E5E5E5"> and a little bit delayed there</font>

426
00:19:55,860 --> 00:19:59,100
are some process running<font color="#E5E5E5"> in the</font>

427
00:19:57,480 --> 00:20:05,429
<font color="#CCCCCC">background it really deletes the Swift</font>

428
00:19:59,100 --> 00:20:07,860
object<font color="#CCCCCC"> there</font><font color="#E5E5E5"> on the cluster what we</font>

429
00:20:05,429 --> 00:20:10,950
didn't mention so far today<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> a</font>

430
00:20:07,860 --> 00:20:13,590
<font color="#CCCCCC">set we actually limit Swift objects in</font>

431
00:20:10,950 --> 00:20:15,870
size and by<font color="#CCCCCC"> D forties are five gigabytes</font>

432
00:20:13,590 --> 00:20:17,039
<font color="#E5E5E5">so there's a reason for that</font><font color="#CCCCCC"> let's</font>

433
00:20:15,870 --> 00:20:20,610
assume<font color="#CCCCCC"> you have a very large</font>

434
00:20:17,039 --> 00:20:22,470
<font color="#E5E5E5">high-resolution video and sometimes</font>

435
00:20:20,610 --> 00:20:26,809
<font color="#E5E5E5">users are</font><font color="#CCCCCC"> doing that with terabytes of</font>

436
00:20:22,470 --> 00:20:29,669
for a single file<font color="#E5E5E5"> when you look at the</font>

437
00:20:26,809 --> 00:20:34,590
<font color="#E5E5E5">underlying level you have you have</font>

438
00:20:29,669 --> 00:20:36,480
across<font color="#CCCCCC"> a couple of</font><font color="#E5E5E5"> disks and by actually</font>

439
00:20:34,590 --> 00:20:39,809
limiting and splitting objects into

440
00:20:36,480 --> 00:20:41,519
multiple segments or chunks you spread

441
00:20:39,809 --> 00:20:42,139
the load and<font color="#CCCCCC"> spread</font><font color="#E5E5E5"> the data across</font>

442
00:20:41,519 --> 00:20:44,090
<font color="#E5E5E5">multiple</font>

443
00:20:42,140 --> 00:20:45,830
that's one of the reasons why we're

444
00:20:44,090 --> 00:20:48,050
splitting these objects or you have to

445
00:20:45,830 --> 00:20:51,370
split<font color="#E5E5E5"> them actually and we illumines</font>

446
00:20:48,050 --> 00:20:53,690
that but we have a concept of what

447
00:20:51,370 --> 00:20:55,610
<font color="#E5E5E5">static large objects</font><font color="#CCCCCC"> and we have also</font>

448
00:20:53,690 --> 00:20:58,030
done in<font color="#CCCCCC"> make large objects but I'm</font>

449
00:20:55,610 --> 00:21:01,159
focusing<font color="#E5E5E5"> on static large objects here</font>

450
00:20:58,030 --> 00:21:03,020
we're using<font color="#CCCCCC"> many fast later on and this</font>

451
00:21:01,160 --> 00:21:08,810
many fast actually<font color="#E5E5E5"> defines where are my</font>

452
00:21:03,020 --> 00:21:12,560
<font color="#E5E5E5">chance located there as</font><font color="#CCCCCC"> there is another</font>

453
00:21:08,810 --> 00:21:13,879
<font color="#E5E5E5">popular public object storage which</font>

454
00:21:12,560 --> 00:21:17,179
actually<font color="#E5E5E5"> uses a little bit different</font>

455
00:21:13,880 --> 00:21:19,820
concept<font color="#CCCCCC"> when you</font><font color="#E5E5E5"> upload chunks there you</font>

456
00:21:17,180 --> 00:21:22,160
need to send a manifest later on<font color="#CCCCCC"> to but</font>

457
00:21:19,820 --> 00:21:24,020
in<font color="#E5E5E5"> that case it combines all these</font>

458
00:21:22,160 --> 00:21:26,360
chunks into<font color="#E5E5E5"> a single object that</font><font color="#CCCCCC"> it's</font>

459
00:21:24,020 --> 00:21:29,240
not done on swift<font color="#E5E5E5"> a Swift really keeps</font>

460
00:21:26,360 --> 00:21:32,000
the chunks<font color="#E5E5E5"> and you can later on reuse</font>

461
00:21:29,240 --> 00:21:34,190
this concept for example<font color="#CCCCCC"> if only a few</font>

462
00:21:32,000 --> 00:21:35,900
chunks within your fire changed let's

463
00:21:34,190 --> 00:21:38,420
<font color="#E5E5E5">assume you have</font><font color="#CCCCCC"> a large media file and</font>

464
00:21:35,900 --> 00:21:40,910
<font color="#E5E5E5">you cut your video file for example</font><font color="#CCCCCC"> or</font>

465
00:21:38,420 --> 00:21:43,190
update some metadata<font color="#E5E5E5"> within</font><font color="#CCCCCC"> to you</font><font color="#E5E5E5"> it</font>

466
00:21:40,910 --> 00:21:45,080
was in your<font color="#CCCCCC"> video</font><font color="#E5E5E5"> file</font><font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> need to</font>

467
00:21:43,190 --> 00:21:47,360
upload<font color="#E5E5E5"> the whole object again which</font>

468
00:21:45,080 --> 00:21:49,370
might be terabytes of data<font color="#E5E5E5"> you only</font>

469
00:21:47,360 --> 00:21:58,010
upload the chunks that really changed

470
00:21:49,370 --> 00:22:00,580
later on range requests again<font color="#E5E5E5"> videos one</font>

471
00:21:58,010 --> 00:22:04,040
<font color="#CCCCCC">of my favorite</font><font color="#E5E5E5"> topics was in this talk</font>

472
00:22:00,580 --> 00:22:08,750
<font color="#CCCCCC">sounds simple</font><font color="#E5E5E5"> but especially you want</font>

473
00:22:04,040 --> 00:22:13,639
this for<font color="#CCCCCC"> videos it's just</font><font color="#E5E5E5"> basic or</font>

474
00:22:08,750 --> 00:22:15,170
general<font color="#E5E5E5"> HTML HTTP stuff</font><font color="#CCCCCC"> where you find</font><font color="#E5E5E5"> Z</font>

475
00:22:13,640 --> 00:22:18,580
is a range where<font color="#E5E5E5"> you want to start and</font>

476
00:22:15,170 --> 00:22:21,530
end and use that as a in your requests

477
00:22:18,580 --> 00:22:24,740
the nice<font color="#CCCCCC"> thing with videos is most or</font>

478
00:22:21,530 --> 00:22:28,030
<font color="#CCCCCC">what all browsers that I know of or</font><font color="#E5E5E5"> that</font>

479
00:22:24,740 --> 00:22:30,620
<font color="#E5E5E5">I use which is Chrome Firefox Safari</font>

480
00:22:28,030 --> 00:22:35,960
supports us out of the box<font color="#E5E5E5"> so when you</font>

481
00:22:30,620 --> 00:22:39,199
have a very very simple HTML file you

482
00:22:35,960 --> 00:22:42,800
have an<font color="#CCCCCC"> html5 this video entry and you</font>

483
00:22:39,200 --> 00:22:44,930
<font color="#CCCCCC">define for example</font><font color="#E5E5E5"> a swift object Big</font>

484
00:22:42,800 --> 00:22:47,780
Buck Bunny in this case and when you do

485
00:22:44,930 --> 00:22:50,330
so your browser<font color="#E5E5E5"> actually generates a</font>

486
00:22:47,780 --> 00:22:53,530
preview for you<font color="#E5E5E5"> if you look at the</font>

487
00:22:50,330 --> 00:22:55,280
second line<font color="#E5E5E5"> there it's a get request and</font>

488
00:22:53,530 --> 00:22:57,260
actually the

489
00:22:55,280 --> 00:22:59,860
a video file is more than<font color="#E5E5E5"> 600 megabytes</font>

490
00:22:57,260 --> 00:23:02,330
in size<font color="#E5E5E5"> but your browser will only</font>

491
00:22:59,860 --> 00:23:04,790
retrieve the first few megabytes<font color="#E5E5E5"> and</font>

492
00:23:02,330 --> 00:23:07,310
create a son or a preview for<font color="#E5E5E5"> you</font><font color="#CCCCCC"> and</font>

493
00:23:04,790 --> 00:23:09,830
the same is true<font color="#E5E5E5"> when</font><font color="#CCCCCC"> you do a seek</font><font color="#E5E5E5"> in</font>

494
00:23:07,310 --> 00:23:12,470
the video<font color="#CCCCCC"> using</font><font color="#E5E5E5"> a browser and it won't</font>

495
00:23:09,830 --> 00:23:14,810
load all the data it<font color="#CCCCCC"> just jumps in the</font>

496
00:23:12,470 --> 00:23:16,790
fire and this is supported<font color="#CCCCCC"> out of the</font>

497
00:23:14,810 --> 00:23:21,169
<font color="#CCCCCC">box</font><font color="#E5E5E5"> by Swift which is makes it really</font>

498
00:23:16,790 --> 00:23:30,230
easy usable for video and other kind of

499
00:23:21,170 --> 00:23:32,510
<font color="#E5E5E5">data versioning is another tool or is</font>

500
00:23:30,230 --> 00:23:34,820
another very helpful feature of Swift

501
00:23:32,510 --> 00:23:37,850
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> actually when you have a</font>

502
00:23:34,820 --> 00:23:41,419
container<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can specify a location or</font>

503
00:23:37,850 --> 00:23:43,219
<font color="#E5E5E5">another container</font><font color="#CCCCCC"> actually to use</font><font color="#E5E5E5"> so</font>

504
00:23:41,420 --> 00:23:45,920
whenever you overwrite<font color="#CCCCCC"> data for example</font>

505
00:23:43,220 --> 00:23:47,570
<font color="#CCCCCC">an existing object</font><font color="#E5E5E5"> the older version</font>

506
00:23:45,920 --> 00:23:50,060
will be<font color="#E5E5E5"> still stored in your archive</font>

507
00:23:47,570 --> 00:23:52,250
container<font color="#E5E5E5"> the same is</font><font color="#CCCCCC"> true for delete</font>

508
00:23:50,060 --> 00:23:55,520
requests if you send a delete<font color="#CCCCCC"> request to</font>

509
00:23:52,250 --> 00:23:58,130
a container where versioning is actually

510
00:23:55,520 --> 00:24:00,080
enabled it will risk it will store the

511
00:23:58,130 --> 00:24:03,590
last version of<font color="#E5E5E5"> your object as well in</font>

512
00:24:00,080 --> 00:24:05,360
the<font color="#E5E5E5"> archive container and</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> additional</font>

513
00:24:03,590 --> 00:24:08,409
delete marker so one of<font color="#E5E5E5"> these</font><font color="#CCCCCC"> two</font>

514
00:24:05,360 --> 00:24:11,449
objects here<font color="#CCCCCC"> that have both</font><font color="#E5E5E5"> timestamps</font>

515
00:24:08,410 --> 00:24:14,090
is actually an empty object<font color="#CCCCCC"> at 0</font><font color="#E5E5E5"> bite</font>

516
00:24:11,450 --> 00:24:21,080
<font color="#E5E5E5">sized object and it has a content type</font>

517
00:24:14,090 --> 00:24:22,490
of a delete delete delete object when

518
00:24:21,080 --> 00:24:24,169
<font color="#E5E5E5">you're writing applications</font><font color="#CCCCCC"> that are</font>

519
00:24:22,490 --> 00:24:27,380
running<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> browser for</font><font color="#E5E5E5"> example using</font>

520
00:24:24,170 --> 00:24:29,990
angular<font color="#CCCCCC"> JS and you're</font><font color="#E5E5E5"> serving the</font>

521
00:24:27,380 --> 00:24:32,540
angular aside from different<font color="#E5E5E5"> domains and</font>

522
00:24:29,990 --> 00:24:34,820
<font color="#E5E5E5">your</font><font color="#CCCCCC"> Swift cluster</font><font color="#E5E5E5"> runs then you need to</font>

523
00:24:32,540 --> 00:24:38,780
<font color="#CCCCCC">enable a feature called course</font><font color="#E5E5E5"> which is</font>

524
00:24:34,820 --> 00:24:40,490
a cross origin resource sharing so let's

525
00:24:38,780 --> 00:24:43,700
assume Swift runs on one<font color="#CCCCCC"> domain or</font>

526
00:24:40,490 --> 00:24:46,010
subdomain<font color="#CCCCCC"> your static website or your</font>

527
00:24:43,700 --> 00:24:48,710
static file with angular<font color="#CCCCCC"> staff runs on a</font>

528
00:24:46,010 --> 00:24:50,720
<font color="#CCCCCC">different one by</font><font color="#E5E5E5"> default it's not</font>

529
00:24:48,710 --> 00:24:53,330
possible<font color="#CCCCCC"> for</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> application running</font><font color="#E5E5E5"> in</font>

530
00:24:50,720 --> 00:24:55,310
your browser<font color="#CCCCCC"> to retrieve or to use the</font>

531
00:24:53,330 --> 00:24:58,879
data<font color="#E5E5E5"> that is used for</font><font color="#CCCCCC"> example from a</font>

532
00:24:55,310 --> 00:25:02,720
container listing<font color="#CCCCCC"> and to</font><font color="#E5E5E5"> enable this one</font>

533
00:24:58,880 --> 00:25:04,790
<font color="#E5E5E5">you again set a special metadata flag on</font>

534
00:25:02,720 --> 00:25:07,530
a container<font color="#CCCCCC"> that</font><font color="#E5E5E5"> actually makes this</font>

535
00:25:04,790 --> 00:25:12,870
possible<font color="#E5E5E5"> or</font>

536
00:25:07,530 --> 00:25:14,450
<font color="#CCCCCC">a little bit rough voice let's have a</font>

537
00:25:12,870 --> 00:25:21,629
look at a few<font color="#CCCCCC"> examples</font>

538
00:25:14,450 --> 00:25:22,890
so I mentioned angular early on<font color="#E5E5E5"> what</font>

539
00:25:21,630 --> 00:25:25,320
we're doing<font color="#CCCCCC"> here or what we're having</font>

540
00:25:22,890 --> 00:25:29,190
<font color="#E5E5E5">here is a base URL which in this case is</font>

541
00:25:25,320 --> 00:25:32,179
a public readable container<font color="#E5E5E5"> and I use in</font>

542
00:25:29,190 --> 00:25:34,950
this case a prefix called image and

543
00:25:32,180 --> 00:25:36,690
doing an HTTP<font color="#CCCCCC"> request which</font><font color="#E5E5E5"> actually</font>

544
00:25:34,950 --> 00:25:39,300
retrieves<font color="#E5E5E5"> the list of objects and that</font>

545
00:25:36,690 --> 00:25:42,810
arm container<font color="#E5E5E5"> and once this request has</font>

546
00:25:39,300 --> 00:25:45,720
<font color="#CCCCCC">been done I store the list</font><font color="#E5E5E5"> of images</font>

547
00:25:42,810 --> 00:25:48,030
<font color="#E5E5E5">somewhere in my</font><font color="#CCCCCC"> application and call a</font>

548
00:25:45,720 --> 00:25:50,010
function<font color="#CCCCCC"> called show image in the show</font>

549
00:25:48,030 --> 00:25:52,170
image<font color="#CCCCCC"> function actually</font><font color="#E5E5E5"> does an</font>

550
00:25:50,010 --> 00:25:54,150
<font color="#E5E5E5">additional</font><font color="#CCCCCC"> eh request because I want to</font>

551
00:25:52,170 --> 00:25:57,360
retrieve some metadata for this image in

552
00:25:54,150 --> 00:26:00,060
this case<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> ever look</font><font color="#E5E5E5"> at the for</font>

553
00:25:57,360 --> 00:26:04,199
<font color="#CCCCCC">example and given you</font><font color="#E5E5E5"> out below later on</font>

554
00:26:00,060 --> 00:26:06,389
<font color="#E5E5E5">I share that</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> you but actually</font><font color="#CCCCCC"> it's</font>

555
00:26:04,200 --> 00:26:08,850
<font color="#E5E5E5">it's a very similar simple angular</font>

556
00:26:06,390 --> 00:26:12,450
application<font color="#E5E5E5"> that browsers or is a basic</font>

557
00:26:08,850 --> 00:26:15,659
image gallery<font color="#E5E5E5"> build on top of Swift so</font>

558
00:26:12,450 --> 00:26:18,020
what actually<font color="#E5E5E5"> is done here is it shows</font>

559
00:26:15,660 --> 00:26:20,490
an image<font color="#CCCCCC"> that is stored in</font><font color="#E5E5E5"> Swift and</font>

560
00:26:18,020 --> 00:26:25,110
their head<font color="#CCCCCC"> request</font><font color="#E5E5E5"> that I just mentioned</font>

561
00:26:20,490 --> 00:26:27,180
is happening in the background<font color="#E5E5E5"> so there</font>

562
00:26:25,110 --> 00:26:29,490
is a metadata field called<font color="#E5E5E5"> X object--</font>

563
00:26:27,180 --> 00:26:31,710
<font color="#CCCCCC">Media caption and the caption value in</font>

564
00:26:29,490 --> 00:26:35,010
this case is<font color="#E5E5E5"> then shown below the image</font>

565
00:26:31,710 --> 00:26:38,070
in this case<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example very</font><font color="#E5E5E5"> simple but</font>

566
00:26:35,010 --> 00:26:42,150
quite powerful if you want to use or

567
00:26:38,070 --> 00:26:43,260
build on<font color="#E5E5E5"> top</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that so how do you get</font>

568
00:26:42,150 --> 00:26:47,160
<font color="#E5E5E5">the</font><font color="#CCCCCC"> data into</font><font color="#E5E5E5"> Swift</font>

569
00:26:43,260 --> 00:26:49,230
well turns out I have well I use a

570
00:26:47,160 --> 00:26:52,500
software called<font color="#CCCCCC"> adobe lightroom which is</font>

571
00:26:49,230 --> 00:26:53,550
unfortunately not<font color="#CCCCCC"> open-source but it's</font>

572
00:26:52,500 --> 00:26:55,320
easily extendable

573
00:26:53,550 --> 00:26:57,330
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can write your own</font><font color="#CCCCCC"> plug-ins for</font><font color="#E5E5E5"> this</font>

574
00:26:55,320 --> 00:27:01,740
it's<font color="#E5E5E5"> not written in Python or something</font>

575
00:26:57,330 --> 00:27:03,510
similar<font color="#E5E5E5"> it's written in Lua but it's a</font>

576
00:27:01,740 --> 00:27:06,030
<font color="#E5E5E5">concept of</font><font color="#CCCCCC"> champ URLs makes it really</font>

577
00:27:03,510 --> 00:27:07,170
easy<font color="#E5E5E5"> to include that within this</font>

578
00:27:06,030 --> 00:27:09,629
application<font color="#E5E5E5"> as well</font><font color="#CCCCCC"> or other</font>

579
00:27:07,170 --> 00:27:12,090
applications<font color="#E5E5E5"> so I just need to</font><font color="#CCCCCC"> compute</font>

580
00:27:09,630 --> 00:27:15,630
or pre compute some<font color="#E5E5E5"> this signed URL and</font>

581
00:27:12,090 --> 00:27:18,810
reuse it and what I have done or running

582
00:27:15,630 --> 00:27:20,580
at home is a small plugins that<font color="#E5E5E5"> is also</font>

583
00:27:18,810 --> 00:27:22,980
<font color="#E5E5E5">available on my github account</font>

584
00:27:20,580 --> 00:27:25,139
where you just use the storage URL with

585
00:27:22,980 --> 00:27:27,690
a<font color="#E5E5E5"> temperature of the key and you</font><font color="#CCCCCC"> can</font>

586
00:27:25,140 --> 00:27:35,340
directly export from<font color="#E5E5E5"> Lightroom your</font>

587
00:27:27,690 --> 00:27:37,260
pictures to<font color="#E5E5E5"> op stacks whiffed if you</font>

588
00:27:35,340 --> 00:27:39,480
want to use<font color="#E5E5E5"> pison</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> the probably</font><font color="#CCCCCC"> the</font>

589
00:27:37,260 --> 00:27:42,330
simplest<font color="#E5E5E5"> way is</font><font color="#CCCCCC"> to actually use a pison</font>

590
00:27:39,480 --> 00:27:44,250
<font color="#E5E5E5">swift client itself which is the swift</font>

591
00:27:42,330 --> 00:27:47,178
<font color="#CCCCCC">commander interface itself but it's also</font>

592
00:27:44,250 --> 00:27:51,419
included<font color="#CCCCCC"> or well</font><font color="#E5E5E5"> it also includes</font>

593
00:27:47,179 --> 00:27:52,110
<font color="#E5E5E5">reusable</font><font color="#CCCCCC"> parts or libraries within</font><font color="#E5E5E5"> your</font>

594
00:27:51,419 --> 00:27:55,769
application

595
00:27:52,110 --> 00:27:57,389
<font color="#E5E5E5">and again what you're doing there is you</font>

596
00:27:55,769 --> 00:27:59,130
get an authentication token<font color="#CCCCCC"> in the</font>

597
00:27:57,389 --> 00:28:02,399
storage URL using<font color="#CCCCCC"> your</font><font color="#E5E5E5"> username password</font>

598
00:27:59,130 --> 00:28:06,510
<font color="#E5E5E5">and from that</font><font color="#CCCCCC"> on you</font><font color="#E5E5E5"> have actions like</font>

599
00:28:02,399 --> 00:28:08,969
get account put container put object

600
00:28:06,510 --> 00:28:12,210
list containing as stuff like that<font color="#E5E5E5"> and</font>

601
00:28:08,970 --> 00:28:15,840
it's<font color="#CCCCCC"> really easy to</font><font color="#E5E5E5"> use within your</font>

602
00:28:12,210 --> 00:28:19,019
application when your application<font color="#E5E5E5"> wants</font>

603
00:28:15,840 --> 00:28:21,389
<font color="#CCCCCC">to give our</font><font color="#E5E5E5"> temporary</font><font color="#CCCCCC"> urls you need this</font>

604
00:28:19,019 --> 00:28:24,149
<font color="#E5E5E5">temperature meter key and it's a good</font>

605
00:28:21,389 --> 00:28:26,158
approach to<font color="#CCCCCC"> actually first try to check</font>

606
00:28:24,149 --> 00:28:29,340
if there's a key already existing<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the</font>

607
00:28:26,159 --> 00:28:31,769
container or account and if not create

608
00:28:29,340 --> 00:28:35,100
one<font color="#E5E5E5"> randomly or create a randomly one</font>

609
00:28:31,769 --> 00:28:40,679
and set that on a on the account for

610
00:28:35,100 --> 00:28:42,719
<font color="#E5E5E5">example and if you want to have a closer</font>

611
00:28:40,679 --> 00:28:45,330
look<font color="#E5E5E5"> at how to do this without wisp</font><font color="#CCCCCC"> Ison</font>

612
00:28:42,720 --> 00:28:48,779
<font color="#E5E5E5">um there's an</font><font color="#CCCCCC"> application called</font><font color="#E5E5E5"> jungle</font>

613
00:28:45,330 --> 00:28:51,870
<font color="#CCCCCC">swift browser</font><font color="#E5E5E5"> as a name implies</font><font color="#CCCCCC"> it's</font>

614
00:28:48,779 --> 00:28:53,990
written in Django<font color="#E5E5E5"> and Python</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that</font>

615
00:28:51,870 --> 00:28:57,120
actually uses<font color="#E5E5E5"> all these concepts like</font>

616
00:28:53,990 --> 00:28:58,850
<font color="#CCCCCC">tempe arts farm</font><font color="#E5E5E5"> post for uploading data</font>

617
00:28:57,120 --> 00:29:02,428
directly to<font color="#CCCCCC"> swift</font>

618
00:28:58,850 --> 00:29:05,100
<font color="#E5E5E5">the listings with prefixes public urls</font>

619
00:29:02,429 --> 00:29:07,500
whatnot and it's really easy bill<font color="#CCCCCC"> or I</font>

620
00:29:05,100 --> 00:29:10,469
think<font color="#CCCCCC"> at least</font><font color="#E5E5E5"> it's a really easy to</font>

621
00:29:07,500 --> 00:29:16,440
read<font color="#E5E5E5"> Python code so please have a look</font>

622
00:29:10,470 --> 00:29:19,760
<font color="#E5E5E5">at that one</font><font color="#CCCCCC"> all right so how do I get</font>

623
00:29:16,440 --> 00:29:22,620
started<font color="#CCCCCC"> there are different ways and for</font>

624
00:29:19,760 --> 00:29:25,769
<font color="#CCCCCC">years we use the</font><font color="#E5E5E5"> concept of code swift</font>

625
00:29:22,620 --> 00:29:27,949
<font color="#CCCCCC">all-in-one installations</font><font color="#E5E5E5"> that we are</font>

626
00:29:25,769 --> 00:29:30,450
still using as the<font color="#CCCCCC"> S</font><font color="#E5E5E5"> Swift developers</font>

627
00:29:27,950 --> 00:29:32,010
but it's a<font color="#E5E5E5"> little bit overkill probably</font>

628
00:29:30,450 --> 00:29:33,960
if you just want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> start out because</font>

629
00:29:32,010 --> 00:29:37,919
it's a<font color="#E5E5E5"> very long</font><font color="#CCCCCC"> document you need to do</font>

630
00:29:33,960 --> 00:29:40,980
<font color="#E5E5E5">a lot of stuff</font><font color="#CCCCCC"> based</font><font color="#E5E5E5"> on that we have</font>

631
00:29:37,919 --> 00:29:42,929
<font color="#E5E5E5">some vagrant environments that you can</font>

632
00:29:40,980 --> 00:29:44,220
<font color="#CCCCCC">also use</font><font color="#E5E5E5"> but you can make your life</font><font color="#CCCCCC"> a</font>

633
00:29:42,929 --> 00:29:46,380
little<font color="#E5E5E5"> bit simpler if you just want to</font>

634
00:29:44,220 --> 00:29:51,210
<font color="#E5E5E5">try</font><font color="#CCCCCC"> out some things for example</font><font color="#E5E5E5"> using</font>

635
00:29:46,380 --> 00:29:53,880
<font color="#E5E5E5">the API</font><font color="#CCCCCC"> dr. Swift is a it's something</font>

636
00:29:51,210 --> 00:29:56,370
that we<font color="#E5E5E5"> were worked on like Harvey or a</font>

637
00:29:53,880 --> 00:29:58,679
year<font color="#E5E5E5"> ago</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> as like a POC stuff but it</font>

638
00:29:56,370 --> 00:30:02,459
turned out it<font color="#E5E5E5"> runs pretty well for a</font>

639
00:29:58,679 --> 00:30:04,440
like showcasing stuff<font color="#CCCCCC"> it's a very</font><font color="#E5E5E5"> simple</font>

640
00:30:02,460 --> 00:30:08,220
environment<font color="#CCCCCC"> where you run everything</font><font color="#E5E5E5"> in</font>

641
00:30:04,440 --> 00:30:11,760
<font color="#E5E5E5">a singer' docker container and you can</font>

642
00:30:08,220 --> 00:30:15,270
<font color="#CCCCCC">just start interacting with Z with the</font>

643
00:30:11,760 --> 00:30:17,850
<font color="#E5E5E5">REST API and with the REST API itself</font><font color="#CCCCCC"> I</font>

644
00:30:15,270 --> 00:30:20,399
would<font color="#CCCCCC"> encourage</font><font color="#E5E5E5"> you to</font><font color="#CCCCCC"> use Python Swift</font>

645
00:30:17,850 --> 00:30:23,399
client<font color="#CCCCCC"> and if you use these credentials</font>

646
00:30:20,399 --> 00:30:25,500
on the slide<font color="#E5E5E5"> together with this docker</font>

647
00:30:23,399 --> 00:30:28,350
<font color="#E5E5E5">Swift environment arms and you can</font>

648
00:30:25,500 --> 00:30:35,070
easily start using and playing with

649
00:30:28,350 --> 00:30:36,779
Swift<font color="#CCCCCC"> and zero Swift</font><font color="#E5E5E5"> API</font><font color="#CCCCCC"> alright that's</font>

650
00:30:35,070 --> 00:30:38,189
it<font color="#E5E5E5"> was a little bit faster than I</font>

651
00:30:36,779 --> 00:30:43,919
<font color="#CCCCCC">thought but we have more time for</font>

652
00:30:38,190 --> 00:30:47,640
<font color="#E5E5E5">questions which is also great so any</font>

653
00:30:43,919 --> 00:30:52,760
<font color="#E5E5E5">questions everything unclear everything</font>

654
00:30:47,640 --> 00:30:52,760
clear yeah

655
00:31:10,950 --> 00:31:17,380
No so actually what so so the question

656
00:31:14,140 --> 00:31:19,210
<font color="#E5E5E5">is what happens when you split up for</font>

657
00:31:17,380 --> 00:31:21,520
<font color="#CCCCCC">example you're</font><font color="#E5E5E5"> a 50 gigabyte video file</font>

658
00:31:19,210 --> 00:31:24,940
<font color="#E5E5E5">and you wanted to arrange requests if</font>

659
00:31:21,520 --> 00:31:30,879
you need a<font color="#E5E5E5"> different object ID</font><font color="#CCCCCC"> no you</font>

660
00:31:24,940 --> 00:31:32,860
don't<font color="#E5E5E5"> need so so let's assume you name</font>

661
00:31:30,880 --> 00:31:35,560
your chunks like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> one like chunk and</font>

662
00:31:32,860 --> 00:31:37,000
then a number<font color="#E5E5E5"> an increasing number so</font>

663
00:31:35,560 --> 00:31:41,159
you have all this chunk objects there

664
00:31:37,000 --> 00:31:45,400
<font color="#CCCCCC">and finally uploading</font><font color="#E5E5E5"> a manifest object</font>

665
00:31:41,160 --> 00:31:47,470
<font color="#CCCCCC">using this well object names there if</font>

666
00:31:45,400 --> 00:31:49,960
you just<font color="#CCCCCC"> use this object</font><font color="#E5E5E5"> name</font><font color="#CCCCCC"> Swift</font>

667
00:31:47,470 --> 00:31:52,510
<font color="#E5E5E5">itself and the</font><font color="#CCCCCC"> Swift proxy server itself</font>

668
00:31:49,960 --> 00:31:55,300
<font color="#E5E5E5">we take care of accessing the other</font>

669
00:31:52,510 --> 00:31:58,780
chunks<font color="#E5E5E5"> of the of</font><font color="#CCCCCC"> that fire so if you</font>

670
00:31:55,300 --> 00:32:00,639
just stream<font color="#E5E5E5"> it</font><font color="#CCCCCC"> from the proxy server the</font>

671
00:31:58,780 --> 00:32:02,500
proxy server will make sure that<font color="#CCCCCC"> you</font>

672
00:32:00,640 --> 00:32:04,990
<font color="#E5E5E5">just need to send on URL whatever</font>

673
00:32:02,500 --> 00:32:11,370
<font color="#CCCCCC">Singers can taken care of for</font><font color="#E5E5E5"> you so you</font>

674
00:32:04,990 --> 00:32:15,240
<font color="#E5E5E5">don't need to play with us yeah</font><font color="#CCCCCC"> serrator</font>

675
00:32:11,370 --> 00:32:15,239
what's a little<font color="#CCCCCC"> first you first</font>

676
00:32:57,130 --> 00:33:01,760
<font color="#E5E5E5">okay so the question is if you have a</font>

677
00:32:59,690 --> 00:33:04,669
temporary<font color="#E5E5E5"> signed URL and you have a</font>

678
00:33:01,760 --> 00:33:07,040
<font color="#E5E5E5">cache in front of the server</font>

679
00:33:04,669 --> 00:33:11,210
is there a back best practice to do to

680
00:33:07,040 --> 00:33:13,549
use this well<font color="#CCCCCC"> the swift proxy itself</font>

681
00:33:11,210 --> 00:33:16,570
will<font color="#CCCCCC"> send heaters</font><font color="#E5E5E5"> along with</font><font color="#CCCCCC"> the</font>

682
00:33:13,549 --> 00:33:19,610
response<font color="#E5E5E5"> to not cache this object itself</font>

683
00:33:16,570 --> 00:33:21,830
<font color="#E5E5E5">your question is more like</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> what how</font>

684
00:33:19,610 --> 00:33:24,439
do I ensure that<font color="#E5E5E5"> this</font><font color="#CCCCCC"> object which might</font>

685
00:33:21,830 --> 00:33:27,889
be accessed<font color="#E5E5E5"> very frequently and after</font>

686
00:33:24,440 --> 00:33:32,650
some time<font color="#CCCCCC"> runs into the</font><font color="#E5E5E5"> expiration time</font>

687
00:33:27,890 --> 00:33:35,660
probably<font color="#CCCCCC"> that it's still accessible</font><font color="#E5E5E5"> well</font>

688
00:33:32,650 --> 00:33:37,790
that's a good<font color="#E5E5E5"> question</font><font color="#CCCCCC"> um</font><font color="#E5E5E5"> there are</font>

689
00:33:35,660 --> 00:33:40,730
different ways<font color="#CCCCCC"> to do so so if this</font>

690
00:33:37,790 --> 00:33:42,559
object<font color="#E5E5E5"> is always should</font><font color="#CCCCCC"> be always public</font>

691
00:33:40,730 --> 00:33:51,520
readable<font color="#CCCCCC"> and I</font><font color="#E5E5E5"> would just put it in a</font>

692
00:33:42,559 --> 00:33:51,520
public readable container<font color="#E5E5E5"> if not sorry</font>

693
00:33:58,610 --> 00:34:16,109
yes<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> okay so to repeat this part the</font>

694
00:34:14,190 --> 00:34:19,349
client gives out a special<font color="#CCCCCC"> UI or wants</font>

695
00:34:16,109 --> 00:34:21,659
<font color="#CCCCCC">to give out a</font><font color="#E5E5E5"> special URL for a private</font>

696
00:34:19,349 --> 00:34:24,210
object<font color="#E5E5E5"> that might be accessed very</font>

697
00:34:21,659 --> 00:34:26,940
frequently<font color="#E5E5E5"> well in that case I wouldn't</font>

698
00:34:24,210 --> 00:34:30,119
<font color="#E5E5E5">give out the actually temporary URL</font><font color="#CCCCCC"> to</font>

699
00:34:26,940 --> 00:34:32,700
share<font color="#CCCCCC"> up with but and you are pointing</font>

700
00:34:30,119 --> 00:34:36,000
to your application<font color="#E5E5E5"> and your application</font>

701
00:34:32,699 --> 00:34:38,418
then creates temporary URL<font color="#E5E5E5"> it's per</font>

702
00:34:36,000 --> 00:34:41,760
request or for<font color="#CCCCCC"> example for 60 seconds</font>

703
00:34:38,418 --> 00:34:43,710
<font color="#E5E5E5">and the reason for</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is if you for</font>

704
00:34:41,760 --> 00:34:45,510
<font color="#CCCCCC">example give out an application or</font><font color="#E5E5E5"> a</font>

705
00:34:43,710 --> 00:34:48,929
temporary URL<font color="#E5E5E5"> that is valid let's say</font>

706
00:34:45,510 --> 00:34:51,270
for a month<font color="#E5E5E5"> and your client decides</font>

707
00:34:48,929 --> 00:34:52,889
later<font color="#E5E5E5"> on well</font><font color="#CCCCCC"> that wasn't a good idea</font>

708
00:34:51,270 --> 00:34:55,560
that<font color="#CCCCCC"> I actually shared this</font><font color="#E5E5E5"> temporarily</font>

709
00:34:52,889 --> 00:34:58,470
you can't revoke it well you could

710
00:34:55,560 --> 00:35:00,089
invalidate and<font color="#CCCCCC"> overwrite you your</font>

711
00:34:58,470 --> 00:35:03,899
<font color="#CCCCCC">metadata starting temperature key of</font>

712
00:35:00,089 --> 00:35:06,240
course<font color="#E5E5E5"> to revoke this but it might be</font>

713
00:35:03,900 --> 00:35:08,430
<font color="#CCCCCC">actually much easier</font><font color="#E5E5E5"> to handle this in</font>

714
00:35:06,240 --> 00:35:11,490
an application<font color="#CCCCCC"> that then simply returns</font>

715
00:35:08,430 --> 00:35:17,779
a redirect to<font color="#E5E5E5"> the actually signed</font>

716
00:35:11,490 --> 00:35:21,029
temporary request make sense<font color="#E5E5E5"> or so</font>

717
00:35:17,780 --> 00:35:25,290
actually what<font color="#E5E5E5"> you had in</font><font color="#CCCCCC"> mind is part</font><font color="#E5E5E5"> of</font>

718
00:35:21,030 --> 00:35:26,970
<font color="#E5E5E5">the Swift browser and I'm using very</font>

719
00:35:25,290 --> 00:35:30,720
similar<font color="#E5E5E5"> approach</font><font color="#CCCCCC"> here I'm generating</font>

720
00:35:26,970 --> 00:35:33,180
like a random<font color="#E5E5E5"> UID and the</font><font color="#CCCCCC"> DES</font><font color="#E5E5E5"> stored</font>

721
00:35:30,720 --> 00:35:35,609
inside<font color="#E5E5E5"> the Swift browser and then if</font>

722
00:35:33,180 --> 00:35:37,410
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is accessed</font><font color="#E5E5E5"> it creates a temporary</font>

723
00:35:35,609 --> 00:35:40,920
URL for you and redirect the browser

724
00:35:37,410 --> 00:35:43,859
directly<font color="#E5E5E5"> so from a browser point of view</font>

725
00:35:40,920 --> 00:35:45,270
and just<font color="#E5E5E5"> accessing this URL and the</font>

726
00:35:43,859 --> 00:35:47,759
browser follows the redirect and

727
00:35:45,270 --> 00:35:49,230
downloads the object in<font color="#E5E5E5"> that case but</font>

728
00:35:47,760 --> 00:35:52,099
<font color="#CCCCCC">that</font><font color="#E5E5E5"> would really require a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit</font>

729
00:35:49,230 --> 00:35:55,099
<font color="#E5E5E5">of logic at least on on your client</font>

730
00:35:52,099 --> 00:35:55,099
application

731
00:35:58,060 --> 00:36:01,240
more questions

732
00:36:03,650 --> 00:36:15,980
<font color="#CCCCCC">alright then just one shot notice the</font>

733
00:36:14,420 --> 00:36:17,870
slides are available at the<font color="#E5E5E5"> fossum</font>

734
00:36:15,980 --> 00:36:20,450
website on the<font color="#CCCCCC"> target earth so if you</font>

735
00:36:17,870 --> 00:36:23,290
want to have a look<font color="#E5E5E5"> at the links please</font>

736
00:36:20,450 --> 00:36:23,290
<font color="#CCCCCC">refer to</font><font color="#E5E5E5"> yourself</font>

