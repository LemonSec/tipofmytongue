1
00:00:09,240 --> 00:00:13,900
so hi<font color="#CCCCCC"> everybody my name is focus</font>

2
00:00:11,830 --> 00:00:17,560
<font color="#CCCCCC">ammonius I'm working</font><font color="#E5E5E5"> for a small</font><font color="#CCCCCC"> company</font>

3
00:00:13,900 --> 00:00:19,750
called<font color="#CCCCCC"> ASAP we are doing virtual</font>

4
00:00:17,560 --> 00:00:23,769
machines<font color="#E5E5E5"> java virtual machines</font><font color="#CCCCCC"> a</font>

5
00:00:19,750 --> 00:00:28,179
commercial<font color="#E5E5E5"> one called</font><font color="#CCCCCC"> STP JVM we are</font>

6
00:00:23,769 --> 00:00:31,509
doing<font color="#E5E5E5"> the PowerPC ax and s 290 ports in</font>

7
00:00:28,179 --> 00:00:33,310
the<font color="#E5E5E5"> open JDK which I am leading since</font>

8
00:00:31,509 --> 00:00:35,050
recently<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are also doing a binary</font>

9
00:00:33,310 --> 00:00:36,700
distribution of the open<font color="#CCCCCC"> Jellico called</font>

10
00:00:35,050 --> 00:00:40,000
<font color="#CCCCCC">sub</font><font color="#E5E5E5"> machine you can grab some stickers</font>

11
00:00:36,700 --> 00:00:41,950
after the talk if<font color="#E5E5E5"> you want</font><font color="#CCCCCC"> now let's</font>

12
00:00:40,000 --> 00:00:45,490
concentrate<font color="#E5E5E5"> on class data sharing in the</font>

13
00:00:41,950 --> 00:00:50,530
<font color="#E5E5E5">hotspot VM so my other speakers have</font>

14
00:00:45,490 --> 00:00:53,110
laid a good foundation<font color="#E5E5E5"> for the for this</font>

15
00:00:50,530 --> 00:00:55,060
topic<font color="#CCCCCC"> and I will</font><font color="#E5E5E5"> concentrate on how</font>

16
00:00:53,110 --> 00:00:57,070
class data sharing is<font color="#CCCCCC"> actually working</font>

17
00:00:55,060 --> 00:00:58,900
in<font color="#CCCCCC"> the hotspot</font><font color="#E5E5E5"> I am how the new</font>

18
00:00:57,070 --> 00:01:00,430
application class of that<font color="#E5E5E5"> chair</font><font color="#CCCCCC"> trusts</font>

19
00:00:58,900 --> 00:01:03,910
data sharing which will come with<font color="#E5E5E5"> Java</font>

20
00:01:00,430 --> 00:01:06,700
<font color="#E5E5E5">10 will work and</font><font color="#CCCCCC"> share</font><font color="#E5E5E5"> some details</font>

21
00:01:03,910 --> 00:01:09,550
<font color="#E5E5E5">about how about</font><font color="#CCCCCC"> the implementation and</font>

22
00:01:06,700 --> 00:01:15,780
<font color="#E5E5E5">the current restrictions so my slides</font>

23
00:01:09,550 --> 00:01:20,380
<font color="#E5E5E5">they are all on github</font><font color="#CCCCCC"> so if you know</font>

24
00:01:15,780 --> 00:01:21,420
sorry<font color="#E5E5E5"> for that</font><font color="#CCCCCC"> yeah you</font><font color="#E5E5E5"> can look at them</font>

25
00:01:20,380 --> 00:01:25,658
later<font color="#E5E5E5"> if you want</font>

26
00:01:21,420 --> 00:01:27,460
so class later sharing<font color="#E5E5E5"> it's supposed to</font>

27
00:01:25,659 --> 00:01:30,010
<font color="#CCCCCC">cache pre-process class meta data on</font>

28
00:01:27,460 --> 00:01:31,419
disk<font color="#E5E5E5"> to improve</font><font color="#CCCCCC"> startup performance and</font>

29
00:01:30,010 --> 00:01:34,990
reduce<font color="#E5E5E5"> memory footprint effort at</font>

30
00:01:31,420 --> 00:01:37,659
several<font color="#CCCCCC"> times today so short history of</font>

31
00:01:34,990 --> 00:01:40,298
<font color="#CCCCCC">trust</font><font color="#E5E5E5"> data sharing in the hotspot um it</font>

32
00:01:37,659 --> 00:01:43,299
was introduced since<font color="#E5E5E5"> quite</font><font color="#CCCCCC"> some time in</font>

33
00:01:40,299 --> 00:01:45,729
<font color="#CCCCCC">JDK 1.5 in 2004 already but at that time</font>

34
00:01:43,299 --> 00:01:47,590
it was quite restricted so it only

35
00:01:45,729 --> 00:01:49,690
supported the client vm and see what you

36
00:01:47,590 --> 00:01:54,369
<font color="#E5E5E5">see and it could only be used for</font>

37
00:01:49,690 --> 00:01:56,770
caching system classes<font color="#CCCCCC"> it was</font><font color="#E5E5E5"> done at</font>

38
00:01:54,369 --> 00:01:58,720
that<font color="#CCCCCC"> time</font><font color="#E5E5E5"> it was in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> Sangha</font><font color="#CCCCCC"> JDK it</font>

39
00:01:56,770 --> 00:02:02,500
was done in<font color="#E5E5E5"> the initial</font><font color="#CCCCCC"> contribution for</font>

40
00:01:58,720 --> 00:02:06,010
open JDK<font color="#E5E5E5"> 6 and 7 then</font><font color="#CCCCCC"> sometime</font><font color="#E5E5E5"> nothing</font>

41
00:02:02,500 --> 00:02:08,128
happened<font color="#E5E5E5"> on</font><font color="#CCCCCC"> this topic since but in in</font>

42
00:02:06,010 --> 00:02:10,720
<font color="#E5E5E5">JDK 9 there were several improvements</font>

43
00:02:08,128 --> 00:02:11,319
<font color="#CCCCCC">support for the server VM was</font><font color="#E5E5E5"> added for</font>

44
00:02:10,720 --> 00:02:15,370
<font color="#CCCCCC">jiwan's</font>

45
00:02:11,319 --> 00:02:17,410
parallel and purchases<font color="#CCCCCC"> also</font><font color="#E5E5E5"> support for</font>

46
00:02:15,370 --> 00:02:18,230
<font color="#E5E5E5">shared string so not only classes</font><font color="#CCCCCC"> but</font>

47
00:02:17,410 --> 00:02:24,290
also strings

48
00:02:18,230 --> 00:02:25,760
<font color="#CCCCCC">to</font><font color="#E5E5E5"> share and with Java</font><font color="#CCCCCC"> nine application</font>

49
00:02:24,290 --> 00:02:27,980
for application class data sharing was

50
00:02:25,760 --> 00:02:29,780
added but in<font color="#E5E5E5"> JDK</font><font color="#CCCCCC"> 9 it's only</font><font color="#E5E5E5"> in the</font>

51
00:02:27,980 --> 00:02:33,260
commercial Oracle JDK<font color="#E5E5E5"> is commercial</font>

52
00:02:29,780 --> 00:02:35,750
feature<font color="#E5E5E5"> coming is open JDK 10 with</font><font color="#CCCCCC"> Jab</font>

53
00:02:33,260 --> 00:02:37,220
310 application last class data sharing

54
00:02:35,750 --> 00:02:41,060
has also been also<font color="#E5E5E5"> the end it to the</font>

55
00:02:37,220 --> 00:02:44,870
open JDK so this is actually a short

56
00:02:41,060 --> 00:02:47,120
overview<font color="#CCCCCC"> of the of</font><font color="#E5E5E5"> Andrews talk just for</font>

57
00:02:44,870 --> 00:02:49,480
for<font color="#E5E5E5"> people who didn't saw this so we</font>

58
00:02:47,120 --> 00:02:52,220
<font color="#E5E5E5">have on the right</font><font color="#CCCCCC"> side a Java class and</font>

59
00:02:49,480 --> 00:02:55,518
for every<font color="#E5E5E5"> Java class the hotspot has to</font>

60
00:02:52,220 --> 00:02:57,220
maintain a<font color="#E5E5E5"> certain kind of meta data</font>

61
00:02:55,519 --> 00:02:59,599
<font color="#E5E5E5">which is stored</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the meta space</font>

62
00:02:57,220 --> 00:03:02,000
<font color="#E5E5E5">previously this was the permanent</font>

63
00:02:59,599 --> 00:03:05,089
generation<font color="#E5E5E5"> since Java 8 is the meta</font>

64
00:03:02,000 --> 00:03:07,700
space<font color="#E5E5E5"> and with this is this is</font><font color="#CCCCCC"> a ol C++</font>

65
00:03:05,090 --> 00:03:09,769
object<font color="#E5E5E5"> so there is an instance class and</font>

66
00:03:07,700 --> 00:03:12,410
the instance class links back to<font color="#E5E5E5"> the</font>

67
00:03:09,769 --> 00:03:16,280
class object<font color="#E5E5E5"> which represents the type</font>

68
00:03:12,410 --> 00:03:18,379
of the of the foo object<font color="#CCCCCC"> and then we</font>

69
00:03:16,280 --> 00:03:20,450
<font color="#CCCCCC">have the class</font><font color="#E5E5E5"> loader data which also</font>

70
00:03:18,379 --> 00:03:23,090
links to<font color="#E5E5E5"> the class loader in the Java</font>

71
00:03:20,450 --> 00:03:25,160
heap and we have a class of<font color="#CCCCCC"> the data</font>

72
00:03:23,090 --> 00:03:25,849
graph<font color="#E5E5E5"> which links together all the class</font>

73
00:03:25,160 --> 00:03:27,440
<font color="#E5E5E5">loader data</font>

74
00:03:25,849 --> 00:03:29,988
so actually<font color="#CCCCCC"> all the class loader</font><font color="#E5E5E5"> so we</font>

75
00:03:27,440 --> 00:03:31,819
can so the VM has<font color="#CCCCCC"> a chance to iterate of</font>

76
00:03:29,989 --> 00:03:34,099
all the classes which it has loaded<font color="#E5E5E5"> so</font>

77
00:03:31,819 --> 00:03:35,780
far we have a constant pool which was

78
00:03:34,099 --> 00:03:38,899
<font color="#CCCCCC">mentioned before the constant pool cache</font>

79
00:03:35,780 --> 00:03:41,870
which<font color="#E5E5E5"> is used</font><font color="#CCCCCC"> to speed up</font><font color="#E5E5E5"> mainly</font><font color="#CCCCCC"> the</font>

80
00:03:38,900 --> 00:03:47,019
interpreter operation by caching a

81
00:03:41,870 --> 00:03:49,940
resolved<font color="#E5E5E5"> object the constant pool</font><font color="#CCCCCC"> and</font>

82
00:03:47,019 --> 00:03:51,680
finally after messed up data<font color="#CCCCCC"> the</font>

83
00:03:49,940 --> 00:03:53,480
constant master data which contains<font color="#E5E5E5"> the</font>

84
00:03:51,680 --> 00:03:56,090
<font color="#CCCCCC">bytecode</font><font color="#E5E5E5"> and other things which aren't</font>

85
00:03:53,480 --> 00:03:57,950
supposed to change and<font color="#CCCCCC"> final the end</font>

86
00:03:56,090 --> 00:03:59,569
after<font color="#E5E5E5"> end methods so the compiled</font>

87
00:03:57,950 --> 00:04:01,069
methods which reside in the code cache

88
00:03:59,569 --> 00:04:02,540
which<font color="#CCCCCC"> is again a different area</font><font color="#E5E5E5"> of the</font>

89
00:04:01,069 --> 00:04:07,760
heap<font color="#E5E5E5"> and which we don't touch in this</font>

90
00:04:02,540 --> 00:04:09,709
talk okay so how does<font color="#CCCCCC"> c.d.s work so</font>

91
00:04:07,760 --> 00:04:11,328
before we can<font color="#E5E5E5"> start to use class data</font>

92
00:04:09,709 --> 00:04:15,609
sharing in the hotspot<font color="#E5E5E5"> VM we first have</font>

93
00:04:11,329 --> 00:04:19,639
to<font color="#E5E5E5"> create the share archive so this is a</font>

94
00:04:15,609 --> 00:04:21,320
offline step and this<font color="#E5E5E5"> is also one</font><font color="#CCCCCC"> of the</font>

95
00:04:19,639 --> 00:04:23,539
problems of the class data sharing

96
00:04:21,320 --> 00:04:25,180
advantage and hotspot we will see<font color="#E5E5E5"> I will</font>

97
00:04:23,539 --> 00:04:28,130
talk about<font color="#CCCCCC"> this at the</font><font color="#E5E5E5"> end of my talk</font>

98
00:04:25,180 --> 00:04:29,120
when it comes to the limitations so by

99
00:04:28,130 --> 00:04:33,159
<font color="#CCCCCC">just calling</font><font color="#E5E5E5"> Java</font>

100
00:04:29,120 --> 00:04:35,600
- extra<font color="#CCCCCC"> are</font><font color="#E5E5E5"> done</font>

101
00:04:33,160 --> 00:04:38,300
<font color="#E5E5E5">there will happen a lot of stuff and</font>

102
00:04:35,600 --> 00:04:42,800
I'll<font color="#E5E5E5"> briefly goes through</font><font color="#CCCCCC"> these steps</font><font color="#E5E5E5"> so</font>

103
00:04:38,300 --> 00:04:44,510
first the<font color="#E5E5E5"> VM allocates space you see the</font>

104
00:04:42,800 --> 00:04:46,550
<font color="#CCCCCC">address</font><font color="#E5E5E5"> that's actually the</font><font color="#CCCCCC"> address</font>

105
00:04:44,510 --> 00:04:48,920
where the shared archive will be mapped

106
00:04:46,550 --> 00:04:51,710
into<font color="#E5E5E5"> memories so every instance of the</font>

107
00:04:48,920 --> 00:04:53,450
<font color="#E5E5E5">hotspot will map the share of</font><font color="#CCCCCC"> archive at</font>

108
00:04:51,710 --> 00:04:55,520
the same memory address you can

109
00:04:53,450 --> 00:04:57,979
configure this with a command line

110
00:04:55,520 --> 00:05:01,099
option if you're not happy<font color="#CCCCCC"> with</font><font color="#E5E5E5"> this</font>

111
00:04:57,980 --> 00:05:05,180
<font color="#CCCCCC">address but</font><font color="#E5E5E5"> generally it's a 32 gigabyte</font>

112
00:05:01,100 --> 00:05:07,010
it will be mapped<font color="#E5E5E5"> and 32 gigabyte then</font>

113
00:05:05,180 --> 00:05:11,870
<font color="#CCCCCC">if you're loading the</font><font color="#E5E5E5"> classes to share</font>

114
00:05:07,010 --> 00:05:13,700
and you may be surprised but your<font color="#CCCCCC"> JDK or</font>

115
00:05:11,870 --> 00:05:16,310
<font color="#CCCCCC">Jo</font><font color="#E5E5E5"> if you download it you</font><font color="#CCCCCC"> know it</font>

116
00:05:13,700 --> 00:05:18,530
contains<font color="#E5E5E5"> a class list which is a plain</font>

117
00:05:16,310 --> 00:05:21,920
<font color="#E5E5E5">text file with a list of classes</font>

118
00:05:18,530 --> 00:05:24,739
this is generated at<font color="#CCCCCC"> Build time</font><font color="#E5E5E5"> so when</font>

119
00:05:21,920 --> 00:05:27,230
you build the<font color="#E5E5E5"> JDK as it was shown in one</font>

120
00:05:24,740 --> 00:05:31,450
of the previous<font color="#E5E5E5"> talks there is a small</font>

121
00:05:27,230 --> 00:05:34,510
java application which tries<font color="#CCCCCC"> to mimic</font>

122
00:05:31,450 --> 00:05:38,719
other small java application it includes

123
00:05:34,510 --> 00:05:42,890
some<font color="#CCCCCC"> of the containers</font><font color="#E5E5E5"> some of the util</font>

124
00:05:38,720 --> 00:05:44,660
classes and so on and generates and from

125
00:05:42,890 --> 00:05:46,880
this class<font color="#E5E5E5"> list is generated</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> is</font>

126
00:05:44,660 --> 00:05:48,500
part of the<font color="#CCCCCC"> jdk and</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> you run share</font>

127
00:05:46,880 --> 00:05:51,230
dump on<font color="#E5E5E5"> your host this class will be</font>

128
00:05:48,500 --> 00:05:56,060
used<font color="#E5E5E5"> to load</font><font color="#CCCCCC"> up reload all these classes</font>

129
00:05:51,230 --> 00:05:58,430
and create<font color="#E5E5E5"> this shared archive then a</font>

130
00:05:56,060 --> 00:06:00,320
lot of<font color="#E5E5E5"> stuff is done on the preloaded</font>

131
00:05:58,430 --> 00:06:03,590
<font color="#E5E5E5">classes like class modification for</font>

132
00:06:00,320 --> 00:06:05,300
example so this hasn't to be repeated

133
00:06:03,590 --> 00:06:08,780
later on when the shared archive is

134
00:06:05,300 --> 00:06:11,780
mapped<font color="#E5E5E5"> into your space into your</font><font color="#CCCCCC"> java</font>

135
00:06:08,780 --> 00:06:13,849
<font color="#E5E5E5">process you see the number of classes</font><font color="#CCCCCC"> so</font>

136
00:06:11,780 --> 00:06:17,719
<font color="#E5E5E5">there is about</font><font color="#CCCCCC"> 1200 classes in this</font>

137
00:06:13,850 --> 00:06:20,330
class list file some unsure about

138
00:06:17,720 --> 00:06:21,950
information is removed<font color="#CCCCCC"> for example when</font>

139
00:06:20,330 --> 00:06:23,270
you<font color="#E5E5E5"> remember the image I showed</font><font color="#CCCCCC"> you</font>

140
00:06:21,950 --> 00:06:25,310
before there are<font color="#E5E5E5"> links to the class</font>

141
00:06:23,270 --> 00:06:29,630
loader for example in the meta space and

142
00:06:25,310 --> 00:06:31,790
<font color="#E5E5E5">obviously these are different in</font>

143
00:06:29,630 --> 00:06:34,010
<font color="#E5E5E5">everywhere means and so this cannot be</font>

144
00:06:31,790 --> 00:06:37,340
shared<font color="#E5E5E5"> in the shed archive so such</font>

145
00:06:34,010 --> 00:06:40,099
information is<font color="#CCCCCC"> removed pointers which</font>

146
00:06:37,340 --> 00:06:44,419
point from one class<font color="#CCCCCC"> to another</font><font color="#E5E5E5"> are</font>

147
00:06:40,100 --> 00:06:46,129
relocated<font color="#CCCCCC"> then as I</font><font color="#E5E5E5"> told you with Java 9</font>

148
00:06:44,420 --> 00:06:48,529
we can<font color="#CCCCCC"> also store some</font>

149
00:06:46,129 --> 00:06:50,149
during objects and symbol tables<font color="#E5E5E5"> in the</font>

150
00:06:48,529 --> 00:06:52,369
shared<font color="#E5E5E5"> archive as well</font><font color="#CCCCCC"> these are also</font>

151
00:06:50,149 --> 00:06:54,469
dumped into the shared archive<font color="#E5E5E5"> and</font>

152
00:06:52,369 --> 00:06:56,989
finally the links to the Java<font color="#CCCCCC"> mirror</font>

153
00:06:54,469 --> 00:06:58,489
class<font color="#E5E5E5"> which is actually the pointer back</font>

154
00:06:56,989 --> 00:07:01,188
into the Java heap is also removed

155
00:06:58,489 --> 00:07:04,128
because<font color="#E5E5E5"> every time the</font><font color="#CCCCCC"> shed I</font><font color="#E5E5E5"> cough will</font>

156
00:07:01,189 --> 00:07:05,749
be mapped into a Java process paste this

157
00:07:04,129 --> 00:07:07,729
link has<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be updated</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> it's</font>

158
00:07:05,749 --> 00:07:10,459
obviously<font color="#E5E5E5"> different in every in every</font>

159
00:07:07,729 --> 00:07:13,758
running instance and then finally the

160
00:07:10,459 --> 00:07:17,209
whole archive is dumped into a file<font color="#E5E5E5"> and</font>

161
00:07:13,759 --> 00:07:20,629
<font color="#CCCCCC">you see the</font><font color="#E5E5E5"> the archive contains</font><font color="#CCCCCC"> retried</font>

162
00:07:17,209 --> 00:07:23,360
<font color="#CCCCCC">and to it only spaces because obviously</font>

163
00:07:20,629 --> 00:07:25,219
<font color="#E5E5E5">some</font><font color="#CCCCCC"> of the part is</font><font color="#E5E5E5"> really constant but</font>

164
00:07:23,360 --> 00:07:29,089
some part like for<font color="#CCCCCC"> example the instance</font>

165
00:07:25,219 --> 00:07:31,909
class has a pointer to the to the class

166
00:07:29,089 --> 00:07:34,550
object<font color="#E5E5E5"> the Java mirror and this has to</font>

167
00:07:31,909 --> 00:07:38,089
be<font color="#E5E5E5"> patched for every running instance so</font>

168
00:07:34,550 --> 00:07:40,279
like every shared library also<font color="#CCCCCC"> the Lib C</font>

169
00:07:38,089 --> 00:07:42,619
library for example contains constant

170
00:07:40,279 --> 00:07:46,819
parts and with right parts which<font color="#CCCCCC"> can be</font>

171
00:07:42,619 --> 00:07:48,979
patched and this this world<font color="#CCCCCC"> this will</font>

172
00:07:46,819 --> 00:07:51,259
bind<font color="#E5E5E5"> these pages which are changed by</font>

173
00:07:48,979 --> 00:07:54,529
the process to your<font color="#E5E5E5"> Java</font><font color="#CCCCCC"> process so they</font>

174
00:07:51,259 --> 00:07:57,490
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> aren't shared once more than</font>

175
00:07:54,529 --> 00:08:00,860
one Java<font color="#E5E5E5"> process is using this archive</font>

176
00:07:57,490 --> 00:08:03,229
in the<font color="#E5E5E5"> end you see the</font><font color="#CCCCCC"> parts which are</font>

177
00:08:00,860 --> 00:08:07,219
mapped into the heap<font color="#CCCCCC"> so you see this is</font>

178
00:08:03,229 --> 00:08:08,929
<font color="#CCCCCC">another address and this is why this</font>

179
00:08:07,219 --> 00:08:11,029
<font color="#E5E5E5">only works which is one do you want to</font>

180
00:08:08,929 --> 00:08:15,049
see<font color="#E5E5E5"> because you</font><font color="#CCCCCC"> want to see has the</font>

181
00:08:11,029 --> 00:08:18,199
possibility to to map some parts into

182
00:08:15,050 --> 00:08:20,569
<font color="#CCCCCC">its memory region which contains the</font>

183
00:08:18,199 --> 00:08:23,269
saved strings<font color="#E5E5E5"> and in the end you see we</font>

184
00:08:20,569 --> 00:08:27,199
generate<font color="#CCCCCC"> the shared archive which again</font>

185
00:08:23,269 --> 00:08:29,449
is sort by default<font color="#E5E5E5"> in your</font><font color="#CCCCCC"> JDK directory</font>

186
00:08:27,199 --> 00:08:33,529
under<font color="#E5E5E5"> lip server in the</font><font color="#CCCCCC"> fire class this</font>

187
00:08:29,449 --> 00:08:35,688
<font color="#CCCCCC">trace our Java chef archive again you</font>

188
00:08:33,529 --> 00:08:37,370
can change this name this location we

189
00:08:35,688 --> 00:08:40,039
<font color="#E5E5E5">will see that later</font><font color="#CCCCCC"> on in the</font><font color="#E5E5E5"> other</font>

190
00:08:37,370 --> 00:08:45,170
examples and the size<font color="#CCCCCC"> is about</font><font color="#E5E5E5"> 18</font>

191
00:08:40,039 --> 00:08:49,250
megabytes<font color="#CCCCCC"> of the shared archive so just</font>

192
00:08:45,170 --> 00:08:52,130
trivial hello world hello<font color="#CCCCCC"> CD s sample</font>

193
00:08:49,250 --> 00:08:54,439
<font color="#E5E5E5">Java program we just</font><font color="#CCCCCC"> print out hello CD</font>

194
00:08:52,130 --> 00:08:56,000
s and then<font color="#E5E5E5"> we read in a red line so we</font>

195
00:08:54,439 --> 00:08:59,110
can<font color="#CCCCCC"> analyze</font><font color="#E5E5E5"> the process once it's</font>

196
00:08:56,000 --> 00:08:59,110
running<font color="#E5E5E5"> so it doesn't stop</font>

197
00:08:59,960 --> 00:09:09,080
now how do we<font color="#E5E5E5"> use</font><font color="#CCCCCC"> CBS we just put X</font>

198
00:09:04,970 --> 00:09:11,180
minus X share<font color="#E5E5E5"> about</font><font color="#CCCCCC"> Cullen</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> option or</font>

199
00:09:09,080 --> 00:09:14,420
<font color="#E5E5E5">to the comment</font><font color="#CCCCCC"> line and run our program</font>

200
00:09:11,180 --> 00:09:16,609
<font color="#E5E5E5">and nothing special happens so how can</font>

201
00:09:14,420 --> 00:09:18,229
we verify<font color="#E5E5E5"> that now our classes really</font>

202
00:09:16,610 --> 00:09:23,300
<font color="#E5E5E5">have been loaded from the shared archive</font>

203
00:09:18,230 --> 00:09:28,550
<font color="#E5E5E5">well we can misuse the new logging API</font>

204
00:09:23,300 --> 00:09:31,069
<font color="#E5E5E5">and instructed to give us a lock</font><font color="#CCCCCC"> of the</font>

205
00:09:28,550 --> 00:09:34,099
class loading<font color="#E5E5E5"> and when we run it this</font>

206
00:09:31,070 --> 00:09:37,100
way we get<font color="#E5E5E5"> the line for every class we</font>

207
00:09:34,100 --> 00:09:40,190
just<font color="#E5E5E5"> loaded and every of these lines</font>

208
00:09:37,100 --> 00:09:41,390
contains a reference to the location

209
00:09:40,190 --> 00:09:43,399
from<font color="#E5E5E5"> where the class was</font><font color="#CCCCCC"> that has been</font>

210
00:09:41,390 --> 00:09:46,149
loaded<font color="#E5E5E5"> and if this class has been</font><font color="#CCCCCC"> loaded</font>

211
00:09:43,399 --> 00:09:50,390
from the<font color="#CCCCCC"> ship our cap you see</font><font color="#E5E5E5"> a source</font>

212
00:09:46,149 --> 00:09:54,110
shared object file for<font color="#CCCCCC"> example not all</font>

213
00:09:50,390 --> 00:09:57,110
files have<font color="#CCCCCC"> been loaded from there</font><font color="#E5E5E5"> so for</font>

214
00:09:54,110 --> 00:09:59,410
<font color="#E5E5E5">example the</font><font color="#CCCCCC"> Java</font><font color="#E5E5E5"> internal I don't know</font>

215
00:09:57,110 --> 00:10:02,000
<font color="#CCCCCC">I've abbreviated it well class pass/fail</font>

216
00:09:59,410 --> 00:10:04,969
order was<font color="#E5E5E5"> obviously not in the initial</font>

217
00:10:02,000 --> 00:10:06,890
class list so it is not has not been

218
00:10:04,970 --> 00:10:09,650
dumped<font color="#E5E5E5"> the shared archive file so this</font>

219
00:10:06,890 --> 00:10:12,160
is loaded from<font color="#CCCCCC"> the module from the base</font>

220
00:10:09,650 --> 00:10:16,939
module<font color="#E5E5E5"> right from the file system</font>

221
00:10:12,160 --> 00:10:18,620
<font color="#E5E5E5">finally also my example application has</font>

222
00:10:16,940 --> 00:10:21,050
<font color="#CCCCCC">been loaded</font><font color="#E5E5E5"> from the file system because</font>

223
00:10:18,620 --> 00:10:25,760
it was<font color="#E5E5E5"> not obviously not in the in the</font>

224
00:10:21,050 --> 00:10:29,660
shared archive in<font color="#E5E5E5"> the class list we can</font>

225
00:10:25,760 --> 00:10:32,600
just check how many<font color="#E5E5E5"> classes have been</font>

226
00:10:29,660 --> 00:10:34,600
<font color="#E5E5E5">loaded from</font><font color="#CCCCCC"> the shared archive</font><font color="#E5E5E5"> and if we</font>

227
00:10:32,600 --> 00:10:39,080
<font color="#E5E5E5">grab for shared object files we see that</font>

228
00:10:34,600 --> 00:10:41,240
<font color="#E5E5E5">477 classes have</font><font color="#CCCCCC"> been loaded from the</font>

229
00:10:39,080 --> 00:10:44,180
<font color="#CCCCCC">shell archive and</font><font color="#E5E5E5"> if we do the opposite</font>

230
00:10:41,240 --> 00:10:45,650
so grab for all the<font color="#E5E5E5"> classes which</font><font color="#CCCCCC"> have</font>

231
00:10:44,180 --> 00:10:48,859
not been loaded from<font color="#E5E5E5"> a shared archive we</font>

232
00:10:45,650 --> 00:10:52,160
see it just about<font color="#CCCCCC"> 5</font><font color="#E5E5E5"> so for a toy</font>

233
00:10:48,860 --> 00:10:53,930
application like hello world<font color="#E5E5E5"> which your</font>

234
00:10:52,160 --> 00:10:57,649
estimation<font color="#E5E5E5"> was right it's</font><font color="#CCCCCC"> about 500</font>

235
00:10:53,930 --> 00:10:59,510
classes<font color="#CCCCCC"> we see that most of</font><font color="#E5E5E5"> them get</font>

236
00:10:57,649 --> 00:11:03,020
<font color="#E5E5E5">loaded from</font><font color="#CCCCCC"> the from the shared archive</font>

237
00:10:59,510 --> 00:11:04,490
so that's fine<font color="#CCCCCC"> so performance Christian</font>

238
00:11:03,020 --> 00:11:06,949
told me told<font color="#E5E5E5"> us that we shouldn't</font><font color="#CCCCCC"> it's</font>

239
00:11:04,490 --> 00:11:09,459
time for performance<font color="#E5E5E5"> measurement but it</font>

240
00:11:06,950 --> 00:11:13,149
<font color="#E5E5E5">is not really a serious performance</font>

241
00:11:09,459 --> 00:11:17,388
benchmark so I just used time

242
00:11:13,149 --> 00:11:21,349
<font color="#CCCCCC">to do some measurement so we see that</font>

243
00:11:17,389 --> 00:11:24,109
when<font color="#CCCCCC"> we run with shared arc after dawn</font>

244
00:11:21,349 --> 00:11:25,639
we get about<font color="#CCCCCC"> 9% or performance</font>

245
00:11:24,109 --> 00:11:28,399
improvement<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> whole</font><font color="#CCCCCC"> application</font>

246
00:11:25,639 --> 00:11:30,109
and if we measure the time until<font color="#CCCCCC"> our</font>

247
00:11:28,399 --> 00:11:31,879
application class gets loaded which is

248
00:11:30,109 --> 00:11:34,159
usually the<font color="#E5E5E5"> last class for hello</font><font color="#CCCCCC"> world</font>

249
00:11:31,879 --> 00:11:37,849
program<font color="#CCCCCC"> we see</font><font color="#E5E5E5"> that about certain</font>

250
00:11:34,159 --> 00:11:39,549
percent faster so<font color="#E5E5E5"> I will show some</font>

251
00:11:37,849 --> 00:11:41,809
<font color="#E5E5E5">numbers later for Tomcat but</font>

252
00:11:39,549 --> 00:11:45,108
<font color="#E5E5E5">unfortunately I couldn't</font><font color="#CCCCCC"> reproduce this</font>

253
00:11:41,809 --> 00:11:47,929
20 or<font color="#CCCCCC"> 30 percent</font><font color="#E5E5E5"> which Michael</font><font color="#CCCCCC"> mentioned</font>

254
00:11:45,109 --> 00:11:51,199
for their benchmarks<font color="#E5E5E5"> I'm not sure if I</font>

255
00:11:47,929 --> 00:11:53,478
<font color="#CCCCCC">did something</font><font color="#E5E5E5"> wrong but</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> yeah in</font>

256
00:11:51,199 --> 00:11:58,339
my<font color="#E5E5E5"> measurement it was not more</font><font color="#CCCCCC"> than 10</font>

257
00:11:53,479 --> 00:12:02,179
to 13 percent improvement<font color="#E5E5E5"> so let's see</font>

258
00:11:58,339 --> 00:12:05,259
how much memory<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> share again we</font>

259
00:12:02,179 --> 00:12:08,299
run the hello CBS program in background

260
00:12:05,259 --> 00:12:10,429
and then we use the P map<font color="#E5E5E5"> to so Chris</font>

261
00:12:08,299 --> 00:12:11,779
<font color="#CCCCCC">Kristina introduced the female to I</font>

262
00:12:10,429 --> 00:12:15,519
think<font color="#E5E5E5"> it's really</font><font color="#CCCCCC"> a great</font><font color="#E5E5E5"> tool</font><font color="#CCCCCC"> and</font>

263
00:12:11,779 --> 00:12:19,699
probably the only tool which gives you

264
00:12:15,519 --> 00:12:21,529
<font color="#E5E5E5">real true</font><font color="#CCCCCC"> information about memory usage</font>

265
00:12:19,699 --> 00:12:24,738
because it's<font color="#E5E5E5"> the right information from</font>

266
00:12:21,529 --> 00:12:27,439
the kernel<font color="#E5E5E5"> so it has a lot of options</font>

267
00:12:24,739 --> 00:12:31,729
<font color="#CCCCCC">you could use act even</font><font color="#E5E5E5"> xx to get a lot</font>

268
00:12:27,439 --> 00:12:33,049
<font color="#E5E5E5">of more information I just pull</font><font color="#CCCCCC"> out some</font>

269
00:12:31,729 --> 00:12:36,049
of<font color="#CCCCCC"> the information</font><font color="#E5E5E5"> just in</font><font color="#CCCCCC"> GC</font>

270
00:12:33,049 --> 00:12:40,759
interesting for<font color="#CCCCCC"> us so if I run P map on</font>

271
00:12:36,049 --> 00:12:42,709
our hello<font color="#E5E5E5"> CD s process process</font><font color="#CCCCCC"> you see</font>

272
00:12:40,759 --> 00:12:45,649
the the binary the<font color="#CCCCCC"> Java binary</font><font color="#E5E5E5"> which is</font>

273
00:12:42,709 --> 00:12:48,199
<font color="#E5E5E5">mapped into memory you see</font><font color="#CCCCCC"> here the Java</font>

274
00:12:45,649 --> 00:12:50,479
heap<font color="#E5E5E5"> so by default on my machine Java</font>

275
00:12:48,199 --> 00:12:52,368
heap has about<font color="#E5E5E5"> 2</font><font color="#CCCCCC"> gigabytes but</font><font color="#E5E5E5"> from</font>

276
00:12:50,479 --> 00:12:54,829
these<font color="#CCCCCC"> two gigabytes</font><font color="#E5E5E5"> there is just</font><font color="#CCCCCC"> the</font>

277
00:12:52,369 --> 00:12:57,769
<font color="#CCCCCC">power to</font><font color="#E5E5E5"> 129 mega bytes are really</font>

278
00:12:54,829 --> 00:13:01,248
mapped so it's<font color="#CCCCCC"> read/write the other part</font>

279
00:12:57,769 --> 00:13:04,429
of the heap<font color="#E5E5E5"> it's reserved but what not</font>

280
00:13:01,249 --> 00:13:07,879
<font color="#E5E5E5">mapped so it's actually the difference</font>

281
00:13:04,429 --> 00:13:10,339
<font color="#E5E5E5">between the RSS and the virtual space</font>

282
00:13:07,879 --> 00:13:13,969
which<font color="#E5E5E5"> is seen topo NPS which often</font>

283
00:13:10,339 --> 00:13:19,189
confuse people<font color="#CCCCCC"> and then finally you see</font>

284
00:13:13,969 --> 00:13:21,439
the our<font color="#CCCCCC"> shared class file which gets</font>

285
00:13:19,189 --> 00:13:23,629
mapped to<font color="#E5E5E5"> to several locations so</font><font color="#CCCCCC"> that</font>

286
00:13:21,439 --> 00:13:25,219
<font color="#E5E5E5">the first two lines use FF that's the</font>

287
00:13:23,629 --> 00:13:27,649
partridges

288
00:13:25,220 --> 00:13:29,990
used which contains the<font color="#E5E5E5"> shared</font><font color="#CCCCCC"> strings</font>

289
00:13:27,649 --> 00:13:33,139
<font color="#E5E5E5">and which is mapped into the Java heap</font>

290
00:13:29,990 --> 00:13:35,029
<font color="#CCCCCC">but you</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> you see</font><font color="#E5E5E5"> and then again you</font>

291
00:13:33,139 --> 00:13:38,329
see<font color="#E5E5E5"> the different parts</font><font color="#CCCCCC"> the read/write</font>

292
00:13:35,029 --> 00:13:40,490
<font color="#E5E5E5">part which which can be potentially</font>

293
00:13:38,329 --> 00:13:42,859
patched by the by the instance which

294
00:13:40,490 --> 00:13:45,079
loads the shared<font color="#E5E5E5"> archive file and you</font>

295
00:13:42,860 --> 00:13:47,029
see that<font color="#E5E5E5"> the constant file which is</font>

296
00:13:45,079 --> 00:13:48,560
truly shared so this will always<font color="#E5E5E5"> be</font>

297
00:13:47,029 --> 00:13:52,220
shared between all<font color="#E5E5E5"> the instances while</font>

298
00:13:48,560 --> 00:13:53,209
the<font color="#CCCCCC"> read/write</font><font color="#E5E5E5"> part may</font><font color="#CCCCCC"> be at some point</font>

299
00:13:52,220 --> 00:13:56,779
in<font color="#CCCCCC"> time</font>

300
00:13:53,209 --> 00:13:59,060
privately mapped to your<font color="#E5E5E5"> own instance of</font>

301
00:13:56,779 --> 00:14:01,490
Java and<font color="#E5E5E5"> and you you will not have</font>

302
00:13:59,060 --> 00:14:03,800
<font color="#E5E5E5">sharing so for example that the bytecode</font>

303
00:14:01,490 --> 00:14:05,569
that's a good example<font color="#CCCCCC"> people sing byte</font>

304
00:14:03,800 --> 00:14:07,639
codes they are<font color="#E5E5E5"> constant</font><font color="#CCCCCC"> so they can be</font>

305
00:14:05,569 --> 00:14:09,560
always be shared<font color="#E5E5E5"> but for example</font><font color="#CCCCCC"> what do</font>

306
00:14:07,639 --> 00:14:11,540
you do when you do debugging<font color="#CCCCCC"> where you</font>

307
00:14:09,560 --> 00:14:13,790
patch the byte codes<font color="#E5E5E5"> so you cannot</font>

308
00:14:11,540 --> 00:14:16,849
really<font color="#E5E5E5"> put them into read-only memory</font>

309
00:14:13,790 --> 00:14:18,980
<font color="#CCCCCC">they are in the right section and most</font>

310
00:14:16,850 --> 00:14:20,420
of the time they<font color="#CCCCCC"> are shared but when you</font>

311
00:14:18,980 --> 00:14:22,759
start debugging your application<font color="#E5E5E5"> and</font>

312
00:14:20,420 --> 00:14:26,329
patch your byte code you will just make

313
00:14:22,759 --> 00:14:28,310
<font color="#CCCCCC">this page</font><font color="#E5E5E5"> it's a copy on right you just</font>

314
00:14:26,329 --> 00:14:29,959
make this page private for your process

315
00:14:28,310 --> 00:14:33,758
<font color="#CCCCCC">and only</font><font color="#E5E5E5"> all the other process which</font>

316
00:14:29,959 --> 00:14:39,290
don't touch<font color="#E5E5E5"> this page will will share</font>

317
00:14:33,759 --> 00:14:40,730
the memory<font color="#CCCCCC"> ok so this</font><font color="#E5E5E5"> was a toy</font>

318
00:14:39,290 --> 00:14:43,699
application just<font color="#E5E5E5"> to show you how</font>

319
00:14:40,730 --> 00:14:47,240
everything<font color="#E5E5E5"> basically works so now I've</font>

320
00:14:43,699 --> 00:14:49,939
tried to<font color="#E5E5E5"> use CD</font><font color="#CCCCCC"> s and the new ab CD s</font>

321
00:14:47,240 --> 00:14:52,490
which comes with<font color="#CCCCCC"> Java</font><font color="#E5E5E5"> 10 with</font><font color="#CCCCCC"> Tomcat and</font>

322
00:14:49,939 --> 00:14:55,490
<font color="#CCCCCC">n grinder it's some kind of application</font>

323
00:14:52,490 --> 00:14:57,500
<font color="#E5E5E5">I really don't even don't know what it</font>

324
00:14:55,490 --> 00:14:59,779
really does it was just a big<font color="#CCCCCC"> warmup</font>

325
00:14:57,500 --> 00:15:01,730
file which<font color="#E5E5E5"> I wanted to deploy in order</font>

326
00:14:59,779 --> 00:15:05,029
<font color="#E5E5E5">to get a lot of class is loaded</font><font color="#CCCCCC"> so I can</font>

327
00:15:01,730 --> 00:15:07,720
do some measurements so<font color="#E5E5E5"> Catalina options</font>

328
00:15:05,029 --> 00:15:11,769
it's actually environment variable which

329
00:15:07,720 --> 00:15:19,430
influences the<font color="#CCCCCC"> way</font><font color="#E5E5E5"> how Tomcat starts and</font>

330
00:15:11,769 --> 00:15:22,250
we can now launch<font color="#E5E5E5"> Tomcat</font><font color="#CCCCCC"> with class data</font>

331
00:15:19,430 --> 00:15:24,920
sharing on it<font color="#E5E5E5"> we'll use the shared</font>

332
00:15:22,250 --> 00:15:27,620
<font color="#CCCCCC">archive which you have just created in</font>

333
00:15:24,920 --> 00:15:36,259
<font color="#E5E5E5">the first step inside our JDK directory</font>

334
00:15:27,620 --> 00:15:38,630
<font color="#E5E5E5">and we also use</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> X lock to to lock</font>

335
00:15:36,259 --> 00:15:40,970
all the loaded classes into a file

336
00:15:38,630 --> 00:15:43,340
<font color="#E5E5E5">just to get</font><font color="#CCCCCC"> a baseline</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> how many</font>

337
00:15:40,970 --> 00:15:46,490
<font color="#CCCCCC">classes have</font><font color="#E5E5E5"> been loaded so when we run</font>

338
00:15:43,340 --> 00:15:48,620
what count on<font color="#E5E5E5"> that we see</font><font color="#CCCCCC"> that Tomcat</font>

339
00:15:46,490 --> 00:15:53,720
with this<font color="#E5E5E5"> angular</font><font color="#CCCCCC"> application loads</font>

340
00:15:48,620 --> 00:15:57,380
about<font color="#CCCCCC"> 12,000 classes and when we now</font>

341
00:15:53,720 --> 00:16:00,470
grab for the number<font color="#E5E5E5"> of classes</font><font color="#CCCCCC"> which are</font>

342
00:15:57,380 --> 00:16:03,890
loaded<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> shared archive we will</font>

343
00:16:00,470 --> 00:16:05,570
see that it's<font color="#E5E5E5"> just about 1100 so it's if</font>

344
00:16:03,890 --> 00:16:07,730
you remember the shared archive which

345
00:16:05,570 --> 00:16:11,020
we've in<font color="#E5E5E5"> the default</font><font color="#CCCCCC"> said arc which if</font>

346
00:16:07,730 --> 00:16:14,600
we have created<font color="#E5E5E5"> initially created</font><font color="#CCCCCC"> a</font>

347
00:16:11,020 --> 00:16:16,460
<font color="#CCCCCC">contain</font><font color="#E5E5E5"> about 1200 classes so mostly</font>

348
00:16:14,600 --> 00:16:18,800
most of them have<font color="#E5E5E5"> been</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> by Tomcat</font>

349
00:16:16,460 --> 00:16:22,880
what Tomcat again uses<font color="#E5E5E5"> a lot more</font>

350
00:16:18,800 --> 00:16:26,780
classes so how can we<font color="#E5E5E5"> improve the</font>

351
00:16:22,880 --> 00:16:28,760
situation<font color="#CCCCCC"> well</font><font color="#E5E5E5"> there is a</font><font color="#CCCCCC"> command-line</font>

352
00:16:26,780 --> 00:16:32,390
<font color="#E5E5E5">option called dump</font><font color="#CCCCCC"> loaded class list</font>

353
00:16:28,760 --> 00:16:35,990
when we run<font color="#E5E5E5"> Tomcat with that the the VM</font>

354
00:16:32,390 --> 00:16:39,170
<font color="#CCCCCC">itself will print out a list of all the</font>

355
00:16:35,990 --> 00:16:42,440
<font color="#CCCCCC">classes</font><font color="#E5E5E5"> it has loaded and it thinks it</font>

356
00:16:39,170 --> 00:16:45,410
can<font color="#E5E5E5"> share in a shared archive so you</font>

357
00:16:42,440 --> 00:16:47,930
let's just<font color="#CCCCCC"> use that and dumped it in a</font>

358
00:16:45,410 --> 00:16:50,990
file<font color="#E5E5E5"> and when we look at that file we</font>

359
00:16:47,930 --> 00:16:53,810
see that again<font color="#CCCCCC"> that's just</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> 3,000</font>

360
00:16:50,990 --> 00:16:57,260
classes<font color="#E5E5E5"> from the 12,000 classes so why</font>

361
00:16:53,810 --> 00:17:00,140
is<font color="#E5E5E5"> it so because TDS only allows by</font>

362
00:16:57,260 --> 00:17:01,880
default<font color="#E5E5E5"> sharing our system classes which</font>

363
00:17:00,140 --> 00:17:07,160
get<font color="#E5E5E5"> loaded by the by the boot class</font>

364
00:17:01,880 --> 00:17:08,569
loader so obviously<font color="#CCCCCC"> it's about 3,200 but</font>

365
00:17:07,160 --> 00:17:11,300
all the other<font color="#E5E5E5"> applications classes</font>

366
00:17:08,569 --> 00:17:12,079
cannot<font color="#E5E5E5"> be shared by the classic class</font>

367
00:17:11,300 --> 00:17:14,839
data sharing

368
00:17:12,079 --> 00:17:17,300
so here enters the scene application<font color="#E5E5E5"> CD</font>

369
00:17:14,839 --> 00:17:19,159
<font color="#CCCCCC">s which promised to allow our class data</font>

370
00:17:17,300 --> 00:17:22,790
sharing also<font color="#E5E5E5"> for application classes and</font>

371
00:17:19,160 --> 00:17:26,060
<font color="#E5E5E5">even for custom class loaders so again</font>

372
00:17:22,790 --> 00:17:27,949
we will<font color="#E5E5E5"> start Tomcat</font><font color="#CCCCCC"> and at the use AB</font>

373
00:17:26,060 --> 00:17:29,919
CD s option<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can do this you can</font>

374
00:17:27,949 --> 00:17:34,820
<font color="#CCCCCC">try this</font><font color="#E5E5E5"> yourself with the early access</font>

375
00:17:29,920 --> 00:17:36,700
open JDK 10 builds and when we look at

376
00:17:34,820 --> 00:17:39,590
at<font color="#CCCCCC"> the</font><font color="#E5E5E5"> result</font>

377
00:17:36,700 --> 00:17:43,490
that's actually pretty disappointing so

378
00:17:39,590 --> 00:17:47,000
we see that it's about 300 more classes

379
00:17:43,490 --> 00:17:49,550
can<font color="#CCCCCC"> be shared now</font><font color="#E5E5E5"> but that's</font><font color="#CCCCCC"> actually</font>

380
00:17:47,000 --> 00:17:52,370
<font color="#E5E5E5">not a lot</font><font color="#CCCCCC"> so what's the problem</font><font color="#E5E5E5"> here so</font>

381
00:17:49,550 --> 00:17:54,980
dump loaded class<font color="#E5E5E5"> list</font>

382
00:17:52,370 --> 00:17:58,340
still only dumps the classes loaded by

383
00:17:54,980 --> 00:18:00,710
<font color="#E5E5E5">the boot class loader and the platform</font>

384
00:17:58,340 --> 00:18:03,379
class loader<font color="#E5E5E5"> and the application class</font>

385
00:18:00,710 --> 00:18:05,690
load also<font color="#E5E5E5"> no system class loader so</font>

386
00:18:03,380 --> 00:18:08,360
obviously<font color="#CCCCCC"> Tonkin itself is a dynamic</font>

387
00:18:05,690 --> 00:18:09,680
application and it loads<font color="#E5E5E5"> not really many</font>

388
00:18:08,360 --> 00:18:12,320
classes through<font color="#CCCCCC"> the application class</font>

389
00:18:09,680 --> 00:18:14,570
<font color="#E5E5E5">loader from the class pass but it loads</font>

390
00:18:12,320 --> 00:18:16,700
<font color="#E5E5E5">a lot of classes with own custom class</font>

391
00:18:14,570 --> 00:18:19,309
loaders<font color="#E5E5E5"> and unfortunately the dump</font>

392
00:18:16,700 --> 00:18:24,130
<font color="#E5E5E5">loaded last list option does not handle</font>

393
00:18:19,309 --> 00:18:27,080
<font color="#E5E5E5">these classes so what can</font><font color="#CCCCCC"> we do here</font>

394
00:18:24,130 --> 00:18:31,160
<font color="#E5E5E5">well let's first use the file that was</font>

395
00:18:27,080 --> 00:18:34,250
<font color="#E5E5E5">generated with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> 3,500 classes and see</font>

396
00:18:31,160 --> 00:18:36,559
how we can regenerate<font color="#E5E5E5"> a shared archive</font>

397
00:18:34,250 --> 00:18:39,650
with these<font color="#CCCCCC"> classes at least so we use</font>

398
00:18:36,559 --> 00:18:42,200
the<font color="#CCCCCC"> Excel dump option</font><font color="#E5E5E5"> like at the first</font>

399
00:18:39,650 --> 00:18:46,160
slide<font color="#CCCCCC"> and we turn on application class</font>

400
00:18:42,200 --> 00:18:50,270
data sharing<font color="#E5E5E5"> and now we can tell the</font>

401
00:18:46,160 --> 00:18:52,610
<font color="#E5E5E5">Java VM the location of our class list</font>

402
00:18:50,270 --> 00:18:54,530
<font color="#E5E5E5">so this time we don't take the default</font>

403
00:18:52,610 --> 00:18:58,100
class list which comes<font color="#E5E5E5"> with your</font><font color="#CCCCCC"> JDK but</font>

404
00:18:54,530 --> 00:19:04,010
the one we have<font color="#CCCCCC"> just created and then we</font>

405
00:18:58,100 --> 00:19:06,709
can also tell the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> JDK</font><font color="#E5E5E5"> the location</font>

406
00:19:04,010 --> 00:19:08,990
where to write the created shared

407
00:19:06,710 --> 00:19:10,940
archive to so we don't want<font color="#E5E5E5"> to store</font>

408
00:19:08,990 --> 00:19:13,820
this<font color="#E5E5E5"> archive into the right into</font><font color="#CCCCCC"> the JDK</font>

409
00:19:10,940 --> 00:19:16,309
directory just<font color="#CCCCCC"> to us</font><font color="#E5E5E5"> a second play</font>

410
00:19:13,820 --> 00:19:19,428
another place and for some<font color="#E5E5E5"> unknown</font>

411
00:19:16,309 --> 00:19:21,950
reason this is a diagnostic<font color="#CCCCCC"> vm option</font><font color="#E5E5E5"> i</font>

412
00:19:19,429 --> 00:19:24,530
after first time I will file a back to

413
00:19:21,950 --> 00:19:26,570
<font color="#E5E5E5">change this because</font><font color="#CCCCCC"> I don't see why</font>

414
00:19:24,530 --> 00:19:28,910
<font color="#CCCCCC">share class list file it's it's a normal</font>

415
00:19:26,570 --> 00:19:31,370
<font color="#E5E5E5">product option and shared archive file</font>

416
00:19:28,910 --> 00:19:33,710
<font color="#E5E5E5">is a diagnostic option which</font><font color="#CCCCCC"> has to be</font>

417
00:19:31,370 --> 00:19:38,389
<font color="#E5E5E5">unlocked first anyway that's how it's</font>

418
00:19:33,710 --> 00:19:39,920
today<font color="#CCCCCC"> and when we look at</font><font color="#E5E5E5"> the created a</font>

419
00:19:38,390 --> 00:19:42,290
shared<font color="#E5E5E5"> archive machine</font><font color="#CCCCCC"> it's much big</font>

420
00:19:39,920 --> 00:19:43,820
enough so if you remember<font color="#E5E5E5"> the first shot</font>

421
00:19:42,290 --> 00:19:46,100
archive which was created<font color="#E5E5E5"> from the</font>

422
00:19:43,820 --> 00:19:48,320
default class list was about<font color="#E5E5E5"> 18</font>

423
00:19:46,100 --> 00:19:51,709
megabytes in size and<font color="#E5E5E5"> this one is now</font>

424
00:19:48,320 --> 00:19:53,659
nearly<font color="#E5E5E5"> 50 megabytes in size it obviously</font>

425
00:19:51,710 --> 00:19:58,809
contains more<font color="#CCCCCC"> than 3,000 classes where</font>

426
00:19:53,660 --> 00:20:02,179
the first one<font color="#CCCCCC"> only contained about 1200</font>

427
00:19:58,809 --> 00:20:05,870
and now we can use<font color="#E5E5E5"> this shared archive</font>

428
00:20:02,179 --> 00:20:09,460
again<font color="#E5E5E5"> by turning</font>

429
00:20:05,870 --> 00:20:13,309
<font color="#CCCCCC">that</font><font color="#E5E5E5"> are sharing</font><font color="#CCCCCC"> on using apps EDS and</font>

430
00:20:09,460 --> 00:20:15,410
giving the VM the location of the shared

431
00:20:13,309 --> 00:20:17,330
archive so we don't want to<font color="#CCCCCC"> use the</font>

432
00:20:15,410 --> 00:20:21,860
default<font color="#E5E5E5"> shared archive but the one</font>

433
00:20:17,330 --> 00:20:24,980
you've just generated<font color="#E5E5E5"> okay but actually</font>

434
00:20:21,860 --> 00:20:28,429
<font color="#E5E5E5">AB CD s as I told you promised to</font>

435
00:20:24,980 --> 00:20:30,290
<font color="#CCCCCC">support us that our</font><font color="#E5E5E5"> sharing of classes</font>

436
00:20:28,430 --> 00:20:32,200
<font color="#E5E5E5">not</font><font color="#CCCCCC"> only of the class is loaded by the</font>

437
00:20:30,290 --> 00:20:35,059
<font color="#E5E5E5">by the application</font><font color="#CCCCCC"> class loader but also</font>

438
00:20:32,200 --> 00:20:37,990
for classical<font color="#CCCCCC"> it</font><font color="#E5E5E5"> by custom class loaders</font>

439
00:20:35,059 --> 00:20:40,220
so how can we can<font color="#CCCCCC"> we reach this</font>

440
00:20:37,990 --> 00:20:47,870
unfortunately<font color="#E5E5E5"> we saw that the dump load</font>

441
00:20:40,220 --> 00:20:52,270
the class<font color="#CCCCCC"> list</font><font color="#E5E5E5"> doesn't help here so so</font>

442
00:20:47,870 --> 00:20:52,270
we<font color="#CCCCCC"> have to - sorry</font><font color="#E5E5E5"> I'm just</font>

443
00:21:05,410 --> 00:21:08,820
get out<font color="#E5E5E5"> of order</font>

444
00:21:14,630 --> 00:21:23,210
sorry so yeah how can<font color="#CCCCCC"> we create this</font>

445
00:21:19,310 --> 00:21:27,110
from<font color="#E5E5E5"> scratch a class list</font><font color="#CCCCCC"> - to</font><font color="#E5E5E5"> enable</font>

446
00:21:23,210 --> 00:21:28,580
application class<font color="#CCCCCC"> data sharing also for</font>

447
00:21:27,110 --> 00:21:30,500
custom class loader so<font color="#CCCCCC"> when we look at</font>

448
00:21:28,580 --> 00:21:35,139
<font color="#E5E5E5">this class list it's actually a trivial</font>

449
00:21:30,500 --> 00:21:38,390
File of classes and it

450
00:21:35,140 --> 00:21:40,790
unfortunately the there is no

451
00:21:38,390 --> 00:21:43,250
<font color="#E5E5E5">documentation for how we can use</font>

452
00:21:40,790 --> 00:21:44,600
application class data sharing for for

453
00:21:43,250 --> 00:21:46,970
custom<font color="#E5E5E5"> classes we have to look in the</font>

454
00:21:44,600 --> 00:21:49,909
<font color="#CCCCCC">hotspot code</font><font color="#E5E5E5"> to the class list parse a</font>

455
00:21:46,970 --> 00:21:51,560
CPP file and there we see<font color="#CCCCCC"> that</font><font color="#E5E5E5"> this</font>

456
00:21:49,910 --> 00:21:53,600
<font color="#E5E5E5">class list</font><font color="#CCCCCC"> if I</font><font color="#E5E5E5"> can not only contain</font>

457
00:21:51,560 --> 00:21:55,490
class names<font color="#E5E5E5"> but it can also contain</font>

458
00:21:53,600 --> 00:22:02,689
another format like class names with an

459
00:21:55,490 --> 00:22:04,370
ID and with yes<font color="#E5E5E5"> with with references to</font>

460
00:22:02,690 --> 00:22:07,220
the super classes<font color="#E5E5E5"> and implemented</font>

461
00:22:04,370 --> 00:22:10,310
interfaces and the source of these

462
00:22:07,220 --> 00:22:14,630
classes<font color="#E5E5E5"> and when we look at the output</font>

463
00:22:10,310 --> 00:22:17,419
<font color="#CCCCCC">of the</font><font color="#E5E5E5"> X of the class list load</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the</font>

464
00:22:14,630 --> 00:22:19,910
<font color="#E5E5E5">debug option we see that actually</font><font color="#CCCCCC"> this</font>

465
00:22:17,420 --> 00:22:22,280
output<font color="#E5E5E5"> contains exactly this information</font>

466
00:22:19,910 --> 00:22:25,160
so it not<font color="#E5E5E5"> only tells us the loaded</font>

467
00:22:22,280 --> 00:22:29,060
classes but<font color="#CCCCCC"> also the the class</font><font color="#E5E5E5"> loader</font>

468
00:22:25,160 --> 00:22:30,680
which loaded the classes<font color="#E5E5E5"> and the the</font>

469
00:22:29,060 --> 00:22:34,550
source files<font color="#E5E5E5"> very well where they were</font>

470
00:22:30,680 --> 00:22:39,530
loaded from and from<font color="#E5E5E5"> this lock output we</font>

471
00:22:34,550 --> 00:22:41,450
can<font color="#CCCCCC"> actually assemble easily a class</font>

472
00:22:39,530 --> 00:22:44,030
<font color="#E5E5E5">list file which contains the required</font>

473
00:22:41,450 --> 00:22:47,120
information and<font color="#E5E5E5"> I brought a small tool</font>

474
00:22:44,030 --> 00:22:49,250
called<font color="#CCCCCC"> CR</font><font color="#E5E5E5"> for CBS class fastest for</font>

475
00:22:47,120 --> 00:22:51,739
class data sharing which<font color="#CCCCCC"> is on github</font>

476
00:22:49,250 --> 00:22:55,120
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can easily google for it</font><font color="#E5E5E5"> there is</font>

477
00:22:51,740 --> 00:23:02,320
not<font color="#E5E5E5"> many programs with this name</font><font color="#CCCCCC"> and</font>

478
00:22:55,120 --> 00:23:05,300
when we now we can<font color="#CCCCCC"> now run tomcat with</font>

479
00:23:02,320 --> 00:23:07,669
<font color="#E5E5E5">logging class load in debug mode and</font>

480
00:23:05,300 --> 00:23:10,430
dumped it to a<font color="#E5E5E5"> file we can then just</font>

481
00:23:07,670 --> 00:23:16,010
call the CL<font color="#CCCCCC"> force EDS tool to</font><font color="#E5E5E5"> create a</font>

482
00:23:10,430 --> 00:23:20,420
class list from<font color="#E5E5E5"> that the the class</font>

483
00:23:16,010 --> 00:23:23,180
loading lock and<font color="#CCCCCC"> then</font><font color="#E5E5E5"> we can use that</font>

484
00:23:20,420 --> 00:23:25,700
<font color="#CCCCCC">list to create a new shape archive and</font>

485
00:23:23,180 --> 00:23:28,340
<font color="#E5E5E5">when we do that we</font><font color="#CCCCCC"> see that</font><font color="#E5E5E5"> now the</font>

486
00:23:25,700 --> 00:23:31,550
archive is about<font color="#E5E5E5"> 100 megabytes big</font>

487
00:23:28,340 --> 00:23:36,409
and when we run a<font color="#CCCCCC"> tomcat with this</font>

488
00:23:31,550 --> 00:23:39,560
shared archive and<font color="#E5E5E5"> encount for the</font>

489
00:23:36,410 --> 00:23:42,770
classes which<font color="#E5E5E5"> are truly shared we see</font>

490
00:23:39,560 --> 00:23:45,200
that it's about<font color="#CCCCCC"> notice the</font><font color="#E5E5E5"> whole number</font>

491
00:23:42,770 --> 00:23:47,000
<font color="#CCCCCC">of classes and when he called for the</font>

492
00:23:45,200 --> 00:23:49,880
<font color="#E5E5E5">Photoshop classes we see that's about</font>

493
00:23:47,000 --> 00:23:51,770
<font color="#CCCCCC">nine</font><font color="#E5E5E5"> thousand</font><font color="#CCCCCC"> dollars so that's that's</font>

494
00:23:49,880 --> 00:23:54,440
better it's still not optimal<font color="#E5E5E5"> but it's</font>

495
00:23:51,770 --> 00:23:56,240
better<font color="#E5E5E5"> and what's the problem well AB CD</font>

496
00:23:54,440 --> 00:23:58,970
s still has some limitations so for

497
00:23:56,240 --> 00:24:02,030
example it<font color="#CCCCCC"> doesn't support</font><font color="#E5E5E5"> one dot Java</font>

498
00:23:58,970 --> 00:24:03,560
1.5 classes and obviously this network

499
00:24:02,030 --> 00:24:06,260
<font color="#CCCCCC">and the Android application still</font>

500
00:24:03,560 --> 00:24:09,379
<font color="#E5E5E5">contain some old classes also</font><font color="#CCCCCC"> the MFE</font>

501
00:24:06,260 --> 00:24:10,940
generated classes<font color="#E5E5E5"> can be shared because</font>

502
00:24:09,380 --> 00:24:15,350
they are generated dynamically at

503
00:24:10,940 --> 00:24:18,170
runtime<font color="#E5E5E5"> different</font><font color="#CCCCCC"> classes</font><font color="#E5E5E5"> a class which</font>

504
00:24:15,350 --> 00:24:20,480
is loaded several times by<font color="#CCCCCC"> different</font>

505
00:24:18,170 --> 00:24:23,090
class loaders can only be shared<font color="#E5E5E5"> one</font>

506
00:24:20,480 --> 00:24:26,330
time for<font color="#CCCCCC"> one class loader that's</font><font color="#E5E5E5"> another</font>

507
00:24:23,090 --> 00:24:28,850
limitation<font color="#E5E5E5"> and also classes which get</font>

508
00:24:26,330 --> 00:24:30,379
modified<font color="#E5E5E5"> by the class loader itself not</font>

509
00:24:28,850 --> 00:24:31,969
by<font color="#CCCCCC"> an instrumentation agent but there</font>

510
00:24:30,380 --> 00:24:33,470
are class<font color="#E5E5E5"> notice for example NetBeans</font>

511
00:24:31,970 --> 00:24:36,410
has such things that's why it's not easy

512
00:24:33,470 --> 00:24:38,060
to<font color="#E5E5E5"> use</font><font color="#CCCCCC"> obsidians NetBeans which has</font>

513
00:24:36,410 --> 00:24:40,850
class tools which<font color="#E5E5E5"> low the class and then</font>

514
00:24:38,060 --> 00:24:43,159
do some bytecode changes to<font color="#E5E5E5"> that class</font>

515
00:24:40,850 --> 00:24:45,199
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then feeds it to the</font><font color="#CCCCCC"> VM obviously</font>

516
00:24:43,160 --> 00:24:47,000
that cannot<font color="#CCCCCC"> be done with the CVS</font>

517
00:24:45,200 --> 00:24:49,070
implementation<font color="#CCCCCC"> hotspot because</font><font color="#E5E5E5"> the</font>

518
00:24:47,000 --> 00:24:52,430
dumping of<font color="#CCCCCC"> the shell alpha</font><font color="#E5E5E5"> is an offline</font>

519
00:24:49,070 --> 00:24:55,010
step<font color="#E5E5E5"> which has no idea how the class</font>

520
00:24:52,430 --> 00:24:57,320
loaders modify the classes another

521
00:24:55,010 --> 00:24:59,570
<font color="#E5E5E5">problem is that white coat rewriting is</font>

522
00:24:57,320 --> 00:25:01,429
switched off<font color="#CCCCCC"> for the reasons I've told</font>

523
00:24:59,570 --> 00:25:03,379
you before so an interpreter speed might

524
00:25:01,430 --> 00:25:05,750
might be<font color="#E5E5E5"> slower so that's actually it</font>

525
00:25:03,380 --> 00:25:07,700
here is not<font color="#E5E5E5"> a link to the slides and you</font>

526
00:25:05,750 --> 00:25:09,600
have any questions please come to<font color="#CCCCCC"> me I</font>

527
00:25:07,700 --> 00:25:20,590
<font color="#E5E5E5">wrote here</font>

528
00:25:09,600 --> 00:25:20,590
[Applause]

