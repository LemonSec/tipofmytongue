1
00:00:25,960 --> 00:00:31,210
are you ready<font color="#CCCCCC"> now okay</font><font color="#E5E5E5"> good so I can</font>

2
00:00:28,820 --> 00:00:31,210
<font color="#E5E5E5">start</font>

3
00:01:01,730 --> 00:01:08,340
thank you very<font color="#CCCCCC"> much it's always a</font>

4
00:01:04,559 --> 00:01:11,039
pleasure<font color="#E5E5E5"> to come</font><font color="#CCCCCC"> here I'm actually half</font>

5
00:01:08,340 --> 00:01:13,950
<font color="#CCCCCC">way mathematician</font><font color="#E5E5E5"> half way computer</font>

6
00:01:11,040 --> 00:01:16,050
science so I'm an I'm in<font color="#CCCCCC"> a department of</font>

7
00:01:13,950 --> 00:01:19,080
<font color="#CCCCCC">mathematics the</font><font color="#E5E5E5"> districts in computer</font>

8
00:01:16,050 --> 00:01:21,229
science<font color="#E5E5E5"> but I got my degree</font><font color="#CCCCCC"> from Belgium</font>

9
00:01:19,080 --> 00:01:23,550
so that's actually one of the prime

10
00:01:21,229 --> 00:01:27,740
motivations<font color="#CCCCCC"> that I'm here but I've</font>

11
00:01:23,550 --> 00:01:32,070
always<font color="#E5E5E5"> learned a great deal by combing</font>

12
00:01:27,740 --> 00:01:36,119
<font color="#E5E5E5">so I will talk about</font><font color="#CCCCCC"> high-level parallel</font>

13
00:01:32,070 --> 00:01:41,940
programming<font color="#E5E5E5"> and how good it actually</font>

14
00:01:36,119 --> 00:01:43,950
<font color="#E5E5E5">really is for shared memory purposes</font><font color="#CCCCCC"> my</font>

15
00:01:41,940 --> 00:01:46,080
interests my primary<font color="#E5E5E5"> interests is still</font>

16
00:01:43,950 --> 00:01:50,759
in solving polynomial systems but<font color="#E5E5E5"> I</font>

17
00:01:46,080 --> 00:01:54,270
picked<font color="#E5E5E5"> one target example that I can</font><font color="#CCCCCC"> use</font>

18
00:01:50,759 --> 00:01:58,350
as<font color="#E5E5E5"> kind of a</font><font color="#CCCCCC"> running example we have</font>

19
00:01:54,270 --> 00:02:01,350
<font color="#CCCCCC">very good experience with basic work</font>

20
00:01:58,350 --> 00:02:06,030
<font color="#E5E5E5">crew model but we also experimenting</font>

21
00:02:01,350 --> 00:02:08,699
with<font color="#CCCCCC"> different models</font><font color="#E5E5E5"> of load balancing</font>

22
00:02:06,030 --> 00:02:14,190
and<font color="#E5E5E5"> I will mention briefly here the work</font>

23
00:02:08,699 --> 00:02:17,069
<font color="#E5E5E5">stealing methods</font><font color="#CCCCCC"> so this is probably</font><font color="#E5E5E5"> the</font>

24
00:02:14,190 --> 00:02:21,209
<font color="#CCCCCC">most mathematical slide so the</font>

25
00:02:17,069 --> 00:02:25,290
mathematics comes in the beginning so we

26
00:02:21,209 --> 00:02:28,020
<font color="#E5E5E5">have a bipartite graph</font><font color="#CCCCCC"> on one side the</font>

27
00:02:25,290 --> 00:02:30,540
<font color="#E5E5E5">unmarried</font><font color="#CCCCCC"> men on the other</font><font color="#E5E5E5"> side the</font>

28
00:02:28,020 --> 00:02:33,540
unmarried<font color="#E5E5E5"> women and there is an edge</font>

29
00:02:30,540 --> 00:02:35,819
when the pair of an unmarried man and an

30
00:02:33,540 --> 00:02:38,489
unmarried women<font color="#E5E5E5"> whether they like each</font>

31
00:02:35,819 --> 00:02:42,299
other<font color="#E5E5E5"> and they want</font><font color="#CCCCCC"> to marry</font><font color="#E5E5E5"> so the</font>

32
00:02:38,490 --> 00:02:46,080
problem is actually<font color="#E5E5E5"> to count all the</font>

33
00:02:42,300 --> 00:02:48,990
perfect matchings<font color="#E5E5E5"> so you want to connect</font>

34
00:02:46,080 --> 00:02:53,040
every<font color="#E5E5E5"> unmarried man with</font>

35
00:02:48,990 --> 00:02:56,390
married<font color="#E5E5E5"> woman and you want to count in</font>

36
00:02:53,040 --> 00:02:59,630
how many different<font color="#E5E5E5"> ways</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> do that</font>

37
00:02:56,390 --> 00:03:02,940
<font color="#CCCCCC">so this is the graph</font><font color="#E5E5E5"> for interpretation</font>

38
00:02:59,630 --> 00:03:06,090
<font color="#CCCCCC">the data structure is actually a matrix</font>

39
00:03:02,940 --> 00:03:10,680
a matrix of zeros<font color="#CCCCCC"> and</font><font color="#E5E5E5"> ones there is a</font>

40
00:03:06,090 --> 00:03:13,410
<font color="#CCCCCC">zero if there is no match if the first</font>

41
00:03:10,680 --> 00:03:15,180
man and the first<font color="#E5E5E5"> woman over there they</font>

42
00:03:13,410 --> 00:03:18,030
<font color="#CCCCCC">don't really like</font><font color="#E5E5E5"> each other</font><font color="#CCCCCC"> so then</font>

43
00:03:15,180 --> 00:03:19,800
there is a<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> the first man likes the</font>

44
00:03:18,030 --> 00:03:23,250
second woman<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> course also the</font>

45
00:03:19,800 --> 00:03:26,000
<font color="#E5E5E5">other way</font><font color="#CCCCCC"> around</font><font color="#E5E5E5"> then there is a one so</font>

46
00:03:23,250 --> 00:03:29,220
this<font color="#E5E5E5"> is called the marriage problem in</font>

47
00:03:26,000 --> 00:03:33,480
<font color="#E5E5E5">computer science</font><font color="#CCCCCC"> it's also called</font><font color="#E5E5E5"> the</font>

48
00:03:29,220 --> 00:03:36,690
job assignment problem<font color="#E5E5E5"> so a version</font><font color="#CCCCCC"> of</font>

49
00:03:33,480 --> 00:03:39,420
this problem<font color="#E5E5E5"> is that you have set of</font>

50
00:03:36,690 --> 00:03:42,840
workers on one side and you have<font color="#CCCCCC"> a set</font>

51
00:03:39,420 --> 00:03:45,209
<font color="#CCCCCC">of jobs that need to be done</font><font color="#E5E5E5"> so there is</font>

52
00:03:42,840 --> 00:03:49,500
an edge whether a worker is capable of

53
00:03:45,210 --> 00:03:53,460
<font color="#E5E5E5">doing one particular job why is this</font>

54
00:03:49,500 --> 00:03:56,430
problem<font color="#E5E5E5"> so interesting well first of all</font>

55
00:03:53,460 --> 00:03:59,610
the algorithm to do this is really

56
00:03:56,430 --> 00:04:01,460
<font color="#E5E5E5">really straightforward</font><font color="#CCCCCC"> in high school</font>

57
00:03:59,610 --> 00:04:05,400
you must have computed<font color="#CCCCCC"> two determinants</font>

58
00:04:01,460 --> 00:04:07,710
<font color="#CCCCCC">while</font><font color="#E5E5E5"> computing what I want to do is</font>

59
00:04:05,400 --> 00:04:10,530
actually<font color="#E5E5E5"> much easier because you</font><font color="#CCCCCC"> don't</font>

60
00:04:07,710 --> 00:04:12,930
<font color="#E5E5E5">have to do the sine</font><font color="#CCCCCC"> patterns</font><font color="#E5E5E5"> so if you</font>

61
00:04:10,530 --> 00:04:15,120
compute<font color="#E5E5E5"> the determinant you had to</font>

62
00:04:12,930 --> 00:04:17,670
remember<font color="#E5E5E5"> the</font><font color="#CCCCCC"> sine of</font><font color="#E5E5E5"> the permutations</font>

63
00:04:15,120 --> 00:04:21,600
<font color="#E5E5E5">here you don't so it actually is a</font>

64
00:04:17,670 --> 00:04:25,140
simple<font color="#E5E5E5"> row expansion you have two ones</font>

65
00:04:21,600 --> 00:04:29,390
on the first<font color="#E5E5E5"> row so you</font><font color="#CCCCCC"> reduce it to two</font>

66
00:04:25,140 --> 00:04:32,669
simpler problems then here you<font color="#CCCCCC"> have two</font>

67
00:04:29,390 --> 00:04:35,820
ones on the first matrix<font color="#E5E5E5"> and then you</font>

68
00:04:32,670 --> 00:04:38,490
have three<font color="#E5E5E5"> factors for the second matrix</font>

69
00:04:35,820 --> 00:04:41,580
<font color="#CCCCCC">and it goes on like that so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

70
00:04:38,490 --> 00:04:46,140
<font color="#CCCCCC">permanence</font><font color="#E5E5E5"> so it's a very simple</font>

71
00:04:41,580 --> 00:04:49,500
<font color="#E5E5E5">algorithm to code up and but here comes</font>

72
00:04:46,140 --> 00:04:53,789
a surprise it is<font color="#CCCCCC"> really really hard to</font>

73
00:04:49,500 --> 00:04:58,960
do so<font color="#E5E5E5"> already with matrices of dimension</font>

74
00:04:53,790 --> 00:05:01,630
<font color="#CCCCCC">17</font><font color="#E5E5E5"> you have to wait three minutes and</font>

75
00:04:58,960 --> 00:05:03,280
this<font color="#E5E5E5"> problem is what computer science in</font>

76
00:05:01,630 --> 00:05:06,940
theoretical<font color="#CCCCCC"> computer science called</font>

77
00:05:03,280 --> 00:05:09,818
sharp<font color="#CCCCCC"> be hearts</font><font color="#E5E5E5"> so there is actually no</font>

78
00:05:06,940 --> 00:05:12,340
better algorithm<font color="#E5E5E5"> if you want the exact</font>

79
00:05:09,819 --> 00:05:16,330
number than to go<font color="#E5E5E5"> through all the</font>

80
00:05:12,340 --> 00:05:18,909
<font color="#E5E5E5">permutations</font><font color="#CCCCCC"> so you have a</font><font color="#E5E5E5"> matrix of</font>

81
00:05:16,330 --> 00:05:20,979
relatively<font color="#CCCCCC"> small size here are</font>

82
00:05:18,910 --> 00:05:24,699
<font color="#CCCCCC">generating at random just</font><font color="#E5E5E5"> by flipping</font>

83
00:05:20,979 --> 00:05:27,280
coins<font color="#CCCCCC"> and you have kind</font><font color="#E5E5E5"> of a structured</font>

84
00:05:24,699 --> 00:05:29,580
data structure<font color="#CCCCCC"> but the structure of your</font>

85
00:05:27,280 --> 00:05:31,479
<font color="#E5E5E5">computations is actually still</font>

86
00:05:29,580 --> 00:05:35,500
<font color="#E5E5E5">unpredictable because you have a lot of</font>

87
00:05:31,479 --> 00:05:38,758
<font color="#E5E5E5">0 sitting in there so some factors will</font>

88
00:05:35,500 --> 00:05:42,509
compute fast<font color="#CCCCCC"> or the ones will</font><font color="#E5E5E5"> actually</font>

89
00:05:38,759 --> 00:05:42,509
require more time

90
00:05:43,219 --> 00:05:49,289
now the third<font color="#CCCCCC"> thing is that</font><font color="#E5E5E5"> it's</font>

91
00:05:46,049 --> 00:05:53,308
<font color="#CCCCCC">actually also a computation that</font><font color="#E5E5E5"> you can</font>

92
00:05:49,289 --> 00:05:56,969
do in parallel<font color="#E5E5E5"> very quickly</font><font color="#CCCCCC"> so here you</font>

93
00:05:53,309 --> 00:06:00,449
see<font color="#E5E5E5"> a 10 by</font><font color="#CCCCCC"> 10 matrix and at the right</font>

94
00:05:56,969 --> 00:06:03,209
are<font color="#E5E5E5"> the beginning</font><font color="#CCCCCC"> of the permutations so</font>

95
00:06:00,449 --> 00:06:06,569
we have a 2 and<font color="#CCCCCC"> a 1 at the upper right</font>

96
00:06:03,209 --> 00:06:09,689
corner so I selected from the first row

97
00:06:06,569 --> 00:06:12,629
the second one<font color="#CCCCCC"> actually the</font><font color="#E5E5E5"> first one so</font>

98
00:06:09,689 --> 00:06:16,139
in the second column<font color="#CCCCCC"> and</font><font color="#E5E5E5"> from the second</font>

99
00:06:12,629 --> 00:06:18,749
row<font color="#CCCCCC"> I selected the first column</font><font color="#E5E5E5"> so 2 1</font>

100
00:06:16,139 --> 00:06:21,509
<font color="#E5E5E5">so I have a 10 by</font><font color="#CCCCCC"> 10 matrix then I have</font>

101
00:06:18,749 --> 00:06:24,929
to compute the factor as an 8 by 8<font color="#CCCCCC"> and</font>

102
00:06:21,509 --> 00:06:28,110
that 8 by 8 permanent can be computed

103
00:06:24,929 --> 00:06:31,529
independently of the<font color="#CCCCCC"> 10</font><font color="#E5E5E5"> other ones so</font>

104
00:06:28,110 --> 00:06:33,659
the next one<font color="#E5E5E5"> is 2 3 you again select the</font>

105
00:06:31,529 --> 00:06:35,489
second column<font color="#E5E5E5"> and then you select the</font>

106
00:06:33,659 --> 00:06:38,308
<font color="#E5E5E5">third column and then again you</font><font color="#CCCCCC"> have an</font>

107
00:06:35,489 --> 00:06:41,369
8 by 8 permanent that can be computed

108
00:06:38,309 --> 00:06:45,989
independently<font color="#E5E5E5"> so here you have a 10 by</font>

109
00:06:41,369 --> 00:06:50,339
10<font color="#E5E5E5"> permanent that is reduced by 11 8 by</font>

110
00:06:45,989 --> 00:06:53,219
8<font color="#E5E5E5"> permanence so by a simple row</font>

111
00:06:50,339 --> 00:06:55,739
expansion from partial<font color="#E5E5E5"> row expansion you</font>

112
00:06:53,219 --> 00:06:58,550
can actually<font color="#E5E5E5"> generate as many jobs</font><font color="#CCCCCC"> as</font>

113
00:06:55,739 --> 00:06:58,549
<font color="#CCCCCC">you want</font>

114
00:06:59,140 --> 00:07:07,330
so how do you<font color="#CCCCCC"> coat this up while we have</font>

115
00:07:04,410 --> 00:07:09,430
you<font color="#E5E5E5"> all have a parallel</font><font color="#CCCCCC"> computer so they</font>

116
00:07:07,330 --> 00:07:11,979
actually<font color="#E5E5E5"> don't make</font><font color="#CCCCCC"> cereal computers</font>

117
00:07:09,430 --> 00:07:14,560
anymore<font color="#E5E5E5"> so you will have multiple cores</font>

118
00:07:11,980 --> 00:07:18,070
there and the course will have<font color="#E5E5E5"> access</font><font color="#CCCCCC"> to</font>

119
00:07:14,560 --> 00:07:21,340
the memory<font color="#CCCCCC"> so what we do in the work</font>

120
00:07:18,070 --> 00:07:23,650
crew model<font color="#E5E5E5"> we</font><font color="#CCCCCC"> actually initialize a</font>

121
00:07:21,340 --> 00:07:26,679
queue of<font color="#E5E5E5"> jobs like in</font><font color="#CCCCCC"> the previous</font>

122
00:07:23,650 --> 00:07:30,580
<font color="#CCCCCC">example I had</font><font color="#E5E5E5"> 11 drops</font><font color="#CCCCCC"> I have a queue of</font>

123
00:07:26,680 --> 00:07:32,770
<font color="#E5E5E5">11 items sitting in there so the items</font>

124
00:07:30,580 --> 00:07:35,460
are actually<font color="#E5E5E5"> the permutations to start</font>

125
00:07:32,770 --> 00:07:37,750
of the permutations<font color="#E5E5E5"> and the queue</font>

126
00:07:35,460 --> 00:07:43,599
actually the data structure has a

127
00:07:37,750 --> 00:07:46,330
semaphore<font color="#E5E5E5"> so when a task is idle it will</font>

128
00:07:43,600 --> 00:07:50,080
actually<font color="#E5E5E5"> look for the next job</font><font color="#CCCCCC"> now it</font>

129
00:07:46,330 --> 00:07:52,990
has to<font color="#E5E5E5"> request that semaphore wait if</font>

130
00:07:50,080 --> 00:07:57,849
<font color="#E5E5E5">it's occupied</font><font color="#CCCCCC"> by another</font><font color="#E5E5E5"> one if it has</font>

131
00:07:52,990 --> 00:08:00,220
the semaphore<font color="#CCCCCC"> it takes the job it</font>

132
00:07:57,850 --> 00:08:03,600
<font color="#E5E5E5">increases the job counter and it</font>

133
00:08:00,220 --> 00:08:03,600
continues computing

134
00:08:04,759 --> 00:08:14,250
so there is one way of<font color="#E5E5E5"> low balancing</font>

135
00:08:11,850 --> 00:08:17,220
that's the simple way we have been

136
00:08:14,250 --> 00:08:20,520
looking<font color="#CCCCCC"> into another</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> strategy is</font>

137
00:08:17,220 --> 00:08:24,300
that<font color="#E5E5E5"> instead of you have one simple</font><font color="#CCCCCC"> pew</font>

138
00:08:20,520 --> 00:08:26,909
every<font color="#CCCCCC"> task has its own pew</font><font color="#E5E5E5"> a</font>

139
00:08:24,300 --> 00:08:30,870
<font color="#CCCCCC">double-ended queue and that double-ended</font>

140
00:08:26,910 --> 00:08:34,430
<font color="#CCCCCC">queue is used as a stack</font><font color="#E5E5E5"> if the task has</font>

141
00:08:30,870 --> 00:08:37,799
its own DQ<font color="#E5E5E5"> double-ended queue but</font>

142
00:08:34,429 --> 00:08:45,410
underutilized<font color="#CCCCCC"> tasks can actually start</font>

143
00:08:37,799 --> 00:08:48,569
stealing<font color="#E5E5E5"> when</font><font color="#CCCCCC"> their D queue is</font><font color="#E5E5E5"> empty so</font>

144
00:08:45,410 --> 00:08:53,600
here is the<font color="#E5E5E5"> idea so</font><font color="#CCCCCC"> the idea was</font>

145
00:08:48,570 --> 00:08:56,459
actually<font color="#E5E5E5"> a law were a long time</font>

146
00:08:53,600 --> 00:08:58,500
<font color="#E5E5E5">available it's also very good</font><font color="#CCCCCC"> in</font>

147
00:08:56,459 --> 00:09:01,649
<font color="#CCCCCC">situations where you have backtracking</font>

148
00:08:58,500 --> 00:09:04,649
searches<font color="#CCCCCC"> the permanent you can see this</font>

149
00:09:01,649 --> 00:09:07,290
has also<font color="#CCCCCC"> a backtracking search where you</font>

150
00:09:04,649 --> 00:09:09,570
in one direction<font color="#E5E5E5"> you may go very far</font><font color="#CCCCCC"> and</font>

151
00:09:07,290 --> 00:09:12,480
have to<font color="#E5E5E5"> compute a lot in another</font>

152
00:09:09,570 --> 00:09:19,140
direction<font color="#E5E5E5"> you cannot generate that many</font>

153
00:09:12,480 --> 00:09:22,230
jobs again how do we do this in<font color="#CCCCCC"> a</font><font color="#E5E5E5"> DES</font><font color="#CCCCCC"> so</font>

154
00:09:19,140 --> 00:09:24,930
<font color="#CCCCCC">this is kind of a cartoonish slide</font><font color="#E5E5E5"> but</font>

155
00:09:22,230 --> 00:09:29,730
there<font color="#CCCCCC"> is not</font><font color="#E5E5E5"> much</font><font color="#CCCCCC"> more to it so simply</font>

156
00:09:24,930 --> 00:09:32,790
to launch<font color="#E5E5E5"> a set of workers you generate</font>

157
00:09:29,730 --> 00:09:35,279
you actually define a<font color="#CCCCCC"> procedure that</font><font color="#E5E5E5"> is</font>

158
00:09:32,790 --> 00:09:40,050
<font color="#CCCCCC">generic so it takes another procedure</font>

159
00:09:35,279 --> 00:09:42,779
called<font color="#CCCCCC"> drop</font><font color="#E5E5E5"> as a parameter and</font><font color="#CCCCCC"> that job</font>

160
00:09:40,050 --> 00:09:45,719
<font color="#E5E5E5">defines whatever you want to do with</font><font color="#CCCCCC"> it</font>

161
00:09:42,779 --> 00:09:48,150
so<font color="#CCCCCC"> it has two arguments the ID number of</font>

162
00:09:45,720 --> 00:09:51,959
<font color="#E5E5E5">the</font><font color="#CCCCCC"> worker</font><font color="#E5E5E5"> and then the total</font><font color="#CCCCCC"> number of</font>

163
00:09:48,150 --> 00:09:54,360
workers and<font color="#E5E5E5"> the implementation of the</font>

164
00:09:51,959 --> 00:09:57,510
multitasking<font color="#CCCCCC"> that starts all these jobs</font>

165
00:09:54,360 --> 00:10:01,500
is<font color="#CCCCCC"> actually here so this is</font><font color="#E5E5E5"> a procedure</font>

166
00:09:57,510 --> 00:10:04,800
that<font color="#CCCCCC"> I use</font><font color="#E5E5E5"> over and over</font><font color="#CCCCCC"> again job</font>

167
00:10:01,500 --> 00:10:07,820
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> is going to define its own</font>

168
00:10:04,800 --> 00:10:13,020
memory so<font color="#CCCCCC"> you have to make sure</font><font color="#E5E5E5"> that</font>

169
00:10:07,820 --> 00:10:14,660
every task has<font color="#CCCCCC"> its own memory that as a</font>

170
00:10:13,020 --> 00:10:16,579
<font color="#E5E5E5">local variable</font>

171
00:10:14,660 --> 00:10:22,010
so in this way there<font color="#CCCCCC"> are no</font><font color="#E5E5E5"> memory</font>

172
00:10:16,580 --> 00:10:25,880
conflicts but once that<font color="#CCCCCC"> is set up</font><font color="#E5E5E5"> it all</font>

173
00:10:22,010 --> 00:10:28,189
works quite well<font color="#E5E5E5"> so that's one idea</font>

174
00:10:25,880 --> 00:10:31,130
so the second<font color="#CCCCCC"> idea</font><font color="#E5E5E5"> I mentioned from</font>

175
00:10:28,190 --> 00:10:39,770
<font color="#E5E5E5">summer force I call it actually</font><font color="#CCCCCC"> from the</font>

176
00:10:31,130 --> 00:10:42,770
ADAC origins<font color="#CCCCCC"> synchronize the taking of</font>

177
00:10:39,770 --> 00:10:48,260
the<font color="#CCCCCC"> jobs from the cue</font><font color="#E5E5E5"> you actually have</font>

178
00:10:42,770 --> 00:10:50,660
a package<font color="#CCCCCC"> that</font><font color="#E5E5E5"> has one single protected</font>

179
00:10:48,260 --> 00:10:54,110
variable sitting in there<font color="#CCCCCC"> that acts as a</font>

180
00:10:50,660 --> 00:10:57,219
semaphore<font color="#CCCCCC"> so you have a simple array of</font>

181
00:10:54,110 --> 00:11:04,300
pointers<font color="#CCCCCC"> to whatever the jobs are and</font>

182
00:10:57,220 --> 00:11:06,950
that array is protected by the<font color="#CCCCCC"> semaphore</font>

183
00:11:04,300 --> 00:11:10,520
what you also have<font color="#CCCCCC"> is a global variable</font>

184
00:11:06,950 --> 00:11:14,000
here which is simply an array<font color="#CCCCCC"> of factors</font>

185
00:11:10,520 --> 00:11:16,670
<font color="#E5E5E5">so in this application where the</font>

186
00:11:14,000 --> 00:11:21,050
permanent computation say for a 10 by 10

187
00:11:16,670 --> 00:11:23,959
<font color="#CCCCCC">matrix is splitted out into several</font><font color="#E5E5E5"> a by</font>

188
00:11:21,050 --> 00:11:28,459
<font color="#E5E5E5">8 matrices</font><font color="#CCCCCC"> so you will have as many</font>

189
00:11:23,960 --> 00:11:32,240
factors<font color="#E5E5E5"> as</font><font color="#CCCCCC"> you have tasks and every</font><font color="#E5E5E5"> task</font>

190
00:11:28,460 --> 00:11:34,460
will update its own variable and at the

191
00:11:32,240 --> 00:11:36,800
end you actually sum the factors<font color="#E5E5E5"> and</font>

192
00:11:34,460 --> 00:11:40,550
that is done<font color="#E5E5E5"> when all the threads have</font>

193
00:11:36,800 --> 00:11:47,530
finished so that<font color="#CCCCCC"> any</font><font color="#E5E5E5"> global balancing</font>

194
00:11:40,550 --> 00:11:49,939
actually works quite<font color="#CCCCCC"> well this way some</font>

195
00:11:47,530 --> 00:11:52,430
<font color="#CCCCCC">so this is actually then when the fun</font>

196
00:11:49,940 --> 00:11:56,210
starts<font color="#CCCCCC"> see you so</font><font color="#E5E5E5"> this was done on this</font>

197
00:11:52,430 --> 00:11:59,060
laptop<font color="#E5E5E5"> so it has two processors it</font>

198
00:11:56,210 --> 00:12:04,010
supports hyper threading so you can

199
00:11:59,060 --> 00:12:07,040
<font color="#CCCCCC">actually launch for tasks so actually</font>

200
00:12:04,010 --> 00:12:09,319
I'm working<font color="#E5E5E5"> with boolean matrices so you</font>

201
00:12:07,040 --> 00:12:11,719
can also<font color="#E5E5E5"> define it for integer matrices</font>

202
00:12:09,320 --> 00:12:16,060
<font color="#E5E5E5">what I'm actually here counting are all</font>

203
00:12:11,720 --> 00:12:19,070
the permutations<font color="#CCCCCC"> so this is a</font><font color="#E5E5E5"> 16 by 16</font>

204
00:12:16,060 --> 00:12:21,589
<font color="#E5E5E5">matrix so it could go all the</font><font color="#CCCCCC"> way</font><font color="#E5E5E5"> up to</font>

205
00:12:19,070 --> 00:12:23,930
16 factorial<font color="#CCCCCC"> but there are a</font><font color="#E5E5E5"> lot of</font>

206
00:12:21,590 --> 00:12:26,870
<font color="#CCCCCC">zeros in there and I generate them at</font>

207
00:12:23,930 --> 00:12:27,589
random<font color="#CCCCCC"> so I have simply a coin flip</font>

208
00:12:26,870 --> 00:12:30,380
<font color="#CCCCCC">forever</font>

209
00:12:27,590 --> 00:12:33,410
entry in the matrix<font color="#CCCCCC"> so sometimes I</font><font color="#E5E5E5"> have</font>

210
00:12:30,380 --> 00:12:37,240
very small<font color="#E5E5E5"> ish</font><font color="#CCCCCC"> once all the ones I had</font>

211
00:12:33,410 --> 00:12:42,800
very<font color="#E5E5E5"> large</font><font color="#CCCCCC"> ones</font><font color="#E5E5E5"> I can</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> play with</font>

212
00:12:37,240 --> 00:12:45,620
<font color="#E5E5E5">granularity</font><font color="#CCCCCC"> I can expand the first two</font>

213
00:12:42,800 --> 00:12:48,380
rows but it can also expand<font color="#E5E5E5"> the</font><font color="#CCCCCC"> first</font>

214
00:12:45,620 --> 00:12:50,960
three rows<font color="#CCCCCC"> so at the very</font><font color="#E5E5E5"> beginning</font>

215
00:12:48,380 --> 00:12:53,570
<font color="#CCCCCC">before all the tasks are started the</font>

216
00:12:50,960 --> 00:12:57,380
queue<font color="#E5E5E5"> of jobs is built so I have some</font>

217
00:12:53,570 --> 00:13:00,080
playing there<font color="#E5E5E5"> so if you have fewer jobs</font>

218
00:12:57,380 --> 00:13:02,420
you can very quickly fill up and start

219
00:13:00,080 --> 00:13:06,170
all your tasks but then you may<font color="#E5E5E5"> have too</font>

220
00:13:02,420 --> 00:13:11,329
few tasks<font color="#E5E5E5"> for full parallelization</font><font color="#CCCCCC"> you</font>

221
00:13:06,170 --> 00:13:14,630
can also have more jobs and<font color="#E5E5E5"> actually the</font>

222
00:13:11,330 --> 00:13:20,330
<font color="#CCCCCC">to course sometimes</font><font color="#E5E5E5"> you get the speed-up</font>

223
00:13:14,630 --> 00:13:23,840
<font color="#CCCCCC">that you may expect so this is two tasks</font>

224
00:13:20,330 --> 00:13:26,240
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> 3/4 tasks with two tasks</font>

225
00:13:23,840 --> 00:13:28,910
actually not everything is fully

226
00:13:26,240 --> 00:13:32,150
occupied with<font color="#CCCCCC"> four tasks you actually</font>

227
00:13:28,910 --> 00:13:33,770
have five tasks running<font color="#CCCCCC"> so if you run</font>

228
00:13:32,150 --> 00:13:35,959
<font color="#E5E5E5">this</font><font color="#CCCCCC"> you actually see</font><font color="#E5E5E5"> on your</font>

229
00:13:33,770 --> 00:13:38,120
performance monitor that there are five

230
00:13:35,960 --> 00:13:41,240
threats active that might be a<font color="#E5E5E5"> little</font>

231
00:13:38,120 --> 00:13:44,270
bit too much<font color="#E5E5E5"> so then you can also play</font>

232
00:13:41,240 --> 00:13:46,640
with<font color="#E5E5E5"> three tasks and you can expand to</font>

233
00:13:44,270 --> 00:13:54,350
the first three<font color="#CCCCCC"> roles or you can expand</font>

234
00:13:46,640 --> 00:13:56,930
<font color="#E5E5E5">the first two rows so the result of this</font>

235
00:13:54,350 --> 00:14:00,140
experiment<font color="#E5E5E5"> is actually that with very</font>

236
00:13:56,930 --> 00:14:02,780
little code<font color="#E5E5E5"> and already an interesting</font>

237
00:14:00,140 --> 00:14:06,410
application<font color="#E5E5E5"> you can gather a lot of</font>

238
00:14:02,780 --> 00:14:09,650
information<font color="#CCCCCC"> about this particular</font>

239
00:14:06,410 --> 00:14:12,850
<font color="#E5E5E5">application</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> sometimes hit very nice</font>

240
00:14:09,650 --> 00:14:12,850
<font color="#E5E5E5">speed ups</font>

241
00:14:13,700 --> 00:14:20,520
<font color="#CCCCCC">any questions at this</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> sir feel</font>

242
00:14:16,260 --> 00:14:24,120
<font color="#E5E5E5">free to interrupt now what if you</font><font color="#CCCCCC"> have</font>

243
00:14:20,520 --> 00:14:28,939
<font color="#CCCCCC">then real</font><font color="#E5E5E5"> ha</font><font color="#CCCCCC"> workstation</font><font color="#E5E5E5"> so I have also</font>

244
00:14:24,120 --> 00:14:32,220
a<font color="#CCCCCC"> 44 core machine ohm on</font><font color="#E5E5E5"> my desk and</font>

245
00:14:28,940 --> 00:14:36,200
then<font color="#CCCCCC"> you can actually play around</font><font color="#E5E5E5"> with</font>

246
00:14:32,220 --> 00:14:39,330
doubling the number of course each time

247
00:14:36,200 --> 00:14:43,770
<font color="#CCCCCC">so it also supports hyper threading so I</font>

248
00:14:39,330 --> 00:14:46,080
went all the way<font color="#CCCCCC"> up to 64</font><font color="#E5E5E5"> and you can</font>

249
00:14:43,770 --> 00:14:49,040
also play with the number<font color="#E5E5E5"> of jobs</font><font color="#CCCCCC"> so</font>

250
00:14:46,080 --> 00:14:51,000
<font color="#CCCCCC">here this was now an on</font><font color="#E5E5E5"> the same matrix</font>

251
00:14:49,040 --> 00:14:52,500
<font color="#CCCCCC">so I should have</font><font color="#E5E5E5"> said that</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

252
00:14:51,000 --> 00:14:54,780
<font color="#E5E5E5">previous slides</font>

253
00:14:52,500 --> 00:14:57,750
<font color="#E5E5E5">I always generate</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> different matrices</font>

254
00:14:54,780 --> 00:15:01,230
<font color="#CCCCCC">you kind</font><font color="#E5E5E5"> of have this fluctuation</font><font color="#CCCCCC"> here</font>

255
00:14:57,750 --> 00:15:04,530
we<font color="#E5E5E5"> take the same</font><font color="#CCCCCC"> matrix I didn't go I</font>

256
00:15:01,230 --> 00:15:07,500
went<font color="#CCCCCC"> to dimension 17</font><font color="#E5E5E5"> but I didn't want</font>

257
00:15:04,530 --> 00:15:10,079
<font color="#E5E5E5">to</font><font color="#CCCCCC"> way it's too much</font><font color="#E5E5E5"> longer and you can</font>

258
00:15:07,500 --> 00:15:12,780
see<font color="#E5E5E5"> that you can have the relatively few</font>

259
00:15:10,080 --> 00:15:15,030
tasks so then<font color="#E5E5E5"> actually it goes well in</font>

260
00:15:12,780 --> 00:15:17,579
the<font color="#CCCCCC"> beginning but not too</font><font color="#E5E5E5"> well at the</font>

261
00:15:15,030 --> 00:15:21,060
end<font color="#E5E5E5"> actually you better generate more</font>

262
00:15:17,580 --> 00:15:27,030
jobs<font color="#CCCCCC"> so with 44 course I get</font><font color="#E5E5E5"> to a</font>

263
00:15:21,060 --> 00:15:29,339
<font color="#CCCCCC">speed-up of about 30</font><font color="#E5E5E5"> all it's quite</font>

264
00:15:27,030 --> 00:15:31,980
basic code<font color="#E5E5E5"> so what we are</font><font color="#CCCCCC"> now</font>

265
00:15:29,340 --> 00:15:35,180
<font color="#CCCCCC">investigating is the implication is</font><font color="#E5E5E5"> the</font>

266
00:15:31,980 --> 00:15:37,410
application of<font color="#E5E5E5"> work-stealing</font>

267
00:15:35,180 --> 00:15:40,079
<font color="#CCCCCC">so then so this is still</font>

268
00:15:37,410 --> 00:15:42,990
<font color="#E5E5E5">work-in-progress and more an</font>

269
00:15:40,080 --> 00:15:46,050
implementation plan<font color="#E5E5E5"> as something that is</font>

270
00:15:42,990 --> 00:15:49,650
<font color="#E5E5E5">actual working so I will now mainly say</font>

271
00:15:46,050 --> 00:15:52,890
what we<font color="#E5E5E5"> are thinking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> so instead of</font>

272
00:15:49,650 --> 00:15:56,699
having one simple<font color="#E5E5E5"> queue we will now have</font>

273
00:15:52,890 --> 00:15:59,490
an array<font color="#E5E5E5"> of double ended queues we will</font>

274
00:15:56,700 --> 00:16:01,740
need<font color="#CCCCCC"> to semaphores for every double</font>

275
00:15:59,490 --> 00:16:04,650
ended queue<font color="#E5E5E5"> because it could so happen</font>

276
00:16:01,740 --> 00:16:06,930
that the queue actually collapses to one

277
00:16:04,650 --> 00:16:11,430
single elements and you don't want that

278
00:16:06,930 --> 00:16:14,849
<font color="#CCCCCC">the task that owns the queue has</font><font color="#E5E5E5"> to</font>

279
00:16:11,430 --> 00:16:16,689
fight with tasks that<font color="#E5E5E5"> try to steal the</font>

280
00:16:14,850 --> 00:16:19,389
jobs

281
00:16:16,690 --> 00:16:22,060
so that is one thing<font color="#CCCCCC"> that can be</font>

282
00:16:19,389 --> 00:16:27,100
implemented<font color="#E5E5E5"> the other thing is then the</font>

283
00:16:22,060 --> 00:16:30,069
<font color="#E5E5E5">work scaling algorithm itself</font><font color="#CCCCCC"> so we</font>

284
00:16:27,100 --> 00:16:34,540
<font color="#E5E5E5">expect that we actually lose the</font>

285
00:16:30,069 --> 00:16:37,719
<font color="#CCCCCC">speed-up</font><font color="#E5E5E5"> because of the initial time</font><font color="#CCCCCC"> so</font>

286
00:16:34,540 --> 00:16:40,839
every program<font color="#CCCCCC"> actually has a serial</font>

287
00:16:37,720 --> 00:16:42,939
component that<font color="#E5E5E5"> cannot</font><font color="#CCCCCC"> be parallelized</font>

288
00:16:40,839 --> 00:16:45,279
and that is going<font color="#E5E5E5"> to be the main limit</font>

289
00:16:42,939 --> 00:16:47,290
for your speed up now with the

290
00:16:45,279 --> 00:16:50,439
<font color="#CCCCCC">work-stealing actually you</font><font color="#E5E5E5"> don't have</font>

291
00:16:47,290 --> 00:16:54,790
any<font color="#E5E5E5"> startup anymore because every task</font>

292
00:16:50,439 --> 00:16:56,560
will have its own<font color="#CCCCCC"> queue of jobs so</font>

293
00:16:54,790 --> 00:16:59,469
actually you can launch<font color="#E5E5E5"> the tasks</font>

294
00:16:56,560 --> 00:17:02,399
immediately and they will have to<font color="#E5E5E5"> build</font>

295
00:16:59,470 --> 00:17:05,589
their own<font color="#E5E5E5"> views on a very specific</font>

296
00:17:02,399 --> 00:17:08,230
schedule so<font color="#E5E5E5"> you can actually linearize</font>

297
00:17:05,589 --> 00:17:12,280
the permutations you can actually<font color="#E5E5E5"> count</font>

298
00:17:08,230 --> 00:17:15,669
them<font color="#CCCCCC"> one two three</font><font color="#E5E5E5"> and actually</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> that</font>

299
00:17:12,280 --> 00:17:18,129
count<font color="#CCCCCC"> distributor</font><font color="#E5E5E5"> mama among the tasks</font>

300
00:17:15,669 --> 00:17:21,209
<font color="#E5E5E5">so every task will actually go through</font>

301
00:17:18,130 --> 00:17:25,360
all the<font color="#CCCCCC"> permutations but they will only</font>

302
00:17:21,209 --> 00:17:28,510
solve those factors which<font color="#E5E5E5"> where the</font>

303
00:17:25,359 --> 00:17:32,229
remainder modulo<font color="#E5E5E5"> P P the number of tasks</font>

304
00:17:28,510 --> 00:17:34,629
equals their<font color="#CCCCCC"> task identification number</font>

305
00:17:32,230 --> 00:17:37,510
<font color="#E5E5E5">and</font><font color="#CCCCCC"> this way</font><font color="#E5E5E5"> actually they all have</font>

306
00:17:34,630 --> 00:17:41,020
their own<font color="#CCCCCC"> specific recipe for knowing</font>

307
00:17:37,510 --> 00:17:42,850
which factors they<font color="#CCCCCC"> have to do</font><font color="#E5E5E5"> now in the</font>

308
00:17:41,020 --> 00:17:45,480
work skill and<font color="#CCCCCC"> work-stealing</font><font color="#E5E5E5"> then</font>

309
00:17:42,850 --> 00:17:49,570
they're<font color="#E5E5E5"> going to steal</font><font color="#CCCCCC"> from the next</font>

310
00:17:45,480 --> 00:17:52,750
task<font color="#CCCCCC"> so</font><font color="#E5E5E5"> they are not</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to steal all</font>

311
00:17:49,570 --> 00:17:56,580
from the first<font color="#E5E5E5"> task</font><font color="#CCCCCC"> so we're going to go</font>

312
00:17:52,750 --> 00:18:01,230
stealing to the next in the order<font color="#E5E5E5"> of</font>

313
00:17:56,580 --> 00:18:01,230
their identification<font color="#E5E5E5"> numbers</font>

314
00:18:03,149 --> 00:18:10,239
my last<font color="#CCCCCC"> insights or more advertisements</font>

315
00:18:06,299 --> 00:18:15,399
<font color="#E5E5E5">so I have been working on</font><font color="#CCCCCC"> my software</font>

316
00:18:10,240 --> 00:18:17,980
for quite a while<font color="#CCCCCC"> the code</font><font color="#E5E5E5"> that I show</font>

317
00:18:15,399 --> 00:18:20,428
today is<font color="#CCCCCC"> available as</font><font color="#E5E5E5"> you can look it up</font>

318
00:18:17,980 --> 00:18:20,429
at github

319
00:18:21,690 --> 00:18:28,210
so I'm sort of trying<font color="#CCCCCC"> to maintain it</font><font color="#E5E5E5"> so</font>

320
00:18:25,090 --> 00:18:33,010
multitasking is really for shared memory

321
00:18:28,210 --> 00:18:36,309
<font color="#CCCCCC">is really really a good benefit</font><font color="#E5E5E5"> for</font>

322
00:18:33,010 --> 00:18:38,100
exploring parallel algorithms in case

323
00:18:36,309 --> 00:18:40,779
you wondered<font color="#E5E5E5"> why you might need</font>

324
00:18:38,100 --> 00:18:42,969
<font color="#E5E5E5">permanence with the name your system</font>

325
00:18:40,779 --> 00:18:45,279
solving there are actually applications

326
00:18:42,970 --> 00:18:48,299
out there<font color="#CCCCCC"> a few</font><font color="#E5E5E5"> perhaps you have seen</font>

327
00:18:45,279 --> 00:18:52,570
the movie about<font color="#E5E5E5"> the mathematician Nash</font>

328
00:18:48,299 --> 00:18:56,980
so the totally mixed Nash equilibria<font color="#CCCCCC"> are</font>

329
00:18:52,570 --> 00:19:02,350
actually<font color="#CCCCCC"> their number actually is a</font>

330
00:18:56,980 --> 00:19:05,620
<font color="#E5E5E5">permanent so in game theory these things</font>

331
00:19:02,350 --> 00:19:08,320
actually<font color="#E5E5E5"> come up I once taught a course</font>

332
00:19:05,620 --> 00:19:10,330
and was an undergraduate in economics

333
00:19:08,320 --> 00:19:14,020
and actually they teach already<font color="#E5E5E5"> Nash</font>

334
00:19:10,330 --> 00:19:18,658
equilibria<font color="#CCCCCC"> at the undergraduate level so</font>

335
00:19:14,020 --> 00:19:21,129
it's quite common we've worked with

336
00:19:18,659 --> 00:19:23,200
work-stealing already in a polyhedral

337
00:19:21,130 --> 00:19:26,080
context<font color="#E5E5E5"> flow when I typed up the</font>

338
00:19:23,200 --> 00:19:29,140
<font color="#CCCCCC">abstract I was thinking about polyhedral</font>

339
00:19:26,080 --> 00:19:31,299
cones more<font color="#E5E5E5"> but I did not</font><font color="#CCCCCC"> figured that</font>

340
00:19:29,140 --> 00:19:35,460
actually permanents are much much<font color="#CCCCCC"> nicer</font>

341
00:19:31,299 --> 00:19:35,460
<font color="#E5E5E5">for</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> 20-minute talk</font>

342
00:19:35,940 --> 00:19:43,410
so I thank<font color="#CCCCCC"> you</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> your attention if</font>

343
00:19:39,040 --> 00:19:43,409
<font color="#CCCCCC">there are any questions</font><font color="#E5E5E5"> let me know</font>

344
00:19:45,740 --> 00:19:51,440
[Applause]

345
00:19:53,400 --> 00:20:02,890
so the question is did I see by side

346
00:19:56,650 --> 00:20:07,590
effect by<font color="#E5E5E5"> I'm not sure if I understand</font>

347
00:20:02,890 --> 00:20:07,590
<font color="#CCCCCC">so</font><font color="#E5E5E5"> oh yes so the times here</font>

