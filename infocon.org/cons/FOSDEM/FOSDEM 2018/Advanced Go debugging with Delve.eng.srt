1
00:00:07,580 --> 00:00:14,039
<font color="#E5E5E5">all right hello everybody I'm gonna go</font>

2
00:00:10,680 --> 00:00:17,369
ahead<font color="#CCCCCC"> and get started thanks everybody</font>

3
00:00:14,039 --> 00:00:19,380
for showing<font color="#E5E5E5"> up and being here</font><font color="#CCCCCC"> relatively</font>

4
00:00:17,369 --> 00:00:26,430
early<font color="#E5E5E5"> especially</font><font color="#CCCCCC"> given delirium last</font>

5
00:00:19,380 --> 00:00:30,539
night<font color="#CCCCCC"> so yeah my name is Derrick Parker</font>

6
00:00:26,430 --> 00:00:32,399
I am a engineer at Red Hat<font color="#CCCCCC"> previously an</font>

7
00:00:30,539 --> 00:00:42,719
engineer at core<font color="#CCCCCC"> OS and now it's the</font>

8
00:00:32,399 --> 00:00:45,420
same<font color="#CCCCCC"> thing so I'm gonna be I'm gonna</font><font color="#E5E5E5"> be</font>

9
00:00:42,719 --> 00:00:51,229
talking<font color="#CCCCCC"> about advanced go debugging with</font>

10
00:00:45,420 --> 00:00:51,229
<font color="#E5E5E5">delve and</font><font color="#CCCCCC"> one-one disclaimer</font>

11
00:00:52,010 --> 00:00:59,399
despite the advanced word in the talk

12
00:00:57,449 --> 00:01:03,120
<font color="#E5E5E5">this talk</font><font color="#CCCCCC"> will be approachable for</font>

13
00:00:59,399 --> 00:01:05,070
everybody I plan to go through<font color="#CCCCCC"> some</font><font color="#E5E5E5"> more</font>

14
00:01:03,120 --> 00:01:06,450
advanced<font color="#E5E5E5"> things of usage of delve and</font>

15
00:01:05,069 --> 00:01:08,580
some advanced debugging and<font color="#E5E5E5"> some of the</font>

16
00:01:06,450 --> 00:01:10,650
<font color="#E5E5E5">events features that we've</font><font color="#CCCCCC"> added</font><font color="#E5E5E5"> and</font>

17
00:01:08,580 --> 00:01:12,750
also<font color="#E5E5E5"> some deep dives and to go and</font>

18
00:01:10,650 --> 00:01:14,340
things like that<font color="#E5E5E5"> but it all be very</font>

19
00:01:12,750 --> 00:01:18,180
approachable and<font color="#E5E5E5"> there will be a lot of</font>

20
00:01:14,340 --> 00:01:20,070
<font color="#CCCCCC">material for everybody</font><font color="#E5E5E5"> from you know</font>

21
00:01:18,180 --> 00:01:22,800
<font color="#E5E5E5">newish</font><font color="#CCCCCC"> co developers and people who are</font>

22
00:01:20,070 --> 00:01:24,600
new to<font color="#E5E5E5"> this kind of</font><font color="#CCCCCC"> debugging</font><font color="#E5E5E5"> to people</font>

23
00:01:22,800 --> 00:01:35,280
who have<font color="#E5E5E5"> been doing it for</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> very long</font>

24
00:01:24,600 --> 00:01:39,110
<font color="#CCCCCC">time so just</font><font color="#E5E5E5"> to give a little a little</font>

25
00:01:35,280 --> 00:01:42,450
preview<font color="#E5E5E5"> outline of how this talk will go</font>

26
00:01:39,110 --> 00:01:44,520
<font color="#CCCCCC">there's there's essentially three main</font>

27
00:01:42,450 --> 00:01:46,290
<font color="#E5E5E5">things that</font><font color="#CCCCCC"> I want</font><font color="#E5E5E5"> to cover and</font><font color="#CCCCCC"> then</font>

28
00:01:44,520 --> 00:01:48,630
I'll try<font color="#E5E5E5"> to leave some</font><font color="#CCCCCC"> time at</font><font color="#E5E5E5"> the end</font>

29
00:01:46,290 --> 00:01:50,990
<font color="#CCCCCC">for going through some actual examples</font>

30
00:01:48,630 --> 00:01:54,149
on the command<font color="#CCCCCC"> line which will</font><font color="#E5E5E5"> be</font>

31
00:01:50,990 --> 00:01:55,770
interesting to<font color="#E5E5E5"> do one-handed</font><font color="#CCCCCC"> but maybe I</font>

32
00:01:54,150 --> 00:01:57,800
can<font color="#CCCCCC"> just a</font><font color="#E5E5E5"> microphone into</font><font color="#CCCCCC"> my beard or</font>

33
00:01:55,770 --> 00:01:57,800
something

34
00:01:58,280 --> 00:02:04,770
so the the<font color="#CCCCCC"> first the first thing that</font>

35
00:02:02,130 --> 00:02:11,659
I'm<font color="#E5E5E5"> going to cover is what</font><font color="#CCCCCC"> makes go</font>

36
00:02:04,770 --> 00:02:14,370
different so what<font color="#E5E5E5"> what about</font><font color="#CCCCCC"> go</font>

37
00:02:11,659 --> 00:02:16,858
necessitates<font color="#E5E5E5"> new tooling new debug</font>

38
00:02:14,370 --> 00:02:19,500
techniques<font color="#E5E5E5"> things like that and a lot</font><font color="#CCCCCC"> of</font>

39
00:02:16,859 --> 00:02:21,030
I'll take a deep dive<font color="#E5E5E5"> in some of the</font>

40
00:02:19,500 --> 00:02:22,410
the<font color="#E5E5E5"> interesting features and a lot of</font>

41
00:02:21,030 --> 00:02:26,160
<font color="#E5E5E5">the things that make go different</font>

42
00:02:22,410 --> 00:02:27,930
fundamentally from other languages<font color="#CCCCCC"> but</font>

43
00:02:26,160 --> 00:02:31,490
<font color="#E5E5E5">I'll also go</font><font color="#CCCCCC"> into how that ties into</font>

44
00:02:27,930 --> 00:02:34,110
debugging and<font color="#E5E5E5"> and how that</font><font color="#CCCCCC"> can tie into</font>

45
00:02:31,490 --> 00:02:36,450
just in general knowledge<font color="#E5E5E5"> of what your</font>

46
00:02:34,110 --> 00:02:37,470
what<font color="#E5E5E5"> your program is</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> and how you</font>

47
00:02:36,450 --> 00:02:39,619
can figure<font color="#E5E5E5"> out when things are going</font>

48
00:02:37,470 --> 00:02:39,620
wrong

49
00:02:40,230 --> 00:02:45,179
after that I'll talk<font color="#E5E5E5"> about what makes</font>

50
00:02:42,270 --> 00:02:48,570
delve different how it how it<font color="#E5E5E5"> handles</font>

51
00:02:45,180 --> 00:02:50,730
some of<font color="#CCCCCC"> these</font><font color="#E5E5E5"> differences and go and and</font>

52
00:02:48,570 --> 00:02:53,609
the things that<font color="#CCCCCC"> it</font><font color="#E5E5E5"> that it does to make</font>

53
00:02:50,730 --> 00:02:55,829
your your go debugging experience<font color="#CCCCCC"> a lot</font>

54
00:02:53,610 --> 00:03:00,330
better<font color="#E5E5E5"> and a lot more successful and a</font>

55
00:02:55,830 --> 00:03:02,130
lot less<font color="#E5E5E5"> painful most importantly</font><font color="#CCCCCC"> then</font>

56
00:03:00,330 --> 00:03:04,890
I'll talk about the<font color="#CCCCCC"> state of debugging</font>

57
00:03:02,130 --> 00:03:07,880
<font color="#E5E5E5">and go</font><font color="#CCCCCC"> kind of piggybacking off of</font><font color="#E5E5E5"> the</font>

58
00:03:04,890 --> 00:03:09,958
state of go talk that<font color="#E5E5E5"> we just watched</font>

59
00:03:07,880 --> 00:03:12,090
<font color="#CCCCCC">there's there's not going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> any</font>

60
00:03:09,959 --> 00:03:16,200
emojis<font color="#CCCCCC"> in my slides so I apologize</font><font color="#E5E5E5"> for</font>

61
00:03:12,090 --> 00:03:19,170
that<font color="#CCCCCC"> in advance but but there's</font><font color="#E5E5E5"> there's</font>

62
00:03:16,200 --> 00:03:20,970
a lot<font color="#CCCCCC"> of interesting things for debug</font>

63
00:03:19,170 --> 00:03:23,579
<font color="#CCCCCC">support that are coming up</font><font color="#E5E5E5"> in the one</font>

64
00:03:20,970 --> 00:03:25,620
<font color="#E5E5E5">ton release and most importantly in</font>

65
00:03:23,580 --> 00:03:27,300
future<font color="#CCCCCC"> releases</font><font color="#E5E5E5"> 111</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> slated</font><font color="#CCCCCC"> to be</font>

66
00:03:25,620 --> 00:03:30,180
a lot<font color="#E5E5E5"> of really interesting important</font>

67
00:03:27,300 --> 00:03:32,850
changes so I'll cover<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and then as I</font>

68
00:03:30,180 --> 00:03:34,440
mentioned<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> end I'll try to save</font>

69
00:03:32,850 --> 00:03:37,769
<font color="#CCCCCC">some time to go through some examples on</font>

70
00:03:34,440 --> 00:03:40,079
the command<font color="#CCCCCC"> line and and run run through</font>

71
00:03:37,769 --> 00:03:42,120
a few<font color="#CCCCCC"> things</font><font color="#E5E5E5"> to give everybody an idea</font>

72
00:03:40,080 --> 00:03:44,570
<font color="#E5E5E5">of how to use it</font><font color="#CCCCCC"> and what</font><font color="#E5E5E5"> kind of things</font>

73
00:03:42,120 --> 00:03:44,570
you can do

74
00:03:58,020 --> 00:04:03,940
<font color="#E5E5E5">okay so one of the things that I tend to</font>

75
00:04:01,480 --> 00:04:05,890
like<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> to kick off these these</font>

76
00:04:03,940 --> 00:04:11,010
sorts of talks is to<font color="#CCCCCC"> get a feel for</font><font color="#E5E5E5"> the</font>

77
00:04:05,890 --> 00:04:15,250
room<font color="#CCCCCC"> so how many</font><font color="#E5E5E5"> people before today</font>

78
00:04:11,010 --> 00:04:17,440
<font color="#CCCCCC">have heard of delve awesome quite quite</font>

79
00:04:15,250 --> 00:04:20,079
a few<font color="#E5E5E5"> some some who have not</font><font color="#CCCCCC"> so that's</font>

80
00:04:17,440 --> 00:04:22,450
that's<font color="#E5E5E5"> great</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> will this</font><font color="#CCCCCC"> will</font>

81
00:04:20,079 --> 00:04:28,300
hopefully be a new tool to<font color="#E5E5E5"> use in your</font>

82
00:04:22,450 --> 00:04:30,849
daily development<font color="#E5E5E5"> toolbox</font><font color="#CCCCCC"> the people who</font>

83
00:04:28,300 --> 00:04:32,940
have have heard of it<font color="#CCCCCC"> or whatever how</font>

84
00:04:30,850 --> 00:04:35,710
<font color="#CCCCCC">many people have actually used it in</font>

85
00:04:32,940 --> 00:04:37,960
<font color="#E5E5E5">okay cool quite a few</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> also very</font>

86
00:04:35,710 --> 00:04:40,650
exciting<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the people who haven't also</font>

87
00:04:37,960 --> 00:04:43,060
<font color="#E5E5E5">this will be a good introduction and and</font>

88
00:04:40,650 --> 00:04:46,060
<font color="#E5E5E5">talking</font><font color="#CCCCCC"> to some</font><font color="#E5E5E5"> even some advanced</font>

89
00:04:43,060 --> 00:04:47,200
<font color="#E5E5E5">techniques in that so again hopefully</font>

90
00:04:46,060 --> 00:04:49,800
<font color="#E5E5E5">another tool for</font><font color="#CCCCCC"> your development</font>

91
00:04:47,200 --> 00:04:49,800
<font color="#E5E5E5">toolbox</font>

92
00:04:51,810 --> 00:04:58,210
<font color="#E5E5E5">okay so moving forward</font><font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> want</font>

93
00:04:56,470 --> 00:05:01,090
<font color="#CCCCCC">to spend</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> talking about what</font>

94
00:04:58,210 --> 00:05:03,669
makes go different and why new tooling

95
00:05:01,090 --> 00:05:07,570
had to be created<font color="#E5E5E5"> in the first place</font><font color="#CCCCCC"> and</font>

96
00:05:03,670 --> 00:05:08,830
just just understand fundamentally<font color="#CCCCCC"> what</font>

97
00:05:07,570 --> 00:05:10,390
are what are<font color="#E5E5E5"> some of the interesting</font>

98
00:05:08,830 --> 00:05:12,820
<font color="#CCCCCC">things about go and what are</font>

99
00:05:10,390 --> 00:05:14,620
specifically from a<font color="#E5E5E5"> debugging standpoint</font>

100
00:05:12,820 --> 00:05:18,010
<font color="#E5E5E5">what makes it difficult why is the</font>

101
00:05:14,620 --> 00:05:19,720
language<font color="#E5E5E5"> so different</font><font color="#CCCCCC"> and what what what</font>

102
00:05:18,010 --> 00:05:21,460
interesting<font color="#E5E5E5"> things can</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> you what</font>

103
00:05:19,720 --> 00:05:23,680
interesting problems<font color="#CCCCCC"> I can you run into</font>

104
00:05:21,460 --> 00:05:25,109
with<font color="#E5E5E5"> go that you might not run into with</font>

105
00:05:23,680 --> 00:05:28,110
other languages when it comes to

106
00:05:25,110 --> 00:05:28,110
debugging

107
00:05:31,860 --> 00:05:37,950
so the the reason why I think<font color="#E5E5E5"> this is</font>

108
00:05:36,390 --> 00:05:39,300
important is<font color="#CCCCCC"> because I think it's</font>

109
00:05:37,950 --> 00:05:41,010
important to understand what's<font color="#CCCCCC"> happening</font>

110
00:05:39,300 --> 00:05:42,150
<font color="#E5E5E5">in the programming</font><font color="#CCCCCC"> language and the</font>

111
00:05:41,010 --> 00:05:43,830
process and things like that<font color="#E5E5E5"> that you're</font>

112
00:05:42,150 --> 00:05:45,239
<font color="#E5E5E5">running</font><font color="#CCCCCC"> especially when it comes to</font><font color="#E5E5E5"> to</font>

113
00:05:43,830 --> 00:05:47,250
debugging the more you understand

114
00:05:45,240 --> 00:05:51,120
fundamentally the more you'll you'll be

115
00:05:47,250 --> 00:05:52,980
<font color="#CCCCCC">able to go forward</font><font color="#E5E5E5"> and fix having that</font>

116
00:05:51,120 --> 00:05:56,340
<font color="#CCCCCC">knowledge</font><font color="#E5E5E5"> it just makes it a lot</font><font color="#CCCCCC"> easier</font>

117
00:05:52,980 --> 00:06:02,430
<font color="#CCCCCC">to solve to dive into problems and solve</font>

118
00:05:56,340 --> 00:06:05,640
some<font color="#CCCCCC"> of these tough issues so here's a</font>

119
00:06:02,430 --> 00:06:07,260
list of some<font color="#CCCCCC"> of the things</font><font color="#E5E5E5"> that are that</font>

120
00:06:05,640 --> 00:06:11,520
that<font color="#E5E5E5"> make go different</font><font color="#CCCCCC"> Meiko</font><font color="#E5E5E5"> stand out</font>

121
00:06:07,260 --> 00:06:15,120
and in effect the the<font color="#E5E5E5"> debug ability of</font>

122
00:06:11,520 --> 00:06:18,240
it<font color="#E5E5E5"> so first and foremost one of the most</font>

123
00:06:15,120 --> 00:06:20,430
interesting<font color="#E5E5E5"> things</font><font color="#CCCCCC"> is the different</font>

124
00:06:18,240 --> 00:06:22,770
execution model<font color="#CCCCCC"> and that ties into the</font>

125
00:06:20,430 --> 00:06:24,870
<font color="#CCCCCC">next point a little</font><font color="#E5E5E5"> bit with the runtime</font>

126
00:06:22,770 --> 00:06:26,880
and scheduler and<font color="#E5E5E5"> I'll dig into all</font><font color="#CCCCCC"> of</font>

127
00:06:24,870 --> 00:06:32,610
<font color="#E5E5E5">that stuff in pretty good detail here</font>

128
00:06:26,880 --> 00:06:34,380
shortly<font color="#CCCCCC"> but fundamentally</font><font color="#E5E5E5"> go the the</font>

129
00:06:32,610 --> 00:06:35,760
execution<font color="#CCCCCC"> model is different than than</font>

130
00:06:34,380 --> 00:06:36,900
<font color="#E5E5E5">any other programming language</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> this</font>

131
00:06:35,760 --> 00:06:39,150
<font color="#E5E5E5">is one</font><font color="#CCCCCC"> of the things that's exciting</font>

132
00:06:36,900 --> 00:06:42,239
about about the language<font color="#CCCCCC"> and brought</font>

133
00:06:39,150 --> 00:06:43,950
<font color="#E5E5E5">brought many</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> to it but</font><font color="#CCCCCC"> for</font>

134
00:06:42,240 --> 00:06:45,360
traditional tooling and traditional

135
00:06:43,950 --> 00:06:48,950
debugging techniques it can<font color="#E5E5E5"> it</font><font color="#CCCCCC"> can be</font>

136
00:06:45,360 --> 00:06:52,280
confusing and<font color="#E5E5E5"> and it can be difficult</font>

137
00:06:48,950 --> 00:06:55,500
<font color="#E5E5E5">and and break a lot of</font><font color="#CCCCCC"> existing tooling</font>

138
00:06:52,280 --> 00:06:58,710
so what do I<font color="#E5E5E5"> mean by different execution</font>

139
00:06:55,500 --> 00:07:01,650
model<font color="#E5E5E5"> so in a traditional process that's</font>

140
00:06:58,710 --> 00:07:03,599
running on<font color="#CCCCCC"> your system</font><font color="#E5E5E5"> from from the</font>

141
00:07:01,650 --> 00:07:04,349
perspective of like a debugger or

142
00:07:03,600 --> 00:07:06,360
something like<font color="#E5E5E5"> that</font>

143
00:07:04,350 --> 00:07:09,260
the smallest unit<font color="#CCCCCC"> of execution is the</font>

144
00:07:06,360 --> 00:07:12,210
<font color="#CCCCCC">thread right the operating system thread</font>

145
00:07:09,260 --> 00:07:14,070
<font color="#E5E5E5">as long as you're staying on the thing</font>

146
00:07:12,210 --> 00:07:17,190
on<font color="#E5E5E5"> the same thread you're generally</font>

147
00:07:14,070 --> 00:07:18,510
<font color="#E5E5E5">following the same execution path you're</font>

148
00:07:17,190 --> 00:07:20,760
staying within the same context and

149
00:07:18,510 --> 00:07:23,820
frame<font color="#CCCCCC"> and everything and life is good</font>

150
00:07:20,760 --> 00:07:27,210
you're figuring out<font color="#CCCCCC"> your</font><font color="#E5E5E5"> problem and and</font>

151
00:07:23,820 --> 00:07:29,180
you're on<font color="#E5E5E5"> your way to solving it with go</font>

152
00:07:27,210 --> 00:07:31,440
it's a little<font color="#CCCCCC"> bit different so</font>

153
00:07:29,180 --> 00:07:36,180
fundamentally the the smallest unit of

154
00:07:31,440 --> 00:07:37,860
of execution is<font color="#CCCCCC"> the go routine and this</font>

155
00:07:36,180 --> 00:07:41,370
<font color="#E5E5E5">is an important distinction for many</font>

156
00:07:37,860 --> 00:07:44,940
reasons which I'll I'll dig into<font color="#E5E5E5"> later</font>

157
00:07:41,370 --> 00:07:45,630
in<font color="#E5E5E5"> this talk but when it when it</font><font color="#CCCCCC"> comes</font>

158
00:07:44,940 --> 00:07:47,460
to

159
00:07:45,630 --> 00:07:49,260
debugging<font color="#CCCCCC"> what you what you want</font><font color="#E5E5E5"> to do</font>

160
00:07:47,460 --> 00:07:51,900
is you want to<font color="#E5E5E5"> step through obviously</font>

161
00:07:49,260 --> 00:07:53,099
and step through your code and and see

162
00:07:51,900 --> 00:07:56,789
what's happening<font color="#E5E5E5"> so when you're stepping</font>

163
00:07:53,100 --> 00:07:58,170
through your code<font color="#CCCCCC"> it makes</font><font color="#E5E5E5"> it very</font>

164
00:07:56,790 --> 00:07:59,880
<font color="#E5E5E5">difficult to figure out what's</font><font color="#CCCCCC"> happening</font>

165
00:07:58,170 --> 00:08:02,010
if the the code<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> actually</font>

166
00:07:59,880 --> 00:08:05,480
executing moves out<font color="#CCCCCC"> from underneath you</font>

167
00:08:02,010 --> 00:08:08,400
<font color="#CCCCCC">and this can happen with go</font><font color="#E5E5E5"> because of</font>

168
00:08:05,480 --> 00:08:10,320
the execution model<font color="#E5E5E5"> right so go routines</font>

169
00:08:08,400 --> 00:08:12,599
are<font color="#E5E5E5"> multiplexed</font><font color="#CCCCCC"> onto different operating</font>

170
00:08:10,320 --> 00:08:15,300
system threads<font color="#E5E5E5"> if the tools that you're</font>

171
00:08:12,600 --> 00:08:16,440
<font color="#E5E5E5">using are not aware of go routines which</font>

172
00:08:15,300 --> 00:08:18,240
go routines are running which go

173
00:08:16,440 --> 00:08:20,550
routines are running actively on threads

174
00:08:18,240 --> 00:08:23,670
and things like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> it's very</font><font color="#E5E5E5"> possible</font>

175
00:08:20,550 --> 00:08:25,860
<font color="#CCCCCC">for things like context switching to</font>

176
00:08:23,670 --> 00:08:29,430
happen<font color="#E5E5E5"> where the code that's actually</font>

177
00:08:25,860 --> 00:08:32,820
<font color="#E5E5E5">executing is moved out from underneath</font>

178
00:08:29,430 --> 00:08:35,190
you<font color="#CCCCCC"> and you end up at</font><font color="#E5E5E5"> the same at the</font>

179
00:08:32,820 --> 00:08:36,539
<font color="#CCCCCC">same spot in the source code but</font><font color="#E5E5E5"> you are</font>

180
00:08:35,190 --> 00:08:37,830
on a different<font color="#E5E5E5"> girl routine different</font>

181
00:08:36,539 --> 00:08:39,000
stack different memory looking at

182
00:08:37,830 --> 00:08:41,760
different variables things like that

183
00:08:39,000 --> 00:08:45,870
which if you're<font color="#E5E5E5"> not aware of that can</font>

184
00:08:41,760 --> 00:08:48,600
can make debugging really difficult and

185
00:08:45,870 --> 00:08:51,720
confusing<font color="#CCCCCC"> and I'll dig into all of</font><font color="#E5E5E5"> that</font>

186
00:08:48,600 --> 00:08:53,870
a lot more later<font color="#CCCCCC"> so the the second part</font>

187
00:08:51,720 --> 00:08:56,190
is the the<font color="#E5E5E5"> runtime and the scheduler</font>

188
00:08:53,870 --> 00:08:59,420
<font color="#CCCCCC">there's there's some interesting</font><font color="#E5E5E5"> things</font>

189
00:08:56,190 --> 00:09:02,010
<font color="#CCCCCC">with the runtime when it comes to</font>

190
00:08:59,420 --> 00:09:04,410
everything<font color="#E5E5E5"> from you know function calls</font>

191
00:09:02,010 --> 00:09:06,060
to a lot more<font color="#CCCCCC"> and the scheduler kind of</font>

192
00:09:04,410 --> 00:09:09,569
ties into the different execution<font color="#CCCCCC"> model</font>

193
00:09:06,060 --> 00:09:17,069
which<font color="#E5E5E5"> I'll dig into in the in the next</font>

194
00:09:09,570 --> 00:09:19,590
few slides<font color="#E5E5E5"> another difference is that</font>

195
00:09:17,070 --> 00:09:23,790
that<font color="#E5E5E5"> can be a little bit tricky is goes</font>

196
00:09:19,590 --> 00:09:26,310
memory layout<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example over over</font>

197
00:09:23,790 --> 00:09:29,790
the<font color="#E5E5E5"> years the the the stack setup has</font>

198
00:09:26,310 --> 00:09:32,459
changed within within go so it started

199
00:09:29,790 --> 00:09:35,130
out contiguous moved to segmented stacks

200
00:09:32,460 --> 00:09:38,690
<font color="#E5E5E5">and then went</font><font color="#CCCCCC"> back to contiguous stacks</font>

201
00:09:35,130 --> 00:09:41,550
<font color="#E5E5E5">there's also you</font><font color="#CCCCCC"> know the go routines</font>

202
00:09:38,690 --> 00:09:45,210
stack there's the system stack for<font color="#E5E5E5"> C go</font>

203
00:09:41,550 --> 00:09:46,560
and and other things<font color="#E5E5E5"> so stitching a lot</font>

204
00:09:45,210 --> 00:09:50,700
of those<font color="#E5E5E5"> things together can be</font>

205
00:09:46,560 --> 00:09:52,500
difficult<font color="#E5E5E5"> and and can make can make</font>

206
00:09:50,700 --> 00:09:55,800
debugging difficult potentially for

207
00:09:52,500 --> 00:09:58,650
traditional tools<font color="#CCCCCC"> the garbage collector</font>

208
00:09:55,800 --> 00:09:59,279
<font color="#E5E5E5">is well not not not a huge issue when it</font>

209
00:09:58,650 --> 00:10:00,720
<font color="#E5E5E5">comes to</font>

210
00:09:59,279 --> 00:10:02,430
when it comes to normal debugging but

211
00:10:00,720 --> 00:10:04,350
for some advanced debugging features

212
00:10:02,430 --> 00:10:06,089
<font color="#E5E5E5">that's that's</font><font color="#CCCCCC"> something that that is</font>

213
00:10:04,350 --> 00:10:09,389
<font color="#E5E5E5">definitely of consideration the type</font>

214
00:10:06,089 --> 00:10:13,050
system<font color="#CCCCCC"> delve knows go really really</font><font color="#E5E5E5"> well</font>

215
00:10:09,389 --> 00:10:14,310
<font color="#CCCCCC">so it's able</font><font color="#E5E5E5"> to interpret some of</font><font color="#CCCCCC"> the</font>

216
00:10:13,050 --> 00:10:17,459
different types interfaces and<font color="#CCCCCC"> things</font>

217
00:10:14,310 --> 00:10:19,729
like that<font color="#E5E5E5"> and display them</font><font color="#CCCCCC"> a lot a lot</font>

218
00:10:17,459 --> 00:10:19,729
better

219
00:10:21,170 --> 00:10:28,139
so moving on let's I want to<font color="#E5E5E5"> spend some</font>

220
00:10:25,019 --> 00:10:31,980
<font color="#CCCCCC">time digging</font><font color="#E5E5E5"> into the the scheduler and</font>

221
00:10:28,139 --> 00:10:34,850
and what it does and and<font color="#CCCCCC"> will and then</font>

222
00:10:31,980 --> 00:10:46,019
<font color="#E5E5E5">we will look at how it kind of impacts</font>

223
00:10:34,850 --> 00:10:47,009
<font color="#CCCCCC">debugging</font><font color="#E5E5E5"> so just to just to</font><font color="#CCCCCC"> introduce a</font>

224
00:10:46,019 --> 00:10:48,689
little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> for those who aren't familiar</font>

225
00:10:47,009 --> 00:10:50,730
<font color="#E5E5E5">with the actual scheduler the scheduler</font>

226
00:10:48,689 --> 00:10:53,759
is<font color="#E5E5E5"> the the piece of the go runtime that</font>

227
00:10:50,730 --> 00:10:59,250
<font color="#E5E5E5">manages operating system threads moving</font>

228
00:10:53,759 --> 00:11:01,920
go routines around<font color="#E5E5E5"> things like that so</font>

229
00:10:59,250 --> 00:11:04,920
the the<font color="#E5E5E5"> components that</font><font color="#CCCCCC"> make up the the</font>

230
00:11:01,920 --> 00:11:07,050
scheduler internally<font color="#CCCCCC"> are known as the P</font>

231
00:11:04,920 --> 00:11:08,579
the<font color="#E5E5E5"> M and the G and they're explained a</font>

232
00:11:07,050 --> 00:11:11,008
little<font color="#E5E5E5"> bit right there so</font><font color="#CCCCCC"> peas processor</font>

233
00:11:08,579 --> 00:11:13,859
<font color="#CCCCCC">m is thread which is</font><font color="#E5E5E5"> actually a machine</font>

234
00:11:11,009 --> 00:11:23,490
<font color="#E5E5E5">in the internal parlance and G is go</font>

235
00:11:13,860 --> 00:11:27,420
routine<font color="#CCCCCC"> so like I said P represents a</font>

236
00:11:23,490 --> 00:11:29,209
<font color="#CCCCCC">CPU processor core</font><font color="#E5E5E5"> when you when you're</font>

237
00:11:27,420 --> 00:11:31,649
manipulating<font color="#CCCCCC"> Comex procs this is</font>

238
00:11:29,209 --> 00:11:38,279
internally in<font color="#CCCCCC"> the runtime this is the</font>

239
00:11:31,649 --> 00:11:42,019
what what you're manipulating it<font color="#CCCCCC"> it has</font>

240
00:11:38,279 --> 00:11:44,759
it maintains that<font color="#E5E5E5"> each HP processor</font>

241
00:11:42,019 --> 00:11:47,879
<font color="#E5E5E5">value maintains a queue of</font><font color="#CCCCCC"> runnable</font>

242
00:11:44,759 --> 00:11:53,399
<font color="#E5E5E5">goroutines</font><font color="#CCCCCC"> and that</font><font color="#E5E5E5"> that'll be important</font>

243
00:11:47,879 --> 00:11:56,610
a little<font color="#CCCCCC"> bit later so in the M is the OS</font>

244
00:11:53,399 --> 00:11:58,699
thread<font color="#E5E5E5"> and the thread needs a a</font>

245
00:11:56,610 --> 00:12:02,879
processor context to<font color="#E5E5E5"> actually execute</font>

246
00:11:58,699 --> 00:12:06,329
<font color="#CCCCCC">and</font><font color="#E5E5E5"> will will start executing the go</font>

247
00:12:02,879 --> 00:12:09,070
routines that<font color="#CCCCCC"> are that are attached</font><font color="#E5E5E5"> to</font>

248
00:12:06,329 --> 00:12:12,370
the the processor<font color="#E5E5E5"> queue</font>

249
00:12:09,070 --> 00:12:16,240
and and<font color="#E5E5E5"> just pick them off and start</font>

250
00:12:12,370 --> 00:12:20,620
<font color="#E5E5E5">executing and then finally we have go</font>

251
00:12:16,240 --> 00:12:27,790
routine<font color="#CCCCCC"> which you know is a concept</font><font color="#E5E5E5"> that</font>

252
00:12:20,620 --> 00:12:30,940
I'm sure everybody<font color="#CCCCCC"> is familiar with okay</font>

253
00:12:27,790 --> 00:12:32,829
so why this<font color="#E5E5E5"> is important for for</font>

254
00:12:30,940 --> 00:12:36,340
<font color="#E5E5E5">debugging and and specifically with</font>

255
00:12:32,830 --> 00:12:39,300
delve<font color="#E5E5E5"> is it's it's kind of important</font><font color="#CCCCCC"> to</font>

256
00:12:36,340 --> 00:12:43,000
be<font color="#E5E5E5"> aware</font><font color="#CCCCCC"> of like context switching and</font>

257
00:12:39,300 --> 00:12:46,089
<font color="#E5E5E5">and through that how</font><font color="#CCCCCC"> that happens via</font>

258
00:12:43,000 --> 00:12:50,770
like<font color="#E5E5E5"> work-stealing within within the</font>

259
00:12:46,090 --> 00:12:52,990
scheduler<font color="#E5E5E5"> so one</font><font color="#CCCCCC"> of the one of the</font>

260
00:12:50,770 --> 00:12:55,270
fundamental problems<font color="#E5E5E5"> of debugging go</font>

261
00:12:52,990 --> 00:12:57,400
programs<font color="#E5E5E5"> is the fact that as I mentioned</font>

262
00:12:55,270 --> 00:12:59,860
<font color="#E5E5E5">earlier as you're stepping through your</font>

263
00:12:57,400 --> 00:13:02,020
code that's running on<font color="#E5E5E5"> a go</font><font color="#CCCCCC"> routine it's</font>

264
00:12:59,860 --> 00:13:04,600
possible<font color="#E5E5E5"> for context switching to happen</font>

265
00:13:02,020 --> 00:13:09,550
<font color="#E5E5E5">now what</font><font color="#CCCCCC"> that is</font><font color="#E5E5E5"> is the go routine will</font>

266
00:13:04,600 --> 00:13:11,620
be<font color="#E5E5E5"> paused</font><font color="#CCCCCC"> put back and onto a go routine</font>

267
00:13:09,550 --> 00:13:13,359
<font color="#CCCCCC">cue somewhere whether it's on the</font><font color="#E5E5E5"> cue of</font>

268
00:13:11,620 --> 00:13:15,460
that processor or somewhere<font color="#CCCCCC"> else</font><font color="#E5E5E5"> the</font>

269
00:13:13,360 --> 00:13:18,040
global<font color="#E5E5E5"> queue</font><font color="#CCCCCC"> and it's potentially</font>

270
00:13:15,460 --> 00:13:19,600
<font color="#CCCCCC">there's there's potential for that go</font>

271
00:13:18,040 --> 00:13:21,760
routine to<font color="#E5E5E5"> be stolen by another</font>

272
00:13:19,600 --> 00:13:24,490
processor and thread and started<font color="#E5E5E5"> and</font>

273
00:13:21,760 --> 00:13:26,110
executed there so if the tooling doesn't

274
00:13:24,490 --> 00:13:27,310
understand that fundamentally you're

275
00:13:26,110 --> 00:13:30,010
gonna thrash<font color="#E5E5E5"> around and you're going to</font>

276
00:13:27,310 --> 00:13:31,780
end<font color="#E5E5E5"> up in different places</font><font color="#CCCCCC"> in your in</font>

277
00:13:30,010 --> 00:13:33,010
your actually actual program looking at

278
00:13:31,780 --> 00:13:38,230
different memory and variables and<font color="#CCCCCC"> that</font>

279
00:13:33,010 --> 00:13:40,569
<font color="#E5E5E5">can be really</font><font color="#CCCCCC"> confusing so so context</font>

280
00:13:38,230 --> 00:13:45,790
switching as I mentioned is is when when

281
00:13:40,570 --> 00:13:47,020
a girl<font color="#CCCCCC"> routine goes from running to</font><font color="#E5E5E5"> idle</font>

282
00:13:45,790 --> 00:13:49,930
<font color="#E5E5E5">and potentially switches to another</font>

283
00:13:47,020 --> 00:13:51,939
<font color="#E5E5E5">threat</font><font color="#CCCCCC"> another execution</font><font color="#E5E5E5"> context and</font>

284
00:13:49,930 --> 00:13:55,949
<font color="#E5E5E5">this can happen for many different</font>

285
00:13:51,940 --> 00:13:58,210
reasons so<font color="#E5E5E5"> blocking syscall blocking i/o</font>

286
00:13:55,950 --> 00:14:00,490
<font color="#E5E5E5">it can</font><font color="#CCCCCC"> happen during a function call</font>

287
00:13:58,210 --> 00:14:04,840
<font color="#CCCCCC">there's there's a stat stat growth</font>

288
00:14:00,490 --> 00:14:06,780
<font color="#E5E5E5">prologue where where if if this the</font>

289
00:14:04,840 --> 00:14:10,000
stack the girl routine stack needs to be

290
00:14:06,780 --> 00:14:12,459
grown the<font color="#CCCCCC"> the the actual</font><font color="#E5E5E5"> code for</font><font color="#CCCCCC"> that</font>

291
00:14:10,000 --> 00:14:14,230
will run<font color="#E5E5E5"> on the system stack and another</font>

292
00:14:12,460 --> 00:14:18,130
<font color="#CCCCCC">go</font><font color="#E5E5E5"> routine can</font><font color="#CCCCCC"> be run</font><font color="#E5E5E5"> in its place on</font>

293
00:14:14,230 --> 00:14:20,350
that<font color="#E5E5E5"> on that</font><font color="#CCCCCC"> thread runtime go sked is</font>

294
00:14:18,130 --> 00:14:23,430
is an internal function that you can<font color="#CCCCCC"> use</font>

295
00:14:20,350 --> 00:14:25,959
<font color="#CCCCCC">to to cause this</font>

296
00:14:23,430 --> 00:14:28,959
intentionally and then creating a new go

297
00:14:25,959 --> 00:14:30,279
routine can cause it and<font color="#CCCCCC"> I'm sure</font>

298
00:14:28,959 --> 00:14:35,619
<font color="#E5E5E5">there's a few</font><font color="#CCCCCC"> other things but those are</font>

299
00:14:30,279 --> 00:14:36,730
<font color="#E5E5E5">some of the most important I feel so the</font>

300
00:14:35,620 --> 00:14:39,700
next thing I kind<font color="#E5E5E5"> of want to talk about</font>

301
00:14:36,730 --> 00:14:42,399
<font color="#E5E5E5">with relation</font><font color="#CCCCCC"> to work ceiling or context</font>

302
00:14:39,700 --> 00:14:49,930
switching is the<font color="#CCCCCC"> work-stealing</font><font color="#E5E5E5"> algorithm</font>

303
00:14:42,399 --> 00:14:52,899
<font color="#E5E5E5">within the run time so I stole this</font>

304
00:14:49,930 --> 00:14:57,370
diagram<font color="#E5E5E5"> actually from from Jana a little</font>

305
00:14:52,899 --> 00:15:00,700
bit from her<font color="#E5E5E5"> talk on the the scheduler</font>

306
00:14:57,370 --> 00:15:04,600
at go I<font color="#E5E5E5"> believe but</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> different</font>

307
00:15:00,700 --> 00:15:07,720
<font color="#E5E5E5">colors and I made it myself so you're</font>

308
00:15:04,600 --> 00:15:08,980
<font color="#E5E5E5">pretty happy about that</font><font color="#CCCCCC"> so this explains</font>

309
00:15:07,720 --> 00:15:10,540
<font color="#E5E5E5">a little bit</font><font color="#CCCCCC"> about like what the</font>

310
00:15:08,980 --> 00:15:11,860
scheduler looks like<font color="#CCCCCC"> and</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> what</font>

311
00:15:10,540 --> 00:15:13,480
the<font color="#E5E5E5"> layout is so you have processors</font>

312
00:15:11,860 --> 00:15:16,510
there's threads running<font color="#E5E5E5"> on that on those</font>

313
00:15:13,480 --> 00:15:18,160
processors<font color="#CCCCCC"> you know that that</font><font color="#E5E5E5"> use like</font>

314
00:15:16,510 --> 00:15:19,810
<font color="#CCCCCC">they active thread that has</font><font color="#E5E5E5"> the context</font>

315
00:15:18,160 --> 00:15:21,430
of that processor<font color="#E5E5E5"> there's the active go</font>

316
00:15:19,810 --> 00:15:23,469
routine that's<font color="#CCCCCC"> running there's local</font>

317
00:15:21,430 --> 00:15:28,870
<font color="#CCCCCC">queues for every processor context and</font>

318
00:15:23,470 --> 00:15:31,570
then there's a<font color="#E5E5E5"> global queue so when it</font>

319
00:15:28,870 --> 00:15:33,130
when<font color="#CCCCCC"> it</font><font color="#E5E5E5"> comes to that when when you have</font>

320
00:15:31,570 --> 00:15:34,510
a processor that<font color="#E5E5E5"> doesn't have any girl</font>

321
00:15:33,130 --> 00:15:36,449
routines and<font color="#E5E5E5"> it's queue it's possible</font>

322
00:15:34,510 --> 00:15:39,399
that<font color="#E5E5E5"> it can steal from the queue of</font>

323
00:15:36,449 --> 00:15:40,540
<font color="#E5E5E5">another processor context and that's</font>

324
00:15:39,399 --> 00:15:42,160
when you get context switching and

325
00:15:40,540 --> 00:15:43,420
that's when you get like go routines

326
00:15:42,160 --> 00:15:49,390
running on different<font color="#E5E5E5"> threads and things</font>

327
00:15:43,420 --> 00:15:52,170
like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> so the to tie this back</font><font color="#CCCCCC"> in the</font>

328
00:15:49,390 --> 00:15:55,089
the<font color="#CCCCCC"> the most important thing is that</font>

329
00:15:52,170 --> 00:15:56,529
<font color="#E5E5E5">delve knows go right so it knows about</font>

330
00:15:55,089 --> 00:15:59,949
all of these<font color="#CCCCCC"> details it knows all</font><font color="#E5E5E5"> about</font>

331
00:15:56,529 --> 00:16:03,040
all of these internals<font color="#E5E5E5"> and can make your</font>

332
00:15:59,949 --> 00:16:04,870
debugging<font color="#CCCCCC"> experience a lot saner it</font>

333
00:16:03,040 --> 00:16:07,120
knows about<font color="#E5E5E5"> the scheduler knows about go</font>

334
00:16:04,870 --> 00:16:09,459
types<font color="#E5E5E5"> it knows about go calling</font>

335
00:16:07,120 --> 00:16:11,440
conventions and<font color="#E5E5E5"> the run time and</font><font color="#CCCCCC"> a lot</font>

336
00:16:09,459 --> 00:16:13,119
<font color="#CCCCCC">of</font><font color="#E5E5E5"> other other things that just make</font>

337
00:16:11,440 --> 00:16:16,560
your life a lot easier<font color="#CCCCCC"> when it comes to</font>

338
00:16:13,120 --> 00:16:16,560
debugging your go programs

339
00:16:24,350 --> 00:16:30,080
<font color="#E5E5E5">okay so now we'll</font><font color="#CCCCCC"> switch a</font><font color="#E5E5E5"> little bit to</font>

340
00:16:27,620 --> 00:16:32,000
<font color="#E5E5E5">something to something</font><font color="#CCCCCC"> different and and</font>

341
00:16:30,080 --> 00:16:36,910
get into some<font color="#CCCCCC"> of the next areas of the</font>

342
00:16:32,000 --> 00:16:39,500
talk<font color="#CCCCCC"> so let's</font><font color="#E5E5E5"> talk a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit about</font>

343
00:16:36,910 --> 00:16:46,640
<font color="#E5E5E5">debugging go programs right that's why</font>

344
00:16:39,500 --> 00:16:48,530
everybody's<font color="#E5E5E5"> here</font><font color="#CCCCCC"> so I want to</font><font color="#E5E5E5"> start off</font>

345
00:16:46,640 --> 00:16:51,500
a little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> with talking about just</font>

346
00:16:48,530 --> 00:16:51,980
internal go debug support<font color="#CCCCCC"> and what that</font>

347
00:16:51,500 --> 00:16:56,390
<font color="#E5E5E5">looks like</font>

348
00:16:51,980 --> 00:17:00,110
so initially debug support<font color="#E5E5E5"> within go</font>

349
00:16:56,390 --> 00:17:01,340
wasn't<font color="#E5E5E5"> all that great</font><font color="#CCCCCC"> even you</font><font color="#E5E5E5"> know Dell</font>

350
00:17:00,110 --> 00:17:02,690
had a hard time<font color="#CCCCCC"> doing certain things</font>

351
00:17:01,340 --> 00:17:05,569
even though<font color="#E5E5E5"> it was it go specific</font>

352
00:17:02,690 --> 00:17:07,490
debugger<font color="#CCCCCC"> so that is getting</font><font color="#E5E5E5"> a lot better</font>

353
00:17:05,569 --> 00:17:09,770
<font color="#CCCCCC">so there's a lot of there's a lot of</font>

354
00:17:07,490 --> 00:17:12,319
things from<font color="#CCCCCC"> within go from the compiler</font>

355
00:17:09,770 --> 00:17:13,970
linker and<font color="#E5E5E5"> runtime</font><font color="#CCCCCC"> that are going</font><font color="#E5E5E5"> to</font>

356
00:17:12,319 --> 00:17:16,399
<font color="#E5E5E5">improve</font><font color="#CCCCCC"> your overall debug experience</font>

357
00:17:13,970 --> 00:17:18,530
with<font color="#E5E5E5"> Dell within the next few releases</font>

358
00:17:16,400 --> 00:17:20,329
so one time has has<font color="#E5E5E5"> a lot of really big</font>

359
00:17:18,530 --> 00:17:29,210
things<font color="#CCCCCC"> and one 11 is slated</font><font color="#E5E5E5"> to have a</font>

360
00:17:20,329 --> 00:17:31,190
lot as<font color="#E5E5E5"> well</font><font color="#CCCCCC"> so I'll one of the one of</font>

361
00:17:29,210 --> 00:17:33,980
<font color="#E5E5E5">the big things is improved</font><font color="#CCCCCC"> dwarf'</font>

362
00:17:31,190 --> 00:17:39,290
information and an overall debug<font color="#CCCCCC"> support</font>

363
00:17:33,980 --> 00:17:41,390
<font color="#E5E5E5">so we've we've been able to talk with</font><font color="#CCCCCC"> a</font>

364
00:17:39,290 --> 00:17:43,520
<font color="#E5E5E5">lot of the go core folks to improve</font>

365
00:17:41,390 --> 00:17:45,770
<font color="#CCCCCC">dwarf information generation which for</font>

366
00:17:43,520 --> 00:17:49,370
<font color="#E5E5E5">those who aren't familiar dwarf is the</font>

367
00:17:45,770 --> 00:17:52,970
standard format used to describe debug

368
00:17:49,370 --> 00:17:55,429
information<font color="#E5E5E5"> within within binaries so</font>

369
00:17:52,970 --> 00:17:57,650
there's a lot of things that<font color="#E5E5E5"> that were</font>

370
00:17:55,430 --> 00:17:58,850
wrong or incorrect or not implemented

371
00:17:57,650 --> 00:18:01,820
initially in some of the earlier

372
00:17:58,850 --> 00:18:03,439
<font color="#E5E5E5">versions of go but as as new versions</font>

373
00:18:01,820 --> 00:18:04,580
<font color="#CCCCCC">have come out and</font><font color="#E5E5E5"> we've complained</font>

374
00:18:03,440 --> 00:18:06,710
louder and louder

375
00:18:04,580 --> 00:18:08,120
these have been<font color="#E5E5E5"> fixed and and these are</font>

376
00:18:06,710 --> 00:18:12,680
some<font color="#E5E5E5"> things</font><font color="#CCCCCC"> that we've we've also been</font>

377
00:18:08,120 --> 00:18:14,389
<font color="#CCCCCC">able to dig in and fix ourselves so for</font>

378
00:18:12,680 --> 00:18:16,520
<font color="#E5E5E5">example some</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> things that that</font>

379
00:18:14,390 --> 00:18:20,920
have<font color="#E5E5E5"> improved is better variable scope</font>

380
00:18:16,520 --> 00:18:24,170
information<font color="#E5E5E5"> even even you</font><font color="#CCCCCC"> know</font>

381
00:18:20,920 --> 00:18:25,790
<font color="#E5E5E5">relatively small things</font><font color="#CCCCCC"> like the ability</font>

382
00:18:24,170 --> 00:18:27,830
<font color="#CCCCCC">to</font><font color="#E5E5E5"> detect function arguments from</font>

383
00:18:25,790 --> 00:18:30,889
function return values it's pretty

384
00:18:27,830 --> 00:18:33,919
useful feature<font color="#E5E5E5"> and has has only recently</font>

385
00:18:30,890 --> 00:18:36,020
<font color="#E5E5E5">been implemented properly from the</font>

386
00:18:33,920 --> 00:18:37,210
compiler and linker<font color="#E5E5E5"> better support for</font>

387
00:18:36,020 --> 00:18:39,879
<font color="#E5E5E5">cons and</font>

388
00:18:37,210 --> 00:18:42,520
Dorf information for optimized binaries

389
00:18:39,880 --> 00:18:44,470
which is really important<font color="#E5E5E5"> for debugging</font>

390
00:18:42,520 --> 00:18:47,020
<font color="#E5E5E5">binaries that that delve didn't create</font>

391
00:18:44,470 --> 00:18:51,460
<font color="#E5E5E5">or debugging binaries that did not</font>

392
00:18:47,020 --> 00:18:53,168
disable optimizations<font color="#CCCCCC"> possibility of</font>

393
00:18:51,460 --> 00:18:54,490
calling<font color="#E5E5E5"> go functions from within delve</font>

394
00:18:53,169 --> 00:18:57,899
there's still a lot of discussion<font color="#CCCCCC"> around</font>

395
00:18:54,490 --> 00:19:00,700
this but<font color="#E5E5E5"> but the good thing</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> there is</font>

396
00:18:57,899 --> 00:19:03,270
<font color="#CCCCCC">discussion</font><font color="#E5E5E5"> and so</font><font color="#CCCCCC"> we're we're</font><font color="#E5E5E5"> hoping to</font>

397
00:19:00,700 --> 00:19:05,289
to be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to implement that pretty soon</font>

398
00:19:03,270 --> 00:19:06,460
and there's a lot<font color="#E5E5E5"> more so if you're</font>

399
00:19:05,289 --> 00:19:14,470
interested<font color="#E5E5E5"> about this you can</font><font color="#CCCCCC"> check</font><font color="#E5E5E5"> out</font>

400
00:19:06,460 --> 00:19:17,380
the debugging tag on the<font color="#E5E5E5"> go repo</font><font color="#CCCCCC"> cool</font>

401
00:19:14,470 --> 00:19:18,700
so now let's let's move<font color="#E5E5E5"> into actually</font>

402
00:19:17,380 --> 00:19:23,669
talking about delve and how you can<font color="#E5E5E5"> use</font>

403
00:19:18,700 --> 00:19:26,200
<font color="#CCCCCC">it to debug your</font><font color="#E5E5E5"> programs so</font><font color="#CCCCCC"> one of the</font>

404
00:19:23,669 --> 00:19:29,260
one of<font color="#E5E5E5"> the fundamental</font><font color="#CCCCCC"> things that that</font>

405
00:19:26,200 --> 00:19:31,990
I I had in mind when I started<font color="#CCCCCC"> this</font>

406
00:19:29,260 --> 00:19:35,408
project and as the<font color="#CCCCCC"> project has</font><font color="#E5E5E5"> has gone</font>

407
00:19:31,990 --> 00:19:37,929
on<font color="#CCCCCC"> is simplicity</font><font color="#E5E5E5"> so the go tool chain is</font>

408
00:19:35,409 --> 00:19:39,789
simple<font color="#E5E5E5"> the the tools that you use around</font>

409
00:19:37,929 --> 00:19:42,130
the<font color="#E5E5E5"> go ecosystem should also be simple</font>

410
00:19:39,789 --> 00:19:44,590
as well<font color="#CCCCCC"> and I think this is</font><font color="#E5E5E5"> especially</font>

411
00:19:42,130 --> 00:19:45,940
important<font color="#CCCCCC"> forward for debugging because</font>

412
00:19:44,590 --> 00:19:49,270
if you're reaching for<font color="#E5E5E5"> a debugger things</font>

413
00:19:45,940 --> 00:19:50,950
already<font color="#E5E5E5"> aren't going your way and so it</font>

414
00:19:49,270 --> 00:19:52,120
shouldn't frustrate<font color="#E5E5E5"> it's the tooling</font>

415
00:19:50,950 --> 00:19:54,700
shouldn't frustrate to you anymore it

416
00:19:52,120 --> 00:19:57,428
should it should enable you<font color="#CCCCCC"> to to solve</font>

417
00:19:54,700 --> 00:19:59,320
your problem so let's go into<font color="#CCCCCC"> some of</font>

418
00:19:57,429 --> 00:20:00,880
<font color="#E5E5E5">the usage of</font><font color="#CCCCCC"> delve so one of the main</font>

419
00:19:59,320 --> 00:20:04,480
things<font color="#CCCCCC"> that you'll be</font><font color="#E5E5E5"> that you'll be</font>

420
00:20:00,880 --> 00:20:10,360
<font color="#CCCCCC">using is</font><font color="#E5E5E5"> dlv debug</font><font color="#CCCCCC"> so what</font><font color="#E5E5E5"> this does is</font>

421
00:20:04,480 --> 00:20:11,950
it will it will compile it will compile

422
00:20:10,360 --> 00:20:13,600
your program<font color="#E5E5E5"> so if you run it from</font>

423
00:20:11,950 --> 00:20:15,429
within the same directory that<font color="#E5E5E5"> you have</font>

424
00:20:13,600 --> 00:20:17,740
your main package<font color="#E5E5E5"> it will compile your</font>

425
00:20:15,429 --> 00:20:19,750
program with optimizations disabled run

426
00:20:17,740 --> 00:20:21,760
it<font color="#E5E5E5"> attached to it and start a debug</font>

427
00:20:19,750 --> 00:20:24,070
<font color="#CCCCCC">session there's some interesting</font><font color="#E5E5E5"> things</font>

428
00:20:21,760 --> 00:20:26,200
that<font color="#CCCCCC"> you can do with this so you can</font>

429
00:20:24,070 --> 00:20:28,270
also you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> also pass</font><font color="#CCCCCC"> a package pass</font><font color="#E5E5E5"> it</font>

430
00:20:26,200 --> 00:20:29,890
works<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of similar to</font><font color="#E5E5E5"> go build but</font>

431
00:20:28,270 --> 00:20:33,520
one of<font color="#E5E5E5"> the interesting</font><font color="#CCCCCC"> things that that</font>

432
00:20:29,890 --> 00:20:35,470
<font color="#E5E5E5">I I want to</font><font color="#CCCCCC"> mention</font><font color="#E5E5E5"> here that that can</font>

433
00:20:33,520 --> 00:20:37,779
be useful for for<font color="#E5E5E5"> some advanced</font>

434
00:20:35,470 --> 00:20:39,520
<font color="#E5E5E5">debugging techniques is one of the</font>

435
00:20:37,779 --> 00:20:41,200
things we've implemented<font color="#E5E5E5"> fairly recently</font>

436
00:20:39,520 --> 00:20:45,460
is the is the ability<font color="#E5E5E5"> to use different</font>

437
00:20:41,200 --> 00:20:47,799
<font color="#E5E5E5">backends with</font><font color="#CCCCCC"> Delf so for</font><font color="#E5E5E5"> example you</font>

438
00:20:45,460 --> 00:20:49,600
can<font color="#CCCCCC"> use our native back-end that</font><font color="#E5E5E5"> we've</font>

439
00:20:47,799 --> 00:20:50,620
we've<font color="#E5E5E5"> written you can use gdb as a</font>

440
00:20:49,600 --> 00:20:55,539
<font color="#CCCCCC">back-end on OS</font>

441
00:20:50,620 --> 00:20:57,580
<font color="#E5E5E5">we use</font><font color="#CCCCCC"> LDB as a back-end</font><font color="#E5E5E5"> automatically</font>

442
00:20:55,539 --> 00:21:01,049
because of some changes in the in the

443
00:20:57,580 --> 00:21:03,340
<font color="#E5E5E5">mock darwin</font><font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> that broke things and</font>

444
00:21:01,049 --> 00:21:06,940
<font color="#E5E5E5">but most importantly most interestingly</font>

445
00:21:03,340 --> 00:21:10,178
<font color="#E5E5E5">is the</font><font color="#CCCCCC"> ability to</font><font color="#E5E5E5"> use the mozilla</font><font color="#CCCCCC"> our</font>

446
00:21:06,940 --> 00:21:13,870
our debugger<font color="#E5E5E5"> back-end so folks who</font><font color="#CCCCCC"> maybe</font>

447
00:21:10,179 --> 00:21:16,059
aren't familiar with<font color="#E5E5E5"> that</font><font color="#CCCCCC"> mozilla are</font>

448
00:21:13,870 --> 00:21:17,949
our debugger is a record<font color="#E5E5E5"> replay debugger</font>

449
00:21:16,059 --> 00:21:20,200
so it what it<font color="#CCCCCC"> does is it executes</font><font color="#E5E5E5"> your</font>

450
00:21:17,950 --> 00:21:22,059
program<font color="#E5E5E5"> records all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the execution the</font>

451
00:21:20,200 --> 00:21:23,679
memory layout<font color="#E5E5E5"> everything and allows you</font>

452
00:21:22,059 --> 00:21:25,690
to<font color="#CCCCCC"> replace at so if you're debugging</font>

453
00:21:23,679 --> 00:21:28,539
<font color="#CCCCCC">like a Heisenberg right where it's very</font>

454
00:21:25,690 --> 00:21:30,220
<font color="#E5E5E5">difficult</font><font color="#CCCCCC"> to reproduce or anything</font><font color="#E5E5E5"> like</font>

455
00:21:28,539 --> 00:21:33,520
that if you can trigger that<font color="#E5E5E5"> during and</font>

456
00:21:30,220 --> 00:21:34,899
<font color="#E5E5E5">our-our recorded execution</font><font color="#CCCCCC"> you can play</font>

457
00:21:33,520 --> 00:21:37,179
<font color="#E5E5E5">that you can play that back</font>

458
00:21:34,899 --> 00:21:38,469
deterministically<font color="#E5E5E5"> so you can always</font>

459
00:21:37,179 --> 00:21:41,679
trigger that bug it'll always be

460
00:21:38,470 --> 00:21:44,230
triggered the same way and you you can

461
00:21:41,679 --> 00:21:46,480
it can make debugging a lot a lot easier

462
00:21:44,230 --> 00:21:48,520
and<font color="#CCCCCC"> a lot saner for some tough tough</font>

463
00:21:46,480 --> 00:21:49,690
bugs<font color="#E5E5E5"> it also allows you</font><font color="#CCCCCC"> to do</font>

464
00:21:48,520 --> 00:21:52,889
interesting things like reverse

465
00:21:49,690 --> 00:21:56,950
execution so you can you<font color="#CCCCCC"> can play</font><font color="#E5E5E5"> your</font>

466
00:21:52,890 --> 00:21:59,470
<font color="#CCCCCC">your the you can run the process in</font>

467
00:21:56,950 --> 00:22:00,940
<font color="#CCCCCC">reverse and</font><font color="#E5E5E5"> reverse to a breakpoint and</font>

468
00:21:59,470 --> 00:22:02,230
things like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> which can be which can</font>

469
00:22:00,940 --> 00:22:06,460
be really interesting<font color="#CCCCCC"> in really powerful</font>

470
00:22:02,230 --> 00:22:10,320
features<font color="#CCCCCC"> the other the</font><font color="#E5E5E5"> other command is</font>

471
00:22:06,460 --> 00:22:13,480
<font color="#E5E5E5">delve test</font><font color="#CCCCCC"> built a test binary with with</font>

472
00:22:10,320 --> 00:22:17,950
with optimizations disabled<font color="#CCCCCC"> runs and</font>

473
00:22:13,480 --> 00:22:21,970
attaches to<font color="#CCCCCC"> it</font><font color="#E5E5E5"> works pretty</font><font color="#CCCCCC"> much the</font>

474
00:22:17,950 --> 00:22:25,419
<font color="#CCCCCC">same as as like go</font><font color="#E5E5E5"> test you can also</font>

475
00:22:21,970 --> 00:22:27,370
pass pass<font color="#E5E5E5"> like flags to to the</font>

476
00:22:25,419 --> 00:22:29,740
underlying go<font color="#E5E5E5"> test if you want just by</font>

477
00:22:27,370 --> 00:22:34,539
doing<font color="#CCCCCC"> like</font><font color="#E5E5E5"> dlv test - - and then</font>

478
00:22:29,740 --> 00:22:37,240
whatever<font color="#E5E5E5"> Flags we want to pass</font><font color="#CCCCCC"> attach so</font>

479
00:22:34,539 --> 00:22:39,520
you can attach to<font color="#E5E5E5"> a running process with</font>

480
00:22:37,240 --> 00:22:41,230
with better optimized debug<font color="#CCCCCC"> support from</font>

481
00:22:39,520 --> 00:22:43,870
go coming<font color="#E5E5E5"> up this this is going to be a</font>

482
00:22:41,230 --> 00:22:45,250
lot better experience<font color="#CCCCCC"> but for you</font><font color="#E5E5E5"> know</font>

483
00:22:43,870 --> 00:22:47,260
for<font color="#E5E5E5"> the time being if you're if</font><font color="#CCCCCC"> you're</font>

484
00:22:45,250 --> 00:22:49,450
running in like an optimized binary and

485
00:22:47,260 --> 00:22:50,740
you attach<font color="#CCCCCC"> to it it could be a little</font>

486
00:22:49,450 --> 00:22:52,720
<font color="#E5E5E5">bit wonky but for the most part</font><font color="#CCCCCC"> it</font>

487
00:22:50,740 --> 00:22:58,570
should<font color="#E5E5E5"> be alright but just</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> to</font>

488
00:22:52,720 --> 00:22:59,770
<font color="#E5E5E5">note</font><font color="#CCCCCC"> trace</font><font color="#E5E5E5"> traces another thing that I</font>

489
00:22:58,570 --> 00:23:01,240
<font color="#CCCCCC">think is</font><font color="#E5E5E5"> pretty cool so if you're</font>

490
00:22:59,770 --> 00:23:02,889
familiar with<font color="#CCCCCC"> like s trace or something</font>

491
00:23:01,240 --> 00:23:04,420
like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you can you</font><font color="#E5E5E5"> can use delve to</font>

492
00:23:02,890 --> 00:23:06,040
trace<font color="#CCCCCC"> your programs</font>

493
00:23:04,420 --> 00:23:07,660
and with the with the improved support

494
00:23:06,040 --> 00:23:09,820
for being<font color="#E5E5E5"> able to tell function</font>

495
00:23:07,660 --> 00:23:11,200
arguments from function return values

496
00:23:09,820 --> 00:23:12,399
this feature is going<font color="#CCCCCC"> to become a lot</font>

497
00:23:11,200 --> 00:23:15,040
<font color="#CCCCCC">more</font><font color="#E5E5E5"> interesting and a lot more</font><font color="#CCCCCC"> useful</font>

498
00:23:12,400 --> 00:23:19,990
<font color="#E5E5E5">within the next release of go and</font><font color="#CCCCCC"> some</font>

499
00:23:15,040 --> 00:23:23,050
<font color="#CCCCCC">of the next release of delve another</font>

500
00:23:19,990 --> 00:23:25,770
interesting thing is<font color="#CCCCCC"> delve core so dealt</font>

501
00:23:23,050 --> 00:23:29,379
with delve you can<font color="#E5E5E5"> debug core dumps</font><font color="#CCCCCC"> so</font>

502
00:23:25,770 --> 00:23:30,580
<font color="#E5E5E5">to to enable core dumps there's a few</font>

503
00:23:29,380 --> 00:23:33,670
things so<font color="#CCCCCC"> just make sure</font><font color="#E5E5E5"> you have the</font>

504
00:23:30,580 --> 00:23:36,399
proper you limit set<font color="#CCCCCC"> run your binary</font>

505
00:23:33,670 --> 00:23:37,960
<font color="#E5E5E5">with go trace</font><font color="#CCCCCC"> spec equals crash</font><font color="#E5E5E5"> and then</font>

506
00:23:36,400 --> 00:23:39,280
whenever<font color="#E5E5E5"> it panics or crashes or</font>

507
00:23:37,960 --> 00:23:40,150
anything like<font color="#CCCCCC"> that it'll produce a core</font>

508
00:23:39,280 --> 00:23:43,570
<font color="#E5E5E5">dump in that directory</font>

509
00:23:40,150 --> 00:23:45,610
<font color="#E5E5E5">and and you can use delve to debug that</font>

510
00:23:43,570 --> 00:23:47,980
<font color="#CCCCCC">so you get all the power of delve and</font>

511
00:23:45,610 --> 00:23:49,360
what it knows<font color="#CCCCCC"> about go to do post-mortem</font>

512
00:23:47,980 --> 00:23:52,500
debugging which i think is<font color="#CCCCCC"> really</font>

513
00:23:49,360 --> 00:23:52,500
interesting<font color="#E5E5E5"> and can be really powerful</font>

514
00:23:54,990 --> 00:24:00,190
<font color="#CCCCCC">so also a replay so if you have an</font>

515
00:23:58,090 --> 00:24:01,990
existing recording that you've that

516
00:24:00,190 --> 00:24:07,030
<font color="#E5E5E5">you've made with</font><font color="#CCCCCC"> our our you</font><font color="#E5E5E5"> can use</font>

517
00:24:01,990 --> 00:24:08,380
delve<font color="#CCCCCC"> to to</font><font color="#E5E5E5"> debug it and run</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> and this</font>

518
00:24:07,030 --> 00:24:10,750
is this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> interesting if you want to</font>

519
00:24:08,380 --> 00:24:12,700
keep<font color="#E5E5E5"> the same recording around</font><font color="#CCCCCC"> and not</font>

520
00:24:10,750 --> 00:24:13,990
just use<font color="#E5E5E5"> the</font><font color="#CCCCCC"> back-end flag to do the</font>

521
00:24:12,700 --> 00:24:22,810
recording and replay for<font color="#E5E5E5"> you every</font>

522
00:24:13,990 --> 00:24:23,980
single<font color="#E5E5E5"> time</font><font color="#CCCCCC"> and with that I'm pretty</font>

523
00:24:22,810 --> 00:24:26,830
<font color="#E5E5E5">much done</font><font color="#CCCCCC"> I don't know that I have</font>

524
00:24:23,980 --> 00:24:28,210
<font color="#CCCCCC">actual time for any any terminal</font>

525
00:24:26,830 --> 00:24:28,780
examples or anything like<font color="#E5E5E5"> that but I'll</font>

526
00:24:28,210 --> 00:24:30,670
be around

527
00:24:28,780 --> 00:24:32,560
<font color="#CCCCCC">Alessandro Cole maintainer of delve will</font>

528
00:24:30,670 --> 00:24:34,060
be<font color="#E5E5E5"> around as well so we can run through</font>

529
00:24:32,560 --> 00:24:37,360
examples or talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> it in a little</font>

530
00:24:34,060 --> 00:24:38,830
<font color="#E5E5E5">bit more detail so</font><font color="#CCCCCC"> yeah that's it</font><font color="#E5E5E5"> thank</font>

531
00:24:37,360 --> 00:24:45,679
you everybody

532
00:24:38,830 --> 00:24:45,679
[Applause]

533
00:25:00,270 --> 00:25:04,830
we have some time<font color="#CCCCCC"> for Q&A so</font><font color="#E5E5E5"> if you have</font>

534
00:25:02,520 --> 00:25:07,129
<font color="#E5E5E5">questions for</font><font color="#CCCCCC"> Derrick please</font><font color="#E5E5E5"> just raise</font>

535
00:25:04,830 --> 00:25:21,270
<font color="#E5E5E5">your hand and shop really loud</font>

536
00:25:07,130 --> 00:25:22,410
yes<font color="#CCCCCC"> so the the question was are there</font>

537
00:25:21,270 --> 00:25:24,720
any<font color="#E5E5E5"> fundamental</font><font color="#CCCCCC"> difference between</font>

538
00:25:22,410 --> 00:25:26,280
<font color="#E5E5E5">platforms so switching from different</font>

539
00:25:24,720 --> 00:25:28,679
operating systems and<font color="#CCCCCC"> things like</font><font color="#E5E5E5"> that</font>

540
00:25:26,280 --> 00:25:31,440
<font color="#CCCCCC">and no so the the debugging experience</font>

541
00:25:28,679 --> 00:25:35,030
<font color="#CCCCCC">should be consistent regardless</font><font color="#E5E5E5"> of what</font>

542
00:25:31,440 --> 00:25:43,049
operating system you're<font color="#E5E5E5"> using yeah yes</font>

543
00:25:35,030 --> 00:25:45,690
yes so the<font color="#E5E5E5"> question was how how far are</font>

544
00:25:43,049 --> 00:25:48,600
we as far<font color="#CCCCCC"> as function call support</font>

545
00:25:45,690 --> 00:25:50,870
<font color="#E5E5E5">within delve</font><font color="#CCCCCC"> and right now there's</font>

546
00:25:48,600 --> 00:25:54,570
there's<font color="#CCCCCC"> been a lot of discussion between</font>

547
00:25:50,870 --> 00:25:56,520
the the core team on delve<font color="#E5E5E5"> and the some</font>

548
00:25:54,570 --> 00:26:00,389
of<font color="#E5E5E5"> the folks on the core</font><font color="#CCCCCC"> team on go at</font>

549
00:25:56,520 --> 00:26:01,500
Google and so we're we're we're<font color="#CCCCCC"> in</font>

550
00:26:00,390 --> 00:26:02,940
discussions on<font color="#E5E5E5"> how we can actually</font>

551
00:26:01,500 --> 00:26:05,760
<font color="#CCCCCC">achieve this there's a lot of really</font>

552
00:26:02,940 --> 00:26:07,470
complicated<font color="#E5E5E5"> things that</font><font color="#CCCCCC"> go into actually</font>

553
00:26:05,760 --> 00:26:10,620
implementing this feature<font color="#E5E5E5"> because of</font>

554
00:26:07,470 --> 00:26:12,450
some of the things<font color="#E5E5E5"> that I</font><font color="#CCCCCC"> mentioned but</font>

555
00:26:10,620 --> 00:26:13,949
we're we're actively<font color="#CCCCCC"> working on it we're</font>

556
00:26:12,450 --> 00:26:15,960
<font color="#E5E5E5">actively discussing it we're bringing in</font>

557
00:26:13,950 --> 00:26:18,450
folks<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> NGO like core team and</font>

558
00:26:15,960 --> 00:26:20,309
the runtime team and things<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that to</font>

559
00:26:18,450 --> 00:26:21,750
come<font color="#CCCCCC"> up</font><font color="#E5E5E5"> with the best solution so that</font>

560
00:26:20,309 --> 00:26:24,178
<font color="#CCCCCC">we can provide this</font><font color="#E5E5E5"> feature going</font>

561
00:26:21,750 --> 00:26:26,580
forward so hopefully relatively soon

562
00:26:24,179 --> 00:26:30,960
within<font color="#E5E5E5"> the next few releases of of delve</font>

563
00:26:26,580 --> 00:26:32,520
<font color="#CCCCCC">well</font><font color="#E5E5E5"> we'll have that support do you</font>

564
00:26:30,960 --> 00:26:34,380
<font color="#E5E5E5">remember when they said</font><font color="#CCCCCC"> that if you're</font>

565
00:26:32,520 --> 00:26:37,168
in between<font color="#CCCCCC"> the camera</font><font color="#E5E5E5"> and my face you're</font>

566
00:26:34,380 --> 00:26:38,580
on the video that<font color="#CCCCCC"> is still valid so if</font>

567
00:26:37,169 --> 00:26:41,370
you're in<font color="#CCCCCC"> between the camera in our</font>

568
00:26:38,580 --> 00:26:43,889
faces<font color="#CCCCCC"> you're on the video</font><font color="#E5E5E5"> live stream to</font>

569
00:26:41,370 --> 00:26:45,719
the world<font color="#E5E5E5"> sure so you know thank</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> if</font>

570
00:26:43,890 --> 00:26:51,809
there's any more<font color="#E5E5E5"> questions</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> we</font>

571
00:26:45,720 --> 00:26:54,650
still<font color="#CCCCCC"> have something anybody else</font>

572
00:26:51,809 --> 00:26:54,649
questions

573
00:26:55,570 --> 00:27:03,859
cool<font color="#E5E5E5"> thank you</font>

574
00:26:59,080 --> 00:27:03,859
[Applause]

