1
00:00:05,100 --> 00:00:13,650
still here okay

2
00:00:16,520 --> 00:00:23,490
<font color="#E5E5E5">okay so welcome to</font><font color="#CCCCCC"> everybody my name is</font>

3
00:00:21,480 --> 00:00:26,010
<font color="#CCCCCC">Frank Rebecca</font><font color="#E5E5E5"> so I'm living in Berlin</font>

4
00:00:23,490 --> 00:00:30,180
I'm software consultant and some time

5
00:00:26,010 --> 00:00:32,820
<font color="#E5E5E5">ago</font><font color="#CCCCCC"> I got</font><font color="#E5E5E5"> attracted by rust and so I</font>

6
00:00:30,180 --> 00:00:35,550
<font color="#E5E5E5">assume</font><font color="#CCCCCC"> everybody here knows rust or just</font>

7
00:00:32,820 --> 00:00:38,070
to repeat<font color="#CCCCCC"> it so its key features are</font>

8
00:00:35,550 --> 00:00:41,099
support for concurrency<font color="#E5E5E5"> memory safety</font>

9
00:00:38,070 --> 00:00:44,190
performance<font color="#E5E5E5"> and especially memory</font>

10
00:00:41,100 --> 00:00:47,130
management deterministic management of

11
00:00:44,190 --> 00:00:50,640
resources<font color="#CCCCCC"> there is</font><font color="#E5E5E5"> no garbage collector</font>

12
00:00:47,130 --> 00:00:53,550
<font color="#CCCCCC">built-in which</font><font color="#E5E5E5"> is a very important</font>

13
00:00:50,640 --> 00:00:56,190
feature<font color="#CCCCCC"> its favor stack allocation no</font>

14
00:00:53,550 --> 00:01:00,239
implicit boxing so there is no<font color="#E5E5E5"> hidden</font>

15
00:00:56,190 --> 00:01:03,720
location of heap memory and causing

16
00:01:00,240 --> 00:01:07,890
delays in processing so and I<font color="#E5E5E5"> asked</font>

17
00:01:03,720 --> 00:01:10,650
myself so if we want to<font color="#E5E5E5"> or did you ask</font>

18
00:01:07,890 --> 00:01:13,460
yourself<font color="#E5E5E5"> did you ever ask if I've got</font>

19
00:01:10,650 --> 00:01:17,070
such a cool<font color="#E5E5E5"> system how could I integrate</font>

20
00:01:13,460 --> 00:01:19,649
customizable features that are performed

21
00:01:17,070 --> 00:01:22,229
some scripting and so allowing me<font color="#CCCCCC"> to</font>

22
00:01:19,650 --> 00:01:25,220
change behavior<font color="#E5E5E5"> during runtime without</font>

23
00:01:22,230 --> 00:01:29,580
restarts without reprogramming so<font color="#E5E5E5"> and I</font>

24
00:01:25,220 --> 00:01:33,150
<font color="#E5E5E5">I thought</font><font color="#CCCCCC"> about a small message broker</font>

25
00:01:29,580 --> 00:01:34,710
which should be customizable so we would

26
00:01:33,150 --> 00:01:36,600
need byte level manipulation

27
00:01:34,710 --> 00:01:38,669
<font color="#E5E5E5">deterministic management of resources of</font>

28
00:01:36,600 --> 00:01:42,059
<font color="#E5E5E5">course because we don't want to get a</font>

29
00:01:38,670 --> 00:01:44,370
step back back to<font color="#CCCCCC"> a system so if I want</font>

30
00:01:42,060 --> 00:01:46,520
<font color="#E5E5E5">to if I</font><font color="#CCCCCC"> want to have a</font><font color="#E5E5E5"> heap allocation</font>

31
00:01:44,370 --> 00:01:48,720
could you use Java whatever<font color="#E5E5E5"> or</font>

32
00:01:46,520 --> 00:01:50,880
<font color="#E5E5E5">JavaScript</font><font color="#CCCCCC"> from the beginning and</font>

33
00:01:48,720 --> 00:01:53,580
implement everything<font color="#E5E5E5"> in JavaScript so</font>

34
00:01:50,880 --> 00:01:56,310
this is a very important feature for<font color="#E5E5E5"> me</font>

35
00:01:53,580 --> 00:02:00,630
small footprint security safety<font color="#E5E5E5"> and</font>

36
00:01:56,310 --> 00:02:04,610
customizable<font color="#E5E5E5"> and so I had to look around</font>

37
00:02:00,630 --> 00:02:07,199
so what's available<font color="#E5E5E5"> what could I use</font><font color="#CCCCCC"> and</font>

38
00:02:04,610 --> 00:02:10,440
so I had a<font color="#E5E5E5"> look at Lua</font>

39
00:02:07,200 --> 00:02:14,900
Python and JavaScript<font color="#E5E5E5"> as interpreters</font>

40
00:02:10,440 --> 00:02:17,670
and there is always<font color="#CCCCCC"> a high complexity</font>

41
00:02:14,900 --> 00:02:21,080
<font color="#CCCCCC">dynamic heap allocation it's always</font>

42
00:02:17,670 --> 00:02:23,720
involved so<font color="#E5E5E5"> we can't get a get</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> of it</font>

43
00:02:21,080 --> 00:02:26,519
<font color="#CCCCCC">there's an execution overhead and</font>

44
00:02:23,720 --> 00:02:28,680
similar with<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> we age</font>

45
00:02:26,519 --> 00:02:30,989
so there is even<font color="#CCCCCC"> a more a higher</font>

46
00:02:28,680 --> 00:02:35,069
complexity because it's

47
00:02:30,989 --> 00:02:38,689
everything during<font color="#CCCCCC"> startup</font><font color="#E5E5E5"> and then the</font>

48
00:02:35,069 --> 00:02:41,609
<font color="#E5E5E5">the benefit is there was a lower lower</font>

49
00:02:38,689 --> 00:02:45,870
overhead<font color="#E5E5E5"> execution overhead during</font>

50
00:02:41,610 --> 00:02:47,459
<font color="#CCCCCC">runtime but</font><font color="#E5E5E5"> none</font><font color="#CCCCCC"> of these really</font><font color="#E5E5E5"> allow</font>

51
00:02:45,870 --> 00:02:49,530
me to<font color="#CCCCCC"> do the domestic resource</font>

52
00:02:47,459 --> 00:02:52,890
management<font color="#E5E5E5"> they all kick in they all</font>

53
00:02:49,530 --> 00:02:55,560
bring in a garbage<font color="#CCCCCC"> collector and in fact</font>

54
00:02:52,890 --> 00:02:58,738
they destroy the benefits<font color="#E5E5E5"> of the rust</font>

55
00:02:55,560 --> 00:03:04,650
environment or the application<font color="#E5E5E5"> executing</font>

56
00:02:58,739 --> 00:03:07,290
this this execution<font color="#E5E5E5"> engine and so I had</font>

57
00:03:04,650 --> 00:03:12,620
a look finally at<font color="#CCCCCC"> forth</font><font color="#E5E5E5"> and I stumbled</font>

58
00:03:07,290 --> 00:03:16,470
<font color="#CCCCCC">across but assembly</font><font color="#E5E5E5"> and which is very</font>

59
00:03:12,620 --> 00:03:21,480
low<font color="#E5E5E5"> level has low overhead or almost no</font>

60
00:03:16,470 --> 00:03:24,900
overhead<font color="#E5E5E5"> and the difference is that the</font>

61
00:03:21,480 --> 00:03:28,679
other concepts they always incorporate a

62
00:03:24,900 --> 00:03:31,769
full powers are pausing<font color="#E5E5E5"> abstract syntax</font>

63
00:03:28,680 --> 00:03:33,540
tree optimizing the code getting

64
00:03:31,769 --> 00:03:36,569
intermediate<font color="#E5E5E5"> representation and then if</font>

65
00:03:33,540 --> 00:03:40,019
<font color="#E5E5E5">it's treated getting some execution code</font>

66
00:03:36,569 --> 00:03:41,638
but still<font color="#CCCCCC"> JavaScript still is based so</font>

67
00:03:40,019 --> 00:03:43,530
it's not it doesn't favor stack

68
00:03:41,639 --> 00:03:45,840
allocation<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> reverse heap</font>

69
00:03:43,530 --> 00:03:48,959
allocation<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> always end up with a</font>

70
00:03:45,840 --> 00:03:51,599
system<font color="#CCCCCC"> allocating a lot of memory</font><font color="#E5E5E5"> and I</font>

71
00:03:48,959 --> 00:03:57,060
don't<font color="#E5E5E5"> want this so that was my</font><font color="#CCCCCC"> morals</font><font color="#E5E5E5"> my</font>

72
00:03:51,599 --> 00:04:02,220
red line so and so having<font color="#E5E5E5"> a</font><font color="#CCCCCC"> look at web</font>

73
00:03:57,060 --> 00:04:05,909
assembly<font color="#E5E5E5"> so where does</font><font color="#CCCCCC"> it come from</font><font color="#E5E5E5"> and</font>

74
00:04:02,220 --> 00:04:11,340
what<font color="#E5E5E5"> is it intended</font><font color="#CCCCCC"> for so weapon sembly</font>

75
00:04:05,909 --> 00:04:14,099
has came up in 2015<font color="#CCCCCC"> and it's not a</font>

76
00:04:11,340 --> 00:04:16,728
<font color="#E5E5E5">replacement of</font><font color="#CCCCCC"> javascript so it's a</font>

77
00:04:14,099 --> 00:04:19,680
<font color="#E5E5E5">complement of</font><font color="#CCCCCC"> javascript</font><font color="#E5E5E5"> so every time</font>

78
00:04:16,728 --> 00:04:23,340
the the<font color="#E5E5E5"> problem with</font><font color="#CCCCCC"> javascript is that</font>

79
00:04:19,680 --> 00:04:25,590
<font color="#CCCCCC">it's always heap oriented and it's doing</font>

80
00:04:23,340 --> 00:04:29,280
a lot<font color="#E5E5E5"> of even mathematical operations</font>

81
00:04:25,590 --> 00:04:36,150
<font color="#E5E5E5">requiring refresh and keep operations</font>

82
00:04:29,280 --> 00:04:38,369
and so dependent the idea is we

83
00:04:36,150 --> 00:04:39,929
<font color="#CCCCCC">introduce some</font><font color="#E5E5E5"> kind of assembly code</font>

84
00:04:38,370 --> 00:04:43,639
which will

85
00:04:39,930 --> 00:04:46,350
caught by the<font color="#E5E5E5"> JavaScript to do the</font><font color="#CCCCCC"> - -</font>

86
00:04:43,639 --> 00:04:51,210
to speed<font color="#CCCCCC"> up perform perform critical</font>

87
00:04:46,350 --> 00:04:54,690
<font color="#E5E5E5">operations and so if we've</font><font color="#CCCCCC"> got a</font>

88
00:04:51,210 --> 00:04:57,750
<font color="#CCCCCC">JavaScript code and we have got the flow</font>

89
00:04:54,690 --> 00:05:00,690
the<font color="#CCCCCC"> flow here so there might be</font><font color="#E5E5E5"> in</font>

90
00:04:57,750 --> 00:05:03,710
<font color="#CCCCCC">operation which kicks in to the</font><font color="#E5E5E5"> assembly</font>

91
00:05:00,690 --> 00:05:05,969
code<font color="#E5E5E5"> during the performance critical</font>

92
00:05:03,710 --> 00:05:10,440
<font color="#E5E5E5">computation and then</font><font color="#CCCCCC"> getting back</font><font color="#E5E5E5"> and</font>

93
00:05:05,970 --> 00:05:13,860
continuing JavaScript and<font color="#E5E5E5"> so web</font>

94
00:05:10,440 --> 00:05:17,250
assemblies incorporates a portable stack

95
00:05:13,860 --> 00:05:22,320
machine<font color="#E5E5E5"> the notation is it's a binary</font>

96
00:05:17,250 --> 00:05:27,060
notation and<font color="#E5E5E5"> but it also provides a text</font>

97
00:05:22,320 --> 00:05:35,009
text based or a representation<font color="#CCCCCC"> and you</font>

98
00:05:27,060 --> 00:05:37,380
<font color="#CCCCCC">can you can use C++ or rust</font><font color="#E5E5E5"> to create a</font>

99
00:05:35,009 --> 00:05:40,410
binary code webassembly binary code

100
00:05:37,380 --> 00:05:43,050
<font color="#CCCCCC">which will</font><font color="#E5E5E5"> be glued with JavaScript into</font>

101
00:05:40,410 --> 00:05:46,860
an HTML<font color="#CCCCCC"> page and then executed in the</font>

102
00:05:43,050 --> 00:05:49,800
<font color="#E5E5E5">browser</font><font color="#CCCCCC"> and the idea</font><font color="#E5E5E5"> or the</font><font color="#CCCCCC"> question now</font>

103
00:05:46,860 --> 00:05:50,610
<font color="#E5E5E5">boss would I be</font><font color="#CCCCCC"> able to get away with</font>

104
00:05:49,800 --> 00:05:53,460
JavaScript

105
00:05:50,610 --> 00:05:55,919
<font color="#E5E5E5">and would it be</font><font color="#CCCCCC"> a solution</font><font color="#E5E5E5"> just to use</font>

106
00:05:53,460 --> 00:05:58,638
<font color="#E5E5E5">what assembly just to use the the</font>

107
00:05:55,919 --> 00:06:01,789
<font color="#E5E5E5">execution engine here and instead of</font>

108
00:05:58,639 --> 00:06:05,310
<font color="#E5E5E5">JavaScript interacting with the</font>

109
00:06:01,789 --> 00:06:08,159
execution engine<font color="#E5E5E5"> directly interacting</font>

110
00:06:05,310 --> 00:06:12,090
from<font color="#CCCCCC"> rust -</font><font color="#E5E5E5"> to assembly engine and</font>

111
00:06:08,159 --> 00:06:14,490
getting all the<font color="#CCCCCC"> benefits</font><font color="#E5E5E5"> so it's a wide</font>

112
00:06:12,090 --> 00:06:18,060
<font color="#E5E5E5">spread so there</font><font color="#CCCCCC"> is a community using</font>

113
00:06:14,490 --> 00:06:21,090
that assembly there are good compilers<font color="#CCCCCC"> I</font>

114
00:06:18,060 --> 00:06:23,159
can do my compilation on<font color="#CCCCCC"> high level</font>

115
00:06:21,090 --> 00:06:27,448
<font color="#E5E5E5">language compiler - but assembly and</font>

116
00:06:23,159 --> 00:06:34,560
execute<font color="#E5E5E5"> it in a small lightweight</font><font color="#CCCCCC"> stack</font>

117
00:06:27,449 --> 00:06:37,860
machine so the built so for<font color="#E5E5E5"> C++ and rust</font>

118
00:06:34,560 --> 00:06:39,990
web assembly is a<font color="#E5E5E5"> build target so we've</font>

119
00:06:37,860 --> 00:06:42,750
got the binary form a format webassembly

120
00:06:39,990 --> 00:06:43,500
the text representation<font color="#E5E5E5"> as expressions</font>

121
00:06:42,750 --> 00:06:48,389
<font color="#E5E5E5">are called</font>

122
00:06:43,500 --> 00:06:53,480
<font color="#CCCCCC">AST it what assembly supports only a few</font>

123
00:06:48,389 --> 00:07:00,350
scalar type<font color="#CCCCCC"> Skye scalar</font><font color="#E5E5E5"> types game so</font>

124
00:06:53,480 --> 00:07:03,350
integer<font color="#CCCCCC"> 3264 floating 32 and floating 64</font>

125
00:07:00,350 --> 00:07:06,930
<font color="#CCCCCC">and there</font><font color="#E5E5E5"> was no support so there</font><font color="#CCCCCC"> was no</font>

126
00:07:03,350 --> 00:07:09,360
<font color="#E5E5E5">native support of unsigned integers so</font>

127
00:07:06,930 --> 00:07:17,000
everything is<font color="#E5E5E5"> mapped onto these</font><font color="#CCCCCC"> onto</font>

128
00:07:09,360 --> 00:07:20,570
these types<font color="#E5E5E5"> the assembly</font><font color="#CCCCCC"> stack machine</font>

129
00:07:17,000 --> 00:07:23,430
<font color="#E5E5E5">supports less than or has fewer than</font><font color="#CCCCCC"> 256</font>

130
00:07:20,570 --> 00:07:27,630
<font color="#E5E5E5">operations or instructions so it's very</font>

131
00:07:23,430 --> 00:07:30,139
compact<font color="#E5E5E5"> and these operations can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> met</font>

132
00:07:27,630 --> 00:07:35,010
or<font color="#E5E5E5"> could be mapped easily onto</font>

133
00:07:30,139 --> 00:07:38,220
<font color="#CCCCCC">up-to-date architecture CPU architecture</font>

134
00:07:35,010 --> 00:07:42,840
<font color="#E5E5E5">so it's sandboxed it's using linear</font>

135
00:07:38,220 --> 00:07:45,570
memory<font color="#E5E5E5"> so it hasn't direct access</font><font color="#CCCCCC"> to the</font>

136
00:07:42,840 --> 00:07:49,349
global<font color="#CCCCCC"> memory of your application it's</font>

137
00:07:45,570 --> 00:07:52,290
using tables and all<font color="#E5E5E5"> their memory access</font>

138
00:07:49,350 --> 00:07:55,010
every memory<font color="#E5E5E5"> accesses a bound</font><font color="#CCCCCC"> check</font><font color="#E5E5E5"> if</font>

139
00:07:52,290 --> 00:07:59,850
we stay<font color="#E5E5E5"> in the linear memory and so on</font>

140
00:07:55,010 --> 00:08:07,320
<font color="#E5E5E5">so pointers are just indices into</font><font color="#CCCCCC"> the</font>

141
00:07:59,850 --> 00:08:10,190
linear<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> and so when we well when</font>

142
00:08:07,320 --> 00:08:13,140
we do a just-in-time compilation the

143
00:08:10,190 --> 00:08:17,660
<font color="#E5E5E5">there are it's possible to get a one</font>

144
00:08:13,140 --> 00:08:17,659
<font color="#E5E5E5">point five factor of native code speed</font>

145
00:08:17,810 --> 00:08:24,690
so how<font color="#E5E5E5"> would it look like</font><font color="#CCCCCC"> so we saw we</font>

146
00:08:23,039 --> 00:08:29,539
have we have seen the picture<font color="#CCCCCC"> before</font>

147
00:08:24,690 --> 00:08:33,150
with<font color="#E5E5E5"> a</font><font color="#CCCCCC"> javascript and and assembly</font>

148
00:08:29,539 --> 00:08:35,640
execution engine so with rust would look

149
00:08:33,150 --> 00:08:39,030
like like like this<font color="#E5E5E5"> one we've</font><font color="#CCCCCC"> got</font><font color="#E5E5E5"> the</font>

150
00:08:35,640 --> 00:08:44,370
controller setting up or allocating some

151
00:08:39,030 --> 00:08:47,459
memory<font color="#E5E5E5"> which will be assigned to the web</font>

152
00:08:44,370 --> 00:08:50,850
assembly instance we've<font color="#E5E5E5"> got a web simply</font>

153
00:08:47,459 --> 00:08:52,439
file which will be loaded into into the

154
00:08:50,850 --> 00:08:54,900
context<font color="#E5E5E5"> of the rest application</font>

155
00:08:52,440 --> 00:09:00,560
executable<font color="#CCCCCC"> and which</font><font color="#E5E5E5"> represents in</font>

156
00:08:54,900 --> 00:09:03,750
module we have got a<font color="#E5E5E5"> table where we can</font>

157
00:09:00,560 --> 00:09:06,959
register callbacks

158
00:09:03,750 --> 00:09:10,800
which could be which these callbacks<font color="#E5E5E5"> are</font>

159
00:09:06,960 --> 00:09:13,830
<font color="#E5E5E5">there the functions the module has got</font>

160
00:09:10,800 --> 00:09:16,319
<font color="#E5E5E5">depends on the has</font><font color="#CCCCCC"> gotta import so</font>

161
00:09:13,830 --> 00:09:21,029
<font color="#E5E5E5">anytime we've got an external</font><font color="#CCCCCC"> function</font>

162
00:09:16,320 --> 00:09:25,890
here and loaded<font color="#CCCCCC"> as a module</font><font color="#E5E5E5"> we have got</font>

163
00:09:21,029 --> 00:09:28,260
provide a table<font color="#CCCCCC"> which will provide the</font>

164
00:09:25,890 --> 00:09:31,589
functionality of<font color="#CCCCCC"> a function to step to</font>

165
00:09:28,260 --> 00:09:35,700
call in indirect call to call this rust

166
00:09:31,589 --> 00:09:39,300
implementation<font color="#CCCCCC"> we've got a stack machine</font>

167
00:09:35,700 --> 00:09:43,520
<font color="#E5E5E5">and so this is the</font><font color="#CCCCCC"> Box web assemblies</font>

168
00:09:39,300 --> 00:09:48,479
running in and so it's quite secure

169
00:09:43,520 --> 00:09:53,040
<font color="#E5E5E5">execution environment so how does</font><font color="#CCCCCC"> it</font>

170
00:09:48,480 --> 00:09:56,370
<font color="#E5E5E5">look like so I tried</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> as I said</font><font color="#CCCCCC"> we</font>

171
00:09:53,040 --> 00:10:01,920
<font color="#E5E5E5">can use rust or C++ to create web</font>

172
00:09:56,370 --> 00:10:07,860
assembly code binary code and so for

173
00:10:01,920 --> 00:10:12,270
<font color="#E5E5E5">example if we use rust</font><font color="#CCCCCC"> few thrusts we</font>

174
00:10:07,860 --> 00:10:14,400
<font color="#E5E5E5">declare a function and</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> declare some</font>

175
00:10:12,270 --> 00:10:18,000
parameters in<font color="#CCCCCC"> a return point</font><font color="#E5E5E5"> a return</font>

176
00:10:14,400 --> 00:10:21,449
value<font color="#CCCCCC"> as you can see here this is an</font>

177
00:10:18,000 --> 00:10:23,820
integer 32<font color="#CCCCCC"> and in</font><font color="#E5E5E5"> fact this one would be</font>

178
00:10:21,450 --> 00:10:27,600
<font color="#E5E5E5">a pointer into the into linear memory</font>

179
00:10:23,820 --> 00:10:33,060
<font color="#E5E5E5">and this would be mapped onto an index</font>

180
00:10:27,600 --> 00:10:33,660
of type integer 32 as well and I can

181
00:10:33,060 --> 00:10:38,189
show you<font color="#CCCCCC"> later</font>

182
00:10:33,660 --> 00:10:41,279
and so we would<font color="#E5E5E5"> do there I would iterate</font>

183
00:10:38,190 --> 00:10:46,950
over over the memory<font color="#E5E5E5"> over this buffer</font>

184
00:10:41,279 --> 00:10:50,279
and check for<font color="#E5E5E5"> all characters eat</font><font color="#CCCCCC"> I and</font>

185
00:10:46,950 --> 00:10:55,339
replace it<font color="#E5E5E5"> by</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> so compiling this was</font>

186
00:10:50,279 --> 00:11:02,810
cargo<font color="#E5E5E5"> nightly</font><font color="#CCCCCC"> I get a file transform</font>

187
00:10:55,339 --> 00:11:02,810
wasn't of size 50 50<font color="#E5E5E5"> 57k kilobytes</font><font color="#CCCCCC"> and</font>

188
00:11:03,140 --> 00:11:10,680
<font color="#E5E5E5">which is quite big so rust compiled into</font>

189
00:11:07,589 --> 00:11:13,589
a lot<font color="#E5E5E5"> of additional meta information for</font>

190
00:11:10,680 --> 00:11:16,890
the panic<font color="#E5E5E5"> panicking so in case there is</font>

191
00:11:13,589 --> 00:11:19,800
<font color="#CCCCCC">an Fault</font><font color="#E5E5E5"> in the implicit</font>

192
00:11:16,890 --> 00:11:22,560
there's also all the the integers and

193
00:11:19,800 --> 00:11:27,359
error messages<font color="#E5E5E5"> inside that are written</font>

194
00:11:22,560 --> 00:11:29,130
to<font color="#E5E5E5"> the console and so far I didn't</font>

195
00:11:27,360 --> 00:11:32,250
manage<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get this to optimize it and</font>

196
00:11:29,130 --> 00:11:35,040
get rid of these strings<font color="#CCCCCC"> so name</font>

197
00:11:32,250 --> 00:11:37,590
mangling<font color="#CCCCCC"> so the within</font><font color="#E5E5E5"> the module the</font>

198
00:11:35,040 --> 00:11:39,689
operation would<font color="#CCCCCC"> be called transform</font><font color="#E5E5E5"> that</font>

199
00:11:37,590 --> 00:11:41,910
would be the<font color="#E5E5E5"> method name that's</font>

200
00:11:39,690 --> 00:11:45,660
important because<font color="#CCCCCC"> if we</font><font color="#E5E5E5"> look at the C++</font>

201
00:11:41,910 --> 00:11:48,569
implementation<font color="#CCCCCC"> similar return type</font>

202
00:11:45,660 --> 00:11:52,079
integer integer first parameter<font color="#CCCCCC"> we've</font>

203
00:11:48,570 --> 00:11:58,050
got a pointer<font color="#CCCCCC"> to an array the same logic</font>

204
00:11:52,080 --> 00:12:05,370
and so this will<font color="#E5E5E5"> be compiled with</font><font color="#CCCCCC"> a with</font>

205
00:11:58,050 --> 00:12:10,229
a what<font color="#E5E5E5"> M script right and the result is</font>

206
00:12:05,370 --> 00:12:13,410
<font color="#CCCCCC">just now</font><font color="#E5E5E5"> is 296 bytes because</font><font color="#CCCCCC"> it doesn't</font>

207
00:12:10,230 --> 00:12:16,470
contain<font color="#E5E5E5"> all the error strings rust is</font>

208
00:12:13,410 --> 00:12:22,079
compelling<font color="#CCCCCC"> the drawback is that the</font>

209
00:12:16,470 --> 00:12:24,300
compiler is doing<font color="#E5E5E5"> name mangling</font><font color="#CCCCCC"> and the</font>

210
00:12:22,080 --> 00:12:27,210
name<font color="#E5E5E5"> within the module would be</font>

211
00:12:24,300 --> 00:12:29,640
underlined<font color="#CCCCCC"> transform</font><font color="#E5E5E5"> but that's just so</font>

212
00:12:27,210 --> 00:12:31,440
and I didn't manage<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get this way so I</font>

213
00:12:29,640 --> 00:12:36,090
didn't manage<font color="#CCCCCC"> to get the underline</font><font color="#E5E5E5"> way</font>

214
00:12:31,440 --> 00:12:39,030
so if anybody has<font color="#CCCCCC"> got a clue the binary</font>

215
00:12:36,090 --> 00:12:42,330
code looks like this<font color="#E5E5E5"> this are the 296</font>

216
00:12:39,030 --> 00:12:44,459
bytes<font color="#E5E5E5"> and they're textual form would</font>

217
00:12:42,330 --> 00:12:48,630
look<font color="#CCCCCC"> like this and here you can see</font>

218
00:12:44,460 --> 00:12:50,400
their<font color="#CCCCCC"> parent first parameters this is</font>

219
00:12:48,630 --> 00:12:52,470
<font color="#CCCCCC">the first parameter and this is the</font>

220
00:12:50,400 --> 00:12:54,630
second<font color="#CCCCCC"> parameter pointing to the</font>

221
00:12:52,470 --> 00:12:59,310
location of<font color="#E5E5E5"> the array within the linear</font>

222
00:12:54,630 --> 00:13:01,200
<font color="#E5E5E5">memory and calling it we would</font><font color="#CCCCCC"> just we</font>

223
00:12:59,310 --> 00:13:07,560
would just we would create<font color="#E5E5E5"> a linear</font>

224
00:13:01,200 --> 00:13:09,630
memory<font color="#CCCCCC"> place our our message byte</font>

225
00:13:07,560 --> 00:13:13,619
message into<font color="#CCCCCC"> the linear memory at index</font>

226
00:13:09,630 --> 00:13:18,300
1 0 and then calling this function<font color="#E5E5E5"> with</font>

227
00:13:13,620 --> 00:13:21,750
the length of the array and<font color="#CCCCCC"> 0 index</font><font color="#E5E5E5"> 0</font>

228
00:13:18,300 --> 00:13:25,680
and this way we would tell the<font color="#E5E5E5"> web</font>

229
00:13:21,750 --> 00:13:28,550
<font color="#E5E5E5">assembly</font><font color="#CCCCCC"> where in the linear memory</font><font color="#E5E5E5"> the</font>

230
00:13:25,680 --> 00:13:28,550
error is located

231
00:13:28,580 --> 00:13:36,560
so the credits<font color="#E5E5E5"> to this</font><font color="#CCCCCC"> are they well</font>

232
00:13:34,550 --> 00:13:39,319
based<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the implementation</font>

233
00:13:36,560 --> 00:13:41,089
prototype<font color="#E5E5E5"> I did</font><font color="#CCCCCC"> it's based on</font>

234
00:13:39,320 --> 00:13:45,019
webassembly<font color="#E5E5E5"> interpreter done by</font><font color="#CCCCCC"> Nick</font>

235
00:13:41,089 --> 00:13:48,050
<font color="#CCCCCC">Worf</font><font color="#E5E5E5"> formerly at parity wasn't</font><font color="#CCCCCC"> github</font>

236
00:13:45,019 --> 00:13:50,390
<font color="#CCCCCC">and this one has</font><font color="#E5E5E5"> been renamed now to</font>

237
00:13:48,050 --> 00:13:53,240
bottom interpreter

238
00:13:50,390 --> 00:13:57,220
Alex Christian for Tokyo<font color="#CCCCCC"> IO and kaliesha</font>

239
00:13:53,240 --> 00:14:02,269
<font color="#E5E5E5">for me oh these are the three important</font>

240
00:13:57,220 --> 00:14:10,910
<font color="#E5E5E5">modules my prototypes based on just as a</font>

241
00:14:02,269 --> 00:14:14,839
proof of concept so I've got there the

242
00:14:10,910 --> 00:14:18,370
code here and as you<font color="#CCCCCC"> can see</font><font color="#E5E5E5"> here can</font>

243
00:14:14,839 --> 00:14:22,959
<font color="#E5E5E5">you read it this one is the the method</font><font color="#CCCCCC"> I</font>

244
00:14:18,370 --> 00:14:26,079
declare this is the<font color="#E5E5E5"> file I'm loading</font>

245
00:14:22,959 --> 00:14:35,949
<font color="#CCCCCC">then I declare environment</font><font color="#E5E5E5"> very</font>

246
00:14:26,079 --> 00:14:40,010
environment object here and then I

247
00:14:35,950 --> 00:14:41,570
create the memory linear memory<font color="#E5E5E5"> this one</font>

248
00:14:40,010 --> 00:14:43,490
is the place where the buffer<font color="#E5E5E5"> the</font>

249
00:14:41,570 --> 00:14:49,190
message buffer is placed into the<font color="#CCCCCC"> linear</font>

250
00:14:43,490 --> 00:14:56,920
memory and then this execution is

251
00:14:49,190 --> 00:14:56,920
performed these are the parameters

252
00:14:59,710 --> 00:15:06,460
ah<font color="#E5E5E5"> and here is the invoke export that</font><font color="#CCCCCC"> I</font>

253
00:15:04,390 --> 00:15:09,399
invoke an<font color="#E5E5E5"> exported operation of the</font>

254
00:15:06,460 --> 00:15:16,470
module<font color="#E5E5E5"> and I get a return value and then</font>

255
00:15:09,399 --> 00:15:20,620
I've got to evaluate<font color="#E5E5E5"> the return value so</font>

256
00:15:16,470 --> 00:15:26,680
<font color="#CCCCCC">ten minutes left okay I've got a small</font>

257
00:15:20,620 --> 00:15:31,360
<font color="#E5E5E5">showcase so I'm starting I'm starting</font>

258
00:15:26,680 --> 00:15:34,180
the application so<font color="#E5E5E5"> it's listening at the</font>

259
00:15:31,360 --> 00:15:42,220
<font color="#CCCCCC">UDP based application listening</font><font color="#E5E5E5"> for you</font>

260
00:15:34,180 --> 00:15:49,060
to pee packets so I've got this<font color="#CCCCCC"> a client</font>

261
00:15:42,220 --> 00:15:51,310
and<font color="#E5E5E5"> and if I send a hello e it responds</font>

262
00:15:49,060 --> 00:15:54,310
so it receives the message<font color="#CCCCCC"> it's</font>

263
00:15:51,310 --> 00:15:56,800
processed by web<font color="#E5E5E5"> assembly</font><font color="#CCCCCC"> replacing all</font>

264
00:15:54,310 --> 00:16:03,369
the<font color="#CCCCCC"> I's</font><font color="#E5E5E5"> bios and sending</font><font color="#CCCCCC"> back the</font>

265
00:15:56,800 --> 00:16:06,300
<font color="#E5E5E5">message just to demonstrate so so it</font>

266
00:16:03,370 --> 00:16:12,339
works even with longer strings and

267
00:16:06,300 --> 00:16:18,370
that's it<font color="#E5E5E5"> so what I can do now is</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> can</font>

268
00:16:12,339 --> 00:16:20,700
change so all<font color="#E5E5E5"> I shall be replaced by</font>

269
00:16:18,370 --> 00:16:20,700
<font color="#E5E5E5">wise</font>

270
00:16:23,610 --> 00:16:47,460
and I I reckon filed the bottom and now

271
00:16:38,550 --> 00:16:55,140
when I sent so I get a why<font color="#CCCCCC"> hey hooray it</font>

272
00:16:47,460 --> 00:16:57,390
works<font color="#E5E5E5"> so so I did not check for</font>

273
00:16:55,140 --> 00:16:59,189
<font color="#E5E5E5">performance</font><font color="#CCCCCC"> I did not so it's it's a</font>

274
00:16:57,390 --> 00:17:02,240
<font color="#CCCCCC">proof-of-concept</font><font color="#E5E5E5"> so every time every</font>

275
00:16:59,190 --> 00:17:05,670
message is loads the the bottom file<font color="#CCCCCC"> a</font>

276
00:17:02,240 --> 00:17:08,280
creating the rep assembly instance the

277
00:17:05,670 --> 00:17:10,020
module instance executing it<font color="#CCCCCC"> and then</font>

278
00:17:08,280 --> 00:17:15,980
throwing<font color="#E5E5E5"> it away</font><font color="#CCCCCC"> so don't ask</font><font color="#E5E5E5"> me about</font>

279
00:17:10,020 --> 00:17:18,810
<font color="#E5E5E5">performance so another aspect is it's</font>

280
00:17:15,980 --> 00:17:22,319
<font color="#E5E5E5">it's interpreted so the bottom</font><font color="#CCCCCC"> eye is</font>

281
00:17:18,810 --> 00:17:24,450
interpreting webassembly<font color="#E5E5E5"> so there is the</font>

282
00:17:22,319 --> 00:17:28,319
<font color="#CCCCCC">but it would be possible to to create</font>

283
00:17:24,450 --> 00:17:30,140
<font color="#E5E5E5">some kind of JIT compiler compiling the</font>

284
00:17:28,319 --> 00:17:33,270
module<font color="#E5E5E5"> directly to native code</font><font color="#CCCCCC"> and</font>

285
00:17:30,140 --> 00:17:35,270
probably there<font color="#E5E5E5"> would be much</font><font color="#CCCCCC"> faster now</font>

286
00:17:33,270 --> 00:17:38,850
but that would be<font color="#CCCCCC"> the</font><font color="#E5E5E5"> next step and</font>

287
00:17:35,270 --> 00:17:43,020
maybe I<font color="#E5E5E5"> could make use of existing</font>

288
00:17:38,850 --> 00:17:46,820
modules for for Mozilla Firefox<font color="#E5E5E5"> or other</font>

289
00:17:43,020 --> 00:17:51,030
web<font color="#CCCCCC"> browsers and just reusing</font><font color="#E5E5E5"> those</font>

290
00:17:46,820 --> 00:17:54,050
webassembly execution engines<font color="#E5E5E5"> okay</font>

291
00:17:51,030 --> 00:17:54,050
are there any questions

292
00:18:12,270 --> 00:18:21,220
<font color="#CCCCCC">this interpreter well the question is</font>

293
00:18:18,760 --> 00:18:24,730
the question<font color="#CCCCCC"> is how much code does it</font>

294
00:18:21,220 --> 00:18:31,750
require to<font color="#CCCCCC"> create a web assembly</font>

295
00:18:24,730 --> 00:18:36,160
interpreter I've<font color="#CCCCCC"> know I can't tell you</font>

296
00:18:31,750 --> 00:18:44,200
<font color="#CCCCCC">number of lines but it's a small project</font>

297
00:18:36,160 --> 00:18:47,970
at<font color="#CCCCCC"> github and so yeah I can't I can't</font>

298
00:18:44,200 --> 00:18:51,130
answer the<font color="#CCCCCC"> question</font><font color="#E5E5E5"> so sorry</font>

299
00:18:47,970 --> 00:18:55,960
it's more it's a small it's a small

300
00:18:51,130 --> 00:18:58,860
<font color="#E5E5E5">module and when I strip this application</font>

301
00:18:55,960 --> 00:18:58,860
which is not ideal

302
00:19:00,780 --> 00:19:03,780
strip

303
00:19:11,290 --> 00:19:26,490
so so<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is so it's</font><font color="#E5E5E5"> 800 K so the</font>

304
00:19:22,030 --> 00:19:31,000
application containing all<font color="#CCCCCC"> the Tokyo</font>

305
00:19:26,490 --> 00:19:35,130
logic<font color="#CCCCCC"> as in Cronus</font><font color="#E5E5E5"> IO and the and the</font>

306
00:19:31,000 --> 00:19:38,980
<font color="#CCCCCC">interpreter</font><font color="#E5E5E5"> wasn't interpreter is 800 K</font>

307
00:19:35,130 --> 00:19:41,890
statically linked against the<font color="#E5E5E5"> local</font>

308
00:19:38,980 --> 00:19:45,510
libraries<font color="#E5E5E5"> so that's not much and</font>

309
00:19:41,890 --> 00:19:45,510
probably<font color="#CCCCCC"> could be</font><font color="#E5E5E5"> even reduced</font>

310
00:19:46,920 --> 00:19:50,250
yes please

311
00:20:00,279 --> 00:20:07,510
yes you can the question is is<font color="#E5E5E5"> it</font>

312
00:20:03,470 --> 00:20:10,010
<font color="#CCCCCC">possible to declare two to two XS</font>

313
00:20:07,510 --> 00:20:13,429
<font color="#E5E5E5">functions in the rust environment from</font>

314
00:20:10,010 --> 00:20:21,889
<font color="#E5E5E5">the</font><font color="#CCCCCC"> web</font><font color="#E5E5E5"> assembly yes</font><font color="#CCCCCC"> there is a good</font>

315
00:20:13,429 --> 00:20:28,419
<font color="#CCCCCC">there is this one this is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> callback</font>

316
00:20:21,889 --> 00:20:33,649
<font color="#E5E5E5">table for or the table this table here</font>

317
00:20:28,419 --> 00:20:38,059
this contains so you<font color="#E5E5E5"> define in your</font><font color="#CCCCCC"> C++</font>

318
00:20:33,649 --> 00:20:41,360
code<font color="#E5E5E5"> or US code you define a</font><font color="#CCCCCC"> signature</font>

319
00:20:38,059 --> 00:20:42,918
of<font color="#CCCCCC"> a method and which is external</font><font color="#E5E5E5"> you</font>

320
00:20:41,360 --> 00:20:44,870
use<font color="#E5E5E5"> it in your code</font><font color="#CCCCCC"> you call it in your</font>

321
00:20:42,919 --> 00:20:47,809
<font color="#E5E5E5">code the compiler will realize how it's</font>

322
00:20:44,870 --> 00:20:50,809
an external external function and it

323
00:20:47,809 --> 00:20:53,168
will be declared<font color="#E5E5E5"> as external function</font>

324
00:20:50,809 --> 00:20:57,110
here which<font color="#E5E5E5"> needs to be</font><font color="#CCCCCC"> imported</font><font color="#E5E5E5"> and</font>

325
00:20:53,169 --> 00:20:59,960
these<font color="#E5E5E5"> functions are accessed using the</font>

326
00:20:57,110 --> 00:21:02,570
table so when you when you load there

327
00:20:59,960 --> 00:21:06,590
wasn't filed module and<font color="#CCCCCC"> resolved all the</font>

328
00:21:02,570 --> 00:21:11,299
<font color="#E5E5E5">dependencies</font><font color="#CCCCCC"> it will check</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font>

329
00:21:06,590 --> 00:21:13,100
<font color="#E5E5E5">existence</font><font color="#CCCCCC"> of specific functions and so</font>

330
00:21:11,299 --> 00:21:16,690
it will call the<font color="#CCCCCC"> function</font><font color="#E5E5E5"> which is</font>

331
00:21:13,100 --> 00:21:19,689
registered<font color="#CCCCCC"> here and call a call in here</font>

332
00:21:16,690 --> 00:21:19,690
yes

333
00:21:27,769 --> 00:21:42,289
I don't know<font color="#E5E5E5"> well it's a question</font><font color="#CCCCCC"> if if</font>

334
00:21:33,049 --> 00:21:45,440
we can stack up so I<font color="#CCCCCC"> would I I didn't I</font>

335
00:21:42,289 --> 00:21:49,369
didn't try this<font color="#E5E5E5"> but I don't see I don't</font>

336
00:21:45,440 --> 00:21:51,649
see<font color="#E5E5E5"> why this shouldn't</font><font color="#CCCCCC"> be possible</font><font color="#E5E5E5"> so it</font>

337
00:21:49,369 --> 00:21:53,029
might<font color="#E5E5E5"> be well I don't know how well I've</font>

338
00:21:51,649 --> 00:21:57,889
got to check the<font color="#CCCCCC"> the webassembly</font>

339
00:21:53,029 --> 00:22:00,679
interpreter<font color="#CCCCCC"> how this the the calling</font><font color="#E5E5E5"> the</font>

340
00:21:57,889 --> 00:22:02,840
<font color="#CCCCCC">exporter function</font><font color="#E5E5E5"> if there is an a</font>

341
00:22:00,679 --> 00:22:05,749
restriction that there should<font color="#E5E5E5"> be only</font>

342
00:22:02,840 --> 00:22:08,359
<font color="#CCCCCC">one call to an exported function at any</font>

343
00:22:05,749 --> 00:22:27,200
time I<font color="#E5E5E5"> don't know so good</font><font color="#CCCCCC"> question I</font>

344
00:22:08,359 --> 00:22:31,029
didn't I didn't check this that's so

345
00:22:27,200 --> 00:22:34,129
right now<font color="#CCCCCC"> strengths are problem because</font>

346
00:22:31,029 --> 00:22:36,349
strings<font color="#E5E5E5"> so if we talk</font><font color="#CCCCCC"> about web assembly</font>

347
00:22:34,129 --> 00:22:40,849
webassembly<font color="#CCCCCC"> is something which has been</font>

348
00:22:36,349 --> 00:22:43,129
<font color="#E5E5E5">established in a JavaScript world and so</font>

349
00:22:40,849 --> 00:22:46,428
<font color="#CCCCCC">javascript strings</font><font color="#E5E5E5"> look different</font><font color="#CCCCCC"> to</font>

350
00:22:43,129 --> 00:22:55,158
rust strings<font color="#E5E5E5"> but there is some there is</font>

351
00:22:46,429 --> 00:22:58,309
<font color="#E5E5E5">a there</font><font color="#CCCCCC"> are what</font><font color="#E5E5E5"> is it there are some</font>

352
00:22:55,159 --> 00:23:00,009
<font color="#CCCCCC">people are working</font><font color="#E5E5E5"> right to get some</font>

353
00:22:58,309 --> 00:23:03,200
kind of together<font color="#E5E5E5"> it's kind of standard</font>

354
00:23:00,009 --> 00:23:07,099
<font color="#E5E5E5">to access strings so the idea is to use</font>

355
00:23:03,200 --> 00:23:08,869
<font color="#E5E5E5">to register strings in here so if let's</font>

356
00:23:07,099 --> 00:23:10,729
assume<font color="#CCCCCC"> we've got a</font><font color="#E5E5E5"> function we want to</font>

357
00:23:08,869 --> 00:23:13,189
call the function<font color="#CCCCCC"> and hand over a string</font>

358
00:23:10,729 --> 00:23:15,859
so the string could be would<font color="#CCCCCC"> be</font>

359
00:23:13,190 --> 00:23:18,830
registered<font color="#CCCCCC"> here and the state machine or</font>

360
00:23:15,859 --> 00:23:21,408
<font color="#CCCCCC">the</font><font color="#E5E5E5"> module could verify what kind of</font>

361
00:23:18,830 --> 00:23:23,509
string is it and then performing the

362
00:23:21,409 --> 00:23:25,909
correct interpretation of the<font color="#E5E5E5"> string so</font>

363
00:23:23,509 --> 00:23:28,039
<font color="#CCCCCC">it could be</font><font color="#E5E5E5"> 0</font><font color="#CCCCCC"> terminated string it could</font>

364
00:23:25,909 --> 00:23:31,639
be a length<font color="#E5E5E5"> and coded string it could be</font>

365
00:23:28,039 --> 00:23:34,129
<font color="#E5E5E5">whatever string so so that that's the</font>

366
00:23:31,639 --> 00:23:34,550
problem<font color="#CCCCCC"> some people are</font><font color="#E5E5E5"> using the linear</font>

367
00:23:34,129 --> 00:23:36,740
memory

368
00:23:34,550 --> 00:23:39,409
more effect more<font color="#CCCCCC"> or less</font><font color="#E5E5E5"> they serialize</font>

369
00:23:36,740 --> 00:23:41,570
the data into the<font color="#CCCCCC"> serial into linear</font>

370
00:23:39,410 --> 00:23:44,300
memory<font color="#E5E5E5"> and then called the</font><font color="#CCCCCC"> stack machine</font>

371
00:23:41,570 --> 00:23:48,169
<font color="#E5E5E5">so right now</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> stack machine should be</font>

372
00:23:44,300 --> 00:23:52,250
<font color="#E5E5E5">so if you define a boundary between rust</font>

373
00:23:48,170 --> 00:23:54,470
<font color="#E5E5E5">and represent you should use the the</font>

374
00:23:52,250 --> 00:23:56,750
boundary where<font color="#E5E5E5"> you deal with binary data</font>

375
00:23:54,470 --> 00:23:59,600
<font color="#E5E5E5">for example if you</font><font color="#CCCCCC"> receive a message</font>

376
00:23:56,750 --> 00:24:04,490
from<font color="#E5E5E5"> the network and you</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> process</font>

377
00:23:59,600 --> 00:24:06,139
it that<font color="#E5E5E5"> would be easy to to put into</font><font color="#CCCCCC"> the</font>

378
00:24:04,490 --> 00:24:08,990
linear<font color="#E5E5E5"> memory and then process</font><font color="#CCCCCC"> it using</font>

379
00:24:06,140 --> 00:24:11,750
<font color="#E5E5E5">web assembly if you've got a</font><font color="#CCCCCC"> complex</font><font color="#E5E5E5"> Dom</font>

380
00:24:08,990 --> 00:24:16,000
tree internally<font color="#CCCCCC"> that's not a good idea</font>

381
00:24:11,750 --> 00:24:19,310
<font color="#CCCCCC">so but</font><font color="#E5E5E5"> people are working on this and</font>

382
00:24:16,000 --> 00:24:22,190
<font color="#E5E5E5">JavaScript</font><font color="#CCCCCC"> or the JavaScript</font><font color="#E5E5E5"> community</font>

383
00:24:19,310 --> 00:24:24,860
is working<font color="#CCCCCC"> on</font><font color="#E5E5E5"> this too so getting Dom</font>

384
00:24:22,190 --> 00:24:27,740
trees hand it over to the web assembly

385
00:24:24,860 --> 00:24:30,439
engine and we've got to check how we

386
00:24:27,740 --> 00:24:35,180
would be able<font color="#E5E5E5"> from rust to do the same</font>

387
00:24:30,440 --> 00:24:38,120
but<font color="#E5E5E5"> we always have got to</font><font color="#CCCCCC"> - first of</font><font color="#E5E5E5"> all</font>

388
00:24:35,180 --> 00:24:40,370
it's<font color="#CCCCCC"> a it's a</font><font color="#E5E5E5"> JavaScript standard</font><font color="#CCCCCC"> or web</font>

389
00:24:38,120 --> 00:24:42,620
<font color="#E5E5E5">standard it's not defined by the rest</font>

390
00:24:40,370 --> 00:24:45,199
community so we are we<font color="#E5E5E5"> we are always</font>

391
00:24:42,620 --> 00:24:48,020
<font color="#E5E5E5">second and we have got to</font><font color="#CCCCCC"> check out how</font>

392
00:24:45,200 --> 00:24:59,890
we could incorporate<font color="#E5E5E5"> or it may using the</font>

393
00:24:48,020 --> 00:24:59,889
<font color="#E5E5E5">technology yes</font><font color="#CCCCCC"> okay okay</font>

