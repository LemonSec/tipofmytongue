1
00:00:04,760 --> 00:00:11,129
<font color="#CCCCCC">hello</font><font color="#E5E5E5"> everybody</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> JB</font><font color="#CCCCCC"> Dee I work at</font>

2
00:00:08,610 --> 00:00:13,230
<font color="#CCCCCC">Google on our instrumentation team</font>

3
00:00:11,130 --> 00:00:16,139
my main focus on is actually

4
00:00:13,230 --> 00:00:17,910
instrumenting<font color="#CCCCCC"> go servers and</font><font color="#E5E5E5"> I was</font>

5
00:00:16,139 --> 00:00:21,710
previously<font color="#E5E5E5"> working on the go team</font>

6
00:00:17,910 --> 00:00:24,000
working mainly on<font color="#CCCCCC"> gos</font><font color="#E5E5E5"> diagnostic tools</font>

7
00:00:21,710 --> 00:00:27,180
today I will talk about<font color="#E5E5E5"> distributed</font>

8
00:00:24,000 --> 00:00:28,980
systems<font color="#E5E5E5"> observability at Google so how</font>

9
00:00:27,180 --> 00:00:32,729
many of<font color="#CCCCCC"> you have heard about observable</font>

10
00:00:28,980 --> 00:00:35,519
yeah I assume that<font color="#CCCCCC"> it's it's I I was</font>

11
00:00:32,729 --> 00:00:38,220
expecting more in<font color="#E5E5E5"> this audience since</font>

12
00:00:35,519 --> 00:00:39,809
there<font color="#E5E5E5"> are so many conflict definitions</font>

13
00:00:38,220 --> 00:00:42,300
of this term I<font color="#E5E5E5"> want to clarify</font><font color="#CCCCCC"> my</font>

14
00:00:39,809 --> 00:00:43,709
definition first what we call

15
00:00:42,300 --> 00:00:47,010
observability<font color="#CCCCCC"> is this holistic approach</font>

16
00:00:43,710 --> 00:00:48,770
<font color="#CCCCCC">to be</font><font color="#E5E5E5"> able to observe a system for</font>

17
00:00:47,010 --> 00:00:51,300
properties such<font color="#CCCCCC"> as reliability</font>

18
00:00:48,770 --> 00:00:55,079
<font color="#E5E5E5">performance</font><font color="#CCCCCC"> deployability</font>

19
00:00:51,300 --> 00:00:58,199
and so on<font color="#CCCCCC"> we look at multiple different</font>

20
00:00:55,079 --> 00:01:00,809
signals<font color="#E5E5E5"> in order to achieve</font><font color="#CCCCCC"> that metric</font>

21
00:00:58,200 --> 00:01:05,100
collection distributed traces profiles

22
00:01:00,809 --> 00:01:07,320
logs are few of those this<font color="#E5E5E5"> work is</font>

23
00:01:05,099 --> 00:01:09,240
mainly about<font color="#CCCCCC"> the motivation and</font><font color="#E5E5E5"> the core</font>

24
00:01:07,320 --> 00:01:12,000
<font color="#CCCCCC">concepts</font><font color="#E5E5E5"> we came up with in the recent</font>

25
00:01:09,240 --> 00:01:14,880
years to make<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> production systems more</font>

26
00:01:12,000 --> 00:01:18,509
observable so I<font color="#E5E5E5"> said signals</font>

27
00:01:14,880 --> 00:01:21,240
I'm not going<font color="#E5E5E5"> to favor one signal type</font>

28
00:01:18,509 --> 00:01:24,179
to another but rather<font color="#CCCCCC"> focus on</font><font color="#E5E5E5"> how we</font>

29
00:01:21,240 --> 00:01:27,208
collect signals<font color="#E5E5E5"> and why we collect</font><font color="#CCCCCC"> them</font>

30
00:01:24,179 --> 00:01:30,209
the way<font color="#CCCCCC"> we do and this talk is going</font><font color="#E5E5E5"> to</font>

31
00:01:27,209 --> 00:01:32,459
<font color="#CCCCCC">mention a lot about metrics traces and</font>

32
00:01:30,209 --> 00:01:36,119
profiles but don't<font color="#E5E5E5"> assume that these</font><font color="#CCCCCC"> are</font>

33
00:01:32,459 --> 00:01:39,509
<font color="#E5E5E5">the only signals we care about</font><font color="#CCCCCC"> so to</font>

34
00:01:36,119 --> 00:01:41,849
give you<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit of history</font><font color="#CCCCCC"> Google</font>

35
00:01:39,509 --> 00:01:44,099
is dominantly a distributed systems

36
00:01:41,849 --> 00:01:45,869
company<font color="#E5E5E5"> one of the most common</font>

37
00:01:44,099 --> 00:01:48,899
architectural patterns we use is

38
00:01:45,869 --> 00:01:50,789
<font color="#CCCCCC">microservices architecture we</font><font color="#E5E5E5"> have now</font>

39
00:01:48,899 --> 00:01:53,190
<font color="#CCCCCC">ten thousands</font><font color="#E5E5E5"> of different</font><font color="#CCCCCC"> micro</font>

40
00:01:50,789 --> 00:01:55,979
<font color="#CCCCCC">services contributed and maintained by</font>

41
00:01:53,190 --> 00:02:00,090
hundreds of<font color="#CCCCCC"> different teams</font><font color="#E5E5E5"> and being</font>

42
00:01:55,979 --> 00:02:03,539
able to<font color="#E5E5E5"> observe our system our system is</font>

43
00:02:00,090 --> 00:02:07,380
<font color="#CCCCCC">a fundamental reason why</font><font color="#E5E5E5"> Google is</font><font color="#CCCCCC"> in</font>

44
00:02:03,539 --> 00:02:09,989
<font color="#E5E5E5">reliable fast and user-friendly in order</font>

45
00:02:07,380 --> 00:02:12,060
<font color="#E5E5E5">to be able</font><font color="#CCCCCC"> to observe our systems we</font>

46
00:02:09,989 --> 00:02:14,040
care about<font color="#E5E5E5"> instrumenting our systems</font>

47
00:02:12,060 --> 00:02:16,170
obviously

48
00:02:14,040 --> 00:02:18,689
we invented some collection

49
00:02:16,170 --> 00:02:20,578
methodologies and export formats as well

50
00:02:18,689 --> 00:02:23,400
<font color="#CCCCCC">as you know</font><font color="#E5E5E5"> entire new philosophies in</font>

51
00:02:20,579 --> 00:02:25,650
this area<font color="#E5E5E5"> our instrumentation stack</font>

52
00:02:23,400 --> 00:02:29,010
<font color="#E5E5E5">cares about efficiency</font><font color="#CCCCCC"> and the overall</font>

53
00:02:25,650 --> 00:02:30,959
overhead of the<font color="#E5E5E5"> collection</font><font color="#CCCCCC"> and I would</font>

54
00:02:29,010 --> 00:02:33,739
say that observability is<font color="#E5E5E5"> a part of our</font>

55
00:02:30,959 --> 00:02:37,760
<font color="#E5E5E5">engineering culture and we enable it by</font>

56
00:02:33,739 --> 00:02:41,400
<font color="#E5E5E5">making it easy and also</font><font color="#CCCCCC"> low overhead</font>

57
00:02:37,760 --> 00:02:43,140
<font color="#CCCCCC">before begin more into the distributed</font>

58
00:02:41,400 --> 00:02:47,519
systems observability<font color="#E5E5E5"> I want to briefly</font>

59
00:02:43,140 --> 00:02:49,890
explain you why it is<font color="#E5E5E5"> different then you</font>

60
00:02:47,519 --> 00:02:52,500
know observing monolithic systems

61
00:02:49,890 --> 00:02:54,089
this is a typical architectural diagram

62
00:02:52,500 --> 00:02:57,420
for pretty much every product<font color="#E5E5E5"> at Google</font>

63
00:02:54,090 --> 00:03:00,739
<font color="#CCCCCC">we usually have this user facing</font>

64
00:02:57,420 --> 00:03:04,488
business logic<font color="#E5E5E5"> heavy front-end server</font>

65
00:03:00,739 --> 00:03:06,810
<font color="#E5E5E5">that depends on other various services</font>

66
00:03:04,489 --> 00:03:09,900
authentication billing reporting are

67
00:03:06,810 --> 00:03:12,150
some of the examples<font color="#E5E5E5"> here in</font><font color="#CCCCCC"> this</font>

68
00:03:09,900 --> 00:03:14,970
example<font color="#E5E5E5"> all this relatively</font><font color="#CCCCCC"> low</font><font color="#E5E5E5"> level</font>

69
00:03:12,150 --> 00:03:17,819
services<font color="#E5E5E5"> depend depends on spanner our</font>

70
00:03:14,970 --> 00:03:20,879
database and eventually<font color="#CCCCCC"> hitting the blob</font>

71
00:03:17,819 --> 00:03:22,918
storage service<font color="#E5E5E5"> to persistence</font><font color="#CCCCCC"> at any</font>

72
00:03:20,879 --> 00:03:25,379
micro services architecture<font color="#CCCCCC"> it's very</font>

73
00:03:22,919 --> 00:03:28,139
expected that some of the<font color="#E5E5E5"> services are</font>

74
00:03:25,379 --> 00:03:29,489
<font color="#E5E5E5">becoming such a common dependency so</font>

75
00:03:28,139 --> 00:03:31,560
when the rest of<font color="#E5E5E5"> the company is you know</font>

76
00:03:29,489 --> 00:03:32,940
depending on blob storage<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> either</font>

77
00:03:31,560 --> 00:03:36,260
<font color="#CCCCCC">for</font><font color="#E5E5E5"> this team to gather meaningful</font>

78
00:03:32,940 --> 00:03:38,579
metrics<font color="#E5E5E5"> you know traces profiles etc</font>

79
00:03:36,260 --> 00:03:40,560
it's hard for them<font color="#E5E5E5"> to tell the root</font>

80
00:03:38,579 --> 00:03:43,739
cause of the problems<font color="#E5E5E5"> triggered by their</font>

81
00:03:40,560 --> 00:03:45,690
users<font color="#E5E5E5"> blob storage team</font><font color="#CCCCCC"> will see some</font>

82
00:03:43,739 --> 00:03:48,660
<font color="#CCCCCC">fluctuations between</font><font color="#E5E5E5"> their dashboards</font>

83
00:03:45,690 --> 00:03:50,730
but<font color="#E5E5E5"> will have a very hard</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> breaking</font>

84
00:03:48,660 --> 00:03:52,650
<font color="#CCCCCC">to that breaking down</font><font color="#E5E5E5"> the data and</font>

85
00:03:50,730 --> 00:03:57,060
<font color="#E5E5E5">figuring out where the problem is</font>

86
00:03:52,650 --> 00:03:59,099
<font color="#E5E5E5">actually originated</font><font color="#CCCCCC"> at it's also not</font>

87
00:03:57,060 --> 00:04:01,829
<font color="#CCCCCC">only when things are obviously</font><font color="#E5E5E5"> going</font>

88
00:03:59,099 --> 00:04:03,810
wrong<font color="#E5E5E5"> infrastructure teams always wants</font>

89
00:04:01,829 --> 00:04:06,560
<font color="#CCCCCC">to</font><font color="#E5E5E5"> have some</font><font color="#CCCCCC"> answers to be able to</font><font color="#E5E5E5"> just</font>

90
00:04:03,810 --> 00:04:09,329
say that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know things are</font><font color="#E5E5E5"> going right</font>

91
00:04:06,560 --> 00:04:12,329
some of examples<font color="#E5E5E5"> of the questions they</font>

92
00:04:09,329 --> 00:04:15,599
need<font color="#E5E5E5"> answers for hey are we meeting</font><font color="#CCCCCC"> the</font>

93
00:04:12,329 --> 00:04:17,370
SLO for the spanner team right are<font color="#E5E5E5"> we</font>

94
00:04:15,599 --> 00:04:19,380
providing<font color="#E5E5E5"> them</font><font color="#CCCCCC"> the service we</font><font color="#E5E5E5"> promise to</font>

95
00:04:17,370 --> 00:04:21,540
<font color="#E5E5E5">serve as the blob storage you need to be</font>

96
00:04:19,380 --> 00:04:23,190
able<font color="#E5E5E5"> to tell</font>

97
00:04:21,540 --> 00:04:24,960
and we know what is our impact<font color="#E5E5E5"> of this</font>

98
00:04:23,190 --> 00:04:27,780
<font color="#E5E5E5">high-level service on the on this</font>

99
00:04:24,960 --> 00:04:29,549
<font color="#E5E5E5">low-level</font><font color="#CCCCCC"> blob storage service and what</font>

100
00:04:27,780 --> 00:04:32,849
happens if this<font color="#E5E5E5"> particular product</font>

101
00:04:29,550 --> 00:04:34,560
<font color="#CCCCCC">scales up ten</font><font color="#E5E5E5"> percent overnight</font><font color="#CCCCCC"> is the</font>

102
00:04:32,850 --> 00:04:38,220
blob storage deployments going to be

103
00:04:34,560 --> 00:04:40,800
able<font color="#E5E5E5"> to handle the new scale so this is</font>

104
00:04:38,220 --> 00:04:44,060
why we want<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> able to break</font><font color="#E5E5E5"> down our</font>

105
00:04:40,800 --> 00:04:47,310
<font color="#E5E5E5">signals in various different ways</font>

106
00:04:44,060 --> 00:04:51,180
because these different various ways

107
00:04:47,310 --> 00:04:55,260
<font color="#E5E5E5">dimensions</font><font color="#CCCCCC"> with dimensions you can query</font>

108
00:04:51,180 --> 00:04:56,850
<font color="#E5E5E5">the collected</font><font color="#CCCCCC"> data in ways that will</font>

109
00:04:55,260 --> 00:04:58,800
<font color="#CCCCCC">help you to you know answer some of</font><font color="#E5E5E5"> the</font>

110
00:04:56,850 --> 00:05:00,570
earlier questions<font color="#E5E5E5"> I</font><font color="#CCCCCC"> had</font>

111
00:04:58,800 --> 00:05:03,090
give me the blob storage request latency

112
00:05:00,570 --> 00:05:04,950
distribution for our<font color="#E5E5E5"> pcs ordinated that</font>

113
00:05:03,090 --> 00:05:07,140
<font color="#E5E5E5">you know Google Analytics front-end</font>

114
00:05:04,950 --> 00:05:09,360
server for example<font color="#E5E5E5"> or give me this</font>

115
00:05:07,140 --> 00:05:12,599
<font color="#E5E5E5">traces in reports contains the specific</font>

116
00:05:09,360 --> 00:05:15,630
RPC method<font color="#E5E5E5"> or give me the CPU profile</font>

117
00:05:12,600 --> 00:05:19,650
for this<font color="#E5E5E5"> library for</font><font color="#CCCCCC"> the our pcs just</font>

118
00:05:15,630 --> 00:05:21,210
generated at Google Analytics<font color="#E5E5E5"> so it's</font>

119
00:05:19,650 --> 00:05:23,719
great<font color="#CCCCCC"> that you know that</font><font color="#E5E5E5"> we can query</font>

120
00:05:21,210 --> 00:05:26,609
this data<font color="#E5E5E5"> but how do we really collect</font>

121
00:05:23,720 --> 00:05:30,450
signals in order<font color="#CCCCCC"> to be able to query</font>

122
00:05:26,610 --> 00:05:34,380
them this way and<font color="#E5E5E5"> break down</font><font color="#CCCCCC"> the answer</font>

123
00:05:30,450 --> 00:05:36,990
is we record the data with various key

124
00:05:34,380 --> 00:05:40,440
value pairs we call<font color="#E5E5E5"> these key value</font>

125
00:05:36,990 --> 00:05:42,330
pairs<font color="#E5E5E5"> tags and then the back end for</font>

126
00:05:40,440 --> 00:05:45,150
example<font color="#CCCCCC"> a metric collection back end</font>

127
00:05:42,330 --> 00:05:49,770
such as<font color="#E5E5E5"> primitives can</font><font color="#CCCCCC"> filter data</font><font color="#E5E5E5"> by</font>

128
00:05:45,150 --> 00:05:52,200
tags so the entire promise of there's

129
00:05:49,770 --> 00:05:54,510
something very confusing<font color="#E5E5E5"> here the entire</font>

130
00:05:52,200 --> 00:05:56,789
promise of<font color="#CCCCCC"> microservices is that you</font>

131
00:05:54,510 --> 00:05:59,310
have no tight coupling between services

132
00:05:56,790 --> 00:06:01,530
<font color="#E5E5E5">how can</font><font color="#CCCCCC"> a love</font><font color="#E5E5E5"> level you know service</font>

133
00:05:59,310 --> 00:06:02,970
such as<font color="#CCCCCC"> the blob storage can</font><font color="#E5E5E5"> tag with</font>

134
00:06:01,530 --> 00:06:05,369
<font color="#CCCCCC">the right thing if they don't know</font>

135
00:06:02,970 --> 00:06:08,850
nothing about<font color="#E5E5E5"> this dependence and there</font>

136
00:06:05,370 --> 00:06:11,310
may be<font color="#E5E5E5"> you know business</font><font color="#CCCCCC"> cases this</font><font color="#E5E5E5"> is</font>

137
00:06:08,850 --> 00:06:14,250
where we get help from<font color="#E5E5E5"> context</font>

138
00:06:11,310 --> 00:06:16,500
propagation so the tags are actually

139
00:06:14,250 --> 00:06:19,440
<font color="#CCCCCC">proposed produce at</font><font color="#E5E5E5"> the high level</font>

140
00:06:16,500 --> 00:06:23,040
services and<font color="#E5E5E5"> pass</font><font color="#CCCCCC"> to the lower level</font>

141
00:06:19,440 --> 00:06:25,740
stack as a part of the RPC<font color="#E5E5E5"> you can see</font>

142
00:06:23,040 --> 00:06:28,330
that<font color="#E5E5E5"> from all the</font><font color="#CCCCCC"> way</font><font color="#E5E5E5"> up from</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> bottom</font>

143
00:06:25,740 --> 00:06:30,250
<font color="#E5E5E5">you can see</font><font color="#CCCCCC"> the our pieces</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> tagged</font>

144
00:06:28,330 --> 00:06:32,680
so the block<font color="#E5E5E5"> storage doesn't have to</font>

145
00:06:30,250 --> 00:06:36,639
know<font color="#E5E5E5"> anything but can record the signals</font>

146
00:06:32,680 --> 00:06:38,740
with<font color="#E5E5E5"> the incoming</font><font color="#CCCCCC"> tax we</font><font color="#E5E5E5"> have a culture</font>

147
00:06:36,639 --> 00:06:41,139
of<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> producing this tag</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> high</font>

148
00:06:38,740 --> 00:06:43,569
<font color="#E5E5E5">level services depending on the specific</font>

149
00:06:41,139 --> 00:06:46,060
requirements of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> t's and we you know</font>

150
00:06:43,569 --> 00:06:49,180
propagators tags all across the stack

151
00:06:46,060 --> 00:06:51,490
with as a part of our<font color="#CCCCCC"> pcs and each</font>

152
00:06:49,180 --> 00:06:54,190
component<font color="#CCCCCC"> in the system can record</font>

153
00:06:51,490 --> 00:06:57,550
metrics profiles<font color="#E5E5E5"> and so on with the</font>

154
00:06:54,190 --> 00:06:59,139
<font color="#E5E5E5">incoming tags as I mentioned in the</font>

155
00:06:57,550 --> 00:07:01,599
beginning we<font color="#E5E5E5"> see observable</font><font color="#CCCCCC"> t a very</font>

156
00:06:59,139 --> 00:07:03,219
<font color="#CCCCCC">holistic approach because each signal</font>

157
00:07:01,599 --> 00:07:05,949
type is useful to answer<font color="#E5E5E5"> different</font>

158
00:07:03,219 --> 00:07:07,719
questions for example distributed traces

159
00:07:05,949 --> 00:07:10,599
are not going to be able<font color="#E5E5E5"> to tell you</font>

160
00:07:07,719 --> 00:07:11,889
about the<font color="#CCCCCC"> CPU hot spots or</font><font color="#E5E5E5"> CPU samples</font>

161
00:07:10,599 --> 00:07:16,060
<font color="#E5E5E5">can not tell us about the overall</font>

162
00:07:11,889 --> 00:07:18,639
latency<font color="#CCCCCC"> in</font><font color="#E5E5E5"> to end so we collect various</font>

163
00:07:16,060 --> 00:07:20,710
signals and examine them from very

164
00:07:18,639 --> 00:07:24,699
different perspectives<font color="#CCCCCC"> and break down</font>

165
00:07:20,710 --> 00:07:26,650
with the tags it's impossible for

166
00:07:24,699 --> 00:07:28,659
<font color="#E5E5E5">developers to think about all these</font>

167
00:07:26,650 --> 00:07:30,099
dimensions and signal types<font color="#CCCCCC"> inbuilt</font>

168
00:07:28,659 --> 00:07:33,069
<font color="#CCCCCC">highly efficient instrumentation</font>

169
00:07:30,099 --> 00:07:36,340
libraries and you know instrument each

170
00:07:33,069 --> 00:07:39,279
layer they depend on that's why we built

171
00:07:36,340 --> 00:07:41,289
a common<font color="#CCCCCC"> framework</font><font color="#E5E5E5"> and decided</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> open</font>

172
00:07:39,279 --> 00:07:44,969
source<font color="#E5E5E5"> and make it vendor agnostic so</font>

173
00:07:41,289 --> 00:07:48,520
anybody<font color="#E5E5E5"> can use them with any provider</font>

174
00:07:44,969 --> 00:07:51,250
<font color="#E5E5E5">reasonably not</font><font color="#CCCCCC"> announced that we are our</font>

175
00:07:48,520 --> 00:07:55,000
project or consensus which is a holistic

176
00:07:51,250 --> 00:07:57,729
instrumentation framework it<font color="#E5E5E5"> is inspired</font>

177
00:07:55,000 --> 00:08:00,729
by Google's internal project called

178
00:07:57,729 --> 00:08:03,128
<font color="#E5E5E5">census the main reason we are open</font>

179
00:08:00,729 --> 00:08:05,800
source and this<font color="#E5E5E5"> is we want to feel that</font>

180
00:08:03,129 --> 00:08:07,629
missing you know building<font color="#E5E5E5"> gap in the</font>

181
00:08:05,800 --> 00:08:09,009
open source world we want libraries

182
00:08:07,629 --> 00:08:11,580
frameworks and<font color="#E5E5E5"> all sorts of</font>

183
00:08:09,009 --> 00:08:15,009
infrastructure projects<font color="#E5E5E5"> to be able to</font>

184
00:08:11,580 --> 00:08:17,889
<font color="#E5E5E5">instrument without having to reinvent</font>

185
00:08:15,009 --> 00:08:20,099
<font color="#E5E5E5">these concepts we also want to you know</font>

186
00:08:17,889 --> 00:08:23,979
<font color="#E5E5E5">help other organizations set up these</font>

187
00:08:20,099 --> 00:08:27,250
solutions<font color="#E5E5E5"> and if they are not they can</font>

188
00:08:23,979 --> 00:08:28,900
also use<font color="#CCCCCC"> a</font><font color="#E5E5E5"> consensus as a reference</font><font color="#CCCCCC"> so</font>

189
00:08:27,250 --> 00:08:30,210
both<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> provides a single</font><font color="#CCCCCC"> set of</font>

190
00:08:28,900 --> 00:08:34,020
<font color="#CCCCCC">libraries</font>

191
00:08:30,210 --> 00:08:36,539
we have tags<font color="#E5E5E5"> metrics traces and more is</font>

192
00:08:34,020 --> 00:08:38,939
coming<font color="#CCCCCC"> in the future we have language</font>

193
00:08:36,539 --> 00:08:42,718
<font color="#E5E5E5">support available today for go Java and</font>

194
00:08:38,940 --> 00:08:46,200
C++ Python PHP<font color="#E5E5E5"> JavaScript C sharp and or</font>

195
00:08:42,719 --> 00:08:47,820
<font color="#E5E5E5">Lang are coming next</font><font color="#CCCCCC"> the libraries</font><font color="#E5E5E5"> are</font>

196
00:08:46,200 --> 00:08:51,060
instrumentation libraries<font color="#E5E5E5"> our vendor</font>

197
00:08:47,820 --> 00:08:52,890
agnostic<font color="#CCCCCC"> so you can upload</font><font color="#E5E5E5"> data</font><font color="#CCCCCC"> training</font>

198
00:08:51,060 --> 00:08:56,219
<font color="#CCCCCC">back-end we currently have support for</font>

199
00:08:52,890 --> 00:09:00,660
<font color="#CCCCCC">primitive</font><font color="#E5E5E5"> Zipkin</font><font color="#CCCCCC"> Jaeger</font><font color="#E5E5E5"> and some APM</font>

200
00:08:56,220 --> 00:09:02,190
vendors<font color="#CCCCCC"> some more some other</font><font color="#E5E5E5"> API vendors</font>

201
00:09:00,660 --> 00:09:04,319
are also thinking<font color="#CCCCCC"> that</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> a useful</font>

202
00:09:02,190 --> 00:09:05,910
solution<font color="#E5E5E5"> to instrumentation rather than</font>

203
00:09:04,320 --> 00:09:08,820
inventing their own instrumentation

204
00:09:05,910 --> 00:09:12,089
libraries so they're<font color="#E5E5E5"> working to provide</font>

205
00:09:08,820 --> 00:09:13,860
open<font color="#CCCCCC"> census support we provide</font>

206
00:09:12,089 --> 00:09:17,420
out-of-the-box integration with some of

207
00:09:13,860 --> 00:09:23,360
the frameworks<font color="#CCCCCC"> such as</font><font color="#E5E5E5"> G RPC and</font><font color="#CCCCCC"> net</font>

208
00:09:17,420 --> 00:09:26,040
HTTP packages also<font color="#E5E5E5"> libraries provide</font>

209
00:09:23,360 --> 00:09:29,580
inspection and can render<font color="#E5E5E5"> a tiny</font>

210
00:09:26,040 --> 00:09:33,300
dashboard<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the process that you know</font>

211
00:09:29,580 --> 00:09:37,980
<font color="#E5E5E5">contains its summary of what is going on</font>

212
00:09:33,300 --> 00:09:40,709
in the<font color="#CCCCCC"> process without</font><font color="#E5E5E5"> you know</font><font color="#CCCCCC"> having</font>

213
00:09:37,980 --> 00:09:42,990
to<font color="#E5E5E5"> rely on an external service you can</font>

214
00:09:40,709 --> 00:09:45,719
see what is going<font color="#CCCCCC"> on</font><font color="#E5E5E5"> in the scope of a</font>

215
00:09:42,990 --> 00:09:48,900
server and<font color="#E5E5E5"> it's a very useful thing when</font>

216
00:09:45,720 --> 00:09:51,810
you know<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the problem is</font><font color="#E5E5E5"> at a</font>

217
00:09:48,900 --> 00:09:53,490
<font color="#CCCCCC">specific process</font><font color="#E5E5E5"> or you know you can use</font>

218
00:09:51,810 --> 00:09:56,699
it<font color="#CCCCCC"> during</font><font color="#E5E5E5"> the development time to see</font>

219
00:09:53,490 --> 00:09:58,800
what is<font color="#CCCCCC"> going on so speaking of</font>

220
00:09:56,700 --> 00:10:03,110
framework integrations<font color="#E5E5E5"> I just want to</font>

221
00:09:58,800 --> 00:10:06,000
show briefly<font color="#E5E5E5"> what it looks for</font><font color="#CCCCCC"> GRP see</font>

222
00:10:03,110 --> 00:10:08,640
it<font color="#CCCCCC"> Google we're also</font><font color="#E5E5E5"> responsible for all</font>

223
00:10:06,000 --> 00:10:10,110
the<font color="#CCCCCC"> gr pieces</font><font color="#E5E5E5"> stubby observability and</font>

224
00:10:08,640 --> 00:10:13,290
these integrations are what we<font color="#CCCCCC"> are</font>

225
00:10:10,110 --> 00:10:15,420
planning<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> internally</font><font color="#E5E5E5"> at Google</font><font color="#CCCCCC"> so</font>

226
00:10:13,290 --> 00:10:17,969
now we need<font color="#E5E5E5"> to import this</font><font color="#CCCCCC"> plugin and</font>

227
00:10:15,420 --> 00:10:20,459
pass it as a<font color="#E5E5E5"> stat similar to the GRP see</font>

228
00:10:17,970 --> 00:10:24,089
clients<font color="#CCCCCC"> and the server's in this case</font>

229
00:10:20,459 --> 00:10:28,290
we're looking<font color="#E5E5E5"> at the G RPC server</font><font color="#CCCCCC"> you</font>

230
00:10:24,089 --> 00:10:30,779
can see the new<font color="#E5E5E5"> server stat Sandler in</font>

231
00:10:28,290 --> 00:10:32,939
the end or you<font color="#E5E5E5"> can is</font><font color="#CCCCCC"> extended tags in</font>

232
00:10:30,779 --> 00:10:34,910
you know incoming tags from the<font color="#E5E5E5"> current</font>

233
00:10:32,940 --> 00:10:38,600
context in this case

234
00:10:34,910 --> 00:10:42,079
certain hello<font color="#CCCCCC"> is originators</font><font color="#E5E5E5"> server and</font>

235
00:10:38,600 --> 00:10:43,850
inserting the user idea as well then you

236
00:10:42,080 --> 00:10:46,520
know it will<font color="#CCCCCC"> be</font><font color="#E5E5E5"> impossible</font><font color="#CCCCCC"> for the</font>

237
00:10:43,850 --> 00:10:51,040
backends<font color="#E5E5E5"> to break down the collected</font>

238
00:10:46,520 --> 00:10:54,350
data with<font color="#E5E5E5"> originator service and user ID</font>

239
00:10:51,040 --> 00:10:56,839
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> how to record values I have</font><font color="#CCCCCC"> a</font>

240
00:10:54,350 --> 00:10:59,510
measure total hello<font color="#CCCCCC"> that represents</font><font color="#E5E5E5"> the</font>

241
00:10:56,840 --> 00:11:01,790
<font color="#E5E5E5">number of</font><font color="#CCCCCC"> times we said hello stats</font>

242
00:10:59,510 --> 00:11:04,550
record will say<font color="#E5E5E5"> one with the tags</font><font color="#CCCCCC"> and</font>

243
00:11:01,790 --> 00:11:06,680
<font color="#E5E5E5">the current income into context so you</font>

244
00:11:04,550 --> 00:11:09,410
<font color="#CCCCCC">will be able</font><font color="#E5E5E5"> to tell the number of</font>

245
00:11:06,680 --> 00:11:12,380
hellos<font color="#E5E5E5"> for the request originated that</font>

246
00:11:09,410 --> 00:11:15,650
you know<font color="#E5E5E5"> whatever service or by a</font>

247
00:11:12,380 --> 00:11:17,180
<font color="#CCCCCC">specific user then</font><font color="#E5E5E5"> you know this is how</font>

248
00:11:15,650 --> 00:11:19,730
it looks like in<font color="#E5E5E5"> your dashboard so you</font>

249
00:11:17,180 --> 00:11:23,239
<font color="#E5E5E5">can break down</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> data by dimensions or</font>

250
00:11:19,730 --> 00:11:25,310
in this case a big blue one is<font color="#CCCCCC"> the total</font>

251
00:11:23,240 --> 00:11:28,340
<font color="#CCCCCC">number of hellos from the</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> pcs</font>

252
00:11:25,310 --> 00:11:30,109
originated at<font color="#CCCCCC"> the out service</font><font color="#E5E5E5"> the purple</font>

253
00:11:28,340 --> 00:11:32,420
<font color="#E5E5E5">one is</font><font color="#CCCCCC"> though you</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> ones coming</font><font color="#E5E5E5"> from</font>

254
00:11:30,110 --> 00:11:35,560
the<font color="#E5E5E5"> billing and you know the other</font><font color="#CCCCCC"> two</font>

255
00:11:32,420 --> 00:11:38,360
colors<font color="#E5E5E5"> are representing other services</font>

256
00:11:35,560 --> 00:11:42,050
so the<font color="#E5E5E5"> GRP supply can also automatically</font>

257
00:11:38,360 --> 00:11:45,440
creates traces for<font color="#E5E5E5"> the incoming and</font>

258
00:11:42,050 --> 00:11:49,449
<font color="#E5E5E5">outgoing our pcs but you can also add</font>

259
00:11:45,440 --> 00:11:52,220
custom spans by using<font color="#E5E5E5"> our trace packages</font>

260
00:11:49,450 --> 00:11:54,080
<font color="#CCCCCC">here we are creating a custom child and</font>

261
00:11:52,220 --> 00:11:58,520
finishing it<font color="#CCCCCC"> you can create as much as</font>

262
00:11:54,080 --> 00:12:00,650
you know you want<font color="#E5E5E5"> and annotate them just</font>

263
00:11:58,520 --> 00:12:03,980
you know propagate the context and

264
00:12:00,650 --> 00:12:06,590
whoever<font color="#E5E5E5"> starting new spans</font><font color="#CCCCCC"> you know the</font>

265
00:12:03,980 --> 00:12:11,150
<font color="#E5E5E5">whoever the new spans will be basically</font>

266
00:12:06,590 --> 00:12:14,600
<font color="#E5E5E5">direct children of the current span in</font>

267
00:12:11,150 --> 00:12:17,390
<font color="#E5E5E5">the current context so here's an example</font>

268
00:12:14,600 --> 00:12:19,670
<font color="#E5E5E5">of the traces collected from an RPC</font><font color="#CCCCCC"> you</font>

269
00:12:17,390 --> 00:12:21,410
can see the internal RPC is made in

270
00:12:19,670 --> 00:12:25,610
order to<font color="#CCCCCC"> satisfy</font><font color="#E5E5E5"> Dora</font><font color="#CCCCCC"> Julian</font><font color="#E5E5E5"> come in</font>

271
00:12:21,410 --> 00:12:29,569
request and open<font color="#CCCCCC"> since also provides</font>

272
00:12:25,610 --> 00:12:32,180
people<font color="#CCCCCC"> of support</font><font color="#E5E5E5"> if you use tag do it</font>

273
00:12:29,570 --> 00:12:35,090
we collect actually see few samples with

274
00:12:32,180 --> 00:12:37,670
<font color="#E5E5E5">the tags inside the incoming context and</font>

275
00:12:35,090 --> 00:12:39,890
then you can see the hot spots in your

276
00:12:37,670 --> 00:12:43,010
<font color="#E5E5E5">code from very you know for specific</font>

277
00:12:39,890 --> 00:12:44,540
requests RPC names<font color="#E5E5E5"> and so on with</font><font color="#CCCCCC"> the</font>

278
00:12:43,010 --> 00:12:45,350
you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> the dimensions</font><font color="#CCCCCC"> you have defined</font>

279
00:12:44,540 --> 00:12:47,630
as tags

280
00:12:45,350 --> 00:12:49,900
this is a<font color="#CCCCCC"> JRPG server</font><font color="#E5E5E5"> I profile with</font>

281
00:12:47,630 --> 00:12:53,450
open<font color="#CCCCCC"> senses very looking at a typical</font>

282
00:12:49,900 --> 00:12:56,689
<font color="#CCCCCC">visualisation of</font><font color="#E5E5E5"> people</font><font color="#CCCCCC"> off data you can</font>

283
00:12:53,450 --> 00:12:59,090
see the runtime<font color="#E5E5E5"> context strings spend</font><font color="#CCCCCC"> 9</font>

284
00:12:56,690 --> 00:13:01,220
<font color="#CCCCCC">point 4 3 seconds for</font><font color="#E5E5E5"> our pieces coming</font>

285
00:12:59,090 --> 00:13:03,350
<font color="#E5E5E5">from the authentication</font><font color="#CCCCCC"> service and 3</font>

286
00:13:01,220 --> 00:13:07,310
point 20 seconds what our piece<font color="#CCCCCC"> is</font>

287
00:13:03,350 --> 00:13:09,200
coming<font color="#E5E5E5"> from the analytic service so let</font>

288
00:13:07,310 --> 00:13:12,219
me focus on some of<font color="#CCCCCC"> the core</font><font color="#E5E5E5"> principles</font>

289
00:13:09,200 --> 00:13:14,750
we<font color="#CCCCCC"> have one of our goals is to make</font>

290
00:13:12,220 --> 00:13:16,940
instrumentation<font color="#E5E5E5"> as much as possible</font>

291
00:13:14,750 --> 00:13:19,280
without<font color="#E5E5E5"> our engineers thinking too much</font>

292
00:13:16,940 --> 00:13:21,800
<font color="#CCCCCC">about</font><font color="#E5E5E5"> the cost</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is why we have a</font>

293
00:13:19,280 --> 00:13:24,140
separation<font color="#CCCCCC"> between</font><font color="#E5E5E5"> instrumentation and</font>

294
00:13:21,800 --> 00:13:26,120
collection instrumentation because

295
00:13:24,140 --> 00:13:27,980
instrumentation is cheap<font color="#CCCCCC"> if you don't</font>

296
00:13:26,120 --> 00:13:30,170
you know collect them like if you just

297
00:13:27,980 --> 00:13:32,270
<font color="#E5E5E5">drop the whatever is collected it's very</font>

298
00:13:30,170 --> 00:13:34,640
cheap<font color="#CCCCCC"> so rather than collecting</font><font color="#E5E5E5"> all the</font>

299
00:13:32,270 --> 00:13:37,010
metrics<font color="#E5E5E5"> we defer to</font><font color="#CCCCCC"> the end-user to</font><font color="#E5E5E5"> you</font>

300
00:13:34,640 --> 00:13:40,010
know enable the collection<font color="#CCCCCC"> the</font>

301
00:13:37,010 --> 00:13:42,290
instrumentation bits are you know he are

302
00:13:40,010 --> 00:13:45,110
left here and there and<font color="#E5E5E5"> almost zero</font>

303
00:13:42,290 --> 00:13:47,240
impact on<font color="#E5E5E5"> the critical</font><font color="#CCCCCC"> path and the end</font>

304
00:13:45,110 --> 00:13:49,160
user<font color="#E5E5E5"> the end developer usually decides</font>

305
00:13:47,240 --> 00:13:51,260
what to collect this allows you know

306
00:13:49,160 --> 00:13:52,689
libraries<font color="#E5E5E5"> and frameworks instrument</font>

307
00:13:51,260 --> 00:13:55,520
<font color="#CCCCCC">without worrying too much about the</font><font color="#E5E5E5"> cost</font>

308
00:13:52,690 --> 00:13:57,830
<font color="#E5E5E5">they provide some you know measures and</font>

309
00:13:55,520 --> 00:13:59,660
then users are enabling metric

310
00:13:57,830 --> 00:14:02,630
collection for<font color="#CCCCCC"> example on the on the</font>

311
00:13:59,660 --> 00:14:05,900
<font color="#CCCCCC">provided measures as I mentioned in the</font>

312
00:14:02,630 --> 00:14:08,270
<font color="#E5E5E5">flight</font><font color="#CCCCCC"> just right now the</font><font color="#E5E5E5"> the collection</font>

313
00:14:05,900 --> 00:14:10,670
requires explicit<font color="#E5E5E5"> enabling but this is</font>

314
00:14:08,270 --> 00:14:12,980
<font color="#CCCCCC">also true for disabling it this allows</font>

315
00:14:10,670 --> 00:14:15,469
<font color="#CCCCCC">us to dynamically enable or disable</font>

316
00:14:12,980 --> 00:14:18,470
collection in production for<font color="#CCCCCC"> example</font>

317
00:14:15,470 --> 00:14:20,930
imagine<font color="#CCCCCC"> a gzip library that has been</font>

318
00:14:18,470 --> 00:14:24,770
instrumented to measure the compressed

319
00:14:20,930 --> 00:14:26,150
<font color="#E5E5E5">chunks until you're suspicious about</font>

320
00:14:24,770 --> 00:14:29,449
this<font color="#CCCCCC"> library you don't have so</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font>

321
00:14:26,150 --> 00:14:32,030
collect any metrics<font color="#E5E5E5"> but if you do then</font>

322
00:14:29,450 --> 00:14:34,070
in the production<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can enable</font>

323
00:14:32,030 --> 00:14:36,380
collection and<font color="#E5E5E5"> start receiving metrics</font>

324
00:14:34,070 --> 00:14:38,360
so observin becomes very<font color="#CCCCCC"> easy when you</font>

325
00:14:36,380 --> 00:14:40,460
<font color="#CCCCCC">have a static</font><font color="#E5E5E5"> list of you know things to</font>

326
00:14:38,360 --> 00:14:42,050
<font color="#CCCCCC">observe but systems are</font><font color="#E5E5E5"> usually</font>

327
00:14:40,460 --> 00:14:44,540
surprising you that's why<font color="#CCCCCC"> the</font>

328
00:14:42,050 --> 00:14:46,579
<font color="#E5E5E5">encouraging model that you can</font>

329
00:14:44,540 --> 00:14:49,120
dynamically expand whatever you are

330
00:14:46,580 --> 00:14:49,120
collecting

331
00:14:49,300 --> 00:14:55,719
we sample expensive and large data

332
00:14:52,860 --> 00:14:58,510
<font color="#CCCCCC">everything</font><font color="#E5E5E5"> that is cheap to collect and</font>

333
00:14:55,720 --> 00:15:01,870
aggregate<font color="#E5E5E5"> interval is usually don't have</font>

334
00:14:58,510 --> 00:15:04,500
to be sampled examples of simple signals

335
00:15:01,870 --> 00:15:07,260
are traces because<font color="#E5E5E5"> they are very big and</font>

336
00:15:04,500 --> 00:15:10,630
profiles because<font color="#E5E5E5"> they are very expensive</font>

337
00:15:07,260 --> 00:15:12,930
<font color="#CCCCCC">on the other hand we aggregate data</font><font color="#E5E5E5"> in</font>

338
00:15:10,630 --> 00:15:16,149
efficient ways<font color="#CCCCCC"> to you know produce cheap</font>

339
00:15:12,930 --> 00:15:18,760
and small<font color="#E5E5E5"> data to avoid sampling and</font>

340
00:15:16,149 --> 00:15:20,769
this is for<font color="#CCCCCC"> exact</font><font color="#E5E5E5"> what we do for metric</font>

341
00:15:18,760 --> 00:15:27,189
collection for we never have to you know

342
00:15:20,769 --> 00:15:29,079
sample our metrics<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know it's great</font>

343
00:15:27,190 --> 00:15:31,300
you<font color="#E5E5E5"> don't have to sample</font><font color="#CCCCCC"> the metrics</font>

344
00:15:29,079 --> 00:15:37,510
because<font color="#E5E5E5"> this is how you see all the you</font>

345
00:15:31,300 --> 00:15:39,219
know 1999 percentile stats so I was

346
00:15:37,510 --> 00:15:41,260
repeating<font color="#CCCCCC"> that the data size could be a</font>

347
00:15:39,220 --> 00:15:44,200
reason<font color="#CCCCCC"> why we aggregate rate or sample</font>

348
00:15:41,260 --> 00:15:47,170
data one<font color="#E5E5E5"> of the obvious other reasons is</font>

349
00:15:44,200 --> 00:15:49,720
<font color="#CCCCCC">we want to</font><font color="#E5E5E5"> be able to limit the outbound</font>

350
00:15:47,170 --> 00:15:52,149
bandwidth that that is spent on data

351
00:15:49,720 --> 00:15:54,399
collection<font color="#E5E5E5"> for signals that are</font>

352
00:15:52,149 --> 00:15:56,290
relatable like metrics we try to

353
00:15:54,399 --> 00:16:00,310
<font color="#CCCCCC">aggregate them in process or near</font>

354
00:15:56,290 --> 00:16:01,870
process and to<font color="#E5E5E5"> reduce the bandwidth we</font>

355
00:16:00,310 --> 00:16:04,270
are either<font color="#E5E5E5"> aggregating them in the</font>

356
00:16:01,870 --> 00:16:06,220
process<font color="#CCCCCC"> or by an agent that is living</font>

357
00:16:04,270 --> 00:16:09,760
very close<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the process and</font><font color="#E5E5E5"> do the</font>

358
00:16:06,220 --> 00:16:11,770
<font color="#CCCCCC">aggression</font><font color="#E5E5E5"> there at Google we try</font><font color="#CCCCCC"> to use</font>

359
00:16:09,760 --> 00:16:14,589
<font color="#E5E5E5">you know same instrumentation libraries</font>

360
00:16:11,770 --> 00:16:16,149
everywhere<font color="#E5E5E5"> to provide its you know when</font>

361
00:16:14,589 --> 00:16:18,220
we were<font color="#E5E5E5"> doing providing</font><font color="#CCCCCC"> black box</font>

362
00:16:16,149 --> 00:16:21,490
monitoring we're trying to use the same

363
00:16:18,220 --> 00:16:23,350
libraries for<font color="#E5E5E5"> compatibility for example</font>

364
00:16:21,490 --> 00:16:25,779
<font color="#E5E5E5">I trace can be started at our load</font>

365
00:16:23,350 --> 00:16:29,290
balancer<font color="#CCCCCC"> and then our engineers can use</font>

366
00:16:25,779 --> 00:16:33,160
the same libraries add more<font color="#CCCCCC"> Spense to to</font>

367
00:16:29,290 --> 00:16:35,529
the existent trace<font color="#E5E5E5"> similarly</font><font color="#CCCCCC"> our you</font>

368
00:16:33,160 --> 00:16:36,890
know<font color="#CCCCCC"> microservices frameworks like</font><font color="#E5E5E5"> gr</font><font color="#CCCCCC"> pz</font>

369
00:16:35,529 --> 00:16:40,070
provides<font color="#E5E5E5"> tag</font>

370
00:16:36,890 --> 00:16:40,850
<font color="#E5E5E5">in a corset of you know instrumentation</font>

371
00:16:40,070 --> 00:16:43,070
<font color="#CCCCCC">out-of-the-box</font>

372
00:16:40,850 --> 00:16:46,070
<font color="#E5E5E5">so it's easier you know engineers the</font>

373
00:16:43,070 --> 00:16:49,340
<font color="#E5E5E5">facility</font><font color="#CCCCCC"> what is already there and</font><font color="#E5E5E5"> put</font>

374
00:16:46,070 --> 00:16:50,780
stuff<font color="#E5E5E5"> on top of top</font><font color="#CCCCCC"> of it rather than</font>

375
00:16:49,340 --> 00:16:55,220
you know<font color="#E5E5E5"> thinking everything from the</font>

376
00:16:50,780 --> 00:16:56,449
various scratch<font color="#E5E5E5"> whatever other useful</font>

377
00:16:55,220 --> 00:16:58,910
tools<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> eight people is this</font>

378
00:16:56,450 --> 00:17:01,690
<font color="#CCCCCC">introspection pages</font><font color="#E5E5E5"> start from the</font>

379
00:16:58,910 --> 00:17:04,550
<font color="#E5E5E5">server's you can imagine introspection</font>

380
00:17:01,690 --> 00:17:06,620
is a small<font color="#E5E5E5"> back-end that collects and</font>

381
00:17:04,550 --> 00:17:08,930
visualizes what is collected in the

382
00:17:06,619 --> 00:17:11,989
process<font color="#E5E5E5"> it's a great useful tool to</font>

383
00:17:08,930 --> 00:17:14,810
understand<font color="#E5E5E5"> what is happening</font><font color="#CCCCCC"> you know</font>

384
00:17:11,990 --> 00:17:16,970
without<font color="#CCCCCC"> having</font><font color="#E5E5E5"> to rely</font><font color="#CCCCCC"> on a</font><font color="#E5E5E5"> back-end and</font>

385
00:17:14,810 --> 00:17:19,579
<font color="#E5E5E5">also useful you know during the</font>

386
00:17:16,970 --> 00:17:22,430
development time<font color="#E5E5E5"> as I mentioned</font><font color="#CCCCCC"> here you</font>

387
00:17:19,579 --> 00:17:25,849
see the traces<font color="#E5E5E5"> page</font><font color="#CCCCCC"> there's a small</font>

388
00:17:22,430 --> 00:17:28,190
<font color="#E5E5E5">dashboard that displays spends of you</font>

389
00:17:25,849 --> 00:17:29,149
know from<font color="#CCCCCC"> different names and gives us</font>

390
00:17:28,190 --> 00:17:32,180
the you know overall<font color="#E5E5E5"> latency</font>

391
00:17:29,150 --> 00:17:35,030
distribution<font color="#E5E5E5"> you can see the details for</font>

392
00:17:32,180 --> 00:17:37,970
<font color="#CCCCCC">ten samples for each distribution bucket</font>

393
00:17:35,030 --> 00:17:41,320
<font color="#E5E5E5">and the</font><font color="#CCCCCC"> errors ones</font><font color="#E5E5E5"> so you have a you</font>

394
00:17:37,970 --> 00:17:46,100
<font color="#CCCCCC">know clue about</font><font color="#E5E5E5"> what is the main reason</font>

395
00:17:41,320 --> 00:17:47,929
main problem to summarize we have<font color="#E5E5E5"> a</font>

396
00:17:46,100 --> 00:17:52,219
holistic<font color="#CCCCCC"> approach</font><font color="#E5E5E5"> we use multiple</font>

397
00:17:47,930 --> 00:17:54,800
<font color="#E5E5E5">signals metric traces and more tags</font>

398
00:17:52,220 --> 00:17:57,470
<font color="#E5E5E5">allows us to break down data by</font>

399
00:17:54,800 --> 00:18:00,310
dimensions<font color="#E5E5E5"> each team can produce them</font>

400
00:17:57,470 --> 00:18:03,800
and pass<font color="#CCCCCC"> them to the low-level</font><font color="#E5E5E5"> services</font>

401
00:18:00,310 --> 00:18:05,570
<font color="#CCCCCC">the instruments</font><font color="#E5E5E5"> are core frameworks and</font>

402
00:18:03,800 --> 00:18:07,010
service<font color="#E5E5E5"> measures and you know load</font>

403
00:18:05,570 --> 00:18:09,290
<font color="#CCCCCC">balancers out of the box</font>

404
00:18:07,010 --> 00:18:11,420
so users automatic automatic<font color="#CCCCCC"> lis get a</font>

405
00:18:09,290 --> 00:18:13,670
lot of instrumentation<font color="#E5E5E5"> out-of-the-box</font>

406
00:18:11,420 --> 00:18:16,400
instrumentation through them and then

407
00:18:13,670 --> 00:18:20,480
they<font color="#E5E5E5"> can use you know the same libraries</font>

408
00:18:16,400 --> 00:18:22,880
<font color="#CCCCCC">so at</font><font color="#E5E5E5"> fine-grained details</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> like in</font>

409
00:18:20,480 --> 00:18:25,420
<font color="#CCCCCC">the</font><font color="#E5E5E5"> case</font><font color="#CCCCCC"> of you know creating custom</font>

410
00:18:22,880 --> 00:18:28,430
spans and the<font color="#E5E5E5"> GRP see example I adhere</font>

411
00:18:25,420 --> 00:18:32,090
<font color="#E5E5E5">our instrumentation layer is optimized</font>

412
00:18:28,430 --> 00:18:33,730
to<font color="#CCCCCC"> be low overhead and low cost it makes</font>

413
00:18:32,090 --> 00:18:36,409
it easier for libraries<font color="#CCCCCC"> and frameworks</font>

414
00:18:33,730 --> 00:18:40,580
<font color="#E5E5E5">instrument</font><font color="#CCCCCC"> without</font><font color="#E5E5E5"> thinking too much</font>

415
00:18:36,410 --> 00:18:43,190
about<font color="#CCCCCC"> the cost</font><font color="#E5E5E5"> and you</font><font color="#CCCCCC"> know what one</font>

416
00:18:40,580 --> 00:18:45,409
<font color="#CCCCCC">shared up these concepts and put</font><font color="#E5E5E5"> them in</font>

417
00:18:43,190 --> 00:18:49,520
place<font color="#CCCCCC"> it gives you a good fun</font>

418
00:18:45,410 --> 00:18:50,960
layer open<font color="#CCCCCC"> senses is very</font><font color="#E5E5E5"> similar</font><font color="#CCCCCC"> to you</font>

419
00:18:49,520 --> 00:18:53,389
<font color="#E5E5E5">know all the approaches we</font><font color="#CCCCCC"> have done</font>

420
00:18:50,960 --> 00:18:56,540
internally<font color="#E5E5E5"> and currently is available in</font>

421
00:18:53,390 --> 00:19:00,470
vendor agnostic<font color="#CCCCCC"> we already have support</font>

422
00:18:56,540 --> 00:19:02,270
for<font color="#E5E5E5"> Prometheus Zipkin</font><font color="#CCCCCC"> Jaeger and more</font><font color="#E5E5E5"> so</font>

423
00:19:00,470 --> 00:19:04,760
I highly encourage<font color="#CCCCCC"> you to you know</font><font color="#E5E5E5"> take</font>

424
00:19:02,270 --> 00:19:07,970
<font color="#E5E5E5">a look and give us feedback</font><font color="#CCCCCC"> and</font>

425
00:19:04,760 --> 00:19:08,810
contribute<font color="#E5E5E5"> thank you so much</font>

426
00:19:07,970 --> 00:19:12,110
[Applause]

427
00:19:08,810 --> 00:19:13,270
[Music]

428
00:19:12,110 --> 00:19:16,449
[Applause]

429
00:19:13,270 --> 00:19:16,450
[Music]

430
00:19:16,830 --> 00:19:19,830
<font color="#CCCCCC">please</font>

431
00:19:22,770 --> 00:19:27,770
[Applause]

432
00:19:24,440 --> 00:19:32,450
testing<font color="#CCCCCC"> okay do you have</font><font color="#E5E5E5"> any questions</font>

433
00:19:27,770 --> 00:19:32,450
<font color="#E5E5E5">your hand up</font><font color="#CCCCCC"> yes wonder</font>

434
00:19:36,230 --> 00:19:43,760
thank you how does this relate<font color="#CCCCCC"> to open</font>

435
00:19:39,320 --> 00:19:45,649
tracing<font color="#E5E5E5"> the</font><font color="#CCCCCC"> open question we have</font><font color="#E5E5E5"> so one</font>

436
00:19:43,760 --> 00:19:48,080
of<font color="#E5E5E5"> the easy answers is we are a holistic</font>

437
00:19:45,649 --> 00:19:50,570
approach<font color="#CCCCCC"> open tracing is you know</font>

438
00:19:48,080 --> 00:19:53,629
<font color="#E5E5E5">focused on tracing and the way open</font>

439
00:19:50,570 --> 00:19:58,100
tracing see themselves<font color="#E5E5E5"> is</font><font color="#CCCCCC"> more of API</font>

440
00:19:53,630 --> 00:20:01,130
another real implementation<font color="#E5E5E5"> so they</font><font color="#CCCCCC"> we</font>

441
00:19:58,100 --> 00:20:03,559
are<font color="#E5E5E5"> data models are quite compatible</font><font color="#CCCCCC"> and</font>

442
00:20:01,130 --> 00:20:05,659
we can currently say that like if there

443
00:20:03,559 --> 00:20:07,519
<font color="#E5E5E5">is open tracing instrumentation there we</font>

444
00:20:05,659 --> 00:20:09,380
can<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> convert it to our is</font>

445
00:20:07,519 --> 00:20:11,899
<font color="#E5E5E5">instrumentation and you can still use</font>

446
00:20:09,380 --> 00:20:14,360
<font color="#CCCCCC">the you know our exporters</font><font color="#E5E5E5"> back-end</font>

447
00:20:11,899 --> 00:20:16,039
exporters export<font color="#E5E5E5"> the data we were</font>

448
00:20:14,360 --> 00:20:18,019
talking to open tracing right now to see

449
00:20:16,039 --> 00:20:21,049
if<font color="#CCCCCC"> we can actually get</font><font color="#E5E5E5"> on similar page</font>

450
00:20:18,019 --> 00:20:23,149
in terms of naming<font color="#CCCCCC"> but it's a little bit</font>

451
00:20:21,049 --> 00:20:26,720
<font color="#E5E5E5">difficult because we have</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know tags</font>

452
00:20:23,149 --> 00:20:29,149
for example dimensions decoupled<font color="#E5E5E5"> well</font>

453
00:20:26,720 --> 00:20:32,029
open tracing up<font color="#CCCCCC"> puts easily you know</font>

454
00:20:29,149 --> 00:20:34,760
<font color="#CCCCCC">hisses is a part of the tracing API</font><font color="#E5E5E5"> so</font>

455
00:20:32,029 --> 00:20:39,190
we were<font color="#E5E5E5"> discussing and</font><font color="#CCCCCC"> seeing what we</font>

456
00:20:34,760 --> 00:20:39,190
<font color="#E5E5E5">can do next question</font>

457
00:20:43,600 --> 00:20:49,639
this is open okay<font color="#E5E5E5"> so one</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> problems</font>

458
00:20:47,570 --> 00:20:52,250
of monitoring and collecting<font color="#E5E5E5"> data from</font>

459
00:20:49,640 --> 00:20:55,130
services<font color="#E5E5E5"> is when a service has a problem</font>

460
00:20:52,250 --> 00:20:57,409
<font color="#E5E5E5">or crises the data that generates it's</font>

461
00:20:55,130 --> 00:20:59,539
much higher depending<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the design</font><font color="#CCCCCC"> the</font>

462
00:20:57,409 --> 00:21:00,289
application can be<font color="#E5E5E5"> five times twenty</font>

463
00:20:59,539 --> 00:21:02,870
<font color="#E5E5E5">times more</font>

464
00:21:00,289 --> 00:21:05,299
you talked about aggregators in the<font color="#CCCCCC"> node</font>

465
00:21:02,870 --> 00:21:07,729
<font color="#CCCCCC">want to collect know do I mean what is</font>

466
00:21:05,299 --> 00:21:10,370
the rule of<font color="#E5E5E5"> thumb</font><font color="#CCCCCC"> how much data should</font>

467
00:21:07,730 --> 00:21:12,309
produce more<font color="#E5E5E5"> so it really depends but at</font>

468
00:21:10,370 --> 00:21:14,989
Google<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> this other concept of</font>

469
00:21:12,309 --> 00:21:19,850
<font color="#CCCCCC">having</font><font color="#E5E5E5"> egregore just outside of the</font>

470
00:21:14,990 --> 00:21:22,490
process so<font color="#E5E5E5"> we usually have agents</font>

471
00:21:19,850 --> 00:21:26,360
<font color="#CCCCCC">located nearby</font><font color="#E5E5E5"> and you know collect</font>

472
00:21:22,490 --> 00:21:28,370
<font color="#E5E5E5">wrong metrics sometimes in like use that</font>

473
00:21:26,360 --> 00:21:31,189
you know<font color="#CCCCCC"> additional</font><font color="#E5E5E5"> agent to export the</font>

474
00:21:28,370 --> 00:21:33,979
final<font color="#E5E5E5"> thing and it depends on the you</font>

475
00:21:31,190 --> 00:21:36,549
know the the latency expectations you

476
00:21:33,980 --> 00:21:40,159
have independent

477
00:21:36,549 --> 00:21:44,270
<font color="#CCCCCC">expense</font><font color="#E5E5E5"> between you your process and the</font>

478
00:21:40,159 --> 00:21:46,520
<font color="#E5E5E5">agents the question is because we face</font>

479
00:21:44,270 --> 00:21:49,158
this problem<font color="#E5E5E5"> is and what would be</font><font color="#CCCCCC"> your</font>

480
00:21:46,520 --> 00:21:51,440
<font color="#CCCCCC">advice or the percentage of like in size</font>

481
00:21:49,159 --> 00:21:55,190
<font color="#E5E5E5">how much data would make sense to</font>

482
00:21:51,440 --> 00:21:56,990
<font color="#E5E5E5">produce specifically like how much data</font>

483
00:21:55,190 --> 00:22:00,350
<font color="#E5E5E5">we should buffer yes</font>

484
00:21:56,990 --> 00:22:03,020
it's again hard to say<font color="#E5E5E5"> like it's really</font>

485
00:22:00,350 --> 00:22:07,129
<font color="#E5E5E5">hard to say</font><font color="#CCCCCC"> like there</font><font color="#E5E5E5"> is one typical</font>

486
00:22:03,020 --> 00:22:08,980
<font color="#E5E5E5">room</font><font color="#CCCCCC"> so you just need to</font><font color="#E5E5E5"> experiment for</font>

487
00:22:07,130 --> 00:22:11,840
<font color="#E5E5E5">your case and again you need to</font><font color="#CCCCCC"> I think</font>

488
00:22:08,980 --> 00:22:15,860
be<font color="#CCCCCC"> able to depend</font><font color="#E5E5E5"> on different models</font><font color="#CCCCCC"> to</font>

489
00:22:11,840 --> 00:22:17,539
export<font color="#E5E5E5"> you know you can export from</font><font color="#CCCCCC"> the</font>

490
00:22:15,860 --> 00:22:21,500
agents<font color="#E5E5E5"> rather than the process or</font><font color="#CCCCCC"> the</font>

491
00:22:17,539 --> 00:22:25,658
process<font color="#CCCCCC"> I mean I cannot like tell one</font>

492
00:22:21,500 --> 00:22:28,279
rule<font color="#CCCCCC"> there's one perfect</font><font color="#E5E5E5"> rule that works</font>

493
00:22:25,659 --> 00:22:33,010
<font color="#E5E5E5">next question turned up</font>

494
00:22:28,279 --> 00:22:33,010
<font color="#CCCCCC">is that</font><font color="#E5E5E5"> school because it is</font><font color="#CCCCCC"> the school</font>

495
00:22:33,220 --> 00:22:39,010
<font color="#E5E5E5">okay so I'm gonna ask a question you say</font>

496
00:22:36,430 --> 00:22:41,350
that it's<font color="#E5E5E5"> very low overhead</font><font color="#CCCCCC"> what would</font>

497
00:22:39,010 --> 00:22:44,020
be the<font color="#CCCCCC"> tip</font><font color="#E5E5E5"> number of nanoseconds taken</font>

498
00:22:41,350 --> 00:22:46,090
for an<font color="#CCCCCC"> adventurer trolling away and not</font>

499
00:22:44,020 --> 00:22:47,470
<font color="#E5E5E5">seconds of what for you set the</font>

500
00:22:46,090 --> 00:22:48,610
<font color="#E5E5E5">instrumentation is</font><font color="#CCCCCC"> low</font><font color="#E5E5E5"> overhead</font>

501
00:22:47,470 --> 00:22:51,520
so if you have an event<font color="#E5E5E5"> for which</font>

502
00:22:48,610 --> 00:22:56,080
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> no use</font><font color="#CCCCCC"> of it Freddy Ron</font><font color="#E5E5E5"> what</font>

503
00:22:51,520 --> 00:22:59,650
<font color="#E5E5E5">sort of</font><font color="#CCCCCC"> call so the ideal thing is we</font>

504
00:22:56,080 --> 00:23:01,330
drop the events we we collect<font color="#E5E5E5"> metric</font>

505
00:22:59,650 --> 00:23:05,920
collection for example<font color="#CCCCCC"> it happens this</font>

506
00:23:01,330 --> 00:23:07,840
way<font color="#CCCCCC"> we collect the record events we drop</font>

507
00:23:05,920 --> 00:23:11,950
<font color="#E5E5E5">them if there there is no one subscribed</font>

508
00:23:07,840 --> 00:23:14,320
and there we need<font color="#E5E5E5"> to still iterate those</font>

509
00:23:11,950 --> 00:23:16,480
events<font color="#E5E5E5"> and it's just like</font><font color="#CCCCCC"> very minimal</font>

510
00:23:14,320 --> 00:23:17,710
you usually just omit it I don't have

511
00:23:16,480 --> 00:23:19,540
<font color="#E5E5E5">like real benchmarks for the go</font>

512
00:23:17,710 --> 00:23:22,870
implementation right now which I am

513
00:23:19,540 --> 00:23:25,450
<font color="#CCCCCC">responsible for so I cannot tell</font><font color="#E5E5E5"> in this</font>

514
00:23:22,870 --> 00:23:28,479
project<font color="#E5E5E5"> is just you know in the</font><font color="#CCCCCC"> early</font>

515
00:23:25,450 --> 00:23:30,160
<font color="#E5E5E5">stages but</font><font color="#CCCCCC"> first suppose was</font><font color="#E5E5E5"> an</font>

516
00:23:28,480 --> 00:23:34,540
<font color="#E5E5E5">implementation internally just like</font>

517
00:23:30,160 --> 00:23:37,200
really<font color="#E5E5E5"> don't care too much any other</font>

518
00:23:34,540 --> 00:23:37,200
<font color="#E5E5E5">questions</font>

519
00:23:37,530 --> 00:23:49,269
going<font color="#CCCCCC"> three two one thank you very</font><font color="#E5E5E5"> much</font>

520
00:23:41,930 --> 00:23:49,269
[Applause]

