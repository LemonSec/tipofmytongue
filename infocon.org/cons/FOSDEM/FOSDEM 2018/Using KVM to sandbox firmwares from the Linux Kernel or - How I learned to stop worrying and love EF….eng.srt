1
00:00:06,020 --> 00:00:10,889
so hi everyone thanks for<font color="#CCCCCC"> coming to my</font>

2
00:00:08,970 --> 00:00:13,560
talk<font color="#E5E5E5"> about</font><font color="#CCCCCC"> KDM has</font><font color="#E5E5E5"> a son boxing</font>

3
00:00:10,889 --> 00:00:15,030
mechanism for the<font color="#E5E5E5"> Linux kernel before</font>

4
00:00:13,560 --> 00:00:17,279
diving into<font color="#E5E5E5"> the technical details</font><font color="#CCCCCC"> of it</font>

5
00:00:15,030 --> 00:00:19,680
quickly introduce myself my name is

6
00:00:17,279 --> 00:00:21,840
<font color="#CCCCCC">florists I am a</font><font color="#E5E5E5"> computer engineering</font>

7
00:00:19,680 --> 00:00:23,130
student during<font color="#CCCCCC"> today</font><font color="#E5E5E5"> I am an embedded</font>

8
00:00:21,840 --> 00:00:24,960
software consultant during<font color="#E5E5E5"> the night</font>

9
00:00:23,130 --> 00:00:26,369
<font color="#E5E5E5">which gives me</font><font color="#CCCCCC"> plenty of</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> to</font>

10
00:00:24,960 --> 00:00:29,820
maintain an operating system named

11
00:00:26,369 --> 00:00:32,070
<font color="#CCCCCC">Aceves</font><font color="#E5E5E5"> and during the summer when</font><font color="#CCCCCC"> I have</font>

12
00:00:29,820 --> 00:00:35,730
time<font color="#CCCCCC"> I do internships</font><font color="#E5E5E5"> for various</font>

13
00:00:32,070 --> 00:00:38,550
<font color="#E5E5E5">companies</font><font color="#CCCCCC"> and my latest internship was</font>

14
00:00:35,730 --> 00:00:40,919
at<font color="#CCCCCC"> UM Cambridge I was part of the kernel</font>

15
00:00:38,550 --> 00:00:44,269
team there and I was<font color="#CCCCCC"> in charge of</font>

16
00:00:40,920 --> 00:00:47,670
exploring values hypervisor based

17
00:00:44,270 --> 00:00:49,500
security<font color="#E5E5E5"> solutions</font><font color="#CCCCCC"> one of the thing I</font>

18
00:00:47,670 --> 00:00:52,230
did<font color="#CCCCCC"> that I wasn't</font><font color="#E5E5E5"> at the supervision of</font>

19
00:00:49,500 --> 00:00:56,640
mastership<font color="#E5E5E5"> with the maintainer of Kem</font>

20
00:00:52,230 --> 00:01:00,870
<font color="#CCCCCC">and he had this idea of</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> we could</font>

21
00:00:56,640 --> 00:01:02,250
put ef5 and time services inside<font color="#E5E5E5"> a</font><font color="#CCCCCC"> KVM</font>

22
00:01:00,870 --> 00:01:05,970
virtual machine<font color="#E5E5E5"> so don't worry I will</font>

23
00:01:02,250 --> 00:01:09,959
explain what ef5 and time services are

24
00:01:05,970 --> 00:01:13,259
what the problem with them is and what

25
00:01:09,959 --> 00:01:16,170
<font color="#E5E5E5">it means to end them inside a</font><font color="#CCCCCC"> KVM</font>

26
00:01:13,259 --> 00:01:19,679
virtual machine<font color="#CCCCCC"> I will begin with a</font>

27
00:01:16,170 --> 00:01:21,179
quick introduction<font color="#E5E5E5"> of a VM what it is</font>

28
00:01:19,679 --> 00:01:23,880
and<font color="#E5E5E5"> what it does</font><font color="#CCCCCC"> then I will tell you</font>

29
00:01:21,179 --> 00:01:26,550
about<font color="#E5E5E5"> how I managed to get that as an</font>

30
00:01:23,880 --> 00:01:29,399
API<font color="#E5E5E5"> inside the kernel</font><font color="#CCCCCC"> I will present</font><font color="#E5E5E5"> the</font>

31
00:01:26,550 --> 00:01:35,250
<font color="#CCCCCC">EFI one-time</font><font color="#E5E5E5"> services and how my son</font>

32
00:01:29,399 --> 00:01:36,599
boxing solution ended up working<font color="#CCCCCC"> ok so</font>

33
00:01:35,250 --> 00:01:40,140
<font color="#E5E5E5">just to let everything is clear for</font>

34
00:01:36,599 --> 00:01:42,720
<font color="#E5E5E5">everyone KVM is a hypervisor</font><font color="#CCCCCC"> you may</font>

35
00:01:40,140 --> 00:01:45,450
have heard that there<font color="#CCCCCC"> exist two kinds of</font>

36
00:01:42,720 --> 00:01:47,190
hypervisor<font color="#E5E5E5"> type 1 type 2 does it run</font>

37
00:01:45,450 --> 00:01:48,989
between<font color="#E5E5E5"> the</font><font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> and a camel but</font>

38
00:01:47,190 --> 00:01:53,399
<font color="#E5E5E5">that one between the kernel and the user</font>

39
00:01:48,989 --> 00:01:56,819
space tools and KVM<font color="#E5E5E5"> is something else so</font>

40
00:01:53,399 --> 00:02:00,000
it's a part of the host<font color="#CCCCCC"> channel this is</font>

41
00:01:56,819 --> 00:02:03,950
<font color="#CCCCCC">your module you could load</font><font color="#E5E5E5"> KDM with the</font>

42
00:02:00,000 --> 00:02:06,149
same simple<font color="#CCCCCC"> installed KVM</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> keo</font><font color="#E5E5E5"> and</font>

43
00:02:03,950 --> 00:02:09,060
<font color="#CCCCCC">essentially</font><font color="#E5E5E5"> its role is to provide an</font>

44
00:02:06,149 --> 00:02:10,649
<font color="#CCCCCC">API to use the space programs so that</font>

45
00:02:09,060 --> 00:02:13,110
<font color="#CCCCCC">they can access</font><font color="#E5E5E5"> the virtualization</font>

46
00:02:10,649 --> 00:02:15,269
capabilities of the hardware you<font color="#CCCCCC"> may</font>

47
00:02:13,110 --> 00:02:18,120
know<font color="#E5E5E5"> that some</font><font color="#CCCCCC"> CPU for instance intel</font>

48
00:02:15,269 --> 00:02:21,849
<font color="#E5E5E5">has have extensions like wiki</font>

49
00:02:18,120 --> 00:02:24,910
<font color="#CCCCCC">AMV as amd-v</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> armed as the armed</font>

50
00:02:21,849 --> 00:02:27,339
virtualization extensions<font color="#CCCCCC"> essentially</font>

51
00:02:24,910 --> 00:02:29,530
what those things are it's an extension

52
00:02:27,340 --> 00:02:32,069
<font color="#E5E5E5">of the instruction set</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> CPU that</font>

53
00:02:29,530 --> 00:02:34,750
allows virtual machine creation and the

54
00:02:32,069 --> 00:02:37,440
separation<font color="#E5E5E5"> between the different virtual</font>

55
00:02:34,750 --> 00:02:39,910
machine is done inside<font color="#CCCCCC"> your hallway so</font>

56
00:02:37,440 --> 00:02:41,560
obviously you know you can you can<font color="#E5E5E5"> fully</font>

57
00:02:39,910 --> 00:02:45,700
trust the<font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> has been</font>

58
00:02:41,560 --> 00:02:48,280
<font color="#E5E5E5">recently some troubles</font><font color="#CCCCCC"> but you can have</font>

59
00:02:45,700 --> 00:02:52,390
decent people of just inside your

60
00:02:48,280 --> 00:02:53,860
<font color="#E5E5E5">hardware so it's the important point in</font>

61
00:02:52,390 --> 00:02:55,630
this<font color="#E5E5E5"> slide is you need</font><font color="#CCCCCC"> to understand</font>

62
00:02:53,860 --> 00:02:58,299
<font color="#CCCCCC">that KVM</font><font color="#E5E5E5"> has been designed to provide</font><font color="#CCCCCC"> a</font>

63
00:02:55,630 --> 00:03:01,569
<font color="#E5E5E5">bridge from the</font><font color="#CCCCCC"> harbor to use the space</font>

64
00:02:58,299 --> 00:03:03,610
program for<font color="#E5E5E5"> instance qmu but also</font><font color="#CCCCCC"> KVM</font>

65
00:03:01,569 --> 00:03:04,359
tool<font color="#E5E5E5"> and so on and it's also a</font>

66
00:03:03,610 --> 00:03:07,410
<font color="#E5E5E5">multi-platform</font>

67
00:03:04,360 --> 00:03:12,819
API that<font color="#CCCCCC"> can work some different API</font>

68
00:03:07,410 --> 00:03:13,600
<font color="#CCCCCC">unfilmed architecture</font><font color="#E5E5E5"> so how does it</font>

69
00:03:12,819 --> 00:03:16,329
<font color="#E5E5E5">work</font>

70
00:03:13,600 --> 00:03:18,910
so<font color="#CCCCCC"> KVM exposes virtual devices in slash</font>

71
00:03:16,330 --> 00:03:22,750
dev slash<font color="#E5E5E5"> whether for instance</font><font color="#CCCCCC"> you have</font>

72
00:03:18,910 --> 00:03:25,989
slash dev slash<font color="#CCCCCC"> k vm v on which you can</font>

73
00:03:22,750 --> 00:03:28,540
run<font color="#E5E5E5"> io controls to create your virtual</font>

74
00:03:25,989 --> 00:03:31,200
machine so it's kind of standardized

75
00:03:28,540 --> 00:03:34,209
across all the architectures<font color="#CCCCCC"> for</font>

76
00:03:31,200 --> 00:03:37,450
<font color="#CCCCCC">instance you</font><font color="#E5E5E5"> have a</font><font color="#CCCCCC"> KTM create vm io</font>

77
00:03:34,209 --> 00:03:40,239
<font color="#E5E5E5">control and that just returns file</font>

78
00:03:37,450 --> 00:03:42,070
descriptor<font color="#E5E5E5"> to a new virtual device that</font>

79
00:03:40,239 --> 00:03:44,769
represents your virtual machine and then

80
00:03:42,070 --> 00:03:49,540
<font color="#E5E5E5">you can run k vm run</font><font color="#CCCCCC"> well obviously</font><font color="#E5E5E5"> you</font>

81
00:03:44,769 --> 00:03:55,329
need<font color="#E5E5E5"> to attach visual memory</font><font color="#CCCCCC"> CPU</font><font color="#E5E5E5"> but the</font>

82
00:03:49,540 --> 00:03:57,670
<font color="#E5E5E5">DVM runs one of</font><font color="#CCCCCC"> the thing I would like</font>

83
00:03:55,329 --> 00:03:59,340
<font color="#E5E5E5">to highlight here is</font><font color="#CCCCCC"> that since k vm has</font>

84
00:03:57,670 --> 00:04:03,130
<font color="#E5E5E5">been designed for user space programs</font>

85
00:03:59,340 --> 00:04:05,739
<font color="#CCCCCC">when you attach a memory slot to your</font>

86
00:04:03,130 --> 00:04:07,780
<font color="#CCCCCC">virtual machine the physical memory of</font>

87
00:04:05,739 --> 00:04:11,530
the virtual machine is<font color="#CCCCCC"> actually mapped</font>

88
00:04:07,780 --> 00:04:13,750
<font color="#E5E5E5">from the address space of the process</font><font color="#CCCCCC"> so</font>

89
00:04:11,530 --> 00:04:16,000
let's take an example<font color="#E5E5E5"> if you want Q mu</font>

90
00:04:13,750 --> 00:04:18,910
<font color="#E5E5E5">p.m. you can allocate a range of memory</font>

91
00:04:16,000 --> 00:04:21,668
and that memory for<font color="#CCCCCC"> Kumi will be used at</font>

92
00:04:18,910 --> 00:04:24,010
the physical memory of the virtual

93
00:04:21,668 --> 00:04:26,250
machine that's important<font color="#E5E5E5"> for the rest of</font>

94
00:04:24,010 --> 00:04:26,250
<font color="#E5E5E5">the talk</font>

95
00:04:26,440 --> 00:04:34,910
that's it for<font color="#E5E5E5"> general introduction to</font>

96
00:04:28,640 --> 00:04:37,940
<font color="#CCCCCC">KVM</font><font color="#E5E5E5"> now let's come to internal</font><font color="#CCCCCC"> KVM so</font>

97
00:04:34,910 --> 00:04:41,210
the idea was what if we<font color="#CCCCCC"> cooled from</font><font color="#E5E5E5"> the</font>

98
00:04:37,940 --> 00:04:43,280
<font color="#E5E5E5">kernel when small</font><font color="#CCCCCC"> sand boxes</font><font color="#E5E5E5"> more</font>

99
00:04:41,210 --> 00:04:47,900
virtual<font color="#CCCCCC"> machines in which we could run</font>

100
00:04:43,280 --> 00:04:50,270
cut that we don't<font color="#CCCCCC"> trust</font><font color="#E5E5E5"> maybe because</font>

101
00:04:47,900 --> 00:04:52,880
<font color="#CCCCCC">we've</font><font color="#E5E5E5"> haven't wrote this code or</font><font color="#CCCCCC"> maybe</font>

102
00:04:50,270 --> 00:04:55,159
<font color="#CCCCCC">because this</font><font color="#E5E5E5"> is a highly critical piece</font>

103
00:04:52,880 --> 00:04:59,360
<font color="#E5E5E5">of code and we want to make</font><font color="#CCCCCC"> sure that if</font>

104
00:04:55,160 --> 00:05:03,260
there is an exploit<font color="#E5E5E5"> into this program</font><font color="#CCCCCC"> it</font>

105
00:04:59,360 --> 00:05:04,940
won't<font color="#E5E5E5"> affect the entire kernel so that</font>

106
00:05:03,260 --> 00:05:06,500
will be<font color="#E5E5E5"> great if</font><font color="#CCCCCC"> we had something to</font>

107
00:05:04,940 --> 00:05:08,750
spawn digital machine from the kernel

108
00:05:06,500 --> 00:05:12,770
something that we could call kernel

109
00:05:08,750 --> 00:05:15,470
virtual machine<font color="#E5E5E5"> something</font><font color="#CCCCCC"> like KVM and</font>

110
00:05:12,770 --> 00:05:18,830
we have it<font color="#E5E5E5"> so everything is almost there</font>

111
00:05:15,470 --> 00:05:21,260
<font color="#E5E5E5">but it's not been conceived to be used</font>

112
00:05:18,830 --> 00:05:23,810
by the kernel<font color="#CCCCCC"> itself by various</font>

113
00:05:21,260 --> 00:05:30,170
subsystems<font color="#CCCCCC"> so we had to do some</font>

114
00:05:23,810 --> 00:05:32,930
adaptations here<font color="#CCCCCC"> just to clarify the</font>

115
00:05:30,170 --> 00:05:35,300
objectives of<font color="#CCCCCC"> KVM it's meant to be</font>

116
00:05:32,930 --> 00:05:37,190
<font color="#E5E5E5">cross-platform to be standardized across</font>

117
00:05:35,300 --> 00:05:39,500
different architecture so that the same

118
00:05:37,190 --> 00:05:42,920
subsystem can use virtual machines on

119
00:05:39,500 --> 00:05:44,450
<font color="#CCCCCC">arm or x86 for instance</font><font color="#E5E5E5"> it can be used</font>

120
00:05:42,920 --> 00:05:46,340
<font color="#E5E5E5">for security but also for stability</font>

121
00:05:44,450 --> 00:05:48,740
<font color="#E5E5E5">because when you have a program a</font>

122
00:05:46,340 --> 00:05:52,210
program<font color="#CCCCCC"> that can potentially</font><font color="#E5E5E5"> touch the</font>

123
00:05:48,740 --> 00:05:56,480
system registers<font color="#E5E5E5"> it can cause problems</font>

124
00:05:52,210 --> 00:05:59,060
and the<font color="#CCCCCC"> the IP I is meant to be</font><font color="#E5E5E5"> generic</font>

125
00:05:56,480 --> 00:06:03,230
so that every kernel maintainer can use

126
00:05:59,060 --> 00:06:08,270
it to<font color="#CCCCCC"> sunberg something because what</font>

127
00:06:03,230 --> 00:06:10,850
world problems so first of all<font color="#CCCCCC"> KVM as as</font>

128
00:06:08,270 --> 00:06:13,909
it is today<font color="#E5E5E5"> doesn't offer in our</font>

129
00:06:10,850 --> 00:06:15,680
functions<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> expect to have</font>

130
00:06:13,910 --> 00:06:17,750
the equivalent<font color="#E5E5E5"> of the create</font><font color="#CCCCCC"> vm io</font>

131
00:06:15,680 --> 00:06:21,800
<font color="#CCCCCC">control</font><font color="#E5E5E5"> I showed you before inside the</font>

132
00:06:17,750 --> 00:06:26,420
kernel but you don't so we had to extend

133
00:06:21,800 --> 00:06:29,210
the<font color="#CCCCCC"> k vm api's and then there are plenty</font>

134
00:06:26,420 --> 00:06:30,930
<font color="#E5E5E5">of assumptions in the code</font><font color="#CCCCCC"> of k vm that</font>

135
00:06:29,210 --> 00:06:32,640
the

136
00:06:30,930 --> 00:06:34,770
the virtual machine<font color="#E5E5E5"> is created from a</font>

137
00:06:32,640 --> 00:06:38,760
user<font color="#CCCCCC"> space program</font><font color="#E5E5E5"> for instance every</font>

138
00:06:34,770 --> 00:06:43,440
parameter<font color="#E5E5E5"> that sends to</font><font color="#CCCCCC"> KVM functions he</font>

139
00:06:38,760 --> 00:06:45,810
is<font color="#E5E5E5"> is retrieved by the kernel using copy</font>

140
00:06:43,440 --> 00:06:49,650
from user and<font color="#E5E5E5"> obviously if you don't</font>

141
00:06:45,810 --> 00:06:55,350
call this function<font color="#E5E5E5"> from a process you</font>

142
00:06:49,650 --> 00:06:57,450
get tons of<font color="#CCCCCC"> programs KVM is</font><font color="#E5E5E5"> also acting</font>

143
00:06:55,350 --> 00:07:00,270
on<font color="#CCCCCC"> a schedule because it assumes you</font>

144
00:06:57,450 --> 00:07:02,880
<font color="#CCCCCC">have a process a user space</font><font color="#E5E5E5"> process</font>

145
00:07:00,270 --> 00:07:05,010
<font color="#E5E5E5">spawning the virtual machine</font><font color="#CCCCCC"> so that's</font>

146
00:07:02,880 --> 00:07:08,490
<font color="#E5E5E5">one more assumption that I had to be</font>

147
00:07:05,010 --> 00:07:11,430
<font color="#CCCCCC">factor and then one last thing</font><font color="#E5E5E5"> a couple</font>

148
00:07:08,490 --> 00:07:13,830
<font color="#CCCCCC">of other things the when it</font><font color="#E5E5E5"> comes to the</font>

149
00:07:11,430 --> 00:07:17,610
memory mapping<font color="#CCCCCC"> I told you before that</font>

150
00:07:13,830 --> 00:07:20,190
<font color="#CCCCCC">qmu uses a part of its process address</font>

151
00:07:17,610 --> 00:07:22,290
space<font color="#CCCCCC"> for the physical address space of</font>

152
00:07:20,190 --> 00:07:25,170
<font color="#CCCCCC">the virtual machine</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> when you are in</font>

153
00:07:22,290 --> 00:07:25,680
the kernel<font color="#CCCCCC"> you need to map something</font>

154
00:07:25,170 --> 00:07:28,710
<font color="#E5E5E5">else</font>

155
00:07:25,680 --> 00:07:31,650
so<font color="#E5E5E5"> KVM is not done for that so once</font>

156
00:07:28,710 --> 00:07:34,969
again some refactoring<font color="#CCCCCC"> I chose to make</font>

157
00:07:31,650 --> 00:07:39,590
internal KVM<font color="#E5E5E5"> map physical address space</font>

158
00:07:34,970 --> 00:07:41,850
physical as seen by the host channel<font color="#CCCCCC"> to</font>

159
00:07:39,590 --> 00:07:45,359
intermediary physical address which<font color="#CCCCCC"> is</font>

160
00:07:41,850 --> 00:07:46,980
the<font color="#CCCCCC"> physical layout as it is</font><font color="#E5E5E5"> seen by the</font>

161
00:07:45,360 --> 00:07:49,140
virtual machine<font color="#E5E5E5"> is that ok</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> everyone</font>

162
00:07:46,980 --> 00:07:53,190
<font color="#CCCCCC">but</font><font color="#E5E5E5"> that's a lot</font><font color="#CCCCCC"> of different</font><font color="#E5E5E5"> address</font>

163
00:07:49,140 --> 00:07:56,099
space spaces<font color="#E5E5E5"> and one last very thing</font>

164
00:07:53,190 --> 00:07:59,310
<font color="#E5E5E5">when I think on arm the virtual machines</font>

165
00:07:56,100 --> 00:08:03,270
have an instruction<font color="#CCCCCC"> named hvc so</font>

166
00:07:59,310 --> 00:08:06,210
hypervisor<font color="#CCCCCC"> core and guest operating</font>

167
00:08:03,270 --> 00:08:08,609
system can call functions<font color="#E5E5E5"> from the</font>

168
00:08:06,210 --> 00:08:11,549
<font color="#E5E5E5">hypervisor</font><font color="#CCCCCC"> to do whatever to</font><font color="#E5E5E5"> the</font>

169
00:08:08,610 --> 00:08:14,160
hypervisor<font color="#E5E5E5"> authors and for now it's</font><font color="#CCCCCC"> not</font>

170
00:08:11,550 --> 00:08:20,790
used by<font color="#CCCCCC"> KVM because</font><font color="#E5E5E5"> only for</font><font color="#CCCCCC"> paci but</font>

171
00:08:14,160 --> 00:08:24,480
it's not really widely used<font color="#E5E5E5"> and in our</font>

172
00:08:20,790 --> 00:08:27,330
context for some<font color="#CCCCCC"> boxes we need a way</font><font color="#E5E5E5"> for</font>

173
00:08:24,480 --> 00:08:29,820
the host kernel to call code inside

174
00:08:27,330 --> 00:08:33,449
sandbox and a way for the sandbox<font color="#CCCCCC"> send</font>

175
00:08:29,820 --> 00:08:36,090
back messages to the host<font color="#CCCCCC"> channel</font><font color="#E5E5E5"> so we</font>

176
00:08:33,450 --> 00:08:37,710
need also<font color="#E5E5E5"> a way to route hyper calls</font>

177
00:08:36,090 --> 00:08:39,960
from the virtual<font color="#E5E5E5"> machine to a host</font>

178
00:08:37,710 --> 00:08:43,930
camera

179
00:08:39,960 --> 00:08:47,050
just to give<font color="#E5E5E5"> you a global idea of how</font>

180
00:08:43,929 --> 00:08:48,219
this<font color="#CCCCCC"> new API can</font><font color="#E5E5E5"> be used</font><font color="#CCCCCC"> it looks</font><font color="#E5E5E5"> like</font>

181
00:08:47,050 --> 00:08:50,380
this it's very<font color="#E5E5E5"> straightforward</font>

182
00:08:48,220 --> 00:08:54,400
<font color="#CCCCCC">you just create</font><font color="#E5E5E5"> an internal</font><font color="#CCCCCC"> virtual</font>

183
00:08:50,380 --> 00:08:56,350
machine you add a virtual CPU to this

184
00:08:54,400 --> 00:08:58,120
virtual<font color="#CCCCCC"> machine you can't figure it</font>

185
00:08:56,350 --> 00:09:01,750
I cut the code that configures the

186
00:08:58,120 --> 00:09:04,450
<font color="#E5E5E5">memory because we also use virtual</font>

187
00:09:01,750 --> 00:09:07,120
memory<font color="#E5E5E5"> inside the virtual machine so you</font>

188
00:09:04,450 --> 00:09:10,800
need to configure several page tables

189
00:09:07,120 --> 00:09:13,510
<font color="#E5E5E5">and it's it's a bit of a mess sometimes</font>

190
00:09:10,800 --> 00:09:17,880
but the overall idea<font color="#CCCCCC"> is quite simple it</font>

191
00:09:13,510 --> 00:09:17,880
<font color="#E5E5E5">can</font><font color="#CCCCCC"> be used from any driver or subsystem</font>

192
00:09:18,180 --> 00:09:25,089
so that's it for<font color="#CCCCCC"> KVM and internal KVM</font>

193
00:09:22,780 --> 00:09:30,069
and now let's come<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the ef5 and time</font>

194
00:09:25,090 --> 00:09:34,000
services bit that's getting exciting<font color="#E5E5E5"> so</font>

195
00:09:30,070 --> 00:09:36,130
when<font color="#E5E5E5"> I first heard of about</font><font color="#CCCCCC"> EFI runtime</font>

196
00:09:34,000 --> 00:09:38,050
services I had no idea<font color="#E5E5E5"> what</font><font color="#CCCCCC"> that was</font><font color="#E5E5E5"> so</font>

197
00:09:36,130 --> 00:09:40,810
I<font color="#CCCCCC"> just googled it and here are the</font>

198
00:09:38,050 --> 00:09:43,229
results<font color="#CCCCCC"> I found more ways for</font><font color="#E5E5E5"> firmware</font>

199
00:09:40,810 --> 00:09:45,819
to screw you<font color="#E5E5E5"> and UEFI is not your enemy</font>

200
00:09:43,230 --> 00:09:48,340
<font color="#E5E5E5">you can probably imagine that if there</font>

201
00:09:45,820 --> 00:09:52,440
<font color="#E5E5E5">is a torque named UEFI is not you and me</font>

202
00:09:48,340 --> 00:09:52,440
<font color="#E5E5E5">you if I may be you and me</font>

203
00:09:52,630 --> 00:09:58,330
so essentially what EFI<font color="#E5E5E5"> one-time</font>

204
00:09:55,360 --> 00:10:00,940
services are it's a bunch of functions

205
00:09:58,330 --> 00:10:04,060
<font color="#CCCCCC">actually it's anyway with function</font>

206
00:10:00,940 --> 00:10:08,140
pointers<font color="#E5E5E5"> that is given</font><font color="#CCCCCC"> by the bootloader</font>

207
00:10:04,060 --> 00:10:10,569
<font color="#E5E5E5">to</font><font color="#CCCCCC"> d2</font><font color="#E5E5E5"> you can and those functions can</font>

208
00:10:08,140 --> 00:10:12,069
provide access to<font color="#E5E5E5"> various hardware</font>

209
00:10:10,570 --> 00:10:14,740
capabilities for<font color="#E5E5E5"> instance you can get</font>

210
00:10:12,070 --> 00:10:17,640
access<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> efi variables but also to</font>

211
00:10:14,740 --> 00:10:22,450
<font color="#CCCCCC">real-time</font><font color="#E5E5E5"> clock and the</font><font color="#CCCCCC"> uses of things</font>

212
00:10:17,640 --> 00:10:24,880
now let me repeat<font color="#CCCCCC"> that one more time</font><font color="#E5E5E5"> you</font>

213
00:10:22,450 --> 00:10:27,910
get function pointers<font color="#CCCCCC"> that you call from</font>

214
00:10:24,880 --> 00:10:31,240
the<font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> that haven't been coded by</font>

215
00:10:27,910 --> 00:10:32,829
<font color="#CCCCCC">the kernel so you run code that you</font>

216
00:10:31,240 --> 00:10:36,040
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> have control over with the</font>

217
00:10:32,830 --> 00:10:38,380
privileges of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> camel so there are</font>

218
00:10:36,040 --> 00:10:42,030
some mitigate<font color="#CCCCCC"> mitigations</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> can or</font>

219
00:10:38,380 --> 00:10:45,610
they are trying<font color="#E5E5E5"> to put it into a special</font>

220
00:10:42,030 --> 00:10:48,370
array space<font color="#E5E5E5"> but it means</font><font color="#CCCCCC"> that the code</font>

221
00:10:45,610 --> 00:10:50,200
<font color="#E5E5E5">inside</font><font color="#CCCCCC"> the efi runtime services still</font>

222
00:10:48,370 --> 00:10:53,410
has access<font color="#CCCCCC"> to the system registers of</font>

223
00:10:50,200 --> 00:10:56,500
your<font color="#CCCCCC"> cpu and it can do nasty things</font>

224
00:10:53,410 --> 00:10:58,329
behind your<font color="#E5E5E5"> back</font><font color="#CCCCCC"> so there</font><font color="#E5E5E5"> are several</font>

225
00:10:56,500 --> 00:11:00,430
ways<font color="#CCCCCC"> to look</font><font color="#E5E5E5"> at it if you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> an ottoman</font>

226
00:10:58,329 --> 00:11:02,378
or an old man<font color="#E5E5E5"> like this guy you may be</font>

227
00:11:00,430 --> 00:11:05,709
worried that<font color="#CCCCCC"> you learn code that is</font>

228
00:11:02,379 --> 00:11:09,339
<font color="#E5E5E5">proprietary</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> can hope that you</font>

229
00:11:05,709 --> 00:11:12,969
believe<font color="#CCCCCC"> to be free and if you're a</font>

230
00:11:09,339 --> 00:11:14,829
<font color="#E5E5E5">technical guy you may be wondering if</font>

231
00:11:12,970 --> 00:11:19,389
the code that is running<font color="#E5E5E5"> inside the efi</font>

232
00:11:14,829 --> 00:11:21,508
<font color="#E5E5E5">when time services</font><font color="#CCCCCC"> really works well if</font>

233
00:11:19,389 --> 00:11:24,480
it has been implemented<font color="#CCCCCC"> correctly</font><font color="#E5E5E5"> and</font>

234
00:11:21,509 --> 00:11:28,149
the experience shows<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the OEM</font>

235
00:11:24,480 --> 00:11:31,540
developing those services sometimes<font color="#E5E5E5"> make</font>

236
00:11:28,149 --> 00:11:33,939
problems<font color="#CCCCCC"> for instance</font><font color="#E5E5E5"> some of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> ef5</font>

237
00:11:31,540 --> 00:11:35,469
<font color="#E5E5E5">and time services disable interrupts so</font>

238
00:11:33,939 --> 00:11:37,839
you call a function<font color="#CCCCCC"> with interrupts</font>

239
00:11:35,470 --> 00:11:40,480
enabled<font color="#E5E5E5"> and then it goes back</font><font color="#CCCCCC"> with</font>

240
00:11:37,839 --> 00:11:41,949
<font color="#E5E5E5">interrupts disabled and you can all</font>

241
00:11:40,480 --> 00:11:45,189
<font color="#CCCCCC">doesn't work anymore</font><font color="#E5E5E5"> in you don't know</font>

242
00:11:41,949 --> 00:11:47,319
why so there are plenty of hacks<font color="#E5E5E5"> around</font>

243
00:11:45,189 --> 00:11:50,790
<font color="#E5E5E5">the efi drivers inside the linux kernel</font>

244
00:11:47,319 --> 00:11:55,750
to try to limit<font color="#CCCCCC"> the impact of those</font>

245
00:11:50,790 --> 00:11:57,459
services services<font color="#E5E5E5"> but you</font><font color="#CCCCCC"> can feel that</font>

246
00:11:55,750 --> 00:11:59,350
it's starting<font color="#CCCCCC"> to be a bit hacky and you</font>

247
00:11:57,459 --> 00:12:03,209
<font color="#E5E5E5">can treat rust the device vendor that</font>

248
00:11:59,350 --> 00:12:05,529
provides you those those functions I

249
00:12:03,209 --> 00:12:07,689
like to call<font color="#E5E5E5"> it</font><font color="#CCCCCC"> the jump and</font><font color="#E5E5E5"> play for</font>

250
00:12:05,529 --> 00:12:10,110
<font color="#CCCCCC">the best strategy because that's exactly</font>

251
00:12:07,689 --> 00:12:13,870
<font color="#E5E5E5">what you do you jump into an address and</font>

252
00:12:10,110 --> 00:12:16,110
hope you will get back<font color="#E5E5E5"> with</font><font color="#CCCCCC"> a running</font>

253
00:12:13,870 --> 00:12:16,110
<font color="#E5E5E5">kernel</font>

254
00:12:20,920 --> 00:12:27,199
<font color="#CCCCCC">No</font>

255
00:12:23,209 --> 00:12:29,209
now for the<font color="#CCCCCC"> efis unboxing</font><font color="#E5E5E5"> so you may be</font>

256
00:12:27,199 --> 00:12:30,639
starting<font color="#CCCCCC"> to see a pattern here</font>

257
00:12:29,210 --> 00:12:34,910
[Music]

258
00:12:30,639 --> 00:12:38,269
<font color="#E5E5E5">couidn't we used the internal</font><font color="#CCCCCC"> KVM</font>

259
00:12:34,910 --> 00:12:41,480
framework we created before<font color="#CCCCCC"> to end the</font>

260
00:12:38,269 --> 00:12:46,990
ef5 and time services<font color="#E5E5E5"> obviously if I am</font>

261
00:12:41,480 --> 00:12:50,329
here today<font color="#E5E5E5"> you can think</font><font color="#CCCCCC"> that we can so</font>

262
00:12:46,990 --> 00:12:52,339
we use internal<font color="#CCCCCC"> KDM from the efi drivers</font>

263
00:12:50,329 --> 00:12:57,199
to spawn a lightweight virtual machine

264
00:12:52,339 --> 00:13:00,439
at boot time<font color="#E5E5E5"> and then we in this virtual</font>

265
00:12:57,199 --> 00:13:03,800
<font color="#CCCCCC">machine</font><font color="#E5E5E5"> we map the source code and read</font>

266
00:13:00,439 --> 00:13:08,180
the<font color="#E5E5E5"> instructions the decode of the</font><font color="#CCCCCC"> EFI</font>

267
00:13:03,800 --> 00:13:10,120
<font color="#CCCCCC">phantom services and also</font><font color="#E5E5E5"> the the</font><font color="#CCCCCC"> us the</font>

268
00:13:08,180 --> 00:13:12,949
<font color="#E5E5E5">addresses of devices they</font><font color="#CCCCCC"> need to access</font>

269
00:13:10,120 --> 00:13:15,319
we map only<font color="#E5E5E5"> what</font><font color="#CCCCCC"> efi one-time</font><font color="#E5E5E5"> services</font>

270
00:13:12,949 --> 00:13:17,899
need inside the<font color="#E5E5E5"> virtual machine and</font>

271
00:13:15,319 --> 00:13:20,360
<font color="#E5E5E5">nothing else which means that well at</font>

272
00:13:17,899 --> 00:13:23,589
least<font color="#CCCCCC"> they can't touch anything from the</font>

273
00:13:20,360 --> 00:13:26,000
memory that is outside<font color="#E5E5E5"> what</font><font color="#CCCCCC"> I need and</font>

274
00:13:23,589 --> 00:13:29,629
also<font color="#E5E5E5"> since they only have access to</font>

275
00:13:26,000 --> 00:13:35,269
<font color="#CCCCCC">visual</font><font color="#E5E5E5"> CPUs and gas they can't touch the</font>

276
00:13:29,629 --> 00:13:37,910
system register of our<font color="#E5E5E5"> channel so</font><font color="#CCCCCC"> that</font>

277
00:13:35,269 --> 00:13:39,680
caused several problems first of all efi

278
00:13:37,910 --> 00:13:42,500
is meant to be<font color="#CCCCCC"> run very</font><font color="#E5E5E5"> holy in the boot</font>

279
00:13:39,680 --> 00:13:44,839
process of the lyrics<font color="#E5E5E5"> channel and KVM is</font>

280
00:13:42,500 --> 00:13:48,110
<font color="#E5E5E5">meant to be when very late in the boot</font>

281
00:13:44,839 --> 00:13:51,500
process<font color="#E5E5E5"> so a bit more refactoring inside</font>

282
00:13:48,110 --> 00:13:55,809
<font color="#CCCCCC">KVM 2n k vm earlier in boot and efi</font>

283
00:13:51,500 --> 00:13:59,089
later in the boot process and then you

284
00:13:55,809 --> 00:14:01,730
<font color="#E5E5E5">you started to see earlier doing my talk</font>

285
00:13:59,089 --> 00:14:04,339
<font color="#CCCCCC">that you you mess</font>

286
00:14:01,730 --> 00:14:06,769
there are many addresses<font color="#CCCCCC"> always spaces</font>

287
00:14:04,339 --> 00:14:08,420
you need<font color="#E5E5E5"> to address the ones from the</font>

288
00:14:06,769 --> 00:14:10,040
<font color="#E5E5E5">hypervisor the one from the host channel</font>

289
00:14:08,420 --> 00:14:13,160
<font color="#CCCCCC">the physical address space of</font><font color="#E5E5E5"> your</font>

290
00:14:10,040 --> 00:14:15,439
<font color="#E5E5E5">virtual machine the assured rest pace of</font>

291
00:14:13,160 --> 00:14:18,230
the virtual machine so<font color="#CCCCCC"> i try to keep</font>

292
00:14:15,439 --> 00:14:19,910
things<font color="#CCCCCC"> simple here</font><font color="#E5E5E5"> and there is direct</font>

293
00:14:18,230 --> 00:14:22,939
mapping between<font color="#E5E5E5"> the physical address</font>

294
00:14:19,910 --> 00:14:25,009
<font color="#CCCCCC">space</font><font color="#E5E5E5"> and the physical</font><font color="#CCCCCC"> address space</font><font color="#E5E5E5"> of</font>

295
00:14:22,939 --> 00:14:27,920
<font color="#CCCCCC">the virtual machine</font><font color="#E5E5E5"> and same thing for</font>

296
00:14:25,009 --> 00:14:30,889
<font color="#CCCCCC">the</font><font color="#E5E5E5"> virtual</font><font color="#CCCCCC"> memory the developer machine</font>

297
00:14:27,920 --> 00:14:32,329
<font color="#CCCCCC">uses the same beautiful address space at</font>

298
00:14:30,889 --> 00:14:37,040
the host camera which

299
00:14:32,329 --> 00:14:39,170
really simplifies things<font color="#CCCCCC"> there are other</font>

300
00:14:37,040 --> 00:14:41,990
<font color="#E5E5E5">problems you need to address how do you</font>

301
00:14:39,170 --> 00:14:43,579
call a function<font color="#E5E5E5"> inside a VM because when</font>

302
00:14:41,990 --> 00:14:46,670
you<font color="#E5E5E5"> just call an ef5 and time service</font>

303
00:14:43,579 --> 00:14:48,979
from the context of a camel<font color="#CCCCCC"> it's just</font>

304
00:14:46,670 --> 00:14:50,719
like a<font color="#CCCCCC"> C</font><font color="#E5E5E5"> function call you jump into the</font>

305
00:14:48,980 --> 00:14:54,110
address<font color="#E5E5E5"> with arguments in the registers</font>

306
00:14:50,720 --> 00:14:57,079
<font color="#E5E5E5">and then it jumps back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> rest</font><font color="#E5E5E5"> of</font>

307
00:14:54,110 --> 00:14:59,959
your code<font color="#E5E5E5"> but if you have a virtual CPU</font>

308
00:14:57,079 --> 00:15:02,359
<font color="#E5E5E5">you need to put manually the arguments</font>

309
00:14:59,959 --> 00:15:06,319
<font color="#E5E5E5">inside your registers</font><font color="#CCCCCC"> of the virtual CPU</font>

310
00:15:02,360 --> 00:15:08,689
<font color="#E5E5E5">and when it comes to the return you</font><font color="#CCCCCC"> can</font>

311
00:15:06,319 --> 00:15:11,389
just the virtual machine can just jump

312
00:15:08,689 --> 00:15:13,099
into<font color="#E5E5E5"> the code</font><font color="#CCCCCC"> of the kernel so there is</font>

313
00:15:11,389 --> 00:15:15,649
a wrapper<font color="#CCCCCC"> inside the virtual machine</font>

314
00:15:13,100 --> 00:15:18,019
that<font color="#E5E5E5"> runs a hyper call to tell the</font>

315
00:15:15,649 --> 00:15:21,499
<font color="#CCCCCC">camera</font><font color="#E5E5E5"> that's it</font><font color="#CCCCCC"> I'm done with DF</font><font color="#E5E5E5"> I went</font>

316
00:15:18,019 --> 00:15:23,869
<font color="#E5E5E5">I'm sorry's one more program</font><font color="#CCCCCC"> what</font>

317
00:15:21,499 --> 00:15:26,300
happens if there<font color="#CCCCCC"> is a fault inside the</font>

318
00:15:23,869 --> 00:15:28,519
virtual machine we<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to recover from</font>

319
00:15:26,300 --> 00:15:32,628
that<font color="#CCCCCC"> clearly so there is a fault handler</font>

320
00:15:28,519 --> 00:15:33,889
and if the if a problems<font color="#E5E5E5"> occur if a</font>

321
00:15:32,629 --> 00:15:36,889
problem occurs inside<font color="#CCCCCC"> the virtual</font>

322
00:15:33,889 --> 00:15:39,980
machine we have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> special hyper call for</font>

323
00:15:36,889 --> 00:15:47,059
that<font color="#E5E5E5"> and the efi drivers from the</font><font color="#CCCCCC"> linux</font>

324
00:15:39,980 --> 00:15:51,439
kernel can revert properly so this is

325
00:15:47,059 --> 00:15:54,529
<font color="#E5E5E5">starting</font><font color="#CCCCCC"> to be quite nice no</font><font color="#E5E5E5"> more system</font>

326
00:15:51,439 --> 00:15:57,618
<font color="#CCCCCC">register mess clean exception handling</font>

327
00:15:54,529 --> 00:16:00,019
as I was explaining<font color="#E5E5E5"> I was</font><font color="#CCCCCC"> able to make</font>

328
00:15:57,619 --> 00:16:04,160
<font color="#E5E5E5">it run on several devices</font><font color="#CCCCCC"> we all devices</font>

329
00:16:00,019 --> 00:16:07,279
<font color="#E5E5E5">like this</font><font color="#CCCCCC"> soft i1 overdrive 1000 and</font>

330
00:16:04,160 --> 00:16:13,969
also on model models<font color="#E5E5E5"> for instance the</font>

331
00:16:07,279 --> 00:16:16,069
<font color="#E5E5E5">mk23 model i got enough time to clean</font>

332
00:16:13,970 --> 00:16:17,569
the<font color="#CCCCCC"> codebase and send the</font><font color="#E5E5E5"> first request</font>

333
00:16:16,069 --> 00:16:19,610
for comment<font color="#E5E5E5"> to</font><font color="#CCCCCC"> g linux kernel mailing</font>

334
00:16:17,569 --> 00:16:24,920
list<font color="#E5E5E5"> and it has been reviewed</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> the</font>

335
00:16:19,610 --> 00:16:28,100
<font color="#E5E5E5">maintenance of KTM and</font><font color="#CCCCCC"> efi for arm so</font>

336
00:16:24,920 --> 00:16:31,610
it's<font color="#E5E5E5"> not merged yet because</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> don't have</font>

337
00:16:28,100 --> 00:16:34,399
<font color="#CCCCCC">the time to work</font><font color="#E5E5E5"> on this anymore since</font>

338
00:16:31,610 --> 00:16:36,439
my internship<font color="#E5E5E5"> but the idea of this</font>

339
00:16:34,399 --> 00:16:39,110
torque is<font color="#E5E5E5"> that if anyone in this room is</font>

340
00:16:36,439 --> 00:16:40,639
interested<font color="#E5E5E5"> in maybe doing the same thing</font>

341
00:16:39,110 --> 00:16:44,689
or doing the same thing<font color="#E5E5E5"> on a different</font>

342
00:16:40,639 --> 00:16:45,600
<font color="#CCCCCC">architecture or four different need for</font>

343
00:16:44,689 --> 00:16:48,269
instance I<font color="#E5E5E5"> was telling</font>

344
00:16:45,600 --> 00:16:51,480
you about some boxing<font color="#CCCCCC"> efim time service</font>

345
00:16:48,269 --> 00:16:54,810
but what if you want to what if you

346
00:16:51,480 --> 00:16:57,149
would want to<font color="#CCCCCC"> sandbox the IP stack of</font>

347
00:16:54,810 --> 00:16:59,279
index for instance<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that if there is a</font>

348
00:16:57,149 --> 00:17:01,230
problem in the IP stack it just affects

349
00:16:59,279 --> 00:17:04,650
the virtual machine<font color="#E5E5E5"> well there are lots</font>

350
00:17:01,230 --> 00:17:07,380
of possibilities with<font color="#E5E5E5"> this and if you</font>

351
00:17:04,650 --> 00:17:09,689
are<font color="#E5E5E5"> excited by this please take</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> look</font>

352
00:17:07,380 --> 00:17:13,289
at my<font color="#CCCCCC"> RC it's not that long not</font><font color="#E5E5E5"> that</font>

353
00:17:09,689 --> 00:17:16,799
complex<font color="#E5E5E5"> and I would love</font><font color="#CCCCCC"> to help you if</font>

354
00:17:13,289 --> 00:17:19,679
<font color="#CCCCCC">you</font><font color="#E5E5E5"> are interested</font><font color="#CCCCCC"> in it now for the</font>

355
00:17:16,799 --> 00:17:23,299
limitations<font color="#CCCCCC"> because obviously the world</font>

356
00:17:19,679 --> 00:17:27,620
isn't<font color="#E5E5E5"> that great</font><font color="#CCCCCC"> when it comes to if</font><font color="#E5E5E5"> I</font>

357
00:17:23,299 --> 00:17:31,500
so the idea was to<font color="#E5E5E5"> have two different</font>

358
00:17:27,619 --> 00:17:33,629
kernel space but on arm you<font color="#CCCCCC"> have</font>

359
00:17:31,500 --> 00:17:36,870
different privileges<font color="#E5E5E5"> on</font><font color="#CCCCCC"> um v8 at least</font>

360
00:17:33,630 --> 00:17:38,400
you have l0 for the user space<font color="#E5E5E5"> here one</font>

361
00:17:36,870 --> 00:17:41,580
for<font color="#E5E5E5"> the kernel space you have two for</font>

362
00:17:38,400 --> 00:17:44,100
the hypervisor<font color="#E5E5E5"> and then you have l3 for</font>

363
00:17:41,580 --> 00:17:49,260
the<font color="#E5E5E5"> second monitor the sexual monitor</font>

364
00:17:44,100 --> 00:17:52,799
and if from the kernel from<font color="#E5E5E5"> the Linux</font>

365
00:17:49,260 --> 00:17:57,000
kernel<font color="#E5E5E5"> you create a virtual</font><font color="#CCCCCC"> machine you</font>

366
00:17:52,799 --> 00:18:02,129
get<font color="#CCCCCC"> a</font><font color="#E5E5E5"> second year one level you can put</font>

367
00:17:57,000 --> 00:18:05,010
<font color="#E5E5E5">code inside it but this code</font><font color="#CCCCCC"> even if</font>

368
00:18:02,130 --> 00:18:07,530
it's controlled by<font color="#CCCCCC"> your Linux it can</font>

369
00:18:05,010 --> 00:18:10,200
call<font color="#CCCCCC"> a function from the secure monitor</font>

370
00:18:07,530 --> 00:18:12,270
and you have no<font color="#E5E5E5"> control over the secure</font>

371
00:18:10,200 --> 00:18:16,440
<font color="#E5E5E5">monitor from</font><font color="#CCCCCC"> you'll need</font><font color="#E5E5E5"> from unit Linux</font>

372
00:18:12,270 --> 00:18:19,740
kernel so one more way for for the

373
00:18:16,440 --> 00:18:23,700
<font color="#CCCCCC">firmware to screw you</font><font color="#E5E5E5"> that's what</font>

374
00:18:19,740 --> 00:18:26,130
happened<font color="#E5E5E5"> on the overdrive 1000 so the</font>

375
00:18:23,700 --> 00:18:30,690
solution I used so far is that I just

376
00:18:26,130 --> 00:18:34,020
<font color="#E5E5E5">wrote secure monitor calls from internal</font>

377
00:18:30,690 --> 00:18:36,360
virtual<font color="#E5E5E5"> machines but maybe a proper way</font>

378
00:18:34,020 --> 00:18:39,389
to do that would be to have a whitelist

379
00:18:36,360 --> 00:18:43,350
of<font color="#E5E5E5"> secure monitor call that we want to</font>

380
00:18:39,390 --> 00:18:47,370
emulate or<font color="#E5E5E5"> to forward</font><font color="#CCCCCC"> but it's starting</font>

381
00:18:43,350 --> 00:18:49,260
<font color="#CCCCCC">to be quite complex</font><font color="#E5E5E5"> and then one more</font>

382
00:18:47,370 --> 00:18:52,760
way for firmware to screw you because<font color="#CCCCCC"> I</font>

383
00:18:49,260 --> 00:18:55,919
<font color="#CCCCCC">found it</font><font color="#E5E5E5"> really amusing at least for me</font>

384
00:18:52,760 --> 00:18:58,320
<font color="#CCCCCC">a user reported on the internet that his</font>

385
00:18:55,919 --> 00:18:59,970
machine<font color="#E5E5E5"> would randomly crash</font>

386
00:18:58,320 --> 00:19:02,909
and<font color="#CCCCCC"> actually what happened</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that when</font>

387
00:18:59,970 --> 00:19:04,920
<font color="#E5E5E5">he called the</font><font color="#CCCCCC"> efi runtime services</font><font color="#E5E5E5"> they</font>

388
00:19:02,910 --> 00:19:07,890
would enable DMA transfer and then the

389
00:19:04,920 --> 00:19:09,750
device would write if<font color="#E5E5E5"> Annette frames at</font>

390
00:19:07,890 --> 00:19:14,300
random locations<font color="#E5E5E5"> inside the memory and</font>

391
00:19:09,750 --> 00:19:17,280
it will overwrite the<font color="#E5E5E5"> yoke</font><font color="#CCCCCC"> I know</font>

392
00:19:14,300 --> 00:19:19,889
obviously that's quite quite complex<font color="#E5E5E5"> to</font>

393
00:19:17,280 --> 00:19:24,149
debug<font color="#CCCCCC"> but when they</font><font color="#E5E5E5"> found out about this</font>

394
00:19:19,890 --> 00:19:26,130
<font color="#CCCCCC">well there's</font><font color="#E5E5E5"> nothing you can do and well</font>

395
00:19:24,150 --> 00:19:26,700
some boxing<font color="#E5E5E5"> efi when time services is</font>

396
00:19:26,130 --> 00:19:30,360
cool

397
00:19:26,700 --> 00:19:33,110
but if in the<font color="#E5E5E5"> your web space you map</font>

398
00:19:30,360 --> 00:19:37,550
them you<font color="#E5E5E5"> leave them access</font><font color="#CCCCCC"> to devices</font>

399
00:19:33,110 --> 00:19:43,110
they can configure them wrongly<font color="#E5E5E5"> and</font>

400
00:19:37,550 --> 00:19:45,210
still do things behind<font color="#E5E5E5"> your back so</font>

401
00:19:43,110 --> 00:19:46,320
that's it for me<font color="#CCCCCC"> just one last thing I</font>

402
00:19:45,210 --> 00:19:47,690
<font color="#E5E5E5">am searching for my next summer</font>

403
00:19:46,320 --> 00:19:50,070
internship<font color="#CCCCCC"> so if anyone is interested</font>

404
00:19:47,690 --> 00:19:52,860
<font color="#CCCCCC">get instructors get</font><font color="#E5E5E5"> in touch</font><font color="#CCCCCC"> with me</font><font color="#E5E5E5"> and</font>

405
00:19:50,070 --> 00:19:55,460
<font color="#E5E5E5">if you have questions feel free to reach</font>

406
00:19:52,860 --> 00:19:55,459
<font color="#E5E5E5">one yes</font>

407
00:20:02,940 --> 00:20:15,479
oh yeah probably<font color="#E5E5E5"> something I had</font><font color="#CCCCCC"> to say</font>

408
00:20:13,229 --> 00:20:18,629
is I only worked<font color="#E5E5E5"> or forearm for two</font>

409
00:20:15,479 --> 00:20:20,609
months<font color="#E5E5E5"> and I did that I only worked on</font>

410
00:20:18,629 --> 00:20:22,830
that so<font color="#E5E5E5"> I I'm not super</font><font color="#CCCCCC"> familiar with</font>

411
00:20:20,609 --> 00:20:56,489
everything<font color="#E5E5E5"> and probably iommu will fix</font>

412
00:20:22,830 --> 00:20:58,830
that<font color="#CCCCCC"> I didn't</font><font color="#E5E5E5"> work on the DMA thing yeah</font>

413
00:20:56,489 --> 00:21:01,409
but the<font color="#CCCCCC"> efi runtime</font><font color="#E5E5E5"> services do need</font>

414
00:20:58,830 --> 00:21:04,590
access<font color="#E5E5E5"> to devices to some extent and you</font>

415
00:21:01,409 --> 00:21:10,019
get this information<font color="#E5E5E5"> of what addresses</font>

416
00:21:04,590 --> 00:21:12,149
they need from efi itself<font color="#E5E5E5"> so maybe you</font>

417
00:21:10,019 --> 00:21:15,179
<font color="#E5E5E5">don't know what you need to allow and</font>

418
00:21:12,149 --> 00:21:17,478
not allow it's a complex<font color="#E5E5E5"> story complex</font>

419
00:21:15,179 --> 00:21:17,479
problem

420
00:21:24,980 --> 00:21:33,570
well you have<font color="#CCCCCC"> oh yes so the question</font><font color="#E5E5E5"> the</font>

421
00:21:31,200 --> 00:21:38,940
<font color="#CCCCCC">first question was does</font><font color="#E5E5E5"> iommu solve the</font>

422
00:21:33,570 --> 00:21:41,010
problem of DMA transfers that<font color="#E5E5E5"> I lighted</font>

423
00:21:38,940 --> 00:21:43,590
in the my last<font color="#CCCCCC"> slide and this question</font>

424
00:21:41,010 --> 00:21:47,220
<font color="#E5E5E5">is what does</font><font color="#CCCCCC"> f5 and time services what</font>

425
00:21:43,590 --> 00:21:51,030
do if I want<font color="#E5E5E5"> them services do</font><font color="#CCCCCC"> so mainly</font>

426
00:21:47,220 --> 00:21:54,630
<font color="#E5E5E5">the use cases I found were EFI variables</font>

427
00:21:51,030 --> 00:21:56,190
which is used by<font color="#CCCCCC"> a CPI</font><font color="#E5E5E5"> if I</font><font color="#CCCCCC"> from again</font>

428
00:21:54,630 --> 00:21:58,530
I'm not an expert<font color="#E5E5E5"> about a CPI will I</font>

429
00:21:56,190 --> 00:22:00,270
believe<font color="#E5E5E5"> it's used there's someone from</font>

430
00:21:58,530 --> 00:22:01,230
<font color="#E5E5E5">over there that can probably answer the</font>

431
00:22:00,270 --> 00:22:05,970
question without<font color="#E5E5E5"> me</font>

432
00:22:01,230 --> 00:22:07,860
and and the cool feature I found is

433
00:22:05,970 --> 00:22:12,960
<font color="#E5E5E5">real-time clock you get an easy</font><font color="#CCCCCC"> access</font>

434
00:22:07,860 --> 00:22:15,090
to a<font color="#CCCCCC"> real-time clock</font><font color="#E5E5E5"> there are other</font>

435
00:22:12,960 --> 00:22:19,890
functions<font color="#CCCCCC"> Ian there's not a lot of</font>

436
00:22:15,090 --> 00:22:22,918
<font color="#E5E5E5">functions</font><font color="#CCCCCC"> but they are used</font><font color="#E5E5E5"> to select</font>

437
00:22:19,890 --> 00:22:31,770
you<font color="#E5E5E5"> can easily adapt you can have two</font>

438
00:22:22,919 --> 00:22:36,929
different<font color="#E5E5E5"> machines ef5 and time services</font>

439
00:22:31,770 --> 00:22:38,220
is also<font color="#E5E5E5"> used on x86 and</font><font color="#CCCCCC"> well I</font><font color="#E5E5E5"> I haven't</font>

440
00:22:36,929 --> 00:22:44,240
<font color="#CCCCCC">worked</font><font color="#E5E5E5"> on those machines but I assume</font>

441
00:22:38,220 --> 00:22:44,240
the<font color="#E5E5E5"> problems are probably the same yes</font>

442
00:22:45,490 --> 00:22:55,840
oh yeah I didn't benchmark the results

443
00:22:52,450 --> 00:22:59,649
of my work<font color="#CCCCCC"> so I assume</font><font color="#E5E5E5"> it's a bit slower</font>

444
00:22:55,840 --> 00:23:00,789
it's not called super often so<font color="#E5E5E5"> that</font>

445
00:22:59,649 --> 00:23:04,209
shouldn't<font color="#E5E5E5"> be</font><font color="#CCCCCC"> that bad</font>

446
00:23:00,789 --> 00:23:05,830
I<font color="#E5E5E5"> assume yeah one</font><font color="#CCCCCC"> thing I didn't mention</font>

447
00:23:04,210 --> 00:23:08,679
is the<font color="#CCCCCC"> D virtual machine doesn't</font>

448
00:23:05,830 --> 00:23:12,399
<font color="#E5E5E5">constantly run it only runs when you</font>

449
00:23:08,679 --> 00:23:16,330
call an<font color="#CCCCCC"> ef5 and time service</font><font color="#E5E5E5"> the rest of</font>

450
00:23:12,399 --> 00:23:25,178
the time<font color="#E5E5E5"> is just idle so it shouldn't</font>

451
00:23:16,330 --> 00:23:31,779
<font color="#E5E5E5">have a big</font><font color="#CCCCCC"> impact I assume from the</font>

452
00:23:25,179 --> 00:23:33,789
<font color="#CCCCCC">kernel we was it from</font><font color="#E5E5E5"> the kernel we map</font>

453
00:23:31,779 --> 00:23:36,669
<font color="#E5E5E5">the Old West</font><font color="#CCCCCC"> space that the virtual</font>

454
00:23:33,789 --> 00:23:38,470
<font color="#CCCCCC">machine needs and we when we call a</font>

455
00:23:36,669 --> 00:23:40,390
function we could<font color="#E5E5E5"> ye arguments in the</font>

456
00:23:38,470 --> 00:23:42,130
registers and also if you need to pass a

457
00:23:40,390 --> 00:23:43,659
buffer<font color="#E5E5E5"> you need to copy the buffer</font>

458
00:23:42,130 --> 00:23:46,659
inside the memory of the virtual machine

459
00:23:43,659 --> 00:23:50,700
and then put in<font color="#CCCCCC"> the register a pointer</font>

460
00:23:46,659 --> 00:24:05,370
to the<font color="#CCCCCC"> US relative to the to the virtual</font>

461
00:23:50,700 --> 00:24:05,370
<font color="#E5E5E5">machine yeah</font>

462
00:24:46,900 --> 00:24:50,140
which happens<font color="#E5E5E5"> from user space because</font>

463
00:24:48,730 --> 00:24:51,880
<font color="#CCCCCC">assists costly</font><font color="#E5E5E5"> can't sleep</font>

464
00:24:50,140 --> 00:24:53,680
so<font color="#CCCCCC"> all of these these things</font><font color="#E5E5E5"> basically</font>

465
00:24:51,880 --> 00:24:56,950
always<font color="#E5E5E5"> only get calls from user</font><font color="#CCCCCC"> space</font>

466
00:24:53,680 --> 00:24:58,690
which means<font color="#CCCCCC"> they're sleeping or whether</font>

467
00:24:56,950 --> 00:25:04,090
they also get called in the variable

468
00:24:58,690 --> 00:25:06,370
driver<font color="#E5E5E5"> goals during a correlation well</font>

469
00:25:04,090 --> 00:25:08,470
during<font color="#E5E5E5"> in it you can you just got</font>

470
00:25:06,370 --> 00:25:10,449
initialized from<font color="#E5E5E5"> nearby you need by just</font>

471
00:25:08,470 --> 00:25:14,200
ran<font color="#E5E5E5"> so you can</font><font color="#CCCCCC"> run</font><font color="#E5E5E5"> just trusted you</font><font color="#CCCCCC"> in</font>

472
00:25:10,450 --> 00:25:15,640
<font color="#CCCCCC">beds for time span right it's like</font><font color="#E5E5E5"> two</font>

473
00:25:14,200 --> 00:25:19,840
seconds<font color="#E5E5E5"> after you were just running</font>

474
00:25:15,640 --> 00:25:21,880
exactly<font color="#E5E5E5"> the same naturally he's right</font>

475
00:25:19,840 --> 00:25:24,330
during the<font color="#E5E5E5"> boot process some drivers and</font>

476
00:25:21,880 --> 00:25:26,920
some subsystem need access to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> EFI</font>

477
00:25:24,330 --> 00:25:28,720
payables<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's not from the user</font>

478
00:25:26,920 --> 00:25:30,100
space context at all and it's very<font color="#E5E5E5"> early</font>

479
00:25:28,720 --> 00:25:32,980
<font color="#E5E5E5">in the boot and if you don't have those</font>

480
00:25:30,100 --> 00:25:53,639
access to<font color="#E5E5E5"> those variables you lock</font>

481
00:25:32,980 --> 00:25:53,640
features does that answer the question

482
00:25:56,790 --> 00:26:01,090
<font color="#E5E5E5">KVM</font><font color="#CCCCCC"> is traditionally I</font><font color="#E5E5E5"> would say a</font>

483
00:25:59,380 --> 00:26:04,450
feature that<font color="#E5E5E5"> is being used in the</font>

484
00:26:01,090 --> 00:26:06,129
<font color="#E5E5E5">enterprise</font><font color="#CCCCCC"> not for scalability is a</font>

485
00:26:04,450 --> 00:26:09,700
concern so<font color="#E5E5E5"> it look to me as you've</font>

486
00:26:06,130 --> 00:26:12,910
created like an internal kernel API that

487
00:26:09,700 --> 00:26:16,120
would facilitate to create these sort of

488
00:26:12,910 --> 00:26:18,580
internal<font color="#CCCCCC"> VMS also beyond</font><font color="#E5E5E5"> efi services</font>

489
00:26:16,120 --> 00:26:20,860
that would mean<font color="#CCCCCC"> that</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> each driver</font>

490
00:26:18,580 --> 00:26:23,280
that<font color="#CCCCCC"> uses this</font><font color="#E5E5E5"> the amount of user space</font>

491
00:26:20,860 --> 00:26:25,780
at the<font color="#E5E5E5"> end</font>

492
00:26:23,280 --> 00:26:27,639
<font color="#E5E5E5">okay so the question</font><font color="#CCCCCC"> is if we spawn</font>

493
00:26:25,780 --> 00:26:29,530
<font color="#E5E5E5">virtual machines from the</font><font color="#CCCCCC"> Kino</font><font color="#E5E5E5"> does it</font>

494
00:26:27,640 --> 00:26:32,320
reduce the<font color="#E5E5E5"> number of additional</font><font color="#CCCCCC"> machine</font>

495
00:26:29,530 --> 00:26:34,930
we when we can run from the<font color="#CCCCCC"> user</font><font color="#E5E5E5"> space</font>

496
00:26:32,320 --> 00:26:37,929
yes<font color="#E5E5E5"> but as far</font><font color="#CCCCCC"> as I remember the</font><font color="#E5E5E5"> limit</font>

497
00:26:34,930 --> 00:26:41,440
<font color="#CCCCCC">is like 256 virtual machines you can run</font>

498
00:26:37,930 --> 00:26:42,970
with<font color="#CCCCCC"> KVM and I believe I mean I'm not in</font>

499
00:26:41,440 --> 00:26:44,800
<font color="#CCCCCC">an enterprise context</font><font color="#E5E5E5"> but I believe</font><font color="#CCCCCC"> that</font>

500
00:26:42,970 --> 00:26:48,160
if you only can<font color="#E5E5E5"> learn if you can only</font>

501
00:26:44,800 --> 00:27:00,210
run<font color="#E5E5E5"> 255 virtual machines</font><font color="#CCCCCC"> you should be</font>

502
00:26:48,160 --> 00:27:00,210
<font color="#CCCCCC">ok I don't know I just</font>

503
00:27:02,700 --> 00:27:08,740
oh yeah<font color="#CCCCCC"> quite well yeah we shouldn't</font><font color="#E5E5E5"> use</font>

504
00:27:07,060 --> 00:27:10,360
that<font color="#E5E5E5"> for every everything obviously</font><font color="#CCCCCC"> but</font>

505
00:27:08,740 --> 00:27:15,700
<font color="#CCCCCC">just for critical Potts I don't</font><font color="#E5E5E5"> think</font>

506
00:27:10,360 --> 00:27:22,679
there are<font color="#E5E5E5"> that many</font><font color="#CCCCCC"> sub system that uses</font>

507
00:27:15,700 --> 00:27:22,680
<font color="#CCCCCC">something like that</font><font color="#E5E5E5"> so one more question</font>

508
00:27:24,210 --> 00:27:30,460
now just one virtual machine at the boot

509
00:27:27,280 --> 00:27:41,200
<font color="#E5E5E5">time and then I always call functions in</font>

510
00:27:30,460 --> 00:27:42,820
this<font color="#E5E5E5"> virtual machine there is</font><font color="#CCCCCC"> a very</font>

511
00:27:41,200 --> 00:27:45,340
good<font color="#E5E5E5"> question so</font><font color="#CCCCCC"> the question is how do</font>

512
00:27:42,820 --> 00:27:46,899
we know what we should map to<font color="#E5E5E5"> the</font>

513
00:27:45,340 --> 00:27:48,840
virtual machine<font color="#CCCCCC"> so that if I went them</font>

514
00:27:46,900 --> 00:27:52,960
services have access to the<font color="#E5E5E5"> hardware and</font>

515
00:27:48,840 --> 00:27:55,449
thankfully the<font color="#E5E5E5"> EFI stand out gives you a</font>

516
00:27:52,960 --> 00:27:58,570
mapping they tell you<font color="#CCCCCC"> I need</font><font color="#E5E5E5"> that range</font>

517
00:27:55,450 --> 00:28:02,170
<font color="#E5E5E5">of memory as a device</font><font color="#CCCCCC"> with right access</font>

518
00:27:58,570 --> 00:28:06,490
with exact access and I just go through

519
00:28:02,170 --> 00:28:08,860
<font color="#E5E5E5">this structure and adapt the the page</font>

520
00:28:06,490 --> 00:28:11,800
tables of<font color="#E5E5E5"> the virtual machines</font><font color="#CCCCCC"> virtual</font>

521
00:28:08,860 --> 00:28:19,750
machine according<font color="#CCCCCC"> to the n fo the infos</font>

522
00:28:11,800 --> 00:28:21,840
<font color="#E5E5E5">that</font><font color="#CCCCCC"> EFI gives me anything else I think</font>

523
00:28:19,750 --> 00:28:22,190
<font color="#CCCCCC">I'm done</font><font color="#E5E5E5"> thank</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> much</font>

524
00:28:21,840 --> 00:28:27,179
you

525
00:28:22,190 --> 00:28:27,180
[Applause]

