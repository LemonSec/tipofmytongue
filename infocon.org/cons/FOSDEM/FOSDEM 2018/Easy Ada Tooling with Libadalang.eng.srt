1
00:00:04,720 --> 00:00:11,200
hello<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> family da da da</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is</font>

2
00:00:09,010 --> 00:00:13,330
<font color="#CCCCCC">Rafa</font><font color="#E5E5E5"> Lamia we are both software</font>

3
00:00:11,200 --> 00:00:16,570
engineers at a decor<font color="#E5E5E5"> and today we will</font>

4
00:00:13,330 --> 00:00:18,880
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about labayda long</font><font color="#E5E5E5"> so yeah we have</font>

5
00:00:16,570 --> 00:00:23,080
lit very little time to<font color="#CCCCCC"> explain</font><font color="#E5E5E5"> to you</font>

6
00:00:18,880 --> 00:00:27,130
so<font color="#CCCCCC"> we'll let's go so first of</font><font color="#E5E5E5"> all what</font>

7
00:00:23,080 --> 00:00:30,490
is<font color="#E5E5E5"> debate along exactly well in just</font>

8
00:00:27,130 --> 00:00:32,920
three bullet points labelled<font color="#E5E5E5"> along is</font>

9
00:00:30,490 --> 00:00:36,430
the library<font color="#E5E5E5"> and we wanted</font><font color="#CCCCCC"> to allow</font>

10
00:00:32,920 --> 00:00:38,440
people<font color="#E5E5E5"> to get insight about</font><font color="#CCCCCC"> beta source</font>

11
00:00:36,430 --> 00:00:41,289
code and also<font color="#E5E5E5"> to</font><font color="#CCCCCC"> modify it</font>

12
00:00:38,440 --> 00:00:44,968
for this we want<font color="#CCCCCC"> to offer both high and</font>

13
00:00:41,289 --> 00:00:47,350
low<font color="#E5E5E5"> level API so by llola very</font><font color="#CCCCCC"> mean some</font>

14
00:00:44,969 --> 00:00:50,199
small details like<font color="#E5E5E5"> okay what is the</font>

15
00:00:47,350 --> 00:00:52,600
location of<font color="#E5E5E5"> this token what is the token</font>

16
00:00:50,199 --> 00:00:55,358
<font color="#CCCCCC">under this location</font><font color="#E5E5E5"> things like this and</font>

17
00:00:52,600 --> 00:00:57,159
<font color="#E5E5E5">also we're highly</font><font color="#CCCCCC"> valley PI such as ok</font>

18
00:00:55,359 --> 00:00:59,949
what's the type of this expression<font color="#CCCCCC"> or</font>

19
00:00:57,159 --> 00:01:05,979
can you please rename this type and all

20
00:00:59,949 --> 00:01:09,640
use<font color="#E5E5E5"> occurrences of this type</font><font color="#CCCCCC"> libanon we</font>

21
00:01:05,979 --> 00:01:11,679
<font color="#E5E5E5">also</font><font color="#CCCCCC"> want it to</font><font color="#E5E5E5"> be very versatile so we</font>

22
00:01:09,640 --> 00:01:15,610
want<font color="#E5E5E5"> it to be usable from any language</font>

23
00:01:11,680 --> 00:01:20,410
technology<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> this so</font><font color="#CCCCCC"> the Batarang</font>

24
00:01:15,610 --> 00:01:23,830
is an<font color="#E5E5E5"> Ida library it also offers a C API</font>

25
00:01:20,410 --> 00:01:27,310
<font color="#E5E5E5">and on top of</font><font color="#CCCCCC"> the C API well</font><font color="#E5E5E5"> can talk to</font>

26
00:01:23,830 --> 00:01:30,700
<font color="#CCCCCC">it basically</font><font color="#E5E5E5"> every everything so we ship</font>

27
00:01:27,310 --> 00:01:35,230
with<font color="#E5E5E5"> Abed along</font><font color="#CCCCCC"> a Python wrapper so that</font>

28
00:01:30,700 --> 00:01:38,290
you can use whole the whole<font color="#CCCCCC"> Nebadon on</font>

29
00:01:35,230 --> 00:01:40,420
library<font color="#E5E5E5"> from Python so this offers an</font>

30
00:01:38,290 --> 00:01:43,630
interesting<font color="#E5E5E5"> feature which is you can</font>

31
00:01:40,420 --> 00:01:45,760
basically you have a really short path

32
00:01:43,630 --> 00:01:47,560
between<font color="#E5E5E5"> having an idea</font><font color="#CCCCCC"> and watching</font><font color="#E5E5E5"> your</font>

33
00:01:45,760 --> 00:01:50,830
tool because you<font color="#E5E5E5"> can do a quick</font>

34
00:01:47,560 --> 00:01:54,400
prototype in<font color="#E5E5E5"> Python and this is great</font><font color="#CCCCCC"> so</font>

35
00:01:50,830 --> 00:01:57,550
yeah one important<font color="#E5E5E5"> point so liberty'</font>

36
00:01:54,400 --> 00:01:59,860
long is<font color="#E5E5E5"> an ADA library we are</font><font color="#CCCCCC"> going to</font>

37
00:01:57,550 --> 00:02:01,539
present<font color="#E5E5E5"> you some examples that will be</font>

38
00:01:59,860 --> 00:02:04,270
written<font color="#E5E5E5"> in Python because it fits in</font>

39
00:02:01,540 --> 00:02:06,780
slides but everything you will see<font color="#CCCCCC"> in</font>

40
00:02:04,270 --> 00:02:10,269
Python<font color="#CCCCCC"> can</font><font color="#E5E5E5"> be done in later</font><font color="#CCCCCC"> of course</font>

41
00:02:06,780 --> 00:02:11,450
let's<font color="#E5E5E5"> go so let's have a well first of</font>

42
00:02:10,269 --> 00:02:14,690
<font color="#E5E5E5">all</font>

43
00:02:11,450 --> 00:02:17,450
let's see why why we need<font color="#E5E5E5"> Lebanon in the</font>

44
00:02:14,690 --> 00:02:22,959
<font color="#E5E5E5">first place so this is a screenshot from</font>

45
00:02:17,450 --> 00:02:26,390
GPS the<font color="#CCCCCC"> worldwide known editor of either</font>

46
00:02:22,959 --> 00:02:30,380
GPS needs to know where the block starts

47
00:02:26,390 --> 00:02:32,839
<font color="#E5E5E5">and</font><font color="#CCCCCC"> ends</font><font color="#E5E5E5"> so here you can see that in it</font>

48
00:02:30,380 --> 00:02:34,280
knows it seems that<font color="#E5E5E5"> in a type</font>

49
00:02:32,840 --> 00:02:36,590
declaration<font color="#CCCCCC"> that starts here</font><font color="#E5E5E5"> and ends</font>

50
00:02:34,280 --> 00:02:38,239
here<font color="#CCCCCC"> you get you get to do some passing</font>

51
00:02:36,590 --> 00:02:42,349
to understand that so Lebanon will

52
00:02:38,239 --> 00:02:47,330
provide<font color="#E5E5E5"> that it also will</font><font color="#CCCCCC"> provide</font><font color="#E5E5E5"> well</font>

53
00:02:42,349 --> 00:02:49,339
in in intelligent cut<font color="#CCCCCC"> editors</font><font color="#E5E5E5"> sometimes</font>

54
00:02:47,330 --> 00:02:51,170
you want to<font color="#E5E5E5"> click on an identifier and</font>

55
00:02:49,340 --> 00:02:52,940
you expect the editor to lead you to<font color="#CCCCCC"> the</font>

56
00:02:51,170 --> 00:02:56,660
<font color="#E5E5E5">definition corresponding to this end of</font>

57
00:02:52,940 --> 00:02:58,910
<font color="#E5E5E5">identifier so this is often called name</font>

58
00:02:56,660 --> 00:03:02,480
resolution<font color="#E5E5E5"> or cross references we want</font>

59
00:02:58,910 --> 00:03:05,150
to<font color="#CCCCCC"> offer that to make</font><font color="#E5E5E5"> it easy for idea</font>

60
00:03:02,480 --> 00:03:10,910
<font color="#E5E5E5">is to rename a function</font><font color="#CCCCCC"> find stance or</font>

61
00:03:05,150 --> 00:03:15,049
do transformations<font color="#E5E5E5"> like this and also so</font>

62
00:03:10,910 --> 00:03:17,329
here you have a<font color="#CCCCCC"> subprogram and we want</font>

63
00:03:15,049 --> 00:03:20,959
to make it easy to to write for people

64
00:03:17,329 --> 00:03:23,750
<font color="#E5E5E5">and for like everyone to write custom</font>

65
00:03:20,959 --> 00:03:26,120
tools that will for<font color="#CCCCCC"> instance at as</font>

66
00:03:23,750 --> 00:03:29,829
<font color="#CCCCCC">interest</font><font color="#E5E5E5"> so detect variables that are</font>

67
00:03:26,120 --> 00:03:31,160
fully cased this doesn't match but

68
00:03:29,829 --> 00:03:33,620
doesn't<font color="#E5E5E5"> matter</font>

69
00:03:31,160 --> 00:03:36,350
so<font color="#E5E5E5"> here are variables names if you have</font>

70
00:03:33,620 --> 00:03:38,450
a rule like<font color="#E5E5E5"> this variable names</font><font color="#CCCCCC"> should</font>

71
00:03:36,350 --> 00:03:40,880
start with<font color="#E5E5E5"> and should be capitalized</font>

72
00:03:38,450 --> 00:03:43,640
<font color="#E5E5E5">well you can</font><font color="#CCCCCC"> easily write a checker to</font>

73
00:03:40,880 --> 00:03:46,600
do that we want that to make<font color="#CCCCCC"> it we want</font>

74
00:03:43,640 --> 00:03:46,600
that to be easy with<font color="#CCCCCC"> later</font>

75
00:03:46,670 --> 00:03:51,859
at this point<font color="#E5E5E5"> you may if you know enough</font>

76
00:03:48,709 --> 00:03:55,129
<font color="#E5E5E5">the ADA ecosystem you might ask</font><font color="#CCCCCC"> okay</font>

77
00:03:51,860 --> 00:03:59,750
<font color="#CCCCCC">what not use it</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> ASIS</font><font color="#E5E5E5"> it does</font>

78
00:03:55,129 --> 00:04:02,480
precisely<font color="#E5E5E5"> that well</font><font color="#CCCCCC"> in Lebanon we have</font>

79
00:03:59,750 --> 00:04:05,379
because we want<font color="#CCCCCC"> to serve as the building</font>

80
00:04:02,480 --> 00:04:09,768
<font color="#E5E5E5">block for tooling including editors</font>

81
00:04:05,379 --> 00:04:13,819
<font color="#E5E5E5">there are some several mismatches</font><font color="#CCCCCC"> the</font>

82
00:04:09,769 --> 00:04:17,750
first one is we want<font color="#CCCCCC"> to be incremental</font>

83
00:04:13,819 --> 00:04:20,510
<font color="#CCCCCC">which is you</font><font color="#E5E5E5"> open your</font><font color="#CCCCCC"> project okay you</font>

84
00:04:17,750 --> 00:04:22,610
you<font color="#E5E5E5"> flip it down and that is the project</font>

85
00:04:20,510 --> 00:04:27,139
<font color="#CCCCCC">and you perform a very minor</font>

86
00:04:22,610 --> 00:04:28,910
modification you don't want the<font color="#E5E5E5"> GPS for</font>

87
00:04:27,139 --> 00:04:31,970
instance to freeze for<font color="#E5E5E5"> seconds or</font>

88
00:04:28,910 --> 00:04:33,410
minutes because<font color="#E5E5E5"> it computes recomputes</font>

89
00:04:31,970 --> 00:04:36,320
everything that depends<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font>

90
00:04:33,410 --> 00:04:38,330
modification you made so when something

91
00:04:36,320 --> 00:04:41,090
<font color="#E5E5E5">changes we want to do to perform in</font>

92
00:04:38,330 --> 00:04:43,370
America computation most of the time

93
00:04:41,090 --> 00:04:45,580
when you're<font color="#E5E5E5"> writing code your code is</font>

94
00:04:43,370 --> 00:04:47,960
incorrect<font color="#E5E5E5"> because you're writing it and</font>

95
00:04:45,580 --> 00:04:51,229
we so<font color="#CCCCCC"> be monthly but along to be as</font>

96
00:04:47,960 --> 00:04:54,250
helpful as<font color="#CCCCCC"> well</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> helpful as possible</font>

97
00:04:51,229 --> 00:04:58,460
<font color="#CCCCCC">when you're when</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> cut is</font><font color="#E5E5E5"> incorrect</font>

98
00:04:54,250 --> 00:05:00,800
and also something<font color="#E5E5E5"> very important we</font>

99
00:04:58,460 --> 00:05:03,888
want<font color="#E5E5E5"> you leave</font><font color="#CCCCCC"> it alone</font><font color="#E5E5E5"> to be somehow</font>

100
00:05:00,800 --> 00:05:06,050
<font color="#E5E5E5">bonded in the resources it</font><font color="#CCCCCC"> uses so we</font>

101
00:05:03,889 --> 00:05:08,300
don't want the bedroom<font color="#CCCCCC"> to crash</font><font color="#E5E5E5"> your</font>

102
00:05:06,050 --> 00:05:10,070
program<font color="#E5E5E5"> after three days of running</font>

103
00:05:08,300 --> 00:05:16,010
process because it's exhausted all

104
00:05:10,070 --> 00:05:18,800
virtual memory<font color="#E5E5E5"> so</font><font color="#CCCCCC"> ASIS and in</font><font color="#E5E5E5"> particular</font>

105
00:05:16,010 --> 00:05:20,979
nuts implementation of<font color="#CCCCCC"> aces</font><font color="#E5E5E5"> well the way</font>

106
00:05:18,800 --> 00:05:23,510
they were implemented with some

107
00:05:20,979 --> 00:05:26,330
objectives in mind<font color="#E5E5E5"> here we have a</font>

108
00:05:23,510 --> 00:05:29,240
<font color="#E5E5E5">different we have needs that kind of</font>

109
00:05:26,330 --> 00:05:31,669
contradict them so<font color="#CCCCCC"> goodnight and Isis</font>

110
00:05:29,240 --> 00:05:35,930
are not our police treated<font color="#E5E5E5"> for for what</font>

111
00:05:31,669 --> 00:05:39,139
we need<font color="#E5E5E5"> so we decided to do yet another</font>

112
00:05:35,930 --> 00:05:41,240
library<font color="#CCCCCC"> yes</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I just want to make one</font>

113
00:05:39,139 --> 00:05:44,060
<font color="#CCCCCC">thing clear here there is no problem</font>

114
00:05:41,240 --> 00:05:46,280
<font color="#CCCCCC">actually with the implementation of aces</font>

115
00:05:44,060 --> 00:05:48,349
sorry with<font color="#E5E5E5"> the specification of aces for</font>

116
00:05:46,280 --> 00:05:50,719
those needs<font color="#E5E5E5"> the problem is more with the</font>

117
00:05:48,349 --> 00:05:53,090
<font color="#CCCCCC">implementation that is based on net</font><font color="#E5E5E5"> so</font>

118
00:05:50,720 --> 00:05:56,169
the net is a compiler and<font color="#CCCCCC"> it was done to</font>

119
00:05:53,090 --> 00:05:58,849
<font color="#E5E5E5">do all</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> work in one pass so basically</font>

120
00:05:56,169 --> 00:06:01,448
it's not<font color="#E5E5E5"> adapted to be in</font>

121
00:05:58,849 --> 00:06:03,830
<font color="#CCCCCC">serrated edges and hence this</font>

122
00:06:01,449 --> 00:06:06,139
<font color="#CCCCCC">implementation that we provide is not</font>

123
00:06:03,830 --> 00:06:08,929
that that<font color="#CCCCCC"> kid either but we found other</font>

124
00:06:06,139 --> 00:06:10,879
problems with<font color="#CCCCCC"> edges at the</font><font color="#E5E5E5"> API level and</font>

125
00:06:08,929 --> 00:06:12,138
we wanted<font color="#CCCCCC"> to take a shot at</font><font color="#E5E5E5"> doing</font>

126
00:06:10,879 --> 00:06:15,529
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that is</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> user friendly</font>

127
00:06:12,139 --> 00:06:19,669
<font color="#E5E5E5">anyway so this is why we created later</font>

128
00:06:15,529 --> 00:06:20,599
on thank you for those<font color="#CCCCCC"> decisions okay so</font>

129
00:06:19,669 --> 00:06:23,628
what

130
00:06:20,599 --> 00:06:26,929
as of today what does using<font color="#E5E5E5"> Li better</font>

131
00:06:23,629 --> 00:06:29,659
long look like well<font color="#E5E5E5"> first let's start</font>

132
00:06:26,929 --> 00:06:32,929
<font color="#E5E5E5">with</font><font color="#CCCCCC"> the basic level of languages</font><font color="#E5E5E5"> tokens</font>

133
00:06:29,659 --> 00:06:35,300
you can<font color="#E5E5E5"> only buy the wrong</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> to pass it</font>

134
00:06:32,929 --> 00:06:37,039
a file to put to<font color="#CCCCCC"> basket to pass a file</font>

135
00:06:35,300 --> 00:06:40,159
<font color="#E5E5E5">and then to ask for the list of tokens</font>

136
00:06:37,039 --> 00:06:42,349
<font color="#CCCCCC">that</font><font color="#E5E5E5"> came from this side</font><font color="#CCCCCC"> so here we have</font>

137
00:06:40,159 --> 00:06:45,679
a native program<font color="#CCCCCC"> a really simple</font><font color="#E5E5E5"> one and</font>

138
00:06:42,349 --> 00:06:49,969
<font color="#E5E5E5">this is a simple usage of the API so in</font>

139
00:06:45,679 --> 00:06:52,938
Python<font color="#E5E5E5"> you create a context to to host</font>

140
00:06:49,969 --> 00:06:55,869
your computations<font color="#CCCCCC"> you ask it</font><font color="#E5E5E5"> to load a</font>

141
00:06:52,939 --> 00:06:58,849
source file<font color="#CCCCCC"> and then so</font><font color="#E5E5E5"> you take your</font>

142
00:06:55,869 --> 00:07:00,800
analysis unit<font color="#E5E5E5"> and you take the root node</font>

143
00:06:58,849 --> 00:07:03,229
<font color="#CCCCCC">of it and you</font><font color="#E5E5E5"> ask</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the list of tokens</font>

144
00:07:00,800 --> 00:07:05,269
corresponding to this footnote<font color="#E5E5E5"> and you</font>

145
00:07:03,229 --> 00:07:08,329
<font color="#CCCCCC">print them all of them so this is the</font>

146
00:07:05,269 --> 00:07:11,749
results so well asking<font color="#E5E5E5"> for the token</font>

147
00:07:08,329 --> 00:07:14,719
stream is quite easy next let's go to

148
00:07:11,749 --> 00:07:17,360
the syntactic level<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is a more</font>

149
00:07:14,719 --> 00:07:19,279
complex<font color="#CCCCCC"> ADA</font><font color="#E5E5E5"> program well you can ask</font>

150
00:07:17,360 --> 00:07:21,529
here<font color="#E5E5E5"> too</font><font color="#CCCCCC"> so you take the root node of</font>

151
00:07:19,279 --> 00:07:25,308
your analyzation<font color="#E5E5E5"> it and here you ask</font>

152
00:07:21,529 --> 00:07:27,949
<font color="#CCCCCC">okay find all nodes that comply to this</font>

153
00:07:25,309 --> 00:07:31,029
predicate<font color="#E5E5E5"> so this is a type so find all</font>

154
00:07:27,949 --> 00:07:33,979
nodes that are objective<font color="#E5E5E5"> declarations</font>

155
00:07:31,029 --> 00:07:36,558
<font color="#CCCCCC">print</font><font color="#E5E5E5"> this look well</font><font color="#CCCCCC"> Seuss location</font>

156
00:07:33,979 --> 00:07:38,419
arranges and<font color="#E5E5E5"> there are text and so this</font>

157
00:07:36,559 --> 00:07:43,279
is the<font color="#E5E5E5"> results so against something</font>

158
00:07:38,419 --> 00:07:46,520
<font color="#E5E5E5">useful</font><font color="#CCCCCC"> so yeah performing this</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of</font>

159
00:07:43,279 --> 00:07:51,199
<font color="#E5E5E5">curry is useful for</font><font color="#CCCCCC"> instance for linters</font>

160
00:07:46,520 --> 00:07:54,198
and<font color="#E5E5E5"> next level and this is getting more</font>

161
00:07:51,199 --> 00:07:56,539
<font color="#CCCCCC">and more interesting</font><font color="#E5E5E5"> so this is yet</font>

162
00:07:54,199 --> 00:07:59,240
<font color="#E5E5E5">another other program where we defined</font>

163
00:07:56,539 --> 00:08:01,699
<font color="#E5E5E5">two double functions that are overloads</font>

164
00:07:59,240 --> 00:08:04,250
<font color="#CCCCCC">so they called the net the same they</font>

165
00:08:01,699 --> 00:08:05,990
only differ by<font color="#CCCCCC"> their</font><font color="#E5E5E5"> signature so one of</font>

166
00:08:04,250 --> 00:08:08,240
<font color="#E5E5E5">them takes an integer returns an integer</font>

167
00:08:05,990 --> 00:08:11,330
the second one<font color="#E5E5E5"> takes a float and returns</font>

168
00:08:08,240 --> 00:08:13,729
a float<font color="#E5E5E5"> and there is a call to one</font><font color="#CCCCCC"> of</font>

169
00:08:11,330 --> 00:08:17,180
these double functions<font color="#E5E5E5"> so in the</font>

170
00:08:13,729 --> 00:08:19,460
better-known<font color="#CCCCCC"> okay we are</font><font color="#E5E5E5"> so I didn't</font>

171
00:08:17,180 --> 00:08:22,370
repeat it there<font color="#E5E5E5"> there but we have asked</font>

172
00:08:19,460 --> 00:08:25,190
to pass this<font color="#CCCCCC"> analysis unit then here we</font>

173
00:08:22,370 --> 00:08:28,159
call return to get the double<font color="#E5E5E5"> call so we</font>

174
00:08:25,190 --> 00:08:31,039
find all call expressions that<font color="#CCCCCC"> who's</font>

175
00:08:28,159 --> 00:08:35,539
<font color="#CCCCCC">who's called function is named double</font>

176
00:08:31,039 --> 00:08:37,848
and<font color="#CCCCCC"> okay so here we</font><font color="#E5E5E5"> have so this call is</font>

177
00:08:35,539 --> 00:08:40,250
present here<font color="#E5E5E5"> and then all we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to do</font>

178
00:08:37,849 --> 00:08:42,940
in the bedroom<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get what double</font>

179
00:08:40,250 --> 00:08:46,190
function<font color="#CCCCCC"> is called</font><font color="#E5E5E5"> is to get the name so</font>

180
00:08:42,940 --> 00:08:48,410
the call is actually<font color="#E5E5E5"> gets also the</font>

181
00:08:46,190 --> 00:08:50,990
arguments and if you get the name you

182
00:08:48,410 --> 00:08:53,569
only have this and you<font color="#E5E5E5"> asked for the</font>

183
00:08:50,990 --> 00:08:56,000
<font color="#E5E5E5">reference declaration and you print it</font>

184
00:08:53,570 --> 00:08:58,250
and the bed along<font color="#E5E5E5"> select as we are</font>

185
00:08:56,000 --> 00:09:00,290
calling double with an integer<font color="#E5E5E5"> the first</font>

186
00:08:58,250 --> 00:09:04,270
of a load is chosen and<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> battering</font>

187
00:09:00,290 --> 00:09:07,599
<font color="#E5E5E5">finds which is the one that is called</font>

188
00:09:04,270 --> 00:09:12,329
this<font color="#E5E5E5"> is good</font>

189
00:09:07,600 --> 00:09:12,330
<font color="#CCCCCC">okay yes sorry</font>

190
00:09:12,749 --> 00:09:23,720
previous yes the second night<font color="#CCCCCC"> of office</font>

191
00:09:18,680 --> 00:09:28,219
there's only one line syntactically<font color="#E5E5E5"> no</font>

192
00:09:23,720 --> 00:09:30,620
this is in the<font color="#E5E5E5"> ADA grammar there is this</font>

193
00:09:28,220 --> 00:09:40,100
is a single object<font color="#CCCCCC"> declaration</font><font color="#E5E5E5"> that</font>

194
00:09:30,620 --> 00:09:42,620
<font color="#CCCCCC">declares two objects so that's an</font>

195
00:09:40,100 --> 00:09:46,270
interesting<font color="#CCCCCC"> point in</font><font color="#E5E5E5"> the grammar syntax</font>

196
00:09:42,620 --> 00:09:50,060
<font color="#CCCCCC">Ikki you have one object declaration</font>

197
00:09:46,270 --> 00:09:52,010
<font color="#E5E5E5">node but indeed semantically you have</font>

198
00:09:50,060 --> 00:09:55,280
two so since the<font color="#E5E5E5"> beta Long's</font>

199
00:09:52,010 --> 00:09:58,130
prime goal is to make analyzers<font color="#CCCCCC"> and</font><font color="#E5E5E5"> to</font>

200
00:09:55,280 --> 00:09:59,689
that act on syntax<font color="#E5E5E5"> we want to keep</font><font color="#CCCCCC"> as</font>

201
00:09:58,130 --> 00:10:01,550
<font color="#E5E5E5">close as</font><font color="#CCCCCC"> possible to the syntactic</font>

202
00:09:59,690 --> 00:10:04,010
representation which<font color="#CCCCCC"> is why you only</font>

203
00:10:01,550 --> 00:10:06,349
have one node<font color="#CCCCCC"> we don't modify</font><font color="#E5E5E5"> the tree</font>

204
00:10:04,010 --> 00:10:08,270
after parsing or stuff like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> which</font>

205
00:10:06,350 --> 00:10:10,010
<font color="#E5E5E5">is another thing that</font><font color="#CCCCCC"> is difficult with</font>

206
00:10:08,270 --> 00:10:11,930
<font color="#CCCCCC">Bennett</font><font color="#E5E5E5"> and Isis because they are</font>

207
00:10:10,010 --> 00:10:13,730
<font color="#CCCCCC">compilers</font><font color="#E5E5E5"> I want to</font><font color="#CCCCCC"> omit code so they</font>

208
00:10:11,930 --> 00:10:15,290
might get rid of<font color="#E5E5E5"> that representation</font>

209
00:10:13,730 --> 00:10:18,040
very early on<font color="#E5E5E5"> and then you don't have</font>

210
00:10:15,290 --> 00:10:18,040
<font color="#CCCCCC">access to it anymore</font>

211
00:10:20,260 --> 00:10:26,000
so for the moment<font color="#CCCCCC"> reference declaration</font>

212
00:10:23,780 --> 00:10:32,780
<font color="#CCCCCC">we</font><font color="#E5E5E5"> just give you the whole reference</font>

213
00:10:26,000 --> 00:10:34,490
declaration so what we plan to<font color="#E5E5E5"> do is</font><font color="#CCCCCC"> to</font>

214
00:10:32,780 --> 00:10:37,339
have<font color="#E5E5E5"> an API</font><font color="#CCCCCC"> that will</font><font color="#E5E5E5"> also give you the</font>

215
00:10:34,490 --> 00:10:41,090
precise<font color="#CCCCCC"> identifiers that you are</font><font color="#E5E5E5"> looking</font>

216
00:10:37,340 --> 00:10:54,140
for but that is not done yet<font color="#E5E5E5"> but it's</font>

217
00:10:41,090 --> 00:10:58,540
not too difficult to<font color="#E5E5E5"> do</font><font color="#CCCCCC"> know okay</font><font color="#E5E5E5"> now so</font>

218
00:10:54,140 --> 00:11:01,160
this<font color="#E5E5E5"> is being worked as we speak</font><font color="#CCCCCC"> almost</font>

219
00:10:58,540 --> 00:11:03,439
<font color="#CCCCCC">so we want also to provide a feature</font>

220
00:11:01,160 --> 00:11:07,339
<font color="#CCCCCC">that enables users to</font><font color="#E5E5E5"> actually modify</font>

221
00:11:03,440 --> 00:11:10,700
<font color="#E5E5E5">the source code</font><font color="#CCCCCC"> so here we have on</font><font color="#E5E5E5"> the</font>

222
00:11:07,340 --> 00:11:13,160
top of the side<font color="#CCCCCC"> an</font><font color="#E5E5E5"> ADA program</font><font color="#CCCCCC"> and then</font>

223
00:11:10,700 --> 00:11:15,680
here<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the use of the API we</font>

224
00:11:13,160 --> 00:11:21,110
intend to to facilitate<font color="#CCCCCC"> whistle</font><font color="#E5E5E5"> battlin</font>

225
00:11:15,680 --> 00:11:23,420
<font color="#E5E5E5">so yeah so first of all you</font><font color="#CCCCCC"> are so</font>

226
00:11:21,110 --> 00:11:25,760
<font color="#E5E5E5">imagine</font><font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to turn this into this</font>

227
00:11:23,420 --> 00:11:28,010
<font color="#E5E5E5">so all we have to do is to take the call</font>

228
00:11:25,760 --> 00:11:30,650
put to put line and to<font color="#E5E5E5"> modify the input</font>

229
00:11:28,010 --> 00:11:32,930
<font color="#E5E5E5">argument so first of all we find the</font>

230
00:11:30,650 --> 00:11:36,530
node transporting to the<font color="#CCCCCC"> call then we</font>

231
00:11:32,930 --> 00:11:38,449
start rewriting session because while

232
00:11:36,530 --> 00:11:43,939
we're rewriting things we want<font color="#E5E5E5"> to keep</font>

233
00:11:38,450 --> 00:11:47,290
the<font color="#CCCCCC"> old thing available for</font><font color="#E5E5E5"> perform</font><font color="#CCCCCC"> to</font>

234
00:11:43,940 --> 00:11:51,470
help you doing the<font color="#CCCCCC"> refactoring and then</font>

235
00:11:47,290 --> 00:11:54,469
so what you do here<font color="#CCCCCC"> is to take</font><font color="#E5E5E5"> to take a</font>

236
00:11:51,470 --> 00:11:57,470
kind<font color="#E5E5E5"> of rewriting handle to the to the</font>

237
00:11:54,470 --> 00:12:00,440
parameter<font color="#E5E5E5"> here</font><font color="#CCCCCC"> and then what you do here</font>

238
00:11:57,470 --> 00:12:02,810
<font color="#E5E5E5">is to say</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> let's rewrite this</font>

239
00:12:00,440 --> 00:12:06,140
parameter and we write<font color="#E5E5E5"> it using a string</font>

240
00:12:02,810 --> 00:12:10,099
<font color="#E5E5E5">literal</font><font color="#CCCCCC"> this one then you</font><font color="#E5E5E5"> apply so</font><font color="#CCCCCC"> that</font>

241
00:12:06,140 --> 00:12:12,230
replaces<font color="#E5E5E5"> the old and the old source code</font>

242
00:12:10,100 --> 00:12:14,120
with the new one and then<font color="#E5E5E5"> you're</font>

243
00:12:12,230 --> 00:12:18,430
<font color="#CCCCCC">supposed to</font><font color="#E5E5E5"> get this so we want to</font>

244
00:12:14,120 --> 00:12:18,430
provide that<font color="#E5E5E5"> and work in progress</font>

245
00:12:21,259 --> 00:12:40,679
yes sorry<font color="#CCCCCC"> edits and</font><font color="#E5E5E5"> part of bootstrap a</font>

246
00:12:38,309 --> 00:12:43,170
built at work and we have<font color="#E5E5E5"> problems with</font>

247
00:12:40,679 --> 00:12:48,029
other<font color="#E5E5E5"> okay because other is implemented</font>

248
00:12:43,170 --> 00:12:51,449
in other and you have and I wanted<font color="#E5E5E5"> to</font>

249
00:12:48,029 --> 00:13:00,029
<font color="#E5E5E5">ask is it</font><font color="#CCCCCC"> possible to use this to</font>

250
00:12:51,449 --> 00:13:12,800
transpiling<font color="#E5E5E5"> to see little bit of topic</font>

251
00:13:00,029 --> 00:13:16,350
but yeah let's discuss<font color="#CCCCCC"> that</font><font color="#E5E5E5"> after so</font>

252
00:13:12,800 --> 00:13:17,998
this actually this<font color="#E5E5E5"> this example is</font>

253
00:13:16,350 --> 00:13:20,490
incorrect because final returns<font color="#E5E5E5"> you</font><font color="#CCCCCC"> a</font>

254
00:13:17,999 --> 00:13:23,730
list<font color="#E5E5E5"> so here we would supposed to be to</font>

255
00:13:20,490 --> 00:13:26,850
extract which which found element<font color="#E5E5E5"> would</font>

256
00:13:23,730 --> 00:13:29,399
<font color="#CCCCCC">be we would have to work on so in this</font>

257
00:13:26,850 --> 00:13:32,129
example<font color="#CCCCCC"> if there were multiple calls to</font>

258
00:13:29,399 --> 00:13:34,110
<font color="#E5E5E5">put line we would have several several</font>

259
00:13:32,129 --> 00:13:37,350
<font color="#E5E5E5">results and we will have to pick which</font>

260
00:13:34,110 --> 00:13:40,050
<font color="#CCCCCC">one we would we would</font><font color="#E5E5E5"> want to</font><font color="#CCCCCC"> rewrite</font><font color="#E5E5E5"> so</font>

261
00:13:37,350 --> 00:13:42,240
if I if I can be a bit<font color="#E5E5E5"> more precise the</font>

262
00:13:40,050 --> 00:13:44,670
way you are finding<font color="#E5E5E5"> the node is not by</font>

263
00:13:42,240 --> 00:13:47,639
searching<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the text but you have the</font>

264
00:13:44,670 --> 00:13:49,349
<font color="#E5E5E5">option to search for precise context for</font>

265
00:13:47,639 --> 00:13:51,779
<font color="#CCCCCC">example you can say I want the first</font>

266
00:13:49,350 --> 00:13:53,819
<font color="#CCCCCC">call or</font><font color="#E5E5E5"> I want the call to this function</font>

267
00:13:51,779 --> 00:13:55,709
<font color="#E5E5E5">even if you have another function</font><font color="#CCCCCC"> but</font>

268
00:13:53,819 --> 00:13:58,019
the same string literal so you have a

269
00:13:55,709 --> 00:14:00,569
lot of granularity<font color="#E5E5E5"> because you are doing</font>

270
00:13:58,019 --> 00:14:03,120
a<font color="#E5E5E5"> query on</font><font color="#CCCCCC"> the tree</font><font color="#E5E5E5"> and not on the text</font>

271
00:14:00,569 --> 00:14:04,498
itself<font color="#E5E5E5"> so here we say we want the first</font>

272
00:14:03,120 --> 00:14:06,809
cut<font color="#E5E5E5"> expression but you could say</font>

273
00:14:04,499 --> 00:14:11,129
<font color="#E5E5E5">something else and get the note that you</font>

274
00:14:06,809 --> 00:14:15,740
want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> rewrite very precisely</font><font color="#E5E5E5"> okay I'm</font>

275
00:14:11,129 --> 00:14:18,679
afraid<font color="#E5E5E5"> we'll get out of time</font><font color="#CCCCCC"> okay so</font>

276
00:14:15,740 --> 00:14:22,499
this is an example so if you remember<font color="#CCCCCC"> I</font>

277
00:14:18,679 --> 00:14:25,049
in the previous slides<font color="#CCCCCC"> I talked about</font><font color="#E5E5E5"> a</font>

278
00:14:22,499 --> 00:14:27,389
linter that will check your variable

279
00:14:25,049 --> 00:14:29,730
<font color="#CCCCCC">names identifier this is one</font><font color="#E5E5E5"> possible</font>

280
00:14:27,389 --> 00:14:31,090
implementation of it so it's the<font color="#CCCCCC"> whole</font>

281
00:14:29,730 --> 00:14:33,400
<font color="#E5E5E5">script</font>

282
00:14:31,090 --> 00:14:36,130
we just<font color="#CCCCCC"> iterate through its given high</font>

283
00:14:33,400 --> 00:14:38,949
name<font color="#E5E5E5"> we pass it and then we check for</font>

284
00:14:36,130 --> 00:14:40,810
passing<font color="#CCCCCC"> arrows and if everything is okay</font>

285
00:14:38,950 --> 00:14:43,960
<font color="#E5E5E5">you just look</font><font color="#CCCCCC"> for all object</font>

286
00:14:40,810 --> 00:14:45,310
declarations and all identifiers<font color="#E5E5E5"> inside</font>

287
00:14:43,960 --> 00:14:47,620
<font color="#E5E5E5">object equations because they can be</font>

288
00:14:45,310 --> 00:14:49,900
multiple<font color="#E5E5E5"> anyway and we check the</font>

289
00:14:47,620 --> 00:14:51,970
<font color="#CCCCCC">identifiers and if it's not capitalized</font>

290
00:14:49,900 --> 00:14:53,620
we want about<font color="#CCCCCC"> it</font><font color="#E5E5E5"> so it's really simple</font>

291
00:14:51,970 --> 00:14:57,340
<font color="#E5E5E5">we want it to be really simple to write</font>

292
00:14:53,620 --> 00:15:01,540
this<font color="#E5E5E5"> kind of tool</font><font color="#CCCCCC"> and now I will let</font>

293
00:14:57,340 --> 00:15:04,440
<font color="#CCCCCC">Rafael talk about more usage example of</font>

294
00:15:01,540 --> 00:15:04,439
the library

295
00:15:11,709 --> 00:15:18,109
<font color="#E5E5E5">okay I guess it's good so camera showed</font>

296
00:15:15,980 --> 00:15:19,399
you a bit<font color="#CCCCCC"> of how it's supposed to work</font>

297
00:15:18,110 --> 00:15:21,230
<font color="#E5E5E5">and how you use it</font>

298
00:15:19,399 --> 00:15:23,600
I'm going to show<font color="#E5E5E5"> you what we did with</font>

299
00:15:21,230 --> 00:15:28,790
<font color="#CCCCCC">it</font><font color="#E5E5E5"> so far and what we will be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to do</font>

300
00:15:23,600 --> 00:15:30,800
with it<font color="#CCCCCC"> in the in the</font><font color="#E5E5E5"> future so I didn't</font>

301
00:15:28,790 --> 00:15:33,019
get<font color="#E5E5E5"> that I will I was going to start</font>

302
00:15:30,800 --> 00:15:39,920
with<font color="#CCCCCC"> the demo so a little demo to start</font>

303
00:15:33,019 --> 00:15:42,470
with so yeah I'm<font color="#E5E5E5"> going to find it</font><font color="#CCCCCC"> don't</font>

304
00:15:39,920 --> 00:15:44,300
worry<font color="#CCCCCC"> so so far we showed only Python</font>

305
00:15:42,470 --> 00:15:46,339
<font color="#E5E5E5">code so you might</font><font color="#CCCCCC"> be like</font><font color="#E5E5E5"> okay so a</font>

306
00:15:44,300 --> 00:15:48,680
<font color="#CCCCCC">decor guys that do only</font><font color="#E5E5E5"> Python so the</font>

307
00:15:46,339 --> 00:15:50,930
example I'm<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> show</font><font color="#CCCCCC"> is done in</font>

308
00:15:48,680 --> 00:15:57,109
<font color="#CCCCCC">Aida okay so we don't</font><font color="#E5E5E5"> do any Python we</font>

309
00:15:50,930 --> 00:16:00,620
also do it so what it is is a syntax

310
00:15:57,110 --> 00:16:03,050
highlighter<font color="#E5E5E5"> slash code browser so it's</font>

311
00:16:00,620 --> 00:16:05,660
basically a very<font color="#E5E5E5"> small</font><font color="#CCCCCC"> subset of the</font>

312
00:16:03,050 --> 00:16:07,310
functionalities that<font color="#E5E5E5"> you want in an IDE</font>

313
00:16:05,660 --> 00:16:08,810
<font color="#E5E5E5">okay so you just</font>

314
00:16:07,310 --> 00:16:11,239
it's a<font color="#CCCCCC"> common lie tools that you</font><font color="#E5E5E5"> launch</font>

315
00:16:08,810 --> 00:16:13,790
on your<font color="#E5E5E5"> project here it's a</font><font color="#CCCCCC"> signature</font>

316
00:16:11,240 --> 00:16:17,570
<font color="#E5E5E5">project and it generates a hierarchy of</font>

317
00:16:13,790 --> 00:16:20,709
<font color="#E5E5E5">HTML pages and then if you click on one</font>

318
00:16:17,570 --> 00:16:20,709
<font color="#CCCCCC">of the links</font>

319
00:16:23,060 --> 00:16:29,489
<font color="#CCCCCC">all right so smoke</font><font color="#E5E5E5"> then you get</font>

320
00:16:26,040 --> 00:16:31,199
<font color="#E5E5E5">highlighted code</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so basically this</font>

321
00:16:29,490 --> 00:16:33,720
<font color="#E5E5E5">is done with the debate around API we</font>

322
00:16:31,200 --> 00:16:36,630
highlight tokens in certain fashion but

323
00:16:33,720 --> 00:16:38,310
we have the<font color="#E5E5E5"> three so we can do a bit</font>

324
00:16:36,630 --> 00:16:40,280
more syntactic highlighting so for

325
00:16:38,310 --> 00:16:43,829
example you<font color="#E5E5E5"> can see</font><font color="#CCCCCC"> that types are</font>

326
00:16:40,280 --> 00:16:46,500
highlighted correctly etc etc and<font color="#E5E5E5"> then</font>

327
00:16:43,830 --> 00:16:49,440
<font color="#E5E5E5">you have links to the cross-reference</font>

328
00:16:46,500 --> 00:16:52,710
<font color="#CCCCCC">these</font><font color="#E5E5E5"> two right</font><font color="#CCCCCC"> here and if you</font><font color="#E5E5E5"> click on</font>

329
00:16:49,440 --> 00:16:54,330
<font color="#E5E5E5">it it will</font><font color="#CCCCCC"> bring you even if you twisted</font>

330
00:16:52,710 --> 00:16:57,420
the<font color="#CCCCCC"> size which is</font><font color="#E5E5E5"> the back but it will</font>

331
00:16:54,330 --> 00:16:58,560
<font color="#E5E5E5">bring you to</font><font color="#CCCCCC"> the correct</font><font color="#E5E5E5"> source and to</font>

332
00:16:57,420 --> 00:17:00,300
the correct line with the line

333
00:16:58,560 --> 00:17:02,579
highlighted<font color="#CCCCCC"> so this is very simple</font>

334
00:17:00,300 --> 00:17:04,889
<font color="#CCCCCC">but it can still be practical if you</font>

335
00:17:02,580 --> 00:17:07,230
want to browse your<font color="#E5E5E5"> sources offline and</font>

336
00:17:04,890 --> 00:17:09,780
it<font color="#E5E5E5"> is shipped with you later on today</font><font color="#CCCCCC"> so</font>

337
00:17:07,230 --> 00:17:11,730
you can<font color="#CCCCCC"> already try it if you want</font><font color="#E5E5E5"> it's</font>

338
00:17:09,780 --> 00:17:21,649
in the country the directory<font color="#E5E5E5"> of debate</font>

339
00:17:11,730 --> 00:17:25,920
on my demo<font color="#E5E5E5"> went well I'm so happy</font><font color="#CCCCCC"> so</font>

340
00:17:21,650 --> 00:17:30,030
<font color="#CCCCCC">another thing</font><font color="#E5E5E5"> we did pass and again is</font><font color="#CCCCCC"> a</font>

341
00:17:25,920 --> 00:17:32,100
<font color="#CCCCCC">very small syntactic based</font><font color="#E5E5E5"> analyzers so</font>

342
00:17:30,030 --> 00:17:34,620
this was a<font color="#E5E5E5"> fun</font><font color="#CCCCCC"> project done by Yannick</font>

343
00:17:32,100 --> 00:17:37,379
<font color="#E5E5E5">who is not here now</font><font color="#CCCCCC"> but did</font><font color="#E5E5E5"> a</font>

344
00:17:34,620 --> 00:17:39,060
presentation on spark<font color="#E5E5E5"> so it was like we</font>

345
00:17:37,380 --> 00:17:41,940
do<font color="#E5E5E5"> it this really</font><font color="#CCCCCC"> complicated static</font>

346
00:17:39,060 --> 00:17:43,520
analysis based on spark and cut here<font color="#CCCCCC"> but</font>

347
00:17:41,940 --> 00:17:46,890
let's do<font color="#CCCCCC"> something really</font><font color="#E5E5E5"> simple and</font>

348
00:17:43,520 --> 00:17:50,090
this<font color="#E5E5E5"> checker is doing something very fun</font>

349
00:17:46,890 --> 00:17:52,650
<font color="#E5E5E5">it's looking for binary operators and</font>

350
00:17:50,090 --> 00:17:55,439
looking for<font color="#E5E5E5"> cases where the</font><font color="#CCCCCC"> left side</font>

351
00:17:52,650 --> 00:17:57,270
and the<font color="#CCCCCC"> right side are the same</font><font color="#E5E5E5"> and in</font>

352
00:17:55,440 --> 00:17:59,730
most<font color="#E5E5E5"> of the time it's an error</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> and</font>

353
00:17:57,270 --> 00:18:02,460
this<font color="#E5E5E5"> is the way you express it in with</font>

354
00:17:59,730 --> 00:18:05,400
<font color="#CCCCCC">debate</font><font color="#E5E5E5"> around so we look for every</font>

355
00:18:02,460 --> 00:18:07,500
binary operator<font color="#E5E5E5"> and if it's in the list</font>

356
00:18:05,400 --> 00:18:10,560
of interesting of the right house<font color="#CCCCCC"> so we</font>

357
00:18:07,500 --> 00:18:12,980
have multiplication<font color="#E5E5E5"> addition the</font>

358
00:18:10,560 --> 00:18:17,280
<font color="#E5E5E5">concatenation of the</font><font color="#CCCCCC"> writer etc etcetera</font>

359
00:18:12,980 --> 00:18:19,080
then<font color="#E5E5E5"> we check if syntactically</font><font color="#CCCCCC"> the left</font>

360
00:18:17,280 --> 00:18:22,770
side<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> right side</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> the same</font>

361
00:18:19,080 --> 00:18:25,470
tokens<font color="#E5E5E5"> and if they do</font><font color="#CCCCCC"> we print a warning</font>

362
00:18:22,770 --> 00:18:28,290
<font color="#E5E5E5">so what is really fun is the number of</font>

363
00:18:25,470 --> 00:18:30,420
<font color="#CCCCCC">problems we found with that</font><font color="#E5E5E5"> in our code</font>

364
00:18:28,290 --> 00:18:32,460
<font color="#CCCCCC">bases so basically you would assume</font>

365
00:18:30,420 --> 00:18:34,230
since<font color="#E5E5E5"> we</font><font color="#CCCCCC"> ran static analyzers and we</font>

366
00:18:32,460 --> 00:18:37,110
have big test<font color="#E5E5E5"> suite and everything</font>

367
00:18:34,230 --> 00:18:38,610
no this cannot happen it's<font color="#CCCCCC"> ADA</font><font color="#E5E5E5"> right</font>

368
00:18:37,110 --> 00:18:41,909
it's a<font color="#CCCCCC"> very safe language</font><font color="#E5E5E5"> and everything</font>

369
00:18:38,610 --> 00:18:43,830
<font color="#E5E5E5">but when we had a lot of bug in in our</font>

370
00:18:41,910 --> 00:18:45,960
codes<font color="#CCCCCC"> linked to that so it's really</font>

371
00:18:43,830 --> 00:18:48,419
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> it's also an example of the</font>

372
00:18:45,960 --> 00:18:51,270
power<font color="#E5E5E5"> you have at</font><font color="#CCCCCC"> your fingertips where</font>

373
00:18:48,420 --> 00:18:53,130
you have access<font color="#CCCCCC"> to the syntactic part of</font>

374
00:18:51,270 --> 00:18:54,720
the code so<font color="#E5E5E5"> you are not into the text</font>

375
00:18:53,130 --> 00:18:59,760
<font color="#CCCCCC">anymore</font><font color="#E5E5E5"> you can browse the tree and find</font>

376
00:18:54,720 --> 00:19:01,920
interesting<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> what we are working</font><font color="#E5E5E5"> on</font>

377
00:18:59,760 --> 00:19:05,220
right<font color="#CCCCCC"> now</font><font color="#E5E5E5"> based on e-bay the room</font><font color="#CCCCCC"> too is</font>

378
00:19:01,920 --> 00:19:08,340
<font color="#CCCCCC">a static analyzer are based on semantics</font>

379
00:19:05,220 --> 00:19:11,490
<font color="#E5E5E5">so it's not a full interprocedural</font>

380
00:19:08,340 --> 00:19:13,379
<font color="#E5E5E5">analyzer like for example code</font><font color="#CCCCCC"> fear</font><font color="#E5E5E5"> that</font>

381
00:19:11,490 --> 00:19:16,980
we have<font color="#E5E5E5"> some of you might know</font><font color="#CCCCCC"> about it</font>

382
00:19:13,380 --> 00:19:18,960
<font color="#CCCCCC">but it's less powerful less ambitious in</font>

383
00:19:16,980 --> 00:19:21,270
scope<font color="#E5E5E5"> it allows to you to do</font>

384
00:19:18,960 --> 00:19:24,480
interprocedural stuff<font color="#E5E5E5"> a little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> like</font>

385
00:19:21,270 --> 00:19:26,730
<font color="#E5E5E5">sarong static analyzer</font><font color="#CCCCCC"> so here for</font>

386
00:19:24,480 --> 00:19:30,890
example<font color="#E5E5E5"> we have a simple</font><font color="#CCCCCC"> example we</font>

387
00:19:26,730 --> 00:19:34,950
<font color="#E5E5E5">where we</font><font color="#CCCCCC"> have a file</font><font color="#E5E5E5"> and we open it and</font>

388
00:19:30,890 --> 00:19:37,410
<font color="#E5E5E5">I'm</font><font color="#CCCCCC"> going to take</font><font color="#E5E5E5"> that too and here we</font>

389
00:19:34,950 --> 00:19:38,760
get a line and we close it<font color="#E5E5E5"> every time in</font>

390
00:19:37,410 --> 00:19:41,520
the loop which is abuse llanera

391
00:19:38,760 --> 00:19:43,560
but when you write the code<font color="#E5E5E5"> you might do</font>

392
00:19:41,520 --> 00:19:45,600
this kind of error<font color="#CCCCCC"> so what we want to</font><font color="#E5E5E5"> do</font>

393
00:19:43,560 --> 00:19:47,639
is to be able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> warn you very early</font>

394
00:19:45,600 --> 00:19:49,439
when<font color="#E5E5E5"> you write this kind of API code and</font>

395
00:19:47,640 --> 00:19:51,300
say<font color="#E5E5E5"> Oh be careful</font>

396
00:19:49,440 --> 00:19:52,920
file might be<font color="#CCCCCC"> closed at this</font><font color="#E5E5E5"> point and</font>

397
00:19:51,300 --> 00:19:58,350
when you close it might already be

398
00:19:52,920 --> 00:20:00,300
<font color="#E5E5E5">closed and so we are using a simple form</font>

399
00:19:58,350 --> 00:20:02,610
of absurd<font color="#E5E5E5"> abstract interpretation to</font>

400
00:20:00,300 --> 00:20:05,280
make that and what's interesting is that

401
00:20:02,610 --> 00:20:08,250
users will be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> specify their own</font>

402
00:20:05,280 --> 00:20:10,920
checks for their own<font color="#E5E5E5"> API so if you have</font>

403
00:20:08,250 --> 00:20:12,750
an<font color="#E5E5E5"> API that has some simple invariants</font>

404
00:20:10,920 --> 00:20:14,970
like that that you want<font color="#E5E5E5"> to enforce you</font>

405
00:20:12,750 --> 00:20:16,980
can add<font color="#E5E5E5"> a simple checker for it</font><font color="#CCCCCC"> and it's</font>

406
00:20:14,970 --> 00:20:19,140
a work in<font color="#CCCCCC"> progress run by one</font><font color="#E5E5E5"> of our</font>

407
00:20:16,980 --> 00:20:22,610
interns at<font color="#CCCCCC"> Attica and</font><font color="#E5E5E5"> you can check the</font>

408
00:20:19,140 --> 00:20:22,610
progress on this<font color="#CCCCCC"> repository</font>

409
00:20:23,799 --> 00:20:29,749
and we<font color="#E5E5E5"> also did</font><font color="#CCCCCC"> copy/paste detector</font>

410
00:20:27,739 --> 00:20:31,399
<font color="#E5E5E5">because we</font><font color="#CCCCCC"> searched</font><font color="#E5E5E5"> it was fun given the</font>

411
00:20:29,749 --> 00:20:33,679
<font color="#E5E5E5">number of bugs we found with the static</font>

412
00:20:31,399 --> 00:20:36,258
analyzer<font color="#CCCCCC"> maybe we could</font><font color="#E5E5E5"> find like maybe</font>

413
00:20:33,679 --> 00:20:38,359
a whole project<font color="#E5E5E5"> duplicated at a</font><font color="#CCCCCC"> dakar</font><font color="#E5E5E5"> or</font>

414
00:20:36,259 --> 00:20:42,649
something like<font color="#E5E5E5"> that it didn't happen</font><font color="#CCCCCC"> but</font>

415
00:20:38,359 --> 00:20:45,379
we found<font color="#E5E5E5"> some copy-paste also an example</font>

416
00:20:42,649 --> 00:20:47,059
<font color="#CCCCCC">of the</font><font color="#E5E5E5"> API</font><font color="#CCCCCC"> of anybody</font><font color="#E5E5E5"> around and it's</font>

417
00:20:45,379 --> 00:20:48,978
very<font color="#CCCCCC"> lightweight</font><font color="#E5E5E5"> it's a few hundred</font>

418
00:20:47,059 --> 00:20:50,539
<font color="#E5E5E5">lines of code</font><font color="#CCCCCC"> and it's pretty efficient</font>

419
00:20:48,979 --> 00:20:53,449
<font color="#E5E5E5">so if you want to try to run it on your</font>

420
00:20:50,539 --> 00:20:56,299
<font color="#CCCCCC">ada code base you</font><font color="#E5E5E5"> can find it on our</font>

421
00:20:53,449 --> 00:21:00,559
blog here and in the config directory of

422
00:20:56,299 --> 00:21:03,979
debate<font color="#E5E5E5"> around so inside</font><font color="#CCCCCC"> of the car we</font>

423
00:21:00,559 --> 00:21:08,449
also use debate around<font color="#CCCCCC"> Forester not only</font>

424
00:21:03,979 --> 00:21:10,159
prototypes<font color="#E5E5E5"> so we are gonna we are in the</font>

425
00:21:08,449 --> 00:21:13,699
process of<font color="#E5E5E5"> changing the semantics engine</font>

426
00:21:10,159 --> 00:21:15,529
of GPS the main IDE<font color="#E5E5E5"> to use debate around</font>

427
00:21:13,699 --> 00:21:18,289
<font color="#E5E5E5">so it's a</font><font color="#CCCCCC"> work-in-progress it should</font>

428
00:21:15,529 --> 00:21:20,899
<font color="#CCCCCC">happen in the following</font><font color="#E5E5E5"> year</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> also</font>

429
00:21:18,289 --> 00:21:23,299
the new versions of kinetic<font color="#E5E5E5"> metric the</font>

430
00:21:20,899 --> 00:21:25,819
net stub and net<font color="#E5E5E5"> Tiki so again alpha</font><font color="#CCCCCC"> t</font>

431
00:21:23,299 --> 00:21:27,679
is a pretty printer it goes through<font color="#E5E5E5"> your</font>

432
00:21:25,819 --> 00:21:29,449
<font color="#CCCCCC">code</font><font color="#E5E5E5"> and pretty prints it the next</font><font color="#CCCCCC"> step</font>

433
00:21:27,679 --> 00:21:32,299
generates step for<font color="#E5E5E5"> your sub program</font>

434
00:21:29,449 --> 00:21:34,519
bodies and specs and<font color="#E5E5E5"> that metric give</font>

435
00:21:32,299 --> 00:21:36,139
you some metrics<font color="#E5E5E5"> about your code</font><font color="#CCCCCC"> and all</font>

436
00:21:34,519 --> 00:21:38,989
<font color="#E5E5E5">of those tools are based on ages for the</font>

437
00:21:36,139 --> 00:21:42,139
moment and are<font color="#E5E5E5"> being adapted to run on</font>

438
00:21:38,989 --> 00:21:44,359
top<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> bedroom and outside</font><font color="#CCCCCC"> of a</font><font color="#E5E5E5"> deco</font>

439
00:21:42,139 --> 00:21:47,329
we already have some people<font color="#CCCCCC"> using it</font>

440
00:21:44,359 --> 00:21:49,039
some guys are doing a instrumentation

441
00:21:47,329 --> 00:21:50,869
with it for coverage

442
00:21:49,039 --> 00:21:53,989
some people are doing<font color="#E5E5E5"> automated</font>

443
00:21:50,869 --> 00:21:56,089
refactoring to make code smaller<font color="#E5E5E5"> some</font>

444
00:21:53,989 --> 00:21:59,929
people are<font color="#E5E5E5"> making sanitizers and</font><font color="#CCCCCC"> this</font>

445
00:21:56,089 --> 00:22:02,539
allows us<font color="#CCCCCC"> to JSON</font><font color="#E5E5E5"> on top of it so this</font>

446
00:21:59,929 --> 00:22:06,190
<font color="#CCCCCC">is an example of the kind of stuff that</font>

447
00:22:02,539 --> 00:22:06,190
you can<font color="#E5E5E5"> do on</font><font color="#CCCCCC"> top of a</font><font color="#E5E5E5"> bed around</font>

448
00:22:07,010 --> 00:22:13,520
so in conclusion<font color="#CCCCCC"> if you want to check</font>

449
00:22:09,740 --> 00:22:17,630
<font color="#E5E5E5">out the data on it already or not you</font>

450
00:22:13,520 --> 00:22:20,389
can go on this<font color="#CCCCCC"> URL you can</font><font color="#E5E5E5"> try it and</font>

451
00:22:17,630 --> 00:22:21,860
open issues if you find problems<font color="#CCCCCC"> so API</font>

452
00:22:20,390 --> 00:22:24,140
<font color="#E5E5E5">is still a moving target and should we</font>

453
00:22:21,860 --> 00:22:27,620
<font color="#E5E5E5">really see that</font><font color="#CCCCCC"> as a real product but</font>

454
00:22:24,140 --> 00:22:30,110
it's very stable for some part<font color="#E5E5E5"> some</font>

455
00:22:27,620 --> 00:22:31,668
other are moving so it depends on what

456
00:22:30,110 --> 00:22:33,229
you do<font color="#E5E5E5"> is it I</font><font color="#CCCCCC"> guess</font>

457
00:22:31,669 --> 00:22:35,390
thank you<font color="#E5E5E5"> for listening and if</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have</font>

458
00:22:33,230 --> 00:22:38,110
any more questions<font color="#CCCCCC"> I have one or two add</font>

459
00:22:35,390 --> 00:22:42,110
rows<font color="#E5E5E5"> it's if you want to know how</font>

460
00:22:38,110 --> 00:22:45,409
<font color="#CCCCCC">Lebanon</font><font color="#E5E5E5"> was implemented beside this we</font>

461
00:22:42,110 --> 00:22:47,780
<font color="#E5E5E5">doing a presentation that's what 1:00</font>

462
00:22:45,410 --> 00:22:47,990
1:00 p.m. tomorrow<font color="#CCCCCC"> I think it's</font><font color="#E5E5E5"> 2 p.m. 2</font>

463
00:22:47,780 --> 00:22:49,760
p.m.

464
00:22:47,990 --> 00:22:51,440
anyway check out for the<font color="#CCCCCC"> linkage</font>

465
00:22:49,760 --> 00:22:54,950
presentation in the source code analysis

466
00:22:51,440 --> 00:23:04,510
<font color="#E5E5E5">live room</font><font color="#CCCCCC"> yes</font><font color="#E5E5E5"> thank you thank you</font><font color="#CCCCCC"> very</font>

467
00:22:54,950 --> 00:23:04,510
much questions yes

468
00:23:06,950 --> 00:23:15,300
so the question is does<font color="#CCCCCC"> it mean that</font><font color="#E5E5E5"> we</font>

469
00:23:10,710 --> 00:23:17,400
<font color="#CCCCCC">will give give up support for</font><font color="#E5E5E5"> Isis so we</font>

470
00:23:15,300 --> 00:23:19,580
are not going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> release new versions of</font>

471
00:23:17,400 --> 00:23:22,140
<font color="#E5E5E5">Asus so it's basically</font><font color="#CCCCCC"> baselined</font>

472
00:23:19,580 --> 00:23:24,600
<font color="#CCCCCC">we are we will continue providing</font>

473
00:23:22,140 --> 00:23:28,260
support for<font color="#E5E5E5"> the current</font><font color="#CCCCCC"> version of Asus</font>

474
00:23:24,600 --> 00:23:35,459
for entertainment<font color="#E5E5E5"> undetermined time for</font>

475
00:23:28,260 --> 00:23:39,600
the<font color="#E5E5E5"> moment but don't worry we won't see</font>

476
00:23:35,460 --> 00:23:46,980
Jean Pierre hanging it's not part of our

477
00:23:39,600 --> 00:23:49,889
<font color="#CCCCCC">plans yes and we don't want to do that</font>

478
00:23:46,980 --> 00:23:52,410
so obviously as as long<font color="#CCCCCC"> as we have some</font>

479
00:23:49,890 --> 00:23:56,910
requests<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> de</font><font color="#CCCCCC"> se</font><font color="#E5E5E5"> support we will</font>

480
00:23:52,410 --> 00:23:58,650
support<font color="#E5E5E5"> Asus we internally there even</font>

481
00:23:56,910 --> 00:24:01,200
been<font color="#E5E5E5"> some discussions like oh we could</font>

482
00:23:58,650 --> 00:24:05,450
<font color="#E5E5E5">rewrite the current</font><font color="#CCCCCC"> Asus based on</font><font color="#E5E5E5"> the</font>

483
00:24:01,200 --> 00:24:07,590
beta<font color="#E5E5E5"> on so just</font><font color="#CCCCCC"> to give you</font><font color="#E5E5E5"> an</font>

484
00:24:05,450 --> 00:24:08,130
impression<font color="#E5E5E5"> of the kind of discussions</font>

485
00:24:07,590 --> 00:24:10,350
<font color="#CCCCCC">that happen</font>

486
00:24:08,130 --> 00:24:14,600
we we would prefer<font color="#CCCCCC"> not to do that</font>

487
00:24:10,350 --> 00:24:14,600
<font color="#CCCCCC">honestly but if we have to</font>

488
00:24:18,060 --> 00:24:23,919
<font color="#E5E5E5">ends in customer pressure</font>

489
00:24:20,340 --> 00:24:23,919
[Laughter]

490
00:24:24,490 --> 00:25:06,120
oh yeah<font color="#CCCCCC"> so you had to</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> which is</font>

491
00:25:09,180 --> 00:25:29,320
<font color="#CCCCCC">which I think there is</font><font color="#E5E5E5"> one really big</font>

492
00:25:27,460 --> 00:25:31,390
<font color="#CCCCCC">thing that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> missing in</font><font color="#E5E5E5"> Nevada now is</font>

493
00:25:29,320 --> 00:25:34,240
the<font color="#E5E5E5"> implementation of execution</font>

494
00:25:31,390 --> 00:25:36,310
semantics<font color="#CCCCCC"> I mean the knowledge knowledge</font>

495
00:25:34,240 --> 00:25:39,700
<font color="#E5E5E5">is not there for for now at least</font>

496
00:25:36,310 --> 00:25:41,500
so there's still<font color="#CCCCCC"> a</font><font color="#E5E5E5"> huge work to do from</font>

497
00:25:39,700 --> 00:25:43,210
starting<font color="#E5E5E5"> family but</font><font color="#CCCCCC"> alone in order to</font>

498
00:25:41,500 --> 00:25:45,580
create basically<font color="#E5E5E5"> an interpreter or</font>

499
00:25:43,210 --> 00:25:47,860
compiler on top of it it's not really

500
00:25:45,580 --> 00:25:51,460
<font color="#E5E5E5">the job to</font><font color="#CCCCCC"> translate to another language</font>

501
00:25:47,860 --> 00:25:55,000
<font color="#E5E5E5">for now so basically you have a small</font>

502
00:25:51,460 --> 00:25:56,710
part of the<font color="#CCCCCC"> front-end you have the</font><font color="#E5E5E5"> cross</font>

503
00:25:55,000 --> 00:25:58,420
references if you really need the

504
00:25:56,710 --> 00:26:00,430
legality checks you can use net on top

505
00:25:58,420 --> 00:26:02,320
of<font color="#CCCCCC"> ebay they're on but then you still</font>

506
00:26:00,430 --> 00:26:13,750
<font color="#CCCCCC">have</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of stuff to do if you want</font><font color="#E5E5E5"> to</font>

507
00:26:02,320 --> 00:26:19,169
compile your<font color="#CCCCCC"> code actually</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> it's C and</font>

508
00:26:13,750 --> 00:26:19,170
produces a full later runtime

509
00:26:20,500 --> 00:27:07,970
but I think<font color="#CCCCCC"> the line of</font><font color="#E5E5E5"> because can you</font>

510
00:27:05,809 --> 00:27:09,740
<font color="#CCCCCC">parse it was that the question okay so</font>

511
00:27:07,970 --> 00:27:11,780
the question<font color="#CCCCCC"> was can it pass rate that</font>

512
00:27:09,740 --> 00:27:14,000
compiler<font color="#E5E5E5"> sucks good</font><font color="#CCCCCC"> and the answer is</font>

513
00:27:11,780 --> 00:27:22,960
yes<font color="#CCCCCC"> you can pass any</font><font color="#E5E5E5"> source code that we</font>

514
00:27:14,000 --> 00:27:26,000
could find the parser doesn't fail on

515
00:27:22,960 --> 00:27:28,670
anything<font color="#E5E5E5"> that we could find the semantic</font>

516
00:27:26,000 --> 00:27:31,309
analyzer<font color="#CCCCCC"> name resolution</font><font color="#E5E5E5"> still fails on</font>

517
00:27:28,670 --> 00:27:33,380
some stuff but it's getting really<font color="#E5E5E5"> small</font>

518
00:27:31,309 --> 00:27:36,040
and that's<font color="#E5E5E5"> all we have for</font><font color="#CCCCCC"> the moment</font>

519
00:27:33,380 --> 00:27:36,040
<font color="#CCCCCC">anyway so</font>

