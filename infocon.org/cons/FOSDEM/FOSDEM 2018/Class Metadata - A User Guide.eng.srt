1
00:00:05,160 --> 00:00:13,630
<font color="#E5E5E5">okay great right okay we'll get started</font>

2
00:00:11,200 --> 00:00:15,190
<font color="#E5E5E5">this is a talk</font><font color="#CCCCCC"> that I've actually</font><font color="#E5E5E5"> based</font>

3
00:00:13,630 --> 00:00:17,020
this on a series of articles<font color="#CCCCCC"> I've</font>

4
00:00:15,190 --> 00:00:19,240
written blog articles<font color="#E5E5E5"> that I haven't yet</font>

5
00:00:17,020 --> 00:00:21,490
published<font color="#E5E5E5"> the blonic blog articles</font><font color="#CCCCCC"> goes</font>

6
00:00:19,240 --> 00:00:23,650
<font color="#CCCCCC">a</font><font color="#E5E5E5"> lot more detail</font><font color="#CCCCCC"> about this</font><font color="#E5E5E5"> and I will</font>

7
00:00:21,490 --> 00:00:25,709
<font color="#CCCCCC">publish the link in the slides when I</font>

8
00:00:23,650 --> 00:00:27,970
post them to<font color="#CCCCCC"> both</font><font color="#E5E5E5"> them to the articles</font>

9
00:00:25,710 --> 00:00:29,830
<font color="#E5E5E5">they include full</font><font color="#CCCCCC"> reference and all the</font>

10
00:00:27,970 --> 00:00:31,299
background to<font color="#CCCCCC"> all this</font><font color="#E5E5E5"> this so this is</font>

11
00:00:29,830 --> 00:00:33,129
gonna<font color="#E5E5E5"> be a fairly brief quick</font>

12
00:00:31,300 --> 00:00:35,230
run-through<font color="#E5E5E5"> of stuff because of the</font>

13
00:00:33,129 --> 00:00:36,760
shortness<font color="#E5E5E5"> of</font><font color="#CCCCCC"> Tok I have time so I</font><font color="#E5E5E5"> hope</font>

14
00:00:35,230 --> 00:00:40,419
<font color="#E5E5E5">we'll have time</font><font color="#CCCCCC"> for questions at</font><font color="#E5E5E5"> at the</font>

15
00:00:36,760 --> 00:00:41,589
end<font color="#E5E5E5"> of probably outside so just to give</font>

16
00:00:40,420 --> 00:00:43,120
an overview<font color="#E5E5E5"> of what I'm</font><font color="#CCCCCC"> gonna be talking</font>

17
00:00:41,590 --> 00:00:45,550
about<font color="#E5E5E5"> I'll explain why I'm</font><font color="#CCCCCC"> talking about</font>

18
00:00:43,120 --> 00:00:46,930
Java class metadata<font color="#CCCCCC"> I'm gonna skip over</font>

19
00:00:45,550 --> 00:00:49,449
the stuff<font color="#E5E5E5"> having the slides but I've</font>

20
00:00:46,930 --> 00:00:51,100
left it in there for<font color="#E5E5E5"> reference about how</font>

21
00:00:49,450 --> 00:00:53,290
you measure overall JVM native memory

22
00:00:51,100 --> 00:00:56,079
<font color="#E5E5E5">use I'm going to</font><font color="#CCCCCC"> concentrate on the tool</font>

23
00:00:53,290 --> 00:00:57,879
<font color="#E5E5E5">that allows you</font><font color="#CCCCCC"> to see</font><font color="#E5E5E5"> class metadata</font>

24
00:00:56,079 --> 00:00:59,950
statistics and identify exactly<font color="#E5E5E5"> how much</font>

25
00:00:57,879 --> 00:01:02,440
<font color="#E5E5E5">memory use is being used to model an</font>

26
00:00:59,950 --> 00:01:03,550
individual class in the<font color="#E5E5E5"> runtime</font><font color="#CCCCCC"> I'm</font>

27
00:01:02,440 --> 00:01:05,349
<font color="#CCCCCC">gonna show</font><font color="#E5E5E5"> you what that</font><font color="#CCCCCC"> looks like</font>

28
00:01:03,550 --> 00:01:07,509
<font color="#CCCCCC">under</font><font color="#E5E5E5"> the hood</font><font color="#CCCCCC"> what's actually going on</font>

29
00:01:05,349 --> 00:01:10,270
inside<font color="#E5E5E5"> the JVM and to give you some</font>

30
00:01:07,509 --> 00:01:11,770
numbers<font color="#CCCCCC"> about sizes and things the idea</font>

31
00:01:10,270 --> 00:01:14,289
of all this is so that<font color="#CCCCCC"> you can look</font><font color="#E5E5E5"> at</font>

32
00:01:11,770 --> 00:01:15,940
<font color="#E5E5E5">the amount of cost there is in the JVM</font>

33
00:01:14,289 --> 00:01:17,530
for actually modeling<font color="#E5E5E5"> the class base and</font>

34
00:01:15,940 --> 00:01:19,899
you can<font color="#CCCCCC"> relate that to what's given up</font>

35
00:01:17,530 --> 00:01:21,970
in any stats in for your application<font color="#E5E5E5"> and</font>

36
00:01:19,899 --> 00:01:23,950
you can<font color="#E5E5E5"> maybe start identifying that</font>

37
00:01:21,970 --> 00:01:25,679
opportunities for actually redesigning

38
00:01:23,950 --> 00:01:29,099
the code to have a slightly lower

39
00:01:25,679 --> 00:01:32,560
<font color="#E5E5E5">metadata overhead for your application</font>

40
00:01:29,099 --> 00:01:35,560
<font color="#E5E5E5">so I'll just explain what is Java class</font>

41
00:01:32,560 --> 00:01:37,720
metadata<font color="#CCCCCC"> it's based in</font><font color="#E5E5E5"> the Jovians</font>

42
00:01:35,560 --> 00:01:39,670
internal model of everything slits in

43
00:01:37,720 --> 00:01:41,800
the bytecode the JVM unpacks the

44
00:01:39,670 --> 00:01:43,000
<font color="#E5E5E5">bytecode and creates an object</font><font color="#CCCCCC"> Network</font>

45
00:01:41,800 --> 00:01:45,849
and then throws almost all<font color="#CCCCCC"> of the</font>

46
00:01:43,000 --> 00:01:48,009
bytecode away it also

47
00:01:45,849 --> 00:01:49,780
annotates that that model<font color="#CCCCCC"> with some</font>

48
00:01:48,009 --> 00:01:51,190
extra state it has resolution<font color="#E5E5E5"> state</font>

49
00:01:49,780 --> 00:01:53,950
explaining our classes<font color="#E5E5E5"> link</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> other</font>

50
00:01:51,190 --> 00:01:55,569
classes<font color="#E5E5E5"> the</font><font color="#CCCCCC"> linkage</font><font color="#E5E5E5"> between classes and</font>

51
00:01:53,950 --> 00:01:57,280
<font color="#E5E5E5">methods that are gonna be invoked at</font>

52
00:01:55,569 --> 00:01:58,869
some point<font color="#E5E5E5"> during the look at the code</font>

53
00:01:57,280 --> 00:02:01,899
or all fields<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be accessed and so</font>

54
00:01:58,869 --> 00:02:04,390
on and it's<font color="#CCCCCC"> also updated with</font>

55
00:02:01,899 --> 00:02:06,989
interpretation state there's a for<font color="#E5E5E5"> every</font>

56
00:02:04,390 --> 00:02:09,009
class as a cache<font color="#CCCCCC"> that keeps</font><font color="#E5E5E5"> track of</font>

57
00:02:06,989 --> 00:02:11,560
<font color="#E5E5E5">information allows the interpreters to</font>

58
00:02:09,008 --> 00:02:13,119
identify whether<font color="#E5E5E5"> a method</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> fields have</font>

59
00:02:11,560 --> 00:02:14,030
been resolved<font color="#E5E5E5"> is to quickly invoke them</font>

60
00:02:13,120 --> 00:02:16,160
or acts

61
00:02:14,030 --> 00:02:19,750
and it's also updated with extra

62
00:02:16,160 --> 00:02:22,250
compilation<font color="#E5E5E5"> state code addresses for</font>

63
00:02:19,750 --> 00:02:24,350
code entry addresses for compiled<font color="#CCCCCC"> jutted</font>

64
00:02:22,250 --> 00:02:25,700
methods linking stubs that allowed to do

65
00:02:24,350 --> 00:02:27,739
transitions between<font color="#E5E5E5"> the interpretation</font>

66
00:02:25,700 --> 00:02:29,149
<font color="#CCCCCC">and compiling and so on and also</font><font color="#E5E5E5"> there's</font>

67
00:02:27,740 --> 00:02:31,310
a<font color="#CCCCCC"> load of</font><font color="#E5E5E5"> profile counters kept by both</font>

68
00:02:29,150 --> 00:02:33,080
of the both<font color="#CCCCCC"> of the interpreter premier</font>

69
00:02:31,310 --> 00:02:35,990
compiler<font color="#E5E5E5"> so all of that is modeled</font>

70
00:02:33,080 --> 00:02:37,790
internally as an object structure and

71
00:02:35,990 --> 00:02:40,190
why do<font color="#E5E5E5"> you need that well if you're</font>

72
00:02:37,790 --> 00:02:41,720
going<font color="#E5E5E5"> to be running a management time</font>

73
00:02:40,190 --> 00:02:43,190
with dynamic class<font color="#CCCCCC"> linking</font><font color="#E5E5E5"> and loading</font>

74
00:02:41,720 --> 00:02:44,420
you've got to know what<font color="#E5E5E5"> classes are</font><font color="#CCCCCC"> in</font>

75
00:02:43,190 --> 00:02:46,310
there<font color="#E5E5E5"> and all linked out the classes</font>

76
00:02:44,420 --> 00:02:47,720
<font color="#E5E5E5">into them as you load them</font><font color="#CCCCCC"> and you've</font>

77
00:02:46,310 --> 00:02:49,250
got to respect their visibility<font color="#CCCCCC"> their</font>

78
00:02:47,720 --> 00:02:52,520
access so you<font color="#E5E5E5"> need a</font><font color="#CCCCCC"> model of</font><font color="#E5E5E5"> the class</font>

79
00:02:49,250 --> 00:02:53,810
base and the methods by<font color="#CCCCCC"> the interpretive</font>

80
00:02:52,520 --> 00:02:55,880
the JIT need to know about the class

81
00:02:53,810 --> 00:02:57,140
<font color="#E5E5E5">model because you can't run an</font>

82
00:02:55,880 --> 00:02:58,820
instruction like<font color="#CCCCCC"> a check cast</font>

83
00:02:57,140 --> 00:03:00,529
instruction without<font color="#E5E5E5"> taking some object</font>

84
00:02:58,820 --> 00:03:02,359
working at which class it<font color="#CCCCCC"> belongs to</font><font color="#E5E5E5"> and</font>

85
00:03:00,530 --> 00:03:04,070
then working<font color="#E5E5E5"> out where that sits in a</font>

86
00:03:02,360 --> 00:03:06,110
class hierarchy<font color="#E5E5E5"> so it's needed for</font>

87
00:03:04,070 --> 00:03:09,019
execution<font color="#CCCCCC"> a lot of visits needed for you</font>

88
00:03:06,110 --> 00:03:10,820
to<font color="#CCCCCC"> do compiling and optimization to make</font>

89
00:03:09,020 --> 00:03:12,410
sure that that's correct<font color="#CCCCCC"> and</font><font color="#E5E5E5"> sound you</font>

90
00:03:10,820 --> 00:03:14,540
need<font color="#E5E5E5"> to reference the class model to</font><font color="#CCCCCC"> be</font>

91
00:03:12,410 --> 00:03:16,430
<font color="#CCCCCC">able to do that reflection actually</font>

92
00:03:14,540 --> 00:03:18,650
requires you<font color="#CCCCCC"> to</font><font color="#E5E5E5"> verify the class model</font>

93
00:03:16,430 --> 00:03:20,000
in memory<font color="#CCCCCC"> you've actually gotta</font><font color="#E5E5E5"> create</font>

94
00:03:18,650 --> 00:03:21,620
<font color="#E5E5E5">an instance of Java in class and</font>

95
00:03:20,000 --> 00:03:24,260
potentially when you start doing reflect

96
00:03:21,620 --> 00:03:26,960
<font color="#E5E5E5">operations great</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> proxies</font><font color="#CCCCCC"> for methods</font>

97
00:03:24,260 --> 00:03:28,280
feels<font color="#CCCCCC"> meta handles so</font><font color="#E5E5E5"> you need a nun's</font>

98
00:03:26,960 --> 00:03:30,920
knowledge of what's in<font color="#CCCCCC"> the class</font><font color="#E5E5E5"> base</font>

99
00:03:28,280 --> 00:03:32,600
not<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to do that</font><font color="#CCCCCC"> and finally JVM ti</font>

100
00:03:30,920 --> 00:03:34,579
agents need to be able<font color="#E5E5E5"> to scan query the</font>

101
00:03:32,600 --> 00:03:35,960
class base and maybe update the<font color="#E5E5E5"> bytecode</font>

102
00:03:34,580 --> 00:03:38,120
<font color="#E5E5E5">and you've got a ripple that</font><font color="#CCCCCC"> through</font>

103
00:03:35,960 --> 00:03:40,100
<font color="#E5E5E5">into the rest of the JVM the effects of</font>

104
00:03:38,120 --> 00:03:42,590
<font color="#CCCCCC">that change</font><font color="#E5E5E5"> so you really need a class a</font>

105
00:03:40,100 --> 00:03:44,750
model of<font color="#E5E5E5"> the class structure why would</font>

106
00:03:42,590 --> 00:03:46,250
you not<font color="#E5E5E5"> just stick with</font><font color="#CCCCCC"> bytecode well</font>

107
00:03:44,750 --> 00:03:49,040
<font color="#E5E5E5">bytecode has a whole lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> things that</font>

108
00:03:46,250 --> 00:03:50,750
<font color="#CCCCCC">really make it inappropriate it's in</font>

109
00:03:49,040 --> 00:03:52,100
order<font color="#E5E5E5"> to get AK to</font><font color="#CCCCCC"> add data</font><font color="#E5E5E5"> that's</font>

110
00:03:50,750 --> 00:03:53,300
<font color="#E5E5E5">embedded in the bytecode you've got to</font>

111
00:03:52,100 --> 00:03:55,880
traverse your<font color="#E5E5E5"> way through a byte array</font>

112
00:03:53,300 --> 00:03:58,370
define things so it's<font color="#CCCCCC"> not easy</font><font color="#E5E5E5"> to access</font>

113
00:03:55,880 --> 00:03:59,960
things<font color="#CCCCCC"> whereas a separate object network</font>

114
00:03:58,370 --> 00:04:02,330
you can index things you can access

115
00:03:59,960 --> 00:04:04,010
<font color="#E5E5E5">things directly</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of data and bike</font>

116
00:04:02,330 --> 00:04:06,680
that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> implicit you have to convert</font>

117
00:04:04,010 --> 00:04:09,530
from bike representations<font color="#CCCCCC"> to say and a</font>

118
00:04:06,680 --> 00:04:10,850
<font color="#E5E5E5">number or a string or something</font><font color="#CCCCCC"> so it's</font>

119
00:04:09,530 --> 00:04:14,510
not really a<font color="#E5E5E5"> good store in the way it</font>

120
00:04:10,850 --> 00:04:16,219
stores things<font color="#E5E5E5"> you can't really annotate</font>

121
00:04:14,510 --> 00:04:17,719
the<font color="#CCCCCC"> byte code</font><font color="#E5E5E5"> it's a slab of bytes so</font>

122
00:04:16,220 --> 00:04:20,120
updating in place isn't<font color="#CCCCCC"> really an</font><font color="#E5E5E5"> option</font>

123
00:04:17,720 --> 00:04:21,650
<font color="#CCCCCC">and in in an object</font><font color="#E5E5E5"> network that models</font>

124
00:04:20,120 --> 00:04:23,630
the class<font color="#CCCCCC"> base</font><font color="#E5E5E5"> some of the objects</font><font color="#CCCCCC"> can</font>

125
00:04:21,649 --> 00:04:25,010
be<font color="#E5E5E5"> read-only</font><font color="#CCCCCC"> they store stuff</font><font color="#E5E5E5"> that's</font>

126
00:04:23,630 --> 00:04:25,800
<font color="#E5E5E5">constants something</font><font color="#CCCCCC"> can be</font><font color="#E5E5E5"> read right</font>

127
00:04:25,010 --> 00:04:28,050
where you

128
00:04:25,800 --> 00:04:29,400
but the runtime derived information<font color="#E5E5E5"> into</font>

129
00:04:28,050 --> 00:04:31,229
the place<font color="#E5E5E5"> that's actually needed for you</font>

130
00:04:29,400 --> 00:04:33,270
to<font color="#CCCCCC"> do</font><font color="#E5E5E5"> things with that class well we</font>

131
00:04:31,229 --> 00:04:35,370
don't that method and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> bytecode</font><font color="#E5E5E5"> is</font>

132
00:04:33,270 --> 00:04:37,469
<font color="#E5E5E5">very verbose if you look at a symbol</font>

133
00:04:35,370 --> 00:04:39,629
<font color="#CCCCCC">like java.lang object or a method name</font>

134
00:04:37,470 --> 00:04:41,460
like<font color="#E5E5E5"> add if you look at if method</font>

135
00:04:39,629 --> 00:04:44,430
signature these occur all over<font color="#CCCCCC"> the place</font>

136
00:04:41,460 --> 00:04:46,710
in<font color="#CCCCCC"> bytecode a constant</font><font color="#E5E5E5"> string constants</font>

137
00:04:44,430 --> 00:04:48,360
and<font color="#CCCCCC"> class</font><font color="#E5E5E5"> object constants occur all</font>

138
00:04:46,710 --> 00:04:51,419
over<font color="#CCCCCC"> the place keeping multiple copies</font>

139
00:04:48,360 --> 00:04:52,860
<font color="#CCCCCC">of those is</font><font color="#E5E5E5"> really a in lotta different</font>

140
00:04:51,419 --> 00:04:55,349
byte codes as a waste of<font color="#E5E5E5"> space</font>

141
00:04:52,860 --> 00:04:57,990
so the JVM has a symbol table which puts

142
00:04:55,349 --> 00:04:59,699
symbols in once it creates unique

143
00:04:57,990 --> 00:05:01,740
strings on the heap<font color="#E5E5E5"> and it just puts</font>

144
00:04:59,699 --> 00:05:03,150
pointers to these<font color="#E5E5E5"> things in so you can</font>

145
00:05:01,740 --> 00:05:05,400
<font color="#E5E5E5">reduce a lot of the verbosity</font><font color="#CCCCCC"> and</font>

146
00:05:03,150 --> 00:05:07,739
<font color="#E5E5E5">constant pool data is the enormous slab</font>

147
00:05:05,400 --> 00:05:08,940
of the actual stuff<font color="#CCCCCC"> sitting</font><font color="#E5E5E5"> fast pal so</font>

148
00:05:07,740 --> 00:05:10,650
there's a lot of change that you<font color="#CCCCCC"> win</font>

149
00:05:08,940 --> 00:05:12,659
there

150
00:05:10,650 --> 00:05:13,739
so why am<font color="#CCCCCC"> I going</font><font color="#E5E5E5"> to talk about this</font>

151
00:05:12,659 --> 00:05:15,419
it's<font color="#E5E5E5"> really what's the motive for this</font>

152
00:05:13,740 --> 00:05:16,879
it's good for people<font color="#E5E5E5"> understand this</font>

153
00:05:15,419 --> 00:05:19,919
<font color="#E5E5E5">works we always want to encourage new</font>

154
00:05:16,879 --> 00:05:21,539
people to hack on the JVM<font color="#E5E5E5"> but metadata</font>

155
00:05:19,919 --> 00:05:24,479
can actually be a large<font color="#CCCCCC"> proportion of</font>

156
00:05:21,539 --> 00:05:27,000
the code in your actual memory image<font color="#E5E5E5"> of</font>

157
00:05:24,479 --> 00:05:28,199
<font color="#E5E5E5">the</font><font color="#CCCCCC"> data in your memory</font><font color="#E5E5E5"> image I'm going</font>

158
00:05:27,000 --> 00:05:30,690
to show<font color="#E5E5E5"> you an example based on the</font>

159
00:05:28,199 --> 00:05:33,479
<font color="#CCCCCC">general</font><font color="#E5E5E5"> set wildfly the budget drives</font>

160
00:05:30,690 --> 00:05:35,370
<font color="#E5E5E5">we'd rather the app server from and if</font>

161
00:05:33,479 --> 00:05:38,099
you just boot up an app server instance

162
00:05:35,370 --> 00:05:40,469
with no deployments in it<font color="#E5E5E5"> there's about</font>

163
00:05:38,099 --> 00:05:43,020
<font color="#E5E5E5">22 Meg of instance data</font><font color="#CCCCCC"> and about</font><font color="#E5E5E5"> 55</font>

164
00:05:40,469 --> 00:05:45,539
<font color="#E5E5E5">make of class metadata like just when</font>

165
00:05:43,020 --> 00:05:47,698
it's a bear<font color="#E5E5E5"> app server so it can</font>

166
00:05:45,539 --> 00:05:51,060
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> dominate the the memory image</font>

167
00:05:47,699 --> 00:05:52,889
quite substantially<font color="#CCCCCC"> so what I'm hoping</font>

168
00:05:51,060 --> 00:05:54,150
<font color="#E5E5E5">is that if once you understand something</font>

169
00:05:52,889 --> 00:05:56,639
<font color="#E5E5E5">about how this works and you</font><font color="#CCCCCC"> can get</font>

170
00:05:54,150 --> 00:05:58,258
stats upon<font color="#E5E5E5"> what's what the actual costs</font>

171
00:05:56,639 --> 00:06:00,090
are for<font color="#CCCCCC"> your code</font><font color="#E5E5E5"> that might be able to</font>

172
00:05:58,259 --> 00:06:02,370
<font color="#CCCCCC">choose for optimization</font><font color="#E5E5E5"> and redesigning</font>

173
00:06:00,090 --> 00:06:03,900
<font color="#CCCCCC">your code</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> use a smaller class</font><font color="#E5E5E5"> space</font>

174
00:06:02,370 --> 00:06:05,550
<font color="#CCCCCC">obviously you just</font><font color="#E5E5E5"> use less classes is</font>

175
00:06:03,900 --> 00:06:06,810
one way<font color="#E5E5E5"> but also the way you code your</font>

176
00:06:05,550 --> 00:06:08,629
<font color="#E5E5E5">classes can make a difference so I'll</font>

177
00:06:06,810 --> 00:06:10,650
show an example<font color="#E5E5E5"> of that</font><font color="#CCCCCC"> from e8p</font>

178
00:06:08,629 --> 00:06:12,449
I'm going to skip the stuff<font color="#CCCCCC"> about the</font>

179
00:06:10,650 --> 00:06:14,099
native memory stats<font color="#CCCCCC"> just to say that</font>

180
00:06:12,449 --> 00:06:15,900
there is actually a whole memory

181
00:06:14,099 --> 00:06:18,000
management system<font color="#CCCCCC"> that replaces malloc</font>

182
00:06:15,900 --> 00:06:20,128
<font color="#CCCCCC">owns the new operators in C++</font><font color="#E5E5E5"> term</font>

183
00:06:18,000 --> 00:06:21,960
creating all the JVM<font color="#CCCCCC"> SJ to you</font><font color="#E5E5E5"> get stats</font>

184
00:06:20,129 --> 00:06:24,539
on<font color="#CCCCCC"> that there's one particular</font><font color="#E5E5E5"> stat that</font>

185
00:06:21,960 --> 00:06:26,279
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> Tula Tula mr. Singh which is</font><font color="#CCCCCC"> a J</font>

186
00:06:24,539 --> 00:06:28,529
command option to allow you to<font color="#E5E5E5"> actually</font>

187
00:06:26,279 --> 00:06:30,539
<font color="#E5E5E5">see the information about the class</font>

188
00:06:28,529 --> 00:06:32,460
model and you need to run<font color="#CCCCCC"> with</font><font color="#E5E5E5"> that</font>

189
00:06:30,539 --> 00:06:34,259
unlike<font color="#E5E5E5"> unlock diagnostic</font><font color="#CCCCCC"> vm options</font>

190
00:06:32,460 --> 00:06:35,880
<font color="#E5E5E5">enable for that to work so this is</font><font color="#CCCCCC"> the</font>

191
00:06:34,259 --> 00:06:38,640
command that starts<font color="#E5E5E5"> up the world</font>

192
00:06:35,880 --> 00:06:41,310
so you run<font color="#CCCCCC"> a</font><font color="#E5E5E5"> standalone script to just</font>

193
00:06:38,640 --> 00:06:43,169
start<font color="#E5E5E5"> a simple app server and I put that</font>

194
00:06:41,310 --> 00:06:46,080
<font color="#CCCCCC">into</font><font color="#E5E5E5"> as an argument to start it so</font><font color="#CCCCCC"> this</font>

195
00:06:43,170 --> 00:06:47,940
<font color="#E5E5E5">is example</font><font color="#CCCCCC"> gonna be using</font><font color="#E5E5E5"> you can use J</font>

196
00:06:46,080 --> 00:06:50,760
command<font color="#E5E5E5"> to find the</font><font color="#CCCCCC"> process idea vector</font>

197
00:06:47,940 --> 00:06:52,680
of that<font color="#E5E5E5"> process and then you can use</font>

198
00:06:50,760 --> 00:06:54,960
another J<font color="#E5E5E5"> command option the GC class</font>

199
00:06:52,680 --> 00:06:56,910
<font color="#CCCCCC">stats option to get a formatted list of</font>

200
00:06:54,960 --> 00:06:58,530
statistics on all of the classes is

201
00:06:56,910 --> 00:07:00,600
about<font color="#CCCCCC"> ten thousand when you boost up</font>

202
00:06:58,530 --> 00:07:03,390
what<font color="#CCCCCC"> a</font><font color="#E5E5E5"> wild flight and it comes out as a</font>

203
00:07:00,600 --> 00:07:04,920
table which is vast<font color="#CCCCCC"> I've summarized that</font>

204
00:07:03,390 --> 00:07:06,390
<font color="#E5E5E5">but you could actually load it into</font>

205
00:07:04,920 --> 00:07:08,310
spreadsheet<font color="#E5E5E5"> exactly what I did to look</font>

206
00:07:06,390 --> 00:07:10,650
at this stuff<font color="#E5E5E5"> and you can</font><font color="#CCCCCC"> summarize it</font>

207
00:07:08,310 --> 00:07:12,390
<font color="#E5E5E5">so these are the defaults this is did a</font>

208
00:07:10,650 --> 00:07:14,880
given they represent aggregate

209
00:07:12,390 --> 00:07:16,380
statistics for the class as a whole<font color="#E5E5E5"> and</font>

210
00:07:14,880 --> 00:07:18,000
certain categories of structures that

211
00:07:16,380 --> 00:07:19,620
<font color="#CCCCCC">are</font><font color="#E5E5E5"> used to model the class on the</font>

212
00:07:18,000 --> 00:07:22,080
<font color="#E5E5E5">method so I'll go through</font><font color="#CCCCCC"> these in a bit</font>

213
00:07:19,620 --> 00:07:24,300
<font color="#E5E5E5">you basically</font><font color="#CCCCCC"> load of columns as</font><font color="#E5E5E5"> 2</font><font color="#CCCCCC"> rows</font>

214
00:07:22,080 --> 00:07:25,950
<font color="#CCCCCC">I've colored them differently</font><font color="#E5E5E5"> and down</font>

215
00:07:24,300 --> 00:07:27,300
the<font color="#CCCCCC"> left-hand</font><font color="#E5E5E5"> side you've got the index</font>

216
00:07:25,950 --> 00:07:30,240
of the class<font color="#E5E5E5"> that goes</font><font color="#CCCCCC"> all up to ten</font>

217
00:07:27,300 --> 00:07:31,650
thousand two hundred<font color="#CCCCCC"> twenty eight on the</font>

218
00:07:30,240 --> 00:07:32,490
right hand<font color="#CCCCCC"> side the very far</font><font color="#E5E5E5"> right</font>

219
00:07:31,650 --> 00:07:33,719
column in red

220
00:07:32,490 --> 00:07:35,870
you've got the class name and they're

221
00:07:33,720 --> 00:07:37,410
sorted by default<font color="#E5E5E5"> on the instance bytes</font>

222
00:07:35,870 --> 00:07:39,000
statistic which<font color="#CCCCCC"> is actually an</font>

223
00:07:37,410 --> 00:07:41,820
interloper that's a heap statistic

224
00:07:39,000 --> 00:07:45,180
that's Java<font color="#E5E5E5"> memory not metadata memory</font>

225
00:07:41,820 --> 00:07:48,770
but the most popular<font color="#CCCCCC"> class in a</font><font color="#E5E5E5"> world</font>

226
00:07:45,180 --> 00:07:51,750
<font color="#CCCCCC">flight is a character array and is about</font>

227
00:07:48,770 --> 00:07:53,909
about<font color="#CCCCCC"> five megabytes of character array</font>

228
00:07:51,750 --> 00:07:55,500
in the<font color="#CCCCCC"> blimp that's booted</font><font color="#E5E5E5"> the next most</font>

229
00:07:53,910 --> 00:07:56,970
popular<font color="#E5E5E5"> is object array there's two and</font>

230
00:07:55,500 --> 00:07:58,800
a half megabytes<font color="#CCCCCC"> and the first</font>

231
00:07:56,970 --> 00:08:01,590
user-defined class is<font color="#E5E5E5"> hash map</font><font color="#CCCCCC"> goal</font><font color="#E5E5E5"> in</font>

232
00:07:58,800 --> 00:08:04,080
<font color="#CCCCCC">ode and</font><font color="#E5E5E5"> there's about 2.3 megabytes of</font>

233
00:08:01,590 --> 00:08:07,590
that<font color="#E5E5E5"> so quite a lot of instance</font><font color="#CCCCCC"> data in</font>

234
00:08:04,080 --> 00:08:09,539
there<font color="#E5E5E5"> the class by its column represents</font>

235
00:08:07,590 --> 00:08:11,489
the<font color="#E5E5E5"> amount of storage used to model the</font>

236
00:08:09,540 --> 00:08:12,870
<font color="#CCCCCC">class itself without taking account</font><font color="#E5E5E5"> all</font>

237
00:08:11,490 --> 00:08:15,540
the constant<font color="#CCCCCC"> full data and all the</font>

238
00:08:12,870 --> 00:08:18,150
<font color="#CCCCCC">methods it's actually a one main struck</font>

239
00:08:15,540 --> 00:08:19,860
just<font color="#E5E5E5"> a few little auxiliaries and you</font>

240
00:08:18,150 --> 00:08:24,210
can see the<font color="#E5E5E5"> two array classes use about</font>

241
00:08:19,860 --> 00:08:26,490
<font color="#CCCCCC">480 bytes</font><font color="#E5E5E5"> the youth the into the actual</font>

242
00:08:24,210 --> 00:08:28,140
intentional class there<font color="#CCCCCC"> it</font><font color="#E5E5E5"> is a slightly</font>

243
00:08:26,490 --> 00:08:29,760
<font color="#CCCCCC">different structure using memory they're</font>

244
00:08:28,140 --> 00:08:32,729
all<font color="#E5E5E5"> instances of a</font><font color="#CCCCCC"> classical</font><font color="#E5E5E5"> class with</font>

245
00:08:29,760 --> 00:08:35,250
a<font color="#CCCCCC"> K a</font><font color="#E5E5E5"> C++ type but there's array class</font>

246
00:08:32,729 --> 00:08:36,990
<font color="#CCCCCC">an instance class</font><font color="#E5E5E5"> two different types of</font>

247
00:08:35,250 --> 00:08:38,610
array<font color="#CCCCCC"> plasterer</font><font color="#E5E5E5"> actually and the</font>

248
00:08:36,990 --> 00:08:40,200
instance class is a bit bigger and it

249
00:08:38,610 --> 00:08:42,030
<font color="#E5E5E5">has some extra auxiliary data in it</font>

250
00:08:40,200 --> 00:08:44,960
because of the structure of<font color="#CCCCCC"> an instance</font>

251
00:08:42,030 --> 00:08:47,000
class<font color="#E5E5E5"> so there's about 560</font>

252
00:08:44,960 --> 00:08:48,650
there's no annotations in these<font color="#E5E5E5"> classes</font>

253
00:08:47,000 --> 00:08:50,480
annotations are stored as a thing hung

254
00:08:48,650 --> 00:08:52,910
off the class the class annotations<font color="#E5E5E5"> has</font>

255
00:08:50,480 --> 00:08:53,630
just<font color="#CCCCCC"> a but a packed byte array so</font>

256
00:08:52,910 --> 00:08:55,219
there's none there

257
00:08:53,630 --> 00:08:58,370
the constant<font color="#E5E5E5"> pool only exists for</font>

258
00:08:55,220 --> 00:09:00,320
interfaces or for<font color="#E5E5E5"> for clap for</font>

259
00:08:58,370 --> 00:09:01,520
<font color="#CCCCCC">classically use define classes and that</font>

260
00:09:00,320 --> 00:09:04,040
represents all the stuff that's<font color="#E5E5E5"> in the</font>

261
00:09:01,520 --> 00:09:05,630
constant pool area of the<font color="#E5E5E5"> byte code now</font>

262
00:09:04,040 --> 00:09:07,010
it doesn't include<font color="#E5E5E5"> the overhead for</font>

263
00:09:05,630 --> 00:09:08,990
<font color="#E5E5E5">actual symbols they're stuck in the</font>

264
00:09:07,010 --> 00:09:11,240
symbol<font color="#E5E5E5"> tables anyone copy</font><font color="#CCCCCC"> they shared</font>

265
00:09:08,990 --> 00:09:14,330
what this is is basically<font color="#E5E5E5"> an</font><font color="#CCCCCC"> array of</font>

266
00:09:11,240 --> 00:09:16,760
<font color="#E5E5E5">pointers to symbols or constant numeric</font>

267
00:09:14,330 --> 00:09:18,920
values or indirect references to strings

268
00:09:16,760 --> 00:09:25,150
stored in the heap<font color="#E5E5E5"> so there's quite a</font>

269
00:09:18,920 --> 00:09:27,650
lot of<font color="#E5E5E5"> constable data's 1.3 kilobytes of</font>

270
00:09:25,150 --> 00:09:29,000
constant<font color="#CCCCCC"> pool for that</font><font color="#E5E5E5"> class</font><font color="#CCCCCC"> it's quite</font>

271
00:09:27,650 --> 00:09:30,949
a lot more than the<font color="#E5E5E5"> classic object</font>

272
00:09:29,000 --> 00:09:32,780
itself and<font color="#E5E5E5"> constable data really is</font>

273
00:09:30,950 --> 00:09:35,360
<font color="#CCCCCC">quite a big overhead</font><font color="#E5E5E5"> there's also a tab</font>

274
00:09:32,780 --> 00:09:37,310
<font color="#E5E5E5">a byte</font><font color="#CCCCCC"> array</font><font color="#E5E5E5"> that of tags to label each</font>

275
00:09:35,360 --> 00:09:38,930
other's courses<font color="#CCCCCC"> 9</font><font color="#E5E5E5"> bytes for each entry</font>

276
00:09:37,310 --> 00:09:41,000
so it's quite a lot of storage<font color="#E5E5E5"> there</font>

277
00:09:38,930 --> 00:09:43,969
there are<font color="#CCCCCC"> 7 methods on this class that's</font>

278
00:09:41,000 --> 00:09:46,040
the method count column<font color="#E5E5E5"> and the the the</font>

279
00:09:43,970 --> 00:09:48,050
<font color="#E5E5E5">actual method byte codes the only thing</font>

280
00:09:46,040 --> 00:09:49,550
<font color="#CCCCCC">that's salvaged mean</font><font color="#E5E5E5"> for class file is</font>

281
00:09:48,050 --> 00:09:51,170
just the executable bit of the byte code

282
00:09:49,550 --> 00:09:52,880
so the stuff describes<font color="#CCCCCC"> how a super</font>

283
00:09:51,170 --> 00:09:54,800
method<font color="#E5E5E5"> that's actually</font><font color="#CCCCCC"> very small under</font>

284
00:09:52,880 --> 00:09:57,080
than 49 bytes so there's about<font color="#E5E5E5"> 20</font>

285
00:09:54,800 --> 00:09:58,579
something bytes per message<font color="#E5E5E5"> but there's</font>

286
00:09:57,080 --> 00:10:02,000
<font color="#CCCCCC">actually just</font><font color="#E5E5E5"> over what there's actually</font>

287
00:09:58,580 --> 00:10:04,130
<font color="#E5E5E5">1 K of them of objects</font><font color="#CCCCCC"> their data to</font>

288
00:10:02,000 --> 00:10:06,260
<font color="#CCCCCC">actually represent those</font><font color="#E5E5E5"> 7 methods in</font>

289
00:10:04,130 --> 00:10:09,200
memory<font color="#E5E5E5"> as we'll see that's a cluster of</font>

290
00:10:06,260 --> 00:10:11,270
objects<font color="#CCCCCC"> for each for each of the</font><font color="#E5E5E5"> 7</font>

291
00:10:09,200 --> 00:10:13,490
methods so that<font color="#E5E5E5"> children</font><font color="#CCCCCC"> in 40</font><font color="#E5E5E5"> or so</font>

292
00:10:11,270 --> 00:10:15,560
bytes per method<font color="#CCCCCC"> and in the last</font><font color="#E5E5E5"> three</font>

293
00:10:13,490 --> 00:10:18,350
stats a summary so<font color="#CCCCCC"> we know</font><font color="#E5E5E5"> this class is</font>

294
00:10:15,560 --> 00:10:21,619
<font color="#CCCCCC">using just over just about</font><font color="#E5E5E5"> 4k of storage</font>

295
00:10:18,350 --> 00:10:24,620
to<font color="#CCCCCC"> store the actual</font><font color="#E5E5E5"> details of the class</font>

296
00:10:21,620 --> 00:10:25,970
<font color="#E5E5E5">in memory and that's split into about 1k</font>

297
00:10:24,620 --> 00:10:28,550
of stuff that is structures<font color="#E5E5E5"> at a</font>

298
00:10:25,970 --> 00:10:30,710
<font color="#E5E5E5">read-only and the other</font><font color="#CCCCCC"> 3k structures at</font>

299
00:10:28,550 --> 00:10:33,250
a<font color="#E5E5E5"> readwrite because you need be able to</font>

300
00:10:30,710 --> 00:10:35,600
update<font color="#CCCCCC"> them with runtime derived state</font>

301
00:10:33,250 --> 00:10:38,780
if you go to the bottom<font color="#CCCCCC"> that table after</font>

302
00:10:35,600 --> 00:10:40,400
class<font color="#CCCCCC"> 2,228</font><font color="#E5E5E5"> you get summaries and</font>

303
00:10:38,780 --> 00:10:43,040
there's the summary<font color="#E5E5E5"> will told you before</font>

304
00:10:40,400 --> 00:10:45,439
you've got 22 megabytes of of instance

305
00:10:43,040 --> 00:10:47,150
<font color="#CCCCCC">data</font><font color="#E5E5E5"> of objects</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the Java heap and</font>

306
00:10:45,440 --> 00:10:52,030
overall in the total<font color="#E5E5E5"> column you've got</font>

307
00:10:47,150 --> 00:10:55,280
51 megabytes of of actual class metadata

308
00:10:52,030 --> 00:10:57,620
<font color="#E5E5E5">and you can see there's about</font><font color="#CCCCCC"> 6 Meg of</font>

309
00:10:55,280 --> 00:10:59,329
<font color="#E5E5E5">class bytes there's a lot more</font><font color="#CCCCCC"> Const</font>

310
00:10:57,620 --> 00:11:01,279
called<font color="#E5E5E5"> alien Megan there's a lot more</font>

311
00:10:59,330 --> 00:11:02,540
method data and in fact look at<font color="#E5E5E5"> the</font>

312
00:11:01,279 --> 00:11:04,939
percentages which were<font color="#CCCCCC"> also cited</font>

313
00:11:02,540 --> 00:11:07,520
<font color="#CCCCCC">they're about 45 percent of</font><font color="#E5E5E5"> the metadata</font>

314
00:11:04,940 --> 00:11:09,470
as methods about<font color="#CCCCCC"> 31 percent his class</font>

315
00:11:07,520 --> 00:11:11,720
pool and about<font color="#CCCCCC"> 12 percent is class bytes</font>

316
00:11:09,470 --> 00:11:13,550
<font color="#E5E5E5">only</font><font color="#CCCCCC"> 7</font><font color="#E5E5E5"> percent of</font><font color="#CCCCCC"> the original byte</font><font color="#E5E5E5"> code</font>

317
00:11:11,720 --> 00:11:15,650
is<font color="#E5E5E5"> actually left at the bike as the</font>

318
00:11:13,550 --> 00:11:17,870
method<font color="#CCCCCC"> bike codes</font><font color="#E5E5E5"> that gives you about</font>

319
00:11:15,650 --> 00:11:19,939
<font color="#CCCCCC">nine methods per class on average that's</font>

320
00:11:17,870 --> 00:11:22,670
<font color="#E5E5E5">these are not untypical values and about</font>

321
00:11:19,940 --> 00:11:23,990
250 bytes per method whereas if you<font color="#CCCCCC"> look</font>

322
00:11:22,670 --> 00:11:25,640
at the class<font color="#E5E5E5"> by</font><font color="#CCCCCC"> its the</font><font color="#E5E5E5"> class is on</font>

323
00:11:23,990 --> 00:11:28,370
average<font color="#CCCCCC"> about six hundred twenty bytes</font>

324
00:11:25,640 --> 00:11:29,449
<font color="#E5E5E5">and the constant pools on average you</font>

325
00:11:28,370 --> 00:11:30,860
<font color="#E5E5E5">don't actually have a constable for</font>

326
00:11:29,450 --> 00:11:33,770
every class<font color="#CCCCCC"> they're not for a arrayed</font>

327
00:11:30,860 --> 00:11:35,510
<font color="#CCCCCC">spaces</font><font color="#E5E5E5"> where you've got 1,850 bytes and</font>

328
00:11:33,770 --> 00:11:38,569
if you think about a pool full<font color="#E5E5E5"> of eight</font>

329
00:11:35,510 --> 00:11:40,790
by<font color="#E5E5E5"> ten trees pointers or constant number</font>

330
00:11:38,570 --> 00:11:42,890
values and one byte tags<font color="#E5E5E5"> divide that by</font>

331
00:11:40,790 --> 00:11:44,510
nine and<font color="#E5E5E5"> that gives you about 200</font>

332
00:11:42,890 --> 00:11:46,580
entries on average in the<font color="#E5E5E5"> constant</font><font color="#CCCCCC"> force</font>

333
00:11:44,510 --> 00:11:51,290
<font color="#CCCCCC">movies these for this class</font><font color="#E5E5E5"> model so</font>

334
00:11:46,580 --> 00:11:52,850
<font color="#CCCCCC">closed circles are really quite big so</font>

335
00:11:51,290 --> 00:11:54,140
<font color="#E5E5E5">let's move on to what that actually</font>

336
00:11:52,850 --> 00:11:56,720
looks like in<font color="#E5E5E5"> terms of what's really in</font>

337
00:11:54,140 --> 00:11:58,430
memory<font color="#CCCCCC"> so what you've</font><font color="#E5E5E5"> got in memory for</font>

338
00:11:56,720 --> 00:12:00,950
every class loader that's image in the

339
00:11:58,430 --> 00:12:03,260
<font color="#E5E5E5">JDK runtime there's a corresponding</font>

340
00:12:00,950 --> 00:12:04,700
class<font color="#CCCCCC"> loaded data</font><font color="#E5E5E5"> object in the JVM that</font>

341
00:12:03,260 --> 00:12:06,350
manages all<font color="#CCCCCC"> the</font><font color="#E5E5E5"> memory for</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the</font>

342
00:12:04,700 --> 00:12:07,970
structures<font color="#CCCCCC"> for that class loader and it</font>

343
00:12:06,350 --> 00:12:09,200
has its<font color="#E5E5E5"> own region of</font><font color="#CCCCCC"> virtual remember</font>

344
00:12:07,970 --> 00:12:11,360
the users for<font color="#E5E5E5"> that which</font><font color="#CCCCCC"> you can wipe</font>

345
00:12:09,200 --> 00:12:12,740
once it's deleted<font color="#E5E5E5"> and there are</font>

346
00:12:11,360 --> 00:12:13,910
different<font color="#E5E5E5"> types of classes</font><font color="#CCCCCC"> so coming</font>

347
00:12:12,740 --> 00:12:15,350
<font color="#CCCCCC">down from the class though there's a</font>

348
00:12:13,910 --> 00:12:16,969
link the class that I didn't points to

349
00:12:15,350 --> 00:12:19,310
the<font color="#E5E5E5"> first class and there's a</font>

350
00:12:16,970 --> 00:12:21,200
<font color="#E5E5E5">daisy-chain</font><font color="#CCCCCC"> field in the classes called</font>

351
00:12:19,310 --> 00:12:22,910
<font color="#E5E5E5">loader</font><font color="#CCCCCC"> next which links them</font><font color="#E5E5E5"> all so all</font>

352
00:12:21,200 --> 00:12:25,580
<font color="#CCCCCC">other classes</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can load up are all</font>

353
00:12:22,910 --> 00:12:26,900
<font color="#E5E5E5">daisy</font><font color="#CCCCCC"> chained together and they've also</font>

354
00:12:25,580 --> 00:12:29,690
<font color="#E5E5E5">got a link back to their class loader</font>

355
00:12:26,900 --> 00:12:31,579
and then the three different<font color="#CCCCCC"> types of</font>

356
00:12:29,690 --> 00:12:33,589
<font color="#E5E5E5">classes</font><font color="#CCCCCC"> that have</font><font color="#E5E5E5"> sub class over to the</font>

357
00:12:31,580 --> 00:12:35,900
actual<font color="#CCCCCC"> top-level</font><font color="#E5E5E5"> C++ class with the</font><font color="#CCCCCC"> K</font>

358
00:12:33,589 --> 00:12:37,670
our instance class type<font color="#E5E5E5"> array class</font><font color="#CCCCCC"> a</font>

359
00:12:35,900 --> 00:12:39,350
non-generic class those<font color="#CCCCCC"> correspondence</font>

360
00:12:37,670 --> 00:12:41,779
three classes are<font color="#CCCCCC"> shooting for a</font>

361
00:12:39,350 --> 00:12:44,600
user-defined class or an interface would

362
00:12:41,779 --> 00:12:46,279
<font color="#E5E5E5">be an instance class</font><font color="#CCCCCC"> a primitive type</font>

363
00:12:44,600 --> 00:12:49,910
<font color="#CCCCCC">array like cherry will be a type array</font>

364
00:12:46,279 --> 00:12:51,800
<font color="#CCCCCC">class</font><font color="#E5E5E5"> and an object</font><font color="#CCCCCC"> array of objects boo</font>

365
00:12:49,910 --> 00:12:53,719
<font color="#E5E5E5">would be an</font><font color="#CCCCCC"> on to</font><font color="#E5E5E5"> a class you create one</font>

366
00:12:51,800 --> 00:12:55,969
<font color="#CCCCCC">of</font><font color="#E5E5E5"> these each</font><font color="#CCCCCC"> time you load</font><font color="#E5E5E5"> something so</font>

367
00:12:53,720 --> 00:12:59,779
those sizes are 232 bytes for the

368
00:12:55,970 --> 00:13:02,420
primitive array<font color="#CCCCCC"> 243 object array</font><font color="#E5E5E5"> and 420</font>

369
00:12:59,779 --> 00:13:04,040
plus an extra<font color="#E5E5E5"> bit for an instance</font><font color="#CCCCCC"> path</font>

370
00:13:02,420 --> 00:13:05,930
<font color="#E5E5E5">because</font><font color="#CCCCCC"> it has there's some data that</font>

371
00:13:04,040 --> 00:13:07,280
varies according<font color="#E5E5E5"> to what the flavor for</font>

372
00:13:05,930 --> 00:13:09,620
<font color="#E5E5E5">the class is the definition of the</font><font color="#CCCCCC"> class</font>

373
00:13:07,280 --> 00:13:12,589
and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> a tail which has some</font><font color="#CCCCCC"> x2</font>

374
00:13:09,620 --> 00:13:14,300
packed<font color="#CCCCCC"> inserts in one block in memory so</font>

375
00:13:12,589 --> 00:13:16,550
there's a few<font color="#CCCCCC"> of those fields</font><font color="#E5E5E5"> that are</font>

376
00:13:14,300 --> 00:13:18,650
common across<font color="#E5E5E5"> all classes everyone go</font>

377
00:13:16,550 --> 00:13:22,130
point to its superclass<font color="#CCCCCC"> the most places</font>

378
00:13:18,650 --> 00:13:24,110
<font color="#E5E5E5">that's object</font><font color="#CCCCCC"> there's a link</font><font color="#E5E5E5"> down</font><font color="#CCCCCC"> to a</font>

379
00:13:22,130 --> 00:13:26,720
class to<font color="#CCCCCC"> its subclass which is the first</font>

380
00:13:24,110 --> 00:13:28,760
sub link and then there's a sibling link

381
00:13:26,720 --> 00:13:31,130
<font color="#CCCCCC">along so you</font><font color="#E5E5E5"> can go down along to get</font>

382
00:13:28,760 --> 00:13:32,240
all the<font color="#E5E5E5"> subclasses of a given</font><font color="#CCCCCC"> class</font><font color="#E5E5E5"> so</font>

383
00:13:31,130 --> 00:13:35,630
you can do that<font color="#E5E5E5"> to do a breadth-first</font>

384
00:13:32,240 --> 00:13:37,850
search of the<font color="#E5E5E5"> class</font><font color="#CCCCCC"> free</font><font color="#E5E5E5"> if you want and</font>

385
00:13:35,630 --> 00:13:39,529
then there's a<font color="#E5E5E5"> java mirror now that's in</font>

386
00:13:37,850 --> 00:13:41,150
red<font color="#CCCCCC"> because</font><font color="#E5E5E5"> that's not a reference to</font>

387
00:13:39,529 --> 00:13:42,439
other metadata all these other pointers

388
00:13:41,150 --> 00:13:44,240
will point us to other<font color="#E5E5E5"> classes</font>

389
00:13:42,440 --> 00:13:45,470
that's a pointer into the heap<font color="#CCCCCC"> to Anoop</font>

390
00:13:44,240 --> 00:13:47,029
<font color="#CCCCCC">that that's in the heap that's the java</font>

391
00:13:45,470 --> 00:13:48,800
line class instance the represents this

392
00:13:47,029 --> 00:13:52,160
class<font color="#E5E5E5"> that's greater than a class object</font>

393
00:13:48,800 --> 00:13:54,349
is<font color="#CCCCCC"> created in the JVM</font><font color="#E5E5E5"> and it's</font><font color="#CCCCCC"> populated</font>

394
00:13:52,160 --> 00:13:55,730
with all<font color="#E5E5E5"> the other data when you start</font>

395
00:13:54,350 --> 00:13:57,410
doing<font color="#CCCCCC"> reflect operations it's just a</font>

396
00:13:55,730 --> 00:13:59,240
bare empty class when you first start

397
00:13:57,410 --> 00:14:01,850
<font color="#E5E5E5">but you have to have that proxy</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> in a</font>

398
00:13:59,240 --> 00:14:03,110
heap an instance class<font color="#E5E5E5"> has a few</font><font color="#CCCCCC"> extra</font>

399
00:14:01,850 --> 00:14:05,990
fields there's a bit of<font color="#CCCCCC"> a variation to</font>

400
00:14:03,110 --> 00:14:07,700
tail for example<font color="#E5E5E5"> an</font><font color="#CCCCCC"> object</font><font color="#E5E5E5"> class if it's</font>

401
00:14:05,990 --> 00:14:09,620
a<font color="#E5E5E5"> through an array an array of array of</font>

402
00:14:07,700 --> 00:14:11,390
array of foo element class<font color="#E5E5E5"> would</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> just</font>

403
00:14:09,620 --> 00:14:14,600
single around through and<font color="#E5E5E5"> bottom class</font>

404
00:14:11,390 --> 00:14:18,680
would just be food the last one<font color="#CCCCCC"> beneath</font>

405
00:14:14,600 --> 00:14:19,910
<font color="#CCCCCC">all the array D references in instance</font>

406
00:14:18,680 --> 00:14:21,979
class you've got a<font color="#E5E5E5"> couple of other</font>

407
00:14:19,910 --> 00:14:23,719
<font color="#E5E5E5">structures</font><font color="#CCCCCC"> that are hung off it</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> is a</font>

408
00:14:21,980 --> 00:14:25,520
pointer<font color="#CCCCCC"> to all the model of</font><font color="#E5E5E5"> the constant</font>

409
00:14:23,720 --> 00:14:26,720
<font color="#CCCCCC">pool data another</font><font color="#E5E5E5"> as a pointer to an</font>

410
00:14:25,520 --> 00:14:29,329
array which<font color="#CCCCCC"> accounts as part</font><font color="#E5E5E5"> of the</font>

411
00:14:26,720 --> 00:14:30,589
class stat and that array has pointers

412
00:14:29,330 --> 00:14:32,589
to all the method objects which<font color="#CCCCCC"> will</font>

413
00:14:30,589 --> 00:14:34,970
<font color="#CCCCCC">count for</font><font color="#E5E5E5"> in the method status so before</font>

414
00:14:32,589 --> 00:14:37,120
but that variant<font color="#E5E5E5"> tail is interesting</font>

415
00:14:34,970 --> 00:14:40,430
what goes in there<font color="#E5E5E5"> now if you've got a a</font>

416
00:14:37,120 --> 00:14:44,540
<font color="#CCCCCC">user-defined class it can have object</font>

417
00:14:40,430 --> 00:14:45,800
values as fields and in that case the

418
00:14:44,540 --> 00:14:47,750
garbage<font color="#CCCCCC"> specter needs to know where they</font>

419
00:14:45,800 --> 00:14:50,029
are<font color="#CCCCCC"> so it's usually a small amount</font><font color="#E5E5E5"> of</font>

420
00:14:47,750 --> 00:14:51,770
data used<font color="#E5E5E5"> to keep track</font><font color="#CCCCCC"> of the indexes</font>

421
00:14:50,029 --> 00:14:53,959
of<font color="#E5E5E5"> those object fields to allow the</font>

422
00:14:51,770 --> 00:14:56,089
garbage collector<font color="#E5E5E5"> traverse objects so</font>

423
00:14:53,959 --> 00:14:58,699
live<font color="#CCCCCC"> 824 that's the offsets to</font><font color="#E5E5E5"> where</font>

424
00:14:56,089 --> 00:15:01,490
there's two objects<font color="#E5E5E5"> for example that's</font>

425
00:14:58,700 --> 00:15:03,380
usually tiny<font color="#CCCCCC"> what's</font><font color="#E5E5E5"> often bigger is the</font>

426
00:15:01,490 --> 00:15:04,339
<font color="#E5E5E5">V table in the</font><font color="#CCCCCC"> eye tables now V table is</font>

427
00:15:03,380 --> 00:15:06,830
used<font color="#E5E5E5"> when you need</font><font color="#CCCCCC"> to do a virtual</font>

428
00:15:04,339 --> 00:15:08,209
method invocation<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> Fredi given</font>

429
00:15:06,830 --> 00:15:10,190
class there<font color="#E5E5E5"> are certain methods have</font>

430
00:15:08,209 --> 00:15:11,630
been called with an invoke virtual you

431
00:15:10,190 --> 00:15:14,180
need to know what implementation to use

432
00:15:11,630 --> 00:15:16,220
so in that tail section you have<font color="#CCCCCC"> a lot</font>

433
00:15:14,180 --> 00:15:17,390
<font color="#CCCCCC">of pointers to all the implementations</font>

434
00:15:16,220 --> 00:15:19,280
that<font color="#E5E5E5"> are appropriate</font><font color="#CCCCCC"> for this class it's</font>

435
00:15:17,390 --> 00:15:20,870
either a local method or an inherited

436
00:15:19,280 --> 00:15:22,699
method<font color="#CCCCCC"> when you want to</font><font color="#E5E5E5"> do a virtual</font>

437
00:15:20,870 --> 00:15:23,620
method invocation<font color="#E5E5E5"> you go to the class</font>

438
00:15:22,700 --> 00:15:25,690
<font color="#E5E5E5">object</font>

439
00:15:23,620 --> 00:15:27,940
find the<font color="#CCCCCC"> vtable</font><font color="#E5E5E5"> you index and that's the</font>

440
00:15:25,690 --> 00:15:29,200
code point that you need to call now an

441
00:15:27,940 --> 00:15:30,880
eye table does a similar sort of thing

442
00:15:29,200 --> 00:15:32,560
<font color="#CCCCCC">for an</font><font color="#E5E5E5"> interface you've got a table of</font>

443
00:15:30,880 --> 00:15:34,210
methods which are this<font color="#CCCCCC"> class's</font>

444
00:15:32,560 --> 00:15:36,040
implementation of all the interface

445
00:15:34,210 --> 00:15:38,560
methods either local or<font color="#E5E5E5"> ones it</font>

446
00:15:36,040 --> 00:15:41,740
<font color="#E5E5E5">inherited so the size of the V table is</font>

447
00:15:38,560 --> 00:15:44,650
determined by how many methods are not

448
00:15:41,740 --> 00:15:46,810
<font color="#E5E5E5">non not not private because you can you</font>

449
00:15:44,650 --> 00:15:48,459
can do a virtual<font color="#E5E5E5"> method so long as it's</font>

450
00:15:46,810 --> 00:15:51,010
<font color="#CCCCCC">not private and so long as it's not a</font>

451
00:15:48,460 --> 00:15:52,810
locally determined final<font color="#CCCCCC"> method it's</font>

452
00:15:51,010 --> 00:15:54,189
locally just<font color="#E5E5E5"> fine and final well then</font>

453
00:15:52,810 --> 00:15:55,779
it's<font color="#E5E5E5"> always going to be called directly</font>

454
00:15:54,190 --> 00:15:57,370
similarly if it's if it's private it's

455
00:15:55,779 --> 00:15:58,750
<font color="#E5E5E5">gonna be called directly</font><font color="#CCCCCC"> but all the</font>

456
00:15:57,370 --> 00:16:01,180
other<font color="#CCCCCC"> methods will determine the size of</font>

457
00:15:58,750 --> 00:16:02,470
<font color="#E5E5E5">the V table the size of the</font><font color="#CCCCCC"> I tables you</font>

458
00:16:01,180 --> 00:16:05,949
get one for every interface<font color="#E5E5E5"> you</font>

459
00:16:02,470 --> 00:16:07,570
implement and you get the size of it<font color="#E5E5E5"> is</font>

460
00:16:05,950 --> 00:16:09,670
how<font color="#E5E5E5"> many methods are</font><font color="#CCCCCC"> I defined in the</font>

461
00:16:07,570 --> 00:16:11,020
interface<font color="#E5E5E5"> so that defines the complexity</font>

462
00:16:09,670 --> 00:16:15,099
of this bit which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the bulk of what's</font>

463
00:16:11,020 --> 00:16:16,240
in<font color="#CCCCCC"> that tail and the other strokes</font><font color="#E5E5E5"> a</font>

464
00:16:15,100 --> 00:16:17,890
<font color="#E5E5E5">list of the other structures</font><font color="#CCCCCC"> that are</font>

465
00:16:16,240 --> 00:16:19,600
hung off the<font color="#CCCCCC"> classic constant pool</font><font color="#E5E5E5"> it</font>

466
00:16:17,890 --> 00:16:21,850
has a<font color="#E5E5E5"> fixed overhead of about 80 bytes</font>

467
00:16:19,600 --> 00:16:23,320
<font color="#CCCCCC">including it although all the object</font>

468
00:16:21,850 --> 00:16:25,000
constants<font color="#CCCCCC"> that</font><font color="#E5E5E5"> refer to the constant</font>

469
00:16:23,320 --> 00:16:26,890
<font color="#E5E5E5">pool</font><font color="#CCCCCC"> are actually created an object</font>

470
00:16:25,000 --> 00:16:28,750
array on the heap<font color="#E5E5E5"> and the constant pool</font>

471
00:16:26,890 --> 00:16:30,459
entry is an index as to where that<font color="#E5E5E5"> value</font>

472
00:16:28,750 --> 00:16:31,990
<font color="#E5E5E5">is so you've got any constant strings</font>

473
00:16:30,459 --> 00:16:33,489
they're not stored in<font color="#E5E5E5"> the constant pool</font>

474
00:16:31,990 --> 00:16:34,810
itself<font color="#E5E5E5"> because</font><font color="#CCCCCC"> that would require</font><font color="#E5E5E5"> the</font>

475
00:16:33,490 --> 00:16:36,130
garbage collector go scanning through it

476
00:16:34,810 --> 00:16:37,719
they're stored in<font color="#E5E5E5"> the heap</font><font color="#CCCCCC"> ins</font><font color="#E5E5E5"> one point</font>

477
00:16:36,130 --> 00:16:39,880
to start and scan objects for the

478
00:16:37,720 --> 00:16:41,770
garbage collector but then other than

479
00:16:39,880 --> 00:16:43,810
<font color="#E5E5E5">that this the</font><font color="#CCCCCC"> actual</font><font color="#E5E5E5"> pass data is the</font>

480
00:16:41,770 --> 00:16:45,970
bulk of<font color="#CCCCCC"> what's in in this object</font><font color="#E5E5E5"> and</font>

481
00:16:43,810 --> 00:16:48,040
<font color="#E5E5E5">it's basically a</font><font color="#CCCCCC"> load of pointers which</font>

482
00:16:45,970 --> 00:16:49,900
either point to symbols or indirectly

483
00:16:48,040 --> 00:16:52,240
identify class method names and so on

484
00:16:49,900 --> 00:16:53,860
<font color="#E5E5E5">and or have constant values like numeric</font>

485
00:16:52,240 --> 00:16:55,660
values in them or as they say<font color="#CCCCCC"> they're</font>

486
00:16:53,860 --> 00:16:57,940
indexes for objects in the object array

487
00:16:55,660 --> 00:16:59,650
for Strings and<font color="#E5E5E5"> in class references and</font>

488
00:16:57,940 --> 00:17:00,670
there's also a<font color="#CCCCCC"> tagged</font><font color="#E5E5E5"> right array so</font>

489
00:16:59,650 --> 00:17:01,750
your overhead is determined by the

490
00:17:00,670 --> 00:17:03,160
number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> things there</font><font color="#CCCCCC"> are in</font><font color="#E5E5E5"> the</font>

491
00:17:01,750 --> 00:17:04,449
constant<font color="#E5E5E5"> pool in the byte code you have</font>

492
00:17:03,160 --> 00:17:06,909
<font color="#E5E5E5">the same in your actually memory</font>

493
00:17:04,449 --> 00:17:08,890
<font color="#CCCCCC">representation you have</font><font color="#E5E5E5"> nine times that</font>

494
00:17:06,910 --> 00:17:11,199
<font color="#E5E5E5">eight three pointer and</font><font color="#CCCCCC"> one with one</font>

495
00:17:08,890 --> 00:17:13,809
byte for each tag there's a thing called

496
00:17:11,199 --> 00:17:15,730
a CP cache it's actually a cheat<font color="#CCCCCC"> it's a</font>

497
00:17:13,809 --> 00:17:17,740
little tiny<font color="#CCCCCC"> header</font><font color="#E5E5E5"> 16 bytes plus a</font><font color="#CCCCCC"> lot</font>

498
00:17:15,730 --> 00:17:20,290
of<font color="#E5E5E5"> 32 about entries what the</font><font color="#CCCCCC"> constant</font>

499
00:17:17,740 --> 00:17:22,599
<font color="#CCCCCC">pool</font><font color="#E5E5E5"> cache actually is is a cache</font><font color="#CCCCCC"> for</font>

500
00:17:20,290 --> 00:17:24,040
<font color="#CCCCCC">the interpreter anywhere in the method</font>

501
00:17:22,599 --> 00:17:25,780
code for that<font color="#CCCCCC"> class where there's a</font>

502
00:17:24,040 --> 00:17:28,119
field<font color="#E5E5E5"> or there's a method that gets</font>

503
00:17:25,780 --> 00:17:30,309
called or accessed<font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> be an entry for</font>

504
00:17:28,119 --> 00:17:31,899
<font color="#CCCCCC">that a unique</font><font color="#E5E5E5"> entry for</font><font color="#CCCCCC"> that in the</font>

505
00:17:30,309 --> 00:17:33,820
constant<font color="#E5E5E5"> pool cache that the interpreter</font>

506
00:17:31,900 --> 00:17:34,710
<font color="#CCCCCC">uses a quick access to be able</font><font color="#E5E5E5"> to access</font>

507
00:17:33,820 --> 00:17:36,389
<font color="#E5E5E5">the field</font>

508
00:17:34,710 --> 00:17:39,050
<font color="#CCCCCC">or</font><font color="#E5E5E5"> vote the method and it gets set up</font>

509
00:17:36,390 --> 00:17:41,400
<font color="#E5E5E5">when the thing is resolved first time</font>

510
00:17:39,050 --> 00:17:42,659
and then<font color="#E5E5E5"> finally you've</font><font color="#CCCCCC"> got the methods</font>

511
00:17:41,400 --> 00:17:44,940
array that points to all the method

512
00:17:42,660 --> 00:17:47,250
objects so every method has<font color="#E5E5E5"> an 88 byte</font>

513
00:17:44,940 --> 00:17:49,140
<font color="#E5E5E5">this is all J decayed sizes by the</font>

514
00:17:47,250 --> 00:17:49,980
little<font color="#E5E5E5"> very to 9 this is this method as</font>

515
00:17:49,140 --> 00:17:51,930
88<font color="#E5E5E5"> bytes</font>

516
00:17:49,980 --> 00:17:54,360
there's a Const method which<font color="#CCCCCC"> has a</font><font color="#E5E5E5"> fixed</font>

517
00:17:51,930 --> 00:17:56,370
over a 48 bytes<font color="#E5E5E5"> plus some X detail and</font>

518
00:17:54,360 --> 00:17:57,810
there's a method<font color="#E5E5E5"> data object absolutely</font>

519
00:17:56,370 --> 00:17:59,520
shown in<font color="#CCCCCC"> gray because</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> only</font>

520
00:17:57,810 --> 00:18:01,590
<font color="#CCCCCC">written in when you actually need it</font>

521
00:17:59,520 --> 00:18:03,629
it's generated<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the JIT compiler these</font>

522
00:18:01,590 --> 00:18:05,159
things actually<font color="#E5E5E5"> most</font><font color="#CCCCCC"> mythos don't have</font>

523
00:18:03,630 --> 00:18:07,530
them<font color="#E5E5E5"> so although they're quite</font><font color="#CCCCCC"> expensive</font>

524
00:18:05,160 --> 00:18:09,150
<font color="#E5E5E5">you're talking 200 64 bytes plus then a</font>

525
00:18:07,530 --> 00:18:10,830
whole<font color="#E5E5E5"> data counters for profiling</font>

526
00:18:09,150 --> 00:18:13,140
they're actually<font color="#CCCCCC"> not just</font><font color="#E5E5E5"> sizable part</font>

527
00:18:10,830 --> 00:18:14,550
of the metadata<font color="#E5E5E5"> and there's</font><font color="#CCCCCC"> also pointed</font>

528
00:18:13,140 --> 00:18:16,590
<font color="#CCCCCC">to an end method that's a pointer to</font>

529
00:18:14,550 --> 00:18:18,270
another<font color="#CCCCCC"> part of</font><font color="#E5E5E5"> the JVM today</font><font color="#CCCCCC"> to into</font>

530
00:18:16,590 --> 00:18:21,840
the code cache<font color="#E5E5E5"> which</font><font color="#CCCCCC"> otherwise shown in</font>

531
00:18:18,270 --> 00:18:23,670
blue so that's<font color="#E5E5E5"> not counted in the stats</font>

532
00:18:21,840 --> 00:18:25,379
that<font color="#CCCCCC"> you get you'll get</font><font color="#E5E5E5"> there's also a</font>

533
00:18:23,670 --> 00:18:28,740
<font color="#E5E5E5">method counters object 32 bytes for</font>

534
00:18:25,380 --> 00:18:31,050
basic profiling so the to tailor<font color="#CCCCCC"> tails</font>

535
00:18:28,740 --> 00:18:33,300
<font color="#E5E5E5">those two objects the</font><font color="#CCCCCC"> const method</font><font color="#E5E5E5"> if</font>

536
00:18:31,050 --> 00:18:35,639
you<font color="#CCCCCC"> have local variables in the compiled</font>

537
00:18:33,300 --> 00:18:37,260
code<font color="#E5E5E5"> you need to compress them</font><font color="#CCCCCC"> into the</font>

538
00:18:35,640 --> 00:18:39,150
tail layer to keep track of<font color="#CCCCCC"> that so you</font>

539
00:18:37,260 --> 00:18:40,620
can identify<font color="#E5E5E5"> local variables</font><font color="#CCCCCC"> you never</font>

540
00:18:39,150 --> 00:18:42,270
need them<font color="#E5E5E5"> if you have line number</font>

541
00:18:40,620 --> 00:18:44,969
information it also<font color="#E5E5E5"> gets to put in there</font>

542
00:18:42,270 --> 00:18:49,830
<font color="#CCCCCC">in a compressed form</font><font color="#E5E5E5"> the exception table</font>

543
00:18:44,970 --> 00:18:52,350
<font color="#CCCCCC">records exception flow so if you if you</font>

544
00:18:49,830 --> 00:18:54,300
were right thanks

545
00:18:52,350 --> 00:18:56,300
<font color="#CCCCCC">if you have</font><font color="#E5E5E5"> any exception flow that</font>

546
00:18:54,300 --> 00:18:58,050
needs to record in there this

547
00:18:56,300 --> 00:18:59,879
annotations on the<font color="#E5E5E5"> meta will be a</font>

548
00:18:58,050 --> 00:19:01,950
compressed by a byte array<font color="#CCCCCC"> in there and</font>

549
00:18:59,880 --> 00:19:03,720
the actual original<font color="#E5E5E5"> method bikers in</font>

550
00:19:01,950 --> 00:19:05,010
there so the size of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> really depends</font>

551
00:19:03,720 --> 00:19:07,560
upon<font color="#E5E5E5"> the complexity of the method and</font>

552
00:19:05,010 --> 00:19:09,210
how you compile it<font color="#CCCCCC"> the method data has a</font>

553
00:19:07,560 --> 00:19:10,889
whole load of different counters and

554
00:19:09,210 --> 00:19:12,600
they're all<font color="#CCCCCC"> different sizes than what</font>

555
00:19:10,890 --> 00:19:14,550
<font color="#E5E5E5">the counting used by the JIT compiler</font>

556
00:19:12,600 --> 00:19:16,770
<font color="#E5E5E5">they there are counters for whoever's</font>

557
00:19:14,550 --> 00:19:18,960
call for branches<font color="#E5E5E5"> counters at track</font>

558
00:19:16,770 --> 00:19:21,389
method parameters against<font color="#E5E5E5"> actual method</font>

559
00:19:18,960 --> 00:19:23,220
arguments to do type profiling so on and

560
00:19:21,390 --> 00:19:25,080
so it's very<font color="#E5E5E5"> difficult describe the</font>

561
00:19:23,220 --> 00:19:26,550
complexity of<font color="#CCCCCC"> that but as I say it's</font><font color="#E5E5E5"> not</font>

562
00:19:25,080 --> 00:19:29,550
usually a very<font color="#E5E5E5"> large part of the actual</font>

563
00:19:26,550 --> 00:19:32,040
count<font color="#E5E5E5"> so let's put that</font><font color="#CCCCCC"> all into use</font>

564
00:19:29,550 --> 00:19:33,149
<font color="#E5E5E5">let's look at those stats again I sorted</font>

565
00:19:32,040 --> 00:19:35,520
the<font color="#E5E5E5"> EAP stats</font>

566
00:19:33,150 --> 00:19:36,870
according to class<font color="#CCCCCC"> bytes</font><font color="#E5E5E5"> and one of the</font>

567
00:19:35,520 --> 00:19:38,520
really surprising things that came out

568
00:19:36,870 --> 00:19:41,459
<font color="#E5E5E5">and was that there were there's some</font>

569
00:19:38,520 --> 00:19:43,530
very<font color="#E5E5E5"> very big classes now those classes</font>

570
00:19:41,460 --> 00:19:45,060
<font color="#E5E5E5">that you saw the basic allocation size</font>

571
00:19:43,530 --> 00:19:46,889
<font color="#E5E5E5">these</font><font color="#CCCCCC"> are all instance classes</font><font color="#E5E5E5"> they're</font>

572
00:19:45,060 --> 00:19:47,800
all<font color="#CCCCCC"> logger classes generated by</font><font color="#E5E5E5"> Jaguars</font>

573
00:19:46,890 --> 00:19:49,660
logging

574
00:19:47,800 --> 00:19:51,220
reason they've got such a big value in

575
00:19:49,660 --> 00:19:53,110
there is because<font color="#E5E5E5"> they've got massively</font>

576
00:19:51,220 --> 00:19:54,880
tables and<font color="#E5E5E5"> I tables that came out</font><font color="#CCCCCC"> of the</font>

577
00:19:53,110 --> 00:19:56,439
way they were<font color="#E5E5E5"> designed well see in a</font>

578
00:19:54,880 --> 00:19:57,910
second<font color="#CCCCCC"> wide</font><font color="#E5E5E5"> and you can see they've</font>

579
00:19:56,440 --> 00:20:00,010
actually got loads of methods<font color="#E5E5E5"> and those</font>

580
00:19:57,910 --> 00:20:02,710
methods<font color="#E5E5E5"> both have both implement</font>

581
00:20:00,010 --> 00:20:04,240
interfaces<font color="#E5E5E5"> and a virtual methods so the</font>

582
00:20:02,710 --> 00:20:06,520
way the code<font color="#CCCCCC"> is designed there's a class</font>

583
00:20:04,240 --> 00:20:08,830
<font color="#CCCCCC">called basic logger which has</font><font color="#E5E5E5"> about</font>

584
00:20:06,520 --> 00:20:10,150
<font color="#CCCCCC">twelve methods</font><font color="#E5E5E5"> and it has</font><font color="#CCCCCC"> an interface</font>

585
00:20:08,830 --> 00:20:11,679
<font color="#CCCCCC">for</font><font color="#E5E5E5"> basic</font><font color="#CCCCCC"> law which</font><font color="#E5E5E5"> have about twelve</font>

586
00:20:10,150 --> 00:20:13,120
methods and it's<font color="#CCCCCC"> limited</font><font color="#E5E5E5"> by this class</font>

587
00:20:11,680 --> 00:20:14,980
<font color="#E5E5E5">called basic default logger and it does</font>

588
00:20:13,120 --> 00:20:17,500
<font color="#CCCCCC">it prints messages warning</font><font color="#E5E5E5"> messages</font>

589
00:20:14,980 --> 00:20:20,560
error messages<font color="#CCCCCC"> and the class EJB logger</font>

590
00:20:17,500 --> 00:20:22,210
that<font color="#E5E5E5"> the code</font><font color="#CCCCCC"> is generated from has a</font>

591
00:20:20,560 --> 00:20:23,649
load of<font color="#CCCCCC"> met abstract methods defined in</font>

592
00:20:22,210 --> 00:20:25,810
the interface that are that<font color="#E5E5E5"> are</font>

593
00:20:23,650 --> 00:20:29,320
generated in the mutation<font color="#E5E5E5"> so there's</font>

594
00:20:25,810 --> 00:20:30,760
about<font color="#CCCCCC"> 475</font><font color="#E5E5E5"> of those which we which</font>

595
00:20:29,320 --> 00:20:33,490
because there's lots of<font color="#E5E5E5"> different errors</font>

596
00:20:30,760 --> 00:20:35,770
to report and they say what type of

597
00:20:33,490 --> 00:20:37,540
message<font color="#CCCCCC"> you</font><font color="#E5E5E5"> need and so an error log</font>

598
00:20:35,770 --> 00:20:41,080
message<font color="#E5E5E5"> you call the error method</font>

599
00:20:37,540 --> 00:20:44,200
<font color="#CCCCCC">there's a message ID and a string that's</font>

600
00:20:41,080 --> 00:20:46,060
<font color="#E5E5E5">formatted in with arguments formatted</font>

601
00:20:44,200 --> 00:20:48,070
into<font color="#E5E5E5"> it plus optionally a throwable on</font>

602
00:20:46,060 --> 00:20:50,350
the end so this<font color="#E5E5E5"> method here get manager</font>

603
00:20:48,070 --> 00:20:52,179
TX date has failed<font color="#E5E5E5"> it prints an error</font>

604
00:20:50,350 --> 00:20:54,340
string<font color="#E5E5E5"> without any format arguments and</font>

605
00:20:52,180 --> 00:20:55,780
<font color="#E5E5E5">it prints details of the throwable now</font>

606
00:20:54,340 --> 00:20:57,310
in the generated<font color="#CCCCCC"> code</font><font color="#E5E5E5"> as well as having</font>

607
00:20:55,780 --> 00:20:59,470
the generated method which is a virtual

608
00:20:57,310 --> 00:21:02,919
method and therefore<font color="#E5E5E5"> has an</font><font color="#CCCCCC"> I table</font>

609
00:20:59,470 --> 00:21:04,330
entry and a<font color="#CCCCCC"> V table entry you also have</font>

610
00:21:02,920 --> 00:21:06,040
another auxiliary method that retrieves

611
00:21:04,330 --> 00:21:07,720
<font color="#CCCCCC">that constant string and the idea was</font>

612
00:21:06,040 --> 00:21:10,000
<font color="#E5E5E5">you'd override this and</font><font color="#CCCCCC"> you'd build</font>

613
00:21:07,720 --> 00:21:11,350
different<font color="#E5E5E5"> locales</font><font color="#CCCCCC"> to use for different</font>

614
00:21:10,000 --> 00:21:13,390
locales you do you have a different

615
00:21:11,350 --> 00:21:14,790
class<font color="#E5E5E5"> implementation so using overriding</font>

616
00:21:13,390 --> 00:21:18,160
interface is incredibly<font color="#E5E5E5"> expensive to get</font>

617
00:21:14,790 --> 00:21:21,370
<font color="#CCCCCC">475 methods</font><font color="#E5E5E5"> in the interface and in</font><font color="#CCCCCC"> the</font>

618
00:21:18,160 --> 00:21:24,790
generated<font color="#E5E5E5"> class you get 475 methods in</font>

619
00:21:21,370 --> 00:21:27,129
each a chai table so the one the one<font color="#E5E5E5"> one</font>

620
00:21:24,790 --> 00:21:29,230
<font color="#E5E5E5">of the bottom you've got the</font><font color="#CCCCCC"> hole</font><font color="#E5E5E5"> of</font>

621
00:21:27,130 --> 00:21:32,560
unnecessary<font color="#E5E5E5"> code there and the</font><font color="#CCCCCC"> V tables</font>

622
00:21:29,230 --> 00:21:35,080
<font color="#E5E5E5">I have not just 475 method of 950</font>

623
00:21:32,560 --> 00:21:37,690
methods in<font color="#CCCCCC"> action implementation</font><font color="#E5E5E5"> so the</font>

624
00:21:35,080 --> 00:21:40,030
solution that<font color="#E5E5E5"> we're now implementing is</font>

625
00:21:37,690 --> 00:21:42,340
to get rid of the interface<font color="#E5E5E5"> and make the</font>

626
00:21:40,030 --> 00:21:44,889
actual<font color="#CCCCCC"> dump the actual original</font><font color="#E5E5E5"> class</font>

627
00:21:42,340 --> 00:21:46,840
just a class with dummy methods generate

628
00:21:44,890 --> 00:21:49,180
an alternative replacement which you put

629
00:21:46,840 --> 00:21:50,560
in in a<font color="#E5E5E5"> jar in earlier in the path</font><font color="#CCCCCC"> pack</font>

630
00:21:49,180 --> 00:21:52,300
<font color="#E5E5E5">class</font><font color="#CCCCCC"> pass</font><font color="#E5E5E5"> you can pile against the</font>

631
00:21:50,560 --> 00:21:52,780
dummy version<font color="#E5E5E5"> but replace it with a real</font>

632
00:21:52,300 --> 00:21:54,370
version

633
00:21:52,780 --> 00:21:57,610
there's no interface so there's no<font color="#E5E5E5"> I</font>

634
00:21:54,370 --> 00:22:00,080
table that's 475 methods and 475

635
00:21:57,610 --> 00:22:02,539
<font color="#E5E5E5">pointers in the IP table we remove</font>

636
00:22:00,080 --> 00:22:04,309
and similarly the implementation methods

637
00:22:02,539 --> 00:22:07,010
you don't need the<font color="#CCCCCC"> auxiliary string</font>

638
00:22:04,309 --> 00:22:08,690
methods that's another<font color="#CCCCCC"> 475</font><font color="#E5E5E5"> methods saved</font>

639
00:22:07,010 --> 00:22:10,640
<font color="#E5E5E5">and you don't need</font><font color="#CCCCCC"> a vtable</font><font color="#E5E5E5"> because</font>

640
00:22:08,690 --> 00:22:11,799
these<font color="#E5E5E5"> can be actually be final methods</font>

641
00:22:10,640 --> 00:22:13,850
you don't need to<font color="#CCCCCC"> ever call</font><font color="#E5E5E5"> them in</font>

642
00:22:11,799 --> 00:22:15,879
virtually and they never<font color="#E5E5E5"> ever written so</font>

643
00:22:13,850 --> 00:22:19,399
you<font color="#E5E5E5"> can make the final</font><font color="#CCCCCC"> so you can save</font>

644
00:22:15,880 --> 00:22:21,830
<font color="#E5E5E5">950 x 8k words for the</font><font color="#CCCCCC"> I table and V</font>

645
00:22:19,400 --> 00:22:23,330
table<font color="#E5E5E5"> and 950 method objects with all</font>

646
00:22:21,830 --> 00:22:26,360
<font color="#E5E5E5">their exhilarates so it's an enormous</font>

647
00:22:23,330 --> 00:22:27,379
<font color="#CCCCCC">amount of saving obviously that</font><font color="#E5E5E5"> doesn't</font>

648
00:22:26,360 --> 00:22:29,570
apply<font color="#E5E5E5"> everywhere else across the</font>

649
00:22:27,380 --> 00:22:31,730
<font color="#CCCCCC">codebase the biggest way</font><font color="#E5E5E5"> to save space</font>

650
00:22:29,570 --> 00:22:33,139
is to<font color="#E5E5E5"> actually just use less classes but</font>

651
00:22:31,730 --> 00:22:34,370
<font color="#E5E5E5">you know it's interesting that</font><font color="#CCCCCC"> you can</font>

652
00:22:33,140 --> 00:22:37,399
actually<font color="#E5E5E5"> look at your stats and maybe</font>

653
00:22:34,370 --> 00:22:38,110
improve<font color="#E5E5E5"> things right</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> think I'm okay</font>

654
00:22:37,399 --> 00:22:41,399
for<font color="#E5E5E5"> time</font>

655
00:22:38,110 --> 00:22:41,399
[Applause]

656
00:22:45,520 --> 00:22:55,549
one question<font color="#E5E5E5"> yeah as I didn't that's a</font>

657
00:22:53,120 --> 00:22:58,370
really interesting<font color="#E5E5E5"> the the the static</font>

658
00:22:55,549 --> 00:22:59,809
methods have method<font color="#E5E5E5"> what's what's the</font>

659
00:22:58,370 --> 00:23:02,209
cost<font color="#E5E5E5"> for static methods you've got all</font>

660
00:22:59,809 --> 00:23:03,620
the obviously<font color="#CCCCCC"> the method details so it's</font>

661
00:23:02,210 --> 00:23:05,419
<font color="#E5E5E5">going to be another method object that's</font>

662
00:23:03,620 --> 00:23:08,629
attached<font color="#E5E5E5"> that class it's interesting</font>

663
00:23:05,419 --> 00:23:10,220
this static data<font color="#E5E5E5"> when you</font><font color="#CCCCCC"> allocate</font><font color="#E5E5E5"> the</font>

664
00:23:08,630 --> 00:23:12,440
<font color="#CCCCCC">java.lang class instances</font><font color="#E5E5E5"> in the heap</font>

665
00:23:10,220 --> 00:23:14,809
<font color="#E5E5E5">you allocate some extra storage</font><font color="#CCCCCC"> for all</font>

666
00:23:12,440 --> 00:23:16,610
the fields and<font color="#E5E5E5"> that's where that goes</font><font color="#CCCCCC"> in</font>

667
00:23:14,809 --> 00:23:18,350
in the in the detailed stats if you look

668
00:23:16,610 --> 00:23:19,908
at the instance count and you look at

669
00:23:18,350 --> 00:23:21,620
the incidence<font color="#CCCCCC"> size I look at the</font>

670
00:23:19,909 --> 00:23:23,960
<font color="#E5E5E5">instance bytes they multiply up except</font>

671
00:23:21,620 --> 00:23:25,039
<font color="#E5E5E5">for java.lang class</font><font color="#CCCCCC"> java.lang class the</font>

672
00:23:23,960 --> 00:23:26,659
<font color="#CCCCCC">instance bytes</font><font color="#E5E5E5"> as a whole load</font><font color="#CCCCCC"> more</font>

673
00:23:25,039 --> 00:23:28,399
because you go all<font color="#E5E5E5"> the install the basic</font>

674
00:23:26,659 --> 00:23:30,110
standard fields of the java.lang class

675
00:23:28,399 --> 00:23:32,600
instances and you've got lots of extra

676
00:23:30,110 --> 00:23:33,830
data for all<font color="#E5E5E5"> the extra static fields so</font>

677
00:23:32,600 --> 00:23:35,480
the static fields get stored in the heap

678
00:23:33,830 --> 00:23:37,189
<font color="#E5E5E5">where it can be</font><font color="#CCCCCC"> easily garbage collected</font>

679
00:23:35,480 --> 00:23:41,049
but the<font color="#CCCCCC"> java.lang class has a</font><font color="#E5E5E5"> very</font>

680
00:23:37,190 --> 00:23:41,049
variant size in the actual<font color="#CCCCCC"> heat</font><font color="#E5E5E5"> layer</font>

681
00:23:43,150 --> 00:23:55,440
right just one logical class yeah<font color="#CCCCCC"> yeah</font>

682
00:24:04,070 --> 00:24:07,070
yeah

683
00:24:16,050 --> 00:24:19,800
did I get a<font color="#E5E5E5"> thread so you're</font><font color="#CCCCCC"> praised</font>

684
00:24:18,000 --> 00:24:25,380
your<font color="#CCCCCC"> music you have the</font><font color="#E5E5E5"> Fishman</font>

685
00:24:19,800 --> 00:24:40,830
<font color="#CCCCCC">quadratics or the number of for every</font>

686
00:24:25,380 --> 00:24:44,240
<font color="#CCCCCC">interface</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have in the I tale the</font>

687
00:24:40,830 --> 00:24:48,060
proposed change in<font color="#E5E5E5"> order</font><font color="#CCCCCC"> to improve the</font>

688
00:24:44,240 --> 00:24:50,880
space<font color="#E5E5E5"> your</font><font color="#CCCCCC"> objects are using</font><font color="#E5E5E5"> was to</font>

689
00:24:48,060 --> 00:24:53,129
reverse the dependency the code

690
00:24:50,880 --> 00:24:56,660
dependencies<font color="#E5E5E5"> so you turn an interface</font>

691
00:24:53,130 --> 00:24:56,660
into class<font color="#CCCCCC"> pools</font>

692
00:24:59,530 --> 00:25:04,210
classic carrots really<font color="#CCCCCC"> cold lager</font>

693
00:25:01,720 --> 00:25:06,750
<font color="#CCCCCC">behaviour without</font><font color="#E5E5E5"> going to place these</font>

694
00:25:04,210 --> 00:25:06,750
<font color="#CCCCCC">another</font><font color="#E5E5E5"> bucket</font>

