1
00:00:04,980 --> 00:00:11,920
<font color="#CCCCCC">I present you</font><font color="#E5E5E5"> politely</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> works for</font>

2
00:00:09,430 --> 00:00:14,559
Bloomberg<font color="#CCCCCC"> and he's going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> present</font>

3
00:00:11,920 --> 00:00:18,039
<font color="#CCCCCC">Hublot testing on the Python</font><font color="#E5E5E5"> open source</font>

4
00:00:14,559 --> 00:00:20,470
project<font color="#E5E5E5"> Google I thanks thanks for</font>

5
00:00:18,039 --> 00:00:23,470
<font color="#CCCCCC">coming everyone my name is</font><font color="#E5E5E5"> kuba day I</font>

6
00:00:20,470 --> 00:00:25,060
refer Bloomberg in London and today I'm

7
00:00:23,470 --> 00:00:27,310
gonna talk about load<font color="#E5E5E5"> testing and</font>

8
00:00:25,060 --> 00:00:30,820
specifically<font color="#E5E5E5"> a python-based open source</font>

9
00:00:27,310 --> 00:00:33,910
<font color="#E5E5E5">tool called locust so this is a product</font>

10
00:00:30,820 --> 00:00:36,100
<font color="#E5E5E5">we own</font><font color="#CCCCCC"> in Bloomberg</font><font color="#E5E5E5"> this is like a</font>

11
00:00:33,910 --> 00:00:37,809
spreadsheet application<font color="#CCCCCC"> specialized for</font>

12
00:00:36,100 --> 00:00:39,760
the financial markets<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> have a</font>

13
00:00:37,810 --> 00:00:42,190
list of securities you<font color="#E5E5E5"> wanna follow like</font>

14
00:00:39,760 --> 00:00:44,559
stocks currencies and stuff and you can

15
00:00:42,190 --> 00:00:46,989
have real time market<font color="#E5E5E5"> data on the</font>

16
00:00:44,560 --> 00:00:50,200
columns and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can build</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> Market</font>

17
00:00:46,990 --> 00:00:53,590
<font color="#CCCCCC">Monitor</font><font color="#E5E5E5"> using this application</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> also</font>

18
00:00:50,200 --> 00:00:55,300
support<font color="#E5E5E5"> like real time editing and like</font>

19
00:00:53,590 --> 00:00:58,990
collaborative editing and sharing so

20
00:00:55,300 --> 00:01:01,150
it's an equal product but we are still

21
00:00:58,990 --> 00:01:02,770
<font color="#E5E5E5">in the process of releasing it so it</font>

22
00:01:01,150 --> 00:01:05,710
will<font color="#E5E5E5"> eventually be released to all of</font>

23
00:01:02,770 --> 00:01:09,640
our user base<font color="#CCCCCC"> but we are not</font><font color="#E5E5E5"> there yet</font>

24
00:01:05,710 --> 00:01:13,210
<font color="#E5E5E5">so that's why we usually have like</font>

25
00:01:09,640 --> 00:01:14,950
meetings to discuss our delays<font color="#E5E5E5"> should</font><font color="#CCCCCC"> we</font>

26
00:01:13,210 --> 00:01:17,439
speed up<font color="#E5E5E5"> things or should we slow down</font>

27
00:01:14,950 --> 00:01:19,960
and focus<font color="#E5E5E5"> on some bugs and stuff so in</font>

28
00:01:17,439 --> 00:01:22,329
one<font color="#E5E5E5"> of those meetings</font><font color="#CCCCCC"> we asked this</font>

29
00:01:19,960 --> 00:01:25,178
question<font color="#E5E5E5"> to ourselves like what is our</font>

30
00:01:22,329 --> 00:01:27,089
<font color="#CCCCCC">capacity and we noticed</font><font color="#E5E5E5"> that we don't</font>

31
00:01:25,179 --> 00:01:30,369
have a like concrete answer to that

32
00:01:27,090 --> 00:01:32,799
which we<font color="#CCCCCC"> should have then that's why we</font>

33
00:01:30,369 --> 00:01:36,069
decided<font color="#CCCCCC"> to</font><font color="#E5E5E5"> like invest some time</font><font color="#CCCCCC"> on this</font>

34
00:01:32,799 --> 00:01:38,380
and to find out what our capacity is so

35
00:01:36,069 --> 00:01:40,960
how<font color="#CCCCCC"> can you</font><font color="#E5E5E5"> find out your system</font>

36
00:01:38,380 --> 00:01:42,789
capacity<font color="#E5E5E5"> is like you can do this by</font>

37
00:01:40,960 --> 00:01:45,908
exploring<font color="#E5E5E5"> your system qualities well</font>

38
00:01:42,789 --> 00:01:47,340
what can<font color="#E5E5E5"> be those like qualities it can</font>

39
00:01:45,909 --> 00:01:49,719
be capacity in terms<font color="#E5E5E5"> of your</font>

40
00:01:47,340 --> 00:01:52,030
infrastructure is<font color="#E5E5E5"> the infrastructure</font>

41
00:01:49,719 --> 00:01:55,149
<font color="#E5E5E5">size that I could lead to your needs or</font>

42
00:01:52,030 --> 00:01:58,840
does your system respond quickly<font color="#CCCCCC"> enough</font>

43
00:01:55,149 --> 00:02:00,759
or can can your application grow<font color="#E5E5E5"> to</font>

44
00:01:58,840 --> 00:02:03,609
handle feature volumes in terms of like

45
00:02:00,759 --> 00:02:05,979
scalability and does your system behave

46
00:02:03,609 --> 00:02:08,369
correctly under load which is<font color="#E5E5E5"> a</font>

47
00:02:05,979 --> 00:02:12,610
<font color="#E5E5E5">stability concern right so how do you</font>

48
00:02:08,369 --> 00:02:13,569
assess those quality points and there

49
00:02:12,610 --> 00:02:16,840
are a<font color="#E5E5E5"> few methods</font>

50
00:02:13,569 --> 00:02:18,160
<font color="#E5E5E5">I will mainly mention performance</font>

51
00:02:16,840 --> 00:02:20,260
testing load testing against

52
00:02:18,160 --> 00:02:22,960
<font color="#CCCCCC">assistant because they they have some</font>

53
00:02:20,260 --> 00:02:24,850
<font color="#E5E5E5">overlap but they're also a bit different</font>

54
00:02:22,960 --> 00:02:26,800
<font color="#CCCCCC">from</font><font color="#E5E5E5"> each other so I just wanted to</font>

55
00:02:24,850 --> 00:02:29,320
briefly<font color="#E5E5E5"> mention them in performance</font>

56
00:02:26,800 --> 00:02:31,570
testing year<font color="#E5E5E5"> evaluating the performance</font>

57
00:02:29,320 --> 00:02:34,690
<font color="#CCCCCC">of your component against the</font><font color="#E5E5E5"> benchmark</font>

58
00:02:31,570 --> 00:02:37,209
<font color="#E5E5E5">you don't do this you</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have to</font>

59
00:02:34,690 --> 00:02:39,570
create a high<font color="#E5E5E5"> load but instead you tune</font>

60
00:02:37,210 --> 00:02:42,370
<font color="#E5E5E5">your application and your testing to</font>

61
00:02:39,570 --> 00:02:44,739
establish a benchmark behavior and your

62
00:02:42,370 --> 00:02:48,580
aim is not to<font color="#E5E5E5"> find the effects in</font><font color="#CCCCCC"> your</font>

63
00:02:44,740 --> 00:02:50,140
application by performance testing a lot

64
00:02:48,580 --> 00:02:52,480
testing on the other hand on the<font color="#CCCCCC"> other</font>

65
00:02:50,140 --> 00:02:54,910
hand this<font color="#E5E5E5"> time you feed the system with</font>

66
00:02:52,480 --> 00:02:57,280
the largest<font color="#E5E5E5"> task it</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> possibly handle</font>

67
00:02:54,910 --> 00:03:00,520
then you gradually increase<font color="#CCCCCC"> the load</font>

68
00:02:57,280 --> 00:03:02,560
until things start<font color="#E5E5E5"> break breaking so you</font>

69
00:03:00,520 --> 00:03:04,750
do this by creating<font color="#E5E5E5"> the</font><font color="#CCCCCC"> simulation</font><font color="#E5E5E5"> of</font>

70
00:03:02,560 --> 00:03:07,420
virtual<font color="#E5E5E5"> user so you try to</font><font color="#CCCCCC"> replicate</font>

71
00:03:04,750 --> 00:03:10,240
<font color="#E5E5E5">your like really users with a simulation</font>

72
00:03:07,420 --> 00:03:12,579
<font color="#E5E5E5">and in this case you're</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> your</font>

73
00:03:10,240 --> 00:03:14,890
goal<font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> find defects in your</font>

74
00:03:12,580 --> 00:03:17,950
application that might be hidden under a

75
00:03:14,890 --> 00:03:20,230
regular load but can be<font color="#E5E5E5"> exposed under</font>

76
00:03:17,950 --> 00:03:22,209
<font color="#CCCCCC">high load those can be like memory</font>

77
00:03:20,230 --> 00:03:24,640
management issues or buffer overflows

78
00:03:22,209 --> 00:03:26,440
and stuff and<font color="#E5E5E5"> we also want to determine</font>

79
00:03:24,640 --> 00:03:28,869
<font color="#E5E5E5">the upper limit for</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> of your</font>

80
00:03:26,440 --> 00:03:31,450
<font color="#CCCCCC">components in your</font><font color="#E5E5E5"> system so your</font>

81
00:03:28,870 --> 00:03:33,730
<font color="#E5E5E5">application can handle the load but</font>

82
00:03:31,450 --> 00:03:36,700
<font color="#E5E5E5">maybe your database</font><font color="#CCCCCC"> is hitting its limit</font>

83
00:03:33,730 --> 00:03:39,160
or your network<font color="#E5E5E5"> is causing problems</font><font color="#CCCCCC"> so</font>

84
00:03:36,700 --> 00:03:42,280
you<font color="#CCCCCC"> want to determine</font><font color="#E5E5E5"> the bottleneck in</font>

85
00:03:39,160 --> 00:03:44,920
your in your<font color="#E5E5E5"> system and stress testing</font>

86
00:03:42,280 --> 00:03:46,840
<font color="#E5E5E5">lastly it's it's similar</font><font color="#CCCCCC"> in the sense</font>

87
00:03:44,920 --> 00:03:49,030
<font color="#E5E5E5">that you still attempt to break</font><font color="#CCCCCC"> the</font>

88
00:03:46,840 --> 00:03:51,370
system<font color="#E5E5E5"> down but instead</font><font color="#CCCCCC"> of creating the</font>

89
00:03:49,030 --> 00:03:53,770
high load you try to take the resources

90
00:03:51,370 --> 00:03:56,770
<font color="#E5E5E5">away from</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> system you can like take a</font>

91
00:03:53,770 --> 00:03:58,660
few machines<font color="#E5E5E5"> down or you can</font><font color="#CCCCCC"> just turn</font>

92
00:03:56,770 --> 00:04:01,150
<font color="#CCCCCC">down that third-party service that you</font>

93
00:03:58,660 --> 00:04:03,370
<font color="#E5E5E5">depend on and you try to observe the</font>

94
00:04:01,150 --> 00:04:06,280
<font color="#CCCCCC">behavior of</font><font color="#E5E5E5"> your application</font><font color="#CCCCCC"> after</font>

95
00:04:03,370 --> 00:04:09,670
<font color="#CCCCCC">failure ideally you</font><font color="#E5E5E5"> would expect your</font>

96
00:04:06,280 --> 00:04:13,090
system<font color="#E5E5E5"> to be to gracefully fail and</font>

97
00:04:09,670 --> 00:04:17,620
recover so I will continue it load

98
00:04:13,090 --> 00:04:20,470
testing specifically but before but

99
00:04:17,620 --> 00:04:23,530
before you invest any of these<font color="#E5E5E5"> methods</font>

100
00:04:20,470 --> 00:04:27,070
<font color="#E5E5E5">there are there are a few points</font><font color="#CCCCCC"> that I</font>

101
00:04:23,530 --> 00:04:29,400
think<font color="#E5E5E5"> you should consider</font>

102
00:04:27,070 --> 00:04:32,380
first of all you must<font color="#E5E5E5"> have like</font>

103
00:04:29,400 --> 00:04:35,859
<font color="#E5E5E5">monitoring tools in place otherwise you</font>

104
00:04:32,380 --> 00:04:38,200
won't<font color="#E5E5E5"> be able to benefit any of those</font>

105
00:04:35,860 --> 00:04:41,050
methods<font color="#E5E5E5"> because you</font><font color="#CCCCCC"> won't</font><font color="#E5E5E5"> be able to see</font>

106
00:04:38,200 --> 00:04:43,060
the end result basically<font color="#E5E5E5"> and for</font>

107
00:04:41,050 --> 00:04:44,770
specifically<font color="#CCCCCC"> for load testing unity</font>

108
00:04:43,060 --> 00:04:47,980
identify the usage<font color="#E5E5E5"> patterns of your</font>

109
00:04:44,770 --> 00:04:50,859
application<font color="#E5E5E5"> like because in the</font>

110
00:04:47,980 --> 00:04:53,260
simulation you want what<font color="#E5E5E5"> you</font><font color="#CCCCCC"> want your</font>

111
00:04:50,860 --> 00:04:56,770
simulation to be representative<font color="#CCCCCC"> of your</font>

112
00:04:53,260 --> 00:04:58,990
real user site so you<font color="#CCCCCC"> need to</font><font color="#E5E5E5"> know their</font>

113
00:04:56,770 --> 00:05:01,030
workflows and stuff<font color="#E5E5E5"> and you need to</font>

114
00:04:58,990 --> 00:05:03,370
define<font color="#CCCCCC"> your success criteria in</font>

115
00:05:01,030 --> 00:05:06,880
measurable terms<font color="#CCCCCC"> so like do you want to</font>

116
00:05:03,370 --> 00:05:09,190
handle a thousand requests and second or

117
00:05:06,880 --> 00:05:12,250
a minute<font color="#CCCCCC"> or do you want to be like</font>

118
00:05:09,190 --> 00:05:14,770
responding like<font color="#CCCCCC"> in less than 50 SEC</font>

119
00:05:12,250 --> 00:05:17,560
milliseconds or<font color="#E5E5E5"> so so you need to</font><font color="#CCCCCC"> define</font>

120
00:05:14,770 --> 00:05:19,120
that<font color="#CCCCCC"> and you should</font><font color="#E5E5E5"> that's the last one</font>

121
00:05:17,560 --> 00:05:20,530
but definitely<font color="#CCCCCC"> not least you should</font>

122
00:05:19,120 --> 00:05:22,330
always isolate your testing the

123
00:05:20,530 --> 00:05:24,969
environment I<font color="#E5E5E5"> even have like another</font>

124
00:05:22,330 --> 00:05:26,770
slide dedicated to that because when I

125
00:05:24,970 --> 00:05:29,290
say isolate the testing environment<font color="#CCCCCC"> I</font>

126
00:05:26,770 --> 00:05:30,969
mean<font color="#E5E5E5"> two things</font><font color="#CCCCCC"> first unity isolate the</font>

127
00:05:29,290 --> 00:05:33,220
taste testing environment<font color="#E5E5E5"> from your</font>

128
00:05:30,970 --> 00:05:35,770
<font color="#E5E5E5">production environment so that when you</font>

129
00:05:33,220 --> 00:05:38,080
create<font color="#CCCCCC"> a lot you</font><font color="#E5E5E5"> don't actually like you</font>

130
00:05:35,770 --> 00:05:41,229
affect your users<font color="#CCCCCC"> and you should also</font>

131
00:05:38,080 --> 00:05:44,349
isolate the clusters<font color="#CCCCCC"> that you generate</font>

132
00:05:41,230 --> 00:05:46,780
the load from from the system<font color="#E5E5E5"> that's</font>

133
00:05:44,350 --> 00:05:49,360
under test because like load testing

134
00:05:46,780 --> 00:05:51,489
will you<font color="#CCCCCC"> Chi require a</font><font color="#E5E5E5"> lot of CPU</font><font color="#CCCCCC"> power</font>

135
00:05:49,360 --> 00:05:53,650
and it will<font color="#E5E5E5"> use a lot of resources if</font>

136
00:05:51,490 --> 00:05:55,930
you do do the testing on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same</font>

137
00:05:53,650 --> 00:05:57,729
machine<font color="#E5E5E5"> where your service runs then you</font>

138
00:05:55,930 --> 00:06:01,960
will be taking resources away from<font color="#E5E5E5"> your</font>

139
00:05:57,730 --> 00:06:04,180
service basically so how does<font color="#E5E5E5"> what's</font>

140
00:06:01,960 --> 00:06:07,180
<font color="#CCCCCC">locust and</font><font color="#E5E5E5"> how does</font><font color="#CCCCCC"> it help it load</font>

141
00:06:04,180 --> 00:06:10,090
testing it's it's an<font color="#E5E5E5"> open</font><font color="#CCCCCC"> source</font><font color="#E5E5E5"> project</font>

142
00:06:07,180 --> 00:06:12,970
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> peyten</font><font color="#E5E5E5"> based and it allows you to</font>

143
00:06:10,090 --> 00:06:14,979
define your<font color="#E5E5E5"> user behavior in code which</font>

144
00:06:12,970 --> 00:06:17,950
is super powerful<font color="#CCCCCC"> I will come to that</font>

145
00:06:14,980 --> 00:06:20,680
<font color="#E5E5E5">and it's based on</font><font color="#CCCCCC"> coroutines and it is</font>

146
00:06:17,950 --> 00:06:24,640
an async approach<font color="#E5E5E5"> which makes it very</font>

147
00:06:20,680 --> 00:06:26,950
<font color="#CCCCCC">easy to scale and distribute load it's</font>

148
00:06:24,640 --> 00:06:29,320
<font color="#CCCCCC">all it's also validated</font><font color="#E5E5E5"> battle-tested</font>

149
00:06:26,950 --> 00:06:31,090
product we use<font color="#E5E5E5"> it in Bloomberg but I</font>

150
00:06:29,320 --> 00:06:34,450
have heard<font color="#E5E5E5"> that like the video</font><font color="#CCCCCC"> game</font>

151
00:06:31,090 --> 00:06:36,849
battlefield<font color="#E5E5E5"> they use it before releases</font>

152
00:06:34,450 --> 00:06:40,020
they create like millions of virtual

153
00:06:36,850 --> 00:06:43,360
users<font color="#CCCCCC"> using</font><font color="#E5E5E5"> locusts to test the game</font>

154
00:06:40,020 --> 00:06:45,639
so<font color="#CCCCCC"> locus provides like two different</font>

155
00:06:43,360 --> 00:06:47,499
<font color="#CCCCCC">interfaces and to run the test</font><font color="#E5E5E5"> first</font>

156
00:06:45,639 --> 00:06:50,259
<font color="#E5E5E5">first one is a basically command-line</font>

157
00:06:47,499 --> 00:06:52,449
tool you can provide the<font color="#CCCCCC"> no web option</font>

158
00:06:50,259 --> 00:06:54,449
and you should provide a<font color="#CCCCCC"> low cost file</font>

159
00:06:52,449 --> 00:06:59,199
this is<font color="#E5E5E5"> very your user behaviors</font>

160
00:06:54,449 --> 00:07:01,990
<font color="#E5E5E5">behavior is in code</font><font color="#CCCCCC"> I will come I will</font>

161
00:06:59,199 --> 00:07:04,590
<font color="#CCCCCC">show some</font><font color="#E5E5E5"> examples of log files then you</font>

162
00:07:01,990 --> 00:07:06,999
<font color="#CCCCCC">provide the number of users you want</font><font color="#E5E5E5"> to</font>

163
00:07:04,590 --> 00:07:08,948
generate which is a hundred<font color="#E5E5E5"> in this case</font>

164
00:07:06,999 --> 00:07:11,229
and you need to<font color="#E5E5E5"> provide a hatch</font><font color="#CCCCCC"> rate</font>

165
00:07:08,949 --> 00:07:14,949
this<font color="#CCCCCC"> is the rate which</font><font color="#E5E5E5"> low cost will</font>

166
00:07:11,229 --> 00:07:17,770
generate your users and you can provide

167
00:07:14,949 --> 00:07:19,900
an upper limit a thousand in<font color="#E5E5E5"> this case</font>

168
00:07:17,770 --> 00:07:22,090
like stop<font color="#CCCCCC"> testing when you hit a</font>

169
00:07:19,900 --> 00:07:25,948
thousand requests and it will print the

170
00:07:22,090 --> 00:07:29,698
stats to<font color="#CCCCCC"> the console or you can use this</font>

171
00:07:25,949 --> 00:07:32,199
web UI<font color="#E5E5E5"> you can again provide the similar</font>

172
00:07:29,699 --> 00:07:35,199
parameters<font color="#E5E5E5"> to for your testing and</font><font color="#CCCCCC"> once</font>

173
00:07:32,199 --> 00:07:37,629
you hit<font color="#E5E5E5"> start swarming then you will see</font>

174
00:07:35,199 --> 00:07:39,699
this nice dashboard<font color="#CCCCCC"> I don't know if you</font>

175
00:07:37,629 --> 00:07:42,580
can see but<font color="#CCCCCC"> you can see the request</font>

176
00:07:39,699 --> 00:07:44,650
<font color="#E5E5E5">types and request names and you will see</font>

177
00:07:42,580 --> 00:07:47,109
a bunch of statistic<font color="#CCCCCC"> about those</font>

178
00:07:44,650 --> 00:07:49,000
requests like number of<font color="#CCCCCC"> failures average</font>

179
00:07:47,110 --> 00:07:51,580
response time maximum response<font color="#E5E5E5"> time and</font>

180
00:07:49,000 --> 00:07:54,189
stuff<font color="#E5E5E5"> and there like a few tabs at the</font>

181
00:07:51,580 --> 00:07:56,560
top<font color="#E5E5E5"> in the failures or exceptions tab</font>

182
00:07:54,189 --> 00:07:58,479
you<font color="#E5E5E5"> can see a categorization of your</font>

183
00:07:56,560 --> 00:08:01,479
failures<font color="#CCCCCC"> because</font><font color="#E5E5E5"> like you can see which</font>

184
00:07:58,479 --> 00:08:03,969
requests are failing<font color="#E5E5E5"> with which error</font>

185
00:08:01,479 --> 00:08:05,770
<font color="#E5E5E5">code so if you have good error codes</font><font color="#CCCCCC"> for</font>

186
00:08:03,969 --> 00:08:11,020
<font color="#E5E5E5">example</font><font color="#CCCCCC"> you can notice your database is</font>

187
00:08:05,770 --> 00:08:13,330
<font color="#CCCCCC">failing</font><font color="#E5E5E5"> before something else and that</font>

188
00:08:11,020 --> 00:08:16,479
button<font color="#E5E5E5"> is to stop</font><font color="#CCCCCC"> the testing which is</font>

189
00:08:13,330 --> 00:08:19,628
important and<font color="#E5E5E5"> this is a very simple</font>

190
00:08:16,479 --> 00:08:22,029
<font color="#E5E5E5">locust file you need to provide two</font>

191
00:08:19,629 --> 00:08:24,099
classes in<font color="#CCCCCC"> your</font><font color="#E5E5E5"> local file which one is</font>

192
00:08:22,029 --> 00:08:24,520
the<font color="#E5E5E5"> one at the bottom which</font><font color="#CCCCCC"> is the entry</font>

193
00:08:24,099 --> 00:08:27,729
<font color="#CCCCCC">point</font>

194
00:08:24,520 --> 00:08:31,120
it's a<font color="#E5E5E5"> locust class and website task is</font>

195
00:08:27,729 --> 00:08:33,130
the tasks<font color="#CCCCCC"> that you want to execute</font><font color="#E5E5E5"> so in</font>

196
00:08:31,120 --> 00:08:35,709
the<font color="#CCCCCC"> task</font><font color="#E5E5E5"> set you need to use the task</font>

197
00:08:33,130 --> 00:08:37,479
decorator<font color="#E5E5E5"> to define your users action in</font>

198
00:08:35,708 --> 00:08:40,809
this<font color="#CCCCCC"> case this is a simple website</font><font color="#E5E5E5"> and</font>

199
00:08:37,479 --> 00:08:43,029
it has<font color="#CCCCCC"> just two pages</font><font color="#E5E5E5"> home and profile</font>

200
00:08:40,809 --> 00:08:45,099
<font color="#E5E5E5">and as you can see</font><font color="#CCCCCC"> test decorator</font>

201
00:08:43,029 --> 00:08:47,949
<font color="#E5E5E5">accepts an integer argument which is</font>

202
00:08:45,100 --> 00:08:51,130
basically the weight and you<font color="#CCCCCC"> can assign</font>

203
00:08:47,949 --> 00:08:53,019
<font color="#E5E5E5">to that action in this case</font><font color="#CCCCCC"> home page is</font>

204
00:08:51,130 --> 00:08:53,560
like more popular than the profile page

205
00:08:53,019 --> 00:08:55,930
so

206
00:08:53,560 --> 00:08:58,000
<font color="#E5E5E5">you can assign a higher right this is</font>

207
00:08:55,930 --> 00:09:02,079
where you can<font color="#E5E5E5"> apply</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> like usage</font>

208
00:08:58,000 --> 00:09:05,110
pattern and to the code<font color="#E5E5E5"> and Locust also</font>

209
00:09:02,080 --> 00:09:07,570
gives us<font color="#E5E5E5"> special hook</font><font color="#CCCCCC"> its own static</font>

210
00:09:05,110 --> 00:09:10,330
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is this will</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> called only once</font>

211
00:09:07,570 --> 00:09:13,029
<font color="#E5E5E5">when the user is generated so if you</font>

212
00:09:10,330 --> 00:09:15,700
need<font color="#E5E5E5"> to do any like preliminary work you</font>

213
00:09:13,029 --> 00:09:18,730
can like do things<font color="#E5E5E5"> like</font><font color="#CCCCCC"> authentication</font>

214
00:09:15,700 --> 00:09:20,470
or<font color="#E5E5E5"> if you want to</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> get random users</font>

215
00:09:18,730 --> 00:09:22,330
from somewhere you<font color="#CCCCCC"> can do that</font><font color="#E5E5E5"> so that</font>

216
00:09:20,470 --> 00:09:25,750
<font color="#E5E5E5">you</font><font color="#CCCCCC"> don't have</font><font color="#E5E5E5"> to do extra work</font><font color="#CCCCCC"> in the</font>

217
00:09:22,330 --> 00:09:27,490
actions itself and in<font color="#CCCCCC"> the locals class</font>

218
00:09:25,750 --> 00:09:29,770
<font color="#E5E5E5">you provide the tasks set you just</font>

219
00:09:27,490 --> 00:09:32,260
<font color="#E5E5E5">implement it and you can also define the</font>

220
00:09:29,770 --> 00:09:34,420
<font color="#E5E5E5">minimum</font><font color="#CCCCCC"> and maximum wait time</font><font color="#E5E5E5"> and this</font>

221
00:09:32,260 --> 00:09:36,700
is this<font color="#E5E5E5"> is the time that</font><font color="#CCCCCC"> locust is going</font>

222
00:09:34,420 --> 00:09:38,770
to wait before<font color="#E5E5E5"> sending the next</font><font color="#CCCCCC"> request</font>

223
00:09:36,700 --> 00:09:41,500
for<font color="#CCCCCC"> that user so it's either going to</font>

224
00:09:38,770 --> 00:09:46,660
like it's going<font color="#E5E5E5"> to wait some seconds</font>

225
00:09:41,500 --> 00:09:49,960
<font color="#E5E5E5">between 5 and 15 in this case but what</font>

226
00:09:46,660 --> 00:09:52,300
makes so<font color="#E5E5E5"> I</font><font color="#CCCCCC"> forget</font><font color="#E5E5E5"> to mention so by</font>

227
00:09:49,960 --> 00:09:55,180
default<font color="#E5E5E5"> locust comes with an HTTP client</font>

228
00:09:52,300 --> 00:09:56,740
<font color="#CCCCCC">so if your service community is in HTTP</font>

229
00:09:55,180 --> 00:10:00,849
you don't have to implement<font color="#E5E5E5"> anything</font>

230
00:09:56,740 --> 00:10:03,339
more than this but if you<font color="#E5E5E5"> have some like</font>

231
00:10:00,850 --> 00:10:05,890
crazy protocol for your service<font color="#CCCCCC"> or it</font>

232
00:10:03,339 --> 00:10:09,570
<font color="#E5E5E5">doesn't know about HTTP which was the</font>

233
00:10:05,890 --> 00:10:12,130
case<font color="#CCCCCC"> for us you can implement</font><font color="#E5E5E5"> your own</font>

234
00:10:09,570 --> 00:10:14,980
<font color="#E5E5E5">custom clients and give it</font><font color="#CCCCCC"> to the locust</font>

235
00:10:12,130 --> 00:10:16,420
so in this case we<font color="#E5E5E5"> assume that you have</font>

236
00:10:14,980 --> 00:10:18,610
a<font color="#E5E5E5"> Python client that can communicate</font>

237
00:10:16,420 --> 00:10:23,319
<font color="#E5E5E5">with</font><font color="#CCCCCC"> your service and in this case we</font>

238
00:10:18,610 --> 00:10:27,520
just<font color="#CCCCCC"> wrap the send request method with</font>

239
00:10:23,320 --> 00:10:29,589
this class so<font color="#E5E5E5"> locust provides you like</font>

240
00:10:27,520 --> 00:10:31,990
expose<font color="#E5E5E5"> those events so as long as in an</font>

241
00:10:29,589 --> 00:10:34,750
action<font color="#E5E5E5"> as long as you can you fire a</font>

242
00:10:31,990 --> 00:10:37,150
failure<font color="#E5E5E5"> or a success event that action</font>

243
00:10:34,750 --> 00:10:39,250
will<font color="#CCCCCC"> be recorded in the statistics</font><font color="#E5E5E5"> so in</font>

244
00:10:37,150 --> 00:10:42,130
this case we try to send a request<font color="#CCCCCC"> using</font>

245
00:10:39,250 --> 00:10:46,570
our custom client<font color="#CCCCCC"> if it fails with an</font>

246
00:10:42,130 --> 00:10:48,580
exception we send a failure event<font color="#E5E5E5"> if it</font>

247
00:10:46,570 --> 00:10:49,930
<font color="#E5E5E5">succeeds we send a success event for</font>

248
00:10:48,580 --> 00:10:51,910
this event<font color="#E5E5E5"> you need</font><font color="#CCCCCC"> to provide</font><font color="#E5E5E5"> some</font>

249
00:10:49,930 --> 00:10:54,010
parameters like<font color="#CCCCCC"> the request name request</font>

250
00:10:51,910 --> 00:10:55,719
type response time<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you need</font><font color="#E5E5E5"> to</font>

251
00:10:54,010 --> 00:10:58,180
measure the<font color="#E5E5E5"> response response time</font><font color="#CCCCCC"> by</font>

252
00:10:55,720 --> 00:11:00,520
<font color="#CCCCCC">yourself or you can also provide the</font>

253
00:10:58,180 --> 00:11:03,489
exception type together<font color="#E5E5E5"> categorization</font>

254
00:11:00,520 --> 00:11:06,790
of your errors in the dashboard<font color="#CCCCCC"> so this</font>

255
00:11:03,490 --> 00:11:07,329
is how you can write<font color="#E5E5E5"> a custom client for</font>

256
00:11:06,790 --> 00:11:09,879
lack of<font color="#E5E5E5"> space</font>

257
00:11:07,329 --> 00:11:12,099
once you have<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to this</font><font color="#E5E5E5"> is</font>

258
00:11:09,879 --> 00:11:15,040
the entry point<font color="#E5E5E5"> again</font><font color="#CCCCCC"> you need</font><font color="#E5E5E5"> to just</font>

259
00:11:12,100 --> 00:11:15,850
initialize a custom<font color="#CCCCCC"> client and assign it</font>

260
00:11:15,040 --> 00:11:19,689
<font color="#CCCCCC">to the client</font>

261
00:11:15,850 --> 00:11:21,939
in<font color="#E5E5E5"> the lockers class so Europe you write</font>

262
00:11:19,689 --> 00:11:23,738
your tests<font color="#E5E5E5"> and how do you run them how</font>

263
00:11:21,939 --> 00:11:26,410
do you deploy them we use containers

264
00:11:23,739 --> 00:11:28,809
<font color="#CCCCCC">because mainly</font><font color="#E5E5E5"> they are well suited for</font>

265
00:11:26,410 --> 00:11:30,910
<font color="#E5E5E5">such tasks a singular task and they're</font>

266
00:11:28,809 --> 00:11:33,339
lightweight they're very easy to<font color="#CCCCCC"> deploy</font>

267
00:11:30,910 --> 00:11:36,189
<font color="#E5E5E5">and the most important thing is locust</font>

268
00:11:33,339 --> 00:11:38,410
<font color="#E5E5E5">works in a master and slave fashion so</font>

269
00:11:36,189 --> 00:11:41,199
you<font color="#CCCCCC"> can bring up as many</font><font color="#E5E5E5"> slaves as you</font>

270
00:11:38,410 --> 00:11:43,360
want to create a higher load so when you

271
00:11:41,199 --> 00:11:46,139
have a like single container for each

272
00:11:43,360 --> 00:11:48,939
<font color="#E5E5E5">slave you can just bring up as many</font>

273
00:11:46,139 --> 00:11:50,980
containers as you can and you<font color="#E5E5E5"> can just</font>

274
00:11:48,939 --> 00:11:52,959
register them to the master master

275
00:11:50,980 --> 00:11:55,779
locust instance<font color="#E5E5E5"> and you will be able to</font>

276
00:11:52,959 --> 00:11:57,758
<font color="#CCCCCC">generate a high load in in this case we</font>

277
00:11:55,779 --> 00:12:00,939
use like darker<font color="#E5E5E5"> compost and it's just a</font>

278
00:11:57,759 --> 00:12:03,670
<font color="#E5E5E5">simple argument to the run command like</font>

279
00:12:00,939 --> 00:12:05,889
we want<font color="#E5E5E5"> to create a locust instance with</font>

280
00:12:03,670 --> 00:12:08,889
like say<font color="#E5E5E5"> 24 slaves and it will just</font>

281
00:12:05,889 --> 00:12:12,790
bring up<font color="#E5E5E5"> 20 plus</font><font color="#CCCCCC"> 1 containers and all of</font>

282
00:12:08,889 --> 00:12:15,819
them will start swarming so this is like

283
00:12:12,790 --> 00:12:18,309
<font color="#E5E5E5">simple diagram</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> architecture on the</font>

284
00:12:15,819 --> 00:12:20,769
left this<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> isolated cluster where</font>

285
00:12:18,309 --> 00:12:23,469
our test runs we have a single master a

286
00:12:20,769 --> 00:12:26,499
bunch of<font color="#E5E5E5"> slaves we also use a redis</font>

287
00:12:23,470 --> 00:12:28,689
<font color="#E5E5E5">instance to share the data across slaves</font>

288
00:12:26,499 --> 00:12:30,730
we pre populate some data from our

289
00:12:28,689 --> 00:12:34,329
database into register before running

290
00:12:30,730 --> 00:12:35,949
<font color="#CCCCCC">the tests</font><font color="#E5E5E5"> so we have like some user IDs</font>

291
00:12:34,329 --> 00:12:38,019
and<font color="#E5E5E5"> some other stuff</font><font color="#CCCCCC"> in the Redis and</font>

292
00:12:35,949 --> 00:12:40,449
slaves can just<font color="#E5E5E5"> peek around the</font><font color="#CCCCCC"> misery I</font>

293
00:12:38,019 --> 00:12:43,179
D from the Redis instance and start

294
00:12:40,449 --> 00:12:47,290
sending<font color="#E5E5E5"> requests</font><font color="#CCCCCC"> before that user</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> our</font>

295
00:12:43,179 --> 00:12:49,449
<font color="#CCCCCC">alpha</font><font color="#E5E5E5"> cluster which</font><font color="#CCCCCC"> is like isolated so</font>

296
00:12:47,290 --> 00:12:53,498
our services is running<font color="#E5E5E5"> your master in</font>

297
00:12:49,449 --> 00:12:55,599
this case so yeah we did<font color="#E5E5E5"> some test runs</font>

298
00:12:53,499 --> 00:12:56,459
<font color="#E5E5E5">and they were quite embarrassing</font>

299
00:12:55,600 --> 00:13:00,429
actually

300
00:12:56,459 --> 00:13:02,738
so we while testing with a load that<font color="#E5E5E5"> we</font>

301
00:13:00,429 --> 00:13:05,769
were expecting to<font color="#E5E5E5"> have soon you noticed</font>

302
00:13:02,739 --> 00:13:08,199
many drop requests in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> test and it</font>

303
00:13:05,769 --> 00:13:09,970
<font color="#E5E5E5">was a single request in our service</font><font color="#CCCCCC"> that</font>

304
00:13:08,199 --> 00:13:15,008
was taking too long<font color="#E5E5E5"> and</font><font color="#CCCCCC"> blocking others</font>

305
00:13:09,970 --> 00:13:18,339
and the queues in our the queues were

306
00:13:15,009 --> 00:13:20,800
were filling<font color="#E5E5E5"> up</font><font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> quickly so</font><font color="#CCCCCC"> we</font>

307
00:13:18,339 --> 00:13:23,680
were dropping the<font color="#CCCCCC"> request so in order</font><font color="#E5E5E5"> to</font>

308
00:13:20,800 --> 00:13:26,370
find out the exact problem<font color="#E5E5E5"> in that</font>

309
00:13:23,680 --> 00:13:28,779
request<font color="#E5E5E5"> we had to</font><font color="#CCCCCC"> add had to add more</font>

310
00:13:26,370 --> 00:13:31,000
instrumentation around<font color="#E5E5E5"> our database</font>

311
00:13:28,779 --> 00:13:34,570
queries around are like<font color="#E5E5E5"> third party</font>

312
00:13:31,000 --> 00:13:36,580
service calls so then we after more

313
00:13:34,570 --> 00:13:38,620
instrumentation we<font color="#CCCCCC"> did the tests again</font>

314
00:13:36,580 --> 00:13:40,959
<font color="#E5E5E5">and we not just that we actually</font>

315
00:13:38,620 --> 00:13:43,839
<font color="#E5E5E5">introduced</font><font color="#CCCCCC"> a regression in</font><font color="#E5E5E5"> a database</font>

316
00:13:40,959 --> 00:13:45,609
query<font color="#E5E5E5"> very recently there was like where</font>

317
00:13:43,839 --> 00:13:47,769
you obvious<font color="#CCCCCC"> optimization</font><font color="#E5E5E5"> so we just</font>

318
00:13:45,610 --> 00:13:51,490
<font color="#E5E5E5">fixed the query and shipped the results</font>

319
00:13:47,769 --> 00:13:54,130
<font color="#CCCCCC">ship the code and this</font><font color="#E5E5E5"> is what we get as</font>

320
00:13:51,490 --> 00:13:57,070
<font color="#CCCCCC">the results</font><font color="#E5E5E5"> so this is average response</font>

321
00:13:54,130 --> 00:13:59,890
time<font color="#E5E5E5"> and for that request specifically</font>

322
00:13:57,070 --> 00:14:02,019
and a yellow line is our<font color="#E5E5E5"> development</font>

323
00:13:59,890 --> 00:14:03,970
environment<font color="#CCCCCC"> pink line is our production</font>

324
00:14:02,019 --> 00:14:06,160
<font color="#E5E5E5">and purple is our beta environment</font><font color="#CCCCCC"> as</font>

325
00:14:03,970 --> 00:14:08,440
you can see the day we fix the issue on

326
00:14:06,160 --> 00:14:11,680
development it just went<font color="#CCCCCC"> down from</font><font color="#E5E5E5"> like</font>

327
00:14:08,440 --> 00:14:14,230
<font color="#CCCCCC">three seconds to just</font><font color="#E5E5E5"> a few milliseconds</font>

328
00:14:11,680 --> 00:14:16,420
then we can also<font color="#E5E5E5"> stage you can also see</font>

329
00:14:14,230 --> 00:14:19,630
the<font color="#CCCCCC"> staged rollout like we have a few</font>

330
00:14:16,420 --> 00:14:22,180
stages in beta and<font color="#E5E5E5"> production so it took</font>

331
00:14:19,630 --> 00:14:24,760
<font color="#E5E5E5">a few</font><font color="#CCCCCC"> days to eventually hit production</font>

332
00:14:22,180 --> 00:14:27,459
and just the fix was on production<font color="#E5E5E5"> then</font>

333
00:14:24,760 --> 00:14:29,860
they all went<font color="#E5E5E5"> down to</font><font color="#CCCCCC"> every</font><font color="#E5E5E5"> milliseconds</font>

334
00:14:27,459 --> 00:14:32,949
so this was like<font color="#E5E5E5"> a bit of a success</font>

335
00:14:29,860 --> 00:14:35,560
story<font color="#CCCCCC"> for us and using locust and</font><font color="#E5E5E5"> yeah</font>

336
00:14:32,950 --> 00:14:39,029
that's all I have today and thanks for

337
00:14:35,560 --> 00:14:39,029
<font color="#E5E5E5">coming and if you have any questions</font>

338
00:14:54,490 --> 00:15:03,380
so so the question<font color="#CCCCCC"> is like whether you</font>

339
00:15:01,670 --> 00:15:05,660
can use<font color="#CCCCCC"> your regular computers to</font>

340
00:15:03,380 --> 00:15:07,520
generate<font color="#E5E5E5"> the load this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> actually</font>

341
00:15:05,660 --> 00:15:10,430
possible<font color="#E5E5E5"> and it's a good solution</font>

342
00:15:07,520 --> 00:15:12,260
<font color="#CCCCCC">because your computers</font><font color="#E5E5E5"> are like pretty</font>

343
00:15:10,430 --> 00:15:14,420
powerful compared to what you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> on</font>

344
00:15:12,260 --> 00:15:16,490
the<font color="#CCCCCC"> collab so</font><font color="#E5E5E5"> you can yeah some of the</font>

345
00:15:14,420 --> 00:15:20,329
<font color="#E5E5E5">tests I I was just running them on my</font>

346
00:15:16,490 --> 00:15:23,180
computer<font color="#CCCCCC"> it's it has like</font><font color="#E5E5E5"> it's 16 cores</font>

347
00:15:20,330 --> 00:15:24,920
<font color="#E5E5E5">or something</font><font color="#CCCCCC"> 8 cores</font><font color="#E5E5E5"> and yeah you can</font>

348
00:15:23,180 --> 00:15:26,750
use them and you can if you can<font color="#E5E5E5"> just be</font>

349
00:15:24,920 --> 00:15:27,979
<font color="#CCCCCC">a less</font><font color="#E5E5E5"> small network of computers in</font>

350
00:15:26,750 --> 00:15:30,230
distributed load

351
00:15:27,980 --> 00:15:54,470
among them yeah that's possible<font color="#CCCCCC"> in it's</font>

352
00:15:30,230 --> 00:15:56,390
a good idea so<font color="#CCCCCC"> the question is like</font>

353
00:15:54,470 --> 00:15:59,570
whether it's possible<font color="#CCCCCC"> to</font><font color="#E5E5E5"> share that data</font>

354
00:15:56,390 --> 00:16:02,900
<font color="#CCCCCC">between like slave instances or any</font>

355
00:15:59,570 --> 00:16:05,240
instance of<font color="#CCCCCC"> low cost no like</font><font color="#E5E5E5"> you can</font>

356
00:16:02,900 --> 00:16:07,730
communicate with<font color="#CCCCCC"> the master</font><font color="#E5E5E5"> but that's</font>

357
00:16:05,240 --> 00:16:10,550
why we<font color="#E5E5E5"> we were using</font><font color="#CCCCCC"> gratis so basically</font>

358
00:16:07,730 --> 00:16:12,920
for example<font color="#CCCCCC"> in our case</font><font color="#E5E5E5"> when when a user</font>

359
00:16:10,550 --> 00:16:15,530
<font color="#E5E5E5">like</font><font color="#CCCCCC"> created a resource in</font><font color="#E5E5E5"> our database</font>

360
00:16:12,920 --> 00:16:17,089
it was also inserting the idea of that

361
00:16:15,530 --> 00:16:19,280
resource<font color="#CCCCCC"> to read this so that some other</font>

362
00:16:17,090 --> 00:16:21,530
users<font color="#E5E5E5"> or some others like and and do</font>

363
00:16:19,280 --> 00:16:23,240
some operations based on<font color="#CCCCCC"> this</font><font color="#E5E5E5"> so you</font>

364
00:16:21,530 --> 00:16:27,670
need to<font color="#E5E5E5"> have a like shaved instance of</font>

365
00:16:23,240 --> 00:16:27,670
<font color="#E5E5E5">something that involves can use</font>

366
00:16:31,779 --> 00:16:37,160
the question is am i familiar with<font color="#CCCCCC"> j</font>

367
00:16:34,999 --> 00:16:39,619
matter and what's like can I compare

368
00:16:37,160 --> 00:16:42,738
them<font color="#E5E5E5"> like I heard about it</font><font color="#CCCCCC"> I read about</font>

369
00:16:39,619 --> 00:16:45,529
<font color="#E5E5E5">it I haven't used it but I think it's</font>

370
00:16:42,739 --> 00:16:48,019
not<font color="#CCCCCC"> possible to provide custom clients</font>

371
00:16:45,529 --> 00:16:52,489
like<font color="#E5E5E5"> that doesn't communicate in HTTP in</font>

372
00:16:48,019 --> 00:16:55,609
J matter<font color="#E5E5E5"> maybe you can I dunno but and</font>

373
00:16:52,489 --> 00:16:59,389
<font color="#E5E5E5">also you cannot provide your user</font>

374
00:16:55,609 --> 00:17:06,860
behavior in code<font color="#CCCCCC"> yeah I guess can you</font>

375
00:16:59,389 --> 00:17:08,209
yeah<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> okay yeah like we</font><font color="#E5E5E5"> compared</font>

376
00:17:06,859 --> 00:17:12,729
some<font color="#E5E5E5"> solutions but I haven't actually</font>

377
00:17:08,209 --> 00:17:12,730
tried<font color="#CCCCCC"> running a lotus with treatment</font>

378
00:17:25,749 --> 00:17:30,799
so the question is how do we<font color="#CCCCCC"> analyze the</font>

379
00:17:29,090 --> 00:17:33,230
results and<font color="#E5E5E5"> can we like integrate with</font>

380
00:17:30,799 --> 00:17:35,299
the<font color="#CCCCCC"> CI to fail the build or something</font>

381
00:17:33,230 --> 00:17:36,830
<font color="#E5E5E5">right now we haven't like completely</font>

382
00:17:35,299 --> 00:17:39,470
automated the process<font color="#E5E5E5"> so it's not</font>

383
00:17:36,830 --> 00:17:41,119
running<font color="#CCCCCC"> on CI we have to like it's just</font>

384
00:17:39,470 --> 00:17:44,240
a single comment<font color="#E5E5E5"> but</font><font color="#CCCCCC"> we have to</font><font color="#E5E5E5"> manually</font>

385
00:17:41,119 --> 00:17:47,029
run it so right now what we<font color="#CCCCCC"> are thinking</font>

386
00:17:44,240 --> 00:17:49,820
<font color="#CCCCCC">about is like local easier like CSV file</font>

387
00:17:47,029 --> 00:17:52,429
<font color="#E5E5E5">and</font><font color="#CCCCCC"> with the response times</font><font color="#E5E5E5"> and stuff so</font>

388
00:17:49,820 --> 00:17:54,799
we want<font color="#E5E5E5"> to have that job running on CI</font>

389
00:17:52,429 --> 00:17:57,320
on Jenkins<font color="#CCCCCC"> maybe not every for</font><font color="#E5E5E5"> every</font>

390
00:17:54,799 --> 00:18:00,019
palookas but like regularly<font color="#E5E5E5"> during</font><font color="#CCCCCC"> the</font>

391
00:17:57,320 --> 00:18:02,418
day and<font color="#CCCCCC"> just compare the differences</font>

392
00:18:00,019 --> 00:18:05,629
like for specific<font color="#E5E5E5"> requests and we can</font>

393
00:18:02,419 --> 00:18:06,980
maybe<font color="#E5E5E5"> if it's up</font><font color="#CCCCCC"> like 10% just file</font><font color="#E5E5E5"> the</font>

394
00:18:05,629 --> 00:18:09,129
<font color="#CCCCCC">job and something like</font><font color="#E5E5E5"> that you can do</font>

395
00:18:06,980 --> 00:18:09,129
<font color="#E5E5E5">that</font>

396
00:18:19,960 --> 00:18:27,480
I don't know so the question is is

397
00:18:24,009 --> 00:18:31,269
lockers disabled<font color="#E5E5E5"> - in Portland</font><font color="#CCCCCC"> so</font>

398
00:18:27,480 --> 00:18:32,980
<font color="#E5E5E5">Caracara like</font><font color="#CCCCCC"> I files and</font><font color="#E5E5E5"> no I like I</font>

399
00:18:31,269 --> 00:18:47,379
haven't<font color="#E5E5E5"> seen anything like that but I</font>

400
00:18:32,980 --> 00:18:49,570
don't<font color="#CCCCCC"> know so the</font><font color="#E5E5E5"> question is if we</font>

401
00:18:47,379 --> 00:18:53,230
<font color="#E5E5E5">notice something on production that</font>

402
00:18:49,570 --> 00:18:56,470
<font color="#CCCCCC">local failed to detect no we haven't so</font>

403
00:18:53,230 --> 00:18:59,850
far<font color="#E5E5E5"> but maybe they are still there and</font>

404
00:18:56,470 --> 00:19:10,119
maybe we have noticed that<font color="#CCCCCC"> random yet</font>

405
00:18:59,850 --> 00:19:21,279
<font color="#E5E5E5">yes please at the back</font><font color="#CCCCCC"> GGI</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> can't fill</font>

406
00:19:10,119 --> 00:19:23,619
here<font color="#E5E5E5"> sorry so instead of using HTTP</font>

407
00:19:21,279 --> 00:19:26,230
protocol<font color="#E5E5E5"> the question was whether you</font>

408
00:19:23,619 --> 00:19:29,259
can<font color="#E5E5E5"> use the RPC protocol as I can say we</font>

409
00:19:26,230 --> 00:19:31,480
can<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are using like totally custom</font>

410
00:19:29,259 --> 00:19:33,460
in-house protocol so if you have a

411
00:19:31,480 --> 00:19:46,450
geophysical<font color="#CCCCCC"> ient</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> Python yes you can</font>

412
00:19:33,460 --> 00:19:48,279
you<font color="#E5E5E5"> can do anything you saw the question</font>

413
00:19:46,450 --> 00:19:49,869
<font color="#E5E5E5">is whether their support and</font><font color="#CCCCCC"> locus for</font>

414
00:19:48,279 --> 00:19:52,720
<font color="#CCCCCC">the rest</font><font color="#E5E5E5"> like at a higher level than</font>

415
00:19:49,869 --> 00:19:55,869
<font color="#E5E5E5">HTTP no I think</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> just gives you a bear</font>

416
00:19:52,720 --> 00:19:57,039
<font color="#E5E5E5">and HTTP client then on top on top of</font>

417
00:19:55,869 --> 00:19:59,639
that maybe<font color="#CCCCCC"> you want to</font><font color="#E5E5E5"> have some</font>

418
00:19:57,039 --> 00:19:59,639
abstractions

419
00:20:22,289 --> 00:20:30,010
<font color="#E5E5E5">so when you want</font><font color="#CCCCCC"> to like yeah I was</font>

420
00:20:27,070 --> 00:20:31,539
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to so the question is when you</font>

421
00:20:30,010 --> 00:20:34,029
want to<font color="#E5E5E5"> like create</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> high load with</font>

422
00:20:31,539 --> 00:20:36,700
like a bunch of<font color="#E5E5E5"> different clusters where</font>

423
00:20:34,029 --> 00:20:38,409
<font color="#E5E5E5">they're not in the same network</font><font color="#CCCCCC"> to how</font>

424
00:20:36,700 --> 00:20:40,990
do you<font color="#E5E5E5"> share data between them basically</font>

425
00:20:38,409 --> 00:20:44,230
<font color="#E5E5E5">so red this is like just our solution</font>

426
00:20:40,990 --> 00:20:47,350
<font color="#E5E5E5">you can still have a like</font><font color="#CCCCCC"> common place</font>

427
00:20:44,230 --> 00:20:49,210
or you can you can split your<font color="#CCCCCC"> data so we</font>

428
00:20:47,350 --> 00:20:51,610
use Redis to pre-populate some data

429
00:20:49,210 --> 00:20:53,620
right you can you can you can<font color="#CCCCCC"> submit</font>

430
00:20:51,610 --> 00:20:55,240
<font color="#CCCCCC">your data</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> for some specific</font><font color="#E5E5E5"> users</font>

431
00:20:53,620 --> 00:20:57,879
<font color="#E5E5E5">just go to this machine and some others</font>

432
00:20:55,240 --> 00:21:01,230
<font color="#E5E5E5">is that so they like among clusters you</font>

433
00:20:57,880 --> 00:21:01,230
don't need to communicate

434
00:21:09,090 --> 00:21:14,279
so the question is what we use to

435
00:21:11,639 --> 00:21:16,139
<font color="#CCCCCC">represent our</font><font color="#E5E5E5"> test reporting so right</font>

436
00:21:14,279 --> 00:21:18,269
now we<font color="#E5E5E5"> are</font><font color="#CCCCCC"> just like manually skimming</font>

437
00:21:16,139 --> 00:21:22,168
through the CSV files and<font color="#E5E5E5"> we have a</font>

438
00:21:18,269 --> 00:21:24,440
dashboard with<font color="#E5E5E5"> arm-like instrumentation</font>

439
00:21:22,169 --> 00:21:27,120
<font color="#E5E5E5">so we are just going through them and</font>

440
00:21:24,440 --> 00:21:29,669
analyzing the results<font color="#E5E5E5"> but when we moved</font>

441
00:21:27,120 --> 00:21:32,189
to CI yeah we need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have an automated</font>

442
00:21:29,669 --> 00:21:36,330
process to<font color="#E5E5E5"> basically compare the results</font>

443
00:21:32,190 --> 00:21:38,749
between different runs no they are not

444
00:21:36,330 --> 00:21:38,749
<font color="#CCCCCC">ultimate</font>

445
00:21:59,560 --> 00:22:04,870
so the question is what's the next<font color="#E5E5E5"> step</font>

446
00:22:01,720 --> 00:22:08,110
<font color="#CCCCCC">for this project</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> and first we</font>

447
00:22:04,870 --> 00:22:09,850
have it<font color="#CCCCCC"> and</font><font color="#E5E5E5"> like we have to go we want</font>

448
00:22:08,110 --> 00:22:12,310
<font color="#E5E5E5">to automate</font><font color="#CCCCCC"> the process definitely</font><font color="#E5E5E5"> to</font>

449
00:22:09,850 --> 00:22:15,010
have<font color="#CCCCCC"> it</font><font color="#E5E5E5"> on CI and also we want to test</font>

450
00:22:12,310 --> 00:22:17,530
some other<font color="#E5E5E5"> back-end service that is</font>

451
00:22:15,010 --> 00:22:20,170
completely<font color="#E5E5E5"> in a different protocol so we</font>

452
00:22:17,530 --> 00:22:23,320
would like to<font color="#CCCCCC"> write a</font><font color="#E5E5E5"> client for</font><font color="#CCCCCC"> that</font>

453
00:22:20,170 --> 00:22:27,420
and it's like a<font color="#CCCCCC"> pub/sub mechanism we</font>

454
00:22:23,320 --> 00:22:27,419
want to test<font color="#CCCCCC"> those as well</font>

455
00:22:48,860 --> 00:22:54,120
yeah so the<font color="#E5E5E5"> question is how do you</font>

456
00:22:51,960 --> 00:22:56,759
prevent like using<font color="#E5E5E5"> the same data</font><font color="#CCCCCC"> getting</font>

457
00:22:54,120 --> 00:22:58,799
<font color="#CCCCCC">the same data from Redis among different</font>

458
00:22:56,759 --> 00:23:03,179
like<font color="#CCCCCC"> lock</font><font color="#E5E5E5"> slaves we just remove the data</font>

459
00:22:58,799 --> 00:23:08,309
<font color="#E5E5E5">so if one user user used use</font><font color="#CCCCCC"> data it</font>

460
00:23:03,179 --> 00:23:10,379
will<font color="#E5E5E5"> just remove it from Redis yeah it's</font>

461
00:23:08,309 --> 00:23:12,658
it's in the code<font color="#E5E5E5"> but what we do is</font><font color="#CCCCCC"> like</font>

462
00:23:10,379 --> 00:23:14,399
<font color="#E5E5E5">if initially</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> provide a number</font><font color="#CCCCCC"> of</font>

463
00:23:12,659 --> 00:23:16,019
<font color="#CCCCCC">user so you want to generate so we take</font>

464
00:23:14,399 --> 00:23:18,268
<font color="#CCCCCC">that</font><font color="#E5E5E5"> number and try populate the data</font>

465
00:23:16,019 --> 00:23:20,879
according to<font color="#CCCCCC"> that so if it's 1,000 users</font>

466
00:23:18,269 --> 00:23:23,220
we will have<font color="#CCCCCC"> 1,000</font><font color="#E5E5E5"> different user IDs in</font>

467
00:23:20,879 --> 00:23:35,300
our<font color="#E5E5E5"> Eddy's instance so each one can take</font>

468
00:23:23,220 --> 00:23:40,660
<font color="#E5E5E5">just one thank you</font>

469
00:23:35,300 --> 00:23:40,659
[Applause]

