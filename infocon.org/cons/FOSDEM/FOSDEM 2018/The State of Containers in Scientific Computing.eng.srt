1
00:00:06,850 --> 00:00:12,190
<font color="#E5E5E5">all right good morning</font><font color="#CCCCCC"> everybody</font>

2
00:00:09,709 --> 00:00:12,190
I'm<font color="#CCCCCC"> George</font>

3
00:00:13,210 --> 00:00:18,880
computing<font color="#E5E5E5"> and why we're doing everything</font>

4
00:00:15,610 --> 00:00:19,439
different than anybody<font color="#E5E5E5"> else</font><font color="#CCCCCC"> I work for</font>

5
00:00:18,880 --> 00:00:21,880
nurse k--

6
00:00:19,440 --> 00:00:24,970
which is the primary<font color="#E5E5E5"> difficulty reading</font>

7
00:00:21,880 --> 00:00:27,759
facility of the office of science of the

8
00:00:24,970 --> 00:00:29,890
<font color="#CCCCCC">US government we have two supercomputers</font>

9
00:00:27,759 --> 00:00:32,649
named<font color="#CCCCCC"> cauri and</font><font color="#E5E5E5"> Edison both of them are</font>

10
00:00:29,890 --> 00:00:35,020
crane machines<font color="#E5E5E5"> and three smaller</font>

11
00:00:32,649 --> 00:00:38,500
clusters so there would be like<font color="#E5E5E5"> nearly a</font>

12
00:00:35,020 --> 00:00:41,860
million cores<font color="#E5E5E5"> and around 50 petabytes of</font>

13
00:00:38,500 --> 00:00:45,309
storage in varying speeds<font color="#CCCCCC"> we serve</font><font color="#E5E5E5"> more</font>

14
00:00:41,860 --> 00:00:47,340
<font color="#CCCCCC">than 6,000 scientists at nurse and all</font>

15
00:00:45,309 --> 00:00:49,928
of the<font color="#CCCCCC"> science that happens is open and</font>

16
00:00:47,340 --> 00:00:52,120
the fields<font color="#CCCCCC"> that we do nearly everything</font>

17
00:00:49,929 --> 00:00:55,059
from astrophysics<font color="#CCCCCC"> to</font><font color="#E5E5E5"> energy physics</font>

18
00:00:52,120 --> 00:01:00,519
genomics so jobs that are like<font color="#E5E5E5"> 8,000</font>

19
00:00:55,059 --> 00:01:04,950
nodes or<font color="#E5E5E5"> one so can</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> get a quick show</font>

20
00:01:00,519 --> 00:01:08,620
of<font color="#E5E5E5"> hands who of you knows</font><font color="#CCCCCC"> what HPC is</font>

21
00:01:04,950 --> 00:01:15,460
<font color="#CCCCCC">well this</font><font color="#E5E5E5"> more than I thought</font><font color="#CCCCCC"> who knows</font>

22
00:01:08,620 --> 00:01:18,369
what<font color="#CCCCCC"> Poker is so each piece in a</font>

23
00:01:15,460 --> 00:01:20,530
nutshell is you have a large<font color="#CCCCCC"> number of</font>

24
00:01:18,369 --> 00:01:22,810
compute nodes connected by<font color="#CCCCCC"> a high-speed</font>

25
00:01:20,530 --> 00:01:25,509
<font color="#E5E5E5">network which usually is something</font><font color="#CCCCCC"> like</font>

26
00:01:22,810 --> 00:01:28,540
<font color="#CCCCCC">InfiniBand</font><font color="#E5E5E5"> or something highly</font>

27
00:01:25,509 --> 00:01:31,719
proprietary like<font color="#CCCCCC"> ares you access data</font>

28
00:01:28,540 --> 00:01:34,110
stored in<font color="#E5E5E5"> a parallel file system</font><font color="#CCCCCC"> you run</font>

29
00:01:31,719 --> 00:01:36,699
the whole<font color="#CCCCCC"> thing is a shared resource</font><font color="#E5E5E5"> and</font>

30
00:01:34,110 --> 00:01:41,289
<font color="#E5E5E5">all of that is orchestrated by workload</font>

31
00:01:36,700 --> 00:01:42,880
manager in<font color="#E5E5E5"> your case that's learn so one</font>

32
00:01:41,290 --> 00:01:46,020
of<font color="#CCCCCC"> the question is what's</font><font color="#E5E5E5"> the hardest</font>

33
00:01:42,880 --> 00:01:46,020
problem in scientific computing

34
00:01:46,500 --> 00:01:53,439
<font color="#E5E5E5">surprisingly the answer to that might be</font>

35
00:01:50,049 --> 00:01:56,560
<font color="#E5E5E5">installing software the way it usually</font>

36
00:01:53,439 --> 00:01:58,179
works<font color="#E5E5E5"> is that you</font><font color="#CCCCCC"> have a</font><font color="#E5E5E5"> stack that's</font>

37
00:01:56,560 --> 00:02:00,159
provided by<font color="#E5E5E5"> the center and you use a</font>

38
00:01:58,180 --> 00:02:02,950
modules tool that can load different

39
00:02:00,159 --> 00:02:04,990
version of<font color="#CCCCCC"> that software so you have the</font>

40
00:02:02,950 --> 00:02:07,359
<font color="#E5E5E5">selection of</font><font color="#CCCCCC"> L mode the classic modules</font>

41
00:02:04,990 --> 00:02:09,669
in modules for this is a process that's

42
00:02:07,359 --> 00:02:11,790
<font color="#E5E5E5">usually error prone because scientific</font>

43
00:02:09,669 --> 00:02:14,530
software<font color="#E5E5E5"> is surprisingly hard to build</font>

44
00:02:11,790 --> 00:02:17,590
it's a slow process in the sense of when

45
00:02:14,530 --> 00:02:18,900
you open a<font color="#CCCCCC"> ticket with</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> Center</font><font color="#E5E5E5"> - for</font>

46
00:02:17,590 --> 00:02:23,250
example<font color="#CCCCCC"> built tensorflow</font>

47
00:02:18,900 --> 00:02:23,250
that's<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> take weeks to months</font>

48
00:02:23,480 --> 00:02:27,440
makes the<font color="#E5E5E5"> stacks unique so if you go to</font>

49
00:02:25,640 --> 00:02:29,690
an HPC Center you<font color="#CCCCCC"> have a software</font><font color="#E5E5E5"> stack</font>

50
00:02:27,440 --> 00:02:31,129
there and you want to go to an HPC

51
00:02:29,690 --> 00:02:34,760
Center that's<font color="#E5E5E5"> an hour away it's gonna</font>

52
00:02:31,129 --> 00:02:36,980
look<font color="#CCCCCC"> very different</font><font color="#E5E5E5"> and of course that's</font>

53
00:02:34,760 --> 00:02:38,690
<font color="#E5E5E5">not portable</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> the least is you</font>

54
00:02:36,980 --> 00:02:41,810
should use<font color="#CCCCCC"> repealed to software</font><font color="#E5E5E5"> in home</font>

55
00:02:38,690 --> 00:02:43,730
directories which depend on the module

56
00:02:41,810 --> 00:02:51,290
system<font color="#CCCCCC"> which makes it even harder to</font>

57
00:02:43,730 --> 00:02:53,030
<font color="#E5E5E5">port and an aqua camera so doctor was an</font>

58
00:02:51,290 --> 00:02:55,150
interesting<font color="#CCCCCC"> solution for the problem for</font>

59
00:02:53,030 --> 00:02:58,629
<font color="#E5E5E5">us</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> he made</font><font color="#CCCCCC"> everything simple</font>

60
00:02:55,150 --> 00:03:01,760
portable and<font color="#E5E5E5"> relatively reproducible and</font>

61
00:02:58,629 --> 00:03:04,160
it leveraged<font color="#E5E5E5"> and I'm seeing a relatively</font>

62
00:03:01,760 --> 00:03:06,470
stable API<font color="#E5E5E5"> is like namespaces and</font><font color="#CCCCCC"> C</font>

63
00:03:04,160 --> 00:03:08,510
groups<font color="#E5E5E5"> and I do</font><font color="#CCCCCC"> see relatively stable</font>

64
00:03:06,470 --> 00:03:13,640
<font color="#E5E5E5">because if you use docker on</font><font color="#CCCCCC"> Center 7</font>

65
00:03:08,510 --> 00:03:15,950
<font color="#E5E5E5">you</font><font color="#CCCCCC"> might've run into a few bugs</font><font color="#E5E5E5"> and we</font>

66
00:03:13,640 --> 00:03:18,078
of course<font color="#CCCCCC"> wanted to use it and then we</font>

67
00:03:15,950 --> 00:03:23,328
<font color="#E5E5E5">cried</font><font color="#CCCCCC"> for a bit because</font><font color="#E5E5E5"> it was not</font><font color="#CCCCCC"> a</font>

68
00:03:18,079 --> 00:03:25,760
good<font color="#E5E5E5"> fit for HPC so we would really</font>

69
00:03:23,329 --> 00:03:30,139
would have liked to<font color="#E5E5E5"> use docker at the</font>

70
00:03:25,760 --> 00:03:34,940
time<font color="#E5E5E5"> but and that's not to shame talker</font>

71
00:03:30,139 --> 00:03:37,099
<font color="#E5E5E5">it's just the another client base for us</font>

72
00:03:34,940 --> 00:03:38,959
it was a it's very<font color="#E5E5E5"> hard to</font><font color="#CCCCCC"> have a shared</font>

73
00:03:37,099 --> 00:03:41,599
machine<font color="#E5E5E5"> installed the docker teaming on</font>

74
00:03:38,959 --> 00:03:44,510
the shared machine because it's

75
00:03:41,599 --> 00:03:48,200
basically<font color="#E5E5E5"> a</font><font color="#CCCCCC"> root equivalent and as HPC</font>

76
00:03:44,510 --> 00:03:49,548
people are quite pure istic<font color="#CCCCCC"> you're not</font>

77
00:03:48,200 --> 00:03:52,310
going to be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> run a demon or</font>

78
00:03:49,549 --> 00:03:54,049
compute node nearly ever if you<font color="#E5E5E5"> have a</font>

79
00:03:52,310 --> 00:03:57,919
tightly coupled application and you have

80
00:03:54,049 --> 00:04:01,250
<font color="#E5E5E5">a jitter in your compute nodes that</font>

81
00:03:57,919 --> 00:04:02,260
affects performance negatively and we

82
00:04:01,250 --> 00:04:06,590
don't do that

83
00:04:02,260 --> 00:04:09,500
so let me<font color="#CCCCCC"> thought okay if you take</font>

84
00:04:06,590 --> 00:04:12,769
<font color="#CCCCCC">talker as a whole or containers as a</font>

85
00:04:09,500 --> 00:04:17,180
whole<font color="#E5E5E5"> what features do we want all of</font>

86
00:04:12,769 --> 00:04:20,620
those<font color="#CCCCCC"> systems so we wanted a</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> to run</font>

87
00:04:17,180 --> 00:04:24,139
<font color="#E5E5E5">docker on Cory Edison very specialist</font>

88
00:04:20,620 --> 00:04:25,910
<font color="#CCCCCC">Christams</font><font color="#E5E5E5"> we didn't need the fancy stuff</font>

89
00:04:24,139 --> 00:04:27,410
like overlay networks because to be

90
00:04:25,910 --> 00:04:29,270
frank<font color="#E5E5E5"> if you run a proprietary</font>

91
00:04:27,410 --> 00:04:33,409
<font color="#E5E5E5">interconnect the chances of that working</font>

92
00:04:29,270 --> 00:04:36,159
<font color="#E5E5E5">ever are very slim we didn't</font><font color="#CCCCCC"> big</font>

93
00:04:33,409 --> 00:04:39,699
<font color="#CCCCCC">plug-ins like</font><font color="#E5E5E5"> storage provisioning</font>

94
00:04:36,159 --> 00:04:41,558
using those volume plugins<font color="#CCCCCC"> because we do</font>

95
00:04:39,699 --> 00:04:45,759
<font color="#E5E5E5">have a parallel file system so that's</font>

96
00:04:41,559 --> 00:04:50,550
<font color="#E5E5E5">handy first</font><font color="#CCCCCC"> swan kubernetes the</font>

97
00:04:45,759 --> 00:04:53,369
equivalent for us would be<font color="#CCCCCC"> llamas learn</font>

98
00:04:50,550 --> 00:04:57,179
optimally we do not want to run a demon

99
00:04:53,369 --> 00:04:59,439
on the<font color="#E5E5E5"> computers we can have it secure</font>

100
00:04:57,179 --> 00:05:02,378
<font color="#E5E5E5">depends</font><font color="#CCCCCC"> on your</font><font color="#E5E5E5"> definition of secure</font>

101
00:04:59,439 --> 00:05:05,379
right<font color="#E5E5E5"> and scalable which means if you</font>

102
00:05:02,379 --> 00:05:07,929
take<font color="#E5E5E5"> a topic container put it on 10,000</font>

103
00:05:05,379 --> 00:05:12,399
nodes at the<font color="#CCCCCC"> same time and spin them</font><font color="#E5E5E5"> up</font>

104
00:05:07,929 --> 00:05:14,529
at the same time<font color="#E5E5E5"> that should work and as</font>

105
00:05:12,399 --> 00:05:20,939
a bonus<font color="#E5E5E5"> it should work</font><font color="#CCCCCC"> in all the</font>

106
00:05:14,529 --> 00:05:22,749
<font color="#E5E5E5">kernels like</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> 6 for</font><font color="#CCCCCC"> example and</font>

107
00:05:20,939 --> 00:05:25,199
apparently the people<font color="#CCCCCC"> that nursed were</font>

108
00:05:22,749 --> 00:05:34,839
not the only<font color="#E5E5E5"> one with</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> idea</font><font color="#CCCCCC"> so in</font>

109
00:05:25,199 --> 00:05:38,529
<font color="#E5E5E5">early to 2015 shifter popped up end of</font>

110
00:05:34,839 --> 00:05:45,759
2015 singularity and a bit<font color="#E5E5E5"> later</font><font color="#CCCCCC"> charlie</font>

111
00:05:38,529 --> 00:05:48,610
cloud surprising some of you might<font color="#E5E5E5"> say</font>

112
00:05:45,759 --> 00:05:51,429
<font color="#E5E5E5">you talker is not on the slide</font><font color="#CCCCCC"> it is</font>

113
00:05:48,610 --> 00:05:52,839
<font color="#CCCCCC">very correct because</font><font color="#E5E5E5"> until yesterday I</font>

114
00:05:51,429 --> 00:05:55,719
didn't know that it existed<font color="#CCCCCC"> and I'm</font>

115
00:05:52,839 --> 00:05:57,490
sorry<font color="#E5E5E5"> for</font><font color="#CCCCCC"> that the governance of shifter</font>

116
00:05:55,719 --> 00:06:00,849
is it's developed at nurse<font color="#E5E5E5"> charlie cloud</font>

117
00:05:57,490 --> 00:06:01,919
is the<font color="#CCCCCC"> Los Alamos National Lab that have</font>

118
00:06:00,849 --> 00:06:04,349
<font color="#CCCCCC">even</font><font color="#E5E5E5"> more stringent security</font>

119
00:06:01,919 --> 00:06:06,519
requirements than we have and

120
00:06:04,349 --> 00:06:09,610
singularity<font color="#E5E5E5"> started at Lawrence Berkeley</font>

121
00:06:06,519 --> 00:06:11,709
<font color="#CCCCCC">National Lab as well</font><font color="#E5E5E5"> and nurse is part</font>

122
00:06:09,610 --> 00:06:15,039
of Lawrence Berkeley National Lab but is

123
00:06:11,709 --> 00:06:18,009
now run by<font color="#E5E5E5"> SCI labs the</font><font color="#CCCCCC"> to commercial</font>

124
00:06:15,039 --> 00:06:21,159
<font color="#E5E5E5">support for it the mechanisms that those</font>

125
00:06:18,009 --> 00:06:23,229
tools used to<font color="#E5E5E5"> basically construct the</font>

126
00:06:21,159 --> 00:06:24,729
container and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> Sheree</font><font color="#E5E5E5"> into the</font>

127
00:06:23,229 --> 00:06:28,409
things you wanna<font color="#E5E5E5"> do in a container is</font>

128
00:06:24,729 --> 00:06:31,839
set you ad for shifter<font color="#CCCCCC"> charlie cloud</font>

129
00:06:28,409 --> 00:06:34,149
because<font color="#E5E5E5"> set you ad is considered a</font>

130
00:06:31,839 --> 00:06:36,519
<font color="#CCCCCC">security risk uses exclusively</font><font color="#E5E5E5"> user name</font>

131
00:06:34,149 --> 00:06:42,939
spaces and singularity uses a mix of

132
00:06:36,519 --> 00:06:45,610
both<font color="#CCCCCC"> mmm the way those three tools work</font>

133
00:06:42,939 --> 00:06:47,800
is shifter as well as<font color="#CCCCCC"> Charlie</font><font color="#E5E5E5"> cloud</font>

134
00:06:45,610 --> 00:06:48,050
<font color="#E5E5E5">leverage</font><font color="#CCCCCC"> talker and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> docker file to</font>

135
00:06:47,800 --> 00:06:50,349
be

136
00:06:48,050 --> 00:06:53,360
docker container then you<font color="#E5E5E5"> pulled it in</font>

137
00:06:50,349 --> 00:06:56,419
to your to<font color="#CCCCCC"> your system converted to a</font>

138
00:06:53,360 --> 00:06:59,150
native format<font color="#E5E5E5"> better suited for this</font>

139
00:06:56,419 --> 00:07:02,030
massively parallel use case<font color="#E5E5E5"> and then</font>

140
00:06:59,150 --> 00:07:04,789
around it<font color="#CCCCCC"> circularity works</font><font color="#E5E5E5"> nearly the</font>

141
00:07:02,030 --> 00:07:07,250
<font color="#E5E5E5">same way except that</font><font color="#CCCCCC"> syncretic</font><font color="#E5E5E5"> can</font>

142
00:07:04,789 --> 00:07:09,680
import docker files but they have their

143
00:07:07,250 --> 00:07:13,159
own recipe format<font color="#E5E5E5"> which resembles</font><font color="#CCCCCC"> RPM a</font>

144
00:07:09,680 --> 00:07:16,159
bit to satisfy the needs of scientific

145
00:07:13,159 --> 00:07:20,060
users a bit more so the image formats

146
00:07:16,159 --> 00:07:21,800
are interesting enough<font color="#E5E5E5"> as shifter and a</font>

147
00:07:20,060 --> 00:07:25,550
recent version<font color="#CCCCCC"> of singularity</font><font color="#E5E5E5"> you squash</font>

148
00:07:21,800 --> 00:07:27,050
<font color="#E5E5E5">efest</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> so you take</font><font color="#CCCCCC"> a docker image you</font>

149
00:07:25,550 --> 00:07:29,419
<font color="#E5E5E5">flatten it you put it</font><font color="#CCCCCC"> into a squash</font>

150
00:07:27,050 --> 00:07:31,400
surface when you start<font color="#CCCCCC"> running</font><font color="#E5E5E5"> the</font>

151
00:07:29,419 --> 00:07:34,969
container you loop<font color="#E5E5E5"> on to squash surface</font>

152
00:07:31,400 --> 00:07:38,539
which has<font color="#E5E5E5"> a very nice side effect</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> you</font>

153
00:07:34,969 --> 00:07:40,460
have a large<font color="#E5E5E5"> parallel file system and</font>

154
00:07:38,539 --> 00:07:44,479
<font color="#E5E5E5">you start</font><font color="#CCCCCC"> 10,000 chops at the same time</font>

155
00:07:40,460 --> 00:07:46,340
you're gonna hit the<font color="#E5E5E5"> metadata server for</font>

156
00:07:44,479 --> 00:07:50,330
every<font color="#E5E5E5"> single invocation of</font><font color="#CCCCCC"> the container</font>

157
00:07:46,340 --> 00:07:52,638
that<font color="#CCCCCC"> you do if you loop mount</font><font color="#E5E5E5"> a large</font>

158
00:07:50,330 --> 00:07:54,620
image<font color="#E5E5E5"> all of the metadata operations are</font>

159
00:07:52,639 --> 00:07:56,750
local to the node which makes the

160
00:07:54,620 --> 00:07:59,539
scalable<font color="#CCCCCC"> so that's why we do it this way</font>

161
00:07:56,750 --> 00:08:02,000
<font color="#CCCCCC">charlie cloth is a bit of a different</font>

162
00:07:59,539 --> 00:08:04,310
approach<font color="#CCCCCC"> it</font><font color="#E5E5E5"> uses tar files and sips them</font>

163
00:08:02,000 --> 00:08:07,310
to<font color="#CCCCCC"> ram disk on the local node and runs</font>

164
00:08:04,310 --> 00:08:09,560
from there the<font color="#E5E5E5"> reason for that is</font><font color="#CCCCCC"> that</font>

165
00:08:07,310 --> 00:08:13,250
<font color="#CCCCCC">Charlie</font><font color="#E5E5E5"> cloud is pretty lightweight</font><font color="#CCCCCC"> so</font>

166
00:08:09,560 --> 00:08:16,460
if you<font color="#E5E5E5"> compare those tools by size just</font>

167
00:08:13,250 --> 00:08:18,919
code size which is a very dubious metric

168
00:08:16,460 --> 00:08:22,340
I know but<font color="#E5E5E5"> it's shifter is 20,000 lines</font>

169
00:08:18,919 --> 00:08:25,659
of<font color="#E5E5E5"> code singularity is also 20,000 and</font>

170
00:08:22,340 --> 00:08:29,060
<font color="#CCCCCC">Charlie cloud weighs in about a thousand</font>

171
00:08:25,659 --> 00:08:31,539
so the reason why I can build a

172
00:08:29,060 --> 00:08:33,320
container with that little<font color="#E5E5E5"> code is that</font>

173
00:08:31,539 --> 00:08:37,610
<font color="#CCCCCC">it's not rocket science</font>

174
00:08:33,320 --> 00:08:39,440
really so these<font color="#E5E5E5"> 13 lines of shell script</font>

175
00:08:37,610 --> 00:08:41,539
<font color="#E5E5E5">construct a container that</font><font color="#CCCCCC"> you can run</font>

176
00:08:39,440 --> 00:08:44,720
on<font color="#E5E5E5"> a recent Linux distribution</font><font color="#CCCCCC"> so the</font>

177
00:08:41,539 --> 00:08:47,180
way that works<font color="#E5E5E5"> is you bootstrap</font><font color="#CCCCCC"> in this</font>

178
00:08:44,720 --> 00:08:49,220
case the Debian or<font color="#E5E5E5"> s you can use</font>

179
00:08:47,180 --> 00:08:53,989
anything you like<font color="#CCCCCC"> into a folder called</font>

180
00:08:49,220 --> 00:08:56,120
container FS<font color="#E5E5E5"> you set up namespaces mount</font>

181
00:08:53,990 --> 00:08:59,329
the folder to itself and make<font color="#E5E5E5"> it private</font>

182
00:08:56,120 --> 00:09:00,739
<font color="#E5E5E5">which which means that if you</font>

183
00:08:59,329 --> 00:09:03,049
<font color="#E5E5E5">things in the container</font><font color="#CCCCCC"> that doesn't</font>

184
00:09:00,739 --> 00:09:06,920
propagate to<font color="#E5E5E5"> your host operating</font><font color="#CCCCCC"> system</font>

185
00:09:03,049 --> 00:09:09,079
so for example as we<font color="#CCCCCC"> mount proxies</font><font color="#E5E5E5"> see</font>

186
00:09:06,920 --> 00:09:11,988
stamp and run<font color="#E5E5E5"> if you unmount them you</font>

187
00:09:09,079 --> 00:09:14,388
don't<font color="#E5E5E5"> want</font><font color="#CCCCCC"> them from the</font><font color="#E5E5E5"> host then you</font>

188
00:09:11,989 --> 00:09:16,489
people<font color="#CCCCCC"> Drude into the container exit</font>

189
00:09:14,389 --> 00:09:20,149
passion that's it in a nutshell that's

190
00:09:16,489 --> 00:09:21,439
what<font color="#E5E5E5"> a container is and I think this is</font>

191
00:09:20,149 --> 00:09:24,110
important to understand you still using

192
00:09:21,439 --> 00:09:30,259
the<font color="#CCCCCC"> host kernel of course</font><font color="#E5E5E5"> and it's</font>

193
00:09:24,110 --> 00:09:34,369
relatively uncontained which might be a

194
00:09:30,259 --> 00:09:35,929
bad thing<font color="#E5E5E5"> in general</font><font color="#CCCCCC"> in this case it's</font>

195
00:09:34,369 --> 00:09:40,189
actually<font color="#E5E5E5"> quite beneficial because what</font>

196
00:09:35,929 --> 00:09:42,139
you do if you have<font color="#E5E5E5"> a takabal application</font>

197
00:09:40,189 --> 00:09:45,379
several of them running<font color="#E5E5E5"> on a single</font><font color="#CCCCCC"> node</font>

198
00:09:42,139 --> 00:09:48,519
you share memory so you actually we

199
00:09:45,379 --> 00:09:48,519
don't need the<font color="#E5E5E5"> containment</font>

200
00:09:48,759 --> 00:10:00,319
so as HPC is a field where<font color="#CCCCCC"> you usually</font>

201
00:09:57,559 --> 00:10:01,759
get libraries provided by the vendor<font color="#CCCCCC"> so</font>

202
00:10:00,319 --> 00:10:03,469
if you have a proprietary<font color="#CCCCCC"> high-speed</font>

203
00:10:01,759 --> 00:10:05,480
interconnect<font color="#E5E5E5"> and you use some</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of</font>

204
00:10:03,470 --> 00:10:07,459
message passing<font color="#CCCCCC"> libraries</font><font color="#E5E5E5"> you're gonna</font>

205
00:10:05,480 --> 00:10:09,379
get<font color="#CCCCCC"> those from</font><font color="#E5E5E5"> your vendor and</font><font color="#CCCCCC"> you</font>

206
00:10:07,459 --> 00:10:13,669
should use them<font color="#E5E5E5"> because they're highly</font>

207
00:10:09,379 --> 00:10:16,449
optimized and they do<font color="#E5E5E5"> change the</font>

208
00:10:13,669 --> 00:10:20,569
performance<font color="#CCCCCC"> of the things you run so</font>

209
00:10:16,449 --> 00:10:22,998
another use case for accessing<font color="#CCCCCC"> Hardware</font>

210
00:10:20,569 --> 00:10:24,829
<font color="#CCCCCC">directly would be GPUs of course</font><font color="#E5E5E5"> so</font>

211
00:10:22,999 --> 00:10:26,869
<font color="#CCCCCC">that's a</font><font color="#E5E5E5"> problem that</font><font color="#CCCCCC"> I guess many</font><font color="#E5E5E5"> of</font>

212
00:10:24,829 --> 00:10:29,238
you have if you<font color="#E5E5E5"> want to do machine</font>

213
00:10:26,869 --> 00:10:32,239
<font color="#E5E5E5">learning</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> example is a popular topic</font>

214
00:10:29,239 --> 00:10:36,619
at the moment<font color="#CCCCCC"> you somehow need to access</font>

215
00:10:32,239 --> 00:10:39,139
the GPU<font color="#E5E5E5"> which violates this whole</font>

216
00:10:36,619 --> 00:10:42,139
containment thought so you're basically

217
00:10:39,139 --> 00:10:45,799
breaking<font color="#E5E5E5"> the wall and mapping stuff from</font>

218
00:10:42,139 --> 00:10:47,929
the host into<font color="#E5E5E5"> your container which could</font>

219
00:10:45,799 --> 00:10:50,449
be a<font color="#E5E5E5"> problem it depends from and on what</font>

220
00:10:47,929 --> 00:10:53,480
you looking<font color="#CCCCCC"> for it so</font><font color="#E5E5E5"> what you</font><font color="#CCCCCC"> usually</font>

221
00:10:50,449 --> 00:10:56,738
do using GPUs<font color="#E5E5E5"> and as an example</font><font color="#CCCCCC"> you bind</font>

222
00:10:53,480 --> 00:10:59,449
the GPU device like the<font color="#CCCCCC"> F Nvidia zero</font>

223
00:10:56,739 --> 00:11:01,819
just<font color="#E5E5E5"> believe</font><font color="#CCCCCC"> Nvidia into the container</font>

224
00:10:59,449 --> 00:11:04,729
<font color="#E5E5E5">then you inject the host libraries so</font>

225
00:11:01,819 --> 00:11:06,378
you take live<font color="#CCCCCC"> CUDA</font><font color="#E5E5E5"> torso which is a part</font>

226
00:11:04,730 --> 00:11:08,689
of the driver injected into the

227
00:11:06,379 --> 00:11:10,490
container<font color="#E5E5E5"> either you do that manually</font>

228
00:11:08,689 --> 00:11:14,630
<font color="#E5E5E5">which is relatively</font>

229
00:11:10,490 --> 00:11:17,480
easy to do<font color="#E5E5E5"> or well which is relatively</font>

230
00:11:14,630 --> 00:11:19,910
<font color="#E5E5E5">hard to do after or you</font><font color="#CCCCCC"> sleep</font><font color="#E5E5E5"> in video</font>

231
00:11:17,480 --> 00:11:22,190
container which conveniently automates

232
00:11:19,910 --> 00:11:24,500
the process you tell it which namespace

233
00:11:22,190 --> 00:11:27,860
<font color="#E5E5E5">you</font><font color="#CCCCCC"> wanna make cheap you ready and it</font>

234
00:11:24,500 --> 00:11:31,220
does that<font color="#CCCCCC"> for you a considerable</font>

235
00:11:27,860 --> 00:11:34,250
<font color="#CCCCCC">downside in the case</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that because</font>

236
00:11:31,220 --> 00:11:36,950
you're propagating whatever you have on

237
00:11:34,250 --> 00:11:40,580
<font color="#CCCCCC">the host</font><font color="#E5E5E5"> into the container you need to</font>

238
00:11:36,950 --> 00:11:43,190
be a bi compatible so<font color="#E5E5E5"> if for whatever</font>

239
00:11:40,580 --> 00:11:47,950
reason and<font color="#CCCCCC"> media in three years</font><font color="#E5E5E5"> breaks</font>

240
00:11:43,190 --> 00:11:49,580
this compatibility<font color="#CCCCCC"> on accident or not</font><font color="#E5E5E5"> or</font>

241
00:11:47,950 --> 00:11:51,560
for a good reason

242
00:11:49,580 --> 00:11:53,770
who knows<font color="#E5E5E5"> your container is not going to</font>

243
00:11:51,560 --> 00:11:57,770
be<font color="#CCCCCC"> able to run anymore</font>

244
00:11:53,770 --> 00:12:00,800
so that's a bit<font color="#E5E5E5"> of a downside</font><font color="#CCCCCC"> and other</font>

245
00:11:57,770 --> 00:12:04,209
<font color="#CCCCCC">than said which many of you will ask who</font>

246
00:12:00,800 --> 00:12:09,229
<font color="#CCCCCC">their</font><font color="#E5E5E5"> static linking anymore HPC does</font>

247
00:12:04,209 --> 00:12:10,819
because I mean<font color="#E5E5E5"> if you run a program and</font>

248
00:12:09,230 --> 00:12:12,470
the<font color="#CCCCCC"> program loads let's say</font><font color="#E5E5E5"> a hundred</font>

249
00:12:10,820 --> 00:12:16,250
<font color="#E5E5E5">shared libraries and you do that on ten</font>

250
00:12:12,470 --> 00:12:19,160
<font color="#E5E5E5">thousand dollars in parallel that is</font><font color="#CCCCCC"> a</font>

251
00:12:16,250 --> 00:12:21,350
<font color="#E5E5E5">quite expensive operation so that</font>

252
00:12:19,160 --> 00:12:24,050
<font color="#CCCCCC">doesn't</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> you rely on the</font>

253
00:12:21,350 --> 00:12:28,790
loader to<font color="#E5E5E5"> pull in those libraries into</font>

254
00:12:24,050 --> 00:12:32,149
your<font color="#CCCCCC"> guests program and also a thing</font>

255
00:12:28,790 --> 00:12:35,000
<font color="#E5E5E5">that not many will run into if you have</font>

256
00:12:32,149 --> 00:12:38,720
<font color="#CCCCCC">a modern Linux distribution now like</font>

257
00:12:35,000 --> 00:12:40,520
let's say<font color="#CCCCCC"> Susa for you</font><font color="#E5E5E5"> to and</font><font color="#CCCCCC"> you try</font><font color="#E5E5E5"> to</font>

258
00:12:38,720 --> 00:12:42,980
run it on a to six<font color="#E5E5E5"> kernel it's not going</font>

259
00:12:40,520 --> 00:12:45,170
to work<font color="#E5E5E5"> by default because the</font><font color="#CCCCCC"> chilli bc</font>

260
00:12:42,980 --> 00:12:48,680
in modern linux needs at least a 3.0

261
00:12:45,170 --> 00:12:50,469
kernel<font color="#E5E5E5"> so of course you can argue who is</font>

262
00:12:48,680 --> 00:12:53,300
<font color="#E5E5E5">going to use it to six kernel anymore</font>

263
00:12:50,470 --> 00:12:56,300
<font color="#E5E5E5">the other argument you can</font><font color="#CCCCCC"> make is in</font>

264
00:12:53,300 --> 00:12:59,839
<font color="#E5E5E5">five to ten years if you want to</font>

265
00:12:56,300 --> 00:13:01,099
reproduce your science are you still

266
00:12:59,839 --> 00:13:06,110
going<font color="#E5E5E5"> to be able to run your container</font>

267
00:13:01,100 --> 00:13:08,630
<font color="#E5E5E5">it's something to keep in mind then</font>

268
00:13:06,110 --> 00:13:10,310
there<font color="#E5E5E5"> are other problems</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> example</font>

269
00:13:08,630 --> 00:13:13,640
this is a docker file that<font color="#CCCCCC"> installs</font>

270
00:13:10,310 --> 00:13:17,689
<font color="#CCCCCC">tensorflow</font><font color="#E5E5E5"> from an ubuntu 18.4 base</font>

271
00:13:13,640 --> 00:13:20,870
image in sauce<font color="#E5E5E5"> python tensorflow uses</font>

272
00:13:17,690 --> 00:13:21,980
some AI program that<font color="#CCCCCC"> i don't know it's</font>

273
00:13:20,870 --> 00:13:27,650
cancer

274
00:13:21,980 --> 00:13:36,050
and then runs that so<font color="#E5E5E5"> there is a very</font>

275
00:13:27,650 --> 00:13:39,290
intricate problem with<font color="#E5E5E5"> this speed so on</font>

276
00:13:36,050 --> 00:13:41,900
a<font color="#E5E5E5"> very broad level</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> produce a</font>

277
00:13:39,290 --> 00:13:44,959
container that<font color="#CCCCCC"> you wanna that gets used</font>

278
00:13:41,900 --> 00:13:46,760
<font color="#CCCCCC">by</font><font color="#E5E5E5"> many people you're not going to build</font>

279
00:13:44,960 --> 00:13:47,870
a container optimized<font color="#CCCCCC"> in the sense if</font>

280
00:13:46,760 --> 00:13:50,930
you're not<font color="#E5E5E5"> going to enable machine</font>

281
00:13:47,870 --> 00:13:53,540
specific optimizations to<font color="#CCCCCC"> be portable</font>

282
00:13:50,930 --> 00:13:55,670
<font color="#E5E5E5">right the problem with</font><font color="#CCCCCC"> that is</font><font color="#E5E5E5"> the</font>

283
00:13:53,540 --> 00:14:01,069
modern processors need vectorization to

284
00:13:55,670 --> 00:14:02,630
perform<font color="#E5E5E5"> it's a minor part is very hard</font>

285
00:14:01,070 --> 00:14:06,670
to say<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> theoretical performance</font>

286
00:14:02,630 --> 00:14:08,750
<font color="#E5E5E5">of a modern</font><font color="#CCCCCC"> processor actually is I</font>

287
00:14:06,670 --> 00:14:10,790
there are<font color="#E5E5E5"> relatively good numbers for</font>

288
00:14:08,750 --> 00:14:13,340
<font color="#CCCCCC">the Intel Haswell architecture</font><font color="#E5E5E5"> which</font>

289
00:14:10,790 --> 00:14:15,829
uses in the<font color="#CCCCCC"> scaler mode gives you like</font>

290
00:14:13,340 --> 00:14:18,260
130 gigaflops per second<font color="#CCCCCC"> floating-point</font>

291
00:14:15,830 --> 00:14:20,960
operations<font color="#E5E5E5"> and with AVX it gives you</font>

292
00:14:18,260 --> 00:14:24,560
nearly<font color="#CCCCCC"> 4 fold improvement</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> that the</font>

293
00:14:20,960 --> 00:14:26,180
downside<font color="#E5E5E5"> is that you need to use machine</font>

294
00:14:24,560 --> 00:14:30,890
specific optimizations<font color="#CCCCCC"> to get that</font>

295
00:14:26,180 --> 00:14:33,170
performance so let's fix that<font color="#E5E5E5"> and</font>

296
00:14:30,890 --> 00:14:36,470
<font color="#E5E5E5">suddenly we suddenly we're back to the</font>

297
00:14:33,170 --> 00:14:38,990
<font color="#E5E5E5">hard problems right so the apocryphal</font>

298
00:14:36,470 --> 00:14:40,550
doesn't fit on the slide<font color="#E5E5E5"> that's from the</font>

299
00:14:38,990 --> 00:14:42,770
<font color="#E5E5E5">efficient ends of flow repositories</font>

300
00:14:40,550 --> 00:14:46,339
again not hitting on transfer flow is

301
00:14:42,770 --> 00:14:47,870
just<font color="#CCCCCC"> feeling software is not easy and if</font>

302
00:14:46,340 --> 00:14:49,550
anybody if you<font color="#E5E5E5"> were at the talk</font>

303
00:14:47,870 --> 00:14:54,110
yesterday<font color="#E5E5E5"> how to make package managers</font>

304
00:14:49,550 --> 00:14:58,370
cry that explains<font color="#CCCCCC"> why so the doc Rafael</font>

305
00:14:54,110 --> 00:15:00,710
is like 80 lines<font color="#E5E5E5"> 85 and a bit more</font>

306
00:14:58,370 --> 00:15:03,110
<font color="#CCCCCC">sophisticated you need to be intimately</font>

307
00:15:00,710 --> 00:15:06,230
familiar<font color="#E5E5E5"> with the build system the</font>

308
00:15:03,110 --> 00:15:08,540
loader<font color="#E5E5E5"> and how they pull together so in</font>

309
00:15:06,230 --> 00:15:10,460
this case<font color="#CCCCCC"> that</font><font color="#E5E5E5"> sets the library path for</font>

310
00:15:08,540 --> 00:15:13,730
the loader<font color="#CCCCCC"> invoke spares little pinchy</font>

311
00:15:10,460 --> 00:15:16,430
<font color="#CCCCCC">for the hospital architecture builds a</font>

312
00:15:13,730 --> 00:15:18,680
wheel then installs the wheel<font color="#E5E5E5"> and so on</font>

313
00:15:16,430 --> 00:15:21,560
and so forth<font color="#E5E5E5"> if you want to try that at</font>

314
00:15:18,680 --> 00:15:23,449
home<font color="#CCCCCC"> I do recommend that</font><font color="#E5E5E5"> you use some</font>

315
00:15:21,560 --> 00:15:28,670
tool that automates the process for you

316
00:15:23,450 --> 00:15:31,190
like easy build or spec because if you

317
00:15:28,670 --> 00:15:33,620
do that<font color="#E5E5E5"> repeatedly</font><font color="#CCCCCC"> gonna be pretty pen</font>

318
00:15:31,190 --> 00:15:37,640
bad for your mental<font color="#CCCCCC"> health</font>

319
00:15:33,620 --> 00:15:40,220
so does<font color="#E5E5E5"> it pay</font><font color="#CCCCCC"> off the</font><font color="#E5E5E5"> docker file is</font>

320
00:15:37,640 --> 00:15:41,060
<font color="#CCCCCC">eight times</font><font color="#E5E5E5"> the size we get the seven</font>

321
00:15:40,220 --> 00:15:42,470
times<font color="#CCCCCC"> speed-up</font>

322
00:15:41,060 --> 00:15:47,930
so that's a<font color="#E5E5E5"> pretty good bang</font><font color="#CCCCCC"> for the</font>

323
00:15:42,470 --> 00:15:49,910
buck to<font color="#CCCCCC"> line-by-line and I have to thank</font>

324
00:15:47,930 --> 00:15:52,729
<font color="#CCCCCC">Kenna Forster who is the lead developer</font>

325
00:15:49,910 --> 00:15:56,449
of easy build further benchmark so it

326
00:15:52,730 --> 00:16:03,560
does pay off but<font color="#E5E5E5"> it is</font><font color="#CCCCCC"> a considerable</font>

327
00:15:56,450 --> 00:16:08,030
<font color="#E5E5E5">amount</font><font color="#CCCCCC"> of investment</font><font color="#E5E5E5"> of time and</font><font color="#CCCCCC"> it</font>

328
00:16:03,560 --> 00:16:10,640
opens<font color="#E5E5E5"> up a whole</font><font color="#CCCCCC"> other set</font><font color="#E5E5E5"> of issues you</font>

329
00:16:08,030 --> 00:16:12,439
need<font color="#E5E5E5"> to cross compile basically so</font>

330
00:16:10,640 --> 00:16:14,480
suddenly<font color="#E5E5E5"> you had the thing that was</font>

331
00:16:12,440 --> 00:16:16,700
portable<font color="#E5E5E5"> and you wanted to make it fast</font>

332
00:16:14,480 --> 00:16:20,750
and<font color="#E5E5E5"> so that it's a portable anymore</font>

333
00:16:16,700 --> 00:16:22,850
<font color="#E5E5E5">which i think is a common problem and if</font>

334
00:16:20,750 --> 00:16:24,320
<font color="#E5E5E5">you use easy building or spec in</font>

335
00:16:22,850 --> 00:16:26,360
conjunction with containers<font color="#E5E5E5"> you could do</font>

336
00:16:24,320 --> 00:16:30,350
like portable builds but then you have

337
00:16:26,360 --> 00:16:33,800
the problem<font color="#E5E5E5"> how do you share that for</font>

338
00:16:30,350 --> 00:16:35,600
<font color="#CCCCCC">example do</font><font color="#E5E5E5"> you tell the users well you</font>

339
00:16:33,800 --> 00:16:39,740
use<font color="#E5E5E5"> the</font><font color="#CCCCCC"> version that's AVX optimized</font>

340
00:16:35,600 --> 00:16:41,030
<font color="#CCCCCC">maybe with</font><font color="#E5E5E5"> FMA or without</font><font color="#CCCCCC"> FMA may be the</font>

341
00:16:39,740 --> 00:16:43,820
cache size of your processor<font color="#CCCCCC"> is</font>

342
00:16:41,030 --> 00:16:46,130
different or and that's<font color="#E5E5E5"> going to be a</font>

343
00:16:43,820 --> 00:16:48,440
quite<font color="#E5E5E5"> interesting problem in the</font><font color="#CCCCCC"> future</font>

344
00:16:46,130 --> 00:16:50,450
<font color="#E5E5E5">maybe you want to share with the</font>

345
00:16:48,440 --> 00:16:54,220
researcher<font color="#E5E5E5"> that runs</font><font color="#CCCCCC"> on our machine so</font>

346
00:16:50,450 --> 00:16:56,930
the<font color="#E5E5E5"> architecture is totally</font><font color="#CCCCCC"> different</font>

347
00:16:54,220 --> 00:17:00,320
<font color="#E5E5E5">one way to solve the problem is docker</font>

348
00:16:56,930 --> 00:17:02,719
has a thing called<font color="#E5E5E5"> fat manifests because</font>

349
00:17:00,320 --> 00:17:05,260
of course docker containers run on<font color="#E5E5E5"> set</font>

350
00:17:02,720 --> 00:17:09,740
series mainframes<font color="#E5E5E5"> which makes me a bit</font>

351
00:17:05,260 --> 00:17:11,990
happy<font color="#CCCCCC"> so if you do a poker pool</font><font color="#E5E5E5"> on an</font>

352
00:17:09,740 --> 00:17:15,260
IBM mainframe or on a power of machine

353
00:17:11,990 --> 00:17:16,579
<font color="#CCCCCC">and the docker registry has a version</font>

354
00:17:15,260 --> 00:17:19,339
for<font color="#E5E5E5"> the architecture it's</font><font color="#CCCCCC"> going to pull</font>

355
00:17:16,579 --> 00:17:21,079
it down<font color="#E5E5E5"> unfortunately there's not</font>

356
00:17:19,339 --> 00:17:26,449
integrated with<font color="#E5E5E5"> the HPC solutions yet</font>

357
00:17:21,079 --> 00:17:27,829
<font color="#E5E5E5">and a minor point is I didn't find any</font>

358
00:17:26,450 --> 00:17:29,570
<font color="#CCCCCC">information if there</font><font color="#E5E5E5"> works for CPU</font>

359
00:17:27,829 --> 00:17:33,770
features as well and not<font color="#E5E5E5"> only for</font>

360
00:17:29,570 --> 00:17:36,590
architectures so to conclude this talk<font color="#E5E5E5"> I</font>

361
00:17:33,770 --> 00:17:38,240
do think<font color="#E5E5E5"> that containers are a valuable</font>

362
00:17:36,590 --> 00:17:40,730
tool<font color="#E5E5E5"> for scientific computing</font><font color="#CCCCCC"> because</font>

363
00:17:38,240 --> 00:17:43,040
<font color="#CCCCCC">they enable a user-defined</font><font color="#E5E5E5"> software</font>

364
00:17:40,730 --> 00:17:44,680
stack<font color="#E5E5E5"> if you want to say it less fancy</font>

365
00:17:43,040 --> 00:17:50,409
it's basically

366
00:17:44,680 --> 00:17:53,350
<font color="#CCCCCC">our p.m. in userland kind of</font><font color="#E5E5E5"> I do have</font>

367
00:17:50,410 --> 00:17:55,090
to say as the advertisement goes there

368
00:17:53,350 --> 00:17:58,260
are not the panacea so they're not gonna

369
00:17:55,090 --> 00:18:00,040
automatically solve all of your problems

370
00:17:58,260 --> 00:18:02,590
<font color="#CCCCCC">particularly their performance to</font>

371
00:18:00,040 --> 00:18:05,320
require work and if you<font color="#E5E5E5"> imagine a seven</font>

372
00:18:02,590 --> 00:18:07,209
<font color="#E5E5E5">times performance difference if you need</font>

373
00:18:05,320 --> 00:18:10,689
to<font color="#E5E5E5"> buy seven times the service or pay</font>

374
00:18:07,210 --> 00:18:15,130
for<font color="#CCCCCC"> seven times</font><font color="#E5E5E5"> your AWS bill you're</font>

375
00:18:10,690 --> 00:18:16,990
gonna<font color="#E5E5E5"> think about it very hard</font><font color="#CCCCCC"> and as we</font>

376
00:18:15,130 --> 00:18:20,830
have<font color="#E5E5E5"> containers which are quite a new</font>

377
00:18:16,990 --> 00:18:22,690
paradigm it's also quite beneficial to

378
00:18:20,830 --> 00:18:27,850
use what's already there<font color="#E5E5E5"> in conjunction</font>

379
00:18:22,690 --> 00:18:30,550
with<font color="#CCCCCC"> that mechanism</font><font color="#E5E5E5"> to use</font><font color="#CCCCCC"> them to the</font>

380
00:18:27,850 --> 00:18:47,080
fullest<font color="#E5E5E5"> extent and</font><font color="#CCCCCC"> with that</font><font color="#E5E5E5"> I'm gonna</font>

381
00:18:30,550 --> 00:18:50,860
go<font color="#E5E5E5"> into questions I work for a major</font>

382
00:18:47,080 --> 00:18:52,389
European company that does HPC<font color="#E5E5E5"> and we</font>

383
00:18:50,860 --> 00:18:53,860
still run<font color="#E5E5E5"> two point six</font><font color="#CCCCCC"> channels and</font>

384
00:18:52,390 --> 00:18:56,260
some of our machines for applications

385
00:18:53,860 --> 00:18:57,580
that's not my point<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> my point was</font>

386
00:18:56,260 --> 00:18:59,530
<font color="#CCCCCC">very interested to hear what</font><font color="#E5E5E5"> you're</font>

387
00:18:57,580 --> 00:19:02,350
saying about optimizing and installing

388
00:18:59,530 --> 00:19:04,330
the up to my extensive<font color="#CCCCCC"> floor I think HPC</font>

389
00:19:02,350 --> 00:19:05,320
people<font color="#E5E5E5"> have a great deal</font><font color="#CCCCCC"> to learn from</font>

390
00:19:04,330 --> 00:19:07,629
the web generation

391
00:19:05,320 --> 00:19:09,250
you've got scaling up to<font color="#CCCCCC"> the cloud</font>

392
00:19:07,630 --> 00:19:10,929
you've got configuration management

393
00:19:09,250 --> 00:19:12,370
<font color="#E5E5E5">cattle not pets</font>

394
00:19:10,929 --> 00:19:14,740
and you get<font color="#CCCCCC"> applications which are</font>

395
00:19:12,370 --> 00:19:17,709
designed to fail unlike HPC applications

396
00:19:14,740 --> 00:19:20,320
just<font color="#CCCCCC"> don't tolerate failures</font><font color="#E5E5E5"> however I</font>

397
00:19:17,710 --> 00:19:23,770
think<font color="#E5E5E5"> people and I want people</font><font color="#CCCCCC"> to listen</font>

398
00:19:20,320 --> 00:19:25,870
<font color="#E5E5E5">and I want you to comment often you see</font>

399
00:19:23,770 --> 00:19:26,650
the recipe for<font color="#CCCCCC"> installation is</font><font color="#E5E5E5"> that to</font>

400
00:19:25,870 --> 00:19:30,070
<font color="#E5E5E5">get installed</font>

401
00:19:26,650 --> 00:19:31,570
<font color="#CCCCCC">tensa</font><font color="#E5E5E5"> for apt-get install open MPI and</font>

402
00:19:30,070 --> 00:19:33,399
then you see in the openmpi list

403
00:19:31,570 --> 00:19:35,409
oh I<font color="#CCCCCC"> did an app get install open MPI and</font>

404
00:19:33,400 --> 00:19:36,460
<font color="#CCCCCC">I've got it's a really update version</font><font color="#E5E5E5"> it</font>

405
00:19:35,410 --> 00:19:38,440
doesn't<font color="#CCCCCC"> perform</font><font color="#E5E5E5"> far well I've got</font>

406
00:19:36,460 --> 00:19:41,230
problems<font color="#E5E5E5"> and the answer</font><font color="#CCCCCC"> from the openmpi</font>

407
00:19:38,440 --> 00:19:43,210
<font color="#CCCCCC">guises hey-oh - point</font><font color="#E5E5E5"> not series is</font>

408
00:19:41,230 --> 00:19:45,070
great it's got fixed all these bugs<font color="#E5E5E5"> and</font>

409
00:19:43,210 --> 00:19:46,720
I think people<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> realize</font><font color="#CCCCCC"> that the</font>

410
00:19:45,070 --> 00:19:49,700
maintainer<font color="#CCCCCC"> of these scientific packages</font>

411
00:19:46,720 --> 00:19:52,370
in Red Hat<font color="#E5E5E5"> and</font>

412
00:19:49,700 --> 00:19:53,659
<font color="#E5E5E5">to the new depending on some guy</font>

413
00:19:52,370 --> 00:19:55,370
maintaining and who's not really<font color="#E5E5E5"> going</font>

414
00:19:53,659 --> 00:20:00,409
<font color="#E5E5E5">to keep it up</font><font color="#CCCCCC"> to date and he's not</font><font color="#E5E5E5"> going</font>

415
00:19:55,370 --> 00:20:04,549
<font color="#E5E5E5">to optimize it for the process</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you</font>

416
00:20:00,409 --> 00:20:09,799
comment on<font color="#E5E5E5"> that so I'm not quite sure</font>

417
00:20:04,549 --> 00:20:14,269
what the<font color="#CCCCCC"> question was you very nicely</font>

418
00:20:09,799 --> 00:20:17,120
elaborated recommend commenting on the

419
00:20:14,269 --> 00:20:18,799
the issue of<font color="#CCCCCC"> limited</font><font color="#E5E5E5"> the tooling not</font>

420
00:20:17,120 --> 00:20:22,370
being updated in<font color="#CCCCCC"> this Joe's due</font><font color="#E5E5E5"> to lack</font>

421
00:20:18,799 --> 00:20:26,240
of time<font color="#E5E5E5"> for me to</font><font color="#CCCCCC"> oldest chairs and that</font>

422
00:20:22,370 --> 00:20:29,570
is<font color="#CCCCCC"> do contain a psychopath to the kind</font>

423
00:20:26,240 --> 00:20:31,159
<font color="#E5E5E5">of said in a blunt way you shifting the</font>

424
00:20:29,570 --> 00:20:33,139
load of maintaining the<font color="#CCCCCC"> software's text</font>

425
00:20:31,159 --> 00:20:36,080
to the user<font color="#CCCCCC"> it's what you're</font><font color="#E5E5E5"> doing</font><font color="#CCCCCC"> and</font>

426
00:20:33,139 --> 00:20:37,219
then for the stuff<font color="#E5E5E5"> that we need to be</font>

427
00:20:36,080 --> 00:20:38,720
highly optimized you still have the

428
00:20:37,220 --> 00:20:42,080
center people<font color="#E5E5E5"> but it makes the</font>

429
00:20:38,720 --> 00:20:43,519
turnaround times quicker so maintaining

430
00:20:42,080 --> 00:20:47,029
<font color="#CCCCCC">software is a very hard</font><font color="#E5E5E5"> problem that's</font>

431
00:20:43,519 --> 00:20:54,610
<font color="#E5E5E5">not gonna go</font><font color="#CCCCCC"> away in the future</font><font color="#E5E5E5"> even</font>

432
00:20:47,029 --> 00:20:54,610
with cloud technologies anybody else

433
00:21:02,400 --> 00:21:06,400
the question is how do you integrated

434
00:21:04,570 --> 00:21:09,639
with the<font color="#E5E5E5"> batch system for shifter there</font>

435
00:21:06,400 --> 00:21:12,960
is a<font color="#E5E5E5"> storm spank</font><font color="#CCCCCC"> plug-in singularity as</font>

436
00:21:09,640 --> 00:21:19,090
well<font color="#E5E5E5"> you don't need to use one so if you</font>

437
00:21:12,960 --> 00:21:20,800
pull<font color="#CCCCCC"> up a job and you do shifter the</font>

438
00:21:19,090 --> 00:21:22,840
image name<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you run</font><font color="#E5E5E5"> it it's just</font>

439
00:21:20,800 --> 00:21:24,399
<font color="#E5E5E5">gonna run the place to single areas but</font>

440
00:21:22,840 --> 00:21:26,949
you don't need<font color="#E5E5E5"> to integrate it with the</font>

441
00:21:24,400 --> 00:21:31,740
<font color="#CCCCCC">workload manager</font><font color="#E5E5E5"> it does get better</font>

442
00:21:26,950 --> 00:21:31,740
<font color="#E5E5E5">performance though for several reasons</font>

443
00:21:36,900 --> 00:21:46,970
[Applause]

