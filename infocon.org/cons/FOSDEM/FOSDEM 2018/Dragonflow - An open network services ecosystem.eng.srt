1
00:00:04,620 --> 00:00:14,700
so now you<font color="#CCCCCC"> listen to FEMA talking</font><font color="#E5E5E5"> about</font>

2
00:00:08,670 --> 00:00:16,320
<font color="#CCCCCC">telephone service thank you yeah good</font>

3
00:00:14,700 --> 00:00:18,509
<font color="#E5E5E5">morning</font><font color="#CCCCCC"> everyone</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> today</font><font color="#E5E5E5"> I'd like to</font>

4
00:00:16,320 --> 00:00:21,330
talk about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Dragon Claw project</font><font color="#E5E5E5"> and</font>

5
00:00:18,510 --> 00:00:27,390
our effort to<font color="#CCCCCC"> make it into this open</font>

6
00:00:21,330 --> 00:00:29,460
<font color="#CCCCCC">platform for enfoque</font><font color="#E5E5E5"> services first</font>

7
00:00:27,390 --> 00:00:32,520
about<font color="#E5E5E5"> my</font><font color="#CCCCCC"> staff</font><font color="#E5E5E5"> night as I was</font><font color="#CCCCCC"> introduced</font>

8
00:00:29,460 --> 00:00:34,140
my name<font color="#CCCCCC"> is Eddie macaws itself I work on</font>

9
00:00:32,520 --> 00:00:37,350
the<font color="#E5E5E5"> dragon</font><font color="#CCCCCC"> flow project and the core</font>

10
00:00:34,140 --> 00:00:40,410
developer there<font color="#E5E5E5"> I work for the cloud</font>

11
00:00:37,350 --> 00:00:41,790
group or I always tell<font color="#E5E5E5"> Aviv office and</font>

12
00:00:40,410 --> 00:00:44,510
I'd like<font color="#CCCCCC"> to start</font><font color="#E5E5E5"> by talking about</font>

13
00:00:41,790 --> 00:00:47,219
<font color="#CCCCCC">Software Defined Networking</font><font color="#E5E5E5"> you know</font>

14
00:00:44,510 --> 00:00:49,140
very<font color="#E5E5E5"> well how can</font><font color="#CCCCCC"> I introduce</font><font color="#E5E5E5"> the food</font>

15
00:00:47,219 --> 00:00:52,649
<font color="#CCCCCC">wine networking</font><font color="#E5E5E5"> because it's part of a</font>

16
00:00:49,140 --> 00:00:56,670
broad<font color="#CCCCCC"> concept</font><font color="#E5E5E5"> what I basically came to</font>

17
00:00:52,649 --> 00:00:59,550
the definition of where we have a

18
00:00:56,670 --> 00:01:01,800
<font color="#CCCCCC">specific and unified interface for</font>

19
00:00:59,550 --> 00:01:03,480
controlling and configuring the network

20
00:01:01,800 --> 00:01:05,128
fabric in the data center or in<font color="#E5E5E5"> the</font>

21
00:01:03,480 --> 00:01:06,869
infrastructure<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think this definition</font>

22
00:01:05,129 --> 00:01:10,080
<font color="#E5E5E5">will be quite suitable for this</font>

23
00:01:06,869 --> 00:01:12,149
presentation<font color="#E5E5E5"> and what</font><font color="#CCCCCC"> usually face that</font>

24
00:01:10,080 --> 00:01:13,649
we have<font color="#E5E5E5"> a central component</font><font color="#CCCCCC"> it may this</font>

25
00:01:12,149 --> 00:01:17,160
<font color="#E5E5E5">may be a single server or cluster of</font>

26
00:01:13,649 --> 00:01:18,929
servers that<font color="#CCCCCC"> you can query or request</font>

27
00:01:17,160 --> 00:01:22,069
changes to<font color="#E5E5E5"> the network topology</font><font color="#CCCCCC"> through</font>

28
00:01:18,929 --> 00:01:25,130
<font color="#E5E5E5">this service and it</font><font color="#CCCCCC"> will take care of</font>

29
00:01:22,069 --> 00:01:28,500
performing<font color="#E5E5E5"> this a configuration request</font>

30
00:01:25,130 --> 00:01:30,568
<font color="#E5E5E5">and it basically allows you to to</font>

31
00:01:28,500 --> 00:01:32,940
separate the network configuration

32
00:01:30,569 --> 00:01:35,069
problem from the actual forwarding and

33
00:01:32,940 --> 00:01:37,369
physical access<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> where where you</font>

34
00:01:35,069 --> 00:01:40,140
want want<font color="#E5E5E5"> to configure a specific</font>

35
00:01:37,369 --> 00:01:41,759
topology of the network<font color="#E5E5E5"> and you don't</font>

36
00:01:40,140 --> 00:01:42,990
have<font color="#E5E5E5"> to bother with going</font><font color="#CCCCCC"> to which of</font>

37
00:01:41,759 --> 00:01:44,759
<font color="#CCCCCC">the switches and</font><font color="#E5E5E5"> the routers and</font>

38
00:01:42,990 --> 00:01:46,229
configuring them accordingly<font color="#E5E5E5"> and you</font>

39
00:01:44,759 --> 00:01:48,349
have this kind<font color="#CCCCCC"> of software-defined</font>

40
00:01:46,229 --> 00:01:51,360
Network solution doing this for you<font color="#CCCCCC"> and</font>

41
00:01:48,349 --> 00:01:54,149
<font color="#CCCCCC">what this allows us to do a lot of time</font>

42
00:01:51,360 --> 00:01:56,759
is to do a thing called networking

43
00:01:54,149 --> 00:01:58,590
virtualization which can be sort of<font color="#E5E5E5"> just</font>

44
00:01:56,759 --> 00:02:00,569
<font color="#E5E5E5">like a regular virtualization where</font><font color="#CCCCCC"> we</font>

45
00:01:58,590 --> 00:02:03,000
have our physical<font color="#E5E5E5"> machines</font><font color="#CCCCCC"> and we have</font><font color="#E5E5E5"> a</font>

46
00:02:00,569 --> 00:02:04,619
virtual machines<font color="#CCCCCC"> and we can have several</font>

47
00:02:03,000 --> 00:02:07,229
<font color="#E5E5E5">machines on a single physical host and</font>

48
00:02:04,619 --> 00:02:09,590
we can have different kinds<font color="#CCCCCC"> of</font><font color="#E5E5E5"> machines</font>

49
00:02:07,229 --> 00:02:12,180
<font color="#CCCCCC">on say on a single hypervisor and</font>

50
00:02:09,590 --> 00:02:15,120
<font color="#CCCCCC">network a virtualization allows us to do</font>

51
00:02:12,180 --> 00:02:16,160
just<font color="#CCCCCC"> about this we have</font><font color="#E5E5E5"> we have</font><font color="#CCCCCC"> our data</font>

52
00:02:15,120 --> 00:02:18,170
center or

53
00:02:16,160 --> 00:02:19,220
and we may have<font color="#E5E5E5"> a single</font><font color="#CCCCCC"> physical</font>

54
00:02:18,170 --> 00:02:23,570
<font color="#E5E5E5">network</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> connecting all the</font>

55
00:02:19,220 --> 00:02:26,450
machines but we<font color="#E5E5E5"> may want</font><font color="#CCCCCC"> to create an</font>

56
00:02:23,570 --> 00:02:27,590
<font color="#CCCCCC">illusion for the VMS that</font><font color="#E5E5E5"> we are in</font>

57
00:02:26,450 --> 00:02:31,100
<font color="#CCCCCC">different networks maybe different</font>

58
00:02:27,590 --> 00:02:33,200
addresses<font color="#CCCCCC"> maybe we have two VMs on</font>

59
00:02:31,100 --> 00:02:34,280
different hosts but but we want to

60
00:02:33,200 --> 00:02:36,769
create an illusion<font color="#CCCCCC"> that they are</font>

61
00:02:34,280 --> 00:02:40,250
connected<font color="#CCCCCC"> one to another directly</font><font color="#E5E5E5"> and</font>

62
00:02:36,770 --> 00:02:43,280
the the Sdn allows us to kind of create

63
00:02:40,250 --> 00:02:45,170
<font color="#E5E5E5">this illusion and show the VMS or the</font>

64
00:02:43,280 --> 00:02:47,690
containers these<font color="#E5E5E5"> virtual topology</font>

65
00:02:45,170 --> 00:02:50,329
instead of the physical<font color="#E5E5E5"> one where they</font>

66
00:02:47,690 --> 00:02:51,700
can see how the data<font color="#E5E5E5"> center is connected</font>

67
00:02:50,330 --> 00:02:54,730
how the hosts are connected<font color="#E5E5E5"> and how the</font>

68
00:02:51,700 --> 00:02:58,310
switches<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the routers are configured</font>

69
00:02:54,730 --> 00:03:02,239
<font color="#E5E5E5">okay and one you talked earlier we have</font>

70
00:02:58,310 --> 00:03:04,520
this<font color="#E5E5E5"> network have a spectral service</font>

71
00:03:02,240 --> 00:03:06,620
configuring<font color="#E5E5E5"> network fabric the routers</font>

72
00:03:04,520 --> 00:03:09,620
the switches and one popular<font color="#CCCCCC"> way to do</font>

73
00:03:06,620 --> 00:03:12,320
this is through an open flow protocol<font color="#CCCCCC"> an</font>

74
00:03:09,620 --> 00:03:16,150
open flow protocol is a an<font color="#CCCCCC"> abstraction</font>

75
00:03:12,320 --> 00:03:20,000
for<font color="#E5E5E5"> configuring and network appliances</font>

76
00:03:16,150 --> 00:03:22,850
where each appliance<font color="#E5E5E5"> is represented as a</font>

77
00:03:20,000 --> 00:03:24,380
bridge or a switch or a router<font color="#E5E5E5"> and it is</font>

78
00:03:22,850 --> 00:03:29,530
a basically a state machine<font color="#CCCCCC"> for packets</font>

79
00:03:24,380 --> 00:03:32,090
<font color="#E5E5E5">coming in and the states are they are</font>

80
00:03:29,530 --> 00:03:34,790
separated into tables<font color="#E5E5E5"> where each table</font>

81
00:03:32,090 --> 00:03:36,920
has<font color="#E5E5E5"> a collection of flows and a packet</font>

82
00:03:34,790 --> 00:03:39,739
coming in<font color="#CCCCCC"> will</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> and at some table</font>

83
00:03:36,920 --> 00:03:42,290
and dependence which will apply<font color="#E5E5E5"> a</font>

84
00:03:39,740 --> 00:03:44,270
specific<font color="#E5E5E5"> flow to it and then if</font><font color="#CCCCCC"> you</font>

85
00:03:42,290 --> 00:03:45,500
decide it needs more processing it will

86
00:03:44,270 --> 00:03:47,800
<font color="#E5E5E5">apply another cloak made from another</font>

87
00:03:45,500 --> 00:03:51,170
<font color="#E5E5E5">table or the same one</font>

88
00:03:47,800 --> 00:03:55,340
now<font color="#E5E5E5"> each flow is a it's composed of two</font>

89
00:03:51,170 --> 00:03:57,760
things<font color="#CCCCCC"> a flow is a match which means</font>

90
00:03:55,340 --> 00:04:02,660
what packet<font color="#E5E5E5"> this flow should apply to</font>

91
00:03:57,760 --> 00:04:05,120
this can<font color="#E5E5E5"> be on any from</font><font color="#CCCCCC"> OPA flow allows</font>

92
00:04:02,660 --> 00:04:07,520
you to do this based on<font color="#E5E5E5"> and the elf one</font>

93
00:04:05,120 --> 00:04:09,650
two three well four levels you<font color="#E5E5E5"> can say I</font>

94
00:04:07,520 --> 00:04:12,350
<font color="#E5E5E5">want to always I pee before packets or</font>

95
00:04:09,650 --> 00:04:15,920
maybe I<font color="#E5E5E5"> just want disappear packets</font>

96
00:04:12,350 --> 00:04:18,190
targeted to port 80<font color="#CCCCCC"> or maybe even I won</font>

97
00:04:15,920 --> 00:04:22,599
all the nonce in packets

98
00:04:18,190 --> 00:04:24,370
coming into the switch and when a packet

99
00:04:22,600 --> 00:04:26,740
is arrived to<font color="#CCCCCC"> a specific</font><font color="#E5E5E5"> table the</font>

100
00:04:24,370 --> 00:04:28,630
switch will go to through all<font color="#CCCCCC"> of the</font>

101
00:04:26,740 --> 00:04:30,670
flows<font color="#E5E5E5"> in this table sorted by the</font>

102
00:04:28,630 --> 00:04:32,920
priority and try to see<font color="#E5E5E5"> the first one</font>

103
00:04:30,670 --> 00:04:34,870
that applies to<font color="#E5E5E5"> the packet now the</font>

104
00:04:32,920 --> 00:04:37,600
second part of the flow are the

105
00:04:34,870 --> 00:04:39,880
instructions and the instructions

106
00:04:37,600 --> 00:04:42,340
<font color="#CCCCCC">basically say how the packet should</font><font color="#E5E5E5"> be</font>

107
00:04:39,880 --> 00:04:45,760
handled<font color="#E5E5E5"> if the flow matches the packet</font>

108
00:04:42,340 --> 00:04:48,400
and they basically<font color="#E5E5E5"> do I think three</font>

109
00:04:45,760 --> 00:04:51,280
major<font color="#E5E5E5"> things one of them is modified the</font>

110
00:04:48,400 --> 00:04:55,419
packet themselves<font color="#CCCCCC"> you can you can you</font>

111
00:04:51,280 --> 00:04:57,729
<font color="#CCCCCC">can</font><font color="#E5E5E5"> request a a packet notification say</font>

112
00:04:55,420 --> 00:05:01,600
I want<font color="#E5E5E5"> to replace the source MAC address</font>

113
00:04:57,730 --> 00:05:03,820
of<font color="#E5E5E5"> the packet</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can modify the state</font>

114
00:05:01,600 --> 00:05:07,510
<font color="#E5E5E5">of the packet</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> say I want a next</font>

115
00:05:03,820 --> 00:05:12,640
table<font color="#CCCCCC"> to be table</font><font color="#E5E5E5"> 2020 or maybe I want</font>

116
00:05:07,510 --> 00:05:15,250
to<font color="#E5E5E5"> set some local register of the packet</font>

117
00:05:12,640 --> 00:05:18,820
which is<font color="#E5E5E5"> a state that the packet carries</font>

118
00:05:15,250 --> 00:05:20,290
with itself through the<font color="#E5E5E5"> switch and you</font>

119
00:05:18,820 --> 00:05:22,270
can<font color="#CCCCCC"> say</font><font color="#E5E5E5"> that you want to drop</font><font color="#CCCCCC"> the packet</font>

120
00:05:20,290 --> 00:05:25,360
or output it to a specific<font color="#CCCCCC"> physical port</font>

121
00:05:22,270 --> 00:05:27,940
of the switch and this allows you

122
00:05:25,360 --> 00:05:31,540
<font color="#CCCCCC">basically to implement a lot of</font>

123
00:05:27,940 --> 00:05:34,750
<font color="#CCCCCC">low-level</font><font color="#E5E5E5"> networking functionality into</font>

124
00:05:31,540 --> 00:05:37,660
in the switches like you say you can say

125
00:05:34,750 --> 00:05:39,790
that you want to receive a packet and

126
00:05:37,660 --> 00:05:43,210
see if it's on a specific<font color="#CCCCCC"> network like</font>

127
00:05:39,790 --> 00:05:45,430
by examining it's a VLAN ID and then

128
00:05:43,210 --> 00:05:49,599
deciding what<font color="#E5E5E5"> ports it can give out to</font>

129
00:05:45,430 --> 00:05:51,160
input ports it cannot and so this was

130
00:05:49,600 --> 00:05:53,980
quite a quick<font color="#E5E5E5"> introduction to</font><font color="#CCCCCC"> open flow</font>

131
00:05:51,160 --> 00:05:56,230
will come<font color="#E5E5E5"> to</font><font color="#CCCCCC"> packet to it</font><font color="#E5E5E5"> later</font>

132
00:05:53,980 --> 00:05:59,140
<font color="#CCCCCC">and</font><font color="#E5E5E5"> that actually talking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> a dozen</font>

133
00:05:56,230 --> 00:06:00,850
<font color="#E5E5E5">flow drug flow is an open source project</font>

134
00:05:59,140 --> 00:06:07,270
implementing a<font color="#CCCCCC"> Software Defined</font>

135
00:06:00,850 --> 00:06:10,290
<font color="#CCCCCC">Networking controller for a</font><font color="#E5E5E5"> for open</font>

136
00:06:07,270 --> 00:06:14,650
<font color="#CCCCCC">second kubernetes</font><font color="#E5E5E5"> at the moment it</font><font color="#CCCCCC"> is</font>

137
00:06:10,290 --> 00:06:16,510
built on a few few major principles we

138
00:06:14,650 --> 00:06:19,270
wanted to try to make<font color="#CCCCCC"> it as lightweight</font>

139
00:06:16,510 --> 00:06:21,219
as<font color="#CCCCCC"> possible and quite a simple</font><font color="#E5E5E5"> so if you</font>

140
00:06:19,270 --> 00:06:23,320
have a small employment<font color="#E5E5E5"> it won't be too</font>

141
00:06:21,220 --> 00:06:25,390
<font color="#CCCCCC">much of a burden</font><font color="#E5E5E5"> to to run</font><font color="#CCCCCC"> dragon folder</font>

142
00:06:23,320 --> 00:06:27,039
<font color="#E5E5E5">but also we wanted to make it quite</font>

143
00:06:25,390 --> 00:06:29,740
scalable so if you have a heated moment

144
00:06:27,039 --> 00:06:32,469
<font color="#E5E5E5">you can still try to is dragon flowing</font>

145
00:06:29,740 --> 00:06:36,000
and not been limited<font color="#CCCCCC"> by by its</font>

146
00:06:32,470 --> 00:06:39,490
architecture<font color="#E5E5E5"> and additionally we try to</font>

147
00:06:36,000 --> 00:06:41,199
make everything<font color="#E5E5E5"> applicable so we don't</font>

148
00:06:39,490 --> 00:06:43,030
know how the deployment will look like

149
00:06:41,199 --> 00:06:45,580
in<font color="#E5E5E5"> the ending and you</font><font color="#CCCCCC"> might have a</font>

150
00:06:43,030 --> 00:06:46,719
single data<font color="#E5E5E5"> center and very converged</font>

151
00:06:45,580 --> 00:06:48,070
infrastructure<font color="#E5E5E5"> or maybe you have a</font>

152
00:06:46,720 --> 00:06:51,370
<font color="#E5E5E5">distributed infrastructure maybe you</font>

153
00:06:48,070 --> 00:06:53,860
have just a huge<font color="#E5E5E5"> amount</font><font color="#CCCCCC"> of of</font><font color="#E5E5E5"> nodes and</font>

154
00:06:51,370 --> 00:06:56,050
you<font color="#E5E5E5"> may want to use a</font><font color="#CCCCCC"> different function</font>

155
00:06:53,860 --> 00:06:58,210
different features for different kinds

156
00:06:56,050 --> 00:07:01,720
<font color="#E5E5E5">of deployments so try to do a lot of</font>

157
00:06:58,210 --> 00:07:04,599
things in a<font color="#CCCCCC"> plug</font><font color="#E5E5E5"> of a manner and finally</font>

158
00:07:01,720 --> 00:07:08,410
we try to just<font color="#CCCCCC"> do butane a lot of stuff</font>

159
00:07:04,599 --> 00:07:10,030
to do the<font color="#CCCCCC"> nodes</font><font color="#E5E5E5"> meaning</font><font color="#CCCCCC"> that many of the</font>

160
00:07:08,410 --> 00:07:12,039
<font color="#CCCCCC">services we</font><font color="#E5E5E5"> tried to provide we try to</font>

161
00:07:10,030 --> 00:07:16,270
provide them in a distributed manner<font color="#E5E5E5"> for</font>

162
00:07:12,039 --> 00:07:18,150
instance one of them is<font color="#E5E5E5"> gauge</font><font color="#CCCCCC"> 2 P a if</font>

163
00:07:16,270 --> 00:07:21,159
you look<font color="#E5E5E5"> at a traditional dish to be</font>

164
00:07:18,150 --> 00:07:23,349
implementation in<font color="#CCCCCC"> Neutron you'll see</font>

165
00:07:21,160 --> 00:07:25,900
<font color="#E5E5E5">that it</font><font color="#CCCCCC"> has a</font><font color="#E5E5E5"> network node running a DNS</font>

166
00:07:23,349 --> 00:07:29,050
mask<font color="#CCCCCC"> once</font><font color="#E5E5E5"> we know the</font><font color="#CCCCCC"> DSP</font><font color="#E5E5E5"> request from</font>

167
00:07:25,900 --> 00:07:30,969
there so if you have<font color="#CCCCCC"> 10 machines</font><font color="#E5E5E5"> and one</font>

168
00:07:29,050 --> 00:07:33,280
network<font color="#E5E5E5"> node</font><font color="#CCCCCC"> all of the deep spirits</font>

169
00:07:30,970 --> 00:07:35,260
will travel to the<font color="#E5E5E5"> network node and if</font>

170
00:07:33,280 --> 00:07:37,109
it is unavailable then none of the

171
00:07:35,260 --> 00:07:40,030
<font color="#CCCCCC">machines will be able to get dish to</font><font color="#E5E5E5"> P</font>

172
00:07:37,110 --> 00:07:42,280
and<font color="#E5E5E5"> we try to avoid this kind of a</font><font color="#CCCCCC"> point</font>

173
00:07:40,030 --> 00:07:46,119
of failure by pushing the functionality

174
00:07:42,280 --> 00:07:51,250
towards the towards the<font color="#E5E5E5"> VM so one</font>

175
00:07:46,120 --> 00:07:53,199
example<font color="#CCCCCC"> that we try to</font><font color="#E5E5E5"> do is a HP server</font>

176
00:07:51,250 --> 00:07:56,380
is handled by<font color="#CCCCCC"> the controller itself</font><font color="#E5E5E5"> so</font>

177
00:07:53,199 --> 00:07:58,449
it's a packet of DNA<font color="#E5E5E5"> HP request comes</font>

178
00:07:56,380 --> 00:08:00,490
out of the machine<font color="#E5E5E5"> then the controller</font>

179
00:07:58,449 --> 00:08:03,220
<font color="#CCCCCC">will capture it see the HTTP request</font>

180
00:08:00,490 --> 00:08:06,159
packet and<font color="#E5E5E5"> craft a specific reply packet</font>

181
00:08:03,220 --> 00:08:10,180
inside<font color="#E5E5E5"> it back so there is no dependence</font>

182
00:08:06,159 --> 00:08:11,710
<font color="#CCCCCC">on external server and and the only</font>

183
00:08:10,180 --> 00:08:13,930
reason<font color="#CCCCCC"> that you won't get into disappear</font>

184
00:08:11,710 --> 00:08:17,020
<font color="#CCCCCC">requests is</font><font color="#E5E5E5"> that the machine is</font><font color="#CCCCCC"> done</font><font color="#E5E5E5"> the</font>

185
00:08:13,930 --> 00:08:19,210
down so the VM<font color="#CCCCCC"> is</font><font color="#E5E5E5"> done stuff so there's</font>

186
00:08:17,020 --> 00:08:21,340
not much<font color="#CCCCCC"> to lose there and</font><font color="#E5E5E5"> somewhere</font><font color="#CCCCCC"> I</font>

187
00:08:19,210 --> 00:08:23,138
<font color="#E5E5E5">had trivia about dragon flow it is</font><font color="#CCCCCC"> a</font>

188
00:08:21,340 --> 00:08:25,869
hundred<font color="#E5E5E5"> percent</font><font color="#CCCCCC"> in upstream and</font><font color="#E5E5E5"> open</font>

189
00:08:23,139 --> 00:08:29,190
<font color="#E5E5E5">source projects it was an official</font>

190
00:08:25,870 --> 00:08:32,140
<font color="#E5E5E5">project</font><font color="#CCCCCC"> within</font><font color="#E5E5E5"> the OpenStack community</font>

191
00:08:29,190 --> 00:08:34,870
it was initiated by<font color="#CCCCCC"> Huawei a few years</font>

192
00:08:32,140 --> 00:08:37,539
ago it's in OpenStack since our killer

193
00:08:34,870 --> 00:08:38,289
release and it is a letter entirely by

194
00:08:37,539 --> 00:08:43,419
community and

195
00:08:38,289 --> 00:08:47,880
<font color="#E5E5E5">by product</font><font color="#CCCCCC"> okay so here's a</font><font color="#E5E5E5"> high-level</font>

196
00:08:43,419 --> 00:08:49,689
architecture overview of<font color="#E5E5E5"> dragon flow in</font>

197
00:08:47,880 --> 00:08:52,630
OpenStack<font color="#CCCCCC"> on deployment</font>

198
00:08:49,690 --> 00:08:55,630
<font color="#CCCCCC">we have a three major components</font><font color="#E5E5E5"> here we</font>

199
00:08:52,630 --> 00:08:59,649
have the neutron server at the top in

200
00:08:55,630 --> 00:09:03,790
<font color="#E5E5E5">the middle in a nice orb there where we</font>

201
00:08:59,649 --> 00:09:07,240
have<font color="#E5E5E5"> our dragon flow management code in</font>

202
00:09:03,790 --> 00:09:10,779
the center we have the dragon flow

203
00:09:07,240 --> 00:09:12,370
distributed database and on the side<font color="#E5E5E5"> we</font>

204
00:09:10,779 --> 00:09:14,410
have<font color="#E5E5E5"> the computer running the virtual</font>

205
00:09:12,370 --> 00:09:16,509
machines connected to the<font color="#E5E5E5"> Oviatt bridge</font>

206
00:09:14,410 --> 00:09:21,579
and dragon flow controller controlling

207
00:09:16,509 --> 00:09:23,279
each local<font color="#CCCCCC"> OVS bridge and as I said</font>

208
00:09:21,579 --> 00:09:28,060
<font color="#CCCCCC">earlier</font><font color="#E5E5E5"> a dragon flow can also be using</font>

209
00:09:23,279 --> 00:09:32,019
<font color="#E5E5E5">kubernetes environment so here is where</font>

210
00:09:28,060 --> 00:09:35,319
<font color="#CCCCCC">we have the and the control node a at</font>

211
00:09:32,019 --> 00:09:38,139
the top in the<font color="#CCCCCC"> middle where we have</font><font color="#E5E5E5"> the</font>

212
00:09:35,319 --> 00:09:41,259
kubernetes api and another service

213
00:09:38,139 --> 00:09:44,940
<font color="#CCCCCC">called OpenStack career which is an</font>

214
00:09:41,259 --> 00:09:48,220
<font color="#E5E5E5">opposite project for interfacing in</font>

215
00:09:44,940 --> 00:09:52,899
allowing networking from Neutron<font color="#E5E5E5"> or</font>

216
00:09:48,220 --> 00:09:54,639
other providers towards<font color="#E5E5E5"> a containers and</font>

217
00:09:52,899 --> 00:09:56,680
inside<font color="#E5E5E5"> where we have our dragon flow</font>

218
00:09:54,639 --> 00:10:00,610
drivers that translate the requests from

219
00:09:56,680 --> 00:10:03,160
a career to<font color="#E5E5E5"> a console and those two are</font>

220
00:10:00,610 --> 00:10:06,279
<font color="#E5E5E5">basically on the same</font><font color="#CCCCCC"> oar but they don't</font>

221
00:10:03,160 --> 00:10:08,079
have to run<font color="#E5E5E5"> one next to another they can</font>

222
00:10:06,279 --> 00:10:09,670
be on<font color="#CCCCCC"> different machines the main point</font>

223
00:10:08,079 --> 00:10:11,949
is<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> have the</font><font color="#E5E5E5"> greatest API and</font>

224
00:10:09,670 --> 00:10:15,420
then we have the<font color="#E5E5E5"> career</font><font color="#CCCCCC"> service so</font>

225
00:10:11,949 --> 00:10:18,279
subscribing to Cabrini's api events so

226
00:10:15,420 --> 00:10:21,000
they don't have to run<font color="#E5E5E5"> together but the</font>

227
00:10:18,279 --> 00:10:23,470
act as a single<font color="#E5E5E5"> range for this purpose</font>

228
00:10:21,000 --> 00:10:26,350
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then again we have</font><font color="#CCCCCC"> the dragon flow</font>

229
00:10:23,470 --> 00:10:28,360
<font color="#CCCCCC">database in the center and on the edges</font>

230
00:10:26,350 --> 00:10:30,310
<font color="#CCCCCC">we have now we have</font><font color="#E5E5E5"> but instead of the</font>

231
00:10:28,360 --> 00:10:33,130
apps<font color="#E5E5E5"> connecting</font><font color="#CCCCCC"> to an obvious bridge</font>

232
00:10:30,310 --> 00:10:35,500
<font color="#E5E5E5">instead of</font><font color="#CCCCCC"> linux pitches and then we</font>

233
00:10:33,130 --> 00:10:37,269
have our CNI<font color="#CCCCCC"> and cubelets running on</font>

234
00:10:35,500 --> 00:10:39,009
their computers alongside with a dragon

235
00:10:37,269 --> 00:10:43,640
flow controller controlling the OBS

236
00:10:39,009 --> 00:10:46,280
<font color="#CCCCCC">pages now if we look back</font>

237
00:10:43,640 --> 00:10:48,620
into technical<font color="#CCCCCC"> OpenStack Neutron</font>

238
00:10:46,280 --> 00:10:52,610
deployment to a dragon<font color="#E5E5E5"> flow</font><font color="#CCCCCC"> we'll see</font>

239
00:10:48,620 --> 00:10:54,890
<font color="#E5E5E5">that on the lower level we have a we</font>

240
00:10:52,610 --> 00:10:56,390
have the dragon<font color="#CCCCCC"> flow part in the new</font>

241
00:10:54,890 --> 00:10:58,970
<font color="#CCCCCC">front server and we have the dragon flow</font>

242
00:10:56,390 --> 00:11:00,380
power on the controller and<font color="#E5E5E5"> they</font><font color="#CCCCCC"> talk</font>

243
00:10:58,970 --> 00:11:01,520
one to another through a<font color="#E5E5E5"> distributor</font>

244
00:11:00,380 --> 00:11:05,660
database and they have<font color="#E5E5E5"> published</font>

245
00:11:01,520 --> 00:11:07,610
subscribe interface and one of the

246
00:11:05,660 --> 00:11:11,870
<font color="#E5E5E5">points of applicability is that I try to</font>

247
00:11:07,610 --> 00:11:14,270
talk<font color="#E5E5E5"> about earlier is that we try to</font>

248
00:11:11,870 --> 00:11:16,940
<font color="#E5E5E5">avoid</font><font color="#CCCCCC"> by being restricted to a single</font>

249
00:11:14,270 --> 00:11:19,270
set of<font color="#CCCCCC"> database and pops of mechanism so</font>

250
00:11:16,940 --> 00:11:23,120
we obstructed everything away through a

251
00:11:19,270 --> 00:11:26,449
<font color="#E5E5E5">driver layer and there are really</font>

252
00:11:23,120 --> 00:11:29,680
several drivers that we support<font color="#E5E5E5"> and</font>

253
00:11:26,450 --> 00:11:35,680
maintain<font color="#CCCCCC"> your code like ready city city</font>

254
00:11:29,680 --> 00:11:37,400
and I think zookeeper<font color="#E5E5E5"> and Sandra but</font>

255
00:11:35,680 --> 00:11:39,589
what is<font color="#E5E5E5"> common</font><font color="#CCCCCC"> to all of those</font>

256
00:11:37,400 --> 00:11:42,740
<font color="#E5E5E5">interfaces is that they are quite simple</font>

257
00:11:39,590 --> 00:11:44,270
<font color="#E5E5E5">with key value stores so you can come up</font>

258
00:11:42,740 --> 00:11:46,100
<font color="#CCCCCC">with your own</font><font color="#E5E5E5"> driver if one of the</font>

259
00:11:44,270 --> 00:11:48,140
<font color="#CCCCCC">debates does</font><font color="#E5E5E5"> not scale or well enough</font>

260
00:11:46,100 --> 00:11:51,020
for your deployment<font color="#E5E5E5"> or does not answer</font>

261
00:11:48,140 --> 00:11:52,610
specific requirements<font color="#E5E5E5"> so implementing a</font>

262
00:11:51,020 --> 00:11:54,470
new driver is basically a matter of

263
00:11:52,610 --> 00:11:56,480
writing<font color="#E5E5E5"> a few simple functions to store</font>

264
00:11:54,470 --> 00:12:00,110
values and retrieve<font color="#E5E5E5"> values</font><font color="#CCCCCC"> from the</font>

265
00:11:56,480 --> 00:12:01,550
<font color="#E5E5E5">database</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> same with the</font><font color="#CCCCCC"> pub/sub</font>

266
00:12:00,110 --> 00:12:03,800
mechanism we use<font color="#E5E5E5"> pops up to facilitate</font>

267
00:12:01,550 --> 00:12:09,500
<font color="#CCCCCC">faster updates between</font><font color="#E5E5E5"> the management</font>

268
00:12:03,800 --> 00:12:13,550
part and the and the database and the

269
00:12:09,500 --> 00:12:16,340
controller is<font color="#CCCCCC"> giving</font><font color="#E5E5E5"> a and again we can</font>

270
00:12:13,550 --> 00:12:20,719
<font color="#CCCCCC">use a the distributed database mechanism</font>

271
00:12:16,340 --> 00:12:23,510
here<font color="#E5E5E5"> to to implement the paps of my</font>

272
00:12:20,720 --> 00:12:25,280
functionality or you can use<font color="#E5E5E5"> any other</font>

273
00:12:23,510 --> 00:12:27,200
<font color="#CCCCCC">kind of</font><font color="#E5E5E5"> other database that you have</font>

274
00:12:25,280 --> 00:12:29,689
deployed in your environment<font color="#CCCCCC"> or you can</font>

275
00:12:27,200 --> 00:12:35,060
use a no broker solution at all<font color="#E5E5E5"> like</font>

276
00:12:29,690 --> 00:12:36,920
<font color="#E5E5E5">zero in here the the pub sub interface</font>

277
00:12:35,060 --> 00:12:39,800
itself is also<font color="#CCCCCC"> abstract</font><font color="#E5E5E5"> behind a driver</font>

278
00:12:36,920 --> 00:12:45,819
so implementing a new mechanism<font color="#CCCCCC"> should</font>

279
00:12:39,800 --> 00:12:45,819
<font color="#CCCCCC">be quite simple on the higher level of</font>

280
00:12:46,060 --> 00:12:52,739
<font color="#E5E5E5">functionality we have the dragon flow</font>

281
00:12:49,690 --> 00:12:55,920
<font color="#E5E5E5">drivers</font><font color="#CCCCCC"> and make the service</font><font color="#E5E5E5"> plugins</font>

282
00:12:52,740 --> 00:12:59,730
inside<font color="#E5E5E5"> Neutron each one of those tiny</font>

283
00:12:55,920 --> 00:13:01,370
little<font color="#E5E5E5"> cubes</font><font color="#CCCCCC"> at the top is a driver or a</font>

284
00:12:59,730 --> 00:13:04,740
service plug-in in<font color="#E5E5E5"> neutrons that can</font>

285
00:13:01,370 --> 00:13:06,690
that handles a specific segment<font color="#E5E5E5"> of</font>

286
00:13:04,740 --> 00:13:08,700
functionality for<font color="#E5E5E5"> instance we have the</font>

287
00:13:06,690 --> 00:13:11,700
<font color="#CCCCCC">l2</font><font color="#E5E5E5"> and the security groups handling a</font>

288
00:13:08,700 --> 00:13:14,850
translation of incoming<font color="#E5E5E5"> networks</font>

289
00:13:11,700 --> 00:13:16,500
airports and security group events and

290
00:13:14,850 --> 00:13:20,209
translating<font color="#E5E5E5"> them into dragon flow</font>

291
00:13:16,500 --> 00:13:24,089
actions and<font color="#E5E5E5"> state and we and</font><font color="#CCCCCC"> we have</font>

292
00:13:20,209 --> 00:13:26,219
other<font color="#CCCCCC"> plugins for handling three routers</font>

293
00:13:24,089 --> 00:13:28,580
and<font color="#CCCCCC"> of service and service function</font>

294
00:13:26,220 --> 00:13:30,089
chaining<font color="#E5E5E5"> each of those cubes is a</font>

295
00:13:28,580 --> 00:13:32,490
stevedore risible

296
00:13:30,089 --> 00:13:34,649
and is a stevedore entry point so<font color="#CCCCCC"> it is</font>

297
00:13:32,490 --> 00:13:38,220
<font color="#E5E5E5">dynamically loaded by Neutron so you</font>

298
00:13:34,649 --> 00:13:39,839
don't have to write<font color="#CCCCCC"> those stuff directly</font>

299
00:13:38,220 --> 00:13:41,760
inside<font color="#E5E5E5"> neutral code you can just</font>

300
00:13:39,839 --> 00:13:42,990
register it<font color="#E5E5E5"> externally install them to</font>

301
00:13:41,760 --> 00:13:47,189
the<font color="#E5E5E5"> plug-in and set the configuration</font>

302
00:13:42,990 --> 00:13:49,890
<font color="#E5E5E5">and it will be loaded on the bottom we</font>

303
00:13:47,190 --> 00:13:52,050
<font color="#CCCCCC">have the dragon flow controller here</font>

304
00:13:49,890 --> 00:13:54,920
connected<font color="#CCCCCC"> to an OVH</font><font color="#E5E5E5"> Bridger that is</font>

305
00:13:52,050 --> 00:13:57,300
connected to our<font color="#E5E5E5"> VMs and the containers</font>

306
00:13:54,920 --> 00:13:59,670
<font color="#E5E5E5">and inside dragon flow we also have</font>

307
00:13:57,300 --> 00:14:02,729
those tiny cubes with names on them

308
00:13:59,670 --> 00:14:06,000
<font color="#E5E5E5">those are the applications</font><font color="#CCCCCC"> dragon flow</font>

309
00:14:02,730 --> 00:14:09,300
controller itself is<font color="#E5E5E5"> it's basically a</font>

310
00:14:06,000 --> 00:14:11,820
<font color="#CCCCCC">mechanism for distributing</font><font color="#E5E5E5"> events coming</font>

311
00:14:09,300 --> 00:14:15,779
up from the<font color="#E5E5E5"> neutron server or if the any</font>

312
00:14:11,820 --> 00:14:17,339
<font color="#E5E5E5">other kind of northbound API into the</font>

313
00:14:15,779 --> 00:14:20,040
applications<font color="#E5E5E5"> on the dragon flow</font>

314
00:14:17,339 --> 00:14:22,830
controllers<font color="#E5E5E5"> a major differentiation from</font>

315
00:14:20,040 --> 00:14:24,839
the neutrons open V switch

316
00:14:22,830 --> 00:14:27,750
implementation is<font color="#CCCCCC"> that we don't</font>

317
00:14:24,839 --> 00:14:29,580
distribute distribute flows and actions

318
00:14:27,750 --> 00:14:32,220
through our<font color="#E5E5E5"> PC we basically we push</font>

319
00:14:29,580 --> 00:14:33,720
policy to towards<font color="#E5E5E5"> the controller so each</font>

320
00:14:32,220 --> 00:14:35,430
of the<font color="#CCCCCC"> controls</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> complete</font><font color="#E5E5E5"> state</font>

321
00:14:33,720 --> 00:14:38,100
that it requires to<font color="#E5E5E5"> set the data path</font>

322
00:14:35,430 --> 00:14:41,040
<font color="#CCCCCC">and modifies the data path</font><font color="#E5E5E5"> according to</font>

323
00:14:38,100 --> 00:14:45,600
the state<font color="#CCCCCC"> that is required</font><font color="#E5E5E5"> for instance</font>

324
00:14:41,040 --> 00:14:47,189
if such<font color="#CCCCCC"> evented coming in from the from</font>

325
00:14:45,600 --> 00:14:48,870
the server can be<font color="#E5E5E5"> a new port is created</font>

326
00:14:47,190 --> 00:14:50,730
<font color="#E5E5E5">and then the controller itself has to</font>

327
00:14:48,870 --> 00:14:57,000
decide how the data path has<font color="#CCCCCC"> to be</font>

328
00:14:50,730 --> 00:14:58,480
modified<font color="#E5E5E5"> to accommodate this port and as</font>

329
00:14:57,000 --> 00:15:02,470
<font color="#E5E5E5">I said in the beginning of the</font>

330
00:14:58,480 --> 00:15:04,899
the of the talk one<font color="#E5E5E5"> of the points which</font>

331
00:15:02,470 --> 00:15:10,750
<font color="#E5E5E5">we try to address is to make a dragon</font>

332
00:15:04,899 --> 00:15:12,670
flow and more<font color="#CCCCCC"> Morphin environment</font><font color="#E5E5E5"> or</font>

333
00:15:10,750 --> 00:15:15,190
platform so you<font color="#E5E5E5"> can introduce your</font><font color="#CCCCCC"> own</font>

334
00:15:12,670 --> 00:15:16,810
and<font color="#CCCCCC"> network</font><font color="#E5E5E5"> functionality because with</font>

335
00:15:15,190 --> 00:15:18,850
<font color="#E5E5E5">at the end solutions lot of time at the</font>

336
00:15:16,810 --> 00:15:21,010
data path is kind<font color="#E5E5E5"> of a black box</font><font color="#CCCCCC"> and you</font>

337
00:15:18,850 --> 00:15:22,779
<font color="#CCCCCC">don't have much of a</font><font color="#E5E5E5"> direct control over</font>

338
00:15:21,010 --> 00:15:24,189
what<font color="#E5E5E5"> happens there you may be able</font><font color="#CCCCCC"> to</font>

339
00:15:22,779 --> 00:15:26,170
configure<font color="#E5E5E5"> it through maybe</font><font color="#CCCCCC"> two runtime</font>

340
00:15:24,190 --> 00:15:27,730
<font color="#CCCCCC">or</font><font color="#E5E5E5"> configuration but you don't have real</font>

341
00:15:26,170 --> 00:15:30,819
<font color="#CCCCCC">control of what</font><font color="#E5E5E5"> happens to the packets</font>

342
00:15:27,730 --> 00:15:33,820
inside the data path and we try to

343
00:15:30,820 --> 00:15:36,040
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> enable this kind of change so</font>

344
00:15:33,820 --> 00:15:39,130
because no not deployment is the same

345
00:15:36,040 --> 00:15:42,459
and<font color="#E5E5E5"> you may have to tweak your a data</font>

346
00:15:39,130 --> 00:15:43,810
path to make it stuff more<font color="#CCCCCC"> and more fast</font>

347
00:15:42,459 --> 00:15:48,099
or<font color="#CCCCCC"> maybe more efficient in your data</font>

348
00:15:43,810 --> 00:15:50,439
center now from the portability<font color="#E5E5E5"> of</font><font color="#CCCCCC"> ten</font>

349
00:15:48,100 --> 00:15:52,120
point as I said<font color="#E5E5E5"> earlier in the</font><font color="#CCCCCC"> neutral</font>

350
00:15:50,440 --> 00:15:54,070
server a lot of the plugins<font color="#CCCCCC"> and drivers</font>

351
00:15:52,120 --> 00:15:56,170
are basically still<font color="#E5E5E5"> the right entry</font>

352
00:15:54,070 --> 00:15:58,449
points<font color="#E5E5E5"> and we didn't have to do a lot of</font>

353
00:15:56,170 --> 00:16:01,420
over<font color="#E5E5E5"> there because we kind of got this</font>

354
00:15:58,449 --> 00:16:06,219
for free<font color="#E5E5E5"> from</font><font color="#CCCCCC"> a the way that</font><font color="#E5E5E5"> Tipler</font>

355
00:16:01,420 --> 00:16:07,810
works by using a configuration<font color="#E5E5E5"> value</font><font color="#CCCCCC"> so</font>

356
00:16:06,220 --> 00:16:09,850
you can just<font color="#E5E5E5"> say you can enable or</font>

357
00:16:07,810 --> 00:16:14,050
disable specific functionalities<font color="#E5E5E5"> inside</font>

358
00:16:09,850 --> 00:16:16,240
the neutral server and introduce any of

359
00:16:14,050 --> 00:16:20,620
those boxes<font color="#E5E5E5"> and</font><font color="#CCCCCC"> any other boxes</font><font color="#E5E5E5"> down</font>

360
00:16:16,240 --> 00:16:23,470
<font color="#CCCCCC">there to do specific functionality</font><font color="#E5E5E5"> now</font>

361
00:16:20,620 --> 00:16:26,889
on the controller side we have

362
00:16:23,470 --> 00:16:29,290
<font color="#CCCCCC">applications a specific application is</font>

363
00:16:26,889 --> 00:16:31,180
is responsible for<font color="#CCCCCC"> really a small piece</font>

364
00:16:29,290 --> 00:16:33,910
<font color="#CCCCCC">of data path functionality</font><font color="#E5E5E5"> for instance</font>

365
00:16:31,180 --> 00:16:35,888
we have here port security port security

366
00:16:33,910 --> 00:16:37,449
is a quite<font color="#CCCCCC"> simple application</font><font color="#E5E5E5"> it is</font>

367
00:16:35,889 --> 00:16:40,750
<font color="#E5E5E5">responsible for</font><font color="#CCCCCC"> specific tables where</font>

368
00:16:37,449 --> 00:16:43,300
packets go through when when<font color="#E5E5E5"> they are</font>

369
00:16:40,750 --> 00:16:44,620
coming<font color="#CCCCCC"> out of</font><font color="#E5E5E5"> a VM or container and this</font>

370
00:16:43,300 --> 00:16:47,620
port security application will just

371
00:16:44,620 --> 00:16:50,980
filter all the<font color="#E5E5E5"> packets that match the</font>

372
00:16:47,620 --> 00:16:53,290
source IP or and and<font color="#E5E5E5"> our MAC address</font><font color="#CCCCCC"> of</font>

373
00:16:50,980 --> 00:16:59,260
a specific port so at the VM we won't be

374
00:16:53,290 --> 00:17:05,678
<font color="#E5E5E5">able to max poof</font><font color="#CCCCCC"> its packets</font><font color="#E5E5E5"> to in the</font>

375
00:16:59,260 --> 00:17:07,569
bridge<font color="#E5E5E5"> and</font><font color="#CCCCCC"> again we used</font><font color="#E5E5E5"> stevedore here</font>

376
00:17:05,679 --> 00:17:08,740
to allow dynamic registration of

377
00:17:07,569 --> 00:17:10,030
applications so

378
00:17:08,740 --> 00:17:13,390
<font color="#CCCCCC">you can write an application put</font><font color="#E5E5E5"> it</font>

379
00:17:10,030 --> 00:17:15,520
<font color="#E5E5E5">outside</font><font color="#CCCCCC"> of the project and it will be</font>

380
00:17:13,390 --> 00:17:17,640
<font color="#E5E5E5">loaded and started by dragon flow as if</font>

381
00:17:15,520 --> 00:17:19,900
it were<font color="#CCCCCC"> one of</font><font color="#E5E5E5"> the core applications so</font>

382
00:17:17,640 --> 00:17:25,870
<font color="#CCCCCC">Steve oh really help us out</font><font color="#E5E5E5"> on this</font>

383
00:17:19,900 --> 00:17:26,800
<font color="#CCCCCC">aspect</font><font color="#E5E5E5"> yeah and if you are going to talk</font>

384
00:17:25,869 --> 00:17:28,089
<font color="#CCCCCC">a bit more about dragon flow</font>

385
00:17:26,800 --> 00:17:31,480
applications<font color="#CCCCCC"> they're basically kind of</font>

386
00:17:28,089 --> 00:17:36,460
three major types<font color="#E5E5E5"> that can be</font><font color="#CCCCCC"> classified</font>

387
00:17:31,480 --> 00:17:38,710
<font color="#CCCCCC">in turn we open flow earlier so one</font>

388
00:17:36,460 --> 00:17:42,370
simple example<font color="#E5E5E5"> of fortification</font><font color="#CCCCCC"> are</font>

389
00:17:38,710 --> 00:17:44,140
applications<font color="#E5E5E5"> that just use flows so it</font>

390
00:17:42,370 --> 00:17:47,559
<font color="#E5E5E5">the application receives events from the</font>

391
00:17:44,140 --> 00:17:51,220
database and it will<font color="#E5E5E5"> modify</font><font color="#CCCCCC"> specific</font>

392
00:17:47,559 --> 00:17:53,740
tables to match to<font color="#E5E5E5"> the policy described</font>

393
00:17:51,220 --> 00:17:56,080
by the table<font color="#E5E5E5"> this can be a port security</font>

394
00:17:53,740 --> 00:17:58,030
as I mentioned earlier that it<font color="#CCCCCC"> is a new</font>

395
00:17:56,080 --> 00:18:00,699
port created and it's<font color="#E5E5E5"> great when</font><font color="#CCCCCC"> you</font>

396
00:17:58,030 --> 00:18:05,830
value the flow in the particular table

397
00:18:00,700 --> 00:18:07,600
<font color="#E5E5E5">it can be it can be routing that sees</font>

398
00:18:05,830 --> 00:18:11,199
that<font color="#E5E5E5"> you operated and</font><font color="#CCCCCC"> you'll create</font><font color="#E5E5E5"> a</font>

399
00:18:07,600 --> 00:18:13,449
new<font color="#E5E5E5"> routing rule in a table and this</font>

400
00:18:11,200 --> 00:18:15,280
kind of the best applications<font color="#CCCCCC"> in terms</font>

401
00:18:13,450 --> 00:18:17,830
<font color="#E5E5E5">of performance</font><font color="#CCCCCC"> because the packet will</font>

402
00:18:15,280 --> 00:18:18,940
<font color="#E5E5E5">be serviced entirely by the</font><font color="#CCCCCC"> OVS</font><font color="#E5E5E5"> and the</font>

403
00:18:17,830 --> 00:18:23,169
packet<font color="#E5E5E5"> does not have to travel anywhere</font>

404
00:18:18,940 --> 00:18:27,940
<font color="#E5E5E5">and the problems really come straight</font>

405
00:18:23,170 --> 00:18:29,590
into into the specific bridge and some

406
00:18:27,940 --> 00:18:32,340
examples<font color="#CCCCCC"> as I said earlier our port</font>

407
00:18:29,590 --> 00:18:36,189
security<font color="#CCCCCC"> l2 forwarding routing</font>

408
00:18:32,340 --> 00:18:37,889
responding to<font color="#E5E5E5"> our requests and ICMP</font>

409
00:18:36,190 --> 00:18:40,510
pings

410
00:18:37,890 --> 00:18:42,510
now second<font color="#CCCCCC"> part</font><font color="#E5E5E5"> a second type of</font><font color="#CCCCCC"> dragon</font>

411
00:18:40,510 --> 00:18:45,309
flow applications are<font color="#E5E5E5"> a bit more complex</font>

412
00:18:42,510 --> 00:18:49,030
one of the things that<font color="#E5E5E5"> open flow allows</font>

413
00:18:45,309 --> 00:18:51,970
is<font color="#CCCCCC"> to send a packet to it to the</font>

414
00:18:49,030 --> 00:18:53,230
controller<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this bridge so the second</font>

415
00:18:51,970 --> 00:18:57,070
type is<font color="#E5E5E5"> kind of applications</font><font color="#CCCCCC"> that</font>

416
00:18:53,230 --> 00:19:00,250
install flows but also send packets to

417
00:18:57,070 --> 00:19:05,889
<font color="#CCCCCC">the controller for a handling and this</font>

418
00:19:00,250 --> 00:19:07,450
can be an<font color="#E5E5E5"> issue for both the a from both</font>

419
00:19:05,890 --> 00:19:08,950
the control plane perspective because

420
00:19:07,450 --> 00:19:10,870
<font color="#CCCCCC">your controller is now</font><font color="#E5E5E5"> also dealing with</font>

421
00:19:08,950 --> 00:19:13,630
the forwarding can data<font color="#E5E5E5"> plane in a bit</font>

422
00:19:10,870 --> 00:19:14,919
it has to process packets and also from

423
00:19:13,630 --> 00:19:17,470
the Day Spas perspective<font color="#CCCCCC"> because now</font>

424
00:19:14,920 --> 00:19:18,730
your controller has<font color="#CCCCCC"> to the Packers</font><font color="#E5E5E5"> have</font>

425
00:19:17,470 --> 00:19:19,990
more latency because<font color="#E5E5E5"> if the packet has</font>

426
00:19:18,730 --> 00:19:23,520
<font color="#CCCCCC">to go to the controller</font><font color="#E5E5E5"> control has to</font>

427
00:19:19,990 --> 00:19:23,520
treat it and<font color="#E5E5E5"> send</font><font color="#CCCCCC"> it back to the</font><font color="#E5E5E5"> bridge</font>

428
00:19:23,590 --> 00:19:28,149
but it also allows you to implement<font color="#E5E5E5"> a</font>

429
00:19:25,179 --> 00:19:31,360
more complex functionality<font color="#E5E5E5"> like the</font><font color="#CCCCCC"> DHCP</font>

430
00:19:28,150 --> 00:19:34,120
server<font color="#E5E5E5"> so the DHCP application will</font>

431
00:19:31,360 --> 00:19:35,919
capture all<font color="#E5E5E5"> the DHCP discover request</font>

432
00:19:34,120 --> 00:19:39,428
packets coming<font color="#E5E5E5"> out of a virtual machine</font>

433
00:19:35,920 --> 00:19:41,200
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> it will see what portage is</font>

434
00:19:39,429 --> 00:19:42,940
coming from and graph a specific reply

435
00:19:41,200 --> 00:19:47,170
packet and inject it<font color="#CCCCCC"> back into</font><font color="#E5E5E5"> the</font>

436
00:19:42,940 --> 00:19:50,980
bridge and there are other examples for

437
00:19:47,170 --> 00:19:53,590
why this<font color="#E5E5E5"> can be useful</font><font color="#CCCCCC"> and finally the</font>

438
00:19:50,980 --> 00:19:55,900
last type<font color="#E5E5E5"> of applications are kind of</font>

439
00:19:53,590 --> 00:19:57,370
the<font color="#E5E5E5"> most complex where we have the</font>

440
00:19:55,900 --> 00:20:00,640
<font color="#CCCCCC">application that</font><font color="#E5E5E5"> install flows but we</font>

441
00:19:57,370 --> 00:20:04,449
also deploy an external service<font color="#E5E5E5"> on the</font>

442
00:20:00,640 --> 00:20:06,640
side we attach an interface to<font color="#E5E5E5"> our</font><font color="#CCCCCC"> tour</font>

443
00:20:04,450 --> 00:20:08,140
switch<font color="#E5E5E5"> and we configure an external</font>

444
00:20:06,640 --> 00:20:12,010
service to listen on this<font color="#E5E5E5"> interface and</font>

445
00:20:08,140 --> 00:20:13,450
then we we<font color="#E5E5E5"> install the flows that</font><font color="#CCCCCC"> route</font>

446
00:20:12,010 --> 00:20:16,090
specific kinds of traffic<font color="#E5E5E5"> into this</font>

447
00:20:13,450 --> 00:20:18,070
service<font color="#E5E5E5"> interface and it tells us</font><font color="#CCCCCC"> to a</font>

448
00:20:16,090 --> 00:20:22,780
<font color="#E5E5E5">lot of more much more complex things</font>

449
00:20:18,070 --> 00:20:26,639
like<font color="#E5E5E5"> if like a metadata service which is</font>

450
00:20:22,780 --> 00:20:30,940
basically HTTP proxy for some<font color="#E5E5E5"> Nova API</font>

451
00:20:26,640 --> 00:20:32,770
<font color="#E5E5E5">or maybe a DNS lookup</font><font color="#CCCCCC"> or a load</font>

452
00:20:30,940 --> 00:20:36,160
balancing by deploying a proxy alongside

453
00:20:32,770 --> 00:20:37,920
<font color="#CCCCCC">he</font><font color="#E5E5E5"> dragon flow controller and it</font>

454
00:20:36,160 --> 00:20:41,020
<font color="#CCCCCC">basically allows us to take</font><font color="#E5E5E5"> advantage of</font>

455
00:20:37,920 --> 00:20:43,240
the protocol<font color="#CCCCCC"> stack on the</font><font color="#E5E5E5"> hypervisor</font>

456
00:20:41,020 --> 00:20:45,309
<font color="#E5E5E5">because because in the previous slide</font>

457
00:20:43,240 --> 00:20:48,010
when we<font color="#E5E5E5"> are packaging in our packets to</font>

458
00:20:45,309 --> 00:20:50,110
<font color="#CCCCCC">the controller</font><font color="#E5E5E5"> we had to deal with the</font>

459
00:20:48,010 --> 00:20:53,800
protocols ourselves and if you look at

460
00:20:50,110 --> 00:20:55,510
HTTP<font color="#E5E5E5"> regret it it's quite harder to do</font>

461
00:20:53,800 --> 00:20:57,010
this because there's a<font color="#E5E5E5"> lot of state we</font>

462
00:20:55,510 --> 00:20:58,840
have<font color="#E5E5E5"> to implement disappear or</font>

463
00:20:57,010 --> 00:21:02,290
controller and we have to implement<font color="#E5E5E5"> HTTP</font>

464
00:20:58,840 --> 00:21:04,899
on top of that and by the<font color="#E5E5E5"> point</font><font color="#CCCCCC"> with a</font>

465
00:21:02,290 --> 00:21:06,639
sidecar<font color="#E5E5E5"> service and attaching to the</font>

466
00:21:04,900 --> 00:21:09,910
bridge we can just<font color="#E5E5E5"> take advantage</font><font color="#CCCCCC"> of the</font>

467
00:21:06,640 --> 00:21:14,920
hypervisor<font color="#E5E5E5"> typically stack and use that</font>

468
00:21:09,910 --> 00:21:17,020
for for the controller but also there

469
00:21:14,920 --> 00:21:19,179
are<font color="#E5E5E5"> also downsides to 12 this because</font>

470
00:21:17,020 --> 00:21:21,820
now we have<font color="#E5E5E5"> to make</font><font color="#CCCCCC"> sure our service is</font>

471
00:21:19,179 --> 00:21:23,620
alive as well<font color="#CCCCCC"> alive we have to deploy it</font>

472
00:21:21,820 --> 00:21:25,600
<font color="#E5E5E5">we have to configure it we have more</font>

473
00:21:23,620 --> 00:21:27,280
smaller moving parts<font color="#E5E5E5"> on the compute</font>

474
00:21:25,600 --> 00:21:31,350
nodes<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you have to make sure they are</font>

475
00:21:27,280 --> 00:21:35,950
live and and<font color="#CCCCCC"> behave well</font>

476
00:21:31,350 --> 00:21:37,870
and now kind of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> problems all three</font>

477
00:21:35,950 --> 00:21:40,180
parts of three types<font color="#E5E5E5"> of the applications</font>

478
00:21:37,870 --> 00:21:43,120
<font color="#E5E5E5">they were doing one thing in common</font>

479
00:21:40,180 --> 00:21:45,190
we're installing flows<font color="#CCCCCC"> and as we saw</font>

480
00:21:43,120 --> 00:21:47,260
earlier<font color="#E5E5E5"> open flow is quite a low-level</font>

481
00:21:45,190 --> 00:21:51,520
<font color="#E5E5E5">API for a switch and forwarding</font>

482
00:21:47,260 --> 00:21:53,710
configuration so this works<font color="#CCCCCC"> well enough</font>

483
00:21:51,520 --> 00:21:56,470
<font color="#E5E5E5">if you have your own applications and</font>

484
00:21:53,710 --> 00:21:58,480
you can kind<font color="#E5E5E5"> of coordinate what tables</font>

485
00:21:56,470 --> 00:22:01,060
will you use and what registers you<font color="#E5E5E5"> will</font>

486
00:21:58,480 --> 00:22:03,100
use<font color="#E5E5E5"> and you will make</font><font color="#CCCCCC"> sure that</font><font color="#E5E5E5"> you know</font>

487
00:22:01,060 --> 00:22:06,070
there's no application<font color="#E5E5E5"> that steps on the</font>

488
00:22:03,100 --> 00:22:07,330
<font color="#E5E5E5">toast of another application but this</font>

489
00:22:06,070 --> 00:22:08,919
<font color="#E5E5E5">won't work well if you want to have</font>

490
00:22:07,330 --> 00:22:11,379
<font color="#CCCCCC">third-party applications or maybe</font>

491
00:22:08,920 --> 00:22:13,690
<font color="#E5E5E5">powerup applications where you have two</font>

492
00:22:11,380 --> 00:22:16,030
<font color="#CCCCCC">applications that have no notion</font><font color="#E5E5E5"> of one</font>

493
00:22:13,690 --> 00:22:18,790
of another and they want<font color="#E5E5E5"> to use the same</font>

494
00:22:16,030 --> 00:22:24,149
flows or maybe the same registers this

495
00:22:18,790 --> 00:22:27,190
<font color="#E5E5E5">is a problem this is cause trouble and</font>

496
00:22:24,150 --> 00:22:29,380
not just black<font color="#E5E5E5"> opal applications we have</font>

497
00:22:27,190 --> 00:22:33,040
some of those goes inside dragonfly code

498
00:22:29,380 --> 00:22:36,280
itself we have our<font color="#E5E5E5"> table</font><font color="#CCCCCC"> 55</font><font color="#E5E5E5"> with handles</font>

499
00:22:33,040 --> 00:22:38,050
<font color="#E5E5E5">l2 forwarding and then we</font><font color="#CCCCCC"> have some</font>

500
00:22:36,280 --> 00:22:39,610
floats<font color="#E5E5E5"> installed</font><font color="#CCCCCC"> thereby the forwarding</font>

501
00:22:38,050 --> 00:22:41,530
application but also<font color="#E5E5E5"> some flows</font>

502
00:22:39,610 --> 00:22:45,070
installed by the 3 routing application

503
00:22:41,530 --> 00:22:47,170
and some<font color="#E5E5E5"> flows by the do</font><font color="#CCCCCC"> application and</font>

504
00:22:45,070 --> 00:22:49,510
now we have to<font color="#CCCCCC"> coordinate the priorities</font>

505
00:22:47,170 --> 00:22:50,980
of<font color="#E5E5E5"> the flows</font><font color="#CCCCCC"> of each application</font><font color="#E5E5E5"> with</font>

506
00:22:49,510 --> 00:22:52,600
all<font color="#CCCCCC"> the application user need and we</font>

507
00:22:50,980 --> 00:22:53,950
have<font color="#CCCCCC"> to make</font><font color="#E5E5E5"> sure</font><font color="#CCCCCC"> that when we delete</font>

508
00:22:52,600 --> 00:22:56,649
flows we don't do it<font color="#E5E5E5"> flows from another</font>

509
00:22:53,950 --> 00:22:59,580
application<font color="#CCCCCC"> and this basically means</font>

510
00:22:56,650 --> 00:23:02,680
<font color="#CCCCCC">that a lot of care should be taken when</font>

511
00:22:59,580 --> 00:23:05,770
<font color="#E5E5E5">adding or</font><font color="#CCCCCC"> changing changing stuff there</font>

512
00:23:02,680 --> 00:23:08,770
and debugging and<font color="#E5E5E5"> troubleshooting is</font>

513
00:23:05,770 --> 00:23:10,750
much harder than stuff don't work<font color="#E5E5E5"> so</font>

514
00:23:08,770 --> 00:23:12,670
<font color="#CCCCCC">thoroughly another nice way to let</font>

515
00:23:10,750 --> 00:23:16,240
people<font color="#E5E5E5"> write</font><font color="#CCCCCC"> talkable applications but</font>

516
00:23:12,670 --> 00:23:18,730
then run into<font color="#E5E5E5"> this</font><font color="#CCCCCC"> kind of travel</font><font color="#E5E5E5"> so</font>

517
00:23:16,240 --> 00:23:21,130
what we came up<font color="#CCCCCC"> with</font><font color="#E5E5E5"> we decided that we</font>

518
00:23:18,730 --> 00:23:24,670
are going<font color="#E5E5E5"> to introduce something called</font>

519
00:23:21,130 --> 00:23:26,680
<font color="#E5E5E5">application specifications so each</font>

520
00:23:24,670 --> 00:23:29,380
application<font color="#E5E5E5"> will specify what kind of</font>

521
00:23:26,680 --> 00:23:31,750
interface it exposes to towards<font color="#E5E5E5"> the data</font>

522
00:23:29,380 --> 00:23:35,770
path<font color="#CCCCCC"> and kind</font><font color="#E5E5E5"> of wrap each application</font>

523
00:23:31,750 --> 00:23:37,270
<font color="#E5E5E5">into a black box</font><font color="#CCCCCC"> on the data path where</font>

524
00:23:35,770 --> 00:23:39,430
the application itself will be

525
00:23:37,270 --> 00:23:41,860
responsible<font color="#E5E5E5"> for whatever happens inside</font>

526
00:23:39,430 --> 00:23:43,200
<font color="#CCCCCC">this black box but</font><font color="#E5E5E5"> nothing of what</font>

527
00:23:41,860 --> 00:23:45,629
happens outside

528
00:23:43,200 --> 00:23:47,400
so the basic specification<font color="#E5E5E5"> of the</font>

529
00:23:45,630 --> 00:23:50,460
application<font color="#E5E5E5"> looks like how many tables</font>

530
00:23:47,400 --> 00:23:51,330
it wants to<font color="#E5E5E5"> use and what registers</font><font color="#CCCCCC"> it is</font>

531
00:23:50,460 --> 00:23:54,000
<font color="#E5E5E5">going to use to implement the</font>

532
00:23:51,330 --> 00:23:55,710
<font color="#E5E5E5">functionality</font><font color="#CCCCCC"> and what are the</font>

533
00:23:54,000 --> 00:23:56,130
application entry points and the exit

534
00:23:55,710 --> 00:23:57,870
points

535
00:23:56,130 --> 00:24:00,270
now when application entry point is

536
00:23:57,870 --> 00:24:02,580
<font color="#CCCCCC">basically a</font><font color="#E5E5E5"> callback into something what</font>

537
00:24:00,270 --> 00:24:05,370
we want to application to do for

538
00:24:02,580 --> 00:24:08,250
instance<font color="#CCCCCC"> here we have a security</font><font color="#E5E5E5"> group</font>

539
00:24:05,370 --> 00:24:12,719
<font color="#E5E5E5">example security group application and</font>

540
00:24:08,250 --> 00:24:16,860
<font color="#E5E5E5">enforces network policies on the on the</font>

541
00:24:12,720 --> 00:24:19,590
cloud<font color="#E5E5E5"> network so we</font><font color="#CCCCCC"> can have a network</font>

542
00:24:16,860 --> 00:24:23,129
policy saying that for<font color="#E5E5E5"> this VM we want</font>

543
00:24:19,590 --> 00:24:24,899
to allow incoming<font color="#E5E5E5"> ICMP packets but we</font>

544
00:24:23,130 --> 00:24:27,720
don't want any of<font color="#E5E5E5"> UDP or something like</font>

545
00:24:24,900 --> 00:24:31,920
<font color="#E5E5E5">that and here we have two entry points</font>

546
00:24:27,720 --> 00:24:33,840
<font color="#E5E5E5">into exit points now intercept entry</font>

547
00:24:31,920 --> 00:24:36,120
point means that<font color="#E5E5E5"> all packets</font><font color="#CCCCCC"> coming</font><font color="#E5E5E5"> into</font>

548
00:24:33,840 --> 00:24:39,480
this entry<font color="#CCCCCC"> point will be serviced as if</font>

549
00:24:36,120 --> 00:24:45,209
they are ingress for specific VM<font color="#E5E5E5"> and the</font>

550
00:24:39,480 --> 00:24:46,740
egress entry point<font color="#E5E5E5"> will be will be</font>

551
00:24:45,210 --> 00:24:48,540
<font color="#E5E5E5">handling all the packets coming out of</font>

552
00:24:46,740 --> 00:24:50,370
<font color="#CCCCCC">the specific way em so if</font><font color="#E5E5E5"> we want to use</font>

553
00:24:48,540 --> 00:24:53,460
<font color="#E5E5E5">these kind of black</font><font color="#CCCCCC"> box will have to</font>

554
00:24:50,370 --> 00:24:56,580
wire all<font color="#CCCCCC"> the</font><font color="#E5E5E5"> packets coming out of the</font>

555
00:24:53,460 --> 00:24:58,800
VM to<font color="#CCCCCC"> the eager support and the coming</font>

556
00:24:56,580 --> 00:25:00,750
<font color="#CCCCCC">into VM</font><font color="#E5E5E5"> into the ingress entry point</font><font color="#CCCCCC"> and</font>

557
00:24:58,800 --> 00:25:04,320
the exit points are basically the same

558
00:25:00,750 --> 00:25:06,570
<font color="#E5E5E5">where each application is kind of taking</font>

559
00:25:04,320 --> 00:25:08,280
packets in and out puts them out so if

560
00:25:06,570 --> 00:25:12,360
you have<font color="#E5E5E5"> several points it might have</font>

561
00:25:08,280 --> 00:25:14,430
sense to have several exit points but

562
00:25:12,360 --> 00:25:16,379
the relation is not<font color="#CCCCCC"> always wanted one</font>

563
00:25:14,430 --> 00:25:17,850
for instance<font color="#E5E5E5"> we may have l2 application</font>

564
00:25:16,380 --> 00:25:20,400
that<font color="#CCCCCC"> just does forwarding so we may have</font>

565
00:25:17,850 --> 00:25:22,919
only a single<font color="#E5E5E5"> entry point</font><font color="#CCCCCC"> but we have</font>

566
00:25:20,400 --> 00:25:24,660
several exit points versus one for

567
00:25:22,920 --> 00:25:28,230
unicast packets but and also one for

568
00:25:24,660 --> 00:25:31,080
<font color="#E5E5E5">multicast packets and along</font><font color="#CCCCCC"> with the</font>

569
00:25:28,230 --> 00:25:32,880
specification we also<font color="#E5E5E5"> introduced a more</font>

570
00:25:31,080 --> 00:25:34,610
strict<font color="#E5E5E5"> semantics for applications so</font>

571
00:25:32,880 --> 00:25:36,120
<font color="#CCCCCC">this</font><font color="#E5E5E5"> won't be for</font><font color="#CCCCCC"> nothing</font>

572
00:25:34,610 --> 00:25:39,010
we

573
00:25:36,120 --> 00:25:41,139
decided on a set<font color="#E5E5E5"> of rules</font><font color="#CCCCCC"> that an</font>

574
00:25:39,010 --> 00:25:45,129
application should abide by and one of

575
00:25:41,140 --> 00:25:47,290
them is we said earlier that<font color="#E5E5E5"> we require</font>

576
00:25:45,130 --> 00:25:48,910
application<font color="#E5E5E5"> to declare all</font><font color="#CCCCCC"> the tables</font>

577
00:25:47,290 --> 00:25:51,790
it's going to use so an<font color="#CCCCCC"> application can</font>

578
00:25:48,910 --> 00:25:54,760
only really interact<font color="#E5E5E5"> with its own tables</font>

579
00:25:51,790 --> 00:25:57,550
now<font color="#E5E5E5"> and it can only access the registers</font>

580
00:25:54,760 --> 00:26:00,700
that<font color="#CCCCCC"> in declare these values</font><font color="#E5E5E5"> it will</font>

581
00:25:57,550 --> 00:26:02,290
only go to<font color="#E5E5E5"> between tables of its own or</font>

582
00:26:00,700 --> 00:26:05,500
maybe<font color="#CCCCCC"> each</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> of the aggregate points</font>

583
00:26:02,290 --> 00:26:07,300
and if we talked<font color="#E5E5E5"> to</font><font color="#CCCCCC"> earlier about</font><font color="#E5E5E5"> this</font>

584
00:26:05,500 --> 00:26:12,250
packet in packet out<font color="#E5E5E5"> to the controller</font>

585
00:26:07,300 --> 00:26:14,590
functionality<font color="#E5E5E5"> then the application</font><font color="#CCCCCC"> want</font>

586
00:26:12,250 --> 00:26:16,030
<font color="#CCCCCC">to intercept packets from</font><font color="#E5E5E5"> tables that</font>

587
00:26:14,590 --> 00:26:18,639
belong to<font color="#E5E5E5"> other applications and</font><font color="#CCCCCC"> won't</font>

588
00:26:16,030 --> 00:26:19,210
<font color="#E5E5E5">inject packets back to tables of other</font>

589
00:26:18,640 --> 00:26:21,970
applications

590
00:26:19,210 --> 00:26:26,680
<font color="#CCCCCC">she basically</font><font color="#E5E5E5"> confines itself into this</font>

591
00:26:21,970 --> 00:26:29,590
kind of specification black box and and

592
00:26:26,680 --> 00:26:31,270
now if<font color="#CCCCCC"> we kind</font><font color="#E5E5E5"> of zoom out of a single</font>

593
00:26:29,590 --> 00:26:36,669
application<font color="#CCCCCC"> we still have a data path</font>

594
00:26:31,270 --> 00:26:40,500
and<font color="#E5E5E5"> now it's built of those boxes so the</font>

595
00:26:36,670 --> 00:26:42,340
the controller<font color="#E5E5E5"> itself is responsible</font><font color="#CCCCCC"> for</font>

596
00:26:40,500 --> 00:26:45,610
connecting<font color="#E5E5E5"> all of</font><font color="#CCCCCC"> those applications</font>

597
00:26:42,340 --> 00:26:47,230
<font color="#CCCCCC">between themselves</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> this level the</font>

598
00:26:45,610 --> 00:26:49,540
<font color="#E5E5E5">connection is quite simple there's no</font>

599
00:26:47,230 --> 00:26:53,290
branching each exit point goes<font color="#CCCCCC"> to</font>

600
00:26:49,540 --> 00:26:56,470
exactly<font color="#E5E5E5"> one</font><font color="#CCCCCC"> entry point and the</font>

601
00:26:53,290 --> 00:26:59,260
controller<font color="#E5E5E5"> also is</font><font color="#CCCCCC"> responsible to</font><font color="#E5E5E5"> swap</font>

602
00:26:56,470 --> 00:27:00,940
the registers between the between

603
00:26:59,260 --> 00:27:03,370
<font color="#E5E5E5">applications of one application expects</font>

604
00:27:00,940 --> 00:27:05,800
<font color="#E5E5E5">some value to</font><font color="#CCCCCC"> be stored as</font><font color="#E5E5E5"> like five</font>

605
00:27:03,370 --> 00:27:07,629
other application expected<font color="#E5E5E5"> at track</font>

606
00:27:05,800 --> 00:27:11,850
<font color="#E5E5E5">seven</font><font color="#CCCCCC"> the controller will be responsible</font>

607
00:27:07,630 --> 00:27:14,590
<font color="#CCCCCC">to</font><font color="#E5E5E5"> move in between</font><font color="#CCCCCC"> the registers and</font>

608
00:27:11,850 --> 00:27:17,889
<font color="#CCCCCC">there's also a lot of kind</font><font color="#E5E5E5"> of neat</font>

609
00:27:14,590 --> 00:27:20,530
functionality that now we<font color="#E5E5E5"> can validate a</font>

610
00:27:17,890 --> 00:27:22,630
lot of stuff<font color="#E5E5E5"> about the data path we can</font>

611
00:27:20,530 --> 00:27:26,020
see if there are any<font color="#E5E5E5"> maybe unwired entry</font>

612
00:27:22,630 --> 00:27:27,910
points or maybe applications that are at

613
00:27:26,020 --> 00:27:30,580
all not<font color="#CCCCCC"> on which better or not reachable</font>

614
00:27:27,910 --> 00:27:33,400
at all or maybe we<font color="#E5E5E5"> are consuming a</font>

615
00:27:30,580 --> 00:27:35,260
variable in application a but no

616
00:27:33,400 --> 00:27:38,050
application before<font color="#E5E5E5"> it ever generated it</font>

617
00:27:35,260 --> 00:27:41,290
so we can run<font color="#E5E5E5"> into some trouble there</font><font color="#CCCCCC"> it</font>

618
00:27:38,050 --> 00:27:43,780
allows<font color="#CCCCCC"> us to assert more correctness on</font>

619
00:27:41,290 --> 00:27:45,220
the data path now that we have those

620
00:27:43,780 --> 00:27:53,230
<font color="#E5E5E5">kind of contracts between</font><font color="#CCCCCC"> the</font>

621
00:27:45,220 --> 00:27:55,450
vacations<font color="#CCCCCC"> and finally to allow all of</font>

622
00:27:53,230 --> 00:27:56,530
this<font color="#E5E5E5"> integration between applications we</font>

623
00:27:55,450 --> 00:27:59,200
wanted<font color="#E5E5E5"> to make all this wiring</font>

624
00:27:56,530 --> 00:28:02,379
configurable<font color="#E5E5E5"> so the controller itself as</font>

625
00:27:59,200 --> 00:28:03,940
we said earlier<font color="#E5E5E5"> it handles the actual</font>

626
00:28:02,380 --> 00:28:06,070
wiring between<font color="#E5E5E5"> an exit point and an</font>

627
00:28:03,940 --> 00:28:08,080
entry point<font color="#E5E5E5"> but it does this by reading</font>

628
00:28:06,070 --> 00:28:10,210
the configuration<font color="#E5E5E5"> so if you want to</font><font color="#CCCCCC"> plug</font>

629
00:28:08,080 --> 00:28:12,820
in<font color="#E5E5E5"> a new application you just</font><font color="#CCCCCC"> have to</font>

630
00:28:10,210 --> 00:28:15,789
<font color="#CCCCCC">edit as a stupid</font><font color="#E5E5E5"> or entry point and you</font>

631
00:28:12,820 --> 00:28:19,030
go to the<font color="#E5E5E5"> configuration for</font><font color="#CCCCCC"> a for a data</font>

632
00:28:15,789 --> 00:28:21,220
path and you kind<font color="#E5E5E5"> of insert it on</font><font color="#CCCCCC"> one of</font>

633
00:28:19,030 --> 00:28:22,840
the edges<font color="#CCCCCC"> or maybe</font><font color="#E5E5E5"> several ones and you</font>

634
00:28:21,220 --> 00:28:26,049
don't have to modify<font color="#E5E5E5"> the dragon flow</font>

635
00:28:22,840 --> 00:28:27,939
code itself what we try to achieve here

636
00:28:26,049 --> 00:28:29,889
is that we really<font color="#E5E5E5"> try to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

637
00:28:27,940 --> 00:28:32,190
<font color="#E5E5E5">write a specific feature top to bottom</font>

638
00:28:29,890 --> 00:28:36,039
from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> management to the data path</font>

639
00:28:32,190 --> 00:28:38,020
itself<font color="#E5E5E5"> without being required</font><font color="#CCCCCC"> to go into</font>

640
00:28:36,039 --> 00:28:44,289
a dragon flow code and modify external

641
00:28:38,020 --> 00:28:47,500
internal functionality and that's about

642
00:28:44,289 --> 00:28:50,919
<font color="#E5E5E5">all I</font><font color="#CCCCCC"> have on on this topic</font><font color="#E5E5E5"> we are an</font>

643
00:28:47,500 --> 00:28:54,520
<font color="#E5E5E5">open source project and we'll be happy</font>

644
00:28:50,919 --> 00:28:57,010
if you<font color="#E5E5E5"> seen you participate we have an</font>

645
00:28:54,520 --> 00:28:59,590
IRC<font color="#CCCCCC"> channel it's a shop and stuff</font><font color="#E5E5E5"> -</font>

646
00:28:57,010 --> 00:29:03,908
dragon flow at<font color="#CCCCCC"> freenode</font><font color="#E5E5E5"> and we have a</font>

647
00:28:59,590 --> 00:29:09,100
<font color="#CCCCCC">weekly</font><font color="#E5E5E5"> meetings</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> for we actually the</font>

648
00:29:03,909 --> 00:29:13,260
times are<font color="#CCCCCC"> bi-weekly we have one for for</font>

649
00:29:09,100 --> 00:29:16,330
the Pacific time<font color="#E5E5E5"> zone and one for the</font><font color="#CCCCCC"> US</font>

650
00:29:13,260 --> 00:29:19,590
<font color="#CCCCCC">when let's say thank you if anyone</font><font color="#E5E5E5"> have</font>

651
00:29:16,330 --> 00:29:19,590
any<font color="#CCCCCC"> questions I'll be happy</font><font color="#E5E5E5"> to take them</font>

652
00:29:19,710 --> 00:29:28,390
yes do<font color="#E5E5E5"> we have plans to implement ear</font>

653
00:29:25,809 --> 00:29:30,760
and<font color="#E5E5E5"> bulb answers yes actually we have a</font>

654
00:29:28,390 --> 00:29:32,320
specification<font color="#E5E5E5"> and design already done</font>

655
00:29:30,760 --> 00:29:39,780
and we have someone<font color="#E5E5E5"> working on that</font>

656
00:29:32,320 --> 00:29:39,780
right now I think

657
00:29:44,369 --> 00:29:49,478
<font color="#E5E5E5">you know at the moment we don't plan to</font>

658
00:29:47,200 --> 00:29:52,899
do<font color="#CCCCCC"> l7 right right off the bat we want to</font>

659
00:29:49,479 --> 00:29:56,999
do al Ford first and I<font color="#E5E5E5"> think we</font><font color="#CCCCCC"> will do</font>

660
00:29:52,899 --> 00:29:56,998
is have maybe a veggie<font color="#CCCCCC"> proc Sierra</font><font color="#E5E5E5"> yep</font>

661
00:29:59,249 --> 00:30:02,609
<font color="#CCCCCC">nothing else</font>

662
00:30:09,250 --> 00:30:12,359
[Applause]

