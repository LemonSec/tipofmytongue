1
00:00:04,740 --> 00:00:11,530
<font color="#E5E5E5">all right hello everybody</font><font color="#CCCCCC"> I'm to be a</font>

2
00:00:10,270 --> 00:00:14,140
stay in doctor I worked for a company

3
00:00:11,530 --> 00:00:16,450
called neo4j<font color="#E5E5E5"> we built a graph</font><font color="#CCCCCC"> database</font>

4
00:00:14,140 --> 00:00:20,230
management system<font color="#E5E5E5"> and we build it</font><font color="#CCCCCC"> using</font>

5
00:00:16,450 --> 00:00:24,700
<font color="#E5E5E5">Java</font><font color="#CCCCCC"> and in a prior life I used</font><font color="#E5E5E5"> to work</font>

6
00:00:20,230 --> 00:00:25,989
on creating and implementing a dynamic

7
00:00:24,700 --> 00:00:31,299
language for the JVM<font color="#E5E5E5"> called</font>

8
00:00:25,989 --> 00:00:36,240
-<font color="#E5E5E5"> Python for the JVM so throughout the</font>

9
00:00:31,300 --> 00:00:38,470
years I've and<font color="#E5E5E5"> still encounter a few</font>

10
00:00:36,240 --> 00:00:41,320
<font color="#E5E5E5">come across a few interesting things</font>

11
00:00:38,470 --> 00:00:45,760
<font color="#CCCCCC">that you can do with with</font><font color="#E5E5E5"> the JVM and</font>

12
00:00:41,320 --> 00:00:51,960
bend it in a few ways<font color="#CCCCCC"> that that</font><font color="#E5E5E5"> are fun</font>

13
00:00:45,760 --> 00:00:55,629
<font color="#E5E5E5">and interesting so I thought I'd on a</font>

14
00:00:51,960 --> 00:00:59,740
few times before<font color="#E5E5E5"> and I thought now again</font>

15
00:00:55,630 --> 00:01:05,040
I'll do do a<font color="#CCCCCC"> talking</font><font color="#E5E5E5"> and share some of</font>

16
00:00:59,740 --> 00:01:07,960
those things<font color="#E5E5E5"> so this is talk about</font>

17
00:01:05,040 --> 00:01:12,520
hacking<font color="#E5E5E5"> the JVM and doing it mostly from</font>

18
00:01:07,960 --> 00:01:14,619
from pure Java code so most of you<font color="#CCCCCC"> are</font>

19
00:01:12,520 --> 00:01:18,699
probably thinking<font color="#CCCCCC"> about this guy</font><font color="#E5E5E5"> son</font><font color="#CCCCCC"> Mis</font>

20
00:01:14,619 --> 00:01:21,399
comes safe<font color="#CCCCCC"> and you probably know about</font>

21
00:01:18,700 --> 00:01:24,719
it so it's boring<font color="#CCCCCC"> I'm not gonna talk too</font>

22
00:01:21,399 --> 00:01:27,939
<font color="#CCCCCC">much about</font><font color="#E5E5E5"> that in</font><font color="#CCCCCC"> fact</font><font color="#E5E5E5"> most of it is</font>

23
00:01:24,719 --> 00:01:29,770
most of the behavior here is made

24
00:01:27,939 --> 00:01:32,619
completely safe and<font color="#CCCCCC"> available by</font><font color="#E5E5E5"> other</font>

25
00:01:29,770 --> 00:01:34,298
<font color="#E5E5E5">API</font><font color="#CCCCCC"> s-- these days so</font><font color="#E5E5E5"> it's very</font>

26
00:01:32,619 --> 00:01:36,749
interesting<font color="#E5E5E5"> anymore</font>

27
00:01:34,299 --> 00:01:39,429
the only<font color="#E5E5E5"> remaining thing of course is a</font>

28
00:01:36,749 --> 00:01:42,609
good API<font color="#E5E5E5"> for native memory access but</font>

29
00:01:39,429 --> 00:01:44,439
hopefully that<font color="#CCCCCC"> will be</font><font color="#E5E5E5"> coming any given</font>

30
00:01:42,609 --> 00:01:46,298
the future now<font color="#E5E5E5"> so I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk</font>

31
00:01:44,439 --> 00:01:47,880
about<font color="#E5E5E5"> other things instead so let's talk</font>

32
00:01:46,299 --> 00:01:54,279
about<font color="#CCCCCC"> start with something that is</font>

33
00:01:47,880 --> 00:01:59,798
public and not secret in any way the

34
00:01:54,279 --> 00:02:05,949
thread MX beam has a CPU time method

35
00:01:59,799 --> 00:02:09,250
<font color="#E5E5E5">that gives you the time that a time was</font>

36
00:02:05,950 --> 00:02:13,390
that the thread that you specify<font color="#E5E5E5"> as</font>

37
00:02:09,250 --> 00:02:15,740
<font color="#E5E5E5">using the thread ID the amount of time</font>

38
00:02:13,390 --> 00:02:18,829
that<font color="#CCCCCC"> that fred has</font><font color="#E5E5E5"> spent</font>

39
00:02:15,740 --> 00:02:20,600
actually executing on the CPU<font color="#E5E5E5"> this is</font>

40
00:02:18,830 --> 00:02:22,610
really<font color="#CCCCCC"> useful for</font><font color="#E5E5E5"> being able to measure</font>

41
00:02:20,600 --> 00:02:28,640
how<font color="#CCCCCC"> much your application that's</font>

42
00:02:22,610 --> 00:02:31,040
actually executing versus being swapped

43
00:02:28,640 --> 00:02:35,089
out an idle in some way for for<font color="#E5E5E5"> doing</font>

44
00:02:31,040 --> 00:02:36,920
performance measurements on a<font color="#CCCCCC"> different</font>

45
00:02:35,090 --> 00:02:41,050
<font color="#E5E5E5">level than</font><font color="#CCCCCC"> anybody can do with a system</font>

46
00:02:36,920 --> 00:02:43,519
<font color="#CCCCCC">nah nope I'm</font><font color="#E5E5E5"> so sure</font><font color="#CCCCCC"> you you're getting</font>

47
00:02:41,050 --> 00:02:46,910
it's just<font color="#E5E5E5"> no time</font><font color="#CCCCCC"> it's very good for</font>

48
00:02:43,520 --> 00:02:48,410
<font color="#CCCCCC">measuring how much wall time is being</font>

49
00:02:46,910 --> 00:02:53,240
<font color="#CCCCCC">spent but you might also</font><font color="#E5E5E5"> be interested</font>

50
00:02:48,410 --> 00:02:56,630
<font color="#CCCCCC">in looking</font><font color="#E5E5E5"> at how much time is did that</font>

51
00:02:53,240 --> 00:03:01,520
code spend<font color="#E5E5E5"> actually actively executing</font>

52
00:02:56,630 --> 00:03:05,780
and not just being swapped out<font color="#E5E5E5"> this</font>

53
00:03:01,520 --> 00:03:11,450
thread<font color="#CCCCCC"> MX being high</font><font color="#E5E5E5"> has a has a sibling</font>

54
00:03:05,780 --> 00:03:13,820
or child or<font color="#E5E5E5"> bastard hidden friend</font><font color="#CCCCCC"> that's</font>

55
00:03:11,450 --> 00:03:16,549
<font color="#E5E5E5">also called thread MX</font><font color="#CCCCCC"> beam but in a</font>

56
00:03:13,820 --> 00:03:18,769
<font color="#E5E5E5">different package in</font><font color="#CCCCCC"> common son</font>

57
00:03:16,550 --> 00:03:21,500
management so this is actually another

58
00:03:18,770 --> 00:03:26,030
interface<font color="#E5E5E5"> that the same on hotspot the</font>

59
00:03:21,500 --> 00:03:28,000
same actual instance<font color="#E5E5E5"> also implements and</font>

60
00:03:26,030 --> 00:03:31,100
here you've got another<font color="#E5E5E5"> interesting</font>

61
00:03:28,000 --> 00:03:32,120
method<font color="#E5E5E5"> for getting the allocated</font><font color="#CCCCCC"> bytes</font>

62
00:03:31,100 --> 00:03:35,660
by a thread

63
00:03:32,120 --> 00:03:39,530
this is also super useful for<font color="#CCCCCC"> measuring</font>

64
00:03:35,660 --> 00:03:42,950
how<font color="#CCCCCC"> much how many</font><font color="#E5E5E5"> bytes how much data</font>

65
00:03:39,530 --> 00:03:44,620
<font color="#CCCCCC">how has memory has</font><font color="#E5E5E5"> been allocated by</font><font color="#CCCCCC"> a</font>

66
00:03:42,950 --> 00:03:47,030
particular piece of<font color="#E5E5E5"> code so you take a</font>

67
00:03:44,620 --> 00:03:48,950
snapshot of this before<font color="#CCCCCC"> your card code</font>

68
00:03:47,030 --> 00:03:50,630
starts executing<font color="#E5E5E5"> take a snapshot after</font>

69
00:03:48,950 --> 00:03:54,140
afterwards and then you compare the

70
00:03:50,630 --> 00:03:56,030
difference and compute<font color="#E5E5E5"> the difference</font>

71
00:03:54,140 --> 00:03:58,549
and that that will<font color="#E5E5E5"> tell you how much</font>

72
00:03:56,030 --> 00:04:02,650
data was being allocated by this

73
00:03:58,550 --> 00:04:04,430
particular code so it's<font color="#E5E5E5"> being executed</font>

74
00:04:02,650 --> 00:04:07,010
sure it doesn't tell you<font color="#CCCCCC"> how many</font>

75
00:04:04,430 --> 00:04:09,670
<font color="#E5E5E5">objects were executed but</font><font color="#CCCCCC"> the number of</font>

76
00:04:07,010 --> 00:04:14,200
bytes<font color="#E5E5E5"> is a really interesting measure</font>

77
00:04:09,670 --> 00:04:16,880
because<font color="#E5E5E5"> that'll that will tell you</font>

78
00:04:14,200 --> 00:04:18,500
essentially<font color="#E5E5E5"> how much pressure the</font>

79
00:04:16,880 --> 00:04:20,738
allocator<font color="#CCCCCC"> and garbage collector will be</font>

80
00:04:18,500 --> 00:04:20,738
under

81
00:04:21,850 --> 00:04:29,330
unfortunately this method<font color="#E5E5E5"> has a problem</font>

82
00:04:26,590 --> 00:04:32,299
<font color="#CCCCCC">first of</font><font color="#E5E5E5"> all obviously it's not a public</font>

83
00:04:29,330 --> 00:04:34,460
<font color="#CCCCCC">API so it's not officially supported</font><font color="#E5E5E5"> so</font>

84
00:04:32,300 --> 00:04:35,840
I can have<font color="#E5E5E5"> it if it if it could be and</font>

85
00:04:34,460 --> 00:04:39,440
in the process of<font color="#E5E5E5"> making it officially</font>

86
00:04:35,840 --> 00:04:42,469
supported I'd love it if it<font color="#E5E5E5"> also didn't</font>

87
00:04:39,440 --> 00:04:46,160
require acquiring a global lock in the

88
00:04:42,470 --> 00:04:50,090
implementation<font color="#CCCCCC"> for getting the allocated</font>

89
00:04:46,160 --> 00:04:53,930
<font color="#E5E5E5">bytes for the current thread which</font>

90
00:04:50,090 --> 00:04:56,150
technically it shouldn't need<font color="#CCCCCC"> to but the</font>

91
00:04:53,930 --> 00:05:00,259
use cases that haven't<font color="#E5E5E5"> there so it</font>

92
00:04:56,150 --> 00:05:02,770
always always<font color="#E5E5E5"> grabs</font><font color="#CCCCCC"> that lock which</font>

93
00:05:00,259 --> 00:05:06,550
<font color="#E5E5E5">means that even though we use this in</font>

94
00:05:02,770 --> 00:05:09,560
neo4j you can turn turn tracing of

95
00:05:06,550 --> 00:05:13,130
allocation on or<font color="#CCCCCC"> free requires when you</font>

96
00:05:09,560 --> 00:05:15,530
run<font color="#CCCCCC"> first</font><font color="#E5E5E5"> database and get information</font>

97
00:05:13,130 --> 00:05:19,969
<font color="#E5E5E5">about this much data was allocated while</font>

98
00:05:15,530 --> 00:05:21,830
your<font color="#E5E5E5"> query run but it unfortunately</font>

99
00:05:19,970 --> 00:05:27,470
leads to contention so it's turned off

100
00:05:21,830 --> 00:05:31,820
by default<font color="#CCCCCC"> there's another</font><font color="#E5E5E5"> interesting</font>

101
00:05:27,470 --> 00:05:35,740
API that's available in every JVM this

102
00:05:31,820 --> 00:05:38,120
is a public API called the

103
00:05:35,740 --> 00:05:41,720
instrumentation<font color="#E5E5E5"> java.lang instrument</font>

104
00:05:38,120 --> 00:05:44,740
instrumentation<font color="#CCCCCC"> this is an API used by</font>

105
00:05:41,720 --> 00:05:48,830
Java agents it's typically used<font color="#CCCCCC"> for</font>

106
00:05:44,740 --> 00:05:53,060
things like registering byte code

107
00:05:48,830 --> 00:05:54,919
transformers which I'm sure people<font color="#E5E5E5"> have</font>

108
00:05:53,060 --> 00:05:56,270
<font color="#E5E5E5">interesting use cases for that I've</font>

109
00:05:54,919 --> 00:05:59,539
never really<font color="#CCCCCC"> had a good use case for</font>

110
00:05:56,270 --> 00:06:01,820
<font color="#E5E5E5">doing a transformation of the byte code</font>

111
00:05:59,539 --> 00:06:06,820
in a running system and prefer to<font color="#CCCCCC"> do my</font>

112
00:06:01,820 --> 00:06:12,070
transformation<font color="#CCCCCC"> ahead of something but</font>

113
00:06:06,820 --> 00:06:15,740
<font color="#E5E5E5">and one reason for that is that makes</font>

114
00:06:12,070 --> 00:06:19,909
code loading much much slower but it

115
00:06:15,740 --> 00:06:23,780
also provides a handy method<font color="#E5E5E5"> for getting</font>

116
00:06:19,909 --> 00:06:27,349
object size give it an object<font color="#E5E5E5"> and it</font>

117
00:06:23,780 --> 00:06:31,669
<font color="#CCCCCC">will tell you how big it is so I saw</font><font color="#E5E5E5"> a</font>

118
00:06:27,349 --> 00:06:34,450
preview which which<font color="#CCCCCC"> is missing otherwise</font>

119
00:06:31,669 --> 00:06:43,159
in in Java

120
00:06:34,450 --> 00:06:44,719
the the main downside of<font color="#CCCCCC"> of</font><font color="#E5E5E5"> using the</font>

121
00:06:43,160 --> 00:06:46,580
instrumentation<font color="#E5E5E5"> API if you if you want</font>

122
00:06:44,720 --> 00:06:49,970
to get access<font color="#E5E5E5"> to the gate</font><font color="#CCCCCC"> objects size</font>

123
00:06:46,580 --> 00:06:52,820
method is that it's a bit tricky to<font color="#E5E5E5"> get</font>

124
00:06:49,970 --> 00:06:56,600
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> only things that actually</font><font color="#E5E5E5"> get</font>

125
00:06:52,820 --> 00:07:00,409
<font color="#E5E5E5">access to</font><font color="#CCCCCC"> to instrument</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

126
00:06:56,600 --> 00:07:01,669
instrumentation<font color="#E5E5E5"> API are Java agents so</font>

127
00:07:00,410 --> 00:07:05,139
you have to<font color="#E5E5E5"> write an agent in</font><font color="#CCCCCC"> order</font><font color="#E5E5E5"> to</font>

128
00:07:01,669 --> 00:07:08,750
look at obvious<font color="#CCCCCC"> ice</font><font color="#E5E5E5"> that's annoying</font>

129
00:07:05,139 --> 00:07:12,139
<font color="#E5E5E5">luckily you can deploy an agent from</font><font color="#CCCCCC"> the</font>

130
00:07:08,750 --> 00:07:17,540
same JVM into the same JVM while it's

131
00:07:12,139 --> 00:07:18,380
running and<font color="#E5E5E5"> then via a static field</font>

132
00:07:17,540 --> 00:07:21,500
<font color="#E5E5E5">somewhere</font>

133
00:07:18,380 --> 00:07:24,290
give yourself give<font color="#CCCCCC"> yourself access to to</font>

134
00:07:21,500 --> 00:07:27,190
the instrumentation instance so<font color="#E5E5E5"> you</font>

135
00:07:24,290 --> 00:07:31,340
simply<font color="#E5E5E5"> write an agent class like this</font>

136
00:07:27,190 --> 00:07:35,060
I've compressed this heavily to fit it

137
00:07:31,340 --> 00:07:38,330
on two<font color="#CCCCCC"> sides</font><font color="#E5E5E5"> with an agent main that</font>

138
00:07:35,060 --> 00:07:44,090
takes fixed instrumentation instance as

139
00:07:38,330 --> 00:07:48,169
<font color="#E5E5E5">a parameter that's the</font><font color="#CCCCCC"> method that will</font>

140
00:07:44,090 --> 00:07:54,530
be<font color="#CCCCCC"> invoked when when</font><font color="#E5E5E5"> this jar file runs</font>

141
00:07:48,169 --> 00:07:59,960
as a<font color="#CCCCCC"> runs as an agent and then puts</font><font color="#E5E5E5"> that</font>

142
00:07:54,530 --> 00:08:02,150
into a into<font color="#CCCCCC"> a field that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can read so</font>

143
00:07:59,960 --> 00:08:06,650
the get instrumentation method we look

144
00:08:02,150 --> 00:08:12,169
at<font color="#CCCCCC"> a field if it's not assigned</font><font color="#E5E5E5"> it'll</font>

145
00:08:06,650 --> 00:08:15,650
load it<font color="#CCCCCC"> the load the</font><font color="#E5E5E5"> load this</font><font color="#CCCCCC"> passes</font><font color="#E5E5E5"> an</font>

146
00:08:12,169 --> 00:08:19,520
<font color="#E5E5E5">agent</font><font color="#CCCCCC"> which will assign the field as we</font>

147
00:08:15,650 --> 00:08:23,659
see in the agent main method<font color="#E5E5E5"> and then</font>

148
00:08:19,520 --> 00:08:24,109
return<font color="#E5E5E5"> it so how does this loading work</font>

149
00:08:23,660 --> 00:08:29,870
then

150
00:08:24,110 --> 00:08:31,810
well this uses a private API<font color="#CCCCCC"> the virtual</font>

151
00:08:29,870 --> 00:08:39,200
machine<font color="#E5E5E5"> attach API it's part of a</font>

152
00:08:31,810 --> 00:08:43,729
<font color="#E5E5E5">hospital yet which allows you to</font><font color="#CCCCCC"> get too</font>

153
00:08:39,200 --> 00:08:46,100
attached to<font color="#E5E5E5"> a VM and tell</font><font color="#CCCCCC"> that VM to</font>

154
00:08:43,729 --> 00:08:47,649
load an agent<font color="#E5E5E5"> so here we get the pit of</font>

155
00:08:46,100 --> 00:08:52,940
<font color="#E5E5E5">the current</font><font color="#CCCCCC"> process</font>

156
00:08:47,649 --> 00:08:56,770
and load the agent<font color="#E5E5E5"> of the current load</font>

157
00:08:52,940 --> 00:09:00,820
the current jar as an agent<font color="#E5E5E5"> in</font><font color="#CCCCCC"> that VM</font>

158
00:08:56,770 --> 00:09:04,069
and then<font color="#CCCCCC"> attach</font><font color="#E5E5E5"> that's all we need</font><font color="#CCCCCC"> to do</font>

159
00:09:00,820 --> 00:09:18,860
<font color="#CCCCCC">the agent main method then we'll do the</font>

160
00:09:04,070 --> 00:09:22,459
<font color="#E5E5E5">rest</font><font color="#CCCCCC"> but if we want if we</font><font color="#E5E5E5"> were to think</font>

161
00:09:18,860 --> 00:09:24,440
<font color="#CCCCCC">about</font><font color="#E5E5E5"> helping</font><font color="#CCCCCC"> make the</font><font color="#E5E5E5"> JVM better</font><font color="#CCCCCC"> I hope</font>

162
00:09:22,459 --> 00:09:28,130
you make this easier<font color="#E5E5E5"> why do we really</font>

163
00:09:24,440 --> 00:09:33,620
<font color="#E5E5E5">need to require an agent to get the</font>

164
00:09:28,130 --> 00:09:36,050
instrumentation<font color="#CCCCCC"> class</font><font color="#E5E5E5"> sure it has lots</font>

165
00:09:33,620 --> 00:09:41,060
of<font color="#CCCCCC"> capabilities that</font><font color="#E5E5E5"> should be declared</font>

166
00:09:36,050 --> 00:09:44,719
<font color="#E5E5E5">in the</font><font color="#CCCCCC"> agent jar</font><font color="#E5E5E5"> so maybe but maybe some</font>

167
00:09:41,060 --> 00:09:47,089
<font color="#E5E5E5">of those capabilities like getting</font>

168
00:09:44,720 --> 00:09:49,250
<font color="#CCCCCC">obvious</font><font color="#E5E5E5"> size doesn't</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to be reserved</font>

169
00:09:47,089 --> 00:09:50,630
for agents how about<font color="#E5E5E5"> having a getter for</font>

170
00:09:49,250 --> 00:09:52,880
instrumentation<font color="#E5E5E5"> or a getter for some</font>

171
00:09:50,630 --> 00:09:57,279
smaller<font color="#CCCCCC"> API</font><font color="#E5E5E5"> that provides</font><font color="#CCCCCC"> get obvious</font>

172
00:09:52,880 --> 00:10:00,079
<font color="#E5E5E5">lies if we want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get even</font><font color="#CCCCCC"> more</font>

173
00:09:57,279 --> 00:10:02,930
powerful tools there's some we can<font color="#E5E5E5"> write</font>

174
00:10:00,079 --> 00:10:08,630
some<font color="#E5E5E5"> C code or some native code using</font>

175
00:10:02,930 --> 00:10:16,819
<font color="#CCCCCC">the JVM</font><font color="#E5E5E5"> tooling interface JVM</font><font color="#CCCCCC"> TI so this</font>

176
00:10:08,630 --> 00:10:20,360
is<font color="#E5E5E5"> a native API</font><font color="#CCCCCC"> for writing native JVM</font>

177
00:10:16,820 --> 00:10:22,220
agents so<font color="#E5E5E5"> another type</font><font color="#CCCCCC"> of agent not a</font>

178
00:10:20,360 --> 00:10:26,329
<font color="#CCCCCC">Java but I think these are just</font><font color="#E5E5E5"> called</font>

179
00:10:22,220 --> 00:10:29,360
agents the<font color="#E5E5E5"> interesting thing about this</font>

180
00:10:26,329 --> 00:10:32,149
is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> once you've even</font><font color="#CCCCCC"> though this is</font>

181
00:10:29,360 --> 00:10:34,670
this API<font color="#E5E5E5"> is meant to be used from an</font>

182
00:10:32,149 --> 00:10:37,700
<font color="#CCCCCC">agent</font><font color="#E5E5E5"> perfectly possible to write a</font>

183
00:10:34,670 --> 00:10:42,319
night code that calls it so we can do

184
00:10:37,700 --> 00:10:46,250
that<font color="#CCCCCC"> although</font><font color="#E5E5E5"> you might still need</font><font color="#CCCCCC"> an</font>

185
00:10:42,320 --> 00:10:49,490
agent in order<font color="#CCCCCC"> to to enable</font><font color="#E5E5E5"> certain of</font>

186
00:10:46,250 --> 00:10:51,050
certain capabilities<font color="#CCCCCC"> because not</font><font color="#E5E5E5"> all JVM</font>

187
00:10:49,490 --> 00:10:52,720
<font color="#CCCCCC">carry capabilities are enabled by</font>

188
00:10:51,050 --> 00:10:54,790
<font color="#E5E5E5">default just like a not</font><font color="#CCCCCC"> all</font>

189
00:10:52,720 --> 00:10:57,619
instrumentation

190
00:10:54,790 --> 00:11:00,740
capabilities are enabled by default<font color="#CCCCCC"> and</font>

191
00:10:57,619 --> 00:11:02,389
some of them<font color="#E5E5E5"> can not</font><font color="#CCCCCC"> be enabled once the</font>

192
00:11:00,740 --> 00:11:05,689
JVM has started running they have to be

193
00:11:02,389 --> 00:11:08,350
enabled<font color="#E5E5E5"> before and at that point they</font>

194
00:11:05,689 --> 00:11:13,240
will probably most likely disable a few

195
00:11:08,350 --> 00:11:16,160
of the optimizations that<font color="#E5E5E5"> a JVM performs</font>

196
00:11:13,240 --> 00:11:19,879
so forth<font color="#E5E5E5"> but if you want to play with</font>

197
00:11:16,160 --> 00:11:21,170
<font color="#E5E5E5">them</font><font color="#CCCCCC"> you need</font><font color="#E5E5E5"> to have an agent to to</font>

198
00:11:19,879 --> 00:11:23,660
enable dosis capabilities<font color="#CCCCCC"> I don't</font>

199
00:11:21,170 --> 00:11:25,819
remember which capabilities those

200
00:11:23,660 --> 00:11:30,949
<font color="#CCCCCC">artists cite</font><font color="#E5E5E5"> with this code a couple</font>

201
00:11:25,819 --> 00:11:33,309
years ago<font color="#CCCCCC"> but</font><font color="#E5E5E5"> once we've done that we</font>

202
00:11:30,949 --> 00:11:36,199
can<font color="#E5E5E5"> play with with a lot of interesting</font>

203
00:11:33,309 --> 00:11:39,110
JVM introspection capabilities from pure

204
00:11:36,199 --> 00:11:43,998
<font color="#E5E5E5">Java code just calling through</font><font color="#CCCCCC"> a and</font><font color="#E5E5E5"> I</font>

205
00:11:39,110 --> 00:11:46,639
<font color="#CCCCCC">to this native code and that's</font><font color="#E5E5E5"> actually</font>

206
00:11:43,999 --> 00:11:49,040
quite<font color="#E5E5E5"> simple and straightforward we can</font>

207
00:11:46,639 --> 00:11:54,050
do things like reflecting<font color="#E5E5E5"> their call</font>

208
00:11:49,040 --> 00:11:57,110
stack<font color="#CCCCCC"> so getting the stack of running</font>

209
00:11:54,050 --> 00:12:01,399
Java code and<font color="#E5E5E5"> getting local variables</font>

210
00:11:57,110 --> 00:12:04,550
<font color="#E5E5E5">out of out of the calling</font><font color="#CCCCCC"> method or</font>

211
00:12:01,399 --> 00:12:13,699
interesting things<font color="#E5E5E5"> like that so there's</font>

212
00:12:04,550 --> 00:12:17,748
a method<font color="#CCCCCC"> in this JVM</font><font color="#E5E5E5"> TI</font><font color="#CCCCCC"> api called</font><font color="#E5E5E5"> get</font>

213
00:12:13,699 --> 00:12:20,059
<font color="#E5E5E5">Stratos and we use</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> to get the stack</font>

214
00:12:17,749 --> 00:12:22,730
trace from<font color="#CCCCCC"> a certain depth so yeah</font><font color="#E5E5E5"> and</font>

215
00:12:20,059 --> 00:12:26,360
all the particular<font color="#E5E5E5"> things in number of</font>

216
00:12:22,730 --> 00:12:28,850
frames so you can say from depth<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> and a</font>

217
00:12:26,360 --> 00:12:31,040
guesstimate<font color="#CCCCCC"> that the stack will be no</font>

218
00:12:28,850 --> 00:12:38,600
bigger than<font color="#E5E5E5"> 10 million</font><font color="#CCCCCC"> or something</font><font color="#E5E5E5"> like</font>

219
00:12:31,040 --> 00:12:43,248
<font color="#CCCCCC">that some big number and we'll get we'll</font>

220
00:12:38,600 --> 00:12:48,350
get<font color="#E5E5E5"> a</font><font color="#CCCCCC"> we'll get</font><font color="#E5E5E5"> to frame information</font>

221
00:12:43,249 --> 00:12:50,660
<font color="#E5E5E5">from from all those frames and a counter</font>

222
00:12:48,350 --> 00:12:53,059
telling us exactly<font color="#E5E5E5"> how deep the</font><font color="#CCCCCC"> slack</font>

223
00:12:50,660 --> 00:12:54,920
<font color="#CCCCCC">was or we can say I want either</font>

224
00:12:53,059 --> 00:12:56,179
<font color="#CCCCCC">particular pet</font><font color="#E5E5E5"> that one just one stack</font>

225
00:12:54,920 --> 00:13:00,709
frame<font color="#CCCCCC"> if it</font><font color="#E5E5E5"> starts</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> frame are</font>

226
00:12:56,179 --> 00:13:02,769
interested<font color="#E5E5E5"> in so this will give us this</font>

227
00:13:00,709 --> 00:13:09,099
<font color="#CCCCCC">little</font><font color="#E5E5E5"> structure information</font><font color="#CCCCCC"> containing</font>

228
00:13:02,769 --> 00:13:09,100
the method ID which is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> chain I</font>

229
00:13:09,319 --> 00:13:16,319
Jay<font color="#E5E5E5"> and I reference to to a method and</font>

230
00:13:13,939 --> 00:13:19,549
the current<font color="#E5E5E5"> location the current offset</font>

231
00:13:16,319 --> 00:13:24,170
<font color="#E5E5E5">in the bytecode of that method that</font>

232
00:13:19,549 --> 00:13:24,170
wearing execution<font color="#CCCCCC"> is currently</font><font color="#E5E5E5"> act</font>

233
00:13:24,259 --> 00:13:30,209
<font color="#CCCCCC">there's also a method for forgetting</font>

234
00:13:28,379 --> 00:13:32,819
<font color="#CCCCCC">frame coat counts so</font><font color="#E5E5E5"> we don't don't</font>

235
00:13:30,209 --> 00:13:37,189
<font color="#E5E5E5">actually have to to guess the depth of</font>

236
00:13:32,819 --> 00:13:41,189
the of the stack we can can call this

237
00:13:37,189 --> 00:13:46,169
method<font color="#E5E5E5"> to get</font><font color="#CCCCCC"> the actual frame count</font><font color="#E5E5E5"> and</font>

238
00:13:41,189 --> 00:13:49,049
we can also use this<font color="#E5E5E5"> method</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> the</font>

239
00:13:46,169 --> 00:13:51,540
total frame count to convert the depth

240
00:13:49,049 --> 00:13:53,429
at which we inspected<font color="#E5E5E5"> a frame to a</font>

241
00:13:51,540 --> 00:13:55,608
height from the bottom<font color="#CCCCCC"> of the stack</font>

242
00:13:53,429 --> 00:13:59,488
<font color="#E5E5E5">where it's at</font>

243
00:13:55,609 --> 00:14:02,429
which which we is useful if we<font color="#E5E5E5"> want to</font>

244
00:13:59,489 --> 00:14:04,529
do if<font color="#E5E5E5"> we want to reflect the frame</font>

245
00:14:02,429 --> 00:14:09,600
create a<font color="#CCCCCC"> java representation</font><font color="#E5E5E5"> out of the</font>

246
00:14:04,529 --> 00:14:14,519
frame<font color="#CCCCCC"> as an object</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> have that</font><font color="#E5E5E5"> be sort</font>

247
00:14:09,600 --> 00:14:15,989
of live a live mirror to the to the to

248
00:14:14,519 --> 00:14:20,160
the actual underlying frame we<font color="#CCCCCC"> have to</font>

249
00:14:15,989 --> 00:14:22,199
have some<font color="#CCCCCC"> way of detaching it and in</font>

250
00:14:20,160 --> 00:14:25,559
<font color="#E5E5E5">order to do that we need to</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> need</font>

251
00:14:22,199 --> 00:14:26,849
a fixed number of the offset that<font color="#E5E5E5"> is</font>

252
00:14:25,559 --> 00:14:28,290
<font color="#E5E5E5">that because it's not always going to be</font>

253
00:14:26,850 --> 00:14:33,360
at the same depth but it's always<font color="#CCCCCC"> going</font>

254
00:14:28,290 --> 00:14:44,238
to be<font color="#E5E5E5"> at the same</font><font color="#CCCCCC"> height so once we have</font>

255
00:14:33,360 --> 00:14:49,739
this<font color="#E5E5E5"> this what's called this frame info</font>

256
00:14:44,239 --> 00:14:53,839
we can<font color="#CCCCCC"> then use you use the method ID</font><font color="#E5E5E5"> to</font>

257
00:14:49,739 --> 00:14:58,399
get the<font color="#E5E5E5"> variable table of that method</font>

258
00:14:53,839 --> 00:15:02,869
that gives us another little<font color="#E5E5E5"> array of</font>

259
00:14:58,399 --> 00:15:07,079
structs<font color="#E5E5E5"> that contain information</font><font color="#CCCCCC"> about</font>

260
00:15:02,869 --> 00:15:10,410
<font color="#E5E5E5">what the where in the method at which a</font>

261
00:15:07,079 --> 00:15:12,748
<font color="#CCCCCC">bytecode offsets the the</font><font color="#E5E5E5"> variable is</font>

262
00:15:10,410 --> 00:15:14,789
valid<font color="#E5E5E5"> with the name and signature of the</font>

263
00:15:12,749 --> 00:15:18,869
variable list<font color="#E5E5E5"> and also which slot</font><font color="#CCCCCC"> that's</font>

264
00:15:14,789 --> 00:15:20,720
<font color="#E5E5E5">stored in this return table pointer</font>

265
00:15:18,869 --> 00:15:22,790
<font color="#CCCCCC">needs to be the allocated</font><font color="#E5E5E5"> so</font>

266
00:15:20,720 --> 00:15:25,240
need to use the<font color="#CCCCCC"> deallocate api once</font>

267
00:15:22,790 --> 00:15:25,240
we're<font color="#E5E5E5"> done with it</font>

268
00:15:25,790 --> 00:15:32,389
<font color="#E5E5E5">so now that we've found our</font><font color="#CCCCCC"> stock frame</font>

269
00:15:30,769 --> 00:15:34,250
<font color="#CCCCCC">gotten</font><font color="#E5E5E5"> the information</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> it found</font>

270
00:15:32,389 --> 00:15:37,730
the method<font color="#E5E5E5"> that it's executing there</font>

271
00:15:34,250 --> 00:15:41,959
gotten the local variable<font color="#E5E5E5"> information</font>

272
00:15:37,730 --> 00:15:48,310
for that<font color="#CCCCCC"> method and found which slots</font>

273
00:15:41,959 --> 00:15:51,859
<font color="#E5E5E5">the</font><font color="#CCCCCC"> witch slot contains the particular</font>

274
00:15:48,310 --> 00:15:54,529
local<font color="#E5E5E5"> variable by name that we're</font>

275
00:15:51,860 --> 00:15:56,750
interested<font color="#CCCCCC"> in</font><font color="#E5E5E5"> we can call the get local</font>

276
00:15:54,529 --> 00:16:02,170
<font color="#E5E5E5">object or get local floats or get local</font>

277
00:15:56,750 --> 00:16:06,850
long method to get the<font color="#E5E5E5"> actual value</font>

278
00:16:02,170 --> 00:16:14,300
stored in stored in<font color="#E5E5E5"> that local variable</font>

279
00:16:06,850 --> 00:16:15,860
<font color="#E5E5E5">we can even set</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> local object</font><font color="#CCCCCC"> and as</font>

280
00:16:14,300 --> 00:16:21,099
I mentioned if we want<font color="#E5E5E5"> to reflect this</font>

281
00:16:15,860 --> 00:16:26,259
as a as a<font color="#E5E5E5"> Java object</font><font color="#CCCCCC"> that has a live</font>

282
00:16:21,100 --> 00:16:29,089
<font color="#E5E5E5">sort of live coupling to the to the</font>

283
00:16:26,259 --> 00:16:32,029
actual frame<font color="#E5E5E5"> we need to be able to</font>

284
00:16:29,089 --> 00:16:38,360
detach that<font color="#E5E5E5"> and we use</font><font color="#CCCCCC"> that we can use</font>

285
00:16:32,029 --> 00:16:40,550
the notify frame pop method<font color="#E5E5E5"> to to be</font>

286
00:16:38,360 --> 00:16:43,430
able<font color="#E5E5E5"> to do that detaching so we say we</font>

287
00:16:40,550 --> 00:16:47,420
call notify frame pop and say that<font color="#E5E5E5"> when</font>

288
00:16:43,430 --> 00:16:52,008
the frame that<font color="#E5E5E5"> is currently up this</font>

289
00:16:47,420 --> 00:16:56,990
given depth is popped from the stack<font color="#CCCCCC"> so</font>

290
00:16:52,009 --> 00:17:00,860
when the when<font color="#E5E5E5"> that method returns call</font>

291
00:16:56,990 --> 00:17:07,429
this<font color="#E5E5E5"> call my callback my frame pop</font>

292
00:17:00,860 --> 00:17:10,280
callback and the frame pop frame frame

293
00:17:07,429 --> 00:17:12,909
pop<font color="#E5E5E5"> callback is registered</font><font color="#CCCCCC"> there's one</font>

294
00:17:10,280 --> 00:17:18,530
global callback that<font color="#E5E5E5"> you register for</font>

295
00:17:12,909 --> 00:17:20,360
<font color="#E5E5E5">for your agent and when that frame is</font>

296
00:17:18,530 --> 00:17:23,000
called you get a callback<font color="#E5E5E5"> tells</font><font color="#CCCCCC"> you</font>

297
00:17:20,359 --> 00:17:28,270
which thread and which method<font color="#CCCCCC"> and if it</font>

298
00:17:23,000 --> 00:17:33,110
was popped by exception or<font color="#E5E5E5"> normal return</font>

299
00:17:28,270 --> 00:17:34,100
<font color="#E5E5E5">this allows</font><font color="#CCCCCC"> us to introspect</font><font color="#E5E5E5"> by calling</font>

300
00:17:33,110 --> 00:17:38,929
this from

301
00:17:34,100 --> 00:17:42,949
<font color="#E5E5E5">J and I we can inspect the frame of the</font>

302
00:17:38,930 --> 00:17:45,110
cold frames of regular of any<font color="#CCCCCC"> Java code</font>

303
00:17:42,950 --> 00:17:49,550
from from regular Java code<font color="#E5E5E5"> which is</font>

304
00:17:45,110 --> 00:17:52,909
pretty pretty<font color="#CCCCCC"> neat</font><font color="#E5E5E5"> another thing</font><font color="#CCCCCC"> that is</font>

305
00:17:49,550 --> 00:17:57,860
useful<font color="#CCCCCC"> the JVM CI</font><font color="#E5E5E5"> can provide is the</font>

306
00:17:52,910 --> 00:17:59,750
<font color="#CCCCCC">ability to walk the</font><font color="#E5E5E5"> heat</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> pretty</font>

307
00:17:57,860 --> 00:18:02,479
logical that this is a possibility<font color="#CCCCCC"> to do</font>

308
00:17:59,750 --> 00:18:03,830
<font color="#CCCCCC">because the JVM has to do with</font><font color="#E5E5E5"> this all</font>

309
00:18:02,480 --> 00:18:06,980
<font color="#E5E5E5">the time this is what garbage collection</font>

310
00:18:03,830 --> 00:18:09,860
does it walks the heat<font color="#E5E5E5"> and typically</font>

311
00:18:06,980 --> 00:18:17,600
marks objects for a collection<font color="#E5E5E5"> or for</font>

312
00:18:09,860 --> 00:18:20,240
moving<font color="#E5E5E5"> because they're gonna be kept and</font>

313
00:18:17,600 --> 00:18:22,820
even<font color="#E5E5E5"> this ability is exposed through the</font>

314
00:18:20,240 --> 00:18:26,090
JVM<font color="#CCCCCC"> ta interface the ability to</font><font color="#E5E5E5"> tag</font>

315
00:18:22,820 --> 00:18:29,750
objects so<font color="#E5E5E5"> we have an API that</font><font color="#CCCCCC"> allows us</font>

316
00:18:26,090 --> 00:18:31,820
<font color="#CCCCCC">to walk</font><font color="#E5E5E5"> the heap and</font><font color="#CCCCCC"> tag objects that we</font>

317
00:18:29,750 --> 00:18:33,740
think are interesting<font color="#E5E5E5"> in the heat so</font><font color="#CCCCCC"> we</font>

318
00:18:31,820 --> 00:18:36,770
can for<font color="#E5E5E5"> example follow references from a</font>

319
00:18:33,740 --> 00:18:40,910
particular object<font color="#CCCCCC"> and</font><font color="#E5E5E5"> follow all the</font>

320
00:18:36,770 --> 00:18:44,840
references<font color="#CCCCCC"> to other objects</font><font color="#E5E5E5"> that it</font>

321
00:18:40,910 --> 00:18:50,270
references<font color="#CCCCCC"> or we can linearly stand the</font>

322
00:18:44,840 --> 00:19:00,230
entire heap<font color="#E5E5E5"> both all objects and</font><font color="#CCCCCC"> scan</font>

323
00:18:50,270 --> 00:19:02,600
live objects<font color="#E5E5E5"> we can also iterate through</font>

324
00:19:00,230 --> 00:19:04,780
<font color="#E5E5E5">all there are also</font><font color="#CCCCCC"> API for iterating</font>

325
00:19:02,600 --> 00:19:09,169
through<font color="#E5E5E5"> all instances of a given class</font>

326
00:19:04,780 --> 00:19:13,100
so we can use that<font color="#E5E5E5"> for to create a Java</font>

327
00:19:09,170 --> 00:19:15,170
API that allows<font color="#CCCCCC"> us to get a given</font><font color="#E5E5E5"> a</font>

328
00:19:13,100 --> 00:19:17,000
<font color="#E5E5E5">class give all the give</font><font color="#CCCCCC"> me all the</font>

329
00:19:15,170 --> 00:19:21,460
reference and give me all<font color="#E5E5E5"> instances of</font>

330
00:19:17,000 --> 00:19:24,380
<font color="#E5E5E5">that</font><font color="#CCCCCC"> class we would use the iterate over</font>

331
00:19:21,460 --> 00:19:29,830
instances of a class method in JVM<font color="#CCCCCC"> sorry</font>

332
00:19:24,380 --> 00:19:33,170
<font color="#E5E5E5">for receiving</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> and tell it to</font>

333
00:19:29,830 --> 00:19:35,810
iterate over<font color="#E5E5E5"> all these all instances of</font>

334
00:19:33,170 --> 00:19:37,490
<font color="#E5E5E5">this particular class</font><font color="#CCCCCC"> and call this</font>

335
00:19:35,810 --> 00:19:40,310
callback<font color="#CCCCCC"> what we'll do in</font><font color="#E5E5E5"> this callback</font>

336
00:19:37,490 --> 00:19:42,460
<font color="#E5E5E5">is simply just tag all the objects</font><font color="#CCCCCC"> that</font>

337
00:19:40,310 --> 00:19:42,460
we see

338
00:19:42,500 --> 00:19:46,550
<font color="#CCCCCC">one implementation like that a</font>

339
00:19:43,730 --> 00:19:51,680
<font color="#E5E5E5">scientific point you to the tide</font><font color="#CCCCCC"> that</font>

340
00:19:46,550 --> 00:19:57,169
was specified<font color="#CCCCCC"> then we use</font><font color="#E5E5E5"> the get</font>

341
00:19:51,680 --> 00:19:59,570
objects with tags<font color="#E5E5E5"> method to get to get</font>

342
00:19:57,170 --> 00:20:02,180
an array or<font color="#E5E5E5"> containing all the obvious</font>

343
00:19:59,570 --> 00:20:06,649
that were tagged<font color="#E5E5E5"> which we can</font><font color="#CCCCCC"> then turn</font>

344
00:20:02,180 --> 00:20:13,810
<font color="#CCCCCC">into a Java array and return to to our</font>

345
00:20:06,650 --> 00:20:19,610
<font color="#CCCCCC">java code we can do even</font><font color="#E5E5E5"> more powerful</font>

346
00:20:13,810 --> 00:20:23,690
<font color="#E5E5E5">things that</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> similar to what the get</font>

347
00:20:19,610 --> 00:20:27,320
object size<font color="#E5E5E5"> did in in the</font>

348
00:20:23,690 --> 00:20:30,440
instrumentation<font color="#E5E5E5"> API by getting the</font>

349
00:20:27,320 --> 00:20:33,830
<font color="#CCCCCC">retain size of an object so the size of</font>

350
00:20:30,440 --> 00:20:36,680
<font color="#E5E5E5">an</font><font color="#CCCCCC"> object and all of the objects that it</font>

351
00:20:33,830 --> 00:20:39,679
references<font color="#E5E5E5"> by iterating through using</font>

352
00:20:36,680 --> 00:20:43,490
the iterator probably reachable from

353
00:20:39,680 --> 00:20:47,000
object method which does<font color="#E5E5E5"> what it says on</font>

354
00:20:43,490 --> 00:20:49,430
<font color="#CCCCCC">it same iterates over all obvious reason</font>

355
00:20:47,000 --> 00:20:51,470
both from<font color="#E5E5E5"> so give an object it doesn't</font>

356
00:20:49,430 --> 00:20:54,800
and gives you a<font color="#CCCCCC"> callback</font><font color="#E5E5E5"> for for each of</font>

357
00:20:51,470 --> 00:20:56,240
them<font color="#E5E5E5"> it</font><font color="#CCCCCC"> doesn't give you a callback for</font>

358
00:20:54,800 --> 00:21:00,290
the<font color="#E5E5E5"> object that you start from so we</font>

359
00:20:56,240 --> 00:21:03,740
also have to<font color="#CCCCCC"> use</font><font color="#E5E5E5"> get object size on on</font>

360
00:21:00,290 --> 00:21:10,600
that object<font color="#E5E5E5"> which is also available as a</font>

361
00:21:03,740 --> 00:21:15,140
JVM<font color="#CCCCCC"> guided in the</font><font color="#E5E5E5"> callback</font><font color="#CCCCCC"> function we</font>

362
00:21:10,600 --> 00:21:17,629
we get<font color="#E5E5E5"> the slice</font><font color="#CCCCCC"> handed to us so we</font>

363
00:21:15,140 --> 00:21:21,740
<font color="#CCCCCC">actually don't</font><font color="#E5E5E5"> have need</font><font color="#CCCCCC"> to invoke it</font>

364
00:21:17,630 --> 00:21:24,530
<font color="#CCCCCC">object size</font><font color="#E5E5E5"> for for</font><font color="#CCCCCC"> each visited</font><font color="#E5E5E5"> object</font>

365
00:21:21,740 --> 00:21:27,410
<font color="#E5E5E5">but instead what we do is</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> take that</font>

366
00:21:24,530 --> 00:21:33,940
<font color="#CCCCCC">slice</font><font color="#E5E5E5"> and sum</font><font color="#CCCCCC"> it up into</font><font color="#E5E5E5"> the user data</font>

367
00:21:27,410 --> 00:21:37,300
field<font color="#E5E5E5"> or do</font><font color="#CCCCCC"> use of a</font><font color="#E5E5E5"> data pointer and</font>

368
00:21:33,940 --> 00:21:40,190
that was it that<font color="#CCCCCC"> was a short overview of</font>

369
00:21:37,300 --> 00:21:43,210
<font color="#E5E5E5">things that I wanted to share that you</font>

370
00:21:40,190 --> 00:21:47,390
<font color="#CCCCCC">can do with hidden API</font>

371
00:21:43,210 --> 00:21:50,060
not very frequently used<font color="#CCCCCC"> and</font><font color="#E5E5E5"> uh but</font><font color="#CCCCCC"> but</font>

372
00:21:47,390 --> 00:21:52,390
are available<font color="#CCCCCC"> and in pretty</font><font color="#E5E5E5"> much any</font>

373
00:21:50,060 --> 00:21:52,389
<font color="#E5E5E5">game</font>

374
00:21:52,980 --> 00:22:03,359
[Applause]

