1
00:00:05,230 --> 00:00:10,910
<font color="#E5E5E5">all right</font><font color="#CCCCCC"> so this is just to</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure</font>

2
00:00:08,510 --> 00:00:12,710
you guys<font color="#E5E5E5"> are</font><font color="#CCCCCC"> in the right</font><font color="#E5E5E5"> room if you</font>

3
00:00:10,910 --> 00:00:15,290
don't know by<font color="#CCCCCC"> now</font><font color="#E5E5E5"> Alliance for open</font>

4
00:00:12,710 --> 00:00:17,509
media<font color="#E5E5E5"> is making</font><font color="#CCCCCC"> a codec called</font><font color="#E5E5E5"> a v1 it's</font>

5
00:00:15,290 --> 00:00:19,730
a joint effort<font color="#CCCCCC"> by a</font><font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> companies to</font>

6
00:00:17,509 --> 00:00:21,320
make something royalty-free<font color="#CCCCCC"> and I</font>

7
00:00:19,730 --> 00:00:22,609
realized<font color="#E5E5E5"> that we're in Europe and you</font>

8
00:00:21,320 --> 00:00:26,060
guys believe you<font color="#E5E5E5"> don't have software</font>

9
00:00:22,609 --> 00:00:28,550
patents<font color="#CCCCCC"> but in fact</font><font color="#E5E5E5"> a bunch of European</font>

10
00:00:26,060 --> 00:00:30,348
<font color="#E5E5E5">countries like</font><font color="#CCCCCC"> Nokia and Phillips and</font>

11
00:00:28,550 --> 00:00:32,870
<font color="#E5E5E5">Fraunhofer all file lots of software</font>

12
00:00:30,349 --> 00:00:36,159
<font color="#E5E5E5">patents and are very prolific at it so</font>

13
00:00:32,870 --> 00:00:39,140
sorry<font color="#CCCCCC"> you guys do have software</font><font color="#E5E5E5"> patents</font>

14
00:00:36,159 --> 00:00:42,110
<font color="#CCCCCC">what I'm not going to try to do is is</font>

15
00:00:39,140 --> 00:00:42,620
give a complete overview of what is in a

16
00:00:42,110 --> 00:00:44,809
v1

17
00:00:42,620 --> 00:00:47,299
I gave<font color="#CCCCCC"> one of</font><font color="#E5E5E5"> those at video</font><font color="#CCCCCC"> lynnandhev</font>

18
00:00:44,809 --> 00:00:50,830
<font color="#E5E5E5">days if you weren't there sorry</font>

19
00:00:47,299 --> 00:00:53,720
<font color="#CCCCCC">you can watch the the talk on the web</font>

20
00:00:50,830 --> 00:00:55,400
<font color="#CCCCCC">but</font><font color="#E5E5E5"> you can't</font><font color="#CCCCCC"> possibly do that in 25</font>

21
00:00:53,720 --> 00:00:57,409
<font color="#E5E5E5">minutes</font><font color="#CCCCCC"> I tried to do it</font><font color="#E5E5E5"> in an hour in</font>

22
00:00:55,400 --> 00:00:59,479
there and it was still quite rushed<font color="#E5E5E5"> so</font>

23
00:00:57,409 --> 00:01:03,290
I'm<font color="#E5E5E5"> mostly going to talk about is what</font>

24
00:00:59,479 --> 00:01:04,849
has<font color="#E5E5E5"> happened since</font><font color="#CCCCCC"> that last talk the</font>

25
00:01:03,290 --> 00:01:07,460
first thing is we had a couple of new

26
00:01:04,849 --> 00:01:12,080
members<font color="#CCCCCC"> but</font><font color="#E5E5E5"> not anybody and really</font>

27
00:01:07,460 --> 00:01:13,460
important for<font color="#CCCCCC"> anything</font><font color="#E5E5E5"> like that but the</font>

28
00:01:12,080 --> 00:01:15,560
most important question I'm<font color="#CCCCCC"> sure you're</font>

29
00:01:13,460 --> 00:01:17,720
all asking<font color="#E5E5E5"> is is are we done</font><font color="#CCCCCC"> yet</font>

30
00:01:15,560 --> 00:01:20,210
and when we had our<font color="#E5E5E5"> last</font><font color="#CCCCCC"> board meeting</font>

31
00:01:17,720 --> 00:01:21,860
<font color="#E5E5E5">in December we said okay the date to</font>

32
00:01:20,210 --> 00:01:23,899
finalize the specification is going to

33
00:01:21,860 --> 00:01:25,580
be<font color="#CCCCCC"> February</font><font color="#E5E5E5"> 2nd</font><font color="#CCCCCC"> and that means there's</font>

34
00:01:23,900 --> 00:01:27,110
no problem<font color="#CCCCCC"> for me flying here to Europe</font>

35
00:01:25,580 --> 00:01:28,610
<font color="#E5E5E5">to give a talk on the 3rd especially</font>

36
00:01:27,110 --> 00:01:28,940
since I had to get on a plane<font color="#CCCCCC"> two days</font>

37
00:01:28,610 --> 00:01:32,980
<font color="#CCCCCC">ago</font>

38
00:01:28,940 --> 00:01:37,070
and<font color="#CCCCCC"> and announce</font><font color="#E5E5E5"> that we're in fact done</font>

39
00:01:32,980 --> 00:01:40,640
<font color="#E5E5E5">no no we're</font><font color="#CCCCCC"> not done but getting really</font>

40
00:01:37,070 --> 00:01:43,610
close<font color="#CCCCCC"> so what's</font><font color="#E5E5E5"> left</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> basically</font>

41
00:01:40,640 --> 00:01:45,460
<font color="#CCCCCC">three main issues</font><font color="#E5E5E5"> we have to fix some</font>

42
00:01:43,610 --> 00:01:47,659
<font color="#CCCCCC">remaining problems with the transforms</font>

43
00:01:45,460 --> 00:01:49,940
<font color="#E5E5E5">there's some final details of the</font>

44
00:01:47,659 --> 00:01:51,200
<font color="#CCCCCC">high-level syntax to sort out and some</font>

45
00:01:49,940 --> 00:01:52,640
last-minute<font color="#CCCCCC"> changes to a motion vector</font>

46
00:01:51,200 --> 00:01:55,940
prediction that the hardware companies

47
00:01:52,640 --> 00:01:59,780
wanted and though also fixing all<font color="#CCCCCC"> of the</font>

48
00:01:55,940 --> 00:02:04,370
bugs<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then finally completing our IPR</font>

49
00:01:59,780 --> 00:02:05,900
analysis<font color="#E5E5E5"> so the the IPR analysis we're</font>

50
00:02:04,370 --> 00:02:08,269
actually<font color="#E5E5E5"> making pretty good progress on</font>

51
00:02:05,900 --> 00:02:11,390
<font color="#E5E5E5">and that don't anticipate being too much</font>

52
00:02:08,269 --> 00:02:13,310
<font color="#E5E5E5">of</font><font color="#CCCCCC"> a blocker the bugs aren't that bad</font>

53
00:02:11,390 --> 00:02:15,380
either<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that's the full list of</font>

54
00:02:13,310 --> 00:02:18,650
bitstream normative bugs

55
00:02:15,380 --> 00:02:19,970
it's not it<font color="#E5E5E5"> fits on a slide none of them</font>

56
00:02:18,650 --> 00:02:23,080
<font color="#CCCCCC">are even</font><font color="#E5E5E5"> assigned to me which</font><font color="#CCCCCC"> is why I</font>

57
00:02:19,970 --> 00:02:23,080
can come here<font color="#CCCCCC"> and give you</font><font color="#E5E5E5"> this talk</font>

58
00:02:23,170 --> 00:02:28,549
<font color="#CCCCCC">that's probably not all of the bugs that</font>

59
00:02:25,490 --> 00:02:30,050
<font color="#E5E5E5">we have um it's well it's definitely not</font>

60
00:02:28,550 --> 00:02:33,520
<font color="#E5E5E5">all of the bugs we have but some of them</font>

61
00:02:30,050 --> 00:02:35,960
are<font color="#E5E5E5"> not blocking the bitstream</font><font color="#CCCCCC"> freeze</font>

62
00:02:33,520 --> 00:02:37,760
<font color="#CCCCCC">but this is you know something</font><font color="#E5E5E5"> we hope</font>

63
00:02:35,960 --> 00:02:38,210
to<font color="#CCCCCC"> get sorted out in the next couple of</font>

64
00:02:37,760 --> 00:02:42,620
weeks

65
00:02:38,210 --> 00:02:44,690
as opposed to many more<font color="#E5E5E5"> months</font><font color="#CCCCCC"> the</font>

66
00:02:42,620 --> 00:02:49,790
specification<font color="#CCCCCC"> I will put that URL up</font>

67
00:02:44,690 --> 00:02:51,800
again yet if<font color="#E5E5E5"> you remember this from from</font>

68
00:02:49,790 --> 00:02:53,660
my talk of<font color="#E5E5E5"> villain</font><font color="#CCCCCC"> dev days</font>

69
00:02:51,800 --> 00:02:57,260
it's got a lot more<font color="#E5E5E5"> stuff in it now</font>

70
00:02:53,660 --> 00:02:58,760
<font color="#E5E5E5">please read it give</font><font color="#CCCCCC"> us feedback you</font><font color="#E5E5E5"> you</font>

71
00:02:57,260 --> 00:03:03,799
will be pleasantly<font color="#E5E5E5"> surprised how much is</font>

72
00:02:58,760 --> 00:03:05,090
there so what<font color="#E5E5E5"> it actually changed these</font>

73
00:03:03,800 --> 00:03:09,710
are all the very<font color="#E5E5E5"> technical details</font>

74
00:03:05,090 --> 00:03:11,060
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> too technical I'm sorry okay</font>

75
00:03:09,710 --> 00:03:14,930
that's<font color="#E5E5E5"> that's what I want to hear she</font>

76
00:03:11,060 --> 00:03:18,560
says there's no such<font color="#E5E5E5"> thing all right so</font>

77
00:03:14,930 --> 00:03:20,120
let's dive in the entropy<font color="#E5E5E5"> coding so last</font>

78
00:03:18,560 --> 00:03:21,740
time<font color="#E5E5E5"> I talked</font><font color="#CCCCCC"> about we had smaller</font>

79
00:03:20,120 --> 00:03:24,860
multiplies than we had previously now

80
00:03:21,740 --> 00:03:26,900
they're<font color="#E5E5E5"> even</font><font color="#CCCCCC"> smaller so</font><font color="#E5E5E5"> this is again a</font>

81
00:03:24,860 --> 00:03:29,180
<font color="#E5E5E5">thing that that speeds up hardware and</font>

82
00:03:26,900 --> 00:03:32,870
saves area so we replaced our 8 by 15

83
00:03:29,180 --> 00:03:35,060
bit multiplies to 8 by 9 bit multiplies

84
00:03:32,870 --> 00:03:37,840
<font color="#E5E5E5">and how we do that</font><font color="#CCCCCC"> is we just shift the</font>

85
00:03:35,060 --> 00:03:40,520
things<font color="#E5E5E5"> down by 6 bits before we multiply</font>

86
00:03:37,840 --> 00:03:42,920
<font color="#CCCCCC">the problem when you do that is that</font>

87
00:03:40,520 --> 00:03:44,930
your cumulative<font color="#E5E5E5"> distribution functions</font>

88
00:03:42,920 --> 00:03:47,570
that are 15 bits<font color="#E5E5E5"> and we're shifting them</font>

89
00:03:44,930 --> 00:03:49,130
down by 6 and so some of the<font color="#E5E5E5"> adjacent</font>

90
00:03:47,570 --> 00:03:50,600
values<font color="#E5E5E5"> can collapse to the</font><font color="#CCCCCC"> same value</font>

91
00:03:49,130 --> 00:03:51,799
<font color="#E5E5E5">which means the probability</font><font color="#CCCCCC"> goes to</font><font color="#E5E5E5"> 0</font>

92
00:03:50,600 --> 00:03:54,730
and<font color="#E5E5E5"> that's bad</font><font color="#CCCCCC"> because it's really hard</font>

93
00:03:51,800 --> 00:03:57,890
to code something<font color="#E5E5E5"> with</font><font color="#CCCCCC"> zero probability</font>

94
00:03:54,730 --> 00:03:59,660
so what we do is essentially inside the

95
00:03:57,890 --> 00:04:02,600
entropy coder itself<font color="#CCCCCC"> we reserve a little</font>

96
00:03:59,660 --> 00:04:05,900
<font color="#CCCCCC">bit of space for every</font><font color="#E5E5E5"> symbol so then of</font>

97
00:04:02,600 --> 00:04:07,940
the probabilities actually go to<font color="#CCCCCC"> 0 this</font>

98
00:04:05,900 --> 00:04:09,860
<font color="#E5E5E5">is about as complex to do as as our</font>

99
00:04:07,940 --> 00:04:11,359
<font color="#E5E5E5">previous</font><font color="#CCCCCC"> method</font><font color="#E5E5E5"> of updating the CD f's</font>

100
00:04:09,860 --> 00:04:14,000
and making sure none of the<font color="#E5E5E5"> 15 bit</font>

101
00:04:11,360 --> 00:04:15,440
<font color="#E5E5E5">probably went to</font><font color="#CCCCCC"> 0 but as a bonus it</font>

102
00:04:14,000 --> 00:04:17,029
means we now actually<font color="#E5E5E5"> don't care if any</font>

103
00:04:15,440 --> 00:04:18,858
of those<font color="#E5E5E5"> 15 bit probabilities go to 0</font>

104
00:04:17,029 --> 00:04:20,750
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we'll just</font><font color="#E5E5E5"> add this little bit</font>

105
00:04:18,858 --> 00:04:22,729
of<font color="#E5E5E5"> extra</font><font color="#CCCCCC"> space so we have we can stop</font>

106
00:04:20,750 --> 00:04:27,680
<font color="#E5E5E5">doing the work there and do inside the</font>

107
00:04:22,730 --> 00:04:29,180
entropy coding engine itself<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that</font>

108
00:04:27,680 --> 00:04:32,870
speeds up hardware and

109
00:04:29,180 --> 00:04:35,630
<font color="#CCCCCC">cost</font><font color="#E5E5E5"> us basically nothing</font><font color="#CCCCCC"> we still keep</font>

110
00:04:32,870 --> 00:04:37,729
<font color="#E5E5E5">the probabilities in</font><font color="#CCCCCC"> 15 bits because</font>

111
00:04:35,630 --> 00:04:39,409
<font color="#E5E5E5">when we do adaptation they change</font>

112
00:04:37,729 --> 00:04:41,719
<font color="#E5E5E5">relatively slowly so</font><font color="#CCCCCC"> we want that extra</font>

113
00:04:39,410 --> 00:04:45,320
precision<font color="#CCCCCC"> it turns out if we</font><font color="#E5E5E5"> just make</font>

114
00:04:41,720 --> 00:04:47,360
the<font color="#CCCCCC"> CDF's</font><font color="#E5E5E5"> smaller directly then we lose</font>

115
00:04:45,320 --> 00:04:49,130
a bunch of coding performance<font color="#E5E5E5"> but just</font>

116
00:04:47,360 --> 00:04:53,720
shifting them down just in time<font color="#CCCCCC"> we</font><font color="#E5E5E5"> don't</font>

117
00:04:49,130 --> 00:04:56,719
lose<font color="#E5E5E5"> that that compression game</font><font color="#CCCCCC"> we also</font>

118
00:04:53,720 --> 00:04:59,449
simplified our backwards adaptation so

119
00:04:56,720 --> 00:05:00,740
the way this works is<font color="#CCCCCC"> at the end</font><font color="#E5E5E5"> of one</font>

120
00:04:59,449 --> 00:05:03,349
frame you save off all the probabilities

121
00:05:00,740 --> 00:05:04,820
<font color="#CCCCCC">to use for the next</font><font color="#E5E5E5"> frame but if you</font>

122
00:05:03,349 --> 00:05:06,440
have a<font color="#CCCCCC"> video with multiple tiles you</font>

123
00:05:04,820 --> 00:05:08,810
want the tiles to be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to be decoded</font>

124
00:05:06,440 --> 00:05:10,099
independently then what we used<font color="#E5E5E5"> to do is</font>

125
00:05:08,810 --> 00:05:13,160
we would average all the probabilities

126
00:05:10,099 --> 00:05:14,750
<font color="#CCCCCC">from</font><font color="#E5E5E5"> all the tiles together</font><font color="#CCCCCC"> the problem</font>

127
00:05:13,160 --> 00:05:16,610
is when you have<font color="#E5E5E5"> many many tiles you</font>

128
00:05:14,750 --> 00:05:18,289
have to<font color="#E5E5E5"> buffer all these things and add</font>

129
00:05:16,610 --> 00:05:20,750
them all up<font color="#E5E5E5"> and</font><font color="#CCCCCC"> hardware said that was</font>

130
00:05:18,289 --> 00:05:23,270
too complicated<font color="#CCCCCC"> so now we just pick the</font>

131
00:05:20,750 --> 00:05:24,949
tile with the<font color="#CCCCCC"> most bytes in it most</font>

132
00:05:23,270 --> 00:05:27,530
compressed bytes in it and just use

133
00:05:24,949 --> 00:05:31,389
those<font color="#E5E5E5"> CDF's and surprisingly this works</font>

134
00:05:27,530 --> 00:05:32,750
basically<font color="#E5E5E5"> as well</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's a lot simpler</font>

135
00:05:31,389 --> 00:05:35,810
<font color="#E5E5E5">all right</font>

136
00:05:32,750 --> 00:05:37,909
transforms<font color="#CCCCCC"> so we added transforms with a</font>

137
00:05:35,810 --> 00:05:40,370
<font color="#CCCCCC">4 to 1</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> 1 to 4</font><font color="#E5E5E5"> ratio of</font><font color="#CCCCCC"> with the</font>

138
00:05:37,909 --> 00:05:42,550
<font color="#CCCCCC">height so now we have four by</font><font color="#E5E5E5"> 16 and 16</font>

139
00:05:40,370 --> 00:05:44,720
by four and eight by<font color="#E5E5E5"> 32</font><font color="#CCCCCC"> and 32 by eight</font>

140
00:05:42,550 --> 00:05:46,760
that's<font color="#E5E5E5"> good because we already had</font>

141
00:05:44,720 --> 00:05:48,050
prediction block sizes<font color="#E5E5E5"> of these sizes we</font>

142
00:05:46,760 --> 00:05:51,020
just didn't have transforms to cover it

143
00:05:48,050 --> 00:05:54,139
but now we do so we can code those with

144
00:05:51,020 --> 00:05:56,120
a single transform we also added<font color="#CCCCCC"> 64</font>

145
00:05:54,139 --> 00:05:59,900
<font color="#E5E5E5">point transforms so we can go all</font><font color="#CCCCCC"> the</font>

146
00:05:56,120 --> 00:06:02,270
way<font color="#E5E5E5"> up to 64 by 64</font><font color="#CCCCCC"> the one caveat</font><font color="#E5E5E5"> of</font>

147
00:05:59,900 --> 00:06:05,859
that is that<font color="#E5E5E5"> everything outside of</font><font color="#CCCCCC"> the</font>

148
00:06:02,270 --> 00:06:08,960
<font color="#E5E5E5">upper left 32 by 32 block is forced</font><font color="#CCCCCC"> to 0</font>

149
00:06:05,860 --> 00:06:12,080
<font color="#CCCCCC">so generally you only</font><font color="#E5E5E5"> use 64 point</font>

150
00:06:08,960 --> 00:06:14,599
transforms on blocks<font color="#E5E5E5"> that</font><font color="#CCCCCC"> have you</font><font color="#E5E5E5"> know</font>

151
00:06:12,080 --> 00:06:15,979
very consistent<font color="#E5E5E5"> texture and you don't</font>

152
00:06:14,599 --> 00:06:18,500
really<font color="#E5E5E5"> have a lot of energy in those</font>

153
00:06:15,979 --> 00:06:19,969
very<font color="#CCCCCC"> high frequency coefficients but</font>

154
00:06:18,500 --> 00:06:21,199
mostly what this means is that the

155
00:06:19,970 --> 00:06:23,479
<font color="#E5E5E5">hardware companies don't</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to make</font>

156
00:06:21,199 --> 00:06:24,949
much bigger buffers and we don't have<font color="#E5E5E5"> to</font>

157
00:06:23,479 --> 00:06:28,460
have<font color="#E5E5E5"> all these new coefficients</font><font color="#CCCCCC"> scanning</font>

158
00:06:24,949 --> 00:06:31,430
patterns and all these these things<font color="#E5E5E5"> so</font>

159
00:06:28,460 --> 00:06:33,500
<font color="#E5E5E5">that that's why that was done so we had</font>

160
00:06:31,430 --> 00:06:35,840
these<font color="#E5E5E5"> great transforms from from</font><font color="#CCCCCC"> da log</font>

161
00:06:33,500 --> 00:06:39,580
that called<font color="#CCCCCC"> da la</font><font color="#E5E5E5"> TX they weren't</font>

162
00:06:35,840 --> 00:06:42,510
adopted<font color="#CCCCCC"> sorry</font><font color="#E5E5E5"> we tried really hard but</font>

163
00:06:39,580 --> 00:06:44,669
<font color="#CCCCCC">we have been fixing a bunch</font>

164
00:06:42,510 --> 00:06:46,980
problems<font color="#E5E5E5"> and the other set of transforms</font>

165
00:06:44,670 --> 00:06:48,330
<font color="#CCCCCC">that was being</font><font color="#E5E5E5"> proposed so now things</font>

166
00:06:46,980 --> 00:06:50,160
like<font color="#E5E5E5"> the order of the row and</font><font color="#CCCCCC"> column</font>

167
00:06:48,330 --> 00:06:51,750
transforms is actually consistent<font color="#E5E5E5"> for</font>

168
00:06:50,160 --> 00:06:55,230
all<font color="#E5E5E5"> the rectangular sizes which was it</font>

169
00:06:51,750 --> 00:06:58,320
true<font color="#CCCCCC"> before we put</font><font color="#E5E5E5"> VP</font><font color="#CCCCCC"> nines for</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> a</font>

170
00:06:55,230 --> 00:06:59,370
<font color="#E5E5E5">DST back because it has lower latency</font>

171
00:06:58,320 --> 00:07:02,040
<font color="#E5E5E5">and hardware than what was being</font>

172
00:06:59,370 --> 00:07:04,050
proposed<font color="#CCCCCC"> but now we found</font><font color="#E5E5E5"> out that it</font>

173
00:07:02,040 --> 00:07:08,220
has<font color="#E5E5E5"> 64-bit overflow so somebody's fixing</font>

174
00:07:04,050 --> 00:07:10,110
<font color="#CCCCCC">that the the type for discrete sine</font>

175
00:07:08,220 --> 00:07:13,350
transforms are now consistent between

176
00:07:10,110 --> 00:07:16,050
<font color="#E5E5E5">the DCT in the a DST so turns out that</font>

177
00:07:13,350 --> 00:07:18,810
the DCT has a type<font color="#E5E5E5"> 4 DST embedded inside</font>

178
00:07:16,050 --> 00:07:21,120
<font color="#E5E5E5">of</font><font color="#CCCCCC"> it but that</font><font color="#E5E5E5"> embedded transform didn't</font>

179
00:07:18,810 --> 00:07:24,450
match the DST that we're using to

180
00:07:21,120 --> 00:07:26,460
implement<font color="#E5E5E5"> an actual DST</font><font color="#CCCCCC"> and so now we've</font>

181
00:07:24,450 --> 00:07:28,229
sorted that<font color="#E5E5E5"> out so they're consistent so</font>

182
00:07:26,460 --> 00:07:32,430
so you can<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> if we use your</font>

183
00:07:28,230 --> 00:07:34,130
implementations<font color="#E5E5E5"> for both the extra</font>

184
00:07:32,430 --> 00:07:36,420
scaling<font color="#E5E5E5"> for rectangular transforms</font>

185
00:07:34,130 --> 00:07:37,740
<font color="#E5E5E5">basically that there's an extra</font><font color="#CCCCCC"> factor</font>

186
00:07:36,420 --> 00:07:39,420
of<font color="#E5E5E5"> square root</font><font color="#CCCCCC"> of 2 in there that's</font>

187
00:07:37,740 --> 00:07:41,370
required for<font color="#E5E5E5"> the the implementation here</font>

188
00:07:39,420 --> 00:07:44,010
<font color="#E5E5E5">is now done in the same place for all of</font>

189
00:07:41,370 --> 00:07:45,990
them<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that helps and there have been</font>

190
00:07:44,010 --> 00:07:48,990
<font color="#E5E5E5">lots of changes</font><font color="#CCCCCC"> to how the scaling and</font>

191
00:07:45,990 --> 00:07:51,240
<font color="#E5E5E5">dynamic range and</font><font color="#CCCCCC"> all that stuff</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> so</font>

192
00:07:48,990 --> 00:07:53,190
the main thing that<font color="#E5E5E5"> has to be resolved</font>

193
00:07:51,240 --> 00:07:54,960
<font color="#E5E5E5">right now is that the overflow handling</font>

194
00:07:53,190 --> 00:07:57,510
is unclear

195
00:07:54,960 --> 00:07:59,400
so if basically if you inject

196
00:07:57,510 --> 00:08:00,570
quantization noise<font color="#E5E5E5"> arbitrary</font>

197
00:07:59,400 --> 00:08:03,000
quantization noise into your

198
00:08:00,570 --> 00:08:04,440
coefficients then you can cause<font color="#CCCCCC"> all</font>

199
00:08:03,000 --> 00:08:06,480
sorts of arithmetic<font color="#E5E5E5"> operations</font><font color="#CCCCCC"> to</font>

200
00:08:04,440 --> 00:08:07,650
overflow<font color="#E5E5E5"> and it's unclear how you're</font>

201
00:08:06,480 --> 00:08:09,210
supposed to handle<font color="#CCCCCC"> that</font><font color="#E5E5E5"> because the</font><font color="#CCCCCC"> C</font>

202
00:08:07,650 --> 00:08:10,560
code does one thing and the<font color="#CCCCCC"> Sindhi code</font>

203
00:08:09,210 --> 00:08:12,450
does another<font color="#CCCCCC"> thing and the spec says</font>

204
00:08:10,560 --> 00:08:15,930
something else<font color="#CCCCCC"> and so all that</font><font color="#E5E5E5"> needs</font><font color="#CCCCCC"> to</font>

205
00:08:12,450 --> 00:08:17,880
<font color="#CCCCCC">be made consistent</font><font color="#E5E5E5"> all right that was</font>

206
00:08:15,930 --> 00:08:19,560
transforms<font color="#E5E5E5"> coefficient coding we</font>

207
00:08:17,880 --> 00:08:21,800
completely<font color="#E5E5E5"> threw away the old stuff and</font>

208
00:08:19,560 --> 00:08:24,110
replaced it with something else

209
00:08:21,800 --> 00:08:27,060
<font color="#CCCCCC">so it's</font><font color="#E5E5E5"> this new</font><font color="#CCCCCC"> thing called LV map</font>

210
00:08:24,110 --> 00:08:28,350
basically<font color="#CCCCCC"> what it does is</font><font color="#E5E5E5"> upfront you</font>

211
00:08:27,060 --> 00:08:30,480
code the position of the<font color="#E5E5E5"> last</font><font color="#CCCCCC"> non-zero</font>

212
00:08:28,350 --> 00:08:32,909
<font color="#E5E5E5">coefficient and then you scan the</font>

213
00:08:30,480 --> 00:08:35,340
coefficients in multiple passes<font color="#CCCCCC"> so the</font>

214
00:08:32,909 --> 00:08:37,469
first one sort of says you<font color="#CCCCCC"> know are</font><font color="#E5E5E5"> you</font>

215
00:08:35,340 --> 00:08:40,680
a zero a plus<font color="#E5E5E5"> or minus 1</font><font color="#CCCCCC"> plus or minus</font><font color="#E5E5E5"> 2</font>

216
00:08:37,470 --> 00:08:43,349
<font color="#E5E5E5">or something bigger than 2 and that's</font>

217
00:08:40,679 --> 00:08:44,790
<font color="#E5E5E5">coded with</font><font color="#CCCCCC"> 1 for value symbol and then</font>

218
00:08:43,349 --> 00:08:46,830
you code all the<font color="#CCCCCC"> signs of all the</font>

219
00:08:44,790 --> 00:08:48,750
<font color="#CCCCCC">nonzero</font><font color="#E5E5E5"> values in a separate pass and</font>

220
00:08:46,830 --> 00:08:50,010
then in<font color="#E5E5E5"> your third pass you go back and</font>

221
00:08:48,750 --> 00:08:53,060
<font color="#E5E5E5">find all the</font><font color="#CCCCCC"> things that we're bigger</font>

222
00:08:50,010 --> 00:08:55,560
than<font color="#E5E5E5"> 2 and code all those large values</font>

223
00:08:53,060 --> 00:08:55,920
and say<font color="#CCCCCC"> exactly which value</font><font color="#E5E5E5"> bigger than</font>

224
00:08:55,560 --> 00:08:58,290
2 and

225
00:08:55,920 --> 00:08:59,550
all these use context<font color="#E5E5E5"> based on all the</font>

226
00:08:58,290 --> 00:09:04,079
stuff<font color="#CCCCCC"> that you had already previously</font>

227
00:08:59,550 --> 00:09:06,810
<font color="#E5E5E5">decoded in the previous passes</font><font color="#CCCCCC"> so the</font>

228
00:09:04,079 --> 00:09:08,339
advantage of this<font color="#E5E5E5"> mainly</font><font color="#CCCCCC"> is that you can</font>

229
00:09:06,810 --> 00:09:10,349
get away with a much<font color="#CCCCCC"> smaller number of</font>

230
00:09:08,339 --> 00:09:12,389
<font color="#CCCCCC">context than we had</font><font color="#E5E5E5"> in vp9 so if you</font>

231
00:09:10,350 --> 00:09:14,810
remember vp9<font color="#E5E5E5"> s Co efficient coding it</font>

232
00:09:12,389 --> 00:09:16,889
has some giant<font color="#CCCCCC"> 5 dimensional array of</font>

233
00:09:14,810 --> 00:09:19,410
contexts and<font color="#E5E5E5"> we have a much</font><font color="#CCCCCC"> smaller set</font>

234
00:09:16,889 --> 00:09:22,620
<font color="#E5E5E5">for this I think it is roughly a quarter</font>

235
00:09:19,410 --> 00:09:26,519
<font color="#E5E5E5">of the size</font><font color="#CCCCCC"> so that's a thing that</font><font color="#E5E5E5"> makes</font>

236
00:09:22,620 --> 00:09:27,959
hardware companies happy<font color="#CCCCCC"> we've added a</font>

237
00:09:26,519 --> 00:09:31,139
<font color="#E5E5E5">new interpretation mode called</font><font color="#CCCCCC"> inter</font>

238
00:09:27,959 --> 00:09:34,979
<font color="#CCCCCC">block copy it</font><font color="#E5E5E5"> copies the</font><font color="#CCCCCC"> contents</font><font color="#E5E5E5"> of</font>

239
00:09:31,139 --> 00:09:37,170
<font color="#CCCCCC">your current frame into into your</font><font color="#E5E5E5"> new</font>

240
00:09:34,980 --> 00:09:39,720
prediction block<font color="#CCCCCC"> the location that you</font>

241
00:09:37,170 --> 00:09:41,099
copy from is especially specified by<font color="#E5E5E5"> a</font>

242
00:09:39,720 --> 00:09:43,970
<font color="#CCCCCC">motion vector even though there's no</font>

243
00:09:41,100 --> 00:09:46,139
motion because<font color="#E5E5E5"> this is in the same frame</font>

244
00:09:43,970 --> 00:09:47,760
<font color="#CCCCCC">there are some restrictions on</font><font color="#E5E5E5"> that to</font>

245
00:09:46,139 --> 00:09:49,440
make<font color="#E5E5E5"> this work with hardware so the</font>

246
00:09:47,760 --> 00:09:53,040
source must<font color="#CCCCCC"> be</font><font color="#E5E5E5"> more than two super</font>

247
00:09:49,440 --> 00:09:55,199
blocks prior<font color="#E5E5E5"> that essentially allows the</font>

248
00:09:53,040 --> 00:09:57,180
hardware decoding pipeline to have some

249
00:09:55,199 --> 00:09:59,519
latency<font color="#E5E5E5"> in it so that you're</font><font color="#CCCCCC"> they're</font>

250
00:09:57,180 --> 00:10:01,620
actually finished decoding the<font color="#CCCCCC"> block</font>

251
00:09:59,519 --> 00:10:04,500
<font color="#E5E5E5">before you need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> copy it</font><font color="#CCCCCC"> into the next</font>

252
00:10:01,620 --> 00:10:07,019
<font color="#E5E5E5">one and also loop filters are disabled</font>

253
00:10:04,500 --> 00:10:08,760
<font color="#E5E5E5">and</font><font color="#CCCCCC"> so the problem there is that</font><font color="#E5E5E5"> you</font>

254
00:10:07,019 --> 00:10:10,079
wanted<font color="#E5E5E5"> to be able to do the copying</font>

255
00:10:08,760 --> 00:10:11,939
before you ran the loop filter<font color="#E5E5E5"> for the</font>

256
00:10:10,079 --> 00:10:13,859
current frame because you know you

257
00:10:11,940 --> 00:10:15,149
haven't finished encode finished

258
00:10:13,860 --> 00:10:17,760
decoding the current frame yet<font color="#E5E5E5"> so you</font>

259
00:10:15,149 --> 00:10:19,050
couldn't run<font color="#CCCCCC"> loop</font><font color="#E5E5E5"> filter all of it</font><font color="#CCCCCC"> but</font>

260
00:10:17,760 --> 00:10:20,760
if you<font color="#E5E5E5"> then went back and ran the loop</font>

261
00:10:19,050 --> 00:10:22,140
filter<font color="#CCCCCC"> it meant that</font><font color="#E5E5E5"> hardware had to</font>

262
00:10:20,760 --> 00:10:23,819
write this<font color="#E5E5E5"> stuff out to memory twice</font>

263
00:10:22,140 --> 00:10:25,589
once<font color="#CCCCCC"> before</font><font color="#E5E5E5"> you loop filter it so you</font>

264
00:10:23,820 --> 00:10:27,000
could copy it<font color="#E5E5E5"> back and then once after</font>

265
00:10:25,589 --> 00:10:28,730
you loop filter<font color="#E5E5E5"> it so you could use</font><font color="#CCCCCC"> it</font>

266
00:10:27,000 --> 00:10:30,990
<font color="#E5E5E5">as prediction for the next frame so</font>

267
00:10:28,730 --> 00:10:34,110
instead<font color="#E5E5E5"> we</font><font color="#CCCCCC"> just always turn the loop</font>

268
00:10:30,990 --> 00:10:36,240
filter<font color="#E5E5E5"> off that sort of makes this kind</font>

269
00:10:34,110 --> 00:10:39,029
<font color="#E5E5E5">of a special purpose tool that won't be</font>

270
00:10:36,240 --> 00:10:41,819
be easily usable in all<font color="#CCCCCC"> situations but</font>

271
00:10:39,029 --> 00:10:43,350
<font color="#E5E5E5">in the situations when it is usable it</font>

272
00:10:41,819 --> 00:10:48,269
can provide some some very<font color="#E5E5E5"> interesting</font>

273
00:10:43,350 --> 00:10:50,420
gains<font color="#CCCCCC"> motion vector coding so just to</font>

274
00:10:48,269 --> 00:10:53,250
recap what<font color="#CCCCCC"> I said of video on</font><font color="#E5E5E5"> dev days</font>

275
00:10:50,420 --> 00:10:56,790
this<font color="#E5E5E5"> is super</font><font color="#CCCCCC"> complicated scheme</font><font color="#E5E5E5"> and I</font>

276
00:10:53,250 --> 00:10:59,459
didn't<font color="#E5E5E5"> even try to explain</font><font color="#CCCCCC"> it then and</font>

277
00:10:56,790 --> 00:11:00,930
the current status<font color="#E5E5E5"> is it's a super</font>

278
00:10:59,459 --> 00:11:02,219
<font color="#CCCCCC">complicated scheme that I'm not even</font>

279
00:11:00,930 --> 00:11:04,829
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> try to explain</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> we only</font>

280
00:11:02,220 --> 00:11:07,670
have 25<font color="#CCCCCC"> minutes but all</font><font color="#E5E5E5"> the details are</font>

281
00:11:04,829 --> 00:11:07,670
now totally<font color="#E5E5E5"> different</font>

282
00:11:08,440 --> 00:11:13,300
so basically what's what's happened is

283
00:11:11,380 --> 00:11:15,790
is hardware companies took<font color="#E5E5E5"> a look and</font>

284
00:11:13,300 --> 00:11:19,000
<font color="#E5E5E5">said</font><font color="#CCCCCC"> that the the old scheme had a lot</font>

285
00:11:15,790 --> 00:11:21,790
of<font color="#E5E5E5"> dependencies on on completely</font>

286
00:11:19,000 --> 00:11:23,069
<font color="#E5E5E5">deriving all the exact values of</font><font color="#CCCCCC"> all the</font>

287
00:11:21,790 --> 00:11:26,380
motion vectors before<font color="#CCCCCC"> you could even</font>

288
00:11:23,069 --> 00:11:28,360
parse the bitstream<font color="#CCCCCC"> for the current</font>

289
00:11:26,380 --> 00:11:30,519
<font color="#CCCCCC">motion vector and so there's been a</font>

290
00:11:28,360 --> 00:11:32,470
bunch of work to<font color="#CCCCCC"> try</font><font color="#E5E5E5"> to eliminate those</font>

291
00:11:30,519 --> 00:11:34,209
dependencies<font color="#CCCCCC"> so that you can do the</font>

292
00:11:32,470 --> 00:11:35,680
<font color="#E5E5E5">entropy decoding before you've</font>

293
00:11:34,209 --> 00:11:39,099
completely<font color="#E5E5E5"> reconstructed all of your</font>

294
00:11:35,680 --> 00:11:40,449
neighboring motion vectors and so<font color="#CCCCCC"> there</font>

295
00:11:39,100 --> 00:11:42,220
they're working<font color="#CCCCCC"> on some more changes</font>

296
00:11:40,449 --> 00:11:43,750
<font color="#E5E5E5">that potentially simplify that some more</font>

297
00:11:42,220 --> 00:11:46,029
and<font color="#E5E5E5"> that's one of the three</font><font color="#CCCCCC"> issues are</font>

298
00:11:43,750 --> 00:11:48,370
highlighted back at the beginning<font color="#CCCCCC"> so</font>

299
00:11:46,029 --> 00:11:52,420
<font color="#E5E5E5">that</font><font color="#CCCCCC"> may change a little</font><font color="#E5E5E5"> bit more before</font>

300
00:11:48,370 --> 00:11:57,100
<font color="#E5E5E5">we're quite done we also added some</font><font color="#CCCCCC"> new</font>

301
00:11:52,420 --> 00:11:59,620
tools<font color="#E5E5E5"> so one is is this</font><font color="#CCCCCC"> FMV tool which</font>

302
00:11:57,100 --> 00:12:02,920
stands for<font color="#CCCCCC"> motion field motion vector or</font>

303
00:11:59,620 --> 00:12:05,889
something something<font color="#CCCCCC"> basically the</font><font color="#E5E5E5"> idea</font>

304
00:12:02,920 --> 00:12:08,019
is<font color="#CCCCCC"> that you take your your motion</font>

305
00:12:05,889 --> 00:12:10,089
vectors<font color="#E5E5E5"> from your reference frames and</font>

306
00:12:08,019 --> 00:12:14,050
project them<font color="#CCCCCC"> onto your current frame</font>

307
00:12:10,089 --> 00:12:15,819
<font color="#E5E5E5">just by linear extrapolation</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then</font>

308
00:12:14,050 --> 00:12:18,399
gather all the candidates<font color="#E5E5E5"> that intersect</font>

309
00:12:15,819 --> 00:12:20,319
<font color="#E5E5E5">each 8 by 8 block so what this lets you</font>

310
00:12:18,399 --> 00:12:22,420
<font color="#E5E5E5">do is get predictions from things that</font>

311
00:12:20,319 --> 00:12:24,550
<font color="#E5E5E5">are fast moving and</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> far</font><font color="#CCCCCC"> away as</font>

312
00:12:22,420 --> 00:12:27,819
opposed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> just looking at your</font>

313
00:12:24,550 --> 00:12:30,790
co-located blocks<font color="#E5E5E5"> which which only can</font>

314
00:12:27,819 --> 00:12:33,759
capture relatively slow motions<font color="#E5E5E5"> so this</font>

315
00:12:30,790 --> 00:12:36,130
is sort of like<font color="#E5E5E5"> direct mode but unlike</font>

316
00:12:33,759 --> 00:12:40,630
direct mode which is entirely designed

317
00:12:36,130 --> 00:12:45,120
to get very smooth smooth slow motions

318
00:12:40,630 --> 00:12:51,490
this is designed to<font color="#E5E5E5"> get very very quick</font>

319
00:12:45,120 --> 00:12:53,470
<font color="#E5E5E5">otherwise unpredictable motions so that</font>

320
00:12:51,490 --> 00:12:56,829
gives<font color="#E5E5E5"> something like</font><font color="#CCCCCC"> a 1% coding</font>

321
00:12:53,470 --> 00:12:59,829
improvement<font color="#CCCCCC"> we also changed how the warp</font>

322
00:12:56,829 --> 00:13:03,099
motion sample selection<font color="#CCCCCC"> works</font><font color="#E5E5E5"> so if you</font>

323
00:12:59,829 --> 00:13:05,138
recall<font color="#E5E5E5"> what warp motion does is is it</font>

324
00:13:03,100 --> 00:13:08,560
<font color="#E5E5E5">computes this affine transformation of</font>

325
00:13:05,139 --> 00:13:10,480
per pixel<font color="#E5E5E5"> motion vectors based by based</font>

326
00:13:08,560 --> 00:13:12,130
on<font color="#E5E5E5"> building a local motion model by</font>

327
00:13:10,480 --> 00:13:13,449
looking at the current blocks motion

328
00:13:12,130 --> 00:13:17,620
vector and a bunch of motion vectors

329
00:13:13,449 --> 00:13:19,400
<font color="#E5E5E5">from its neighbors so we added the upper</font>

330
00:13:17,620 --> 00:13:21,020
right block to the list of

331
00:13:19,400 --> 00:13:23,209
vectors that it<font color="#CCCCCC"> uses</font><font color="#E5E5E5"> to build that</font><font color="#CCCCCC"> model</font>

332
00:13:21,020 --> 00:13:26,510
and<font color="#CCCCCC"> make help</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> get a</font><font color="#E5E5E5"> little bit more</font>

333
00:13:23,210 --> 00:13:29,330
robust model<font color="#CCCCCC"> and we also now remove</font>

334
00:13:26,510 --> 00:13:31,040
motion vectors that differ<font color="#E5E5E5"> a whole lot</font>

335
00:13:29,330 --> 00:13:33,470
<font color="#E5E5E5">from the current blocks motion vector</font>

336
00:13:31,040 --> 00:13:38,870
which helps the the fitting<font color="#E5E5E5"> being more</font>

337
00:13:33,470 --> 00:13:41,690
robust<font color="#CCCCCC"> we also added</font><font color="#E5E5E5"> this extended skip</font>

338
00:13:38,870 --> 00:13:43,220
mode so if you recall<font color="#CCCCCC"> a skip mode and</font>

339
00:13:41,690 --> 00:13:45,530
vp9 just means<font color="#E5E5E5"> that you don't code a</font>

340
00:13:43,220 --> 00:13:47,360
residual but like you<font color="#E5E5E5"> still</font><font color="#CCCCCC"> have to code</font>

341
00:13:45,530 --> 00:13:48,800
which reference frames you're using and

342
00:13:47,360 --> 00:13:50,930
<font color="#E5E5E5">what prediction mode you're using and</font>

343
00:13:48,800 --> 00:13:54,319
which motion vectors are using<font color="#CCCCCC"> and all</font>

344
00:13:50,930 --> 00:13:56,719
this other stuff<font color="#CCCCCC"> so what we do now is</font>

345
00:13:54,320 --> 00:13:58,070
when we<font color="#E5E5E5"> have a reference frame right</font>

346
00:13:56,720 --> 00:14:00,200
before the current<font color="#E5E5E5"> frame and a reference</font>

347
00:13:58,070 --> 00:14:03,230
<font color="#E5E5E5">frame right after the current frame we</font>

348
00:14:00,200 --> 00:14:05,270
<font color="#E5E5E5">can enable this extended</font><font color="#CCCCCC"> Skip mode</font><font color="#E5E5E5"> and</font>

349
00:14:03,230 --> 00:14:07,850
if a block is<font color="#CCCCCC"> Marcos</font><font color="#E5E5E5"> an extended skip</font>

350
00:14:05,270 --> 00:14:09,980
then we know right<font color="#E5E5E5"> away</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's inter</font>

351
00:14:07,850 --> 00:14:14,450
<font color="#E5E5E5">coded we know that there's no residual</font>

352
00:14:09,980 --> 00:14:16,160
which is what the old skip was we<font color="#E5E5E5"> forced</font>

353
00:14:14,450 --> 00:14:20,710
it<font color="#E5E5E5"> to be coated in compound mode which</font>

354
00:14:16,160 --> 00:14:23,240
is is the vp9 term for by prediction<font color="#CCCCCC"> and</font>

355
00:14:20,710 --> 00:14:24,650
using one forward<font color="#E5E5E5"> in one backward</font>

356
00:14:23,240 --> 00:14:27,470
reference<font color="#E5E5E5"> the two ones that are our</font>

357
00:14:24,650 --> 00:14:29,390
<font color="#E5E5E5">immediate neighbors</font><font color="#CCCCCC"> and then we just</font>

358
00:14:27,470 --> 00:14:30,560
always use the best<font color="#E5E5E5"> predicted motion</font>

359
00:14:29,390 --> 00:14:32,569
vector for<font color="#E5E5E5"> each of those two reference</font>

360
00:14:30,560 --> 00:14:34,880
frames<font color="#CCCCCC"> so</font><font color="#E5E5E5"> essentially we code nothing</font>

361
00:14:32,570 --> 00:14:37,370
for the entire<font color="#CCCCCC"> block which is you know</font>

362
00:14:34,880 --> 00:14:38,960
<font color="#E5E5E5">how skip mode works in other codecs so</font>

363
00:14:37,370 --> 00:14:42,590
so we actually<font color="#E5E5E5"> have one of those now</font>

364
00:14:38,960 --> 00:14:45,050
<font color="#E5E5E5">that</font><font color="#CCCCCC"> helps save a bunch of</font><font color="#E5E5E5"> bits all</font>

365
00:14:42,590 --> 00:14:47,420
right<font color="#CCCCCC"> there a bunch of changes to loop</font>

366
00:14:45,050 --> 00:14:49,609
filtering<font color="#CCCCCC"> so we made two</font><font color="#E5E5E5"> blocking modify</font>

367
00:14:47,420 --> 00:14:51,860
one fewer line<font color="#CCCCCC"> and why</font><font color="#E5E5E5"> why is that</font>

368
00:14:49,610 --> 00:14:54,170
important<font color="#E5E5E5"> what it helps us do is</font>

369
00:14:51,860 --> 00:14:57,080
eliminate some<font color="#CCCCCC"> of the line buffers in CF</font>

370
00:14:54,170 --> 00:15:01,610
and loop restoration the two new loop

371
00:14:57,080 --> 00:15:03,200
filters<font color="#E5E5E5"> that we added so we also changed</font>

372
00:15:01,610 --> 00:15:06,140
the<font color="#E5E5E5"> offset of</font><font color="#CCCCCC"> the loop restoration</font>

373
00:15:03,200 --> 00:15:08,300
processing blocks<font color="#E5E5E5"> and how the super</font>

374
00:15:06,140 --> 00:15:11,120
block<font color="#E5E5E5"> boundaries are handled to align</font>

375
00:15:08,300 --> 00:15:13,010
them with<font color="#E5E5E5"> CF output we didn't have to</font>

376
00:15:11,120 --> 00:15:15,260
<font color="#E5E5E5">change CF at all because</font><font color="#CCCCCC"> of course CF is</font>

377
00:15:13,010 --> 00:15:17,240
perfect

378
00:15:15,260 --> 00:15:19,069
<font color="#E5E5E5">CF is a Mozilla tool if you were</font>

379
00:15:17,240 --> 00:15:22,640
<font color="#E5E5E5">wondering</font>

380
00:15:19,070 --> 00:15:25,130
loop restoration itself we simplified

381
00:15:22,640 --> 00:15:27,580
the<font color="#CCCCCC"> self-guided filter</font><font color="#E5E5E5"> so what that</font>

382
00:15:25,130 --> 00:15:29,600
means is is<font color="#CCCCCC"> that essentially the</font>

383
00:15:27,580 --> 00:15:31,040
<font color="#CCCCCC">self-guided filter computes a bunch of</font>

384
00:15:29,600 --> 00:15:32,690
<font color="#CCCCCC">parameters and convenience parameters is</font>

385
00:15:31,040 --> 00:15:32,880
very expensive<font color="#E5E5E5"> and now we just compute</font>

386
00:15:32,690 --> 00:15:34,650
the

387
00:15:32,880 --> 00:15:37,860
often and interpolate the results so

388
00:15:34,650 --> 00:15:40,590
that<font color="#E5E5E5"> makes that less complex</font><font color="#CCCCCC"> the the</font>

389
00:15:37,860 --> 00:15:42,120
upshot<font color="#E5E5E5"> of all these changes</font><font color="#CCCCCC"> is that the</font>

390
00:15:40,590 --> 00:15:43,500
total<font color="#CCCCCC"> number of line buffers that you</font>

391
00:15:42,120 --> 00:15:46,260
have to<font color="#E5E5E5"> buffer</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> hardware for all these</font>

392
00:15:43,500 --> 00:15:48,150
things<font color="#E5E5E5"> is now reduced</font><font color="#CCCCCC"> to 16 it was</font><font color="#E5E5E5"> 30</font>

393
00:15:46,260 --> 00:15:50,460
before<font color="#E5E5E5"> all these changes so it's kind</font><font color="#CCCCCC"> of</font>

394
00:15:48,150 --> 00:15:51,780
a significant reduction which is also

395
00:15:50,460 --> 00:15:54,180
conveniently the same number of line

396
00:15:51,780 --> 00:15:55,770
buffers required by the by vp9<font color="#E5E5E5"> so</font>

397
00:15:54,180 --> 00:15:58,469
despite<font color="#CCCCCC"> the fact that we have two</font>

398
00:15:55,770 --> 00:15:59,640
entirely new loop filters<font color="#E5E5E5"> we don't</font>

399
00:15:58,470 --> 00:16:03,080
<font color="#E5E5E5">require any more buffering and that</font>

400
00:15:59,640 --> 00:16:04,880
makes<font color="#CCCCCC"> harbor</font><font color="#E5E5E5"> vendors happy all</font><font color="#CCCCCC"> right</font>

401
00:16:03,080 --> 00:16:08,040
<font color="#E5E5E5">five minutes</font><font color="#CCCCCC"> left</font>

402
00:16:04,880 --> 00:16:10,350
don't worry we're<font color="#CCCCCC"> almost there frame</font>

403
00:16:08,040 --> 00:16:12,030
<font color="#CCCCCC">super-resolution so if you actually</font><font color="#E5E5E5"> know</font>

404
00:16:10,350 --> 00:16:13,590
what the academic community<font color="#E5E5E5"> calls super</font>

405
00:16:12,030 --> 00:16:15,390
resolution which is<font color="#CCCCCC"> an up sampling</font>

406
00:16:13,590 --> 00:16:16,740
images by<font color="#CCCCCC"> using motion</font><font color="#E5E5E5"> interpolation to</font>

407
00:16:15,390 --> 00:16:19,949
get finer detail that's not what we're

408
00:16:16,740 --> 00:16:21,900
doing<font color="#E5E5E5"> at all</font><font color="#CCCCCC"> we're actually</font><font color="#E5E5E5"> doing is is</font>

409
00:16:19,950 --> 00:16:23,820
<font color="#E5E5E5">coding a frame at a reduced</font><font color="#CCCCCC"> resolution</font>

410
00:16:21,900 --> 00:16:28,949
than up sampling with a very simple

411
00:16:23,820 --> 00:16:30,630
filter<font color="#E5E5E5"> and and then running loop</font>

412
00:16:28,950 --> 00:16:32,910
restoration on the full<font color="#E5E5E5"> resolution image</font>

413
00:16:30,630 --> 00:16:34,740
and basically the loop restoration the

414
00:16:32,910 --> 00:16:36,569
full<font color="#E5E5E5"> resolution image gets rid of all</font>

415
00:16:34,740 --> 00:16:40,230
the artifacts<font color="#E5E5E5"> from the very simple</font><font color="#CCCCCC"> up</font>

416
00:16:36,570 --> 00:16:42,060
filter so only horizontal<font color="#CCCCCC"> resolution</font>

417
00:16:40,230 --> 00:16:44,760
reduction is<font color="#CCCCCC"> allowed so we can squeeze</font>

418
00:16:42,060 --> 00:16:46,410
the image this way but<font color="#E5E5E5"> not this way</font><font color="#CCCCCC"> and</font>

419
00:16:44,760 --> 00:16:48,870
that's again to simplify<font color="#CCCCCC"> hardware</font>

420
00:16:46,410 --> 00:16:51,510
buffering<font color="#E5E5E5"> but what this lets you do</font><font color="#CCCCCC"> is</font>

421
00:16:48,870 --> 00:16:53,490
get you<font color="#E5E5E5"> much more gradual bitrate</font>

422
00:16:51,510 --> 00:16:54,840
scaling so you don't<font color="#E5E5E5"> have to to do</font>

423
00:16:53,490 --> 00:16:56,790
things<font color="#E5E5E5"> like cut your entire video</font>

424
00:16:54,840 --> 00:16:58,850
resolution<font color="#E5E5E5"> in half or something like</font>

425
00:16:56,790 --> 00:16:58,849
<font color="#E5E5E5">that</font>

426
00:16:59,700 --> 00:17:05,250
spatial segmentation so we<font color="#CCCCCC"> added a new</font>

427
00:17:02,820 --> 00:17:08,339
new spatial segmentation mode<font color="#E5E5E5"> it</font>

428
00:17:05,250 --> 00:17:11,099
predicts all the<font color="#CCCCCC"> segment labels that you</font>

429
00:17:08,339 --> 00:17:13,020
<font color="#E5E5E5">have in vp9 but it doesn't do it</font>

430
00:17:11,099 --> 00:17:17,040
<font color="#E5E5E5">temporarily does spatially more</font>

431
00:17:13,020 --> 00:17:19,079
importantly it allows you<font color="#E5E5E5"> to not code a</font>

432
00:17:17,040 --> 00:17:21,329
segment label for blocks that<font color="#CCCCCC"> are</font>

433
00:17:19,079 --> 00:17:23,159
skipped<font color="#E5E5E5"> and what we use this</font><font color="#CCCCCC"> for is</font>

434
00:17:21,329 --> 00:17:25,649
<font color="#E5E5E5">being able to change the quantizer on a</font>

435
00:17:23,160 --> 00:17:27,689
block by block basis<font color="#E5E5E5"> which is important</font>

436
00:17:25,650 --> 00:17:30,900
<font color="#CCCCCC">for things like adaptive quantization I</font>

437
00:17:27,689 --> 00:17:33,150
activity masking or temporal are do<font color="#E5E5E5"> ie</font>

438
00:17:30,900 --> 00:17:34,530
mbtree so we can now<font color="#CCCCCC"> have implement</font>

439
00:17:33,150 --> 00:17:36,060
<font color="#E5E5E5">those much more efficiently which will</font>

440
00:17:34,530 --> 00:17:38,629
be important for<font color="#CCCCCC"> getting good visual</font>

441
00:17:36,060 --> 00:17:41,070
quality when we start tuning<font color="#E5E5E5"> for that</font>

442
00:17:38,630 --> 00:17:42,900
<font color="#E5E5E5">there</font><font color="#CCCCCC"> are a bunch</font><font color="#E5E5E5"> of other changes</font><font color="#CCCCCC"> so we</font>

443
00:17:41,070 --> 00:17:45,960
<font color="#CCCCCC">changed cross style dependencies to</font>

444
00:17:42,900 --> 00:17:46,450
<font color="#E5E5E5">allow latency encoding and repackage</font>

445
00:17:45,960 --> 00:17:48,940
ization

446
00:17:46,450 --> 00:17:52,539
tiles into different tile groups tile

447
00:17:48,940 --> 00:17:54,610
groups are sort<font color="#CCCCCC"> of the the mechanism we</font>

448
00:17:52,539 --> 00:17:56,679
<font color="#CCCCCC">have for putting things</font><font color="#E5E5E5"> into for</font><font color="#CCCCCC"> example</font>

449
00:17:54,610 --> 00:17:58,799
an RTP packet and so now we<font color="#E5E5E5"> can change</font>

450
00:17:56,679 --> 00:18:01,389
the sizes<font color="#CCCCCC"> of</font><font color="#E5E5E5"> those with some freedom</font>

451
00:17:58,799 --> 00:18:02,918
<font color="#CCCCCC">there's a decoder rate</font><font color="#E5E5E5"> model so one of</font>

452
00:18:01,389 --> 00:18:04,330
<font color="#E5E5E5">the difficulties</font><font color="#CCCCCC"> you have when you don't</font>

453
00:18:02,919 --> 00:18:06,100
<font color="#E5E5E5">have B frames but instead have this</font>

454
00:18:04,330 --> 00:18:08,289
<font color="#E5E5E5">constant with hidden frames is you no</font>

455
00:18:06,100 --> 00:18:09,699
longer<font color="#E5E5E5"> have a fixed reordering depth so</font>

456
00:18:08,289 --> 00:18:11,379
if you have<font color="#CCCCCC"> Hardware and you say well I</font>

457
00:18:09,700 --> 00:18:12,940
<font color="#CCCCCC">had have six hidden frames before I</font>

458
00:18:11,380 --> 00:18:14,559
decode my current frame does the Harvard

459
00:18:12,940 --> 00:18:16,059
now say well do you have to be able to

460
00:18:14,559 --> 00:18:17,320
encode<font color="#CCCCCC"> at six times the frame rate to</font>

461
00:18:16,059 --> 00:18:18,908
guarantee I can decode everything and

462
00:18:17,320 --> 00:18:20,470
the answer is no you can<font color="#E5E5E5"> put a rational</font>

463
00:18:18,909 --> 00:18:23,470
model around it<font color="#E5E5E5"> and figure out something</font>

464
00:18:20,470 --> 00:18:26,080
<font color="#CCCCCC">that they actually implement there's</font>

465
00:18:23,470 --> 00:18:27,429
CICP<font color="#E5E5E5"> color</font><font color="#CCCCCC"> it's color space</font><font color="#E5E5E5"> metadata so</font>

466
00:18:26,080 --> 00:18:29,710
you can store<font color="#CCCCCC"> things like primaries and</font>

467
00:18:27,429 --> 00:18:33,370
transfer functions and we added<font color="#E5E5E5"> support</font>

468
00:18:29,710 --> 00:18:37,389
from<font color="#E5E5E5"> mono video because it was easy</font><font color="#CCCCCC"> all</font>

469
00:18:33,370 --> 00:18:39,370
<font color="#CCCCCC">right</font><font color="#E5E5E5"> how are</font><font color="#CCCCCC"> we doing so instead</font><font color="#E5E5E5"> of</font>

470
00:18:37,389 --> 00:18:42,039
<font color="#CCCCCC">presenting metrics that we collected</font>

471
00:18:39,370 --> 00:18:45,969
ourselves like I usually<font color="#E5E5E5"> do Moscow State</font>

472
00:18:42,039 --> 00:18:49,480
<font color="#CCCCCC">University just just this week published</font>

473
00:18:45,970 --> 00:18:52,990
a report where<font color="#CCCCCC"> they compared X to 64 and</font>

474
00:18:49,480 --> 00:18:55,419
x265 and vp9 at 81<font color="#E5E5E5"> and so you can see</font>

475
00:18:52,990 --> 00:18:58,419
the the four things<font color="#CCCCCC"> four bars there in</font>

476
00:18:55,419 --> 00:18:59,919
the upper<font color="#E5E5E5"> right are x264 then there's a</font>

477
00:18:58,419 --> 00:19:04,269
big<font color="#E5E5E5"> jump down into the</font><font color="#CCCCCC"> next-generation</font>

478
00:18:59,919 --> 00:19:07,389
codecs<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> most of those are x265</font>

479
00:19:04,269 --> 00:19:09,159
<font color="#E5E5E5">the one right there</font><font color="#CCCCCC"> is vp9 which is</font>

480
00:19:07,389 --> 00:19:11,260
better than everything<font color="#E5E5E5"> except placebo</font>

481
00:19:09,159 --> 00:19:14,409
mode<font color="#CCCCCC"> it's a lot</font><font color="#E5E5E5"> faster</font><font color="#CCCCCC"> than placebo mode</font>

482
00:19:11,260 --> 00:19:17,408
by the way and then there's another big

483
00:19:14,409 --> 00:19:19,840
jump down to a v1<font color="#E5E5E5"> and this was using</font><font color="#CCCCCC"> a</font>

484
00:19:17,409 --> 00:19:22,169
version<font color="#E5E5E5"> all the way back from June so</font>

485
00:19:19,840 --> 00:19:27,279
we're a lot better<font color="#CCCCCC"> than that now and</font>

486
00:19:22,169 --> 00:19:31,539
that's already<font color="#E5E5E5"> doing pretty good so we</font>

487
00:19:27,279 --> 00:19:34,000
expect that<font color="#E5E5E5"> that to work out well</font><font color="#CCCCCC"> are</font>

488
00:19:31,539 --> 00:19:35,480
there<font color="#CCCCCC"> any questions I had 36 seconds</font>

489
00:19:34,000 --> 00:19:49,320
left

490
00:19:35,480 --> 00:19:52,500
five minutes<font color="#E5E5E5"> thank you for the</font>

491
00:19:49,320 --> 00:19:55,460
presentation<font color="#CCCCCC"> my question is</font><font color="#E5E5E5"> if I'm</font>

492
00:19:52,500 --> 00:19:58,500
working<font color="#CCCCCC"> on ffmpeg bug reports</font><font color="#E5E5E5"> and</font>

493
00:19:55,460 --> 00:20:01,710
apparently<font color="#E5E5E5"> if you take out the</font><font color="#CCCCCC"> IP frame</font>

494
00:19:58,500 --> 00:20:05,130
from an vp8 or vp9 stream the stream

495
00:20:01,710 --> 00:20:07,500
never recovers<font color="#E5E5E5"> while with all MPEG</font>

496
00:20:05,130 --> 00:20:11,009
streams I've ever seen and tested you

497
00:20:07,500 --> 00:20:13,950
<font color="#E5E5E5">can take away the iframes and the stream</font>

498
00:20:11,009 --> 00:20:17,240
will recover<font color="#E5E5E5"> and if there's a scene</font>

499
00:20:13,950 --> 00:20:20,250
change<font color="#CCCCCC"> it will</font><font color="#E5E5E5"> even recover very quickly</font>

500
00:20:17,240 --> 00:20:24,720
<font color="#CCCCCC">is</font><font color="#E5E5E5"> that something</font><font color="#CCCCCC"> that you know how it</font>

501
00:20:20,250 --> 00:20:26,370
works in<font color="#E5E5E5"> a v1 right so so the biggest</font>

502
00:20:24,720 --> 00:20:28,620
reason<font color="#CCCCCC"> for that is this backwards</font>

503
00:20:26,370 --> 00:20:30,899
adaptation of probabilities<font color="#E5E5E5"> so what</font>

504
00:20:28,620 --> 00:20:33,389
happens is is that<font color="#E5E5E5"> you code a frame and</font>

505
00:20:30,899 --> 00:20:35,820
and all of<font color="#CCCCCC"> your probabilities are</font>

506
00:20:33,389 --> 00:20:38,189
updated as you<font color="#E5E5E5"> code that frame</font><font color="#CCCCCC"> based</font><font color="#E5E5E5"> on</font>

507
00:20:35,820 --> 00:20:40,980
the symbols that<font color="#E5E5E5"> you code and then in</font>

508
00:20:38,190 --> 00:20:42,299
most traditional MPEG my codecs when you

509
00:20:40,980 --> 00:20:44,090
start the next<font color="#CCCCCC"> frame you reset all the</font>

510
00:20:42,299 --> 00:20:48,929
<font color="#E5E5E5">probabilities</font><font color="#CCCCCC"> and start from scratch</font>

511
00:20:44,090 --> 00:20:51,059
<font color="#E5E5E5">well as in vp9 and and also in a v1 you</font>

512
00:20:48,929 --> 00:20:53,759
start from the previous probabilities

513
00:20:51,059 --> 00:20:56,428
that<font color="#E5E5E5"> you use from the previous frame so</font>

514
00:20:53,759 --> 00:20:58,710
as<font color="#CCCCCC"> a result if you lose one of</font><font color="#E5E5E5"> those</font>

515
00:20:56,429 --> 00:21:01,169
<font color="#E5E5E5">previous frames then in your future</font>

516
00:20:58,710 --> 00:21:02,669
<font color="#E5E5E5">frames like everything is wrong because</font>

517
00:21:01,169 --> 00:21:05,309
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> not even decoding the right</font>

518
00:21:02,669 --> 00:21:08,370
symbols and<font color="#E5E5E5"> is that not an issue I mean</font>

519
00:21:05,309 --> 00:21:11,600
maybe<font color="#E5E5E5"> I'm not seeing it</font><font color="#CCCCCC"> but I I thought</font>

520
00:21:08,370 --> 00:21:14,549
<font color="#E5E5E5">it looks like an issue to me right so so</font>

521
00:21:11,600 --> 00:21:17,428
there there are<font color="#CCCCCC"> a couple of</font><font color="#E5E5E5"> things one</font>

522
00:21:14,549 --> 00:21:19,110
<font color="#CCCCCC">is you can turn this off right</font><font color="#E5E5E5"> it's not</font>

523
00:21:17,429 --> 00:21:20,580
<font color="#CCCCCC">the normal mode of operation</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> it</font>

524
00:21:19,110 --> 00:21:22,490
does cost<font color="#E5E5E5"> you compression efficiency I</font>

525
00:21:20,580 --> 00:21:29,460
think in our<font color="#E5E5E5"> last test it was around</font><font color="#CCCCCC"> 2%</font>

526
00:21:22,490 --> 00:21:31,080
which<font color="#CCCCCC"> is fairly significant but even if</font>

527
00:21:29,460 --> 00:21:35,460
you don't turn it off one<font color="#E5E5E5"> of the things</font>

528
00:21:31,080 --> 00:21:38,070
that we<font color="#CCCCCC"> changed in a v1 is that</font><font color="#E5E5E5"> we now</font>

529
00:21:35,460 --> 00:21:40,049
can derive which probabilities you start

530
00:21:38,070 --> 00:21:42,149
from from one of your reference frames

531
00:21:40,049 --> 00:21:43,320
<font color="#E5E5E5">so you know if you always have all of</font>

532
00:21:42,149 --> 00:21:45,239
<font color="#E5E5E5">your reference frames then you can</font>

533
00:21:43,320 --> 00:21:46,559
<font color="#E5E5E5">continue to decode and that means if</font>

534
00:21:45,240 --> 00:21:47,820
you're doing<font color="#E5E5E5"> for example a real time</font>

535
00:21:46,559 --> 00:21:48,960
scenario<font color="#E5E5E5"> where you have</font><font color="#CCCCCC"> multiple</font>

536
00:21:47,820 --> 00:21:51,120
<font color="#CCCCCC">different</font>

537
00:21:48,960 --> 00:21:53,130
spatial or temporal layers<font color="#E5E5E5"> if you lose a</font>

538
00:21:51,120 --> 00:21:54,418
frame<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can still recover by dropping</font>

539
00:21:53,130 --> 00:21:56,250
back to<font color="#CCCCCC"> one of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> previous frames that</font>

540
00:21:54,419 --> 00:21:57,630
<font color="#E5E5E5">you</font><font color="#CCCCCC"> actually received and as long as you</font>

541
00:21:56,250 --> 00:21:58,919
have all<font color="#CCCCCC"> the reference frames</font><font color="#E5E5E5"> need to</font>

542
00:21:57,630 --> 00:22:05,970
<font color="#E5E5E5">decode a current frame then</font><font color="#CCCCCC"> you can</font>

543
00:21:58,919 --> 00:22:07,230
decode<font color="#E5E5E5"> it successfully so you always</font>

544
00:22:05,970 --> 00:22:09,090
<font color="#E5E5E5">have to</font><font color="#CCCCCC"> keep</font><font color="#E5E5E5"> the reference frames in</font>

545
00:22:07,230 --> 00:22:10,140
memory<font color="#CCCCCC"> or sorry you</font><font color="#E5E5E5"> repeat the question</font>

546
00:22:09,090 --> 00:22:11,490
the question<font color="#CCCCCC"> was doesn't</font><font color="#E5E5E5"> that mean that</font>

547
00:22:10,140 --> 00:22:14,100
<font color="#E5E5E5">you have to keep the reference frames</font>

548
00:22:11,490 --> 00:22:16,380
and memory at all times the answer<font color="#CCCCCC"> was</font>

549
00:22:14,100 --> 00:22:18,809
you<font color="#E5E5E5"> always have to keep reference frames</font>

550
00:22:16,380 --> 00:22:20,940
to be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to decode future frames</font><font color="#CCCCCC"> but</font>

551
00:22:18,809 --> 00:22:23,850
<font color="#E5E5E5">the limit we currently uses</font><font color="#CCCCCC"> eight</font>

552
00:22:20,940 --> 00:22:25,919
reference frames and so eight reference

553
00:22:23,850 --> 00:22:27,539
frames is enough to do for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> three</font>

554
00:22:25,919 --> 00:22:30,409
temporal or three spatial layers at the

555
00:22:27,539 --> 00:22:35,340
<font color="#E5E5E5">same time which is at</font><font color="#CCCCCC"> least a reasonable</font>

556
00:22:30,409 --> 00:22:48,419
<font color="#CCCCCC">real-time</font><font color="#E5E5E5"> broadcasting scenario another</font>

557
00:22:35,340 --> 00:22:50,879
question so<font color="#E5E5E5"> do you see a V</font><font color="#CCCCCC"> on every one</font>

558
00:22:48,419 --> 00:22:53,789
as a codec<font color="#CCCCCC"> come to a place</font><font color="#E5E5E5"> where it's</font>

559
00:22:50,880 --> 00:22:57,299
going<font color="#CCCCCC"> to replace its h.264 in</font><font color="#E5E5E5"> this just</font>

560
00:22:53,789 --> 00:22:58,830
<font color="#E5E5E5">like way about the C future so the the</font>

561
00:22:57,299 --> 00:23:01,740
main difficulty with<font color="#CCCCCC"> that is getting</font>

562
00:22:58,830 --> 00:23:03,689
something<font color="#E5E5E5"> that that runs fast enough and</font>

563
00:23:01,740 --> 00:23:05,730
it's it's definitely<font color="#CCCCCC"> not</font><font color="#E5E5E5"> currently in</font>

564
00:23:03,690 --> 00:23:07,260
that position<font color="#CCCCCC"> so one of the things that</font>

565
00:23:05,730 --> 00:23:09,750
<font color="#E5E5E5">we're going to be</font><font color="#CCCCCC"> working on next</font><font color="#E5E5E5"> is</font>

566
00:23:07,260 --> 00:23:13,679
writing a fast encoder for it<font color="#E5E5E5"> I'm at</font>

567
00:23:09,750 --> 00:23:16,289
least reasonably<font color="#CCCCCC"> hopeful that that will</font>

568
00:23:13,679 --> 00:23:18,210
<font color="#CCCCCC">work out well in the</font><font color="#E5E5E5"> sense that I</font><font color="#CCCCCC"> think</font>

569
00:23:16,289 --> 00:23:19,770
we have another Alliance member who has

570
00:23:18,210 --> 00:23:22,049
has for<font color="#CCCCCC"> example a real</font><font color="#E5E5E5"> time of</font>

571
00:23:19,770 --> 00:23:25,649
<font color="#E5E5E5">implementation</font><font color="#CCCCCC"> that gets</font><font color="#E5E5E5"> around</font><font color="#CCCCCC"> 30%</font>

572
00:23:22,049 --> 00:23:30,950
better compression than<font color="#E5E5E5"> then vp9</font><font color="#CCCCCC"> with</font>

573
00:23:25,649 --> 00:23:33,689
the similar amount of CPU compute so I

574
00:23:30,950 --> 00:23:35,340
think<font color="#E5E5E5"> that's that's a significant enough</font>

575
00:23:33,690 --> 00:23:37,529
<font color="#CCCCCC">improvement that</font><font color="#E5E5E5"> that it will take off</font>

576
00:23:35,340 --> 00:23:40,260
for WebRTC<font color="#CCCCCC"> but it'll probably take us</font>

577
00:23:37,529 --> 00:23:41,549
<font color="#CCCCCC">awhile to get</font><font color="#E5E5E5"> the software and into a</font>

578
00:23:40,260 --> 00:23:43,890
state that<font color="#CCCCCC"> we can use it for that</font>

579
00:23:41,549 --> 00:23:48,149
<font color="#E5E5E5">purpose would you say that the coding is</font>

580
00:23:43,890 --> 00:23:50,720
memory bound or CPU bound<font color="#E5E5E5"> it's actually</font>

581
00:23:48,149 --> 00:23:50,719
<font color="#E5E5E5">both um</font>

582
00:23:51,350 --> 00:24:07,020
yeah<font color="#CCCCCC"> thanks so diego's question was how</font>

583
00:24:03,090 --> 00:24:09,570
fast is the encoder<font color="#E5E5E5"> I think the it is</font>

584
00:24:07,020 --> 00:24:13,560
currently somewhere between 2,500 and

585
00:24:09,570 --> 00:24:20,100
3,000 times slower than<font color="#E5E5E5"> vp9</font><font color="#CCCCCC"> will make</font><font color="#E5E5E5"> it</font>

586
00:24:13,560 --> 00:24:22,169
faster yeah so as I said our<font color="#E5E5E5"> next</font><font color="#CCCCCC"> 9x</font>

587
00:24:20,100 --> 00:24:24,770
goal<font color="#E5E5E5"> is to work on on a faster encoder</font>

588
00:24:22,170 --> 00:24:27,150
<font color="#E5E5E5">we have one that only does</font><font color="#CCCCCC"> 4x4 blocks</font><font color="#E5E5E5"> on</font>

589
00:24:24,770 --> 00:24:30,120
soon it'll<font color="#CCCCCC"> be able to code coefficients</font>

590
00:24:27,150 --> 00:24:31,680
larger than<font color="#CCCCCC"> four but it's so fast that</font>

591
00:24:30,120 --> 00:24:37,399
<font color="#E5E5E5">we test it on</font><font color="#CCCCCC"> four minute videos because</font>

592
00:24:31,680 --> 00:24:37,400
why<font color="#CCCCCC"> not</font><font color="#E5E5E5"> thank you to him</font>

