1
00:00:05,870 --> 00:00:11,040
okay guys we're gonna<font color="#E5E5E5"> get started</font><font color="#CCCCCC"> so our</font>

2
00:00:08,940 --> 00:00:13,980
last stop for<font color="#CCCCCC"> today is exploiting my</font>

3
00:00:11,040 --> 00:00:16,020
<font color="#E5E5E5">modern microarchitectures by John</font>

4
00:00:13,980 --> 00:00:27,270
masters<font color="#E5E5E5"> so please help me</font><font color="#CCCCCC"> welcome</font><font color="#E5E5E5"> him</font>

5
00:00:16,020 --> 00:00:28,380
<font color="#E5E5E5">with a warm round of applause oh well</font>

6
00:00:27,270 --> 00:00:30,180
thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> very much</font>

7
00:00:28,380 --> 00:00:34,710
we'll we'll<font color="#CCCCCC"> see if you're</font><font color="#E5E5E5"> still clapping</font>

8
00:00:30,180 --> 00:00:38,039
at the end so<font color="#E5E5E5"> my name is John masters</font>

9
00:00:34,710 --> 00:00:41,039
<font color="#E5E5E5">I'm a computer architect with Red Hat</font>

10
00:00:38,039 --> 00:00:44,489
<font color="#CCCCCC">some of you know me from the Linux</font>

11
00:00:41,039 --> 00:00:46,859
kernel podcast<font color="#E5E5E5"> and from some work I do</font>

12
00:00:44,489 --> 00:00:48,120
with<font color="#CCCCCC"> the ARM architecture but I'm</font>

13
00:00:46,859 --> 00:00:49,589
actually here today<font color="#CCCCCC"> to talk about</font>

14
00:00:48,120 --> 00:00:52,550
<font color="#E5E5E5">something completely different</font>

15
00:00:49,589 --> 00:01:01,559
put your hand up if you have<font color="#E5E5E5"> never heard</font>

16
00:00:52,550 --> 00:01:03,539
the words meltdown or<font color="#E5E5E5"> Spectre okay so so</font>

17
00:01:01,559 --> 00:01:05,640
I'm here<font color="#CCCCCC"> today to talk</font><font color="#E5E5E5"> a bit</font><font color="#CCCCCC"> about a</font>

18
00:01:03,539 --> 00:01:08,280
<font color="#E5E5E5">little project</font><font color="#CCCCCC"> that we were running</font>

19
00:01:05,640 --> 00:01:10,520
<font color="#E5E5E5">inside Red Hat so I was running</font><font color="#CCCCCC"> a</font>

20
00:01:08,280 --> 00:01:14,100
mitigation team for the<font color="#E5E5E5"> past few months</font>

21
00:01:10,520 --> 00:01:16,080
<font color="#CCCCCC">dealing with</font><font color="#E5E5E5"> this event</font><font color="#CCCCCC"> and a bunch of</font>

22
00:01:14,100 --> 00:01:19,229
us didn't<font color="#CCCCCC"> really get a holiday</font><font color="#E5E5E5"> as a</font>

23
00:01:16,080 --> 00:01:23,090
result<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> that time we learned</font>

24
00:01:19,230 --> 00:01:27,000
a lot<font color="#CCCCCC"> about these particular exploits</font>

25
00:01:23,090 --> 00:01:30,090
<font color="#E5E5E5">and also had a time to reflect on these</font>

26
00:01:27,000 --> 00:01:33,690
new classes of<font color="#E5E5E5"> attack</font><font color="#CCCCCC"> and what they mean</font>

27
00:01:30,090 --> 00:01:36,420
<font color="#E5E5E5">and so the purpose today is to both</font>

28
00:01:33,690 --> 00:01:37,830
introduce these two exploits that<font color="#E5E5E5"> you've</font>

29
00:01:36,420 --> 00:01:40,170
heard in<font color="#E5E5E5"> the news or the three</font>

30
00:01:37,830 --> 00:01:41,850
variations<font color="#CCCCCC"> off them but also to walk you</font>

31
00:01:40,170 --> 00:01:45,600
through some<font color="#E5E5E5"> concepts in</font><font color="#CCCCCC"> computer</font>

32
00:01:41,850 --> 00:01:47,339
architecture that they exploit<font color="#CCCCCC"> have some</font>

33
00:01:45,600 --> 00:01:48,899
time to<font color="#E5E5E5"> think</font><font color="#CCCCCC"> about where we're</font><font color="#E5E5E5"> going as</font>

34
00:01:47,340 --> 00:01:51,360
an industry and then we'll take

35
00:01:48,900 --> 00:01:53,760
<font color="#CCCCCC">questions toward the end now I did a</font>

36
00:01:51,360 --> 00:01:56,910
preview version of this<font color="#E5E5E5"> talk a few days</font>

37
00:01:53,760 --> 00:01:58,980
ago<font color="#E5E5E5"> at Stanford</font><font color="#CCCCCC"> over in California and</font>

38
00:01:56,910 --> 00:02:00,990
it<font color="#E5E5E5"> took two and</font><font color="#CCCCCC"> a half hours</font><font color="#E5E5E5"> to get</font>

39
00:01:58,980 --> 00:02:03,810
through the slides<font color="#E5E5E5"> now the good</font><font color="#CCCCCC"> news</font><font color="#E5E5E5"> is</font>

40
00:02:00,990 --> 00:02:08,008
that<font color="#CCCCCC"> I have only</font><font color="#E5E5E5"> 45 minutes here and</font>

41
00:02:03,810 --> 00:02:11,129
I've added five slide sets<font color="#E5E5E5"> so what</font>

42
00:02:08,008 --> 00:02:14,010
you're<font color="#E5E5E5"> going to see is various points me</font>

43
00:02:11,129 --> 00:02:16,890
skipping over<font color="#CCCCCC"> our slides that contain</font>

44
00:02:14,010 --> 00:02:18,780
explanation for diagrams<font color="#E5E5E5"> that I've</font>

45
00:02:16,890 --> 00:02:20,940
showed you<font color="#E5E5E5"> right the idea is that</font>

46
00:02:18,780 --> 00:02:22,620
he want the<font color="#E5E5E5"> long-form version in</font>

47
00:02:20,940 --> 00:02:25,079
particular if English is<font color="#CCCCCC"> not your first</font>

48
00:02:22,620 --> 00:02:27,150
<font color="#E5E5E5">language</font><font color="#CCCCCC"> oh this is the first time</font>

49
00:02:25,080 --> 00:02:29,970
you've seen a concept<font color="#E5E5E5"> you can go and</font>

50
00:02:27,150 --> 00:02:31,920
read the<font color="#CCCCCC"> long-form explanation and you</font>

51
00:02:29,970 --> 00:02:34,050
<font color="#E5E5E5">can download</font><font color="#CCCCCC"> the slides</font><font color="#E5E5E5"> right now if you</font>

52
00:02:31,920 --> 00:02:36,420
follow at John masters<font color="#E5E5E5"> that Twitter</font>

53
00:02:34,050 --> 00:02:38,940
handle right there<font color="#CCCCCC"> you'll see a link and</font>

54
00:02:36,420 --> 00:02:40,829
we're gonna do a load stress<font color="#CCCCCC"> test on</font>

55
00:02:38,940 --> 00:02:43,140
<font color="#CCCCCC">people dot red hat com we're gonna see</font>

56
00:02:40,830 --> 00:02:44,700
how<font color="#E5E5E5"> well it stands everyone trying to</font>

57
00:02:43,140 --> 00:02:47,040
<font color="#E5E5E5">download these slides at the same time</font>

58
00:02:44,700 --> 00:02:50,310
so<font color="#E5E5E5"> feel free to pull them down and look</font>

59
00:02:47,040 --> 00:02:58,200
ahead<font color="#E5E5E5"> and speculate about what's coming</font>

60
00:02:50,310 --> 00:02:59,550
<font color="#CCCCCC">in the future</font><font color="#E5E5E5"> thank you okay so um and I</font>

61
00:02:58,200 --> 00:03:01,649
<font color="#E5E5E5">like</font><font color="#CCCCCC"> just to ask a couple</font><font color="#E5E5E5"> of quick</font>

62
00:02:59,550 --> 00:03:03,959
<font color="#CCCCCC">questions so hands up if you have</font>

63
00:03:01,650 --> 00:03:08,670
studied<font color="#E5E5E5"> or looked at computer</font>

64
00:03:03,959 --> 00:03:10,050
architecture in the past<font color="#E5E5E5"> okay good</font><font color="#CCCCCC"> good</font>

65
00:03:08,670 --> 00:03:13,530
<font color="#E5E5E5">so the first half</font><font color="#CCCCCC"> of this is</font><font color="#E5E5E5"> going to go</font>

66
00:03:10,050 --> 00:03:17,250
really quickly<font color="#CCCCCC"> hands up if you have read</font>

67
00:03:13,530 --> 00:03:18,830
the paper<font color="#E5E5E5"> or papers relating to the</font>

68
00:03:17,250 --> 00:03:21,450
exploits I'm talking about<font color="#E5E5E5"> today</font>

69
00:03:18,830 --> 00:03:24,290
it's a good show of<font color="#E5E5E5"> hands hands up if</font>

70
00:03:21,450 --> 00:03:24,290
you think<font color="#E5E5E5"> you understood it</font>

71
00:03:24,500 --> 00:03:29,780
<font color="#CCCCCC">okay that's still a good</font><font color="#E5E5E5"> set of hands</font>

72
00:03:26,570 --> 00:03:31,670
<font color="#E5E5E5">there</font><font color="#CCCCCC"> I hands up if this is all fairly</font>

73
00:03:29,780 --> 00:03:34,250
<font color="#E5E5E5">new to you</font><font color="#CCCCCC"> and you would really benefit</font>

74
00:03:31,670 --> 00:03:38,869
<font color="#E5E5E5">from me walking through</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> in some level</font>

75
00:03:34,250 --> 00:03:40,430
of<font color="#CCCCCC"> detail</font><font color="#E5E5E5"> okay good so about</font><font color="#CCCCCC"> 50%</font><font color="#E5E5E5"> if you</font>

76
00:03:38,870 --> 00:03:44,000
think you know<font color="#CCCCCC"> everything I'm gonna say</font>

77
00:03:40,430 --> 00:03:47,420
<font color="#E5E5E5">and 50% of you are not sure so that's</font>

78
00:03:44,000 --> 00:03:51,020
that's a good<font color="#E5E5E5"> mix so today today's class</font>

79
00:03:47,420 --> 00:03:52,910
is going<font color="#E5E5E5"> to cover</font><font color="#CCCCCC"> I did take this from</font>

80
00:03:51,020 --> 00:03:55,460
the deck I showed at Stanford<font color="#CCCCCC"> so it was</font>

81
00:03:52,910 --> 00:03:56,990
a lecture<font color="#CCCCCC"> at that time today I'm going</font>

82
00:03:55,460 --> 00:04:00,620
<font color="#E5E5E5">to cover the difference between</font>

83
00:03:56,990 --> 00:04:02,990
architecture and<font color="#CCCCCC"> micro architecture some</font>

84
00:04:00,620 --> 00:04:04,400
some variations of micro architecture so

85
00:04:02,990 --> 00:04:07,010
what that means in<font color="#E5E5E5"> the real world</font><font color="#CCCCCC"> I'm</font>

86
00:04:04,400 --> 00:04:09,560
going<font color="#CCCCCC"> to talk</font><font color="#E5E5E5"> about caches and virtual</font>

87
00:04:07,010 --> 00:04:12,230
memory<font color="#CCCCCC"> and branch predictors which are</font>

88
00:04:09,560 --> 00:04:14,660
some<font color="#E5E5E5"> of the pieces that are you need to</font>

89
00:04:12,230 --> 00:04:17,690
exploit<font color="#E5E5E5"> to make these kinds of attacks</font>

90
00:04:14,660 --> 00:04:19,880
successful I'll talk about side channel

91
00:04:17,690 --> 00:04:22,580
<font color="#CCCCCC">analysis which is an interesting topic</font>

92
00:04:19,880 --> 00:04:25,360
in itself<font color="#CCCCCC"> and then I'll look at the</font>

93
00:04:22,580 --> 00:04:28,820
actual vulnerabilities<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you've seen</font>

94
00:04:25,360 --> 00:04:31,970
the mitigations we have for them<font color="#CCCCCC"> and</font>

95
00:04:28,820 --> 00:04:35,030
then finally some related research in

96
00:04:31,970 --> 00:04:40,610
into<font color="#CCCCCC"> Hardware exploits</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> maybe you</font>

97
00:04:35,030 --> 00:04:42,890
have not seen<font color="#CCCCCC"> before so architecture</font>

98
00:04:40,610 --> 00:04:44,530
versus<font color="#E5E5E5"> micro architecture for those of</font>

99
00:04:42,890 --> 00:04:47,240
you who are at the the risk<font color="#CCCCCC"> five</font>

100
00:04:44,530 --> 00:04:50,059
sessions<font color="#E5E5E5"> you probably saw similar</font>

101
00:04:47,240 --> 00:04:52,550
content already<font color="#CCCCCC"> but when we</font><font color="#E5E5E5"> talk about</font>

102
00:04:50,060 --> 00:04:54,080
<font color="#CCCCCC">computers</font><font color="#E5E5E5"> we have this concept of</font>

103
00:04:52,550 --> 00:04:57,740
architecture and<font color="#E5E5E5"> then architecture</font>

104
00:04:54,080 --> 00:04:59,900
describes<font color="#CCCCCC"> at an abstract level</font><font color="#E5E5E5"> how a</font>

105
00:04:57,740 --> 00:05:02,780
machine<font color="#E5E5E5"> operates and behaves so it</font>

106
00:04:59,900 --> 00:05:04,969
<font color="#CCCCCC">describes the kinds of primitive</font>

107
00:05:02,780 --> 00:05:06,979
instruction that the<font color="#CCCCCC"> Machine actually</font>

108
00:05:04,970 --> 00:05:08,810
<font color="#E5E5E5">executes the ones and zeros it executes</font>

109
00:05:06,979 --> 00:05:13,190
<font color="#E5E5E5">so when I see this particular sequence</font>

110
00:05:08,810 --> 00:05:15,440
<font color="#CCCCCC">do this</font><font color="#E5E5E5"> right describes how to load and</font>

111
00:05:13,190 --> 00:05:17,990
store values from memory it describes

112
00:05:15,440 --> 00:05:21,860
the<font color="#E5E5E5"> registers the</font><font color="#CCCCCC"> machine State that I</font>

113
00:05:17,990 --> 00:05:23,360
have and it describes various<font color="#E5E5E5"> modes of</font>

114
00:05:21,860 --> 00:05:25,610
operation privileged and unprivileged

115
00:05:23,360 --> 00:05:28,220
modes of operation we'll talk a<font color="#E5E5E5"> bit more</font>

116
00:05:25,610 --> 00:05:30,169
<font color="#E5E5E5">about in a moment</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then there's more</font>

117
00:05:28,220 --> 00:05:32,000
detail as well it describes memory

118
00:05:30,169 --> 00:05:34,010
models and other things<font color="#E5E5E5"> that you might</font>

119
00:05:32,000 --> 00:05:38,110
<font color="#E5E5E5">find very interesting</font><font color="#CCCCCC"> if you pursue</font>

120
00:05:34,010 --> 00:05:40,330
architecture<font color="#CCCCCC"> we also have</font>

121
00:05:38,110 --> 00:05:42,849
some software concepts we care about so

122
00:05:40,330 --> 00:05:46,960
<font color="#CCCCCC">if we</font><font color="#E5E5E5"> are Linux programmers or BSD</font>

123
00:05:42,849 --> 00:05:49,360
program is we care about running

124
00:05:46,960 --> 00:05:51,669
programs known as processes or tasks

125
00:05:49,360 --> 00:05:53,050
<font color="#E5E5E5">when they're</font><font color="#CCCCCC"> running and we care about</font>

126
00:05:51,669 --> 00:05:55,359
<font color="#CCCCCC">the fact that they execute</font><font color="#E5E5E5"> at different</font>

127
00:05:53,050 --> 00:05:57,520
<font color="#E5E5E5">privilege levels right so applications</font>

128
00:05:55,360 --> 00:05:59,770
<font color="#E5E5E5">are less privileged</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> the operating</font>

129
00:05:57,520 --> 00:06:01,840
<font color="#E5E5E5">system applications run in something we</font>

130
00:05:59,770 --> 00:06:05,020
<font color="#E5E5E5">call user mode and we have various</font>

131
00:06:01,840 --> 00:06:06,520
<font color="#E5E5E5">abstractions that protect them from</font>

132
00:06:05,020 --> 00:06:08,830
corrupting one another and from

133
00:06:06,520 --> 00:06:10,330
corrupting the kernel right<font color="#E5E5E5"> so we have</font>

134
00:06:08,830 --> 00:06:13,448
this virtual<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> environment we</font>

135
00:06:10,330 --> 00:06:15,520
define so that our application<font color="#E5E5E5"> sees this</font>

136
00:06:13,449 --> 00:06:16,620
nice flat<font color="#E5E5E5"> view of memory it thinks it's</font>

137
00:06:15,520 --> 00:06:20,620
the only<font color="#E5E5E5"> thing running on the machine</font>

138
00:06:16,620 --> 00:06:23,500
<font color="#CCCCCC">unless we tell otherwise and it has it</font>

139
00:06:20,620 --> 00:06:26,110
requests services from the OS kernel

140
00:06:23,500 --> 00:06:27,759
<font color="#E5E5E5">when it wants something performed it</font>

141
00:06:26,110 --> 00:06:29,830
doesn't explicitly<font color="#E5E5E5"> have knowledge of</font>

142
00:06:27,759 --> 00:06:31,990
other programs running<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> machine</font>

143
00:06:29,830 --> 00:06:34,330
<font color="#CCCCCC">you can find that out</font><font color="#E5E5E5"> it could ask the</font>

144
00:06:31,990 --> 00:06:36,039
kernel<font color="#E5E5E5"> but as far as its</font><font color="#CCCCCC"> concerned it</font>

145
00:06:34,330 --> 00:06:40,960
has<font color="#CCCCCC"> a view of memory that's all to</font>

146
00:06:36,039 --> 00:06:43,990
itself the OS<font color="#E5E5E5"> on the other hand has a</font>

147
00:06:40,960 --> 00:06:47,318
privileged set of architecture

148
00:06:43,990 --> 00:06:49,270
instructions and it<font color="#E5E5E5"> uses these to manage</font>

149
00:06:47,319 --> 00:06:51,370
the state to manage the context of the

150
00:06:49,270 --> 00:06:54,490
running programs and to switch between

151
00:06:51,370 --> 00:06:56,830
them<font color="#E5E5E5"> so when you get what's called a</font>

152
00:06:54,490 --> 00:06:59,229
hardware<font color="#E5E5E5"> interrupt</font><font color="#CCCCCC"> when you get some</font>

153
00:06:56,830 --> 00:07:01,180
event<font color="#E5E5E5"> coming in or otherwise need to</font>

154
00:06:59,229 --> 00:07:03,550
switch from<font color="#CCCCCC"> one program to another to</font>

155
00:07:01,180 --> 00:07:04,750
give the user<font color="#CCCCCC"> the illusion that lots of</font>

156
00:07:03,550 --> 00:07:07,630
<font color="#E5E5E5">things are running</font><font color="#CCCCCC"> at the</font><font color="#E5E5E5"> same time</font>

157
00:07:04,750 --> 00:07:09,310
<font color="#E5E5E5">that's what the kernel is doing it's</font>

158
00:07:07,630 --> 00:07:13,240
<font color="#E5E5E5">using these interfaces to save and</font>

159
00:07:09,310 --> 00:07:16,240
restore<font color="#E5E5E5"> the context of programs examples</font>

160
00:07:13,240 --> 00:07:18,969
of computer architectures<font color="#E5E5E5"> obviously I</font>

161
00:07:16,240 --> 00:07:21,430
have to<font color="#CCCCCC"> mention x86 first</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> I think</font>

162
00:07:18,969 --> 00:07:23,409
<font color="#E5E5E5">everyone here</font><font color="#CCCCCC"> knows what x86 is I could</font>

163
00:07:21,430 --> 00:07:24,940
<font color="#E5E5E5">have put RISC 5 as the second one I</font>

164
00:07:23,409 --> 00:07:28,750
decided not to I think<font color="#CCCCCC"> you guys</font><font color="#E5E5E5"> have</font>

165
00:07:24,940 --> 00:07:30,699
heard of that too<font color="#E5E5E5"> but these two these</font>

166
00:07:28,750 --> 00:07:32,849
are<font color="#E5E5E5"> two</font><font color="#CCCCCC"> examples of architectures so you</font>

167
00:07:30,699 --> 00:07:36,279
know x86<font color="#E5E5E5"> it's a bit older than</font><font color="#CCCCCC"> the</font>

168
00:07:32,849 --> 00:07:38,469
<font color="#CCCCCC">64-bit ARM architecture they both have</font>

169
00:07:36,279 --> 00:07:40,389
instructions<font color="#CCCCCC"> one of them</font><font color="#E5E5E5"> takes complex</font>

170
00:07:38,469 --> 00:07:42,430
instructions one of them has simpler

171
00:07:40,389 --> 00:07:45,370
<font color="#CCCCCC">instructions</font><font color="#E5E5E5"> they both</font><font color="#CCCCCC"> operate on</font>

172
00:07:42,430 --> 00:07:47,380
registers and they both have a<font color="#E5E5E5"> 64-bit</font>

173
00:07:45,370 --> 00:07:49,300
memory model they can<font color="#E5E5E5"> both use large</font>

174
00:07:47,380 --> 00:07:50,039
<font color="#CCCCCC">amounts of memory</font><font color="#E5E5E5"> and provide that to</font>

175
00:07:49,300 --> 00:07:52,110
application

176
00:07:50,039 --> 00:07:54,860
<font color="#E5E5E5">there's some differences but you</font><font color="#CCCCCC"> know at</font>

177
00:07:52,110 --> 00:07:58,889
a high<font color="#CCCCCC"> level we can compare the two</font>

178
00:07:54,860 --> 00:08:02,219
<font color="#E5E5E5">let's talk about microarchitecture so</font>

179
00:07:58,889 --> 00:08:05,069
cool detour<font color="#E5E5E5"> I'm a very bad graphic</font>

180
00:08:02,219 --> 00:08:07,639
designer<font color="#CCCCCC"> right</font><font color="#E5E5E5"> so you know don't</font><font color="#CCCCCC"> ever</font>

181
00:08:05,069 --> 00:08:12,330
<font color="#CCCCCC">come to me if you</font><font color="#E5E5E5"> want something pretty</font>

182
00:08:07,639 --> 00:08:13,830
<font color="#CCCCCC">here's a picture</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> a chip and and the</font>

183
00:08:12,330 --> 00:08:17,849
thing I'm trying<font color="#E5E5E5"> to sort</font><font color="#CCCCCC"> of represent</font>

184
00:08:13,830 --> 00:08:21,119
here<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> a modern processor</font><font color="#CCCCCC"> as we</font>

185
00:08:17,849 --> 00:08:23,610
think of it is actually you know it's

186
00:08:21,119 --> 00:08:24,990
not just<font color="#E5E5E5"> one</font><font color="#CCCCCC"> little CPU doing something</font>

187
00:08:23,610 --> 00:08:25,589
it's not how we used to<font color="#E5E5E5"> think of it</font>

188
00:08:24,990 --> 00:08:28,559
years ago

189
00:08:25,589 --> 00:08:31,379
<font color="#CCCCCC">a typical chip</font><font color="#E5E5E5"> and even your laptop or</font>

190
00:08:28,559 --> 00:08:33,089
your<font color="#CCCCCC"> phone will have many cores</font><font color="#E5E5E5"> we used</font>

191
00:08:31,379 --> 00:08:34,860
to<font color="#E5E5E5"> think of these as processors back in</font>

192
00:08:33,089 --> 00:08:36,690
the day but<font color="#CCCCCC"> there are many different</font>

193
00:08:34,860 --> 00:08:38,909
cores and each one might be<font color="#E5E5E5"> running a</font>

194
00:08:36,690 --> 00:08:40,860
process<font color="#E5E5E5"> or or several of them together</font>

195
00:08:38,909 --> 00:08:43,708
<font color="#E5E5E5">might be running threads in a process</font>

196
00:08:40,860 --> 00:08:44,880
they're all connected<font color="#CCCCCC"> together on the</font>

197
00:08:43,708 --> 00:08:47,010
chip<font color="#E5E5E5"> and they have these</font>

198
00:08:44,880 --> 00:08:49,350
<font color="#E5E5E5">high-performance interconnects so</font><font color="#CCCCCC"> on</font>

199
00:08:47,010 --> 00:08:53,610
<font color="#E5E5E5">here you can</font><font color="#CCCCCC"> see I've got</font><font color="#E5E5E5"> one two three</font>

200
00:08:49,350 --> 00:08:56,160
<font color="#CCCCCC">four five six</font><font color="#E5E5E5"> seven</font><font color="#CCCCCC"> eight cores and they</font>

201
00:08:53,610 --> 00:08:58,470
have shared<font color="#CCCCCC"> access to some of the</font>

202
00:08:56,160 --> 00:09:01,469
resources<font color="#CCCCCC"> so</font><font color="#E5E5E5"> there's a memory interface</font>

203
00:08:58,470 --> 00:09:04,470
on each side of<font color="#CCCCCC"> my chip and whenever</font><font color="#E5E5E5"> I</font>

204
00:09:01,470 --> 00:09:07,019
want<font color="#E5E5E5"> to load something from memory into</font>

205
00:09:04,470 --> 00:09:09,540
<font color="#E5E5E5">my one of my cores to do some processing</font>

206
00:09:07,019 --> 00:09:11,160
<font color="#CCCCCC">it's gonna come in through</font><font color="#E5E5E5"> the external</font>

207
00:09:09,540 --> 00:09:13,620
<font color="#CCCCCC">memory interface and it's gonna</font><font color="#E5E5E5"> work its</font>

208
00:09:11,160 --> 00:09:15,060
way<font color="#CCCCCC"> up through levels of cache we're</font>

209
00:09:13,620 --> 00:09:17,160
gonna talk more<font color="#CCCCCC"> about that</font><font color="#E5E5E5"> in a minute</font>

210
00:09:15,060 --> 00:09:21,560
but<font color="#CCCCCC"> just have</font><font color="#E5E5E5"> this have this picture in</font>

211
00:09:17,160 --> 00:09:24,240
<font color="#CCCCCC">your</font><font color="#E5E5E5"> head</font><font color="#CCCCCC"> and we'll talk a</font><font color="#E5E5E5"> bit more so</font>

212
00:09:21,560 --> 00:09:27,388
programmers think<font color="#E5E5E5"> of processors but they</font>

213
00:09:24,240 --> 00:09:29,069
really mean cores<font color="#CCCCCC"> we have these</font><font color="#E5E5E5"> systems</font>

214
00:09:27,389 --> 00:09:30,389
formed from you know many<font color="#E5E5E5"> different</font>

215
00:09:29,069 --> 00:09:36,089
<font color="#E5E5E5">pieces and</font><font color="#CCCCCC"> they all</font><font color="#E5E5E5"> have to work</font>

216
00:09:30,389 --> 00:09:39,779
<font color="#CCCCCC">together microarchitecture refers to an</font>

217
00:09:36,089 --> 00:09:43,430
<font color="#CCCCCC">implementation</font><font color="#E5E5E5"> of an architecture right</font>

218
00:09:39,779 --> 00:09:46,290
so we've<font color="#CCCCCC"> defined</font><font color="#E5E5E5"> a high level x86 or arm</font>

219
00:09:43,430 --> 00:09:49,560
instruction set<font color="#E5E5E5"> architecture we've said</font>

220
00:09:46,290 --> 00:09:54,949
<font color="#E5E5E5">this is what an x86 machine has to</font>

221
00:09:49,560 --> 00:09:57,180
comply with and a specific<font color="#E5E5E5"> x86 machine</font>

222
00:09:54,949 --> 00:09:59,069
might be<font color="#E5E5E5"> implemented differently from</font>

223
00:09:57,180 --> 00:10:02,099
<font color="#E5E5E5">another one</font><font color="#CCCCCC"> as long</font><font color="#E5E5E5"> as they can run the</font>

224
00:09:59,069 --> 00:10:03,748
same instructions<font color="#E5E5E5"> the implementation</font><font color="#CCCCCC"> can</font>

225
00:10:02,100 --> 00:10:05,819
differ

226
00:10:03,749 --> 00:10:07,289
and some example differences can include

227
00:10:05,819 --> 00:10:09,329
what we'll talk<font color="#CCCCCC"> about in a moment in</font>

228
00:10:07,289 --> 00:10:11,729
order machines out of<font color="#E5E5E5"> order machines</font>

229
00:10:09,329 --> 00:10:15,649
<font color="#E5E5E5">lots of differences can exist at a</font>

230
00:10:11,729 --> 00:10:18,899
microarchitecture level for example

231
00:10:15,649 --> 00:10:22,469
<font color="#E5E5E5">simpler processors are often described</font>

232
00:10:18,899 --> 00:10:24,629
as<font color="#E5E5E5"> being</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> order machines</font><font color="#CCCCCC"> and if you're</font>

233
00:10:22,469 --> 00:10:26,219
not familiar with computer

234
00:10:24,629 --> 00:10:29,189
microarchitecture this might be how you

235
00:10:26,219 --> 00:10:31,559
think<font color="#E5E5E5"> of a processor when it's running</font>

236
00:10:29,189 --> 00:10:33,569
your code<font color="#CCCCCC"> so when you are when your</font>

237
00:10:31,559 --> 00:10:35,848
<font color="#E5E5E5">program is running</font><font color="#CCCCCC"> every single</font>

238
00:10:33,569 --> 00:10:37,858
instruction<font color="#E5E5E5"> every single operation in</font>

239
00:10:35,849 --> 00:10:39,329
your program<font color="#CCCCCC"> what it will do is one</font>

240
00:10:37,859 --> 00:10:41,729
after the other<font color="#E5E5E5"> it will fetch the</font>

241
00:10:39,329 --> 00:10:42,419
instruction it will decode figure out

242
00:10:41,729 --> 00:10:44,879
what it does

243
00:10:42,419 --> 00:10:47,249
and it will execute<font color="#E5E5E5"> that instruction and</font>

244
00:10:44,879 --> 00:10:53,819
it will rinse and repeat that one<font color="#E5E5E5"> after</font>

245
00:10:47,249 --> 00:10:55,679
the other the this<font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> example is is</font>

246
00:10:53,819 --> 00:10:58,009
kind of<font color="#E5E5E5"> your</font><font color="#CCCCCC"> classic RISC machine if you</font>

247
00:10:55,679 --> 00:11:01,619
would<font color="#E5E5E5"> have take a simple RISC</font><font color="#CCCCCC"> five</font>

248
00:10:58,009 --> 00:11:03,539
machine for example<font color="#CCCCCC"> it probably will</font>

249
00:11:01,619 --> 00:11:05,549
start out there are<font color="#E5E5E5"> some more more</font>

250
00:11:03,539 --> 00:11:07,468
performant implementations but it will

251
00:11:05,549 --> 00:11:11,789
probably<font color="#E5E5E5"> start out as a simple</font><font color="#CCCCCC"> inorder</font>

252
00:11:07,469 --> 00:11:14,509
machine<font color="#CCCCCC"> and what we might do is we might</font>

253
00:11:11,789 --> 00:11:16,829
add some<font color="#E5E5E5"> features like pipelining so</font>

254
00:11:14,509 --> 00:11:19,589
instead of having I mentioned the

255
00:11:16,829 --> 00:11:21,539
different stages there before<font color="#E5E5E5"> we might</font>

256
00:11:19,589 --> 00:11:24,509
overlap them a bit<font color="#E5E5E5"> we might say I</font>

257
00:11:21,539 --> 00:11:26,039
fetched one instruction<font color="#CCCCCC"> I start with</font>

258
00:11:24,509 --> 00:11:28,019
<font color="#E5E5E5">figuring out what it</font><font color="#CCCCCC"> does and</font><font color="#E5E5E5"> I'm</font>

259
00:11:26,039 --> 00:11:29,848
already fetching the<font color="#CCCCCC"> next one</font><font color="#E5E5E5"> and I get</font>

260
00:11:28,019 --> 00:11:32,269
a little<font color="#E5E5E5"> bit of parallelism</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> you can</font>

261
00:11:29,849 --> 00:11:34,439
see here I might have five instructions

262
00:11:32,269 --> 00:11:37,169
<font color="#E5E5E5">working my working their way through the</font>

263
00:11:34,439 --> 00:11:39,659
machine<font color="#CCCCCC"> at</font><font color="#E5E5E5"> different stages right that's</font>

264
00:11:37,169 --> 00:11:42,239
called pipelining<font color="#CCCCCC"> that's when I</font><font color="#E5E5E5"> split</font>

265
00:11:39,659 --> 00:11:44,789
out how my machine executes instructions

266
00:11:42,239 --> 00:11:49,049
into<font color="#E5E5E5"> smaller</font><font color="#CCCCCC"> steps it still does them</font>

267
00:11:44,789 --> 00:11:53,149
one after<font color="#CCCCCC"> the other though in order</font>

268
00:11:49,049 --> 00:11:56,519
<font color="#CCCCCC">machines are easier to</font><font color="#E5E5E5"> implement and</font>

269
00:11:53,149 --> 00:12:00,299
they're much<font color="#E5E5E5"> more</font><font color="#CCCCCC"> efficient in some</font><font color="#E5E5E5"> ways</font>

270
00:11:56,519 --> 00:12:02,699
for a power perspective<font color="#E5E5E5"> right so I'm not</font>

271
00:12:00,299 --> 00:12:05,459
<font color="#E5E5E5">going to get very</font><font color="#CCCCCC"> high performance but</font>

272
00:12:02,699 --> 00:12:07,889
I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> need potentially less power</font>

273
00:12:05,459 --> 00:12:09,868
<font color="#CCCCCC">so that's why you tend to</font><font color="#E5E5E5"> get those in</font>

274
00:12:07,889 --> 00:12:12,479
<font color="#E5E5E5">in little widgets and they'll also use</font>

275
00:12:09,869 --> 00:12:15,479
<font color="#E5E5E5">less area they physically are smaller to</font>

276
00:12:12,479 --> 00:12:16,360
build but they're<font color="#CCCCCC"> susceptible to things</font>

277
00:12:15,479 --> 00:12:20,290
<font color="#E5E5E5">like pipeline</font>

278
00:12:16,360 --> 00:12:22,540
<font color="#CCCCCC">Stoll's so if i'm working my way through</font>

279
00:12:20,290 --> 00:12:25,000
the<font color="#E5E5E5"> different stages</font><font color="#CCCCCC"> of running</font>

280
00:12:22,540 --> 00:12:26,019
instructions<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I'm trying to load</font>

281
00:12:25,000 --> 00:12:28,540
something<font color="#E5E5E5"> from memory</font>

282
00:12:26,019 --> 00:12:31,950
I might have to stall<font color="#CCCCCC"> my machine while I</font>

283
00:12:28,540 --> 00:12:35,110
wait for<font color="#E5E5E5"> some data to</font><font color="#CCCCCC"> become available</font>

284
00:12:31,950 --> 00:12:39,000
<font color="#CCCCCC">they've got a limited capacity to hide</font>

285
00:12:35,110 --> 00:12:43,149
the latency of instructions<font color="#CCCCCC"> as a result</font>

286
00:12:39,000 --> 00:12:46,720
now what I can also have is an

287
00:12:43,149 --> 00:12:48,220
<font color="#CCCCCC">out-of-order machine right</font><font color="#E5E5E5"> now this is</font>

288
00:12:46,720 --> 00:12:50,529
very<font color="#CCCCCC"> different from what you</font><font color="#E5E5E5"> as a</font>

289
00:12:48,220 --> 00:12:53,410
programmer are thinking of so when you

290
00:12:50,529 --> 00:12:56,260
<font color="#E5E5E5">write a program you think I do</font><font color="#CCCCCC"> this and</font>

291
00:12:53,410 --> 00:12:58,569
then<font color="#E5E5E5"> I do this and then I do this but</font>

292
00:12:56,260 --> 00:13:01,120
what the industry<font color="#CCCCCC"> has done is spent the</font>

293
00:12:58,570 --> 00:13:05,709
last few decades<font color="#E5E5E5"> working</font><font color="#CCCCCC"> out how to take</font>

294
00:13:01,120 --> 00:13:08,769
your program that has a<font color="#E5E5E5"> defined sequence</font>

295
00:13:05,709 --> 00:13:11,229
of operations and to<font color="#E5E5E5"> automatically</font><font color="#CCCCCC"> work</font>

296
00:13:08,769 --> 00:13:13,089
out dependencies inside<font color="#E5E5E5"> your program so</font>

297
00:13:11,230 --> 00:13:14,440
here's a<font color="#CCCCCC"> simple program</font><font color="#E5E5E5"> I'm allowed to</font>

298
00:13:13,089 --> 00:13:17,170
values I'm going<font color="#CCCCCC"> to add</font><font color="#E5E5E5"> them together</font>

299
00:13:14,440 --> 00:13:20,560
<font color="#E5E5E5">and here I'm gonna load two valleys and</font>

300
00:13:17,170 --> 00:13:23,140
add them together<font color="#E5E5E5"> those of you who are</font>

301
00:13:20,560 --> 00:13:23,949
<font color="#E5E5E5">familiar with assembly language will see</font>

302
00:13:23,140 --> 00:13:26,680
that<font color="#E5E5E5"> I'm using</font>

303
00:13:23,949 --> 00:13:28,870
registers inside my machine<font color="#E5E5E5"> I'm set I'm</font>

304
00:13:26,680 --> 00:13:30,069
loading register<font color="#CCCCCC"> 1 register 2 I'm</font>

305
00:13:28,870 --> 00:13:31,899
storing the result of<font color="#E5E5E5"> adding them</font>

306
00:13:30,070 --> 00:13:33,820
together in register 3<font color="#E5E5E5"> and here I'm</font>

307
00:13:31,899 --> 00:13:36,490
<font color="#CCCCCC">doing the same load register one load</font>

308
00:13:33,820 --> 00:13:38,860
register to add them together but<font color="#E5E5E5"> these</font>

309
00:13:36,490 --> 00:13:41,620
two sections here<font color="#E5E5E5"> they're actually</font>

310
00:13:38,860 --> 00:13:43,449
<font color="#E5E5E5">independent I could renumber these and</font>

311
00:13:41,620 --> 00:13:46,899
use<font color="#E5E5E5"> different registers there's no</font>

312
00:13:43,449 --> 00:13:48,689
reason that<font color="#E5E5E5"> I have to have the same</font>

313
00:13:46,899 --> 00:13:52,120
<font color="#E5E5E5">register numbers here that you see above</font>

314
00:13:48,690 --> 00:13:55,570
you know in a simple machine<font color="#CCCCCC"> it might</font>

315
00:13:52,120 --> 00:13:59,110
run through that program<font color="#E5E5E5"> and execute it</font>

316
00:13:55,570 --> 00:14:01,180
<font color="#E5E5E5">exactly as</font><font color="#CCCCCC"> you see here in a</font><font color="#E5E5E5"> more</font>

317
00:13:59,110 --> 00:14:03,250
<font color="#E5E5E5">complex machine</font><font color="#CCCCCC"> what it might do is work</font>

318
00:14:01,180 --> 00:14:05,800
out well<font color="#E5E5E5"> actually these two sections are</font>

319
00:14:03,250 --> 00:14:07,360
completely<font color="#CCCCCC"> independent and the only</font>

320
00:14:05,800 --> 00:14:09,310
<font color="#E5E5E5">thing they share is that they're</font><font color="#CCCCCC"> using</font>

321
00:14:07,360 --> 00:14:12,880
the<font color="#E5E5E5"> same registers but</font><font color="#CCCCCC"> I could actually</font>

322
00:14:09,310 --> 00:14:15,040
change<font color="#E5E5E5"> that so behind the scenes what an</font>

323
00:14:12,880 --> 00:14:18,250
out-of-order machine will do is it will

324
00:14:15,040 --> 00:14:20,769
<font color="#E5E5E5">reorder all of these instructions it's</font>

325
00:14:18,250 --> 00:14:23,829
called dynamic execution<font color="#E5E5E5"> what it will do</font>

326
00:14:20,769 --> 00:14:26,680
is it will<font color="#E5E5E5"> say</font><font color="#CCCCCC"> actually the moment</font><font color="#E5E5E5"> that</font>

327
00:14:23,829 --> 00:14:29,229
these values<font color="#E5E5E5"> are available</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> can run</font>

328
00:14:26,680 --> 00:14:29,829
this instruction<font color="#E5E5E5"> and then what it will</font>

329
00:14:29,230 --> 00:14:31,570
do

330
00:14:29,830 --> 00:14:33,310
is something called<font color="#CCCCCC"> inorder retirement</font>

331
00:14:31,570 --> 00:14:35,680
<font color="#E5E5E5">so you start with your program that does</font>

332
00:14:33,310 --> 00:14:38,140
one thing followed by another<font color="#E5E5E5"> you turn</font>

333
00:14:35,680 --> 00:14:41,620
it into what looks a bit like<font color="#CCCCCC"> a dataflow</font>

334
00:14:38,140 --> 00:14:43,840
<font color="#E5E5E5">machine and then you</font><font color="#CCCCCC"> do in</font><font color="#E5E5E5"> order</font>

335
00:14:41,620 --> 00:14:45,940
retirement<font color="#E5E5E5"> so at the end when you've</font>

336
00:14:43,840 --> 00:14:49,990
worked<font color="#E5E5E5"> out your results</font><font color="#CCCCCC"> you keep track</font>

337
00:14:45,940 --> 00:14:52,150
<font color="#E5E5E5">of</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> you are and you say okay I</font><font color="#CCCCCC"> have</font>

338
00:14:49,990 --> 00:14:54,610
I<font color="#E5E5E5"> maybe I may actually be executing this</font>

339
00:14:52,150 --> 00:14:58,300
stuff here before this stuff here but

340
00:14:54,610 --> 00:15:00,070
I'm gonna<font color="#E5E5E5"> wait</font><font color="#CCCCCC"> and I'm gonna retire</font><font color="#E5E5E5"> only</font>

341
00:14:58,300 --> 00:15:02,170
in the sequence<font color="#E5E5E5"> the programmer expects</font>

342
00:15:00,070 --> 00:15:04,840
so you as a programmer are not aware<font color="#CCCCCC"> of</font>

343
00:15:02,170 --> 00:15:06,699
this happening<font color="#E5E5E5"> and then there's some</font>

344
00:15:04,840 --> 00:15:08,620
complex machinery that's added for

345
00:15:06,700 --> 00:15:11,440
exception handling<font color="#CCCCCC"> so if something</font>

346
00:15:08,620 --> 00:15:14,320
erroneous happens<font color="#E5E5E5"> during execution</font><font color="#CCCCCC"> I</font>

347
00:15:11,440 --> 00:15:16,330
might have to back up<font color="#E5E5E5"> what's happening</font>

348
00:15:14,320 --> 00:15:19,270
inside<font color="#E5E5E5"> the</font><font color="#CCCCCC"> machine</font><font color="#E5E5E5"> and present it to</font><font color="#CCCCCC"> the</font>

349
00:15:16,330 --> 00:15:22,090
<font color="#E5E5E5">programmer in a consistent order and say</font>

350
00:15:19,270 --> 00:15:23,680
well you had a failure here<font color="#CCCCCC"> and that</font>

351
00:15:22,090 --> 00:15:25,540
<font color="#E5E5E5">that is</font><font color="#CCCCCC"> actually I'm presenting it</font><font color="#E5E5E5"> to</font>

352
00:15:23,680 --> 00:15:29,050
<font color="#E5E5E5">you in the order</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> would have happened</font>

353
00:15:25,540 --> 00:15:31,480
<font color="#E5E5E5">from your point</font><font color="#CCCCCC"> of view</font><font color="#E5E5E5"> so this is very</font>

354
00:15:29,050 --> 00:15:34,540
complicated<font color="#CCCCCC"> I want you to understand</font>

355
00:15:31,480 --> 00:15:36,030
though that machines<font color="#E5E5E5"> that you have even</font>

356
00:15:34,540 --> 00:15:39,040
<font color="#CCCCCC">on</font><font color="#E5E5E5"> your laptop in front of you right now</font>

357
00:15:36,030 --> 00:15:42,010
<font color="#E5E5E5">may</font><font color="#CCCCCC"> actually be executing programs in a</font>

358
00:15:39,040 --> 00:15:43,420
completely<font color="#E5E5E5"> different sequence from how</font>

359
00:15:42,010 --> 00:15:47,290
they were written<font color="#E5E5E5"> or how you imagined</font>

360
00:15:43,420 --> 00:15:50,620
that<font color="#CCCCCC"> they would work out of other</font>

361
00:15:47,290 --> 00:15:52,949
<font color="#E5E5E5">machines are very common in</font>

362
00:15:50,620 --> 00:15:56,860
high-performance microprocessors

363
00:15:52,950 --> 00:15:59,470
the concept was invented by a gentleman

364
00:15:56,860 --> 00:16:00,730
<font color="#CCCCCC">called Robert</font><font color="#E5E5E5"> to Tomasulo who</font>

365
00:15:59,470 --> 00:16:02,440
unfortunately passed<font color="#E5E5E5"> away a</font><font color="#CCCCCC"> couple of</font>

366
00:16:00,730 --> 00:16:05,200
<font color="#E5E5E5">years ago and it would be</font><font color="#CCCCCC"> interesting if</font>

367
00:16:02,440 --> 00:16:09,280
he<font color="#E5E5E5"> could see kind</font><font color="#CCCCCC"> of a</font><font color="#E5E5E5"> media attention</font>

368
00:16:05,200 --> 00:16:11,500
<font color="#CCCCCC">recently</font><font color="#E5E5E5"> and and get his insight right</font>

369
00:16:09,280 --> 00:16:13,030
because what<font color="#CCCCCC"> people have done I'll talk</font>

370
00:16:11,500 --> 00:16:15,520
more about speculation and how that

371
00:16:13,030 --> 00:16:16,990
builds on this<font color="#E5E5E5"> in a</font><font color="#CCCCCC"> moment</font><font color="#E5E5E5"> but what</font>

372
00:16:15,520 --> 00:16:18,730
<font color="#CCCCCC">people have done</font><font color="#E5E5E5"> is they've said well</font>

373
00:16:16,990 --> 00:16:21,280
this<font color="#E5E5E5"> whole thing doesn't work</font><font color="#CCCCCC"> actually</font>

374
00:16:18,730 --> 00:16:24,340
<font color="#CCCCCC">it does it's working exactly</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> designed</font>

375
00:16:21,280 --> 00:16:27,910
<font color="#CCCCCC">there just</font><font color="#E5E5E5"> can be some flaws in specific</font>

376
00:16:24,340 --> 00:16:30,850
implementations of this but Tomasulo

377
00:16:27,910 --> 00:16:32,650
invented this<font color="#E5E5E5"> back forth and keeping out</font>

378
00:16:30,850 --> 00:16:35,530
of<font color="#E5E5E5"> the time because this is gonna go</font>

379
00:16:32,650 --> 00:16:39,939
along<font color="#E5E5E5"> otherwise</font><font color="#CCCCCC"> he invented this for the</font>

380
00:16:35,530 --> 00:16:42,490
mainframe<font color="#CCCCCC"> the s3</font><font color="#E5E5E5"> the 360 model 91</font><font color="#CCCCCC"> so</font>

381
00:16:39,940 --> 00:16:43,740
quite a long<font color="#E5E5E5"> time ago and then over time</font>

382
00:16:42,490 --> 00:16:47,800
it's worked its way down

383
00:16:43,740 --> 00:16:49,750
into computers that you have on your

384
00:16:47,800 --> 00:16:52,380
desktop on<font color="#CCCCCC"> your laptop and in most</font>

385
00:16:49,750 --> 00:16:55,810
<font color="#E5E5E5">phones as well and as I said</font>

386
00:16:52,380 --> 00:16:58,750
<font color="#E5E5E5">instructions are dispatched from an</font>

387
00:16:55,810 --> 00:17:00,400
<font color="#CCCCCC">inorder front-end as we call it they're</font>

388
00:16:58,750 --> 00:17:03,370
executed in this out of<font color="#E5E5E5"> order machine</font>

389
00:17:00,400 --> 00:17:07,329
<font color="#E5E5E5">and then they retired back in sequence</font>

390
00:17:03,370 --> 00:17:11,470
and the size of the structure<font color="#E5E5E5"> I alluded</font>

391
00:17:07,329 --> 00:17:14,020
to<font color="#E5E5E5"> here</font><font color="#CCCCCC"> detect eighths how many of these</font>

392
00:17:11,470 --> 00:17:17,140
instructions<font color="#CCCCCC"> I can have out of order at</font>

393
00:17:14,020 --> 00:17:21,129
a single moment<font color="#CCCCCC"> and these can be quite</font>

394
00:17:17,140 --> 00:17:24,420
large<font color="#E5E5E5"> so in a contemporary machine</font><font color="#CCCCCC"> for</font>

395
00:17:21,130 --> 00:17:27,010
<font color="#E5E5E5">example a skylake processor recent x86</font>

396
00:17:24,420 --> 00:17:29,650
implementation from Intel well the

397
00:17:27,010 --> 00:17:33,160
skylake microarchitecture has a<font color="#CCCCCC"> reloaded</font>

398
00:17:29,650 --> 00:17:34,930
buffer that's<font color="#CCCCCC"> 224 entries long so that's</font>

399
00:17:33,160 --> 00:17:38,530
quite<font color="#E5E5E5"> a few instructions I might be</font>

400
00:17:34,930 --> 00:17:40,180
ahead<font color="#E5E5E5"> at any one moment</font><font color="#CCCCCC"> that's a lot of</font>

401
00:17:38,530 --> 00:17:41,680
housekeeping<font color="#E5E5E5"> they have to do that's why</font>

402
00:17:40,180 --> 00:17:43,900
these things<font color="#CCCCCC"> are very</font><font color="#E5E5E5"> very complicated</font>

403
00:17:41,680 --> 00:17:46,540
<font color="#CCCCCC">you should also know the average</font><font color="#E5E5E5"> one of</font>

404
00:17:43,900 --> 00:17:50,980
these processors costs about<font color="#E5E5E5"> a billion</font>

405
00:17:46,540 --> 00:17:53,590
dollars<font color="#E5E5E5"> takes about four years</font><font color="#CCCCCC"> and needs</font>

406
00:17:50,980 --> 00:17:56,290
at least<font color="#CCCCCC"> 300 people just for the basic</font>

407
00:17:53,590 --> 00:17:59,590
design<font color="#E5E5E5"> right that's why you don't have</font>

408
00:17:56,290 --> 00:18:01,510
<font color="#E5E5E5">open source you</font><font color="#CCCCCC"> have open source out of</font>

409
00:17:59,590 --> 00:18:05,350
<font color="#CCCCCC">order machines but one reason we</font><font color="#E5E5E5"> haven't</font>

410
00:18:01,510 --> 00:18:07,690
yet seen<font color="#CCCCCC"> xeon</font><font color="#E5E5E5"> class open source</font><font color="#CCCCCC"> design</font>

411
00:18:05,350 --> 00:18:09,399
is frankly the<font color="#E5E5E5"> amount of cost</font><font color="#CCCCCC"> that</font>

412
00:18:07,690 --> 00:18:10,960
someone has to throw it<font color="#E5E5E5"> doing that</font><font color="#CCCCCC"> it's</font>

413
00:18:09,400 --> 00:18:15,280
not<font color="#CCCCCC"> to say it won't</font><font color="#E5E5E5"> happen but it's very</font>

414
00:18:10,960 --> 00:18:18,940
very<font color="#E5E5E5"> complicated and very expensive</font><font color="#CCCCCC"> I'm</font>

415
00:18:15,280 --> 00:18:20,170
gonna skip I'm gonna skip oh well and

416
00:18:18,940 --> 00:18:21,190
this last slide<font color="#E5E5E5"> here</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> talks that</font>

417
00:18:20,170 --> 00:18:23,790
there are lots of<font color="#E5E5E5"> questions you can</font><font color="#CCCCCC"> ask</font>

418
00:18:21,190 --> 00:18:26,680
<font color="#CCCCCC">about architecture right so I have an</font>

419
00:18:23,790 --> 00:18:29,860
<font color="#E5E5E5">architecture specification for example</font>

420
00:18:26,680 --> 00:18:32,380
x86<font color="#CCCCCC"> I then</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> how I implement</font>

421
00:18:29,860 --> 00:18:34,149
<font color="#E5E5E5">that right when I'm executing my</font>

422
00:18:32,380 --> 00:18:35,650
instructions do<font color="#E5E5E5"> I do them in order do I</font>

423
00:18:34,150 --> 00:18:38,470
do them out of order<font color="#CCCCCC"> these</font><font color="#E5E5E5"> are all</font>

424
00:18:35,650 --> 00:18:41,710
design choices<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Machine ultimately</font>

425
00:18:38,470 --> 00:18:44,350
does runs the same programs but I have

426
00:18:41,710 --> 00:18:47,080
trade-offs I can make<font color="#E5E5E5"> choices based on</font>

427
00:18:44,350 --> 00:18:49,510
how complex and<font color="#E5E5E5"> how performing I want my</font>

428
00:18:47,080 --> 00:18:52,330
machine<font color="#CCCCCC"> to be examples of</font>

429
00:18:49,510 --> 00:18:54,400
implementations<font color="#E5E5E5"> of architectures so</font>

430
00:18:52,330 --> 00:18:56,379
here's the sky<font color="#E5E5E5"> lake in my laptop that's</font>

431
00:18:54,400 --> 00:18:58,150
why I'm<font color="#E5E5E5"> using that example it's a little</font>

432
00:18:56,380 --> 00:18:59,920
bit older

433
00:18:58,150 --> 00:19:02,680
and you can see it's got 224

434
00:18:59,920 --> 00:19:06,040
instructions<font color="#CCCCCC"> that it can have in that</font>

435
00:19:02,680 --> 00:19:08,860
<font color="#CCCCCC">Rob</font><font color="#E5E5E5"> and then you've got an IBM power8</font>

436
00:19:06,040 --> 00:19:10,629
<font color="#CCCCCC">which you also can have 224 instructions</font>

437
00:19:08,860 --> 00:19:14,919
<font color="#E5E5E5">but they call it</font><font color="#CCCCCC"> a global completion</font>

438
00:19:10,630 --> 00:19:18,340
table because<font color="#E5E5E5"> IBM is different in lots</font>

439
00:19:14,920 --> 00:19:19,840
of ways<font color="#CCCCCC"> good ways and you also see you</font>

440
00:19:18,340 --> 00:19:21,399
know how many instructions<font color="#CCCCCC"> the</font><font color="#E5E5E5"> machine</font>

441
00:19:19,840 --> 00:19:23,830
could<font color="#E5E5E5"> have in flight</font><font color="#CCCCCC"> so on an x86</font>

442
00:19:21,400 --> 00:19:28,360
machine<font color="#E5E5E5"> typically it's a couple at a</font>

443
00:19:23,830 --> 00:19:30,850
time<font color="#CCCCCC"> on your on</font><font color="#E5E5E5"> your laptop</font><font color="#CCCCCC"> it will take</font>

444
00:19:28,360 --> 00:19:33,580
these x86 complex instructions and

445
00:19:30,850 --> 00:19:35,800
decode them<font color="#E5E5E5"> further into these macro and</font>

446
00:19:33,580 --> 00:19:37,750
micro ops<font color="#E5E5E5"> and all kinds of things you</font>

447
00:19:35,800 --> 00:19:40,540
<font color="#CCCCCC">can read more about later it'll run a</font>

448
00:19:37,750 --> 00:19:43,390
few of them at a time<font color="#E5E5E5"> on the really big</font>

449
00:19:40,540 --> 00:19:47,770
servers<font color="#CCCCCC"> it might run as</font><font color="#E5E5E5"> many as</font><font color="#CCCCCC"> 8 or 10</font>

450
00:19:43,390 --> 00:19:52,150
<font color="#E5E5E5">it may</font><font color="#CCCCCC"> dispatch it 8 to 10 at a time ok</font>

451
00:19:47,770 --> 00:19:56,530
now store that what I<font color="#E5E5E5"> just</font><font color="#CCCCCC"> said let's</font>

452
00:19:52,150 --> 00:19:57,520
talk<font color="#E5E5E5"> about virtual memory</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so I talked</font>

453
00:19:56,530 --> 00:20:00,760
<font color="#CCCCCC">about the</font><font color="#E5E5E5"> separation between</font>

454
00:19:57,520 --> 00:20:02,710
applications you have user space<font color="#E5E5E5"> you</font>

455
00:20:00,760 --> 00:20:04,990
have user applications running you have

456
00:20:02,710 --> 00:20:06,700
the<font color="#E5E5E5"> operating system and we try to</font>

457
00:20:04,990 --> 00:20:09,400
<font color="#CCCCCC">isolate the two for obvious reasons</font>

458
00:20:06,700 --> 00:20:11,620
<font color="#CCCCCC">right</font><font color="#E5E5E5"> we don't generally</font><font color="#CCCCCC"> want any old</font>

459
00:20:09,400 --> 00:20:13,720
application began to interfere<font color="#E5E5E5"> with the</font>

460
00:20:11,620 --> 00:20:15,850
operating<font color="#CCCCCC"> system</font><font color="#E5E5E5"> and we have a</font><font color="#CCCCCC"> defined</font>

461
00:20:13,720 --> 00:20:17,980
interface between the two<font color="#CCCCCC"> so when an</font>

462
00:20:15,850 --> 00:20:21,610
application wants<font color="#E5E5E5"> to do something it</font>

463
00:20:17,980 --> 00:20:24,010
<font color="#E5E5E5">uses a system call interface</font><font color="#CCCCCC"> an API</font>

464
00:20:21,610 --> 00:20:27,969
through which it requests<font color="#E5E5E5"> things from</font>

465
00:20:24,010 --> 00:20:29,860
the OS applications<font color="#CCCCCC"> when they're running</font>

466
00:20:27,970 --> 00:20:33,060
as known<font color="#CCCCCC"> as processes</font><font color="#E5E5E5"> they use system</font>

467
00:20:29,860 --> 00:20:36,550
calls I think I mentioned<font color="#CCCCCC"> all of that</font>

468
00:20:33,060 --> 00:20:39,370
here's an example of a program<font color="#E5E5E5"> when it's</font>

469
00:20:36,550 --> 00:20:41,590
running so if I were<font color="#E5E5E5"> to just</font><font color="#CCCCCC"> on my</font>

470
00:20:39,370 --> 00:20:45,310
laptop<font color="#E5E5E5"> type this command cat proc self</font>

471
00:20:41,590 --> 00:20:48,010
<font color="#CCCCCC">maps I could see the view of memory but</font>

472
00:20:45,310 --> 00:20:51,730
that<font color="#E5E5E5"> cat program has because it's</font>

473
00:20:48,010 --> 00:20:54,820
counting its own memory<font color="#E5E5E5"> map and I might</font>

474
00:20:51,730 --> 00:20:56,080
see various memory ranges<font color="#CCCCCC"> but I really</font>

475
00:20:54,820 --> 00:21:02,649
want to draw your<font color="#E5E5E5"> attention</font><font color="#CCCCCC"> to a couple</font>

476
00:20:56,080 --> 00:21:04,780
<font color="#E5E5E5">of them</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so every process every</font>

477
00:21:02,650 --> 00:21:07,990
running program will have<font color="#CCCCCC"> a range of</font>

478
00:21:04,780 --> 00:21:10,990
memory<font color="#CCCCCC"> that</font><font color="#E5E5E5"> represents its own text</font><font color="#CCCCCC"> its</font>

479
00:21:07,990 --> 00:21:14,140
code and its<font color="#E5E5E5"> data</font><font color="#CCCCCC"> and its stack</font>

480
00:21:10,990 --> 00:21:16,330
some other stuff<font color="#E5E5E5"> and then every process</font>

481
00:21:14,140 --> 00:21:19,300
until recently<font color="#CCCCCC"> will come</font><font color="#E5E5E5"> on - why that</font>

482
00:21:16,330 --> 00:21:21,610
changed until recently<font color="#E5E5E5"> would also have</font>

483
00:21:19,300 --> 00:21:24,220
<font color="#E5E5E5">this range of memory at the top of its</font>

484
00:21:21,610 --> 00:21:27,909
address space<font color="#CCCCCC"> which contained</font><font color="#E5E5E5"> all of the</font>

485
00:21:24,220 --> 00:21:30,130
kernel<font color="#CCCCCC"> and all</font><font color="#E5E5E5"> of the memory that the</font>

486
00:21:27,910 --> 00:21:34,020
kernel has<font color="#E5E5E5"> access to and you might say</font>

487
00:21:30,130 --> 00:21:36,850
well<font color="#E5E5E5"> why</font><font color="#CCCCCC"> is that well we had we have</font>

488
00:21:34,020 --> 00:21:39,100
<font color="#E5E5E5">mechanisms that are supposed to protect</font>

489
00:21:36,850 --> 00:21:41,740
the application from being able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> see</font>

490
00:21:39,100 --> 00:21:45,459
or touch that range of memory<font color="#E5E5E5"> and it</font>

491
00:21:41,740 --> 00:21:47,200
<font color="#E5E5E5">means that whenever we want to</font><font color="#CCCCCC"> whenever</font>

492
00:21:45,460 --> 00:21:49,120
we want to<font color="#E5E5E5"> go whenever I want</font><font color="#CCCCCC"> the kernel</font>

493
00:21:47,200 --> 00:21:52,480
to do something<font color="#E5E5E5"> on our behalf</font><font color="#CCCCCC"> we could</font>

494
00:21:49,120 --> 00:21:54,729
have a<font color="#E5E5E5"> very lightweight</font><font color="#CCCCCC"> entry and exit</font>

495
00:21:52,480 --> 00:21:56,410
from<font color="#E5E5E5"> the kernel it already has access</font><font color="#CCCCCC"> to</font>

496
00:21:54,730 --> 00:21:58,809
all<font color="#E5E5E5"> the memory it needs it's already set</font>

497
00:21:56,410 --> 00:22:00,880
up<font color="#E5E5E5"> we just jump into a different</font>

498
00:21:58,809 --> 00:22:03,129
execution<font color="#CCCCCC"> state that can</font><font color="#E5E5E5"> access that</font>

499
00:22:00,880 --> 00:22:06,550
memory<font color="#CCCCCC"> we do</font><font color="#E5E5E5"> something we go back to the</font>

500
00:22:03,130 --> 00:22:09,880
application<font color="#E5E5E5"> so the application</font><font color="#CCCCCC"> should be</font>

501
00:22:06,550 --> 00:22:12,970
able to<font color="#E5E5E5"> see any of</font><font color="#CCCCCC"> that memory we</font>

502
00:22:09,880 --> 00:22:17,440
maintain this separation<font color="#CCCCCC"> using something</font>

503
00:22:12,970 --> 00:22:19,929
called page tables which take<font color="#E5E5E5"> the view</font>

504
00:22:17,440 --> 00:22:23,740
of<font color="#CCCCCC"> memory the application has and they</font>

505
00:22:19,929 --> 00:22:26,679
translate it into the view that<font color="#E5E5E5"> seen by</font>

506
00:22:23,740 --> 00:22:29,350
the hardware<font color="#E5E5E5"> so I'm trying to access you</font>

507
00:22:26,679 --> 00:22:31,240
know this address whatever<font color="#E5E5E5"> address up</font>

508
00:22:29,350 --> 00:22:34,419
here<font color="#CCCCCC"> it's going to go through some page</font>

509
00:22:31,240 --> 00:22:36,580
table that<font color="#CCCCCC"> tells me where</font><font color="#E5E5E5"> we're in</font>

510
00:22:34,420 --> 00:22:37,179
physical<font color="#CCCCCC"> memory that</font><font color="#E5E5E5"> address actually</font>

511
00:22:36,580 --> 00:22:40,629
<font color="#E5E5E5">lives</font>

512
00:22:37,179 --> 00:22:42,220
<font color="#CCCCCC">that's an</font><font color="#E5E5E5"> expensive operation doing that</font>

513
00:22:40,630 --> 00:22:43,929
there is up there are things we call

514
00:22:42,220 --> 00:22:45,220
<font color="#CCCCCC">hardware</font><font color="#E5E5E5"> workers in our chips that</font>

515
00:22:43,929 --> 00:22:47,740
actually have to go down through these

516
00:22:45,220 --> 00:22:49,690
tables and<font color="#E5E5E5"> they have to work out this</font>

517
00:22:47,740 --> 00:22:52,920
<font color="#E5E5E5">translation that's an expensive</font>

518
00:22:49,690 --> 00:22:55,210
operation<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> don't do that every time</font>

519
00:22:52,920 --> 00:22:56,800
<font color="#CCCCCC">what these chips</font><font color="#E5E5E5"> have in them is</font>

520
00:22:55,210 --> 00:23:00,040
something called a translation lookaside

521
00:22:56,800 --> 00:23:01,928
buffer<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> probably several and</font>

522
00:23:00,040 --> 00:23:04,300
what these do is they<font color="#E5E5E5"> store these</font>

523
00:23:01,929 --> 00:23:06,190
translations so if I want to touch a

524
00:23:04,300 --> 00:23:09,629
piece of memory<font color="#CCCCCC"> I can actually look up</font>

525
00:23:06,190 --> 00:23:12,630
very quickly<font color="#CCCCCC"> the last few translations</font>

526
00:23:09,630 --> 00:23:17,110
and again by keeping kernel memory

527
00:23:12,630 --> 00:23:20,020
translations in place while my

528
00:23:17,110 --> 00:23:21,580
application is running<font color="#E5E5E5"> again I get some</font>

529
00:23:20,020 --> 00:23:23,260
<font color="#CCCCCC">performance</font><font color="#E5E5E5"> because I want to go into</font>

530
00:23:21,580 --> 00:23:25,300
the<font color="#E5E5E5"> kernel to do something</font>

531
00:23:23,260 --> 00:23:27,250
these entries are<font color="#E5E5E5"> already populated</font>

532
00:23:25,300 --> 00:23:30,159
<font color="#E5E5E5">they're already present and so typically</font>

533
00:23:27,250 --> 00:23:32,770
what I will<font color="#E5E5E5"> do is I'll leave these</font><font color="#CCCCCC"> in</font>

534
00:23:30,160 --> 00:23:35,020
place until<font color="#CCCCCC"> I switch</font><font color="#E5E5E5"> from one process to</font>

535
00:23:32,770 --> 00:23:37,540
another<font color="#E5E5E5"> then I have to flush this stuff</font>

536
00:23:35,020 --> 00:23:41,670
out<font color="#E5E5E5"> and switch to</font><font color="#CCCCCC"> another process</font>

537
00:23:37,540 --> 00:23:46,389
because<font color="#E5E5E5"> it's view of memory is different</font>

538
00:23:41,670 --> 00:23:52,390
<font color="#E5E5E5">okay I'm gonna skip that slide skip that</font>

539
00:23:46,390 --> 00:23:54,940
one<font color="#E5E5E5"> and okay so I'm gonna throw caches</font>

540
00:23:52,390 --> 00:23:56,860
in here as well<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I've said that you</font>

541
00:23:54,940 --> 00:23:59,530
have these ranges<font color="#E5E5E5"> of memory</font><font color="#CCCCCC"> or</font>

542
00:23:56,860 --> 00:24:01,840
application<font color="#CCCCCC"> C's you translate them</font>

543
00:23:59,530 --> 00:24:05,230
<font color="#E5E5E5">before they hit physical memory well you</font>

544
00:24:01,840 --> 00:24:08,350
also<font color="#E5E5E5"> have a caching hierarchy that</font><font color="#CCCCCC"> sits</font>

545
00:24:05,230 --> 00:24:10,390
between your program<font color="#E5E5E5"> accessing some</font>

546
00:24:08,350 --> 00:24:12,639
memory<font color="#E5E5E5"> and the actual</font><font color="#CCCCCC"> Ram chip</font><font color="#E5E5E5"> in your</font>

547
00:24:10,390 --> 00:24:15,520
<font color="#CCCCCC">machine and there are</font><font color="#E5E5E5"> multiple levels</font><font color="#CCCCCC"> of</font>

548
00:24:12,640 --> 00:24:19,200
this cache memory<font color="#E5E5E5"> all right with names</font>

549
00:24:15,520 --> 00:24:22,900
like level 1 level 2 level 3 level 4

550
00:24:19,200 --> 00:24:26,590
<font color="#E5E5E5">things like that but basically what they</font>

551
00:24:22,900 --> 00:24:29,650
are are ways of accessing<font color="#E5E5E5"> data that I'm</font>

552
00:24:26,590 --> 00:24:31,929
using frequently<font color="#E5E5E5"> faster</font><font color="#CCCCCC"> write memory</font>

553
00:24:29,650 --> 00:24:35,800
chips in my<font color="#CCCCCC"> machine is slow</font><font color="#E5E5E5"> relatively</font>

554
00:24:31,930 --> 00:24:39,130
<font color="#E5E5E5">speaking the</font><font color="#CCCCCC"> cores</font><font color="#E5E5E5"> inside my chip are</font>

555
00:24:35,800 --> 00:24:42,550
much<font color="#E5E5E5"> faster and the laws of</font><font color="#CCCCCC"> physics tell</font>

556
00:24:39,130 --> 00:24:45,520
me that I can't have<font color="#CCCCCC"> both</font><font color="#E5E5E5"> I can have big</font>

557
00:24:42,550 --> 00:24:48,730
and slow or small and fast<font color="#CCCCCC"> so what I do</font>

558
00:24:45,520 --> 00:24:51,930
is I have<font color="#E5E5E5"> some memory on my chip</font><font color="#CCCCCC"> it's a</font>

559
00:24:48,730 --> 00:24:54,700
bit faster or<font color="#CCCCCC"> a lot faster</font><font color="#E5E5E5"> and it caches</font>

560
00:24:51,930 --> 00:24:56,560
valleys<font color="#CCCCCC"> i've been using recently so when</font>

561
00:24:54,700 --> 00:24:58,390
i when<font color="#E5E5E5"> i touch a piece of memory</font><font color="#CCCCCC"> what</font>

562
00:24:56,560 --> 00:25:03,070
will actually<font color="#E5E5E5"> happen is it will get</font>

563
00:24:58,390 --> 00:25:06,670
<font color="#E5E5E5">pulled into the caches</font><font color="#CCCCCC"> and so for</font>

564
00:25:03,070 --> 00:25:09,340
<font color="#CCCCCC">example I may have a cache entry for a</font>

565
00:25:06,670 --> 00:25:11,770
user<font color="#E5E5E5"> a piece of data from from a user</font>

566
00:25:09,340 --> 00:25:14,260
application<font color="#CCCCCC"> I may at the same time in</font><font color="#E5E5E5"> my</font>

567
00:25:11,770 --> 00:25:16,810
cache<font color="#E5E5E5"> have a piece of data</font><font color="#CCCCCC"> from my</font>

568
00:25:14,260 --> 00:25:19,210
kernel<font color="#E5E5E5"> and again I've got protections in</font>

569
00:25:16,810 --> 00:25:21,730
<font color="#CCCCCC">place that should mean that there's no</font>

570
00:25:19,210 --> 00:25:25,060
way of<font color="#CCCCCC"> ever accessing a piece of kernel</font>

571
00:25:21,730 --> 00:25:27,700
data from my application<font color="#E5E5E5"> code right my</font>

572
00:25:25,060 --> 00:25:29,260
page tables say that's not accessible<font color="#CCCCCC"> it</font>

573
00:25:27,700 --> 00:25:32,490
doesn't matter if it's in<font color="#E5E5E5"> the cache when</font>

574
00:25:29,260 --> 00:25:35,740
I try to<font color="#CCCCCC"> access it</font><font color="#E5E5E5"> that's not accessible</font>

575
00:25:32,490 --> 00:25:37,030
probably skip<font color="#CCCCCC"> this slide but this</font><font color="#E5E5E5"> is an</font>

576
00:25:35,740 --> 00:25:39,490
optimization actually if

577
00:25:37,030 --> 00:25:40,870
how modern<font color="#E5E5E5"> high-performance caches are</font>

578
00:25:39,490 --> 00:25:43,030
implemented that<font color="#E5E5E5"> you can read a bit more</font>

579
00:25:40,870 --> 00:25:44,110
<font color="#E5E5E5">later</font><font color="#CCCCCC"> on if you're interested</font><font color="#E5E5E5"> this will</font>

580
00:25:43,030 --> 00:25:47,260
tell you<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example if</font><font color="#E5E5E5"> you ever</font>

581
00:25:44,110 --> 00:25:50,949
wondered you know<font color="#CCCCCC"> why is a level</font><font color="#E5E5E5"> 1 cache</font>

582
00:25:47,260 --> 00:25:52,540
32 kilobytes in every CPU with<font color="#E5E5E5"> 4 K pages</font>

583
00:25:50,950 --> 00:25:56,850
this will tell you why you<font color="#E5E5E5"> can read it</font>

584
00:25:52,540 --> 00:25:59,710
<font color="#CCCCCC">later let's</font><font color="#E5E5E5"> keep going</font>

585
00:25:56,850 --> 00:26:02,770
<font color="#E5E5E5">ok I'm gonna skip how caches work so</font>

586
00:25:59,710 --> 00:26:06,210
let's talk<font color="#E5E5E5"> about</font><font color="#CCCCCC"> side-channel attacks</font><font color="#E5E5E5"> so</font>

587
00:26:02,770 --> 00:26:10,720
<font color="#E5E5E5">side-channel attacks are based on</font>

588
00:26:06,210 --> 00:26:13,320
deriving information by exploiting<font color="#E5E5E5"> the</font>

589
00:26:10,720 --> 00:26:16,450
physical<font color="#CCCCCC"> implementation of a machine</font>

590
00:26:13,320 --> 00:26:20,050
right<font color="#E5E5E5"> so we have our instruction set</font>

591
00:26:16,450 --> 00:26:23,020
<font color="#E5E5E5">that describes how any x86 machine</font>

592
00:26:20,050 --> 00:26:25,629
<font color="#E5E5E5">should operate for example then we have</font>

593
00:26:23,020 --> 00:26:27,389
an implementation<font color="#E5E5E5"> the</font><font color="#CCCCCC"> side-channel takes</font>

594
00:26:25,630 --> 00:26:30,160
advantage of the<font color="#E5E5E5"> fact that an</font>

595
00:26:27,390 --> 00:26:33,040
implementation might have some

596
00:26:30,160 --> 00:26:37,240
vulnerabilities<font color="#E5E5E5"> into it classical things</font>

597
00:26:33,040 --> 00:26:40,540
that we've done in this space<font color="#E5E5E5"> have</font>

598
00:26:37,240 --> 00:26:41,830
involved electromagnetic emissions<font color="#E5E5E5"> right</font>

599
00:26:40,540 --> 00:26:42,520
<font color="#E5E5E5">put</font><font color="#CCCCCC"> your hands up if you've heard of</font>

600
00:26:41,830 --> 00:26:45,100
<font color="#CCCCCC">Tempest</font>

601
00:26:42,520 --> 00:26:47,320
<font color="#E5E5E5">you guys heard of</font><font color="#CCCCCC"> tempest right</font><font color="#E5E5E5"> the sort</font>

602
00:26:45,100 --> 00:26:50,050
<font color="#E5E5E5">of secretive</font><font color="#CCCCCC"> governments agencies</font>

603
00:26:47,320 --> 00:26:52,720
watching<font color="#E5E5E5"> your screen</font><font color="#CCCCCC"> from afar right</font>

604
00:26:50,050 --> 00:26:55,419
that's based on analyzing<font color="#E5E5E5"> the emissions</font>

605
00:26:52,720 --> 00:26:57,010
<font color="#E5E5E5">coming from your machine right</font><font color="#CCCCCC"> there are</font>

606
00:26:55,420 --> 00:26:59,380
similar attacks with differential power

607
00:26:57,010 --> 00:27:01,450
analysis<font color="#E5E5E5"> so I can monitor</font><font color="#CCCCCC"> how much power</font>

608
00:26:59,380 --> 00:27:03,970
a chip is using and I can infer what

609
00:27:01,450 --> 00:27:06,790
it's doing another<font color="#CCCCCC"> thing that I can do</font>

610
00:27:03,970 --> 00:27:08,920
is I can measure how long<font color="#CCCCCC"> it takes</font><font color="#E5E5E5"> for</font>

611
00:27:06,790 --> 00:27:11,260
certain<font color="#E5E5E5"> operations</font><font color="#CCCCCC"> if different</font>

612
00:27:08,920 --> 00:27:14,890
<font color="#E5E5E5">operations take different amounts</font><font color="#CCCCCC"> of</font>

613
00:27:11,260 --> 00:27:19,629
time<font color="#CCCCCC"> and if I can actually</font><font color="#E5E5E5"> perceptively</font>

614
00:27:14,890 --> 00:27:24,100
measure that so caches<font color="#E5E5E5"> can behave</font><font color="#CCCCCC"> as</font>

615
00:27:19,630 --> 00:27:26,860
side channels because they're a shared

616
00:27:24,100 --> 00:27:29,320
resource<font color="#E5E5E5"> as you</font><font color="#CCCCCC"> saw from</font><font color="#E5E5E5"> my diagram</font>

617
00:27:26,860 --> 00:27:31,780
<font color="#CCCCCC">earlier whenever I pull some whenever I</font>

618
00:27:29,320 --> 00:27:34,409
want<font color="#E5E5E5"> to use a memory</font><font color="#CCCCCC"> location it's going</font>

619
00:27:31,780 --> 00:27:37,060
to go in through my cache hierarchy

620
00:27:34,410 --> 00:27:41,620
<font color="#E5E5E5">meaning that the cache is</font><font color="#CCCCCC"> shared by</font>

621
00:27:37,060 --> 00:27:43,389
<font color="#CCCCCC">everybody</font><font color="#E5E5E5"> and I can</font><font color="#CCCCCC"> actually measure a</font>

622
00:27:41,620 --> 00:27:45,699
difference<font color="#CCCCCC"> in the time it takes</font><font color="#E5E5E5"> to</font>

623
00:27:43,390 --> 00:27:48,220
<font color="#CCCCCC">access a piece of data based upon</font>

624
00:27:45,700 --> 00:27:49,900
whether it's in the cache or<font color="#CCCCCC"> not and in</font>

625
00:27:48,220 --> 00:27:50,780
<font color="#E5E5E5">fact it gets even</font><font color="#CCCCCC"> more scary</font><font color="#E5E5E5"> you can</font>

626
00:27:49,900 --> 00:27:55,100
actually work out<font color="#CCCCCC"> what</font>

627
00:27:50,780 --> 00:27:59,090
level of the<font color="#E5E5E5"> cash it's in</font><font color="#CCCCCC"> oh that just</font>

628
00:27:55,100 --> 00:28:00,709
rebooted<font color="#E5E5E5"> so</font><font color="#CCCCCC"> alright if you're watching</font>

629
00:27:59,090 --> 00:28:02,179
the video stream and it cut out<font color="#E5E5E5"> your</font>

630
00:28:00,710 --> 00:28:06,320
video streaming machine just rebooted

631
00:28:02,180 --> 00:28:08,360
<font color="#E5E5E5">but</font><font color="#CCCCCC"> okay so um anyway so I can measure</font>

632
00:28:06,320 --> 00:28:10,040
the amount<font color="#CCCCCC"> of I can measure where or if</font>

633
00:28:08,360 --> 00:28:11,750
not in the<font color="#CCCCCC"> cache based on</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> long it</font>

634
00:28:10,040 --> 00:28:13,940
takes to<font color="#E5E5E5"> read a piece of data in fact</font>

635
00:28:11,750 --> 00:28:16,730
<font color="#E5E5E5">there are</font><font color="#CCCCCC"> even more exciting attacks on</font>

636
00:28:13,940 --> 00:28:19,400
some architectures like<font color="#E5E5E5"> x86</font><font color="#CCCCCC"> I have a</font>

637
00:28:16,730 --> 00:28:22,250
special instruction called<font color="#E5E5E5"> CL flush and</font>

638
00:28:19,400 --> 00:28:25,820
I can say as a programmer<font color="#E5E5E5"> unprivileged</font>

639
00:28:22,250 --> 00:28:26,990
<font color="#CCCCCC">any code can do this flush this location</font>

640
00:28:25,820 --> 00:28:28,820
make sure it's not anywhere<font color="#E5E5E5"> in the</font>

641
00:28:26,990 --> 00:28:31,940
caches<font color="#CCCCCC"> so I'm guarantee it's not in the</font>

642
00:28:28,820 --> 00:28:35,060
cache<font color="#CCCCCC"> and actually what I can do is if I</font>

643
00:28:31,940 --> 00:28:38,270
do two flushes<font color="#E5E5E5"> I can actually</font><font color="#CCCCCC"> measure</font>

644
00:28:35,060 --> 00:28:39,560
whether when I flushed it<font color="#E5E5E5"> whether it was</font>

645
00:28:38,270 --> 00:28:40,910
<font color="#CCCCCC">in the cache to begin with</font>

646
00:28:39,560 --> 00:28:42,200
so I<font color="#E5E5E5"> don't even have to load something</font>

647
00:28:40,910 --> 00:28:43,790
<font color="#E5E5E5">to measure whether it's in the cache</font>

648
00:28:42,200 --> 00:28:49,910
<font color="#CCCCCC">there's some really</font><font color="#E5E5E5"> exciting attacks I</font>

649
00:28:43,790 --> 00:28:53,090
can do here's an example<font color="#E5E5E5"> so I use I have</font>

650
00:28:49,910 --> 00:28:54,590
<font color="#E5E5E5">these interfaces on on most</font>

651
00:28:53,090 --> 00:28:57,980
architectures I have a way<font color="#CCCCCC"> of measuring</font>

652
00:28:54,590 --> 00:29:00,110
time on x86<font color="#E5E5E5"> it's called</font><font color="#CCCCCC"> our DTSC read</font>

653
00:28:57,980 --> 00:29:02,150
time stamp counter<font color="#CCCCCC"> I can read the</font>

654
00:29:00,110 --> 00:29:03,860
current<font color="#E5E5E5"> time stamp counter</font><font color="#CCCCCC"> I can access</font>

655
00:29:02,150 --> 00:29:06,190
<font color="#E5E5E5">a piece of memory</font><font color="#CCCCCC"> I can read it again</font>

656
00:29:03,860 --> 00:29:09,320
<font color="#E5E5E5">and I can work out the difference</font><font color="#CCCCCC"> and</font>

657
00:29:06,190 --> 00:29:11,900
based upon<font color="#E5E5E5"> that amount of time and some</font>

658
00:29:09,320 --> 00:29:13,790
calibration<font color="#CCCCCC"> I can work out</font><font color="#E5E5E5"> is that</font>

659
00:29:11,900 --> 00:29:16,100
memory<font color="#E5E5E5"> access is that thing I'm</font>

660
00:29:13,790 --> 00:29:19,850
<font color="#CCCCCC">accessing in the middle</font><font color="#E5E5E5"> was that in the</font>

661
00:29:16,100 --> 00:29:21,110
caches or not<font color="#E5E5E5"> and as I said a lot of a</font>

662
00:29:19,850 --> 00:29:22,580
lot of architectures provide

663
00:29:21,110 --> 00:29:24,439
instructions<font color="#E5E5E5"> that let you do this</font>

664
00:29:22,580 --> 00:29:27,139
you don't need an instruction<font color="#E5E5E5"> there are</font>

665
00:29:24,440 --> 00:29:28,670
other ways to<font color="#E5E5E5"> count time and some</font>

666
00:29:27,140 --> 00:29:31,130
architectures provide a way<font color="#E5E5E5"> to guarantee</font>

667
00:29:28,670 --> 00:29:33,770
<font color="#E5E5E5">you've flushed</font><font color="#CCCCCC"> something from the cache</font>

668
00:29:31,130 --> 00:29:35,390
<font color="#CCCCCC">that gets</font><font color="#E5E5E5"> very useful a bit later</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> but</font>

669
00:29:33,770 --> 00:29:38,150
<font color="#E5E5E5">there are other ways to do that you can</font>

670
00:29:35,390 --> 00:29:40,220
look<font color="#CCCCCC"> up displacement flushing if you're</font>

671
00:29:38,150 --> 00:29:43,190
interested and<font color="#E5E5E5"> as I said you might even</font>

672
00:29:40,220 --> 00:29:45,650
be<font color="#E5E5E5"> able to optimize it with some of</font>

673
00:29:43,190 --> 00:29:47,540
these<font color="#CCCCCC"> other variants as well</font><font color="#E5E5E5"> to see if</font>

674
00:29:45,650 --> 00:29:49,160
<font color="#E5E5E5">data is in caches well why is that</font>

675
00:29:47,540 --> 00:29:51,560
useful let's let's think<font color="#E5E5E5"> about that</font>

676
00:29:49,160 --> 00:29:54,440
<font color="#CCCCCC">we'll come</font><font color="#E5E5E5"> back to it</font>

677
00:29:51,560 --> 00:29:56,659
I must get prefetching okay now we're

678
00:29:54,440 --> 00:29:59,540
talk about branch prediction it all come

679
00:29:56,660 --> 00:30:01,130
together in a minute this<font color="#E5E5E5"> is a</font>

680
00:29:59,540 --> 00:30:03,490
complicated<font color="#CCCCCC"> topic guys you know we're</font>

681
00:30:01,130 --> 00:30:05,169
you're<font color="#E5E5E5"> getting a deep dive here</font><font color="#CCCCCC"> right</font>

682
00:30:03,490 --> 00:30:11,080
let's talk about<font color="#CCCCCC"> branch prediction so</font>

683
00:30:05,169 --> 00:30:14,020
when I'm running code on a<font color="#E5E5E5"> machine</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> a</font>

684
00:30:11,080 --> 00:30:15,520
<font color="#E5E5E5">neat I'm a hit points in my execution</font>

685
00:30:14,020 --> 00:30:17,440
where I'm<font color="#E5E5E5"> trying to decide is my</font>

686
00:30:15,520 --> 00:30:20,260
programming<font color="#CCCCCC"> to go one</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> or another</font><font color="#E5E5E5"> if</font>

687
00:30:17,440 --> 00:30:26,169
this do<font color="#CCCCCC"> that</font><font color="#E5E5E5"> or do that instead</font>

688
00:30:20,260 --> 00:30:30,429
right<font color="#CCCCCC"> now</font><font color="#E5E5E5"> when when I hit a branch in my</font>

689
00:30:26,169 --> 00:30:34,000
program<font color="#E5E5E5"> I'm going to test for example</font><font color="#CCCCCC"> if</font>

690
00:30:30,429 --> 00:30:37,740
it's raining<font color="#E5E5E5"> do this thing well the may</font>

691
00:30:34,000 --> 00:30:40,000
not actually<font color="#CCCCCC"> have the</font><font color="#E5E5E5"> value of raining</font>

692
00:30:37,740 --> 00:30:42,190
<font color="#E5E5E5">available to me at that</font><font color="#CCCCCC"> moment for a</font>

693
00:30:40,000 --> 00:30:44,200
couple<font color="#E5E5E5"> of reasons</font><font color="#CCCCCC"> it might be in slower</font>

694
00:30:42,190 --> 00:30:46,809
memory<font color="#CCCCCC"> I</font><font color="#E5E5E5"> need to pull into my caches</font>

695
00:30:44,200 --> 00:30:48,250
<font color="#E5E5E5">that</font><font color="#CCCCCC"> might take a</font><font color="#E5E5E5"> bit of time or it</font>

696
00:30:46,809 --> 00:30:52,870
might be<font color="#E5E5E5"> some calculation I have</font><font color="#CCCCCC"> to</font>

697
00:30:48,250 --> 00:30:56,289
perform<font color="#E5E5E5"> and for those reasons there can</font>

698
00:30:52,870 --> 00:30:59,939
be cases where I hit a branch in my code

699
00:30:56,289 --> 00:31:02,049
<font color="#CCCCCC">to go one way or another and I don't</font>

700
00:30:59,940 --> 00:31:06,510
<font color="#E5E5E5">instantaneously know which way it's</font>

701
00:31:02,049 --> 00:31:13,418
going to<font color="#E5E5E5"> go so I</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> store</font><font color="#CCCCCC"> my machine</font><font color="#E5E5E5"> in</font>

702
00:31:06,510 --> 00:31:16,679
<font color="#CCCCCC">weight</font><font color="#E5E5E5"> or I can continue running I can</font>

703
00:31:13,419 --> 00:31:20,020
guess which way my branch is going<font color="#CCCCCC"> to go</font>

704
00:31:16,679 --> 00:31:22,929
and I can build<font color="#E5E5E5"> on this build on my</font>

705
00:31:20,020 --> 00:31:25,899
<font color="#CCCCCC">out-of-order</font><font color="#E5E5E5"> machine I can build this</font>

706
00:31:22,929 --> 00:31:28,570
concept<font color="#E5E5E5"> of speculative execution what I</font>

707
00:31:25,899 --> 00:31:32,229
can do is I can say<font color="#E5E5E5"> I have this</font>

708
00:31:28,570 --> 00:31:35,230
condition here<font color="#E5E5E5"> if r1 is</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> do this</font>

709
00:31:32,230 --> 00:31:36,700
other stuff<font color="#CCCCCC"> I don't yet know</font><font color="#E5E5E5"> the value</font>

710
00:31:35,230 --> 00:31:38,890
because I'm loading it I'm<font color="#E5E5E5"> waiting for</font>

711
00:31:36,700 --> 00:31:40,630
it to<font color="#E5E5E5"> load</font><font color="#CCCCCC"> so what I'm gonna do is I'm</font>

712
00:31:38,890 --> 00:31:42,820
gonna go into a special<font color="#CCCCCC"> mode of</font>

713
00:31:40,630 --> 00:31:44,399
execution called speculation<font color="#E5E5E5"> and I'm</font>

714
00:31:42,820 --> 00:31:47,260
gonna keep running these instructions

715
00:31:44,399 --> 00:31:49,899
<font color="#E5E5E5">I'm gonna guess it's gonna go this way</font><font color="#CCCCCC"> I</font>

716
00:31:47,260 --> 00:31:51,340
don't<font color="#CCCCCC"> know that so I'm going</font><font color="#E5E5E5"> to tag each</font>

717
00:31:49,899 --> 00:31:56,860
<font color="#E5E5E5">instruction and say that it's</font>

718
00:31:51,340 --> 00:31:58,689
speculative right<font color="#E5E5E5"> if later</font><font color="#CCCCCC"> on I discover</font>

719
00:31:56,860 --> 00:32:02,529
which way that branch is supposed to<font color="#E5E5E5"> go</font>

720
00:31:58,690 --> 00:32:04,450
and I'm wrong I<font color="#E5E5E5"> will flush everything</font>

721
00:32:02,529 --> 00:32:04,840
<font color="#E5E5E5">that's purple here</font><font color="#CCCCCC"> I will forget about</font>

722
00:32:04,450 --> 00:32:07,350
it

723
00:32:04,840 --> 00:32:10,600
and because I've tagged it<font color="#CCCCCC"> especially</font>

724
00:32:07,350 --> 00:32:13,330
<font color="#CCCCCC">I've not retired it</font><font color="#E5E5E5"> I've only kept its</font>

725
00:32:10,600 --> 00:32:15,370
interim<font color="#E5E5E5"> State the idea is that you're</font>

726
00:32:13,330 --> 00:32:17,320
never aware that I did this it's an

727
00:32:15,370 --> 00:32:19,540
optimization if I'm right

728
00:32:17,320 --> 00:32:21,909
the machine keeps going it's a bit

729
00:32:19,540 --> 00:32:24,730
faster if I'm<font color="#E5E5E5"> wrong</font><font color="#CCCCCC"> I have</font><font color="#E5E5E5"> to throw</font><font color="#CCCCCC"> away</font>

730
00:32:21,910 --> 00:32:27,970
<font color="#E5E5E5">some state but I'm no slower than if I</font>

731
00:32:24,730 --> 00:32:32,410
just<font color="#CCCCCC"> waited to find</font><font color="#E5E5E5"> out the result of</font>

732
00:32:27,970 --> 00:32:33,940
that conditional check so speculation is

733
00:32:32,410 --> 00:32:35,890
something that we<font color="#CCCCCC"> build an out-of-order</font>

734
00:32:33,940 --> 00:32:39,730
<font color="#E5E5E5">machines it's part of our branch</font>

735
00:32:35,890 --> 00:32:44,500
prediction hardware<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we use</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> to get</font>

736
00:32:39,730 --> 00:32:47,260
a performance optimization<font color="#E5E5E5"> when we're</font>

737
00:32:44,500 --> 00:32:50,290
speculating<font color="#CCCCCC"> if we have any erroneous</font>

738
00:32:47,260 --> 00:32:53,830
<font color="#E5E5E5">conditions in our program</font><font color="#CCCCCC"> what we</font><font color="#E5E5E5"> will</font>

739
00:32:50,290 --> 00:32:57,129
do is we will<font color="#CCCCCC"> also tag them here right</font>

740
00:32:53,830 --> 00:32:59,080
<font color="#CCCCCC">so if I try to read if I try</font><font color="#E5E5E5"> to perform</font>

741
00:32:57,130 --> 00:33:01,440
<font color="#E5E5E5">an illegal instruction or do</font><font color="#CCCCCC"> something</font>

742
00:32:59,080 --> 00:33:04,149
<font color="#E5E5E5">that's not permitted</font><font color="#CCCCCC"> I won't actually</font>

743
00:33:01,440 --> 00:33:05,560
take an error do you take a trap I won't

744
00:33:04,150 --> 00:33:07,480
do anything<font color="#E5E5E5"> about it</font><font color="#CCCCCC"> because I don't</font>

745
00:33:05,560 --> 00:33:11,110
<font color="#E5E5E5">know if this is</font><font color="#CCCCCC"> actually supposed</font><font color="#E5E5E5"> to run</font>

746
00:33:07,480 --> 00:33:12,730
<font color="#E5E5E5">I'll just mark it and later on if I</font>

747
00:33:11,110 --> 00:33:18,280
decide that that was supposed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> run</font>

748
00:33:12,730 --> 00:33:20,050
<font color="#E5E5E5">then I'll handle that later so as I said</font>

749
00:33:18,280 --> 00:33:22,629
if I'm correct when I<font color="#E5E5E5"> hit a branch</font>

750
00:33:20,050 --> 00:33:26,350
<font color="#E5E5E5">it's called resolving a branch</font><font color="#CCCCCC"> if I'm</font>

751
00:33:22,630 --> 00:33:28,630
correct<font color="#CCCCCC"> then I continue</font><font color="#E5E5E5"> and everyone</font>

752
00:33:26,350 --> 00:33:31,090
just<font color="#E5E5E5"> gets a speed a</font><font color="#CCCCCC"> speed-up</font><font color="#E5E5E5"> if I'm</font>

753
00:33:28,630 --> 00:33:34,500
wrong<font color="#CCCCCC"> I have to do some</font><font color="#E5E5E5"> housekeeping</font><font color="#CCCCCC"> but</font>

754
00:33:31,090 --> 00:33:34,500
the idea is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can never observe</font>

755
00:33:34,650 --> 00:33:38,890
<font color="#E5E5E5">that machine you can't observe</font><font color="#CCCCCC"> the fact</font>

756
00:33:37,390 --> 00:33:45,640
<font color="#E5E5E5">that I did this speculation it's</font>

757
00:33:38,890 --> 00:33:47,490
supposed to be visible<font color="#CCCCCC"> to you I can talk</font>

758
00:33:45,640 --> 00:33:49,840
a bit more<font color="#E5E5E5"> about conditional and and</font>

759
00:33:47,490 --> 00:33:53,170
indirect branches but<font color="#E5E5E5"> I think I will</font>

760
00:33:49,840 --> 00:33:55,810
<font color="#E5E5E5">just skip to how branch predictors work</font>

761
00:33:53,170 --> 00:33:58,810
a little<font color="#E5E5E5"> bit so if I have two</font><font color="#CCCCCC"> different</font>

762
00:33:55,810 --> 00:34:00,010
applications<font color="#CCCCCC"> running on my machine how</font>

763
00:33:58,810 --> 00:34:01,360
does how does<font color="#E5E5E5"> the branch predictor</font>

764
00:34:00,010 --> 00:34:05,200
actually work well<font color="#E5E5E5"> what it</font><font color="#CCCCCC"> does is it</font>

765
00:34:01,360 --> 00:34:09,009
<font color="#E5E5E5">has a data structure in memory</font><font color="#CCCCCC"> and it</font>

766
00:34:05,200 --> 00:34:11,710
will look at the actual memory<font color="#E5E5E5"> address</font>

767
00:34:09,010 --> 00:34:14,679
of a of<font color="#CCCCCC"> a potential branch instruction</font>

768
00:34:11,710 --> 00:34:16,960
<font color="#E5E5E5">and it will in different ways because</font>

769
00:34:14,679 --> 00:34:21,280
implementations vary<font color="#E5E5E5"> record the history</font>

770
00:34:16,960 --> 00:34:24,520
of that branch<font color="#CCCCCC"> so the last ten times I</font>

771
00:34:21,280 --> 00:34:27,160
saw this branch<font color="#CCCCCC"> I went that way probably</font>

772
00:34:24,520 --> 00:34:30,219
<font color="#E5E5E5">means the next time I'm going to go that</font>

773
00:34:27,159 --> 00:34:33,310
<font color="#E5E5E5">way as well in fact in some</font>

774
00:34:30,219 --> 00:34:35,279
where I even have fancy stuff<font color="#E5E5E5"> like loop</font>

775
00:34:33,310 --> 00:34:38,080
predictors<font color="#CCCCCC"> they can work out not only</font>

776
00:34:35,280 --> 00:34:39,970
<font color="#E5E5E5">you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> is this is this branch probably</font>

777
00:34:38,080 --> 00:34:41,799
<font color="#E5E5E5">going to go that way but I even know</font>

778
00:34:39,969 --> 00:34:44,339
<font color="#CCCCCC">it's a loop</font><font color="#E5E5E5"> I can just</font><font color="#CCCCCC"> magically work</font>

779
00:34:41,800 --> 00:34:46,690
that out using<font color="#CCCCCC"> some complicated</font><font color="#E5E5E5"> hardware</font>

780
00:34:44,340 --> 00:34:48,879
<font color="#CCCCCC">but there may be many different</font>

781
00:34:46,690 --> 00:34:50,470
components<font color="#CCCCCC"> to</font><font color="#E5E5E5"> my branch prediction and</font>

782
00:34:48,879 --> 00:34:52,500
fundamentally they will use some

783
00:34:50,469 --> 00:34:55,209
structure that tags the history of

784
00:34:52,500 --> 00:34:59,230
branches and<font color="#E5E5E5"> I want you to think about</font>

785
00:34:55,210 --> 00:35:01,359
<font color="#E5E5E5">the fact that this tagging that I do it</font>

786
00:34:59,230 --> 00:35:03,130
could<font color="#E5E5E5"> be</font><font color="#CCCCCC"> expensive I could I could need</font>

787
00:35:01,359 --> 00:35:06,190
a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of memory if I were to try</font><font color="#E5E5E5"> to</font>

788
00:35:03,130 --> 00:35:08,800
store the<font color="#CCCCCC"> address of every branch my</font>

789
00:35:06,190 --> 00:35:12,520
program ever took so instead what<font color="#CCCCCC"> I do</font>

790
00:35:08,800 --> 00:35:16,240
is<font color="#CCCCCC"> I optimize this structure and I may</font>

791
00:35:12,520 --> 00:35:19,150
only<font color="#CCCCCC"> use a little</font><font color="#E5E5E5"> bit of the address for</font>

792
00:35:16,240 --> 00:35:23,290
<font color="#CCCCCC">that branch so consequently I could have</font>

793
00:35:19,150 --> 00:35:26,680
two different<font color="#CCCCCC"> programs with two</font>

794
00:35:23,290 --> 00:35:29,290
different<font color="#E5E5E5"> branches</font><font color="#CCCCCC"> and my branch</font>

795
00:35:26,680 --> 00:35:36,310
prediction<font color="#E5E5E5"> hardware may not be able to</font>

796
00:35:29,290 --> 00:35:38,830
tell those apart<font color="#CCCCCC"> okay and then I have a</font>

797
00:35:36,310 --> 00:35:40,420
<font color="#CCCCCC">variant of those conditional branches I</font>

798
00:35:38,830 --> 00:35:43,240
talked<font color="#CCCCCC"> about</font><font color="#E5E5E5"> called indirect branches</font>

799
00:35:40,420 --> 00:35:46,030
that's when I have what you would<font color="#E5E5E5"> call a</font>

800
00:35:43,240 --> 00:35:48,759
virtual<font color="#E5E5E5"> method or some kind of function</font>

801
00:35:46,030 --> 00:35:51,490
pointer I don't know where I'm going to

802
00:35:48,760 --> 00:35:53,369
go to I also have hardware<font color="#E5E5E5"> but a bit</font>

803
00:35:51,490 --> 00:35:57,939
like what I described<font color="#E5E5E5"> before can guess</font>

804
00:35:53,369 --> 00:35:59,670
<font color="#E5E5E5">indirect branches in my programs I'm</font>

805
00:35:57,940 --> 00:36:02,020
going to skip<font color="#E5E5E5"> through the optimization</font>

806
00:35:59,670 --> 00:36:03,820
<font color="#E5E5E5">all right now I'm going to talk about</font>

807
00:36:02,020 --> 00:36:07,210
<font color="#E5E5E5">these particular attacks because where I</font>

808
00:36:03,820 --> 00:36:09,910
<font color="#E5E5E5">took a bit</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> time okay so you learned a</font>

809
00:36:07,210 --> 00:36:11,859
lot<font color="#E5E5E5"> that was</font><font color="#CCCCCC"> a whole semesters worth of</font>

810
00:36:09,910 --> 00:36:14,830
various computer science stuff I'm glad

811
00:36:11,859 --> 00:36:16,390
you're still awake<font color="#E5E5E5"> let's talk about</font>

812
00:36:14,830 --> 00:36:20,200
these two vulnerabilities and<font color="#E5E5E5"> how they</font>

813
00:36:16,390 --> 00:36:22,960
layer upon<font color="#E5E5E5"> that so you know these are</font>

814
00:36:20,200 --> 00:36:26,220
branded vulnerabilities they were

815
00:36:22,960 --> 00:36:29,530
discovered<font color="#CCCCCC"> by both academic researchers</font>

816
00:36:26,220 --> 00:36:31,689
<font color="#CCCCCC">and</font><font color="#E5E5E5"> also by Google project zero and</font>

817
00:36:29,530 --> 00:36:33,760
because they were discovered<font color="#CCCCCC"> by</font>

818
00:36:31,690 --> 00:36:35,859
researchers I<font color="#E5E5E5"> love the researchers but</font>

819
00:36:33,760 --> 00:36:38,310
you have to give it a<font color="#E5E5E5"> cute name right so</font>

820
00:36:35,859 --> 00:36:40,960
you know<font color="#CCCCCC"> meltdown</font><font color="#E5E5E5"> inspector it</font><font color="#CCCCCC"> is</font>

821
00:36:38,310 --> 00:36:42,390
because variants<font color="#CCCCCC"> 1 2 & 3 don't really</font>

822
00:36:40,960 --> 00:36:44,650
sound sexy do they

823
00:36:42,390 --> 00:36:47,430
now we were at by the way we were

824
00:36:44,650 --> 00:36:50,020
actually<font color="#E5E5E5"> tracking these guys for a while</font>

825
00:36:47,430 --> 00:36:51,850
<font color="#CCCCCC">and</font><font color="#E5E5E5"> I knew</font><font color="#CCCCCC"> that this was the</font><font color="#E5E5E5"> research</font>

826
00:36:50,020 --> 00:36:53,620
team working on<font color="#E5E5E5"> the project</font><font color="#CCCCCC"> and of</font>

827
00:36:51,850 --> 00:36:54,730
course there<font color="#E5E5E5"> are websites you</font><font color="#CCCCCC"> can go to</font>

828
00:36:53,620 --> 00:36:57,549
where you can track

829
00:36:54,730 --> 00:37:00,070
everybody's domain registration so<font color="#E5E5E5"> I was</font>

830
00:36:57,550 --> 00:37:02,680
<font color="#E5E5E5">using a side channel for some time to</font>

831
00:37:00,070 --> 00:37:04,000
<font color="#CCCCCC">monitor the researchers to see what they</font>

832
00:37:02,680 --> 00:37:06,700
<font color="#E5E5E5">would name</font><font color="#CCCCCC"> it</font>

833
00:37:04,000 --> 00:37:09,460
so we discovered<font color="#E5E5E5"> the meltdown inspector</font>

834
00:37:06,700 --> 00:37:11,410
<font color="#E5E5E5">domains</font><font color="#CCCCCC"> the moment they registered them</font>

835
00:37:09,460 --> 00:37:13,900
in<font color="#E5E5E5"> December and consequently had a</font>

836
00:37:11,410 --> 00:37:17,680
<font color="#CCCCCC">little bit of time to you know</font><font color="#E5E5E5"> figure</font>

837
00:37:13,900 --> 00:37:20,410
<font color="#CCCCCC">out how they would</font><font color="#E5E5E5"> position it and what</font>

838
00:37:17,680 --> 00:37:23,799
these attacks do is they exploit the

839
00:37:20,410 --> 00:37:26,500
things I<font color="#E5E5E5"> just described to you to bypass</font>

840
00:37:23,800 --> 00:37:29,350
normal system security boundaries<font color="#E5E5E5"> and</font>

841
00:37:26,500 --> 00:37:30,700
let's go<font color="#E5E5E5"> through how they do that well</font>

842
00:37:29,350 --> 00:37:31,980
firstly if you're on a<font color="#E5E5E5"> Linux machine</font>

843
00:37:30,700 --> 00:37:35,100
<font color="#CCCCCC">don't panic</font>

844
00:37:31,980 --> 00:37:37,690
don't let<font color="#E5E5E5"> your machine panic because</font>

845
00:37:35,100 --> 00:37:40,029
very recent Linux kernels and certainly

846
00:37:37,690 --> 00:37:43,090
those from the distros<font color="#E5E5E5"> will very soon</font>

847
00:37:40,030 --> 00:37:45,760
start to<font color="#E5E5E5"> have this directory</font><font color="#CCCCCC"> sistas</font>

848
00:37:43,090 --> 00:37:49,980
<font color="#E5E5E5">system CPU vulnerabilities we are</font>

849
00:37:45,760 --> 00:37:49,980
thinking<font color="#E5E5E5"> there may be more over time</font>

850
00:37:50,280 --> 00:37:55,630
<font color="#E5E5E5">it's good to leave room right and and</font>

851
00:37:53,260 --> 00:37:57,520
<font color="#E5E5E5">you will see entries in there for these</font>

852
00:37:55,630 --> 00:38:00,820
attacks<font color="#E5E5E5"> and then potentially</font><font color="#CCCCCC"> future</font><font color="#E5E5E5"> ones</font>

853
00:37:57,520 --> 00:38:03,580
<font color="#E5E5E5">along with what your machine</font><font color="#CCCCCC"> is doing to</font>

854
00:38:00,820 --> 00:38:06,010
mitigate<font color="#E5E5E5"> this right that's not to fix it</font>

855
00:38:03,580 --> 00:38:08,290
because fixing it would require<font color="#CCCCCC"> that we</font>

856
00:38:06,010 --> 00:38:09,820
change the hardware<font color="#E5E5E5"> in some cases but we</font>

857
00:38:08,290 --> 00:38:12,990
can mitigate it we can take<font color="#CCCCCC"> a</font>

858
00:38:09,820 --> 00:38:15,520
performance hit and do something to

859
00:38:12,990 --> 00:38:16,319
remove the<font color="#CCCCCC"> ability to</font><font color="#E5E5E5"> exploit these</font>

860
00:38:15,520 --> 00:38:21,180
attacks

861
00:38:16,320 --> 00:38:25,170
<font color="#E5E5E5">um so meltdown relies upon some</font>

862
00:38:21,180 --> 00:38:28,359
implementations of speculative<font color="#E5E5E5"> execution</font>

863
00:38:25,170 --> 00:38:33,660
<font color="#E5E5E5">literally following what Tomasulo did</font>

864
00:38:28,360 --> 00:38:37,780
<font color="#E5E5E5">and the key piece is that they handle</font>

865
00:38:33,660 --> 00:38:39,540
exceptions they handle problems from

866
00:38:37,780 --> 00:38:42,940
accessing<font color="#E5E5E5"> data you're not supposed</font><font color="#CCCCCC"> to</font>

867
00:38:39,540 --> 00:38:45,220
write at the<font color="#CCCCCC"> end they allow you</font><font color="#E5E5E5"> to</font>

868
00:38:42,940 --> 00:38:48,250
speculatively do something but then they

869
00:38:45,220 --> 00:38:50,230
say before I retire<font color="#E5E5E5"> before I ever</font>

870
00:38:48,250 --> 00:38:52,120
complete that operation I'll I'll<font color="#CCCCCC"> just</font>

871
00:38:50,230 --> 00:38:55,600
make sure I'm supposed<font color="#CCCCCC"> to and I'll throw</font>

872
00:38:52,120 --> 00:38:55,990
<font color="#E5E5E5">it away if I'm not so you might see a</font>

873
00:38:55,600 --> 00:38:57,610
piece<font color="#E5E5E5"> of</font>

874
00:38:55,990 --> 00:39:00,430
code like this<font color="#CCCCCC"> don't worry we'll talk</font>

875
00:38:57,610 --> 00:39:03,430
through<font color="#E5E5E5"> what it does in a moment</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> fact</font>

876
00:39:00,430 --> 00:39:09,368
I think I have<font color="#CCCCCC"> it</font><font color="#E5E5E5"> on the next slide okay</font>

877
00:39:03,430 --> 00:39:11,049
so so I might have<font color="#E5E5E5"> some secret data who</font>

878
00:39:09,369 --> 00:39:15,280
knows what it contains some magic data

879
00:39:11,050 --> 00:39:17,440
in my Linux kernel<font color="#CCCCCC"> I want to read and if</font>

880
00:39:15,280 --> 00:39:19,540
I can<font color="#E5E5E5"> arrange for a little piece of</font><font color="#CCCCCC"> code</font>

881
00:39:17,440 --> 00:39:21,910
<font color="#E5E5E5">to</font><font color="#CCCCCC"> run speculatively it means it's</font><font color="#E5E5E5"> not</font>

882
00:39:19,540 --> 00:39:24,670
actually<font color="#E5E5E5"> necessarily going to be part of</font>

883
00:39:21,910 --> 00:39:28,060
my program<font color="#E5E5E5"> I put it inside</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> branch that</font>

884
00:39:24,670 --> 00:39:31,210
may or may<font color="#CCCCCC"> not run what I can do inside</font>

885
00:39:28,060 --> 00:39:35,350
that<font color="#CCCCCC"> piece of</font><font color="#E5E5E5"> code is I can read that</font>

886
00:39:31,210 --> 00:39:38,140
pointer<font color="#E5E5E5"> quite happily now if my</font><font color="#CCCCCC"> program</font>

887
00:39:35,350 --> 00:39:39,490
ever retires those instructions I'm

888
00:39:38,140 --> 00:39:43,299
going to get an exception<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> gonna</font>

889
00:39:39,490 --> 00:39:46,450
crash<font color="#E5E5E5"> that's not useful right but what I</font>

890
00:39:43,300 --> 00:39:49,390
can do while the speculation<font color="#CCCCCC"> is</font>

891
00:39:46,450 --> 00:39:51,850
happening<font color="#CCCCCC"> I can use the value of that</font>

892
00:39:49,390 --> 00:39:55,118
data<font color="#E5E5E5"> to access some other data</font><font color="#CCCCCC"> that I do</font>

893
00:39:51,850 --> 00:39:58,210
have control over<font color="#E5E5E5"> and I can actually</font>

894
00:39:55,119 --> 00:40:01,990
<font color="#E5E5E5">influence which data I access remember I</font>

895
00:39:58,210 --> 00:40:05,320
said before I can also determine whether

896
00:40:01,990 --> 00:40:07,390
something<font color="#CCCCCC"> is in my cache based upon the</font>

897
00:40:05,320 --> 00:40:09,190
access time for it<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I've got all the</font>

898
00:40:07,390 --> 00:40:12,910
pieces I need<font color="#E5E5E5"> I figure out the data I</font>

899
00:40:09,190 --> 00:40:15,790
<font color="#E5E5E5">want I mask out a little piece I want</font><font color="#CCCCCC"> to</font>

900
00:40:12,910 --> 00:40:18,790
read<font color="#E5E5E5"> I then access some other piece of</font>

901
00:40:15,790 --> 00:40:21,970
<font color="#CCCCCC">data I have control over</font><font color="#E5E5E5"> and the offset</font>

902
00:40:18,790 --> 00:40:24,580
<font color="#E5E5E5">I access is based upon the value I</font><font color="#CCCCCC"> just</font>

903
00:40:21,970 --> 00:40:26,890
read and then what I'm going<font color="#E5E5E5"> to do back</font>

904
00:40:24,580 --> 00:40:28,330
outside<font color="#CCCCCC"> of my speculation</font><font color="#E5E5E5"> is I'm going</font>

905
00:40:26,890 --> 00:40:33,100
<font color="#E5E5E5">to measure which of those two locations</font>

906
00:40:28,330 --> 00:40:37,450
<font color="#E5E5E5">I loaded if I load one location</font><font color="#CCCCCC"> for</font>

907
00:40:33,100 --> 00:40:40,660
<font color="#CCCCCC">example 100 that</font><font color="#E5E5E5"> means one</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> if I</font>

908
00:40:37,450 --> 00:40:42,100
load<font color="#CCCCCC"> if I if my code loaded from the</font>

909
00:40:40,660 --> 00:40:44,950
<font color="#E5E5E5">other location</font><font color="#CCCCCC"> that means something</font>

910
00:40:42,100 --> 00:40:47,859
<font color="#E5E5E5">different the actual value I read isn't</font>

911
00:40:44,950 --> 00:40:49,509
visible<font color="#E5E5E5"> to me right</font><font color="#CCCCCC"> the speculation</font>

912
00:40:47,859 --> 00:40:52,299
<font color="#E5E5E5">Hardware took care of throwing all</font><font color="#CCCCCC"> that</font>

913
00:40:49,510 --> 00:40:55,350
<font color="#E5E5E5">state away but because</font><font color="#CCCCCC"> they because</font>

914
00:40:52,300 --> 00:40:58,990
there's a shared cache and I can<font color="#E5E5E5"> observe</font>

915
00:40:55,350 --> 00:41:01,690
what happened from the point of<font color="#E5E5E5"> view</font><font color="#CCCCCC"> of</font>

916
00:40:58,990 --> 00:41:04,209
the cache<font color="#CCCCCC"> I can see that value and</font><font color="#E5E5E5"> I can</font>

917
00:41:01,690 --> 00:41:07,570
<font color="#E5E5E5">there therefore consequently use the</font>

918
00:41:04,210 --> 00:41:09,730
same<font color="#E5E5E5"> piece of code I gave you</font><font color="#CCCCCC"> before to</font>

919
00:41:07,570 --> 00:41:11,619
work out which of those locations

920
00:41:09,730 --> 00:41:13,660
zero-one<font color="#E5E5E5"> signaling</font><font color="#CCCCCC"> I can reconstruct</font>

921
00:41:11,619 --> 00:41:16,300
<font color="#E5E5E5">that piece of data</font><font color="#CCCCCC"> I can do</font><font color="#E5E5E5"> that in a</font>

922
00:41:13,660 --> 00:41:18,640
loop<font color="#CCCCCC"> and I can read out the</font><font color="#E5E5E5"> data</font>

923
00:41:16,300 --> 00:41:23,530
now the actual meltdown exploit you'll

924
00:41:18,640 --> 00:41:25,390
read<font color="#CCCCCC"> online is a bit more detailed</font><font color="#E5E5E5"> and</font>

925
00:41:23,530 --> 00:41:27,070
they've got some optimizations<font color="#E5E5E5"> this is</font>

926
00:41:25,390 --> 00:41:30,400
the version<font color="#CCCCCC"> that I put together in</font>

927
00:41:27,070 --> 00:41:33,550
<font color="#CCCCCC">December because we had</font><font color="#E5E5E5"> to mitigate this</font>

928
00:41:30,400 --> 00:41:35,530
<font color="#E5E5E5">and we weren't given reproducers just</font>

929
00:41:33,550 --> 00:41:38,290
enough to be dangerous<font color="#E5E5E5"> and then some</font>

930
00:41:35,530 --> 00:41:40,420
<font color="#E5E5E5">folks</font><font color="#CCCCCC"> I think I was</font><font color="#E5E5E5"> told that we were</font>

931
00:41:38,290 --> 00:41:42,220
not that<font color="#E5E5E5"> sophisticated</font><font color="#CCCCCC"> so don't worry</font>

932
00:41:40,420 --> 00:41:44,020
well I don't like being<font color="#CCCCCC"> told</font><font color="#E5E5E5"> that so I</font>

933
00:41:42,220 --> 00:41:45,759
went<font color="#E5E5E5"> and figured</font><font color="#CCCCCC"> it out and</font><font color="#E5E5E5"> made a</font>

934
00:41:44,020 --> 00:41:49,090
reproducer that really annoys me when

935
00:41:45,760 --> 00:41:51,430
<font color="#E5E5E5">someone says that</font><font color="#CCCCCC"> so that was</font><font color="#E5E5E5"> great</font><font color="#CCCCCC"> so</font>

936
00:41:49,090 --> 00:41:53,230
this<font color="#E5E5E5"> is what my code does the actual</font>

937
00:41:51,430 --> 00:41:55,569
code the<font color="#CCCCCC"> researchers published</font><font color="#E5E5E5"> is a</font>

938
00:41:53,230 --> 00:41:58,600
little bit more optimized but<font color="#E5E5E5"> you get</font>

939
00:41:55,570 --> 00:42:01,869
the idea<font color="#CCCCCC"> you can't read that</font><font color="#E5E5E5"> secret data</font>

940
00:41:58,600 --> 00:42:06,970
but<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can observe what it was based</font>

941
00:42:01,869 --> 00:42:08,350
<font color="#CCCCCC">upon what it did to</font><font color="#E5E5E5"> the caches</font><font color="#CCCCCC"> and</font>

942
00:42:06,970 --> 00:42:12,609
<font color="#E5E5E5">here's here's again here's the example</font>

943
00:42:08,350 --> 00:42:14,290
<font color="#E5E5E5">code and you can read through the slides</font>

944
00:42:12,609 --> 00:42:17,680
to kind of get<font color="#E5E5E5"> that to make a bit more</font>

945
00:42:14,290 --> 00:42:21,580
<font color="#CCCCCC">sense for</font><font color="#E5E5E5"> you as well</font><font color="#CCCCCC"> so when the right</font>

946
00:42:17,680 --> 00:42:25,660
<font color="#CCCCCC">conditions exist</font><font color="#E5E5E5"> I can exploit this how</font>

947
00:42:21,580 --> 00:42:27,609
<font color="#E5E5E5">can I mitigate for it well</font><font color="#CCCCCC"> there are</font>

948
00:42:25,660 --> 00:42:32,710
certain<font color="#CCCCCC"> circumstances required to make</font>

949
00:42:27,609 --> 00:42:35,259
this possible<font color="#CCCCCC"> to it abuse</font><font color="#E5E5E5"> for example in</font>

950
00:42:32,710 --> 00:42:37,980
<font color="#E5E5E5">some implementations it might have to</font><font color="#CCCCCC"> be</font>

951
00:42:35,260 --> 00:42:39,880
in<font color="#CCCCCC"> my</font><font color="#E5E5E5"> very innermost level</font><font color="#CCCCCC"> one cache I</font>

952
00:42:37,980 --> 00:42:42,190
might be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to flush that cache</font>

953
00:42:39,880 --> 00:42:43,300
whenever I leave the kernel there might

954
00:42:42,190 --> 00:42:46,240
be some people<font color="#E5E5E5"> out</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> are</font>

955
00:42:43,300 --> 00:42:49,090
mitigating that way<font color="#CCCCCC"> the other</font><font color="#E5E5E5"> thing I</font>

956
00:42:46,240 --> 00:42:52,240
could do is I could change how I do my

957
00:42:49,090 --> 00:42:53,800
page tables so that<font color="#E5E5E5"> the kernel memory is</font>

958
00:42:52,240 --> 00:42:56,799
never visible<font color="#E5E5E5"> when I'm running</font><font color="#CCCCCC"> an</font>

959
00:42:53,800 --> 00:42:58,630
application<font color="#CCCCCC"> I</font><font color="#E5E5E5"> can do that it's</font><font color="#CCCCCC"> just a</font>

960
00:42:56,800 --> 00:43:00,730
performance<font color="#E5E5E5"> hit because</font><font color="#CCCCCC"> now every time</font><font color="#E5E5E5"> I</font>

961
00:42:58,630 --> 00:43:02,950
<font color="#E5E5E5">go into my kernel</font><font color="#CCCCCC"> I have to twiddle my</font>

962
00:43:00,730 --> 00:43:06,820
page tables around<font color="#E5E5E5"> that's a technical</font>

963
00:43:02,950 --> 00:43:09,279
<font color="#E5E5E5">term</font><font color="#CCCCCC"> and I take a hit that costs me time</font>

964
00:43:06,820 --> 00:43:11,350
<font color="#E5E5E5">right that's why meltdown mitigation</font>

965
00:43:09,280 --> 00:43:15,490
with page table isolation has a

966
00:43:11,350 --> 00:43:16,569
performance<font color="#CCCCCC"> hit there are optimizations</font>

967
00:43:15,490 --> 00:43:19,180
there's something called<font color="#CCCCCC"> assets you</font><font color="#E5E5E5"> can</font>

968
00:43:16,570 --> 00:43:19,810
you can read more about this<font color="#E5E5E5"> okay let's</font>

969
00:43:19,180 --> 00:43:22,710
do<font color="#CCCCCC"> Specter</font>

970
00:43:19,810 --> 00:43:25,589
I'm running<font color="#CCCCCC"> on time</font>

971
00:43:22,710 --> 00:43:28,440
<font color="#CCCCCC">factor so we have this</font><font color="#E5E5E5"> concept of</font>

972
00:43:25,589 --> 00:43:30,990
gadgets gadgets<font color="#E5E5E5"> we read about</font>

973
00:43:28,440 --> 00:43:32,730
return-oriented programming<font color="#CCCCCC"> ROPS these</font>

974
00:43:30,990 --> 00:43:35,520
are common kind<font color="#CCCCCC"> of stack smashing</font>

975
00:43:32,730 --> 00:43:37,500
attacks in<font color="#E5E5E5"> security arenas gadgets are</font>

976
00:43:35,520 --> 00:43:40,140
pieces<font color="#E5E5E5"> of code</font><font color="#CCCCCC"> that already exists in a</font>

977
00:43:37,500 --> 00:43:42,510
victim or target program<font color="#E5E5E5"> and I'm gonna</font>

978
00:43:40,140 --> 00:43:44,819
cause that<font color="#E5E5E5"> code to execute it's already</font>

979
00:43:42,510 --> 00:43:46,020
there<font color="#E5E5E5"> I'm just going</font><font color="#CCCCCC"> to influence</font><font color="#E5E5E5"> the</font>

980
00:43:44,820 --> 00:43:49,020
<font color="#E5E5E5">environment so that that piece of</font>

981
00:43:46,020 --> 00:43:50,970
<font color="#E5E5E5">particular code I found that does</font>

982
00:43:49,020 --> 00:43:53,070
something<font color="#CCCCCC"> I want</font><font color="#E5E5E5"> similar a similar</font>

983
00:43:50,970 --> 00:43:55,290
<font color="#CCCCCC">sequence to what you saw before</font><font color="#E5E5E5"> you know</font>

984
00:43:53,070 --> 00:43:57,540
load some data<font color="#CCCCCC"> I can infer what the</font><font color="#E5E5E5"> data</font>

985
00:43:55,290 --> 00:43:59,670
was based on the<font color="#E5E5E5"> address it loaded that</font>

986
00:43:57,540 --> 00:44:00,960
<font color="#E5E5E5">kind of thing</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I find a piece of code</font>

987
00:43:59,670 --> 00:44:05,010
<font color="#E5E5E5">that's particularly</font><font color="#CCCCCC"> interesting and</font><font color="#E5E5E5"> I</font>

988
00:44:00,960 --> 00:44:08,910
abuse it so here's an example<font color="#CCCCCC"> expect a</font>

989
00:44:05,010 --> 00:44:12,650
variant one I might have a piece<font color="#CCCCCC"> of code</font>

990
00:44:08,910 --> 00:44:16,319
that<font color="#CCCCCC"> reads some data in from</font><font color="#E5E5E5"> the user</font>

991
00:44:12,650 --> 00:44:21,839
untrusted data I might then do some

992
00:44:16,320 --> 00:44:24,570
other<font color="#CCCCCC"> stuff and it turns out some micro</font>

993
00:44:21,839 --> 00:44:28,320
processors will keep executing<font color="#E5E5E5"> before</font>

994
00:44:24,570 --> 00:44:31,950
they know whether they should<font color="#E5E5E5"> and so if</font>

995
00:44:28,320 --> 00:44:34,680
I find<font color="#E5E5E5"> a place where a particular bad</font>

996
00:44:31,950 --> 00:44:35,430
sequence<font color="#E5E5E5"> of code exists I can I can</font>

997
00:44:34,680 --> 00:44:37,890
exploit that

998
00:44:35,430 --> 00:44:39,270
that's<font color="#CCCCCC"> Specter variant</font><font color="#E5E5E5"> one it's</font>

999
00:44:37,890 --> 00:44:41,098
difficult to do because I got to find

1000
00:44:39,270 --> 00:44:42,359
<font color="#E5E5E5">just the</font><font color="#CCCCCC"> right code it's got to be kind</font>

1001
00:44:41,099 --> 00:44:46,609
<font color="#E5E5E5">of on an entry point into</font><font color="#CCCCCC"> the kernel</font>

1002
00:44:42,359 --> 00:44:46,609
<font color="#CCCCCC">there's one reproducer it's a bit</font><font color="#E5E5E5"> messy</font>

1003
00:44:47,540 --> 00:44:52,410
let's talk<font color="#CCCCCC"> Oh and the mitigation</font><font color="#E5E5E5"> for</font>

1004
00:44:49,859 --> 00:44:54,799
variant<font color="#E5E5E5"> one is well don't do it so what</font>

1005
00:44:52,410 --> 00:44:58,200
I do is I shove an instruction in here

1006
00:44:54,800 --> 00:45:01,589
that prevents the code from continuing

1007
00:44:58,200 --> 00:45:04,348
past<font color="#E5E5E5"> the point of doing of doing</font>

1008
00:45:01,589 --> 00:45:06,660
potentially a speculative<font color="#E5E5E5"> load and that</font>

1009
00:45:04,349 --> 00:45:11,790
requires that<font color="#E5E5E5"> I rebuilt my my operating</font>

1010
00:45:06,660 --> 00:45:13,859
system my kernel I talked about<font color="#E5E5E5"> branch</font>

1011
00:45:11,790 --> 00:45:15,540
predictors before so I've also got a

1012
00:45:13,859 --> 00:45:17,910
very to inspector which is the branch

1013
00:45:15,540 --> 00:45:20,930
predictor poisoning<font color="#E5E5E5"> and that is since I</font>

1014
00:45:17,910 --> 00:45:25,020
know how branch predictors behave

1015
00:45:20,930 --> 00:45:29,460
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> maybe not fully disambiguated</font>

1016
00:45:25,020 --> 00:45:31,890
addressing<font color="#CCCCCC"> I can exploit that</font><font color="#E5E5E5"> I can have</font>

1017
00:45:29,460 --> 00:45:35,070
one process running<font color="#E5E5E5"> that's training my</font>

1018
00:45:31,890 --> 00:45:35,410
branch predictor<font color="#E5E5E5"> to guess wrongly when</font>

1019
00:45:35,070 --> 00:45:37,089
some

1020
00:45:35,410 --> 00:45:40,029
else is running<font color="#CCCCCC"> if that something else</font>

1021
00:45:37,089 --> 00:45:44,259
is<font color="#CCCCCC"> more privileged</font><font color="#E5E5E5"> or the</font><font color="#CCCCCC"> kernel I can</font>

1022
00:45:40,030 --> 00:45:46,299
exploit what will happen there so I can

1023
00:45:44,260 --> 00:45:49,539
<font color="#CCCCCC">poison my branch predictor</font><font color="#E5E5E5"> in particular</font>

1024
00:45:46,299 --> 00:45:51,339
my indirect predictor<font color="#CCCCCC"> to guess that it's</font>

1025
00:45:49,539 --> 00:45:53,829
going<font color="#E5E5E5"> to make</font><font color="#CCCCCC"> a jump</font><font color="#E5E5E5"> into some code that</font>

1026
00:45:51,339 --> 00:45:56,410
<font color="#E5E5E5">it in fact is not it will then</font>

1027
00:45:53,829 --> 00:45:58,059
speculatively execute whatever gadget

1028
00:45:56,410 --> 00:46:00,339
code I want so<font color="#CCCCCC"> now I've got control over</font>

1029
00:45:58,059 --> 00:46:02,260
where<font color="#E5E5E5"> that gadget code is that's much</font>

1030
00:46:00,339 --> 00:46:04,270
more<font color="#E5E5E5"> interesting to</font><font color="#CCCCCC"> me cuz in a very</font>

1031
00:46:02,260 --> 00:46:06,280
<font color="#E5E5E5">large thing</font><font color="#CCCCCC"> like the kernel</font><font color="#E5E5E5"> I'm probably</font>

1032
00:46:04,270 --> 00:46:08,980
going<font color="#E5E5E5"> to find a particular instruction</font>

1033
00:46:06,280 --> 00:46:11,400
<font color="#E5E5E5">sequence that's interesting to me</font><font color="#CCCCCC"> I set</font>

1034
00:46:08,980 --> 00:46:16,260
up the environment<font color="#CCCCCC"> I</font><font color="#E5E5E5"> train my predictor</font>

1035
00:46:11,400 --> 00:46:19,059
<font color="#CCCCCC">and I can exploit it I'll wrap quickly</font>

1036
00:46:16,260 --> 00:46:22,780
<font color="#CCCCCC">mitigating it there are two</font><font color="#E5E5E5"> ways I've</font>

1037
00:46:19,059 --> 00:46:25,210
got a big hammer which is<font color="#E5E5E5"> expensive</font><font color="#CCCCCC"> I</font>

1038
00:46:22,780 --> 00:46:30,700
can turn off my predictors when<font color="#E5E5E5"> I go</font>

1039
00:46:25,210 --> 00:46:32,079
<font color="#E5E5E5">into or out of</font><font color="#CCCCCC"> my kernel or I can use a</font>

1040
00:46:30,700 --> 00:46:34,089
technique<font color="#E5E5E5"> that Google came up with</font>

1041
00:46:32,079 --> 00:46:37,210
called<font color="#CCCCCC"> ret</font><font color="#E5E5E5"> Pauline's which you can be</font>

1042
00:46:34,089 --> 00:46:40,599
more<font color="#E5E5E5"> about in here which change</font><font color="#CCCCCC"> in</font>

1043
00:46:37,210 --> 00:46:41,950
<font color="#E5E5E5">direct calls into fake</font><font color="#CCCCCC"> return calls it's</font>

1044
00:46:40,599 --> 00:46:44,950
kind of<font color="#E5E5E5"> interesting it's</font><font color="#CCCCCC"> like if it</font>

1045
00:46:41,950 --> 00:46:47,439
hurts doing this<font color="#E5E5E5"> don't do it right so</font>

1046
00:46:44,950 --> 00:46:51,788
they<font color="#CCCCCC"> have a way</font><font color="#E5E5E5"> a code particular code</font>

1047
00:46:47,440 --> 00:46:54,460
sequence where they will modify what

1048
00:46:51,789 --> 00:46:57,760
looked like indirect function<font color="#E5E5E5"> calls</font><font color="#CCCCCC"> and</font>

1049
00:46:54,460 --> 00:46:59,079
make them look like function returns so

1050
00:46:57,760 --> 00:47:01,900
they won't<font color="#E5E5E5"> use the indirect predictor</font>

1051
00:46:59,079 --> 00:47:04,900
it's a cute hack<font color="#E5E5E5"> it's not nonsense it's</font>

1052
00:47:01,900 --> 00:47:06,849
it's it's very<font color="#E5E5E5"> it's very interesting and</font>

1053
00:47:04,900 --> 00:47:09,069
it does<font color="#CCCCCC"> unfortunately also require you</font>

1054
00:47:06,849 --> 00:47:11,109
change your compiler<font color="#E5E5E5"> and rebuild lots of</font>

1055
00:47:09,069 --> 00:47:14,190
things<font color="#E5E5E5"> so we are switching to that one</font>

1056
00:47:11,109 --> 00:47:16,538
<font color="#E5E5E5">because it's much more performance than</font>

1057
00:47:14,190 --> 00:47:19,839
<font color="#E5E5E5">turning off our branch predictors</font>

1058
00:47:16,539 --> 00:47:22,240
everywhere and it also does cute stuff

1059
00:47:19,839 --> 00:47:23,558
like put a harmless infinite loop in if

1060
00:47:22,240 --> 00:47:29,430
you're going<font color="#CCCCCC"> to speculate just speculate</font>

1061
00:47:23,559 --> 00:47:32,289
that<font color="#E5E5E5"> and go</font><font color="#CCCCCC"> away it's kind of fun okay</font>

1062
00:47:29,430 --> 00:47:35,049
<font color="#E5E5E5">and</font><font color="#CCCCCC"> there's there other variants of this</font>

1063
00:47:32,289 --> 00:47:36,970
coming<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> wrap now so related</font>

1064
00:47:35,049 --> 00:47:38,859
research<font color="#CCCCCC"> so this is</font><font color="#E5E5E5"> just the beginning</font>

1065
00:47:36,970 --> 00:47:39,939
<font color="#CCCCCC">right architecture junkies like me</font><font color="#E5E5E5"> you</font>

1066
00:47:38,859 --> 00:47:41,710
know I'm not<font color="#CCCCCC"> gonna say we're excited</font>

1067
00:47:39,940 --> 00:47:44,890
because that's<font color="#E5E5E5"> a bit unfair</font>

1068
00:47:41,710 --> 00:47:46,510
it stops<font color="#E5E5E5"> you very serious</font><font color="#CCCCCC"> and you should</font>

1069
00:47:44,890 --> 00:47:47,828
update your<font color="#E5E5E5"> machines</font><font color="#CCCCCC"> straightaway and</font>

1070
00:47:46,510 --> 00:47:48,380
<font color="#E5E5E5">all that kind of stuff but it is</font>

1071
00:47:47,829 --> 00:47:50,690
interest

1072
00:47:48,380 --> 00:47:53,500
thing<font color="#E5E5E5"> that a lot more</font><font color="#CCCCCC"> people are paying</font>

1073
00:47:50,690 --> 00:47:55,519
<font color="#E5E5E5">attention to</font><font color="#CCCCCC"> these classes of</font><font color="#E5E5E5"> attack now</font>

1074
00:47:53,500 --> 00:47:58,609
<font color="#CCCCCC">and that means that researchers</font><font color="#E5E5E5"> will</font>

1075
00:47:55,519 --> 00:48:02,118
<font color="#E5E5E5">find more of them hopefully</font><font color="#CCCCCC"> we will make</font>

1076
00:47:58,609 --> 00:48:03,769
better machines as a result<font color="#CCCCCC"> and other</font>

1077
00:48:02,119 --> 00:48:05,299
<font color="#E5E5E5">related research will happen right</font><font color="#CCCCCC"> so</font>

1078
00:48:03,769 --> 00:48:07,299
you guys can can read<font color="#E5E5E5"> about these later</font>

1079
00:48:05,299 --> 00:48:09,769
<font color="#CCCCCC">you can read about the row hammer attack</font>

1080
00:48:07,299 --> 00:48:12,410
<font color="#CCCCCC">and you can read</font><font color="#E5E5E5"> about magic which is my</font>

1081
00:48:09,769 --> 00:48:14,359
favorite one<font color="#CCCCCC"> that one is writing special</font>

1082
00:48:12,410 --> 00:48:16,490
sequences of instructions<font color="#E5E5E5"> which when you</font>

1083
00:48:14,359 --> 00:48:20,960
<font color="#E5E5E5">execute them will physically age your</font>

1084
00:48:16,490 --> 00:48:23,660
<font color="#E5E5E5">hardware right</font><font color="#CCCCCC"> the bottom line is</font>

1085
00:48:20,960 --> 00:48:25,640
<font color="#E5E5E5">everything you thought may or may not be</font>

1086
00:48:23,660 --> 00:48:30,019
<font color="#CCCCCC">possible now is a good time to</font><font color="#E5E5E5"> go back</font>

1087
00:48:25,640 --> 00:48:31,460
<font color="#E5E5E5">and think about it</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> in</font>

1088
00:48:30,019 --> 00:48:34,549
summary we talked about<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> things</font>

1089
00:48:31,460 --> 00:48:37,190
<font color="#E5E5E5">and you</font><font color="#CCCCCC"> guys can go on twitter at John</font>

1090
00:48:34,549 --> 00:48:39,200
<font color="#CCCCCC">masters</font><font color="#E5E5E5"> and you can find the links to</font>

1091
00:48:37,190 --> 00:48:40,339
<font color="#CCCCCC">all the slides I will</font><font color="#E5E5E5"> happily take this</font>

1092
00:48:39,200 --> 00:48:42,828
time for<font color="#CCCCCC"> one</font><font color="#E5E5E5"> or two</font><font color="#CCCCCC"> questions now</font>

1093
00:48:40,339 --> 00:48:44,090
<font color="#E5E5E5">otherwise I will be around after and I'd</font>

1094
00:48:42,829 --> 00:48:55,450
like<font color="#E5E5E5"> to thank you</font><font color="#CCCCCC"> very much</font>

1095
00:48:44,090 --> 00:48:57,610
[Applause]

1096
00:48:55,450 --> 00:49:00,609
[Music]

1097
00:48:57,610 --> 00:49:00,610
we

1098
00:49:03,540 --> 00:49:08,940
we have time for<font color="#CCCCCC"> questions so</font><font color="#E5E5E5"> please put</font>

1099
00:49:06,840 --> 00:49:15,510
<font color="#E5E5E5">your hand up and we can bring the mic to</font>

1100
00:49:08,940 --> 00:49:17,730
you while you leave please<font color="#E5E5E5"> be quiet stop</font>

1101
00:49:15,510 --> 00:49:20,550
talking you<font color="#E5E5E5"> can tell outside but here</font>

1102
00:49:17,730 --> 00:49:26,070
please keep quiet - thank you<font color="#E5E5E5"> okay thank</font>

1103
00:49:20,550 --> 00:49:29,130
<font color="#CCCCCC">you very much so how can two different</font>

1104
00:49:26,070 --> 00:49:30,870
research teams<font color="#E5E5E5"> find the same flaws at</font>

1105
00:49:29,130 --> 00:49:35,250
the same time<font color="#E5E5E5"> what do you think</font><font color="#CCCCCC"> about</font>

1106
00:49:30,870 --> 00:49:37,290
this and I<font color="#CCCCCC"> think it goes also with what</font>

1107
00:49:35,250 --> 00:49:43,830
you said in the<font color="#E5E5E5"> end</font><font color="#CCCCCC"> why were the</font>

1108
00:49:37,290 --> 00:49:46,200
<font color="#CCCCCC">reviewers flaws not so the note talked</font>

1109
00:49:43,830 --> 00:49:48,509
<font color="#E5E5E5">about yeah yeah good</font><font color="#CCCCCC"> question is the</font>

1110
00:49:46,200 --> 00:49:49,049
second<font color="#E5E5E5"> part about keeping quiet while</font>

1111
00:49:48,510 --> 00:49:51,000
<font color="#CCCCCC">your lianca</font>

1112
00:49:49,050 --> 00:49:55,120
you're leaving<font color="#CCCCCC"> if you're leaving</font><font color="#E5E5E5"> he's</font>

1113
00:49:51,000 --> 00:49:57,730
just shut up thank you<font color="#E5E5E5"> thank you</font>

1114
00:49:55,120 --> 00:50:00,078
[Music]

1115
00:49:57,730 --> 00:50:04,160
usually people<font color="#E5E5E5"> tell</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> to shut</font><font color="#CCCCCC"> up but</font>

1116
00:50:00,079 --> 00:50:06,829
but<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is better</font><font color="#E5E5E5"> I like this so so the</font>

1117
00:50:04,160 --> 00:50:08,509
<font color="#E5E5E5">question is how they'd so many several</font>

1118
00:50:06,829 --> 00:50:10,549
teams find this at<font color="#E5E5E5"> the same time right</font>

1119
00:50:08,510 --> 00:50:13,069
<font color="#E5E5E5">well it's very interesting</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> that</font>

1120
00:50:10,549 --> 00:50:14,839
<font color="#E5E5E5">the most of the teams were in Austria</font>

1121
00:50:13,069 --> 00:50:16,400
<font color="#CCCCCC">Germany kind of airier and all they all</font>

1122
00:50:14,839 --> 00:50:19,609
the guys<font color="#CCCCCC"> knew each other I'm sure that</font>

1123
00:50:16,400 --> 00:50:23,960
had<font color="#CCCCCC"> nothing</font><font color="#E5E5E5"> to do with it</font><font color="#CCCCCC"> but I think</font>

1124
00:50:19,609 --> 00:50:26,240
<font color="#CCCCCC">more more specifically if you look over</font>

1125
00:50:23,960 --> 00:50:27,740
<font color="#E5E5E5">the last few</font><font color="#CCCCCC"> years the guys that the</font>

1126
00:50:26,240 --> 00:50:33,410
Technical University of<font color="#E5E5E5"> Graz who</font>

1127
00:50:27,740 --> 00:50:35,328
<font color="#E5E5E5">absolutely amazing they they found a</font>

1128
00:50:33,410 --> 00:50:37,520
whole sequence of different<font color="#E5E5E5"> related</font>

1129
00:50:35,329 --> 00:50:39,589
exploits<font color="#E5E5E5"> so this has built over time</font>

1130
00:50:37,520 --> 00:50:41,720
based on previous research<font color="#CCCCCC"> so the time</font>

1131
00:50:39,589 --> 00:50:44,270
was right for<font color="#CCCCCC"> this to happen and then</font>

1132
00:50:41,720 --> 00:50:50,480
one of the guys<font color="#E5E5E5"> posted a blog last July</font>

1133
00:50:44,270 --> 00:50:52,240
<font color="#E5E5E5">that came</font><font color="#CCCCCC"> very close to</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the meltdown</font>

1134
00:50:50,480 --> 00:50:54,650
attacks the<font color="#E5E5E5"> first thing we did when we</font>

1135
00:50:52,240 --> 00:50:56,959
<font color="#E5E5E5">were mitigating is discover all their</font>

1136
00:50:54,650 --> 00:50:59,750
research<font color="#E5E5E5"> and go back and read all this</font>

1137
00:50:56,960 --> 00:51:02,119
stuff<font color="#CCCCCC"> and it was very</font><font color="#E5E5E5"> helpful</font><font color="#CCCCCC"> so you</font>

1138
00:50:59,750 --> 00:51:03,440
know probably anyone else who you know

1139
00:51:02,119 --> 00:51:04,910
was doing research<font color="#CCCCCC"> in the interim and</font>

1140
00:51:03,440 --> 00:51:05,839
paying close<font color="#E5E5E5"> attention probably would</font>

1141
00:51:04,910 --> 00:51:08,299
have<font color="#E5E5E5"> seen</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and that would have</font>

1142
00:51:05,839 --> 00:51:11,089
helped so with just coincidence<font color="#E5E5E5"> that</font>

1143
00:51:08,299 --> 00:51:12,529
<font color="#CCCCCC">does happen based on lots of other</font>

1144
00:51:11,089 --> 00:51:15,109
research that<font color="#CCCCCC"> was all</font><font color="#E5E5E5"> happening over</font>

1145
00:51:12,529 --> 00:51:18,950
<font color="#CCCCCC">time it</font><font color="#E5E5E5"> just came together</font><font color="#CCCCCC"> another</font>

1146
00:51:15,109 --> 00:51:22,130
question I'd like<font color="#CCCCCC"> to say again</font><font color="#E5E5E5"> that both</font>

1147
00:51:18,950 --> 00:51:24,259
meltdown and<font color="#CCCCCC"> specter from scratch in 54</font>

1148
00:51:22,130 --> 00:51:27,559
minutes<font color="#E5E5E5"> is pretty impressive so well</font>

1149
00:51:24,260 --> 00:51:30,170
<font color="#E5E5E5">done um do you</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> means</font>

1150
00:51:27,559 --> 00:51:33,920
<font color="#E5E5E5">that we</font><font color="#CCCCCC"> need to be</font><font color="#E5E5E5"> designing processes</font>

1151
00:51:30,170 --> 00:51:36,230
which are easier<font color="#CCCCCC"> to change the way they</font>

1152
00:51:33,920 --> 00:51:38,750
work<font color="#E5E5E5"> after the fact</font><font color="#CCCCCC"> or do you think that</font>

1153
00:51:36,230 --> 00:51:40,970
<font color="#E5E5E5">adding that capability</font><font color="#CCCCCC"> would have other</font>

1154
00:51:38,750 --> 00:51:43,130
negative consequences<font color="#CCCCCC"> such as the</font>

1155
00:51:40,970 --> 00:51:44,930
ability<font color="#CCCCCC"> for rootkits and so on that</font>

1156
00:51:43,130 --> 00:51:47,450
<font color="#E5E5E5">would actually outweigh the benefits of</font>

1157
00:51:44,930 --> 00:51:50,419
being able<font color="#E5E5E5"> to perhaps tweak them more in</font>

1158
00:51:47,450 --> 00:51:51,980
the field<font color="#E5E5E5"> very</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> question so firstly</font>

1159
00:51:50,420 --> 00:51:55,039
<font color="#E5E5E5">I didn't get time to go</font><font color="#CCCCCC"> into it but on</font>

1160
00:51:51,980 --> 00:51:58,430
slide 80<font color="#E5E5E5"> there were 90 of these on slide</font>

1161
00:51:55,039 --> 00:52:00,200
80 I have one on how<font color="#E5E5E5"> microcode milli</font>

1162
00:51:58,430 --> 00:52:02,000
code and chicken bits<font color="#CCCCCC"> working processors</font>

1163
00:52:00,200 --> 00:52:05,000
and<font color="#E5E5E5"> how you can basically update some of</font>

1164
00:52:02,000 --> 00:52:07,460
<font color="#E5E5E5">them after the fact</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> use these things</font>

1165
00:52:05,000 --> 00:52:09,380
<font color="#E5E5E5">called chicken bits</font><font color="#CCCCCC"> every processor</font>

1166
00:52:07,460 --> 00:52:10,859
<font color="#E5E5E5">that's built these days especially</font><font color="#CCCCCC"> they</font>

1167
00:52:09,380 --> 00:52:13,440
<font color="#CCCCCC">have</font><font color="#E5E5E5"> really expensive ones</font>

1168
00:52:10,859 --> 00:52:16,230
the x86 ones will<font color="#CCCCCC"> have up to</font><font color="#E5E5E5"> 10,000</font>

1169
00:52:13,440 --> 00:52:18,060
<font color="#E5E5E5">little knobs called chicken bits so you</font>

1170
00:52:16,230 --> 00:52:19,560
can chicken<font color="#E5E5E5"> out and you can say this</font>

1171
00:52:18,060 --> 00:52:21,089
little<font color="#E5E5E5"> piece</font><font color="#CCCCCC"> of the design I'm not sure</font>

1172
00:52:19,560 --> 00:52:24,869
it's gonna<font color="#E5E5E5"> work</font><font color="#CCCCCC"> so I might</font><font color="#E5E5E5"> just make it</font>

1173
00:52:21,089 --> 00:52:26,460
<font color="#CCCCCC">possible</font><font color="#E5E5E5"> to turn it off later</font><font color="#CCCCCC"> and and so</font>

1174
00:52:24,869 --> 00:52:28,200
you've<font color="#E5E5E5"> about</font><font color="#CCCCCC"> 10,000 different</font><font color="#E5E5E5"> variants</font>

1175
00:52:26,460 --> 00:52:30,060
of that<font color="#E5E5E5"> in most most the high-end chips</font>

1176
00:52:28,200 --> 00:52:31,348
<font color="#CCCCCC">I'm not</font><font color="#E5E5E5"> joking and you can</font><font color="#CCCCCC"> normally find</font>

1177
00:52:30,060 --> 00:52:32,150
<font color="#CCCCCC">a combination of those you can</font><font color="#E5E5E5"> turn</font>

1178
00:52:31,349 --> 00:52:33,960
something off

1179
00:52:32,150 --> 00:52:34,920
microcode is a little bit different you

1180
00:52:33,960 --> 00:52:37,980
<font color="#E5E5E5">can read about I've</font><font color="#CCCCCC"> got a whole</font>

1181
00:52:34,920 --> 00:52:41,280
explainer on<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I do think we have to</font>

1182
00:52:37,980 --> 00:52:43,740
<font color="#CCCCCC">build chips that</font><font color="#E5E5E5"> are easier</font><font color="#CCCCCC"> to update I</font>

1183
00:52:41,280 --> 00:52:45,300
don't<font color="#CCCCCC"> think the answer is</font><font color="#E5E5E5"> just let's</font>

1184
00:52:43,740 --> 00:52:48,660
build risk<font color="#CCCCCC"> five machines everywhere</font>

1185
00:52:45,300 --> 00:52:51,780
<font color="#CCCCCC">there's nothing here that that separates</font>

1186
00:52:48,660 --> 00:52:53,640
<font color="#E5E5E5">any of the commercial chips from anyone</font>

1187
00:52:51,780 --> 00:52:56,910
<font color="#E5E5E5">else's design</font>

1188
00:52:53,640 --> 00:53:00,950
it's just<font color="#E5E5E5"> everyone building processors</font>

1189
00:52:56,910 --> 00:53:03,720
should think about designing for<font color="#E5E5E5"> infield</font>

1190
00:53:00,950 --> 00:53:05,609
<font color="#E5E5E5">mitigation and infield updates designed</font>

1191
00:53:03,720 --> 00:53:08,339
<font color="#E5E5E5">for</font><font color="#CCCCCC"> security and also consider this</font><font color="#E5E5E5"> if</font>

1192
00:53:05,609 --> 00:53:10,140
you<font color="#E5E5E5"> are targeting a new market now I'm</font>

1193
00:53:08,339 --> 00:53:13,950
very<font color="#E5E5E5"> fond of</font><font color="#CCCCCC"> armed servers some people</font>

1194
00:53:10,140 --> 00:53:15,420
know this<font color="#CCCCCC"> I always</font><font color="#E5E5E5"> told the</font><font color="#CCCCCC"> arm guys if</font>

1195
00:53:13,950 --> 00:53:17,399
you want to be<font color="#CCCCCC"> successful you're gonna</font>

1196
00:53:15,420 --> 00:53:19,560
go after public<font color="#CCCCCC"> cloud so that's now like</font>

1197
00:53:17,400 --> 00:53:21,480
<font color="#CCCCCC">100 million</font><font color="#E5E5E5"> you know 10 million machines</font>

1198
00:53:19,560 --> 00:53:24,420
all the<font color="#E5E5E5"> modernists</font><font color="#CCCCCC"> and all an attack</font>

1199
00:53:21,480 --> 00:53:25,830
target<font color="#E5E5E5"> see better design those kind of</font>

1200
00:53:24,420 --> 00:53:27,839
processors so they can be very<font color="#E5E5E5"> easily</font>

1201
00:53:25,830 --> 00:53:30,299
<font color="#E5E5E5">fixed so I do think there's a</font><font color="#CCCCCC"> lot we can</font>

1202
00:53:27,839 --> 00:53:32,759
learn<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> the industry</font><font color="#E5E5E5"> is learning a</font>

1203
00:53:30,300 --> 00:53:36,960
lot but but there's<font color="#E5E5E5"> there's more to be</font>

1204
00:53:32,760 --> 00:53:39,530
<font color="#E5E5E5">done</font><font color="#CCCCCC"> another question yeah should</font><font color="#E5E5E5"> we be</font>

1205
00:53:36,960 --> 00:53:41,970
afraid of illegal instructions that<font color="#E5E5E5"> may</font>

1206
00:53:39,530 --> 00:53:45,390
appear<font color="#E5E5E5"> in memory and what happens if</font>

1207
00:53:41,970 --> 00:53:47,250
they are speculative<font color="#E5E5E5"> executed illegal</font>

1208
00:53:45,390 --> 00:53:51,060
instructions what happens if we if we

1209
00:53:47,250 --> 00:53:52,830
speculate those<font color="#E5E5E5"> it will vary any</font>

1210
00:53:51,060 --> 00:53:54,900
implementation<font color="#E5E5E5"> but you know usually</font>

1211
00:53:52,830 --> 00:53:58,830
<font color="#E5E5E5">it'll just tag it</font><font color="#CCCCCC"> and say you know it'll</font>

1212
00:53:54,900 --> 00:54:00,660
it'll it'll probably before<font color="#CCCCCC"> it hits</font>

1213
00:53:58,830 --> 00:54:02,220
decode so in the front<font color="#E5E5E5"> end of the</font>

1214
00:54:00,660 --> 00:54:03,420
<font color="#CCCCCC">Machine</font><font color="#E5E5E5"> it'll see it and say that's all</font>

1215
00:54:02,220 --> 00:54:04,740
I'm not<font color="#E5E5E5"> even</font><font color="#CCCCCC"> going to send that</font><font color="#E5E5E5"> because</font>

1216
00:54:03,420 --> 00:54:07,200
I know that's not a valid<font color="#CCCCCC"> instruction</font>

1217
00:54:04,740 --> 00:54:08,609
but if you had an instruction<font color="#CCCCCC"> like the</font>

1218
00:54:07,200 --> 00:54:10,710
example I would<font color="#E5E5E5"> use is</font><font color="#CCCCCC"> divide by zero</font>

1219
00:54:08,609 --> 00:54:12,779
right<font color="#E5E5E5"> that's a more that's a more</font>

1220
00:54:10,710 --> 00:54:14,400
classic case I'm gonna tag that I'm

1221
00:54:12,780 --> 00:54:17,130
<font color="#CCCCCC">doing a</font><font color="#E5E5E5"> divide by zero</font><font color="#CCCCCC"> I'm not gonna</font>

1222
00:54:14,400 --> 00:54:18,630
<font color="#CCCCCC">actually send an exception to the</font>

1223
00:54:17,130 --> 00:54:20,609
program because<font color="#CCCCCC"> I don't know if I'm</font>

1224
00:54:18,630 --> 00:54:22,500
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> gonna do that</font>

1225
00:54:20,609 --> 00:54:23,529
but actual<font color="#E5E5E5"> illegal instructions I</font>

1226
00:54:22,500 --> 00:54:27,280
probably<font color="#E5E5E5"> hit</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> earlier my</font>

1227
00:54:23,530 --> 00:54:31,650
decoder I say<font color="#CCCCCC"> don't care about that one</font>

1228
00:54:27,280 --> 00:54:34,510
<font color="#E5E5E5">more one more yes up here thank you</font><font color="#CCCCCC"> so</font>

1229
00:54:31,650 --> 00:54:39,490
it's a bit<font color="#E5E5E5"> of a</font><font color="#CCCCCC"> political question</font><font color="#E5E5E5"> up</font>

1230
00:54:34,510 --> 00:54:43,420
here<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> do you think this could</font><font color="#E5E5E5"> have</font>

1231
00:54:39,490 --> 00:54:46,000
<font color="#CCCCCC">been</font><font color="#E5E5E5"> prevented</font><font color="#CCCCCC"> as in</font><font color="#E5E5E5"> the architects who</font>

1232
00:54:43,420 --> 00:54:48,940
<font color="#CCCCCC">designed those things kind</font><font color="#E5E5E5"> of knew</font><font color="#CCCCCC"> about</font>

1233
00:54:46,000 --> 00:54:50,770
it but<font color="#E5E5E5"> they were also saying oh we would</font>

1234
00:54:48,940 --> 00:54:53,920
<font color="#E5E5E5">accept the backlash like this dieselgate</font>

1235
00:54:50,770 --> 00:54:57,400
kind of thing so it's a good<font color="#E5E5E5"> question</font><font color="#CCCCCC"> so</font>

1236
00:54:53,920 --> 00:54:59,490
<font color="#CCCCCC">I I tend</font><font color="#E5E5E5"> to be less than the conspiracy</font>

1237
00:54:57,400 --> 00:55:02,500
side of that and I'm<font color="#CCCCCC"> not saying you do</font>

1238
00:54:59,490 --> 00:55:04,120
<font color="#CCCCCC">what what I think is those of us who</font>

1239
00:55:02,500 --> 00:55:05,290
studied branch predictors in school and

1240
00:55:04,120 --> 00:55:07,540
some<font color="#E5E5E5"> of you probably did as well right</font>

1241
00:55:05,290 --> 00:55:10,540
you you you read<font color="#CCCCCC"> about it</font><font color="#E5E5E5"> at the time</font>

1242
00:55:07,540 --> 00:55:12,670
<font color="#CCCCCC">you</font><font color="#E5E5E5"> think gee I wonder if the context</font>

1243
00:55:10,540 --> 00:55:16,779
<font color="#CCCCCC">no-one says gee but let's say</font><font color="#E5E5E5"> I I said</font>

1244
00:55:12,670 --> 00:55:18,760
that<font color="#E5E5E5"> um</font><font color="#CCCCCC"> the context</font><font color="#E5E5E5"> from one state might</font>

1245
00:55:16,780 --> 00:55:20,980
still<font color="#E5E5E5"> leak into another and you sort of</font>

1246
00:55:18,760 --> 00:55:21,400
in class they'll say well never never

1247
00:55:20,980 --> 00:55:23,530
mind

1248
00:55:21,400 --> 00:55:25,030
<font color="#CCCCCC">you know a little after a</font><font color="#E5E5E5"> little bit of</font>

1249
00:55:23,530 --> 00:55:26,620
time those entries will just get

1250
00:55:25,030 --> 00:55:28,420
displaced and you say oh yeah sure that

1251
00:55:26,620 --> 00:55:29,109
<font color="#E5E5E5">makes perfect sense</font><font color="#CCCCCC"> and you don't</font><font color="#E5E5E5"> think</font>

1252
00:55:28,420 --> 00:55:31,930
<font color="#CCCCCC">about</font><font color="#E5E5E5"> it</font>

1253
00:55:29,110 --> 00:55:33,490
and there are generations of students

1254
00:55:31,930 --> 00:55:34,000
who've heard that and said oh<font color="#E5E5E5"> yeah sure</font>

1255
00:55:33,490 --> 00:55:35,770
no<font color="#CCCCCC"> problem</font>

1256
00:55:34,000 --> 00:55:37,600
and there are generations of students by

1257
00:55:35,770 --> 00:55:40,420
the way<font color="#E5E5E5"> he also</font><font color="#CCCCCC"> said oh yeah those extra</font>

1258
00:55:37,600 --> 00:55:43,660
indexing bits I don't need a full set<font color="#CCCCCC"> of</font>

1259
00:55:40,420 --> 00:55:45,190
bits<font color="#E5E5E5"> I'll just I'll shorten it again you</font>

1260
00:55:43,660 --> 00:55:47,640
<font color="#E5E5E5">know so after this came out I actually</font>

1261
00:55:45,190 --> 00:55:50,350
<font color="#E5E5E5">pinged a bunch of the sort of</font><font color="#CCCCCC"> well-known</font>

1262
00:55:47,640 --> 00:55:53,080
academics and asked them to<font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure</font>

1263
00:55:50,350 --> 00:55:53,890
<font color="#CCCCCC">that their classes have been updated to</font>

1264
00:55:53,080 --> 00:55:57,040
make<font color="#E5E5E5"> sure that they're not teaching</font>

1265
00:55:53,890 --> 00:55:58,839
<font color="#E5E5E5">anyone this now but I think</font><font color="#CCCCCC"> we've all</font>

1266
00:55:57,040 --> 00:56:00,460
learned<font color="#CCCCCC"> the same things everyone who</font>

1267
00:55:58,840 --> 00:56:01,810
designs processors they all went<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

1268
00:56:00,460 --> 00:56:03,910
same schools they all know<font color="#CCCCCC"> each other</font>

1269
00:56:01,810 --> 00:56:05,650
they build things<font color="#E5E5E5"> the same way they all</font>

1270
00:56:03,910 --> 00:56:08,080
think<font color="#E5E5E5"> of the same kinds of things as not</font>

1271
00:56:05,650 --> 00:56:10,570
being<font color="#CCCCCC"> possible or very unlikely</font><font color="#E5E5E5"> that's</font>

1272
00:56:08,080 --> 00:56:13,450
how this stuff came about<font color="#E5E5E5"> I do think we</font>

1273
00:56:10,570 --> 00:56:15,910
can learn<font color="#E5E5E5"> a lot and we can prioritize</font>

1274
00:56:13,450 --> 00:56:19,390
security but again while we are in a

1275
00:56:15,910 --> 00:56:22,000
<font color="#E5E5E5">world where what will sell you a new</font>

1276
00:56:19,390 --> 00:56:24,879
<font color="#CCCCCC">laptop or</font><font color="#E5E5E5"> a gaming device or anything</font>

1277
00:56:22,000 --> 00:56:28,180
<font color="#E5E5E5">else or a phone is something that is</font>

1278
00:56:24,880 --> 00:56:31,420
fast and<font color="#E5E5E5"> cheap while that remains the</font>

1279
00:56:28,180 --> 00:56:34,299
number<font color="#CCCCCC"> one thing designers will will</font>

1280
00:56:31,420 --> 00:56:35,740
fall over<font color="#CCCCCC"> themselves to get you that 20%</font>

1281
00:56:34,300 --> 00:56:36,680
<font color="#E5E5E5">more performance or whatever they can</font>

1282
00:56:35,740 --> 00:56:39,950
<font color="#E5E5E5">get you</font>

1283
00:56:36,680 --> 00:56:45,020
so we also have to<font color="#CCCCCC"> ask consumers</font><font color="#E5E5E5"> demand</font>

1284
00:56:39,950 --> 00:56:47,299
more in terms<font color="#E5E5E5"> of security</font><font color="#CCCCCC"> as well yep</font>

1285
00:56:45,020 --> 00:56:49,430
okay I'm I'm<font color="#CCCCCC"> very happy that I'm asking</font>

1286
00:56:47,300 --> 00:56:51,710
this question after<font color="#E5E5E5"> this answer because</font>

1287
00:56:49,430 --> 00:56:52,970
what you<font color="#CCCCCC"> just said</font><font color="#E5E5E5"> seems to me to dip</font>

1288
00:56:51,710 --> 00:56:55,970
<font color="#E5E5E5">that you're saying we need different</font>

1289
00:56:52,970 --> 00:56:59,118
incentives to incentivize security<font color="#E5E5E5"> so my</font>

1290
00:56:55,970 --> 00:57:01,520
question is should AMD Intel chip

1291
00:56:59,119 --> 00:57:03,680
manufacturers be liable to<font color="#E5E5E5"> some extent</font>

1292
00:57:01,520 --> 00:57:06,530
<font color="#E5E5E5">for what happened of course nobody</font>

1293
00:57:03,680 --> 00:57:08,808
assumes malicious action on their on

1294
00:57:06,530 --> 00:57:10,849
their<font color="#E5E5E5"> part here right but if my screen</font>

1295
00:57:08,809 --> 00:57:12,319
stops<font color="#CCCCCC"> working at some point</font><font color="#E5E5E5"> I am I am</font>

1296
00:57:10,849 --> 00:57:15,050
<font color="#E5E5E5">you know I'm getting a warranty of</font>

1297
00:57:12,319 --> 00:57:16,880
<font color="#E5E5E5">replacement right</font><font color="#CCCCCC"> I don't think everyone</font>

1298
00:57:15,050 --> 00:57:24,619
<font color="#E5E5E5">will get warranty replacements of their</font>

1299
00:57:16,880 --> 00:57:28,280
CPUs perhaps they should so I think it's

1300
00:57:24,619 --> 00:57:29,839
a<font color="#E5E5E5"> good point</font><font color="#CCCCCC"> I think this is me</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

1301
00:57:28,280 --> 00:57:30,849
that's<font color="#E5E5E5"> your question</font><font color="#CCCCCC"> over there</font><font color="#E5E5E5"> this is</font>

1302
00:57:29,839 --> 00:57:34,759
a<font color="#E5E5E5"> ten-foot pole</font>

1303
00:57:30,849 --> 00:57:36,020
and this is me conveniently dodging it

1304
00:57:34,760 --> 00:57:38,930
but I do<font color="#E5E5E5"> think you raise a good point</font>

1305
00:57:36,020 --> 00:57:41,740
<font color="#CCCCCC">and I and I</font><font color="#E5E5E5"> hope people discuss it</font><font color="#CCCCCC"> while</font>

1306
00:57:38,930 --> 00:57:45,919
<font color="#CCCCCC">I'm wearing this I'd rather not</font>

1307
00:57:41,740 --> 00:57:47,328
take<font color="#E5E5E5"> a position on that</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> thank</font><font color="#CCCCCC"> you</font>

1308
00:57:45,920 --> 00:57:50,299
<font color="#CCCCCC">for</font><font color="#E5E5E5"> asking it and and you know let's</font>

1309
00:57:47,329 --> 00:57:51,110
<font color="#E5E5E5">let's debate that right okay it's a time</font>

1310
00:57:50,299 --> 00:57:55,519
<font color="#CCCCCC">for</font><font color="#E5E5E5"> any more</font>

1311
00:57:51,110 --> 00:57:55,519
[Applause]

1312
00:57:56,070 --> 00:57:58,610
thank you

1313
00:57:59,869 --> 00:58:01,930
<font color="#E5E5E5">you</font>

