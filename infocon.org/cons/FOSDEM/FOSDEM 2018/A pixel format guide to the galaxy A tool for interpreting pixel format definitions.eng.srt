1
00:00:05,800 --> 00:00:11,040
thank you<font color="#E5E5E5"> for joining me today so today</font>

2
00:00:09,139 --> 00:00:12,840
I'm going<font color="#E5E5E5"> to first</font><font color="#CCCCCC"> of all I'm like</font>

3
00:00:11,040 --> 00:00:15,719
from this<font color="#E5E5E5"> I work for</font><font color="#CCCCCC"> collabora and today</font>

4
00:00:12,840 --> 00:00:17,790
I'm going to<font color="#E5E5E5"> talk to you about an</font><font color="#CCCCCC"> RD</font>

5
00:00:15,719 --> 00:00:20,430
project I've been<font color="#CCCCCC"> working on at kelabra</font>

6
00:00:17,790 --> 00:00:23,790
called the pixel<font color="#E5E5E5"> format guides</font><font color="#CCCCCC"> subtitle</font>

7
00:00:20,430 --> 00:00:25,860
humorously<font color="#CCCCCC"> efforts to the</font><font color="#E5E5E5"> galaxy so I'm</font>

8
00:00:23,790 --> 00:00:28,200
going<font color="#E5E5E5"> to tell you what the picture</font>

9
00:00:25,860 --> 00:00:31,950
format guide is what it can do out of

10
00:00:28,200 --> 00:00:34,079
<font color="#E5E5E5">the</font><font color="#CCCCCC"> box and also how</font><font color="#E5E5E5"> we can leverage its</font>

11
00:00:31,950 --> 00:00:38,160
functionality to do some more custom

12
00:00:34,079 --> 00:00:40,710
things with it<font color="#E5E5E5"> so let's start so in the</font>

13
00:00:38,160 --> 00:00:44,129
graphics wilderness<font color="#E5E5E5"> we find strange</font>

14
00:00:40,710 --> 00:00:47,040
beasts with<font color="#E5E5E5"> coal pixel formats we give</font>

15
00:00:44,130 --> 00:00:49,470
names to<font color="#E5E5E5"> those pixel formats in order in</font>

16
00:00:47,040 --> 00:00:53,790
<font color="#E5E5E5">order to tame them but the thing is that</font>

17
00:00:49,470 --> 00:00:55,829
each graphics API and each project<font color="#E5E5E5"> uses</font>

18
00:00:53,790 --> 00:00:57,510
a<font color="#E5E5E5"> different flavor for this name so for</font>

19
00:00:55,829 --> 00:01:00,960
example have<font color="#E5E5E5"> the different formats as</font>

20
00:00:57,510 --> 00:01:02,519
the LGL and many many many<font color="#E5E5E5"> more the</font>

21
00:01:00,960 --> 00:01:05,670
problem is that just<font color="#CCCCCC"> by looking</font><font color="#E5E5E5"> at the</font>

22
00:01:02,520 --> 00:01:09,509
name<font color="#CCCCCC"> we often can get some idea of what</font>

23
00:01:05,670 --> 00:01:11,880
the pixel format actually is represented

24
00:01:09,509 --> 00:01:14,009
<font color="#CCCCCC">by the name but we are</font><font color="#E5E5E5"> missing a</font><font color="#CCCCCC"> lot</font><font color="#E5E5E5"> of</font>

25
00:01:11,880 --> 00:01:16,649
<font color="#E5E5E5">information and often the documentation</font>

26
00:01:14,009 --> 00:01:19,950
is either lacking<font color="#E5E5E5"> or vague sometimes</font>

27
00:01:16,650 --> 00:01:23,040
even misleading<font color="#E5E5E5"> and the only way to</font>

28
00:01:19,950 --> 00:01:25,200
figure<font color="#E5E5E5"> out what's going on exactly</font><font color="#CCCCCC"> is to</font>

29
00:01:23,040 --> 00:01:29,310
look in source codes and even then it

30
00:01:25,200 --> 00:01:31,620
can<font color="#E5E5E5"> be very very crazy</font><font color="#CCCCCC"> so are</font><font color="#E5E5E5"> we doomed</font>

31
00:01:29,310 --> 00:01:34,170
<font color="#CCCCCC">do we have a solution to</font><font color="#E5E5E5"> this and the</font>

32
00:01:31,620 --> 00:01:35,909
solution is<font color="#E5E5E5"> this or perhaps something</font>

33
00:01:34,170 --> 00:01:38,729
<font color="#E5E5E5">like this for the pixel form of guides</font>

34
00:01:35,909 --> 00:01:41,060
<font color="#E5E5E5">and actually this is</font><font color="#CCCCCC"> what the pixel</font>

35
00:01:38,729 --> 00:01:45,060
format guide is all about so it's a

36
00:01:41,060 --> 00:01:48,420
<font color="#E5E5E5">collection of information about what the</font>

37
00:01:45,060 --> 00:01:50,909
various<font color="#E5E5E5"> pixel format names mean so it</font>

38
00:01:48,420 --> 00:01:55,020
<font color="#CCCCCC">describes the layout of</font><font color="#E5E5E5"> the components</font>

39
00:01:50,909 --> 00:01:58,729
<font color="#E5E5E5">for</font><font color="#CCCCCC"> pixel format names so the number the</font>

40
00:01:55,020 --> 00:02:02,580
order and the size and<font color="#E5E5E5"> also describes</font>

41
00:01:58,729 --> 00:02:06,600
whether the format is represented as a

42
00:02:02,580 --> 00:02:09,508
native integer or as array format as we

43
00:02:06,600 --> 00:02:11,370
called so<font color="#CCCCCC"> and so bits and bytes in</font>

44
00:02:09,508 --> 00:02:13,798
memory in some<font color="#CCCCCC"> fixed order this is very</font>

45
00:02:11,370 --> 00:02:16,620
important<font color="#E5E5E5"> because it determines whether</font>

46
00:02:13,799 --> 00:02:17,939
the pixel format is<font color="#CCCCCC"> actually the way the</font>

47
00:02:16,620 --> 00:02:20,189
pixel form<font color="#E5E5E5"> is stored in memory</font><font color="#CCCCCC"> is</font>

48
00:02:17,939 --> 00:02:21,959
affected<font color="#CCCCCC"> by system Antonis or not which</font>

49
00:02:20,189 --> 00:02:26,760
is a piece of<font color="#E5E5E5"> information that's often</font>

50
00:02:21,959 --> 00:02:29,459
missing<font color="#E5E5E5"> in</font><font color="#CCCCCC"> documentation</font><font color="#E5E5E5"> so let's start</font>

51
00:02:26,760 --> 00:02:32,159
so the first part of the pixel format

52
00:02:29,459 --> 00:02:35,189
guide is<font color="#E5E5E5"> the documentation itself it's a</font>

53
00:02:32,159 --> 00:02:36,989
<font color="#E5E5E5">collection of documents describing the</font>

54
00:02:35,189 --> 00:02:39,569
picture<font color="#E5E5E5"> format names</font><font color="#CCCCCC"> at the</font><font color="#E5E5E5"> high level</font>

55
00:02:36,989 --> 00:02:41,400
so the example<font color="#CCCCCC"> here but</font><font color="#E5E5E5"> don't have to</font>

56
00:02:39,569 --> 00:02:44,659
<font color="#CCCCCC">read it</font><font color="#E5E5E5"> it's the start of the</font><font color="#CCCCCC"> webpage</font>

57
00:02:41,400 --> 00:02:48,269
<font color="#E5E5E5">describing the</font><font color="#CCCCCC"> German pixel formats</font><font color="#E5E5E5"> and</font>

58
00:02:44,659 --> 00:02:51,059
the<font color="#E5E5E5"> the documentation is posted as a</font>

59
00:02:48,269 --> 00:02:54,870
github<font color="#E5E5E5"> website</font><font color="#CCCCCC"> so it's automatically</font>

60
00:02:51,059 --> 00:02:57,059
created from the repository<font color="#CCCCCC"> and it can</font>

61
00:02:54,870 --> 00:02:59,879
be very useful<font color="#CCCCCC"> when we want to</font><font color="#E5E5E5"> get a</font>

62
00:02:57,059 --> 00:03:01,650
broad overview<font color="#E5E5E5"> of how to interpret pixel</font>

63
00:02:59,879 --> 00:03:06,569
format names for specular a specific

64
00:03:01,650 --> 00:03:08,159
family<font color="#E5E5E5"> the issue here is that well</font>

65
00:03:06,569 --> 00:03:09,899
although it's quite useful it's not

66
00:03:08,159 --> 00:03:12,448
actually not the<font color="#E5E5E5"> most exciting part of a</font>

67
00:03:09,900 --> 00:03:14,219
pixel<font color="#E5E5E5"> format guide because</font><font color="#CCCCCC"> we can do</font>

68
00:03:12,449 --> 00:03:16,559
much much<font color="#E5E5E5"> more</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the power and</font><font color="#CCCCCC"> the</font>

69
00:03:14,219 --> 00:03:18,209
magic of computers we<font color="#CCCCCC"> can encode all</font>

70
00:03:16,559 --> 00:03:20,669
this knowledge we have<font color="#E5E5E5"> about the pixel</font>

71
00:03:18,209 --> 00:03:23,219
formats<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we can automate the process</font>

72
00:03:20,669 --> 00:03:25,319
in the form of automated tool<font color="#E5E5E5"> and this</font>

73
00:03:23,219 --> 00:03:27,198
<font color="#CCCCCC">is the second that</font><font color="#E5E5E5"> perhaps more most</font>

74
00:03:25,319 --> 00:03:30,448
exciting part<font color="#CCCCCC"> of the pick a format guide</font>

75
00:03:27,199 --> 00:03:33,389
so<font color="#E5E5E5"> we have the pixel format guide tool</font>

76
00:03:30,449 --> 00:03:35,540
which is a Python tool<font color="#E5E5E5"> which supports</font>

77
00:03:33,389 --> 00:03:38,849
some operations which I will describe

78
00:03:35,540 --> 00:03:42,328
shortly<font color="#CCCCCC"> so starting</font><font color="#E5E5E5"> from the</font><font color="#CCCCCC"> bottom you</font>

79
00:03:38,849 --> 00:03:44,189
can<font color="#CCCCCC"> see the list formats so at</font><font color="#E5E5E5"> least all</font>

80
00:03:42,329 --> 00:03:46,469
the<font color="#E5E5E5"> formats we know</font><font color="#CCCCCC"> about for a</font>

81
00:03:44,189 --> 00:03:49,650
particular family<font color="#CCCCCC"> the</font><font color="#E5E5E5"> list families it</font>

82
00:03:46,469 --> 00:03:51,329
knows<font color="#E5E5E5"> it lists</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> familes</font><font color="#E5E5E5"> we know</font>

83
00:03:49,650 --> 00:03:55,589
about and by<font color="#E5E5E5"> finding family I mean as</font>

84
00:03:51,329 --> 00:03:57,719
<font color="#E5E5E5">the</font><font color="#CCCCCC"> elder Aram valcon</font><font color="#E5E5E5"> GL etc and then we</font>

85
00:03:55,589 --> 00:04:02,129
<font color="#CCCCCC">have the document operation with print</font>

86
00:03:57,719 --> 00:04:04,499
out the<font color="#E5E5E5"> documentation for a particular</font>

87
00:04:02,129 --> 00:04:06,719
pixel format family and this is actually

88
00:04:04,499 --> 00:04:08,579
the same documentation<font color="#E5E5E5"> that's used to</font>

89
00:04:06,719 --> 00:04:11,400
produce the website so it's a basically

90
00:04:08,579 --> 00:04:13,260
<font color="#E5E5E5">markdown file and then we have the most</font>

91
00:04:11,400 --> 00:04:16,168
<font color="#E5E5E5">interesting operations</font><font color="#CCCCCC"> describe and find</font>

92
00:04:13,260 --> 00:04:18,449
compatible<font color="#E5E5E5"> which I will describe shortly</font>

93
00:04:16,168 --> 00:04:23,880
so starting with a<font color="#E5E5E5"> describe operation</font>

94
00:04:18,449 --> 00:04:25,770
but<font color="#E5E5E5"> describe operation gives us in an</font>

95
00:04:23,880 --> 00:04:27,690
easy<font color="#E5E5E5"> to consume manner all the</font>

96
00:04:25,770 --> 00:04:31,289
information we have<font color="#E5E5E5"> about a</font><font color="#CCCCCC"> particular</font>

97
00:04:27,690 --> 00:04:33,420
of<font color="#CCCCCC"> picks informant so of course first of</font>

98
00:04:31,290 --> 00:04:36,840
<font color="#CCCCCC">all we'll</font><font color="#E5E5E5"> get the name then</font><font color="#CCCCCC"> we'd get the</font>

99
00:04:33,420 --> 00:04:39,720
component<font color="#E5E5E5"> data type which describes</font>

100
00:04:36,840 --> 00:04:42,840
how the bits in the components are

101
00:04:39,720 --> 00:04:46,080
actually interpreted what they mean<font color="#CCCCCC"> so</font>

102
00:04:42,840 --> 00:04:48,320
I'm using the Vulcan<font color="#E5E5E5"> names for the data</font>

103
00:04:46,080 --> 00:04:52,229
<font color="#E5E5E5">type so for example have unsigned</font>

104
00:04:48,320 --> 00:04:56,400
<font color="#E5E5E5">normalized</font><font color="#CCCCCC"> sigh normalize</font><font color="#E5E5E5"> scientists</font>

105
00:04:52,229 --> 00:04:59,550
<font color="#E5E5E5">float etc another</font><font color="#CCCCCC"> crucial piece of</font>

106
00:04:56,400 --> 00:05:02,429
information<font color="#E5E5E5"> as I mentioned before is how</font>

107
00:04:59,550 --> 00:05:05,580
is this format described is it described

108
00:05:02,430 --> 00:05:07,830
as a native<font color="#E5E5E5"> so bit fields in a native</font>

109
00:05:05,580 --> 00:05:11,460
type or is it described as bits and

110
00:05:07,830 --> 00:05:13,380
bytes in memory<font color="#CCCCCC"> in a particular order in</font>

111
00:05:11,460 --> 00:05:16,080
this<font color="#E5E5E5"> case we have a native type so</font><font color="#CCCCCC"> we</font>

112
00:05:13,380 --> 00:05:20,820
get the<font color="#E5E5E5"> description of the native type</font>

113
00:05:16,080 --> 00:05:24,240
so<font color="#E5E5E5"> we get each pixel for each pixel what</font>

114
00:05:20,820 --> 00:05:26,669
each bit of<font color="#CCCCCC"> the of the pixel format</font>

115
00:05:24,240 --> 00:05:28,919
means so<font color="#E5E5E5"> to which component bit</font><font color="#CCCCCC"> it</font>

116
00:05:26,669 --> 00:05:32,490
corresponds then we get the description

117
00:05:28,919 --> 00:05:34,229
<font color="#CCCCCC">of how the pixel format is stored in</font>

118
00:05:32,490 --> 00:05:36,810
<font color="#E5E5E5">memory both for little-endian and</font>

119
00:05:34,229 --> 00:05:39,300
big-endian systems and you notice in

120
00:05:36,810 --> 00:05:41,490
this<font color="#E5E5E5"> case</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> little-endian and</font>

121
00:05:39,300 --> 00:05:44,100
big-endian<font color="#CCCCCC"> descriptions are different</font>

122
00:05:41,490 --> 00:05:47,479
the bytes are just swapped because

123
00:05:44,100 --> 00:05:52,169
that's how this works in this case

124
00:05:47,479 --> 00:05:56,340
<font color="#CCCCCC">moving on to an example</font><font color="#E5E5E5"> of a format</font>

125
00:05:52,169 --> 00:05:58,349
<font color="#CCCCCC">that's described as bytes in memory</font><font color="#E5E5E5"> we</font>

126
00:05:56,340 --> 00:06:00,659
don't get the native type description

127
00:05:58,349 --> 00:06:03,150
<font color="#CCCCCC">but we still</font><font color="#E5E5E5"> get the little-endian and</font>

128
00:06:00,660 --> 00:06:06,090
big-endian<font color="#E5E5E5"> description in this case the</font>

129
00:06:03,150 --> 00:06:09,030
descriptions are the same but<font color="#E5E5E5"> in some</font>

130
00:06:06,090 --> 00:06:12,479
<font color="#E5E5E5">cases they may differ</font><font color="#CCCCCC"> that's usually the</font>

131
00:06:09,030 --> 00:06:15,150
<font color="#E5E5E5">case when we</font><font color="#CCCCCC"> have pixel formats where</font>

132
00:06:12,479 --> 00:06:19,020
each<font color="#CCCCCC"> component is multiple bytes so each</font>

133
00:06:15,150 --> 00:06:21,388
byte<font color="#CCCCCC"> its component in memory is in the</font>

134
00:06:19,020 --> 00:06:24,870
same order so<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> rgba</font><font color="#E5E5E5"> but then</font>

135
00:06:21,389 --> 00:06:27,300
the<font color="#E5E5E5"> two bytes of each component may be</font>

136
00:06:24,870 --> 00:06:32,130
flipped depending on<font color="#E5E5E5"> one system and</font>

137
00:06:27,300 --> 00:06:34,110
<font color="#CCCCCC">yunus so and that's described so the</font>

138
00:06:32,130 --> 00:06:36,000
<font color="#E5E5E5">next interesting operation we have is</font>

139
00:06:34,110 --> 00:06:38,070
<font color="#E5E5E5">and perhaps even more interesting</font><font color="#CCCCCC"> is</font>

140
00:06:36,000 --> 00:06:42,150
<font color="#CCCCCC">defined compatible the find compatible</font>

141
00:06:38,070 --> 00:06:44,250
operation allows us to ask the tool to

142
00:06:42,150 --> 00:06:47,130
give us all<font color="#E5E5E5"> the pixel formats from a</font>

143
00:06:44,250 --> 00:06:49,500
particular family<font color="#E5E5E5"> that match another</font>

144
00:06:47,130 --> 00:06:50,580
format<font color="#E5E5E5"> so in this case we're</font><font color="#CCCCCC"> asking the</font>

145
00:06:49,500 --> 00:06:54,090
tool

146
00:06:50,580 --> 00:06:56,430
<font color="#CCCCCC">- to return all</font><font color="#E5E5E5"> the pixel formats from</font>

147
00:06:54,090 --> 00:06:59,190
the SDL<font color="#E5E5E5"> - family that are compatible</font>

148
00:06:56,430 --> 00:07:01,710
with that<font color="#CCCCCC"> particular particular bulk</font>

149
00:06:59,190 --> 00:07:04,469
informant<font color="#E5E5E5"> and the tool replies that for</font>

150
00:07:01,710 --> 00:07:07,500
this format<font color="#CCCCCC"> this</font><font color="#E5E5E5"> format</font><font color="#CCCCCC"> is compatible on</font>

151
00:07:04,470 --> 00:07:09,300
all systems<font color="#E5E5E5"> with this PL</font><font color="#CCCCCC"> picture format</font>

152
00:07:07,500 --> 00:07:11,280
is compatible on rulinea system with

153
00:07:09,300 --> 00:07:16,850
this and is<font color="#E5E5E5"> compatible on</font><font color="#CCCCCC"> big-endian</font>

154
00:07:11,280 --> 00:07:20,099
<font color="#E5E5E5">system with the other bits appointment</font>

155
00:07:16,850 --> 00:07:22,710
so by<font color="#E5E5E5"> default the picture the find</font>

156
00:07:20,100 --> 00:07:26,310
compatible operation does a very strict

157
00:07:22,710 --> 00:07:29,280
matching between pixel formats<font color="#E5E5E5"> and other</font>

158
00:07:26,310 --> 00:07:32,220
<font color="#E5E5E5">components but it's all often useful</font><font color="#CCCCCC"> to</font>

159
00:07:29,280 --> 00:07:35,330
relax<font color="#E5E5E5"> the matching a bit sometimes so we</font>

160
00:07:32,220 --> 00:07:40,560
have a few flags<font color="#E5E5E5"> one is the treat X as a</font>

161
00:07:35,330 --> 00:07:43,469
which treats unused parts of the of the

162
00:07:40,560 --> 00:07:47,070
value<font color="#E5E5E5"> of a pixel format so also known as</font>

163
00:07:43,470 --> 00:07:50,390
X<font color="#CCCCCC"> in quilt way</font><font color="#E5E5E5"> but then we have a flag</font>

164
00:07:47,070 --> 00:07:53,280
<font color="#E5E5E5">that which allows us</font><font color="#CCCCCC"> to treat srgb</font>

165
00:07:50,390 --> 00:07:57,060
<font color="#CCCCCC">datatype the same as you norm</font><font color="#E5E5E5"> and then</font>

166
00:07:53,280 --> 00:07:59,429
we have a<font color="#CCCCCC"> ignore datatype</font><font color="#E5E5E5"> flag that</font>

167
00:07:57,060 --> 00:08:01,310
allows<font color="#CCCCCC"> us to just</font><font color="#E5E5E5"> ignore the</font><font color="#CCCCCC"> datatype</font>

168
00:07:59,430 --> 00:08:03,900
completely and just<font color="#CCCCCC"> to get</font><font color="#E5E5E5"> matching</font>

169
00:08:01,310 --> 00:08:06,150
basically for the components<font color="#CCCCCC"> these are</font>

170
00:08:03,900 --> 00:08:08,159
<font color="#E5E5E5">useful in different scenarios</font>

171
00:08:06,150 --> 00:08:10,849
<font color="#E5E5E5">sometimes the formats we want to match</font>

172
00:08:08,160 --> 00:08:13,320
don't even have for example srgb

173
00:08:10,850 --> 00:08:15,420
<font color="#CCCCCC">variants so the best we can do is you</font>

174
00:08:13,320 --> 00:08:21,420
norm<font color="#E5E5E5"> or they have don't</font><font color="#CCCCCC"> have X</font><font color="#E5E5E5"> variants</font>

175
00:08:15,420 --> 00:08:23,190
so we are<font color="#CCCCCC"> okay matching with yay so the</font>

176
00:08:21,420 --> 00:08:26,030
picture<font color="#CCCCCC"> tool we have</font><font color="#E5E5E5"> been talking about</font>

177
00:08:23,190 --> 00:08:28,860
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> really just a front end to the</font><font color="#CCCCCC"> pfg</font>

178
00:08:26,030 --> 00:08:30,630
<font color="#CCCCCC">library which is a</font><font color="#E5E5E5"> Python</font><font color="#CCCCCC"> modular</font>

179
00:08:28,860 --> 00:08:32,610
library which is where<font color="#CCCCCC"> all the magic</font>

180
00:08:30,630 --> 00:08:35,700
<font color="#CCCCCC">happens</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> it exports a set of</font>

181
00:08:32,610 --> 00:08:39,419
operation<font color="#E5E5E5"> which you will see in</font><font color="#CCCCCC"> this</font>

182
00:08:35,700 --> 00:08:41,940
case<font color="#CCCCCC"> match exactly</font><font color="#E5E5E5"> what the</font><font color="#CCCCCC"> front-end</font>

183
00:08:39,419 --> 00:08:43,530
<font color="#E5E5E5">exposes as a command line so get</font><font color="#CCCCCC"> the</font>

184
00:08:41,940 --> 00:08:45,720
list for<font color="#E5E5E5"> most with families document</font>

185
00:08:43,530 --> 00:08:49,650
<font color="#E5E5E5">find compatible with all</font><font color="#CCCCCC"> the flags and</font>

186
00:08:45,720 --> 00:08:51,840
<font color="#E5E5E5">describe the nice thing about exposing</font>

187
00:08:49,650 --> 00:08:54,600
<font color="#E5E5E5">all the functionality as the library is</font>

188
00:08:51,840 --> 00:08:57,810
that<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> easily be</font><font color="#E5E5E5"> good go beyond</font>

189
00:08:54,600 --> 00:09:00,680
what the<font color="#CCCCCC"> tool provides and provide</font>

190
00:08:57,810 --> 00:09:03,779
custom solutions<font color="#E5E5E5"> so for example</font>

191
00:09:00,680 --> 00:09:05,998
<font color="#E5E5E5">especially</font><font color="#CCCCCC"> in integration layers between</font>

192
00:09:03,779 --> 00:09:08,480
graphics libraries<font color="#E5E5E5"> or project programs</font>

193
00:09:05,999 --> 00:09:13,110
and<font color="#CCCCCC"> libraries</font><font color="#E5E5E5"> we need to convert one</font>

194
00:09:08,480 --> 00:09:14,970
pixel format name to<font color="#E5E5E5"> another and in a</font>

195
00:09:13,110 --> 00:09:16,740
compatible<font color="#CCCCCC"> way</font><font color="#E5E5E5"> of course and this</font><font color="#CCCCCC"> is</font>

196
00:09:14,970 --> 00:09:18,720
where for example<font color="#CCCCCC"> pfg has the library</font>

197
00:09:16,740 --> 00:09:23,279
<font color="#E5E5E5">could get become very useful</font>

198
00:09:18,720 --> 00:09:26,730
so this<font color="#CCCCCC"> pfg this</font><font color="#E5E5E5"> Python script does</font>

199
00:09:23,279 --> 00:09:29,910
exactly<font color="#E5E5E5"> that for the SDL</font><font color="#CCCCCC"> - -</font><font color="#E5E5E5"> Vulcan</font><font color="#CCCCCC"> I</font>

200
00:09:26,730 --> 00:09:31,949
will go quickly<font color="#E5E5E5"> through them through the</font>

201
00:09:29,910 --> 00:09:33,930
script so we<font color="#E5E5E5"> import the</font><font color="#CCCCCC"> pfg library we</font>

202
00:09:31,949 --> 00:09:36,628
<font color="#E5E5E5">set up the switch statement</font><font color="#CCCCCC"> and then for</font>

203
00:09:33,930 --> 00:09:40,829
each format we know about in VHDL<font color="#E5E5E5"> -</font>

204
00:09:36,629 --> 00:09:43,470
<font color="#E5E5E5">family we find all compatible Vulcan</font>

205
00:09:40,829 --> 00:09:45,920
formats<font color="#E5E5E5"> then depending on whether we</font>

206
00:09:43,470 --> 00:09:49,889
<font color="#CCCCCC">actually found something and whether</font>

207
00:09:45,920 --> 00:09:52,740
this match<font color="#CCCCCC"> that we found</font><font color="#E5E5E5"> was compatible</font>

208
00:09:49,889 --> 00:09:54,930
<font color="#E5E5E5">everywhere or only on little engine</font>

209
00:09:52,740 --> 00:09:57,410
systems over<font color="#E5E5E5"> only on</font><font color="#CCCCCC"> big-endian systems</font>

210
00:09:54,930 --> 00:10:01,439
<font color="#E5E5E5">then we can produce case statements and</font>

211
00:09:57,410 --> 00:10:04,019
running<font color="#E5E5E5"> this would get an output like</font>

212
00:10:01,439 --> 00:10:06,930
<font color="#CCCCCC">this automatically and</font><font color="#E5E5E5"> without errors</font>

213
00:10:04,019 --> 00:10:12,180
that which we<font color="#CCCCCC"> would have it</font><font color="#E5E5E5"> would like</font>

214
00:10:06,930 --> 00:10:14,069
to do this manually of course you can do

215
00:10:12,180 --> 00:10:16,979
whatever you want with the library<font color="#E5E5E5"> it's</font>

216
00:10:14,069 --> 00:10:19,079
not switch statement<font color="#E5E5E5"> segment is</font><font color="#CCCCCC"> just the</font>

217
00:10:16,980 --> 00:10:20,670
one<font color="#E5E5E5"> of the operation you</font><font color="#CCCCCC"> can customize</font>

218
00:10:19,079 --> 00:10:22,920
<font color="#E5E5E5">Asian's you can do you can produce</font>

219
00:10:20,670 --> 00:10:25,099
<font color="#E5E5E5">tables or</font><font color="#CCCCCC"> whatever you</font><font color="#E5E5E5"> need for your</font>

220
00:10:22,920 --> 00:10:25,099
application

221
00:10:25,879 --> 00:10:36,389
<font color="#CCCCCC">so the pfg tool and the library consists</font>

222
00:10:34,379 --> 00:10:38,730
of a core<font color="#E5E5E5"> that provides the operations</font>

223
00:10:36,389 --> 00:10:40,500
and then of a set of sub<font color="#E5E5E5"> modules that</font>

224
00:10:38,730 --> 00:10:43,230
<font color="#E5E5E5">provide</font><font color="#CCCCCC"> all the information we have</font>

225
00:10:40,500 --> 00:10:46,889
about<font color="#CCCCCC"> a</font><font color="#E5E5E5"> particular family and these are</font>

226
00:10:43,230 --> 00:10:50,339
disconnected so it's very easy<font color="#CCCCCC"> to add a</font>

227
00:10:46,889 --> 00:10:51,750
<font color="#E5E5E5">new family</font><font color="#CCCCCC"> first of all</font><font color="#E5E5E5"> to do so we</font>

228
00:10:50,339 --> 00:10:56,399
should<font color="#E5E5E5"> add some documentation under</font>

229
00:10:51,750 --> 00:11:00,089
Doc's family MD<font color="#E5E5E5"> and then start adding</font>

230
00:10:56,399 --> 00:11:02,360
<font color="#E5E5E5">the code to implement the other logic so</font>

231
00:11:00,089 --> 00:11:05,519
that<font color="#CCCCCC"> because I like using test-driven</font>

232
00:11:02,360 --> 00:11:07,679
approach in<font color="#E5E5E5"> my my coding</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> usually start</font>

233
00:11:05,519 --> 00:11:11,759
by<font color="#CCCCCC"> adding some tests in tests family and</font>

234
00:11:07,679 --> 00:11:13,290
adding code in<font color="#CCCCCC"> pfg family dot pi</font><font color="#E5E5E5"> to</font>

235
00:11:11,759 --> 00:11:15,750
implement

236
00:11:13,290 --> 00:11:19,410
<font color="#E5E5E5">to ensure the test pass implement that</font>

237
00:11:15,750 --> 00:11:21,690
<font color="#E5E5E5">functionality so family pie in</font><font color="#CCCCCC"> pfg</font>

238
00:11:19,410 --> 00:11:24,300
should provide the<font color="#E5E5E5"> following three</font>

239
00:11:21,690 --> 00:11:27,420
function<font color="#CCCCCC"> first of</font><font color="#E5E5E5"> all describe</font><font color="#CCCCCC"> format</font>

240
00:11:24,300 --> 00:11:29,969
<font color="#CCCCCC">string that returns a format description</font>

241
00:11:27,420 --> 00:11:31,469
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is a Python class you can see in</font>

242
00:11:29,970 --> 00:11:35,579
the<font color="#E5E5E5"> code base with all the</font><font color="#CCCCCC"> information</font>

243
00:11:31,470 --> 00:11:38,000
about the<font color="#CCCCCC"> particular pixel format you</font>

244
00:11:35,579 --> 00:11:42,060
also need to<font color="#E5E5E5"> implement the</font><font color="#CCCCCC"> format's</font>

245
00:11:38,000 --> 00:11:44,310
function which returns a list of all the

246
00:11:42,060 --> 00:11:49,560
format strings that<font color="#E5E5E5"> this family supports</font>

247
00:11:44,310 --> 00:11:52,229
and finally the document operation<font color="#E5E5E5"> that</font>

248
00:11:49,560 --> 00:11:54,508
returns the documentation from basically

249
00:11:52,230 --> 00:11:58,769
what we have sorry that's not<font color="#CCCCCC"> PI that</font>

250
00:11:54,509 --> 00:12:00,949
that<font color="#CCCCCC"> Docs family</font><font color="#E5E5E5"> dot MD because the</font>

251
00:11:58,769 --> 00:12:03,899
operations we need<font color="#E5E5E5"> to do internally are</font>

252
00:12:00,949 --> 00:12:06,329
<font color="#E5E5E5">mostly similar between families there</font>

253
00:12:03,899 --> 00:12:07,740
are<font color="#CCCCCC"> some utility functions in a</font><font color="#E5E5E5"> PFG util</font>

254
00:12:06,329 --> 00:12:11,339
dot<font color="#CCCCCC"> PI that you can use to</font><font color="#E5E5E5"> make your</font>

255
00:12:07,740 --> 00:12:13,470
<font color="#E5E5E5">life easier</font><font color="#CCCCCC"> and there that's the basic</font>

256
00:12:11,339 --> 00:12:17,069
these are the basic<font color="#CCCCCC"> step</font><font color="#E5E5E5"> you can find</font>

257
00:12:13,470 --> 00:12:21,930
more details in<font color="#E5E5E5"> the readme section of</font>

258
00:12:17,069 --> 00:12:24,839
the code<font color="#E5E5E5"> so first of all what's the</font>

259
00:12:21,930 --> 00:12:27,599
current state<font color="#CCCCCC"> the current</font><font color="#E5E5E5"> state is that</font>

260
00:12:24,839 --> 00:12:32,339
<font color="#E5E5E5">we support</font><font color="#CCCCCC"> twelve</font><font color="#E5E5E5"> families</font><font color="#CCCCCC"> if I'm not</font>

261
00:12:27,600 --> 00:12:35,720
correct<font color="#CCCCCC"> if I'm not mistaken and over 450</font>

262
00:12:32,339 --> 00:12:38,850
pixel formats which we can use<font color="#E5E5E5"> to</font>

263
00:12:35,720 --> 00:12:40,440
describe<font color="#E5E5E5"> or match things of course we</font>

264
00:12:38,850 --> 00:12:45,720
want more pixel formats and<font color="#E5E5E5"> this is</font>

265
00:12:40,440 --> 00:12:48,029
where all<font color="#CCCCCC"> you'll can come in please</font><font color="#E5E5E5"> if</font>

266
00:12:45,720 --> 00:12:50,490
you have a favorite<font color="#E5E5E5"> pixel format please</font>

267
00:12:48,029 --> 00:12:53,510
consider contributing<font color="#E5E5E5"> to do this it's on</font>

268
00:12:50,490 --> 00:12:58,160
github<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> very easy to contribute and</font>

269
00:12:53,510 --> 00:13:01,709
for the future<font color="#CCCCCC"> the plan is to</font><font color="#E5E5E5"> add</font>

270
00:12:58,160 --> 00:13:04,740
<font color="#E5E5E5">compressed and multi-plane formats</font><font color="#CCCCCC"> I</font>

271
00:13:01,709 --> 00:13:07,319
want to add descriptions for<font color="#CCCCCC"> multi plane</font>

272
00:13:04,740 --> 00:13:09,480
formats for compressed and those not so

273
00:13:07,319 --> 00:13:11,910
much but I want to be able to tag them

274
00:13:09,480 --> 00:13:13,889
somehow<font color="#CCCCCC"> so I can use them for matching</font>

275
00:13:11,910 --> 00:13:16,380
so that we know<font color="#E5E5E5"> that this pixel format</font>

276
00:13:13,889 --> 00:13:18,990
name<font color="#E5E5E5"> from welcome for example represents</font>

277
00:13:16,380 --> 00:13:25,560
the same compressed format in

278
00:13:18,990 --> 00:13:28,620
<font color="#E5E5E5">Garren family</font><font color="#CCCCCC"> we went to match and like</font>

279
00:13:25,560 --> 00:13:33,660
yes<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> thank</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much for</font>

280
00:13:28,620 --> 00:13:57,449
being<font color="#CCCCCC"> here and questions well that was</font>

281
00:13:33,660 --> 00:13:59,550
fast<font color="#E5E5E5"> any question right so</font><font color="#CCCCCC"> I'm dealing</font>

282
00:13:57,449 --> 00:14:01,740
<font color="#E5E5E5">mostly with the pixel form itself and</font>

283
00:13:59,550 --> 00:14:04,410
not image formats I tried would be more

284
00:14:01,740 --> 00:14:07,009
relevant<font color="#E5E5E5"> I guess to whole image formats</font>

285
00:14:04,410 --> 00:14:10,009
<font color="#E5E5E5">so I'm not dealing</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> this in this</font>

286
00:14:07,009 --> 00:14:10,009
project

287
00:14:17,600 --> 00:14:31,330
yeah it will probably<font color="#CCCCCC"> change</font><font color="#E5E5E5"> any other</font>

288
00:14:22,820 --> 00:14:34,070
<font color="#E5E5E5">questions sorry</font>

289
00:14:31,330 --> 00:14:36,470
yes if you<font color="#CCCCCC"> go to the FOSDEM</font><font color="#E5E5E5"> page for</font>

290
00:14:34,070 --> 00:14:38,560
<font color="#E5E5E5">this talk</font><font color="#CCCCCC"> there's a link</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> project</font>

291
00:14:36,470 --> 00:14:45,520
and also<font color="#E5E5E5"> to some blog posts</font><font color="#CCCCCC"> that</font>

292
00:14:38,560 --> 00:14:47,180
describe<font color="#CCCCCC"> the project</font><font color="#E5E5E5"> in more detail</font><font color="#CCCCCC"> okay</font>

293
00:14:45,520 --> 00:14:50,420
thank you

294
00:14:47,180 --> 00:14:50,420
[Applause]

