1
00:00:07,100 --> 00:00:13,910
should be<font color="#CCCCCC"> working</font><font color="#E5E5E5"> that starts hi</font>

2
00:00:11,580 --> 00:00:13,910
everybody

3
00:00:15,619 --> 00:00:19,948
<font color="#CCCCCC">so hi everybody</font>

4
00:00:17,280 --> 00:00:21,990
time is the<font color="#E5E5E5"> seventh</font><font color="#CCCCCC"> day from</font><font color="#E5E5E5"> tox lab and</font>

5
00:00:19,949 --> 00:00:23,640
there's a third<font color="#CCCCCC"> guys here</font><font color="#E5E5E5"> so I'm the</font>

6
00:00:21,990 --> 00:00:26,820
only<font color="#E5E5E5"> one talking about all real jobs</font>

7
00:00:23,640 --> 00:00:30,419
they all speak about the fun stuff<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I</font>

8
00:00:26,820 --> 00:00:32,970
have the less fun stuff so as part of

9
00:00:30,419 --> 00:00:35,340
<font color="#E5E5E5">our job we develop an anagram of skater</font>

10
00:00:32,970 --> 00:00:37,170
called<font color="#E5E5E5"> Ethan arc and we have one problem</font>

11
00:00:35,340 --> 00:00:39,780
<font color="#CCCCCC">and this problem is that</font><font color="#E5E5E5"> we have users</font>

12
00:00:37,170 --> 00:00:41,340
and users want documentation<font color="#E5E5E5"> but we are</font>

13
00:00:39,780 --> 00:00:43,260
developers and we did not to write

14
00:00:41,340 --> 00:00:45,719
documentation and furthermore we<font color="#CCCCCC"> don't</font>

15
00:00:43,260 --> 00:00:48,269
want to<font color="#E5E5E5"> maintain our documentation and</font>

16
00:00:45,719 --> 00:00:51,329
that's the topic of<font color="#E5E5E5"> this talk how to do</font>

17
00:00:48,270 --> 00:00:53,460
<font color="#E5E5E5">minimal stuff so that users have the</font>

18
00:00:51,329 --> 00:00:57,300
documentation<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we don't write it or</font>

19
00:00:53,460 --> 00:00:59,989
maintain it too much because<font color="#E5E5E5"> there is</font>

20
00:00:57,300 --> 00:01:03,149
very<font color="#CCCCCC"> low support for documentation</font><font color="#E5E5E5"> of</font>

21
00:00:59,989 --> 00:01:05,459
passes in RM<font color="#E5E5E5"> if you ask for</font>

22
00:01:03,149 --> 00:01:08,010
<font color="#E5E5E5">documentation of jum setting because</font>

23
00:01:05,459 --> 00:01:10,649
<font color="#E5E5E5">don't watch this you can get the help</font>

24
00:01:08,010 --> 00:01:14,730
and jumper do is jump reading<font color="#E5E5E5"> so it</font>

25
00:01:10,650 --> 00:01:18,420
doesn't help much<font color="#CCCCCC"> but well we don't know</font>

26
00:01:14,730 --> 00:01:20,640
that<font color="#CCCCCC"> the code</font><font color="#E5E5E5"> and then reads the</font>

27
00:01:18,420 --> 00:01:23,640
<font color="#E5E5E5">commands and then you know what is</font><font color="#CCCCCC"> just</font>

28
00:01:20,640 --> 00:01:27,720
<font color="#CCCCCC">reading and maybe you can</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> the</font>

29
00:01:23,640 --> 00:01:28,770
<font color="#E5E5E5">proper way</font><font color="#CCCCCC"> so our program is that you</font>

30
00:01:27,720 --> 00:01:32,100
know<font color="#CCCCCC"> obscura</font>

31
00:01:28,770 --> 00:01:34,710
we<font color="#E5E5E5"> have superstition from 11 byte code</font>

32
00:01:32,100 --> 00:01:36,630
to OMB code and we have this user

33
00:01:34,710 --> 00:01:39,690
directory so you<font color="#E5E5E5"> the user can control</font>

34
00:01:36,630 --> 00:01:42,810
how the compiler behaves so<font color="#E5E5E5"> it needs to</font>

35
00:01:39,690 --> 00:01:44,789
know what every<font color="#E5E5E5"> passage does so our</font>

36
00:01:42,810 --> 00:01:47,100
passes obfuscation passes but it's

37
00:01:44,790 --> 00:01:49,020
globally the same as and you can<font color="#CCCCCC"> tell</font>

38
00:01:47,100 --> 00:01:52,500
optimization and so<font color="#E5E5E5"> how do you</font><font color="#CCCCCC"> document</font>

39
00:01:49,020 --> 00:01:55,429
<font color="#CCCCCC">that because the usual is not</font><font color="#E5E5E5"> an expert</font>

40
00:01:52,500 --> 00:01:58,350
<font color="#E5E5E5">on</font><font color="#CCCCCC"> compilation</font><font color="#E5E5E5"> that needs to have an</font><font color="#CCCCCC"> int</font>

41
00:01:55,430 --> 00:01:59,430
because<font color="#E5E5E5"> there are three way for him to</font>

42
00:01:58,350 --> 00:02:02,220
<font color="#E5E5E5">ensure the compiler</font>

43
00:01:59,430 --> 00:02:04,470
<font color="#CCCCCC">I already used we'd hold compiler</font><font color="#E5E5E5"> flags</font>

44
00:02:02,220 --> 00:02:06,090
<font color="#E5E5E5">but generally speaking it's not a good</font>

45
00:02:04,470 --> 00:02:08,940
way to control<font color="#CCCCCC"> enough station because if</font>

46
00:02:06,090 --> 00:02:11,069
you say to<font color="#CCCCCC"> sum all</font><font color="#E5E5E5"> constants in my code</font>

47
00:02:08,940 --> 00:02:12,140
into something that is<font color="#E5E5E5"> not difficult to</font>

48
00:02:11,068 --> 00:02:16,179
understand when you hand

49
00:02:12,140 --> 00:02:20,540
<font color="#CCCCCC">it is very large code and it's not</font>

50
00:02:16,180 --> 00:02:24,590
<font color="#CCCCCC">performance-wise a bit thing so you</font><font color="#E5E5E5"> can</font>

51
00:02:20,540 --> 00:02:26,780
use<font color="#E5E5E5"> directives progress so you</font><font color="#CCCCCC"> say</font><font color="#E5E5E5"> okay</font>

52
00:02:24,590 --> 00:02:30,290
we're<font color="#E5E5E5"> going to escape this very</font><font color="#CCCCCC"> friction</font>

53
00:02:26,780 --> 00:02:32,959
<font color="#CCCCCC">this resist</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> obscene</font><font color="#E5E5E5"> and this is</font>

54
00:02:30,290 --> 00:02:34,700
some parameter and then<font color="#E5E5E5"> this</font><font color="#CCCCCC"> constant</font>

55
00:02:32,959 --> 00:02:39,980
will<font color="#CCCCCC"> be appreciated</font><font color="#E5E5E5"> using the heavy mud</font>

56
00:02:34,700 --> 00:02:43,220
<font color="#E5E5E5">which makes regenerates</font><font color="#CCCCCC"> ball</font><font color="#E5E5E5"> code but it</font>

57
00:02:39,980 --> 00:02:44,570
can<font color="#E5E5E5"> also write scheduled fire because</font><font color="#CCCCCC"> it</font>

58
00:02:43,220 --> 00:02:46,310
<font color="#CCCCCC">doesn't want to</font><font color="#E5E5E5"> touch it</font><font color="#CCCCCC"> filed so</font>

59
00:02:44,570 --> 00:02:49,040
everything is put<font color="#CCCCCC"> into a separate file</font>

60
00:02:46,310 --> 00:02:52,340
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> its global is</font><font color="#E5E5E5"> the same there's</font>

61
00:02:49,040 --> 00:02:54,709
a very same options and you apply this

62
00:02:52,340 --> 00:02:56,239
<font color="#E5E5E5">pass than this pass on this</font><font color="#CCCCCC"> function</font><font color="#E5E5E5"> and</font>

63
00:02:54,709 --> 00:02:59,360
<font color="#E5E5E5">this person's instruction so you have</font>

64
00:02:56,239 --> 00:03:01,519
three<font color="#E5E5E5"> way to ensure the compiler the</font>

65
00:02:59,360 --> 00:03:03,110
program is<font color="#E5E5E5"> that how is everything</font>

66
00:03:01,519 --> 00:03:06,980
consistent<font color="#E5E5E5"> and how is everything</font>

67
00:03:03,110 --> 00:03:09,590
documented results<font color="#CCCCCC"> to match report</font><font color="#E5E5E5"> we</font>

68
00:03:06,980 --> 00:03:11,780
have one file this file is located in

69
00:03:09,590 --> 00:03:13,280
the same<font color="#E5E5E5"> directory as</font><font color="#CCCCCC"> the pass</font><font color="#E5E5E5"> and it</font>

70
00:03:11,780 --> 00:03:16,130
describes<font color="#E5E5E5"> a lot of thing</font><font color="#CCCCCC"> about the pass</font>

71
00:03:13,280 --> 00:03:18,709
<font color="#CCCCCC">so it's not like the oxygen which try</font><font color="#E5E5E5"> to</font>

72
00:03:16,130 --> 00:03:21,380
document<font color="#E5E5E5"> things we</font><font color="#CCCCCC"> forms that we will</font>

73
00:03:18,709 --> 00:03:24,260
generate various<font color="#CCCCCC"> piece</font><font color="#E5E5E5"> of information</font>

74
00:03:21,380 --> 00:03:25,850
<font color="#E5E5E5">that will be used either by is a C++</font>

75
00:03:24,260 --> 00:03:29,120
code or<font color="#CCCCCC"> by the documentation so that</font>

76
00:03:25,850 --> 00:03:31,040
everything is<font color="#CCCCCC"> consistent</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> as a level</font>

77
00:03:29,120 --> 00:03:33,470
is like<font color="#E5E5E5"> module</font><font color="#CCCCCC"> pass function pass</font>

78
00:03:31,040 --> 00:03:36,260
<font color="#CCCCCC">basically pass reckon it'll build means</font>

79
00:03:33,470 --> 00:03:38,269
can<font color="#E5E5E5"> you use it as a Padma on just an</font>

80
00:03:36,260 --> 00:03:41,000
instruction or block<font color="#CCCCCC"> of instruction</font><font color="#E5E5E5"> even</font>

81
00:03:38,269 --> 00:03:44,030
<font color="#CCCCCC">if it's a function pass the compile time</font>

82
00:03:41,000 --> 00:03:46,160
<font color="#E5E5E5">of your head from our measurements when</font>

83
00:03:44,030 --> 00:03:47,690
you use that your computation time is

84
00:03:46,160 --> 00:03:50,750
going to<font color="#E5E5E5"> be to be multiplied</font><font color="#CCCCCC"> by this</font>

85
00:03:47,690 --> 00:03:53,390
factor<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is a big factor but</font><font color="#E5E5E5"> still</font>

86
00:03:50,750 --> 00:03:55,519
this<font color="#E5E5E5"> is a textual</font><font color="#CCCCCC"> description and then</font>

87
00:03:53,390 --> 00:03:58,488
you have all the<font color="#E5E5E5"> options this will be</font>

88
00:03:55,519 --> 00:04:01,610
<font color="#CCCCCC">forward provided to CL and at the mcl</font>

89
00:03:58,489 --> 00:04:03,650
whatever<font color="#CCCCCC"> mcl it's global variables which</font>

90
00:04:01,610 --> 00:04:05,810
is very<font color="#CCCCCC"> surprising to</font><font color="#E5E5E5"> me but still</font>

91
00:04:03,650 --> 00:04:07,910
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> the way it is and it's</font><font color="#CCCCCC"> this will</font>

92
00:04:05,810 --> 00:04:10,370
plays well with our<font color="#E5E5E5"> directives because</font>

93
00:04:07,910 --> 00:04:12,260
we want<font color="#CCCCCC"> passage to be parametric to be</font>

94
00:04:10,370 --> 00:04:14,209
able<font color="#E5E5E5"> to instantiate different passes</font>

95
00:04:12,260 --> 00:04:16,459
with different options<font color="#CCCCCC"> so we have some</font>

96
00:04:14,209 --> 00:04:18,048
wrapper to do that<font color="#CCCCCC"> and</font><font color="#E5E5E5"> describe them</font><font color="#CCCCCC"> and</font>

97
00:04:16,459 --> 00:04:20,310
whatever<font color="#CCCCCC"> and we also have</font><font color="#E5E5E5"> these</font>

98
00:04:18,048 --> 00:04:23,969
classifiers<font color="#E5E5E5"> because for</font>

99
00:04:20,310 --> 00:04:26,700
users<font color="#E5E5E5"> didn't know about about</font><font color="#CCCCCC"> Winston's</font>

100
00:04:23,970 --> 00:04:29,070
<font color="#CCCCCC">but he knows that it's that application</font>

101
00:04:26,700 --> 00:04:31,740
<font color="#CCCCCC">so when digging</font><font color="#E5E5E5"> through his problem you</font>

102
00:04:29,070 --> 00:04:34,260
know<font color="#E5E5E5"> okay this is the best I can use to</font>

103
00:04:31,740 --> 00:04:37,980
<font color="#E5E5E5">escape my data and it turns out that</font>

104
00:04:34,260 --> 00:04:40,139
this<font color="#CCCCCC"> path supports any targets which is</font>

105
00:04:37,980 --> 00:04:43,020
not the case<font color="#E5E5E5"> for all passes things about</font>

106
00:04:40,139 --> 00:04:46,260
anti debug tools or thing<font color="#CCCCCC"> like that so</font>

107
00:04:43,020 --> 00:04:49,320
from<font color="#CCCCCC"> that file you have the</font><font color="#E5E5E5"> description</font>

108
00:04:46,260 --> 00:04:51,750
<font color="#CCCCCC">you generate</font><font color="#E5E5E5"> some header files so your</font>

109
00:04:49,320 --> 00:04:53,370
actual editor implementation<font color="#CCCCCC"> will derive</font>

110
00:04:51,750 --> 00:04:57,750
from that<font color="#CCCCCC"> and it will get access to</font>

111
00:04:53,370 --> 00:05:00,780
<font color="#CCCCCC">options to</font><font color="#E5E5E5"> good path level and several</font>

112
00:04:57,750 --> 00:05:03,690
<font color="#E5E5E5">stuff we also</font><font color="#CCCCCC"> generates</font><font color="#E5E5E5"> documentation</font>

113
00:05:00,780 --> 00:05:06,030
that will be<font color="#CCCCCC"> forwarded to thanks for</font>

114
00:05:03,690 --> 00:05:09,389
<font color="#CCCCCC">user documentation generation</font><font color="#E5E5E5"> we also</font>

115
00:05:06,030 --> 00:05:10,650
generate part of these classifiers which

116
00:05:09,389 --> 00:05:12,780
<font color="#E5E5E5">is a</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> tables that summarize</font>

117
00:05:10,650 --> 00:05:16,739
everything and we also generate

118
00:05:12,780 --> 00:05:18,989
parameters for<font color="#E5E5E5"> our test suits so that we</font>

119
00:05:16,740 --> 00:05:22,080
can test that<font color="#CCCCCC"> documentation is that</font>

120
00:05:18,990 --> 00:05:26,190
should be correct<font color="#E5E5E5"> and from this we can</font>

121
00:05:22,080 --> 00:05:28,080
access<font color="#E5E5E5"> to regionalize repairs to CL to</font>

122
00:05:26,190 --> 00:05:30,360
the<font color="#E5E5E5"> plasma manager</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> and the actual</font>

123
00:05:28,080 --> 00:05:33,210
class<font color="#CCCCCC"> so everything is generated from</font>

124
00:05:30,360 --> 00:05:35,340
<font color="#E5E5E5">one file so</font><font color="#CCCCCC"> that brings us back to</font>

125
00:05:33,210 --> 00:05:37,260
literate programming where you<font color="#CCCCCC"> have the</font>

126
00:05:35,340 --> 00:05:41,280
code and the documentation and both are

127
00:05:37,260 --> 00:05:42,900
used to generate the tool which consists

128
00:05:41,280 --> 00:05:46,039
in the documentation<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the program and</font>

129
00:05:42,900 --> 00:05:48,719
<font color="#E5E5E5">we have something</font><font color="#CCCCCC"> very similar to</font><font color="#E5E5E5"> that</font>

130
00:05:46,039 --> 00:05:50,760
so there<font color="#E5E5E5"> are several</font><font color="#CCCCCC"> benefits of using</font>

131
00:05:48,720 --> 00:05:53,520
this approach<font color="#E5E5E5"> first</font>

132
00:05:50,760 --> 00:05:55,919
everything is always synchronized<font color="#E5E5E5"> the</font>

133
00:05:53,520 --> 00:05:58,380
documentation the code the directives

134
00:05:55,919 --> 00:06:00,330
the pass code all<font color="#CCCCCC"> the documentation you</font>

135
00:05:58,380 --> 00:06:01,380
<font color="#CCCCCC">can get from the command line the</font>

136
00:06:00,330 --> 00:06:03,539
documentation we get from the

137
00:06:01,380 --> 00:06:05,880
<font color="#E5E5E5">documentation everything is recognized</font>

138
00:06:03,539 --> 00:06:08,610
<font color="#E5E5E5">so though once it's written you don't</font>

139
00:06:05,880 --> 00:06:10,110
need to maintain<font color="#E5E5E5"> it anymore and nothing</font>

140
00:06:08,610 --> 00:06:11,669
<font color="#E5E5E5">happens like you</font><font color="#CCCCCC"> change the</font><font color="#E5E5E5"> code that</font>

141
00:06:10,110 --> 00:06:13,050
you forget to<font color="#CCCCCC"> change the documentation</font>

142
00:06:11,669 --> 00:06:15,389
because<font color="#E5E5E5"> the code is generated through</font>

143
00:06:13,050 --> 00:06:17,669
the<font color="#E5E5E5"> documentation so this kind of step</font>

144
00:06:15,389 --> 00:06:21,150
backward which is really a pain does<font color="#E5E5E5"> not</font>

145
00:06:17,669 --> 00:06:23,849
happen<font color="#E5E5E5"> another thing is you need to</font>

146
00:06:21,150 --> 00:06:26,219
<font color="#E5E5E5">support something else has everything is</font>

147
00:06:23,850 --> 00:06:28,470
generated from one script from<font color="#E5E5E5"> all the</font>

148
00:06:26,220 --> 00:06:30,930
description you can retarget it's<font color="#E5E5E5"> easily</font>

149
00:06:28,470 --> 00:06:34,639
instead of changing<font color="#CCCCCC"> they could if</font>

150
00:06:30,930 --> 00:06:37,199
every pass<font color="#E5E5E5"> so that's very cool because</font>

151
00:06:34,639 --> 00:06:39,660
we<font color="#E5E5E5"> write</font><font color="#CCCCCC"> less dock which gives time to</font>

152
00:06:37,199 --> 00:06:41,850
<font color="#E5E5E5">my teammates to write their family tools</font>

153
00:06:39,660 --> 00:06:48,150
<font color="#E5E5E5">instead of maintenance of documentation</font>

154
00:06:41,850 --> 00:06:49,680
<font color="#CCCCCC">and just</font><font color="#E5E5E5"> to this is the kind of</font>

155
00:06:48,150 --> 00:06:52,349
documentation<font color="#CCCCCC"> engineer</font><font color="#E5E5E5"> right so also</font>

156
00:06:49,680 --> 00:06:56,850
<font color="#E5E5E5">it's generated documentation there's</font>

157
00:06:52,350 --> 00:07:00,030
actual interesting<font color="#CCCCCC"> staff here</font><font color="#E5E5E5"> code</font>

158
00:06:56,850 --> 00:07:03,530
examples that explain how<font color="#CCCCCC"> we</font><font color="#E5E5E5"> how it</font>

159
00:07:00,030 --> 00:07:05,429
behaves<font color="#E5E5E5"> and all the staff here</font><font color="#CCCCCC"> are</font>

160
00:07:03,530 --> 00:07:08,190
automatically<font color="#CCCCCC"> generated from the</font>

161
00:07:05,430 --> 00:07:10,110
description and it turns<font color="#E5E5E5"> out that even</font>

162
00:07:08,190 --> 00:07:12,650
as<font color="#E5E5E5"> we sometimes go to the documentation</font>

163
00:07:10,110 --> 00:07:15,900
<font color="#E5E5E5">copy that and paste it because that's</font>

164
00:07:12,650 --> 00:07:18,750
what we want<font color="#CCCCCC"> to do and that's how the</font>

165
00:07:15,900 --> 00:07:21,929
documentation is<font color="#CCCCCC"> have been used that's</font>

166
00:07:18,750 --> 00:07:26,060
all if<font color="#CCCCCC"> you have an equation</font><font color="#E5E5E5"> please feel</font>

167
00:07:21,930 --> 00:07:26,060
free<font color="#E5E5E5"> otherwise</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> audience</font><font color="#CCCCCC"> John</font>

168
00:07:26,450 --> 00:07:35,920
[Applause]

