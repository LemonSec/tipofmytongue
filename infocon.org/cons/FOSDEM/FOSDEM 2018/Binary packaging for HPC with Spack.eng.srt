1
00:00:07,380 --> 00:00:15,330
<font color="#E5E5E5">okay thanks everyone</font>

2
00:00:09,910 --> 00:00:18,430
our next<font color="#E5E5E5"> speaker is Todd gobbling</font><font color="#CCCCCC"> and</font>

3
00:00:15,330 --> 00:00:21,660
<font color="#CCCCCC">he's gonna tell us about</font><font color="#E5E5E5"> spark maybe you</font>

4
00:00:18,430 --> 00:00:26,050
have some different<font color="#E5E5E5"> opinions and</font><font color="#CCCCCC"> Kenneth</font>

5
00:00:21,660 --> 00:00:28,210
it's gonna be fun<font color="#E5E5E5"> talk so I'm gambling</font>

6
00:00:26,050 --> 00:00:31,390
<font color="#CCCCCC">I wrote spec so I'm biased</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> the</font>

7
00:00:28,210 --> 00:00:35,170
back<font color="#E5E5E5"> I'm gonna be talking about our new</font>

8
00:00:31,390 --> 00:00:36,940
binary packaging capability<font color="#CCCCCC"> and so you</font>

9
00:00:35,170 --> 00:00:39,340
know Kenneth was talking about<font color="#E5E5E5"> how the</font>

10
00:00:36,940 --> 00:00:40,809
build from source tools were slow<font color="#E5E5E5"> we</font>

11
00:00:39,340 --> 00:00:42,970
agree we're trying to add binary

12
00:00:40,810 --> 00:00:43,600
packaging to stack so that's that's what

13
00:00:42,970 --> 00:00:44,830
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> about</font>

14
00:00:43,600 --> 00:00:47,310
I'm gonna<font color="#CCCCCC"> give a</font><font color="#E5E5E5"> little bit of an</font>

15
00:00:44,830 --> 00:00:49,330
overview first who's familiar with spec

16
00:00:47,310 --> 00:00:52,240
not many people<font color="#E5E5E5"> okay cool so the</font>

17
00:00:49,330 --> 00:00:53,710
overview<font color="#E5E5E5"> will be all right so specs a</font>

18
00:00:52,240 --> 00:00:55,750
<font color="#CCCCCC">general purpose from</font><font color="#E5E5E5"> source package</font>

19
00:00:53,710 --> 00:00:57,250
manager for HPC you can think of<font color="#E5E5E5"> this</font>

20
00:00:55,750 --> 00:01:00,040
<font color="#E5E5E5">kind of a</font><font color="#CCCCCC"> combination between homebrew</font>

21
00:00:57,250 --> 00:01:02,739
and<font color="#E5E5E5"> Nix we're targeting HPC and</font>

22
00:01:00,040 --> 00:01:05,049
<font color="#E5E5E5">scientific computing and the community</font>

23
00:01:02,739 --> 00:01:06,640
is growing<font color="#E5E5E5"> this is the contributions to</font>

24
00:01:05,049 --> 00:01:08,320
packages over time by different

25
00:01:06,640 --> 00:01:10,030
<font color="#CCCCCC">organizations and you can see that back</font>

26
00:01:08,320 --> 00:01:12,339
<font color="#E5E5E5">up</font><font color="#CCCCCC"> until 2015 it</font><font color="#E5E5E5"> was pretty much at</font>

27
00:01:10,030 --> 00:01:15,009
Livermore<font color="#E5E5E5"> Lawrence Livermore National</font>

28
00:01:12,340 --> 00:01:16,210
Lab a little more homely project<font color="#CCCCCC"> and</font>

29
00:01:15,009 --> 00:01:18,219
then we started<font color="#CCCCCC"> giving</font><font color="#E5E5E5"> lots of</font>

30
00:01:16,210 --> 00:01:21,880
contributions<font color="#E5E5E5"> after supercomputing 2015</font>

31
00:01:18,219 --> 00:01:23,318
from many of the other labs<font color="#E5E5E5"> the goals of</font>

32
00:01:21,880 --> 00:01:25,780
spec are a little<font color="#E5E5E5"> different from maybe</font>

33
00:01:23,319 --> 00:01:27,189
some<font color="#CCCCCC"> of the other tools</font><font color="#E5E5E5"> we want to allow</font>

34
00:01:25,780 --> 00:01:30,130
people<font color="#CCCCCC"> to experiment with performance</font>

35
00:01:27,189 --> 00:01:31,658
options so we're not we're<font color="#CCCCCC"> not opposed</font>

36
00:01:30,130 --> 00:01:33,579
to<font color="#CCCCCC"> having you build something</font><font color="#E5E5E5"> that no</font>

37
00:01:31,659 --> 00:01:34,630
one's ever built<font color="#CCCCCC"> before with spec we'd</font>

38
00:01:33,579 --> 00:01:35,949
like you to<font color="#E5E5E5"> be able to play with that</font>

39
00:01:34,630 --> 00:01:37,869
and tune your<font color="#E5E5E5"> software or get it working</font>

40
00:01:35,950 --> 00:01:39,189
<font color="#E5E5E5">and we want to make it easy for you to</font>

41
00:01:37,869 --> 00:01:40,810
try different<font color="#E5E5E5"> compilers versions and</font>

42
00:01:39,189 --> 00:01:43,479
build options change compilers and<font color="#E5E5E5"> flags</font>

43
00:01:40,810 --> 00:01:45,310
<font color="#CCCCCC">and then you know swap implementations</font>

44
00:01:43,479 --> 00:01:48,189
of<font color="#E5E5E5"> ABI</font><font color="#CCCCCC"> incompatible libraries like MPI</font>

45
00:01:45,310 --> 00:01:50,170
<font color="#E5E5E5">lot back and Blas we can run on laptops</font>

46
00:01:48,189 --> 00:01:51,249
limits clusters and we also run on some

47
00:01:50,170 --> 00:01:53,939
of the largest supercomputers in the

48
00:01:51,249 --> 00:01:56,829
world<font color="#E5E5E5"> they use back at</font><font color="#CCCCCC"> Oakridge nurse</font>

49
00:01:53,939 --> 00:01:59,169
<font color="#E5E5E5">Livermore Argonne and some of the other</font>

50
00:01:56,829 --> 00:02:00,788
<font color="#E5E5E5">DOA labs as well as</font><font color="#CCCCCC"> EPFL who's</font>

51
00:01:59,170 --> 00:02:02,139
<font color="#E5E5E5">contributed tremendously to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> project</font>

52
00:02:00,789 --> 00:02:06,639
<font color="#E5E5E5">since since the beginning we had some</font>

53
00:02:02,139 --> 00:02:08,019
<font color="#E5E5E5">great collaborators there spec from a</font>

54
00:02:06,639 --> 00:02:09,068
<font color="#CCCCCC">command-line perspective kind</font><font color="#E5E5E5"> of showed</font>

55
00:02:08,020 --> 00:02:12,220
a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this already</font>

56
00:02:09,068 --> 00:02:14,049
the idea is<font color="#CCCCCC"> that if you just clones back</font>

57
00:02:12,220 --> 00:02:15,310
from github<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can get</font><font color="#E5E5E5"> going by</font><font color="#CCCCCC"> just</font>

58
00:02:14,050 --> 00:02:17,530
running<font color="#E5E5E5"> this back command</font>

59
00:02:15,310 --> 00:02:19,599
<font color="#E5E5E5">it should work out of the box on on most</font>

60
00:02:17,530 --> 00:02:21,849
systems<font color="#CCCCCC"> there</font><font color="#E5E5E5"> are a few dependencies</font>

61
00:02:19,599 --> 00:02:23,738
like<font color="#CCCCCC"> kernel and Python obviously but we</font>

62
00:02:21,849 --> 00:02:24,970
try to<font color="#E5E5E5"> work we work back to Python</font><font color="#CCCCCC"> two</font>

63
00:02:23,739 --> 00:02:26,800
point<font color="#CCCCCC"> six</font>

64
00:02:24,970 --> 00:02:29,800
if you clones back and just types back

65
00:02:26,800 --> 00:02:30,670
<font color="#CCCCCC">install</font><font color="#E5E5E5"> some package name</font><font color="#CCCCCC"> that should</font>

66
00:02:29,800 --> 00:02:32,739
<font color="#CCCCCC">work</font>

67
00:02:30,670 --> 00:02:34,059
that's sort<font color="#CCCCCC"> of unconstrained</font><font color="#E5E5E5"> and and</font>

68
00:02:32,739 --> 00:02:36,220
that should do something sensible<font color="#CCCCCC"> on</font>

69
00:02:34,060 --> 00:02:37,540
your machine if you want<font color="#CCCCCC"> to get more</font>

70
00:02:36,220 --> 00:02:39,130
specific<font color="#CCCCCC"> than this though</font><font color="#E5E5E5"> and you have</font>

71
00:02:37,540 --> 00:02:40,660
special<font color="#E5E5E5"> needs then you could say</font><font color="#CCCCCC"> stack</font>

72
00:02:39,130 --> 00:02:42,640
install MPI leaks at a particular

73
00:02:40,660 --> 00:02:44,230
version<font color="#E5E5E5"> you could say spec and saw MPI</font>

74
00:02:42,640 --> 00:02:47,260
leaks<font color="#E5E5E5"> at that version with a particular</font>

75
00:02:44,230 --> 00:02:48,760
compiler<font color="#CCCCCC"> and then you can add options</font>

76
00:02:47,260 --> 00:02:50,829
the different<font color="#CCCCCC"> packages can provide their</font>

77
00:02:48,760 --> 00:02:52,540
own<font color="#E5E5E5"> options you can inject flags into</font>

78
00:02:50,830 --> 00:02:54,280
<font color="#E5E5E5">the build and finally you</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> this</font>

79
00:02:52,540 --> 00:02:55,720
<font color="#CCCCCC">would the</font><font color="#E5E5E5"> syntax is recursive so</font>

80
00:02:54,280 --> 00:02:57,130
essentially any of<font color="#E5E5E5"> these constraints</font>

81
00:02:55,720 --> 00:03:00,250
<font color="#CCCCCC">that you put on the top level package</font>

82
00:02:57,130 --> 00:03:02,380
<font color="#E5E5E5">you can put on in dependency as well and</font>

83
00:03:00,250 --> 00:03:04,480
the idea<font color="#CCCCCC"> here is that</font><font color="#E5E5E5"> the user just says</font>

84
00:03:02,380 --> 00:03:05,890
what they need and we work out the rest

85
00:03:04,480 --> 00:03:07,510
<font color="#E5E5E5">you don't have to</font><font color="#CCCCCC"> specify all the</font>

86
00:03:05,890 --> 00:03:10,480
<font color="#E5E5E5">parameters</font><font color="#CCCCCC"> required for</font><font color="#E5E5E5"> for doing</font><font color="#CCCCCC"> a</font>

87
00:03:07,510 --> 00:03:12,459
build<font color="#CCCCCC"> smack packages</font><font color="#E5E5E5"> if you</font><font color="#CCCCCC"> actually</font>

88
00:03:10,480 --> 00:03:14,500
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> write them it's fairly easy you</font>

89
00:03:12,459 --> 00:03:16,930
can just<font color="#E5E5E5"> say spec edit name and it'll</font>

90
00:03:14,500 --> 00:03:19,480
pull<font color="#E5E5E5"> up the package for that thing they</font>

91
00:03:16,930 --> 00:03:21,670
<font color="#CCCCCC">are simple</font><font color="#E5E5E5"> Python scripts and this these</font>

92
00:03:19,480 --> 00:03:23,920
look like<font color="#CCCCCC"> homebrew packages if anyone</font>

93
00:03:21,670 --> 00:03:26,559
has<font color="#E5E5E5"> seen a homebrew package</font><font color="#CCCCCC"> before but</font>

94
00:03:23,920 --> 00:03:28,179
they're in Python instead of Ruby<font color="#CCCCCC"> this</font>

95
00:03:26,560 --> 00:03:29,650
<font color="#CCCCCC">is all metadata</font><font color="#E5E5E5"> up here this tells you</font>

96
00:03:28,180 --> 00:03:31,000
the versions<font color="#E5E5E5"> that you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> download this</font>

97
00:03:29,650 --> 00:03:34,930
is<font color="#E5E5E5"> the home page</font><font color="#CCCCCC"> for the package in</font><font color="#E5E5E5"> the</font>

98
00:03:31,000 --> 00:03:36,549
URL<font color="#CCCCCC"> these are the</font><font color="#E5E5E5"> dependencies here this</font>

99
00:03:34,930 --> 00:03:38,980
is what you would<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to say you can</font>

100
00:03:36,549 --> 00:03:40,569
<font color="#E5E5E5">use that</font><font color="#CCCCCC"> same spec syntax to constrain</font>

101
00:03:38,980 --> 00:03:42,459
dependencies so<font color="#CCCCCC"> you can say this depends</font>

102
00:03:40,569 --> 00:03:44,950
on boost at<font color="#E5E5E5"> one point for two or higher</font>

103
00:03:42,459 --> 00:03:47,260
with an option and then in here there's

104
00:03:44,950 --> 00:03:49,000
this is just simple build instructions

105
00:03:47,260 --> 00:03:50,679
and this<font color="#E5E5E5"> is the most kind of like</font><font color="#CCCCCC"> shell</font>

106
00:03:49,000 --> 00:03:52,269
because all this is doing<font color="#E5E5E5"> is saying with</font>

107
00:03:50,680 --> 00:03:54,760
this<font color="#E5E5E5"> working directory call see make</font>

108
00:03:52,269 --> 00:03:56,049
with some<font color="#CCCCCC"> options make make install and</font>

109
00:03:54,760 --> 00:04:00,720
<font color="#E5E5E5">that's it so it should it should look</font>

110
00:03:56,049 --> 00:04:03,010
pretty simple to<font color="#E5E5E5"> do to a typical user</font>

111
00:04:00,720 --> 00:04:05,079
<font color="#E5E5E5">the other thing about fact that</font><font color="#CCCCCC"> that we</font>

112
00:04:03,010 --> 00:04:07,450
added<font color="#E5E5E5"> to address a lot</font><font color="#CCCCCC"> of the problems</font>

113
00:04:05,079 --> 00:04:10,630
that<font color="#E5E5E5"> we saw with HPC builds is depending</font>

114
00:04:07,450 --> 00:04:13,810
<font color="#E5E5E5">on virtual packages and so if you look</font>

115
00:04:10,630 --> 00:04:16,630
<font color="#E5E5E5">at MPI or</font><font color="#CCCCCC"> Blas or</font><font color="#E5E5E5"> wot pack those are</font>

116
00:04:13,810 --> 00:04:18,370
packages those are interfaces<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you</font>

117
00:04:16,630 --> 00:04:20,260
you essentially depend on the interface

118
00:04:18,370 --> 00:04:22,120
<font color="#E5E5E5">and not on the package so the package</font>

119
00:04:20,260 --> 00:04:25,570
that<font color="#CCCCCC"> can</font><font color="#E5E5E5"> build with</font><font color="#CCCCCC"> n pitch can also</font>

120
00:04:22,120 --> 00:04:27,010
build with openmpi usually<font color="#E5E5E5"> and so</font>

121
00:04:25,570 --> 00:04:27,909
packages inspect they don't depend<font color="#E5E5E5"> on</font>

122
00:04:27,010 --> 00:04:29,920
<font color="#E5E5E5">either of those two</font><font color="#CCCCCC"> and</font>

123
00:04:27,910 --> 00:04:32,190
<font color="#E5E5E5">patient's that depend on</font><font color="#CCCCCC"> NPI</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you can</font>

124
00:04:29,920 --> 00:04:35,260
<font color="#E5E5E5">swap in an implementation</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> essentially</font>

125
00:04:32,190 --> 00:04:37,180
the NPI leaks package here would depend

126
00:04:35,260 --> 00:04:38,710
<font color="#E5E5E5">on</font><font color="#CCCCCC"> MPI</font><font color="#E5E5E5"> it may be a</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> or higher if it</font>

127
00:04:37,180 --> 00:04:40,570
<font color="#CCCCCC">requires the MPI to interface</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can</font>

128
00:04:38,710 --> 00:04:43,780
<font color="#CCCCCC">version these interfaces</font><font color="#E5E5E5"> and these two</font>

129
00:04:40,570 --> 00:04:45,340
packages<font color="#E5E5E5"> provide interfaces it at the</font>

130
00:04:43,780 --> 00:04:46,869
interface at other versions and<font color="#E5E5E5"> so</font>

131
00:04:45,340 --> 00:04:48,340
essentially you<font color="#E5E5E5"> can swap any of those</font>

132
00:04:46,870 --> 00:04:49,660
into the build<font color="#E5E5E5"> using the same</font>

133
00:04:48,340 --> 00:04:53,200
<font color="#CCCCCC">command-line syntax you can</font><font color="#E5E5E5"> tell it</font>

134
00:04:49,660 --> 00:04:54,910
which which MPI<font color="#E5E5E5"> to use we build with</font>

135
00:04:53,200 --> 00:04:56,200
compiler wrappers<font color="#E5E5E5"> this is somewhat</font>

136
00:04:54,910 --> 00:04:59,350
important for the<font color="#E5E5E5"> binary packaging</font>

137
00:04:56,200 --> 00:05:01,330
aspect<font color="#E5E5E5"> because we use this to add our</font>

138
00:04:59,350 --> 00:05:02,680
<font color="#E5E5E5">pets to the build and so the idea with</font>

139
00:05:01,330 --> 00:05:03,820
<font color="#E5E5E5">SPAC is that we don't actually</font><font color="#CCCCCC"> require</font>

140
00:05:02,680 --> 00:05:05,620
you<font color="#CCCCCC"> to use modules or any other</font>

141
00:05:03,820 --> 00:05:07,599
<font color="#CCCCCC">environment management</font><font color="#E5E5E5"> system when we</font>

142
00:05:05,620 --> 00:05:09,190
build the library<font color="#CCCCCC"> we make sure</font><font color="#E5E5E5"> that the</font>

143
00:05:07,600 --> 00:05:10,270
right<font color="#E5E5E5"> ARP has go into the libraries</font>

144
00:05:09,190 --> 00:05:12,370
which means that they know how to find

145
00:05:10,270 --> 00:05:13,750
their dependencies<font color="#E5E5E5"> and so if you build</font>

146
00:05:12,370 --> 00:05:15,370
<font color="#E5E5E5">an executable with spec it should just</font>

147
00:05:13,750 --> 00:05:17,080
run and it should know where<font color="#E5E5E5"> its</font>

148
00:05:15,370 --> 00:05:18,550
dependencies live and the user<font color="#E5E5E5"> shouldn't</font>

149
00:05:17,080 --> 00:05:19,930
have to do anything<font color="#CCCCCC"> and moreover they</font>

150
00:05:18,550 --> 00:05:21,880
can't screw<font color="#CCCCCC"> it up with</font><font color="#E5E5E5"> LD library path</font>

151
00:05:19,930 --> 00:05:24,160
if they try because our path takes

152
00:05:21,880 --> 00:05:25,600
precedence<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we actually like that we</font>

153
00:05:24,160 --> 00:05:27,580
get lots of user support calls from

154
00:05:25,600 --> 00:05:28,660
users<font color="#CCCCCC"> who have put</font><font color="#E5E5E5"> something in their LD</font>

155
00:05:27,580 --> 00:05:31,539
library path<font color="#E5E5E5"> they don't know that</font>

156
00:05:28,660 --> 00:05:33,460
they've<font color="#CCCCCC"> done it or what</font><font color="#E5E5E5"> it means and and</font>

157
00:05:31,540 --> 00:05:36,460
then every one of their packages is

158
00:05:33,460 --> 00:05:38,409
screwed up in some way or<font color="#CCCCCC"> another</font><font color="#E5E5E5"> you we</font>

159
00:05:36,460 --> 00:05:39,609
could very easily put run<font color="#CCCCCC"> path in here</font>

160
00:05:38,410 --> 00:05:43,120
if people<font color="#CCCCCC"> have strong feelings</font><font color="#E5E5E5"> about</font>

161
00:05:39,610 --> 00:05:45,100
<font color="#E5E5E5">that but for now we're using our path we</font>

162
00:05:43,120 --> 00:05:47,140
also inject<font color="#E5E5E5"> included in library search</font>

163
00:05:45,100 --> 00:05:48,610
paths for dependencies<font color="#CCCCCC"> so that</font>

164
00:05:47,140 --> 00:05:51,280
essentially<font color="#E5E5E5"> you don't have to</font><font color="#CCCCCC"> modify the</font>

165
00:05:48,610 --> 00:05:53,410
package<font color="#E5E5E5"> build script very much to find</font>

166
00:05:51,280 --> 00:05:54,900
<font color="#E5E5E5">your external dependencies we try really</font>

167
00:05:53,410 --> 00:05:57,160
<font color="#E5E5E5">hard</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make it so that the build works</font>

168
00:05:54,900 --> 00:06:00,940
<font color="#CCCCCC">as though those packages are on the</font>

169
00:05:57,160 --> 00:06:02,560
system note<font color="#CCCCCC"> that this is not</font><font color="#E5E5E5"> the same</font>

170
00:06:00,940 --> 00:06:04,930
<font color="#E5E5E5">kind of sandbox that like geeks or</font><font color="#CCCCCC"> Nix</font>

171
00:06:02,560 --> 00:06:06,669
<font color="#E5E5E5">use this is just a separate process for</font>

172
00:06:04,930 --> 00:06:08,020
<font color="#E5E5E5">the build where we use these compiler</font>

173
00:06:06,669 --> 00:06:09,849
wrappers we're not doing full<font color="#E5E5E5"> isolation</font>

174
00:06:08,020 --> 00:06:11,320
yet<font color="#CCCCCC"> and we find it somewhat hard to</font><font color="#E5E5E5"> do</font>

175
00:06:09,850 --> 00:06:12,760
that<font color="#E5E5E5"> on the systems like</font><font color="#CCCCCC"> Cray where</font>

176
00:06:11,320 --> 00:06:14,830
there's so much vendor stuff<font color="#E5E5E5"> in the</font>

177
00:06:12,760 --> 00:06:17,980
environment<font color="#CCCCCC"> that you have to rely on we</font>

178
00:06:14,830 --> 00:06:19,990
would like to<font color="#E5E5E5"> us my sandbox more and</font>

179
00:06:17,980 --> 00:06:21,160
then spec is designed to handle<font color="#E5E5E5"> all the</font>

180
00:06:19,990 --> 00:06:23,440
versions<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you would want to build up</font>

181
00:06:21,160 --> 00:06:24,880
these packages essentially if any aspect

182
00:06:23,440 --> 00:06:27,130
of the configuration changes you get<font color="#CCCCCC"> a</font>

183
00:06:24,880 --> 00:06:29,830
different hash and so in that way it's

184
00:06:27,130 --> 00:06:31,719
<font color="#CCCCCC">very similar to geeks or Nix</font><font color="#E5E5E5"> we take</font>

185
00:06:29,830 --> 00:06:33,640
this whole bag and the metadata on<font color="#E5E5E5"> all</font>

186
00:06:31,720 --> 00:06:35,350
the nodes and we hatch that and every

187
00:06:33,640 --> 00:06:37,510
<font color="#CCCCCC">configuration of a package gets its own</font>

188
00:06:35,350 --> 00:06:39,310
unique install directory<font color="#E5E5E5"> and the</font>

189
00:06:37,510 --> 00:06:40,630
libraries<font color="#CCCCCC"> in here like I said they know</font>

190
00:06:39,310 --> 00:06:42,120
how to<font color="#E5E5E5"> find the dependencies in other</font>

191
00:06:40,630 --> 00:06:45,060
direct

192
00:06:42,120 --> 00:06:46,170
<font color="#CCCCCC">whereas now here again</font><font color="#E5E5E5"> is that</font><font color="#CCCCCC"> you</font>

193
00:06:45,060 --> 00:06:47,940
<font color="#CCCCCC">probably knew what you were doing when</font>

194
00:06:46,170 --> 00:06:50,160
<font color="#CCCCCC">you built the thing or at least the</font>

195
00:06:47,940 --> 00:06:51,210
package manager<font color="#CCCCCC"> did but by the</font><font color="#E5E5E5"> time you</font>

196
00:06:50,160 --> 00:06:52,410
get<font color="#E5E5E5"> around to running it you've probably</font>

197
00:06:51,210 --> 00:06:54,359
forgotten<font color="#E5E5E5"> all the things that</font><font color="#CCCCCC"> your</font>

198
00:06:52,410 --> 00:06:56,160
<font color="#E5E5E5">library with 50 dependencies relies on</font>

199
00:06:54,360 --> 00:06:59,940
and so<font color="#E5E5E5"> you shouldn't have</font><font color="#CCCCCC"> to remember it</font>

200
00:06:56,160 --> 00:07:02,160
at that time just to run the<font color="#E5E5E5"> thing the</font>

201
00:06:59,940 --> 00:07:03,180
other<font color="#CCCCCC"> thing that we do</font><font color="#E5E5E5"> that maybe is a</font>

202
00:07:02,160 --> 00:07:04,530
<font color="#CCCCCC">little different from some of the other</font>

203
00:07:03,180 --> 00:07:07,260
package managers that<font color="#CCCCCC"> have been</font>

204
00:07:04,530 --> 00:07:08,309
discussed except for Conda<font color="#E5E5E5"> is we do</font>

205
00:07:07,260 --> 00:07:09,870
something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we call concretization</font>

206
00:07:08,310 --> 00:07:12,360
and most people call dependency

207
00:07:09,870 --> 00:07:14,340
resolution<font color="#E5E5E5"> if you gives back this</font>

208
00:07:12,360 --> 00:07:17,160
description<font color="#CCCCCC"> this is a set of constraints</font>

209
00:07:14,340 --> 00:07:19,320
<font color="#E5E5E5">we generate an abstract tag from that</font>

210
00:07:17,160 --> 00:07:20,430
<font color="#CCCCCC">that tells you you know here's all the</font>

211
00:07:19,320 --> 00:07:21,690
packages you're going to<font color="#E5E5E5"> build with the</font>

212
00:07:20,430 --> 00:07:23,820
constraints<font color="#CCCCCC"> that you cared about on it</font>

213
00:07:21,690 --> 00:07:26,540
<font color="#E5E5E5">and we run concretization on that to</font>

214
00:07:23,820 --> 00:07:29,219
<font color="#E5E5E5">basically fill in all the blanks</font><font color="#CCCCCC"> and</font>

215
00:07:26,540 --> 00:07:30,570
<font color="#E5E5E5">what that does is that</font><font color="#CCCCCC"> by the</font><font color="#E5E5E5"> time you</font>

216
00:07:29,220 --> 00:07:32,400
get<font color="#E5E5E5"> around to</font><font color="#CCCCCC"> the install</font><font color="#E5E5E5"> method in your</font>

217
00:07:30,570 --> 00:07:33,630
package<font color="#E5E5E5"> this pack is going to pass you a</font>

218
00:07:32,400 --> 00:07:35,039
full description<font color="#E5E5E5"> of what it</font><font color="#CCCCCC"> is that you</font>

219
00:07:33,630 --> 00:07:36,840
need to<font color="#E5E5E5"> build so your task is an</font>

220
00:07:35,040 --> 00:07:38,430
implementer of a<font color="#CCCCCC"> SPAC package</font><font color="#E5E5E5"> is</font>

221
00:07:36,840 --> 00:07:40,289
basically to translate this<font color="#E5E5E5"> full</font>

222
00:07:38,430 --> 00:07:41,910
description into filled instructions you

223
00:07:40,290 --> 00:07:43,440
don't have to do<font color="#E5E5E5"> things like this</font>

224
00:07:41,910 --> 00:07:45,270
installed here is<font color="#E5E5E5"> this installed here is</font>

225
00:07:43,440 --> 00:07:46,580
this installed here<font color="#E5E5E5"> what dependency in</font>

226
00:07:45,270 --> 00:07:49,229
my building with and things like<font color="#CCCCCC"> that</font>

227
00:07:46,580 --> 00:07:51,359
<font color="#CCCCCC">and we store that on disk with with</font>

228
00:07:49,230 --> 00:07:53,010
fairly extensive provenance<font color="#E5E5E5"> and you</font>

229
00:07:51,360 --> 00:08:00,420
could<font color="#E5E5E5"> rebuild this this</font><font color="#CCCCCC"> configuration</font>

230
00:07:53,010 --> 00:08:02,670
from so source installs are great<font color="#E5E5E5"> but</font>

231
00:08:00,420 --> 00:08:04,380
<font color="#E5E5E5">they're slow</font><font color="#CCCCCC"> I think most people</font><font color="#E5E5E5"> prefer</font>

232
00:08:02,670 --> 00:08:06,840
using<font color="#E5E5E5"> a binary package manager</font><font color="#CCCCCC"> for that</font>

233
00:08:04,380 --> 00:08:08,040
reason I know I use homebrew on my Mac

234
00:08:06,840 --> 00:08:10,650
which<font color="#CCCCCC"> is pretty much</font><font color="#E5E5E5"> a binary package</font>

235
00:08:08,040 --> 00:08:13,800
<font color="#CCCCCC">manager' these days I use Debbie I use</font>

236
00:08:10,650 --> 00:08:16,590
<font color="#E5E5E5">apt</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> Debian and that's very nice and</font>

237
00:08:13,800 --> 00:08:17,640
<font color="#E5E5E5">it's super fast and very reliable so</font>

238
00:08:16,590 --> 00:08:19,560
we'd like<font color="#E5E5E5"> to have the best</font><font color="#CCCCCC"> of both</font>

239
00:08:17,640 --> 00:08:23,099
<font color="#CCCCCC">worlds we would</font><font color="#E5E5E5"> really like</font><font color="#CCCCCC"> to have</font>

240
00:08:19,560 --> 00:08:25,320
<font color="#E5E5E5">optimized binary installations where if</font>

241
00:08:23,100 --> 00:08:27,180
I'm running<font color="#E5E5E5"> on say a Haswell chip then I</font>

242
00:08:25,320 --> 00:08:29,099
get that<font color="#E5E5E5"> nice AVX optimized version</font><font color="#CCCCCC"> of</font>

243
00:08:27,180 --> 00:08:31,770
fftw and I say<font color="#CCCCCC"> installed and I get it in</font>

244
00:08:29,100 --> 00:08:33,510
a<font color="#CCCCCC"> couple seconds traditionally binary</font>

245
00:08:31,770 --> 00:08:35,370
package managers don't provide<font color="#E5E5E5"> that</font>

246
00:08:33,510 --> 00:08:37,979
<font color="#E5E5E5">because</font><font color="#CCCCCC"> they have</font><font color="#E5E5E5"> to build generically</font>

247
00:08:35,370 --> 00:08:40,549
<font color="#E5E5E5">so that you can run the binaries on most</font>

248
00:08:37,979 --> 00:08:43,650
machines<font color="#E5E5E5"> that you would want to and so</font>

249
00:08:40,549 --> 00:08:45,870
<font color="#E5E5E5">you know I think what we would need</font><font color="#CCCCCC"> to</font>

250
00:08:43,650 --> 00:08:47,220
<font color="#E5E5E5">make this happen</font><font color="#CCCCCC"> is well we would first</font>

251
00:08:45,870 --> 00:08:48,390
<font color="#E5E5E5">need a binary packaging capability in</font>

252
00:08:47,220 --> 00:08:50,560
<font color="#CCCCCC">SPAC that's most of what I'm going to</font>

253
00:08:48,390 --> 00:08:52,300
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> today we would need some</font>

254
00:08:50,560 --> 00:08:53,650
<font color="#CCCCCC">to</font><font color="#E5E5E5"> describing our retexture specific</font>

255
00:08:52,300 --> 00:08:55,660
build so<font color="#CCCCCC"> we would</font><font color="#E5E5E5"> need to know that</font><font color="#CCCCCC"> a</font>

256
00:08:53,650 --> 00:08:58,240
<font color="#E5E5E5">particular binary is is for a</font><font color="#CCCCCC"> particular</font>

257
00:08:55,660 --> 00:08:59,589
architecture<font color="#CCCCCC"> and then we would</font><font color="#E5E5E5"> need good</font>

258
00:08:58,240 --> 00:09:01,360
dependency resolution so<font color="#CCCCCC"> that we could</font>

259
00:08:59,590 --> 00:09:03,070
actually select optimized or generic

260
00:09:01,360 --> 00:09:06,070
versions of the package<font color="#E5E5E5"> depending on</font>

261
00:09:03,070 --> 00:09:07,870
what people want<font color="#CCCCCC"> and so I will</font><font color="#E5E5E5"> say that</font>

262
00:09:06,070 --> 00:09:11,589
<font color="#E5E5E5">you know well I would like to have these</font>

263
00:09:07,870 --> 00:09:14,650
optimized builds some of our<font color="#CCCCCC"> users would</font>

264
00:09:11,589 --> 00:09:16,330
<font color="#CCCCCC">not because they run</font><font color="#E5E5E5"> on clusters with</font>

265
00:09:14,650 --> 00:09:17,709
<font color="#E5E5E5">heterogeneous</font><font color="#CCCCCC"> Hardware so like</font>

266
00:09:16,330 --> 00:09:19,750
particularly<font color="#CCCCCC"> the guys at CERN in</font>

267
00:09:17,710 --> 00:09:21,010
Fermilab<font color="#E5E5E5"> their clusters have all</font>

268
00:09:19,750 --> 00:09:23,140
<font color="#CCCCCC">different</font><font color="#E5E5E5"> kinds</font><font color="#CCCCCC"> of architectures</font><font color="#E5E5E5"> and if</font>

269
00:09:21,010 --> 00:09:24,339
they were to<font color="#E5E5E5"> deploy</font><font color="#CCCCCC"> and optimize binary</font>

270
00:09:23,140 --> 00:09:26,199
then it wouldn't<font color="#E5E5E5"> run on half their</font>

271
00:09:24,339 --> 00:09:27,820
machines<font color="#E5E5E5"> so they</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> to deploy the</font>

272
00:09:26,200 --> 00:09:29,620
lowest common<font color="#E5E5E5"> denominator generic things</font>

273
00:09:27,820 --> 00:09:34,180
<font color="#E5E5E5">and so we would need some settings</font><font color="#CCCCCC"> for</font>

274
00:09:29,620 --> 00:09:36,850
that so we recently really expect

275
00:09:34,180 --> 00:09:40,029
version 0.1 and quickly released<font color="#E5E5E5"> 0 11</font>

276
00:09:36,850 --> 00:09:42,610
<font color="#E5E5E5">one thanks to kenneth and so that that</font>

277
00:09:40,029 --> 00:09:46,150
<font color="#CCCCCC">has this binary packaging feature and so</font>

278
00:09:42,610 --> 00:09:48,250
that's what<font color="#CCCCCC"> i'm going to</font><font color="#E5E5E5"> talk about we</font>

279
00:09:46,150 --> 00:09:51,310
<font color="#E5E5E5">have this build cache command where</font>

280
00:09:48,250 --> 00:09:53,860
<font color="#E5E5E5">essentially</font><font color="#CCCCCC"> you can say</font><font color="#E5E5E5"> create some sort</font>

281
00:09:51,310 --> 00:09:56,079
of so though cache create will take an

282
00:09:53,860 --> 00:09:58,000
existing<font color="#E5E5E5"> spec installation and create a</font>

283
00:09:56,080 --> 00:09:59,170
<font color="#E5E5E5">binary package out</font><font color="#CCCCCC"> of it</font><font color="#E5E5E5"> you can list</font>

284
00:09:58,000 --> 00:10:00,610
available binaries<font color="#E5E5E5"> and then you can</font>

285
00:09:59,170 --> 00:10:01,990
<font color="#E5E5E5">install a binary although people don't</font>

286
00:10:00,610 --> 00:10:03,790
typically use<font color="#E5E5E5"> this directly this back</font>

287
00:10:01,990 --> 00:10:06,850
install command<font color="#E5E5E5"> would just do it for you</font>

288
00:10:03,790 --> 00:10:09,010
automatically<font color="#CCCCCC"> you can do spec install</font><font color="#E5E5E5"> -</font>

289
00:10:06,850 --> 00:10:11,020
-<font color="#E5E5E5"> use cache which says if there is a</font>

290
00:10:09,010 --> 00:10:12,970
binary available for something then go

291
00:10:11,020 --> 00:10:14,920
prefer that to<font color="#E5E5E5"> the source build we don't</font>

292
00:10:12,970 --> 00:10:16,839
make this default<font color="#E5E5E5"> yet because we don't</font>

293
00:10:14,920 --> 00:10:18,910
<font color="#E5E5E5">currently ship</font><font color="#CCCCCC"> staple binaries we don't</font>

294
00:10:16,839 --> 00:10:20,440
have a repository out there with with

295
00:10:18,910 --> 00:10:21,730
binary<font color="#E5E5E5"> in it yet we were just</font><font color="#CCCCCC"> providing</font>

296
00:10:20,440 --> 00:10:24,370
this<font color="#CCCCCC"> capability so</font><font color="#E5E5E5"> you could use this</font>

297
00:10:21,730 --> 00:10:26,650
site local<font color="#CCCCCC"> with your own binaries if you</font>

298
00:10:24,370 --> 00:10:28,300
<font color="#E5E5E5">wanted to but I wouldn't we will</font>

299
00:10:26,650 --> 00:10:29,620
currently have a repository of<font color="#E5E5E5"> binaries</font>

300
00:10:28,300 --> 00:10:32,280
that<font color="#E5E5E5"> we're building we're planning to do</font>

301
00:10:29,620 --> 00:10:35,170
<font color="#CCCCCC">that by I guess September of this year</font>

302
00:10:32,280 --> 00:10:37,689
<font color="#CCCCCC">for certain OSS and I'll talk about</font><font color="#E5E5E5"> that</font>

303
00:10:35,170 --> 00:10:39,969
<font color="#E5E5E5">later and so this was a collaboration</font>

304
00:10:37,690 --> 00:10:41,380
<font color="#E5E5E5">between us Fermilab CERN and kitware and</font>

305
00:10:39,970 --> 00:10:46,740
so we're very<font color="#E5E5E5"> thankful for</font><font color="#CCCCCC"> our</font>

306
00:10:41,380 --> 00:10:48,580
contributors<font color="#E5E5E5"> for stuff like this</font><font color="#CCCCCC"> so in a</font>

307
00:10:46,740 --> 00:10:49,690
we're happy<font color="#CCCCCC"> that specs grow in a</font>

308
00:10:48,580 --> 00:10:51,100
community where we<font color="#E5E5E5"> can</font><font color="#CCCCCC"> actually get</font>

309
00:10:49,690 --> 00:10:53,370
substantial<font color="#CCCCCC"> core contributions from</font>

310
00:10:51,100 --> 00:10:53,370
<font color="#E5E5E5">people</font>

311
00:10:53,620 --> 00:10:57,760
if you want to make a binary<font color="#CCCCCC"> ins</font><font color="#E5E5E5"> back</font>

312
00:10:55,020 --> 00:11:02,590
<font color="#E5E5E5">essentially what you do is you set up</font>

313
00:10:57,760 --> 00:11:03,550
new<font color="#CCCCCC"> GPG</font><font color="#E5E5E5"> we actually use signing for our</font>

314
00:11:02,590 --> 00:11:05,770
packages and<font color="#E5E5E5"> I'll talk a little</font><font color="#CCCCCC"> bit</font>

315
00:11:03,550 --> 00:11:07,150
about that<font color="#E5E5E5"> later but we have some</font><font color="#CCCCCC"> spec</font>

316
00:11:05,770 --> 00:11:10,449
wrapper commands that<font color="#E5E5E5"> let you create a</font>

317
00:11:07,150 --> 00:11:11,800
signing key pair<font color="#E5E5E5"> and then you can do</font><font color="#CCCCCC"> GPG</font>

318
00:11:10,450 --> 00:11:13,420
in it to tell<font color="#E5E5E5"> us about to trust the</font>

319
00:11:11,800 --> 00:11:14,530
thing that you just<font color="#E5E5E5"> created and once</font>

320
00:11:13,420 --> 00:11:16,449
you're<font color="#E5E5E5"> done with that you</font><font color="#CCCCCC"> just install</font>

321
00:11:14,530 --> 00:11:17,860
<font color="#E5E5E5">something as you normally would this</font>

322
00:11:16,450 --> 00:11:19,540
<font color="#CCCCCC">thing will go and build from source and</font>

323
00:11:17,860 --> 00:11:21,100
then<font color="#E5E5E5"> you can call spec fine</font><font color="#CCCCCC"> to see</font>

324
00:11:19,540 --> 00:11:23,860
what's installed and you'll say oh<font color="#CCCCCC"> okay</font>

325
00:11:21,100 --> 00:11:25,300
you install them<font color="#CCCCCC"> for</font><font color="#E5E5E5"> it depends on</font>

326
00:11:23,860 --> 00:11:27,730
lipsticks egg<font color="#E5E5E5"> V so that got installed</font>

327
00:11:25,300 --> 00:11:29,290
and then<font color="#CCCCCC"> for is</font><font color="#E5E5E5"> also installed now and</font>

328
00:11:27,730 --> 00:11:31,480
then you can<font color="#CCCCCC"> just</font><font color="#E5E5E5"> say spec</font><font color="#CCCCCC"> ville cache</font>

329
00:11:29,290 --> 00:11:33,730
create<font color="#E5E5E5"> give it a path to where you want</font>

330
00:11:31,480 --> 00:11:35,230
<font color="#E5E5E5">to put the binaries and then the name of</font>

331
00:11:33,730 --> 00:11:36,400
<font color="#CCCCCC">the thing that you want</font><font color="#E5E5E5"> to install</font><font color="#CCCCCC"> and</font>

332
00:11:35,230 --> 00:11:38,490
<font color="#E5E5E5">that's just respect</font><font color="#CCCCCC"> if something that's</font>

333
00:11:36,400 --> 00:11:41,110
installed<font color="#CCCCCC"> and so this will write</font>

334
00:11:38,490 --> 00:11:44,230
binaries and and<font color="#E5E5E5"> metadata into this</font>

335
00:11:41,110 --> 00:11:46,720
mirror<font color="#CCCCCC"> and so that's a build cache and</font>

336
00:11:44,230 --> 00:11:49,330
then you're done so let's take a look<font color="#E5E5E5"> at</font>

337
00:11:46,720 --> 00:11:51,910
what that<font color="#CCCCCC"> looks like</font><font color="#E5E5E5"> inside</font><font color="#CCCCCC"> the binary</font>

338
00:11:49,330 --> 00:11:53,560
mirror<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is actually inside of a we</font>

339
00:11:51,910 --> 00:11:55,870
<font color="#E5E5E5">have this concept of mirror in fact</font>

340
00:11:53,560 --> 00:11:57,189
where you can basically<font color="#E5E5E5"> take a directory</font>

341
00:11:55,870 --> 00:11:59,650
full of source<font color="#E5E5E5"> tar balls and host it</font>

342
00:11:57,190 --> 00:12:01,330
<font color="#E5E5E5">wherever you want</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> binary mirror sits</font>

343
00:11:59,650 --> 00:12:02,380
inside<font color="#E5E5E5"> of a regular</font><font color="#CCCCCC"> old source mirror so</font>

344
00:12:01,330 --> 00:12:03,820
you<font color="#E5E5E5"> can have a mirror that contains both</font>

345
00:12:02,380 --> 00:12:05,770
<font color="#E5E5E5">sources and binaries and you can place</font>

346
00:12:03,820 --> 00:12:08,590
back<font color="#E5E5E5"> to them the same way just a mirror</font>

347
00:12:05,770 --> 00:12:11,350
<font color="#CCCCCC">add URL</font><font color="#E5E5E5"> and it can go</font><font color="#CCCCCC"> infection packages</font>

348
00:12:08,590 --> 00:12:13,510
from<font color="#E5E5E5"> there inside the mirror we've got</font>

349
00:12:11,350 --> 00:12:15,790
things separated by the architecture the

350
00:12:13,510 --> 00:12:18,100
compiler<font color="#CCCCCC"> that was used and then the</font>

351
00:12:15,790 --> 00:12:19,209
particular<font color="#CCCCCC"> library name and version</font><font color="#E5E5E5"> and</font>

352
00:12:18,100 --> 00:12:20,950
then the package files are these big

353
00:12:19,210 --> 00:12:23,640
ugly things that you don't<font color="#CCCCCC"> have to worry</font>

354
00:12:20,950 --> 00:12:26,200
too much about what they're called<font color="#E5E5E5"> but</font>

355
00:12:23,640 --> 00:12:28,150
<font color="#CCCCCC">this dot spec file here is the</font><font color="#E5E5E5"> actual</font>

356
00:12:26,200 --> 00:12:29,740
binary package and then<font color="#E5E5E5"> that'sthat's</font>

357
00:12:28,150 --> 00:12:31,449
pack<font color="#E5E5E5"> file is the binary package for m4</font>

358
00:12:29,740 --> 00:12:33,100
so we built<font color="#CCCCCC"> two actually one for the</font>

359
00:12:31,450 --> 00:12:34,660
package<font color="#E5E5E5"> and one first dependency and</font>

360
00:12:33,100 --> 00:12:38,140
then these down here<font color="#E5E5E5"> are metadata to</font>

361
00:12:34,660 --> 00:12:42,250
tell a client<font color="#E5E5E5"> what's actually in in the</font>

362
00:12:38,140 --> 00:12:43,449
repository<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> and so</font><font color="#CCCCCC"> two points</font>

363
00:12:42,250 --> 00:12:45,400
back<font color="#E5E5E5"> in the mirror</font><font color="#CCCCCC"> all you really have</font>

364
00:12:43,450 --> 00:12:46,930
<font color="#E5E5E5">to do is once you set</font><font color="#CCCCCC"> that directory up</font>

365
00:12:45,400 --> 00:12:48,910
you can<font color="#E5E5E5"> either host it on a web page</font>

366
00:12:46,930 --> 00:12:50,319
somewhere or you can put it in<font color="#E5E5E5"> your</font>

367
00:12:48,910 --> 00:12:52,719
<font color="#E5E5E5">shared file</font><font color="#CCCCCC"> system on</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> cluster you</font>

368
00:12:50,320 --> 00:12:54,550
just<font color="#CCCCCC"> say stack mirror</font><font color="#E5E5E5"> add you give it a</font>

369
00:12:52,720 --> 00:12:55,750
<font color="#E5E5E5">name so you</font><font color="#CCCCCC"> can call it my packages</font>

370
00:12:54,550 --> 00:12:57,640
<font color="#E5E5E5">that's just so</font><font color="#CCCCCC"> you can refer to it again</font>

371
00:12:55,750 --> 00:12:58,870
<font color="#E5E5E5">later</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then the</font><font color="#CCCCCC"> URL the thing that</font>

372
00:12:57,640 --> 00:13:01,449
you want<font color="#E5E5E5"> to add and once you've done</font>

373
00:12:58,870 --> 00:13:03,010
<font color="#CCCCCC">that you</font><font color="#E5E5E5"> can verify that its installed</font>

374
00:13:01,450 --> 00:13:04,420
<font color="#CCCCCC">me if you see it in this list</font><font color="#E5E5E5"> you say</font>

375
00:13:03,010 --> 00:13:05,980
spec<font color="#E5E5E5"> from your list</font><font color="#CCCCCC"> it actually</font><font color="#E5E5E5"> goes a</font>

376
00:13:04,420 --> 00:13:07,810
config file

377
00:13:05,980 --> 00:13:10,630
and then you know that you have a mirror

378
00:13:07,810 --> 00:13:13,000
<font color="#E5E5E5">installed so here's what happens in</font>

379
00:13:10,630 --> 00:13:15,400
fetching<font color="#E5E5E5"> ins back now and this is fairly</font>

380
00:13:13,000 --> 00:13:17,290
involved when you say<font color="#CCCCCC"> SPAC install say</font>

381
00:13:15,400 --> 00:13:20,290
<font color="#CCCCCC">MPI leaks which is a tool that</font><font color="#E5E5E5"> we use</font>

382
00:13:17,290 --> 00:13:22,449
for finding leaks and MPI programs so

383
00:13:20,290 --> 00:13:24,010
handle leaks and things<font color="#E5E5E5"> what</font><font color="#CCCCCC"> happens is</font>

384
00:13:22,450 --> 00:13:25,300
it loads<font color="#E5E5E5"> the package file so</font><font color="#CCCCCC"> that</font>

385
00:13:24,010 --> 00:13:27,430
package<font color="#CCCCCC"> that</font><font color="#E5E5E5"> py that I showed you</font>

386
00:13:25,300 --> 00:13:28,959
earlier<font color="#E5E5E5"> it concretize the suspect for it</font>

387
00:13:27,430 --> 00:13:30,699
and it goes and tries<font color="#CCCCCC"> to fetch the</font>

388
00:13:28,960 --> 00:13:33,010
source code<font color="#CCCCCC"> and to find the source code</font>

389
00:13:30,700 --> 00:13:34,600
<font color="#CCCCCC">it looks</font><font color="#E5E5E5"> at several different places</font><font color="#CCCCCC"> or</font>

390
00:13:33,010 --> 00:13:36,340
s this shouldn't say fetch source code

391
00:13:34,600 --> 00:13:37,510
<font color="#E5E5E5">just fetch it looks at</font><font color="#CCCCCC"> each of these</font>

392
00:13:36,340 --> 00:13:39,610
places<font color="#E5E5E5"> and it checks</font><font color="#CCCCCC"> whether there's a</font>

393
00:13:37,510 --> 00:13:41,230
binary available if there is it goes and

394
00:13:39,610 --> 00:13:42,850
verifies the signature and make sure

395
00:13:41,230 --> 00:13:46,150
that it's signed by an<font color="#E5E5E5"> authority that</font>

396
00:13:42,850 --> 00:13:48,130
<font color="#CCCCCC">its back trusts it goes and</font><font color="#E5E5E5"> installs the</font>

397
00:13:46,150 --> 00:13:49,750
<font color="#E5E5E5">package and it does relocation and we'll</font>

398
00:13:48,130 --> 00:13:52,030
talk about what that<font color="#E5E5E5"> means</font><font color="#CCCCCC"> in a second</font>

399
00:13:49,750 --> 00:13:53,230
<font color="#CCCCCC">if</font><font color="#E5E5E5"> you don't</font><font color="#CCCCCC"> have a binary available we</font>

400
00:13:52,030 --> 00:13:55,240
just do the same<font color="#E5E5E5"> old build from source</font>

401
00:13:53,230 --> 00:13:57,760
so you verify the checksum<font color="#CCCCCC"> of the</font>

402
00:13:55,240 --> 00:13:59,020
<font color="#E5E5E5">tarball and then you go and configure</font>

403
00:13:57,760 --> 00:14:00,460
build build install and some of the

404
00:13:59,020 --> 00:14:02,500
packages have more<font color="#E5E5E5"> phases than that so</font>

405
00:14:00,460 --> 00:14:04,000
that's<font color="#E5E5E5"> why there's a dot there but this</font>

406
00:14:02,500 --> 00:14:05,290
<font color="#E5E5E5">is all handled transparently for you so</font>

407
00:14:04,000 --> 00:14:06,910
you basically<font color="#E5E5E5"> just types</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> install</font>

408
00:14:05,290 --> 00:14:08,020
like you normally<font color="#E5E5E5"> would</font><font color="#CCCCCC"> and the ones for</font>

409
00:14:06,910 --> 00:14:11,650
<font color="#E5E5E5">which there are binaries available</font>

410
00:14:08,020 --> 00:14:15,040
should<font color="#E5E5E5"> go faster so what's in this</font>

411
00:14:11,650 --> 00:14:17,350
<font color="#E5E5E5">binary package</font><font color="#CCCCCC"> it's just a tar ball it</font>

412
00:14:15,040 --> 00:14:19,180
has inside<font color="#CCCCCC"> of it</font><font color="#E5E5E5"> a tar ball of the</font>

413
00:14:17,350 --> 00:14:21,310
source<font color="#E5E5E5"> it has a</font><font color="#CCCCCC"> yamo file with the</font>

414
00:14:19,180 --> 00:14:23,079
metadata for the actual<font color="#E5E5E5"> binary package</font>

415
00:14:21,310 --> 00:14:25,780
that's the spec<font color="#E5E5E5"> and some other</font>

416
00:14:23,080 --> 00:14:28,120
<font color="#CCCCCC">information and then it has a signature</font>

417
00:14:25,780 --> 00:14:31,300
<font color="#E5E5E5">on that</font><font color="#CCCCCC"> gamal file so essentially we</font>

418
00:14:28,120 --> 00:14:33,970
sign all the packages with<font color="#CCCCCC"> an own with</font>

419
00:14:31,300 --> 00:14:35,199
<font color="#E5E5E5">an own key and</font><font color="#CCCCCC"> we will be shipping this</font>

420
00:14:33,970 --> 00:14:36,780
back when we<font color="#CCCCCC"> actually have a public</font>

421
00:14:35,200 --> 00:14:38,890
binary mirror with it with our own

422
00:14:36,780 --> 00:14:40,689
<font color="#E5E5E5">public</font><font color="#CCCCCC"> key so that you know at least</font>

423
00:14:38,890 --> 00:14:42,280
<font color="#E5E5E5">which packages are from us and can trust</font>

424
00:14:40,690 --> 00:14:44,140
them<font color="#CCCCCC"> and someone else could</font><font color="#E5E5E5"> set up a</font>

425
00:14:42,280 --> 00:14:48,550
repo<font color="#CCCCCC"> with their own key that you could</font>

426
00:14:44,140 --> 00:14:50,680
trust<font color="#E5E5E5"> the the signature here</font><font color="#CCCCCC"> is actually</font>

427
00:14:48,550 --> 00:14:52,930
<font color="#E5E5E5">signing this metadata file and what that</font>

428
00:14:50,680 --> 00:14:56,739
does is it<font color="#E5E5E5"> associates this back hash</font>

429
00:14:52,930 --> 00:14:58,089
here with the checksum of that tar ball

430
00:14:56,740 --> 00:15:02,050
so essentially that's how you know<font color="#CCCCCC"> that</font>

431
00:14:58,090 --> 00:15:04,450
<font color="#CCCCCC">this is a valid</font><font color="#E5E5E5"> package so why don't we</font>

432
00:15:02,050 --> 00:15:05,949
<font color="#E5E5E5">check some source files so typically</font>

433
00:15:04,450 --> 00:15:07,150
when we<font color="#CCCCCC"> download a source tarball we</font>

434
00:15:05,950 --> 00:15:08,560
just go and put the checksum in the

435
00:15:07,150 --> 00:15:09,730
package<font color="#E5E5E5"> file and say that's that's what</font>

436
00:15:08,560 --> 00:15:12,160
you need<font color="#E5E5E5"> to check when you download this</font>

437
00:15:09,730 --> 00:15:14,440
thing<font color="#E5E5E5"> and in why we</font><font color="#CCCCCC"> sign binaries</font>

438
00:15:12,160 --> 00:15:15,880
other<font color="#E5E5E5"> systems do provide check sums for</font>

439
00:15:14,440 --> 00:15:19,120
sources and binaries<font color="#CCCCCC"> in the package</font>

440
00:15:15,880 --> 00:15:19,370
files<font color="#CCCCCC"> just the same way so homebrew if</font>

441
00:15:19,120 --> 00:15:20,600
you

442
00:15:19,370 --> 00:15:21,920
get some hungry packages you'll see that

443
00:15:20,600 --> 00:15:23,750
there's like<font color="#E5E5E5"> a section for bottles in</font>

444
00:15:21,920 --> 00:15:25,610
there and it<font color="#E5E5E5"> has a bunch of shot 256 is</font>

445
00:15:23,750 --> 00:15:27,680
for the<font color="#E5E5E5"> different</font><font color="#CCCCCC"> binary images that you</font>

446
00:15:25,610 --> 00:15:29,690
<font color="#E5E5E5">can download of that package the reason</font>

447
00:15:27,680 --> 00:15:30,979
is<font color="#E5E5E5"> because in spec the number of binary</font>

448
00:15:29,690 --> 00:15:32,900
<font color="#E5E5E5">is associated with</font><font color="#CCCCCC"> the particular</font><font color="#E5E5E5"> source</font>

449
00:15:30,980 --> 00:15:34,640
tarball can be large we are<font color="#E5E5E5"> all about</font>

450
00:15:32,900 --> 00:15:36,020
letting<font color="#E5E5E5"> you configure all of your</font>

451
00:15:34,640 --> 00:15:38,569
<font color="#CCCCCC">options</font><font color="#E5E5E5"> and so you know there could be</font>

452
00:15:36,020 --> 00:15:39,829
thousands of<font color="#E5E5E5"> different binaries that you</font>

453
00:15:38,570 --> 00:15:41,029
build<font color="#E5E5E5"> from the same source because we</font>

454
00:15:39,830 --> 00:15:43,460
let you<font color="#E5E5E5"> have all</font><font color="#CCCCCC"> these configuration</font>

455
00:15:41,029 --> 00:15:45,020
options<font color="#E5E5E5"> and so if we actually put made</font>

456
00:15:43,460 --> 00:15:45,950
you put<font color="#E5E5E5"> those check sums for all the</font>

457
00:15:45,020 --> 00:15:47,810
different binaries<font color="#CCCCCC"> that you could</font>

458
00:15:45,950 --> 00:15:49,730
generated in the package files<font color="#E5E5E5"> it would</font>

459
00:15:47,810 --> 00:15:50,959
be a<font color="#E5E5E5"> maintenance nightmare you would</font>

460
00:15:49,730 --> 00:15:52,339
<font color="#E5E5E5">have to keep</font><font color="#CCCCCC"> updating the package files</font>

461
00:15:50,960 --> 00:15:55,130
and you check sums all the time every

462
00:15:52,339 --> 00:15:57,080
time<font color="#E5E5E5"> you update</font><font color="#CCCCCC"> your binary</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> so to</font>

463
00:15:55,130 --> 00:15:59,960
scale this<font color="#CCCCCC"> we made it</font><font color="#E5E5E5"> so that</font><font color="#CCCCCC"> we</font>

464
00:15:57,080 --> 00:16:04,010
<font color="#CCCCCC">actually signed</font><font color="#E5E5E5"> the binaries</font><font color="#CCCCCC"> and so we</font>

465
00:15:59,960 --> 00:16:05,720
just include the public key<font color="#CCCCCC"> we would</font>

466
00:16:04,010 --> 00:16:07,520
include<font color="#CCCCCC"> our</font><font color="#E5E5E5"> well-known public key with</font>

467
00:16:05,720 --> 00:16:09,110
the<font color="#CCCCCC"> SPAC distribution and then you could</font>

468
00:16:07,520 --> 00:16:11,120
easily<font color="#E5E5E5"> check at least</font><font color="#CCCCCC"> the binaries</font>

469
00:16:09,110 --> 00:16:13,370
downloaded from<font color="#E5E5E5"> us and then if you know</font>

470
00:16:11,120 --> 00:16:15,020
firm and<font color="#CCCCCC"> fermilab and certain</font><font color="#E5E5E5"> want to</font>

471
00:16:13,370 --> 00:16:16,160
<font color="#E5E5E5">contribute more binaries then they could</font>

472
00:16:15,020 --> 00:16:17,329
<font color="#E5E5E5">also include their public keys with the</font>

473
00:16:16,160 --> 00:16:19,160
<font color="#E5E5E5">distribution or there would be an easy</font>

474
00:16:17,330 --> 00:16:23,750
<font color="#E5E5E5">way to to</font><font color="#CCCCCC"> register them</font><font color="#E5E5E5"> so we could</font>

475
00:16:19,160 --> 00:16:25,760
increase<font color="#E5E5E5"> the number</font><font color="#CCCCCC"> of signers and so</font>

476
00:16:23,750 --> 00:16:27,589
this we<font color="#E5E5E5"> found that this scales pretty</font>

477
00:16:25,760 --> 00:16:29,959
<font color="#E5E5E5">well we just check</font><font color="#CCCCCC"> the things when</font><font color="#E5E5E5"> we</font>

478
00:16:27,589 --> 00:16:31,490
download them with with<font color="#CCCCCC"> GPG and we don't</font>

479
00:16:29,959 --> 00:16:32,810
have<font color="#E5E5E5"> to</font><font color="#CCCCCC"> update</font><font color="#E5E5E5"> the package files with</font>

480
00:16:31,490 --> 00:16:35,839
the<font color="#E5E5E5"> with the check sums of all the</font>

481
00:16:32,810 --> 00:16:39,800
different<font color="#E5E5E5"> binaries and so what's</font>

482
00:16:35,839 --> 00:16:44,180
relocation<font color="#E5E5E5"> if you down with a binary for</font>

483
00:16:39,800 --> 00:16:47,060
a<font color="#CCCCCC"> distro</font><font color="#E5E5E5"> like RPM base distro is like</font>

484
00:16:44,180 --> 00:16:49,189
<font color="#CCCCCC">red hat</font><font color="#E5E5E5"> or if you download the binary</font>

485
00:16:47,060 --> 00:16:50,420
for like<font color="#CCCCCC"> apt they're generally</font><font color="#E5E5E5"> not</font>

486
00:16:49,190 --> 00:16:52,730
relocatable

487
00:16:50,420 --> 00:16:55,459
and in it and what<font color="#CCCCCC"> that means</font><font color="#E5E5E5"> is that</font>

488
00:16:52,730 --> 00:16:57,380
the library<font color="#CCCCCC"> paths in them are absolute</font>

489
00:16:55,459 --> 00:17:00,140
<font color="#E5E5E5">so if you have a</font><font color="#CCCCCC"> dependency somewhere</font>

490
00:16:57,380 --> 00:17:01,610
<font color="#E5E5E5">then it basically relies on the thing</font>

491
00:17:00,140 --> 00:17:04,639
being installed<font color="#CCCCCC"> is exactly a particular</font>

492
00:17:01,610 --> 00:17:06,319
location<font color="#CCCCCC"> on</font><font color="#E5E5E5"> this is coming first back we</font>

493
00:17:04,640 --> 00:17:08,179
want users to be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to clone this in</font>

494
00:17:06,319 --> 00:17:10,220
their home directory<font color="#E5E5E5"> and do this on any</font>

495
00:17:08,179 --> 00:17:11,660
machine wherever they want<font color="#CCCCCC"> and so we</font>

496
00:17:10,220 --> 00:17:13,160
need relocatable binaries which means

497
00:17:11,660 --> 00:17:15,020
that we would<font color="#E5E5E5"> download the</font><font color="#CCCCCC"> binary</font><font color="#E5E5E5"> and we</font>

498
00:17:13,160 --> 00:17:18,740
would need<font color="#E5E5E5"> some way to make it work</font><font color="#CCCCCC"> in</font>

499
00:17:15,020 --> 00:17:21,589
<font color="#CCCCCC">some new location so all that means</font><font color="#E5E5E5"> for</font>

500
00:17:18,740 --> 00:17:24,050
<font color="#CCCCCC">SPAC really is that in the actual</font><font color="#E5E5E5"> binary</font>

501
00:17:21,589 --> 00:17:26,089
in the<font color="#E5E5E5"> metadata for the binary package</font>

502
00:17:24,050 --> 00:17:28,550
which is in<font color="#E5E5E5"> that tar ball we record</font>

503
00:17:26,089 --> 00:17:30,500
which libraries we need to go and fix up

504
00:17:28,550 --> 00:17:33,020
on installation

505
00:17:30,500 --> 00:17:35,330
and then which<font color="#CCCCCC"> she'll scripts have</font><font color="#E5E5E5"> she</font>

506
00:17:33,020 --> 00:17:36,679
<font color="#E5E5E5">bang lines that need to be updated</font><font color="#CCCCCC"> so if</font>

507
00:17:35,330 --> 00:17:38,178
there's a<font color="#E5E5E5"> hatch bang that points to a</font>

508
00:17:36,679 --> 00:17:40,429
<font color="#CCCCCC">Python that's in you know some other</font>

509
00:17:38,179 --> 00:17:41,809
<font color="#E5E5E5">package that we depend on and then when</font>

510
00:17:40,429 --> 00:17:43,429
we install that<font color="#CCCCCC"> in a noose pack that's</font>

511
00:17:41,809 --> 00:17:44,840
installed in a<font color="#E5E5E5"> different location</font><font color="#CCCCCC"> we</font>

512
00:17:43,429 --> 00:17:48,409
need to go<font color="#E5E5E5"> and update that path</font><font color="#CCCCCC"> so that</font>

513
00:17:44,840 --> 00:17:50,330
it still works<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the new system and so</font>

514
00:17:48,409 --> 00:17:52,039
essentially the<font color="#CCCCCC"> way that we do that is</font>

515
00:17:50,330 --> 00:17:54,500
when we create the binary package we

516
00:17:52,039 --> 00:17:56,658
just go in traverse the tree of<font color="#E5E5E5"> the</font>

517
00:17:54,500 --> 00:17:59,120
package<font color="#CCCCCC"> we look and see what looks</font><font color="#E5E5E5"> like</font>

518
00:17:56,659 --> 00:18:00,200
a library<font color="#CCCCCC"> what looks like a</font><font color="#E5E5E5"> script and</font>

519
00:17:59,120 --> 00:18:02,389
we write<font color="#CCCCCC"> down the things</font><font color="#E5E5E5"> that'll need to</font>

520
00:18:00,200 --> 00:18:04,900
<font color="#E5E5E5">be fixed</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> on install and then when we</font>

521
00:18:02,390 --> 00:18:07,640
actually go to<font color="#E5E5E5"> install them we fix them</font>

522
00:18:04,900 --> 00:18:09,380
we try to make relative our paths in<font color="#E5E5E5"> our</font>

523
00:18:07,640 --> 00:18:11,780
stack packages which means that the

524
00:18:09,380 --> 00:18:13,760
<font color="#E5E5E5">library is sort of</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> relative to spec</font>

525
00:18:11,780 --> 00:18:15,889
<font color="#E5E5E5">opt at the top of this</font><font color="#CCCCCC"> back tree or all</font>

526
00:18:13,760 --> 00:18:16,940
the packages<font color="#E5E5E5"> are where they live</font><font color="#CCCCCC"> and so</font>

527
00:18:15,890 --> 00:18:19,970
we<font color="#E5E5E5"> don't actually have</font><font color="#CCCCCC"> to fix up that</font>

528
00:18:16,940 --> 00:18:22,460
much but we do<font color="#E5E5E5"> support customizing that</font>

529
00:18:19,970 --> 00:18:23,809
directory in different<font color="#E5E5E5"> instances of spec</font>

530
00:18:22,460 --> 00:18:25,640
and so sometimes<font color="#CCCCCC"> we'll have to fix</font><font color="#E5E5E5"> up</font>

531
00:18:23,809 --> 00:18:27,139
<font color="#CCCCCC">paths within the installation if the</font>

532
00:18:25,640 --> 00:18:29,630
dependencies if they're a tree structure

533
00:18:27,140 --> 00:18:31,880
it looks<font color="#CCCCCC"> slightly different and so this</font>

534
00:18:29,630 --> 00:18:33,470
<font color="#CCCCCC">enables you to get a binary</font><font color="#E5E5E5"> and then</font>

535
00:18:31,880 --> 00:18:35,240
have it<font color="#E5E5E5"> work in your home directory on</font>

536
00:18:33,470 --> 00:18:36,890
an<font color="#E5E5E5"> arbitrary system as opposed to</font>

537
00:18:35,240 --> 00:18:40,370
requiring expect to be installed in<font color="#E5E5E5"> a</font>

538
00:18:36,890 --> 00:18:42,830
particular location<font color="#CCCCCC"> one thing we're not</font>

539
00:18:40,370 --> 00:18:45,139
<font color="#CCCCCC">currently doing is relocating compiler</font>

540
00:18:42,830 --> 00:18:47,059
runtime paths<font color="#E5E5E5"> so the binary stuff will</font>

541
00:18:45,140 --> 00:18:50,299
probably<font color="#CCCCCC"> only work nicely if your</font>

542
00:18:47,059 --> 00:18:53,149
compiler uses<font color="#E5E5E5"> the standard des</font><font color="#CCCCCC"> Lipsy and</font>

543
00:18:50,299 --> 00:18:55,309
<font color="#CCCCCC">dendera C++ version of the</font><font color="#E5E5E5"> system we're</font>

544
00:18:53,150 --> 00:18:57,049
working on adding<font color="#E5E5E5"> this so expect this in</font>

545
00:18:55,309 --> 00:18:58,490
a future<font color="#CCCCCC"> version pretty soon so that if</font>

546
00:18:57,049 --> 00:19:00,350
you're<font color="#CCCCCC"> using a fancy compiler with spec</font>

547
00:18:58,490 --> 00:19:01,940
<font color="#E5E5E5">that you can still relocate the compiler</font>

548
00:19:00,350 --> 00:19:03,709
runtime<font color="#CCCCCC"> pass to an instance of</font><font color="#E5E5E5"> that</font>

549
00:19:01,940 --> 00:19:07,490
compiler somewhere<font color="#CCCCCC"> and I'm not</font><font color="#E5E5E5"> sure I</font>

550
00:19:03,710 --> 00:19:09,620
<font color="#CCCCCC">know</font><font color="#E5E5E5"> of any systems that do that so</font><font color="#CCCCCC"> it</font>

551
00:19:07,490 --> 00:19:12,380
should be interesting<font color="#E5E5E5"> so how do</font><font color="#CCCCCC"> we</font>

552
00:19:09,620 --> 00:19:13,489
decide<font color="#E5E5E5"> which binaries to fetch and this</font>

553
00:19:12,380 --> 00:19:15,590
is an interesting<font color="#E5E5E5"> question because it's</font>

554
00:19:13,490 --> 00:19:16,940
this gets into<font color="#E5E5E5"> the interplay between the</font>

555
00:19:15,590 --> 00:19:20,270
way<font color="#E5E5E5"> that your package manager resolves</font>

556
00:19:16,940 --> 00:19:22,280
dependencies<font color="#E5E5E5"> and what's available on the</font>

557
00:19:20,270 --> 00:19:25,760
on the binary mirror<font color="#E5E5E5"> right now what</font>

558
00:19:22,280 --> 00:19:28,070
we're doing<font color="#E5E5E5"> is we are just we're taking</font>

559
00:19:25,760 --> 00:19:30,559
<font color="#CCCCCC">that</font><font color="#E5E5E5"> abstract AG we're concretizing it</font>

560
00:19:28,070 --> 00:19:33,080
into this full spec<font color="#E5E5E5"> and we go and look</font>

561
00:19:30,559 --> 00:19:35,000
<font color="#E5E5E5">at the hashes on this dag and we fetch</font>

562
00:19:33,080 --> 00:19:36,590
<font color="#E5E5E5">the exact hashes from the binary mirror</font>

563
00:19:35,000 --> 00:19:38,179
<font color="#CCCCCC">so essentially</font><font color="#E5E5E5"> we just we look at the</font>

564
00:19:36,590 --> 00:19:39,799
<font color="#CCCCCC">Det the graph and</font><font color="#E5E5E5"> we say is that hash on</font>

565
00:19:38,179 --> 00:19:40,680
the mirror<font color="#E5E5E5"> no</font><font color="#CCCCCC"> okay we'll</font><font color="#E5E5E5"> go and build</font>

566
00:19:39,799 --> 00:19:43,500
<font color="#E5E5E5">something else</font>

567
00:19:40,680 --> 00:19:46,200
<font color="#E5E5E5">so the problem with this is</font><font color="#CCCCCC"> that if I</font>

568
00:19:43,500 --> 00:19:47,880
build lots of<font color="#E5E5E5"> binaries and if my distro</font>

569
00:19:46,200 --> 00:19:49,230
is changing over<font color="#E5E5E5"> time</font><font color="#CCCCCC"> there probably</font>

570
00:19:47,880 --> 00:19:51,930
plenty of binaries out there on the

571
00:19:49,230 --> 00:19:53,340
mirror that<font color="#CCCCCC"> I've built before that would</font>

572
00:19:51,930 --> 00:19:54,780
satisfy the things that I<font color="#CCCCCC"> need in my</font>

573
00:19:53,340 --> 00:19:56,399
<font color="#E5E5E5">spec if I just said I need empty</font><font color="#CCCCCC"> AI</font>

574
00:19:54,780 --> 00:19:58,139
leaks<font color="#E5E5E5"> and there's a</font><font color="#CCCCCC"> binary for a</font>

575
00:19:56,400 --> 00:20:00,210
slightly<font color="#CCCCCC"> older version</font><font color="#E5E5E5"> of MPI leaks I'd</font>

576
00:19:58,140 --> 00:20:02,100
probably be happy with<font color="#E5E5E5"> it but because I</font>

577
00:20:00,210 --> 00:20:03,990
do this<font color="#E5E5E5"> first</font><font color="#CCCCCC"> I go and concretize and</font>

578
00:20:02,100 --> 00:20:06,030
get a description<font color="#E5E5E5"> first I found myself</font>

579
00:20:03,990 --> 00:20:08,520
to a particular<font color="#E5E5E5"> hash description and so</font>

580
00:20:06,030 --> 00:20:11,540
that that's what we're doing now<font color="#E5E5E5"> what</font>

581
00:20:08,520 --> 00:20:13,620
we're also working on is<font color="#E5E5E5"> improving the</font>

582
00:20:11,540 --> 00:20:16,129
this<font color="#CCCCCC"> wasn't supposed to</font><font color="#E5E5E5"> be animated so</font>

583
00:20:13,620 --> 00:20:18,270
<font color="#E5E5E5">ignore</font><font color="#CCCCCC"> the order</font><font color="#E5E5E5"> of the arrows appearing</font>

584
00:20:16,130 --> 00:20:19,950
<font color="#CCCCCC">we're improving that process so that</font>

585
00:20:18,270 --> 00:20:21,750
<font color="#E5E5E5">essentially we would go we would we</font>

586
00:20:19,950 --> 00:20:23,160
<font color="#CCCCCC">would get this abstract</font><font color="#E5E5E5"> tag we would</font>

587
00:20:21,750 --> 00:20:24,390
<font color="#CCCCCC">download the available specs from</font><font color="#E5E5E5"> the</font>

588
00:20:23,160 --> 00:20:25,650
mirror so that's why that<font color="#E5E5E5"> metadata is</font>

589
00:20:24,390 --> 00:20:27,240
the top level<font color="#E5E5E5"> so we can fetch</font><font color="#CCCCCC"> it</font>

590
00:20:25,650 --> 00:20:29,970
independently<font color="#E5E5E5"> and then we would actually</font>

591
00:20:27,240 --> 00:20:31,380
integrate the available binaries with

592
00:20:29,970 --> 00:20:33,930
the concretization process so<font color="#CCCCCC"> that's</font>

593
00:20:31,380 --> 00:20:35,580
<font color="#E5E5E5">back would say okay I need you know an</font>

594
00:20:33,930 --> 00:20:37,050
MPI implementation which MPI

595
00:20:35,580 --> 00:20:39,179
implementations are available as binary

596
00:20:37,050 --> 00:20:41,750
<font color="#E5E5E5">should I prefer those and try to plug</font>

597
00:20:39,180 --> 00:20:45,150
things into the dag that way<font color="#E5E5E5"> all right</font>

598
00:20:41,750 --> 00:20:51,390
<font color="#E5E5E5">so we can ship optimized binaries times</font>

599
00:20:45,150 --> 00:20:54,060
up<font color="#E5E5E5"> okay all right</font><font color="#CCCCCC"> all right well through</font>

600
00:20:51,390 --> 00:20:56,220
<font color="#E5E5E5">this part we can ship optimized binaries</font>

601
00:20:54,060 --> 00:20:57,419
this<font color="#CCCCCC"> pack</font><font color="#E5E5E5"> essentially the architecture</font>

602
00:20:56,220 --> 00:20:59,640
description<font color="#E5E5E5"> is part of the</font><font color="#CCCCCC"> butt of</font><font color="#E5E5E5"> the</font>

603
00:20:57,420 --> 00:21:01,080
<font color="#E5E5E5">binary and so we can we can</font><font color="#CCCCCC"> find out if</font>

604
00:20:59,640 --> 00:21:02,460
<font color="#E5E5E5">something is well suited</font><font color="#CCCCCC"> to our</font><font color="#E5E5E5"> machine</font>

605
00:21:01,080 --> 00:21:04,620
<font color="#CCCCCC">and there's a lot</font><font color="#E5E5E5"> of things that we're</font>

606
00:21:02,460 --> 00:21:06,540
<font color="#CCCCCC">working</font><font color="#E5E5E5"> on doing</font><font color="#CCCCCC"> for trying</font><font color="#E5E5E5"> to detect</font>

607
00:21:04,620 --> 00:21:08,100
which binaries will actually work well

608
00:21:06,540 --> 00:21:10,550
on our hardware<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that we could prefer</font>

609
00:21:08,100 --> 00:21:12,840
generic or prefer<font color="#CCCCCC"> optimize if we</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to</font>

610
00:21:10,550 --> 00:21:14,280
some issues<font color="#E5E5E5"> with</font><font color="#CCCCCC"> that are that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font>

611
00:21:12,840 --> 00:21:15,899
some architectures don't lend themselves

612
00:21:14,280 --> 00:21:18,300
<font color="#CCCCCC">to easy descriptions so we may</font><font color="#E5E5E5"> have to</font>

613
00:21:15,900 --> 00:21:20,010
include some<font color="#CCCCCC"> more</font><font color="#E5E5E5"> data about the ISA in</font>

614
00:21:18,300 --> 00:21:22,860
the binaries<font color="#E5E5E5"> and do some more matching</font>

615
00:21:20,010 --> 00:21:24,570
there<font color="#CCCCCC"> and selecting the</font><font color="#E5E5E5"> correct tuning</font>

616
00:21:22,860 --> 00:21:26,490
may be tricky<font color="#CCCCCC"> so we're</font><font color="#E5E5E5"> looking</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> how we</font>

617
00:21:24,570 --> 00:21:29,250
could prefer generically tuned or

618
00:21:26,490 --> 00:21:31,230
specifically tuned binaries<font color="#CCCCCC"> we're trying</font>

619
00:21:29,250 --> 00:21:32,910
<font color="#E5E5E5">to build a binary mirror</font><font color="#CCCCCC"> for spec</font><font color="#E5E5E5"> that's</font>

620
00:21:31,230 --> 00:21:34,020
available publicly<font color="#E5E5E5"> so that there's</font>

621
00:21:32,910 --> 00:21:35,220
actually binaries out there you don't

622
00:21:34,020 --> 00:21:37,200
<font color="#CCCCCC">have to build</font><font color="#E5E5E5"> them</font><font color="#CCCCCC"> yourself on</font><font color="#E5E5E5"> the site</font>

623
00:21:35,220 --> 00:21:39,420
and we're expecting<font color="#E5E5E5"> to get that done by</font>

624
00:21:37,200 --> 00:21:40,440
September<font color="#CCCCCC"> so that's what we're</font><font color="#E5E5E5"> working</font>

625
00:21:39,420 --> 00:21:42,030
on<font color="#CCCCCC"> now</font>

626
00:21:40,440 --> 00:21:44,130
there's also<font color="#CCCCCC"> spec stickers in the</font><font color="#E5E5E5"> room</font>

627
00:21:42,030 --> 00:21:46,470
so please<font color="#E5E5E5"> take</font><font color="#CCCCCC"> some if you</font><font color="#E5E5E5"> want them and</font>

628
00:21:44,130 --> 00:21:53,630
I guess

629
00:21:46,470 --> 00:21:53,630
[Applause]

630
00:22:29,110 --> 00:22:34,340
so we actually we look we<font color="#CCCCCC"> look</font><font color="#E5E5E5"> at</font>

631
00:22:32,720 --> 00:22:35,810
generic text<font color="#E5E5E5"> files so that</font><font color="#CCCCCC"> was an</font>

632
00:22:34,340 --> 00:22:37,699
oversimplification for the she<font color="#E5E5E5"> Bank</font>

633
00:22:35,810 --> 00:22:39,500
thing so if<font color="#E5E5E5"> we find</font><font color="#CCCCCC"> a text</font><font color="#E5E5E5"> file and and</font>

634
00:22:37,700 --> 00:22:49,870
then we'll go and<font color="#E5E5E5"> look for the</font><font color="#CCCCCC"> the path</font>

635
00:22:39,500 --> 00:22:49,870
in there and try to<font color="#E5E5E5"> relocate it we do</font>

636
00:22:54,970 --> 00:23:14,600
for the binaries we use patch elf<font color="#E5E5E5"> or</font>

637
00:22:57,440 --> 00:23:16,280
install name tool yeah so currently they

638
00:23:14,600 --> 00:23:18,980
<font color="#CCCCCC">have to be installed by spec but spec</font>

639
00:23:16,280 --> 00:23:21,379
does support external dependencies<font color="#E5E5E5"> and</font>

640
00:23:18,980 --> 00:23:23,030
<font color="#E5E5E5">so you know</font><font color="#CCCCCC"> we we could look at</font><font color="#E5E5E5"> the</font>

641
00:23:21,380 --> 00:23:24,440
metadata<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we have on externals if</font>

642
00:23:23,030 --> 00:23:25,730
you have a well actually yeah if you

643
00:23:24,440 --> 00:23:35,870
have a particular thing installed<font color="#E5E5E5"> as an</font>

644
00:23:25,730 --> 00:23:38,380
external we<font color="#CCCCCC"> could relocate for that any</font>

645
00:23:35,870 --> 00:23:38,379
more questions

646
00:23:43,080 --> 00:23:50,119
[Applause]

