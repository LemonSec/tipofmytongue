1
00:00:04,620 --> 00:00:09,120
this is an<font color="#E5E5E5"> hour talk and we got 25</font>

2
00:00:07,559 --> 00:00:10,549
<font color="#E5E5E5">minutes</font><font color="#CCCCCC"> okay I'm gonna</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about method</font>

3
00:00:09,120 --> 00:00:12,840
handles<font color="#E5E5E5"> my name is</font><font color="#CCCCCC"> Charles</font><font color="#E5E5E5"> nutter</font>

4
00:00:10,549 --> 00:00:16,170
<font color="#CCCCCC">charlie to my friends</font><font color="#E5E5E5"> which includes all</font>

5
00:00:12,840 --> 00:00:18,210
<font color="#CCCCCC">of</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> I work at Red Hat now for like</font>

6
00:00:16,170 --> 00:00:20,160
<font color="#E5E5E5">six</font><font color="#CCCCCC"> years I've been working on JRuby and</font>

7
00:00:18,210 --> 00:00:22,860
<font color="#E5E5E5">other JVM language stuff for like 10 or</font>

8
00:00:20,160 --> 00:00:24,899
<font color="#CCCCCC">11 years if you want to see the</font><font color="#E5E5E5"> full</font>

9
00:00:22,860 --> 00:00:27,090
<font color="#CCCCCC">version of this talk</font><font color="#E5E5E5"> at least the first</font>

10
00:00:24,899 --> 00:00:29,040
time<font color="#CCCCCC"> that I</font><font color="#E5E5E5"> gave it</font><font color="#CCCCCC"> we were at out in</font>

11
00:00:27,090 --> 00:00:30,450
Hawaii<font color="#CCCCCC"> with Chris challenger</font><font color="#E5E5E5"> and a bunch</font>

12
00:00:29,040 --> 00:00:32,149
<font color="#CCCCCC">of other cool</font><font color="#E5E5E5"> folks if you want to come</font>

13
00:00:30,450 --> 00:00:33,450
next<font color="#CCCCCC"> year</font><font color="#E5E5E5"> we're gonna do it right</font>

14
00:00:32,149 --> 00:00:35,910
<font color="#E5E5E5">absolutely</font>

15
00:00:33,450 --> 00:00:37,769
lava one in Hawaii<font color="#E5E5E5"> next year January</font>

16
00:00:35,910 --> 00:00:41,370
<font color="#E5E5E5">create time to go there but</font><font color="#CCCCCC"> the whole</font>

17
00:00:37,769 --> 00:00:43,800
talk is<font color="#E5E5E5"> available yep come on out</font><font color="#CCCCCC"> okay</font>

18
00:00:41,370 --> 00:00:45,269
<font color="#E5E5E5">so</font><font color="#CCCCCC"> what our method handles</font><font color="#E5E5E5"> now we're</font>

19
00:00:43,800 --> 00:00:46,108
gonna go<font color="#E5E5E5"> through here's the agenda</font><font color="#CCCCCC"> for</font>

20
00:00:45,269 --> 00:00:48,059
we're gonna<font color="#E5E5E5"> talk about we talk about</font>

21
00:00:46,109 --> 00:00:50,429
what methods and handles are<font color="#E5E5E5"> why we need</font>

22
00:00:48,059 --> 00:00:52,468
them<font color="#CCCCCC"> what's new in</font><font color="#E5E5E5"> Java 9 a little</font>

23
00:00:50,429 --> 00:00:53,999
preview<font color="#E5E5E5"> of some of</font><font color="#CCCCCC"> that stuff</font><font color="#E5E5E5"> I'm going</font>

24
00:00:52,469 --> 00:00:55,589
<font color="#CCCCCC">to talk</font><font color="#E5E5E5"> about a little library called</font>

25
00:00:53,999 --> 00:00:57,089
invoke binder which<font color="#E5E5E5"> I've done in a</font>

26
00:00:55,589 --> 00:00:58,350
longer form here in the past but a

27
00:00:57,089 --> 00:00:59,940
little primer just<font color="#E5E5E5"> so you understand</font>

28
00:00:58,350 --> 00:01:01,260
some of<font color="#E5E5E5"> the code and then maybe we'll</font>

29
00:00:59,940 --> 00:01:03,928
try and do<font color="#E5E5E5"> something crazy with method</font>

30
00:01:01,260 --> 00:01:06,630
handles<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so what's the deal with</font>

31
00:01:03,929 --> 00:01:09,990
<font color="#CCCCCC">Method Andals well</font><font color="#E5E5E5"> when the JRuby team</font>

32
00:01:06,630 --> 00:01:11,490
<font color="#E5E5E5">first came on at Sun 2006 there was this</font>

33
00:01:09,990 --> 00:01:14,729
<font color="#CCCCCC">jsr that had kind of been languishing</font>

34
00:01:11,490 --> 00:01:16,940
for<font color="#CCCCCC"> a</font><font color="#E5E5E5"> while</font><font color="#CCCCCC"> jsr 292 for invokedynamic a</font>

35
00:01:14,730 --> 00:01:19,860
new way of doing invocation on<font color="#E5E5E5"> the JVM</font>

36
00:01:16,940 --> 00:01:21,570
<font color="#CCCCCC">but</font><font color="#E5E5E5"> around this time we had Ruby and</font>

37
00:01:19,860 --> 00:01:23,160
rails JRuby started to be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to do</font>

38
00:01:21,570 --> 00:01:24,960
some cool<font color="#CCCCCC"> stuff we could run rails on</font>

39
00:01:23,160 --> 00:01:27,450
top of the JVM<font color="#CCCCCC"> so there was a lot of</font>

40
00:01:24,960 --> 00:01:28,979
interest developing in having<font color="#E5E5E5"> a more</font>

41
00:01:27,450 --> 00:01:30,660
languages and especially<font color="#E5E5E5"> dynamic</font>

42
00:01:28,980 --> 00:01:33,150
languages<font color="#E5E5E5"> on top of the JVM</font>

43
00:01:30,660 --> 00:01:35,250
<font color="#E5E5E5">but we needed</font><font color="#CCCCCC"> something better to make</font>

44
00:01:33,150 --> 00:01:37,290
it<font color="#E5E5E5"> easier to</font><font color="#CCCCCC"> optimize and compile these</font>

45
00:01:35,250 --> 00:01:39,510
things and get the JVM involved in

46
00:01:37,290 --> 00:01:41,760
running<font color="#E5E5E5"> these languages so what is it</font>

47
00:01:39,510 --> 00:01:44,010
<font color="#CCCCCC">that we needed</font><font color="#E5E5E5"> at least on JRuby groovy</font>

48
00:01:41,760 --> 00:01:44,970
the dynamic language side of things<font color="#E5E5E5"> what</font>

49
00:01:44,010 --> 00:01:47,550
we need to be able<font color="#E5E5E5"> to call methods</font>

50
00:01:44,970 --> 00:01:49,110
<font color="#E5E5E5">dynamically obviously we need to be able</font>

51
00:01:47,550 --> 00:01:51,179
<font color="#E5E5E5">to look them up when they're called</font>

52
00:01:49,110 --> 00:01:53,250
based on name or based on name and types

53
00:01:51,180 --> 00:01:55,500
and potentially<font color="#E5E5E5"> with very different</font>

54
00:01:53,250 --> 00:01:57,960
<font color="#CCCCCC">class structures both groovy and JRuby</font>

55
00:01:55,500 --> 00:02:00,360
have a meta class structure that's

56
00:01:57,960 --> 00:02:02,070
essentially a big hash and the way that

57
00:02:00,360 --> 00:02:03,660
you define new methods is you stick

58
00:02:02,070 --> 00:02:05,910
methods<font color="#E5E5E5"> into that hash under some name</font>

59
00:02:03,660 --> 00:02:07,229
<font color="#E5E5E5">it's not like a</font><font color="#CCCCCC"> typical Java class so we</font>

60
00:02:05,910 --> 00:02:09,359
needed<font color="#E5E5E5"> a</font><font color="#CCCCCC"> different way of doing</font><font color="#E5E5E5"> lookup</font>

61
00:02:07,230 --> 00:02:11,099
and dispatch<font color="#CCCCCC"> we need to be able</font><font color="#E5E5E5"> to</font>

62
00:02:09,360 --> 00:02:13,680
dynamically assign fields and constants

63
00:02:11,099 --> 00:02:15,689
<font color="#E5E5E5">in Ruby you don't declare a whole bunch</font>

64
00:02:13,680 --> 00:02:17,549
of fields ahead of time in<font color="#E5E5E5"> your object</font>

65
00:02:15,689 --> 00:02:18,540
or in your types<font color="#E5E5E5"> it's just when you</font>

66
00:02:17,549 --> 00:02:21,000
assign<font color="#E5E5E5"> a name</font>

67
00:02:18,540 --> 00:02:22,560
becomes a new<font color="#E5E5E5"> slot in the object so we</font>

68
00:02:21,000 --> 00:02:24,810
<font color="#E5E5E5">need to be able to grow</font><font color="#CCCCCC"> objects shapes</font>

69
00:02:22,560 --> 00:02:26,670
and access those fields<font color="#E5E5E5"> similar to how</font>

70
00:02:24,810 --> 00:02:29,250
we would<font color="#CCCCCC"> in Java but</font><font color="#E5E5E5"> going through this</font>

71
00:02:26,670 --> 00:02:31,200
other indirection mechanism<font color="#E5E5E5"> I'm going to</font>

72
00:02:29,250 --> 00:02:32,760
do this<font color="#E5E5E5"> all to be fast of course</font><font color="#CCCCCC"> we</font>

73
00:02:31,200 --> 00:02:34,619
could emulate<font color="#E5E5E5"> all of these things with</font>

74
00:02:32,760 --> 00:02:36,899
reflection and<font color="#E5E5E5"> other tricks but that</font>

75
00:02:34,620 --> 00:02:38,220
wasn't really tying well into the JVM

76
00:02:36,900 --> 00:02:41,549
<font color="#E5E5E5">and didn't give us the performance that</font>

77
00:02:38,220 --> 00:02:45,299
<font color="#E5E5E5">we wanted out</font><font color="#CCCCCC"> of a JVM language and so</font>

78
00:02:41,549 --> 00:02:47,430
we revisited the method<font color="#CCCCCC"> way that jsr 292</font>

79
00:02:45,299 --> 00:02:50,069
and<font color="#E5E5E5"> we came</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> with the invokedynamic</font>

80
00:02:47,430 --> 00:02:52,769
bytecode<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is what</font><font color="#E5E5E5"> allows us to hook</font>

81
00:02:50,069 --> 00:02:54,679
into the the JVM<font color="#E5E5E5"> machinery and the</font>

82
00:02:52,769 --> 00:02:57,419
larger<font color="#CCCCCC"> part of that</font><font color="#E5E5E5"> that came out of the</font>

83
00:02:54,680 --> 00:02:59,669
<font color="#E5E5E5">the invokedynamic</font><font color="#CCCCCC"> jsr is the method</font>

84
00:02:57,419 --> 00:03:01,950
<font color="#E5E5E5">handle</font><font color="#CCCCCC"> API so the method handle API is</font>

85
00:02:59,669 --> 00:03:04,319
sort of<font color="#E5E5E5"> like reflection you get a</font><font color="#CCCCCC"> lookup</font>

86
00:03:01,950 --> 00:03:06,659
object<font color="#E5E5E5"> the lookup object allows you to</font>

87
00:03:04,319 --> 00:03:09,750
go<font color="#E5E5E5"> and get a handle or a pointer to a</font>

88
00:03:06,659 --> 00:03:12,750
function or a field or an array element

89
00:03:09,750 --> 00:03:15,180
sort and<font color="#E5E5E5"> those sorts of things rather</font>

90
00:03:12,750 --> 00:03:17,310
than<font color="#CCCCCC"> just passing in a set of</font><font color="#E5E5E5"> parameters</font>

91
00:03:15,180 --> 00:03:19,079
<font color="#E5E5E5">like we do with reflection</font><font color="#CCCCCC"> we can pass</font>

92
00:03:17,310 --> 00:03:21,090
around<font color="#E5E5E5"> these little boxes called method</font>

93
00:03:19,079 --> 00:03:24,060
type which encapsulates a return value

94
00:03:21,090 --> 00:03:25,709
<font color="#E5E5E5">or a return type and all the argument</font>

95
00:03:24,060 --> 00:03:27,959
types<font color="#E5E5E5"> that would go with it</font>

96
00:03:25,709 --> 00:03:29,549
and then all of<font color="#E5E5E5"> these methods fields are</font>

97
00:03:27,959 --> 00:03:31,530
<font color="#E5E5E5">raised they're basically just direct</font>

98
00:03:29,549 --> 00:03:33,750
handles so we get a pointer to<font color="#CCCCCC"> a</font>

99
00:03:31,530 --> 00:03:35,400
function<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> call</font><font color="#CCCCCC"> that directly</font>

100
00:03:33,750 --> 00:03:38,280
<font color="#CCCCCC">without a lot of the plumbing that</font>

101
00:03:35,400 --> 00:03:40,290
reflection normally has<font color="#E5E5E5"> type checking</font>

102
00:03:38,280 --> 00:03:42,510
and<font color="#E5E5E5"> type conversions and argument boxing</font>

103
00:03:40,290 --> 00:03:44,548
and unboxing and so on we get much

104
00:03:42,510 --> 00:03:46,440
closer to a real function pointer<font color="#E5E5E5"> which</font>

105
00:03:44,549 --> 00:03:46,979
allows us<font color="#E5E5E5"> to do a better job of</font>

106
00:03:46,440 --> 00:03:50,459
optimizing

107
00:03:46,979 --> 00:03:52,229
a dynamic language<font color="#E5E5E5"> and the method</font>

108
00:03:50,459 --> 00:03:54,269
handles class then provides all<font color="#CCCCCC"> sorts of</font>

109
00:03:52,229 --> 00:03:56,940
additional<font color="#E5E5E5"> adaptations so if we want to</font>

110
00:03:54,269 --> 00:03:59,729
<font color="#E5E5E5">add back some of</font><font color="#CCCCCC"> that type checking or</font>

111
00:03:56,940 --> 00:04:01,590
argument modification like reflection

112
00:03:59,729 --> 00:04:03,750
does we can do it on a piecemeal basis

113
00:04:01,590 --> 00:04:05,489
insert arguments move them around change

114
00:04:03,750 --> 00:04:09,419
their types and so on

115
00:04:05,489 --> 00:04:11,729
and all<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> basically forms a tree</font>

116
00:04:09,419 --> 00:04:13,979
of method handles<font color="#E5E5E5"> so at the top you've</font>

117
00:04:11,729 --> 00:04:15,780
got the<font color="#E5E5E5"> invoke coming in that will maybe</font>

118
00:04:13,979 --> 00:04:18,419
move some<font color="#E5E5E5"> arguments around maybe convert</font>

119
00:04:15,780 --> 00:04:20,070
into<font color="#E5E5E5"> Long's or doubles to floats and</font>

120
00:04:18,418 --> 00:04:22,880
<font color="#E5E5E5">then continue down until it gets to a</font>

121
00:04:20,070 --> 00:04:26,520
direct handle<font color="#E5E5E5"> a call to a function or a</font>

122
00:04:22,880 --> 00:04:28,169
write or read<font color="#CCCCCC"> from a field and</font><font color="#E5E5E5"> that's</font>

123
00:04:26,520 --> 00:04:29,609
what we have as a method handle tree and

124
00:04:28,169 --> 00:04:31,680
we could pass these around as a callable

125
00:04:29,610 --> 00:04:33,240
function object

126
00:04:31,680 --> 00:04:35,250
why why<font color="#CCCCCC"> don't we on you want</font><font color="#E5E5E5"> to use</font>

127
00:04:33,240 --> 00:04:37,979
<font color="#E5E5E5">reflection like I said the use cases for</font>

128
00:04:35,250 --> 00:04:40,229
reflection are very similar<font color="#E5E5E5"> but it does</font>

129
00:04:37,979 --> 00:04:42,150
a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> than we need in many cases if</font>

130
00:04:40,229 --> 00:04:43,650
we<font color="#E5E5E5"> have all of the correct</font><font color="#CCCCCC"> types and we</font>

131
00:04:42,150 --> 00:04:45,320
have the right<font color="#E5E5E5"> number of arguments and</font>

132
00:04:43,650 --> 00:04:48,330
we know we<font color="#E5E5E5"> just want to call a function</font>

133
00:04:45,320 --> 00:04:49,919
through this handle<font color="#E5E5E5"> we don't need it to</font>

134
00:04:48,330 --> 00:04:51,599
<font color="#CCCCCC">be doing all these extra checks and all</font>

135
00:04:49,919 --> 00:04:53,698
of these<font color="#E5E5E5"> different argument manipulation</font>

136
00:04:51,600 --> 00:04:55,590
things method handles let us have a

137
00:04:53,699 --> 00:04:57,449
direct pointer to a<font color="#CCCCCC"> function and then</font>

138
00:04:55,590 --> 00:04:59,758
only<font color="#E5E5E5"> add in back that back in the</font>

139
00:04:57,449 --> 00:05:00,660
ceremony that<font color="#E5E5E5"> we really need so let's</font>

140
00:04:59,759 --> 00:05:02,280
walk through<font color="#E5E5E5"> what</font><font color="#CCCCCC"> this actually</font><font color="#E5E5E5"> looks</font>

141
00:05:00,660 --> 00:05:04,139
<font color="#CCCCCC">like</font><font color="#E5E5E5"> in some code it's a kind of</font>

142
00:05:02,280 --> 00:05:06,270
conceptually hard to just talk it

143
00:05:04,139 --> 00:05:07,470
through<font color="#E5E5E5"> so I mentioned the the lookup</font>

144
00:05:06,270 --> 00:05:09,030
object<font color="#E5E5E5"> and there's two different ways</font>

145
00:05:07,470 --> 00:05:12,300
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can get</font><font color="#CCCCCC"> a lookup object the first</font>

146
00:05:09,030 --> 00:05:14,638
<font color="#CCCCCC">lookup here is a special</font><font color="#E5E5E5"> lookup</font><font color="#CCCCCC"> it can</font>

147
00:05:12,300 --> 00:05:16,560
see<font color="#E5E5E5"> anything and have</font><font color="#CCCCCC"> access</font><font color="#E5E5E5"> to anything</font>

148
00:05:14,639 --> 00:05:18,990
<font color="#CCCCCC">that it would</font><font color="#E5E5E5"> that you'd be able to see</font>

149
00:05:16,560 --> 00:05:21,419
at<font color="#CCCCCC"> that point in the code</font><font color="#E5E5E5"> so it can see</font>

150
00:05:18,990 --> 00:05:23,220
<font color="#E5E5E5">private fields that may be in scope for</font>

151
00:05:21,419 --> 00:05:24,750
this piece of<font color="#E5E5E5"> code rather than with</font>

152
00:05:23,220 --> 00:05:27,449
reflection where you have to go and get

153
00:05:24,750 --> 00:05:29,430
a method or a<font color="#E5E5E5"> private field and then try</font>

154
00:05:27,449 --> 00:05:32,130
<font color="#E5E5E5">to set accessible and then pass a bunch</font>

155
00:05:29,430 --> 00:05:34,620
<font color="#E5E5E5">of Java</font><font color="#CCCCCC"> 9 flags to make it let you do</font>

156
00:05:32,130 --> 00:05:36,630
all<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> stuff you can</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> give</font>

157
00:05:34,620 --> 00:05:39,120
out this access or have this access for

158
00:05:36,630 --> 00:05:40,830
<font color="#E5E5E5">your program more often though if you're</font>

159
00:05:39,120 --> 00:05:42,750
just using<font color="#E5E5E5"> this as sort of a reflective</font>

160
00:05:40,830 --> 00:05:45,300
thing to call<font color="#CCCCCC"> into</font><font color="#E5E5E5"> Java methods you'll</font>

161
00:05:42,750 --> 00:05:46,500
use a public<font color="#CCCCCC"> lookup which is what you'd</font>

162
00:05:45,300 --> 00:05:48,000
expect<font color="#E5E5E5"> it's only what's going to be</font>

163
00:05:46,500 --> 00:05:51,000
public to someone that's<font color="#CCCCCC"> completely</font>

164
00:05:48,000 --> 00:05:53,550
<font color="#E5E5E5">outside of</font><font color="#CCCCCC"> that class and packaged</font><font color="#E5E5E5"> so we</font>

165
00:05:51,000 --> 00:05:55,860
have<font color="#E5E5E5"> our lookup objects</font><font color="#CCCCCC"> now we can use</font>

166
00:05:53,550 --> 00:05:57,539
our method types to look up methods we

167
00:05:55,860 --> 00:05:59,039
<font color="#E5E5E5">have three different lookups we're doing</font>

168
00:05:57,539 --> 00:06:00,630
here we're going<font color="#E5E5E5"> to get the get property</font>

169
00:05:59,039 --> 00:06:03,270
off of the system class that's a fine

170
00:06:00,630 --> 00:06:06,030
static and<font color="#E5E5E5"> you can see the the property</font>

171
00:06:03,270 --> 00:06:07,320
it's a return string and takes a<font color="#E5E5E5"> string</font>

172
00:06:06,030 --> 00:06:10,739
argument we're<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to that that</font>

173
00:06:07,320 --> 00:06:12,690
signature here is add on a list<font color="#E5E5E5"> this is</font>

174
00:06:10,740 --> 00:06:14,159
a virtual<font color="#E5E5E5"> lookup so we look up</font><font color="#CCCCCC"> the</font>

175
00:06:12,690 --> 00:06:17,280
virtual<font color="#E5E5E5"> method and now we have a handle</font>

176
00:06:14,159 --> 00:06:19,139
<font color="#E5E5E5">to add on a list and</font><font color="#CCCCCC"> then we can also do</font>

177
00:06:17,280 --> 00:06:20,698
constructors<font color="#CCCCCC"> we can look up constructors</font>

178
00:06:19,139 --> 00:06:22,289
<font color="#E5E5E5">and construct objects and they all</font>

179
00:06:20,699 --> 00:06:24,270
basically<font color="#E5E5E5"> just end up method handles</font>

180
00:06:22,289 --> 00:06:27,690
<font color="#E5E5E5">that we can invoke with various</font>

181
00:06:24,270 --> 00:06:29,940
parameters and<font color="#E5E5E5"> in signatures looking at</font>

182
00:06:27,690 --> 00:06:32,099
fields<font color="#E5E5E5"> also very similar</font><font color="#CCCCCC"> so we</font><font color="#E5E5E5"> can grab</font>

183
00:06:29,940 --> 00:06:33,900
the<font color="#E5E5E5"> system out field off of</font><font color="#CCCCCC"> the system</font>

184
00:06:32,099 --> 00:06:35,639
class and then<font color="#E5E5E5"> we have a method handle</font>

185
00:06:33,900 --> 00:06:38,039
<font color="#E5E5E5">that every time we invoke it it will go</font>

186
00:06:35,639 --> 00:06:42,479
<font color="#E5E5E5">and get system out just like a java.lang</font>

187
00:06:38,039 --> 00:06:44,010
reflect field<font color="#E5E5E5"> and then we can take all</font>

188
00:06:42,479 --> 00:06:45,070
of these<font color="#E5E5E5"> and combine them together as</font>

189
00:06:44,010 --> 00:06:48,039
well<font color="#CCCCCC"> so</font>

190
00:06:45,070 --> 00:06:51,700
<font color="#E5E5E5">here we have our get property</font><font color="#CCCCCC"> we have</font>

191
00:06:48,040 --> 00:06:53,320
our get<font color="#E5E5E5"> property our add our list</font><font color="#CCCCCC"> down</font>

192
00:06:51,700 --> 00:06:54,820
at<font color="#E5E5E5"> the bottom we can also get</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> fine</font>

193
00:06:53,320 --> 00:06:59,200
static<font color="#CCCCCC"> gather</font><font color="#E5E5E5"> and pull these together</font>

194
00:06:54,820 --> 00:07:00,250
<font color="#E5E5E5">into a tree of handles essentially</font><font color="#CCCCCC"> then</font>

195
00:06:59,200 --> 00:07:02,050
finally once we've got<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of our</font>

196
00:07:00,250 --> 00:07:03,670
handles together<font color="#E5E5E5"> we can invoke them just</font>

197
00:07:02,050 --> 00:07:06,310
like<font color="#E5E5E5"> we</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> with a reflected object</font>

198
00:07:03,670 --> 00:07:08,590
here we're<font color="#CCCCCC"> using the get property so we</font>

199
00:07:06,310 --> 00:07:12,430
get the<font color="#CCCCCC"> java dot home</font><font color="#E5E5E5"> and now we can</font>

200
00:07:08,590 --> 00:07:13,929
access it<font color="#E5E5E5"> this way okay so I mentioned</font>

201
00:07:12,430 --> 00:07:15,370
<font color="#E5E5E5">about combining method handles and I</font>

202
00:07:13,930 --> 00:07:17,500
didn't talk<font color="#E5E5E5"> about</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> in those slides</font>

203
00:07:15,370 --> 00:07:20,170
there<font color="#E5E5E5"> let's take a look at some of the</font>

204
00:07:17,500 --> 00:07:21,850
<font color="#CCCCCC">adaptations we can do so when we have</font>

205
00:07:20,170 --> 00:07:24,250
these two different<font color="#E5E5E5"> handles like get</font>

206
00:07:21,850 --> 00:07:25,780
system dot out and call print line on it

207
00:07:24,250 --> 00:07:27,310
<font color="#E5E5E5">we'd like to be</font><font color="#CCCCCC"> able to combine</font><font color="#E5E5E5"> those</font>

208
00:07:25,780 --> 00:07:29,049
and<font color="#E5E5E5"> there's many different handle</font>

209
00:07:27,310 --> 00:07:32,650
adaptations that<font color="#E5E5E5"> let</font><font color="#CCCCCC"> us combine</font><font color="#E5E5E5"> those</font>

210
00:07:29,050 --> 00:07:34,030
together<font color="#E5E5E5"> into a tree of operations</font><font color="#CCCCCC"> we</font>

211
00:07:32,650 --> 00:07:36,340
call these method handle<font color="#CCCCCC"> Combinator's</font>

212
00:07:34,030 --> 00:07:37,809
<font color="#E5E5E5">and so these</font><font color="#CCCCCC"> combinators allow us to</font>

213
00:07:36,340 --> 00:07:40,299
take many<font color="#E5E5E5"> different methods many</font>

214
00:07:37,810 --> 00:07:42,700
different fields<font color="#E5E5E5"> some conditional logic</font>

215
00:07:40,300 --> 00:07:45,010
and loops and so on and create still

216
00:07:42,700 --> 00:07:47,110
just a single callable object that<font color="#E5E5E5"> has</font>

217
00:07:45,010 --> 00:07:49,539
all of<font color="#E5E5E5"> this additional logic wrapped</font>

218
00:07:47,110 --> 00:07:51,340
around it and the cool<font color="#CCCCCC"> thing about</font><font color="#E5E5E5"> this</font>

219
00:07:49,540 --> 00:07:53,470
<font color="#E5E5E5">is</font><font color="#CCCCCC"> that the JIT still sees through</font><font color="#E5E5E5"> this</font>

220
00:07:51,340 --> 00:07:55,570
it says if we<font color="#E5E5E5"> wrote these loops or these</font>

221
00:07:53,470 --> 00:07:57,250
conditions or<font color="#E5E5E5"> these calls in regular</font>

222
00:07:55,570 --> 00:07:59,110
Java<font color="#E5E5E5"> but we're building</font><font color="#CCCCCC"> it up</font>

223
00:07:57,250 --> 00:08:00,910
programmatically using<font color="#CCCCCC"> method handles</font>

224
00:07:59,110 --> 00:08:02,500
<font color="#E5E5E5">and then the JVM takes that and</font>

225
00:08:00,910 --> 00:08:04,450
optimizes it and turns it into the same

226
00:08:02,500 --> 00:08:08,260
<font color="#E5E5E5">assembly code that you'd have if you</font>

227
00:08:04,450 --> 00:08:09,700
just wrote<font color="#E5E5E5"> Java code directly so one of</font>

228
00:08:08,260 --> 00:08:11,409
<font color="#E5E5E5">these</font><font color="#CCCCCC"> combinators to kind of give</font><font color="#E5E5E5"> you an</font>

229
00:08:09,700 --> 00:08:14,650
example<font color="#E5E5E5"> of how this</font><font color="#CCCCCC"> looks it would be an</font>

230
00:08:11,410 --> 00:08:16,810
if-then-else<font color="#CCCCCC"> so here is our pseudo</font><font color="#E5E5E5"> Java</font>

231
00:08:14,650 --> 00:08:19,150
code here<font color="#E5E5E5"> we're just</font><font color="#CCCCCC"> caching results</font>

232
00:08:16,810 --> 00:08:21,010
from<font color="#E5E5E5"> a database in a little hash so</font>

233
00:08:19,150 --> 00:08:22,090
we've got<font color="#E5E5E5"> our hash we check to see</font><font color="#CCCCCC"> if</font>

234
00:08:21,010 --> 00:08:25,060
<font color="#E5E5E5">we've already hit</font><font color="#CCCCCC"> that in that</font>

235
00:08:22,090 --> 00:08:27,130
particular<font color="#CCCCCC"> key if we do we can return it</font>

236
00:08:25,060 --> 00:08:28,570
otherwise we go to the database<font color="#E5E5E5"> load</font>

237
00:08:27,130 --> 00:08:30,460
some<font color="#CCCCCC"> data out</font><font color="#E5E5E5"> of it and stick it into</font>

238
00:08:28,570 --> 00:08:32,140
the cache that's the simple thing<font color="#CCCCCC"> that</font>

239
00:08:30,460 --> 00:08:36,280
we'd like<font color="#E5E5E5"> to</font><font color="#CCCCCC"> represent as</font><font color="#E5E5E5"> a set of</font>

240
00:08:32,140 --> 00:08:38,679
method handles<font color="#E5E5E5"> the magic call that we do</font>

241
00:08:36,280 --> 00:08:40,539
here<font color="#E5E5E5"> in the method handle API is guard</font>

242
00:08:38,679 --> 00:08:43,839
with<font color="#CCCCCC"> tests which</font><font color="#E5E5E5"> is essentially an</font>

243
00:08:40,539 --> 00:08:45,610
if-then-else<font color="#CCCCCC"> so let's take that we've</font>

244
00:08:43,840 --> 00:08:48,400
got our condition<font color="#E5E5E5"> our then in our else</font>

245
00:08:45,610 --> 00:08:52,120
<font color="#E5E5E5">so our</font><font color="#CCCCCC"> condition in this case we find</font>

246
00:08:48,400 --> 00:08:54,280
virtual<font color="#E5E5E5"> on map that</font><font color="#CCCCCC"> contains key method</font>

247
00:08:52,120 --> 00:08:56,500
which returns<font color="#CCCCCC"> a boolean and accepts an</font>

248
00:08:54,280 --> 00:08:58,209
object<font color="#E5E5E5"> and then we're going to bind it</font>

249
00:08:56,500 --> 00:08:58,980
<font color="#E5E5E5">to the cache</font><font color="#CCCCCC"> so that</font><font color="#E5E5E5"> means that that</font>

250
00:08:58,210 --> 00:09:00,420
that<font color="#CCCCCC"> fer</font>

251
00:08:58,980 --> 00:09:02,519
argument the argument where we actually

252
00:09:00,420 --> 00:09:04,110
<font color="#E5E5E5">have the</font><font color="#CCCCCC"> physical cache</font><font color="#E5E5E5"> object is now</font>

253
00:09:02,519 --> 00:09:05,850
taken care of for us<font color="#E5E5E5"> we</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have to</font>

254
00:09:04,110 --> 00:09:12,420
pass that in like we would with

255
00:09:05,850 --> 00:09:14,550
<font color="#E5E5E5">reflection doing an invocation case when</font>

256
00:09:12,420 --> 00:09:16,139
we find the key<font color="#E5E5E5"> so now</font><font color="#CCCCCC"> we will actually</font>

257
00:09:14,550 --> 00:09:18,359
just<font color="#E5E5E5"> go get the value out</font><font color="#CCCCCC"> of the map</font>

258
00:09:16,139 --> 00:09:20,130
<font color="#E5E5E5">again</font><font color="#CCCCCC"> we'll bind that to the</font><font color="#E5E5E5"> cache</font><font color="#CCCCCC"> so</font>

259
00:09:18,360 --> 00:09:22,589
now this will pull that element out of

260
00:09:20,130 --> 00:09:25,380
<font color="#CCCCCC">the</font><font color="#E5E5E5"> cache and</font><font color="#CCCCCC"> return it to us and then</font>

261
00:09:22,589 --> 00:09:28,709
<font color="#CCCCCC">we have our else our else is to pull it</font>

262
00:09:25,380 --> 00:09:30,720
<font color="#CCCCCC">from the database</font><font color="#E5E5E5"> and cache it in this</font>

263
00:09:28,709 --> 00:09:32,638
<font color="#CCCCCC">this hash object and again we can bind</font>

264
00:09:30,720 --> 00:09:34,440
it<font color="#E5E5E5"> and pull all of these</font><font color="#CCCCCC"> together with</font>

265
00:09:32,639 --> 00:09:36,480
our guard with<font color="#CCCCCC"> tests now we have a</font>

266
00:09:34,440 --> 00:09:38,699
<font color="#E5E5E5">single method handle a single callable</font>

267
00:09:36,480 --> 00:09:41,010
object<font color="#E5E5E5"> that does all of this conditional</font>

268
00:09:38,699 --> 00:09:44,729
logic<font color="#CCCCCC"> and then optimizes itself</font>

269
00:09:41,010 --> 00:09:46,769
<font color="#E5E5E5">internally pretty cool so there's lots</font>

270
00:09:44,730 --> 00:09:48,089
of other<font color="#CCCCCC"> adaptations</font><font color="#E5E5E5"> obviously I</font><font color="#CCCCCC"> don't</font>

271
00:09:46,769 --> 00:09:50,399
<font color="#E5E5E5">have time to get to</font><font color="#CCCCCC"> all of</font><font color="#E5E5E5"> these here</font>

272
00:09:48,089 --> 00:09:52,529
<font color="#E5E5E5">but we can insert arguments we can drop</font>

273
00:09:50,399 --> 00:09:54,300
arguments<font color="#E5E5E5"> reorder them depending on how</font>

274
00:09:52,529 --> 00:09:57,360
we're<font color="#CCCCCC"> adapting different api's together</font>

275
00:09:54,300 --> 00:10:00,329
<font color="#E5E5E5">we can filter the arguments or the</font>

276
00:09:57,360 --> 00:10:02,220
<font color="#E5E5E5">return value</font><font color="#CCCCCC"> so for each argument</font><font color="#E5E5E5"> pass</font>

277
00:10:00,329 --> 00:10:03,839
it through some function<font color="#E5E5E5"> take the result</font>

278
00:10:02,220 --> 00:10:06,480
of<font color="#E5E5E5"> that and make that</font><font color="#CCCCCC"> the new argument</font>

279
00:10:03,839 --> 00:10:08,519
at that point<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> also fold all of</font>

280
00:10:06,480 --> 00:10:10,560
the arguments<font color="#CCCCCC"> together pass them to</font><font color="#E5E5E5"> a</font>

281
00:10:08,519 --> 00:10:11,699
function calculate something<font color="#E5E5E5"> and then</font>

282
00:10:10,560 --> 00:10:14,040
the result of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> becomes a new</font>

283
00:10:11,699 --> 00:10:16,439
<font color="#CCCCCC">argument</font><font color="#E5E5E5"> so all along the way moving</font>

284
00:10:14,040 --> 00:10:19,290
arguments around making calls<font color="#CCCCCC"> accessing</font>

285
00:10:16,440 --> 00:10:21,149
fields and essentially building a tree

286
00:10:19,290 --> 00:10:26,339
of logic out of<font color="#E5E5E5"> all of our method</font>

287
00:10:21,149 --> 00:10:28,740
handles so what's new<font color="#CCCCCC"> with</font><font color="#E5E5E5"> Java 9 so</font>

288
00:10:26,339 --> 00:10:31,260
when<font color="#CCCCCC"> we first</font><font color="#E5E5E5"> came</font><font color="#CCCCCC"> up with the method</font>

289
00:10:28,740 --> 00:10:33,120
handle API we<font color="#E5E5E5"> had a fairly complete set</font>

290
00:10:31,260 --> 00:10:34,439
of operations<font color="#E5E5E5"> but there were a few</font>

291
00:10:33,120 --> 00:10:36,389
things<font color="#E5E5E5"> that turned out to</font><font color="#CCCCCC"> be missing</font>

292
00:10:34,440 --> 00:10:37,949
<font color="#E5E5E5">that programmatically it turned out we</font>

293
00:10:36,389 --> 00:10:39,810
needed<font color="#E5E5E5"> as part of the method handle API</font>

294
00:10:37,949 --> 00:10:41,699
<font color="#E5E5E5">one of the biggest ones that I was</font>

295
00:10:39,810 --> 00:10:43,229
<font color="#E5E5E5">worried about was try finally I'll show</font>

296
00:10:41,699 --> 00:10:45,709
<font color="#CCCCCC">you in a minute why that was such a</font>

297
00:10:43,230 --> 00:10:48,600
problem we also had no way to<font color="#E5E5E5"> do loops</font>

298
00:10:45,709 --> 00:10:50,849
<font color="#CCCCCC">so if you're going</font><font color="#E5E5E5"> to be representing</font>

299
00:10:48,600 --> 00:10:52,529
essentially an entire expression<font color="#E5E5E5"> tree</font>

300
00:10:50,850 --> 00:10:55,019
<font color="#CCCCCC">it'd be nice if</font><font color="#E5E5E5"> you could actually do</font>

301
00:10:52,529 --> 00:10:58,100
some controlled looping over<font color="#E5E5E5"> elements of</font>

302
00:10:55,019 --> 00:11:00,750
an array or<font color="#E5E5E5"> over input arguments</font><font color="#CCCCCC"> whatnot</font>

303
00:10:58,100 --> 00:11:03,480
we didn't have any real good way<font color="#E5E5E5"> to do</font>

304
00:11:00,750 --> 00:11:05,220
volatile or atomic<font color="#E5E5E5"> accesses to</font><font color="#CCCCCC"> fields so</font>

305
00:11:03,480 --> 00:11:07,829
I showed<font color="#E5E5E5"> you that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can get</font><font color="#CCCCCC"> a method</font>

306
00:11:05,220 --> 00:11:09,660
handle to a field but it's just<font color="#E5E5E5"> going to</font>

307
00:11:07,829 --> 00:11:11,069
access it<font color="#CCCCCC"> the way that you would if you</font>

308
00:11:09,660 --> 00:11:12,810
were<font color="#E5E5E5"> calling it from Java there's no way</font>

309
00:11:11,069 --> 00:11:16,250
to say<font color="#E5E5E5"> oh I want to do</font>

310
00:11:12,810 --> 00:11:18,869
volatile right or you<font color="#CCCCCC"> know a</font>

311
00:11:16,250 --> 00:11:20,580
<font color="#CCCCCC">non-volatile right</font><font color="#E5E5E5"> to a field</font><font color="#CCCCCC"> it's</font>

312
00:11:18,870 --> 00:11:22,620
<font color="#E5E5E5">always just</font><font color="#CCCCCC"> one particular</font><font color="#E5E5E5"> access way so</font>

313
00:11:20,580 --> 00:11:23,940
we<font color="#E5E5E5"> needed better ways to do that and</font>

314
00:11:22,620 --> 00:11:25,470
<font color="#E5E5E5">there was no way to just tell it to</font>

315
00:11:23,940 --> 00:11:27,180
construct<font color="#CCCCCC"> an array you would have to</font>

316
00:11:25,470 --> 00:11:29,220
have a utility<font color="#CCCCCC"> method</font><font color="#E5E5E5"> somewhere that you</font>

317
00:11:27,180 --> 00:11:29,630
would call<font color="#CCCCCC"> into to construct</font><font color="#E5E5E5"> arrays for</font>

318
00:11:29,220 --> 00:11:31,980
you

319
00:11:29,630 --> 00:11:33,600
<font color="#E5E5E5">obviously this is Java we need to be</font>

320
00:11:31,980 --> 00:11:36,600
able<font color="#E5E5E5"> to create arrays as part of this</font>

321
00:11:33,600 --> 00:11:40,529
<font color="#E5E5E5">whole expression tree okay so I</font>

322
00:11:36,600 --> 00:11:42,540
mentioned<font color="#E5E5E5"> try finally</font><font color="#CCCCCC"> and a lot</font><font color="#E5E5E5"> maybe a</font>

323
00:11:40,529 --> 00:11:45,180
lot of folks may<font color="#E5E5E5"> not know this when you</font>

324
00:11:42,540 --> 00:11:47,069
have a try finally<font color="#E5E5E5"> in Java code</font><font color="#CCCCCC"> java c</font>

325
00:11:45,180 --> 00:11:49,560
actually<font color="#E5E5E5"> will duplicate that finally</font>

326
00:11:47,070 --> 00:11:52,560
block of logic along every exit path

327
00:11:49,560 --> 00:11:54,089
<font color="#E5E5E5">from from that that block of code</font><font color="#CCCCCC"> so</font>

328
00:11:52,560 --> 00:11:55,949
there will<font color="#E5E5E5"> be the finally logic that</font>

329
00:11:54,089 --> 00:11:57,990
gets stuck<font color="#E5E5E5"> on the end of the non</font>

330
00:11:55,950 --> 00:11:59,570
exceptional path<font color="#E5E5E5"> and the finally logic</font>

331
00:11:57,990 --> 00:12:02,339
that's handled on the exceptional path

332
00:11:59,570 --> 00:12:04,529
<font color="#CCCCCC">and so if we wanted</font><font color="#E5E5E5"> to do this with</font>

333
00:12:02,339 --> 00:12:06,540
method handles<font color="#E5E5E5"> we essentially had to do</font>

334
00:12:04,529 --> 00:12:08,700
the<font color="#E5E5E5"> same thing we had to</font><font color="#CCCCCC"> take that</font>

335
00:12:06,540 --> 00:12:10,349
handle and<font color="#E5E5E5"> duplicate it twice make the</font>

336
00:12:08,700 --> 00:12:12,660
tree that much more complicated<font color="#CCCCCC"> for the</font>

337
00:12:10,350 --> 00:12:15,060
exit path and for<font color="#E5E5E5"> the for the normal</font>

338
00:12:12,660 --> 00:12:16,770
path and for<font color="#E5E5E5"> the exceptional path and so</font>

339
00:12:15,060 --> 00:12:18,630
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that looks really</font><font color="#E5E5E5"> simple like</font>

340
00:12:16,770 --> 00:12:20,790
this<font color="#CCCCCC"> we essentially wanted to wrap a</font>

341
00:12:18,630 --> 00:12:22,650
target method handle with some exception

342
00:12:20,790 --> 00:12:24,599
handling<font color="#E5E5E5"> and then pass it off to</font><font color="#CCCCCC"> a</font>

343
00:12:22,650 --> 00:12:28,470
handler if there was an<font color="#CCCCCC"> exception turned</font>

344
00:12:24,600 --> 00:12:30,690
into code<font color="#E5E5E5"> like this just to do a try</font>

345
00:12:28,470 --> 00:12:32,220
finally<font color="#E5E5E5"> and this is actually greatly</font>

346
00:12:30,690 --> 00:12:34,050
<font color="#E5E5E5">simplified from what it really is</font>

347
00:12:32,220 --> 00:12:36,960
<font color="#E5E5E5">because I'm using my invoke binder</font>

348
00:12:34,050 --> 00:12:40,260
library<font color="#E5E5E5"> which which simplifies and wraps</font>

349
00:12:36,960 --> 00:12:41,820
a lot of the method handle API<font color="#CCCCCC"> but this</font>

350
00:12:40,260 --> 00:12:44,640
is<font color="#E5E5E5"> obviously not what we want this is</font>

351
00:12:41,820 --> 00:12:46,260
way too complicated<font color="#CCCCCC"> it worked</font><font color="#E5E5E5"> but we've</font>

352
00:12:44,640 --> 00:12:48,330
got so many handles and so many

353
00:12:46,260 --> 00:12:50,010
adaptations<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the JVM had trouble</font>

354
00:12:48,330 --> 00:12:51,690
<font color="#E5E5E5">seeing through it</font><font color="#CCCCCC"> it didn't turn it into</font>

355
00:12:50,010 --> 00:12:54,360
the<font color="#CCCCCC"> the try finally logic we really</font>

356
00:12:51,690 --> 00:12:57,060
wanted and so in<font color="#E5E5E5"> Java 9 now we can just</font>

357
00:12:54,360 --> 00:13:00,030
<font color="#E5E5E5">do this and say try finally and put it</font>

358
00:12:57,060 --> 00:13:02,579
in the right places<font color="#CCCCCC"> we also didn't have</font>

359
00:13:00,030 --> 00:13:04,380
<font color="#E5E5E5">loops which were added so here we have</font>

360
00:13:02,580 --> 00:13:07,350
<font color="#E5E5E5">just simple while loops or a do-while</font>

361
00:13:04,380 --> 00:13:09,330
loop<font color="#CCCCCC"> a counted loop or an iterated loop</font>

362
00:13:07,350 --> 00:13:11,370
that has an iterator<font color="#CCCCCC"> and then just walks</font>

363
00:13:09,330 --> 00:13:13,950
through a collection<font color="#CCCCCC"> for example and</font>

364
00:13:11,370 --> 00:13:16,230
then the general case the method handles

365
00:13:13,950 --> 00:13:18,750
<font color="#E5E5E5">loop has very many different ways that</font>

366
00:13:16,230 --> 00:13:20,670
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can configure it</font><font color="#CCCCCC"> to handle</font><font color="#E5E5E5"> other</font>

367
00:13:18,750 --> 00:13:24,420
types of loops<font color="#E5E5E5"> these are all just sort</font>

368
00:13:20,670 --> 00:13:27,089
of sub versions of<font color="#E5E5E5"> that all</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> var</font>

369
00:13:24,420 --> 00:13:29,490
handles also<font color="#E5E5E5"> added in Java 9</font>

370
00:13:27,090 --> 00:13:32,010
and so<font color="#CCCCCC"> var handles</font><font color="#E5E5E5"> gave us the ability</font>

371
00:13:29,490 --> 00:13:34,800
to<font color="#E5E5E5"> have</font><font color="#CCCCCC"> that handle to a field on an</font>

372
00:13:32,010 --> 00:13:37,110
object or<font color="#CCCCCC"> a static field</font><font color="#E5E5E5"> but much more</font>

373
00:13:34,800 --> 00:13:39,390
powerful mechanisms for<font color="#E5E5E5"> doing volatile</font>

374
00:13:37,110 --> 00:13:41,490
access<font color="#CCCCCC"> an atomic axis</font><font color="#E5E5E5"> we don't have to</font>

375
00:13:39,390 --> 00:13:45,150
cheat by going all the way to unsafe<font color="#E5E5E5"> to</font>

376
00:13:41,490 --> 00:13:46,830
do a compare and<font color="#E5E5E5"> swap of a field or deal</font>

377
00:13:45,150 --> 00:13:49,500
<font color="#CCCCCC">with in directing through an atomic</font>

378
00:13:46,830 --> 00:13:51,570
reference object<font color="#E5E5E5"> we can just do it</font>

379
00:13:49,500 --> 00:13:54,540
<font color="#E5E5E5">directly with the VAR handle now and so</font>

380
00:13:51,570 --> 00:13:57,720
one of<font color="#E5E5E5"> the one</font><font color="#CCCCCC"> of the many ways that</font><font color="#E5E5E5"> we</font>

381
00:13:54,540 --> 00:13:58,980
cheat with an unsafe can now go away<font color="#E5E5E5"> it</font>

382
00:13:57,720 --> 00:14:00,540
also gave us<font color="#CCCCCC"> something other</font><font color="#E5E5E5"> something</font>

383
00:13:58,980 --> 00:14:03,030
else<font color="#CCCCCC"> that was</font><font color="#E5E5E5"> pretty cool</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> have</font>

384
00:14:00,540 --> 00:14:06,449
views<font color="#E5E5E5"> on a</font><font color="#CCCCCC"> byte buffer or a byte array</font>

385
00:14:03,030 --> 00:14:08,579
<font color="#E5E5E5">that rather than if you actually look at</font>

386
00:14:06,450 --> 00:14:10,350
the for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> the last talk had an int</font>

387
00:14:08,580 --> 00:14:12,870
buffer<font color="#E5E5E5"> that it wrapped around a byte</font>

388
00:14:10,350 --> 00:14:15,690
buffer<font color="#E5E5E5"> right</font><font color="#CCCCCC"> if you look at the code in</font>

389
00:14:12,870 --> 00:14:17,520
int buffer it<font color="#E5E5E5"> actually just reads bytes</font>

390
00:14:15,690 --> 00:14:19,320
and then<font color="#E5E5E5"> concatenate them together and</font>

391
00:14:17,520 --> 00:14:21,300
turns<font color="#E5E5E5"> them into an int it's not actually</font>

392
00:14:19,320 --> 00:14:23,430
pulling int by<font color="#E5E5E5"> after int off of that</font>

393
00:14:21,300 --> 00:14:24,660
line<font color="#E5E5E5"> which means you're doing four or</font>

394
00:14:23,430 --> 00:14:26,400
eight times as much<font color="#CCCCCC"> work</font>

395
00:14:24,660 --> 00:14:28,020
reading individual<font color="#E5E5E5"> bytes and put</font>

396
00:14:26,400 --> 00:14:29,880
sticking them together<font color="#E5E5E5"> now we can</font>

397
00:14:28,020 --> 00:14:31,829
<font color="#CCCCCC">actually say treat this byte array as if</font>

398
00:14:29,880 --> 00:14:34,400
it were an int array or a long array and

399
00:14:31,830 --> 00:14:37,320
it will read it<font color="#CCCCCC"> in int or long chunks</font>

400
00:14:34,400 --> 00:14:40,260
<font color="#CCCCCC">saves a lot of time what does</font><font color="#E5E5E5"> this look</font>

401
00:14:37,320 --> 00:14:42,300
like<font color="#E5E5E5"> in code so here we're gonna get off</font>

402
00:14:40,260 --> 00:14:45,480
<font color="#E5E5E5">we're gonna use our</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> out again</font><font color="#CCCCCC"> so</font>

403
00:14:42,300 --> 00:14:48,719
we<font color="#E5E5E5"> get our static var handle</font><font color="#CCCCCC"> and then we</font>

404
00:14:45,480 --> 00:14:51,210
can do our accesses against that<font color="#CCCCCC"> here's</font>

405
00:14:48,720 --> 00:14:54,390
our<font color="#E5E5E5"> byte array buffers</font><font color="#CCCCCC"> or our byte array</font>

406
00:14:51,210 --> 00:14:56,490
view var handle long method name<font color="#CCCCCC"> but we</font>

407
00:14:54,390 --> 00:14:58,350
can basically take a byte array<font color="#E5E5E5"> and make</font>

408
00:14:56,490 --> 00:15:00,710
it look<font color="#CCCCCC"> like it's an int</font><font color="#E5E5E5"> or a long so we</font>

409
00:14:58,350 --> 00:15:03,180
can<font color="#E5E5E5"> walk it with a 32-bit or 64-bit</font>

410
00:15:00,710 --> 00:15:06,840
stride rather than walking<font color="#E5E5E5"> it in 8-bit</font>

411
00:15:03,180 --> 00:15:09,000
chunks<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then being able to</font><font color="#CCCCCC"> access the</font>

412
00:15:06,840 --> 00:15:11,340
array elements<font color="#CCCCCC"> there</font><font color="#E5E5E5"> also again</font>

413
00:15:09,000 --> 00:15:13,950
something from the VAR handle stuff now

414
00:15:11,340 --> 00:15:16,080
if we here's where we have<font color="#CCCCCC"> the atomic</font>

415
00:15:13,950 --> 00:15:18,090
access so here is<font color="#E5E5E5"> just doing a set</font>

416
00:15:16,080 --> 00:15:19,680
volatile<font color="#E5E5E5"> there are all the different</font>

417
00:15:18,090 --> 00:15:21,500
types<font color="#E5E5E5"> of accesses in the memory model</font>

418
00:15:19,680 --> 00:15:23,880
are available in the VAR handle API

419
00:15:21,500 --> 00:15:25,290
<font color="#CCCCCC">including a</font><font color="#E5E5E5"> few that normally are</font><font color="#CCCCCC"> not</font>

420
00:15:23,880 --> 00:15:28,470
<font color="#CCCCCC">even part of the job of</font><font color="#E5E5E5"> the language</font>

421
00:15:25,290 --> 00:15:32,250
itself<font color="#E5E5E5"> they can be used in other ways</font>

422
00:15:28,470 --> 00:15:34,380
here is our byte array view so we read

423
00:15:32,250 --> 00:15:35,730
in a bunch of data<font color="#E5E5E5"> off</font><font color="#CCCCCC"> the line</font><font color="#E5E5E5"> we know</font>

424
00:15:34,380 --> 00:15:39,300
that the data<font color="#E5E5E5"> that we're reading</font><font color="#CCCCCC"> from</font>

425
00:15:35,730 --> 00:15:40,380
this stream is all Long's previously you

426
00:15:39,300 --> 00:15:42,569
would<font color="#E5E5E5"> have to just</font>

427
00:15:40,380 --> 00:15:45,240
<font color="#CCCCCC">byte by byte</font><font color="#E5E5E5"> combine those things into</font>

428
00:15:42,570 --> 00:15:48,690
Long's<font color="#CCCCCC"> and now you can say</font><font color="#E5E5E5"> okay I'm</font>

429
00:15:45,240 --> 00:15:50,760
going<font color="#E5E5E5"> to turn this into a view that</font><font color="#CCCCCC"> is</font>

430
00:15:48,690 --> 00:15:54,660
actually pulling lungs off of that byte

431
00:15:50,760 --> 00:15:56,280
array<font color="#E5E5E5"> all at once and that's helpful and</font>

432
00:15:54,660 --> 00:15:57,959
of course this all fits<font color="#E5E5E5"> into the method</font>

433
00:15:56,280 --> 00:16:00,390
handle API so<font color="#E5E5E5"> var handles can be</font>

434
00:15:57,960 --> 00:16:02,910
<font color="#E5E5E5">converted into method handles and then</font>

435
00:16:00,390 --> 00:16:04,260
mixed<font color="#E5E5E5"> into the same tree and pulled in</font>

436
00:16:02,910 --> 00:16:09,920
with all the other<font color="#CCCCCC"> expressions</font><font color="#E5E5E5"> in logic</font>

437
00:16:04,260 --> 00:16:13,370
that<font color="#E5E5E5"> you have okay so now a primer a</font>

438
00:16:09,920 --> 00:16:15,810
little short example of<font color="#CCCCCC"> a VOC binder</font>

439
00:16:13,370 --> 00:16:17,490
<font color="#CCCCCC">invoke binders</font><font color="#E5E5E5"> a library that</font><font color="#CCCCCC"> I wrote to</font>

440
00:16:15,810 --> 00:16:23,130
make it easier to<font color="#CCCCCC"> work with</font><font color="#E5E5E5"> the method</font>

441
00:16:17,490 --> 00:16:25,860
handle API<font color="#E5E5E5"> there are some</font><font color="#CCCCCC"> challenges in</font>

442
00:16:23,130 --> 00:16:27,390
<font color="#E5E5E5">using the method handle API for example</font>

443
00:16:25,860 --> 00:16:29,280
if I wanted<font color="#E5E5E5"> to write this code this is</font>

444
00:16:27,390 --> 00:16:31,170
basically our running example here of

445
00:16:29,280 --> 00:16:32,910
<font color="#E5E5E5">system out we're gonna take an argument</font>

446
00:16:31,170 --> 00:16:34,439
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then we're going</font><font color="#CCCCCC"> to concatenate</font><font color="#E5E5E5"> it</font>

447
00:16:32,910 --> 00:16:36,150
and print<font color="#E5E5E5"> it out if I wanted to</font>

448
00:16:34,440 --> 00:16:39,090
<font color="#CCCCCC">represent this whole expression</font><font color="#E5E5E5"> this</font>

449
00:16:36,150 --> 00:16:41,130
<font color="#E5E5E5">whole this whole function as a method</font>

450
00:16:39,090 --> 00:16:44,130
handles<font color="#E5E5E5"> it ends up looking kind of</font><font color="#CCCCCC"> like</font>

451
00:16:41,130 --> 00:16:46,439
this<font color="#CCCCCC"> and it's difficult to read through</font>

452
00:16:44,130 --> 00:16:48,510
because we're sort<font color="#E5E5E5"> of starting</font><font color="#CCCCCC"> at the</font>

453
00:16:46,440 --> 00:16:50,370
<font color="#E5E5E5">endpoints like there's the field</font>

454
00:16:48,510 --> 00:16:52,200
there's the concatenate method there's

455
00:16:50,370 --> 00:16:53,640
the print line<font color="#CCCCCC"> okay now down</font><font color="#E5E5E5"> at the</font>

456
00:16:52,200 --> 00:16:56,580
<font color="#CCCCCC">bottom we're going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> filter</font><font color="#E5E5E5"> and change</font>

457
00:16:53,640 --> 00:16:57,930
<font color="#E5E5E5">some of these arguments around and then</font>

458
00:16:56,580 --> 00:16:59,940
<font color="#CCCCCC">eventually we can combine</font><font color="#E5E5E5"> this together</font>

459
00:16:57,930 --> 00:17:02,520
<font color="#E5E5E5">and invoke it but it's very cumbersome</font>

460
00:16:59,940 --> 00:17:06,510
<font color="#CCCCCC">to read through</font><font color="#E5E5E5"> so what I didn't invoke</font>

461
00:17:02,520 --> 00:17:08,129
binder<font color="#CCCCCC"> rather than composing these</font>

462
00:17:06,510 --> 00:17:10,260
<font color="#E5E5E5">method handles in Reverse where you have</font>

463
00:17:08,130 --> 00:17:12,240
to grab a target method and then<font color="#E5E5E5"> you</font>

464
00:17:10,260 --> 00:17:14,910
wrap adaptations around it step by<font color="#E5E5E5"> step</font>

465
00:17:12,240 --> 00:17:16,800
<font color="#CCCCCC">by step you can start at the</font><font color="#E5E5E5"> top and say</font>

466
00:17:14,910 --> 00:17:18,750
I want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make a method handle that</font>

467
00:17:16,800 --> 00:17:20,780
<font color="#E5E5E5">takes some arguments in and returns this</font>

468
00:17:18,750 --> 00:17:22,890
result<font color="#E5E5E5"> first thing I want it to do is</font>

469
00:17:20,780 --> 00:17:24,569
<font color="#E5E5E5">convert an argument second thing I</font>

470
00:17:22,890 --> 00:17:26,850
wanted<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do is call a method</font><font color="#CCCCCC"> third</font>

471
00:17:24,569 --> 00:17:29,129
thing I<font color="#E5E5E5"> want to do is assign to an array</font>

472
00:17:26,849 --> 00:17:30,449
<font color="#E5E5E5">so</font><font color="#CCCCCC"> we write it</font><font color="#E5E5E5"> going forward</font><font color="#CCCCCC"> rather than</font>

473
00:17:29,130 --> 00:17:33,690
backwards which is<font color="#CCCCCC"> the way the method</font>

474
00:17:30,450 --> 00:17:35,190
handle API<font color="#E5E5E5"> usually makes you do it</font><font color="#CCCCCC"> we</font>

475
00:17:33,690 --> 00:17:37,560
also the methanol idea is very

476
00:17:35,190 --> 00:17:39,540
<font color="#E5E5E5">repetitive</font><font color="#CCCCCC"> at each step</font><font color="#E5E5E5"> of the way you</font>

477
00:17:37,560 --> 00:17:41,460
need to<font color="#CCCCCC"> be telling it exactly</font><font color="#E5E5E5"> the types</font>

478
00:17:39,540 --> 00:17:43,950
<font color="#E5E5E5">that you</font><font color="#CCCCCC"> want to work with even if it's</font>

479
00:17:41,460 --> 00:17:46,560
should<font color="#E5E5E5"> be inferred from the previous</font>

480
00:17:43,950 --> 00:17:48,690
handles in a VOC binder you carry those

481
00:17:46,560 --> 00:17:51,120
types forward so it's always aware of

482
00:17:48,690 --> 00:17:53,280
<font color="#E5E5E5">what</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> current method type is what the</font>

483
00:17:51,120 --> 00:17:54,090
current argument types are and<font color="#E5E5E5"> actually</font>

484
00:17:53,280 --> 00:17:55,950
there's some<font color="#E5E5E5"> more advanced</font>

485
00:17:54,090 --> 00:17:57,510
features that<font color="#E5E5E5"> lets you use named</font>

486
00:17:55,950 --> 00:18:01,140
<font color="#E5E5E5">arguments and work with them directly</font>

487
00:17:57,510 --> 00:18:03,450
<font color="#E5E5E5">that way</font><font color="#CCCCCC"> so let's look</font><font color="#E5E5E5"> at how</font><font color="#CCCCCC"> that</font>

488
00:18:01,140 --> 00:18:04,950
actually<font color="#E5E5E5"> looks at and as an example so</font>

489
00:18:03,450 --> 00:18:07,110
here is<font color="#E5E5E5"> our example again</font><font color="#CCCCCC"> from just</font>

490
00:18:04,950 --> 00:18:10,039
using<font color="#CCCCCC"> the plane method handle API</font><font color="#E5E5E5"> that</font>

491
00:18:07,110 --> 00:18:12,240
turns into this with<font color="#CCCCCC"> VOC binder</font>

492
00:18:10,039 --> 00:18:15,570
<font color="#E5E5E5">significantly better to read and we can</font>

493
00:18:12,240 --> 00:18:16,770
actually<font color="#E5E5E5"> just</font><font color="#CCCCCC"> walk through</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> so up</font><font color="#E5E5E5"> here</font>

494
00:18:15,570 --> 00:18:18,240
we're<font color="#E5E5E5"> going to start we know that this</font>

495
00:18:16,770 --> 00:18:20,340
is going<font color="#E5E5E5"> to take a string array that's</font>

496
00:18:18,240 --> 00:18:22,549
<font color="#E5E5E5">our arguments and we have our void</font>

497
00:18:20,340 --> 00:18:25,260
<font color="#CCCCCC">return we don't care about</font><font color="#E5E5E5"> that</font>

498
00:18:22,549 --> 00:18:28,639
continuing on<font color="#E5E5E5"> we're going to</font><font color="#CCCCCC"> filter that</font>

499
00:18:25,260 --> 00:18:31,230
<font color="#E5E5E5">that array</font><font color="#CCCCCC"> by getting the 0 argument and</font>

500
00:18:28,640 --> 00:18:34,169
pulling it out now we're going to again

501
00:18:31,230 --> 00:18:36,960
filter that string and prepend<font color="#E5E5E5"> hello</font>

502
00:18:34,169 --> 00:18:39,510
<font color="#CCCCCC">onto it and concatenate that we're going</font>

503
00:18:36,960 --> 00:18:42,899
<font color="#E5E5E5">to fold in</font><font color="#CCCCCC"> the print stream which we get</font>

504
00:18:39,510 --> 00:18:45,270
from a static access of system out<font color="#E5E5E5"> and</font>

505
00:18:42,899 --> 00:18:47,908
<font color="#CCCCCC">then we're</font><font color="#E5E5E5"> going to call print line and</font>

506
00:18:45,270 --> 00:18:49,980
the whole thing becomes<font color="#E5E5E5"> one handle one</font>

507
00:18:47,909 --> 00:18:51,690
tree one expression<font color="#CCCCCC"> that we can call and</font>

508
00:18:49,980 --> 00:18:54,659
<font color="#CCCCCC">pass around</font><font color="#E5E5E5"> and it does all of this</font>

509
00:18:51,690 --> 00:18:56,070
logic<font color="#CCCCCC"> in one</font><font color="#E5E5E5"> little box so that's much</font>

510
00:18:54,659 --> 00:18:58,350
<font color="#E5E5E5">more advanced than what we can do with</font>

511
00:18:56,070 --> 00:18:59,668
<font color="#E5E5E5">with a reflection and invoke binder</font>

512
00:18:58,350 --> 00:19:02,820
makes it considerably<font color="#CCCCCC"> easier to read</font>

513
00:18:59,669 --> 00:19:06,809
through that<font color="#CCCCCC"> ok so I said we're gonna</font>

514
00:19:02,820 --> 00:19:09,510
try and do<font color="#E5E5E5"> something crazy with</font><font color="#CCCCCC"> this one</font>

515
00:19:06,809 --> 00:19:11,428
so<font color="#E5E5E5"> now that we have loops as part of the</font>

516
00:19:09,510 --> 00:19:14,730
method handle API<font color="#E5E5E5"> we've essentially</font>

517
00:19:11,429 --> 00:19:18,390
created<font color="#E5E5E5"> a</font><font color="#CCCCCC"> Turing complete set of IR</font>

518
00:19:14,730 --> 00:19:20,640
right we can we can modify<font color="#E5E5E5"> state we can</font>

519
00:19:18,390 --> 00:19:22,919
call<font color="#E5E5E5"> functions we can have conditions we</font>

520
00:19:20,640 --> 00:19:24,840
can<font color="#E5E5E5"> do loops we can represent a language</font>

521
00:19:22,919 --> 00:19:26,730
we can<font color="#CCCCCC"> actually compile a language into</font>

522
00:19:24,840 --> 00:19:30,389
method handles if we like and so that's

523
00:19:26,730 --> 00:19:32,399
what I<font color="#CCCCCC"> decided to</font><font color="#E5E5E5"> try to do</font><font color="#CCCCCC"> I wrote a</font>

524
00:19:30,390 --> 00:19:34,649
little compiler that<font color="#E5E5E5"> basically takes J</font>

525
00:19:32,399 --> 00:19:36,539
Ruby's abstract syntax tree<font color="#CCCCCC"> and then</font>

526
00:19:34,649 --> 00:19:40,049
just walks down like a standard visitor

527
00:19:36,539 --> 00:19:41,730
<font color="#E5E5E5">for</font><font color="#CCCCCC"> each syntactic element I compose the</font>

528
00:19:40,049 --> 00:19:43,649
right set of handles that<font color="#E5E5E5"> would</font>

529
00:19:41,730 --> 00:19:46,260
represent<font color="#E5E5E5"> that particular part of the</font>

530
00:19:43,649 --> 00:19:48,178
part<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the code and then it all</font><font color="#CCCCCC"> just</font>

531
00:19:46,260 --> 00:19:49,440
composes back out and<font color="#E5E5E5"> you get a method</font>

532
00:19:48,179 --> 00:19:52,919
handle that basically<font color="#E5E5E5"> represents</font><font color="#CCCCCC"> the</font>

533
00:19:49,440 --> 00:19:55,409
script<font color="#CCCCCC"> top-level part not terribly</font>

534
00:19:52,919 --> 00:19:57,090
interesting to look<font color="#E5E5E5"> at a few things to</font>

535
00:19:55,409 --> 00:19:58,409
note<font color="#E5E5E5"> I added this little loop thing</font>

536
00:19:57,090 --> 00:20:00,480
because I<font color="#E5E5E5"> wanted to test that it</font><font color="#CCCCCC"> was</font>

537
00:19:58,409 --> 00:20:02,899
compiling and<font color="#E5E5E5"> ginning and</font><font color="#CCCCCC"> optimizing</font>

538
00:20:00,480 --> 00:20:02,899
correctly

539
00:20:03,460 --> 00:20:08,860
yes not much more<font color="#E5E5E5"> that's interesting</font>

540
00:20:05,170 --> 00:20:10,450
here so let's continue on<font color="#E5E5E5"> like I said</font>

541
00:20:08,860 --> 00:20:13,360
it's a standard visitor so we have our

542
00:20:10,450 --> 00:20:16,090
node<font color="#E5E5E5"> and then we walk down the node tree</font>

543
00:20:13,360 --> 00:20:18,370
each node calls<font color="#CCCCCC"> except on our compiler</font>

544
00:20:16,090 --> 00:20:20,679
and then we get back<font color="#CCCCCC"> into our</font><font color="#E5E5E5"> logic</font>

545
00:20:18,370 --> 00:20:23,679
here's a<font color="#E5E5E5"> couple simple</font><font color="#CCCCCC"> cases two</font>

546
00:20:20,680 --> 00:20:25,240
<font color="#CCCCCC">constants</font><font color="#E5E5E5"> types false and true</font><font color="#CCCCCC"> and in</font>

547
00:20:23,680 --> 00:20:28,870
this case I'm<font color="#CCCCCC"> just using the objects</font>

548
00:20:25,240 --> 00:20:32,800
false and true from boolean<font color="#E5E5E5"> and the</font>

549
00:20:28,870 --> 00:20:34,540
<font color="#E5E5E5">logic here we have our our state for</font>

550
00:20:32,800 --> 00:20:36,070
this script<font color="#E5E5E5"> that's being passed in we</font>

551
00:20:34,540 --> 00:20:37,899
have some<font color="#E5E5E5"> return value from</font><font color="#CCCCCC"> the script</font>

552
00:20:36,070 --> 00:20:39,879
<font color="#E5E5E5">we don't care</font><font color="#CCCCCC"> about the state</font><font color="#E5E5E5"> this is a</font>

553
00:20:37,900 --> 00:20:42,430
constant<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we stick our</font><font color="#E5E5E5"> boolean false</font>

554
00:20:39,880 --> 00:20:43,870
<font color="#E5E5E5">and the same thing with true here let's</font>

555
00:20:42,430 --> 00:20:46,780
<font color="#CCCCCC">look at something</font><font color="#E5E5E5"> else we got fixed</font>

556
00:20:43,870 --> 00:20:50,500
number so here is our<font color="#E5E5E5"> fixed num which is</font>

557
00:20:46,780 --> 00:20:52,210
in Ruby just<font color="#CCCCCC"> a long essentially</font><font color="#E5E5E5"> and I'm</font>

558
00:20:50,500 --> 00:20:54,280
<font color="#E5E5E5">using box Long's for this example just</font>

559
00:20:52,210 --> 00:20:56,260
<font color="#CCCCCC">to</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> it simpler but again we don't</font>

560
00:20:54,280 --> 00:20:58,710
care<font color="#CCCCCC"> about the state for the script</font><font color="#E5E5E5"> so</font>

561
00:20:56,260 --> 00:21:01,600
<font color="#E5E5E5">we drop</font><font color="#CCCCCC"> that and we return a constant</font>

562
00:20:58,710 --> 00:21:03,250
what about<font color="#E5E5E5"> local variables</font><font color="#CCCCCC"> well so</font><font color="#E5E5E5"> I</font>

563
00:21:01,600 --> 00:21:05,379
<font color="#E5E5E5">said that we've got our state array</font>

564
00:21:03,250 --> 00:21:07,810
that's<font color="#E5E5E5"> basically holding all</font><font color="#CCCCCC"> of our</font>

565
00:21:05,380 --> 00:21:10,720
local variables so to get a local

566
00:21:07,810 --> 00:21:12,850
variable<font color="#E5E5E5"> out of</font><font color="#CCCCCC"> our our script</font><font color="#E5E5E5"> state we</font>

567
00:21:10,720 --> 00:21:15,730
<font color="#E5E5E5">just provide the index and do an array</font>

568
00:21:12,850 --> 00:21:18,639
get similarly<font color="#E5E5E5"> down</font><font color="#CCCCCC"> here we have</font><font color="#E5E5E5"> our</font>

569
00:21:15,730 --> 00:21:19,960
state for the script<font color="#CCCCCC"> we're going to do a</font>

570
00:21:18,640 --> 00:21:22,450
little<font color="#E5E5E5"> bit more complicated logic</font>

571
00:21:19,960 --> 00:21:24,700
<font color="#E5E5E5">because these set into an array doesn't</font>

572
00:21:22,450 --> 00:21:27,070
return a value so we're going to<font color="#CCCCCC"> capture</font>

573
00:21:24,700 --> 00:21:29,560
this the value we<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to set put it</font>

574
00:21:27,070 --> 00:21:31,210
into the array<font color="#E5E5E5"> and also return it and I</font>

575
00:21:29,560 --> 00:21:33,730
<font color="#E5E5E5">won't walk through all the logic</font><font color="#CCCCCC"> here</font>

576
00:21:31,210 --> 00:21:35,890
but<font color="#E5E5E5"> basically the same thing as</font><font color="#CCCCCC"> doing an</font>

577
00:21:33,730 --> 00:21:39,430
array set and assigning<font color="#E5E5E5"> it</font><font color="#CCCCCC"> to one of the</font>

578
00:21:35,890 --> 00:21:43,570
elements in<font color="#E5E5E5"> our script here is there an</font>

579
00:21:39,430 --> 00:21:44,860
if not much to say pretty easy<font color="#CCCCCC"> the</font><font color="#E5E5E5"> only</font>

580
00:21:43,570 --> 00:21:47,020
thing that's a<font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit different</font>

581
00:21:44,860 --> 00:21:49,780
there<font color="#E5E5E5"> the condition needs to return</font><font color="#CCCCCC"> a</font>

582
00:21:47,020 --> 00:21:52,450
boolean and so<font color="#E5E5E5"> whatever the result of</font>

583
00:21:49,780 --> 00:21:54,850
that sub expression is we run some sort

584
00:21:52,450 --> 00:21:56,260
<font color="#E5E5E5">of truth a check on it and</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> case</font>

585
00:21:54,850 --> 00:21:59,740
<font color="#E5E5E5">of Ruby that</font><font color="#CCCCCC"> would be anything that's</font>

586
00:21:56,260 --> 00:22:01,240
not nil or false<font color="#E5E5E5"> is considered true</font><font color="#CCCCCC"> in</font>

587
00:21:59,740 --> 00:22:02,950
the case<font color="#E5E5E5"> of this script I did something</font>

588
00:22:01,240 --> 00:22:04,810
<font color="#E5E5E5">similar and then we can put our</font>

589
00:22:02,950 --> 00:22:07,660
condition<font color="#CCCCCC"> our then in our else so we've</font>

590
00:22:04,810 --> 00:22:10,720
represented<font color="#E5E5E5"> an if expression from Ruby</font>

591
00:22:07,660 --> 00:22:12,760
<font color="#CCCCCC">in</font><font color="#E5E5E5"> method handles and then of course</font><font color="#CCCCCC"> we</font>

592
00:22:10,720 --> 00:22:15,310
have while loops<font color="#E5E5E5"> finally</font>

593
00:22:12,760 --> 00:22:17,050
so we compile our condition again<font color="#E5E5E5"> we</font>

594
00:22:15,310 --> 00:22:18,309
compile our body

595
00:22:17,050 --> 00:22:21,370
we're checking to see whether this<font color="#CCCCCC"> is a</font>

596
00:22:18,309 --> 00:22:24,639
while<font color="#CCCCCC"> loop or</font><font color="#E5E5E5"> a do-while loop and then</font>

597
00:22:21,370 --> 00:22:27,659
we take our script<font color="#CCCCCC"> state</font><font color="#E5E5E5"> we invoke our</font>

598
00:22:24,640 --> 00:22:31,270
filtered predicate our<font color="#E5E5E5"> filter condition</font>

599
00:22:27,660 --> 00:22:34,120
<font color="#E5E5E5">we have our body which just runs the</font>

600
00:22:31,270 --> 00:22:35,790
<font color="#E5E5E5">code that's in the body and then we can</font>

601
00:22:34,120 --> 00:22:38,620
create<font color="#CCCCCC"> our</font><font color="#E5E5E5"> two different while loops</font>

602
00:22:35,790 --> 00:22:39,909
<font color="#E5E5E5">okay of course there's obviously a lot</font>

603
00:22:38,620 --> 00:22:42,340
<font color="#CCCCCC">of</font><font color="#E5E5E5"> other different</font><font color="#CCCCCC"> types of expressions</font>

604
00:22:39,910 --> 00:22:45,280
in Ruby<font color="#CCCCCC"> but here now we're at the root</font>

605
00:22:42,340 --> 00:22:46,928
this is<font color="#E5E5E5"> at the top</font><font color="#CCCCCC"> of the script so of</font>

606
00:22:45,280 --> 00:22:49,210
<font color="#CCCCCC">course we just compile the whole body</font>

607
00:22:46,929 --> 00:22:51,850
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> where we get how many local</font>

608
00:22:49,210 --> 00:22:53,380
<font color="#E5E5E5">variables we want to have and we throw</font>

609
00:22:51,850 --> 00:22:55,510
an array construct in here<font color="#E5E5E5"> so we</font>

610
00:22:53,380 --> 00:22:57,309
construct our array of local<font color="#CCCCCC"> variables</font>

611
00:22:55,510 --> 00:22:58,960
<font color="#E5E5E5">and then that gets passed down through</font>

612
00:22:57,309 --> 00:23:01,410
the<font color="#CCCCCC"> method handles all the way</font><font color="#E5E5E5"> into the</font>

613
00:22:58,960 --> 00:23:03,640
rest<font color="#E5E5E5"> of the script so does all this work</font>

614
00:23:01,410 --> 00:23:06,730
<font color="#E5E5E5">well I wouldn't be here if</font><font color="#CCCCCC"> it didn't</font>

615
00:23:03,640 --> 00:23:08,530
<font color="#E5E5E5">work</font><font color="#CCCCCC"> of course it works here is our ast</font>

616
00:23:06,730 --> 00:23:11,080
we've run a<font color="#E5E5E5"> simple loop that</font><font color="#CCCCCC"> just</font>

617
00:23:08,530 --> 00:23:12,850
iterates a value<font color="#E5E5E5"> and then I've set it up</font>

618
00:23:11,080 --> 00:23:15,040
<font color="#E5E5E5">so that whatever the last value is of</font>

619
00:23:12,850 --> 00:23:17,050
the<font color="#E5E5E5"> script will</font><font color="#CCCCCC"> be printed</font><font color="#E5E5E5"> out and there</font>

620
00:23:15,040 --> 00:23:18,520
we go there's our result<font color="#E5E5E5"> but does it</font>

621
00:23:17,050 --> 00:23:19,870
work<font color="#E5E5E5"> well of</font><font color="#CCCCCC"> course we could</font><font color="#E5E5E5"> have</font>

622
00:23:18,520 --> 00:23:21,970
written<font color="#E5E5E5"> an interpreter in just regular</font>

623
00:23:19,870 --> 00:23:25,540
<font color="#CCCCCC">Java code that would</font><font color="#E5E5E5"> not be interesting</font>

624
00:23:21,970 --> 00:23:27,010
for<font color="#E5E5E5"> this does it actually optimize does</font>

625
00:23:25,540 --> 00:23:29,830
it actually<font color="#E5E5E5"> compile like we want it to</font>

626
00:23:27,010 --> 00:23:33,550
and I'm thrilled to<font color="#E5E5E5"> say that it actually</font>

627
00:23:29,830 --> 00:23:36,669
<font color="#E5E5E5">does this is assembly code that has now</font>

628
00:23:33,550 --> 00:23:38,830
been generated from our compiler<font color="#CCCCCC"> but</font><font color="#E5E5E5"> we</font>

629
00:23:36,670 --> 00:23:40,809
have not generated<font color="#CCCCCC"> any</font><font color="#E5E5E5"> bytecode we have</font>

630
00:23:38,830 --> 00:23:42,939
not loaded any<font color="#CCCCCC"> Java classes all we've</font>

631
00:23:40,809 --> 00:23:47,340
done is built up a method<font color="#E5E5E5"> handle tree</font>

632
00:23:42,940 --> 00:23:47,340
and executed it that's<font color="#E5E5E5"> pretty cool</font>

633
00:23:51,830 --> 00:23:56,159
<font color="#CCCCCC">alright so now a little</font><font color="#E5E5E5"> bit more about</font>

634
00:23:54,060 --> 00:23:58,350
<font color="#E5E5E5">results here</font><font color="#CCCCCC"> the compiled code this</font>

635
00:23:56,160 --> 00:24:00,300
compiled method handle tree<font color="#CCCCCC"> actually</font>

636
00:23:58,350 --> 00:24:02,100
does end<font color="#E5E5E5"> up turning into one piece of</font>

637
00:24:00,300 --> 00:24:04,050
native code<font color="#E5E5E5"> and that's great</font><font color="#CCCCCC"> that's what</font>

638
00:24:02,100 --> 00:24:08,189
we were<font color="#CCCCCC"> looking for it takes a while</font><font color="#E5E5E5"> to</font>

639
00:24:04,050 --> 00:24:10,379
<font color="#E5E5E5">get there</font><font color="#CCCCCC"> normally like the c2 threshold</font>

640
00:24:08,190 --> 00:24:12,810
for doing the the<font color="#E5E5E5"> optimized compile is</font>

641
00:24:10,380 --> 00:24:14,160
<font color="#CCCCCC">10,000 iterations I had to run this for</font>

642
00:24:12,810 --> 00:24:15,840
at<font color="#CCCCCC"> least a hundred thousand to get</font><font color="#E5E5E5"> the</font>

643
00:24:14,160 --> 00:24:18,050
stuff to<font color="#E5E5E5"> come out there's a lot of other</font>

644
00:24:15,840 --> 00:24:20,699
plumbing<font color="#E5E5E5"> in the method handle API that</font>

645
00:24:18,050 --> 00:24:24,690
gets in the<font color="#E5E5E5"> way of</font><font color="#CCCCCC"> the JIT</font><font color="#E5E5E5"> but it does</font>

646
00:24:20,700 --> 00:24:26,940
<font color="#E5E5E5">eventually get there</font><font color="#CCCCCC"> it may be a toy</font><font color="#E5E5E5"> but</font>

647
00:24:24,690 --> 00:24:28,350
it's kind of an<font color="#CCCCCC"> interesting toy couldn't</font>

648
00:24:26,940 --> 00:24:30,390
we do<font color="#CCCCCC"> something more practical with this</font>

649
00:24:28,350 --> 00:24:33,149
and now<font color="#E5E5E5"> this is going to be the the to</font>

650
00:24:30,390 --> 00:24:35,970
be determined sort of thing<font color="#CCCCCC"> what about</font>

651
00:24:33,150 --> 00:24:36,390
<font color="#CCCCCC">the streams API</font><font color="#E5E5E5"> so the streams API and</font>

652
00:24:35,970 --> 00:24:38,220
Java

653
00:24:36,390 --> 00:24:41,190
you've got you know a<font color="#CCCCCC"> collector a map</font>

654
00:24:38,220 --> 00:24:43,530
utility functions that you call you pass

655
00:24:41,190 --> 00:24:45,480
in a function and<font color="#E5E5E5"> you know the map will</font>

656
00:24:43,530 --> 00:24:47,600
call<font color="#E5E5E5"> your little lambda for each element</font>

657
00:24:45,480 --> 00:24:50,580
<font color="#CCCCCC">and replace the results in the list</font>

658
00:24:47,600 --> 00:24:53,639
<font color="#CCCCCC">unfortunately everybody</font><font color="#E5E5E5"> in the world is</font>

659
00:24:50,580 --> 00:24:55,740
<font color="#E5E5E5">calling into that same map function the</font>

660
00:24:53,640 --> 00:24:58,590
JVM has no way<font color="#E5E5E5"> to see through and</font>

661
00:24:55,740 --> 00:25:00,840
<font color="#E5E5E5">optimize</font><font color="#CCCCCC"> your map versus</font><font color="#E5E5E5"> somebody else</font>

662
00:24:58,590 --> 00:25:03,030
is mad so none of<font color="#E5E5E5"> it in lines none of it</font>

663
00:25:00,840 --> 00:25:04,530
optimizes the<font color="#E5E5E5"> right way well what if we</font>

664
00:25:03,030 --> 00:25:06,990
implemented<font color="#E5E5E5"> streams</font><font color="#CCCCCC"> as handles I</font>

665
00:25:04,530 --> 00:25:09,180
basically<font color="#CCCCCC"> just did that here is not</font>

666
00:25:06,990 --> 00:25:12,440
difficult<font color="#E5E5E5"> to do we can</font><font color="#CCCCCC"> take every</font><font color="#E5E5E5"> single</font>

667
00:25:09,180 --> 00:25:14,820
operation<font color="#E5E5E5"> that is you know too generic</font>

668
00:25:12,440 --> 00:25:17,790
<font color="#CCCCCC">too</font><font color="#E5E5E5"> difficult to specialize in</font><font color="#CCCCCC"> the</font>

669
00:25:14,820 --> 00:25:20,040
streams API<font color="#CCCCCC"> turn them into a tree of</font>

670
00:25:17,790 --> 00:25:22,230
handles<font color="#E5E5E5"> and then each place</font><font color="#CCCCCC"> we call it</font>

671
00:25:20,040 --> 00:25:25,230
it will<font color="#CCCCCC"> inline specialized into our</font>

672
00:25:22,230 --> 00:25:26,970
local piece of code and have the target

673
00:25:25,230 --> 00:25:29,040
function that lambda<font color="#E5E5E5"> that we want in</font>

674
00:25:26,970 --> 00:25:30,690
line all the way<font color="#E5E5E5"> back and that's what</font>

675
00:25:29,040 --> 00:25:35,190
<font color="#E5E5E5">I'm gonna start</font><font color="#CCCCCC"> playing with after I'm</font>

676
00:25:30,690 --> 00:25:37,520
done with this talk<font color="#CCCCCC"> so anybody want</font><font color="#E5E5E5"> play</font>

677
00:25:35,190 --> 00:25:40,290
with this<font color="#E5E5E5"> invoke binder is out there</font>

678
00:25:37,520 --> 00:25:42,780
<font color="#CCCCCC">it's hideous</font><font color="#E5E5E5"> invoke binder on my account</font>

679
00:25:40,290 --> 00:25:45,210
<font color="#E5E5E5">you'll be able to see all this online</font><font color="#CCCCCC"> on</font>

680
00:25:42,780 --> 00:25:46,530
<font color="#E5E5E5">the slides and if any was interested in</font>

681
00:25:45,210 --> 00:25:49,200
playing<font color="#CCCCCC"> around with the streams thing</font>

682
00:25:46,530 --> 00:25:50,280
<font color="#E5E5E5">you know send me an email let me know I</font>

683
00:25:49,200 --> 00:25:51,330
<font color="#E5E5E5">think there's a lot more</font><font color="#CCCCCC"> we could be</font>

684
00:25:50,280 --> 00:25:53,220
<font color="#CCCCCC">doing with method handles than we're</font>

685
00:25:51,330 --> 00:26:03,949
<font color="#CCCCCC">doing</font><font color="#E5E5E5"> today thank you</font>

686
00:25:53,220 --> 00:26:03,950
[Applause]

687
00:26:08,000 --> 00:26:10,060
<font color="#E5E5E5">you</font>

