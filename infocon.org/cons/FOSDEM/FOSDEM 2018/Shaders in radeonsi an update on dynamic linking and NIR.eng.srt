1
00:00:07,069 --> 00:00:13,349
<font color="#CCCCCC">alright we're already way over</font><font color="#E5E5E5"> time but</font>

2
00:00:10,469 --> 00:00:15,088
but you know it's always<font color="#E5E5E5"> better</font><font color="#CCCCCC"> if</font>

3
00:00:13,349 --> 00:00:16,920
there's if there's<font color="#E5E5E5"> interest in questions</font>

4
00:00:15,089 --> 00:00:19,169
<font color="#E5E5E5">you know it's happy to answer them</font>

5
00:00:16,920 --> 00:00:21,450
<font color="#E5E5E5">alright so this is a much more kind</font><font color="#CCCCCC"> of</font>

6
00:00:19,169 --> 00:00:23,160
technical talk about how we<font color="#E5E5E5"> are</font>

7
00:00:21,450 --> 00:00:25,738
compiling shaders<font color="#CCCCCC"> in radio and si</font><font color="#E5E5E5"> which</font>

8
00:00:23,160 --> 00:00:28,349
is effectively our OpenGL driver in Mesa

9
00:00:25,739 --> 00:00:30,360
<font color="#E5E5E5">and I want to touch on two topics the</font>

10
00:00:28,349 --> 00:00:33,450
first<font color="#CCCCCC"> one is is nearer and the other one</font>

11
00:00:30,360 --> 00:00:36,600
is something<font color="#E5E5E5"> dynamic linking which I'll</font>

12
00:00:33,450 --> 00:00:38,219
explain<font color="#E5E5E5"> so now those of you who were</font>

13
00:00:36,600 --> 00:00:39,809
here<font color="#E5E5E5"> in the morning maybe saw</font>

14
00:00:38,219 --> 00:00:43,640
<font color="#CCCCCC">Alejandro's talk about sphere v you've</font>

15
00:00:39,809 --> 00:00:46,498
heard the term<font color="#CCCCCC"> here's an overview on</font>

16
00:00:43,640 --> 00:00:48,839
<font color="#E5E5E5">well the colors are really off here</font><font color="#CCCCCC"> for</font>

17
00:00:46,499 --> 00:00:53,129
some reason<font color="#CCCCCC"> but</font><font color="#E5E5E5"> okay here's an</font><font color="#CCCCCC"> overview</font>

18
00:00:48,839 --> 00:00:54,899
<font color="#CCCCCC">of how shaders are compiled in our</font>

19
00:00:53,129 --> 00:00:56,760
<font color="#E5E5E5">various open source</font><font color="#CCCCCC"> drivers and I think</font>

20
00:00:54,899 --> 00:00:58,829
it's worth trying<font color="#CCCCCC"> to follow that</font><font color="#E5E5E5"> diagram</font>

21
00:00:56,760 --> 00:01:01,050
properly and this is kind of today's

22
00:00:58,829 --> 00:01:04,650
<font color="#E5E5E5">default</font><font color="#CCCCCC"> so on the leftmost path you</font>

23
00:01:01,050 --> 00:01:06,960
start with<font color="#CCCCCC"> GLSL it's translated into</font>

24
00:01:04,650 --> 00:01:09,150
this message<font color="#CCCCCC"> els Li our intermediate</font>

25
00:01:06,960 --> 00:01:11,250
<font color="#E5E5E5">representation this is code shared</font>

26
00:01:09,150 --> 00:01:13,200
between<font color="#E5E5E5"> all Mesa drivers then it gets</font>

27
00:01:11,250 --> 00:01:15,690
translated into something<font color="#E5E5E5"> called TGS I</font>

28
00:01:13,200 --> 00:01:18,810
which is<font color="#CCCCCC"> a gallium specific for those</font>

29
00:01:15,690 --> 00:01:21,300
who know<font color="#CCCCCC"> about gallium translation and</font>

30
00:01:18,810 --> 00:01:23,430
then<font color="#E5E5E5"> within the Radian</font><font color="#CCCCCC"> Si driver this</font>

31
00:01:21,300 --> 00:01:27,780
<font color="#CCCCCC">TJ's I gets translated into LLVM</font>

32
00:01:23,430 --> 00:01:29,700
intermediate representation<font color="#CCCCCC"> some of that</font>

33
00:01:27,780 --> 00:01:32,340
is shared with<font color="#CCCCCC"> LLVM pipe but in the end</font>

34
00:01:29,700 --> 00:01:34,590
the<font color="#CCCCCC"> IR looks quite different and then</font>

35
00:01:32,340 --> 00:01:36,600
<font color="#E5E5E5">this is passed to</font><font color="#CCCCCC"> LLVM which you know</font>

36
00:01:34,590 --> 00:01:38,700
does the<font color="#CCCCCC"> back end compile and generates</font>

37
00:01:36,600 --> 00:01:42,119
<font color="#E5E5E5">the actual binary that is then uploaded</font>

38
00:01:38,700 --> 00:01:43,500
onto<font color="#E5E5E5"> the GPU now to go a little bit</font>

39
00:01:42,120 --> 00:01:46,110
further to<font color="#CCCCCC"> the right if you're running</font>

40
00:01:43,500 --> 00:01:50,520
<font color="#CCCCCC">Vulcan with rad</font><font color="#E5E5E5"> V you will start with</font>

41
00:01:46,110 --> 00:01:52,890
<font color="#E5E5E5">spear V you will take this middle arrow</font>

42
00:01:50,520 --> 00:01:55,050
<font color="#CCCCCC">too near this is the translation that</font>

43
00:01:52,890 --> 00:01:56,580
was first introduced<font color="#CCCCCC"> with</font><font color="#E5E5E5"> Intel's Vulcan</font>

44
00:01:55,050 --> 00:01:59,160
driver and which is now also used<font color="#E5E5E5"> by</font>

45
00:01:56,580 --> 00:02:02,009
<font color="#CCCCCC">Radley then the</font><font color="#E5E5E5"> near gets translated</font>

46
00:01:59,160 --> 00:02:03,810
into<font color="#CCCCCC"> LLVM</font><font color="#E5E5E5"> IR that looks like the</font><font color="#CCCCCC"> LOD Mir</font>

47
00:02:02,010 --> 00:02:06,660
that<font color="#E5E5E5"> radio</font><font color="#CCCCCC"> nasai produces and gets</font>

48
00:02:03,810 --> 00:02:08,759
translated into<font color="#E5E5E5"> binary on the rightmost</font>

49
00:02:06,660 --> 00:02:11,519
side if you're running Vulcan with<font color="#E5E5E5"> a m--</font>

50
00:02:08,758 --> 00:02:13,108
DS official driver then the<font color="#E5E5E5"> spear</font><font color="#CCCCCC"> v gets</font>

51
00:02:11,519 --> 00:02:16,049
translated directly into something that

52
00:02:13,109 --> 00:02:17,939
<font color="#CCCCCC">I like</font><font color="#E5E5E5"> to call</font><font color="#CCCCCC"> ll PCI are so</font><font color="#E5E5E5"> L OPC</font>

53
00:02:16,049 --> 00:02:18,360
stands for the LLVM pipeline compiler

54
00:02:17,939 --> 00:02:20,670
<font color="#CCCCCC">that the</font>

55
00:02:18,360 --> 00:02:24,540
driver has and it's really<font color="#E5E5E5"> it's really</font>

56
00:02:20,670 --> 00:02:26,369
<font color="#E5E5E5">just LOV Mir but certain</font><font color="#CCCCCC"> graphics</font>

57
00:02:24,540 --> 00:02:29,310
specific functions you know like buffer

58
00:02:26,370 --> 00:02:32,160
loads image sampling etc are expressed

59
00:02:29,310 --> 00:02:34,500
via<font color="#CCCCCC"> ll PC specific function calls</font><font color="#E5E5E5"> that</font>

60
00:02:32,160 --> 00:02:36,359
kind of act like intrinsics<font color="#E5E5E5"> they're not</font>

61
00:02:34,500 --> 00:02:38,910
really<font color="#E5E5E5"> lob em intrinsics but they kind</font>

62
00:02:36,360 --> 00:02:41,310
<font color="#E5E5E5">of acted like</font><font color="#CCCCCC"> act like this and then</font>

63
00:02:38,910 --> 00:02:43,980
still as part of<font color="#E5E5E5"> that driver that gets</font>

64
00:02:41,310 --> 00:02:45,660
lowered into a proper<font color="#CCCCCC"> LLVM ir that</font>

65
00:02:43,980 --> 00:02:46,769
doesn't have<font color="#E5E5E5"> these special intrinsic</font>

66
00:02:45,660 --> 00:02:48,870
anymore and gets translated into

67
00:02:46,770 --> 00:02:50,400
binaries so<font color="#CCCCCC"> you see that kind</font><font color="#E5E5E5"> of the</font>

68
00:02:48,870 --> 00:02:52,590
<font color="#CCCCCC">backend part is shared</font><font color="#E5E5E5"> between all the</font>

69
00:02:50,400 --> 00:02:55,320
drivers<font color="#E5E5E5"> but</font><font color="#CCCCCC"> the front-end</font><font color="#E5E5E5"> there's lots</font>

70
00:02:52,590 --> 00:02:56,910
of<font color="#E5E5E5"> different lots of different parts</font><font color="#CCCCCC"> and</font>

71
00:02:55,320 --> 00:02:59,640
kind of the the goal of transitioning to

72
00:02:56,910 --> 00:03:02,459
near is to have the picture<font color="#CCCCCC"> look like</font>

73
00:02:59,640 --> 00:03:04,589
this instead<font color="#E5E5E5"> so to have radian s</font><font color="#CCCCCC"> i take</font>

74
00:03:02,459 --> 00:03:07,470
the path of<font color="#CCCCCC"> going from jalisa</font>

75
00:03:04,590 --> 00:03:10,140
ir to<font color="#CCCCCC"> a nearer and then proceed like</font><font color="#E5E5E5"> the</font>

76
00:03:07,470 --> 00:03:12,209
radley driver does the<font color="#E5E5E5"> new</font><font color="#CCCCCC"> translation</font>

77
00:03:10,140 --> 00:03:15,029
is of course<font color="#E5E5E5"> already in place for for</font>

78
00:03:12,209 --> 00:03:21,570
<font color="#E5E5E5">intel's OpenGL driver and also various</font>

79
00:03:15,030 --> 00:03:23,940
<font color="#E5E5E5">gallium drivers use it right so have a</font>

80
00:03:21,570 --> 00:03:26,040
bit<font color="#E5E5E5"> of a more sharing what so why do we</font>

81
00:03:23,940 --> 00:03:27,840
do this<font color="#E5E5E5"> so one is you know reduce the</font>

82
00:03:26,040 --> 00:03:29,700
<font color="#CCCCCC">the code duplication another big reason</font>

83
00:03:27,840 --> 00:03:31,470
you kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> heard about in Alejandro's</font>

84
00:03:29,700 --> 00:03:33,750
talk this<font color="#E5E5E5"> morning</font><font color="#CCCCCC"> is to support the</font>

85
00:03:31,470 --> 00:03:35,609
security<font color="#E5E5E5"> features</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> OpenGL as well it's</font>

86
00:03:33,750 --> 00:03:39,330
just<font color="#E5E5E5"> the the</font><font color="#CCCCCC"> least resistance part to do</font>

87
00:03:35,610 --> 00:03:40,709
that<font color="#CCCCCC"> also some future features that we</font>

88
00:03:39,330 --> 00:03:42,060
want to<font color="#E5E5E5"> implement it's a bit more</font>

89
00:03:40,709 --> 00:03:43,739
convenient<font color="#E5E5E5"> to</font><font color="#CCCCCC"> represent them in</font><font color="#E5E5E5"> there</font>

90
00:03:42,060 --> 00:03:46,260
<font color="#CCCCCC">than</font><font color="#E5E5E5"> to add them</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the tedious</font><font color="#CCCCCC"> eye path</font>

91
00:03:43,739 --> 00:03:49,410
like half loads and 16-bit<font color="#E5E5E5"> integers</font>

92
00:03:46,260 --> 00:03:51,000
stuff like that also<font color="#CCCCCC"> near is actually a</font>

93
00:03:49,410 --> 00:03:53,519
representation that you<font color="#E5E5E5"> can use to do</font>

94
00:03:51,000 --> 00:03:56,370
code transforms on it so<font color="#E5E5E5"> teachers</font><font color="#CCCCCC"> eye is</font>

95
00:03:53,519 --> 00:03:58,320
really just a trans representation to

96
00:03:56,370 --> 00:04:02,100
you know kind of transfer shaders and

97
00:03:58,320 --> 00:04:04,709
<font color="#CCCCCC">you can't easily transform it with near</font>

98
00:04:02,100 --> 00:04:06,329
you can<font color="#E5E5E5"> do this which allows more</font>

99
00:04:04,709 --> 00:04:08,100
opportunities for controlling<font color="#E5E5E5"> how</font>

100
00:04:06,330 --> 00:04:10,650
optimizations are done in the shader

101
00:04:08,100 --> 00:04:14,880
<font color="#E5E5E5">back-end maybe some hardware specific</font>

102
00:04:10,650 --> 00:04:16,680
optimizations<font color="#CCCCCC"> that may become what I</font>

103
00:04:14,880 --> 00:04:20,850
mean by this<font color="#E5E5E5"> may become clear later on</font>

104
00:04:16,680 --> 00:04:22,260
in the talk so<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to talk much</font>

105
00:04:20,850 --> 00:04:24,300
<font color="#CCCCCC">about how this</font><font color="#E5E5E5"> transition is happening</font>

106
00:04:22,260 --> 00:04:26,550
<font color="#E5E5E5">is actually</font><font color="#CCCCCC"> very far along already</font><font color="#E5E5E5"> so</font>

107
00:04:24,300 --> 00:04:28,950
thanks to<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of hard</font><font color="#E5E5E5"> work by some</font>

108
00:04:26,550 --> 00:04:31,920
<font color="#E5E5E5">people it's very close to feature parity</font>

109
00:04:28,950 --> 00:04:34,080
with the<font color="#E5E5E5"> default</font><font color="#CCCCCC"> eg sigh path</font>

110
00:04:31,920 --> 00:04:36,060
we've seen<font color="#CCCCCC"> recently</font><font color="#E5E5E5"> that maybe the</font>

111
00:04:34,080 --> 00:04:38,099
performance isn't<font color="#E5E5E5"> up to par yet we need</font>

112
00:04:36,060 --> 00:04:40,800
to work on that but<font color="#E5E5E5"> we're quite far</font>

113
00:04:38,100 --> 00:04:44,040
along and if you have a recent<font color="#E5E5E5"> you know</font>

114
00:04:40,800 --> 00:04:46,080
<font color="#CCCCCC">Mesa master driver</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> test</font><font color="#E5E5E5"> it out</font>

115
00:04:44,040 --> 00:04:48,030
by<font color="#CCCCCC"> setting this environment variable</font>

116
00:04:46,080 --> 00:04:50,130
that<font color="#E5E5E5"> is mentioned there so definitely</font>

117
00:04:48,030 --> 00:04:52,890
<font color="#CCCCCC">kudos need to go out</font><font color="#E5E5E5"> to Dave and bass</font>

118
00:04:50,130 --> 00:04:56,780
who wrote the initial<font color="#CCCCCC"> translation from</font>

119
00:04:52,890 --> 00:04:59,250
near to<font color="#CCCCCC"> LVM as part of rad V and then</font>

120
00:04:56,780 --> 00:05:01,049
after I kind of did the initial<font color="#E5E5E5"> thing as</font>

121
00:04:59,250 --> 00:05:03,840
part<font color="#E5E5E5"> of my spirit experimentation</font>

122
00:05:01,050 --> 00:05:05,340
<font color="#E5E5E5">Timothy has done a lot</font><font color="#CCCCCC"> of work a lot a</font>

123
00:05:03,840 --> 00:05:08,270
<font color="#E5E5E5">lot of work to get us to close the</font>

124
00:05:05,340 --> 00:05:10,349
feature parity<font color="#E5E5E5"> Samuel has also done some</font>

125
00:05:08,270 --> 00:05:13,680
some<font color="#E5E5E5"> good work on the on the near</font>

126
00:05:10,350 --> 00:05:17,010
<font color="#CCCCCC">back-end</font><font color="#E5E5E5"> so thanks to all these</font><font color="#CCCCCC"> people</font>

127
00:05:13,680 --> 00:05:18,600
we're getting<font color="#CCCCCC"> very</font><font color="#E5E5E5"> close</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> one</font>

128
00:05:17,010 --> 00:05:21,240
<font color="#CCCCCC">question that</font><font color="#E5E5E5"> comes up in this context</font>

129
00:05:18,600 --> 00:05:24,270
<font color="#E5E5E5">is well what's what's the future of TGS</font>

130
00:05:21,240 --> 00:05:26,310
I going to be of this other old shader

131
00:05:24,270 --> 00:05:28,469
representation<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> think it's really</font>

132
00:05:26,310 --> 00:05:31,620
going to<font color="#E5E5E5"> go</font><font color="#CCCCCC"> away</font><font color="#E5E5E5"> very quickly because</font>

133
00:05:28,470 --> 00:05:35,130
there are various kind of niche places

134
00:05:31,620 --> 00:05:36,450
<font color="#E5E5E5">that generate</font><font color="#CCCCCC"> TGS I I</font><font color="#E5E5E5"> think there's some</font>

135
00:05:35,130 --> 00:05:38,250
in the multimedia<font color="#E5E5E5"> I'm actually not</font><font color="#CCCCCC"> sure</font>

136
00:05:36,450 --> 00:05:40,610
right<font color="#CCCCCC"> now there are some helper</font>

137
00:05:38,250 --> 00:05:43,260
libraries that generate TDI shaders

138
00:05:40,610 --> 00:05:46,500
<font color="#CCCCCC">there is the nine project you know that</font>

139
00:05:43,260 --> 00:05:49,020
the d3 d9 implementation for wine which

140
00:05:46,500 --> 00:05:51,780
which<font color="#CCCCCC"> is TJ's</font><font color="#E5E5E5"> I based and for all of</font>

141
00:05:49,020 --> 00:05:53,460
<font color="#E5E5E5">these I mean the first</font><font color="#CCCCCC"> thing that</font><font color="#E5E5E5"> we can</font>

142
00:05:51,780 --> 00:05:55,739
do is<font color="#E5E5E5"> just keep</font><font color="#CCCCCC"> the TJ's I back-end</font>

143
00:05:53,460 --> 00:05:57,120
around longer I mean that's perfectly

144
00:05:55,740 --> 00:05:58,860
fine<font color="#CCCCCC"> for now</font>

145
00:05:57,120 --> 00:06:00,330
the other part that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> might at some</font>

146
00:05:58,860 --> 00:06:02,310
point consider is to use this

147
00:06:00,330 --> 00:06:04,050
translation<font color="#E5E5E5"> of TJ's</font><font color="#CCCCCC"> eye too</font><font color="#E5E5E5"> near which</font>

148
00:06:02,310 --> 00:06:07,080
which already exists<font color="#E5E5E5"> and might help</font>

149
00:06:04,050 --> 00:06:09,210
their teachers<font color="#CCCCCC"> is</font><font color="#E5E5E5"> also currently</font><font color="#CCCCCC"> used as</font>

150
00:06:07,080 --> 00:06:11,789
a shader transport for virtualization

151
00:06:09,210 --> 00:06:15,419
drivers so both<font color="#CCCCCC"> VMware's</font><font color="#E5E5E5"> driver as well</font>

152
00:06:11,790 --> 00:06:17,190
<font color="#CCCCCC">as the virgil driver so i don't know</font>

153
00:06:15,420 --> 00:06:19,740
what their plans for<font color="#E5E5E5"> the future</font><font color="#CCCCCC"> are</font>

154
00:06:17,190 --> 00:06:22,260
there is now a binary<font color="#E5E5E5"> encoding of near</font>

155
00:06:19,740 --> 00:06:24,030
that<font color="#E5E5E5"> for the disk cache which should be</font>

156
00:06:22,260 --> 00:06:27,390
suitable<font color="#CCCCCC"> to kind of fill in that</font>

157
00:06:24,030 --> 00:06:30,659
function<font color="#E5E5E5"> of teachers iso they might want</font>

158
00:06:27,390 --> 00:06:32,550
to consider<font color="#E5E5E5"> migrating at one point as</font>

159
00:06:30,660 --> 00:06:33,960
well but<font color="#CCCCCC"> i</font><font color="#E5E5E5"> really have</font><font color="#CCCCCC"> no idea what</font>

160
00:06:32,550 --> 00:06:38,610
their plans are if they<font color="#CCCCCC"> have even</font>

161
00:06:33,960 --> 00:06:40,229
<font color="#CCCCCC">thought about that and yeah given the</font>

162
00:06:38,610 --> 00:06:42,000
lack of<font color="#E5E5E5"> time this was really everything</font>

163
00:06:40,230 --> 00:06:43,500
I wanted<font color="#E5E5E5"> to</font><font color="#CCCCCC"> say about the NIR part of my</font>

164
00:06:42,000 --> 00:06:45,750
talk<font color="#CCCCCC"> so if there are</font><font color="#E5E5E5"> questions about</font>

165
00:06:43,500 --> 00:06:52,410
<font color="#E5E5E5">that maybe and bringing</font><font color="#CCCCCC"> up already</font>

166
00:06:45,750 --> 00:06:54,990
otherwise I would just<font color="#CCCCCC"> continue okay so</font>

167
00:06:52,410 --> 00:06:56,880
the second part<font color="#CCCCCC"> you know I wanted to</font>

168
00:06:54,990 --> 00:07:00,150
<font color="#CCCCCC">talk</font><font color="#E5E5E5"> about concerns of with dynamically</font>

169
00:06:56,880 --> 00:07:03,450
linking shaders so what do I mean<font color="#CCCCCC"> by</font>

170
00:07:00,150 --> 00:07:05,370
that<font color="#E5E5E5"> and</font><font color="#CCCCCC"> why do</font><font color="#E5E5E5"> we want it or why could</font>

171
00:07:03,450 --> 00:07:08,640
it<font color="#E5E5E5"> be useful</font><font color="#CCCCCC"> and this is really an</font>

172
00:07:05,370 --> 00:07:11,340
aspirational<font color="#CCCCCC"> talk where there isn't</font><font color="#E5E5E5"> code</font>

173
00:07:08,640 --> 00:07:16,680
<font color="#CCCCCC">written yet it's kind of</font><font color="#E5E5E5"> a goal to talk</font>

174
00:07:11,340 --> 00:07:18,090
about and get feedback<font color="#E5E5E5"> for so</font><font color="#CCCCCC"> LVM</font><font color="#E5E5E5"> what</font>

175
00:07:16,680 --> 00:07:20,550
it gives<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the driver is a</font>

176
00:07:18,090 --> 00:07:23,609
standard elf<font color="#E5E5E5"> object that</font><font color="#CCCCCC"> contains the</font>

177
00:07:20,550 --> 00:07:26,460
shader binary<font color="#E5E5E5"> and it contains some GPU</font>

178
00:07:23,610 --> 00:07:28,500
specific data sections<font color="#E5E5E5"> but mostly it's</font>

179
00:07:26,460 --> 00:07:30,150
it's a standard elf<font color="#E5E5E5"> object and right now</font>

180
00:07:28,500 --> 00:07:32,310
what we're doing<font color="#E5E5E5"> is we're</font><font color="#CCCCCC"> just taking</font>

181
00:07:30,150 --> 00:07:34,700
<font color="#E5E5E5">the the code parts of the the text</font>

182
00:07:32,310 --> 00:07:37,230
section out of<font color="#CCCCCC"> it and we'll</font><font color="#E5E5E5"> actually</font>

183
00:07:34,700 --> 00:07:40,830
just kind of paste together<font color="#E5E5E5"> take</font>

184
00:07:37,230 --> 00:07:42,330
sections of multiple shader parts<font color="#E5E5E5"> the</font>

185
00:07:40,830 --> 00:07:44,520
goal<font color="#E5E5E5"> would</font><font color="#CCCCCC"> be the instead</font><font color="#E5E5E5"> of this kind</font>

186
00:07:42,330 --> 00:07:46,979
of<font color="#CCCCCC"> ad hoc pasting</font><font color="#E5E5E5"> we'll do a real</font>

187
00:07:44,520 --> 00:07:48,870
linking step that can<font color="#E5E5E5"> also take other</font>

188
00:07:46,980 --> 00:07:52,230
sections into account and<font color="#CCCCCC"> that can</font>

189
00:07:48,870 --> 00:07:54,600
resolve relocations and and all sorts of

190
00:07:52,230 --> 00:07:57,240
things<font color="#CCCCCC"> like that the main motivations</font>

191
00:07:54,600 --> 00:08:00,900
for that are<font color="#E5E5E5"> that doing so would allow</font>

192
00:07:57,240 --> 00:08:03,750
<font color="#CCCCCC">us to really have a</font><font color="#E5E5E5"> better treatment</font><font color="#CCCCCC"> of</font>

193
00:08:00,900 --> 00:08:05,370
read-only<font color="#E5E5E5"> data so right now if you have</font>

194
00:08:03,750 --> 00:08:07,140
a<font color="#E5E5E5"> constant in your shader like if it's</font>

195
00:08:05,370 --> 00:08:09,480
just<font color="#CCCCCC"> a scalar value</font><font color="#E5E5E5"> then it will become</font>

196
00:08:07,140 --> 00:08:12,030
an immediate as part of the instruction

197
00:08:09,480 --> 00:08:14,280
stream like on x86 right on x86 you have

198
00:08:12,030 --> 00:08:18,000
instructions with immediate constants

199
00:08:14,280 --> 00:08:20,309
<font color="#E5E5E5">and the same on our GPUs</font><font color="#CCCCCC"> but if you have</font>

200
00:08:18,000 --> 00:08:22,140
a larger constant structure so maybe

201
00:08:20,310 --> 00:08:24,990
some kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> hard-coded lookup table</font>

202
00:08:22,140 --> 00:08:27,419
that<font color="#CCCCCC"> the shader uses then we don't like</font>

203
00:08:24,990 --> 00:08:30,600
in<font color="#E5E5E5"> a</font><font color="#CCCCCC"> normal program</font><font color="#E5E5E5"> on a CPU that would</font>

204
00:08:27,420 --> 00:08:32,130
land in<font color="#E5E5E5"> this read-only data section but</font>

205
00:08:30,600 --> 00:08:34,590
since we don't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> yet the only</font>

206
00:08:32,130 --> 00:08:36,360
<font color="#E5E5E5">ways we can we can deal with it are</font>

207
00:08:34,590 --> 00:08:38,550
either to translate it into<font color="#E5E5E5"> into</font>

208
00:08:36,360 --> 00:08:40,800
uniforms and and treat them like like

209
00:08:38,549 --> 00:08:46,349
<font color="#E5E5E5">uniforms that happen to be unchangeable</font>

210
00:08:40,799 --> 00:08:47,849
by the<font color="#E5E5E5"> program or we generate code which</font>

211
00:08:46,350 --> 00:08:49,230
<font color="#CCCCCC">has the</font><font color="#E5E5E5"> Mallis immediate constants and</font>

212
00:08:47,850 --> 00:08:51,630
kind<font color="#E5E5E5"> of builds the table on the fly</font>

213
00:08:49,230 --> 00:08:53,160
<font color="#E5E5E5">while the shader is running and neither</font>

214
00:08:51,630 --> 00:08:54,750
<font color="#E5E5E5">of these solutions are particularly</font>

215
00:08:53,160 --> 00:08:56,400
great so it would be good<font color="#CCCCCC"> to have proper</font>

216
00:08:54,750 --> 00:08:59,430
handling of these read-only<font color="#E5E5E5"> data</font>

217
00:08:56,400 --> 00:09:02,220
<font color="#E5E5E5">sections and the other aspect is</font><font color="#CCCCCC"> that it</font>

218
00:08:59,430 --> 00:09:03,630
would or should allow us<font color="#E5E5E5"> to explicitly</font>

219
00:09:02,220 --> 00:09:07,020
describe what the hell we're doing<font color="#CCCCCC"> with</font>

220
00:09:03,630 --> 00:09:09,029
<font color="#E5E5E5">LDS</font><font color="#CCCCCC"> I will explain what</font><font color="#E5E5E5"> is the LDS is</font>

221
00:09:07,020 --> 00:09:11,339
local data<font color="#CCCCCC"> share people who write</font>

222
00:09:09,029 --> 00:09:15,630
compute<font color="#CCCCCC"> Raiders know about that</font>

223
00:09:11,339 --> 00:09:17,640
it's<font color="#E5E5E5"> just called maybe differently</font><font color="#CCCCCC"> and</font>

224
00:09:15,630 --> 00:09:19,200
I'll explain the<font color="#CCCCCC"> details of that</font><font color="#E5E5E5"> maybe</font>

225
00:09:17,640 --> 00:09:20,730
<font color="#E5E5E5">you're asking</font><font color="#CCCCCC"> yourself right now okay</font>

226
00:09:19,200 --> 00:09:21,870
why do we have multiple<font color="#E5E5E5"> shader parts</font>

227
00:09:20,730 --> 00:09:25,200
that we want to<font color="#E5E5E5"> paste together in the</font>

228
00:09:21,870 --> 00:09:27,270
first<font color="#CCCCCC"> place if you program</font><font color="#E5E5E5"> OpenGL you</font>

229
00:09:25,200 --> 00:09:28,500
might be thinking<font color="#E5E5E5"> of shader objects that</font>

230
00:09:27,270 --> 00:09:31,290
are<font color="#E5E5E5"> being linked together in a program</font>

231
00:09:28,500 --> 00:09:33,630
<font color="#CCCCCC">but</font><font color="#E5E5E5"> that's not it so in OpenGL you you</font>

232
00:09:31,290 --> 00:09:35,399
can have for<font color="#CCCCCC"> example multiple vertex</font>

233
00:09:33,630 --> 00:09:36,720
<font color="#CCCCCC">program</font><font color="#E5E5E5"> shader objects that are being</font>

234
00:09:35,399 --> 00:09:39,420
<font color="#E5E5E5">linked together into a single program</font>

235
00:09:36,720 --> 00:09:42,180
<font color="#E5E5E5">but this linking happens long before we</font>

236
00:09:39,420 --> 00:09:44,189
ever<font color="#E5E5E5"> convert it to</font><font color="#CCCCCC"> LLVM ir so i'm</font><font color="#E5E5E5"> not</font>

237
00:09:42,180 --> 00:09:46,770
<font color="#E5E5E5">talking</font><font color="#CCCCCC"> about this kind of</font><font color="#E5E5E5"> linking what</font>

238
00:09:44,190 --> 00:09:51,570
I am<font color="#E5E5E5"> talking about can maybe be</font>

239
00:09:46,770 --> 00:09:54,029
illustrated<font color="#CCCCCC"> with a small</font><font color="#E5E5E5"> example so this</font>

240
00:09:51,570 --> 00:09:56,010
<font color="#E5E5E5">is a one</font><font color="#CCCCCC"> of the most</font><font color="#E5E5E5"> the simplest</font>

241
00:09:54,029 --> 00:09:58,790
possible pixel shaders<font color="#CCCCCC"> which I extracted</font>

242
00:09:56,010 --> 00:10:01,520
by running this GL x gears command<font color="#E5E5E5"> and</font>

243
00:09:58,790 --> 00:10:04,469
this is just the assembly<font color="#CCCCCC"> write that</font>

244
00:10:01,520 --> 00:10:06,240
that we<font color="#E5E5E5"> output and</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> you know I'm</font>

245
00:10:04,470 --> 00:10:07,800
biased of<font color="#CCCCCC"> course but I think of all the</font>

246
00:10:06,240 --> 00:10:14,640
<font color="#CCCCCC">deaths</font><font color="#E5E5E5"> of GPUs we have the nicest</font>

247
00:10:07,800 --> 00:10:17,279
assembly<font color="#CCCCCC"> to make sense of it</font>

248
00:10:14,640 --> 00:10:19,740
I actually maybe tell you a couple<font color="#CCCCCC"> of</font>

249
00:10:17,279 --> 00:10:22,380
<font color="#CCCCCC">things</font><font color="#E5E5E5"> so first of all our our ice ax is</font>

250
00:10:19,740 --> 00:10:24,930
honest about the<font color="#CCCCCC"> fact that multiple</font>

251
00:10:22,380 --> 00:10:27,930
threads<font color="#E5E5E5"> are being run simultaneously</font>

252
00:10:24,930 --> 00:10:29,969
<font color="#E5E5E5">within the same what we call wave so the</font>

253
00:10:27,930 --> 00:10:31,589
program is<font color="#E5E5E5"> kind of running</font><font color="#CCCCCC"> a wave and</font>

254
00:10:29,970 --> 00:10:33,360
each wave<font color="#CCCCCC"> considered consists like a</font>

255
00:10:31,589 --> 00:10:38,040
single instruction multiple data<font color="#E5E5E5"> machine</font>

256
00:10:33,360 --> 00:10:39,570
of<font color="#CCCCCC"> 64 parallel threads and so there</font><font color="#E5E5E5"> are</font>

257
00:10:38,040 --> 00:10:41,459
<font color="#CCCCCC">scalar instructions</font><font color="#E5E5E5"> like the very first</font>

258
00:10:39,570 --> 00:10:44,790
one it starts with an S<font color="#E5E5E5"> like</font><font color="#CCCCCC"> scalar</font>

259
00:10:41,459 --> 00:10:48,000
which is operating<font color="#CCCCCC"> on scalar value so it</font>

260
00:10:44,790 --> 00:10:50,219
copies a single 32-bit value from<font color="#CCCCCC"> s9</font>

261
00:10:48,000 --> 00:10:55,950
which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the scalar register number nine</font>

262
00:10:50,220 --> 00:10:57,240
<font color="#E5E5E5">through the special register</font><font color="#CCCCCC"> m0 now why</font>

263
00:10:55,950 --> 00:10:59,399
it would do that this<font color="#E5E5E5"> may be a bit</font>

264
00:10:57,240 --> 00:11:00,510
mysterious<font color="#CCCCCC"> s9 happens to be pre</font>

265
00:10:59,399 --> 00:11:02,399
initialized by the hardware<font color="#CCCCCC"> you can</font>

266
00:11:00,510 --> 00:11:05,010
<font color="#E5E5E5">think of it as</font><font color="#CCCCCC"> a kind of shader ABI</font>

267
00:11:02,399 --> 00:11:06,750
that's going on<font color="#E5E5E5"> and m0 is a special</font>

268
00:11:05,010 --> 00:11:08,400
register<font color="#E5E5E5"> that will be implicitly used by</font>

269
00:11:06,750 --> 00:11:09,900
the next instructions so the next

270
00:11:08,400 --> 00:11:12,180
instructions they start with a V like

271
00:11:09,900 --> 00:11:13,470
<font color="#E5E5E5">vector so they actually</font><font color="#CCCCCC"> operate on up to</font>

272
00:11:12,180 --> 00:11:15,900
64 pixels

273
00:11:13,470 --> 00:11:17,370
same time and they are<font color="#E5E5E5"> interpolation</font>

274
00:11:15,900 --> 00:11:18,660
instructions which<font color="#E5E5E5"> is made a bit of a</font>

275
00:11:17,370 --> 00:11:20,610
misnomer because there's no mathematical

276
00:11:18,660 --> 00:11:22,620
<font color="#E5E5E5">interpolation going on what they're</font>

277
00:11:20,610 --> 00:11:25,170
<font color="#CCCCCC">doing is they're just taking a constant</font>

278
00:11:22,620 --> 00:11:28,140
<font color="#E5E5E5">attribute value so you see</font><font color="#CCCCCC"> the p0 after</font>

279
00:11:25,170 --> 00:11:30,959
<font color="#CCCCCC">zero X which basically tells take the X</font>

280
00:11:28,140 --> 00:11:36,120
component of the zero index attribute

281
00:11:30,960 --> 00:11:41,370
<font color="#E5E5E5">and store its value in</font><font color="#CCCCCC"> v-0</font><font color="#E5E5E5"> and then</font>

282
00:11:36,120 --> 00:11:45,090
that's that<font color="#CCCCCC"> 4x X Y Z</font><font color="#E5E5E5"> V W</font><font color="#CCCCCC"> then you</font><font color="#E5E5E5"> have</font>

283
00:11:41,370 --> 00:11:47,970
vector instructions that convert<font color="#E5E5E5"> packing</font>

284
00:11:45,090 --> 00:11:53,670
32-bit floating-point numbers as half

285
00:11:47,970 --> 00:11:55,980
loads by rounding to<font color="#CCCCCC"> zero arteezy taking</font>

286
00:11:53,670 --> 00:11:58,110
values from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> V 0 so the zeroth word</font>

287
00:11:55,980 --> 00:12:00,240
vector register the first vector

288
00:11:58,110 --> 00:12:02,040
<font color="#E5E5E5">register packing them together storing</font>

289
00:12:00,240 --> 00:12:03,840
the result in B 0 and<font color="#E5E5E5"> then then one</font>

290
00:12:02,040 --> 00:12:10,010
after<font color="#CCCCCC"> that taking</font><font color="#E5E5E5"> values from V 2 and V</font>

291
00:12:03,840 --> 00:12:12,090
through<font color="#E5E5E5"> 3 packing it into V 1 and then</font>

292
00:12:10,010 --> 00:12:14,490
finally there is<font color="#CCCCCC"> a special instruction</font>

293
00:12:12,090 --> 00:12:16,410
<font color="#E5E5E5">called an export instruction which will</font>

294
00:12:14,490 --> 00:12:18,450
export this color data to the color

295
00:12:16,410 --> 00:12:20,250
buffer which then you know writes it

296
00:12:18,450 --> 00:12:23,490
into<font color="#E5E5E5"> the render target possibly</font>

297
00:12:20,250 --> 00:12:25,410
performing blending and finally a<font color="#CCCCCC"> scalar</font>

298
00:12:23,490 --> 00:12:27,420
instruction that says<font color="#CCCCCC"> end program</font><font color="#E5E5E5"> at the</font>

299
00:12:25,410 --> 00:12:31,880
end of the shader<font color="#E5E5E5"> so so there are these</font>

300
00:12:27,420 --> 00:12:31,880
kind of oops

301
00:12:39,160 --> 00:12:47,870
<font color="#E5E5E5">okay some of</font><font color="#CCCCCC"> my animations are gone for</font>

302
00:12:43,189 --> 00:12:51,349
some reason well<font color="#E5E5E5"> okay the main the</font><font color="#CCCCCC"> main</font>

303
00:12:47,870 --> 00:12:53,870
message here<font color="#E5E5E5"> is why are we doing this</font>

304
00:12:51,350 --> 00:12:55,189
this compaction<font color="#CCCCCC"> two 16-bit</font><font color="#E5E5E5"> floats we're</font>

305
00:12:53,870 --> 00:12:57,499
doing that because<font color="#E5E5E5"> we have an 8-bit</font>

306
00:12:55,189 --> 00:12:59,990
color<font color="#CCCCCC"> buffer and exporting that way is</font>

307
00:12:57,499 --> 00:13:01,939
faster<font color="#E5E5E5"> but that</font><font color="#CCCCCC"> depends on what</font><font color="#E5E5E5"> the</font>

308
00:12:59,990 --> 00:13:03,379
color buffer happens to be so the first

309
00:13:01,939 --> 00:13:05,480
<font color="#E5E5E5">part of the shader is really only</font>

310
00:13:03,379 --> 00:13:08,649
<font color="#E5E5E5">dependent on the original input shader</font>

311
00:13:05,480 --> 00:13:11,360
so<font color="#CCCCCC"> GLSL source or</font><font color="#E5E5E5"> maybe some legacy</font>

312
00:13:08,649 --> 00:13:12,949
<font color="#CCCCCC">opengl stuff whereas the bottom</font><font color="#E5E5E5"> part</font>

313
00:13:11,360 --> 00:13:14,660
starting with the conversion<font color="#E5E5E5"> instruction</font>

314
00:13:12,949 --> 00:13:16,399
is something that we can only generate

315
00:13:14,660 --> 00:13:18,350
once we know what the<font color="#CCCCCC"> color target is</font>

316
00:13:16,399 --> 00:13:20,059
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be because if</font><font color="#E5E5E5"> the program wants</font>

317
00:13:18,350 --> 00:13:22,129
to render into<font color="#E5E5E5"> a 32-bit</font><font color="#CCCCCC"> floating-point</font>

318
00:13:20,059 --> 00:13:23,600
<font color="#E5E5E5">buffer then it would be incorrect to</font>

319
00:13:22,129 --> 00:13:26,089
pack<font color="#E5E5E5"> into half</font><font color="#CCCCCC"> floats right</font><font color="#E5E5E5"> we would</font>

320
00:13:23,600 --> 00:13:27,860
lose precision<font color="#CCCCCC"> so this last part we can</font>

321
00:13:26,089 --> 00:13:29,569
only compile once we know<font color="#CCCCCC"> how the shader</font>

322
00:13:27,860 --> 00:13:33,439
in which context it's going to be used

323
00:13:29,569 --> 00:13:36,769
<font color="#E5E5E5">and this leads to a problem called</font>

324
00:13:33,439 --> 00:13:37,819
stuttering where you know maybe you<font color="#CCCCCC"> have</font>

325
00:13:36,769 --> 00:13:39,620
a game running<font color="#E5E5E5"> and then an object</font>

326
00:13:37,819 --> 00:13:41,509
appears on the screen where the program

327
00:13:39,620 --> 00:13:42,769
had previously compiled the shader but

328
00:13:41,509 --> 00:13:44,300
now the shader is being used in a

329
00:13:42,769 --> 00:13:46,129
context<font color="#E5E5E5"> that is not being prepared for</font>

330
00:13:44,300 --> 00:13:48,679
<font color="#E5E5E5">and it needs to be recompiled</font><font color="#CCCCCC"> and Rupe</font>

331
00:13:46,129 --> 00:13:50,240
your scene stops for a moment<font color="#CCCCCC"> and the</font>

332
00:13:48,679 --> 00:13:52,550
way we thought one way to solve<font color="#E5E5E5"> that is</font>

333
00:13:50,240 --> 00:13:54,980
a disk cache of course but that<font color="#E5E5E5"> only</font>

334
00:13:52,550 --> 00:13:57,529
<font color="#E5E5E5">works once the program has run at least</font>

335
00:13:54,980 --> 00:13:59,269
<font color="#E5E5E5">once and for the first run</font><font color="#CCCCCC"> what we can</font>

336
00:13:57,529 --> 00:14:01,639
do is we compile this main shader part

337
00:13:59,269 --> 00:14:03,170
and then and initially and then the

338
00:14:01,639 --> 00:14:05,329
prologue<font color="#E5E5E5"> and epilogue</font><font color="#CCCCCC"> they are very</font>

339
00:14:03,170 --> 00:14:07,128
short<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> know they can can be</font>

340
00:14:05,329 --> 00:14:09,498
<font color="#E5E5E5">compiled quickly and then just kind of</font>

341
00:14:07,129 --> 00:14:15,649
paste it together<font color="#E5E5E5"> so that's why we</font>

342
00:14:09,499 --> 00:14:20,329
combine<font color="#E5E5E5"> different shade reports</font><font color="#CCCCCC"> there is</font>

343
00:14:15,649 --> 00:14:22,309
an another reason<font color="#E5E5E5"> okay there is another</font>

344
00:14:20,329 --> 00:14:24,138
reason<font color="#E5E5E5"> why we combine</font><font color="#CCCCCC"> combine</font><font color="#E5E5E5"> shader</font>

345
00:14:22,309 --> 00:14:26,779
parts and this has to do<font color="#E5E5E5"> with how the</font>

346
00:14:24,139 --> 00:14:28,490
<font color="#E5E5E5">shader stages work so if you know</font><font color="#CCCCCC"> OpenGL</font>

347
00:14:26,779 --> 00:14:29,929
<font color="#E5E5E5">or Vulcan or anything like that you</font>

348
00:14:28,490 --> 00:14:32,809
<font color="#CCCCCC">should be</font><font color="#E5E5E5"> familiar with the column on</font>

349
00:14:29,929 --> 00:14:34,069
<font color="#E5E5E5">the left it</font><font color="#CCCCCC"> shows the shader stages in a</font>

350
00:14:32,809 --> 00:14:36,199
graphics pipeline it starts with a

351
00:14:34,069 --> 00:14:37,670
vertex<font color="#E5E5E5"> shader</font><font color="#CCCCCC"> then if you want</font><font color="#E5E5E5"> to use</font>

352
00:14:36,199 --> 00:14:40,069
tessellation you have optional

353
00:14:37,670 --> 00:14:42,769
tessellation control and<font color="#E5E5E5"> evaluation</font>

354
00:14:40,069 --> 00:14:44,449
shaders if you want to use the geometry

355
00:14:42,769 --> 00:14:46,429
stage you have<font color="#E5E5E5"> an optional geometry</font>

356
00:14:44,449 --> 00:14:48,410
shader<font color="#E5E5E5"> and in the end you have</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> pixel</font>

357
00:14:46,429 --> 00:14:50,050
shader<font color="#CCCCCC"> that produces the the pixel color</font>

358
00:14:48,410 --> 00:14:52,749
values

359
00:14:50,050 --> 00:14:54,069
now in our<font color="#CCCCCC"> Hardware the stages that we</font>

360
00:14:52,749 --> 00:14:56,050
have<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> looked like the next</font>

361
00:14:54,069 --> 00:14:58,329
column<font color="#E5E5E5"> so at the</font><font color="#CCCCCC"> bottom you see vertex</font>

362
00:14:56,050 --> 00:15:00,309
shader and pixel shader<font color="#E5E5E5"> and above you</font>

363
00:14:58,329 --> 00:15:02,319
see like<font color="#CCCCCC"> geometry shader is familiar</font><font color="#E5E5E5"> but</font>

364
00:15:00,309 --> 00:15:07,118
you see these<font color="#E5E5E5"> other names that</font><font color="#CCCCCC"> are kind</font>

365
00:15:02,319 --> 00:15:09,579
of<font color="#E5E5E5"> weird</font><font color="#CCCCCC"> and so what happens is that the</font>

366
00:15:07,119 --> 00:15:11,170
API shader gets mapped<font color="#E5E5E5"> to the proper</font>

367
00:15:09,579 --> 00:15:12,998
<font color="#CCCCCC">hardware stage as illustrated by the</font>

368
00:15:11,170 --> 00:15:14,738
next<font color="#E5E5E5"> columns if you have the simplest</font>

369
00:15:12,999 --> 00:15:17,110
and standard case of just vertex and

370
00:15:14,739 --> 00:15:18,850
pixel<font color="#CCCCCC"> shaders</font><font color="#E5E5E5"> then you know the vertex</font>

371
00:15:17,110 --> 00:15:20,170
shader<font color="#E5E5E5"> case goes to the</font><font color="#CCCCCC"> hardware vertex</font>

372
00:15:18,850 --> 00:15:21,610
shader the pixel shader goes to the

373
00:15:20,170 --> 00:15:23,589
hardware pixel shader as it always does

374
00:15:21,610 --> 00:15:24,970
<font color="#CCCCCC">but if you use the geometry</font><font color="#E5E5E5"> shader then</font>

375
00:15:23,589 --> 00:15:27,459
the geometry shader goes to the hardware

376
00:15:24,970 --> 00:15:28,869
geometry stage but the hardware vertex

377
00:15:27,459 --> 00:15:31,719
<font color="#E5E5E5">stage is after the hardware geometry</font>

378
00:15:28,869 --> 00:15:35,319
stage so you<font color="#CCCCCC"> know we have to</font><font color="#E5E5E5"> change the</font>

379
00:15:31,720 --> 00:15:36,939
order<font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean it ends</font><font color="#CCCCCC"> up in</font><font color="#E5E5E5"> the es slot</font>

380
00:15:35,319 --> 00:15:38,738
and there is<font color="#CCCCCC"> something</font><font color="#E5E5E5"> called a copy</font>

381
00:15:36,939 --> 00:15:40,209
shader but the details are not important

382
00:15:38,739 --> 00:15:44,499
a similar<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> happens when</font>

383
00:15:40,209 --> 00:15:46,420
tessellation is<font color="#E5E5E5"> used and in the most</font>

384
00:15:44,499 --> 00:15:48,040
complex case where both<font color="#E5E5E5"> tessellation and</font>

385
00:15:46,420 --> 00:15:51,759
geometry shaders are used<font color="#CCCCCC"> you get the</font>

386
00:15:48,040 --> 00:15:53,439
column on the<font color="#E5E5E5"> right and and now what</font>

387
00:15:51,759 --> 00:15:56,470
happened is that<font color="#E5E5E5"> the hardware designer</font>

388
00:15:53,439 --> 00:15:58,149
said well you know<font color="#CCCCCC"> between in like in</font>

389
00:15:56,470 --> 00:15:59,350
<font color="#E5E5E5">the tessellation case between the vertex</font>

390
00:15:58,149 --> 00:16:01,449
shader<font color="#CCCCCC"> and the tessellation control</font>

391
00:15:59,350 --> 00:16:03,819
trader<font color="#E5E5E5"> there isn't actually that much</font>

392
00:16:01,449 --> 00:16:05,349
fixed function<font color="#E5E5E5"> stuff going on there so</font>

393
00:16:03,819 --> 00:16:08,229
let's just<font color="#E5E5E5"> combine these into</font><font color="#CCCCCC"> a single</font>

394
00:16:05,350 --> 00:16:10,379
<font color="#CCCCCC">hardware stage</font><font color="#E5E5E5"> a single</font><font color="#CCCCCC"> hardware stage</font>

395
00:16:08,230 --> 00:16:12,610
that first runs the vertex shader<font color="#CCCCCC"> and</font>

396
00:16:10,379 --> 00:16:14,799
then runs<font color="#E5E5E5"> the tessellation control</font>

397
00:16:12,610 --> 00:16:16,689
shader<font color="#CCCCCC"> all the same you</font><font color="#E5E5E5"> know in a second</font>

398
00:16:14,799 --> 00:16:19,179
column with<font color="#E5E5E5"> the vertex</font><font color="#CCCCCC"> shader and</font>

399
00:16:16,689 --> 00:16:21,579
geometry<font color="#E5E5E5"> shader in one single hardware</font>

400
00:16:19,179 --> 00:16:23,589
stage one single<font color="#CCCCCC"> program from a GPU</font>

401
00:16:21,579 --> 00:16:25,929
perspective<font color="#E5E5E5"> you run both vertex and</font>

402
00:16:23,589 --> 00:16:33,100
geometry<font color="#E5E5E5"> shaders so we have to paste</font>

403
00:16:25,929 --> 00:16:35,589
<font color="#CCCCCC">also these together okay so this leads</font>

404
00:16:33,100 --> 00:16:37,569
<font color="#E5E5E5">to some interesting</font><font color="#CCCCCC"> challenges if you</font>

405
00:16:35,589 --> 00:16:39,819
know<font color="#CCCCCC"> a</font><font color="#E5E5E5"> little bit</font><font color="#CCCCCC"> about this stuff</font>

406
00:16:37,569 --> 00:16:41,469
you'll know that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> vertex shader</font><font color="#E5E5E5"> it</font>

407
00:16:39,819 --> 00:16:43,628
just outputs<font color="#E5E5E5"> attributes for an</font>

408
00:16:41,470 --> 00:16:45,519
individual vertex while the geometry

409
00:16:43,629 --> 00:16:47,709
shader it operates on one primitive<font color="#E5E5E5"> at a</font>

410
00:16:45,519 --> 00:16:50,079
time so the input of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> geometry shader</font>

411
00:16:47,709 --> 00:16:52,329
will be an entire triangle<font color="#E5E5E5"> with all the</font>

412
00:16:50,079 --> 00:16:56,138
attributes<font color="#E5E5E5"> of its vertices</font><font color="#CCCCCC"> that is the</font>

413
00:16:52,329 --> 00:16:58,419
view that you<font color="#CCCCCC"> have as the</font><font color="#E5E5E5"> programmer so</font>

414
00:16:56,139 --> 00:16:59,860
if you think<font color="#CCCCCC"> about</font><font color="#E5E5E5"> how to translate that</font>

415
00:16:58,419 --> 00:17:02,230
into this<font color="#E5E5E5"> single instruction multiple</font>

416
00:16:59,860 --> 00:17:03,760
<font color="#CCCCCC">data</font><font color="#E5E5E5"> machine on a GPU when everything</font>

417
00:17:02,230 --> 00:17:06,490
runs in a single shader<font color="#E5E5E5"> you</font>

418
00:17:03,760 --> 00:17:08,230
first kind of work with vertex threads

419
00:17:06,490 --> 00:17:10,480
and<font color="#E5E5E5"> vertex lanes where every</font><font color="#CCCCCC"> lane is</font>

420
00:17:08,230 --> 00:17:12,970
responsible for<font color="#E5E5E5"> for computing one vertex</font>

421
00:17:10,480 --> 00:17:15,900
<font color="#E5E5E5">shader invocation for one vertex and</font>

422
00:17:12,970 --> 00:17:17,920
then in the second<font color="#CCCCCC"> part you will have</font>

423
00:17:15,900 --> 00:17:19,360
physically the same lanes but now

424
00:17:17,920 --> 00:17:21,280
they're operating logically on

425
00:17:19,359 --> 00:17:23,439
primitives on geometry<font color="#E5E5E5"> shader</font>

426
00:17:21,280 --> 00:17:25,959
invocations<font color="#E5E5E5"> and you somehow need to you</font>

427
00:17:23,440 --> 00:17:28,390
know<font color="#E5E5E5"> transfer the data between them and</font>

428
00:17:25,959 --> 00:17:30,700
the way that this data<font color="#CCCCCC"> HAP happens is</font>

429
00:17:28,390 --> 00:17:33,430
that the vertex<font color="#E5E5E5"> shader part stores its</font>

430
00:17:30,700 --> 00:17:35,710
output into the local data share which

431
00:17:33,430 --> 00:17:38,350
<font color="#E5E5E5">is a small</font><font color="#CCCCCC"> memory that is shared between</font>

432
00:17:35,710 --> 00:17:40,690
all<font color="#CCCCCC"> the waves within</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> workgroup</font><font color="#E5E5E5"> so</font>

433
00:17:38,350 --> 00:17:43,240
typically we have<font color="#CCCCCC"> up to</font><font color="#E5E5E5"> four waves to</font>

434
00:17:40,690 --> 00:17:45,700
process 200 up to<font color="#CCCCCC"> 20 56 vertices at the</font>

435
00:17:43,240 --> 00:17:49,650
same time and then the geometry shader

436
00:17:45,700 --> 00:17:54,640
parts<font color="#E5E5E5"> part loads the inputs from there</font>

437
00:17:49,650 --> 00:18:00,370
now<font color="#E5E5E5"> this kind</font><font color="#CCCCCC"> of shows</font><font color="#E5E5E5"> how the data is</font>

438
00:17:54,640 --> 00:18:04,570
laid<font color="#E5E5E5"> out in LDS but what</font><font color="#CCCCCC"> happens</font><font color="#E5E5E5"> what</font>

439
00:18:00,370 --> 00:18:08,709
<font color="#E5E5E5">the main problem here is or is that</font><font color="#CCCCCC"> LLVM</font>

440
00:18:04,570 --> 00:18:11,110
does not know how we're using LDS this

441
00:18:08,710 --> 00:18:12,490
means that we cannot use LDS for all

442
00:18:11,110 --> 00:18:14,020
sorts<font color="#E5E5E5"> of</font><font color="#CCCCCC"> things where it might</font><font color="#E5E5E5"> be</font>

443
00:18:12,490 --> 00:18:15,880
<font color="#E5E5E5">interesting to use it for like spilling</font>

444
00:18:14,020 --> 00:18:19,030
<font color="#E5E5E5">so spilling I mean it doesn't have such</font>

445
00:18:15,880 --> 00:18:22,150
a big application because for every 256

446
00:18:19,030 --> 00:18:24,670
kilobytes of vector memory we have 64

447
00:18:22,150 --> 00:18:25,990
kilobytes of LDS but still maybe there

448
00:18:24,670 --> 00:18:28,690
are some cases<font color="#E5E5E5"> where it could still help</font>

449
00:18:25,990 --> 00:18:30,220
we can't use<font color="#CCCCCC"> it</font><font color="#E5E5E5"> for dynamically indexed</font>

450
00:18:28,690 --> 00:18:34,930
arrays where it sometimes<font color="#CCCCCC"> might be</font>

451
00:18:30,220 --> 00:18:36,490
helpful<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> difficult to</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> LDS for</font>

452
00:18:34,930 --> 00:18:37,720
additional purposes even<font color="#E5E5E5"> from the front</font>

453
00:18:36,490 --> 00:18:39,580
<font color="#E5E5E5">end because the front end has</font><font color="#CCCCCC"> to keep</font>

454
00:18:37,720 --> 00:18:42,250
<font color="#E5E5E5">track</font><font color="#CCCCCC"> of all</font><font color="#E5E5E5"> the addresses manually and</font>

455
00:18:39,580 --> 00:18:44,290
it just becomes complicated<font color="#E5E5E5"> it might</font>

456
00:18:42,250 --> 00:18:46,270
inhibit at<font color="#CCCCCC"> alias analysis in</font><font color="#E5E5E5"> some cases</font>

457
00:18:44,290 --> 00:18:48,190
although<font color="#CCCCCC"> LLVM is is generally very good</font>

458
00:18:46,270 --> 00:18:50,920
<font color="#E5E5E5">at that</font>

459
00:18:48,190 --> 00:18:52,870
so you know the goal would be to<font color="#E5E5E5"> somehow</font>

460
00:18:50,920 --> 00:18:57,940
explicitly<font color="#E5E5E5"> represent all the variables</font>

461
00:18:52,870 --> 00:19:01,090
that<font color="#CCCCCC"> we use in LDS store them represent</font>

462
00:18:57,940 --> 00:19:04,360
them as an LDS segment<font color="#E5E5E5"> in the elf object</font>

463
00:19:01,090 --> 00:19:05,860
that we get and then<font color="#CCCCCC"> you know when we</font>

464
00:19:04,360 --> 00:19:07,659
merge together vertices and<font color="#E5E5E5"> geometry</font>

465
00:19:05,860 --> 00:19:09,699
shader they will have a shared variable

466
00:19:07,660 --> 00:19:11,380
<font color="#E5E5E5">which will be where they transfer the</font>

467
00:19:09,700 --> 00:19:13,210
attributes but maybe they<font color="#CCCCCC"> have some</font>

468
00:19:11,380 --> 00:19:15,190
other<font color="#E5E5E5"> uses for LDS as well and and we</font>

469
00:19:13,210 --> 00:19:17,520
somehow<font color="#E5E5E5"> use the linker to arrange those</font>

470
00:19:15,190 --> 00:19:20,230
and calculate the right addresses

471
00:19:17,520 --> 00:19:23,379
it's not entirely simple because<font color="#E5E5E5"> you</font>

472
00:19:20,230 --> 00:19:25,240
<font color="#CCCCCC">know if you look back this</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> here is</font>

473
00:19:23,380 --> 00:19:27,370
kind of a<font color="#CCCCCC"> two-dimensional array so one</font>

474
00:19:25,240 --> 00:19:28,990
index is is the<font color="#E5E5E5"> vertex number and the</font>

475
00:19:27,370 --> 00:19:31,270
<font color="#E5E5E5">other index is the attribute</font><font color="#CCCCCC"> number and</font>

476
00:19:28,990 --> 00:19:34,690
component and we don't<font color="#E5E5E5"> really know</font>

477
00:19:31,270 --> 00:19:38,889
<font color="#E5E5E5">either size when we compile at least the</font>

478
00:19:34,690 --> 00:19:40,300
geometry shader part because we<font color="#E5E5E5"> might</font>

479
00:19:38,890 --> 00:19:41,470
<font color="#E5E5E5">have a vertex shader</font><font color="#CCCCCC"> that produces</font>

480
00:19:40,300 --> 00:19:43,629
attributes<font color="#E5E5E5"> that are unused by the</font>

481
00:19:41,470 --> 00:19:45,160
<font color="#E5E5E5">geometry shader and we don't actually</font>

482
00:19:43,630 --> 00:19:46,690
know how many ways we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> run</font>

483
00:19:45,160 --> 00:19:49,060
simultaneously<font color="#E5E5E5"> in advance</font><font color="#CCCCCC"> so there</font><font color="#E5E5E5"> are</font>

484
00:19:46,690 --> 00:19:50,410
<font color="#E5E5E5">some problems but as a kind of a minimal</font>

485
00:19:49,060 --> 00:19:52,330
demonstration that might already be

486
00:19:50,410 --> 00:19:55,380
useful for<font color="#E5E5E5"> for various</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> it would</font>

487
00:19:52,330 --> 00:19:57,970
<font color="#E5E5E5">be nice if</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> least we could represent</font>

488
00:19:55,380 --> 00:20:01,330
additional LDS variables<font color="#E5E5E5"> you know maybe</font>

489
00:19:57,970 --> 00:20:03,190
we<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to use it to store some</font><font color="#E5E5E5"> some</font>

490
00:20:01,330 --> 00:20:04,929
dynamically<font color="#E5E5E5"> index array that happens to</font>

491
00:20:03,190 --> 00:20:06,400
<font color="#E5E5E5">be the same across all lanes</font><font color="#CCCCCC"> something</font>

492
00:20:04,930 --> 00:20:09,550
like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> maybe use it for spilling</font>

493
00:20:06,400 --> 00:20:11,760
<font color="#E5E5E5">maybe use</font><font color="#CCCCCC"> it for for</font><font color="#E5E5E5"> something else</font><font color="#CCCCCC"> and</font>

494
00:20:09,550 --> 00:20:14,909
<font color="#CCCCCC">do that in the</font><font color="#E5E5E5"> linking so that would be</font>

495
00:20:11,760 --> 00:20:17,410
that would<font color="#E5E5E5"> be the goal</font>

496
00:20:14,910 --> 00:20:18,730
remember I also mentioned read-only data

497
00:20:17,410 --> 00:20:20,200
linking that part is<font color="#E5E5E5"> fairly</font>

498
00:20:18,730 --> 00:20:22,210
<font color="#CCCCCC">straightforward in comparison because</font>

499
00:20:20,200 --> 00:20:23,770
it's just<font color="#E5E5E5"> like on CPUs we just need to</font>

500
00:20:22,210 --> 00:20:27,610
<font color="#CCCCCC">think</font><font color="#E5E5E5"> about what do we</font><font color="#CCCCCC"> want the ABI to</font>

501
00:20:23,770 --> 00:20:29,230
look like<font color="#E5E5E5"> 64-bit pointers maybe maybe we</font>

502
00:20:27,610 --> 00:20:31,240
want<font color="#E5E5E5"> to restrict ourselves to 32-bit</font>

503
00:20:29,230 --> 00:20:33,430
address<font color="#CCCCCC"> spaces for a bit of efficiency</font>

504
00:20:31,240 --> 00:20:36,810
<font color="#E5E5E5">there are some good choices to be made</font>

505
00:20:33,430 --> 00:20:39,310
<font color="#E5E5E5">there</font><font color="#CCCCCC"> so of these</font><font color="#E5E5E5"> two options I think</font>

506
00:20:36,810 --> 00:20:43,540
<font color="#E5E5E5">yeah I</font><font color="#CCCCCC"> think the second one</font><font color="#E5E5E5"> is the</font>

507
00:20:39,310 --> 00:20:46,360
<font color="#E5E5E5">better one but that goes into details</font><font color="#CCCCCC"> so</font>

508
00:20:43,540 --> 00:20:48,700
yeah<font color="#E5E5E5"> just let me summarize</font><font color="#CCCCCC"> the two</font>

509
00:20:46,360 --> 00:20:50,409
points so<font color="#E5E5E5"> switching</font><font color="#CCCCCC"> to nuran Radian</font>

510
00:20:48,700 --> 00:20:54,610
<font color="#E5E5E5">aside</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going to do that and it's</font>

511
00:20:50,410 --> 00:20:57,340
actually<font color="#CCCCCC"> very far along already</font><font color="#E5E5E5"> and the</font>

512
00:20:54,610 --> 00:20:59,050
other part is well aspirational I want

513
00:20:57,340 --> 00:21:02,800
to explore this this dynamic linking

514
00:20:59,050 --> 00:21:04,780
I've explained to<font color="#CCCCCC"> you the main purposes</font>

515
00:21:02,800 --> 00:21:06,460
<font color="#CCCCCC">of it and what is</font><font color="#E5E5E5"> involved interesting</font>

516
00:21:04,780 --> 00:21:09,370
question<font color="#E5E5E5"> and that is what kind of linker</font>

517
00:21:06,460 --> 00:21:11,050
do we actually use<font color="#CCCCCC"> a melody</font><font color="#E5E5E5"> part of the</font>

518
00:21:09,370 --> 00:21:13,149
LLVM project is<font color="#E5E5E5"> kind of a natural</font><font color="#CCCCCC"> choice</font>

519
00:21:11,050 --> 00:21:14,260
<font color="#E5E5E5">because we already depend on</font><font color="#CCCCCC"> LLVM</font>

520
00:21:13,150 --> 00:21:17,080
although it does live in a different

521
00:21:14,260 --> 00:21:18,879
repository<font color="#CCCCCC"> it can be embedded</font><font color="#E5E5E5"> as a</font>

522
00:21:17,080 --> 00:21:20,560
library it's designed like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> on the</font>

523
00:21:18,880 --> 00:21:21,970
other<font color="#E5E5E5"> hand it's like a complete</font><font color="#CCCCCC"> ahead of</font>

524
00:21:20,560 --> 00:21:25,840
<font color="#CCCCCC">time linker and</font><font color="#E5E5E5"> we only really need</font><font color="#CCCCCC"> a</font>

525
00:21:21,970 --> 00:21:28,330
dynamic linker<font color="#CCCCCC"> well but this still needs</font>

526
00:21:25,840 --> 00:21:31,120
to be<font color="#E5E5E5"> explored and we'll see</font><font color="#CCCCCC"> ok with</font>

527
00:21:28,330 --> 00:21:39,419
<font color="#E5E5E5">that thank you for</font><font color="#CCCCCC"> attention</font>

528
00:21:31,120 --> 00:21:39,419
[Applause]

