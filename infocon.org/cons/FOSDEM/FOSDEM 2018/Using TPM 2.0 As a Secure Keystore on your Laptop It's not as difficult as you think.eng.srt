1
00:00:04,640 --> 00:00:09,559
our next talk is<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to be by</font><font color="#E5E5E5"> James</font>

2
00:00:07,040 --> 00:00:11,900
<font color="#CCCCCC">Bottomly about enhancing Linux security</font>

3
00:00:09,559 --> 00:00:15,399
with the TVM<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> okay</font>

4
00:00:11,900 --> 00:00:15,400
well<font color="#E5E5E5"> hi everybody</font>

5
00:00:17,010 --> 00:00:21,939
thank you very<font color="#CCCCCC"> much</font>

6
00:00:18,970 --> 00:00:23,890
my company communications department

7
00:00:21,939 --> 00:00:25,840
told<font color="#E5E5E5"> me to put always put the</font><font color="#CCCCCC"> email</font>

8
00:00:23,890 --> 00:00:28,509
address and apparently they insist on<font color="#E5E5E5"> a</font>

9
00:00:25,840 --> 00:00:30,369
<font color="#CCCCCC">twitter account</font><font color="#E5E5E5"> as well now</font><font color="#CCCCCC"> my email</font>

10
00:00:28,509 --> 00:00:32,290
<font color="#E5E5E5">address I'm responsive on my Twitter</font>

11
00:00:30,369 --> 00:00:36,940
<font color="#CCCCCC">account is pretty much right only</font><font color="#E5E5E5"> so</font>

12
00:00:32,290 --> 00:00:39,790
please don't<font color="#E5E5E5"> use it I'm originally a</font>

13
00:00:36,940 --> 00:00:42,849
container evangelist<font color="#E5E5E5"> I've been doing</font>

14
00:00:39,790 --> 00:00:44,650
open source<font color="#E5E5E5"> for a very long time</font><font color="#CCCCCC"> I've</font>

15
00:00:42,850 --> 00:00:46,600
actually worked<font color="#E5E5E5"> a bit in converting</font>

16
00:00:44,650 --> 00:00:49,449
business models to<font color="#E5E5E5"> open source and I'm</font>

17
00:00:46,600 --> 00:00:50,980
also a kernel developer<font color="#CCCCCC"> the</font><font color="#E5E5E5"> only thing</font>

18
00:00:49,449 --> 00:00:53,620
you<font color="#CCCCCC"> should probably notice from this</font>

19
00:00:50,980 --> 00:00:56,019
<font color="#E5E5E5">impressive CV is that security isn't on</font>

20
00:00:53,620 --> 00:00:58,390
<font color="#CCCCCC">it anywhere</font><font color="#E5E5E5"> the talk I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> give</font>

21
00:00:56,020 --> 00:01:00,519
<font color="#E5E5E5">you about the TPM is talk about</font>

22
00:00:58,390 --> 00:01:02,680
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> actually just annoyed me</font>

23
00:01:00,519 --> 00:01:05,649
personally in Linux and<font color="#E5E5E5"> I determined fix</font>

24
00:01:02,680 --> 00:01:07,539
in the tradition of<font color="#CCCCCC"> open source so TPM</font>

25
00:01:05,649 --> 00:01:10,119
<font color="#CCCCCC">is not actually one of the</font><font color="#E5E5E5"> things that</font>

26
00:01:07,539 --> 00:01:11,800
was my natural<font color="#E5E5E5"> area of expertise until I</font>

27
00:01:10,119 --> 00:01:17,320
one day<font color="#CCCCCC"> I got really annoyed</font><font color="#E5E5E5"> with the</font>

28
00:01:11,800 --> 00:01:21,640
USB<font color="#E5E5E5"> key dongle so to begin let's</font><font color="#CCCCCC"> talk</font>

29
00:01:17,320 --> 00:01:23,559
about<font color="#E5E5E5"> security and</font><font color="#CCCCCC"> trust everybody needs</font>

30
00:01:21,640 --> 00:01:25,209
<font color="#E5E5E5">help protecting secrets that's why</font>

31
00:01:23,560 --> 00:01:27,160
<font color="#E5E5E5">whenever you have a private key it</font>

32
00:01:25,209 --> 00:01:29,200
always comes<font color="#E5E5E5"> with a password because</font>

33
00:01:27,160 --> 00:01:31,149
there's always situations<font color="#E5E5E5"> where somebody</font>

34
00:01:29,200 --> 00:01:32,979
<font color="#CCCCCC">else who's malicious can get in and run</font>

35
00:01:31,149 --> 00:01:34,660
off<font color="#CCCCCC"> with your</font><font color="#E5E5E5"> private keys and then</font>

36
00:01:32,979 --> 00:01:36,670
impersonate you on the<font color="#E5E5E5"> internet steal</font>

37
00:01:34,660 --> 00:01:38,410
your<font color="#CCCCCC"> credit card data empty</font><font color="#E5E5E5"> your bank</font>

38
00:01:36,670 --> 00:01:42,190
account or<font color="#E5E5E5"> do all sorts of other things</font>

39
00:01:38,410 --> 00:01:44,679
<font color="#E5E5E5">to you and usually on the internet or</font><font color="#CCCCCC"> on</font>

40
00:01:42,190 --> 00:01:47,229
all electronic commerce we use some form

41
00:01:44,679 --> 00:01:50,530
of asymmetric private key public<font color="#CCCCCC"> private</font>

42
00:01:47,229 --> 00:01:53,020
key system like RSA or<font color="#CCCCCC"> ECC to represent</font>

43
00:01:50,530 --> 00:01:55,509
our identity<font color="#E5E5E5"> so pretty much these keys</font>

44
00:01:53,020 --> 00:01:58,690
represent who we<font color="#E5E5E5"> are on the web if you</font>

45
00:01:55,509 --> 00:02:01,420
lose them you<font color="#E5E5E5"> lose your identity and</font>

46
00:01:58,690 --> 00:02:06,220
obviously if they get lost or stolen<font color="#E5E5E5"> you</font>

47
00:02:01,420 --> 00:02:08,440
<font color="#CCCCCC">can</font><font color="#E5E5E5"> be impersonated on the</font><font color="#CCCCCC"> internet the</font>

48
00:02:06,220 --> 00:02:10,149
current state of the<font color="#CCCCCC"> art</font><font color="#E5E5E5"> for protecting</font>

49
00:02:08,440 --> 00:02:12,430
your keys<font color="#E5E5E5"> if you're not one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these</font>

50
00:02:10,149 --> 00:02:14,470
<font color="#CCCCCC">people who just</font><font color="#E5E5E5"> uses a key store on your</font>

51
00:02:12,430 --> 00:02:17,349
laptop and<font color="#CCCCCC"> is happy with unlocking it</font>

52
00:02:14,470 --> 00:02:19,030
with a password<font color="#CCCCCC"> is a key dongle I did</font>

53
00:02:17,349 --> 00:02:20,829
actually<font color="#E5E5E5"> have one but I lost it so</font><font color="#CCCCCC"> I</font>

54
00:02:19,030 --> 00:02:22,629
can't<font color="#E5E5E5"> show you what they look</font><font color="#CCCCCC"> like but</font>

55
00:02:20,830 --> 00:02:24,519
they usually list all the<font color="#CCCCCC"> USB keys that</font>

56
00:02:22,629 --> 00:02:27,819
you<font color="#E5E5E5"> plug into your laptop</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> store one</font>

57
00:02:24,519 --> 00:02:29,470
private<font color="#E5E5E5"> key and this is a big</font><font color="#CCCCCC"> problem</font>

58
00:02:27,819 --> 00:02:32,350
<font color="#E5E5E5">because many of</font><font color="#CCCCCC"> them only</font>

59
00:02:29,470 --> 00:02:35,440
<font color="#E5E5E5">door one private key</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> unfortunately</font>

60
00:02:32,350 --> 00:02:38,200
if you're like me<font color="#E5E5E5"> I have about 12 keys</font>

61
00:02:35,440 --> 00:02:40,960
on my laptop<font color="#E5E5E5"> representing my VPN I've</font>

62
00:02:38,200 --> 00:02:42,640
got about<font color="#E5E5E5"> five SSH keys I've got about</font>

63
00:02:40,960 --> 00:02:44,800
four PGP keys

64
00:02:42,640 --> 00:02:46,869
I've actually got<font color="#E5E5E5"> several CA security</font>

65
00:02:44,800 --> 00:02:49,630
keys for a few things so all of these

66
00:02:46,870 --> 00:02:51,970
<font color="#CCCCCC">Keys mount up and if I have to have one</font>

67
00:02:49,630 --> 00:02:53,890
dongle per<font color="#E5E5E5"> key it I end up with this</font>

68
00:02:51,970 --> 00:02:55,420
huge key ring of dongles<font color="#E5E5E5"> and I can never</font>

69
00:02:53,890 --> 00:02:58,350
<font color="#E5E5E5">remember</font><font color="#CCCCCC"> which one is which one I need</font>

70
00:02:55,420 --> 00:03:01,420
to<font color="#E5E5E5"> plug it in for my private key</font><font color="#CCCCCC"> so</font>

71
00:02:58,350 --> 00:03:03,370
<font color="#CCCCCC">using a TPM instead of these dongles to</font>

72
00:03:01,420 --> 00:03:05,829
protect your keys actually scales to

73
00:03:03,370 --> 00:03:07,900
thousands of keys<font color="#E5E5E5"> but TPM has no</font>

74
00:03:05,830 --> 00:03:09,640
limitation as to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> amount of keys that</font>

75
00:03:07,900 --> 00:03:11,860
<font color="#CCCCCC">can actually</font><font color="#E5E5E5"> manage which makes it a</font>

76
00:03:09,640 --> 00:03:15,790
<font color="#CCCCCC">really useful entity for actually doing</font>

77
00:03:11,860 --> 00:03:17,380
this and the other thing about the TPM

78
00:03:15,790 --> 00:03:19,929
which is really useful<font color="#CCCCCC"> is is fully</font>

79
00:03:17,380 --> 00:03:22,030
ubiquitous everybody who has a<font color="#E5E5E5"> laptop in</font>

80
00:03:19,930 --> 00:03:25,150
this room today<font color="#E5E5E5"> has a TPM sitting inside</font>

81
00:03:22,030 --> 00:03:28,300
<font color="#E5E5E5">that laptop now not everybody has TPM</font>

82
00:03:25,150 --> 00:03:30,100
2.0 the reason we're getting TPM 2.0 is

83
00:03:28,300 --> 00:03:33,070
because it's a<font color="#E5E5E5"> Microsoft mandate for</font>

84
00:03:30,100 --> 00:03:35,350
<font color="#E5E5E5">Windows 10 but all modern laptops and I</font>

85
00:03:33,070 --> 00:03:37,870
have shipped with TPM 2.0 which is what

86
00:03:35,350 --> 00:03:40,660
I meant<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about my Dell skylake</font>

87
00:03:37,870 --> 00:03:43,030
XPS actually shipped with the TPM 1.2

88
00:03:40,660 --> 00:03:45,280
but it was software upgradeable to<font color="#E5E5E5"> TPM</font>

89
00:03:43,030 --> 00:03:49,540
2.0 so that's basically what I did<font color="#CCCCCC"> for</font>

90
00:03:45,280 --> 00:03:52,269
<font color="#E5E5E5">this so the TPM itself</font><font color="#CCCCCC"> sitting in</font><font color="#E5E5E5"> your</font>

91
00:03:49,540 --> 00:03:54,970
laptop<font color="#CCCCCC"> is a separated security module so</font>

92
00:03:52,269 --> 00:03:57,519
it's a<font color="#E5E5E5"> little chip that actually sits</font>

93
00:03:54,970 --> 00:03:59,590
outside<font color="#E5E5E5"> the main</font><font color="#CCCCCC"> CPU and it has its own</font>

94
00:03:57,519 --> 00:04:01,330
access<font color="#CCCCCC"> to shielded memory that means</font>

95
00:03:59,590 --> 00:04:03,250
<font color="#E5E5E5">anything</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> put into</font><font color="#CCCCCC"> it can't be</font>

96
00:04:01,330 --> 00:04:05,440
extracted<font color="#E5E5E5"> by</font><font color="#CCCCCC"> the CPU of</font><font color="#E5E5E5"> the system which</font>

97
00:04:03,250 --> 00:04:07,720
is<font color="#CCCCCC"> useful</font><font color="#E5E5E5"> and they've been ubiquitous in</font>

98
00:04:05,440 --> 00:04:11,140
your laptops<font color="#E5E5E5"> for a while now at the 1.2</font>

99
00:04:07,720 --> 00:04:12,760
level<font color="#CCCCCC"> the main problem with the TPM</font><font color="#E5E5E5"> is</font>

100
00:04:11,140 --> 00:04:15,458
that they actually have<font color="#CCCCCC"> a horrific</font><font color="#E5E5E5"> ly</font>

101
00:04:12,760 --> 00:04:17,409
bad programming experience<font color="#CCCCCC"> I mean really</font>

102
00:04:15,459 --> 00:04:19,870
really<font color="#CCCCCC"> awful and</font><font color="#E5E5E5"> I speak as one who's</font>

103
00:04:17,410 --> 00:04:24,640
actually<font color="#E5E5E5"> tried to</font><font color="#CCCCCC"> use it in the</font><font color="#E5E5E5"> 1.2</font>

104
00:04:19,870 --> 00:04:26,169
incarnation<font color="#CCCCCC"> they have a body</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> people</font>

105
00:04:24,640 --> 00:04:28,240
<font color="#E5E5E5">who look</font><font color="#CCCCCC"> after them</font><font color="#E5E5E5"> called the trusted</font>

106
00:04:26,169 --> 00:04:30,070
computing<font color="#CCCCCC"> group and they mandate this</font>

107
00:04:28,240 --> 00:04:33,130
<font color="#E5E5E5">thing called the trusted secured stack</font>

108
00:04:30,070 --> 00:04:34,630
the TSS and<font color="#E5E5E5"> shorthand jargon and it is</font>

109
00:04:33,130 --> 00:04:37,270
really<font color="#E5E5E5"> appalling you don't need to see</font>

110
00:04:34,630 --> 00:04:39,550
this<font color="#CCCCCC"> all you need to see is that</font><font color="#E5E5E5"> TPM the</font>

111
00:04:37,270 --> 00:04:40,070
actual thing sits down here<font color="#E5E5E5"> the rest of</font>

112
00:04:39,550 --> 00:04:42,410
<font color="#E5E5E5">this</font>

113
00:04:40,070 --> 00:04:44,060
is the trusted<font color="#E5E5E5"> security stack that you</font>

114
00:04:42,410 --> 00:04:47,930
have to use to get<font color="#E5E5E5"> the damn thing</font><font color="#CCCCCC"> to</font>

115
00:04:44,060 --> 00:04:50,930
<font color="#CCCCCC">work</font><font color="#E5E5E5"> now in Linux we had a 1.2 TSS</font>

116
00:04:47,930 --> 00:04:52,580
implementation<font color="#E5E5E5"> cool trousers</font><font color="#CCCCCC"> almost</font>

117
00:04:50,930 --> 00:04:54,800
nobody<font color="#E5E5E5"> will have that installed on their</font>

118
00:04:52,580 --> 00:04:56,810
laptop<font color="#E5E5E5"> most distributions do still</font>

119
00:04:54,800 --> 00:04:59,690
package it<font color="#E5E5E5"> it had a few problems</font><font color="#CCCCCC"> with</font>

120
00:04:56,810 --> 00:05:01,640
the conversion<font color="#CCCCCC"> of open SSL 1.0 to 1.1</font>

121
00:04:59,690 --> 00:05:04,250
and various other things

122
00:05:01,640 --> 00:05:06,500
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> implementation of</font><font color="#CCCCCC"> that huge</font><font color="#E5E5E5"> model</font>

123
00:05:04,250 --> 00:05:07,880
is actually<font color="#CCCCCC"> three-tiered</font><font color="#E5E5E5"> so it has your</font>

124
00:05:06,500 --> 00:05:09,920
application that<font color="#CCCCCC"> you link with the</font>

125
00:05:07,880 --> 00:05:12,350
<font color="#CCCCCC">trousers library it has this thing</font>

126
00:05:09,920 --> 00:05:14,030
<font color="#CCCCCC">called the trusted daemon that actually</font>

127
00:05:12,350 --> 00:05:15,950
has to<font color="#CCCCCC"> run in your</font><font color="#E5E5E5"> system started by</font>

128
00:05:14,030 --> 00:05:17,780
<font color="#E5E5E5">system D this trusted daemon</font>

129
00:05:15,950 --> 00:05:20,090
communicates with the kernel TPM driver

130
00:05:17,780 --> 00:05:22,909
which communicates<font color="#E5E5E5"> with the TPM it looks</font>

131
00:05:20,090 --> 00:05:25,280
simple<font color="#CCCCCC"> the problem is that in order for</font>

132
00:05:22,910 --> 00:05:26,240
the application<font color="#CCCCCC"> to</font><font color="#E5E5E5"> understand how to use</font>

133
00:05:25,280 --> 00:05:28,130
<font color="#E5E5E5">trousers</font>

134
00:05:26,240 --> 00:05:29,510
it actually has<font color="#E5E5E5"> to understand all the</font>

135
00:05:28,130 --> 00:05:31,219
library interfaces so it has to

136
00:05:29,510 --> 00:05:33,650
understand<font color="#E5E5E5"> the trousers API</font><font color="#CCCCCC"> and that's</font>

137
00:05:31,220 --> 00:05:36,230
fine<font color="#E5E5E5"> then you have to understand how the</font>

138
00:05:33,650 --> 00:05:38,450
<font color="#CCCCCC">t</font><font color="#E5E5E5"> CSD actually interacts with the kernel</font>

139
00:05:36,230 --> 00:05:40,880
TPM<font color="#E5E5E5"> and finally you actually need to</font>

140
00:05:38,450 --> 00:05:43,130
<font color="#E5E5E5">understand how the TPM works and the</font>

141
00:05:40,880 --> 00:05:45,110
problem here<font color="#CCCCCC"> is that there is</font><font color="#E5E5E5"> no</font>

142
00:05:43,130 --> 00:05:47,600
encapsulation between any of<font color="#E5E5E5"> the layers</font>

143
00:05:45,110 --> 00:05:49,940
<font color="#E5E5E5">so understanding leaks all the way up</font>

144
00:05:47,600 --> 00:05:52,580
<font color="#CCCCCC">and down this stack and that means that</font>

145
00:05:49,940 --> 00:05:54,530
if you just understand the TPM<font color="#E5E5E5"> you can't</font>

146
00:05:52,580 --> 00:05:56,659
program trousers<font color="#CCCCCC"> if you just understand</font>

147
00:05:54,530 --> 00:05:58,820
the TPM<font color="#CCCCCC"> and</font><font color="#E5E5E5"> T CSD you still can't</font>

148
00:05:56,660 --> 00:06:00,860
program trousers<font color="#CCCCCC"> you need to understand</font>

149
00:05:58,820 --> 00:06:02,180
<font color="#E5E5E5">all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these three</font><font color="#CCCCCC"> components</font><font color="#E5E5E5"> so the</font>

150
00:06:00,860 --> 00:06:04,070
amount of<font color="#E5E5E5"> information you need</font><font color="#CCCCCC"> to</font>

151
00:06:02,180 --> 00:06:06,020
understand is three times<font color="#E5E5E5"> more</font><font color="#CCCCCC"> than is</font>

152
00:06:04,070 --> 00:06:07,909
actually<font color="#CCCCCC"> necessary and this has proved</font>

153
00:06:06,020 --> 00:06:09,950
to<font color="#E5E5E5"> be an almost insurmountable burden</font>

154
00:06:07,910 --> 00:06:12,500
for application programmers with the net

155
00:06:09,950 --> 00:06:13,570
<font color="#CCCCCC">resolve the trousers</font><font color="#E5E5E5"> API is almost never</font>

156
00:06:12,500 --> 00:06:16,070
<font color="#E5E5E5">used</font>

157
00:06:13,570 --> 00:06:18,380
unfortunately the API is<font color="#E5E5E5"> actually quite</font>

158
00:06:16,070 --> 00:06:19,969
<font color="#CCCCCC">useful</font><font color="#E5E5E5"> the idea is that the trousers</font>

159
00:06:18,380 --> 00:06:22,880
library<font color="#E5E5E5"> itself does all the HTML</font>

160
00:06:19,970 --> 00:06:24,980
authentication which means the<font color="#CCCCCC"> T CSD is</font>

161
00:06:22,880 --> 00:06:27,230
doesn't really have too many<font color="#E5E5E5"> secrets</font><font color="#CCCCCC"> in</font>

162
00:06:24,980 --> 00:06:30,140
it<font color="#E5E5E5"> there are ways when secrets actually</font>

163
00:06:27,230 --> 00:06:31,850
flow that way and that way the<font color="#E5E5E5"> T CSD</font>

164
00:06:30,140 --> 00:06:34,159
couldn't accept them so<font color="#CCCCCC"> it does</font>

165
00:06:31,850 --> 00:06:38,810
represent a security problem in your

166
00:06:34,160 --> 00:06:40,460
system<font color="#CCCCCC"> but by and large</font><font color="#E5E5E5"> it's the design</font>

167
00:06:38,810 --> 00:06:44,930
is reasonably<font color="#E5E5E5"> good it's just</font><font color="#CCCCCC"> the</font>

168
00:06:40,460 --> 00:06:47,330
programming API is<font color="#CCCCCC"> awful</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> what we plan</font>

169
00:06:44,930 --> 00:06:51,900
for TPM 2.0 is to try<font color="#E5E5E5"> and do much better</font>

170
00:06:47,330 --> 00:06:53,639
<font color="#CCCCCC">and the problem here</font><font color="#E5E5E5"> is that the trusted</font>

171
00:06:51,900 --> 00:06:56,099
security<font color="#E5E5E5"> groups thought that their model</font>

172
00:06:53,639 --> 00:07:00,449
wasn't complex enough for<font color="#CCCCCC"> 1.2 so they've</font>

173
00:06:56,100 --> 00:07:02,669
<font color="#E5E5E5">made it even worse</font><font color="#CCCCCC"> for 2.0</font><font color="#E5E5E5"> so the actual</font>

174
00:07:00,449 --> 00:07:05,520
<font color="#E5E5E5">tp8 functions that a TPM can do are</font>

175
00:07:02,669 --> 00:07:07,560
<font color="#E5E5E5">shielded key handling</font><font color="#CCCCCC"> measurement which</font>

176
00:07:05,520 --> 00:07:08,789
is<font color="#E5E5E5"> if you've heard about trust at boot</font>

177
00:07:07,560 --> 00:07:10,919
this<font color="#CCCCCC"> is usually the measurement</font>

178
00:07:08,789 --> 00:07:13,080
functions<font color="#E5E5E5"> data</font><font color="#CCCCCC"> sealing that means you</font>

179
00:07:10,919 --> 00:07:15,990
can<font color="#CCCCCC"> actually put</font><font color="#E5E5E5"> private data into a TPM</font>

180
00:07:13,080 --> 00:07:18,000
<font color="#E5E5E5">and not get it out again unless you</font>

181
00:07:15,990 --> 00:07:20,910
satisfy<font color="#CCCCCC"> certain policy conditions</font><font color="#E5E5E5"> and</font>

182
00:07:18,000 --> 00:07:22,860
attestation<font color="#E5E5E5"> the only one I'll actually</font>

183
00:07:20,910 --> 00:07:24,720
be talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> today is shielded key</font>

184
00:07:22,860 --> 00:07:27,870
handling because that's the one that's

185
00:07:24,720 --> 00:07:31,139
<font color="#CCCCCC">most interesting to</font><font color="#E5E5E5"> me so with shielded</font>

186
00:07:27,870 --> 00:07:32,880
key handling<font color="#E5E5E5"> keys in the TPM are stored</font>

187
00:07:31,139 --> 00:07:35,250
in hierarchies with a<font color="#CCCCCC"> well known key at</font>

188
00:07:32,880 --> 00:07:37,680
the top<font color="#CCCCCC"> and I use stored inverted</font><font color="#E5E5E5"> commas</font>

189
00:07:35,250 --> 00:07:39,570
because<font color="#E5E5E5"> everybody thinks of the TPM</font><font color="#CCCCCC"> is a</font>

190
00:07:37,680 --> 00:07:42,360
place to<font color="#CCCCCC"> put keys</font><font color="#E5E5E5"> but it's not actually</font>

191
00:07:39,570 --> 00:07:43,770
true<font color="#E5E5E5"> when</font><font color="#CCCCCC"> a TPM manages your</font><font color="#E5E5E5"> keys the</font>

192
00:07:42,360 --> 00:07:45,720
keys are<font color="#CCCCCC"> actually stored in</font><font color="#E5E5E5"> your file</font>

193
00:07:43,770 --> 00:07:46,530
system outside<font color="#E5E5E5"> the TPM I'll get onto</font>

194
00:07:45,720 --> 00:07:48,539
<font color="#CCCCCC">that in a bit</font>

195
00:07:46,530 --> 00:07:51,150
<font color="#E5E5E5">but the only thing you need</font><font color="#CCCCCC"> to know is</font>

196
00:07:48,539 --> 00:07:53,190
that<font color="#CCCCCC"> as far as the TPM Caesar keys</font><font color="#E5E5E5"> are</font>

197
00:07:51,150 --> 00:07:55,258
always stored<font color="#E5E5E5"> in hierarchies with a</font><font color="#CCCCCC"> well</font>

198
00:07:53,190 --> 00:08:00,590
<font color="#CCCCCC">known root at the</font><font color="#E5E5E5"> top the root is a key</font>

199
00:07:55,259 --> 00:08:02,910
that's actually embedded in the<font color="#E5E5E5"> TPM and</font>

200
00:08:00,590 --> 00:08:04,500
<font color="#CCCCCC">asymmetric encryption keys which is what</font>

201
00:08:02,910 --> 00:08:06,770
we use for identity is stored in

202
00:08:04,500 --> 00:08:10,229
<font color="#CCCCCC">something called</font><font color="#E5E5E5"> the storage hierarchy</font>

203
00:08:06,770 --> 00:08:11,760
so the TPM itself has<font color="#E5E5E5"> four hierarchies</font>

204
00:08:10,229 --> 00:08:15,000
<font color="#CCCCCC">I'll let me be talking about one which</font>

205
00:08:11,760 --> 00:08:18,360
is the storage hierarchy the great thing

206
00:08:15,000 --> 00:08:21,330
about TPM 2.0 as opposed to<font color="#E5E5E5"> 1.2 is it a</font>

207
00:08:18,360 --> 00:08:23,520
features algorithm and agility<font color="#CCCCCC"> so it can</font>

208
00:08:21,330 --> 00:08:26,010
<font color="#E5E5E5">actually do many hashes it can do many</font>

209
00:08:23,520 --> 00:08:28,289
key lengths for RSA and it can do many

210
00:08:26,010 --> 00:08:29,880
elliptic curves<font color="#E5E5E5"> and actually any other</font>

211
00:08:28,289 --> 00:08:31,469
different cryptography that<font color="#E5E5E5"> came along</font>

212
00:08:29,880 --> 00:08:33,450
it<font color="#E5E5E5"> could probably do it</font>

213
00:08:31,470 --> 00:08:35,370
post quantum not sure about<font color="#E5E5E5"> it hasn't</font>

214
00:08:33,450 --> 00:08:37,380
come<font color="#E5E5E5"> along yet but eventually when it</font>

215
00:08:35,370 --> 00:08:40,830
<font color="#E5E5E5">does there would probably be a TPM</font><font color="#CCCCCC"> to Oh</font>

216
00:08:37,380 --> 00:08:44,130
specification for<font color="#E5E5E5"> it TPM 1.2 was</font>

217
00:08:40,830 --> 00:08:46,589
restricted to sha-1<font color="#CCCCCC"> and RSA 2048</font><font color="#E5E5E5"> and</font>

218
00:08:44,130 --> 00:08:49,230
since sha Wan<font color="#E5E5E5"> isn't our suspect hashing</font>

219
00:08:46,589 --> 00:08:51,570
algorithm it makes TPM 1.2 not very

220
00:08:49,230 --> 00:08:53,100
useful for<font color="#E5E5E5"> most of the identity stuff</font>

221
00:08:51,570 --> 00:08:54,750
we're doing<font color="#CCCCCC"> because everybody is now</font>

222
00:08:53,100 --> 00:08:57,930
mandating<font color="#E5E5E5"> sha-256</font>

223
00:08:54,750 --> 00:09:01,190
so the days of actually using TPM 1.2

224
00:08:57,930 --> 00:09:01,189
for security and numbered

225
00:09:02,040 --> 00:09:07,740
the way<font color="#E5E5E5"> TPM</font><font color="#CCCCCC"> 2o works with its agile key</font>

226
00:09:05,310 --> 00:09:09,150
handling is that instead<font color="#E5E5E5"> of generating a</font>

227
00:09:07,740 --> 00:09:11,310
key that sits<font color="#E5E5E5"> at the top of these</font>

228
00:09:09,150 --> 00:09:13,680
hierarchies it generates what's called a

229
00:09:11,310 --> 00:09:17,089
seed a seed is just basically a random

230
00:09:13,680 --> 00:09:20,520
<font color="#E5E5E5">number</font><font color="#CCCCCC"> that can be used to derive a key</font>

231
00:09:17,090 --> 00:09:21,990
so the<font color="#E5E5E5"> TPM</font><font color="#CCCCCC"> toooo goes from seed to</font><font color="#E5E5E5"> key</font>

232
00:09:20,520 --> 00:09:24,240
via something<font color="#CCCCCC"> called a key derivation</font>

233
00:09:21,990 --> 00:09:25,890
function<font color="#CCCCCC"> these are sort of complex</font>

234
00:09:24,240 --> 00:09:27,900
cryptographic things you don't<font color="#E5E5E5"> need to</font>

235
00:09:25,890 --> 00:09:29,970
understand<font color="#CCCCCC"> all</font><font color="#E5E5E5"> you need to know is I</font>

236
00:09:27,900 --> 00:09:31,949
place a long random number in and the

237
00:09:29,970 --> 00:09:37,320
output I get<font color="#E5E5E5"> is a public/private key</font>

238
00:09:31,950 --> 00:09:39,420
pair<font color="#E5E5E5"> for any algorithm and obviously if</font>

239
00:09:37,320 --> 00:09:41,160
I put the same number in<font color="#E5E5E5"> I get the</font><font color="#CCCCCC"> same</font>

240
00:09:39,420 --> 00:09:43,290
<font color="#E5E5E5">key pair out that's</font><font color="#CCCCCC"> the essential</font><font color="#E5E5E5"> thing</font>

241
00:09:41,160 --> 00:09:45,660
of<font color="#E5E5E5"> the key derivation function so the</font>

242
00:09:43,290 --> 00:09:47,490
TPM doesn't really need<font color="#E5E5E5"> to know the</font>

243
00:09:45,660 --> 00:09:50,040
<font color="#CCCCCC">public private</font><font color="#E5E5E5"> key pair for any of its</font>

244
00:09:47,490 --> 00:09:52,260
crypto agile systems<font color="#CCCCCC"> it just uses the</font>

245
00:09:50,040 --> 00:09:54,930
seed to derive<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and that means that if</font>

246
00:09:52,260 --> 00:09:56,760
any<font color="#E5E5E5"> additional crypto was added it could</font>

247
00:09:54,930 --> 00:10:01,380
still use the same seed to derive the

248
00:09:56,760 --> 00:10:04,710
same key pair<font color="#E5E5E5"> the problem with these key</font>

249
00:10:01,380 --> 00:10:06,810
derivation things<font color="#CCCCCC"> is that for RSA the</font>

250
00:10:04,710 --> 00:10:09,960
key derivation<font color="#E5E5E5"> function involves finding</font>

251
00:10:06,810 --> 00:10:13,349
prime numbers and the TPM itself is a

252
00:10:09,960 --> 00:10:15,600
very small<font color="#E5E5E5"> very slow mathematical engine</font>

253
00:10:13,350 --> 00:10:18,540
it takes<font color="#E5E5E5"> it a long time</font><font color="#CCCCCC"> to find prime</font>

254
00:10:15,600 --> 00:10:21,180
numbers<font color="#E5E5E5"> this means that if I actually</font>

255
00:10:18,540 --> 00:10:24,079
tss create primary is the<font color="#CCCCCC"> command he</font>

256
00:10:21,180 --> 00:10:27,630
used to tell<font color="#CCCCCC"> it to</font><font color="#E5E5E5"> go from the seed to</font>

257
00:10:24,080 --> 00:10:29,340
incarnation of the public private key

258
00:10:27,630 --> 00:10:32,010
pair<font color="#CCCCCC"> so I've actually</font><font color="#E5E5E5"> told it generate</font>

259
00:10:29,340 --> 00:10:34,680
an RSA key<font color="#E5E5E5"> from the storage hierarchy</font>

260
00:10:32,010 --> 00:10:36,990
and if you look at the timings<font color="#E5E5E5"> you see</font>

261
00:10:34,680 --> 00:10:38,189
it took<font color="#E5E5E5"> this is on my actual laptop so</font>

262
00:10:36,990 --> 00:10:42,090
this is one<font color="#CCCCCC"> of the more modern</font>

263
00:10:38,190 --> 00:10:43,920
<font color="#CCCCCC">Louboutins 6x</font><font color="#E5E5E5"> TPMS it took it 43</font><font color="#CCCCCC"> seconds</font>

264
00:10:42,090 --> 00:10:46,350
<font color="#E5E5E5">to generate</font><font color="#CCCCCC"> the public/private key pair</font>

265
00:10:43,920 --> 00:10:48,000
using<font color="#E5E5E5"> the prime generation functions so</font>

266
00:10:46,350 --> 00:10:49,880
this is not<font color="#E5E5E5"> something you want</font><font color="#CCCCCC"> to do</font>

267
00:10:48,000 --> 00:10:52,230
with every cryptographic operation

268
00:10:49,880 --> 00:10:53,939
obviously elliptic curve keys can be

269
00:10:52,230 --> 00:10:56,400
generated<font color="#E5E5E5"> much faster</font><font color="#CCCCCC"> because the way</font>

270
00:10:53,940 --> 00:11:01,590
elliptic curve works but RSA keys take

271
00:10:56,400 --> 00:11:03,209
an age to<font color="#E5E5E5"> generate the sort storage</font><font color="#CCCCCC"> seed</font>

272
00:11:01,590 --> 00:11:05,910
changes if the TPM has ever

273
00:11:03,210 --> 00:11:07,770
reinitialized so this means<font color="#E5E5E5"> that if your</font>

274
00:11:05,910 --> 00:11:10,170
security<font color="#CCCCCC"> is compromised you</font><font color="#E5E5E5"> can just</font>

275
00:11:07,770 --> 00:11:12,120
reinitialize<font color="#CCCCCC"> the TPM</font><font color="#E5E5E5"> and every key you</font>

276
00:11:10,170 --> 00:11:13,089
put into<font color="#CCCCCC"> it is wiped because they can no</font>

277
00:11:12,120 --> 00:11:16,600
longer<font color="#E5E5E5"> be understood</font>

278
00:11:13,089 --> 00:11:18,910
the TPM itself<font color="#E5E5E5"> case to be inserted into</font>

279
00:11:16,600 --> 00:11:21,309
<font color="#E5E5E5">the TPM are encrypted based on a known</font>

280
00:11:18,910 --> 00:11:22,749
public key<font color="#CCCCCC"> that known public key is the</font>

281
00:11:21,309 --> 00:11:24,819
root of<font color="#E5E5E5"> the storage hierarchy the</font>

282
00:11:22,749 --> 00:11:28,779
storage seed or<font color="#E5E5E5"> the key you</font><font color="#CCCCCC"> derived</font><font color="#E5E5E5"> from</font>

283
00:11:24,819 --> 00:11:30,878
the storage<font color="#CCCCCC"> see and that means that</font><font color="#E5E5E5"> only</font>

284
00:11:28,779 --> 00:11:32,529
the TPM itself can decrypt them when you

285
00:11:30,879 --> 00:11:36,399
put<font color="#E5E5E5"> them in so this is what the security</font>

286
00:11:32,529 --> 00:11:38,949
<font color="#CCCCCC">of the system relies on and once the key</font>

287
00:11:36,399 --> 00:11:41,499
<font color="#E5E5E5">is actually</font><font color="#CCCCCC"> translated TPM form it</font>

288
00:11:38,949 --> 00:11:43,930
cannot be<font color="#CCCCCC"> translated back</font><font color="#E5E5E5"> so once you</font>

289
00:11:41,499 --> 00:11:46,540
have the TPM<font color="#CCCCCC"> form form of a private key</font>

290
00:11:43,930 --> 00:11:48,758
<font color="#E5E5E5">you cannot go back to</font><font color="#CCCCCC"> the non TPM form</font>

291
00:11:46,540 --> 00:11:50,939
<font color="#E5E5E5">so it's a one-way</font><font color="#CCCCCC"> function you don't get</font>

292
00:11:48,759 --> 00:11:53,439
the key<font color="#E5E5E5"> back ever</font>

293
00:11:50,939 --> 00:11:56,139
this means<font color="#E5E5E5"> that can never be extracted</font>

294
00:11:53,439 --> 00:11:59,379
which is useful for security so if<font color="#E5E5E5"> I</font>

295
00:11:56,139 --> 00:12:01,870
tell you about TPM<font color="#E5E5E5"> -</font><font color="#CCCCCC"> oh like one</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> -</font>

296
00:11:59,379 --> 00:12:04,930
as I<font color="#E5E5E5"> said the trusted computing</font><font color="#CCCCCC"> group is</font>

297
00:12:01,870 --> 00:12:07,209
writing<font color="#E5E5E5"> it trusted security stack for it</font>

298
00:12:04,930 --> 00:12:09,189
and it looks like this<font color="#E5E5E5"> so it's got their</font>

299
00:12:07,209 --> 00:12:11,229
usual levels of complexity<font color="#E5E5E5"> in fact it's</font>

300
00:12:09,189 --> 00:12:12,879
<font color="#E5E5E5">got a few more levels of complexity</font><font color="#CCCCCC"> new</font>

301
00:12:11,230 --> 00:12:15,339
things have appeared like a resource

302
00:12:12,879 --> 00:12:17,829
manager for various reasons and the API

303
00:12:15,339 --> 00:12:20,529
instead of<font color="#E5E5E5"> there only being one API at</font>

304
00:12:17,829 --> 00:12:23,109
the top there are now<font color="#CCCCCC"> technically</font><font color="#E5E5E5"> four</font>

305
00:12:20,529 --> 00:12:24,610
because<font color="#E5E5E5"> tick</font><font color="#CCCCCC"> T</font><font color="#E5E5E5"> itself is also an API</font><font color="#CCCCCC"> so</font>

306
00:12:23,110 --> 00:12:27,339
we've got<font color="#CCCCCC"> about four times the</font>

307
00:12:24,610 --> 00:12:31,209
complexity we had in<font color="#CCCCCC"> 1.2 which most</font>

308
00:12:27,339 --> 00:12:32,740
<font color="#E5E5E5">people agree was an unusable API and the</font>

309
00:12:31,209 --> 00:12:34,329
problem is<font color="#E5E5E5"> that it's still</font><font color="#CCCCCC"> not complete</font>

310
00:12:32,740 --> 00:12:36,699
if you actually<font color="#E5E5E5"> look at this</font><font color="#CCCCCC"> they've got</font>

311
00:12:34,329 --> 00:12:38,290
as far<font color="#E5E5E5"> as</font><font color="#CCCCCC"> writing</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of this</font><font color="#E5E5E5"> the</font>

312
00:12:36,699 --> 00:12:40,569
resource<font color="#E5E5E5"> manager spec isn't quite</font>

313
00:12:38,290 --> 00:12:43,509
finished<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's about their system API</font>

314
00:12:40,569 --> 00:12:44,949
exists isapi is not standardized<font color="#CCCCCC"> then</font>

315
00:12:43,509 --> 00:12:46,809
the feature<font color="#CCCCCC"> API is still</font><font color="#E5E5E5"> going through</font>

316
00:12:44,949 --> 00:12:52,109
<font color="#CCCCCC">some weird iterations that</font><font color="#E5E5E5"> I didn't</font>

317
00:12:46,809 --> 00:12:55,209
really understand and in theory<font color="#CCCCCC"> a</font>

318
00:12:52,110 --> 00:12:57,910
resource manager is now required for TPM

319
00:12:55,209 --> 00:13:00,309
<font color="#CCCCCC">200 because it has space for only 3</font>

320
00:12:57,910 --> 00:13:02,259
transient objects every key you insert

321
00:13:00,309 --> 00:13:04,689
into<font color="#E5E5E5"> a TPM is effectively a transient</font>

322
00:13:02,259 --> 00:13:06,790
object so this is why the TPM itself

323
00:13:04,689 --> 00:13:09,069
<font color="#E5E5E5">doesn't store your keys what it stores</font>

324
00:13:06,790 --> 00:13:10,779
<font color="#E5E5E5">is an offline representation that you</font>

325
00:13:09,069 --> 00:13:13,120
<font color="#E5E5E5">load into the TPM when you wanted to do</font>

326
00:13:10,779 --> 00:13:14,920
an operation<font color="#CCCCCC"> and then unload again and</font>

327
00:13:13,120 --> 00:13:16,569
the reason<font color="#CCCCCC"> you have to</font><font color="#E5E5E5"> have a resource</font>

328
00:13:14,920 --> 00:13:18,639
manager is because<font color="#CCCCCC"> if I have many</font>

329
00:13:16,569 --> 00:13:20,920
operations trying to do this<font color="#E5E5E5"> they're</font>

330
00:13:18,639 --> 00:13:23,860
<font color="#E5E5E5">actually going to overflow</font><font color="#CCCCCC"> the 3 object</font>

331
00:13:20,920 --> 00:13:24,939
key space<font color="#E5E5E5"> so if on my</font><font color="#CCCCCC"> laptop</font><font color="#E5E5E5"> I'm running</font>

332
00:13:23,860 --> 00:13:27,220
a VPN and

333
00:13:24,940 --> 00:13:29,290
running my<font color="#CCCCCC"> GPG and I'm</font><font color="#E5E5E5"> running my</font><font color="#CCCCCC"> SSH</font>

334
00:13:27,220 --> 00:13:31,570
they all try<font color="#CCCCCC"> and do a</font><font color="#E5E5E5"> signature at once</font>

335
00:13:29,290 --> 00:13:33,670
the TPM<font color="#CCCCCC"> is going to run</font><font color="#E5E5E5"> out of space</font><font color="#CCCCCC"> so</font>

336
00:13:31,570 --> 00:13:35,980
a resource manager actually<font color="#E5E5E5"> ensures the</font>

337
00:13:33,670 --> 00:13:39,040
TPM doesn't run out<font color="#CCCCCC"> of</font><font color="#E5E5E5"> space because</font><font color="#CCCCCC"> it</font>

338
00:13:35,980 --> 00:13:42,520
manages<font color="#CCCCCC"> the transient object</font><font color="#E5E5E5"> layouts and</font>

339
00:13:39,040 --> 00:13:44,110
as of the Linux 412 kernel<font color="#E5E5E5"> the TPM</font><font color="#CCCCCC"> - oh</font>

340
00:13:42,520 --> 00:13:46,750
<font color="#E5E5E5">resource manager is actually present</font>

341
00:13:44,110 --> 00:13:48,370
<font color="#CCCCCC">inside the</font><font color="#E5E5E5"> kernel</font><font color="#CCCCCC"> so you can just rely</font>

342
00:13:46,750 --> 00:13:49,120
on<font color="#E5E5E5"> the kernel to do this you</font><font color="#CCCCCC"> don't need</font>

343
00:13:48,370 --> 00:13:52,810
anything else

344
00:13:49,120 --> 00:13:54,970
fortunately<font color="#CCCCCC"> Intel is actually building a</font>

345
00:13:52,810 --> 00:13:56,979
trusted<font color="#E5E5E5"> secure to stack to this TCG</font>

346
00:13:54,970 --> 00:13:59,970
specifications it's up there<font color="#CCCCCC"> on github</font>

347
00:13:56,980 --> 00:14:02,920
<font color="#CCCCCC">under the Intel github account TPM - TSS</font>

348
00:13:59,970 --> 00:14:05,320
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> currently unfortunately unusable</font>

349
00:14:02,920 --> 00:14:07,630
<font color="#CCCCCC">for my crypto applications because I</font>

350
00:14:05,320 --> 00:14:09,700
need<font color="#E5E5E5"> secure key handling going in and</font>

351
00:14:07,630 --> 00:14:11,770
<font color="#E5E5E5">out of the TPM and I need secure</font>

352
00:14:09,700 --> 00:14:13,510
authentication handling and it just so

353
00:14:11,770 --> 00:14:15,880
happens those are<font color="#E5E5E5"> features of</font><font color="#CCCCCC"> the things</font>

354
00:14:13,510 --> 00:14:18,700
called the<font color="#CCCCCC"> ISA P API which currently</font>

355
00:14:15,880 --> 00:14:22,480
isn't standardized<font color="#CCCCCC"> so the Intel TSS does</font>

356
00:14:18,700 --> 00:14:24,100
not currently<font color="#E5E5E5"> have e sappy</font><font color="#CCCCCC"> as of</font><font color="#E5E5E5"> today I</font>

357
00:14:22,480 --> 00:14:26,260
think<font color="#E5E5E5"> two days ago they posted a message</font>

358
00:14:24,100 --> 00:14:28,180
<font color="#CCCCCC">to the mailing list</font><font color="#E5E5E5"> saying they were</font>

359
00:14:26,260 --> 00:14:30,069
actually working on e<font color="#E5E5E5"> sappy and would</font>

360
00:14:28,180 --> 00:14:32,290
<font color="#E5E5E5">get it based on the beta version of the</font>

361
00:14:30,070 --> 00:14:33,880
<font color="#E5E5E5">spec so perhaps they will at one day</font>

362
00:14:32,290 --> 00:14:37,120
have it but right<font color="#E5E5E5"> at the moment they</font>

363
00:14:33,880 --> 00:14:39,520
<font color="#E5E5E5">don't iBM has actually built a fully</font>

364
00:14:37,120 --> 00:14:40,960
functional trusted secure stack and it's

365
00:14:39,520 --> 00:14:43,840
fully complete it's sitting on

366
00:14:40,960 --> 00:14:46,000
<font color="#CCCCCC">SourceForge at IBM TSS</font><font color="#E5E5E5"> -</font><font color="#CCCCCC"> oh but</font><font color="#E5E5E5"> it's</font>

367
00:14:43,840 --> 00:14:47,410
based on the<font color="#E5E5E5"> TPM</font><font color="#CCCCCC"> - commands</font><font color="#E5E5E5"> it's not</font>

368
00:14:46,000 --> 00:14:50,350
actually based<font color="#E5E5E5"> on any of that</font>

369
00:14:47,410 --> 00:14:52,270
<font color="#E5E5E5">complicated TCG stuff so if you</font>

370
00:14:50,350 --> 00:14:55,060
understand the TPM commands<font color="#E5E5E5"> you can</font>

371
00:14:52,270 --> 00:14:56,770
<font color="#CCCCCC">actually use this IBM stack which is</font>

372
00:14:55,060 --> 00:14:58,449
actually very<font color="#CCCCCC"> useful for me because it</font>

373
00:14:56,770 --> 00:15:00,790
means<font color="#E5E5E5"> that I only need to understand</font><font color="#CCCCCC"> a</font>

374
00:14:58,450 --> 00:15:02,500
very<font color="#E5E5E5"> small piece of</font><font color="#CCCCCC"> the trusted secure</font>

375
00:15:00,790 --> 00:15:04,930
stack<font color="#E5E5E5"> actually to get everything working</font>

376
00:15:02,500 --> 00:15:07,360
<font color="#E5E5E5">and the great thing about the IBM TSS is</font>

377
00:15:04,930 --> 00:15:10,180
<font color="#E5E5E5">that it does all the necessary crypto</font>

378
00:15:07,360 --> 00:15:12,010
for<font color="#CCCCCC"> H Mac and command parameter</font>

379
00:15:10,180 --> 00:15:13,750
decryption<font color="#E5E5E5"> and response encryption in</font>

380
00:15:12,010 --> 00:15:15,370
the background<font color="#CCCCCC"> so I don't need</font><font color="#E5E5E5"> to worry</font>

381
00:15:13,750 --> 00:15:17,710
<font color="#CCCCCC">about that so it's as functional as</font>

382
00:15:15,370 --> 00:15:19,810
isapi would be from the security<font color="#E5E5E5"> point</font>

383
00:15:17,710 --> 00:15:21,760
of view<font color="#E5E5E5"> but it's just based on the TPM</font>

384
00:15:19,810 --> 00:15:23,739
commands which I find very easy to use

385
00:15:21,760 --> 00:15:25,630
and the<font color="#CCCCCC"> other really</font><font color="#E5E5E5"> great</font><font color="#CCCCCC"> thing about</font>

386
00:15:23,740 --> 00:15:28,690
it is<font color="#E5E5E5"> it makes</font><font color="#CCCCCC"> a direct connection</font><font color="#E5E5E5"> to</font>

387
00:15:25,630 --> 00:15:30,670
the<font color="#CCCCCC"> in kernel resource manager itself so</font>

388
00:15:28,690 --> 00:15:32,410
it doesn't rely on a daemon and the

389
00:15:30,670 --> 00:15:34,390
reason this is<font color="#CCCCCC"> a great thing</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> because</font>

390
00:15:32,410 --> 00:15:36,630
some of<font color="#E5E5E5"> the demos I'll show you before I</font>

391
00:15:34,390 --> 00:15:39,780
did this for TPM 2.0 I did

392
00:15:36,630 --> 00:15:42,450
TPM 1.2<font color="#CCCCCC"> and I actually have a TPM 1.2</font>

393
00:15:39,780 --> 00:15:44,880
laptop<font color="#E5E5E5"> sitting at home that I used to</font>

394
00:15:42,450 --> 00:15:47,460
<font color="#E5E5E5">use and it used the the user experience</font>

395
00:15:44,880 --> 00:15:49,890
was frightful because every<font color="#E5E5E5"> time the</font>

396
00:15:47,460 --> 00:15:51,780
<font color="#CCCCCC">demon crashed all of my keys were lost</font>

397
00:15:49,890 --> 00:15:53,880
and I had to reinitialize all the crypto

398
00:15:51,780 --> 00:15:55,170
<font color="#CCCCCC">systems</font><font color="#E5E5E5"> so this meant that the demon</font>

399
00:15:53,880 --> 00:15:58,140
would just crash<font color="#E5E5E5"> and I wouldn't notice</font>

400
00:15:55,170 --> 00:15:59,729
my VPNs would all collapse<font color="#CCCCCC"> my SSH</font>

401
00:15:58,140 --> 00:16:02,400
<font color="#E5E5E5">commands suddenly wouldn't be able to</font>

402
00:15:59,730 --> 00:16:05,310
<font color="#E5E5E5">real</font><font color="#CCCCCC"> antic 8 so I'd have to</font><font color="#E5E5E5"> restart the</font>

403
00:16:02,400 --> 00:16:07,050
<font color="#E5E5E5">daemon shut down my VPNs</font><font color="#CCCCCC"> stop my SSH</font>

404
00:16:05,310 --> 00:16:09,270
sessions do everything else<font color="#E5E5E5"> and then</font>

405
00:16:07,050 --> 00:16:10,979
restart<font color="#E5E5E5"> it all again it's the user</font>

406
00:16:09,270 --> 00:16:13,590
experience<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the trousers daemon is</font>

407
00:16:10,980 --> 00:16:16,170
terrible now I do believe<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we do</font>

408
00:16:13,590 --> 00:16:18,540
understand<font color="#E5E5E5"> how to code</font><font color="#CCCCCC"> daemons essential</font>

409
00:16:16,170 --> 00:16:20,370
to system function that don't crash<font color="#E5E5E5"> so</font>

410
00:16:18,540 --> 00:16:22,920
it should<font color="#CCCCCC"> be possible to</font><font color="#E5E5E5"> fix trousers</font>

411
00:16:20,370 --> 00:16:25,200
<font color="#E5E5E5">it's just that nobody understands it</font>

412
00:16:22,920 --> 00:16:27,030
<font color="#CCCCCC">well enough</font><font color="#E5E5E5"> nobody can bothered actually</font>

413
00:16:25,200 --> 00:16:29,280
to go in there and do<font color="#E5E5E5"> this which</font><font color="#CCCCCC"> is why</font>

414
00:16:27,030 --> 00:16:31,800
it's still<font color="#CCCCCC"> a horrific experience for</font>

415
00:16:29,280 --> 00:16:35,189
<font color="#E5E5E5">everybody concerned so I regard having</font>

416
00:16:31,800 --> 00:16:38,910
no demons<font color="#E5E5E5"> in the IBM TSS</font><font color="#CCCCCC"> 2 o stack as an</font>

417
00:16:35,190 --> 00:16:41,190
<font color="#E5E5E5">enormous plus point because the IBM -</font><font color="#CCCCCC"> o</font>

418
00:16:38,910 --> 00:16:43,110
<font color="#E5E5E5">TSS has just worked for me from</font><font color="#CCCCCC"> day one</font>

419
00:16:41,190 --> 00:16:48,150
<font color="#CCCCCC">on the laptop which</font><font color="#E5E5E5"> i think</font><font color="#CCCCCC"> is very</font>

420
00:16:43,110 --> 00:16:51,060
<font color="#CCCCCC">useful for a security system and</font><font color="#E5E5E5"> without</font>

421
00:16:48,150 --> 00:16:52,740
isapi that<font color="#CCCCCC"> also means that</font><font color="#E5E5E5"> the IBM stack</font>

422
00:16:51,060 --> 00:16:54,689
is the<font color="#CCCCCC"> only</font><font color="#E5E5E5"> current choice for</font>

423
00:16:52,740 --> 00:16:57,030
performing security related<font color="#E5E5E5"> functions</font>

424
00:16:54,690 --> 00:16:58,920
<font color="#E5E5E5">security related function is anything</font>

425
00:16:57,030 --> 00:17:00,900
anything where you need<font color="#E5E5E5"> to secure the</font>

426
00:16:58,920 --> 00:17:02,880
communication between your<font color="#CCCCCC"> application</font>

427
00:17:00,900 --> 00:17:04,709
and<font color="#E5E5E5"> the TPM because you're using it to</font>

428
00:17:02,880 --> 00:17:06,750
<font color="#E5E5E5">pass secrets so that's anything that</font>

429
00:17:04,709 --> 00:17:08,579
<font color="#CCCCCC">requires authentication</font><font color="#E5E5E5"> anything that</font>

430
00:17:06,750 --> 00:17:11,250
requires the passing<font color="#CCCCCC"> n of private keys</font>

431
00:17:08,579 --> 00:17:13,948
you require<font color="#E5E5E5"> security on that channel</font>

432
00:17:11,250 --> 00:17:16,770
<font color="#E5E5E5">because the TSS does not mandate any</font>

433
00:17:13,949 --> 00:17:19,589
<font color="#E5E5E5">that TPM can actually be connected</font><font color="#CCCCCC"> over</font>

434
00:17:16,770 --> 00:17:21,389
<font color="#CCCCCC">the</font><font color="#E5E5E5"> Internet to your application</font><font color="#CCCCCC"> and the</font>

435
00:17:19,589 --> 00:17:22,889
packets<font color="#E5E5E5"> the command packets it sends</font>

436
00:17:21,390 --> 00:17:24,630
over<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Internet are just the</font>

437
00:17:22,890 --> 00:17:26,819
effectively the ones that you placed

438
00:17:24,630 --> 00:17:28,980
<font color="#E5E5E5">into it and if you don't use the</font>

439
00:17:26,819 --> 00:17:30,510
<font color="#E5E5E5">security functions of the TPM it'll be</font>

440
00:17:28,980 --> 00:17:32,070
sending your private keys over the

441
00:17:30,510 --> 00:17:37,980
<font color="#E5E5E5">Internet in clear form which you</font>

442
00:17:32,070 --> 00:17:40,110
<font color="#E5E5E5">definitely</font><font color="#CCCCCC"> don't want so to</font><font color="#E5E5E5"> build a</font>

443
00:17:37,980 --> 00:17:43,050
secure crypto system you<font color="#CCCCCC"> actually need</font>

444
00:17:40,110 --> 00:17:44,909
<font color="#E5E5E5">only</font><font color="#CCCCCC"> fought to understand only five TPM</font>

445
00:17:43,050 --> 00:17:47,310
commands<font color="#E5E5E5"> which is useful</font><font color="#CCCCCC"> there are a</font>

446
00:17:44,910 --> 00:17:48,049
<font color="#E5E5E5">couple of</font><font color="#CCCCCC"> hundred TPM commands</font><font color="#E5E5E5"> but I can</font>

447
00:17:47,310 --> 00:17:50,309
actually<font color="#E5E5E5"> build</font>

448
00:17:48,049 --> 00:17:52,320
cryptosystem only understanding<font color="#E5E5E5"> five of</font>

449
00:17:50,309 --> 00:17:54,450
them which means that the<font color="#E5E5E5"> amount of the</font>

450
00:17:52,320 --> 00:17:56,460
even<font color="#E5E5E5"> the command api</font><font color="#CCCCCC"> i need to</font>

451
00:17:54,450 --> 00:17:58,379
understand is fairly small<font color="#CCCCCC"> it's still</font>

452
00:17:56,460 --> 00:18:01,289
rather complicated<font color="#CCCCCC"> but it is fairly</font>

453
00:17:58,379 --> 00:18:04,019
<font color="#CCCCCC">small so there's this command called TPM</font>

454
00:18:01,289 --> 00:18:07,169
to<font color="#E5E5E5"> create this creates a public/private</font>

455
00:18:04,019 --> 00:18:09,149
key pair on the TPM you use this if you

456
00:18:07,169 --> 00:18:10,980
<font color="#E5E5E5">want a public/private key pair that's</font>

457
00:18:09,149 --> 00:18:13,408
actually tied to<font color="#CCCCCC"> your laptop</font><font color="#E5E5E5"> because</font>

458
00:18:10,980 --> 00:18:15,750
<font color="#E5E5E5">that key can never be removed</font><font color="#CCCCCC"> from the</font>

459
00:18:13,409 --> 00:18:18,750
TPM that means that if you<font color="#E5E5E5"> change laptop</font>

460
00:18:15,750 --> 00:18:20,309
you lose the key<font color="#CCCCCC"> it has this thing</font>

461
00:18:18,750 --> 00:18:21,840
called<font color="#CCCCCC"> a</font><font color="#E5E5E5"> parent handle which tells it</font>

462
00:18:20,309 --> 00:18:24,029
where the parent and<font color="#CCCCCC"> the</font><font color="#E5E5E5"> hierarchy</font><font color="#CCCCCC"> is</font>

463
00:18:21,840 --> 00:18:26,490
<font color="#E5E5E5">usually you use the storage root key for</font>

464
00:18:24,029 --> 00:18:28,590
that<font color="#CCCCCC"> it has an authority parameter which</font>

465
00:18:26,490 --> 00:18:30,240
<font color="#E5E5E5">is basically a passphrase you put into</font>

466
00:18:28,590 --> 00:18:31,889
the key so obviously when<font color="#E5E5E5"> you're</font>

467
00:18:30,240 --> 00:18:33,360
creating the key you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to secure</font><font color="#E5E5E5"> this</font>

468
00:18:31,889 --> 00:18:34,830
and<font color="#E5E5E5"> then it has the public key</font>

469
00:18:33,360 --> 00:18:37,139
parameters which tell it what you<font color="#E5E5E5"> want</font>

470
00:18:34,830 --> 00:18:41,250
like<font color="#E5E5E5"> you know I want an RSA key I want</font>

471
00:18:37,139 --> 00:18:43,559
<font color="#E5E5E5">to be 2048 bits and so on there's an</font>

472
00:18:41,250 --> 00:18:45,899
import command which you<font color="#E5E5E5"> use</font><font color="#CCCCCC"> to import</font>

473
00:18:43,559 --> 00:18:47,940
external private keys this<font color="#CCCCCC"> is mostly</font>

474
00:18:45,899 --> 00:18:49,979
<font color="#E5E5E5">what I use</font><font color="#CCCCCC"> for programming</font><font color="#E5E5E5"> crypto</font>

475
00:18:47,940 --> 00:18:52,590
systems because my private keys mostly

476
00:18:49,980 --> 00:18:56,549
exist so<font color="#CCCCCC"> for</font><font color="#E5E5E5"> instance when I use it with</font>

477
00:18:52,590 --> 00:18:58,439
<font color="#CCCCCC">GPG</font><font color="#E5E5E5"> I want to take my certification</font><font color="#CCCCCC"> GPG</font>

478
00:18:56,549 --> 00:18:59,970
key and just<font color="#E5E5E5"> place</font><font color="#CCCCCC"> it into</font><font color="#E5E5E5"> the TPM</font><font color="#CCCCCC"> I</font>

479
00:18:58,440 --> 00:19:02,279
don't want to have to regenerate<font color="#CCCCCC"> a new</font>

480
00:18:59,970 --> 00:19:05,159
<font color="#CCCCCC">GPG key and spend two years getting</font>

481
00:19:02,279 --> 00:19:07,529
everybody else to sign it<font color="#E5E5E5"> the import</font>

482
00:19:05,159 --> 00:19:09,600
<font color="#E5E5E5">actually takes the parent handle of the</font>

483
00:19:07,529 --> 00:19:12,000
public parameters and the actual private

484
00:19:09,600 --> 00:19:13,620
key<font color="#E5E5E5"> itself and the TPM will then spit</font>

485
00:19:12,000 --> 00:19:16,080
back its form of it

486
00:19:13,620 --> 00:19:18,600
so both commands<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> do nothing to</font>

487
00:19:16,080 --> 00:19:21,269
this TPM or volatile memory<font color="#CCCCCC"> all they do</font>

488
00:19:18,600 --> 00:19:22,769
is they spit back<font color="#CCCCCC"> to structures a public</font>

489
00:19:21,269 --> 00:19:25,409
key which also has all<font color="#CCCCCC"> the</font><font color="#E5E5E5"> visible</font>

490
00:19:22,769 --> 00:19:27,509
parameters<font color="#E5E5E5"> and a private key blob which</font>

491
00:19:25,409 --> 00:19:30,720
is only<font color="#E5E5E5"> readable by the TPM this is</font>

492
00:19:27,509 --> 00:19:33,360
actually encoded<font color="#E5E5E5"> usually with an aes 256</font>

493
00:19:30,720 --> 00:19:35,279
key<font color="#E5E5E5"> that is was regenerate generated by</font>

494
00:19:33,360 --> 00:19:37,590
the TPM when it generated<font color="#E5E5E5"> the storage</font>

495
00:19:35,279 --> 00:19:39,240
seed so the<font color="#CCCCCC"> point is</font><font color="#E5E5E5"> that this</font><font color="#CCCCCC"> is</font>

496
00:19:37,590 --> 00:19:43,559
strongly encrypted<font color="#CCCCCC"> and can only</font><font color="#E5E5E5"> be</font>

497
00:19:39,240 --> 00:19:46,169
decrypted by the TPM itself but the

498
00:19:43,559 --> 00:19:48,120
public key<font color="#E5E5E5"> is bound to the private key</font>

499
00:19:46,169 --> 00:19:50,730
sorry about the spelling mistake by a

500
00:19:48,120 --> 00:19:52,678
hash<font color="#CCCCCC"> that means that even</font><font color="#E5E5E5"> though the</font>

501
00:19:50,730 --> 00:19:54,210
<font color="#E5E5E5">public key is and the clear and</font>

502
00:19:52,679 --> 00:19:56,190
<font color="#E5E5E5">therefore you could alter the parameters</font>

503
00:19:54,210 --> 00:19:58,289
<font color="#CCCCCC">if you alter any parameters in it</font>

504
00:19:56,190 --> 00:20:00,269
<font color="#CCCCCC">maliciously the TPM will detect that and</font>

505
00:19:58,289 --> 00:20:01,120
reject your key one of the checks<font color="#E5E5E5"> it</font>

506
00:20:00,269 --> 00:20:02,980
actually does

507
00:20:01,120 --> 00:20:04,689
only does<font color="#E5E5E5"> that check parameters but it</font>

508
00:20:02,980 --> 00:20:06,520
<font color="#E5E5E5">actually also checks the public he</font>

509
00:20:04,690 --> 00:20:09,940
matches<font color="#E5E5E5"> the private portion whenever you</font>

510
00:20:06,520 --> 00:20:12,430
use it but<font color="#CCCCCC"> whenever you want to</font><font color="#E5E5E5"> use the</font>

511
00:20:09,940 --> 00:20:14,290
TPM for a shielded key operation you

512
00:20:12,430 --> 00:20:16,059
have to<font color="#E5E5E5"> present it with both this public</font>

513
00:20:14,290 --> 00:20:18,580
and private blob before you can start

514
00:20:16,059 --> 00:20:20,320
that shielded operation<font color="#E5E5E5"> this means that</font>

515
00:20:18,580 --> 00:20:23,590
you the user<font color="#CCCCCC"> are responsible</font><font color="#E5E5E5"> for</font>

516
00:20:20,320 --> 00:20:25,720
<font color="#E5E5E5">managing all</font><font color="#CCCCCC"> of this data</font><font color="#E5E5E5"> there's a</font>

517
00:20:23,590 --> 00:20:27,580
command<font color="#E5E5E5"> called TPM</font><font color="#CCCCCC"> to load which is</font>

518
00:20:25,720 --> 00:20:29,110
<font color="#E5E5E5">actually used to load this public and</font>

519
00:20:27,580 --> 00:20:31,750
private blob<font color="#E5E5E5"> and you tell it</font><font color="#CCCCCC"> what the</font>

520
00:20:29,110 --> 00:20:33,159
parent key is this requires no security

521
00:20:31,750 --> 00:20:34,660
at all<font color="#E5E5E5"> because the private blob is</font>

522
00:20:33,160 --> 00:20:36,670
already encrypted<font color="#E5E5E5"> and you don't care if</font>

523
00:20:34,660 --> 00:20:38,679
<font color="#CCCCCC">anybody sees your public key</font><font color="#E5E5E5"> so this is</font>

524
00:20:36,670 --> 00:20:40,600
actually<font color="#E5E5E5"> rather a nice command and then</font>

525
00:20:38,679 --> 00:20:43,530
after you've loaded<font color="#E5E5E5"> the key you can use</font>

526
00:20:40,600 --> 00:20:45,730
<font color="#E5E5E5">signing which just works</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> you can use</font>

527
00:20:43,530 --> 00:20:47,740
<font color="#E5E5E5">decryption which is what people you use</font>

528
00:20:45,730 --> 00:20:51,070
to decrypt<font color="#E5E5E5"> messages encrypted to your</font>

529
00:20:47,740 --> 00:20:53,080
public key<font color="#E5E5E5"> this is slightly cheating I</font>

530
00:20:51,070 --> 00:20:54,850
told you there were five commands but if

531
00:20:53,080 --> 00:20:56,949
you notice<font color="#CCCCCC"> I've got</font><font color="#E5E5E5"> two commands one on</font>

532
00:20:54,850 --> 00:20:59,889
<font color="#E5E5E5">top</font><font color="#CCCCCC"> of each other this</font><font color="#E5E5E5"> is because the</font>

533
00:20:56,950 --> 00:21:01,450
way decryption<font color="#CCCCCC"> works with RSA is not the</font>

534
00:20:59,890 --> 00:21:03,610
same as the way it works with elliptic

535
00:21:01,450 --> 00:21:05,590
keys and it can't<font color="#E5E5E5"> be made to look the</font>

536
00:21:03,610 --> 00:21:07,110
same<font color="#E5E5E5"> so signatures just look the same</font>

537
00:21:05,590 --> 00:21:09,669
whether you have an elliptic key

538
00:21:07,110 --> 00:21:11,010
<font color="#E5E5E5">elliptic curve private key or an RSA</font>

539
00:21:09,670 --> 00:21:12,580
private<font color="#CCCCCC"> key it just works</font>

540
00:21:11,010 --> 00:21:14,860
unfortunately you actually have to

541
00:21:12,580 --> 00:21:17,559
understand the difference<font color="#CCCCCC"> between RSA</font>

542
00:21:14,860 --> 00:21:19,090
decryption<font color="#E5E5E5"> and for elliptic curve</font>

543
00:21:17,559 --> 00:21:21,580
private keys you can't you<font color="#E5E5E5"> don't</font>

544
00:21:19,090 --> 00:21:23,889
actually<font color="#E5E5E5"> have a private key decryption a</font>

545
00:21:21,580 --> 00:21:25,928
private key decryption function what<font color="#CCCCCC"> you</font>

546
00:21:23,890 --> 00:21:27,640
have to do is<font color="#E5E5E5"> using an elliptic curve</font>

547
00:21:25,929 --> 00:21:30,250
diffie-hellman with a temporary public

548
00:21:27,640 --> 00:21:31,990
<font color="#CCCCCC">key</font><font color="#E5E5E5"> to actually give you a key agreement</font>

549
00:21:30,250 --> 00:21:34,450
that you then use to decrypt<font color="#E5E5E5"> the message</font>

550
00:21:31,990 --> 00:21:36,460
<font color="#E5E5E5">so the mode</font><font color="#CCCCCC"> of using</font><font color="#E5E5E5"> it is actually</font>

551
00:21:34,450 --> 00:21:38,620
rather<font color="#E5E5E5"> complicated which is why you have</font>

552
00:21:36,460 --> 00:21:40,600
<font color="#E5E5E5">two separate commands but they basically</font>

553
00:21:38,620 --> 00:21:42,879
<font color="#E5E5E5">both take</font><font color="#CCCCCC"> the key handle of the loaded</font>

554
00:21:40,600 --> 00:21:44,439
key<font color="#CCCCCC"> they take the ciphertext</font><font color="#E5E5E5"> and the</font>

555
00:21:42,880 --> 00:21:49,630
padding scheme<font color="#E5E5E5"> and then they will do the</font>

556
00:21:44,440 --> 00:21:51,670
decryption<font color="#E5E5E5"> for you as I said TPM</font><font color="#CCCCCC"> 200</font>

557
00:21:49,630 --> 00:21:54,429
keys are demand loaded meaning they're

558
00:21:51,670 --> 00:21:56,650
not<font color="#E5E5E5"> resident in the TPM unlike USB keys</font>

559
00:21:54,429 --> 00:21:58,900
and this<font color="#E5E5E5"> is very important because it</font>

560
00:21:56,650 --> 00:22:01,570
means<font color="#CCCCCC"> that the TPM gives you back a key</font>

561
00:21:58,900 --> 00:22:03,370
key parameter<font color="#E5E5E5"> key P blobs that you have</font>

562
00:22:01,570 --> 00:22:04,059
to keep in a file somewhere<font color="#E5E5E5"> if you lose</font>

563
00:22:03,370 --> 00:22:05,739
this file

564
00:22:04,059 --> 00:22:08,740
you've lost your<font color="#E5E5E5"> keys you're responsible</font>

565
00:22:05,740 --> 00:22:10,840
<font color="#CCCCCC">for the management</font><font color="#E5E5E5"> not the TPM so it's</font>

566
00:22:08,740 --> 00:22:13,420
unlike USB keys where the key is

567
00:22:10,840 --> 00:22:14,080
<font color="#CCCCCC">actually inside the USB key</font><font color="#E5E5E5"> as long as</font>

568
00:22:13,420 --> 00:22:15,970
you physically

569
00:22:14,080 --> 00:22:20,019
have the<font color="#E5E5E5"> USB key</font><font color="#CCCCCC"> and don't</font><font color="#E5E5E5"> lose it you</font>

570
00:22:15,970 --> 00:22:21,820
have access to<font color="#CCCCCC"> your key like I</font><font color="#E5E5E5"> said the</font>

571
00:22:20,019 --> 00:22:24,669
user is responsible<font color="#CCCCCC"> for</font><font color="#E5E5E5"> managing these</font>

572
00:22:21,820 --> 00:22:26,260
<font color="#E5E5E5">and TPM</font><font color="#CCCCCC"> 200 can only load</font><font color="#E5E5E5"> three keys at</font>

573
00:22:24,669 --> 00:22:28,510
<font color="#CCCCCC">once so you are</font><font color="#E5E5E5"> required to</font><font color="#CCCCCC"> have a</font>

574
00:22:26,260 --> 00:22:31,149
resource<font color="#E5E5E5"> manager now don't despair</font><font color="#CCCCCC"> if</font>

575
00:22:28,510 --> 00:22:32,919
you<font color="#E5E5E5"> have a kernel before</font><font color="#CCCCCC"> 112</font><font color="#E5E5E5"> this what</font>

576
00:22:31,149 --> 00:22:35,320
I'm showing you<font color="#E5E5E5"> can actually work</font>

577
00:22:32,919 --> 00:22:37,870
<font color="#E5E5E5">without a resource manager the problem</font>

578
00:22:35,320 --> 00:22:39,490
is that if<font color="#CCCCCC"> you use it with</font><font color="#E5E5E5"> too many keys</font>

579
00:22:37,870 --> 00:22:41,678
you're prone to getting<font color="#E5E5E5"> an out</font><font color="#CCCCCC"> of memory</font>

580
00:22:39,490 --> 00:22:43,960
error from the TPM that's the only real

581
00:22:41,679 --> 00:22:46,539
difference<font color="#CCCCCC"> so essentially if you want to</font>

582
00:22:43,960 --> 00:22:49,000
use it<font color="#E5E5E5"> with many keys at once you have</font>

583
00:22:46,539 --> 00:22:52,269
<font color="#E5E5E5">to use it</font><font color="#CCCCCC"> with the resource manager so a</font>

584
00:22:49,000 --> 00:22:54,700
<font color="#E5E5E5">little aside on TPM security</font><font color="#CCCCCC"> lots of</font>

585
00:22:52,269 --> 00:22:56,350
sensitive information<font color="#E5E5E5"> in the parameters</font>

586
00:22:54,700 --> 00:22:58,480
<font color="#E5E5E5">to these commands</font><font color="#CCCCCC"> things like the</font>

587
00:22:56,350 --> 00:23:01,059
authorization passphrase the private key

588
00:22:58,480 --> 00:23:03,279
and everything<font color="#CCCCCC"> these you cannot be</font>

589
00:23:01,059 --> 00:23:05,678
assured of a secure<font color="#E5E5E5"> channel between your</font>

590
00:23:03,279 --> 00:23:07,570
application<font color="#CCCCCC"> and the TPM</font><font color="#E5E5E5"> so these must</font>

591
00:23:05,679 --> 00:23:10,360
always be secured by the application

592
00:23:07,570 --> 00:23:13,689
<font color="#CCCCCC">there are</font><font color="#E5E5E5"> no ifs ands and buts here one</font>

593
00:23:10,360 --> 00:23:15,639
of the useful<font color="#CCCCCC"> things</font><font color="#E5E5E5"> about TPM 1.2 is</font>

594
00:23:13,690 --> 00:23:17,470
that you couldn't get an insecure

595
00:23:15,639 --> 00:23:19,389
<font color="#E5E5E5">channel to the TPM whenever</font><font color="#CCCCCC"> you're</font>

596
00:23:17,470 --> 00:23:21,490
<font color="#CCCCCC">pressing</font><font color="#E5E5E5"> private parameters the commands</font>

597
00:23:19,389 --> 00:23:24,039
themselves required that you set<font color="#CCCCCC"> up a</font>

598
00:23:21,490 --> 00:23:25,990
secure<font color="#E5E5E5"> channel which was very easy TPM</font>

599
00:23:24,039 --> 00:23:28,120
<font color="#CCCCCC">toooo has what's called the easy button</font>

600
00:23:25,990 --> 00:23:30,010
<font color="#E5E5E5">where</font><font color="#CCCCCC"> you can actually send commands and</font>

601
00:23:28,120 --> 00:23:31,989
the clear to it because you pretend

602
00:23:30,010 --> 00:23:34,059
you're<font color="#CCCCCC"> talking to it over the secure a</font>

603
00:23:31,990 --> 00:23:36,580
secure<font color="#CCCCCC"> channel</font><font color="#E5E5E5"> but you should never ever</font>

604
00:23:34,059 --> 00:23:38,590
<font color="#CCCCCC">as an application</font><font color="#E5E5E5"> and should assume that</font>

605
00:23:36,580 --> 00:23:40,299
<font color="#CCCCCC">you have a secure</font><font color="#E5E5E5"> channel to the TPM and</font>

606
00:23:38,590 --> 00:23:42,480
<font color="#CCCCCC">if you always</font><font color="#E5E5E5"> use these encryption</font>

607
00:23:40,299 --> 00:23:45,970
functions so you should never use<font color="#E5E5E5"> this</font>

608
00:23:42,480 --> 00:23:47,950
<font color="#CCCCCC">TPM RSP W easy</font><font color="#E5E5E5"> button you</font><font color="#CCCCCC"> should always</font>

609
00:23:45,970 --> 00:23:50,559
use the<font color="#E5E5E5"> proper parameter encryption and</font>

610
00:23:47,950 --> 00:23:52,690
<font color="#E5E5E5">you must secure all data</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> transit to</font>

611
00:23:50,559 --> 00:23:54,399
assure<font color="#CCCCCC"> that it's not</font><font color="#E5E5E5"> intercepted</font><font color="#CCCCCC"> by an</font>

612
00:23:52,690 --> 00:23:57,539
eavesdropper who would then run off with

613
00:23:54,399 --> 00:24:00,879
this key<font color="#E5E5E5"> or desperately trying to shield</font>

614
00:23:57,539 --> 00:24:02,950
and obviously all<font color="#CCCCCC"> of this will be</font><font color="#E5E5E5"> done</font>

615
00:24:00,880 --> 00:24:04,990
by<font color="#CCCCCC"> the missing isapi API when it</font>

616
00:24:02,950 --> 00:24:07,179
magically appears<font color="#CCCCCC"> but</font><font color="#E5E5E5"> in the meantime it</font>

617
00:24:04,990 --> 00:24:11,350
is<font color="#E5E5E5"> all done by</font><font color="#CCCCCC"> the IBM TSS which is why</font>

618
00:24:07,179 --> 00:24:13,000
I use<font color="#CCCCCC"> it so in order</font><font color="#E5E5E5"> to use security</font>

619
00:24:11,350 --> 00:24:15,309
<font color="#E5E5E5">with the TPM you actually need an</font>

620
00:24:13,000 --> 00:24:17,559
additional TPM command called start

621
00:24:15,309 --> 00:24:19,840
authentication session<font color="#E5E5E5"> this is a command</font>

622
00:24:17,559 --> 00:24:21,668
<font color="#E5E5E5">that actually begins security in the TPM</font>

623
00:24:19,840 --> 00:24:23,030
this is actually a lot<font color="#E5E5E5"> better than it</font>

624
00:24:21,669 --> 00:24:25,850
<font color="#E5E5E5">was in TPM one point</font>

625
00:24:23,030 --> 00:24:27,950
<font color="#CCCCCC">TP on one point to the the parameters</font>

626
00:24:25,850 --> 00:24:29,600
<font color="#E5E5E5">used for security were fairly fixed and</font>

627
00:24:27,950 --> 00:24:32,870
could actually be guessed if the

628
00:24:29,600 --> 00:24:34,790
attacker<font color="#E5E5E5"> was clever enough</font><font color="#CCCCCC"> TP m2o uses</font>

629
00:24:32,870 --> 00:24:36,979
nonces<font color="#E5E5E5"> so you send a nonce in and it</font>

630
00:24:34,790 --> 00:24:38,570
sends<font color="#E5E5E5"> a nonce back and he used these two</font>

631
00:24:36,980 --> 00:24:40,760
<font color="#E5E5E5">random numbers</font><font color="#CCCCCC"> one of</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> you produced</font>

632
00:24:38,570 --> 00:24:42,409
<font color="#E5E5E5">and one of which the</font><font color="#CCCCCC"> TPM produced</font><font color="#E5E5E5"> to</font>

633
00:24:40,760 --> 00:24:44,390
derive the session key that<font color="#E5E5E5"> you're going</font>

634
00:24:42,410 --> 00:24:46,010
to use to<font color="#CCCCCC"> communicate with it</font><font color="#E5E5E5"> you also</font>

635
00:24:44,390 --> 00:24:48,380
have something called a salt key which

636
00:24:46,010 --> 00:24:50,210
<font color="#CCCCCC">you use to secure secrets</font><font color="#E5E5E5"> and you can</font>

637
00:24:48,380 --> 00:24:52,550
have a binding key which you<font color="#CCCCCC"> also use</font>

638
00:24:50,210 --> 00:24:54,950
for a shared<font color="#CCCCCC"> authority to secure</font><font color="#E5E5E5"> secrets</font>

639
00:24:52,550 --> 00:24:57,889
<font color="#E5E5E5">both of these parameters can</font><font color="#CCCCCC"> be blank</font>

640
00:24:54,950 --> 00:25:01,430
<font color="#E5E5E5">but</font><font color="#CCCCCC"> you do require some form of shared</font>

641
00:24:57,890 --> 00:25:03,080
secret with the TPM<font color="#CCCCCC"> to securely derive a</font>

642
00:25:01,430 --> 00:25:05,480
session key that<font color="#E5E5E5"> can be used to</font>

643
00:25:03,080 --> 00:25:07,879
<font color="#CCCCCC">communicate with it</font><font color="#E5E5E5"> so if you're</font>

644
00:25:05,480 --> 00:25:10,370
communicating with an<font color="#E5E5E5"> authorized object</font>

645
00:25:07,880 --> 00:25:12,740
<font color="#E5E5E5">the TPM knows the authorization you know</font>

646
00:25:10,370 --> 00:25:15,020
the authorization<font color="#E5E5E5"> you use that to</font><font color="#CCCCCC"> derive</font>

647
00:25:12,740 --> 00:25:16,460
a secure key for the H<font color="#E5E5E5"> max session which</font>

648
00:25:15,020 --> 00:25:19,430
means you<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> need any of these salt</font>

649
00:25:16,460 --> 00:25:21,890
keys or binding keys<font color="#E5E5E5"> however if I don't</font>

650
00:25:19,430 --> 00:25:24,170
<font color="#CCCCCC">have authorize any authorization so for</font>

651
00:25:21,890 --> 00:25:27,350
instance I'm trying to place a private

652
00:25:24,170 --> 00:25:30,530
key into the TPM that is actually going

653
00:25:27,350 --> 00:25:33,230
to<font color="#E5E5E5"> run off the</font><font color="#CCCCCC"> root of the storage</font>

654
00:25:30,530 --> 00:25:34,790
hierarchy the authorization<font color="#E5E5E5"> of the</font>

655
00:25:33,230 --> 00:25:37,400
storage hierarchy is usually known by

656
00:25:34,790 --> 00:25:39,620
<font color="#E5E5E5">everybody it's a blank authorization so</font>

657
00:25:37,400 --> 00:25:40,910
I cannot<font color="#E5E5E5"> use that for deriving any</font>

658
00:25:39,620 --> 00:25:43,520
shared secrets

659
00:25:40,910 --> 00:25:46,160
<font color="#E5E5E5">so I actually tend to use a salt key</font>

660
00:25:43,520 --> 00:25:49,100
which is<font color="#E5E5E5"> used to encrypt a</font><font color="#CCCCCC"> secure</font>

661
00:25:46,160 --> 00:25:51,440
parameter to the public part of<font color="#E5E5E5"> that key</font>

662
00:25:49,100 --> 00:25:55,429
<font color="#CCCCCC">and the salt key usually uses the parent</font>

663
00:25:51,440 --> 00:25:57,860
key of the hierarchy<font color="#E5E5E5"> so like I said each</font>

664
00:25:55,430 --> 00:26:00,230
session can either be<font color="#CCCCCC"> H</font><font color="#E5E5E5"> Mac which</font><font color="#CCCCCC"> is</font>

665
00:25:57,860 --> 00:26:01,969
used both<font color="#CCCCCC"> to authenticate because you've</font>

666
00:26:00,230 --> 00:26:05,390
got the authentication key in there and

667
00:26:01,970 --> 00:26:08,150
also<font color="#CCCCCC"> to check</font><font color="#E5E5E5"> the parameters</font><font color="#CCCCCC"> on and the</font>

668
00:26:05,390 --> 00:26:09,320
response so it's like<font color="#E5E5E5"> H Mac on the hash</font>

669
00:26:08,150 --> 00:26:11,780
Mac on the<font color="#CCCCCC"> Internet</font>

670
00:26:09,320 --> 00:26:14,060
it's a hash a keyed hash that runs<font color="#E5E5E5"> over</font>

671
00:26:11,780 --> 00:26:16,340
both<font color="#CCCCCC"> the command you send in and the</font>

672
00:26:14,060 --> 00:26:18,440
response you get back<font color="#E5E5E5"> so you know</font><font color="#CCCCCC"> it</font>

673
00:26:16,340 --> 00:26:20,240
cannot have<font color="#E5E5E5"> been transmitted altered</font>

674
00:26:18,440 --> 00:26:21,840
during<font color="#CCCCCC"> transmission so it ensures the</font>

675
00:26:20,240 --> 00:26:24,600
<font color="#CCCCCC">integrity of the command you</font>

676
00:26:21,840 --> 00:26:26,908
we sent in then you have<font color="#CCCCCC"> this thing</font>

677
00:26:24,600 --> 00:26:28,408
called parameter decryption the reason

678
00:26:26,909 --> 00:26:30,809
it's called parameter decryption is

679
00:26:28,409 --> 00:26:31,919
because all of the TPM specifications

680
00:26:30,809 --> 00:26:34,529
are written from the<font color="#E5E5E5"> point of view of</font>

681
00:26:31,919 --> 00:26:36,179
<font color="#E5E5E5">the TPM so as far as the TPM itself is</font>

682
00:26:34,529 --> 00:26:38,340
concerned<font color="#E5E5E5"> it</font><font color="#CCCCCC"> has to decrypt</font><font color="#E5E5E5"> the</font>

683
00:26:36,179 --> 00:26:40,320
parameters<font color="#E5E5E5"> you have to encrypt them that</font>

684
00:26:38,340 --> 00:26:42,389
the TPM has to decrypt them<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is</font>

685
00:26:40,320 --> 00:26:44,610
<font color="#CCCCCC">called parameter decryption and</font><font color="#E5E5E5"> it's</font>

686
00:26:42,390 --> 00:26:46,380
also<font color="#E5E5E5"> responsible</font><font color="#CCCCCC"> for response encryption</font>

687
00:26:44,610 --> 00:26:47,879
which means the TPM encrypts<font color="#CCCCCC"> the</font>

688
00:26:46,380 --> 00:26:51,059
response it sends back<font color="#CCCCCC"> to you and you</font>

689
00:26:47,880 --> 00:26:53,730
can then decrypt<font color="#E5E5E5"> it if you want to use H</font>

690
00:26:51,059 --> 00:26:56,129
<font color="#CCCCCC">Mac</font><font color="#E5E5E5"> for integrity and parameter</font>

691
00:26:53,730 --> 00:26:58,830
decryption<font color="#E5E5E5"> and response encryption you</font>

692
00:26:56,130 --> 00:27:00,690
need<font color="#E5E5E5"> three</font><font color="#CCCCCC"> sessions to your TPM command</font>

693
00:26:58,830 --> 00:27:02,639
<font color="#E5E5E5">so you</font><font color="#CCCCCC"> have to</font><font color="#E5E5E5"> set up three separate</font>

694
00:27:00,690 --> 00:27:04,320
sessions to get<font color="#E5E5E5"> all of this obviously</font>

695
00:27:02,640 --> 00:27:06,059
then they all use separate<font color="#E5E5E5"> nonces and</font>

696
00:27:04,320 --> 00:27:08,760
they're all reasonably well secured and

697
00:27:06,059 --> 00:27:12,840
everything works<font color="#E5E5E5"> in a reasonably nice</font>

698
00:27:08,760 --> 00:27:15,000
manner<font color="#CCCCCC"> and like third therefore each</font>

699
00:27:12,840 --> 00:27:18,080
command may have up to three sessions<font color="#E5E5E5"> to</font>

700
00:27:15,000 --> 00:27:20,220
ensure that<font color="#E5E5E5"> you can do this and</font>

701
00:27:18,080 --> 00:27:21,840
<font color="#E5E5E5">parameter and response encryption</font>

702
00:27:20,220 --> 00:27:24,179
require this<font color="#E5E5E5"> thing called an encrypted</font>

703
00:27:21,840 --> 00:27:26,039
salt<font color="#CCCCCC"> so</font><font color="#E5E5E5"> they require</font><font color="#CCCCCC"> that you know the</font>

704
00:27:24,179 --> 00:27:28,080
<font color="#CCCCCC">public part</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the key that exists in</font>

705
00:27:26,039 --> 00:27:31,049
the TPM this wouldn't be a<font color="#E5E5E5"> problem</font>

706
00:27:28,080 --> 00:27:33,000
except<font color="#E5E5E5"> that I did say that</font><font color="#CCCCCC"> you must</font><font color="#E5E5E5"> have</font>

707
00:27:31,049 --> 00:27:35,039
<font color="#CCCCCC">a known public key</font><font color="#E5E5E5"> to get there and the</font>

708
00:27:33,000 --> 00:27:37,559
TPM itself<font color="#E5E5E5"> only comes with these seeds</font>

709
00:27:35,039 --> 00:27:39,870
<font color="#E5E5E5">which means that somehow you have</font><font color="#CCCCCC"> to</font>

710
00:27:37,559 --> 00:27:42,629
take a seed and<font color="#E5E5E5"> get a key</font><font color="#CCCCCC"> from it and</font>

711
00:27:39,870 --> 00:27:44,850
like<font color="#CCCCCC"> you said</font><font color="#E5E5E5"> doing that for RSA keys</font>

712
00:27:42,630 --> 00:27:48,360
takes 45 seconds<font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't want to wait</font>

713
00:27:44,850 --> 00:27:50,668
<font color="#CCCCCC">that long</font><font color="#E5E5E5"> so one</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> problems with</font>

714
00:27:48,360 --> 00:27:53,219
<font color="#E5E5E5">the TPM is that the TCG is still coming</font>

715
00:27:50,669 --> 00:27:55,770
out<font color="#E5E5E5"> with all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these guides so in March</font>

716
00:27:53,220 --> 00:27:58,980
of 2017 they published a provisioning

717
00:27:55,770 --> 00:28:02,549
guide which said<font color="#CCCCCC"> that an RSA storage</font>

718
00:27:58,980 --> 00:28:05,520
seed<font color="#CCCCCC"> key derivation key</font><font color="#E5E5E5"> must now be</font>

719
00:28:02,549 --> 00:28:07,408
present at the permanent<font color="#E5E5E5"> NV</font><font color="#CCCCCC"> NV ROM index</font>

720
00:28:05,520 --> 00:28:08,530
at 8081

721
00:28:07,409 --> 00:28:11,169
<font color="#CCCCCC">o</font>

722
00:28:08,530 --> 00:28:13,360
<font color="#E5E5E5">one and X so that means</font><font color="#CCCCCC"> that if I</font><font color="#E5E5E5"> have a</font>

723
00:28:11,169 --> 00:28:15,580
really<font color="#E5E5E5"> really recent TPM</font><font color="#CCCCCC"> it will</font>

724
00:28:13,360 --> 00:28:17,740
<font color="#CCCCCC">actually come with</font><font color="#E5E5E5"> the RSA version of</font>

725
00:28:15,580 --> 00:28:20,740
the storage key that I can then use

726
00:28:17,740 --> 00:28:23,289
<font color="#CCCCCC">public public parameter encryption</font>

727
00:28:20,740 --> 00:28:25,210
salting<font color="#E5E5E5"> so I don't need</font><font color="#CCCCCC"> to run</font><font color="#E5E5E5"> this key</font>

728
00:28:23,289 --> 00:28:28,559
derivation function<font color="#CCCCCC"> every time</font><font color="#E5E5E5"> that I</font>

729
00:28:25,210 --> 00:28:31,330
<font color="#CCCCCC">use the TPM</font><font color="#E5E5E5"> this is a great</font><font color="#CCCCCC"> time saver</font>

730
00:28:28,559 --> 00:28:33,280
<font color="#CCCCCC">fortunately on all</font><font color="#E5E5E5"> TPMS that ship</font><font color="#CCCCCC"> before</font>

731
00:28:31,330 --> 00:28:34,960
<font color="#CCCCCC">november</font><font color="#E5E5E5"> there are still a way of</font>

732
00:28:33,280 --> 00:28:37,210
setting up this key the<font color="#CCCCCC"> only thing you</font>

733
00:28:34,960 --> 00:28:39,250
<font color="#E5E5E5">really didn't know is what</font><font color="#CCCCCC"> NVRAM index</font>

734
00:28:37,210 --> 00:28:41,799
it should be at<font color="#E5E5E5"> now we have a</font><font color="#CCCCCC"> well-known</font>

735
00:28:39,250 --> 00:28:44,200
<font color="#CCCCCC">nvram index every time you</font><font color="#E5E5E5"> install the</font>

736
00:28:41,799 --> 00:28:46,990
IBM<font color="#E5E5E5"> TSS it goes and looks in this index</font>

737
00:28:44,200 --> 00:28:48,789
and says is the RSA storage key there if

738
00:28:46,990 --> 00:28:50,260
not I will<font color="#E5E5E5"> generate one and place it</font>

739
00:28:48,789 --> 00:28:54,360
there<font color="#CCCCCC"> so now we actually have</font><font color="#E5E5E5"> a</font>

740
00:28:50,260 --> 00:28:58,210
guaranteed<font color="#E5E5E5"> storage key we</font><font color="#CCCCCC"> can encrypt it</font>

741
00:28:54,360 --> 00:29:00,370
second problem<font color="#CCCCCC"> of</font><font color="#E5E5E5"> TPMS is that when you</font>

742
00:28:58,210 --> 00:29:02,200
<font color="#E5E5E5">send a command in only the first</font>

743
00:29:00,370 --> 00:29:03,820
<font color="#E5E5E5">parameter of that command is encrypted</font>

744
00:29:02,200 --> 00:29:06,940
<font color="#CCCCCC">and remember each of the commands</font><font color="#E5E5E5"> I</font>

745
00:29:03,820 --> 00:29:08,830
showed you had quite a few parameters<font color="#E5E5E5"> by</font>

746
00:29:06,940 --> 00:29:10,570
the way first<font color="#E5E5E5"> first</font><font color="#CCCCCC"> parameter does not</font>

747
00:29:08,830 --> 00:29:12,580
include the parent keys or any of the

748
00:29:10,570 --> 00:29:14,350
keys so anything with the<font color="#CCCCCC"> @ sign is not</font>

749
00:29:12,580 --> 00:29:16,418
included in<font color="#E5E5E5"> this encryption it's the</font>

750
00:29:14,350 --> 00:29:18,850
first parameter<font color="#E5E5E5"> and there's a problem</font>

751
00:29:16,419 --> 00:29:21,220
here<font color="#CCCCCC"> because if you</font><font color="#E5E5E5"> look at TPM import</font>

752
00:29:18,850 --> 00:29:23,020
<font color="#CCCCCC">it has a parent</font><font color="#E5E5E5"> key handle which</font><font color="#CCCCCC"> is not</font>

753
00:29:21,220 --> 00:29:24,850
the first<font color="#E5E5E5"> parameter but</font><font color="#CCCCCC"> its first</font>

754
00:29:23,020 --> 00:29:27,039
parameter<font color="#CCCCCC"> of the public key parameters</font>

755
00:29:24,850 --> 00:29:31,178
<font color="#E5E5E5">you honestly don't</font><font color="#CCCCCC"> care about encrypting</font>

756
00:29:27,039 --> 00:29:34,179
<font color="#CCCCCC">those so if I use parameter decryption</font>

757
00:29:31,179 --> 00:29:36,549
with TPM import<font color="#E5E5E5"> my private key</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> not</font>

758
00:29:34,179 --> 00:29:38,770
protected<font color="#E5E5E5"> this is a bit of a cock-up on</font>

759
00:29:36,549 --> 00:29:41,679
behalf of the TCG<font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't know why they</font>

760
00:29:38,770 --> 00:29:42,940
did this the<font color="#CCCCCC"> solution in my mind would</font>

761
00:29:41,679 --> 00:29:45,460
<font color="#CCCCCC">have been to reverse those two</font>

762
00:29:42,940 --> 00:29:47,289
<font color="#E5E5E5">parameters but remember these</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> the</font>

763
00:29:45,460 --> 00:29:49,330
people<font color="#E5E5E5"> who came up</font><font color="#CCCCCC"> with the TSS we're</font>

764
00:29:47,289 --> 00:29:51,309
talking about<font color="#CCCCCC"> so their solution was not</font>

765
00:29:49,330 --> 00:29:53,918
to reverse these two<font color="#CCCCCC"> parameters it was</font>

766
00:29:51,309 --> 00:29:55,389
to add an extra parameter<font color="#E5E5E5"> called an</font>

767
00:29:53,919 --> 00:29:57,190
encryption key which would<font color="#E5E5E5"> then be</font>

768
00:29:55,390 --> 00:29:59,080
<font color="#E5E5E5">encrypted</font><font color="#CCCCCC"> and then you</font><font color="#E5E5E5"> use this</font>

769
00:29:57,190 --> 00:30:02,080
<font color="#E5E5E5">encryption key to encrypt</font><font color="#CCCCCC"> the private</font>

770
00:29:59,080 --> 00:30:04,120
key<font color="#E5E5E5"> God knows why</font><font color="#CCCCCC"> I suspect all they</font>

771
00:30:02,080 --> 00:30:06,280
<font color="#E5E5E5">really wanted to do is</font><font color="#CCCCCC"> make my life in</font>

772
00:30:04,120 --> 00:30:08,830
constructing a crypto system much harder

773
00:30:06,280 --> 00:30:10,299
<font color="#CCCCCC">so thank you very much there</font><font color="#E5E5E5"> it is and</font>

774
00:30:08,830 --> 00:30:12,549
there are<font color="#E5E5E5"> several other commands and the</font>

775
00:30:10,299 --> 00:30:15,220
TCG spec<font color="#CCCCCC"> that'll like this if you're</font>

776
00:30:12,549 --> 00:30:15,620
going<font color="#E5E5E5"> to use the IBM TSS unfortunately</font>

777
00:30:15,220 --> 00:30:17,450
you do

778
00:30:15,620 --> 00:30:20,209
have to be aware of<font color="#CCCCCC"> ups and the</font>

779
00:30:17,450 --> 00:30:22,370
specification like this but you can<font color="#CCCCCC"> cope</font>

780
00:30:20,210 --> 00:30:25,120
<font color="#CCCCCC">with them and all</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the stuff that</font><font color="#E5E5E5"> I'm</font>

781
00:30:22,370 --> 00:30:28,790
going<font color="#E5E5E5"> to show you does cope with them</font>

782
00:30:25,120 --> 00:30:30,649
the key point about this<font color="#E5E5E5"> is that all</font><font color="#CCCCCC"> of</font>

783
00:30:28,790 --> 00:30:33,470
this is<font color="#E5E5E5"> incredibly complicated the</font>

784
00:30:30,650 --> 00:30:35,900
average user<font color="#E5E5E5"> does</font><font color="#CCCCCC"> not want</font><font color="#E5E5E5"> to have to</font>

785
00:30:33,470 --> 00:30:38,240
understand what I<font color="#E5E5E5"> just spent the last</font><font color="#CCCCCC"> 25</font>

786
00:30:35,900 --> 00:30:40,130
minutes<font color="#CCCCCC"> telling</font><font color="#E5E5E5"> you so they want all of</font>

787
00:30:38,240 --> 00:30:42,830
<font color="#CCCCCC">this</font><font color="#E5E5E5"> complexity just</font><font color="#CCCCCC"> to be hidden</font><font color="#E5E5E5"> from</font>

788
00:30:40,130 --> 00:30:45,370
them<font color="#E5E5E5"> they want the TPM in their laptop</font>

789
00:30:42,830 --> 00:30:48,020
<font color="#E5E5E5">just</font><font color="#CCCCCC"> to work for shielding private keys</font>

790
00:30:45,370 --> 00:30:49,820
so the question<font color="#CCCCCC"> that I mostly was</font>

791
00:30:48,020 --> 00:30:51,860
interested<font color="#E5E5E5"> it I had to learn all</font><font color="#CCCCCC"> of this</font>

792
00:30:49,820 --> 00:30:53,480
to<font color="#CCCCCC"> work</font><font color="#E5E5E5"> out how to use the TPM but the</font>

793
00:30:51,860 --> 00:30:55,639
one I'm mostly<font color="#E5E5E5"> interested in is how to</font>

794
00:30:53,480 --> 00:30:58,700
enable<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of you to use the TPM very</font>

795
00:30:55,640 --> 00:31:01,520
simply<font color="#E5E5E5"> and the answer to that is that we</font>

796
00:30:58,700 --> 00:31:03,710
actually<font color="#E5E5E5"> use TPM enabling and all of the</font>

797
00:31:01,520 --> 00:31:05,900
crypto systems that we<font color="#CCCCCC"> use today</font><font color="#E5E5E5"> so</font>

798
00:31:03,710 --> 00:31:08,179
almost everybody understands how<font color="#E5E5E5"> to use</font>

799
00:31:05,900 --> 00:31:09,980
<font color="#CCCCCC">OpenSSL they might not</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> it because</font>

800
00:31:08,179 --> 00:31:12,350
the commands are very complex<font color="#E5E5E5"> but they</font>

801
00:31:09,980 --> 00:31:14,929
pretty<font color="#E5E5E5"> much understand it most people</font>

802
00:31:12,350 --> 00:31:17,178
understand how to use<font color="#CCCCCC"> GPG most people</font>

803
00:31:14,929 --> 00:31:20,080
understand how to create<font color="#E5E5E5"> a key for</font><font color="#CCCCCC"> open</font>

804
00:31:17,179 --> 00:31:22,520
<font color="#CCCCCC">VPN so there's this sort of unfortunate</font>

805
00:31:20,080 --> 00:31:25,550
<font color="#CCCCCC">complex</font><font color="#E5E5E5"> knowledge that we all will use</font>

806
00:31:22,520 --> 00:31:28,070
but<font color="#E5E5E5"> which can be used if I just TPM</font>

807
00:31:25,550 --> 00:31:31,428
enable this<font color="#CCCCCC"> cryptosystems quality to use</font>

808
00:31:28,070 --> 00:31:32,990
a TPM for the key handling and incur and

809
00:31:31,429 --> 00:31:35,000
signature<font color="#E5E5E5"> and encryption under the</font>

810
00:31:32,990 --> 00:31:37,490
covers if I get it right<font color="#E5E5E5"> so that is the</font>

811
00:31:35,000 --> 00:31:39,710
goal that<font color="#E5E5E5"> I'm going to do an existing</font>

812
00:31:37,490 --> 00:31:42,470
crypto systems mostly use password

813
00:31:39,710 --> 00:31:44,270
protected key files<font color="#E5E5E5"> so mostly you</font><font color="#CCCCCC"> have a</font>

814
00:31:42,470 --> 00:31:46,580
private key file that has all of the

815
00:31:44,270 --> 00:31:48,710
private<font color="#E5E5E5"> elements that are</font><font color="#CCCCCC"> AAS encrypted</font>

816
00:31:46,580 --> 00:31:50,889
to some password that you you type in

817
00:31:48,710 --> 00:31:54,020
when you actually<font color="#CCCCCC"> use this private key</font>

818
00:31:50,890 --> 00:31:56,830
<font color="#CCCCCC">so it's actually</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> easy to see</font><font color="#E5E5E5"> that</font>

819
00:31:54,020 --> 00:31:59,450
<font color="#E5E5E5">these key files could contain TPM keys</font>

820
00:31:56,830 --> 00:32:01,699
<font color="#E5E5E5">with the public blob and the private</font>

821
00:31:59,450 --> 00:32:03,890
blob and if we use the<font color="#E5E5E5"> password as the</font>

822
00:32:01,700 --> 00:32:06,590
key<font color="#CCCCCC"> authority we have exactly the same</font>

823
00:32:03,890 --> 00:32:10,160
<font color="#CCCCCC">workflow as we had with</font><font color="#E5E5E5"> the ordinary</font>

824
00:32:06,590 --> 00:32:13,220
keys and then as<font color="#E5E5E5"> long as the crypto</font>

825
00:32:10,160 --> 00:32:14,480
system recognizes the TPM key<font color="#CCCCCC"> everything</font>

826
00:32:13,220 --> 00:32:16,010
would<font color="#E5E5E5"> actually just work it would see a</font>

827
00:32:14,480 --> 00:32:18,050
TPM key it would<font color="#E5E5E5"> ask you for your</font>

828
00:32:16,010 --> 00:32:19,580
<font color="#E5E5E5">password you type your password the</font>

829
00:32:18,050 --> 00:32:22,040
crypto operation would go through the

830
00:32:19,580 --> 00:32:23,960
TPM but everything would<font color="#CCCCCC"> just</font><font color="#E5E5E5"> work the</font>

831
00:32:22,040 --> 00:32:26,178
only<font color="#E5E5E5"> thing that you've got is enhanced</font>

832
00:32:23,960 --> 00:32:28,120
<font color="#CCCCCC">security because now someone runs off</font>

833
00:32:26,179 --> 00:32:29,800
<font color="#CCCCCC">with your</font><font color="#E5E5E5"> private key file unless</font>

834
00:32:28,120 --> 00:32:33,939
have access to your TPM they cannot<font color="#E5E5E5"> use</font>

835
00:32:29,800 --> 00:32:36,850
<font color="#E5E5E5">it the only additional requirement in</font>

836
00:32:33,940 --> 00:32:40,300
the workflow<font color="#E5E5E5"> is conversion of the actual</font>

837
00:32:36,850 --> 00:32:42,219
site encrypted private key into its TPM

838
00:32:40,300 --> 00:32:44,860
form which involves a round trip through

839
00:32:42,220 --> 00:32:46,390
the<font color="#E5E5E5"> TPM with TPM to import that's the</font>

840
00:32:44,860 --> 00:32:49,209
only additional thing<font color="#E5E5E5"> you should need to</font>

841
00:32:46,390 --> 00:32:51,670
<font color="#E5E5E5">do and obviously you need discipline</font>

842
00:32:49,210 --> 00:32:54,580
around<font color="#E5E5E5"> key backup so you can convert</font><font color="#CCCCCC"> a</font>

843
00:32:51,670 --> 00:32:56,860
key to its<font color="#E5E5E5"> TPM format and obviously you</font>

844
00:32:54,580 --> 00:32:58,120
need<font color="#E5E5E5"> to destroy the private key</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> you</font>

845
00:32:56,860 --> 00:32:59,889
need to have kept a backup<font color="#CCCCCC"> of that</font>

846
00:32:58,120 --> 00:33:00,850
<font color="#E5E5E5">because once it's converted you do not</font>

847
00:32:59,890 --> 00:33:03,790
get<font color="#E5E5E5"> it back again</font>

848
00:33:00,850 --> 00:33:06,340
<font color="#E5E5E5">so if it's a long-lived key a key that</font>

849
00:33:03,790 --> 00:33:08,830
might outlive the TPM on your laptop<font color="#E5E5E5"> you</font>

850
00:33:06,340 --> 00:33:10,300
need a backup<font color="#CCCCCC"> an offline backup copy</font><font color="#E5E5E5"> of</font>

851
00:33:08,830 --> 00:33:12,460
it somewhere<font color="#CCCCCC"> and this means</font><font color="#E5E5E5"> you need</font>

852
00:33:10,300 --> 00:33:14,830
<font color="#E5E5E5">better discipline</font><font color="#CCCCCC"> around key handling I</font>

853
00:33:12,460 --> 00:33:16,990
suppose I should<font color="#CCCCCC"> ask how many people in</font>

854
00:33:14,830 --> 00:33:18,639
the room have<font color="#E5E5E5"> the only copy of their</font><font color="#CCCCCC"> GPG</font>

855
00:33:16,990 --> 00:33:22,540
key on their laptop but I won't

856
00:33:18,640 --> 00:33:24,790
<font color="#CCCCCC">embarrass you</font><font color="#E5E5E5"> by asking the</font><font color="#CCCCCC"> question so</font>

857
00:33:22,540 --> 00:33:26,790
the advantages of<font color="#E5E5E5"> all of this are now we</font>

858
00:33:24,790 --> 00:33:28,960
only actually<font color="#E5E5E5"> need to trust the TPM</font>

859
00:33:26,790 --> 00:33:30,639
<font color="#CCCCCC">depending</font><font color="#E5E5E5"> on who you believe that is</font>

860
00:33:28,960 --> 00:33:31,150
actually an easy thing or a hard thing

861
00:33:30,640 --> 00:33:33,580
<font color="#E5E5E5">to do</font>

862
00:33:31,150 --> 00:33:35,830
TPM themselves are<font color="#E5E5E5"> actually manufactured</font>

863
00:33:33,580 --> 00:33:39,610
by an international consortium<font color="#CCCCCC"> they are</font>

864
00:33:35,830 --> 00:33:42,129
in use by a lot of<font color="#CCCCCC"> the public security</font>

865
00:33:39,610 --> 00:33:44,770
<font color="#E5E5E5">agencies of a lot of companies so the</font>

866
00:33:42,130 --> 00:33:47,080
the<font color="#CCCCCC"> Russia FSB the</font><font color="#E5E5E5"> Chinese</font><font color="#CCCCCC"> Security</font>

867
00:33:44,770 --> 00:33:49,750
<font color="#CCCCCC">Agency and the NSA will use these TPMS</font>

868
00:33:47,080 --> 00:33:51,370
<font color="#E5E5E5">so they clearly trust them and as far</font><font color="#CCCCCC"> as</font>

869
00:33:49,750 --> 00:33:53,080
<font color="#E5E5E5">what the manufacturers can tell there</font>

870
00:33:51,370 --> 00:33:54,520
are no backdoors inserted into them so

871
00:33:53,080 --> 00:33:56,169
there's no real<font color="#E5E5E5"> reason why you shouldn't</font>

872
00:33:54,520 --> 00:33:57,940
trust them as well

873
00:33:56,170 --> 00:34:01,840
in<font color="#E5E5E5"> fact one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the great things about</font>

874
00:33:57,940 --> 00:34:04,240
TPM -<font color="#E5E5E5"> oh is that</font><font color="#CCCCCC"> iBM has</font><font color="#E5E5E5"> produced a</font>

875
00:34:01,840 --> 00:34:05,800
software emulation of the TPM that you

876
00:34:04,240 --> 00:34:07,540
can actually run<font color="#E5E5E5"> and verify</font><font color="#CCCCCC"> that it</font>

877
00:34:05,800 --> 00:34:09,070
<font color="#CCCCCC">works if</font><font color="#E5E5E5"> you don't trust it</font><font color="#CCCCCC"> you can</font>

878
00:34:07,540 --> 00:34:10,779
actually take the code apart and see

879
00:34:09,070 --> 00:34:11,890
what it's doing<font color="#CCCCCC"> and see that there are</font>

880
00:34:10,780 --> 00:34:14,020
<font color="#E5E5E5">actually no backdoors</font>

881
00:34:11,889 --> 00:34:17,230
Microsoft<font color="#E5E5E5"> has now just released their</font>

882
00:34:14,020 --> 00:34:20,800
TPM emulator as well and if you actually

883
00:34:17,230 --> 00:34:22,600
build<font color="#CCCCCC"> one of my OpenSSL system when you</font>

884
00:34:20,800 --> 00:34:24,220
type make<font color="#E5E5E5"> test one of the things that</font>

885
00:34:22,600 --> 00:34:25,630
will<font color="#CCCCCC"> actually do is fire up the TPM</font>

886
00:34:24,219 --> 00:34:27,370
emulator and run a load of checks

887
00:34:25,630 --> 00:34:30,190
against it<font color="#CCCCCC"> just to make sure that what</font>

888
00:34:27,370 --> 00:34:31,989
you build works<font color="#E5E5E5"> the point about this is</font>

889
00:34:30,190 --> 00:34:33,970
<font color="#CCCCCC">that the key can never be stolen</font>

890
00:34:31,989 --> 00:34:35,979
all it<font color="#E5E5E5"> can all it can happen</font><font color="#CCCCCC"> if someone</font>

891
00:34:33,969 --> 00:34:38,139
<font color="#E5E5E5">could snoop your password authority and</font>

892
00:34:35,980 --> 00:34:39,940
if they have<font color="#CCCCCC"> access to your laptop so</font>

893
00:34:38,139 --> 00:34:41,279
while the laptop is switched on they

894
00:34:39,940 --> 00:34:42,960
could<font color="#E5E5E5"> use the key to generate</font>

895
00:34:41,280 --> 00:34:44,850
signatures because<font color="#E5E5E5"> they then have your</font>

896
00:34:42,960 --> 00:34:46,770
authority<font color="#CCCCCC"> but if they just steal your</font>

897
00:34:44,850 --> 00:34:49,168
key file without<font color="#E5E5E5"> your TPM it's useless</font>

898
00:34:46,770 --> 00:34:51,330
<font color="#E5E5E5">so this gives you the something you have</font>

899
00:34:49,168 --> 00:34:52,650
and<font color="#E5E5E5"> something you know security that is</font>

900
00:34:51,330 --> 00:34:55,020
the hallmark of two-factor

901
00:34:52,650 --> 00:34:57,000
authentication<font color="#E5E5E5"> so just by moving keys</font>

902
00:34:55,020 --> 00:34:58,890
into<font color="#E5E5E5"> the TPM you get two-factor</font>

903
00:34:57,000 --> 00:35:01,050
authentication which seems<font color="#CCCCCC"> to have</font><font color="#E5E5E5"> been</font>

904
00:34:58,890 --> 00:35:01,980
pretty<font color="#E5E5E5"> much</font><font color="#CCCCCC"> the holy grail</font><font color="#E5E5E5"> of security</font>

905
00:35:01,050 --> 00:35:04,890
for a long time

906
00:35:01,980 --> 00:35:06,630
and apart from key conversion there

907
00:35:04,890 --> 00:35:08,370
should be no changes<font color="#CCCCCC"> to your</font><font color="#E5E5E5"> workflow at</font>

908
00:35:06,630 --> 00:35:10,920
all<font color="#E5E5E5"> these are great advantages the</font>

909
00:35:08,370 --> 00:35:12,630
disadvantages are the key is tied to a

910
00:35:10,920 --> 00:35:14,940
<font color="#CCCCCC">single physical TPM which is part of</font>

911
00:35:12,630 --> 00:35:16,950
<font color="#E5E5E5">your laptop lose your laptop or upgrade</font>

912
00:35:14,940 --> 00:35:19,740
<font color="#CCCCCC">to a different</font><font color="#E5E5E5"> laptop all the keys are</font>

913
00:35:16,950 --> 00:35:21,689
useless<font color="#E5E5E5"> this is unfortunate</font><font color="#CCCCCC"> that means</font>

914
00:35:19,740 --> 00:35:24,060
that you have<font color="#CCCCCC"> to have proper discipline</font>

915
00:35:21,690 --> 00:35:26,040
about key backup handling and the key is

916
00:35:24,060 --> 00:35:28,200
half therefore<font color="#E5E5E5"> to be reconverted</font>

917
00:35:26,040 --> 00:35:30,029
TPM form<font color="#E5E5E5"> every time you change laptops</font>

918
00:35:28,200 --> 00:35:32,310
<font color="#E5E5E5">you have more than one</font><font color="#CCCCCC"> laptop you have</font>

919
00:35:30,030 --> 00:35:34,200
<font color="#E5E5E5">to convert</font><font color="#CCCCCC"> to TPM form on that lap on</font>

920
00:35:32,310 --> 00:35:36,960
both of those all of<font color="#CCCCCC"> those laptops and</font>

921
00:35:34,200 --> 00:35:38,279
TPM<font color="#CCCCCC"> to O does require the</font><font color="#E5E5E5"> internal</font>

922
00:35:36,960 --> 00:35:41,220
resource manager if you<font color="#E5E5E5"> have a lot of</font>

923
00:35:38,280 --> 00:35:42,450
<font color="#CCCCCC">keys</font><font color="#E5E5E5"> you'll just run out of a TPM memory</font>

924
00:35:41,220 --> 00:35:45,600
if you try<font color="#E5E5E5"> and use it</font><font color="#CCCCCC"> with a huge number</font>

925
00:35:42,450 --> 00:35:47,040
<font color="#CCCCCC">of keys without the resource manager the</font>

926
00:35:45,600 --> 00:35:50,400
final thing is<font color="#E5E5E5"> the TPM</font>

927
00:35:47,040 --> 00:35:53,130
<font color="#E5E5E5">is slow</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> you see it saw it takes 45</font>

928
00:35:50,400 --> 00:35:55,200
seconds<font color="#E5E5E5"> to do a</font><font color="#CCCCCC"> KDF generate RSA primes</font>

929
00:35:53,130 --> 00:35:57,750
<font color="#E5E5E5">my actual laptop could have done that</font>

930
00:35:55,200 --> 00:35:59,730
<font color="#CCCCCC">calculation about 100 milliseconds so</font>

931
00:35:57,750 --> 00:36:01,920
the TPM itself is a really<font color="#E5E5E5"> slow</font>

932
00:35:59,730 --> 00:36:04,080
processing engine so it can't process

933
00:36:01,920 --> 00:36:06,270
hundreds of key operations per second

934
00:36:04,080 --> 00:36:08,790
it's fine<font color="#CCCCCC"> for</font><font color="#E5E5E5"> sort of signatures that we</font>

935
00:36:06,270 --> 00:36:11,280
only use rarely so for VPNs<font color="#CCCCCC"> you know you</font>

936
00:36:08,790 --> 00:36:13,440
use them once<font color="#CCCCCC"> every five minutes</font><font color="#E5E5E5"> for SSH</font>

937
00:36:11,280 --> 00:36:15,930
sessions I think relent<font color="#CCCCCC"> occation rarely</font>

938
00:36:13,440 --> 00:36:17,940
occurs so it doesn't<font color="#E5E5E5"> really matter</font><font color="#CCCCCC"> for a</font>

939
00:36:15,930 --> 00:36:20,069
<font color="#CCCCCC">GPG you only</font><font color="#E5E5E5"> use them at the time you do</font>

940
00:36:17,940 --> 00:36:22,110
the signatures these are not high

941
00:36:20,070 --> 00:36:23,970
density operations you're not doing them

942
00:36:22,110 --> 00:36:25,770
hundreds of times a second<font color="#E5E5E5"> but this also</font>

943
00:36:23,970 --> 00:36:27,990
<font color="#E5E5E5">means that you're not</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be using</font>

944
00:36:25,770 --> 00:36:29,940
a TPM<font color="#E5E5E5"> for symmetric encryption of your</font>

945
00:36:27,990 --> 00:36:31,890
disk<font color="#E5E5E5"> unless you want your data to</font><font color="#CCCCCC"> be</font>

946
00:36:29,940 --> 00:36:36,480
<font color="#E5E5E5">available on a time span</font><font color="#CCCCCC"> of weeks</font>

947
00:36:31,890 --> 00:36:39,450
instead of seconds so the current<font color="#CCCCCC"> status</font>

948
00:36:36,480 --> 00:36:42,180
is<font color="#CCCCCC"> that I've written and</font><font color="#E5E5E5"> published an</font>

949
00:36:39,450 --> 00:36:44,009
engine for<font color="#CCCCCC"> OpenSSL engines of the way</font>

950
00:36:42,180 --> 00:36:46,710
you<font color="#E5E5E5"> actually add different key handling</font>

951
00:36:44,010 --> 00:36:49,530
systems to<font color="#CCCCCC"> open SSL it's at this URL the</font>

952
00:36:46,710 --> 00:36:51,570
URL<font color="#E5E5E5"> I think was also</font><font color="#CCCCCC"> part of</font><font color="#E5E5E5"> the stuff I</font>

953
00:36:49,530 --> 00:36:53,110
submitted to force down<font color="#CCCCCC"> it comes with</font>

954
00:36:51,570 --> 00:36:56,110
this utility<font color="#E5E5E5"> called create</font>

955
00:36:53,110 --> 00:36:59,170
<font color="#E5E5E5">p.m.</font><font color="#CCCCCC"> to Keef that actually</font><font color="#E5E5E5"> converts from</font>

956
00:36:56,110 --> 00:37:01,510
<font color="#E5E5E5">an open</font><font color="#CCCCCC"> ssl key private key to a TPM</font>

957
00:36:59,170 --> 00:37:04,120
private key<font color="#E5E5E5"> and this utility can also be</font>

958
00:37:01,510 --> 00:37:06,400
used to create<font color="#E5E5E5"> a TPM private key that's</font>

959
00:37:04,120 --> 00:37:09,520
actually embedded<font color="#E5E5E5"> in the TPM</font><font color="#CCCCCC"> and can</font>

960
00:37:06,400 --> 00:37:11,550
never be extracted<font color="#CCCCCC"> there is an issue</font>

961
00:37:09,520 --> 00:37:14,170
<font color="#E5E5E5">with elliptic curve so I did say that</font>

962
00:37:11,550 --> 00:37:17,290
<font color="#CCCCCC">crypto agility was one of the hallmarks</font>

963
00:37:14,170 --> 00:37:19,960
of the TPM<font color="#E5E5E5"> and that allowed you to use</font>

964
00:37:17,290 --> 00:37:23,350
elliptic curve cryptography<font color="#CCCCCC"> the problem</font>

965
00:37:19,960 --> 00:37:26,350
is that TPM enabling of this all works

966
00:37:23,350 --> 00:37:28,630
fine<font color="#E5E5E5"> but the TPM themselves do not have</font>

967
00:37:26,350 --> 00:37:30,790
generic elliptic curve key handling<font color="#E5E5E5"> I've</font>

968
00:37:28,630 --> 00:37:32,860
yelled at various people at the TCG to

969
00:37:30,790 --> 00:37:34,960
try and find out why this<font color="#CCCCCC"> is and the</font>

970
00:37:32,860 --> 00:37:38,020
best excuse I get back is<font color="#E5E5E5"> because it's</font>

971
00:37:34,960 --> 00:37:39,430
export regulations<font color="#E5E5E5"> if we do generic</font>

972
00:37:38,020 --> 00:37:41,860
elliptic curves we<font color="#CCCCCC"> have a problem</font>

973
00:37:39,430 --> 00:37:43,839
<font color="#E5E5E5">exporting the TPM to various countries</font>

974
00:37:41,860 --> 00:37:45,430
who want<font color="#CCCCCC"> to mandate</font><font color="#E5E5E5"> what curves can be</font>

975
00:37:43,840 --> 00:37:48,040
<font color="#E5E5E5">used and want</font><font color="#CCCCCC"> to ban all the other</font>

976
00:37:45,430 --> 00:37:50,770
curves from being used<font color="#E5E5E5"> so the problem is</font>

977
00:37:48,040 --> 00:37:52,870
<font color="#E5E5E5">that the TPM therefore only has an own</font>

978
00:37:50,770 --> 00:37:55,180
set<font color="#CCCCCC"> of curves</font><font color="#E5E5E5"> that it can be it can be</font>

979
00:37:52,870 --> 00:37:58,390
<font color="#E5E5E5">used with and right at the moment it's</font>

980
00:37:55,180 --> 00:38:00,609
<font color="#E5E5E5">only to mandated curves and by mandated</font>

981
00:37:58,390 --> 00:38:02,470
curves it means that the TPM must handle

982
00:38:00,610 --> 00:38:05,140
these there<font color="#E5E5E5"> are lots of other optional</font>

983
00:38:02,470 --> 00:38:07,419
curves that<font color="#E5E5E5"> the TCG is</font><font color="#CCCCCC"> parameterised</font><font color="#E5E5E5"> but</font>

984
00:38:05,140 --> 00:38:09,609
<font color="#E5E5E5">manufacturers being manufacturers you'll</font>

985
00:38:07,420 --> 00:38:11,860
find that every TPM<font color="#E5E5E5"> - oh you have</font>

986
00:38:09,610 --> 00:38:14,020
basically only<font color="#E5E5E5"> supports the mandated</font>

987
00:38:11,860 --> 00:38:16,060
curves<font color="#E5E5E5"> and</font><font color="#CCCCCC"> no others so</font><font color="#E5E5E5"> you have a</font>

988
00:38:14,020 --> 00:38:19,060
choice of two<font color="#E5E5E5"> curves and they are the</font>

989
00:38:16,060 --> 00:38:22,420
burrito narrowing 256 which nobody<font color="#E5E5E5"> uses</font>

990
00:38:19,060 --> 00:38:24,610
or the<font color="#CCCCCC"> NIST P 256 curve which is</font><font color="#E5E5E5"> the one</font>

991
00:38:22,420 --> 00:38:27,670
the<font color="#E5E5E5"> NS the</font><font color="#CCCCCC"> NS a has</font><font color="#E5E5E5"> come up with and</font><font color="#CCCCCC"> is</font>

992
00:38:24,610 --> 00:38:29,830
<font color="#E5E5E5">not trusted by any other country</font><font color="#CCCCCC"> it's</font>

993
00:38:27,670 --> 00:38:32,440
<font color="#CCCCCC">deadly if we were in China I'd be saying</font>

994
00:38:29,830 --> 00:38:35,140
you have the burrito<font color="#CCCCCC"> narrowing 256 curve</font>

995
00:38:32,440 --> 00:38:36,880
and you have the SM 256 curve which the

996
00:38:35,140 --> 00:38:39,339
Chinese<font color="#E5E5E5"> came up with and which nobody</font>

997
00:38:36,880 --> 00:38:42,250
else trusts<font color="#E5E5E5"> that they can't decrypt but</font>

998
00:38:39,340 --> 00:38:43,900
the point is<font color="#E5E5E5"> that you have to use the</font>

999
00:38:42,250 --> 00:38:45,640
<font color="#E5E5E5">mandated curves otherwise</font><font color="#CCCCCC"> you are not</font>

1000
00:38:43,900 --> 00:38:48,100
<font color="#E5E5E5">transferring your private keys into the</font>

1001
00:38:45,640 --> 00:38:50,920
TPM<font color="#CCCCCC"> this is a bit unfortunate for a lot</font>

1002
00:38:48,100 --> 00:38:52,779
<font color="#E5E5E5">of us because the Bernstein curve 255</font>

1003
00:38:50,920 --> 00:38:54,700
<font color="#CCCCCC">1/9 is actually the most popular out</font>

1004
00:38:52,780 --> 00:38:56,920
curve and<font color="#E5E5E5"> open source and that's not</font>

1005
00:38:54,700 --> 00:39:01,180
even<font color="#E5E5E5"> parameterised by the C's TCG so</font>

1006
00:38:56,920 --> 00:39:03,480
it's not<font color="#E5E5E5"> even</font><font color="#CCCCCC"> on the</font><font color="#E5E5E5"> TCG radar but if</font>

1007
00:39:01,180 --> 00:39:04,759
you can live<font color="#E5E5E5"> with all of these issues</font>

1008
00:39:03,480 --> 00:39:06,680
the

1009
00:39:04,760 --> 00:39:09,470
only<font color="#E5E5E5"> a remaining problem with open SSL</font>

1010
00:39:06,680 --> 00:39:11,690
is that open<font color="#E5E5E5"> SSL uses a different</font><font color="#CCCCCC"> API</font>

1011
00:39:09,470 --> 00:39:13,279
for<font color="#E5E5E5"> every key format it has so if you</font>

1012
00:39:11,690 --> 00:39:15,650
have a PEM key it has<font color="#CCCCCC"> a</font><font color="#E5E5E5"> pair API for</font>

1013
00:39:13,280 --> 00:39:17,540
<font color="#CCCCCC">adder key it</font><font color="#E5E5E5"> has a durable and for an</font>

1014
00:39:15,650 --> 00:39:19,579
engine key it<font color="#CCCCCC"> has an engine API</font>

1015
00:39:17,540 --> 00:39:22,130
chances are the crypto system you're

1016
00:39:19,579 --> 00:39:26,089
using<font color="#E5E5E5"> didn't bother to actually add the</font>

1017
00:39:22,130 --> 00:39:29,390
engine load private key<font color="#CCCCCC"> so even if I</font>

1018
00:39:26,089 --> 00:39:32,420
<font color="#E5E5E5">enable the use of private key engine</font>

1019
00:39:29,390 --> 00:39:33,859
private<font color="#E5E5E5"> keys in open SSL often</font><font color="#CCCCCC"> there's</font>

1020
00:39:32,420 --> 00:39:36,170
still a couple<font color="#CCCCCC"> of lines</font><font color="#E5E5E5"> that have to be</font>

1021
00:39:33,859 --> 00:39:38,480
<font color="#E5E5E5">added to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> open source program to get</font>

1022
00:39:36,170 --> 00:39:41,710
it to load the engine private key<font color="#CCCCCC"> if it</font>

1023
00:39:38,480 --> 00:39:43,880
can't<font color="#CCCCCC"> find any of the other private</font><font color="#E5E5E5"> keys</font>

1024
00:39:41,710 --> 00:39:45,440
<font color="#E5E5E5">however it's easier in a couple of a</font>

1025
00:39:43,880 --> 00:39:47,060
<font color="#CCCCCC">couple of lines I actually did it to</font>

1026
00:39:45,440 --> 00:39:50,839
open VPN and I'm just<font color="#CCCCCC"> trying</font><font color="#E5E5E5"> to get the</font>

1027
00:39:47,060 --> 00:39:52,910
patches up now it looks fairly<font color="#E5E5E5"> simple</font><font color="#CCCCCC"> I</font>

1028
00:39:50,839 --> 00:39:55,578
also did<font color="#E5E5E5"> it to open SSH which is</font>

1029
00:39:52,910 --> 00:39:57,680
actually<font color="#E5E5E5"> based in open SSL the patch to</font>

1030
00:39:55,579 --> 00:40:00,260
use engine<font color="#CCCCCC"> keys is fairly simple the</font>

1031
00:39:57,680 --> 00:40:02,569
problem is<font color="#E5E5E5"> that when you</font><font color="#CCCCCC"> use the OpenSSH</font>

1032
00:40:00,260 --> 00:40:04,790
agent the way it's used to handling<font color="#E5E5E5"> keys</font>

1033
00:40:02,570 --> 00:40:07,430
<font color="#CCCCCC">is it</font><font color="#E5E5E5"> passes the private keys to the</font>

1034
00:40:04,790 --> 00:40:08,990
agent via their primes<font color="#CCCCCC"> and if it's a TPM</font>

1035
00:40:07,430 --> 00:40:09,980
key you<font color="#E5E5E5"> cannot do</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> because you do</font>

1036
00:40:08,990 --> 00:40:11,868
not know the<font color="#E5E5E5"> primes</font>

1037
00:40:09,980 --> 00:40:14,839
so there had to be an additional<font color="#E5E5E5"> patch</font>

1038
00:40:11,869 --> 00:40:17,750
to open SSH that actually allows the

1039
00:40:14,839 --> 00:40:19,310
agent to work<font color="#E5E5E5"> with engine keys but</font><font color="#CCCCCC"> I</font>

1040
00:40:17,750 --> 00:40:22,730
have all those<font color="#CCCCCC"> patches and</font><font color="#E5E5E5"> I produce</font>

1041
00:40:19,310 --> 00:40:24,799
<font color="#E5E5E5">them for</font><font color="#CCCCCC"> OpenSSH the new PG was not even</font>

1042
00:40:22,730 --> 00:40:26,390
<font color="#CCCCCC">based on open SSL so I had to look</font>

1043
00:40:24,800 --> 00:40:28,910
through<font color="#CCCCCC"> decrypt and various other things</font>

1044
00:40:26,390 --> 00:40:32,240
<font color="#E5E5E5">to</font><font color="#CCCCCC"> get it to work</font><font color="#E5E5E5"> and I therefore wrote</font>

1045
00:40:28,910 --> 00:40:34,848
a new TPM module for it and it does key

1046
00:40:32,240 --> 00:40:39,259
conversion by edit key<font color="#E5E5E5"> with a new</font><font color="#CCCCCC"> GPG</font>

1047
00:40:34,849 --> 00:40:41,329
command called T key to TP M so let's

1048
00:40:39,260 --> 00:40:42,890
demo all of this so you can<font color="#E5E5E5"> actually see</font>

1049
00:40:41,329 --> 00:40:45,460
what I'm doing in the final five minutes

1050
00:40:42,890 --> 00:40:45,460
<font color="#E5E5E5">I hope</font>

1051
00:40:53,730 --> 00:40:59,010
<font color="#E5E5E5">okay that roughly visible to everybody</font>

1052
00:41:00,630 --> 00:41:07,570
yep<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> okay so</font><font color="#CCCCCC"> I have a</font><font color="#E5E5E5"> brand</font>

1053
00:41:05,350 --> 00:41:13,410
<font color="#E5E5E5">new</font><font color="#CCCCCC"> GPG system I'm going to use so let's</font>

1054
00:41:07,570 --> 00:41:20,980
<font color="#E5E5E5">do a so this is just me generating a</font>

1055
00:41:13,410 --> 00:41:22,299
rubbish so now it's just generating for

1056
00:41:20,980 --> 00:41:23,920
me<font color="#E5E5E5"> it's going to ask me for</font><font color="#CCCCCC"> a passphrase</font>

1057
00:41:22,300 --> 00:41:26,170
I'm<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> type test as the</font><font color="#CCCCCC"> passphrase</font>

1058
00:41:23,920 --> 00:41:28,120
<font color="#E5E5E5">which it doesn't like because it's too</font>

1059
00:41:26,170 --> 00:41:29,770
<font color="#E5E5E5">short</font><font color="#CCCCCC"> you should never use</font><font color="#E5E5E5"> test as your</font>

1060
00:41:28,120 --> 00:41:31,690
key passphrase<font color="#E5E5E5"> apart from you doing</font>

1061
00:41:29,770 --> 00:41:33,759
demos by the way I should<font color="#E5E5E5"> give you</font><font color="#CCCCCC"> that</font>

1062
00:41:31,690 --> 00:41:36,790
<font color="#E5E5E5">warning</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you can see it's</font><font color="#CCCCCC"> created for</font>

1063
00:41:33,760 --> 00:41:39,160
me<font color="#CCCCCC"> to RSA keys can you everybody see</font>

1064
00:41:36,790 --> 00:41:41,740
this I know there's a bit of obscurity

1065
00:41:39,160 --> 00:41:48,730
from<font color="#E5E5E5"> the console if you can see this</font><font color="#CCCCCC"> and</font>

1066
00:41:41,740 --> 00:41:53,680
in true<font color="#CCCCCC"> GPG style if you look in the GPG</font>

1067
00:41:48,730 --> 00:41:55,480
private directory<font color="#E5E5E5"> let's look at these</font>

1068
00:41:53,680 --> 00:41:57,730
<font color="#E5E5E5">there</font><font color="#CCCCCC"> are nine nine key if that's</font>

1069
00:41:55,480 --> 00:42:00,010
actually<font color="#CCCCCC"> stored</font><font color="#E5E5E5"> as an S expression for a</font>

1070
00:41:57,730 --> 00:42:03,370
protected private key it's an RSA key

1071
00:42:00,010 --> 00:42:06,280
it's got the modulus and<font color="#CCCCCC"> the exponent</font>

1072
00:42:03,370 --> 00:42:07,990
<font color="#CCCCCC">the public key</font><font color="#E5E5E5"> and it's protected via</font>

1073
00:42:06,280 --> 00:42:11,340
this encryption algorithm which is<font color="#CCCCCC"> the</font>

1074
00:42:07,990 --> 00:42:17,560
standard<font color="#E5E5E5"> way</font><font color="#CCCCCC"> that it does all of</font><font color="#E5E5E5"> this</font>

1075
00:42:11,340 --> 00:42:19,780
but what I can do if I do the so this<font color="#E5E5E5"> is</font>

1076
00:42:17,560 --> 00:42:21,490
one I've altered<font color="#E5E5E5"> earlier I'm sorry</font><font color="#CCCCCC"> I</font>

1077
00:42:19,780 --> 00:42:24,160
<font color="#E5E5E5">need to tell it what name I gave his</font>

1078
00:42:21,490 --> 00:42:26,890
tests wasn't it<font color="#E5E5E5"> so these are my keys</font>

1079
00:42:24,160 --> 00:42:30,069
I've got my primary key that's used for

1080
00:42:26,890 --> 00:42:33,640
signing and certification<font color="#E5E5E5"> my encryption</font>

1081
00:42:30,070 --> 00:42:35,380
<font color="#E5E5E5">sub key both RSA and both are currently</font>

1082
00:42:33,640 --> 00:42:37,810
just<font color="#CCCCCC"> sort of sitting in encrypted form</font>

1083
00:42:35,380 --> 00:42:39,070
<font color="#E5E5E5">my</font><font color="#CCCCCC"> GPG directory</font><font color="#E5E5E5"> so now I'm going to</font>

1084
00:42:37,810 --> 00:42:43,779
convert<font color="#E5E5E5"> let's actually see what the</font>

1085
00:42:39,070 --> 00:42:45,610
grips are<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> three seven key is</font>

1086
00:42:43,780 --> 00:42:48,580
actually<font color="#E5E5E5"> my primary key what I'm going</font>

1087
00:42:45,610 --> 00:42:51,680
<font color="#E5E5E5">to do I'm going to put my primary key</font>

1088
00:42:48,580 --> 00:42:53,299
<font color="#E5E5E5">into the TPM key to TPM</font>

1089
00:42:51,680 --> 00:42:55,279
and it's going to<font color="#E5E5E5"> ask me</font><font color="#CCCCCC"> if I want</font><font color="#E5E5E5"> to</font>

1090
00:42:53,300 --> 00:42:57,109
move<font color="#E5E5E5"> the primary key</font><font color="#CCCCCC"> I now have to give</font>

1091
00:42:55,280 --> 00:43:06,500
it<font color="#E5E5E5"> my decryption passphrase which is</font>

1092
00:42:57,109 --> 00:43:09,348
tasked to<font color="#E5E5E5"> decrypt the key and and now</font>

1093
00:43:06,500 --> 00:43:10,849
it's going to give me<font color="#E5E5E5"> a TPM passphrase</font>

1094
00:43:09,349 --> 00:43:14,329
which I'm gonna<font color="#E5E5E5"> use</font><font color="#CCCCCC"> this TPM which you</font>

1095
00:43:10,849 --> 00:43:16,970
should never use anyway<font color="#E5E5E5"> and now it will</font>

1096
00:43:14,329 --> 00:43:19,579
actually convert my private key<font color="#E5E5E5"> I</font>

1097
00:43:16,970 --> 00:43:21,379
actually<font color="#E5E5E5"> when I inserted this into</font><font color="#CCCCCC"> GPG I</font>

1098
00:43:19,579 --> 00:43:24,290
just<font color="#CCCCCC"> basically used</font><font color="#E5E5E5"> the card API</font>

1099
00:43:21,380 --> 00:43:26,420
<font color="#E5E5E5">diversions so it comes back as a special</font>

1100
00:43:24,290 --> 00:43:29,930
card<font color="#E5E5E5"> serial number saying TPM protected</font>

1101
00:43:26,420 --> 00:43:34,670
<font color="#E5E5E5">this now means that</font><font color="#CCCCCC"> this RSA key which</font>

1102
00:43:29,930 --> 00:43:36,200
was<font color="#CCCCCC"> a grip 3 7 is now protected and</font>

1103
00:43:34,670 --> 00:43:37,460
there's a slight trick to this you

1104
00:43:36,200 --> 00:43:39,828
<font color="#E5E5E5">notice that when you whenever you do a</font>

1105
00:43:37,460 --> 00:43:41,930
key operation and quit<font color="#CCCCCC"> GPG it usually</font>

1106
00:43:39,829 --> 00:43:43,460
asks you<font color="#CCCCCC"> for confirmation it didn't this</font>

1107
00:43:41,930 --> 00:43:46,160
time<font color="#E5E5E5"> because as soon as you do key to</font>

1108
00:43:43,460 --> 00:43:48,829
TPM the conversion is instantaneous but

1109
00:43:46,160 --> 00:43:50,509
if I<font color="#E5E5E5"> actually look at the protected key</font>

1110
00:43:48,829 --> 00:43:52,849
it's the wrong one<font color="#CCCCCC"> because that was my</font>

1111
00:43:50,510 --> 00:43:56,210
sub key but I had a<font color="#CCCCCC"> 50/50 chance</font><font color="#E5E5E5"> of</font>

1112
00:43:52,849 --> 00:43:58,520
<font color="#E5E5E5">getting</font><font color="#CCCCCC"> that wrong see the format of the</font>

1113
00:43:56,210 --> 00:44:01,670
key is now a<font color="#E5E5E5"> shadowed private key which</font>

1114
00:43:58,520 --> 00:44:04,910
<font color="#CCCCCC">is</font><font color="#E5E5E5"> the same format as you use for card</font>

1115
00:44:01,670 --> 00:44:07,549
keys but the shadow information<font color="#CCCCCC"> actually</font>

1116
00:44:04,910 --> 00:44:09,348
has a TPM designation here and what's

1117
00:44:07,549 --> 00:44:11,869
stored in the shadow information is the

1118
00:44:09,349 --> 00:44:15,950
parent the public key blob and private

1119
00:44:11,869 --> 00:44:17,960
key blob<font color="#E5E5E5"> so the shadow private key is</font>

1120
00:44:15,950 --> 00:44:20,149
<font color="#E5E5E5">now</font><font color="#CCCCCC"> actually storing</font><font color="#E5E5E5"> all of the TPM</font>

1121
00:44:17,960 --> 00:44:23,750
information so you<font color="#E5E5E5"> can still do a denial</font>

1122
00:44:20,150 --> 00:44:25,790
<font color="#E5E5E5">of</font><font color="#CCCCCC"> service attack on my my GP my TPM</font>

1123
00:44:23,750 --> 00:44:28,640
protected GP<font color="#E5E5E5"> G key by destroying this</font>

1124
00:44:25,790 --> 00:44:31,220
file but now you cannot steal this file

1125
00:44:28,640 --> 00:44:36,049
from<font color="#E5E5E5"> my laptop</font><font color="#CCCCCC"> and everything is secure</font>

1126
00:44:31,220 --> 00:44:39,649
<font color="#CCCCCC">and</font><font color="#E5E5E5"> I suppose one of the things I should</font>

1127
00:44:36,049 --> 00:44:41,839
show you is<font color="#E5E5E5"> actually adding a key to</font>

1128
00:44:39,650 --> 00:44:46,910
this so let's<font color="#CCCCCC"> say I want to actually add</font>

1129
00:44:41,839 --> 00:44:48,920
an encryption sub key let's do a signing

1130
00:44:46,910 --> 00:44:51,589
sub key so let's do an elliptic curve

1131
00:44:48,920 --> 00:44:53,809
signing sub key<font color="#E5E5E5"> now it gives me</font><font color="#CCCCCC"> a lot of</font>

1132
00:44:51,589 --> 00:44:55,490
choices<font color="#CCCCCC"> for curves but as you know this</font>

1133
00:44:53,809 --> 00:44:57,950
<font color="#E5E5E5">is</font><font color="#CCCCCC"> the only curve choice I</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> actually</font>

1134
00:44:55,490 --> 00:44:59,689
use so I will choose curve 3 because

1135
00:44:57,950 --> 00:45:01,640
it's<font color="#E5E5E5"> Hobson's choice for me now I'll</font>

1136
00:44:59,690 --> 00:45:02,350
give it a no expiry<font color="#E5E5E5"> it will ask me</font><font color="#CCCCCC"> if</font>

1137
00:45:01,640 --> 00:45:05,710
this is<font color="#E5E5E5"> curve</font>

1138
00:45:02,350 --> 00:45:08,380
yes I want<font color="#E5E5E5"> to really create it yes and I</font>

1139
00:45:05,710 --> 00:45:11,830
need<font color="#CCCCCC"> a passphrase to protect the key so</font>

1140
00:45:08,380 --> 00:45:13,990
I'll use test again<font color="#E5E5E5"> and I also need the</font>

1141
00:45:11,830 --> 00:45:16,299
primary key the certification key pass

1142
00:45:13,990 --> 00:45:18,790
phrase to attach this<font color="#CCCCCC"> and remember now</font>

1143
00:45:16,300 --> 00:45:20,230
<font color="#E5E5E5">it asked me she asked me for a TPM key</font>

1144
00:45:18,790 --> 00:45:22,300
pass phrase because this key is in my

1145
00:45:20,230 --> 00:45:26,530
TPM<font color="#E5E5E5"> that's the clue to the user that</font>

1146
00:45:22,300 --> 00:45:29,260
your key is actually TPM protected and

1147
00:45:26,530 --> 00:45:32,800
now what you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see is I actually have</font>

1148
00:45:29,260 --> 00:45:36,760
<font color="#CCCCCC">an on TPM protected secondary key that's</font>

1149
00:45:32,800 --> 00:45:38,770
actually used<font color="#E5E5E5"> for signing and I can</font>

1150
00:45:36,760 --> 00:45:41,380
actually<font color="#E5E5E5"> save this key but now what I</font>

1151
00:45:38,770 --> 00:45:44,470
can do is I can<font color="#E5E5E5"> select this sub key sub</font>

1152
00:45:41,380 --> 00:45:46,480
key number<font color="#CCCCCC"> two and I</font><font color="#E5E5E5"> can just convert</font>

1153
00:45:44,470 --> 00:45:48,520
this to TPM form as well so I need to

1154
00:45:46,480 --> 00:45:53,290
give it<font color="#CCCCCC"> the</font><font color="#E5E5E5"> test passphrase to give it</font>

1155
00:45:48,520 --> 00:45:55,930
<font color="#E5E5E5">the TPM passphrase</font><font color="#CCCCCC"> and now if you</font><font color="#E5E5E5"> look I</font>

1156
00:45:53,290 --> 00:45:58,120
have<font color="#E5E5E5"> not only a protected certification</font>

1157
00:45:55,930 --> 00:46:00,430
key but I also have a TPM protected

1158
00:45:58,120 --> 00:46:02,109
signing key<font color="#E5E5E5"> and I suppose and notice</font>

1159
00:46:00,430 --> 00:46:03,850
when I quit it doesn't ask me to<font color="#CCCCCC"> confirm</font>

1160
00:46:02,110 --> 00:46:09,130
<font color="#CCCCCC">because that conversion is already done</font>

1161
00:46:03,850 --> 00:46:10,900
and if I want<font color="#E5E5E5"> to sign</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> little text file</font>

1162
00:46:09,130 --> 00:46:13,690
which I did earlier but<font color="#CCCCCC"> will overwrite</font>

1163
00:46:10,900 --> 00:46:16,600
it anyway it's now asking<font color="#CCCCCC"> me to sign</font>

1164
00:46:13,690 --> 00:46:19,210
with<font color="#CCCCCC"> my TPM passphrase so I type my TPM</font>

1165
00:46:16,600 --> 00:46:23,589
passphrase the TPM itself constructed

1166
00:46:19,210 --> 00:46:26,050
the signature of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> file and if I</font>

1167
00:46:23,590 --> 00:46:28,720
<font color="#CCCCCC">actually verify this</font><font color="#E5E5E5"> you can see the</font>

1168
00:46:26,050 --> 00:46:30,970
<font color="#E5E5E5">verification is done using an ECDSA key</font>

1169
00:46:28,720 --> 00:46:32,500
that<font color="#E5E5E5"> I just created</font><font color="#CCCCCC"> and that signature</font>

1170
00:46:30,970 --> 00:46:34,959
was actually done through the TPM

1171
00:46:32,500 --> 00:46:36,370
encryption operations<font color="#CCCCCC"> if</font><font color="#E5E5E5"> I TPM protect</font>

1172
00:46:34,960 --> 00:46:39,190
the encryption key<font color="#E5E5E5"> will be done in</font>

1173
00:46:36,370 --> 00:46:41,109
exactly<font color="#CCCCCC"> the same way I was going</font><font color="#E5E5E5"> to</font>

1174
00:46:39,190 --> 00:46:43,450
demonstrate how all this works with<font color="#E5E5E5"> open</font>

1175
00:46:41,110 --> 00:46:45,340
SSL but I think I'll do you the courtesy

1176
00:46:43,450 --> 00:46:47,470
of allowing<font color="#CCCCCC"> it to ask questions before</font>

1177
00:46:45,340 --> 00:46:51,010
you<font color="#E5E5E5"> run out of time</font><font color="#CCCCCC"> so in the last three</font>

1178
00:46:47,470 --> 00:46:52,660
minutes there's any well I did have<font color="#E5E5E5"> a</font>

1179
00:46:51,010 --> 00:46:55,380
<font color="#CCCCCC">conclusion but</font><font color="#E5E5E5"> I won't bother</font><font color="#CCCCCC"> does</font>

1180
00:46:52,660 --> 00:46:58,379
anybody have<font color="#E5E5E5"> any questions about this</font>

1181
00:46:55,380 --> 00:46:58,380
yep

1182
00:46:58,750 --> 00:47:02,690
so the question was when<font color="#E5E5E5"> can we get the</font>

1183
00:47:01,070 --> 00:47:05,540
<font color="#CCCCCC">GPG patches the answer is they're</font>

1184
00:47:02,690 --> 00:47:07,370
already<font color="#E5E5E5"> posted to the list</font><font color="#CCCCCC"> I believe in</font>

1185
00:47:05,540 --> 00:47:09,259
the URLs they did for<font color="#CCCCCC"> forced</font><font color="#E5E5E5"> them I</font>

1186
00:47:07,370 --> 00:47:11,630
might have referred<font color="#E5E5E5"> to the patch but if</font>

1187
00:47:09,260 --> 00:47:13,340
not the<font color="#CCCCCC"> GPG list is very low traffic and</font>

1188
00:47:11,630 --> 00:47:15,980
they were posted<font color="#CCCCCC"> over the last month you</font>

1189
00:47:13,340 --> 00:47:18,170
can just<font color="#E5E5E5"> find them there</font><font color="#CCCCCC"> I know in the</font>

1190
00:47:15,980 --> 00:47:20,180
URLs for<font color="#E5E5E5"> the FOSDEM session</font><font color="#CCCCCC"> actually</font>

1191
00:47:18,170 --> 00:47:21,980
pointed to my open<font color="#CCCCCC"> soos a build service</font>

1192
00:47:20,180 --> 00:47:26,299
<font color="#CCCCCC">there's actually</font><font color="#E5E5E5"> building this version</font>

1193
00:47:21,980 --> 00:47:30,770
<font color="#E5E5E5">of</font><font color="#CCCCCC"> GPG for Debian 9 open</font><font color="#E5E5E5"> SUSE and Fedora</font>

1194
00:47:26,300 --> 00:47:33,140
26 I think<font color="#CCCCCC"> and</font><font color="#E5E5E5"> Fedora rawhide ok</font>

1195
00:47:30,770 --> 00:47:35,150
question what is the<font color="#CCCCCC"> we conversion</font>

1196
00:47:33,140 --> 00:47:38,319
process if you want<font color="#CCCCCC"> to transfer your</font>

1197
00:47:35,150 --> 00:47:40,460
<font color="#CCCCCC">queue to</font><font color="#E5E5E5"> your keys to a different GPM</font>

1198
00:47:38,320 --> 00:47:43,220
sorry what was the question<font color="#E5E5E5"> what's the</font>

1199
00:47:40,460 --> 00:47:46,730
conversion<font color="#E5E5E5"> process for transferring your</font>

1200
00:47:43,220 --> 00:47:48,589
keys from<font color="#CCCCCC"> one GPM to another</font><font color="#E5E5E5"> so there is</font>

1201
00:47:46,730 --> 00:47:51,980
no conversion process for transferring

1202
00:47:48,590 --> 00:47:54,140
keys from<font color="#E5E5E5"> one TPM to another</font><font color="#CCCCCC"> they're the</font>

1203
00:47:51,980 --> 00:47:56,690
TPM allows for something called key

1204
00:47:54,140 --> 00:47:59,359
duplication but for all the keys<font color="#CCCCCC"> that I</font>

1205
00:47:56,690 --> 00:48:01,490
create<font color="#E5E5E5"> the duplication policy is empty</font>

1206
00:47:59,360 --> 00:48:03,410
which<font color="#CCCCCC"> means they can never be</font><font color="#E5E5E5"> extracted</font>

1207
00:48:01,490 --> 00:48:05,419
from the TPM the problem with

1208
00:48:03,410 --> 00:48:07,850
duplicatable<font color="#E5E5E5"> keys is they can be</font>

1209
00:48:05,420 --> 00:48:09,860
extracted<font color="#E5E5E5"> from CPM and that means the</font>

1210
00:48:07,850 --> 00:48:11,810
clever<font color="#CCCCCC"> attacker can cause the extraction</font>

1211
00:48:09,860 --> 00:48:15,110
and you've effectively<font color="#E5E5E5"> lost the property</font>

1212
00:48:11,810 --> 00:48:18,830
<font color="#CCCCCC">of TPM protection so for</font><font color="#E5E5E5"> your own safety</font>

1213
00:48:15,110 --> 00:48:20,540
<font color="#CCCCCC">I believe the best use of the TPM is</font>

1214
00:48:18,830 --> 00:48:23,000
actually<font color="#E5E5E5"> one way conversion of the keys</font>

1215
00:48:20,540 --> 00:48:26,840
which means that<font color="#CCCCCC"> nobody not even</font><font color="#E5E5E5"> you can</font>

1216
00:48:23,000 --> 00:48:29,630
<font color="#E5E5E5">ever get them out of TPM format</font><font color="#CCCCCC"> ok</font>

1217
00:48:26,840 --> 00:48:32,600
here's the<font color="#CCCCCC"> question if I run</font><font color="#E5E5E5"> this on</font>

1218
00:48:29,630 --> 00:48:34,910
<font color="#CCCCCC">armed with the trust</font><font color="#E5E5E5"> zone feature in the</font>

1219
00:48:32,600 --> 00:48:38,480
CPU<font color="#CCCCCC"> does it is it</font><font color="#E5E5E5"> also compatible with</font>

1220
00:48:34,910 --> 00:48:41,149
TPM 2.0 so the question is is trust<font color="#E5E5E5"> zone</font>

1221
00:48:38,480 --> 00:48:43,160
compatible with TPM 2.0<font color="#E5E5E5"> and the answer</font>

1222
00:48:41,150 --> 00:48:44,990
is they're two<font color="#CCCCCC"> different things so the</font>

1223
00:48:43,160 --> 00:48:47,240
TPM<font color="#CCCCCC"> is a discrete processing module</font>

1224
00:48:44,990 --> 00:48:48,979
trust<font color="#CCCCCC"> zone is sort of the</font><font color="#E5E5E5"> arm in</font><font color="#CCCCCC"> clave</font>

1225
00:48:47,240 --> 00:48:52,490
technology a bit like<font color="#CCCCCC"> SGX</font>

1226
00:48:48,980 --> 00:48:55,460
<font color="#E5E5E5">so you can use trust zone to implement a</font>

1227
00:48:52,490 --> 00:48:57,799
<font color="#E5E5E5">software-based TPM and as long</font><font color="#CCCCCC"> as you're</font>

1228
00:48:55,460 --> 00:49:00,410
willing<font color="#CCCCCC"> to trust that software based TPM</font>

1229
00:48:57,800 --> 00:49:02,870
and you have<font color="#E5E5E5"> effectively you've put the</font>

1230
00:49:00,410 --> 00:49:05,060
TPM emulator into the Enclave you can

1231
00:49:02,870 --> 00:49:06,319
use something<font color="#E5E5E5"> in trust zone like the TPM</font>

1232
00:49:05,060 --> 00:49:08,279
but<font color="#CCCCCC"> by-and-large</font>

1233
00:49:06,320 --> 00:49:10,650
<font color="#CCCCCC">just if vanilla trust zone</font>

1234
00:49:08,280 --> 00:49:12,710
no TPM capabilities so<font color="#E5E5E5"> you require a</font>

1235
00:49:10,650 --> 00:49:15,300
discreet TPM to<font color="#E5E5E5"> get this to function</font>

1236
00:49:12,710 --> 00:49:17,130
<font color="#CCCCCC">Intel actually</font><font color="#E5E5E5"> has an interesting thing</font>

1237
00:49:15,300 --> 00:49:18,900
called the Intel PTT that I always

1238
00:49:17,130 --> 00:49:21,270
<font color="#E5E5E5">forget what it means but</font><font color="#CCCCCC"> defend</font>

1239
00:49:18,900 --> 00:49:22,890
essentially it<font color="#CCCCCC"> means a TPM that runs in</font>

1240
00:49:21,270 --> 00:49:24,990
the a ring equivalent to the<font color="#E5E5E5"> management</font>

1241
00:49:22,890 --> 00:49:26,700
engine on the<font color="#E5E5E5"> CPU which is obviously</font>

1242
00:49:24,990 --> 00:49:28,080
after discovering the management engine

1243
00:49:26,700 --> 00:49:30,330
is<font color="#E5E5E5"> running Linux something you'd all</font>

1244
00:49:28,080 --> 00:49:32,850
trust in<font color="#E5E5E5"> this room so you do</font><font color="#CCCCCC"> have to be</font>

1245
00:49:30,330 --> 00:49:38,250
careful<font color="#CCCCCC"> of</font><font color="#E5E5E5"> software-based</font><font color="#CCCCCC"> TPMS even in</font>

1246
00:49:32,850 --> 00:49:42,230
things like<font color="#CCCCCC"> trust</font><font color="#E5E5E5"> sir</font><font color="#CCCCCC"> ok no</font><font color="#E5E5E5"> more</font>

1247
00:49:38,250 --> 00:49:42,230
<font color="#E5E5E5">questions</font><font color="#CCCCCC"> ok one</font><font color="#E5E5E5"> more question</font>

1248
00:49:59,890 --> 00:50:04,069
so the question is<font color="#E5E5E5"> does the</font><font color="#CCCCCC"> Colonel</font>

1249
00:50:02,210 --> 00:50:06,110
keyring have integration with the TPM

1250
00:50:04,070 --> 00:50:08,150
and<font color="#E5E5E5"> the answer is yes but it's not what</font>

1251
00:50:06,110 --> 00:50:11,210
<font color="#CCCCCC">you expect so the colonel has this</font>

1252
00:50:08,150 --> 00:50:13,190
concept of TPM trusted keys but it

1253
00:50:11,210 --> 00:50:14,780
doesn't mean that<font color="#E5E5E5"> it will use the TPM</font><font color="#CCCCCC"> to</font>

1254
00:50:13,190 --> 00:50:16,070
do the signature operations and the

1255
00:50:14,780 --> 00:50:19,250
<font color="#E5E5E5">encryption operations</font>

1256
00:50:16,070 --> 00:50:21,560
what TPM trusted keys means is that<font color="#E5E5E5"> the</font>

1257
00:50:19,250 --> 00:50:25,160
data<font color="#E5E5E5"> that forms the key is sealed sealed</font>

1258
00:50:21,560 --> 00:50:27,770
to the TPM<font color="#CCCCCC"> so when you use a TPM trusted</font>

1259
00:50:25,160 --> 00:50:30,319
key unlock it actually<font color="#E5E5E5"> brings the key</font>

1260
00:50:27,770 --> 00:50:32,210
back<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the clear from the TPM so it's</font>

1261
00:50:30,320 --> 00:50:34,430
not<font color="#E5E5E5"> using the TPM to shield key</font>

1262
00:50:32,210 --> 00:50:36,950
operations in the same<font color="#E5E5E5"> way that I am but</font>

1263
00:50:34,430 --> 00:50:38,930
it's using a TPM function to protect<font color="#E5E5E5"> the</font>

1264
00:50:36,950 --> 00:50:41,540
keys and for instance<font color="#CCCCCC"> this is used for</font>

1265
00:50:38,930 --> 00:50:43,580
asymmetric<font color="#CCCCCC"> encryption keys so if you use</font>

1266
00:50:41,540 --> 00:50:45,560
Lux with TPM protection you would

1267
00:50:43,580 --> 00:50:47,779
actually<font color="#E5E5E5"> use this type of trusted sealed</font>

1268
00:50:45,560 --> 00:50:50,060
key<font color="#E5E5E5"> and the reason you use it is</font><font color="#CCCCCC"> because</font>

1269
00:50:47,780 --> 00:50:52,340
the TPM can't do<font color="#CCCCCC"> a symmetric key</font><font color="#E5E5E5"> as</font>

1270
00:50:50,060 --> 00:50:53,720
symmetric encryption operations<font color="#E5E5E5"> fast</font>

1271
00:50:52,340 --> 00:50:55,790
enough for you to actually<font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to</font>

1272
00:50:53,720 --> 00:50:57,950
<font color="#E5E5E5">decrypt</font><font color="#CCCCCC"> a disk so you need to get</font><font color="#E5E5E5"> the</font>

1273
00:50:55,790 --> 00:50:59,360
key back<font color="#E5E5E5"> and then you just need</font><font color="#CCCCCC"> to load</font>

1274
00:50:57,950 --> 00:51:01,430
it up<font color="#E5E5E5"> at</font><font color="#CCCCCC"> a software that does the</font>

1275
00:50:59,360 --> 00:51:03,200
symmetric decryption so that's the way

1276
00:51:01,430 --> 00:51:05,899
<font color="#E5E5E5">the trusted key functionality</font><font color="#CCCCCC"> in the</font>

1277
00:51:03,200 --> 00:51:07,490
kernel actually<font color="#E5E5E5"> works it's possible to</font>

1278
00:51:05,900 --> 00:51:09,440
actually<font color="#CCCCCC"> develop a new trusted key</font>

1279
00:51:07,490 --> 00:51:10,939
functionality<font color="#CCCCCC"> that</font><font color="#E5E5E5"> would actually do the</font>

1280
00:51:09,440 --> 00:51:12,800
<font color="#E5E5E5">signing and decryption operations</font>

1281
00:51:10,940 --> 00:51:15,590
through the TPM<font color="#E5E5E5"> but that doesn't</font>

1282
00:51:12,800 --> 00:51:19,280
currently exist<font color="#E5E5E5"> in the kernel today</font><font color="#CCCCCC"> okay</font>

1283
00:51:15,590 --> 00:51:20,870
and I<font color="#E5E5E5"> think</font><font color="#CCCCCC"> okay one more</font><font color="#E5E5E5"> question given</font>

1284
00:51:19,280 --> 00:51:24,410
<font color="#CCCCCC">that we don't</font><font color="#E5E5E5"> really know what</font><font color="#CCCCCC"> goes on</font>

1285
00:51:20,870 --> 00:51:26,270
<font color="#E5E5E5">inside the TPM silicon that the spec is</font>

1286
00:51:24,410 --> 00:51:28,520
kind of insane<font color="#E5E5E5"> in its API seems to only</font>

1287
00:51:26,270 --> 00:51:31,550
<font color="#E5E5E5">grow in complexity how do we trust this</font>

1288
00:51:28,520 --> 00:51:34,370
<font color="#CCCCCC">to</font><font color="#E5E5E5"> keep anything safe</font><font color="#CCCCCC"> so the question is</font>

1289
00:51:31,550 --> 00:51:35,750
basically<font color="#E5E5E5"> how do we trust the TPM if the</font>

1290
00:51:34,370 --> 00:51:38,630
spec is so<font color="#CCCCCC"> complicated the</font>

1291
00:51:35,750 --> 00:51:41,030
implementation is so<font color="#CCCCCC"> complicated</font><font color="#E5E5E5"> and the</font>

1292
00:51:38,630 --> 00:51:43,220
great answer<font color="#CCCCCC"> to that is that</font><font color="#E5E5E5"> the</font>

1293
00:51:41,030 --> 00:51:45,530
<font color="#CCCCCC">implementation is all available in open</font>

1294
00:51:43,220 --> 00:51:47,149
source<font color="#CCCCCC"> and so if you trust the open</font>

1295
00:51:45,530 --> 00:51:49,790
source<font color="#CCCCCC"> you can actually</font><font color="#E5E5E5"> trust that your</font>

1296
00:51:47,150 --> 00:51:51,860
TPM is working like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the problem is</font>

1297
00:51:49,790 --> 00:51:53,990
how do you<font color="#E5E5E5"> trust that the manufacturer</font>

1298
00:51:51,860 --> 00:51:56,210
of<font color="#E5E5E5"> your TPM actually implemented what</font>

1299
00:51:53,990 --> 00:51:58,220
you see<font color="#CCCCCC"> in</font><font color="#E5E5E5"> open source and the answer is</font>

1300
00:51:56,210 --> 00:51:59,990
you have<font color="#E5E5E5"> absolutely no guarantee of</font><font color="#CCCCCC"> that</font>

1301
00:51:58,220 --> 00:52:02,509
<font color="#E5E5E5">and as you saw recently with the</font>

1302
00:51:59,990 --> 00:52:03,830
<font color="#CCCCCC">Infineon cock-up over generating primes</font>

1303
00:52:02,510 --> 00:52:05,780
they don't<font color="#E5E5E5"> actually</font>

1304
00:52:03,830 --> 00:52:10,819
thoroughly use the<font color="#E5E5E5"> open-source version</font>

1305
00:52:05,780 --> 00:52:14,480
that was produced<font color="#CCCCCC"> so the only real</font>

1306
00:52:10,820 --> 00:52:17,180
<font color="#E5E5E5">security I can</font><font color="#CCCCCC"> give you is that</font><font color="#E5E5E5"> the TPM</font>

1307
00:52:14,480 --> 00:52:19,730
<font color="#CCCCCC">is just one thing and there's a lot</font><font color="#E5E5E5"> of</font>

1308
00:52:17,180 --> 00:52:22,520
bounty going for discovering key bugs

1309
00:52:19,730 --> 00:52:23,780
and security<font color="#E5E5E5"> bugs</font><font color="#CCCCCC"> and so this means that</font>

1310
00:52:22,520 --> 00:52:25,790
there are<font color="#E5E5E5"> a lot of people</font><font color="#CCCCCC"> lot of really</font>

1311
00:52:23,780 --> 00:52:27,650
clever<font color="#E5E5E5"> people attempting to prove that</font>

1312
00:52:25,790 --> 00:52:29,960
the TPM was manufactured wrongly and

1313
00:52:27,650 --> 00:52:31,940
<font color="#E5E5E5">will actually</font><font color="#CCCCCC"> give up its secrets so as</font>

1314
00:52:29,960 --> 00:52:34,100
long as<font color="#E5E5E5"> none of them has published a bug</font>

1315
00:52:31,940 --> 00:52:36,500
bounty<font color="#E5E5E5"> you can be reasonably certainly</font>

1316
00:52:34,100 --> 00:52:38,420
<font color="#E5E5E5">your TPM wasn't compromised</font><font color="#CCCCCC"> but that's</font>

1317
00:52:36,500 --> 00:52:39,830
about the<font color="#CCCCCC"> only</font><font color="#E5E5E5"> security you have and</font>

1318
00:52:38,420 --> 00:52:41,150
with that I think<font color="#E5E5E5"> I'd better say thank</font>

1319
00:52:39,830 --> 00:52:42,350
you<font color="#E5E5E5"> very much and give the next speaker</font>

1320
00:52:41,150 --> 00:52:48,679
time to set up<font color="#CCCCCC"> so thank you</font>

1321
00:52:42,350 --> 00:52:48,679
[Applause]

