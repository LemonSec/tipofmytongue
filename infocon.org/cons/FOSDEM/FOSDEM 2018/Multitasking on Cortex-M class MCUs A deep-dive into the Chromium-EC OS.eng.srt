1
00:00:05,050 --> 00:00:11,250
<font color="#E5E5E5">all right</font><font color="#CCCCCC"> can you</font><font color="#E5E5E5"> hear me</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> yeah all</font>

2
00:00:08,920 --> 00:00:15,969
<font color="#E5E5E5">right</font><font color="#CCCCCC"> um today I'm gonna</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font>

3
00:00:11,250 --> 00:00:20,170
<font color="#E5E5E5">multitasking on cortex-m or more</font>

4
00:00:15,969 --> 00:00:22,660
<font color="#CCCCCC">specially</font><font color="#E5E5E5"> cortex-m</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> class</font><font color="#CCCCCC"> em</font><font color="#E5E5E5"> shoes</font><font color="#CCCCCC"> I</font>

5
00:00:20,170 --> 00:00:24,580
gave<font color="#CCCCCC"> the</font><font color="#E5E5E5"> talk last year about the</font>

6
00:00:22,660 --> 00:00:28,330
chromium<font color="#CCCCCC"> AC with just a</font><font color="#E5E5E5"> film word that</font>

7
00:00:24,580 --> 00:00:30,639
we run on you know<font color="#CCCCCC"> Chromebooks and a</font>

8
00:00:28,330 --> 00:00:32,558
bunch of Google devices disclaimer I

9
00:00:30,640 --> 00:00:36,239
don't work for<font color="#E5E5E5"> Google I work for a</font><font color="#CCCCCC"> DOS</font>

10
00:00:32,558 --> 00:00:38,769
research or National Instruments<font color="#E5E5E5"> and</font>

11
00:00:36,239 --> 00:00:42,400
yeah<font color="#E5E5E5"> I mean</font><font color="#CCCCCC"> Emmett</font><font color="#E5E5E5"> embedded software</font>

12
00:00:38,770 --> 00:00:44,170
engineer at National Instruments<font color="#CCCCCC"> I do</font>

13
00:00:42,400 --> 00:00:48,070
all<font color="#CCCCCC"> kinds of embedded things firmware as</font>

14
00:00:44,170 --> 00:00:50,380
one<font color="#CCCCCC"> of them</font><font color="#E5E5E5"> and last year I was speaking</font>

15
00:00:48,070 --> 00:00:53,079
about how you could use chromium AC for

16
00:00:50,380 --> 00:00:55,390
your own projects and this year<font color="#E5E5E5"> I'm here</font>

17
00:00:53,079 --> 00:00:59,200
<font color="#E5E5E5">and we</font><font color="#CCCCCC"> just finished</font><font color="#E5E5E5"> our first</font><font color="#CCCCCC"> product</font>

18
00:00:55,390 --> 00:01:03,520
that<font color="#E5E5E5"> will release soonish that actually</font>

19
00:00:59,200 --> 00:01:07,619
<font color="#E5E5E5">uses chromium AC as from where for</font>

20
00:01:03,520 --> 00:01:09,969
temperature control<font color="#CCCCCC"> for fan control and</font>

21
00:01:07,619 --> 00:01:12,429
yeah we're probably going to<font color="#CCCCCC"> use it for</font>

22
00:01:09,969 --> 00:01:14,350
<font color="#CCCCCC">future ones other stuff I do I'm a</font>

23
00:01:12,429 --> 00:01:16,740
commentator for the<font color="#CCCCCC"> FDA manager</font>

24
00:01:14,350 --> 00:01:19,689
framework and I do random drive-by

25
00:01:16,740 --> 00:01:22,749
contributions to stuff we use or stuff

26
00:01:19,689 --> 00:01:25,089
that<font color="#CCCCCC"> I'm interested in I'll jump</font>

27
00:01:22,749 --> 00:01:28,658
directly to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> meet so their</font>

28
00:01:25,090 --> 00:01:31,439
<font color="#E5E5E5">microcontroller that</font><font color="#CCCCCC"> I picked for my for</font>

29
00:01:28,659 --> 00:01:34,779
my presentation<font color="#E5E5E5"> is a cortex</font><font color="#CCCCCC"> on 0 and</font>

30
00:01:31,439 --> 00:01:36,428
it's<font color="#CCCCCC"> armed v6 which is kind of</font><font color="#E5E5E5"> oldish</font>

31
00:01:34,779 --> 00:01:37,719
already but it's also<font color="#CCCCCC"> very</font><font color="#E5E5E5"> nice because</font>

32
00:01:36,429 --> 00:01:40,799
<font color="#CCCCCC">it's very</font><font color="#E5E5E5"> simple</font>

33
00:01:37,719 --> 00:01:42,848
<font color="#E5E5E5">and it's a good</font><font color="#CCCCCC"> example to walk through</font>

34
00:01:40,799 --> 00:01:44,560
multitasking and how we get<font color="#CCCCCC"> there by</font>

35
00:01:42,849 --> 00:01:48,849
<font color="#CCCCCC">using all the features that this core</font>

36
00:01:44,560 --> 00:01:52,419
gives<font color="#E5E5E5"> us so the registers are not a lot</font>

37
00:01:48,849 --> 00:01:54,310
<font color="#E5E5E5">we get</font><font color="#CCCCCC"> 16 registers and the blue ones</font>

38
00:01:52,419 --> 00:01:57,759
are<font color="#E5E5E5"> low registers they're a bit special</font>

39
00:01:54,310 --> 00:01:59,740
<font color="#CCCCCC">the cortex m0 runs only thumb mode</font><font color="#E5E5E5"> so</font>

40
00:01:57,759 --> 00:02:02,049
there's limited size<font color="#E5E5E5"> and instructions so</font>

41
00:01:59,740 --> 00:02:04,988
some some instructions<font color="#E5E5E5"> will just let us</font>

42
00:02:02,049 --> 00:02:08,470
access the<font color="#CCCCCC"> lower ones which are the</font><font color="#E5E5E5"> blue</font>

43
00:02:04,989 --> 00:02:11,170
<font color="#CCCCCC">ones</font><font color="#E5E5E5"> we'll see that later in action</font>

44
00:02:08,470 --> 00:02:14,080
where we<font color="#CCCCCC"> actually run</font><font color="#E5E5E5"> into that issue</font>

45
00:02:11,170 --> 00:02:17,290
<font color="#CCCCCC">r-13 is our stack pointer which</font><font color="#E5E5E5"> could</font>

46
00:02:14,080 --> 00:02:18,280
also<font color="#E5E5E5"> be</font><font color="#CCCCCC"> called SP so you can use our 13</font>

47
00:02:17,290 --> 00:02:20,980
or SP both

48
00:02:18,280 --> 00:02:23,320
in your assembler<font color="#CCCCCC"> there's a program</font>

49
00:02:20,980 --> 00:02:25,690
<font color="#E5E5E5">status register that depending on the</font>

50
00:02:23,320 --> 00:02:27,340
<font color="#E5E5E5">mode you're</font><font color="#CCCCCC"> in and depending</font><font color="#E5E5E5"> which name</font>

51
00:02:25,690 --> 00:02:29,260
you use when you try to<font color="#E5E5E5"> read it you'll</font>

52
00:02:27,340 --> 00:02:31,450
get different things<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> see all that</font>

53
00:02:29,260 --> 00:02:35,679
later when we<font color="#CCCCCC"> look at</font><font color="#E5E5E5"> the registers</font>

54
00:02:31,450 --> 00:02:37,630
individually<font color="#CCCCCC"> is a priority mask register</font>

55
00:02:35,680 --> 00:02:39,880
which will<font color="#CCCCCC"> also talk about</font><font color="#E5E5E5"> later and a</font>

56
00:02:37,630 --> 00:02:43,810
control register which is<font color="#CCCCCC"> very simple</font>

57
00:02:39,880 --> 00:02:44,859
for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cortex m0 specifically so let's</font>

58
00:02:43,810 --> 00:02:46,360
talk<font color="#E5E5E5"> a</font><font color="#CCCCCC"> bit about the stack pointer</font>

59
00:02:44,860 --> 00:02:48,940
<font color="#E5E5E5">that's the thing we're</font><font color="#CCCCCC"> going to play</font>

60
00:02:46,360 --> 00:02:52,330
<font color="#E5E5E5">around the most with in the coat we're</font>

61
00:02:48,940 --> 00:02:53,950
looking at so basically you use a stack

62
00:02:52,330 --> 00:02:56,050
if you have a bunch of stuff<font color="#CCCCCC"> that</font>

63
00:02:53,950 --> 00:02:57,609
<font color="#CCCCCC">doesn't fit</font><font color="#E5E5E5"> anymore into your register</font>

64
00:02:56,050 --> 00:03:00,940
so you<font color="#E5E5E5"> just push it</font><font color="#CCCCCC"> on the stack which</font>

65
00:02:57,610 --> 00:03:03,100
is<font color="#E5E5E5"> RAM</font><font color="#CCCCCC"> and then later on you</font><font color="#E5E5E5"> pop it off</font>

66
00:03:00,940 --> 00:03:05,079
again so in this example<font color="#E5E5E5"> here</font><font color="#CCCCCC"> they I</font>

67
00:03:03,100 --> 00:03:06,640
completely made up the values<font color="#E5E5E5"> but you</font>

68
00:03:05,080 --> 00:03:10,510
have a stack pointer that points to an

69
00:03:06,640 --> 00:03:13,029
address<font color="#CCCCCC"> we have a register r7 that we</font>

70
00:03:10,510 --> 00:03:14,380
want to store so we do a push or<font color="#CCCCCC"> seven</font>

71
00:03:13,030 --> 00:03:16,570
which puts it<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the stack which</font>

72
00:03:14,380 --> 00:03:21,400
<font color="#E5E5E5">decreases our stack pointer by exactly</font>

73
00:03:16,570 --> 00:03:23,230
<font color="#CCCCCC">four byte on the cortex m0 our stack is</font>

74
00:03:21,400 --> 00:03:25,989
always<font color="#E5E5E5"> word aligned so</font><font color="#CCCCCC"> always</font><font color="#E5E5E5"> four by</font>

75
00:03:23,230 --> 00:03:28,660
<font color="#E5E5E5">the lined the lowest two bits can</font>

76
00:03:25,989 --> 00:03:31,330
therefore be<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> because we know</font>

77
00:03:28,660 --> 00:03:33,519
they'll be aligned and the stack is full

78
00:03:31,330 --> 00:03:36,430
descending so as we see the<font color="#CCCCCC"> stack</font>

79
00:03:33,519 --> 00:03:38,230
decreases whenever we push something<font color="#E5E5E5"> and</font>

80
00:03:36,430 --> 00:03:40,540
in the stack pointer value<font color="#E5E5E5"> decreases</font>

81
00:03:38,230 --> 00:03:42,459
<font color="#CCCCCC">whenever you push something</font><font color="#E5E5E5"> and it</font>

82
00:03:40,540 --> 00:03:45,548
increases<font color="#E5E5E5"> when we pull some pop</font>

83
00:03:42,459 --> 00:03:48,549
something<font color="#E5E5E5"> so we have a link register and</font>

84
00:03:45,549 --> 00:03:50,350
a program counter<font color="#CCCCCC"> register also</font><font color="#E5E5E5"> the link</font>

85
00:03:48,549 --> 00:03:53,980
register is basically<font color="#CCCCCC"> if you call the</font>

86
00:03:50,350 --> 00:03:56,170
<font color="#CCCCCC">subroutine and</font><font color="#E5E5E5"> you put in the value from</font>

87
00:03:53,980 --> 00:03:58,630
<font color="#E5E5E5">the</font><font color="#CCCCCC"> next except from the next program</font>

88
00:03:56,170 --> 00:04:04,149
counter value<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you run when</font><font color="#CCCCCC"> you get</font>

89
00:03:58,630 --> 00:04:05,590
back from<font color="#E5E5E5"> there so the link</font><font color="#CCCCCC"> registers</font>

90
00:04:04,150 --> 00:04:07,030
also<font color="#CCCCCC"> a bit special</font><font color="#E5E5E5"> we're going to talk</font>

91
00:04:05,590 --> 00:04:09,489
<font color="#CCCCCC">about that later when we look</font><font color="#E5E5E5"> at the</font>

92
00:04:07,030 --> 00:04:12,760
thumb<font color="#CCCCCC"> State that the different states</font>

93
00:04:09,489 --> 00:04:15,519
that<font color="#CCCCCC"> our processor can be in and the bit</font>

94
00:04:12,760 --> 00:04:18,488
<font color="#CCCCCC">zero is the bit</font><font color="#E5E5E5"> zero</font><font color="#CCCCCC"> and the link</font>

95
00:04:15,519 --> 00:04:20,950
<font color="#E5E5E5">register indicates that we</font><font color="#CCCCCC"> return</font><font color="#E5E5E5"> to</font>

96
00:04:18,488 --> 00:04:23,590
thumb<font color="#CCCCCC"> State when we use the link</font>

97
00:04:20,950 --> 00:04:25,900
<font color="#E5E5E5">register to return some instructions</font>

98
00:04:23,590 --> 00:04:27,940
we'll need that to be<font color="#CCCCCC"> set</font><font color="#E5E5E5"> but we'll also</font>

99
00:04:25,900 --> 00:04:29,109
see<font color="#E5E5E5"> that later when</font><font color="#CCCCCC"> we actually make use</font>

100
00:04:27,940 --> 00:04:32,680
of all<font color="#E5E5E5"> these</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> that I</font>

101
00:04:29,110 --> 00:04:34,000
outline here the program<font color="#CCCCCC"> condo</font><font color="#E5E5E5"> when you</font>

102
00:04:32,680 --> 00:04:35,500
read<font color="#E5E5E5"> that give you the current</font>

103
00:04:34,000 --> 00:04:38,830
instruction<font color="#E5E5E5"> plus</font><font color="#CCCCCC"> four because there's a</font>

104
00:04:35,500 --> 00:04:42,759
pipeline<font color="#CCCCCC"> processor and the program</font>

105
00:04:38,830 --> 00:04:44,948
calendar bit 0 should be 0<font color="#CCCCCC"> but some</font>

106
00:04:42,759 --> 00:04:46,810
instructions like<font color="#E5E5E5"> px and Bill X</font><font color="#CCCCCC"> require</font>

107
00:04:44,949 --> 00:04:50,669
them<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> set because</font><font color="#E5E5E5"> we want to stay</font>

108
00:04:46,810 --> 00:04:53,229
in thumb mode<font color="#CCCCCC"> the combined status</font>

109
00:04:50,669 --> 00:04:55,330
register depending on which mode you're

110
00:04:53,229 --> 00:04:57,758
<font color="#CCCCCC">in and how</font><font color="#E5E5E5"> you read it</font><font color="#CCCCCC"> you'll get</font>

111
00:04:55,330 --> 00:04:59,590
different values<font color="#CCCCCC"> to read</font><font color="#E5E5E5"> first one is</font>

112
00:04:57,759 --> 00:05:02,289
the<font color="#CCCCCC"> application status register which</font>

113
00:04:59,590 --> 00:05:05,008
contains<font color="#CCCCCC"> your ALU things like not 0</font>

114
00:05:02,289 --> 00:05:07,210
carry an overflow for example if the

115
00:05:05,009 --> 00:05:09,699
instruction before created an overflow

116
00:05:07,210 --> 00:05:13,150
or if you did a compare<font color="#E5E5E5"> and it's not or</font>

117
00:05:09,699 --> 00:05:14,530
if you compare and there's a<font color="#CCCCCC"> 0 or</font><font color="#E5E5E5"> you do</font>

118
00:05:13,150 --> 00:05:18,068
an<font color="#E5E5E5"> addition and there would be a carry</font>

119
00:05:14,530 --> 00:05:22,469
all those would get set in<font color="#E5E5E5"> that part you</font>

120
00:05:18,069 --> 00:05:26,529
see that the rest is reserved<font color="#CCCCCC"> there's an</font>

121
00:05:22,469 --> 00:05:29,289
IPS<font color="#CCCCCC"> R which is</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> interrupt program</font>

122
00:05:26,529 --> 00:05:31,000
<font color="#E5E5E5">status register which the lower</font><font color="#CCCCCC"> 6 bits</font>

123
00:05:29,289 --> 00:05:32,620
will give you the<font color="#CCCCCC"> accepts number that</font>

124
00:05:31,000 --> 00:05:33,879
cost you to<font color="#E5E5E5"> get there so it's</font><font color="#CCCCCC"> pretty</font>

125
00:05:32,620 --> 00:05:36,400
handy<font color="#CCCCCC"> if you need to figure</font><font color="#E5E5E5"> out what</font>

126
00:05:33,879 --> 00:05:38,259
happened<font color="#CCCCCC"> for example say you</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> a</font>

127
00:05:36,400 --> 00:05:39,789
default handler you jump there and you

128
00:05:38,259 --> 00:05:41,139
want to know what<font color="#E5E5E5"> cost the exception</font>

129
00:05:39,789 --> 00:05:42,639
that<font color="#E5E5E5"> got you into the default handler</font>

130
00:05:41,139 --> 00:05:45,909
you could look at that<font color="#CCCCCC"> and it would tell</font>

131
00:05:42,639 --> 00:05:48,250
you<font color="#CCCCCC"> the</font><font color="#E5E5E5"> EPS</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> is the exception program</font>

132
00:05:45,909 --> 00:05:49,449
status<font color="#E5E5E5"> registers not so important for</font>

133
00:05:48,250 --> 00:05:50,589
what we're going to do just<font color="#E5E5E5"> for</font>

134
00:05:49,449 --> 00:05:52,509
completeness it's here

135
00:05:50,589 --> 00:05:55,479
<font color="#CCCCCC">all right calling convention</font><font color="#E5E5E5"> it's</font>

136
00:05:52,509 --> 00:05:57,669
assumed you usually program seed and

137
00:05:55,479 --> 00:05:59,258
<font color="#CCCCCC">your compiler would use certain</font>

138
00:05:57,669 --> 00:06:01,870
registers for<font color="#E5E5E5"> certain things when</font>

139
00:05:59,259 --> 00:06:03,789
calling a function<font color="#CCCCCC"> for example</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> R 0</font>

140
00:06:01,870 --> 00:06:07,120
<font color="#CCCCCC">through</font><font color="#E5E5E5"> R 3 are usually used to pass</font>

141
00:06:03,789 --> 00:06:09,159
arguments<font color="#CCCCCC"> r0 and r1</font><font color="#E5E5E5"> if the result are</font>

142
00:06:07,120 --> 00:06:10,539
also the result registers so depending

143
00:06:09,159 --> 00:06:13,990
on the size<font color="#E5E5E5"> of your results you will</font>

144
00:06:10,539 --> 00:06:19,449
spill<font color="#CCCCCC"> over into</font><font color="#E5E5E5"> R 1 and so</font><font color="#CCCCCC"> on if your</font>

145
00:06:13,990 --> 00:06:22,000
return value is<font color="#E5E5E5"> bigger there are 4 and</font>

146
00:06:19,449 --> 00:06:23,860
<font color="#E5E5E5">r8 also</font><font color="#CCCCCC"> r9 is a bit</font><font color="#E5E5E5"> special but we can</font>

147
00:06:22,000 --> 00:06:28,270
<font color="#E5E5E5">ignore</font><font color="#CCCCCC"> that for for what we're doing</font>

148
00:06:23,860 --> 00:06:30,490
<font color="#CCCCCC">here so r4 through</font><font color="#E5E5E5"> R 11 are calling</font><font color="#CCCCCC"> safe</font>

149
00:06:28,270 --> 00:06:33,039
registers which means your function

150
00:06:30,490 --> 00:06:35,379
needs to<font color="#E5E5E5"> restore them back to the value</font>

151
00:06:33,039 --> 00:06:38,919
they were before<font color="#E5E5E5"> you jumped into the</font>

152
00:06:35,379 --> 00:06:41,050
function<font color="#E5E5E5"> R 12 through our 15 are the</font>

153
00:06:38,919 --> 00:06:42,370
special registers which we saw already

154
00:06:41,050 --> 00:06:46,360
before so

155
00:06:42,370 --> 00:06:48,669
<font color="#CCCCCC">Poynter and so on yeah so priority</font>

156
00:06:46,360 --> 00:06:51,430
<font color="#CCCCCC">mosque is the register</font><font color="#E5E5E5"> that we're going</font>

157
00:06:48,669 --> 00:06:54,580
<font color="#E5E5E5">to use to disable exceptions they're</font>

158
00:06:51,430 --> 00:06:57,070
programmable<font color="#CCCCCC"> so you write the one then</font>

159
00:06:54,580 --> 00:06:59,440
no interrupts happen<font color="#CCCCCC"> you write a</font><font color="#E5E5E5"> zero</font>

160
00:06:57,070 --> 00:07:01,630
it's not<font color="#CCCCCC"> master all</font><font color="#E5E5E5"> right</font>

161
00:06:59,440 --> 00:07:05,889
am I going too fast can people<font color="#E5E5E5"> still</font>

162
00:07:01,630 --> 00:07:07,540
follow it's a lot<font color="#E5E5E5"> of things good</font><font color="#CCCCCC"> there's</font>

163
00:07:05,889 --> 00:07:08,860
a control register something<font color="#E5E5E5"> we're going</font>

164
00:07:07,540 --> 00:07:10,990
<font color="#E5E5E5">to play with a lot</font>

165
00:07:08,860 --> 00:07:13,870
what<font color="#E5E5E5"> do control register does on the</font>

166
00:07:10,990 --> 00:07:16,180
<font color="#E5E5E5">cortex in zero and bit 0 is reserved so</font>

167
00:07:13,870 --> 00:07:19,360
that's<font color="#E5E5E5"> for upwards compatibility with</font>

168
00:07:16,180 --> 00:07:21,400
with<font color="#E5E5E5"> other cortex m-class CPUs we don't</font>

169
00:07:19,360 --> 00:07:24,340
have<font color="#CCCCCC"> privileged</font><font color="#E5E5E5"> mode or unprivileged</font>

170
00:07:21,400 --> 00:07:28,840
mode on the cortex<font color="#E5E5E5"> and</font><font color="#CCCCCC"> zero but on</font><font color="#E5E5E5"> m3</font>

171
00:07:24,340 --> 00:07:31,810
that bit would<font color="#CCCCCC"> be your privilege the</font>

172
00:07:28,840 --> 00:07:33,638
control the<font color="#E5E5E5"> big one in there lets you</font>

173
00:07:31,810 --> 00:07:35,919
<font color="#E5E5E5">select which one is your current stack</font>

174
00:07:33,639 --> 00:07:39,760
pointer<font color="#CCCCCC"> so as we saw before when I</font>

175
00:07:35,919 --> 00:07:42,698
showed the registers<font color="#E5E5E5"> there's a PSP and a</font>

176
00:07:39,760 --> 00:07:44,650
MSP the PSP's the process stack pointer

177
00:07:42,699 --> 00:07:46,750
while<font color="#E5E5E5"> the MSP is your main stack pointer</font>

178
00:07:44,650 --> 00:07:48,940
writing<font color="#E5E5E5"> that bid while you're in threat</font>

179
00:07:46,750 --> 00:07:50,800
mode which<font color="#E5E5E5"> we'll see in which we'll see</font>

180
00:07:48,940 --> 00:07:52,719
in a second<font color="#CCCCCC"> we'll switch between the two</font>

181
00:07:50,800 --> 00:07:54,400
<font color="#E5E5E5">and that's is really cool for</font>

182
00:07:52,720 --> 00:07:59,050
implementing task switching which<font color="#E5E5E5"> we'll</font>

183
00:07:54,400 --> 00:08:01,900
see also later<font color="#CCCCCC"> great</font><font color="#E5E5E5"> this is a thumb</font>

184
00:07:59,050 --> 00:08:04,200
<font color="#E5E5E5">state basically what it's called</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> it</font>

185
00:08:01,900 --> 00:08:06,250
<font color="#E5E5E5">shows you the states you could be in</font>

186
00:08:04,200 --> 00:08:08,110
there's the handler mode which is

187
00:08:06,250 --> 00:08:12,030
basically<font color="#CCCCCC"> where you'd run all your</font><font color="#E5E5E5"> OS</font>

188
00:08:08,110 --> 00:08:14,970
things and there's<font color="#E5E5E5"> threat mode which is</font>

189
00:08:12,030 --> 00:08:17,799
where all<font color="#CCCCCC"> your</font><font color="#E5E5E5"> normal</font><font color="#CCCCCC"> task code runs and</font>

190
00:08:14,970 --> 00:08:20,169
you get from threat mode to handler mode

191
00:08:17,800 --> 00:08:24,729
by taking an exception and then

192
00:08:20,169 --> 00:08:29,260
<font color="#CCCCCC">depending on whether</font><font color="#E5E5E5"> your control bit is</font>

193
00:08:24,729 --> 00:08:31,630
<font color="#E5E5E5">set on return and whether no so there's</font>

194
00:08:29,260 --> 00:08:34,569
two<font color="#E5E5E5"> modes and depending on whether the</font>

195
00:08:31,630 --> 00:08:36,580
control<font color="#E5E5E5"> bit one is said depends where</font>

196
00:08:34,570 --> 00:08:38,080
you're going to stack your registers

197
00:08:36,580 --> 00:08:43,089
which<font color="#CCCCCC"> we'll see on the</font><font color="#E5E5E5"> stacking slide</font>

198
00:08:38,080 --> 00:08:44,620
that follows and yeah but first okay

199
00:08:43,089 --> 00:08:46,209
<font color="#E5E5E5">what's an exception in short it's</font>

200
00:08:44,620 --> 00:08:48,970
basically an event<font color="#E5E5E5"> that changes the</font>

201
00:08:46,209 --> 00:08:51,579
program<font color="#E5E5E5"> flow you jump to</font><font color="#CCCCCC"> the exception</font>

202
00:08:48,970 --> 00:08:54,250
<font color="#CCCCCC">handler and it</font><font color="#E5E5E5"> suspends the current code</font>

203
00:08:51,579 --> 00:08:54,569
that runs and then you run the exception

204
00:08:54,250 --> 00:08:56,690
<font color="#E5E5E5">hand</font>

205
00:08:54,570 --> 00:09:00,060
then you resume where you left off<font color="#E5E5E5"> and</font>

206
00:08:56,690 --> 00:09:02,370
some exceptions on the<font color="#CCCCCC"> cortex m0 have</font>

207
00:09:00,060 --> 00:09:04,529
fixed priorities<font color="#CCCCCC"> like reset non-maskable</font>

208
00:09:02,370 --> 00:09:07,620
interrupt and<font color="#CCCCCC"> heartful</font><font color="#E5E5E5"> there are</font>

209
00:09:04,529 --> 00:09:10,199
negative priorities some exceptions have

210
00:09:07,620 --> 00:09:12,120
<font color="#E5E5E5">programmable priority so</font><font color="#CCCCCC"> that lets you</font>

211
00:09:10,199 --> 00:09:13,290
arrange<font color="#E5E5E5"> things in the system</font><font color="#CCCCCC"> as you need</font>

212
00:09:12,120 --> 00:09:15,709
so<font color="#CCCCCC"> you</font><font color="#E5E5E5"> could prioritize</font><font color="#CCCCCC"> different</font>

213
00:09:13,290 --> 00:09:18,870
interrupts differently programmatically

214
00:09:15,709 --> 00:09:20,219
<font color="#E5E5E5">there is the</font><font color="#CCCCCC"> highest priority of course</font>

215
00:09:18,870 --> 00:09:23,009
there's the<font color="#E5E5E5"> negative ones that have</font>

216
00:09:20,220 --> 00:09:24,899
higher ones but you can't mask those the

217
00:09:23,009 --> 00:09:27,120
primal<font color="#E5E5E5"> one as we said before it</font><font color="#CCCCCC"> can be</font>

218
00:09:24,899 --> 00:09:28,889
used<font color="#CCCCCC"> to</font><font color="#E5E5E5"> mask interrupts and interrupts</font>

219
00:09:27,120 --> 00:09:32,399
that can't immediately<font color="#E5E5E5"> get handled can</font>

220
00:09:28,889 --> 00:09:35,519
be pending<font color="#CCCCCC"> alright the cortex m0 has</font>

221
00:09:32,399 --> 00:09:38,220
vectored interrupts which means<font color="#E5E5E5"> you set</font>

222
00:09:35,519 --> 00:09:40,470
up a vector table<font color="#E5E5E5"> a table of vector of</font>

223
00:09:38,220 --> 00:09:43,440
interrupt vectors which means a table of

224
00:09:40,470 --> 00:09:46,589
pointers to<font color="#CCCCCC"> where you want to jump for</font>

225
00:09:43,440 --> 00:09:49,230
certain exceptions<font color="#CCCCCC"> that table contains</font>

226
00:09:46,589 --> 00:09:51,360
<font color="#E5E5E5">the addresses and the processor will</font>

227
00:09:49,230 --> 00:09:53,339
automatically jump<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the handler if one</font>

228
00:09:51,360 --> 00:09:54,810
is set up and usually<font color="#CCCCCC"> it's sure it's a</font>

229
00:09:53,339 --> 00:09:57,389
good idea<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> don't have a handler</font>

230
00:09:54,810 --> 00:09:59,430
set up to use<font color="#E5E5E5"> the</font><font color="#CCCCCC"> default handler for</font>

231
00:09:57,389 --> 00:10:01,170
<font color="#E5E5E5">the</font><font color="#CCCCCC"> other ones</font><font color="#E5E5E5"> and then have something</font>

232
00:09:59,430 --> 00:10:03,510
like an infinite loop<font color="#CCCCCC"> to trap it there</font>

233
00:10:01,170 --> 00:10:06,089
so it's easy when<font color="#E5E5E5"> you debug to figure</font>

234
00:10:03,510 --> 00:10:08,819
out what happened<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right so what</font>

235
00:10:06,089 --> 00:10:10,470
happens on exception entry stacking with

236
00:10:08,819 --> 00:10:12,149
the main stack pointer there's two ways

237
00:10:10,470 --> 00:10:14,100
as I said<font color="#CCCCCC"> depending</font><font color="#E5E5E5"> on the controller</font>

238
00:10:12,149 --> 00:10:16,230
register how you could stack your

239
00:10:14,100 --> 00:10:18,149
registers when you take an<font color="#CCCCCC"> exception</font><font color="#E5E5E5"> the</font>

240
00:10:16,230 --> 00:10:19,829
first one is the simple one when you're

241
00:10:18,149 --> 00:10:22,079
not using the process stack pointer<font color="#CCCCCC"> and</font>

242
00:10:19,829 --> 00:10:23,849
<font color="#CCCCCC">you're when you're not yeah when you're</font>

243
00:10:22,079 --> 00:10:26,399
<font color="#CCCCCC">not using the process stack pointer but</font>

244
00:10:23,850 --> 00:10:30,029
just the main stack pointer in that case

245
00:10:26,399 --> 00:10:32,639
you you run here<font color="#CCCCCC"> in thread mode then you</font>

246
00:10:30,029 --> 00:10:34,319
<font color="#E5E5E5">take your exception automatically the</font>

247
00:10:32,639 --> 00:10:35,970
processor will push the exception

248
00:10:34,319 --> 00:10:39,360
context which is<font color="#E5E5E5"> subset of all the</font>

249
00:10:35,970 --> 00:10:41,699
<font color="#E5E5E5">registers</font><font color="#CCCCCC"> onto the current</font><font color="#E5E5E5"> stack the</font>

250
00:10:39,360 --> 00:10:46,110
registers<font color="#E5E5E5"> in the exception context are</font>

251
00:10:41,699 --> 00:10:48,689
<font color="#CCCCCC">are</font><font color="#E5E5E5"> 0</font><font color="#CCCCCC"> 2 or 3 or 12 link register</font><font color="#E5E5E5"> program</font>

252
00:10:46,110 --> 00:10:51,779
counter and the current status register

253
00:10:48,689 --> 00:10:54,029
and the stacking always happens on your

254
00:10:51,779 --> 00:10:56,519
current stack whatever<font color="#E5E5E5"> is</font><font color="#CCCCCC"> selected when</font>

255
00:10:54,029 --> 00:10:58,230
you're in<font color="#E5E5E5"> threat mode all right</font><font color="#CCCCCC"> and it</font>

256
00:10:56,519 --> 00:11:01,380
makes nesting possible which we'll see

257
00:10:58,230 --> 00:11:03,449
later<font color="#E5E5E5"> and the unstacking happens based</font>

258
00:11:01,380 --> 00:11:06,870
on the link register values so when you

259
00:11:03,449 --> 00:11:07,870
<font color="#E5E5E5">enter the exception based on what mode</font>

260
00:11:06,870 --> 00:11:09,580
you're<font color="#E5E5E5"> in and what</font>

261
00:11:07,870 --> 00:11:10,990
<font color="#E5E5E5">set up you had for your stack pointer</font>

262
00:11:09,580 --> 00:11:14,920
there will be a different value<font color="#E5E5E5"> in link</font>

263
00:11:10,990 --> 00:11:16,600
<font color="#CCCCCC">register which will see also soon the</font>

264
00:11:14,920 --> 00:11:18,880
other case which is<font color="#E5E5E5"> the slightly</font><font color="#CCCCCC"> more</font>

265
00:11:16,600 --> 00:11:20,500
complex case is when you actually<font color="#CCCCCC"> use</font>

266
00:11:18,880 --> 00:11:21,939
<font color="#CCCCCC">the process deck pointer which is what</font>

267
00:11:20,500 --> 00:11:23,980
you're<font color="#E5E5E5"> going to do when you</font><font color="#CCCCCC"> actually do</font>

268
00:11:21,940 --> 00:11:25,360
<font color="#CCCCCC">multitasking</font><font color="#E5E5E5"> all right so it's a main</font>

269
00:11:23,980 --> 00:11:27,130
stack pointer that<font color="#E5E5E5"> it's going to be used</font>

270
00:11:25,360 --> 00:11:28,960
<font color="#E5E5E5">when you're in handler mode because</font>

271
00:11:27,130 --> 00:11:31,840
handler mode always uses<font color="#E5E5E5"> the main stack</font>

272
00:11:28,960 --> 00:11:34,450
pointer in<font color="#CCCCCC"> thread mode</font><font color="#E5E5E5"> you'll select</font>

273
00:11:31,840 --> 00:11:36,190
which one gets used<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you're here in</font>

274
00:11:34,450 --> 00:11:37,810
thread mode you get<font color="#E5E5E5"> your exception</font>

275
00:11:36,190 --> 00:11:39,100
<font color="#E5E5E5">you're using process stack pointer</font>

276
00:11:37,810 --> 00:11:41,469
remember because that's the point of

277
00:11:39,100 --> 00:11:44,400
<font color="#E5E5E5">this example so your stuff gets pushed</font>

278
00:11:41,470 --> 00:11:47,500
on<font color="#E5E5E5"> on to your process that pointer and</font>

279
00:11:44,400 --> 00:11:49,150
then you go to handler<font color="#E5E5E5"> mode which</font>

280
00:11:47,500 --> 00:11:51,160
automatically switches your stack

281
00:11:49,150 --> 00:11:53,140
pointer to use the main stack then you

282
00:11:51,160 --> 00:11:56,050
do whatever you do<font color="#E5E5E5"> in your</font><font color="#CCCCCC"> Handler</font><font color="#E5E5E5"> and</font>

283
00:11:53,140 --> 00:11:59,050
then the unstacking because of the link

284
00:11:56,050 --> 00:12:00,670
register value will happen again from

285
00:11:59,050 --> 00:12:02,709
your process stack pointer<font color="#E5E5E5"> and this is</font>

286
00:12:00,670 --> 00:12:05,319
<font color="#CCCCCC">gonna be basically how we're going to do</font>

287
00:12:02,710 --> 00:12:11,020
<font color="#CCCCCC">multitasking later but more on that</font>

288
00:12:05,320 --> 00:12:13,900
<font color="#E5E5E5">later</font><font color="#CCCCCC"> okay exceptions tail chaining so</font>

289
00:12:11,020 --> 00:12:16,300
there's a bunch<font color="#E5E5E5"> of neat</font><font color="#CCCCCC"> features that</font>

290
00:12:13,900 --> 00:12:18,850
allow the processor to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> more efficient</font>

291
00:12:16,300 --> 00:12:21,520
<font color="#E5E5E5">when handing exceptions</font><font color="#CCCCCC"> so the first one</font>

292
00:12:18,850 --> 00:12:23,620
is here that if you<font color="#E5E5E5"> get an exception and</font>

293
00:12:21,520 --> 00:12:27,970
another one happens that has a lower

294
00:12:23,620 --> 00:12:29,920
priority<font color="#E5E5E5"> while the first one run the</font>

295
00:12:27,970 --> 00:12:32,200
first handler<font color="#E5E5E5"> runs you're not unstacked</font>

296
00:12:29,920 --> 00:12:34,420
but you'll directly go to the handler<font color="#E5E5E5"> be</font>

297
00:12:32,200 --> 00:12:35,740
and reuse<font color="#CCCCCC"> that stacking so you save this</font>

298
00:12:34,420 --> 00:12:39,130
entire part where you would have to

299
00:12:35,740 --> 00:12:41,140
<font color="#E5E5E5">first push stuff pop stuff push stuff</font><font color="#CCCCCC"> so</font>

300
00:12:39,130 --> 00:12:43,870
instead<font color="#CCCCCC"> you use</font><font color="#E5E5E5"> the first exception</font>

301
00:12:41,140 --> 00:12:45,490
<font color="#E5E5E5">context for the second one</font><font color="#CCCCCC"> too</font><font color="#E5E5E5"> then</font>

302
00:12:43,870 --> 00:12:47,980
there's the late arrival case or

303
00:12:45,490 --> 00:12:50,230
<font color="#E5E5E5">basically you take an exception a and</font>

304
00:12:47,980 --> 00:12:54,820
then a higher priority<font color="#E5E5E5"> exception B</font>

305
00:12:50,230 --> 00:12:57,160
arrives<font color="#E5E5E5"> before the handler</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> a would</font>

306
00:12:54,820 --> 00:12:59,470
run and then<font color="#E5E5E5"> you could just directly run</font>

307
00:12:57,160 --> 00:13:03,130
the handler<font color="#CCCCCC"> for B and then</font><font color="#E5E5E5"> the handle</font>

308
00:12:59,470 --> 00:13:05,530
for a and then there's the complex<font color="#E5E5E5"> case</font>

309
00:13:03,130 --> 00:13:08,590
of nest at once or<font color="#CCCCCC"> you again</font><font color="#E5E5E5"> take your</font>

310
00:13:05,530 --> 00:13:10,870
<font color="#E5E5E5">exception then your handler starts</font>

311
00:13:08,590 --> 00:13:15,460
running you take another one you go up

312
00:13:10,870 --> 00:13:16,810
and<font color="#E5E5E5"> then stacking happens twice so let's</font>

313
00:13:15,460 --> 00:13:19,060
say here you had the process stack

314
00:13:16,810 --> 00:13:21,250
pointer you stack on<font color="#CCCCCC"> the process stack</font>

315
00:13:19,060 --> 00:13:22,780
pointer here here your handler mode

316
00:13:21,250 --> 00:13:24,340
<font color="#CCCCCC">already so you're gonna</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> the main</font>

317
00:13:22,780 --> 00:13:27,420
stack pointer you stack<font color="#E5E5E5"> another</font>

318
00:13:24,340 --> 00:13:30,400
exception context<font color="#E5E5E5"> and then you go back</font>

319
00:13:27,420 --> 00:13:32,260
<font color="#CCCCCC">alright if that wasn't complex enough</font>

320
00:13:30,400 --> 00:13:34,920
here's another picture<font color="#CCCCCC"> that I drew I</font>

321
00:13:32,260 --> 00:13:37,450
know it's beautiful

322
00:13:34,920 --> 00:13:39,579
basically again threat mode handler mode

323
00:13:37,450 --> 00:13:41,350
<font color="#CCCCCC">depending on your stack pointers there's</font>

324
00:13:39,580 --> 00:13:43,390
all these different<font color="#E5E5E5"> ways you could go</font>

325
00:13:41,350 --> 00:13:46,060
I'm not<font color="#E5E5E5"> going to go into details one</font>

326
00:13:43,390 --> 00:13:48,189
thing to note however is<font color="#CCCCCC"> that on taking</font>

327
00:13:46,060 --> 00:13:49,780
the exception the value that gets<font color="#E5E5E5"> put</font>

328
00:13:48,190 --> 00:13:53,080
into<font color="#E5E5E5"> the link register will determine</font>

329
00:13:49,780 --> 00:13:55,150
our path back so it will<font color="#E5E5E5"> determine</font>

330
00:13:53,080 --> 00:13:56,830
<font color="#CCCCCC">basically whether we unstacked from the</font>

331
00:13:55,150 --> 00:13:58,959
process<font color="#E5E5E5"> that pointer or the main stack</font>

332
00:13:56,830 --> 00:14:01,540
pointer<font color="#E5E5E5"> so for the nested case for</font>

333
00:13:58,960 --> 00:14:03,580
example<font color="#E5E5E5"> we'd go take the exception we</font>

334
00:14:01,540 --> 00:14:05,260
use the pass a stack pointer now we're

335
00:14:03,580 --> 00:14:07,570
in<font color="#E5E5E5"> handler mode already</font><font color="#CCCCCC"> if we get</font>

336
00:14:05,260 --> 00:14:11,110
another exception now we stack on<font color="#CCCCCC"> the</font>

337
00:14:07,570 --> 00:14:13,420
main stack pointer<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> we could go</font>

338
00:14:11,110 --> 00:14:15,280
in several times<font color="#E5E5E5"> till stacking and then</font>

339
00:14:13,420 --> 00:14:17,290
the unstacking would happen based on<font color="#E5E5E5"> the</font>

340
00:14:15,280 --> 00:14:20,020
link<font color="#E5E5E5"> register value which would get put</font>

341
00:14:17,290 --> 00:14:22,079
in<font color="#E5E5E5"> the link register based on how we got</font>

342
00:14:20,020 --> 00:14:25,630
there so<font color="#CCCCCC"> there's always a way out</font>

343
00:14:22,080 --> 00:14:29,830
<font color="#E5E5E5">all right so now we talked about all</font>

344
00:14:25,630 --> 00:14:32,320
stacks tax exception stacks<font color="#CCCCCC"> so now we're</font>

345
00:14:29,830 --> 00:14:34,750
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look at how do we get</font><font color="#CCCCCC"> from the</font>

346
00:14:32,320 --> 00:14:36,720
reset<font color="#E5E5E5"> to actually running C code right</font>

347
00:14:34,750 --> 00:14:39,370
because<font color="#E5E5E5"> that's what we want</font><font color="#CCCCCC"> to do</font>

348
00:14:36,720 --> 00:14:41,290
underneath the execution basically jumps

349
00:14:39,370 --> 00:14:44,950
to the reset vector<font color="#CCCCCC"> we do a bunch of</font>

350
00:14:41,290 --> 00:14:46,420
stuff we<font color="#E5E5E5"> work before we can run</font><font color="#CCCCCC"> normalcy</font>

351
00:14:44,950 --> 00:14:48,430
what we're going<font color="#CCCCCC"> to do is make sure</font>

352
00:14:46,420 --> 00:14:52,089
we're<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> state</font><font color="#E5E5E5"> so we want to</font>

353
00:14:48,430 --> 00:14:53,829
set our<font color="#E5E5E5"> main stack pointer and we</font><font color="#CCCCCC"> want</font>

354
00:14:52,089 --> 00:14:57,640
to make sure<font color="#E5E5E5"> that we're in the right</font>

355
00:14:53,830 --> 00:14:59,620
<font color="#E5E5E5">state</font><font color="#CCCCCC"> some been privileged or not in the</font>

356
00:14:57,640 --> 00:15:01,960
cortex<font color="#CCCCCC"> m0 case we don't</font><font color="#E5E5E5"> care about the</font>

357
00:14:59,620 --> 00:15:04,210
<font color="#CCCCCC">privilege we want to initialize our BSS</font>

358
00:15:01,960 --> 00:15:07,030
section to<font color="#CCCCCC"> 0 we want</font><font color="#E5E5E5"> to copy exception</font>

359
00:15:04,210 --> 00:15:09,100
vectors to SRAM which<font color="#CCCCCC"> is a bit specific</font>

360
00:15:07,030 --> 00:15:10,930
to each core and the cortex m0 that<font color="#E5E5E5"> I</font>

361
00:15:09,100 --> 00:15:16,270
was using<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> STM you'd have to</font>

362
00:15:10,930 --> 00:15:19,479
copy them over<font color="#E5E5E5"> to</font><font color="#CCCCCC"> SRAM</font><font color="#E5E5E5"> to speed up the</font>

363
00:15:16,270 --> 00:15:21,250
fetches<font color="#CCCCCC"> all right and then we copy</font><font color="#E5E5E5"> the</font>

364
00:15:19,480 --> 00:15:23,830
<font color="#E5E5E5">initialized data section so</font><font color="#CCCCCC"> that would</font>

365
00:15:21,250 --> 00:15:26,080
be<font color="#CCCCCC"> global variables that</font><font color="#E5E5E5"> have a value we</font>

366
00:15:23,830 --> 00:15:28,180
copy that<font color="#CCCCCC"> to SRAM we set our initial</font>

367
00:15:26,080 --> 00:15:30,790
stack pointer<font color="#CCCCCC"> and finally we jump to</font>

368
00:15:28,180 --> 00:15:32,050
<font color="#E5E5E5">main so how does that</font><font color="#CCCCCC"> look</font><font color="#E5E5E5"> in the</font>

369
00:15:30,790 --> 00:15:34,430
chromium<font color="#CCCCCC"> EC code</font>

370
00:15:32,050 --> 00:15:36,410
well after is<font color="#CCCCCC"> that we make</font>

371
00:15:34,430 --> 00:15:38,870
that our control<font color="#E5E5E5"> register is</font><font color="#CCCCCC"> zero</font>

372
00:15:36,410 --> 00:15:41,270
remember control register zero means

373
00:15:38,870 --> 00:15:44,210
we're non-privileged<font color="#CCCCCC"> and we're using the</font>

374
00:15:41,270 --> 00:15:46,160
main stack pointer then we wait for<font color="#CCCCCC"> that</font>

375
00:15:44,210 --> 00:15:48,680
<font color="#E5E5E5">to actually happen so Gaius B</font><font color="#CCCCCC"> will just</font>

376
00:15:46,160 --> 00:15:53,209
wait<font color="#E5E5E5"> for things to go all the</font><font color="#CCCCCC"> way</font>

377
00:15:48,680 --> 00:15:55,189
through sorry<font color="#CCCCCC"> and then you know we</font><font color="#E5E5E5"> have</font>

378
00:15:53,209 --> 00:15:57,890
a bunch of<font color="#E5E5E5"> loops to first zero the BSS</font>

379
00:15:55,190 --> 00:16:00,020
section then<font color="#E5E5E5"> we have a</font><font color="#CCCCCC"> V</font><font color="#E5E5E5"> table loop</font>

380
00:15:57,890 --> 00:16:03,170
where we copy over<font color="#CCCCCC"> the exception vectors</font>

381
00:16:00,020 --> 00:16:05,680
to<font color="#CCCCCC"> RAM then we tell our microcontroller</font>

382
00:16:03,170 --> 00:16:10,760
<font color="#CCCCCC">would you please use exceptions now from</font>

383
00:16:05,680 --> 00:16:12,410
from the new copied vector table<font color="#E5E5E5"> then we</font>

384
00:16:10,760 --> 00:16:15,140
have the data loop which<font color="#E5E5E5"> will go and</font>

385
00:16:12,410 --> 00:16:17,240
copy the initialize data from flash<font color="#CCCCCC"> to</font>

386
00:16:15,140 --> 00:16:20,689
<font color="#E5E5E5">RAM and then we can find any jump to</font>

387
00:16:17,240 --> 00:16:25,339
<font color="#CCCCCC">main so not so complex</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> everyone's</font>

388
00:16:20,690 --> 00:16:35,410
<font color="#E5E5E5">still on board did I lose everyone no</font>

389
00:16:25,339 --> 00:16:38,540
good sorry<font color="#E5E5E5"> oh sorry</font>

390
00:16:35,410 --> 00:16:40,730
<font color="#CCCCCC">alright so multitasking again that's</font>

391
00:16:38,540 --> 00:16:42,920
what we're going<font color="#E5E5E5"> to do right</font><font color="#CCCCCC"> so we're</font>

392
00:16:40,730 --> 00:16:44,570
trying<font color="#E5E5E5"> to context switch so the idea is</font>

393
00:16:42,920 --> 00:16:47,089
we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> multiple tasks we want to</font>

394
00:16:44,570 --> 00:16:49,940
decouple them as much as possible<font color="#E5E5E5"> from</font>

395
00:16:47,089 --> 00:16:52,910
each other<font color="#E5E5E5"> and we want them to be able</font>

396
00:16:49,940 --> 00:16:55,070
<font color="#CCCCCC">to run</font><font color="#E5E5E5"> task a then oh s then</font><font color="#CCCCCC"> task feed</font>

397
00:16:52,910 --> 00:16:57,199
and testing in whatever order but the

398
00:16:55,070 --> 00:16:59,029
<font color="#E5E5E5">task should not have to know about each</font>

399
00:16:57,200 --> 00:17:01,940
<font color="#E5E5E5">other unless they actually</font><font color="#CCCCCC"> do want</font><font color="#E5E5E5"> to</font>

400
00:16:59,029 --> 00:17:03,439
interact<font color="#E5E5E5"> all right so that makes writing</font>

401
00:17:01,940 --> 00:17:05,270
code really<font color="#E5E5E5"> nice because as the</font>

402
00:17:03,440 --> 00:17:06,679
programmer writing<font color="#E5E5E5"> code</font><font color="#CCCCCC"> for the</font><font color="#E5E5E5"> task</font>

403
00:17:05,270 --> 00:17:08,869
they don't have to be concerned with

404
00:17:06,679 --> 00:17:10,699
<font color="#E5E5E5">what</font><font color="#CCCCCC"> other people do</font><font color="#E5E5E5"> because while I run</font>

405
00:17:08,869 --> 00:17:14,030
it looks to<font color="#CCCCCC"> me as if I</font><font color="#E5E5E5"> owned the whole</font>

406
00:17:10,699 --> 00:17:15,829
thing and there's cooperative<font color="#E5E5E5"> approaches</font>

407
00:17:14,030 --> 00:17:19,760
to where the<font color="#E5E5E5"> tasks actually</font><font color="#CCCCCC"> have to say</font>

408
00:17:15,829 --> 00:17:21,889
I'm done please take the<font color="#CCCCCC"> next</font><font color="#E5E5E5"> one but so</font>

409
00:17:19,760 --> 00:17:23,750
if you wouldn't context switch you could

410
00:17:21,890 --> 00:17:27,020
share the context by yielding<font color="#E5E5E5"> but we're</font>

411
00:17:23,750 --> 00:17:29,480
not talking<font color="#CCCCCC"> about that</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> as seen</font>

412
00:17:27,020 --> 00:17:33,050
before<font color="#E5E5E5"> the context is basically a set</font><font color="#CCCCCC"> of</font>

413
00:17:29,480 --> 00:17:34,340
registers<font color="#E5E5E5"> and the stack and the OS</font><font color="#CCCCCC"> will</font>

414
00:17:33,050 --> 00:17:38,149
decide who goes<font color="#CCCCCC"> next</font>

415
00:17:34,340 --> 00:17:40,070
<font color="#CCCCCC">alright so to do that we need</font><font color="#E5E5E5"> basically</font>

416
00:17:38,150 --> 00:17:43,160
<font color="#E5E5E5">a</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> a stack and one stack for each</font>

417
00:17:40,070 --> 00:17:44,899
<font color="#E5E5E5">task and then maybe your heap or not in</font>

418
00:17:43,160 --> 00:17:46,710
our<font color="#E5E5E5"> case we don't have</font><font color="#CCCCCC"> a heap we don't</font>

419
00:17:44,900 --> 00:17:52,530
do malloc or free in

420
00:17:46,710 --> 00:17:54,690
the chromium<font color="#CCCCCC"> AC firmware also useful to</font>

421
00:17:52,530 --> 00:17:58,590
<font color="#CCCCCC">do that is somehow to have a time base</font>

422
00:17:54,690 --> 00:18:00,930
so on<font color="#CCCCCC"> arm</font><font color="#E5E5E5"> v6 there is a optional sis</font>

423
00:17:58,590 --> 00:18:02,730
take but most of<font color="#E5E5E5"> the most of the</font><font color="#CCCCCC"> vendors</font>

424
00:18:00,930 --> 00:18:04,980
actually implemented if not you can just

425
00:18:02,730 --> 00:18:07,020
<font color="#E5E5E5">use a normal timer what it does it gives</font>

426
00:18:04,980 --> 00:18:09,330
<font color="#CCCCCC">you a periodic</font><font color="#E5E5E5"> tick that will allow you</font>

427
00:18:07,020 --> 00:18:12,330
to<font color="#E5E5E5"> take an exception</font><font color="#CCCCCC"> that then gets you</font>

428
00:18:09,330 --> 00:18:14,189
into your OS<font color="#CCCCCC"> and you can use those</font>

429
00:18:12,330 --> 00:18:18,210
events<font color="#E5E5E5"> to run the scheduler to make</font>

430
00:18:14,190 --> 00:18:22,050
changes on who runs so how does chromium

431
00:18:18,210 --> 00:18:24,090
<font color="#E5E5E5">EC do that well so I picked again for</font>

432
00:18:22,050 --> 00:18:26,190
<font color="#E5E5E5">this the cortex</font><font color="#CCCCCC"> m0 because</font><font color="#E5E5E5"> that seemed</font>

433
00:18:24,090 --> 00:18:29,240
the<font color="#E5E5E5"> simplest one</font><font color="#CCCCCC"> to me</font><font color="#E5E5E5"> from the</font>

434
00:18:26,190 --> 00:18:32,250
different<font color="#E5E5E5"> architecture state support</font><font color="#CCCCCC"> and</font>

435
00:18:29,240 --> 00:18:33,990
<font color="#E5E5E5">well you have a struct task which</font>

436
00:18:32,250 --> 00:18:36,090
basically contains<font color="#E5E5E5"> everything you</font><font color="#CCCCCC"> need</font>

437
00:18:33,990 --> 00:18:39,240
to<font color="#CCCCCC"> know about the</font><font color="#E5E5E5"> task so there's a</font>

438
00:18:36,090 --> 00:18:41,459
stack pointer there's a bit a<font color="#E5E5E5"> bit mask</font>

439
00:18:39,240 --> 00:18:43,680
<font color="#E5E5E5">of events</font><font color="#CCCCCC"> we'll talk about it</font><font color="#E5E5E5"> in a</font>

440
00:18:41,460 --> 00:18:45,930
second<font color="#E5E5E5"> and there's a pointer</font><font color="#CCCCCC"> to the</font>

441
00:18:43,680 --> 00:18:48,980
stack which we can later use if<font color="#E5E5E5"> we do</font>

442
00:18:45,930 --> 00:18:51,360
some statistics to<font color="#E5E5E5"> see the stack usage</font>

443
00:18:48,980 --> 00:18:53,160
<font color="#E5E5E5">we don't have a heap we have fixed</font>

444
00:18:51,360 --> 00:18:55,260
priorities so at<font color="#CCCCCC"> build time we know</font>

445
00:18:53,160 --> 00:18:58,830
which task runs which with which

446
00:18:55,260 --> 00:19:02,129
priority we have different events<font color="#CCCCCC"> like</font>

447
00:18:58,830 --> 00:19:05,550
<font color="#E5E5E5">timers mutexes wake up events</font>

448
00:19:02,130 --> 00:19:07,440
peripherals<font color="#E5E5E5"> and we're using a 32 or</font>

449
00:19:05,550 --> 00:19:09,409
<font color="#CCCCCC">16-bit</font><font color="#E5E5E5"> hardware timer instead of the</font>

450
00:19:07,440 --> 00:19:12,540
<font color="#E5E5E5">Cystic and that's going to be handy</font>

451
00:19:09,410 --> 00:19:15,120
which we'll see on the<font color="#CCCCCC"> last slide how we</font>

452
00:19:12,540 --> 00:19:19,830
can<font color="#E5E5E5"> make use of</font><font color="#CCCCCC"> that alright another</font>

453
00:19:15,120 --> 00:19:22,229
<font color="#E5E5E5">picture to hopefully clarify things the</font>

454
00:19:19,830 --> 00:19:24,720
<font color="#CCCCCC">task</font><font color="#E5E5E5"> states are basically either you're</font>

455
00:19:22,230 --> 00:19:27,300
disabled<font color="#E5E5E5"> which means there's a</font><font color="#CCCCCC"> global</font>

456
00:19:24,720 --> 00:19:29,370
array there's a<font color="#CCCCCC"> tasks enabled at your</font>

457
00:19:27,300 --> 00:19:32,850
index there's a<font color="#CCCCCC"> zero so your task</font><font color="#E5E5E5"> is</font>

458
00:19:29,370 --> 00:19:35,070
disabled<font color="#E5E5E5"> at</font><font color="#CCCCCC"> Condren by writing a one</font>

459
00:19:32,850 --> 00:19:38,399
there this task gets enabled<font color="#E5E5E5"> so now it's</font>

460
00:19:35,070 --> 00:19:40,470
ready<font color="#E5E5E5"> so how do I get out</font><font color="#CCCCCC"> of the ready</font>

461
00:19:38,400 --> 00:19:41,010
state into<font color="#E5E5E5"> the running state well that's</font>

462
00:19:40,470 --> 00:19:43,260
easy

463
00:19:41,010 --> 00:19:45,810
we're running<font color="#E5E5E5"> always the highest</font>

464
00:19:43,260 --> 00:19:47,970
<font color="#E5E5E5">priority first so we get out of</font><font color="#CCCCCC"> the</font>

465
00:19:45,810 --> 00:19:51,120
ready state into the<font color="#E5E5E5"> running</font><font color="#CCCCCC"> state by</font>

466
00:19:47,970 --> 00:19:53,820
being ready and being<font color="#E5E5E5"> the task with the</font>

467
00:19:51,120 --> 00:19:55,889
<font color="#CCCCCC">highest</font><font color="#E5E5E5"> priority so this</font><font color="#CCCCCC"> FLS function</font>

468
00:19:53,820 --> 00:19:59,210
gives you basically<font color="#E5E5E5"> the first set bit in</font>

469
00:19:55,890 --> 00:20:00,770
an integer<font color="#CCCCCC"> as we know at Build time</font>

470
00:19:59,210 --> 00:20:03,350
many tasks who have in<font color="#CCCCCC"> there</font><font color="#E5E5E5"> using you</font>

471
00:20:00,770 --> 00:20:05,418
know too<font color="#E5E5E5"> many they</font><font color="#CCCCCC"> just use a UN 32 and</font>

472
00:20:03,350 --> 00:20:06,799
and figure out which the first bit is

473
00:20:05,419 --> 00:20:09,320
<font color="#E5E5E5">we're just a task with the</font><font color="#CCCCCC"> highest</font>

474
00:20:06,799 --> 00:20:11,980
<font color="#E5E5E5">priority</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so from ready to</font>

475
00:20:09,320 --> 00:20:15,379
running be the highest<font color="#E5E5E5"> priority task</font>

476
00:20:11,980 --> 00:20:17,470
<font color="#CCCCCC">then how do</font><font color="#E5E5E5"> we stop running well there's</font>

477
00:20:15,380 --> 00:20:20,179
two cases<font color="#E5E5E5"> either we wait for an</font><font color="#CCCCCC"> event</font>

478
00:20:17,470 --> 00:20:22,520
<font color="#E5E5E5">which could be a timer</font><font color="#CCCCCC"> which could be</font>

479
00:20:20,179 --> 00:20:27,080
waiting<font color="#E5E5E5"> for a new text which could be</font>

480
00:20:22,520 --> 00:20:29,990
things like<font color="#CCCCCC"> that and all the</font><font color="#E5E5E5"> events also</font>

481
00:20:27,080 --> 00:20:33,379
<font color="#E5E5E5">have a</font><font color="#CCCCCC"> timeout</font><font color="#E5E5E5"> again so I'll say</font><font color="#CCCCCC"> tasks</font>

482
00:20:29,990 --> 00:20:35,720
<font color="#E5E5E5">wait for event and then I end up in the</font>

483
00:20:33,380 --> 00:20:38,210
state wait for for any event and then

484
00:20:35,720 --> 00:20:41,870
I'll tell the scheduler please do some

485
00:20:38,210 --> 00:20:44,510
things<font color="#E5E5E5"> so another task can run the other</font>

486
00:20:41,870 --> 00:20:46,820
case<font color="#E5E5E5"> that could</font><font color="#CCCCCC"> happen is wait for event</font>

487
00:20:44,510 --> 00:20:49,908
mask<font color="#E5E5E5"> is where you say I'm interested</font><font color="#CCCCCC"> in</font>

488
00:20:46,820 --> 00:20:52,520
those few events<font color="#E5E5E5"> that I have</font><font color="#CCCCCC"> in my mask</font>

489
00:20:49,909 --> 00:20:54,260
<font color="#E5E5E5">that I passed the call and then any of</font>

490
00:20:52,520 --> 00:20:59,299
those would wake me<font color="#E5E5E5"> up and I get as a</font>

491
00:20:54,260 --> 00:21:01,279
return value what happened yeah so that

492
00:20:59,299 --> 00:21:04,460
would look like<font color="#CCCCCC"> this in a very</font><font color="#E5E5E5"> simple</font>

493
00:21:01,279 --> 00:21:06,679
case<font color="#E5E5E5"> say we have a high priority console</font>

494
00:21:04,460 --> 00:21:08,360
task we<font color="#CCCCCC"> have a hoax task which is</font>

495
00:21:06,679 --> 00:21:10,700
<font color="#E5E5E5">basically a thing that deals with all</font>

496
00:21:08,360 --> 00:21:14,479
<font color="#CCCCCC">kind of</font><font color="#E5E5E5"> miscellaneous things in the</font>

497
00:21:10,700 --> 00:21:16,730
chromium<font color="#E5E5E5"> is he and we have an idle task</font>

498
00:21:14,480 --> 00:21:19,130
<font color="#E5E5E5">the idle task is always ready to run and</font>

499
00:21:16,730 --> 00:21:21,919
runs<font color="#E5E5E5"> whenever nothing else is ready to</font>

500
00:21:19,130 --> 00:21:23,899
run usually the idle task is just just

501
00:21:21,919 --> 00:21:25,940
<font color="#CCCCCC">something</font><font color="#E5E5E5"> like a wait</font><font color="#CCCCCC"> for interrupt</font><font color="#E5E5E5"> and</font>

502
00:21:23,899 --> 00:21:28,389
the thing goes<font color="#CCCCCC"> to sleep</font><font color="#E5E5E5"> until</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> take an</font>

503
00:21:25,940 --> 00:21:31,039
interrupt the idle task wakes up and

504
00:21:28,390 --> 00:21:32,870
that<font color="#E5E5E5"> interrupts also said an event for</font>

505
00:21:31,039 --> 00:21:35,120
<font color="#E5E5E5">another task which then might get ready</font>

506
00:21:32,870 --> 00:21:38,539
and and run<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> let's look at this</font>

507
00:21:35,120 --> 00:21:41,299
<font color="#E5E5E5">example so we start out with the idea</font>

508
00:21:38,539 --> 00:21:42,830
<font color="#E5E5E5">with the hooks task which then enables</font>

509
00:21:41,299 --> 00:21:45,289
all the other tasks remember that's how

510
00:21:42,830 --> 00:21:48,710
<font color="#E5E5E5">task had enabled is by writing to</font><font color="#CCCCCC"> death</font>

511
00:21:45,289 --> 00:21:50,929
array at that index<font color="#E5E5E5"> so first only the</font>

512
00:21:48,710 --> 00:21:54,380
<font color="#E5E5E5">hooks task is okay to run and then that</font>

513
00:21:50,929 --> 00:21:56,960
one turns on all the<font color="#E5E5E5"> others well now</font><font color="#CCCCCC"> the</font>

514
00:21:54,380 --> 00:21:59,539
console task has a higher priority<font color="#E5E5E5"> our</font>

515
00:21:56,960 --> 00:22:02,480
scheduler kicks in<font color="#E5E5E5"> says</font><font color="#CCCCCC"> ok now</font><font color="#E5E5E5"> we're</font>

516
00:21:59,539 --> 00:22:04,789
gonna run the console<font color="#E5E5E5"> task</font><font color="#CCCCCC"> and that</font><font color="#E5E5E5"> runs</font>

517
00:22:02,480 --> 00:22:07,039
until it's waiting for<font color="#CCCCCC"> an event at which</font>

518
00:22:04,789 --> 00:22:08,809
point the second highest priority task

519
00:22:07,039 --> 00:22:10,010
that's ready to<font color="#E5E5E5"> run which will be the</font>

520
00:22:08,809 --> 00:22:12,860
<font color="#CCCCCC">Hook's</font><font color="#E5E5E5"> task</font>

521
00:22:10,010 --> 00:22:14,629
start running<font color="#CCCCCC"> so then we go to the that</font>

522
00:22:12,860 --> 00:22:16,939
one also waits for an event we go to

523
00:22:14,630 --> 00:22:19,460
idle<font color="#E5E5E5"> and so on and so on</font><font color="#CCCCCC"> alright</font>

524
00:22:16,940 --> 00:22:21,050
<font color="#CCCCCC">whenever an event happens we call</font><font color="#E5E5E5"> the</font>

525
00:22:19,460 --> 00:22:22,700
scheduler to then figure<font color="#CCCCCC"> out if</font>

526
00:22:21,050 --> 00:22:26,750
<font color="#E5E5E5">something changed if not we keep running</font>

527
00:22:22,700 --> 00:22:29,930
what we were running good<font color="#E5E5E5"> but back to</font>

528
00:22:26,750 --> 00:22:32,150
<font color="#E5E5E5">code how do we do that</font><font color="#CCCCCC"> um in chrome we</font>

529
00:22:29,930 --> 00:22:35,120
<font color="#CCCCCC">may see there's a wrapper function for</font>

530
00:22:32,150 --> 00:22:39,830
the supervisor<font color="#E5E5E5"> called as an instruction</font>

531
00:22:35,120 --> 00:22:41,600
that<font color="#CCCCCC"> will create a exception so what</font>

532
00:22:39,830 --> 00:22:43,610
doesn't<font color="#E5E5E5"> accept and</font><font color="#CCCCCC"> doer again remember</font>

533
00:22:41,600 --> 00:22:46,820
it switches us to handler mode and<font color="#E5E5E5"> it's</font>

534
00:22:43,610 --> 00:22:48,649
<font color="#E5E5E5">takes some registers so we looked at the</font>

535
00:22:46,820 --> 00:22:50,750
<font color="#E5E5E5">calling convention</font><font color="#CCCCCC"> before right so we</font>

536
00:22:48,650 --> 00:22:54,050
know that parameters to function calls

537
00:22:50,750 --> 00:22:55,460
get passed in registers r0 to r3 so we

538
00:22:54,050 --> 00:22:59,659
have two parameters<font color="#CCCCCC"> to this function</font>

539
00:22:55,460 --> 00:23:02,000
<font color="#CCCCCC">which</font><font color="#E5E5E5"> takes a ad schedule which is a</font>

540
00:22:59,660 --> 00:23:04,580
boolean<font color="#CCCCCC"> that</font><font color="#E5E5E5"> says okay please</font><font color="#CCCCCC"> do</font>

541
00:23:02,000 --> 00:23:07,550
<font color="#CCCCCC">schedule myself</font><font color="#E5E5E5"> after after now I'm no</font>

542
00:23:04,580 --> 00:23:10,159
longer<font color="#E5E5E5"> ready to run and the reschedule</font>

543
00:23:07,550 --> 00:23:14,000
which is like please take this other

544
00:23:10,160 --> 00:23:16,430
task instead<font color="#E5E5E5"> and make that run and we</font>

545
00:23:14,000 --> 00:23:18,380
<font color="#E5E5E5">passed those in those registers with</font>

546
00:23:16,430 --> 00:23:21,530
your supervisor call which then jumps

547
00:23:18,380 --> 00:23:24,920
into the<font color="#E5E5E5"> handler</font><font color="#CCCCCC"> all right in that</font>

548
00:23:21,530 --> 00:23:27,050
handler we push the link register and r3

549
00:23:24,920 --> 00:23:29,600
<font color="#CCCCCC">that keeps our stack aligned</font><font color="#E5E5E5"> and we have</font>

550
00:23:27,050 --> 00:23:32,149
the link rest<font color="#E5E5E5"> register saved and then we</font>

551
00:23:29,600 --> 00:23:33,889
branch directly to a<font color="#CCCCCC"> c</font><font color="#E5E5E5"> function because</font>

552
00:23:32,150 --> 00:23:36,020
that's easier to<font color="#E5E5E5"> write okay</font>

553
00:23:33,890 --> 00:23:38,420
<font color="#E5E5E5">this</font><font color="#CCCCCC"> C function is</font><font color="#E5E5E5"> already our</font><font color="#CCCCCC"> scheduled</font>

554
00:23:36,020 --> 00:23:40,910
scheduling decision right there<font color="#E5E5E5"> so</font>

555
00:23:38,420 --> 00:23:45,200
remember<font color="#E5E5E5"> how we passed in</font><font color="#CCCCCC"> a register r0</font>

556
00:23:40,910 --> 00:23:49,550
and r1<font color="#CCCCCC"> the d schedule and the reschedule</font>

557
00:23:45,200 --> 00:23:52,370
<font color="#E5E5E5">our</font><font color="#CCCCCC"> decision is easy so we remember the</font>

558
00:23:49,550 --> 00:23:54,200
current<font color="#CCCCCC"> task we</font><font color="#E5E5E5"> do if</font><font color="#CCCCCC"> t schedule is said</font>

559
00:23:52,370 --> 00:23:56,300
and<font color="#E5E5E5"> we don't have any pending</font><font color="#CCCCCC"> events for</font>

560
00:23:54,200 --> 00:24:01,640
<font color="#CCCCCC">our</font><font color="#E5E5E5"> task we mark ourselves there's no</font>

561
00:23:56,300 --> 00:24:04,790
<font color="#E5E5E5">longer ready then we mark the reschedule</font>

562
00:24:01,640 --> 00:24:07,010
<font color="#E5E5E5">task as ready then we find the next now</font>

563
00:24:04,790 --> 00:24:09,680
now another task is ready<font color="#CCCCCC"> now we need to</font>

564
00:24:07,010 --> 00:24:11,840
check check again which<font color="#E5E5E5"> task is the one</font>

565
00:24:09,680 --> 00:24:14,750
with the<font color="#CCCCCC"> highest</font><font color="#E5E5E5"> priority so that</font><font color="#CCCCCC"> one</font>

566
00:24:11,840 --> 00:24:17,000
goes<font color="#CCCCCC"> into</font><font color="#E5E5E5"> the next then we set the</font>

567
00:24:14,750 --> 00:24:19,520
<font color="#E5E5E5">current task to next and then we return</font>

568
00:24:17,000 --> 00:24:22,050
what was the old one<font color="#CCCCCC"> all right remember</font>

569
00:24:19,520 --> 00:24:25,860
return values go into r0<font color="#CCCCCC"> and r1</font>

570
00:24:22,050 --> 00:24:27,750
so now we're back<font color="#E5E5E5"> we had only one return</font>

571
00:24:25,860 --> 00:24:32,570
that was a you in 32 so that will go

572
00:24:27,750 --> 00:24:35,340
into our<font color="#E5E5E5"> zero</font><font color="#CCCCCC"> we load the current task</font>

573
00:24:32,570 --> 00:24:37,590
<font color="#E5E5E5">pointer into our</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> we dereference it</font>

574
00:24:35,340 --> 00:24:39,120
into our one we compare our<font color="#CCCCCC"> zero which</font>

575
00:24:37,590 --> 00:24:42,060
was<font color="#E5E5E5"> the return value of the</font><font color="#CCCCCC"> function</font>

576
00:24:39,120 --> 00:24:44,399
<font color="#E5E5E5">from before if they're the same we don't</font>

577
00:24:42,060 --> 00:24:46,980
have to do anything so we<font color="#CCCCCC"> just returned</font>

578
00:24:44,400 --> 00:24:48,870
<font color="#CCCCCC">from our exception</font><font color="#E5E5E5"> handler</font><font color="#CCCCCC"> so if they're</font>

579
00:24:46,980 --> 00:24:51,120
<font color="#CCCCCC">not the</font><font color="#E5E5E5"> same means we need to context</font>

580
00:24:48,870 --> 00:24:53,310
switch<font color="#E5E5E5"> that's when like a new task needs</font>

581
00:24:51,120 --> 00:24:55,469
<font color="#E5E5E5">to run that wasn't running before</font><font color="#CCCCCC"> so we</font>

582
00:24:53,310 --> 00:24:59,250
need to swap out the contexts<font color="#E5E5E5"> before</font>

583
00:24:55,470 --> 00:25:01,380
going back to<font color="#CCCCCC"> our thread</font><font color="#E5E5E5"> level all right</font>

584
00:24:59,250 --> 00:25:02,940
that one is like the most complicated

585
00:25:01,380 --> 00:25:07,050
one if you can<font color="#E5E5E5"> follow that then</font>

586
00:25:02,940 --> 00:25:09,620
everything<font color="#E5E5E5"> is easy</font><font color="#CCCCCC"> and so we get the</font>

587
00:25:07,050 --> 00:25:13,560
<font color="#CCCCCC">process stack pointer into register r2</font>

588
00:25:09,620 --> 00:25:15,149
then we move<font color="#E5E5E5"> archons</font><font color="#CCCCCC"> that pointer</font>

589
00:25:13,560 --> 00:25:18,290
remember we're in<font color="#E5E5E5"> handler mode which</font>

590
00:25:15,150 --> 00:25:21,750
will be the main stack pointer<font color="#E5E5E5"> into r3</font>

591
00:25:18,290 --> 00:25:24,540
then we move r2 which is<font color="#E5E5E5"> our puzzle</font>

592
00:25:21,750 --> 00:25:29,100
stack pointer<font color="#E5E5E5"> into the stack pointer so</font>

593
00:25:24,540 --> 00:25:32,040
we switch in<font color="#E5E5E5"> handler mode</font><font color="#CCCCCC"> what our stack</font>

594
00:25:29,100 --> 00:25:34,409
pointer points to to the stack pointer

595
00:25:32,040 --> 00:25:36,330
of<font color="#CCCCCC"> the old tasks the one that we're</font>

596
00:25:34,410 --> 00:25:39,150
<font color="#E5E5E5">going to dscan</font><font color="#CCCCCC"> you'll now we push our</font>

597
00:25:36,330 --> 00:25:41,300
<font color="#CCCCCC">four through our seven to remember them</font>

598
00:25:39,150 --> 00:25:45,270
on the process stack of the old<font color="#CCCCCC"> tasks</font>

599
00:25:41,300 --> 00:25:46,560
<font color="#E5E5E5">now as I said</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> we're where size</font>

600
00:25:45,270 --> 00:25:48,180
limited because<font color="#E5E5E5"> of the thump</font>

601
00:25:46,560 --> 00:25:51,450
<font color="#E5E5E5">instructions so</font><font color="#CCCCCC"> we can't directly access</font>

602
00:25:48,180 --> 00:25:53,910
our<font color="#CCCCCC"> 8 through our 11 so we</font><font color="#E5E5E5"> need to copy</font>

603
00:25:51,450 --> 00:25:56,220
our 8 through 11 into our<font color="#E5E5E5"> fourth to ours</font>

604
00:25:53,910 --> 00:26:01,580
<font color="#E5E5E5">through our</font><font color="#CCCCCC"> 7 and then we</font><font color="#E5E5E5"> push those</font>

605
00:25:56,220 --> 00:26:06,420
<font color="#E5E5E5">also</font><font color="#CCCCCC"> onto the old process</font><font color="#E5E5E5"> tag okay so</font>

606
00:26:01,580 --> 00:26:09,419
now we're halfway done<font color="#CCCCCC"> we copied</font><font color="#E5E5E5"> the</font>

607
00:26:06,420 --> 00:26:13,080
stack pointer now into<font color="#CCCCCC"> r2</font><font color="#E5E5E5"> we copy our</font>

608
00:26:09,420 --> 00:26:16,290
<font color="#CCCCCC">three which was our old</font><font color="#E5E5E5"> remember we</font>

609
00:26:13,080 --> 00:26:17,730
remembered<font color="#E5E5E5"> the main stack pointer into</font>

610
00:26:16,290 --> 00:26:21,149
<font color="#CCCCCC">the stack pointers and</font><font color="#E5E5E5"> our stack</font>

611
00:26:17,730 --> 00:26:23,910
<font color="#CCCCCC">pointers again the main stack pointer</font><font color="#E5E5E5"> as</font>

612
00:26:21,150 --> 00:26:26,910
normal for handler mode now<font color="#E5E5E5"> we still</font>

613
00:26:23,910 --> 00:26:33,660
were into r2 which points to the<font color="#E5E5E5"> old</font>

614
00:26:26,910 --> 00:26:35,320
stack<font color="#E5E5E5"> we store into that the stack</font>

615
00:26:33,660 --> 00:26:37,900
pointer of the<font color="#E5E5E5"> old stack</font>

616
00:26:35,320 --> 00:26:40,929
and that works out<font color="#E5E5E5"> because remember in a</font>

617
00:26:37,900 --> 00:26:43,780
struct<font color="#E5E5E5"> in C your first element in a</font>

618
00:26:40,930 --> 00:26:46,770
struct<font color="#CCCCCC"> will have the same address as a</font>

619
00:26:43,780 --> 00:26:50,379
point as the struct<font color="#CCCCCC"> right so we store</font>

620
00:26:46,770 --> 00:26:53,980
the old task stack pointer<font color="#E5E5E5"> into</font><font color="#CCCCCC"> the old</font>

621
00:26:50,380 --> 00:26:58,000
test<font color="#E5E5E5"> task description and then we load</font>

622
00:26:53,980 --> 00:27:00,870
from<font color="#E5E5E5"> r1 which points to the next task we</font>

623
00:26:58,000 --> 00:27:04,710
load<font color="#CCCCCC"> that stack pointer and</font><font color="#E5E5E5"> then we</font>

624
00:27:00,870 --> 00:27:08,110
understand all the registers back<font color="#CCCCCC"> into</font>

625
00:27:04,710 --> 00:27:11,080
<font color="#CCCCCC">me.we and thank all</font><font color="#E5E5E5"> those registers then</font>

626
00:27:08,110 --> 00:27:12,969
we have to do the same<font color="#E5E5E5"> for</font><font color="#CCCCCC"> of our 4 5 6</font>

627
00:27:11,080 --> 00:27:16,090
<font color="#CCCCCC">7 because it's reverse order of</font><font color="#E5E5E5"> what we</font>

628
00:27:12,970 --> 00:27:18,670
did<font color="#E5E5E5"> before</font><font color="#CCCCCC"> then we put</font><font color="#E5E5E5"> those also in</font><font color="#CCCCCC"> the</font>

629
00:27:16,090 --> 00:27:20,949
registers<font color="#E5E5E5"> and now we switch the context</font>

630
00:27:18,670 --> 00:27:23,110
now all the registers look like<font color="#E5E5E5"> this</font>

631
00:27:20,950 --> 00:27:25,330
should for<font color="#E5E5E5"> our</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> so basically that's</font>

632
00:27:23,110 --> 00:27:28,929
what<font color="#CCCCCC"> we remembered</font><font color="#E5E5E5"> last time our</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> stop</font>

633
00:27:25,330 --> 00:27:33,010
to run and<font color="#E5E5E5"> yeah then we</font><font color="#CCCCCC"> just make that</font>

634
00:27:28,930 --> 00:27:36,070
<font color="#E5E5E5">our</font><font color="#CCCCCC"> passes</font><font color="#E5E5E5"> that pointer we return</font><font color="#CCCCCC"> back</font>

635
00:27:33,010 --> 00:27:38,830
to the handler<font color="#E5E5E5"> and they were done so we</font>

636
00:27:36,070 --> 00:27:41,889
just<font color="#CCCCCC"> pop</font><font color="#E5E5E5"> our program counter which was</font>

637
00:27:38,830 --> 00:27:45,520
backed up so now we're<font color="#CCCCCC"> back in</font><font color="#E5E5E5"> the next</font>

638
00:27:41,890 --> 00:27:47,650
task<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> seemed pretty complicated</font>

639
00:27:45,520 --> 00:27:49,450
but<font color="#CCCCCC"> like if you sit down</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> piece of</font>

640
00:27:47,650 --> 00:27:53,440
<font color="#E5E5E5">paper I know this was probably really</font>

641
00:27:49,450 --> 00:27:55,300
<font color="#E5E5E5">fast when I went through this it's not</font>

642
00:27:53,440 --> 00:27:57,340
<font color="#E5E5E5">all that complicated</font><font color="#CCCCCC"> so how do we</font><font color="#E5E5E5"> get</font>

643
00:27:55,300 --> 00:28:00,310
<font color="#E5E5E5">this thing started because initially we</font>

644
00:27:57,340 --> 00:28:01,959
need at least one task<font color="#E5E5E5"> to switch from so</font>

645
00:28:00,310 --> 00:28:05,980
the way they do is they<font color="#E5E5E5"> have a scratch</font>

646
00:28:01,960 --> 00:28:08,410
pad which<font color="#CCCCCC"> is just a 17 x</font><font color="#E5E5E5"> 4 byte array</font>

647
00:28:05,980 --> 00:28:11,890
for because every register is 4 bytes so

648
00:28:08,410 --> 00:28:17,050
we need 17 for<font color="#CCCCCC"> one</font><font color="#E5E5E5"> one full context that</font>

649
00:28:11,890 --> 00:28:21,660
we we make that our<font color="#E5E5E5"> r2 and then we move</font>

650
00:28:17,050 --> 00:28:21,659
over to<font color="#CCCCCC"> into our three and so on and</font>

651
00:28:22,140 --> 00:28:28,480
then<font color="#CCCCCC"> we go over those steps</font><font color="#E5E5E5"> to finally</font>

652
00:28:26,170 --> 00:28:31,750
call our scheduler which then will

653
00:28:28,480 --> 00:28:35,320
detect there's a new task to<font color="#E5E5E5"> run and we</font>

654
00:28:31,750 --> 00:28:38,410
switch to any of the other tasks all

655
00:28:35,320 --> 00:28:41,139
right<font color="#E5E5E5"> tasks</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> we've seen</font><font color="#CCCCCC"> their</font>

656
00:28:38,410 --> 00:28:43,630
graphic<font color="#CCCCCC"> before so now we've figured out</font>

657
00:28:41,140 --> 00:28:47,830
<font color="#E5E5E5">how we can switch contexts but now we</font>

658
00:28:43,630 --> 00:28:49,779
<font color="#E5E5E5">also need a way</font><font color="#CCCCCC"> to actually make</font>

659
00:28:47,830 --> 00:28:52,000
those changes right we need to be able

660
00:28:49,779 --> 00:28:54,789
<font color="#E5E5E5">to make a task ready so how do we make a</font>

661
00:28:52,000 --> 00:28:57,760
task ready<font color="#E5E5E5"> while we use a function</font>

662
00:28:54,789 --> 00:29:03,158
called<font color="#CCCCCC"> task</font><font color="#E5E5E5"> set event it takes a task</font><font color="#CCCCCC"> ID</font>

663
00:28:57,760 --> 00:29:04,570
<font color="#E5E5E5">ID and an event so what we do is we we</font>

664
00:29:03,159 --> 00:29:07,240
<font color="#CCCCCC">have to look</font><font color="#E5E5E5"> at two</font><font color="#CCCCCC"> different cases</font>

665
00:29:04,570 --> 00:29:11,080
right so either the thing that changes

666
00:29:07,240 --> 00:29:14,799
that task status<font color="#E5E5E5"> originated in irq</font>

667
00:29:11,080 --> 00:29:17,260
context or it originated in<font color="#E5E5E5"> task context</font>

668
00:29:14,799 --> 00:29:19,418
the task context is the easy one<font color="#E5E5E5"> because</font>

669
00:29:17,260 --> 00:29:20,950
we just<font color="#E5E5E5"> atomically set the flag in the</font>

670
00:29:19,419 --> 00:29:22,630
<font color="#E5E5E5">receiver task and then we call the</font>

671
00:29:20,950 --> 00:29:25,830
scheduler so that one<font color="#CCCCCC"> is easy to support</font>

672
00:29:22,630 --> 00:29:28,899
<font color="#E5E5E5">them one it's like a mutex for example</font>

673
00:29:25,830 --> 00:29:31,990
<font color="#E5E5E5">the</font><font color="#CCCCCC"> the more complicated one is the one</font>

674
00:29:28,899 --> 00:29:35,739
were you originating in exception

675
00:29:31,990 --> 00:29:37,990
context so the problem is while you get

676
00:29:35,740 --> 00:29:39,820
<font color="#E5E5E5">one</font><font color="#CCCCCC"> inter</font><font color="#E5E5E5"> interrupt</font><font color="#CCCCCC"> you might get</font>

677
00:29:37,990 --> 00:29:42,519
<font color="#E5E5E5">another one and so on in every single</font>

678
00:29:39,820 --> 00:29:44,529
<font color="#E5E5E5">time the priorities might change because</font>

679
00:29:42,519 --> 00:29:46,029
<font color="#CCCCCC">each of those</font><font color="#E5E5E5"> exceptions might unblock a</font>

680
00:29:44,529 --> 00:29:48,700
different<font color="#CCCCCC"> task</font><font color="#E5E5E5"> so you want to make sure</font>

681
00:29:46,029 --> 00:29:51,130
to<font color="#CCCCCC"> only call the scheduler when you were</font>

682
00:29:48,700 --> 00:29:53,500
done<font color="#CCCCCC"> with handling</font><font color="#E5E5E5"> the interrupts so</font>

683
00:29:51,130 --> 00:29:56,350
there's a nice instruction to do that

684
00:29:53,500 --> 00:29:58,529
which<font color="#CCCCCC"> is pendous V</font><font color="#E5E5E5"> which is something</font>

685
00:29:56,350 --> 00:30:00,820
<font color="#E5E5E5">like a software interrupt basically and</font>

686
00:29:58,529 --> 00:30:02,649
the way you make that work<font color="#CCCCCC"> is she said</font>

687
00:30:00,820 --> 00:30:04,210
the priority low enough so<font color="#CCCCCC"> that all the</font>

688
00:30:02,649 --> 00:30:06,459
other interrupts have a higher priority

689
00:30:04,210 --> 00:30:09,809
<font color="#CCCCCC">so once you're done handing all the</font>

690
00:30:06,460 --> 00:30:12,610
other interrupts the<font color="#E5E5E5"> pendous</font><font color="#CCCCCC"> V will then</font>

691
00:30:09,809 --> 00:30:16,389
get executed still a handler mode and

692
00:30:12,610 --> 00:30:19,719
call<font color="#CCCCCC"> schedule and that's how you set an</font>

693
00:30:16,389 --> 00:30:21,969
event from<font color="#E5E5E5"> interrupt context there's a</font>

694
00:30:19,720 --> 00:30:24,760
<font color="#E5E5E5">bate event which is the opposite when a</font>

695
00:30:21,970 --> 00:30:26,710
task<font color="#E5E5E5"> needs to wait for something that it</font>

696
00:30:24,760 --> 00:30:28,990
takes a timeout<font color="#E5E5E5"> it must not be called an</font>

697
00:30:26,710 --> 00:30:30,880
interrupt<font color="#E5E5E5"> context so the way it works</font><font color="#CCCCCC"> is</font>

698
00:30:28,990 --> 00:30:34,529
it<font color="#E5E5E5"> it arms</font><font color="#CCCCCC"> the timer which</font><font color="#E5E5E5"> we'll see</font>

699
00:30:30,880 --> 00:30:38,049
<font color="#CCCCCC">later how farming timers works</font><font color="#E5E5E5"> and then</font>

700
00:30:34,529 --> 00:30:40,450
it<font color="#CCCCCC"> basically goes and checks if my</font>

701
00:30:38,049 --> 00:30:42,879
events are 0 then<font color="#E5E5E5"> we</font><font color="#CCCCCC"> D scheduled ourself</font>

702
00:30:40,450 --> 00:30:45,070
we tell<font color="#E5E5E5"> D</font><font color="#CCCCCC"> schedule by calling the</font>

703
00:30:42,880 --> 00:30:47,860
scheduler with the D scheduled<font color="#E5E5E5"> flag said</font>

704
00:30:45,070 --> 00:30:50,769
we reschedule what's<font color="#CCCCCC"> passed in with</font>

705
00:30:47,860 --> 00:30:53,709
reschedule and if the timer expires<font color="#E5E5E5"> then</font>

706
00:30:50,769 --> 00:30:55,280
that would set a timeout event and would

707
00:30:53,710 --> 00:30:57,140
return<font color="#E5E5E5"> and if not</font>

708
00:30:55,280 --> 00:30:59,990
the actual event would get returned

709
00:30:57,140 --> 00:31:03,320
eventually<font color="#E5E5E5"> and here you can see how you</font>

710
00:30:59,990 --> 00:31:07,010
can use that<font color="#E5E5E5"> wrapped up in a helper</font>

711
00:31:03,320 --> 00:31:09,320
function<font color="#CCCCCC"> so basically you</font><font color="#E5E5E5"> have your time</font>

712
00:31:07,010 --> 00:31:11,030
out<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> have your task</font><font color="#E5E5E5"> that you want</font>

713
00:31:09,320 --> 00:31:14,629
to<font color="#CCCCCC"> reschedule so that would be the idle</font>

714
00:31:11,030 --> 00:31:16,670
<font color="#E5E5E5">task in</font><font color="#CCCCCC"> that case</font><font color="#E5E5E5"> so if</font><font color="#CCCCCC"> you go back</font><font color="#E5E5E5"> now</font>

715
00:31:14,630 --> 00:31:19,370
<font color="#E5E5E5">we have basically a way to go from wait</font>

716
00:31:16,670 --> 00:31:23,120
for events<font color="#CCCCCC"> to ready and we have a way</font>

717
00:31:19,370 --> 00:31:26,209
from running to<font color="#CCCCCC"> wait for an event so now</font>

718
00:31:23,120 --> 00:31:28,010
we're almost done right another<font color="#CCCCCC"> example</font>

719
00:31:26,210 --> 00:31:29,570
for<font color="#E5E5E5"> that would be implementing you sleep</font>

720
00:31:28,010 --> 00:31:31,700
which just sleeps

721
00:31:29,570 --> 00:31:34,220
instead of busy waiting<font color="#E5E5E5"> it sleeps</font><font color="#CCCCCC"> ralien</font>

722
00:31:31,700 --> 00:31:35,840
<font color="#CCCCCC">puts</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> test</font><font color="#E5E5E5"> to sleep the way</font><font color="#CCCCCC"> it works</font>

723
00:31:34,220 --> 00:31:41,000
is you<font color="#CCCCCC"> read your hardware clock source</font>

724
00:31:35,840 --> 00:31:43,010
<font color="#E5E5E5">and then you wait</font><font color="#CCCCCC"> for the events and</font><font color="#E5E5E5"> you</font>

725
00:31:41,000 --> 00:31:44,540
remember all the events<font color="#CCCCCC"> you</font><font color="#E5E5E5"> get and then</font>

726
00:31:43,010 --> 00:31:47,500
<font color="#E5E5E5">you compare the event</font><font color="#CCCCCC"> flight</font><font color="#E5E5E5"> mask</font>

727
00:31:44,540 --> 00:31:51,230
<font color="#CCCCCC">whether there</font><font color="#E5E5E5"> was a timer one in it and</font>

728
00:31:47,500 --> 00:31:54,440
if also<font color="#E5E5E5"> you</font><font color="#CCCCCC"> didn't have a time</font><font color="#E5E5E5"> out yet</font>

729
00:31:51,230 --> 00:31:55,700
<font color="#E5E5E5">meaning your time that you actuated is</font>

730
00:31:54,440 --> 00:31:57,860
smaller than the time<font color="#E5E5E5"> out you were</font>

731
00:31:55,700 --> 00:31:59,810
supposed<font color="#E5E5E5"> to wait you just</font><font color="#CCCCCC"> keep doing</font>

732
00:31:57,860 --> 00:32:01,429
<font color="#CCCCCC">that</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you order them together because</font>

733
00:31:59,810 --> 00:32:03,290
<font color="#CCCCCC">they're flags and you need to remember</font>

734
00:32:01,430 --> 00:32:05,990
<font color="#E5E5E5">all the other events that also happened</font>

735
00:32:03,290 --> 00:32:07,490
<font color="#E5E5E5">then in the end you mask mask out the</font>

736
00:32:05,990 --> 00:32:10,070
<font color="#E5E5E5">timer one because you don't really care</font>

737
00:32:07,490 --> 00:32:13,220
<font color="#CCCCCC">about</font><font color="#E5E5E5"> and return all</font><font color="#CCCCCC"> the other</font><font color="#E5E5E5"> all right</font>

738
00:32:10,070 --> 00:32:15,860
<font color="#E5E5E5">cool</font><font color="#CCCCCC"> so one thing</font><font color="#E5E5E5"> I used and didn't talk</font>

739
00:32:13,220 --> 00:32:18,590
<font color="#CCCCCC">about how it</font><font color="#E5E5E5"> works is atomic operations</font>

740
00:32:15,860 --> 00:32:20,959
while the cortex-m<font color="#CCCCCC"> 0 doesn't</font><font color="#E5E5E5"> have</font>

741
00:32:18,590 --> 00:32:23,449
exclusive stores or loads so all we can

742
00:32:20,960 --> 00:32:27,290
do really<font color="#E5E5E5"> is disable interrupts while we</font>

743
00:32:23,450 --> 00:32:28,970
do<font color="#CCCCCC"> our thing and that's basically</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> it</font>

744
00:32:27,290 --> 00:32:32,000
<font color="#CCCCCC">works so you</font><font color="#E5E5E5"> disable the interrupts you</font>

745
00:32:28,970 --> 00:32:33,950
load<font color="#E5E5E5"> whatever thing you want to modify</font>

746
00:32:32,000 --> 00:32:35,690
it<font color="#E5E5E5"> and you do your operation on that you</font>

747
00:32:33,950 --> 00:32:38,930
store it<font color="#E5E5E5"> back you turn on the interrupts</font>

748
00:32:35,690 --> 00:32:40,400
again<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> timers is the only thing</font>

749
00:32:38,930 --> 00:32:44,120
that's really<font color="#CCCCCC"> missing to make this whole</font>

750
00:32:40,400 --> 00:32:47,180
thing work<font color="#CCCCCC"> the way this works on the</font>

751
00:32:44,120 --> 00:32:48,739
cortex<font color="#E5E5E5"> and</font><font color="#CCCCCC"> on Chrome</font><font color="#E5E5E5"> you may see is they</font>

752
00:32:47,180 --> 00:32:50,900
use one of<font color="#E5E5E5"> the hardware timers that's</font>

753
00:32:48,740 --> 00:32:53,960
microcontroller specific so that's not a

754
00:32:50,900 --> 00:32:57,100
cortex-m<font color="#E5E5E5"> zero level solution but the</font>

755
00:32:53,960 --> 00:32:59,990
microcontroller solution could<font color="#E5E5E5"> be also a</font>

756
00:32:57,100 --> 00:33:02,719
<font color="#CCCCCC">Cystic but in that</font><font color="#E5E5E5"> case it's nice</font>

757
00:32:59,990 --> 00:33:07,640
because there is a timer<font color="#CCCCCC"> that also</font><font color="#E5E5E5"> has a</font>

758
00:33:02,720 --> 00:33:08,419
<font color="#E5E5E5">compare each task can use a timer</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> I</font>

759
00:33:07,640 --> 00:33:10,730
have saying

760
00:33:08,419 --> 00:33:13,639
timer<font color="#CCCCCC"> arm you pass in a timestamp and</font>

761
00:33:10,730 --> 00:33:16,609
your<font color="#E5E5E5"> task ID so basically there's an</font>

762
00:33:13,639 --> 00:33:20,269
area<font color="#CCCCCC"> of deadlines</font><font color="#E5E5E5"> and every time there's</font>

763
00:33:16,609 --> 00:33:21,859
an interrupt<font color="#E5E5E5"> we compare the time that we</font>

764
00:33:20,269 --> 00:33:24,950
read from<font color="#E5E5E5"> the timer with all the</font>

765
00:33:21,859 --> 00:33:27,769
deadlines and see which ones are expired

766
00:33:24,950 --> 00:33:32,690
and the expired ones<font color="#E5E5E5"> we can set the</font>

767
00:33:27,769 --> 00:33:34,549
timer flag for those and yeah<font color="#E5E5E5"> you can</font>

768
00:33:32,690 --> 00:33:39,619
also cancel timers if you no<font color="#CCCCCC"> longer need</font>

769
00:33:34,549 --> 00:33:42,049
them and yeah that's<font color="#CCCCCC"> basically it all</font>

770
00:33:39,619 --> 00:33:43,820
<font color="#E5E5E5">right so that was</font><font color="#CCCCCC"> super fast</font><font color="#E5E5E5"> and maybe I</font>

771
00:33:42,049 --> 00:33:50,960
was faster than I should have<font color="#E5E5E5"> been yeah</font>

772
00:33:43,820 --> 00:33:54,590
I have like half an hour left<font color="#E5E5E5"> anyone any</font>

773
00:33:50,960 --> 00:33:56,179
questions so far<font color="#CCCCCC"> I bet this wasn't all</font>

774
00:33:54,590 --> 00:33:58,488
super clear<font color="#E5E5E5"> or maybe I was wrong about</font>

775
00:33:56,179 --> 00:34:05,720
<font color="#E5E5E5">things so please shout if I said things</font>

776
00:33:58,489 --> 00:34:08,299
wrong<font color="#CCCCCC"> you could so</font><font color="#E5E5E5"> for not cortex-m</font>

777
00:34:05,720 --> 00:34:09,918
<font color="#CCCCCC">zeroes</font><font color="#E5E5E5"> but for an m4 or</font><font color="#CCCCCC"> something which</font>

778
00:34:08,299 --> 00:34:11,780
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> also supported you could use the</font>

779
00:34:09,918 --> 00:34:14,388
MP<font color="#CCCCCC"> u so they have some targets for</font>

780
00:34:11,780 --> 00:34:17,240
chromium<font color="#CCCCCC"> EC</font><font color="#E5E5E5"> that use</font><font color="#CCCCCC"> MP u I think at</font>

781
00:34:14,389 --> 00:34:17,690
least I saw some conflict configuration

782
00:34:17,239 --> 00:34:19,308
<font color="#CCCCCC">Flags</font>

783
00:34:17,690 --> 00:34:21,859
also of<font color="#E5E5E5"> course if you have a</font>

784
00:34:19,309 --> 00:34:23,960
microcontroller that<font color="#E5E5E5"> has a floating</font>

785
00:34:21,859 --> 00:34:25,250
point then when every<font color="#CCCCCC"> task switch</font><font color="#E5E5E5"> you'd</font>

786
00:34:23,960 --> 00:34:27,260
also have<font color="#E5E5E5"> to take</font><font color="#CCCCCC"> care of all the</font>

787
00:34:25,250 --> 00:34:29,119
<font color="#CCCCCC">floating-point state which</font><font color="#E5E5E5"> I on purpose</font>

788
00:34:27,260 --> 00:34:33,010
left out because<font color="#E5E5E5"> it would make it even</font>

789
00:34:29,119 --> 00:34:40,490
<font color="#E5E5E5">longer and more complex yeah</font>

790
00:34:33,010 --> 00:34:44,540
any other questions yes<font color="#CCCCCC"> in that case</font>

791
00:34:40,489 --> 00:34:47,299
there's a single timer and then<font color="#E5E5E5"> per task</font>

792
00:34:44,540 --> 00:34:48,770
you can have one timer<font color="#E5E5E5"> so the way this</font>

793
00:34:47,299 --> 00:34:51,980
works<font color="#E5E5E5"> is you have basically an array</font>

794
00:34:48,770 --> 00:34:56,449
with deadlines<font color="#E5E5E5"> and you always said</font><font color="#CCCCCC"> to</font>

795
00:34:51,980 --> 00:34:59,660
compare on your as I said the timer<font color="#CCCCCC"> the</font>

796
00:34:56,449 --> 00:35:01,700
hardware timer has a normal<font color="#E5E5E5"> counter that</font>

797
00:34:59,660 --> 00:35:03,319
will overflow<font color="#E5E5E5"> if it's a</font><font color="#CCCCCC"> 32-bit for</font>

798
00:35:01,700 --> 00:35:05,799
example every<font color="#CCCCCC"> time you have a 32-bit</font>

799
00:35:03,319 --> 00:35:08,960
<font color="#E5E5E5">overflow which happens if you run at</font>

800
00:35:05,799 --> 00:35:10,339
whatever frequency<font color="#E5E5E5"> then say 65</font>

801
00:35:08,960 --> 00:35:14,359
milliseconds would be always<font color="#E5E5E5"> your</font>

802
00:35:10,339 --> 00:35:16,970
overflow<font color="#E5E5E5"> and then you also have the case</font>

803
00:35:14,359 --> 00:35:19,808
where<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> a shorter time duration</font>

804
00:35:16,970 --> 00:35:21,529
and say time out<font color="#E5E5E5"> of a couple of</font>

805
00:35:19,809 --> 00:35:23,960
microseconds

806
00:35:21,530 --> 00:35:27,350
you always<font color="#E5E5E5"> set your timers</font><font color="#CCCCCC"> compared unit</font>

807
00:35:23,960 --> 00:35:30,200
<font color="#CCCCCC">two closes deadlines and use</font><font color="#E5E5E5"> that one to</font>

808
00:35:27,350 --> 00:35:32,330
trigger the<font color="#CCCCCC"> process timers and inside of</font>

809
00:35:30,200 --> 00:35:35,020
<font color="#CCCCCC">that</font><font color="#E5E5E5"> process timers function you always</font>

810
00:35:32,330 --> 00:35:37,190
set it to the<font color="#E5E5E5"> next deadline or</font>

811
00:35:35,020 --> 00:35:39,200
infinitive there's no<font color="#CCCCCC"> deadline you set</font>

812
00:35:37,190 --> 00:35:43,690
it to<font color="#CCCCCC"> ffffff which will just</font><font color="#E5E5E5"> wait for</font>

813
00:35:39,200 --> 00:35:55,430
the full overflow all right

814
00:35:43,690 --> 00:36:00,350
yes no no the cortex-m zero doesn't<font color="#CCCCCC"> have</font>

815
00:35:55,430 --> 00:36:02,720
cash<font color="#CCCCCC"> to write much the question was</font>

816
00:36:00,350 --> 00:36:06,850
whether<font color="#E5E5E5"> I have to set up</font><font color="#CCCCCC"> cash they just</font>

817
00:36:02,720 --> 00:36:06,850
remembered I have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> repeat them</font><font color="#CCCCCC"> yes</font>

818
00:36:18,850 --> 00:36:24,140
<font color="#CCCCCC">well but</font><font color="#E5E5E5"> you yeah you could do that if</font>

819
00:36:21,620 --> 00:36:25,759
you know that<font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> happen but so the</font>

820
00:36:24,140 --> 00:36:27,920
<font color="#CCCCCC">question was if you could just tell</font><font color="#E5E5E5"> your</font>

821
00:36:25,760 --> 00:36:33,020
compiler to not use the extra registers

822
00:36:27,920 --> 00:36:41,650
<font color="#E5E5E5">I guess you could</font><font color="#CCCCCC"> if I am NOT a compiler</font>

823
00:36:33,020 --> 00:36:44,650
person I<font color="#E5E5E5"> don't know but yeah anyone else</font>

824
00:36:41,650 --> 00:36:44,650
<font color="#E5E5E5">yes</font>

825
00:36:49,400 --> 00:36:54,740
I looked a bit around I<font color="#E5E5E5"> mean I</font><font color="#CCCCCC"> basically</font>

826
00:36:52,040 --> 00:36:56,359
picked<font color="#E5E5E5"> that one if she saw my tough talk</font>

827
00:36:54,740 --> 00:36:58,160
from last<font color="#E5E5E5"> year I basically picked it</font>

828
00:36:56,359 --> 00:37:00,020
<font color="#E5E5E5">because I thought there would be</font><font color="#CCCCCC"> already</font>

829
00:36:58,160 --> 00:37:02,930
working you<font color="#CCCCCC"> boudin</font><font color="#E5E5E5"> kernel integration</font>

830
00:37:00,020 --> 00:37:04,670
which<font color="#E5E5E5"> lets lets me you know already</font><font color="#CCCCCC"> talk</font>

831
00:37:02,930 --> 00:37:06,500
<font color="#E5E5E5">to it which turned out that at least to</font>

832
00:37:04,670 --> 00:37:11,840
you good part was broken<font color="#CCCCCC"> so</font><font color="#E5E5E5"> I had to fix</font>

833
00:37:06,500 --> 00:37:14,330
that<font color="#CCCCCC"> first but I think three</font><font color="#E5E5E5"> artists is</font>

834
00:37:11,840 --> 00:37:18,770
more generic<font color="#E5E5E5"> this one was a good choice</font>

835
00:37:14,330 --> 00:37:21,080
for<font color="#E5E5E5"> me because it was</font><font color="#CCCCCC"> basically meant to</font>

836
00:37:18,770 --> 00:37:24,259
be<font color="#E5E5E5"> used for</font><font color="#CCCCCC"> what I needed</font>

837
00:37:21,080 --> 00:37:26,150
I mean free artists has fancier mutexes

838
00:37:24,260 --> 00:37:28,369
<font color="#E5E5E5">to my understanding</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> example they do</font>

839
00:37:26,150 --> 00:37:31,609
priority inheritance<font color="#E5E5E5"> to mutexes here</font>

840
00:37:28,369 --> 00:37:33,470
<font color="#E5E5E5">don't</font><font color="#CCCCCC"> third like you could create bad</font>

841
00:37:31,609 --> 00:37:35,690
situations if you're not careful but

842
00:37:33,470 --> 00:37:38,779
this one seems<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be very well tailored</font>

843
00:37:35,690 --> 00:37:47,990
to just being a board level control<font color="#E5E5E5"> for</font>

844
00:37:38,780 --> 00:37:52,400
<font color="#CCCCCC">fan control or LEDs for no I hadn't</font>

845
00:37:47,990 --> 00:37:57,680
compared because<font color="#E5E5E5"> nice colors have them</font>

846
00:37:52,400 --> 00:38:00,440
compared<font color="#E5E5E5"> no</font><font color="#CCCCCC"> all right</font>

847
00:37:57,680 --> 00:38:03,440
so other stuff that<font color="#E5E5E5"> I've been working</font><font color="#CCCCCC"> on</font>

848
00:38:00,440 --> 00:38:06,020
<font color="#CCCCCC">for dad I have known little</font><font color="#E5E5E5"> branch of</font>

849
00:38:03,440 --> 00:38:08,180
open OCD that has thread awareness and

850
00:38:06,020 --> 00:38:10,490
it kind of works it needs some cleanup

851
00:38:08,180 --> 00:38:12,379
before<font color="#E5E5E5"> I can send out</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> patches</font>

852
00:38:10,490 --> 00:38:15,830
<font color="#CCCCCC">I wanted to know that porting it to</font><font color="#E5E5E5"> risk</font>

853
00:38:12,380 --> 00:38:17,510
5 just<font color="#CCCCCC"> because and the</font><font color="#E5E5E5"> port you</font><font color="#CCCCCC"> Michael</font>

854
00:38:15,830 --> 00:38:22,009
<font color="#CCCCCC">blaze because that might come in handy</font>

855
00:38:17,510 --> 00:38:22,190
<font color="#CCCCCC">for</font><font color="#E5E5E5"> another product so yeah questions on</font>

856
00:38:22,010 --> 00:38:25,840
that

857
00:38:22,190 --> 00:38:29,359
<font color="#E5E5E5">is anyone interested in having thread</font>

858
00:38:25,840 --> 00:38:33,250
thread visibility<font color="#E5E5E5"> in open Oh Sydney I</font>

859
00:38:29,359 --> 00:38:33,250
don't know yes

860
00:38:55,570 --> 00:39:00,530
so the question<font color="#E5E5E5"> was at what point</font><font color="#CCCCCC"> does</font>

861
00:38:58,280 --> 00:39:03,770
make an arthouse ends versus running

862
00:39:00,530 --> 00:39:07,790
<font color="#E5E5E5">bare metal</font><font color="#CCCCCC"> just having a while loop that</font>

863
00:39:03,770 --> 00:39:10,820
<font color="#CCCCCC">goes through alder</font><font color="#E5E5E5"> all right</font><font color="#CCCCCC"> that's a</font>

864
00:39:07,790 --> 00:39:13,630
bit a difficult one it depends<font color="#CCCCCC"> on your</font>

865
00:39:10,820 --> 00:39:16,520
complexity of the system I would<font color="#E5E5E5"> say so</font>

866
00:39:13,630 --> 00:39:18,109
manure working all alone you<font color="#E5E5E5"> don't have</font>

867
00:39:16,520 --> 00:39:20,869
colleagues and you don't share the work

868
00:39:18,109 --> 00:39:23,029
<font color="#E5E5E5">for example it gets easier if you have</font>

869
00:39:20,869 --> 00:39:26,020
an artist because you can package<font color="#E5E5E5"> out</font>

870
00:39:23,030 --> 00:39:28,640
work packages<font color="#E5E5E5"> but</font><font color="#CCCCCC"> wind people</font>

871
00:39:26,020 --> 00:39:32,119
<font color="#CCCCCC">power-wise it might be definitely worth</font>

872
00:39:28,640 --> 00:39:35,259
to use an artist because<font color="#CCCCCC"> he like it's</font>

873
00:39:32,119 --> 00:39:37,849
<font color="#E5E5E5">really easy to get to sleep right</font>

874
00:39:35,260 --> 00:39:41,150
because the you just<font color="#CCCCCC"> basic you have to</font>

875
00:39:37,849 --> 00:39:43,670
make sure the idle task gets run at the

876
00:39:41,150 --> 00:39:45,650
right moment<font color="#CCCCCC"> as opposed to like</font><font color="#E5E5E5"> from</font>

877
00:39:43,670 --> 00:39:50,780
every possible<font color="#E5E5E5"> state make sure you go</font><font color="#CCCCCC"> to</font>

878
00:39:45,650 --> 00:39:53,410
sleep<font color="#E5E5E5"> the correct way</font><font color="#CCCCCC"> I just personally</font>

879
00:39:50,780 --> 00:39:56,089
found<font color="#E5E5E5"> it easier to write code</font><font color="#CCCCCC"> like that</font>

880
00:39:53,410 --> 00:39:59,029
<font color="#E5E5E5">I've done bare metal firmware that</font>

881
00:39:56,089 --> 00:40:02,690
<font color="#E5E5E5">doesn't have task switching before and</font>

882
00:39:59,030 --> 00:40:05,030
it makes it easier to<font color="#E5E5E5"> reuse things</font><font color="#CCCCCC"> so</font>

883
00:40:02,690 --> 00:40:06,619
there's pros and<font color="#E5E5E5"> cons of course you have</font>

884
00:40:05,030 --> 00:40:08,089
the size overhead for having all this

885
00:40:06,619 --> 00:40:09,770
extra<font color="#E5E5E5"> stack so if you're a size</font>

886
00:40:08,089 --> 00:40:12,560
<font color="#CCCCCC">constrained for example</font><font color="#E5E5E5"> that might be</font>

887
00:40:09,770 --> 00:40:15,380
something you want<font color="#CCCCCC"> to consider and if</font>

888
00:40:12,560 --> 00:40:18,970
you have a bigger system<font color="#E5E5E5"> that has an MP</font>

889
00:40:15,380 --> 00:40:22,460
<font color="#CCCCCC">u that definitely</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> be worth</font>

890
00:40:18,970 --> 00:40:28,660
<font color="#E5E5E5">considering an artist</font><font color="#CCCCCC"> or even an MMU</font><font color="#E5E5E5"> I</font>

891
00:40:22,460 --> 00:40:28,660
mean so yeah I would<font color="#E5E5E5"> look at that yes</font>

892
00:40:34,870 --> 00:40:41,600
they have some code in there that goes

893
00:40:38,990 --> 00:40:45,140
<font color="#E5E5E5">over to code and and but I haven't</font>

894
00:40:41,600 --> 00:40:46,430
<font color="#CCCCCC">looked at how they work exactly</font><font color="#E5E5E5"> but is a</font>

895
00:40:45,140 --> 00:40:49,660
valid point do you<font color="#E5E5E5"> want to make sure</font>

896
00:40:46,430 --> 00:40:49,660
<font color="#E5E5E5">your stack is large enough</font>

897
00:40:56,990 --> 00:41:07,040
yes well the<font color="#CCCCCC"> idle task is literally one</font>

898
00:41:04,520 --> 00:41:10,160
line of<font color="#CCCCCC"> code in that case and that's</font>

899
00:41:07,040 --> 00:41:11,900
<font color="#CCCCCC">azzam wait for interrupts</font><font color="#E5E5E5"> and then you</font>

900
00:41:10,160 --> 00:41:13,490
go<font color="#E5E5E5"> to sleep and wait for an interrupt</font>

901
00:41:11,900 --> 00:41:15,920
<font color="#E5E5E5">because that's the</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> thing that could</font>

902
00:41:13,490 --> 00:41:18,859
<font color="#E5E5E5">make any other</font><font color="#CCCCCC"> task run right a change</font>

903
00:41:15,920 --> 00:41:22,790
in condition<font color="#E5E5E5"> that triggers an exception</font>

904
00:41:18,859 --> 00:41:25,490
so that is not entirely true<font color="#CCCCCC"> at</font><font color="#E5E5E5"> all</font>

905
00:41:22,790 --> 00:41:27,230
<font color="#E5E5E5">because the microcontroller might need</font>

906
00:41:25,490 --> 00:41:29,209
to take<font color="#E5E5E5"> a</font><font color="#CCCCCC"> certain amount of time to go</font>

907
00:41:27,230 --> 00:41:30,730
<font color="#E5E5E5">to sleep and wake</font><font color="#CCCCCC"> up so</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to sleep</font>

908
00:41:29,210 --> 00:41:32,720
might not actually be<font color="#CCCCCC"> the right decision</font>

909
00:41:30,730 --> 00:41:35,210
<font color="#CCCCCC">depending</font><font color="#E5E5E5"> on how long you're going to</font>

910
00:41:32,720 --> 00:41:37,939
<font color="#E5E5E5">wait in the aisle</font><font color="#CCCCCC"> task so there there's</font>

911
00:41:35,210 --> 00:41:39,410
also a bit more clever way of<font color="#CCCCCC"> doing that</font>

912
00:41:37,940 --> 00:41:41,540
in chromium<font color="#CCCCCC"> ACC but I haven't</font>

913
00:41:39,410 --> 00:41:44,810
investigated how exactly that works

914
00:41:41,540 --> 00:41:46,430
<font color="#E5E5E5">because my device</font><font color="#CCCCCC"> is plugged into</font><font color="#E5E5E5"> the</font>

915
00:41:44,810 --> 00:42:04,580
wall so I don't actually care<font color="#E5E5E5"> that much</font>

916
00:41:46,430 --> 00:42:11,540
about<font color="#E5E5E5"> power yes between the idle</font><font color="#CCCCCC"> tasks</font>

917
00:42:04,580 --> 00:42:14,650
and in<font color="#E5E5E5"> theory yeah you could probably</font>

918
00:42:11,540 --> 00:42:16,790
<font color="#CCCCCC">take a shortcut there yes</font>

919
00:42:14,650 --> 00:42:18,770
that's a good point so<font color="#CCCCCC"> the question was</font>

920
00:42:16,790 --> 00:42:20,509
<font color="#E5E5E5">whether</font><font color="#CCCCCC"> dido</font><font color="#E5E5E5"> task actually needs a</font>

921
00:42:18,770 --> 00:42:22,070
context switch<font color="#CCCCCC"> you</font><font color="#E5E5E5"> probably wouldn't</font>

922
00:42:20,510 --> 00:42:27,230
<font color="#E5E5E5">because they're not using any registers</font>

923
00:42:22,070 --> 00:42:30,349
in there<font color="#CCCCCC"> yes</font>

924
00:42:27,230 --> 00:42:30,349
[Music]

925
00:43:03,470 --> 00:43:08,490
so the question was like<font color="#E5E5E5"> how much</font>

926
00:43:05,940 --> 00:43:09,620
<font color="#E5E5E5">overhead you have by</font><font color="#CCCCCC"> using chromium easy</font>

927
00:43:08,490 --> 00:43:13,100
<font color="#CCCCCC">compare</font>

928
00:43:09,620 --> 00:43:16,529
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so I can tell you for</font><font color="#CCCCCC"> from my case</font>

929
00:43:13,100 --> 00:43:21,089
<font color="#CCCCCC">the microcontroller</font><font color="#E5E5E5"> I'm using as</font><font color="#CCCCCC"> 128 K</font>

930
00:43:16,530 --> 00:43:26,120
flash and 16 K SRAM<font color="#CCCCCC"> that's enough for</font>

931
00:43:21,090 --> 00:43:26,120
<font color="#CCCCCC">two full copies of the firmware you</font>

932
00:43:26,360 --> 00:43:31,590
<font color="#CCCCCC">wouldn't have I mean</font><font color="#E5E5E5"> a chromium AC is</font>

933
00:43:29,190 --> 00:43:34,170
probably not<font color="#E5E5E5"> a good call for just about</font>

934
00:43:31,590 --> 00:43:36,630
any project it's<font color="#E5E5E5"> very good if</font><font color="#CCCCCC"> you need</font>

935
00:43:34,170 --> 00:43:38,580
this kind of board level control that

936
00:43:36,630 --> 00:43:41,370
does<font color="#E5E5E5"> power sequencing that does power</font>

937
00:43:38,580 --> 00:43:42,540
button control LEDs fans those kind of

938
00:43:41,370 --> 00:43:45,480
things<font color="#CCCCCC"> because that's what it</font><font color="#E5E5E5"> was</font>

939
00:43:42,540 --> 00:43:47,700
<font color="#E5E5E5">designed for right</font><font color="#CCCCCC"> I mean other artosis</font>

940
00:43:45,480 --> 00:43:49,890
<font color="#CCCCCC">that like let you create tasks at</font>

941
00:43:47,700 --> 00:43:52,470
<font color="#E5E5E5">runtime for example might</font><font color="#CCCCCC"> be more</font>

942
00:43:49,890 --> 00:43:54,240
generic<font color="#CCCCCC"> than chromium</font><font color="#E5E5E5"> AC that one just</font>

943
00:43:52,470 --> 00:43:57,120
worked really<font color="#CCCCCC"> well from</font><font color="#E5E5E5"> a use case where</font>

944
00:43:54,240 --> 00:44:13,979
I basically<font color="#E5E5E5"> built a Franklin Chromebook</font>

945
00:43:57,120 --> 00:44:17,609
but yes<font color="#E5E5E5"> okay so and if you buy a</font>

946
00:44:13,980 --> 00:44:20,810
Chromebook<font color="#E5E5E5"> they have a microcontroller</font>

947
00:44:17,610 --> 00:44:24,120
on<font color="#CCCCCC"> their cortex-m zero and</font><font color="#E5E5E5"> four or</font>

948
00:44:20,810 --> 00:44:26,430
<font color="#E5E5E5">nordic there's a bunch of them and it's</font>

949
00:44:24,120 --> 00:44:29,190
<font color="#E5E5E5">the</font><font color="#CCCCCC"> firmware that</font><font color="#E5E5E5"> runs on</font><font color="#CCCCCC"> their two to</font>

950
00:44:26,430 --> 00:44:31,020
do power sequencing the thing that's on

951
00:44:29,190 --> 00:44:33,570
when<font color="#E5E5E5"> everything else is off so when you</font>

952
00:44:31,020 --> 00:44:35,970
<font color="#CCCCCC">open</font><font color="#E5E5E5"> your laptop to turn everything on</font>

953
00:44:33,570 --> 00:44:38,250
again those kind of things<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that it's</font>

954
00:44:35,970 --> 00:44:38,759
an it's<font color="#E5E5E5"> open source</font><font color="#CCCCCC"> google open source</font>

955
00:44:38,250 --> 00:44:42,359
<font color="#CCCCCC">did and</font>

956
00:44:38,760 --> 00:44:42,359
[Music]

957
00:44:44,990 --> 00:44:58,759
yes how would<font color="#CCCCCC"> I make sure</font><font color="#E5E5E5"> that no low</font>

958
00:44:55,290 --> 00:45:01,140
priority<font color="#CCCCCC"> task</font><font color="#E5E5E5"> I didn't get the last part</font>

959
00:44:58,760 --> 00:45:04,380
<font color="#CCCCCC">that is a very good point I thought</font>

960
00:45:01,140 --> 00:45:06,600
<font color="#E5E5E5">about that too</font><font color="#CCCCCC"> there's also the case the</font>

961
00:45:04,380 --> 00:45:08,790
opposite case where what happens if I

962
00:45:06,600 --> 00:45:10,950
end<font color="#E5E5E5"> up in a wild</font><font color="#CCCCCC"> one in</font><font color="#E5E5E5"> my high priority</font>

963
00:45:08,790 --> 00:45:13,740
task so the scheduler<font color="#E5E5E5"> is definitely not</font>

964
00:45:10,950 --> 00:45:16,259
smart enough<font color="#CCCCCC"> to to</font><font color="#E5E5E5"> sort of keep</font><font color="#CCCCCC"> track of</font>

965
00:45:13,740 --> 00:45:18,149
run times of tasks<font color="#E5E5E5"> and then then say</font>

966
00:45:16,260 --> 00:45:20,760
like oh that<font color="#CCCCCC"> guy's</font><font color="#E5E5E5"> running all the time</font>

967
00:45:18,150 --> 00:45:27,290
my low priority task is starving or the

968
00:45:20,760 --> 00:45:27,290
opposite<font color="#CCCCCC"> where yeah it doesn't do it</font><font color="#E5E5E5"> yes</font>

969
00:45:33,970 --> 00:45:37,319
<font color="#CCCCCC">a tracer</font>

970
00:45:43,040 --> 00:45:50,450
I haven't<font color="#E5E5E5"> looked at it</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> I mean I</font>

971
00:45:48,800 --> 00:45:53,270
mean it's not like<font color="#CCCCCC"> for</font><font color="#E5E5E5"> safety critical</font>

972
00:45:50,450 --> 00:45:56,750
<font color="#E5E5E5">things right it's for your laptop</font><font color="#CCCCCC"> sort</font>

973
00:45:53,270 --> 00:46:00,340
<font color="#E5E5E5">of Turing power on and off so you could</font>

974
00:45:56,750 --> 00:46:05,510
certainly make make put in hooks that

975
00:46:00,340 --> 00:46:08,150
sort of<font color="#E5E5E5"> trace events in there but I mean</font>

976
00:46:05,510 --> 00:46:10,760
if<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> your project</font><font color="#E5E5E5"> becomes more</font>

977
00:46:08,150 --> 00:46:13,360
<font color="#CCCCCC">safety critical you'd probably want to</font>

978
00:46:10,760 --> 00:46:16,310
look for one of<font color="#E5E5E5"> the more</font><font color="#CCCCCC"> established</font>

979
00:46:13,360 --> 00:46:21,920
artosis where where you get guarantees

980
00:46:16,310 --> 00:46:25,130
about things I mean<font color="#E5E5E5"> it has basic output</font>

981
00:46:21,920 --> 00:46:27,980
word like for event can print events

982
00:46:25,130 --> 00:46:29,810
like an interrupt<font color="#E5E5E5"> print timestamps so</font>

983
00:46:27,980 --> 00:46:31,550
that's useful<font color="#E5E5E5"> when doing</font><font color="#CCCCCC"> board bring up</font>

984
00:46:29,810 --> 00:46:34,640
or something if a power supply rail

985
00:46:31,550 --> 00:46:38,300
doesn't come up<font color="#CCCCCC"> or times out or takes</font>

986
00:46:34,640 --> 00:46:41,839
too long and<font color="#CCCCCC"> you get get sort</font><font color="#E5E5E5"> of a list</font>

987
00:46:38,300 --> 00:46:44,710
of when things happened but nothing

988
00:46:41,840 --> 00:46:44,710
<font color="#E5E5E5">safety</font><font color="#CCCCCC"> critical</font>

989
00:46:53,040 --> 00:47:08,440
<font color="#E5E5E5">all right anyone</font><font color="#CCCCCC"> else</font><font color="#E5E5E5"> okay um so with</font>

990
00:47:04,270 --> 00:47:10,509
the<font color="#E5E5E5"> Cystic the</font><font color="#CCCCCC"> Cystic this bit so</font>

991
00:47:08,440 --> 00:47:12,640
basically I didn't write that<font color="#E5E5E5"> code right</font>

992
00:47:10,510 --> 00:47:15,220
<font color="#E5E5E5">I adapted it so I used what they did</font>

993
00:47:12,640 --> 00:47:17,078
<font color="#E5E5E5">because</font><font color="#CCCCCC"> that worked I thought about</font><font color="#E5E5E5"> it</font>

994
00:47:15,220 --> 00:47:18,609
why<font color="#CCCCCC"> they don't</font><font color="#E5E5E5"> use this is take and I</font>

995
00:47:17,079 --> 00:47:22,329
think<font color="#CCCCCC"> it's because they're doing this</font>

996
00:47:18,609 --> 00:47:25,270
<font color="#E5E5E5">timer compare unit thing where you would</font>

997
00:47:22,329 --> 00:47:28,540
<font color="#E5E5E5">set the timer compared to the next</font>

998
00:47:25,270 --> 00:47:30,759
deadline<font color="#E5E5E5"> why'd you keep the timer</font>

999
00:47:28,540 --> 00:47:32,829
running continuously so that<font color="#E5E5E5"> gives you</font>

1000
00:47:30,760 --> 00:47:35,559
basically<font color="#E5E5E5"> like a continuous</font><font color="#CCCCCC"> time-based</font>

1001
00:47:32,829 --> 00:47:40,450
<font color="#E5E5E5">plus finer grained control over shorter</font>

1002
00:47:35,559 --> 00:47:42,369
deadlines<font color="#CCCCCC"> in one</font><font color="#E5E5E5"> thing I mean I made it</font>

1003
00:47:40,450 --> 00:47:45,368
run with the<font color="#E5E5E5"> Cystic also because for</font>

1004
00:47:42,369 --> 00:47:46,990
<font color="#CCCCCC">free testing purposes and to make sure I</font>

1005
00:47:45,369 --> 00:47:48,910
understand what's happening<font color="#E5E5E5"> has tripped</font>

1006
00:47:46,990 --> 00:47:51,700
out<font color="#E5E5E5"> all all the assembly files into a</font>

1007
00:47:48,910 --> 00:47:53,740
little<font color="#CCCCCC"> project and</font><font color="#E5E5E5"> just wrote a bunch of</font>

1008
00:47:51,700 --> 00:47:57,009
<font color="#E5E5E5">a</font><font color="#CCCCCC"> bunch of printf tasks that</font><font color="#E5E5E5"> would run</font>

1009
00:47:53,740 --> 00:47:58,779
<font color="#E5E5E5">in run around so you can definitely run</font>

1010
00:47:57,010 --> 00:48:00,910
it with<font color="#E5E5E5"> the system</font><font color="#CCCCCC"> but then you need</font><font color="#E5E5E5"> to</font>

1011
00:47:58,780 --> 00:48:03,730
work<font color="#CCCCCC"> around the</font><font color="#E5E5E5"> dough set it</font><font color="#CCCCCC"> to the</font>

1012
00:48:00,910 --> 00:48:06,339
closest<font color="#E5E5E5"> deadline thing unless you're</font>

1013
00:48:03,730 --> 00:48:10,049
okay<font color="#CCCCCC"> with with basically only getting it</font>

1014
00:48:06,339 --> 00:48:12,609
with complete<font color="#E5E5E5"> Cystic cycle accuracy so</font>

1015
00:48:10,049 --> 00:48:16,690
with the deadline thing you can switch

1016
00:48:12,609 --> 00:48:22,380
tasks faster<font color="#E5E5E5"> and also have a long have</font>

1017
00:48:16,690 --> 00:48:25,380
the long<font color="#CCCCCC"> wraparound</font><font color="#E5E5E5"> take going so yeah</font>

1018
00:48:22,380 --> 00:48:25,380
yes

1019
00:48:25,950 --> 00:48:29,060
[Music]

1020
00:48:29,620 --> 00:48:35,170
there's more for the scheduler<font color="#E5E5E5"> itself I</font>

1021
00:48:33,160 --> 00:48:38,620
think<font color="#CCCCCC"> does exactly the same</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> I</font>

1022
00:48:35,170 --> 00:48:40,210
think the stacking and unstacking would

1023
00:48:38,620 --> 00:48:42,310
look different because<font color="#E5E5E5"> you might have to</font>

1024
00:48:40,210 --> 00:48:50,280
<font color="#CCCCCC">take care of floating-point</font><font color="#E5E5E5"> registers</font><font color="#CCCCCC"> or</font>

1025
00:48:42,310 --> 00:48:52,750
something like<font color="#E5E5E5"> that but yeah all right</font><font color="#CCCCCC"> I</font>

1026
00:48:50,280 --> 00:48:54,810
think<font color="#E5E5E5"> that's it</font><font color="#CCCCCC"> if there's no more</font>

1027
00:48:52,750 --> 00:48:54,810
<font color="#E5E5E5">questions</font>

