1
00:00:08,350 --> 00:00:12,440
thank you very<font color="#E5E5E5"> much so my name is</font><font color="#CCCCCC"> pascal</font>

2
00:00:10,820 --> 00:00:15,770
<font color="#E5E5E5">scott</font><font color="#CCCCCC"> michael stanza what he told me is</font>

3
00:00:12,440 --> 00:00:18,920
is that<font color="#CCCCCC"> that was</font><font color="#E5E5E5"> the best rated rejected</font>

4
00:00:15,770 --> 00:00:24,740
<font color="#E5E5E5">talking</font><font color="#CCCCCC"> arm the worst rated accepted</font>

5
00:00:18,920 --> 00:00:27,020
toward not sure what's better um so this

6
00:00:24,740 --> 00:00:29,869
<font color="#CCCCCC">is a talk about a prep which is</font><font color="#E5E5E5"> a tool</font>

7
00:00:27,020 --> 00:00:33,200
that<font color="#E5E5E5"> we have developed at</font><font color="#CCCCCC"> imac</font><font color="#E5E5E5"> this is a</font>

8
00:00:29,870 --> 00:00:35,149
work together with charlotte<font color="#E5E5E5"> lzl</font><font color="#CCCCCC"> you may</font>

9
00:00:33,200 --> 00:00:37,880
not know what<font color="#CCCCCC"> i make is so i make is a</font>

10
00:00:35,149 --> 00:00:40,010
research<font color="#E5E5E5"> center with headquarters in</font>

11
00:00:37,880 --> 00:00:42,530
<font color="#CCCCCC">Leuven</font><font color="#E5E5E5"> that's depending on the time of</font>

12
00:00:40,010 --> 00:00:45,230
day<font color="#CCCCCC"> twenty minutes to two hours away</font>

13
00:00:42,530 --> 00:00:47,900
from<font color="#E5E5E5"> brussels and we have lots of</font>

14
00:00:45,230 --> 00:00:49,578
different<font color="#E5E5E5"> spots all over the world</font><font color="#CCCCCC"> since</font>

15
00:00:47,900 --> 00:00:51,530
more than<font color="#CCCCCC"> thirty years we've been</font>

16
00:00:49,579 --> 00:00:53,060
<font color="#E5E5E5">working</font><font color="#CCCCCC"> on micro electronics and nano</font>

17
00:00:51,530 --> 00:00:56,899
electronics research so we're primarily

18
00:00:53,060 --> 00:00:59,840
<font color="#E5E5E5">a hardware research facility and if you</font>

19
00:00:56,899 --> 00:01:01,960
have smart<font color="#E5E5E5"> phones or computers or TVs</font>

20
00:00:59,840 --> 00:01:06,110
<font color="#E5E5E5">then</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> hardware in there that was</font>

21
00:01:01,960 --> 00:01:08,390
<font color="#CCCCCC">invented here in</font><font color="#E5E5E5"> belgium at</font><font color="#CCCCCC"> imac</font><font color="#E5E5E5"> so we</font>

22
00:01:06,110 --> 00:01:11,390
are working<font color="#E5E5E5"> with the big names in the</font>

23
00:01:08,390 --> 00:01:14,360
<font color="#CCCCCC">industry</font><font color="#E5E5E5"> like Intel Samsung DMS C and so</font>

24
00:01:11,390 --> 00:01:16,130
on so<font color="#E5E5E5"> that's what</font><font color="#CCCCCC"> emic is but we're also</font>

25
00:01:14,360 --> 00:01:17,690
doing<font color="#E5E5E5"> software research because we're</font>

26
00:01:16,130 --> 00:01:19,429
realizing that<font color="#E5E5E5"> more and more</font><font color="#CCCCCC"> it becomes</font>

27
00:01:17,690 --> 00:01:22,270
<font color="#E5E5E5">important</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> software and hardware</font>

28
00:01:19,430 --> 00:01:24,950
close together and this particular

29
00:01:22,270 --> 00:01:27,949
research so here<font color="#CCCCCC"> the some of</font><font color="#E5E5E5"> the names</font>

30
00:01:24,950 --> 00:01:29,900
that<font color="#E5E5E5"> I make is collaborating</font><font color="#CCCCCC"> with and</font>

31
00:01:27,950 --> 00:01:31,970
this particular research has been done

32
00:01:29,900 --> 00:01:33,320
together with Intel and Johnson which

33
00:01:31,970 --> 00:01:37,369
<font color="#E5E5E5">you're probably</font><font color="#CCCCCC"> not seeing</font><font color="#E5E5E5"> because it's</font>

34
00:01:33,320 --> 00:01:39,619
a bit blurred<font color="#E5E5E5"> okay so this is about DNA</font>

35
00:01:37,369 --> 00:01:41,270
<font color="#E5E5E5">sequencing so I will give a little bit</font>

36
00:01:39,619 --> 00:01:43,729
<font color="#E5E5E5">of background what</font><font color="#CCCCCC"> DNA sequencing is</font>

37
00:01:41,270 --> 00:01:45,350
actually about so DNA sequencing means

38
00:01:43,729 --> 00:01:47,479
when you<font color="#E5E5E5"> take a blood</font><font color="#CCCCCC"> sample so</font><font color="#E5E5E5"> real</font>

39
00:01:45,350 --> 00:01:49,610
blood samples or other tissue samples

40
00:01:47,479 --> 00:01:52,220
<font color="#E5E5E5">you can put them in a DNA sequencing</font>

41
00:01:49,610 --> 00:01:55,490
machine<font color="#CCCCCC"> like you want you see at the top</font>

42
00:01:52,220 --> 00:01:58,220
<font color="#CCCCCC">right corner</font><font color="#E5E5E5"> and what this does is it</font>

43
00:01:55,490 --> 00:02:01,189
apply some chemical processes turns it

44
00:01:58,220 --> 00:02:03,890
into smaller<font color="#CCCCCC"> fragments and spits out</font>

45
00:02:01,189 --> 00:02:05,990
these fragments which are weeds<font color="#E5E5E5"> while</font>

46
00:02:03,890 --> 00:02:08,299
doing it<font color="#E5E5E5"> and makes mistakes so these are</font>

47
00:02:05,990 --> 00:02:10,669
not 100%<font color="#CCCCCC"> accurate</font><font color="#E5E5E5"> so that's why you need</font>

48
00:02:08,299 --> 00:02:12,020
<font color="#CCCCCC">to do a multiple coverage so</font><font color="#E5E5E5"> you can use</font>

49
00:02:10,669 --> 00:02:14,030
some statistical analysis

50
00:02:12,020 --> 00:02:16,670
to make a better<font color="#E5E5E5"> guess of what the right</font>

51
00:02:14,030 --> 00:02:19,490
color correct<font color="#E5E5E5"> read was and so out comes</font>

52
00:02:16,670 --> 00:02:21,679
<font color="#E5E5E5">some file that gives you these fragments</font>

53
00:02:19,490 --> 00:02:23,930
and then you need<font color="#E5E5E5"> to use software to</font>

54
00:02:21,680 --> 00:02:28,310
actually<font color="#E5E5E5"> do something without</font><font color="#CCCCCC"> sweets so</font>

55
00:02:23,930 --> 00:02:31,220
the sizes<font color="#E5E5E5"> here the DNA of a human is</font>

56
00:02:28,310 --> 00:02:33,890
something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> three billion letters</font><font color="#CCCCCC"> GA</font>

57
00:02:31,220 --> 00:02:35,870
<font color="#E5E5E5">T or C this is called a base pair and</font>

58
00:02:33,890 --> 00:02:38,450
these fragments had come out<font color="#CCCCCC"> of there</font>

59
00:02:35,870 --> 00:02:41,720
are in the order<font color="#E5E5E5"> of 150 base pairs per</font>

60
00:02:38,450 --> 00:02:45,410
fragment<font color="#E5E5E5"> and the data that is</font><font color="#CCCCCC"> generated</font>

61
00:02:41,720 --> 00:02:47,000
is for raw data 5220 gigabytes

62
00:02:45,410 --> 00:02:49,790
compressed when<font color="#E5E5E5"> you have a whole genome</font>

63
00:02:47,000 --> 00:02:51,740
sequencing<font color="#CCCCCC"> for exome sequencing</font><font color="#E5E5E5"> it's 5</font>

64
00:02:49,790 --> 00:02:53,630
to 15 gigabytes so that's a<font color="#CCCCCC"> quart the</font>

65
00:02:51,740 --> 00:02:55,130
<font color="#CCCCCC">order of</font><font color="#E5E5E5"> magnitude of the data that we</font>

66
00:02:53,630 --> 00:02:57,049
are<font color="#CCCCCC"> having</font><font color="#E5E5E5"> so what we're talking</font><font color="#CCCCCC"> about</font>

67
00:02:55,130 --> 00:02:59,600
is something<font color="#CCCCCC"> like hundreds</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> millions</font>

68
00:02:57,050 --> 00:03:02,840
of reads<font color="#E5E5E5"> that come out of such a machine</font>

69
00:02:59,600 --> 00:03:06,200
<font color="#E5E5E5">for one sample what we then do in the</font>

70
00:03:02,840 --> 00:03:08,180
computer<font color="#E5E5E5"> is as we do sequencing so we</font>

71
00:03:06,200 --> 00:03:10,160
have a reference<font color="#E5E5E5"> that you see on the on</font>

72
00:03:08,180 --> 00:03:12,320
the top of the screen and then we<font color="#E5E5E5"> take</font>

73
00:03:10,160 --> 00:03:14,600
<font color="#E5E5E5">these fragments that we try to match</font>

74
00:03:12,320 --> 00:03:16,640
against this reference<font color="#E5E5E5"> so we can use a</font>

75
00:03:14,600 --> 00:03:18,560
<font color="#E5E5E5">reference because we are all not so</font>

76
00:03:16,640 --> 00:03:21,140
different<font color="#E5E5E5"> from each</font><font color="#CCCCCC"> other we only have</font>

77
00:03:18,560 --> 00:03:22,700
<font color="#CCCCCC">1% difference</font><font color="#E5E5E5"> so matching these reads</font>

78
00:03:21,140 --> 00:03:24,829
against the<font color="#E5E5E5"> reference gives us a pretty</font>

79
00:03:22,700 --> 00:03:28,640
good<font color="#CCCCCC"> idea where</font><font color="#E5E5E5"> these reads are actually</font>

80
00:03:24,830 --> 00:03:30,860
from so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the first step it's</font>

81
00:03:28,640 --> 00:03:33,170
called<font color="#CCCCCC"> aligning which aligns the reach</font>

82
00:03:30,860 --> 00:03:34,700
to<font color="#CCCCCC"> a reference what you</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> want to do</font>

83
00:03:33,170 --> 00:03:37,190
is<font color="#E5E5E5"> is we want</font><font color="#CCCCCC"> to do variant calling</font>

84
00:03:34,700 --> 00:03:39,140
where we look at<font color="#E5E5E5"> each</font><font color="#CCCCCC"> position</font><font color="#E5E5E5"> and find</font>

85
00:03:37,190 --> 00:03:41,329
out what the difference is from<font color="#E5E5E5"> the</font>

86
00:03:39,140 --> 00:03:43,429
reference and what we have<font color="#E5E5E5"> here as an</font>

87
00:03:41,330 --> 00:03:45,650
example is<font color="#CCCCCC"> this</font><font color="#E5E5E5"> that we here we have a</font>

88
00:03:43,430 --> 00:03:48,430
position where half the reads have an A

89
00:03:45,650 --> 00:03:52,660
and the other read other half have a<font color="#E5E5E5"> T</font>

90
00:03:48,430 --> 00:03:54,800
which<font color="#E5E5E5"> means it's a heterozygous snip</font><font color="#CCCCCC"> a T</font>

91
00:03:52,660 --> 00:03:57,829
<font color="#CCCCCC">you don't need to understand what it</font><font color="#E5E5E5"> is</font>

92
00:03:54,800 --> 00:04:00,110
I also don't but it probably<font color="#CCCCCC"> means that</font>

93
00:03:57,830 --> 00:04:04,070
<font color="#E5E5E5">half of these you got from your father</font>

94
00:04:00,110 --> 00:04:06,680
<font color="#CCCCCC">the</font><font color="#E5E5E5"> other half of your mother</font><font color="#CCCCCC"> so that's</font>

95
00:04:04,070 --> 00:04:08,359
what you typically do in<font color="#E5E5E5"> software there</font>

96
00:04:06,680 --> 00:04:10,160
<font color="#CCCCCC">are the sequencing pipelines which</font>

97
00:04:08,360 --> 00:04:12,740
typically<font color="#E5E5E5"> can consist of several</font>

98
00:04:10,160 --> 00:04:14,260
computational phases<font color="#E5E5E5"> I talked about the</font>

99
00:04:12,740 --> 00:04:16,760
mapping which you see on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> top</font><font color="#CCCCCC"> left</font>

100
00:04:14,260 --> 00:04:18,019
<font color="#CCCCCC">here is talked about</font><font color="#E5E5E5"> the variant calling</font>

101
00:04:16,760 --> 00:04:20,539
which you see on the top<font color="#CCCCCC"> right and</font>

102
00:04:18,019 --> 00:04:22,400
there's also some processing of<font color="#E5E5E5"> BAM</font>

103
00:04:20,540 --> 00:04:23,600
files which are<font color="#E5E5E5"> intermediate files that</font>

104
00:04:22,400 --> 00:04:26,450
are passed around<font color="#E5E5E5"> these</font>

105
00:04:23,600 --> 00:04:27,920
<font color="#CCCCCC">- its</font><font color="#E5E5E5"> these sequencing pipelines tend to</font>

106
00:04:26,450 --> 00:04:32,300
take very<font color="#E5E5E5"> long we're talking about</font>

107
00:04:27,920 --> 00:04:35,570
several<font color="#E5E5E5"> days of computation and yeah we</font>

108
00:04:32,300 --> 00:04:37,550
use<font color="#E5E5E5"> certain file formats and so on so</font>

109
00:04:35,570 --> 00:04:40,310
one of the things that we did with<font color="#CCCCCC"> ell</font>

110
00:04:37,550 --> 00:04:42,590
prep<font color="#CCCCCC"> is this we focused on can we go</font>

111
00:04:40,310 --> 00:04:44,930
<font color="#E5E5E5">back we focus on the middle phase the</font>

112
00:04:42,590 --> 00:04:48,729
band processing phase which also<font color="#E5E5E5"> takes a</font>

113
00:04:44,930 --> 00:04:50,810
huge amount<font color="#CCCCCC"> of time but needs less</font>

114
00:04:48,730 --> 00:04:52,550
<font color="#E5E5E5">domain knowledge than the other phases</font>

115
00:04:50,810 --> 00:04:55,010
and<font color="#E5E5E5"> that was for our customer very</font>

116
00:04:52,550 --> 00:04:56,780
important thing so we looked<font color="#E5E5E5"> at the band</font>

117
00:04:55,010 --> 00:04:58,849
processing and got a band processing

118
00:04:56,780 --> 00:05:01,729
<font color="#E5E5E5">it's again you have these several tools</font>

119
00:04:58,850 --> 00:05:04,730
that<font color="#CCCCCC"> all do certain simple steps like</font>

120
00:05:01,730 --> 00:05:07,070
<font color="#E5E5E5">removing certain of certain reads that</font>

121
00:05:04,730 --> 00:05:09,350
were not that we were not able to<font color="#E5E5E5"> map</font><font color="#CCCCCC"> to</font>

122
00:05:07,070 --> 00:05:12,650
<font color="#E5E5E5">the reference sorting them in certain</font>

123
00:05:09,350 --> 00:05:14,860
<font color="#CCCCCC">ways this</font><font color="#E5E5E5"> is very loud</font>

124
00:05:12,650 --> 00:05:17,120
<font color="#E5E5E5">certainly insulting in certain ways</font>

125
00:05:14,860 --> 00:05:18,590
removing duplicates<font color="#CCCCCC"> because this machine</font>

126
00:05:17,120 --> 00:05:22,280
<font color="#CCCCCC">made these machines may</font><font color="#E5E5E5"> produce</font>

127
00:05:18,590 --> 00:05:23,840
duplicates and so on<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is organized</font>

128
00:05:22,280 --> 00:05:26,210
in such a way<font color="#CCCCCC"> that each of</font><font color="#E5E5E5"> these tools</font>

129
00:05:23,840 --> 00:05:28,400
gets an<font color="#E5E5E5"> input file does it so</font>

130
00:05:26,210 --> 00:05:31,580
computation produces an output file and

131
00:05:28,400 --> 00:05:33,340
passes it<font color="#E5E5E5"> on to the next and</font><font color="#CCCCCC"> so what we</font>

132
00:05:31,580 --> 00:05:36,530
thought is<font color="#CCCCCC"> ok we can do</font><font color="#E5E5E5"> better than that</font>

133
00:05:33,340 --> 00:05:38,869
<font color="#CCCCCC">why</font><font color="#E5E5E5"> don't we just produce a single tool</font>

134
00:05:36,530 --> 00:05:40,520
which is<font color="#E5E5E5"> called</font><font color="#CCCCCC"> L prep where you can</font>

135
00:05:38,870 --> 00:05:42,590
just<font color="#E5E5E5"> tell the tool here are all the</font>

136
00:05:40,520 --> 00:05:45,760
<font color="#E5E5E5">steps that we want to execute</font><font color="#CCCCCC"> take</font>

137
00:05:42,590 --> 00:05:48,940
please do this in one turn in one<font color="#CCCCCC"> go</font><font color="#E5E5E5"> and</font>

138
00:05:45,760 --> 00:05:52,070
so this<font color="#E5E5E5"> allows us</font><font color="#CCCCCC"> to do the file i/o</font>

139
00:05:48,940 --> 00:05:55,280
only once for the whole<font color="#CCCCCC"> input and</font><font color="#E5E5E5"> do the</font>

140
00:05:52,070 --> 00:05:57,590
file output<font color="#CCCCCC"> also only</font><font color="#E5E5E5"> once and then when</font>

141
00:05:55,280 --> 00:05:59,989
we have the<font color="#CCCCCC"> data</font><font color="#E5E5E5"> inside</font><font color="#CCCCCC"> the tool we can</font>

142
00:05:57,590 --> 00:06:02,150
use multi-threading and clever<font color="#E5E5E5"> loop</font>

143
00:05:59,990 --> 00:06:05,720
fusion techniques to really<font color="#CCCCCC"> make this</font>

144
00:06:02,150 --> 00:06:06,979
much<font color="#CCCCCC"> faster so I'm not</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to go</font><font color="#E5E5E5"> into</font>

145
00:06:05,720 --> 00:06:09,290
the details how the<font color="#E5E5E5"> software</font>

146
00:06:06,980 --> 00:06:12,170
architecture<font color="#E5E5E5"> works and how we got this</font>

147
00:06:09,290 --> 00:06:15,020
faster<font color="#E5E5E5"> but the result is depicted here</font>

148
00:06:12,170 --> 00:06:16,760
<font color="#E5E5E5">this is for whole exome</font><font color="#CCCCCC"> sequencing for</font><font color="#E5E5E5"> a</font>

149
00:06:15,020 --> 00:06:19,039
standard data set<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is known in the</font>

150
00:06:16,760 --> 00:06:21,710
bioinformatics<font color="#E5E5E5"> community if we take</font>

151
00:06:19,040 --> 00:06:24,290
<font color="#CCCCCC">Picard Sam tools that's the top line</font>

152
00:06:21,710 --> 00:06:26,780
<font color="#E5E5E5">this takes about one</font><font color="#CCCCCC"> hour</font><font color="#E5E5E5"> and 40 minutes</font>

153
00:06:24,290 --> 00:06:28,700
for this data<font color="#E5E5E5"> set it's five steps so you</font>

154
00:06:26,780 --> 00:06:31,549
see these five<font color="#E5E5E5"> steps in different colors</font>

155
00:06:28,700 --> 00:06:34,580
<font color="#CCCCCC">we could use L prep in such a way that</font>

156
00:06:31,550 --> 00:06:36,439
<font color="#E5E5E5">we also call</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> four separate steps and</font>

157
00:06:34,580 --> 00:06:38,419
for some of these<font color="#CCCCCC"> phases</font><font color="#E5E5E5"> out</font>

158
00:06:36,439 --> 00:06:40,729
<font color="#E5E5E5">a bit faster</font><font color="#CCCCCC"> for some it's a bit slower</font>

159
00:06:38,419 --> 00:06:43,219
<font color="#E5E5E5">but the really</font><font color="#CCCCCC"> interesting part is is if</font>

160
00:06:40,729 --> 00:06:46,128
we do all five<font color="#E5E5E5"> steps with one single</font>

161
00:06:43,219 --> 00:06:48,289
invocation<font color="#E5E5E5"> then we can reduce it</font><font color="#CCCCCC"> down to</font>

162
00:06:46,129 --> 00:06:50,300
<font color="#E5E5E5">20</font><font color="#CCCCCC"> minutes</font><font color="#E5E5E5"> and there is a mode where we</font>

163
00:06:48,289 --> 00:06:52,429
can tell<font color="#E5E5E5"> a drop please use all the RAM</font>

164
00:06:50,300 --> 00:06:54,949
available to you and<font color="#E5E5E5"> then we can even</font>

165
00:06:52,429 --> 00:06:57,589
cut it<font color="#E5E5E5"> further down down to 11 minutes</font>

166
00:06:54,949 --> 00:06:59,629
<font color="#E5E5E5">which makes it 10 times faster and</font><font color="#CCCCCC"> 10</font>

167
00:06:57,589 --> 00:07:02,539
times faster for<font color="#E5E5E5"> such a pipeline is a</font>

168
00:06:59,629 --> 00:07:04,039
huge win<font color="#CCCCCC"> so Y Anson for example the</font>

169
00:07:02,539 --> 00:07:05,688
pharmaceutical company<font color="#CCCCCC"> that we're</font>

170
00:07:04,039 --> 00:07:08,748
working<font color="#E5E5E5"> with is now using this as a</font>

171
00:07:05,689 --> 00:07:11,229
standard tool that can go to Amazon Web

172
00:07:08,749 --> 00:07:14,059
Services<font color="#E5E5E5"> they need to rent a bigger</font>

173
00:07:11,229 --> 00:07:16,008
instance because<font color="#CCCCCC"> we need more</font><font color="#E5E5E5"> RAM we</font>

174
00:07:14,059 --> 00:07:18,110
need more<font color="#E5E5E5"> compute power</font><font color="#CCCCCC"> but overall</font>

175
00:07:16,009 --> 00:07:22,039
they're saving<font color="#E5E5E5"> money because</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is so</font>

176
00:07:18,110 --> 00:07:24,019
<font color="#E5E5E5">much faster so that's interesting so now</font>

177
00:07:22,039 --> 00:07:26,619
this is<font color="#E5E5E5"> what</font><font color="#CCCCCC"> L prep is about so</font><font color="#E5E5E5"> now a</font>

178
00:07:24,019 --> 00:07:29,029
bit about<font color="#CCCCCC"> the</font><font color="#E5E5E5"> history of</font><font color="#CCCCCC"> Ella prep</font>

179
00:07:26,619 --> 00:07:30,800
originally this<font color="#E5E5E5"> was implemented Bachelet</font>

180
00:07:29,029 --> 00:07:34,699
<font color="#CCCCCC">has a</font><font color="#E5E5E5"> who's also sitting here in the</font>

181
00:07:30,800 --> 00:07:36,259
audience<font color="#CCCCCC"> with help</font><font color="#E5E5E5"> from me and we did</font>

182
00:07:34,699 --> 00:07:38,449
this<font color="#CCCCCC"> in common list because our common</font>

183
00:07:36,259 --> 00:07:40,579
<font color="#E5E5E5">list is an excellent tool to very</font>

184
00:07:38,449 --> 00:07:42,800
quickly get a result when you<font color="#E5E5E5"> don't know</font>

185
00:07:40,579 --> 00:07:44,899
what you're doing and get<font color="#CCCCCC"> to a</font>

186
00:07:42,800 --> 00:07:47,419
production<font color="#E5E5E5"> version</font><font color="#CCCCCC"> so this was a</font><font color="#E5E5E5"> very</font>

187
00:07:44,899 --> 00:07:49,399
<font color="#E5E5E5">good</font><font color="#CCCCCC"> experience</font><font color="#E5E5E5"> we did six months</font><font color="#CCCCCC"> of</font>

188
00:07:47,419 --> 00:07:51,558
<font color="#E5E5E5">development time with lots of different</font>

189
00:07:49,399 --> 00:07:56,659
design changes along the<font color="#CCCCCC"> way and got to</font>

190
00:07:51,559 --> 00:07:59,149
a pretty stable result however now that

191
00:07:56,659 --> 00:08:01,550
<font color="#CCCCCC">we have this in production we ran</font><font color="#E5E5E5"> across</font>

192
00:07:59,149 --> 00:08:03,409
some issues and one<font color="#E5E5E5"> of the major</font><font color="#CCCCCC"> issues</font>

193
00:08:01,550 --> 00:08:05,659
that<font color="#E5E5E5"> we have problems with is the memory</font>

194
00:08:03,409 --> 00:08:08,509
management<font color="#E5E5E5"> so the memory management is a</font>

195
00:08:05,659 --> 00:08:09,889
key<font color="#CCCCCC"> performance issue in</font><font color="#E5E5E5"> L prep and the</font>

196
00:08:08,509 --> 00:08:11,269
problem is is that<font color="#CCCCCC"> all</font><font color="#E5E5E5"> communist</font>

197
00:08:09,889 --> 00:08:13,969
implementations that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> aware of</font>

198
00:08:11,269 --> 00:08:15,679
<font color="#E5E5E5">user stop the world garbage collector so</font>

199
00:08:13,969 --> 00:08:18,169
when there's garbage<font color="#E5E5E5"> collector kicks in</font>

200
00:08:15,679 --> 00:08:20,869
all<font color="#CCCCCC"> threats</font><font color="#E5E5E5"> running at the same time are</font>

201
00:08:18,169 --> 00:08:22,878
stopped and the garbage collector itself

202
00:08:20,869 --> 00:08:26,059
<font color="#E5E5E5">a sequential doesn't use any multiple</font>

203
00:08:22,879 --> 00:08:28,699
threats<font color="#CCCCCC"> so it's extremely slow and costs</font>

204
00:08:26,059 --> 00:08:30,709
us a<font color="#E5E5E5"> lot of time so Charlotte is smart</font>

205
00:08:28,699 --> 00:08:32,599
<font color="#E5E5E5">she was</font><font color="#CCCCCC"> able to trick the garbage</font>

206
00:08:30,709 --> 00:08:34,129
collector into making<font color="#E5E5E5"> sure</font><font color="#CCCCCC"> that it</font>

207
00:08:32,599 --> 00:08:36,500
doesn't interface with our<font color="#E5E5E5"> parallel</font>

208
00:08:34,129 --> 00:08:39,319
faces so it doesn't hurt us that much in

209
00:08:36,500 --> 00:08:41,839
production but the code the<font color="#CCCCCC"> way to do</font>

210
00:08:39,318 --> 00:08:44,208
this is<font color="#CCCCCC"> not intuitive the code becomes</font>

211
00:08:41,839 --> 00:08:46,339
uglier<font color="#CCCCCC"> we have to put a lot of effort</font>

212
00:08:44,208 --> 00:08:46,949
into<font color="#CCCCCC"> our</font><font color="#E5E5E5"> probe to reuse memory wherever</font>

213
00:08:46,339 --> 00:08:48,870
we can

214
00:08:46,950 --> 00:08:52,260
and it's not<font color="#E5E5E5"> beautiful code anymore in</font>

215
00:08:48,870 --> 00:08:58,620
the end which is<font color="#E5E5E5"> pity so the question</font>

216
00:08:52,260 --> 00:09:01,350
that<font color="#E5E5E5"> we are</font><font color="#CCCCCC"> asking ourselves is</font><font color="#E5E5E5"> did we</font>

217
00:08:58,620 --> 00:09:02,910
achieve the best result possible<font color="#CCCCCC"> and is</font>

218
00:09:01,350 --> 00:09:04,830
there an easier way<font color="#CCCCCC"> to achieve the</font><font color="#E5E5E5"> same</font>

219
00:09:02,910 --> 00:09:06,870
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> yes there are easier known</font>

220
00:09:04,830 --> 00:09:09,300
things you can<font color="#E5E5E5"> use a</font><font color="#CCCCCC"> parallel concurrent</font>

221
00:09:06,870 --> 00:09:11,850
garbage collector<font color="#CCCCCC"> which is a known known</font>

222
00:09:09,300 --> 00:09:13,800
approach or you can use reference<font color="#CCCCCC"> County</font>

223
00:09:11,850 --> 00:09:16,140
which is<font color="#CCCCCC"> also a known approach which</font>

224
00:09:13,800 --> 00:09:19,140
both<font color="#E5E5E5"> promise to work better with</font>

225
00:09:16,140 --> 00:09:20,910
multi-threaded programs<font color="#E5E5E5"> so the problem</font>

226
00:09:19,140 --> 00:09:22,470
is though we can't do this<font color="#E5E5E5"> in</font><font color="#CCCCCC"> cominis</font>

227
00:09:20,910 --> 00:09:23,850
because it requires<font color="#CCCCCC"> support from the</font>

228
00:09:22,470 --> 00:09:26,040
programming<font color="#CCCCCC"> language</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> its</font>

229
00:09:23,850 --> 00:09:29,220
<font color="#CCCCCC">runtime</font><font color="#E5E5E5"> system so we had to look at</font>

230
00:09:26,040 --> 00:09:31,199
other programming languages so

231
00:09:29,220 --> 00:09:34,230
concurrent parallel garbage collection

232
00:09:31,200 --> 00:09:36,480
what is<font color="#E5E5E5"> this the idea of a concurrent</font>

233
00:09:34,230 --> 00:09:38,850
garbage collector is<font color="#E5E5E5"> that it doesn't</font>

234
00:09:36,480 --> 00:09:40,380
<font color="#E5E5E5">stop your main program</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> does to</font>

235
00:09:38,850 --> 00:09:44,250
interfere with<font color="#CCCCCC"> it as little</font><font color="#E5E5E5"> as possible</font>

236
00:09:40,380 --> 00:09:46,350
<font color="#E5E5E5">and runs in</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> parallel with the main</font>

237
00:09:44,250 --> 00:09:48,000
program<font color="#E5E5E5"> and the idea of a parallel</font>

238
00:09:46,350 --> 00:09:52,770
garbage collector<font color="#CCCCCC"> is that the garbage</font>

239
00:09:48,000 --> 00:09:54,600
<font color="#E5E5E5">collection itself is parallel and when</font>

240
00:09:52,770 --> 00:09:56,040
we started this experiment<font color="#E5E5E5"> that we</font>

241
00:09:54,600 --> 00:09:58,440
looked and it's beneficial<font color="#CCCCCC"> for</font>

242
00:09:56,040 --> 00:10:01,110
performance<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it determine with</font>

243
00:09:58,440 --> 00:10:04,230
them does<font color="#CCCCCC"> law</font><font color="#E5E5E5"> so when we started</font>

244
00:10:01,110 --> 00:10:06,630
experiments the mature languages that

245
00:10:04,230 --> 00:10:08,190
<font color="#E5E5E5">are known</font><font color="#CCCCCC"> to us that employ this were</font>

246
00:10:06,630 --> 00:10:11,939
Java and<font color="#CCCCCC"> go</font>

247
00:10:08,190 --> 00:10:13,620
<font color="#CCCCCC">so go introduced this</font><font color="#E5E5E5"> in 2016 and we</font>

248
00:10:11,940 --> 00:10:15,600
needed<font color="#CCCCCC"> something that</font><font color="#E5E5E5"> runs well on Linux</font>

249
00:10:13,620 --> 00:10:17,250
<font color="#E5E5E5">so these were</font><font color="#CCCCCC"> the only options that we</font>

250
00:10:15,600 --> 00:10:19,980
were aware of<font color="#CCCCCC"> that support</font><font color="#E5E5E5"> this well in</font>

251
00:10:17,250 --> 00:10:22,050
mature languages the other approach is

252
00:10:19,980 --> 00:10:24,030
reference counting<font color="#E5E5E5"> so with reference</font>

253
00:10:22,050 --> 00:10:26,880
counting sort<font color="#E5E5E5"> of having a garbage</font>

254
00:10:24,030 --> 00:10:28,860
collector<font color="#E5E5E5"> you record in every</font><font color="#CCCCCC"> object</font>

255
00:10:26,880 --> 00:10:31,830
<font color="#E5E5E5">how many pointers are pointing to it</font>

256
00:10:28,860 --> 00:10:35,190
with a count with an integer<font color="#E5E5E5"> every time</font>

257
00:10:31,830 --> 00:10:37,110
a<font color="#E5E5E5"> pointer is reassigned</font><font color="#CCCCCC"> you increment</font>

258
00:10:35,190 --> 00:10:39,840
and decrement counts among counts go to

259
00:10:37,110 --> 00:10:42,510
<font color="#CCCCCC">zero you</font><font color="#E5E5E5"> can do locate that object this</font>

260
00:10:39,840 --> 00:10:45,570
has a few downsides but normally for

261
00:10:42,510 --> 00:10:47,189
<font color="#E5E5E5">multi-threaded programs</font><font color="#CCCCCC"> the</font>

262
00:10:45,570 --> 00:10:49,590
<font color="#E5E5E5">synchronization</font><font color="#CCCCCC"> is spread</font><font color="#E5E5E5"> over the whole</font>

263
00:10:47,190 --> 00:10:51,570
program<font color="#E5E5E5"> it shouldn't interfere with your</font>

264
00:10:49,590 --> 00:10:54,200
multi multiple<font color="#E5E5E5"> threads so it should</font>

265
00:10:51,570 --> 00:10:56,670
actually play nice with multi-threading

266
00:10:54,200 --> 00:10:59,160
<font color="#CCCCCC">there are more advanced implementation</font>

267
00:10:56,670 --> 00:11:01,140
schemes where you try to avoid updating

268
00:10:59,160 --> 00:11:04,110
reference counts<font color="#E5E5E5"> but we are not</font><font color="#CCCCCC"> aware of</font>

269
00:11:01,140 --> 00:11:05,490
any mature language that does this so

270
00:11:04,110 --> 00:11:09,240
the mature languages<font color="#E5E5E5"> that we were aware</font>

271
00:11:05,490 --> 00:11:11,490
of<font color="#E5E5E5"> that</font><font color="#CCCCCC"> use reference counting our C++</font><font color="#E5E5E5"> I</font>

272
00:11:09,240 --> 00:11:13,710
don't know how to talk about<font color="#E5E5E5"> C++</font>

273
00:11:11,490 --> 00:11:17,160
<font color="#E5E5E5">languages that started with</font><font color="#CCCCCC"> eleven but</font>

274
00:11:13,710 --> 00:11:18,810
yeah<font color="#CCCCCC"> ceil</font><font color="#E5E5E5"> versus 11 14 17</font><font color="#CCCCCC"> Objective C</font>

275
00:11:17,160 --> 00:11:20,130
does reference counting Swift<font color="#CCCCCC"> does</font>

276
00:11:18,810 --> 00:11:22,229
reference counting and rust does

277
00:11:20,130 --> 00:11:24,810
reference counting but we can't<font color="#E5E5E5"> use</font>

278
00:11:22,230 --> 00:11:26,640
objective-c or Swift<font color="#E5E5E5"> because</font><font color="#CCCCCC"> they're</font>

279
00:11:24,810 --> 00:11:27,449
updates of reference counts is not

280
00:11:26,640 --> 00:11:29,610
<font color="#E5E5E5">atomic</font>

281
00:11:27,450 --> 00:11:32,310
<font color="#CCCCCC">so it's</font><font color="#E5E5E5"> not thread safe so we can't use</font>

282
00:11:29,610 --> 00:11:36,270
<font color="#CCCCCC">it in a multi-threaded program</font><font color="#E5E5E5"> and rust</font>

283
00:11:32,310 --> 00:11:38,369
<font color="#E5E5E5">is a tricky case we need for a</font>

284
00:11:36,270 --> 00:11:40,770
particular<font color="#E5E5E5"> module we</font><font color="#CCCCCC"> need atomic compare</font>

285
00:11:38,370 --> 00:11:42,630
<font color="#E5E5E5">and</font><font color="#CCCCCC"> swap</font><font color="#E5E5E5"> and atomic compare and swap is</font>

286
00:11:40,770 --> 00:11:44,850
not safe<font color="#E5E5E5"> and rust it only works on</font>

287
00:11:42,630 --> 00:11:46,560
<font color="#E5E5E5">unsafe pointers and that defeats</font><font color="#CCCCCC"> the</font>

288
00:11:44,850 --> 00:11:50,550
<font color="#CCCCCC">purpose of</font><font color="#E5E5E5"> using rust in the first place</font>

289
00:11:46,560 --> 00:11:52,979
so we didn't use rust so the

290
00:11:50,550 --> 00:11:55,589
experimental<font color="#E5E5E5"> setup I'm not going into</font>

291
00:11:52,980 --> 00:11:57,930
details this<font color="#E5E5E5"> is a standard pipeline that</font>

292
00:11:55,590 --> 00:12:01,830
goes<font color="#E5E5E5"> on a standard well known data set</font>

293
00:11:57,930 --> 00:12:03,449
it uses<font color="#E5E5E5"> five steps with the hardware</font>

294
00:12:01,830 --> 00:12:06,000
environment<font color="#E5E5E5"> there's an Intel Xeon</font>

295
00:12:03,450 --> 00:12:09,060
platform a<font color="#CCCCCC"> Broadwell platform two</font>

296
00:12:06,000 --> 00:12:11,840
<font color="#CCCCCC">sockets with 22 cores each which gives</font>

297
00:12:09,060 --> 00:12:17,130
us<font color="#E5E5E5"> 88 Hardware</font><font color="#CCCCCC"> threats</font><font color="#E5E5E5"> and we have seen</font>

298
00:12:11,840 --> 00:12:20,490
768 gigabytes of<font color="#CCCCCC"> RAM</font><font color="#E5E5E5"> and here are the</font>

299
00:12:17,130 --> 00:12:24,180
<font color="#E5E5E5">results so first the C++ result so that</font>

300
00:12:20,490 --> 00:12:26,310
<font color="#E5E5E5">uses shared pointers for reference</font>

301
00:12:24,180 --> 00:12:30,329
counting so we don't have to manually

302
00:12:26,310 --> 00:12:33,839
manage our memory we're using<font color="#CCCCCC"> G plus</font>

303
00:12:30,330 --> 00:12:36,660
plus 6.3<font color="#E5E5E5"> inter threading building blocks</font>

304
00:12:33,840 --> 00:12:40,610
for<font color="#CCCCCC"> multiples multi-threading version</font>

305
00:12:36,660 --> 00:12:44,390
4.4<font color="#E5E5E5"> and Google performance tools for</font>

306
00:12:40,610 --> 00:12:47,010
low-level<font color="#CCCCCC"> malach optimizations that</font>

307
00:12:44,390 --> 00:12:48,930
<font color="#CCCCCC">gives us the following</font><font color="#E5E5E5"> performance we</font>

308
00:12:47,010 --> 00:12:54,900
have<font color="#E5E5E5"> something like 13 minutes</font><font color="#CCCCCC"> and a</font>

309
00:12:48,930 --> 00:12:57,109
half<font color="#E5E5E5"> with 220 7.4 gigabytes of RAM so</font>

310
00:12:54,900 --> 00:13:01,380
that's the C++ result

311
00:12:57,110 --> 00:13:06,000
<font color="#E5E5E5">next comes</font><font color="#CCCCCC"> Java we</font><font color="#E5E5E5"> using the</font><font color="#CCCCCC"> JDK 1.8 at</font>

312
00:13:01,380 --> 00:13:06,930
that stage<font color="#CCCCCC"> this looks not so</font><font color="#E5E5E5"> great so we</font>

313
00:13:06,000 --> 00:13:09,540
<font color="#E5E5E5">have run times</font>

314
00:13:06,930 --> 00:13:12,660
that are better than<font color="#CCCCCC"> the C++ runtime but</font>

315
00:13:09,540 --> 00:13:14,880
<font color="#E5E5E5">at a huge cost of</font><font color="#CCCCCC"> murim</font><font color="#E5E5E5"> so we use a lot</font>

316
00:13:12,660 --> 00:13:18,149
more<font color="#E5E5E5"> RAM for the</font><font color="#CCCCCC"> parallel garbage</font>

317
00:13:14,880 --> 00:13:22,230
<font color="#E5E5E5">collector</font><font color="#CCCCCC"> it's almost 500</font><font color="#E5E5E5"> gigs for the</font>

318
00:13:18,149 --> 00:13:25,260
g1 GC<font color="#CCCCCC"> it's 360 gigs or something that is</font>

319
00:13:22,230 --> 00:13:27,420
<font color="#E5E5E5">really a lot and even the one that uses</font>

320
00:13:25,260 --> 00:13:29,339
<font color="#E5E5E5">the least amount of memory still uses a</font>

321
00:13:27,420 --> 00:13:31,529
huge amount of<font color="#CCCCCC"> memory so that's</font><font color="#E5E5E5"> not</font>

322
00:13:29,339 --> 00:13:33,959
<font color="#E5E5E5">really</font><font color="#CCCCCC"> practical</font><font color="#E5E5E5"> and that one</font><font color="#CCCCCC"> actually</font>

323
00:13:31,529 --> 00:13:35,850
takes very long and by the way<font color="#E5E5E5"> the</font>

324
00:13:33,959 --> 00:13:39,479
concurrent mark-sweep garbage collector

325
00:13:35,850 --> 00:13:42,690
is<font color="#E5E5E5"> actually deprecated in</font><font color="#CCCCCC"> java 9 so we</font>

326
00:13:39,480 --> 00:13:48,600
can't even<font color="#CCCCCC"> use that anymore and so now</font>

327
00:13:42,690 --> 00:13:49,620
<font color="#CCCCCC">drum roll</font><font color="#E5E5E5"> go 1.7 this is the result with</font>

328
00:13:48,600 --> 00:13:52,560
<font color="#E5E5E5">the default settings</font>

329
00:13:49,620 --> 00:13:54,240
no tweaks<font color="#E5E5E5"> we get 10 minutes and 20</font>

330
00:13:52,560 --> 00:13:56,699
seconds<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> faster than all the</font>

331
00:13:54,240 --> 00:13:59,339
others at an<font color="#E5E5E5"> amount of RAM that's pretty</font>

332
00:13:56,700 --> 00:14:01,649
close<font color="#E5E5E5"> to optimal also compared with the</font>

333
00:13:59,339 --> 00:14:03,570
<font color="#E5E5E5">list version so that</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> pretty</font>

334
00:14:01,649 --> 00:14:05,370
impressive<font color="#CCCCCC"> we were skeptical</font><font color="#E5E5E5"> in the</font>

335
00:14:03,570 --> 00:14:10,410
beginning but this is a really<font color="#CCCCCC"> pretty</font>

336
00:14:05,370 --> 00:14:13,200
impressive result<font color="#E5E5E5"> and for that reason</font><font color="#CCCCCC"> we</font>

337
00:14:10,410 --> 00:14:14,790
decided<font color="#CCCCCC"> that the new</font><font color="#E5E5E5"> version of</font><font color="#CCCCCC"> AB prep</font>

338
00:14:13,200 --> 00:14:18,660
which we Liddy released in September

339
00:14:14,790 --> 00:14:21,270
2017 as open source<font color="#E5E5E5"> is now implemented</font>

340
00:14:18,660 --> 00:14:24,029
in<font color="#E5E5E5"> goal it's on an</font><font color="#CCCCCC"> open source BSD</font>

341
00:14:21,270 --> 00:14:25,770
license so<font color="#E5E5E5"> it's a high performance</font><font color="#CCCCCC"> tool</font>

342
00:14:24,029 --> 00:14:27,810
for<font color="#CCCCCC"> preparing some files for variant</font>

343
00:14:25,770 --> 00:14:29,880
calling<font color="#CCCCCC"> it's a multi-threaded</font>

344
00:14:27,810 --> 00:14:32,339
<font color="#E5E5E5">application it runs entirely in RAM and</font>

345
00:14:29,880 --> 00:14:34,560
merges multiple steps to reward repeated

346
00:14:32,339 --> 00:14:37,410
file<font color="#E5E5E5"> i/o and can improve the performance</font>

347
00:14:34,560 --> 00:14:39,390
by a factor of up to<font color="#CCCCCC"> 10 times compared</font>

348
00:14:37,410 --> 00:14:42,180
<font color="#E5E5E5">to standard tools there's other</font>

349
00:14:39,390 --> 00:14:44,520
<font color="#CCCCCC">interesting things that</font><font color="#E5E5E5"> we can now do so</font>

350
00:14:42,180 --> 00:14:47,939
we<font color="#E5E5E5"> are now at adding new features to</font><font color="#CCCCCC"> l</font>

351
00:14:44,520 --> 00:14:50,370
prep but<font color="#E5E5E5"> what we also have seen now so</font>

352
00:14:47,940 --> 00:14:52,470
far the common dispersion<font color="#E5E5E5"> we basically</font>

353
00:14:50,370 --> 00:14:54,810
only<font color="#E5E5E5"> develop this</font><font color="#CCCCCC"> ourselves but we now</font>

354
00:14:52,470 --> 00:14:56,940
see some first contributions by other

355
00:14:54,810 --> 00:14:59,400
users<font color="#CCCCCC"> which is really</font><font color="#E5E5E5"> nice which is a</font>

356
00:14:56,940 --> 00:15:03,810
good sign that<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> a good</font><font color="#E5E5E5"> choice of</font>

357
00:14:59,400 --> 00:15:06,870
<font color="#CCCCCC">our</font><font color="#E5E5E5"> programming language one other thing</font>

358
00:15:03,810 --> 00:15:09,180
that<font color="#CCCCCC"> I should mention</font><font color="#E5E5E5"> is when you</font>

359
00:15:06,870 --> 00:15:11,640
<font color="#CCCCCC">compare the development</font><font color="#E5E5E5"> time and how</font>

360
00:15:09,180 --> 00:15:14,569
complicated it<font color="#E5E5E5"> was to express these</font>

361
00:15:11,640 --> 00:15:14,569
three different<font color="#E5E5E5"> versions</font>

362
00:15:14,760 --> 00:15:20,180
C++<font color="#E5E5E5"> was doing incredibly bad was a pain</font>

363
00:15:18,240 --> 00:15:23,400
<font color="#E5E5E5">to get this</font><font color="#CCCCCC"> working in the</font><font color="#E5E5E5"> first place</font>

364
00:15:20,180 --> 00:15:25,050
Java<font color="#E5E5E5"> was the easiest to Express Java was</font>

365
00:15:23,400 --> 00:15:27,420
the easiest<font color="#E5E5E5"> to</font><font color="#CCCCCC"> Express because they have</font>

366
00:15:25,050 --> 00:15:29,790
a pretty impressive<font color="#E5E5E5"> streams library</font>

367
00:15:27,420 --> 00:15:32,310
which gives use parallel streaming which

368
00:15:29,790 --> 00:15:33,839
gives<font color="#E5E5E5"> us a lot</font><font color="#CCCCCC"> of functionality that we</font>

369
00:15:32,310 --> 00:15:38,069
can use to<font color="#CCCCCC"> express this kind of</font>

370
00:15:33,840 --> 00:15:41,190
framework<font color="#CCCCCC"> because of that</font><font color="#E5E5E5"> experience</font><font color="#CCCCCC"> we</font>

371
00:15:38,070 --> 00:15:43,470
also decided<font color="#E5E5E5"> to abstract away the</font><font color="#CCCCCC"> stream</font>

372
00:15:41,190 --> 00:15:45,420
processing<font color="#E5E5E5"> that we have in</font><font color="#CCCCCC"> L prep and</font>

373
00:15:43,470 --> 00:15:47,610
make this<font color="#CCCCCC"> available as a separate</font>

374
00:15:45,420 --> 00:15:50,310
<font color="#CCCCCC">open-source library which is now called</font>

375
00:15:47,610 --> 00:15:52,620
<font color="#CCCCCC">Pargo which you can also</font><font color="#E5E5E5"> find on OS</font><font color="#CCCCCC"> bsd</font>

376
00:15:50,310 --> 00:15:54,839
license<font color="#E5E5E5"> this gives you some constructs</font>

377
00:15:52,620 --> 00:15:57,180
for parallel<font color="#CCCCCC"> programming</font><font color="#E5E5E5"> and it gives</font>

378
00:15:54,840 --> 00:15:59,850
you some prog constructs<font color="#E5E5E5"> for pipeline</font>

379
00:15:57,180 --> 00:16:02,400
processing where you can it's<font color="#CCCCCC"> not quite</font>

380
00:15:59,850 --> 00:16:05,370
as<font color="#E5E5E5"> elegant as in Java</font><font color="#CCCCCC"> because of lack of</font>

381
00:16:02,400 --> 00:16:08,280
generic types<font color="#E5E5E5"> but it's it's quite nice</font>

382
00:16:05,370 --> 00:16:09,690
<font color="#E5E5E5">in our opinion so you can use</font><font color="#CCCCCC"> that as</font>

383
00:16:08,280 --> 00:16:11,790
<font color="#E5E5E5">well and that doesn't have anything to</font>

384
00:16:09,690 --> 00:16:13,080
do with<font color="#E5E5E5"> DNA sequencing you can use this</font>

385
00:16:11,790 --> 00:16:16,650
with<font color="#CCCCCC"> any kind</font><font color="#E5E5E5"> of parallel programming</font>

386
00:16:13,080 --> 00:16:18,830
<font color="#CCCCCC">and</font><font color="#E5E5E5"> at the end of my talk thank you very</font>

387
00:16:16,650 --> 00:16:18,829
much

388
00:16:22,150 --> 00:16:35,199
<font color="#E5E5E5">I don't have any stickers but if you</font>

389
00:16:26,170 --> 00:16:36,579
have questions<font color="#CCCCCC"> I can answer them yes</font><font color="#E5E5E5"> so</font>

390
00:16:35,200 --> 00:16:41,920
the question<font color="#CCCCCC"> was</font><font color="#E5E5E5"> can we give you the</font>

391
00:16:36,580 --> 00:16:43,840
benchmarks for<font color="#E5E5E5"> the list program so the</font>

392
00:16:41,920 --> 00:16:47,110
thing is is I could give<font color="#E5E5E5"> you the best</font>

393
00:16:43,840 --> 00:16:48,580
benchmark for<font color="#E5E5E5"> the best list program but</font>

394
00:16:47,110 --> 00:16:50,830
the thing is is is<font color="#E5E5E5"> that this is not a</font>

395
00:16:48,580 --> 00:16:53,110
fair comparison<font color="#CCCCCC"> because in that version</font>

396
00:16:50,830 --> 00:16:55,510
we completely deactivate the garbage

397
00:16:53,110 --> 00:16:57,460
collector in this so it's<font color="#E5E5E5"> not a fair</font>

398
00:16:55,510 --> 00:16:59,350
<font color="#E5E5E5">comparison to those other languages</font>

399
00:16:57,460 --> 00:17:02,110
<font color="#E5E5E5">because</font><font color="#CCCCCC"> they're we do automatic memory</font>

400
00:16:59,350 --> 00:17:04,780
management<font color="#CCCCCC"> so but for the best one time</font>

401
00:17:02,110 --> 00:17:08,140
in this we<font color="#CCCCCC"> have something like nine or</font>

402
00:17:04,780 --> 00:17:10,660
<font color="#CCCCCC">nine and</font><font color="#E5E5E5"> a half minutes</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I think it</font>

403
00:17:08,140 --> 00:17:13,870
was something<font color="#CCCCCC"> a - not 20 or</font><font color="#E5E5E5"> 222</font>

404
00:17:10,660 --> 00:17:16,180
gigabytes of RAM<font color="#CCCCCC"> if you want to know</font>

405
00:17:13,869 --> 00:17:17,829
more<font color="#CCCCCC"> details we have a paper about</font><font color="#E5E5E5"> this</font>

406
00:17:16,180 --> 00:17:21,280
<font color="#CCCCCC">it was</font><font color="#E5E5E5"> published it's an open</font>

407
00:17:17,829 --> 00:17:24,159
publication<font color="#E5E5E5"> +14 for bioinformaticians</font>

408
00:17:21,280 --> 00:17:26,829
so<font color="#E5E5E5"> Charlotte had</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> paper there just</font>

409
00:17:24,160 --> 00:17:28,270
Google<font color="#CCCCCC"> 4 + 1 + el prep and</font><font color="#E5E5E5"> you will find</font>

410
00:17:26,829 --> 00:17:30,939
the paper and there's a more detailed

411
00:17:28,270 --> 00:17:33,129
<font color="#E5E5E5">breakdown of these benchmarks if you act</font>

412
00:17:30,940 --> 00:17:35,710
keep the<font color="#E5E5E5"> garbage collector running in</font>

413
00:17:33,130 --> 00:17:39,660
the dispersion<font color="#E5E5E5"> you get pretty awful</font>

414
00:17:35,710 --> 00:17:42,660
<font color="#E5E5E5">runtimes which are beyond good and evil</font>

415
00:17:39,660 --> 00:17:42,660
yes

416
00:18:00,920 --> 00:18:07,700
so we've seen some usage yeah<font color="#E5E5E5"> okay so</font>

417
00:18:05,270 --> 00:18:09,950
the<font color="#E5E5E5"> question was if we see some usage in</font>

418
00:18:07,700 --> 00:18:12,760
the<font color="#E5E5E5"> do-it-yourself bioinformatician</font>

419
00:18:09,950 --> 00:18:17,990
community<font color="#CCCCCC"> says</font><font color="#E5E5E5"> correct</font><font color="#CCCCCC"> the question</font><font color="#E5E5E5"> so</font>

420
00:18:12,760 --> 00:18:19,850
we do see some usage<font color="#CCCCCC"> I won't claim that</font>

421
00:18:17,990 --> 00:18:21,740
we<font color="#E5E5E5"> are extremely hugely popular</font>

422
00:18:19,850 --> 00:18:24,560
<font color="#E5E5E5">especially when we compare</font><font color="#CCCCCC"> ourselves to</font>

423
00:18:21,740 --> 00:18:27,770
<font color="#E5E5E5">the big big bioinformatics centers but</font>

424
00:18:24,560 --> 00:18:30,679
we do see<font color="#E5E5E5"> some users so the github</font>

425
00:18:27,770 --> 00:18:33,680
repository has<font color="#CCCCCC"> seventy seventy four</font>

426
00:18:30,680 --> 00:18:35,330
stars<font color="#CCCCCC"> which</font><font color="#E5E5E5"> is not bad I believe we have</font>

427
00:18:33,680 --> 00:18:37,600
some users at hospitals that<font color="#E5E5E5"> are</font>

428
00:18:35,330 --> 00:18:40,340
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> using</font><font color="#E5E5E5"> this in production</font>

429
00:18:37,600 --> 00:18:42,889
<font color="#CCCCCC">Johnson uses a prep worldwide for all</font>

430
00:18:40,340 --> 00:18:46,490
its sequencing<font color="#CCCCCC"> applications because of</font>

431
00:18:42,890 --> 00:18:49,250
<font color="#E5E5E5">the cost</font><font color="#CCCCCC"> reduction that they see and yes</font>

432
00:18:46,490 --> 00:18:51,230
we made very<font color="#E5E5E5"> sure in the development of</font>

433
00:18:49,250 --> 00:18:53,570
<font color="#CCCCCC">our prep that it can be used as a</font>

434
00:18:51,230 --> 00:18:55,520
<font color="#CCCCCC">plug-in replacement for the more</font>

435
00:18:53,570 --> 00:18:58,280
<font color="#E5E5E5">standard tools so we have</font><font color="#CCCCCC"> stout tools</font>

436
00:18:55,520 --> 00:19:00,230
like some tools or<font color="#CCCCCC"> picard</font><font color="#E5E5E5"> which are</font>

437
00:18:58,280 --> 00:19:03,620
<font color="#E5E5E5">pretty much regarded as the standard</font>

438
00:19:00,230 --> 00:19:05,930
tools and we made put a lot of effort

439
00:19:03,620 --> 00:19:08,239
into<font color="#E5E5E5"> making</font><font color="#CCCCCC"> sure that our tool produces</font>

440
00:19:05,930 --> 00:19:10,700
<font color="#CCCCCC">exactly the same results as those tools</font>

441
00:19:08,240 --> 00:19:12,530
so<font color="#CCCCCC"> you can just download it uses as a</font>

442
00:19:10,700 --> 00:19:17,290
<font color="#CCCCCC">plugin and save a lot of time without</font>

443
00:19:12,530 --> 00:19:17,290
<font color="#CCCCCC">prep yes</font>

444
00:19:20,150 --> 00:19:25,340
because okay the question<font color="#CCCCCC"> is</font><font color="#E5E5E5"> if you</font>

445
00:19:23,690 --> 00:19:31,130
<font color="#E5E5E5">don't need a garbage collector why do</font>

446
00:19:25,340 --> 00:19:33,020
you need one<font color="#CCCCCC"> why do you use</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> as ice</font>

447
00:19:31,130 --> 00:19:36,440
try to convey in the beginning<font color="#E5E5E5"> but</font>

448
00:19:33,020 --> 00:19:38,510
apparently not<font color="#CCCCCC"> very well once we</font>

449
00:19:36,440 --> 00:19:39,590
modified the<font color="#E5E5E5"> Lisp code in such a way</font>

450
00:19:38,510 --> 00:19:41,930
that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't need the garbage</font>

451
00:19:39,590 --> 00:19:44,629
collector anymore the code became

452
00:19:41,930 --> 00:19:47,150
<font color="#CCCCCC">actually relatively</font><font color="#E5E5E5"> ugly and relatively</font>

453
00:19:44,630 --> 00:19:49,580
hard to<font color="#E5E5E5"> follow and we experienced this</font>

454
00:19:47,150 --> 00:19:52,610
<font color="#CCCCCC">ourselves once we started to</font><font color="#E5E5E5"> try to add</font>

455
00:19:49,580 --> 00:19:54,770
<font color="#CCCCCC">new</font><font color="#E5E5E5"> features became</font><font color="#CCCCCC"> Kai quite unreal</font>

456
00:19:52,610 --> 00:19:58,459
unwieldy<font color="#E5E5E5"> - did you really do</font><font color="#CCCCCC"> this well</font>

457
00:19:54,770 --> 00:20:00,440
<font color="#E5E5E5">and that's one of the things as I said</font>

458
00:19:58,460 --> 00:20:03,110
the Java version<font color="#E5E5E5"> is the easiest to</font>

459
00:20:00,440 --> 00:20:05,210
express but<font color="#E5E5E5"> goal is also really</font><font color="#CCCCCC"> really</font>

460
00:20:03,110 --> 00:20:07,699
straightforward<font color="#CCCCCC"> especially if you as a</font>

461
00:20:05,210 --> 00:20:09,980
bioinformatician<font color="#E5E5E5"> want to just add a</font>

462
00:20:07,700 --> 00:20:11,780
filter<font color="#CCCCCC"> that expresses one</font><font color="#E5E5E5"> particular</font>

463
00:20:09,980 --> 00:20:14,480
step what should happen<font color="#CCCCCC"> to your</font><font color="#E5E5E5"> reads</font>

464
00:20:11,780 --> 00:20:17,030
<font color="#E5E5E5">this is relative very straightforward</font>

465
00:20:14,480 --> 00:20:19,520
code and we have this that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> had users</font>

466
00:20:17,030 --> 00:20:21,320
<font color="#E5E5E5">that came from the Python world</font><font color="#CCCCCC"> they</font>

467
00:20:19,520 --> 00:20:23,150
looked at<font color="#CCCCCC"> air</font><font color="#E5E5E5"> prep and they just wrote</font>

468
00:20:21,320 --> 00:20:25,010
their own filters and gave this to us

469
00:20:23,150 --> 00:20:27,440
<font color="#CCCCCC">and we just could include it straight</font>

470
00:20:25,010 --> 00:20:33,140
<font color="#CCCCCC">forward</font><font color="#E5E5E5"> and it was still as performant</font>

471
00:20:27,440 --> 00:20:35,210
as before and<font color="#E5E5E5"> you I</font><font color="#CCCCCC"> doubt even if Common</font>

472
00:20:33,140 --> 00:20:42,220
<font color="#CCCCCC">Lisp</font><font color="#E5E5E5"> were a widely popular language it</font>

473
00:20:35,210 --> 00:20:42,220
would still<font color="#CCCCCC"> be hard to do that yes</font>

474
00:20:48,510 --> 00:20:53,560
we probably<font color="#E5E5E5"> tried all</font><font color="#CCCCCC"> of them so this</font><font color="#E5E5E5"> is</font>

475
00:20:51,730 --> 00:20:56,290
a concurrent<font color="#E5E5E5"> mark-sweep which comes with</font>

476
00:20:53,560 --> 00:20:58,330
<font color="#E5E5E5">the JVM the g1 GC which comes with the</font>

477
00:20:56,290 --> 00:21:04,139
JVM and<font color="#E5E5E5"> the parallel GC these are the</font>

478
00:20:58,330 --> 00:21:04,139
three results now we didn't do tuning

479
00:21:04,980 --> 00:21:11,290
yeah but we have with what we have<font color="#E5E5E5"> as as</font>

480
00:21:09,460 --> 00:21:13,570
users in mind<font color="#E5E5E5"> as end users that are</font>

481
00:21:11,290 --> 00:21:16,030
bioinformaticians<font color="#E5E5E5"> which are not trained</font>

482
00:21:13,570 --> 00:21:18,879
computer scientists<font color="#E5E5E5"> you can't ask them</font>

483
00:21:16,030 --> 00:21:21,250
to tune<font color="#E5E5E5"> these kind of things and with go</font>

484
00:21:18,880 --> 00:21:22,870
<font color="#E5E5E5">to 1.7 with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> default setting</font><font color="#CCCCCC"> and no</font>

485
00:21:21,250 --> 00:21:25,780
tuning at all you get much better

486
00:21:22,870 --> 00:21:28,199
<font color="#CCCCCC">results so I don't</font><font color="#E5E5E5"> think it's worth the</font>

487
00:21:25,780 --> 00:21:28,200
<font color="#CCCCCC">effort</font>

488
00:21:30,060 --> 00:21:40,470
any other questions yes<font color="#CCCCCC"> we're currently</font>

489
00:21:38,050 --> 00:21:44,409
in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> process of repeating</font><font color="#E5E5E5"> the tests</font>

490
00:21:40,470 --> 00:21:49,720
<font color="#E5E5E5">with newer</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> version with Java 9 and</font>

491
00:21:44,410 --> 00:21:54,070
with the<font color="#E5E5E5"> GCC compiler version 7.2</font>

492
00:21:49,720 --> 00:21:54,820
because we have additional<font color="#CCCCCC"> ok I'm</font>

493
00:21:54,070 --> 00:21:58,689
terribly sorry

494
00:21:54,820 --> 00:22:01,750
<font color="#E5E5E5">so the question was if we are currently</font>

495
00:21:58,690 --> 00:22:05,950
<font color="#E5E5E5">trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use to do the experiments with</font>

496
00:22:01,750 --> 00:22:08,290
<font color="#CCCCCC">newer go versions yes and also you are</font>

497
00:22:05,950 --> 00:22:10,030
<font color="#E5E5E5">Java versions and also newer C++</font>

498
00:22:08,290 --> 00:22:12,670
versions because<font color="#E5E5E5"> they all add new</font>

499
00:22:10,030 --> 00:22:14,250
features<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are interesting in</font><font color="#CCCCCC"> Java it</font>

500
00:22:12,670 --> 00:22:16,840
was interesting because they added

501
00:22:14,250 --> 00:22:19,510
<font color="#E5E5E5">compacted strings where the characters</font>

502
00:22:16,840 --> 00:22:21,730
<font color="#CCCCCC">use only</font><font color="#E5E5E5"> 8 bits instead of 16 bits which</font>

503
00:22:19,510 --> 00:22:24,640
removed a lot of optimizations<font color="#CCCCCC"> that we</font>

504
00:22:21,730 --> 00:22:27,460
had to make in the Java version<font color="#CCCCCC"> and C++</font>

505
00:22:24,640 --> 00:22:29,350
also added things like any type and

506
00:22:27,460 --> 00:22:34,140
variant type which is also<font color="#E5E5E5"> interesting</font>

507
00:22:29,350 --> 00:22:34,139
to<font color="#E5E5E5"> use in this context yes</font>

508
00:22:50,600 --> 00:22:58,719
so did I understand<font color="#E5E5E5"> did I understand the</font>

509
00:22:54,230 --> 00:23:01,720
<font color="#CCCCCC">question correctly that in another talk</font>

510
00:22:58,720 --> 00:23:01,720
yeah

511
00:23:05,500 --> 00:23:10,390
<font color="#E5E5E5">okay so what you're saying is</font><font color="#CCCCCC"> there is</font>

512
00:23:08,020 --> 00:23:16,150
another garbage collector for<font color="#E5E5E5"> Java which</font>

513
00:23:10,390 --> 00:23:18,520
<font color="#CCCCCC">is called zip GGG zgc</font><font color="#E5E5E5"> which is</font>

514
00:23:16,150 --> 00:23:22,480
apparently much better and much<font color="#E5E5E5"> faster</font>

515
00:23:18,520 --> 00:23:24,520
than the current<font color="#E5E5E5"> Java collectors um I'm</font>

516
00:23:22,480 --> 00:23:26,559
<font color="#E5E5E5">not aware</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this it's not something</font>

517
00:23:24,520 --> 00:23:28,929
that's offered with the JVM as an option

518
00:23:26,559 --> 00:23:30,700
so it must be<font color="#E5E5E5"> some</font><font color="#CCCCCC"> third-party tool</font><font color="#E5E5E5"> I'm</font>

519
00:23:28,929 --> 00:23:33,309
not aware<font color="#CCCCCC"> of this we haven't had tried</font>

520
00:23:30,700 --> 00:23:36,250
this<font color="#E5E5E5"> but the thing is this is um I'm not</font>

521
00:23:33,309 --> 00:23:38,408
claiming here that goal is generally

522
00:23:36,250 --> 00:23:41,049
better no<font color="#CCCCCC"> matter what workloads you're</font>

523
00:23:38,409 --> 00:23:42,610
running<font color="#E5E5E5"> this is workload specifics for</font>

524
00:23:41,049 --> 00:23:44,830
<font color="#E5E5E5">other workloads</font><font color="#CCCCCC"> the situation will</font>

525
00:23:42,610 --> 00:23:46,090
probably be different<font color="#E5E5E5"> so I'm not</font>

526
00:23:44,830 --> 00:23:50,189
claiming that<font color="#E5E5E5"> this is a general</font>

527
00:23:46,090 --> 00:23:53,849
<font color="#CCCCCC">statement okay thank you very much again</font>

528
00:23:50,190 --> 00:23:53,849
[Applause]

