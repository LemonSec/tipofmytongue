1
00:00:04,759 --> 00:00:09,769
hello everyone and<font color="#CCCCCC"> welcome</font><font color="#E5E5E5"> to my</font>

2
00:00:07,790 --> 00:00:12,559
presentation faces the challenges<font color="#E5E5E5"> of</font>

3
00:00:09,769 --> 00:00:13,910
updating complex systems<font color="#CCCCCC"> with a subtitle</font>

4
00:00:12,559 --> 00:00:17,000
putting it all together

5
00:00:13,910 --> 00:00:19,820
well<font color="#E5E5E5"> should about me my name is Andrew</font>

6
00:00:17,000 --> 00:00:22,520
<font color="#E5E5E5">yawns I'm and</font><font color="#CCCCCC"> that a software</font><font color="#E5E5E5"> engineer</font>

7
00:00:19,820 --> 00:00:25,430
working at penguin<font color="#E5E5E5"> onyx</font>

8
00:00:22,520 --> 00:00:28,910
<font color="#E5E5E5">we're basically an embedded Linux</font>

9
00:00:25,430 --> 00:00:31,219
consultant company<font color="#E5E5E5"> and I am the co</font>

10
00:00:28,910 --> 00:00:34,070
maintainer of the<font color="#E5E5E5"> rock</font><font color="#CCCCCC"> up dating</font>

11
00:00:31,219 --> 00:00:37,610
framework so on<font color="#E5E5E5"> from the tropical bit</font>

12
00:00:34,070 --> 00:00:41,120
close<font color="#E5E5E5"> to updating</font><font color="#CCCCCC"> this is what the talk</font>

13
00:00:37,610 --> 00:00:43,400
today will be about so a bit on the

14
00:00:41,120 --> 00:00:47,230
background on the motivation<font color="#E5E5E5"> so in the</font>

15
00:00:43,400 --> 00:00:51,379
past<font color="#E5E5E5"> years we've seen green zoo of</font>

16
00:00:47,230 --> 00:00:55,760
embedded update tools like SW update

17
00:00:51,380 --> 00:00:58,940
<font color="#CCCCCC">mender or</font><font color="#E5E5E5"> rock rice and so you could</font>

18
00:00:55,760 --> 00:01:02,599
<font color="#E5E5E5">think that updating and that</font><font color="#CCCCCC"> it's system</font>

19
00:00:58,940 --> 00:01:06,320
is well ass off topic<font color="#CCCCCC"> but if you take a</font>

20
00:01:02,600 --> 00:01:10,159
closer<font color="#E5E5E5"> look at your system well there</font>

21
00:01:06,320 --> 00:01:12,369
are many<font color="#CCCCCC"> different</font><font color="#E5E5E5"> aspects many</font>

22
00:01:10,159 --> 00:01:15,439
different components<font color="#CCCCCC"> in your system</font>

23
00:01:12,369 --> 00:01:17,389
they'd not only<font color="#CCCCCC"> or live together</font>

24
00:01:15,439 --> 00:01:20,869
<font color="#E5E5E5">separately but</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> are connected</font>

25
00:01:17,389 --> 00:01:22,459
<font color="#CCCCCC">together if you're in</font><font color="#E5E5E5"> the system</font><font color="#CCCCCC"> that</font>

26
00:01:20,869 --> 00:01:25,090
has to<font color="#E5E5E5"> start your</font><font color="#CCCCCC"> application you have</font>

27
00:01:22,459 --> 00:01:28,579
maybe watch<font color="#E5E5E5"> watch talk you have to care</font>

28
00:01:25,090 --> 00:01:30,350
for<font color="#E5E5E5"> your</font><font color="#CCCCCC"> daughter during updating handle</font>

29
00:01:28,579 --> 00:01:32,719
in the bootloader<font color="#CCCCCC"> then your the</font>

30
00:01:30,350 --> 00:01:36,169
deployment server where your update

31
00:01:32,719 --> 00:01:38,658
comes from<font color="#E5E5E5"> and in the end you also want</font>

32
00:01:36,170 --> 00:01:43,789
to test this entire change on there are

33
00:01:38,659 --> 00:01:46,279
a lot of building blocks<font color="#CCCCCC"> that and that</font>

34
00:01:43,789 --> 00:01:49,009
cannot<font color="#E5E5E5"> be covered by such an</font><font color="#CCCCCC"> update</font>

35
00:01:46,279 --> 00:01:52,340
framework and<font color="#E5E5E5"> that are very custom to</font>

36
00:01:49,009 --> 00:01:57,069
your<font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> to your use case and to</font>

37
00:01:52,340 --> 00:02:00,139
what your application needs<font color="#E5E5E5"> and well</font>

38
00:01:57,069 --> 00:02:02,689
when we do with<font color="#E5E5E5"> updates</font><font color="#CCCCCC"> the bootloader</font>

39
00:02:00,139 --> 00:02:04,848
<font color="#E5E5E5">is a very critical point</font><font color="#CCCCCC"> case and most</font>

40
00:02:02,689 --> 00:02:09,619
<font color="#CCCCCC">systems</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Buddhist a single point of</font>

41
00:02:04,849 --> 00:02:11,240
failure<font color="#CCCCCC"> and now when</font><font color="#E5E5E5"> you want to start</font>

42
00:02:09,619 --> 00:02:12,459
<font color="#E5E5E5">with you boudoir grab for</font><font color="#CCCCCC"> something like</font>

43
00:02:11,240 --> 00:02:14,750
this<font color="#E5E5E5"> and</font>

44
00:02:12,459 --> 00:02:18,500
implementing<font color="#CCCCCC"> your redundant</font><font color="#E5E5E5"> system often</font>

45
00:02:14,750 --> 00:02:20,690
<font color="#CCCCCC">means</font><font color="#E5E5E5"> that you have to write</font><font color="#CCCCCC"> a script</font>

46
00:02:18,500 --> 00:02:24,230
<font color="#CCCCCC">for the bootloader that takes some</font>

47
00:02:20,690 --> 00:02:27,680
variables and<font color="#CCCCCC"> do</font><font color="#E5E5E5"> the selection of the</font>

48
00:02:24,230 --> 00:02:29,569
<font color="#CCCCCC">proper blood targets</font><font color="#E5E5E5"> so this is exactly</font>

49
00:02:27,680 --> 00:02:32,299
what we just<font color="#E5E5E5"> remove in the user space</font>

50
00:02:29,569 --> 00:02:36,290
<font color="#E5E5E5">with the update framework so why don't</font>

51
00:02:32,299 --> 00:02:39,680
we<font color="#E5E5E5"> use frameworks in the bootloader</font><font color="#CCCCCC"> too</font>

52
00:02:36,290 --> 00:02:42,019
<font color="#E5E5E5">and here's one</font><font color="#CCCCCC"> example of an</font><font color="#E5E5E5"> already</font>

53
00:02:39,680 --> 00:02:43,670
existing framework from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Box</font>

54
00:02:42,019 --> 00:02:46,280
bootloader it's called the boot choose

55
00:02:43,670 --> 00:02:50,149
of framework<font color="#E5E5E5"> well gives it a short</font>

56
00:02:46,280 --> 00:02:53,180
overview about the<font color="#E5E5E5"> structural wheel so</font>

57
00:02:50,150 --> 00:02:55,849
it has a basic algorithm that does the

58
00:02:53,180 --> 00:02:59,569
<font color="#E5E5E5">actual boot selection some configuration</font>

59
00:02:55,849 --> 00:03:01,940
to adapt it to your<font color="#E5E5E5"> systems needs and</font><font color="#CCCCCC"> a</font>

60
00:02:59,569 --> 00:03:05,238
persistent<font color="#E5E5E5"> status which stores</font>

61
00:03:01,940 --> 00:03:08,989
information about the current status of

62
00:03:05,239 --> 00:03:12,200
<font color="#CCCCCC">Sibiu</font><font color="#E5E5E5"> Chagas and if we take a deeper</font>

63
00:03:08,989 --> 00:03:15,349
look<font color="#CCCCCC"> at it the basic simplified</font>

64
00:03:12,200 --> 00:03:18,078
algorithm looks like this<font color="#E5E5E5"> we have for</font>

65
00:03:15,349 --> 00:03:21,168
each boot<font color="#CCCCCC"> target</font><font color="#E5E5E5"> two variables that</font><font color="#CCCCCC"> we</font>

66
00:03:18,079 --> 00:03:25,849
maintain<font color="#E5E5E5"> a priority and a remaining 1/10</font>

67
00:03:21,169 --> 00:03:27,680
counter and if we start our system we

68
00:03:25,849 --> 00:03:29,660
power it<font color="#E5E5E5"> on</font><font color="#CCCCCC"> and then first of</font><font color="#E5E5E5"> all check</font>

69
00:03:27,680 --> 00:03:32,180
if they were remaining<font color="#E5E5E5"> 1/10 counter for</font>

70
00:03:29,660 --> 00:03:35,000
<font color="#CCCCCC">the individual boot target is larger</font>

71
00:03:32,180 --> 00:03:37,340
than<font color="#E5E5E5"> zero if then then we choose the</font>

72
00:03:35,000 --> 00:03:38,930
boot target with the<font color="#E5E5E5"> highest priority to</font>

73
00:03:37,340 --> 00:03:41,859
preset remaining<font color="#E5E5E5"> attempts counter and</font>

74
00:03:38,930 --> 00:03:46,760
then boot<font color="#CCCCCC"> and if the booting fails</font>

75
00:03:41,859 --> 00:03:48,709
either<font color="#E5E5E5"> because we can't load see the</font>

76
00:03:46,760 --> 00:03:51,880
kernel image are because we hit a

77
00:03:48,709 --> 00:03:55,430
watchdog we said during<font color="#E5E5E5"> starting then it</font>

78
00:03:51,880 --> 00:03:59,120
ends again<font color="#CCCCCC"> in this bootloader and does</font>

79
00:03:55,430 --> 00:04:02,480
it again<font color="#CCCCCC"> and again</font><font color="#E5E5E5"> and doing this their</font>

80
00:03:59,120 --> 00:04:03,799
<font color="#CCCCCC">tenth counter decreases</font><font color="#E5E5E5"> and if the</font>

81
00:04:02,480 --> 00:04:05,450
attempt counter for one of these boot

82
00:04:03,799 --> 00:04:08,900
<font color="#CCCCCC">choice reaches zero then we switch to</font>

83
00:04:05,450 --> 00:04:11,030
the other<font color="#CCCCCC"> one and the normal case would</font>

84
00:04:08,900 --> 00:04:13,790
be<font color="#E5E5E5"> with</font><font color="#CCCCCC"> decrease the attempts counter</font>

85
00:04:11,030 --> 00:04:15,889
then moved<font color="#CCCCCC"> to our</font><font color="#E5E5E5"> running</font><font color="#CCCCCC"> system and if</font>

86
00:04:13,790 --> 00:04:17,870
we assure that<font color="#E5E5E5"> we've put a successful</font>

87
00:04:15,889 --> 00:04:20,409
ease<font color="#E5E5E5"> and we reset their remaining</font>

88
00:04:17,870 --> 00:04:22,880
attempts counter to its default value<font color="#E5E5E5"> so</font>

89
00:04:20,409 --> 00:04:24,469
<font color="#E5E5E5">this is basically what the</font><font color="#CCCCCC"> framework</font>

90
00:04:22,880 --> 00:04:26,719
<font color="#CCCCCC">provides with some country</font>

91
00:04:24,470 --> 00:04:29,540
<font color="#E5E5E5">raishin like for example</font><font color="#CCCCCC"> if you power</font><font color="#E5E5E5"> on</font>

92
00:04:26,720 --> 00:04:31,280
<font color="#E5E5E5">the system we want the year remaining</font>

93
00:04:29,540 --> 00:04:34,640
attempts<font color="#E5E5E5"> counter for all tides to be</font>

94
00:04:31,280 --> 00:04:36,830
reset<font color="#E5E5E5"> to the default values so that we</font>

95
00:04:34,640 --> 00:04:41,599
can recover our<font color="#E5E5E5"> targets by switching the</font>

96
00:04:36,830 --> 00:04:44,270
<font color="#E5E5E5">power of Iran well another example where</font>

97
00:04:41,600 --> 00:04:49,580
we<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have to implement the switching</font>

98
00:04:44,270 --> 00:04:53,570
itself is on x86<font color="#E5E5E5"> so</font><font color="#CCCCCC"> any on x86 you have</font>

99
00:04:49,580 --> 00:04:56,599
unity<font color="#E5E5E5"> in normally and there you can or</font>

100
00:04:53,570 --> 00:04:59,090
have the boot entries for each target

101
00:04:56,600 --> 00:05:01,670
you<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to boot and with it boot and</font>

102
00:04:59,090 --> 00:05:03,890
this it<font color="#E5E5E5"> is possible</font><font color="#CCCCCC"> to load the kernel</font>

103
00:05:01,670 --> 00:05:07,100
<font color="#E5E5E5">fully without an additional bootloader</font>

104
00:05:03,890 --> 00:05:10,700
just by referencing<font color="#CCCCCC"> the kernel we want</font>

105
00:05:07,100 --> 00:05:12,710
to boot and giving a root of s<font color="#E5E5E5"> argument</font>

106
00:05:10,700 --> 00:05:17,450
<font color="#E5E5E5">that references is a root</font><font color="#CCCCCC"> filesystem to</font>

107
00:05:12,710 --> 00:05:20,450
boot and then we are<font color="#E5E5E5"> able by setting</font><font color="#CCCCCC"> Z</font>

108
00:05:17,450 --> 00:05:23,300
<font color="#CCCCCC">or if you boot order</font><font color="#E5E5E5"> variable to</font>

109
00:05:20,450 --> 00:05:26,659
<font color="#E5E5E5">atomically switch the order of the</font>

110
00:05:23,300 --> 00:05:28,790
targets to<font color="#E5E5E5"> boot and also we have the</font>

111
00:05:26,660 --> 00:05:32,360
boot next<font color="#E5E5E5"> counter which is some sort of</font>

112
00:05:28,790 --> 00:05:35,690
temporary<font color="#E5E5E5"> setting into a boot target for</font>

113
00:05:32,360 --> 00:05:37,700
trying<font color="#E5E5E5"> to boot and if it's fails boots</font>

114
00:05:35,690 --> 00:05:39,530
and it's not<font color="#CCCCCC"> persisted</font><font color="#E5E5E5"> and the next</font>

115
00:05:37,700 --> 00:05:43,130
times of target reboot<font color="#CCCCCC"> we have the</font>

116
00:05:39,530 --> 00:05:45,080
original<font color="#E5E5E5"> order back so there's no inner</font>

117
00:05:43,130 --> 00:05:47,240
drama fest required no<font color="#CCCCCC"> bootloader just</font>

118
00:05:45,080 --> 00:05:51,800
Colonel Andrew the<font color="#CCCCCC"> first boot so this is</font>

119
00:05:47,240 --> 00:05:53,840
an<font color="#CCCCCC"> other option for that well</font><font color="#E5E5E5"> when</font>

120
00:05:51,800 --> 00:05:55,669
updating<font color="#E5E5E5"> is a bootloader it's often is a</font>

121
00:05:53,840 --> 00:05:58,159
single<font color="#E5E5E5"> point of failure</font><font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> have</font>

122
00:05:55,669 --> 00:06:01,520
redundant one but depending on<font color="#E5E5E5"> the</font>

123
00:05:58,160 --> 00:06:04,400
<font color="#E5E5E5">hardware that your users there are</font><font color="#CCCCCC"> some</font>

124
00:06:01,520 --> 00:06:07,010
<font color="#E5E5E5">exception one</font><font color="#CCCCCC"> example I</font><font color="#E5E5E5"> have fear is if</font>

125
00:06:04,400 --> 00:06:09,859
you use an emmc<font color="#E5E5E5"> this one has a dedicated</font>

126
00:06:07,010 --> 00:06:13,280
or two<font color="#CCCCCC"> dedicated to boot petitions so</font>

127
00:06:09,860 --> 00:06:16,100
<font color="#E5E5E5">root</font><font color="#CCCCCC"> zero and</font><font color="#E5E5E5"> third one and we take this</font>

128
00:06:13,280 --> 00:06:18,890
example<font color="#E5E5E5"> we put it with our boot loader</font>

129
00:06:16,100 --> 00:06:21,860
from<font color="#E5E5E5"> boot one starter system and if we</font>

130
00:06:18,890 --> 00:06:24,560
now want<font color="#CCCCCC"> to update</font><font color="#E5E5E5"> the bootloader we</font>

131
00:06:21,860 --> 00:06:27,410
simply write it<font color="#E5E5E5"> to the boot zero</font>

132
00:06:24,560 --> 00:06:31,470
<font color="#CCCCCC">position</font><font color="#E5E5E5"> not having switched anything in</font>

133
00:06:27,410 --> 00:06:33,810
the<font color="#E5E5E5"> X CSD which is responsible</font><font color="#CCCCCC"> for</font>

134
00:06:31,470 --> 00:06:36,570
the one code which boot petitioned to

135
00:06:33,810 --> 00:06:39,090
<font color="#E5E5E5">load and then at the very end step when</font>

136
00:06:36,570 --> 00:06:41,820
<font color="#E5E5E5">we're sure we've updated the the</font>

137
00:06:39,090 --> 00:06:46,799
<font color="#E5E5E5">bootloader successfully then we do the</font>

138
00:06:41,820 --> 00:06:49,610
atomic switch and have a<font color="#E5E5E5"> running updated</font>

139
00:06:46,800 --> 00:06:54,030
bootloader<font color="#E5E5E5"> in an atomic way</font>

140
00:06:49,610 --> 00:06:55,650
so another<font color="#CCCCCC"> become an issue</font><font color="#E5E5E5"> when starting</font>

141
00:06:54,030 --> 00:06:58,739
your updated<font color="#CCCCCC"> systems</font><font color="#E5E5E5"> something goes</font>

142
00:06:55,650 --> 00:07:01,609
wrong<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the system Hanks</font><font color="#CCCCCC"> maybe in the</font>

143
00:06:58,740 --> 00:07:05,700
kernel or<font color="#E5E5E5"> during execution of her</font>

144
00:07:01,610 --> 00:07:09,210
<font color="#CCCCCC">application so a common way to solve</font>

145
00:07:05,700 --> 00:07:12,180
<font color="#E5E5E5">site is using watchdogs of course and a</font>

146
00:07:09,210 --> 00:07:14,310
watchdog is normally triggered during

147
00:07:12,180 --> 00:07:18,660
<font color="#E5E5E5">booting so we start doing booting and</font>

148
00:07:14,310 --> 00:07:21,900
then<font color="#E5E5E5"> the camel</font><font color="#CCCCCC"> and the init system they</font>

149
00:07:18,660 --> 00:07:24,570
have<font color="#CCCCCC"> to trigger</font><font color="#E5E5E5"> the watchdog in regular</font>

150
00:07:21,900 --> 00:07:28,500
intervals<font color="#CCCCCC"> so that it's counter does not</font>

151
00:07:24,570 --> 00:07:31,800
remain<font color="#E5E5E5"> zero it does not count down to</font>

152
00:07:28,500 --> 00:07:34,580
zero<font color="#CCCCCC"> if that happens in this case shown</font>

153
00:07:31,800 --> 00:07:37,380
there when the system<font color="#E5E5E5"> Hanks then the</font>

154
00:07:34,580 --> 00:07:42,359
watchdog counter expires and the

155
00:07:37,380 --> 00:07:45,390
<font color="#CCCCCC">watchdog puts the reset of the bark and</font>

156
00:07:42,360 --> 00:07:51,560
<font color="#CCCCCC">reboots support so that we</font><font color="#E5E5E5"> don't end up</font>

157
00:07:45,390 --> 00:07:54,840
in an in an undulating system well as

158
00:07:51,560 --> 00:07:58,800
for the basic system also<font color="#E5E5E5"> our</font>

159
00:07:54,840 --> 00:08:01,349
applications might hang and we want to

160
00:07:58,800 --> 00:08:04,979
be able<font color="#CCCCCC"> to detect it and want to be able</font>

161
00:08:01,350 --> 00:08:08,370
<font color="#CCCCCC">to recover</font><font color="#E5E5E5"> from that and a nice</font><font color="#CCCCCC"> too for</font>

162
00:08:04,979 --> 00:08:11,039
<font color="#CCCCCC">this is system day watchdog system the</font>

163
00:08:08,370 --> 00:08:14,930
<font color="#CCCCCC">init system</font><font color="#E5E5E5"> that provides the watchdog</font>

164
00:08:11,040 --> 00:08:17,700
multiplexer interface so system<font color="#CCCCCC"> D itself</font>

165
00:08:14,930 --> 00:08:19,950
triggers the hardware watchdog so that

166
00:08:17,700 --> 00:08:23,250
you can be<font color="#E5E5E5"> sure that system D is running</font>

167
00:08:19,950 --> 00:08:26,520
and also for<font color="#E5E5E5"> rebooting do device it says</font>

168
00:08:23,250 --> 00:08:29,520
watchdog so that if you get stuck during

169
00:08:26,520 --> 00:08:31,890
reboot and then it provides<font color="#CCCCCC"> the software</font>

170
00:08:29,520 --> 00:08:34,079
<font color="#E5E5E5">watchdog for</font><font color="#CCCCCC"> the individual applications</font>

171
00:08:31,890 --> 00:08:37,830
that you run and for each application

172
00:08:34,080 --> 00:08:40,770
<font color="#E5E5E5">you can configure a proper interval and</font>

173
00:08:37,830 --> 00:08:43,500
then your application<font color="#CCCCCC"> has to notify</font><font color="#E5E5E5"> a</font>

174
00:08:40,770 --> 00:08:44,760
system D in<font color="#E5E5E5"> that interval</font>

175
00:08:43,500 --> 00:08:46,860
do not get reset

176
00:08:44,760 --> 00:08:49,680
and if it's not<font color="#CCCCCC"> notified then you can</font>

177
00:08:46,860 --> 00:08:52,730
select ancestry what you want to do with

178
00:08:49,680 --> 00:08:56,489
<font color="#CCCCCC">it what do</font><font color="#E5E5E5"> you want to restart it or</font>

179
00:08:52,730 --> 00:08:58,380
skip are also reboot the entire system

180
00:08:56,490 --> 00:09:02,460
depends on how critical the application

181
00:08:58,380 --> 00:09:05,760
that<font color="#CCCCCC"> just</font><font color="#E5E5E5"> crash this and in general</font>

182
00:09:02,460 --> 00:09:08,640
system D are using an<font color="#E5E5E5"> embedded system</font>

183
00:09:05,760 --> 00:09:10,350
that you want to update<font color="#E5E5E5"> in a robust play</font>

184
00:09:08,640 --> 00:09:13,380
is a good<font color="#E5E5E5"> idea because it's a very</font>

185
00:09:10,350 --> 00:09:16,440
central point<font color="#E5E5E5"> and it</font><font color="#CCCCCC"> has a very central</font>

186
00:09:13,380 --> 00:09:18,810
view of the entire system and all<font color="#CCCCCC"> the</font>

187
00:09:16,440 --> 00:09:22,490
<font color="#E5E5E5">components running on the system</font><font color="#CCCCCC"> and it</font>

188
00:09:18,810 --> 00:09:25,020
provides<font color="#CCCCCC"> fine-grained</font><font color="#E5E5E5"> control about</font>

189
00:09:22,490 --> 00:09:27,840
behavior when an<font color="#E5E5E5"> application or a</font>

190
00:09:25,020 --> 00:09:30,630
service<font color="#CCCCCC"> failures so if you want to</font>

191
00:09:27,840 --> 00:09:32,760
<font color="#E5E5E5">restart it when you want to restart it</font>

192
00:09:30,630 --> 00:09:36,300
with which intervals between multiple

193
00:09:32,760 --> 00:09:39,270
<font color="#E5E5E5">tries and when you want to abort trying</font>

194
00:09:36,300 --> 00:09:41,640
to restart<font color="#E5E5E5"> a service and we boot the</font>

195
00:09:39,270 --> 00:09:44,970
entire system and so on<font color="#E5E5E5"> as you watched</font>

196
00:09:41,640 --> 00:09:49,650
<font color="#E5E5E5">up multiplex I already described and for</font>

197
00:09:44,970 --> 00:09:55,200
<font color="#E5E5E5">example the system update method that is</font>

198
00:09:49,650 --> 00:09:57,510
a way for bootstrapping<font color="#E5E5E5"> the</font><font color="#CCCCCC"> boot serving</font>

199
00:09:55,200 --> 00:10:01,170
<font color="#E5E5E5">configuration data on the initial boot</font>

200
00:09:57,510 --> 00:10:04,740
of a system by<font color="#E5E5E5"> just placing a system</font>

201
00:10:01,170 --> 00:10:07,110
update file in the root<font color="#CCCCCC"> filesystem then</font>

202
00:10:04,740 --> 00:10:10,020
system<font color="#E5E5E5"> D boots</font><font color="#CCCCCC"> into a special target</font>

203
00:10:07,110 --> 00:10:13,080
perform some actions and then reboots

204
00:10:10,020 --> 00:10:16,110
<font color="#CCCCCC">and so you can boot strip or initial</font>

205
00:10:13,080 --> 00:10:18,740
data on<font color="#CCCCCC"> your system for example well</font>

206
00:10:16,110 --> 00:10:22,350
what you also<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to care</font><font color="#CCCCCC"> about when</font>

207
00:10:18,740 --> 00:10:24,720
thinking<font color="#E5E5E5"> about developing your system is</font>

208
00:10:22,350 --> 00:10:27,210
how<font color="#E5E5E5"> you store and where you store your</font>

209
00:10:24,720 --> 00:10:30,420
<font color="#CCCCCC">data</font><font color="#E5E5E5"> and how and where you migrate your</font>

210
00:10:27,210 --> 00:10:32,730
data<font color="#E5E5E5"> so a simple example</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> you</font>

211
00:10:30,420 --> 00:10:35,150
<font color="#E5E5E5">store your data in</font><font color="#CCCCCC"> the root file system</font>

212
00:10:32,730 --> 00:10:38,100
if you have a rewritable file system and

213
00:10:35,150 --> 00:10:42,390
then<font color="#E5E5E5"> your update you has to care for it</font>

214
00:10:38,100 --> 00:10:44,730
to first write the image<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

215
00:10:42,390 --> 00:10:46,860
secondary root<font color="#CCCCCC"> partition</font><font color="#E5E5E5"> and after that</font>

216
00:10:44,730 --> 00:10:49,950
copy all the data<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> need on</font><font color="#E5E5E5"> the</font>

217
00:10:46,860 --> 00:10:53,520
second petition to it from<font color="#E5E5E5"> the currently</font>

218
00:10:49,950 --> 00:10:55,800
running<font color="#E5E5E5"> one</font><font color="#CCCCCC"> so it's good if you</font><font color="#E5E5E5"> fall</font>

219
00:10:53,520 --> 00:10:59,139
back you or still<font color="#E5E5E5"> have</font>

220
00:10:55,800 --> 00:11:01,569
data that is accessible by the system

221
00:10:59,139 --> 00:11:04,060
<font color="#E5E5E5">but it may be outdated</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> of course</font>

222
00:11:01,570 --> 00:11:07,810
<font color="#CCCCCC">and another purchase</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you have a</font>

223
00:11:04,060 --> 00:11:10,599
single<font color="#E5E5E5"> data petition as I just mount it</font>

224
00:11:07,810 --> 00:11:13,449
<font color="#E5E5E5">in</font><font color="#CCCCCC"> the root file system</font><font color="#E5E5E5"> there no copying</font>

225
00:11:10,600 --> 00:11:15,970
is required because<font color="#E5E5E5"> of both the current</font>

226
00:11:13,449 --> 00:11:18,969
and<font color="#E5E5E5"> the updated system will</font><font color="#CCCCCC"> use the same</font>

227
00:11:15,970 --> 00:11:21,190
data migration is also possible but if

228
00:11:18,970 --> 00:11:23,670
you fall back<font color="#E5E5E5"> and migrated data</font><font color="#CCCCCC"> before</font>

229
00:11:21,190 --> 00:11:26,529
<font color="#E5E5E5">that might be tricky because the old</font>

230
00:11:23,670 --> 00:11:29,920
<font color="#E5E5E5">application might not be able</font><font color="#CCCCCC"> to read</font>

231
00:11:26,529 --> 00:11:33,730
the data you just just<font color="#E5E5E5"> migrate it with</font>

232
00:11:29,920 --> 00:11:35,680
the new application<font color="#E5E5E5"> so there's a third</font>

233
00:11:33,730 --> 00:11:38,500
approach<font color="#E5E5E5"> if you have redundant</font><font color="#CCCCCC"> for</font>

234
00:11:35,680 --> 00:11:41,800
systems<font color="#E5E5E5"> to also use with</font><font color="#CCCCCC"> other data file</font>

235
00:11:38,500 --> 00:11:44,199
systems<font color="#CCCCCC"> and again the copying</font><font color="#E5E5E5"> of the</font>

236
00:11:41,800 --> 00:11:45,880
<font color="#E5E5E5">data can be done by the</font><font color="#CCCCCC"> bootloader the</font>

237
00:11:44,199 --> 00:11:47,680
migration<font color="#CCCCCC"> should be done by the</font>

238
00:11:45,880 --> 00:11:51,490
application<font color="#CCCCCC"> because this has</font><font color="#E5E5E5"> the best</font>

239
00:11:47,680 --> 00:11:53,920
view of<font color="#E5E5E5"> what data it requires mounting</font>

240
00:11:51,490 --> 00:11:57,279
is a bit more<font color="#E5E5E5"> tricky because you have to</font>

241
00:11:53,920 --> 00:11:59,620
<font color="#E5E5E5">find out is a system which of the data</font>

242
00:11:57,279 --> 00:12:02,500
petition<font color="#E5E5E5"> belong</font><font color="#CCCCCC"> to your actual root</font>

243
00:11:59,620 --> 00:12:05,709
<font color="#CCCCCC">filesystem and</font><font color="#E5E5E5"> not mix it up and</font><font color="#CCCCCC"> you</font>

244
00:12:02,500 --> 00:12:08,199
<font color="#E5E5E5">have</font><font color="#CCCCCC"> falling</font><font color="#E5E5E5"> back or is again more</font>

245
00:12:05,709 --> 00:12:12,010
<font color="#E5E5E5">simple but again depending</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> your use</font>

246
00:12:08,199 --> 00:12:15,819
case<font color="#CCCCCC"> you</font><font color="#E5E5E5"> always you also access all data</font>

247
00:12:12,010 --> 00:12:17,980
<font color="#E5E5E5">so you have to make clear</font><font color="#CCCCCC"> if this is a</font>

248
00:12:15,819 --> 00:12:21,490
valid<font color="#CCCCCC"> use case for</font><font color="#E5E5E5"> your application</font><font color="#CCCCCC"> to</font>

249
00:12:17,980 --> 00:12:26,920
access<font color="#E5E5E5"> all data or if you want to not</font>

250
00:12:21,490 --> 00:12:30,899
allow for<font color="#CCCCCC"> backs in general also a topic</font>

251
00:12:26,920 --> 00:12:34,240
<font color="#E5E5E5">is I'm frequently asked about how</font>

252
00:12:30,899 --> 00:12:37,060
updating performance with verified or

253
00:12:34,240 --> 00:12:39,100
trusted boot<font color="#E5E5E5"> just</font><font color="#CCCCCC"> a short note about it</font>

254
00:12:37,060 --> 00:12:42,250
is because in many<font color="#CCCCCC"> cases</font><font color="#E5E5E5"> this is</font>

255
00:12:39,100 --> 00:12:46,449
<font color="#E5E5E5">orthogonal</font><font color="#CCCCCC"> to the updating taking them</font>

256
00:12:42,250 --> 00:12:49,120
<font color="#E5E5E5">Verity here as an example</font><font color="#CCCCCC"> is there in</font>

257
00:12:46,449 --> 00:12:53,170
this<font color="#E5E5E5"> case you create your root</font>

258
00:12:49,120 --> 00:12:54,940
<font color="#E5E5E5">filesystem image and the hash</font><font color="#CCCCCC"> trees in</font>

259
00:12:53,170 --> 00:12:57,939
<font color="#CCCCCC">our cohash</font><font color="#E5E5E5"> tree for zero fascist money</font>

260
00:12:54,940 --> 00:13:00,880
build system and for<font color="#E5E5E5"> the update system</font>

261
00:12:57,940 --> 00:13:02,529
<font color="#E5E5E5">itself it's just like writing data to</font>

262
00:13:00,880 --> 00:13:05,970
<font color="#E5E5E5">your block device so it's transparent</font>

263
00:13:02,529 --> 00:13:07,860
<font color="#CCCCCC">first if you're using</font><font color="#E5E5E5"> them integrity</font>

264
00:13:05,970 --> 00:13:11,430
then you

265
00:13:07,860 --> 00:13:15,029
got the handling<font color="#E5E5E5"> in your community in</font>

266
00:13:11,430 --> 00:13:18,269
<font color="#CCCCCC">your running</font><font color="#E5E5E5"> system covered and then you</font>

267
00:13:15,029 --> 00:13:21,839
can use for<font color="#CCCCCC"> example a child</font><font color="#E5E5E5"> extraction</font>

268
00:13:18,269 --> 00:13:24,470
to update your<font color="#CCCCCC"> system then also the</font>

269
00:13:21,839 --> 00:13:27,480
running<font color="#CCCCCC"> system will</font><font color="#E5E5E5"> handle all</font><font color="#CCCCCC"> the</font>

270
00:13:24,470 --> 00:13:29,490
mapping itself<font color="#E5E5E5"> because it's like simple</font>

271
00:13:27,480 --> 00:13:32,630
<font color="#CCCCCC">extracting at our to</font><font color="#E5E5E5"> next</font><font color="#CCCCCC"> four file</font>

272
00:13:29,490 --> 00:13:35,820
system and the<font color="#CCCCCC"> dam integrity layer below</font>

273
00:13:32,630 --> 00:13:41,779
<font color="#E5E5E5">handles journaling and the tax creation</font>

274
00:13:35,820 --> 00:13:45,600
and so on well as I already<font color="#CCCCCC"> said</font><font color="#E5E5E5"> it is</font>

275
00:13:41,779 --> 00:13:48,360
important for an update<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you test at</font>

276
00:13:45,600 --> 00:13:51,450
your update for robust updating and it's

277
00:13:48,360 --> 00:13:54,480
not like<font color="#CCCCCC"> only testing software</font>

278
00:13:51,450 --> 00:13:59,670
it's like testing<font color="#CCCCCC"> the entire updating</font>

279
00:13:54,480 --> 00:14:02,190
change so from the from the<font color="#E5E5E5"> or start of</font>

280
00:13:59,670 --> 00:14:05,240
the system to the<font color="#CCCCCC"> updating cycle to the</font>

281
00:14:02,190 --> 00:14:08,070
<font color="#E5E5E5">reboot to the newly running system</font><font color="#CCCCCC"> and</font>

282
00:14:05,240 --> 00:14:09,779
this<font color="#E5E5E5"> is quite tricky because you</font><font color="#CCCCCC"> have to</font>

283
00:14:08,070 --> 00:14:12,959
interact<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> hardware and a good</font>

284
00:14:09,779 --> 00:14:15,000
framework for<font color="#E5E5E5"> this that provides this</font>

285
00:14:12,959 --> 00:14:19,920
functionality is<font color="#CCCCCC"> Leopard</font>

286
00:14:15,000 --> 00:14:23,399
it's based on<font color="#CCCCCC"> Titus</font><font color="#E5E5E5"> and you can it has</font>

287
00:14:19,920 --> 00:14:27,300
<font color="#CCCCCC">an abstraction and way of interacting</font>

288
00:14:23,399 --> 00:14:30,690
<font color="#E5E5E5">with shells over serial line so shall</font>

289
00:14:27,300 --> 00:14:33,620
drive that knows how to deal with<font color="#CCCCCC"> linux</font>

290
00:14:30,690 --> 00:14:36,480
shell<font color="#E5E5E5"> battles drivers that knows how to</font>

291
00:14:33,620 --> 00:14:40,140
<font color="#E5E5E5">communicate with pair box how to type</font>

292
00:14:36,480 --> 00:14:41,910
something<font color="#CCCCCC"> as a gel</font><font color="#E5E5E5"> shell get variable</font>

293
00:14:40,140 --> 00:14:44,160
names and so on and power drives<font color="#E5E5E5"> that</font>

294
00:14:41,910 --> 00:14:47,670
allows you<font color="#E5E5E5"> to power the system and then</font>

295
00:14:44,160 --> 00:14:50,010
a simple test case for<font color="#E5E5E5"> your device could</font>

296
00:14:47,670 --> 00:14:52,560
be<font color="#E5E5E5"> you provide chess it provides a</font>

297
00:14:50,010 --> 00:14:55,680
target<font color="#CCCCCC"> sheet is updated to to install it</font>

298
00:14:52,560 --> 00:14:57,689
power cycle it<font color="#E5E5E5"> and then testing the</font>

299
00:14:55,680 --> 00:15:00,719
bootloader<font color="#E5E5E5"> okay did it select the other</font>

300
00:14:57,690 --> 00:15:03,810
root filesystem petition and test in the

301
00:15:00,720 --> 00:15:06,269
<font color="#E5E5E5">Linux okay or am i running the right</font>

302
00:15:03,810 --> 00:15:09,649
root<font color="#E5E5E5"> filesystem the new application is</font>

303
00:15:06,269 --> 00:15:14,160
every service up and running and so on

304
00:15:09,649 --> 00:15:16,380
well normally when<font color="#E5E5E5"> we want to perform</font>

305
00:15:14,160 --> 00:15:20,459
<font color="#E5E5E5">updates over the</font><font color="#CCCCCC"> network so remote</font>

306
00:15:16,380 --> 00:15:24,090
updates<font color="#E5E5E5"> we have two major issues that we</font>

307
00:15:20,460 --> 00:15:27,750
<font color="#E5E5E5">come across is that your update</font><font color="#CCCCCC"> too</font>

308
00:15:24,090 --> 00:15:30,300
large we have have devices<font color="#CCCCCC"> that only</font>

309
00:15:27,750 --> 00:15:33,870
<font color="#E5E5E5">have</font><font color="#CCCCCC"> constraint connection and so an</font>

310
00:15:30,300 --> 00:15:38,099
update takes very long and<font color="#E5E5E5"> raises a lot</font>

311
00:15:33,870 --> 00:15:41,880
of<font color="#E5E5E5"> data and we</font><font color="#CCCCCC"> also require</font><font color="#E5E5E5"> a temporary</font>

312
00:15:38,100 --> 00:15:43,920
storage<font color="#CCCCCC"> for the update image we download</font>

313
00:15:41,880 --> 00:15:45,990
where we can download<font color="#CCCCCC"> it to the target</font>

314
00:15:43,920 --> 00:15:49,370
<font color="#CCCCCC">and temporary start</font><font color="#E5E5E5"> before actually</font>

315
00:15:45,990 --> 00:15:55,290
installing<font color="#E5E5E5"> it and so what you want to</font>

316
00:15:49,370 --> 00:15:57,840
<font color="#E5E5E5">come across it is Delta updates and you</font>

317
00:15:55,290 --> 00:16:02,130
know in this<font color="#E5E5E5"> is an example taking from</font>

318
00:15:57,840 --> 00:16:03,450
the<font color="#E5E5E5"> route update framework and we wanted</font>

319
00:16:02,130 --> 00:16:06,660
<font color="#E5E5E5">to</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> Delta updates network</font>

320
00:16:03,450 --> 00:16:09,810
functionality and<font color="#CCCCCC"> we didn't want to when</font>

321
00:16:06,660 --> 00:16:12,270
<font color="#E5E5E5">to reinvent the wheel</font><font color="#CCCCCC"> and then suddenly</font>

322
00:16:09,810 --> 00:16:14,489
say<font color="#CCCCCC"> Aysen Plata</font><font color="#E5E5E5"> and according</font><font color="#CCCCCC"> to</font>

323
00:16:12,270 --> 00:16:16,560
<font color="#E5E5E5">Wikipedia I think is a</font><font color="#CCCCCC"> linear software</font>

324
00:16:14,490 --> 00:16:18,840
utility designed to distribute

325
00:16:16,560 --> 00:16:21,239
frequently update<font color="#CCCCCC"> faces and images over</font>

326
00:16:18,840 --> 00:16:23,610
the Internet sounds like something we

327
00:16:21,240 --> 00:16:30,080
<font color="#CCCCCC">could use so let's have a look</font><font color="#E5E5E5"> what it</font>

328
00:16:23,610 --> 00:16:32,520
<font color="#E5E5E5">actually does jason</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> chunking</font>

329
00:16:30,080 --> 00:16:35,070
algorithm basically<font color="#E5E5E5"> so you take your</font>

330
00:16:32,520 --> 00:16:38,130
<font color="#E5E5E5">block device either or a full directory</font>

331
00:16:35,070 --> 00:16:40,890
<font color="#E5E5E5">tree and see I think creates a similar</font>

332
00:16:38,130 --> 00:16:45,270
<font color="#CCCCCC">lie stream of this and then splits</font><font color="#E5E5E5"> the</font>

333
00:16:40,890 --> 00:16:48,980
stream into small chunks<font color="#CCCCCC"> into producible</font>

334
00:16:45,270 --> 00:16:53,520
<font color="#E5E5E5">way and in a way</font><font color="#CCCCCC"> that you can later on</font>

335
00:16:48,980 --> 00:16:58,560
<font color="#E5E5E5">compare chunks to similar to similar</font>

336
00:16:53,520 --> 00:17:03,199
images in a good way so<font color="#E5E5E5"> then it takes a</font>

337
00:16:58,560 --> 00:17:06,270
little<font color="#CCCCCC"> it's hashes</font><font color="#E5E5E5"> of the different</font>

338
00:17:03,200 --> 00:17:09,900
chunks<font color="#E5E5E5"> and store some sequiny in an</font>

339
00:17:06,270 --> 00:17:12,990
index file<font color="#E5E5E5"> and all the chunk data itself</font>

340
00:17:09,900 --> 00:17:17,430
it compresses and stores<font color="#CCCCCC"> under the name</font>

341
00:17:12,990 --> 00:17:22,140
<font color="#E5E5E5">of the hash in chunks door and now we</font>

342
00:17:17,430 --> 00:17:25,380
can reverse it and extract<font color="#E5E5E5"> it then if we</font>

343
00:17:22,140 --> 00:17:28,380
extract<font color="#E5E5E5"> see async index file to either a</font>

344
00:17:25,380 --> 00:17:33,570
block device<font color="#E5E5E5"> or a directory tree</font><font color="#CCCCCC"> thus</font>

345
00:17:28,380 --> 00:17:36,720
<font color="#CCCCCC">jason scans susie or index file</font><font color="#E5E5E5"> and look</font>

346
00:17:33,570 --> 00:17:38,908
Chang store for<font color="#E5E5E5"> each of the chunks fetch</font>

347
00:17:36,720 --> 00:17:41,549
<font color="#CCCCCC">addressed it over network and directly a</font>

348
00:17:38,909 --> 00:17:43,229
DC realizes is and writes it<font color="#CCCCCC"> to the</font>

349
00:17:41,549 --> 00:17:46,229
device<font color="#CCCCCC"> so there's no temporary starch</font>

350
00:17:43,229 --> 00:17:49,649
required<font color="#E5E5E5"> we have remote access because</font>

351
00:17:46,229 --> 00:17:54,539
<font color="#E5E5E5">Jason brings other remote functionality</font>

352
00:17:49,649 --> 00:17:58,379
required to work over HTTP HTTP<font color="#E5E5E5"> FTP and</font>

353
00:17:54,539 --> 00:18:02,639
so on and yeah we can<font color="#CCCCCC"> wide it</font>

354
00:17:58,379 --> 00:18:08,070
sequentially<font color="#CCCCCC"> to the device</font><font color="#E5E5E5"> so now how do</font>

355
00:18:02,639 --> 00:18:11,008
<font color="#CCCCCC">we</font><font color="#E5E5E5"> use it in route currently well what</font>

356
00:18:08,070 --> 00:18:17,279
we do<font color="#E5E5E5"> is we want to update running from</font>

357
00:18:11,009 --> 00:18:19,409
today which is<font color="#E5E5E5"> not B and so we perform</font>

358
00:18:17,279 --> 00:18:21,869
the<font color="#CCCCCC"> same chanting I</font><font color="#E5E5E5"> personally performed</font>

359
00:18:19,409 --> 00:18:26,070
on the image we want to<font color="#CCCCCC"> use for updating</font>

360
00:18:21,869 --> 00:18:29,279
on the slot<font color="#E5E5E5"> and store the information</font>

361
00:18:26,070 --> 00:18:32,729
<font color="#E5E5E5">about where to find the data for each</font>

362
00:18:29,279 --> 00:18:36,869
<font color="#E5E5E5">chunk in a so called</font><font color="#CCCCCC"> seed store on our</font>

363
00:18:32,729 --> 00:18:39,929
target<font color="#CCCCCC"> and then when installing an</font>

364
00:18:36,869 --> 00:18:42,779
update<font color="#E5E5E5"> which is a basically an index</font>

365
00:18:39,929 --> 00:18:45,299
file of see<font color="#E5E5E5"> icing here and we scan</font>

366
00:18:42,779 --> 00:18:47,070
<font color="#CCCCCC">through all these different elements</font>

367
00:18:45,299 --> 00:18:48,479
then we<font color="#E5E5E5"> first take a look at our seed</font>

368
00:18:47,070 --> 00:18:51,779
store if you<font color="#E5E5E5"> can fetch the data from</font>

369
00:18:48,479 --> 00:18:54,090
<font color="#E5E5E5">local and if it's there we get the data</font>

370
00:18:51,779 --> 00:18:56,249
for most<font color="#CCCCCC"> lot a and</font><font color="#E5E5E5"> write it to</font><font color="#CCCCCC"> slot B</font>

371
00:18:54,090 --> 00:19:00,599
and only for these chunks<font color="#E5E5E5"> they differ</font>

372
00:18:56,249 --> 00:19:04,470
<font color="#CCCCCC">from</font><font color="#E5E5E5"> the or currently one for this we</font>

373
00:19:00,599 --> 00:19:07,320
have<font color="#E5E5E5"> to make a remote access and Kyle</font>

374
00:19:04,470 --> 00:19:09,629
<font color="#E5E5E5">call this small chunk from the chance to</font>

375
00:19:07,320 --> 00:19:13,200
server<font color="#E5E5E5"> so this is basically how it</font><font color="#CCCCCC"> works</font>

376
00:19:09,629 --> 00:19:16,799
<font color="#E5E5E5">and another topic</font><font color="#CCCCCC"> that you care about</font>

377
00:19:13,200 --> 00:19:20,849
<font color="#E5E5E5">when having a lot of devices</font><font color="#CCCCCC"> is fear</font>

378
00:19:16,799 --> 00:19:24,629
deployment<font color="#CCCCCC"> well if you have your</font><font color="#E5E5E5"> update</font>

379
00:19:20,849 --> 00:19:29,519
and deploy<font color="#E5E5E5"> it to a large field of</font>

380
00:19:24,629 --> 00:19:31,830
devices<font color="#E5E5E5"> and yeah there is a box</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

381
00:19:29,519 --> 00:19:34,109
didn't discover during your testing or

382
00:19:31,830 --> 00:19:36,809
something<font color="#CCCCCC"> like this in the</font><font color="#E5E5E5"> update then</font>

383
00:19:34,109 --> 00:19:38,639
you've updated all your system and I say

384
00:19:36,809 --> 00:19:42,960
<font color="#E5E5E5">oh damn I braked</font>

385
00:19:38,639 --> 00:19:45,010
almost half of them so it's a good way

386
00:19:42,960 --> 00:19:48,090
<font color="#CCCCCC">to have it</font>

387
00:19:45,010 --> 00:19:51,100
one strategy for<font color="#E5E5E5"> this and for this</font><font color="#CCCCCC"> also</font>

388
00:19:48,090 --> 00:19:54,070
<font color="#E5E5E5">did open search tool exists called hop</font>

389
00:19:51,100 --> 00:19:59,050
<font color="#E5E5E5">it well hop it is basically a deployment</font>

390
00:19:54,070 --> 00:20:01,050
<font color="#E5E5E5">server provides a map interface</font><font color="#CCCCCC"> or UI</font>

391
00:19:59,050 --> 00:20:04,540
for the<font color="#E5E5E5"> user where you can manually</font>

392
00:20:01,050 --> 00:20:07,659
configure updates or and configure

393
00:20:04,540 --> 00:20:11,200
complete<font color="#E5E5E5"> roles we see later</font><font color="#CCCCCC"> on and a</font>

394
00:20:07,660 --> 00:20:15,580
management API that<font color="#E5E5E5"> allows to do this</font>

395
00:20:11,200 --> 00:20:17,170
automatically<font color="#E5E5E5"> also by some other</font>

396
00:20:15,580 --> 00:20:19,030
backgrounds or something<font color="#E5E5E5"> like this and</font>

397
00:20:17,170 --> 00:20:21,220
on the<font color="#CCCCCC"> other side it has a device</font>

398
00:20:19,030 --> 00:20:24,310
integration API<font color="#CCCCCC"> this is where the</font>

399
00:20:21,220 --> 00:20:29,200
devices<font color="#CCCCCC"> registered your</font><font color="#E5E5E5"> heart and verify</font>

400
00:20:24,310 --> 00:20:30,940
and pull of in a fixed interval to check

401
00:20:29,200 --> 00:20:33,670
if there are<font color="#E5E5E5"> new updates for them</font>

402
00:20:30,940 --> 00:20:37,960
available<font color="#CCCCCC"> and if we take a scenario</font><font color="#E5E5E5"> of</font>

403
00:20:33,670 --> 00:20:41,590
them<font color="#CCCCCC"> hop it supports deployment</font>

404
00:20:37,960 --> 00:20:46,810
strategies like I could switch I could

405
00:20:41,590 --> 00:20:49,629
split<font color="#E5E5E5"> up the entire group of of targets</font>

406
00:20:46,810 --> 00:20:53,379
here into<font color="#E5E5E5"> three groups and say</font><font color="#CCCCCC"> ok a</font>

407
00:20:49,630 --> 00:20:56,920
certain<font color="#CCCCCC"> threshold at 50%</font><font color="#E5E5E5"> which mean if</font>

408
00:20:53,380 --> 00:20:59,740
at least<font color="#E5E5E5"> 50% of the devices</font><font color="#CCCCCC"> come</font><font color="#E5E5E5"> back</font>

409
00:20:56,920 --> 00:21:03,520
<font color="#E5E5E5">alive</font><font color="#CCCCCC"> ok then I continue updating and</font>

410
00:20:59,740 --> 00:21:07,120
what<font color="#CCCCCC"> Rockets and</font><font color="#E5E5E5"> asses</font><font color="#CCCCCC"> start with the</font>

411
00:21:03,520 --> 00:21:09,460
first group updates<font color="#E5E5E5"> and then after</font>

412
00:21:07,120 --> 00:21:13,149
having updated<font color="#CCCCCC"> successful</font><font color="#E5E5E5"> easy or</font><font color="#CCCCCC"> Chagas</font>

413
00:21:09,460 --> 00:21:14,980
reports<font color="#CCCCCC"> starters back and ok we see more</font>

414
00:21:13,150 --> 00:21:18,730
<font color="#E5E5E5">than half of the targets came back</font>

415
00:21:14,980 --> 00:21:21,520
successfully<font color="#E5E5E5"> so hop it will start to</font>

416
00:21:18,730 --> 00:21:24,520
schedule the<font color="#CCCCCC"> next group of updates and</font>

417
00:21:21,520 --> 00:21:25,629
in this group<font color="#E5E5E5"> of updates we see oh it's</font>

418
00:21:24,520 --> 00:21:28,240
below us right

419
00:21:25,630 --> 00:21:32,740
it's a<font color="#CCCCCC"> baffle threshold so two devices</font>

420
00:21:28,240 --> 00:21:35,260
<font color="#E5E5E5">failed so we</font><font color="#CCCCCC"> say</font><font color="#E5E5E5"> oh stop something went</font>

421
00:21:32,740 --> 00:21:37,900
wrong we<font color="#E5E5E5"> stop our update and we will not</font>

422
00:21:35,260 --> 00:21:45,460
kill<font color="#CCCCCC"> the other targets with a</font><font color="#E5E5E5"> protein</font>

423
00:21:37,900 --> 00:21:49,960
update so yeah<font color="#E5E5E5"> what we've seen we have</font><font color="#CCCCCC"> a</font>

424
00:21:45,460 --> 00:21:52,090
<font color="#CCCCCC">DS update frameworks</font><font color="#E5E5E5"> they are so much</font>

425
00:21:49,960 --> 00:21:54,490
<font color="#E5E5E5">challenges we had in the parse but they</font>

426
00:21:52,090 --> 00:21:56,570
don't solve all challenges you still

427
00:21:54,490 --> 00:21:59,899
have to know what

428
00:21:56,570 --> 00:22:02,360
system requires<font color="#E5E5E5"> our application behaves</font>

429
00:21:59,899 --> 00:22:05,110
<font color="#CCCCCC">which</font><font color="#E5E5E5"> part of the system you want</font><font color="#CCCCCC"> to</font>

430
00:22:02,360 --> 00:22:08,178
monitor have running on<font color="#E5E5E5"> the system and</font>

431
00:22:05,110 --> 00:22:09,949
how to<font color="#E5E5E5"> properly configure watchdog and</font>

432
00:22:08,179 --> 00:22:12,309
rebooting<font color="#E5E5E5"> of your devices how to</font>

433
00:22:09,950 --> 00:22:16,610
<font color="#E5E5E5">interact with your</font><font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> so on</font><font color="#E5E5E5"> so</font>

434
00:22:12,309 --> 00:22:20,029
this<font color="#E5E5E5"> is only yeah</font><font color="#CCCCCC"> it's not just</font><font color="#E5E5E5"> taking</font>

435
00:22:16,610 --> 00:22:22,428
<font color="#CCCCCC">different components like an update tool</font>

436
00:22:20,029 --> 00:22:26,269
and a deployment server CIA<font color="#E5E5E5"> sync and so</font>

437
00:22:22,429 --> 00:22:29,149
on<font color="#E5E5E5"> but you</font><font color="#CCCCCC"> have to</font><font color="#E5E5E5"> well configure all</font>

438
00:22:26,269 --> 00:22:31,549
these<font color="#CCCCCC"> components so that they can work</font>

439
00:22:29,149 --> 00:22:36,080
together and give you a robust<font color="#CCCCCC"> of fully</font>

440
00:22:31,549 --> 00:22:39,399
robust<font color="#E5E5E5"> update</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> so come to the</font><font color="#CCCCCC"> apps</font>

441
00:22:36,080 --> 00:22:43,460
<font color="#E5E5E5">are there any questions</font><font color="#CCCCCC"> say we have a</font>

442
00:22:39,399 --> 00:22:49,189
few<font color="#E5E5E5"> minutes left otherwise if you want</font>

443
00:22:43,460 --> 00:22:53,269
<font color="#CCCCCC">to discuss a bit more tomorrow at half</font>

444
00:22:49,190 --> 00:22:56,330
<font color="#E5E5E5">past 1:00 p.m.</font><font color="#CCCCCC"> I'll be at the open</font>

445
00:22:53,269 --> 00:22:59,929
embedded stand there is a small updating

446
00:22:56,330 --> 00:23:02,658
demo that shows<font color="#E5E5E5"> route in interaction</font>

447
00:22:59,929 --> 00:23:04,519
<font color="#CCCCCC">with outfit</font><font color="#E5E5E5"> so if you like to come and</font>

448
00:23:02,659 --> 00:23:07,519
see<font color="#E5E5E5"> all the time and if</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to be</font>

449
00:23:04,519 --> 00:23:15,460
sure<font color="#E5E5E5"> that you can discuss with</font><font color="#CCCCCC"> us just</font>

450
00:23:07,519 --> 00:23:15,460
<font color="#E5E5E5">visit us tomorrow at 1:30 p.m. yes</font>

451
00:23:24,170 --> 00:23:31,130
well it depends<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the actual on how you</font>

452
00:23:28,640 --> 00:23:33,920
built a<font color="#CCCCCC"> system if your system is secure</font>

453
00:23:31,130 --> 00:23:52,130
or<font color="#CCCCCC"> what do</font><font color="#E5E5E5"> you mean about a secure</font>

454
00:23:33,920 --> 00:23:55,580
<font color="#CCCCCC">system if you</font><font color="#E5E5E5"> want to be sure so the</font>

455
00:23:52,130 --> 00:23:58,460
<font color="#E5E5E5">question was if someone could change</font>

456
00:23:55,580 --> 00:24:01,610
something in the<font color="#CCCCCC"> system and</font><font color="#E5E5E5"> does it well</font>

457
00:23:58,460 --> 00:24:04,120
<font color="#E5E5E5">the updating itself is if you use</font><font color="#CCCCCC"> route</font>

458
00:24:01,610 --> 00:24:09,729
and most other tools<font color="#E5E5E5"> to is verified so</font>

459
00:24:04,120 --> 00:24:13,370
only those who've the right key for

460
00:24:09,730 --> 00:24:16,280
signing the<font color="#CCCCCC"> image will be able to create</font>

461
00:24:13,370 --> 00:24:18,469
<font color="#E5E5E5">images that will be accepted</font><font color="#CCCCCC"> Parag this</font>

462
00:24:16,280 --> 00:24:22,160
is a part of the update system<font color="#E5E5E5"> then on</font>

463
00:24:18,470 --> 00:24:24,770
the target you<font color="#E5E5E5"> are can prevent some body</font>

464
00:24:22,160 --> 00:24:27,549
from accessing<font color="#E5E5E5"> it by using trusted</font><font color="#CCCCCC"> booj</font>

465
00:24:24,770 --> 00:24:34,370
and all these<font color="#CCCCCC"> mechanisms</font><font color="#E5E5E5"> said it just</font>

466
00:24:27,549 --> 00:24:36,200
<font color="#E5E5E5">briefly came across or yeah does it</font>

467
00:24:34,370 --> 00:24:40,418
<font color="#CCCCCC">answer your</font><font color="#E5E5E5"> question basically okay</font>

468
00:24:36,200 --> 00:24:40,419
<font color="#E5E5E5">great yeah</font>

469
00:24:43,860 --> 00:24:48,540
<font color="#CCCCCC">could</font><font color="#E5E5E5"> you speak up a bit I don't get it</font>

470
00:25:00,150 --> 00:25:08,170
so the pressure was<font color="#CCCCCC"> the</font><font color="#E5E5E5"> smallest system</font>

471
00:25:04,410 --> 00:25:11,290
<font color="#E5E5E5">it's working on so a bit and</font>

472
00:25:08,170 --> 00:25:13,810
dependencies<font color="#E5E5E5"> without uses chillip so it</font>

473
00:25:11,290 --> 00:25:15,610
has to be a<font color="#CCCCCC"> system that is able</font><font color="#E5E5E5"> to run</font>

474
00:25:13,810 --> 00:25:18,429
<font color="#CCCCCC">dilip it has to be a</font><font color="#E5E5E5"> system that is</font>

475
00:25:15,610 --> 00:25:23,590
running<font color="#CCCCCC"> in Linux</font><font color="#E5E5E5"> rock itself is quite</font>

476
00:25:18,430 --> 00:25:26,500
<font color="#E5E5E5">small and</font><font color="#CCCCCC"> it also supports</font><font color="#E5E5E5"> not yet fully</font>

477
00:25:23,590 --> 00:25:29,230
<font color="#CCCCCC">setup code</font><font color="#E5E5E5"> it's need more storage you</font>

478
00:25:26,500 --> 00:25:33,340
<font color="#E5E5E5">can also have a recovery or something</font>

479
00:25:29,230 --> 00:25:36,970
<font color="#E5E5E5">like this which needs less storage so I</font>

480
00:25:33,340 --> 00:25:38,709
think<font color="#E5E5E5"> julep is about</font><font color="#CCCCCC"> 7 megabyte or</font>

481
00:25:36,970 --> 00:25:43,650
something largest and Iraq is a few

482
00:25:38,710 --> 00:25:48,400
kilobytes<font color="#E5E5E5"> ok</font>

483
00:25:43,650 --> 00:25:50,120
<font color="#E5E5E5">you still have time questions left so</font>

484
00:25:48,400 --> 00:25:53,460
otherwise<font color="#E5E5E5"> thanks for attending my talk</font>

485
00:25:50,120 --> 00:25:53,459
[Applause]

486
00:25:56,490 --> 00:25:59,940
[Applause]

