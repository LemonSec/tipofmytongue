1
00:00:04,970 --> 00:00:13,200
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> oh this is a different talk mostly</font>

2
00:00:09,900 --> 00:00:16,439
a<font color="#E5E5E5"> tutorial to learn about hardware</font>

3
00:00:13,200 --> 00:00:22,110
design and maybe more<font color="#E5E5E5"> precisely FPGA</font>

4
00:00:16,439 --> 00:00:25,308
design<font color="#E5E5E5"> so this is a EDA and open aware</font>

5
00:00:22,110 --> 00:00:29,488
room<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> talked about</font><font color="#E5E5E5"> hardware and</font>

6
00:00:25,309 --> 00:00:32,700
<font color="#CCCCCC">particular</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> this talk we are</font><font color="#E5E5E5"> talking</font>

7
00:00:29,489 --> 00:00:35,640
about how to design a chip not about

8
00:00:32,700 --> 00:00:41,100
PCBs<font color="#E5E5E5"> are</font><font color="#CCCCCC"> also talk later for PCB</font>

9
00:00:35,640 --> 00:00:45,269
designers and it's not about analog chip

10
00:00:41,100 --> 00:00:47,699
chip which<font color="#CCCCCC"> is mostly part of new</font>

11
00:00:45,269 --> 00:00:54,629
character<font color="#E5E5E5"> and cubes but it's about</font>

12
00:00:47,699 --> 00:00:59,489
digital chip<font color="#CCCCCC"> I would say in the real</font>

13
00:00:54,629 --> 00:01:03,568
life<font color="#CCCCCC"> designing real digital chip is very</font>

14
00:00:59,489 --> 00:01:05,640
very complex and<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> done only</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> very</font>

15
00:01:03,569 --> 00:01:11,270
large company<font color="#E5E5E5"> need to invest a lot of</font>

16
00:01:05,640 --> 00:01:16,650
money for the<font color="#E5E5E5"> software for the</font>

17
00:01:11,270 --> 00:01:22,340
manufactory so we will do something<font color="#CCCCCC"> a</font>

18
00:01:16,650 --> 00:01:27,420
<font color="#CCCCCC">little bit different so this</font><font color="#E5E5E5"> is a sum of</font>

19
00:01:22,340 --> 00:01:31,680
tool you<font color="#E5E5E5"> need to build a chip very</font>

20
00:01:27,420 --> 00:01:34,800
responsive hopefully some chip are

21
00:01:31,680 --> 00:01:38,130
completely programmable<font color="#CCCCCC"> yes most of</font><font color="#E5E5E5"> the</font>

22
00:01:34,800 --> 00:01:41,610
chip<font color="#E5E5E5"> I would say fixed have only one</font>

23
00:01:38,130 --> 00:01:43,920
<font color="#E5E5E5">purpose and our few chips</font><font color="#CCCCCC"> named</font><font color="#E5E5E5"> FPGA</font>

24
00:01:41,610 --> 00:01:46,410
that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> coop</font><font color="#E5E5E5"> idli programmers which</font>

25
00:01:43,920 --> 00:01:53,070
mean that<font color="#E5E5E5"> you can see them</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> a bit like</font>

26
00:01:46,410 --> 00:01:55,830
<font color="#E5E5E5">a software you define what you</font><font color="#CCCCCC"> want to</font>

27
00:01:53,070 --> 00:02:00,389
do with the chip<font color="#E5E5E5"> and it's almost</font>

28
00:01:55,830 --> 00:02:05,100
<font color="#CCCCCC">exclusively digital chip</font><font color="#E5E5E5"> so what is</font>

29
00:02:00,390 --> 00:02:08,250
inside<font color="#CCCCCC"> programmable chip which is almost</font>

30
00:02:05,100 --> 00:02:12,120
<font color="#E5E5E5">always called FPGA so you have the</font>

31
00:02:08,250 --> 00:02:14,430
<font color="#CCCCCC">inputs and outputs on the side you have</font>

32
00:02:12,120 --> 00:02:16,859
<font color="#CCCCCC">some cells</font><font color="#E5E5E5"> that are programmable and</font>

33
00:02:14,430 --> 00:02:18,569
that define a particular<font color="#E5E5E5"> function and</font>

34
00:02:16,859 --> 00:02:21,659
<font color="#E5E5E5">you have</font>

35
00:02:18,569 --> 00:02:25,530
lot<font color="#CCCCCC"> of nets lot of that can be</font>

36
00:02:21,659 --> 00:02:27,629
<font color="#E5E5E5">configured as a</font><font color="#CCCCCC"> route</font><font color="#E5E5E5"> so you can program</font>

37
00:02:25,530 --> 00:02:32,730
the chip to connect<font color="#CCCCCC"> further part this</font>

38
00:02:27,629 --> 00:02:37,108
<font color="#E5E5E5">part</font><font color="#CCCCCC"> to this input</font><font color="#E5E5E5"> of this cell so</font><font color="#CCCCCC"> there</font>

39
00:02:32,730 --> 00:02:39,268
is a lot of extra<font color="#CCCCCC"> pixels in the chip</font>

40
00:02:37,109 --> 00:02:44,450
<font color="#CCCCCC">just to be able</font><font color="#E5E5E5"> to configure</font><font color="#CCCCCC"> the chip</font>

41
00:02:39,269 --> 00:02:48,359
which<font color="#E5E5E5"> mean that the chip is slow and</font>

42
00:02:44,450 --> 00:02:54,298
somewhat expensive compared to a fully

43
00:02:48,359 --> 00:02:57,719
custom chip so digital<font color="#E5E5E5"> is about 0</font><font color="#CCCCCC"> & 1</font>

44
00:02:54,299 --> 00:03:02,040
<font color="#E5E5E5">and here I assume you know</font><font color="#CCCCCC"> a little bit</font>

45
00:02:57,719 --> 00:03:04,049
<font color="#CCCCCC">about</font><font color="#E5E5E5"> digital computation that</font><font color="#CCCCCC"> mean</font><font color="#E5E5E5"> the</font>

46
00:03:02,040 --> 00:03:11,250
basic<font color="#E5E5E5"> operation that are used in almost</font>

47
00:03:04,049 --> 00:03:16,109
every digital chip<font color="#CCCCCC"> oh and n dot so</font><font color="#E5E5E5"> this</font>

48
00:03:11,250 --> 00:03:22,379
is the basic building<font color="#CCCCCC"> blocks</font><font color="#E5E5E5"> of a chip</font>

49
00:03:16,109 --> 00:03:25,609
and the purpose of digital design is to

50
00:03:22,379 --> 00:03:31,108
combine this basic block to do something

51
00:03:25,609 --> 00:03:37,169
more complex<font color="#E5E5E5"> so for example if you</font>

52
00:03:31,109 --> 00:03:40,949
<font color="#E5E5E5">associate gates like this you get the</font>

53
00:03:37,169 --> 00:03:45,959
eggs or function using only<font color="#E5E5E5"> and not an</font>

54
00:03:40,949 --> 00:03:48,629
or gate and the<font color="#E5E5E5"> round at</font><font color="#CCCCCC"> the output of</font>

55
00:03:45,959 --> 00:03:54,540
<font color="#E5E5E5">the</font><font color="#CCCCCC"> gate let's mean you get the it's an</font>

56
00:03:48,629 --> 00:03:57,840
investor<font color="#E5E5E5"> so you get the</font><font color="#CCCCCC"> not of and in</font>

57
00:03:54,540 --> 00:04:00,478
<font color="#E5E5E5">this case so you can</font><font color="#CCCCCC"> combine gate</font><font color="#E5E5E5"> to</font>

58
00:03:57,840 --> 00:04:06,329
create new gates here you

59
00:04:00,479 --> 00:04:12,150
<font color="#E5E5E5">here we</font><font color="#CCCCCC"> create subs</font><font color="#E5E5E5"> or and if you</font>

60
00:04:06,329 --> 00:04:16,370
<font color="#E5E5E5">combine them in a</font><font color="#CCCCCC"> meaningful way</font><font color="#E5E5E5"> you can</font>

61
00:04:12,150 --> 00:04:20,579
<font color="#E5E5E5">even do some nuts for example</font><font color="#CCCCCC"> subs or</font>

62
00:04:16,370 --> 00:04:24,389
here is the output of<font color="#E5E5E5"> provide for all</font>

63
00:04:20,579 --> 00:04:28,370
the possible input in fact observe it

64
00:04:24,389 --> 00:04:32,480
just for<font color="#E5E5E5"> one bit is same as an addition</font>

65
00:04:28,370 --> 00:04:35,760
so if you have one in

66
00:04:32,480 --> 00:04:39,360
<font color="#CCCCCC">you</font><font color="#E5E5E5"> need put to get one and</font><font color="#CCCCCC"> result and</font>

67
00:04:35,760 --> 00:04:43,920
if you are to one you<font color="#E5E5E5"> get you</font><font color="#CCCCCC"> should get</font>

68
00:04:39,360 --> 00:04:47,700
to but<font color="#E5E5E5"> because it's only</font><font color="#CCCCCC"> the lowest bit</font>

69
00:04:43,920 --> 00:04:51,320
of the output<font color="#E5E5E5"> to</font><font color="#CCCCCC"> get zero</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

70
00:04:47,700 --> 00:04:56,430
what is called<font color="#E5E5E5"> I would say half another</font>

71
00:04:51,320 --> 00:04:59,610
and so I<font color="#E5E5E5"> think</font><font color="#CCCCCC"> got</font><font color="#E5E5E5"> only one bit not very</font>

72
00:04:56,430 --> 00:05:06,660
<font color="#E5E5E5">interesting but if you get</font><font color="#CCCCCC"> full adder</font>

73
00:04:59,610 --> 00:05:10,020
with output and<font color="#CCCCCC"> carry you do something</font>

74
00:05:06,660 --> 00:05:13,490
<font color="#E5E5E5">little</font><font color="#CCCCCC"> bit more interesting to do</font><font color="#E5E5E5"> maths</font>

75
00:05:10,020 --> 00:05:19,469
<font color="#E5E5E5">so this is the</font><font color="#CCCCCC"> circuit of a full adder</font>

76
00:05:13,490 --> 00:05:23,190
with two input and carry input and the

77
00:05:19,470 --> 00:05:26,790
output and the curry<font color="#E5E5E5"> of the output and</font>

78
00:05:23,190 --> 00:05:32,690
this is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> block schematic for the</font><font color="#E5E5E5"> full</font>

79
00:05:26,790 --> 00:05:38,430
adder just<font color="#E5E5E5"> using the basic the basic</font>

80
00:05:32,690 --> 00:05:40,950
blocks have defined before<font color="#E5E5E5"> and what is</font>

81
00:05:38,430 --> 00:05:46,950
<font color="#E5E5E5">interesting with a full adder is to</font>

82
00:05:40,950 --> 00:05:50,280
combine them to create another<font color="#E5E5E5"> for here</font>

83
00:05:46,950 --> 00:05:52,729
for Nepal<font color="#E5E5E5"> for bit so here you really</font>

84
00:05:50,280 --> 00:05:57,960
<font color="#E5E5E5">have more interesting I would say</font>

85
00:05:52,729 --> 00:06:05,610
mathematic<font color="#E5E5E5"> computation using only</font><font color="#CCCCCC"> basic</font>

86
00:05:57,960 --> 00:06:09,570
blocks<font color="#CCCCCC"> and if</font><font color="#E5E5E5"> you combine full adder</font><font color="#CCCCCC"> you</font>

87
00:06:05,610 --> 00:06:13,290
<font color="#CCCCCC">can also do multiplication it's even</font>

88
00:06:09,570 --> 00:06:15,390
<font color="#E5E5E5">more powerful this is an example of a</font>

89
00:06:13,290 --> 00:06:20,850
4-bit by 4-bit multiplication it's a

90
00:06:15,390 --> 00:06:23,190
very efficient in<font color="#CCCCCC"> that very also very</font>

91
00:06:20,850 --> 00:06:29,940
<font color="#E5E5E5">energy efficient in the time of</font><font color="#CCCCCC"> area</font><font color="#E5E5E5"> but</font>

92
00:06:23,190 --> 00:06:36,240
it does the work so if you<font color="#E5E5E5"> continue</font><font color="#CCCCCC"> to</font>

93
00:06:29,940 --> 00:06:39,410
combine<font color="#E5E5E5"> gates you can</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> I would say</font>

94
00:06:36,240 --> 00:06:44,780
almost<font color="#E5E5E5"> whatever you want from input and</font>

95
00:06:39,410 --> 00:06:44,780
do<font color="#CCCCCC"> any competition</font><font color="#E5E5E5"> to create output</font>

96
00:06:45,360 --> 00:06:49,949
the problem with this kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> security</font>

97
00:06:47,550 --> 00:06:53,399
<font color="#CCCCCC">that</font><font color="#E5E5E5"> it's I would say either too simple</font>

98
00:06:49,949 --> 00:06:57,499
<font color="#E5E5E5">or</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> very powerful</font><font color="#CCCCCC"> and you get only</font>

99
00:06:53,399 --> 00:07:00,569
power from mathematics<font color="#E5E5E5"> if you do</font>

100
00:06:57,499 --> 00:07:05,269
<font color="#E5E5E5">feedback or</font><font color="#CCCCCC"> recursion that means you use</font>

101
00:07:00,569 --> 00:07:07,529
the output<font color="#E5E5E5"> to compute the next</font><font color="#CCCCCC"> input</font>

102
00:07:05,269 --> 00:07:10,889
this works well in much<font color="#E5E5E5"> but</font>

103
00:07:07,529 --> 00:07:15,869
<font color="#E5E5E5">unfortunately it isn't for at all like</font>

104
00:07:10,889 --> 00:07:18,509
this in hardware design the reason is

105
00:07:15,869 --> 00:07:22,830
that you<font color="#CCCCCC"> have I would say</font><font color="#E5E5E5"> some physical</font>

106
00:07:18,509 --> 00:07:26,189
constraints if if you set value to

107
00:07:22,830 --> 00:07:30,589
increase you get value on the output

108
00:07:26,189 --> 00:07:36,269
side<font color="#CCCCCC"> but let's</font><font color="#E5E5E5"> say not at the same time</font>

109
00:07:30,589 --> 00:07:38,669
so for<font color="#E5E5E5"> example you may get some before</font>

110
00:07:36,269 --> 00:07:42,689
<font color="#E5E5E5">the curry and if you</font><font color="#CCCCCC"> re-inject directly</font>

111
00:07:38,669 --> 00:07:46,378
without put to the input it<font color="#CCCCCC"> will compute</font>

112
00:07:42,689 --> 00:07:53,099
something<font color="#CCCCCC"> that is not correct because</font><font color="#E5E5E5"> it</font>

113
00:07:46,379 --> 00:07:56,009
will<font color="#E5E5E5"> use the term the</font><font color="#CCCCCC"> well son</font><font color="#E5E5E5"> but the</font>

114
00:07:53,099 --> 00:08:00,558
wrong curry so at the end you<font color="#E5E5E5"> will get</font>

115
00:07:56,009 --> 00:08:00,559
<font color="#E5E5E5">at it is completely wrong and completely</font>

116
00:08:01,669 --> 00:08:11,729
unstable<font color="#E5E5E5"> so that's why we need</font><font color="#CCCCCC"> to</font>

117
00:08:07,499 --> 00:08:15,269
<font color="#E5E5E5">synchronize to synchronize signals and</font>

118
00:08:11,729 --> 00:08:17,878
this is a very important notion in all

119
00:08:15,269 --> 00:08:20,789
<font color="#E5E5E5">digital circuit you need a clock to</font>

120
00:08:17,879 --> 00:08:24,629
create synchronization which means to

121
00:08:20,789 --> 00:08:29,099
define a time at<font color="#E5E5E5"> which the inputs are</font>

122
00:08:24,629 --> 00:08:32,688
stable and at which the<font color="#CCCCCC"> outputs</font><font color="#E5E5E5"> may be</font>

123
00:08:29,099 --> 00:08:38,389
generally the next clock will<font color="#CCCCCC"> be stable</font>

124
00:08:32,688 --> 00:08:41,250
and<font color="#E5E5E5"> this is not only for</font><font color="#CCCCCC"> dealing</font><font color="#E5E5E5"> with</font>

125
00:08:38,389 --> 00:08:43,919
<font color="#E5E5E5">propagation but also to deal with</font>

126
00:08:41,250 --> 00:08:47,310
<font color="#CCCCCC">violation of process I mean</font><font color="#E5E5E5"> not secrete</font>

127
00:08:43,919 --> 00:08:52,829
<font color="#E5E5E5">are created equal I might be some</font>

128
00:08:47,310 --> 00:08:56,430
difference<font color="#E5E5E5"> between two</font><font color="#CCCCCC"> that are created</font>

129
00:08:52,829 --> 00:08:57,540
<font color="#CCCCCC">from the</font><font color="#E5E5E5"> same manufacturer from many</font>

130
00:08:56,430 --> 00:09:00,479
reason

131
00:08:57,540 --> 00:09:04,079
and to deal with<font color="#E5E5E5"> this violation of</font>

132
00:09:00,480 --> 00:09:08,279
process<font color="#E5E5E5"> the resist way was to use the</font>

133
00:09:04,079 --> 00:09:16,979
clock<font color="#E5E5E5"> and to synchronize with</font><font color="#CCCCCC"> good with</font>

134
00:09:08,279 --> 00:09:18,779
a collector frequency so this is the

135
00:09:16,980 --> 00:09:26,010
other<font color="#E5E5E5"> important element</font><font color="#CCCCCC"> of the digital</font>

136
00:09:18,779 --> 00:09:29,959
circuit which is<font color="#CCCCCC"> flip-flop and it has a</font>

137
00:09:26,010 --> 00:09:34,079
<font color="#CCCCCC">natural input the clock and the</font>

138
00:09:29,959 --> 00:09:37,410
important part of the<font color="#CCCCCC"> kaki that when the</font>

139
00:09:34,079 --> 00:09:40,859
clock is rising<font color="#CCCCCC"> so this is a we</font><font color="#E5E5E5"> are</font>

140
00:09:37,410 --> 00:09:47,699
using rising edge clocks it defined a

141
00:09:40,860 --> 00:09:49,800
particular<font color="#E5E5E5"> time at which the input from</font>

142
00:09:47,699 --> 00:09:53,609
the the input<font color="#CCCCCC"> object</font><font color="#E5E5E5"> of the flip-flop</font>

143
00:09:49,800 --> 00:09:57,870
<font color="#E5E5E5">should be stable</font><font color="#CCCCCC"> and it memorized the</font>

144
00:09:53,610 --> 00:10:01,649
input<font color="#E5E5E5"> and so writes the input to the</font>

145
00:09:57,870 --> 00:10:05,339
output<font color="#E5E5E5"> for the next cycle so during this</font>

146
00:10:01,649 --> 00:10:12,000
tired<font color="#E5E5E5"> the output of the clock will be</font>

147
00:10:05,339 --> 00:10:14,899
<font color="#E5E5E5">computed stable so the computation part</font>

148
00:10:12,000 --> 00:10:17,699
could be able<font color="#CCCCCC"> to do the computation</font><font color="#E5E5E5"> and</font>

149
00:10:14,899 --> 00:10:22,230
<font color="#E5E5E5">the output of the computation should be</font>

150
00:10:17,699 --> 00:10:29,310
ready<font color="#CCCCCC"> for the next cycle doesn't</font><font color="#E5E5E5"> be fast</font>

151
00:10:22,230 --> 00:10:32,399
next<font color="#CCCCCC"> cycle so at the</font><font color="#E5E5E5"> end I would say</font>

152
00:10:29,310 --> 00:10:35,899
<font color="#E5E5E5">little design is a mix of computation</font>

153
00:10:32,399 --> 00:10:41,480
<font color="#E5E5E5">but</font><font color="#CCCCCC"> we gates</font><font color="#E5E5E5"> and memorization element</font>

154
00:10:35,899 --> 00:10:46,110
<font color="#E5E5E5">flip-flops</font><font color="#CCCCCC"> that job I would say the</font>

155
00:10:41,480 --> 00:10:49,380
basic notion of how to do<font color="#E5E5E5"> digital design</font>

156
00:10:46,110 --> 00:10:52,579
<font color="#CCCCCC">at least the theoretical part so it is</font>

157
00:10:49,380 --> 00:10:56,730
possible<font color="#CCCCCC"> to write the gates</font><font color="#E5E5E5"> using</font>

158
00:10:52,579 --> 00:11:01,040
improved<font color="#E5E5E5"> schematic editor but it's very</font>

159
00:10:56,730 --> 00:11:04,350
<font color="#E5E5E5">tedious and it doesn't scale very well</font>

160
00:11:01,040 --> 00:11:08,939
<font color="#E5E5E5">so that was how it was done in the early</font>

161
00:11:04,350 --> 00:11:11,490
80s<font color="#CCCCCC"> and during the eighties people</font>

162
00:11:08,939 --> 00:11:14,760
created<font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> description language</font>

163
00:11:11,490 --> 00:11:18,810
which is language<font color="#CCCCCC"> I would</font><font color="#E5E5E5"> say like see</font>

164
00:11:14,760 --> 00:11:24,450
it could be used<font color="#CCCCCC"> to</font><font color="#E5E5E5"> describe a complete</font>

165
00:11:18,810 --> 00:11:29,760
<font color="#CCCCCC">secret</font><font color="#E5E5E5"> and I will show a little</font><font color="#CCCCCC"> bit how</font>

166
00:11:24,450 --> 00:11:33,470
it<font color="#E5E5E5"> works so we will use this little</font>

167
00:11:29,760 --> 00:11:38,459
<font color="#CCCCCC">board which is which contain</font>

168
00:11:33,470 --> 00:11:41,550
<font color="#E5E5E5">programmable secrete so it's from lat it</font>

169
00:11:38,459 --> 00:11:48,300
was from<font color="#CCCCCC"> a tease and</font><font color="#E5E5E5"> it it's istick</font>

170
00:11:41,550 --> 00:11:53,219
board and we will use 22<font color="#E5E5E5"> below but very</font>

171
00:11:48,300 --> 00:11:57,810
<font color="#E5E5E5">expensive</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we will use some open</font>

172
00:11:53,220 --> 00:12:05,270
source<font color="#E5E5E5"> and</font><font color="#CCCCCC"> free tools so jdl for the</font>

173
00:11:57,810 --> 00:12:08,609
VHDL content<font color="#CCCCCC"> use this to create let list</font>

174
00:12:05,270 --> 00:12:11,160
Arachne<font color="#E5E5E5"> pair and I started by up to</font>

175
00:12:08,610 --> 00:12:14,130
<font color="#E5E5E5">create the</font><font color="#CCCCCC"> business of the father should</font>

176
00:12:11,160 --> 00:12:17,490
<font color="#CCCCCC">be sent to this to program this</font><font color="#E5E5E5"> FPGA and</font>

177
00:12:14,130 --> 00:12:19,350
<font color="#E5E5E5">I storm which</font><font color="#CCCCCC"> is a tool</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually</font>

178
00:12:17,490 --> 00:12:27,600
write<font color="#E5E5E5"> the bitstream</font>

179
00:12:19,350 --> 00:12:33,180
on this the chip so what is a look<font color="#CCCCCC"> of of</font>

180
00:12:27,600 --> 00:12:35,790
the<font color="#E5E5E5"> gel side so even in VHDL</font><font color="#CCCCCC"> Socrates</font>

181
00:12:33,180 --> 00:12:37,589
composed in two parts<font color="#CCCCCC"> that is entity and</font>

182
00:12:35,790 --> 00:12:40,949
architecture<font color="#E5E5E5"> so entity</font><font color="#CCCCCC"> defy two</font>

183
00:12:37,589 --> 00:12:47,130
interfaces<font color="#E5E5E5"> this is so interface we need</font>

184
00:12:40,950 --> 00:12:50,160
a clock and there is five<font color="#CCCCCC"> outputs which</font>

185
00:12:47,130 --> 00:12:52,470
<font color="#E5E5E5">will correspond to the LED so if the</font>

186
00:12:50,160 --> 00:12:54,839
<font color="#CCCCCC">output it</font><font color="#E5E5E5"> set is set to 1 the ladies on</font>

187
00:12:52,470 --> 00:12:58,410
and if they'll put<font color="#E5E5E5"> it set</font><font color="#CCCCCC"> to 0 the</font>

188
00:12:54,839 --> 00:13:01,890
ladies of very easy part

189
00:12:58,410 --> 00:13:04,890
this is the<font color="#E5E5E5"> interface of the circuit and</font>

190
00:13:01,890 --> 00:13:08,399
I command<font color="#E5E5E5"> the describe our chalet the</font>

191
00:13:04,890 --> 00:13:12,319
later are placed on the<font color="#CCCCCC"> circuit so that</font>

192
00:13:08,399 --> 00:13:15,120
they are here<font color="#E5E5E5"> and is not abused to know</font>

193
00:13:12,320 --> 00:13:19,190
which one<font color="#CCCCCC"> correspond</font><font color="#E5E5E5"> to which</font><font color="#CCCCCC"> plate</font>

194
00:13:15,120 --> 00:13:19,190
which way off<font color="#E5E5E5"> respond to which</font><font color="#CCCCCC"> late</font>

195
00:13:24,170 --> 00:13:35,920
and this is the internal<font color="#E5E5E5"> of the circuit</font>

196
00:13:27,730 --> 00:13:40,490
it it has I would say line<font color="#CCCCCC"> main process</font>

197
00:13:35,920 --> 00:13:44,599
which is some<font color="#E5E5E5"> computation so here within</font>

198
00:13:40,490 --> 00:13:47,900
a flip-flop<font color="#E5E5E5"> so if as in</font><font color="#CCCCCC"> H means that we</font>

199
00:13:44,600 --> 00:13:49,420
<font color="#E5E5E5">will do the computation only on the</font>

200
00:13:47,900 --> 00:13:53,270
rising edge of the clock and<font color="#E5E5E5"> the</font>

201
00:13:49,420 --> 00:13:58,520
<font color="#CCCCCC">computation</font><font color="#E5E5E5"> is just a contour and when</font>

202
00:13:53,270 --> 00:14:02,720
it it with<font color="#CCCCCC"> 300 million</font><font color="#E5E5E5"> it is reset</font><font color="#CCCCCC"> to</font>

203
00:13:58,520 --> 00:14:09,079
<font color="#E5E5E5">zero and the</font><font color="#CCCCCC"> LED</font><font color="#E5E5E5"> is flipped</font><font color="#CCCCCC"> so this is</font>

204
00:14:02,720 --> 00:14:10,820
just<font color="#CCCCCC"> a way to make LED blinks</font><font color="#E5E5E5"> not too</font>

205
00:14:09,080 --> 00:14:14,530
quickly<font color="#CCCCCC"> otherwise you can see</font><font color="#E5E5E5"> this thing</font>

206
00:14:10,820 --> 00:14:19,430
and not<font color="#E5E5E5"> to slows or wise you you</font><font color="#CCCCCC"> convert</font>

207
00:14:14,530 --> 00:14:27,380
until it flips<font color="#E5E5E5"> so this is a very simple</font>

208
00:14:19,430 --> 00:14:31,910
<font color="#CCCCCC">example and this is I will say one</font>

209
00:14:27,380 --> 00:14:35,780
possible way to do the world war ii

210
00:14:31,910 --> 00:14:38,569
<font color="#E5E5E5">program at the end the</font><font color="#CCCCCC"> fpga so first for</font>

211
00:14:35,780 --> 00:14:42,140
VHDL<font color="#E5E5E5"> this is a 10 bit particular</font><font color="#CCCCCC"> gel you</font>

212
00:14:38,570 --> 00:14:46,880
<font color="#E5E5E5">need to analyze</font><font color="#CCCCCC"> the sources so that</font><font color="#E5E5E5"> the</font>

213
00:14:42,140 --> 00:14:49,880
system knows about the<font color="#E5E5E5"> files and so this</font>

214
00:14:46,880 --> 00:14:52,220
is done using<font color="#E5E5E5"> a gel and then we do</font>

215
00:14:49,880 --> 00:14:56,540
synthesis so we create a latest so the

216
00:14:52,220 --> 00:14:58,940
list of gates<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> derived from the</font>

217
00:14:56,540 --> 00:15:04,219
description the textual description we

218
00:14:58,940 --> 00:15:08,570
<font color="#E5E5E5">have seen that before</font><font color="#CCCCCC"> so we used VHDL</font>

219
00:15:04,220 --> 00:15:12,620
for<font color="#E5E5E5"> this and VHDL as a plug-in for</font>

220
00:15:08,570 --> 00:15:15,290
<font color="#CCCCCC">crating</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> netlist</font><font color="#E5E5E5"> and we say we want</font>

221
00:15:12,620 --> 00:15:22,190
<font color="#CCCCCC">to sensitize device for this</font><font color="#E5E5E5"> particular</font>

222
00:15:15,290 --> 00:15:24,740
<font color="#E5E5E5">circuit so it creates let</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> leaf</font>

223
00:15:22,190 --> 00:15:30,440
which<font color="#CCCCCC"> is at</font><font color="#E5E5E5"> least which is called at</font>

224
00:15:24,740 --> 00:15:34,960
least then we use<font color="#CCCCCC"> ugly pierre to assign</font>

225
00:15:30,440 --> 00:15:38,000
and place the values get<font color="#E5E5E5"> to to the PGA</font>

226
00:15:34,960 --> 00:15:40,939
<font color="#CCCCCC">and for these</font><font color="#E5E5E5"> tools with</font>

227
00:15:38,000 --> 00:15:47,240
also to define where the<font color="#CCCCCC"> LEDs are placed</font>

228
00:15:40,939 --> 00:15:52,879
in the on the pad<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be guessed by the</font>

229
00:15:47,240 --> 00:15:55,639
latitude so you need to specify the

230
00:15:52,879 --> 00:15:58,339
input that<font color="#E5E5E5"> was created by</font><font color="#CCCCCC"> uses you need</font>

231
00:15:55,639 --> 00:16:03,350
to specify the press file<font color="#E5E5E5"> from the pad</font>

232
00:15:58,339 --> 00:16:11,329
and<font color="#E5E5E5"> in generate a</font><font color="#CCCCCC"> Lasky file that is</font>

233
00:16:03,350 --> 00:16:13,959
then used by ice pack to create a binary

234
00:16:11,329 --> 00:16:21,290
and then by<font color="#CCCCCC"> ice port to send the binary</font>

235
00:16:13,959 --> 00:16:23,089
directly to the chip<font color="#E5E5E5"> so it was</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> was</font>

236
00:16:21,290 --> 00:16:23,889
already<font color="#E5E5E5"> done directly for</font><font color="#CCCCCC"> thee for</font><font color="#E5E5E5"> this</font>

237
00:16:23,089 --> 00:16:28,459
card

238
00:16:23,889 --> 00:16:31,819
in fact the binary file is store in a

239
00:16:28,459 --> 00:16:35,839
flash<font color="#CCCCCC"> on this board so like it will work</font>

240
00:16:31,819 --> 00:16:37,219
<font color="#E5E5E5">directly</font><font color="#CCCCCC"> when I</font><font color="#E5E5E5"> pour out and I have</font>

241
00:16:35,839 --> 00:16:41,079
something<font color="#CCCCCC"> with a bit more complex</font><font color="#E5E5E5"> than</font>

242
00:16:37,220 --> 00:16:41,079
just blinking it also rotate

243
00:16:49,170 --> 00:16:57,569
so this is a list<font color="#E5E5E5"> of tools we are fused</font>

244
00:16:52,019 --> 00:17:01,230
<font color="#E5E5E5">those entities before</font><font color="#CCCCCC"> I use these</font><font color="#E5E5E5"> the</font>

245
00:16:57,570 --> 00:17:03,870
<font color="#E5E5E5">agile front-end which is my tool and I</font>

246
00:17:01,230 --> 00:17:10,699
like the pair to place a note on<font color="#E5E5E5"> the</font>

247
00:17:03,870 --> 00:17:17,819
chip and the<font color="#CCCCCC"> world</font><font color="#E5E5E5"> I see 40 tools set</font>

248
00:17:10,699 --> 00:17:44,820
from default which is<font color="#CCCCCC"> I stone any</font>

249
00:17:17,819 --> 00:17:48,720
question yes yes<font color="#E5E5E5"> okay so question about</font>

250
00:17:44,820 --> 00:17:52,260
the state and feature of<font color="#E5E5E5"> jail okay so</font>

251
00:17:48,720 --> 00:18:01,320
first<font color="#CCCCCC"> SDL</font><font color="#E5E5E5"> at least at</font><font color="#CCCCCC"> the beginning was</font>

252
00:17:52,260 --> 00:18:03,960
a similar talk<font color="#E5E5E5"> yeah so at the</font><font color="#CCCCCC"> beginning</font>

253
00:18:01,320 --> 00:18:06,600
the main purpose of<font color="#CCCCCC"> JGL</font><font color="#E5E5E5"> is to do</font>

254
00:18:03,960 --> 00:18:09,809
simulation which means just not creating

255
00:18:06,600 --> 00:18:12,449
a circuit<font color="#E5E5E5"> but testing the circuit just</font>

256
00:18:09,809 --> 00:18:14,190
<font color="#E5E5E5">on your computer this part is I would</font>

257
00:18:12,450 --> 00:18:18,419
say well advanced

258
00:18:14,190 --> 00:18:22,350
<font color="#CCCCCC">it supports</font><font color="#E5E5E5"> as far as I know everything</font>

259
00:18:18,419 --> 00:18:26,940
from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> nativist and odd and mini</font>

260
00:18:22,350 --> 00:18:29,219
feature from the 2008<font color="#E5E5E5"> standard for</font>

261
00:18:26,940 --> 00:18:31,940
synthesis which<font color="#E5E5E5"> mean using the idea to</font>

262
00:18:29,220 --> 00:18:36,350
create a secrete it's a very very<font color="#E5E5E5"> very</font>

263
00:18:31,940 --> 00:18:40,169
<font color="#E5E5E5">working provides cool but it's advised I</font>

264
00:18:36,350 --> 00:18:41,428
<font color="#CCCCCC">live need that's</font><font color="#E5E5E5"> beta and it only</font>

265
00:18:40,169 --> 00:18:42,450
<font color="#E5E5E5">support when it's only</font><font color="#CCCCCC"> a</font>

266
00:18:41,429 --> 00:18:48,380
<font color="#CCCCCC">proof-of-concept</font>

267
00:18:42,450 --> 00:18:51,510
<font color="#E5E5E5">in this report</font><font color="#CCCCCC"> I would say basic feature</font>

268
00:18:48,380 --> 00:18:53,549
but it doesn't<font color="#CCCCCC"> wear</font><font color="#E5E5E5"> support for example</font>

269
00:18:51,510 --> 00:18:56,370
bursts are not well supported you know

270
00:18:53,549 --> 00:19:00,889
that I would<font color="#CCCCCC"> tell proof</font><font color="#E5E5E5"> of concept I</font>

271
00:18:56,370 --> 00:19:00,889
have to put more work and<font color="#E5E5E5"> time on it</font>

272
00:19:06,950 --> 00:19:20,340
<font color="#CCCCCC">haha</font><font color="#E5E5E5"> okay the question is out to debug</font>

273
00:19:14,389 --> 00:19:22,729
<font color="#CCCCCC">usually you don't debug that's a</font>

274
00:19:20,340 --> 00:19:25,709
possibility<font color="#E5E5E5"> you can get right first time</font>

275
00:19:22,730 --> 00:19:29,070
it's it's<font color="#E5E5E5"> okay well what usually what</font>

276
00:19:25,710 --> 00:19:32,009
you usually do is<font color="#CCCCCC"> you do</font><font color="#E5E5E5"> simulation so</font>

277
00:19:29,070 --> 00:19:36,658
you do<font color="#CCCCCC"> no one with the simulator your</font>

278
00:19:32,009 --> 00:19:39,960
VHDL design or the<font color="#CCCCCC"> rug design</font><font color="#E5E5E5"> and you</font>

279
00:19:36,659 --> 00:19:42,779
debug it like software<font color="#E5E5E5"> and then when you</font>

280
00:19:39,960 --> 00:19:45,869
try when you program it<font color="#E5E5E5"> should be almost</font>

281
00:19:42,779 --> 00:19:50,220
<font color="#E5E5E5">okay there's some possibility for</font>

282
00:19:45,869 --> 00:19:53,590
example to use a notepad<font color="#E5E5E5"> to sort an</font>

283
00:19:50,220 --> 00:19:55,190
internal signal<font color="#E5E5E5"> and use oscilloscope or</font>

284
00:19:53,590 --> 00:19:59,519
[Music]

285
00:19:55,190 --> 00:20:04,129
<font color="#CCCCCC">tools like that to debug but it's very</font>

286
00:19:59,519 --> 00:20:04,129
difficult<font color="#CCCCCC"> to do debugging on a hardware</font>

287
00:20:05,869 --> 00:20:21,299
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> okay the question is</font><font color="#E5E5E5"> about</font>

288
00:20:18,629 --> 00:20:23,459
<font color="#E5E5E5">debugging use using detect Vegeta is not</font>

289
00:20:21,299 --> 00:20:27,509
was the first<font color="#E5E5E5"> purpose attack is to test</font>

290
00:20:23,460 --> 00:20:31,169
<font color="#E5E5E5">this okay okay the first</font><font color="#CCCCCC"> purpose of G</font>

291
00:20:27,509 --> 00:20:32,490
tag is to<font color="#E5E5E5"> do</font><font color="#CCCCCC"> hardware testing which is</font>

292
00:20:31,169 --> 00:20:34,830
not the<font color="#CCCCCC"> beginning just testing that</font><font color="#E5E5E5"> the</font>

293
00:20:32,490 --> 00:20:37,200
chip works correctly

294
00:20:34,830 --> 00:20:41,418
then there<font color="#E5E5E5"> are some extension for</font>

295
00:20:37,200 --> 00:20:43,759
example to read a particular wire

296
00:20:41,419 --> 00:20:48,179
<font color="#E5E5E5">particular state</font><font color="#CCCCCC"> of a</font><font color="#E5E5E5"> particular</font>

297
00:20:43,759 --> 00:20:51,499
flip-flop within a circuit which could

298
00:20:48,179 --> 00:20:53,879
be<font color="#E5E5E5"> used to debug your circuit but it</font>

299
00:20:51,499 --> 00:20:56,879
<font color="#CCCCCC">depends on whether it is supported by a</font>

300
00:20:53,879 --> 00:21:01,639
particular<font color="#E5E5E5"> chip or not but it is</font><font color="#CCCCCC"> a usual</font>

301
00:20:56,879 --> 00:21:01,639
<font color="#E5E5E5">interface to do that yes yes</font>

302
00:21:02,230 --> 00:21:30,640
yeah<font color="#CCCCCC"> question is about the limitation of</font>

303
00:21:24,309 --> 00:21:33,490
<font color="#E5E5E5">this 22 euro what chip what okay the</font>

304
00:21:30,640 --> 00:21:36,910
main<font color="#E5E5E5"> limitation is</font><font color="#CCCCCC"> the size and</font><font color="#E5E5E5"> the</font>

305
00:21:33,490 --> 00:21:41,470
<font color="#CCCCCC">number of input</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> outputs for this</font>

306
00:21:36,910 --> 00:21:46,059
chip<font color="#CCCCCC"> actually it is</font><font color="#E5E5E5"> already quite large</font>

307
00:21:41,470 --> 00:21:50,160
<font color="#E5E5E5">you can use you can implement</font><font color="#CCCCCC"> some</font>

308
00:21:46,059 --> 00:21:56,549
processor in this chip is a memory with

309
00:21:50,160 --> 00:21:59,549
simple graphical output<font color="#E5E5E5"> so it's not that</font>

310
00:21:56,549 --> 00:21:59,549
small

311
00:21:59,559 --> 00:22:03,668
if you want to do<font color="#E5E5E5"> something that</font><font color="#CCCCCC"> is very</font>

312
00:22:01,360 --> 00:22:08,709
<font color="#CCCCCC">much more</font><font color="#E5E5E5"> complex for example if you</font>

313
00:22:03,669 --> 00:22:12,220
want<font color="#E5E5E5"> to interface with a PCI card</font>

314
00:22:08,710 --> 00:22:15,400
this chip is<font color="#CCCCCC"> not powerful enough to</font><font color="#E5E5E5"> do</font>

315
00:22:12,220 --> 00:22:27,880
<font color="#E5E5E5">that you need to</font><font color="#CCCCCC"> buy a</font><font color="#E5E5E5"> larger ship and</font>

316
00:22:15,400 --> 00:22:30,549
multiple t1<font color="#CCCCCC"> ok question is about there</font>

317
00:22:27,880 --> 00:22:36,549
was no timing<font color="#E5E5E5"> constraint</font><font color="#CCCCCC"> the point is</font>

318
00:22:30,549 --> 00:22:40,110
<font color="#E5E5E5">that this is</font><font color="#CCCCCC"> a very simple design and it</font>

319
00:22:36,549 --> 00:22:47,799
need to<font color="#CCCCCC"> write a near swimming areas so</font>

320
00:22:40,110 --> 00:22:51,760
it's way way below any constraint<font color="#CCCCCC"> I'm</font>

321
00:22:47,799 --> 00:22:54,220
not I<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> think with this tooth set</font>

322
00:22:51,760 --> 00:22:57,870
<font color="#E5E5E5">right to shine</font><font color="#CCCCCC"> I not I</font><font color="#E5E5E5"> don't think so</font>

323
00:22:54,220 --> 00:22:57,870
I made me vomit and I don't<font color="#CCCCCC"> think so</font>

324
00:23:05,350 --> 00:23:13,010
<font color="#CCCCCC">hello the question is</font><font color="#E5E5E5"> about other chip</font>

325
00:23:08,690 --> 00:23:17,450
<font color="#E5E5E5">supported by the</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> chain so for a full</font>

326
00:23:13,010 --> 00:23:19,250
<font color="#CCCCCC">tool chain</font><font color="#E5E5E5"> it's I think it's only it's</font>

327
00:23:17,450 --> 00:23:22,270
<font color="#E5E5E5">not only see but it's only family it is</font>

328
00:23:19,250 --> 00:23:25,640
<font color="#E5E5E5">completely supported so why you can use</font>

329
00:23:22,270 --> 00:23:28,430
<font color="#E5E5E5">full open-source tool chain there are</font>

330
00:23:25,640 --> 00:23:33,010
<font color="#E5E5E5">some effort I have heard to support also</font>

331
00:23:28,430 --> 00:23:52,510
existing devices but it's far<font color="#CCCCCC"> from being</font>

332
00:23:33,010 --> 00:23:55,220
<font color="#E5E5E5">done yet but you're</font><font color="#CCCCCC"> welcome to join okay</font>

333
00:23:52,510 --> 00:23:58,420
<font color="#E5E5E5">John</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> directly you can I say you can</font>

334
00:23:55,220 --> 00:24:01,400
use a<font color="#E5E5E5"> wrist</font><font color="#CCCCCC"> five</font><font color="#E5E5E5"> small risk</font><font color="#CCCCCC"> five</font>

335
00:23:58,420 --> 00:24:04,250
processor in this chip<font color="#E5E5E5"> it's possible it</font>

336
00:24:01,400 --> 00:24:08,390
was it has been done maybe<font color="#E5E5E5"> not to run</font>

337
00:24:04,250 --> 00:24:10,810
Linux but at least<font color="#E5E5E5"> an ability program</font>

338
00:24:08,390 --> 00:24:10,810
yes it's possible

339
00:24:11,330 --> 00:24:16,429
[Applause]

