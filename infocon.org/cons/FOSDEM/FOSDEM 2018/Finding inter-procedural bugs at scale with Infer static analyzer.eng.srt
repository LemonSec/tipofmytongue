1
00:00:07,870 --> 00:00:13,040
hi everyone<font color="#E5E5E5"> I'm sure I'm a software</font>

2
00:00:10,880 --> 00:00:17,180
engineer<font color="#E5E5E5"> at Facebook in London and I</font>

3
00:00:13,040 --> 00:00:23,140
work<font color="#E5E5E5"> on the info team so infer is not</font>

4
00:00:17,180 --> 00:00:23,140
that sorry

5
00:00:28,410 --> 00:00:34,570
the screen<font color="#E5E5E5"> no definite in that play</font>

6
00:00:33,100 --> 00:00:38,820
<font color="#CCCCCC">thank you</font>

7
00:00:34,570 --> 00:00:42,100
why did<font color="#E5E5E5"> it</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> that works so infer is a</font>

8
00:00:38,820 --> 00:00:43,739
static analyzer<font color="#E5E5E5"> it's open source</font><font color="#CCCCCC"> you can</font>

9
00:00:42,100 --> 00:00:46,120
<font color="#E5E5E5">find it on github</font>

10
00:00:43,739 --> 00:00:49,959
and it<font color="#CCCCCC"> shipped</font><font color="#E5E5E5"> with a number of analysis</font>

11
00:00:46,120 --> 00:00:53,379
<font color="#E5E5E5">by default that do a range of things the</font>

12
00:00:49,960 --> 00:00:56,320
most advanced of which is memory safety

13
00:00:53,380 --> 00:00:58,390
analysis that tries to flag bugs about

14
00:00:56,320 --> 00:01:00,820
null pointer exceptions or memory

15
00:00:58,390 --> 00:01:06,580
resource leaks or double<font color="#CCCCCC"> free or the</font>

16
00:01:00,820 --> 00:01:08,680
like<font color="#CCCCCC"> and it also has simpler analysis</font>

17
00:01:06,580 --> 00:01:10,360
all the way to linters that you there's

18
00:01:08,680 --> 00:01:12,460
even a<font color="#CCCCCC"> small</font><font color="#E5E5E5"> DSL to define your own</font>

19
00:01:10,360 --> 00:01:15,580
<font color="#E5E5E5">syntactic checks on on the code for</font>

20
00:01:12,460 --> 00:01:17,619
instance and one of the defining

21
00:01:15,580 --> 00:01:19,690
characteristic of the more complex

22
00:01:17,620 --> 00:01:22,390
<font color="#CCCCCC">analysis in infer is that our</font>

23
00:01:19,690 --> 00:01:25,658
interprocedural<font color="#E5E5E5"> so that means they</font><font color="#CCCCCC"> are</font>

24
00:01:22,390 --> 00:01:26,650
able<font color="#CCCCCC"> to flag</font><font color="#E5E5E5"> issues that involve several</font>

25
00:01:25,659 --> 00:01:30,640
procedures at once

26
00:01:26,650 --> 00:01:33,550
possibly in several files<font color="#E5E5E5"> so in the rest</font>

27
00:01:30,640 --> 00:01:35,920
of the talk I'll explain a bit about

28
00:01:33,550 --> 00:01:41,710
<font color="#E5E5E5">inverse architecture and how it does</font>

29
00:01:35,920 --> 00:01:44,680
interprocedural analysis<font color="#E5E5E5"> and in</font><font color="#CCCCCC"> a at a</font>

30
00:01:41,710 --> 00:01:48,070
high level and I will also<font color="#CCCCCC"> explain how</font>

31
00:01:44,680 --> 00:01:54,370
we deploy<font color="#CCCCCC"> it at Facebook</font><font color="#E5E5E5"> where it does</font>

32
00:01:48,070 --> 00:01:57,039
<font color="#CCCCCC">tip-time analysis ok so in first stats</font>

33
00:01:54,370 --> 00:02:01,330
<font color="#E5E5E5">from project which is some source files</font>

34
00:01:57,040 --> 00:02:05,860
<font color="#E5E5E5">and build system to to build these files</font>

35
00:02:01,330 --> 00:02:08,288
and<font color="#CCCCCC"> its</font><font color="#E5E5E5"> architecture like a compiler so</font>

36
00:02:05,860 --> 00:02:10,568
<font color="#CCCCCC">there first there's a</font><font color="#E5E5E5"> front-end that</font>

37
00:02:08,288 --> 00:02:13,690
<font color="#E5E5E5">takes source code in the source language</font>

38
00:02:10,568 --> 00:02:16,690
so<font color="#E5E5E5"> Java or language is supported by</font>

39
00:02:13,690 --> 00:02:19,030
clang and much like a compiler it

40
00:02:16,690 --> 00:02:22,060
translates them into a much simpler and

41
00:02:19,030 --> 00:02:26,860
common to all languages<font color="#CCCCCC"> ir</font><font color="#E5E5E5"> that is</font>

42
00:02:22,060 --> 00:02:30,160
called<font color="#CCCCCC"> SI l and s</font><font color="#E5E5E5"> IL is much simpler</font>

43
00:02:26,860 --> 00:02:33,069
<font color="#CCCCCC">than Java or C++ is just basically loads</font>

44
00:02:30,160 --> 00:02:37,180
and stores and function calls and

45
00:02:33,069 --> 00:02:39,458
<font color="#CCCCCC">voters then once all the source files</font>

46
00:02:37,180 --> 00:02:43,749
have<font color="#CCCCCC"> been translated into in first</font>

47
00:02:39,459 --> 00:02:46,510
language<font color="#CCCCCC"> the back end analysis</font><font color="#E5E5E5"> run and</font>

48
00:02:43,749 --> 00:02:49,840
<font color="#E5E5E5">for so for each procedure they compute a</font>

49
00:02:46,510 --> 00:02:51,790
summary of the procedure in<font color="#E5E5E5"> isolation of</font>

50
00:02:49,840 --> 00:02:54,549
all the other procedures<font color="#CCCCCC"> and they as</font>

51
00:02:51,790 --> 00:02:57,189
told as what we call specs<font color="#E5E5E5"> so there's</font>

52
00:02:54,549 --> 00:02:59,859
one specification<font color="#E5E5E5"> for each procedure</font><font color="#CCCCCC"> and</font>

53
00:02:57,189 --> 00:03:02,560
this is also the point where errors<font color="#E5E5E5"> are</font>

54
00:02:59,859 --> 00:03:04,329
flagged<font color="#E5E5E5"> so most of the analysis work by</font>

55
00:03:02,560 --> 00:03:07,120
trying to<font color="#CCCCCC"> establish that the procedure</font>

56
00:03:04,329 --> 00:03:09,250
has no bug<font color="#CCCCCC"> and when there's a failure in</font>

57
00:03:07,120 --> 00:03:12,010
<font color="#CCCCCC">that proof then a bunch of heuristics</font>

58
00:03:09,250 --> 00:03:13,780
<font color="#E5E5E5">kick</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> to classify the failure of the</font>

59
00:03:12,010 --> 00:03:16,870
proof either as a weakness in the

60
00:03:13,780 --> 00:03:19,900
<font color="#E5E5E5">analyzer or something that looks more</font>

61
00:03:16,870 --> 00:03:21,760
<font color="#CCCCCC">like a bug that we</font><font color="#E5E5E5"> should report and so</font>

62
00:03:19,900 --> 00:03:24,459
at the<font color="#CCCCCC"> end of</font><font color="#E5E5E5"> the analysis</font><font color="#CCCCCC"> we collect</font>

63
00:03:21,760 --> 00:03:27,819
all these issues<font color="#E5E5E5"> we found and we we</font>

64
00:03:24,459 --> 00:03:31,780
build a<font color="#E5E5E5"> report okay let's do mean into</font>

65
00:03:27,819 --> 00:03:34,089
the front end<font color="#E5E5E5"> how it works so there are</font>

66
00:03:31,780 --> 00:03:36,129
two front ends<font color="#E5E5E5"> one for</font><font color="#CCCCCC"> Klang languages</font>

67
00:03:34,090 --> 00:03:39,189
and one for<font color="#CCCCCC"> java i</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> describe them</font>

68
00:03:36,129 --> 00:03:42,009
both<font color="#E5E5E5"> so we start with the project the</font>

69
00:03:39,189 --> 00:03:45,310
source code<font color="#CCCCCC"> and the build system and</font><font color="#E5E5E5"> now</font>

70
00:03:42,009 --> 00:03:47,259
we need<font color="#E5E5E5"> to find where the weather code</font>

71
00:03:45,310 --> 00:03:49,419
lives so we act we<font color="#E5E5E5"> ask the build system</font>

72
00:03:47,259 --> 00:03:51,638
<font color="#E5E5E5">actually so the way you would</font><font color="#CCCCCC"> run infer</font>

73
00:03:49,419 --> 00:03:54,310
is just typing<font color="#E5E5E5"> for instance info - -</font>

74
00:03:51,639 --> 00:03:56,709
make and info<font color="#E5E5E5"> will do all the work of in</font>

75
00:03:54,310 --> 00:03:58,840
your lab figuring out what to do and<font color="#CCCCCC"> the</font>

76
00:03:56,709 --> 00:04:02,709
way it works is it runs the build system

77
00:03:58,840 --> 00:04:05,349
<font color="#CCCCCC">and capture calls to the compiler that</font>

78
00:04:02,709 --> 00:04:07,269
<font color="#CCCCCC">happened during</font><font color="#E5E5E5"> compilation</font><font color="#CCCCCC"> and so it</font>

79
00:04:05,349 --> 00:04:09,939
records for each<font color="#E5E5E5"> source file the way</font><font color="#CCCCCC"> -</font>

80
00:04:07,269 --> 00:04:11,590
it recalls<font color="#E5E5E5"> that</font><font color="#CCCCCC"> allows it to</font><font color="#E5E5E5"> discover</font>

81
00:04:09,939 --> 00:04:15,220
which software should<font color="#E5E5E5"> be analyzed and</font>

82
00:04:11,590 --> 00:04:18,099
how they are compiled and so it's a bit

83
00:04:15,220 --> 00:04:19,810
<font color="#E5E5E5">of a it's not the most robust past of</font>

84
00:04:18,099 --> 00:04:22,150
infer because you have to do this work

85
00:04:19,810 --> 00:04:23,889
<font color="#CCCCCC">for</font><font color="#E5E5E5"> each build system all the build</font>

86
00:04:22,150 --> 00:04:25,570
systems are different<font color="#CCCCCC"> and there's no</font>

87
00:04:23,889 --> 00:04:29,320
sort of unified way to extract<font color="#E5E5E5"> the</font>

88
00:04:25,570 --> 00:04:30,729
<font color="#CCCCCC">information</font><font color="#E5E5E5"> of how to build file given</font>

89
00:04:29,320 --> 00:04:33,699
the build system<font color="#E5E5E5"> so that's a bit</font>

90
00:04:30,729 --> 00:04:39,219
annoying<font color="#CCCCCC"> if you have few no solutions to</font>

91
00:04:33,699 --> 00:04:42,880
this problem<font color="#E5E5E5"> please</font><font color="#CCCCCC"> talk to</font><font color="#E5E5E5"> me but</font><font color="#CCCCCC"> we</font>

92
00:04:39,219 --> 00:04:47,260
have integrations<font color="#CCCCCC"> for few built systems</font>

93
00:04:42,880 --> 00:04:49,830
<font color="#E5E5E5">and</font><font color="#CCCCCC"> networks</font><font color="#E5E5E5"> so if it's a Java file then</font>

94
00:04:47,260 --> 00:04:52,450
<font color="#E5E5E5">we call Java C to get Java bytecode and</font>

95
00:04:49,830 --> 00:04:54,070
then or Java from<font color="#E5E5E5"> turn actually starts</font>

96
00:04:52,450 --> 00:04:57,219
from<font color="#E5E5E5"> the bytecode and not the Java</font>

97
00:04:54,070 --> 00:05:02,700
source and translates Java bytecode<font color="#E5E5E5"> into</font>

98
00:04:57,220 --> 00:05:05,500
si<font color="#E5E5E5"> L and if it's clang then we run clang</font>

99
00:05:02,700 --> 00:05:07,750
to compile the file and we attach our

100
00:05:05,500 --> 00:05:11,590
own<font color="#CCCCCC"> client plug-in</font><font color="#E5E5E5"> that dumps the clang</font>

101
00:05:07,750 --> 00:05:13,870
ast in some serialize format that<font color="#E5E5E5"> a</font>

102
00:05:11,590 --> 00:05:22,869
<font color="#E5E5E5">front-end is able to read from</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> camel</font>

103
00:05:13,870 --> 00:05:25,570
and<font color="#E5E5E5"> translate also into</font><font color="#CCCCCC"> CL and there's</font>

104
00:05:22,870 --> 00:05:29,020
also the place<font color="#CCCCCC"> where we plug or clang</font>

105
00:05:25,570 --> 00:05:33,460
linters so because here we see the<font color="#E5E5E5"> ast</font>

106
00:05:29,020 --> 00:05:36,039
we can run<font color="#E5E5E5"> this source code very</font>

107
00:05:33,460 --> 00:05:37,510
syntactic analysis that<font color="#E5E5E5"> just matches</font>

108
00:05:36,040 --> 00:05:44,590
nodes in the<font color="#CCCCCC"> ice</font><font color="#E5E5E5"> tea and</font><font color="#CCCCCC"> make some</font>

109
00:05:37,510 --> 00:05:46,090
reports and so we're able<font color="#E5E5E5"> to do that for</font>

110
00:05:44,590 --> 00:05:48,179
<font color="#E5E5E5">clang but not</font><font color="#CCCCCC"> for Java because Jenna</font>

111
00:05:46,090 --> 00:05:51,099
will start with the bytecode levels

112
00:05:48,180 --> 00:05:55,380
<font color="#E5E5E5">there's no</font><font color="#CCCCCC"> linters</font><font color="#E5E5E5"> for Java in infrared</font>

113
00:05:51,100 --> 00:06:01,420
the<font color="#CCCCCC"> movement so</font><font color="#E5E5E5"> that was the</font><font color="#CCCCCC"> front-end</font>

114
00:05:55,380 --> 00:06:03,400
let's look at the<font color="#CCCCCC"> backend</font><font color="#E5E5E5"> now so the</font>

115
00:06:01,420 --> 00:06:06,400
<font color="#CCCCCC">backend takes procedures that were</font>

116
00:06:03,400 --> 00:06:08,710
translated<font color="#E5E5E5"> by the</font><font color="#CCCCCC"> front-end</font><font color="#E5E5E5"> and it tries</font>

117
00:06:06,400 --> 00:06:10,950
to<font color="#E5E5E5"> find specifications for them so there</font>

118
00:06:08,710 --> 00:06:12,789
are many analysis in infer as I said

119
00:06:10,950 --> 00:06:15,610
they are<font color="#E5E5E5"> all based on the same</font>

120
00:06:12,790 --> 00:06:18,430
<font color="#CCCCCC">architecture that is compositional and</font>

121
00:06:15,610 --> 00:06:21,670
under man<font color="#CCCCCC"> so</font><font color="#E5E5E5"> it's compositional that</font>

122
00:06:18,430 --> 00:06:23,470
means that it will schedule the<font color="#E5E5E5"> analysis</font>

123
00:06:21,670 --> 00:06:25,600
to look at each procedure<font color="#E5E5E5"> in isolation</font>

124
00:06:23,470 --> 00:06:28,990
without looking at the column context of

125
00:06:25,600 --> 00:06:31,330
each<font color="#E5E5E5"> procedure or</font><font color="#CCCCCC"> all the arguments with</font>

126
00:06:28,990 --> 00:06:35,710
which<font color="#E5E5E5"> the procedure is called so the</font>

127
00:06:31,330 --> 00:06:37,840
analysis each analysis<font color="#CCCCCC"> has to be smart</font>

128
00:06:35,710 --> 00:06:39,640
enough<font color="#E5E5E5"> to be able to</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> on a procedure</font>

129
00:06:37,840 --> 00:06:40,679
<font color="#E5E5E5">without knowing anything about where</font>

130
00:06:39,640 --> 00:06:43,990
it's called

131
00:06:40,680 --> 00:06:45,820
and in<font color="#CCCCCC"> exchange that allows us to reuse</font>

132
00:06:43,990 --> 00:06:48,220
<font color="#E5E5E5">the summary computed for the procedure</font>

133
00:06:45,820 --> 00:06:51,430
in all the<font color="#CCCCCC"> coding context</font><font color="#E5E5E5"> so that</font><font color="#CCCCCC"> there</font>

134
00:06:48,220 --> 00:06:53,949
is a infer to scale very<font color="#E5E5E5"> nicely</font>

135
00:06:51,430 --> 00:06:56,410
and the architecture is also<font color="#E5E5E5"> under man</font>

136
00:06:53,949 --> 00:07:00,240
<font color="#E5E5E5">what I mean by that is</font><font color="#CCCCCC"> that each</font>

137
00:06:56,410 --> 00:07:02,830
procedure is<font color="#CCCCCC"> analyzed</font><font color="#E5E5E5"> if it's needed for</font>

138
00:07:00,240 --> 00:07:07,479
the analysis<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's analyzed when it's</font>

139
00:07:02,830 --> 00:07:08,889
needed<font color="#E5E5E5"> so let's look at an</font><font color="#CCCCCC"> example I'm</font>

140
00:07:07,479 --> 00:07:11,169
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> use the allocates memory</font>

141
00:07:08,889 --> 00:07:14,620
checker that we have as an<font color="#CCCCCC"> example so</font>

142
00:07:11,169 --> 00:07:16,870
that's<font color="#E5E5E5"> a checker that reports whenever a</font>

143
00:07:14,620 --> 00:07:21,190
function<font color="#E5E5E5"> is allocated with no allocation</font>

144
00:07:16,870 --> 00:07:24,820
like<font color="#E5E5E5"> GU here</font><font color="#CCCCCC"> but it calls a function</font>

145
00:07:21,190 --> 00:07:26,889
<font color="#CCCCCC">that</font><font color="#E5E5E5"> eventually</font><font color="#CCCCCC"> allocates memory so</font>

146
00:07:24,820 --> 00:07:28,719
let's see how this works<font color="#CCCCCC"> so let's</font><font color="#E5E5E5"> say we</font>

147
00:07:26,889 --> 00:07:31,690
<font color="#CCCCCC">are only interested in analyzing</font><font color="#E5E5E5"> the</font>

148
00:07:28,720 --> 00:07:36,760
projections in a food<font color="#CCCCCC"> Java so we start</font>

149
00:07:31,690 --> 00:07:39,340
with one of<font color="#E5E5E5"> them like foo and we see</font>

150
00:07:36,760 --> 00:07:41,380
that it<font color="#E5E5E5"> caused bar so we need to compute</font>

151
00:07:39,340 --> 00:07:44,739
the<font color="#E5E5E5"> summary for bar first</font><font color="#CCCCCC"> so we go do</font>

152
00:07:41,380 --> 00:07:48,580
that you<font color="#E5E5E5"> notice that bar here is another</font>

153
00:07:44,740 --> 00:07:50,759
file also<font color="#E5E5E5"> I've written this as ma less</font>

154
00:07:48,580 --> 00:07:53,710
Java code but it's actually in the

155
00:07:50,759 --> 00:07:56,169
<font color="#E5E5E5">intermediate language of infer so</font>

156
00:07:53,710 --> 00:08:00,340
<font color="#E5E5E5">infernal is this bar and you notice that</font>

157
00:07:56,169 --> 00:08:03,039
it allocates memory on line<font color="#CCCCCC"> 3 so that's</font>

158
00:08:00,340 --> 00:08:05,229
<font color="#E5E5E5">the summary it computes it remembers</font>

159
00:08:03,039 --> 00:08:07,870
<font color="#E5E5E5">that the only thing we remember about</font>

160
00:08:05,229 --> 00:08:12,039
<font color="#E5E5E5">bar now is that on line 3 it allocates</font>

161
00:08:07,870 --> 00:08:13,720
memory so we come<font color="#CCCCCC"> back to full</font><font color="#E5E5E5"> and now</font>

162
00:08:12,039 --> 00:08:16,539
we know<font color="#CCCCCC"> that fool</font><font color="#E5E5E5"> Zhou allocates memory</font>

163
00:08:13,720 --> 00:08:18,699
because and we recall the reason<font color="#E5E5E5"> why we</font>

164
00:08:16,539 --> 00:08:21,090
<font color="#CCCCCC">think it recall it allocates memory and</font>

165
00:08:18,699 --> 00:08:25,419
<font color="#E5E5E5">that's because it calls bar on line 3</font>

166
00:08:21,090 --> 00:08:27,340
the reason why we we recall the<font color="#CCCCCC"> reason</font>

167
00:08:25,419 --> 00:08:28,990
why there's a<font color="#CCCCCC"> bug is</font><font color="#E5E5E5"> because when we're</font>

168
00:08:27,340 --> 00:08:31,299
going<font color="#E5E5E5"> to report later it's</font><font color="#CCCCCC"> going to be</font>

169
00:08:28,990 --> 00:08:34,419
very important<font color="#CCCCCC"> that we give some idea of</font>

170
00:08:31,300 --> 00:08:39,760
<font color="#E5E5E5">why that's</font><font color="#CCCCCC"> back to the user</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> then we</font>

171
00:08:34,419 --> 00:08:42,039
look<font color="#E5E5E5"> at GU it calls foo and so we go</font>

172
00:08:39,760 --> 00:08:44,380
look at foo and see that<font color="#E5E5E5"> its</font>

173
00:08:42,039 --> 00:08:48,310
<font color="#E5E5E5">specifications</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> allocates so Google</font>

174
00:08:44,380 --> 00:08:53,320
<font color="#E5E5E5">so allocates</font><font color="#CCCCCC"> and because</font><font color="#E5E5E5"> GU is</font><font color="#CCCCCC"> marked</font><font color="#E5E5E5"> no</font>

175
00:08:48,310 --> 00:08:56,380
allocation we report here so<font color="#E5E5E5"> note also</font>

176
00:08:53,320 --> 00:08:59,110
that in GUI only we recall that<font color="#E5E5E5"> it calls</font>

177
00:08:56,380 --> 00:09:01,689
foo and we don't follow<font color="#E5E5E5"> all the chain of</font>

178
00:08:59,110 --> 00:09:04,590
explanation this will be reconstructed

179
00:09:01,690 --> 00:09:09,450
<font color="#CCCCCC">only when needed when we report so</font>

180
00:09:04,590 --> 00:09:16,070
<font color="#E5E5E5">it</font><font color="#CCCCCC"> scales more okay so that's</font>

181
00:09:09,450 --> 00:09:21,120
<font color="#CCCCCC">undermanned analysis but interprocedural</font>

182
00:09:16,070 --> 00:09:23,760
<font color="#E5E5E5">issues and so one thing</font><font color="#CCCCCC"> we were</font>

183
00:09:21,120 --> 00:09:26,100
wondering at some point is how important

184
00:09:23,760 --> 00:09:29,130
is<font color="#CCCCCC"> it that the</font><font color="#E5E5E5"> analysis is composite is</font>

185
00:09:26,100 --> 00:09:32,100
interprocedural<font color="#E5E5E5"> sorry and so we did this</font>

186
00:09:29,130 --> 00:09:34,920
case<font color="#E5E5E5"> today of bugs that were reported by</font>

187
00:09:32,100 --> 00:09:37,590
infra recently and we counted<font color="#E5E5E5"> for each</font>

188
00:09:34,920 --> 00:09:41,240
<font color="#E5E5E5">of them if there were interprocedural so</font>

189
00:09:37,590 --> 00:09:43,770
we sorted them in three<font color="#CCCCCC"> buckets one is</font>

190
00:09:41,240 --> 00:09:46,290
bugs that<font color="#CCCCCC"> you can find</font><font color="#E5E5E5"> just by looking</font>

191
00:09:43,770 --> 00:09:48,750
and what procedure in one file<font color="#E5E5E5"> the</font>

192
00:09:46,290 --> 00:09:51,329
second bucket<font color="#E5E5E5"> is bugs you can find by</font>

193
00:09:48,750 --> 00:09:53,880
looking<font color="#CCCCCC"> at all the procedures in but</font>

194
00:09:51,330 --> 00:09:57,630
only<font color="#E5E5E5"> in</font><font color="#CCCCCC"> one file</font><font color="#E5E5E5"> and the third category</font>

195
00:09:53,880 --> 00:10:00,600
is bugs that involve<font color="#E5E5E5"> multiple procedures</font>

196
00:09:57,630 --> 00:10:02,430
that span multiple<font color="#E5E5E5"> files and what we</font>

197
00:10:00,600 --> 00:10:04,440
found is<font color="#CCCCCC"> that for</font><font color="#E5E5E5"> some bad types the</font>

198
00:10:02,430 --> 00:10:10,560
majority of the bugs were in the last

199
00:10:04,440 --> 00:10:13,560
category so so it's very important

200
00:10:10,560 --> 00:10:19,099
so being interprocedural<font color="#E5E5E5"> and info file</font>

201
00:10:13,560 --> 00:10:22,439
gives the best signal to developers and

202
00:10:19,100 --> 00:10:24,480
so this is<font color="#CCCCCC"> allocates memory that we saw</font>

203
00:10:22,440 --> 00:10:26,520
and<font color="#E5E5E5"> this one is a bit particular because</font>

204
00:10:24,480 --> 00:10:29,550
almost all<font color="#E5E5E5"> the bugs it reports span</font>

205
00:10:26,520 --> 00:10:31,560
<font color="#E5E5E5">multiple files and all the way at</font><font color="#CCCCCC"> the</font>

206
00:10:29,550 --> 00:10:33,510
bottom there's<font color="#E5E5E5"> a white pointer</font>

207
00:10:31,560 --> 00:10:37,619
comparison which is<font color="#E5E5E5"> a linter and so</font>

208
00:10:33,510 --> 00:10:41,160
linear only looks at<font color="#E5E5E5"> VST</font><font color="#CCCCCC"> r15</font><font color="#E5E5E5"> so and</font>

209
00:10:37,620 --> 00:10:43,970
surprisingly it's only reports intra

210
00:10:41,160 --> 00:10:43,969
procedural bugs

211
00:10:44,790 --> 00:10:54,130
<font color="#E5E5E5">to say no okay so how do we deploy</font>

212
00:10:50,110 --> 00:10:56,260
<font color="#E5E5E5">infrared Facebook</font><font color="#CCCCCC"> so I said</font><font color="#E5E5E5"> it's it</font>

213
00:10:54,130 --> 00:11:01,000
reports<font color="#CCCCCC"> at div time so when</font><font color="#E5E5E5"> whenever a</font>

214
00:10:56,260 --> 00:11:03,700
developer<font color="#E5E5E5"> sends a new change it will go</font>

215
00:11:01,000 --> 00:11:05,380
through our CI system<font color="#E5E5E5"> and all CI system</font>

216
00:11:03,700 --> 00:11:10,480
<font color="#E5E5E5">runs a bunch of tests and it also</font>

217
00:11:05,380 --> 00:11:13,360
schedules<font color="#CCCCCC"> an analysis via</font><font color="#E5E5E5"> infer and this</font>

218
00:11:10,480 --> 00:11:15,579
is this happens all at<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same</font><font color="#CCCCCC"> time as</font>

219
00:11:13,360 --> 00:11:19,649
human reviewers are reading the code and

220
00:11:15,579 --> 00:11:22,959
making<font color="#E5E5E5"> comments</font><font color="#CCCCCC"> and so infrared with</font>

221
00:11:19,649 --> 00:11:26,890
commenting and<font color="#CCCCCC"> Dave just as other human</font>

222
00:11:22,959 --> 00:11:29,439
reviewers will so if it finds the bags

223
00:11:26,890 --> 00:11:31,360
it reports it on fabricator which is a

224
00:11:29,440 --> 00:11:33,970
code<font color="#CCCCCC"> review tool</font><font color="#E5E5E5"> that's also</font><font color="#CCCCCC"> open source</font>

225
00:11:31,360 --> 00:11:37,209
<font color="#E5E5E5">and in fact comments look just like</font>

226
00:11:33,970 --> 00:11:39,970
other human reviewer comments<font color="#E5E5E5"> so in that</font>

227
00:11:37,209 --> 00:11:41,800
case that's a report<font color="#E5E5E5"> there's a report</font>

228
00:11:39,970 --> 00:11:44,019
<font color="#CCCCCC">generated by infer that says that there</font>

229
00:11:41,800 --> 00:11:47,229
might be<font color="#E5E5E5"> another reference in</font><font color="#CCCCCC"> caused by</font>

230
00:11:44,019 --> 00:11:50,829
the death and one important<font color="#E5E5E5"> point is</font>

231
00:11:47,230 --> 00:11:53,140
that<font color="#E5E5E5"> in this integration</font><font color="#CCCCCC"> infer we</font><font color="#E5E5E5"> only</font>

232
00:11:50,829 --> 00:11:56,319
<font color="#CCCCCC">surface the bugs</font><font color="#E5E5E5"> that info finds that</font>

233
00:11:53,140 --> 00:11:57,880
were<font color="#E5E5E5"> introduced by the death and only</font><font color="#CCCCCC"> if</font>

234
00:11:56,320 --> 00:12:01,209
they were<font color="#CCCCCC"> invites that were touched by</font>

235
00:11:57,880 --> 00:12:03,459
the<font color="#CCCCCC"> diff and the reason we we do that is</font>

236
00:12:01,209 --> 00:12:06,189
<font color="#E5E5E5">that that's what the developer currently</font>

237
00:12:03,459 --> 00:12:09,609
context on and is<font color="#E5E5E5"> working on this change</font>

238
00:12:06,190 --> 00:12:12,300
and so is able to act on<font color="#E5E5E5"> these warnings</font>

239
00:12:09,610 --> 00:12:20,230
<font color="#E5E5E5">much more than on Runnings about</font>

240
00:12:12,300 --> 00:12:22,180
unrelated things so at some point<font color="#CCCCCC"> infer</font>

241
00:12:20,230 --> 00:12:24,550
<font color="#E5E5E5">is happy with the diff and all the code</font>

242
00:12:22,180 --> 00:12:28,599
<font color="#E5E5E5">reviewers are happy about the diff and</font>

243
00:12:24,550 --> 00:12:30,959
so then it makes<font color="#E5E5E5"> it into the cabeza into</font>

244
00:12:28,600 --> 00:12:34,420
our products

245
00:12:30,959 --> 00:12:36,939
so let's go<font color="#CCCCCC"> back to our</font><font color="#E5E5E5"> example and see</font>

246
00:12:34,420 --> 00:12:40,689
how<font color="#CCCCCC"> defender is this works a</font><font color="#E5E5E5"> bit more in</font>

247
00:12:36,940 --> 00:12:42,880
details<font color="#E5E5E5"> so let's say</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> chief was</font>

248
00:12:40,690 --> 00:12:47,470
<font color="#E5E5E5">the</font><font color="#CCCCCC"> DIF that introduced</font><font color="#E5E5E5"> the call to</font><font color="#CCCCCC"> foo</font>

249
00:12:42,880 --> 00:12:49,810
<font color="#E5E5E5">in the new allocation method so that's</font>

250
00:12:47,470 --> 00:12:53,410
the the state<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the code after the</font><font color="#CCCCCC"> DIF</font>

251
00:12:49,810 --> 00:12:56,229
<font color="#E5E5E5">that's what we saw earlier</font><font color="#CCCCCC"> so we know</font>

252
00:12:53,410 --> 00:12:59,290
that<font color="#CCCCCC"> infer does this on that</font><font color="#E5E5E5"> version of</font>

253
00:12:56,230 --> 00:13:03,190
<font color="#E5E5E5">the code and it reports the error on</font><font color="#CCCCCC"> goo</font>

254
00:12:59,290 --> 00:13:05,319
<font color="#E5E5E5">because it calls foo that allocates so</font>

255
00:13:03,190 --> 00:13:07,690
then what<font color="#CCCCCC"> info will do is it will</font>

256
00:13:05,319 --> 00:13:09,819
<font color="#CCCCCC">analyze the base commit</font><font color="#E5E5E5"> the version of</font>

257
00:13:07,690 --> 00:13:12,550
the code<font color="#CCCCCC"> without the death so in this</font>

258
00:13:09,819 --> 00:13:14,259
version<font color="#CCCCCC"> goo doesn't call foo and also we</font>

259
00:13:12,550 --> 00:13:17,069
need<font color="#CCCCCC"> to realize food at Java</font><font color="#E5E5E5"> because</font>

260
00:13:14,259 --> 00:13:21,310
that's the fact that was<font color="#E5E5E5"> modified so</font>

261
00:13:17,069 --> 00:13:23,920
<font color="#CCCCCC">infer an analysis fool again it needs</font>

262
00:13:21,310 --> 00:13:25,388
bar<font color="#CCCCCC"> it</font><font color="#E5E5E5"> already has a spec for bout this</font>

263
00:13:23,920 --> 00:13:29,139
<font color="#CCCCCC">one doesn't</font><font color="#E5E5E5"> need to change because we</font>

264
00:13:25,389 --> 00:13:32,529
<font color="#CCCCCC">know that bar hasn't changed</font><font color="#E5E5E5"> and so it</font>

265
00:13:29,139 --> 00:13:35,800
will<font color="#CCCCCC"> computer get that</font><font color="#E5E5E5"> foo locates by a</font>

266
00:13:32,529 --> 00:13:37,779
bar and then when you analyze<font color="#E5E5E5"> this foot</font>

267
00:13:35,800 --> 00:13:41,949
<font color="#CCCCCC">do it</font><font color="#E5E5E5"> is that it does nothing</font>

268
00:13:37,779 --> 00:13:43,870
there's no<font color="#E5E5E5"> allocation there so now</font><font color="#CCCCCC"> that</font>

269
00:13:41,949 --> 00:13:45,849
you did this 200 years of<font color="#E5E5E5"> the base under</font>

270
00:13:43,870 --> 00:13:47,589
<font color="#CCCCCC">the DIF</font><font color="#E5E5E5"> it knows</font><font color="#CCCCCC"> that on the</font><font color="#E5E5E5"> base there</font>

271
00:13:45,850 --> 00:13:50,829
was<font color="#E5E5E5"> no report and the date there was</font>

272
00:13:47,589 --> 00:13:53,259
<font color="#CCCCCC">this one report about foo and so what it</font>

273
00:13:50,829 --> 00:13:55,089
will<font color="#E5E5E5"> report to the user is what was</font>

274
00:13:53,259 --> 00:13:58,480
reported<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> dev - what would be</font>

275
00:13:55,089 --> 00:14:00,779
reported on the base<font color="#E5E5E5"> so it will report</font>

276
00:13:58,480 --> 00:14:00,779
anywhere

277
00:14:02,189 --> 00:14:08,679
so this dip<font color="#E5E5E5"> at the playground model has</font>

278
00:14:06,369 --> 00:14:11,649
been quite successful<font color="#E5E5E5"> so</font><font color="#CCCCCC"> far we find</font>

279
00:14:08,679 --> 00:14:13,269
that it helps<font color="#E5E5E5"> developers move fast and</font>

280
00:14:11,649 --> 00:14:15,669
give them more confidence<font color="#CCCCCC"> about their</font>

281
00:14:13,269 --> 00:14:18,539
code changes because info will check

282
00:14:15,669 --> 00:14:21,639
<font color="#CCCCCC">that they don't introduce too many</font><font color="#E5E5E5"> bugs</font>

283
00:14:18,539 --> 00:14:24,850
<font color="#E5E5E5">it also makes life easy for us because</font>

284
00:14:21,639 --> 00:14:28,689
<font color="#E5E5E5">it makes it very much</font><font color="#CCCCCC"> easier to</font><font color="#E5E5E5"> deploy</font>

285
00:14:24,850 --> 00:14:31,389
new<font color="#E5E5E5"> checks because we only report new</font>

286
00:14:28,689 --> 00:14:34,149
bugs introduced by devs<font color="#E5E5E5"> so even if a new</font>

287
00:14:31,389 --> 00:14:36,189
<font color="#E5E5E5">analysis that we</font><font color="#CCCCCC"> shipped has a legacy of</font>

288
00:14:34,149 --> 00:14:37,720
thousands of<font color="#E5E5E5"> bugs in the code base we</font>

289
00:14:36,189 --> 00:14:40,118
don't need to care about<font color="#E5E5E5"> this right now</font>

290
00:14:37,720 --> 00:14:42,129
<font color="#E5E5E5">because developers will not see them</font>

291
00:14:40,119 --> 00:14:44,739
<font color="#CCCCCC">because they were retired we only see</font>

292
00:14:42,129 --> 00:14:47,129
the new ones that<font color="#CCCCCC"> they</font><font color="#E5E5E5"> introduced so we</font>

293
00:14:44,739 --> 00:14:51,779
find that quite valuable

294
00:14:47,129 --> 00:14:54,189
<font color="#E5E5E5">for instance the another situation</font>

295
00:14:51,779 --> 00:14:56,259
<font color="#E5E5E5">that's not</font><font color="#CCCCCC"> like this is compiler</font>

296
00:14:54,189 --> 00:14:58,089
warnings I find<font color="#E5E5E5"> they're</font><font color="#CCCCCC"> always a pain to</font>

297
00:14:56,259 --> 00:15:00,459
enable and projects because<font color="#E5E5E5"> they</font><font color="#CCCCCC"> always</font>

298
00:14:58,089 --> 00:15:03,309
so many pre-existing warnings<font color="#E5E5E5"> and you</font>

299
00:15:00,459 --> 00:15:04,569
can never turn the the<font color="#E5E5E5"> one you want into</font>

300
00:15:03,309 --> 00:15:07,839
an error<font color="#E5E5E5"> straight away because</font><font color="#CCCCCC"> you have</font>

301
00:15:04,569 --> 00:15:10,179
to fix all the pre-existing one first so

302
00:15:07,839 --> 00:15:15,429
this this<font color="#E5E5E5"> kind of deployment avoids</font><font color="#CCCCCC"> that</font>

303
00:15:10,179 --> 00:15:19,149
issue<font color="#E5E5E5"> okay so that's more</font><font color="#CCCCCC"> or less</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> the</font>

304
00:15:15,429 --> 00:15:21,579
current status<font color="#E5E5E5"> is in Firenze and</font><font color="#CCCCCC"> all</font>

305
00:15:19,149 --> 00:15:24,879
gifts for<font color="#E5E5E5"> Android</font>

306
00:15:21,579 --> 00:15:29,349
you know iOS apps as<font color="#E5E5E5"> well as or C++</font>

307
00:15:24,879 --> 00:15:33,519
<font color="#E5E5E5">back-end and that represents tens of</font>

308
00:15:29,350 --> 00:15:35,529
thousands of<font color="#E5E5E5"> diff every month and there</font>

309
00:15:33,519 --> 00:15:38,889
are thousands of<font color="#E5E5E5"> issues fixed every</font>

310
00:15:35,529 --> 00:15:43,749
month out<font color="#E5E5E5"> of all the ones reported by</font>

311
00:15:38,889 --> 00:15:47,529
infer and and that's about<font color="#CCCCCC"> a 70%</font><font color="#E5E5E5"> fixed</font>

312
00:15:43,749 --> 00:15:50,409
rate and<font color="#CCCCCC"> the fixed rate is what we</font>

313
00:15:47,529 --> 00:15:55,619
measure as giving good signals to

314
00:15:50,409 --> 00:16:00,429
developers is it's the<font color="#E5E5E5"> proportion of</font>

315
00:15:55,619 --> 00:16:02,960
reports that<font color="#E5E5E5"> were fixed</font><font color="#CCCCCC"> by developers as</font>

316
00:16:00,429 --> 00:16:07,399
they were reported by infer

317
00:16:02,960 --> 00:16:08,899
and that's that's the<font color="#E5E5E5"> metric</font><font color="#CCCCCC"> we take and</font>

318
00:16:07,399 --> 00:16:11,000
<font color="#E5E5E5">not some other metrics like false</font>

319
00:16:08,899 --> 00:16:13,660
positives<font color="#E5E5E5"> or things like</font><font color="#CCCCCC"> dicks</font><font color="#E5E5E5"> because</font>

320
00:16:11,000 --> 00:16:16,370
<font color="#CCCCCC">that's a metric</font><font color="#E5E5E5"> we can actually measure</font>

321
00:16:13,660 --> 00:16:18,170
<font color="#E5E5E5">so that's why it's important to us okay</font>

322
00:16:16,370 --> 00:16:20,620
<font color="#E5E5E5">that's what I have to say thanks for</font>

323
00:16:18,170 --> 00:16:20,620
<font color="#CCCCCC">listening</font>

324
00:16:24,890 --> 00:16:32,730
<font color="#CCCCCC">any questions</font><font color="#E5E5E5"> yes move back in the</font>

325
00:16:29,580 --> 00:16:35,820
example with<font color="#E5E5E5"> memory location what if the</font>

326
00:16:32,730 --> 00:16:39,540
<font color="#E5E5E5">location</font><font color="#CCCCCC"> conditionally</font><font color="#E5E5E5"> depending on one</font>

327
00:16:35,820 --> 00:16:42,180
of<font color="#E5E5E5"> the parameters of the function</font><font color="#CCCCCC"> right</font>

328
00:16:39,540 --> 00:16:43,949
so<font color="#CCCCCC"> there the question</font><font color="#E5E5E5"> is what if</font><font color="#CCCCCC"> the</font>

329
00:16:42,180 --> 00:16:47,579
allocation happens conditionally

330
00:16:43,950 --> 00:16:50,250
<font color="#E5E5E5">depending on and the parameter space to</font>

331
00:16:47,580 --> 00:16:53,490
the function<font color="#CCCCCC"> I think what this checker</font>

332
00:16:50,250 --> 00:16:57,210
<font color="#CCCCCC">this checker is quite simple</font><font color="#E5E5E5"> and I don't</font>

333
00:16:53,490 --> 00:16:59,700
<font color="#CCCCCC">think it looks at this kind of thing I</font>

334
00:16:57,210 --> 00:17:01,950
think<font color="#CCCCCC"> it would report anyway</font><font color="#E5E5E5"> but I'm not</font>

335
00:16:59,700 --> 00:17:03,660
<font color="#E5E5E5">quite sure</font><font color="#CCCCCC"> let's some</font><font color="#E5E5E5"> other some other</font>

336
00:17:01,950 --> 00:17:06,569
checkers we have like the ones from

337
00:17:03,660 --> 00:17:19,680
memory<font color="#CCCCCC"> safety they try very hard</font><font color="#E5E5E5"> to</font>

338
00:17:06,569 --> 00:17:22,169
follow the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> values as well so one way</font>

339
00:17:19,680 --> 00:17:25,470
to in<font color="#CCCCCC"> I don't know if this checker does</font>

340
00:17:22,170 --> 00:17:28,350
this already but<font color="#E5E5E5"> the way we would do</font>

341
00:17:25,470 --> 00:17:30,420
that<font color="#E5E5E5"> would be to record to two</font>

342
00:17:28,349 --> 00:17:35,010
<font color="#E5E5E5">specifications for that function</font><font color="#CCCCCC"> one</font>

343
00:17:30,420 --> 00:17:36,300
where some parameter<font color="#E5E5E5"> if x equals zero is</font>

344
00:17:35,010 --> 00:17:38,580
the precondition then it doesn't

345
00:17:36,300 --> 00:17:40,560
allocate and another of if it's not then

346
00:17:38,580 --> 00:17:43,169
it allocates<font color="#E5E5E5"> and then at the call site</font>

347
00:17:40,560 --> 00:17:49,370
you can<font color="#E5E5E5"> see in which in which branch you</font>

348
00:17:43,170 --> 00:17:49,370
<font color="#CCCCCC">are yes you were</font>

349
00:17:50,669 --> 00:17:56,049
<font color="#E5E5E5">to Fulton first cold days or is it</font>

350
00:17:53,080 --> 00:17:59,230
<font color="#E5E5E5">something in Toronto</font><font color="#CCCCCC"> the question is is</font>

351
00:17:56,049 --> 00:18:01,840
the<font color="#E5E5E5"> diff paid based deployment part of</font>

352
00:17:59,230 --> 00:18:04,120
the<font color="#CCCCCC"> open-source code base</font><font color="#E5E5E5"> on that so at</font>

353
00:18:01,840 --> 00:18:07,779
the moment<font color="#CCCCCC"> is mostly lives in OCI code</font>

354
00:18:04,120 --> 00:18:10,178
and not in<font color="#CCCCCC"> infer there's ongoing work</font>

355
00:18:07,779 --> 00:18:15,190
about moving that logic inside in for

356
00:18:10,179 --> 00:18:17,139
itself<font color="#CCCCCC"> so not for now there is</font><font color="#E5E5E5"> but there</font>

357
00:18:15,190 --> 00:18:19,120
is part of it in<font color="#CCCCCC"> info already which is</font>

358
00:18:17,139 --> 00:18:25,678
the part about comparing two reports and

359
00:18:19,120 --> 00:18:25,678
computing<font color="#CCCCCC"> the existing and introduced</font>

360
00:18:26,700 --> 00:19:04,360
yes so the question<font color="#CCCCCC"> is how how interval</font>

361
00:19:01,450 --> 00:19:07,269
<font color="#E5E5E5">woven the static analysis part and the</font>

362
00:19:04,360 --> 00:19:09,998
definitely<font color="#E5E5E5"> this part and at the moment</font>

363
00:19:07,269 --> 00:19:12,279
<font color="#CCCCCC">not</font><font color="#E5E5E5"> at all we just</font><font color="#CCCCCC"> run in for once run</font>

364
00:19:09,999 --> 00:19:16,119
<font color="#E5E5E5">in for a second time and</font><font color="#CCCCCC"> then we do some</font>

365
00:19:12,279 --> 00:19:19,269
logic just<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> JSON report and so</font>

366
00:19:16,119 --> 00:19:21,039
that's how<font color="#E5E5E5"> it works so it can it works</font>

367
00:19:19,269 --> 00:19:22,419
the same<font color="#CCCCCC"> way for all or and that</font><font color="#E5E5E5"> is this</font>

368
00:19:21,039 --> 00:19:27,610
because it<font color="#E5E5E5"> just works on the final</font>

369
00:19:22,419 --> 00:19:33,119
report it could be a<font color="#E5E5E5"> separate project</font>

370
00:19:27,610 --> 00:19:33,119
<font color="#E5E5E5">that works for other</font><font color="#CCCCCC"> things as well yes</font>

371
00:19:47,059 --> 00:19:54,480
yeah so the question<font color="#E5E5E5"> is that we report</font>

372
00:19:52,650 --> 00:19:56,580
only<font color="#CCCCCC"> on the files</font><font color="#E5E5E5"> touch in the</font><font color="#CCCCCC"> Deaf and</font>

373
00:19:54,480 --> 00:19:57,780
isn't<font color="#CCCCCC"> that a terrible idea for instance</font>

374
00:19:56,580 --> 00:19:59,159
for libraries because<font color="#E5E5E5"> you're breaking</font>

375
00:19:57,780 --> 00:20:07,678
<font color="#CCCCCC">all the clients</font><font color="#E5E5E5"> and you don't know it</font>

376
00:19:59,160 --> 00:20:11,820
<font color="#E5E5E5">yes that's</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> good point so do we have do</font>

377
00:20:07,679 --> 00:20:14,340
we<font color="#E5E5E5"> sometimes look at this</font><font color="#CCCCCC"> so no not</font><font color="#E5E5E5"> at</font>

378
00:20:11,820 --> 00:20:16,919
the<font color="#CCCCCC"> moment</font><font color="#E5E5E5"> we don't quite know how to</font>

379
00:20:14,340 --> 00:20:25,110
sue how we would<font color="#CCCCCC"> suffice</font><font color="#E5E5E5"> these issues to</font>

380
00:20:16,920 --> 00:20:28,380
developers or how it<font color="#CCCCCC"> would run so yeah</font>

381
00:20:25,110 --> 00:20:30,540
<font color="#E5E5E5">so we're still figuring this out we're</font>

382
00:20:28,380 --> 00:20:31,770
<font color="#E5E5E5">trying to surface all the bugs to</font>

383
00:20:30,540 --> 00:20:33,149
developers for<font color="#E5E5E5"> instance all</font><font color="#CCCCCC"> the</font>

384
00:20:31,770 --> 00:20:35,309
pre-existing bugs in the code base

385
00:20:33,150 --> 00:20:38,929
that's one way to<font color="#E5E5E5"> do it but that doesn't</font>

386
00:20:35,309 --> 00:20:42,139
quite answer this question yes

387
00:20:38,929 --> 00:20:42,140
last question

388
00:20:43,370 --> 00:20:46,469
[Music]

389
00:20:48,840 --> 00:20:55,240
which other static analysis tools do we

390
00:20:51,700 --> 00:20:57,760
<font color="#E5E5E5">use at Facebook</font><font color="#CCCCCC"> I think we use a range</font>

391
00:20:55,240 --> 00:21:00,250
of static analysis tools but I'm not

392
00:20:57,760 --> 00:21:02,700
sure exactly which at what on<font color="#E5E5E5"> what part</font>

393
00:21:00,250 --> 00:21:02,700
of the<font color="#CCCCCC"> project</font>

394
00:21:05,090 --> 00:21:14,220
we use<font color="#E5E5E5"> yeah we use clang analyzer as</font>

395
00:21:09,059 --> 00:21:18,600
well<font color="#CCCCCC"> on some parts of the code and yeah</font>

396
00:21:14,220 --> 00:21:22,370
we use a bunch<font color="#E5E5E5"> of of of static analyzers</font>

397
00:21:18,600 --> 00:21:24,129
<font color="#CCCCCC">and</font><font color="#E5E5E5"> not quite sure which sorry okay</font>

398
00:21:22,370 --> 00:21:28,188
<font color="#E5E5E5">thanks everyone I think</font>

399
00:21:24,130 --> 00:21:28,189
[Applause]

