1
00:00:05,460 --> 00:00:11,309
so yeah I'm Sam<font color="#CCCCCC"> white ed</font><font color="#E5E5E5"> I'm a sometimes</font>

2
00:00:09,299 --> 00:00:12,450
work for the XMPP<font color="#E5E5E5"> standards</font><font color="#CCCCCC"> Foundation</font>

3
00:00:11,309 --> 00:00:15,030
I'm not sure why<font color="#E5E5E5"> that's on there I think</font>

4
00:00:12,450 --> 00:00:16,079
<font color="#CCCCCC">I copy pasted from some</font><font color="#E5E5E5"> old slides</font><font color="#CCCCCC"> but</font>

5
00:00:15,030 --> 00:00:19,369
I'm also<font color="#E5E5E5"> currently employed by</font>

6
00:00:16,079 --> 00:00:21,659
<font color="#E5E5E5">CloudFlare so obligatory we're hiring</font>

7
00:00:19,369 --> 00:00:23,700
<font color="#CCCCCC">animate occasional go contributor</font><font color="#E5E5E5"> and</font>

8
00:00:21,660 --> 00:00:26,399
I'm gonna talk a bit about the<font color="#E5E5E5"> empty</font>

9
00:00:23,700 --> 00:00:28,500
interface I called the<font color="#E5E5E5"> talk the case for</font>

10
00:00:26,399 --> 00:00:30,480
empty interface but I'm not really

11
00:00:28,500 --> 00:00:34,410
<font color="#CCCCCC">arguing for it I'm just kind of</font><font color="#E5E5E5"> trying</font>

12
00:00:30,480 --> 00:00:37,289
to to figure<font color="#E5E5E5"> out when is a</font><font color="#CCCCCC"> good time to</font>

13
00:00:34,410 --> 00:00:40,648
<font color="#E5E5E5">use the empty interface and when is</font><font color="#CCCCCC"> it a</font>

14
00:00:37,289 --> 00:00:42,629
<font color="#E5E5E5">problem</font><font color="#CCCCCC"> so I suspect</font><font color="#E5E5E5"> everyone in this</font>

15
00:00:40,649 --> 00:00:44,609
<font color="#E5E5E5">room I</font><font color="#CCCCCC"> don't I suspect I don't have to</font>

16
00:00:42,629 --> 00:00:47,099
give an introduction<font color="#CCCCCC"> to</font><font color="#E5E5E5"> empty interface</font>

17
00:00:44,609 --> 00:00:50,670
for<font color="#E5E5E5"> this crowd or why it can often be a</font>

18
00:00:47,100 --> 00:00:53,519
problem<font color="#E5E5E5"> it's one of those feature of go</font>

19
00:00:50,670 --> 00:00:55,350
that ends up giving you a lot<font color="#CCCCCC"> of</font>

20
00:00:53,519 --> 00:00:58,050
interesting<font color="#E5E5E5"> problems but there's also</font>

21
00:00:55,350 --> 00:01:01,289
very useful<font color="#CCCCCC"> and I will start</font><font color="#E5E5E5"> with some</font>

22
00:00:58,050 --> 00:01:02,519
<font color="#E5E5E5">assumptions</font><font color="#CCCCCC"> that I think will if you</font>

23
00:01:01,289 --> 00:01:04,050
don't<font color="#E5E5E5"> know what empty</font><font color="#CCCCCC"> interface</font><font color="#E5E5E5"> is they</font>

24
00:01:02,519 --> 00:01:06,720
might explain a little bit<font color="#E5E5E5"> about it and</font>

25
00:01:04,050 --> 00:01:08,759
if you do<font color="#E5E5E5"> these are just some</font>

26
00:01:06,720 --> 00:01:10,170
assumptions you'll need to know or need

27
00:01:08,760 --> 00:01:12,600
to agree with potentially if you're

28
00:01:10,170 --> 00:01:14,520
going<font color="#E5E5E5"> to agree with this presentation</font><font color="#CCCCCC"> so</font>

29
00:01:12,600 --> 00:01:16,380
the<font color="#E5E5E5"> first one is in go interfaces should</font>

30
00:01:14,520 --> 00:01:18,690
describe<font color="#CCCCCC"> behavior not data I think</font>

31
00:01:16,380 --> 00:01:20,630
<font color="#CCCCCC">that's one of</font><font color="#E5E5E5"> the go proverbs and it's</font>

32
00:01:18,690 --> 00:01:23,850
kind of part<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the basis for this talk</font>

33
00:01:20,630 --> 00:01:26,460
<font color="#CCCCCC">also the empty interface is easy to</font>

34
00:01:23,850 --> 00:01:28,020
abuse<font color="#E5E5E5"> and thus is abused</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is just</font>

35
00:01:26,460 --> 00:01:30,509
<font color="#CCCCCC">something if you don't</font><font color="#E5E5E5"> agree</font><font color="#CCCCCC"> with this</font>

36
00:01:28,020 --> 00:01:32,610
you<font color="#E5E5E5"> know we can argue afterwards but</font>

37
00:01:30,510 --> 00:01:35,220
it's that's sort<font color="#CCCCCC"> of the fundamental</font>

38
00:01:32,610 --> 00:01:37,380
underlying assumption for<font color="#E5E5E5"> this talk</font><font color="#CCCCCC"> also</font>

39
00:01:35,220 --> 00:01:39,570
<font color="#E5E5E5">any time I say empty interface you</font>

40
00:01:37,380 --> 00:01:41,100
should<font color="#E5E5E5"> hear optional</font><font color="#CCCCCC"> dynamic typing and</font>

41
00:01:39,570 --> 00:01:43,050
if you don't know what<font color="#E5E5E5"> empty interface</font>

42
00:01:41,100 --> 00:01:47,339
is that's the most<font color="#E5E5E5"> succinct description</font>

43
00:01:43,050 --> 00:01:49,080
I<font color="#CCCCCC"> can give you</font><font color="#E5E5E5"> and if you can describe</font>

44
00:01:47,340 --> 00:01:50,610
<font color="#CCCCCC">your behavior with a more</font><font color="#E5E5E5"> specific type</font>

45
00:01:49,080 --> 00:01:54,360
you<font color="#CCCCCC"> should I think this is another</font><font color="#E5E5E5"> one</font>

46
00:01:50,610 --> 00:01:56,460
of the go<font color="#E5E5E5"> proverbs and finally possibly</font>

47
00:01:54,360 --> 00:01:58,500
the most controversial<font color="#E5E5E5"> heavy use of</font>

48
00:01:56,460 --> 00:02:00,929
reflection leads to difficult to

49
00:01:58,500 --> 00:02:02,490
maintain code and if you're a ruby

50
00:02:00,930 --> 00:02:04,980
developer<font color="#E5E5E5"> and disagree with</font><font color="#CCCCCC"> this</font>

51
00:02:02,490 --> 00:02:07,440
then go attempt to<font color="#E5E5E5"> modify one of the</font>

52
00:02:04,980 --> 00:02:09,598
encoding<font color="#E5E5E5"> slash json or xml packages and</font>

53
00:02:07,440 --> 00:02:10,878
then get back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> afterwards</font><font color="#CCCCCC"> and those</font>

54
00:02:09,598 --> 00:02:14,488
are<font color="#E5E5E5"> sort of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> things you need to</font>

55
00:02:10,878 --> 00:02:17,219
<font color="#E5E5E5">understand going in or maybe not agree</font>

56
00:02:14,489 --> 00:02:18,090
<font color="#CCCCCC">with</font><font color="#E5E5E5"> but it would be helpful so let's</font>

57
00:02:17,219 --> 00:02:20,280
<font color="#E5E5E5">start with</font>

58
00:02:18,090 --> 00:02:22,200
the encoding packages<font color="#E5E5E5"> I'll be</font><font color="#CCCCCC"> using an</font>

59
00:02:20,280 --> 00:02:24,390
<font color="#E5E5E5">example from encoding XML but it's</font>

60
00:02:22,200 --> 00:02:26,700
exactly the same in<font color="#E5E5E5"> JSON pick your pick</font>

61
00:02:24,390 --> 00:02:29,369
your poison<font color="#CCCCCC"> we're gonna look at the</font>

62
00:02:26,700 --> 00:02:32,760
<font color="#CCCCCC">Marshall API</font><font color="#E5E5E5"> now from the users</font>

63
00:02:29,370 --> 00:02:35,910
<font color="#E5E5E5">perspective</font><font color="#CCCCCC"> Marshall is a elegant maybe</font>

64
00:02:32,760 --> 00:02:38,220
even beautiful<font color="#CCCCCC"> API it's encoded right in</font>

65
00:02:35,910 --> 00:02:40,470
the right<font color="#CCCCCC"> in the function signature I</font>

66
00:02:38,220 --> 00:02:42,780
give it some<font color="#E5E5E5"> arbitrary data empty</font>

67
00:02:40,470 --> 00:02:45,269
interface and I get some arbitrary

68
00:02:42,780 --> 00:02:48,330
representation<font color="#E5E5E5"> out and that's great</font>

69
00:02:45,269 --> 00:02:50,099
<font color="#E5E5E5">because the producer of the value in the</font>

70
00:02:48,330 --> 00:02:52,530
<font color="#E5E5E5">MT interface the</font><font color="#CCCCCC"> user of the library</font>

71
00:02:50,099 --> 00:02:54,328
doesn't<font color="#CCCCCC"> really have to</font><font color="#E5E5E5"> care about the</font>

72
00:02:52,530 --> 00:02:56,910
data<font color="#E5E5E5"> they just put some data in and get</font>

73
00:02:54,329 --> 00:02:59,310
some data<font color="#CCCCCC"> out</font><font color="#E5E5E5"> it's very very succinct</font>

74
00:02:56,910 --> 00:03:00,989
very nice to use works very well<font color="#CCCCCC"> there</font>

75
00:02:59,310 --> 00:03:04,049
are other methods if you need more

76
00:03:00,989 --> 00:03:06,180
<font color="#E5E5E5">control but when you start digging and</font>

77
00:03:04,049 --> 00:03:09,810
<font color="#E5E5E5">this is all this empty interface says</font>

78
00:03:06,180 --> 00:03:12,360
nothing is one of Rob<font color="#CCCCCC"> pikes famous at go</font>

79
00:03:09,810 --> 00:03:14,940
proverbs<font color="#E5E5E5"> and that's really all you</font><font color="#CCCCCC"> need</font>

80
00:03:12,360 --> 00:03:16,739
in this specific API nothing you don't

81
00:03:14,940 --> 00:03:22,709
<font color="#E5E5E5">need to know anything</font><font color="#CCCCCC"> about the value of</font>

82
00:03:16,739 --> 00:03:26,730
V but from the package<font color="#CCCCCC"> developer's</font>

83
00:03:22,709 --> 00:03:28,470
perspective<font color="#E5E5E5"> this leads to from the</font><font color="#CCCCCC"> XML</font>

84
00:03:26,730 --> 00:03:31,048
<font color="#E5E5E5">package developers perspective this</font>

85
00:03:28,470 --> 00:03:33,599
<font color="#E5E5E5">leads to a lot of problems</font><font color="#CCCCCC"> it's obvious</font>

86
00:03:31,049 --> 00:03:35,639
what to<font color="#CCCCCC"> do with V if V is a type from</font>

87
00:03:33,599 --> 00:03:37,649
<font color="#CCCCCC">the standard library if it's an int we</font>

88
00:03:35,639 --> 00:03:39,269
make up<font color="#E5E5E5"> some representation for an int</font>

89
00:03:37,650 --> 00:03:41,130
and<font color="#CCCCCC"> we can do a nice</font><font color="#E5E5E5"> simple type switch</font>

90
00:03:39,269 --> 00:03:45,180
that decides is this an<font color="#E5E5E5"> int is this a</font>

91
00:03:41,130 --> 00:03:47,459
string<font color="#CCCCCC"> is this some other type if it's</font>

92
00:03:45,180 --> 00:03:50,190
<font color="#E5E5E5">something</font><font color="#CCCCCC"> defined in the XML</font><font color="#E5E5E5"> package</font>

93
00:03:47,459 --> 00:03:52,260
like the<font color="#E5E5E5"> XML Marshall our interface it</font>

94
00:03:50,190 --> 00:03:54,419
also has a predefined behavior the<font color="#CCCCCC"> XML</font>

95
00:03:52,260 --> 00:03:56,250
package can know if<font color="#CCCCCC"> it's next</font><font color="#E5E5E5"> ml</font>

96
00:03:54,419 --> 00:03:58,799
Marshall<font color="#CCCCCC"> ER call it's Marshall</font><font color="#E5E5E5"> XML</font>

97
00:03:56,250 --> 00:04:01,079
function but as soon as we start getting

98
00:03:58,799 --> 00:04:03,720
into<font color="#CCCCCC"> user-defined types and more</font><font color="#E5E5E5"> complex</font>

99
00:04:01,079 --> 00:04:06,540
types like some arbitrary struct<font color="#CCCCCC"> that is</font>

100
00:04:03,720 --> 00:04:09,030
not defined<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> XML package it</font>

101
00:04:06,540 --> 00:04:10,410
becomes really<font color="#CCCCCC"> difficult for</font><font color="#E5E5E5"> the XML</font>

102
00:04:09,030 --> 00:04:13,440
package to know what to do with that

103
00:04:10,410 --> 00:04:15,840
<font color="#E5E5E5">data on this struct the</font><font color="#CCCCCC"> XML package</font>

104
00:04:13,440 --> 00:04:17,849
knows nothing about the any of<font color="#E5E5E5"> the</font>

105
00:04:15,840 --> 00:04:19,738
fields it doesn't know about name<font color="#E5E5E5"> it</font>

106
00:04:17,849 --> 00:04:21,930
doesn't know about tags it doesn't know

107
00:04:19,738 --> 00:04:24,030
about the<font color="#E5E5E5"> layout of the struct now we</font>

108
00:04:21,930 --> 00:04:28,469
could limit<font color="#E5E5E5"> the usefulness of the XML</font>

109
00:04:24,030 --> 00:04:30,210
package and not<font color="#E5E5E5"> not support user-defined</font>

110
00:04:28,469 --> 00:04:31,740
types but that's not going<font color="#E5E5E5"> to be very</font>

111
00:04:30,210 --> 00:04:34,049
<font color="#CCCCCC">useful people</font><font color="#E5E5E5"> aren't going</font><font color="#CCCCCC"> to use</font><font color="#E5E5E5"> our</font>

112
00:04:31,740 --> 00:04:36,509
<font color="#E5E5E5">package so the way</font><font color="#CCCCCC"> that information has</font>

113
00:04:34,050 --> 00:04:40,229
to be gathered is using<font color="#CCCCCC"> reflection and</font>

114
00:04:36,509 --> 00:04:42,720
that leads to effectively<font color="#E5E5E5"> two separate</font>

115
00:04:40,229 --> 00:04:44,849
code bases<font color="#CCCCCC"> half of the package is</font>

116
00:04:42,720 --> 00:04:47,250
reflection based half of it<font color="#E5E5E5"> is normal</font>

117
00:04:44,849 --> 00:04:49,110
idiomatic go and it's very hard to

118
00:04:47,250 --> 00:04:51,030
reconcile these sort of two distinct

119
00:04:49,110 --> 00:04:53,880
code bases hard to get data<font color="#E5E5E5"> between them</font>

120
00:04:51,030 --> 00:04:56,190
<font color="#E5E5E5">hard to</font><font color="#CCCCCC"> read the</font><font color="#E5E5E5"> reflection and process</font>

121
00:04:53,880 --> 00:04:59,090
the reflection based parts of the

122
00:04:56,190 --> 00:05:01,289
package if you're trying<font color="#CCCCCC"> to work on it</font>

123
00:04:59,090 --> 00:05:03,419
so it's<font color="#E5E5E5"> great from</font><font color="#CCCCCC"> the users perspective</font>

124
00:05:01,289 --> 00:05:06,590
<font color="#E5E5E5">not so great from the package maintainer</font>

125
00:05:03,419 --> 00:05:09,419
perspective<font color="#E5E5E5"> this use of empty interface</font>

126
00:05:06,590 --> 00:05:11,159
<font color="#CCCCCC">so when the producer of some</font><font color="#E5E5E5"> data the</font>

127
00:05:09,419 --> 00:05:13,560
<font color="#CCCCCC">user of the package in</font><font color="#E5E5E5"> this case does</font>

128
00:05:11,159 --> 00:05:15,840
<font color="#CCCCCC">not care about the</font><font color="#E5E5E5"> type but the consumer</font>

129
00:05:13,560 --> 00:05:17,880
does the<font color="#E5E5E5"> XML package which is consuming</font>

130
00:05:15,840 --> 00:05:21,150
<font color="#E5E5E5">that empty interface the library becomes</font>

131
00:05:17,880 --> 00:05:22,530
difficult<font color="#E5E5E5"> to maintain reformulated that</font>

132
00:05:21,150 --> 00:05:25,380
gives us<font color="#E5E5E5"> our sort of first rule for</font>

133
00:05:22,530 --> 00:05:27,150
<font color="#E5E5E5">using empty interface the producer of</font>

134
00:05:25,380 --> 00:05:29,490
the empty interface<font color="#E5E5E5"> value in the empty</font>

135
00:05:27,150 --> 00:05:32,880
interface must also be<font color="#E5E5E5"> the consumer of</font>

136
00:05:29,490 --> 00:05:35,639
<font color="#CCCCCC">that value so let's talk</font><font color="#E5E5E5"> about another</font>

137
00:05:32,880 --> 00:05:37,680
<font color="#E5E5E5">package context and context is actually</font>

138
00:05:35,639 --> 00:05:40,199
<font color="#CCCCCC">going to have problems</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this</font>

139
00:05:37,680 --> 00:05:43,979
rule and<font color="#CCCCCC"> we'll have to modify it</font><font color="#E5E5E5"> a bit</font>

140
00:05:40,199 --> 00:05:46,320
to<font color="#E5E5E5"> make this make this work</font><font color="#CCCCCC"> so if you</font>

141
00:05:43,979 --> 00:05:48,599
<font color="#E5E5E5">haven't used context</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> this is sort</font>

142
00:05:46,320 --> 00:05:50,699
of the basic<font color="#E5E5E5"> trimmed-down version most</font>

143
00:05:48,599 --> 00:05:53,159
of these<font color="#E5E5E5"> examples will</font><font color="#CCCCCC"> be a little trim</font>

144
00:05:50,699 --> 00:05:56,030
down<font color="#CCCCCC"> trim down version of the</font><font color="#E5E5E5"> API that</font>

145
00:05:53,159 --> 00:05:59,430
<font color="#CCCCCC">we care about</font><font color="#E5E5E5"> context is effectively an</font>

146
00:05:56,030 --> 00:06:01,349
associative array or a map you<font color="#E5E5E5"> have a</font>

147
00:05:59,430 --> 00:06:04,080
key and<font color="#CCCCCC"> a value and you can index things</font>

148
00:06:01,349 --> 00:06:06,630
by that key<font color="#CCCCCC"> and</font><font color="#E5E5E5"> get things out the</font>

149
00:06:04,080 --> 00:06:08,758
<font color="#CCCCCC">implementation doesn't</font><font color="#E5E5E5"> really matter but</font>

150
00:06:06,630 --> 00:06:12,000
in context<font color="#E5E5E5"> the key and the value are</font>

151
00:06:08,759 --> 00:06:13,949
<font color="#E5E5E5">empty interfaces and the consumer is</font>

152
00:06:12,000 --> 00:06:16,349
also the producer like that last rule

153
00:06:13,949 --> 00:06:18,719
<font color="#E5E5E5">most of the time when you create a</font>

154
00:06:16,349 --> 00:06:21,060
context you are<font color="#E5E5E5"> for</font><font color="#CCCCCC"> instance</font><font color="#E5E5E5"> doing it</font>

155
00:06:18,719 --> 00:06:23,969
<font color="#E5E5E5">for some HTTP middleware and your</font>

156
00:06:21,060 --> 00:06:27,599
<font color="#E5E5E5">package has</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> loop that's not right your</font>

157
00:06:23,969 --> 00:06:30,509
<font color="#E5E5E5">package has I say get session ID from</font>

158
00:06:27,599 --> 00:06:33,300
context and insert session ID the<font color="#CCCCCC"> Erb</font>

159
00:06:30,509 --> 00:06:35,819
new context with session ID function so

160
00:06:33,300 --> 00:06:37,949
<font color="#E5E5E5">you are both creating and consuming from</font>

161
00:06:35,819 --> 00:06:40,409
within<font color="#E5E5E5"> that package</font><font color="#CCCCCC"> the empty interface</font>

162
00:06:37,949 --> 00:06:42,750
value and this makes the context package

163
00:06:40,409 --> 00:06:44,820
a study<font color="#E5E5E5"> in simplicity if you've never</font>

164
00:06:42,750 --> 00:06:45,150
looked<font color="#CCCCCC"> at the code</font><font color="#E5E5E5"> I really</font><font color="#CCCCCC"> recommend</font><font color="#E5E5E5"> it</font>

165
00:06:44,820 --> 00:06:47,659
<font color="#E5E5E5">it's</font>

166
00:06:45,150 --> 00:06:51,750
it's very simple very<font color="#CCCCCC"> elegant package</font>

167
00:06:47,660 --> 00:06:54,090
<font color="#E5E5E5">but it has some</font><font color="#CCCCCC"> other problems so let's</font>

168
00:06:51,750 --> 00:06:57,000
look at a quick the documentation for

169
00:06:54,090 --> 00:06:58,919
context<font color="#CCCCCC"> package context defines the</font>

170
00:06:57,000 --> 00:07:01,080
context type which carries deadlines

171
00:06:58,920 --> 00:07:03,840
<font color="#E5E5E5">cancellation signals and other requests</font>

172
00:07:01,080 --> 00:07:07,919
scoped values across<font color="#E5E5E5"> API boundaries and</font>

173
00:07:03,840 --> 00:07:10,919
between processes<font color="#CCCCCC"> requests</font><font color="#E5E5E5"> scoped values</font>

174
00:07:07,920 --> 00:07:14,730
is<font color="#E5E5E5"> the kind of key word here what does</font>

175
00:07:10,920 --> 00:07:16,860
<font color="#CCCCCC">that mean it's sort of a we don't really</font>

176
00:07:14,730 --> 00:07:19,530
know this is API as<font color="#E5E5E5"> duck or</font>

177
00:07:16,860 --> 00:07:23,820
<font color="#E5E5E5">documentation as API because this wasn't</font>

178
00:07:19,530 --> 00:07:26,400
<font color="#E5E5E5">something that was encoded in the API we</font>

179
00:07:23,820 --> 00:07:28,200
have<font color="#E5E5E5"> for context nothing in here gives</font>

180
00:07:26,400 --> 00:07:30,150
you any<font color="#CCCCCC"> indication of</font><font color="#E5E5E5"> what a request</font>

181
00:07:28,200 --> 00:07:31,680
scope value is or how context<font color="#E5E5E5"> should be</font>

182
00:07:30,150 --> 00:07:34,020
used

183
00:07:31,680 --> 00:07:36,390
so these<font color="#E5E5E5"> request scope values I</font><font color="#CCCCCC"> think</font>

184
00:07:34,020 --> 00:07:39,690
the<font color="#CCCCCC"> original idea</font><font color="#E5E5E5"> was to have things</font>

185
00:07:36,390 --> 00:07:42,830
like session<font color="#E5E5E5"> ID request ID maybe a trace</font>

186
00:07:39,690 --> 00:07:45,180
ID if you're using some sort of tracing

187
00:07:42,830 --> 00:07:47,820
basically anything<font color="#E5E5E5"> that's a simple</font><font color="#CCCCCC"> value</font>

188
00:07:45,180 --> 00:07:49,920
that ends<font color="#E5E5E5"> in ID maybe that last parts a</font>

189
00:07:47,820 --> 00:07:52,950
little<font color="#E5E5E5"> bit of a stretch</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> very simple</font>

190
00:07:49,920 --> 00:07:55,470
<font color="#E5E5E5">values unfortunately</font><font color="#CCCCCC"> I suspect we've all</font>

191
00:07:52,950 --> 00:07:59,039
seen<font color="#E5E5E5"> context</font><font color="#CCCCCC"> abused to do</font><font color="#E5E5E5"> things like</font>

192
00:07:55,470 --> 00:08:00,600
<font color="#E5E5E5">this a lot of times I find in new Java</font>

193
00:07:59,040 --> 00:08:02,910
developers for instance<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are coming</font>

194
00:08:00,600 --> 00:08:03,960
in<font color="#E5E5E5"> to go who are other languages where</font>

195
00:08:02,910 --> 00:08:06,300
you're used to<font color="#E5E5E5"> a pattern like</font><font color="#CCCCCC"> this</font>

196
00:08:03,960 --> 00:08:09,150
<font color="#CCCCCC">Discover goes dependency injection</font>

197
00:08:06,300 --> 00:08:12,540
package and<font color="#E5E5E5"> love to abuse context to</font><font color="#CCCCCC"> put</font>

198
00:08:09,150 --> 00:08:15,840
in database connections and metrics and

199
00:08:12,540 --> 00:08:17,490
<font color="#E5E5E5">various loggers don't do this it's</font>

200
00:08:15,840 --> 00:08:20,460
terrible<font color="#E5E5E5"> it leads to</font><font color="#CCCCCC"> a maintainability</font>

201
00:08:17,490 --> 00:08:23,430
nightmare<font color="#E5E5E5"> because this is effectively an</font>

202
00:08:20,460 --> 00:08:24,570
undocumented side channel<font color="#CCCCCC"> API I suspect</font>

203
00:08:23,430 --> 00:08:26,880
we've all<font color="#E5E5E5"> run into this at some point</font>

204
00:08:24,570 --> 00:08:28,560
where you say well how am<font color="#E5E5E5"> I</font><font color="#CCCCCC"> getting my</font>

205
00:08:26,880 --> 00:08:29,760
database connection in my middleware and

206
00:08:28,560 --> 00:08:32,669
someone says if you're a web developer

207
00:08:29,760 --> 00:08:34,710
<font color="#CCCCCC">and someone says oh well that's just in</font>

208
00:08:32,669 --> 00:08:36,780
a context<font color="#E5E5E5"> based on a key in some package</font>

209
00:08:34,710 --> 00:08:38,190
somewhere<font color="#E5E5E5"> and none</font><font color="#CCCCCC"> of that was in the</font>

210
00:08:36,780 --> 00:08:40,770
function<font color="#E5E5E5"> signature and none of</font><font color="#CCCCCC"> that was</font>

211
00:08:38,190 --> 00:08:42,900
<font color="#CCCCCC">in the API and you</font><font color="#E5E5E5"> had to kind of dig</font>

212
00:08:40,770 --> 00:08:44,310
through and find it<font color="#E5E5E5"> and then you're</font>

213
00:08:42,900 --> 00:08:46,260
<font color="#CCCCCC">trying</font><font color="#E5E5E5"> to type</font><font color="#CCCCCC"> assert on a thing in a</font>

214
00:08:44,310 --> 00:08:47,699
context and<font color="#E5E5E5"> figure out</font><font color="#CCCCCC"> if it works but</font>

215
00:08:46,260 --> 00:08:49,020
maybe it doesn't<font color="#E5E5E5"> because someone's</font>

216
00:08:47,700 --> 00:08:51,450
inserted the wrong middleware<font color="#E5E5E5"> in the</font>

217
00:08:49,020 --> 00:08:55,079
chain<font color="#E5E5E5"> and it it just becomes a nightmare</font>

218
00:08:51,450 --> 00:08:57,240
<font color="#E5E5E5">and it's very hard to to use so this is</font>

219
00:08:55,080 --> 00:08:58,830
a sort of more<font color="#E5E5E5"> specific example of one</font>

220
00:08:57,240 --> 00:09:00,840
<font color="#CCCCCC">of those this is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> common</font>

221
00:08:58,830 --> 00:09:04,950
<font color="#E5E5E5">no really don't do this with context</font>

222
00:09:00,840 --> 00:09:06,690
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> because you see there's a the kind</font>

223
00:09:04,950 --> 00:09:08,670
<font color="#E5E5E5">of basic middleware pattern people use</font>

224
00:09:06,690 --> 00:09:11,040
when they're<font color="#E5E5E5"> abusing context this way is</font>

225
00:09:08,670 --> 00:09:13,439
you get the context<font color="#E5E5E5"> you insert a value</font>

226
00:09:11,040 --> 00:09:15,630
<font color="#E5E5E5">with int or create a new context with</font>

227
00:09:13,440 --> 00:09:17,700
that value<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then you create</font><font color="#CCCCCC"> a new</font>

228
00:09:15,630 --> 00:09:20,370
<font color="#E5E5E5">request with that new context and pass</font>

229
00:09:17,700 --> 00:09:22,890
it on<font color="#CCCCCC"> through</font><font color="#E5E5E5"> your middleware chain none</font>

230
00:09:20,370 --> 00:09:24,810
<font color="#CCCCCC">of this really</font><font color="#E5E5E5"> is tied to the request</font>

231
00:09:22,890 --> 00:09:27,569
specifically or none of<font color="#E5E5E5"> this guarantees</font>

232
00:09:24,810 --> 00:09:31,829
that the value you're using is really

233
00:09:27,570 --> 00:09:35,160
<font color="#E5E5E5">request scoped</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> kind of leads us</font>

234
00:09:31,830 --> 00:09:37,230
<font color="#E5E5E5">to our second rule the way the reason</font>

235
00:09:35,160 --> 00:09:39,390
<font color="#CCCCCC">this is abusable as a side channel api</font>

236
00:09:37,230 --> 00:09:42,330
is because<font color="#E5E5E5"> this context leaks between</font>

237
00:09:39,390 --> 00:09:45,120
packages<font color="#E5E5E5"> or this empty interface leaks</font>

238
00:09:42,330 --> 00:09:46,980
between packages so empty interface

239
00:09:45,120 --> 00:09:49,470
should not cross package boundaries

240
00:09:46,980 --> 00:09:52,770
otherwise it's able to<font color="#E5E5E5"> be used as a side</font>

241
00:09:49,470 --> 00:09:55,170
channel<font color="#CCCCCC"> api</font><font color="#E5E5E5"> and kind of slip smuggle</font>

242
00:09:52,770 --> 00:09:59,160
data through into packages where it's

243
00:09:55,170 --> 00:10:00,599
not supposed<font color="#CCCCCC"> to be finally we'll take a</font>

244
00:09:59,160 --> 00:10:04,560
look at a<font color="#E5E5E5"> third package and I couldn't</font>

245
00:10:00,600 --> 00:10:06,300
find a<font color="#CCCCCC"> good example of this in the</font>

246
00:10:04,560 --> 00:10:07,680
<font color="#CCCCCC">standard library and</font><font color="#E5E5E5"> I'm sure one exists</font>

247
00:10:06,300 --> 00:10:09,209
and if I if there's a much better

248
00:10:07,680 --> 00:10:10,620
<font color="#CCCCCC">example I hope someone will tell me</font>

249
00:10:09,210 --> 00:10:14,040
afterwards<font color="#CCCCCC"> so I'm</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to use an</font>

250
00:10:10,620 --> 00:10:16,620
example<font color="#CCCCCC"> from one of my packages Sasol is</font>

251
00:10:14,040 --> 00:10:18,510
a authentication framework that's<font color="#E5E5E5"> widely</font>

252
00:10:16,620 --> 00:10:22,230
used you probably<font color="#E5E5E5"> use it every time you</font>

253
00:10:18,510 --> 00:10:25,800
log in<font color="#CCCCCC"> to check your email with</font><font color="#E5E5E5"> smtp</font><font color="#CCCCCC"> or</font>

254
00:10:22,230 --> 00:10:27,210
you probably<font color="#CCCCCC"> use whatsapp or</font><font color="#E5E5E5"> facebook</font>

255
00:10:25,800 --> 00:10:30,270
chat or something<font color="#CCCCCC"> i don't actually</font><font color="#E5E5E5"> know</font>

256
00:10:27,210 --> 00:10:32,520
<font color="#E5E5E5">what they use but it's just a widely</font>

257
00:10:30,270 --> 00:10:34,620
used potentially<font color="#E5E5E5"> multi round-trip</font>

258
00:10:32,520 --> 00:10:36,930
authentication framework so<font color="#CCCCCC"> i have a</font>

259
00:10:34,620 --> 00:10:39,780
little<font color="#CCCCCC"> go library</font><font color="#E5E5E5"> that uses it and the</font>

260
00:10:36,930 --> 00:10:41,489
<font color="#E5E5E5">api looks something like this</font><font color="#CCCCCC"> we have a</font>

261
00:10:39,780 --> 00:10:43,050
mechanism<font color="#E5E5E5"> which are things like plain</font>

262
00:10:41,490 --> 00:10:46,380
username and password authentication

263
00:10:43,050 --> 00:10:49,319
<font color="#CCCCCC">oath to various kind of authentication</font>

264
00:10:46,380 --> 00:10:51,330
systems<font color="#E5E5E5"> a negotiator which is a state</font>

265
00:10:49,320 --> 00:10:53,400
machine<font color="#E5E5E5"> that actually</font><font color="#CCCCCC"> handles the</font>

266
00:10:51,330 --> 00:10:55,440
authentication flow<font color="#E5E5E5"> make sure that</font>

267
00:10:53,400 --> 00:10:58,350
replay attacks<font color="#E5E5E5"> aren't possible make</font><font color="#CCCCCC"> sure</font>

268
00:10:55,440 --> 00:11:01,740
that that general security constraints

269
00:10:58,350 --> 00:11:04,230
<font color="#E5E5E5">are enforced and that has a function the</font>

270
00:11:01,740 --> 00:11:06,510
the user of the package calls to<font color="#E5E5E5"> advance</font>

271
00:11:04,230 --> 00:11:08,540
the state<font color="#E5E5E5"> machine</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> accept challenges</font>

272
00:11:06,510 --> 00:11:10,730
and returns responses and<font color="#E5E5E5"> you can</font>

273
00:11:08,540 --> 00:11:12,530
<font color="#CCCCCC">serialized that and your whatever</font><font color="#E5E5E5"> your</font>

274
00:11:10,730 --> 00:11:14,210
chat protocol or your email or<font color="#CCCCCC"> whatever</font>

275
00:11:12,530 --> 00:11:19,420
the protocol is and send<font color="#E5E5E5"> them</font><font color="#CCCCCC"> over the</font>

276
00:11:14,210 --> 00:11:22,600
wire<font color="#CCCCCC"> so as you can</font><font color="#E5E5E5"> see the mechanism API</font>

277
00:11:19,420 --> 00:11:24,770
takes and returns an empty interface and

278
00:11:22,600 --> 00:11:26,870
this<font color="#E5E5E5"> I think is</font><font color="#CCCCCC"> actually a pretty good</font>

279
00:11:24,770 --> 00:11:29,120
<font color="#CCCCCC">use of interface because this mechanism</font>

280
00:11:26,870 --> 00:11:32,810
might be defined by a user in<font color="#E5E5E5"> their own</font>

281
00:11:29,120 --> 00:11:35,870
package<font color="#CCCCCC"> but the way it</font><font color="#E5E5E5"> works is every</font>

282
00:11:32,810 --> 00:11:37,339
<font color="#CCCCCC">single time the negotiator step method</font>

283
00:11:35,870 --> 00:11:39,320
is<font color="#E5E5E5"> called we're moving we've gotten a</font>

284
00:11:37,340 --> 00:11:41,960
new authentication<font color="#E5E5E5"> request or something</font>

285
00:11:39,320 --> 00:11:43,520
over<font color="#E5E5E5"> the wire and we are advancing the</font>

286
00:11:41,960 --> 00:11:45,710
state machine and<font color="#E5E5E5"> trying to do some sort</font>

287
00:11:43,520 --> 00:11:46,790
<font color="#CCCCCC">of authentication it calls this</font>

288
00:11:45,710 --> 00:11:48,770
<font color="#E5E5E5">mechanism</font>

289
00:11:46,790 --> 00:11:50,180
<font color="#CCCCCC">its work calls this mechanisms next</font>

290
00:11:48,770 --> 00:11:52,699
function<font color="#E5E5E5"> that's the</font><font color="#CCCCCC"> user-defined</font>

291
00:11:50,180 --> 00:11:56,569
<font color="#E5E5E5">whatever</font><font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> off to specific what we need</font>

292
00:11:52,700 --> 00:11:59,030
to do thing that returns<font color="#E5E5E5"> some data since</font>

293
00:11:56,570 --> 00:12:01,190
<font color="#E5E5E5">this a so might be</font><font color="#CCCCCC"> multi-step in a</font>

294
00:11:59,030 --> 00:12:03,650
future<font color="#E5E5E5"> step you might need a value from</font>

295
00:12:01,190 --> 00:12:06,080
an earlier step so for instance in scram

296
00:12:03,650 --> 00:12:07,730
which is just is a password<font color="#E5E5E5"> based</font>

297
00:12:06,080 --> 00:12:09,440
authentication where you never send the

298
00:12:07,730 --> 00:12:11,570
password<font color="#CCCCCC"> you do a proof</font><font color="#E5E5E5"> of possession</font>

299
00:12:09,440 --> 00:12:13,970
one of the ways the server makes sure

300
00:12:11,570 --> 00:12:17,480
it's still talking to the same person<font color="#E5E5E5"> is</font>

301
00:12:13,970 --> 00:12:20,450
it returns a signed version of the very

302
00:12:17,480 --> 00:12:23,330
first<font color="#E5E5E5"> message</font><font color="#CCCCCC"> that was sent which is</font>

303
00:12:20,450 --> 00:12:24,860
<font color="#CCCCCC">also</font><font color="#E5E5E5"> something I</font><font color="#CCCCCC"> think TLS does and so</font>

304
00:12:23,330 --> 00:12:26,330
you you<font color="#E5E5E5"> have this data you might need in</font>

305
00:12:24,860 --> 00:12:28,370
another step

306
00:12:26,330 --> 00:12:30,260
unfortunately for reasons that<font color="#E5E5E5"> don't</font>

307
00:12:28,370 --> 00:12:33,200
<font color="#CCCCCC">really</font><font color="#E5E5E5"> matter here mechanisms have to</font>

308
00:12:30,260 --> 00:12:35,120
remain stateless<font color="#E5E5E5"> or don't have to but</font>

309
00:12:33,200 --> 00:12:38,200
it's because this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a thing users are</font>

310
00:12:35,120 --> 00:12:40,520
writing and is authentication based it's

311
00:12:38,200 --> 00:12:43,400
it's important to<font color="#E5E5E5"> keep them stateless</font>

312
00:12:40,520 --> 00:12:44,750
because keeping<font color="#E5E5E5"> things stateless makes</font>

313
00:12:43,400 --> 00:12:46,430
them simpler and auth code is

314
00:12:44,750 --> 00:12:48,590
notoriously difficult<font color="#E5E5E5"> to write and</font>

315
00:12:46,430 --> 00:12:50,780
difficult to get<font color="#E5E5E5"> correct to begin with</font>

316
00:12:48,590 --> 00:12:52,790
and<font color="#CCCCCC"> as security sensitive</font><font color="#E5E5E5"> so we want to</font>

317
00:12:50,780 --> 00:12:54,319
make things<font color="#CCCCCC"> as simple as</font><font color="#E5E5E5"> possible</font><font color="#CCCCCC"> but</font>

318
00:12:52,790 --> 00:12:58,189
there is this state that<font color="#CCCCCC"> needs to be</font>

319
00:12:54,320 --> 00:13:00,170
stored<font color="#E5E5E5"> somewhere</font><font color="#CCCCCC"> so since the negotiator</font>

320
00:12:58,190 --> 00:13:02,300
the state machine is already stateful

321
00:13:00,170 --> 00:13:05,209
for obvious reasons it's called a state

322
00:13:02,300 --> 00:13:07,579
machine<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> return</font><font color="#CCCCCC"> that state</font><font color="#E5E5E5"> that</font>

323
00:13:05,210 --> 00:13:09,590
needs to<font color="#CCCCCC"> be stored</font><font color="#E5E5E5"> the negotiator will</font>

324
00:13:07,580 --> 00:13:11,720
store it for us and then when it calls

325
00:13:09,590 --> 00:13:15,020
<font color="#CCCCCC">next again in future</font><font color="#E5E5E5"> steps it will pass</font>

326
00:13:11,720 --> 00:13:16,880
that back in as<font color="#E5E5E5"> the data parameter that</font>

327
00:13:15,020 --> 00:13:18,500
all sounds<font color="#CCCCCC"> very complicated and it kind</font>

328
00:13:16,880 --> 00:13:19,600
of is I wish I tried to draw a flow

329
00:13:18,500 --> 00:13:21,579
diagram

330
00:13:19,600 --> 00:13:23,170
but for some<font color="#E5E5E5"> reason I couldn't</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> bucks</font>

331
00:13:21,579 --> 00:13:26,079
drawing characters to show up<font color="#E5E5E5"> our work</font>

332
00:13:23,170 --> 00:13:27,550
at all have no idea why<font color="#CCCCCC"> and I tried to</font>

333
00:13:26,079 --> 00:13:29,500
do<font color="#E5E5E5"> a</font><font color="#CCCCCC"> JPEG and it was awful</font><font color="#E5E5E5"> and I kind of</font>

334
00:13:27,550 --> 00:13:31,300
gave up<font color="#CCCCCC"> after a while</font><font color="#E5E5E5"> but the idea is</font>

335
00:13:29,500 --> 00:13:34,389
data is returned<font color="#E5E5E5"> from cache and then the</font>

336
00:13:31,300 --> 00:13:37,240
<font color="#E5E5E5">next step past into</font><font color="#CCCCCC"> passed back in as</font>

337
00:13:34,389 --> 00:13:38,920
<font color="#CCCCCC">the data parameter and this keeps things</font>

338
00:13:37,240 --> 00:13:41,139
very<font color="#E5E5E5"> simple</font><font color="#CCCCCC"> it means</font><font color="#E5E5E5"> that could the</font>

339
00:13:38,920 --> 00:13:43,569
producer<font color="#CCCCCC"> is always the consumer this</font>

340
00:13:41,139 --> 00:13:45,459
next function<font color="#CCCCCC"> always puts a</font><font color="#E5E5E5"> value into</font>

341
00:13:43,569 --> 00:13:48,099
<font color="#E5E5E5">cash and</font><font color="#CCCCCC"> is always</font><font color="#E5E5E5"> getting it back in</font>

342
00:13:45,459 --> 00:13:49,719
data and<font color="#E5E5E5"> that means that in practice the</font>

343
00:13:48,100 --> 00:13:52,180
next functions are generally always

344
00:13:49,720 --> 00:13:54,160
structured like<font color="#CCCCCC"> this when people write</font>

345
00:13:52,180 --> 00:13:55,959
these<font color="#E5E5E5"> mechanisms you end up with a</font>

346
00:13:54,160 --> 00:13:58,689
<font color="#E5E5E5">something</font><font color="#CCCCCC"> like a step that checks the</font>

347
00:13:55,959 --> 00:14:00,279
<font color="#CCCCCC">states</font><font color="#E5E5E5"> this API is</font><font color="#CCCCCC"> not what it</font><font color="#E5E5E5"> looks</font>

348
00:13:58,690 --> 00:14:03,430
<font color="#E5E5E5">like in the actual package that's sort</font>

349
00:14:00,279 --> 00:14:05,019
<font color="#CCCCCC">of simplified but so it might check step</font>

350
00:14:03,430 --> 00:14:06,699
<font color="#CCCCCC">one are we in step one step two step</font>

351
00:14:05,019 --> 00:14:09,459
three with a switch or an F<font color="#E5E5E5"> or something</font>

352
00:14:06,699 --> 00:14:12,729
put some data in<font color="#E5E5E5"> this case</font><font color="#CCCCCC"> a randomly</font>

353
00:14:09,459 --> 00:14:14,529
selected<font color="#CCCCCC"> integer</font><font color="#E5E5E5"> in to return it</font><font color="#CCCCCC"> for use</font>

354
00:14:12,730 --> 00:14:17,050
<font color="#CCCCCC">in a future step and then because it</font>

355
00:14:14,529 --> 00:14:18,730
returned it<font color="#E5E5E5"> it can always</font><font color="#CCCCCC"> assert on the</font>

356
00:14:17,050 --> 00:14:21,339
type of<font color="#E5E5E5"> that data</font><font color="#CCCCCC"> and it knows that it</font>

357
00:14:18,730 --> 00:14:23,709
will never be<font color="#E5E5E5"> mistaken it's very easy to</font>

358
00:14:21,339 --> 00:14:26,380
<font color="#E5E5E5">test and it's very simple and easy to</font>

359
00:14:23,709 --> 00:14:28,239
read<font color="#CCCCCC"> I think this is a slightly better</font>

360
00:14:26,380 --> 00:14:29,680
use<font color="#CCCCCC"> of empty interface and it follows</font>

361
00:14:28,240 --> 00:14:32,769
<font color="#E5E5E5">these two rules we've mentioned before</font>

362
00:14:29,680 --> 00:14:35,560
<font color="#E5E5E5">and this</font><font color="#CCCCCC"> is the the point in the talk I</font>

363
00:14:32,769 --> 00:14:37,000
think<font color="#E5E5E5"> yep where I have a bit of a</font>

364
00:14:35,560 --> 00:14:39,790
confession<font color="#E5E5E5"> to make I've been</font>

365
00:14:37,000 --> 00:14:41,500
deliberately wasting<font color="#E5E5E5"> your time</font><font color="#CCCCCC"> both of</font>

366
00:14:39,790 --> 00:14:44,319
these rules<font color="#E5E5E5"> actually kind</font><font color="#CCCCCC"> of simplified</font>

367
00:14:41,500 --> 00:14:46,180
<font color="#E5E5E5">down into a much simpler rule that</font>

368
00:14:44,319 --> 00:14:47,709
<font color="#E5E5E5">encompasses both of them and it took me</font>

369
00:14:46,180 --> 00:14:49,029
a while to<font color="#E5E5E5"> realize this is which is why</font>

370
00:14:47,709 --> 00:14:51,130
I bothered with the rest of the talk

371
00:14:49,029 --> 00:14:53,889
because<font color="#CCCCCC"> hopefully</font><font color="#E5E5E5"> it kind of gave you a</font>

372
00:14:51,130 --> 00:14:55,660
few examples<font color="#E5E5E5"> first that will make this</font>

373
00:14:53,889 --> 00:14:57,819
make more sense

374
00:14:55,660 --> 00:15:00,160
my real rule for using empty interface

375
00:14:57,819 --> 00:15:02,620
is you must always be able<font color="#E5E5E5"> to type a</font>

376
00:15:00,160 --> 00:15:04,600
<font color="#E5E5E5">cert on the value in the empty interface</font>

377
00:15:02,620 --> 00:15:07,360
and if you can't do<font color="#E5E5E5"> that it's going to</font>

378
00:15:04,600 --> 00:15:11,889
<font color="#E5E5E5">lead to problems so empty interface</font>

379
00:15:07,360 --> 00:15:13,509
gives you it's not<font color="#E5E5E5"> that</font><font color="#CCCCCC"> it's useless you</font>

380
00:15:11,889 --> 00:15:15,069
it's easy to say well<font color="#CCCCCC"> if I can type a</font>

381
00:15:13,509 --> 00:15:16,750
cert why don't I just return an<font color="#E5E5E5"> int but</font>

382
00:15:15,069 --> 00:15:19,660
<font color="#E5E5E5">I lie in a lot of cases you do need</font>

383
00:15:16,750 --> 00:15:21,160
arbitrary data<font color="#CCCCCC"> in some languages you</font>

384
00:15:19,660 --> 00:15:23,589
would use generics for this and others

385
00:15:21,160 --> 00:15:25,420
there are<font color="#E5E5E5"> other</font><font color="#CCCCCC"> mechanisms and go that's</font>

386
00:15:23,589 --> 00:15:27,910
sort of a mix of empty interface and

387
00:15:25,420 --> 00:15:30,459
closures but<font color="#E5E5E5"> if you are using the empty</font>

388
00:15:27,910 --> 00:15:32,889
interface and you have some<font color="#E5E5E5"> arbitrary</font>

389
00:15:30,459 --> 00:15:33,279
data<font color="#E5E5E5"> that you need to return</font><font color="#CCCCCC"> it needs to</font>

390
00:15:32,889 --> 00:15:35,589
be

391
00:15:33,279 --> 00:15:37,389
<font color="#CCCCCC">no arbitrary</font><font color="#E5E5E5"> data you must always be</font>

392
00:15:35,589 --> 00:15:39,579
able<font color="#E5E5E5"> to type</font><font color="#CCCCCC"> assert on that data</font><font color="#E5E5E5"> and</font>

393
00:15:37,389 --> 00:15:41,649
that<font color="#E5E5E5"> will</font><font color="#CCCCCC"> main make sure that you don't</font>

394
00:15:39,579 --> 00:15:44,138
run<font color="#E5E5E5"> into maintainability problems later</font>

395
00:15:41,649 --> 00:15:47,110
<font color="#CCCCCC">and I</font><font color="#E5E5E5"> think that's sort of the the core</font>

396
00:15:44,139 --> 00:15:49,449
rule<font color="#E5E5E5"> when</font><font color="#CCCCCC"> using empty interface that</font>

397
00:15:47,110 --> 00:15:50,949
needs to<font color="#CCCCCC"> be followed and there's a lot</font>

398
00:15:49,449 --> 00:15:52,269
<font color="#E5E5E5">of other examples if you go dig through</font>

399
00:15:50,949 --> 00:15:53,649
the standard library but these are my

400
00:15:52,269 --> 00:15:55,779
kind<font color="#E5E5E5"> of three rules</font><font color="#CCCCCC"> for using</font><font color="#E5E5E5"> empty</font>

401
00:15:53,649 --> 00:15:57,009
interface<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> end really early</font>

402
00:15:55,779 --> 00:15:59,199
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> really it</font>

403
00:15:57,009 --> 00:16:06,569
so if anybody has<font color="#CCCCCC"> any questions</font><font color="#E5E5E5"> I'd be</font>

404
00:15:59,199 --> 00:16:06,569
happy<font color="#CCCCCC"> to take</font><font color="#E5E5E5"> them in the back</font>

405
00:16:24,500 --> 00:16:29,390
so defining<font color="#E5E5E5"> a method</font><font color="#CCCCCC"> I'll repeat the</font>

406
00:16:27,650 --> 00:16:31,160
question<font color="#E5E5E5"> but that's a validator method</font>

407
00:16:29,390 --> 00:16:35,350
is what you're<font color="#E5E5E5"> asking about or like a</font>

408
00:16:31,160 --> 00:16:35,350
validate interface<font color="#E5E5E5"> valuer</font>

409
00:16:47,960 --> 00:16:53,460
I'm not sure<font color="#CCCCCC"> that I followed the</font>

410
00:16:50,220 --> 00:16:55,140
question I'm sorry<font color="#E5E5E5"> so I think the</font>

411
00:16:53,460 --> 00:16:57,330
question<font color="#CCCCCC"> stopped me if I'm wrong I think</font>

412
00:16:55,140 --> 00:17:01,830
<font color="#CCCCCC">the question</font><font color="#E5E5E5"> was is it oh is it a good</font>

413
00:16:57,330 --> 00:17:03,720
idea to define methods like is integer

414
00:17:01,830 --> 00:17:09,690
value or something<font color="#E5E5E5"> for your</font><font color="#CCCCCC"> Empty</font>

415
00:17:03,720 --> 00:17:11,100
interfaces<font color="#CCCCCC"> I yeah I don't think so I</font>

416
00:17:09,690 --> 00:17:13,440
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> it's a bad idea but I don't</font>

417
00:17:11,099 --> 00:17:15,659
think<font color="#E5E5E5"> it's necessary because the I</font><font color="#CCCCCC"> don't</font>

418
00:17:13,440 --> 00:17:19,260
have an<font color="#E5E5E5"> example on here but because</font><font color="#CCCCCC"> you</font>

419
00:17:15,660 --> 00:17:20,970
can you<font color="#CCCCCC"> should be able to</font><font color="#E5E5E5"> type</font><font color="#CCCCCC"> a cert in</font>

420
00:17:19,260 --> 00:17:22,410
my in my<font color="#CCCCCC"> opinion if you can't though if</font>

421
00:17:20,970 --> 00:17:24,660
for some reason you really<font color="#E5E5E5"> do</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> need</font>

422
00:17:22,410 --> 00:17:26,730
to<font color="#E5E5E5"> check if a value is a certain thing</font>

423
00:17:24,660 --> 00:17:28,620
that's what type<font color="#E5E5E5"> switching is for or</font>

424
00:17:26,730 --> 00:17:31,230
types or type assertions<font color="#E5E5E5"> with the</font>

425
00:17:28,620 --> 00:17:33,959
optional<font color="#CCCCCC"> ok parameter so I don't see the</font>

426
00:17:31,230 --> 00:17:38,510
<font color="#E5E5E5">use in having</font><font color="#CCCCCC"> a separate method but I</font>

427
00:17:33,960 --> 00:17:41,690
may<font color="#CCCCCC"> have misunderstood the the question</font>

428
00:17:38,510 --> 00:17:41,690
<font color="#E5E5E5">anybody else</font>

429
00:17:53,580 --> 00:17:57,689
<font color="#CCCCCC">oh right so the question is at what</font>

430
00:17:55,890 --> 00:18:00,990
point could<font color="#E5E5E5"> you type assert in the</font>

431
00:17:57,690 --> 00:18:03,120
<font color="#E5E5E5">Marshall XML example</font><font color="#CCCCCC"> and you really</font>

432
00:18:00,990 --> 00:18:05,400
can't is the problem<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> sort of why</font>

433
00:18:03,120 --> 00:18:07,110
this<font color="#E5E5E5"> was one of my early not a bad</font>

434
00:18:05,400 --> 00:18:09,000
example<font color="#E5E5E5"> it's a great example</font><font color="#CCCCCC"> from the</font>

435
00:18:07,110 --> 00:18:12,000
users perspective<font color="#E5E5E5"> it's a very nice API</font>

436
00:18:09,000 --> 00:18:13,800
but it's very<font color="#E5E5E5"> bad from the from the</font>

437
00:18:12,000 --> 00:18:16,560
<font color="#E5E5E5">developers perspective and the reason is</font>

438
00:18:13,800 --> 00:18:20,159
like<font color="#CCCCCC"> I said it's hard to</font><font color="#E5E5E5"> type</font><font color="#CCCCCC"> assert</font><font color="#E5E5E5"> you</font>

439
00:18:16,560 --> 00:18:22,379
end up<font color="#E5E5E5"> having to do this</font><font color="#CCCCCC"> are lots of</font>

440
00:18:20,160 --> 00:18:23,790
reflection<font color="#E5E5E5"> to get because you can't type</font>

441
00:18:22,380 --> 00:18:25,860
<font color="#E5E5E5">assert because you don't know what the</font>

442
00:18:23,790 --> 00:18:27,810
type is you have to do a lot of

443
00:18:25,860 --> 00:18:33,000
reflection<font color="#E5E5E5"> so it you can't is I think</font>

444
00:18:27,810 --> 00:18:34,889
the answer<font color="#CCCCCC"> I don't know</font><font color="#E5E5E5"> a way not in</font>

445
00:18:33,000 --> 00:18:38,550
this<font color="#E5E5E5"> I I would love to know a better way</font>

446
00:18:34,890 --> 00:18:43,230
to do the<font color="#E5E5E5"> encoding package and go but I</font>

447
00:18:38,550 --> 00:18:45,379
<font color="#E5E5E5">haven't thought through that anybody</font>

448
00:18:43,230 --> 00:18:45,380
else

449
00:18:49,309 --> 00:18:57,370
<font color="#CCCCCC">I guess that's</font><font color="#E5E5E5"> it I'm sorry I'm very</font>

450
00:18:51,200 --> 00:18:57,370
<font color="#E5E5E5">early thank you</font>

