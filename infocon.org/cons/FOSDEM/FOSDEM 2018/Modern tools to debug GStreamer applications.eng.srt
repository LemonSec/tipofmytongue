1
00:00:05,729 --> 00:00:10,600
<font color="#CCCCCC">okay so we'll begin with the</font><font color="#E5E5E5"> next talk</font>

2
00:00:08,350 --> 00:00:12,910
the last<font color="#E5E5E5"> talk about</font><font color="#CCCCCC"> gstreamer</font><font color="#E5E5E5"> this time</font>

3
00:00:10,600 --> 00:00:14,410
we'll focus on<font color="#E5E5E5"> debugging</font><font color="#CCCCCC"> GStreamer</font>

4
00:00:12,910 --> 00:00:19,440
applications

5
00:00:14,410 --> 00:00:22,628
I told by guillaume de<font color="#CCCCCC"> matt thank you</font>

6
00:00:19,440 --> 00:00:22,629
[Music]

7
00:00:26,340 --> 00:00:32,949
<font color="#CCCCCC">I'm a multimedia engineer working at</font>

8
00:00:29,440 --> 00:00:34,690
kelabra<font color="#CCCCCC"> just to let you know we are</font>

9
00:00:32,949 --> 00:00:36,519
<font color="#CCCCCC">currently looking to hire a bunch</font><font color="#E5E5E5"> of</font>

10
00:00:34,690 --> 00:00:38,530
<font color="#E5E5E5">people</font><font color="#CCCCCC"> so if you're interested working</font>

11
00:00:36,520 --> 00:00:40,629
in free software<font color="#CCCCCC"> please let us</font><font color="#E5E5E5"> know you</font>

12
00:00:38,530 --> 00:00:43,449
can find us with this kind of foodie and

13
00:00:40,629 --> 00:00:48,099
we have a standard drop<font color="#CCCCCC"> corners like</font>

14
00:00:43,449 --> 00:00:49,479
that<font color="#CCCCCC"> okay comes up</font><font color="#E5E5E5"> okay so yeah if</font>

15
00:00:48,100 --> 00:00:52,769
you're interested<font color="#CCCCCC"> working on free</font>

16
00:00:49,479 --> 00:00:55,329
software with us<font color="#E5E5E5"> just come talk to us</font>

17
00:00:52,769 --> 00:00:58,870
<font color="#CCCCCC">today I'm going to talk about debugging</font>

18
00:00:55,329 --> 00:01:00,429
<font color="#CCCCCC">just Reimer application</font><font color="#E5E5E5"> what we</font>

19
00:00:58,870 --> 00:01:03,760
developed in the<font color="#E5E5E5"> last</font><font color="#CCCCCC"> release to make</font>

20
00:01:00,429 --> 00:01:05,790
that easier for you<font color="#CCCCCC"> and what I learned</font>

21
00:01:03,760 --> 00:01:09,179
<font color="#E5E5E5">while doing that</font>

22
00:01:05,790 --> 00:01:11,950
so<font color="#CCCCCC"> I'll start</font><font color="#E5E5E5"> talking about tracers</font>

23
00:01:09,180 --> 00:01:14,320
<font color="#E5E5E5">which are new mechanism used for the</font>

24
00:01:11,950 --> 00:01:16,869
<font color="#E5E5E5">beginning I'll give some more detail</font><font color="#CCCCCC"> of</font>

25
00:01:14,320 --> 00:01:19,570
the leak tracer which I developed<font color="#E5E5E5"> a few</font>

26
00:01:16,869 --> 00:01:22,509
months ago<font color="#E5E5E5"> I'll talk about GST shark</font><font color="#CCCCCC"> and</font>

27
00:01:19,570 --> 00:01:24,429
I'll finish with some tools which can

28
00:01:22,509 --> 00:01:29,770
<font color="#CCCCCC">help you dealing with</font><font color="#E5E5E5"> these two more</font>

29
00:01:24,430 --> 00:01:32,079
<font color="#E5E5E5">logs</font><font color="#CCCCCC"> which I found quite useful</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> GST</font>

30
00:01:29,770 --> 00:01:36,729
tracer<font color="#E5E5E5"> it's a new</font><font color="#CCCCCC"> mechanism which has</font>

31
00:01:32,079 --> 00:01:39,639
been introduced in 1.8<font color="#E5E5E5"> it's meant to be</font>

32
00:01:36,729 --> 00:01:43,899
used by<font color="#E5E5E5"> a debugging tool so that's the</font>

33
00:01:39,640 --> 00:01:48,609
<font color="#E5E5E5">only purpose of this new system and it</font>

34
00:01:43,899 --> 00:01:52,090
hello<font color="#CCCCCC"> tracers to hook inside</font><font color="#E5E5E5"> the</font>

35
00:01:48,609 --> 00:01:53,949
internal<font color="#E5E5E5"> of</font><font color="#CCCCCC"> gstreamer core so when doing</font>

36
00:01:52,090 --> 00:01:55,899
<font color="#E5E5E5">that plugins can get a world lot of</font>

37
00:01:53,950 --> 00:01:58,030
information<font color="#E5E5E5"> about what's</font><font color="#CCCCCC"> going on in the</font>

38
00:01:55,899 --> 00:02:00,130
pipeline<font color="#CCCCCC"> for</font><font color="#E5E5E5"> example when a buffer is</font>

39
00:01:58,030 --> 00:02:03,549
buying push from one<font color="#E5E5E5"> head amount to</font>

40
00:02:00,130 --> 00:02:07,420
another<font color="#CCCCCC"> when all this kind of</font>

41
00:02:03,549 --> 00:02:10,600
information<font color="#CCCCCC"> tis hallowed tracers</font>

42
00:02:07,420 --> 00:02:13,680
together or T's info and produce a

43
00:02:10,600 --> 00:02:16,660
formatted output<font color="#E5E5E5"> so it's meant to</font><font color="#CCCCCC"> be</font>

44
00:02:13,680 --> 00:02:17,480
usable by external application for is

45
00:02:16,660 --> 00:02:20,810
departing

46
00:02:17,480 --> 00:02:23,030
<font color="#E5E5E5">in this kind of things</font><font color="#CCCCCC"> so it's been</font>

47
00:02:20,810 --> 00:02:24,830
proved very<font color="#CCCCCC"> useful so far</font>

48
00:02:23,030 --> 00:02:29,110
and now I'm going<font color="#E5E5E5"> to show you different</font>

49
00:02:24,830 --> 00:02:29,110
kind<font color="#E5E5E5"> of things you can do using tracers</font>

50
00:02:30,069 --> 00:02:37,310
<font color="#CCCCCC">okay this is absolutely</font><font color="#E5E5E5"> not readable so</font>

51
00:02:34,819 --> 00:02:39,290
<font color="#E5E5E5">I</font><font color="#CCCCCC"> wasn't</font><font color="#E5E5E5"> sure about the best way to</font>

52
00:02:37,310 --> 00:02:43,000
display console<font color="#E5E5E5"> hot</font><font color="#CCCCCC"> putas try the him</font>

53
00:02:39,290 --> 00:02:43,000
edge but<font color="#CCCCCC"> porchetta was a terrible idea</font>

54
00:02:43,940 --> 00:02:49,849
the<font color="#E5E5E5"> two enabled tracer it's pretty easy</font>

55
00:02:46,879 --> 00:02:53,000
<font color="#E5E5E5">you have the GST tracer on</font><font color="#CCCCCC"> German</font>

56
00:02:49,849 --> 00:02:55,099
variable that you can just define with

57
00:02:53,000 --> 00:02:57,260
the tracers you want to Hannibal

58
00:02:55,099 --> 00:02:59,780
so<font color="#CCCCCC"> Fructis</font><font color="#E5E5E5"> the example I used the stud</font>

59
00:02:57,260 --> 00:03:02,989
<font color="#CCCCCC">and</font><font color="#E5E5E5"> there are used</font><font color="#CCCCCC"> edge</font><font color="#E5E5E5"> one so you just</font>

60
00:02:59,780 --> 00:03:05,599
<font color="#E5E5E5">define</font><font color="#CCCCCC"> that and then you launch</font><font color="#E5E5E5"> you just</font>

61
00:03:02,989 --> 00:03:08,030
<font color="#E5E5E5">tremor application here I'm using GST</font>

62
00:03:05,599 --> 00:03:11,328
<font color="#CCCCCC">launched which</font><font color="#E5E5E5"> is the kind of tool we</font>

63
00:03:08,030 --> 00:03:13,370
use to<font color="#CCCCCC"> test pipeline but you can do</font><font color="#E5E5E5"> that</font>

64
00:03:11,329 --> 00:03:15,709
with pretty<font color="#E5E5E5"> much</font><font color="#CCCCCC"> well pretty only up a</font>

65
00:03:13,370 --> 00:03:17,720
streamer application so<font color="#E5E5E5"> you can use GST</font>

66
00:03:15,709 --> 00:03:20,060
<font color="#CCCCCC">play just to play a video you</font><font color="#E5E5E5"> could use</font>

67
00:03:17,720 --> 00:03:22,639
the term or whatever that<font color="#E5E5E5"> will work with</font>

68
00:03:20,060 --> 00:03:27,350
<font color="#CCCCCC">any just</font><font color="#E5E5E5"> rumor application which is</font>

69
00:03:22,639 --> 00:03:30,350
pretty convenient then you need<font color="#E5E5E5"> to say</font>

70
00:03:27,350 --> 00:03:32,480
that<font color="#CCCCCC"> you want the tracer hood put to be</font>

71
00:03:30,350 --> 00:03:35,329
generated<font color="#CCCCCC"> so for that we use the GST</font>

72
00:03:32,480 --> 00:03:39,380
debug<font color="#CCCCCC"> undetermined variable with the GST</font>

73
00:03:35,329 --> 00:03:42,410
tracer category and<font color="#E5E5E5"> log level and then I</font>

74
00:03:39,380 --> 00:03:45,889
drop<font color="#E5E5E5"> a drop everything to a file into GT</font>

75
00:03:42,410 --> 00:03:48,109
debug debug file sorry<font color="#CCCCCC"> I'm German</font>

76
00:03:45,889 --> 00:03:49,190
variable so as you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> it there is</font>

77
00:03:48,109 --> 00:03:50,780
nothing<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> done</font>

78
00:03:49,190 --> 00:03:52,130
programmatically<font color="#CCCCCC"> you don't have to</font>

79
00:03:50,780 --> 00:03:54,290
rebuild anything it's all integrated

80
00:03:52,130 --> 00:03:57,079
<font color="#CCCCCC">into a streamer itself and it</font><font color="#E5E5E5"> will be</font>

81
00:03:54,290 --> 00:04:01,608
automatically enabled by using those few

82
00:03:57,079 --> 00:04:04,220
environment variable<font color="#CCCCCC"> you run that it</font>

83
00:04:01,609 --> 00:04:07,459
will generate<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of logs</font><font color="#CCCCCC"> to this file</font>

84
00:04:04,220 --> 00:04:10,160
<font color="#E5E5E5">and tend to</font><font color="#CCCCCC"> read</font><font color="#E5E5E5"> the GST stat tool which</font>

85
00:04:07,459 --> 00:04:12,230
is part of<font color="#CCCCCC"> gstreamer core as</font><font color="#E5E5E5"> well which</font>

86
00:04:10,160 --> 00:04:14,299
will parse those<font color="#E5E5E5"> file and generate a</font>

87
00:04:12,230 --> 00:04:17,478
bunch of statistic which are completely

88
00:04:14,299 --> 00:04:19,280
unreadable<font color="#CCCCCC"> but it</font><font color="#E5E5E5"> will give you the</font>

89
00:04:17,478 --> 00:04:21,709
number of<font color="#E5E5E5"> element which has been in the</font>

90
00:04:19,279 --> 00:04:24,320
<font color="#E5E5E5">pipeline in</font><font color="#CCCCCC"> the number of pad</font><font color="#E5E5E5"> the number</font>

91
00:04:21,709 --> 00:04:27,919
of buffer which has been<font color="#CCCCCC"> extend</font><font color="#E5E5E5"> exchange</font>

92
00:04:24,320 --> 00:04:30,650
across the pipeline<font color="#E5E5E5"> the timing as well</font>

93
00:04:27,919 --> 00:04:31,128
<font color="#CCCCCC">so you can see at what time in</font><font color="#E5E5E5"> your</font>

94
00:04:30,650 --> 00:04:33,008
pipeline

95
00:04:31,129 --> 00:04:35,449
<font color="#E5E5E5">each element</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> receive is first buffer</font>

96
00:04:33,009 --> 00:04:38,749
<font color="#E5E5E5">which can be useful if you have like a</font>

97
00:04:35,449 --> 00:04:40,999
<font color="#E5E5E5">very high startup time in your</font><font color="#CCCCCC"> pipeline</font>

98
00:04:38,749 --> 00:04:43,189
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> see which filament</font><font color="#E5E5E5"> took more</font>

99
00:04:40,999 --> 00:04:48,939
time<font color="#E5E5E5"> the others to start this kind of</font>

100
00:04:43,189 --> 00:04:52,550
things<font color="#E5E5E5"> so that's the</font><font color="#CCCCCC"> stats tracer</font>

101
00:04:48,939 --> 00:04:54,739
<font color="#CCCCCC">another one which</font><font color="#E5E5E5"> I quite very useful</font>

102
00:04:52,550 --> 00:04:58,849
that only<font color="#E5E5E5"> the mansion install is the</font>

103
00:04:54,739 --> 00:05:01,758
latency tracer so the idea is each<font color="#CCCCCC"> time</font>

104
00:04:58,849 --> 00:05:05,419
<font color="#E5E5E5">a buffer is generated at the source it</font>

105
00:05:01,759 --> 00:05:07,879
would travel<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the sink and this tracer</font>

106
00:05:05,419 --> 00:05:11,089
will try to measure how long it took to

107
00:05:07,879 --> 00:05:14,569
<font color="#E5E5E5">go</font><font color="#CCCCCC"> from the source</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the sink</font><font color="#E5E5E5"> so this</font>

108
00:05:11,089 --> 00:05:16,610
is used in live pipeline like typically

109
00:05:14,569 --> 00:05:18,969
<font color="#E5E5E5">you are capturing from webcam and you</font>

110
00:05:16,610 --> 00:05:21,379
are streaming<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> Internet</font><font color="#E5E5E5"> or you are</font>

111
00:05:18,969 --> 00:05:23,839
displaying on<font color="#CCCCCC"> the screen and you want</font>

112
00:05:21,379 --> 00:05:26,300
the latency<font color="#E5E5E5"> to be as low as possible and</font>

113
00:05:23,839 --> 00:05:30,829
this can help you<font color="#E5E5E5"> to see what how long</font>

114
00:05:26,300 --> 00:05:33,349
<font color="#CCCCCC">it took for</font><font color="#E5E5E5"> the buffer to to be</font>

115
00:05:30,829 --> 00:05:35,719
processed by the pipeline<font color="#E5E5E5"> so once again</font>

116
00:05:33,349 --> 00:05:38,509
to use that you don't have<font color="#E5E5E5"> to recompile</font>

117
00:05:35,719 --> 00:05:41,209
anything<font color="#E5E5E5"> you just</font><font color="#CCCCCC"> enable the</font><font color="#E5E5E5"> tracer by</font>

118
00:05:38,509 --> 00:05:43,789
using the<font color="#CCCCCC"> GST tracer</font><font color="#E5E5E5"> environment</font>

119
00:05:41,209 --> 00:05:47,179
variable then<font color="#E5E5E5"> you</font><font color="#CCCCCC"> launch a</font><font color="#E5E5E5"> pipeline here</font>

120
00:05:43,789 --> 00:05:49,878
I just<font color="#E5E5E5"> create a simple</font><font color="#CCCCCC"> pipeline</font><font color="#E5E5E5"> which is</font>

121
00:05:47,179 --> 00:05:52,549
capturing<font color="#E5E5E5"> from the webcam which is</font>

122
00:05:49,879 --> 00:05:55,369
uncoding in<font color="#E5E5E5"> the twisting force which is</font>

123
00:05:52,550 --> 00:05:58,909
decoding<font color="#E5E5E5"> and which is then displayed on</font>

124
00:05:55,369 --> 00:06:04,399
the screen<font color="#CCCCCC"> using the GL imaging element</font>

125
00:05:58,909 --> 00:06:06,619
and the tracer will for<font color="#CCCCCC"> each buffer</font><font color="#E5E5E5"> tell</font>

126
00:06:04,399 --> 00:06:09,439
you how<font color="#E5E5E5"> long it took so you have that</font>

127
00:06:06,619 --> 00:06:12,409
here in the time which is in nanoseconds

128
00:06:09,439 --> 00:06:13,939
<font color="#E5E5E5">which is not really readable but you</font>

129
00:06:12,409 --> 00:06:17,779
have that<font color="#E5E5E5"> display on the screen</font><font color="#CCCCCC"> so you</font>

130
00:06:13,939 --> 00:06:21,610
have the information<font color="#CCCCCC"> in</font><font color="#E5E5E5"> real time to</font>

131
00:06:17,779 --> 00:06:21,610
help you debugging this kind of<font color="#E5E5E5"> problem</font>

132
00:06:23,079 --> 00:06:28,550
another<font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> things you can do with</font>

133
00:06:26,479 --> 00:06:31,459
tracer is to implement very specific

134
00:06:28,550 --> 00:06:35,179
tool<font color="#E5E5E5"> so here I'm going to present the</font>

135
00:06:31,459 --> 00:06:39,169
leak tracer which is<font color="#CCCCCC"> treszura word one</font>

136
00:06:35,179 --> 00:06:41,508
<font color="#E5E5E5">word</font><font color="#CCCCCC"> is ago so the ID is most of the</font>

137
00:06:39,169 --> 00:06:43,780
time when you<font color="#CCCCCC"> are dealing with memory</font>

138
00:06:41,509 --> 00:06:49,000
leaks<font color="#E5E5E5"> we are using</font>

139
00:06:43,780 --> 00:06:51,520
valgrind<font color="#CCCCCC"> that's i guess most c and c++</font>

140
00:06:49,000 --> 00:06:54,190
developer<font color="#CCCCCC"> i used to it's a</font><font color="#E5E5E5"> very great</font>

141
00:06:51,520 --> 00:06:57,870
tool but<font color="#E5E5E5"> the problem is it can</font><font color="#CCCCCC"> be very</font>

142
00:06:54,190 --> 00:07:02,580
very slow<font color="#CCCCCC"> so if you are</font><font color="#E5E5E5"> working on very</font>

143
00:06:57,870 --> 00:07:04,450
CPU<font color="#E5E5E5"> or memory</font><font color="#CCCCCC"> consuming process</font>

144
00:07:02,580 --> 00:07:07,740
<font color="#CCCCCC">sometimes are going would just make</font>

145
00:07:04,450 --> 00:07:10,750
<font color="#CCCCCC">things too slow it's mostly unusable</font>

146
00:07:07,740 --> 00:07:13,270
<font color="#CCCCCC">another</font><font color="#E5E5E5"> problem of valgrind</font><font color="#CCCCCC"> is it may</font>

147
00:07:10,750 --> 00:07:15,010
<font color="#CCCCCC">not be available a</font><font color="#E5E5E5"> new platform</font><font color="#CCCCCC"> so ask</font>

148
00:07:13,270 --> 00:07:17,320
Olivia<font color="#CCCCCC"> state we are doing a lot of</font>

149
00:07:15,010 --> 00:07:19,210
embedded<font color="#E5E5E5"> development which usually</font><font color="#CCCCCC"> have</font>

150
00:07:17,320 --> 00:07:21,640
terrible build system and<font color="#E5E5E5"> distribution</font>

151
00:07:19,210 --> 00:07:24,030
<font color="#CCCCCC">in</font><font color="#E5E5E5"> this kind of things and it may be a</font>

152
00:07:21,640 --> 00:07:29,950
<font color="#E5E5E5">challenge just to get very one running</font>

153
00:07:24,030 --> 00:07:32,559
<font color="#E5E5E5">and finally you may find a lot</font><font color="#CCCCCC"> of memory</font>

154
00:07:29,950 --> 00:07:34,659
leak or false positive<font color="#E5E5E5"> but which appear</font>

155
00:07:32,560 --> 00:07:37,450
as memory leak<font color="#E5E5E5"> to Val groin which are</font>

156
00:07:34,660 --> 00:07:40,840
totally<font color="#E5E5E5"> not</font><font color="#CCCCCC"> related to</font><font color="#E5E5E5"> your code so if</font>

157
00:07:37,450 --> 00:07:43,390
the race<font color="#CCCCCC"> leak in library you</font><font color="#E5E5E5"> are using</font>

158
00:07:40,840 --> 00:07:45,640
like<font color="#CCCCCC"> encoding on decoding library or</font>

159
00:07:43,390 --> 00:07:48,039
invalid memory or things like that<font color="#CCCCCC"> you</font>

160
00:07:45,640 --> 00:07:50,140
<font color="#CCCCCC">will get all this what put from well</font>

161
00:07:48,040 --> 00:07:52,780
<font color="#E5E5E5">grant but that's not really something</font>

162
00:07:50,140 --> 00:07:54,669
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> easily fix</font><font color="#E5E5E5"> so most of the time</font>

163
00:07:52,780 --> 00:07:57,030
what<font color="#CCCCCC"> you really want is to</font><font color="#E5E5E5"> know the</font>

164
00:07:54,669 --> 00:08:01,049
league in<font color="#E5E5E5"> the coach who actually</font><font color="#CCCCCC"> worked</font>

165
00:07:57,030 --> 00:08:05,979
<font color="#E5E5E5">so for that I developed the leak tracer</font>

166
00:08:01,050 --> 00:08:08,200
which is using the the new memory<font color="#E5E5E5"> the</font>

167
00:08:05,979 --> 00:08:10,659
new system hooks<font color="#E5E5E5"> injection</font><font color="#CCCCCC"> marker and</font>

168
00:08:08,200 --> 00:08:13,630
which will<font color="#CCCCCC"> manually track the ref</font>

169
00:08:10,660 --> 00:08:16,120
counting of each<font color="#CCCCCC"> G object and GS team in</font>

170
00:08:13,630 --> 00:08:18,310
the object so that<font color="#E5E5E5"> means that only the</font>

171
00:08:16,120 --> 00:08:21,370
<font color="#CCCCCC">gstreamer code will be</font><font color="#E5E5E5"> tracked which is</font>

172
00:08:18,310 --> 00:08:23,800
<font color="#E5E5E5">actually what we want here</font><font color="#CCCCCC"> so it will</font>

173
00:08:21,370 --> 00:08:26,890
trick keep track<font color="#E5E5E5"> of that and at the end</font>

174
00:08:23,800 --> 00:08:28,690
of the<font color="#E5E5E5"> execution of the</font><font color="#CCCCCC"> application if</font>

175
00:08:26,890 --> 00:08:30,580
<font color="#E5E5E5">we detect that some object</font><font color="#CCCCCC"> are still</font>

176
00:08:28,690 --> 00:08:31,719
alive so which have been<font color="#E5E5E5"> lead because</font>

177
00:08:30,580 --> 00:08:35,380
they should<font color="#E5E5E5"> have been destroyed at this</font>

178
00:08:31,720 --> 00:08:36,940
point it will<font color="#E5E5E5"> raise a</font><font color="#CCCCCC"> djeli pruning so</font>

179
00:08:35,380 --> 00:08:41,110
that's something you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> really hook in</font>

180
00:08:36,940 --> 00:08:43,150
you<font color="#CCCCCC"> QA system or CI</font><font color="#E5E5E5"> system and to</font>

181
00:08:41,110 --> 00:08:47,310
<font color="#CCCCCC">Detective and your leaks has been</font>

182
00:08:43,150 --> 00:08:50,709
introduced<font color="#E5E5E5"> this tracer has been</font>

183
00:08:47,310 --> 00:08:52,569
<font color="#E5E5E5">integrating</font><font color="#CCCCCC"> gstreamer</font><font color="#E5E5E5"> core in 1.10 so</font>

184
00:08:50,710 --> 00:08:54,160
that means that if you have<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do more</font>

185
00:08:52,570 --> 00:08:54,550
version it's already there<font color="#CCCCCC"> you don't</font>

186
00:08:54,160 --> 00:09:00,189
<font color="#E5E5E5">have</font><font color="#CCCCCC"> to</font>

187
00:08:54,550 --> 00:09:03,430
build<font color="#CCCCCC"> an extra</font><font color="#E5E5E5"> tool to use it so here is</font>

188
00:09:00,190 --> 00:09:06,250
an<font color="#E5E5E5"> example</font><font color="#CCCCCC"> once</font><font color="#E5E5E5"> again in the same system</font>

189
00:09:03,430 --> 00:09:08,769
<font color="#CCCCCC">I just used the tracers environment</font>

190
00:09:06,250 --> 00:09:12,089
variable the tracer is colleague<font color="#E5E5E5"> the</font>

191
00:09:08,769 --> 00:09:15,070
name I put there and I run a pipeline

192
00:09:12,089 --> 00:09:17,529
the pipeline needs to terminate<font color="#E5E5E5"> because</font>

193
00:09:15,070 --> 00:09:19,269
the leak are detected at the end of the

194
00:09:17,529 --> 00:09:21,279
process<font color="#E5E5E5"> so if the process keep running</font>

195
00:09:19,269 --> 00:09:23,230
obviously<font color="#CCCCCC"> we won't be able to know if</font>

196
00:09:21,279 --> 00:09:25,420
there is<font color="#E5E5E5"> a leak or not so that's why I</font>

197
00:09:23,230 --> 00:09:27,399
say I just<font color="#E5E5E5"> want</font><font color="#CCCCCC"> 10 buffers from the</font>

198
00:09:25,420 --> 00:09:31,180
source so<font color="#E5E5E5"> the webcam here and then</font>

199
00:09:27,399 --> 00:09:33,579
<font color="#E5E5E5">terminated and if at the end of the</font>

200
00:09:31,180 --> 00:09:36,279
pipeline<font color="#CCCCCC"> I</font><font color="#E5E5E5"> detect a leak</font>

201
00:09:33,579 --> 00:09:37,269
you see<font color="#E5E5E5"> it's yellow so it's warning you</font>

202
00:09:36,279 --> 00:09:41,050
can trust me on<font color="#CCCCCC"> that</font>

203
00:09:37,269 --> 00:09:42,850
and<font color="#CCCCCC"> if this</font><font color="#E5E5E5"> object is still alive it</font>

204
00:09:41,050 --> 00:09:45,250
<font color="#E5E5E5">will give you what the type of the</font>

205
00:09:42,850 --> 00:09:48,120
<font color="#CCCCCC">object</font><font color="#E5E5E5"> and if we give</font><font color="#CCCCCC"> you the ref count</font>

206
00:09:45,250 --> 00:09:52,260
<font color="#E5E5E5">so you can have an idea how many</font>

207
00:09:48,120 --> 00:09:58,149
reference<font color="#E5E5E5"> are getting lost in a</font><font color="#CCCCCC"> new code</font>

208
00:09:52,260 --> 00:09:59,980
so that's<font color="#E5E5E5"> for the the basic filter</font><font color="#CCCCCC"> I try</font>

209
00:09:58,149 --> 00:10:03,850
<font color="#E5E5E5">to make it</font><font color="#CCCCCC"> more useful</font><font color="#E5E5E5"> in a bit more</font>

210
00:09:59,980 --> 00:10:05,040
<font color="#E5E5E5">smarter</font><font color="#CCCCCC"> so we are using lip unwind</font><font color="#E5E5E5"> to</font>

211
00:10:03,850 --> 00:10:08,980
get a<font color="#CCCCCC"> strike</font><font color="#E5E5E5"> trace</font>

212
00:10:05,040 --> 00:10:10,899
so once you've enabled that you have to

213
00:10:08,980 --> 00:10:13,390
enable it manually<font color="#E5E5E5"> because it can</font>

214
00:10:10,899 --> 00:10:16,420
consume quite<font color="#E5E5E5"> a bit of a bunch of memory</font>

215
00:10:13,390 --> 00:10:19,060
so we try<font color="#E5E5E5"> to only enable it when we</font>

216
00:10:16,420 --> 00:10:22,660
<font color="#E5E5E5">actually need it and we filter out the</font>

217
00:10:19,060 --> 00:10:25,569
object<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> interested in so a typical</font>

218
00:10:22,660 --> 00:10:29,079
workflow for that will be to start<font color="#E5E5E5"> with</font>

219
00:10:25,570 --> 00:10:31,230
the simple version<font color="#E5E5E5"> try to see which</font>

220
00:10:29,079 --> 00:10:33,699
object has been<font color="#E5E5E5"> leaked</font>

221
00:10:31,230 --> 00:10:37,480
<font color="#E5E5E5">it's really a shame that you can see the</font>

222
00:10:33,700 --> 00:10:39,190
<font color="#E5E5E5">name but you see</font><font color="#CCCCCC"> okay the testing is</font>

223
00:10:37,480 --> 00:10:44,459
getting leaked<font color="#E5E5E5"> I'm going to track</font><font color="#CCCCCC"> it</font>

224
00:10:39,190 --> 00:10:48,220
down<font color="#E5E5E5"> and then you enable the stack trace</font>

225
00:10:44,459 --> 00:10:50,380
<font color="#E5E5E5">for for this very specific object so</font>

226
00:10:48,220 --> 00:10:53,320
only<font color="#E5E5E5"> this one will be tracked and when</font>

227
00:10:50,380 --> 00:10:57,130
<font color="#E5E5E5">doing that</font><font color="#CCCCCC"> the tracer output will give</font>

228
00:10:53,320 --> 00:10:59,459
you a full<font color="#E5E5E5"> call trace so you can see the</font>

229
00:10:57,130 --> 00:11:02,770
succession of course which leads to<font color="#E5E5E5"> the</font>

230
00:10:59,459 --> 00:11:04,899
creation<font color="#CCCCCC"> of the object</font><font color="#E5E5E5"> of course we</font>

231
00:11:02,770 --> 00:11:06,610
don't<font color="#E5E5E5"> know where it's been leaked but at</font>

232
00:11:04,899 --> 00:11:07,240
least you<font color="#E5E5E5"> know where the object has been</font>

233
00:11:06,610 --> 00:11:09,639
<font color="#E5E5E5">created</font>

234
00:11:07,240 --> 00:11:11,470
so if a lot of<font color="#CCCCCC"> object accreted in a</font>

235
00:11:09,639 --> 00:11:14,589
<font color="#CCCCCC">different context</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> have a better</font>

236
00:11:11,470 --> 00:11:18,399
idea of where this<font color="#E5E5E5"> object is coming from</font>

237
00:11:14,589 --> 00:11:23,920
and<font color="#CCCCCC"> start to track down manually</font><font color="#E5E5E5"> the</font>

238
00:11:18,399 --> 00:11:26,699
steps<font color="#E5E5E5"> leading to the</font><font color="#CCCCCC"> leak the tracer</font>

239
00:11:23,920 --> 00:11:28,868
also produced a bunch of extra<font color="#CCCCCC"> features</font>

240
00:11:26,699 --> 00:11:33,309
which can<font color="#CCCCCC"> be quite useful while</font>

241
00:11:28,869 --> 00:11:36,129
debugging<font color="#CCCCCC"> you can track each individual</font>

242
00:11:33,309 --> 00:11:38,139
reffing<font color="#E5E5E5"> and unrefined operation so that</font>

243
00:11:36,129 --> 00:11:40,600
<font color="#CCCCCC">may be part of</font><font color="#E5E5E5"> the debugging of the</font>

244
00:11:38,139 --> 00:11:42,399
specific<font color="#CCCCCC"> leak you'll see each time an</font>

245
00:11:40,600 --> 00:11:44,769
<font color="#E5E5E5">object gained early or lose a reference</font>

246
00:11:42,399 --> 00:11:48,490
<font color="#CCCCCC">you would see the</font><font color="#E5E5E5"> full</font><font color="#CCCCCC"> text actress so</font>

247
00:11:44,769 --> 00:11:52,179
that can make things<font color="#E5E5E5"> easier</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> you you</font>

248
00:11:48,490 --> 00:11:54,639
<font color="#CCCCCC">can also enable things like signal</font>

249
00:11:52,179 --> 00:11:56,829
support so if you Hannibal<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you need</font>

250
00:11:54,639 --> 00:12:01,149
an extra environment variable<font color="#E5E5E5"> but if you</font>

251
00:11:56,829 --> 00:12:04,089
do<font color="#E5E5E5"> you can send the</font><font color="#CCCCCC"> big one thick</font><font color="#E5E5E5"> user</font>

252
00:12:01,149 --> 00:12:06,100
<font color="#CCCCCC">one signal to the process and that</font><font color="#E5E5E5"> will</font>

253
00:12:04,089 --> 00:12:09,040
<font color="#E5E5E5">list all the object which are currently</font>

254
00:12:06,100 --> 00:12:12,730
alive<font color="#E5E5E5"> so this can be</font><font color="#CCCCCC"> useful if you are</font>

255
00:12:09,040 --> 00:12:16,059
debugging a problem without terminating

256
00:12:12,730 --> 00:12:18,100
the process and we also have a

257
00:12:16,059 --> 00:12:21,368
<font color="#E5E5E5">checkpoint system so the idea here</font><font color="#CCCCCC"> is</font>

258
00:12:18,100 --> 00:12:23,799
<font color="#E5E5E5">you sent the signal</font><font color="#CCCCCC"> once to the process</font>

259
00:12:21,369 --> 00:12:25,059
you do something with the application

260
00:12:23,799 --> 00:12:27,339
like I don't know start<font color="#CCCCCC"> the video</font><font color="#E5E5E5"> and</font>

261
00:12:25,059 --> 00:12:30,100
<font color="#CCCCCC">stop it or something like that and then</font>

262
00:12:27,339 --> 00:12:31,869
you send it again<font color="#E5E5E5"> and it will lift all</font>

263
00:12:30,100 --> 00:12:34,540
the<font color="#CCCCCC"> objects</font><font color="#E5E5E5"> which have been created</font>

264
00:12:31,869 --> 00:12:36,519
during<font color="#E5E5E5"> the since the last time you see</font>

265
00:12:34,540 --> 00:12:38,920
the signal<font color="#E5E5E5"> and all the object which has</font>

266
00:12:36,519 --> 00:12:40,720
been<font color="#CCCCCC"> deleted so this may</font><font color="#E5E5E5"> be useful to</font>

267
00:12:38,920 --> 00:12:43,839
develop application that you don't want

268
00:12:40,720 --> 00:12:47,350
to start<font color="#E5E5E5"> and stop</font><font color="#CCCCCC"> all the time which</font>

269
00:12:43,839 --> 00:12:49,779
will<font color="#E5E5E5"> be too complicated also so that's</font>

270
00:12:47,350 --> 00:12:52,480
<font color="#CCCCCC">the kind of features we have which you</font>

271
00:12:49,779 --> 00:13:00,040
wouldn't find with<font color="#E5E5E5"> tools</font><font color="#CCCCCC"> like vibrant</font>

272
00:12:52,480 --> 00:13:02,619
for example so a few extra<font color="#E5E5E5"> tracer so I'm</font>

273
00:13:00,040 --> 00:13:05,949
going<font color="#E5E5E5"> back to the tracers all the</font>

274
00:13:02,619 --> 00:13:08,470
tracers I<font color="#E5E5E5"> presented so far our</font><font color="#CCCCCC"> merchant</font>

275
00:13:05,949 --> 00:13:12,008
<font color="#CCCCCC">GStreamer color</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> third</font><font color="#E5E5E5"> party can also</font>

276
00:13:08,470 --> 00:13:14,829
develop<font color="#CCCCCC"> the</font><font color="#E5E5E5"> hunt</font><font color="#CCCCCC"> racers GST shark is one</font>

277
00:13:12,009 --> 00:13:17,290
<font color="#CCCCCC">of them it's</font><font color="#E5E5E5"> developed by which</font><font color="#CCCCCC"> one and</font>

278
00:13:14,829 --> 00:13:19,930
it<font color="#E5E5E5"> contained a whole lot of tracers</font>

279
00:13:17,290 --> 00:13:22,829
which are more<font color="#CCCCCC"> specialized version of</font>

280
00:13:19,930 --> 00:13:26,229
<font color="#CCCCCC">team one or provide extra features you</font>

281
00:13:22,830 --> 00:13:28,149
<font color="#CCCCCC">can measure things like inter latency</font><font color="#E5E5E5"> so</font>

282
00:13:26,230 --> 00:13:30,520
it's a bit like<font color="#CCCCCC"> the latency</font><font color="#E5E5E5"> Twitter I</font>

283
00:13:28,149 --> 00:13:32,410
<font color="#E5E5E5">presented before except that it will</font>

284
00:13:30,520 --> 00:13:35,110
<font color="#E5E5E5">measure the latency between each element</font>

285
00:13:32,410 --> 00:13:37,270
in the<font color="#CCCCCC"> pipeline</font><font color="#E5E5E5"> while the upstream one</font>

286
00:13:35,110 --> 00:13:40,180
<font color="#CCCCCC">it's measuring from the source to the</font>

287
00:13:37,270 --> 00:13:42,579
<font color="#E5E5E5">stink so it's a bit more precise on this</font>

288
00:13:40,180 --> 00:13:44,620
regard we<font color="#CCCCCC"> have some plan with</font><font color="#E5E5E5"> Nicola</font>

289
00:13:42,580 --> 00:13:48,550
<font color="#CCCCCC">tumour that in the upstream tracer at</font>

290
00:13:44,620 --> 00:13:50,170
some point<font color="#E5E5E5"> it can ask you also be used</font>

291
00:13:48,550 --> 00:13:52,689
to<font color="#E5E5E5"> measure performance on the pipeline</font>

292
00:13:50,170 --> 00:13:55,870
<font color="#E5E5E5">which is</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> much fun quite useful</font>

293
00:13:52,690 --> 00:13:58,330
<font color="#E5E5E5">so for example it can give you at watch</font>

294
00:13:55,870 --> 00:14:00,550
<font color="#E5E5E5">weight our buffer are arriving on each</font>

295
00:13:58,330 --> 00:14:02,860
source<font color="#CCCCCC"> path in the pipeline so for</font>

296
00:14:00,550 --> 00:14:06,189
<font color="#E5E5E5">example if you have a pipeline which</font><font color="#CCCCCC"> is</font>

297
00:14:02,860 --> 00:14:08,950
not going as fast as it<font color="#CCCCCC"> should so</font><font color="#E5E5E5"> you</font>

298
00:14:06,190 --> 00:14:11,770
<font color="#CCCCCC">are</font><font color="#E5E5E5"> expecting 60</font><font color="#CCCCCC"> fps in your screen but</font>

299
00:14:08,950 --> 00:14:14,020
<font color="#CCCCCC">you are</font><font color="#E5E5E5"> just getting 20 for example this</font>

300
00:14:11,770 --> 00:14:19,000
may help you<font color="#CCCCCC"> to</font><font color="#E5E5E5"> find which element is</font>

301
00:14:14,020 --> 00:14:21,490
operating slower<font color="#E5E5E5"> so and then try to</font>

302
00:14:19,000 --> 00:14:24,940
improve the performance<font color="#E5E5E5"> on this</font>

303
00:14:21,490 --> 00:14:26,709
particular<font color="#E5E5E5"> man</font><font color="#CCCCCC"> I do a lot of</font><font color="#E5E5E5"> different</font>

304
00:14:24,940 --> 00:14:29,050
<font color="#CCCCCC">things</font><font color="#E5E5E5"> like schedule times that's the</font>

305
00:14:26,709 --> 00:14:31,329
<font color="#E5E5E5">last time since before has</font><font color="#CCCCCC"> been received</font>

306
00:14:29,050 --> 00:14:34,540
on<font color="#E5E5E5"> an element this kind of things you</font>

307
00:14:31,330 --> 00:14:38,410
can<font color="#E5E5E5"> use it to track you so it's a whole</font>

308
00:14:34,540 --> 00:14:40,029
lot<font color="#CCCCCC"> of of tracers which can be used to</font>

309
00:14:38,410 --> 00:14:44,770
track performance<font color="#CCCCCC"> these kind of things</font>

310
00:14:40,029 --> 00:14:47,110
<font color="#E5E5E5">and another nice thing with</font><font color="#CCCCCC"> GFC shark it</font>

311
00:14:44,770 --> 00:14:50,319
come up with some script<font color="#E5E5E5"> to generate</font>

312
00:14:47,110 --> 00:14:53,170
graphics using<font color="#E5E5E5"> new plot from the data</font>

313
00:14:50,320 --> 00:14:56,560
generated<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the tracers so you can see</font>

314
00:14:53,170 --> 00:15:02,680
things<font color="#E5E5E5"> like so here we have the time</font>

315
00:14:56,560 --> 00:15:05,410
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> here each</font><font color="#CCCCCC"> here we have all the</font>

316
00:15:02,680 --> 00:15:07,089
elements<font color="#E5E5E5"> so the source encoder</font><font color="#CCCCCC"> or</font>

317
00:15:05,410 --> 00:15:11,170
decoder other things<font color="#E5E5E5"> this kind of things</font>

318
00:15:07,089 --> 00:15:15,190
<font color="#E5E5E5">and here on the left it will tell you at</font>

319
00:15:11,170 --> 00:15:18,490
which<font color="#CCCCCC"> rate each</font><font color="#E5E5E5"> element is operating and</font>

320
00:15:15,190 --> 00:15:21,820
here you have the CPU<font color="#E5E5E5"> load and so you</font>

321
00:15:18,490 --> 00:15:23,829
can try<font color="#E5E5E5"> to see</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> this is affecting the</font>

322
00:15:21,820 --> 00:15:26,950
<font color="#CCCCCC">whole pipeline</font><font color="#E5E5E5"> so if you see a big</font><font color="#CCCCCC"> spike</font>

323
00:15:23,829 --> 00:15:28,660
somewhere you may have to<font color="#E5E5E5"> say</font><font color="#CCCCCC"> ok this</font><font color="#E5E5E5"> is</font>

324
00:15:26,950 --> 00:15:31,420
not<font color="#E5E5E5"> something that will happen on my</font>

325
00:15:28,660 --> 00:15:33,709
pipeline<font color="#E5E5E5"> and start the begin from there</font>

326
00:15:31,420 --> 00:15:37,130
so<font color="#E5E5E5"> that's the kind</font><font color="#CCCCCC"> of things you can</font>

327
00:15:33,710 --> 00:15:39,820
do<font color="#E5E5E5"> to try to have a bigger picture</font><font color="#CCCCCC"> view</font>

328
00:15:37,130 --> 00:15:47,060
of<font color="#CCCCCC"> what's happening in your application</font>

329
00:15:39,820 --> 00:15:51,410
which<font color="#E5E5E5"> can be quite useful the last thing</font>

330
00:15:47,060 --> 00:15:52,729
I wanted<font color="#CCCCCC"> to talk today is</font><font color="#E5E5E5"> some tools to</font>

331
00:15:51,410 --> 00:15:56,000
<font color="#E5E5E5">help</font><font color="#CCCCCC"> you</font>

332
00:15:52,730 --> 00:15:58,220
working with<font color="#E5E5E5"> gesturing</font><font color="#CCCCCC"> merlocks so if</font>

333
00:15:56,000 --> 00:16:00,140
you have already<font color="#E5E5E5"> done some jibber the</font>

334
00:15:58,220 --> 00:16:03,670
beginning in<font color="#E5E5E5"> your life you probably end</font>

335
00:16:00,140 --> 00:16:07,400
up with terms of this kind<font color="#CCCCCC"> of vlogs</font>

336
00:16:03,670 --> 00:16:10,250
which contain a lot<font color="#CCCCCC"> of very very useful</font>

337
00:16:07,400 --> 00:16:11,300
information<font color="#E5E5E5"> but which can be</font><font color="#CCCCCC"> quite scary</font>

338
00:16:10,250 --> 00:16:13,220
<font color="#E5E5E5">to look at</font>

339
00:16:11,300 --> 00:16:14,810
I know that when I start working<font color="#CCCCCC"> with</font>

340
00:16:13,220 --> 00:16:17,390
<font color="#CCCCCC">this trimmer that's something which was</font>

341
00:16:14,810 --> 00:16:20,390
I<font color="#E5E5E5"> was really afraid of that because</font><font color="#CCCCCC"> you</font>

342
00:16:17,390 --> 00:16:22,010
<font color="#E5E5E5">know that</font><font color="#CCCCCC"> teeth contain helpful</font>

343
00:16:20,390 --> 00:16:24,319
information to<font color="#E5E5E5"> help you debug</font><font color="#CCCCCC"> a new</font>

344
00:16:22,010 --> 00:16:25,939
problem<font color="#E5E5E5"> but you don't really know where</font>

345
00:16:24,320 --> 00:16:28,970
to<font color="#CCCCCC"> start you don't really know where to</font>

346
00:16:25,940 --> 00:16:31,010
look if you<font color="#E5E5E5"> are not used to do that so</font>

347
00:16:28,970 --> 00:16:35,620
I'm<font color="#E5E5E5"> going to show you a couple of</font><font color="#CCCCCC"> things</font>

348
00:16:31,010 --> 00:16:38,569
<font color="#CCCCCC">which can make that easier for you a</font>

349
00:16:35,620 --> 00:16:41,660
nice one is the<font color="#CCCCCC"> gesture mode epic viewer</font>

350
00:16:38,570 --> 00:16:44,240
<font color="#E5E5E5">which is a nice Python graphical</font>

351
00:16:41,660 --> 00:16:47,540
application which is part of the just

352
00:16:44,240 --> 00:16:49,010
<font color="#E5E5E5">trimmer developer tools set so</font><font color="#CCCCCC"> that</font>

353
00:16:47,540 --> 00:16:52,939
something<font color="#E5E5E5"> you can find on the</font><font color="#CCCCCC"> streamer</font>

354
00:16:49,010 --> 00:16:56,810
git repository and which will parse the

355
00:16:52,940 --> 00:17:00,110
full log and will give you a graphical

356
00:16:56,810 --> 00:17:02,959
interface<font color="#E5E5E5"> to look at that so you see</font>

357
00:17:00,110 --> 00:17:07,610
here on the top bar<font color="#E5E5E5"> it will</font><font color="#CCCCCC"> kind some</font>

358
00:17:02,960 --> 00:17:09,860
kind<font color="#CCCCCC"> of graph over time of when the</font>

359
00:17:07,609 --> 00:17:12,319
<font color="#E5E5E5">locker being generated because each lock</font>

360
00:17:09,859 --> 00:17:15,050
is associated with<font color="#E5E5E5"> the</font><font color="#CCCCCC"> time stamp</font><font color="#E5E5E5"> so we</font>

361
00:17:12,319 --> 00:17:16,550
can see at the<font color="#CCCCCC"> beginning of the epoch at</font>

362
00:17:15,050 --> 00:17:19,369
the start of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> application</font><font color="#E5E5E5"> a lot of</font>

363
00:17:16,550 --> 00:17:21,319
<font color="#E5E5E5">log generated then some</font><font color="#CCCCCC"> gapped and</font><font color="#E5E5E5"> some</font>

364
00:17:19,369 --> 00:17:25,159
<font color="#CCCCCC">log ten well here we have a very big gap</font>

365
00:17:21,319 --> 00:17:28,909
between<font color="#E5E5E5"> more activity occurs in the</font>

366
00:17:25,160 --> 00:17:32,360
<font color="#CCCCCC">pipeline so just by looking at</font><font color="#E5E5E5"> that you</font>

367
00:17:28,910 --> 00:17:34,490
can<font color="#CCCCCC"> see that there is a gap here so you</font>

368
00:17:32,360 --> 00:17:36,469
may ask yourself<font color="#CCCCCC"> why is my pipeline</font>

369
00:17:34,490 --> 00:17:37,700
block at this point<font color="#CCCCCC"> because usually when</font>

370
00:17:36,470 --> 00:17:40,340
a pipeline is doing something<font color="#CCCCCC"> it</font>

371
00:17:37,700 --> 00:17:43,310
produced some log and just<font color="#CCCCCC"> try to</font><font color="#E5E5E5"> look</font>

372
00:17:40,340 --> 00:17:45,590
at what's<font color="#CCCCCC"> going</font><font color="#E5E5E5"> on here so for example</font>

373
00:17:43,310 --> 00:17:46,520
am<font color="#CCCCCC"> i waiting for the caramel or is</font><font color="#E5E5E5"> at</font>

374
00:17:45,590 --> 00:17:49,520
<font color="#CCCCCC">red blog</font>

375
00:17:46,520 --> 00:17:54,280
something like that so that's a nice a

376
00:17:49,520 --> 00:17:56,660
nice tool you can use to<font color="#CCCCCC"> do that</font><font color="#E5E5E5"> and</font>

377
00:17:54,280 --> 00:18:03,649
another one I just<font color="#E5E5E5"> started a few months</font>

378
00:17:56,660 --> 00:18:07,070
ago is GST<font color="#E5E5E5"> lock parser</font><font color="#CCCCCC"> my goal here</font><font color="#E5E5E5"> was</font>

379
00:18:03,650 --> 00:18:09,860
I often find myself<font color="#CCCCCC"> where I think</font><font color="#E5E5E5"> small</font>

380
00:18:07,070 --> 00:18:11,330
<font color="#E5E5E5">wait on application to pass logs so for</font>

381
00:18:09,860 --> 00:18:13,280
<font color="#E5E5E5">example if I wanted to compute some</font>

382
00:18:11,330 --> 00:18:15,500
metrics from specific<font color="#CCCCCC"> logs of these kind</font>

383
00:18:13,280 --> 00:18:18,860
of<font color="#E5E5E5"> things and I was always doing very</font>

384
00:18:15,500 --> 00:18:20,840
hockey<font color="#CCCCCC"> Python script to do that and I</font>

385
00:18:18,860 --> 00:18:23,870
say<font color="#E5E5E5"> okay let's try if I can do something</font>

386
00:18:20,840 --> 00:18:25,939
<font color="#E5E5E5">more reusable</font><font color="#CCCCCC"> and a bit cleaner</font><font color="#E5E5E5"> it was</font>

387
00:18:23,870 --> 00:18:28,909
also<font color="#E5E5E5"> a time where I wanted to</font><font color="#CCCCCC"> learn rust</font>

388
00:18:25,940 --> 00:18:31,250
so<font color="#E5E5E5"> okay let's try to write it in rest</font>

389
00:18:28,910 --> 00:18:33,800
<font color="#E5E5E5">this is literally my</font><font color="#CCCCCC"> first rust project</font>

390
00:18:31,250 --> 00:18:36,200
so the code may not be so well written

391
00:18:33,800 --> 00:18:39,620
<font color="#E5E5E5">when at least it's been proved useful so</font>

392
00:18:36,200 --> 00:18:43,610
<font color="#CCCCCC">far so it's a high-level parsing library</font>

393
00:18:39,620 --> 00:18:46,879
which will read<font color="#CCCCCC"> your log</font><font color="#E5E5E5"> and create</font>

394
00:18:43,610 --> 00:18:48,740
<font color="#CCCCCC">high-level object object for them it</font>

395
00:18:46,880 --> 00:18:50,570
will give you an iterator in rust<font color="#CCCCCC"> and</font>

396
00:18:48,740 --> 00:18:52,730
from<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> can very easily filter</font>

397
00:18:50,570 --> 00:18:54,710
from for a specific<font color="#E5E5E5"> category from a</font>

398
00:18:52,730 --> 00:18:58,100
<font color="#E5E5E5">specific object specific line</font><font color="#CCCCCC"> or</font>

399
00:18:54,710 --> 00:19:01,520
whatever<font color="#E5E5E5"> and do some particular whatever</font>

400
00:18:58,100 --> 00:19:03,770
you want with that<font color="#E5E5E5"> so the code is there</font>

401
00:19:01,520 --> 00:19:05,510
on get up<font color="#CCCCCC"> and I would just give you one</font>

402
00:19:03,770 --> 00:19:13,490
small example of<font color="#E5E5E5"> things you can really</font>

403
00:19:05,510 --> 00:19:16,520
easily<font color="#E5E5E5"> do is again but tsdf is a small</font>

404
00:19:13,490 --> 00:19:20,170
<font color="#CCCCCC">tall small</font><font color="#E5E5E5"> tool</font><font color="#CCCCCC"> I wrote using</font><font color="#E5E5E5"> that and</font>

405
00:19:16,520 --> 00:19:23,090
which will for each<font color="#CCCCCC"> thread will compute</font>

406
00:19:20,170 --> 00:19:25,520
<font color="#CCCCCC">the</font><font color="#E5E5E5"> difference between one specific</font>

407
00:19:23,090 --> 00:19:29,120
event<font color="#E5E5E5"> and the last</font><font color="#CCCCCC"> one is this thread so</font>

408
00:19:25,520 --> 00:19:31,820
once again<font color="#E5E5E5"> if there is some point</font><font color="#CCCCCC"> a gap</font>

409
00:19:29,120 --> 00:19:33,469
in the<font color="#CCCCCC"> pipeline which is</font><font color="#E5E5E5"> being stuck</font><font color="#CCCCCC"> it</font>

410
00:19:31,820 --> 00:19:38,870
will detect it very easily

411
00:19:33,470 --> 00:19:40,820
<font color="#CCCCCC">and it's not</font><font color="#E5E5E5"> really readable but the</font>

412
00:19:38,870 --> 00:19:43,429
bigger difference will be<font color="#CCCCCC"> arrived at</font><font color="#E5E5E5"> in</font>

413
00:19:40,820 --> 00:19:47,450
red so just by parsing that<font color="#E5E5E5"> you can see</font>

414
00:19:43,430 --> 00:19:48,980
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> my pipeline</font><font color="#E5E5E5"> here rated for 100</font>

415
00:19:47,450 --> 00:19:51,410
milliseconds<font color="#CCCCCC"> that shouldn't happen</font>

416
00:19:48,980 --> 00:19:53,840
what's going<font color="#CCCCCC"> on here</font><font color="#E5E5E5"> so just</font><font color="#CCCCCC"> you can see</font>

417
00:19:51,410 --> 00:19:58,640
<font color="#CCCCCC">the time stone difference very easy</font>

418
00:19:53,840 --> 00:20:02,679
<font color="#CCCCCC">using that and that's it</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> think I have</font>

419
00:19:58,640 --> 00:20:02,680
like 25<font color="#E5E5E5"> seconds for</font>

420
00:20:22,480 --> 00:20:25,559
[Music]

421
00:20:27,860 --> 00:20:33,570
No<font color="#E5E5E5"> so when you mentioned in the</font>

422
00:20:31,290 --> 00:20:35,879
beginning of<font color="#CCCCCC"> the lick tracer hmm</font>

423
00:20:33,570 --> 00:20:38,639
you're right voila grind is very slow

424
00:20:35,880 --> 00:20:43,140
for<font color="#CCCCCC"> most things but</font><font color="#E5E5E5"> there is also</font><font color="#CCCCCC"> liebe</font>

425
00:20:38,640 --> 00:20:45,870
<font color="#CCCCCC">Sun which is much faster</font><font color="#E5E5E5"> but can you if</font>

426
00:20:43,140 --> 00:20:49,070
you<font color="#E5E5E5"> want if someone wants to use</font><font color="#CCCCCC"> libous</font>

427
00:20:45,870 --> 00:20:54,209
on can use it with your<font color="#CCCCCC"> Geist ray tracer</font>

428
00:20:49,070 --> 00:20:56,129
<font color="#CCCCCC">expressor or is it is the LLVM</font><font color="#E5E5E5"> tool</font><font color="#CCCCCC"> no</font>

429
00:20:54,210 --> 00:21:00,810
<font color="#CCCCCC">Luba sign is actually</font><font color="#E5E5E5"> part of its</font>

430
00:20:56,130 --> 00:21:03,330
included<font color="#E5E5E5"> the GCC</font><font color="#CCCCCC"> okay I don't it's Anna</font>

431
00:21:00,810 --> 00:21:05,250
<font color="#CCCCCC">Tizer</font><font color="#E5E5E5"> basically so it's much faster</font><font color="#CCCCCC"> okay</font>

432
00:21:03,330 --> 00:21:07,590
<font color="#E5E5E5">okay okay I can it does not the</font>

433
00:21:05,250 --> 00:21:10,020
difference is<font color="#E5E5E5"> that does not detect the</font>

434
00:21:07,590 --> 00:21:13,860
origins<font color="#E5E5E5"> of the of the leaks but it finds</font>

435
00:21:10,020 --> 00:21:15,750
<font color="#E5E5E5">the leaks okay</font><font color="#CCCCCC"> uses tax raise okay I</font>

436
00:21:13,860 --> 00:21:18,270
<font color="#E5E5E5">never try using it it's good to know</font>

437
00:21:15,750 --> 00:21:21,270
thank you<font color="#E5E5E5"> okay yeah I guess it would</font><font color="#CCCCCC"> be</font>

438
00:21:18,270 --> 00:21:23,540
more it's more generic yeah more generic

439
00:21:21,270 --> 00:21:29,070
and<font color="#CCCCCC"> lower</font><font color="#E5E5E5"> level kind of</font><font color="#CCCCCC"> to like valgrind</font>

440
00:21:23,540 --> 00:21:35,700
so yeah<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and the Rifkind thing you</font>

441
00:21:29,070 --> 00:21:37,169
want to read something yeah<font color="#E5E5E5"> yeah so it's</font>

442
00:21:35,700 --> 00:21:38,670
a bit like like vibe with background it

443
00:21:37,170 --> 00:21:40,500
would just find<font color="#CCCCCC"> the memory</font><font color="#E5E5E5"> leak well</font>

444
00:21:38,670 --> 00:21:43,410
here we are interested<font color="#CCCCCC"> in ref counting</font>

445
00:21:40,500 --> 00:21:45,120
problems<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> league tracer will be</font>

446
00:21:43,410 --> 00:21:48,810
like a more specialized tool<font color="#CCCCCC"> for every</font>

447
00:21:45,120 --> 00:21:51,000
<font color="#CCCCCC">specific problem and I guess the button</font>

448
00:21:48,810 --> 00:21:51,419
could<font color="#CCCCCC"> be more like a replacement of a</font>

449
00:21:51,000 --> 00:21:58,740
grind

450
00:21:51,420 --> 00:22:00,840
I guess what<font color="#E5E5E5"> you do maybe that's why I</font>

451
00:21:58,740 --> 00:22:02,460
wasn't looking<font color="#E5E5E5"> at that yes apparently</font>

452
00:22:00,840 --> 00:22:04,590
<font color="#CCCCCC">you have</font><font color="#E5E5E5"> to recompile to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to use</font>

453
00:22:02,460 --> 00:22:07,230
it okay<font color="#CCCCCC"> okay</font>

454
00:22:04,590 --> 00:22:09,060
oh yeah yeah okay<font color="#E5E5E5"> I remember I look at</font>

455
00:22:07,230 --> 00:22:10,800
that a while ago<font color="#CCCCCC"> and that was</font><font color="#E5E5E5"> a problem</font>

456
00:22:09,060 --> 00:22:13,620
<font color="#E5E5E5">for me because I was</font><font color="#CCCCCC"> working on embedded</font>

457
00:22:10,800 --> 00:22:14,960
device and recompiling<font color="#CCCCCC"> with specific</font>

458
00:22:13,620 --> 00:22:17,729
tool can<font color="#CCCCCC"> be quite a challenge</font>

459
00:22:14,960 --> 00:22:22,920
which is why I went to<font color="#CCCCCC"> the Tresor</font>

460
00:22:17,730 --> 00:22:25,830
approach<font color="#E5E5E5"> yeah yeah exactly</font>

461
00:22:22,920 --> 00:22:27,750
<font color="#E5E5E5">yes if you built a recent version</font><font color="#CCCCCC"> of je</font>

462
00:22:25,830 --> 00:22:30,270
<font color="#E5E5E5">streamer it should be built by default</font>

463
00:22:27,750 --> 00:22:31,770
and it would<font color="#E5E5E5"> work</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> only thing you may</font>

464
00:22:30,270 --> 00:22:33,990
<font color="#CCCCCC">want to change for</font><font color="#E5E5E5"> a bit system is to</font>

465
00:22:31,770 --> 00:22:35,430
make<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> Libra and wind which</font>

466
00:22:33,990 --> 00:22:37,650
will<font color="#E5E5E5"> hollow you to get the struct</font><font color="#CCCCCC"> race</font>

467
00:22:35,430 --> 00:22:40,620
but even if you don't<font color="#E5E5E5"> he has some</font>

468
00:22:37,650 --> 00:22:42,510
<font color="#E5E5E5">fallback code which will try</font><font color="#CCCCCC"> to get you</font>

469
00:22:40,620 --> 00:22:44,370
in useful<font color="#E5E5E5"> information so yeah that's the</font>

470
00:22:42,510 --> 00:22:47,270
big advantage<font color="#E5E5E5"> of the tracer I think if</font>

471
00:22:44,370 --> 00:22:49,469
you don't<font color="#E5E5E5"> need to rebuild anything</font>

472
00:22:47,270 --> 00:22:52,590
anything<font color="#E5E5E5"> else</font>

473
00:22:49,470 --> 00:22:55,290
you mentioned the<font color="#CCCCCC"> GST shark yes how do</font>

474
00:22:52,590 --> 00:22:57,840
<font color="#E5E5E5">you use it as an element</font><font color="#CCCCCC"> in the pipeline</font>

475
00:22:55,290 --> 00:23:00,180
<font color="#E5E5E5">or</font><font color="#CCCCCC"> is it a standalone</font><font color="#E5E5E5"> no no it's uh</font><font color="#CCCCCC"> it's</font>

476
00:22:57,840 --> 00:23:02,669
a set of tools<font color="#CCCCCC"> so it's a</font><font color="#E5E5E5"> bunch of</font>

477
00:23:00,180 --> 00:23:05,610
tracers so it's<font color="#E5E5E5"> a this trimmer plug-in</font>

478
00:23:02,670 --> 00:23:06,930
basically and but it's not powered<font color="#CCCCCC"> a</font>

479
00:23:05,610 --> 00:23:09,030
<font color="#CCCCCC">streamer course so you will have to</font>

480
00:23:06,930 --> 00:23:11,750
<font color="#E5E5E5">build it yourself manually and it will</font>

481
00:23:09,030 --> 00:23:14,070
give you all the<font color="#E5E5E5"> tracer I</font><font color="#CCCCCC"> mentioned</font><font color="#E5E5E5"> to</font>

482
00:23:11,750 --> 00:23:16,410
get<font color="#E5E5E5"> many function about the performance</font>

483
00:23:14,070 --> 00:23:18,600
about the interagency<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the script to</font>

484
00:23:16,410 --> 00:23:20,280
generate the graph<font color="#E5E5E5"> I show as well so</font>

485
00:23:18,600 --> 00:23:23,399
it's not<font color="#CCCCCC"> a</font><font color="#E5E5E5"> net amount</font><font color="#CCCCCC"> it's a bunch of</font>

486
00:23:20,280 --> 00:23:29,690
tracer and scripts to produce<font color="#CCCCCC"> yeah</font>

487
00:23:23,400 --> 00:23:29,690
<font color="#E5E5E5">useful</font><font color="#CCCCCC"> information from that anyone else</font>

488
00:23:30,230 --> 00:23:42,870
<font color="#E5E5E5">okay we have a question</font><font color="#CCCCCC"> in the back wait</font>

489
00:23:38,430 --> 00:23:45,960
for the microphone<font color="#E5E5E5"> hi and I used to have</font>

490
00:23:42,870 --> 00:23:49,169
some pixelization<font color="#E5E5E5"> issues when I'm trying</font>

491
00:23:45,960 --> 00:23:50,880
to<font color="#E5E5E5"> play the encryptor - streams</font><font color="#CCCCCC"> mhm</font>

492
00:23:49,170 --> 00:23:53,160
which is the best efficient method of

493
00:23:50,880 --> 00:23:59,400
<font color="#E5E5E5">debugging does kind of these research</font>

494
00:23:53,160 --> 00:24:04,590
issues<font color="#E5E5E5"> well what I will do I will start</font>

495
00:23:59,400 --> 00:24:07,320
by looking at the logs from<font color="#CCCCCC"> the specific</font>

496
00:24:04,590 --> 00:24:10,409
element which<font color="#E5E5E5"> will cause the program</font>

497
00:24:07,320 --> 00:24:12,300
<font color="#E5E5E5">mostly the GC launch is completely</font>

498
00:24:10,410 --> 00:24:13,620
successful<font color="#E5E5E5"> and I did not see any error</font>

499
00:24:12,300 --> 00:24:16,350
<font color="#E5E5E5">log yeah yeah that's why you have to use</font>

500
00:24:13,620 --> 00:24:22,320
<font color="#CCCCCC">the GST debug environment variable</font>

501
00:24:16,350 --> 00:24:22,949
<font color="#E5E5E5">I'm not</font><font color="#CCCCCC"> shown here so if you use</font><font color="#E5E5E5"> where</font>

502
00:24:22,320 --> 00:24:27,360
is it

503
00:24:22,950 --> 00:24:29,010
GST debug here so here<font color="#E5E5E5"> I asked him to</font>

504
00:24:27,360 --> 00:24:31,559
give me the information<font color="#CCCCCC"> about</font><font color="#E5E5E5"> the tracer</font>

505
00:24:29,010 --> 00:24:33,900
<font color="#E5E5E5">but if you put</font><font color="#CCCCCC"> just five for example</font>

506
00:24:31,559 --> 00:24:36,240
<font color="#E5E5E5">that will give you all the debug</font>

507
00:24:33,900 --> 00:24:39,330
<font color="#CCCCCC">information of all the hemant</font><font color="#E5E5E5"> which</font>

508
00:24:36,240 --> 00:24:41,720
would be<font color="#E5E5E5"> quite a lot but from there you</font>

509
00:24:39,330 --> 00:24:43,490
can<font color="#E5E5E5"> start working on what's going on and</font>

510
00:24:41,720 --> 00:24:45,630
that<font color="#E5E5E5"> will give you more information</font>

511
00:24:43,490 --> 00:24:47,670
<font color="#CCCCCC">after that you</font><font color="#E5E5E5"> have to end up the</font>

512
00:24:45,630 --> 00:24:49,020
<font color="#CCCCCC">beginng</font><font color="#E5E5E5"> so if you are not used to do</font>

513
00:24:47,670 --> 00:24:54,809
that<font color="#CCCCCC"> yourself the</font><font color="#E5E5E5"> best way would be to</font>

514
00:24:49,020 --> 00:24:56,460
<font color="#CCCCCC">justify the Borgata</font><font color="#E5E5E5"> and great yeah there</font>

515
00:24:54,809 --> 00:24:58,320
is no magic<font color="#CCCCCC"> answer unfortunately</font><font color="#E5E5E5"> the</font>

516
00:24:56,460 --> 00:25:06,049
beginning is art<font color="#E5E5E5"> and I'm afraid it will</font>

517
00:24:58,320 --> 00:25:06,049
<font color="#E5E5E5">always</font><font color="#CCCCCC"> be questioned</font><font color="#E5E5E5"> maybe</font>

