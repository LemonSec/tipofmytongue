1
00:00:06,230 --> 00:00:12,930
<font color="#E5E5E5">okay hi everybody</font><font color="#CCCCCC"> I'm Rebecca Rizzoli</font>

2
00:00:09,600 --> 00:00:15,420
<font color="#E5E5E5">and I talked about how</font><font color="#CCCCCC"> Linux can</font><font color="#E5E5E5"> run on</font>

3
00:00:12,930 --> 00:00:17,430
the Tzenkethi<font color="#E5E5E5"> process or</font><font color="#CCCCCC"> Mike sightings</font>

4
00:00:15,420 --> 00:00:18,900
especially<font color="#E5E5E5"> in the ways that</font><font color="#CCCCCC"> he differs</font>

5
00:00:17,430 --> 00:00:21,900
<font color="#E5E5E5">from other system and chips</font>

6
00:00:18,900 --> 00:00:24,090
I work as an<font color="#E5E5E5"> embedded</font><font color="#CCCCCC"> renew exchange in</font>

7
00:00:21,900 --> 00:00:26,189
year at I<font color="#E5E5E5"> am Sportline designing the</font>

8
00:00:24,090 --> 00:00:29,130
<font color="#E5E5E5">next generation data loggers dashboards</font>

9
00:00:26,190 --> 00:00:31,230
and<font color="#E5E5E5"> action cameras for racing</font><font color="#CCCCCC"> I also</font>

10
00:00:29,130 --> 00:00:34,019
love open source of<font color="#E5E5E5"> course and I</font>

11
00:00:31,230 --> 00:00:38,850
contribute some projects including<font color="#CCCCCC"> bin</font>

12
00:00:34,019 --> 00:00:40,739
route<font color="#CCCCCC"> ok so I will</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> give you a</font>

13
00:00:38,850 --> 00:00:44,130
<font color="#CCCCCC">brief introduction about the chip itself</font>

14
00:00:40,739 --> 00:00:48,209
<font color="#E5E5E5">and then proceed to which development</font>

15
00:00:44,130 --> 00:00:52,440
tools are<font color="#CCCCCC"> available how</font><font color="#E5E5E5"> Linux can use</font>

16
00:00:48,210 --> 00:00:56,070
your<font color="#CCCCCC"> VGA design and how to boot this</font>

17
00:00:52,440 --> 00:00:58,050
thing and then there<font color="#E5E5E5"> are a few shorter</font>

18
00:00:56,070 --> 00:01:03,180
sections about using the GPU and<font color="#CCCCCC"> the</font>

19
00:00:58,050 --> 00:01:07,140
video codec unit<font color="#E5E5E5"> so this basically zinc</font>

20
00:01:03,180 --> 00:01:09,600
<font color="#CCCCCC">MP is a circle VGA so it is a</font>

21
00:01:07,140 --> 00:01:12,899
<font color="#CCCCCC">system-on-chip</font><font color="#E5E5E5"> pretty much like many</font>

22
00:01:09,600 --> 00:01:14,788
others<font color="#CCCCCC"> but it also has a piece of a</font><font color="#E5E5E5"> PGA</font>

23
00:01:12,899 --> 00:01:17,850
which is directly connected<font color="#E5E5E5"> to the</font>

24
00:01:14,789 --> 00:01:19,770
processor<font color="#E5E5E5"> on chip which makes it very</font>

25
00:01:17,850 --> 00:01:22,559
efficient with<font color="#CCCCCC"> respect to other</font>

26
00:01:19,770 --> 00:01:25,770
architectures were the FPGA is connected

27
00:01:22,560 --> 00:01:28,890
externally or the CPU<font color="#E5E5E5"> is synthesized and</font>

28
00:01:25,770 --> 00:01:31,470
on the FPGA self<font color="#E5E5E5"> if you're new to the</font>

29
00:01:28,890 --> 00:01:34,259
topic<font color="#E5E5E5"> there is a good introduction by</font>

30
00:01:31,470 --> 00:01:37,069
molecular shoot<font color="#E5E5E5"> this talk is an overview</font>

31
00:01:34,259 --> 00:01:41,759
<font color="#E5E5E5">of the topic which is</font><font color="#CCCCCC"> quite good</font>

32
00:01:37,069 --> 00:01:44,130
<font color="#E5E5E5">ok basically the two main vendors for</font>

33
00:01:41,759 --> 00:01:47,220
this kind of thing is<font color="#CCCCCC"> arc settings and</font>

34
00:01:44,130 --> 00:01:49,979
<font color="#E5E5E5">altaira which is now Intel and I'll be</font>

35
00:01:47,220 --> 00:01:51,959
talking<font color="#CCCCCC"> about the current</font><font color="#E5E5E5"> second</font>

36
00:01:49,979 --> 00:01:54,119
generation by<font color="#E5E5E5"> exciting's</font>

37
00:01:51,959 --> 00:01:56,640
which is the zinc will draw<font color="#CCCCCC"> scale</font><font color="#E5E5E5"> plus</font>

38
00:01:54,119 --> 00:01:59,399
MP<font color="#E5E5E5"> shock but people call it Lincoln PB</font>

39
00:01:56,640 --> 00:02:02,550
cuz it's shorter<font color="#CCCCCC"> there is a previous</font>

40
00:01:59,399 --> 00:02:05,039
family<font color="#CCCCCC"> narration of socks which is a</font>

41
00:02:02,550 --> 00:02:07,399
sync<font color="#E5E5E5"> 7000 which is now pretty much</font>

42
00:02:05,039 --> 00:02:11,550
<font color="#E5E5E5">well-established</font>

43
00:02:07,399 --> 00:02:13,170
<font color="#CCCCCC">Intel</font><font color="#E5E5E5"> has a pretty similar set of</font><font color="#CCCCCC"> 2</font>

44
00:02:11,550 --> 00:02:17,219
generation of

45
00:02:13,170 --> 00:02:20,640
but I don't know much about them<font color="#E5E5E5"> okay</font>

46
00:02:17,219 --> 00:02:24,420
this<font color="#E5E5E5"> is the block diagram of the</font><font color="#CCCCCC"> system</font>

47
00:02:20,640 --> 00:02:29,040
<font color="#CCCCCC">on chip</font><font color="#E5E5E5"> as you can see it has well he</font>

48
00:02:24,420 --> 00:02:33,268
needs most complete versions<font color="#E5E5E5"> it has quad</font>

49
00:02:29,040 --> 00:02:37,349
<font color="#E5E5E5">core</font><font color="#CCCCCC"> our 64-bit processor a 53</font><font color="#E5E5E5"> to</font>

50
00:02:33,269 --> 00:02:39,599
<font color="#E5E5E5">real-time course</font><font color="#CCCCCC"> it also has</font><font color="#E5E5E5"> the usual</font>

51
00:02:37,349 --> 00:02:39,980
long list of peripherals for system and

52
00:02:39,599 --> 00:02:42,750
chips

53
00:02:39,980 --> 00:02:45,209
most of<font color="#E5E5E5"> most of them are</font><font color="#CCCCCC"> connected to a</font>

54
00:02:42,750 --> 00:02:48,150
<font color="#CCCCCC">low power interconnect if you have the</font>

55
00:02:45,209 --> 00:02:51,299
faster peripherals are on the full power

56
00:02:48,150 --> 00:02:55,260
interconnects<font color="#CCCCCC"> okay then</font><font color="#E5E5E5"> there is also a</font>

57
00:02:51,299 --> 00:02:57,599
GPU<font color="#E5E5E5"> in some versions there is</font><font color="#CCCCCC"> of course</font>

58
00:02:55,260 --> 00:03:00,239
a digital controller<font color="#E5E5E5"> there are two</font>

59
00:02:57,599 --> 00:03:01,950
<font color="#E5E5E5">specialized units the CSU and the</font><font color="#CCCCCC"> PNU</font>

60
00:03:00,239 --> 00:03:04,980
that are involved<font color="#E5E5E5"> in booting so I will</font>

61
00:03:01,950 --> 00:03:07,530
talk<font color="#E5E5E5"> about them later</font><font color="#CCCCCC"> it also has a</font>

62
00:03:04,980 --> 00:03:11,159
video<font color="#E5E5E5"> codec unit which is a video</font>

63
00:03:07,530 --> 00:03:13,109
encoder and decoder<font color="#E5E5E5"> in hardware and some</font>

64
00:03:11,159 --> 00:03:15,388
other very<font color="#E5E5E5"> fast brain for us that I'm</font>

65
00:03:13,109 --> 00:03:18,030
not<font color="#E5E5E5"> talking about and then there is of</font>

66
00:03:15,389 --> 00:03:22,049
course<font color="#E5E5E5"> the FPGA which makes this design</font>

67
00:03:18,030 --> 00:03:26,340
<font color="#E5E5E5">quite peculiar</font><font color="#CCCCCC"> okay</font>

68
00:03:22,049 --> 00:03:27,650
so to develop<font color="#E5E5E5"> on this kind of processor</font>

69
00:03:26,340 --> 00:03:30,959
of course first of<font color="#E5E5E5"> all</font><font color="#CCCCCC"> you need</font>

70
00:03:27,650 --> 00:03:32,519
documentation<font color="#E5E5E5"> there is a lot of the</font>

71
00:03:30,959 --> 00:03:36,599
documentation generally quite good by

72
00:03:32,519 --> 00:03:39,599
stylings it's accessible on that pretty

73
00:03:36,599 --> 00:03:44,060
<font color="#E5E5E5">long URL on their website there you find</font>

74
00:03:39,599 --> 00:03:47,310
like<font color="#CCCCCC"> 2000</font><font color="#E5E5E5"> documents of general interest</font>

75
00:03:44,060 --> 00:03:52,199
<font color="#E5E5E5">about about the platform and that</font><font color="#CCCCCC"> there</font>

76
00:03:47,310 --> 00:03:55,109
is much more<font color="#E5E5E5"> okay then you</font><font color="#CCCCCC"> start in</font>

77
00:03:52,199 --> 00:03:56,970
<font color="#CCCCCC">bottom-up you design your</font><font color="#E5E5E5"> FPGA this is</font>

78
00:03:55,109 --> 00:03:59,669
not the<font color="#CCCCCC"> subject of</font><font color="#E5E5E5"> this talk but anyway</font>

79
00:03:56,970 --> 00:04:02,728
just<font color="#E5E5E5"> really the tool that silence</font>

80
00:03:59,669 --> 00:04:05,430
provides for this is the<font color="#CCCCCC"> pivotal design</font>

81
00:04:02,729 --> 00:04:08,129
suit<font color="#E5E5E5"> which includes</font><font color="#CCCCCC"> rubato itself which</font>

82
00:04:05,430 --> 00:04:10,620
is the<font color="#E5E5E5"> thing you used to design FPGA</font>

83
00:04:08,129 --> 00:04:11,590
<font color="#E5E5E5">down to the bit</font><font color="#CCCCCC"> string which gets</font>

84
00:04:10,620 --> 00:04:14,680
downloaded

85
00:04:11,590 --> 00:04:17,519
<font color="#CCCCCC">peih-gee and then there is the</font><font color="#E5E5E5"> X SDK</font>

86
00:04:14,680 --> 00:04:20,918
<font color="#CCCCCC">tilings SDK which is an eclipse</font><font color="#E5E5E5"> Eid</font><font color="#CCCCCC"> need</font>

87
00:04:17,519 --> 00:04:24,280
to build firmware

88
00:04:20,918 --> 00:04:27,580
bare metal software for<font color="#E5E5E5"> the exciting</font>

89
00:04:24,280 --> 00:04:30,099
processors<font color="#CCCCCC"> all of these runs</font><font color="#E5E5E5"> quite</font><font color="#CCCCCC"> okay</font>

90
00:04:27,580 --> 00:04:32,620
in<font color="#E5E5E5"> Linux and there is also a zero cost</font>

91
00:04:30,100 --> 00:04:36,280
version<font color="#E5E5E5"> it's all</font><font color="#CCCCCC"> license based so it's</font>

92
00:04:32,620 --> 00:04:38,460
not really completely free but the zero

93
00:04:36,280 --> 00:04:42,760
cost version has most of the features

94
00:04:38,460 --> 00:04:46,388
<font color="#E5E5E5">but not the most advanced ones</font><font color="#CCCCCC"> okay so</font>

95
00:04:42,760 --> 00:04:49,479
it's quite<font color="#E5E5E5"> useful it does a lot of</font>

96
00:04:46,389 --> 00:04:52,120
<font color="#E5E5E5">things</font><font color="#CCCCCC"> however it is</font><font color="#E5E5E5"> crossers it is a</font>

97
00:04:49,479 --> 00:04:54,729
very new software to<font color="#E5E5E5"> install</font><font color="#CCCCCC"> you have to</font>

98
00:04:52,120 --> 00:04:56,710
have<font color="#E5E5E5"> that pretty powerful computer to</font>

99
00:04:54,729 --> 00:04:59,820
<font color="#E5E5E5">use it it also has some bags and</font>

100
00:04:56,710 --> 00:05:04,030
annoyances that<font color="#E5E5E5"> people complain about</font>

101
00:04:59,820 --> 00:05:07,090
<font color="#E5E5E5">but of course it's</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> so you</font><font color="#CCCCCC"> can do</font>

102
00:05:04,030 --> 00:05:08,739
much about that<font color="#E5E5E5"> but it's generally</font><font color="#CCCCCC"> a</font>

103
00:05:07,090 --> 00:05:10,479
<font color="#E5E5E5">good product but you might wonder</font>

104
00:05:08,740 --> 00:05:13,090
whether you can<font color="#CCCCCC"> use some</font><font color="#E5E5E5"> open</font><font color="#CCCCCC"> source</font>

105
00:05:10,479 --> 00:05:16,389
<font color="#E5E5E5">alternative you're not that lucky</font>

106
00:05:13,090 --> 00:05:18,810
<font color="#CCCCCC">because</font><font color="#E5E5E5"> today</font><font color="#CCCCCC"> it is not possible to use</font>

107
00:05:16,389 --> 00:05:23,919
a fully<font color="#CCCCCC"> open source</font><font color="#E5E5E5"> tool chain for this</font>

108
00:05:18,810 --> 00:05:25,930
kind of<font color="#E5E5E5"> fpga although there is a reverse</font>

109
00:05:23,919 --> 00:05:29,799
engineering effort in progress<font color="#CCCCCC"> it's</font>

110
00:05:25,930 --> 00:05:32,229
called<font color="#CCCCCC"> the similar project and it's in</font>

111
00:05:29,800 --> 00:05:34,930
quite an<font color="#CCCCCC"> early stage for the</font><font color="#E5E5E5"> zinc 7000</font>

112
00:05:32,229 --> 00:05:38,560
platform<font color="#E5E5E5"> so for</font><font color="#CCCCCC"> zinc MP it's probably</font>

113
00:05:34,930 --> 00:05:40,500
very<font color="#E5E5E5"> soon</font><font color="#CCCCCC"> now to expect something</font><font color="#E5E5E5"> but</font>

114
00:05:38,560 --> 00:05:43,870
it's good<font color="#CCCCCC"> that this thing exists</font>

115
00:05:40,500 --> 00:05:46,090
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> here is an</font><font color="#CCCCCC"> interesting link on</font>

116
00:05:43,870 --> 00:05:49,750
other reason why<font color="#E5E5E5"> you might want</font><font color="#CCCCCC"> an open</font>

117
00:05:46,090 --> 00:05:52,400
source<font color="#CCCCCC"> no change</font><font color="#E5E5E5"> okay when you have</font><font color="#CCCCCC"> to</font>

118
00:05:49,750 --> 00:05:55,030
<font color="#CCCCCC">your fpga</font><font color="#E5E5E5"> working you</font>

119
00:05:52,400 --> 00:05:58,698
to build the software on top of it<font color="#E5E5E5"> and</font>

120
00:05:55,030 --> 00:06:00,650
<font color="#CCCCCC">first the two main pillars</font><font color="#E5E5E5"> of a BSP to</font>

121
00:05:58,699 --> 00:06:05,419
support the<font color="#CCCCCC"> processor our Linux and</font><font color="#E5E5E5"> GNU</font>

122
00:06:00,650 --> 00:06:07,909
boot and about you would exciting's<font color="#E5E5E5"> is</font>

123
00:06:05,419 --> 00:06:11,508
quite<font color="#E5E5E5"> active in working on the main line</font>

124
00:06:07,910 --> 00:06:16,100
you would to support the their own

125
00:06:11,509 --> 00:06:19,550
processors which is very<font color="#E5E5E5"> good</font><font color="#CCCCCC"> I think in</font>

126
00:06:16,100 --> 00:06:24,220
what<font color="#E5E5E5"> it supposed</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be ready to boot</font>

127
00:06:19,550 --> 00:06:26,960
<font color="#CCCCCC">zinc MP processors in a good mainline</font>

128
00:06:24,220 --> 00:06:30,580
<font color="#E5E5E5">also I haven't tested that because it</font>

129
00:06:26,960 --> 00:06:32,599
doesn't<font color="#CCCCCC"> support the board I</font><font color="#E5E5E5"> have but</font>

130
00:06:30,580 --> 00:06:34,880
there is also some additional

131
00:06:32,600 --> 00:06:37,760
<font color="#E5E5E5">development that you can find in the</font>

132
00:06:34,880 --> 00:06:39,770
sidings<font color="#CCCCCC"> a github repo</font><font color="#E5E5E5"> they have their</font>

133
00:06:37,760 --> 00:06:41,690
own<font color="#E5E5E5"> new good for we think that are not</font>

134
00:06:39,770 --> 00:06:44,389
<font color="#E5E5E5">yet in</font><font color="#CCCCCC"> mainline so you may want to look</font>

135
00:06:41,690 --> 00:06:46,130
<font color="#E5E5E5">at that if you need something</font><font color="#CCCCCC"> a word or</font>

136
00:06:44,389 --> 00:06:48,620
a feature<font color="#CCCCCC"> that is not yet in the</font><font color="#E5E5E5"> main</font>

137
00:06:46,130 --> 00:06:50,750
<font color="#E5E5E5">line</font><font color="#CCCCCC"> okay</font>

138
00:06:48,620 --> 00:06:53,330
the other big pieces of<font color="#CCCCCC"> quarter UNIX</font>

139
00:06:50,750 --> 00:06:55,460
kernel<font color="#E5E5E5"> and the situation is quite</font>

140
00:06:53,330 --> 00:06:58,669
<font color="#E5E5E5">similar so</font><font color="#CCCCCC"> the Lynx is contributing to</font>

141
00:06:55,460 --> 00:07:01,849
<font color="#CCCCCC">that</font><font color="#E5E5E5"> as well</font><font color="#CCCCCC"> although I think</font><font color="#E5E5E5"> they are a</font>

142
00:06:58,669 --> 00:07:05,240
<font color="#E5E5E5">lot more behind</font><font color="#CCCCCC"> to I</font><font color="#E5E5E5"> think it's quite</font>

143
00:07:01,849 --> 00:07:10,010
incomplete so far<font color="#E5E5E5"> so you might probably</font>

144
00:07:05,240 --> 00:07:17,150
<font color="#E5E5E5">want</font><font color="#CCCCCC"> to have a look at the sidings</font><font color="#E5E5E5"> fork</font>

145
00:07:10,010 --> 00:07:19,310
on github<font color="#E5E5E5"> he is the current the branch</font>

146
00:07:17,150 --> 00:07:21,500
from signings has started like<font color="#CCCCCC"> Bonior</font>

147
00:07:19,310 --> 00:07:24,289
<font color="#E5E5E5">ago so it's diverging a lot from</font>

148
00:07:21,500 --> 00:07:27,050
<font color="#CCCCCC">mainline but they from time to time they</font>

149
00:07:24,289 --> 00:07:30,020
start a<font color="#E5E5E5"> new branch somewhat like once</font>

150
00:07:27,050 --> 00:07:32,900
per year probably<font color="#E5E5E5"> not official so there</font>

151
00:07:30,020 --> 00:07:36,380
might be a new branch<font color="#E5E5E5"> starting being</font>

152
00:07:32,900 --> 00:07:40,820
published soon<font color="#E5E5E5"> from a recent</font><font color="#CCCCCC"> kernel the</font>

153
00:07:36,380 --> 00:07:46,750
one that's now in use is a branch from

154
00:07:40,820 --> 00:07:49,760
kernel 4.9<font color="#CCCCCC"> ok and on the Italians</font>

155
00:07:46,750 --> 00:07:51,560
branches you<font color="#E5E5E5"> can find</font><font color="#CCCCCC"> those development</font>

156
00:07:49,760 --> 00:07:53,750
for the<font color="#E5E5E5"> hot</font><font color="#CCCCCC"> silicon features that are</font>

157
00:07:51,560 --> 00:07:56,570
specific to<font color="#E5E5E5"> them can be and to</font><font color="#CCCCCC"> the IP</font>

158
00:07:53,750 --> 00:07:57,920
blocks that you<font color="#CCCCCC"> can put in FPGA and that</font>

159
00:07:56,570 --> 00:08:00,830
are

160
00:07:57,920 --> 00:08:03,740
in<font color="#CCCCCC"> InDesign</font><font color="#E5E5E5"> compete that were not</font>

161
00:08:00,830 --> 00:08:07,729
<font color="#E5E5E5">existing before</font><font color="#CCCCCC"> especially related to</font>

162
00:08:03,740 --> 00:08:11,480
<font color="#CCCCCC">video processing</font><font color="#E5E5E5"> okay and finally you</font>

163
00:08:07,730 --> 00:08:14,150
need<font color="#CCCCCC"> to build the whole system</font><font color="#E5E5E5"> and in</font>

164
00:08:11,480 --> 00:08:15,590
this respect<font color="#E5E5E5"> there are you have to make</font>

165
00:08:14,150 --> 00:08:17,719
a choice<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> workflow</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

166
00:08:15,590 --> 00:08:21,650
<font color="#E5E5E5">want to use because there are at least</font>

167
00:08:17,720 --> 00:08:23,690
two main possibilities<font color="#CCCCCC"> I've called them</font>

168
00:08:21,650 --> 00:08:25,760
the<font color="#CCCCCC"> exciting Zwart oh and the community</font>

169
00:08:23,690 --> 00:08:28,640
workflow<font color="#E5E5E5"> the first thing is the one that</font>

170
00:08:25,760 --> 00:08:32,950
<font color="#CCCCCC">silence supports</font><font color="#E5E5E5"> and documents in their</font>

171
00:08:28,640 --> 00:08:35,960
own<font color="#CCCCCC"> record designs</font><font color="#E5E5E5"> and the second is</font>

172
00:08:32,950 --> 00:08:39,020
developed by the community<font color="#E5E5E5"> with some</font>

173
00:08:35,960 --> 00:08:42,220
<font color="#E5E5E5">some support like silence</font><font color="#CCCCCC"> also and it</font><font color="#E5E5E5"> is</font>

174
00:08:39,020 --> 00:08:45,199
closer to<font color="#E5E5E5"> how other open-source</font>

175
00:08:42,220 --> 00:08:46,220
development works in other vendors even

176
00:08:45,200 --> 00:08:48,380
chips

177
00:08:46,220 --> 00:08:50,330
of course you can somewhat mix and

178
00:08:48,380 --> 00:08:52,730
change on<font color="#E5E5E5"> this but these</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> the two</font>

179
00:08:50,330 --> 00:08:56,180
that are<font color="#CCCCCC"> in most common use as</font><font color="#E5E5E5"> far as I</font>

180
00:08:52,730 --> 00:08:59,900
know right<font color="#CCCCCC"> the italic workflow involves</font>

181
00:08:56,180 --> 00:09:04,010
of course<font color="#CCCCCC"> using Vivaro</font><font color="#E5E5E5"> and X SDK for the</font>

182
00:08:59,900 --> 00:09:06,829
FPGA<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> boot loaders and low-level</font>

183
00:09:04,010 --> 00:09:09,050
<font color="#E5E5E5">stuff and then they use petal</font>

184
00:09:06,830 --> 00:09:12,860
<font color="#CCCCCC">inaccessible system which is exiling</font>

185
00:09:09,050 --> 00:09:15,290
specific<font color="#E5E5E5"> bin system it used to be</font><font color="#CCCCCC"> a</font>

186
00:09:12,860 --> 00:09:19,160
build system on its own<font color="#E5E5E5"> different</font><font color="#CCCCCC"> from</font>

187
00:09:15,290 --> 00:09:21,050
other<font color="#CCCCCC"> things</font><font color="#E5E5E5"> nowadays</font><font color="#CCCCCC"> he uses octo</font>

188
00:09:19,160 --> 00:09:23,810
internally so it<font color="#E5E5E5"> got a bit more standard</font>

189
00:09:21,050 --> 00:09:25,819
<font color="#E5E5E5">also if you use beta linux directly you</font>

190
00:09:23,810 --> 00:09:28,040
<font color="#E5E5E5">don't see octo working but it's there</font>

191
00:09:25,820 --> 00:09:30,290
somewhere<font color="#E5E5E5"> in some of its sub directories</font>

192
00:09:28,040 --> 00:09:34,640
so you can have a look at how it been

193
00:09:30,290 --> 00:09:39,110
things and which recipes it used it<font color="#E5E5E5"> uses</font>

194
00:09:34,640 --> 00:09:40,460
actually<font color="#E5E5E5"> those three layers mainly so in</font>

195
00:09:39,110 --> 00:09:45,410
case you want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have a look they are</font>

196
00:09:40,460 --> 00:09:48,470
<font color="#E5E5E5">all on github and</font><font color="#CCCCCC"> way</font><font color="#E5E5E5"> and the other</font>

197
00:09:45,410 --> 00:09:50,640
workflow the community workflow<font color="#E5E5E5"> also</font>

198
00:09:48,470 --> 00:09:52,200
involves using<font color="#E5E5E5"> Bovada because it's</font>

199
00:09:50,640 --> 00:09:54,900
currently the<font color="#CCCCCC"> only tool that you can use</font>

200
00:09:52,200 --> 00:09:56,730
to design<font color="#E5E5E5"> FPGA</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> also a little bit of</font>

201
00:09:54,900 --> 00:10:00,660
excess decay<font color="#E5E5E5"> I will talk about that</font>

202
00:09:56,730 --> 00:10:04,400
<font color="#E5E5E5">later</font><font color="#CCCCCC"> and then there is one layer the</font>

203
00:10:00,660 --> 00:10:08,130
<font color="#CCCCCC">metric</font><font color="#E5E5E5"> silence bsp layer which is</font>

204
00:10:04,400 --> 00:10:12,510
developed quite in<font color="#E5E5E5"> line with the</font>

205
00:10:08,130 --> 00:10:17,310
standards for for a<font color="#CCCCCC"> Yocto project as</font>

206
00:10:12,510 --> 00:10:22,560
well as<font color="#E5E5E5"> a</font><font color="#CCCCCC"> general</font><font color="#E5E5E5"> DSP for any</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> on</font>

207
00:10:17,310 --> 00:10:25,439
<font color="#E5E5E5">chip</font><font color="#CCCCCC"> alright and</font><font color="#E5E5E5"> but this does</font><font color="#CCCCCC"> not</font>

208
00:10:22,560 --> 00:10:30,390
support yet all of the features but<font color="#E5E5E5"> it's</font>

209
00:10:25,440 --> 00:10:32,820
<font color="#E5E5E5">already quite completely now okay</font>

210
00:10:30,390 --> 00:10:34,380
<font color="#E5E5E5">a couple other useful resources there is</font>

211
00:10:32,820 --> 00:10:37,440
the<font color="#CCCCCC"> mythic stylings meaning list which</font>

212
00:10:34,380 --> 00:10:40,320
is mostly to discuss the many exciting

213
00:10:37,440 --> 00:10:43,100
<font color="#CCCCCC">straight</font><font color="#E5E5E5"> veneers but it is</font><font color="#CCCCCC"> also place</font>

214
00:10:40,320 --> 00:10:46,170
<font color="#CCCCCC">for general discussion about the the</font>

215
00:10:43,100 --> 00:10:48,630
usage of Linux on<font color="#CCCCCC"> this sock</font><font color="#E5E5E5"> on whom</font>

216
00:10:46,170 --> 00:10:52,829
<font color="#E5E5E5">tilings</font><font color="#CCCCCC"> Hardware in general so it's</font>

217
00:10:48,630 --> 00:10:56,850
useful for<font color="#CCCCCC"> many users it's low traffic</font>

218
00:10:52,830 --> 00:10:58,940
so<font color="#CCCCCC"> we you can hold it easily and also</font>

219
00:10:56,850 --> 00:11:01,380
<font color="#E5E5E5">there is this layer meta topic which is</font>

220
00:10:58,940 --> 00:11:04,410
just report boards made by a

221
00:11:01,380 --> 00:11:07,980
manufacturer called topic embedded<font color="#E5E5E5"> but</font>

222
00:11:04,410 --> 00:11:12,719
it has some useful code that I<font color="#E5E5E5"> used that</font>

223
00:11:07,980 --> 00:11:14,940
there is not found<font color="#CCCCCC"> on</font><font color="#E5E5E5"> other reuse</font><font color="#CCCCCC"> ok</font>

224
00:11:12,720 --> 00:11:17,250
there is no currently support for losing

225
00:11:14,940 --> 00:11:19,650
campaign<font color="#E5E5E5"> in</font><font color="#CCCCCC"> bid</font><font color="#E5E5E5"> route but it's working</font>

226
00:11:17,250 --> 00:11:21,570
<font color="#CCCCCC">progress that is first batch set on the</font>

227
00:11:19,650 --> 00:11:25,890
mailing list<font color="#E5E5E5"> that</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> basic support from</font>

228
00:11:21,570 --> 00:11:28,470
one board and it will<font color="#E5E5E5"> evolve to probably</font>

229
00:11:25,890 --> 00:11:35,220
support<font color="#E5E5E5"> it in the next few weeks or</font>

230
00:11:28,470 --> 00:11:38,010
<font color="#CCCCCC">months ok</font><font color="#E5E5E5"> so let's see</font><font color="#CCCCCC"> now when you</font>

231
00:11:35,220 --> 00:11:39,930
design your<font color="#CCCCCC"> pga how you can run</font><font color="#E5E5E5"> it on</font>

232
00:11:38,010 --> 00:11:42,689
<font color="#E5E5E5">linux</font><font color="#CCCCCC"> okay</font>

233
00:11:39,930 --> 00:11:45,839
the very interesting thing that I<font color="#CCCCCC"> found</font>

234
00:11:42,690 --> 00:11:48,210
very very<font color="#E5E5E5"> cool about this kind of of</font>

235
00:11:45,840 --> 00:11:49,350
<font color="#CCCCCC">cheap</font><font color="#E5E5E5"> is that you can basically design</font>

236
00:11:48,210 --> 00:11:52,230
your own system-on-chip

237
00:11:49,350 --> 00:11:54,150
that's because the<font color="#E5E5E5"> FPGA is connected</font><font color="#CCCCCC"> to</font>

238
00:11:52,230 --> 00:11:57,170
the CPU via<font color="#CCCCCC"> access</font><font color="#E5E5E5"> for buses</font>

239
00:11:54,150 --> 00:11:59,819
<font color="#CCCCCC">oxy for</font><font color="#E5E5E5"> is part of the</font><font color="#CCCCCC"> Amba</font>

240
00:11:57,170 --> 00:12:02,069
<font color="#E5E5E5">specification by</font><font color="#CCCCCC"> young</font><font color="#E5E5E5"> so it's the same</font>

241
00:11:59,820 --> 00:12:04,140
kind<font color="#E5E5E5"> of buses</font><font color="#CCCCCC"> that is used inside the</font>

242
00:12:02,070 --> 00:12:07,260
<font color="#E5E5E5">system on chip to connect the</font><font color="#CCCCCC"> processor</font>

243
00:12:04,140 --> 00:12:09,060
<font color="#CCCCCC">to the peripherals and so it follows</font><font color="#E5E5E5"> the</font>

244
00:12:07,260 --> 00:12:11,790
same standard you<font color="#E5E5E5"> can access the</font>

245
00:12:09,060 --> 00:12:13,800
registers in an IP block in<font color="#E5E5E5"> FPGA just</font>

246
00:12:11,790 --> 00:12:16,920
like<font color="#E5E5E5"> you access</font><font color="#CCCCCC"> the registers on an IP</font>

247
00:12:13,800 --> 00:12:19,560
block<font color="#E5E5E5"> in silicon and so it</font><font color="#CCCCCC"> actually</font>

248
00:12:16,920 --> 00:12:24,630
<font color="#CCCCCC">becomes like a system chip that</font><font color="#E5E5E5"> you</font>

249
00:12:19,560 --> 00:12:27,510
design in part<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> the steps when using</font>

250
00:12:24,630 --> 00:12:29,730
Vivaro are mainly<font color="#E5E5E5"> three integration</font><font color="#CCCCCC"> at</font>

251
00:12:27,510 --> 00:12:31,590
<font color="#CCCCCC">rest editor and constraints the first</font>

252
00:12:29,730 --> 00:12:34,650
step<font color="#E5E5E5"> by integration</font>

253
00:12:31,590 --> 00:12:36,960
he takes place in<font color="#E5E5E5"> this window the block</font>

254
00:12:34,650 --> 00:12:39,540
<font color="#CCCCCC">design editor you can't read that that's</font>

255
00:12:36,960 --> 00:12:42,300
<font color="#CCCCCC">okay it's blocks</font><font color="#E5E5E5"> connected by lines and</font>

256
00:12:39,540 --> 00:12:45,920
basically oversimplifying<font color="#CCCCCC"> but that's an</font>

257
00:12:42,300 --> 00:12:53,130
electronic circuit each of these blocks

258
00:12:45,920 --> 00:12:56,099
get synthesized into FPGA and<font color="#CCCCCC"> with some</font>

259
00:12:53,130 --> 00:12:58,890
exceptions<font color="#CCCCCC"> the block one here with zinc</font>

260
00:12:56,100 --> 00:13:02,070
<font color="#CCCCCC">Matroska on top of it</font><font color="#E5E5E5"> does actually</font>

261
00:12:58,890 --> 00:13:05,010
represent everything that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> on the chip</font>

262
00:13:02,070 --> 00:13:08,220
outside the FPGA<font color="#E5E5E5"> so it's there just</font><font color="#CCCCCC"> to</font>

263
00:13:05,010 --> 00:13:11,100
because this view<font color="#E5E5E5"> is FPGA centric so</font>

264
00:13:08,220 --> 00:13:13,230
that is there because<font color="#E5E5E5"> you can double</font>

265
00:13:11,100 --> 00:13:15,660
<font color="#E5E5E5">click</font><font color="#CCCCCC"> on it and customize it so you can</font>

266
00:13:13,230 --> 00:13:17,850
customize how<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> the hard silicon</font>

267
00:13:15,660 --> 00:13:21,900
part<font color="#CCCCCC"> work you can configure the</font><font color="#E5E5E5"> PLL's</font>

268
00:13:17,850 --> 00:13:25,350
<font color="#E5E5E5">the the</font><font color="#CCCCCC"> powertrains the various</font>

269
00:13:21,900 --> 00:13:27,300
peripherals<font color="#E5E5E5"> buses and so on and this</font>

270
00:13:25,350 --> 00:13:31,980
results<font color="#CCCCCC"> in a configuration</font><font color="#E5E5E5"> file</font><font color="#CCCCCC"> that</font>

271
00:13:27,300 --> 00:13:34,770
gets<font color="#E5E5E5"> saved which we actually set a long</font>

272
00:13:31,980 --> 00:13:37,680
list of registers<font color="#E5E5E5"> into the various</font>

273
00:13:34,770 --> 00:13:39,780
peripherals<font color="#CCCCCC"> if you double click on other</font>

274
00:13:37,680 --> 00:13:41,189
<font color="#E5E5E5">blocks such as for</font><font color="#CCCCCC"> example a GPIO block</font>

275
00:13:39,780 --> 00:13:44,370
you can customize that<font color="#E5E5E5"> one as well</font>

276
00:13:41,190 --> 00:13:46,620
in this case it will change<font color="#E5E5E5"> what will be</font>

277
00:13:44,370 --> 00:13:48,630
synthesized in<font color="#CCCCCC"> the FPGA</font><font color="#E5E5E5"> for example you</font>

278
00:13:46,620 --> 00:13:49,380
can say for this at me for this GPIO

279
00:13:48,630 --> 00:13:53,459
block

280
00:13:49,380 --> 00:13:55,320
you only want three<font color="#E5E5E5"> three pins not 32</font>

281
00:13:53,459 --> 00:13:58,069
<font color="#CCCCCC">because you need only</font><font color="#E5E5E5"> three so you</font>

282
00:13:55,320 --> 00:14:01,830
<font color="#CCCCCC">optimize usage</font><font color="#E5E5E5"> of your FPGA you want</font>

283
00:13:58,070 --> 00:14:04,440
<font color="#E5E5E5">only</font><font color="#CCCCCC"> input and you cannot set out</font>

284
00:14:01,830 --> 00:14:07,350
because you<font color="#E5E5E5"> don't care and you</font><font color="#CCCCCC"> want to</font>

285
00:14:04,440 --> 00:14:11,220
have an interrupt what is it yeah you

286
00:14:07,350 --> 00:14:15,150
want<font color="#CCCCCC"> an interrupt line</font><font color="#E5E5E5"> so in</font><font color="#CCCCCC"> this case</font>

287
00:14:11,220 --> 00:14:16,920
you<font color="#E5E5E5"> will have a customized hardware and</font>

288
00:14:15,150 --> 00:14:19,459
when you synthesize that in FPGA you

289
00:14:16,920 --> 00:14:22,349
need to put it on Linux<font color="#CCCCCC"> so there is a</font>

290
00:14:19,459 --> 00:14:25,800
wiki page<font color="#CCCCCC"> bikes are links</font><font color="#E5E5E5"> which lists</font>

291
00:14:22,350 --> 00:14:30,600
all<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> devices that</font><font color="#E5E5E5"> can be</font><font color="#CCCCCC"> present</font>

292
00:14:25,800 --> 00:14:33,930
either in<font color="#E5E5E5"> silicon or in FPGA</font><font color="#CCCCCC"> and how to</font>

293
00:14:30,600 --> 00:14:36,030
use them<font color="#E5E5E5"> so it points to which is the</font>

294
00:14:33,930 --> 00:14:37,920
Linux driver<font color="#E5E5E5"> and there's some</font>

295
00:14:36,030 --> 00:14:40,170
documentation<font color="#E5E5E5"> of it and in the</font><font color="#CCCCCC"> loops</font>

296
00:14:37,920 --> 00:14:42,839
kernel<font color="#E5E5E5"> the the battery bindings are</font>

297
00:14:40,170 --> 00:14:46,620
<font color="#E5E5E5">documented so you can write your own</font>

298
00:14:42,839 --> 00:14:48,070
<font color="#E5E5E5">device</font><font color="#CCCCCC"> tree snippet to support</font><font color="#E5E5E5"> this</font>

299
00:14:46,620 --> 00:14:51,040
block and

300
00:14:48,070 --> 00:14:52,930
nothing but a GPIO controller<font color="#E5E5E5"> with its</font>

301
00:14:51,040 --> 00:14:54,760
own compatible<font color="#CCCCCC"> string</font><font color="#E5E5E5"> let you get from</font>

302
00:14:52,930 --> 00:15:00,790
the documentation<font color="#CCCCCC"> but you also have to</font>

303
00:14:54,760 --> 00:15:02,680
say sometimes<font color="#E5E5E5"> several parameters to tell</font>

304
00:15:00,790 --> 00:15:04,360
to<font color="#E5E5E5"> Linux how</font><font color="#CCCCCC"> the arguer has been</font>

305
00:15:02,680 --> 00:15:06,849
synthesized so you have to tell it it

306
00:15:04,360 --> 00:15:09,250
has three pins<font color="#CCCCCC"> if they are</font><font color="#E5E5E5"> only input it</font>

307
00:15:06,850 --> 00:15:11,620
has interrupts<font color="#CCCCCC"> or they are all</font><font color="#E5E5E5"> outputs</font>

308
00:15:09,250 --> 00:15:13,390
and so on otherwise the operating system

309
00:15:11,620 --> 00:15:16,150
will try<font color="#E5E5E5"> to access registers that are</font>

310
00:15:13,390 --> 00:15:17,710
<font color="#E5E5E5">not implemented or generally to use</font>

311
00:15:16,150 --> 00:15:20,050
<font color="#E5E5E5">features</font><font color="#CCCCCC"> that are not</font><font color="#E5E5E5"> there and this</font>

312
00:15:17,710 --> 00:15:22,600
will<font color="#E5E5E5"> result in crashes it's very</font>

313
00:15:20,050 --> 00:15:27,250
important that<font color="#CCCCCC"> you keep</font><font color="#E5E5E5"> in sync your</font>

314
00:15:22,600 --> 00:15:29,710
FPGA bitstream<font color="#CCCCCC"> with your device 3 it's</font>

315
00:15:27,250 --> 00:15:31,750
very easy to like a bit one and not the

316
00:15:29,710 --> 00:15:33,960
other<font color="#CCCCCC"> and then everything crashes so you</font>

317
00:15:31,750 --> 00:15:37,900
have to pay a lot<font color="#CCCCCC"> of attention to this</font>

318
00:15:33,960 --> 00:15:43,780
<font color="#E5E5E5">okay so interrupts are managed this way</font>

319
00:15:37,900 --> 00:15:46,780
<font color="#E5E5E5">the the non FPGA part can have up</font><font color="#CCCCCC"> to two</font>

320
00:15:43,780 --> 00:15:48,610
interrupts ports<font color="#CCCCCC"> each of eight bit</font><font color="#E5E5E5"> and</font>

321
00:15:46,780 --> 00:15:51,010
you<font color="#E5E5E5"> can connect this</font><font color="#CCCCCC"> line here comes</font>

322
00:15:48,610 --> 00:15:55,120
from the GPIO block you've seen before

323
00:15:51,010 --> 00:15:58,210
<font color="#CCCCCC">and so it will</font><font color="#E5E5E5"> end up in one of</font><font color="#CCCCCC"> these in</font>

324
00:15:55,120 --> 00:15:59,890
here and<font color="#CCCCCC"> this entering the heart of</font>

325
00:15:58,210 --> 00:16:02,050
<font color="#E5E5E5">silicon part and which is connected for</font>

326
00:15:59,890 --> 00:16:07,569
<font color="#E5E5E5">the</font><font color="#CCCCCC"> geek so the main entry controller in</font>

327
00:16:02,050 --> 00:16:09,849
the arm core and so this is how you do

328
00:16:07,570 --> 00:16:11,670
it<font color="#CCCCCC"> in Vivaro and you configure</font><font color="#E5E5E5"> it in</font>

329
00:16:09,850 --> 00:16:15,220
<font color="#CCCCCC">Linux in a very standard way so you have</font>

330
00:16:11,670 --> 00:16:16,810
inter apparent is<font color="#CCCCCC"> the geek unless you</font>

331
00:16:15,220 --> 00:16:20,230
have an additional it or control<font color="#E5E5E5"> outside</font>

332
00:16:16,810 --> 00:16:23,829
<font color="#CCCCCC">of course and you have interrupts we</font>

333
00:16:20,230 --> 00:16:26,350
take three parameters<font color="#CCCCCC"> with the type of</font>

334
00:16:23,830 --> 00:16:28,930
<font color="#E5E5E5">interrupt but the most important is this</font>

335
00:16:26,350 --> 00:16:30,370
one which is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> inter</font><font color="#E5E5E5"> number to know</font>

336
00:16:28,930 --> 00:16:34,930
which is<font color="#CCCCCC"> the interrupts number you have</font>

337
00:16:30,370 --> 00:16:38,020
<font color="#CCCCCC">to add</font><font color="#E5E5E5"> your offset here to the base add</font>

338
00:16:34,930 --> 00:16:40,030
base number which is somewhat<font color="#E5E5E5"> hard to</font>

339
00:16:38,020 --> 00:16:42,790
<font color="#CCCCCC">find you have to look here and there</font><font color="#E5E5E5"> to</font>

340
00:16:40,030 --> 00:16:44,920
find it<font color="#CCCCCC"> and so but luckily there is a</font>

341
00:16:42,790 --> 00:16:48,010
file that<font color="#E5E5E5"> has defined for them so I</font>

342
00:16:44,920 --> 00:16:51,400
think<font color="#E5E5E5"> this is 96 or so unfortunately</font>

343
00:16:48,010 --> 00:16:53,590
<font color="#E5E5E5">that the</font><font color="#CCCCCC"> fine file that the</font><font color="#E5E5E5"> ESD TSH file</font>

344
00:16:51,400 --> 00:16:56,680
that defines this one is not<font color="#E5E5E5"> in the</font>

345
00:16:53,590 --> 00:16:58,600
kernel sources<font color="#E5E5E5"> I found it on these other</font>

346
00:16:56,680 --> 00:17:01,719
repository here so I copied<font color="#CCCCCC"> it</font>

347
00:16:58,600 --> 00:17:04,990
<font color="#E5E5E5">immediately in my</font><font color="#CCCCCC"> kernel and it's very</font>

348
00:17:01,720 --> 00:17:06,939
useful<font color="#CCCCCC"> okay next</font><font color="#E5E5E5"> step in Nevada is the</font>

349
00:17:04,990 --> 00:17:09,849
<font color="#CCCCCC">adverse edit or whenever you add</font><font color="#E5E5E5"> a block</font>

350
00:17:06,939 --> 00:17:14,409
<font color="#CCCCCC">that is accessible via</font><font color="#E5E5E5"> an interconnect</font>

351
00:17:09,849 --> 00:17:15,849
<font color="#E5E5E5">it will add a mapping in</font><font color="#CCCCCC"> the address map</font>

352
00:17:14,409 --> 00:17:18,669
for<font color="#E5E5E5"> that block so</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is all done</font>

353
00:17:15,849 --> 00:17:21,730
automatically<font color="#E5E5E5"> and for the GPIO block it</font>

354
00:17:18,669 --> 00:17:25,270
will be accessible<font color="#E5E5E5"> at address</font><font color="#CCCCCC"> a 0 0 blah</font>

355
00:17:21,730 --> 00:17:27,849
blah blah<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is something</font><font color="#CCCCCC"> that you can</font>

356
00:17:25,270 --> 00:17:29,440
<font color="#CCCCCC">change if you</font><font color="#E5E5E5"> want and then this is the</font>

357
00:17:27,849 --> 00:17:31,959
<font color="#E5E5E5">number</font><font color="#CCCCCC"> that you have to put in device</font><font color="#E5E5E5"> 3</font>

358
00:17:29,440 --> 00:17:34,360
so you in<font color="#E5E5E5"> your</font><font color="#CCCCCC"> rec</font><font color="#E5E5E5"> keyword you have to</font>

359
00:17:31,960 --> 00:17:36,909
put<font color="#CCCCCC"> this</font><font color="#E5E5E5"> address here and the width</font>

360
00:17:34,360 --> 00:17:39,418
which<font color="#CCCCCC"> is in</font><font color="#E5E5E5"> most cases 64 bits and</font>

361
00:17:36,909 --> 00:17:42,640
that's<font color="#E5E5E5"> it so that gets very standard</font>

362
00:17:39,419 --> 00:17:45,880
<font color="#E5E5E5">again you have to keep them in sync the</font>

363
00:17:42,640 --> 00:17:47,660
your bit<font color="#E5E5E5"> stream with your device dream</font>

364
00:17:45,880 --> 00:17:48,779
has<font color="#E5E5E5"> been seen or</font><font color="#CCCCCC"> everything can happen</font>

365
00:17:47,660 --> 00:17:51,429
[Music]

366
00:17:48,779 --> 00:17:53,740
the third step is<font color="#CCCCCC"> define the constraints</font>

367
00:17:51,429 --> 00:17:57,130
<font color="#CCCCCC">for</font><font color="#E5E5E5"> each of the nets</font><font color="#CCCCCC"> basically the lines</font>

368
00:17:53,740 --> 00:17:59,770
in the<font color="#CCCCCC"> your FPGA design that go</font><font color="#E5E5E5"> outside</font>

369
00:17:57,130 --> 00:18:02,140
<font color="#E5E5E5">the chip</font><font color="#CCCCCC"> you have to define</font><font color="#E5E5E5"> to which</font>

370
00:17:59,770 --> 00:18:03,820
pinned a map via your standard the

371
00:18:02,140 --> 00:18:10,630
whether they have a pull-up or pulldown

372
00:18:03,820 --> 00:18:13,360
<font color="#E5E5E5">the similar things but this is not this</font>

373
00:18:10,630 --> 00:18:15,490
doesn't affect the<font color="#CCCCCC"> links part because it</font>

374
00:18:13,360 --> 00:18:17,649
is<font color="#E5E5E5"> not related to the</font><font color="#CCCCCC"> software but</font>

375
00:18:15,490 --> 00:18:21,750
<font color="#E5E5E5">radically outside of the chip so no</font>

376
00:18:17,649 --> 00:18:25,270
visible impact<font color="#CCCCCC"> here on the</font><font color="#E5E5E5"> curve</font><font color="#CCCCCC"> ok</font>

377
00:18:21,750 --> 00:18:26,980
that's all for<font color="#CCCCCC"> the Linux configuration</font>

378
00:18:25,270 --> 00:18:30,450
it pretty standard if you<font color="#E5E5E5"> pay attention</font>

379
00:18:26,980 --> 00:18:33,710
<font color="#CCCCCC">to keeping things</font><font color="#E5E5E5"> in sync and</font>

380
00:18:30,450 --> 00:18:36,330
the next big step is you<font color="#CCCCCC"> have to boot it</font>

381
00:18:33,710 --> 00:18:37,820
<font color="#CCCCCC">well actually it's the previous</font><font color="#E5E5E5"> step but</font>

382
00:18:36,330 --> 00:18:42,000
[Music]

383
00:18:37,820 --> 00:18:44,159
this place<font color="#E5E5E5"> okay back at the Google</font>

384
00:18:42,000 --> 00:18:47,190
<font color="#CCCCCC">Doodle</font><font color="#E5E5E5"> times with simpler system of</font>

385
00:18:44,160 --> 00:18:49,440
chips<font color="#E5E5E5"> you just have to load an SPL from</font>

386
00:18:47,190 --> 00:18:51,360
from storage to<font color="#E5E5E5"> in</font><font color="#CCCCCC"> turnaround that</font>

387
00:18:49,440 --> 00:18:54,540
initializes<font color="#CCCCCC"> RAM and loaded the big</font>

388
00:18:51,360 --> 00:18:56,459
<font color="#E5E5E5">bootloader which loaded the kernel in am</font>

389
00:18:54,540 --> 00:19:00,930
sick before<font color="#E5E5E5"> it's a lot more complex of</font>

390
00:18:56,460 --> 00:19:04,050
course<font color="#E5E5E5"> and one of the items that are</font>

391
00:19:00,930 --> 00:19:07,170
involved is the platform<font color="#E5E5E5"> management unit</font>

392
00:19:04,050 --> 00:19:11,550
the PM you think which<font color="#CCCCCC"> is here which is</font>

393
00:19:07,170 --> 00:19:14,070
<font color="#E5E5E5">a processor that is responsible to do</font>

394
00:19:11,550 --> 00:19:17,010
<font color="#E5E5E5">all power gating and con gating so it is</font>

395
00:19:14,070 --> 00:19:19,169
very<font color="#E5E5E5"> very important for the</font><font color="#CCCCCC"> system to</font>

396
00:19:17,010 --> 00:19:21,090
run you cannot boot<font color="#E5E5E5"> without</font><font color="#CCCCCC"> its</font>

397
00:19:19,170 --> 00:19:24,750
<font color="#CCCCCC">intervention</font><font color="#E5E5E5"> because it has to enable</font>

398
00:19:21,090 --> 00:19:29,250
the devices you need<font color="#E5E5E5"> this design is not</font>

399
00:19:24,750 --> 00:19:33,810
similar<font color="#CCCCCC"> to many other</font><font color="#E5E5E5"> 64 boards it's</font>

400
00:19:29,250 --> 00:19:41,040
rather complex<font color="#CCCCCC"> but so you have to handle</font>

401
00:19:33,810 --> 00:19:44,460
this it's mandatory and<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> another unit</font>

402
00:19:41,040 --> 00:19:48,530
involved<font color="#E5E5E5"> is the CSU the configuration</font>

403
00:19:44,460 --> 00:19:50,430
and people<font color="#E5E5E5"> to give it I think and so</font>

404
00:19:48,530 --> 00:19:54,120
first about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> PMU</font>

405
00:19:50,430 --> 00:19:56,190
the<font color="#CCCCCC"> pnu is actually a micro various</font>

406
00:19:54,120 --> 00:20:01,620
process for so<font color="#CCCCCC"> it's as a small micro</font>

407
00:19:56,190 --> 00:20:03,750
controller<font color="#CCCCCC"> basically which which can</font>

408
00:20:01,620 --> 00:20:06,000
execute<font color="#E5E5E5"> actually execute a few more that</font>

409
00:20:03,750 --> 00:20:08,430
you can reprogram<font color="#E5E5E5"> but in the practice</font>

410
00:20:06,000 --> 00:20:12,240
you<font color="#CCCCCC"> must reprogram it if you want to</font>

411
00:20:08,430 --> 00:20:15,450
boot<font color="#E5E5E5"> because both new boot and</font><font color="#CCCCCC"> linux</font>

412
00:20:12,240 --> 00:20:18,570
<font color="#E5E5E5">require a P mu P a new femur that is</font>

413
00:20:15,450 --> 00:20:21,180
more<font color="#CCCCCC"> recent</font><font color="#E5E5E5"> than the one in some signals</font>

414
00:20:18,570 --> 00:20:24,510
<font color="#CCCCCC">and so you have to reprogram that</font>

415
00:20:21,180 --> 00:20:27,300
<font color="#E5E5E5">luckily the source code has</font><font color="#CCCCCC"> been made</font>

416
00:20:24,510 --> 00:20:29,220
public<font color="#CCCCCC"> like signings</font><font color="#E5E5E5"> we just it's</font>

417
00:20:27,300 --> 00:20:30,720
actually a permissive license but with

418
00:20:29,220 --> 00:20:32,850
the restriction to<font color="#E5E5E5"> execute only on</font>

419
00:20:30,720 --> 00:20:33,800
sterling<font color="#E5E5E5"> server but anyway the sources</font>

420
00:20:32,850 --> 00:20:36,770
are there you<font color="#E5E5E5"> can</font>

421
00:20:33,800 --> 00:20:40,879
work on them<font color="#E5E5E5"> and there is</font><font color="#CCCCCC"> a recipe in</font>

422
00:20:36,770 --> 00:20:43,340
the<font color="#CCCCCC"> mythic sightings BSP master range to</font>

423
00:20:40,880 --> 00:20:45,860
build it in order<font color="#CCCCCC"> to build</font><font color="#E5E5E5"> it first</font>

424
00:20:43,340 --> 00:20:50,540
<font color="#E5E5E5">business an entire microblaze</font>

425
00:20:45,860 --> 00:20:57,409
<font color="#CCCCCC">to chain with Munich to eat will end up</font>

426
00:20:50,540 --> 00:20:59,720
in favor<font color="#E5E5E5"> built for you okay and the</font><font color="#CCCCCC"> PM</font>

427
00:20:57,410 --> 00:21:02,360
<font color="#E5E5E5">you favor does not run</font><font color="#CCCCCC"> on its own it</font>

428
00:20:59,720 --> 00:21:07,070
also needs a configuration<font color="#CCCCCC"> object</font><font color="#E5E5E5"> it</font>

429
00:21:02,360 --> 00:21:10,040
basically tells which<font color="#E5E5E5"> master hose which</font>

430
00:21:07,070 --> 00:21:13,550
<font color="#CCCCCC">sleeve where</font><font color="#E5E5E5"> method</font><font color="#CCCCCC"> our modern CPUs and</font>

431
00:21:10,040 --> 00:21:17,149
the slaves are the peripherals<font color="#CCCCCC"> that</font><font color="#E5E5E5"> just</font>

432
00:21:13,550 --> 00:21:19,610
to avoid<font color="#E5E5E5"> that both the cortex a53 and</font>

433
00:21:17,150 --> 00:21:21,380
the r5 or another process of

434
00:21:19,610 --> 00:21:25,010
synthesizing FPGA request the same

435
00:21:21,380 --> 00:21:28,850
peripheral and this wouldn't work

436
00:21:25,010 --> 00:21:30,530
<font color="#CCCCCC">of course this configuration depends on</font>

437
00:21:28,850 --> 00:21:32,800
how you configure things in<font color="#E5E5E5"> the value in</font>

438
00:21:30,530 --> 00:21:35,600
the big window where you configure the

439
00:21:32,800 --> 00:21:37,690
<font color="#CCCCCC">hard silicon block to there's a</font>

440
00:21:35,600 --> 00:21:40,129
configuration file generated<font color="#E5E5E5"> for that</font>

441
00:21:37,690 --> 00:21:43,940
another<font color="#E5E5E5"> big component you need for</font>

442
00:21:40,130 --> 00:21:48,970
booting is our<font color="#E5E5E5"> trusted firmware you need</font>

443
00:21:43,940 --> 00:21:53,750
it on I<font color="#E5E5E5"> think every 64 architecture and</font>

444
00:21:48,970 --> 00:21:55,430
it is what it<font color="#E5E5E5"> does is it answers to you</font>

445
00:21:53,750 --> 00:21:59,360
would<font color="#CCCCCC"> or the kernel or whatever is in</font>

446
00:21:55,430 --> 00:22:02,720
the less privileged execution level and

447
00:21:59,360 --> 00:22:05,959
replies to<font color="#E5E5E5"> SMC calls with Jesus</font><font color="#CCCCCC"> arm</font>

448
00:22:02,720 --> 00:22:08,720
<font color="#CCCCCC">sander</font><font color="#E5E5E5"> and this calls</font><font color="#CCCCCC"> along</font><font color="#E5E5E5"> for example</font>

449
00:22:05,960 --> 00:22:10,340
to enable devices and so on<font color="#CCCCCC"> but actually</font>

450
00:22:08,720 --> 00:22:12,920
<font color="#E5E5E5">untrusted</font><font color="#CCCCCC"> Freeman does not do the job</font>

451
00:22:10,340 --> 00:22:15,350
<font color="#CCCCCC">really</font><font color="#E5E5E5"> but forward</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> requests to the</font>

452
00:22:12,920 --> 00:22:19,400
<font color="#CCCCCC">p.m. you using exiling</font><font color="#E5E5E5"> specifically yeah</font>

453
00:22:15,350 --> 00:22:21,500
<font color="#E5E5E5">so you need both of them and when for</font>

454
00:22:19,400 --> 00:22:23,900
example you<font color="#CCCCCC"> good or</font><font color="#E5E5E5"> the current tries to</font>

455
00:22:21,500 --> 00:22:26,660
enable<font color="#CCCCCC"> a device it will</font><font color="#E5E5E5"> ask ATF which in</font>

456
00:22:23,900 --> 00:22:32,060
turn has<font color="#E5E5E5"> to p.m. you and then the device</font>

457
00:22:26,660 --> 00:22:35,120
<font color="#E5E5E5">gets enabled</font><font color="#CCCCCC"> okay there are</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> were</font>

458
00:22:32,060 --> 00:22:36,460
close as I mentioned<font color="#E5E5E5"> earlier and there</font>

459
00:22:35,120 --> 00:22:39,310
are<font color="#E5E5E5"> two boot</font>

460
00:22:36,460 --> 00:22:43,420
<font color="#E5E5E5">also if you using the</font><font color="#CCCCCC"> xanies workflow</font>

461
00:22:39,310 --> 00:22:46,780
<font color="#CCCCCC">you you</font><font color="#E5E5E5"> are guided</font><font color="#CCCCCC"> to use this booth</font>

462
00:22:43,420 --> 00:22:47,800
flow where there are mainly three actors

463
00:22:46,780 --> 00:22:52,210
<font color="#E5E5E5">the PMU</font>

464
00:22:47,800 --> 00:22:54,190
the<font color="#E5E5E5"> big CSU and</font><font color="#CCCCCC"> the one of the</font>

465
00:22:52,210 --> 00:22:59,080
processors<font color="#E5E5E5"> for example the</font><font color="#CCCCCC"> a53</font><font color="#E5E5E5"> but it</font>

466
00:22:54,190 --> 00:23:01,960
could be the r5 as well<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> powerup</font>

467
00:22:59,080 --> 00:23:06,280
the<font color="#E5E5E5"> PMU wakes up and all it does is wake</font>

468
00:23:01,960 --> 00:23:08,800
up<font color="#E5E5E5"> the CSU the</font><font color="#CCCCCC"> CSU loads the first stage</font>

469
00:23:06,280 --> 00:23:15,450
<font color="#CCCCCC">motorola</font><font color="#E5E5E5"> is exciting specific</font><font color="#CCCCCC"> good</font>

470
00:23:08,800 --> 00:23:18,399
<font color="#E5E5E5">loader into memory to be executed by the</font>

471
00:23:15,450 --> 00:23:21,280
<font color="#CCCCCC">a53 processor for example</font><font color="#E5E5E5"> and it also</font>

472
00:23:18,400 --> 00:23:24,160
loads the<font color="#CCCCCC"> PA new femur</font><font color="#E5E5E5"> inside the</font><font color="#CCCCCC"> PMU so</font>

473
00:23:21,280 --> 00:23:27,580
it is where the PMU femur gets updated

474
00:23:24,160 --> 00:23:30,820
<font color="#E5E5E5">during boot</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> then the FSB al</font>

475
00:23:27,580 --> 00:23:33,159
loads from<font color="#CCCCCC"> the boot medium</font><font color="#E5E5E5"> the</font>

476
00:23:30,820 --> 00:23:37,210
configuration<font color="#CCCCCC"> object and send it to the</font>

477
00:23:33,160 --> 00:23:41,260
<font color="#CCCCCC">PMU and then atf and you would so this</font>

478
00:23:37,210 --> 00:23:44,040
way you<font color="#E5E5E5"> would can really start and go</font>

479
00:23:41,260 --> 00:23:51,220
through ATF and<font color="#E5E5E5"> here new to orbit</font><font color="#CCCCCC"> stuff</font>

480
00:23:44,040 --> 00:23:53,409
<font color="#CCCCCC">so it's quite complex okay in order to</font>

481
00:23:51,220 --> 00:23:57,310
build the pieces<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to go through</font>

482
00:23:53,410 --> 00:24:00,070
this this thing<font color="#E5E5E5"> you start from bravado</font>

483
00:23:57,310 --> 00:24:03,340
with your HDL design your FPGA design

484
00:24:00,070 --> 00:24:06,399
and it produces<font color="#E5E5E5"> an</font><font color="#CCCCCC"> hdf file which</font><font color="#E5E5E5"> means</font>

485
00:24:03,340 --> 00:24:10,120
<font color="#E5E5E5">hardware description file which in turn</font>

486
00:24:06,400 --> 00:24:12,970
you use to open the<font color="#CCCCCC"> exciting SDK and</font>

487
00:24:10,120 --> 00:24:16,449
based on how you configure the<font color="#E5E5E5"> other it</font>

488
00:24:12,970 --> 00:24:19,690
has<font color="#CCCCCC"> wizard to produce a few filmer a</font>

489
00:24:16,450 --> 00:24:22,240
first<font color="#E5E5E5"> a boot order each with its own DSP</font>

490
00:24:19,690 --> 00:24:26,380
<font color="#CCCCCC">its solar done with via wizard</font><font color="#E5E5E5"> so it's</font>

491
00:24:22,240 --> 00:24:28,330
<font color="#E5E5E5">very easy</font><font color="#CCCCCC"> and in the end they will</font>

492
00:24:26,380 --> 00:24:34,060
produce the two binaries for the<font color="#E5E5E5"> PMO</font>

493
00:24:28,330 --> 00:24:36,129
femur and the<font color="#E5E5E5"> FSB</font><font color="#CCCCCC"> al also the FSB lb SP</font>

494
00:24:34,060 --> 00:24:38,290
is the place where this file p.m.

495
00:24:36,130 --> 00:24:40,420
configuration object dot C will<font color="#CCCCCC"> be</font>

496
00:24:38,290 --> 00:24:44,409
created it is the configuration<font color="#CCCCCC"> object</font>

497
00:24:40,420 --> 00:24:45,630
to be fed<font color="#CCCCCC"> to the P</font><font color="#E5E5E5"> mu and so as you can</font>

498
00:24:44,410 --> 00:24:47,850
<font color="#E5E5E5">see</font><font color="#CCCCCC"> it's in</font>

499
00:24:45,630 --> 00:24:50,340
<font color="#E5E5E5">FSBO so it said the FSB and that owns</font>

500
00:24:47,850 --> 00:24:53,340
this configuration<font color="#CCCCCC"> all right</font>

501
00:24:50,340 --> 00:24:57,270
then<font color="#E5E5E5"> beta</font><font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> actually via internal</font>

502
00:24:53,340 --> 00:24:58,918
rules will build our team a new boot and

503
00:24:57,270 --> 00:25:03,020
<font color="#E5E5E5">all of</font><font color="#CCCCCC"> this along</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> the bit stream</font>

504
00:24:58,919 --> 00:25:06,030
for the<font color="#E5E5E5"> FPGA is fed to</font><font color="#CCCCCC"> the booty on tool</font>

505
00:25:03,020 --> 00:25:08,610
which will<font color="#E5E5E5"> produce the boot up inside</font>

506
00:25:06,030 --> 00:25:10,678
but the<font color="#CCCCCC"> beam is</font><font color="#E5E5E5"> the big file with all of</font>

507
00:25:08,610 --> 00:25:15,629
the things that<font color="#E5E5E5"> happen in boot before</font>

508
00:25:10,679 --> 00:25:17,730
<font color="#E5E5E5">the Linux kernel basically and it is put</font>

509
00:25:15,630 --> 00:25:22,380
on<font color="#E5E5E5"> your boot media for example</font><font color="#CCCCCC"> me SD</font>

510
00:25:17,730 --> 00:25:24,570
card and then the<font color="#E5E5E5"> hardware the</font><font color="#CCCCCC"> drum</font>

511
00:25:22,380 --> 00:25:27,270
<font color="#CCCCCC">roller which is</font><font color="#E5E5E5"> executed by sickness yes</font>

512
00:25:24,570 --> 00:25:32,580
you will load from the boot<font color="#E5E5E5"> being only</font>

513
00:25:27,270 --> 00:25:34,918
<font color="#CCCCCC">Oh gimme</font><font color="#E5E5E5"> femur and FS BL and then</font><font color="#CCCCCC"> f SPL</font>

514
00:25:32,580 --> 00:25:38,220
will open the file again<font color="#CCCCCC"> and extract all</font>

515
00:25:34,919 --> 00:25:42,120
all<font color="#E5E5E5"> of the rest to put them in</font><font color="#CCCCCC"> memory or</font>

516
00:25:38,220 --> 00:25:45,840
<font color="#E5E5E5">name so that's the</font><font color="#CCCCCC"> billfold with</font><font color="#E5E5E5"> exiling</font>

517
00:25:42,120 --> 00:25:48,090
<font color="#CCCCCC">workflow this</font><font color="#E5E5E5"> is some advantages it's</font>

518
00:25:45,840 --> 00:25:50,879
supported of<font color="#CCCCCC"> course</font><font color="#E5E5E5"> the silence tools</font>

519
00:25:48,090 --> 00:25:54,990
make it easy with<font color="#E5E5E5"> wizards and</font><font color="#CCCCCC"> cliques</font>

520
00:25:50,880 --> 00:25:57,929
and also the FSB<font color="#CCCCCC"> al code is very</font><font color="#E5E5E5"> simple</font>

521
00:25:54,990 --> 00:25:59,880
<font color="#CCCCCC">it's simple to understand how it</font><font color="#E5E5E5"> works</font>

522
00:25:57,929 --> 00:26:03,090
so if you want to understand<font color="#E5E5E5"> what's</font>

523
00:25:59,880 --> 00:26:05,280
going<font color="#CCCCCC"> on but on the other hand</font><font color="#E5E5E5"> it's not</font>

524
00:26:03,090 --> 00:26:07,530
optimized so it's super slow for example

525
00:26:05,280 --> 00:26:10,980
to load a relatively small<font color="#CCCCCC"> FPGA takes</font>

526
00:26:07,530 --> 00:26:14,039
like three seconds<font color="#E5E5E5"> which could be</font>

527
00:26:10,980 --> 00:26:16,140
optimized<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> the exciting</font>

528
00:26:14,039 --> 00:26:19,470
students<font color="#E5E5E5"> are we have a requirement</font>

529
00:26:16,140 --> 00:26:22,200
<font color="#CCCCCC">especially if you have continuous</font>

530
00:26:19,470 --> 00:26:27,900
integration<font color="#CCCCCC"> you have to install</font><font color="#E5E5E5"> them and</font>

531
00:26:22,200 --> 00:26:30,510
then they<font color="#E5E5E5"> are hard to automate so it</font><font color="#CCCCCC"> is</font>

532
00:26:27,900 --> 00:26:33,870
a little<font color="#E5E5E5"> bit cumbersome to use in some</font>

533
00:26:30,510 --> 00:26:36,510
cases and also<font color="#E5E5E5"> the proprietary</font><font color="#CCCCCC"> Boojum</font>

534
00:26:33,870 --> 00:26:40,500
tool is needed to generate<font color="#CCCCCC"> the boot with</font>

535
00:26:36,510 --> 00:26:43,559
all of this stuff<font color="#CCCCCC"> and finally it is flow</font>

536
00:26:40,500 --> 00:26:45,929
is completely different<font color="#CCCCCC"> from</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> built</font>

537
00:26:43,559 --> 00:26:49,230
flows<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you probably used on other</font>

538
00:26:45,929 --> 00:26:51,600
vendor socks so let's see what the

539
00:26:49,230 --> 00:26:56,730
alternative that the community has<font color="#CCCCCC"> come</font>

540
00:26:51,600 --> 00:26:59,879
up with and this one is the core of this

541
00:26:56,730 --> 00:27:01,890
alternative is that<font color="#E5E5E5"> we have to replace</font>

542
00:26:59,880 --> 00:27:06,090
the first<font color="#E5E5E5"> a</font><font color="#CCCCCC"> little order with something</font>

543
00:27:01,890 --> 00:27:08,909
else<font color="#E5E5E5"> because the</font><font color="#CCCCCC"> first table order to</font>

544
00:27:06,090 --> 00:27:12,330
<font color="#E5E5E5">meet it would</font><font color="#CCCCCC"> be produced</font><font color="#E5E5E5"> with the</font><font color="#CCCCCC"> Sally</font>

545
00:27:08,909 --> 00:27:14,220
specific tools and so we want to replace

546
00:27:12,330 --> 00:27:18,600
<font color="#CCCCCC">FSB L for performance and</font><font color="#E5E5E5"> for this</font>

547
00:27:14,220 --> 00:27:21,360
reason the<font color="#CCCCCC"> image the obvious</font><font color="#E5E5E5"> replacement</font>

548
00:27:18,600 --> 00:27:25,230
is<font color="#CCCCCC"> boot</font><font color="#E5E5E5"> SPL which does a very similar</font>

549
00:27:21,360 --> 00:27:29,219
thing but<font color="#CCCCCC"> there are a few obstacles to</font>

550
00:27:25,230 --> 00:27:32,880
this first is that with SPL<font color="#E5E5E5"> I cannot</font>

551
00:27:29,220 --> 00:27:35,070
load the injury like like the<font color="#E5E5E5"> FSB</font><font color="#CCCCCC"> L does</font>

552
00:27:32,880 --> 00:27:37,440
this is not an issue however because you

553
00:27:35,070 --> 00:27:40,500
would can load it and it's also a lot

554
00:27:37,440 --> 00:27:44,280
faster<font color="#E5E5E5"> than the FSB</font><font color="#CCCCCC"> L</font><font color="#E5E5E5"> is about</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> times</font>

555
00:27:40,500 --> 00:27:49,380
faster because it's optimized<font color="#CCCCCC"> the second</font>

556
00:27:44,280 --> 00:27:52,020
issue is<font color="#CCCCCC"> that the you would FSB L</font><font color="#E5E5E5"> well</font>

557
00:27:49,380 --> 00:27:54,780
<font color="#E5E5E5">load you would not aren't at the femur</font>

558
00:27:52,020 --> 00:27:57,809
<font color="#E5E5E5">so various architecture have various</font>

559
00:27:54,780 --> 00:27:59,870
<font color="#CCCCCC">things to to</font><font color="#E5E5E5"> achieve that and in this</font>

560
00:27:57,809 --> 00:28:04,649
case there's a trick to what you<font color="#CCCCCC"> get and</font>

561
00:27:59,870 --> 00:28:06,809
finally<font color="#CCCCCC"> a</font><font color="#E5E5E5"> Buddha PL cannot load the</font><font color="#CCCCCC"> P mu</font>

562
00:28:04,650 --> 00:28:10,559
former configuration object<font color="#E5E5E5"> so we'll get</font>

563
00:28:06,809 --> 00:28:12,780
to the second and third<font color="#E5E5E5"> point now</font><font color="#CCCCCC"> okay</font>

564
00:28:10,559 --> 00:28:16,010
to load our<font color="#E5E5E5"> satisfy</font><font color="#CCCCCC"> midi</font><font color="#E5E5E5"> the thing is</font>

565
00:28:12,780 --> 00:28:19,010
you would need say TF<font color="#CCCCCC"> but</font>

566
00:28:16,010 --> 00:28:21,139
took two SPL<font color="#CCCCCC"> mats mustard both for you</font>

567
00:28:19,010 --> 00:28:24,260
would to be able<font color="#E5E5E5"> to run and what happens</font>

568
00:28:21,139 --> 00:28:28,299
is there<font color="#CCCCCC"> is a trick to do this which is</font>

569
00:28:24,260 --> 00:28:31,908
<font color="#E5E5E5">in all the zinc impede</font><font color="#CCCCCC"> that configs</font>

570
00:28:28,299 --> 00:28:36,340
<font color="#CCCCCC">Falcone mode is enabled in SPL fighter</font>

571
00:28:31,909 --> 00:28:40,070
<font color="#E5E5E5">mode this is a mode which is meant to</font>

572
00:28:36,340 --> 00:28:42,500
achieve<font color="#E5E5E5"> a higher boot speed than with</font>

573
00:28:40,070 --> 00:28:45,200
<font color="#E5E5E5">regular you would so we what it does is</font>

574
00:28:42,500 --> 00:28:47,600
<font color="#E5E5E5">SPL loads directly the kernel and the</font>

575
00:28:45,200 --> 00:28:50,120
device<font color="#CCCCCC"> 3 in run and jump the kernel</font>

576
00:28:47,600 --> 00:28:52,789
completely bypassing<font color="#CCCCCC"> him boot to speed</font>

577
00:28:50,120 --> 00:28:55,158
up the boot but in this case it is

578
00:28:52,789 --> 00:28:58,940
configured<font color="#E5E5E5"> in such a way that the</font><font color="#CCCCCC"> dtb</font>

579
00:28:55,159 --> 00:29:01,490
image is called<font color="#E5E5E5"> you boot</font><font color="#CCCCCC"> bean and the</font>

580
00:28:58,940 --> 00:29:03,830
kernel image is called<font color="#CCCCCC"> arm trusted femur</font>

581
00:29:01,490 --> 00:29:05,659
<font color="#CCCCCC">you would</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> even</font><font color="#E5E5E5"> be so it takes its</font>

582
00:29:03,830 --> 00:29:07,309
loading kernel<font color="#E5E5E5"> plus need to be but in</font>

583
00:29:05,659 --> 00:29:13,730
the practice it is<font color="#E5E5E5"> load that you</font><font color="#CCCCCC"> put and</font>

584
00:29:07,309 --> 00:29:16,428
in yes<font color="#E5E5E5"> so this approach works</font><font color="#CCCCCC"> sorry this</font>

585
00:29:13,730 --> 00:29:19,039
approach<font color="#E5E5E5"> works but you lose the</font>

586
00:29:16,429 --> 00:29:20,720
<font color="#E5E5E5">possibility to use</font><font color="#CCCCCC"> fico mode to really</font>

587
00:29:19,039 --> 00:29:22,340
speed up the boot because you've already

588
00:29:20,720 --> 00:29:25,880
hijacked<font color="#E5E5E5"> it for something else</font>

589
00:29:22,340 --> 00:29:29,389
<font color="#CCCCCC">and ok it's a bit of a hack</font><font color="#E5E5E5"> but at least</font>

590
00:29:25,880 --> 00:29:30,649
it sold for us one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the problems the</font>

591
00:29:29,389 --> 00:29:33,709
<font color="#E5E5E5">other big</font><font color="#CCCCCC"> problem is</font><font color="#E5E5E5"> the configuration</font>

592
00:29:30,649 --> 00:29:36,979
<font color="#CCCCCC">object configuration object must</font><font color="#E5E5E5"> be</font>

593
00:29:33,710 --> 00:29:41,450
loaded into the<font color="#E5E5E5"> PM new firmware for it</font>

594
00:29:36,980 --> 00:29:43,429
to work<font color="#E5E5E5"> but there is no code in SPL to</font>

595
00:29:41,450 --> 00:29:47,889
do it first because nobody wrote it

596
00:29:43,429 --> 00:29:51,289
<font color="#E5E5E5">second because of license conflict and</font>

597
00:29:47,889 --> 00:29:54,350
so what happens is there<font color="#E5E5E5"> is work around</font>

598
00:29:51,289 --> 00:29:58,370
<font color="#E5E5E5">the it is the best work around</font><font color="#CCCCCC"> anti-node</font>

599
00:29:54,350 --> 00:30:00,080
<font color="#CCCCCC">off at the moment</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is you</font><font color="#E5E5E5"> take the</font>

600
00:29:58,370 --> 00:30:02,010
<font color="#E5E5E5">PM</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> configuration object as produced</font>

601
00:30:00,080 --> 00:30:05,129
by access decay and

602
00:30:02,010 --> 00:30:07,379
put it directly<font color="#E5E5E5"> in the TV you know</font><font color="#CCCCCC"> Vicki</font>

603
00:30:05,130 --> 00:30:09,360
a new<font color="#CCCCCC"> firmer and then modify the PMU</font>

604
00:30:07,380 --> 00:30:11,730
<font color="#CCCCCC">femur to load it directly at startup so</font>

605
00:30:09,360 --> 00:30:14,159
it's hard<font color="#CCCCCC"> put it inside the Primo</font><font color="#E5E5E5"> femur</font>

606
00:30:11,730 --> 00:30:16,590
it's very simple it<font color="#E5E5E5"> comes from the meta</font>

607
00:30:14,160 --> 00:30:19,470
topic layer that I mentioned<font color="#CCCCCC"> before it's</font>

608
00:30:16,590 --> 00:30:23,730
not<font color="#CCCCCC"> in my line not at the</font><font color="#E5E5E5"> moment</font><font color="#CCCCCC"> at</font>

609
00:30:19,470 --> 00:30:26,460
least<font color="#E5E5E5"> I mean not in the</font><font color="#CCCCCC"> main line with</font>

610
00:30:23,730 --> 00:30:30,360
<font color="#CCCCCC">tech signings bsp layer it might be in</font>

611
00:30:26,460 --> 00:30:33,120
the future<font color="#CCCCCC"> okay since understanding how</font>

612
00:30:30,360 --> 00:30:36,000
all of this<font color="#CCCCCC"> theme was a bit complex</font><font color="#E5E5E5"> and</font>

613
00:30:33,120 --> 00:30:39,270
took a lot<font color="#CCCCCC"> of time</font><font color="#E5E5E5"> I wrote</font><font color="#CCCCCC"> a very</font>

614
00:30:36,000 --> 00:30:43,710
trivial screen that does the very<font color="#E5E5E5"> needed</font>

615
00:30:39,270 --> 00:30:45,810
it's<font color="#E5E5E5"> this repository</font><font color="#CCCCCC"> it does</font><font color="#E5E5E5"> only three</font>

616
00:30:43,710 --> 00:30:49,290
things<font color="#E5E5E5"> take frost</font><font color="#CCCCCC"> Ong to build</font><font color="#E5E5E5"> a micro</font>

617
00:30:45,810 --> 00:30:53,010
<font color="#CCCCCC">based on chain fetch the PMU</font><font color="#E5E5E5"> former</font>

618
00:30:49,290 --> 00:30:55,170
sources and<font color="#CCCCCC"> Bill it so you it is to</font>

619
00:30:53,010 --> 00:30:59,160
understand how the<font color="#CCCCCC"> PM ever gets</font><font color="#E5E5E5"> built</font>

620
00:30:55,170 --> 00:31:01,920
and it allows<font color="#E5E5E5"> to use it without having</font>

621
00:30:59,160 --> 00:31:04,950
<font color="#E5E5E5">to set up all the</font><font color="#CCCCCC"> Yocto machinery our</font>

622
00:31:01,920 --> 00:31:07,830
rules to<font color="#CCCCCC"> do it so this approach works</font>

623
00:31:04,950 --> 00:31:09,660
<font color="#E5E5E5">which is good on</font><font color="#CCCCCC"> the other hand it</font>

624
00:31:07,830 --> 00:31:13,500
forces you to<font color="#CCCCCC"> remain the</font><font color="#E5E5E5"> premier femur</font>

625
00:31:09,660 --> 00:31:17,130
every time you change<font color="#E5E5E5"> your configuration</font>

626
00:31:13,500 --> 00:31:19,290
in the in the core things but anyway<font color="#E5E5E5"> you</font>

627
00:31:17,130 --> 00:31:21,780
would have to reveal the FSB<font color="#CCCCCC"> L with</font>

628
00:31:19,290 --> 00:31:26,040
excellence for<font color="#E5E5E5"> so it's not very much</font>

629
00:31:21,780 --> 00:31:28,350
<font color="#CCCCCC">different</font><font color="#E5E5E5"> okay so the boot sequence with</font>

630
00:31:26,040 --> 00:31:30,659
<font color="#CCCCCC">the community</font><font color="#E5E5E5"> workflow becomes this one</font>

631
00:31:28,350 --> 00:31:35,459
it<font color="#E5E5E5"> is very similar to the other one but</font>

632
00:31:30,660 --> 00:31:38,700
<font color="#E5E5E5">the differences are SPL is loaded</font>

633
00:31:35,460 --> 00:31:40,200
instead of the FS million so it's just

634
00:31:38,700 --> 00:31:42,450
another<font color="#E5E5E5"> piece of code doing similar</font>

635
00:31:40,200 --> 00:31:45,510
things<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> configuration object is</font>

636
00:31:42,450 --> 00:31:47,730
not loaded by the SPL<font color="#E5E5E5"> it's hard-coded</font>

637
00:31:45,510 --> 00:31:52,800
directly in the<font color="#E5E5E5"> PMO framework there are</font>

638
00:31:47,730 --> 00:31:55,820
still is all identical<font color="#E5E5E5"> okay but that's</font>

639
00:31:52,800 --> 00:32:01,740
<font color="#E5E5E5">not all</font><font color="#CCCCCC"> we also need</font><font color="#E5E5E5"> something else</font>

640
00:31:55,820 --> 00:32:04,379
<font color="#E5E5E5">because well what you do in the in</font><font color="#CCCCCC"> Impa</font>

641
00:32:01,740 --> 00:32:08,130
<font color="#CCCCCC">Vado you configure lots of devices</font>

642
00:32:04,380 --> 00:32:11,280
and in all of<font color="#E5E5E5"> this</font><font color="#CCCCCC"> hard</font><font color="#E5E5E5"> silicon part and</font>

643
00:32:08,130 --> 00:32:14,730
<font color="#CCCCCC">that results not</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> PA new</font>

644
00:32:11,280 --> 00:32:18,270
thermal configuration object but also<font color="#E5E5E5"> in</font>

645
00:32:14,730 --> 00:32:21,980
a file<font color="#E5E5E5"> that is called PSU in</font><font color="#CCCCCC"> each JPL</font>

646
00:32:18,270 --> 00:32:27,150
<font color="#CCCCCC">well two files X varies</font><font color="#E5E5E5"> dot</font><font color="#CCCCCC"> co dot</font><font color="#E5E5E5"> H and</font>

647
00:32:21,980 --> 00:32:29,940
<font color="#CCCCCC">this</font><font color="#E5E5E5"> this need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be applied it's</font>

648
00:32:27,150 --> 00:32:32,370
basically a long list of<font color="#CCCCCC"> register</font>

649
00:32:29,940 --> 00:32:35,250
<font color="#CCCCCC">settings so it said advance of register</font>

650
00:32:32,370 --> 00:32:39,510
to set pin muxing<font color="#E5E5E5"> pls beans and the</font>

651
00:32:35,250 --> 00:32:42,140
SDRAM controller and so on this file<font color="#E5E5E5"> e</font>

652
00:32:39,510 --> 00:32:44,640
<font color="#E5E5E5">can be obtained this weight when you</font>

653
00:32:42,140 --> 00:32:47,669
<font color="#E5E5E5">you've done your design with Vivid or</font>

654
00:32:44,640 --> 00:32:49,799
you can just do file export export

655
00:32:47,669 --> 00:32:52,320
<font color="#E5E5E5">hardware it will create the</font><font color="#CCCCCC"> HTF file</font>

656
00:32:49,799 --> 00:32:55,950
which is actually a zip file<font color="#E5E5E5"> you extract</font>

657
00:32:52,320 --> 00:32:57,570
it and you get these two files<font color="#E5E5E5"> you put</font>

658
00:32:55,950 --> 00:32:59,669
them in the<font color="#E5E5E5"> you good sources in this</font>

659
00:32:57,570 --> 00:33:02,460
directory you also have<font color="#E5E5E5"> to make sure</font>

660
00:32:59,669 --> 00:33:05,210
<font color="#CCCCCC">that it the those are built</font><font color="#E5E5E5"> and not the</font>

661
00:33:02,460 --> 00:33:07,980
other ones that wood<font color="#CCCCCC"> has for some words</font>

662
00:33:05,210 --> 00:33:09,750
<font color="#CCCCCC">and so that's it when you've done with</font>

663
00:33:07,980 --> 00:33:12,600
that you have<font color="#E5E5E5"> a new boot that at boot</font>

664
00:33:09,750 --> 00:33:15,480
will set all of<font color="#E5E5E5"> those registers and they</font>

665
00:33:12,600 --> 00:33:18,870
will they will work so it there are no

666
00:33:15,480 --> 00:33:21,000
in part of it<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you have to launch</font>

667
00:33:18,870 --> 00:33:23,158
the whole<font color="#CCCCCC"> access decay manually to</font>

668
00:33:21,000 --> 00:33:26,400
produce a file<font color="#E5E5E5"> just</font><font color="#CCCCCC"> to obtain a single</font>

669
00:33:23,159 --> 00:33:32,330
<font color="#E5E5E5">dot C file</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> the rest of the of the</font>

670
00:33:26,400 --> 00:33:35,340
build<font color="#E5E5E5"> process is maybe a</font><font color="#CCCCCC"> little simpler</font>

671
00:33:32,330 --> 00:33:38,908
<font color="#E5E5E5">so it starts in</font><font color="#CCCCCC"> the same way with Vivid</font>

672
00:33:35,340 --> 00:33:42,260
or producing the<font color="#CCCCCC"> HTF file and from that</font>

673
00:33:38,909 --> 00:33:45,210
<font color="#CCCCCC">you can launch</font><font color="#E5E5E5"> the access decay which</font>

674
00:33:42,260 --> 00:33:50,330
you only use to launch the wizard

675
00:33:45,210 --> 00:33:54,030
<font color="#CCCCCC">produce the</font><font color="#E5E5E5"> FS</font><font color="#CCCCCC"> miel BSP and take the PM</font>

676
00:33:50,330 --> 00:33:57,480
configuration object dot<font color="#CCCCCC"> c</font><font color="#E5E5E5"> file dot</font><font color="#CCCCCC"> c is</font>

677
00:33:54,030 --> 00:33:58,860
missing<font color="#CCCCCC"> okay from</font><font color="#E5E5E5"> there and that's</font><font color="#CCCCCC"> it</font>

678
00:33:57,480 --> 00:34:00,490
then you can<font color="#E5E5E5"> throw away everything</font>

679
00:33:58,860 --> 00:34:03,939
produced<font color="#E5E5E5"> by excess decay</font>

680
00:34:00,490 --> 00:34:06,070
and the build process is entirely done

681
00:34:03,940 --> 00:34:08,460
by<font color="#CCCCCC"> Yocto in this case and it will be</font>

682
00:34:06,070 --> 00:34:12,219
that quite standard<font color="#CCCCCC"> an</font><font color="#E5E5E5"> artist</font><font color="#CCCCCC"> a former</font>

683
00:34:08,460 --> 00:34:15,639
and new boot<font color="#E5E5E5"> actually it will be the</font>

684
00:34:12,219 --> 00:34:18,459
<font color="#E5E5E5">piano</font><font color="#CCCCCC"> femur</font><font color="#E5E5E5"> along with its micro</font><font color="#CCCCCC"> bristol</font>

685
00:34:15,639 --> 00:34:21,310
chain which links<font color="#CCCCCC"> the PMU configuration</font>

686
00:34:18,460 --> 00:34:26,230
object and finally<font color="#E5E5E5"> the</font><font color="#CCCCCC"> you boot rules</font>

687
00:34:21,310 --> 00:34:28,840
can produce the of course the you<font color="#E5E5E5"> would</font>

688
00:34:26,230 --> 00:34:31,149
<font color="#CCCCCC">prefer</font><font color="#E5E5E5"> the SPL and then they can produce</font>

689
00:34:28,840 --> 00:34:34,980
a minimal boot not being that only

690
00:34:31,149 --> 00:34:38,710
contains<font color="#E5E5E5"> the SPL and which is the</font>

691
00:34:34,980 --> 00:34:40,119
<font color="#CCCCCC">Buddhist</font><font color="#E5E5E5"> pl and the</font><font color="#CCCCCC"> PMU</font><font color="#E5E5E5"> flavor itself</font><font color="#CCCCCC"> it</font>

692
00:34:38,710 --> 00:34:43,899
doesn't<font color="#CCCCCC"> contain all of the other pieces</font>

693
00:34:40,119 --> 00:34:46,000
<font color="#E5E5E5">and it doesn't do fancy features just</font>

694
00:34:43,899 --> 00:34:50,049
like encryption<font color="#CCCCCC"> and similar so it's very</font>

695
00:34:46,000 --> 00:34:53,739
<font color="#CCCCCC">minimal to this use case in the end you</font>

696
00:34:50,050 --> 00:34:57,640
<font color="#E5E5E5">have just to put on your boot</font><font color="#CCCCCC"> menu all</font>

697
00:34:53,739 --> 00:35:01,990
of those files because the other files

698
00:34:57,640 --> 00:35:05,100
are accessed by<font color="#E5E5E5"> SPL</font><font color="#CCCCCC"> and that's it</font><font color="#E5E5E5"> so in</font>

699
00:35:01,990 --> 00:35:10,899
this way you<font color="#E5E5E5"> can have</font><font color="#CCCCCC"> a complete build</font>

700
00:35:05,100 --> 00:35:18,220
<font color="#E5E5E5">which boots and works it is one of</font><font color="#CCCCCC"> the</font>

701
00:35:10,900 --> 00:35:22,540
two main approaches so the 3 4 booty<font color="#CCCCCC"> the</font>

702
00:35:18,220 --> 00:35:25,959
next chapter is about<font color="#E5E5E5"> the GPU this</font>

703
00:35:22,540 --> 00:35:28,180
system of<font color="#CCCCCC"> Jeep as a GPU which is very</font>

704
00:35:25,960 --> 00:35:30,670
interesting<font color="#E5E5E5"> which makes it very very</font>

705
00:35:28,180 --> 00:35:32,710
interesting<font color="#E5E5E5"> but the CPU is an</font><font color="#CCCCCC"> hour</font>

706
00:35:30,670 --> 00:35:35,859
<font color="#CCCCCC">mali-400 which is very sad</font>

707
00:35:32,710 --> 00:35:41,650
<font color="#CCCCCC">because it has very bad support I think</font>

708
00:35:35,859 --> 00:35:44,049
<font color="#CCCCCC">it's likely the worst one in in terms</font><font color="#E5E5E5"> of</font>

709
00:35:41,650 --> 00:35:47,560
software support<font color="#CCCCCC"> that's because it</font>

710
00:35:44,050 --> 00:35:50,369
requires<font color="#CCCCCC"> the</font><font color="#E5E5E5"> binary blob which makes</font>

711
00:35:47,560 --> 00:35:56,380
things always<font color="#E5E5E5"> a</font><font color="#CCCCCC"> little bit complex and</font>

712
00:35:50,369 --> 00:35:57,680
annoying so basically the<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> the</font>

713
00:35:56,380 --> 00:36:00,079
<font color="#E5E5E5">only option</font>

714
00:35:57,680 --> 00:36:02,720
<font color="#E5E5E5">there are two open source alternatives</font>

715
00:36:00,079 --> 00:36:07,069
one is the<font color="#CCCCCC"> de Lima driver the reverse</font>

716
00:36:02,720 --> 00:36:08,808
engineering<font color="#E5E5E5"> project that has done a lot</font>

717
00:36:07,069 --> 00:36:11,558
of the reverse<font color="#E5E5E5"> engineering work but has</font>

718
00:36:08,809 --> 00:36:14,599
never<font color="#E5E5E5"> reached a real usability or</font>

719
00:36:11,559 --> 00:36:18,470
<font color="#E5E5E5">complete projects and is now abandoned</font><font color="#CCCCCC"> I</font>

720
00:36:14,599 --> 00:36:20,720
think the other is the major Lima

721
00:36:18,470 --> 00:36:23,270
project it is quite a new project

722
00:36:20,720 --> 00:36:26,480
started<font color="#E5E5E5"> I think last year and it's</font>

723
00:36:23,270 --> 00:36:30,319
advancing<font color="#E5E5E5"> not super fast but steadily</font>

724
00:36:26,480 --> 00:36:33,020
<font color="#E5E5E5">and so it may be that at some point we</font>

725
00:36:30,319 --> 00:36:36,259
have an open-source driver for this for

726
00:36:33,020 --> 00:36:38,750
these GPU<font color="#E5E5E5"> although at the moment</font><font color="#CCCCCC"> I think</font>

727
00:36:36,260 --> 00:36:41,720
<font color="#E5E5E5">it's really just for do some simple</font>

728
00:36:38,750 --> 00:36:44,660
rendering<font color="#E5E5E5"> not yet ready for for complex</font>

729
00:36:41,720 --> 00:36:48,859
applications so let's see how<font color="#E5E5E5"> you do</font>

730
00:36:44,660 --> 00:36:50,779
things in the<font color="#E5E5E5"> only possible way so</font><font color="#CCCCCC"> you</font>

731
00:36:48,859 --> 00:36:53,569
<font color="#CCCCCC">have to use two components there is a</font>

732
00:36:50,779 --> 00:36:56,779
kernel driver which is GPL<font color="#E5E5E5"> but it's not</font>

733
00:36:53,569 --> 00:37:00,230
in many line<font color="#E5E5E5"> one of the issues with this</font>

734
00:36:56,779 --> 00:37:02,599
driver<font color="#E5E5E5"> is it does not</font><font color="#CCCCCC"> match actually</font><font color="#E5E5E5"> all</font>

735
00:37:00,230 --> 00:37:05,180
of<font color="#E5E5E5"> the real work is in the user space</font>

736
00:37:02,599 --> 00:37:07,039
<font color="#E5E5E5">library</font><font color="#CCCCCC"> all the</font><font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> stuff is</font>

737
00:37:05,180 --> 00:37:10,149
done in the user<font color="#CCCCCC"> space library</font><font color="#E5E5E5"> which is</font>

738
00:37:07,039 --> 00:37:14,650
<font color="#E5E5E5">the binary</font><font color="#CCCCCC"> god that you</font><font color="#E5E5E5"> have to use and</font>

739
00:37:10,150 --> 00:37:17,119
which implements<font color="#E5E5E5"> the OpenGL ES API so</font>

740
00:37:14,650 --> 00:37:20,720
every<font color="#E5E5E5"> other application is based on top</font>

741
00:37:17,119 --> 00:37:22,940
of that<font color="#CCCCCC"> also this library is</font><font color="#E5E5E5"> sock</font>

742
00:37:20,720 --> 00:37:26,899
specific so<font color="#E5E5E5"> you cannot reuse the library</font>

743
00:37:22,940 --> 00:37:31,490
<font color="#E5E5E5">from other processors so you have to use</font>

744
00:37:26,900 --> 00:37:34,130
the one<font color="#CCCCCC"> from sidings to build this</font>

745
00:37:31,490 --> 00:37:36,828
compose the two components well the the

746
00:37:34,130 --> 00:37:38,990
kernel module is<font color="#E5E5E5"> very simple there is</font><font color="#CCCCCC"> a</font>

747
00:37:36,829 --> 00:37:41,390
<font color="#CCCCCC">Yocto recipe on the matrix islands BSP</font>

748
00:37:38,990 --> 00:37:44,839
which just download the source<font color="#CCCCCC"> farm</font>

749
00:37:41,390 --> 00:37:47,720
<font color="#E5E5E5">and applies ten patches and then it it</font>

750
00:37:44,839 --> 00:37:49,910
<font color="#E5E5E5">means just fine</font><font color="#CCCCCC"> I have it</font><font color="#E5E5E5"> looking into</font>

751
00:37:47,720 --> 00:37:53,899
detail into<font color="#CCCCCC"> it because</font><font color="#E5E5E5"> it worked at the</font>

752
00:37:49,910 --> 00:37:57,140
<font color="#E5E5E5">first attempt</font><font color="#CCCCCC"> the other part is the</font>

753
00:37:53,900 --> 00:38:00,049
<font color="#CCCCCC">users page</font><font color="#E5E5E5"> library which is more complex</font>

754
00:37:57,140 --> 00:38:01,480
<font color="#E5E5E5">first of all you have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> find it it's</font>

755
00:38:00,049 --> 00:38:03,060
<font color="#E5E5E5">not in the</font>

756
00:38:01,480 --> 00:38:06,780
[Music]

757
00:38:03,060 --> 00:38:10,380
master branch<font color="#E5E5E5"> for matrix</font><font color="#CCCCCC"> aliens base</font><font color="#E5E5E5"> B</font>

758
00:38:06,780 --> 00:38:12,990
it is only in the<font color="#E5E5E5"> sightings for which is</font>

759
00:38:10,380 --> 00:38:16,290
on github<font color="#CCCCCC"> so if you want</font><font color="#E5E5E5"> to stay on the</font>

760
00:38:12,990 --> 00:38:20,669
master<font color="#E5E5E5"> branch working on that</font><font color="#CCCCCC"> you can</font>

761
00:38:16,290 --> 00:38:25,200
just take the<font color="#CCCCCC"> recipe from the the most</font>

762
00:38:20,670 --> 00:38:26,850
<font color="#E5E5E5">recent is the</font><font color="#CCCCCC"> rail</font><font color="#E5E5E5"> V 2017 dot for layer</font>

763
00:38:25,200 --> 00:38:30,779
you take the recipe<font color="#CCCCCC"> from there copy it</font>

764
00:38:26,850 --> 00:38:35,339
in your own layer and that's<font color="#CCCCCC"> okay work</font>

765
00:38:30,780 --> 00:38:37,890
without any modifications now that you

766
00:38:35,340 --> 00:38:40,050
<font color="#E5E5E5">have your recipe</font><font color="#CCCCCC"> you run it and</font><font color="#E5E5E5"> it fails</font>

767
00:38:37,890 --> 00:38:42,600
<font color="#E5E5E5">because</font><font color="#CCCCCC"> you cannot download the sources</font>

768
00:38:40,050 --> 00:38:47,550
<font color="#E5E5E5">in fact the URL to download the sources</font>

769
00:38:42,600 --> 00:38:50,580
is from this<font color="#E5E5E5"> this domain which is</font><font color="#CCCCCC"> not</font>

770
00:38:47,550 --> 00:38:53,100
accessible<font color="#CCCCCC"> it appears to be an internal</font>

771
00:38:50,580 --> 00:38:55,610
repository for<font color="#E5E5E5"> signing so you cannot</font>

772
00:38:53,100 --> 00:38:58,049
download from that so you go<font color="#CCCCCC"> into</font><font color="#E5E5E5"> the</font>

773
00:38:55,610 --> 00:39:01,500
documentation and there is a<font color="#E5E5E5"> readme file</font>

774
00:38:58,050 --> 00:39:04,710
in the<font color="#CCCCCC"> along with</font><font color="#E5E5E5"> the with the recipe</font>

775
00:39:01,500 --> 00:39:06,630
<font color="#E5E5E5">and it does you have</font><font color="#CCCCCC"> to register</font><font color="#E5E5E5"> on the</font>

776
00:39:04,710 --> 00:39:11,100
<font color="#E5E5E5">excellent website download the tarball</font>

777
00:39:06,630 --> 00:39:13,350
and open the<font color="#CCCCCC"> tarball there is some</font>

778
00:39:11,100 --> 00:39:14,850
instructions<font color="#E5E5E5"> and a second</font><font color="#CCCCCC"> tarball</font><font color="#E5E5E5"> and</font>

779
00:39:13,350 --> 00:39:16,650
then you have to<font color="#E5E5E5"> extract the second</font>

780
00:39:14,850 --> 00:39:20,880
<font color="#E5E5E5">terrible and which contains the third</font>

781
00:39:16,650 --> 00:39:24,360
<font color="#CCCCCC">power mode and yeah</font><font color="#E5E5E5"> that's all then</font><font color="#CCCCCC"> your</font>

782
00:39:20,880 --> 00:39:26,820
only<font color="#CCCCCC"> three</font><font color="#E5E5E5"> we are almost</font><font color="#CCCCCC"> finished</font>

783
00:39:24,360 --> 00:39:30,120
they eat the<font color="#E5E5E5"> turbo turbo when you're</font>

784
00:39:26,820 --> 00:39:33,000
starting<font color="#E5E5E5"> extract</font><font color="#CCCCCC"> it look like a</font><font color="#E5E5E5"> very</font>

785
00:39:30,120 --> 00:39:35,640
triple<font color="#E5E5E5"> and in fact it is it is basically</font>

786
00:39:33,000 --> 00:39:38,190
the thing that with<font color="#E5E5E5"> baked downloads in</font>

787
00:39:35,640 --> 00:39:40,500
the<font color="#E5E5E5"> download directory probably has been</font>

788
00:39:38,190 --> 00:39:43,140
taken as<font color="#CCCCCC"> ease put in</font><font color="#E5E5E5"> at our wall in the</font>

789
00:39:40,500 --> 00:39:45,390
<font color="#CCCCCC">filter volts and then you have to put it</font>

790
00:39:43,140 --> 00:39:49,410
in some random directory that<font color="#E5E5E5"> you want</font>

791
00:39:45,390 --> 00:39:52,470
and<font color="#CCCCCC"> point source mirror URL in your</font>

792
00:39:49,410 --> 00:39:54,750
local comes to this path<font color="#CCCCCC"> so that Yocto</font>

793
00:39:52,470 --> 00:39:59,100
will find it as if it had<font color="#CCCCCC"> downloaded it</font>

794
00:39:54,750 --> 00:40:01,140
and then things<font color="#E5E5E5"> will work so a slight</font>

795
00:39:59,100 --> 00:40:03,960
simplification<font color="#CCCCCC"> on</font><font color="#E5E5E5"> this well I basically</font>

796
00:40:01,140 --> 00:40:06,150
wrote a stupid<font color="#E5E5E5"> script</font><font color="#CCCCCC"> to do all of these</font>

797
00:40:03,960 --> 00:40:07,740
steps<font color="#CCCCCC"> because you have to redo it</font>

798
00:40:06,150 --> 00:40:10,950
<font color="#E5E5E5">whenever you want to operate the library</font>

799
00:40:07,740 --> 00:40:15,930
<font color="#E5E5E5">or whenever you</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> trap a new with</font>

800
00:40:10,950 --> 00:40:18,540
development machine but I also choose to

801
00:40:15,930 --> 00:40:21,000
down extract it in the main download

802
00:40:18,540 --> 00:40:23,490
dear<font color="#E5E5E5"> form it makes</font><font color="#CCCCCC"> why at least I can</font>

803
00:40:21,000 --> 00:40:26,850
skip the<font color="#E5E5E5"> last step and leave source</font><font color="#CCCCCC"> view</font>

804
00:40:23,490 --> 00:40:30,390
<font color="#E5E5E5">for what it's meant for when</font><font color="#CCCCCC"> you're done</font>

805
00:40:26,850 --> 00:40:31,830
with that<font color="#E5E5E5"> you can use it in two ways</font>

806
00:40:30,390 --> 00:40:35,460
because there<font color="#E5E5E5"> are actually two different</font>

807
00:40:31,830 --> 00:40:37,890
libraries one is to use<font color="#E5E5E5"> with a PDF with</font>

808
00:40:35,460 --> 00:40:42,170
<font color="#E5E5E5">the frame buffer and the other one is X</font>

809
00:40:37,890 --> 00:40:47,250
11 and<font color="#CCCCCC"> ok the frame buffer version</font>

810
00:40:42,170 --> 00:40:51,000
<font color="#E5E5E5">actually works for normal needs of many</font>

811
00:40:47,250 --> 00:40:53,760
embedded systems like running a<font color="#CCCCCC"> unity</font><font color="#E5E5E5"> or</font>

812
00:40:51,000 --> 00:40:56,940
human application on a single screen<font color="#CCCCCC"> it</font>

813
00:40:53,760 --> 00:40:57,950
works<font color="#E5E5E5"> but forget</font><font color="#CCCCCC"> multi screen it</font><font color="#E5E5E5"> doesn't</font>

814
00:40:56,940 --> 00:41:00,990
work

815
00:40:57,950 --> 00:41:02,339
apparently the<font color="#E5E5E5"> nice definition is Nero</font>

816
00:41:00,990 --> 00:41:05,419
<font color="#E5E5E5">hard</font><font color="#CCCCCC"> core during the library so you</font>

817
00:41:02,340 --> 00:41:10,680
cannot use<font color="#E5E5E5"> more than one screen</font>

818
00:41:05,420 --> 00:41:12,960
so we tried<font color="#E5E5E5"> x11 the x11 version but we</font>

819
00:41:10,680 --> 00:41:14,690
couldn't make multi-screen work with

820
00:41:12,960 --> 00:41:19,170
that<font color="#E5E5E5"> one as well</font>

821
00:41:14,690 --> 00:41:21,510
<font color="#CCCCCC">not sure why exactly but qml with the</font>

822
00:41:19,170 --> 00:41:25,260
software renderer works fine<font color="#E5E5E5"> with multi</font>

823
00:41:21,510 --> 00:41:27,900
screen while the the<font color="#CCCCCC"> accelerated one</font>

824
00:41:25,260 --> 00:41:32,820
does not work so I don't<font color="#CCCCCC"> know exactly</font>

825
00:41:27,900 --> 00:41:34,440
<font color="#E5E5E5">about</font><font color="#CCCCCC"> that but that's</font><font color="#E5E5E5"> it at least</font>

826
00:41:32,820 --> 00:41:39,890
<font color="#CCCCCC">waiting</font><font color="#E5E5E5"> for an open source alternative</font>

827
00:41:34,440 --> 00:41:44,040
<font color="#E5E5E5">and that's all for the for the GPU and</font>

828
00:41:39,890 --> 00:41:50,490
<font color="#E5E5E5">let's go to the video codec unit this is</font>

829
00:41:44,040 --> 00:41:52,740
what this is<font color="#E5E5E5"> so</font><font color="#CCCCCC"> what happens here</font><font color="#E5E5E5"> is</font>

830
00:41:50,490 --> 00:41:57,870
there is<font color="#CCCCCC"> this video</font><font color="#E5E5E5"> codec unit which is</font>

831
00:41:52,740 --> 00:42:01,470
an h.264 and h.265 in hardware it's able

832
00:41:57,870 --> 00:42:03,080
<font color="#CCCCCC">to do like</font><font color="#E5E5E5"> 14 at 60fps so it's quite</font>

833
00:42:01,470 --> 00:42:05,910
powerful

834
00:42:03,080 --> 00:42:08,580
<font color="#CCCCCC">the interesting thing it is not</font>

835
00:42:05,910 --> 00:42:10,799
connected<font color="#CCCCCC"> to</font><font color="#E5E5E5"> an interconnect is floating</font>

836
00:42:08,580 --> 00:42:14,610
in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> middle of the</font><font color="#E5E5E5"> FPGA so</font><font color="#CCCCCC"> you have to</font>

837
00:42:10,800 --> 00:42:16,650
wire it inside the FPGA to use it which

838
00:42:14,610 --> 00:42:20,190
I think<font color="#CCCCCC"> it makes</font><font color="#E5E5E5"> it a little bit more</font>

839
00:42:16,650 --> 00:42:23,960
flexible well anyway this<font color="#E5E5E5"> is not</font><font color="#CCCCCC"> a big</font>

840
00:42:20,190 --> 00:42:28,200
deal it's quite quite fast to<font color="#E5E5E5"> do and</font>

841
00:42:23,960 --> 00:42:30,270
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> whole stack to use it from</font>

842
00:42:28,200 --> 00:42:33,089
starting bottom up

843
00:42:30,270 --> 00:42:34,140
there's the<font color="#CCCCCC"> PCU itself</font><font color="#E5E5E5"> which needs a</font>

844
00:42:33,090 --> 00:42:37,920
<font color="#E5E5E5">firmer</font>

845
00:42:34,140 --> 00:42:40,710
which is a binary blob<font color="#E5E5E5"> from Tydings</font><font color="#CCCCCC"> then</font>

846
00:42:37,920 --> 00:42:43,560
you have the kernel driver you have<font color="#E5E5E5"> used</font>

847
00:42:40,710 --> 00:42:47,550
<font color="#E5E5E5">the space library and implementation</font>

848
00:42:43,560 --> 00:42:49,740
layer for open locks<font color="#E5E5E5"> all of these three</font>

849
00:42:47,550 --> 00:42:51,860
are provided by exciting<font color="#CCCCCC"> suite sources</font>

850
00:42:49,740 --> 00:42:54,779
with the<font color="#E5E5E5"> same license which is</font>

851
00:42:51,860 --> 00:42:58,650
permissive<font color="#E5E5E5"> but restricted to</font><font color="#CCCCCC"> silence</font>

852
00:42:54,780 --> 00:43:02,490
hardware<font color="#CCCCCC"> okay and then well open max as</font>

853
00:42:58,650 --> 00:43:06,000
far as I knew implementing in the<font color="#CCCCCC"> eyes</font>

854
00:43:02,490 --> 00:43:08,879
to<font color="#E5E5E5"> interface to</font><font color="#CCCCCC"> web codec</font><font color="#E5E5E5"> and so you can</font>

855
00:43:06,000 --> 00:43:11,610
use<font color="#E5E5E5"> it directly probably but I think the</font>

856
00:43:08,880 --> 00:43:13,950
most common<font color="#E5E5E5"> usage is to use this trimmer</font>

857
00:43:11,610 --> 00:43:16,700
instruments as an open<font color="#CCCCCC"> maps plug-in</font><font color="#E5E5E5"> so</font>

858
00:43:13,950 --> 00:43:21,799
you can just put<font color="#CCCCCC"> an open</font><font color="#E5E5E5"> max</font>

859
00:43:16,700 --> 00:43:25,529
<font color="#E5E5E5">x264 encoder</font><font color="#CCCCCC"> in your district</font><font color="#E5E5E5"> I plain</font>

860
00:43:21,800 --> 00:43:27,960
okay so to instantiate the<font color="#E5E5E5"> VC you you</font>

861
00:43:25,530 --> 00:43:30,900
have to put<font color="#E5E5E5"> a block</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> vivid or just</font>

862
00:43:27,960 --> 00:43:32,970
like me<font color="#CCCCCC"> using</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> block it's not</font>

863
00:43:30,900 --> 00:43:35,850
really being synthesized in FPGA

864
00:43:32,970 --> 00:43:38,240
<font color="#E5E5E5">but it represents how it should be</font>

865
00:43:35,850 --> 00:43:41,100
connected<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the rest</font><font color="#CCCCCC"> of the world and</font>

866
00:43:38,240 --> 00:43:43,560
then<font color="#E5E5E5"> you have to set up device three</font><font color="#CCCCCC"> and</font>

867
00:43:41,100 --> 00:43:48,720
<font color="#CCCCCC">three in Linux which</font><font color="#E5E5E5"> is standard nothing</font>

868
00:43:43,560 --> 00:43:51,520
special here<font color="#E5E5E5"> okay and then you have</font><font color="#CCCCCC"> to</font>

869
00:43:48,720 --> 00:43:54,859
set up all<font color="#CCCCCC"> of the software</font>

870
00:43:51,520 --> 00:43:58,280
the<font color="#CCCCCC"> oldest software is only</font><font color="#E5E5E5"> in the meter</font>

871
00:43:54,860 --> 00:44:01,610
<font color="#E5E5E5">petal</font><font color="#CCCCCC"> UNIX layer</font><font color="#E5E5E5"> not in the matrix Alex</font>

872
00:43:58,280 --> 00:44:04,340
bsp layer which is a layer<font color="#E5E5E5"> that you are</font>

873
00:44:01,610 --> 00:44:08,150
not supposed<font color="#CCCCCC"> to used with the with the</font>

874
00:44:04,340 --> 00:44:11,030
community<font color="#E5E5E5"> workflow so I tried to you to</font>

875
00:44:08,150 --> 00:44:16,250
use this layer<font color="#CCCCCC"> just to have the VCU</font>

876
00:44:11,030 --> 00:44:19,340
support and I lost a few days in<font color="#E5E5E5"> making</font>

877
00:44:16,250 --> 00:44:22,160
my head<font color="#E5E5E5"> after all I understood it was</font>

878
00:44:19,340 --> 00:44:25,070
<font color="#E5E5E5">better not to do it the the reason</font><font color="#CCCCCC"> is</font>

879
00:44:22,160 --> 00:44:25,549
that<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> losing</font><font color="#E5E5E5"> me up</font><font color="#CCCCCC"> to 2 4 which</font>

880
00:44:25,070 --> 00:44:28,760
ships

881
00:44:25,550 --> 00:44:31,640
<font color="#CCCCCC">GStreamer 112 while meterpreter</font><font color="#E5E5E5"> linux</font>

882
00:44:28,760 --> 00:44:35,840
has<font color="#CCCCCC"> vb happens to change</font><font color="#E5E5E5"> that to</font>

883
00:44:31,640 --> 00:44:37,700
registry man 1.8 but then it he tries<font color="#E5E5E5"> to</font>

884
00:44:35,840 --> 00:44:40,250
apply patches that<font color="#E5E5E5"> it ships</font>

885
00:44:37,700 --> 00:44:41,600
<font color="#E5E5E5">ETS</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> expect them to be in the popular</font>

886
00:44:40,250 --> 00:44:44,930
year but they are not there<font color="#CCCCCC"> anymore</font><font color="#E5E5E5"> so</font>

887
00:44:41,600 --> 00:44:46,940
<font color="#CCCCCC">the deep one beans but</font><font color="#E5E5E5"> there is a much</font>

888
00:44:44,930 --> 00:44:50,270
simpler solution<font color="#CCCCCC"> that is don't use the</font>

889
00:44:46,940 --> 00:44:52,190
<font color="#CCCCCC">Potala news layer just</font><font color="#E5E5E5"> take from the</font>

890
00:44:50,270 --> 00:44:55,009
<font color="#CCCCCC">meetha pittha unix layer these four</font>

891
00:44:52,190 --> 00:44:58,640
rules<font color="#E5E5E5"> unmodified which are the kernel</font>

892
00:44:55,010 --> 00:45:01,420
module the firmware the user<font color="#E5E5E5"> space</font>

893
00:44:58,640 --> 00:45:05,359
library<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> open marks integration</font>

894
00:45:01,420 --> 00:45:09,050
<font color="#E5E5E5">take damages and then take this baby up</font>

895
00:45:05,360 --> 00:45:12,770
and file from the same layer which is

896
00:45:09,050 --> 00:45:14,650
<font color="#E5E5E5">for</font><font color="#CCCCCC"> gstreamer om x</font><font color="#E5E5E5"> so it tweets the open</font>

897
00:45:12,770 --> 00:45:18,530
<font color="#E5E5E5">max</font>

898
00:45:14,650 --> 00:45:20,690
<font color="#E5E5E5">module of these streamers to switch to</font>

899
00:45:18,530 --> 00:45:23,330
the<font color="#E5E5E5"> excellence fork which is different</font>

900
00:45:20,690 --> 00:45:26,780
from<font color="#E5E5E5"> upstream and apply</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> green flags</font>

901
00:45:23,330 --> 00:45:28,940
<font color="#E5E5E5">to customize</font><font color="#CCCCCC"> it for</font><font color="#E5E5E5"> tilings and then</font>

902
00:45:26,780 --> 00:45:32,990
finally you<font color="#CCCCCC"> can install gstreamer 1-0</font>

903
00:45:28,940 --> 00:45:35,210
<font color="#CCCCCC">emilynics and that's it nothing more it</font>

904
00:45:32,990 --> 00:45:39,410
<font color="#E5E5E5">means and it works you</font><font color="#CCCCCC"> can write a</font>

905
00:45:35,210 --> 00:45:41,750
pipeline that encodes into 65 or<font color="#CCCCCC"> x64 and</font>

906
00:45:39,410 --> 00:45:44,930
so on and what I didn't tested

907
00:45:41,750 --> 00:45:50,530
extensively but<font color="#E5E5E5"> very few tests it works</font>

908
00:45:44,930 --> 00:45:50,529
fine<font color="#CCCCCC"> the seat to</font>

909
00:45:51,010 --> 00:45:56,290
just<font color="#E5E5E5"> to draw some</font><font color="#CCCCCC"> conclusion as you</font>

910
00:45:54,550 --> 00:45:59,890
probably<font color="#E5E5E5"> understood this chip is very</font>

911
00:45:56,290 --> 00:46:02,080
powerful<font color="#E5E5E5"> and very flexible</font><font color="#CCCCCC"> but it's also</font>

912
00:45:59,890 --> 00:46:04,450
<font color="#CCCCCC">very complex</font><font color="#E5E5E5"> and the same thing applies</font>

913
00:46:02,080 --> 00:46:09,670
<font color="#CCCCCC">to software</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> its software support is</font>

914
00:46:04,450 --> 00:46:13,290
<font color="#E5E5E5">as complex to set up but if you know</font>

915
00:46:09,670 --> 00:46:18,280
where<font color="#CCCCCC"> to go</font><font color="#E5E5E5"> and find the the</font><font color="#CCCCCC"> appropriate</font>

916
00:46:13,290 --> 00:46:23,200
pieces<font color="#E5E5E5"> you can set it up also exciting's</font>

917
00:46:18,280 --> 00:46:25,720
<font color="#E5E5E5">is providing their support currently</font>

918
00:46:23,200 --> 00:46:27,910
mostly out of<font color="#CCCCCC"> mainline but they are</font>

919
00:46:25,720 --> 00:46:30,100
working<font color="#E5E5E5"> in my line at the moment</font><font color="#CCCCCC"> I think</font>

920
00:46:27,910 --> 00:46:33,190
<font color="#E5E5E5">that a bit slow in</font><font color="#CCCCCC"> that probably</font><font color="#E5E5E5"> because</font>

921
00:46:30,100 --> 00:46:36,160
they want to<font color="#E5E5E5"> set</font><font color="#CCCCCC"> up everything in their</font>

922
00:46:33,190 --> 00:46:40,000
own branches first<font color="#E5E5E5"> but they are slowly</font>

923
00:46:36,160 --> 00:46:45,299
<font color="#E5E5E5">moving which is valued and well they are</font>

924
00:46:40,000 --> 00:46:48,930
also putting<font color="#CCCCCC"> an m14 using standard tools</font>

925
00:46:45,300 --> 00:46:52,120
which is<font color="#E5E5E5"> promising</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the future also</font>

926
00:46:48,930 --> 00:47:01,870
that's<font color="#E5E5E5"> all hope</font><font color="#CCCCCC"> that was not worrying</font>

927
00:46:52,120 --> 00:47:04,230
<font color="#E5E5E5">too much</font><font color="#CCCCCC"> any questions yes I'm sorry</font><font color="#E5E5E5"> can</font>

928
00:47:01,870 --> 00:47:04,230
you<font color="#CCCCCC"> speak louder</font>

929
00:47:10,660 --> 00:47:13,660
<font color="#E5E5E5">okay</font>

930
00:47:18,450 --> 00:47:25,140
<font color="#CCCCCC">okay the question</font><font color="#E5E5E5"> is if I consider for</font>

931
00:47:22,109 --> 00:47:27,509
ATF loading using the fit image for

932
00:47:25,140 --> 00:47:29,879
<font color="#CCCCCC">eboot which</font><font color="#E5E5E5"> is used in other</font><font color="#CCCCCC"> platforms</font>

933
00:47:27,510 --> 00:47:33,720
<font color="#CCCCCC">the answer is no I didn't consider it</font>

934
00:47:29,880 --> 00:47:36,599
<font color="#E5E5E5">because this</font><font color="#CCCCCC"> approach</font><font color="#E5E5E5"> is the one that</font>

935
00:47:33,720 --> 00:47:38,669
<font color="#E5E5E5">has been implemented</font><font color="#CCCCCC"> by other</font><font color="#E5E5E5"> users of</font>

936
00:47:36,599 --> 00:47:42,510
<font color="#E5E5E5">this platform what my maintenance of</font>

937
00:47:38,670 --> 00:47:48,270
this platform<font color="#E5E5E5"> so it was already almost</font>

938
00:47:42,510 --> 00:47:50,880
ready to do<font color="#E5E5E5"> but I think fate could make</font>

939
00:47:48,270 --> 00:48:07,220
some improvement SPL can<font color="#E5E5E5"> Road feet</font><font color="#CCCCCC"> I</font>

940
00:47:50,880 --> 00:48:07,220
guess yeah<font color="#E5E5E5"> okay I don't yeah sorry</font>

941
00:48:09,120 --> 00:48:15,960
[Music]

942
00:48:12,240 --> 00:48:15,959
<font color="#E5E5E5">okay yeah</font>

943
00:48:18,610 --> 00:48:29,920
<font color="#CCCCCC">Yeah right so yeah Rockchip is using the</font>

944
00:48:24,970 --> 00:48:32,290
<font color="#CCCCCC">image probably others I I agree with you</font>

945
00:48:29,920 --> 00:48:34,090
at first sight that<font color="#E5E5E5"> this seems a better</font>

946
00:48:32,290 --> 00:48:35,620
approach<font color="#CCCCCC"> I don't know if there are</font>

947
00:48:34,090 --> 00:48:43,120
<font color="#E5E5E5">reasons it has been done</font><font color="#CCCCCC"> another</font><font color="#E5E5E5"> way</font>

948
00:48:35,620 --> 00:48:46,259
<font color="#CCCCCC">sorry</font><font color="#E5E5E5"> okay</font>

949
00:48:43,120 --> 00:48:46,259
[Music]

950
00:48:47,550 --> 00:48:51,270
yeah<font color="#E5E5E5"> I don't know why it doesn't be done</font>

951
00:48:50,530 --> 00:48:57,210
that way

952
00:48:51,270 --> 00:49:03,640
sorry any more questions

953
00:48:57,210 --> 00:49:06,940
yep<font color="#CCCCCC"> I</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> keep you well and support I</font>

954
00:49:03,640 --> 00:49:09,629
don't<font color="#CCCCCC"> know</font><font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> know I'm not</font><font color="#E5E5E5"> using it</font>

955
00:49:06,940 --> 00:49:09,630
sorry

956
00:49:33,640 --> 00:49:47,650
yes that yeah i okay so the thing is

957
00:49:42,720 --> 00:49:51,279
using x11<font color="#CCCCCC"> does actually meant copies of</font>

958
00:49:47,650 --> 00:49:54,059
buffer refused windows<font color="#E5E5E5"> window II but in</font>

959
00:49:51,279 --> 00:49:56,769
<font color="#CCCCCC">fullscreen it does not</font><font color="#E5E5E5"> okay right</font>

960
00:49:54,059 --> 00:49:57,400
<font color="#E5E5E5">actually in fact I</font><font color="#CCCCCC"> used it</font><font color="#E5E5E5"> only in</font>

961
00:49:56,769 --> 00:50:02,288
<font color="#E5E5E5">full-screen</font>

962
00:49:57,400 --> 00:50:06,489
but it didn't<font color="#E5E5E5"> gave any improvement in</font>

963
00:50:02,289 --> 00:50:09,069
features over the<font color="#E5E5E5"> at media so I stayed</font>

964
00:50:06,489 --> 00:50:12,640
with a simple<font color="#CCCCCC"> Nvidia so X 11</font><font color="#E5E5E5"> for full</font>

965
00:50:09,069 --> 00:50:16,499
<font color="#E5E5E5">screen seems like to add like a PDF</font><font color="#CCCCCC"> to</font>

966
00:50:12,640 --> 00:50:16,499
<font color="#CCCCCC">the user</font><font color="#E5E5E5"> so it's simpler</font>

967
00:50:17,970 --> 00:50:33,439
<font color="#E5E5E5">okay that's all thank</font><font color="#CCCCCC"> you very much</font>

968
00:50:22,640 --> 00:50:33,440
[Applause]

