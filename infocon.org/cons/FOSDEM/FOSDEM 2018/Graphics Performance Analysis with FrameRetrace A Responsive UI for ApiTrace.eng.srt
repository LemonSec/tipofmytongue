1
00:00:05,109 --> 00:00:11,780
good morning welcome to FOSDEM<font color="#CCCCCC"> I hope</font>

2
00:00:09,110 --> 00:00:13,790
you guys had a fun<font color="#CCCCCC"> time last night it's</font>

3
00:00:11,780 --> 00:00:17,360
good to see so many<font color="#CCCCCC"> people have</font>

4
00:00:13,790 --> 00:00:19,070
recovered<font color="#CCCCCC"> from the festivities hopefully</font>

5
00:00:17,360 --> 00:00:22,029
I'll have a seat to sit down when I'm

6
00:00:19,070 --> 00:00:25,039
done with<font color="#E5E5E5"> my talk</font><font color="#CCCCCC"> it's very crowded</font><font color="#E5E5E5"> I</font>

7
00:00:22,029 --> 00:00:27,980
was told<font color="#E5E5E5"> before I came that this was the</font>

8
00:00:25,039 --> 00:00:29,539
worst possible time slot<font color="#CCCCCC"> to give a talk</font>

9
00:00:27,980 --> 00:00:31,269
at FOSDEM first<font color="#E5E5E5"> thing Saturday</font><font color="#CCCCCC"> morning</font>

10
00:00:29,539 --> 00:00:34,970
<font color="#E5E5E5">either</font>

11
00:00:31,269 --> 00:00:37,430
<font color="#E5E5E5">but I'm happy</font><font color="#CCCCCC"> to be here I'm glad</font><font color="#E5E5E5"> that</font>

12
00:00:34,970 --> 00:00:39,650
<font color="#CCCCCC">Lucas organized the graphics dev room</font>

13
00:00:37,430 --> 00:00:42,710
again this year<font color="#E5E5E5"> and that he made time</font>

14
00:00:39,650 --> 00:00:46,729
<font color="#CCCCCC">for me to give a short presentation on</font>

15
00:00:42,710 --> 00:00:50,420
my work so thanks a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> I've been</font>

16
00:00:46,729 --> 00:00:53,110
<font color="#E5E5E5">working on Linux platforms for more than</font>

17
00:00:50,420 --> 00:00:55,339
a decade<font color="#CCCCCC"> several of</font><font color="#E5E5E5"> those years I spent</font>

18
00:00:53,110 --> 00:00:59,479
building graphics performance<font color="#E5E5E5"> tools</font>

19
00:00:55,339 --> 00:01:03,799
<font color="#E5E5E5">based on Windows Windows tool that was</font>

20
00:00:59,479 --> 00:01:05,780
<font color="#E5E5E5">used</font><font color="#CCCCCC"> throughout the industry and</font><font color="#E5E5E5"> in that</font>

21
00:01:03,799 --> 00:01:07,850
position<font color="#E5E5E5"> I was able</font><font color="#CCCCCC"> to see how important</font>

22
00:01:05,780 --> 00:01:11,660
performance<font color="#E5E5E5"> analysis tools are for</font>

23
00:01:07,850 --> 00:01:13,520
<font color="#E5E5E5">graphics workloads and my project over</font>

24
00:01:11,660 --> 00:01:16,160
the past few years<font color="#E5E5E5"> has</font><font color="#CCCCCC"> been to try to</font>

25
00:01:13,520 --> 00:01:19,759
<font color="#CCCCCC">enable the same workflows for Linux</font>

26
00:01:16,160 --> 00:01:22,910
platforms<font color="#E5E5E5"> and I've also spent a lot of</font>

27
00:01:19,760 --> 00:01:27,440
time automating the integration system

28
00:01:22,910 --> 00:01:29,929
for<font color="#E5E5E5"> Mesa Intel</font><font color="#CCCCCC"> which has helped mesas</font>

29
00:01:27,440 --> 00:01:31,039
productivity and quality<font color="#CCCCCC"> quite a bit but</font>

30
00:01:29,930 --> 00:01:32,900
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is really the</font><font color="#CCCCCC"> project that</font><font color="#E5E5E5"> I've</font>

31
00:01:31,040 --> 00:01:37,130
been<font color="#CCCCCC"> most interested</font><font color="#E5E5E5"> in since I started</font>

32
00:01:32,900 --> 00:01:42,200
with the Mesa team so a little<font color="#E5E5E5"> bit about</font>

33
00:01:37,130 --> 00:01:44,030
GPU tools and why you don't really have

34
00:01:42,200 --> 00:01:47,240
very<font color="#E5E5E5"> many good solutions in the Linux</font>

35
00:01:44,030 --> 00:01:50,710
space<font color="#CCCCCC"> in general when you have GPU tools</font>

36
00:01:47,240 --> 00:01:53,449
<font color="#E5E5E5">there's a graphics card vendor that</font>

37
00:01:50,710 --> 00:01:55,339
<font color="#E5E5E5">understands it's very difficult to go</font>

38
00:01:53,450 --> 00:01:57,880
and find<font color="#E5E5E5"> out performance bottlenecks or</font>

39
00:01:55,340 --> 00:02:01,520
what's happening<font color="#E5E5E5"> on the GPU and they've</font>

40
00:01:57,880 --> 00:02:03,770
gone and funded some tools specific to

41
00:02:01,520 --> 00:02:06,580
<font color="#E5E5E5">their own hardware to help developers of</font>

42
00:02:03,770 --> 00:02:09,470
their<font color="#E5E5E5"> own driver</font><font color="#CCCCCC"> treat</font><font color="#E5E5E5"> driver team</font>

43
00:02:06,580 --> 00:02:12,980
figure<font color="#CCCCCC"> out what the performance profile</font>

44
00:02:09,470 --> 00:02:14,660
is of specific applications<font color="#CCCCCC"> but they are</font>

45
00:02:12,980 --> 00:02:16,369
very<font color="#E5E5E5"> reluctant</font><font color="#CCCCCC"> to go and enable the same</font>

46
00:02:14,660 --> 00:02:17,410
capabilities for their competitors and

47
00:02:16,370 --> 00:02:21,340
so if

48
00:02:17,410 --> 00:02:25,420
do find a good<font color="#E5E5E5"> GPU analysis tool you'll</font>

49
00:02:21,340 --> 00:02:29,260
often<font color="#CCCCCC"> find it</font><font color="#E5E5E5"> only works with an AMD GPU</font>

50
00:02:25,420 --> 00:02:31,209
or<font color="#E5E5E5"> an NVIDIA GPU some of the exceptions</font>

51
00:02:29,260 --> 00:02:37,000
and<font color="#E5E5E5"> though in the</font><font color="#CCCCCC"> Linux space</font><font color="#E5E5E5"> are made</font>

52
00:02:31,210 --> 00:02:40,420
by Microsoft or other entities<font color="#CCCCCC"> that care</font>

53
00:02:37,000 --> 00:02:42,490
more about cross vendor functionality

54
00:02:40,420 --> 00:02:44,640
most of the tools are written for

55
00:02:42,490 --> 00:02:47,920
<font color="#E5E5E5">Windows and Linux as an afterthought</font>

56
00:02:44,640 --> 00:02:49,299
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> either closed source or the</font>

57
00:02:47,920 --> 00:02:51,369
<font color="#E5E5E5">extent to which</font><font color="#CCCCCC"> they're open sources</font>

58
00:02:49,300 --> 00:02:54,010
it's just<font color="#E5E5E5"> the two commits where they've</font>

59
00:02:51,370 --> 00:02:57,280
dumped a huge pile of<font color="#E5E5E5"> code into a github</font>

60
00:02:54,010 --> 00:02:59,799
<font color="#E5E5E5">account</font><font color="#CCCCCC"> and whether it compiles or not</font>

61
00:02:57,280 --> 00:03:03,790
<font color="#E5E5E5">you know you might you may find that</font><font color="#CCCCCC"> it</font>

62
00:02:59,800 --> 00:03:05,940
does not so this<font color="#E5E5E5"> is changing</font><font color="#CCCCCC"> a little</font>

63
00:03:03,790 --> 00:03:05,940
<font color="#CCCCCC">bit</font>

64
00:03:07,410 --> 00:03:12,940
performance tools like myself<font color="#E5E5E5"> and Lionel</font>

65
00:03:10,750 --> 00:03:16,390
<font color="#E5E5E5">and are willing</font><font color="#CCCCCC"> and Robert Bragg have</font>

66
00:03:12,940 --> 00:03:19,230
worked on GPU top so there is more

67
00:03:16,390 --> 00:03:22,140
native support for performance tools

68
00:03:19,230 --> 00:03:24,910
render<font color="#E5E5E5"> dock is another example where</font>

69
00:03:22,140 --> 00:03:28,570
valve has gone<font color="#E5E5E5"> in funded a developer to</font>

70
00:03:24,910 --> 00:03:31,840
really invest in native Linux<font color="#E5E5E5"> graphics</font>

71
00:03:28,570 --> 00:03:33,760
and<font color="#CCCCCC"> Alice's tools one thing</font><font color="#E5E5E5"> about a lot</font>

72
00:03:31,840 --> 00:03:37,060
<font color="#E5E5E5">of the tools is that tracing and</font>

73
00:03:33,760 --> 00:03:39,040
retracing<font color="#E5E5E5"> is often not reliable this is</font>

74
00:03:37,060 --> 00:03:42,580
you know can<font color="#E5E5E5"> be because the tool was</font>

75
00:03:39,040 --> 00:03:45,390
initially written<font color="#E5E5E5"> for</font><font color="#CCCCCC"> windows DX 11 or</font>

76
00:03:42,580 --> 00:03:48,310
DX<font color="#E5E5E5"> 10 games and then when they go to</font>

77
00:03:45,390 --> 00:03:49,929
<font color="#E5E5E5">implement tracing for OpenGL they find</font>

78
00:03:48,310 --> 00:03:54,280
the complexity of the extensions makes

79
00:03:49,930 --> 00:03:56,880
it hard to<font color="#E5E5E5"> really capture the</font><font color="#CCCCCC"> workload</font>

80
00:03:54,280 --> 00:04:00,370
that<font color="#E5E5E5"> you want to investigate</font><font color="#CCCCCC"> and also</font>

81
00:03:56,880 --> 00:04:02,530
another reason<font color="#CCCCCC"> why tracing is often</font>

82
00:04:00,370 --> 00:04:05,050
unreliable<font color="#E5E5E5"> as there's - there's not that</font>

83
00:04:02,530 --> 00:04:06,790
many<font color="#E5E5E5"> users so you might have a tools</font>

84
00:04:05,050 --> 00:04:08,980
team that<font color="#E5E5E5"> goes and tries</font><font color="#CCCCCC"> to build</font><font color="#E5E5E5"> a tool</font>

85
00:04:06,790 --> 00:04:10,929
<font color="#E5E5E5">but unless you have lots of developers</font>

86
00:04:08,980 --> 00:04:12,040
going<font color="#E5E5E5"> and applying it and looked and</font>

87
00:04:10,930 --> 00:04:13,959
looking at<font color="#E5E5E5"> different workloads</font>

88
00:04:12,040 --> 00:04:18,730
you're not going<font color="#E5E5E5"> to discover the bugs in</font>

89
00:04:13,959 --> 00:04:20,500
your<font color="#E5E5E5"> tracing system so and up until</font>

90
00:04:18,730 --> 00:04:23,230
<font color="#E5E5E5">recently</font><font color="#CCCCCC"> a big barrier</font><font color="#E5E5E5"> has been</font><font color="#CCCCCC"> the</font>

91
00:04:20,500 --> 00:04:24,040
<font color="#CCCCCC">support for GPU performance counters in</font>

92
00:04:23,230 --> 00:04:28,060
Mesa

93
00:04:24,040 --> 00:04:29,110
since<font color="#E5E5E5"> Linux 4.13 that's enabled now for</font>

94
00:04:28,060 --> 00:04:29,760
Intel

95
00:04:29,110 --> 00:04:32,580
GP

96
00:04:29,760 --> 00:04:34,440
<font color="#E5E5E5">and</font><font color="#CCCCCC"> ambi for performance monitor is</font>

97
00:04:32,580 --> 00:04:36,900
available<font color="#CCCCCC"> for</font><font color="#E5E5E5"> some of</font><font color="#CCCCCC"> their newer</font>

98
00:04:34,440 --> 00:04:39,600
hardware as<font color="#E5E5E5"> well so now that Mesa is</font>

99
00:04:36,900 --> 00:04:43,950
exposing<font color="#E5E5E5"> these extensions there's a</font>

100
00:04:39,600 --> 00:04:45,270
whole lot<font color="#E5E5E5"> more</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> can do so my tool</font>

101
00:04:43,950 --> 00:04:46,590
<font color="#E5E5E5">is called frame rate</font><font color="#CCCCCC"> race it's built on</font>

102
00:04:45,270 --> 00:04:50,729
<font color="#CCCCCC">top of API trace</font>

103
00:04:46,590 --> 00:04:53,969
I chose API trace<font color="#E5E5E5"> because I think it's</font>

104
00:04:50,730 --> 00:04:56,310
<font color="#CCCCCC">the</font><font color="#E5E5E5"> most widely</font><font color="#CCCCCC"> GP</font><font color="#E5E5E5"> widely used GPU</font>

105
00:04:53,970 --> 00:04:59,430
analysis tool<font color="#E5E5E5"> there's a lot of people</font>

106
00:04:56,310 --> 00:05:00,750
that use<font color="#CCCCCC"> it</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> quality and now</font><font color="#E5E5E5"> Quality</font>

107
00:04:59,430 --> 00:05:03,240
<font color="#E5E5E5">Assurance</font><font color="#CCCCCC"> to make sure that the frames</font>

108
00:05:00,750 --> 00:05:04,200
<font color="#CCCCCC">retraced properly and</font><font color="#E5E5E5"> because it has a</font>

109
00:05:03,240 --> 00:05:07,560
large number<font color="#CCCCCC"> of users</font>

110
00:05:04,200 --> 00:05:09,539
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> also often a lot of corner cases</font>

111
00:05:07,560 --> 00:05:12,090
of tracing that if they've gone and

112
00:05:09,540 --> 00:05:13,310
fixed<font color="#CCCCCC"> it's a</font><font color="#E5E5E5"> community supported project</font>

113
00:05:12,090 --> 00:05:14,880
so there's lots of<font color="#E5E5E5"> people working on</font><font color="#CCCCCC"> it</font>

114
00:05:13,310 --> 00:05:17,850
<font color="#CCCCCC">right now</font>

115
00:05:14,880 --> 00:05:20,730
<font color="#CCCCCC">framer trace is just a directory</font><font color="#E5E5E5"> and a</font>

116
00:05:17,850 --> 00:05:24,570
branch of API trace<font color="#E5E5E5"> it's just a UI</font><font color="#CCCCCC"> that</font>

117
00:05:20,730 --> 00:05:28,080
<font color="#CCCCCC">is built on</font><font color="#E5E5E5"> top of it because API trace</font>

118
00:05:24,570 --> 00:05:29,820
is<font color="#CCCCCC"> cross-platform frame retraces also</font>

119
00:05:28,080 --> 00:05:32,849
cross-platform so it will investigate

120
00:05:29,820 --> 00:05:34,920
<font color="#CCCCCC">OpenGL workloads on</font><font color="#E5E5E5"> Windows</font><font color="#CCCCCC"> just as well</font>

121
00:05:32,850 --> 00:05:37,940
as it will on on Linux<font color="#E5E5E5"> and that's an</font>

122
00:05:34,920 --> 00:05:39,960
important capability<font color="#E5E5E5"> for driver teams</font>

123
00:05:37,940 --> 00:05:41,280
<font color="#CCCCCC">because if you have</font><font color="#E5E5E5"> two different driver</font>

124
00:05:39,960 --> 00:05:43,919
implementations for different platforms

125
00:05:41,280 --> 00:05:46,349
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> compare the performance profile</font>

126
00:05:43,920 --> 00:05:47,790
for the workloads<font color="#E5E5E5"> and find gaps in your</font>

127
00:05:46,350 --> 00:05:51,510
<font color="#E5E5E5">implementation</font><font color="#CCCCCC"> or in the windows</font>

128
00:05:47,790 --> 00:05:55,500
implementation<font color="#E5E5E5"> our counter support</font>

129
00:05:51,510 --> 00:05:57,900
begins with has well there were<font color="#CCCCCC"> Hardware</font>

130
00:05:55,500 --> 00:05:59,340
counters prior to as well but<font color="#E5E5E5"> the</font>

131
00:05:57,900 --> 00:06:01,710
architecture<font color="#E5E5E5"> was different enough</font><font color="#CCCCCC"> that</font>

132
00:05:59,340 --> 00:06:05,940
the driver team decided<font color="#CCCCCC"> not to enable</font>

133
00:06:01,710 --> 00:06:09,080
<font color="#E5E5E5">them so your performance will be better</font>

134
00:06:05,940 --> 00:06:12,480
<font color="#E5E5E5">with a newer computer anyways right so</font>

135
00:06:09,080 --> 00:06:16,109
the<font color="#CCCCCC"> Mesa</font><font color="#E5E5E5"> driver team has been</font><font color="#CCCCCC"> using this</font>

136
00:06:12,480 --> 00:06:19,200
tool heavily to go and find issues in

137
00:06:16,110 --> 00:06:21,590
their driver<font color="#E5E5E5"> and there's a whole set</font><font color="#CCCCCC"> of</font>

138
00:06:19,200 --> 00:06:25,560
examples of different<font color="#CCCCCC"> special cases that</font>

139
00:06:21,590 --> 00:06:27,210
<font color="#CCCCCC">they've missed</font><font color="#E5E5E5"> and we found basically by</font>

140
00:06:25,560 --> 00:06:28,980
looking<font color="#CCCCCC"> closely at each render in</font><font color="#E5E5E5"> a</font>

141
00:06:27,210 --> 00:06:32,940
frame<font color="#E5E5E5"> and understanding what the</font>

142
00:06:28,980 --> 00:06:36,799
bottleneck is right now<font color="#E5E5E5"> I'm trying</font><font color="#CCCCCC"> to</font>

143
00:06:32,940 --> 00:06:39,539
add<font color="#E5E5E5"> support for Radeon hardware and</font>

144
00:06:36,799 --> 00:06:42,388
<font color="#E5E5E5">Raspberry Pi</font><font color="#CCCCCC"> through the AMD performance</font>

145
00:06:39,539 --> 00:06:44,489
monitor extension and<font color="#E5E5E5"> there's some other</font>

146
00:06:42,389 --> 00:06:48,029
folks that<font color="#CCCCCC"> are</font><font color="#E5E5E5"> looking at that with me</font>

147
00:06:44,489 --> 00:06:49,649
<font color="#E5E5E5">and it's going</font><font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> there's a few</font>

148
00:06:48,029 --> 00:06:53,789
stumbling blocks<font color="#CCCCCC"> for the Radeon</font>

149
00:06:49,649 --> 00:06:56,819
<font color="#E5E5E5">implementation of that</font><font color="#CCCCCC"> extension I think</font>

150
00:06:53,789 --> 00:06:59,248
that cross-platform<font color="#E5E5E5"> support</font><font color="#CCCCCC"> in this tool</font>

151
00:06:56,819 --> 00:07:02,369
is one of the main things that<font color="#E5E5E5"> needs to</font>

152
00:06:59,249 --> 00:07:04,289
be<font color="#E5E5E5"> finished before it's a good candidate</font>

153
00:07:02,369 --> 00:07:06,149
<font color="#E5E5E5">for being upstream data API trace</font><font color="#CCCCCC"> I</font>

154
00:07:04,289 --> 00:07:09,259
think that you'll<font color="#E5E5E5"> see that the tool is</font>

155
00:07:06,149 --> 00:07:12,509
pretty compelling and and useful and

156
00:07:09,259 --> 00:07:17,659
superior<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the API trace UI in some</font>

157
00:07:12,509 --> 00:07:17,659
ways so<font color="#E5E5E5"> I'd like to see</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> go upstream</font>

158
00:07:18,049 --> 00:07:24,628
so what does this tool do<font color="#E5E5E5"> most graphic</font>

159
00:07:22,860 --> 00:07:26,819
<font color="#E5E5E5">graphical applications have a render</font>

160
00:07:24,629 --> 00:07:30,019
loop and the render<font color="#E5E5E5"> loop just renders</font>

161
00:07:26,819 --> 00:07:32,339
the frame over<font color="#E5E5E5"> and over again</font><font color="#CCCCCC"> so if you</font>

162
00:07:30,019 --> 00:07:36,239
are<font color="#E5E5E5"> looking just at the renders in those</font>

163
00:07:32,339 --> 00:07:40,169
frame<font color="#E5E5E5"> frames you can divide up the frame</font>

164
00:07:36,239 --> 00:07:41,698
<font color="#E5E5E5">into each specific draw call and this</font>

165
00:07:40,169 --> 00:07:43,169
tool will give<font color="#E5E5E5"> you the metrics</font>

166
00:07:41,699 --> 00:07:44,909
associated<font color="#CCCCCC"> with each draw call and you</font>

167
00:07:43,169 --> 00:07:46,349
can<font color="#CCCCCC"> see exactly</font><font color="#E5E5E5"> which render is</font><font color="#CCCCCC"> the one</font>

168
00:07:44,909 --> 00:07:49,289
that's<font color="#E5E5E5"> that's taking all the time in</font>

169
00:07:46,349 --> 00:07:51,089
<font color="#E5E5E5">your frame without</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> I mean generally</font>

170
00:07:49,289 --> 00:07:52,558
you just<font color="#CCCCCC"> have a huge asynchronous</font>

171
00:07:51,089 --> 00:07:55,219
<font color="#CCCCCC">workload going off to the GPU</font><font color="#E5E5E5"> and you</font>

172
00:07:52,559 --> 00:07:58,169
have no<font color="#E5E5E5"> idea why you're missing vsync</font>

173
00:07:55,219 --> 00:07:59,939
<font color="#E5E5E5">you can explore the frame by selecting</font>

174
00:07:58,169 --> 00:08:02,519
specific renders and it'll show<font color="#E5E5E5"> you the</font>

175
00:07:59,939 --> 00:08:04,889
<font color="#E5E5E5">render targets throughout throughout the</font>

176
00:08:02,519 --> 00:08:07,469
frame<font color="#E5E5E5"> which is helpful to understand how</font>

177
00:08:04,889 --> 00:08:10,229
a frame is composed as an<font color="#CCCCCC"> API log which</font>

178
00:08:07,469 --> 00:08:13,079
<font color="#CCCCCC">is pretty standard</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> driver developers</font>

179
00:08:10,229 --> 00:08:16,258
it's pretty<font color="#E5E5E5"> helpful to have batch</font>

180
00:08:13,079 --> 00:08:17,849
disassembly so the batch commands which

181
00:08:16,259 --> 00:08:19,949
are sent<font color="#E5E5E5"> directly to the hardware are</font>

182
00:08:17,849 --> 00:08:22,139
disassembled<font color="#E5E5E5"> and associated</font><font color="#CCCCCC"> with the</font>

183
00:08:19,949 --> 00:08:24,449
render that you've selected so this is a

184
00:08:22,139 --> 00:08:27,329
capability<font color="#E5E5E5"> that at least on Intel</font>

185
00:08:24,449 --> 00:08:30,119
<font color="#CCCCCC">Hardware you have to up until now you</font>

186
00:08:27,329 --> 00:08:32,909
would have<font color="#E5E5E5"> to dump hundreds of gigabytes</font>

187
00:08:30,119 --> 00:08:34,949
of data<font color="#E5E5E5"> for any kind of meaningful frame</font>

188
00:08:32,909 --> 00:08:36,659
and then try<font color="#E5E5E5"> to sift through the</font><font color="#CCCCCC"> data to</font>

189
00:08:34,948 --> 00:08:40,500
try to find out<font color="#E5E5E5"> exactly which render</font>

190
00:08:36,659 --> 00:08:42,149
went wrong and this will give you a much

191
00:08:40,500 --> 00:08:43,438
more<font color="#E5E5E5"> performant implementation and let</font>

192
00:08:42,149 --> 00:08:45,230
you see exactly<font color="#E5E5E5"> what's what's</font><font color="#CCCCCC"> going to</font>

193
00:08:43,438 --> 00:08:49,290
<font color="#E5E5E5">the hardware for each draw</font>

194
00:08:45,230 --> 00:08:52,080
one of the main features<font color="#E5E5E5"> that</font><font color="#CCCCCC"> end-users</font>

195
00:08:49,290 --> 00:08:53,760
and<font color="#CCCCCC"> game developers need is a shader</font>

196
00:08:52,080 --> 00:08:54,990
debugger or some way to<font color="#E5E5E5"> experiment with</font>

197
00:08:53,760 --> 00:08:56,939
their shaders and<font color="#E5E5E5"> find out why their</font>

198
00:08:54,990 --> 00:08:59,280
shaders<font color="#CCCCCC"> are</font><font color="#E5E5E5"> miss rendering so with frame</font>

199
00:08:56,940 --> 00:09:01,920
<font color="#CCCCCC">retrace you</font><font color="#E5E5E5"> can go to a specific render</font>

200
00:08:59,280 --> 00:09:03,839
<font color="#E5E5E5">look at the shader change the shader</font>

201
00:09:01,920 --> 00:09:05,010
<font color="#E5E5E5">edit it compile it</font><font color="#CCCCCC"> and it'll render</font>

202
00:09:03,840 --> 00:09:07,320
again<font color="#E5E5E5"> and it'll give</font><font color="#CCCCCC"> you a new</font>

203
00:09:05,010 --> 00:09:10,530
performance profile for that shader<font color="#CCCCCC"> or</font>

204
00:09:07,320 --> 00:09:11,910
an error if you've made<font color="#E5E5E5"> a mistake</font><font color="#CCCCCC"> you</font>

205
00:09:10,530 --> 00:09:14,550
<font color="#CCCCCC">can do the</font><font color="#E5E5E5"> same thing with uniform</font>

206
00:09:11,910 --> 00:09:17,100
constants<font color="#CCCCCC"> just go and see</font><font color="#E5E5E5"> what the</font>

207
00:09:14,550 --> 00:09:19,589
constants are and<font color="#CCCCCC"> change them and</font><font color="#E5E5E5"> the</font>

208
00:09:17,100 --> 00:09:21,180
frame will render again<font color="#E5E5E5"> there's a couple</font>

209
00:09:19,590 --> 00:09:24,410
of<font color="#E5E5E5"> experiments that you can do to help</font>

210
00:09:21,180 --> 00:09:26,819
you try to<font color="#E5E5E5"> figure out what the you know</font>

211
00:09:24,410 --> 00:09:29,850
max<font color="#CCCCCC"> performance would</font><font color="#E5E5E5"> be for a specific</font>

212
00:09:26,820 --> 00:09:31,800
render<font color="#CCCCCC"> and the thing that I've just</font><font color="#E5E5E5"> been</font>

213
00:09:29,850 --> 00:09:34,110
editing now is a<font color="#CCCCCC"> hierarchical</font>

214
00:09:31,800 --> 00:09:37,310
representation of all the GL<font color="#CCCCCC"> state so</font>

215
00:09:34,110 --> 00:09:40,140
<font color="#E5E5E5">that you can change like the coalface</font>

216
00:09:37,310 --> 00:09:42,300
and and see what happens<font color="#E5E5E5"> so if you have</font>

217
00:09:40,140 --> 00:09:43,439
a problem<font color="#E5E5E5"> with your your c GL state</font>

218
00:09:42,300 --> 00:09:46,050
that's affecting rendering or

219
00:09:43,440 --> 00:09:48,450
performance you can you can muck with

220
00:09:46,050 --> 00:09:53,670
that so those are the<font color="#E5E5E5"> things we'll go</font>

221
00:09:48,450 --> 00:09:57,390
through in the demo so I'm taking<font color="#E5E5E5"> a risk</font>

222
00:09:53,670 --> 00:10:01,050
let's have a demo see what happens<font color="#CCCCCC"> all</font>

223
00:09:57,390 --> 00:10:05,970
<font color="#E5E5E5">right so this is the UI</font><font color="#CCCCCC"> for frame or</font>

224
00:10:01,050 --> 00:10:09,510
trace and if you<font color="#E5E5E5"> this blue bar is</font>

225
00:10:05,970 --> 00:10:11,790
<font color="#CCCCCC">actually a graph of renders with no</font>

226
00:10:09,510 --> 00:10:14,760
metrics but<font color="#E5E5E5"> you'll see here there's a</font>

227
00:10:11,790 --> 00:10:19,170
long list of GPU metrics associated with

228
00:10:14,760 --> 00:10:24,750
the l3 cache you know the the pixel

229
00:10:19,170 --> 00:10:26,790
shaders<font color="#CCCCCC"> vertex fetch hardware a lot</font><font color="#E5E5E5"> of</font>

230
00:10:24,750 --> 00:10:28,170
these are somewhat inscrutable<font color="#E5E5E5"> if you're</font>

231
00:10:26,790 --> 00:10:31,500
not<font color="#E5E5E5"> familiar with the hardware or don't</font>

232
00:10:28,170 --> 00:10:32,459
do a lot<font color="#CCCCCC"> of GL programming the one that</font>

233
00:10:31,500 --> 00:10:34,470
you<font color="#E5E5E5"> really want to</font><font color="#CCCCCC"> look at if you want</font>

234
00:10:32,460 --> 00:10:36,570
<font color="#CCCCCC">to see why is the slow as you look at</font>

235
00:10:34,470 --> 00:10:40,080
how many clocks<font color="#E5E5E5"> we're required to render</font>

236
00:10:36,570 --> 00:10:42,839
<font color="#E5E5E5">the frame and so this is a graph where</font>

237
00:10:40,080 --> 00:10:47,160
each bar<font color="#CCCCCC"> is a specific render they're</font>

238
00:10:42,839 --> 00:10:49,890
quite a lot of<font color="#CCCCCC"> them</font><font color="#E5E5E5"> but by far</font><font color="#CCCCCC"> the most</font>

239
00:10:47,160 --> 00:10:53,120
expensive<font color="#E5E5E5"> one is here and there's a</font>

240
00:10:49,890 --> 00:10:57,720
table<font color="#CCCCCC"> that will show you the metrics so</font>

241
00:10:53,120 --> 00:10:58,819
here is the clocks<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you can see that</font>

242
00:10:57,720 --> 00:11:00,470
it's more<font color="#E5E5E5"> than</font><font color="#CCCCCC"> 10% of</font><font color="#E5E5E5"> the</font>

243
00:10:58,819 --> 00:11:04,628
<font color="#CCCCCC">tiya frame is just for this one render</font>

244
00:11:00,470 --> 00:11:08,569
so if you're curious about what<font color="#E5E5E5"> a GTL</font>

245
00:11:04,629 --> 00:11:10,039
<font color="#CCCCCC">GTI l3 Bank l2 Reed is there's a longer</font>

246
00:11:08,569 --> 00:11:14,748
<font color="#CCCCCC">description for that</font><font color="#E5E5E5"> metric</font><font color="#CCCCCC"> that'll help</font>

247
00:11:10,039 --> 00:11:16,999
you decipher what it means<font color="#E5E5E5"> but typically</font>

248
00:11:14,749 --> 00:11:20,479
<font color="#E5E5E5">you can go through here</font><font color="#CCCCCC"> and find an</font>

249
00:11:16,999 --> 00:11:23,689
explanation for why this might<font color="#CCCCCC"> be a</font>

250
00:11:20,479 --> 00:11:25,699
bottleneck<font color="#CCCCCC"> for your</font><font color="#E5E5E5"> workload</font><font color="#CCCCCC"> if you want</font>

251
00:11:23,689 --> 00:11:28,299
to see the render target at this part in

252
00:11:25,699 --> 00:11:33,529
the frame<font color="#E5E5E5"> you'll</font><font color="#CCCCCC"> see that our heroine is</font>

253
00:11:28,299 --> 00:11:34,999
found the<font color="#CCCCCC"> object of her desire and</font><font color="#E5E5E5"> the</font>

254
00:11:33,529 --> 00:11:36,229
<font color="#CCCCCC">rendering of</font><font color="#E5E5E5"> this frame if you want to</font>

255
00:11:34,999 --> 00:11:37,519
see what's what's actually being

256
00:11:36,229 --> 00:11:41,419
rendered<font color="#CCCCCC"> it's it's</font><font color="#E5E5E5"> rendering the whole</font>

257
00:11:37,519 --> 00:11:43,220
<font color="#E5E5E5">screen</font><font color="#CCCCCC"> and the API calls it's just</font>

258
00:11:41,419 --> 00:11:45,049
drawing<font color="#CCCCCC"> a couple of triangles</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font>

259
00:11:43,220 --> 00:11:46,729
for the rect<font color="#CCCCCC"> so it's a little bit</font>

260
00:11:45,049 --> 00:11:49,309
puzzling why this might<font color="#CCCCCC"> be long but</font>

261
00:11:46,729 --> 00:11:51,979
there's also this GL memory bear barrier

262
00:11:49,309 --> 00:11:55,669
which is probably<font color="#E5E5E5"> something we'd be</font>

263
00:11:51,979 --> 00:11:59,959
interested<font color="#CCCCCC"> in looking at if you want to</font>

264
00:11:55,669 --> 00:12:03,169
search for<font color="#E5E5E5"> GL memory bear you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> look</font>

265
00:11:59,959 --> 00:12:09,768
at the different renders which contain

266
00:12:03,169 --> 00:12:11,329
GL memory<font color="#CCCCCC"> barriers so so if you wanted</font>

267
00:12:09,769 --> 00:12:13,069
<font color="#E5E5E5">the experiments if you wanted to see</font>

268
00:12:11,329 --> 00:12:15,709
<font color="#CCCCCC">okay well how</font><font color="#E5E5E5"> fast would this be</font>

269
00:12:13,069 --> 00:12:18,349
rendered<font color="#E5E5E5"> if I just had a</font><font color="#CCCCCC"> simple shader</font>

270
00:12:15,709 --> 00:12:21,409
with it<font color="#E5E5E5"> just drew pink you can select</font>

271
00:12:18,350 --> 00:12:25,100
that<font color="#CCCCCC"> and you can see that the cost is</font>

272
00:12:21,409 --> 00:12:27,649
much lower<font color="#E5E5E5"> we go to the shaders and in</font>

273
00:12:25,100 --> 00:12:29,149
the<font color="#E5E5E5"> fragment shader</font><font color="#CCCCCC"> it's got the you</font>

274
00:12:27,649 --> 00:12:31,369
<font color="#E5E5E5">know just a substituted fragment shader</font>

275
00:12:29,149 --> 00:12:34,429
<font color="#CCCCCC">that just draws pink so let's disable</font>

276
00:12:31,369 --> 00:12:35,839
that<font color="#CCCCCC"> and go back to the shaders so we're</font>

277
00:12:34,429 --> 00:12:37,309
now we're<font color="#E5E5E5"> in the fragment</font><font color="#CCCCCC"> shader</font><font color="#E5E5E5"> again</font>

278
00:12:35,839 --> 00:12:39,439
and you can<font color="#E5E5E5"> see that there's</font><font color="#CCCCCC"> quite</font><font color="#E5E5E5"> a</font>

279
00:12:37,309 --> 00:12:42,439
long<font color="#E5E5E5"> primer</font><font color="#CCCCCC"> shaders</font><font color="#E5E5E5"> so it looks like</font>

280
00:12:39,439 --> 00:12:47,509
it's processing all the all the pixels

281
00:12:42,439 --> 00:12:49,129
with some some effect<font color="#E5E5E5"> I guess the vertex</font>

282
00:12:47,509 --> 00:12:51,079
shader if you look at it it's a<font color="#CCCCCC"> whole</font>

283
00:12:49,129 --> 00:12:54,079
not a lot of<font color="#CCCCCC"> nothing until you get to</font>

284
00:12:51,079 --> 00:12:58,549
the<font color="#E5E5E5"> very bottom and and it just does</font>

285
00:12:54,079 --> 00:13:00,439
nothing<font color="#CCCCCC"> so we capture</font><font color="#E5E5E5"> the intermediate</font>

286
00:12:58,549 --> 00:13:03,079
representation and the static single

287
00:13:00,439 --> 00:13:06,589
assignment form<font color="#E5E5E5"> its output output by the</font>

288
00:13:03,079 --> 00:13:09,079
<font color="#CCCCCC">Mesa driver</font><font color="#E5E5E5"> nur is our new intermediate</font>

289
00:13:06,589 --> 00:13:11,059
representation and the sim v8 is what's

290
00:13:09,079 --> 00:13:12,498
actually sent down to the<font color="#E5E5E5"> hardware</font>

291
00:13:11,059 --> 00:13:15,679
<font color="#CCCCCC">a</font><font color="#E5E5E5"> same thing</font><font color="#CCCCCC"> for the fragment shader you</font>

292
00:13:12,499 --> 00:13:17,029
<font color="#E5E5E5">can see exactly how the shaders are</font>

293
00:13:15,679 --> 00:13:21,289
<font color="#CCCCCC">compiled this</font><font color="#E5E5E5"> is very</font><font color="#CCCCCC"> helpful for a</font>

294
00:13:17,029 --> 00:13:24,589
driver engineer<font color="#CCCCCC"> or I guess if you're if</font>

295
00:13:21,289 --> 00:13:28,639
<font color="#CCCCCC">you're an elite</font><font color="#E5E5E5"> OpenGL programmer maybe</font>

296
00:13:24,589 --> 00:13:31,459
you could make sense of<font color="#E5E5E5"> this so we spoke</font>

297
00:13:28,639 --> 00:13:33,259
<font color="#E5E5E5">about the batch this is a example</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

298
00:13:31,459 --> 00:13:35,628
batch if you look at a handful of

299
00:13:33,259 --> 00:13:37,759
renders you can select<font color="#E5E5E5"> one and you can</font>

300
00:13:35,629 --> 00:13:42,739
<font color="#E5E5E5">see the this is the binary packet that's</font>

301
00:13:37,759 --> 00:13:48,859
sent down<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the rendering</font><font color="#E5E5E5"> again more</font>

302
00:13:42,739 --> 00:13:51,559
for driver developers<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so let's</font>

303
00:13:48,859 --> 00:13:54,519
go back to experiments if we<font color="#E5E5E5"> we look</font>

304
00:13:51,559 --> 00:13:58,309
more closely<font color="#E5E5E5"> at the at these renders</font>

305
00:13:54,519 --> 00:14:02,689
let's look at the render target<font color="#CCCCCC"> you can</font>

306
00:13:58,309 --> 00:14:03,618
see that if<font color="#E5E5E5"> we stop it render that means</font>

307
00:14:02,689 --> 00:14:06,049
it's going<font color="#E5E5E5"> to show the render target</font>

308
00:14:03,619 --> 00:14:07,819
<font color="#E5E5E5">immediately after this render if you</font>

309
00:14:06,049 --> 00:14:09,519
advance<font color="#CCCCCC"> through these renders and you</font>

310
00:14:07,819 --> 00:14:11,868
can see that it becomes<font color="#E5E5E5"> progressively</font>

311
00:14:09,519 --> 00:14:13,309
blurrier<font color="#CCCCCC"> alright so there's a</font><font color="#E5E5E5"> little</font>

312
00:14:11,869 --> 00:14:15,709
blur and<font color="#E5E5E5"> it's going to</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> even more</font>

313
00:14:13,309 --> 00:14:18,559
blurry or on this render and<font color="#E5E5E5"> then</font>

314
00:14:15,709 --> 00:14:21,138
finally it's<font color="#E5E5E5"> going to compose the those</font>

315
00:14:18,559 --> 00:14:24,379
those blurry images based on<font color="#E5E5E5"> the depth</font>

316
00:14:21,139 --> 00:14:26,029
of each pixel<font color="#CCCCCC"> so in the</font><font color="#E5E5E5"> background</font>

317
00:14:24,379 --> 00:14:28,669
there's a light here that's quite blurry

318
00:14:26,029 --> 00:14:30,649
<font color="#E5E5E5">and if you look at the first render it's</font>

319
00:14:28,669 --> 00:14:32,029
<font color="#E5E5E5">it's in sharp focus so it's it's a depth</font>

320
00:14:30,649 --> 00:14:34,519
of<font color="#E5E5E5"> field</font><font color="#CCCCCC"> effect that they're achieving</font>

321
00:14:32,029 --> 00:14:39,279
<font color="#CCCCCC">with these final</font><font color="#E5E5E5"> renders it's just one</font>

322
00:14:34,519 --> 00:14:43,729
<font color="#E5E5E5">example of how you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> experiment so</font>

323
00:14:39,279 --> 00:14:45,379
this is an expensive<font color="#CCCCCC"> pixel</font><font color="#E5E5E5"> but it may</font>

324
00:14:43,729 --> 00:14:46,669
<font color="#CCCCCC">just be expense our expensive</font><font color="#E5E5E5"> renderer</font>

325
00:14:45,379 --> 00:14:48,559
may be expensive<font color="#CCCCCC"> because</font><font color="#E5E5E5"> there's quite a</font>

326
00:14:46,669 --> 00:14:52,669
lot of<font color="#E5E5E5"> pixels so if you want to look for</font>

327
00:14:48,559 --> 00:14:55,368
expensive per pixel metrics you can

328
00:14:52,669 --> 00:14:57,978
graph on the second axis so I'm<font color="#E5E5E5"> just</font>

329
00:14:55,369 --> 00:15:01,579
<font color="#E5E5E5">going to narrow the list</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> metrics that</font>

330
00:14:57,979 --> 00:15:04,429
<font color="#E5E5E5">are displayed</font><font color="#CCCCCC"> so so now the width</font><font color="#E5E5E5"> of</font>

331
00:15:01,579 --> 00:15:08,329
each bar<font color="#CCCCCC"> represents roughly</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> many</font>

332
00:15:04,429 --> 00:15:13,218
pixels<font color="#E5E5E5"> are drawn and so you might look</font>

333
00:15:08,329 --> 00:15:16,789
<font color="#CCCCCC">for narrow tall bars representing very</font>

334
00:15:13,219 --> 00:15:17,810
expensive renders so let's disable this

335
00:15:16,789 --> 00:15:21,990
<font color="#E5E5E5">one</font><font color="#CCCCCC"> to make</font>

336
00:15:17,810 --> 00:15:27,479
larger so you<font color="#E5E5E5"> might you might focus in</font>

337
00:15:21,990 --> 00:15:29,519
on<font color="#E5E5E5"> this tiny shader here which I guess</font>

338
00:15:27,480 --> 00:15:32,700
because<font color="#E5E5E5"> the way it's drawing this</font>

339
00:15:29,519 --> 00:15:33,930
particular texture<font color="#CCCCCC"> it's not very many</font>

340
00:15:32,700 --> 00:15:40,740
pixels at all but it's quite expensive

341
00:15:33,930 --> 00:15:51,779
per pixel<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so what I want to do</font>

342
00:15:40,740 --> 00:15:55,320
now is explore a little<font color="#E5E5E5"> bit so let's go</font>

343
00:15:51,779 --> 00:15:58,189
back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> standard</font><font color="#E5E5E5"> bar and I'm going to</font>

344
00:15:55,320 --> 00:15:58,190
<font color="#E5E5E5">look for vertices</font>

345
00:16:07,030 --> 00:16:14,230
so I want to go and look on<font color="#CCCCCC"> the render</font>

346
00:16:10,900 --> 00:16:16,780
target for where<font color="#CCCCCC"> our</font><font color="#E5E5E5"> our heroine is</font>

347
00:16:14,230 --> 00:16:19,000
rendered you can see the different

348
00:16:16,780 --> 00:16:22,240
render targets there that are drawn in

349
00:16:19,000 --> 00:16:25,810
this<font color="#E5E5E5"> pass and</font><font color="#CCCCCC"> if we highlight I'll see</font>

350
00:16:22,240 --> 00:16:30,700
that<font color="#E5E5E5"> those are the renders</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> are</font>

351
00:16:25,810 --> 00:16:37,930
drawing her or<font color="#E5E5E5"> body and so see I'll</font>

352
00:16:30,700 --> 00:16:41,500
start here I think<font color="#E5E5E5"> there we go so this</font>

353
00:16:37,930 --> 00:16:43,930
<font color="#CCCCCC">is</font><font color="#E5E5E5"> the full rendering of the character</font>

354
00:16:41,500 --> 00:16:45,340
<font color="#CCCCCC">if you clear before</font><font color="#E5E5E5"> the render and stop</font>

355
00:16:43,930 --> 00:16:49,000
after<font color="#E5E5E5"> all you'll get and the render</font>

356
00:16:45,340 --> 00:16:50,710
<font color="#E5E5E5">target is the character itself so the</font>

357
00:16:49,000 --> 00:16:53,200
reason I<font color="#E5E5E5"> wanted to do this is to show</font>

358
00:16:50,710 --> 00:16:54,790
how you can<font color="#CCCCCC"> go to the uniforms these are</font>

359
00:16:53,200 --> 00:16:57,760
all the uniforms that<font color="#E5E5E5"> are bound</font><font color="#CCCCCC"> for the</font>

360
00:16:54,790 --> 00:17:00,280
render<font color="#E5E5E5"> you can just change one of them</font>

361
00:16:57,760 --> 00:17:04,180
<font color="#E5E5E5">hit return go back</font><font color="#CCCCCC"> to the render target</font>

362
00:17:00,280 --> 00:17:05,859
we know<font color="#E5E5E5"> so you know for</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> who</font>

363
00:17:04,180 --> 00:17:08,410
aren't really<font color="#CCCCCC"> familiar with OpenGL this</font>

364
00:17:05,859 --> 00:17:10,869
is a really kind of interesting<font color="#CCCCCC"> way to</font>

365
00:17:08,410 --> 00:17:12,130
look and dissect a more complicated

366
00:17:10,869 --> 00:17:15,698
frame and understand some<font color="#CCCCCC"> of the</font>

367
00:17:12,130 --> 00:17:21,310
techniques or how the API is<font color="#CCCCCC"> used so</font>

368
00:17:15,699 --> 00:17:24,670
let's put our<font color="#E5E5E5"> head back on but oh I</font>

369
00:17:21,310 --> 00:17:28,089
mentioned shaders<font color="#E5E5E5"> so let's go to the</font>

370
00:17:24,670 --> 00:17:32,430
vertex<font color="#E5E5E5"> shader somewhere at the bottom</font>

371
00:17:28,089 --> 00:17:37,649
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> going to assign a color and so</font>

372
00:17:32,430 --> 00:17:40,150
let's just<font color="#CCCCCC"> go ahead and</font><font color="#E5E5E5"> modify that I</font>

373
00:17:37,650 --> 00:17:43,390
mean if I compile<font color="#CCCCCC"> this I should get a</font>

374
00:17:40,150 --> 00:17:44,750
<font color="#E5E5E5">syntax error saying I made a mistake</font>

375
00:17:43,390 --> 00:17:47,859
but<font color="#CCCCCC"> let's do</font><font color="#E5E5E5"> zero</font>

376
00:17:44,750 --> 00:17:47,859
[Music]

377
00:17:50,000 --> 00:17:58,110
so I'm just<font color="#E5E5E5"> gonna make the red channel</font>

378
00:17:53,960 --> 00:17:59,190
<font color="#E5E5E5">zero with that</font><font color="#CCCCCC"> multiplication and</font><font color="#E5E5E5"> we'll</font>

379
00:17:58,110 --> 00:18:05,610
go look at the render target and now we

380
00:17:59,190 --> 00:18:06,840
have a<font color="#E5E5E5"> Hulk</font><font color="#CCCCCC"> applied</font><font color="#E5E5E5"> heroine</font><font color="#CCCCCC"> so that that</font>

381
00:18:05,610 --> 00:18:08,299
<font color="#E5E5E5">really demonstrates that you can mess</font>

382
00:18:06,840 --> 00:18:10,949
around<font color="#E5E5E5"> with the shader try to figure out</font>

383
00:18:08,299 --> 00:18:12,929
why why<font color="#CCCCCC"> it's miss render you</font><font color="#E5E5E5"> can see how</font>

384
00:18:10,950 --> 00:18:14,400
quickly this is<font color="#E5E5E5"> that mean the fact that</font>

385
00:18:12,929 --> 00:18:16,529
<font color="#E5E5E5">you can do this in a fraction of a</font>

386
00:18:14,400 --> 00:18:21,510
second is far better<font color="#E5E5E5"> than</font><font color="#CCCCCC"> what you had</font>

387
00:18:16,529 --> 00:18:22,860
before with with the other tools so<font color="#E5E5E5"> what</font>

388
00:18:21,510 --> 00:18:26,010
I've been<font color="#CCCCCC"> working</font><font color="#E5E5E5"> on recently</font><font color="#CCCCCC"> is this</font>

389
00:18:22,860 --> 00:18:27,870
hierarchical state tree so<font color="#E5E5E5"> you can</font>

390
00:18:26,010 --> 00:18:30,870
collapse<font color="#E5E5E5"> different items that</font><font color="#CCCCCC"> you don't</font>

391
00:18:27,870 --> 00:18:33,439
want to<font color="#E5E5E5"> look at</font><font color="#CCCCCC"> if you don't know how</font>

392
00:18:30,870 --> 00:18:35,639
I've organized them you can search<font color="#CCCCCC"> for</font>

393
00:18:33,440 --> 00:18:38,520
sub strings like maybe I'm<font color="#CCCCCC"> looking for</font>

394
00:18:35,640 --> 00:18:40,799
the scissor<font color="#CCCCCC"> State if you want to go and</font>

395
00:18:38,520 --> 00:18:43,200
<font color="#E5E5E5">change something</font><font color="#CCCCCC"> the menu shows you the</font>

396
00:18:40,799 --> 00:18:48,510
full set of<font color="#CCCCCC"> available options in the GL</font>

397
00:18:43,200 --> 00:18:51,029
for this particular blend feature and a

398
00:18:48,510 --> 00:18:55,260
lot<font color="#CCCCCC"> of a lot of</font><font color="#E5E5E5"> the different GL state</font>

399
00:18:51,029 --> 00:18:58,799
settings have a set of<font color="#CCCCCC"> 4</font><font color="#E5E5E5"> values so it'll</font>

400
00:18:55,260 --> 00:19:01,950
give you<font color="#CCCCCC"> the index of each one</font><font color="#E5E5E5"> like red</font>

401
00:18:58,799 --> 00:19:06,960
green alpha it might be some<font color="#E5E5E5"> kind of an</font>

402
00:19:01,950 --> 00:19:10,740
<font color="#E5E5E5">abled flag so if I go and disable green</font>

403
00:19:06,960 --> 00:19:12,330
<font color="#CCCCCC">I mean our heroine was</font><font color="#E5E5E5"> green before but</font>

404
00:19:10,740 --> 00:19:13,950
if I say hey there's no green and we

405
00:19:12,330 --> 00:19:17,850
look at the render target<font color="#E5E5E5"> I'll see that</font>

406
00:19:13,950 --> 00:19:22,770
it's<font color="#E5E5E5"> just kind of fading away</font><font color="#CCCCCC"> so it's</font>

407
00:19:17,850 --> 00:19:25,740
fun it's fun<font color="#E5E5E5"> to play with but here's</font>

408
00:19:22,770 --> 00:19:27,240
another<font color="#E5E5E5"> one where</font><font color="#CCCCCC"> coaling is enabled for</font>

409
00:19:25,740 --> 00:19:29,340
<font color="#CCCCCC">this character that</font><font color="#E5E5E5"> means that the</font>

410
00:19:27,240 --> 00:19:30,630
triangles on the back of the character

411
00:19:29,340 --> 00:19:33,240
<font color="#CCCCCC">are not</font><font color="#E5E5E5"> rendered because they're facing</font>

412
00:19:30,630 --> 00:19:35,399
<font color="#E5E5E5">the wrong direction</font><font color="#CCCCCC"> if I change</font><font color="#E5E5E5"> it to</font>

413
00:19:33,240 --> 00:19:36,990
<font color="#CCCCCC">Cole the</font><font color="#E5E5E5"> front of them instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

414
00:19:35,399 --> 00:19:38,489
back<font color="#CCCCCC"> I</font><font color="#E5E5E5"> can look at the render target</font>

415
00:19:36,990 --> 00:19:40,409
I've turned the character around and

416
00:19:38,490 --> 00:19:42,690
she's<font color="#E5E5E5"> decided it's too dangerous to go</font>

417
00:19:40,409 --> 00:19:46,039
after the the diamond and<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> going to</font>

418
00:19:42,690 --> 00:19:50,730
avoid<font color="#CCCCCC"> disaster walk right back out so</font>

419
00:19:46,039 --> 00:19:51,600
yeah so that's that's just<font color="#E5E5E5"> an</font><font color="#CCCCCC"> example of</font>

420
00:19:50,730 --> 00:19:54,240
<font color="#E5E5E5">how you can mess around with these</font>

421
00:19:51,600 --> 00:19:56,459
<font color="#CCCCCC">things and one thing that's interesting</font>

422
00:19:54,240 --> 00:19:58,350
<font color="#E5E5E5">if we go back and look at the final</font>

423
00:19:56,460 --> 00:20:01,860
<font color="#E5E5E5">render I've gone and changed the state</font>

424
00:19:58,350 --> 00:20:03,928
but the character hasn't turned around

425
00:20:01,860 --> 00:20:06,178
the final render<font color="#E5E5E5"> and the reason</font><font color="#CCCCCC"> for that</font>

426
00:20:03,929 --> 00:20:08,940
<font color="#E5E5E5">is that I actually disabled that draw</font>

427
00:20:06,179 --> 00:20:12,240
<font color="#E5E5E5">with the memory</font><font color="#CCCCCC"> barrier in my</font><font color="#E5E5E5"> experiment</font>

428
00:20:08,940 --> 00:20:14,130
so if<font color="#E5E5E5"> I if I</font><font color="#CCCCCC"> turn</font><font color="#E5E5E5"> the frame back on so</font>

429
00:20:12,240 --> 00:20:15,570
it's<font color="#CCCCCC"> rendering properly</font><font color="#E5E5E5"> and look at the</font>

430
00:20:14,130 --> 00:20:19,350
render target<font color="#E5E5E5"> I'll see that the final</font>

431
00:20:15,570 --> 00:20:21,120
<font color="#E5E5E5">frame is rendered with the changes so so</font>

432
00:20:19,350 --> 00:20:22,980
<font color="#E5E5E5">that's my my demo of the features I</font>

433
00:20:21,120 --> 00:20:25,469
think<font color="#E5E5E5"> there's a lot more that can</font><font color="#CCCCCC"> be</font>

434
00:20:22,980 --> 00:20:26,820
<font color="#CCCCCC">done in each tab there's a whole lot of</font>

435
00:20:25,470 --> 00:20:28,500
GL<font color="#E5E5E5"> state that I haven't</font><font color="#CCCCCC"> gone and</font>

436
00:20:26,820 --> 00:20:32,039
implemented<font color="#E5E5E5"> but I think what I've tried</font>

437
00:20:28,500 --> 00:20:35,370
<font color="#CCCCCC">to</font><font color="#E5E5E5"> do is demonstrate that</font><font color="#CCCCCC"> each category</font>

438
00:20:32,039 --> 00:20:37,590
of state<font color="#E5E5E5"> is supported in a you know</font>

439
00:20:35,370 --> 00:20:39,479
meaning<font color="#E5E5E5"> from relatively easy way to</font>

440
00:20:37,590 --> 00:20:41,129
expand and there's a<font color="#E5E5E5"> bunch of</font>

441
00:20:39,480 --> 00:20:45,690
<font color="#CCCCCC">experiments that need to be</font><font color="#E5E5E5"> added</font><font color="#CCCCCC"> but</font>

442
00:20:41,130 --> 00:20:51,600
<font color="#E5E5E5">the</font><font color="#CCCCCC"> proof of concept is there</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> alright</font>

443
00:20:45,690 --> 00:20:55,139
so back<font color="#CCCCCC"> to yes thank you the things</font><font color="#E5E5E5"> that</font>

444
00:20:51,600 --> 00:20:57,000
still<font color="#CCCCCC"> need to</font><font color="#E5E5E5"> be done</font><font color="#CCCCCC"> well one thing I</font>

445
00:20:55,139 --> 00:20:58,769
didn't<font color="#CCCCCC"> talk about is too much is that</font>

446
00:20:57,000 --> 00:21:00,389
<font color="#E5E5E5">the fact that you can have this exact</font>

447
00:20:58,769 --> 00:21:01,860
same<font color="#E5E5E5"> performance profile for Windows is</font>

448
00:21:00,389 --> 00:21:05,699
very important for driver developers

449
00:21:01,860 --> 00:21:08,490
because differences in rendering<font color="#E5E5E5"> will</font>

450
00:21:05,700 --> 00:21:11,370
stand out starkly when you compare two

451
00:21:08,490 --> 00:21:12,870
different<font color="#E5E5E5"> sets of this UI running on</font>

452
00:21:11,370 --> 00:21:14,459
different<font color="#CCCCCC"> platforms</font><font color="#E5E5E5"> because the renders</font>

453
00:21:12,870 --> 00:21:16,649
are exactly the<font color="#CCCCCC"> same it's running the</font>

454
00:21:14,460 --> 00:21:18,590
same GL calls<font color="#E5E5E5"> and so you can easily find</font>

455
00:21:16,649 --> 00:21:21,389
<font color="#E5E5E5">discrepancy in your implementation</font>

456
00:21:18,590 --> 00:21:24,539
<font color="#CCCCCC">things that</font><font color="#E5E5E5"> need to be done there's no</font>

457
00:21:21,389 --> 00:21:26,459
tab for looking at the textures<font color="#CCCCCC"> if you</font>

458
00:21:24,539 --> 00:21:28,320
have if your texture bound<font color="#E5E5E5"> having an</font>

459
00:21:26,460 --> 00:21:29,850
experiment that<font color="#E5E5E5"> will clamp the map level</font>

460
00:21:28,320 --> 00:21:32,250
<font color="#E5E5E5">down so there's not</font><font color="#CCCCCC"> so much texture</font><font color="#E5E5E5"> data</font>

461
00:21:29,850 --> 00:21:33,510
<font color="#E5E5E5">going down</font><font color="#CCCCCC"> is important to see if you if</font>

462
00:21:32,250 --> 00:21:33,960
you<font color="#E5E5E5"> just made textures that are too</font>

463
00:21:33,510 --> 00:21:36,809
large

464
00:21:33,960 --> 00:21:38,880
there's no display of the<font color="#E5E5E5"> geometry or</font>

465
00:21:36,809 --> 00:21:41,309
<font color="#CCCCCC">the vertices</font><font color="#E5E5E5"> so that's something that I</font>

466
00:21:38,880 --> 00:21:42,960
<font color="#CCCCCC">think is of interest to</font><font color="#E5E5E5"> end developers</font>

467
00:21:41,309 --> 00:21:46,799
to try<font color="#E5E5E5"> to figure out</font><font color="#CCCCCC"> okay maybe there's</font>

468
00:21:42,960 --> 00:21:48,570
<font color="#CCCCCC">just so many vertices that I'm stuck at</font>

469
00:21:46,799 --> 00:21:52,340
<font color="#E5E5E5">that part of the fixed fixed function</font>

470
00:21:48,570 --> 00:21:55,950
pipeline<font color="#E5E5E5"> the</font><font color="#CCCCCC"> DEF buffer is</font><font color="#E5E5E5"> not displayed</font>

471
00:21:52,340 --> 00:21:58,139
unity<font color="#E5E5E5"> specifically asked for</font><font color="#CCCCCC"> overdraw</font>

472
00:21:55,950 --> 00:21:59,789
and hotspot visualizations and the

473
00:21:58,139 --> 00:22:01,799
render target<font color="#CCCCCC"> where if you've drawn</font>

474
00:21:59,789 --> 00:22:03,690
<font color="#E5E5E5">twice to the</font><font color="#CCCCCC"> same pixel</font><font color="#E5E5E5"> in the render</font>

475
00:22:01,799 --> 00:22:05,970
target it'll show up as more expensive

476
00:22:03,690 --> 00:22:08,070
<font color="#CCCCCC">helped them figure</font><font color="#E5E5E5"> out if they've got a</font>

477
00:22:05,970 --> 00:22:10,200
<font color="#E5E5E5">problem with their engine there's a</font>

478
00:22:08,070 --> 00:22:12,360
bunch of UI improvements<font color="#CCCCCC"> this is all</font>

479
00:22:10,200 --> 00:22:14,070
written in<font color="#CCCCCC"> qml and so you have to do</font>

480
00:22:12,360 --> 00:22:18,290
quite a<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> of hand tweak</font>

481
00:22:14,070 --> 00:22:21,000
to get the<font color="#CCCCCC"> display</font><font color="#E5E5E5"> exactly how you want</font>

482
00:22:18,290 --> 00:22:22,649
<font color="#E5E5E5">adding support for</font><font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> is I think</font>

483
00:22:21,000 --> 00:22:24,780
the most important thing which is<font color="#E5E5E5"> what</font>

484
00:22:22,650 --> 00:22:27,110
I'm working<font color="#CCCCCC"> on right now</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> another</font>

485
00:22:24,780 --> 00:22:29,910
very important thing<font color="#CCCCCC"> to enable is</font>

486
00:22:27,110 --> 00:22:32,909
Android<font color="#E5E5E5"> there's a whole lot of 3d</font>

487
00:22:29,910 --> 00:22:34,860
applications coming<font color="#E5E5E5"> to Linux platforms</font>

488
00:22:32,910 --> 00:22:38,670
in the Android Play Store<font color="#E5E5E5"> none</font><font color="#CCCCCC"> of those</font>

489
00:22:34,860 --> 00:22:41,040
can be<font color="#E5E5E5"> analyzed</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> your driver or for</font>

490
00:22:38,670 --> 00:22:43,110
your hardware<font color="#E5E5E5"> and so until we need to</font>

491
00:22:41,040 --> 00:22:44,760
get<font color="#E5E5E5"> API trace working on Android</font><font color="#CCCCCC"> so that</font>

492
00:22:43,110 --> 00:22:46,439
we can then capture<font color="#E5E5E5"> the traces</font><font color="#CCCCCC"> and then</font>

493
00:22:44,760 --> 00:22:50,879
analyze them<font color="#E5E5E5"> in this way on</font><font color="#CCCCCC"> some</font>

494
00:22:46,440 --> 00:22:53,690
hardware<font color="#E5E5E5"> so I've had a little bit</font><font color="#CCCCCC"> of</font>

495
00:22:50,880 --> 00:22:57,870
help<font color="#CCCCCC"> from some folks I mentioned</font><font color="#E5E5E5"> before</font>

496
00:22:53,690 --> 00:23:00,450
<font color="#E5E5E5">Lionel has helped me a lot with the</font>

497
00:22:57,870 --> 00:23:02,879
performance analysis metrics and I think

498
00:23:00,450 --> 00:23:04,320
his tool I wish it was being demoed at

499
00:23:02,880 --> 00:23:06,510
<font color="#CCCCCC">Austin as</font><font color="#E5E5E5"> well because it's very</font>

500
00:23:04,320 --> 00:23:09,210
<font color="#CCCCCC">interesting so if you find</font><font color="#E5E5E5"> him here get</font>

501
00:23:06,510 --> 00:23:11,490
him to show you what he's<font color="#CCCCCC"> done one thing</font>

502
00:23:09,210 --> 00:23:13,350
when you take a GL program and you

503
00:23:11,490 --> 00:23:16,590
relink it<font color="#CCCCCC"> you need</font><font color="#E5E5E5"> to reattach a whole</font>

504
00:23:13,350 --> 00:23:18,629
lot<font color="#E5E5E5"> of state from the previous program</font>

505
00:23:16,590 --> 00:23:22,139
<font color="#E5E5E5">and that process can be somewhat</font>

506
00:23:18,630 --> 00:23:25,220
intricate<font color="#CCCCCC"> so for the workloads</font><font color="#E5E5E5"> I've</font>

507
00:23:22,140 --> 00:23:28,560
looked at<font color="#E5E5E5"> I've done it properly</font><font color="#CCCCCC"> but</font>

508
00:23:25,220 --> 00:23:29,850
whenever there's more features in<font color="#E5E5E5"> the GL</font>

509
00:23:28,560 --> 00:23:32,070
that an<font color="#E5E5E5"> application might have used</font>

510
00:23:29,850 --> 00:23:35,820
<font color="#E5E5E5">that's that's where the path becomes</font>

511
00:23:32,070 --> 00:23:38,399
unpaved<font color="#CCCCCC"> Radian metrics is what I'm</font>

512
00:23:35,820 --> 00:23:40,290
implementing now<font color="#E5E5E5"> unfortunately the AMD</font>

513
00:23:38,400 --> 00:23:42,600
performance monitor doesn't display

514
00:23:40,290 --> 00:23:44,010
metrics it just exports<font color="#E5E5E5"> raw counters and</font>

515
00:23:42,600 --> 00:23:45,689
then<font color="#E5E5E5"> you need another</font><font color="#CCCCCC"> application to go</font>

516
00:23:44,010 --> 00:23:48,330
and compose those counters into<font color="#CCCCCC"> usable</font>

517
00:23:45,690 --> 00:23:52,260
metrics like we had displayed<font color="#CCCCCC"> so that's</font>

518
00:23:48,330 --> 00:23:54,120
a key<font color="#CCCCCC"> problem I'm trying to fix now</font><font color="#E5E5E5"> if</font>

519
00:23:52,260 --> 00:23:55,110
anyone's interested<font color="#E5E5E5"> there's a whole lot</font>

520
00:23:54,120 --> 00:23:56,639
<font color="#CCCCCC">of features that</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> worked on</font>

521
00:23:55,110 --> 00:23:59,070
independently and I'd welcome

522
00:23:56,640 --> 00:24:03,020
collaborators<font color="#E5E5E5"> so thanks for listening</font>

523
00:23:59,070 --> 00:24:03,020
<font color="#CCCCCC">any questions yeah</font>

524
00:24:03,110 --> 00:24:09,059
so yeah<font color="#CCCCCC"> the</font><font color="#E5E5E5"> reason</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> this doesn't</font>

525
00:24:06,590 --> 00:24:11,520
address<font color="#E5E5E5"> Vulcan at all is</font><font color="#CCCCCC"> because there's</font>

526
00:24:09,059 --> 00:24:14,970
<font color="#CCCCCC">no tracing support and API trace but</font>

527
00:24:11,520 --> 00:24:17,790
Vulcan<font color="#E5E5E5"> certainly could be addressed with</font>

528
00:24:14,970 --> 00:24:19,679
a similar tool there<font color="#E5E5E5"> is a tracing</font>

529
00:24:17,790 --> 00:24:21,570
infrastructure that's implemented<font color="#E5E5E5"> by</font>

530
00:24:19,679 --> 00:24:23,700
lunar<font color="#E5E5E5"> G and render dock has a certain</font>

531
00:24:21,570 --> 00:24:25,320
<font color="#E5E5E5">amount of tracing and so there's no</font>

532
00:24:23,700 --> 00:24:28,169
<font color="#E5E5E5">reason why the features couldn't be</font>

533
00:24:25,320 --> 00:24:31,790
mapped on I just haven't done that yet

534
00:24:28,169 --> 00:24:31,790
<font color="#E5E5E5">because I'm focusing on the GL workload</font>

535
00:24:41,450 --> 00:24:47,010
<font color="#CCCCCC">so in the 965 driver you can set an</font>

536
00:24:44,220 --> 00:24:51,140
environment<font color="#CCCCCC"> variable to dump the batch</font>

537
00:24:47,010 --> 00:24:54,299
<font color="#E5E5E5">and you can set an</font><font color="#CCCCCC"> environment a dump</font>

538
00:24:51,140 --> 00:24:56,820
<font color="#E5E5E5">the sim</font><font color="#CCCCCC"> d16 so we</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> captured</font><font color="#E5E5E5"> that on</font>

539
00:24:54,299 --> 00:24:58,980
standard out the batch data is like I

540
00:24:56,820 --> 00:25:00,418
said it's so much so there's a special

541
00:24:58,980 --> 00:25:02,700
<font color="#E5E5E5">patch that you apply to</font><font color="#CCCCCC"> mesa and</font>

542
00:25:00,419 --> 00:25:04,679
recompile<font color="#E5E5E5"> it to let you turn on and off</font>

543
00:25:02,700 --> 00:25:05,850
that environment variable<font color="#E5E5E5"> just before</font>

544
00:25:04,679 --> 00:25:08,400
you begin<font color="#E5E5E5"> your render</font><font color="#CCCCCC"> sudden you don't</font>

545
00:25:05,850 --> 00:25:11,120
<font color="#CCCCCC">have</font><font color="#E5E5E5"> to pay that penalty for the whole</font>

546
00:25:08,400 --> 00:25:11,120
render yeah

547
00:25:40,900 --> 00:25:47,720
how did I capture<font color="#E5E5E5"> the frame yeah so what</font>

548
00:25:44,809 --> 00:25:50,299
to get<font color="#E5E5E5"> the frame you use API trace you</font>

549
00:25:47,720 --> 00:25:53,120
say<font color="#E5E5E5"> API trace trace this GL workload and</font>

550
00:25:50,299 --> 00:25:56,150
it serializes every single GL call into

551
00:25:53,120 --> 00:25:58,070
a file<font color="#E5E5E5"> and so before</font><font color="#CCCCCC"> I started the</font>

552
00:25:56,150 --> 00:26:00,770
<font color="#CCCCCC">presentation I played through the frame</font>

553
00:25:58,070 --> 00:26:09,110
<font color="#E5E5E5">up until frame 150 which is the one we</font>

554
00:26:00,770 --> 00:26:11,179
were looking<font color="#E5E5E5"> at and stopped any OpenGL</font>

555
00:26:09,110 --> 00:26:13,428
program<font color="#E5E5E5"> almost every jail</font><font color="#CCCCCC"> program on</font>

556
00:26:11,179 --> 00:26:15,530
Linux if it isn't traceable by<font color="#E5E5E5"> API trace</font>

557
00:26:13,429 --> 00:26:17,740
the developers have got then changed<font color="#E5E5E5"> API</font>

558
00:26:15,530 --> 00:26:17,740
trace

559
00:26:20,560 --> 00:26:23,629
[Music]

560
00:26:29,980 --> 00:26:34,790
yeah sure<font color="#E5E5E5"> yeah that's what that's what</font>

561
00:26:33,440 --> 00:26:37,370
application engineers do all the time

562
00:26:34,790 --> 00:26:39,050
they capture<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> whatever</font><font color="#CCCCCC"> Grand</font>

563
00:26:37,370 --> 00:26:40,669
<font color="#CCCCCC">Theft Auto and</font><font color="#E5E5E5"> then and there's actually</font>

564
00:26:39,050 --> 00:26:41,960
some tear downs of Grand<font color="#E5E5E5"> Theft Auto on</font>

565
00:26:40,670 --> 00:26:43,310
<font color="#CCCCCC">windows where they go through the</font>

566
00:26:41,960 --> 00:26:46,490
different renders and then show<font color="#E5E5E5"> you the</font>

567
00:26:43,310 --> 00:26:48,080
<font color="#E5E5E5">techniques and you could conceivably go</font>

568
00:26:46,490 --> 00:26:52,460
and export the vertex data and the

569
00:26:48,080 --> 00:26:54,800
texture data<font color="#E5E5E5"> and that wouldn't be legal</font>

570
00:26:52,460 --> 00:27:01,510
but<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know you can go and and hack</font>

571
00:26:54,800 --> 00:27:01,510
away<font color="#E5E5E5"> don't okay thank you</font>

572
00:27:07,240 --> 00:27:10,359
[Music]

